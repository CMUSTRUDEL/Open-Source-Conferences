Title: Chris McDonough - Using Supervisor For Fun And Profit - PyCon 2015
Publication date: 2015-04-11
Playlist: PyCon 2015
Description: 
	"Speaker: Chris McDonough

Supervisor is a popular Python application that lets you control and monitor process state on UNIX-like systems.  This talk describes what it is, and how to use it effectively to make your application deployments better.

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:00,030 --> 00:00:07,470
oh wow

00:00:04,549 --> 00:00:09,330
very nice can everyone hear me good I

00:00:07,470 --> 00:00:11,820
just wanted to thank the organizers of

00:00:09,330 --> 00:00:13,740
PyCon so far it's been great if we can

00:00:11,820 --> 00:00:19,590
just demand that a lot of fun so far

00:00:13,740 --> 00:00:24,240
thank you my name is Chris McDonough

00:00:19,590 --> 00:00:26,130
I am a open source software developer

00:00:24,240 --> 00:00:29,699
that hails from the beautiful state of

00:00:26,130 --> 00:00:31,949
Virginia and I am the original author of

00:00:29,699 --> 00:00:33,120
the supervisor process controller which

00:00:31,949 --> 00:00:35,489
I'll be talking about today I also

00:00:33,120 --> 00:00:38,550
developed pyramid web framework and a

00:00:35,489 --> 00:00:40,100
bunch of other stuff I work for a

00:00:38,550 --> 00:00:43,170
company named a genderless consulting

00:00:40,100 --> 00:00:46,200
there are very small consulting company

00:00:43,170 --> 00:00:47,850
if anyone needs help in Python or either

00:00:46,200 --> 00:00:53,190
in stuff that we've done or else

00:00:47,850 --> 00:00:55,829
otherwise let me know this is who I am

00:00:53,190 --> 00:00:57,559
NOT I feel like a bit of a fraud up here

00:00:55,829 --> 00:00:59,850
today because I haven't done much

00:00:57,559 --> 00:01:01,079
maintenance or improvement on supervisor

00:00:59,850 --> 00:01:02,489
in a long time the guy who's really

00:01:01,079 --> 00:01:04,949
responsible and deserves all the credit

00:01:02,489 --> 00:01:06,479
is a guy named Mike NAB Oresme who took

00:01:04,949 --> 00:01:09,119
over maintenance maybe five years ago

00:01:06,479 --> 00:01:11,250
and it's done a fantastic job so I'm

00:01:09,119 --> 00:01:13,830
just here to tell you how it works and I

00:01:11,250 --> 00:01:15,180
do contribute now and again and I'll

00:01:13,830 --> 00:01:19,670
probably contributed more in the future

00:01:15,180 --> 00:01:23,310
but he's the guy who does most of work

00:01:19,670 --> 00:01:26,130
so what is supervisor well supervisor is

00:01:23,310 --> 00:01:28,439
a Python application that lets you

00:01:26,130 --> 00:01:33,090
control process State on unix-like

00:01:28,439 --> 00:01:35,310
operating systems Linux OS 10 BSD I

00:01:33,090 --> 00:01:36,810
think it probably still runs on the

00:01:35,310 --> 00:01:38,430
various solaris offshoots although I

00:01:36,810 --> 00:01:43,020
don't think we've tested it that

00:01:38,430 --> 00:01:45,030
recently on there and so what does that

00:01:43,020 --> 00:01:47,189
mean well it's it's a program that runs

00:01:45,030 --> 00:01:50,329
other programs it's very it's a it's a

00:01:47,189 --> 00:01:53,430
Python program it's extensible in Python

00:01:50,329 --> 00:01:54,720
you can you can run Python programs with

00:01:53,430 --> 00:01:56,189
it but the things that run under it do

00:01:54,720 --> 00:01:57,920
not need to be Python programs they can

00:01:56,189 --> 00:02:01,710
be any any old kind of program like

00:01:57,920 --> 00:02:03,659
Redis or Apache or nginx or Postgres or

00:02:01,710 --> 00:02:06,060
whatever it's it is not a Python

00:02:03,659 --> 00:02:09,060
specific thing so this talk is is really

00:02:06,060 --> 00:02:11,250
aimed more at at systems administrators

00:02:09,060 --> 00:02:11,700
who need who need tools to keep things

00:02:11,250 --> 00:02:13,890
running

00:02:11,700 --> 00:02:16,290
and also maybe developers or

00:02:13,890 --> 00:02:18,240
or development managers who need a tool

00:02:16,290 --> 00:02:20,880
to help people build development

00:02:18,240 --> 00:02:22,950
environments that are easy to set up and

00:02:20,880 --> 00:02:25,730
supervisors something that'll help you

00:02:22,950 --> 00:02:25,730
with with either of those things

00:02:26,520 --> 00:02:32,550
it is configuration file driven which

00:02:30,540 --> 00:02:35,160
means you have a configuration file that

00:02:32,550 --> 00:02:37,020
represents some set of processes the set

00:02:35,160 --> 00:02:38,250
of processes is usually related to some

00:02:37,020 --> 00:02:41,010
sort of project you're on let's say

00:02:38,250 --> 00:02:43,800
you're you're writing an application

00:02:41,010 --> 00:02:47,730
that requires a web server requires a

00:02:43,800 --> 00:02:50,370
database and it requires like a caching

00:02:47,730 --> 00:02:55,620
thing like memcache or Redis or

00:02:50,370 --> 00:02:58,230
something it's sort of like systemd or

00:02:55,620 --> 00:03:00,600
upstarts in that those those programs

00:02:58,230 --> 00:03:02,700
also run other programs but supervisor

00:03:00,600 --> 00:03:04,440
was never meant to be run as pid' one

00:03:02,700 --> 00:03:06,540
it's not it was never meant to be run

00:03:04,440 --> 00:03:08,580
directly from you know as your computer

00:03:06,540 --> 00:03:11,010
boots it's just an ad hoc per project

00:03:08,580 --> 00:03:12,630
sort of thing so rather than try to

00:03:11,010 --> 00:03:15,860
explain the configuration file format

00:03:12,630 --> 00:03:15,860
I'll just show it to you really quickly

00:03:18,680 --> 00:03:23,549
we have several sections this this is a

00:03:21,720 --> 00:03:25,709
supervisor decomp that's the

00:03:23,549 --> 00:03:27,150
conventional name for the file we have

00:03:25,709 --> 00:03:30,690
several sections in there one is about

00:03:27,150 --> 00:03:32,519
the server the supervisor is a sort of

00:03:30,690 --> 00:03:34,680
client-server program there's a program

00:03:32,519 --> 00:03:36,000
name supervisor D which starts up and

00:03:34,680 --> 00:03:37,290
that's that's what starts all your other

00:03:36,000 --> 00:03:39,030
programs and keeps and keeps them

00:03:37,290 --> 00:03:42,900
running and then there are a number of

00:03:39,030 --> 00:03:44,340
ways to actually get into to control the

00:03:42,900 --> 00:03:48,180
processes that get started after they

00:03:44,340 --> 00:03:51,840
start running so all communications with

00:03:48,180 --> 00:03:53,579
supervisor D happens over HTTP and it's

00:03:51,840 --> 00:03:57,410
you know basically a web server so we're

00:03:53,579 --> 00:04:01,110
telling it here run an HP server on port

00:03:57,410 --> 00:04:03,390
9000 and one of local hosts you can also

00:04:01,110 --> 00:04:06,959
if it's if it's if that bothers you you

00:04:03,390 --> 00:04:09,090
can use a UNIX socket instead of a TCP

00:04:06,959 --> 00:04:10,560
socket so that nobody no one can get in

00:04:09,090 --> 00:04:11,910
if they have access to your local

00:04:10,560 --> 00:04:15,329
machine and you can protect that with a

00:04:11,910 --> 00:04:18,769
with a file thing but in any case in

00:04:15,329 --> 00:04:21,090
either case it's running an HTTP server

00:04:18,769 --> 00:04:23,789
then we have sort of this generic

00:04:21,090 --> 00:04:26,700
configuration stuff that is about

00:04:23,789 --> 00:04:27,450
supervisor D itself where it's log file

00:04:26,700 --> 00:04:29,190
goes and some

00:04:27,450 --> 00:04:33,060
there are some other things not very

00:04:29,190 --> 00:04:36,000
important right now we we given an RPC

00:04:33,060 --> 00:04:37,890
interface this is you this is one area

00:04:36,000 --> 00:04:39,810
where supervisor is extensible you can

00:04:37,890 --> 00:04:41,640
actually add more commands to to

00:04:39,810 --> 00:04:43,890
supervisor under the hood by adding more

00:04:41,640 --> 00:04:46,560
of these RPC interfaces this is the main

00:04:43,890 --> 00:04:48,510
one this is the one that's the

00:04:46,560 --> 00:04:52,950
controlling programs use when they when

00:04:48,510 --> 00:04:54,900
they connect to it and then we also have

00:04:52,950 --> 00:04:56,820
this this section in here that's read by

00:04:54,900 --> 00:04:58,260
the controller program which I'll show

00:04:56,820 --> 00:04:59,820
you later it's not very important right

00:04:58,260 --> 00:05:03,240
now but it the only important thing is

00:04:59,820 --> 00:05:05,550
that it points the same to the same port

00:05:03,240 --> 00:05:08,400
9001 as the as the as the daemon is

00:05:05,550 --> 00:05:10,110
running so all that said that's no

00:05:08,400 --> 00:05:11,940
that's not much fun that's all just sort

00:05:10,110 --> 00:05:13,230
of bookkeeping the thing that most

00:05:11,940 --> 00:05:15,030
people are interested in running other

00:05:13,230 --> 00:05:18,240
programs and and this is the simplest

00:05:15,030 --> 00:05:19,730
possible way this program : clock thing

00:05:18,240 --> 00:05:22,380
here is the simplest possible

00:05:19,730 --> 00:05:26,280
configuration to run a command to run a

00:05:22,380 --> 00:05:30,510
program and if you'll notice here the

00:05:26,280 --> 00:05:32,730
command equals line is points at a

00:05:30,510 --> 00:05:34,110
Python script it happens to point at a

00:05:32,730 --> 00:05:35,700
Python script this is just for purposes

00:05:34,110 --> 00:05:38,190
of demonstration like I said it'll run

00:05:35,700 --> 00:05:39,540
to rise over run anything as a matter of

00:05:38,190 --> 00:05:41,700
fact I should I should mention that most

00:05:39,540 --> 00:05:43,920
people who run supervisor couldn't care

00:05:41,700 --> 00:05:46,050
less about Python they you know their

00:05:43,920 --> 00:05:48,000
PHP people or Ruby people or Java people

00:05:46,050 --> 00:05:53,430
or whatever they don't even couldn't

00:05:48,000 --> 00:05:55,920
care less about Python so this when we

00:05:53,430 --> 00:05:57,300
when we startups supervisor D in this

00:05:55,920 --> 00:05:59,790
configuration which I'll do in a second

00:05:57,300 --> 00:06:01,230
it's going to run one instance of this

00:05:59,790 --> 00:06:03,930
program this clock that PI program which

00:06:01,230 --> 00:06:07,320
I'll pull up really quickly to show you

00:06:03,930 --> 00:06:10,590
what it does this clock that PI program

00:06:07,320 --> 00:06:13,710
is just a loop it prints the time and

00:06:10,590 --> 00:06:15,180
then it sleeps two seconds okay so this

00:06:13,710 --> 00:06:16,140
is just you know this could be anything

00:06:15,180 --> 00:06:16,830
this is just what I'm using to

00:06:16,140 --> 00:06:20,370
demonstrate the thing

00:06:16,830 --> 00:06:23,610
so I'm gonna go over to my terminal

00:06:20,370 --> 00:06:27,810
window here I'm going to startup

00:06:23,610 --> 00:06:32,190
supervisor D this this bit of this dash

00:06:27,810 --> 00:06:33,510
C flag that I'm using here is a is

00:06:32,190 --> 00:06:35,490
optional but this is how you specify

00:06:33,510 --> 00:06:40,320
which which configuration file to use

00:06:35,490 --> 00:06:41,190
and usually you'd start it like this in

00:06:40,320 --> 00:06:44,660
it and it's going to

00:06:41,190 --> 00:06:44,660
itself in the in the background loops

00:06:51,710 --> 00:06:56,820
it's going to background itself like

00:06:53,760 --> 00:06:57,900
that and that's you know typically you

00:06:56,820 --> 00:06:59,220
get control back at the tournament when

00:06:57,900 --> 00:07:00,810
you start supervisor D I'm actually

00:06:59,220 --> 00:07:02,840
going to shut it down and I'm going to

00:07:00,810 --> 00:07:08,100
I'm gonna start it in foreground mode

00:07:02,840 --> 00:07:11,310
under a set of flags - n means don't

00:07:08,100 --> 00:07:13,230
demonize and - Edie bug means print

00:07:11,310 --> 00:07:15,000
debugging info to the screen so we'll be

00:07:13,230 --> 00:07:21,380
able to see it sort of doing it so it's

00:07:15,000 --> 00:07:25,530
bookkeeping as it runs here so sort of

00:07:21,380 --> 00:07:27,840
interesting stuff it says that the

00:07:25,530 --> 00:07:31,290
supervisor prop or the clock program

00:07:27,840 --> 00:07:41,220
it's spawned the clock with pid' 2848

00:07:31,290 --> 00:07:43,290
down here sorry and we can see that

00:07:41,220 --> 00:07:45,480
clock is indeed running and it's

00:07:43,290 --> 00:07:47,010
spitting out stuff to its own standard

00:07:45,480 --> 00:07:50,610
out which is then captured by supervisor

00:07:47,010 --> 00:07:53,610
and supervisor then lets you tale the

00:07:50,610 --> 00:07:56,370
log file or sort of just examine the log

00:07:53,610 --> 00:08:00,150
file from the programs standard out very

00:07:56,370 --> 00:08:01,350
simple not very complicated so now that

00:08:00,150 --> 00:08:03,000
we've seen the configuration file and

00:08:01,350 --> 00:08:05,580
sort of how to start it I'm gonna go

00:08:03,000 --> 00:08:08,630
back I'm actually going to stop it again

00:08:05,580 --> 00:08:08,630
and when I stop it

00:08:08,760 --> 00:08:13,650
the programs that it started up are now

00:08:11,610 --> 00:08:15,030
I've stopped so once you stop supervisor

00:08:13,650 --> 00:08:22,500
the programs that it started up have

00:08:15,030 --> 00:08:24,150
gone let's go back to my slides here so

00:08:22,500 --> 00:08:25,830
once we have some programs running

00:08:24,150 --> 00:08:27,240
that's fine

00:08:25,830 --> 00:08:28,620
but we're gonna want to control them

00:08:27,240 --> 00:08:30,150
somewhat we're gonna want to start and

00:08:28,620 --> 00:08:33,089
stop them and see there see their output

00:08:30,150 --> 00:08:36,150
and and and maybe even write a little

00:08:33,089 --> 00:08:38,760
program that lets us examines their

00:08:36,150 --> 00:08:40,979
state as they're running so the

00:08:38,760 --> 00:08:44,250
supervisor lets the supervisor D daemon

00:08:40,979 --> 00:08:47,280
actually lets you use a web interface a

00:08:44,250 --> 00:08:51,180
command-line tool or you can use XML RPC

00:08:47,280 --> 00:08:54,330
who here has used XML RPC before okay

00:08:51,180 --> 00:08:55,110
lots of people so XML RPC is just it

00:08:54,330 --> 00:08:56,640
unfortunately has the

00:08:55,110 --> 00:08:59,220
as the letters XML on its name but you

00:08:56,640 --> 00:09:02,430
never you never see XML it's just a it's

00:08:59,220 --> 00:09:04,290
just a way to talk to a remote process

00:09:02,430 --> 00:09:07,230
over HTTP that's that's very handy and

00:09:04,290 --> 00:09:11,519
and supervisor uses it heavily so you

00:09:07,230 --> 00:09:13,950
can use the same api's that the built-in

00:09:11,519 --> 00:09:16,440
tools used to control process date if

00:09:13,950 --> 00:09:19,260
you want to do that so the first thing

00:09:16,440 --> 00:09:20,550
I'm going to we'll see here I'm gonna go

00:09:19,260 --> 00:09:22,790
back and start it up again so we can see

00:09:20,550 --> 00:09:22,790
it

00:09:27,230 --> 00:09:31,190
so this is just a jiff of the web

00:09:29,510 --> 00:09:34,250
interface the web interface the

00:09:31,190 --> 00:09:35,770
supervisor is the controlling programs

00:09:34,250 --> 00:09:40,720
that are running under supervisor is

00:09:35,770 --> 00:09:43,250
pretty pretty weak it doesn't do a lot

00:09:40,720 --> 00:09:45,080
there are lots of things that you can do

00:09:43,250 --> 00:09:46,910
under other other ways to get into it

00:09:45,080 --> 00:09:48,170
the controller program and the XML RPC

00:09:46,910 --> 00:09:54,860
interface that the web interface doesn't

00:09:48,170 --> 00:09:58,130
do but it's handy and it works I'm gonna

00:09:54,860 --> 00:09:59,750
go to it now and we can see that that

00:09:58,130 --> 00:10:02,750
program that I started off called clock

00:09:59,750 --> 00:10:04,430
is running and it's been up for 30

00:10:02,750 --> 00:10:06,500
seconds that you can see it spit all

00:10:04,430 --> 00:10:07,820
that good stuff and basically all you

00:10:06,500 --> 00:10:11,900
can do in the web interface is restart

00:10:07,820 --> 00:10:13,970
it stop it clear its log or or C it's C

00:10:11,900 --> 00:10:17,360
its log in real time and it's you know

00:10:13,970 --> 00:10:21,620
so we can hit that hit restart get

00:10:17,360 --> 00:10:23,810
restarted okay not very interesting the

00:10:21,620 --> 00:10:26,270
way that I usually use supervisors I

00:10:23,810 --> 00:10:29,720
actually use the command line called

00:10:26,270 --> 00:10:32,660
supervisor cuddle which is the sort of

00:10:29,720 --> 00:10:34,760
client interface to the to the same

00:10:32,660 --> 00:10:37,520
program it also takes this the

00:10:34,760 --> 00:10:40,160
configuration file as an option and we

00:10:37,520 --> 00:10:42,860
can see that when we use it it's a

00:10:40,160 --> 00:10:46,310
little little wonky here because it's

00:10:42,860 --> 00:10:49,670
wrapping but okay and now it's not

00:10:46,310 --> 00:10:52,190
wrapping anymore we can see that when I

00:10:49,670 --> 00:10:53,900
type status or hit enter I can see all

00:10:52,190 --> 00:10:57,080
the programs that are running under

00:10:53,900 --> 00:10:58,820
supervisor and you can see their kids

00:10:57,080 --> 00:11:00,200
and how long they've been around for so

00:10:58,820 --> 00:11:02,960
we have one program running now it's the

00:11:00,200 --> 00:11:06,490
clock program and well what can we do

00:11:02,960 --> 00:11:10,520
with clock well we can tale its output

00:11:06,490 --> 00:11:13,130
like that so we see that it's doing

00:11:10,520 --> 00:11:20,930
stuff in the background we can restart

00:11:13,130 --> 00:11:23,560
it all right we can we can stop it it's

00:11:20,930 --> 00:11:23,560
right twice a day

00:11:24,329 --> 00:11:29,829
and as we do these things we can see

00:11:27,550 --> 00:11:31,839
that indeed this you know the status of

00:11:29,829 --> 00:11:35,470
this thing is now stops as if we stopped

00:11:31,839 --> 00:11:38,380
it we can take a look at supervisors own

00:11:35,470 --> 00:11:40,959
log file but through the main tail

00:11:38,380 --> 00:11:43,480
command and see what it's doing to try

00:11:40,959 --> 00:11:44,380
to stop the thing you know we can get it

00:11:43,480 --> 00:11:53,579
to get a sense of what's going on the

00:11:44,380 --> 00:11:53,579
background so I am going to go ahead and

00:11:56,220 --> 00:12:01,630
so we've seen we've seen that we could

00:11:58,269 --> 00:12:03,519
stop we can start we can restart we can

00:12:01,630 --> 00:12:07,810
do a status we can do a tail we can do a

00:12:03,519 --> 00:12:09,640
mane tail we can also do a reload which

00:12:07,810 --> 00:12:11,970
rereads the configuration file and

00:12:09,640 --> 00:12:15,040
restarts basically restarts supervisor d

00:12:11,970 --> 00:12:18,130
which is useful sometimes or we can shut

00:12:15,040 --> 00:12:19,420
down supervisor so from there these are

00:12:18,130 --> 00:12:23,920
sort of the basic things you can do with

00:12:19,420 --> 00:12:25,959
processes more advanced things you can

00:12:23,920 --> 00:12:28,320
do with supervisor coudl is you can

00:12:25,959 --> 00:12:32,079
actually change the configuration file

00:12:28,320 --> 00:12:37,720
add another section I'm gonna I'm gonna

00:12:32,079 --> 00:12:41,699
try this here well we'll just go ahead

00:12:37,720 --> 00:12:41,699
and uncomment one of these things

00:12:44,100 --> 00:12:55,899
uncomment this cat program and we will

00:12:48,610 --> 00:12:57,970
go and we'll say avail we're gonna

00:12:55,899 --> 00:12:59,740
reread the configuration file it's

00:12:57,970 --> 00:13:03,160
telling us that we added this this thing

00:12:59,740 --> 00:13:05,680
called cat type avail again you can see

00:13:03,160 --> 00:13:07,269
that clock is already running we don't

00:13:05,680 --> 00:13:10,750
have to stop we don't have to stop

00:13:07,269 --> 00:13:16,920
supervisor to start up this cat program

00:13:10,750 --> 00:13:16,920
that we're going to run we say start cat

00:13:23,029 --> 00:13:33,389
update right start cat start car don't

00:13:30,059 --> 00:13:35,550
start the car okay so we can see that

00:13:33,389 --> 00:13:37,379
now we've we've sort of dynamically

00:13:35,550 --> 00:13:41,549
added a process by changing config file

00:13:37,379 --> 00:13:43,679
and and that's that sort of the advanced

00:13:41,549 --> 00:13:45,779
stuff you can do with it you can also go

00:13:43,679 --> 00:13:51,259
into the foreground of a program so I

00:13:45,779 --> 00:13:51,259
can go to the foreground of clock sorry

00:13:55,939 --> 00:14:02,129
and I can type to cat and then paste

00:14:00,569 --> 00:14:04,170
back stuff to me not all that

00:14:02,129 --> 00:14:04,949
interesting but but you can't get in the

00:14:04,170 --> 00:14:07,079
foreground of stuff so you can

00:14:04,949 --> 00:14:10,199
communicate with processes so supervisor

00:14:07,079 --> 00:14:13,410
could always sort of the the you know

00:14:10,199 --> 00:14:15,839
the way that I usually use supervisor or

00:14:13,410 --> 00:14:19,769
at least control process processes that

00:14:15,839 --> 00:14:20,970
run under supervisor some interesting

00:14:19,769 --> 00:14:23,160
things that you can do with supervisor

00:14:20,970 --> 00:14:27,720
settings you can actually run more than

00:14:23,160 --> 00:14:33,240
one instance of a program so if I go

00:14:27,720 --> 00:14:35,459
here and uncomment this stuff by just

00:14:33,240 --> 00:14:38,399
having having a single program statement

00:14:35,459 --> 00:14:41,069
in here and putting some hair using the

00:14:38,399 --> 00:14:43,829
number ox configuration thing and the

00:14:41,069 --> 00:14:46,079
process name configuration thing when I

00:14:43,829 --> 00:14:53,220
restart supervisor I'm just going to do

00:14:46,079 --> 00:14:55,619
this to do that you'll see that I now

00:14:53,220 --> 00:14:57,329
have ten cat programs running under it

00:14:55,619 --> 00:14:59,970
instead of just one so this is useful if

00:14:57,329 --> 00:15:01,529
you if you have if you want to have four

00:14:59,970 --> 00:15:04,049
web servers running you don't have to

00:15:01,529 --> 00:15:05,970
have four or four individual things in

00:15:04,049 --> 00:15:12,299
the configuration file to run them up to

00:15:05,970 --> 00:15:16,589
run them in so the final way that you

00:15:12,299 --> 00:15:21,529
can communicate with supervisor is to

00:15:16,589 --> 00:15:21,529
use it's RP it's XML RPC API thank you

00:15:23,889 --> 00:15:33,800
and in order to do that I'm gonna show

00:15:26,750 --> 00:15:40,339
you show you a file here this is

00:15:33,800 --> 00:15:42,380
something that that opens up a

00:15:40,339 --> 00:15:46,130
connection to the supervisor process by

00:15:42,380 --> 00:15:48,050
going to localhost 9001 RPC - and it

00:15:46,130 --> 00:15:50,029
will print the supervisor state and

00:15:48,050 --> 00:15:52,850
we'll get process information about a

00:15:50,029 --> 00:15:59,839
program name clock so when I run this

00:15:52,850 --> 00:16:01,790
this is just standard standard Python we

00:15:59,839 --> 00:16:05,449
could see that it's printing stuff the

00:16:01,790 --> 00:16:06,709
first first sort of dictionary thing is

00:16:05,449 --> 00:16:09,350
about supervisor it's tell if it's

00:16:06,709 --> 00:16:12,170
supervisor is in state one and it's in

00:16:09,350 --> 00:16:13,970
state name running the second dictionary

00:16:12,170 --> 00:16:15,500
here is all about the clock program and

00:16:13,970 --> 00:16:16,850
it tells us what the log file is and all

00:16:15,500 --> 00:16:19,279
that stuff so you can imagine you can

00:16:16,850 --> 00:16:21,560
interrogate this thing and and and write

00:16:19,279 --> 00:16:28,279
some interesting programs about the back

00:16:21,560 --> 00:16:30,440
controlling process data so that's all

00:16:28,279 --> 00:16:33,110
about sort of dinette you know in real

00:16:30,440 --> 00:16:34,519
time controlling it and having maybe a

00:16:33,110 --> 00:16:35,990
development environment where you do

00:16:34,519 --> 00:16:38,029
that stuff and stopping and starting

00:16:35,990 --> 00:16:40,819
programs supervisor was also pretty

00:16:38,029 --> 00:16:43,610
useful in a production context because

00:16:40,819 --> 00:16:46,519
by default if something exits

00:16:43,610 --> 00:16:48,680
unexpectedly an unexpectedly can be

00:16:46,519 --> 00:16:51,850
defined in several ways it's it's got a

00:16:48,680 --> 00:16:54,470
default but out of the box of something

00:16:51,850 --> 00:16:57,920
exits with any status code other than

00:16:54,470 --> 00:16:58,819
zero or two it will try to restart that

00:16:57,920 --> 00:17:00,620
process for you

00:16:58,819 --> 00:17:01,819
if it can't restart it for you it backs

00:17:00,620 --> 00:17:03,470
off for a little while you know it

00:17:01,819 --> 00:17:04,429
doesn't doesn't continue to flap it

00:17:03,470 --> 00:17:06,470
backs off for a little while and then

00:17:04,429 --> 00:17:09,049
tries to start again and eventually sort

00:17:06,470 --> 00:17:10,819
of gives up but especially if you have

00:17:09,049 --> 00:17:12,709
something that just kind of you can't

00:17:10,819 --> 00:17:14,000
fix right now you know you don't know

00:17:12,709 --> 00:17:16,400
why's crash and get a seg fault or

00:17:14,000 --> 00:17:20,150
something every once in a while it's

00:17:16,400 --> 00:17:22,280
really useful because it'll crash and

00:17:20,150 --> 00:17:24,470
supervisor just says out it crash don't

00:17:22,280 --> 00:17:27,850
restarted so that's that's typically

00:17:24,470 --> 00:17:27,850
typically people enjoyed that a lot

00:17:31,470 --> 00:17:37,230
the way that this works like I said it

00:17:34,700 --> 00:17:41,130
it's initially in this in this top state

00:17:37,230 --> 00:17:43,080
called stopped each process and it's it

00:17:41,130 --> 00:17:45,210
goes into the starting state and then it

00:17:43,080 --> 00:17:47,700
might go into back off if it can't if it

00:17:45,210 --> 00:17:49,710
can't start right away it might fail and

00:17:47,700 --> 00:17:51,780
go into fatal mode but usually it gets

00:17:49,710 --> 00:17:54,720
to the starting state and then it

00:17:51,780 --> 00:17:57,120
becomes running and then if it actually

00:17:54,720 --> 00:17:58,740
exits you know if it quits unexpectedly

00:17:57,120 --> 00:18:00,240
going to the exit to say so so there's

00:17:58,740 --> 00:18:02,340
this sort of state map that supervisor

00:18:00,240 --> 00:18:03,690
keeps track up for you and and and tries

00:18:02,340 --> 00:18:06,060
to put your program in the right in the

00:18:03,690 --> 00:18:15,270
right place depending on where it is

00:18:06,060 --> 00:18:18,930
already one FAQ that people get that

00:18:15,270 --> 00:18:20,370
people have a lot is that programs that

00:18:18,930 --> 00:18:23,790
run under supervisor should not

00:18:20,370 --> 00:18:26,460
themselves be demons so for example if

00:18:23,790 --> 00:18:29,010
you run just for example like Apache if

00:18:26,460 --> 00:18:31,740
you run Apache you can type httpd enter

00:18:29,010 --> 00:18:33,060
on your terminal by default apache tries

00:18:31,740 --> 00:18:35,160
to put itself in the background it tries

00:18:33,060 --> 00:18:36,330
to it tries to demonize itself and it

00:18:35,160 --> 00:18:37,710
gives you control of the terminal back

00:18:36,330 --> 00:18:41,940
and then you know it's probably running

00:18:37,710 --> 00:18:44,250
in in in in the background that doesn't

00:18:41,940 --> 00:18:45,930
really work under supervisor instead for

00:18:44,250 --> 00:18:49,080
for the example program apache you

00:18:45,930 --> 00:18:51,210
should type HTTP d dash up or d

00:18:49,080 --> 00:18:53,070
foreground and that puts it in the

00:18:51,210 --> 00:18:55,890
foreground so that supervisor can can

00:18:53,070 --> 00:18:59,460
it's it's not demonizing itself it

00:18:55,890 --> 00:19:01,290
doesn't let go the terminal this is in

00:18:59,460 --> 00:19:03,480
contrast to other supervisor programs

00:19:01,290 --> 00:19:05,730
like there's one in ruby called god

00:19:03,480 --> 00:19:09,600
there's another one called Monett and

00:19:05,730 --> 00:19:11,430
supervisor itself is can is in charge of

00:19:09,600 --> 00:19:14,190
the immunization which is really good

00:19:11,430 --> 00:19:16,320
because it's almost never wrong these

00:19:14,190 --> 00:19:17,970
these other the other ways to do it

00:19:16,320 --> 00:19:19,620
where they keep track of pit files and

00:19:17,970 --> 00:19:23,640
they try to compare whether the pit

00:19:19,620 --> 00:19:26,760
that's in the pit file is it's still

00:19:23,640 --> 00:19:29,310
running is it's often wrong but if

00:19:26,760 --> 00:19:32,310
supervisor tells you what's up its up

00:19:29,310 --> 00:19:37,560
where your money back and if it's and or

00:19:32,310 --> 00:19:38,790
down either way so one other feature

00:19:37,560 --> 00:19:40,290
that it has that's really interesting

00:19:38,790 --> 00:19:41,670
are these things called event listeners

00:19:40,290 --> 00:19:42,060
and event listeners are just programs

00:19:41,670 --> 00:19:43,470
that run

00:19:42,060 --> 00:19:47,250
supervisors thank you run under

00:19:43,470 --> 00:19:50,190
supervisor they take they take event

00:19:47,250 --> 00:19:52,950
tokens from supervisor on their input

00:19:50,190 --> 00:19:55,890
and they respond on their standard out

00:19:52,950 --> 00:19:58,380
and what they are are ways to extend

00:19:55,890 --> 00:20:06,600
supervisor and and take certain actions

00:19:58,380 --> 00:20:08,400
when things happen so for example there

00:20:06,600 --> 00:20:10,950
is there is a package called super Lance

00:20:08,400 --> 00:20:13,500
it's you can download it from from pi PI

00:20:10,950 --> 00:20:17,070
it has amongst other things these

00:20:13,500 --> 00:20:21,050
programs called HTTP okay crash male and

00:20:17,070 --> 00:20:25,100
them on what HP okay does is it

00:20:21,050 --> 00:20:28,650
continually pokes a URL that you supply

00:20:25,100 --> 00:20:32,910
and if it does not get a 200 response

00:20:28,650 --> 00:20:35,730
from that URL it will restart a program

00:20:32,910 --> 00:20:37,770
that is running under supervisor so

00:20:35,730 --> 00:20:39,690
that's even even though the program

00:20:37,770 --> 00:20:40,830
didn't crash maybe it's just stuck and

00:20:39,690 --> 00:20:41,940
it needs to be restarted and that's

00:20:40,830 --> 00:20:44,100
that's a good way for it to do that

00:20:41,940 --> 00:20:46,590
there's another program called crash

00:20:44,100 --> 00:20:49,020
mail so than anything fails supervisor

00:20:46,590 --> 00:20:51,300
will send an email when a program

00:20:49,020 --> 00:20:56,730
crashes there's another program called

00:20:51,300 --> 00:20:58,140
mem Minh that will that will restart a

00:20:56,730 --> 00:21:00,810
process if it goes over some

00:20:58,140 --> 00:21:02,490
configurable amount of RAM usage so if

00:21:00,810 --> 00:21:03,870
you have a leaky thing leaky process and

00:21:02,490 --> 00:21:05,400
everything so these are all sort of

00:21:03,870 --> 00:21:07,620
production e things that are very useful

00:21:05,400 --> 00:21:09,450
when when things aren't quite working as

00:21:07,620 --> 00:21:11,760
they should and you have some some

00:21:09,450 --> 00:21:14,550
problem problem processes that you need

00:21:11,760 --> 00:21:15,990
to take care of and of course you can

00:21:14,550 --> 00:21:20,160
write your own own one of these these

00:21:15,990 --> 00:21:23,370
are all documented in the in the docs so

00:21:20,160 --> 00:21:27,900
in in the real world people tend to use

00:21:23,370 --> 00:21:30,480
the system supplied supervisor you know

00:21:27,900 --> 00:21:33,780
under under you know up unto or Red Hat

00:21:30,480 --> 00:21:35,850
or you know whatever and they'll they

00:21:33,780 --> 00:21:37,620
will stick little configuration snippets

00:21:35,850 --> 00:21:41,400
parts of the config file that you that I

00:21:37,620 --> 00:21:45,480
showed before inside of files in this

00:21:41,400 --> 00:21:48,120
Etsy supervisor DD directory and that's

00:21:45,480 --> 00:21:50,010
really useful because typically what

00:21:48,120 --> 00:21:51,270
what you'll do if you if you want to

00:21:50,010 --> 00:21:53,430
automate deployment of something you

00:21:51,270 --> 00:21:55,890
want to set up a server somewhere you'll

00:21:53,430 --> 00:21:57,780
you'll use ansible or salts

00:21:55,890 --> 00:22:01,380
her puppet or whatever you know fabric

00:21:57,780 --> 00:22:03,179
or whatever to lay down some some files

00:22:01,380 --> 00:22:05,250
on the file system that represent the

00:22:03,179 --> 00:22:07,620
way you want things to be part of the

00:22:05,250 --> 00:22:10,410
one of those files is going to be a

00:22:07,620 --> 00:22:12,420
snippet inside of this supervisor DD

00:22:10,410 --> 00:22:15,660
directory that says start a web server

00:22:12,420 --> 00:22:17,730
you know and start Redis and another

00:22:15,660 --> 00:22:18,870
file might say start Redis and you just

00:22:17,730 --> 00:22:20,160
sort of Jam those things in there and

00:22:18,870 --> 00:22:21,929
then of course the next time the next

00:22:20,160 --> 00:22:23,520
time it starts next time your computer

00:22:21,929 --> 00:22:24,030
starts all those programs will start up

00:22:23,520 --> 00:22:27,540
for you

00:22:24,030 --> 00:22:29,130
that's typically what I've seen I guess

00:22:27,540 --> 00:22:32,429
another thing that's it's often used for

00:22:29,130 --> 00:22:35,220
is to start multiple programs inside a

00:22:32,429 --> 00:22:39,330
docker container who's using docker

00:22:35,220 --> 00:22:42,600
right now that's a lot okay

00:22:39,330 --> 00:22:45,950
don't mean to be docker centric I know

00:22:42,600 --> 00:22:45,950
there's other container systems as well

00:22:46,760 --> 00:22:54,690
so history this thing has been around

00:22:50,850 --> 00:22:56,429
forever since 2004 has three major

00:22:54,690 --> 00:23:01,500
releases and many minor ones latest

00:22:56,429 --> 00:23:04,790
stable is the three series sometime this

00:23:01,500 --> 00:23:08,070
year sometime this year

00:23:04,790 --> 00:23:10,350
supervisor 4.0 will be released and it

00:23:08,070 --> 00:23:11,490
will work under currently the current

00:23:10,350 --> 00:23:13,860
releases supervisor only works on the

00:23:11,490 --> 00:23:15,570
Python 2 it will work on our Python 3

00:23:13,860 --> 00:23:18,330
and it will add this signal command

00:23:15,570 --> 00:23:19,590
those are the two big things you in the

00:23:18,330 --> 00:23:21,750
meantime you need it to run on a Python

00:23:19,590 --> 00:23:24,570
3 master works under Python 3 what will

00:23:21,750 --> 00:23:29,220
become supervisor 4 runs under Python 3

00:23:24,570 --> 00:23:33,059
and I'm hoping that something comes

00:23:29,220 --> 00:23:33,419
along to make supervisor not necessary

00:23:33,059 --> 00:23:35,549
anymore

00:23:33,419 --> 00:23:37,470
I haven't found that quite that thing

00:23:35,549 --> 00:23:39,390
yet that would be great

00:23:37,470 --> 00:23:43,770
but in the meantime we'll keep we'll

00:23:39,390 --> 00:23:47,120
keep going and that's it that's it for

00:23:43,770 --> 00:23:47,120
me I appreciate it

00:23:50,850 --> 00:23:55,120
if any if anyone has any questions

00:23:53,260 --> 00:23:59,679
please come to the mic we have about

00:23:55,120 --> 00:24:02,080
five minutes hi have you considered

00:23:59,679 --> 00:24:05,080
making a default configuration network

00:24:02,080 --> 00:24:07,450
based in the way that basically you

00:24:05,080 --> 00:24:09,789
could just run the blank supervisor and

00:24:07,450 --> 00:24:11,860
on all your machines and then send job

00:24:09,789 --> 00:24:14,470
requests and automatically maybe

00:24:11,860 --> 00:24:17,590
allocate and such okay can you can you

00:24:14,470 --> 00:24:19,450
say it again make it I'm sorry

00:24:17,590 --> 00:24:23,230
have you considered making the default

00:24:19,450 --> 00:24:24,909
configuration over a network basically

00:24:23,230 --> 00:24:26,799
where you would start supervisor with no

00:24:24,909 --> 00:24:29,020
config and the default mode of operation

00:24:26,799 --> 00:24:31,150
would be you call out to it from some

00:24:29,020 --> 00:24:34,380
tool and maybe it you know calls out to

00:24:31,150 --> 00:24:36,490
20 boxes start this thing well their

00:24:34,380 --> 00:24:39,370
supervisor itself doesn't do that but

00:24:36,490 --> 00:24:41,500
there are things that wrap supervisor if

00:24:39,370 --> 00:24:43,690
you go to the supervisor deed org site

00:24:41,500 --> 00:24:45,220
there are there are things that do

00:24:43,690 --> 00:24:48,039
almost exactly what you what you're

00:24:45,220 --> 00:24:49,630
talking about and they manage a bunch of

00:24:48,039 --> 00:24:51,370
machines each one of which is running

00:24:49,630 --> 00:24:53,860
supervisor and you and they'll start and

00:24:51,370 --> 00:24:56,980
stop processes I probably that's not

00:24:53,860 --> 00:24:59,710
going to happen for the for the core

00:24:56,980 --> 00:25:01,450
thing because it's it's it really is

00:24:59,710 --> 00:25:03,429
sort of a separate level above above the

00:25:01,450 --> 00:25:05,110
core stuff but but I know what you're

00:25:03,429 --> 00:25:11,919
talking about it is useful useful to be

00:25:05,110 --> 00:25:14,980
able to do that so supervisor frequently

00:25:11,919 --> 00:25:17,350
so thank you for your work I did have a

00:25:14,980 --> 00:25:20,169
question you touched on demonization as

00:25:17,350 --> 00:25:24,429
a potential problem we've occasionally

00:25:20,169 --> 00:25:27,100
seen issues with processes that spawn

00:25:24,429 --> 00:25:31,360
spawn child processes not being cleanly

00:25:27,100 --> 00:25:33,880
kept up on shutdown do you have any best

00:25:31,360 --> 00:25:36,250
practices handling those like celery or

00:25:33,880 --> 00:25:38,950
jewnicorn that do that yeah there there

00:25:36,250 --> 00:25:40,299
is this should probably probably be the

00:25:38,950 --> 00:25:43,299
default because that's a very common

00:25:40,299 --> 00:25:46,150
problem there is a setting called kill

00:25:43,299 --> 00:25:48,250
as group in the program settings section

00:25:46,150 --> 00:25:50,440
if you set that to one I suspect that

00:25:48,250 --> 00:25:53,230
you're your problems will go away

00:25:50,440 --> 00:25:55,299
because what it does is instead of kill

00:25:53,230 --> 00:25:57,280
the process that you started it kills

00:25:55,299 --> 00:25:58,510
the process group you start so it'll

00:25:57,280 --> 00:26:01,299
kill the process plus any of its

00:25:58,510 --> 00:26:02,410
children it probably should be the

00:26:01,299 --> 00:26:04,630
default in

00:26:02,410 --> 00:26:07,270
lots of flasks users have this problem

00:26:04,630 --> 00:26:08,650
where because the actual problem is that

00:26:07,270 --> 00:26:11,980
the program you started doesn't clean up

00:26:08,650 --> 00:26:13,660
its children properly and and and the

00:26:11,980 --> 00:26:16,300
flash web server doesn't clean up it's

00:26:13,660 --> 00:26:18,310
so lots of flask users are annoyed by

00:26:16,300 --> 00:26:22,690
that it should be the default probably

00:26:18,310 --> 00:26:24,970
alright thank you yes so I know the

00:26:22,690 --> 00:26:26,950
supervisor has a priority to control

00:26:24,970 --> 00:26:29,170
what order things will start are there

00:26:26,950 --> 00:26:30,940
any plans to add anything about true

00:26:29,170 --> 00:26:33,850
dependencies on don't start this process

00:26:30,940 --> 00:26:36,070
until the other one finishes there is a

00:26:33,850 --> 00:26:37,870
request in the issue tracker that has

00:26:36,070 --> 00:26:43,810
lots of lots of people plus wanting it

00:26:37,870 --> 00:26:47,620
which which isn't terribly useful but if

00:26:43,810 --> 00:26:52,180
they were all dollar bills maybe but yes

00:26:47,620 --> 00:26:53,620
I mean it would be nice and probably

00:26:52,180 --> 00:26:56,170
that we should take it to the mailing

00:26:53,620 --> 00:26:58,890
list and see see what who's willing to

00:26:56,170 --> 00:27:03,700
contribute code to to get that done

00:26:58,890 --> 00:27:06,010
thank you we're currently using a custom

00:27:03,700 --> 00:27:08,650
fork of daemon tools and I'm wondering

00:27:06,010 --> 00:27:11,170
if you could give me some pros and cons

00:27:08,650 --> 00:27:14,470
are there good reasons to switch to

00:27:11,170 --> 00:27:16,630
supervisor from daemon tools well I will

00:27:14,470 --> 00:27:19,030
try to talk you out of it first which is

00:27:16,630 --> 00:27:21,570
that daemon tools is far more secure

00:27:19,030 --> 00:27:26,260
than supervisors daemon tools I mean

00:27:21,570 --> 00:27:28,750
Daniel J Bernstein is very very security

00:27:26,260 --> 00:27:30,190
conscious and even tools is a very nice

00:27:28,750 --> 00:27:33,730
piece of work and does almost the same

00:27:30,190 --> 00:27:37,390
thing it's just a lot harder to set up

00:27:33,730 --> 00:27:40,360
it's you know there are there are things

00:27:37,390 --> 00:27:41,560
about it about its permissions and stuff

00:27:40,360 --> 00:27:42,540
in the file system where you have to get

00:27:41,560 --> 00:27:45,340
it right

00:27:42,540 --> 00:27:47,280
supervisors just in any file so it's so

00:27:45,340 --> 00:27:50,620
it's easy to get started with

00:27:47,280 --> 00:27:53,050
supervisors also extensible you know you

00:27:50,620 --> 00:27:54,790
can control it over control it

00:27:53,050 --> 00:27:56,590
programmatically and extend it a little

00:27:54,790 --> 00:27:59,610
bit easier than the daemon tools so

00:27:56,590 --> 00:27:59,610
though if that's important to you

00:28:01,660 --> 00:28:05,930
all right so this is not an actual

00:28:03,980 --> 00:28:07,460
question but a comment to make sure

00:28:05,930 --> 00:28:09,680
because I don't really think you said

00:28:07,460 --> 00:28:11,540
that well one of the big benefits with

00:28:09,680 --> 00:28:14,930
Supervisors that you can run infinite

00:28:11,540 --> 00:28:16,790
amounts of them so you can have for

00:28:14,930 --> 00:28:18,980
example the development environment for

00:28:16,790 --> 00:28:21,050
all your web servers and they can all

00:28:18,980 --> 00:28:23,960
run all the stuff they need under

00:28:21,050 --> 00:28:25,430
supervisor and each one have its own

00:28:23,960 --> 00:28:27,380
supervisor it's very useful for

00:28:25,430 --> 00:28:29,210
development in that situation yeah and

00:28:27,380 --> 00:28:32,240
so that's that's why it's hard to

00:28:29,210 --> 00:28:34,670
replace with other stuff yes that's true

00:28:32,240 --> 00:28:36,320
in particular like the way I tend to use

00:28:34,670 --> 00:28:38,180
it is that I have a I'm a consultant so

00:28:36,320 --> 00:28:39,320
I have a bunch of customers and each one

00:28:38,180 --> 00:28:41,630
of those customers has some number of

00:28:39,320 --> 00:28:45,140
projects and each one of those projects

00:28:41,630 --> 00:28:46,580
may have some number of variations of

00:28:45,140 --> 00:28:47,540
reach variation of each project for each

00:28:46,580 --> 00:28:50,480
customer I'll have a supervisor

00:28:47,540 --> 00:28:51,470
configuration and I'll start one of

00:28:50,480 --> 00:28:53,360
those things and maybe I'll have to

00:28:51,470 --> 00:28:55,280
couple them running or whatever but I

00:28:53,360 --> 00:28:57,080
but I I tend to automate that stuff

00:28:55,280 --> 00:28:58,820
template that stuff out and then it just

00:28:57,080 --> 00:29:00,440
starts when I want to work on that

00:28:58,820 --> 00:29:04,550
project I start up that supervisor and

00:29:00,440 --> 00:29:06,260
I'm done so that brings us to the end of

00:29:04,550 --> 00:29:07,910
our talks for today there's lightning

00:29:06,260 --> 00:29:12,070
talks now please give a round of

00:29:07,910 --> 00:29:12,070

YouTube URL: https://www.youtube.com/watch?v=p0iQfT85IvM


