Title: Laura Rupprecht - Describing Descriptors - PyCon 2015
Publication date: 2015-04-12
Playlist: PyCon 2015
Description: 
	"Speaker: Laura Rupprecht

The Python library uses descriptors frequently, but most developers overlook this feature. This talk will cover what a descriptor is, the current uses in the standard library, and how custom descriptors can be used in a developer’s toolset to eliminate repeated code.

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:16,890 --> 00:00:19,250
THE FINAL TALK OF OUR SESSION TODAY WILL BE GIVEN

00:00:19,250 --> 00:00:22,330
BY LAURA RUPPRECHT WHO WORKS FOR ZEFR IN LOS ANGELES.

00:00:22,330 --> 00:00:25,039
SHE'LL TALK ABOUT DESCRIPTORS, SO PLEASE GIVE HER

00:00:25,039 --> 00:00:28,270
A WARM WELCOME.

00:00:28,270 --> 00:00:35,790
[ Applause ] >> HEY, EVERYBODY.

00:00:35,790 --> 00:00:38,710
I'M LAURA RUPPRECHT AND, YES, I'M HERE TO TALK

00:00:38,710 --> 00:00:40,079
ABOUT DESCRIPTORS.

00:00:40,079 --> 00:00:42,489
A LITTLE BIT MORE ABOUT ME.

00:00:42,489 --> 00:00:45,880
I LIVE IN L.A. NOW, I WORK AT ZEFR.

00:00:45,880 --> 00:00:48,940
WE DO A LOT OF CONTENT MANAGEMENT FOR PEOPLE ON

00:00:48,940 --> 00:00:52,359
YOUTube AND I WORK ON A REALLY SMALL TEAM AND

00:00:52,359 --> 00:00:54,620
WE WORK ON THE ADTECH SIDE.

00:00:54,620 --> 00:01:00,269
SO ON THE DOWN SIDE, I PUT A LOT OF ADS ON CUTE

00:01:00,269 --> 00:01:03,160
CAT VIDEOS BUT ON THE UPSIDE, YOU GET TO SEE ALL

00:01:03,160 --> 00:01:08,550
THE CUTE CAT VIDEOS FOR FREE, SO PLUSES AND MINUSES.

00:01:08,550 --> 00:01:10,520
SOMETIMES I POST THINGS ON TWITTER.

00:01:10,520 --> 00:01:13,610
THAT'S HOW I GET IN TOUCH.

00:01:13,610 --> 00:01:17,280
SO I WANTED TO TALK A LITTLE BIT ABOUT WHAT A

00:01:17,280 --> 00:01:22,730
DESCRIPTOR ACTUALLY IS, BECAUSE I DON'T THINK THERE'S A LOT OF STUFF OUT THERE THAT REALLY

00:01:22,730 --> 00:01:27,909
GOES OVER IT IN PRAGMATIC WAY AND TO DO THAT, I'M

00:01:27,909 --> 00:01:30,741
GOING TO GO OVER A CUSTOM EXAMPLE AND THEN TALK A

00:01:30,741 --> 00:01:36,110
LITTLE BIT ABOUT THE KIND OF DESCRIPTORS THAT EXIST IN PYTHON AND HOW THEY'RE ACTUALLY USED

00:01:36,110 --> 00:01:39,560
IN THE STANDARD LIBRARY, AND THEN TOUCH A LITTLE

00:01:39,560 --> 00:01:43,530
BIT ON A FEW EXAMPLES SO, LIKE, PROPERTIES, CLASS

00:01:43,530 --> 00:01:47,200
METHODS, A LITTLE BIT OF USAGE IN ORM AND THEN

00:01:47,200 --> 00:01:49,500
TALK ABOUT A COUPLE OF COMMON PROBLEMS THAT YOU

00:01:49,500 --> 00:01:52,030
MIGHT RUN INTO WHEN YOU'RE USING THEM.

00:01:52,030 --> 00:01:55,180
SO FIRST THINGS FIRST.

00:01:55,180 --> 00:01:57,259
WHAT EXACTLY IS A DESCRIPTOR?

00:01:57,259 --> 00:02:00,869
SO, IT'S A CERTAIN TYPE OF ATTRIBUTE, SO HERE I

00:02:00,869 --> 00:02:05,750
HAVE SOME DESCRIPTOR AND I'M USING THIS AS THIS

00:02:05,750 --> 00:02:11,930
CLASS ATTRIBUTE ON THIS CLASS FOO, AND SO SOME

00:02:11,930 --> 00:02:15,690
DESCRIPTOR SOMETHING THAT I'M USING INSTEAD OF A

00:02:15,690 --> 00:02:18,940
NORMAL ATTRIBUTE, LIKE INSTEAD OF A STRING OR

00:02:18,940 --> 00:02:33,150
ANOTHER RANDOM OBJECT AND AS LONG AS YOU DEFINE DUNDER GET, DUNDER DELETE, THIS IS HOW THIS

00:02:33,150 --> 00:02:34,560
DOES ITS MAGIC.

00:02:34,560 --> 00:02:37,599
SO WHAT DOES THAT MEAN?

00:02:37,599 --> 00:02:45,230
WHEN YOU WRITE A DESCRIPTOR, IT SHOULD LOOK SOMETHING LIKE THIS, IF YOU WRITE THE CLASS.

00:02:45,230 --> 00:02:51,560
QUICK NOTE, I'M DOING ALL OF MY EXAMPLES IN PYTHON 3, SO IF YOU'RE DOING PYTHON 2, STILL,

00:02:51,560 --> 00:02:53,630
IN THIS DESCRIPTOR CLASS, YOU HAVE TO INHERIT

00:02:53,630 --> 00:02:58,170
FROM OBJECT OR ELSE IT WON'T WORK.

00:02:58,170 --> 00:03:02,980
SO I HAVE AN INIT FUNCTION, I CAN PASS IN A BUNCH

00:03:02,980 --> 00:03:06,620
OF ARGUMENTS, KEY WORD ARGUMENTS AND THAT SORT OF

00:03:06,620 --> 00:03:09,570
DEFINES WHAT I'M DOING WITH THIS DESCRIPTOR, AND

00:03:09,570 --> 00:03:17,670
THEN I HAVE MY GET METHOD AND SET AND DELETE, WHICH DEFINES HOW I'M DOING ALL OF MY ATTRIBUTE

00:03:17,670 --> 00:03:18,890
ACCESS.

00:03:18,890 --> 00:03:26,870
SO THE INTERESTING THING ON THIS DUNDER GET METHOD IS THAT I'M PASSING IN THE INSTANCE

00:03:26,870 --> 00:03:31,599
ON WHICH I'M USING THIS DESCRIPTOR, WHICH I'LL

00:03:31,599 --> 00:03:33,629
SHOW AN EXAMPLE SO HOPEFULLY IT'S A LITTLE BIT

00:03:33,629 --> 00:03:37,299
MORE CLEAR, AND THEN I PASS IN THE OWNER, WHICH

00:03:37,299 --> 00:03:41,290
IS PRETTY MUCH THE CLASS OF THAT INSTANCE.

00:03:41,290 --> 00:03:44,030
SO I CAN ACTUALLY CALL THIS DIRECTLY FROM THE

00:03:44,030 --> 00:03:48,220
CLASS AND HAVE DIFFERENT BEHAVIOR FROM IF YOU

00:03:48,220 --> 00:03:53,200
CALL THIS ON AN INSTANCE, WHICH IS INTERESTING, WHEREAS THE GET AND THE SET, THEY ONLY REALLY

00:03:53,200 --> 00:03:56,180
CARE ABOUT THE INSTANCE AND THEN WHATEVER VALUES

00:03:56,180 --> 00:04:00,760
YOU'RE TRYING TO SET ON THAT INSTANCE.

00:04:00,760 --> 00:04:05,230
SO HOW I GOT INVOLVED IN TRYING TO FIGURE OUT HOW

00:04:05,230 --> 00:04:13,549
DESCRIPTORS WORK IS I DEAL WITH A LOT OF VIDEO STUFF AND I HAD TO DEAL WITH THE YOUTube API,

00:04:13,549 --> 00:04:20,409
AND IT'S A LOT OF JSON SO I HAVE A BUNCH OF DICTIONARY ACCESS EVERYWHERE IN THE CODE.

00:04:20,409 --> 00:04:22,190
SO I'M DEALING WITH STUFF LIKE THIS.

00:04:22,190 --> 00:04:28,750
SO IF I WANT TO PULL OUT A URL FROM A RESPONSE THAT I GET, I HAVE TO GET THE VIDEO RESPONSE

00:04:28,750 --> 00:04:31,919
AND I HAVE TO PULL OUT THE SNIPPET AND THE

00:04:31,919 --> 00:04:32,919
THUMBNAILS.

00:04:32,919 --> 00:04:37,229
THEN I HAVE TO PULL OUT THE PARTICULAR RESOLUTION THUMBNAIL THAT I WANT AND THEN I HAVE TO PULL

00:04:37,229 --> 00:04:43,170
OUT THE URL, AND, YEAH, IT'S OKAY BUT IT'S A REAL

00:04:43,170 --> 00:04:44,480
PAIN TO DEAL WITH.

00:04:44,480 --> 00:04:49,159
MY I.D.E. IS DO NOT REALLY DO ANY AUTO COMPLETE FOR THIS TYPE OF THING BECAUSE IT'S JUST

00:04:49,159 --> 00:04:53,390
DICTIONARY ACCESS, SO MY BOSS AT THE TIME, THIS

00:04:53,390 --> 00:05:01,000
IS WHEN I WAS WORKING AT THE ZEFR BOSTON OFFICE, JONATHAN TUSHMAN, HE CAME UP TO ME AND HE'S

00:05:01,000 --> 00:05:02,450
ALWAYS EXCITED ABOUT EVERYTHING.

00:05:02,450 --> 00:05:08,349
SO HE SAID, OKAY, I THINK I KNOW HOW TO SOLVE THIS PROBLEM AND I THINK THE WAY TO DO IT

00:05:08,349 --> 00:05:10,169
IS TO USE DESCRIPTORS.

00:05:10,169 --> 00:05:15,540
TO WHICH I SAID, AH, OKAY, SO WHAT'S A DESCRIPTOR?

00:05:15,540 --> 00:05:18,510
WHICH BROUGHT ME TO THAT WHOLE THING WHERE I WAS

00:05:18,510 --> 00:05:21,190
TRYING TO FIGURE OUT WHAT IT WAS, WHICH IF YOU

00:05:21,190 --> 00:05:26,050
LOOK IN THE OFFICIAL DOCUMENTATION, IT'S AN ATTRIBUTE WITH SOME SORT OF BINDING BEHAVIOR,

00:05:26,050 --> 00:05:29,830
WHICH IN RETROSPECT, RIGHT, AFTER I'VE DONE ALL

00:05:29,830 --> 00:05:33,700
OF THIS READING ON DESCRIPTORS, TOTALLY MAKES SENSE.

00:05:33,700 --> 00:05:35,030
ABSOLUTELY MAKES SENSE.

00:05:35,030 --> 00:05:40,849
BUT WHEN I WAS FIRST LOOKING AT THIS, IT -- LIKE WHAT KIND OF BINDING BEHAVIOR?

00:05:40,849 --> 00:05:44,510
SO THAT'S THAT GET, SET AND DELETE THAT I WAS

00:05:44,510 --> 00:05:45,910
TALKING ABOUT.

00:05:45,910 --> 00:05:54,839
SO FORGET THAT, LET'S JUST LOOK AT THIS LOVELY RESPONSE THAT I GET BACK FROM YOUTube.

00:05:54,839 --> 00:05:56,990
AND THIS ISN'T EVEN IF I PULL OUT ALL THE FIELDS

00:05:56,990 --> 00:05:58,840
THAT I CAN PULL OUT.

00:05:58,840 --> 00:06:02,240
SO THAT'S MY LOVELY DICTIONARY ACCESS.

00:06:02,240 --> 00:06:04,450
IT'S KIND OF ANNOYING.

00:06:04,450 --> 00:06:07,180
AND I'M NOT EVEN USING MOST OF THIS SO MOST OF

00:06:07,180 --> 00:06:09,010
THIS I'M JUST GOING TO IGNORE.

00:06:09,010 --> 00:06:12,810
SO I'M DEALING WITH IT LIKE THIS, BUT HOW CAN I

00:06:12,810 --> 00:06:17,340
MAKE THIS A LITTLE BIT PRETTIER TO DEAL WITH?

00:06:17,340 --> 00:06:23,330
AND SO FIRST TRY IS TAKE THIS AND PUT IT INTO AN

00:06:23,330 --> 00:06:24,330
OBJECT.

00:06:24,330 --> 00:06:28,800
I HAVE THIS RESPONSE, IT WOULD BE MYSELF TO PACKAGE THAT UP SOMEHOW, SO I DO ALL OF THAT

00:06:28,800 --> 00:06:31,880
SAME DICTIONARY ACCESS AND I PUT IN ALL OF THE

00:06:31,880 --> 00:06:34,660
RESPONSES AND I PULL OUT ALL THE FIELDS IN MY

00:06:34,660 --> 00:06:35,840
INIT FUNCTION.

00:06:35,840 --> 00:06:40,600
THE ONLY PROBLEM HERE IS IF I UPDATE ANY OF THIS

00:06:40,600 --> 00:06:43,090
STUFF, I HAVE TO DO IT EXPLICITLY BECAUSE ONCE I

00:06:43,090 --> 00:06:51,399
SET THESE THINGS ON SELF, IT WON'T AUTOMATICALLY UPDATE, SO IF THE RESPONSE CHANGES, I CAN'T

00:06:51,399 --> 00:06:55,089
JUST UPDATE THE RESPONSE ON THE OBJECT AND THEN

00:06:55,089 --> 00:06:58,880
HAVE THAT SORT OF BUBBLE UP TO ALL OF THOSE

00:06:58,880 --> 00:07:00,280
ATTRIBUTES.

00:07:00,280 --> 00:07:04,840
SO, OKAY, A LITTLE BIT BETTER.

00:07:04,840 --> 00:07:07,060
THIS JUST FOR THE SAKE OF CONVENIENCE I FIGURED I

00:07:07,060 --> 00:07:13,440
WOULD USE A DICTIONARY DIGGER MODULE, WHICH YOU'LL SEE WHY I'M DOING THIS IN A LITTLE

00:07:13,440 --> 00:07:14,680
BIT.

00:07:14,680 --> 00:07:19,409
IT LETS YOU PASS IN A BUNCH OF PATH ARGUMENTS AND

00:07:19,409 --> 00:07:23,050
THEN IT USES THAT TO PULL OUT ALL OF THOSE JSON

00:07:23,050 --> 00:07:25,060
RESPONSES BUT IT STILL HAS THE SAME PROBLEM AS

00:07:25,060 --> 00:07:28,400
THE LAST EXAMPLE WHICH IS NAMELY THAT I HAVE THIS

00:07:28,400 --> 00:07:35,740
JSON RESPONSE AND IT -- IF I UPDATE THE JSON RESPONSE, THAT JSON RESPONSE WILL BE OUT OF

00:07:35,740 --> 00:07:38,200
SYNC WITH ALL OF THESE ATTRIBUTES THAT I HAVE IN

00:07:38,200 --> 00:07:40,500
THAT INSTANCE.

00:07:40,500 --> 00:07:44,610
SO STILL REPETITIVE, NOW WE BRING IN THE MAGIC.

00:07:44,610 --> 00:07:48,140
SO I HAVE A DESCRIPTOR NOW, RIGHT?

00:07:48,140 --> 00:07:49,580
AND THIS IS THE COOL THING.

00:07:49,580 --> 00:07:56,350
SO I HAVE A JSON RESPONSE IN MY YOUTube RESPONSE CLASS.

00:07:56,350 --> 00:08:01,320
OR IN AN INSTANCE OF MY YOUTube RESPONSE CLASS.

00:08:01,320 --> 00:08:06,030
AND THEN IF YOU NOTICE THE YOUTube I.D. AND THE TITLES AND THE VIEWS AND THE DESCRIPTION,

00:08:06,030 --> 00:08:07,839
I'M JUST USING A DESCRIPTOR FOR THAT.

00:08:07,839 --> 00:08:11,430
SO WHAT THIS DESCRIPTOR IS ACTUALLY DOING, I

00:08:11,430 --> 00:08:16,529
INITIALIZE IT AND THIS GETS EXECUTED WHEN I FIRST

00:08:16,529 --> 00:08:24,610
CREATE THIS CLASS AND I'M SPECIFYING THE RULES FOR PULLING OUT THESE ATTRIBUTES.

00:08:24,610 --> 00:08:28,340
SO INSTEAD OF SETTING SOMETHING TO SELF IN AN

00:08:28,340 --> 00:08:37,940
INIT FUNCTION, I'M SAILING THIS IS MY DESCRIPTOR WHEN I DO A GET OPERATION SO INSTANCE OF

00:08:37,940 --> 00:08:45,380
YOUTube RESPONSE.VIEWS, GO TO THIS GET FUNCTION, PASS IN THAT INSTANCE THAT I HAVE,

00:08:45,380 --> 00:08:50,220
AND THEN PASS IN THE CLASS, AND THEN PULL OUT

00:08:50,220 --> 00:08:56,550
WHATEVER IS THE PATH FOR GETTING THAT JSON RESPONSE OUT.

00:08:56,550 --> 00:09:04,580
AND I SET UP THE PATH, THAT'S THE FIRST THING THAT HAPPENS WHEN THIS CLASS IS CREATED.

00:09:04,580 --> 00:09:11,470
SO JUST FOR COMPLETENESS, FIGURE IT ADDS SOME ERROR CHECKING, SO IF I RUN INTO AN INDEX

00:09:11,470 --> 00:09:17,050
ERROR OR KEY ERROR, GIVE BACK A MORE USEFUL ERROR.

00:09:17,050 --> 00:09:22,360
SO GIVE BACK AN ATTRIBUTE ERROR BECAUSE THAT'S WHAT YOU WOULD EXPECT IN THIS CASE, AND THEN

00:09:22,360 --> 00:09:25,470
I STILL HAVE THE YOUTube RESPONSE AS BEFORE.

00:09:25,470 --> 00:09:30,440
SO IT'S A LOT EASIER TO DEAL WITH AND THEN I CAN

00:09:30,440 --> 00:09:37,640
PULL OUT THE TITLE REALLY EASILY AND I CAN RICK-ROLL EVERYBODY.

00:09:37,640 --> 00:09:44,500
SO, NOW, I DIDN'T EXPLAIN EVERYTHING, THOUGH, SO

00:09:44,500 --> 00:09:47,500
THERE'S TWO TYPES OF DESCRIPTORS.

00:09:47,500 --> 00:09:51,830
THERE'S A DATA DESCRIPTOR WHERE YOU DEFINE A GET

00:09:51,830 --> 00:09:55,810
AND THEN YOU DEFINE A SET AND/OR DELETE.

00:09:55,810 --> 00:09:57,360
AND THEN THERE IS A NONE DATED DESCRIPTOR WHERE

00:09:57,360 --> 00:10:00,510
WHERE YOU JUST DEFINE A GET FUNCTION.

00:10:00,510 --> 00:10:04,930
SO, LIKE, WHY DO I HAVE THESE?

00:10:04,930 --> 00:10:10,450
SO WHEN I LOOK UP AN ATTRIBUTE, PYTHON IS DICTIONARIES ALL THE WAY DOWN, IF YOU TALK

00:10:10,450 --> 00:10:12,080
TO ANYONE, THEY SAY, YEAH, EVERYTHING IN PYTHON

00:10:12,080 --> 00:10:14,710
IS A DICTIONARY, SO WHAT HAPPENS WHEN I LOOK UP

00:10:14,710 --> 00:10:17,930
FOOD.X, IS I LOOK IN THAT INSTANCE DICTIONARY AND

00:10:17,930 --> 00:10:23,070
THEN I PULL OUT X AND I GET WHATEVER I PUT IN

00:10:23,070 --> 00:10:24,330
THERE.

00:10:24,330 --> 00:10:27,730
WELL, KIND OF, RIGHT.

00:10:27,730 --> 00:10:30,130
LIKE THIS ENTIRE TALK IS, YEAH, THAT'S HOW IT

00:10:30,130 --> 00:10:33,140
WORKS BUT IT ACTUALLY WORKS LIKE THIS.

00:10:33,140 --> 00:10:37,750
SO WHEN I LOOK FOR FOO.X, I'M BREAKING IT UP INTO

00:10:37,750 --> 00:10:39,300
FOUR STEPS, RIGHT?

00:10:39,300 --> 00:10:42,900
SO FIRST I CHECK THE CLASS DICTIONARY FOR A DATA

00:10:42,900 --> 00:10:47,370
DESCRIPTOR, SO IT HAS TO HAVE A SET OR DELETE IN

00:10:47,370 --> 00:10:51,320
ADDITION TO A GET METHOD DEFINED.

00:10:51,320 --> 00:10:52,410
SO FIRST I CHECK THERE.

00:10:52,410 --> 00:10:59,620
IF THERE IS A NON-DATA DESCRIPTOR OR IF THERE'S JUST A NORMAL ATTRIBUTE, DON'T CARE, SKIP

00:10:59,620 --> 00:11:00,620
IT.

00:11:00,620 --> 00:11:07,090
IF I DON'T FIND THAT, I CHECK THE INSTANCE DICTIONARY AND THAT'S SORT OF THE NORMAL PYTHON

00:11:07,090 --> 00:11:10,680
ACCESS THAT YOU'RE LOOKING FOR.

00:11:10,680 --> 00:11:17,650
IF I DON'T FIND THAT, THEN I LOOK ON THE CLASS AGAIN FOR A NON-DATA DESCRIPTOR OR JUST A

00:11:17,650 --> 00:11:21,960
CLASS ATTRIBUTE, OR IF I DON'T FIND ANYTHING, THROW

00:11:21,960 --> 00:11:23,650
AN ATTRIBUTE THERE.

00:11:23,650 --> 00:11:27,060
REMEMBER, THIS ALSO GOES FOR EVERYTHING IN THE

00:11:27,060 --> 00:11:33,210
RESOLUTION METHOD ORDER, IF YOU DON'T FIND ANYTHING IN THAT CLASS.

00:11:33,210 --> 00:11:37,350
SO WHY ON EARTH IS THIS SPLIT UP?

00:11:37,350 --> 00:11:44,850
IT'S A WAY TO HAVE FUNCTION OR METHOD ACCESS FIT

00:11:44,850 --> 00:11:48,360
IN A LITTLE BIT BETTER WITH ATTRIBUTE ACCESS IN

00:11:48,360 --> 00:11:49,360
GENERAL.

00:11:49,360 --> 00:11:56,200
SO WHEN YOU CALL A FUNCTION, YOU CALL INSTANCE.FOFX.

00:11:56,200 --> 00:12:01,070
THEN YOU CHECK THAT CLASS DICTIONARY FOR A DATA

00:12:01,070 --> 00:12:03,390
DESCRIPTOR.

00:12:03,390 --> 00:12:06,020
YOU DON'T USUALLY FIND ONE OF THOSE FOR A NORMAL

00:12:06,020 --> 00:12:11,810
METHODICAL, SO THEN YOU CHECK THE INSTANCE DICTIONARY OF WHATEVER YOU'RE CALLING THIS

00:12:11,810 --> 00:12:16,580
ON FOR ANY KIND OF ATTRIBUTE.

00:12:16,580 --> 00:12:18,710
DON'T USUALLY FIND THAT, SO THEN YOU GO AND YOU

00:12:18,710 --> 00:12:22,270
FIND A NON-DATA DESCRIPTOR BACK IN THE CLASS --

00:12:22,270 --> 00:12:26,620
IN THE CLASS DICTIONARY.

00:12:26,620 --> 00:12:32,130
AND THEN YOU PULL OUT THAT SPECIFIC FUNCTION WITH

00:12:32,130 --> 00:12:40,600
THE INSTANCE AND THE OWNER, USING THAT GET DESCRIPTOR METHOD, AND THEN YOU HAVE THE FUNCTION

00:12:40,600 --> 00:12:48,360
AND SO THAT SELF, WHICH IS USUALLY YOUR FIRST ARGUMENT, THAT'S WHAT YOU MORE OR LESS PASS

00:12:48,360 --> 00:12:50,090
INTO THAT FUNCTION.

00:12:50,090 --> 00:12:58,310
SO IN THIS WHOLE LINE OF LOOKING UP AN ATTRIBUTE, WHEN YOU HAVE A FUNCTION, YOU'RE DOING THIS

00:12:58,310 --> 00:13:00,310
THIRD STEP.

00:13:00,310 --> 00:13:04,390
SO NOW THAT WE'VE GONE OVER THAT, PROPERTY AND

00:13:04,390 --> 00:13:05,390
CLASS METHOD.

00:13:05,390 --> 00:13:10,420
THEY GET USED A LOT AND A LOT OF TIMES PEOPLE DON'T KNOW WHY THEY WORK BUT THEY DO AND IT'S

00:13:10,420 --> 00:13:18,680
MAGIC AND IT'S REALLY NICE AND FOR PROGRAMMING, IT'S A PRETTY NEAT WAY TO GET DESCRIPTOR

00:13:18,680 --> 00:13:22,360
FUNCTIONALITY WITHOUT HAVING TO DO ALL OF THESE

00:13:22,360 --> 00:13:24,120
SETTING EVERYTHING UP YOURSELF.

00:13:24,120 --> 00:13:30,870
SO WHEN YOU HAVE SOMETHING SET UP AS A PROPERTY, YOU ACTUALLY TRANSFORM SOMETHING WITH THIS

00:13:30,870 --> 00:13:40,750
DECORATOR FROM SOMETHING LIKE -- LIKE PROPERTY DEATH BAR RETURN, WHATEVER THE ANSWER IS,

00:13:40,750 --> 00:13:43,630
INTO THIS PROPERTY-LIKE THING.

00:13:43,630 --> 00:13:46,880
SO YOU'LL IN THE, IF YOU'RE FAMILIAR WITH THE WAY

00:13:46,880 --> 00:13:53,600
PROPERTIES WORK, YOU CAN ACTUALLY DO SOMETHING LIKE BAR.SETTER OR BAR.DELETER, AND THEN THAT

00:13:53,600 --> 00:13:57,620
WILL MORE OR LESS ADD THOSE FUNCTIONS TO THIS BAR

00:13:57,620 --> 00:13:59,330
PROPERTY.

00:13:59,330 --> 00:14:02,839
BUT MOST OF THE TIME I SEE THIS, PEOPLE JUST HAVE

00:14:02,839 --> 00:14:05,500
A SINGLE PROPERTY, SO THEY JUST DEFINE THE GETTER

00:14:05,500 --> 00:14:08,529
AND YOU CAN DEFINE DOCUMENTATION, TOO, WHICH IS

00:14:08,529 --> 00:14:10,910
KIND OF NEAT.

00:14:10,910 --> 00:14:14,320
SO THAT'S ESSENTIALLY WHAT THIS GETS TRANSFORMED INTO.

00:14:14,320 --> 00:14:18,550
NOW, WHEN I USE THIS LIKE THIS, IT'S REALLY NICE

00:14:18,550 --> 00:14:22,730
BECAUSE I GET TO TREAT IT SORT OF AS AN ATTRIBUTE, SO IF IT'S SOMETHING THAT HAS TO

00:14:22,730 --> 00:14:28,430
BE COMPUTED ON THE FLY, I CAN USE IT THAT WAY.

00:14:28,430 --> 00:14:32,250
BUT YOU HAVE TO REMEMBER, EVEN IF YOU DON'T SET

00:14:32,250 --> 00:14:36,920
THE UPSET METHOD OR THE DELETE METHOD, THIS IS

00:14:36,920 --> 00:14:39,660
ALWAYS A DATA DESCRIPTOR SO IT WILL ALWAYS TAKE

00:14:39,660 --> 00:14:44,030
PRECEDENCE IN THAT ORDER I SHOWED EARLIER.

00:14:44,030 --> 00:14:46,770
ON THE OTHER HAND, CLASS METHOD TRANSFORMS YOUR

00:14:46,770 --> 00:14:56,070
CODE FROM SOMETHING LIKE THIS INTO THIS SPECIAL CLASS METHOD ATTRIBUTE, AND THE WAY YOU USE

00:14:56,070 --> 00:15:00,839
THAT IS YOU CALL IT EITHER ON AN INSTANCE OR YOU

00:15:00,839 --> 00:15:03,880
CAN CALL IT ON THE CLASS ITSELF.

00:15:03,880 --> 00:15:08,220
AND THIS IS ALSO A NON-DATA DESCRIPTOR, AND I'M

00:15:08,220 --> 00:15:12,270
NOT GOING TO GO OVER STATIC METHOD BUT THAT'S SIMILAR.

00:15:12,270 --> 00:15:17,730
SO IN ORMs, NOW THAT YOU'VE SEEN A LOT OF THESE

00:15:17,730 --> 00:15:22,340
IN THE EARLIER PORTIONS OF THIS TALK, YOU'LL NOTICE THAT I HAVE THIS CAR FIELD AND THIS

00:15:22,340 --> 00:15:25,990
DATE FIELD AND THOSE ARE DESCRIPTORS, RIGHT, BECAUSE

00:15:25,990 --> 00:15:28,680
THE NAME AND THE BIRTHDAY, THOSE ARE DEFINED ON

00:15:28,680 --> 00:15:36,680
THIS PERSON CLASS, SO I HAVE THESE ATTRIBUTES THAT ARE SET ON THE CLASS AND I'M USING THEM

00:15:36,680 --> 00:15:39,870
TO DEFINE HOW I'M GETTING THINGS OUT OF AN INSTANCE

00:15:39,870 --> 00:15:42,050
OF THAT CLASS.

00:15:42,050 --> 00:15:47,040
IT'S A LITTLE ROUNDABOUT BUT I CAN DO STUFF THAT'S COOL LIKE THIS, LIKE SETTING A MAXIMUM

00:15:47,040 --> 00:15:51,930
LENGTH ON A FIELD.

00:15:51,930 --> 00:15:55,010
AND USE THAT JUST HOWEVER I WOULD NORMALLY USE IT

00:15:55,010 --> 00:16:04,440
IN DJANGO AND I CAN JUST SOME CRAZY VALIDATION, AND IT WILL TELL ME, NO, THIS DOESN'T WORK.

00:16:04,440 --> 00:16:08,100
SO WHY WOULD YOU WANT TO DO THIS, BECAUSE THESE

00:16:08,100 --> 00:16:09,100
ARE SUPER COMPLICATED?

00:16:09,100 --> 00:16:12,500
SO A LOT OF THIS VALIDATION -- I SEE A LOT OF

00:16:12,500 --> 00:16:17,779
THIS FOR CONVERTING UNITS, IF YOU'RE DOING A LOT

00:16:17,779 --> 00:16:22,180
OF GETTING AND SETTING AND LET'S SAY YOU RESTORE EVERYTHING ON THE BACK END IN METRIC BUT YOU

00:16:22,180 --> 00:16:25,680
HAVE SOME CRAZY U.S. PEOPLE WHO WANT TO USE IMPERIAL

00:16:25,680 --> 00:16:27,410
UNITS.

00:16:27,410 --> 00:16:30,970
YOU CAN MAKE IT EASIER TO MANIPULATE THOSE FIELDS

00:16:30,970 --> 00:16:35,930
AND YOU DON'T HAVE TO WORRY ABOUT YOUR DIFFERENT -- YOUR DIFFERENT ATTRIBUTES ON

00:16:35,930 --> 00:16:39,350
YOUR INSTANCES BECOMING OUT OF SYNC HAVE WHY NOT

00:16:39,350 --> 00:16:40,350
TO USE THIS?

00:16:40,350 --> 00:16:42,270
BECAUSE IT LOOKS AWESOME.

00:16:42,270 --> 00:16:44,810
JOB SECURITY.

00:16:44,810 --> 00:16:48,649
ALTHOUGH IN HINDSIGHT, THOSE MIGHT BE WHY YOU

00:16:48,649 --> 00:16:52,230
SHOULD USE DESCRIPTORS, SO, AGAIN, PLUSES AND

00:16:52,230 --> 00:16:56,350
MINUSES.

00:16:56,350 --> 00:16:58,780
AND BECAUSE YOU'RE SETTING ALL THIS STUFF UP

00:16:58,780 --> 00:17:01,330
YOURSELF, YOU SHOULD THINK ABOUT INCLUDING SOME

00:17:01,330 --> 00:17:04,350
OTHER ERROR CHECKING SO THAT WHEN PEOPLE USE THIS

00:17:04,350 --> 00:17:10,160
STUFF, WHEN THEY HIT AN EXCEPTION FOR SOME REASON, THEY KNOW WHY THEY'RE GETTING THAT

00:17:10,160 --> 00:17:13,620
EXCEPTION SO IF YOU DECIDE YOU DON'T WANT TO

00:17:13,620 --> 00:17:16,049
IMPLEMENT SOMETHING, ADD A NOT-IMPLEMENTED ERROR.

00:17:16,049 --> 00:17:21,710
OR IF YOU DON'T WANT AN ATTRIBUTE TO EXIST ON A

00:17:21,710 --> 00:17:25,520
CERTAIN CLASS OR ON A CERTAIN INSTANCE, THEN YOU

00:17:25,520 --> 00:17:28,290
CAN RAISE THAT.

00:17:28,290 --> 00:17:33,730
NOW, LAST THINGS IS IT'S REALLY EASY TO MESS THIS

00:17:33,730 --> 00:17:37,270
STUFF UP, ESPECIALLY IF YOU'RE USED TO USING SORT

00:17:37,270 --> 00:17:41,559
OF NORMAL PYTHON CLASSES.

00:17:41,559 --> 00:17:42,830
AND NOT DESCRIPTORS.

00:17:42,830 --> 00:17:46,950
SO WHAT I'M DOING HERE IS I'M INITIALIZING SOME

00:17:46,950 --> 00:17:49,059
VALUE ON A DESCRIPTOR TO NONE.

00:17:49,059 --> 00:17:54,460
I HAVE A GET METHOD AND I RETURN THE VALUE, I LET

00:17:54,460 --> 00:17:57,650
YOU SET THE VALUE.

00:17:57,650 --> 00:18:02,020
PROBLEM HERE IS, LIKE, THIS IS NORMAL PYTHON CODE, RIGHT?

00:18:02,020 --> 00:18:06,830
YOU CAN EXECUTE IT, IT DOES STUFF, BUT IF I MAKE

00:18:06,830 --> 00:18:09,731
THING ONE THAT'S AN INSTANCE OF THAT CLASS, AND I

00:18:09,731 --> 00:18:21,710
SET AN ATTRIBUTE ON, SAY, X, WHATEVER IS THIS DESCRIPTOR, ESSENTIALLY SET THAT AS A CLASS

00:18:21,710 --> 00:18:24,670
ATTRIBUTE BECAUSE I MAKE ANOTHER INSTANCE OF THAT

00:18:24,670 --> 00:18:29,040
CLASS AND THEN I PRINT OUT THING2.X AND I GET

00:18:29,040 --> 00:18:30,590
WHAT I PUT INTO THE FIRST ONE.

00:18:30,590 --> 00:18:31,590
WHY IS THAT?

00:18:31,590 --> 00:18:39,990
BECAUSE I HAVE ONE INSTANCE OF THIS DESCRIPTOR DEFINING THAT X FIELD AND I'M STORING THAT

00:18:39,990 --> 00:18:44,230
HELLO WORLD, I'M STORING THAT ON THAT DESCRIPTOR

00:18:44,230 --> 00:18:49,450
WHICH IS WHY I GET THAT BACK WHEN I HAVE THING2.X.

00:18:49,450 --> 00:18:54,770
ANOTHER THING TO LOOK OUT FOR IS INFINITE RECURSION.

00:18:54,770 --> 00:19:03,580
DON'T USE YOUR GET FUNCTIONS TO DO A GET ADDER BECAUSE THAT WILL JUST CALL YOUR GET FUNCTION

00:19:03,580 --> 00:19:04,580
AGAIN.

00:19:04,580 --> 00:19:11,470
THERE IS A WAY TO DEAL WITH THIS, A FEW GOOD WAYS.

00:19:11,470 --> 00:19:17,290
YOU'RE REALLY NOT USING THAT INSTANCE DICTIONARY SO WHY NOT STORE THE STUFF THERE?

00:19:17,290 --> 00:19:25,800
THROW IN SOME ERROR CHECKING AND THEN I CANNOT EVEN INCLUDE A SETTER.

00:19:25,800 --> 00:19:33,150
SO USE THAT INSTANCE DICTIONARY AND THEN ANOTHER THING TO NOTE IS THIS SET.

00:19:33,150 --> 00:19:41,770
IF I DON'T INCLUDE THIS SET, THEN I HAVE A NON-DATA DESCRIPTOR, WHICH MEANS THAT THAT

00:19:41,770 --> 00:19:50,490
INSTANCE DICTIONARY, I DON'T LIKE THAT ATTRIBUTE WILL BE RETURNED FROM THAT INSTANCE DICTIONARY

00:19:50,490 --> 00:19:54,730
BECAUSE IT WILL TAKE PRECEDENCE OVER THAT GET

00:19:54,730 --> 00:19:55,730
METHOD.

00:19:55,730 --> 00:20:01,980
BUT IF I DO HAVE IT, THEN I'M JUST RETURNING WHATEVER IS IN THAT DICTIONARY.

00:20:01,980 --> 00:20:07,250
SO THERE ISN'T TOO MUCH REALLY AWESOME STUFF OUT

00:20:07,250 --> 00:20:12,870
THERE ON DESCRIPTORS BUT THERE ARE A FEW REALLY GOOD THINGS, SO DE-MYSTIFYING DESCRIPTORS

00:20:12,870 --> 00:20:17,160
IN FIVE MINUTES BY CHRIS BIAUMONT WITH A REALLY SNAZZY

00:20:17,160 --> 00:20:23,220
PYTHON NOTEBOOK, THAT'S A GOOD ONE, FIVE MINUTES, SUPER NICE.

00:20:23,220 --> 00:20:28,140
I REALLY LIKE DAVID BEASLEY'S PYTHON 3 META PROGRAMMING TUTORIAL.

00:20:28,140 --> 00:20:30,520
UNFORTUNATELY IT'S LIKE THREE HOURS LONG.

00:20:30,520 --> 00:20:35,030
IT'S A THREE HOURS THAT I WOULD DEFINITELY RECOMMEND, THOUGH, REALLY GOOD.

00:20:35,030 --> 00:20:41,590
ON THE SHORTER SIDE OF THINGS, AGAIN, IS SIMIAN FRANKLIN HAS A REALLY GOOD THREE-MINUTE

00:20:41,590 --> 00:20:45,210
PRESENTATION ON PYTHON DESCRIPTORS AND HE DOES A

00:20:45,210 --> 00:20:49,800
GOOD JOB OF GOING THROUGH ALL THE PYTHON ACCESS.

00:20:49,800 --> 00:20:55,170
AND TRIED AND TRUE, RAYMOND HEADINGER'S DESCRIPTOR HOW-TO GUIDE.

00:20:55,170 --> 00:20:57,790
FOR THAT ONE, I DEFINITELY RECOMMEND READING IT

00:20:57,790 --> 00:21:02,270
AND GOING AND DOING SOME OTHER READING AND THEN

00:21:02,270 --> 00:21:04,770
COMING BACK TO IT AND WHEN YOU COME BACK TO IT,

00:21:04,770 --> 00:21:11,760
THERE WILL BE SO MUCH STUFF THAT JUST DIDN'T REALLY SINK IN BEFORE BUT BECOMES REALLY CLEAR

00:21:11,760 --> 00:21:12,980
LATER.

00:21:12,980 --> 00:21:18,530
AND THEN ALSO THE INSIDE STORY ON NEW STYLE CLASSES, ALSO REALLY GOOD.

00:21:18,530 --> 00:21:23,330
HE GOES INTO A LOT OF WHY METHODS WORK THE WAY

00:21:23,330 --> 00:21:27,740
THEY DO AND HOW THEY'RE SORT OF WRAPPED IN ORDER

00:21:27,740 --> 00:21:31,060
TO HAVE AN INSTANCE BE ABLE TO CALL A METHOD ON

00:21:31,060 --> 00:21:35,030
IT AND THEN HAVE THAT CALL A FUNCTION WITH YOUR

00:21:35,030 --> 00:21:39,360
INSTANCE AS THE FIRST ARGUMENT AUTOMATICALLY.

00:21:39,360 --> 00:21:41,280
SO THESE ARE ALL REALLY GOOD.

00:21:41,280 --> 00:21:47,510
I'LL POST THE SLIDES SO YOU CAN PULL THOSE OUT.

00:21:47,510 --> 00:21:50,559
SLIDES ARE THERE AT PYDESCRIPTORS AND YOU CAN

00:21:50,559 --> 00:21:52,200
CONTACT ME THAT WAY.

00:21:52,200 --> 00:21:53,370
SO, THANKS.

00:21:53,370 --> 00:21:59,159
IF YOU HAVE ANY QUESTIONS, LOVE TO ANSWER THEM.

00:21:59,159 --> 00:22:08,820
[ Applause ] >> AUDIENCE: THANKS FOR YOUR TALK.

00:22:08,820 --> 00:22:14,710
I GOT A -- BY THE SLIDE THAT I DIDN'T HAVE TIME

00:22:14,710 --> 00:22:15,710
TO LOOK AT THE CODE.

00:22:15,710 --> 00:22:19,970
CAN YOU GO BACK AND DO THE SLIDE, PLEASE?

00:22:19,970 --> 00:22:21,530
>> WHICH ONE?

00:22:21,530 --> 00:22:25,970
>> AUDIENCE: THE RED CRAWL ONE, WHEN YOU GOT THE

00:22:25,970 --> 00:22:31,900
ATTRIBUTES -- FINAL SOLUTION FOR THE ATTRIBUTE FOR THE YOUTube.

00:22:31,900 --> 00:22:36,520
YEAH, THAT ONE.

00:22:36,520 --> 00:22:37,520
>> THIS ONE?

00:22:37,520 --> 00:22:39,210
>> AUDIENCE: NO, PREVIOUS -- THE BIG...

00:22:39,210 --> 00:22:40,210
YEAH.

00:22:40,210 --> 00:22:41,210
>> YEAH.

00:22:41,210 --> 00:22:44,290
>> AUDIENCE: I GOT DISTRACTED BY THE IMAGE.

00:22:44,290 --> 00:22:49,280
[ Laughter ] >> I KNOW, THAT'S BEAUTIFUL.

00:22:49,280 --> 00:22:53,420
ACTUALLY DID PULL THIS OUT USING THE YOUTube API.

00:22:53,420 --> 00:22:56,539
TO GET THE MAXIMUM RESOLUTION URL.

00:22:56,539 --> 00:22:59,059
[ Laughter ] >> AUDIENCE: HI.

00:22:59,059 --> 00:23:02,390
I ACTUALLY HAVE A QUESTION ABOUT THE NEXT SLIDE.

00:23:02,390 --> 00:23:04,090
[ Laughter ] >> THIS.

00:23:04,090 --> 00:23:06,299
>> AUDIENCE: NEXT ONE.

00:23:06,299 --> 00:23:07,299
>> THE NEXT-NEXT ONE.

00:23:07,299 --> 00:23:09,100
>> AUDIENCE: THIS ONE, YES.

00:23:09,100 --> 00:23:11,690
YOU SAY THAT THERE IS A DIFFERENCE BETWEEN STEP

00:23:11,690 --> 00:23:14,540
ONE AND STEP 3 AND I DON'T REALLY SEE IT.

00:23:14,540 --> 00:23:17,560
YOU SAY TYPE FOUR AND YOU WERE CHECKING FOR DATA

00:23:17,560 --> 00:23:21,340
DESCRIPTOR AND THEN FOR CHECKING FOR NON-DATA DESCRIPTOR BUT LOOKING AT THE CODE, I CAN'T

00:23:21,340 --> 00:23:22,340
TELL THE DIFFERENCE.

00:23:22,340 --> 00:23:26,840
>> OH, OKAY, SO THIS LOOKS IN THE SAME PLACE, SO

00:23:26,840 --> 00:23:31,980
IN BOTH OF THOSE STEPS, YOU LOOK AT THE CLASS OF

00:23:31,980 --> 00:23:33,980
WHATEVER INSTANCE YOU HAVE AND THEN YOU LOOK IN

00:23:33,980 --> 00:23:40,140
THE CLASS DICTIONARY AND THEN YOU LOOK AT WHATEVER -- X, IN THIS CASE.

00:23:40,140 --> 00:23:47,600
THE DIFFERENCE IS THAT IN STEP 1, YOU'RE EXPLICITLY CHECKING FOR SOMETHING THAT HAS

00:23:47,600 --> 00:23:52,100
A SET OR DELETE, AND THE PYTHON INTERPRETER LOOKS

00:23:52,100 --> 00:23:54,960
FOR THIS AND IF YOU HAVE SOMETHING THAT DOESN'T

00:23:54,960 --> 00:23:59,011
HAVE SET OR DELETE BUT JUST HAS A GET, THAT'S SORTS

00:23:59,011 --> 00:24:02,620
OF TERMED AS A NON-DATA DESCRIPTOR AND THEN YOU

00:24:02,620 --> 00:24:08,220
DON'T PULL THAT OUT UNTIL THE THIRD STEP HERE.

00:24:08,220 --> 00:24:12,180
SO IF YOU HAVE A SET OR DELETE ALONG WITH YOUR

00:24:12,180 --> 00:24:18,220
GET, YOU'LL HIT STEP ONE WHEN YOU PULL OUT THAT

00:24:18,220 --> 00:24:19,290
TRIBUTE.

00:24:19,290 --> 00:24:21,530
OTHERWISE, YOU'LL GO THROUGH THESE OTHER STEPS.

00:24:21,530 --> 00:24:28,730
AND THE REASON THEY DID THIS WAS SO THAT YOU COULD HAVE FUNCTION CALLS OR METHOD CALLS,

00:24:28,730 --> 00:24:34,700
RATHER, AND THOSE USUALLY ARE FOUND IN THIS THIRD

00:24:34,700 --> 00:24:41,669
STEP BECAUSE THEY'RE -- LIKE, YOU HAVE A FUNCTION THAT'S SORT OF WRAPPED IN A NON-DATA DESCRIPTOR

00:24:41,669 --> 00:24:47,370
SO THAT YOU CAN PASS IN THAT INSTANCE AS THE FIRST ARGUMENT WHEN YOU'RE CALLING THAT FUNCTION.

00:24:47,370 --> 00:24:52,880
BUT YOU CAN ACTUALLY OVERRIDE THAT CALL ON THE

00:24:52,880 --> 00:24:56,100
INSTANCE ITSELF BECAUSE IF YOU PUT SOMETHING INTO

00:24:56,100 --> 00:25:02,400
THAT INSTANCE DICTIONARY, WHEN YOU GO TO CALL THAT FUNCTION, IT WILL HIT THAT SECOND STEP

00:25:02,400 --> 00:25:04,320
FIRST, OR SECOND.

00:25:04,320 --> 00:25:08,090
IT WILL HIT IT BEFORE THE THIRD STEP AND THAT'S WHAT'S IMPORTANT.

00:25:08,090 --> 00:25:11,710
>> AUDIENCE: SO WHEN IT COMES TO FUNCTIONS, WOULD THEY BE CONSIDERED DATA DESCRIPTORS

00:25:11,710 --> 00:25:13,379
OR NON-DATA DESCRIPTORS?

00:25:13,379 --> 00:25:14,620
>> NON-DATA DESCRIPTORS.

00:25:14,620 --> 00:25:16,039
>> AUDIENCE: THANK YOU.

00:25:16,039 --> 00:25:19,350
>> AUDIENCE: YOU ACTUALLY JUST ANSWERED MY QUESTION.

00:25:19,350 --> 00:25:21,190
[ Laughter ] >> YES, TWO FOR ONE.

00:25:21,190 --> 00:25:22,190
>> AUDIENCE: OKAY.

00:25:22,190 --> 00:25:23,740
THANK YOU VERY MUCH, LAURA.

00:25:23,740 --> 00:25:24,740
>> THANK YOU.

00:25:24,740 --> 00:25:24,830

YouTube URL: https://www.youtube.com/watch?v=h2-WPwGnHqE


