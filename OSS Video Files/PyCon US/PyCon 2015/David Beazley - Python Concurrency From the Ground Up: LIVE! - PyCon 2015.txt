Title: David Beazley - Python Concurrency From the Ground Up: LIVE! - PyCon 2015
Publication date: 2015-04-11
Playlist: PyCon 2015
Description: 
	"Speaker: David Beazley

There are currently three popular approaches to Python concurrency: threads, event loops, and coroutines. Each is shrouded by various degrees of mystery and peril.  In this talk, all three approaches will be deconstructed and explained in a epic ground-up live coding battle.

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:00,000 --> 00:00:04,500
the terminal window is gone is that you

00:00:02,340 --> 00:00:07,529
guys have sound can you hear me said it

00:00:04,500 --> 00:00:08,910
was good good alright so when I was when

00:00:07,529 --> 00:00:10,349
I was pitching this talk I thought you

00:00:08,910 --> 00:00:12,509
know I'm always told this advice you

00:00:10,349 --> 00:00:15,690
should never do live demo on a talk and

00:00:12,509 --> 00:00:17,190
then I pitched this to the organizers I

00:00:15,690 --> 00:00:20,189
said I should just do a talk that's all

00:00:17,190 --> 00:00:22,650
live demo you see see where it goes so

00:00:20,189 --> 00:00:24,240
so the topic of this talk is I'm gonna

00:00:22,650 --> 00:00:26,760
talk about threads and co-routines

00:00:24,240 --> 00:00:29,189
topics that are pretty active in the in

00:00:26,760 --> 00:00:30,599
the Python world right now and I'm going

00:00:29,189 --> 00:00:32,160
to talk about it kind of a low-level

00:00:30,599 --> 00:00:33,750
with the hope of looking at like

00:00:32,160 --> 00:00:35,340
different trade-offs and performance

00:00:33,750 --> 00:00:38,219
characteristics and things that can go

00:00:35,340 --> 00:00:40,500
wrong so that's kind of the topic one

00:00:38,219 --> 00:00:42,420
little disclaimer I probably would not

00:00:40,500 --> 00:00:44,610
advise using any of the code that I'm

00:00:42,420 --> 00:00:46,739
about to write because this this this

00:00:44,610 --> 00:00:49,200
talk is actually done completely from

00:00:46,739 --> 00:00:51,300
scratch with nothing nothing to start

00:00:49,200 --> 00:00:52,860
with so I'm so to start this off I'm

00:00:51,300 --> 00:00:54,629
gonna I'm going to start with with a

00:00:52,860 --> 00:00:56,850
very important problem which is

00:00:54,629 --> 00:01:00,570
obviously Fibonacci number I don't know

00:00:56,850 --> 00:01:03,539
why I started picking on that because I

00:01:00,570 --> 00:01:05,070
hate it so much as an example and I find

00:01:03,539 --> 00:01:07,560
myself sort of using it all the time

00:01:05,070 --> 00:01:09,720
here so so so what if what I've got here

00:01:07,560 --> 00:01:11,610
is a horrible implementation of the

00:01:09,720 --> 00:01:13,799
Fibonacci number okay so it's it's a

00:01:11,610 --> 00:01:16,770
recursive algorithm it has exponential

00:01:13,799 --> 00:01:19,280
growth terrible idea but I'm going to

00:01:16,770 --> 00:01:22,259
use that as just a motivating example

00:01:19,280 --> 00:01:23,850
for for things that are going to come Oh

00:01:22,259 --> 00:01:26,100
probably one other thing about doing a

00:01:23,850 --> 00:01:29,460
live demo don't use an alpha version of

00:01:26,100 --> 00:01:30,990
Python that might be hope that that hope

00:01:29,460 --> 00:01:33,090
that doesn't work doesn't bite me there

00:01:30,990 --> 00:01:34,979
okay so so basically this Fibonacci

00:01:33,090 --> 00:01:37,049
number thing just computes a Fibonacci

00:01:34,979 --> 00:01:39,450
number it has the feature that the

00:01:37,049 --> 00:01:41,310
larger the number the longer it takes so

00:01:39,450 --> 00:01:43,560
if I put in like you can you can sort of

00:01:41,310 --> 00:01:46,320
see it sort of noticeably slowing down

00:01:43,560 --> 00:01:48,000
because it gets longer and longer I'm

00:01:46,320 --> 00:01:50,490
actually using that to have like a wide

00:01:48,000 --> 00:01:53,159
range of computational times that I'm

00:01:50,490 --> 00:01:54,479
going to use in a minute here okay so so

00:01:53,159 --> 00:01:57,090
you have this you have this Fibonacci

00:01:54,479 --> 00:01:59,159
number thing now that is pretty boring

00:01:57,090 --> 00:02:01,320
as I have it right now I mean you would

00:01:59,159 --> 00:02:03,689
never want to use a library like that

00:02:01,320 --> 00:02:05,250
what you would probably want to do is

00:02:03,689 --> 00:02:07,410
make a micro service for out of that

00:02:05,250 --> 00:02:10,690
right so uh

00:02:07,410 --> 00:02:12,400
my tip to micro-service so we're gonna

00:02:10,690 --> 00:02:14,110
we're going to use can I call the socket

00:02:12,400 --> 00:02:16,600
library a framework would that make more

00:02:14,110 --> 00:02:17,710
people you're doing so so I'm going to

00:02:16,600 --> 00:02:21,730
do we're going to use the socket

00:02:17,710 --> 00:02:24,010
framework for that and and you know

00:02:21,730 --> 00:02:25,840
every good every good talk is always

00:02:24,010 --> 00:02:27,490
started with socket programming so if

00:02:25,840 --> 00:02:30,100
you if you've if you've never done

00:02:27,490 --> 00:02:35,470
socket programming before I apologize I

00:02:30,100 --> 00:02:37,390
apologize on that this is this this is

00:02:35,470 --> 00:02:40,360
basically the special magic of socket

00:02:37,390 --> 00:02:42,700
programming going into setting socket

00:02:40,360 --> 00:02:44,140
options okay so so so what I'm doing

00:02:42,700 --> 00:02:46,720
here is basically creating a network

00:02:44,140 --> 00:02:48,730
port binding it to an address telling

00:02:46,720 --> 00:02:50,080
the system to go listen to it and then

00:02:48,730 --> 00:02:52,870
I'm just going to make it receive

00:02:50,080 --> 00:02:55,240
connections on that again socket

00:02:52,870 --> 00:02:58,420
programming sort of so I don't 101 here

00:02:55,240 --> 00:02:59,920
if you get a connection I'll sort of

00:02:58,420 --> 00:03:02,350
Prout where it came from and then I'm

00:02:59,920 --> 00:03:08,020
going to pass this over to some I don't

00:03:02,350 --> 00:03:09,610
know Fibonacci handler of some kind okay

00:03:08,020 --> 00:03:11,380
so this is going to be the world's worst

00:03:09,610 --> 00:03:13,120
micro-service by the way okay so what

00:03:11,380 --> 00:03:14,290
that what the handler is going to do is

00:03:13,120 --> 00:03:16,750
it's just going to go into some loop

00:03:14,290 --> 00:03:19,060
where I get some kind of request coming

00:03:16,750 --> 00:03:22,450
in coming across okay so will will

00:03:19,060 --> 00:03:25,180
receive that and then if nothing happens

00:03:22,450 --> 00:03:26,800
I'm going to break out of that and then

00:03:25,180 --> 00:03:28,930
I'm going to just convert the the

00:03:26,800 --> 00:03:31,470
request into an integer as I said this

00:03:28,930 --> 00:03:33,550
is going to be a really stupid stupid

00:03:31,470 --> 00:03:35,860
microservice here and then compute the

00:03:33,550 --> 00:03:38,019
compute the Fibonacci number and then

00:03:35,860 --> 00:03:41,799
can basically make a result by turning

00:03:38,019 --> 00:03:44,530
that back into a string and coding it as

00:03:41,799 --> 00:03:48,910
ASCII and then maybe putting a new line

00:03:44,530 --> 00:03:50,940
on it do I have a bug in there I want

00:03:48,910 --> 00:03:54,130
one disclaimer of this is I probably

00:03:50,940 --> 00:03:57,430
yeah probably will have a some typos in

00:03:54,130 --> 00:04:02,440
there oh it's not requests well I will

00:03:57,430 --> 00:04:04,120
get back to that okay so yeah if not

00:04:02,440 --> 00:04:06,910
requested ain't dangerous of like live

00:04:04,120 --> 00:04:09,130
coding you okay and then and then if you

00:04:06,910 --> 00:04:11,799
break out of there it's it's basically

00:04:09,130 --> 00:04:13,810
closed okay so this is this is a little

00:04:11,799 --> 00:04:15,550
little Network server I'm missing a few

00:04:13,810 --> 00:04:17,830
things I need to I need to import the

00:04:15,550 --> 00:04:20,590
Fibonacci number function and so forth

00:04:17,830 --> 00:04:20,769
so so so you have that basically socket

00:04:20,590 --> 00:04:23,080
for

00:04:20,769 --> 00:04:26,199
graeme and if this works I should just

00:04:23,080 --> 00:04:27,550
be able to you know maybe run this sort

00:04:26,199 --> 00:04:30,580
of saying you know like run a Fibonacci

00:04:27,550 --> 00:04:36,580
server on port 25,000 let's see do I

00:04:30,580 --> 00:04:39,879
have another bug in there zero results

00:04:36,580 --> 00:04:44,080
oh yeah okay yeah okay okay so such

00:04:39,879 --> 00:04:45,639
sticklers here you know as I said we're

00:04:44,080 --> 00:04:47,919
going to run this without unit tests or

00:04:45,639 --> 00:04:49,840
anything so okay so let's uh all right

00:04:47,919 --> 00:04:51,069
let's run that and sort of see what

00:04:49,840 --> 00:04:52,780
happens there okay so this this is

00:04:51,069 --> 00:04:54,789
running a server and then if it's

00:04:52,780 --> 00:04:57,370
working I should be able to netcat or

00:04:54,789 --> 00:04:59,800
telnet to that and just see it respond

00:04:57,370 --> 00:05:04,139
okay so there's okay so computing

00:04:59,800 --> 00:05:04,139
Fibonacci numbers and and so forth

00:05:05,400 --> 00:05:10,330
that's the boring part you don't want to

00:05:07,780 --> 00:05:12,340
clamp it okay so and now the problem

00:05:10,330 --> 00:05:13,960
with that okay so it's it sits on the

00:05:12,340 --> 00:05:16,210
network and so forth the problem with it

00:05:13,960 --> 00:05:18,009
is that it can't handle multiple client

00:05:16,210 --> 00:05:20,229
like if I were to try to connect from

00:05:18,009 --> 00:05:22,090
another window and then do something

00:05:20,229 --> 00:05:25,120
it's just sort of sitting there dead

00:05:22,090 --> 00:05:27,009
because this other this other client is

00:05:25,120 --> 00:05:29,380
sort of hogging the connection but kill

00:05:27,009 --> 00:05:31,659
that client then then the other one will

00:05:29,380 --> 00:05:33,819
wake up and it will it will respond okay

00:05:31,659 --> 00:05:35,409
so this is this is kind of a classic

00:05:33,819 --> 00:05:38,469
kind of concurrency problem with network

00:05:35,409 --> 00:05:40,330
programming is if you don't take steps

00:05:38,469 --> 00:05:42,490
you can only handle one one client at a

00:05:40,330 --> 00:05:44,169
time okay so that's that that's what

00:05:42,490 --> 00:05:46,150
we're starting with is basically that

00:05:44,169 --> 00:05:48,130
now what a lot of people are going to

00:05:46,150 --> 00:05:50,440
turn to with this to do concurrency

00:05:48,130 --> 00:05:53,229
maybe as a as a first approximation is

00:05:50,440 --> 00:05:54,759
to use thread programming and so just to

00:05:53,229 --> 00:05:57,190
just to do that really quick I mean you

00:05:54,759 --> 00:05:58,870
can import you know from pythons

00:05:57,190 --> 00:06:00,909
threading module you can say okay give

00:05:58,870 --> 00:06:02,949
me give me a thread and then if you want

00:06:00,909 --> 00:06:04,509
to make this support concurrency I mean

00:06:02,949 --> 00:06:06,310
an easy way to do it is you can just

00:06:04,509 --> 00:06:09,009
create a thread object where you just

00:06:06,310 --> 00:06:15,400
say okay just run that Handler in that

00:06:09,009 --> 00:06:17,979
you know in a thread and then launch it

00:06:15,400 --> 00:06:20,020
okay so it's kind of like a kind of a

00:06:17,979 --> 00:06:23,490
one-liner saying but if you if you try

00:06:20,020 --> 00:06:25,719
that and run this new version of it

00:06:23,490 --> 00:06:27,940
let's check it out here make sure make

00:06:25,719 --> 00:06:31,990
sure it works okay that's that's

00:06:27,940 --> 00:06:34,990
connected and that one is connected okay

00:06:31,990 --> 00:06:38,020
so I have two clients sort of connected

00:06:34,990 --> 00:06:41,140
again no no it's more to come okay so

00:06:38,020 --> 00:06:42,910
now now now threats is one of these

00:06:41,140 --> 00:06:44,260
topics I mean I've given talks about

00:06:42,910 --> 00:06:46,600
threads before I mean especially with

00:06:44,260 --> 00:06:48,730
like the global interpreter lock and so

00:06:46,600 --> 00:06:50,230
forth and it's and and one of the

00:06:48,730 --> 00:06:52,300
results of that is people laugh and say

00:06:50,230 --> 00:06:54,190
yeah never use threads I mean it's like

00:06:52,300 --> 00:06:56,190
not a soccer so you know there's a lot

00:06:54,190 --> 00:06:59,680
of like talk about threads and Python

00:06:56,190 --> 00:07:01,750
just some some underlying details about

00:06:59,680 --> 00:07:03,520
that I mean python is actually using

00:07:01,750 --> 00:07:05,080
real system threads I mean threads are

00:07:03,520 --> 00:07:07,780
POSIX threads or managed by the

00:07:05,080 --> 00:07:09,400
operating system and so forth but there

00:07:07,780 --> 00:07:11,920
are some things that can go wrong with

00:07:09,400 --> 00:07:13,510
them and you know some of these are well

00:07:11,920 --> 00:07:15,430
known due to due to things like the

00:07:13,510 --> 00:07:18,850
global interpreter lock others are not

00:07:15,430 --> 00:07:21,070
so to illustrate that real quick I'm

00:07:18,850 --> 00:07:23,860
going to write to performance tests this

00:07:21,070 --> 00:07:28,080
first one is more of just measuring the

00:07:23,860 --> 00:07:30,310
time of maybe a long-running request and

00:07:28,080 --> 00:07:31,660
the way that this is going to work is

00:07:30,310 --> 00:07:33,610
just it's going to be more socket

00:07:31,660 --> 00:07:36,640
programming along with some timing and

00:07:33,610 --> 00:07:37,930
all I'm going to do is is use

00:07:36,640 --> 00:07:44,320
essentially create a socket connection

00:07:37,930 --> 00:07:45,730
to that server you didn't you didn't

00:07:44,320 --> 00:07:48,010
realize you're going to get a tutorial

00:07:45,730 --> 00:07:50,320
and socket programming come here okay so

00:07:48,010 --> 00:07:52,060
and then and then I'm just going to

00:07:50,320 --> 00:07:54,730
enter an infinite loop or I just record

00:07:52,060 --> 00:07:59,920
like a start time and then I'm going to

00:07:54,730 --> 00:08:01,900
send off a request for some some

00:07:59,920 --> 00:08:03,940
moderately sized to fit the naxi number

00:08:01,900 --> 00:08:05,020
like 30 or something like that and then

00:08:03,940 --> 00:08:07,450
I'm just going to wait for the response

00:08:05,020 --> 00:08:09,430
to get bad there's a whole lot of things

00:08:07,450 --> 00:08:12,190
that I would probably need to add to

00:08:09,430 --> 00:08:15,280
this to make it reliable but that's all

00:08:12,190 --> 00:08:17,800
that's happening here okay so let's

00:08:15,280 --> 00:08:24,160
let's do that I think I think that will

00:08:17,800 --> 00:08:25,600
work here sock dot send yes okay all

00:08:24,160 --> 00:08:27,700
right so I'm going to send a request get

00:08:25,600 --> 00:08:29,860
a response back and I'm just going to

00:08:27,700 --> 00:08:32,160
run that okay so let's let's check that

00:08:29,860 --> 00:08:32,160
out

00:08:32,760 --> 00:08:36,460
try to try to run that so so what this

00:08:35,350 --> 00:08:38,440
thing is doing is it's basically

00:08:36,460 --> 00:08:40,240
hammering the server with requests over

00:08:38,440 --> 00:08:41,770
and over and over again and it's it's

00:08:40,240 --> 00:08:43,000
saying okay there takes about a third of

00:08:41,770 --> 00:08:45,130
a second to do that

00:08:43,000 --> 00:08:46,390
Fibonacci number now one of the things

00:08:45,130 --> 00:08:46,930
that you know about is Python has a

00:08:46,390 --> 00:08:48,220
global in

00:08:46,930 --> 00:08:50,380
interpreter lack you know the dreaded

00:08:48,220 --> 00:08:51,760
global interpreter lock and what most

00:08:50,380 --> 00:08:54,430
people know about the global interpreter

00:08:51,760 --> 00:08:57,040
lack is that you can't use multiple CPU

00:08:54,430 --> 00:08:58,750
cores it basically pins Python to a

00:08:57,040 --> 00:09:01,089
single core and you'll actually see that

00:08:58,750 --> 00:09:03,130
if I if I run this performance test

00:09:01,089 --> 00:09:04,959
twice so I have it running like in two

00:09:03,130 --> 00:09:07,360
different windows all of a sudden you

00:09:04,959 --> 00:09:09,490
see the time is basically double I have

00:09:07,360 --> 00:09:11,290
multiple cores on my laptop but Python

00:09:09,490 --> 00:09:13,630
can't take advantage of that it's it's

00:09:11,290 --> 00:09:15,459
sort of pinned to the one core the same

00:09:13,630 --> 00:09:17,980
thing and if I were to run that a third

00:09:15,459 --> 00:09:20,170
time it's you know now it goes up to

00:09:17,980 --> 00:09:22,330
like 0.9 seconds you're seeing Python

00:09:20,170 --> 00:09:24,190
limited to the one core so that's that's

00:09:22,330 --> 00:09:27,279
one impact of the global interpreter

00:09:24,190 --> 00:09:29,709
lock it's just that one one core oh one

00:09:27,279 --> 00:09:32,290
core only now it turns out that there's

00:09:29,709 --> 00:09:35,020
a there's another facet of that global

00:09:32,290 --> 00:09:37,360
interpreter lock that is not as widely

00:09:35,020 --> 00:09:39,430
known I mean some people know about it

00:09:37,360 --> 00:09:41,740
but it's not as widely talked about and

00:09:39,430 --> 00:09:43,600
it actually concerns the behavior of

00:09:41,740 --> 00:09:46,990
short requests I'm going to do another

00:09:43,600 --> 00:09:48,880
little timing test here the purpose of

00:09:46,990 --> 00:09:53,770
this is going to be just requests per

00:09:48,880 --> 00:09:55,480
second a fast request okay so I'm going

00:09:53,770 --> 00:09:57,790
to keep keep the code that I have here

00:09:55,480 --> 00:10:01,120
instead of doing that I'm just going to

00:09:57,790 --> 00:10:02,890
keep kind of a global counter where I'm

00:10:01,120 --> 00:10:05,620
going to send like a Fibonacci number

00:10:02,890 --> 00:10:07,240
one it's almost instantaneous and then

00:10:05,620 --> 00:10:09,640
I'm going to increment that counter and

00:10:07,240 --> 00:10:11,410
then that this is a little bit bad but

00:10:09,640 --> 00:10:13,990
I'm going to I'm going to create a

00:10:11,410 --> 00:10:18,430
thread that just monitors that counter

00:10:13,990 --> 00:10:20,529
okay so again this is it's sort of sort

00:10:18,430 --> 00:10:21,820
of dumb here okay so so so what I'm

00:10:20,529 --> 00:10:25,779
going to do is just do a while loop

00:10:21,820 --> 00:10:29,339
where I sleep for a second print out how

00:10:25,779 --> 00:10:35,230
many requests per second it made and

00:10:29,339 --> 00:10:39,450
then just reset the counter am I do I

00:10:35,230 --> 00:10:39,450
have a typo on that I hope not okay

00:10:41,420 --> 00:10:45,959
okay let's try that so so so what's

00:10:44,790 --> 00:10:47,759
going to happen here I make sure that

00:10:45,959 --> 00:10:50,459
nothing is nothing else is running okay

00:10:47,759 --> 00:10:53,759
so this this test is essentially just

00:10:50,459 --> 00:10:55,589
going to hammer the server with lots of

00:10:53,759 --> 00:10:57,089
requests like really short requests so

00:10:55,589 --> 00:10:59,910
it comes up and says okay I'm doing

00:10:57,089 --> 00:11:01,769
25,000 requests a second 26,000 requests

00:10:59,910 --> 00:11:04,470
a second hammering away on that on the

00:11:01,769 --> 00:11:06,360
Fibonacci number so here's here's the

00:11:04,470 --> 00:11:09,779
other kind of interesting thing about

00:11:06,360 --> 00:11:11,220
the Gil it turns out that if you have

00:11:09,779 --> 00:11:14,309
something going like that like really

00:11:11,220 --> 00:11:16,079
fast requests and somebody requests

00:11:14,309 --> 00:11:17,459
something that takes a bit of CPU work

00:11:16,079 --> 00:11:19,559
like let's say I come in here and I say

00:11:17,459 --> 00:11:21,689
yeah compute like the 32nd Fibonacci

00:11:19,559 --> 00:11:24,119
number you're going to you're going to

00:11:21,689 --> 00:11:25,860
see you like a little I'm gonna see a

00:11:24,119 --> 00:11:28,379
dip on that I mean it's going to drop

00:11:25,860 --> 00:11:32,069
down so go 8,000 requests a second there

00:11:28,379 --> 00:11:33,600
but if the work sort of increases like

00:11:32,069 --> 00:11:36,569
let's say I compute the fortieth

00:11:33,600 --> 00:11:39,809
Fibonacci number you're going to see

00:11:36,569 --> 00:11:42,629
that the response time of the fast thing

00:11:39,809 --> 00:11:44,579
drop off a cliff basically okay so so

00:11:42,629 --> 00:11:47,279
what you're seeing now is it's like 90

00:11:44,579 --> 00:11:50,040
requests a sec so down from like 25,000

00:11:47,279 --> 00:11:51,059
down to nine now the thing that's

00:11:50,040 --> 00:11:52,949
happening there is actually pretty

00:11:51,059 --> 00:11:55,699
interesting it turns out that one of the

00:11:52,949 --> 00:11:57,839
features of the Gil is that it

00:11:55,699 --> 00:11:59,970
prioritizes things that want to run on

00:11:57,839 --> 00:12:01,980
the CPU so like it actually gives

00:11:59,970 --> 00:12:05,089
highest priority to the things that are

00:12:01,980 --> 00:12:07,019
better like chewing away on calculation

00:12:05,089 --> 00:12:08,850
I'm not going to go through all the

00:12:07,019 --> 00:12:10,290
reasons why that takes place and it has

00:12:08,850 --> 00:12:13,110
to do with the implementation of

00:12:10,290 --> 00:12:14,540
implementation of the Gil but that is

00:12:13,110 --> 00:12:16,439
actually kind of an interesting

00:12:14,540 --> 00:12:18,990
phenomenon because that is actually not

00:12:16,439 --> 00:12:21,209
how operating systems do things like

00:12:18,990 --> 00:12:23,129
like you know if this thing we're gets

00:12:21,209 --> 00:12:25,649
back running you know doing 25,000

00:12:23,129 --> 00:12:28,009
requests a second if I were just to to

00:12:25,649 --> 00:12:30,149
run like a separate Python interpreter

00:12:28,009 --> 00:12:32,279
okay this business is a separate process

00:12:30,149 --> 00:12:35,339
and I were to say okay go compute like

00:12:32,279 --> 00:12:38,160
the fit 50th Fibonacci number and come

00:12:35,339 --> 00:12:40,619
come back here it barely even makes a

00:12:38,160 --> 00:12:42,449
dent on that okay so the operating

00:12:40,619 --> 00:12:44,519
system is like totally happy with that

00:12:42,449 --> 00:12:48,540
if I were to you know launch like

00:12:44,519 --> 00:12:50,699
another one of these you know again

00:12:48,540 --> 00:12:52,310
compute the fibia 50 fiftieth bit now

00:12:50,699 --> 00:12:55,310
that's a tough thing to say 50

00:12:52,310 --> 00:12:56,660
Nachi okay again it's like okay so now

00:12:55,310 --> 00:12:58,340
at now my machine I mean it's like

00:12:56,660 --> 00:13:00,320
really hammering away but that's short

00:12:58,340 --> 00:13:03,200
request that that short request is not

00:13:00,320 --> 00:13:04,940
really that adversely affected by that I

00:13:03,200 --> 00:13:06,920
mean and the thing that you're seeing

00:13:04,940 --> 00:13:08,960
here is that the like the operating

00:13:06,920 --> 00:13:11,360
system basically gives priority to shunt

00:13:08,960 --> 00:13:13,370
short running tasks things that are

00:13:11,360 --> 00:13:15,650
interactive and so forth so that that

00:13:13,370 --> 00:13:17,330
behavior of having things fall off a

00:13:15,650 --> 00:13:19,490
cliff I mean that's that's really kind

00:13:17,330 --> 00:13:20,750
of interesting where where that might

00:13:19,490 --> 00:13:23,600
you might look at that say well where

00:13:20,750 --> 00:13:25,010
would that impact me you know maybe you

00:13:23,600 --> 00:13:26,570
maybe you actually are writing like a

00:13:25,010 --> 00:13:28,760
web service or something maybe this

00:13:26,570 --> 00:13:31,430
thing is serving up Jason or doing

00:13:28,760 --> 00:13:33,200
something maybe most of the requests are

00:13:31,430 --> 00:13:35,570
actually fast running little things I

00:13:33,200 --> 00:13:36,560
mean I'm working on an application like

00:13:35,570 --> 00:13:39,800
that they have a lot of little fast

00:13:36,560 --> 00:13:41,930
requests that run those fast requests

00:13:39,800 --> 00:13:44,600
could be basically backlogged behind

00:13:41,930 --> 00:13:46,490
some gigantic requests if it were doing

00:13:44,600 --> 00:13:48,500
a lot of CPU word so if there was some

00:13:46,490 --> 00:13:50,750
computationally intensive thing all of a

00:13:48,500 --> 00:13:53,060
sudden your your service would end up

00:13:50,750 --> 00:13:54,740
behaving kind of flaky maybe like you

00:13:53,060 --> 00:13:56,120
would get like really poor response time

00:13:54,740 --> 00:13:57,740
or it might be kind of a weird lag

00:13:56,120 --> 00:13:59,030
that's sort of in the system that you

00:13:57,740 --> 00:14:00,710
would it would be hard for you to sort

00:13:59,030 --> 00:14:02,900
of identify maybe where it's coming from

00:14:00,710 --> 00:14:04,280
that kind of that kind of thing so

00:14:02,900 --> 00:14:06,250
that's that that's that's that's what's

00:14:04,280 --> 00:14:08,900
going on there it's sort of another

00:14:06,250 --> 00:14:11,120
lesser-known feature of the global

00:14:08,900 --> 00:14:12,500
interpreter lock is that the thing that

00:14:11,120 --> 00:14:15,440
it's basically the effect that it has on

00:14:12,500 --> 00:14:17,540
response time now now there are some

00:14:15,440 --> 00:14:20,300
ways you can you can deal with that okay

00:14:17,540 --> 00:14:22,490
I mean it's not it's not totally in all

00:14:20,300 --> 00:14:25,280
is lost kind of kind of thing I mean the

00:14:22,490 --> 00:14:27,770
typical solution to that would be to

00:14:25,280 --> 00:14:29,660
maybe throw the work out to a pool like

00:14:27,770 --> 00:14:35,209
a process pool or something so you could

00:14:29,660 --> 00:14:37,310
say you know maybe but it's a lot of

00:14:35,209 --> 00:14:38,959
typing there okay so from the concurrent

00:14:37,310 --> 00:14:40,459
future is module you could say okay I

00:14:38,959 --> 00:14:42,680
want to I want to make a pool with maybe

00:14:40,459 --> 00:14:44,450
you know four processes in it or

00:14:42,680 --> 00:14:46,550
something like that and then what you

00:14:44,450 --> 00:14:48,680
would do is instead of just computing

00:14:46,550 --> 00:14:50,600
the result down here you would

00:14:48,680 --> 00:14:54,350
essentially submit the work out to a

00:14:50,600 --> 00:14:58,339
pool okay so submit it to a pool and

00:14:54,350 --> 00:14:59,690
then get the result by waiting for the

00:14:58,339 --> 00:15:01,670
result if you've never used the

00:14:59,690 --> 00:15:03,350
concurrent futures module before it kind

00:15:01,670 --> 00:15:05,610
of it's kind of how it works you submit

00:15:03,350 --> 00:15:07,769
jobs out to of like a process pool

00:15:05,610 --> 00:15:09,899
to wait for the result so I'm going to

00:15:07,769 --> 00:15:11,690
run that version of the server and just

00:15:09,899 --> 00:15:14,250
just see what see what happens with that

00:15:11,690 --> 00:15:17,279
one one kind of negative of doing things

00:15:14,250 --> 00:15:19,200
with the pool like that is it does

00:15:17,279 --> 00:15:21,060
introduce way more overhead on the

00:15:19,200 --> 00:15:22,709
server sits like the server side because

00:15:21,060 --> 00:15:24,600
you're no longer just computing the one

00:15:22,709 --> 00:15:25,829
Fibonacci number you're like serializing

00:15:24,600 --> 00:15:28,350
data you're sending it off to a

00:15:25,829 --> 00:15:29,760
subprocess it's computing a result so

00:15:28,350 --> 00:15:33,779
you see that results at a drop

00:15:29,760 --> 00:15:35,339
significantly significantly there but on

00:15:33,779 --> 00:15:37,950
but on the other hand it's not going to

00:15:35,339 --> 00:15:40,320
be completely hammered by like a like a

00:15:37,950 --> 00:15:41,700
CPU bad request so if somebody comes in

00:15:40,320 --> 00:15:43,170
here and they say yeah I want to compute

00:15:41,700 --> 00:15:46,680
the you know the fortieth Fibonacci

00:15:43,170 --> 00:15:48,450
number that request rate is not really

00:15:46,680 --> 00:15:50,519
affected by that at this point because

00:15:48,450 --> 00:15:51,839
the work is essentially offloaded to

00:15:50,519 --> 00:15:53,430
somewhere else you're not you're not

00:15:51,839 --> 00:15:56,160
fighting with the guild or any or

00:15:53,430 --> 00:15:57,120
anything like that so so that that's

00:15:56,160 --> 00:15:58,260
that's one of the things you have to

00:15:57,120 --> 00:15:59,940
think about with thread you're going to

00:15:58,260 --> 00:16:01,860
program with threads you have to stay

00:15:59,940 --> 00:16:06,180
away from CPU bound work you think about

00:16:01,860 --> 00:16:07,769
pools and and other things but but one

00:16:06,180 --> 00:16:08,970
of the things that you may have heard

00:16:07,769 --> 00:16:11,339
about is that well maybe you just

00:16:08,970 --> 00:16:13,380
shouldn't you shouldn't use thread I

00:16:11,339 --> 00:16:15,149
mean this is kind of a cop a popular

00:16:13,380 --> 00:16:18,149
opinion it's like that thread socking I

00:16:15,149 --> 00:16:20,220
was like no don't don't do thread so so

00:16:18,149 --> 00:16:23,339
what I'm going to do is is shift gears

00:16:20,220 --> 00:16:25,050
for a second here and I'm going to take

00:16:23,339 --> 00:16:26,850
all that server server code I'm gonna

00:16:25,050 --> 00:16:28,709
just say you know it's just abandoned

00:16:26,850 --> 00:16:30,990
threads okay look that that was bad idea

00:16:28,709 --> 00:16:35,370
okay so let's get rid of thread okay

00:16:30,990 --> 00:16:37,260
hate threads it's okay go back to the go

00:16:35,370 --> 00:16:40,769
back to the original thing here okay and

00:16:37,260 --> 00:16:42,060
then pools and it's like you know by you

00:16:40,769 --> 00:16:44,130
know we don't want to do pools I mean

00:16:42,060 --> 00:16:45,029
that's kind of okay so okay so we're

00:16:44,130 --> 00:16:48,449
gonna we're going to go back to the

00:16:45,029 --> 00:16:50,430
original code and and what I'm going to

00:16:48,449 --> 00:16:53,130
look at now is actually this issue of

00:16:50,430 --> 00:16:55,290
like well what what would threads buying

00:16:53,130 --> 00:16:57,120
me and the other one like okay I was

00:16:55,290 --> 00:16:58,970
using threads but why was I using

00:16:57,120 --> 00:17:01,949
threads like what did threads give me

00:16:58,970 --> 00:17:05,010
essentially threads we're solving the

00:17:01,949 --> 00:17:07,470
problem of blocking okay so I have all

00:17:05,010 --> 00:17:09,209
of these these operations that block in

00:17:07,470 --> 00:17:12,480
this code like waiting for a connection

00:17:09,209 --> 00:17:15,329
waiting for data potentially sending for

00:17:12,480 --> 00:17:16,890
data that might happen if like send

00:17:15,329 --> 00:17:18,510
buffers are full or something like that

00:17:16,890 --> 00:17:19,439
but you have these you have these

00:17:18,510 --> 00:17:22,679
operations that

00:17:19,439 --> 00:17:23,759
my black and that blocking is

00:17:22,679 --> 00:17:25,559
essentially what's preventing the

00:17:23,759 --> 00:17:27,120
concurrency I mean if one of the tasks

00:17:25,559 --> 00:17:28,439
goes in there and it blocks I mean it's

00:17:27,120 --> 00:17:31,590
like that's the end of the story it's

00:17:28,439 --> 00:17:33,240
like done okay so so threads race

00:17:31,590 --> 00:17:36,240
threads are essentially buying you the

00:17:33,240 --> 00:17:37,919
ability to block like that or to stop I

00:17:36,240 --> 00:17:38,879
mean your your code is going to run in

00:17:37,919 --> 00:17:41,340
here and it's going to hit this

00:17:38,879 --> 00:17:43,200
statement and it's just going to stop

00:17:41,340 --> 00:17:45,779
and that's like the end of your you know

00:17:43,200 --> 00:17:49,379
that's it's going to wait now here's

00:17:45,779 --> 00:17:51,179
some there's kind of a curious insight

00:17:49,379 --> 00:17:54,090
about where to go next

00:17:51,179 --> 00:17:56,870
it turns out that Python actually does

00:17:54,090 --> 00:18:00,419
have a feature that blocks like that

00:17:56,870 --> 00:18:04,799
that you have maybe used before and what

00:18:00,419 --> 00:18:06,360
it is is it's generator function so a

00:18:04,799 --> 00:18:09,450
lot of people are familiar with the idea

00:18:06,360 --> 00:18:11,519
of using generators maybe to feed for

00:18:09,450 --> 00:18:13,500
loops you know there's a very simple

00:18:11,519 --> 00:18:15,509
example of that I mean the way that this

00:18:13,500 --> 00:18:16,230
works is if you if you say oh I want to

00:18:15,509 --> 00:18:18,659
make a countdown

00:18:16,230 --> 00:18:20,070
you know creates a generator object and

00:18:18,659 --> 00:18:21,409
then the way that you that you feed that

00:18:20,070 --> 00:18:24,240
is you run it through a for loop

00:18:21,409 --> 00:18:25,409
basically customizing iteration okay so

00:18:24,240 --> 00:18:27,059
this is this is actually a really cool

00:18:25,409 --> 00:18:29,730
feature of Python if you've never never

00:18:27,059 --> 00:18:31,590
used that before but but the yield

00:18:29,730 --> 00:18:33,419
statement it's really interesting what's

00:18:31,590 --> 00:18:37,740
happening there because what happens is

00:18:33,419 --> 00:18:40,950
that that yield essentially makes the

00:18:37,740 --> 00:18:42,240
function stop until you call next on it

00:18:40,950 --> 00:18:44,220
I mean this is what's underlined the

00:18:42,240 --> 00:18:46,370
iteration protocol is that Python just

00:18:44,220 --> 00:18:48,899
calls next on it a whole bunch of times

00:18:46,370 --> 00:18:51,419
each time you call next it goes to the

00:18:48,899 --> 00:18:53,909
yield and it sort of waits there for for

00:18:51,419 --> 00:18:54,960
a while so one of the things that you

00:18:53,909 --> 00:18:58,679
could that you could think about doing

00:18:54,960 --> 00:19:01,980
is maybe using the yield to do this like

00:18:58,679 --> 00:19:04,500
blocking blocking idea so so here's

00:19:01,980 --> 00:19:07,740
here's an alternate way of running the

00:19:04,500 --> 00:19:12,480
running the countdown object here what

00:19:07,740 --> 00:19:15,990
I'm going to do is is make a I'm going

00:19:12,480 --> 00:19:19,080
to make a queue of tasks using the

00:19:15,990 --> 00:19:21,059
collections module and then what I'm

00:19:19,080 --> 00:19:26,129
going to do is is put a bunch of

00:19:21,059 --> 00:19:28,590
generator functions on there like oh god

00:19:26,129 --> 00:19:31,379
okay what is going on here okay so so so

00:19:28,590 --> 00:19:32,669
what I've got is I have a bunch of a

00:19:31,379 --> 00:19:34,590
bunch of generators on

00:19:32,669 --> 00:19:36,749
there and I'm going to I'm going to

00:19:34,590 --> 00:19:38,549
write a little like a little task

00:19:36,749 --> 00:19:39,869
scheduler that is essentially just going

00:19:38,549 --> 00:19:42,210
to do this it's going to say well while

00:19:39,869 --> 00:19:46,559
there's some tasks to run I'm going to

00:19:42,210 --> 00:19:52,200
pop one off and then I'm just going to

00:19:46,559 --> 00:19:53,879
run it to the yield statement I'm going

00:19:52,200 --> 00:19:55,859
to print out the X so you can see it and

00:19:53,879 --> 00:19:59,249
then then I'm just going to put it back

00:19:55,859 --> 00:20:01,710
onto the task list this is this is an

00:19:59,249 --> 00:20:03,869
example of a round-robin scheduler

00:20:01,710 --> 00:20:05,999
essentially if you've ever taken a like

00:20:03,869 --> 00:20:07,529
an operating system class or or

00:20:05,999 --> 00:20:09,419
something like that so what's happening

00:20:07,529 --> 00:20:11,669
is it's it's going to run a generator to

00:20:09,419 --> 00:20:14,549
the yield put it back on the task list

00:20:11,669 --> 00:20:16,080
and then just sort of cycle around so so

00:20:14,549 --> 00:20:18,119
what you can do is you can run that and

00:20:16,080 --> 00:20:20,220
you're going to see these like three

00:20:18,119 --> 00:20:22,369
countdown functions sort of cycling one

00:20:20,220 --> 00:20:25,859
after the other doing like a round-robin

00:20:22,369 --> 00:20:27,989
round round-robin thing like that so if

00:20:25,859 --> 00:20:30,269
you look at that you might get this idea

00:20:27,989 --> 00:20:34,019
or it's like ah maybe you could use

00:20:30,269 --> 00:20:35,580
generators is some kind of task maybe

00:20:34,019 --> 00:20:36,749
could do a task scheduler or something

00:20:35,580 --> 00:20:38,460
like that no wait the way that you're

00:20:36,749 --> 00:20:40,830
going to think about this is you're

00:20:38,460 --> 00:20:42,119
going to go back to this code here and

00:20:40,830 --> 00:20:43,619
you're going to look at these blocking

00:20:42,119 --> 00:20:46,109
operations and you're going to say well

00:20:43,619 --> 00:20:48,389
what maybe I should just yield before

00:20:46,109 --> 00:20:49,799
that okay I'm gonna insert yields and

00:20:48,389 --> 00:20:51,450
into my code now I'm gonna I'm gonna

00:20:49,799 --> 00:20:52,950
flush this out and flesh this out I

00:20:51,450 --> 00:20:55,799
guess the flush is not the right flush

00:20:52,950 --> 00:20:57,119
it out and in a second here so so what

00:20:55,799 --> 00:20:59,759
I'm going to do is put yields into the

00:20:57,119 --> 00:21:01,230
code because the code might block I mean

00:20:59,759 --> 00:21:03,480
have to wait for data on a on a

00:21:01,230 --> 00:21:06,629
connection and then what I'm going to do

00:21:03,480 --> 00:21:09,239
is try to drive this using a generator

00:21:06,629 --> 00:21:11,100
function kind of idea base entually the

00:21:09,239 --> 00:21:12,960
same thing that I just did so what I'm

00:21:11,100 --> 00:21:15,119
what I'm going to do is make a make a

00:21:12,960 --> 00:21:16,980
task queue I'm going to make a little

00:21:15,119 --> 00:21:18,779
run function like that sort of saying

00:21:16,980 --> 00:21:24,330
while there's tasks to run give me a

00:21:18,779 --> 00:21:26,070
task I'm going to essentially run it to

00:21:24,330 --> 00:21:27,269
the yield statement okay so that so what

00:21:26,070 --> 00:21:32,009
this is doing it's going to run to the

00:21:27,269 --> 00:21:35,399
yield and then I'm going to catch stop

00:21:32,009 --> 00:21:36,929
iteration and I'll print you know tasks

00:21:35,399 --> 00:21:38,940
done there okay so I'm going to start

00:21:36,929 --> 00:21:40,230
with kind of this task scheduling idea

00:21:38,940 --> 00:21:41,669
that I just did on the in the

00:21:40,230 --> 00:21:43,080
interactive window it's like okay I'm

00:21:41,669 --> 00:21:46,080
going to cycle a bunch of generator

00:21:43,080 --> 00:21:47,789
functions out but here's here's here

00:21:46,080 --> 00:21:49,799
where it gets interesting instead of

00:21:47,789 --> 00:21:52,500
thinking about iteration like there's

00:21:49,799 --> 00:21:53,909
like this countdown saying that's dumb I

00:21:52,500 --> 00:21:55,409
don't care about that I mean like why

00:21:53,909 --> 00:21:57,539
you know I'm not caring about like

00:21:55,409 --> 00:21:59,700
integers and iteration or something like

00:21:57,539 --> 00:22:01,919
that but what I'm going to do is I'm

00:21:59,700 --> 00:22:03,929
going to use the yield statement to

00:22:01,919 --> 00:22:06,960
communicate sort of the program's

00:22:03,929 --> 00:22:08,010
intention if you will so so I'm going to

00:22:06,960 --> 00:22:09,240
come down here and I'm going to I'm

00:22:08,010 --> 00:22:11,549
going to look at this yield and I'm

00:22:09,240 --> 00:22:13,019
going to say well why is my yielding

00:22:11,549 --> 00:22:15,570
exactly okay the yield is going to make

00:22:13,019 --> 00:22:18,269
this thing suspend but why like why am i

00:22:15,570 --> 00:22:20,909
doing that well in this case I'm waiting

00:22:18,269 --> 00:22:22,860
for data to be received is this I'm just

00:22:20,909 --> 00:22:25,639
going to make it indicate like okay why

00:22:22,860 --> 00:22:29,130
why am i why am i stopping I'm receiving

00:22:25,639 --> 00:22:32,159
same one here I'm receiving and down

00:22:29,130 --> 00:22:33,510
here I'm sending okay so I'm going to

00:22:32,159 --> 00:22:35,730
have the yield kind of indicate like

00:22:33,510 --> 00:22:38,460
what is the intent of this of this

00:22:35,730 --> 00:22:40,409
program stopping there I have to

00:22:38,460 --> 00:22:43,380
actually do a little bit more than that

00:22:40,409 --> 00:22:45,690
I have to indicate like well okay I'm

00:22:43,380 --> 00:22:47,519
receiving but like on what am i

00:22:45,690 --> 00:22:50,580
receiving I can't just say I'm receiving

00:22:47,519 --> 00:22:51,840
and then give no other information so so

00:22:50,580 --> 00:22:54,059
I'm going to introduce some other

00:22:51,840 --> 00:22:57,409
information in here kind of giving like

00:22:54,059 --> 00:22:59,130
okay on what am i sending or receiving

00:22:57,409 --> 00:23:00,659
seeding here okay so I'm going to I'm

00:22:59,130 --> 00:23:03,419
going to insert some yield statements in

00:23:00,659 --> 00:23:07,019
there and then I'm going to pick those

00:23:03,419 --> 00:23:08,610
up in this task loop up here so I'm

00:23:07,019 --> 00:23:10,500
gonna I'm going to come in here and

00:23:08,610 --> 00:23:12,480
essentially say okay why are you

00:23:10,500 --> 00:23:14,490
suspending and on what are you

00:23:12,480 --> 00:23:16,649
suspending is two things going on there

00:23:14,490 --> 00:23:20,100
and so I'm going to check for that if

00:23:16,649 --> 00:23:21,779
you're if you're receiving okay we're

00:23:20,100 --> 00:23:25,260
gonna well I'm going to put some code in

00:23:21,779 --> 00:23:29,870
there in a second okay so we're going to

00:23:25,260 --> 00:23:33,029
check for that if it's something else I

00:23:29,870 --> 00:23:34,320
don't know what to do okay so so so I'm

00:23:33,029 --> 00:23:35,429
gonna have I'm gonna have like a check

00:23:34,320 --> 00:23:37,950
for sort of the receiving and sending

00:23:35,429 --> 00:23:40,200
and now what I have to do is sort of

00:23:37,950 --> 00:23:42,510
figure out what does it actually mean to

00:23:40,200 --> 00:23:45,480
receive in this like in this context

00:23:42,510 --> 00:23:48,419
like what is going on here so in order

00:23:45,480 --> 00:23:52,230
to receive I basically have to to go

00:23:48,419 --> 00:23:53,789
wait I have to I have to wait go wait

00:23:52,230 --> 00:23:56,070
somewhere actually since we're in Canada

00:23:53,789 --> 00:23:58,799
this is like going to the penalty box

00:23:56,070 --> 00:23:59,970
and hockey essentially okay so if I'm

00:23:58,799 --> 00:24:03,149
receiving I'm going to go to

00:23:59,970 --> 00:24:04,710
penalty box and hang out so what's

00:24:03,149 --> 00:24:06,919
actually going to have happen here is

00:24:04,710 --> 00:24:08,850
you're going to have a waiting area for

00:24:06,919 --> 00:24:10,230
for things that are waiting and I'm

00:24:08,850 --> 00:24:12,299
going to have a waiting area for things

00:24:10,230 --> 00:24:14,820
that are sending and the idea is that

00:24:12,299 --> 00:24:16,139
this generator or this digital task

00:24:14,820 --> 00:24:17,730
scheduler it's going to say well if

00:24:16,139 --> 00:24:19,289
you're going to receive I'm actually

00:24:17,730 --> 00:24:22,320
just going to go shove you into the

00:24:19,289 --> 00:24:24,840
waiting area and you're going to go hang

00:24:22,320 --> 00:24:28,279
out there it turns out that what I've

00:24:24,840 --> 00:24:31,049
got here is a dictionary sort of mapping

00:24:28,279 --> 00:24:35,159
sockets if you will it's like sockets to

00:24:31,049 --> 00:24:36,899
tasks ok so which are generators ok so

00:24:35,159 --> 00:24:38,100
that's that's what's happening there so

00:24:36,899 --> 00:24:40,289
I mean I mean I'm going to make these

00:24:38,100 --> 00:24:41,460
things sort of hang out ok so they're

00:24:40,289 --> 00:24:45,080
going to they're going to go hang out in

00:24:41,460 --> 00:24:47,159
the in the waiting area there and then

00:24:45,080 --> 00:24:49,289
we have to figure out some way to get

00:24:47,159 --> 00:24:50,909
them back we'll get to that in a second

00:24:49,289 --> 00:24:52,259
here but let's kind of let's see what

00:24:50,909 --> 00:24:54,330
we've got here ok so I have a couple of

00:24:52,259 --> 00:24:56,639
functions like the server is using using

00:24:54,330 --> 00:25:00,419
the yield statement the handler down

00:24:56,639 --> 00:25:02,909
there if I if I want to make the thing

00:25:00,419 --> 00:25:04,679
run I'm going to append that as a task

00:25:02,909 --> 00:25:06,990
okay so I'm going to make make a task

00:25:04,679 --> 00:25:09,360
out of it and actually let me just run

00:25:06,990 --> 00:25:10,740
this just to see what happens first okay

00:25:09,360 --> 00:25:13,559
so so what's going to what's going to

00:25:10,740 --> 00:25:16,289
happen here is you have this the server

00:25:13,559 --> 00:25:17,850
program it's going to start off where

00:25:16,289 --> 00:25:20,909
you have this task list that sort of

00:25:17,850 --> 00:25:22,409
says ok that's this Fibonacci server it

00:25:20,909 --> 00:25:23,610
has not started running yet it's just

00:25:22,409 --> 00:25:26,879
likely there's some there's some

00:25:23,610 --> 00:25:28,289
generator if I ask it to run you're

00:25:26,879 --> 00:25:31,019
going to find that the task list is

00:25:28,289 --> 00:25:33,509
empty it's like okay it ran some it did

00:25:31,019 --> 00:25:36,320
something but now it's empty and the

00:25:33,509 --> 00:25:38,820
what's happening now is the task is

00:25:36,320 --> 00:25:41,659
essentially hanging out in the wait area

00:25:38,820 --> 00:25:44,220
it's in the penalty box so then yeah ok

00:25:41,659 --> 00:25:45,659
I'm hanging out ok so that's that's

00:25:44,220 --> 00:25:47,730
what's happening such that little task

00:25:45,659 --> 00:25:49,529
scheduler it's like ran it once put it

00:25:47,730 --> 00:25:53,580
in it put it in the in the waiting area

00:25:49,529 --> 00:25:55,169
there and what we've got to do now is we

00:25:53,580 --> 00:25:57,000
have to figure out how to get it out of

00:25:55,169 --> 00:25:58,379
there ok so that so that sort of the

00:25:57,000 --> 00:25:59,789
next the next thing that we need to do

00:25:58,379 --> 00:26:01,289
is sort of figure out how do we get

00:25:59,789 --> 00:26:04,049
things out of the waiting area and back

00:26:01,289 --> 00:26:06,210
into back running so I'm going to make a

00:26:04,049 --> 00:26:08,549
few changes here one of the things that

00:26:06,210 --> 00:26:11,220
I'm going to do is change my loop to

00:26:08,549 --> 00:26:12,160
essentially run as long as there is any

00:26:11,220 --> 00:26:14,530
task

00:26:12,160 --> 00:26:16,540
anywhere just sitting around okay so if

00:26:14,530 --> 00:26:19,900
any tasks in anywhere in the system is

00:26:16,540 --> 00:26:22,090
there I'm going to run and then I'm

00:26:19,900 --> 00:26:23,530
going to essentially have another loop

00:26:22,090 --> 00:26:28,960
in here that sort of says while there

00:26:23,530 --> 00:26:32,140
are no active tasks to run I essentially

00:26:28,960 --> 00:26:33,880
have to wait for i/o okay so I'm gonna

00:26:32,140 --> 00:26:35,580
have to wait for something to happen now

00:26:33,880 --> 00:26:38,650
the way that you're going to do that

00:26:35,580 --> 00:26:39,880
again your crash course in IO here is

00:26:38,650 --> 00:26:42,160
you can use them out you can use a

00:26:39,880 --> 00:26:43,540
library like Python select library this

00:26:42,160 --> 00:26:46,000
is something that lets you pull a whole

00:26:43,540 --> 00:26:47,440
bunch of sockets at once so you can you

00:26:46,000 --> 00:26:49,180
can do a little thing here that where

00:26:47,440 --> 00:26:51,400
you say okay who can receive who can

00:26:49,180 --> 00:26:56,290
send there's a third value that I'm not

00:26:51,400 --> 00:26:58,060
going to talk about so I'm going to do a

00:26:56,290 --> 00:26:59,380
little little little slack thing there

00:26:58,060 --> 00:27:01,060
what I'm doing is I'm just I'm just

00:26:59,380 --> 00:27:03,670
pulling the operating system saying okay

00:27:01,060 --> 00:27:06,970
who can do something and then whatever I

00:27:03,670 --> 00:27:09,640
get back from that I'm going to pop them

00:27:06,970 --> 00:27:17,380
out of the waiting area and put it back

00:27:09,640 --> 00:27:21,100
onto the task list okay there's one of

00:27:17,380 --> 00:27:23,320
them let's do the other one so we have

00:27:21,100 --> 00:27:25,930
we have we have to do one for each of

00:27:23,320 --> 00:27:26,920
the send and receive there okay so so so

00:27:25,930 --> 00:27:28,690
what's going to happen is this little

00:27:26,920 --> 00:27:31,470
scheduler you can kind of see it there

00:27:28,690 --> 00:27:33,310
it so it's running a task it's a

00:27:31,470 --> 00:27:34,750
basically saying okay why is it

00:27:33,310 --> 00:27:36,640
suspending gonna put it in the waiting

00:27:34,750 --> 00:27:39,430
area using select and it gets it back

00:27:36,640 --> 00:27:41,320
okay so that's that baddest thing that's

00:27:39,430 --> 00:27:43,330
that's the idea and it turns out that

00:27:41,320 --> 00:27:45,790
that is enough if I if I have actually

00:27:43,330 --> 00:27:47,140
done my work here that would be enough

00:27:45,790 --> 00:27:50,350
to get this thing to run concurrent

00:27:47,140 --> 00:27:53,790
client okay so assuming that there's no

00:27:50,350 --> 00:27:56,800
mistakes in it let's let's check it out

00:27:53,790 --> 00:27:58,840
okay there's that's not a good sign when

00:27:56,800 --> 00:28:02,250
it comes back with nothing there oh I

00:27:58,840 --> 00:28:05,680
know what's wrong it going on there okay

00:28:02,250 --> 00:28:07,000
you have to launch the child task here

00:28:05,680 --> 00:28:08,650
okay so it turns out that this is

00:28:07,000 --> 00:28:11,950
getting completely confused because I

00:28:08,650 --> 00:28:13,600
did not I need to look like when I make

00:28:11,950 --> 00:28:16,150
a child when I handle client I have to

00:28:13,600 --> 00:28:17,610
put it on the task list okay let's let's

00:28:16,150 --> 00:28:20,920
let's go back to that

00:28:17,610 --> 00:28:23,590
okay disaster avoided in the demo okay

00:28:20,920 --> 00:28:25,150
good okay so so we have to yeah we have

00:28:23,590 --> 00:28:28,590
that let's see if it's working there

00:28:25,150 --> 00:28:28,590
okay look that looks good

00:28:28,920 --> 00:28:33,430
that looks good too okay so so what

00:28:31,960 --> 00:28:36,250
you've got now is you have concurrency

00:28:33,430 --> 00:28:39,100
in this in this system with no threads

00:28:36,250 --> 00:28:41,580
using this weird generator yield pack

00:28:39,100 --> 00:28:43,780
kind of kind of thing there okay so

00:28:41,580 --> 00:28:46,000
hopefully everybody's mind is not

00:28:43,780 --> 00:28:47,440
completely destroyed by that but this

00:28:46,000 --> 00:28:50,470
this is this is kind of the idea with

00:28:47,440 --> 00:28:52,420
co-routines is is that now one of the

00:28:50,470 --> 00:28:55,840
things to keep in mind about co-routines

00:28:52,420 --> 00:28:58,420
is that they are not like an end-all

00:28:55,840 --> 00:28:59,560
be-all of like thread problems or

00:28:58,420 --> 00:29:01,120
anything like that like one of the

00:28:59,560 --> 00:29:02,890
things that can happen is it let's say I

00:29:01,120 --> 00:29:05,800
run my perfect that my original

00:29:02,890 --> 00:29:06,970
performance one test on that you're

00:29:05,800 --> 00:29:09,040
gonna you're going to see that kind of

00:29:06,970 --> 00:29:12,040
running the same way that it did before

00:29:09,040 --> 00:29:14,200
actually let me kill kill that I I still

00:29:12,040 --> 00:29:15,880
had like a something hammering on the

00:29:14,200 --> 00:29:17,140
CPU and another another thing okay so

00:29:15,880 --> 00:29:20,200
you see it you see it kind of running

00:29:17,140 --> 00:29:23,830
running the same way it does not avoid

00:29:20,200 --> 00:29:27,010
the Gil problem so if I were to run two

00:29:23,830 --> 00:29:28,780
of these at the same time you get the

00:29:27,010 --> 00:29:31,090
same behavior where the time doubles

00:29:28,780 --> 00:29:33,280
you're still limited to a CPU core one

00:29:31,090 --> 00:29:34,690
CPU core because I don't have any

00:29:33,280 --> 00:29:37,090
threads or anything here I mean it's

00:29:34,690 --> 00:29:39,120
like I'm doing everything myself so it

00:29:37,090 --> 00:29:42,790
doesn't avoid doesn't avoid that problem

00:29:39,120 --> 00:29:44,920
it also does not fix the response time

00:29:42,790 --> 00:29:47,590
problem either like if I run that that

00:29:44,920 --> 00:29:49,870
second performance task comes up and

00:29:47,590 --> 00:29:51,130
second ok 15,000 requests a second it's

00:29:49,870 --> 00:29:53,380
a little bit less by the way because

00:29:51,130 --> 00:29:54,970
there's more overhead I'm doing select

00:29:53,380 --> 00:29:56,200
I'm doing all this like generator stuff

00:29:54,970 --> 00:29:58,390
not not as much there's a little bit

00:29:56,200 --> 00:30:03,130
more overhead on it but if I were to do

00:29:58,390 --> 00:30:04,870
a like a long-running calculation you

00:30:03,130 --> 00:30:06,580
know like let's go in here and say okay

00:30:04,870 --> 00:30:09,820
I'm going to keep you like the 40th to

00:30:06,580 --> 00:30:11,500
the nachi number it actually just you're

00:30:09,820 --> 00:30:12,550
it's it's like well you're just totally

00:30:11,500 --> 00:30:15,670
dead at this point

00:30:12,550 --> 00:30:17,710
so it's like I guess since it went from

00:30:15,670 --> 00:30:19,750
90 to zero it's like in it's like

00:30:17,710 --> 00:30:23,260
infinity worse right is that how that

00:30:19,750 --> 00:30:25,780
works okay so so you don't you don't fix

00:30:23,260 --> 00:30:28,510
that that that blocking problem and it

00:30:25,780 --> 00:30:30,530
turns out too in order to fix that you

00:30:28,510 --> 00:30:32,540
actually have to go back to the same

00:30:30,530 --> 00:30:35,690
kinds of prop that's the same technique

00:30:32,540 --> 00:30:36,920
that you had before a very common thing

00:30:35,690 --> 00:30:37,820
that you would have to do with with

00:30:36,920 --> 00:30:41,540
co-routines

00:30:37,820 --> 00:30:43,130
is maybe punt work over to like a thread

00:30:41,540 --> 00:30:45,830
pool or something like that I'm going to

00:30:43,130 --> 00:30:47,990
do a thread pool executor first because

00:30:45,830 --> 00:30:49,910
I want to say something about that so so

00:30:47,990 --> 00:30:51,080
what would happen here is you might have

00:30:49,910 --> 00:30:53,510
to say okay I'm gonna make a pool of

00:30:51,080 --> 00:30:56,570
worker threads or something and then I

00:30:53,510 --> 00:31:00,380
would have to come down here and pump

00:30:56,570 --> 00:31:02,450
that work off to off to a pool to

00:31:00,380 --> 00:31:08,660
basically get it to run outside the

00:31:02,450 --> 00:31:10,040
event loop there's a whole lot of things

00:31:08,660 --> 00:31:12,650
that are wrong with this by the way that

00:31:10,040 --> 00:31:14,300
we'll get to in a second okay so so you

00:31:12,650 --> 00:31:16,760
would have to do that basically you know

00:31:14,300 --> 00:31:19,460
send send it out to a pool it turns out

00:31:16,760 --> 00:31:20,750
that that is not going to work some of

00:31:19,460 --> 00:31:23,600
you probably know why it's not going to

00:31:20,750 --> 00:31:25,130
work but it turns out if I run this you

00:31:23,600 --> 00:31:27,020
know that the performance test again

00:31:25,130 --> 00:31:29,330
okay it's okay now it's actually slower

00:31:27,020 --> 00:31:31,220
because it's using the thread pool it

00:31:29,330 --> 00:31:33,680
took a little bit of a hit there but it

00:31:31,220 --> 00:31:35,540
doesn't actually fix this problem of the

00:31:33,680 --> 00:31:37,280
long running calculation like if it go

00:31:35,540 --> 00:31:39,590
back there it's like still back down to

00:31:37,280 --> 00:31:42,110
zero requests a second um the reason

00:31:39,590 --> 00:31:43,820
that that's happening is that if you're

00:31:42,110 --> 00:31:47,300
programming with caught with co-routines

00:31:43,820 --> 00:31:49,820
it's basically all in like you have to

00:31:47,300 --> 00:31:52,370
go all co-routines all the way down and

00:31:49,820 --> 00:31:56,660
the problem is that this this operation

00:31:52,370 --> 00:31:58,580
here blocks like like if you don't know

00:31:56,660 --> 00:32:00,470
whether something blocks or not that

00:31:58,580 --> 00:32:02,060
could potentially shut down the whole

00:32:00,470 --> 00:32:04,310
event loop and you're sort of back to

00:32:02,060 --> 00:32:05,360
the back to the original problem so if

00:32:04,310 --> 00:32:08,510
you're going to if you're going to fix

00:32:05,360 --> 00:32:09,860
that there are all ways to do it I'll do

00:32:08,510 --> 00:32:10,940
it real quick I mean it went one way

00:32:09,860 --> 00:32:13,010
that you would have to fix it is

00:32:10,940 --> 00:32:14,780
essentially maybe include more yield

00:32:13,010 --> 00:32:16,310
statement you would say actually I have

00:32:14,780 --> 00:32:19,070
to yield because I'm waiting on this

00:32:16,310 --> 00:32:22,580
future and you would have to modify the

00:32:19,070 --> 00:32:23,600
event loop to do something for that it

00:32:22,580 --> 00:32:27,080
turns out that the month that the

00:32:23,600 --> 00:32:28,520
modifications for that are sort of

00:32:27,080 --> 00:32:30,190
somewhat non-trivial

00:32:28,520 --> 00:32:32,900
I mean what you would have to do is

00:32:30,190 --> 00:32:36,440
essentially make like a waiting area for

00:32:32,900 --> 00:32:37,820
the for the future there and then you

00:32:36,440 --> 00:32:39,380
would have to figure out some way to get

00:32:37,820 --> 00:32:41,080
it out of the out of that okay so you're

00:32:39,380 --> 00:32:43,840
going to have like a future

00:32:41,080 --> 00:32:45,580
a future waiting area for that the

00:32:43,840 --> 00:32:48,130
difficulty here is actually getting it

00:32:45,580 --> 00:32:50,080
out of that turns out to be really weird

00:32:48,130 --> 00:32:53,490
in the interest of time I'm just going

00:32:50,080 --> 00:32:55,600
to coat it real fast and you can all

00:32:53,490 --> 00:32:58,180
look in amazement or something like that

00:32:55,600 --> 00:33:00,490
but essentially to do that you have to

00:32:58,180 --> 00:33:03,550
write kind of a weird callback function

00:33:00,490 --> 00:33:06,120
that is going to pop something out of

00:33:03,550 --> 00:33:06,120
there

00:33:07,320 --> 00:33:13,180
that when it gets triggered and then I'm

00:33:09,760 --> 00:33:14,650
going to have to attach that down when

00:33:13,180 --> 00:33:17,530
this thing gets added I'm going to have

00:33:14,650 --> 00:33:21,280
to take the future and add like a like a

00:33:17,530 --> 00:33:22,750
completion callback okay so what I'm

00:33:21,280 --> 00:33:24,130
doing here is I'm essentially adding

00:33:22,750 --> 00:33:25,780
like a trigger that's sort of saying

00:33:24,130 --> 00:33:27,130
okay when when the thing is done I'm

00:33:25,780 --> 00:33:28,210
going to take you out of the future

00:33:27,130 --> 00:33:30,460
waiting area and I'm going to put you

00:33:28,210 --> 00:33:32,790
back on the task list it turns out that

00:33:30,460 --> 00:33:35,470
that is even not enough to do it

00:33:32,790 --> 00:33:38,710
you have to add some other really weird

00:33:35,470 --> 00:33:40,960
hack in here as well which is I'm going

00:33:38,710 --> 00:33:43,570
to have a future notify and a future

00:33:40,960 --> 00:33:45,520
event then I'm going to create using a

00:33:43,570 --> 00:33:47,440
socket pair and this is like basically

00:33:45,520 --> 00:33:50,200
an interconnected pair of note like

00:33:47,440 --> 00:33:52,740
sockets on your machine and what I'm

00:33:50,200 --> 00:33:56,380
going to do is is write to one of those

00:33:52,740 --> 00:33:58,510
you're like you're like good god okay

00:33:56,380 --> 00:34:02,130
what's what's going on here and then I'm

00:33:58,510 --> 00:34:05,320
going to have to write like a monitor

00:34:02,130 --> 00:34:07,330
okay so it's that that is that it's

00:34:05,320 --> 00:34:10,150
essentially going to yield that it wants

00:34:07,330 --> 00:34:14,710
to receive on sort of the future event

00:34:10,150 --> 00:34:17,050
channel and then it's just going to read

00:34:14,710 --> 00:34:19,960
on that I can toss it away essentially

00:34:17,050 --> 00:34:31,180
and then I have to append that into the

00:34:19,960 --> 00:34:32,830
into the abandoning there is this this

00:34:31,180 --> 00:34:35,080
event loop is basically stuck on the

00:34:32,830 --> 00:34:36,970
select and I have to figure out some way

00:34:35,080 --> 00:34:38,290
to get it out of there and the only way

00:34:36,970 --> 00:34:40,390
to get it out of there is to have like a

00:34:38,290 --> 00:34:42,670
socket that gets pinged whenever a

00:34:40,390 --> 00:34:46,450
result gets computed and then it can

00:34:42,670 --> 00:34:49,150
wake up the event puller so so doing

00:34:46,450 --> 00:34:51,580
that if there are no mistakes in that I

00:34:49,150 --> 00:34:54,760
have no okay let's slip let's try it out

00:34:51,580 --> 00:34:57,430
here okay so now we're back to the

00:34:54,760 --> 00:35:00,820
back to there to the thread pool thing

00:34:57,430 --> 00:35:03,550
if this works I should be able to do a

00:35:00,820 --> 00:35:05,560
long-running calculation and it won't

00:35:03,550 --> 00:35:10,500
kill the system now it's not impressive

00:35:05,560 --> 00:35:12,220
okay it's still like 29 requested okay

00:35:10,500 --> 00:35:14,200
what you're seeing here is actually

00:35:12,220 --> 00:35:15,940
something really important a lot of

00:35:14,200 --> 00:35:17,440
people think that you know just because

00:35:15,940 --> 00:35:21,130
you're using co-routines you could just

00:35:17,440 --> 00:35:22,450
ignore the Gil that is not true I mean a

00:35:21,130 --> 00:35:23,800
lot of things with co-routines you

00:35:22,450 --> 00:35:25,330
actually have to Punk the work over to

00:35:23,800 --> 00:35:27,310
like a thread pool if you're using

00:35:25,330 --> 00:35:29,290
thread pool all of a sudden you have

00:35:27,310 --> 00:35:31,210
threads competing with co-routines

00:35:29,290 --> 00:35:33,460
and your back to steer back to like

00:35:31,210 --> 00:35:35,740
square one on that okay so all that

00:35:33,460 --> 00:35:38,050
stuff with like a goal like people who

00:35:35,740 --> 00:35:39,250
program with co-routines still need to

00:35:38,050 --> 00:35:42,700
care about the global interpreter lock

00:35:39,250 --> 00:35:45,190
now now now I can I can probably better

00:35:42,700 --> 00:35:47,440
fix this you know if I if I use like a

00:35:45,190 --> 00:35:49,990
thread pool or a process pool so we're

00:35:47,440 --> 00:35:54,310
kind of back to the you know to like the

00:35:49,990 --> 00:36:01,720
thread version of this ok well let's

00:35:54,310 --> 00:36:03,190
let's let's try that ok that now it's

00:36:01,720 --> 00:36:04,720
back down to kind of the boris version

00:36:03,190 --> 00:36:07,450
with threads because i have to do i have

00:36:04,720 --> 00:36:10,750
to do things in a process if this works

00:36:07,450 --> 00:36:12,580
it shouldn't totally kill that okay so

00:36:10,750 --> 00:36:14,470
okay so if it didn't it didn't kill that

00:36:12,580 --> 00:36:16,570
but i'm having to do the same kind of

00:36:14,470 --> 00:36:17,560
I'm having to do the same kind of work I

00:36:16,570 --> 00:36:18,970
mean it's like just because I'm not

00:36:17,560 --> 00:36:20,800
using threads doesn't mean I have to

00:36:18,970 --> 00:36:24,340
think about where work takes takes

00:36:20,800 --> 00:36:26,560
places and so forth now now one of the

00:36:24,340 --> 00:36:27,970
things that then I'm gonna end with is I

00:36:26,560 --> 00:36:30,310
want to talk about the programming model

00:36:27,970 --> 00:36:32,020
of this a little bit one of the things

00:36:30,310 --> 00:36:35,020
that you might look at is you would say

00:36:32,020 --> 00:36:37,030
that yield statement just bugs the hell

00:36:35,020 --> 00:36:38,530
out of me I mean like okay this is cool

00:36:37,030 --> 00:36:40,690
and everything but like I don't want to

00:36:38,530 --> 00:36:43,420
put yield statements like that in my in

00:36:40,690 --> 00:36:47,650
my code so one of the things that you

00:36:43,420 --> 00:36:49,619
might do is you can use a new feature of

00:36:47,650 --> 00:36:52,960
Python right well relatively new feature

00:36:49,619 --> 00:36:55,270
I'm in a I'm going to make a class that

00:36:52,960 --> 00:36:58,119
that essentially wraps around a socket

00:36:55,270 --> 00:37:01,210
object and provides an alternate

00:36:58,119 --> 00:37:03,540
implementation of the receive and send

00:37:01,210 --> 00:37:03,540
calls

00:37:05,720 --> 00:37:13,440
okay in here like okay what was going on

00:37:09,150 --> 00:37:17,040
here what I'm actually doing is I'm

00:37:13,440 --> 00:37:19,590
turning that yield stuff into a into a

00:37:17,040 --> 00:37:21,120
subroutine or if you will or like up you

00:37:19,590 --> 00:37:24,960
know hidden behind a be hidden behind a

00:37:21,120 --> 00:37:29,030
method essentially like that I'm also

00:37:24,960 --> 00:37:29,030
going to do this with the accept call I

00:37:31,370 --> 00:37:38,520
need to I need to do a yield in front of

00:37:33,990 --> 00:37:41,130
that okay so so so what I'm doing is is

00:37:38,520 --> 00:37:43,920
kind of kind of wrapping that and then

00:37:41,130 --> 00:37:48,810
I'm going to do a little bit of magic

00:37:43,920 --> 00:37:52,130
here too to wrap that and and and know

00:37:48,810 --> 00:37:55,170
am I missing something there amazing Oh

00:37:52,130 --> 00:37:56,880
soft docsoft davis em yeah that that's

00:37:55,170 --> 00:37:58,710
good i probably at infinite recursion or

00:37:56,880 --> 00:38:00,090
something okay and then and then and

00:37:58,710 --> 00:38:05,550
then no python talk is complete without

00:38:00,090 --> 00:38:08,580
a get adder hack okay so okay so so i'm

00:38:05,550 --> 00:38:11,840
gonna i'm gonna do that what's going on

00:38:08,580 --> 00:38:15,390
here is i'm sensually making kind of a

00:38:11,840 --> 00:38:17,040
stand-in for a normal socket and what

00:38:15,390 --> 00:38:20,250
that's going to let me do is I can just

00:38:17,040 --> 00:38:21,630
nuke the yield statement okay I'm gonna

00:38:20,250 --> 00:38:23,790
be able to get rid of the yield now I

00:38:21,630 --> 00:38:25,440
can't totally get rid of them but I'm

00:38:23,790 --> 00:38:27,210
going to change it to sort of a yield

00:38:25,440 --> 00:38:29,100
from a statement this is the new Python

00:38:27,210 --> 00:38:31,200
three thing from like Version three to

00:38:29,100 --> 00:38:33,210
or something that that you can you can

00:38:31,200 --> 00:38:35,010
essentially yield from like a sub

00:38:33,210 --> 00:38:36,780
generator or something like that they've

00:38:35,010 --> 00:38:38,070
got the underappreciated feature of that

00:38:36,780 --> 00:38:39,930
is it actually lets you write

00:38:38,070 --> 00:38:41,670
subroutines that involve the yield

00:38:39,930 --> 00:38:46,670
statement like you can you can sort of

00:38:41,670 --> 00:38:46,670
hide you can sort of hide behind that oh

00:38:48,680 --> 00:38:53,570
okay that's dense okay going on there

00:38:53,859 --> 00:38:58,490
weird weird typo there okay so you can

00:38:56,300 --> 00:39:00,950
do a you know sort of yield from off

00:38:58,490 --> 00:39:03,640
yield from on that and and it turns out

00:39:00,950 --> 00:39:06,800
that that will work just fine

00:39:03,640 --> 00:39:08,090
at least famous last words okay fine see

00:39:06,800 --> 00:39:10,119
you see if it works okay still it's

00:39:08,090 --> 00:39:13,460
still cranking along ok that's intense

00:39:10,119 --> 00:39:14,630
okay look that looks okay okay so so so

00:39:13,460 --> 00:39:16,940
what's happening is there you're kind of

00:39:14,630 --> 00:39:18,590
cleaning up the programming model a

00:39:16,940 --> 00:39:22,130
little bit and one of the things that's

00:39:18,590 --> 00:39:23,869
kind of exciting about that is it takes

00:39:22,130 --> 00:39:25,910
your code it makes it look almost like

00:39:23,869 --> 00:39:29,050
thread code like if I were to take this

00:39:25,910 --> 00:39:32,750
code and put it side-by-side with the

00:39:29,050 --> 00:39:34,910
the thread version of that assuming that

00:39:32,750 --> 00:39:37,820
I can pull it up you're going to find

00:39:34,910 --> 00:39:39,710
that the two models almost they almost

00:39:37,820 --> 00:39:41,630
read exactly the same I mean they have

00:39:39,710 --> 00:39:44,480
to date one has the yield from one does

00:39:41,630 --> 00:39:46,190
not but from like a like a logical kind

00:39:44,480 --> 00:39:49,099
of flow point of view they look very

00:39:46,190 --> 00:39:50,480
very similar and if you get and I guess

00:39:49,099 --> 00:39:52,340
kind of maybe the big maybe one of the

00:39:50,480 --> 00:39:54,320
takeaways that if you start looking at

00:39:52,340 --> 00:39:57,050
things like pythons three async IO

00:39:54,320 --> 00:39:58,280
module you're going to see this stuff

00:39:57,050 --> 00:39:59,589
going on like if you if you haven't

00:39:58,280 --> 00:40:01,790
looked at async IO

00:39:59,589 --> 00:40:03,349
but when you do look at async I you're

00:40:01,790 --> 00:40:04,880
gonna see a lot of documentation it's

00:40:03,349 --> 00:40:06,980
going to be littered with these yield

00:40:04,880 --> 00:40:08,570
frogs it's like everything is a yield

00:40:06,980 --> 00:40:10,400
from you know it's like co-routine and

00:40:08,570 --> 00:40:12,470
so forth that is actually what they're

00:40:10,400 --> 00:40:14,839
doing now the code from that it's

00:40:12,470 --> 00:40:16,520
actually written much cleaner than what

00:40:14,839 --> 00:40:17,900
I just coded I mean I was telling

00:40:16,520 --> 00:40:20,390
somebody in the preparation for this

00:40:17,900 --> 00:40:22,550
talk that in order to make this fit in

00:40:20,390 --> 00:40:24,470
45 minutes I had to get rid of all good

00:40:22,550 --> 00:40:26,869
software practice you know like like

00:40:24,470 --> 00:40:28,970
like anything involving objects or any

00:40:26,869 --> 00:40:30,349
good design or anything like had to go

00:40:28,970 --> 00:40:32,900
out the window or I would never finish

00:40:30,349 --> 00:40:34,910
but I I think kind of the point of doing

00:40:32,900 --> 00:40:36,859
it though is just to sort of see like

00:40:34,910 --> 00:40:38,330
what is going on under the covers you

00:40:36,859 --> 00:40:39,890
know like like what is the interaction

00:40:38,330 --> 00:40:41,390
of the Gil like what is the impact of

00:40:39,890 --> 00:40:44,570
blocking what do you have to do to get

00:40:41,390 --> 00:40:47,080
around that stuff and and so forth and I

00:40:44,570 --> 00:40:49,280
think there's any kind of takeaway on it

00:40:47,080 --> 00:40:50,900
or maybe I I don't think there's any

00:40:49,280 --> 00:40:52,460
easy answer to that stuff you have to

00:40:50,900 --> 00:40:53,960
really think about like what's going on

00:40:52,460 --> 00:40:55,369
in your application like how much work

00:40:53,960 --> 00:40:57,280
is going on in your application like

00:40:55,369 --> 00:41:01,760
what work are you going to do where and

00:40:57,280 --> 00:41:03,349
and and so forth so you're ready to take

00:41:01,760 --> 00:41:05,000
questions I guess I'm out of time I mean

00:41:03,349 --> 00:41:07,039
that we can we can take a few questions

00:41:05,000 --> 00:41:09,329
but I mean

00:41:07,039 --> 00:41:13,949
that's basically the end of that so

00:41:09,329 --> 00:41:18,359
we'll please see what your people thank

00:41:13,949 --> 00:41:19,890
you so if I've got any questions line up

00:41:18,359 --> 00:41:32,279
in the middle of the room there's a

00:41:19,890 --> 00:41:35,759
microphone just there all right I think

00:41:32,279 --> 00:41:37,859
we're good for questions would the multi

00:41:35,759 --> 00:41:40,019
processing module helped at all with

00:41:37,859 --> 00:41:41,640
this multi processing module is

00:41:40,019 --> 00:41:44,160
essentially the same as like the futures

00:41:41,640 --> 00:41:45,390
module like concurrent futures so it

00:41:44,160 --> 00:41:46,949
would it would achieve the same effect

00:41:45,390 --> 00:41:48,900
essentially okay

00:41:46,949 --> 00:41:50,519
I find the concurrent futures is a

00:41:48,900 --> 00:41:52,650
little bit easier to work with for this

00:41:50,519 --> 00:41:54,390
particular just the way that you do

00:41:52,650 --> 00:41:55,890
callbacks and stuff is structured a

00:41:54,390 --> 00:41:59,279
little differently with futures and it

00:41:55,890 --> 00:42:01,140
is with multi processing did you

00:41:59,279 --> 00:42:02,429
experiment with using yield from to

00:42:01,140 --> 00:42:03,959
actually yield from inside of the

00:42:02,429 --> 00:42:05,880
Fibonacci generator so that it would

00:42:03,959 --> 00:42:06,569
break up the work a little bit and keep

00:42:05,880 --> 00:42:09,359
your response

00:42:06,569 --> 00:42:11,189
keep your requests counter high I didn't

00:42:09,359 --> 00:42:13,109
try that I mean it was the fibonacci

00:42:11,189 --> 00:42:16,019
number things already so bad I don't

00:42:13,109 --> 00:42:18,959
think it needed like additional help

00:42:16,019 --> 00:42:21,449
there did I see an unpacking assignment

00:42:18,959 --> 00:42:27,390
with an empty list on the left-hand side

00:42:21,449 --> 00:42:30,269
oh whoa what that um did I do that maybe

00:42:27,390 --> 00:42:34,099
I did do that oh did I do that with the

00:42:30,269 --> 00:42:34,099
Select oh that's interesting

00:42:36,829 --> 00:42:41,539
well that's really interesting I wonder

00:42:38,939 --> 00:42:41,539
why that worked

00:42:42,650 --> 00:42:47,219
where's-where's Bremen Hettinger when we

00:42:44,819 --> 00:42:49,319
need them here what I what I actually

00:42:47,219 --> 00:42:52,469
meant to do that there's that's I have

00:42:49,319 --> 00:42:54,630
no idea actually I've what I meant to do

00:42:52,469 --> 00:42:56,670
there is do an underscore as a throwaway

00:42:54,630 --> 00:42:57,989
that's that's a that's a trick I often

00:42:56,670 --> 00:43:02,760
do a lot where it's like I don't need

00:42:57,989 --> 00:43:05,040
that I actually have no why would that

00:43:02,760 --> 00:43:08,460
okay that's weird will have it will have

00:43:05,040 --> 00:43:10,859
an O will have an open space on an open

00:43:08,460 --> 00:43:12,869
state there's at least cook five chord

00:43:10,859 --> 00:43:14,340
we might have entered like the you know

00:43:12,869 --> 00:43:18,630
given the Raymond's own on that he

00:43:14,340 --> 00:43:20,490
probably knows yeah I know it's

00:43:18,630 --> 00:43:26,630
generalized unpacking but isn't doesn't

00:43:20,490 --> 00:43:26,630
it need like a destination like like a

00:43:27,410 --> 00:43:33,290
okay well we'll come back to yeah okay

00:43:33,619 --> 00:43:39,690
yeah we'll fiddle around with that so I

00:43:37,380 --> 00:43:41,790
thought the empty listing was just some

00:43:39,690 --> 00:43:45,510
incredible next-level thing that I was

00:43:41,790 --> 00:43:46,740
just not capable of the generally I felt

00:43:45,510 --> 00:43:48,119
that way throughout the talk as an

00:43:46,740 --> 00:43:50,490
aesthetic experience this was an

00:43:48,119 --> 00:43:52,890
incredible talk though places sellout

00:43:50,490 --> 00:43:55,770
crowd and everything of theirs rescued

00:43:52,890 --> 00:44:00,780
um I always like really really feeling

00:43:55,770 --> 00:44:01,920
it um I I really would kind of just want

00:44:00,780 --> 00:44:05,850
you to pick up where you ended actually

00:44:01,920 --> 00:44:08,280
my question is so if it's true that kind

00:44:05,850 --> 00:44:11,369
of this the thread mechanism for

00:44:08,280 --> 00:44:13,950
concurrency ends ends you get to a

00:44:11,369 --> 00:44:16,109
pattern where you're thinking about how

00:44:13,950 --> 00:44:18,630
it works and about the load does that

00:44:16,109 --> 00:44:19,890
then call into question the like is it

00:44:18,630 --> 00:44:21,840
possible then to have high level

00:44:19,890 --> 00:44:23,790
languages as concurrency becomes more

00:44:21,840 --> 00:44:26,010
and more acute it is you know are we

00:44:23,790 --> 00:44:27,690
back to having to think about the state

00:44:26,010 --> 00:44:28,770
of the CPU and our high-level logic is

00:44:27,690 --> 00:44:30,180
that where we're going with all this I I

00:44:28,770 --> 00:44:31,800
think you have to think about it I mean

00:44:30,180 --> 00:44:33,270
I know for me I mean I that there's a

00:44:31,800 --> 00:44:35,130
lot of like what they call XOR best

00:44:33,270 --> 00:44:38,040
practice on concurrency like don't have

00:44:35,130 --> 00:44:39,990
shared state use functions you know and

00:44:38,040 --> 00:44:41,460
and so forth it and that's how I tend to

00:44:39,990 --> 00:44:43,230
do a lot of concurrency is like I have

00:44:41,460 --> 00:44:44,700
simple functions there's no shared stay

00:44:43,230 --> 00:44:46,050
I'm actually thinking more about

00:44:44,700 --> 00:44:47,880
breaking it up into several like

00:44:46,050 --> 00:44:49,500
multiple processes or even multiple

00:44:47,880 --> 00:44:51,390
machines like you know if I'm going like

00:44:49,500 --> 00:44:54,150
Amazon or something I'm going to spin up

00:44:51,390 --> 00:44:55,380
you know ten AWS instances and I'm going

00:44:54,150 --> 00:44:57,810
to have a bunch of workers kind of

00:44:55,380 --> 00:44:59,880
dealing with with tasks I can't do that

00:44:57,810 --> 00:45:01,560
if I have all sorts of thread chaos with

00:44:59,880 --> 00:45:03,720
like shared state and objects floating

00:45:01,560 --> 00:45:05,760
around and so forth so I I mean I think

00:45:03,720 --> 00:45:09,630
Python works fine for concurrency if you

00:45:05,760 --> 00:45:11,070
follow the advice of the you know if

00:45:09,630 --> 00:45:12,930
people have done a lot of distributed

00:45:11,070 --> 00:45:15,600
systems and concurrency and so forth I

00:45:12,930 --> 00:45:16,590
think that you know the thing to really

00:45:15,600 --> 00:45:17,880
think about here is that you

00:45:16,590 --> 00:45:21,090
just just going to something like

00:45:17,880 --> 00:45:22,980
co-routines doesn't end your misery with

00:45:21,090 --> 00:45:24,360
the gill or something I went one far

00:45:22,980 --> 00:45:26,010
there were two final comments I didn't

00:45:24,360 --> 00:45:27,360
want to make on covert one one benefit

00:45:26,010 --> 00:45:29,010
of co-routines by the way is that you

00:45:27,360 --> 00:45:30,870
can handle a huge number of socket

00:45:29,010 --> 00:45:32,760
connections in a somewhat efficient way

00:45:30,870 --> 00:45:35,130
like if you're like if I needed to have

00:45:32,760 --> 00:45:37,740
like fifty thousand simultaneous clients

00:45:35,130 --> 00:45:39,330
on this it's probably more efficient to

00:45:37,740 --> 00:45:41,400
do that with co-routines than have fifty

00:45:39,330 --> 00:45:43,290
thousand POSIX threads I mean I could

00:45:41,400 --> 00:45:45,420
try watching fifty thousand threads but

00:45:43,290 --> 00:45:47,220
I wouldn't want to do that the other on

00:45:45,420 --> 00:45:49,410
the other comment is that this whole

00:45:47,220 --> 00:45:51,990
little like this little loop here the

00:45:49,410 --> 00:45:54,210
Select loop that is actually the core of

00:45:51,990 --> 00:45:56,070
these event-driven like callback based

00:45:54,210 --> 00:45:58,710
stuff too like if you've used twisted or

00:45:56,070 --> 00:46:00,930
the callback kind of kind of approach it

00:45:58,710 --> 00:46:03,420
basically the difference is instead of

00:46:00,930 --> 00:46:05,160
driving a generator when receiving an

00:46:03,420 --> 00:46:07,260
event they trigger a callback function

00:46:05,160 --> 00:46:08,880
but otherwise it's actually you have to

00:46:07,260 --> 00:46:10,170
deal with the same mechanisms of like

00:46:08,880 --> 00:46:12,360
polling and you have to deal with like

00:46:10,170 --> 00:46:14,460
coordinating events off of like you know

00:46:12,360 --> 00:46:16,080
thread thread you know thread pools and

00:46:14,460 --> 00:46:20,130
also a lot of that mechanism it actually

00:46:16,080 --> 00:46:20,550
the same so alright we're done I think

00:46:20,130 --> 00:46:23,360
we're great

00:46:20,550 --> 00:46:26,510
everybody please thank David basically

00:46:23,360 --> 00:46:26,510
thank you

00:46:30,970 --> 00:46:37,329
and thank you the audience you made it

00:46:34,869 --> 00:46:39,160
really easy to fit everybody who wanted

00:46:37,329 --> 00:46:41,710
a seat into a seat

00:46:39,160 --> 00:46:44,650
there's more talks in about half an hour

00:46:41,710 --> 00:46:50,010
I think and afternoon teas down to the

00:46:44,650 --> 00:46:50,010

YouTube URL: https://www.youtube.com/watch?v=MCs5OvhV9S4


