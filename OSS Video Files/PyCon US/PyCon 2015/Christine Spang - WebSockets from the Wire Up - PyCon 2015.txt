Title: Christine Spang - WebSockets from the Wire Up - PyCon 2015
Publication date: 2015-04-12
Playlist: PyCon 2015
Description: 
	"Speaker: Christine Spang

HTML5 WebSockets power the real-time web. Come take a deep dive into how they
work, from the big picture down to what goes over the wire, including insight
into the performance benefits of the protocol, via a real-world example of how
WebSockets are implemented client- and server-side in Python.

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:30,830 --> 00:00:33,430
OUR NEXT SPEAKER IS CHRISTINE SPANG.

00:00:33,430 --> 00:00:36,110
LET'S GIVE HER A WARM WELCOME.

00:00:36,110 --> 00:00:41,930
[ Applause ] >> HEY, EVERYBODY.

00:00:41,930 --> 00:00:45,800
GOOD AFTERNOON.

00:00:45,800 --> 00:00:47,739
HEY!

00:00:47,739 --> 00:00:52,489
[SCATTERED APPLAUSE] >> WE'RE GONNA BE TALKING ABOUT

00:00:52,489 --> 00:00:54,670
WEBSOCKETS TODAY.

00:00:54,670 --> 00:00:59,940
SO WEBSOCKETS IS COOL BECAUSE THEY ENABLE US TO BUILD WEB

00:00:59,940 --> 00:01:03,720
APPLICATIONS THAT ARE BOTH REAL-TIME AND THAT SCALE REALLY

00:01:03,720 --> 00:01:06,250
WELL.

00:01:06,250 --> 00:01:10,729
SO IN THIS TALK, I'M GONNA GIVE YOU SOME HISTORICAL CONTEXT FOR

00:01:10,729 --> 00:01:12,720
WHY WE NEEDED WEBSOCKETS IN THE FIRST PLACE.

00:01:12,720 --> 00:01:16,229
THEN I'M GONNA EXPLAIN TO YOU HOW THE PROTOCOL ACTUALLY WORKS

00:01:16,229 --> 00:01:23,600
AND I'LL TAKE A LOOK AT A TCP DUMP OF WEBSOCKETS IN ACTION.

00:01:23,600 --> 00:01:26,080
THINGS YOU NEED TO KEEP IN MIND WHEN ONE OF RUNNING WEBSOCKETS

00:01:26,080 --> 00:01:28,610
APPLICATIONS IN PRODUCTION.

00:01:28,610 --> 00:01:32,180
ALL RIGHT, A LITTLE BIT ABOUT ME.

00:01:32,180 --> 00:01:33,750
MY NAME IS CHRISTINE SPANG.

00:01:33,750 --> 00:01:36,900
I'VE BEEN PROGRAMMING SINCE I WAS IN HIGH SCHOOL.

00:01:36,900 --> 00:01:41,780
AFTER THAT I WENT TO M.I.T. AND THEN I SPENT THREE YEARS

00:01:41,780 --> 00:01:55,860
WORKING AT A COMPANY CALLED K-SPLICE.

00:01:55,860 --> 00:02:00,190
TODAY I'M ONE OF THE COFOUNDERS AT A COMPANY CALLED NYLAS, A

00:02:00,190 --> 00:02:03,020
STARTUP IN SAN FRANCISCO.

00:02:03,020 --> 00:02:05,412
WE'RE BUILDING A PLATFORM THAT MAKES IT EASY FOR YOU TO BUILD

00:02:05,412 --> 00:02:10,679
APPLICATIONS THAT USE DATA FROM EMAIL, CONTACTS, AND CALENDARS.

00:02:10,679 --> 00:02:13,959
ALL RIGHT, ENOUGH WITH THE INTROS.

00:02:13,959 --> 00:02:16,500
LET'S GET TO THE TALK.

00:02:16,500 --> 00:02:18,730
FIRST WE'RE GONNA TALK ABOUT WHAT WEBSOCKETS ARE.

00:02:18,730 --> 00:02:23,030
THEN I'LL GIVE YOU A PYTHON EXAMPLE, AND AN EXAMPLE THAT'S A

00:02:23,030 --> 00:02:25,260
BIT MORE REAL WORLD.

00:02:25,260 --> 00:02:30,409
THEN WE'LL TALK ABOUT PERFORMANCE AND THEIR USE IN

00:02:30,409 --> 00:02:31,409
PRODUCTION.

00:02:31,409 --> 00:02:33,290
ALL RIGHT, LET'S DIVE IN.

00:02:33,290 --> 00:02:35,870
SO WHAT ARE WEBSOCKETS?

00:02:35,870 --> 00:02:39,840
SO ANSWER THIS QUESTION, I'M FIRST GONNA GIVE YOU SOME OF THE

00:02:39,840 --> 00:02:42,531
HISTORY OF PROTOCOLS POWERING WEB APPLICATIONS, THE

00:02:42,531 --> 00:02:45,790
SHORTCOMINGS THEY HAD, AND HOW WEB DEVELOPERS ATTEMPTED TO

00:02:45,790 --> 00:02:48,330
ADDRESS THOSE SHORTCOMINGS.

00:02:48,330 --> 00:02:54,920
ALONG THE WAY, I'LL SHOW YOU HOW WEBSOCKETS TOOK A CONCEPT AND

00:02:54,920 --> 00:03:00,620
ADAPTED IT FOR THE WEB TO ENABLE NEW KINDS OF WEB APPLICATIONS TO

00:03:00,620 --> 00:03:05,260
BE BUILT.

00:03:05,260 --> 00:03:09,650
SO HERE'S A DIAGRAM THAT SHOWS HOW HTTP WORKS.

00:03:09,650 --> 00:03:14,550
HOW MANY HERE HAVE USED HTTP, UNDERSTAND HOW IT WORKS?

00:03:14,550 --> 00:03:15,690
OKAY, GOOD.

00:03:15,690 --> 00:03:18,140
THAT'S GOOD BACKGROUND FOR THIS TALK.

00:03:18,140 --> 00:03:22,590
SO TO QUICKLY OVERVIEW, OR REVIEW RATHER, YOU HAVE WEB

00:03:22,590 --> 00:03:26,040
SERVERS WHICH HOST THE STATIC HTML PAGES AND AID KEYED THAT

00:03:26,040 --> 00:03:29,280
MAKES UP THE WEB APPLICATION, AND THEN YOU HAVE BROWSERS WHICH

00:03:29,280 --> 00:03:33,460
ARE CLIENTS THAT TALK TO THE WEB SERVER USING HTTP TO RETRIEVE

00:03:33,460 --> 00:03:39,330
CONTENT TO SHOW USERS VIA THE WEB BROWSER.

00:03:39,330 --> 00:03:43,850
HERE'S AN EXAMPLE OF WHAT A TYPICAL GET REQUEST IN HTTP

00:03:43,850 --> 00:03:45,240
LOOKS LIKE.

00:03:45,240 --> 00:03:49,680
YOU CAN SEE THAT THE -- THE BASIC REQUEST IS THE VERB, GET,

00:03:49,680 --> 00:03:53,690
AND THE ARGUMENT, IN THIS CASE SLASH, AND THEN WE HAVE A WHOLE

00:03:53,690 --> 00:03:57,709
BUNCH OF OTHER INFORMATION IN THIS REQUEST THAT ARE HEADERS

00:03:57,709 --> 00:03:59,650
THAT GO ALONG WITH THE REQUEST.

00:03:59,650 --> 00:04:06,090
AND YOU CAN SEE FROM JUST THE EXCERPT UP HERE THAT MOST OF AN

00:04:06,090 --> 00:04:09,230
HTTP REQUEST IS ACTUALLY THE HEADERS AND NOT THE ACTUAL

00:04:09,230 --> 00:04:14,040
ACTION THAT WE'RE TRYING TO DO.

00:04:14,040 --> 00:04:20,650
THIS IS IMPORTANT FOR LATER.

00:04:20,650 --> 00:04:24,810
SO TO CONTINUE WITH THE BACKGROUND, THE WEB WAS

00:04:24,810 --> 00:04:28,250
ORIGINALLY CREATED BY TIM BERNERS-LEE TO SHARE STATIC

00:04:28,250 --> 00:04:32,270
ACADEMIC DOCUMENTS, AND SO THIS BASIC MODEL WHERE A CLIENT

00:04:32,270 --> 00:04:36,250
REQUESTS A PAGE, OPENS A CONNECTION TO DO THAT, AND GETS

00:04:36,250 --> 00:04:41,729
A PAGE BACK, WORKED REALLY WELL TO SHARE ACADEMIC DOCUMENTS.

00:04:41,729 --> 00:04:44,750
BUT AS TIME WENT ON, PEOPLE WANTED TO CREATE ACTUAL SOFTWARE

00:04:44,750 --> 00:04:47,909
PROGRAMS WHERE MOST OF THE WORK WAS DONE ON THE SERVER AND THE

00:04:47,909 --> 00:04:51,280
BROWSER JUST ACTS AS A THIN CLIENT, RETRIEVING NEW DATA AND

00:04:51,280 --> 00:04:53,701
RENDERING IT TO THE USER.

00:04:53,701 --> 00:04:56,550
SO THERE ARE A NUMBER OF REASONS TO WANT TO DO THIS, SUCH AS NOT

00:04:56,550 --> 00:05:02,960
WANTING TO SEND NEW UPDATES TO THE USERS'S COMPUTERS.

00:05:02,960 --> 00:05:05,389
YOU CAN CREATE INTERACTIVE APPLICATIONS.

00:05:05,389 --> 00:05:09,650
THE MAIN WRENCH IS THAT EVERY TIME SOME INTERACTION HAPPENS,

00:05:09,650 --> 00:05:14,090
SAY, A USER CLICKS ON A LINK OR A BUTTON OR THE APP WANTS TO

00:05:14,090 --> 00:05:17,919
REFRESH THE PAGE TO UPDATE THE INFORMATION BEING DISPLAYED, IT

00:05:17,919 --> 00:05:22,379
HAS TO INITIATE AN ENTIRELY NEW HTTP CONNECTION TO THE SERVER,

00:05:22,379 --> 00:05:26,050
SEND IT THE REQUEST, AND RECEIVE A RESPONSE.

00:05:26,050 --> 00:05:30,379
AND AS I SHOWED ON THE PREVIOUS SLIDE, IT TURNS OUT THAT A

00:05:30,379 --> 00:05:34,210
LOT -- THERE'S A LOT OF DATA BEING SENT IN EVERY HTTP

00:05:34,210 --> 00:05:35,330
REQUEST.

00:05:35,330 --> 00:05:41,189
THE AVERAGE HTTP HEADER REQUEST IS ACTUALLY ABOUT 800 BYTES.

00:05:41,189 --> 00:05:46,090
SO THIS SLIDE PREVIOUSLY SHOWS A REALLY BASIC REQUEST, BUT MORE

00:05:46,090 --> 00:05:51,990
COMPLEX REQUESTS CONTAIN EVEN MORE HEADERS SUCH AS COOKIES

00:05:51,990 --> 00:06:05,249
WHICH ARE ACTUALLY SENT ON EVERY SINGLE HTTP REQUEST.

00:06:05,249 --> 00:06:10,460
SO WHEN WE CREATE WEB APPS USING PLAIN OLD HTTP, BUT ONCE YOU

00:06:10,460 --> 00:06:12,889
START TO TRYING TO DO THINGS THAT ARE MUCH MORE INTERACTIVE,

00:06:12,889 --> 00:06:15,680
YOU START TO RUN INTO THE PROBLEM THAT THIS MODEL IS VERY

00:06:15,680 --> 00:06:17,490
SLOW.

00:06:17,490 --> 00:06:20,220
WE COULD REFRESH THE PAGE EVERY TIME WE WANTED TO USERS TO

00:06:20,220 --> 00:06:21,580
INTERACT WITH THE SITE.

00:06:21,580 --> 00:06:26,060
BUT IT TAKES A LONG TIME.

00:06:26,060 --> 00:06:28,569
EVEN IN THE BEST CASE SCENARIO, WE'RE LIMITED BY THE SPEED OF

00:06:28,569 --> 00:06:29,889
LIGHT.

00:06:29,889 --> 00:06:34,130
SO BETWEEN BOSTON AND SAN FRANCISCO, IN THE BEST CASE,

00:06:34,130 --> 00:06:35,849
LIGHT TAKES ABOUT 40 MILLISECONDS TO GO BACK AND

00:06:35,849 --> 00:06:39,461
FORTH, AND IN A MORE AVERAGE CASE, YOU'RE LOOKING AT MORE

00:06:39,461 --> 00:06:45,560
LIKE 80 MILLISECONDS, PLUS MORE TIME TO TRANSFER ANY DATA WHICH

00:06:45,560 --> 00:06:50,240
INCLUDES THOSE HTTP HEADERS, WHICH ARE REALLY BIG, AND ALSO

00:06:50,240 --> 00:06:53,059
TIME TO BOOTSTRAP THE TCP CONNECTION.

00:06:53,059 --> 00:06:56,889
SO IF YOU'RE GONNA TRANSFER A LOT OF DATA USING TCP, YOU HAVE

00:06:56,889 --> 00:07:00,029
TO BOOTSTRAP THE CONNECTION OVER A COUPLE OF BACK-AND-FORTHS TO

00:07:00,029 --> 00:07:05,719
INCREASE THE WINDOW SIZE.

00:07:05,719 --> 00:07:09,551
SO DEVELOPERS TRIED TO WORK AROUND THESE PROBLEMS IN A

00:07:09,551 --> 00:07:10,551
NUMBER OF DIFFERENT WAYS.

00:07:10,551 --> 00:07:13,680
ONE OF THE FIRST WAYS WAS THIS METHOD THAT ENDED UP BEING

00:07:13,680 --> 00:07:15,879
CALLED AJAX, ASYNCHRONOUS JAVASCRIPT.

00:07:15,879 --> 00:07:22,689
YOU WIRE THAT PIECE OF

00:07:22,689 --> 00:07:26,139
JAVASCRIPT UP TO A BUTTON THAT YOU WANT TO TALK TO THE SERVER,

00:07:26,139 --> 00:07:32,569
AND IT CAN GET THE RESPONSE AND THEN POTENTIALLY UPDATE A SUBSET

00:07:32,569 --> 00:07:35,419
OF THE CURRENT PAGE WITH NEW DATA.

00:07:35,419 --> 00:07:38,939
SO THIS ALLOWS US TO UPDATE PAGES WITHOUT COMPLETELY

00:07:38,939 --> 00:07:42,460
REFRESHING THEM, BUT IT STILL HAS TO CREATE ANOTHER HTTP

00:07:42,460 --> 00:07:45,939
CONNECTION, INCLUDING OPENING A NEW TCP CONNECTION TO THE

00:07:45,939 --> 00:07:50,559
SERVER, EVERY TIME IT WANTS TO SEND DATA BACK AND FORTH.

00:07:50,559 --> 00:08:00,349
CLIENTS CAN USE AJAX TO PULL A WEB SERVER TO UPDATE PAGES AS

00:08:00,349 --> 00:08:06,749
WELL.

00:08:06,749 --> 00:08:12,389
SO THIS WAS AN IMPROVEMENT ON THE SIMPLE MODEL WHERE YOU JUST

00:08:12,389 --> 00:08:14,699
SEND AND GET REQUESTS AND GET THE RESPONSE BACK, RELOADING THE

00:08:14,699 --> 00:08:17,849
WHOLE PAGE, BUT IT DIDN'T FUNDAMENTALLY CHANGE THE MODEL

00:08:17,849 --> 00:08:22,249
OF HOW WEB APPLICATIONS OPERATED.

00:08:22,249 --> 00:08:24,930
ONE PROBLEM WAS THAT IF COMPUTATION WAS HAPPENING ON THE

00:08:24,930 --> 00:08:30,020
SERVER AND THE CLIENT WANTED TO KEEP IT UPDATED, IT HAD TO PULL

00:08:30,020 --> 00:08:35,459
OR KEEP CHECKING IN AND CREATE A NEW CONNECTION EVERY TIME.

00:08:35,459 --> 00:08:39,240
SO ANOTHER LIMITATION THAT WEB APPS HAD COMPARED TO, SAY, A

00:08:39,240 --> 00:08:43,760
DESKTOP APPLICATION WAS THAT UP UNTIL THIS POINT IN TIME, THE

00:08:43,760 --> 00:08:46,610
COMMUNICATION BETWEEN THE CLIENT AND SERVER WAS FUNDAMENTALLY

00:08:46,610 --> 00:08:51,800
ONE-WAY.

00:08:51,800 --> 00:08:55,800
SO WEB DEVELOPERS ARE REALLY SMART PEOPLE, AND THEY CAME UP

00:08:55,800 --> 00:08:59,820
WITH A WAY TO WORK AROUND THIS AS WELL.

00:08:59,820 --> 00:09:03,070
THE THING THEY CAME UP WITH NEXT WAS A MODEL CALLED COMET, OR

00:09:03,070 --> 00:09:06,060
SOMETIMES LONG-PULLING.

00:09:06,060 --> 00:09:09,340
THIS INVOLVED KEEPING A LONG-LIVED HTTP CONNECTION OPEN

00:09:09,340 --> 00:09:12,720
UNTIL A TIMEOUT EXPIRES OR THE SERVER HAS SOME DATA TO RETURN

00:09:12,720 --> 00:09:14,720
TO THE CLIENT.

00:09:14,720 --> 00:09:17,560
THE CLIENT THEN OPENS ANOTHER HTTP CONNECTION TO THE SERVER

00:09:17,560 --> 00:09:20,690
AND CONTINUES TO WAIT FOR DATA.

00:09:20,690 --> 00:09:24,070
SO THIS WORKED PRETTY WELL ACTUALLY.

00:09:24,070 --> 00:09:27,740
BUT THERE WAS ONE CASE THAT WAS LEFT WHERE IT STILL DEGRADED,

00:09:27,740 --> 00:09:31,150
AND THAT'S IF THE APPLICATION NEEDED TO PASS DATA OR MESSAGES

00:09:31,150 --> 00:09:33,990
BACK AND FORTH FROM THE CLIENT TO THE SERVER AT A REALLY HIGH

00:09:33,990 --> 00:09:37,820
INTERVAL.

00:09:37,820 --> 00:09:41,470
SO THIS IS AN ACTUAL CODE FROM -- QUOTE FROM ONE OF THE

00:09:41,470 --> 00:09:45,870
WEBSOCKETS RFCS, AND IT SAYS, "HISTORICALLY, CREATING WEB

00:09:45,870 --> 00:09:48,030
APPLICATIONS THAT NEEDED BIDIRECTIONAL COMMUNICATION

00:09:48,030 --> 00:09:51,090
BETWEEN A CLIENT AND SERVER, E.G., GAMING AND INSTANT

00:09:51,090 --> 00:09:55,430
MESSAGING APPLICATIONS, HAS REQUIRED AN ABUSE OF HTTP TO

00:09:55,430 --> 00:09:57,780
POLL THE SERVER FOR UPDATES WHILE SENDING UPSTREAM

00:09:57,780 --> 00:10:01,030
NOTIFICATIONS AS DISTINCT HTTP CALLS."

00:10:01,030 --> 00:10:05,400
SO IT'S RIGHT THERE IN THE RFC, WHY WE NEEDED TO COME UP WITH

00:10:05,400 --> 00:10:09,080
SOMETHING THAT WAS DIFFERENT.

00:10:09,080 --> 00:10:15,020
OH, OOPS.

00:10:15,020 --> 00:10:23,930
THAT'S NOT RIGHT.

00:10:23,930 --> 00:10:26,890
IN ORDER TO BE ABLE TO IMPLEMENT PROPER REAL-TIME APPLICATIONS,

00:10:26,890 --> 00:10:29,400
APPS THAT WERE SENDING SMALL MESSAGES BACK AND FORTH BETWEEN

00:10:29,400 --> 00:10:32,450
CLIENT AND SERVER OFTEN, WE REALLY NEEDED A PROTOCOL THAT

00:10:32,450 --> 00:10:38,150
ALLOWED-TWO WAY COMMUNICATION WITH LOW LATENCY, AND THAT'S

00:10:38,150 --> 00:10:46,510
WHERE WEBSOCKETS CAME IN.

00:10:46,510 --> 00:10:49,640
SO NOW YOU HAVE SOME HISTORICAL CONTEXT.

00:10:49,640 --> 00:10:51,690
LET'S TALK ABOUT HOW THE WEBSOCKETS PROTOCOL ACTUALLY

00:10:51,690 --> 00:10:56,200
WORKS NOW SO WE CAN BETTER UNDERSTAND HOW IT EVOLVED AND

00:10:56,200 --> 00:11:01,620
HOW IT ALLOWS DIFFERENT KINDS OF APPS TO EXIST ON THE WEB.

00:11:01,620 --> 00:11:04,070
IN ORDER TO DO THIS, WE HAVE TO TAKE A LOOK AT ANOTHER PIECE OF

00:11:04,070 --> 00:11:06,560
COMPUTING HISTORY.

00:11:06,560 --> 00:11:08,930
OR WHAT THE WORD "SOCKET" ACTUALLY MEANS IN A COMPUTING

00:11:08,930 --> 00:11:12,250
CONTEXT ANYWAY.

00:11:12,250 --> 00:11:16,570
IN THE 1970s, WHEN UNIX WAS DEVELOPED, PART OF THE OPERATING

00:11:16,570 --> 00:11:23,030
SYSTEM API THAT BRIAN KERNIGHAN -- CONTAINED AN API

00:11:23,030 --> 00:11:24,030
CALLED A SOCKET.

00:11:24,030 --> 00:11:26,730
I HAVE NO IDEA WHY THEY CALLED IT THIS.

00:11:26,730 --> 00:11:30,980
AND I ASKED THE INTERNET, AND NO ONE KNEW EITHER.

00:11:30,980 --> 00:11:32,830
SO WHO KNOWS.

00:11:32,830 --> 00:11:36,190
SO UNIX DOMAIN SOCKETS WERE USED FOR LOCAL INTERPROCESS

00:11:36,190 --> 00:11:39,820
COMMUNICATION, OR IPC, ON A SINGLE SERVER.

00:11:39,820 --> 00:11:46,060
YOU WOULD MAKE A CALL TO THE SOCKET CALL, AND THEN YOU GET A

00:11:46,060 --> 00:11:48,630
FILE DESCRIPTOR, YOU COULD USE TO COMMUNICATE BETWEEN

00:11:48,630 --> 00:11:50,540
PROCESSES.

00:11:50,540 --> 00:11:52,930
THE SOCKET WAS A BIDIRECTIONAL LINK BETWEEN TWO DIFFERENT

00:11:52,930 --> 00:11:56,470
PROGRAMS WHICH IT COULD USE TO SEND MESSAGES BACK AND FORTH.

00:11:56,470 --> 00:12:00,550
IF YOU USED THE SOCKET SYSCALL IN LINUX, YOU CAN ALSO USE IT TO

00:12:00,550 --> 00:12:03,260
CREATE A SOCKET THAT GOES ACROSS THE NETWORK.

00:12:03,260 --> 00:12:06,040
SO YOUR PROGRAM ON A LOCAL COMPUTER CAN OPEN UP A SOCKET TO

00:12:06,040 --> 00:12:09,230
A GAME SERVER, AND THE GAME SERVER CAN SEND THE PROGRAM

00:12:09,230 --> 00:12:13,640
UPDATES OR VICE VERSA.

00:12:13,640 --> 00:12:19,090
SO THE LINUX SOCKET API IS REALLY SUPER SIMPLE.

00:12:19,090 --> 00:12:23,800
IT CONSISTS OF THREE SYSCALLS: SOCKET, WHICH CREATES THE SOCKET

00:12:23,800 --> 00:12:28,030
DESCRIPTOR; AND THEN THERE'S SEND AND RECEIVE, WHICH WERE

00:12:28,030 --> 00:12:31,100
USED TO PASS MESSAGES BACK AND FORTH.

00:12:31,100 --> 00:12:35,320
I BRING ALL THIS UP BECAUSE IT TURNS OUT THAT YOU CAN THINK OF

00:12:35,320 --> 00:12:41,010
WEBSOCKETS AS BASICALLY UNIX SOCKETS FOR WEB APPLICATIONS.

00:12:41,010 --> 00:12:44,650
THE WEBSOCKETS PROTOCOL AND API WERE INTRODUCED AS A PART OF THE

00:12:44,650 --> 00:12:49,820
HTML 5 SPECIFICATION, BUT THEY WERE EVENTUALLY SPLIT OUT IN

00:12:49,820 --> 00:12:57,600
ORDER TO KEEP HTML 5 SIMPLER.

00:12:57,600 --> 00:13:00,780
BEFORE WEBSOCKETS, THERE WERE SOME WAYS TO OPEN UP SOCKETS IN

00:13:00,780 --> 00:13:05,180
WEB APPLICATIONS, BUT THERE WAS NO STANDARD API FOR IT.

00:13:05,180 --> 00:13:08,180
YOU HAD TO USE A NONSTANDARD BROWSER EXTENSION LIKE FLASH IN

00:13:08,180 --> 00:13:09,880
ORDER TO DO IT.

00:13:09,880 --> 00:13:13,760
THE WEB SOCKET SPEC MADE THE IDEA OF USING WEBSOCKETS

00:13:13,760 --> 00:13:16,780
STANDARD AND ALSO DEALT WITH PROBLEMS UNIQUE TO WEB

00:13:16,780 --> 00:13:19,850
APPLICATIONS TRYING TO USE SOCKETS LIKE DEALING WITH

00:13:19,850 --> 00:13:23,410
FIREWALLS AND PROXIES.

00:13:23,410 --> 00:13:27,620
SO THE THINGS LAID OUT IN THE WEBSOCKETS ARE -- WITH HOW THE

00:13:27,620 --> 00:13:31,940
WEBSOCKETS API WORKS AND THE PROTOCOL WORKS WERE SPECIFICALLY

00:13:31,940 --> 00:13:35,930
DESIGNED TO MAKE IT EASY TO USE SOCKETS USING EXISTING WEB

00:13:35,930 --> 00:13:37,100
INFRASTRUCTURE.

00:13:37,100 --> 00:13:39,880
SO FOR EXAMPLE, IT'S A PROBLEM TO USE SOCKETS ON DIFFERENT

00:13:39,880 --> 00:13:45,490
PORTS THAN PORT 80 OR PORT 443 BECAUSE PROXIES AND FIREWALLS

00:13:45,490 --> 00:13:49,220
WILL ACTUALLY DROP TRAFFIC OR BLOCK TRAFFIC TO THESE PORTS.

00:13:49,220 --> 00:13:52,820
SO WEBSOCKETS WERE SPECIFICALLY DESIGNED TO BE

00:13:52,820 --> 00:14:01,130
BACKWARDS-COMPATIBLE WITH THIS INFRASTRUCTURE.

00:14:01,130 --> 00:14:06,590
SO WEBSOCKETS MAKE REAL-TIME APPS POSSIBLE ON THE WEB, BUT

00:14:06,590 --> 00:14:09,250
WHAT'S A REAL-TIME APP?

00:14:09,250 --> 00:14:13,970
BASICALLY THAT MEANS ANYTHING LIVE UPDATING AT HIGH FREQUENCY.

00:14:13,970 --> 00:14:19,990
FOR EXAMPLE, GAMES, STOCK TICKERS, CHAT PROGRAMS.

00:14:19,990 --> 00:14:23,310
THE CHAT PROGRAM SLACK, FOR EXAMPLE, USES WEBSOCKETS TO

00:14:23,310 --> 00:14:31,680
CONNECT FROM THE WEB BROWSER CLIENT TO THE SERVER.

00:14:31,680 --> 00:14:35,490
SO NOW I WANT TO TAKE A LOOK AT A SUPER SIMPLE WEBSOCKETS

00:14:35,490 --> 00:14:37,570
EXAMPLE USING PYTHON.

00:14:37,570 --> 00:14:40,340
ALL RIGHT.

00:14:40,340 --> 00:14:44,500
THERE WE GO.

00:14:44,500 --> 00:14:45,880
UH...

00:14:45,880 --> 00:14:48,580
NOT THIS ONE.

00:14:48,580 --> 00:14:51,660
WE WANT THIS ONE.

00:14:51,660 --> 00:14:52,660
OKAY.

00:14:52,660 --> 00:15:00,590
HOPEFULLY YOU GUYS CAN SEE THAT OKAY.

00:15:00,590 --> 00:15:07,730
SO...

00:15:07,730 --> 00:15:10,930
SO I'VE CREATED A LITTLE EXAMPLE HERE USING THE

00:15:10,930 --> 00:15:17,780
WEBSOCKETS LIBRARY, WHICH IS A PYTHON 3 ONLY LIBRARY THAT IS

00:15:17,780 --> 00:15:22,410
BUILT USING ASYNCIO.

00:15:22,410 --> 00:15:28,300
SO LET'S TAKE A REALLY QUICK LOOK AT THIS CODE.

00:15:28,300 --> 00:15:31,500
YOU CAN SEE THAT IT CONSISTS OF A SINGLE FUNCTION.

00:15:31,500 --> 00:15:36,240
AND BASICALLY USES THIS WEBSOCKETS LIBRARY TO SERVE THAT

00:15:36,240 --> 00:15:42,190
SINGLE FUNCTION ON LOCAL HOSTS ON THIS PORT 8765.

00:15:42,190 --> 00:15:46,710
AND THEN IT JUST RUNS IN A LOOP FOREVER AND SERVES THIS FUNCTION

00:15:46,710 --> 00:15:53,360
TO EVERY CONNECTION THAT CONNECTS TO THIS PORT.

00:15:53,360 --> 00:15:57,090
>> [ Inaudible ] >> SURE.

00:15:57,090 --> 00:16:05,960
I THINK I'M GONNA, LIKE, DO IT HERE, OR, LIKE, MAKE A NEW

00:16:05,960 --> 00:16:09,120
TERMINAL.

00:16:09,120 --> 00:16:12,290
UM...

00:16:12,290 --> 00:16:15,250
IT'S REALLY ANNOYING TO BRING THINGS UP IN VIM, BECAUSE

00:16:15,250 --> 00:16:30,690
THE COLOR SCHEME IS TERRIBLE ON A PROJECTOR.

00:16:30,690 --> 00:16:37,640
OKAY.

00:16:37,640 --> 00:16:41,040
I DON'T WANT, LIKE, SPEND TOO MUCH TIME FIDDLING AROUND WITH

00:16:41,040 --> 00:16:42,339
THIS.

00:16:42,339 --> 00:16:43,650
SORRY.

00:16:43,650 --> 00:16:47,260
I CAN DO, LIKE, THIS.

00:16:47,260 --> 00:16:50,620
HERE, OR, OOPS.

00:16:50,620 --> 00:16:53,980
MAKE IT BIGGER.

00:16:53,980 --> 00:16:56,220
[ Applause ] SUCCESS!

00:16:56,220 --> 00:16:59,970
YOU DON'T GET SYNTAX HIGHLIGHTING NOW, THOUGH.

00:16:59,970 --> 00:17:01,980
BUT THERE'S NOT A LOT OF CODE HERE, SO YOU DON'T REALLY NEED

00:17:01,980 --> 00:17:04,720
THE HIGHLIGHTING.

00:17:04,720 --> 00:17:11,209
BASICALLY THIS USES THE "YIELD FROM" EXPRESSION FROM PYTHON 3.

00:17:11,209 --> 00:17:13,980
TO MAKE THIS ASYNCHRONOUS.

00:17:13,980 --> 00:17:17,189
AND THIS IS THE CLIENT, RIGHT?

00:17:17,189 --> 00:17:19,500
SO THE CLIENT -- I WAS LOOKING AT THE SERVER BEFORE, BUT THE

00:17:19,500 --> 00:17:24,529
CLIENT WILL CONNECT TO THE SERVER RIGHT HERE, SO WEBSOCKETS

00:17:24,529 --> 00:17:29,909
URLs LOOK LIKE WEBSOCKETS, COLON, SLASH, SLASH.

00:17:29,909 --> 00:17:35,799
THEN YOU'LL DO WEBSOCKET.SEND TO SEND A MESSAGE.

00:17:35,799 --> 00:17:47,570
AND THEN IN THE SERVER, YOU CAN ACTUALLY SEE THAT IT DOES

00:17:47,570 --> 00:17:52,490
WEBSOCKET.RECEIVE TO RECEIVE A MESSAGE.

00:17:52,490 --> 00:17:57,230
SO THIS IS EXACTLY THE SAME API AS WE SAW ON THE LINUX SOCKET

00:17:57,230 --> 00:17:58,309
API.

00:17:58,309 --> 00:18:01,169
IT'S CREATE A WEB SOCKET.

00:18:01,169 --> 00:18:02,710
SEND AND RECEIVE.

00:18:02,710 --> 00:18:05,240
SUPER SIMPLE.

00:18:05,240 --> 00:18:10,679
AND ACTUALLY WANT TO SHOW YOU GUYS THIS RUNNING.

00:18:10,679 --> 00:18:15,019
SO I CAN FIRE UP A SERVER.

00:18:15,019 --> 00:18:16,470
OH, OOPS.

00:18:16,470 --> 00:18:17,919
VIRTUAL M...

00:18:17,919 --> 00:18:18,919
OKAY.

00:18:18,919 --> 00:18:19,919
SO NOW THE SERVER'S RUNNING.

00:18:19,919 --> 00:18:30,190
AND THEN I WANT TO MAKE THIS BIGGER.

00:18:30,190 --> 00:18:34,190
SO THEN WE CAN FIRE UP THE CLIENT AND SAY, HI, MY NAME IS

00:18:34,190 --> 00:18:35,190
SPANG.

00:18:35,190 --> 00:18:36,619
AND IT SAYS HELLO.

00:18:36,619 --> 00:18:39,549
AND THEN WE CAN GO BACK TO THE SERVER AND SEE IT ALSO SAYS

00:18:39,549 --> 00:18:40,549
HELLO.

00:18:40,549 --> 00:18:43,220
SO IF THIS WERE A BETTER DEMO, I WOULD DO LOTS OF THESE IN

00:18:43,220 --> 00:18:47,860
PARALLEL, AND YOU COULD SEE THAT IT WOULD JUST SEND THIS AT THE

00:18:47,860 --> 00:18:48,869
SAME TIME.

00:18:48,869 --> 00:18:51,570
BUT THIS IS A SUPER SIMPLE EXAMPLE.

00:18:51,570 --> 00:18:54,660
AND I WANT TO KEEP IT SUPER SIMPLE BECAUSE I ACTUALLY WANT

00:18:54,660 --> 00:18:59,970
US TO TAKE A LOOK AT WHAT ACTUAL TRAFFIC IS GOING OVER THE WIRE.

00:18:59,970 --> 00:19:05,630
SO YOU CAN USE A PROGRAM CALLED TCP DUMP TO CAPTURE INTERNET

00:19:05,630 --> 00:19:09,529
TRAFFIC BETWEEN TWO DIFFERENT SERVERS OR BETWEEN THE SAME

00:19:09,529 --> 00:19:13,009
SERVER, BETWEEN YOUR LAPTOP AND YOUR LAPTOP.

00:19:13,009 --> 00:19:14,529
AND I WANT US TO DO THAT RIGHT NOW.

00:19:14,529 --> 00:19:18,899
SO I'M NOT GONNA RUN, LIKE, THE SUPER LIVE TCP CAPTURE, BUT I'M

00:19:18,899 --> 00:19:23,240
JUST GONNA SHOW YOU HOW TO DO IT.

00:19:23,240 --> 00:19:27,789
SO GENERALLY, TO CAPTURE WEBSOCKETS TRAFFIC, YOU'D RUN

00:19:27,789 --> 00:19:30,350
TCP DUMP, AND IT HAS A LOT OF OBSCURE ARGUMENTS THAT YOU

00:19:30,350 --> 00:19:37,029
SHOULD READ THE MAN PAGE TO FIGURE OUT WHAT THEY MEAN.

00:19:37,029 --> 00:19:40,960
YOU WANT TO CAPTURE TCP TRAFFIC AND HTTP TRAFFIC ON THIS

00:19:40,960 --> 00:19:43,240
SPECIFIC PORT.

00:19:43,240 --> 00:19:47,940
AND THIS SAYS TO LIKE OUTPUT IT TO THIS DUMP FILE.

00:19:47,940 --> 00:19:53,899
SO ACTUALLY HAVE THIS DUMP FILE, WEB SOCKET SIMPLE DUMP, WHICH IS

00:19:53,899 --> 00:19:56,789
A TCP DUMP CAPTURE FILE.

00:19:56,789 --> 00:20:00,649
AND THEN THERE'S THIS TOOL FOR LOOKING AT WEB TRAFFIC THAT IS

00:20:00,649 --> 00:20:05,639
CALLED WIRESHARK THAT WE CAN USE TO TAKE A LOOK AT THIS.

00:20:05,639 --> 00:20:10,960
SO IF I PULL UP THIS DUMP FILE IN WIRESHARK, SO I WANT TO CLEAR

00:20:10,960 --> 00:20:13,409
THE FILTER HERE FIRST.

00:20:13,409 --> 00:20:17,840
SO THIS IS A DUMP OF DOING THE SAME INTERACTION THAT WE SAW

00:20:17,840 --> 00:20:25,210
BEFORE, AND THAT WAS, LIKE, CONNECTING A SIMPLE CLIENT, AND

00:20:25,210 --> 00:20:30,110
SEEING THE SERVER RESPOND TO IT.

00:20:30,110 --> 00:20:32,489
SO YOU CAN SEE THAT IT BOOTSTRAPS A TCP CONNECTION,

00:20:32,489 --> 00:20:36,659
SENDS AN -- ALL RIGHT, WE GOT A TCP CONNECTION.

00:20:36,659 --> 00:20:40,059
AND THEN IT SENDS AN HTTP REQUEST.

00:20:40,059 --> 00:20:43,019
SO THIS IS A REALLY IMPORTANT PART OF WEBSOCKETS.

00:20:43,019 --> 00:20:45,210
IT HAS TO DO WITH THIS WHOLE BACKWARDS-COMPATIBILITY THING

00:20:45,210 --> 00:20:50,899
THAT I SAID EARLIER.

00:20:50,899 --> 00:20:52,899
BOOTSTRAPPED OVER HTTP.

00:20:52,899 --> 00:20:57,669
SO WHEN YOU HAVE A WEBSOCKETS APPLICATION, YOU SEND AN HTTP

00:20:57,669 --> 00:21:00,950
REQUEST TO START IT, BECAUSE EVERYTHING UNDERSTANDS WHAT HTTP

00:21:00,950 --> 00:21:04,860
IS AND NOT EVERYTHING UNDERSTANDS WHAT WEBSOCKETS ARE.

00:21:04,860 --> 00:21:06,890
SO...

00:21:06,890 --> 00:21:15,029
YEAH, HERE WE GO.

00:21:15,029 --> 00:21:18,169
SO I WANT TO APPLY A FILTER ON THIS SO WE GET RID OF ALL THE

00:21:18,169 --> 00:21:20,240
TCP BOOTSTRAPPING PACKETS.

00:21:20,240 --> 00:21:21,299
YEAH.

00:21:21,299 --> 00:21:22,360
OOPS.

00:21:22,360 --> 00:21:25,549
HTTP OR WEBSOCKETS.

00:21:25,549 --> 00:21:28,740
THERE WE GO.

00:21:28,740 --> 00:21:30,869
OKAY, COOL.

00:21:30,869 --> 00:21:33,419
SO THIS IS THE INTERESTING STUFF HERE.

00:21:33,419 --> 00:21:38,140
SO YOU SEE IT STARTS WITH A GET, SLASH, BOOTSTRAPPING OVER HTTP.

00:21:38,140 --> 00:21:43,970
THEN YOU CAN SEE THE NEXT PART IS A SPECIAL HTTP STATUS CODE

00:21:43,970 --> 00:21:46,809
CALLED THE 101 SWITCHING PROTOCOLS.

00:21:46,809 --> 00:21:51,690
SO 101 SWITCHING PROTOCOLS IS HOW THE SERVER TELLS THE CLIENT

00:21:51,690 --> 00:21:54,419
THAT WE'RE GONNA SWITCH OVER TO USING WEBSOCKETS INSTEAD OF

00:21:54,419 --> 00:21:56,029
BASIC HTTP.

00:21:56,029 --> 00:22:03,279
SO AFTER THAT, WE DIVE INTO THE WEBSOCKETS FRAMES.

00:22:03,279 --> 00:22:06,840
SO WEBSOCKETS WERE DESIGNED TO BE SUPER MINIMAL, IN THAT THE

00:22:06,840 --> 00:22:10,679
OVERHEAD PER FRAME IS REALLY SMALL.

00:22:10,679 --> 00:22:14,559
SO YOU CAN ACTUALLY USE WIRESHARK TO TAKE A LOOK AT THE

00:22:14,559 --> 00:22:20,600
ACTUAL DATA THAT'S BEING SENT, AND IF YOU SEE HERE, IT'S WEB

00:22:20,600 --> 00:22:24,029
SOCKETS, AND IT WILL SHOW YOU THE ACTUAL DATA THAT'S IN THIS

00:22:24,029 --> 00:22:25,169
PACKET.

00:22:25,169 --> 00:22:29,799
SO THE FIRST THINGS UP AT THE TOP ARE THE PADDING.

00:22:29,799 --> 00:22:33,830
THIS IS ONE BIT CALLED FIN, WHICH DESIGNATES WHETHER OR NOT

00:22:33,830 --> 00:22:35,499
THIS IS LIKE THE LAST PACKET.

00:22:35,499 --> 00:22:37,249
SO IF YOU'RE SENDING A BUNCH OF DATA, YOU'RE GONNA HAVE TO HAVE

00:22:37,249 --> 00:22:38,830
MULTIPLE FRAMES.

00:22:38,830 --> 00:22:40,409
SO THIS HAPPENS TO BE A SMALL PACKET, SO IT SAYS...

00:22:40,409 --> 00:22:42,690
YES, ONE, THIS IS THE END.

00:22:42,690 --> 00:22:51,850
THEN THERE'S A FEW RESERVED BYTES.

00:22:51,850 --> 00:22:55,789
THEN THERE'S THIS THING CALLED A MASK.

00:22:55,789 --> 00:23:00,559
AND THE MASK IS ALSO PART OF WHY WEBSOCKETS ARE COMPATIBLE WITH

00:23:00,559 --> 00:23:03,080
EXISTING INTERNET INFRASTRUCTURE.

00:23:03,080 --> 00:23:08,580
SO THE MASK AND THE MASKING KEY ARE USED BY CLIENTS SENDING DATA

00:23:08,580 --> 00:23:12,870
TO THE SERVER TO OBFUSCATE THE PAYLOAD WHICH MAKES IT LESS

00:23:12,870 --> 00:23:17,669
LIKELY THAT VARIOUS SERVERS IN THE MIDDLE LIKE BETWEEN VARIOUS

00:23:17,669 --> 00:23:21,549
DIFFERENT PACKET HOPS WILL MESS WITH THE PAYLOAD AND JUST BREAK

00:23:21,549 --> 00:23:24,749
EVERYTHING.

00:23:24,749 --> 00:23:27,610
SO THEN WE ALSO HAVE A PAYLOAD LENGTH SO WE KNOW HOW MANY

00:23:27,610 --> 00:23:29,650
PACKETS TO EXPECT.

00:23:29,650 --> 00:23:33,220
AND THEN WE ACTUALLY JUST HAVE THE PACKET OR THE PAYLOAD.

00:23:33,220 --> 00:23:36,869
AND YOU CAN SEE -- I DON'T KNOW IF THIS IS DECODED.

00:23:36,869 --> 00:23:38,649
OH, YEAH.

00:23:38,649 --> 00:23:40,620
SO YOU HAVE THE PAYLOAD HERE, AND THEN YOU HAVE THE PAYLOAD

00:23:40,620 --> 00:23:42,289
WITH THE MASK APPLIED.

00:23:42,289 --> 00:23:48,409
SO YOU CAN SEE IT WAS JUST SENDING MY NAME, SPANG.

00:23:48,409 --> 00:23:52,919
SO THAT'S THE BASICS OF HOW THE PROTOCOL WORKS.

00:23:52,919 --> 00:23:54,440
SO IT'S SUPER SIMPLE.

00:23:54,440 --> 00:23:58,889
AND LET'S GO BACK TO THE SLIDES.

00:23:58,889 --> 00:24:05,820
HERE'S A LITTLE DIAGRAM OF THIS WEB SOCKET PROTOCOL

00:24:05,820 --> 00:24:08,789
BOOTSTRAPPING PROCESS THAT WE WERE TALKING ABOUT.

00:24:08,789 --> 00:24:14,809
SO AGAIN, YOU START THE PROCESS USING BASIC HTTP.

00:24:14,809 --> 00:24:16,559
YOU ISSUE A GET REQUEST.

00:24:16,559 --> 00:24:20,460
THEN THE SERVER -- WITH CONNECTION UPGRADE.

00:24:20,460 --> 00:24:26,559
THEN THE SERVER ALSO RESPONDS WITH THIS SPECIAL CODE CALLED

00:24:26,559 --> 00:24:30,259
HTTP 101 SWITCHING PROTOCOLS.

00:24:30,259 --> 00:24:34,419
AND THEN THE CONVERSATION CAN CONTINUE FROM THERE, SENDING

00:24:34,419 --> 00:24:36,279
MESSAGES BACK AND FORTH.

00:24:36,279 --> 00:24:38,650
EITHER THE CLIENT OR THE SERVER CAN SEND A MESSAGE EITHER WAY AT

00:24:38,650 --> 00:24:43,269
THAT POINT BECAUSE WE'RE USING WEBSOCKETS AND NOT HTTP.

00:24:43,269 --> 00:24:45,809
AND THAT CONNECTION WILL BE CLOSED AS SOON AS EITHER THE

00:24:45,809 --> 00:24:50,499
SERVER OR THE CLIENT CLOSES IT BECAUSE IT'S BIDIRECTIONAL.

00:24:50,499 --> 00:24:57,239
WE ALREADY TALKED ABOUT THIS, SWITCHING PROTOCOLS.

00:24:57,239 --> 00:24:59,460
THAT'S HOW IT STARTS UP.

00:24:59,460 --> 00:25:02,149
OKAY, SO NOW I WANT TO SHOW YOU GUYS AN EXAMPLE THAT'S A BIT

00:25:02,149 --> 00:25:06,190
MORE REAL WORLD.

00:25:06,190 --> 00:25:09,690
BACK IN THE DAY WHEN -- I THINK IT WAS, LIKE, 2006 OR 2007 OR

00:25:09,690 --> 00:25:12,610
SOMETHING LIKE THAT, WHEN WEBSOCKETS WERE SUPER NEW,

00:25:12,610 --> 00:25:16,159
MOZILLA CREATED THIS GAME CALLED BROWSER QUEST IN ORDER TO

00:25:16,159 --> 00:25:20,450
DEMONSTRATE HOW WEBSOCKETS WERE INTERESTING AND USEFUL.

00:25:20,450 --> 00:25:23,889
SO GAMES ARE A REALLY GREAT APPLICATION FOR WEBSOCKETS

00:25:23,889 --> 00:25:26,879
BECAUSE, YOU KNOW, IF YOUR CHARACTER'S MOVING AROUND, YOU

00:25:26,879 --> 00:25:29,129
MIGHT WANT TO SEND, LIKE, LITTLE UPDATES ABOUT WHERE THE

00:25:29,129 --> 00:25:32,600
CHARACTER'S MOVING TO OR IF THERE'S, LIKE, A BATTLE GOING

00:25:32,600 --> 00:25:35,760
ON, YOU WANT TO SEND THOSE BATTLE COMMANDS AND UPDATE ALL

00:25:35,760 --> 00:25:38,540
THE OTHER CHARACTERS THAT ARE LOGGED INTO THE SAME SERVER.

00:25:38,540 --> 00:25:41,690
AND IT'S IMPORTANT TO BE ABLE TO SCALE THESE THINGS TO LARGE

00:25:41,690 --> 00:25:42,690
SIZES.

00:25:42,690 --> 00:25:45,590
SO THE AMOUNT OF DATA THAT YOU'RE SENDING OVER THE WIRE CAN

00:25:45,590 --> 00:25:47,820
BE REALLY IMPORTANT.

00:25:47,820 --> 00:25:53,429
SO I -- THE BROWSER QUEST GAME WAS A BIT ROTTED, SO I HAD TO

00:25:53,429 --> 00:25:59,460
FORK IT TO MAKE THIS WORK, SO -- >> [ Inaudible ]

00:25:59,460 --> 00:26:04,679
>> I DID, BUT THEY TOLD ME THAT THEY'RE NOT MAINTAINING IT

00:26:04,679 --> 00:26:07,100
ANYMORE AND THEY WOULDN'T TAKE IT.

00:26:07,100 --> 00:26:11,630
SO YOU'LL HAVE TO USE MY FORK IF YOU WANT IT TO WORK.

00:26:11,630 --> 00:26:16,440
>> [ Inaudible ] [ Laughter ]

00:26:16,440 --> 00:26:19,169
>> I'M SURE THAT WILL BE A MORE COMPELLING CASE.

00:26:19,169 --> 00:26:21,359
ALL RIGHT, COOL.

00:26:21,359 --> 00:26:24,929
SO I HAVE A VM THAT I SET UP THAT'S RUNNING THIS GAME.

00:26:24,929 --> 00:26:29,100
UNFORTUNATELY, IT'S ALSO -- THE GAME'S ALSO RAN IN NODE.JS.

00:26:29,100 --> 00:26:30,460
BLAME MOZILLA.

00:26:30,460 --> 00:26:35,489
SO HERE'S THE GAME SERVER RUNNING IN MY VM.

00:26:35,489 --> 00:26:42,940
AND THEN I'M GONNA CLOSE THESE ONES THAT I'M NOT USING ANYMORE.

00:26:42,940 --> 00:26:48,840
I DON'T NEED THAT ONE.

00:26:48,840 --> 00:26:52,869
I DON'T NEED WIRESHARK ANYMORE EITHER.

00:26:52,869 --> 00:26:55,669
MAKE IT GO AWAY.

00:26:55,669 --> 00:26:56,669
OKAY.

00:26:56,669 --> 00:26:57,669
SO THIS IS THE GAME.

00:26:57,669 --> 00:27:00,529
AND THEN ACTUALLY WE NEED A WEB BROWSER, WHICH IS OUR CLIENT.

00:27:00,529 --> 00:27:07,309
SO I THINK I HAVE IT RUNNING ON THIS LOCAL IP ADDRESS HERE.

00:27:07,309 --> 00:27:08,940
OH, NO.

00:27:08,940 --> 00:27:10,570
DAMN IT!

00:27:10,570 --> 00:27:11,570
OKAY.

00:27:11,570 --> 00:27:13,690
I WANT IT TO START FROM THE BEGINNING.

00:27:13,690 --> 00:27:16,390
AND I ALSO WANT TO USE THE CHROME DEV TOOLS.

00:27:16,390 --> 00:27:21,369
ALL RIGHT, CHROME DEV TOOLS ARE AWESOME, BY THE WAY.

00:27:21,369 --> 00:27:22,369
OKAY.

00:27:22,369 --> 00:27:23,929
SO WE CONNECT, AND THEN IT ASKS FOR YOUR NAME.

00:27:23,929 --> 00:27:26,000
SO I'M GONNA SAY SPANG.

00:27:26,000 --> 00:27:29,529
AND THEN WE CAN JUST HIT PLAY.

00:27:29,529 --> 00:27:33,450
SO THAT WAS IT.

00:27:33,450 --> 00:27:36,999
IT WAS CONNECTING TO THE WEBSOCKETS SERVER.

00:27:36,999 --> 00:27:39,221
AND USUALLY WHEN YOU'RE RUNNING A WEBSOCKETS APPLICATION, YOU

00:27:39,221 --> 00:27:45,309
RUN IT BEHIND A PROXY LIKE ENGINE X OR APACHE OR WHATEVER.

00:27:45,309 --> 00:27:47,259
OKAY.

00:27:47,259 --> 00:27:53,509
SO THEN WHAT I WANT TO LOOK IS THE NETWORK TAB HERE.

00:27:53,509 --> 00:27:58,789
AND THE INTERESTING PART OF THE CHROME DEV TOOLS, SO THEY HAVE

00:27:58,789 --> 00:28:02,649
NATIVE SUPPORT FOR DEBUGGING WEBSOCKETS, AND ALL YOU HAVE TO

00:28:02,649 --> 00:28:06,259
DO IS SCROLL THROUGH THIS REALLY LONG LIST OF RESOURCES LOADING

00:28:06,259 --> 00:28:08,590
AND FIND THE ONE THAT'S WEBSOCKETS.

00:28:08,590 --> 00:28:12,539
SO GIVE ME ONE SECOND.

00:28:12,539 --> 00:28:15,150
WHERE IS THE FILTER, BY THE WAY?

00:28:15,150 --> 00:28:17,309
ON THE LEFT?

00:28:17,309 --> 00:28:18,309
WHICH BUTTON?

00:28:18,309 --> 00:28:20,960
OH, THE SEARCH?

00:28:20,960 --> 00:28:22,130
THE FUNNEL.

00:28:22,130 --> 00:28:23,130
OKAY.

00:28:23,130 --> 00:28:25,809
THANK YOU. 101.

00:28:25,809 --> 00:28:26,809
NO.

00:28:26,809 --> 00:28:30,409
OH, HERE WE GO.

00:28:30,409 --> 00:28:31,409
NICE.

00:28:31,409 --> 00:28:32,409
AWESOME.

00:28:32,409 --> 00:28:35,850
THANKS FOR THAT TIP, GUYS.

00:28:35,850 --> 00:28:36,850
OKAY.

00:28:36,850 --> 00:28:42,549
SO THEN OVER HERE ON THE RIGHT, YOU HAVE THE GENERAL INFORMATION

00:28:42,549 --> 00:28:44,100
ABOUT THE WEBSOCKETS CONNECTION.

00:28:44,100 --> 00:28:47,649
AND THEN YOU CAN LOOK AT THE INDIVIDUAL -- BLAH -- THE

00:28:47,649 --> 00:28:49,749
INDIVIDUAL FRAMES.

00:28:49,749 --> 00:28:53,090
SO -- OH, THIS IS -- HERE WE GO.

00:28:53,090 --> 00:28:55,039
THERE YOU GO.

00:28:55,039 --> 00:28:59,309
SO YOU CAN SEE THAT WHENEVER I CLICK SOMEWHERE, IT IS SENDING

00:28:59,309 --> 00:29:02,299
SOME DATA BACK TO THE SERVER, AND THEN IF WE GO BACK TO OUR

00:29:02,299 --> 00:29:06,499
TERMINAL, I CAN ALSO SEE THAT IT'S LIKE SPANG IS MOVING TO

00:29:06,499 --> 00:29:10,679
39-209.

00:29:10,679 --> 00:29:16,580
SO IT'S SENDING THESE LISTS OF NUMBERS BACK AND FORTH.

00:29:16,580 --> 00:29:19,809
SO WE'RE RUNNING OUT OF TIME, SO I'M GONNA TRY TO WRAP THIS UP.

00:29:19,809 --> 00:29:25,889
BUT THE REALLY INTERESTING THING HERE IS THAT THIS COULD SCALE TO

00:29:25,889 --> 00:29:28,070
A TON OF CONNECTIONS BECAUSE WE'RE ONLY SENDING TINY LITTLE

00:29:28,070 --> 00:29:29,070
BITS OF DATA.

00:29:29,070 --> 00:29:30,070
OKAY.

00:29:30,070 --> 00:29:31,070
ALL RIGHT.

00:29:31,070 --> 00:29:33,600
I GOT TO WRAP THIS UP.

00:29:33,600 --> 00:29:40,940
SO I'M GONNA GO THROUGH, LIKE, TWO SLIDES MORE.

00:29:40,940 --> 00:29:44,039
SO -- PERFORMANCE.

00:29:44,039 --> 00:29:47,679
JUST TO REMIND YOU, WEBSOCKETS HAVE OVERHEAD OF LIKE 2 TO 14

00:29:47,679 --> 00:29:51,979
BYTES COMPARED TO HTTP WHICH IS 800 BYTES PER CONNECTION.

00:29:51,979 --> 00:29:56,820
YOU PROBABLY ONLY NEED TO USE WEBSOCKETS IF YOU NEED TO SCALE

00:29:56,820 --> 00:29:59,179
YOUR APPLICATION TO A LOT OF CONNECTIONS BECAUSE OTHERWISE IT

00:29:59,179 --> 00:30:07,100
DOESN'T REALLY MATTER.

00:30:07,100 --> 00:30:12,119
SO ABOUT 80% OF BROWSERS TODAY HAVE SUPPORT FOR WEBSOCKETS.

00:30:12,119 --> 00:30:16,460
AND 20% DON'T. SO YOU SHOULD USE A POLYFILL

00:30:16,460 --> 00:30:21,470
LIBRARY, USUALLY SOCKET.IO, IN ORDER TO NOT MAKE YOUR

00:30:21,470 --> 00:30:24,070
APPLICATION NOT WORK FOR THOSE APPS.

00:30:24,070 --> 00:30:25,380
OKAY.

00:30:25,380 --> 00:30:28,009
ALL RIGHT.

00:30:28,009 --> 00:30:30,779
SO THAT'S ALL I HAVE FOR YOU FOLKS TODAY.

00:30:30,779 --> 00:30:32,279
THIS WENT A LITTLE BIT QUICKLY.

00:30:32,279 --> 00:30:37,279
SO I ALSO HAVE SOME LINKS HERE IF YOU WANT TO LEARN MORE.

00:30:37,279 --> 00:30:41,080
AND I DIDN'T REALLY GET A CHANCE TO GO INTO SPECIFICS ABOUT WHAT

00:30:41,080 --> 00:30:42,590
YOU SHOULD USE WITH PYTHON.

00:30:42,590 --> 00:30:45,549
THERE IS A LIBRARY CALLED FLASK SOCKET.IO WHICH I THINK IS A

00:30:45,549 --> 00:30:53,169
GOOD CHOICE FOR BUILDING APPS THAT NEED A POLYFILL.

00:30:53,169 --> 00:31:00,919
THANK YOU.

00:31:00,919 --> 00:31:05,889
[ Applause ] >> IF YOU HAVE QUESTIONS, I'LL

00:31:05,889 --> 00:31:07,499
BE OUTSIDE, BECAUSE WE DON'T HAVE ANY MORE TIME RIGHT NOW.

00:31:07,499 --> 00:31:08,499
10 11

00:31:08,499 --> 00:31:09,499
12 13

00:31:09,499 --> 00:31:10,499
14 15

00:31:10,499 --> 00:31:11,499
16 17

00:31:11,499 --> 00:31:12,499
18 19

00:31:12,499 --> 00:31:13,499
20 21

00:31:13,499 --> 00:31:14,499
22 23

00:31:14,499 --> 00:31:14,501

YouTube URL: https://www.youtube.com/watch?v=u5QT3luWx7w


