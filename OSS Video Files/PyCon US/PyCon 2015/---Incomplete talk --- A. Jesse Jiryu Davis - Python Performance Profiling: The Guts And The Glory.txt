Title: ---Incomplete talk --- A. Jesse Jiryu Davis - Python Performance Profiling: The Guts And The Glory
Publication date: 2015-04-12
Playlist: PyCon 2015
Description: 
	---Partial tutorial, due to a technical error only the beginning of the speak was recorded, sorry for the inconvenience---

"Speaker: A. Jesse Jiryu Davis

Your Python program is too slow, and you need to optimize it. Where do you start? With the right tools, you can optimize your code where it counts. We’ll explore the guts of the Python profiler “Yappi” to understand its features and limitations. We’ll learn how to find the maximum performance wins with minimum effort.

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides
Captions: 
	00:00:05,480 --> 00:00:13,769
thank you very much so I'm a Python

00:00:10,410 --> 00:00:20,520
programmer at MongoDB my name is jesse

00:00:13,769 --> 00:00:24,630
davis and at MongoDB we write drivers

00:00:20,520 --> 00:00:27,900
for our database in 10 different

00:00:24,630 --> 00:00:31,500
languages in Java JavaScript C sharp C

00:00:27,900 --> 00:00:34,260
C++ and so on and so forth and the

00:00:31,500 --> 00:00:39,030
particular driver that I mainly work on

00:00:34,260 --> 00:00:44,539
is called PI and that's the

00:00:39,030 --> 00:00:49,950
standard Python driver for mongodb now

00:00:44,539 --> 00:00:53,640
last year uh somebody wrote a blog post

00:00:49,950 --> 00:00:57,960
on a fairly popular site called d zone

00:00:53,640 --> 00:01:02,809
in which he had done a performance test

00:00:57,960 --> 00:01:07,260
of MongoDB with a few of our drivers and

00:01:02,809 --> 00:01:09,390
this was a stranger to me on the whole

00:01:07,260 --> 00:01:13,350
this was good news that somebody that we

00:01:09,390 --> 00:01:15,900
didn't know had hit a particular

00:01:13,350 --> 00:01:22,790
performance number with MongoDB that he

00:01:15,900 --> 00:01:26,130
found to be impressive he had used the

00:01:22,790 --> 00:01:28,560
asynchronous nodejs driver for mongodb

00:01:26,130 --> 00:01:31,259
and on his particular laptop he had

00:01:28,560 --> 00:01:33,509
gotten I think 88,000 inserts per second

00:01:31,259 --> 00:01:36,450
and he thought that this was pretty good

00:01:33,509 --> 00:01:40,290
and so he published it to dzone saying

00:01:36,450 --> 00:01:43,890
MongoDB seems fast the first that I

00:01:40,290 --> 00:01:47,759
heard about this though was a when the

00:01:43,890 --> 00:01:52,860
bad news hit that when he compared my

00:01:47,759 --> 00:01:55,710
colleagues driver with mine mine was

00:01:52,860 --> 00:02:01,649
only a third as fast as my colleagues

00:01:55,710 --> 00:02:05,850
was and the specific moment when I found

00:02:01,649 --> 00:02:09,770
out about this particular article on

00:02:05,850 --> 00:02:13,220
dzone was when I got the following email

00:02:09,770 --> 00:02:13,220
from my boss

00:02:17,480 --> 00:02:25,439
so this is from Steve who is my boss at

00:02:22,019 --> 00:02:30,269
the time he's writing to me and he's

00:02:25,439 --> 00:02:35,489
sees seeing Elliot who is the CTO of

00:02:30,269 --> 00:02:39,299
MongoDB incorporated one of the most

00:02:35,489 --> 00:02:41,069
frightening Lee intelligent actually we

00:02:39,299 --> 00:02:44,700
don't need the modifier simply one of

00:02:41,069 --> 00:02:50,189
the most frightening people that I know

00:02:44,700 --> 00:02:52,470
and steve was asking so how come hi

00:02:50,189 --> 00:02:55,829
 is only third as fast as the node

00:02:52,470 --> 00:03:00,569
driver and then he links to the

00:02:55,829 --> 00:03:03,389
aforementioned article so I am now on

00:03:00,569 --> 00:03:06,480
high alert I need to figure out the

00:03:03,389 --> 00:03:09,629
answer to this question both for the

00:03:06,480 --> 00:03:11,310
sake of knowing it and also for the sake

00:03:09,629 --> 00:03:15,750
of not looking like an idiot in front of

00:03:11,310 --> 00:03:19,099
Stephen Elliott so I get the code from

00:03:15,750 --> 00:03:23,099
the article and it started analyzing it

00:03:19,099 --> 00:03:25,829
starts off simply enough we import pie

00:03:23,099 --> 00:03:31,199
mango we make a connection to the

00:03:25,829 --> 00:03:34,409
database we get a database name in his

00:03:31,199 --> 00:03:37,500
case he's calling it random and then we

00:03:34,409 --> 00:03:40,500
get a collection off of that database

00:03:37,500 --> 00:03:43,019
handle and it's called random data and

00:03:40,500 --> 00:03:48,150
then he wipes it so that he can start

00:03:43,019 --> 00:03:50,159
his benchmark from a clean baseline so

00:03:48,150 --> 00:03:52,590
so far I don't see any problems here I'm

00:03:50,159 --> 00:03:56,280
kind of looking for problems because I'm

00:03:52,590 --> 00:03:58,470
hoping it's not my fault so the next

00:03:56,280 --> 00:04:00,540
thing that happens is he decides that

00:03:58,470 --> 00:04:02,430
he's going to insert 80,000 documents

00:04:00,540 --> 00:04:05,819
and he's going to do it in batches of

00:04:02,430 --> 00:04:08,370
five thousand at a time and he creates

00:04:05,819 --> 00:04:11,280
this empty list that he's going to

00:04:08,370 --> 00:04:12,750
accumulate each batch in before he sends

00:04:11,280 --> 00:04:16,530
it off and then he writes down the start

00:04:12,750 --> 00:04:17,909
time so far so good he imports date I've

00:04:16,530 --> 00:04:24,539
now things are starting to get a little

00:04:17,909 --> 00:04:25,790
bit weird he writes down the date for

00:04:24,539 --> 00:04:28,410
january first

00:04:25,790 --> 00:04:30,540
2012 and the date for January for his

00:04:28,410 --> 00:04:34,110
2013 and then he calculates the number

00:04:30,540 --> 00:04:36,990
of seconds between them he calls that

00:04:34,110 --> 00:04:39,210
Delta but I'm not going to worry about

00:04:36,990 --> 00:04:45,120
that right now I'm just going to keep

00:04:39,210 --> 00:04:51,290
moving and oh god what's what's Vlad

00:04:45,120 --> 00:04:57,360
doing here so the main question here is

00:04:51,290 --> 00:05:01,770
WTF are these three lines of date crap

00:04:57,360 --> 00:05:03,150
um so we can kind of start from the

00:05:01,770 --> 00:05:05,690
bottom because that's the innermost

00:05:03,150 --> 00:05:09,630
portion and work our way out from there

00:05:05,690 --> 00:05:11,640
the it begins so he makes a random

00:05:09,630 --> 00:05:14,280
number between zero and one right that's

00:05:11,640 --> 00:05:16,230
what random dot random does and he

00:05:14,280 --> 00:05:18,150
multiplies that by Delta so now he's got

00:05:16,230 --> 00:05:21,470
a random number of seconds evenly

00:05:18,150 --> 00:05:25,350
distributed over a year of seconds and

00:05:21,470 --> 00:05:27,360
then he adds that so so ok so we put

00:05:25,350 --> 00:05:30,150
that aside for a second and we look at

00:05:27,360 --> 00:05:34,200
min datetime tuple so he's converting

00:05:30,150 --> 00:05:36,900
from january first 2012 as a daytime

00:05:34,200 --> 00:05:39,060
into a time tuple and the only reason he

00:05:36,900 --> 00:05:42,479
wants to do that is so he can convert it

00:05:39,060 --> 00:05:44,400
to a unix timestamp then he adds this

00:05:42,479 --> 00:05:46,680
random number of seconds in and then he

00:05:44,400 --> 00:05:50,310
converts the whole shebang back into a

00:05:46,680 --> 00:05:52,979
date so now we've got a random date in

00:05:50,310 --> 00:05:59,300
2012 right that's all he wanted to

00:05:52,979 --> 00:05:59,300
accomplish it could have been so simple

00:06:00,240 --> 00:06:05,320
alright we understand now he makes

00:06:03,430 --> 00:06:07,750
another random value he sticks them both

00:06:05,320 --> 00:06:09,430
into a dictionary in MongoDB our

00:06:07,750 --> 00:06:10,750
documents are much like Python

00:06:09,430 --> 00:06:14,860
dictionaries and so that's how we

00:06:10,750 --> 00:06:17,400
represent them and then he appends it to

00:06:14,860 --> 00:06:20,650
the bash and whenever the batch hits

00:06:17,400 --> 00:06:23,919
five thousand documents he inserts it

00:06:20,650 --> 00:06:27,220
all in one go into MongoDB and clears it

00:06:23,919 --> 00:06:29,729
and that's a perfectly good pattern to

00:06:27,220 --> 00:06:35,139
insert documents five thousand at a time

00:06:29,729 --> 00:06:37,660
you can insert up to 16 megabytes of

00:06:35,139 --> 00:06:40,090
documents at a time into MongoDB and so

00:06:37,660 --> 00:06:41,950
that minimizes round trip time so that

00:06:40,090 --> 00:06:47,889
seems good so that's that's not the

00:06:41,950 --> 00:06:52,060
problem we can conclude our analysis of

00:06:47,889 --> 00:06:54,789
Vlad's code he calculates the duration

00:06:52,060 --> 00:06:56,380
and he divides his throughput by his

00:06:54,789 --> 00:07:00,340
duration and he comes up with a number

00:06:56,380 --> 00:07:02,020
and when i run this i find a 30,000

00:07:00,340 --> 00:07:03,490
document per second through put on my

00:07:02,020 --> 00:07:05,320
laptop and that's great because that's

00:07:03,490 --> 00:07:08,380
pretty close to what his number was on

00:07:05,320 --> 00:07:10,570
his hardware so we've got a very similar

00:07:08,380 --> 00:07:14,050
baseline for me to do my investigation

00:07:10,570 --> 00:07:17,560
on fantastic the other thing I want to

00:07:14,050 --> 00:07:21,340
do is I want to compare it to the enemy

00:07:17,560 --> 00:07:25,270
which is the node driver so I'm going to

00:07:21,340 --> 00:07:28,390
look at vlads nodejs code but i'm not

00:07:25,270 --> 00:07:31,000
going to show you because we're at PyCon

00:07:28,390 --> 00:07:34,450
suffice to say that it does the same

00:07:31,000 --> 00:07:36,730
stuff I compared their logic and they

00:07:34,450 --> 00:07:40,930
seemed to be accomplishing the same work

00:07:36,730 --> 00:07:44,020
and so the performance differential is

00:07:40,930 --> 00:07:46,450
not the result of doing different stuff

00:07:44,020 --> 00:07:47,770
it must be either because they're in

00:07:46,450 --> 00:07:50,760
different languages or because they're

00:07:47,770 --> 00:07:50,760

YouTube URL: https://www.youtube.com/watch?v=4uJWWXYHxaM


