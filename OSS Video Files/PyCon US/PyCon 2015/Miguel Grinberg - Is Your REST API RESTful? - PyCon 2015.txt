Title: Miguel Grinberg - Is Your REST API RESTful? - PyCon 2015
Publication date: 2015-04-11
Playlist: PyCon 2015
Description: 
	"Speaker: Miguel Grinberg

Writing a fully complaint REST API is hard, so hard it is too common for APIs to violate one or more of the REST architectural principles. In this talk I will describe the six REST principles, and I will tell you what happens if you don't follow them.

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:21,610 --> 00:00:22,610
MIGUEL GRINBERG.

00:00:22,610 --> 00:00:24,810
HE IS AN ENGINEER AT RACKSPACE.

00:00:24,810 --> 00:00:28,540
HE ALSO QUITE LITERALLY WROTE THE BOOK ON FLASK DEVELOPMENT, SOMETHING THAT'S BEEN

00:00:28,540 --> 00:00:34,720
EXTREMELY HELP ME TO ME AS I'VE BEEN WORKING ON PYTHON WEB ENGINEERING.

00:00:34,720 --> 00:00:39,930
IT'S VEIL FROM O'REILLY.

00:00:39,930 --> 00:00:46,780
REALLY IMPROVING THE QUALITY OF YOUR REST APIS SO I'LL LET MIGUEL TAKE IT FROM THERE.

00:00:46,780 --> 00:00:50,040
[ APPLAUSE ] >> THANK YOU.

00:00:50,040 --> 00:00:51,130
OKAY.

00:00:51,130 --> 00:00:56,120
FIRST OF ALL, I WANT TO SAY SOMETHING REALLY QUICK.

00:00:56,120 --> 00:01:01,510
THIS IS SUPPOSED TO BE A GOOD DAY FOR ME BUT I JUST LEARNED THAT MY MOM PASSED AWAY TODAY

00:01:01,510 --> 00:01:03,010
UNEXPECTEDLY.

00:01:03,010 --> 00:01:06,950
SO I'M GOING TO DEDICATE THIS TALK TO HER.

00:01:06,950 --> 00:01:09,690
THANK YOU.

00:01:09,690 --> 00:01:17,900
[ APPLAUSE ] THAT WAS A GREAT INTRODUCTION.

00:01:17,900 --> 00:01:20,640
THANK YOU.

00:01:20,640 --> 00:01:24,820
SO MOST OF THIS IT'S ALREADY, YOU KNOW, DUPLICATION.

00:01:24,820 --> 00:01:30,380
BUT YES, I WORK FOR RACKSPACE ON OPENSTACK.

00:01:30,380 --> 00:01:34,150
I HAVE A BUNCH OF EXTENSIONS FOR FLASK.

00:01:34,150 --> 00:01:42,090
OPENSOURCE FOR GITHUB, AND I HAVE A BLOG THAT MANY OF YOU FOUND ME AND TOLD ME THAT YOU

00:01:42,090 --> 00:01:45,340
FOUND IT USEFUL, SO THAT MAKES ME VERY HAPPY.

00:01:45,340 --> 00:01:51,510
AND THEN THERE'S THE BOOK AND A BUNCH OF OTHER THINGS THAT I DID WITH O'REILLY.

00:01:51,510 --> 00:01:55,600
SO BASICALLY, IF I CAN SUMMARIZE THIS, I LIKE FLASK.

00:01:55,600 --> 00:01:57,520
THAT'S HOW I'LL PUT IT.

00:01:57,520 --> 00:02:02,520
SO TODAY I'M GOING TO TALK ABOUT RESTFUL APIS.

00:02:02,520 --> 00:02:16,310
THIS IS A TOPIC THAT YOU'RE GOING TO FIND PLENTY OF PEOPLE THAT ASK I WANT TO DO THIS

00:02:16,310 --> 00:02:24,090
OR THAT AND HOW DO I DO IT IN AN API, AND THEN ALWAYS SOMEONE COMES UP AND SAYS NO,

00:02:24,090 --> 00:02:28,840
THAT'S NOT RESTFUL, DON'T DO IT. AND THEN, YOU KNOW, THE PERSON THAT ASKED

00:02:28,840 --> 00:02:30,590
THE QUESTION IS LEFT WITH NOTHING.

00:02:30,590 --> 00:02:32,290
HOW DO I DO IT?

00:02:32,290 --> 00:02:35,090
SO IT'S REALLY VERY CONFUSING.

00:02:35,090 --> 00:02:42,450
AND ONE OF THE PROBLEMS IS THAT THE REST PAPER, THE PAPER THAT INTRODUCED EVERYTHING

00:02:42,450 --> 00:02:51,920
WHICH WAS PUBLISHED IN THE YEAR 2000 BY ROY FIELDING IS VERY HIGH LEVEL.

00:02:51,920 --> 00:02:54,690
IT DOESN'T TALK ABOUT DOING REST OVER HTTP.

00:02:54,690 --> 00:03:01,590
IT JUST DESCRIBES AT A VERY HIGH LEVEL HOW REST SERVICE SHOULD BEHAVE, BUT IT DOESN'T

00:03:01,590 --> 00:03:07,730
SAY HOW TO MAP THAT INTO HTTP, WHICH IS WHAT WE ALL USE TO IMPLEMENT OUR APIS.

00:03:07,730 --> 00:03:11,459
SO THE OTHER THING THAT WILL BE USEFUL IS IF

00:03:11,459 --> 00:03:17,100
THERE WAS GOOD EXAMPLES, REFERENCE IMPLEMENTATIONS THAT WE CAN ALL FOLLOW.

00:03:17,100 --> 00:03:19,410
AND TO MY KNOWLEDGE, THERE ARE NONE.

00:03:19,410 --> 00:03:27,140
I DON'T KNOW ANY API THAT I CAN SAY THAT IS 100% RESTFUL, NOT EVEN THE BIG ONES.

00:03:27,140 --> 00:03:34,690
SO ANOTHER PROBLEM, I'M SAYING I DON'T THINK THEY'RE RESTFUL, BUT IT'S ME THINKING THAT

00:03:34,690 --> 00:03:36,120
THEY'RE NOT RESTFUL.

00:03:36,120 --> 00:03:42,209
THE REST PAPER DOESN'T REALLY SAY HOW HTTP SHOULD IMPLEMENT THESE APIS, SO IT'S REALLY

00:03:42,209 --> 00:03:46,150
MY OPINION, AND THERE'S A LOT OF PEOPLE MAKING OPINIONS.

00:03:46,150 --> 00:03:51,959
PEOPLE GO MAKE OPINIONS ON THE INTERNET, OR THEY GO TO CONFERENCES AND VOICE THEIR

00:03:51,959 --> 00:03:52,959
OPINIONS.

00:03:52,959 --> 00:03:53,959
AND HERE I AM.

00:03:53,959 --> 00:03:54,959
I'M DOING THE SAME THING.

00:03:54,959 --> 00:03:58,879
SO, YOU KNOW, IT'S KIND OF A MESS.

00:03:58,879 --> 00:04:01,500
SO SOMETHING THAT I HEARD MENTIONED A LOT IN

00:04:01,500 --> 00:04:07,379
THE OPENSTACK ENVIRONMENT IS THAT PEOPLE SAY WE'RE DOING PRAGMATIC REST.

00:04:07,379 --> 00:04:10,160
AND BASICALLY, THAT'S AN EXCUSE TO SAY WE ARE

00:04:10,160 --> 00:04:14,580
TAKING THE PARTS OF REST THAT WE LIKE, AND WE'RE IGNORING THE REST OR WE'RE IGNORING

00:04:14,580 --> 00:04:17,280
THE PARTS THAT WE DON'T UNDERSTAND.

00:04:17,280 --> 00:04:18,430
AND IS THAT A PROBLEM?

00:04:18,430 --> 00:04:20,739
I DON'T THINK IT IS A PROBLEM.

00:04:20,739 --> 00:04:27,990
THE PURISTS SAY YOU SHOULD NOT CALL YOUR API A REST API, BUT WHO CARES, RIGHT?

00:04:27,990 --> 00:04:33,560
YOU CAN BENEFIT FROM THE REST PRINCIPLES EVEN IF NOT ALL OF THEM, JUST SOME.

00:04:33,560 --> 00:04:37,270
SO IT'S STILL A GOOD THING TO -- YOU KNOW, TO

00:04:37,270 --> 00:04:42,520
FOLLOW AS MANY AS YOU FIND USEFUL.

00:04:42,520 --> 00:04:51,580
SO TO BE RESTFUL ACCORDING TO THE PURISTS, YOU SHOULD ABIDE BY SIX RESTFUL CONSTRAINTS.

00:04:51,580 --> 00:04:56,720
THESE ARE THE SIX THAT ARE SPECIFIED IN THE ORIGINATING PAPER.

00:04:56,720 --> 00:05:05,240
SO THESE ARE THE SIX LISTED HERE IN THE ORDER THEY APPEAR ON THAT PAPER, ON THAT DOCUMENT.

00:05:05,240 --> 00:05:11,880
IT'S REALLY AMAZING THAT SOMETHING THAT CAN BE LISTED SO CONCISELY IS SO COMPLEX.

00:05:11,880 --> 00:05:20,180
SO WHAT I DID WITH THESE SIX IS I RATED THEM FROM EASY, MEDIUM OR HARD.

00:05:20,180 --> 00:05:23,450
SO I'M GOING TO GO OVER SIX OF THEM SORTED BY

00:05:23,450 --> 00:05:27,010
COMPLEXITY.

00:05:27,010 --> 00:05:30,910
AND THEN AFTER I'M DONE WITH THIS, WHICH SHOULD BE -- IT'S A BRIEF OVERVIEW.

00:05:30,910 --> 00:05:32,580
I'M NOT GOING TO GO INTO A LOT OF DETAIL.

00:05:32,580 --> 00:05:36,990
AFTER I'M DONE WITH THIS, I'M GOING TO SHOW YOU AN EXAMPLE.

00:05:36,990 --> 00:05:37,990
THAT'S ANOTHER PROBLEM.

00:05:37,990 --> 00:05:43,380
A LOT OF PEOPLE, PURISTS, THEY SAY YOU SHOULD NOW DO THIS, YOU SHOULD DO THAT.

00:05:43,380 --> 00:05:45,240
BUT THEY DON'T HAVE ANYTHING TO BACK IT UP.

00:05:45,240 --> 00:05:47,160
SO WHAT I'M GOING TO DO HERE IS I'M GOING TO

00:05:47,160 --> 00:05:51,300
SHOW YOU WHAT I THINK IS A DECENT MODEL.

00:05:51,300 --> 00:05:53,310
IT'S REASONABLY RESTFUL.

00:05:53,310 --> 00:05:54,960
THE PURISTS WOULD SAY THAT IT'S NOT QUITE.

00:05:54,960 --> 00:05:57,659
I THINK IT'S CLOSE IF IT'S NOT RIGHT THERE ON

00:05:57,659 --> 00:05:59,240
THE MARK.

00:05:59,240 --> 00:06:02,440
SO LET'S START.

00:06:02,440 --> 00:06:05,620
SO THE FIRST ONE IS OPTIONAL.

00:06:05,620 --> 00:06:08,000
SO YOU CAN IGNORE IT.

00:06:08,000 --> 00:06:09,120
DON'T READ THIS.

00:06:09,120 --> 00:06:14,210
JUST GO ABOUT THINGS WITHOUT KNOWING THIS, AND YOU'RE FINE BECAUSE YOU CAN DO IT OR

00:06:14,210 --> 00:06:16,100
DON'T, AND IT'S FINE ANYWAY.

00:06:16,100 --> 00:06:17,100
AND IT'S CODE-ON-DEMAND.

00:06:17,100 --> 00:06:24,120
WHAT THIS MEANS IS THAT YOU CAN HAVE THE SERVER CAN PROVIDE THE CLIENT CODE TO

00:06:24,120 --> 00:06:25,880
EXECUTE.

00:06:25,880 --> 00:06:29,800
SO WE SEE THIS EVERY TIME IF WEB APPLICATIONS, RIGHT?

00:06:29,800 --> 00:06:36,080
YOU GO TO TWITTER.COM, FACEBOOK.COM, OR ANYTHING.COM AND YOU DON'T ONLY GET HTTP OR

00:06:36,080 --> 00:06:43,589
JAVASCRIPT, YOU GET A BUNCH OF SCRIPTS AND THEN THAT RUNS IN THE BROWSER.

00:06:43,589 --> 00:06:50,740
FOR APIS, I DON'T THINK THIS IS THAT USEFUL, SO I'VE NEVER SEEN IT DONE SUCCESSFULLY.

00:06:50,740 --> 00:06:59,570
AND APIS, THE RESTFUL APIS ARE ALL ABOUT SCALABILITY.

00:06:59,570 --> 00:07:02,820
IF YOU WANT TO SUPPORT AS MANY CLIENTS AS YOU

00:07:02,820 --> 00:07:05,440
CAN YOU CAN'T A LEE RELY ON THE BROWSER TO BE

00:07:05,440 --> 00:07:08,350
THE ONLY TYPE OF CLIENT.

00:07:08,350 --> 00:07:09,500
WHAT WOULD YOU SEND?

00:07:09,500 --> 00:07:17,020
IF YOU SEND JAVASCRIPT, WHAT IF IT'S AN IPHONE RUNNING OBJECTIVE C OR THRIFT.

00:07:17,020 --> 00:07:18,230
IT KIND OF CREATES A PROBLEM.

00:07:18,230 --> 00:07:21,919
SO I CAN DO THIS.

00:07:21,919 --> 00:07:25,490
AND IF YOU KNOW OF ANYTHING, ANY PRODUCT THAT DOES THIS SUCCESSFULLY, I WOULD LIKE TO KNOW

00:07:25,490 --> 00:07:28,500
BECAUSE I HAVEN'T SEEN ANY.

00:07:28,500 --> 00:07:36,669
SO THE NEXT I'M GOING TO USE PICTURES, SO THIS WILL BE EASIER.

00:07:36,669 --> 00:07:40,200
SO THE SECOND ONE, WHICH IS IN THE EASY CATEGORY IS CLIENT-SERVER.

00:07:40,200 --> 00:07:42,599
AND THIS SHOULD BE -- EVERYBODY GETS THIS.

00:07:42,599 --> 00:07:43,990
THIS IS SUPER EASY.

00:07:43,990 --> 00:07:47,339
THE IDEA HERE IS THAT YOU SHOULD HAVE THE API

00:07:47,339 --> 00:07:50,919
SEPARATED FROM THE CLIENT, AND THAT DOESN'T MEAN THAT THEY NEED TO BE PHYSICALLY IN

00:07:50,919 --> 00:07:53,190
DIFFERENT MACHINES, DIFFERENT POSTS.

00:07:53,190 --> 00:07:55,130
THEY NEED TO BE A DIFFERENT PROCESS.

00:07:55,130 --> 00:07:56,890
THE API SHOULD BE A DIFFERENT PROCESS AT LEAST.

00:07:56,890 --> 00:07:59,919
IT CAN BE POSTED ON THE SAME MACHINE AS THE CLIENT.

00:07:59,919 --> 00:08:05,650
AND THE IMPORTANT THING IS THAT THE CLIENT AND THE SERVER TALK OVER A NETWORK PROTOCOL.

00:08:05,650 --> 00:08:06,650
BUT WHY?

00:08:06,650 --> 00:08:09,789
REMEMBER, I SAID I WAS GOING TO HAVE TO REPEAT SCALABILITY A LOT.

00:08:09,789 --> 00:08:14,150
SO IF YOU DO IT THIS WAY, THEN IT'S SUPER EASY TO GO TO THIS.

00:08:14,150 --> 00:08:18,039
NOW, YOU HAVE ONE API SERVING THE CLIENTS.

00:08:18,039 --> 00:08:21,020
SO THIS IS ONE ASPECT OF SCALABILITY THAT IS

00:08:21,020 --> 00:08:25,890
BASICALLY, IF YOU FOLLOW THIS PRINCIPLE, YOU GET IT FOR FREE.

00:08:25,890 --> 00:08:27,990
OKAY?

00:08:27,990 --> 00:08:33,330
SO NEXT WE'RE GOING INTO THE MEDIUM COMPLEXITY ONES.

00:08:33,330 --> 00:08:36,800
THE NEXT ONE IS CALLED LAYERED SYSTEM.

00:08:36,800 --> 00:08:42,801
WHAT THIS SAYS IS THAT THE CLIENT AND THE SERVER MAY NOT TALK DIRECTLY, THAT THERE

00:08:42,801 --> 00:08:48,330
MIGHT BE SOME MYSTERIOUS BLOCKS THAT NOBODY KNOWS WHAT IT DOES IN THE MIDDLE.

00:08:48,330 --> 00:08:50,260
THE CLIENT DOESN'T KNOW IT'S NOT TALKING TO A

00:08:50,260 --> 00:08:51,260
SERVER.

00:08:51,260 --> 00:08:54,230
THE CLIENT TALKS TO AN INTELLECTUAL PROPERTY ADDRESS AND A PORT.

00:08:54,230 --> 00:08:59,389
IT DOESN'T KNOW IF IT'S A REAL SERVER OR INTERMEDIATE SERVER, AND THE SAME THING ON

00:08:59,389 --> 00:09:00,389
THE OTHER SIDE.

00:09:00,389 --> 00:09:04,529
THE SERVER GETS REQUESTS AND IT DOESN'T KNOW IF IT'S GETTING THEM FROM REAL CLIENTS OR

00:09:04,529 --> 00:09:08,850
FROM SOME BOX THAT IS IN THE MIDDLE.

00:09:08,850 --> 00:09:13,690
SO THE ONLY ASPECT OF THIS IF YOU'RE DEVELOPING AN API IT'S IMPORTANT TO KEEP IN

00:09:13,690 --> 00:09:20,230
MIND THAT IS ON THE SERVER THIS PREVENTS YOU FROM IDENTIFYING YOUR CLIENTS, YOU SEE

00:09:20,230 --> 00:09:21,519
HEADERS IN THEIR REQUESTS.

00:09:21,519 --> 00:09:22,519
RIGHT?

00:09:22,519 --> 00:09:27,339
THIS GUY, THIS SERVER HERE IS GOING TO GET ALL REQUESTS FROM THE SAME CLIENT.

00:09:27,339 --> 00:09:32,430
THERE'S NO WAY IT CAN TELL WHO IS THE CLIENT.

00:09:32,430 --> 00:09:33,430
RIGHT?

00:09:33,430 --> 00:09:34,430
THERE ARE OTHER WAYS.

00:09:34,430 --> 00:09:36,810
I'M GOING TO SHOW YOU OTHER WAYS TO IDENTIFY CLIENTS.

00:09:36,810 --> 00:09:39,170
SO THAT'S THE ONLY LIMITATION.

00:09:39,170 --> 00:09:44,660
AND ONCE AGAIN, IF YOU DO THIS, YOU GET THIS FOR FREE.

00:09:44,660 --> 00:09:49,470
SO NOW THAT BOX IN THE MIDDLE THAT I DIDN'T TELL YOU WHAT IT IS, ONE OF THE POSSIBLE

00:09:49,470 --> 00:09:52,680
FUNCTIONS IS THAT THIS GUY IS A LOAD BALANCER.

00:09:52,680 --> 00:09:57,430
SO YOUR API STARTS TO BECOME SUCCESSFUL, AND YOU GET LOAD.

00:09:57,430 --> 00:09:58,850
THE SERVER BECOMES SLOW.

00:09:58,850 --> 00:10:02,410
JUST THROW MORE SERVERS TO THE CLIENT.

00:10:02,410 --> 00:10:03,670
THERE'S ABSOLUTELY NO DIFFERENT.

00:10:03,670 --> 00:10:08,990
THEY KEEP SENDING THEIR REQUEST TO THE SAME API REPORT AND THE ONLY DIFFERENCE IS THE

00:10:08,990 --> 00:10:10,730
RESPONSES COME BACK QUICKER.

00:10:10,730 --> 00:10:14,370
THE SERVER RESPONSE IS FASTER, RIGHT?

00:10:14,370 --> 00:10:19,190
AND YOU CAN KEEP SCALING THIS WAY FOR CENTRAL SCALING.

00:10:19,190 --> 00:10:21,899
NEXT IS CACHE.

00:10:21,899 --> 00:10:29,500
WHAT THIS ONE IS SAYING IS THAT THE API SERVER SHOULD PROVIDE CACHING DIRECTIVES SO

00:10:29,500 --> 00:10:32,050
THAT CACHISTS ARE IN THE MIDDLE.

00:10:32,050 --> 00:10:35,209
SO FOR EXAMPLE, THAT BOX IN THE MIDDLE COULD ALSO BE A CACHE.

00:10:35,209 --> 00:10:37,910
COULD CACHE THE RESPONSES.

00:10:37,910 --> 00:10:43,790
SO THAT IF THE SAME REQUEST COMES OVER AND OVER, IT CAN PROVIDE A RESPONSE WITHOUT DOING

00:10:43,790 --> 00:10:48,810
A TRIP TO THE ACTUAL SERVER.

00:10:48,810 --> 00:10:54,680
15:27:31BUT GOING BACK TO TIE INTO THE LAYERED SYSTEM

00:10:54,680 --> 00:11:01,959
THAT WE'VE SEEN BEFORE, YOU CAN ALSO HAVE CACHES IN THE CLIENTS, AND IN FACT, IF YOU

00:11:01,959 --> 00:11:04,839
HAVE WEB BROWSERS AS CLIENTS, YOU DO HAVE A

00:11:04,839 --> 00:11:05,839
CACHE.

00:11:05,839 --> 00:11:07,649
ALL OUR BROWSERS HAVE A CACHE.

00:11:07,649 --> 00:11:12,649
SO YOU MAY NOT EVEN NEED TO GO OUT OF YOUR CLIENT MACHINE TO ANSWER A REQUEST THAT'S

00:11:12,649 --> 00:11:14,930
FREQUENTLY USED.

00:11:14,930 --> 00:11:17,500
SO THIS IS CACHE.

00:11:17,500 --> 00:11:18,500
OKAY?

00:11:18,500 --> 00:11:21,459
UNFORTUNATELY, THE NEXT TWO, THE HARD ONES, I

00:11:21,459 --> 00:11:23,319
COULDN'T COME UP WITH PICTURES.

00:11:23,319 --> 00:11:26,079
I'M SORRY.

00:11:26,079 --> 00:11:27,509
THESE ARE HARDER TO REPRESENT.

00:11:27,509 --> 00:11:30,560
SO I DON'T HAVE PICTURES FOR THESE.

00:11:30,560 --> 00:11:36,290
THIS GIVES A LOT OF ANGST TO DEVELOPERS, TO WEB DEVELOPERS, PEOPLE THAT ARE USED TO

00:11:36,290 --> 00:11:39,319
CREATE WEB APPLICATIONS, TRADITIONAL WEB APPLICATIONS.

00:11:39,319 --> 00:11:45,110
THEY EXPECT THE API WILL LOG USERS IN AND THEN REMEMBER THEM.

00:11:45,110 --> 00:11:51,300
AND STATE LESS SAYS, THIS CONSTRAINT SAYS THAT YOU CAN'T DO THAT.

00:11:51,300 --> 00:11:57,279
AND THE PROBLEM IS THAT WHEN YOU HAVE SESSIONS, IT COMPLICATES SCALING.

00:11:57,279 --> 00:11:59,680
IMAGINE BEFORE WE WERE SEEING THAT WE CAN GO

00:11:59,680 --> 00:12:01,560
FROM ONE TO THREE SERVERS.

00:12:01,560 --> 00:12:06,040
IF YOU'RE STORING SESSIONS IN THE ONE SERVER THAT YOU HAVE, WHEN YOU GO TO THREE, WHAT

00:12:06,040 --> 00:12:07,300
DO YOU DO?

00:12:07,300 --> 00:12:08,759
WHERE DO YOU PUT THE SESSIONS?

00:12:08,759 --> 00:12:09,759
RIGHT?

00:12:09,759 --> 00:12:15,019
HOW DO YOU KNOW THAT THE CLIENT WILL GO ALWAYS TO THE SERVER THAT HOLDS THAT SESSION?

00:12:15,019 --> 00:12:16,190
SO IT COMPLICATES THINGS.

00:12:16,190 --> 00:12:19,980
IT CAN BE SOLVED BUT IT MAKES THINGS MORE COMPLICATED.

00:12:19,980 --> 00:12:23,790
SO REST IS SAYING DON'T DO IT.

00:12:23,790 --> 00:12:27,740
SOME PEOPLE MAY CLAIM THAT COOKIES ARE KIND OF A LOOPHOLE.

00:12:27,740 --> 00:12:31,620
THAT YOU CAN USE COOKIES BECAUSE THE DIFFERENCE IS THAT YOU CAN STORE STATE

00:12:31,620 --> 00:12:36,329
COOKIE, AND THAT GOES TO THE CLIENT, SO THE CLIENT STORES IT, NOT THE SERVER, AND THEN

00:12:36,329 --> 00:12:39,170
EVERY TIME THE CLIENT SENDS A NEW REQUEST IT

00:12:39,170 --> 00:12:42,079
SENDS THE COOKIE BACK TO THE SERVER.

00:12:42,079 --> 00:12:44,220
SO I THINK COOKIES ARE IN A GRAY AREA.

00:12:44,220 --> 00:12:47,029
THEY ARE MAYBE RESTFUL BUT PROBABLY NOT.

00:12:47,029 --> 00:12:51,360
MY OPINION IS THAT IT'S NOT A GOOD IDEA TO USE THEM, AND I'M GOING TO GIVE YOU AN

00:12:51,360 --> 00:12:52,360
EXAMPLE.

00:12:52,360 --> 00:12:56,300
LET'S SAY THE CLIENT CONNECTS TO THE SERVER AND GETS A COOKIE AND THEN IT GOES AWAY FOR

00:12:56,300 --> 00:12:57,300
ONE MONTH.

00:12:57,300 --> 00:12:59,370
DURING THAT MONTH, YOU MAKE UP [INAUDIBLE] TO

00:12:59,370 --> 00:13:03,529
YOUR SERVER, AND YOU CHANGE THE FORMAT OF YOUR SESSIONS.

00:13:03,529 --> 00:13:10,250
SO A MONTH PASSES, AND NOW YOU GET A REQUEST FROM THIS CLIENT THAT HAS AN OLD SESSION IN

00:13:10,250 --> 00:13:13,060
AN OLD FORMAT THAT YOU DON'T UNDERSTAND ANYMORE.

00:13:13,060 --> 00:13:14,180
SO YOU GET A PROBLEM.

00:13:14,180 --> 00:13:19,110
SO AGAIN, IT'S A PROBLEM THAT CAN BE SOLVED BUT IT'S A COMPLICATION SO IT'S BETTER NOT

00:13:19,110 --> 00:13:21,120
TO DO IT.

00:13:21,120 --> 00:13:26,860
SO THE WAY TO DO THIS IS TO HAVE CLIENTS SEND AUTHENTICATION WITH EVERY REQUEST.

00:13:26,860 --> 00:13:31,640
SO THE SERVER GETS A REQUEST, AUTHENTICATES THE USER, CARRIES OUT THE REQUEST, AND THEN

00:13:31,640 --> 00:13:34,110
FORGETS COMPLETELY ABOUT THAT CLIENT.

00:13:34,110 --> 00:13:38,670
AND THEN WHEN THE CLIENT NEEDS TO SEND ANOTHER REQUEST, IT REPEATS THE WHOLE THING.

00:13:38,670 --> 00:13:44,389
OF COURSE, YOU'RE SENDING AUTHENTICATION SENSITIVE INFORMATION OVER THE NETWORK EVERY

00:13:44,389 --> 00:13:52,610
TIME, SO IT'S VERY, VERY IMPORTANT THAT YOU USE A SECURE HTTP FOR EVERY END POINT IN YOUR

00:13:52,610 --> 00:13:54,040
API.

00:13:54,040 --> 00:13:55,470
OKAY.

00:13:55,470 --> 00:14:00,519
SO I TOLD -- THESE ARE SIX, AND I CHEATED.

00:14:00,519 --> 00:14:09,040
THE SIX-TO-ONE INTERFACE, IT'S REALLY LOADED, SO IT'S DIVIDED INTO FOUR SECTIONS.

00:14:09,040 --> 00:14:12,290
I HAVE FOUR SLIDES FOR JUST THIS.

00:14:12,290 --> 00:14:14,970
IT'S SUPER COMPLEX.

00:14:14,970 --> 00:14:23,160
AND THIS IS THE ONE THAT BASICALLY GIVES THE BASIC IDENTIFICATION TO REST THAT WE ALL KNOW

00:14:23,160 --> 00:14:28,319
ABOUT REST, WHICH IS TO SEND A REQUEST TO RESOURCES, AND ALL THAT STUFF IS HERE.

00:14:28,319 --> 00:14:35,029
SO THE FIRST PART, 5.25 OUT OF SIX IS THAT RESOURCES, YOU NEED TO IDENTIFY THEM.

00:14:35,029 --> 00:14:38,699
SO RESOURCE WILL BE ANY ENTITY IN YOUR API.

00:14:38,699 --> 00:14:40,870
SO IT COULD BE CUSTOMER PRODUCTS AND VOICES.

00:14:40,870 --> 00:14:48,879
IF YOU'RE DOING AN API FOR THE DEVICE I TEND TO DO A PROJECT CAMERAS, I LIKE CAMERAS.

00:14:48,879 --> 00:14:53,189
SO WHEN I CREATE AN API FOR A CAMERA, THAT'S A RESOURCE TOO EVEN THOUGH IT'S A PHYSICAL

00:14:53,189 --> 00:14:55,689
ENTITY.

00:14:55,689 --> 00:14:58,110
I HAVE EVERY SOURCE FOR IT.

00:14:58,110 --> 00:15:00,920
SO FOR EACH RESOURCE, YOU HAVE TO PROVIDE AN

00:15:00,920 --> 00:15:05,249
IDENTIFIER, AND THAT'S A URL.

00:15:05,249 --> 00:15:07,410
IT DOESN'T MATTER HOW THAT URL LOOKS.

00:15:07,410 --> 00:15:12,750
YOU MAY THINK THAT YOU HAVE TO USE THE STANDARD SLASH, RESOURCE NAME, SLASH ID.

00:15:12,750 --> 00:15:13,959
YOU DON'T HAVE TO.

00:15:13,959 --> 00:15:22,230
IF YOU WANT TO DO THEM CRYPTIC, THAT'S FINE.

00:15:22,230 --> 00:15:27,910
THEY CAN BE UGLY AND CRYPTIC, AND THAT'S FINE.

00:15:27,910 --> 00:15:32,600
IF YOU'RE DEVELOPING A SERVER YOU WANT TO HAVE THEM IN A WAY THAT YOU UNDERSTAND SO

00:15:32,600 --> 00:15:36,970
YOU CAN USE YOUR OWN ORGANIZATION TO CREATE THESE

00:15:36,970 --> 00:15:38,810
URLS, BUT THEY CAN BE HOWEVER YOU WANT.

00:15:38,810 --> 00:15:44,670
THEY DON'T HAVE TO BE SOMETHING THAT THE CLIENT UNDERSTANDS.

00:15:44,670 --> 00:15:51,610
SECOND PART OF THESE FOUR SUBPARTS IS THE REPRESENTATIONS.

00:15:51,610 --> 00:15:56,309
THIS IS SAYING THAT THE RESOURCES ARE NOT ACCESSIBLE TO THE CLIENT.

00:15:56,309 --> 00:16:01,540
ALL THE CLIENTS SEE ARE REPRESENTATIONS OF THEM.

00:16:01,540 --> 00:16:08,360
SO THIS MEANS THAT YOU DON'T HAVE TO MAP -- SAY YOU HAVE A RESOURCE THAT REPRESENTS A

00:16:08,360 --> 00:16:16,670
DATABASE TABLE.

00:16:16,670 --> 00:16:22,300
HOW TO REPRESENT AND TRANSFORM THE ENTITIES OF THESE SOURCES IN A WAY THAT YOU THINK IS

00:16:22,300 --> 00:16:25,999
MORE CONVENIENT FOR YOUR API.

00:16:25,999 --> 00:16:28,320
IT'S GOING BACK TO THE EXAMPLE OF HAVING THE CAMERA.

00:16:28,320 --> 00:16:32,170
OBVIOUSLY I CANNOT SHIP A CAMERA IN A RESOURCE BECAUSE IT'S A PHYSICAL OBJECT, SO

00:16:32,170 --> 00:16:35,540
I INVENT SOME REPRESENTATION THAT I THINK IS

00:16:35,540 --> 00:16:39,970
USEFUL, AND THAT'S MY REPRESENTATION.

00:16:39,970 --> 00:16:42,149
REPRESENTATIONS CAN COME IN DIFFERENT FORMATS.

00:16:42,149 --> 00:16:47,069
AND WHEN YOU'RE DOING THIS OVER HTTP, THERE IS ALL THIS MECHANISM WHERE THE CLIENT AND

00:16:47,069 --> 00:16:50,160
THE SERVER CAN AGREE ON THE BEST FORMAT.

00:16:50,160 --> 00:16:52,259
THEY NEGOTIATE THE FORMAT.

00:16:52,259 --> 00:16:56,759
SO TYPICALLY, YOU SEE JSON, THAT'S THE ONLY ONE, THAT'S ACTUALLY WHAT I'M GOING TO SHOW

00:16:56,759 --> 00:16:58,879
YOU IN THIS EXAMPLE.

00:16:58,879 --> 00:17:05,380
BUT, YOU KNOW, IF YOU WANT TO SUPPORT THE PERFORMANCE, YOU CAN, AND HTTP ALLOWS IT.

00:17:05,380 --> 00:17:07,990
IT'S VERY EASY TO DO.

00:17:07,990 --> 00:17:10,060
THE CLIENT NEEDS TO MAKE A REPRESENTATION TO

00:17:10,060 --> 00:17:11,060
THE RESOURCE.

00:17:11,060 --> 00:17:13,740
IT NEVER GETS ACCESS TO THE RESOURCE DIRECTLY.

00:17:13,740 --> 00:17:20,410
IT SHIPS IT TO THE SERVER AND THE SERVER LOOKS AT THE SOURCE REPRESENTATION AND MAPS

00:17:20,410 --> 00:17:21,730
THAT INTO THE RESOURCE.

00:17:21,730 --> 00:17:27,819
THE PRESENTATION IS SEPARATE FROM THE ACTUAL RESOURCE.

00:17:27,819 --> 00:17:30,740
SELF DESCRIPTIVE MESSAGES, THE THIRD ONE.

00:17:30,740 --> 00:17:36,549
THIS IS SAYING THAT THE MESSAGES OF THESE REQUESTS AND RESPONSES THAT THE CLIENT AND

00:17:36,549 --> 00:17:39,150
SERVER EXCHANGE ARE SELF CONTAINED.

00:17:39,150 --> 00:17:40,650
THERE'S NO SIDE INFORMATION.

00:17:40,650 --> 00:17:46,640
IT ONE IT'S KIND OF DIFFICULT TO INTERPRET.

00:17:46,640 --> 00:17:50,740
IT'S SUBJECT TO INTERPRETATION IF YOU COMPLY WITH THIS OR NOT.

00:17:50,740 --> 00:17:54,909
YOU CAN GET CRAZY AND YOU CAN SAY THAT NOTHING COMPLIES OR YOU CAN BE RELAXED AND

00:17:54,909 --> 00:17:56,990
SAY THAT MOST THINGS COMPLY.

00:17:56,990 --> 00:17:59,929
BUT BASICALLY, WHAT MOST PEOPLE DO, AND I DO,

00:17:59,929 --> 00:18:06,799
TOO, IS BASICALLY DEFINE ALL THE THINGS THAT YOU WANT DONE ABOUT THIS REQUEST IN THE

00:18:06,799 --> 00:18:08,190
REQUEST AND THE RESPONSE.

00:18:08,190 --> 00:18:13,799
SO YOU SEND THE OPERATION IN THE REQUEST METHOD, WHICH COULD BE GET POST, PUT, AND

00:18:13,799 --> 00:18:16,200
DELETE, OR OTHERS.

00:18:16,200 --> 00:18:22,549
THERE ARE OTHERS THAT SOME PEOPLE USE BUT THESE ARE THE FOUR THAT ARE THE MOST USED.

00:18:22,549 --> 00:18:24,220
YOU ALWAYS OPERATE ON THAT RESOURCE.

00:18:24,220 --> 00:18:25,530
SO THAT'S YOUR URL.

00:18:25,530 --> 00:18:28,470
THE URL, YOU SEND THE REQUEST TO.

00:18:28,470 --> 00:18:32,640
YOU NEED TO AUTHENTICATE ALWAYS AS I SAID BEFORE, SO YOU USE THE HEADERS FOR, FOR

00:18:32,640 --> 00:18:36,370
EXAMPLE, BASIC AUTHENTICATION IN HTTP.

00:18:36,370 --> 00:18:41,460
CONTENT TYPE AND ACCEPT HEADERS ARE FOR CONTENT NEGOTIATION IF YOU DO THAT.

00:18:41,460 --> 00:18:43,940
IF YOU NEED TO USE REPRESENTATIONS, THOSE GO

00:18:43,940 --> 00:18:44,940
IN THE BODY.

00:18:44,940 --> 00:18:47,090
EITHER THE REQUEST OR THE RESPONSE.

00:18:47,090 --> 00:18:52,450
AND WHEN THERE IS A RESULT COMING BACK FROM THE SERVER, YES, FROM THE SERVER, YOU GET

00:18:52,450 --> 00:18:57,840
IT IF THE STATUS QUO OF THE HTTP RESPONSE.

00:18:57,840 --> 00:19:05,380
THE LAST ONE, THIS ONE NOBODY DOES THIS.

00:19:05,380 --> 00:19:10,630
YOU CAN LOOK AT THIS, GO FIND ANY APIS NOBODY -- I REALLY LOVE IT.

00:19:10,630 --> 00:19:13,710
I WOULD LOVE TO BE WRONG ABOUT THIS.

00:19:13,710 --> 00:19:16,560
BUT I DON'T THINK I AM.

00:19:16,560 --> 00:19:17,850
SO LET ME KNOW.

00:19:17,850 --> 00:19:18,850
NOBODY DOES THIS.

00:19:18,850 --> 00:19:24,330
THE IDEA HERE IS SO IT'S SAYING HERE THAT THE

00:19:24,330 --> 00:19:32,710
API SHOULD WORK WITH HYPER MEDIA, SO YOU SHOULD HAVE LINKS, AND THE CLIENT, THIS

00:19:32,710 --> 00:19:38,260
COVERS RESOURCES THROUGH LINKS THAT IT GETS FROM PREVIOUS RESOURCES IT KNOWS ABOUT.

00:19:38,260 --> 00:19:40,669
SO BASICALLY, AT THE BEGINNING THE CLIENT KNOWS NOTHING.

00:19:40,669 --> 00:19:48,780
ONLY KNOWS THE URL OF THE API, THE MAIN URL. AND FROM THERE, IT STARTS DISCOVERS ALL THE

00:19:48,780 --> 00:19:49,960
THINGS THAT ARE THERE.

00:19:49,960 --> 00:19:52,160
THIS IS ANOTHER ONE THAT IS SUBJECT TO INTERPRETATION.

00:19:52,160 --> 00:19:57,130
YOU CAN GET CRAZY, AND THEN IT'S REALLY IMPOSSIBLE TO IMPLEMENT THIS, OR YOU CAN BE

00:19:57,130 --> 00:20:03,549
PRAGMATIC AND IMPLEMENT A REASONABLE -- HAVE ORIGINAL IMPLEMENTATION OF IT THAT

00:20:03,549 --> 00:20:07,529
ESSENTIALLY IS USEFUL AND THAT'S WHAT I'M GOING TO SHOW YOU TODAY.

00:20:07,529 --> 00:20:09,230
OKAY.

00:20:09,230 --> 00:20:12,570
SO I THINK I'M GOING TO STOP HERE.

00:20:12,570 --> 00:20:17,690
I'M GOING TO SHOW YOU THE EXAMPLE.

00:20:17,690 --> 00:20:25,770
SO THIS IS OPEN SOURCE, SO YOU CAN WRITE DOWN THE REPOSITORY FOR THIS.

00:20:25,770 --> 00:20:26,770
IT'S PYTHON.

00:20:26,770 --> 00:20:27,770
I'M SURE YOU CAN GET GUESS THIS.

00:20:27,770 --> 00:20:29,090
IT'S WRITTEN IN FLASK.

00:20:29,090 --> 00:20:32,350
I'M NOT USING ANY EXTENSIONS FOR REST.

00:20:32,350 --> 00:20:35,540
I DID THE REST BY HAND USING NATIVE FLASK.

00:20:35,540 --> 00:20:43,380
IN FACT, EVEN IF I WANTED TO USE A FRAMEWORK, I DON'T THINK ANY FRAMEWORK IN PYTHON OR ANY

00:20:43,380 --> 00:20:49,700
OTHER LANGUAGE WILL ALLOW ME TO GET TO THIS LEVEL OF RESTFULNESS.

00:20:49,700 --> 00:20:52,110
I THINK I WOULD NEED TO JUMP THROUGH HOOPS TO

00:20:52,110 --> 00:20:55,340
GET, ESPECIALLY THE HYPER MEDIA PART DONE.

00:20:55,340 --> 00:21:01,620
SO I FOUND IT WAS EASIER TO DO IT IN FLASK NATIVE.

00:21:01,620 --> 00:21:04,799
LET'S SEE HOW THAT WORKS.

00:21:04,799 --> 00:21:06,320
I'M RUNNING IT HERE.

00:21:06,320 --> 00:21:07,950
I HAVE THREE WINDOWS.

00:21:07,950 --> 00:21:09,299
NUMBER ONE IS RUNNING THE SERVER.

00:21:09,299 --> 00:21:13,679
AND I HAVE REDIS RUNNING ON NUMBER TWO.

00:21:13,679 --> 00:21:19,690
BEFORE I START I'M GOING TO TELL YOU A LITTLE TRIVIA.

00:21:19,690 --> 00:21:23,320
ONE OF THE THINGS I'M GOING TO SHOW HERE IT'S KIND OF NOT RESTFUL.

00:21:23,320 --> 00:21:24,570
LET'S SEE IF YOU CAN SPOT IT.

00:21:24,570 --> 00:21:30,309
I'LL TELL YOU AFTER I'M DONE WITH THE DEMO.

00:21:30,309 --> 00:21:32,590
I'M GOING TO USE A MIDLINE CLIENT.

00:21:32,590 --> 00:21:38,600
SO THIS IS HTTP REQUEST TO THE TOP URL.

00:21:38,600 --> 00:21:44,000
YOUR URL OF THIS API IS RUNNING ON THE FLASK DEVELOPMENT SERVER, SO IT'S LOCAL HOST FIVE

00:21:44,000 --> 00:21:45,000
THOUSAND.

00:21:45,000 --> 00:21:48,120
I'M NOT USING HTTPS HERE BECAUSE IT'S RUNNING ON MY MACHINE.

00:21:48,120 --> 00:21:52,590
IF I WOULD WANT TO DEPLOY THIS I WOULD HAVE TO USE HTTPS OF COURSE.

00:21:52,590 --> 00:21:58,850
SO I KNOW I CAN'T. I CANNOT GET ACCESS.

00:21:58,850 --> 00:22:01,610
NOW, TAKE A LOOK AT THIS.

00:22:01,610 --> 00:22:02,960
MEDIA.

00:22:02,960 --> 00:22:05,630
LOCATION HEADER TELLS ME WHERE SHOULD I GO TO

00:22:05,630 --> 00:22:07,820
GET MY TOKEN.

00:22:07,820 --> 00:22:10,399
I'M GOING TO USE TOKEN AUTHENTICATION HERE.

00:22:10,399 --> 00:22:15,070
SO LET'S GO THERE.

00:22:15,070 --> 00:22:19,700
THIS IS TELLING ME PHOTO FIVE METHOD NOT ALLOWED.

00:22:19,700 --> 00:22:21,789
SELF DESCRIPTIVE MESSAGES AGAIN.

00:22:21,789 --> 00:22:23,520
THIS IS SELF CONTAINED.

00:22:23,520 --> 00:22:25,230
I EXACTLY KNOW WHAT'S GOING ON HERE.

00:22:25,230 --> 00:22:30,120
THIS IS TELLING ME THAT A GET REQUEST TO THIS URL IS INVALID.

00:22:30,120 --> 00:22:38,340
SO LET'S TRY OPTIONS.

00:22:38,340 --> 00:22:42,720
THE OPTIONS REQUEST TELLS ME WHAT REQUESTS THIS URL SUPPORTS, AND HERE I CAN SEE --

00:22:42,720 --> 00:22:44,530
OKAY.

00:22:44,530 --> 00:22:45,950
SO IT'S A POST REQUEST.

00:22:45,950 --> 00:22:48,230
THIS GUY WANTS A POST REQUEST.

00:22:48,230 --> 00:22:55,750
SO I'M GOING TO DO A POST REQUEST.

00:22:55,750 --> 00:22:59,160
AND THIS IS TELLING ME I NEED TO AUTHENTICATE TO GET MY TOKEN.

00:22:59,160 --> 00:23:02,620
SO I'M GOING TO SEND AUTHENTICATION.

00:23:02,620 --> 00:23:05,100
AND I HAVE AN ACCOUNT ON THIS.

00:23:05,100 --> 00:23:07,720
SO I'M GOING TO SAY MY USER NAME.

00:23:07,720 --> 00:23:12,370
IT'S GOING TO ASK ME FOR MY PASSWORD, AND THAT'S MY TOKEN.

00:23:12,370 --> 00:23:13,370
OKAY?

00:23:13,370 --> 00:23:14,370
SO NOW I HAVE A TOKEN.

00:23:14,370 --> 00:23:17,690
I'M GOING TO HAVE TO USE THIS ON EVERY SINGLE REQUEST.

00:23:17,690 --> 00:23:21,170
SO I'M GOING TO SAY THAT ON THE VARIABLE.

00:23:21,170 --> 00:23:22,170
OKAY?

00:23:22,170 --> 00:23:33,130
AND NOW I CAN GO BACK TO THE VERY FIRST ONE AND I CAN AUTHENTICATE WITH MY TOKEN.

00:23:33,130 --> 00:23:36,630
HERE, I GET THE FIRST THING.

00:23:36,630 --> 00:23:40,510
THIS IS ALL I KNOW IS THAT THE ONLY URL I KNOW AS A CLIENT.

00:23:40,510 --> 00:23:46,000
AND THIS HAS GIVEN ME A CATALOG WHERE I SEE ALL THE RESOURCES THAT I CAN ACCESS AND ALL

00:23:46,000 --> 00:23:47,860
THE VERSIONS THAT THIS API SUPPORTS.

00:23:47,860 --> 00:23:51,600
RIGHT NOW THERE'S ONLY ONE, AND THERE ARE THREE RESOURCES.

00:23:51,600 --> 00:23:54,660
MOST PEOPLE SAY, WELL, OKAY, YOU'RE A HUMAN.

00:23:54,660 --> 00:23:57,039
YOU HAVE A BRAIN, YOU CAN READ THIS AND UNDERSTAND IT.

00:23:57,039 --> 00:24:01,910
HOW CAN SCRIPT AND APPLICATION CAN UNDERSTAND THIS IF IT DOESN'T KNOW ANY PREVIOUS

00:24:01,910 --> 00:24:03,080
KNOWLEDGE.

00:24:03,080 --> 00:24:04,080
AND THAT'S TRUE.

00:24:04,080 --> 00:24:06,169
I AGREE WITH THAT VIEW.

00:24:06,169 --> 00:24:09,510
THE RESOURCES IN AN API NEED TO BE DOCUMENTED.

00:24:09,510 --> 00:24:15,000
SO THE CLIENT KNOWS WHAT RESOURCES SHOULD EXPECT TO FIND.

00:24:15,000 --> 00:24:18,140
WHAT IT DOESN'T KNOW IS WHERE THEY ARE LOCATED.

00:24:18,140 --> 00:24:24,130
AND THIS IS GOOD BECAUSE WHEN YOU IN THE SERVER NEEDS TO -- IF YOU NEED TO REORGANIZE

00:24:24,130 --> 00:24:30,480
YOUR RESOURCES, YOU'RE FREE TO DO IT.

00:24:30,480 --> 00:24:37,750
SO THIS EXAMPLE IS BASED ON THE EXAMPLE I SHOWED LAST YEAR AT THE API TALK I DID.

00:24:37,750 --> 00:24:44,500
SO YOU CAN GO SEE THE BY VIDEO OF IT IF YOU WANT TO FIND OUT MORE.

00:24:44,500 --> 00:24:46,660
IT'S BASICALLY ALLOWS STUDENTS AND CLASSES TO

00:24:46,660 --> 00:24:50,409
REGISTER, SO STUDENTS REGISTER TO CLASSES.

00:24:50,409 --> 00:24:57,600
SO LET'S SEE WHAT CLASSES WE HAVE.

00:24:57,600 --> 00:25:02,039
SO I STAKE THAT URL AND SEND A GET REQUEST.

00:25:02,039 --> 00:25:08,409
SO HERE -- I'M NOT SEEING THE WHOLE THING.

00:25:08,409 --> 00:25:10,659
SORRY.

00:25:10,659 --> 00:25:13,000
SO WE HAVE HEADERS.

00:25:13,000 --> 00:25:19,830
THERE'S CAPTION HEADERS, CACHE CONTROL AND ETAG ARE FOR CACHING.

00:25:19,830 --> 00:25:24,549
SO I'M NOT GOING TO GO INTO DETAILS BUT THOSE ARE AN HTTP CACHE WOULD UNDERSTAND THOSE AND

00:25:24,549 --> 00:25:30,299
WE WOULD BE ABLE TO INTERPRET THOSE AND APPLY CACHING TO THIS REQUEST.

00:25:30,299 --> 00:25:31,299
WHAT ELSE WE HAVE?

00:25:31,299 --> 00:25:34,549
WE HAVE THREE RIGHT LIMITING HEADERS.

00:25:34,549 --> 00:25:36,850
THOSE ARE PRETTY STANDARD IN APIS THESE DAYS.

00:25:36,850 --> 00:25:42,279
THEY ARE TELLING ME HOW MANY REQUESTS I CAN DO IN A SHORT AMOUNT OF TIME.

00:25:42,279 --> 00:25:45,990
AND THEN WE HAVE CLASSES, WHICH IS THE LIST OF CLASSES.

00:25:45,990 --> 00:25:47,820
AND WE HAVE META.

00:25:47,820 --> 00:25:52,130
SO MET A IS PAGINATION INFORMATION.

00:25:52,130 --> 00:25:56,280
AND THE IDEA HERE IS THAT I DON'T KNOW HOW MANY CLASSES I HAVE IN THIS DATABASE.

00:25:56,280 --> 00:26:01,690
IT COULD BE A REALLY LONG LISTING, SO THE SERVER ENFORCES PAGINATION, AND THE

00:26:01,690 --> 00:26:06,240
INFORMATION THAT YOU GET INCLUDES PAGE NUMBER, NUMBER OF PAGES, FIRST, LAST, NEXT,

00:26:06,240 --> 00:26:11,880
AND PREVIOUS URLS, ALL THAT STUFF, SO HYPER MEDIA ONCE AGAIN.

00:26:11,880 --> 00:26:14,720
THE CLASSES LIST IS A LIST OF URLS.

00:26:14,720 --> 00:26:17,210
AND PEOPLE DON'T SEEM TO LIKE THIS.

00:26:17,210 --> 00:26:23,200
THE REASON I DO IT THIS WAY IS BECAUSE BY PUTTING THE URLS HERE, THE LINKS, I IMPROVE

00:26:23,200 --> 00:26:25,600
CACHING EFFICIENCY.

00:26:25,600 --> 00:26:28,230
THE RESPONSES TO ALL THESE REQUESTS MIGHT BE

00:26:28,230 --> 00:26:29,230
CACHED.

00:26:29,230 --> 00:26:33,710
SO IT MAY BE PRETTY CHEAP TO ISSUE THESE REQUESTS AND GET A RESPONSE.

00:26:33,710 --> 00:26:39,299
NOW, YOU MAY NOT LIKE THIS, AND I AGREE, SOMETIMES THIS IS NOT -- I MEAN, IT'S GOING

00:26:39,299 --> 00:26:44,950
TO BE A PAIN TO HAVE TO GO AND GET ALL THESE TEN REQUESTS SEPARATELY, AND YOU END UP

00:26:44,950 --> 00:26:46,720
ISSUING A LOT OF REQUESTS.

00:26:46,720 --> 00:26:51,220
SO I'M GOING TO SHOW YOU OTHER WAYS TO DEAL WITH THIS.

00:26:51,220 --> 00:26:54,130
BUT FIRST, THIS IS A COLLECTION.

00:26:54,130 --> 00:27:00,880
SO THERE ARE A NUMBER OF FUNCTIONS THAT ARE DOCUMENTED, SO THIS IS NOT -- THE

00:27:00,880 --> 00:27:02,320
CLIENT NEEDS TO KNOW THIS.

00:27:02,320 --> 00:27:06,120
SO ONE THING YOU CAN DO IS YOU CAN SAY FOR PAGE -- LET'S DO IT.

00:27:06,120 --> 00:27:09,210
AND THAT CHANGES THE PAGE SIZE.

00:27:09,210 --> 00:27:13,280
I CAN SAY -- I CAN LEAVE THAT AND ADD FILTER.

00:27:13,280 --> 00:27:23,180
I CAN SAY NAME, GREATER/EQUAL TO P, A NAMELESS THAN Q.

00:27:23,180 --> 00:27:30,330
THIS WILL GIVE YOU ME ALL THE CLASSES THAT START WITH P, AND I CAN ALSO SAY SORT BY NAME

00:27:30,330 --> 00:27:34,230
ASCENDING.

00:27:34,230 --> 00:27:35,669
SO I GOT TWO.

00:27:35,669 --> 00:27:40,220
IT TELLS ME DOWN THERE -- THIS IS IN THE DARK WHERE YOU, THE BOTTOM NOTE SAYS THERE ARE

00:27:40,220 --> 00:27:41,220
THREE.

00:27:41,220 --> 00:27:42,330
SO THERE'S ONE MORE.

00:27:42,330 --> 00:27:46,899
HOW DO I GET TO THE NEXT PAGE HERE AND I DON'T HAVE TO GO BACK TO THAT AND EDIT THE

00:27:46,899 --> 00:27:47,899
URL.

00:27:47,899 --> 00:27:52,909
I GET THE NEXT HYPER MEDIA AGAIN.

00:27:52,909 --> 00:27:56,070
I'M SORRY.

00:27:56,070 --> 00:27:58,860
AUTHENTICATION.

00:27:58,860 --> 00:28:02,649
AND JUST COPY AND PASTE THAT, AND -- WHAT DID

00:28:02,649 --> 00:28:05,380
I DO WRONG HERE?

00:28:05,380 --> 00:28:18,220
I'M SORRY, I CAN'T HEAR YOU.

00:28:18,220 --> 00:28:24,640
OH, I'M SORRY.

00:28:24,640 --> 00:28:26,779
METHOD.

00:28:26,779 --> 00:28:28,919
YES.

00:28:28,919 --> 00:28:31,070
GET.

00:28:31,070 --> 00:28:32,820
YOU'RE SHARP TODAY, I'M NOT.

00:28:32,820 --> 00:28:34,450
HERE YOU GO.

00:28:34,450 --> 00:28:35,450
OKAY.

00:28:35,450 --> 00:28:38,830
SO HERE'S MY THIRD ONE.

00:28:38,830 --> 00:28:40,320
I HAD THREE.

00:28:40,320 --> 00:28:46,270
NOW, LET'S USE THIS ONE, AND LET'S SAY YOU DON'T REALLY WANT THIS GETTING URLS.

00:28:46,270 --> 00:28:48,789
IT'S REALLY HAVING A SECOND STEP TO GET URLS.

00:28:48,789 --> 00:28:51,000
IT'S KIND OF A -- IT'S PAINFUL.

00:28:51,000 --> 00:28:58,571
SO I CAN DO EXPAND EQUALS ONE. AND THAT BASICALLY REPLACES THE URL WITH THE

00:28:58,571 --> 00:29:02,380
ACTUAL REPRESENTATION FOR THAT RESOURCE.

00:29:02,380 --> 00:29:04,520
OKAY?

00:29:04,520 --> 00:29:07,350
SO THIS IS PYTHON PROGRAMMING.

00:29:07,350 --> 00:29:08,929
SO HOW CONVENIENT.

00:29:08,929 --> 00:29:12,910
I'M GOING TO SAVE THIS.

00:29:12,910 --> 00:29:14,380
WE ARE GOING TO USE THIS.

00:29:14,380 --> 00:29:16,230
SO I'LL SAVE IT IN A VARIABLE.

00:29:16,230 --> 00:29:19,850
LET'S GO BACK TO THE BEGINNING.

00:29:19,850 --> 00:29:22,260
SO WE WERE PLAYING WITH CLASSES.

00:29:22,260 --> 00:29:31,539
SO NOW LET'S LOOK AT STUDENTS.

00:29:31,539 --> 00:29:33,039
SO LET'S GET A LIST OF STUDENTS.

00:29:33,039 --> 00:29:40,280
I COPY/PASTE THIS ADDRESS.

00:29:40,280 --> 00:29:42,899
SO THIS DATABASE I HAVE NO STUDENTS.

00:29:42,899 --> 00:29:44,789
SO I'M SURE YOU KNOW THIS.

00:29:44,789 --> 00:29:48,179
TYPICALLY, WHEN YOU WANT TO CREATE A RESOURCE, YOU SPEND A POST REQUEST TO THE

00:29:48,179 --> 00:29:50,910
COLLECTION URL, THIS URL HERE.

00:29:50,910 --> 00:29:58,270
SO I'M GOING TO GO AHEAD AND CHANGE THIS TO POST AND SEE WHAT HAPPENS.

00:29:58,270 --> 00:29:59,270
OOPS.

00:29:59,270 --> 00:30:00,580
BACK REQUEST.

00:30:00,580 --> 00:30:01,910
SELF DESCRIPTIVE MESSAGES.

00:30:01,910 --> 00:30:04,250
SO DO YOU KNOW WHAT HAPPENED HERE?

00:30:04,250 --> 00:30:05,250
THERE'S NO DATA.

00:30:05,250 --> 00:30:07,160
THAT'S THE PROBLEM.

00:30:07,160 --> 00:30:11,510
SO DOCUMENTATION SAYS THAT THE STUDENT RESOURCE HAS ONE FIELD.

00:30:11,510 --> 00:30:13,050
IT'S CALLED NAME.

00:30:13,050 --> 00:30:17,929
SO I'M GOING TO SAY NAME, SUSAN.

00:30:17,929 --> 00:30:19,440
AND THAT WORKED.

00:30:19,440 --> 00:30:23,670
AND HYPER MEDIA AGAIN.

00:30:23,670 --> 00:30:25,990
THIS IS THE ADDRESS FOR THE NEW RESOURCE.

00:30:25,990 --> 00:30:33,610
SO IF I SEND A GET REQUEST TO THIS ONE, I GET

00:30:33,610 --> 00:30:35,920
SUSAN.

00:30:35,920 --> 00:30:38,899
IT'S LOWER CASE, SO THAT SHOULD BE UPPER CASE.

00:30:38,899 --> 00:30:42,000
SO I'M GOING TO GO AHEAD AND MODIFY THIS, AND

00:30:42,000 --> 00:30:44,470
YOU PROBABLY KNOW THIS, TOO.

00:30:44,470 --> 00:30:48,900
PUT REQUEST TO A RESOURCE URL MODIFIES IT.

00:30:48,900 --> 00:30:55,350
SO NAME, PROPERLY UPPER CASES.

00:30:55,350 --> 00:30:58,200
AND IT SAYS OKAY.

00:30:58,200 --> 00:31:01,519
SO I'M GOING TO REGISTER SUSAN TO A CLASS.

00:31:01,519 --> 00:31:08,850
YOU CAN SEE HERE IN THE REPRESENTATION FOR SUSAN THERE'S THIS REGISTRATION URL.

00:31:08,850 --> 00:31:10,409
ONCE AGAIN, HYPER MEDIA THIS.

00:31:10,409 --> 00:31:13,809
THIS IS A LINK TO THE LIST OF -- THE COLLECTION OF REGISTRATIONS, CLASS

00:31:13,809 --> 00:31:20,820
REGISTRATIONS FOR THIS ONE STUDENT, FOR SUSAN, WHICH, IF I SEND A REQUEST, THIS IS

00:31:20,820 --> 00:31:21,820
EMPTY.

00:31:21,820 --> 00:31:30,409
SUSAN IS A NEW STUDENT, SO -- SO I'M GOING TO

00:31:30,409 --> 00:31:39,940
CREATE A REGISTRATION BY SENDING A POST REQUEST, AND I'M GOING TO SAY CLASS URL.

00:31:39,940 --> 00:31:44,389
REMEMBER, I SAVED THE URL FOR THE PYTHON CLASS?

00:31:44,389 --> 00:31:47,230
SO THERE IT GOES.

00:31:47,230 --> 00:31:53,960
AND NOW I HAVE ANOTHER LINK FOR THIS ASSOCIATION BETWEEN A STUDENT AND THE CLASS.

00:31:53,960 --> 00:31:56,320
SUSAN REGISTERED TO PYTHON CLASS.

00:31:56,320 --> 00:31:59,809
OOPS, I MISSED ONE.

00:31:59,809 --> 00:32:00,990
SO I CAN GET THIS.

00:32:00,990 --> 00:32:06,860
I KEEP DOING THAT.

00:32:06,860 --> 00:32:11,070
AND THIS ONE HAS THE CLASS AND SELF URL.

00:32:11,070 --> 00:32:12,529
I DIDN'T MENTION THIS.

00:32:12,529 --> 00:32:15,330
ALL THE RESOURCES THAT I HAVE HAVE A SELF URL.

00:32:15,330 --> 00:32:18,340
THEY BASICALLY REFER TO THEMSELVES.

00:32:18,340 --> 00:32:28,700
SO YOU HAVE THE CLASS, THE STUDENT, AND ALSO LET'S SAY SUSAN CHANGED HER MIND.

00:32:28,700 --> 00:32:31,970
SHE KNOWS ENOUGH PYTHON SO SHE DECIDED NOT TO

00:32:31,970 --> 00:32:33,149
TAKE THIS CLASS.

00:32:33,149 --> 00:32:40,409
SO THE WAY I DO THAT IS BY SENDING A DELETE REQUEST TO THE REGISTRATION.

00:32:40,409 --> 00:32:42,309
AND THAT TAKES CARE OF THAT.

00:32:42,309 --> 00:32:52,580
AND IF I NOW GO BACK TO GET THE REGISTRATIONS FOR SUSAN, NOW IT'S EMPTY AGAIN.

00:32:52,580 --> 00:32:56,441
SO DID YOU FIND WHAT'S NOT -- ON PURPOSE, I

00:32:56,441 --> 00:33:08,789
DIDN'T MENTION -- I BRIEFLY MENTIONED, YOU KNOW, -- NO, SIR.

00:33:08,789 --> 00:33:20,549
SO HE'S SAYING THAT WHEN I UPDATED THE STUDENT, I SHOULD HAVE USED A PATCH.

00:33:20,549 --> 00:33:22,950
NORMALLY, IT'S NOT A PARTIAL UPDATE.

00:33:22,950 --> 00:33:27,070
THIS IS A VERY -- THIS IS A VERY SIMPLE PROJECT, SO NAME IS ALL THERE IS.

00:33:27,070 --> 00:33:29,280
SO THAT WAS CORRECT.

00:33:29,280 --> 00:33:33,010
EVEN IF I LIKE PATCH, NO.

00:33:33,010 --> 00:33:36,120
VERY LIMITING.

00:33:36,120 --> 00:33:39,950
REMEMBER, NOW I TOLD YOU WHAT'S THE PROBLEM.

00:33:39,950 --> 00:33:44,080
SO THINK, WHICH OF THE PRINCIPLES OF THE CONSTRAINTS THIS IS BREAKING.

00:33:44,080 --> 00:33:46,279
IS IT BREAKING THE STATELESS CONSTRAINT?

00:33:46,279 --> 00:33:52,960
YOU CANNOT REMEMBER USERS COUNTING HOW MANY TIMES THEY USE THEIR CONTEXT SERVER, IT'S

00:33:52,960 --> 00:33:54,840
A VIOLATION.

00:33:54,840 --> 00:33:58,039
UNFORTUNATELY, LIMITING IS A MUST.

00:33:58,039 --> 00:33:59,330
YOU HAVE TO HAVE IT.

00:33:59,330 --> 00:34:02,539
SO THAT'S WHY I PUT IT IN HERE.

00:34:02,539 --> 00:34:09,530
THE WAY MOST PEOPLE DO LIMITING IS BY CHECKING THE REMOTE ADDRESS.

00:34:09,530 --> 00:34:14,370
AND THAT WOULD BE REALLY BAD BECAUSE AS I MENTIONED BEFORE, WHEN I SHOWED PICTURES,

00:34:14,370 --> 00:34:17,020
THE REMOTE ADDRESS MIGHT ALWAYS BE THE SAME ONE.

00:34:17,020 --> 00:34:18,960
YOU REALLY CANNOT TRUST THAT.

00:34:18,960 --> 00:34:22,910
THAT'S REALLY -- IT'S SOMETHING THAT YOU CANNOT TRUST.

00:34:22,910 --> 00:34:26,879
SO THE WAY I'M DOING HERE, AND YOU CAN LOOK AT IT IN THE PROJECT IS BY USING THE

00:34:26,879 --> 00:34:28,270
AUTHENTICATION INFORMATION.

00:34:28,270 --> 00:34:33,750
SO UNAUTHENTICATED USERS CANNOT BE VERY LIMITED WITH THIS SOLUTION THAT I IMPLEMENTED

00:34:33,750 --> 00:34:34,750
HERE.

00:34:34,750 --> 00:34:38,000
BUT SINCE ALL THE END POINTS ARE AUTHENTICATED IT'S NOT A BIG DEAL FOR THIS

00:34:38,000 --> 00:34:40,250
PARTICULAR PROJECT.

00:34:40,250 --> 00:34:44,940
SO ANYWAY, THAT'S THE DEMO PART.

00:34:44,940 --> 00:34:51,300
SO YOU PROBABLY THINK I'M CRAZY THAT MAYBE I

00:34:51,300 --> 00:34:58,581
SPENT MONTHS, A YEAR CREATING ALL THIS BY HAND ON FLASK WITHOUT ANY EXTENSIONS, NO

00:34:58,581 --> 00:35:03,500
RESTFUL SUPPORT, I JUST DID IT ALL BY HAND AND CREATED ALL THIS SORTING, FILTERING,

00:35:03,500 --> 00:35:06,010
EXPANSION, ALL THAT STUFF.

00:35:06,010 --> 00:35:09,560
SO MAYBE YOU'RE SAYING THAT, YOU KNOW, IT'S NOT WORTH IT.

00:35:09,560 --> 00:35:10,950
I DON'T KNOW.

00:35:10,950 --> 00:35:12,770
LET'S GIVE UP ON REST.

00:35:12,770 --> 00:35:16,780
LET'S GO BACK TO SOAP.

00:35:16,780 --> 00:35:19,190
I DON'T KNOW.

00:35:19,190 --> 00:35:22,390
SO I'M REALLY KIDDING.

00:35:22,390 --> 00:35:23,440
IT'S EASY.

00:35:23,440 --> 00:35:26,250
AND YOU'RE WELCOME TO LOOK AT THE PROJECT AND

00:35:26,250 --> 00:35:32,370
LOOK AT THE VIDEO OF THE -- I EXPLAINED BETTER -- A SIMILAR PROJECT, A LITTLE SIMPLER

00:35:32,370 --> 00:35:37,910
THAN THIS ONE, BUT THE VIDEO FROM LAST YEAR WILL BE, YOU KNOW, INFORMATIONAL.

00:35:37,910 --> 00:35:43,570
BUT JUST SO THAT I WHET YOUR APPETITE, I'M GOING TO SHOW YOU ONE OF THE ROUTES.

00:35:43,570 --> 00:35:48,270
REMEMBER WHEN I OBTAINED ALL THE CLASSES THAT START WITH P?

00:35:48,270 --> 00:35:52,060
SO HOW LONG IS THAT DO YOU THINK?

00:35:52,060 --> 00:35:58,160
THE TOP LEVEL, YOU KNOW, THE END POINT FOR THAT, I'M GOING TO GIVE YOU A CLUE, FITS

00:35:58,160 --> 00:35:59,200
HERE.

00:35:59,200 --> 00:36:05,540
OKAY AND ANOTHER CLUE, HELLO,.

00:36:05,540 --> 00:36:09,520
THAT'S IT.

00:36:09,520 --> 00:36:11,540
SO THIS IS A DATABASE QUERY.

00:36:11,540 --> 00:36:12,650
OKAY?

00:36:12,650 --> 00:36:17,650
THIS IS THE ONLY END POINT SPECIFIC CODE THAT I NEED FOR A COLLECTION.

00:36:17,650 --> 00:36:22,320
ALL I NEED TO DO IS WRITE A FUNCTION AND RETURN A DATABASE QUERY.

00:36:22,320 --> 00:36:24,710
THIS IS A DATABASE QUERY THAT HASN'T RUN YET.

00:36:24,710 --> 00:36:30,300
IT'S A QUERY THAT IS STILL YET TO RUN THAT CURRENTS THAT -- THAT RETURNS THAT

00:36:30,300 --> 00:36:31,300
COLLECTION.

00:36:31,300 --> 00:36:34,150
USING ALCHEMY CLASS QUERY.

00:36:34,150 --> 00:36:35,620
OKAY?

00:36:35,620 --> 00:36:39,470
SO WHAT DO I DO WITH THIS?

00:36:39,470 --> 00:36:42,740
I DECORATE THIS FUNCTION WITH A GENERIC DECORATOR.

00:36:42,740 --> 00:36:48,810
THIS WORKS FOR EVERY COLLECTION, AND IF YOU WORK WITH FLASK SQL IT WILL PROBABLY USE ON

00:36:48,810 --> 00:36:51,520
YOUR CHANGE PROJECT AS WELL.

00:36:51,520 --> 00:36:57,120
SO THIS DECORATOR TAKES THE QUERY THAT THE FUNCTION RETURNS AND LOOKS AT THE QUERY

00:36:57,120 --> 00:37:03,190
STRING OF THE URL AND THEN APPLIES A SORTING, FILTERING, PAGINATION, ALL OF THAT.

00:37:03,190 --> 00:37:06,200
THEN RUNS THE QUERY, GETS THE RESULTS.

00:37:06,200 --> 00:37:08,110
IT LOOKS AT THE QUERY STRING AGAIN TO SEE IF

00:37:08,110 --> 00:37:10,960
YOU WANT EXPANDED OR NOT EXPANDED RESULTS.

00:37:10,960 --> 00:37:15,190
AND BASED ON THAT, IT GENERATES A PYTHON DICTIONARY WITH THE DATA.

00:37:15,190 --> 00:37:18,560
SO THERE ARE REPRESENTATIONS AS A PYTHON DICTIONARY.

00:37:18,560 --> 00:37:22,390
SO NOW YOU HAVE A LIST.

00:37:22,390 --> 00:37:29,350
IT'S A LIST INSIDE A PYTHON DICTIONARY, THE WHOLE THING.

00:37:29,350 --> 00:37:30,460
THAT GOES TO ANOTHER DECORATOR.

00:37:30,460 --> 00:37:33,150
THIS GUY TAKES THE DICTIONARY AND RENDERS IT

00:37:33,150 --> 00:37:34,660
ADJACENT.

00:37:34,660 --> 00:37:38,950
I COULD IMPROVE THIS AND MAKE IT A PROPER CONTENT NEGOTIATION.

00:37:38,950 --> 00:37:48,920
IT COULD SUPPORT XML AND WHATEVER, HTML, WHO KNOWS.

00:37:48,920 --> 00:37:51,320
AND THEN THE DECORATOR ADDS THE CACHING.

00:37:51,320 --> 00:37:56,330
THE CACHING REQUIRES AN MT5 HASH TAG.

00:37:56,330 --> 00:38:01,280
SO IT LOOKS AT THE RESPONSE THAT THE JSON DECORATOR PUT AND CREATES THE MT5 FOR THE

00:38:01,280 --> 00:38:04,200
CASH TO WORK PROPERLY.

00:38:04,200 --> 00:38:08,990
AND THEN, FINALLY, I TAKE THIS WHOLE THING, THE FUNCTION AND ALL THE DECORATORS AND I

00:38:08,990 --> 00:38:15,230
REGISTER WITH FLASK UNDER THE URL FLASK CLASSES FOR MET A GET.

00:38:15,230 --> 00:38:20,390
AND IF YOU LOOK AT THE CODE, THE HIGH LEVEL CODE, IT'S PRETTY MUCH ALL LIKE THIS.

00:38:20,390 --> 00:38:28,300
IT'S ALL SUPER SIMPLE AND BASICALLY IT MADE WRITING THIS PROJECT REALLY, REALLY FUN FOR

00:38:28,300 --> 00:38:33,911
ME: THAT'S ALL I HAVE.

00:38:33,911 --> 00:38:34,911
THANK YOU.

00:38:34,911 --> 00:38:35,911
[ APPLAUSE ] >> ALL RIGHT.

00:38:35,911 --> 00:38:36,911
FOLKS.

00:38:36,911 --> 00:38:43,730
WE HAVE ABOUT FIVE MINUTES LEFT FOR QUESTIONS.

00:38:43,730 --> 00:38:47,390
THE MICROPHONE IS RIGHT BACK ALMOST IN THE CENTER OF THE ROOM, SO IF YOU HAVE ANY

00:38:47,390 --> 00:39:07,760
QUESTIONS, PLEASE FEEL FREE TO LINE UP.

00:39:07,760 --> 00:39:09,330
>> CAN I POSE A HYPOTHETICAL?

00:39:09,330 --> 00:39:12,220
I'VE GOT A BUNCH OF MICRO SERVICES.

00:39:12,220 --> 00:39:20,770
WOULD I WANT TO HAVE A BUNCH OF INDIVIDUAL FLASK CONTAINERS, ONE PER RESOURCE?

00:39:20,770 --> 00:39:21,770
>> ONE PER RESOURCE?

00:39:21,770 --> 00:39:23,090
WHY WOULD YOU DO THAT?

00:39:23,090 --> 00:39:24,290
WHAT'S THE BENEFIT?

00:39:24,290 --> 00:39:30,020
>> IN CASE I WANT TO REDEPLOY ONE OF THEM, CHANGING THAT CLASS OF RESOURCES.

00:39:30,020 --> 00:39:31,560
NOT ONE PER RESOURCE INSTANCE.

00:39:31,560 --> 00:39:33,790
I MEAN ONE PER CLASS OF RESOURCE, SO I'VE GOT

00:39:33,790 --> 00:39:39,300
A FLASK CONTAINER THAT HAS CLASSES AND A FLASK CONTAINER THAT HAD STUDENTS, AND A

00:39:39,300 --> 00:39:41,550
FLASK CONTAINER THAT HAS REGISTRATION.

00:39:41,550 --> 00:39:42,550
>> OKAY.

00:39:42,550 --> 00:39:44,880
SO YOU CAN HOST SEPARATE SERVERS AND THEN PUT

00:39:44,880 --> 00:39:52,350
THEM BEHIND A PROXY SERVER THAT FINDS WHICH ONE TO TALK TO.

00:39:52,350 --> 00:39:54,490
BE FAIRLY SIMPLE TO ARCHITECT.

00:39:54,490 --> 00:39:58,650
AND IT DOESN'T CHANGE ANYTHING FOR FLASK.

00:39:58,650 --> 00:40:00,940
>> SORRY.

00:40:00,940 --> 00:40:03,360
WERE THOSE DECORATORS STANDARD WITH FLASK?

00:40:03,360 --> 00:40:05,690
I DON'T HAVE MUCH FAMILIARITY WITH FLASK.

00:40:05,690 --> 00:40:06,690
>> NO.

00:40:06,690 --> 00:40:09,250
DECORATORS, THIS IS A FEATURE OF PYTHON.

00:40:09,250 --> 00:40:10,250
IT'S A -- >> NO.

00:40:10,250 --> 00:40:11,250
NO.

00:40:11,250 --> 00:40:13,270
I MEAN THE ONES YOU WERE USING.

00:40:13,270 --> 00:40:15,050
>> THE DECORATIONS I USED ARE MINE.

00:40:15,050 --> 00:40:16,820
SO I CODED THEM.

00:40:16,820 --> 00:40:18,570
ACTUALLY, I CAN TELL YOU A LITTLE BIT MORE.

00:40:18,570 --> 00:40:21,930
THE COLLECTION ONE -- YOU PROBABLY THINK I'M CHEATING BECAUSE I SAID THAT THIS IS SIMPLE,

00:40:21,930 --> 00:40:32,690
AND OF COURSE, YOU KNOW, ALL THE COMPLEXITY ISN'T ALL -- IT'S ABOUT A HUNDRED LINES OF

00:40:32,690 --> 00:40:37,540
WELL COMMENTED CODE FULL OF WHITESPACE, SO IT'S REALLY NOT THAT DIFFICULT.

00:40:37,540 --> 00:40:40,140
I WROTE IT IN ONE DAY.

00:40:40,140 --> 00:40:43,750
SO -- >> BUT THEY'RE AVAILABLE FOR US TO LOOK AT?

00:40:43,750 --> 00:40:44,750
>> YES.

00:40:44,750 --> 00:40:46,490
THEY HAVE ADDRESS, IT'S ALL THERE.

00:40:46,490 --> 00:40:50,830
SO FEEL FREE TO LOOK AT IT, AND IF YOU HAVE ANY QUESTIONS I'LL BE MORE THAN HAPPY TO

00:40:50,830 --> 00:40:51,860
ANSWER THEM.

00:40:51,860 --> 00:40:55,000
>> THANK YOU VERY MUCH.

00:40:55,000 --> 00:40:56,000
>> YEAH.

00:40:56,000 --> 00:40:59,070
>> YOU MENTIONED THAT YOU DON'T LIKE USING COOKIES AND THAT CLIENTS SHOULD

00:40:59,070 --> 00:41:00,960
REAUTHENTICATE WITH EVERY REQUEST.

00:41:00,960 --> 00:41:01,960
>> YES.

00:41:01,960 --> 00:41:07,000
>> I'M NOT ENTIRELY CLEAR THAT I UNDERSTAND THE DISTINCTION BETWEEN USING THE OFF TOKEN

00:41:07,000 --> 00:41:08,820
LIKE YOU DID IN YOUR EXAMPLE VERSUS HAVING AN

00:41:08,820 --> 00:41:14,190
OFF TOKEN IN A COOKIE THAT YOU SENT >> I AGREE THAT THERE'S A LOT OF

00:41:14,190 --> 00:41:16,090
SIMILARITIES.

00:41:16,090 --> 00:41:20,370
THE PROBLEM I HAVE WITH COOKIE S IS THAT THEY'RE NOT PART OF THE CORE HTTP PROTOCOL.

00:41:20,370 --> 00:41:23,870
SO NOT ALL HTTP CLIENTS IMPLEMENT COOKIES.

00:41:23,870 --> 00:41:29,460
SO, FOR EXAMPLE, LET'S SAY IF YOU WANT TO SUPPORT ADUENOS AS CLIENTS.

00:41:29,460 --> 00:41:32,560
THIS IS A VERY CONSTRAINED PLATFORM FOR A 2K

00:41:32,560 --> 00:41:33,560
OF RAM.

00:41:33,560 --> 00:41:39,050
IT'S LIKE WE'RE GOING BACK TO THE 80S WITH THE COMMODORES AND THAT SORT OF THING.

00:41:39,050 --> 00:41:40,050
IT'S A CONSTRAINED THING.

00:41:40,050 --> 00:41:44,000
SO HAVING TO SUPPORT COOKIES MIGHT BE A BURDEN FOR THAT.

00:41:44,000 --> 00:41:50,480
I MEAN, THE WHOLE THEME OF REST IS TO SCALE AND SUPPORT, YOU KNOW, AS MANY VARIANTS OF

00:41:50,480 --> 00:41:51,480
CLIENTS AS POSSIBLE.

00:41:51,480 --> 00:41:59,090
SO I AGREE WITH THAT TOKENS AND COOKIES, AND THAT'S WHY I SAID COOKIES ARE A GRAY AREA.

00:41:59,090 --> 00:42:04,240
BUT, YOU KNOW, IT'S REALLY NOT THAT -- IT'S NOT MORE COMPLICATED TO USE TOKENS.

00:42:04,240 --> 00:42:05,240
SO.

00:42:05,240 --> 00:42:06,670
>> THANK YOU.

00:42:06,670 --> 00:42:07,670
>> YEAH.

00:42:07,670 --> 00:42:13,490
>> AUDIENCE: I HAVE USED DJANGO RESTFUL BOOK TO BUILD A RESTFUL A COUPLE TIMES.

00:42:13,490 --> 00:42:21,910
AND I SAW YOUR PRESENTATION LAST YEAR AS WELL, AND I SEE THAT YOU USE FLASK AND SQL

00:42:21,910 --> 00:42:22,910
ALCHEMY.

00:42:22,910 --> 00:42:29,510
I JUST WAS WONDERING IF YOU HAVE AN OPINION ON WHICH ONE IS BETTER OR WHAT'S THE

00:42:29,510 --> 00:42:31,910
DIFFERENCE, OR, YOU KNOW,.

00:42:31,910 --> 00:42:37,210
>> I THINK YOU KNOW WHICH ONE I THINK IS BETTER.

00:42:37,210 --> 00:42:40,670
>> AUDIENCE: WHY?

00:42:40,670 --> 00:42:41,670
>> THAT'S A DIFFICULT QUESTION.

00:42:41,670 --> 00:42:43,320
I THINK WE'RE ALL DIFFERENT.

00:42:43,320 --> 00:42:49,510
AND I'VE BEEN DOING SOFTWARE FOR MANY YEARS.

00:42:49,510 --> 00:42:54,760
SO WHEN I GO TO A FRAMEWORK THAT TELLS ME HOW

00:42:54,760 --> 00:42:57,010
TO DO THINGS, I KIND OF FEEL CONSTRAINED.

00:42:57,010 --> 00:43:00,560
I LIKE TO FIND MY OWN WAYS TO SOLVE PROBLEMS.

00:43:00,560 --> 00:43:06,620
AND YOU KNOW, I FIND FLASK THE PERFECT, YOU KNOW, VEHICLE FOR ME TO FIND THE SOLUTIONS

00:43:06,620 --> 00:43:08,600
EXACTLY THE WAY I WANT THEM.

00:43:08,600 --> 00:43:12,330
IT'S A FRAMEWORK THAT WILL LET YOU DO THIS.

00:43:12,330 --> 00:43:13,330
RIGHT?

00:43:13,330 --> 00:43:17,210
YOU'RE GOING TO HAVE TO START JUMPING THROUGH HOOPS TO FIGURE OUT HOW TO DO THIS HYPER

00:43:17,210 --> 00:43:18,420
MEDIA THING.

00:43:18,420 --> 00:43:21,760
WITH FLASK, I MEAN, IT'S -- FLASK DOESN'T CARE.

00:43:21,760 --> 00:43:24,420
SO I JUST DO WHATEVER I WANT.

00:43:24,420 --> 00:43:25,609
SO THAT'S WHAT I LIKE.

00:43:25,609 --> 00:43:26,750
>> AUDIENCE: THANK YOU.

00:43:26,750 --> 00:43:27,750
>> YES.

00:43:27,750 --> 00:43:28,750
YOU'RE WELCOME.

00:43:28,750 --> 00:43:33,420
>> AUDIENCE: I NOTICE YOU CHOSE TO VERSION YOUR API VIA YOUR REQUEST URL, WHY DID YOU

00:43:33,420 --> 00:43:40,180
CHOOSING TO THIS WAY USING THE REQUEST HEADER FOR THE VERSION ITSELF

00:43:40,180 --> 00:43:46,020
>> YEAH, SO SOME PEOPLE LIKE TO PUT IT IN THE HEADERS.

00:43:46,020 --> 00:43:52,860
REALLY, WHEN YOU WRITE APIS THIS WAY, IT'S REALLY UNLIKELY THAT YOU'RE GOING TO HAVE

00:43:52,860 --> 00:43:54,160
TWO VERSIONS OF API.

00:43:54,160 --> 00:43:59,610
IF YOU NEED TO DO A NEW VERSION IT'S PROBABLY GOING TO BE A REALLY MAJOR DIFFERENT VERSION

00:43:59,610 --> 00:44:01,880
WHERE YOU'RE GOING TO CHANGE THINGS IN A DRASTIC WAY.

00:44:01,880 --> 00:44:07,620
THIS WHOLE THING ABOUT USING HYPER MEDIA REALLY REDUCES THE RISK OF YOU HAVING TO

00:44:07,620 --> 00:44:09,030
CREATE A NEW VERSION.

00:44:09,030 --> 00:44:13,440
SO I DON'T THINK I'M GOING TO NEED TO DO NEW VERSIONS.

00:44:13,440 --> 00:44:17,040
IF I NEED TO DO A COMPLETELY NEW THING, I WOULD PROBABLY BE -- IT WILL BE A DIFFERENT

00:44:17,040 --> 00:44:18,040
API.

00:44:18,040 --> 00:44:21,640
>> AUDIENCE: I JUST KNOW THAT I'M WORKING ON A REST API NOW, AND I KNOW THAT SOME OF

00:44:21,640 --> 00:44:25,310
THE OBJECTS THAT I'M GOING TO BE RETURNING LATER ARE GOING TO INCLUDE MORE COMPLICATED

00:44:25,310 --> 00:44:27,450
VALUES OR DIFFERENT ONES.

00:44:27,450 --> 00:44:31,150
AND I KNOW THAT I WANT TO VERSION THAT FOR LATER, SO I'M STRUGGLING TO DECIDE WHETHER

00:44:31,150 --> 00:44:33,550
I SHOULD BE INCLUDING THAT IN THE URL OR IN

00:44:33,550 --> 00:44:34,970
THE ACTUAL ACCEPT HEADER

00:44:34,970 --> 00:44:36,930
>> SO RIGHT.

00:44:36,930 --> 00:44:40,130
FOR CLIENTS, IT'S EASIER TO PUT IT IN THE URL.

00:44:40,130 --> 00:44:41,440
RIGHT?

00:44:41,440 --> 00:44:46,720
AND IN THIS CASE, EVEN MORE BECAUSE THE CLIENT DOESN'T EVEN KNOW THAT THE V2 OR V1

00:44:46,720 --> 00:44:47,720
IS THERE.

00:44:47,720 --> 00:44:48,720
RIGHT?

00:44:48,720 --> 00:44:49,720
BECAUSE IT'S ALL HYPER MEDIA BASED.

00:44:49,720 --> 00:44:50,720
>> AUDIENCE: RIGHT.

00:44:50,720 --> 00:44:54,860
>> IF YOU HAD TO PUT IT IN THE HEADERS, YOU NEED -- YOU KNOW, THE CLIENT NEEDS TO WRITE

00:44:54,860 --> 00:44:56,480
THAT HEADER GENERATED.

00:44:56,480 --> 00:44:58,060
SO IT'S A LITTLE BIT MORE BURDEN.

00:44:58,060 --> 00:45:00,060
BUT IT'S FINE.

00:45:00,060 --> 00:45:01,060
I THINK IT WORKS.

00:45:01,060 --> 00:45:02,330
I MEAN, PEOPLE DO IT.

00:45:02,330 --> 00:45:06,180
SO I HAVE NOTHING -- I CAN'T REALLY TELL YOU THAT IT'S WRONG BECAUSE IT'S NOT.

00:45:06,180 --> 00:45:07,780
>> Audience: THANK YOU.

00:45:07,780 --> 00:45:08,780
>> YES.

00:45:08,780 --> 00:45:10,980
>> THANKS, EVERYBODY, FOR COMING OUT.

00:45:10,980 --> 00:45:11,980
ENJOY YOUR PYTHON.

00:45:11,980 --> 00:45:12,980
THANK YOU.

00:45:12,980 --> 00:45:12,981

YouTube URL: https://www.youtube.com/watch?v=pZYRC8IbCwk


