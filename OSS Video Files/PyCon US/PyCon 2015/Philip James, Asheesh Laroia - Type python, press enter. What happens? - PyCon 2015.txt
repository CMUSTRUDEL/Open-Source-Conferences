Title: Philip James, Asheesh Laroia - Type python, press enter. What happens? - PyCon 2015
Publication date: 2015-04-11
Playlist: PyCon 2015
Description: 
	"Speakers: Philip James, Asheesh Laroia

This talk discusses how the Python interpreter starts, from the perspective of the operating system (OS). Together, we will see the ins & outs of processes: fork(), exec(), stdin, and stdout.

It focuses on OS concepts and requires no background knowledge, using analogies to Python data structures. (The talk does not discuss Pythonâ€™s own initialization, such as site.py or global variables.)

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:28,739 --> 00:00:31,039
HOW Y'ALL DOING?

00:00:31,039 --> 00:00:34,449
THAT WAS REALLY SAD.

00:00:34,449 --> 00:00:37,929
LIKE, HOW Y'ALL DOING?

00:00:37,929 --> 00:00:38,929
>> WHOO!

00:00:38,929 --> 00:00:40,839
>> YEAH, MUCH MUCH BETTER.

00:00:40,839 --> 00:00:41,839
ALL RIGHT.

00:00:41,839 --> 00:00:45,820
SO, OUR NEXT TALK, WHICH IS GOING TO BE AWESOME, IS BY ASHEESH LAROIA AND PHILIP JAMES.

00:00:45,820 --> 00:00:48,019
THEY ARE LONGTIME PYTHON FRIENDS.

00:00:48,019 --> 00:00:51,449
THEY'RE GOING TO BE TELLING US WHAT HAPPENS WHEN

00:00:51,449 --> 00:00:53,030
YOU RUN PYTHON.

00:00:53,030 --> 00:00:57,350
THEY WORK AT EVENTBRITE.

00:00:57,350 --> 00:00:59,509
[ APPLAUSE ] >> THANKS.

00:00:59,509 --> 00:01:03,449
AS HE SAID, MY NAME IS PHILIP JAMES, I WORK AT

00:01:03,449 --> 00:01:06,180
EVENTBRITE AS A SOFTWARE ENGINEER ON THE ORGANIZER GROWTH TEAM.

00:01:06,180 --> 00:01:07,500
YES, WE ARE HIRING.

00:01:07,500 --> 00:01:10,259
I'VE BEEN USING PYTHON FOR ABOUT SEVEN YEARS, EVER

00:01:10,259 --> 00:01:12,860
SINCE A FRIEND WHO'S IN DATABASES INTRODUCED ME TO

00:01:12,860 --> 00:01:15,110
THE LANGUAGE, BUT IT WASN'T UNTIL I SAW HOW EASY

00:01:15,110 --> 00:01:17,610
IT WAS TO BUILD A WEB ABSENT PYTHON THAT I REALLY

00:01:17,610 --> 00:01:19,500
GOT EXCITED AND I'VE BEEN BUILDING THINGS EVER

00:01:19,500 --> 00:01:20,510
SINCE.

00:01:20,510 --> 00:01:24,520
>> HI, MY NAME IS ASHEESH, I'M A SOFTWARE ENGINEER

00:01:24,520 --> 00:01:31,310
AND A COMMUNITY ENGINEER AT SANDSTORM NOW. AND I FIRST GOT INTO PYTHON BECAUSE I WANTED

00:01:31,310 --> 00:01:34,479
TO WRITE SOME CODE TO TAKE MY HIGH SCHOOL NEWSPAPER'S

00:01:34,479 --> 00:01:37,700
PAGE MAKER FILES AND MAKE A WEBSITE OUT OF THEM.

00:01:37,700 --> 00:01:40,600
AND I HAD READ THAT PYTHON WAS A GREAT LANGUAGE FOR THIS KIND OF THING.

00:01:40,600 --> 00:01:43,850
SO I TRIED TO INSTALL PYTHON ON THE COMPUTER LAB

00:01:43,850 --> 00:01:46,070
MACHINE IN THE HIGH SCHOOL NEWSPAPER OFFICE.

00:01:46,070 --> 00:01:47,320
IT DIDN'T WORK.

00:01:47,320 --> 00:01:53,070
SO THEN I USED UNPATCHED WINDOWS SECURITY VULNERABILITY TO GET LOCAL SYSTEM AND INSTALL

00:01:53,070 --> 00:01:54,180
PYTHON.

00:01:54,180 --> 00:01:56,280
AND THEN FOR THE REST OF THE YEAR, I WAS ABLE TO

00:01:56,280 --> 00:01:59,950
MAKE SOME CODE TO MAKE A WEBSITE.

00:01:59,950 --> 00:02:03,729
[ APPLAUSE ] >> AND WE'RE HERE TO TALK ABOUT WHAT HAPPENS

00:02:03,729 --> 00:02:06,130
WHEN YOU TYPE PYTHON AND PRESS ENTER.

00:02:06,130 --> 00:02:07,539
SO WHAT IS IT DOES HAPPEN?

00:02:07,539 --> 00:02:08,869
YOU TYPE PYTHON.

00:02:08,869 --> 00:02:10,200
YOU PRESS ENTER.

00:02:10,200 --> 00:02:11,200
SOME MAGIC HAPPENS.

00:02:11,200 --> 00:02:12,200
THE SHELL IS DISPLAYED.

00:02:12,200 --> 00:02:13,200
AND THAT'S THE END OF THE TALK.

00:02:13,200 --> 00:02:14,370
THANKS, EVERYBODY, IT WAS REALLY GREAT TO HAVE

00:02:14,370 --> 00:02:15,370
YOU.

00:02:15,370 --> 00:02:16,370
>> THANKS SO MUCH.

00:02:16,370 --> 00:02:19,230
[ Laughter ] >> REALLY, WE'RE GOING TO BE TALKING ABOUT

00:02:19,230 --> 00:02:22,480
THE PYTHON PROCESS AND HOW IT AS A UNIX PROCESS

00:02:22,480 --> 00:02:27,950
INTERACTS WITH THE REST OF THE OPERATING SYSTEM AND HOW USER INTERACT WITH THAT PROCESS.

00:02:27,950 --> 00:02:32,120
IF YOU ARE EXPECTING A TALK ABOUT CPYTHON INTERNALS, SORRY, THIS IS THE WRONG TALK.

00:02:32,120 --> 00:02:34,239
THIS IS ABOUT THE ACTUAL PYTHON PROCESS AS AN

00:02:34,239 --> 00:02:37,630
ABSTRACTION AND HOW IT INTERACTS WITH EVERYTHING ELSE.

00:02:37,630 --> 00:02:39,650
SO, WE'RE GOING TO START WITH THE SHELL.

00:02:39,650 --> 00:02:42,270
THIS IS THE BASH SHELL.

00:02:42,270 --> 00:02:43,270
AND WE'RE GOING TO TYPE PYTHON.

00:02:43,270 --> 00:02:46,860
NOW, WHEN WE TYPE PYTHON AND PRESS ENTER, THE

00:02:46,860 --> 00:02:49,530
FIRST THING THAT THE SHELL NEEDS TO DO IS FIND THE

00:02:49,530 --> 00:02:51,590
PYTHON EXECUTABLE.

00:02:51,590 --> 00:02:53,720
AND THE WAY THAT IT DOES THIS IS BY LOOKING IN AN

00:02:53,720 --> 00:02:56,850
ENVIRONMENT VARIABLE CALLED THE PATH.

00:02:56,850 --> 00:02:59,090
WE CAN PRINT THE PATH TO OUR SHELL BY USING THE

00:02:59,090 --> 00:03:01,160
COMMAND ECHO PATH.

00:03:01,160 --> 00:03:03,780
ALL ENVIRONMENT VARIABLES ARE STRINGS, BUT THIS IS

00:03:03,780 --> 00:03:06,000
A STRING THAT BEHAVES LIKE A LIST BECAUSE OF THAT

00:03:06,000 --> 00:03:08,400
COLON SEPARATOR BETWEEN THE ELEMENTS.

00:03:08,400 --> 00:03:12,209
SO, IF WE TYPE PYTHON AND PRESS ENTER, THE SHELL

00:03:12,209 --> 00:03:18,500
IS GOING TO START LOOKING FOR THE PYTHON EXECUTABLE IN THE PARTS OF THE PATH IN ORDER.

00:03:18,500 --> 00:03:22,190
IT'S GOING TO START IN SLASH HOME, SLASH PAUL PROTEUS SLASH BIN.

00:03:22,190 --> 00:03:24,320
IT DOESN'T FIND PYTHON.

00:03:24,320 --> 00:03:26,530
IT MOVES TO USER BIN, BECAUSE THIS IS WHERE THE

00:03:26,530 --> 00:03:32,690
PYTHON BINARY, BIN FOR BINARY, LIVES, IT GOES, SUCCESS, I HAVE FOUND IT.

00:03:32,690 --> 00:03:36,269
NOW, WE SAY THAT THE SHELL IS LOOKING FOR AN

00:03:36,269 --> 00:03:37,640
EXECUTABLE, BUT WHAT DOES THAT MEAN?

00:03:37,640 --> 00:03:40,540
THAT MEANS IT'S LOOKING FOR A TYPE OF FILE THAT

00:03:40,540 --> 00:03:42,460
THE KERNEL KNOWS HOW TO EXECUTE.

00:03:42,460 --> 00:03:44,680
THERE ARE MANY TYPES OF FILES THAT CAN BE EXECUTED

00:03:44,680 --> 00:03:46,810
BY THE KERNEL.

00:03:46,810 --> 00:03:48,870
BUT THE MECHANISM FOR FINDING THEM IS ALL THE

00:03:48,870 --> 00:03:49,989
SAME.

00:03:49,989 --> 00:03:54,750
SO IF WE WANTED TO FIGURE OUT HOW THE SHELL KNOWS

00:03:54,750 --> 00:03:57,780
THAT THE PYTHON EXECUTABLE IS EXECUTABLE, WE COULD

00:03:57,780 --> 00:04:02,120
TRY LOOKING AT THE RAW HEX. AND IF WE LOOK AT THE BEGINNING OF THE FILE,

00:04:02,120 --> 00:04:08,079
WE SEE THAT 7F454C46, OR ELF, WE CAN GET MORE

00:04:08,079 --> 00:04:11,400
INFORMATION WITH THE FILE COMMAND AND SEE THE USER

00:04:11,400 --> 00:04:15,959
BIN PYTHON IS AN ELF64 BIT LSB EXECUTABLE.

00:04:15,959 --> 00:04:22,820
ELF STANDS FOR EXECUTABLE AND LINKABLE FORMAT FILE.

00:04:22,820 --> 00:04:25,290
AND WHEN THE SHELL HAS FOUND, IT KNOWS, THIS THING

00:04:25,290 --> 00:04:27,221
IS EXECUTABLE, IT MATCHES THE COMMAND THAT THE

00:04:27,221 --> 00:04:30,470
USER GAVE ME, I'M GOING TO TRY TO EXECUTE THIS.

00:04:30,470 --> 00:04:34,060
IF THE ALGORITHM FOR FINDING THE FILES WAS WRITTEN

00:04:34,060 --> 00:04:36,470
IN PYTHON, IT WOULD LOOK A LOT LIKE THIS.

00:04:36,470 --> 00:04:38,600
THIS ISN'T THE ACTUAL CODE, BECAUSE THE BASH SHELL

00:04:38,600 --> 00:04:40,640
IS WRITTEN IN C, BUT IF YOU WANTED TO BUILD A

00:04:40,640 --> 00:04:43,650
SHELL IN PYTHON, THIS MIGHT BE WHAT YOU USE.

00:04:43,650 --> 00:04:49,009
SO, NOW THE BASH PROCESS HAS FOUND PYTHON AND

00:04:49,009 --> 00:04:51,740
WANTS TO START IT.

00:04:51,740 --> 00:04:55,810
IF WE LOOK AT THE SHELL AGAIN, IT MIGHT USE SOMETHING LIKE EXEC PYTHON, WHICH IS A WAY

00:04:55,810 --> 00:04:58,740
OF TAKING A COMMAND AND RUNNING IT RIGHT IN THE

00:04:58,740 --> 00:05:00,320
SESSION THAT YOU'RE CURRENTLY RUNNING.

00:05:00,320 --> 00:05:03,120
AND, SO, IT WOULD START PYTHON, GREAT.

00:05:03,120 --> 00:05:05,290
THIS LOOKS LIKE IT MIGHT BE WHAT YOU WANT.

00:05:05,290 --> 00:05:07,039
BUT THERE'S A PROBLEM.

00:05:07,039 --> 00:05:09,710
IF PYTHON QUITS FOR WHATEVER REASON, EXITS OR

00:05:09,710 --> 00:05:12,539
SOMETHING EXTERNAL CAUSES IT TO EXIT, THEN THAT

00:05:12,539 --> 00:05:16,180
PROCESS WOULD JUST BE DEAD.

00:05:16,180 --> 00:05:21,509
YOU MAY HAVE SEEN SOMETHING LIKE THIS ON YOUR MACHINE WHEN YOUR PROCESS EXITS IN THE TERMINAL.

00:05:21,509 --> 00:05:23,189
THIS ISN'T WHAT WE WANT.

00:05:23,189 --> 00:05:26,680
WHAT WE WANT IS FOR THE BASH PROCESS TO MAKE A

00:05:26,680 --> 00:05:29,830
COPY OF ITSELF THROUGH A SYSTEM CALL CALLED FORK.

00:05:29,830 --> 00:05:33,680
A SYSTEM CALL IS A MECHANISM THAT A PROGRAM CAN

00:05:33,680 --> 00:05:37,080
USE TO TALK TO THE OPERATING SYSTEM AND DO KERNEL

00:05:37,080 --> 00:05:39,349
FUNCTIONS, FUNCTIONS THAT NEED THE KERNEL'S HELP.

00:05:39,349 --> 00:05:42,270
SO BASH CALLS THE FORK SYSTEM CALL.

00:05:42,270 --> 00:05:43,990
AND CREATES A COPY OF ITSELF.

00:05:43,990 --> 00:05:45,360
YOU CAN SEE THE PROCESS I.D.

00:05:45,360 --> 00:05:50,439
HAS CHANGED FROM 1221 TO 1222.

00:05:50,439 --> 00:05:54,810
IT THEN CALLS EXECUTE ON THE PYTHON BINARY THAT IT

00:05:54,810 --> 00:06:00,199
FOUND EARLIER AND THE CHILD BECOMES PYTHON.

00:06:00,199 --> 00:06:05,749
SO, WE CAN VISUALIZE THIS CHANGE OF FORKING AND

00:06:05,749 --> 00:06:11,090
EXECUTING, WHICH, BY THE WAY, IS HOW ALL PROCESSES ON A UNIX SYSTEM, AND HERE WE'RE TALKING ABOUT

00:06:11,090 --> 00:06:17,479
LINUX AND MAC, HOW ALL THE PROCESSES ARE STARTED THROUGH ANOTHER PROGRAM CALLED PSTREE.

00:06:17,479 --> 00:06:20,090
IF WE WERE TO RUN PSTREE, WE WOULD SEE THE FLOW,

00:06:20,090 --> 00:06:23,750
THE TREE OF ALL THE PROCESSES ON OUR SYSTEM.

00:06:23,750 --> 00:06:26,129
WE'VE TAKEN SOME OUT TO MAKE IT EASIER TO LOOK AT,

00:06:26,129 --> 00:06:28,569
BUT YOU CAN SEE, IT STARTS WITH INIT WHICH THEN

00:06:28,569 --> 00:06:31,190
FORKS AND EXECS ALL THE OTHER PROGRAMS IN THE

00:06:31,190 --> 00:06:34,639
SYSTEM, DOWN TO THE SHH DAEMON, WHICH WE'RE USING

00:06:34,639 --> 00:06:37,860
TO LOG INTO THE MACHINE, WHICH CREATES BASH, WHICH

00:06:37,860 --> 00:06:41,330
CREATES PYTHON AND PSTREE.

00:06:41,330 --> 00:06:42,430
QUICK REVIEW.

00:06:42,430 --> 00:06:46,789
PROCESS CREATION, FIND THE BINARY IN THE PATH ENVIRONMENT VARIABLE.

00:06:46,789 --> 00:06:48,430
FORK THE CURRENT PROCESS.

00:06:48,430 --> 00:06:52,289
AND EXEC THE FOUND BINARY INTO THE NEW PROCESS.

00:06:52,289 --> 00:06:57,150
NOW, IF WE HAD PASSED SOME ARGUMENTS TO THE PYTHON

00:06:57,150 --> 00:07:00,809
COMMAND, WE'D SEE SOMETHING LIKE THIS.

00:07:00,809 --> 00:07:02,830
PYTHON DASH V GIVES YOU A LIST OF ALL THE IMPORTS

00:07:02,830 --> 00:07:04,539
THAT IT'S GOING TO FIND WHEN IT TRIES TO LOAD THE

00:07:04,539 --> 00:07:08,159
INTERACTIVE SHELL.

00:07:08,159 --> 00:07:13,099
BASH SEES THOSE ARGUMENTS FIRST, TOKENIZES THE

00:07:13,099 --> 00:07:16,689
LIST OF ARGUMENTS AND PASSES THAT THROUGH THE EXEC

00:07:16,689 --> 00:07:19,620
COMMAND TO THE NEW PROGRAM THAT IT'S STARTING.

00:07:19,620 --> 00:07:23,499
WHAT'S INTERESTING TO NOTE IS THAT EVEN THE FIRST

00:07:23,499 --> 00:07:26,919
ELEMENT OF THE LIST IS THE NAME OF THE PROGRAM.

00:07:26,919 --> 00:07:29,710
SO HERE WE SEE THAT IF WE WERE TO PASS PYTHON DASH

00:07:29,710 --> 00:07:32,139
V, THEN OUR PYTHON PROCESS WOULD HAVE AN ARG V

00:07:32,139 --> 00:07:38,550
LIST OF PYTHON AND DASH V. IF WE LOOK AT JUST OUR STANDARD PYTHON PROCESS,

00:07:38,550 --> 00:07:42,039
WITH NO OPTIONS, ARG V IS STILL POPULATED WITH THE

00:07:42,039 --> 00:07:43,830
NAME OF THE COMMAND.

00:07:43,830 --> 00:07:47,469
SO NOW WE HAVE A PYTHON PROCESS, WE HAVE A SHELL,

00:07:47,469 --> 00:07:49,080
BUT HOW DO WE INTERACT WITH THAT SHELL?

00:07:49,080 --> 00:07:51,160
HOW DO WE HANDLE INPUT AND OUTPUT?

00:07:51,160 --> 00:07:53,350
FOR THAT I'M GOING TO TURN IT OVER TO ASHEESH.

00:07:53,350 --> 00:07:54,759
>> THANKS, PHILIP.

00:07:54,759 --> 00:08:00,680
SO TO TELL YOU SOMETHING ABOUT HOW INPUT AND OUTPUT WORKS WITH UNIX PROCESSES, I'M GOING

00:08:00,680 --> 00:08:04,129
TO START BY SHOWING YOU A PHOTOGRAPH OF A 1950s

00:08:04,129 --> 00:08:05,860
DEVICE CALLED A TELETYPE.

00:08:05,860 --> 00:08:09,569
THIS TELETYPE IS A PIECE OF HARDWARE CALLED A

00:08:09,569 --> 00:08:16,279
TELETYPE BECAUSE WHEN YOU TYPE ON THE KEYBOARD, WHAT YOU TYPE FLOWS OUT A MODEM LINE, A PHONE

00:08:16,279 --> 00:08:19,129
LINE, THROUGH THE BACK OF THIS DEVICE, GOES TO

00:08:19,129 --> 00:08:23,569
SOME COMPUTER FAR AWAY, WHATEVER YOU TYPE IT SEES,

00:08:23,569 --> 00:08:29,990
AND WHEN IT WANTS TO TALK TO TO YOU, IF YOU'VE TYPED SOMETHING THAT REQUIRES A RESPONSE,

00:08:29,990 --> 00:08:32,589
WHEN IT KNOWS WHAT TO TELL YOU, IT WILL PRINT THAT

00:08:32,589 --> 00:08:36,060
ON THIS PIECE OF PAPER AT THE TOP OF YOUR TELETYPE.

00:08:36,060 --> 00:08:38,710
THIS IS, HONEST TO GOODNESS, PAPER TERMINALS.

00:08:38,710 --> 00:08:40,010
NOWADAYS WE DON'T HAVE TERMINALS.

00:08:40,010 --> 00:08:41,849
WE HAVE TERMINAL EMULATORS.

00:08:41,849 --> 00:08:45,190
BECAUSE IT'S MUCH CHEAPER TO HAVE SOFTWARE THAN

00:08:45,190 --> 00:08:46,360
TELETYPES.

00:08:46,360 --> 00:08:48,540
BUT THERE'S STILL SOFTWARE IN THE OPERATING SYSTEM

00:08:48,540 --> 00:08:51,240
THAT MODELS THIS TELETYPE DEVICE.

00:08:51,240 --> 00:08:55,450
IN LINUX, THAT'S CALLED A PSEUDO-TTY LAYER, TTY

00:08:55,450 --> 00:09:00,990
FOR TELETYPE, AND A COOL THING ABOUT UNIX SYSTEMS

00:09:00,990 --> 00:09:06,250
IS THAT YOU COULD, IN THE 1970s, WHEN UNIX BEGAN, CONNECT MULTIPLE OF THESE TELETYPE

00:09:06,250 --> 00:09:08,820
DEVICES TO THE SAME UNIX SYSTEM.

00:09:08,820 --> 00:09:10,960
SO DIFFERENT PEOPLE COULD BE SHARING ACCESS, THEY

00:09:10,960 --> 00:09:14,090
COULD BE TYPING COMMANDS, ALL SEPARATELY, PAPER

00:09:14,090 --> 00:09:16,190
COULD BE SPILLING OUT, ALL SEPARATELY.

00:09:16,190 --> 00:09:22,320
AND NOWADAYS THAT'S SIMULATED BY THESE PSEUDO-TELETYPE DEVICES HAVING INDIVIDUAL

00:09:22,320 --> 00:09:25,610
FILES IN THIS DIRECTORY DEV PTS.

00:09:25,610 --> 00:09:31,740
LET'S SAY THAT THE TERMINAL WINDOW WHICH WE'LL OPEN, WHICH WE'LL DO THE REST OF THIS INPUT/OUTPUT

00:09:31,740 --> 00:09:36,329
DISCUSSION IS NUMBERED DEV PTS3.

00:09:36,329 --> 00:09:41,820
SO, THE NEXT THING WE'LL DO IS TYPE 2 PLUS 2 AND

00:09:41,820 --> 00:09:45,980
PRESS ENTER, AND PRESS ENTER, INTO PYTHON.

00:09:45,980 --> 00:09:50,380
TO VISUALIZE HOW THAT WORKS, PYTHON NOT ONLY HAS A

00:09:50,380 --> 00:09:54,139
PID, IT ALSO HAS A SET OF FILE DESCRIPTORS, FILE

00:09:54,139 --> 00:09:56,949
DESCRIPTOR NUMBER 0 IS WHERE THE NUMBER 2 WILL

00:09:56,949 --> 00:10:01,029
APPEAR AND THAT'S COMMONLY NAMED STANDARDIN.

00:10:01,029 --> 00:10:04,480
SO, STANDARD IN IS REALLY JUST A NAME FOR THE

00:10:04,480 --> 00:10:09,560
NUMBER 0 IN THIS CONTEXT OF FILE DESCRIPTORS.

00:10:09,560 --> 00:10:13,790
AND A FILE DESCRIPTOR IS A FINDING FROM THIS NUMBER TO THE OPEN FILE OBJECT INSIDE THE

00:10:13,790 --> 00:10:15,800
OPERATING TESTIMONY KERNEL, IN OUR CASE, IT'S OPEN

00:10:15,800 --> 00:10:19,649
AND BOUND TO THE PSEUDO-TELETYPE DEVICE PROVIDED BY THE OPERATING SYSTEM.

00:10:19,649 --> 00:10:26,660
SO WHEN WE PRESS 2 ON THE KEYBOARD, THAT FLOWS INTO THIS LAYER, WHICH INSIDE THE OPERATING

00:10:26,660 --> 00:10:32,279
SYSTEM MIMICS THAT 1950 TELETYPE DEVICE AND THE LAYER

00:10:32,279 --> 00:10:39,060
PASSES THAT 2 TO THIS FILE DESCRIPTOR 0 THAT PYTHON HAS READ.

00:10:39,060 --> 00:10:41,830
AND SO, THAT'S HOW THE EVENT WILL FLOW INTO THE

00:10:41,830 --> 00:10:43,640
PYTHON PROCESS.

00:10:43,640 --> 00:10:45,399
THAT'S A VISUAL AND I'LL SHOW YOU WHAT THAT'S LIKE

00:10:45,399 --> 00:10:47,370
IF WE USE STRACES.

00:10:47,370 --> 00:10:51,430
HOW MANY WENT TO JULIA'S TALK?

00:10:51,430 --> 00:10:55,840
SOME OF YOU MAY NOW HAVE A COPY OF HER STRACE.

00:10:55,840 --> 00:10:59,630
AND STRACE IS A PROGRAM THAT WE CAN USE TO WATCH

00:10:59,630 --> 00:11:02,370
ALL THESE SYSTEM CALLS A PROGRAM MAKES, AND SYSTEM

00:11:02,370 --> 00:11:05,209
CALLS ARE CALLS A PROGRAM MAKES THAT REQUIRE THE

00:11:05,209 --> 00:11:07,389
ASSISTANCE OF THE OPERATING SYSTEM KERNEL TO BE

00:11:07,389 --> 00:11:08,389
COMPLETED.

00:11:08,389 --> 00:11:11,950
SO, WHEN WE STRACE PYTHON, HOW MANY OF YOU HAVE

00:11:11,950 --> 00:11:12,950
STRACED PYTHON?

00:11:12,950 --> 00:11:13,950
OKAY, OKAY.

00:11:13,950 --> 00:11:16,430
WELL, YOU SHOULD DO THAT SOME MORE, WHEN YOU'RE DONE WITH THIS TALK.

00:11:16,430 --> 00:11:17,480
IT PRINTS OUT A LOT OF STUFF.

00:11:17,480 --> 00:11:19,810
BUT EVENT IT WILL PRINT OUT READ OF 0.

00:11:19,810 --> 00:11:22,540
AND THE FACT THAT THIS CALL DOESN'T HAVE A CLOSE

00:11:22,540 --> 00:11:25,079
PAREN WHEN PRINTED OUT BY STRACE, MEANS THAT THE

00:11:25,079 --> 00:11:27,450
CALL HASN'T FINISHED.

00:11:27,450 --> 00:11:34,139
READ IS BLOCKING, IT'S WAITING, IT WILL NEVER TERMINATE UNTIL SOMETHING HAPPENS AND IN OUR

00:11:34,139 --> 00:11:35,850
CASE, SOMETHING DOES HAPPEN, WE'LL PRESS 2.

00:11:35,850 --> 00:11:39,500
SO THAT WILL FLOW INTO THIS TERM LAYER.

00:11:39,500 --> 00:11:44,970
AND READABLE RETURN, THE BYTE 2, AS A STRING, AND

00:11:44,970 --> 00:11:47,019
THE NUMBER 1, WHICH INDICATES HOW MANY BYTES IT

00:11:47,019 --> 00:11:48,279
RETURNED.

00:11:48,279 --> 00:11:52,480
SO, PYTHON WILL PROCESS THAT AND EVENTUALLY DECIDE

00:11:52,480 --> 00:11:54,149
THAT THAT'S NOT A FULL PYTHON EXPRESSION THAT IT

00:11:54,149 --> 00:11:56,130
WANTS TO EVALUATE YET, SO IT WILL CALL READ AGAIN

00:11:56,130 --> 00:11:57,360
ON FILE DESCRIPTOR 0.

00:11:57,360 --> 00:11:58,639
WE CAN PRESS PLUS.

00:11:58,639 --> 00:12:04,260
THAT WILL FLOW INTO THE PYTHON PROCESS.

00:12:04,260 --> 00:12:08,740
AND HAVING DONE THAT, IF WE PRESS 2 AND THEN ENTER

00:12:08,740 --> 00:12:14,329
AGAIN, THE MORE DATA WILL FLOW INTO THE PYTHON PROCESS AND AT THIS POINT, PYTHON WILL DO

00:12:14,329 --> 00:12:17,449
SOME COMPUTATION BECAUSE IT'S READY TO EVALUATE

00:12:17,449 --> 00:12:19,310
ALL THIS STUFF.

00:12:19,310 --> 00:12:23,379
PYTHON'S INTERACTIVE SHELL EXISTS TO READ DATA,

00:12:23,379 --> 00:12:26,319
WAIT FOR A NEW LINE, EVALUATE THAT, AND PRINT THE

00:12:26,319 --> 00:12:27,319
RESPONSE.

00:12:27,319 --> 00:12:31,720
AND I'LL SHOW YOU SOME PSEUDOCODE NOW THAT EXPLAINS HOW THAT MIGHT WORK.

00:12:31,720 --> 00:12:33,790
THE PYTHON INTERACTIVE PROMPT IS ACTUALLY WRITTEN

00:12:33,790 --> 00:12:35,930
IN C, NOT IN PYTHON, BUT IF IT WERE WRITTEN IN

00:12:35,930 --> 00:12:39,190
PYTHON, IT WOULD LOOK A LOT LIKE THIS.

00:12:39,190 --> 00:12:40,870
PYTHON IS GOING TO LOOP FOREVER.

00:12:40,870 --> 00:12:44,600
GRABBING ONE CHARACTER AT A TIME FROM SYSOP.

00:12:44,600 --> 00:12:46,709
WHICH IS TO SAY, FILE DESCRIPTOR 0 FROM THE C

00:12:46,709 --> 00:12:48,519
PERSPECTIVE.

00:12:48,519 --> 00:12:51,170
CHECKS IF THAT CHARACTER'S A NEW LINE, AND IF SO,

00:12:51,170 --> 00:12:54,379
EVALUATES ALL THE DATA IT'S SEEN SO FAR.

00:12:54,379 --> 00:12:58,459
THIS IS KNOWN AS THE READ EVAL PRINT LOOP OR REPL,

00:12:58,459 --> 00:13:00,180
IF YOU'VE HEARD PEOPLE TALK ABOUT THE REPL AND NOT

00:13:00,180 --> 00:13:02,700
KNOWN WHAT THAT WAS ABOUT, NOW YOU KNOW.

00:13:02,700 --> 00:13:08,560
READ EVAL, I DIDN'T HAVE A WORD THAT WAS LOOP.

00:13:08,560 --> 00:13:11,350
SO THAT'S HOW PYTHON GETS DATA.

00:13:11,350 --> 00:13:14,279
BUT I HAVEN'T YET SAID HOW PYTHON SHOWS THAT DATA

00:13:14,279 --> 00:13:15,839
TO YOU.

00:13:15,839 --> 00:13:17,470
I HAVE USED THE WORD PRINT HERE.

00:13:17,470 --> 00:13:21,440
AS AN HOMAGE TO THE PAPER TERMINALS THAT WE SAW

00:13:21,440 --> 00:13:22,440
BEFORE.

00:13:22,440 --> 00:13:26,420
PYTHON, IT TURNS OUT, HAS MORE FILE DESCRIPTORS THAN JUST THE NUMBER 0.

00:13:26,420 --> 00:13:31,329
IT WAKES UP WITH AT LEAST THREE FILE DESCRIPTORS, NUMBER 0, 1, AND 2.

00:13:31,329 --> 00:13:34,690
FILE NUMBER 0 IS STANDARDIN.

00:13:34,690 --> 00:13:36,700
FILE DESCRIPTOR 1 IS STANDARD OUT AND THAT'S WHERE

00:13:36,700 --> 00:13:37,769
PRINT WILL GO.

00:13:37,769 --> 00:13:40,360
THAT'S WHAT SYS SET OUT IS BOUND TO IN THE FIRST

00:13:40,360 --> 00:13:44,699
PLACE, FILE DESCRIPTOR 2 IS STANDARD ERROR.

00:13:44,699 --> 00:13:46,340
ALL THREE OF THESE ARE BOUND TO THE SAME TERMINAL.

00:13:46,340 --> 00:13:48,069
BUT IT'S USEFUL, RIGHT, BECAUSE IF YOU WANT TO BE

00:13:48,069 --> 00:13:52,370
TYPING INTO ONE TERMINAL, YOU DON'T WANT THE OUTPUT TO GO A DIFFERENT TERMINAL WINDOW BY

00:13:52,370 --> 00:13:54,330
DEFAULT.

00:13:54,330 --> 00:14:01,310
SO, THAT'S PYTHON'S FIRST THREE FILE DESCRIPTORS, BUT IT'S ALSO BASH'S FIRST THREE FILE DESCRIPTORS.

00:14:01,310 --> 00:14:03,230
BECAUSE BASH IS THE IF I CAN THING INTO WHICH WE

00:14:03,230 --> 00:14:07,300
TYPED PYTHON, THAT FORK, EXEC PYTHON.

00:14:07,300 --> 00:14:10,810
AND, SO, WHEN I SEE A DIAGRAM LIKE THIS, I WONDER,

00:14:10,810 --> 00:14:13,491
WHEN I TYPE 2 PLUS 2 AND TYPE ENTER, I WONDER, WHO

00:14:13,491 --> 00:14:14,491
WILL WIN?

00:14:14,491 --> 00:14:15,949
WHO WILL GET THE EVENT?

00:14:15,949 --> 00:14:18,980
BASH 0 IS THE TERMINAL.

00:14:18,980 --> 00:14:20,670
PYTHON 0 IS THE TERMINAL.

00:14:20,670 --> 00:14:26,589
AND THE ANSWER IS THAT BASH SCRUPULOUSLY REFUSES TO READ FROM FILE DESCRIPTOR 0 WHEN IT'S RUNNING

00:14:26,589 --> 00:14:28,339
PYTHON BECAUSE THAT WOULD JUST BE RUDE.

00:14:28,339 --> 00:14:30,630
THE POINT IS TO INTERACT WITH PYTHON, NOT TO

00:14:30,630 --> 00:14:31,640
INTERACT WITH BASH.

00:14:31,640 --> 00:14:33,589
THERE'S A COLLECTION OF CONCEPTS AROUND THIS THAT

00:14:33,589 --> 00:14:40,350
CAN BE SUMMARIZED AS PYTHON IS THE FOREGROUND PROCESS AND THAT'S WHY BASH MAKES SURE YOUR

00:14:40,350 --> 00:14:42,980
DATA GOES THERE.

00:14:42,980 --> 00:14:46,139
SO, THAT'S THE BASICS OF INPUT AND OUTPUT.

00:14:46,139 --> 00:14:49,800
THERE'S A COUPLE OF SPECIAL TYPES OF INPUT WORTH

00:14:49,800 --> 00:14:50,890
GOING INTO.

00:14:50,890 --> 00:14:57,540
ONE OF MY FAVORITES IS CONTROL C. SO, CONTROL C IS A CHARACTER SEQUENCE LIKE

00:14:57,540 --> 00:15:01,069
ANY OTHER, AND THE WAY THAT TERMINALS WORK, IT'S

00:15:01,069 --> 00:15:04,690
SORT OF A SIGNAL EVENT, SO LIKE ANY OTHER EVENT

00:15:04,690 --> 00:15:06,730
ON THE KEYBOARD THAT YOU TYPE INTO YOUR TERMINAL

00:15:06,730 --> 00:15:10,589
WINDOW, IT GOES TO THE SUBSYSTEM IN THE KERNEL.

00:15:10,589 --> 00:15:13,370
BUT TERMIOS KNOWS THAT CONTROL C IS A BIT SPECIAL.

00:15:13,370 --> 00:15:16,269
CONTROL C IS NORMALLY USED TO INTERRUPT A PROGRAM.

00:15:16,269 --> 00:15:21,579
SO TERMIOS KNOWS IT NEEDS TO FIND A PROGRAM TO

00:15:21,579 --> 00:15:24,440
WHICH IT CAN SEND AN INTERRUPT SIGNAL, WHICH WE

00:15:24,440 --> 00:15:28,690
ABBREVIATE HERE AS SIGINT, NOT SINGLE INTELLIGENCE.

00:15:28,690 --> 00:15:33,990
AND THE INTERRUPT SINGAL, BECAUSE PYTHON IS THE

00:15:33,990 --> 00:15:37,230
FOREGROUND PROCESS, GET PASSED TO THE PYTHON INTERPRETER.

00:15:37,230 --> 00:15:40,610
BY DEFAULT, WHAT THIS WOULD DO IS CAUSE PYTHON TO

00:15:40,610 --> 00:15:42,540
QUIT, BUT PYTHON DOESN'T WANT TO QUIT WHEN YOU DO

00:15:42,540 --> 00:15:45,860
CONTROL C. IT WANTS TO RAISE AN EXCEPTION, A PYTHON

00:15:45,860 --> 00:15:49,670
EXCEPTION, SO IT'S BOUND SOME SPECIAL CODE TO THE

00:15:49,670 --> 00:15:54,310
INTERRUPT SIGNAL, CALLED A SIGNAL HANDLER.

00:15:54,310 --> 00:15:58,540
YOU'VE PROBABLY TYPED CONTROL C INTO A PYTHON INTERPRETER AND GOTTEN OUTPUT LIKE THIS.

00:15:58,540 --> 00:16:02,040
WHEN YOU PRESS CONTROL C, YOU SEE KEYBOARD INTERRUPT.

00:16:02,040 --> 00:16:04,350
AND THAT'S BECAUSE PYTHON HAS SOME CODE INSIDE IT

00:16:04,350 --> 00:16:14,149
THAT TURNS THAT SIGNAL FROM C INTO EFFECTIVELY RAISE KEYBOARD INTERRUPT IN THE PYTHON PROCESS.

00:16:14,149 --> 00:16:18,129
DOING THIS CONTROL C THING ISN'T REALLY NORMAL INPUT.

00:16:18,129 --> 00:16:23,060
IT'S THIS CRAZY SIDEWAYS INPUT WHERE THE OPERATING SYSTEM STOPS THE PROGRAM ENTIRELY, FREEZES

00:16:23,060 --> 00:16:27,260
IT, AND THEN CALLS WHATEVER FUNCTION PYTHON BOUND

00:16:27,260 --> 00:16:28,390
AS A SIGNAL HANDLER.

00:16:28,390 --> 00:16:30,980
SO IT'S ACTUALLY A LOT OF WORK TO BIND THE SIGNALS

00:16:30,980 --> 00:16:34,579
AND HANDLE THEM CORRECTLY AND WE CAN ALL BE GRATEFUL THAT PYTHON DOES THAT RIGHT.

00:16:34,579 --> 00:16:39,829
SO, THERE ARE AT LEAST TWO SIGNALS THAT PYTHON BINDS ONE BY THE HANDLER TO.

00:16:39,829 --> 00:16:42,509
ONE IS SIG INTERRUPT AS WE SAW, THE OTHER IS

00:16:42,509 --> 00:16:48,520
SIGPIPE, AND THAT'S A SIGNAL THAT THE OPERATING SYSTEM WILL PASS IT UNDER SOME CIRCUMSTANCES

00:16:48,520 --> 00:16:50,259
RELATED TO SUBPROCESSES.

00:16:50,259 --> 00:16:52,009
THE REASON PYTHON BINDS THAT IS SO THAT IT CAN

00:16:52,009 --> 00:16:56,879
CONVERT THIS SIGPIPE SIGNAL INTO AN APPROPRIATE PYTHON EVENT FOR THE REST OF THE PYTHON

00:16:56,879 --> 00:16:59,089
INTERPRETER.

00:16:59,089 --> 00:17:01,449
THE ALTERNATIVE IS YOU WRITE THE CODE HALF IN C,

00:17:01,449 --> 00:17:04,310
HALF IN PYTHON AND THAT WOULD BE SUPER CONFUSING.

00:17:04,310 --> 00:17:13,079
SO THAT'S CONTROL C. CONTROL D IS SIMILAR BUT DIFFERENT.

00:17:13,079 --> 00:17:15,579
SO, LIKE ANYTHING ELSE, WHEN WE TYPE CONTROL D, IT

00:17:15,579 --> 00:17:17,720
GOES TO THE TERMIOS LAYER.

00:17:17,720 --> 00:17:19,079
HERE I'M GOING TO SHOW YOU WHAT WOULD HAPPEN IF WE

00:17:19,079 --> 00:17:22,959
HAVE A PROGRAM CALLED CAT, NOT THE PROGRAM PYTHON.

00:17:22,959 --> 00:17:26,120
BY DEFAULT, TERMIOS BEHAVIOR IS TO, INSTEAD OF

00:17:26,120 --> 00:17:32,670
PASSING CONTROL D AS A BYTE SEQUENCE TO FILE DESCRIPTOR 0, THE DEFAULT BEHAVIOR OF CONTROL

00:17:32,670 --> 00:17:35,370
D IS THAT IT MEANS END OF FILE.

00:17:35,370 --> 00:17:41,350
SO, FOR A SIMPLE PROGRAM LIKE CAT THAT DOESN'T CAREFULLY RECONFIGURE THE TERMIOS LAYER, WHAT

00:17:41,350 --> 00:17:43,220
WILL HAPPEN IS THE TERMIOS LAYER WILL CLOSE THAT

00:17:43,220 --> 00:17:46,350
FILE DESCRIPTOR 0 AND CAT WILL SAY, WELL, THAT'S

00:17:46,350 --> 00:17:49,520
ALL THERE IS ON THE STANDARD INPUT, I'D BETTER

00:17:49,520 --> 00:17:50,520
EXIT.

00:17:50,520 --> 00:17:51,660
THAT'S WHAT CAT WOULD DO.

00:17:51,660 --> 00:17:55,450
BUT MAYBE YOU CAN SEE WHAT PYTHON WOULD DO.

00:17:55,450 --> 00:17:58,140
WHEN YOU TYPE HELLO.

00:17:58,140 --> 00:17:59,490
OKAY, GREAT.

00:17:59,490 --> 00:18:03,370
WHEN YOU GIVE CONTROL D TO THE PYTHON PROCESS, IT

00:18:03,370 --> 00:18:05,521
GOES THROUGH THE SAME TERMIOS LAYER, IT GOES TO

00:18:05,521 --> 00:18:08,980
THE SAME FILE DESCRIPTOR, BUT PYTHON HANDLES THAT

00:18:08,980 --> 00:18:09,980
DIFFERENTLY.

00:18:09,980 --> 00:18:15,450
AS MANY OF YOU KNOW, IN A PYTHON INTERACTIVE SHELL, CONTROL D IS HOW YOU EXIT THE PYTHON

00:18:15,450 --> 00:18:16,450
PROGRAM.

00:18:16,450 --> 00:18:19,490
NOW, THAT'S ONE OF THREE WAYS THAT YOU CAN EXIT.

00:18:19,490 --> 00:18:21,330
AND I'M GOING TO SHOW YOU THOSE THREE WAYS.

00:18:21,330 --> 00:18:23,450
AND I'M GOING TO SHOW YOU HOW THE OPERATING SYSTEM

00:18:23,450 --> 00:18:25,590
THEY ALL RESULT IN THE SAME THING.

00:18:25,590 --> 00:18:27,810
SO FIRST THERE'S CONTROL D, WHICH IS EQUIVALENT TO

00:18:27,810 --> 00:18:30,590
DOING IMPORT SYS AND SYS.EXIT.

00:18:30,590 --> 00:18:32,450
YOU MAY HAVE DONE THIS AS YOU HAD A SCRIPT YOU

00:18:32,450 --> 00:18:35,529
WANTED TO EXIT OUTSIDE OF THE NORMAL PROCESS.

00:18:35,529 --> 00:18:39,080
YOU CAN ALSO RAISE A SYSTEM EXIT.

00:18:39,080 --> 00:18:41,320
AND WHAT'S INTERESTING ABOUT ALL THREE OF THESE,

00:18:41,320 --> 00:18:45,290
WE WERE TO GO TO OUR STRACE PYTHON COMMAND AGAIN,

00:18:45,290 --> 00:18:48,150
IN ALL THREE OF THESE CASES, WE WOULD SEE THE

00:18:48,150 --> 00:18:52,539
SYSTEM CALLED EXIT 0 WITH NO RETURN STATEMENT.

00:18:52,539 --> 00:18:55,309
AND WE WOULD GET DROPPED BACK TO A SHELL PROMPT.

00:18:55,309 --> 00:19:03,750
NOW, IF WE WERE TO ECHO DOLLAR QUESTION MARK, WHICH IS THE STATUS CODE OF THE PREVIOUS PROGRAM,

00:19:03,750 --> 00:19:06,770
THE EXIT STATUS CODE, TO BE PRECISE, WE WOULD SEE

00:19:06,770 --> 00:19:07,770
0.

00:19:07,770 --> 00:19:11,480
0 IS THE STANDARD EXIT CODE FOR PROGRAM.

00:19:11,480 --> 00:19:14,169
WHAT'S INTERESTING IS, IF WE WERE TO DO IMPORT SYS

00:19:14,169 --> 00:19:17,220
AND SYS.EXIT 1, WE CAN ACTUALLY CHANGE THE EXIT

00:19:17,220 --> 00:19:19,700
CODE OF THE PYTHON PROCESS.

00:19:19,700 --> 00:19:24,100
SO, PROCESS EXITS, ECHO DOLLAR QUESTION MARK, AND

00:19:24,100 --> 00:19:28,159
WE GET 1 AS THE RESULT.

00:19:28,159 --> 00:19:29,900
SO LET'S DO A QUICK RECAP.

00:19:29,900 --> 00:19:32,260
WE START WITH A BASH PROCESS.

00:19:32,260 --> 00:19:34,580
THAT BASH PROCESS GETS THE COMMAND THAT WE WANT TO

00:19:34,580 --> 00:19:35,640
RUN PYTHON.

00:19:35,640 --> 00:19:42,590
IT SEARCHES ITS PATH, FINDS THE PYTHON EXECUTABLE, AND THEN FORKS AND EXECS TO CREATE THE PYTHON

00:19:42,590 --> 00:19:43,640
PROCESS.

00:19:43,640 --> 00:19:46,150
WHICH HAS AN ARG V LIST OF PYTHON BECAUSE WE

00:19:46,150 --> 00:19:49,299
DIDN'T GIVE IT ANY EXTRA PARAMETERS.

00:19:49,299 --> 00:19:54,980
THE PYTHON PROCESS ALSO HAS A SET OF FILE DESCRIPTORS, HERE'S 0, 1, 2, STANDARD IN,

00:19:54,980 --> 00:19:57,970
STANDARD OUT AND STANDARD ERROR.

00:19:57,970 --> 00:20:06,299
AND ADDITIONALLY, THE PYTHON PROCESS BINDS HANDLERS TO SOME SIGNALS, SPECIFICALLY SIGPIPE

00:20:06,299 --> 00:20:09,400
AND SIGINT.

00:20:09,400 --> 00:20:12,100
WE'RE GOING TO POST THESE SLIDES ONLINE AND ALSO

00:20:12,100 --> 00:20:14,150
THIS IS A GREAT TIME TO TAKE A PHOTO IF YOU WANT

00:20:14,150 --> 00:20:15,470
TO TAKE A PHOTO.

00:20:15,470 --> 00:20:19,820
THIS IS THE MODEL THAT REALLY HELPED US, THIS ABSTRACTION REALLY HELPED US SOLIDIFY WHAT'S

00:20:19,820 --> 00:20:24,840
HAPPENING WITH THE PYTHON PROCESS ON A UNIX SYSTEM.

00:20:24,840 --> 00:20:27,880
IT HELPED FUEL OUR CURIOSITY.

00:20:27,880 --> 00:20:29,620
AND WE THINK THAT YOU SHOULD BE CURIOUS ABOUT THIS

00:20:29,620 --> 00:20:30,659
KIND OF STUFF.

00:20:30,659 --> 00:20:34,960
WE HOPE THAT YOU ARE SEEING SOME OF THE TALKS ALREADY OR SOME OF THE TALKS IN THE FUTURE

00:20:34,960 --> 00:20:38,170
ABOUT SYSTEMS PROGRAMMING AT PYCON.

00:20:38,170 --> 00:20:42,080
WE'D LIKE TO SAY THAT WHEN WE SUBMITTED THE PROPOSAL FOR THIS TALK, NEITHER OF US KNEW

00:20:42,080 --> 00:20:44,600
ENOUGH TO GIVE THIS TALK FROM MEMORY, WE USED THE

00:20:44,600 --> 00:20:48,470
SAME TOOLS THAT WE DEMOED HERE, PSTREE AND STRACE

00:20:48,470 --> 00:20:51,580
AND FILE AND HEX DUMP, TO LEARN ENOUGH TO BE ABLE

00:20:51,580 --> 00:20:52,700
TO GIVE THIS TALK.

00:20:52,700 --> 00:20:57,350
SO, IF YOU ARE CURIOUS, AND WE HOPE YOU ARE CURIOUS, THERE ARE SOME TALKS AT THIS PYCON

00:20:57,350 --> 00:20:59,860
TO EXPLORE MORE, ONE IS SYSTEMS PROGRAMMING AS

00:20:59,860 --> 00:21:01,860
A SWISS ARMY KNIFE, AND, UNFORTUNATELY, YOU

00:21:01,860 --> 00:21:04,179
NEED A TIME MACHINE TO GO VISIT IT THIS MORNING.

00:21:04,179 --> 00:21:06,649
BUT YOU CAN ALSO VIEW IT ON PYVIDEO.ORG WHEN IT'S

00:21:06,649 --> 00:21:07,850
RELEASED.

00:21:07,850 --> 00:21:11,570
ALSO EXPLORING IS NEVER BORING: UNDERSTANDING CPYTHON WITHOUT READING THE CODE.

00:21:11,570 --> 00:21:15,980
ALLISON KAPTUR IS DOING TWO TALKS THIS AFTERNOON AND BOTH OF THEM ARE PROBABLY WORTH ATTENDING,

00:21:15,980 --> 00:21:17,630
IF THIS IS INTERESTING TO YOU.

00:21:17,630 --> 00:21:19,909
AND THEN TOMORROW, WHERE IN YOUR RAM IS PYTHON SAN

00:21:19,909 --> 00:21:22,720
DIEGO.PY, IT'S GOT A GREAT TITLE AND IT SHOULD BE

00:21:22,720 --> 00:21:23,720
A LOT OF FUN.

00:21:23,720 --> 00:21:29,080
THERE ARE A COUPLE OF TITLES BY FRIENDS WE'RE GOING TO SHOUT-OUT.

00:21:29,080 --> 00:21:31,909
ONE WILL REQUIRE A TIME MACHINE, SECURITY TUTORIAL

00:21:31,909 --> 00:21:38,250
THAT ASHEESH GAVE.

00:21:38,250 --> 00:21:41,910
AND THEN FINDING SPAMMERS AND SCAMMERS THROUGH RATE CHECKING WITH PYTHON AND REDIS.

00:21:41,910 --> 00:21:43,740
MICA AND JAY WORK WITH ME AT EVENTBRITE AND DO

00:21:43,740 --> 00:21:47,580
AMAZING STUFF ON THE INTEGRITY TEAM MAKING SURE

00:21:47,580 --> 00:21:51,260
THAT NOBODY CAN STEAL MONEY OR SPAM EVERYBODY.

00:21:51,260 --> 00:21:54,779
AND I THINK, AT THAT POINT, THAT IS ABOUT IT.

00:21:54,779 --> 00:21:56,649
WE WILL OPEN IT UP FOR QUESTIONS AND THANK YOU

00:21:56,649 --> 00:22:01,059
VERY MUCH FOR COMING.

00:22:01,059 --> 00:22:05,460
[ APPLAUSE ] >> THANK YOU VERY MUCH.

00:22:05,460 --> 00:22:06,460
YOU KNOW THE DRILL FOR QUESTIONS, FOLKS.

00:22:06,460 --> 00:22:10,300
YOU WANT TO LINE UP AT THE MICROPHONE IN THE CENTER OF THE ROOM.

00:22:10,300 --> 00:22:11,799
DO WE HAVE QUESTIONS?

00:22:11,799 --> 00:22:13,039
>> OH, NO.

00:22:13,039 --> 00:22:14,289
>> OH, GREAT.

00:22:14,289 --> 00:22:15,289
>> UH-OH.

00:22:15,289 --> 00:22:17,400
[ Laughter ] >> AUDIENCE: HI, GUYS.

00:22:17,400 --> 00:22:18,640
THANK YOU.

00:22:18,640 --> 00:22:19,880
GREAT TALK.

00:22:19,880 --> 00:22:23,000
THAT WAS VERY VERY GOOD.

00:22:23,000 --> 00:22:24,260
THIS MAY BE UNFAIR QUESTIONS.

00:22:24,260 --> 00:22:26,940
BUT I WONDER IF YOU KNOW ANYTHING ABOUT SOME OF

00:22:26,940 --> 00:22:28,360
THE QUESTIONS THAT HAVE OCCURRED TO ME WHEN I'VE

00:22:28,360 --> 00:22:29,899
BEEN LOOKING INTO THIS STUFF.

00:22:29,899 --> 00:22:32,679
YOU COME ACROSS THE WORD TTY AND PTY AND WHAT IS

00:22:32,679 --> 00:22:33,720
THE DIFFERENCE BETWEEN THOSE?

00:22:33,720 --> 00:22:36,190
THERE ARE LIBRARIES IN THE STANDARD LIBRARIES FOR

00:22:36,190 --> 00:22:37,190
PYTHON.

00:22:37,190 --> 00:22:39,659
IF YOU KNOW THE DIFFERENCE OF THOSE I'M INTERESTED.

00:22:39,659 --> 00:22:41,890
>> WE'LL STOP YOU WITH THAT ONE.

00:22:41,890 --> 00:22:42,940
>> AUDIENCE: OKAY.

00:22:42,940 --> 00:22:43,990
I'LL WAIT.

00:22:43,990 --> 00:22:44,990
>> OKAY.

00:22:44,990 --> 00:22:48,840
SO, WHAT I REALLY SHOULD DO IS IMPORT THEM AND RUN

00:22:48,840 --> 00:22:49,840
HELP ON THEM.

00:22:49,840 --> 00:22:51,370
BUT I'LL TELL YOU WHAT MY GUESS IS FIRST.

00:22:51,370 --> 00:22:54,450
BASED ON -- HOPEFULLY IS BASED ON THINGS YOU MIGHT

00:22:54,450 --> 00:22:56,440
HAVE BEEN ABLE TO INFER FROM THIS TALK.

00:22:56,440 --> 00:23:03,630
SO TTY IS ABOUT HOW TO CHANGE THE CONFIGURATION OF

00:23:03,630 --> 00:23:06,779
THE TERMIOS SUBSYSTEM, SO, FOR EXAMPLE, I REMARKED

00:23:06,779 --> 00:23:10,110
THAT CAT TERMIOS, CLOSES FILE DESCRIPTOR 0 WHEN

00:23:10,110 --> 00:23:13,279
YOU DO CONTROL D. FOR PYTHON, CONTROL D ACTUALLY FLOWS IN AS

00:23:13,279 --> 00:23:14,429
A BYTE SEQUENCE.

00:23:14,429 --> 00:23:15,429
0X04.

00:23:15,429 --> 00:23:18,360
THOSE ARE THE KINDS OF THINGS I IMAGINE YOU COULD

00:23:18,360 --> 00:23:21,900
CHANGE IF YOU DO IMPORT TTY.

00:23:21,900 --> 00:23:25,570
IMPORT TTY MIGHT LET YOU DRAW THINGS AT DIFFERENT LOCATIONS ON THE SCREEN.

00:23:25,570 --> 00:23:30,190
I DON'T KNOW IF IT DOES.

00:23:30,190 --> 00:23:33,710
IMPORT PTY, I IMAGINE WOULD LET YOU CREATE NEW

00:23:33,710 --> 00:23:36,669
VIRTUAL TERMINALS IN THE OPERATING SYSTEM BECAUSE

00:23:36,669 --> 00:23:42,330
PTY REFERS TO THE OPERATING SYSTEM'S ABSTRACT LAYER THAT SIMULATES THE TTYs AND, SO, IT'S

00:23:42,330 --> 00:23:43,880
ABOUT MANIPULATING THEM AT THAT LAYER.

00:23:43,880 --> 00:23:45,360
THAT WOULD BE MY GUESS.

00:23:45,360 --> 00:23:48,010
IF YOU FIND OUT THE ANSWER, THEN LET ME KNOW.

00:23:48,010 --> 00:23:50,260
>> AUDIENCE: THAT SOUNDS CONSISTENT WITH WHAT I

00:23:50,260 --> 00:23:51,260
KNOW.

00:23:51,260 --> 00:23:55,520
THERE'S AN OS DOT 4 SYSTEM.

00:23:55,520 --> 00:23:58,019
SO I GUESS THEY DO SLIGHTLY DIFFERENT THINGS.

00:23:58,019 --> 00:24:05,730
>> YEAH, PRESUMABLY OS DOT 4, THE DIRECT WRAPPER AROUND THE SYSTEM CALL OF FORK.

00:24:05,730 --> 00:24:09,770
AND PTY.FORK DOES SOMETHING USEFUL WITH BREAKING OUT THE TERMINALS.

00:24:09,770 --> 00:24:13,710
>> AUDIENCE: DOES IT START NEW TERMINALS?

00:24:13,710 --> 00:24:14,710
>> NO.

00:24:14,710 --> 00:24:17,470
>> AUDIENCE: THERE IS ALSO A TERMIOS LIBRARY SO

00:24:17,470 --> 00:24:21,289
MAYBE THERE'S SOME DIFFERENCES TO WHAT TTY DOES.

00:24:21,289 --> 00:24:24,799
THE OTHER ONE WAS, YOU KNOW, PIPES.

00:24:24,799 --> 00:24:26,480
I WONDER IF THERE'S ANYTHING YOU CAN TALK TO ABOUT

00:24:26,480 --> 00:24:27,480
THAT.

00:24:27,480 --> 00:24:30,450
BECAUSE WHEN THERE'S AN OS.PIPE CALL IN THE STANDARD LIBRARY.

00:24:30,450 --> 00:24:32,669
AND IT GIVES YOU BACK TWO FILE DESCRIPTORS.

00:24:32,669 --> 00:24:34,960
IN FACT, I THINK THERE'S A SIMILAR THING IN THE

00:24:34,960 --> 00:24:37,900
PTY MODULE IF YOU WANT TO CREATE A NEW PTY, YOU

00:24:37,900 --> 00:24:40,159
GET THREE FILE DESCRIPTORS, I THINK.

00:24:40,159 --> 00:24:41,159
>> RIGHT.

00:24:41,159 --> 00:24:42,559
>> AUDIENCE: THERE'S ONE CALLED A MASTER AND ONE

00:24:42,559 --> 00:24:45,470
CALLED A SLAVE AND I'M VERY CONFUSED.

00:24:45,470 --> 00:24:48,429
>> SO, THIS IS A GREAT TIME FOR ME TO SAY THAT I

00:24:48,429 --> 00:24:52,000
KNEW SO MUCH LESS ABOUT PTYs AND TTYs UNTIL I

00:24:52,000 --> 00:24:58,610
READ NELSON'S BLOG POST SERIES, "AN INTRODUCTION TO TERMIOS."

00:24:58,610 --> 00:25:02,679
WHICH YOU CAN TOTALLY SEARCH FOR IN YOUR FAVORITE SEARCH ENGINE.

00:25:02,679 --> 00:25:06,760
THAT BLOG POST SERIES ANSWERS THIS QUESTION ABOUT

00:25:06,760 --> 00:25:09,990
SLAVE VERSUS MASTER, PTY DEVICES.

00:25:09,990 --> 00:25:18,510
IN SUMMARY, THOUGH, IF YOU ARE WRITING A TERMINAL EMULATOR, LIKE TERMINAL.APP BUT IN PYTHON,

00:25:18,510 --> 00:25:23,100
YOU WOULD NEED TO CREATE A MASTER PTY SO THAT

00:25:23,100 --> 00:25:26,460
YOU CAN THEN PASS THAT OFF TO OTHER PROGRAMS WHEN

00:25:26,460 --> 00:25:27,460
THEY RUN.

00:25:27,460 --> 00:25:29,309
AND WHAT THEY GET ACCESS TO IS THE SLAVE, AS I

00:25:29,309 --> 00:25:30,309
UNDERSTAND IT.

00:25:30,309 --> 00:25:31,309
>> AUDIENCE: RIGHT.

00:25:31,309 --> 00:25:34,350
THESE ARE VERY RELEVANT QUESTIONS IF YOU WERE TRYING TO CREATE A TERMINAL EVENT SUCH AS

00:25:34,350 --> 00:25:35,350
PYTHON ANYWHERE.COM.

00:25:35,350 --> 00:25:38,490
>> I WAS WAITING FOR THE PLUG.

00:25:38,490 --> 00:25:39,490
PYTHONANYWHERE.COM.

00:25:39,490 --> 00:25:42,490
>> AUDIENCE: OH, GOSH, DID THAT HAPPEN?

00:25:42,490 --> 00:25:43,490
IT'S BEEN REALLY GOOD.

00:25:43,490 --> 00:25:44,490
>> THANKS.

00:25:44,490 --> 00:25:45,490
>> ANY OTHER QUESTIONS?

00:25:45,490 --> 00:25:47,929
THANK YOU VERY MUCH, EVERYONE.

00:25:47,929 --> 00:25:48,929
THANK YOU, GENTLEMEN.

00:25:48,929 --> 00:25:48,930

YouTube URL: https://www.youtube.com/watch?v=XVhSjZYwZJo


