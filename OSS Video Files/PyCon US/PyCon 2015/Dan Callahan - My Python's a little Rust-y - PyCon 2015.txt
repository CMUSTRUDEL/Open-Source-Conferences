Title: Dan Callahan - My Python's a little Rust-y - PyCon 2015
Publication date: 2015-04-11
Playlist: PyCon 2015
Description: 
	"Speaker: Dan Callahan

Rust is a new systems programming language from Mozilla that combines strong compile-time correctness guarantees with fast performance... and it plays nice with ctypes! Come learn how you can call Rust functions from Python code and finally say goodbye to hacking C!

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:00,080 --> 00:00:01,080
OUR NEXT TALKER IS DAN CALLAHAN AND HE'S GOING TO

00:00:01,080 --> 00:00:05,950
BE TELLING US ABOUT RUNNING PYTHON APPS ON COREOS.

00:00:05,950 --> 00:00:08,740
>> THANK YOU. MIC?

00:00:08,740 --> 00:00:17,039
THERE WE GO. SO, ANY NAME IS DAN CALLAHAN, I WORK IN DEVELOPER

00:00:17,039 --> 00:00:20,100
RELATIONS FOR MOZILLA, YOU CAN FIND ME ON TWITTER@CALLAHAN.

00:00:20,100 --> 00:00:26,699
TWO YEARS AGO, DOCKER GOT RELEASED AND EVER SINCE, AN ENORMOUS BUZZ AND EXCITEMENT ABOUT

00:00:26,699 --> 00:00:30,560
CONTAINERIZATION ON LINUX. I WON'T TALK ABOUT DOCKER TODAY.

00:00:30,560 --> 00:00:35,660
THERE IS AN ENTIRE TALK ON IT TOMORROW, GO TO IT.

00:00:35,660 --> 00:00:43,750
WHAT I WANT TO TALK ABOUT MORE IS THE IMPACT THAT

00:00:43,750 --> 00:00:45,590
THIS INTEREST IN CONTAINERIZATION RECEIVING ON

00:00:45,590 --> 00:00:50,380
THE REST OF OUR BACK-END SERVER STACK. SO WHAT DOES CONTAIN JURYIZATION CHANGE FOR

00:00:50,380 --> 00:00:51,970
THE WAY WE ARCHITECT OUR HOST MACHINES?

00:00:51,970 --> 00:00:58,900
I'M GOING TO LOOK AT THIS BY EXAMINING A LINUX DISTRIBUTION CALLED COREOS WHICH WAS RELEASED

00:00:58,900 --> 00:01:04,650
ABOUT A YEAR AND A HALF AGO AND IT'S DESIGNED FROM THE GROUND UP TO RUN CONTAINERS.

00:01:04,650 --> 00:01:10,550
NOT THAT YOU NEED A SPECIAL -- TO RUN CONTAINERS BUT BY LOOKING AT A DISTRO THAT WAS DESIGNED

00:01:10,550 --> 00:01:13,310
AS A GREENFIELD EXPERIMENT AND WHAT AN IDEAL HOST

00:01:13,310 --> 00:01:15,670
FOR CONTAINERS WOULD LOOK LIKE, WE CAN SEE THINGS

00:01:15,670 --> 00:01:16,670
TODAY THAT WILL BECOME BEST PRACTICES IN THE NEXT

00:01:16,670 --> 00:01:18,409
FEW YEARS. FROM THOSE OF YOU FROM THE BAY AREA, GREEN

00:01:18,409 --> 00:01:20,979
IS GOING TO BE STARTED ON MONDAY, SO BE READY

00:01:20,979 --> 00:01:21,979
FOR THAT WHEN YOU GET BACK FROM PYCON.

00:01:21,979 --> 00:01:24,820
WHAT ARE WE TRYING TO SOLVE HERE? WHY ARE PEOPLE EXCITED ABOUT CONTAINERS?

00:01:24,820 --> 00:01:28,710
I DON'T DO OPS, I HAVE WEEKEND PROJECTS, I WANT

00:01:28,710 --> 00:01:31,730
TO DEPLOY THEM SOMEWHERE, I WANT A PLATFORM THAT

00:01:31,730 --> 00:01:36,250
WILL STAY UPDATED AUTOMATICALLY, I WANT THAT PLATFORM TO STAY UPDATEd in a day that won't

00:01:36,250 --> 00:01:41,960
break my apps by, you know, upgrading a dependency out from under me and I want a

00:01:41,960 --> 00:01:45,300
platform that will survive outages so it would be

00:01:45,300 --> 00:01:52,450
really fantastic if I get a server and I pulled the plug on it, if I can trust that my

00:01:52,450 --> 00:01:58,580
applications will keep running somewhere else, because if we have those three things, I can

00:01:58,580 --> 00:02:00,880
be lazy and that's ultimately what I'm looking

00:02:00,880 --> 00:02:01,880
for, right?

00:02:01,880 --> 00:02:07,950
But to get there, we need something declarative, we need the ability to say -- declarative,

00:02:07,950 --> 00:02:12,580
we NEED SOMETHING TO SAY ALWAYS KEEP TWO OF THESE

00:02:12,580 --> 00:02:17,300
RUNNING AND DIDN'T PUT THEM ON THE SAME MACHINE. I COULD PROBABLY COBBLE SOMETHING TOGETHER

00:02:17,300 --> 00:02:22,930
THAT GETS ME THERE BUT AT A CERTAIN POINT, YOU

00:02:22,930 --> 00:02:25,700
START KIND OF COLLAPSING UNDER THE WEIGHT OF ALL

00:02:25,700 --> 00:02:27,940
THOSE ORCHESTRATION AND THIS KIND OF RUBE GOLDBERG

00:02:27,940 --> 00:02:30,330
MACHINE OF WHAT'S ONLINE, WHAT'S OFFLINE AND YOU

00:02:30,330 --> 00:02:35,250
DON'T WANT TO TOUCH YOUR SERVERS AND YOU GOT MONTHS AND MONTHS WITH THIS FAITH-BASED DEV-OPS

00:02:35,250 --> 00:02:38,590
THAT I TRUST THINGS WILL BE OKAY AND THEN HEART

00:02:38,590 --> 00:02:42,270
BLEED HAPPENS, AND ALL OF THAT TECHNICAL DECK COMES CRUSHING DOWN.

00:02:42,270 --> 00:02:48,290
SO THE WAY WE GET ON THE OF THAT MORASS, FOR HOBBYISTS LIKE ME, IS MOVING TO SOMETHING

00:02:48,290 --> 00:02:50,970
DECLARATIVE, WHERE WE CAN DEFINE THE STATE WE

00:02:50,970 --> 00:02:53,470
WANT AND TRUST OTHER SYSTEMS ARE GOING TO MAKE

00:02:53,470 --> 00:02:58,950
THAT REALTY. TO DO THAT, WE NEEDS NEW TECHNOLOGY AND WE

00:02:58,950 --> 00:03:02,200
NEED THAT -- NOT BRAND-NEW TECHNOLOGY.

00:03:02,200 --> 00:03:12,750
THIS SORT OF STUFF HAS BEEN THE NORM INSIDE GOOGLE AND AMAZON, Facebook, FOR A WHILE,

00:03:12,750 --> 00:03:17,239
BUT WE NEED SOMEBODY TO TAKE GOOGLE'S SECRET SAUCE

00:03:17,239 --> 00:03:23,569
AND PACKAGE IT IN A WAY WE CAN RUN IT ON OUR OWN

00:03:23,569 --> 00:03:27,690
SERVERS. IN A SENSE, THAT'S WHAT COREOS IS DOING SO,

00:03:27,690 --> 00:03:29,620
WE NEED INNOVATION IN FOUR KEY AREAS.

00:03:29,620 --> 00:03:35,700
WE SEED A BETTER WAY TO HANDLE SYSTEM IS UPDATES. TWO, WE NEED A WAY TO ISOLATE OUR APPLICATIONS

00:03:35,700 --> 00:03:38,940
FROM THE HOST ENVIRONMENT. WE NEED A WAY TO CLUSTER OUR SERVERS TOGETHER

00:03:38,940 --> 00:03:41,620
SO THAT THEY CAN BE REASONED ABOUT AS A SINGLE

00:03:41,620 --> 00:03:46,010
LOGICAL UNIT. AND WE NEED A WAY TO DISTRIBUTE TASKS AMONGST

00:03:46,010 --> 00:03:47,010
THE CLUSTER.

00:03:47,010 --> 00:03:50,420
SO IN THIS TALK, I'M GOING TO LOOK AT HOW COREOS

00:03:50,420 --> 00:03:54,360
SOLVES THOSE PROBLEMS. FOR UPDATES, WE'RE DOING TO LOOK AT FAST PATCH.

00:03:54,360 --> 00:03:56,700
FOR CONTAINERS FOR APPLICATION ISOLATION, LOOK AT

00:03:56,700 --> 00:03:59,209
DOCTOR AND ROCKET. WE'LL LOOK AT A PROJECT CALLED ETCD, AND FOR

00:03:59,209 --> 00:04:01,110
SCHEDULING, THE JOB OF DISTRIBUTING TASKS WE'LL

00:04:01,110 --> 00:04:02,910
LOOK AT FLEET AND... [ Audio Indiscernible ]

00:04:02,910 --> 00:04:05,870
SO WE'LL LOOK AT EACH OFF THESE IN TURN AND SEE

00:04:05,870 --> 00:04:09,099
WHAT THE PROBLEM IS AND WHAT THEY'RE SOLVING AND

00:04:09,099 --> 00:04:12,330
WHAT THEY MEAN FOR SERVERS AND OF OUR APPLICATIONS.

00:04:12,330 --> 00:04:18,529
AND ALL OF THIS IS FREE AND OPEN SOURCE SOFTWARE, SO ONE OF THE THINGS THAT I REALLY ADMIRE

00:04:18,529 --> 00:04:21,019
ABOUT COREOS AS A COMPANY, THEY'VE CONTRIBUTED THINGS

00:04:21,019 --> 00:04:24,870
LIKE ETCD AND FLEET AS TRULY COMMERCIAL PROJECTS. YOU CAN STAND THIS UP TODAY WITHOUT HAVING

00:04:24,870 --> 00:04:26,539
TO ACCEPT PROPRIETARY SOFTWARE, WITHOUT HAVING

00:04:26,539 --> 00:04:27,539
TO PAY A DIME.

00:04:27,539 --> 00:04:29,430
REALLY FANTASTIC. SO DELETES START WITH SYSTEM UPDATES.

00:04:29,430 --> 00:04:33,020
COREOS USES A SYSTEM CALLED FAST PATCH. WHAT THEY'RE TRYING TO DO IS DECREASE THE

00:04:33,020 --> 00:04:35,460
GAP BETWEEN WHEN A PATCH BECOMES AVAILABLE AND

00:04:35,460 --> 00:04:37,610
WHEN IT BECOMES APPLIED TO YOUR SERVERS.

00:04:37,610 --> 00:04:40,669
BECAUSE STAYING UP TO DATE IS KEY TO GOOD SECURITY.

00:04:40,669 --> 00:04:44,039
AS SOON AS A VULNERABLE IS KNOWN, A PATCH IS MADE

00:04:44,039 --> 00:04:45,870
AVAILABLE, YOU'RE BASICALLY RACING, DOZENS OF

00:04:45,870 --> 00:04:49,310
OTHER PEOPLE IN THE WORLD TO SEE IF YOU CAN PATCH

00:04:49,310 --> 00:04:53,289
YOUR SERVERS BEFORE THEY CAN DEVELOP AN AUTOMATED EXPLOIT.

00:04:53,289 --> 00:05:01,259
SO ANYTHING YOU CAN DO TO GO FROM PATCH AVAILABLE TO PATCH APPLIED AS QUICKLY AS POSSIBLE, THE

00:05:01,259 --> 00:05:04,840
BETTER, SO THE FIRST THING COREOS DOES IS THEY'VE

00:05:04,840 --> 00:05:07,460
ADOPTED A BROWSER-STYLE UPDATE MODEL SO YOU HAVE

00:05:07,460 --> 00:05:11,009
CHANNELS, YOU CAN SAY I WANT THE ALPHA, BETA OR

00:05:11,009 --> 00:05:15,280
STABLE RELEASE OF MY OPERATING SYSTEM. IN THE BACKGROUND, UPDATES GET DOWNLOADED

00:05:15,280 --> 00:05:18,729
OPPORTUNISTICALLY, SO A NEW VERSION OF COREOS COMES OUT, IT'S DOWNLOADED.

00:05:18,729 --> 00:05:22,169
NEXT TIME YOU REBOOT, IT'S APPLIED. THE OTHER THING THAT COREOS DOES, THEY TREAT

00:05:22,169 --> 00:05:26,559
THE ENTIRE SYSTEM AS A SINGLE UNIT FOR THE PURPOSE

00:05:26,559 --> 00:05:27,559
OF UPDATES.

00:05:27,559 --> 00:05:28,559
SO WHAT THIS LOOKS LIKE IS WHEN YOU BOOT INTO A

00:05:28,559 --> 00:05:29,559
COREOS MACHINE, YOU HAVE THREE PARTITIONS, AN A

00:05:29,559 --> 00:05:31,550
PARTITION, AND A B, BOTH OF WHICH HOLD THE COREOS

00:05:31,550 --> 00:05:34,559
SYSTEM AND YOU HAVE A DATA PARTITION FOR YOUR OWN

00:05:34,559 --> 00:05:37,550
STUFF. THESE ARE MOUNTED ADD READ-ONLY SO YOU CAN

00:05:37,550 --> 00:05:40,889
FLIP-FLOP BETWEEN THEM. WHEN AN UPDATE BECOMES AVAILABLE, A DAMON

00:05:40,889 --> 00:05:44,349
THAT HAS NICE LIMITS ON HOW MUCH BAND WIDTH AND

00:05:44,349 --> 00:05:47,029
CPU TO USE WILL DOWNLOAD THE UPDATES, APPLY IT TO

00:05:47,029 --> 00:05:48,029
THE PARTITION.

00:05:48,029 --> 00:05:49,139
THE UPDATES ARE EFFECTIVELY ENTIRE SYSTEM IMAGES,

00:05:49,139 --> 00:05:50,610
YOU GET A WHOLE NEW ISO BASICALLY EVERY TIME AN

00:05:50,610 --> 00:05:52,559
UPDATE COMES OUT. THAT UPDATE GETS APPLIED AND THE NEXT TIME

00:05:52,559 --> 00:05:55,900
YOU REBOOT, YOU'RE RUNNING SYSTEM B WITH THAT

00:05:55,900 --> 00:06:00,309
UPDATE AND YOU HAVE YOUR DATA IN THE DATA PARTITION.

00:06:00,309 --> 00:06:07,719
THIS HAS A COUPLE OF REALLY NICE PROPERTIES. ONE IS THAT FOR WHATEVER REASON, IF THAT UPDATE'S

00:06:07,719 --> 00:06:11,389
BAD, YOU CAN REBOOT AGAIN AND YOU'RE BACK INTO A,

00:06:11,389 --> 00:06:15,919
INTO A KNOWN GOOD STATE, RIGHT? SOME HAVE UPDATES THAT ARE RECOVERABLE, YOU

00:06:15,919 --> 00:06:17,310
CAN ROLL BACK ON.

00:06:17,310 --> 00:06:20,789
THE OTHER NICE PROPERTY OF THE SYSTEM IS THAT THE

00:06:20,789 --> 00:06:23,819
UPDATES ARE AUTUMN MICK AND WHAT THAT MEANS IS

00:06:23,819 --> 00:06:26,219
INSTEAD OF GOING PACKAGE BY PACKAGE, LIKE YUM,

00:06:26,219 --> 00:06:30,309
WHERE A POWER OUTAGE HAPPENED HALFWAY THROUGH YOUR UPDATE, YOU MIGHT BE LIFT IN AN INCONSISTENT

00:06:30,309 --> 00:06:32,409
STATE. WITH COREOS EITHER THE WHOLE UPDATE GOT APPLIED

00:06:32,409 --> 00:06:35,889
OR NOTHING, WHICH IS REALLY IMPORTANT WHEN YOU'RE

00:06:35,889 --> 00:06:39,289
DEALING WITH AUTOMATIC REBOOTS OF YOUR SERVERS, RIGHT?

00:06:39,289 --> 00:06:40,369
YOU WANT TO KNOW THAT YOU'RE NOT GOING TO HAVE AN

00:06:40,369 --> 00:06:43,110
ADVERSE EVENT LEAVE YOU COMPLETELY BROKEN. SO WE'VE GOT A SERVER, IT'S RUNNING OUR APP.

00:06:43,110 --> 00:06:48,479
THE SERVER IS RUNNING COREOS. AND YOU'RE PROBABLY THINKING TO YOURSELF,

00:06:48,479 --> 00:06:51,719
WAIT A SECOND, DAN, MY SERVER IS REBOOTING ON ITS

00:06:51,719 --> 00:06:54,199
OWN, HOW DO I KEEP MY APP ONLINE?

00:06:54,199 --> 00:06:56,979
NAIVE ANSWER IS, LET'S JUST ADD ANOTHER SERVER, RIGHT?

00:06:56,979 --> 00:07:02,960
WE HAVE TWO SERVERS, WE SHOULD BE OKAY, EXCEPT WHAT'S CAUSING THE SERVER TO REBOOT?

00:07:02,960 --> 00:07:09,699
AN UPDATE BECOMES AVAILABLE, THE SERVER NOTICES IT, DOWNLOADS IT, BOTH THE SERVERS WILL SIGH

00:07:09,699 --> 00:07:10,699
THE UPDATE AT THE SAME TIME.

00:07:10,699 --> 00:07:13,749
SO NOW BOTH YOUR SERVERS ARE REBOOTING AT THE

00:07:13,749 --> 00:07:18,009
SAME TIME. HOW DO YOU KEEP YOUR APP ONLINE?

00:07:18,009 --> 00:07:22,259
[ Laughter ] RIGHT, WE CAN JUST ADD INCREASINGLY MORE SERVERS

00:07:22,259 --> 00:07:25,810
UNTIL, LIKE, WE PROBABLY WON'T HAVE THEM ALL OFF

00:07:25,810 --> 00:07:28,419
AT THE SAME TIME. A BETTER SOLUTION MIGHT BE TO INTRODUCE

00:07:28,419 --> 00:07:29,840
CONSENSUS, INTRODUCE INCLUDES TIERING AND WE'RE

00:07:29,840 --> 00:07:33,719
GOING TO DO THAT WITH A TOOL CALLED ETCD, BUNDLED

00:07:33,719 --> 00:07:38,189
WITH COREOS. IT'S A KEY VALUE STORE AND IT GIVES US A PLACE

00:07:38,189 --> 00:07:41,449
WHERE IF WE STAND UP A THIRD CLUSTER, IT'S A

00:07:41,449 --> 00:07:46,949
PLACE TO STORE META DATA ABOUT THE CLUSTER. SO WE HAVE THREE SERVERS, ONE FOR ETCD AND

00:07:46,949 --> 00:07:48,779
TWO FOR THE APP.

00:07:48,779 --> 00:07:54,180
ON TOP OF THIS CENTRAL PLACE OF HISTORIC CONFIGURATION, COREOS BUILDS A TOOL CALLED

00:07:54,180 --> 00:07:57,229
LOCK SCHMIDT, SO WHENEVER A SERVER WANTS TO UPDATES

00:07:57,229 --> 00:08:00,270
TO REBOOT ITSELF, IT HAS TO ACQUIRE A LOCK FROM

00:08:00,270 --> 00:08:03,959
ETCD, AND WHEN IT COMES BACK UP AFTER THE UPDATE,

00:08:03,959 --> 00:08:09,449
IT RELATES THE LOCK. SO THIS MEANS YOU CAN GOVERN THE RATE AT WHICH

00:08:09,449 --> 00:08:15,479
UPDATES ROLL OUT ACROSS YOUR CLUSTER BY LIMITING THE NUMBER OF LOCKS AVAILABLE.

00:08:15,479 --> 00:08:20,669
IT ALSO MEANS THAT IF AN UPDATE COMES OUT THAT'S

00:08:20,669 --> 00:08:25,639
BAD THAT YOUR HARDWARE WON'T BOOT FROM, A SERVER

00:08:25,639 --> 00:08:31,360
WILL GRAB A LOCK, ATTEMPT TO REBOOT, IT WON'T COME BACK UP SO IT WILL NEVER RELEASE THAT

00:08:31,360 --> 00:08:32,960
LOCK WHICH MEANS YOU CAN'T HAVE A CASCADING FAILURE

00:08:32,960 --> 00:08:36,160
DUE TO A BAD UPDATE. LET'S LOOK AT WHAT THAT LOOKS LIKE.

00:08:36,160 --> 00:08:39,100
SO I'VE GOT TWO COREOS VIRTUAL MACHINES AND I'VE

00:08:39,100 --> 00:08:42,700
GOT LOCKSMITH AND I CAN LOOK AT STATUS AND I SEE

00:08:42,700 --> 00:08:50,290
THAT I HAVE ONE LOCK AVAILABLE OUT OF A MAXIMUM OF ONE, SO I CAN GO AHEAD AND SAY, "LOCK."

00:08:50,290 --> 00:08:53,880
IF I LOOK AT THE STATUS AGAIN, WE CAN SEE THIS

00:08:53,880 --> 00:08:57,470
MACHINE HAS ACQUIRED A LOCK AND IS NOW CLEARED TO

00:08:57,470 --> 00:09:01,260
REBOOT. IF I TRY TO LOCK ON THIS OTHER MACHINE OR

00:09:01,260 --> 00:09:03,320
ACQUIRE A LOCK OVER HERE...

00:09:03,320 --> 00:09:06,960
I GET AN ERROR BECAUSE THERE AREN'T ANY MORE LOCKS AVAILABLE.

00:09:06,960 --> 00:09:20,930
THIS SERVER HAS TO RELEASE THE LOCK FIRST. AND SO ALL THIS IS DOING IS WRITING AND READING

00:09:20,930 --> 00:09:28,200
FROM A KEY IN ETCD. SAY S FOR CURSIVE AND WE HAVE THIS LEAFLET

00:09:28,200 --> 00:09:31,210
HERE, THAT IF WE SAY "ETCD CONTROL, GET JOBS, A

00:09:31,210 --> 00:09:32,210
JSON DOCUMENT."

00:09:32,210 --> 00:09:35,540
ZERO SUM AVAILABLE IS AVAILABLE WITH A MAXIMUM, THIS MACHINE I.D. IS HOLDING IT.

00:09:35,540 --> 00:09:39,140
SO WITH ETCD WE CAN COME OVER HERE AND SAY, WATCH

00:09:39,140 --> 00:09:40,750
FOREVER. THAT KEY.

00:09:40,750 --> 00:09:45,180
AND NOW WE'LL BE NOTIFIED WHEN IT CHANGES. SO IF I UNLOCK THIS SERVER, WE SEE THE UPDATED

00:09:45,180 --> 00:09:48,140
DOCUMENT. IF I RELOCK, SO REALLY NICE WAY TO GET NOTIFIED

00:09:48,140 --> 00:09:51,480
OF CHANGES TO YOUR CLUSTER CONFIGURATION, RIGHT?

00:09:51,480 --> 00:09:54,640
SO WHEN THE LOCK IS AVAILABLE, THE SERVER CAN GET

00:09:54,640 --> 00:09:58,060
ONE. REBOOT AND WE WOULD ALL BE IN A REALLY GOOD

00:09:58,060 --> 00:10:00,860
PLACE. DOES THIS SOLVE OUR PROBLEM OF OUR SERVERS

00:10:00,860 --> 00:10:01,860
REBOOTING? YES?

00:10:01,860 --> 00:10:03,970
NO. GUESS WHAT'S ALSO RUNNING COREOS, THE ETCD

00:10:03,970 --> 00:10:05,830
SERVER. THAT'S REBOOTING ON ITS OWN.

00:10:05,830 --> 00:10:09,250
HOW DO I KEEP MY APP ONLINE? RIGHT, ADD ANOTHER SERVER.

00:10:09,250 --> 00:10:14,190
SO YOU MAY BE SENSING A THEME. WE HAVE A SERVER, AND THEN WE WANT MORE.

00:10:14,190 --> 00:10:21,210
AND YOU JUST KEEP GETTING MORE. SO THE NICE THING ABOUT ETCD IS THAT WE HAVE

00:10:21,210 --> 00:10:23,570
THE SINGLE POINT OF FAILURE TO GET AWAY FROM THAT,

00:10:23,570 --> 00:10:27,710
R.THAT, WE NEED TO DISTRIBUTES THAT AND IT'S DESIGNED TO BE DISTRIBUTED.

00:10:27,710 --> 00:10:29,050
IT'S AN IMPLEMENTATION OF A SYSTEM DESCRIBED IN

00:10:29,050 --> 00:10:31,750
THE CHUBBY PAPER BY GOOGLE. THE MAIN DIFFERENCE IS ETCD USES A CONSENSUS

00:10:31,750 --> 00:10:35,110
ALGORITHM CALLED RAFT. IT'S EASIER TO IMPLEMENT, HAS IDENTICAL FAULT

00:10:35,110 --> 00:10:39,280
TOLERANCE AND PERFORMANCE CHARACTERISTICS. IN ENGLISH, THAT MEANS THAT YOU CAN TAKE THIS

00:10:39,280 --> 00:10:45,090
SYSTEM AND FOR DEVELOPMENT AND TESTING, IT'S FINE, YOU CAN DO THIS, RUN IT ON THE SAME

00:10:45,090 --> 00:10:46,640
THING BUT IF YOU'RE GOING TO PRODUCTION AND WANT

00:10:46,640 --> 00:10:50,250
TO KEEP THE STUFF ONLINE FOR REAL, YOU CAN SET

00:10:50,250 --> 00:10:53,330
UP A CLUSTER OF ETCD NODES.

00:10:53,330 --> 00:10:58,350
WE HAVE FOUR MORE SERVERS. >> GENERALLY YOU WANT TO KEEP THE CLOSE TIER

00:10:58,350 --> 00:11:00,630
A STATIC SIZE, LIKE THREE TO FIVE SHOULD BE

00:11:00,630 --> 00:11:04,690
FINE AND THE NICE THING ABOUT THAT IS BECAUSE OF

00:11:04,690 --> 00:11:07,450
THE CONSENSUS ALGORITHM, BECAUSE THE MAJORITY

00:11:07,450 --> 00:11:11,820
OF THE NODES ARE ONLINE AND CAN SEE EACH OTHER, THE

00:11:11,820 --> 00:11:14,800
CLUSTER WILL KEEP WORKING. SO WITH FIVE NODES, TWO WILL FAIL AND THE

00:11:14,800 --> 00:11:17,700
CLUSTER WILL WORK AS IF NOTHING HAD HAPPENED.

00:11:17,700 --> 00:11:19,790
AND THIS SORT OF ARCHITECTURE CAN SUPPORT TENS,

00:11:19,790 --> 00:11:21,330
HUNDREDS, THOUSANDS OF WORKER SERVERS, SO THIS IS

00:11:21,330 --> 00:11:24,120
WHAT YOU WOULD WANT TO GO TO PRODUCTION WITH IF

00:11:24,120 --> 00:11:26,750
YOU HAD, SAY, A BUNCH OF ETCD SPOT INSTANCES, YOU

00:11:26,750 --> 00:11:34,160
WOULD HAVE THOSE ON ONE SIDES AND THE MORE PERSISTENT SET OF THE NODES TO HELP COORDINATE

00:11:34,160 --> 00:11:35,450
THE CLUSTER. EVERYONE FOLLOW?

00:11:35,450 --> 00:11:38,350
CLUSTERS, YEAH, DISTRIBUTE SYSTEMS, EVERYTHING BREAKS IN INTERESTING WAYS.

00:11:38,350 --> 00:11:43,330
FOR THESE DEMOS, I'M GOING TO SET UP A 3-NODE CLUSTER USING A VOLUME VIRTUAL MACHINE.

00:11:43,330 --> 00:11:49,400
I'M RUNNING ETCD AND APPS ON THE SAME NODES. YOU COULD THEORETICALLY GO TO PRODUCTION WITH

00:11:49,400 --> 00:11:52,580
THIS BUT YOU DON'T WANT TO BECAUSE YOU CAN'T IN

00:11:52,580 --> 00:11:58,200
THIS SORT OF SYSTEM EASILY DROP AND AND OTHER WORKER NODES, RIGHT?

00:11:58,200 --> 00:12:01,270
IT'S MUCH BETTER TO KEEP THOSE SEPARATE, BUT FOR

00:12:01,270 --> 00:12:04,580
DEMONSTRATION, WE'RE GOOD TO GO. THE NICE THING ABOUT ETCD, WHILE IT'S BUNDLED

00:12:04,580 --> 00:12:09,260
WITH COREOS, IT'S INDEPENDENTLY -- IT'S BEEN ADOPTED BY THE GOOGLE SCHEDULES, BY VULCAN

00:12:09,260 --> 00:12:12,770
D PROXY AND SEEING ACTUAL COLLABORATION AND

00:12:12,770 --> 00:12:14,190
REUSE. COOL TECHNOLOGY, RIGHT?

00:12:14,190 --> 00:12:17,410
BUT WE HAVEN'T TALKED ABOUT HOW WE'RE GOING TO

00:12:17,410 --> 00:12:20,980
RUN OUR APPS ON THIS THING, JUST TALKED ABOUT HOW

00:12:20,980 --> 00:12:24,200
WE'RE GOING TO STOP THE SERVERS FROM REBOOTING AT

00:12:24,200 --> 00:12:26,050
THE SAME TIME WHICH IS AN IMPORTANT PROBLEM, BUT

00:12:26,050 --> 00:12:28,800
THAT DOESN'T ACTUALLY MAKE US ANY MONEY OR LET US

00:12:28,800 --> 00:12:31,280
SHOW OFF OUR SIDE PROJECT OR ANYTHING LIKE THAT.

00:12:31,280 --> 00:12:33,780
THE REASON THAT COREOS IS ABLE TO DO FULL SYSTEM

00:12:33,780 --> 00:12:38,090
STYLE UPDATES IS THAT THEY MAKE THE OPERATING SYSTEM EXTREMELY BARE BONES SO THE WHOLE ISO

00:12:38,090 --> 00:12:39,090
IS 140 MEGABYTES.

00:12:39,090 --> 00:12:42,270
WHICH MEANS THERE'S NO ROOM FOR PYTHON, PERL, RUBY, JAVASCRIPT.

00:12:42,270 --> 00:12:47,020
THE BASE SYSTEM IS NOW AT READ-ONLY SO YOU CAN'T

00:12:47,020 --> 00:12:52,330
EVEN MUCK WITH THINGS LIKE USER BEN. SO WHAT DO YOU DO, HOW DO YOU RUN ANYTHING?

00:12:52,330 --> 00:12:55,770
USE CONTAINERS. SO CONTAINERS AT A VERY HIGH LEVEL ARE SOMEWHERE

00:12:55,770 --> 00:12:58,830
BETWEEN A REALLY LIGHTWEIGHT VIRTUAL MACHINE OR A

00:12:58,830 --> 00:13:02,920
REALLY HEAVY WEIGHT CHROOT. THE IDEA IS THAT INSTEAD OF A VIRTUAL MACHINE

00:13:02,920 --> 00:13:06,920
WHERE YOU COME TO A HOST AND SAY HERE IS AN ENTIRE SOFTWARE-BASED DEFINITION OF A WHOLE

00:13:06,920 --> 00:13:14,490
COMPUTER THAT I WANT YOU TO EMULATE, WITH A

00:13:14,490 --> 00:13:15,490
CONTAINER, DESIRING HERE IS A FILE SYSTEM, RUN

00:13:15,490 --> 00:13:16,490
THAT PROGRAM AND KEEP IT ISOLATED FROM OTHER THINGS.

00:13:16,490 --> 00:13:18,480
THANKS. AND YOU'RE TRUSTING THE HOST SYSTEM TO PROVIDE

00:13:18,480 --> 00:13:23,660
THE ISOLATION, TO PROVIDE THE KERNEL AND YOU GET

00:13:23,660 --> 00:13:26,750
THE ACCOUNTING AND THE MANAGEMENT SOMETIME OF A

00:13:26,750 --> 00:13:30,840
VIRTUAL MACHINE BUT YOU GET MUCH BETTER DENSITY, MUCH BETTER PERFORMANCE BECAUSE EVERY CONTAINER

00:13:30,840 --> 00:13:35,220
ON THAT HOST IS SHARING THE SAME KERNEL. IT'S -- IT'S MUCH MORE LIKE LAUNCHING A LOCAL

00:13:35,220 --> 00:13:37,710
PROCESS THAN EMULATING AND BOOTING A WHOLE MACHINE.

00:13:37,710 --> 00:13:40,210
AND THIS HAS A LOT OF BENEFITS. DOCKER KINDS OF POPULARIZED THIS IN THE LIE

00:13:40,210 --> 00:13:44,410
NICKS WORLD BUT THIS IDEA HAS BEEN AROUND FOR A

00:13:44,410 --> 00:13:45,410
LONG TIME.

00:13:45,410 --> 00:13:49,440
FREEBIE S DHAD JAILS BACK IN 1999, WHICH IS THE

00:13:49,440 --> 00:13:53,630
SAME THING. WE'RE ONLY SEEING THE BUZZ NOW BECAUSE LINUS

00:13:53,630 --> 00:13:57,400
ADDED A FEATURE CALLED SEA GROUPS TO GIVE SIMILAR

00:13:57,400 --> 00:14:00,760
ISOLATION, AND ONLY TWO YEARS SINCE DOCKER SHOWED

00:14:00,760 --> 00:14:08,400
UP AND SAID WE HAVE THIS CAPABILITY, WE SHOULD WRAP IT UP IN A HIGH LEVEL INTERTASTE MAKES

00:14:08,400 --> 00:14:10,500
IT USABLE AND FIND A SERIALIZATION FORMAT THAT

00:14:10,500 --> 00:14:13,000
WE CAN ACTUALLY BUILD AN IMAGE HERE AND SHARE

00:14:13,000 --> 00:14:14,000
IT SOMEWHERE ELSE.

00:14:14,000 --> 00:14:16,450
COREOS SHIPS TWO CONTAINERS RUN TIMES, YOU HAVE

00:14:16,450 --> 00:14:18,530
DOCKER AND ONE OF THEIR OWN DESIGN CALLED ROCKET,

00:14:18,530 --> 00:14:21,760
THAT'S DESIGNED TO BE MORE MINIMAL. THEY'VE TRIED TO USE ROCKET TO NARROW IN ON

00:14:21,760 --> 00:14:23,640
A DEV SPACE, AN INTEROPERABLE SPECIFICATION FOR

00:14:23,640 --> 00:14:27,029
CERTAINLYIZING CONTAINERS. DOCKER IS MORE INTERESTED IN WE HAVE A WORKING

00:14:27,029 --> 00:14:32,250
IMPLEMENTATION SUPPLY SOURCE, LET'S GO FROM THERE.

00:14:32,250 --> 00:14:35,090
IT GETS DRAMATIC AND POLITICAL. THEY BOTH DO THE SAME THING, EFFECTIVELY.

00:14:35,090 --> 00:14:39,150
SO HOW DOES THIS ACTUALLY WORK IN PRACTICE? LET'S COME OVER HERE.

00:14:39,150 --> 00:14:44,160
WOW, THAT WAS A COOL SOUND. THAT WASN'T ME, WAS IT?

00:14:44,160 --> 00:14:51,950
ALL RIGHT, SO I'M SHELLED INTO ONE OF MY CORE MACHINES AND I'VE GOT A REALLY BASIC PYRAMID

00:14:51,950 --> 00:14:55,140
APPLICATION. SO THERE'S MY HELLO WORLD, DON'T READ IT,

00:14:55,140 --> 00:14:58,890
IT'S UGLY, FROM THERE, FROM THE TUTORIAL, I DON'T

00:14:58,890 --> 00:15:02,640
KNOW QUITE ALL THAT MUCH ABOUT PYRAMID THOUGH IT'S

00:15:02,640 --> 00:15:06,270
LOOKING NICE. I'VE GOT MY REQUIREMENT ON TCP WHICH SAYS

00:15:06,270 --> 00:15:09,890
IT EQUALS 514, AND THEN I'VE GOT A DOCKER FILE

00:15:09,890 --> 00:15:13,270
THAT'S BASIC, SAYS FROM PYTHON 343 ON BUILD AND

00:15:13,270 --> 00:15:18,610
COMMAND IS PYTHON 3 HELLO.PI. SO WHAT DOCKER LETS YOU DO IS LETS YOU CREATE

00:15:18,610 --> 00:15:24,690
THIS HIERARCHY OF SYSTEM IMAGES. IF WE LOOK AT DOCKER IMAGES TREE, SO WE CAN

00:15:24,690 --> 00:15:27,290
SEE THAT THERE IS THIS IMAGE AT THE TOP AND A

00:15:27,290 --> 00:15:29,070
DESCEND NOT FROM IT IS THIS PYTHON ON BUILD IMAGE

00:15:29,070 --> 00:15:31,460
AND THEN THERE'S MY APP AT THE BOTTOM THAT HE

00:15:31,460 --> 00:15:35,460
BUILT BEFOREHAND IN CASE THE NETWORK WENT DOWN.

00:15:35,460 --> 00:15:40,350
SO WHAT THIS ON BUILD IMAGE IS, IT EMULATES A

00:15:40,350 --> 00:15:42,310
HEROKU BUILD PACK, SO WHEN I TRY TO BUILD THIS,

00:15:42,310 --> 00:15:45,850
I'M GOING TO RUN INSTALL ON ITS, COPY IT IS SOURCE CODE INTO USER SOURCE APP AND THE IMAGE

00:15:45,850 --> 00:15:46,850
IS BUILT.

00:15:46,850 --> 00:15:48,580
NOW WE CAN SAY, DOCKER RUNNING, AND WE'LL MAP

00:15:48,580 --> 00:15:53,620
PORT 8020 PORT 8080 IN THE CONTAINER AND RUNNING THE CONTAINER IN MY APP.

00:15:53,620 --> 00:15:57,190
IS THERE WE GO. SO NOW IF I COME BACK OFF HERE, BAM, HELLO

00:15:57,190 --> 00:16:00,500
WORLD. I HAVE I'VE GOT AN APP RUNNING CONTAINER,

00:16:00,500 --> 00:16:01,500
HELLO, PYCON.

00:16:01,500 --> 00:16:06,750
LIKE THERE'S REAL SOFTWARE RUNNING IN A CONTAINER RIGHT NOW AND THAT'S NOT SUPER IMPRESSIVE,

00:16:06,750 --> 00:16:08,550
EVEN THOUGH YOU CLAPPED SO YOU'RE VERY NICE.

00:16:08,550 --> 00:16:10,970
INSTEAD OF RUNNING THAT COMMAND, LET'S RUN BASH.

00:16:10,970 --> 00:16:14,560
OH, EXIT -- LOOK HOW FAST I CAN START AND STOP

00:16:14,560 --> 00:16:21,690
CONTAINERS, CAN'T DO THAT WITH A VM. EVERY TIME I INVOKE THAT COMMAND, BASH WAS

00:16:21,690 --> 00:16:26,620
CREATED INSIDE A COPY -- A FILE SYSTEM SNAPSHOT FROM THIS CONTAINER, HAD ISOLATION FROM OTHER

00:16:26,620 --> 00:16:33,230
THINGS IN THE PROCESS, OR IN THE OPERATING SYSTEM, JUST LIKE YOU WOULD EXPECT WITH A

00:16:33,230 --> 00:16:34,230
VIRTUAL MACHINE.

00:16:34,230 --> 00:16:38,029
BUT WAY LIGHTER WEIGHT. SO IF I LOOK AROUND IN HERE, THERE'S MY APP,

00:16:38,029 --> 00:16:40,470
THIS LOOKS LIKE A -- AN INSTALL, GOT AN APP KIT,

00:16:40,470 --> 00:16:42,550
GOT AN ETCD DEBIAN SYSTEM, AND I LOOK LIKE I'M

00:16:42,550 --> 00:16:46,830
IN A DEBIAN SYSTEM EVEN THOUGH I'M ON A COREOS

00:16:46,830 --> 00:16:48,920
SYSTEM. THIS IS A HUGE BENEFIT FOR CONTAINERS, YOU

00:16:48,920 --> 00:16:52,310
CAN DEVELOP A CONTAINER LOCALLY AND THEN DEPLOY

00:16:52,310 --> 00:16:55,120
THAT ON FEDORA OR RED HAT AND DOESN'T MATTER, AS

00:16:55,120 --> 00:16:58,180
LONG AS YOU'RE USING MODERN LINUX AND HOSTING ON

00:16:58,180 --> 00:17:01,590
MODERN LINUX, IT WILL JUST RUN, WHICH IS REALLY FANTASTIC.

00:17:01,590 --> 00:17:06,350
WE HAVEN'T TALKED ABOUT -- I'M GOING IN AND MANUALLY RUNNING THINGS, THAT DOESN'T SCALE.

00:17:06,350 --> 00:17:12,480
WE WANT TO GET TO THE NICE DECLARATIVE PLACE WHERE WE CAN SEE KEEP TWO RUNNING BUT NOT

00:17:12,480 --> 00:17:15,339
ON THE SAME MACHINE AND THAT REQUIRES SOMETHING AKIN

00:17:15,339 --> 00:17:18,389
TO A CLUSTER LEVEL NET SYSTEM.

00:17:18,389 --> 00:17:22,169
IF WE'RE DEALING WITH A SINGLE SERVER, WE HAVE

00:17:22,169 --> 00:17:25,730
THINGS TO USE. BUT WE'RE NOT DEALING WITH A SINGLE SYSTEM

00:17:25,730 --> 00:17:28,639
ANYMORE. SO THERE ARE TWO SCHEDULERS THAT WORK REALLY

00:17:28,639 --> 00:17:31,559
WELL WITH COREOS, GETS BOUNDS HE WOULD WITH ONE

00:17:31,559 --> 00:17:34,149
CALLED FLEET THAT'S BASIC AND ONE CALLED CUBER.NETS,

00:17:34,149 --> 00:17:40,450
BY -- THAT'S SUPER COMPLEX, IF YOU GOT MILLIONS OF SERVERS AND YOU'RE TRYING TO EEK OUT EVERY

00:17:40,450 --> 00:17:42,799
PERCENT OF EFFICIENCY, YOU WANT KUBERNETES. THE...

00:17:42,799 --> 00:17:44,580
[ Audio Indiscernible ] COREOS IS COMMERCIAL OFFERING, TECTONIC USES

00:17:44,580 --> 00:17:46,240
KUBERNETES, BUT, AGAIN, YOU KNOW, AND BOTH OF

00:17:46,240 --> 00:17:49,999
THESE ARE BUILT ON ETCD. SO ANOTHER PATTERN, LIKE IT'S NOT NECESSARILY

00:17:49,999 --> 00:17:52,090
SCHEDULING OR ANY OTHER THING THAT GIVES US HIGH

00:17:52,090 --> 00:17:57,960
AVAILABILITY, ALL THIS COMES DOWN TO IS HAVING CONSENSUS ON THE NETWORK, HAVING THAT ONE

00:17:57,960 --> 00:18:03,249
PLACE ETCD WHERE WE CAN AGREE ON WHAT THE STATE

00:18:03,249 --> 00:18:05,710
OF ALL THE MACHINES ARE.

00:18:05,710 --> 00:18:09,610
SO FLEET, FLEET'S SIMPLE. A CLUSTER INTERFACE FOR SYSTEM C.D.

00:18:09,610 --> 00:18:14,409
IF YOU HAVE -- YOU PROBABLY DON'T LIKE IT. UNFORTUNATELY, EVERY MAJOR DISTRIBUTION KIND

00:18:14,409 --> 00:18:15,409
OF SEEMS TO LIKE IT.

00:18:15,409 --> 00:18:18,100
AND SO WHAT SYSTEMD DOES IS LET YOU WRITE WITHIN

00:18:18,100 --> 00:18:23,999
ITS FILES THAT LOOK LIKE THIS, WHERE YOU SEE HERE'S MY APP, IT REQUIRES DOCKER, BEFORE

00:18:23,999 --> 00:18:27,379
IT STARTS, GO TRY TO KILL ANY OTHER VERSIONS

00:18:27,379 --> 00:18:28,700
OF IT AND REMOVE THEM.

00:18:28,700 --> 00:18:35,350
WHEN IT STARTS, GO AND RUN THIS THING. JUST LIKE YOU SAW ME RUN ON THE COMMAND LINE,

00:18:35,350 --> 00:18:42,380
DOCKER RUN, AND USE DOCKER STOP TO KILL IT. EVERYTHING UP HERE IS A NORMAL SYSTEM FILE.

00:18:42,380 --> 00:18:48,570
WHAT FLEET ADDS IS THIS LITTLE X FLEET SECTION AT

00:18:48,570 --> 00:18:53,190
THE BOTTOM, WHICH CAN HAVE THINGS LIKE CONFLICTS MY APP, AT STARS, DOT SERVICE.

00:18:53,190 --> 00:18:57,570
THIS IS THE THING THAT TELLS FLEET NOT TO PUT TWO

00:18:57,570 --> 00:19:00,610
OF THESE ON THE SAME MACHINE. AND YOU HAVE OTHER CONSTRAINTS AVAILABLE,

00:19:00,610 --> 00:19:04,149
TOO. YOU CAN SAY PUT THIS ON A SPECIFIC MACHINE

00:19:04,149 --> 00:19:07,480
RUNNING ANOTHER CONTAINER OR PUT IT ON A SPECIFIC MACHINE BY I.D., OR BASED ON META DATA.

00:19:07,480 --> 00:19:11,600
YOU CAN SAY, MAKE THIS GLOBAL, RUN IT ON EVERY MACHINE THAT'S AVAILABLE.

00:19:11,600 --> 00:19:15,039
SO WE HAVE ALL THAT. LET'S LOOK WHAT IT LOOKS LIKE IN PRACTICE.

00:19:15,039 --> 00:19:19,380
SO I HAVE THIS SERVICE FILE. IT'S JUST WHAT YOU SAW BEFORE.

00:19:19,380 --> 00:19:22,230
AND I'M GOING TO INSPECT MY FLEET CLUSTER, SO

00:19:22,230 --> 00:19:24,590
LET'S LIST MACHINES. SO I'VE GOT THREE SERVERS.

00:19:24,590 --> 00:19:27,300
LIST UNITS. THERE IS NOTHING RUNNING ON THEM RIGHT NOW.

00:19:27,300 --> 00:19:31,660
SO LET'S TAKE THIS UNIT FILE AND SAY, FLEET CONTROL SUBMIT, MY APP SERVICE.

00:19:31,660 --> 00:19:41,779
THE @ SYMBOL IS A TEMPLATE, SO, SAYS, HEY, REPLACE LIKE THIS I WITH THE NUMBER OF THE

00:19:41,779 --> 00:19:47,490
THING YOU'RE RUNNING.

00:19:47,490 --> 00:19:49,440
SO IF WE START ONE, IT WILL BE ONE, IF WE START

00:19:49,440 --> 00:19:54,490
ANOTHER ONE, THAT WILL BE 2. SO WHAT SUBMIT DOES IS IT TAKES THAT FILE

00:19:54,490 --> 00:19:58,270
AND STORES IT IN THE ETCD CLUSTER.

00:19:58,270 --> 00:20:03,999
ETCD CONTROL LS CURSIVE, COREOS.COM. SO, LET'S SEE.

00:20:03,999 --> 00:20:12,190
THAT LOOKS LIKE IT. SO IF WE SAY ETCD CONTROL, GET THAT, BAM,

00:20:12,190 --> 00:20:15,340
THERE IS OUR UNIT FILE.

00:20:15,340 --> 00:20:20,779
IT'S GOT A HASH WHICH POINT TO THIS. AND THERE IT IS.

00:20:20,779 --> 00:20:25,240
YOU ALSO SEE FLEET KEEP TRACK OF THE VARIOUS MACHINES AVAILABLE.

00:20:25,240 --> 00:20:30,909
BUT WE'RE NOT ACTUALLY RUNNING THIS YET, JUST MADE IT AVAILABLE TO THE CLUSTER.

00:20:30,909 --> 00:20:35,169
SO I CAN LIST UNIT FILES AND WE CAN SEE THAT IT'S

00:20:35,169 --> 00:20:38,950
THERE BUT NOT ACTIVE. LET'S BOOT ONE OF THESE UP.

00:20:38,950 --> 00:20:43,730
THERE WE GO. LET'S START ANOTHER ONE.

00:20:43,730 --> 00:20:47,640
SO THIS LAUNCHED ON THE MUCH ENDING IN .101, THE

00:20:47,640 --> 00:20:51,259
SECONDS ONE WILL LAUNCH ON -- OH, WAIT FOR IT.

00:20:51,259 --> 00:20:55,769
ONE OR TWO. THAT'S COINCIDENCE, COULD HAVE ENDED UP ON

00:20:55,769 --> 00:21:00,279
THREE. BUT IF WE LOOK AT FLEET CONTROL, LIST MACHINES,

00:21:00,279 --> 00:21:07,499
WE CAN SEE THOSE MACHINES, LIST UNITS. WE CAN SEE THOSE APPS RUNNING ON THOSE VARIOUS

00:21:07,499 --> 00:21:11,399
MACHINES. AND WE CAN USE NORMAL SYSTEM D COMMANDS SO

00:21:11,399 --> 00:21:16,419
SAY JOURNAL, STATUS, RATHER, LET'S DO STATUS.

00:21:16,419 --> 00:21:29,149
MY APP AT 1. SO YOU CAN SEE THAT THAT ARM IN THE -- FAILED

00:21:29,149 --> 00:21:36,080
BECAUSE THERE WASN'T PREEXISTING IMAGE BUT THE

00:21:36,080 --> 00:21:40,320
MAIN PROCESS IS ACTIVE AND RUNNING, AND HERE IS

00:21:40,320 --> 00:21:47,890
THE LAST BIT OF OUTPUT FROM RUNNING THAT. SO I CAN SEE THAT FOR ANYTHING RUNNING, EVEN

00:21:47,890 --> 00:21:53,380
THOUGH I'M ON SYSTEM -- ON THE CORE 1, I CAN LOOK

00:21:53,380 --> 00:21:59,970
AT THAT ON 2, AND I CAN ACTUALLY SAY, FLEET CONTROL SSH, AND JUMP OVER TO THE BOX THAT'S

00:21:59,970 --> 00:22:02,850
RUNNING MY TASK VERY EASY WITHOUT HAVING TO KIND

00:22:02,850 --> 00:22:07,350
OF DE-REFERENCE IT. SO THAT'S HOW WE GO FROM A UNIT FILE TO HAVING

00:22:07,350 --> 00:22:12,240
TWO THINGS RUNNING. I PROMISED YOU HIGH AVAILABILITY, SO LET'S

00:22:12,240 --> 00:22:13,580
GO KILL ONE OF THESE.

00:22:13,580 --> 00:22:16,240
SO LET'S SAY -- THIS IS WAY SMALL, MAKE THAT BIG.

00:22:16,240 --> 00:22:18,110
PROJECTS, PYCON... SO WE'LL SHELL INTO COREO2.

00:22:18,110 --> 00:22:19,110
OOPS. SSH COREO2.

00:22:19,110 --> 00:22:21,340
THERE WE GO. SO WE'RE IN THIS MACHINE THAT'S RUNNING MY

00:22:21,340 --> 00:22:22,340
APP 2, RIGHT?

00:22:22,340 --> 00:22:24,169
SO LET'S SHUT DOWN EACH NOW. OH, PSEUDO SHUT DOWN.

00:22:24,169 --> 00:22:27,510
AND SO BAM. IT'S GONE AND UP ON THREE.

00:22:27,510 --> 00:22:34,140
[ Applause ] SO WE CAN REBOOT THAT MACHINE AND IF YOU WERE

00:22:34,140 --> 00:22:44,169
DOING THIS WITH A NORMAL SCHEDULER, WHEN THIS MACHINE COMES BACK UP, IT'S GOING TO, YOU

00:22:44,169 --> 00:22:48,520
KNOW, TRY TO RESTART THAT FILE, NOT SO BECAUSE IN

00:22:48,520 --> 00:22:50,700
THIS CASE BECAUSE FLEET'S THE THING THAT'S CONTROLLING

00:22:50,700 --> 00:22:53,190
WHAT HAPPENS. IT'S LIKE, WAIT, I ALREADY FILLED THIS, I'M

00:22:53,190 --> 00:22:55,909
RUNNING ON TWO SERVERS ALREADY, 102 DOESN'T NEED

00:22:55,909 --> 00:23:04,870
TO RESTART IT SO WHEN THIS COMES BACK UP, WE CAN

00:23:04,870 --> 00:23:08,809
SAY THIS MACHINE'S GOT THE THREE MACHINES AGAIN,

00:23:08,809 --> 00:23:15,039
BUT THAT'S STILL JUST RUNNING ON MACHINE 1 AND 3.

00:23:15,039 --> 00:23:17,889
KIND OF COOL, RIGHT? AT THIS POINT YOU'VE STILL GOT TO FIGURE OUT,

00:23:17,889 --> 00:23:20,019
ALL RIGHT, I HAVE MY STUFF, IT CAN SURVIVE.

00:23:20,019 --> 00:23:22,320
LET'S KILL ANOTHER -- I CAN SURVIVE WHILE THE

00:23:22,320 --> 00:23:33,080
MACHINE IS GETTING THE PLUGGED PULLED ON IT. BUT THAT MEANS YOU HAVE TO DESIGN YOUR APPS

00:23:33,080 --> 00:23:39,950
DIFFERENTLY. IF A MACHINE CAN GO AWAY, IF A CONTAINER CAN

00:23:39,950 --> 00:23:43,250
BE KILLED ON A MACHINE, THEN SHOW UP ON A DIFFERENT

00:23:43,250 --> 00:23:47,440
MACHINE, YOU HAVE TO MINIMIZE STATE. BECAUSE YOU'RE NOT GOING TO HAVE THE SAME

00:23:47,440 --> 00:23:48,940
HARD DRIVE AVAILABLE TO YOU.

00:23:48,940 --> 00:23:51,440
HEROKU WROTE A REALLY NICE DOCUMENT CALLED "THE

00:23:51,440 --> 00:23:55,080
12 FACTOR APP DESIGN PRINCIPLES," REALLY WORST READING THAT.

00:23:55,080 --> 00:23:58,629
TALKS ABOUT HOW THEY'VE COME TO BUILD APPS THAT

00:23:58,629 --> 00:23:59,790
WORK WELL ON THE HEROKU PLATFORM WHICH HAS MANY

00:23:59,790 --> 00:24:03,380
OF THE SIMILAR DESIGN CONSTRAINTS. BUT THIS DOESN'T SOLVE THINGS THAT ACTUALLY

00:24:03,380 --> 00:24:07,710
NEED STATE, LIKE DATABASES AND LOAD BALANCES, RIGHT,

00:24:07,710 --> 00:24:14,830
BECAUSE I WILL I'M OVER HERE, GOT THIS THING RUNNING ON 101 AND 103, YOU KNOW, THERE IT

00:24:14,830 --> 00:24:17,840
IS ON 101, THERE IT IS ON 103.

00:24:17,840 --> 00:24:22,230
BUT IT WAS ON 102 AND THAT'S TOTALLY DEAD NOW,

00:24:22,230 --> 00:24:25,480
RIGHT? SO YOU STILL NEED TO HAVE SOMETHING IN FRONT

00:24:25,480 --> 00:24:26,679
OF THIS DOING LOAD BALANCING.

00:24:26,679 --> 00:24:31,899
AND THAT'S OKAY. THERE'S NOT A GREAT STORY FOR STAPLENESS IN

00:24:31,899 --> 00:24:34,100
THIS SORT OF AN ARCHITECTURE YET.

00:24:34,100 --> 00:24:40,669
BUT YOU DON'T TO HAVE RUN YOUR WHOLE ENVIRONMENT ON COREOS TO REAP THE BENEFITS OF RUNNING

00:24:40,669 --> 00:24:42,419
A LOT OF WORKER PROCESSES ON IT.

00:24:42,419 --> 00:24:45,269
IN SOME CASES, IF YOU'RE ON LIKE AMAZON ECTUBE, YOU CAN OUT-SOURCE THIS, PAY MONEY TO START

00:24:45,269 --> 00:24:46,419
UP AN RDS OR SOMETHING, BUT BEING ALSO FOR WEEKEND

00:24:46,419 --> 00:24:47,419
PROJECTS, FINE, GO BIND YOUR DATABASE, SAY ONLY

00:24:47,419 --> 00:24:49,899
RUN THIS ON MACHINE I.D.XAND IT REBOOTS, NO BIG

00:24:49,899 --> 00:24:54,639
DEAL, RIGHT? IT WILL BE OUT FOR A COUPLE OF MINUTES EVERY

00:24:54,639 --> 00:24:56,649
COUPLE WEEKS, YOU'RE STILL GOING TO BE OKAY AND

00:24:56,649 --> 00:25:01,100
IT DOES GET YOU TO A BETTER PLACE THAN YOU WERE

00:25:01,100 --> 00:25:03,370
BEFOREHAND FOR THE STATEFUL PARTS BUT DOES GET

00:25:03,370 --> 00:25:06,159
YOU TO A MUCH BETTER PLACE FOR THE THINGS THAT

00:25:06,159 --> 00:25:09,770
AREN'T NECESSARILY STATEFUL, RIGHT? IF YOU HAVE IDEAS FOR MAKING THIS BETTER,

00:25:09,770 --> 00:25:12,480
THINGS LIKE POSTGRES, IS NOT CLUSTER AWARE, SO IF

00:25:12,480 --> 00:25:13,480
YOU NEED POSTGRES, YOU NEED TO BABYSIT IT, STILL.

00:25:13,480 --> 00:25:16,380
GREAT ROOM FOR INNOVATION. BUT THE END OF THIS, LIKE, WE'VE DONE IT,

00:25:16,380 --> 00:25:19,030
RIGHT? WE HAVE A PLATFORM THAT'S SELF UPDATING AND

00:25:19,030 --> 00:25:21,549
SELF ORGANIZING AND SELF HEALING AND WE DID IT

00:25:21,549 --> 00:25:23,999
BY USING AN OPERATING SYSTEM THAT AUTOMATICALLY

00:25:23,999 --> 00:25:27,869
UPDATES, USING AUTONOMIC UPDATES. WE PUT THEM IN THE ISOLATED CONTAINERS.

00:25:27,869 --> 00:25:30,669
DON'T REDISTRIBUTE TO -- OH, MAN -- THERE WE GO.

00:25:30,669 --> 00:25:34,179
WEB TECHNOLOGY, MAN. SO WE ALSO SET UP MULTIPLE CONTAINERS, MULTIPLE

00:25:34,179 --> 00:25:35,971
SERVERS IN A COORDINATE CLUSTER USING ETCD, AND

00:25:35,971 --> 00:25:45,129
WE USED A SCHEDULER FLEET TO DISTRIBUTE JOBS ACROSS THE CLUSTER.

00:25:45,129 --> 00:25:50,669
NOW YOUR TURN TO PLAY WITH THIS, RIGHT? I'VE SHOWN YOU IT'S POSSIBLE, I'VE SHOWN YOU

00:25:50,669 --> 00:25:53,440
WHAT DESIGNS CHANGE, LIKE THINGS HAVE TO BE ABLE

00:25:53,440 --> 00:25:57,090
TO DIE AND COME BACK UP ON A DIFFERENT HOST.

00:25:57,090 --> 00:26:01,460
YOUR TURN TO PLAY WITH IT. COREOS IS RUN ON A TON OF PLATFORMS.

00:26:01,460 --> 00:26:04,220
I DID EVERYTHING ON A LOCAL TRIO VIRTUAL MACHINE RUNNING VAGRANT.

00:26:04,220 --> 00:26:07,340
YOU COULD ALSO DO THIS ON AZURE, ECTUBE, RACKSPACE, ALL THESE HAVE OFFICIAL COREOS

00:26:07,340 --> 00:26:08,499
IMAGES AND DIGITALOCEAN ALSO SUPPORTS IT.

00:26:08,499 --> 00:26:10,509
A FRIEND OF MINE STARTED WORKING AT DIGITALOCEAN, SHE TOLD ME TO USE THE CODE SAMMY LOVES PYCON

00:26:10,509 --> 00:26:13,610
TO GET A $40 CREDIT, SO YOU CAN SPIN UP THREE

00:26:13,610 --> 00:26:15,669
VMs FOR TWO AND A HALF MONTHS PLAY WITH THIS.

00:26:15,669 --> 00:26:20,240
FEEL FREE TO GIVE IT OUT TO PEOPLE, SUPER GREAT.

00:26:20,240 --> 00:26:25,039
BUT I'VE BEEN TALKING FOR A WHILE. LET'S TAKE SOME QUESTIONS.

00:26:25,039 --> 00:26:26,369
YOU CAN FIND MY SLIDES, CHECK OUT DIGITALOCEAN, USE THE CODE, FREE STUFF.

00:26:26,369 --> 00:26:28,609
MIC IS IN THE BACK. THANK YOU SO MUCH.

00:26:28,609 --> 00:26:31,330
[ Applause ] >> I WONDER IF YOU COULD SAY WHAT THE EXPERIENCE

00:26:31,330 --> 00:26:32,599
IS LIKE RUNNING COREOS ON A MAC DEVELOPMENT ENVIRONMENT, DOES IT SUCK?

00:26:32,599 --> 00:26:33,599
>> IT KIND OF SUCKS. SO THE...

00:26:33,599 --> 00:26:34,599
[ Laughter ] ONE OF THE PREMISES IS THAT YOU'RE GOING TO

00:26:34,599 --> 00:26:35,599
SHARE YOUR KERNEL BETWEEN ALL YOUR CONTAINERS AND

00:26:35,599 --> 00:26:36,599
IF I'M USING A MAC AND TRYING TO RUN THINGS ON

00:26:36,599 --> 00:26:37,599
LINUX, THAT WON'T WORK, SO YOU STILL NEED A

00:26:37,599 --> 00:26:38,599
VIRTUALIZATION LAYER. NOT IDEAL.

00:26:38,599 --> 00:26:39,599
IT'S TOTALLY FINE FOR TESTING, THERE IS A VAGRANT

00:26:39,599 --> 00:26:40,599
COREOS RECIPE THAT MAKES IT DEAD SIMPLE TO SPIN

00:26:40,599 --> 00:26:41,599
UP THREE OF THESE THINGS, PLAY WITH THEM. BUT YOU'RE STILL BOOTING A VM TO THEN GO RUN

00:26:41,599 --> 00:26:42,599
OTHER VMs BECAUSE YOU CAN'T DO THIS NATIVELY ON

00:26:42,599 --> 00:26:43,599
YOUR DESK TOP. IF YOU'RE RUNNING -- AND RUNNING LINUX, WAY

00:26:43,599 --> 00:26:44,599
AHEAD OF THE GAME.

00:26:44,599 --> 00:26:45,599
IT IS WHAT IT IS. WE'RE DEPLOYING LINUX, YOU HAVE TO DEAL WITH

00:26:45,599 --> 00:26:46,599
IT SOMEWHERE.

00:26:46,599 --> 00:26:47,599
>> AUDIENCE: AND GIVING IT AN ENORMOUS AMOUNT OF

00:26:47,599 --> 00:26:48,599
RAM. YOU GIVE THE VAGRANT CONTAINER AN ENORMOUS

00:26:48,599 --> 00:26:49,599
AMOUNT OF RAM AND WALK AWAY.

00:26:49,599 --> 00:26:50,599
>> COREOS DOESN'T TAKE A SUPER AMOUNT OF RAM, BOOTS REALLY QUICK BUT YOU HAVE TO BE RUNNING

00:26:50,599 --> 00:26:51,599
THE CONTAINERS ON LINUX.

00:26:51,599 --> 00:26:52,599
THERE ARE OBVIOUSLY LIKE MICROSOFT JUST ANNOUNCED A CONTAINERIZATION SOLUTION FOR WINDOWS EARLIER

00:26:52,599 --> 00:26:53,700
THIS WEEK. BUT CONTAINERS AREN'T PORTABLE ACROSS OPERATING

00:26:53,700 --> 00:26:55,370
SYSTEMS. THEY'RE PORTABLE ACROSS DISTRIBUTIONS, SO,

00:26:55,370 --> 00:26:58,149
LIKE, A CONTAINER THAT HAS A USER LAND FROM RED

00:26:58,149 --> 00:26:59,570
HAT WILL RUN ON A HOST USING UBUNTU OR ARGENTE,

00:26:59,570 --> 00:27:00,940
BUT YOU CAN'T TAKE THAT CONTAINER LIKE YOU COULD

00:27:00,940 --> 00:27:01,940
WITH A VM AND RUN IT ON WINDOWS.

00:27:01,940 --> 00:27:02,940
>> AUDIENCE: HEY, DAN, GREAT TALK. QUICK QUESTION.

00:27:02,940 --> 00:27:05,539
IF YOU HAVE A SERVICE THAT DEPENDS ON HAVING SOMETHING ON DISK PERSISTENTLY AND YOU WANT

00:27:05,539 --> 00:27:07,109
TO BE ABLE TO START THIS SERVICE ON ANY SORT OF

00:27:07,109 --> 00:27:08,109
ARBITRARY NODE, HOW ARE YOU GOING TO CREATE A

00:27:08,109 --> 00:27:09,999
FILE SYSTEM WHICH, SAY, IS SHARED ACROSS THOSE INSTANCES THAT THIS SERVICE WILL HAVE ACCESS

00:27:09,999 --> 00:27:10,999
TO? >> THERE'S NOT AN ANSWER FOR THAT BAKED IN.

00:27:10,999 --> 00:27:12,440
IF YOU'RE USING EC2, YOU CAN GO IN AND USE, LIKE,

00:27:12,440 --> 00:27:14,509
ELASTIC BLOCK STORES, NOW AN NFS CLIENT FILE SERVICE OR SOMETHING.

00:27:14,509 --> 00:27:16,710
SO YOU WOULD WANT TO JUST DO A NORMAL KIND OF

00:27:16,710 --> 00:27:20,609
NETWORK FILE SHARE OR A NETWORK BLOCK MOUNT AND

00:27:20,609 --> 00:27:24,070
MANAGE THAT OUTSIDE OF THIS. >> AUDIENCE: COOL, THANKS.

00:27:24,070 --> 00:27:26,700
>> AUDIENCE: GREAT TALK. QUICKLY FOR THE GUY IN THE BLUE FIREFOX T-SHIRT,

00:27:26,700 --> 00:27:35,450
THERE'S BOOT TO DOCKER, THAT GETS YOU A SLIMMED DOWN VM THAT RUN ON OSX WHICH IS PRETTY GOOD,

00:27:35,450 --> 00:27:36,929
IF YOU WANT TO PLAY AROUND WITH DOCKER THINGS.

00:27:36,929 --> 00:27:37,929
BOOT TO DOCKER. MY QUESTION IS AROUND FLEET VERSUS KUBERNETES,

00:27:37,929 --> 00:27:38,929
I KNOW THERE IS A LOT OF WORK THAT YOU'RE DOING

00:27:38,929 --> 00:27:42,019
ON THEM, I'M WONDERING WHAT THE FUTURE PATH IS.

00:27:42,019 --> 00:27:44,280
SEEMS LIKE KUBERNETES IS DOING THINGS THAT FLEET

00:27:44,280 --> 00:27:45,280
IS DOING. IS THERE A DIFFERENCE, ARE YOU MOVING TOWARDS

00:27:45,280 --> 00:27:46,280
KUBERNETES OR WHAT'S THE -- >> SO ONE POINT OF CLARIFICATION, I'M NOT

00:27:46,280 --> 00:27:47,280
THOSE GUYS.

00:27:47,280 --> 00:27:48,280
I WORK FOR MOZILLA, JUST A HOBBYIST IN THIS SPACE

00:27:48,280 --> 00:27:49,280
BUT I DID TALK TO KELSEY HIGHTOWER WHO WORKS FOR

00:27:49,280 --> 00:27:50,399
COREOS BEFORE I GAVE THIS TALK AND THE SENSE I

00:27:50,399 --> 00:27:51,399
GOT FROM HIM WAS THAT FLEET IS AN EXCELLENT BASIC

00:27:51,399 --> 00:27:52,399
SCHEDULER AND IF YOU NEED CAN YOU BEER NETS YOU

00:27:52,399 --> 00:27:53,399
KNOW IT. YOU GET 5% BETTER ALLOCATION OF YOUR RESOURCES,

00:27:53,399 --> 00:27:54,399
YOU SAVE MILLIONS OF DOLLARS IN THE POWER BILL,

00:27:54,399 --> 00:27:55,399
THAT'S WHEN YOU MOVE TO KUBERNETES, BUT FLEET ITSELF IS A GREAT PRIMITIVE.

00:27:55,399 --> 00:27:56,399
SO YOU COULD USE THAT TO BOOT STRAP THE KUBERNETES ON THE CLIENTS' NETWORK.

00:27:56,399 --> 00:27:57,399
KUBERNETE MOMENTUM, GOOGLE HAS TONS OF ENGINEERS ON IT ALL THE TIME BUT SEEMED TO BE GEARED

00:27:57,399 --> 00:27:58,399
TOWARDS LARGER SCALE DEPLOYMENT. >> AUDIENCE: SO YOU CAN SEE -- NOT YOU BUT

00:27:58,399 --> 00:27:59,399
THE GENERAL, FLEET AND KUBERNETES EXISTING SIDE

00:27:59,399 --> 00:28:00,399
BY SIDE, BASICALLY.

00:28:00,399 --> 00:28:01,399
>> ABSOLUTELY. >> AUDIENCE: THIS IS A BRIEF FOLLOW-UP ON

00:28:01,399 --> 00:28:02,399
AN EARLIER QUESTION.

00:28:02,399 --> 00:28:03,399
HAVE YOU EXPERIMENTED WITH AMAZON'S ELASTIC BLOCK

00:28:03,399 --> 00:28:04,399
STORE AS A MEANS OF PERSISTENCE WITH A DATABASE SERVER LIKE POSTGRES OR ANYTHING ELSE?

00:28:04,399 --> 00:28:05,399
FEEL THAT'S READY FOR PRODUCTION YET OR IT MIGHT

00:28:05,399 --> 00:28:07,820
WORK IF YOU TRY IT SORT OF THING? >> IT'S MORE OF A -- IT SHOULD WORK WITHIN

00:28:07,820 --> 00:28:09,200
THE CONSTRAINTS OF EBS.

00:28:09,200 --> 00:28:10,370
BUT THE THINGS I'M DOING, I'M WORKING ON HOBBY PROJECTS.

00:28:10,370 --> 00:28:11,370
THIS STUFF, EVERYTHING I SHOWED YOU WILL SCALE TO

00:28:11,370 --> 00:28:12,370
HUNDREDS OR THOUSANDS OF SERVERS. I'M CARING MORE ABOUT, LIKE, THREE, BECAUSE

00:28:12,370 --> 00:28:13,840
I DON'T WANT TO DEAL WITH THAT ONE EMAIL ONCE

00:28:13,840 --> 00:28:14,840
A MONTH WHERE IT'S HEY, THERE IS A HARDWARE

00:28:14,840 --> 00:28:15,840
PROBLEM ON YOUR SERVER.

00:28:15,840 --> 00:28:16,840
WE'VE REBOOTED, MAN, MY STUFF WAS OFFLINE, SO I'M

00:28:16,840 --> 00:28:17,840
TRYING TO FIX THAT ON A LOW LEVEL AND I FIND IT

00:28:17,840 --> 00:28:18,840
INTERESTING THIS SORT OF TECHNOLOGY DOES SCALE DOWN TO THAT PRETTY WELL BUT PUTTING MY STAPLE

00:28:18,840 --> 00:28:19,840
STUFF IN RDS ON AMAZON. >> AUDIENCE: OKAY, THANKS.

00:28:19,840 --> 00:28:20,840
>> AUDIENCE: WHAT YOU'VE BEEN PROVIDING IS REALLY INTERESTING AND I WOULD LIKE TO KNOW

00:28:20,840 --> 00:28:21,840
HOW THIS IS FITTING -- CONFIGURATION MANAGEMENT

00:28:21,840 --> 00:28:22,840
TOOL SUCH AS SALT AND PEPPER, WHERE SOME COMPANION

00:28:22,840 --> 00:28:23,840
MIGHT HAVE INVESTED IN MANIFEST OR STATES AND HOW

00:28:23,840 --> 00:28:24,840
DO YOU SEE THE TRANSITION BECAUSE, LIKE, THE TRANSITION BETWEEN SOMETHING WHICH IS DECLARATIVE

00:28:24,840 --> 00:28:25,840
AND WHERE YOU HAVE ALL YOUR CONFIGURATION, GETTING SOMETHING TO SUCH VOLATILE THING.

00:28:25,840 --> 00:28:26,840
>> RIGHT, SO IT SEEMS LIKE THE COREOS PLATFORM ITSELF, YOUR SYSTEM IS MOUNTED IS READ ONLY.

00:28:26,840 --> 00:28:27,840
YOU CAN'T REALLY CHANGE THE CONFIGURATION. I MEAN, YOU CAN OBVIOUSLY ADD THINGS TO SLASH

00:28:27,840 --> 00:28:28,840
ETC AND THAT, BUT IN A CERTAIN WAY OBVIATES THE

00:28:28,840 --> 00:28:29,840
NEEDS FOR TOOLS LIKE CHEF, PUPPET, SALT STACK, ANSIBLE,

00:28:29,840 --> 00:28:30,840
BECAUSE YOU'RE NOT TRYING TO MAKE THE MACHINES. YOU'RE STILL TRYING TO BUILD A CONTAINER BUT

00:28:30,840 --> 00:28:31,840
THE TOOLS THAT EXIST FOR THAT, THE DOCKER FILES

00:28:31,840 --> 00:28:32,840
THAT SAY, GO DOWN THIS, RUN THIS, DO THAT, KIND

00:28:32,840 --> 00:28:35,610
OF TAKE CARE OF THAT AND ONCE YOU'RE DONE, THAT

00:28:35,610 --> 00:28:36,746
SINGLE CONTAINER IS PORTABLE. YOU CAN SERIALIZE IT, SCP IT FROM ONE HOST

00:28:36,746 --> 00:28:37,746
TO ANOTHER, AND PICKS UP AND RUNS WITHOUT HAVING

00:28:37,746 --> 00:28:38,746
TO HAVE LIKE THE LONG-LIVED CONFIGURATION MANAGEMENT

00:28:38,746 --> 00:28:39,746
OR THE CONFIGURATION CONVERGENCE, THINGS YOU USUALLY GET WITH THOSE SORTS OF TOOLS.

00:28:39,746 --> 00:28:40,746
SO MIGHT GET RID OF THEM WHICH IS KIND OF TERRIBLE BUT GETTING RID OF STUFF IS ALSO

00:28:40,746 --> 00:28:41,746
KIND OF GOOD.

00:28:41,746 --> 00:28:42,746
>> AUDIENCE: SO IF YOU HAVE, LIKE, A THOUSAND APPLICATION SERVERS AND, YOU KNOW, THEN FIVE

00:28:42,746 --> 00:28:43,746
ETCD NODES, DOESN'T SEEM LIKE A BIG DEAL BUT IF

00:28:43,746 --> 00:28:44,746
YOUR SCALE IS THREE APP SERVERS AND YOU NEED A

00:28:44,746 --> 00:28:45,746
NODE OF 3 TO FIVE ETCD THINGS, DOESN'T SEEM TO MAKE

00:28:45,746 --> 00:28:46,746
SENSE. SO IF YOU'RE IN PRODUCT BUT WITH A LOW NUMBER,

00:28:46,746 --> 00:28:47,746
DOES THAT -- IS THAT HOW THEY USE IT THERE? >> YEAH, THIS TOTALLY MAKES SENSE.

00:28:47,746 --> 00:28:48,746
YOU GET ALL THE REDUNDANCY -- THIS IS A PRODUCTION-READY DEPLOYMENT, JUST WITH THREE

00:28:48,746 --> 00:28:49,746
NODES. THE PROBLEM THERE IS IF ONE OF THOSE MACHINES

00:28:49,746 --> 00:28:50,746
DIES, LIKE IF YOU'RE USING ETCD SPOT INSTANCES OR

00:28:50,746 --> 00:28:51,746
SOMETHING, YOU HAVE TO TAKE CARE TO INFORM ALL

00:28:51,746 --> 00:28:52,746
THE OTHER NODES THAT THIS ONE IS NO LONGER SOMETHING THEY SHOULD BE LOOKING FOR BECAUSE

00:28:52,746 --> 00:28:53,746
IF SOMETHING ELSE SHOWS UP, THEN YOU HAVE A REALLY

00:28:53,746 --> 00:28:54,746
WEIRD SYSTEM IN THE PART THAT DOES CONSENSUS, RIGHT, BECAUSE IT'S LIKE, I HAVE FOUR THINGS,

00:28:54,746 --> 00:28:55,746
I THOUGHT I HAD THREE THINGS.

00:28:55,746 --> 00:28:56,746
I THINK IT'S WEIRD. BUT IF YOU'RE JUST STANDING UP A COUPLE OF

00:28:56,746 --> 00:28:57,746
LONG-RUNNING VMs TO A FIXED NUMBER THAT, CONFIGURATION WORKS GREAT.

00:28:57,746 --> 00:28:58,746
TRADITIONALLY, YOU DON'T WANT TO TURN ON ALL THAT

00:28:58,746 --> 00:28:59,746
MANY ETCD NODES, STARTS DEGRADING AFTER NINE. I THINK IN THE GOOGLE CHUBBY PAPER, THEY HAD

00:28:59,746 --> 00:29:00,746
5 MACHINES HANDLING HUNDREDS OF CONCURRENT CLIENTS.

00:29:00,746 --> 00:29:01,746
SO SOMETHING LIKE THAT REALLY DOES SCALE ENORMOUSLY, SOMETHING LIKE THAT IS FINE IF

00:29:01,746 --> 00:29:02,746
YOU'RE USED TO A TRADITIONAL LONG-RUNNING VM.

00:29:02,746 --> 00:29:03,746
TIME FOR ONE MORE? >> AUDIENCE: SO YOU MADE A COMMENT AND I'VE

00:29:03,746 --> 00:29:04,746
HEARD IT A NUMBER OF TIMES THAT THIS AUTOMATICALLY UPDATED AND SAVED YOU FROM A

00:29:04,746 --> 00:29:05,746
NUMBER OF SECURITY PROBLEMS.

00:29:05,746 --> 00:29:06,746
BUT IT DIDN'T. >> YES, I THINK I KNOW WHERE YOU'RE GOING

00:29:06,746 --> 00:29:07,746
AND THIS IS GREAT.

00:29:07,746 --> 00:29:08,746
THANK YOU. >> AUDIENCE: BECAUSE YOUR USER LANDS IS WHERE

00:29:08,746 --> 00:29:09,746
LIB SSL LIVED AND NONE OF YOUR LIB SSLs ON YOUR

00:29:09,746 --> 00:29:10,746
CLUSTER GOT UPDATED WHEN EVERYTHING REBOOTED. >> SPOT ON.

00:29:10,746 --> 00:29:11,746
SO THIS WOULD HELP YOU WITH THINGS LIKE KERNEL LEVEL VULNERABILITIES BUT YOU STILL HAVE TO

00:29:11,746 --> 00:29:12,746
MAINTAIN YOUR USER LANDS AND SO WHAT YOU WANT TO

00:29:12,746 --> 00:29:13,746
DO IS END UP MAKING SURE THAT YOU'RE REBUILDING YOUR DOCKER IMAGES REGULARLY, REDEPLOYING

00:29:13,746 --> 00:29:14,746
THEM AND THINGS LIKE THAT ONCE THINGS COME OUT.

00:29:14,746 --> 00:29:15,746
THE NICE THING, THIS GETS YOU AWAY FROM HAVING TO

00:29:15,746 --> 00:29:16,746
MANAGE BOTH THE HOST SYSTEM AND THE APPLICATION SYSTEM WITH A LOT OF CARE, RIGHT?

00:29:16,746 --> 00:29:17,746
LIKE RED HAT WILL SELL YOU A TEN-YEAR SUBSCRIPTION SO YOU DON'T HAVE TO UPDATE AND

00:29:17,746 --> 00:29:18,746
THAT'S SCARY. THIS LETS YOU WORRY, HERE'S MY APPLICATION,

00:29:18,746 --> 00:29:19,746
I CAN UPDATE IT ON MY OWN AND NOT WORRY ABOUT THE

00:29:19,746 --> 00:29:20,746
EFFECT. >> THAT'S ALL THE TIME WE HAVE FOR QUESTIONS.

00:29:20,746 --> 00:29:20,753

YouTube URL: https://www.youtube.com/watch?v=3CwJ0MH-4MA


