Title: Clayton Parker - So you think you can PDB? - PyCon 2015
Publication date: 2015-04-12
Playlist: PyCon 2015
Description: 
	"Speaker: Clayton Parker

This talk will be an introduction to the most commonly used Python Debugger commands and what they do. Learn how to navigate and inspect code from the pdb prompt so you can better understand how it works. The Python Debugger is a valuable debugging tool for all levels of Python programmers. You should walk away being able to debug the next Python code you encounter!

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:05,150 --> 00:00:08,400
thank you

00:00:06,509 --> 00:00:12,690
all right so we're gonna learn all about

00:00:08,400 --> 00:00:14,519
p2p today so Who am I I'm Clayton Parker

00:00:12,690 --> 00:00:16,800
I'm the director of engineering at six

00:00:14,519 --> 00:00:18,449
feet up I'm also known as HR on

00:00:16,800 --> 00:00:20,340
throughout the Internet's so you're

00:00:18,449 --> 00:00:21,720
gonna know what code I'm writing what

00:00:20,340 --> 00:00:23,670
music I'm listening to you beer I'm

00:00:21,720 --> 00:00:25,199
drinking or whatever it's it's all it's

00:00:23,670 --> 00:00:28,080
all in the internet for your consumption

00:00:25,199 --> 00:00:30,810
I'm also on Twitter or whatever if you

00:00:28,080 --> 00:00:32,040
want to hit me up I have a lot of slides

00:00:30,810 --> 00:00:35,280
so we'll try to get through them all and

00:00:32,040 --> 00:00:39,600
maybe get some questions so who in here

00:00:35,280 --> 00:00:42,530
has never used ptb that's a lot of hands

00:00:39,600 --> 00:00:45,690
all right who in here has used PD be

00:00:42,530 --> 00:00:47,340
even more hands good all right so for

00:00:45,690 --> 00:00:49,680
those who raise your hands first I hope

00:00:47,340 --> 00:00:51,570
you learned a lot and and apply this

00:00:49,680 --> 00:00:54,390
knowledge as soon as you get back to

00:00:51,570 --> 00:00:57,480
your your day jobs or your pet projects

00:00:54,390 --> 00:00:59,340
so P DB is the Python debugger it's in

00:00:57,480 --> 00:01:02,129
the standard library so it is available

00:00:59,340 --> 00:01:04,710
wherever your programming in Python it

00:01:02,129 --> 00:01:08,909
is an interactive debugging tool similar

00:01:04,710 --> 00:01:12,420
to things in other languages like pry

00:01:08,909 --> 00:01:15,030
and Ruby or I forget the ones called in

00:01:12,420 --> 00:01:18,500
in PHP but it gives you a way to sort of

00:01:15,030 --> 00:01:20,369
look through the code without having to

00:01:18,500 --> 00:01:23,040
resort to print statements and things

00:01:20,369 --> 00:01:26,640
like that I mean it is also pure awesome

00:01:23,040 --> 00:01:28,020
in my opinion I use it a lot if I you

00:01:26,640 --> 00:01:29,729
know if I have any questions about what

00:01:28,020 --> 00:01:33,119
I'm trying to accomplish in the code I

00:01:29,729 --> 00:01:34,320
jump in the PDB so first thing we're

00:01:33,119 --> 00:01:37,500
going to talk about is how to invoke it

00:01:34,320 --> 00:01:39,659
so two common ways or by the most common

00:01:37,500 --> 00:01:42,150
way is just to do import PDB and then do

00:01:39,659 --> 00:01:44,369
a PDB set race so if we go to the

00:01:42,150 --> 00:01:48,600
terminal here so first I'm just gonna

00:01:44,369 --> 00:01:50,670
run my this command I have and just it

00:01:48,600 --> 00:01:54,270
just runs and gives me some output but

00:01:50,670 --> 00:01:57,960
if I want to look I can do the PD set

00:01:54,270 --> 00:02:00,920
choice so if I edit that file and let's

00:01:57,960 --> 00:02:04,290
say we're curious as to what year it is

00:02:00,920 --> 00:02:06,420
just our PDB in there save that and then

00:02:04,290 --> 00:02:10,140
this time when we run it will actually

00:02:06,420 --> 00:02:12,390
be pulled up into the PDB prompt so we

00:02:10,140 --> 00:02:13,650
can start debugging our code so that's

00:02:12,390 --> 00:02:16,290
one way to invoke it

00:02:13,650 --> 00:02:17,640
we can also you can actually invoke it

00:02:16,290 --> 00:02:20,790
straight from the command line using the

00:02:17,640 --> 00:02:21,989
- in flag which which runs a module so

00:02:20,790 --> 00:02:24,329
in this case it's going to run PDB

00:02:21,989 --> 00:02:25,439
before starting our script so if we look

00:02:24,329 --> 00:02:27,180
at that and there's there's also other

00:02:25,439 --> 00:02:28,620
cool things you can do with the - in

00:02:27,180 --> 00:02:31,890
flag but I'll have enough time to talk

00:02:28,620 --> 00:02:33,720
about things so we're running this and

00:02:31,890 --> 00:02:35,519
so this time you can see we're at the

00:02:33,720 --> 00:02:37,620
very beginning of the script instead of

00:02:35,519 --> 00:02:40,709
inside of the main function so this just

00:02:37,620 --> 00:02:42,689
starts start your script directly in in

00:02:40,709 --> 00:02:43,859
PDB and you can start it from there so

00:02:42,689 --> 00:02:44,340
if you're if you have a command line

00:02:43,859 --> 00:02:45,569
script

00:02:44,340 --> 00:02:47,190
you want to be bug and you don't want to

00:02:45,569 --> 00:02:47,819
edit the file you can just do that

00:02:47,190 --> 00:02:50,670
quickly

00:02:47,819 --> 00:02:52,049
that's a get in there and it's a little

00:02:50,670 --> 00:02:53,700
harder to get out of because it's it's

00:02:52,049 --> 00:02:57,150
little every time it gets to the end

00:02:53,700 --> 00:03:01,019
it's going to loop through it again so

00:02:57,150 --> 00:03:02,970
it's pretty easy I have as you saw I

00:03:01,019 --> 00:03:05,579
just type PDB in hit tab so in my in my

00:03:02,970 --> 00:03:10,409
editor I have a quick way of pulling a

00:03:05,579 --> 00:03:12,090
PDB at any time so what we're going to

00:03:10,409 --> 00:03:14,819
talk about today is some of the common

00:03:12,090 --> 00:03:16,889
commands we use some of the most common

00:03:14,819 --> 00:03:18,599
ones that I use on a day-to-day basis

00:03:16,889 --> 00:03:20,730
and how to navigate the stack and see

00:03:18,599 --> 00:03:22,349
where you're at in the code and and get

00:03:20,730 --> 00:03:25,739
some more advanced debugging going on

00:03:22,349 --> 00:03:28,379
and so the first thing is PDB does have

00:03:25,739 --> 00:03:30,900
built-in help so if you just type help

00:03:28,379 --> 00:03:33,299
at the prompt or a question mark then

00:03:30,900 --> 00:03:35,849
you can see all the commands you can

00:03:33,299 --> 00:03:37,409
also use help to get help on a command

00:03:35,849 --> 00:03:38,970
so you can do help help to get help on

00:03:37,409 --> 00:03:40,019
help but I think if you've already used

00:03:38,970 --> 00:03:41,879
hope you probably already know what

00:03:40,019 --> 00:03:43,530
you're doing we can also do something

00:03:41,879 --> 00:03:48,419
like help list and see see what that

00:03:43,530 --> 00:03:54,359
command in particular does oh I guess I

00:03:48,419 --> 00:03:55,680
should show it as well so so I'll run

00:03:54,359 --> 00:03:57,299
this again and I'll just type help and

00:03:55,680 --> 00:04:00,449
we could see all the commands we have

00:03:57,299 --> 00:04:02,489
available to us and and most PDB

00:04:00,449 --> 00:04:04,079
commands have a shortcut so like a one

00:04:02,489 --> 00:04:05,669
letter a shortcut so in this case it's

00:04:04,079 --> 00:04:07,199
just question mark and we can do

00:04:05,669 --> 00:04:13,889
question mark lists and see all about

00:04:07,199 --> 00:04:17,519
that particular thing so next showing

00:04:13,889 --> 00:04:19,349
the current contact context so as you

00:04:17,519 --> 00:04:21,000
saw when we when we pull up into a PDB

00:04:19,349 --> 00:04:23,700
at the top of the file we just see the

00:04:21,000 --> 00:04:25,680
line we're currently on that's not too

00:04:23,700 --> 00:04:27,510
exciting unless we know exactly what all

00:04:25,680 --> 00:04:29,280
the code is so we can use L

00:04:27,510 --> 00:04:31,710
to list out the code so it'll list out

00:04:29,280 --> 00:04:33,660
the next ten lines of code and then you

00:04:31,710 --> 00:04:37,260
can also tell it I'm gonna see lines

00:04:33,660 --> 00:04:39,780
three to Jenelle and you'll show those

00:04:37,260 --> 00:04:42,390
those specific lines one thing that I

00:04:39,780 --> 00:04:44,220
find kind of annoying about PB is we

00:04:42,390 --> 00:04:46,800
need to type L again it's going to show

00:04:44,220 --> 00:04:48,240
you the next ten lines so if you were

00:04:46,800 --> 00:04:49,200
doing something and you were you forgot

00:04:48,240 --> 00:04:51,840
what those lines were then you have to

00:04:49,200 --> 00:04:53,910
say okay I want warm lines 1 1 to 10 I

00:04:51,840 --> 00:04:56,940
see have to explicitly tell which lines

00:04:53,910 --> 00:05:00,390
lines you want and there's there's a fix

00:04:56,940 --> 00:05:02,910
for that later I will talk about so

00:05:00,390 --> 00:05:05,210
that's a list it's pretty simple I just

00:05:02,910 --> 00:05:08,100
shows you the the code where you're at

00:05:05,210 --> 00:05:11,640
you can also repeat any command that you

00:05:08,100 --> 00:05:13,530
just ran so and this this will go in

00:05:11,640 --> 00:05:17,160
concert with another command here in

00:05:13,530 --> 00:05:19,890
seconds but we can just say so if we if

00:05:17,160 --> 00:05:21,600
we type a list and we see the code we

00:05:19,890 --> 00:05:25,320
can just hit return and it'll repeat

00:05:21,600 --> 00:05:27,960
whatever pdb command you did so this is

00:05:25,320 --> 00:05:29,940
particularly helpful with with next so

00:05:27,960 --> 00:05:32,130
we can go next you can just hit return

00:05:29,940 --> 00:05:35,000
and start walking through the code it's

00:05:32,130 --> 00:05:40,080
a little bit easier than then just

00:05:35,000 --> 00:05:41,640
retyping the command and one thing I

00:05:40,080 --> 00:05:43,500
also want to show off an Alex keener

00:05:41,640 --> 00:05:46,560
just talked about it in his talk before

00:05:43,500 --> 00:05:55,410
this is PDV plus plus which is a really

00:05:46,560 --> 00:05:57,420
awesome extension to pdb and write the

00:05:55,410 --> 00:05:59,730
virtual environment so i have p DB plus

00:05:57,420 --> 00:06:01,860
plus he just beep if installed pdb PP

00:05:59,730 --> 00:06:05,010
because you can't install with plus plus

00:06:01,860 --> 00:06:09,300
it's reserved characters and then if we

00:06:05,010 --> 00:06:11,010
do this again now we have we have we're

00:06:09,300 --> 00:06:12,900
already given more context because i

00:06:11,010 --> 00:06:14,310
have what they call sticky mode turned

00:06:12,900 --> 00:06:16,470
on this is this is the main reason i use

00:06:14,310 --> 00:06:18,120
it because it's it's pretty awesome so

00:06:16,470 --> 00:06:20,100
now when I look at the code it shows me

00:06:18,120 --> 00:06:22,380
what the current line I'm on and also

00:06:20,100 --> 00:06:26,250
just code highlighting which is really

00:06:22,380 --> 00:06:27,480
nice so it really enhances PDB and so

00:06:26,250 --> 00:06:29,580
I'll go through the rest of the talk

00:06:27,480 --> 00:06:34,650
with this on just so it's it's easier to

00:06:29,580 --> 00:06:36,930
see what's what we're doing and so

00:06:34,650 --> 00:06:38,100
another pretty critical thing when

00:06:36,930 --> 00:06:39,840
you're when you're in the Python

00:06:38,100 --> 00:06:40,230
debugger is actually printing out the

00:06:39,840 --> 00:06:43,020
very

00:06:40,230 --> 00:06:45,180
you can you can see in your current

00:06:43,020 --> 00:06:47,280
context or you know if you you're trying

00:06:45,180 --> 00:06:49,560
to figure out why some variable wasn't

00:06:47,280 --> 00:06:52,320
set to what you thought it would be you

00:06:49,560 --> 00:06:54,300
can use print to look at those so print

00:06:52,320 --> 00:06:57,780
or P will just print out the that

00:06:54,300 --> 00:06:59,970
variable but you can also use PP to do a

00:06:57,780 --> 00:07:03,380
pretty print which makes things a lot

00:06:59,970 --> 00:07:06,930
easier to read so if we go here and we

00:07:03,380 --> 00:07:10,920
list here let's continue on so if we

00:07:06,930 --> 00:07:16,500
want to see what this year is then it

00:07:10,920 --> 00:07:19,800
just prints out 2015 so that just prints

00:07:16,500 --> 00:07:22,380
out what that variable is so I have

00:07:19,800 --> 00:07:25,560
another variable called example that I

00:07:22,380 --> 00:07:27,330
put in my PVR see so this just printing

00:07:25,560 --> 00:07:28,680
that now it's kind of hard to read it's

00:07:27,330 --> 00:07:30,780
a dictionary it's kinda hard to see what

00:07:28,680 --> 00:07:34,770
the keys are what the values are so if

00:07:30,780 --> 00:07:38,340
you do pretty print on it then it's a

00:07:34,770 --> 00:07:41,340
lot better although so here it organizes

00:07:38,340 --> 00:07:43,350
them by key and if that list was longer

00:07:41,340 --> 00:07:45,210
stayed was like 50 things in that list

00:07:43,350 --> 00:07:47,010
it would actually break that out into a

00:07:45,210 --> 00:07:49,350
long list so you can actually read the

00:07:47,010 --> 00:07:50,760
whole list in line so it's a really nice

00:07:49,350 --> 00:07:53,390
really handy thing so I pretty much

00:07:50,760 --> 00:07:56,520
default to typing PP and then whatever

00:07:53,390 --> 00:07:58,680
whatever variable or method or whatever

00:07:56,520 --> 00:08:01,280
it is so I automatically get pretty

00:07:58,680 --> 00:08:03,360
printing out output and it's fun to say

00:08:01,280 --> 00:08:10,590
it always gives me a chuckle because I'm

00:08:03,360 --> 00:08:12,210
like twelve years old and so I already

00:08:10,590 --> 00:08:14,010
talked about this in a little bit we can

00:08:12,210 --> 00:08:16,200
use in to go to the next line or next I

00:08:14,010 --> 00:08:18,300
always use in because this is a very

00:08:16,200 --> 00:08:21,000
common one to use so in is a lot quicker

00:08:18,300 --> 00:08:24,330
to do so if we go here we're at the top

00:08:21,000 --> 00:08:26,940
of the file if we type in it's so

00:08:24,330 --> 00:08:29,040
because we invoked it with the - in flag

00:08:26,940 --> 00:08:30,030
it started at the top of the file so

00:08:29,040 --> 00:08:32,250
it's actually running through all the

00:08:30,030 --> 00:08:34,650
imports and as I go next it just keeps

00:08:32,250 --> 00:08:36,630
going on down here it's going to read in

00:08:34,650 --> 00:08:41,720
the function now it's going to go down

00:08:36,630 --> 00:08:44,220
into our main method well there the

00:08:41,720 --> 00:08:45,960
thing that allows us to make this a

00:08:44,220 --> 00:08:47,730
command-line application so you can kind

00:08:45,960 --> 00:08:49,530
of just see how how the whole file is

00:08:47,730 --> 00:08:51,270
being processed by Python and you can

00:08:49,530 --> 00:08:53,630
step through piece by piece which is

00:08:51,270 --> 00:08:53,630
pretty nice

00:08:55,060 --> 00:09:01,790
so step is another way to traverse the

00:08:59,450 --> 00:09:03,860
code so next we'll just keep going next

00:09:01,790 --> 00:09:06,230
next next if you'll go into a loop if

00:09:03,860 --> 00:09:09,200
you're inside of a loop but it won't go

00:09:06,230 --> 00:09:11,330
into a function so if you want to see

00:09:09,200 --> 00:09:12,920
what that actual function does and look

00:09:11,330 --> 00:09:16,550
inside of that you can use the step

00:09:12,920 --> 00:09:22,040
function or step a command so in this

00:09:16,550 --> 00:09:25,070
case I will stop this actually I killed

00:09:22,040 --> 00:09:28,820
that it's already have a a PDB in here

00:09:25,070 --> 00:09:30,440
so I'm just gonna run it normally oh and

00:09:28,820 --> 00:09:33,110
in this script I should probably explain

00:09:30,440 --> 00:09:36,260
a little bit does anyone here know what

00:09:33,110 --> 00:09:38,150
a punch key is or paunchy it's a it's

00:09:36,260 --> 00:09:39,320
the most delicious thing they make right

00:09:38,150 --> 00:09:41,090
before lint so they got to get rid of

00:09:39,320 --> 00:09:43,160
all the good things in the kitchen all

00:09:41,090 --> 00:09:44,930
the jams the jeer that the jellies the

00:09:43,160 --> 00:09:46,610
fruits and they put them in these

00:09:44,930 --> 00:09:48,560
awesome doughnuts and they're the most

00:09:46,610 --> 00:09:51,380
amazing things ever and one year I

00:09:48,560 --> 00:09:52,670
missed I missed it so I missed the

00:09:51,380 --> 00:09:55,280
little window you have right before

00:09:52,670 --> 00:09:56,720
length to actually get these delicious

00:09:55,280 --> 00:09:59,300
pastries so I actually solved this

00:09:56,720 --> 00:10:02,630
problem with Python so now this runs on

00:09:59,300 --> 00:10:04,430
a cron job my server at home and alerts

00:10:02,630 --> 00:10:07,340
me a few days before that hey you need

00:10:04,430 --> 00:10:09,470
to go buy some punch key so it's been

00:10:07,340 --> 00:10:12,440
very effective I've gained weight so

00:10:09,470 --> 00:10:16,670
that's good so yeah we're gonna talk

00:10:12,440 --> 00:10:19,760
about step so here we are we're

00:10:16,670 --> 00:10:21,710
calculating lint and we're also trying

00:10:19,760 --> 00:10:23,870
to figure out what eastery are so I'm

00:10:21,710 --> 00:10:26,480
using date Utah which is an awesome

00:10:23,870 --> 00:10:28,910
library if you haven't used it so here

00:10:26,480 --> 00:10:30,680
right here I'm I'm calling the Easter

00:10:28,910 --> 00:10:33,140
function on this year and that'll tell

00:10:30,680 --> 00:10:35,030
me what day Easter is which is you know

00:10:33,140 --> 00:10:37,190
it's a complicated process so if I do

00:10:35,030 --> 00:10:40,250
step it actually takes me into the

00:10:37,190 --> 00:10:43,610
Easter function and now when I go next I

00:10:40,250 --> 00:10:46,850
can actually see how this is all how

00:10:43,610 --> 00:10:48,410
they're figuring out when Easter is so

00:10:46,850 --> 00:10:50,990
then you can you can walk through here

00:10:48,410 --> 00:10:52,460
and and see how they calculate that and

00:10:50,990 --> 00:10:55,690
so it's obviously not a very easy thing

00:10:52,460 --> 00:10:59,930
to figure out because this looks crazy

00:10:55,690 --> 00:11:01,430
so step is really powerful so you know

00:10:59,930 --> 00:11:02,870
if it's code you didn't write and you're

00:11:01,430 --> 00:11:03,740
using the framework you can actually

00:11:02,870 --> 00:11:06,620
step into the framework

00:11:03,740 --> 00:11:09,290
code and see how they're actually doing

00:11:06,620 --> 00:11:10,670
something without having to go you know

00:11:09,290 --> 00:11:12,260
dig up the source code to actually look

00:11:10,670 --> 00:11:13,550
out you can actually walk into and in

00:11:12,260 --> 00:11:16,610
here we can also you know we can use

00:11:13,550 --> 00:11:17,510
pretty pram so the year is as what we

00:11:16,610 --> 00:11:20,420
passed in I don't know why they're

00:11:17,510 --> 00:11:23,360
signing that the why maybe not the

00:11:20,420 --> 00:11:25,490
greatest example of of coding with a lot

00:11:23,360 --> 00:11:28,910
of single single letter variables

00:11:25,490 --> 00:11:31,340
especially see down further is actually

00:11:28,910 --> 00:11:32,900
a PDP command so it'll actually three of

00:11:31,340 --> 00:11:35,270
so it's another reason to use a pretty

00:11:32,900 --> 00:11:37,250
print or print because sometimes you

00:11:35,270 --> 00:11:39,710
might run into some code that is using a

00:11:37,250 --> 00:11:42,050
variable that's actually a PDB command

00:11:39,710 --> 00:11:43,880
and when you actually try to to print it

00:11:42,050 --> 00:11:46,850
out because like I'm type just Y and it

00:11:43,880 --> 00:11:49,610
gives me the year but if I was at a

00:11:46,850 --> 00:11:50,570
point where I was like in it would

00:11:49,610 --> 00:11:52,100
actually just go to the next line

00:11:50,570 --> 00:11:54,020
instead of actually printing out and so

00:11:52,100 --> 00:11:56,510
that's a good reason to always just use

00:11:54,020 --> 00:11:59,870
printer pretty brain um so yeah so then

00:11:56,510 --> 00:12:04,610
we can we just continue through so

00:11:59,870 --> 00:12:05,870
that's step next is until and that's

00:12:04,610 --> 00:12:10,150
actually not correct

00:12:05,870 --> 00:12:10,150
let me regenerate my slides real quick

00:12:11,740 --> 00:12:17,210
the power of open source in plain text

00:12:15,610 --> 00:12:20,810
there we go

00:12:17,210 --> 00:12:24,050
now it was correct so until it give us a

00:12:20,810 --> 00:12:26,990
way to sort of get through a loop

00:12:24,050 --> 00:12:32,750
without having to go next next next or

00:12:26,990 --> 00:12:36,080
set another breakpoint so here I go I

00:12:32,750 --> 00:12:38,750
have a example top I'm and so I have

00:12:36,080 --> 00:12:41,030
this file here I got a PDB trace in it

00:12:38,750 --> 00:12:44,110
and I'm just looping over oh s da Lister

00:12:41,030 --> 00:12:47,930
so if I run that command and run this

00:12:44,110 --> 00:12:50,900
Python code

00:12:47,930 --> 00:12:52,730
as I go next and you can see it's in the

00:12:50,900 --> 00:12:56,480
listing loop and now it's printing out

00:12:52,730 --> 00:13:01,430
all the the items in this directory so

00:12:56,480 --> 00:13:02,690
if I wanted to to go to line 11 I could

00:13:01,430 --> 00:13:04,250
use a break point but I could also just

00:13:02,690 --> 00:13:09,400
use until so if I type I'm still

00:13:04,250 --> 00:13:11,710
actually and so now I'm

00:13:09,400 --> 00:13:13,450
at the end of the loop and if I type

00:13:11,710 --> 00:13:15,190
until one more time it actually prints

00:13:13,450 --> 00:13:16,750
out the rest of the loop and takes me to

00:13:15,190 --> 00:13:18,190
the next line so you don't have to do

00:13:16,750 --> 00:13:20,070
anything else you can just use until to

00:13:18,190 --> 00:13:23,310
get outside of that loop and continue

00:13:20,070 --> 00:13:25,360
debugging that that bit of code

00:13:23,310 --> 00:13:27,280
especially if you're getting really like

00:13:25,360 --> 00:13:28,900
like nested list comprehensions or

00:13:27,280 --> 00:13:35,980
things like that this is an easy way to

00:13:28,900 --> 00:13:37,720
get through that you can skip to an end

00:13:35,980 --> 00:13:40,480
of the function as well so you can just

00:13:37,720 --> 00:13:43,210
use return so if you're in a method you

00:13:40,480 --> 00:13:44,440
can just use return or R to get to the

00:13:43,210 --> 00:13:46,990
end of that method and then go from

00:13:44,440 --> 00:13:49,330
there so if you're you know traversing

00:13:46,990 --> 00:13:50,440
through a bunch of different code there

00:13:49,330 --> 00:13:52,330
may be functions you don't care about

00:13:50,440 --> 00:13:53,680
but you want to get to the next line of

00:13:52,330 --> 00:13:55,660
execution without how-to having to set

00:13:53,680 --> 00:14:04,270
another breakpoint so you can do that by

00:13:55,660 --> 00:14:07,120
using a return so I will so right now

00:14:04,270 --> 00:14:11,890
we're inside of the main function and if

00:14:07,120 --> 00:14:14,550
we type return it takes me to where this

00:14:11,890 --> 00:14:19,690
this method or this function actually

00:14:14,550 --> 00:14:22,060
ends and because we're not yet to the

00:14:19,690 --> 00:14:23,230
the window of time divide punch key it's

00:14:22,060 --> 00:14:24,820
actually going to give us a it's going

00:14:23,230 --> 00:14:26,800
to exit out the script with sistar exit

00:14:24,820 --> 00:14:28,360
so we can actually see that here and we

00:14:26,800 --> 00:14:30,160
can actually see the return value at the

00:14:28,360 --> 00:14:31,240
bottom I know if you can see that but

00:14:30,160 --> 00:14:33,880
it'll actually show you what the return

00:14:31,240 --> 00:14:35,860
value was as well so you don't have to

00:14:33,880 --> 00:14:37,090
actually investigate what would it

00:14:35,860 --> 00:14:38,530
actually return and in this case I

00:14:37,090 --> 00:14:41,530
didn't return any or variable or

00:14:38,530 --> 00:14:46,540
anything so it just gives you the return

00:14:41,530 --> 00:14:48,610
value that you can inspect from there so

00:14:46,540 --> 00:14:50,980
breakpoints another really handy feature

00:14:48,610 --> 00:14:54,340
so we're you know we've seen II just set

00:14:50,980 --> 00:14:56,410
up a set trace with with the PDB module

00:14:54,340 --> 00:14:59,380
we can also set breakpoints why you're

00:14:56,410 --> 00:15:02,050
in the debugger so if there's different

00:14:59,380 --> 00:15:03,880
parts of the script or module do you

00:15:02,050 --> 00:15:07,030
want a debug you can actually set those

00:15:03,880 --> 00:15:09,070
break points with with break or B for

00:15:07,030 --> 00:15:11,470
shortcut and if you just type B it'll

00:15:09,070 --> 00:15:13,390
show you the current breakpoints and

00:15:11,470 --> 00:15:15,220
then you can type B and then a line

00:15:13,390 --> 00:15:16,780
number and you can set a breakpoint at

00:15:15,220 --> 00:15:19,900
that point you can also set a breakpoint

00:15:16,780 --> 00:15:20,830
in another file it's a little more

00:15:19,900 --> 00:15:21,230
difficult because you're not you know

00:15:20,830 --> 00:15:23,120
there's no

00:15:21,230 --> 00:15:24,320
like command-line completionists gonna

00:15:23,120 --> 00:15:27,530
you have to know the name of the file

00:15:24,320 --> 00:15:29,510
and know the line numer and all that so

00:15:27,530 --> 00:15:33,680
let's look at that real quick so if I

00:15:29,510 --> 00:15:36,350
type this over so I bet I'd be right now

00:15:33,680 --> 00:15:41,000
there's no breakpoints but if I set a

00:15:36,350 --> 00:15:43,760
breakpoint at line 16 then I be I can

00:15:41,000 --> 00:15:45,440
see the number of the breakpoint which

00:15:43,760 --> 00:15:49,010
is the one we just saw that's useful

00:15:45,440 --> 00:15:51,350
later if we want to clear it out the the

00:15:49,010 --> 00:15:53,750
type of breakpoint and then where it's

00:15:51,350 --> 00:15:57,050
at and then after its run so if we

00:15:53,750 --> 00:15:58,160
continue and we to be again it'll tell

00:15:57,050 --> 00:16:02,390
us how many times I hit that break point

00:15:58,160 --> 00:16:04,370
so it that's that's especially useful

00:16:02,390 --> 00:16:05,810
with the conditional breakpoints which

00:16:04,370 --> 00:16:07,160
I'll show here in a second so you can

00:16:05,810 --> 00:16:08,600
see if it actually did hit your

00:16:07,160 --> 00:16:11,660
breakpoint or not because you could set

00:16:08,600 --> 00:16:13,730
the breakpoint and not actually hit it

00:16:11,660 --> 00:16:16,370
and this will tell you if you if you hit

00:16:13,730 --> 00:16:18,290
it or not so once we set a breakpoint

00:16:16,370 --> 00:16:19,550
and we want to clear it out so maybe we

00:16:18,290 --> 00:16:21,560
started on a loop and we don't want to

00:16:19,550 --> 00:16:24,050
hit that break point every time we can

00:16:21,560 --> 00:16:27,290
actually use the clear or CL to clear it

00:16:24,050 --> 00:16:29,900
out so I know the number is one so I can

00:16:27,290 --> 00:16:32,360
say CL one and now there's no more

00:16:29,900 --> 00:16:34,760
breakpoints set so that's this is really

00:16:32,360 --> 00:16:36,110
handy when you're you've started in one

00:16:34,760 --> 00:16:38,470
place and you realize you want to you

00:16:36,110 --> 00:16:45,380
want to stop in some other place to

00:16:38,470 --> 00:16:48,050
debug things continue is also important

00:16:45,380 --> 00:16:50,840
so once you're inside of the code and

00:16:48,050 --> 00:16:52,040
you you you're done looking at it and

00:16:50,840 --> 00:16:53,600
you you don't want to do anything else

00:16:52,040 --> 00:16:57,650
but you want to continue the execution

00:16:53,600 --> 00:17:00,110
you can type C so say you were debugging

00:16:57,650 --> 00:17:02,600
you know a view in a pyramid app or

00:17:00,110 --> 00:17:04,970
something when when you hit your break

00:17:02,600 --> 00:17:07,340
point the the system is waiting for you

00:17:04,970 --> 00:17:09,200
to finish that debugging session and if

00:17:07,340 --> 00:17:11,210
you type C it will it'll continue

00:17:09,200 --> 00:17:13,270
executing the rest of the code and give

00:17:11,210 --> 00:17:15,260
you the result of whatever was happening

00:17:13,270 --> 00:17:17,000
so that way you can you can actually

00:17:15,260 --> 00:17:22,010
change things in the debugger and then

00:17:17,000 --> 00:17:24,980
see how that that results so we've seen

00:17:22,010 --> 00:17:29,270
this a little bit I think so here I'm on

00:17:24,980 --> 00:17:31,070
line 12 because I have a PDB set race if

00:17:29,270 --> 00:17:32,150
it also build will go to the next

00:17:31,070 --> 00:17:34,440
breakpoint so if I set another

00:17:32,150 --> 00:17:36,660
breakpoint in line 16

00:17:34,440 --> 00:17:38,700
and type-c it'll continue till the next

00:17:36,660 --> 00:17:41,610
breakpoint and then if I type C again

00:17:38,700 --> 00:17:43,980
it's gonna continue on throughout none

00:17:41,610 --> 00:17:47,550
of the way I get an error this has no

00:17:43,980 --> 00:17:51,240
test so it works

00:17:47,550 --> 00:17:54,900
I know that so C just gets you through

00:17:51,240 --> 00:17:56,580
the rest of the execution you can also

00:17:54,900 --> 00:18:00,060
do conditional breakpoints this is

00:17:56,580 --> 00:18:02,400
really handy if you know a certain way

00:18:00,060 --> 00:18:06,390
that the application may break and you

00:18:02,400 --> 00:18:07,740
can actually set a expression you can

00:18:06,390 --> 00:18:10,560
see you can say I want a breakpoint at

00:18:07,740 --> 00:18:13,530
line 11 with this expression this year

00:18:10,560 --> 00:18:15,450
equals 2015 so this is this is super

00:18:13,530 --> 00:18:17,130
handy especially if you know it's a it's

00:18:15,450 --> 00:18:18,930
a loop and it's looping over a thousands

00:18:17,130 --> 00:18:21,060
hundreds of thousands of things you can

00:18:18,930 --> 00:18:24,060
actually get to that one one point you

00:18:21,060 --> 00:18:29,280
wanna you know breaks it so here in this

00:18:24,060 --> 00:18:32,870
case just again and actually need to

00:18:29,280 --> 00:18:32,870
move my breakpoint

00:18:35,360 --> 00:18:44,130
so I'm is drop the top of the method and

00:18:40,380 --> 00:18:47,790
so now I want to set a conditional

00:18:44,130 --> 00:18:52,230
breakpoint based on the year so I'm

00:18:47,790 --> 00:18:54,780
going to set it for 2014 so on line 11

00:18:52,230 --> 00:18:56,760
if the current year is 2014 it's gonna

00:18:54,780 --> 00:19:00,510
stop now but if it's not it's gonna keep

00:18:56,760 --> 00:19:03,690
keep going so we can look again we can

00:19:00,510 --> 00:19:05,640
see stop only if this year equals equals

00:19:03,690 --> 00:19:08,220
2014 so you can see what you actually

00:19:05,640 --> 00:19:14,700
said as the condition and now if I

00:19:08,220 --> 00:19:17,370
continue through you can see that the

00:19:14,700 --> 00:19:20,250
breakpoint was hit but this year is not

00:19:17,370 --> 00:19:25,770
actually 2014 so it shouldn't have

00:19:20,250 --> 00:19:30,050
stopped but it did so it's pronounced

00:19:25,770 --> 00:19:30,050
year or this year

00:19:33,419 --> 00:19:37,879
okay let's try this again

00:19:44,770 --> 00:19:51,790
actually it's file I'm going to take

00:19:49,870 --> 00:19:59,470
this out I'm just going to do it with

00:19:51,790 --> 00:20:06,610
the PDB module and now I will set the

00:19:59,470 --> 00:20:07,810
breakpoint go I'll continue and so break

00:20:06,610 --> 00:20:09,130
won't already hit one time but we're

00:20:07,810 --> 00:20:11,200
still at the top of the file so it

00:20:09,130 --> 00:20:16,300
didn't actually stop on that condition

00:20:11,200 --> 00:20:20,980
because it's 2015 so if we change that

00:20:16,300 --> 00:20:22,300
to be 2015 then we can see we have two

00:20:20,980 --> 00:20:24,280
breakpoints this one hasn't been hit yet

00:20:22,300 --> 00:20:27,130
if we continue through now we've stopped

00:20:24,280 --> 00:20:29,560
at line 11 because this year is 2015 and

00:20:27,130 --> 00:20:30,820
I mean if we look at the list here we

00:20:29,560 --> 00:20:31,060
can see the other breakpoint was hit

00:20:30,820 --> 00:20:33,550
twice

00:20:31,060 --> 00:20:35,290
this one's hit once now this is a really

00:20:33,550 --> 00:20:41,050
powerful feature to stop exactly where

00:20:35,290 --> 00:20:42,760
you want to stop in your code another

00:20:41,050 --> 00:20:45,520
really powerful thing is being able to

00:20:42,760 --> 00:20:48,130
navigate the stack so where will tell

00:20:45,520 --> 00:20:55,060
you where you're at in the current stack

00:20:48,130 --> 00:20:58,060
so if I go next and step into this

00:20:55,060 --> 00:21:04,300
function so now I'm inside of the date

00:20:58,060 --> 00:21:06,820
you tool code if I type where then this

00:21:04,300 --> 00:21:08,320
shows me where I am currently which is

00:21:06,820 --> 00:21:12,850
the bottom line and then all the things

00:21:08,320 --> 00:21:14,680
that's called up up the stack so if

00:21:12,850 --> 00:21:16,630
you're in a you know web framework or

00:21:14,680 --> 00:21:18,970
something this could be a very long list

00:21:16,630 --> 00:21:21,640
of things in this case you know I'm just

00:21:18,970 --> 00:21:23,590
calling one one other Python package so

00:21:21,640 --> 00:21:26,380
I'm I'm pretty shallow and in a number

00:21:23,590 --> 00:21:28,330
of things we have here but still can be

00:21:26,380 --> 00:21:32,050
useful if I want to debug what's going

00:21:28,330 --> 00:21:33,970
on and so you can go up and down the

00:21:32,050 --> 00:21:36,910
stack so once you know where you want to

00:21:33,970 --> 00:21:42,130
be in that stack you can use up or down

00:21:36,910 --> 00:21:44,710
or you or D to do that so if I go up now

00:21:42,130 --> 00:21:47,080
I'm back to where I started but then I

00:21:44,710 --> 00:21:49,440
can also go back down I can go all the

00:21:47,080 --> 00:21:49,440
way the top

00:21:49,460 --> 00:21:53,720
and then couldn't I get source code so

00:21:51,590 --> 00:21:55,700
it's interesting so then enough I type

00:21:53,720 --> 00:21:57,470
where again you can see it's kind of

00:21:55,700 --> 00:21:58,820
hard to see but there's the there's like

00:21:57,470 --> 00:22:00,020
little arrows but then there's the the

00:21:58,820 --> 00:22:01,880
greater than that tells you where you're

00:22:00,020 --> 00:22:06,620
at in the stack now now you've gone up

00:22:01,880 --> 00:22:10,820
and down there's some new features in

00:22:06,620 --> 00:22:14,420
Python 3 they interact command gives you

00:22:10,820 --> 00:22:16,940
a Python console inside of PDB with the

00:22:14,420 --> 00:22:18,620
current scope so if anyone's ever been

00:22:16,940 --> 00:22:21,500
in the PDB prompt and tried to do

00:22:18,620 --> 00:22:22,880
something like an if statement or like

00:22:21,500 --> 00:22:24,170
create a class or create a method you

00:22:22,880 --> 00:22:25,550
can't do that

00:22:24,170 --> 00:22:27,320
but in Python 3 they've added the

00:22:25,550 --> 00:22:29,210
interact command and that'll actually

00:22:27,320 --> 00:22:31,490
drop you into a Python prompt and you

00:22:29,210 --> 00:22:34,610
can do more advanced Python things with

00:22:31,490 --> 00:22:38,510
out there and actually PDP plus plus

00:22:34,610 --> 00:22:43,850
also adds that feature and so now let's

00:22:38,510 --> 00:22:45,530
drop me into a a Python prompts and it's

00:22:43,850 --> 00:22:53,140
giving me everything that we have there

00:22:45,530 --> 00:22:53,140
so you actually don't know where I'm at

00:23:03,980 --> 00:23:07,700
so then you could even create class

00:23:05,960 --> 00:23:08,899
creative method do off more and more

00:23:07,700 --> 00:23:11,659
advanced things from there

00:23:08,899 --> 00:23:14,750
which is nice another feature in Python

00:23:11,659 --> 00:23:17,149
3 is a long list so you know you

00:23:14,750 --> 00:23:18,500
remember me griping about lists always

00:23:17,149 --> 00:23:20,090
going to the next 10 lines long list

00:23:18,500 --> 00:23:22,760
will show you the full method of what

00:23:20,090 --> 00:23:26,269
you're in and actually PDP + + has this

00:23:22,760 --> 00:23:27,830
as well so if I type iced I thought it

00:23:26,269 --> 00:23:31,460
did oh and then the console

00:23:27,830 --> 00:23:34,220
yeah clear that so now it's shown me

00:23:31,460 --> 00:23:36,529
well as much as they can of the current

00:23:34,220 --> 00:23:38,659
function I man instead of list which

00:23:36,529 --> 00:23:40,250
just keeps going through the file so

00:23:38,659 --> 00:23:43,700
it's a really really handy command that

00:23:40,250 --> 00:23:45,320
got added in Python 3 and when you're

00:23:43,700 --> 00:23:46,730
when you're done you can actually quit

00:23:45,320 --> 00:23:49,940
and this is the sort of the opposite of

00:23:46,730 --> 00:23:52,039
continued so we're continue continues

00:23:49,940 --> 00:23:53,840
and does the rest of the execution quit

00:23:52,039 --> 00:23:56,419
will just quit out of PDB and stop the

00:23:53,840 --> 00:23:58,340
execution so if if you did something

00:23:56,419 --> 00:23:59,450
your debug debugging something where you

00:23:58,340 --> 00:24:01,909
don't want it to actually execute that

00:23:59,450 --> 00:24:03,049
code you can use Q to quit out of it I

00:24:01,909 --> 00:24:05,179
mean if something might write to the

00:24:03,049 --> 00:24:07,190
database or do something you don't want

00:24:05,179 --> 00:24:10,690
to do you can actually use cute to stop

00:24:07,190 --> 00:24:12,950
execution so in this case if I run this

00:24:10,690 --> 00:24:15,130
it actually just quits out at the

00:24:12,950 --> 00:24:18,169
beginning instead of looping through so

00:24:15,130 --> 00:24:20,870
with continued because I started with a

00:24:18,169 --> 00:24:24,320
- M PDB it just keeps running it with

00:24:20,870 --> 00:24:28,760
PDB if I do queue it automatically just

00:24:24,320 --> 00:24:30,380
jumps out there's some PDB alternatives

00:24:28,760 --> 00:24:32,720
so I showed off PT plus plus which is

00:24:30,380 --> 00:24:36,200
nice I know the popular one is AI PDB so

00:24:32,720 --> 00:24:37,850
it's a Python and PDB together so it

00:24:36,200 --> 00:24:41,659
gives you more tab completion some some

00:24:37,850 --> 00:24:43,490
better nicer features like that I don't

00:24:41,659 --> 00:24:45,260
I don't really use IDP Bheema that much

00:24:43,490 --> 00:24:47,240
and I actually don't use PT + + that

00:24:45,260 --> 00:24:49,940
much either

00:24:47,240 --> 00:24:52,490
typically I'm using just PDB but I do I

00:24:49,940 --> 00:24:55,159
do like using pdb + + I just I forget to

00:24:52,490 --> 00:24:56,720
use it but it's it's it's really handy

00:24:55,159 --> 00:24:58,220
especially that sticky mode I really

00:24:56,720 --> 00:24:59,570
like that if I'm going through a very

00:24:58,220 --> 00:25:02,269
long debugging session I will actually

00:24:59,570 --> 00:25:04,549
install PDB plus + and use that to do

00:25:02,269 --> 00:25:06,710
things there's also our PDB in a remote

00:25:04,549 --> 00:25:08,659
PDB I'm not sure which ones maintain

00:25:06,710 --> 00:25:13,940
more than the other this way allows you

00:25:08,659 --> 00:25:15,830
to do get a Python or PDB prompt inside

00:25:13,940 --> 00:25:17,299
of a remote process so if you're using

00:25:15,830 --> 00:25:18,830
something like celery

00:25:17,299 --> 00:25:20,899
or something that's asynchronous you can

00:25:18,830 --> 00:25:22,580
actually put a PDB in there and then run

00:25:20,899 --> 00:25:24,320
a command on your computer and it'll

00:25:22,580 --> 00:25:26,269
connect to that once it hits it and then

00:25:24,320 --> 00:25:30,320
you can debug that remotely so it's a

00:25:26,269 --> 00:25:32,779
really powerful tool as well there's

00:25:30,320 --> 00:25:34,009
some helpers there's a PD be sublime

00:25:32,779 --> 00:25:37,369
text support which actually show you

00:25:34,009 --> 00:25:39,289
what line you're on in sublime text and

00:25:37,369 --> 00:25:41,179
there's something else for for textmate

00:25:39,289 --> 00:25:43,279
there's vim PDB which gives you

00:25:41,179 --> 00:25:45,139
interaction with them similar thing

00:25:43,279 --> 00:25:47,509
there's actually flaky debugger which is

00:25:45,139 --> 00:25:49,879
a flaky plugin to warn you when you've

00:25:47,509 --> 00:25:50,960
left a PDB in your code because if you

00:25:49,879 --> 00:25:54,529
do that and release to production you've

00:25:50,960 --> 00:25:58,190
done terrible things and there's also a

00:25:54,529 --> 00:25:59,720
way to personalize your your PDB the PBR

00:25:58,190 --> 00:26:01,669
see so you can actually set up aliases

00:25:59,720 --> 00:26:04,759
and custom mappings and if you don't

00:26:01,669 --> 00:26:06,350
want to install like an IP DB or a PDB

00:26:04,759 --> 00:26:10,929
plus plus you can actually enhance the

00:26:06,350 --> 00:26:13,489
read line support via that which is nice

00:26:10,929 --> 00:26:15,169
and then I've put a couple links and

00:26:13,489 --> 00:26:18,499
I'll put these slides up and tweet tweet

00:26:15,169 --> 00:26:21,139
those out the Python module the week by

00:26:18,499 --> 00:26:23,210
Doug Hellman has a really extensive

00:26:21,139 --> 00:26:24,739
right up on PDB that goes over pretty

00:26:23,210 --> 00:26:26,419
much everything there's some things that

00:26:24,739 --> 00:26:28,759
it wasn't able to get to which is like

00:26:26,419 --> 00:26:30,529
time travel which obviously sounds

00:26:28,759 --> 00:26:31,669
sounds complex that's why you know 30

00:26:30,529 --> 00:26:33,769
minutes was not enough to talk about

00:26:31,669 --> 00:26:36,559
time travel so that's all talked about

00:26:33,769 --> 00:26:38,749
there and then last year an 18 euro gave

00:26:36,559 --> 00:26:40,999
a talk called in-depth PDB here in

00:26:38,749 --> 00:26:44,590
Montreal it was really good so I suggest

00:26:40,999 --> 00:26:51,230
to go watch that as well and that's it

00:26:44,590 --> 00:26:53,960
thank you so if you have any questions

00:26:51,230 --> 00:26:56,989
for Clayton there is a microphone in the

00:26:53,960 --> 00:26:58,580
center of the room just see if there are

00:26:56,989 --> 00:27:00,609
some people who want to line up yes

00:26:58,580 --> 00:27:04,279
indeed there are first question please

00:27:00,609 --> 00:27:07,580
is there a way to monitor for variable

00:27:04,279 --> 00:27:12,980
change in DB like to watch a variable

00:27:07,580 --> 00:27:14,330
yeah I've not used that function so I

00:27:12,980 --> 00:27:18,950
don't know there might be but I'm not

00:27:14,330 --> 00:27:21,200
certain there is okay next

00:27:18,950 --> 00:27:23,419
so I noticed you had some kind of power

00:27:21,200 --> 00:27:26,779
line thing going on I'm there where did

00:27:23,419 --> 00:27:28,999
you get that that was inspired by Weimar

00:27:26,779 --> 00:27:30,660
so I was there's a Tmax show yeah so

00:27:28,999 --> 00:27:32,580
it's I just

00:27:30,660 --> 00:27:37,680
that's not that's not PDV plus plaus

00:27:32,580 --> 00:27:39,450
doing no no that was my show I'm a

00:27:37,680 --> 00:27:41,790
novice in general my experience with

00:27:39,450 --> 00:27:44,520
debugger includes the Eclipse and patch

00:27:41,790 --> 00:27:46,740
arm-based debuggers do you have any sort

00:27:44,520 --> 00:27:50,750
of a argument for me to try switch

00:27:46,740 --> 00:27:50,750
something like DVD be from gui-based

00:27:50,900 --> 00:27:55,170
subjective opinion based yeah I mean I

00:27:54,060 --> 00:27:56,940
think if you're if you're already happy

00:27:55,170 --> 00:27:59,480
with using it instead of you know

00:27:56,940 --> 00:28:02,670
eclipse or whatever I think that's fine

00:27:59,480 --> 00:28:05,010
if you're trying to debug something on a

00:28:02,670 --> 00:28:06,360
remote machine yeah you know you're you

00:28:05,010 --> 00:28:07,620
don't have access to that the GUI

00:28:06,360 --> 00:28:09,120
environment then then you would want to

00:28:07,620 --> 00:28:11,580
use p2p through through the command line

00:28:09,120 --> 00:28:13,380
without probably the only reason it's

00:28:11,580 --> 00:28:16,550
still good cause even fuse to GUI it's

00:28:13,380 --> 00:28:19,650
like everything you said I think there's

00:28:16,550 --> 00:28:20,880
and I had not you know gone as far as

00:28:19,650 --> 00:28:23,270
some of the things you subscribe so I

00:28:20,880 --> 00:28:25,590
think it's still pretty our world ok

00:28:23,270 --> 00:28:28,700
we'll take these lost to people who are

00:28:25,590 --> 00:28:33,060
in line now thanks for Spock it was good

00:28:28,700 --> 00:28:36,690
does a PDP have a way to trigger on like

00:28:33,060 --> 00:28:38,640
raised exceptions automatically or there

00:28:36,690 --> 00:28:40,410
there are some people have written

00:28:38,640 --> 00:28:43,620
packages to do post-mortem debugging so

00:28:40,410 --> 00:28:45,300
I can't do post-mortem and so you can I

00:28:43,620 --> 00:28:46,830
think you can I forget what the the

00:28:45,300 --> 00:28:48,540
flags are where you can start that start

00:28:46,830 --> 00:28:50,580
programs usually with with that flag and

00:28:48,540 --> 00:28:52,800
then they'll do that for you ok thank

00:28:50,580 --> 00:28:55,080
you ok this will be our last question

00:28:52,800 --> 00:28:57,090
ok great talk I was wondering is there a

00:28:55,080 --> 00:28:58,680
way to customize the number of lines you

00:28:57,090 --> 00:29:00,660
see when you break because I think I use

00:28:58,680 --> 00:29:05,790
IP DB and I don't see you like 30 lines

00:29:00,660 --> 00:29:06,960
that you see well in NP to be plus plus

00:29:05,790 --> 00:29:10,520
you probably there's there's a lot of

00:29:06,960 --> 00:29:14,040
options in PV plus plus any regular PDB

00:29:10,520 --> 00:29:16,140
you could probably make aliases to do

00:29:14,040 --> 00:29:19,200
all that stuff you know like lists you

00:29:16,140 --> 00:29:21,330
know the next so many lines but by

00:29:19,200 --> 00:29:23,760
default I don't think there is thank you

00:29:21,330 --> 00:29:26,120
right everybody please thank Clayton

00:29:23,760 --> 00:29:26,120

YouTube URL: https://www.youtube.com/watch?v=P0pIW5tJrRM


