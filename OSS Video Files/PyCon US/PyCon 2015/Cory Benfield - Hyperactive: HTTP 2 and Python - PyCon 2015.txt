Title: Cory Benfield - Hyperactive: HTTP 2 and Python - PyCon 2015
Publication date: 2015-04-11
Playlist: PyCon 2015
Description: 
	"Speaker: Cory Benfield

The internet has spoken, HTTP is to get its first serious update in 15 years. In this talk we'll discuss what HTTP/2 is, why it's happening, and how it's going to affect you and everyone you love. We'll briefly talk about how you can get started with HTTP/2, and some interesting projects associated with it, including Hyper, the first Python HTTP/2 library.

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:00,680 --> 00:00:12,330
THERE IS CRITICISM OF HTTP2, I'M CALLING IT OUT

00:00:12,330 --> 00:00:25,280
BECAUSE I'M CERTAIN A LOT OF PEOPLE IN THE ROOM

00:00:25,280 --> 00:00:27,220
HAVE READ THE VARIOUS DOCUMENTS TAKING SHOTS AT

00:00:27,220 --> 00:00:28,220
THE PROTOCOL.

00:00:28,220 --> 00:00:30,111
POLLEN AND CAMP IS A BSD DEVELOPER, LEAD DEVELOPER OF THE VARNISH HTTM PROTOCOL AND

00:00:30,111 --> 00:00:32,989
HE'S CIRCULATED A LOT OF WRITING ABOUT HOW TERRIBLE

00:00:32,989 --> 00:00:34,870
IT IS, AND I MYSELF AM VERY GLAD HE DOESN'T HAVE

00:00:34,870 --> 00:00:37,460
A PROTOCOL DESIGN CLASS FOR ME TO FLUNK OUT

00:00:37,460 --> 00:00:38,460
OF.

00:00:38,460 --> 00:00:44,420
BUT THE QUESTION IS, WHY, WHY IS THERE SO MUCH

00:00:44,420 --> 00:00:49,059
NEGATIVITY ABOUT HTTP2 WHEN IT HAS SO MANY NICE

00:00:49,059 --> 00:00:50,140
THINGS IN IT?

00:00:50,140 --> 00:00:53,120
THE REAL ANSWER IS MUCH LIKE HTTP1, IT'S A FLAWED

00:00:53,120 --> 00:00:54,390
PROTOCOL, IT'S NOT PERFECT.

00:00:54,390 --> 00:00:56,170
I WOULD CONTEND THAT NO PROTOCOL EVER IS, AND SO

00:00:56,170 --> 00:00:57,780
WE'VE TRADED SOME DOWNSIDES FOR OTHER DOWNSIDES.

00:00:57,780 --> 00:00:58,780
SOME GOOD EXAMPLES.

00:00:58,780 --> 00:00:59,780
IT'S REALLY TRICKY TO REASON ABOUT.

00:00:59,780 --> 00:01:05,420
SO HTTP1 TO ONE HAS AS ONE OF ITS GREAT JOYS, VERY EASY TO LOOK AT A WAY TO SPOT WHAT THE

00:01:05,420 --> 00:01:06,960
PROBLEM IS, SO THE BRAIN, HUMAN BRAIN IS GREAT AT

00:01:06,960 --> 00:01:12,670
PATTERN MATCHING AND WE CAN LOOK AT THE TEXT RESPONSE AND SAY THAT CAN'T POSSIBLY BE RIGHT

00:01:12,670 --> 00:01:16,100
BECAUSE WEIRD THING HERE IS GOING WRONG AND IT'S

00:01:16,100 --> 00:01:17,950
HARD FOR CODES TO SPOT THAT.

00:01:17,950 --> 00:01:21,119
BUT THE WORST PART IS, HPPT2 MAINTAINS REALLY EXTENSIVE STATE IN ITS CONNECTIONS, SO IN

00:01:21,119 --> 00:01:24,020
HPPP1 TO ONE, YOU COULD HOP INTO THE FIFTH REQUEST

00:01:24,020 --> 00:01:26,900
IN A SEQUENCE AND IT WOULD STAND ALONE, YOU COULD

00:01:26,900 --> 00:01:29,119
UNDERSTAND IT IN COMPLETE CONTEXT WITH NO EXTRA

00:01:29,119 --> 00:01:30,119
TOOLS.

00:01:30,119 --> 00:01:32,080
AND YOU CAN'T DO THAT IN HPP-- HTTP-2, SO THE

00:01:32,080 --> 00:01:34,240
FIFTH REQUEST WILL SAY RESEND HEADER 5.

00:01:34,240 --> 00:01:36,090
WHAT THE HELL IS HEADER 5?

00:01:36,090 --> 00:01:38,080
I HAVE NO IDEA WHAT THAT WAS.

00:01:38,080 --> 00:01:40,400
SO YOU NEED COOPERATION FROM YOUR TOOLS AND THIS

00:01:40,400 --> 00:01:42,980
MEANS THAT BASICALLY TOOLS NOW NEED TO BE ABLE TO

00:01:42,980 --> 00:01:45,040
DROP THEIR CONNECTION STATE INTO DEBUG LOGS FOR

00:01:45,040 --> 00:01:47,360
TO YOU SUCCESSFULLY DEBUG AND MOST TOOLS HAVE NOT

00:01:47,360 --> 00:01:48,360
WRITTEN THAT FUNCTION.

00:01:48,360 --> 00:01:52,920
THIS ALSO MEANS THAT IT'S REALLY HARD TO DEBUG, YOU NEED TO DO A TON OF INTERRUPT TESTING,

00:01:52,920 --> 00:01:56,159
THAT'S THE ONLY WAY YOU CAN BE SURE YOU'VE IMPLEMENTED

00:01:56,159 --> 00:01:58,430
CORRECTLY IS GET EVERY OTHER IMPLEMENTATION AND

00:01:58,430 --> 00:02:00,049
RUN YOUR CODES AGAINST THEM.

00:02:00,049 --> 00:02:02,780
THERE ARE SOME GREAT RESOURCES FOR DOING THIS BUT

00:02:02,780 --> 00:02:04,470
YOU HAVE TO FIND THEM.

00:02:04,470 --> 00:02:07,159
IT'S GOT SOME REALLY TERRIBLE AWKWARD EDGE CASES

00:02:07,159 --> 00:02:10,189
AND THESE CAME OUT BECAUSE WE WERE REQUIRED TO

00:02:10,189 --> 00:02:11,870
MAINTAIN COMPATIBILITY WITH HPT-- HTTP1.1.

00:02:11,870 --> 00:02:16,900
SO ANYTHING YOU COULD SEND IN ONE HAD TO BE ABLE

00:02:16,900 --> 00:02:20,189
TO BE SENT IN TWO.

00:02:20,189 --> 00:02:24,120
THE BIGGEST PROBLEM IS HEADERS SO, HPP-- HTTP2 FRAMES, THEY HAVE A MAXIMUM LENGTH, IN PRACTICE,

00:02:24,120 --> 00:02:25,120
16 KILOBYTES.

00:02:25,120 --> 00:02:28,340
AND ITS TURNS OUT YOU CAN HAVE A SINGLE HEADER THAT'S MORE THAN 16 KILOBYTES LONG.

00:02:28,340 --> 00:02:30,579
COBRA WILL GENERATE HEADERS THAT ARE THAT LARGE

00:02:30,579 --> 00:02:31,579
FOR THEIR TOKENNIZATION.

00:02:31,579 --> 00:02:35,559
NOW, FOR ME, I WOULD CALL THAT A GOOD REASON TO

00:02:35,559 --> 00:02:36,719
ABANDON COBRAS BUT UNFORTUNATELY, I CAN'T MAKE

00:02:36,719 --> 00:02:41,709
THOSE MANDATES SO INSTEAD WE HAVE TO ALLOW IT AND

00:02:41,709 --> 00:02:45,590
THIS MEANS IN PRACTICE, YOU CAN FREEZE AN HTTP2

00:02:45,590 --> 00:02:50,459
CONNECTION DEAD BY SENDING OFFICIALLY LARGE HEADERS AND NOT FINISHING THEM OFF.

00:02:50,459 --> 00:02:52,499
THIS IS WE'LL QUITE TRICKY.

00:02:52,499 --> 00:02:56,319
I FOUND ONE FOR PYTHON, THOUGH, FUNDAMENTALLY HTTP2 IS INHERENTLY CONCURRENT, IT'S GOT ONE

00:02:56,319 --> 00:03:00,529
TCP STREAM DOWN WHICH IT SENDS DATA AND ALSO CONTROL

00:03:00,529 --> 00:03:04,049
FRAMES SO THINGS LIKE IS THIS CONNECTION STILL ALIVE, PLEASE INCREASE YOUR FLOW CONTROL WINDOW,

00:03:04,049 --> 00:03:05,159
PLEASE CHANGE YOUR HEADER COMPRESSION STATE.

00:03:05,159 --> 00:03:06,540
YOU NEED TO PROCESS THESE PROMPTLY.

00:03:06,540 --> 00:03:10,999
THEY NEED -- YOU NEED TO BE PUMPING THAT CONNECTION ALL THE TIME AND THIS IS REALLY

00:03:10,999 --> 00:03:12,230
DIFFICULT IN SYNCHRONOUS PROGRAMMING LIKE WHAT A

00:03:12,230 --> 00:03:13,230
LOT OF US DO IN PYTHON.

00:03:13,230 --> 00:03:16,159
IF YOU'RE USED TO USING REQUESTS, YOU'RE GOING TO

00:03:16,159 --> 00:03:20,901
FIND THIS REALLY VERY TRICKY AND WE'VE GOT TO DO

00:03:20,901 --> 00:03:24,709
A LOT OF CLEVER WORK TO MAKE SURE THAT WE CAN

00:03:24,709 --> 00:03:25,979
HANDLE THIS APPROPRIATELY.

00:03:25,979 --> 00:03:28,010
IT'S GOING TO BE REALLY HARD, I'M PROBABLY NOT

00:03:28,010 --> 00:03:29,089
SMARTS ENOUGH TO SOLVE IT.

00:03:29,089 --> 00:03:32,329
IF THERE IS ANYONE, COME TALK TO ME OR EVEN IF

00:03:32,329 --> 00:03:37,079
YOU'RE NOT SMART ENOUGH TO SOLVE IT, BUT WOULD LIKE TO HELP, I CAN'T DO IT ON MY OWN.

00:03:37,079 --> 00:03:39,839
I WOULDN'T BE SURPRISED TO FIND THAT HTTP2 IS THE

00:03:39,839 --> 00:03:42,180
PRIMARY MOTIVATOR BEHIND A BIG A-SYNCS I.O., AND

00:03:42,180 --> 00:03:44,040
IF YOU HAVEN'T USED IT, NICHOLAS IS TALKING ABOUT

00:03:44,040 --> 00:03:45,359
IT, DOING AN INTRODUCTION, I RECOMMEND GOING BECAUSE IF YOU WORK WITH THE WEB, YOU PROBABLY

00:03:45,359 --> 00:03:46,359
WANT TO START USING IT.

00:03:46,359 --> 00:03:50,279
BUT DESPITE ALL OF THESE THINGS, IN A LOT OF

00:03:50,279 --> 00:03:53,329
CASES, HTTP2 IS REALLY GOOD AND AS AN EXAMPLE OF

00:03:53,329 --> 00:03:55,019
HOW GOOD, I WANT TO BRING UP THIS.

00:03:55,019 --> 00:03:57,390
THIS IS FROM THE GO PROGRAMMING LANGUAGE HTTP2 WEB PAGE.

00:03:57,390 --> 00:03:58,819
THIS IS A GOPHER TILES DEMONSTRATION.

00:03:58,819 --> 00:04:02,620
YOU CAN LOAD THIS UP NOW IF YOU GOOGLE GOPHER TILES, YOU CAN FIND THIS FOR THOSE OF YOU

00:04:02,620 --> 00:04:03,989
WHO HAVE LAPTOPS IN FRONTS OF YOU.

00:04:03,989 --> 00:04:07,409
SO EACH OF THESE IMAGES IS MADE UP OF 180 TILED

00:04:07,409 --> 00:04:08,409
SMALLER IMAGES.

00:04:08,409 --> 00:04:10,559
THE ONE ON THE LEFT IS BEING SERVED OVER HTTP1.1.

00:04:10,559 --> 00:04:11,949
THE ONE ON THE RIGHT OVER 2.

00:04:11,949 --> 00:04:13,010
THESE ARE BOTH FROM CHROME.

00:04:13,010 --> 00:04:17,250
SO IF YOU'VE GOT CHROME OR FIREBOX HTTP2 WORKS RIGHT NOW, YOU CAN LITERALLY TEST THIS WHILE

00:04:17,250 --> 00:04:18,250
I GO.

00:04:18,250 --> 00:04:19,430
SO I'M GOING TO START THEM BOTH AT THE SAME TIME

00:04:19,430 --> 00:04:22,280
AND BY AT THE SAME TIME, I MEAN I'M GOING TO GIVE

00:04:22,280 --> 00:04:23,729
HTTP1.1 A SECOND OF HEAD START.

00:04:23,729 --> 00:04:25,180
AND WE'LL SEE WHICH LOADS FIRST.

00:04:25,180 --> 00:04:26,180
THAT WAS EASY.

00:04:26,180 --> 00:04:27,490
AND THIS IS CONSISTENTLY TRUE.

00:04:27,490 --> 00:04:34,330
SO THERE'S LOTS OF -- YOU CAN'T REALLY SEE BECAUSE I COMPRESSED THE HELL OUT OF THESE

00:04:34,330 --> 00:04:36,770
IMAGES BUT THERE IS A TON OF VARIOUS OPTIONS YOU

00:04:36,770 --> 00:04:39,960
CAN ADD LATENCY TO THE REQUESTS, SO THAT WAS THE ZERO

00:04:39,960 --> 00:04:41,613
LATENCY DEMO, THE BEST CASE FOR HTTP1.1, AND 2

00:04:41,613 --> 00:04:42,613
SMOKES IT OUT OF THE WATER.

00:04:42,613 --> 00:04:46,449
I TESTED THIS WITH MY IMPLEMENTATION IN PYTHON AND I COULD -- THE ONLY WAY I COULD GET 1.1

00:04:46,449 --> 00:04:48,310
TO BE AS FAST WAS TO START 180 CONCURRENT CONNECTIONS,

00:04:48,310 --> 00:04:49,563
SO I HAD TO DOWNLOAD THEM ALL IN PARALLEL AT THE

00:04:49,563 --> 00:04:51,250
SAME TIME, THAT DOES NOT SCALE TO EVERYONE ON THE

00:04:51,250 --> 00:04:52,250
INTERNET DOING THAT.

00:04:52,250 --> 00:04:53,250
SO HTTP2 HAS SOME SERIOUS ADVANTAGES.

00:04:53,250 --> 00:04:54,250
ALL RIGHT.

00:04:54,250 --> 00:04:58,900
SO IT'S REALLY GOOD, HOW DO YOU GET TO PLAY AROUND WITH IT?

00:04:58,900 --> 00:05:02,050
SO THERE ARE AT LEAST 34 CURRENT IMPLEMENTATIONS OF HTTP2.

00:05:02,050 --> 00:05:06,840
THIS IS NOT ALL OF THEM, THIS IS A SMALL LIST, THEY'VE GOT VARIOUS EXCITING NAMES, SOMEONE'S

00:05:06,840 --> 00:05:09,039
ON THIS LIST THAT ARE WORTH FLAGGING UP, THERE

00:05:09,039 --> 00:05:10,400
IS HYPER, PYTHON CLIENT LIBRARY, I'LL TALK ABOUT

00:05:10,400 --> 00:05:11,400
THAT IN A SECOND BECAUSE IT'S MINE.

00:05:11,400 --> 00:05:12,400
AND, THEREFORE, WORTHY OF YOUR TIME.

00:05:12,400 --> 00:05:13,400
THERE'S MGHTTP2.

00:05:13,400 --> 00:05:14,400
THAT'S THE OPEN SOURCE REFERENCE IMPLEMENTATION FOR HTTP2.

00:05:14,400 --> 00:05:17,930
DOES ALL THE THINGS A CLIENT, A SERVER, A PROXY,

00:05:17,930 --> 00:05:21,669
WHATEVER YOU WANT IT TO DO, ITS ONLY DOWNSIDE IS

00:05:21,669 --> 00:05:25,479
IT'S A NIGHTMARE TO COMPILE, IT HAS A LOT OF

00:05:25,479 --> 00:05:27,810
DEPENDENCIES BUT IF YOU CAN INTERRUPT WITH THAT,

00:05:27,810 --> 00:05:29,949
YOU CAN PROBABLY INTERRUPT WITH A LOT OF OTHER TOOLS.

00:05:29,949 --> 00:05:31,669
FIREFOX AND CHROME, BOTH HAVE IMPLEMENTATIONS, IF

00:05:31,669 --> 00:05:35,340
YOU GO TO TWITTER ON THOSE, YOU'RE USING 2, BECAUSE TWITTER HAS AN IMPLEMENTATION, AS

00:05:35,340 --> 00:05:36,340
WELL.

00:05:36,340 --> 00:05:37,539
WIRESHOCK CAN DECODE THE FRAMES, WHICH WOULD BE

00:05:37,539 --> 00:05:40,419
USEFUL EXCEPT FOR THE FACT THAT HTTP2 IS ALMOST ALWAYS SERVED OVER ALTS.

00:05:40,419 --> 00:05:42,870
CURL AND LIP CURL CAN USE 2, THEY USE 2'S STUFF

00:05:42,870 --> 00:05:46,139
SO YOU NEED NGH 2 FIRST BUT THEN YOU CAN USE IT

00:05:46,139 --> 00:05:48,039
WITH CURL STRAIGHT OUT OF THE BOX.

00:05:48,039 --> 00:05:50,490
INTERNET EXPLORER IS WORKING ON ONE FOR THOSE OF

00:05:50,490 --> 00:05:52,509
YOU WHO LOVE MICROSOFT AND THERE ARE PLENTY OF

00:05:52,509 --> 00:05:53,949
OTHERS FLOATING AROUND FOR YOUR FAVORITE LANGUAGES.

00:05:53,949 --> 00:05:56,039
IN FACT, PYTHON IS ONE OF THE LANGUAGES THAT IS

00:05:56,039 --> 00:05:57,580
UNDERSERVED BY IMPLEMENTATIONS, THERE ARE MORE

00:05:57,580 --> 00:05:59,380
IMPLEMENTATIONS FOR HASKELL THAN THERE ARE FOR

00:05:59,380 --> 00:06:00,380
PYTHON.

00:06:00,380 --> 00:06:01,550
SO LET'S TALK ABOUT HYPER QUICKLY, PYTHON'S CURRENT ONLY HTTP2 IMPLEMENTATION.

00:06:01,550 --> 00:06:05,789
IT'S NOT EVEN FULL, IT REALLY IS JUST A CLIENT LIBRARY BECAUSE THAT'S REALLY ALL I CARE ABOUT.

00:06:05,789 --> 00:06:09,150
SO HITCHER FITS IN ROUGHLY THE SAME PLACE IN THE

00:06:09,150 --> 00:06:11,509
HTTP STACK AS MTTP LIB OR DOT-CLIENT.

00:06:11,509 --> 00:06:14,990
AND IF YOU'VE NEVER USED EITHER OF THOSE DIRECTLY, THEN PROBABLY THE KIND OF THING

00:06:14,990 --> 00:06:16,289
YOU WON'T WANT TO THINK ABOUT.

00:06:16,289 --> 00:06:19,569
THE REAL GOAL IS TO SLOT IN ROUGHLY AT THE BOTTOM

00:06:19,569 --> 00:06:22,099
OF THE STACK SO WE CAN PUT THE URL 3 ON TOP OF

00:06:22,099 --> 00:06:24,340
THAT AND REQUESTS ON TOP OF THAT.

00:06:24,340 --> 00:06:26,090
IT IS STILL UNDER VERY ACTIVE DEVELOPMENT BUT

00:06:26,090 --> 00:06:27,090
IT'S PRIMARILY JUST ME.

00:06:27,090 --> 00:06:29,031
I GET A LOT OF PEOPLE KIND OF FLOATING IN AND OUT

00:06:29,031 --> 00:06:36,889
TO CONTRIBUTE BUT I DON'T HAVE A LOT OF PEOPLE WORKING ON IT CONSISTENTLY WHO AREN'T ME.

00:06:36,889 --> 00:06:40,110
IT'S GOT A LOT OF FEATURE REQUESTS OPEN, A LOT OF

00:06:40,110 --> 00:06:41,110
ISSUES OPEN.

00:06:41,110 --> 00:06:42,110
HELP WOULD BE GOOD.

00:06:42,110 --> 00:06:43,919
BUT YOU CAN FIND IT THERE ON GITHUB IF YOU WANT

00:06:43,919 --> 00:06:45,569
TO LOOK AT THE CODE.

00:06:45,569 --> 00:06:48,830
SOME OF THE CODE IS GOOD, SOME OF IT'S TERRIBLE.

00:06:48,830 --> 00:06:52,389
AND YOU CAN GET DOCS, SO IF YOU JUST WANT TO PLAY

00:06:52,389 --> 00:06:54,479
WITH IT, IF YOU JUST WANT TO TRY STUFF OUT, YOU

00:06:54,479 --> 00:06:55,979
CAN GO TO THE DOCUMENTATION, YOU CAN DOWNLOAD IT

00:06:55,979 --> 00:06:57,629
FROM PY-PI AND START MAKING REQUESTS.

00:06:57,629 --> 00:07:00,150
ONE PLACE TO START MAKING REQUESTS IS HTTP2 BIN.

00:07:00,150 --> 00:07:02,080
THIS IS HTTP BIN WHICH A LOT OF PEOPLE WILL KNOW

00:07:02,080 --> 00:07:03,529
ABOUT, AND MAINTAINED BY THE LOVELY PEOPLE AT

00:07:03,529 --> 00:07:07,770
RUNSCOPE, AND EXACTLY THAT, CODE FOR CODE, EXACTLY THE SAME, EVENLY IDENTIFIES IT AS

00:07:07,770 --> 00:07:11,169
HTTP BIN, BUT RUNNING BEHIND H2O WHICH IS AN HTTP1.1

00:07:11,169 --> 00:07:12,169
AND 2 PROXY.

00:07:12,169 --> 00:07:13,569
SO IT CAN SPEAK 1.1 AND 2.

00:07:13,569 --> 00:07:15,539
I'VE GOT DOCKERRIZED VERSIONS OF ALL THESE AND SO

00:07:15,539 --> 00:07:17,779
YOU CAN GO TO MY GITHUB AND GET THEM.

00:07:17,779 --> 00:07:18,844
I HAVEN'T UPLOADED THEM TO DOCKER HUB YET BUT

00:07:18,844 --> 00:07:19,844
WILL DO, SO YOU CAN EMPLOY THEM INTERNALLY IF YOU

00:07:19,844 --> 00:07:20,844
DON'T TRUST ME TO STORE THE DATA I DON'T GET FROM

00:07:20,844 --> 00:07:21,844
THE SERVICE.

00:07:21,844 --> 00:07:25,520
THE OTHER THING TO KNOW HERE IS THAT H2O REVERSE PROXIES TO 1.1, SO YOU CAN PUT IT IN FRONT

00:07:25,520 --> 00:07:29,550
OF ANY PYTHON WEB APP YOU HAVE RIGHT NOW AND GIVE

00:07:29,550 --> 00:07:33,169
2 A SHOT ON YOUR APP TO SEE HOW IT FEELS, SO IF

00:07:33,169 --> 00:07:37,990
YOU'VE GOT STUFF FLOATING AROUND, I HIGHLY RECOMMEND GIVING IT SOME TIME, TAKE A LOOK

00:07:37,990 --> 00:07:40,960
AT THE DOCKER FILE TO SEE HOW THAT SORT OF THING

00:07:40,960 --> 00:07:41,960
WORKS.

00:07:41,960 --> 00:07:46,300
IF YOU WANT TO DO MORE READING, IF YOU ARE INTERESTED, WANT TO SEE MORE, THEN THERE ARE

00:07:46,300 --> 00:07:49,029
TWO MAJOR RESOURCES, THE TOP ONE IS FROM THE CURL

00:07:49,029 --> 00:07:54,180
DEVELOPER AND IT'S AN ENORMOUS DOCUMENT THAT COVERS THE WHYS AND THE HOW AND THE WHAT OF

00:07:54,180 --> 00:07:55,180
HTTP2.

00:07:55,180 --> 00:08:01,669
IT IS THE RESOURCE, IF YOU TAKE NOTHING ELSE AWAY, THAT URL IS GREAT.

00:08:01,669 --> 00:08:04,999
AND THE PAGE ONE DOWN IS THE CARD PAGE AND IT

00:08:04,999 --> 00:08:08,960
CONTAINS THE SPECS AND LINKS TO IMPLEMENTATIONS, AND ALL SORTS OF OTHER STUFF.

00:08:08,960 --> 00:08:09,960
ALL RIGHT.

00:08:09,960 --> 00:08:10,990
SO THAT'S PRETTY MUCH MY TIME.

00:08:10,990 --> 00:08:14,009
I WILL BE HAPPY TO STOP FOR QUESTIONS.

00:08:14,009 --> 00:08:16,620
I WANT TO MAKE ONE QUICK NOTE.

00:08:16,620 --> 00:08:18,560
THE REQUESTS CORE TEAM ARE GOING TO BE AT THE

00:08:18,560 --> 00:08:19,930
NUMB FOCUS BOOT TOMORROW FROM 12:30ISH, IF YOU

00:08:19,930 --> 00:08:21,910
WANT TO CHAT WITH US, HAVE LUNCH WITH US, WE

00:08:21,910 --> 00:08:26,460
WOULD LOVE TO MEET YOU, WE WANT TO TALK ABOUT ANYTHING WITH PEOPLE WHO ARE USING OUR STUFF.

00:08:26,460 --> 00:08:27,460
GET YOUR FEEDBACK.

00:08:27,460 --> 00:08:28,460
THAT'S ALL FOR ME.

00:08:28,460 --> 00:08:29,520
THANK YOU VERY MUCH.

00:08:29,520 --> 00:08:30,520
[ Applause ] 00:10:45>> GREAT.

00:08:30,520 --> 00:08:35,320
WE HAVE A FEW MINUTES FOR QUESTIONS, SO IF ANYONE

00:08:35,320 --> 00:08:37,949
HAS ANY QUESTIONS AND WOULD LIKE TO COME TO THE

00:08:37,949 --> 00:08:40,810
MIC BACK HERE, WE WILL TAKE THEM: >> AUDIENCE: AWESOME TALK, THANK YOU VERY

00:08:40,810 --> 00:08:41,810
MUCH.

00:08:41,810 --> 00:08:42,810
I HAD A COUPLE, TWO RELATED QUESTIONS.

00:08:42,810 --> 00:08:45,760
THE FIRST ONE IS, SO LET'S SAY IF YOU ARE RUNNING

00:08:45,760 --> 00:08:50,720
A WEBSITE AND RUNNING WEB SERVERS, LIKE WHAT ARE

00:08:50,720 --> 00:08:51,720
THE OPTIONS TO SUPPORT HTTP2.

00:08:51,720 --> 00:08:54,430
YOU MENTIONED THE REVERSE PROXY BUT WHAT ABOUT NATIVE IMPLEMENTATIONS IF YOU'RE RUNNING APACHE

00:08:54,430 --> 00:08:55,430
AND WHATEVER ELSE.

00:08:55,430 --> 00:08:57,790
>> THE OPEN SOURCE WEB SERVICES ARE MOVING RELATIVELY SLOWLY.

00:08:57,790 --> 00:09:02,090
INTERNETS HAVE SAID THEY'LL HAVE SUPPORT BY, QUOTES, UNQUOTES, THE ENDS OF THE YOUR, WHICH

00:09:02,090 --> 00:09:03,790
IS THOROUGHLY DISAPPOINTING, SO HOPEFULLY SOMEONE

00:09:03,790 --> 00:09:06,790
WILL STEP UP AND MAKE THAT HAPPEN FASTER.

00:09:06,790 --> 00:09:07,790
APACHE IS GETTING THERE.

00:09:07,790 --> 00:09:10,430
THERE IS A MOD H2, THAT'S WHAT IT'S CALLED, I

00:09:10,430 --> 00:09:12,790
DON'T RECALL HOW FAR THROUGH DEVELOPMENT IT IS

00:09:12,790 --> 00:09:14,070
BUT THAT'S THE THING TO LOOK AT.

00:09:14,070 --> 00:09:17,279
IT'S ALSO BUILT ON TOP OF NGHTTP2.

00:09:17,279 --> 00:09:19,389
>> AUDIENCE: THE NEXT QUESTION KIND OF RELATED TO

00:09:19,389 --> 00:09:22,870
THAT, LIKE, WHEN DO YOU EXPECT IN TERMS OF ADOPTION WE'LL SEE LIKE THE WHOLE INTERNET

00:09:22,870 --> 00:09:24,829
RUNNING ON HTTP2 AND PEOPLE TALK ABOUT 1.1 BEING

00:09:24,829 --> 00:09:26,069
IN THE BACK OF THE DAYS KIND OF THING.

00:09:26,069 --> 00:09:29,470
>> I'M NOT CERTAIN WE'LL EVER GET RID OF 1.1, THERE IS A FEW CASES WHERE IT'S BETTER THAN

00:09:29,470 --> 00:09:30,470
2.

00:09:30,470 --> 00:09:31,470
>> AUDIENCE: WIDE MAINSTREAM ADOPTION, MORE MAINSTREAM THING.

00:09:31,470 --> 00:09:33,399
>> MAINSTREAM ADOPTION I THINK WITHIN THIS CALENDAR YEAR IS THE ANSWER, SO WE ARE -- IT

00:09:33,399 --> 00:09:34,839
IS ALREADY MORE WIDELY USED THAN IPV6 IS, AND...

00:09:34,839 --> 00:09:35,839
[ Laughter ] >> AND IT'S NOT ACTUALLY EVEN FULLY STANDARDIZED

00:09:35,839 --> 00:09:39,550
YET, STILL IN THE ISG, SO IT'S STILL GOT A BIT OF

00:09:39,550 --> 00:09:43,360
WORK SO GOOGLE HAS DEPLOYED IT ALREADY, SO GOOGLE

00:09:43,360 --> 00:09:46,300
AND CHROME, ANYONE USE INKING THAT IS USING IT.

00:09:46,300 --> 00:09:49,390
TWITTER, LOTS OF BIG WEBSITES ARE DEPLOYING IT, I

00:09:49,390 --> 00:09:53,139
SUSPECT Facebook WILL BE ALONG, AS WELL, LOTS OF BIG SOCIAL MEDIA STUFF WILL, I THINK, I'M

00:09:53,139 --> 00:09:54,139
CONFIDENT THIS YEAR.

00:09:54,139 --> 00:09:55,139
>> AUDIENCE: AWESOME.

00:09:55,139 --> 00:09:56,139
THANK YOU VERY MUCH.

00:09:56,139 --> 00:09:57,139
>> THANK YOU.

00:09:57,139 --> 00:09:58,139
>> AUDIENCE: MY QUESTION CONCERNS PUSH FEATURES THAT YOU BRIEFLY MENTIONED.

00:09:58,139 --> 00:09:59,260
HOW DO YOU SEE THIS WORKING WITH POPULAR WEB FRAMEWORK?

00:09:59,260 --> 00:10:00,400
IS IT LIKE YOU ARE GOING TO DECLARE WHAT NEEDS TO

00:10:00,400 --> 00:10:01,610
BE PUSHED ON THIS PAGE?

00:10:01,610 --> 00:10:05,180
>> YEAH, I THINK POPULAR WEB FRAME WORKS ARE GOING TO NEED EXTENSIONS TO TRY AND WORK THIS

00:10:05,180 --> 00:10:06,180
OUT.

00:10:06,180 --> 00:10:07,550
THAT SAID, I WOULD THINK IT WOULD BE NOT TOO CHALLENGING TO ADD A REVERSE PROXY THAT USES

00:10:07,550 --> 00:10:09,050
SOME MACHINE LEARNING STUFF TO TRY AND WORK OUT

00:10:09,050 --> 00:10:11,690
WHAT REQUESTS CORRELATE TOGETHER IN SUCH A WAY

00:10:11,690 --> 00:10:12,690
THAT IT COULD DO QUITE WELL.

00:10:12,690 --> 00:10:15,140
I'LL PROBABLY TRY AND HAVE A CONVERSATION WITH

00:10:15,140 --> 00:10:17,220
THE H2O LEAD AT SOME POINT ABOUT WHETHER OR NOT

00:10:17,220 --> 00:10:18,570
WE CAN TRY IT WITH HIS IMPLEMENTATION.

00:10:18,570 --> 00:10:19,570
YEAH.

00:10:19,570 --> 00:10:20,860
>> AUDIENCE: WILL YOU BE WORKING ON HYPER IN THE

00:10:20,860 --> 00:10:21,860
SPRINTS?

00:10:21,860 --> 00:10:22,860
>> I THINK I'LL BE TRYING TO DO SOME, YEAH.

00:10:22,860 --> 00:10:28,639
I'LL BE HERE MONDAY, THAT'S THE ONLY DAY SPRINTS AISLE WILL BE HERE BUT I'M TOTALLY HAPPY TO

00:10:28,639 --> 00:10:32,160
WORK ON RAMPING PEOPLE UP ON IT SO OTHER PEOPLE

00:10:32,160 --> 00:10:34,740
CAN IF I DON'T HAVE THE CHANCE TO.

00:10:34,740 --> 00:10:35,740
>> AUDIENCE: THANKS.

00:10:35,740 --> 00:10:39,160
>> AUDIENCE: YEAH, REQUEST RESPONSE FOR PAIRS CALLED STREAM WHEN THEY'RE MULTIPLEX, HOW

00:10:39,160 --> 00:10:41,460
DOES THE PRIORITIZATION AND FLOW CONTROL INTERACT

00:10:41,460 --> 00:10:43,480
WITH TCP'S PRIORITIZATION FLOW CONTROL AND EVEN

00:10:43,480 --> 00:10:44,480
IP'S FACILITIES, SEEMS LIKE THERE IS SOME REDUNDANCY

00:10:44,480 --> 00:10:45,559
THERE, MAYBE SOME POTENTIAL FOR FIGHTING BETWEEN THOSE MECHANISMS?

00:10:45,559 --> 00:10:47,660
>> SO, THE GOAL SHOULD BE THAT THEY WON'T FIGHT.

00:10:47,660 --> 00:10:52,630
SO THE KEY THING TO KNOW, AND THIS GETS BROUGHT UP A LOT AND SOME DISCUSSIONS ON THE MAILING

00:10:52,630 --> 00:10:54,279
LIST ABOUT IT WHICH MIGHT BE WORTH TRYING TO FIND

00:10:54,279 --> 00:10:56,610
WITH SOME GOOGLE BUT THE KIND OF HIGH-LEVEL STUFF

00:10:56,610 --> 00:10:59,550
HERE IS THE FLOW CONTROL IS APPLICATION LAYER FLOW

00:10:59,550 --> 00:11:04,180
CONTROL SO IT'S ABOUT WHETHER OR NOT THE APPLICATION ITSELF IS PROCESSING THE DATA,

00:11:04,180 --> 00:11:07,100
THE TCP STREAM SHOULD STILL BE BEING PUMPED BECAUSE

00:11:07,100 --> 00:11:12,800
YOU NEED TO GET THOSE CONTROL FRAMES SO TCP'S FLOW CONTROL FLOW IS AN OR THROWING NATURAL

00:11:12,800 --> 00:11:15,930
THINK WHICH SAYS IT CAN'T PROCESS MORE DATA, FOR

00:11:15,930 --> 00:11:16,930
THIS STREAM.

00:11:16,930 --> 00:11:19,060
SO IT'S A MUCH MORE FINE-GRAINED ISSUE.

00:11:19,060 --> 00:11:23,390
THERE SHOULD BE, WITH CAREFULLY TUNED ALGORITHMS, NO HEAD OF LINE BLOCKING.

00:11:23,390 --> 00:11:26,720
HOWEVER, YOU CAN DEFINITELY DO IT WRONG AND IT'S

00:11:26,720 --> 00:11:27,759
AN IMPORTANT THING THAT HAS TO GETS TESTS LIVE.

00:11:27,759 --> 00:11:29,180
>> AUDIENCE: THAT'S KIND OF WHAT I'M ASKING, HAS

00:11:29,180 --> 00:11:31,700
THERE BEEN MUCH TESTING OR INVESTIGATION INTO HOW

00:11:31,700 --> 00:11:32,700
THOSE INTERACT?

00:11:32,700 --> 00:11:35,040
THERE ARE SO MANY FLOW CONTROL ALGORITHMS FOR TCP

00:11:35,040 --> 00:11:36,380
BECAUSE OF THE SAME ISSUE BETWEEN I.P.

00:11:36,380 --> 00:11:37,380
LAYER STUFF.

00:11:37,380 --> 00:11:38,670
>> DEFINITELY LESS WORK DONE THAN TCP BUT PLENTY

00:11:38,670 --> 00:11:39,810
OF IMPLEMENTATIONS FLOATING AROUND AND FOR A

00:11:39,810 --> 00:11:43,140
LITTLE WHILE WE HAD A SPECIAL FRAME THAT WOULD TELL YOU IF YOU HAD BLOCKED A STREAM THAT

00:11:43,140 --> 00:11:45,399
COULD BE SERVED FOR SOME DE-BUGGING PURPOSE.

00:11:45,399 --> 00:11:48,579
THEY GOT TAKEN OUT BECAUSE IT ADDED COMPLEXITY BUT THE THING TO DO IS GO TO THE VARIOUS MAJOR

00:11:48,579 --> 00:11:49,579
IMPLEMENTATIONS AND ASK THEM TO KIND OF WRITE A

00:11:49,579 --> 00:11:53,450
DOCUMENT THAT TRACKS EXACTLY HOW THEIR ALGORITHMS WORK BUT THEY'LL ALL BE QUITE DIFFERENT.

00:11:53,450 --> 00:11:55,610
I ALSO SUSPECT GOOGLE WILL PUBLISH A WHITE PAPER.

00:11:55,610 --> 00:11:56,610
>> AUDIENCE: GREAT TALK.

00:11:56,610 --> 00:11:57,610
>> AUDIENCE: I HAVE A QUESTION.

00:11:57,610 --> 00:11:58,880
HTTP2 MAKES SENSE BETWEEN THE BROWSER AND WEB

00:11:58,880 --> 00:11:59,880
SERVICE.

00:11:59,880 --> 00:12:00,880
WHAT'S THE PLACE BETWEEN THE ARCHITECTURE, DO YOU

00:12:00,880 --> 00:12:04,340
THINK IT HAS A PLACE -- MAYBE WITHOUT TLS?

00:12:04,340 --> 00:12:09,209
>> I THINK IT HAS THE POTENTIAL TO BE STREAMLY VALUABLE IN THOSE CASES.

00:12:09,209 --> 00:12:13,839
IT'S A BIT INTERESTING BECAUSE IT VERY MUCH DEPENDS ON YOUR NETWORKED APOLOGY, BUT IN

00:12:13,839 --> 00:12:19,630
PRINCIPLE, IT HAS THE ABILITY TO BE A REALLY GREAT KIND OF RPC MECHANISM AND IN FACT THERE

00:12:19,630 --> 00:12:22,360
IS ONE ALREADY, GOOGLE HAVE PUBLISHED GRPC, A

00:12:22,360 --> 00:12:23,390
PCC MECHANISM OVER HTTP2.

00:12:23,390 --> 00:12:27,510
AND THAT HAS THE POTENTIAL TO BE MUCH, MUCH MORE

00:12:27,510 --> 00:12:29,810
EFFECTIVE THAN THE CURRENT 1.1 USE OF THAT.

00:12:29,810 --> 00:12:30,810
>> AUDIENCE: THANK YOU.

00:12:30,810 --> 00:12:31,810
>> THANK YOU.

00:12:31,810 --> 00:12:34,069
>> AUDIENCE: GIVEN PAGE OR SESSION TYPICALLY RESTRICTED TO A SINGLE TCP CONNECTION AND

00:12:34,069 --> 00:12:36,690
IF SO, IS THAT A BOTTLENECK OR DO YOU FORESEE THAT

00:12:36,690 --> 00:12:39,120
BEING A BOTTLENECK IN THE FUTURE?

00:12:39,120 --> 00:12:43,480
>> THE SPEC SAYS THAT THERE SHOULD, CAPITAL SHOULD BE NO MORE THAN ONE TCP CONNECTION

00:12:43,480 --> 00:12:45,920
BEER AUTHORITY, SO HOST, SO, YEAH, IN PRINCIPLE,

00:12:45,920 --> 00:12:48,130
I SHOULD MAINTAIN ONLY THE ONE CONNECTION TO

00:12:48,130 --> 00:12:49,130
A GOOGLE SERVER.

00:12:49,130 --> 00:12:53,130
CURRENTLY WE DON'T EXPECT THAT TO BE A BOTTLENECK BUT THE KIND OF THING WHICH MAY WELL COME

00:12:53,130 --> 00:12:56,670
BACK AND SAY WE NEED MORE, IDEALLY I THINK WHAT

00:12:56,670 --> 00:12:57,670
WE WOULD ACTUALLY DO IS RECONSIDER THE WAY WE

00:12:57,670 --> 00:12:58,759
HANDLE THE ONE CONNECTION.

00:12:58,759 --> 00:13:01,269
ONE CONNECTION SHOULD BE THE OPTIMAL CASE FOR

00:13:01,269 --> 00:13:02,269
TCP.

00:13:02,269 --> 00:13:03,269
HOPEFULLY IT WILL.

00:13:03,269 --> 00:13:04,269
>> AUDIENCE: OKAY, THANK YOU.

00:13:04,269 --> 00:13:05,269
>> THANK YOU.

00:13:05,269 --> 00:13:06,269
>> AUDIENCE: YOU MENTIONED THE BINARY PARTICLE -- RESOURCE ENVIRONMENTS.

00:13:06,269 --> 00:13:08,110
IS IT POSSIBLE TO DISABLE OTHER FEATURES SUCH AS

00:13:08,110 --> 00:13:10,710
H-PAC AND MANDATORY TLS SO YOU CAN RUN THIS ON AN

00:13:10,710 --> 00:13:11,870
8 OR 16-BITS -- >> MAYBE.

00:13:11,870 --> 00:13:14,500
THERE HAVE BEEN SOME PEOPLE DOING WORK ON THAT.

00:13:14,500 --> 00:13:17,550
I'M NOT ENTIRELY UP TO SPEED ON WHERE THEY ARE

00:13:17,550 --> 00:13:24,529
BUT YOU CAN DISABLE MANY OF THE COMPLICATIONS FEATURES, SO FLOW CONTROL, YOU CAN HAVE A

00:13:24,529 --> 00:13:26,780
KIND OF NO-OP FLOW CONTROL THAT SENDS BAKE WINDOW

00:13:26,780 --> 00:13:34,959
UPDATES THAT ARE THE SIZE OF THE DATA YOU RECEIVED

00:13:34,959 --> 00:13:36,240
AND THAT'S WHAT HYPER DOES RIGHT NOW -- NO, IT

00:13:36,240 --> 00:13:37,950
DOESN'T, I MADE IT SMARTER RECENTLY, DOESN'T DO

00:13:37,950 --> 00:13:41,769
THAT ANYMORE BUT YOU CAN TURN OFF THE COMPRESSIONEE PARTS OF HPAC, SO YOU CAN HAVE

00:13:41,769 --> 00:13:45,560
H-PAC SAY YOU CAN NEVER ADD HAYERS TO THE COMPRESSION TABLE AND THEN YOU ALWAYS GET

00:13:45,560 --> 00:13:46,560
ESSENTIALLY UNCOMPRESSED HEADERS.

00:13:46,560 --> 00:13:50,839
I DON'T THINK YOU CAN TURN OFF HUFFMAN ENCODING FOR THOSE SO YOU MAY NEED TO DO HUFFMAN DECODING,

00:13:50,839 --> 00:13:51,839
I'LL HAVE TO CHECKS.

00:13:51,839 --> 00:13:52,860
>> AUDIENCE: HI, OTHER THAN THE RPC USE, WHAT DO

00:13:52,860 --> 00:13:55,810
YOU SEE HYPER BEING USED AS, OR USED FOR IN PYTHON?

00:13:55,810 --> 00:13:56,920
>> THAT'S A GOOD QUESTION.

00:13:56,920 --> 00:14:01,040
I HAVE AN EXPLICIT LONG-TERM GOAL TO GET REQUESTS TO USE IT.

00:14:01,040 --> 00:14:03,020
I'M KIND OF CHEATING BUT IN THE FOCUSED AREAS, I

00:14:03,020 --> 00:14:05,360
WOULD LIKE TO BE ABLE TO TRANSPARENTLY IN TO WORK

00:14:05,360 --> 00:14:09,720
BETWEEN 1.1 AND 2 SO YOU CAN USE WHATEVER IS MOST

00:14:09,720 --> 00:14:10,720
PRESENT.

00:14:10,720 --> 00:14:13,310
IT ALSO HAS A SEPARATE, A THOROUGHLY SEPARATE FRAMING LAYER SO THE BIT THAT KNOWS ABOUT

00:14:13,310 --> 00:14:18,019
HTTP FRAMES AND THE BIT THAT KNOWS ABOUT H-PAC

00:14:18,019 --> 00:14:23,660
ARE QUITE SEPARATE AND COULD BE BROKEN OUT INTO

00:14:23,660 --> 00:14:28,550
OWN LIBRARIES, RECENTLY, SO I'M TALKING TO SOMEONE

00:14:28,550 --> 00:14:31,389
WHO IS CONSIDERING ADDING SUPPORT TO THE STANDARD LIBRARY, USING THE FRAMING LAYER.

00:14:31,389 --> 00:14:35,480
I ALSO PLAN TO ADD SUPPORT FOR THINGS LIKE TWISTED AND G-EVENT AND ALL THOSE SORTS OF

00:14:35,480 --> 00:14:37,139
THINGS, AND IDEALLY, I WOULD LIKE TO WRITE A

00:14:37,139 --> 00:14:40,730
SERVER IMPLEMENTATION AT SOME POINT, AS WELL, PROBABLY ON A-SYNC IO, BUT THAT'S ASSUMING

00:14:40,730 --> 00:14:43,750
I HAVE EIGHT MILLION HOURS BECAUSE THERE IS A LOT

00:14:43,750 --> 00:14:45,779
OF WORK THERE.

00:14:45,779 --> 00:14:51,600
>> AUDIENCE: A FOLLOWUP TO THAT, USUALLY THE FLOW IN PYTHON, IS A REQUEST RESPONSE KIND

00:14:51,600 --> 00:14:54,699
OF DEAL, WHERE HTTP1 PROBABLY WORKS OKAY.

00:14:54,699 --> 00:14:57,430
SO IS IT A DIFFERENT INTERFACE THAT REQUEST IS

00:14:57,430 --> 00:14:59,470
GOING TO IMPLEMENT OR DO YOU HAVE ANY VISION THERE?

00:14:59,470 --> 00:15:02,459
>> MY EXPECTATION IS THAT THE -- WE WILL KEEP THAT ABSTRACTION BUT IN PRACTICE, TO GET GOOD

00:15:02,459 --> 00:15:10,630
PERFORMANCE OUT OF IT, TO GET LIKE EXCELLENT PERFORMANCE OUT OF IT, YOU WILL NEED TO START

00:15:10,630 --> 00:15:11,720
HAVING CONCURRENT SEE IN PLACE.

00:15:11,720 --> 00:15:17,079
SO YOU MIGHT USE ONE OF THE CONCURRENT INTERFACES TO REQUEST, LIKE G-REQUESTS OR T-REQUESTS

00:15:17,079 --> 00:15:19,250
OR T REC OR ANY OF THOSE.

00:15:19,250 --> 00:15:25,250
OR EVEN JUST SPAWN A BACKGROUND THREAD THAT MULTIPLEX ON TO SO YOU CAN HAVE MANY, MANY

00:15:25,250 --> 00:15:30,180
THREADS RUNNING AND THEY USE ONE UNDERLYING CONNECTION, MULTIPLEXING DOWN IT.

00:15:30,180 --> 00:15:33,790
AGAIN, I WOULD LOVE TO TALK ABOUT THIS WITH MORE

00:15:33,790 --> 00:15:38,720
USERS BECAUSE I WANT TO GET A FEEL FOR WHAT THOSE

00:15:38,720 --> 00:15:39,720
USE CASES LOOK LIKE.

00:15:39,720 --> 00:15:43,100
IT'S EASY FOR ME TO DESIGN IN A BUBBLE AND NONE

00:15:43,100 --> 00:15:44,649
ONE WILL LIKE IT.

00:15:44,649 --> 00:15:45,810
>> AUDIENCE: THANK YOU.

00:15:45,810 --> 00:15:48,510
>> AUDIENCE: A QUICK FOLLOW-UP QUESTION TO GO

00:15:48,510 --> 00:15:50,829
AFTER THE ONE ABOUT SERVER PUSH.

00:15:50,829 --> 00:16:00,769
IT SEEMS LIKE HTTP2 IS CRYING TO REQUIRE THE APPLICATION LAYER TO BE MUCH, MUCH SMARTER

00:16:00,769 --> 00:16:05,810
THAN IT IS RIGHT NOW WITH HTTP1.

00:16:05,810 --> 00:16:08,880
THE APPLICATION LAYER HAS TO DECIDES WHAT TO PUSH

00:16:08,880 --> 00:16:15,350
AHEAD OF TIME, WHAT THE USER IS GOING TO NEED, EVERYTHING AHEAD OF TIME.

00:16:15,350 --> 00:16:27,230
DO YOU THINK THERE IS A SOLUTION TO THAT IN ENGINE X OR DO YOU THINK IT'S ENTIRELY THE

00:16:27,230 --> 00:16:29,089
RESPONSIBILITY OF THE APPLICATION DEVELOPER TO

00:16:29,089 --> 00:16:37,880
MAKE IT SMART ENOUGH TO HANDLE HTTP2?

00:16:37,880 --> 00:16:39,350
>> I THINK WITH COMPUTERS ALMOST EVERYTHING IS

00:16:39,350 --> 00:16:45,160
POSSIBLE, SO I THINK THAT YOU COULD ABSOLUTELY SOLVE THIS IN ENGINE X AND I THINK ANYONE

00:16:45,160 --> 00:16:50,970
WHO DOES IS GOING TO HAVE A REALLY GREAT CONFERENCE

00:16:50,970 --> 00:16:55,449
SPEAKING CAREER AND HOPEFULLY TURN IT INTO QUITE

00:16:55,449 --> 00:17:01,060
A BIT OF MONEY BUT, IN PRACTICE, CURRENTLY, THE

00:17:01,060 --> 00:17:24,030
APPLICATION LAYER HAS TO KNOW ABOUT IT, SO WHAT'S

00:17:24,030 --> 00:17:34,060
THE EXPECTED WAYS OF DEALING WITH THIS WILL BE TO

00:17:34,060 --> 00:17:57,130
ADD EXTRA HEADERS THAT YOUR SERVER INTERCEPTS THAT SAY THINGS LIKE THIS OTHER RESOURCE IS

00:17:57,130 --> 00:18:01,200
RELATED, PLEASE PUSH IT.

00:18:01,200 --> 00:18:15,340
SO THAT'S THE CURRENT EXPECTATION OF THE FLOW.

00:18:15,340 --> 00:18:20,760
WE'LL GET THAT RIGHT FIRST AND THEN WORRY ABOUT

00:18:20,760 --> 00:18:21,760
BEING SMART.

00:18:21,760 --> 00:18:22,940
>> AUDIENCE: OKAY, GREAT, THANKS.

00:18:22,940 --> 00:18:23,940
GREAT TALK.

00:18:23,940 --> 00:18:24,940
>> THANK YOU.

00:18:24,940 --> 00:18:31,610
>> I WANTED TO ASK IF THERE'S ANYTHING ON THE

00:18:31,610 --> 00:18:32,920
ROAD -- >> THE ANSWER IS CURRENTLY NO.

00:18:32,920 --> 00:18:37,260
THERE ARE A COUPLE OF LAYERS TO THIS QUESTION, SO, FIRSTLY, THE WORKING GROUP IS EXHAUSTED.

00:18:37,260 --> 00:18:42,180
HTTP2 WAS A BATTLE, A BATTLE FOR TWO YEARS, THERE

00:18:42,180 --> 00:18:57,160
WAS A LOT OF CONTENTION ABOUT IT, A LOT OF BACK

00:18:57,160 --> 00:19:14,130
AND FORTH AND A LOT OF PEOPLE NEED SOME TIME TO

00:19:14,130 --> 00:19:15,940
NOT DO THAT.

00:19:15,940 --> 00:19:18,390
ARGUMENTS ON THE MAILING LIST GET TIRING AFTER A

00:19:18,390 --> 00:19:19,390
WHILE.

00:19:19,390 --> 00:19:20,840
THAT SAID, THERE HAS BEEN LOTS OF EXPLICIT DISCUSSION ABOUT HTTP3.

00:19:20,840 --> 00:19:34,880
WE'RE NOT PROPOSING TO DO IT RIGHT NOW, NO ONE

00:19:34,880 --> 00:19:48,690
PANIC BUT IT'S THE KIND OF THING THAT WE'RE PREPARED TO TALK ABOUT, WE'RE GOING TO LET

00:19:48,690 --> 00:19:52,210
THE STANDARD KIND OF BOIL -- KIND OF SIMMER FOR

00:19:52,210 --> 00:19:54,670
SIX MONTHS, LET PEOPLE IMPLEMENT, LET PEOPLE FIND

00:19:54,670 --> 00:20:00,230
THE ACTUAL PROBLEMS THEY HIT IN THE WILD AND THEN

00:20:00,230 --> 00:20:14,500
WE'LL COME BACK TO THE TABLE, I THINK, AND LOOK

00:20:14,500 --> 00:20:32,390
AT WHETHER OR NOT WE CAN ADDRESS THESE WITH EXTENSIONS OR WHETHER OR NOT WE REALLY HAVE

00:20:32,390 --> 00:20:33,680
TO RE-SPEC.

00:20:33,680 --> 00:20:51,530
ONE OF THE GOOD THINGS THAT CAME OUT OF THIS, WAS

00:20:51,530 --> 00:21:32,690
A WHOLE INFRASTRUCTURE FOR TRANSPARENTLY ADDING EXTRA PROPERTY TO COMES THAT YOU CAN UPGRADE

00:21:32,690 --> 00:21:36,130
TO SO HOPEFULLY FURTHER HTTP VERSIONS SHOULD

00:21:36,130 --> 00:21:52,450
BE EASIER TO HANDLE THAN THIS ONE.

00:21:52,450 --> 00:22:44,590
THIS ONE REQUIRED A LOT OF EXTRA INFRASTRUCTURE.

00:22:44,590 --> 00:22:53,590
>> AUDIENCE: I THINK WE'RE GOING HAVE TO CUT IT

00:22:53,590 --> 00:23:38,610
OFF THERE BECAUSE I'M HUNGRY FOR LUNCH, SO THANK

00:23:38,610 --> 00:24:09,110
YOU, CORY, AND GET 

00:24:09,110 --> 00:24:44,270
SOME LUNCH, FOLKS.

00:24:44,270 --> 00:25:56,470
[ Applause ] [ LUNCH BREAK ]

00:25:56,470 --> 00:37:18,880

YouTube URL: https://www.youtube.com/watch?v=ACXVyvm5eTc


