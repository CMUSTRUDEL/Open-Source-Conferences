Title: Jim Baker - Getting to Jython 2.7 and beyond - PyCon 2015
Publication date: 2015-04-12
Playlist: PyCon 2015
Description: 
	"Speaker: Jim Baker

So how did we get to Jython 2.7 anyway? And what are our future plans?
In this talk, you will get a taste of how Jython works, some new
functionality, and especially how Jython leverages both Python and
Java to provide a very compatible solution.

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:00,000 --> 00:00:07,950
meant for 18 years Jai thon 2.7 released

00:00:05,490 --> 00:00:10,170
Kenna did too is now available as I

00:00:07,950 --> 00:00:13,259
speak so we're hoping that we're really

00:00:10,170 --> 00:00:16,350
gonna have a final release but you may

00:00:13,259 --> 00:00:20,029
have heard of some questions about Jai

00:00:16,350 --> 00:00:22,740
thon like isn't chai thon a dead project

00:00:20,029 --> 00:00:26,160
doesn't Jatin have a gill just like see

00:00:22,740 --> 00:00:29,429
Python isn't Jai thon much slower than

00:00:26,160 --> 00:00:32,960
other Python implementations doesn't

00:00:29,429 --> 00:00:39,780
Jaden only implement a subset of Python

00:00:32,960 --> 00:00:43,110
no now I have a vested interest I'm a

00:00:39,780 --> 00:00:44,399
core developer of Jai thon I wrote with

00:00:43,110 --> 00:00:46,559
some other people

00:00:44,399 --> 00:00:49,440
apparently the definitive book about

00:00:46,559 --> 00:00:53,100
this I've been working on Jai thon since

00:00:49,440 --> 00:00:57,059
2007 as a committer and I've been a user

00:00:53,100 --> 00:01:00,300
Python ang I thought since 2003 also I'm

00:00:57,059 --> 00:01:02,100
a software developer Rackspace so you

00:01:00,300 --> 00:01:05,040
read these tweets so addressing one of

00:01:02,100 --> 00:01:06,450
the first questions is it dead kenge I

00:01:05,040 --> 00:01:08,090
thought be saved or is it pretty much

00:01:06,450 --> 00:01:10,770
dead at this point

00:01:08,090 --> 00:01:14,070
so does dry thumb basically dead or what

00:01:10,770 --> 00:01:15,119
I'm starting to get the point here is it

00:01:14,070 --> 00:01:21,270
still around

00:01:15,119 --> 00:01:22,950
I thought the project was dead now I I

00:01:21,270 --> 00:01:26,909
will knit that sometimes we are too

00:01:22,950 --> 00:01:28,290
optimistic so I for the my note for the

00:01:26,909 --> 00:01:30,600
reviewers of this talk proposal I

00:01:28,290 --> 00:01:31,950
assumed you I thought 2 point 7.0 will

00:01:30,600 --> 00:01:34,890
see a final release by the end of this

00:01:31,950 --> 00:01:37,950
year that would be 2014 and certainly

00:01:34,890 --> 00:01:42,060
well before PyCon that was I assume

00:01:37,950 --> 00:01:43,439
let's say Friday I worked so hard to

00:01:42,060 --> 00:01:46,049
make this true and so did the other

00:01:43,439 --> 00:01:48,869
committers and contributors but we do

00:01:46,049 --> 00:01:49,979
have one last bug but we're close I'm

00:01:48,869 --> 00:01:54,509
hoping that actually had that final

00:01:49,979 --> 00:01:59,460
release truly done one day that would be

00:01:54,509 --> 00:02:01,219
tomorrow but here it is release

00:01:59,460 --> 00:02:05,180
candidate - so I guess I have a demo

00:02:01,219 --> 00:02:07,979
let's try it out where did I put it

00:02:05,180 --> 00:02:10,490
alright so I'm gonna just I actually

00:02:07,979 --> 00:02:14,330
haven't run the Installer

00:02:10,490 --> 00:02:15,170
yeah all right so let's see English all

00:02:14,330 --> 00:02:19,610
right that sounds good

00:02:15,170 --> 00:02:23,000
except next I want standard oh and I

00:02:19,610 --> 00:02:27,920
want install Pip and setup tools I hope

00:02:23,000 --> 00:02:36,800
you like that that's our standard distro

00:02:27,920 --> 00:02:38,780
is going create that next next-gen start

00:02:36,800 --> 00:02:41,540
scripts and sewing pipe Pip and setup

00:02:38,780 --> 00:02:43,280
tools let's see what's doing there so

00:02:41,540 --> 00:02:45,020
it's just processing new chars if you've

00:02:43,280 --> 00:02:48,410
used Jai thon the past probably seen

00:02:45,020 --> 00:02:53,420
this so it should just be loading up at

00:02:48,410 --> 00:02:56,630
that point and I'm gonna look that oh we

00:02:53,420 --> 00:02:58,970
are now running through the bundle the

00:02:56,630 --> 00:03:02,930
wheels so this doesn't actually do it

00:02:58,970 --> 00:03:08,150
off the network it's cleaning up and I'm

00:03:02,930 --> 00:03:11,020
done okay so that's pretty cool let's go

00:03:08,150 --> 00:03:11,020
back to the presentation

00:03:11,230 --> 00:03:19,040
so really seen I'm sorry looking at that

00:03:17,480 --> 00:03:21,950
other question the second question and

00:03:19,040 --> 00:03:26,440
doesn't it have a Gil you know so we

00:03:21,950 --> 00:03:32,050
have this ability to import the Gil oh

00:03:26,440 --> 00:03:34,700
wait we actually don't have a Gil

00:03:32,050 --> 00:03:39,260
alright so hopefully that answers

00:03:34,700 --> 00:03:41,360
question number two so there is one

00:03:39,260 --> 00:03:44,450
performance benchmark you might have

00:03:41,360 --> 00:03:46,970
heard of pie stone and on my machine it

00:03:44,450 --> 00:03:51,290
benchmarks at this level of pie stones

00:03:46,970 --> 00:03:54,200
per second I intentionally done a large

00:03:51,290 --> 00:04:00,980
number of passes as I will explain in

00:03:54,200 --> 00:04:04,640
just a second and wait it's faster than

00:04:00,980 --> 00:04:09,620
C Python for this

00:04:04,640 --> 00:04:12,750
for this terrible performance benchmark

00:04:09,620 --> 00:04:16,280
really really pie stone people still

00:04:12,750 --> 00:04:18,930
think this is a great benchmark I

00:04:16,280 --> 00:04:21,030
haven't considered JVM startup time or

00:04:18,930 --> 00:04:22,530
JIT warmup so you know obviously I'm

00:04:21,030 --> 00:04:26,580
already running Jade on at that point

00:04:22,530 --> 00:04:28,530
and this is allowing it to go and take

00:04:26,580 --> 00:04:31,500
advantage of JIT or mabye doing a large

00:04:28,530 --> 00:04:33,300
number of passes 1 million passes and

00:04:31,500 --> 00:04:35,310
I'm not looking at garbage collection

00:04:33,300 --> 00:04:39,240
issues although that is very tunable as

00:04:35,310 --> 00:04:40,830
you know on Java oh wait wait wait so I

00:04:39,240 --> 00:04:42,600
mean again it's not only a terrible

00:04:40,830 --> 00:04:44,610
benchmark but we were actually slower

00:04:42,600 --> 00:04:45,900
than pi pi right now I'll dress this

00:04:44,610 --> 00:04:49,590
question in a second I mean so it's

00:04:45,900 --> 00:04:52,289
about 21 times faster than Jai thon and

00:04:49,590 --> 00:04:53,750
what about 40 times faster whatever then

00:04:52,289 --> 00:04:58,949
cpython

00:04:53,750 --> 00:05:01,169
however this release did not focus one

00:04:58,949 --> 00:05:04,710
tiny bit really on performance we

00:05:01,169 --> 00:05:06,990
focused on compatibility here's the real

00:05:04,710 --> 00:05:12,060
interesting thing we didn't do the work

00:05:06,990 --> 00:05:14,280
anyway Java 7 and Java 8 I have I didn't

00:05:12,060 --> 00:05:19,289
run this on Java 8 it should be faster

00:05:14,280 --> 00:05:21,990
as well then even Java 7 the people who

00:05:19,289 --> 00:05:24,000
are working on hotspot orange a9 from

00:05:21,990 --> 00:05:27,539
IBM or other alternative JVM

00:05:24,000 --> 00:05:30,090
applications are doing that hard work I

00:05:27,539 --> 00:05:32,510
actually do care about PI stone because

00:05:30,090 --> 00:05:35,729
it does measure things around dynamic

00:05:32,510 --> 00:05:39,180
dispatch and other sort of inner loop

00:05:35,729 --> 00:05:41,580
type performance in the Python runtime

00:05:39,180 --> 00:05:44,699
or Jai thong runtime so it's important

00:05:41,580 --> 00:05:46,650
for me less important for you you run

00:05:44,699 --> 00:05:51,900
the benchmark that you care about

00:05:46,650 --> 00:05:53,460
but release were not like terrible one

00:05:51,900 --> 00:05:55,130
way to understand projects is you know

00:05:53,460 --> 00:05:57,630
and this is certainly what I do

00:05:55,130 --> 00:05:59,280
what you all should do is you know look

00:05:57,630 --> 00:06:01,740
at the email list the wiki's the code

00:05:59,280 --> 00:06:03,300
what's new bug reports so on and so

00:06:01,740 --> 00:06:05,940
forth

00:06:03,300 --> 00:06:09,870
especially the commit log commits to

00:06:05,940 --> 00:06:14,700
tell you what changed and that sort of

00:06:09,870 --> 00:06:16,750
tells you like again what whether or not

00:06:14,700 --> 00:06:20,110
that project is really alive or not

00:06:16,750 --> 00:06:21,640
so what about this subset of the Python

00:06:20,110 --> 00:06:24,250
language well it's not just language

00:06:21,640 --> 00:06:26,590
features it's a standard library

00:06:24,250 --> 00:06:30,520
it's the Python ecosystem I just showed

00:06:26,590 --> 00:06:35,260
you ensure pip and having that work and

00:06:30,520 --> 00:06:38,830
how we responded okay so getting back to

00:06:35,260 --> 00:06:42,160
my original point read the actual

00:06:38,830 --> 00:06:45,090
changes so there was this I wasn't

00:06:42,160 --> 00:06:47,560
really satisfied with this text

00:06:45,090 --> 00:06:49,000
pythons inventor guido van rossum and

00:06:47,560 --> 00:06:52,240
the rest of python labs

00:06:49,000 --> 00:06:53,770
it shows how dated this is continues to

00:06:52,240 --> 00:06:55,930
help and support chai thon by their

00:06:53,770 --> 00:07:02,440
understanding of how I thought must live

00:06:55,930 --> 00:07:03,330
within the limits of Java no let's not

00:07:02,440 --> 00:07:06,190
do that

00:07:03,330 --> 00:07:08,470
this makes it much better Jai thong

00:07:06,190 --> 00:07:10,270
Python for the Java platform Jai thon

00:07:08,470 --> 00:07:12,190
falls closely the Python language in

00:07:10,270 --> 00:07:16,560
this reference implementation see Python

00:07:12,190 --> 00:07:20,680
in John 2.7 corresponds to C Python 2.7

00:07:16,560 --> 00:07:22,330
so you know we're not really saying hey

00:07:20,680 --> 00:07:24,310
there's this limitation because the JVM

00:07:22,330 --> 00:07:26,790
and the Java ecosystem is obviously

00:07:24,310 --> 00:07:29,560
evolved over time and is much richer and

00:07:26,790 --> 00:07:32,830
we're also no longer concerned about hey

00:07:29,560 --> 00:07:35,320
are we pure Java shouldn't we should we

00:07:32,830 --> 00:07:38,080
just support like only the functionality

00:07:35,320 --> 00:07:39,760
that we get it out of Java 7 no we take

00:07:38,080 --> 00:07:43,390
things like Java native runtime or

00:07:39,760 --> 00:07:45,669
whatnot we support C extensions to a

00:07:43,390 --> 00:07:49,090
certain extent not the C extension API

00:07:45,669 --> 00:07:52,080
but definitely C code and I'll be

00:07:49,090 --> 00:07:55,540
talking about that as well in the talk

00:07:52,080 --> 00:07:59,740
so here are some of the things we've

00:07:55,540 --> 00:08:02,080
added I talked to Benjamin Peterson

00:07:59,740 --> 00:08:04,740
about this he was telling me oh so you

00:08:02,080 --> 00:08:08,950
support all the crazy import hook magic

00:08:04,740 --> 00:08:11,260
yes we do for six and now that means

00:08:08,950 --> 00:08:13,960
that your single source code base that

00:08:11,260 --> 00:08:18,700
runs on Python 2 in Python 3 potentially

00:08:13,960 --> 00:08:20,410
also runs on a I thought if you ever use

00:08:18,700 --> 00:08:22,720
characteristic Anna's class decorator

00:08:20,410 --> 00:08:26,750
magic we also support that and you can

00:08:22,720 --> 00:08:30,500
embed lambdas in your class decorator

00:08:26,750 --> 00:08:34,210
we fully support socket select SSL using

00:08:30,500 --> 00:08:34,210
Neddie Neddie for to be precise

00:08:34,930 --> 00:08:41,750
requests in this beautiful API tip as we

00:08:39,200 --> 00:08:44,080
just saw also supporting this

00:08:41,750 --> 00:08:47,450
functionality for Windows including

00:08:44,080 --> 00:08:50,330
executable zip archives and on localized

00:08:47,450 --> 00:08:53,480
platforms including these and presumably

00:08:50,330 --> 00:08:55,550
many more which also means that we

00:08:53,480 --> 00:08:59,710
support Chinese Japanese and Korean and

00:08:55,550 --> 00:09:04,970
coatings all right let's try this out so

00:08:59,710 --> 00:09:15,110
I'm gonna go over to Windows ok and

00:09:04,970 --> 00:09:18,410
let's see X last year but ok and let's

00:09:15,110 --> 00:09:31,670
see here I have installed it under

00:09:18,410 --> 00:09:34,400
Tython nope not that one dot exe so it's

00:09:31,670 --> 00:09:38,990
now native executable and I'm gonna run

00:09:34,400 --> 00:09:41,540
the test request code and we'll just see

00:09:38,990 --> 00:09:46,400
that spin through and unfortunately it's

00:09:41,540 --> 00:09:49,970
a little bit yeah a little bit time to

00:09:46,400 --> 00:09:54,470
go and start that up because I don't

00:09:49,970 --> 00:09:56,089
think I have my VMware fusion actually

00:09:54,470 --> 00:09:59,690
optimized to run Windows but there we go

00:09:56,089 --> 00:10:02,839
we got some dots on all right few more

00:09:59,690 --> 00:10:04,730
dots I guess everything is good good so

00:10:02,839 --> 00:10:06,770
far oh it looks like we haven't

00:10:04,730 --> 00:10:10,760
supported the new SSL context so we're

00:10:06,770 --> 00:10:16,360
not at 2.79 functionality yet but we ran

00:10:10,760 --> 00:10:16,360
all 143 tests ok

00:10:17,480 --> 00:10:23,010
yeah and it by the way since Java has an

00:10:21,000 --> 00:10:25,080
SSL context object this really is just a

00:10:23,010 --> 00:10:27,420
question of just exposing that new

00:10:25,080 --> 00:10:34,790
functionality we'll get to it maybe even

00:10:27,420 --> 00:10:34,790
this coming week with the sprints okay

00:10:35,150 --> 00:10:38,850
there's a new project that Manoa is have

00:10:38,100 --> 00:10:40,950
been working on

00:10:38,850 --> 00:10:44,370
it's called clamp that allows us to

00:10:40,950 --> 00:10:46,320
support precise integration with Java it

00:10:44,370 --> 00:10:50,940
means that you can directly import your

00:10:46,320 --> 00:10:54,690
Python classes into your java code like

00:10:50,940 --> 00:10:56,760
here's your Java code and at the top

00:10:54,690 --> 00:10:59,340
I'll just show you in a moment I can

00:10:56,760 --> 00:11:02,160
just import that Python code that Python

00:10:59,340 --> 00:11:04,320
module that's been clamped any great

00:11:02,160 --> 00:11:06,180
setup tools to produce jars you might

00:11:04,320 --> 00:11:07,770
use this for example with a big data

00:11:06,180 --> 00:11:10,650
ecosystem I've been playing with this

00:11:07,770 --> 00:11:14,880
for example to run it directly on storm

00:11:10,650 --> 00:11:16,770
apache storm for example i'm i think we

00:11:14,880 --> 00:11:18,330
should be able to also add support for

00:11:16,770 --> 00:11:22,470
May then it's some future point so you

00:11:18,330 --> 00:11:25,260
can pull in stuff that you want you know

00:11:22,470 --> 00:11:27,810
additional jars from the mavin mavin

00:11:25,260 --> 00:11:30,510
repositories in that fashion and it's

00:11:27,810 --> 00:11:32,340
just great sprint topic for this week so

00:11:30,510 --> 00:11:35,610
let's say we had something like this

00:11:32,340 --> 00:11:39,090
we're gonna import you know serializable

00:11:35,610 --> 00:11:41,550
interface and the Kabul interface and we

00:11:39,090 --> 00:11:44,820
want to go and make something that can

00:11:41,550 --> 00:11:47,190
be called from Java code if we were to

00:11:44,820 --> 00:11:48,690
pass it through into a callback that

00:11:47,190 --> 00:11:50,550
would be the normal way that you would

00:11:48,690 --> 00:11:51,590
have done it in previous versions of

00:11:50,550 --> 00:11:55,670
Jathan

00:11:51,590 --> 00:11:58,710
however just by adding this one line

00:11:55,670 --> 00:12:01,620
this clamp base and the import from the

00:11:58,710 --> 00:12:04,740
clamp module and then going and using

00:12:01,620 --> 00:12:07,640
that this is actually a meta class that

00:12:04,740 --> 00:12:15,810
is built this bar base this will now

00:12:07,640 --> 00:12:18,120
locate your bar clamp class in a java

00:12:15,810 --> 00:12:23,370
package that will be built out with the

00:12:18,120 --> 00:12:25,490
clamp build jarred single jar support so

00:12:23,370 --> 00:12:29,580
I can just simply do something like this

00:12:25,490 --> 00:12:30,270
notice it is a standard setup py all I'm

00:12:29,580 --> 00:12:33,030
adding he

00:12:30,270 --> 00:12:35,250
is just a new keyword clamp so there's

00:12:33,030 --> 00:12:40,620
it's actually implemented using a set of

00:12:35,250 --> 00:12:41,970
tools extension and here's some you know

00:12:40,620 --> 00:12:46,740
we normally don't like to show too much

00:12:41,970 --> 00:12:50,060
Java code and at PyCon but you have to

00:12:46,740 --> 00:12:58,290
admit that this is kind of cool

00:12:50,060 --> 00:13:00,930
like yeah yeah so so here that bar clamp

00:12:58,290 --> 00:13:04,230
class is being directly imported into

00:13:00,930 --> 00:13:06,030
your java code and you can just use and

00:13:04,230 --> 00:13:08,700
you can see yeah you've got to use the

00:13:06,030 --> 00:13:10,110
standard like catch exceptions and all

00:13:08,700 --> 00:13:14,240
the stuff that you would typically have

00:13:10,110 --> 00:13:17,790
to do that was not terribly interesting

00:13:14,240 --> 00:13:19,080
so here's another project that shows us

00:13:17,790 --> 00:13:22,740
off a little bit more this is the

00:13:19,080 --> 00:13:26,520
fireside project it's a whizbee bridge

00:13:22,740 --> 00:13:32,060
the servlet containers it passes some

00:13:26,520 --> 00:13:35,690
compliance testing April 17th is Friday

00:13:32,060 --> 00:13:38,360
I'm gonna be working with some my fellow

00:13:35,690 --> 00:13:42,270
developers at Rackspace on adding

00:13:38,360 --> 00:13:44,760
servlet filters support for it it uses

00:13:42,270 --> 00:13:49,010
clamp so a good example so we just

00:13:44,760 --> 00:13:52,050
simply add this to your web dot XML

00:13:49,010 --> 00:13:54,360
notice that we just simply need to bind

00:13:52,050 --> 00:13:54,720
this wizzy servlet where is this coming

00:13:54,360 --> 00:13:57,300
from

00:13:54,720 --> 00:14:00,140
well this is something that's been

00:13:57,300 --> 00:14:02,490
clamped how does that look

00:14:00,140 --> 00:14:03,990
well you just start with this you do

00:14:02,490 --> 00:14:05,820
your standard thing as I said you have

00:14:03,990 --> 00:14:09,660
this theme for building out a medic

00:14:05,820 --> 00:14:12,810
class base we'll put it in the org

00:14:09,660 --> 00:14:16,620
Python that tools namespace Java

00:14:12,810 --> 00:14:19,320
namespace you might see something like

00:14:16,620 --> 00:14:21,120
this you have your class word whiskey

00:14:19,320 --> 00:14:23,160
servlet it is a simply extending HTTP

00:14:21,120 --> 00:14:27,450
servlet and this tool base so again

00:14:23,160 --> 00:14:29,370
clamp knows how to work with it and it's

00:14:27,450 --> 00:14:33,210
just standard Python code that is

00:14:29,370 --> 00:14:38,040
calling some Java right and and being

00:14:33,210 --> 00:14:39,630
called by Java so we can do we can build

00:14:38,040 --> 00:14:42,180
this project out this just uses

00:14:39,630 --> 00:14:45,450
everything here is just

00:14:42,180 --> 00:14:49,710
using 2.7 release candidate - I'm gonna

00:14:45,450 --> 00:14:51,870
install Auto Emeco clamp and fireside

00:14:49,710 --> 00:14:57,840
currently these are not on pi PI because

00:14:51,870 --> 00:14:59,850
they're not yet really ready yet in

00:14:57,840 --> 00:15:01,950
terms of how we want to see the testing

00:14:59,850 --> 00:15:05,760
and everything but ready enough for us

00:15:01,950 --> 00:15:08,400
to go and play with for sure I built out

00:15:05,760 --> 00:15:10,170
this bottle application using a Mako

00:15:08,400 --> 00:15:14,100
template alright so that's pretty

00:15:10,170 --> 00:15:18,120
standard hello world I created a single

00:15:14,100 --> 00:15:22,710
jar that I can build out into a war file

00:15:18,120 --> 00:15:26,130
I run it with jetty I test it against

00:15:22,710 --> 00:15:28,950
Apache benchmark the first time I run it

00:15:26,130 --> 00:15:30,810
I see wow this really long you know six

00:15:28,950 --> 00:15:33,600
seconds for everything to load up and

00:15:30,810 --> 00:15:37,380
everything but you know after a while it

00:15:33,600 --> 00:15:42,690
converges on you know the average median

00:15:37,380 --> 00:15:46,230
time sorry is one millisecond and the

00:15:42,690 --> 00:15:50,010
99th percentile is four milliseconds not

00:15:46,230 --> 00:15:51,840
so bad so the steady-state performance

00:15:50,010 --> 00:15:53,010
is definitely decent and that I should

00:15:51,840 --> 00:15:55,140
mention that occasionally you will see

00:15:53,010 --> 00:15:59,310
garbage collection pauses but again you

00:15:55,140 --> 00:16:01,770
can also tune that in your java garbage

00:15:59,310 --> 00:16:05,610
collector collector and i happen to just

00:16:01,770 --> 00:16:07,290
be running this on my laptop okay so

00:16:05,610 --> 00:16:10,650
what about that better Java integration

00:16:07,290 --> 00:16:12,690
I was speaking about okay well let's go

00:16:10,650 --> 00:16:18,150
take a look at that so I'll just start

00:16:12,690 --> 00:16:23,640
by throwing two points seven so this is

00:16:18,150 --> 00:16:28,050
kind nice you know Java's can be kind of

00:16:23,640 --> 00:16:33,270
wordy so what about tab-completion built

00:16:28,050 --> 00:16:35,460
into the console alright but you still

00:16:33,270 --> 00:16:38,090
get all of that nice job of

00:16:35,460 --> 00:16:44,190
functionality so you know I kind of like

00:16:38,090 --> 00:16:48,000
concurrent skip list set so I could

00:16:44,190 --> 00:16:53,480
build one of those sets I can take adder

00:16:48,000 --> 00:16:56,760
of that and what I'll notice is it

00:16:53,480 --> 00:17:01,050
all of these functions that come

00:16:56,760 --> 00:17:03,600
straight out of the standard Python set

00:17:01,050 --> 00:17:07,800
so we have adapted Python sets as re

00:17:03,600 --> 00:17:12,420
Java sets so that they look like Python

00:17:07,800 --> 00:17:15,570
sets they're semantically equivalent all

00:17:12,420 --> 00:17:21,480
right that's kind of cool and that's

00:17:15,570 --> 00:17:25,770
true for Java util map it looks like a

00:17:21,480 --> 00:17:27,900
standard dict that's true also for Java

00:17:25,770 --> 00:17:31,400
util list it looks like a standard

00:17:27,900 --> 00:17:35,130
Python list all right so some great work

00:17:31,400 --> 00:17:36,510
to make that happen by the people who

00:17:35,130 --> 00:17:38,820
have committed and contributed to Jai

00:17:36,510 --> 00:17:40,950
thon um past couple years and this

00:17:38,820 --> 00:17:44,370
particular work just came about in the

00:17:40,950 --> 00:17:46,770
last four months or so but wait there's

00:17:44,370 --> 00:17:53,150
more okay so let's see here I can import

00:17:46,770 --> 00:17:59,000
collections and I can say is instance s

00:17:53,150 --> 00:18:04,080
collections set this abstract base class

00:17:59,000 --> 00:18:07,590
yes but of course it is so we really are

00:18:04,080 --> 00:18:10,290
trying to go and truly be semantically

00:18:07,590 --> 00:18:12,390
equivalent whatever you're seeing in

00:18:10,290 --> 00:18:14,280
that Java namespace when you import it

00:18:12,390 --> 00:18:16,650
into the mine Python namespace and

00:18:14,280 --> 00:18:18,750
you're using it there you should just be

00:18:16,650 --> 00:18:21,120
able to treat it as if it were a Python

00:18:18,750 --> 00:18:25,100
object including these sorts of

00:18:21,120 --> 00:18:28,160
behaviors what do you think is that cool

00:18:25,100 --> 00:18:28,160
thank you

00:18:31,810 --> 00:18:38,780
so the next thing that you might

00:18:34,180 --> 00:18:40,550
consider is C integration so I've shown

00:18:38,780 --> 00:18:42,440
you some of the Java integration story

00:18:40,550 --> 00:18:45,530
but who would do better on our C

00:18:42,440 --> 00:18:47,720
integration sign well there is this

00:18:45,530 --> 00:18:51,170
project that's kind of cool out there

00:18:47,720 --> 00:18:52,910
it's called Java fine and it is a

00:18:51,170 --> 00:18:58,400
standard project from the Java need of

00:18:52,910 --> 00:19:00,410
runtime JRuby really built this out and

00:18:58,400 --> 00:19:04,180
the people on the J Ruby team have

00:19:00,410 --> 00:19:08,300
continued to develop on it and it's

00:19:04,180 --> 00:19:12,110
possible they will be part of Java 9 we

00:19:08,300 --> 00:19:15,110
also use it in Jai thon so specifically

00:19:12,110 --> 00:19:19,130
our POSIX support things that we cannot

00:19:15,110 --> 00:19:22,100
get out of Java 7 in i/o - by the way we

00:19:19,130 --> 00:19:27,080
do now require that you run Jai thon on

00:19:22,100 --> 00:19:29,390
Java 7 that sort of thing we can go and

00:19:27,080 --> 00:19:32,170
take advantage of from the Java native

00:19:29,390 --> 00:19:35,330
runtime and specifically just jf5

00:19:32,170 --> 00:19:37,540
however it's still not part of the

00:19:35,330 --> 00:19:40,010
standard Python ecosystem right I mean

00:19:37,540 --> 00:19:42,080
it's nice that this is existing there

00:19:40,010 --> 00:19:43,270
and for people who are really hurt in a

00:19:42,080 --> 00:19:46,760
hard core on this they will definitely

00:19:43,270 --> 00:19:52,130
want to use something like GFI but can

00:19:46,760 --> 00:19:55,330
we do better well Stefan recover who is

00:19:52,130 --> 00:20:00,590
here this week and also sprinting on

00:19:55,330 --> 00:20:02,210
Jaden oh and he will stand up he's been

00:20:00,590 --> 00:20:05,780
working on this fantastic project and

00:20:02,210 --> 00:20:07,610
the idea is simple we allow you he

00:20:05,780 --> 00:20:13,100
allows you with this project to simply

00:20:07,610 --> 00:20:14,390
add the j1i jar to your class path or

00:20:13,100 --> 00:20:19,010
you could add it to assist up path

00:20:14,390 --> 00:20:23,300
probably and it allows you to get at C

00:20:19,010 --> 00:20:25,940
extension API support right now I know

00:20:23,300 --> 00:20:31,730
you demoed this with a decanter the

00:20:25,940 --> 00:20:34,640
lightning talks right the challenge

00:20:31,730 --> 00:20:37,190
right now is for adding full garbage

00:20:34,640 --> 00:20:38,900
collection support because guess what

00:20:37,190 --> 00:20:41,929
it's not terribly interesting if you

00:20:38,900 --> 00:20:44,450
don't actually click garbage

00:20:41,929 --> 00:20:46,849
something like this I mean you think you

00:20:44,450 --> 00:20:48,349
can run some packages regardless in this

00:20:46,849 --> 00:20:51,649
fashion but you really want to have full

00:20:48,349 --> 00:20:53,869
garbage collection support so Stephane

00:20:51,649 --> 00:20:58,159
is planning to work on C type support

00:20:53,869 --> 00:20:58,970
see if Fi and in the future numpy when

00:20:58,159 --> 00:21:03,399
that be awesome

00:20:58,970 --> 00:21:06,259
I'm PI support as I like to say it

00:21:03,399 --> 00:21:09,609
Jai thon could truly be a force for evil

00:21:06,259 --> 00:21:12,289
in the world one ring to rule them all

00:21:09,609 --> 00:21:14,599
well you know you have the Python

00:21:12,289 --> 00:21:17,359
ecosystem and the Java ecosystem and the

00:21:14,599 --> 00:21:21,529
Fortran ecosystem and that C ecosystem

00:21:17,359 --> 00:21:25,159
an event an interesting idea now so

00:21:21,529 --> 00:21:28,609
we're hopeful that this will be approved

00:21:25,159 --> 00:21:31,519
and working this summer on it

00:21:28,609 --> 00:21:35,599
well what about here's Anna here's

00:21:31,519 --> 00:21:36,830
another interesting thing you know

00:21:35,599 --> 00:21:37,580
there's this thing called Python byte

00:21:36,830 --> 00:21:40,879
code so jython

00:21:37,580 --> 00:21:42,979
compiles the Java byte code but I

00:21:40,879 --> 00:21:44,359
thought my code is kind of cool to use

00:21:42,979 --> 00:21:46,129
as well so I'll just show you a little

00:21:44,359 --> 00:21:51,259
example let's say we had this simple

00:21:46,129 --> 00:21:55,179
function like so it compiles this way so

00:21:51,259 --> 00:21:59,119
this is the disassembly of that alright

00:21:55,179 --> 00:22:00,830
so and if you look at C eval dot C and

00:21:59,119 --> 00:22:03,909
you're just looking at the byte code for

00:22:00,830 --> 00:22:06,139
that you know binary ad right there

00:22:03,909 --> 00:22:09,590
you'll see something along the following

00:22:06,139 --> 00:22:10,220
line in C code so all right so that's

00:22:09,590 --> 00:22:13,340
not so bad

00:22:10,220 --> 00:22:15,379
well that's a little bit more oh you

00:22:13,340 --> 00:22:18,879
still have to worry about reference

00:22:15,379 --> 00:22:22,549
counting well we have this experimental

00:22:18,879 --> 00:22:25,789
virtual machine in Drye thawne that

00:22:22,549 --> 00:22:28,970
allows us to go and run Python byte code

00:22:25,789 --> 00:22:32,419
and mind you it's a little bit simpler

00:22:28,970 --> 00:22:38,090
because that was the implementation of

00:22:32,419 --> 00:22:41,119
the add operation I don't think we'll

00:22:38,090 --> 00:22:43,429
have time for me to dig into this but

00:22:41,119 --> 00:22:46,639
let's just say that it'd be kind of cool

00:22:43,429 --> 00:22:48,019
to take a look and and compare and I'll

00:22:46,639 --> 00:22:52,270
mention in just a moment why this is

00:22:48,019 --> 00:22:55,420
important so tight on 2.7

00:22:52,270 --> 00:22:58,600
X this is the getting beyond point

00:22:55,420 --> 00:23:00,850
so we're where X is greater than zero x

00:22:58,600 --> 00:23:02,530
equals one equals x equals two whatever

00:23:00,850 --> 00:23:04,330
we're gonna be focusing around

00:23:02,530 --> 00:23:06,550
performance

00:23:04,330 --> 00:23:07,780
we're probably defined even more

00:23:06,550 --> 00:23:10,030
opportunities to do better job

00:23:07,780 --> 00:23:16,720
integration I know for in particular we

00:23:10,030 --> 00:23:18,520
need to better support super for Java be

00:23:16,720 --> 00:23:22,720
really cool to go and have this Python

00:23:18,520 --> 00:23:24,910
bytecode compiler because on Android if

00:23:22,720 --> 00:23:27,880
you want to be able to not have

00:23:24,910 --> 00:23:31,179
everything compiled in advance ahead of

00:23:27,880 --> 00:23:32,920
time with say a setup dot P why you need

00:23:31,179 --> 00:23:35,620
something like that so you can you know

00:23:32,920 --> 00:23:40,660
pull up a death and console on your

00:23:35,620 --> 00:23:41,800
Android box would that be sweet I'm sure

00:23:40,660 --> 00:23:46,450
we're gonna have more hooks for Java

00:23:41,800 --> 00:23:48,340
integration of course when how for 2.7

00:23:46,450 --> 00:23:50,800
dot X well I think as long as Python 2.7

00:23:48,340 --> 00:23:52,570
is in white use we're gonna move to

00:23:50,800 --> 00:23:55,500
time-based releases because feature

00:23:52,570 --> 00:23:59,710
based is sort of a sucky way to do it

00:23:55,500 --> 00:24:01,750
and every six months seems much better I

00:23:59,710 --> 00:24:03,340
think we're in a better shape for that

00:24:01,750 --> 00:24:06,309
because once you hit to a certain level

00:24:03,340 --> 00:24:08,740
of compliance it's much easier to say

00:24:06,309 --> 00:24:12,100
well we just add things and we tweak it

00:24:08,740 --> 00:24:14,080
in this fashion and I'm hoping to use

00:24:12,100 --> 00:24:17,860
this new flirt workflow the C Python is

00:24:14,080 --> 00:24:20,470
working on as well some other things is

00:24:17,860 --> 00:24:23,230
that Java 9 is adding some really cool

00:24:20,470 --> 00:24:25,330
features for optimization and there's

00:24:23,230 --> 00:24:28,630
even this really cool project out of UC

00:24:25,330 --> 00:24:30,940
Irvine is achieving so you mentioned

00:24:28,630 --> 00:24:32,590
that I mentioned that 21 X performance

00:24:30,940 --> 00:24:34,870
gap with pipeline well right now I think

00:24:32,590 --> 00:24:36,370
Sippy is about the same speed or faster

00:24:34,870 --> 00:24:39,610
than pipe I unfortunately it's still

00:24:36,370 --> 00:24:42,640
just extremely experimental only runs

00:24:39,610 --> 00:24:44,800
toy stuff but if you were to combine

00:24:42,640 --> 00:24:50,080
together a zippy with the Jai thon

00:24:44,800 --> 00:24:51,400
runtime that would be interesting some

00:24:50,080 --> 00:24:57,820
people occasionally will ask me about

00:24:51,400 --> 00:25:01,090
3.2 X and I don't just snap at them but

00:24:57,820 --> 00:25:03,160
that's come up periodically the to be

00:25:01,090 --> 00:25:05,470
honest it would definitely simplify Jai

00:25:03,160 --> 00:25:12,050
thon because let's face it

00:25:05,470 --> 00:25:14,840
us cpython 3x is much closer in terms of

00:25:12,050 --> 00:25:17,480
its treatment of unicode strings and

00:25:14,840 --> 00:25:19,400
byte strings for example compared to

00:25:17,480 --> 00:25:23,390
what we see in java we can strip out

00:25:19,400 --> 00:25:25,970
some code that's great when is it gonna

00:25:23,390 --> 00:25:27,680
come up I don't know I mean that's like

00:25:25,970 --> 00:25:29,000
another big thing but we're not gonna

00:25:27,680 --> 00:25:30,920
Death March it or anything like that

00:25:29,000 --> 00:25:35,000
we're gonna stick it as it comes up and

00:25:30,920 --> 00:25:38,240
play with it but we will go in try to

00:25:35,000 --> 00:25:42,080
target 3.5 and it's definitely a really

00:25:38,240 --> 00:25:45,080
cool feature of the upcoming sprints so

00:25:42,080 --> 00:25:47,390
one more thing I'll say is that if you

00:25:45,080 --> 00:25:51,490
are interested in Minecraft because you

00:25:47,390 --> 00:25:54,740
have kids so I have some kids as myself

00:25:51,490 --> 00:25:58,460
we're gonna be trying to go and look at

00:25:54,740 --> 00:26:00,170
minecraft support full Python support

00:25:58,460 --> 00:26:02,810
for minecraft or I should say take all

00:26:00,170 --> 00:26:09,220
the bucket and expose it in that fashion

00:26:02,810 --> 00:26:12,710
because it's cool and bucket is Java and

00:26:09,220 --> 00:26:15,140
then you can go and like like write your

00:26:12,710 --> 00:26:16,460
own mods and Python like real mods

00:26:15,140 --> 00:26:19,730
wouldn't it be awesome

00:26:16,460 --> 00:26:23,440
alright so that's yeah thanks and that's

00:26:19,730 --> 00:26:26,240
it any questions I'd love to take them

00:26:23,440 --> 00:26:28,730
all right oh my goodness people did that

00:26:26,240 --> 00:26:31,220
Matt did I spot him typing import Java

00:26:28,730 --> 00:26:33,380
into a Python console I'm not sure

00:26:31,220 --> 00:26:34,940
whether that's sacrilegious or wonderful

00:26:33,380 --> 00:26:37,100
but I think I'm gonna go with the latter

00:26:34,940 --> 00:26:42,950
and so join me please in giving Jim a

00:26:37,100 --> 00:26:44,300
huge hand thank you very much alright so

00:26:42,950 --> 00:26:46,160
we have like about a minute

00:26:44,300 --> 00:26:47,900
two minutes for questions so please show

00:26:46,160 --> 00:26:50,690
up with a microphone fire away and make

00:26:47,900 --> 00:26:53,270
the questions insanely difficult great

00:26:50,690 --> 00:26:56,420
talk Jim thanks thanks I actually still

00:26:53,270 --> 00:27:04,640
have production code running using

00:26:56,420 --> 00:27:05,610
jython ask me why do you get the tweets

00:27:04,640 --> 00:27:08,130
and the hash

00:27:05,610 --> 00:27:09,660
ask if the Giants still alive I guess

00:27:08,130 --> 00:27:12,030
I'm curious because there's still

00:27:09,660 --> 00:27:14,040
clearly a need for it in the ecosystem

00:27:12,030 --> 00:27:15,990
but what is the whys why do you think

00:27:14,040 --> 00:27:18,299
that's the perception yeah I mean I

00:27:15,990 --> 00:27:21,960
think the thing this is taking us a

00:27:18,299 --> 00:27:23,700
while to go and get 2.7 out and people

00:27:21,960 --> 00:27:27,450
look at say hey what's your latest

00:27:23,700 --> 00:27:30,870
download and if it's not there yet they

00:27:27,450 --> 00:27:32,250
just jump to conclusions and the reality

00:27:30,870 --> 00:27:35,190
is is that maybe we could have released

00:27:32,250 --> 00:27:38,730
a 2.7 you know three years ago with

00:27:35,190 --> 00:27:41,090
whatever our beta was at that time but

00:27:38,730 --> 00:27:43,500
what you're gonna get with this one is

00:27:41,090 --> 00:27:45,870
all the functionality I just showed you

00:27:43,500 --> 00:27:48,780
so I hopefully it's it's been worth the

00:27:45,870 --> 00:27:49,919
wait but I can't necessarily answer you

00:27:48,780 --> 00:27:59,429
know how people just jump to those

00:27:49,919 --> 00:28:02,450
conclusions sure I mean we have I would

00:27:59,429 --> 00:28:07,620
say that we had commits from at least

00:28:02,450 --> 00:28:09,120
ten people in the last six months and if

00:28:07,620 --> 00:28:12,770
you go back further than that it just

00:28:09,120 --> 00:28:15,990
you know continues to widen absolutely

00:28:12,770 --> 00:28:19,049
hygiene is there any way to improve

00:28:15,990 --> 00:28:21,480
gitis start out there for months I'm

00:28:19,049 --> 00:28:25,350
glad you asked that you know if you

00:28:21,480 --> 00:28:30,419
don't address a problem it's not gonna

00:28:25,350 --> 00:28:32,370
be fixed and so there are a couple of

00:28:30,419 --> 00:28:34,970
things that I'm thinking of that would

00:28:32,370 --> 00:28:37,890
definitely improve that performance

00:28:34,970 --> 00:28:40,500
actually using Python bytecode is a very

00:28:37,890 --> 00:28:42,270
good example of this you don't

00:28:40,500 --> 00:28:44,940
necessarily have to compile everything

00:28:42,270 --> 00:28:48,090
to Java bytecode and Python bytecode

00:28:44,940 --> 00:28:49,980
doesn't have the performance overhead

00:28:48,090 --> 00:28:52,620
that you see with Java bytecode for

00:28:49,980 --> 00:28:56,330
simple things like running a module

00:28:52,620 --> 00:28:58,169
script so that potentially could add

00:28:56,330 --> 00:29:01,020
significant form performance and also

00:28:58,169 --> 00:29:04,650
reduce the volume of classes that are

00:29:01,020 --> 00:29:06,480
loaded in when you start up the jet on

00:29:04,650 --> 00:29:10,440
the runtime so that's just one idea and

00:29:06,480 --> 00:29:12,809
the advantage of something like doing

00:29:10,440 --> 00:29:15,390
that is really simple you solve that one

00:29:12,809 --> 00:29:17,640
problem and also you say oh well large

00:29:15,390 --> 00:29:22,170
methods check

00:29:17,640 --> 00:29:24,570
Android check all these things I like

00:29:22,170 --> 00:29:28,470
things like that where you are able to

00:29:24,570 --> 00:29:31,290
go and say you solve for something and

00:29:28,470 --> 00:29:34,260
it solves all these other problems and

00:29:31,290 --> 00:29:38,040
you can see that like in general that's

00:29:34,260 --> 00:29:41,580
jaikon is real thing for you right you

00:29:38,040 --> 00:29:42,870
want Python code to run on the JVM you

00:29:41,580 --> 00:29:46,640
don't necessarily have to port it to

00:29:42,870 --> 00:29:46,640
Java or vice versa

00:29:56,120 --> 00:30:01,620
or you know at least Python both but I'm

00:29:59,400 --> 00:30:02,910
not going to do it unless I get another

00:30:01,620 --> 00:30:06,440
person that commits to being a

00:30:02,910 --> 00:30:10,169
co-creator so if you are interested in

00:30:06,440 --> 00:30:15,330
Minecraft or teaching kids or just

00:30:10,169 --> 00:30:17,910
getting join that sounds great thanks

00:30:15,330 --> 00:30:21,210
for bringing that up this needs to be

00:30:17,910 --> 00:30:23,190
done alright thanks very much so I'm

00:30:21,210 --> 00:30:25,500
sure you'll agree with me 710 B this was

00:30:23,190 --> 00:30:27,270
the room with the best speakers the most

00:30:25,500 --> 00:30:29,040
attractive and the most intelligent

00:30:27,270 --> 00:30:30,780
people thanks for being here thanks to

00:30:29,040 --> 00:30:32,730
all us because thanks to Jim especially

00:30:30,780 --> 00:30:34,080
thanks to all of you guys this is the

00:30:32,730 --> 00:30:35,940
end of the talks so we're going

00:30:34,080 --> 00:30:38,520
downstairs now for two final keynotes

00:30:35,940 --> 00:30:40,530
with Dido and Gary Bernhardt thanks for

00:30:38,520 --> 00:30:43,049
being here and see you all later today

00:30:40,530 --> 00:30:45,210
and I'm willing to take any and all

00:30:43,049 --> 00:30:48,080
additional questions as you walk outside

00:30:45,210 --> 00:30:48,080

YouTube URL: https://www.youtube.com/watch?v=hLm3garVQFo


