Title: Thomas Ballinger - Terminal whispering - PyCon 2015
Publication date: 2015-04-12
Playlist: PyCon 2015
Description: 
	"Speaker: Thomas Ballinger

Have you ever wanted to add a status bar to your command line program?
Or maybe color the output a bit? Or do you want to write a fullscreen terminal application like ls, top, vim, or emacs? Then you need to speak a bit of terminal! This talk describes how to talk to your terminal from scratch and goes on to show why Python libraries Blessings and Urwid are so awesome.

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:00,000 --> 00:00:03,270
conference have come here up to and

00:00:01,920 --> 00:00:05,759
including our speaker but excluding

00:00:03,270 --> 00:00:06,839
myself so I'd like to welcome Thomas

00:00:05,759 --> 00:00:08,250
Ballinger who's going to be talking

00:00:06,839 --> 00:00:10,700
about terminal whispering please give

00:00:08,250 --> 00:00:10,700
him a big hand

00:00:16,490 --> 00:00:21,150
excited to just get right going so we

00:00:19,590 --> 00:00:24,359
want to learn to do more than just print

00:00:21,150 --> 00:00:25,740
text with our terminals so terminals are

00:00:24,359 --> 00:00:27,150
cool they can do a lot of things we use

00:00:25,740 --> 00:00:31,980
them everyday you're probably yeah

00:00:27,150 --> 00:00:35,340
terminal is right technology from 50

00:00:31,980 --> 00:00:36,809
years ago it's great so typically we use

00:00:35,340 --> 00:00:40,020
them in the kind of call and response

00:00:36,809 --> 00:00:43,770
manner I'm gonna show here right we may

00:00:40,020 --> 00:00:44,940
be type of command and then we you

00:00:43,770 --> 00:00:46,379
display that command and then we see the

00:00:44,940 --> 00:00:47,910
output of it on the next line and then

00:00:46,379 --> 00:00:49,559
we go down even one more line and we

00:00:47,910 --> 00:00:52,770
print the next thing Python works like

00:00:49,559 --> 00:00:54,120
this bash works like this it's useful

00:00:52,770 --> 00:00:55,379
right you have the scroll back thing

00:00:54,120 --> 00:00:57,510
where you can see previous things that

00:00:55,379 --> 00:00:58,980
have happened but it's this kind of

00:00:57,510 --> 00:01:00,570
strict set of rules that we sort of

00:00:58,980 --> 00:01:02,489
follow that was a get status we printed

00:01:00,570 --> 00:01:04,350
stuff out on the color which is kind of

00:01:02,489 --> 00:01:07,100
interesting we wonder how to do that and

00:01:04,350 --> 00:01:10,530
then we have LS here LS is a little bit

00:01:07,100 --> 00:01:11,820
if you try LS on your own computer if

00:01:10,530 --> 00:01:14,939
you've got it there and tried changing

00:01:11,820 --> 00:01:16,979
the window size LS output will change it

00:01:14,939 --> 00:01:19,439
will decide how many columns to use

00:01:16,979 --> 00:01:21,180
based on the size of your terminal so

00:01:19,439 --> 00:01:22,500
even though this normal session here

00:01:21,180 --> 00:01:24,150
we're starting to see some kind of

00:01:22,500 --> 00:01:25,200
interesting stuff and this is the kind

00:01:24,150 --> 00:01:27,780
of thing that we want to be able to do

00:01:25,200 --> 00:01:29,579
we want to unlock the secrets of knowing

00:01:27,780 --> 00:01:32,900
how to find out how wide the terminal is

00:01:29,579 --> 00:01:32,900
so we know how to display this stuff

00:01:33,530 --> 00:01:38,220
there are some other coolers things like

00:01:36,630 --> 00:01:40,170
so that was that was a normal back and

00:01:38,220 --> 00:01:42,329
forth you know call and response write

00:01:40,170 --> 00:01:44,340
something see it out but there's another

00:01:42,329 --> 00:01:49,409
program called top that you might see

00:01:44,340 --> 00:01:50,820
every day maybe use this every day maybe

00:01:49,409 --> 00:01:52,590
it's just printing all that stuff really

00:01:50,820 --> 00:01:53,579
fast and going off the screen but but

00:01:52,590 --> 00:01:55,920
maybe it's doing something kind of

00:01:53,579 --> 00:01:59,520
different and then also kind of neat is

00:01:55,920 --> 00:02:01,770
that this is appearing here but when I

00:01:59,520 --> 00:02:03,210
close it it just goes away like that so

00:02:01,770 --> 00:02:05,189
that's not something we could do just by

00:02:03,210 --> 00:02:06,270
using print it seems like right so we

00:02:05,189 --> 00:02:08,129
need to know how to do something like

00:02:06,270 --> 00:02:11,430
that and then stuff can get more

00:02:08,129 --> 00:02:15,120
complicated there's a program called TIG

00:02:11,430 --> 00:02:16,890
that I'm gonna do it now yeah that just

00:02:15,120 --> 00:02:19,230
opens up this this big thing in

00:02:16,890 --> 00:02:21,000
reminding that with my keys I can open

00:02:19,230 --> 00:02:23,129
things up this is a git repository of

00:02:21,000 --> 00:02:23,730
history viewer thing and then it goes

00:02:23,129 --> 00:02:26,579
away again

00:02:23,730 --> 00:02:28,769
so this is kind of like vim or Emacs how

00:02:26,579 --> 00:02:30,719
is it pops up and it's almost separate

00:02:28,769 --> 00:02:34,889
terminal but in our terminal so we need

00:02:30,719 --> 00:02:36,900
to know how to do that there is a joke

00:02:34,889 --> 00:02:38,519
it just started again there's a Python

00:02:36,900 --> 00:02:40,019
kind of graphical debugger if you're

00:02:38,519 --> 00:02:41,969
familiar with PDB there's another

00:02:40,019 --> 00:02:43,829
program called pu DB which is sort of a

00:02:41,969 --> 00:02:48,599
wrapper for it that gives you this kind

00:02:43,829 --> 00:02:50,489
of happy you know like turbo pascal

00:02:48,599 --> 00:02:52,680
inspired kind of like a full screen

00:02:50,489 --> 00:02:54,659
debugger thing this is really useful and

00:02:52,680 --> 00:02:56,400
it's nice to have it there in the

00:02:54,659 --> 00:02:57,870
terminal maybe we could do it in a GUI

00:02:56,400 --> 00:03:00,680
thing or maybe it could be like crazy

00:02:57,870 --> 00:03:02,700
HTML or you know an interesting HTML

00:03:00,680 --> 00:03:04,439
view but instead we have it right here

00:03:02,700 --> 00:03:06,120
in our terminal um you might check this

00:03:04,439 --> 00:03:07,950
out it's kind of useful it's nice to be

00:03:06,120 --> 00:03:09,269
able to use we just set a breakpoint now

00:03:07,950 --> 00:03:10,560
we're gonna hop over and kind of we

00:03:09,269 --> 00:03:12,930
could there's a command line down here

00:03:10,560 --> 00:03:15,629
we can look at our variables we can look

00:03:12,930 --> 00:03:17,419
at the stack but an interesting way to

00:03:15,629 --> 00:03:19,500
do this is to have it in the terminal

00:03:17,419 --> 00:03:24,060
here's another thing that this doesn't

00:03:19,500 --> 00:03:27,030
started over this is B Python which is

00:03:24,060 --> 00:03:28,769
using a be fight on so if this is kind

00:03:27,030 --> 00:03:30,629
of fun it's you know it's again it's

00:03:28,769 --> 00:03:32,430
using the terminal as a canvas and kind

00:03:30,629 --> 00:03:33,959
of painting a picture right and we still

00:03:32,430 --> 00:03:35,760
sort of have that command line like

00:03:33,959 --> 00:03:37,349
column response thing going on but it

00:03:35,760 --> 00:03:38,760
annotates it down here right so we can

00:03:37,349 --> 00:03:40,169
do cool things with a terminal and we

00:03:38,760 --> 00:03:42,090
want to unlock the secrets of how to do

00:03:40,169 --> 00:03:45,449
this now in this talk we're going to

00:03:42,090 --> 00:03:47,220
talk about mostly just how it works sort

00:03:45,449 --> 00:03:48,419
of and then you'll be able to Google for

00:03:47,220 --> 00:03:50,400
this later you'll be able to find the

00:03:48,419 --> 00:03:54,569
right library later after I point you

00:03:50,400 --> 00:03:55,979
know directions but just understanding

00:03:54,569 --> 00:03:58,919
how we communicate with the terminal is

00:03:55,979 --> 00:04:00,090
gonna be helpful for figuring out how to

00:03:58,919 --> 00:04:02,519
tell it to do these interesting things

00:04:00,090 --> 00:04:05,009
we're seeing here but first we kind of

00:04:02,519 --> 00:04:06,810
have to do a kind of more useful than

00:04:05,009 --> 00:04:08,699
accurate little history lesson here so

00:04:06,810 --> 00:04:10,500
so if the details are wrong if it's

00:04:08,699 --> 00:04:13,319
about a memory to pneumonic it's not

00:04:10,500 --> 00:04:15,720
about accuracy necessarily so what are

00:04:13,319 --> 00:04:17,099
terminals when I say terminal I'm

00:04:15,720 --> 00:04:19,169
usually think of an a' terminal emulator

00:04:17,099 --> 00:04:21,000
the thing i see in my screen i don't

00:04:19,169 --> 00:04:23,279
mean any of these words i'm talking

00:04:21,000 --> 00:04:25,030
about this thing right you can see that

00:04:23,279 --> 00:04:26,770
there is you can't read the word

00:04:25,030 --> 00:04:29,080
Sara Lee but you can see that there's

00:04:26,770 --> 00:04:31,090
it's a window in my graphical

00:04:29,080 --> 00:04:33,190
environment you can see the little Mack

00:04:31,090 --> 00:04:35,169
colored icon things there it's a little

00:04:33,190 --> 00:04:37,480
bit important because we're going to

00:04:35,169 --> 00:04:39,430
talk today about UNIX terminals and I

00:04:37,480 --> 00:04:41,290
don't understand how much of this is

00:04:39,430 --> 00:04:43,780
relevant to me though the windows

00:04:41,290 --> 00:04:45,310
console I think not much of it but I

00:04:43,780 --> 00:04:50,470
don't extend under stand exactly where

00:04:45,310 --> 00:04:51,639
that correspondence is stopped but

00:04:50,470 --> 00:04:54,550
actually if so if you are a Windows user

00:04:51,639 --> 00:04:57,130
but you have access to maybe putty and

00:04:54,550 --> 00:04:58,570
you can SSH in somewhere or cygwin you

00:04:57,130 --> 00:05:00,520
might open that now if you've got your

00:04:58,570 --> 00:05:02,290
computer up because in a bit I'm gonna

00:05:00,520 --> 00:05:04,390
encourage people to you know type

00:05:02,290 --> 00:05:05,590
something in their terminals and if

00:05:04,390 --> 00:05:07,480
you'd like to be included in that I'll

00:05:05,590 --> 00:05:10,720
show the results here too so you won't

00:05:07,480 --> 00:05:13,210
be left out right so what do we mean by

00:05:10,720 --> 00:05:15,400
terminal I'm it's called a terminal

00:05:13,210 --> 00:05:16,990
emulator so what is it that we're

00:05:15,400 --> 00:05:19,510
emulating I usually think of it as

00:05:16,990 --> 00:05:21,370
emulating these things we're building a

00:05:19,510 --> 00:05:24,220
video terminal you're imagining a person

00:05:21,370 --> 00:05:25,240
sitting in front of this thing and your

00:05:24,220 --> 00:05:26,800
application your interactive

00:05:25,240 --> 00:05:28,630
command-line application can imagine

00:05:26,800 --> 00:05:31,090
that it's a person sitting behind one of

00:05:28,630 --> 00:05:34,600
these and that's sort of the interface

00:05:31,090 --> 00:05:37,990
that it has but these were already

00:05:34,600 --> 00:05:39,880
emulating something which are these

00:05:37,990 --> 00:05:41,680
things which I might call it like an

00:05:39,880 --> 00:05:44,350
electronic typewriter or really like a

00:05:41,680 --> 00:05:46,229
teletype writer or teleprinter or the

00:05:44,350 --> 00:05:48,010
specific brand to call the teletype

00:05:46,229 --> 00:05:51,220
these have been around for a hundred

00:05:48,010 --> 00:05:53,380
years they were used for telegraph

00:05:51,220 --> 00:05:55,630
things back then I'm gonna read you a

00:05:53,380 --> 00:05:59,350
little text from this ad for a teletype

00:05:55,630 --> 00:06:00,760
machine from 1957 and this is when they

00:05:59,350 --> 00:06:02,710
were celebrating their golden

00:06:00,760 --> 00:06:05,590
anniversary this company been around for

00:06:02,710 --> 00:06:07,419
50 years already I'm gonna try to go old

00:06:05,590 --> 00:06:09,430
timing radio announcer a little bit so a

00:06:07,419 --> 00:06:11,320
teletype printer is a communications

00:06:09,430 --> 00:06:13,840
device with a keyboard similar to a

00:06:11,320 --> 00:06:16,630
teller typewriter that enables you to

00:06:13,840 --> 00:06:18,300
send and receive printed messages with

00:06:16,630 --> 00:06:20,740
it written word can be sent

00:06:18,300 --> 00:06:23,289
instantaneously by wire within the

00:06:20,740 --> 00:06:25,900
office or plant or clear across the

00:06:23,289 --> 00:06:28,270
country to a single destination or any

00:06:25,900 --> 00:06:31,630
number of destinations at the same time

00:06:28,270 --> 00:06:33,550
this is really impressive pretty cool in

00:06:31,630 --> 00:06:36,550
today's business world wait wait for it

00:06:33,550 --> 00:06:37,680
wait for it it goes on in today's

00:06:36,550 --> 00:06:40,050
business world in fact

00:06:37,680 --> 00:06:41,880
teletype equipment is often more than a

00:06:40,050 --> 00:06:43,680
communications instrument it is the

00:06:41,880 --> 00:06:46,199
basic element of production control

00:06:43,680 --> 00:06:48,539
systems its ability to transmit and

00:06:46,199 --> 00:06:54,509
reproduce text and punched tape is

00:06:48,539 --> 00:06:55,530
harnessed for office automation it's a

00:06:54,509 --> 00:06:55,889
really long one so I have to make it

00:06:55,530 --> 00:06:57,870
smaller

00:06:55,889 --> 00:07:00,240
whether least through your telephone

00:06:57,870 --> 00:07:02,220
company or other communications company

00:07:00,240 --> 00:07:04,289
or purchased outright from us the

00:07:02,220 --> 00:07:06,300
versatile line of teletype equipment can

00:07:04,289 --> 00:07:08,250
be tailored to almost any conceivable

00:07:06,300 --> 00:07:09,539
demand for further information contact

00:07:08,250 --> 00:07:11,280
your telephone company or other

00:07:09,539 --> 00:07:14,160
communications company and send for a

00:07:11,280 --> 00:07:16,039
free booklet the ABCs of teletype

00:07:14,160 --> 00:07:20,070
equipment teletype corporation

00:07:16,039 --> 00:07:22,949
department F 740 114 Avenue Chicago 39

00:07:20,070 --> 00:07:24,870
Illinois so that this is an ad that the

00:07:22,949 --> 00:07:28,110
full text is on Wikipedia if you didn't

00:07:24,870 --> 00:07:30,510
is that wasn't your fill of it but

00:07:28,110 --> 00:07:32,699
there's a heritage that comes down from

00:07:30,510 --> 00:07:33,780
these things that our terminals still

00:07:32,699 --> 00:07:36,479
kind of where there's still at least

00:07:33,780 --> 00:07:39,349
inspired by so we're gonna look at

00:07:36,479 --> 00:07:41,220
little ascii diagrams that skis great

00:07:39,349 --> 00:07:43,289
this is a typewriter

00:07:41,220 --> 00:07:45,570
all right you have fingers pressing keys

00:07:43,289 --> 00:07:48,210
and when they hit the key some metal

00:07:45,570 --> 00:07:50,160
lever moves and that hits maybe that

00:07:48,210 --> 00:07:51,300
connects some ink to paper right that's

00:07:50,160 --> 00:07:53,699
that's our basic thing we're starting

00:07:51,300 --> 00:07:56,039
with but maybe it's actually a teletype

00:07:53,699 --> 00:07:58,740
writer so instead fingers pressing keys

00:07:56,039 --> 00:08:00,630
are causing that the tell typewriter to

00:07:58,740 --> 00:08:02,699
send a signal over a metal wire to

00:08:00,630 --> 00:08:04,199
something in addition to putting ink to

00:08:02,699 --> 00:08:05,880
paper right but those are still kind of

00:08:04,199 --> 00:08:08,599
tied it's you're still seeing it display

00:08:05,880 --> 00:08:11,460
on your own screen as well as sending it

00:08:08,599 --> 00:08:12,570
now in the earlier ones maybe you don't

00:08:11,460 --> 00:08:15,419
need that much information to be sent

00:08:12,570 --> 00:08:17,820
maybe the signal is kind of five

00:08:15,419 --> 00:08:20,760
parallel wires each that are you know on

00:08:17,820 --> 00:08:21,990
or off and your send you only need you

00:08:20,760 --> 00:08:24,000
only need five wires because you only

00:08:21,990 --> 00:08:25,740
need thirty two different things you

00:08:24,000 --> 00:08:27,300
could do is you only need five bits and

00:08:25,740 --> 00:08:29,820
you're sending telegraph things your

00:08:27,300 --> 00:08:32,610
aunt in New Jersey and this has to get

00:08:29,820 --> 00:08:34,229
all the way there or maybe later on you

00:08:32,610 --> 00:08:35,400
use use more bits of information but at

00:08:34,229 --> 00:08:39,690
this point they're just sending these

00:08:35,400 --> 00:08:41,370
signals and then the application can

00:08:39,690 --> 00:08:43,260
send stuff back so maybe that

00:08:41,370 --> 00:08:45,060
application again is a you know

00:08:43,260 --> 00:08:46,470
telegraph operator far across that

00:08:45,060 --> 00:08:49,460
country that's typing this stuff back to

00:08:46,470 --> 00:08:55,370
you or maybe it's a computer later

00:08:49,460 --> 00:08:56,810
once we have computers now we're looking

00:08:55,370 --> 00:08:58,670
at more modernized version of this

00:08:56,810 --> 00:09:00,670
diagram it's not that different a

00:08:58,670 --> 00:09:03,050
keyboard key presses go to the terminal

00:09:00,670 --> 00:09:04,940
our application can communicate with the

00:09:03,050 --> 00:09:07,430
terminal by calling read the system call

00:09:04,940 --> 00:09:08,750
read and then we can write stuff to the

00:09:07,430 --> 00:09:10,670
terminal and then some gooey stuff

00:09:08,750 --> 00:09:12,830
happens and it gets to our screen and

00:09:10,670 --> 00:09:17,180
that the light hits our eyes

00:09:12,830 --> 00:09:18,020
I like this diagram because it looking

00:09:17,180 --> 00:09:19,400
at it you think well couldn't we

00:09:18,020 --> 00:09:21,050
simplify it further couldn't we just say

00:09:19,400 --> 00:09:22,610
no the keyboard sends things to the

00:09:21,050 --> 00:09:24,020
application you call read and you get

00:09:22,610 --> 00:09:25,730
them and then when you write bites they

00:09:24,020 --> 00:09:28,940
kind of go straight to the user but no

00:09:25,730 --> 00:09:30,440
they really don't because this terminal

00:09:28,940 --> 00:09:32,420
stuff is really important there are

00:09:30,440 --> 00:09:34,040
bytes we can write to the terminal that

00:09:32,420 --> 00:09:35,750
don't result in Dooley stuff happening

00:09:34,040 --> 00:09:36,920
and sending stuff out there are things

00:09:35,750 --> 00:09:39,140
we could read from the terminal that

00:09:36,920 --> 00:09:40,550
we're not typed by the user there are

00:09:39,140 --> 00:09:42,280
things you can type that won't ever

00:09:40,550 --> 00:09:44,840
reach the application and there's

00:09:42,280 --> 00:09:50,120
whatever the forth corresponding thing

00:09:44,840 --> 00:09:53,150
is there is that might happen to know so

00:09:50,120 --> 00:09:54,380
let's start with the printing like so

00:09:53,150 --> 00:09:57,590
we're in pythons we're gonna replace

00:09:54,380 --> 00:09:59,060
these with print and input here but

00:09:57,590 --> 00:10:00,500
first let's look at what bytes we can

00:09:59,060 --> 00:10:04,580
send and what happens when we send them

00:10:00,500 --> 00:10:06,620
Oh what bye it's gonna be right and what

00:10:04,580 --> 00:10:08,600
happens I we've been highlighted the

00:10:06,620 --> 00:10:09,650
writing portion here and the relevant

00:10:08,600 --> 00:10:11,660
part to notice that both of these are

00:10:09,650 --> 00:10:14,110
kind of relevant for this

00:10:11,660 --> 00:10:16,550
well first we can send ASCII bytes

00:10:14,110 --> 00:10:19,490
there's this mapping of kind of meanings

00:10:16,550 --> 00:10:21,680
to signals that ASCII represents and we

00:10:19,490 --> 00:10:24,290
can send those to the terminal and

00:10:21,680 --> 00:10:26,150
they're going to display there this is

00:10:24,290 --> 00:10:28,550
sort of standardized in the 60s I think

00:10:26,150 --> 00:10:31,070
it we're like you know we have so many

00:10:28,550 --> 00:10:33,170
with tons of bandwidth let's send seven

00:10:31,070 --> 00:10:34,520
bits of information instead of the five

00:10:33,170 --> 00:10:37,820
or whatever we're doing before let's

00:10:34,520 --> 00:10:39,500
standardize and let's have some control

00:10:37,820 --> 00:10:41,110
sequences that aren't don't actually

00:10:39,500 --> 00:10:43,490
show up there but they do other things

00:10:41,110 --> 00:10:45,620
the first of which well let's look at

00:10:43,490 --> 00:10:47,630
how to do this in Python Moustakas and

00:10:45,620 --> 00:10:49,580
Python 3 which means that to write bytes

00:10:47,630 --> 00:10:51,290
it's a little bit indirect because most

00:10:49,580 --> 00:10:53,150
of the time we want to write text but

00:10:51,290 --> 00:10:56,030
here we're writing bytes so on sis dot

00:10:53,150 --> 00:10:58,010
standard out buffer dot right I can kind

00:10:56,030 --> 00:11:00,470
of like write these write these things

00:10:58,010 --> 00:11:01,460
or I could write some of these control

00:11:00,470 --> 00:11:02,670
characters some of the ones were

00:11:01,460 --> 00:11:05,610
familiar with I think

00:11:02,670 --> 00:11:07,110
like /n you might know that one may be

00:11:05,610 --> 00:11:09,720
/t you're familiar with that one

00:11:07,110 --> 00:11:11,310
otherwise maybe you know if you know

00:11:09,720 --> 00:11:14,300
some of the rest of the stuff spoilers

00:11:11,310 --> 00:11:17,040
that that's what we're gonna see next

00:11:14,300 --> 00:11:18,930
this is ASCII code chart I'm gonna say

00:11:17,040 --> 00:11:21,090
that the stuff over here are the

00:11:18,930 --> 00:11:22,830
literals if I send that byte expect that

00:11:21,090 --> 00:11:24,630
byte to appear on the screen but then

00:11:22,830 --> 00:11:26,400
there's this stuff over here that if I

00:11:24,630 --> 00:11:28,080
send it something else might happen and

00:11:26,400 --> 00:11:29,670
this all stuff that must make some kind

00:11:28,080 --> 00:11:31,440
of sense in the context of maybe

00:11:29,670 --> 00:11:36,990
Telegraph's or at least till typewriters

00:11:31,440 --> 00:11:42,780
and typewriters basically so let's take

00:11:36,990 --> 00:11:44,340
a look at this here so it's a little bit

00:11:42,780 --> 00:11:46,080
we could just do this in a normal

00:11:44,340 --> 00:11:47,190
session we could just have Python and

00:11:46,080 --> 00:11:48,900
write these bytes out and see what

00:11:47,190 --> 00:11:51,270
happens but it's a bit confusing because

00:11:48,900 --> 00:11:52,920
we're gonna send these bytes and then

00:11:51,270 --> 00:11:54,510
there's gonna be written but then also

00:11:52,920 --> 00:11:56,520
the Python prompts gonna come up and

00:11:54,510 --> 00:11:58,890
then other prints were happen so the way

00:11:56,520 --> 00:12:00,690
we're gonna do this is by over in this

00:11:58,890 --> 00:12:02,940
window running a program that's gonna

00:12:00,690 --> 00:12:04,890
listen on a port and just print out all

00:12:02,940 --> 00:12:08,160
the bytes that it gets and then over

00:12:04,890 --> 00:12:11,550
here we're gonna sock it we've built a

00:12:08,160 --> 00:12:13,890
socket real quick and connect to this

00:12:11,550 --> 00:12:17,330
server and now we're gonna send some

00:12:13,890 --> 00:12:20,760
bytes over that was good some more text

00:12:17,330 --> 00:12:21,990
cool so when you send bytes they appear

00:12:20,760 --> 00:12:23,130
here we can pretend this is our like

00:12:21,990 --> 00:12:25,500
interactive application we're actually

00:12:23,130 --> 00:12:26,820
just sending stuff here right but what

00:12:25,500 --> 00:12:28,250
happens if we send some of those more

00:12:26,820 --> 00:12:30,960
interesting bytes

00:12:28,250 --> 00:12:32,820
this one you might know what happens

00:12:30,960 --> 00:12:34,770
right but it's not a byte that's gonna

00:12:32,820 --> 00:12:38,550
appear it's just gonna go down to the

00:12:34,770 --> 00:12:39,900
next line and now we're gonna write some

00:12:38,550 --> 00:12:41,580
stuff and that's not that exciting but

00:12:39,900 --> 00:12:43,050
here's another one called the carriage

00:12:41,580 --> 00:12:44,220
return this is what you might use if you

00:12:43,050 --> 00:12:45,840
wanted the carriage of your typewriter

00:12:44,220 --> 00:12:47,760
to move from where it is all the way

00:12:45,840 --> 00:12:51,840
back over this is for me I'll play that

00:12:47,760 --> 00:12:53,600
over to the left so let's try that look

00:12:51,840 --> 00:12:56,070
at that so now our cursor is over there

00:12:53,600 --> 00:13:00,240
so now right we could write some other

00:12:56,070 --> 00:13:02,070
stuff like hi cool so now we have the

00:13:00,240 --> 00:13:03,510
secret of progress bars if you've seen

00:13:02,070 --> 00:13:05,160
progress bars appear on your command

00:13:03,510 --> 00:13:09,570
line before now we can do that which is

00:13:05,160 --> 00:13:11,280
terrific there's a few others maybe we

00:13:09,570 --> 00:13:13,380
want to move and vertically these aren't

00:13:11,280 --> 00:13:14,820
that important but these are all things

00:13:13,380 --> 00:13:15,779
that make sense in a typewriter right

00:13:14,820 --> 00:13:17,399
you could move back in

00:13:15,779 --> 00:13:20,430
and you can move down we're not going to

00:13:17,399 --> 00:13:24,060
move up another thing that's relevant is

00:13:20,430 --> 00:13:25,589
a little ding I don't didn't set up the

00:13:24,060 --> 00:13:27,089
sound because I wasn't confident and you

00:13:25,589 --> 00:13:28,139
all hearing this and recognizing it for

00:13:27,089 --> 00:13:30,870
what it was but you should try this on

00:13:28,139 --> 00:13:31,170
your own computer when I said that thank

00:13:30,870 --> 00:13:33,870
you

00:13:31,170 --> 00:13:35,399
ding yeah ding ding ding so this is the

00:13:33,870 --> 00:13:36,749
little ding and you can print this

00:13:35,399 --> 00:13:38,519
character and you might if you've not

00:13:36,749 --> 00:13:39,930
turned it off because that's one of the

00:13:38,519 --> 00:13:42,629
first things many of us do in our bash

00:13:39,930 --> 00:13:45,629
are CES or vim configs or whatever you

00:13:42,629 --> 00:13:50,370
can hear that that would be cool all

00:13:45,629 --> 00:13:52,170
right so let's continue here its ear as

00:13:50,370 --> 00:13:53,610
an example of a progress bar if you want

00:13:52,170 --> 00:13:55,620
to do this thing you know how now you're

00:13:53,610 --> 00:13:59,040
gonna write that thing here's an example

00:13:55,620 --> 00:14:00,300
of doing it maybe with Python code not

00:13:59,040 --> 00:14:01,589
that much interesting you know we're

00:14:00,300 --> 00:14:04,620
doing some math to figure out how

00:14:01,589 --> 00:14:06,480
progress we are we're gonna write this

00:14:04,620 --> 00:14:08,519
carriage return write some stuff and

00:14:06,480 --> 00:14:11,040
we're gonna flush because our output is

00:14:08,519 --> 00:14:12,120
buffered and we wanted to see that

00:14:11,040 --> 00:14:13,740
happening but if you wanted to write

00:14:12,120 --> 00:14:15,990
something like that you could

00:14:13,740 --> 00:14:17,459
it's next up whatever bytes maybe our

00:14:15,990 --> 00:14:19,769
terminal has an encoding probably it

00:14:17,459 --> 00:14:21,899
does and it's stored in this

00:14:19,769 --> 00:14:24,689
environmental variable called something

00:14:21,899 --> 00:14:25,800
and then python cleverly kind of looks

00:14:24,689 --> 00:14:27,600
all around the environment tries to

00:14:25,800 --> 00:14:30,180
figure out what the encoding is so that

00:14:27,600 --> 00:14:33,480
we can actually write other things like

00:14:30,180 --> 00:14:35,399
those 3 bytes together which end up

00:14:33,480 --> 00:14:36,930
being this or because it's Python we can

00:14:35,399 --> 00:14:39,680
just say write and we can write unicode

00:14:36,930 --> 00:14:42,449
characters and so we're happy with this

00:14:39,680 --> 00:14:44,069
next up let's look at some stuff that

00:14:42,449 --> 00:14:45,360
doesn't make sense on typewriters

00:14:44,069 --> 00:14:48,480
anymore it really only makes sense on

00:14:45,360 --> 00:14:51,829
these things first one is ansi escape

00:14:48,480 --> 00:14:56,009
sequences so what if we were to write

00:14:51,829 --> 00:14:57,990
this thing which we're a little behind

00:14:56,009 --> 00:15:00,540
so we're not going well we've got to do

00:14:57,990 --> 00:15:03,929
it though it's it's so good so go check

00:15:00,540 --> 00:15:07,019
this out what if we were to write /x 1b

00:15:03,929 --> 00:15:11,279
this is the escape character itself open

00:15:07,019 --> 00:15:13,319
31 m right and then we're gonna write so

00:15:11,279 --> 00:15:15,240
nothing happened yeah nothing obvious

00:15:13,319 --> 00:15:17,129
happened here but then when I write some

00:15:15,240 --> 00:15:19,139
more stuff comes out and read it

00:15:17,129 --> 00:15:21,269
that's crazy amazing so we've just

00:15:19,139 --> 00:15:22,889
unlocked the key to well not doing it

00:15:21,269 --> 00:15:24,600
beautifully yet but at least how to do

00:15:22,889 --> 00:15:26,459
this read stuff and there's interesting

00:15:24,600 --> 00:15:28,559
behavior we just saw which is that our

00:15:26,459 --> 00:15:29,080
terminal has state right it must have a

00:15:28,559 --> 00:15:30,370
variable

00:15:29,080 --> 00:15:32,950
where it's like what's my current color

00:15:30,370 --> 00:15:35,260
and this works the same way with other

00:15:32,950 --> 00:15:36,490
things like am i underlined right now is

00:15:35,260 --> 00:15:41,440
it blinking all these other things like

00:15:36,490 --> 00:15:42,850
that so I'm calling this an ansi escape

00:15:41,440 --> 00:15:43,990
sequence because there's a standard

00:15:42,850 --> 00:15:45,880
where we decided this is the way it

00:15:43,990 --> 00:15:47,230
works but and here are some other ones I

00:15:45,880 --> 00:15:49,300
can move the cursor I can clear the

00:15:47,230 --> 00:15:51,880
whole screen I can hide the cursor I can

00:15:49,300 --> 00:15:54,130
start writing these different ways but

00:15:51,880 --> 00:15:55,090
there's an interesting history here

00:15:54,130 --> 00:15:56,410
where there are a lot of different

00:15:55,090 --> 00:15:58,540
terminals that implemented different

00:15:56,410 --> 00:16:00,280
escape sequences and so the antfee that

00:15:58,540 --> 00:16:02,050
implies some kind of standards body

00:16:00,280 --> 00:16:03,010
tried to figure out a standard which

00:16:02,050 --> 00:16:05,470
means there must have been a problem

00:16:03,010 --> 00:16:08,050
before where there wasn't a standard so

00:16:05,470 --> 00:16:10,300
analogous to the browser Wars of more

00:16:08,050 --> 00:16:11,770
recently where you know you write this

00:16:10,300 --> 00:16:13,270
JavaScript application but doesn't quite

00:16:11,770 --> 00:16:15,220
work in one browser and doesn't another

00:16:13,270 --> 00:16:16,900
and maybe you write a shim or maybe you

00:16:15,220 --> 00:16:20,050
like wow I wish I could get this to work

00:16:16,900 --> 00:16:21,460
or maybe you're a user and it's it's 84

00:16:20,050 --> 00:16:23,680
now we're back in terminal land and you

00:16:21,460 --> 00:16:26,440
log in to this this really cool BBS

00:16:23,680 --> 00:16:27,670
system and on your friends computer it

00:16:26,440 --> 00:16:29,770
looks like this your friends terminal

00:16:27,670 --> 00:16:31,030
it's doing cool stuff and then on yours

00:16:29,770 --> 00:16:34,360
it's not working it's really

00:16:31,030 --> 00:16:35,890
disappointing so there was opportunity

00:16:34,360 --> 00:16:39,190
here in the same way that the browser

00:16:35,890 --> 00:16:41,890
incompatibilities made jQuery a thing

00:16:39,190 --> 00:16:45,460
that really needed to exist we have our

00:16:41,890 --> 00:16:47,710
kind of 1980s jQuery which is called

00:16:45,460 --> 00:16:49,900
term cap and this is a database of all

00:16:47,710 --> 00:16:51,960
the terminals and which ones you know

00:16:49,900 --> 00:16:54,520
what the capabilities are in each and

00:16:51,960 --> 00:16:56,380
your application you use that or really

00:16:54,520 --> 00:16:58,720
curses which is this application

00:16:56,380 --> 00:17:00,970
interface to that thing and then

00:16:58,720 --> 00:17:03,670
command-line tools like T put and then

00:17:00,970 --> 00:17:05,080
now maybe it's less necessary but it's

00:17:03,670 --> 00:17:07,060
still the beautiful way to do this

00:17:05,080 --> 00:17:08,860
there's more standardization on how your

00:17:07,060 --> 00:17:12,580
terminal works but you still ought to

00:17:08,860 --> 00:17:16,300
use something like this here's that

00:17:12,580 --> 00:17:17,770
here's the way you ought to be doing

00:17:16,300 --> 00:17:20,230
this this is this is the thing to take

00:17:17,770 --> 00:17:21,610
away from this talk besides that you can

00:17:20,230 --> 00:17:23,290
write bytes to a terminal and sometimes

00:17:21,610 --> 00:17:24,610
it doesn't print them and that's that if

00:17:23,290 --> 00:17:25,959
you want to know what bytes different to

00:17:24,610 --> 00:17:27,940
a terminal you ought to use this library

00:17:25,959 --> 00:17:30,130
called blessings which is a wrapper over

00:17:27,940 --> 00:17:34,180
curses because it's a pun yeah

00:17:30,130 --> 00:17:35,620
and this is nice so now that you know

00:17:34,180 --> 00:17:38,050
that it's just bytes you know that this

00:17:35,620 --> 00:17:40,830
T dot bold thing here that's just saying

00:17:38,050 --> 00:17:42,940
build a string that turns on boldness

00:17:40,830 --> 00:17:45,040
writes hi there and then turn

00:17:42,940 --> 00:17:49,540
off and still your responsibility to

00:17:45,040 --> 00:17:51,220
print that string so now you know kind

00:17:49,540 --> 00:17:53,290
of how to use this blessings thing most

00:17:51,220 --> 00:17:57,430
of it generates strings it's your job

00:17:53,290 --> 00:17:59,170
different Slater

00:17:57,430 --> 00:18:00,490
so secrets we've unlocked by writing

00:17:59,170 --> 00:18:01,930
bytes to the terminal we can do colored

00:18:00,490 --> 00:18:03,430
in style text we could have bold

00:18:01,930 --> 00:18:05,410
underlined blank we can move the cursor

00:18:03,430 --> 00:18:07,090
anywhere we can use the alternate screen

00:18:05,410 --> 00:18:09,070
which is a series of bytes you write

00:18:07,090 --> 00:18:12,100
that means now we're in that separate

00:18:09,070 --> 00:18:14,170
thing that you saw them or TIG or top

00:18:12,100 --> 00:18:16,210
using we can hide the cursor or we can

00:18:14,170 --> 00:18:18,820
do a bunch more stuff okay now let's

00:18:16,210 --> 00:18:20,740
talk about input this is not quite as

00:18:18,820 --> 00:18:22,570
beautiful story it's not just this one

00:18:20,740 --> 00:18:25,150
secret that will unlock everything which

00:18:22,570 --> 00:18:27,790
is that you write weird bytes here

00:18:25,150 --> 00:18:29,140
instead a look at the different things

00:18:27,790 --> 00:18:31,540
we can do here's some problems you get

00:18:29,140 --> 00:18:34,000
when you read from the terminal normally

00:18:31,540 --> 00:18:36,070
use call read and you get to read this

00:18:34,000 --> 00:18:38,710
line of text and you don't get it

00:18:36,070 --> 00:18:40,720
immediately right data's not pass the

00:18:38,710 --> 00:18:41,560
application until the user hits Enter or

00:18:40,720 --> 00:18:43,570
return

00:18:41,560 --> 00:18:45,010
you have a little bit of editing and you

00:18:43,570 --> 00:18:48,730
can kind of see what editing you have if

00:18:45,010 --> 00:18:49,960
you try cat but you don't get it right

00:18:48,730 --> 00:18:51,760
away so it's a problem we might know fix

00:18:49,960 --> 00:18:53,530
and echoing back characters into another

00:18:51,760 --> 00:18:55,000
one when you hit a character it displays

00:18:53,530 --> 00:18:57,190
on your screen because of that heritage

00:18:55,000 --> 00:18:58,990
with typewriters right it hits this

00:18:57,190 --> 00:19:00,370
paper as well as sending the message

00:18:58,990 --> 00:19:02,440
what if we don't want it to hit the

00:19:00,370 --> 00:19:05,050
paper so we're gonna look at an example

00:19:02,440 --> 00:19:07,450
with echoing back characters but this is

00:19:05,050 --> 00:19:10,150
gonna work similarly for everything the

00:19:07,450 --> 00:19:11,980
trick here is that this diagram is

00:19:10,150 --> 00:19:13,360
actually gonna be modified we actually

00:19:11,980 --> 00:19:15,250
have another way to interface with the

00:19:13,360 --> 00:19:16,450
terminal that little thing there's

00:19:15,250 --> 00:19:18,340
supposed to be a little mining symbol

00:19:16,450 --> 00:19:20,770
the idea is that there are knobs and

00:19:18,340 --> 00:19:22,630
dials on your terminal and on your

00:19:20,770 --> 00:19:25,060
terminal emulator that you can twist and

00:19:22,630 --> 00:19:27,190
read and do things with and we're gonna

00:19:25,060 --> 00:19:28,960
do that from our application and some of

00:19:27,190 --> 00:19:31,600
the things we can do are say you know it

00:19:28,960 --> 00:19:36,030
stop buffering the input the same way

00:19:31,600 --> 00:19:38,050
stop echoing the characters every time

00:19:36,030 --> 00:19:40,240
here are some man pages you could read

00:19:38,050 --> 00:19:42,550
if you read the slides later they're

00:19:40,240 --> 00:19:43,630
they're a long and interesting if you're

00:19:42,550 --> 00:19:45,040
doing this command line you can do it

00:19:43,630 --> 00:19:47,410
this way but we're in Python so we're

00:19:45,040 --> 00:19:49,000
gonna look at this get pass example this

00:19:47,410 --> 00:19:51,190
is in the standard library this is also

00:19:49,000 --> 00:19:52,900
in the standard library Docs where it's

00:19:51,190 --> 00:19:54,280
showing an example of the term i/o stuff

00:19:52,900 --> 00:19:55,600
don't worry about the code just look at

00:19:54,280 --> 00:19:58,000
the shape of it

00:19:55,600 --> 00:20:00,070
we are getting some information about

00:19:58,000 --> 00:20:02,710
the current way that the terminal is and

00:20:00,070 --> 00:20:05,230
then we're modifying it and then in a

00:20:02,710 --> 00:20:06,550
try we modify it we try to do the thing

00:20:05,230 --> 00:20:08,230
we want to do and then we've a finally

00:20:06,550 --> 00:20:10,120
and this is really important because the

00:20:08,230 --> 00:20:12,220
terminal is a resource that's really

00:20:10,120 --> 00:20:13,060
external to our Python program you

00:20:12,220 --> 00:20:15,340
really don't want to mess up the

00:20:13,060 --> 00:20:16,840
terminal for the user and that happens

00:20:15,340 --> 00:20:19,600
all the time right you have a terminal

00:20:16,840 --> 00:20:21,610
you you accidentally like pipe a file

00:20:19,600 --> 00:20:23,140
that's binary out and something weird

00:20:21,610 --> 00:20:25,900
happens your terminal and then you need

00:20:23,140 --> 00:20:27,520
type of reset re se T and you hit enter

00:20:25,900 --> 00:20:28,780
and it's still not fixed so you try it

00:20:27,520 --> 00:20:31,660
again because maybe you had some

00:20:28,780 --> 00:20:34,510
characters before that so this is a good

00:20:31,660 --> 00:20:36,850
fit for a context manager something like

00:20:34,510 --> 00:20:39,400
this where you say you know set that fix

00:20:36,850 --> 00:20:42,790
the terminal unfix it it could use this

00:20:39,400 --> 00:20:45,220
like this now here are things we want to

00:20:42,790 --> 00:20:47,710
much change that we can do with this

00:20:45,220 --> 00:20:49,180
modifying the input that way we can turn

00:20:47,710 --> 00:20:51,460
off echo we can get the keys to send

00:20:49,180 --> 00:20:53,470
immediately we can ask for the terminal

00:20:51,460 --> 00:20:54,790
size you can say what size is the

00:20:53,470 --> 00:20:56,710
terminal as though it's printed on the

00:20:54,790 --> 00:20:58,060
side of it and we can do non-blocking

00:20:56,710 --> 00:20:59,890
input which is a little different

00:20:58,060 --> 00:21:01,510
because it's a file descriptor control

00:20:59,890 --> 00:21:03,520
thing but similarly it's a way to change

00:21:01,510 --> 00:21:05,530
the way we're getting our input and that

00:21:03,520 --> 00:21:09,130
might be important if you're writing a

00:21:05,530 --> 00:21:12,490
game for example terminal games are a

00:21:09,130 --> 00:21:13,840
lot of why I'm excited about this other

00:21:12,490 --> 00:21:15,760
problems we might have well there's

00:21:13,840 --> 00:21:18,730
mapping bytes to keys so maybe the bytes

00:21:15,760 --> 00:21:21,040
that you read aren't the same as the you

00:21:18,730 --> 00:21:22,690
know you get a and like that was

00:21:21,040 --> 00:21:23,770
probably an Akey press but then you get

00:21:22,690 --> 00:21:26,200
this thing and you have to know that

00:21:23,770 --> 00:21:28,350
that's F 11 this is another thing that

00:21:26,200 --> 00:21:31,300
you want to be aware of another level of

00:21:28,350 --> 00:21:33,730
abstraction or of level in between you

00:21:31,300 --> 00:21:36,010
and writing say a config file where you

00:21:33,730 --> 00:21:39,730
users get to say I want to hit f11 and

00:21:36,010 --> 00:21:41,320
have this thing happen and then it

00:21:39,730 --> 00:21:43,540
really interesting the last example

00:21:41,320 --> 00:21:44,920
thing we'll do bytes can be sent from

00:21:43,540 --> 00:21:47,440
the terminal without something being

00:21:44,920 --> 00:21:48,790
typed and the example here is the cursor

00:21:47,440 --> 00:21:50,410
query so you should try this if you've

00:21:48,790 --> 00:21:53,620
got your computer up just try printing

00:21:50,410 --> 00:21:55,290
this sequence up here and for the

00:21:53,620 --> 00:21:57,430
spoiler what's going to happen is that

00:21:55,290 --> 00:21:59,860
we're gonna print this and it's gonna

00:21:57,430 --> 00:22:01,690
say that on the next line right there's

00:21:59,860 --> 00:22:03,520
not I did I that prompt is there on

00:22:01,690 --> 00:22:05,140
purpose it's actually gonna ask for

00:22:03,520 --> 00:22:06,910
input and then it will have that fear

00:22:05,140 --> 00:22:08,110
something like that really what's

00:22:06,910 --> 00:22:11,080
occurring is

00:22:08,110 --> 00:22:12,220
is this but the way your terminal

00:22:11,080 --> 00:22:14,200
displays that doesn't have the whole

00:22:12,220 --> 00:22:17,650
thing and that's because in this diagram

00:22:14,200 --> 00:22:19,420
here when you do a cursor query the

00:22:17,650 --> 00:22:21,640
application rights and bytes to the

00:22:19,420 --> 00:22:23,440
terminal and then the terminal has put

00:22:21,640 --> 00:22:25,299
some stuff ready to be read by that next

00:22:23,440 --> 00:22:26,679
read call this is a thing that doesn't

00:22:25,299 --> 00:22:29,890
make sense to do if you're not in a

00:22:26,679 --> 00:22:31,660
non-blocking input mode but you've asked

00:22:29,890 --> 00:22:33,700
where is the cursor on the screen right

00:22:31,660 --> 00:22:35,530
now and it writes back but the way it

00:22:33,700 --> 00:22:36,820
responds is not a function call or

00:22:35,530 --> 00:22:38,830
something it's just by writing those

00:22:36,820 --> 00:22:41,380
bytes as though the user typed them in

00:22:38,830 --> 00:22:42,610
so you have to distinguish between did

00:22:41,380 --> 00:22:45,790
the user type this or is this the

00:22:42,610 --> 00:22:47,620
response to my query so this is showing

00:22:45,790 --> 00:22:49,390
us the terminal really has its own kind

00:22:47,620 --> 00:22:54,910
of beast it's its own thing and it could

00:22:49,390 --> 00:22:56,799
just generate stuff like this all right

00:22:54,910 --> 00:22:58,660
the one way one more way that we

00:22:56,799 --> 00:23:00,580
communicate from the terminal to our

00:22:58,660 --> 00:23:02,380
application are signals I've kind of

00:23:00,580 --> 00:23:04,660
abandoned ASCII here and said that

00:23:02,380 --> 00:23:07,240
sometimes the terminal sends this kind

00:23:04,660 --> 00:23:09,309
of UNIX signal to the application and

00:23:07,240 --> 00:23:11,260
you have to deal with this and you can

00:23:09,309 --> 00:23:12,940
twiddle the knobs on the terminal to say

00:23:11,260 --> 00:23:17,080
don't send those or send them in these

00:23:12,940 --> 00:23:18,700
circumstances these are the kinds of

00:23:17,080 --> 00:23:21,520
things you might get this is control C

00:23:18,700 --> 00:23:25,150
its control Z this is the window changed

00:23:21,520 --> 00:23:26,679
and a ton of our ones and this is the

00:23:25,150 --> 00:23:29,290
right time to mention these kind of

00:23:26,679 --> 00:23:31,630
groups of settings if you want the

00:23:29,290 --> 00:23:33,070
terminal to you know you want it to turn

00:23:31,630 --> 00:23:35,169
off echo you want it to stop buffering

00:23:33,070 --> 00:23:36,730
your input and you want it to not

00:23:35,169 --> 00:23:38,710
generate signals every time you hit

00:23:36,730 --> 00:23:40,870
control-c you might want to use this raw

00:23:38,710 --> 00:23:42,549
mode if you want the first two things

00:23:40,870 --> 00:23:46,510
but not the third maybe you want this C

00:23:42,549 --> 00:23:49,330
break thing so that would doing this in

00:23:46,510 --> 00:23:51,040
practice these are some tools you might

00:23:49,330 --> 00:23:52,330
want to use blessing this is basically

00:23:51,040 --> 00:23:53,679
the one to use if something's missing

00:23:52,330 --> 00:23:56,230
from that you have to do something

00:23:53,679 --> 00:23:59,200
special but it should be your base layer

00:23:56,230 --> 00:24:00,610
instead of curses in my opinion and

00:23:59,200 --> 00:24:04,210
there's a tool called a width

00:24:00,610 --> 00:24:05,860
we'll look at which is a more Java II

00:24:04,210 --> 00:24:07,840
thing I've heard it describes but in the

00:24:05,860 --> 00:24:10,660
best way possible is this widget library

00:24:07,840 --> 00:24:15,549
for building stuff like pew DB so our pu

00:24:10,660 --> 00:24:17,500
DB example was written in in Irbid and

00:24:15,549 --> 00:24:18,940
if you want to say I wish I had a window

00:24:17,500 --> 00:24:20,679
like this and then another window like

00:24:18,940 --> 00:24:21,450
this and I want to select up and down

00:24:20,679 --> 00:24:23,309
then

00:24:21,450 --> 00:24:24,570
instead of using the basic stuff in the

00:24:23,309 --> 00:24:27,720
curses module in the Python standard

00:24:24,570 --> 00:24:29,399
library I would use early there are two

00:24:27,720 --> 00:24:31,559
other two libraries for command line

00:24:29,399 --> 00:24:35,190
stuff called click and Clint and they do

00:24:31,559 --> 00:24:36,779
some stuff like helpers that you might

00:24:35,190 --> 00:24:38,820
want in the terminal stuff like the LS

00:24:36,779 --> 00:24:40,289
displaying stuff in columns or maybe

00:24:38,820 --> 00:24:42,360
doing stuff with color but without

00:24:40,289 --> 00:24:44,490
taking over the whole screen we have

00:24:42,360 --> 00:24:45,779
Kurt's uses a library that I wrote that

00:24:44,490 --> 00:24:47,519
I would be talking a lot more about

00:24:45,779 --> 00:24:49,380
except that in the time since I

00:24:47,519 --> 00:24:51,809
submitted this talk another library

00:24:49,380 --> 00:24:54,000
called the Python prompt toolkit has

00:24:51,809 --> 00:24:56,370
come around my Jonathan blessings and

00:24:54,000 --> 00:24:57,840
it's it's primo there was a talk this

00:24:56,370 --> 00:25:00,419
morning a lightning talk about a

00:24:57,840 --> 00:25:02,789
Postgres command-line tools someone made

00:25:00,419 --> 00:25:04,830
with it that's that's really nice it

00:25:02,789 --> 00:25:07,380
does stuff so this one made a Petey

00:25:04,830 --> 00:25:11,010
Python this Python prompt with it that's

00:25:07,380 --> 00:25:12,360
that's really great and that's I don't

00:25:11,010 --> 00:25:14,190
have time to talk about other random

00:25:12,360 --> 00:25:15,419
cool stuff but there's other random cool

00:25:14,190 --> 00:25:18,210
stuff you could do with this that I'd

00:25:15,419 --> 00:25:20,370
love to talk about and of course I don't

00:25:18,210 --> 00:25:22,549
have time so thanks very much for

00:25:20,370 --> 00:25:22,549
listening

00:25:27,570 --> 00:25:31,140
all right outstanding job Thomas so we

00:25:30,060 --> 00:25:32,310
have like about three minutes for

00:25:31,140 --> 00:25:33,570
questions so if you'd like to ask

00:25:32,310 --> 00:25:37,160
question the microphone is in the middle

00:25:33,570 --> 00:25:37,160
of the room please line up there

00:25:42,650 --> 00:25:47,490
questions questions so there's just a

00:25:45,840 --> 00:25:51,630
question from the front here oh great

00:25:47,490 --> 00:25:53,430
I just opened up my Mac keyboard and

00:25:51,630 --> 00:25:55,650
tried to type an emoji into the terminal

00:25:53,430 --> 00:25:57,360
and that works pretty well but then it's

00:25:55,650 --> 00:25:58,590
screwed up the width do you know what's

00:25:57,360 --> 00:25:59,910
going on with that yes

00:25:58,590 --> 00:26:01,650
exactly what's going on with that in

00:25:59,910 --> 00:26:04,890
fact I wrote a blog post you can read on

00:26:01,650 --> 00:26:06,360
the recurse comm blog about this but

00:26:04,890 --> 00:26:09,060
another concern you have to worry about

00:26:06,360 --> 00:26:10,380
that there's a merge request into this

00:26:09,060 --> 00:26:11,370
blessings library that Eric who's

00:26:10,380 --> 00:26:12,180
sitting in the front here and would

00:26:11,370 --> 00:26:16,380
probably be happy to take questions

00:26:12,180 --> 00:26:17,700
afterwards I could talk about theirs you

00:26:16,380 --> 00:26:19,290
have to figure out you know if you're

00:26:17,700 --> 00:26:20,670
doing this terminal UI stuff you have to

00:26:19,290 --> 00:26:22,320
figure out how you're trying to draw

00:26:20,670 --> 00:26:23,670
Windows you move the cursor up here and

00:26:22,320 --> 00:26:24,630
you write this thing and you with the

00:26:23,670 --> 00:26:27,270
cursor down here and you're right the

00:26:24,630 --> 00:26:29,940
next row of your window but you are now

00:26:27,270 --> 00:26:32,130
you know window layouts not easy and in

00:26:29,940 --> 00:26:34,230
the terminal you might draw write a neat

00:26:32,130 --> 00:26:36,060
little emoji thing and if you're trying

00:26:34,230 --> 00:26:37,770
to calculate how wide that might be

00:26:36,060 --> 00:26:39,540
based on how many unicode characters it

00:26:37,770 --> 00:26:42,840
mixed up or based on how many bytes it

00:26:39,540 --> 00:26:44,520
is you could have problems so these

00:26:42,840 --> 00:26:46,260
things can be more complicated than they

00:26:44,520 --> 00:26:48,390
they first appear basically and yeah I'd

00:26:46,260 --> 00:26:52,080
recommend that blog post for a full

00:26:48,390 --> 00:26:53,370
treatment of that yeah all right I have

00:26:52,080 --> 00:26:54,420
a I have a question if no one else does

00:26:53,370 --> 00:26:56,280
tell us you mentioned you were into

00:26:54,420 --> 00:26:58,550
terminal-based games have you written

00:26:56,280 --> 00:27:01,980
any that you'd like to plug right now

00:26:58,550 --> 00:27:04,500
I've started a ton and they're all

00:27:01,980 --> 00:27:05,910
they're all gonna be great someday but I

00:27:04,500 --> 00:27:09,270
always get distracted by like writing

00:27:05,910 --> 00:27:11,400
the framework which is I do instead

00:27:09,270 --> 00:27:14,730
the thing that I've worked on is this B

00:27:11,400 --> 00:27:16,500
Python tool that I had up before we've

00:27:14,730 --> 00:27:21,510
done a variety of things with it another

00:27:16,500 --> 00:27:25,920
thing I've worked on recently is this

00:27:21,510 --> 00:27:27,750
kind of fun undo tool where you will see

00:27:25,920 --> 00:27:29,430
if it comes up but you kind of take over

00:27:27,750 --> 00:27:32,100
a terminal and kind of repaint it in

00:27:29,430 --> 00:27:34,080
sort of guerilla warfare ways to

00:27:32,100 --> 00:27:36,810
implement this one won't be undo this

00:27:34,080 --> 00:27:39,090
will be a you see the effect here it's

00:27:36,810 --> 00:27:40,860
kind of changing the case on everything

00:27:39,090 --> 00:27:43,890
before here in Python so

00:27:40,860 --> 00:27:45,870
there's fun just fun weird things you

00:27:43,890 --> 00:27:49,020
can do with this so I've worked on some

00:27:45,870 --> 00:27:50,670
of those instead you're a sick sick man

00:27:49,020 --> 00:27:52,080
okay it was a pleasure having you thank

00:27:50,670 --> 00:27:59,070
you very much Thomas give him a huge

00:27:52,080 --> 00:28:00,240
hand all right and we have about ten

00:27:59,070 --> 00:28:01,170
minutes till our next speaker thanks

00:28:00,240 --> 00:28:02,730
very much everyone for coming to the

00:28:01,170 --> 00:28:04,559
best from the conference we got the

00:28:02,730 --> 00:28:05,610
final talking here coming up next and

00:28:04,559 --> 00:28:08,330
that's gonna be the best over the whole

00:28:05,610 --> 00:28:08,330

YouTube URL: https://www.youtube.com/watch?v=WAitSilLDUA


