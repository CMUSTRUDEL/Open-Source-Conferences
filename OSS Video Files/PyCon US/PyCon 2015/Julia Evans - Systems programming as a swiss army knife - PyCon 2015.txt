Title: Julia Evans - Systems programming as a swiss army knife - PyCon 2015
Publication date: 2015-04-11
Playlist: PyCon 2015
Description: 
	"Speaker: Julia Evans

You might think of the Linux kernel as something that only kernel developers need to know about. Not so! It turns out that understanding some basics about kernels and systems programming makes you a better developer, and you can use this knowledge when debugging your normal everyday Python programs.

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:16,160 --> 00:00:21,170
>> HELLO, EVERYONE. SO OUR SPEAKER TODAY IS JULIA EVANS, AND HER

00:00:21,170 --> 00:00:23,610
TALK IS TITLED SPYING ON YOUR PROGRAMS.

00:00:23,610 --> 00:00:33,730
PLEASE GIVE HER A WARM WELCOME. [APPLAUSE]

00:00:33,730 --> 00:00:36,800
>> HEY, EVERYONE. SO I'M JULIA, AND I'M GOING TO TALK ABOUT

00:00:36,800 --> 00:00:38,980
ONE OF MY FAVORITE THINGS I'M BEEN LEARNING FOR THE

00:00:38,980 --> 00:00:41,590
LAST YEAR AND A HALF WHICH IS HOW TO BECOME A BETTER

00:00:41,590 --> 00:00:44,940
SPY. SO I'M NOT GOING TO TAKE QUESTIONS AT THE

00:00:44,940 --> 00:00:45,940
END OF THE TALK.

00:00:45,940 --> 00:00:50,870
IF YOU HAVE QUESTIONS, TWEET THEM TO ME. IF I HAVE TIME I'LL TRY TO ANSWER THEM.

00:00:50,870 --> 00:00:53,620
BUT WE'RE NOT GOING TO DO QUESTIONS AT THE MICROPHONE.

00:00:53,620 --> 00:01:00,969
SO, LET'S GET GOING! FIRST OFF, THIS TALK IS NOT REALLY ABOUT PYTHON.

00:01:00,969 --> 00:01:06,369
IT'S ABOUT LOTS OF STUFF. IT'S ABOUT TOOLS THAT YOU CAN USE TO DEBUG

00:01:06,369 --> 00:01:10,290
PROGRAMS, NO MATTER WHAT PROGRAMMING LANGUAGE THEY'RE WRITTEN IN WHICH I HEARD IS A THING

00:01:10,290 --> 00:01:15,300
ONLY RECENTLY AND KIND OF A HUGE SURPRISE TO ME.

00:01:15,300 --> 00:01:16,990
MOST OF THE THINGS I'M GOING TO DISCUSS IN THIS

00:01:16,990 --> 00:01:23,500
TALK ARE GOING TO BE LINUX-SPECIFIC. WE'RE GOING TO GET FAST TO LINUX DETAILS,

00:01:23,500 --> 00:01:25,880
WHICH I PROMISE YOU'RE GOING TO UNDERSTAND BECAUSE

00:01:25,880 --> 00:01:28,020
YOU'RE ALL REALLY SMART AND I'LL GOING TO EXPLAIN

00:01:28,020 --> 00:01:31,910
IT. SO DON'T WORRY.

00:01:31,910 --> 00:01:36,120
BUT THIS IS A LINUX-SPECIFIC TALK. AND YOU'RE GOING TO UNDERSTAND WHY.

00:01:36,120 --> 00:01:40,310
PRETTY SOON. THE ATTITUDE I WANT TO KIND OF CONVINCE YOU

00:01:40,310 --> 00:01:43,640
OF IN THIS TALK IS THAT YOU SHOULD START THINKING

00:01:43,640 --> 00:01:45,740
ABOUT YOUR PROGRAMS AS BLACK BOXES.

00:01:45,740 --> 00:01:53,720
AS IF THEY'RE WRITTEN BY PEOPLE WHO ARE MALICIOUS. SO THIS TALK IS REALLY ABOUT THE PROBLEM OF

00:01:53,720 --> 00:01:56,360
LIKE HOW DO YOU OBSERVE WHAT A PROGRAM IS DOING

00:01:56,360 --> 00:01:57,509
WHILE IT'S RUNNING, RIGHT?

00:01:57,509 --> 00:02:01,170
YOU'VE WRITTEN A PROGRAM, IT'S DOING SOMETHING, AND

00:02:01,170 --> 00:02:09,069
HOW DO YOU KNOW WHAT THAT IS, RIGHT? [NO AUDIO]

00:02:09,069 --> 00:02:10,690
LOOK AT THE SOURCE CODE, WHO LOOKS AT THE SOURCE

00:02:10,690 --> 00:02:16,780
CODE? [NO AUDIO]

00:02:16,780 --> 00:02:19,170
BY THE CODE, YOU MIGHT THINK THAT TO DEBUG A

00:02:19,170 --> 00:02:21,340
PROGRAM, YOU NEED TO KNOW THE PROGRAMMING LANGUAGE

00:02:21,340 --> 00:02:26,000
THAT ITS WRITTEN IN. NONE OF THESE THINGS ARE TRUE.

00:02:26,000 --> 00:02:31,150
AND THE TOOLS I'M GOING TO EXPLAIN DON'T INVOLVE READING THE PROGRAM, CARING ABOUT THE PROGRAM

00:02:31,150 --> 00:02:35,450
LANGUAGE THAT ITS WRITTEN IN. AND WE WANT TO TALK ABOUT HOW TO BE A WIZARD,

00:02:35,450 --> 00:02:39,300
RIGHT? HOW TO DEBUG WITHOUT DOING ANY OF THIS STUFF.

00:02:39,300 --> 00:02:43,280
THIS IS SOMETHING WHICH IS ALREADY FAMILIAR TO YOU,

00:02:43,280 --> 00:02:47,590
RIGHT? LIKE I'M SAYING THIS IS WIZARDRY.

00:02:47,590 --> 00:02:53,670
IF YOU LOOK AT A TOOL WHICH TELLS YOU HOW MUCH CPU

00:02:53,670 --> 00:02:57,580
PROGRAMS YOURS ARE USING. TOP DOESN'T CARE WHAT LANGUAGE CHROME IS WRITTEN

00:02:57,580 --> 00:03:02,090
IN, RIGHT? IT'S USING THE SWITCH MEMORY, USING THIS MUCH

00:03:02,090 --> 00:03:03,850
CPU, AND THAT'S IT.

00:03:03,850 --> 00:03:07,760
AND WE'RE GOING TO TALK ABOUT LIKE, MORE LIKE ADVANCED WAYS TO DO THAT.

00:03:07,760 --> 00:03:12,240
AND I'LL EXPLAIN WHAT I MEAN BY THAT. AS WE GO THROUGH THIS.

00:03:12,240 --> 00:03:20,580
SO, HERE'S HOW IT'S GOING TO GO. WE'RE GOING TO START OFF BY TALKING ABOUT

00:03:20,580 --> 00:03:22,890
OPERATING SYSTEMS A LITTLE BIT.

00:03:22,890 --> 00:03:27,410
AND WHAT'S AN OPERATING SYSTEM, HOW DOES IT WORK

00:03:27,410 --> 00:03:35,760
AND WHAT DO WE NEED TO KNOW TO BECOME WIZARDS. AND WE'RE GOING TO TALK THROUGH THREE MYSTERIES.

00:03:35,760 --> 00:03:43,540
CASE OF -- WEBSITE AND THE CASE OF THE SLOW PROGRAM.

00:03:43,540 --> 00:03:46,910
AND THEY'RE ALL GOING TO BE REALLY FUN. AND WE'RE GOING TO LEARN A FEW THINGS ABOUT

00:03:46,910 --> 00:03:53,240
SPYING. AND HOW TO BECOME A SPY.

00:03:53,240 --> 00:03:57,850
SO I WANT TO TALK A LITTLE BIT ABOUT WHY YOU SHOULD

00:03:57,850 --> 00:04:03,450
LOVE YOUR OPERATING SYSTEM. WHEN I STARTED LEARNING ABOUT THIS, I HAD

00:04:03,450 --> 00:04:06,340
BEEN USING LINUX FOR A LONG TIME, FOR MAYBE NINE

00:04:06,340 --> 00:04:07,840
YEARS AND ATOM POINT -- AT SOME POINT I WAS LIKE

00:04:07,840 --> 00:04:10,150
WHAT DID THE LINUX ACTUALLY DO.

00:04:10,150 --> 00:04:15,800
I REALIZED I WAS CONFUSED ABOUT SOME FUNDAMENTAL POINTS ABOUT WHAT AN OPERATING SYSTEM DID.

00:04:15,800 --> 00:04:19,380
I'M GOING TO EXPLAIN EVEN THOUGH YOU PROBABLY KNOW

00:04:19,380 --> 00:04:27,720
MORE OR LESS THE STUFF ALREADY. SO LET'S SAY THAT YOU GO TO GOOGLE.COM, RIGHT?

00:04:27,720 --> 00:04:30,340
SO THE THINGS THAT HAPPEN ARE, LIKE, THIS IS AN

00:04:30,340 --> 00:04:34,940
ENGINEER QUESTION I'VE GOTTEN BEFORE. WHAT HAPPENS WHEN YOU GO TO GOOGLE.COM?

00:04:34,940 --> 00:04:38,150
FIRST YOU PRESS "H" OR "G" ON YOUR KEYBOARD, AND

00:04:38,150 --> 00:04:41,950
WHEN YOU PRESS G, IT'S LIKE I KNOW HOW TO HANDLE

00:04:41,950 --> 00:04:48,900
THIS. HOW TO HANDLE YOUR KEYBOARD DRIVER, RIGHT?

00:04:48,900 --> 00:04:54,940
ALSO, WHEN IT STARTS TO GET GOOGLE.COM, IT SENDS

00:04:54,940 --> 00:05:00,450
ALL THE NETWORK PACKETS, RIGHT? YOUR WHOLE NETWORK IS INSIDE -- IS INSIDE

00:05:00,450 --> 00:05:02,020
YOUR OPERATING SYSTEM AND YOUR OPERATING SYSTEM

00:05:02,020 --> 00:05:04,240
KNOWS HOW TO DO THAT.

00:05:04,240 --> 00:05:06,889
WHEN YOU WRITE NETWORK CODE YOU DON'T HAVE TO

00:05:06,889 --> 00:05:14,710
IMPLEMENT NETWORK PROTOCOL CODES EVERY TIME. IT'S REALLY HARD AND I TRIED.

00:05:14,710 --> 00:05:21,790
IF YOU WANT TO WRITE FILES TO DISK, YOUR OPERATING SYSTEM NEEDS TO KNOW ABOUT, FOR EXAMPLE, HOW,

00:05:21,790 --> 00:05:24,770
LIKE, YOUR HARD DRIVE WORKS AND HOW TO COMMUNICATE

00:05:24,770 --> 00:05:26,000
BYTES TO YOUR HARD DRIVE.

00:05:26,000 --> 00:05:29,080
LIKE, I NEED YOU TO WRITE THESE BYTES TO THIS PART

00:05:29,080 --> 00:05:32,470
OF THE DRIVE. AND ALSO NEEDS TO KNOW, LIKE, GIVEN A BUNCH

00:05:32,470 --> 00:05:35,090
OF BYTES ON YOUR HARD DRIVE, HOW ARE THOSE ORGANIZED

00:05:35,090 --> 00:05:38,020
INTO FILES, RIGHT? AND THIS IS ALL THIS STUFF YOU NEVER HAVE

00:05:38,020 --> 00:05:39,240
TO WORRY ABOUT AS A PROGRAMMER.

00:05:39,240 --> 00:05:40,720
AND THE REASON YOU DON'T HAVE TO WORRY ABOUT IT IS

00:05:40,720 --> 00:05:43,840
BECAUSE YOUR OPERATING SYSTEM KNOWS HOW TO DO IT

00:05:43,840 --> 00:05:47,130
AND ALLOCATES MEMORY. IT WILL LIKE COMMUNICATE WITH THE GRAPHICS

00:05:47,130 --> 00:05:49,750
CARD. IF LIKE CHROME RUNS OUT OF MEMORY, IT WILL

00:05:49,750 --> 00:05:53,980
BE LIKE YO CHROME, AND START SWAPPING TO DISK.

00:05:53,980 --> 00:05:57,110
IF REALLY RUNS OUT OF MEMORY, IT WILL KILL IT, SO

00:05:57,110 --> 00:06:02,310
IT DOES ALL KINDS OF AMAZING STUFF FOR YOU. AND THIS IS GOING TO BE REALLY IMPORTANT TO

00:06:02,310 --> 00:06:04,560
KNOW IN A MINUTE.

00:06:04,560 --> 00:06:08,760
THAT THE OPERATING SYSTEM DOES ALL THIS. SO HOW DO YOU CALL OPERATING SYSTEM CODE?

00:06:08,760 --> 00:06:10,500
RIGHT? THIS IS SOMETHING I DIDN'T UNDERSTAND UNTIL

00:06:10,500 --> 00:06:12,250
LIKE LAST YEAR.

00:06:12,250 --> 00:06:17,229
SO THIS IS, LIKE, IF YOU WRITE SOMETHING TO DISK,

00:06:17,229 --> 00:06:18,760
WE'VE ESTABLISHED THAT THE OPERATING SYSTEM WRITES

00:06:18,760 --> 00:06:22,180
STUFF TO DISK. BUT LIKE HOW DOES IT DO THAT?

00:06:22,180 --> 00:06:24,729
AND THE ANSWER IS SYSTEM CALLS, IS THE BEST AND MY

00:06:24,729 --> 00:06:31,639
FAVORITE, AND WE'RE GOING TO GET THERE. SO SYSTEMS CALLS ARE THE WAY YOU COMMUNICATE

00:06:31,639 --> 00:06:32,810
WITH YOUR OPERATING SYSTEM.

00:06:32,810 --> 00:06:34,990
YOU'RE LIKE, YO, I NEED YOU TO WRITE THIS FILE.

00:06:34,990 --> 00:06:38,170
LIKE, PLEASE HELP. AND IT'S LIKE, OKAY, I GOT IT.

00:06:38,170 --> 00:06:43,060
DON'T WORRY. AND, LIKE, BASICALLY ALMOST ALL OF THE

00:06:43,060 --> 00:06:44,730
COMMUNICATION WITH YOUR HARDWARE THAT YOU DO,

00:06:44,730 --> 00:06:49,300
HAPPENS THROUGH SYSTEM CALLS. AND DOESN'T MATTER WRITING PYTHON, WRITING

00:06:49,300 --> 00:06:52,070
C, WRITING INTERCAL.

00:06:52,070 --> 00:06:54,210
NO MATTER WHAT, YOU'RE WRITING TO A FILE YOU WRITE

00:06:54,210 --> 00:06:59,120
SYSTEM CALLS. YOU DON'T HAVE A CHOICE.

00:06:59,120 --> 00:07:00,889
SO THESE ARE -- THIS IS LIKE THE INTERFACE TO YOUR

00:07:00,889 --> 00:07:04,690
OPERATING SYSTEM. USE IT TO OPEN FILES, YOU START PROGRAMS.

00:07:04,690 --> 00:07:10,400
YOU CHANGE FILE PERMISSIONS. SO WE'VE LEARNED -- WE'RE NOW LIKE OPERATING

00:07:10,400 --> 00:07:11,400
SYSTEM EXPERTS.

00:07:11,400 --> 00:07:16,160
YOU NO LONGER NEED TO TAKE AN OS CLASS. WE KNOW IT DOES STUFF AND YOUR PROGRAMS TELL

00:07:16,160 --> 00:07:19,210
IT WHAT TO DO USING SYSTEM CALLS.

00:07:19,210 --> 00:07:23,310
YOU'RE DONE. SO HOW CAN WE USE THIS KNOWLEDGE TO DEBUG

00:07:23,310 --> 00:07:25,790
OUR PROGRAMS, RIGHT?

00:07:25,790 --> 00:07:31,030
AND THE -- [NO AUDIO]

00:07:31,030 --> 00:07:36,550
BECAUSE WE DON'T TRUST OUR PROGRAMS. THEY'RE WRITTEN BY OURSELVES AND THE PAST

00:07:36,550 --> 00:07:40,860
IT'S BEEN WRONG.

00:07:40,860 --> 00:07:46,290
SO LET'S DO THIS. WHO'S EVER WRITTEN -- RUN A PROGRAM AND NOT

00:07:46,290 --> 00:07:48,340
KNOWN WHERE THE CONFIGURATION FILE WAS?

00:07:48,340 --> 00:07:54,240
OH MY GOD, THAT'S LIKE ALL OF YOU. AMAZING.

00:07:54,240 --> 00:07:56,300
YEAH. SO THIS HAPPENS ALL THE TIME.

00:07:56,300 --> 00:07:59,419
AND I REALLY HATE READING DOCUMENTATION TRYING TO

00:07:59,419 --> 00:08:03,419
FIGURE OUT WHERE THE CONFIG FILE IS, ONE PERSON WILL SAY ONE THING AND SOMEONE ELSE WILL SAY

00:08:03,419 --> 00:08:05,830
SOMETHING ELSE. NO, I JUST WANT TO KNOW.

00:08:05,830 --> 00:08:07,820
PLEASE JUST TELL ME, I WANT TO KNOW THE ANSWER, I

00:08:07,820 --> 00:08:13,150
DON'T WANT TO HAVE TO READ STUFF. SO HERE'S A SPECIFIC EXAMPLE OF THIS.

00:08:13,150 --> 00:08:18,530
IS, THIS QUESTION IS LIKE BASH_PROFILE, OR BASHRC

00:08:18,530 --> 00:08:25,259
WHEN IT STARTS. AND I KIND OF KNOW THE ANSWER TO THIS.

00:08:25,259 --> 00:08:29,699
BUT IF YOU WANTED TO CHECK IT, THERE'S A REALLY, REALLY SIMPLE WAY TO CHECK IT.

00:08:29,699 --> 00:08:34,079
AND THIS IS BY BEING A WIZARD. AKA USE A TOOL CALLED STRACE.

00:08:34,079 --> 00:08:36,820
IT'S BASICALLY MY FAVORITE THING IN THE WORLD AND

00:08:36,820 --> 00:08:41,200
I'M GOING TO TELL YOU ABOUT IT. WE'RE GOING TO GET THERE.

00:08:41,200 --> 00:08:47,800
SO STRACE LETS YOU BE A WIZARD. AND THE WAY, IT TRACES SYSTEMS CALLS FOR YOU.

00:08:47,800 --> 00:08:50,550
SO YOU RUN STRACE ON A PROGRAM AND TELLS YOU EVERY

00:08:50,550 --> 00:08:54,180
SYSTEM CALL THAT IT RUNS. SO IF IT OPENS A FILE, IT'S LIKE, HEY, LETTING

00:08:54,180 --> 00:08:56,959
YOU KNOW A PROGRAM OPENED THAT FILE.

00:08:56,959 --> 00:08:59,529
SO YOU CAN USE THIS, TO FIND OUT WHAT YOUR PROGRAMS

00:08:59,529 --> 00:09:04,500
ARE DOING WHILE THEY'RE RUNNING. LIKE IN AN AUTHORITATIVE WAY.

00:09:04,500 --> 00:09:09,959
SO THE WAY STRACE IS YOU'RE ON STRACE AND THEN YOU

00:09:09,959 --> 00:09:15,450
RUN THE PROGRAM THAT YOU WANT TO RUN. WHAT HAPPENS WHEN YOU STRACE?

00:09:15,450 --> 00:09:18,800
IS YOU GET SOMETHING THAT LOOKS LIKE THIS, WHICH IS

00:09:18,800 --> 00:09:24,410
OBVIOUSLY, NOT TOTALLY UNDERSTANDABLE. BUT I JUST WANTED TO SHOW IT TO YOU TO LET

00:09:24,410 --> 00:09:28,420
YOU KNOW IT'S NOT LIKE -- TO NOT WORRY IF YOU SEE SOMETHING

00:09:28,420 --> 00:09:31,290
LIKE THIS. YOU'RE LIKE, WHAT'S GOING ON?

00:09:31,290 --> 00:09:34,550
IF YOU LOOK AT THIS AND LOOK ON THE BACK SEE LIB --

00:09:34,550 --> 00:09:39,070
OKAY, WHATEVER. GOOGLE CHROME IS LOADING SOMETHING LIKE AUDIO

00:09:39,070 --> 00:09:44,509
LIBRARIES, RIGHT? THAT'S ALL I'M LEARNING FROM THIS.

00:09:44,509 --> 00:09:47,839
SO WE WANT TO ANSWER THIS QUESTION, DOES BASH USE

00:09:47,839 --> 00:09:56,680
BASH_PROFILE OR BASHRC? SO WHAT I DID, WAS I S TRACED BASH.

00:09:56,680 --> 00:10:01,949
HEY, SHOW ME THE OPEN SYSTEM CALLS. SO I LOOKED FOR ALL OF THEM AND IT WAS LIKE,

00:10:01,949 --> 00:10:03,610
YEAH, IT OPENED BASHRC AND BASH HISTORY.

00:10:03,610 --> 00:10:06,970
AND THOSE WERE THE ONLY THINGS IN MY HOME DIRECTORY

00:10:06,970 --> 00:10:09,470
THAT IT OPENED. NOW I KNOW.

00:10:09,470 --> 00:10:13,990
I DON'T NEED TO READ STACK OVERFLOW. I DON'T NEED TO ASK A FRIEND.

00:10:13,990 --> 00:10:21,769
IT OPENS BASHRC AND THAT'S IT. WHEN YOU RUN BASH LOG IN --

00:10:21,769 --> 00:10:28,489
THAT'S WHAT I DID IN THAT CASE. SO BASHRC 1, THERE ARE A LOT OF OTHER SYSTEM

00:10:28,489 --> 00:10:30,309
CALLS THAT I LOVE TO LOOK AT.

00:10:30,309 --> 00:10:32,420
THERE'S RIGHT -- IF YOU'RE PROGRAM IS WRITING TO A

00:10:32,420 --> 00:10:35,360
FILE AND YOU DON'T KNOW, THAT HAPPENS TO ME ALL THE

00:10:35,360 --> 00:10:37,850
TIME, IT IF YOU HAVE SOME KIND OF WRAPPER SCRIPT

00:10:37,850 --> 00:10:41,040
THAT'S RUNNING PROGRAMS, YOU CAN STRACE THE SYSTEM

00:10:41,040 --> 00:10:43,259
CALL AND TELL YOU WHAT PROGRAM IS RUNNING AND WHAT

00:10:43,259 --> 00:10:49,509
ALL THE COMMAND FLAGS ARE, WHICH IS THE GREATEST. YOU CAN SPY ON NETWORK DATA BY USING LIKE

00:10:49,509 --> 00:10:50,870
RECEIVE FROM.

00:10:50,870 --> 00:10:52,319
YOU CAN SEE LIKE WHAT SOFTWARE CONNECTIONS IT'S

00:10:52,319 --> 00:10:56,560
MAKING. CONNECTING TO OTHER SERVICES.

00:10:56,560 --> 00:11:04,449
THIS TALK, I HAVE THEM IN A BOX HERE, YOU SHOULD

00:11:04,449 --> 00:11:09,290
COME GET IT FROM ME. BECAUSE I REALLY LIKE STRACE A LOT.

00:11:09,290 --> 00:11:11,889
AND SO I'M NOT GOING TO GO TOO MUCH FURTHER INTO

00:11:11,889 --> 00:11:14,199
STRACE RIGHT NOW. BECAUSE YOU CAN GET --

00:11:14,199 --> 00:11:24,509
[NO AUDIO] SO THE NEXT TOPIC I WANT TO COVER IS THE CASE

00:11:24,509 --> 00:11:27,699
OF THE FRENCH WEBSITE.

00:11:27,699 --> 00:11:33,170
SO THIS IS SOMETHING I MANUFACTURED. I MADE A WEBSITE WHERE YOU GO TO IT, AND -- IN

00:11:33,170 --> 00:11:35,800
CHROME. I WENT TO IT IN CHROME.

00:11:35,800 --> 00:11:40,240
IT'S LIKE, HEY, WELCOME TO PYTHON. WOW.

00:11:40,240 --> 00:11:42,790
AND THEN I TRIED TO GET IT FROM THE COMMAND LINE

00:11:42,790 --> 00:11:52,070
AND IT WAS LIKE, "BONJUR." AND WHY IS IT IN FRENCH, RIGHT?

00:11:52,070 --> 00:11:55,149
WHAT HAPPENED, IT'S THE SAME WEBSITE, BUT IT'S

00:11:55,149 --> 00:12:02,600
GIVING IT TO ME IN TWO DIFFERENT LANGUAGES. [NO AUDIO]

00:12:02,600 --> 00:12:07,079
WHEN SOMETHING NETWORK -- WHEN A NETWORK THING IS

00:12:07,079 --> 00:12:13,240
HAPPENING, WHAT YOU CAN DO IS... [NO AUDIO]

00:12:13,240 --> 00:12:21,230
THINGS ARE THEORETICALLY DETERMINISTIC. YOU CAN DEBUG THE PROGRAM.

00:12:21,230 --> 00:12:26,040
WHICH IS THE GREATEST. SO WE'RE GOING TO SPY ON THE NETWORK TO FIGURE

00:12:26,040 --> 00:12:27,149
OUT WHAT'S GOING ON HERE.

00:12:27,149 --> 00:12:29,649
THIS IS A PRETTY SIMPLE EXAMPLE OF IT, YOU CAN DO

00:12:29,649 --> 00:12:34,499
LITTLE MORE COMPLICATED STUFF. SO, IF YOU LOOK AT THIS, THIS IS TOO MUCH

00:12:34,499 --> 00:12:37,720
STUFF. BUT BASICALLY, I WAS LIKE, JUST SHOW ME EVERYTHING

00:12:37,720 --> 00:12:42,620
THAT'S BEING SENT ON 4 OR 5,000. AND I DON'T KNOW IF I CAN POINT TO THIS, PROBABLY

00:12:42,620 --> 00:12:45,730
NOT. BUT YOU CAN SEE THAT UP THERE, THE FIRST PART,

00:12:45,730 --> 00:12:48,209
IS LIKE WAY MORE STUFF THAT CHROME IS SENDING.

00:12:48,209 --> 00:12:51,459
AND CAN YOU RECALL IS SENDING WAY -- CURL IS

00:12:51,459 --> 00:12:57,610
SENDING WAY LESS STUFF. [NO AUDIO]

00:12:57,610 --> 00:13:03,490
THERE'S THIS HEADER WHERE IT'S LIKE, "ACCEPT LANGUAGE" "ENGLISH" SO CHROME IS LIKE PLEASE

00:13:03,490 --> 00:13:06,959
GIVE ME HAVE AN ENGLISH WEBSITE.

00:13:06,959 --> 00:13:11,350
AND CURL IS LIKE GIVE ME A WEBSITE. IT'S OKAY.

00:13:11,350 --> 00:13:15,350
AND IT'S LIKE I'LL GIVE IT TO YOU IN FRENCH THEN.

00:13:15,350 --> 00:13:19,939
SO WHAT HAPPENED IS, THEY ACTUALLY REQUESTED DIFFERENT THINGS, RIGHT?

00:13:19,939 --> 00:13:24,759
AND THIS IS A LITTLE BIT OF A CONTRITE EXAMPLE. I THINK YOU CAN EASILY SEE HOW YOU CAN USE

00:13:24,759 --> 00:13:32,040
THIS IN MORE SERIOUS NETWORK DID HE DEBUGGING SITUATIONS.

00:13:32,040 --> 00:13:34,749
SO IF WE USE CURL AND WE'RE LIKE HEY, I WANT AN

00:13:34,749 --> 00:13:41,119
ENGLISH WEBSITE, HI, WELCOME TO PYTHON. AND NOW WE DON'T NEED TO LEARN FRENCH.

00:13:41,119 --> 00:13:50,199
EVEN THOUGH LEARNING FRENCH IS PRETTY FUN. SO THERE ARE A LOT OF NETWORKS SPYING TOOLS

00:13:50,199 --> 00:13:51,199
THAT YOU CAN USE.

00:13:51,199 --> 00:13:55,540
I USED NGRAP HERE BECAUSE IT WAS THE SIMPLEST ONE I

00:13:55,540 --> 00:13:59,509
COULD FIND. THERE'S TCP -- WHICH IS A SUPER POWERFUL TOOL

00:13:59,509 --> 00:14:03,079
WHICH YOU CAN USE TO DUMP ALL YOUR NETWORK TRAFFIC.

00:14:03,079 --> 00:14:08,279
WIRESHARK IS THE BEST. WIRESHARK IS LIKE A GRAPHICAL TOOL WHICH WILL

00:14:08,279 --> 00:14:13,410
SHOW YOU NETWORK TRAFFIC AND LET YOU DIG INTO IT.

00:14:13,410 --> 00:14:16,679
AND UNDERSTAND -- AND IT REALLY HELPS YOU UNDERSTAND WHAT'S GOING ON BECAUSE IT IT WILL

00:14:16,679 --> 00:14:22,920
INTERPRET ALL THE STUFF FOR YOU. THESE FIRST THREE TOOLS THAT I MENTIONED,

00:14:22,920 --> 00:14:26,389
ONLY WORK WITH, LIKE, NON-ENCRYPTED TRAFFIC, BECAUSE

00:14:26,389 --> 00:14:28,379
THE WHOLE POINT OF ENCRYPTED TRAFFIC IS YOU CAN'T

00:14:28,379 --> 00:14:30,350
SPY ON IT, RIGHT?

00:14:30,350 --> 00:14:33,100
SO IF YOU'RE USING SPYING TOOLS TO SPY ON TRAFFIC,

00:14:33,100 --> 00:14:37,519
ENCRYPTED TOOL IS SAYING BLAH. I CAN SEE SOMETHING IS BEING SENT AND THAT'S

00:14:37,519 --> 00:14:42,119
NOT HELPFUL TO ME.

00:14:42,119 --> 00:14:46,379
YOU CAN USE MITM PROXY. MAN IN THE MIDDLE PROXY.

00:14:46,379 --> 00:14:52,399
MAN IN THE MIDDLE YOURSELF, TO SEE THE UNENCRYPTED TRAFFIC.

00:14:52,399 --> 00:14:57,579
AND THAT'S SUPER USEFUL. SO, LIKE, THIS IS AN AMAZING THING TO DO AGAIN

00:14:57,579 --> 00:15:00,109
BECAUSE YOU DON'T NEED TO READ YOUR SOURCE CODE.

00:15:00,109 --> 00:15:02,489
YOU DON'T NEED TO UNDERSTAND AND THINK ABOUT THE

00:15:02,489 --> 00:15:05,429
LOGIC. JUST SEEING WHAT'S SENT AND WHAT COMES BACK

00:15:05,429 --> 00:15:11,749
AND WHETHER THAT'S THE RIGHT THING.

00:15:11,749 --> 00:15:15,100
NOW WE'RE GOING TO TALK ABOUT MY FAVORITE PART.

00:15:15,100 --> 00:15:21,160
THE CASE OF THE SLOW PROGRAM. PROFILING, USING LIKE SYSTEMS TOOLS IS LIKE

00:15:21,160 --> 00:15:23,559
THE MOST FUN THING.

00:15:23,559 --> 00:15:28,360
I HAVE THREE PROGRAMS HERE. ONE OF THEM IS SLOW.

00:15:28,360 --> 00:15:31,649
BECAUSE IT'S SPENDING TOO MUCH TIME ON THE CPU.

00:15:31,649 --> 00:15:34,059
SECOND ONE IS SLOW, BECAUSE IT'S DOING TO MUCH IO,

00:15:34,059 --> 00:15:39,379
WRITING TOO MUCH DATA TO DISK. THIRD ONE IS WAITING FOR SOME SERVER.

00:15:39,379 --> 00:15:41,149
SO -- AND WHAT WE'RE GOING TO DO IS WE'RE GOING TO

00:15:41,149 --> 00:15:44,230
IDENTIFY WHICH ONE IS WHICH WITHOUT, LIKE, READING

00:15:44,230 --> 00:15:46,660
THE CODE OR ANYTHING. WE'RE JUST GOING TO RUN THE PROGRAMS AND THEN

00:15:46,660 --> 00:15:48,059
WE'RE GOING TO KNOW.

00:15:48,059 --> 00:15:54,949
BECAUSE WE'RE WIZARDS. AND WE'RE GOING TO USE NEW TOOLS TO DO THIS.

00:15:54,949 --> 00:15:56,860
ONE OF MY FAVORITE TOOLS WHEN I WAS DOING THIS, WAS

00:15:56,860 --> 00:16:02,410
ACTUALLY TIME. WHO'S USED THE TIME COMMAND TO FIND OUT HOW

00:16:02,410 --> 00:16:03,769
LONG SOMETHING TAKES?

00:16:03,769 --> 00:16:05,799
TIME IS AWESOME. IT DOES TWO THINGS: TELLS YOU HOW LONG A PROGRAM

00:16:05,799 --> 00:16:08,799
TOOK. THIS PROGRAM, MYSTERY PROGRAM ONE TOOK TWO

00:16:08,799 --> 00:16:11,569
SECONDS. WHICH IS, USEFUL INFORMATION.

00:16:11,569 --> 00:16:14,949
AND IT ALSO TELLS YOU HOW MUCH TIME IT SPENT ON THE

00:16:14,949 --> 00:16:21,529
CPU. WHICH IS, WHAT -- I HAVE A POLL QUESTION FOR

00:16:21,529 --> 00:16:22,620
YOU. WHAT IS IT -- IF IT'S NOT ON CPU, WHAT IS

00:16:22,620 --> 00:16:30,790
IT DOING? IO, MAYBE, BUT FUNDAMENTALLY IT'S...

00:16:30,790 --> 00:16:36,040
WAITING! IT'S WAITING FOR SOMETHING!

00:16:36,040 --> 00:16:40,089
WHOEVER SAID WAITING WINS. IT COULD BE WAITING FOR IO, COULD BE WAITING

00:16:40,089 --> 00:16:42,959
BECAUSE THERE ARE OTHER PROGRAMS DOING STUFF, RIGHT?

00:16:42,959 --> 00:16:45,482
AND THE OPERATING SYSTEM SCHEDULED IT OFF AND IT'S

00:16:45,482 --> 00:16:48,600
LIKE SORRY, RIGHT? I HAVE A MORE IMPORTANT --

00:16:48,600 --> 00:16:55,149
BUT YEAH. IT'S WAITING.

00:16:55,149 --> 00:16:59,029
SO THIS IS, LIKE, A QUESTION, WHAT IS IT WAITING FOR?

00:16:59,029 --> 00:17:01,019
AND IT TURNS OUT THAT WE CAN JUST ASK THE OPERATING

00:17:01,019 --> 00:17:03,629
SYSTEM THIS DIRECTLY, WITHOUT TRYING TO READ THE

00:17:03,629 --> 00:17:08,319
PROGRAM OR REASON ABOUT IT. SO -- AND WE'RE GOING TO DO THIS BY LOOKING

00:17:08,319 --> 00:17:10,860
INTO THE KERNEL'S SOUL.

00:17:10,860 --> 00:17:18,089
PRETTY MUCH LITERALLY. SO THIS IS A LITTLE BIT OF A LOT OF STUFF.

00:17:18,089 --> 00:17:20,270
BUT BASICALLY WHAT I DID IS, I LOOKED FOR THE PID

00:17:20,270 --> 00:17:24,370
OF THIS PROCESS, AND I WAS LIKE, HEY, TELL ME WHAT

00:17:24,370 --> 00:17:28,810
THE KERNEL STACK IS, RIGHT NOW. LIKE, WHAT IS IT DOING?

00:17:28,810 --> 00:17:30,400
AND THIS IS A LITTLE SMALL, MAYBE FOR YOU AT THE

00:17:30,400 --> 00:17:35,280
BACK, BUT WHAT IT SAYS IS K -- SK WAIT DATA, TCP, I

00:17:35,280 --> 00:17:42,190
NET RECEIVE NOTICE, SYS RECEIVED FROM. SO WHAT IS THIS WAITING FOR?

00:17:42,190 --> 00:17:48,850
NETWORK! IT SAYS LIKE TCP RECEIVE -- EI NET.

00:17:48,850 --> 00:17:51,000
I'M NOT LIKE A SUPER EXPERT OF UNDERSTANDING WHAT

00:17:51,000 --> 00:17:55,240
THESE THINGS MEAN, BUT I'M LIKE, SOUNDS LIKE NETWORK TO ME.

00:17:55,240 --> 00:17:58,980
RIGHT? IT'S WAITING FOR SOME KIND OF NETWORK STUFF.

00:17:58,980 --> 00:18:02,370
I DON'T KNOW. WHICH IS WAY MORE THAN I KNEW BEFORE.

00:18:02,370 --> 00:18:07,320
BEFORE WE JUST KNEW IT WAS TAKING TWO SECONDS. AND WE DIDN'T NEED TO -- AND LIKE, THIS IS

00:18:07,320 --> 00:18:08,550
A SIMPLE PROGRAM.

00:18:08,550 --> 00:18:10,550
BUT IF THIS WERE A SUPER COMPLICATED PROGRAM, SEE

00:18:10,550 --> 00:18:19,870
THAT IT'S AWESOME, JUST KNOW WHAT IT'S DOING. WE KNOW --

00:18:19,870 --> 00:18:24,390
THE SERVER THAT I -- THAT I WROTE, DOES THIS. SO THE REASON IT'S BAITING IS BECAUSE THE

00:18:24,390 --> 00:18:28,140
SERVER -- IT'S WAITING IS BECAUSE THE SERVER HAS BEEN

00:18:28,140 --> 00:18:35,160
SLEEPING. THAT'S WHY IT WAS WAITING.

00:18:35,160 --> 00:18:41,480
THE NEXT ONE I WANT TO DO, IS MYSTERY PROGRAM NUMBER TWO.

00:18:41,480 --> 00:18:46,040
THIS ONE TOOK 2.74 SECONDS, SO THE SAME META TIME,

00:18:46,040 --> 00:18:53,410
BUT SPENT 99% OF IT'S TIME ON THE CPU. AND THIS, TO ME, IS LIKE ALL I WANT TO KNOW

00:18:53,410 --> 00:18:55,390
ABOUT THIS PROGRAM.

00:18:55,390 --> 00:18:59,291
LIKE, IT'S JUST DOING SOME COMPUTATIONS, AND THIS

00:18:59,291 --> 00:19:03,370
IS LIKE AN INSTANCE WHERE I'M LIKE USE A PYTHON PROFILING.

00:19:03,370 --> 00:19:11,140
-- THIS IS ALL ABOUT NOT USING PYTHON PROFILERS. IF IT'S SPENDING ALL TIME IN CP -- IN CPU,

00:19:11,140 --> 00:19:12,480
FIND OUT WHAT PYTHON IS DOING.

00:19:12,480 --> 00:19:17,150
WE DON'T NEED TO DO SPECIAL OPERATING SYSTEM MATCHING STUFF.

00:19:17,150 --> 00:19:22,800
LIKE, WE'RE DONE HERE. AND TIME TOLD US EVERYTHING WE NEEDED TO KNOW.

00:19:22,800 --> 00:19:24,400
WITH -- WHAT THIS PROGRAM IS ACTUALLY DOING IS

00:19:24,400 --> 00:19:28,490
THIS. [LAUGHTER]

00:19:28,490 --> 00:19:34,440
IT TAKES A WHILE. [LAUGHTER]

00:19:34,440 --> 00:19:38,830
YEAH. MYSTERY PROGRAM NUMBER THREE.

00:19:38,830 --> 00:19:41,400
THIS ONE IS COOL, I WROTE THIS PROGRAM AND I

00:19:41,400 --> 00:19:44,980
THOUGHT I KNEW WHAT WAS GOING ON WITH IT, AND A

00:19:44,980 --> 00:19:47,010
WHOLE NEW MYSTERY CAME OUT OF IT AND I HAD TO SOLVE

00:19:47,010 --> 00:19:52,140
IT AND IT WAS SLOW IN WAYS I DIDN'T EXPECT. SO HERE'S WHAT HAPPENED.

00:19:52,140 --> 00:19:55,732
I TIMED IT TWICE, AND THE FIRST TIME IT TWO -- TIME

00:19:55,732 --> 00:20:00,430
IT TOOK TWO SECONDS AND SECOND TIME IT WAS TEN

00:20:00,430 --> 00:20:03,990
SECONDS. THIS WAS A DETERMINIS TICK PROGRAM.

00:20:03,990 --> 00:20:14,360
IT TOOK A LONG AMOUNT OF TIME. THE FIRST TIME IT WAS WAITING LIKE -- LIKE

00:20:14,360 --> 00:20:16,960
40% OF THE TIME, SPENDING 6 OH -- 60% ON CPU.

00:20:16,960 --> 00:20:23,050
AND SECOND TIME IT WAS 90% OF THE TIME. AND I ACTUALLY HAD NO IDEA WHY THIS WAS HAPPENING.

00:20:23,050 --> 00:20:25,410
I WROTE THIS PROGRAM, IT WAS LIKE FOUR LINES OF

00:20:25,410 --> 00:20:30,560
CODE, RIGHT? SO WE'RE GOING TO DO OUR FIRST STEP.

00:20:30,560 --> 00:20:35,050
OH, YEAH, WE NEED TO DO A DEMO. THIS IS GOING TO BE FUN.

00:20:35,050 --> 00:20:37,020
OH, NO. OKAY.

00:20:37,020 --> 00:20:44,600
SO WE STARTED OUR PROGRAM. WE TRIED TO GET OUR PASSWORD, RIGHT?

00:20:44,600 --> 00:20:46,160
AND WE'RE GOING TO DO THIS THING WHERE WE LOOK INTO

00:20:46,160 --> 00:20:52,060
THE CONCERN'S SOUL WHILE IT'S WAITING. LET ME...

00:20:52,060 --> 00:20:57,250
MAYBE DO THIS IN A DIFFERENT... WILL YOU WORK?

00:20:57,250 --> 00:21:03,250
WILL YOU TELL ME WHAT IT'S DOING? OKAY.

00:21:03,250 --> 00:21:06,720
THE PROGRAM IS DONE. WE NEED TO START THE PROGRAM AGAIN.

00:21:06,720 --> 00:21:10,530
I SPENT A LOT OF TIME, LIKE, DOING THIS. OKAY.

00:21:10,530 --> 00:21:13,460
SO, WE HAVE LOOKED INTO THE CONCERN'S SOUL AND

00:21:13,460 --> 00:21:18,300
WE'RE SEEING SOME THINGS LIKE, DO WAIT, BLOCK RIGHT

00:21:18,300 --> 00:21:25,450
BEGIN, X4 MARK I KNOW DIRTY, BLOCK RIGHT. IT'S DOING RIGHTS, RIGHT?

00:21:25,450 --> 00:21:27,630
LIKE, I DON'T TOTALLY UNDERSTAND WHAT ALL OF THIS

00:21:27,630 --> 00:21:32,730
MEANS. I KNOW X4 IS FILE SYSTEM AND I KNOW IT'S WRITING.

00:21:32,730 --> 00:21:35,640
THAT'S IT. SO THAT'S GREAT.

00:21:35,640 --> 00:21:38,000
IT'S WRITING STUFF. BUT WHY IS IT TAKING SUCH DIFFERENT AMOUNTS

00:21:38,000 --> 00:21:39,380
OF TIME, RIGHT?

00:21:39,380 --> 00:21:41,630
WHY DOESN'T IT TAKE THE SAME AMOUNT OF TIME EVERY

00:21:41,630 --> 00:21:45,240
TIME? SO I LIKE TO DO THIS A BIT -- WE CAN ACTUALLY

00:21:45,240 --> 00:21:48,150
LOOK AT WHAT THE PROGRAM DOES.

00:21:48,150 --> 00:21:51,640
BECAUSE AT THIS POINT, LIKE, IT'S STILL NOT OBVIOUS

00:21:51,640 --> 00:21:56,780
WHY IT'S SLOW. SO JUST WRITING A WHOLE BUNCH OF STUFF TO

00:21:56,780 --> 00:22:01,620
THE FILE. AND IT DOESN'T ALWAYS TAKE THE SAME META TIME,

00:22:01,620 --> 00:22:04,050
SO NOW WE'RE GOING TO USE SOMETHING CALLED DSTAT,

00:22:04,050 --> 00:22:09,120
WHICH I KIND OF LOVE. IT'S A REALLY GREAT PROGRAM, TELLS YOU HOW

00:22:09,120 --> 00:22:13,050
MUCH STUFF -- IT CAN TELL YOU HOW MUCH STUFF, LIKE,

00:22:13,050 --> 00:22:14,730
YOUR OPERATING SYSTEM IS WRITING TO DISK RIGHT

00:22:14,730 --> 00:22:18,890
NOW. SO I START WRITING DSTAT, I'M NOT DOING A

00:22:18,890 --> 00:22:19,980
LOT, RIGHT?

00:22:19,980 --> 00:22:25,090
AND I START THIS PROGRAM. AND THEN ON THE RIGHT, YOU'RE GOING TO SEE

00:22:25,090 --> 00:22:26,780
DSTAT START TO WRITE A LOT OF DATA.

00:22:26,780 --> 00:22:29,050
ANSWERING 19 MEGABYTES. 42, 42.

00:22:29,050 --> 00:22:34,330
IT'S HAPPENING. WAITING.

00:22:34,330 --> 00:22:40,410
DID THE PROGRAM FINISH? THIS IS THE WORSE.

00:22:40,410 --> 00:22:48,120
I HATE EVERYTHING. LET'S DO IT AGAIN.

00:22:48,120 --> 00:22:51,780
THIS IS WHAT I LOVE ABOUT LIVE DEMOS. YEAH, OKAY.

00:22:51,780 --> 00:22:55,900
SO THE PROGRAM STOPPED. DSTAT IS SHOWING YOU IT'S STILL WRITING STUFF.

00:22:55,900 --> 00:22:59,160
IT'S STILL WRITING. AND NOW IT'S DONE.

00:22:59,160 --> 00:23:01,900
BUT IT KEPT WRITING FOR LIKE FIVE SECONDS AFTER THE

00:23:01,900 --> 00:23:05,062
PROGRAM FINISHED. SO THIS IS LIKE, THE FIRST -- THE PROGRAM

00:23:05,062 --> 00:23:06,800
THOUGHT IT WAS DONE, IT WAS WANT REALLY DONE.

00:23:06,800 --> 00:23:10,570
IT WAS A LIE. THE PROGRAM WAS LYING.

00:23:10,570 --> 00:23:13,480
THIS IS BECAUSE THE OPERATING SYSTEM LOVES US.

00:23:13,480 --> 00:23:16,580
AND WHEN IT WRITES STUFF IT WANTS IT TO BE FAST.

00:23:16,580 --> 00:23:18,970
AND SO WHAT IT DOES, IT'S LIKE, HEY, YOU WROTE A

00:23:18,970 --> 00:23:21,430
WHOLE BUNCH OF STUFF, DON'T WORRY, I'LL TAKE CARE

00:23:21,430 --> 00:23:24,860
OF IT. AND THEN IT CACHES ALL THE THINGS IN MEMORY

00:23:24,860 --> 00:23:28,410
AND YOUR PROGRAM FINISHES, AND ALL RIGHT, IT WRITES

00:23:28,410 --> 00:23:29,960
ALL THE STUFF TO DISK AFTERWARDS.

00:23:29,960 --> 00:23:36,980
THIS IS HOW WRITES WORK BY DEFAULT. YOU CAN SET THEM UP, HEY, DON'T DO WRITES

00:23:36,980 --> 00:23:45,530
-- THEY ACTUALLY WANT TO KNOW THE SYSTEM CRASHES,

00:23:45,530 --> 00:23:47,260
LIKE, THERE WEREN'T A WHOLE BUNCH OF MORE WRITES

00:23:47,260 --> 00:23:52,440
THAT NEEDED TO HAPPEN. SO WHAT WAS HAPPENING BEFORE, I WOULD RUN

00:23:52,440 --> 00:23:55,220
THE PROGRAM, IT WOULD DO SOME WRITES, RIGHT?

00:23:55,220 --> 00:23:58,030
AND RUN THE PROGRAM AGAIN, AND IT WOULD BE LIKE,

00:23:58,030 --> 00:24:00,090
OH, I'M NOT -- I'M STILL -- I'M STILL WRITING STUFF

00:24:00,090 --> 00:24:04,590
FROM THE LAST TIME. AND WOULDN'T BE LIKE READY.

00:24:04,590 --> 00:24:09,820
TAKE WAY LONGER THE SECOND TIME. WHICH IS REALLY AWESOME.

00:24:09,820 --> 00:24:14,520
YEAH. SO WE WON.

00:24:14,520 --> 00:24:20,000
THIS IS EVERYTHING I HAD TO SAY. SO, LIKE, I HOPE THAT I CONVINCED YOU.

00:24:20,000 --> 00:24:22,310
TREATING YOUR PROGRAM AS A BLACK BOX IS AWESOME AND

00:24:22,310 --> 00:24:25,760
SUPER FUN. AND YOU'RE LIKE I'M A OPERATING SYSTEM KERNEL

00:24:25,760 --> 00:24:27,890
HACKER WIZARD. RIGHT?

00:24:27,890 --> 00:24:31,270
THERE ARE A LOT OF REALLY AWESOME TOOLS YOU CAN USE

00:24:31,270 --> 00:24:37,290
TO DO THIS KIND OF WORK. A LOT OF THEM ARE LIKE BUILT INTO YOUR COMPUTER.

00:24:37,290 --> 00:24:42,910
THINGS LIKE DSTAT, RIGHT? /PROC HAS A LOT OF AMAZING STUFF IN IT.

00:24:42,910 --> 00:24:46,030
THE PEERING INTO YOUR KERNEL SOUL'S STACK THING WE

00:24:46,030 --> 00:24:51,550
SAW. YOU HAVE DTRACE WHICH IS AMAZING.

00:24:51,550 --> 00:24:54,450
IF YOU LEARN ABOUT YOUR OPERATING SYSTEM YOU CAN DO

00:24:54,450 --> 00:25:00,380
SO MUCH MORE THAN YOU DID BEFORE. AND DO IT ACROSS ANY PROGRAMMING LANGUAGE.

00:25:00,380 --> 00:25:04,230
IT DOESN'T MATTER PYTHON TO PERL. IT'S THE GREATEST.

00:25:04,230 --> 00:25:08,160
I LEARNED A LOT OF THIS STUFF, IF YOU, LIKE, HAVE A

00:25:08,160 --> 00:25:12,230
JOB AND YOU WANT TO LEARN AWESOME STUFF. YOU CAN QUIT YOUR JOB AND GO TO THE RECUR

00:25:12,230 --> 00:25:15,960
CENTER AND HANGOUT AND LEARN ALL KINDS OF THINGS

00:25:15,960 --> 00:25:18,440
ABOUT PROGRAMMING.

00:25:18,440 --> 00:25:26,910
THIS IS THE KIND OF THING I DID WHEN I WAS THERE.

00:25:26,910 --> 00:25:29,560
[NO AUDIO] AND IF YOU WOULD LIKE ONE, I HAVE A LOT OF

00:25:29,560 --> 00:25:32,260
THEM, AND I WOULD REALLY LIKE YOU TO HAVE ONE.

00:25:32,260 --> 00:25:36,580
THAT'S ALL. [APPLAUSE]

00:25:36,580 --> 00:25:42,940
YEAH. >> THANK YOU.

00:25:42,940 --> 00:25:51,420
>> NO PROBLEM. [MUSIC PLAYING]

00:25:51,420 --> 00:25:53,540

YouTube URL: https://www.youtube.com/watch?v=5v6o-VsLAew


