Title: Raymond Hettinger - Beyond PEP 8 -- Best practices for beautiful intelligible code - PyCon 2015
Publication date: 2015-04-11
Playlist: PyCon 2015
Description: 
	"Speaker: Raymond Hettinger

Distillation of knowledge gained from a decade of Python consulting, Python training, code reviews, and serving as a core developer.   Learn to avoid some of the hazards of the PEP 8 style guide and learn what really matters for creating beautiful intelligible code.



Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:00,000 --> 00:00:06,450
or early afternoon so let's get ready

00:00:04,319 --> 00:00:10,500
for the last talk of this session this

00:00:06,450 --> 00:00:13,920
is Raymond Raymond Hettinger telling us

00:00:10,500 --> 00:00:15,120
about beyond pep 8 how to write best

00:00:13,920 --> 00:00:17,100
practices for beautiful intelligible

00:00:15,120 --> 00:00:19,109
code I was not sure it was possible to

00:00:17,100 --> 00:00:22,560
go beyond pep 8 in beauty so we're going

00:00:19,109 --> 00:00:32,899
to find out how and yeah so here he is

00:00:22,560 --> 00:00:35,190
oh my goodness there's a lot of you I

00:00:32,899 --> 00:00:37,079
actually didn't think anybody would come

00:00:35,190 --> 00:00:38,850
I'm going up against Benjamin Peterson

00:00:37,079 --> 00:00:40,620
who's in the other room so I can presume

00:00:38,850 --> 00:00:43,710
his room is overflowing and that's why

00:00:40,620 --> 00:00:49,469
you're all here how many of you've read

00:00:43,710 --> 00:01:00,960
Pepe how many of you liked Pepe who

00:00:49,469 --> 00:01:02,850
doesn't like Pepe why not that's the

00:01:00,960 --> 00:01:07,020
part I don't like either the line with

00:01:02,850 --> 00:01:10,110
Bart it bugs me why does the line with

00:01:07,020 --> 00:01:12,900
part Barbie you have to wrap your

00:01:10,110 --> 00:01:16,549
comments in 72 characters you have to

00:01:12,900 --> 00:01:20,009
terminate your lines in 79 characters

00:01:16,549 --> 00:01:22,320
when does it bug me one time it bugs me

00:01:20,009 --> 00:01:25,740
is when I'm writing unit tests when I'm

00:01:22,320 --> 00:01:27,570
writing unit tests I have to start with

00:01:25,740 --> 00:01:29,909
the class and then inside the class

00:01:27,570 --> 00:01:31,950
there's a def for tests and then the

00:01:29,909 --> 00:01:34,259
test starts out with a self assert equal

00:01:31,950 --> 00:01:36,000
and by then most of my line is gone so

00:01:34,259 --> 00:01:38,090
by the time I get to any business logic

00:01:36,000 --> 00:01:42,600
and my test I'm near the end of the line

00:01:38,090 --> 00:01:45,810
but what happens if I go over 79

00:01:42,600 --> 00:01:50,840
characters what if I hit eight what if I

00:01:45,810 --> 00:01:50,840
hit 81 what bad thing will happen

00:01:51,860 --> 00:01:56,990
something does bad does happen what is

00:01:54,840 --> 00:01:56,990
it

00:01:59,130 --> 00:02:04,340
that is not the negative consequence I

00:02:01,530 --> 00:02:06,570
have never seen a little puppy die ever

00:02:04,340 --> 00:02:08,819
because we hit 80 characters but

00:02:06,570 --> 00:02:10,979
something dad does happen there's a

00:02:08,819 --> 00:02:13,530
reason I fear it as I start to get up

00:02:10,979 --> 00:02:19,620
around 78 characters and I know I've got

00:02:13,530 --> 00:02:23,819
a few left I get worried why I lose my

00:02:19,620 --> 00:02:30,090
breathability at 82 characters I don't

00:02:23,819 --> 00:02:32,130
buy that no no there's something I

00:02:30,090 --> 00:02:38,640
worried about something bad I know it's

00:02:32,130 --> 00:02:50,340
going to happen Larry Hastings five

00:02:38,640 --> 00:02:54,180
bucks say your answer again sir somebody

00:02:50,340 --> 00:02:56,790
is going to come pep ate me they're

00:02:54,180 --> 00:03:00,660
going to let my coat have it your code

00:02:56,790 --> 00:03:02,910
is non-compliant maybe they'll have an

00:03:00,660 --> 00:03:05,640
import hook so I can't get my code

00:03:02,910 --> 00:03:07,680
checked in maybe after it's in they'll

00:03:05,640 --> 00:03:10,950
come in and say oh Raymond's carry a

00:03:07,680 --> 00:03:12,989
line hit 81 characters I'll pep ate it

00:03:10,950 --> 00:03:15,900
and so while I'm not looking they come

00:03:12,989 --> 00:03:21,019
in and reformat my code so how do they

00:03:15,900 --> 00:03:23,760
get it to be back under 79 characters

00:03:21,019 --> 00:03:25,530
they get office gating now they'll just

00:03:23,760 --> 00:03:27,359
throw in a line break at some really

00:03:25,530 --> 00:03:32,459
awkward point does that make the code

00:03:27,359 --> 00:03:34,650
better it doesn't so I feel the fear as

00:03:32,459 --> 00:03:37,109
it starts to come up this is not a good

00:03:34,650 --> 00:03:39,150
thing how do I deal with my fear because

00:03:37,109 --> 00:03:42,540
I wouldn't want to face this terrible

00:03:39,150 --> 00:03:44,430
ending what do you do I'm feeling some

00:03:42,540 --> 00:03:46,109
pressure and that pressure has nothing

00:03:44,430 --> 00:03:48,720
to do with writing high quality code it

00:03:46,109 --> 00:03:53,549
has to do a vow with avoiding somebody

00:03:48,720 --> 00:03:57,329
who wants to come pepÃ© defy you so what

00:03:53,549 --> 00:03:59,819
do you do you realize maybe I can just

00:03:57,329 --> 00:04:03,150
commit a little atrocity and that way no

00:03:59,819 --> 00:04:05,100
one will ever come paid me so as I start

00:04:03,150 --> 00:04:08,130
to get up my light starts get along I

00:04:05,100 --> 00:04:09,959
like I can save myself some line

00:04:08,130 --> 00:04:11,640
wrapping if I just shorten my variable

00:04:09,959 --> 00:04:14,490
names there

00:04:11,640 --> 00:04:17,010
now it fits into 75 characters and then

00:04:14,490 --> 00:04:22,079
whenever we'll pet bait me is my code

00:04:17,010 --> 00:04:24,300
better or worse worse my recommendation

00:04:22,079 --> 00:04:26,940
for the line length ending outside the

00:04:24,300 --> 00:04:29,160
standard library when you can set your

00:04:26,940 --> 00:04:32,700
own policies is 90 ish

00:04:29,160 --> 00:04:34,530
I picked 90 because 79 tends to be a

00:04:32,700 --> 00:04:37,410
little tight in Python if you're using

00:04:34,530 --> 00:04:39,030
for space and Den's my understanding is

00:04:37,410 --> 00:04:41,430
at Google they had a little war over

00:04:39,030 --> 00:04:45,390
this because at Google they tend to have

00:04:41,430 --> 00:04:47,520
many levels of indentation and if you've

00:04:45,390 --> 00:04:49,830
ended several levels deep and you're

00:04:47,520 --> 00:04:53,070
already close to your line limit there's

00:04:49,830 --> 00:04:55,200
not a lot of room for code so what did

00:04:53,070 --> 00:04:58,650
they do about it I don't know this for

00:04:55,200 --> 00:05:01,860
sure I just had it on rumor their

00:04:58,650 --> 00:05:03,960
solution was I know will indent less to

00:05:01,860 --> 00:05:07,200
space and dense does that make the code

00:05:03,960 --> 00:05:08,820
better no but it fits in seventy-nine

00:05:07,200 --> 00:05:10,620
characters they would rather fit in

00:05:08,820 --> 00:05:12,510
seventy-nine characters and give up the

00:05:10,620 --> 00:05:15,419
intelligibility of that that comes from

00:05:12,510 --> 00:05:17,280
for space indents even a big

00:05:15,419 --> 00:05:20,550
organizations can succumb to the

00:05:17,280 --> 00:05:22,620
temptation to have an atrocity just to

00:05:20,550 --> 00:05:25,050
deal with those nigh on line endings so

00:05:22,620 --> 00:05:27,540
I see 90 in part so that you can use for

00:05:25,050 --> 00:05:31,200
space and Den's but I don't say 90

00:05:27,540 --> 00:05:33,450
exactly I say 90 ish the ish is

00:05:31,200 --> 00:05:35,669
important when you're doing your own

00:05:33,450 --> 00:05:37,860
version of Pepe for your own team what

00:05:35,669 --> 00:05:39,840
you want is as a person's line starts to

00:05:37,860 --> 00:05:42,479
get long for the to start to feel a

00:05:39,840 --> 00:05:44,370
little anxiety to say maybe I should be

00:05:42,479 --> 00:05:47,190
splitting my line maybe I'm doing too

00:05:44,370 --> 00:05:49,410
much in one place use it as a hint that

00:05:47,190 --> 00:05:51,660
they're not doing something great but if

00:05:49,410 --> 00:05:52,979
they start to stroll up near your ending

00:05:51,660 --> 00:05:55,290
and they're going to be a couple

00:05:52,979 --> 00:05:57,540
characters over you'd rather have them

00:05:55,290 --> 00:06:00,479
go a couple characters over then commit

00:05:57,540 --> 00:06:03,120
an atrocity so I put the ish on there as

00:06:00,479 --> 00:06:05,490
your line gets longest you might want to

00:06:03,120 --> 00:06:07,950
think about whether you want to chop it

00:06:05,490 --> 00:06:09,570
into pieces because not only is it

00:06:07,950 --> 00:06:10,919
visually hard to read but you're

00:06:09,570 --> 00:06:16,080
probably putting too many thoughts on

00:06:10,919 --> 00:06:17,610
one line how many of you agree oh this

00:06:16,080 --> 00:06:25,800
is fantastic

00:06:17,610 --> 00:06:27,780
no Pepe zealots in the room I mostly

00:06:25,800 --> 00:06:28,530
love Pepe I think it's extremely

00:06:27,780 --> 00:06:31,560
well-written

00:06:28,530 --> 00:06:33,270
I also think that right at the top where

00:06:31,560 --> 00:06:36,569
it says foolish consistency is the

00:06:33,270 --> 00:06:39,270
hobgoblin of little minds people skip

00:06:36,569 --> 00:06:41,340
right past that part and guess where the

00:06:39,270 --> 00:06:44,909
little minds go right very quickly is to

00:06:41,340 --> 00:06:46,860
Pepe now I'd like to pick on these

00:06:44,909 --> 00:06:49,349
people as if they're not very bright but

00:06:46,860 --> 00:06:51,960
don't freeze it another way I've had a

00:06:49,349 --> 00:06:55,229
job at a cloud computing company once

00:06:51,960 --> 00:06:58,979
where I was hired in for my Python

00:06:55,229 --> 00:07:01,259
skills people are expecting me to be

00:06:58,979 --> 00:07:03,060
really good and then I was asked to do a

00:07:01,259 --> 00:07:04,590
lot of things that didn't involve Python

00:07:03,060 --> 00:07:08,310
skills that I wasn't particularly good

00:07:04,590 --> 00:07:09,810
at and I felt a lot of pressure people

00:07:08,310 --> 00:07:11,969
were paying me a lot of money there were

00:07:09,810 --> 00:07:15,990
expectations for astonishingly good

00:07:11,969 --> 00:07:19,020
things to come out and I didn't know

00:07:15,990 --> 00:07:20,340
exactly what to do at some point your

00:07:19,020 --> 00:07:21,169
career you will feel this sort of

00:07:20,340 --> 00:07:24,210
pressure

00:07:21,169 --> 00:07:27,000
what do you psychologically what do you

00:07:24,210 --> 00:07:28,800
really really want to do you very much

00:07:27,000 --> 00:07:30,029
want to deliver something that your

00:07:28,800 --> 00:07:31,949
employer the people who are working

00:07:30,029 --> 00:07:33,509
around you were going to like something

00:07:31,949 --> 00:07:35,039
that you can check off and said I did

00:07:33,509 --> 00:07:37,710
something productive today that

00:07:35,039 --> 00:07:39,810
everybody thinks is cool so suppose

00:07:37,710 --> 00:07:41,310
there's some low-hanging fruit something

00:07:39,810 --> 00:07:43,379
that you can see that you just say I

00:07:41,310 --> 00:07:45,569
know how to do that do you think there's

00:07:43,379 --> 00:07:48,539
a strong psychological temptation to

00:07:45,569 --> 00:07:53,789
jump for that I know there is because

00:07:48,539 --> 00:07:55,440
I've felt it on a lot of teams sooner or

00:07:53,789 --> 00:07:57,539
later you get a coding problems that are

00:07:55,440 --> 00:07:59,129
hard people have varying levels of skill

00:07:57,539 --> 00:08:00,419
and some people jump right in and seem

00:07:59,129 --> 00:08:03,060
to know what they're doing and others

00:08:00,419 --> 00:08:04,949
struggle a little bit that's natural

00:08:03,060 --> 00:08:06,750
what you want them is the people who are

00:08:04,949 --> 00:08:08,490
struggling a little bit to overcome and

00:08:06,750 --> 00:08:11,250
deal with the problem and at some point

00:08:08,490 --> 00:08:13,949
become very effective how can you

00:08:11,250 --> 00:08:15,419
prevent that get outcome it's easy you

00:08:13,949 --> 00:08:17,940
give them some low-hanging fruit

00:08:15,419 --> 00:08:21,779
something to go do that seems productive

00:08:17,940 --> 00:08:26,690
but is it and one of those things is a

00:08:21,779 --> 00:08:26,690
certain pep located between 7 & 9

00:08:26,850 --> 00:08:31,060
I've done a lot of consulting work I do

00:08:29,470 --> 00:08:33,790
a lot of code reviews for a lot of

00:08:31,060 --> 00:08:36,310
companies I do architectural reviews I

00:08:33,790 --> 00:08:39,400
help teams organize and here's something

00:08:36,310 --> 00:08:40,870
I've seen over and over again the person

00:08:39,400 --> 00:08:43,210
on the team who is struggling the most

00:08:40,870 --> 00:08:45,610
and they might actually be bright but

00:08:43,210 --> 00:08:47,110
they are faced with problems where they

00:08:45,610 --> 00:08:50,910
don't immediately know what to do will

00:08:47,110 --> 00:08:53,950
gravitate to Pepe like a moth to a flame

00:08:50,910 --> 00:08:56,050
they will reach in to your codebase and

00:08:53,950 --> 00:08:57,310
Pepe to five stuff and they can check

00:08:56,050 --> 00:09:00,820
off every day what have you done I

00:08:57,310 --> 00:09:03,940
baited all of these modules did it make

00:09:00,820 --> 00:09:06,010
the codebase better well it might make

00:09:03,940 --> 00:09:07,420
it a visually a little bit prettier but

00:09:06,010 --> 00:09:09,280
it doesn't necessarily make it better

00:09:07,420 --> 00:09:10,780
and in fact the people who wrote the

00:09:09,280 --> 00:09:12,580
code to begin with come back and find

00:09:10,780 --> 00:09:15,190
their code a little bit scrambled and

00:09:12,580 --> 00:09:19,420
when you start to use an SP in blame or

00:09:15,190 --> 00:09:21,070
HG blame or get blame you go back and

00:09:19,420 --> 00:09:23,170
you find the name not of the person who

00:09:21,070 --> 00:09:24,970
made the code but of the person who made

00:09:23,170 --> 00:09:27,850
all of the minor formatting changes and

00:09:24,970 --> 00:09:30,850
it starts to wreck your code history but

00:09:27,850 --> 00:09:33,790
worse we get a lot of op f8 submissions

00:09:30,850 --> 00:09:35,500
to the bug tracker in Python people want

00:09:33,790 --> 00:09:37,780
to contribute to the core in some way

00:09:35,500 --> 00:09:40,450
the problem is the core has been around

00:09:37,780 --> 00:09:43,330
25 years and lots of the easy things to

00:09:40,450 --> 00:09:44,980
be done have already been done so what's

00:09:43,330 --> 00:09:48,100
the easiest way for you to contribute to

00:09:44,980 --> 00:09:51,850
the core if most of the stuff in it is

00:09:48,100 --> 00:09:54,550
done very nicely you could go through

00:09:51,850 --> 00:09:56,200
and Pepe to find it and so you step into

00:09:54,550 --> 00:09:58,090
code that I've been maintaining for the

00:09:56,200 --> 00:10:01,390
last 15 years and you start to rearrange

00:09:58,090 --> 00:10:04,360
it and so we get patches along those

00:10:01,390 --> 00:10:06,130
lines and one thing I've discovered is

00:10:04,360 --> 00:10:07,750
that when these patches come in a person

00:10:06,130 --> 00:10:09,430
is trying to make the code better making

00:10:07,750 --> 00:10:12,430
it Pepe compliant which is not

00:10:09,430 --> 00:10:14,740
necessarily a bad thing but an amazing

00:10:12,430 --> 00:10:18,580
number of times it introduces bugs into

00:10:14,740 --> 00:10:21,190
the code and so I want to caution you

00:10:18,580 --> 00:10:23,260
about that so that's those are the

00:10:21,190 --> 00:10:25,540
downsides of Pepe I'll just get out of

00:10:23,260 --> 00:10:28,420
the way what my worries are about it

00:10:25,540 --> 00:10:30,400
right now worry number one is that you

00:10:28,420 --> 00:10:33,150
end up with code that's beautiful but

00:10:30,400 --> 00:10:35,800
bad we'll take a look at that shortly

00:10:33,150 --> 00:10:38,110
number two you'll have a distraction

00:10:35,800 --> 00:10:39,250
from code quality see what's up on the

00:10:38,110 --> 00:10:41,860
screen here

00:10:39,250 --> 00:10:42,850
this is a rather famous psychological

00:10:41,860 --> 00:10:44,709
experiment

00:10:42,850 --> 00:10:46,569
what you're supposed to do is quickly

00:10:44,709 --> 00:10:49,750
look over these colors and name the

00:10:46,569 --> 00:10:51,610
colors not the word but the color so for

00:10:49,750 --> 00:10:53,500
the very first one you're supposed to

00:10:51,610 --> 00:10:55,660
say green for the second one you're

00:10:53,500 --> 00:10:57,819
supposed to say red for the next one

00:10:55,660 --> 00:10:59,800
you're supposed to say blue and most

00:10:57,819 --> 00:11:02,199
people find it hard to do because the

00:10:59,800 --> 00:11:04,439
word overpowers it and when you start to

00:11:02,199 --> 00:11:06,939
put Pepe in the forefront of your mind

00:11:04,439 --> 00:11:09,639
what happens very much like this

00:11:06,939 --> 00:11:11,199
experiment it causes you to reach for

00:11:09,639 --> 00:11:13,839
something that doesn't improve quote

00:11:11,199 --> 00:11:15,120
quality and an important way could that

00:11:13,839 --> 00:11:16,959
ever happen to you

00:11:15,120 --> 00:11:18,399
it wouldn't happen to you you're an

00:11:16,959 --> 00:11:22,420
experienced developer what happened to

00:11:18,399 --> 00:11:25,480
you now you would never put a form over

00:11:22,420 --> 00:11:28,449
substance it happens all the time it

00:11:25,480 --> 00:11:31,629
happens when we shift our focus I had

00:11:28,449 --> 00:11:33,730
some idea of playing this little video

00:11:31,629 --> 00:11:36,759
here in the background while I go along

00:11:33,730 --> 00:11:38,079
this one is also famous but I don't want

00:11:36,759 --> 00:11:41,290
to belabor the point and what actually

00:11:38,079 --> 00:11:46,389
get into code very quickly so this is

00:11:41,290 --> 00:11:48,309
famous I think it copyright 1999 these

00:11:46,389 --> 00:11:49,449
people are playing basketball what

00:11:48,309 --> 00:11:51,370
you're supposed to do is follow the

00:11:49,449 --> 00:11:53,620
people in the white shirts and count the

00:11:51,370 --> 00:11:57,730
number of times they pass try this for a

00:11:53,620 --> 00:12:00,990
moment count the number of passes okay

00:11:57,730 --> 00:12:03,399
and now handful of people are laughing

00:12:00,990 --> 00:12:05,350
or seeing what you're actually supposed

00:12:03,399 --> 00:12:07,480
to see a gorilla just walk through the

00:12:05,350 --> 00:12:10,300
middle of the scene if you were actually

00:12:07,480 --> 00:12:13,930
counting passes most people by when I

00:12:10,300 --> 00:12:17,319
say most 99 out of 100 will count like

00:12:13,930 --> 00:12:20,079
passes almost correctly and not ever see

00:12:17,319 --> 00:12:23,129
the gorillas so if you get yourself in a

00:12:20,079 --> 00:12:25,779
Pepe ting mode what do you tend to see

00:12:23,129 --> 00:12:27,699
now okay this uh this highlights it

00:12:25,779 --> 00:12:30,910
quite a bit you tend to see the Pepe

00:12:27,699 --> 00:12:32,709
stuff and not what really matters now

00:12:30,910 --> 00:12:36,370
I'm going to do the dangerous part of my

00:12:32,709 --> 00:12:38,829
presentation this year I'm speaking with

00:12:36,370 --> 00:12:41,430
no slides this year I'm speaking with

00:12:38,829 --> 00:12:41,430
Emacs

00:12:44,020 --> 00:12:52,190
wish me luck we're going to confront a

00:12:49,430 --> 00:12:56,270
famous problem in computer science P

00:12:52,190 --> 00:12:59,990
versus NP you guys all know about the P

00:12:56,270 --> 00:13:01,840
versus NP problem I face it every day

00:12:59,990 --> 00:13:03,260
because what do I do for a living I

00:13:01,840 --> 00:13:05,690
train people

00:13:03,260 --> 00:13:08,840
I do code reviews I do architectural

00:13:05,690 --> 00:13:11,960
reviews I help teeth teams organize and

00:13:08,840 --> 00:13:14,240
I face P versus NP every day how many of

00:13:11,960 --> 00:13:18,530
you think P versus NP is a problem in

00:13:14,240 --> 00:13:20,540
computational complexity oh then you

00:13:18,530 --> 00:13:24,260
don't know what this one's about this is

00:13:20,540 --> 00:13:27,770
about pythonic versus non pythonic yeah

00:13:24,260 --> 00:13:30,110
gotcha and what am I about to do I'm

00:13:27,770 --> 00:13:32,720
about to not get glib anymore instead

00:13:30,110 --> 00:13:34,550
I'm going to show you what I do for a

00:13:32,720 --> 00:13:36,170
living I'm going to give away some of my

00:13:34,550 --> 00:13:38,420
bag of tricks hopefully you can

00:13:36,170 --> 00:13:40,400
reproduce this most of the things I'm

00:13:38,420 --> 00:13:42,320
going to show you are taking out a real

00:13:40,400 --> 00:13:44,000
code from client code I've changed some

00:13:42,320 --> 00:13:47,090
of the names a little bit to protect the

00:13:44,000 --> 00:13:49,040
guilty and in a lot of the cases these

00:13:47,090 --> 00:13:52,580
developers who made this code are good

00:13:49,040 --> 00:13:58,880
and these are very smart people so we've

00:13:52,580 --> 00:14:01,340
got some code here fairly short and what

00:13:58,880 --> 00:14:03,860
does it do well we've got a series of

00:14:01,340 --> 00:14:07,340
imports from an SDK that knows how to

00:14:03,860 --> 00:14:09,890
talk to a routing device okay it makes a

00:14:07,340 --> 00:14:13,490
connection to the device gets the

00:14:09,890 --> 00:14:15,680
routing table but if the routing tables

00:14:13,490 --> 00:14:17,240
missing it require logs an exception and

00:14:15,680 --> 00:14:19,490
it doesn't clean up this particular

00:14:17,240 --> 00:14:24,200
connection if you don't clean up on the

00:14:19,490 --> 00:14:26,750
our way out can leave the router in a

00:14:24,200 --> 00:14:28,280
state that's hard to log back into so

00:14:26,750 --> 00:14:30,740
there's some nice handling here in

00:14:28,280 --> 00:14:32,990
addition it determines the size of the

00:14:30,740 --> 00:14:36,530
routing table looks at loops over all of

00:14:32,990 --> 00:14:38,930
the routing offsets for each offset it

00:14:36,530 --> 00:14:40,550
finds the appropriate route then it

00:14:38,930 --> 00:14:43,940
calls the method to get the routes name

00:14:40,550 --> 00:14:45,890
then it gets the IP address and then

00:14:43,940 --> 00:14:49,820
after that it prints out a short little

00:14:45,890 --> 00:14:52,370
report of all of the names of the route

00:14:49,820 --> 00:14:55,250
and their IP addresses and then at the

00:14:52,370 --> 00:14:57,589
end it got commits any changes cleans up

00:14:55,250 --> 00:14:59,959
and disconnects fairly just a

00:14:57,589 --> 00:15:02,240
straightforward little script very close

00:14:59,959 --> 00:15:05,000
to what I have seen in real life any

00:15:02,240 --> 00:15:06,589
questions about what it does I didn't

00:15:05,000 --> 00:15:09,920
think so because that's not the point of

00:15:06,589 --> 00:15:13,310
it is this code beautiful no it's

00:15:09,920 --> 00:15:15,290
beautiful better than ugly yes do we

00:15:13,310 --> 00:15:19,610
have a pip to tell us how to make this

00:15:15,290 --> 00:15:21,410
better should we make it better yes and

00:15:19,610 --> 00:15:24,949
should we get a code review and have

00:15:21,410 --> 00:15:29,600
somebody look at it sure someone headed

00:15:24,949 --> 00:15:32,600
off to the big boss the boss looks it

00:15:29,600 --> 00:15:33,889
over and says hey you know this Moss has

00:15:32,600 --> 00:15:36,199
been taught a little bit about positive

00:15:33,889 --> 00:15:38,329
leadership nice error recovery and

00:15:36,199 --> 00:15:40,100
logging there Raymond I really saw I saw

00:15:38,329 --> 00:15:42,050
a script one time that didn't log out

00:15:40,100 --> 00:15:44,630
the errors and didn't do any recovery

00:15:42,050 --> 00:15:46,279
that was a great job

00:15:44,630 --> 00:15:48,709
you should clean up the code formatting

00:15:46,279 --> 00:15:50,540
this a little rough of my eyes did oh by

00:15:48,709 --> 00:15:51,500
the way after you've polished it up a

00:15:50,540 --> 00:15:53,269
little bit should we use this as a

00:15:51,500 --> 00:15:55,310
template so that we can make lots of

00:15:53,269 --> 00:15:56,209
other scripts just like this which is a

00:15:55,310 --> 00:15:58,670
reasonable question

00:15:56,209 --> 00:16:00,620
gee thanks the boss how do you like the

00:15:58,670 --> 00:16:02,779
positive leadership there little nudge

00:16:00,620 --> 00:16:04,910
to clean up the code but basically good

00:16:02,779 --> 00:16:09,699
job and I'd like to lose your code as a

00:16:04,910 --> 00:16:09,699
model so I'm going to go clean it up

00:16:09,790 --> 00:16:17,449
let's see this is a P versus NP to dot

00:16:15,050 --> 00:16:19,220
dy by the way I'll give you all this

00:16:17,449 --> 00:16:21,740
code but it's the code is not

00:16:19,220 --> 00:16:28,459
necessarily the point what would Pepe

00:16:21,740 --> 00:16:32,300
say about these imports why not just put

00:16:28,459 --> 00:16:34,790
them on separate lines in fact a lot of

00:16:32,300 --> 00:16:37,970
people go as far as alphabetizing their

00:16:34,790 --> 00:16:40,160
imports that is actually important if

00:16:37,970 --> 00:16:42,620
you have dozens of imports if you have

00:16:40,160 --> 00:16:45,230
three or four or five alphabetizing them

00:16:42,620 --> 00:16:48,500
is a kind of a waste of a time doesn't

00:16:45,230 --> 00:16:50,750
it already look better okay one of the

00:16:48,500 --> 00:16:52,670
things that uh Pepe will tell us is to

00:16:50,750 --> 00:16:54,380
put a space and let us I either side of

00:16:52,670 --> 00:16:56,029
the equal sign keep in mind these

00:16:54,380 --> 00:16:57,620
conventions vary from language to

00:16:56,029 --> 00:16:59,449
language in some languages you don't

00:16:57,620 --> 00:17:01,819
tend to put spaces on the outside of

00:16:59,449 --> 00:17:03,020
equal sign in some languages it is very

00:17:01,819 --> 00:17:05,240
common to put space

00:17:03,020 --> 00:17:08,720
around the upper entha cease to Python

00:17:05,240 --> 00:17:11,450
people this looks weird the spacing here

00:17:08,720 --> 00:17:14,030
looks a little strange so what I'm going

00:17:11,450 --> 00:17:17,020
to do is put in a get my network element

00:17:14,030 --> 00:17:21,950
and then go ahead and tighten up the

00:17:17,020 --> 00:17:42,880
try/except and else the job it doesn't

00:17:21,950 --> 00:17:44,870
have odd spacing inside feb 8 2015 3

00:17:42,880 --> 00:17:48,710
better off without it

00:17:44,870 --> 00:17:50,390
now we know we have an exception when we

00:17:48,710 --> 00:17:52,520
tried to get the routing table so you

00:17:50,390 --> 00:17:55,040
already know it's a table fault if

00:17:52,520 --> 00:17:58,160
you're logging it you already know that

00:17:55,040 --> 00:18:03,050
you're recording it now this gratuitous

00:17:58,160 --> 00:18:06,020
switching of quote characters people

00:18:03,050 --> 00:18:08,090
used to really love double quotes I

00:18:06,020 --> 00:18:10,070
don't know why oh it's because they were

00:18:08,090 --> 00:18:12,200
coding in C and then switching over to

00:18:10,070 --> 00:18:14,270
Python single quotes are easy to type

00:18:12,200 --> 00:18:16,460
you should basically model after what

00:18:14,270 --> 00:18:19,220
the reppers and the python do that

00:18:16,460 --> 00:18:21,310
represents our best practice that said

00:18:19,220 --> 00:18:23,750
double quotes are making a comeback why

00:18:21,310 --> 00:18:26,750
because people are starting to type JSON

00:18:23,750 --> 00:18:28,520
directly into their code and you start

00:18:26,750 --> 00:18:31,490
typing a little JSON suddenly everything

00:18:28,520 --> 00:18:33,890
starts to look like Jace all by the way

00:18:31,490 --> 00:18:34,640
say it with a long o J song which is

00:18:33,890 --> 00:18:38,240
kind of cool

00:18:34,640 --> 00:18:41,750
J son is a person which a song it's a

00:18:38,240 --> 00:18:45,590
file format alright so I'll clean this

00:18:41,750 --> 00:18:46,430
up with rollback which is part of the

00:18:45,590 --> 00:18:48,860
API

00:18:46,430 --> 00:18:52,910
it's a code already starting to look a

00:18:48,860 --> 00:18:58,430
little better on the eyes it will be pep

00:18:52,910 --> 00:19:00,470
8 compliant momentarily possibly I'll

00:18:58,430 --> 00:19:05,540
introduce some typos along the way which

00:19:00,470 --> 00:19:08,590
is a fact a risk of Pepe ting and we'll

00:19:05,540 --> 00:19:08,590
put some spaces in here

00:19:10,870 --> 00:19:15,890
and evaluate the code quality and I

00:19:14,630 --> 00:19:19,220
think you're going to find it to be

00:19:15,890 --> 00:19:21,320
dramatically more readable just remember

00:19:19,220 --> 00:19:23,750
there's a lot of things about pep 8 I

00:19:21,320 --> 00:19:25,910
like I don't dig the line endings don't

00:19:23,750 --> 00:19:29,840
get me wrong but everything else mostly

00:19:25,910 --> 00:19:32,300
is little space hereafter inside the

00:19:29,840 --> 00:19:35,990
tupple like a common space just like you

00:19:32,300 --> 00:19:41,330
would do in English and I think commit

00:19:35,990 --> 00:19:44,720
says lock-in changes pretty well and now

00:19:41,330 --> 00:19:45,380
you have code that I think looks pretty

00:19:44,720 --> 00:19:48,080
darn good

00:19:45,380 --> 00:19:52,580
is it was it worthwhile for me to pepe

00:19:48,080 --> 00:19:57,080
defy this code who should do it the

00:19:52,580 --> 00:20:02,480
intern the most senior person on this

00:19:57,080 --> 00:20:05,450
team the author that's the golden rule

00:20:02,480 --> 00:20:06,550
of Pepe Pepe done to thyself not unto

00:20:05,450 --> 00:20:09,260
others

00:20:06,550 --> 00:20:11,870
Pepe tis not a weapon for beating other

00:20:09,260 --> 00:20:14,630
people in the head it's a style guide a

00:20:11,870 --> 00:20:16,760
guide not a law book and if you read

00:20:14,630 --> 00:20:18,710
Pepe and internalize it you will tend to

00:20:16,760 --> 00:20:20,480
make more beautiful code but if you

00:20:18,710 --> 00:20:24,260
treat it as a law book it will come to

00:20:20,480 --> 00:20:26,990
ruin your life also there was some weird

00:20:24,260 --> 00:20:31,490
indentation in here and inconsistent

00:20:26,990 --> 00:20:33,830
Python allows that but now that

00:20:31,490 --> 00:20:35,510
everything lines up in line better I

00:20:33,830 --> 00:20:36,980
think the logic of this is more

00:20:35,510 --> 00:20:41,060
transparent how many of you like this

00:20:36,980 --> 00:20:44,750
code a lot better how many of you would

00:20:41,060 --> 00:20:46,280
let me check it in oh well I have you

00:20:44,750 --> 00:20:48,020
haven't seen the unit test on it okay

00:20:46,280 --> 00:20:50,960
there's unit tests and Docs now how

00:20:48,020 --> 00:20:54,380
would you let me check it in okay good

00:20:50,960 --> 00:20:56,870
and this code is not hard it is

00:20:54,380 --> 00:20:59,210
straightforward python is a remarkably

00:20:56,870 --> 00:21:02,660
good language in terms of communicating

00:20:59,210 --> 00:21:09,590
ideas and I think it is a it leads to

00:21:02,660 --> 00:21:12,340
fairly clean code you guys didn't see

00:21:09,590 --> 00:21:12,340
the gorilla did you

00:21:12,710 --> 00:21:15,830
what's that

00:21:30,500 --> 00:21:37,630
oh yeah the indentations a little off on

00:21:32,870 --> 00:21:40,640
the for-loop that'll make it better you

00:21:37,630 --> 00:21:43,549
guys are still counting passes not a

00:21:40,640 --> 00:21:54,289
single one of you is seeing the gorilla

00:21:43,549 --> 00:21:56,299
in the room what's up I'm giving away my

00:21:54,289 --> 00:21:57,950
bag of tricks I'm going to show you what

00:21:56,299 --> 00:21:59,600
I do for a living when I go to help out

00:21:57,950 --> 00:22:01,940
teams I got to start to look through

00:21:59,600 --> 00:22:04,309
their code and I don't want to fix their

00:22:01,940 --> 00:22:06,080
broken code I teach them about unit

00:22:04,309 --> 00:22:08,179
testing and I presume that they know

00:22:06,080 --> 00:22:10,130
their field of expertise well what is

00:22:08,179 --> 00:22:12,260
very common though is people write code

00:22:10,130 --> 00:22:14,510
like this one because it's an obvious

00:22:12,260 --> 00:22:16,370
thing to do number two it's an

00:22:14,510 --> 00:22:18,559
incremental style of development you at

00:22:16,370 --> 00:22:19,850
you get the routing table then you see

00:22:18,559 --> 00:22:21,620
an exception and you go and add

00:22:19,850 --> 00:22:23,299
something in but there's a part of the

00:22:21,620 --> 00:22:25,970
people playing out that people miss and

00:22:23,299 --> 00:22:29,480
it's very easy to miss because there's a

00:22:25,970 --> 00:22:33,500
problem here that seems at first like

00:22:29,480 --> 00:22:37,250
it's beyond your control this API

00:22:33,500 --> 00:22:38,990
came from Java and I don't mean Java

00:22:37,250 --> 00:22:41,990
asked in a pejorative sort of way in

00:22:38,990 --> 00:22:44,480
fact there was an API for this SDK

00:22:41,990 --> 00:22:46,730
written in Java and an automated

00:22:44,480 --> 00:22:48,500
conversion tool converted the Java

00:22:46,730 --> 00:22:50,150
bindings to Python bindings so that

00:22:48,500 --> 00:22:52,280
people could write this Python code

00:22:50,150 --> 00:22:54,590
which is why although the naming

00:22:52,280 --> 00:22:57,350
conventions here look Java esque they

00:22:54,590 --> 00:23:02,270
get routing a table it's why the code

00:22:57,350 --> 00:23:04,610
reads like Java and Java properly

00:23:02,270 --> 00:23:09,520
written looks very close to this and

00:23:04,610 --> 00:23:09,520
Java is a pretty decent language but

00:23:10,720 --> 00:23:14,480
none of you've ever been dating my talks

00:23:12,919 --> 00:23:20,470
before what you're supposed to say right

00:23:14,480 --> 00:23:23,330
right now ready ah who was that

00:23:20,470 --> 00:23:26,559
there you go there must be a better way

00:23:23,330 --> 00:23:26,559
here you guys ready ready

00:23:28,240 --> 00:23:36,549
there is a better way far better way

00:23:31,860 --> 00:23:44,639
let's try this with open no I should

00:23:36,549 --> 00:23:56,499
probably do a from net tools import

00:23:44,639 --> 00:23:58,690
network element with Network I'll cheat

00:23:56,499 --> 00:24:03,490
doing live coding is incredibly

00:23:58,690 --> 00:24:12,009
dangerous how many of you make sound

00:24:03,490 --> 00:24:18,360
effects when you type as in e for route

00:24:12,009 --> 00:24:18,360
in any routing table

00:24:22,390 --> 00:24:25,049
gee

00:24:29,740 --> 00:24:34,990
oh yeah we missed that in our Pepe ting

00:24:32,230 --> 00:24:36,850
up here p.m. spacing is very important

00:24:34,990 --> 00:24:42,580
around operators that's essential for

00:24:36,850 --> 00:24:44,380
code quality this code does the same

00:24:42,580 --> 00:24:50,350
thing which code is better the code on

00:24:44,380 --> 00:24:53,620
the top of the bottle one of my big

00:24:50,350 --> 00:24:55,720
problems with Pepe is not the pep itself

00:24:53,620 --> 00:24:58,539
it's extremely well written the ideas in

00:24:55,720 --> 00:25:00,190
it are good it's stuff you should do one

00:24:58,539 --> 00:25:02,710
of my issues with it is the effect on

00:25:00,190 --> 00:25:04,960
the human mind and when you get people

00:25:02,710 --> 00:25:07,149
to focus on Pepe what they do is count

00:25:04,960 --> 00:25:09,100
the number of basketball passes they

00:25:07,149 --> 00:25:11,169
read the name of the color instead of

00:25:09,100 --> 00:25:13,110
looking at the color and they don't

00:25:11,169 --> 00:25:15,940
address that P versus NP problem

00:25:13,110 --> 00:25:19,870
pythonic versus python on on python a

00:25:15,940 --> 00:25:22,960
the code at the top is non pythonic the

00:25:19,870 --> 00:25:24,309
code at the bottom is pythonic there's

00:25:22,960 --> 00:25:30,340
only one problem the code at the bottom

00:25:24,309 --> 00:25:34,570
doesn't run it won't work but other than

00:25:30,340 --> 00:25:37,210
that is really good code why won't it

00:25:34,570 --> 00:25:38,860
work because the entire API was

00:25:37,210 --> 00:25:40,840
developed in Java the rapine found

00:25:38,860 --> 00:25:45,100
bindings for it that require you do your

00:25:40,840 --> 00:25:49,360
imports like this do we have packages up

00:25:45,100 --> 00:25:53,110
here dot this dot that packages not a

00:25:49,360 --> 00:25:55,000
honking good idea when do we you need

00:25:53,110 --> 00:25:56,620
packages you need packages when you have

00:25:55,000 --> 00:25:59,470
an enormous amount of code with

00:25:56,620 --> 00:26:02,350
potential name place namespace conflicts

00:25:59,470 --> 00:26:04,840
between the area of the various parts if

00:26:02,350 --> 00:26:07,960
your code is not enormous for the most

00:26:04,840 --> 00:26:10,779
part you don't need the dots in packages

00:26:07,960 --> 00:26:13,570
at all that is becoming widely overused

00:26:10,779 --> 00:26:15,220
in Python it was appropriately used in

00:26:13,570 --> 00:26:16,960
the XML libraries because we have

00:26:15,220 --> 00:26:19,210
several XML libraries where they're

00:26:16,960 --> 00:26:21,549
conflicting package name our module

00:26:19,210 --> 00:26:23,529
names if you don't have that all you're

00:26:21,549 --> 00:26:27,240
doing is making your imports harder on

00:26:23,529 --> 00:26:29,860
the user and in fact in the real example

00:26:27,240 --> 00:26:31,659
where this code was derived from there

00:26:29,860 --> 00:26:34,240
were about 20 lines of imports and all

00:26:31,659 --> 00:26:38,500
of them had dot this dot that this is

00:26:34,240 --> 00:26:40,240
actually nicer than that code so the

00:26:38,500 --> 00:26:41,950
code at the bottom is profoundly better

00:26:40,240 --> 00:26:45,640
it's pythonic

00:26:41,950 --> 00:26:48,250
way better what all is going wrong here

00:26:45,640 --> 00:26:49,990
one is every time you connect to one of

00:26:48,250 --> 00:26:52,960
these devices you're going to need to do

00:26:49,990 --> 00:26:55,330
cleanups or rollbacks that should be

00:26:52,960 --> 00:26:58,930
factored out well-written Python code

00:26:55,330 --> 00:27:04,180
looks like business logic my question is

00:26:58,930 --> 00:27:06,550
how do we transform the API itself so

00:27:04,180 --> 00:27:08,050
that we can write this sort of thing I'm

00:27:06,550 --> 00:27:10,420
going to teach you to prefer a number of

00:27:08,050 --> 00:27:13,990
things when they're recurring set up and

00:27:10,420 --> 00:27:16,270
try to a teardown logic you should build

00:27:13,990 --> 00:27:18,550
a context manager so that you can use a

00:27:16,270 --> 00:27:19,360
with statement with this where there are

00:27:18,550 --> 00:27:22,510
packages

00:27:19,360 --> 00:27:24,580
you should make a single module that

00:27:22,510 --> 00:27:26,890
makes it easier to import everything so

00:27:24,580 --> 00:27:30,490
that the code can now become beautiful

00:27:26,890 --> 00:27:33,310
where somebody is getting the number of

00:27:30,490 --> 00:27:36,960
elements looping over a range and

00:27:33,310 --> 00:27:38,830
looking up and something by index

00:27:36,960 --> 00:27:40,900
there's a couple things that should

00:27:38,830 --> 00:27:43,330
change there's a name for this in Python

00:27:40,900 --> 00:27:46,120
is the Lin function so you should define

00:27:43,330 --> 00:27:48,400
a dunder tool in there's a way in Python

00:27:46,120 --> 00:27:50,200
to get something by index it's called

00:27:48,400 --> 00:27:53,680
square brackets and it's very readable

00:27:50,200 --> 00:27:55,150
and beautiful there's so you should

00:27:53,680 --> 00:27:57,100
actually know if you have method names

00:27:55,150 --> 00:27:59,320
like this is a hint that you're doing it

00:27:57,100 --> 00:28:00,760
wrong you're coming from a line you're

00:27:59,320 --> 00:28:02,140
bringing in your experience from a

00:28:00,760 --> 00:28:05,440
language that doesn't have these

00:28:02,140 --> 00:28:07,890
capabilities but in Python anything

00:28:05,440 --> 00:28:10,510
where you can look something up by index

00:28:07,890 --> 00:28:13,750
that raises index error when you go too

00:28:10,510 --> 00:28:16,390
far and that you could do a length on is

00:28:13,750 --> 00:28:20,980
known as a sequence strings or sequences

00:28:16,390 --> 00:28:23,050
Unicode is our sequences list for

00:28:20,980 --> 00:28:24,370
sequences tuples or sequences decks or

00:28:23,050 --> 00:28:26,500
sequences are there a lot of these

00:28:24,370 --> 00:28:27,700
things in Python yes

00:28:26,500 --> 00:28:30,550
and they all have one thing in common

00:28:27,700 --> 00:28:32,470
they're iterable which means you

00:28:30,550 --> 00:28:34,960
shouldn't loop over stuff like this or

00:28:32,470 --> 00:28:37,900
you shouldn't have to you just loop

00:28:34,960 --> 00:28:40,120
directly over it up here we did a get

00:28:37,900 --> 00:28:42,100
routing table I'd like to teach you a

00:28:40,120 --> 00:28:45,460
very strong preference for properties in

00:28:42,100 --> 00:28:47,080
your api getters and setters or what you

00:28:45,460 --> 00:28:49,270
do in languages where you don't have

00:28:47,080 --> 00:28:52,060
descriptors you have to do it in those

00:28:49,270 --> 00:28:55,149
languages if you design classes in Java

00:28:52,060 --> 00:28:57,330
and in C++ and you don't make getters

00:28:55,149 --> 00:28:59,950
for your attribute you're incompetent

00:28:57,330 --> 00:29:01,659
you're creating code that is going to be

00:28:59,950 --> 00:29:03,429
very difficult to maintain if people

00:29:01,659 --> 00:29:05,139
start using that API and you have to

00:29:03,429 --> 00:29:07,929
change access to the attribute you won't

00:29:05,139 --> 00:29:10,379
be able to so that is a strong rule in

00:29:07,929 --> 00:29:12,609
those languages does it apply in Python

00:29:10,379 --> 00:29:15,039
we don't make getters and setters why

00:29:12,609 --> 00:29:18,009
not because we can put properties in

00:29:15,039 --> 00:29:19,839
after the fact if we need to a getter

00:29:18,009 --> 00:29:23,019
and setter is a hint that you're doing

00:29:19,839 --> 00:29:25,210
it wrong in a Python so the more

00:29:23,019 --> 00:29:27,999
pythonic way is dot routing table

00:29:25,210 --> 00:29:30,759
likewise getname is replaced with dot

00:29:27,999 --> 00:29:33,039
name and even if these actually do have

00:29:30,759 --> 00:29:34,989
underlying API calls and even they

00:29:33,039 --> 00:29:37,239
aren't attributes we make them look like

00:29:34,989 --> 00:29:39,820
attributes through properties the second

00:29:37,239 --> 00:29:42,700
piece of code is a lot easier to write

00:29:39,820 --> 00:29:44,830
its main easy to maintain and it's easy

00:29:42,700 --> 00:29:46,809
to make a lot of variants of it remember

00:29:44,830 --> 00:29:48,249
the big boss asked us can we use this as

00:29:46,809 --> 00:29:50,619
a template so we can make lots of other

00:29:48,249 --> 00:29:53,710
code just like this the one on the

00:29:50,619 --> 00:29:56,229
bottom yes the one on the top will cause

00:29:53,710 --> 00:29:59,229
problems in your organization and that's

00:29:56,229 --> 00:30:00,729
what I mean by beyond Pepe beyond Pepe

00:29:59,229 --> 00:30:02,289
is paying attention to the things that

00:30:00,729 --> 00:30:05,710
really matter using the language

00:30:02,289 --> 00:30:08,019
features using the square brackets using

00:30:05,710 --> 00:30:10,479
the Len function using the magic methods

00:30:08,019 --> 00:30:12,580
using the context managers using

00:30:10,479 --> 00:30:14,679
properties and not coding like your Java

00:30:12,580 --> 00:30:16,599
programmer because in some ways there is

00:30:14,679 --> 00:30:19,389
nothing wrong with this code it works

00:30:16,599 --> 00:30:21,729
and it's readable on the other hand I

00:30:19,389 --> 00:30:25,469
think you can agree with me that they

00:30:21,729 --> 00:30:31,389
code on the bottom is profoundly better

00:30:25,469 --> 00:30:38,019
how many of you agree sweet all right P

00:30:31,389 --> 00:30:43,869
versus NP mp3 though that's the result P

00:30:38,019 --> 00:30:46,019
versus NP for how did I achieve all of

00:30:43,869 --> 00:30:46,019
this

00:30:48,630 --> 00:30:52,500
never do live demos

00:30:58,880 --> 00:31:03,799
it's certainly not with Emacs what could

00:31:02,779 --> 00:31:14,330
possibly go wrong

00:31:03,799 --> 00:31:17,210
P versus NP Oh so their school for we

00:31:14,330 --> 00:31:18,620
need small our type size their line

00:31:17,210 --> 00:31:24,350
links don't matter as long as you can

00:31:18,620 --> 00:31:25,820
shrink your type size what is pythonic

00:31:24,350 --> 00:31:27,799
the P problem

00:31:25,820 --> 00:31:29,269
it means coding beautifully in harmony

00:31:27,799 --> 00:31:31,789
with the language to get the maximum

00:31:29,269 --> 00:31:34,429
benefits from other language what is our

00:31:31,789 --> 00:31:35,990
goal here our goal is something I hope

00:31:34,429 --> 00:31:39,230
I've just given you a deep lesson for

00:31:35,990 --> 00:31:41,779
how to recognize non ponic pythonic AP

00:31:39,230 --> 00:31:44,210
is once we Pepe did that code it would

00:31:41,779 --> 00:31:46,009
pass most people's uh coding standards

00:31:44,210 --> 00:31:47,419
it would get checked in and it would

00:31:46,009 --> 00:31:50,029
live for a long time and other people

00:31:47,419 --> 00:31:51,799
would copy that style and we would all

00:31:50,029 --> 00:31:54,139
congratulate ourselves we're being Pepe

00:31:51,799 --> 00:31:56,779
compliant and there's nothing wrong with

00:31:54,139 --> 00:31:59,629
being Pepe compliant what is our all

00:31:56,779 --> 00:32:01,909
wrong is ignoring the gorilla which is

00:31:59,629 --> 00:32:04,399
uh what is pythonic if you accomplish

00:32:01,909 --> 00:32:07,460
being able to recognize law non pythonic

00:32:04,399 --> 00:32:11,120
code then this was worth a trip up to

00:32:07,460 --> 00:32:14,509
Canada so what do you do if you're given

00:32:11,120 --> 00:32:14,990
an API that's terrible there's a pattern

00:32:14,509 --> 00:32:17,450
for it

00:32:14,990 --> 00:32:19,639
there's an entire design pattern for it

00:32:17,450 --> 00:32:22,309
it's known as the adapter pattern we'll

00:32:19,639 --> 00:32:24,710
write an adapter class what should we do

00:32:22,309 --> 00:32:26,929
we should avoid unnecessary packaging in

00:32:24,710 --> 00:32:28,549
favor of simpler imports if your users

00:32:26,929 --> 00:32:30,259
are having to type dots all the time

00:32:28,549 --> 00:32:34,399
when they import things you're doing it

00:32:30,259 --> 00:32:38,059
wrong there very few needs for dots and

00:32:34,399 --> 00:32:40,070
packages in the world they do come up

00:32:38,059 --> 00:32:42,110
occasionally those were introduced to

00:32:40,070 --> 00:32:43,909
solve a very particular problem but now

00:32:42,110 --> 00:32:45,710
everybody and his brother is making a

00:32:43,909 --> 00:32:47,480
package every time they write even the

00:32:45,710 --> 00:32:49,879
smallest amount of code and that's an

00:32:47,480 --> 00:32:52,279
atrocity another thing you should do is

00:32:49,879 --> 00:32:54,500
create custom exceptions in your

00:32:52,279 --> 00:32:56,659
application custom exceptions could let

00:32:54,500 --> 00:32:59,059
you give a name to a problem that's very

00:32:56,659 --> 00:33:02,659
clear that tells a person what the error

00:32:59,059 --> 00:33:04,250
is we've already mentioned using

00:33:02,659 --> 00:33:06,860
properties instead of getter methods

00:33:04,250 --> 00:33:09,379
creating context managers and using

00:33:06,860 --> 00:33:11,570
magic methods in a retro for debug

00:33:09,379 --> 00:33:12,380
ability actually I didn't mention the

00:33:11,570 --> 00:33:14,150
wrapper before

00:33:12,380 --> 00:33:16,040
but get in the habit of putting reppers

00:33:14,150 --> 00:33:17,300
on your classes it makes debugging so

00:33:16,040 --> 00:33:21,110
much easier when you have something

00:33:17,300 --> 00:33:23,390
beautiful to look at so what did I do

00:33:21,110 --> 00:33:26,120
at the top here I started with the API

00:33:23,390 --> 00:33:29,900
as given the JSON tools element are

00:33:26,120 --> 00:33:32,540
jaynette tool network element but then I

00:33:29,900 --> 00:33:36,980
built my own exception not hard to do

00:33:32,540 --> 00:33:39,380
it's a one-liner in Python now I create

00:33:36,980 --> 00:33:41,660
a new class a network element not the

00:33:39,380 --> 00:33:43,490
original Network element but my new one

00:33:41,660 --> 00:33:45,620
and what it's going to do is wrap the

00:33:43,490 --> 00:33:48,200
underlying object so when we create it

00:33:45,620 --> 00:33:50,540
from an IP address what it does is call

00:33:48,200 --> 00:33:54,260
out go out and call the original code

00:33:50,540 --> 00:33:56,060
and saves it as the old network element

00:33:54,260 --> 00:33:59,090
in other words that what the adapter

00:33:56,060 --> 00:34:01,940
does is take the bad API and give you an

00:33:59,090 --> 00:34:05,030
adapter to the good API so think of our

00:34:01,940 --> 00:34:07,220
power adapter when I go to the UK they

00:34:05,030 --> 00:34:09,409
have these big honkin plugs I thought it

00:34:07,220 --> 00:34:11,300
was kind of crazy why they have why

00:34:09,409 --> 00:34:14,149
would you have huge blogs Americans

00:34:11,300 --> 00:34:14,810
don't need them and then I went to make

00:34:14,149 --> 00:34:18,190
some tea

00:34:14,810 --> 00:34:21,830
oh the pots of water boil twice as fast

00:34:18,190 --> 00:34:24,679
it's not just 220 volts 220 volts at 15

00:34:21,830 --> 00:34:26,870
amps you can boil a kettle of tea like

00:34:24,679 --> 00:34:28,580
that then I started to appreciate it

00:34:26,870 --> 00:34:31,310
what did I need to Jack in my computer

00:34:28,580 --> 00:34:35,000
though I needed an adapter I needed to

00:34:31,310 --> 00:34:38,270
take my American API plug it in to the

00:34:35,000 --> 00:34:41,210
UK API that's what we're doing here this

00:34:38,270 --> 00:34:43,879
part is the UK API and this part is

00:34:41,210 --> 00:34:45,440
going to be our API and essentially what

00:34:43,879 --> 00:34:48,250
we did here was when there was an

00:34:45,440 --> 00:34:50,570
exception we pushed it down into our API

00:34:48,250 --> 00:34:52,760
ideally you don't want all of your

00:34:50,570 --> 00:34:55,040
business logic to be cluttered with

00:34:52,760 --> 00:34:56,810
error handling logic for the most part

00:34:55,040 --> 00:34:59,690
in Python exceptions lets you push that

00:34:56,810 --> 00:35:01,430
logic down wrap that sort of stuff so

00:34:59,690 --> 00:35:04,460
that in the end your business logic is

00:35:01,430 --> 00:35:06,350
clear and floats to the top so I'm

00:35:04,460 --> 00:35:08,720
putting it inside the lookup of the

00:35:06,350 --> 00:35:10,910
routing table rather than outside and

00:35:08,720 --> 00:35:13,100
when I catch the exception missing ver

00:35:10,910 --> 00:35:15,770
which is uninformative I replace it with

00:35:13,100 --> 00:35:17,930
an informative exception a great reason

00:35:15,770 --> 00:35:20,300
to wrap is to replace crummy error

00:35:17,930 --> 00:35:22,820
messages with good error messages that's

00:35:20,300 --> 00:35:25,620
a good message and a good exception name

00:35:22,820 --> 00:35:28,950
but also I put a property on it and

00:35:25,620 --> 00:35:33,120
why over on the right we can do routing

00:35:28,950 --> 00:35:35,460
table the other thing I did was put a

00:35:33,120 --> 00:35:37,770
context manager in it the gender enter

00:35:35,460 --> 00:35:40,170
and enter exit over here on the right

00:35:37,770 --> 00:35:42,900
there is setup logic every time you

00:35:40,170 --> 00:35:44,760
connect to this network element you're

00:35:42,900 --> 00:35:47,640
going to have to potentially if there's

00:35:44,760 --> 00:35:50,790
an exception log the exception and clean

00:35:47,640 --> 00:35:52,620
up if they're on the other hand you will

00:35:50,790 --> 00:35:56,130
don't want to do a commit and a

00:35:52,620 --> 00:36:00,300
disconnect over here I put that logic in

00:35:56,130 --> 00:36:02,490
the exit and the exit says hey if we had

00:36:00,300 --> 00:36:05,820
a network element error let's log it out

00:36:02,490 --> 00:36:07,830
and roll back all the work otherwise

00:36:05,820 --> 00:36:12,150
let's go ahead and do a commit and then

00:36:07,830 --> 00:36:14,250
disconnect by factoring this out every

00:36:12,150 --> 00:36:16,530
time I use this network element I can

00:36:14,250 --> 00:36:18,900
use width and all of that setup and

00:36:16,530 --> 00:36:21,090
teardown logic has been done exactly one

00:36:18,900 --> 00:36:23,160
time for me the code is far clearer on

00:36:21,090 --> 00:36:24,900
the right if we push this logic down a

00:36:23,160 --> 00:36:27,420
little bit the rubber will make this

00:36:24,900 --> 00:36:29,970
thing easy to debug okay this is good

00:36:27,420 --> 00:36:32,490
technique don't hardwire the name of the

00:36:29,970 --> 00:36:35,550
class network element every class knows

00:36:32,490 --> 00:36:37,380
its own name well we already know in

00:36:35,550 --> 00:36:39,390
advance the name is network element

00:36:37,380 --> 00:36:44,190
why would I parameterize this what's the

00:36:39,390 --> 00:36:45,480
advantage Larry subclassing because if

00:36:44,190 --> 00:36:47,280
you subclass the name of the class

00:36:45,480 --> 00:36:50,730
changes and you want your subclass or to

00:36:47,280 --> 00:36:53,370
be able to use your repre the network

00:36:50,730 --> 00:36:55,710
element is now much better we call it

00:36:53,370 --> 00:36:58,140
with the IP address it returns a network

00:36:55,710 --> 00:37:00,540
element it does the inter exit it looks

00:36:58,140 --> 00:37:03,840
pretty and we can do a dot routing table

00:37:00,540 --> 00:37:06,240
on it notice I didn't actually do any

00:37:03,840 --> 00:37:09,210
business logic inside this adapter code

00:37:06,240 --> 00:37:11,490
all I did is transform bad API to good

00:37:09,210 --> 00:37:13,770
API it's like the adapter from my power

00:37:11,490 --> 00:37:15,750
paw socket it doesn't change the amount

00:37:13,770 --> 00:37:17,960
of power going through it just changes

00:37:15,750 --> 00:37:20,880
one kind of socket to another all the

00:37:17,960 --> 00:37:23,400
entire amount of work done in an adapter

00:37:20,880 --> 00:37:25,860
class is transforming one API to another

00:37:23,400 --> 00:37:27,990
it doesn't actually do the work now the

00:37:25,860 --> 00:37:31,140
routing table itself what did we do for

00:37:27,990 --> 00:37:34,850
it well we used to call have a method

00:37:31,140 --> 00:37:34,850
called get size what do we call it now

00:37:35,970 --> 00:37:42,690
this part bigger their mercy for the

00:37:39,900 --> 00:37:45,930
people in the back row very little mercy

00:37:42,690 --> 00:37:48,300
but some okay so all we did essentially

00:37:45,930 --> 00:37:50,390
was renamed the method when you sail in

00:37:48,300 --> 00:37:52,740
in Python it means how big is something

00:37:50,390 --> 00:37:55,410
that's a lot better than a method get'

00:37:52,740 --> 00:37:56,910
sighs and when people said get route by

00:37:55,410 --> 00:38:00,300
index what's a better name for that in

00:37:56,910 --> 00:38:03,270
Python and what exception do they expect

00:38:00,300 --> 00:38:06,330
if they've gone too far all we're doing

00:38:03,270 --> 00:38:10,910
is changing in p2p non python it to

00:38:06,330 --> 00:38:10,910
pythonic next one up Oh

00:38:11,120 --> 00:38:17,700
once it has a good item in length what

00:38:14,460 --> 00:38:21,270
is it called in Python a sequence and

00:38:17,700 --> 00:38:23,520
all sequences are iterable which that

00:38:21,270 --> 00:38:25,140
means now I can do a for loop on it even

00:38:23,520 --> 00:38:28,970
without calling the LAN or the get item

00:38:25,140 --> 00:38:28,970
directly we learned something new

00:38:29,000 --> 00:38:33,870
no one knew all of you knew that already

00:38:31,320 --> 00:38:35,790
okay just check in how much work would

00:38:33,870 --> 00:38:38,700
this is this looks like a big block of

00:38:35,790 --> 00:38:41,400
code I built this adapter class in under

00:38:38,700 --> 00:38:42,990
10 minutes I might have done five I'm

00:38:41,400 --> 00:38:44,490
just a conservatively remembering look

00:38:42,990 --> 00:38:46,200
how long it takes to make the routing

00:38:44,490 --> 00:38:48,720
table where there's a get sized make a

00:38:46,200 --> 00:38:51,390
loan where there's a good item are get

00:38:48,720 --> 00:38:52,980
by index make a indicate item and put an

00:38:51,390 --> 00:38:56,880
index error and it's automatically

00:38:52,980 --> 00:38:58,680
iterable this is one two three four

00:38:56,880 --> 00:39:02,100
lines of code in order to transform the

00:38:58,680 --> 00:39:04,440
API it's so easy to do that if you don't

00:39:02,100 --> 00:39:08,220
transform bad api's into pythonic api's

00:39:04,440 --> 00:39:09,810
you're a fool and I'm serious about it

00:39:08,220 --> 00:39:11,160
that is one of the number one things I

00:39:09,810 --> 00:39:15,330
difficult I go and they say we've got

00:39:11,160 --> 00:39:16,950
50,000 lines of stinkin go not like well

00:39:15,330 --> 00:39:19,160
we could make it into 10,000 lines of

00:39:16,950 --> 00:39:22,620
stinking code and then go in for a bit

00:39:19,160 --> 00:39:25,320
there's some adapter classes sometimes

00:39:22,620 --> 00:39:28,710
the ideas in it are good but they are

00:39:25,320 --> 00:39:30,360
lost over here in this big wall of code

00:39:28,710 --> 00:39:32,130
it's hard to see the business logic as

00:39:30,360 --> 00:39:34,380
opposed to on the bottom right we could

00:39:32,130 --> 00:39:37,470
see all that and then finally on the

00:39:34,380 --> 00:39:39,360
class route very simple adaptation where

00:39:37,470 --> 00:39:42,690
there was a get name we put a property

00:39:39,360 --> 00:39:45,270
and that's the Python way I'm leaving

00:39:42,690 --> 00:39:47,010
you with this file I'm going to give I'm

00:39:45,270 --> 00:39:48,530
not going to publish a set of slides but

00:39:47,010 --> 00:39:51,230
I am going to make a little web so

00:39:48,530 --> 00:39:53,510
for this which shows all of my code

00:39:51,230 --> 00:39:55,370
examples here and which the way you're

00:39:53,510 --> 00:39:57,740
supposed to review this is go click on P

00:39:55,370 --> 00:39:59,660
versus NP for and right at the top is a

00:39:57,740 --> 00:40:02,030
little dot string that says Raymond's

00:39:59,660 --> 00:40:03,740
recipe for baking code better most of

00:40:02,030 --> 00:40:06,620
you can go back and apply this right

00:40:03,740 --> 00:40:08,600
away and start using the properties in

00:40:06,620 --> 00:40:12,290
the context managers and clean up your

00:40:08,600 --> 00:40:14,930
setup and teardown logic and transform

00:40:12,290 --> 00:40:18,110
code from the top code to the bottom

00:40:14,930 --> 00:40:27,190
okay are you guys enjoying the talk so

00:40:18,110 --> 00:40:30,140
far and Emax has not disappointed me yet

00:40:27,190 --> 00:40:35,470
I'll risk it I'll do more live coding

00:40:30,140 --> 00:40:35,470
we will go miscellaneous one

00:40:40,250 --> 00:40:47,730
several things I want to demonstrate

00:40:43,170 --> 00:40:50,820
here top one is a function call function

00:40:47,730 --> 00:40:52,800
call uses a positional arguments I think

00:40:50,820 --> 00:40:54,660
it's fairly obvious what this does this

00:40:52,800 --> 00:40:56,490
calls a function of four arguments the

00:40:54,660 --> 00:41:00,180
first argument is a string the second is

00:40:56,490 --> 00:41:02,400
a number and it's got two boolean x' my

00:41:00,180 --> 00:41:04,410
bet is that on your very first day of

00:41:02,400 --> 00:41:06,690
learning Python you knew enough to

00:41:04,410 --> 00:41:09,120
understand this good how many of you are

00:41:06,690 --> 00:41:10,860
clear that this makes a function call

00:41:09,120 --> 00:41:15,360
before arguments a string a number and

00:41:10,860 --> 00:41:18,050
odd to billions programming languages

00:41:15,360 --> 00:41:20,580
don't get it any simpler than that

00:41:18,050 --> 00:41:22,440
simple beautiful code and do you notice

00:41:20,580 --> 00:41:25,200
the space after the comma is Pepe

00:41:22,440 --> 00:41:31,320
compliant I didn't use triple quotes

00:41:25,200 --> 00:41:34,340
here no backslash eanes Pepe is that

00:41:31,320 --> 00:41:37,830
code awesome what's wrong with it you

00:41:34,340 --> 00:41:40,140
don't know what it does why not all you

00:41:37,830 --> 00:41:42,840
have to do is look up the API I know

00:41:40,140 --> 00:41:51,690
when I wrote the function P f TS I knew

00:41:42,840 --> 00:41:53,040
exactly what it did when I wrote it does

00:41:51,690 --> 00:41:55,710
that improve your understanding a little

00:41:53,040 --> 00:41:58,040
bit python is a beautiful and readable

00:41:55,710 --> 00:42:00,660
language but only if you meet it halfway

00:41:58,040 --> 00:42:03,030
we can't make you write good function

00:42:00,660 --> 00:42:08,340
names and our good variable names is the

00:42:03,030 --> 00:42:10,230
code nail profoundly better yes in all

00:42:08,340 --> 00:42:16,320
languages should you use good variable

00:42:10,230 --> 00:42:19,800
names are you sure does the need vary

00:42:16,320 --> 00:42:24,570
from language to language in fact it

00:42:19,800 --> 00:42:28,440
does and see I make a type declaration a

00:42:24,570 --> 00:42:32,090
file pointer F then I call a function

00:42:28,440 --> 00:42:34,770
with F in it itself a good variable name

00:42:32,090 --> 00:42:36,930
it's a perfectly decent variable name

00:42:34,770 --> 00:42:38,610
because I had a type declaration that

00:42:36,930 --> 00:42:40,770
said it's a file pointer and that was

00:42:38,610 --> 00:42:41,970
right beside where I made the call in

00:42:40,770 --> 00:42:43,530
other words you have more information

00:42:41,970 --> 00:42:45,540
than the variable name you have the

00:42:43,530 --> 00:42:48,840
declaration in Python do we have type

00:42:45,540 --> 00:42:50,370
declarations no so should you be a lot

00:42:48,840 --> 00:42:52,569
better about your variable names to make

00:42:50,370 --> 00:42:54,999
up for the loss of information

00:42:52,569 --> 00:42:56,709
yes in different languages we code to

00:42:54,999 --> 00:42:58,689
their strengths and weaknesses where

00:42:56,709 --> 00:43:00,819
there's the redundant CNC from the type

00:42:58,689 --> 00:43:05,650
declaration you can make your variable

00:43:00,819 --> 00:43:07,299
names oh you don't need to add as much

00:43:05,650 --> 00:43:08,739
information in the variable name because

00:43:07,299 --> 00:43:09,669
you've got additional information in the

00:43:08,739 --> 00:43:12,429
type declaration

00:43:09,669 --> 00:43:15,849
enough said python creates a need for

00:43:12,429 --> 00:43:20,919
better names what topic do you think I'm

00:43:15,849 --> 00:43:23,439
searching for on Twitter that is an

00:43:20,919 --> 00:43:27,579
incorrect hypothesis what topic do you

00:43:23,439 --> 00:43:29,109
think I'm searching for Obama okay so I

00:43:27,579 --> 00:43:30,699
have some people who have some

00:43:29,109 --> 00:43:32,859
personality issues these are the people

00:43:30,699 --> 00:43:34,329
who like to work against your team just

00:43:32,859 --> 00:43:35,890
so you know kind of me like things we're

00:43:34,329 --> 00:43:38,259
going too smoothly at the office I'll

00:43:35,890 --> 00:43:39,669
put some speed bumps in now they're

00:43:38,259 --> 00:43:41,919
people with a good sense of humor and

00:43:39,669 --> 00:43:44,049
Python fortunately attracts those

00:43:41,919 --> 00:43:46,059
because remember pythons net name for a

00:43:44,049 --> 00:43:48,969
mean carnivorous snake its name for a

00:43:46,059 --> 00:43:50,229
British comedy troupe so if you laugh

00:43:48,969 --> 00:43:53,079
and have a little fun while you're doing

00:43:50,229 --> 00:43:55,869
it you're doing it right so I think most

00:43:53,079 --> 00:43:57,640
people could guess that they are very

00:43:55,869 --> 00:44:00,039
accurately that the topic we're

00:43:57,640 --> 00:44:02,429
searching for is Obama what is less

00:44:00,039 --> 00:44:04,929
clear is what the other arguments mean

00:44:02,429 --> 00:44:06,759
Python you don't have to use keyword

00:44:04,929 --> 00:44:08,979
arguments most of the time but you

00:44:06,759 --> 00:44:10,809
should and you put them in anywhere

00:44:08,979 --> 00:44:13,299
where somebody might miss read this so

00:44:10,809 --> 00:44:15,939
this code becomes profoundly better if I

00:44:13,299 --> 00:44:18,369
say the number of tweets is 20 the

00:44:15,939 --> 00:44:20,559
number of retweets is false are that I

00:44:18,369 --> 00:44:25,029
want don't want retweet someone original

00:44:20,559 --> 00:44:26,469
tweets and Unicode I would like to allow

00:44:25,029 --> 00:44:29,339
that so I could find out what they're

00:44:26,469 --> 00:44:33,969
saying about Obama and other languages

00:44:29,339 --> 00:44:35,559
is this code profoundly better that one

00:44:33,969 --> 00:44:37,059
of the simplest things you can do to

00:44:35,559 --> 00:44:40,029
improve the quality of your code is to

00:44:37,059 --> 00:44:42,400
use keyword arguments anywhere the names

00:44:40,029 --> 00:44:45,789
aren't simple remember the code was Pepe

00:44:42,400 --> 00:44:49,029
compliant before but it's better now

00:44:45,789 --> 00:44:51,099
good function names matter all right

00:44:49,029 --> 00:44:55,089
here's some fairly straightforward Pepe

00:44:51,099 --> 00:44:56,739
compliant to code we've got a simple

00:44:55,089 --> 00:45:00,309
tupple you guys know about tuples a

00:44:56,739 --> 00:45:03,279
mutable or immutable immutable what's

00:45:00,309 --> 00:45:05,700
the length of this double three how do I

00:45:03,279 --> 00:45:08,770
extract the 170

00:45:05,700 --> 00:45:13,600
be square bracket zero how do I get the

00:45:08,770 --> 00:45:16,119
point one can I unpack a couple so you

00:45:13,600 --> 00:45:18,880
guys all understand tuples okay so you

00:45:16,119 --> 00:45:20,320
understand this and this very square

00:45:18,880 --> 00:45:24,369
root of x lon it's going to look up

00:45:20,320 --> 00:45:29,290
which number 0.1 is 0.1 bigger or

00:45:24,369 --> 00:45:33,820
smaller than 0.5 smaller so is it going

00:45:29,290 --> 00:45:36,670
to say that's bright okay how about this

00:45:33,820 --> 00:45:40,119
one well oh well this if Clause trigger

00:45:36,670 --> 00:45:41,369
printing wow that is light so one

00:45:40,119 --> 00:45:45,910
hundred percent of you in here

00:45:41,369 --> 00:45:47,470
understand this code every single person

00:45:45,910 --> 00:45:50,380
accurately predicted what it's going to

00:45:47,470 --> 00:45:52,810
do and it's Peppe compliant it also

00:45:50,380 --> 00:45:55,420
sucks because you guys can't answer a

00:45:52,810 --> 00:45:58,359
fairly important question well I

00:45:55,420 --> 00:45:59,920
actually think you can't answer but I

00:45:58,359 --> 00:46:01,330
can be wrong in this audience there

00:45:59,920 --> 00:46:06,450
might actually be a handful of people

00:46:01,330 --> 00:46:06,450
who know would you wear this tubble

00:46:08,310 --> 00:46:15,040
there's somebody who might actually know

00:46:10,450 --> 00:46:20,170
I know that some Python needs to serve

00:46:15,040 --> 00:46:25,119
photographers that's exactly it

00:46:20,170 --> 00:46:27,220
five bucks somebody figured it out isn't

00:46:25,119 --> 00:46:29,680
it great when you write code that's Pepe

00:46:27,220 --> 00:46:31,619
compliant and out of a room of 500

00:46:29,680 --> 00:46:35,020
people one person can figure it out

00:46:31,619 --> 00:46:37,440
that's a goal to strive for I know what

00:46:35,020 --> 00:46:37,440
you're thinking

00:47:24,760 --> 00:47:29,530
I'm doing this live on stage for a

00:47:26,829 --> 00:47:31,810
reason one of the reasons is I want you

00:47:29,530 --> 00:47:34,270
to have been very conscious how long it

00:47:31,810 --> 00:47:38,619
took me to do it it's at 10 to 15

00:47:34,270 --> 00:47:40,720
seconds not done in the the calm of the

00:47:38,619 --> 00:47:42,760
green room but with lots of people

00:47:40,720 --> 00:47:44,170
watching over your shoulder ready to

00:47:42,760 --> 00:47:44,849
make a cat call the moment you make a

00:47:44,170 --> 00:47:47,980
typo

00:47:44,849 --> 00:47:49,960
somebody say some Emacs meanie saying

00:47:47,980 --> 00:47:52,900
well you should have just used ctrl alt

00:47:49,960 --> 00:47:58,690
Q X exclamation point with your left

00:47:52,900 --> 00:48:01,480
pinky and that would have done it it

00:47:58,690 --> 00:48:03,640
takes so little time it is so easy to do

00:48:01,480 --> 00:48:05,800
if you don't do this you're a fool the

00:48:03,640 --> 00:48:07,570
code is profoundly better the repper for

00:48:05,800 --> 00:48:10,060
this will say this is a color whose Hugh

00:48:07,570 --> 00:48:12,369
is on 170 on the color wheel under 70

00:48:10,060 --> 00:48:14,680
degrees lightly saturated highly

00:48:12,369 --> 00:48:17,020
luminous is that tinted color and

00:48:14,680 --> 00:48:18,940
photographer terms the code is now

00:48:17,020 --> 00:48:21,910
profoundly better this is one of the

00:48:18,940 --> 00:48:23,890
easiest ways to clean up your code when

00:48:21,910 --> 00:48:25,540
you're done with this talk first thing

00:48:23,890 --> 00:48:27,460
you should do go eat

00:48:25,540 --> 00:48:28,810
second think you should do go back and

00:48:27,460 --> 00:48:30,069
look at your own codebase and say do I

00:48:28,810 --> 00:48:32,440
have a bunch of tuples floating around

00:48:30,069 --> 00:48:34,869
that aren't self documenting if so fix

00:48:32,440 --> 00:48:37,829
it it's only a couple lines of code make

00:48:34,869 --> 00:48:41,740
a name couple pain tuples or your friend

00:48:37,829 --> 00:48:46,210
who made name tuples oh I did do you

00:48:41,740 --> 00:48:50,500
like them who in here doesn't like name

00:48:46,210 --> 00:48:51,849
tuples one person that's because you

00:48:50,500 --> 00:48:54,369
looked at the source code and you saw

00:48:51,849 --> 00:48:57,550
that I used a Val and it makes you mad

00:48:54,369 --> 00:48:59,589
doesn't it even though I chose it for

00:48:57,550 --> 00:49:01,450
our sound business reasons like now

00:48:59,589 --> 00:49:04,240
everybody can understand the code I

00:49:01,450 --> 00:49:06,040
never get a question on how name tuples

00:49:04,240 --> 00:49:09,040
work because they're a self documenting

00:49:06,040 --> 00:49:10,540
it's also very easy to maintain and you

00:49:09,040 --> 00:49:13,300
can print out the template so you don't

00:49:10,540 --> 00:49:15,400
have to use a Val at all and you can cut

00:49:13,300 --> 00:49:17,050
it out go run it through pipe I run it

00:49:15,400 --> 00:49:18,880
through scythe on and get an optimized

00:49:17,050 --> 00:49:21,760
name double it has a huge number of

00:49:18,880 --> 00:49:25,660
advantages but a Val makes you mad

00:49:21,760 --> 00:49:29,710
doesn't it sir you know cuido used eval

00:49:25,660 --> 00:49:32,520
when he made a time until he should go

00:49:29,710 --> 00:49:32,520
let him have it during lunch

00:49:32,900 --> 00:49:37,260
you know if that Raymond is using eval

00:49:35,310 --> 00:49:40,040
and cuido soon as a valve that is two

00:49:37,260 --> 00:49:42,870
hints that you're doing it wrong okay

00:49:40,040 --> 00:49:46,140
fair enough I hope you guys like a name

00:49:42,870 --> 00:49:47,790
couple and a balance one of those things

00:49:46,140 --> 00:49:49,680
you want to be cautious with because

00:49:47,790 --> 00:49:51,960
it's very easy to introduce security

00:49:49,680 --> 00:49:53,610
risk with it on the other hand if you

00:49:51,960 --> 00:49:56,820
are cautious with it you can introduce

00:49:53,610 --> 00:49:59,010
great simplifications to your code and

00:49:56,820 --> 00:50:00,630
so you shouldn't chop off your left arm

00:49:59,010 --> 00:50:03,960
right arm one of your legs and your

00:50:00,630 --> 00:50:06,110
other leg while trying to prevent King

00:50:03,960 --> 00:50:08,520
author from crossing

00:50:06,110 --> 00:50:10,710
don't throw away a vowel it's one of

00:50:08,520 --> 00:50:13,830
your most powerful tools ok get quotes

00:50:10,710 --> 00:50:19,080
this is pep eight compliant code and it

00:50:13,830 --> 00:50:21,000
uses a dictionary comprehension what

00:50:19,080 --> 00:50:25,380
does it do it gets a bunch of quotes sir

00:50:21,000 --> 00:50:27,180
hi I'm sorry as we're kind of running

00:50:25,380 --> 00:50:28,710
out of time and we've got to get to

00:50:27,180 --> 00:50:33,240
lunch as you said we first thing we do

00:50:28,710 --> 00:50:36,570
is go and eat could we close this over

00:50:33,240 --> 00:50:42,360
and yes excellent do I still have time

00:50:36,570 --> 00:50:47,610
for Q&A or now no oh yeah he says can

00:50:42,360 --> 00:50:51,150
you be brief yes the thing that that

00:50:47,610 --> 00:50:53,850
bugs me here is args the RX represents

00:50:51,150 --> 00:50:57,420
stock symbols why does it matter

00:50:53,850 --> 00:50:59,190
NC it doesn't matter what variable name

00:50:57,420 --> 00:51:01,740
you use there because the parameters

00:50:59,190 --> 00:51:03,900
aren't exposed to the user but in this

00:51:01,740 --> 00:51:05,880
case in Python the parameter names are

00:51:03,900 --> 00:51:08,730
exposed to the user your parameter names

00:51:05,880 --> 00:51:09,720
are part of the API they will see them

00:51:08,730 --> 00:51:12,480
and that makes this more

00:51:09,720 --> 00:51:15,120
self-documenting and then lastly I have

00:51:12,480 --> 00:51:17,160
the looping over the interfaces what's

00:51:15,120 --> 00:51:20,700
wrong with that code the only thing is

00:51:17,160 --> 00:51:27,410
wrong with it it's it's fragile and we

00:51:20,700 --> 00:51:27,410
can make it less frigidly there I'm done

00:51:33,200 --> 00:51:37,760
all right thanks very very much thank

00:51:35,809 --> 00:51:41,930
you very much Raven clearly there's a

00:51:37,760 --> 00:51:44,299
lot beyond Pepe and yeah so as a note of

00:51:41,930 --> 00:51:46,660
logistics on one lane who learned

00:51:44,299 --> 00:51:49,069
something new okay

00:51:46,660 --> 00:51:53,109
lunch is downstairs in the expo hall

00:51:49,069 --> 00:51:56,770
that's room 210 and yeah so go eat in

00:51:53,109 --> 00:51:56,770

YouTube URL: https://www.youtube.com/watch?v=wf-BqAjZb8M


