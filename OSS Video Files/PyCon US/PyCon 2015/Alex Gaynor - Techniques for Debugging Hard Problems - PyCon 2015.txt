Title: Alex Gaynor - Techniques for Debugging Hard Problems - PyCon 2015
Publication date: 2015-04-12
Playlist: PyCon 2015
Description: 
	"Speaker: Alex Gaynor

Sometimes your programs have bugs. Often they're shallow things, simple AttributeErrors or TypeErrors. Sometimes they're large, complex, and nearly impossible to debug. This talk explores techniques for figuring these out.

Slides can be found at: https://speakerdeck.com/pycon2015 and https://github.com/PyCon/2015-slides"
Captions: 
	00:00:06,410 --> 00:00:10,920
thanks everyone I'm just playing the

00:00:09,000 --> 00:00:12,599
odds here but I'm gonna go ahead and

00:00:10,920 --> 00:00:16,320
guess that every single one of you works

00:00:12,599 --> 00:00:17,850
on a computer program that has bugs my

00:00:16,320 --> 00:00:19,350
name is Alex gainer and I'm a software

00:00:17,850 --> 00:00:21,480
engineer which is an ancient phrase

00:00:19,350 --> 00:00:23,850
which means purse new types bugs into a

00:00:21,480 --> 00:00:25,710
computer and this talk is about

00:00:23,850 --> 00:00:27,000
grappling with the reality of the fal

00:00:25,710 --> 00:00:28,800
ability of those of us who write

00:00:27,000 --> 00:00:32,489
computer programs so thanks for coming

00:00:28,800 --> 00:00:34,410
along as Chris said I'm a director of

00:00:32,489 --> 00:00:36,600
the Python Software Foundation I work on

00:00:34,410 --> 00:00:39,300
a bunch of open-source Python projects I

00:00:36,600 --> 00:00:41,760
live in Washington DC and I'm a big fan

00:00:39,300 --> 00:00:43,290
of bagel and delis I also work for the

00:00:41,760 --> 00:00:44,969
u.s. government and nothing I say

00:00:43,290 --> 00:00:47,100
represents the views of my employer here

00:00:44,969 --> 00:00:48,600
today however if you liked yesterday's

00:00:47,100 --> 00:00:52,530
keynote you should come talk to me about

00:00:48,600 --> 00:00:54,149
it so this talk is about dealing with

00:00:52,530 --> 00:00:56,969
really difficult problems that we

00:00:54,149 --> 00:00:58,170
experienced as computer programmers but

00:00:56,969 --> 00:01:00,570
there's one really difficult problem I'm

00:00:58,170 --> 00:01:02,340
not going to talk about social problems

00:01:00,570 --> 00:01:04,250
problems due to breakdowns in

00:01:02,340 --> 00:01:06,750
communication or failures of teamwork

00:01:04,250 --> 00:01:08,430
those are also very difficult problems

00:01:06,750 --> 00:01:12,240
but they're for a different different

00:01:08,430 --> 00:01:14,100
talk so what is debugging I think anyone

00:01:12,240 --> 00:01:15,810
who's programmed to computer or just use

00:01:14,100 --> 00:01:17,700
software for any length of time is a

00:01:15,810 --> 00:01:20,009
very intuitive understanding of what it

00:01:17,700 --> 00:01:22,590
means to debug but I want to hone in on

00:01:20,009 --> 00:01:24,420
really specifically what types of things

00:01:22,590 --> 00:01:26,640
we're going to be looking at here so the

00:01:24,420 --> 00:01:29,880
first component of debugging for me is

00:01:26,640 --> 00:01:32,310
when does this bug occur and so figuring

00:01:29,880 --> 00:01:34,619
out what conditions trigger it oh if I

00:01:32,310 --> 00:01:38,100
set the background of my desktop be blue

00:01:34,619 --> 00:01:41,490
this program crashes what is the cause

00:01:38,100 --> 00:01:43,470
and often this for thoughts this takes

00:01:41,490 --> 00:01:46,799
the form of making this bug reproducible

00:01:43,470 --> 00:01:50,460
from sometimes my server crashes to when

00:01:46,799 --> 00:01:54,689
this happens my server crashes next we

00:01:50,460 --> 00:01:56,430
have Y so when a user submits text with

00:01:54,689 --> 00:02:00,000
the word blue in it my server crashes

00:01:56,430 --> 00:02:02,759
and that's because this function has a

00:02:00,000 --> 00:02:04,829
bug so why does that set of

00:02:02,759 --> 00:02:08,459
circumstances lead to this incorrect

00:02:04,829 --> 00:02:10,920
behavior and finally given that I know

00:02:08,459 --> 00:02:13,100
that my code is broken in some respect

00:02:10,920 --> 00:02:14,630
how do I go about fixing it

00:02:13,100 --> 00:02:17,950
a lot of bugs this is fairly

00:02:14,630 --> 00:02:20,480
straightforward sometimes it's not so

00:02:17,950 --> 00:02:24,380
this talk idle specifically calls out

00:02:20,480 --> 00:02:26,270
hard problems and what does that mean to

00:02:24,380 --> 00:02:29,600
me it means problems where my usual

00:02:26,270 --> 00:02:31,220
ad-hoc techniques are not working and to

00:02:29,600 --> 00:02:33,500
simplify that often means things that

00:02:31,220 --> 00:02:35,870
are taking more than 10 or 15 minutes I

00:02:33,500 --> 00:02:38,300
think most of us have a very ad-hoc

00:02:35,870 --> 00:02:40,850
sense at a debug oh I got an attribute

00:02:38,300 --> 00:02:43,010
error because I got a none here you know

00:02:40,850 --> 00:02:46,310
print out the parameters from the call

00:02:43,010 --> 00:02:48,230
or why is it none coming from there this

00:02:46,310 --> 00:02:51,380
talk is not for those sort of easier

00:02:48,230 --> 00:02:53,180
situations where things are sort of all

00:02:51,380 --> 00:02:55,100
as they appear if you're into

00:02:53,180 --> 00:02:56,900
test-driven development you might think

00:02:55,100 --> 00:02:58,790
of yourself experiencing bugs all the

00:02:56,900 --> 00:03:00,620
time right a bug is a deviation from

00:02:58,790 --> 00:03:03,020
what the program is supposed to do and

00:03:00,620 --> 00:03:04,520
what it actually does so you write a

00:03:03,020 --> 00:03:06,410
failing test you can think of that as

00:03:04,520 --> 00:03:08,750
your program having a bug but it's not a

00:03:06,410 --> 00:03:11,630
hard problem it's a natural and expected

00:03:08,750 --> 00:03:14,120
part of development by contrast some

00:03:11,630 --> 00:03:15,650
bugs are not normal and expected and

00:03:14,120 --> 00:03:17,870
they're very difficult to figure out

00:03:15,650 --> 00:03:19,940
what's going on for the ones that are

00:03:17,870 --> 00:03:22,580
normal and expected or otherwise simple

00:03:19,940 --> 00:03:24,770
my recommendation is don't really listen

00:03:22,580 --> 00:03:26,390
to anything in this talk you should go

00:03:24,770 --> 00:03:28,460
through whatever your normal flow is if

00:03:26,390 --> 00:03:30,740
that's working for you just try to stay

00:03:28,460 --> 00:03:32,540
in a normal routine don't break out of

00:03:30,740 --> 00:03:35,120
your normal stream of consciousness

00:03:32,540 --> 00:03:38,960
these are for when that breaks down and

00:03:35,120 --> 00:03:41,090
doesn't actually lead you to solution in

00:03:38,960 --> 00:03:43,460
my experience bugs that lead to these

00:03:41,090 --> 00:03:46,040
very difficult to debug situations have

00:03:43,460 --> 00:03:47,840
a couple key factors that are in common

00:03:46,040 --> 00:03:50,150
with each other this is by no means

00:03:47,840 --> 00:03:53,120
exhausted but these are things that I

00:03:50,150 --> 00:03:55,280
see is being common timing and ordering

00:03:53,120 --> 00:03:58,190
these are often related to concurrency

00:03:55,280 --> 00:04:00,680
whether using threads multi-processing

00:03:58,190 --> 00:04:03,440
something like twisted or async i/o or

00:04:00,680 --> 00:04:05,960
tornado greenlit if you've got multiple

00:04:03,440 --> 00:04:07,490
things going on in your program it can

00:04:05,960 --> 00:04:08,960
often be difficult to figure out why

00:04:07,490 --> 00:04:11,060
because it's hard to track what's going

00:04:08,960 --> 00:04:13,640
on in two different streams of execution

00:04:11,060 --> 00:04:15,650
on the other hand timing is not always

00:04:13,640 --> 00:04:17,660
just about doing two things at once

00:04:15,650 --> 00:04:19,820
sometimes it's about the order of things

00:04:17,660 --> 00:04:21,770
that go on in your program if I call be

00:04:19,820 --> 00:04:24,110
before a I get a different behavior than

00:04:21,770 --> 00:04:26,479
if I call a first even though it it

00:04:24,110 --> 00:04:26,840
shouldn't matter bugs like that come

00:04:26,479 --> 00:04:29,510
from the

00:04:26,840 --> 00:04:30,949
same sort of origin of making it hard to

00:04:29,510 --> 00:04:33,290
reason about what is the order of

00:04:30,949 --> 00:04:36,290
operations and why does a different

00:04:33,290 --> 00:04:38,180
order cause different results when we

00:04:36,290 --> 00:04:40,220
deal with programs that cross module

00:04:38,180 --> 00:04:43,010
boundaries or packages or entirely

00:04:40,220 --> 00:04:45,440
different libraries this is also a

00:04:43,010 --> 00:04:47,300
common source of bugs this usually means

00:04:45,440 --> 00:04:50,120
we're crossing across code written by

00:04:47,300 --> 00:04:52,160
different people different teams in the

00:04:50,120 --> 00:04:53,600
open-source world often code written by

00:04:52,160 --> 00:04:55,490
two people who've never met each other

00:04:53,600 --> 00:04:59,000
and don't even know each other exist in

00:04:55,490 --> 00:05:01,790
this set of situations documentation or

00:04:59,000 --> 00:05:03,410
API contracts can be too imprecise they

00:05:01,790 --> 00:05:05,090
don't give us enough details and so we

00:05:03,410 --> 00:05:07,400
make assumptions and fill in the blanks

00:05:05,090 --> 00:05:10,430
and when those assumptions are wrong we

00:05:07,400 --> 00:05:12,650
get subtly incorrect program this leads

00:05:10,430 --> 00:05:15,260
to the largest and scariest category in

00:05:12,650 --> 00:05:17,660
my opinion small bugs which by

00:05:15,260 --> 00:05:19,610
themselves don't cause any problems but

00:05:17,660 --> 00:05:23,030
which together lead to a very large bug

00:05:19,610 --> 00:05:25,630
it's a common feature of how complex

00:05:23,030 --> 00:05:28,639
systems fail whether in software

00:05:25,630 --> 00:05:31,880
astrophysics aerodynamics or many other

00:05:28,639 --> 00:05:34,780
fields that when we design for systems

00:05:31,880 --> 00:05:37,430
to run safely it's very common that

00:05:34,780 --> 00:05:39,470
failures are not the result of one thing

00:05:37,430 --> 00:05:42,139
going wrong systems are designed to

00:05:39,470 --> 00:05:44,210
tolerate one two three or even a handful

00:05:42,139 --> 00:05:47,020
of things going wrong things break down

00:05:44,210 --> 00:05:49,400
when multiple things fail together in

00:05:47,020 --> 00:05:53,240
interconnected ways and that's where we

00:05:49,400 --> 00:05:55,970
hit these situations so before we get

00:05:53,240 --> 00:05:57,590
into techniques I want to go through

00:05:55,970 --> 00:05:59,330
some ground rules these are things that

00:05:57,590 --> 00:06:01,940
I think are always applicable when you

00:05:59,330 --> 00:06:03,139
think you found a difficult bug so you

00:06:01,940 --> 00:06:06,800
should be trying to think about these

00:06:03,139 --> 00:06:09,110
always the first rule is everything is

00:06:06,800 --> 00:06:11,360
in scope at some point in your career

00:06:09,110 --> 00:06:12,919
someone whether it's a professor or a

00:06:11,360 --> 00:06:15,530
co-worker or just someone an IRC

00:06:12,919 --> 00:06:17,930
probably told you the bug is not in the

00:06:15,530 --> 00:06:20,000
compiler the bug is not in the operating

00:06:17,930 --> 00:06:22,450
system the bug is not in the standard

00:06:20,000 --> 00:06:25,490
library and to a first approximation

00:06:22,450 --> 00:06:28,030
this is really good advice those are all

00:06:25,490 --> 00:06:29,960
super widely used well tested

00:06:28,030 --> 00:06:32,750
conscientiously developed pieces of

00:06:29,960 --> 00:06:34,789
software and so lots of people are

00:06:32,750 --> 00:06:35,870
hitting on them you're probably not the

00:06:34,789 --> 00:06:37,969
first person who have done what you're

00:06:35,870 --> 00:06:40,340
doing you probably didn't just find a

00:06:37,969 --> 00:06:43,190
hidden bug that said

00:06:40,340 --> 00:06:45,500
there are also computer programs and in

00:06:43,190 --> 00:06:48,919
my experience computer programs we can

00:06:45,500 --> 00:06:50,960
contain bugs and these being fairly

00:06:48,919 --> 00:06:53,870
large computer programs contain

00:06:50,960 --> 00:06:58,610
correspondingly more bugs so they

00:06:53,870 --> 00:07:01,220
probably have bugs but play the odds the

00:06:58,610 --> 00:07:02,990
bug probably is not there because lots

00:07:01,220 --> 00:07:04,729
of people are using these tools and for

00:07:02,990 --> 00:07:07,970
the most part most of the code we write

00:07:04,729 --> 00:07:09,650
is not interesting but if the evidence

00:07:07,970 --> 00:07:12,290
that you discover as you're debugging

00:07:09,650 --> 00:07:15,770
points at your standard library or

00:07:12,290 --> 00:07:17,690
compiler don't be afraid to dive in it's

00:07:15,770 --> 00:07:19,760
entirely possible the people who wrote

00:07:17,690 --> 00:07:25,850
that software is entirely fallible like

00:07:19,760 --> 00:07:28,580
us the next rule is read the source read

00:07:25,850 --> 00:07:30,889
all of the source documentation whether

00:07:28,580 --> 00:07:33,560
human written prose or auto-generated

00:07:30,889 --> 00:07:35,750
from looking at function signatures is

00:07:33,560 --> 00:07:38,389
completely essential and why I ended up

00:07:35,750 --> 00:07:39,710
in the Python community but it also has

00:07:38,389 --> 00:07:42,710
the potential to get out of sync with

00:07:39,710 --> 00:07:44,419
source code source code is king when

00:07:42,710 --> 00:07:46,310
you're working on a hard bog there's a

00:07:44,419 --> 00:07:48,440
good chance because of a subtle behavior

00:07:46,310 --> 00:07:50,810
the kind of thing that's not documented

00:07:48,440 --> 00:07:52,820
or perhaps slips out of the date with

00:07:50,810 --> 00:07:54,950
the documentation because there's a lack

00:07:52,820 --> 00:07:57,500
of realization that oh this tiny detail

00:07:54,950 --> 00:08:00,099
was originally documented now the docks

00:07:57,500 --> 00:08:02,570
are subtly wrong doesn't affect most

00:08:00,099 --> 00:08:05,000
people but you're not most people you're

00:08:02,570 --> 00:08:06,800
debugging a hard problem the only way to

00:08:05,000 --> 00:08:08,599
know for sure what the behavior

00:08:06,800 --> 00:08:10,940
something is is to read the source code

00:08:08,599 --> 00:08:13,400
and don't stop it reading your own

00:08:10,940 --> 00:08:15,680
source code read the libraries you use

00:08:13,400 --> 00:08:18,169
source code read your operating system

00:08:15,680 --> 00:08:21,110
read any source code that seems relevant

00:08:18,169 --> 00:08:26,000
that the evidence points you toward get

00:08:21,110 --> 00:08:26,900
a shovel and dig into it you also want

00:08:26,000 --> 00:08:29,030
to make sure you're reading the right

00:08:26,900 --> 00:08:31,010
source code make sure the source code

00:08:29,030 --> 00:08:32,120
you're reading corresponds to the

00:08:31,010 --> 00:08:34,550
version of the software you're running

00:08:32,120 --> 00:08:36,200
source code changes over time as well

00:08:34,550 --> 00:08:37,789
and there's no good and looking for

00:08:36,200 --> 00:08:42,409
subtle behavior and the completely wrong

00:08:37,789 --> 00:08:45,290
version of a library it's a bit of an

00:08:42,409 --> 00:08:48,620
exaggeration to say trust nothing but

00:08:45,290 --> 00:08:51,440
not much of one wrapper logging they'll

00:08:48,620 --> 00:08:54,590
sometimes lie to you not intentionally

00:08:51,440 --> 00:08:56,990
but take a django query set for exam

00:08:54,590 --> 00:09:00,200
if you take a wrapper of it inside of

00:08:56,990 --> 00:09:03,230
say PDB it looks exactly the same as a

00:09:00,200 --> 00:09:05,600
list just has the square brackets no

00:09:03,230 --> 00:09:07,700
indications to query set if you don't

00:09:05,600 --> 00:09:10,070
check to verify that what you have is

00:09:07,700 --> 00:09:12,530
really not a list you'll probably hit

00:09:10,070 --> 00:09:14,540
some strange bugs for example both lists

00:09:12,530 --> 00:09:15,890
and query sets have count methods which

00:09:14,540 --> 00:09:19,730
have different signatures and do

00:09:15,890 --> 00:09:23,030
completely different things I once hit a

00:09:19,730 --> 00:09:25,250
situation where I somebody was closed

00:09:23,030 --> 00:09:28,310
calling closed on a file descriptor but

00:09:25,250 --> 00:09:30,080
the file didn't actually close I was

00:09:28,310 --> 00:09:32,120
sitting in my debugger and I would

00:09:30,080 --> 00:09:35,180
continually jump over the closed call

00:09:32,120 --> 00:09:37,670
thinking oh it's a closed method I know

00:09:35,180 --> 00:09:40,580
what closed does I don't need to zoom

00:09:37,670 --> 00:09:43,190
into this when I finally an hour later

00:09:40,580 --> 00:09:45,970
stepped into the close method I realize

00:09:43,190 --> 00:09:48,710
oh somebody monkey patched this object

00:09:45,970 --> 00:09:51,410
and this close method now only closes

00:09:48,710 --> 00:09:53,600
it's sometimes the only way to know was

00:09:51,410 --> 00:09:54,950
to dive into that the source code

00:09:53,600 --> 00:09:56,330
unfortunately made it slightly more

00:09:54,950 --> 00:09:59,030
difficult to find than it should have

00:09:56,330 --> 00:10:01,760
been because it was a monkey patch and I

00:09:59,030 --> 00:10:03,820
was basically too arrogant to look into

00:10:01,760 --> 00:10:07,340
the close method to see how it worked

00:10:03,820 --> 00:10:11,630
verify that what the computer is doing

00:10:07,340 --> 00:10:14,150
is what you expect I'm cheating a little

00:10:11,630 --> 00:10:16,010
bit here I have not actually used this

00:10:14,150 --> 00:10:17,810
technique but I have several friends who

00:10:16,010 --> 00:10:20,390
are fantastic debuggers and they swear

00:10:17,810 --> 00:10:23,690
by it and I often wish I've done this in

00:10:20,390 --> 00:10:25,100
retrospect pretend that instead of going

00:10:23,690 --> 00:10:27,650
out and becoming a programmer you became

00:10:25,100 --> 00:10:29,660
a lab scientist and get a notebook

00:10:27,650 --> 00:10:31,790
whether it's paper or digital and take

00:10:29,660 --> 00:10:33,950
notes what are the experiments I'm

00:10:31,790 --> 00:10:36,050
running here are the assumptions I'm

00:10:33,950 --> 00:10:38,390
making about my environment when you've

00:10:36,050 --> 00:10:41,330
got a multi hour or multi-day debugging

00:10:38,390 --> 00:10:43,280
session it becomes increasingly easy to

00:10:41,330 --> 00:10:45,680
forget things that you did earlier or

00:10:43,280 --> 00:10:48,320
even miss remember them thinking oh I

00:10:45,680 --> 00:10:51,950
tried that and it didn't work when in

00:10:48,320 --> 00:10:53,420
fact it did work and that will lead you

00:10:51,950 --> 00:10:56,110
in the wrong direction possibly

00:10:53,420 --> 00:10:58,430
dangerously so if you're misremembering

00:10:56,110 --> 00:11:00,170
if you're using git or some other

00:10:58,430 --> 00:11:02,480
version control system with cheap local

00:11:00,170 --> 00:11:04,640
branches you can actually use the

00:11:02,480 --> 00:11:06,740
version control system as a form of a

00:11:04,640 --> 00:11:07,250
lab notebook committing each experiment

00:11:06,740 --> 00:11:12,230
to its

00:11:07,250 --> 00:11:14,270
branch so one of the neat things about

00:11:12,230 --> 00:11:15,980
working on a computer in my opinion is a

00:11:14,270 --> 00:11:18,290
computer is capable of telling you what

00:11:15,980 --> 00:11:19,580
it's doing in various ways and so

00:11:18,290 --> 00:11:22,520
there's a variety of tooling that

00:11:19,580 --> 00:11:24,620
assists in debugging the first one is a

00:11:22,520 --> 00:11:26,870
debugger for your language if you're

00:11:24,620 --> 00:11:28,730
using Python PDB is included in the

00:11:26,870 --> 00:11:31,100
standard library and there's a great

00:11:28,730 --> 00:11:34,670
third-party module on pi PI called PDB

00:11:31,100 --> 00:11:36,530
plus plus you can pip install pdb PP to

00:11:34,670 --> 00:11:38,660
get it it's really fantastic there's a

00:11:36,530 --> 00:11:40,340
be a talk here right after this one

00:11:38,660 --> 00:11:42,950
about mastering PDB that I'm sure will

00:11:40,340 --> 00:11:46,640
be excellent if you're using C you

00:11:42,950 --> 00:11:49,280
probably want gdb or lld be practicing

00:11:46,640 --> 00:11:51,380
with these tools is great just to get

00:11:49,280 --> 00:11:53,270
familiar with how to look at where you

00:11:51,380 --> 00:11:56,440
are in your code where your code is

00:11:53,270 --> 00:11:58,850
actually executing a technique I like is

00:11:56,440 --> 00:12:01,070
just to sort of get familiar with the

00:11:58,850 --> 00:12:03,290
tooling if you've got a failing test

00:12:01,070 --> 00:12:04,580
even if it's intuitive to you you know

00:12:03,290 --> 00:12:06,470
why it's failing you just wrote the

00:12:04,580 --> 00:12:08,300
failing test it's one of the easy cases

00:12:06,470 --> 00:12:11,510
you can practice on these with a

00:12:08,300 --> 00:12:14,180
debugger your operating system also

00:12:11,510 --> 00:12:15,950
includes tracing infrastructure for

00:12:14,180 --> 00:12:18,770
figuring out what exactly it's going on

00:12:15,950 --> 00:12:26,450
on Linux this takes the form of a strace

00:12:18,770 --> 00:12:35,320
on OS 10 or Solaris it's DTrace excuse

00:12:26,450 --> 00:12:35,320
me these will tell you what sis calls

00:12:35,560 --> 00:12:40,510
sorry these will tell you what sis calls

00:12:43,390 --> 00:12:48,110
what sis calls your program is making

00:12:45,980 --> 00:12:50,270
which can often be difficult to find

00:12:48,110 --> 00:12:53,060
just from looking at your code because

00:12:50,270 --> 00:12:56,720
they're layered inside your code inside

00:12:53,060 --> 00:12:58,400
the Python interpreter inside Lipsy this

00:12:56,720 --> 00:13:02,450
lets you dive into what is actually

00:12:58,400 --> 00:13:04,310
going on also incredibly important is a

00:13:02,450 --> 00:13:06,800
text editor or IDE that you're

00:13:04,310 --> 00:13:09,130
comfortable reading code in a lot of us

00:13:06,800 --> 00:13:11,800
optimize our environments for writing

00:13:09,130 --> 00:13:14,270
debugging is largely about reading I

00:13:11,800 --> 00:13:16,520
personally use atom and a terminal that

00:13:14,270 --> 00:13:18,940
has the silver searcher installed which

00:13:16,520 --> 00:13:21,110
is just a really slick grep basically I

00:13:18,940 --> 00:13:22,550
also tend to use vim

00:13:21,110 --> 00:13:25,309
I don't really know how to write code in

00:13:22,550 --> 00:13:26,899
vim but I know how to read code in it as

00:13:25,309 --> 00:13:29,089
one of my co-workers likes to say

00:13:26,899 --> 00:13:33,019
sometimes Alex accidentally opens up

00:13:29,089 --> 00:13:35,089
them your operating system probably also

00:13:33,019 --> 00:13:37,999
is a bunch of tooling for debugging

00:13:35,089 --> 00:13:41,149
specific domain things for example on a

00:13:37,999 --> 00:13:44,540
UNIX machine the program l sof will show

00:13:41,149 --> 00:13:46,939
you what all the file descriptors are so

00:13:44,540 --> 00:13:49,339
you can map say the number three from an

00:13:46,939 --> 00:13:52,610
s trace output to oh this is a socket

00:13:49,339 --> 00:13:55,399
nuts that also on UNIX machines is

00:13:52,610 --> 00:13:58,220
useful for knowing what different

00:13:55,399 --> 00:14:01,069
network sockets are pointing at H top

00:13:58,220 --> 00:14:05,259
and IO top will tell you about CPU and

00:14:01,069 --> 00:14:07,879
RAM usage and disk usage on linux the

00:14:05,259 --> 00:14:09,319
/proc file system is all sorts of

00:14:07,879 --> 00:14:11,389
information about what different

00:14:09,319 --> 00:14:14,179
processes are doing and there's also a

00:14:11,389 --> 00:14:16,399
really neat program called OS query that

00:14:14,179 --> 00:14:17,959
facebook release that exposes what

00:14:16,399 --> 00:14:20,449
different things on your system are

00:14:17,959 --> 00:14:22,910
doing in the form of a sequel database

00:14:20,449 --> 00:14:25,759
so you can write select star from

00:14:22,910 --> 00:14:28,309
processes and do queries that way

00:14:25,759 --> 00:14:30,529
depending on what exactly your bug looks

00:14:28,309 --> 00:14:32,720
like all some or none of these tools

00:14:30,529 --> 00:14:36,439
might be useful in figuring out what's

00:14:32,720 --> 00:14:37,970
going on sometimes though those are not

00:14:36,439 --> 00:14:39,559
sufficient those give you lots of

00:14:37,970 --> 00:14:41,870
low-level details about what the

00:14:39,559 --> 00:14:45,350
computer sees but there's also what your

00:14:41,870 --> 00:14:47,449
application sees so when you need a less

00:14:45,350 --> 00:14:49,970
generic tool you can use things like

00:14:47,449 --> 00:14:51,499
logging metrics and exception tracking

00:14:49,970 --> 00:14:53,480
to understand from the application

00:14:51,499 --> 00:14:55,429
perspective what is going on this

00:14:53,480 --> 00:14:57,439
material could be a talk on its own and

00:14:55,429 --> 00:14:59,749
in fact it totally is so you should go

00:14:57,439 --> 00:15:03,589
to hynix talk beyond grep practical

00:14:59,749 --> 00:15:06,049
locking and metrics on sunday so those

00:15:03,589 --> 00:15:08,749
are rules and tools which are things you

00:15:06,049 --> 00:15:10,699
should always use and technologies that

00:15:08,749 --> 00:15:13,730
are sometimes clickable to your problem

00:15:10,699 --> 00:15:15,949
set now we're gonna dive into techniques

00:15:13,730 --> 00:15:19,100
which are strategies you can use as

00:15:15,949 --> 00:15:20,899
appropriate the first one I like is pair

00:15:19,100 --> 00:15:22,759
debugging if you've ever done pair

00:15:20,899 --> 00:15:25,429
programming this is probably a familiar

00:15:22,759 --> 00:15:27,889
concept get a friend get a co-worker

00:15:25,429 --> 00:15:30,079
mentor whoever and sit with them or

00:15:27,889 --> 00:15:32,529
stand with them and talk through what

00:15:30,079 --> 00:15:34,660
you're working on and why it's difficult

00:15:32,529 --> 00:15:36,100
so for me it's it's always

00:15:34,660 --> 00:15:37,930
to talk through what I'm thinking about

00:15:36,100 --> 00:15:39,550
but it's super important because you'll

00:15:37,930 --> 00:15:41,500
find that sometimes you'll be looking at

00:15:39,550 --> 00:15:42,699
something in a debugger and you and your

00:15:41,500 --> 00:15:45,100
friend will have completely different

00:15:42,699 --> 00:15:47,199
interpretations of what it means when

00:15:45,100 --> 00:15:47,500
you hit one of those points talk about

00:15:47,199 --> 00:15:49,839
it

00:15:47,500 --> 00:15:51,910
don't go forward don't jump to the next

00:15:49,839 --> 00:15:53,889
function don't go back to your terminal

00:15:51,910 --> 00:15:56,139
until you both understand what the other

00:15:53,889 --> 00:15:57,220
person is thinking it's very likely that

00:15:56,139 --> 00:15:59,920
one or both of you has a

00:15:57,220 --> 00:16:01,779
misunderstanding and reconciling that

00:15:59,920 --> 00:16:05,350
might help reconcile the behavior of

00:16:01,779 --> 00:16:07,360
your program because the assumption that

00:16:05,350 --> 00:16:08,860
you or your friend is making could be

00:16:07,360 --> 00:16:13,300
the same assumption that led to the bug

00:16:08,860 --> 00:16:15,970
in the program this next one is probably

00:16:13,300 --> 00:16:18,009
my single favorite strategy the idea is

00:16:15,970 --> 00:16:21,129
pretty simple oftentimes we discover

00:16:18,009 --> 00:16:23,079
bugs in very very large programs you

00:16:21,129 --> 00:16:25,480
want to find a much smaller program that

00:16:23,079 --> 00:16:27,819
fails in the same way as the original

00:16:25,480 --> 00:16:30,670
program and try to increasingly make

00:16:27,819 --> 00:16:32,230
that program smaller and smaller you

00:16:30,670 --> 00:16:35,410
don't just want to steal lines of code

00:16:32,230 --> 00:16:37,000
you want as few moving parts for example

00:16:35,410 --> 00:16:39,759
you might try to remove as many

00:16:37,000 --> 00:16:41,920
third-party dependencies if your program

00:16:39,759 --> 00:16:44,110
is that you concurrency or randomness

00:16:41,920 --> 00:16:46,230
try to remove those and see if it's

00:16:44,110 --> 00:16:48,730
still possible to produce the results

00:16:46,230 --> 00:16:51,490
reducing the size of this reproducing

00:16:48,730 --> 00:16:53,680
program means less code that you have to

00:16:51,490 --> 00:16:55,540
read because we're always going to read

00:16:53,680 --> 00:16:58,720
all the code and fewer potential

00:16:55,540 --> 00:17:01,240
culprits even more importantly if your

00:16:58,720 --> 00:17:03,040
bug is a result of bad interactions the

00:17:01,240 --> 00:17:05,770
number of interactions you have between

00:17:03,040 --> 00:17:07,240
two components scales quadratically with

00:17:05,770 --> 00:17:09,579
a number of things for whatever

00:17:07,240 --> 00:17:11,919
definition of thing in your program so

00:17:09,579 --> 00:17:14,110
each one element you remove from your

00:17:11,919 --> 00:17:16,689
program is a massive reduction in the

00:17:14,110 --> 00:17:18,699
number of possible interactions if you

00:17:16,689 --> 00:17:21,189
find that when you remove something the

00:17:18,699 --> 00:17:23,140
bug disappears is a fantastic first

00:17:21,189 --> 00:17:25,299
place to get started looking but

00:17:23,140 --> 00:17:27,640
remember failure to reproduce something

00:17:25,299 --> 00:17:30,850
if it's a random or not always occurring

00:17:27,640 --> 00:17:32,440
bug is not the same as ensuring that

00:17:30,850 --> 00:17:34,419
that really does not cause the bug

00:17:32,440 --> 00:17:36,490
sometimes assuming that just because

00:17:34,419 --> 00:17:38,230
it's showing up less often or maybe

00:17:36,490 --> 00:17:40,240
hasn't reproduced in a while assuming

00:17:38,230 --> 00:17:42,159
the bug is really gone can lead you

00:17:40,240 --> 00:17:44,110
astray so make sure you keep track of

00:17:42,159 --> 00:17:46,419
whether you've proved a bug doesn't

00:17:44,110 --> 00:17:48,270
exist or merely fail to prove it doesn't

00:17:46,419 --> 00:17:51,180
exist

00:17:48,270 --> 00:17:53,760
a good strategy to minimize something is

00:17:51,180 --> 00:17:56,190
that if you have a function just in

00:17:53,760 --> 00:17:58,890
you've got some call in your reproducing

00:17:56,190 --> 00:18:01,590
script take that and just replace it

00:17:58,890 --> 00:18:04,440
with the result if we're placing that

00:18:01,590 --> 00:18:06,720
with the result is not does not produce

00:18:04,440 --> 00:18:08,220
the same behavior dig inside that

00:18:06,720 --> 00:18:12,240
function and see how it interacts with

00:18:08,220 --> 00:18:14,430
other components if you do a new release

00:18:12,240 --> 00:18:15,900
of your software in five minutes later

00:18:14,430 --> 00:18:18,030
you start getting emails with trace

00:18:15,900 --> 00:18:19,980
backs it's a fair about your release

00:18:18,030 --> 00:18:21,450
cause the problem and the first thing

00:18:19,980 --> 00:18:23,460
you probably want to do is look into

00:18:21,450 --> 00:18:25,290
what change and how that change

00:18:23,460 --> 00:18:28,500
intersects with the trace bets you're

00:18:25,290 --> 00:18:30,360
seeing however there's no law of the

00:18:28,500 --> 00:18:32,300
universe that requires the most recent

00:18:30,360 --> 00:18:34,710
change in your code to cause a bug

00:18:32,300 --> 00:18:37,860
sometimes changes are in the environment

00:18:34,710 --> 00:18:40,200
how your users are using your tool or

00:18:37,860 --> 00:18:42,180
anything else or it can be entirely

00:18:40,200 --> 00:18:46,200
unrelated to something you just changed

00:18:42,180 --> 00:18:48,300
those are unlikely but possible if the

00:18:46,200 --> 00:18:50,040
bug is really a regression something

00:18:48,300 --> 00:18:52,590
that used to work but became broken

00:18:50,040 --> 00:18:54,300
along the way it's about incredibly

00:18:52,590 --> 00:18:57,750
valuable to track down exactly what

00:18:54,300 --> 00:18:59,610
change introduced the bug for this you

00:18:57,750 --> 00:19:01,260
can use git bisect or whatever the

00:18:59,610 --> 00:19:03,360
command in your version control system

00:19:01,260 --> 00:19:06,510
is to quickly narrow down which commits

00:19:03,360 --> 00:19:08,790
caused a bug you when you're debugging a

00:19:06,510 --> 00:19:10,140
sufficiently complex problem it's quite

00:19:08,790 --> 00:19:12,000
likely you'll stumble across other

00:19:10,140 --> 00:19:13,860
things that are broken you'll find a

00:19:12,000 --> 00:19:15,450
configuration file on the server that's

00:19:13,860 --> 00:19:18,210
in the wrong directory and has the wrong

00:19:15,450 --> 00:19:20,010
settings you'll find code that just you

00:19:18,210 --> 00:19:22,620
will just mutter to yourself how did

00:19:20,010 --> 00:19:24,720
this ever work as you encounter those

00:19:22,620 --> 00:19:28,080
you need to continually ask yourself

00:19:24,720 --> 00:19:30,450
does this symptom or does this cause

00:19:28,080 --> 00:19:33,270
explain the symptoms I'm seeing if the

00:19:30,450 --> 00:19:35,250
answer is no take a note file a bug to

00:19:33,270 --> 00:19:37,890
look at it later and keep digging into

00:19:35,250 --> 00:19:39,450
the actual source of your bug the

00:19:37,890 --> 00:19:41,100
corollary of this is that when you're

00:19:39,450 --> 00:19:43,410
not engaged in one of these hideously

00:19:41,100 --> 00:19:45,600
complex debugging sessions you should

00:19:43,410 --> 00:19:47,790
always be doing constant cleanup of your

00:19:45,600 --> 00:19:48,960
codebase when you're actually in the

00:19:47,790 --> 00:19:51,390
thick of it you don't want to be

00:19:48,960 --> 00:19:52,620
distracted by random broken things that

00:19:51,390 --> 00:19:55,860
are not the broken thing you're looking

00:19:52,620 --> 00:19:57,630
for complex system failures are almost

00:19:55,860 --> 00:20:00,300
never caused by a single thing being

00:19:57,630 --> 00:20:01,600
broken they're caused by a series of

00:20:00,300 --> 00:20:04,660
smaller interconnected

00:20:01,600 --> 00:20:07,150
failures if you fix the small failures

00:20:04,660 --> 00:20:08,500
early you can avoid them interacting

00:20:07,150 --> 00:20:14,470
with other things become large and

00:20:08,500 --> 00:20:16,870
complex if you first notice your bug in

00:20:14,470 --> 00:20:19,510
a production environments your first

00:20:16,870 --> 00:20:20,830
goal should be to encounter to get the

00:20:19,510 --> 00:20:22,990
bug to reproduce somewhere not in

00:20:20,830 --> 00:20:24,580
production being in production

00:20:22,990 --> 00:20:27,309
inevitably limits the set of tool and

00:20:24,580 --> 00:20:29,049
you can bring to bear on a problem many

00:20:27,309 --> 00:20:31,600
of you bugging tools do things like slow

00:20:29,049 --> 00:20:33,850
down the prop the program or produce

00:20:31,600 --> 00:20:36,419
very large outputs it's pretty hard to

00:20:33,850 --> 00:20:39,429
get PDB inside of a production server

00:20:36,419 --> 00:20:40,840
and you know so doing these things in

00:20:39,429 --> 00:20:42,549
production would disrupt your other

00:20:40,840 --> 00:20:46,120
users which are working fine and

00:20:42,549 --> 00:20:47,650
probably make your boss mad get the bug

00:20:46,120 --> 00:20:50,440
onto your development environment as

00:20:47,650 --> 00:20:52,330
quickly as possible that said sometimes

00:20:50,440 --> 00:20:54,970
the production environment is a source

00:20:52,330 --> 00:20:56,530
of the bug and you just can't get it to

00:20:54,970 --> 00:20:59,470
cooperate and reproduce itself on your

00:20:56,530 --> 00:21:01,570
laptop in those cases scaling up your

00:20:59,470 --> 00:21:03,610
loose usage of non-invasive debugging

00:21:01,570 --> 00:21:05,380
techniques like logging and metrics are

00:21:03,610 --> 00:21:07,960
incredibly valuable to understand what's

00:21:05,380 --> 00:21:10,120
triggering the bog so that's a lot of

00:21:07,960 --> 00:21:11,919
theory what does this all actually look

00:21:10,120 --> 00:21:13,870
like in practice so this is a story of a

00:21:11,919 --> 00:21:16,720
bug that took three people with a

00:21:13,870 --> 00:21:18,789
combined 25 plus years of programming

00:21:16,720 --> 00:21:20,980
experience about a day or two to debug

00:21:18,789 --> 00:21:24,039
with probably 15 hours of our time

00:21:20,980 --> 00:21:25,510
invested in it so for those who you're

00:21:24,039 --> 00:21:28,570
not familiar

00:21:25,510 --> 00:21:30,010
spawning processes on a POSIX or UNIX

00:21:28,570 --> 00:21:32,140
machine is much more complicated than

00:21:30,010 --> 00:21:34,299
should be or than the sub process module

00:21:32,140 --> 00:21:37,330
makes it look they're based on a pair of

00:21:34,299 --> 00:21:39,309
cysts calls called fork and exact fork

00:21:37,330 --> 00:21:42,280
duplicates what the memory of your

00:21:39,309 --> 00:21:44,679
program looks like and follows yogi

00:21:42,280 --> 00:21:46,900
Berra's mantra when you come to a fork

00:21:44,679 --> 00:21:49,030
in the road take both so what will

00:21:46,900 --> 00:21:51,700
continue executing along both paths and

00:21:49,030 --> 00:21:54,760
now two independent processes and a

00:21:51,700 --> 00:21:56,440
second syscall exact which replaces the

00:21:54,760 --> 00:21:58,390
contents of the memory of your program

00:21:56,440 --> 00:22:01,270
with some other new program that starts

00:21:58,390 --> 00:22:03,220
running because this is vaguely

00:22:01,270 --> 00:22:05,260
hideously complex and often memory

00:22:03,220 --> 00:22:07,360
expensive to copy the entire state of

00:22:05,260 --> 00:22:10,090
your program a new syscall was

00:22:07,360 --> 00:22:12,429
introduced sorry not a new Cisco a new

00:22:10,090 --> 00:22:14,750
library function was introduced but 20

00:22:12,429 --> 00:22:16,190
years ago called POSIX spawn

00:22:14,750 --> 00:22:20,200
which looks more like the sub-process

00:22:16,190 --> 00:22:22,790
module right none of this to weird

00:22:20,200 --> 00:22:24,470
simultaneously executing things here is

00:22:22,790 --> 00:22:26,150
a program I would like to run here are

00:22:24,470 --> 00:22:28,940
some arguments please run that for me

00:22:26,150 --> 00:22:30,740
unfortunately it's not widely used the

00:22:28,940 --> 00:22:33,980
Python standard library doesn't expose

00:22:30,740 --> 00:22:36,620
it and so my friend David wanted to

00:22:33,980 --> 00:22:37,760
write some Python bindings to this so he

00:22:36,620 --> 00:22:41,000
could make usage of it in another

00:22:37,760 --> 00:22:42,680
program he was working on he's working

00:22:41,000 --> 00:22:44,840
on this bug he's writing tests he's

00:22:42,680 --> 00:22:47,150
writing code in that order and he gets

00:22:44,840 --> 00:22:49,010
to a tests that's failing for reasons he

00:22:47,150 --> 00:22:52,250
can't understand it's giving him an

00:22:49,010 --> 00:22:54,560
error code 257 and he has no idea what

00:22:52,250 --> 00:22:57,290
that means that the program is no way

00:22:54,560 --> 00:23:00,620
obviously incorrect he googles a bit and

00:22:57,290 --> 00:23:03,320
it turns out error 257 means POSIX spawn

00:23:00,620 --> 00:23:06,040
hit an internal error somewhere

00:23:03,320 --> 00:23:11,420
partially along the way of its execution

00:23:06,040 --> 00:23:13,790
not super helpful not really specific so

00:23:11,420 --> 00:23:16,850
eventually myself and another coworker

00:23:13,790 --> 00:23:19,070
come over to help take a look at first

00:23:16,850 --> 00:23:20,870
we have sort of an unstructured attempt

00:23:19,070 --> 00:23:22,910
to change the code to figure out what

00:23:20,870 --> 00:23:25,610
exactly is triggering this bug he's got

00:23:22,910 --> 00:23:27,950
like 17 different casts only one of them

00:23:25,610 --> 00:23:30,200
fails so the test that's failing is for

00:23:27,950 --> 00:23:32,030
a feature called add open which

00:23:30,200 --> 00:23:34,460
basically lets you use things like bash

00:23:32,030 --> 00:23:36,650
file redirection programmatically I

00:23:34,460 --> 00:23:38,930
would like to point standard out at this

00:23:36,650 --> 00:23:40,970
file or standard in at this file and

00:23:38,930 --> 00:23:43,430
it's failing so we try messing around

00:23:40,970 --> 00:23:45,620
change in which mode the file is open

00:23:43,430 --> 00:23:47,930
does read versus write matter doesn't

00:23:45,620 --> 00:23:49,640
matter if it's in a pen mode none of

00:23:47,930 --> 00:23:51,620
this is consistently improving our

00:23:49,640 --> 00:23:53,660
ability to trigger this bug the bug is

00:23:51,620 --> 00:23:55,670
occurring every time but you know this

00:23:53,660 --> 00:23:57,680
information is not giving feedback okay

00:23:55,670 --> 00:23:59,330
so the bug is independent of the mode

00:23:57,680 --> 00:24:01,370
it's independent of whether the file

00:23:59,330 --> 00:24:04,490
already exists it's something about add

00:24:01,370 --> 00:24:07,340
open or our bindings to it itself we

00:24:04,490 --> 00:24:09,830
have too many moving parts so since this

00:24:07,340 --> 00:24:11,960
is built on a pretty big stack we've got

00:24:09,830 --> 00:24:16,070
Python code we wrote running inside PI

00:24:11,960 --> 00:24:18,920
dot test using CF fi to bind C code in

00:24:16,070 --> 00:24:21,170
side of Lib C we need to we need to

00:24:18,920 --> 00:24:23,360
reduce the number of moving parts so we

00:24:21,170 --> 00:24:26,179
decide to we know that POSIX spawn is

00:24:23,360 --> 00:24:27,620
not super widely used to make the

00:24:26,179 --> 00:24:28,370
decision we're going to try to write a

00:24:27,620 --> 00:24:30,140
small seat

00:24:28,370 --> 00:24:32,480
program you know 20 lines or something

00:24:30,140 --> 00:24:35,360
see if that triggers the bargain C

00:24:32,480 --> 00:24:38,270
program runs fine okay we must introduce

00:24:35,360 --> 00:24:41,420
the bug ourselves let's make the world's

00:24:38,270 --> 00:24:43,820
most minimal CFI bindings you know no

00:24:41,420 --> 00:24:47,030
unit test runner no like no functions

00:24:43,820 --> 00:24:48,890
like write it inside o file still no bug

00:24:47,030 --> 00:24:51,440
okay this is pretty weird

00:24:48,890 --> 00:24:55,670
like this code looks identical to what

00:24:51,440 --> 00:24:57,860
we actually have inside of our test okay

00:24:55,670 --> 00:25:00,770
let's copy this code from our test file

00:24:57,860 --> 00:25:02,240
inside into a PI dot test maybe spider

00:25:00,770 --> 00:25:06,110
test is doing something weird that

00:25:02,240 --> 00:25:08,360
triggers some edge case we copy our

00:25:06,110 --> 00:25:12,290
script our tiny script into a test

00:25:08,360 --> 00:25:14,900
function pass is fine okay this is weird

00:25:12,290 --> 00:25:17,929
what is going on we look at the diff

00:25:14,900 --> 00:25:20,960
what is the diff

00:25:17,929 --> 00:25:22,880
and inside of our test function now in

00:25:20,960 --> 00:25:25,160
the previous test and we see that

00:25:22,880 --> 00:25:27,830
there's actually a single line change

00:25:25,160 --> 00:25:29,570
we moved where whether a variable was

00:25:27,830 --> 00:25:31,130
assigned to a string

00:25:29,570 --> 00:25:33,080
whether sorry whether a string was

00:25:31,130 --> 00:25:35,270
assigned to a variable or whether it was

00:25:33,080 --> 00:25:36,490
just put directly inside of the function

00:25:35,270 --> 00:25:39,260
call

00:25:36,490 --> 00:25:42,290
Glyph who's one of the folks debugging

00:25:39,260 --> 00:25:43,820
with us just has a flash of insight this

00:25:42,290 --> 00:25:46,070
is a rough counting bug this is a

00:25:43,820 --> 00:25:48,350
garbage collector bug something weird is

00:25:46,070 --> 00:25:50,270
going on and so it matters whether it's

00:25:48,350 --> 00:25:54,700
in a variable and therefore being kept

00:25:50,270 --> 00:25:56,960
alive or not so at this point we're like

00:25:54,700 --> 00:25:59,450
we're all thinking about what is the

00:25:56,960 --> 00:26:02,150
spec say the spec for this POSIX Wan

00:25:59,450 --> 00:26:04,340
function says it must keep that it must

00:26:02,150 --> 00:26:06,080
do a copy of the string so it shouldn't

00:26:04,340 --> 00:26:08,270
matter whether the string is being rough

00:26:06,080 --> 00:26:10,790
counted or what it should always it

00:26:08,270 --> 00:26:13,850
should be managed by Lib C we pull up

00:26:10,790 --> 00:26:15,679
the GFC source code and indeed we

00:26:13,850 --> 00:26:18,020
immediately recognize that it doesn't do

00:26:15,679 --> 00:26:19,730
a copy at all so the fact that Python

00:26:18,020 --> 00:26:21,350
was collecting this garbage collecting

00:26:19,730 --> 00:26:23,420
the string was the source of the problem

00:26:21,350 --> 00:26:26,300
David comes up with a quick workaround

00:26:23,420 --> 00:26:28,100
we can use and the bug is solved after

00:26:26,300 --> 00:26:30,230
you know only two days staring and

00:26:28,100 --> 00:26:31,910
thinking really hard we would have I

00:26:30,230 --> 00:26:33,170
don't think ever figured this out if we

00:26:31,910 --> 00:26:34,210
had not been willing to look at the G

00:26:33,170 --> 00:26:36,620
Lib C source code

00:26:34,210 --> 00:26:39,080
we also would never figured out if we

00:26:36,620 --> 00:26:42,290
were not all there each person had some

00:26:39,080 --> 00:26:44,120
insight along the way that was necessary

00:26:42,290 --> 00:26:46,970
I don't really have a conclusion to

00:26:44,120 --> 00:26:49,130
share with you debugging is debugging is

00:26:46,970 --> 00:26:50,870
not an exact science the scientific

00:26:49,130 --> 00:26:53,390
method can be a useful mental model for

00:26:50,870 --> 00:26:55,430
thinking about it each debugging episode

00:26:53,390 --> 00:26:57,620
looks different sometimes the only thing

00:26:55,430 --> 00:26:58,940
that works is staring at the code until

00:26:57,620 --> 00:27:01,070
an idea pops in your head

00:26:58,940 --> 00:27:02,660
other times staring at the debugger and

00:27:01,070 --> 00:27:03,890
print statements will get you towards

00:27:02,660 --> 00:27:05,630
the right solution

00:27:03,890 --> 00:27:07,700
I hope this talk has equipped you with

00:27:05,630 --> 00:27:09,260
different ideas and techniques that you

00:27:07,700 --> 00:27:11,360
can use when you find yourself in one of

00:27:09,260 --> 00:27:13,160
these circumstances I think we've got a

00:27:11,360 --> 00:27:14,660
minute or two for questions yeah we have

00:27:13,160 --> 00:27:16,250
a minute or two for questions so there's

00:27:14,660 --> 00:27:18,320
a microphone right in the middle of the

00:27:16,250 --> 00:27:20,060
room so if you could line up if you have

00:27:18,320 --> 00:27:21,860
a question for Alex and in the meantime

00:27:20,060 --> 00:27:24,400
while people line up please give them a

00:27:21,860 --> 00:27:24,400
round of applause

00:27:30,730 --> 00:27:37,220
thank you oh it doesn't doesn't look

00:27:35,060 --> 00:27:38,690
like we have any questions so yeah thank

00:27:37,220 --> 00:27:41,590
you all for coming along and our next

00:27:38,690 --> 00:27:44,740
talk will begin in ten minutes time

00:27:41,590 --> 00:27:44,740

YouTube URL: https://www.youtube.com/watch?v=ij99SGGEX34


