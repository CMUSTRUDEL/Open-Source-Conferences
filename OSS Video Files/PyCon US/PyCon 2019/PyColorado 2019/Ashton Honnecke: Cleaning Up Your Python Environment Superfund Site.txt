Title: Ashton Honnecke: Cleaning Up Your Python Environment Superfund Site
Publication date: 2019-10-22
Playlist: PyColorado 2019
Description: 
	Does your Python environment look like Randall Munroe's (of XKCD fame) Python environment superfund site? (https://xkcd.com/1987/) What would happen to your sprint if your laptop got hit by a bus? How can you mitigate that?
Captions: 
	00:00:00,370 --> 00:00:44,730
[Music]

00:00:42,780 --> 00:00:46,829
thanks to Jim and thanks for everybody

00:00:44,730 --> 00:00:48,900
it's really happy to be here all right

00:00:46,829 --> 00:00:51,600
my dry run did not include microphone so

00:00:48,900 --> 00:00:53,100
I'm already behind schedule all right

00:00:51,600 --> 00:00:55,770
clearing up your Python Superfund site

00:00:53,100 --> 00:00:58,400
so that this talk isn't really about

00:00:55,770 --> 00:01:01,710
Python this talk is about effective

00:00:58,400 --> 00:01:04,680
usage of containers to isolate your

00:01:01,710 --> 00:01:07,340
application from its environment one of

00:01:04,680 --> 00:01:09,270
the things that that does for you is it

00:01:07,340 --> 00:01:10,560
happens to clean up your Python

00:01:09,270 --> 00:01:14,130
Superfund site because you're not

00:01:10,560 --> 00:01:15,149
installing everything locally so ideally

00:01:14,130 --> 00:01:17,550
what I would like to do is have

00:01:15,149 --> 00:01:20,039
everybody come out of this talk with a

00:01:17,550 --> 00:01:23,539
good idea of what you can get out of

00:01:20,039 --> 00:01:27,750
containers and how to apply them

00:01:23,539 --> 00:01:30,800
appropriately so there are four tools

00:01:27,750 --> 00:01:32,610
that I think you can think of as

00:01:30,800 --> 00:01:34,530
concentric circles around your

00:01:32,610 --> 00:01:36,720
application that are they're going to

00:01:34,530 --> 00:01:39,000
isolate your application from its

00:01:36,720 --> 00:01:40,590
environment virtual environments

00:01:39,000 --> 00:01:42,660
whatever package manager you like

00:01:40,590 --> 00:01:44,399
whatever flavor you like of that the

00:01:42,660 --> 00:01:46,679
actual virtual machine container docker

00:01:44,399 --> 00:01:49,170
and then your service composition which

00:01:46,679 --> 00:01:52,289
is a docker compose file that's a that's

00:01:49,170 --> 00:01:54,450
a group of services inside of an added

00:01:52,289 --> 00:01:56,520
firewall that all run on your machine

00:01:54,450 --> 00:01:58,289
and that's what I really want to talk

00:01:56,520 --> 00:01:59,959
about because I think that's the part

00:01:58,289 --> 00:02:03,569
that people don't really get about

00:01:59,959 --> 00:02:06,390
containerization it seems silly and

00:02:03,569 --> 00:02:08,729
redundant I think particularly when

00:02:06,390 --> 00:02:11,280
you're looking at a simple example so

00:02:08,729 --> 00:02:13,110
we're gonna take an open source high

00:02:11,280 --> 00:02:14,700
frequency crypto currency trading bot

00:02:13,110 --> 00:02:17,760
that has a docker file and a virtual

00:02:14,700 --> 00:02:24,330
environment and we're going to add a

00:02:17,760 --> 00:02:28,260
docker compose to it okay so docker

00:02:24,330 --> 00:02:30,390
compose file just starts with a version

00:02:28,260 --> 00:02:32,010
and then a list of services so this is

00:02:30,390 --> 00:02:36,030
Ollie amyl it's all really very

00:02:32,010 --> 00:02:41,480
straightforward and we're gonna set up a

00:02:36,030 --> 00:02:41,480
service for our application

00:02:44,150 --> 00:02:53,819
and we're going to point it at just the

00:02:46,980 --> 00:03:00,150
regular docker file question oh yeah I

00:02:53,819 --> 00:03:06,330
probably can you can get pretty big with

00:03:00,150 --> 00:03:09,360
this okay and so that's all you actually

00:03:06,330 --> 00:03:10,739
need to to tell you docker file hey

00:03:09,360 --> 00:03:13,920
there's a service inside of this that

00:03:10,739 --> 00:03:15,480
you should spin up it's this is a pretty

00:03:13,920 --> 00:03:17,880
trivial example and so it doesn't

00:03:15,480 --> 00:03:22,500
actually do much for you right now

00:03:17,880 --> 00:03:27,750
but you can see here I have a docker

00:03:22,500 --> 00:03:36,260
compose aliased - okay so I did

00:03:27,750 --> 00:03:36,260
something wrong in here oh all right

00:03:43,220 --> 00:03:48,840
all right so a lot of the doctor

00:03:46,590 --> 00:03:51,720
commands map one to one from Doctor to

00:03:48,840 --> 00:03:52,770
doctor compose so run build exact so if

00:03:51,720 --> 00:03:55,350
you're familiar with doctor you're

00:03:52,770 --> 00:03:57,360
familiar with docker compose but dr.

00:03:55,350 --> 00:03:59,100
post has some other ones PS so just look

00:03:57,360 --> 00:04:00,360
what's running up which brings

00:03:59,100 --> 00:04:05,670
everything up down which brings

00:04:00,360 --> 00:04:09,180
everything down and so like for instance

00:04:05,670 --> 00:04:10,530
we could just run docker build right

00:04:09,180 --> 00:04:13,860
here and it looks for the same docker

00:04:10,530 --> 00:04:15,330
file like just that's how you would

00:04:13,860 --> 00:04:19,320
build it regularly for docker but we can

00:04:15,330 --> 00:04:23,280
also do docker compose up which starts

00:04:19,320 --> 00:04:25,770
it inside of this tatted firewall ok and

00:04:23,280 --> 00:04:27,570
so what we're seeing here is this is the

00:04:25,770 --> 00:04:30,600
output from the container that's running

00:04:27,570 --> 00:04:32,419
inside of your service collection and

00:04:30,600 --> 00:04:34,260
then you've got on the very left side

00:04:32,419 --> 00:04:35,730
where it's coming from which is the

00:04:34,260 --> 00:04:38,010
application and then you know whatever

00:04:35,730 --> 00:04:40,290
the logs are this is actually running in

00:04:38,010 --> 00:04:42,390
like a dry run mode it's pretending like

00:04:40,290 --> 00:04:48,090
it's trading cryptocurrency with an

00:04:42,390 --> 00:04:50,400
exchange okay so that's cute sure but we

00:04:48,090 --> 00:04:55,950
don't really have anything interesting

00:04:50,400 --> 00:05:03,720
yet so a good a good example I think is

00:04:55,950 --> 00:05:05,370
a testing service so oh and don't write

00:05:03,720 --> 00:05:09,120
dr. phibes from scratch copying they

00:05:05,370 --> 00:05:14,340
like make files ok so we've got this pi

00:05:09,120 --> 00:05:19,530
test service and I know from having done

00:05:14,340 --> 00:05:22,370
this that that it actually needs a

00:05:19,530 --> 00:05:22,370
different docker file

00:05:23,270 --> 00:05:28,840
and that's nope

00:05:31,280 --> 00:05:38,270
and we'll just have it mount the same

00:05:33,970 --> 00:05:41,210
the same code now the you can have any

00:05:38,270 --> 00:05:43,639
number of volumes to map here right now

00:05:41,210 --> 00:05:45,259
this is just mapping everything but you

00:05:43,639 --> 00:05:47,240
don't necessarily always want to do that

00:05:45,259 --> 00:05:50,210
you might just want to map a

00:05:47,240 --> 00:05:51,560
subdirectory or some smaller part of

00:05:50,210 --> 00:05:53,000
your application not the whole thing but

00:05:51,560 --> 00:05:54,789
we're just going to do the whole thing

00:05:53,000 --> 00:05:58,880
right here okay

00:05:54,789 --> 00:06:00,560
so let's stop this and I like to make

00:05:58,880 --> 00:06:02,479
sure that everything is down before you

00:06:00,560 --> 00:06:03,500
bring the back up sometimes if the the

00:06:02,479 --> 00:06:07,970
network is still up

00:06:03,500 --> 00:06:31,490
it gets upset okay no right it's looking

00:06:07,970 --> 00:06:41,620
for a command okay okay all right I

00:06:31,490 --> 00:06:41,620
think that's what it wants no okay

00:06:52,940 --> 00:07:05,310
all right so that didn't work out very

00:07:02,790 --> 00:07:08,250
well but I just hardly set it to the

00:07:05,310 --> 00:07:11,070
branch that does work so we can keep

00:07:08,250 --> 00:07:14,790
doing this all right so we've got our

00:07:11,070 --> 00:07:17,430
application up here this is the the one

00:07:14,790 --> 00:07:19,170
that we had before it's got three

00:07:17,430 --> 00:07:21,570
volumes mounted and it's got a different

00:07:19,170 --> 00:07:23,790
docker file that's installing the

00:07:21,570 --> 00:07:25,560
libraries for Postgres so this is what

00:07:23,790 --> 00:07:27,440
we're gonna use to add the library if

00:07:25,560 --> 00:07:30,600
you just spin it up by itself it'll like

00:07:27,440 --> 00:07:32,370
set up sequel light in your application

00:07:30,600 --> 00:07:34,620
that's great and it's ephemeral and

00:07:32,370 --> 00:07:36,870
whatnot but sometimes you want to have a

00:07:34,620 --> 00:07:40,740
real database we've got another service

00:07:36,870 --> 00:07:42,270
down here this is the this is something

00:07:40,740 --> 00:07:45,780
that this is what I was attempting to

00:07:42,270 --> 00:07:51,120
add this is a PI test service and if you

00:07:45,780 --> 00:07:55,350
go out and look at their they're

00:07:51,120 --> 00:08:00,060
coveralls and then the Travis job you

00:07:55,350 --> 00:08:01,919
can just grab the their PI they're

00:08:00,060 --> 00:08:05,690
probably a test runner and then I drop

00:08:01,919 --> 00:08:18,870
that into this PI test script

00:08:05,690 --> 00:08:24,410
so let's actually let's bring it up like

00:08:18,870 --> 00:08:24,410
that well that's pretty fair

00:08:28,780 --> 00:08:35,180
okay so now we're seeing we're seeing

00:08:33,020 --> 00:08:36,469
two of these instances come up you've

00:08:35,180 --> 00:08:37,490
got your application that's the one

00:08:36,469 --> 00:08:39,649
that's in yellow that's free-trade

00:08:37,490 --> 00:08:41,330
Postgres and then you've got PI test PI

00:08:39,649 --> 00:08:42,709
tests the PI test service is running all

00:08:41,330 --> 00:08:44,570
the unit tests that you would normally

00:08:42,709 --> 00:08:45,970
run but it's starting them up in

00:08:44,570 --> 00:08:48,980
parallel as you start your application

00:08:45,970 --> 00:08:50,270
so this can be really handy if you the

00:08:48,980 --> 00:08:51,860
more often you run your tests the more

00:08:50,270 --> 00:08:54,020
often you're gonna find that broken the

00:08:51,860 --> 00:08:57,649
easier they're gonna be to fix so having

00:08:54,020 --> 00:09:00,709
it just built in to your repository such

00:08:57,649 --> 00:09:01,910
that I don't have to go run a test I

00:09:00,709 --> 00:09:03,560
don't have to do anything I don't have

00:09:01,910 --> 00:09:06,230
to explain to somebody where they are or

00:09:03,560 --> 00:09:09,950
anything the readme just says start

00:09:06,230 --> 00:09:11,390
docker up okay but again this isn't

00:09:09,950 --> 00:09:13,100
particularly interesting

00:09:11,390 --> 00:09:26,540
you can run tests you just have to

00:09:13,100 --> 00:09:27,950
remember to do it okay so know okay so

00:09:26,540 --> 00:09:30,079
now I want to talk about the difference

00:09:27,950 --> 00:09:32,120
between built images and polled images

00:09:30,079 --> 00:09:33,560
so docker hub is a service like pi pi

00:09:32,120 --> 00:09:35,029
where you've got open source images

00:09:33,560 --> 00:09:36,399
there are these containers that live out

00:09:35,029 --> 00:09:40,940
there everything you'd ever want to run

00:09:36,399 --> 00:09:42,860
and so for pi test and free trade up

00:09:40,940 --> 00:09:44,870
here we're actually building these local

00:09:42,860 --> 00:09:46,459
docker files there they're compiling on

00:09:44,870 --> 00:09:48,320
the machine they're building the layers

00:09:46,459 --> 00:09:50,420
and they're loading into dock cache on

00:09:48,320 --> 00:09:52,040
the machine but this one down here is an

00:09:50,420 --> 00:09:54,800
image and it's just pulling Postgres and

00:09:52,040 --> 00:09:56,390
I know that that's an image because I

00:09:54,800 --> 00:10:00,709
use it all the time and I also have that

00:09:56,390 --> 00:10:03,529
cached alright so inside of you've got

00:10:00,709 --> 00:10:05,050
this big NAT 'add wall that's your

00:10:03,529 --> 00:10:09,350
container inside of that you've got

00:10:05,050 --> 00:10:11,209
services and expose is how you tell it's

00:10:09,350 --> 00:10:13,700
how you tell this service that it's got

00:10:11,209 --> 00:10:16,820
access to a port so this is allowing

00:10:13,700 --> 00:10:19,160
anybody outside but not outside of the

00:10:16,820 --> 00:10:20,390
container but it's it's allowing the

00:10:19,160 --> 00:10:23,380
other services to connect to this

00:10:20,390 --> 00:10:23,380
database so

00:10:34,090 --> 00:10:39,110
okay so now I've got a database we've

00:10:37,970 --> 00:10:40,670
got our application and we've got our

00:10:39,110 --> 00:10:41,900
unit tests you know tests are gonna run

00:10:40,670 --> 00:10:44,630
and then it's gonna go think it's

00:10:41,900 --> 00:10:47,090
pretend that's gonna trade okay so now

00:10:44,630 --> 00:10:49,220
depends on this is simply just a

00:10:47,090 --> 00:10:51,050
directive that tells docker compose do

00:10:49,220 --> 00:10:52,700
not start the database before it starts

00:10:51,050 --> 00:10:58,300
your application it doesn't do a health

00:10:52,700 --> 00:11:00,500
check it doc we used to do that but I

00:10:58,300 --> 00:11:02,930
think there's a strong argument be made

00:11:00,500 --> 00:11:05,540
for your application should be robust

00:11:02,930 --> 00:11:08,210
right if it doesn't find the database it

00:11:05,540 --> 00:11:10,160
shouldn't blow up and this is a good way

00:11:08,210 --> 00:11:17,090
to be able to see that test it and think

00:11:10,160 --> 00:11:19,280
about it well if we bring that back up

00:11:17,090 --> 00:11:21,940
it'll start the database and they'll

00:11:19,280 --> 00:11:25,580
start the application I promise okay and

00:11:21,940 --> 00:11:32,120
then toolkit is a little one that I like

00:11:25,580 --> 00:11:35,180
to leave around because okay so darker

00:11:32,120 --> 00:11:39,650
files are intentionally as small and as

00:11:35,180 --> 00:11:42,290
light as possible you ideally want it to

00:11:39,650 --> 00:11:47,150
be really fast to build and really fast

00:11:42,290 --> 00:11:51,070
to deploy so you don't want to have any

00:11:47,150 --> 00:11:54,920
extra stuff on your image so Alpine

00:11:51,070 --> 00:11:58,070
images are they're images that have been

00:11:54,920 --> 00:12:01,460
created for a specific thing they just

00:11:58,070 --> 00:12:05,270
do one thing so say it's Postgres it's a

00:12:01,460 --> 00:12:07,220
database maybe it's I don't know there

00:12:05,270 --> 00:12:09,500
are lots of things out there but you

00:12:07,220 --> 00:12:11,870
can't really expect to find anything on

00:12:09,500 --> 00:12:14,450
there you so for instance if you wanted

00:12:11,870 --> 00:12:20,020
to hop in there and like ping or look at

00:12:14,450 --> 00:12:20,020
a port you just can't do that so

00:12:22,380 --> 00:12:29,210
the exact command well first let's look

00:12:26,190 --> 00:12:33,540
at everything and see that it's up okay

00:12:29,210 --> 00:12:38,610
so we've got our we've got our for

00:12:33,540 --> 00:12:41,250
services and then we can go into this

00:12:38,610 --> 00:12:44,490
toolkit and this is the command that it

00:12:41,250 --> 00:12:46,230
passes in so it passes it in as a shell

00:12:44,490 --> 00:12:47,910
that's the way that you get into docker

00:12:46,230 --> 00:12:49,530
compose you can see the command that

00:12:47,910 --> 00:12:53,910
toolkit is running on the fourth line

00:12:49,530 --> 00:12:56,430
down there is it's hailing it's hailing

00:12:53,910 --> 00:12:59,630
a file called forever txt so it's

00:12:56,430 --> 00:13:04,200
basically just watching tail do nothing

00:12:59,630 --> 00:13:06,450
but so in my little toolkit I do have

00:13:04,200 --> 00:13:08,550
paint and so you can see that docker

00:13:06,450 --> 00:13:11,160
composes automatically you can see that

00:13:08,550 --> 00:13:13,140
paint DB docker compose does name

00:13:11,160 --> 00:13:15,750
resolution of your service names with

00:13:13,140 --> 00:13:19,560
all of the other service names inside of

00:13:15,750 --> 00:13:31,520
your inside of your container and we can

00:13:19,560 --> 00:13:31,520
also Oh cute

00:13:48,070 --> 00:13:59,690
not sure I'm doing that wrong but we

00:13:57,740 --> 00:14:12,080
could just do that and we can see that

00:13:59,690 --> 00:14:14,360
the port is open cool okay so having a

00:14:12,080 --> 00:14:16,160
having a doctor pose file that defines

00:14:14,360 --> 00:14:18,560
all of the services that your

00:14:16,160 --> 00:14:23,060
application needs gives you a lot of

00:14:18,560 --> 00:14:25,250
things it allows you to it allows you to

00:14:23,060 --> 00:14:27,500
store all of your external dependencies

00:14:25,250 --> 00:14:30,620
in a reproducible version controlled

00:14:27,500 --> 00:14:34,130
environment that doesn't fall out of

00:14:30,620 --> 00:14:36,530
date I mean I'm sure everybody here has

00:14:34,130 --> 00:14:38,240
dealt with a 2-page long readme that

00:14:36,530 --> 00:14:40,310
takes a day to install and after you've

00:14:38,240 --> 00:14:42,800
done it somebody says oh yeah well no I

00:14:40,310 --> 00:14:43,070
don't follow that it's wrong it's out of

00:14:42,800 --> 00:14:46,490
date

00:14:43,070 --> 00:14:48,680
right so the readme can be wrong but the

00:14:46,490 --> 00:14:50,750
code can't so if you're always spinning

00:14:48,680 --> 00:14:53,330
up your application with your doc files

00:14:50,750 --> 00:14:54,800
and in your doctor compose you all of a

00:14:53,330 --> 00:14:57,380
sudden have a very reproducible

00:14:54,800 --> 00:14:59,540
environment where you've isolated all of

00:14:57,380 --> 00:15:02,000
the external dependencies libraries

00:14:59,540 --> 00:15:03,050
which version pack Python you're running

00:15:02,000 --> 00:15:05,270
and then obviously everything you've

00:15:03,050 --> 00:15:07,730
done in your package manager that all

00:15:05,270 --> 00:15:09,830
exists in a reproducible place such that

00:15:07,730 --> 00:15:11,600
ideally you could just have a readme

00:15:09,830 --> 00:15:14,300
that says download get download docker

00:15:11,600 --> 00:15:16,610
download docker compose and run doc goes

00:15:14,300 --> 00:15:18,560
up so think about the project that

00:15:16,610 --> 00:15:21,050
you're on right now and let's say you

00:15:18,560 --> 00:15:24,430
got you were you got the task to onboard

00:15:21,050 --> 00:15:27,920
a really really great developer tomorrow

00:15:24,430 --> 00:15:29,480
how long would that take how much of

00:15:27,920 --> 00:15:32,680
your time would that take how much of

00:15:29,480 --> 00:15:35,690
that developers time would that take and

00:15:32,680 --> 00:15:36,950
this works just as well for context

00:15:35,690 --> 00:15:39,350
switching back to something that you

00:15:36,950 --> 00:15:43,160
wrote a year ago on maybe a different

00:15:39,350 --> 00:15:45,320
machine you can seamlessly move back

00:15:43,160 --> 00:15:47,090
into the project run docker compose up

00:15:45,320 --> 00:15:53,300
and see that everything is working or

00:15:47,090 --> 00:15:56,400
that it isn't okay we talked about build

00:15:53,300 --> 00:15:58,860
versus pull name resolution

00:15:56,400 --> 00:16:03,840
we talked about depends on ports versus

00:15:58,860 --> 00:16:05,400
expose cool so expose this is I think I

00:16:03,840 --> 00:16:07,710
think the name this terribly expose

00:16:05,400 --> 00:16:09,390
opens the ports to the other services

00:16:07,710 --> 00:16:13,980
inside your docker compose service

00:16:09,390 --> 00:16:16,470
catalog ports actually pokes a hole in

00:16:13,980 --> 00:16:18,300
the external nap so let's say you're not

00:16:16,470 --> 00:16:20,910
like me and you have a GUI that you like

00:16:18,300 --> 00:16:23,160
to use on a database you can open up any

00:16:20,910 --> 00:16:26,940
port so you could map you know port 15

00:16:23,160 --> 00:16:29,610
432 from the external interface that

00:16:26,940 --> 00:16:31,890
just shows up on the localhost into the

00:16:29,610 --> 00:16:33,870
database that's a that's in your service

00:16:31,890 --> 00:16:36,600
and then you know get in there with data

00:16:33,870 --> 00:16:41,790
grip or whatever it is that that you

00:16:36,600 --> 00:16:44,040
like so we set up I we set up a unit

00:16:41,790 --> 00:16:46,530
testing service in there that you can

00:16:44,040 --> 00:16:48,630
run in and you don't have to spin

00:16:46,530 --> 00:16:49,890
everything up at once you can you can

00:16:48,630 --> 00:16:54,390
start three or four of them and then

00:16:49,890 --> 00:16:56,430
start another one this works unit test

00:16:54,390 --> 00:16:58,650
testing is kind of a contrived example

00:16:56,430 --> 00:17:00,630
it works really well with integration

00:16:58,650 --> 00:17:02,580
testing so throw a database in there

00:17:00,630 --> 00:17:04,040
right we saw how to do that it's really

00:17:02,580 --> 00:17:07,320
easy it's really fast

00:17:04,040 --> 00:17:10,170
throw a service in there that loads

00:17:07,320 --> 00:17:13,290
fixtures right have that start up after

00:17:10,170 --> 00:17:15,690
the database and then a service that

00:17:13,290 --> 00:17:18,150
performs integration tests so like let's

00:17:15,690 --> 00:17:20,940
say you're building out a flask API

00:17:18,150 --> 00:17:23,790
that's got a database behind it you

00:17:20,940 --> 00:17:26,460
could have your application your unit

00:17:23,790 --> 00:17:29,340
tests your lint tests full suite of

00:17:26,460 --> 00:17:31,080
integration tests all just run inside of

00:17:29,340 --> 00:17:34,110
this docker compose now all of a sudden

00:17:31,080 --> 00:17:36,810
you've got this encapsulated portable

00:17:34,110 --> 00:17:39,000
thing that runs anywhere and you can

00:17:36,810 --> 00:17:44,310
just move that right into your CI CD

00:17:39,000 --> 00:17:45,570
pipeline or upload it to e CES or you

00:17:44,310 --> 00:17:49,110
know however you want to deploy your

00:17:45,570 --> 00:17:52,280
stuff alright so there's some links down

00:17:49,110 --> 00:17:54,600
here free trade is the the open source

00:17:52,280 --> 00:17:56,550
high frequency trading bot that we

00:17:54,600 --> 00:17:58,080
wrapped it didn't really matter that it

00:17:56,550 --> 00:18:00,660
was this it didn't actually even matter

00:17:58,080 --> 00:18:04,470
there was Python but I do think Python

00:18:00,660 --> 00:18:06,390
as the slide showed Python has a

00:18:04,470 --> 00:18:07,860
reputation for messy virtual

00:18:06,390 --> 00:18:08,999
environments and so I think it's a good

00:18:07,860 --> 00:18:13,889
language to

00:18:08,999 --> 00:18:17,489
to use to really think about this I did

00:18:13,889 --> 00:18:19,590
put a PR out for that and then these

00:18:17,489 --> 00:18:21,749
were the links to the code coverage and

00:18:19,590 --> 00:18:29,729
Travis job that I pulled the test runner

00:18:21,749 --> 00:18:37,440
stuff from okay so no I was going to

00:18:29,729 --> 00:18:40,859
talk about docker file structure okay so

00:18:37,440 --> 00:18:44,129
I don't know how familiar everybody is

00:18:40,859 --> 00:18:45,659
with docker files but so if if you're

00:18:44,129 --> 00:18:49,080
dr. expert this might be kind of boring

00:18:45,659 --> 00:18:50,340
so up on the top line the from is just

00:18:49,080 --> 00:18:53,159
saying that we're gonna pull in a boon

00:18:50,340 --> 00:18:55,950
to image this is on docker hub that

00:18:53,159 --> 00:18:57,210
already has Python installed it installs

00:18:55,950 --> 00:19:00,899
a couple other things that are required

00:18:57,210 --> 00:19:03,629
for the application and you'll notice

00:19:00,899 --> 00:19:06,389
these are all on one line what that does

00:19:03,629 --> 00:19:09,080
with docker is when docker processes the

00:19:06,389 --> 00:19:12,029
file it executes that entire line and

00:19:09,080 --> 00:19:14,909
that creates a layer that docker then

00:19:12,029 --> 00:19:17,009
caches so the next time you spin it up

00:19:14,909 --> 00:19:20,039
and you saw that it built that really

00:19:17,009 --> 00:19:22,379
quickly I think the next time you spin

00:19:20,039 --> 00:19:25,109
it up it doesn't rebuild any of the

00:19:22,379 --> 00:19:26,999
layers that are exactly the same so if

00:19:25,109 --> 00:19:28,859
you don't change the docker file at all

00:19:26,999 --> 00:19:31,169
it's just a few seconds to start the

00:19:28,859 --> 00:19:32,399
machine back up and if you change

00:19:31,169 --> 00:19:34,649
something all the way down at the bottom

00:19:32,399 --> 00:19:36,059
it's also still just a few seconds

00:19:34,649 --> 00:19:37,710
because it's going to use this very last

00:19:36,059 --> 00:19:40,169
layer and then just do something very

00:19:37,710 --> 00:19:42,440
little on top of that being able to run

00:19:40,169 --> 00:19:46,349
your tests effortlessly and quickly is

00:19:42,440 --> 00:19:47,580
really nice means you're gonna run them

00:19:46,349 --> 00:19:48,570
more often means you're gonna find where

00:19:47,580 --> 00:19:51,239
your stuff's broken it means you're

00:19:48,570 --> 00:20:00,289
gonna fix it okay we talked about alpine

00:19:51,239 --> 00:20:03,649
images okay so this I think is a good

00:20:00,289 --> 00:20:03,649
example of

00:20:08,220 --> 00:20:25,059
this is a oh this is an API this is a

00:20:19,030 --> 00:20:27,460
database and it spins up and it's so

00:20:25,059 --> 00:20:30,670
this is a little app that wraps a limbic

00:20:27,460 --> 00:20:33,940
which is an ORM and so this is this is

00:20:30,670 --> 00:20:36,580
just for migrations it spins it up it

00:20:33,940 --> 00:20:39,070
runs all of the migrations runs them up

00:20:36,580 --> 00:20:40,360
runs them all the way back down and then

00:20:39,070 --> 00:20:42,940
runs them all the way back up

00:20:40,360 --> 00:20:45,280
so once you've run this docker compose

00:20:42,940 --> 00:20:47,200
file you can be sure that all of those

00:20:45,280 --> 00:20:56,830
migrations are going to run flawlessly

00:20:47,200 --> 00:20:59,530
once they get out all right and now I

00:20:56,830 --> 00:21:02,410
think we can do some questions yeah

00:20:59,530 --> 00:21:04,570
quick question on docker images and how

00:21:02,410 --> 00:21:07,330
you might compare them to let's say

00:21:04,570 --> 00:21:10,179
pie-pie images in terms of their

00:21:07,330 --> 00:21:14,940
provenance and basically the level of

00:21:10,179 --> 00:21:17,590
trust that you ascribe to them I mean I

00:21:14,940 --> 00:21:19,750
think they're they're very similar I

00:21:17,590 --> 00:21:20,919
mean if you want to pull in a pipe I

00:21:19,750 --> 00:21:23,260
package or if you want to pull in a

00:21:20,919 --> 00:21:24,669
docker image you should you should go

00:21:23,260 --> 00:21:27,210
look through it and you should check and

00:21:24,669 --> 00:21:29,890
make sure that everything is legit I

00:21:27,210 --> 00:21:32,950
definitely know that they had an issue

00:21:29,890 --> 00:21:35,830
with some people publishing well-known

00:21:32,950 --> 00:21:38,110
images that had a miner that was

00:21:35,830 --> 00:21:40,809
actually running in the background a few

00:21:38,110 --> 00:21:43,799
months back which it's cool to live in

00:21:40,809 --> 00:21:43,799
the future but that's a dick move

00:21:45,450 --> 00:21:53,530
hey the great speech could you talk a

00:21:49,270 --> 00:21:55,510
little bit maybe about kind of the how

00:21:53,530 --> 00:21:57,520
its containerized and what that means in

00:21:55,510 --> 00:22:00,700
terms of if you have a virtual machine

00:21:57,520 --> 00:22:05,500
is it limited in terms of RAM or kind of

00:22:00,700 --> 00:22:06,730
any of the specs of the machine I don't

00:22:05,500 --> 00:22:09,970
actually know the answer to that

00:22:06,730 --> 00:22:14,320
question ok I guess I could do a

00:22:09,970 --> 00:22:16,750
separate one then could you talk a

00:22:14,320 --> 00:22:19,059
little baby about the big differences

00:22:16,750 --> 00:22:19,850
between maybe docker swarm verse docker

00:22:19,059 --> 00:22:22,100
compose

00:22:19,850 --> 00:22:24,830
I've never actually used docker swarm

00:22:22,100 --> 00:22:27,880
either sorry I'm failing you okay no

00:22:24,830 --> 00:22:27,880
it's not a problem thanks

00:22:34,110 --> 00:22:51,569
[Applause]

00:22:38,270 --> 00:22:51,569

YouTube URL: https://www.youtube.com/watch?v=eNn5zm9VkFA


