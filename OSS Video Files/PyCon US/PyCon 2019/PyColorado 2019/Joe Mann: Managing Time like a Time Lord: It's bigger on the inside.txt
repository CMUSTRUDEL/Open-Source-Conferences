Title: Joe Mann: Managing Time like a Time Lord: It's bigger on the inside
Publication date: 2019-10-22
Playlist: PyColorado 2019
Description: 
	Time is one of those things that seems like it should be a simple. But unfortunately that is far from the case. With various timezones existing in the world, those timezones changing, and a host of other issues that arise with managing time, things become complicated very fast. This talk will discuss some best practices for handling time and discuss several python libraries that make it easier.
Captions: 
	00:00:00,370 --> 00:00:47,250
[Music]

00:00:42,980 --> 00:00:50,930
all right so I will be talking about

00:00:47,250 --> 00:00:56,640
managing time primarily in Python

00:00:50,930 --> 00:01:02,570
spoiler it's really not that easy so a

00:00:56,640 --> 00:01:02,570
little bit about me that didn't work oh

00:01:05,330 --> 00:01:17,070
boy there we go alright so first of all

00:01:13,369 --> 00:01:20,880
that's not me I'm not Time Lord that's

00:01:17,070 --> 00:01:22,890
not me and that's definitely not me no

00:01:20,880 --> 00:01:28,789
no there's a Doctor Who fans in the room

00:01:22,890 --> 00:01:28,789
but Peter Capaldi's the worst anyway ooh

00:01:29,180 --> 00:01:36,869
so who am i a little bit about me as I

00:01:33,630 --> 00:01:38,940
was already introduced I am a manager of

00:01:36,869 --> 00:01:41,880
spacecraft operation software at spier

00:01:38,940 --> 00:01:44,670
global we are a satellite company we

00:01:41,880 --> 00:01:46,259
build and manufacture cube SATs launch

00:01:44,670 --> 00:01:48,810
them into space and collect data from

00:01:46,259 --> 00:01:50,849
them and a little plug about the company

00:01:48,810 --> 00:01:54,840
we are hiring for my team so if you're

00:01:50,849 --> 00:01:57,390
interested definitely come talk to me so

00:01:54,840 --> 00:01:58,920
why is time important I think it's kind

00:01:57,390 --> 00:02:00,569
of a better question is you know why

00:01:58,920 --> 00:02:03,270
isn't it you know it's something that we

00:02:00,569 --> 00:02:06,720
deal with all the time you know in our

00:02:03,270 --> 00:02:08,849
day-to-day lives and if the programs the

00:02:06,720 --> 00:02:10,560
software that were using is doing it

00:02:08,849 --> 00:02:13,260
correctly it's the kind of thing that we

00:02:10,560 --> 00:02:16,800
don't notice you know you you schedule a

00:02:13,260 --> 00:02:19,200
meeting with some co-workers on the east

00:02:16,800 --> 00:02:21,660
coast that meeting automatically shows

00:02:19,200 --> 00:02:23,520
up on their calendars you know a couple

00:02:21,660 --> 00:02:24,930
hours before you know you can go on

00:02:23,520 --> 00:02:26,760
there and you can see the time zones

00:02:24,930 --> 00:02:28,560
they're in so you're not accidentally

00:02:26,760 --> 00:02:30,330
scheduling you know a 7:00 a.m. meeting

00:02:28,560 --> 00:02:32,940
Eastern Time when you're trying to meet

00:02:30,330 --> 00:02:36,060
at you know actually more like 9:00 a.m.

00:02:32,940 --> 00:02:37,590
their time 11 hours so yeah so time

00:02:36,060 --> 00:02:39,870
times the kind of thing that can be

00:02:37,590 --> 00:02:41,730
really hard to do and it's the kind of

00:02:39,870 --> 00:02:45,349
thing that if you do correctly people

00:02:41,730 --> 00:02:47,970
just don't notice so why is time hard

00:02:45,349 --> 00:02:50,700
for starters there are 37 different

00:02:47,970 --> 00:02:53,549
active time zones in the world now

00:02:50,700 --> 00:02:56,530
there's only 24 hours around the world

00:02:53,549 --> 00:02:59,860
so that's a little bit of a heads back

00:02:56,530 --> 00:03:03,340
there are timezones that sit in 15 30

00:02:59,860 --> 00:03:07,030
and 45 minute intervals you also have

00:03:03,340 --> 00:03:10,209
some areas that respect daylight savings

00:03:07,030 --> 00:03:12,459
time some that don't you have areas

00:03:10,209 --> 00:03:15,099
inside individual states like the Navajo

00:03:12,459 --> 00:03:16,599
Nation that does not you that respects

00:03:15,099 --> 00:03:19,150
daylight savings time while the state

00:03:16,599 --> 00:03:21,760
therein does not if anyone here has ever

00:03:19,150 --> 00:03:23,650
traveled between Arizona and Utah it can

00:03:21,760 --> 00:03:25,590
definitely get very confusing to try to

00:03:23,650 --> 00:03:28,360
figure out what time it actually is

00:03:25,590 --> 00:03:31,390
another interesting thing is over the

00:03:28,360 --> 00:03:32,920
last 75 years there have been eight

00:03:31,390 --> 00:03:35,069
different countries that have changed

00:03:32,920 --> 00:03:38,109
their timezone at some point or another

00:03:35,069 --> 00:03:40,150
there are actually nine the ninth one

00:03:38,109 --> 00:03:42,970
being North Korea they changed their

00:03:40,150 --> 00:03:44,739
time zone in 2015 but they just they

00:03:42,970 --> 00:03:50,260
decided against it and then switched

00:03:44,739 --> 00:03:53,500
back three years later yeah so another

00:03:50,260 --> 00:03:55,329
reason why time is hard definitely have

00:03:53,500 --> 00:03:59,200
I'm sure we all have some good war

00:03:55,329 --> 00:04:02,079
stories around managing time a couple of

00:03:59,200 --> 00:04:05,709
my favorite ones two of them involved

00:04:02,079 --> 00:04:07,419
testing so in a previous role we had a

00:04:05,709 --> 00:04:09,069
series of acceptance tests that would

00:04:07,419 --> 00:04:11,290
run whenever you committed code in the

00:04:09,069 --> 00:04:15,819
master this was an East Coast company

00:04:11,290 --> 00:04:18,609
and for some reason for some reason

00:04:15,819 --> 00:04:19,780
those tests would fail between 8:00 p.m.

00:04:18,609 --> 00:04:23,080
and midnight

00:04:19,780 --> 00:04:25,240
now the code was completely fine but the

00:04:23,080 --> 00:04:26,800
problem was it was entering data into

00:04:25,240 --> 00:04:29,229
the database and then when it was

00:04:26,800 --> 00:04:31,620
requesting back it wasn't specifying the

00:04:29,229 --> 00:04:35,200
time zone so it was requesting data

00:04:31,620 --> 00:04:36,910
based on UTC time when it really wanted

00:04:35,200 --> 00:04:38,620
Eastern so there was literally a block

00:04:36,910 --> 00:04:41,200
of time where the test would fail and

00:04:38,620 --> 00:04:44,289
then once 12:01 came around the test

00:04:41,200 --> 00:04:46,000
would start to pass again and I actually

00:04:44,289 --> 00:04:50,620
checked some code in and it got merged

00:04:46,000 --> 00:04:51,970
at 8:01 and the test broke and my boss

00:04:50,620 --> 00:04:53,349
actually got really mad they didn't fix

00:04:51,970 --> 00:04:56,070
the test I just wanted to wait another

00:04:53,349 --> 00:04:58,539
four hours but that's own of a story and

00:04:56,070 --> 00:04:59,979
the other testing example was I was

00:04:58,539 --> 00:05:01,900
working for a company that was based on

00:04:59,979 --> 00:05:04,330
the West Coast and all their engineers

00:05:01,900 --> 00:05:06,490
and customers are on the west coast and

00:05:04,330 --> 00:05:08,169
I was here in Mountain time well some of

00:05:06,490 --> 00:05:09,100
the tests were failing because once

00:05:08,169 --> 00:05:11,170
again all their stuff

00:05:09,100 --> 00:05:13,060
was on Pacific time my code was wearing

00:05:11,170 --> 00:05:15,880
a mountain time it was comparing hours

00:05:13,060 --> 00:05:17,380
and things weren't right nothing wrong

00:05:15,880 --> 00:05:20,230
with the code it was just the test

00:05:17,380 --> 00:05:22,270
rapport and then I think my favorite

00:05:20,230 --> 00:05:26,530
example was when I was interfacing with

00:05:22,270 --> 00:05:28,330
a third party API we were discussing

00:05:26,530 --> 00:05:30,400
with them like how we're gonna user API

00:05:28,330 --> 00:05:32,680
and they essentially had two API a

00:05:30,400 --> 00:05:34,150
service one in a billing one so you

00:05:32,680 --> 00:05:36,850
would purchase certain things through a

00:05:34,150 --> 00:05:39,340
specific API and then the other one

00:05:36,850 --> 00:05:42,570
would send you back data they told us

00:05:39,340 --> 00:05:45,880
that both these api's were on UTC time

00:05:42,570 --> 00:05:48,370
they weren't one of them was on Pacific

00:05:45,880 --> 00:05:49,690
time and the other one was on UTC the

00:05:48,370 --> 00:05:51,070
only way we figured that out is we

00:05:49,690 --> 00:05:53,770
started looking at the data that was

00:05:51,070 --> 00:05:55,330
coming in from their API and realized

00:05:53,770 --> 00:05:58,000
and it wasn't matching the timestamps in

00:05:55,330 --> 00:06:02,250
the database so there's just a couple of

00:05:58,000 --> 00:06:04,930
good examples of why time can be so hard

00:06:02,250 --> 00:06:08,010
all right so I guess the question is you

00:06:04,930 --> 00:06:13,360
know what do we do about it

00:06:08,010 --> 00:06:16,060
Tod are just use UTC interesting enough

00:06:13,360 --> 00:06:17,860
my company spire when the majority of

00:06:16,060 --> 00:06:19,780
our products are internal so we just use

00:06:17,860 --> 00:06:23,140
UTC and actually most the stuff doesn't

00:06:19,780 --> 00:06:25,900
bother us but for people with customers

00:06:23,140 --> 00:06:28,360
out there you probably your customers

00:06:25,900 --> 00:06:30,430
probably don't want to see UTC times in

00:06:28,360 --> 00:06:34,000
their applications so that's not always

00:06:30,430 --> 00:06:35,260
the best solution so in that case you

00:06:34,000 --> 00:06:38,110
usually want to do something where you

00:06:35,260 --> 00:06:40,810
store the data in UTC and then present

00:06:38,110 --> 00:06:43,750
it to them in a certain way a couple

00:06:40,810 --> 00:06:46,480
other solutions are in both your code

00:06:43,750 --> 00:06:49,960
and like in your database to use date

00:06:46,480 --> 00:06:51,700
times instead of dates to my knowledge

00:06:49,960 --> 00:06:54,850
there aren't any date objects out there

00:06:51,700 --> 00:06:57,430
that are time aware but date times are

00:06:54,850 --> 00:06:59,440
so you can always just store the date at

00:06:57,430 --> 00:07:05,890
midnight where the timezone associated

00:06:59,440 --> 00:07:07,930
with it so best practices when it comes

00:07:05,890 --> 00:07:09,430
to testing you know two or three of the

00:07:07,930 --> 00:07:11,800
war stories I told were around testing

00:07:09,430 --> 00:07:14,560
and really the simplest thing to do is

00:07:11,800 --> 00:07:16,120
to clone quote freeze time there's a

00:07:14,560 --> 00:07:17,410
couple Python libraries that let you do

00:07:16,120 --> 00:07:19,750
this I can show you later

00:07:17,410 --> 00:07:20,009
this I'm sure almost any language out

00:07:19,750 --> 00:07:22,050
there

00:07:20,009 --> 00:07:24,300
has libraries that do this but they

00:07:22,050 --> 00:07:26,639
essentially let you lock down the time

00:07:24,300 --> 00:07:30,059
the drawing in the system in Python by

00:07:26,639 --> 00:07:32,249
patching essentially day time by now and

00:07:30,059 --> 00:07:34,710
those can be really useful for not only

00:07:32,249 --> 00:07:37,889
writing tests that are predictable but

00:07:34,710 --> 00:07:40,219
also writing tests for edge cases that

00:07:37,889 --> 00:07:43,199
you can't necessarily test easily

00:07:40,219 --> 00:07:45,649
example being like a leap year February

00:07:43,199 --> 00:07:51,059
29th you're probably gonna want to test

00:07:45,649 --> 00:08:01,409
involving time for that make a

00:07:51,059 --> 00:08:03,779
difference all right yeah so running

00:08:01,409 --> 00:08:06,029
tests that cover certain edge cases new

00:08:03,779 --> 00:08:07,639
system is always intelligent I've

00:08:06,029 --> 00:08:10,379
definitely seen tests that have failed

00:08:07,639 --> 00:08:11,969
you know on the first of the month or on

00:08:10,379 --> 00:08:14,189
the last a month or what have you so

00:08:11,969 --> 00:08:15,899
that's really I think the most important

00:08:14,189 --> 00:08:17,759
thing when it comes to testing trees

00:08:15,899 --> 00:08:20,009
time if you're working with external

00:08:17,759 --> 00:08:22,409
services that's not always the easiest

00:08:20,009 --> 00:08:23,789
thing to do if you're doing integration

00:08:22,409 --> 00:08:26,669
test and you're actually talking to

00:08:23,789 --> 00:08:28,169
other systems you probably can't do that

00:08:26,669 --> 00:08:31,919
but there's also nothing you can really

00:08:28,169 --> 00:08:35,490
do in that case yeah so best practices

00:08:31,919 --> 00:08:39,240
in Python try to always use time zone

00:08:35,490 --> 00:08:41,069
aware objects don't use magic numbers

00:08:39,240 --> 00:08:43,889
there's a good example as well you know

00:08:41,069 --> 00:08:44,940
don't say month plus one that's going to

00:08:43,889 --> 00:08:47,579
get you into trouble when you hit

00:08:44,940 --> 00:08:48,649
December day plus one we're also getting

00:08:47,579 --> 00:08:51,329
to travel the last day of the month

00:08:48,649 --> 00:08:53,430
things of that nature and there's also a

00:08:51,329 --> 00:08:58,199
ton of good libraries out there for

00:08:53,430 --> 00:08:59,519
integrating with timezone objects PYT z

00:08:58,199 --> 00:09:02,399
is kind of the gold standard for time

00:08:59,519 --> 00:09:05,279
zones date util has a lot of nice

00:09:02,399 --> 00:09:08,430
functions I already mentioned freeze gun

00:09:05,279 --> 00:09:10,260
for testing and then DeLorean which is

00:09:08,430 --> 00:09:11,790
one I actually haven't used but I've

00:09:10,260 --> 00:09:13,529
read good things and has a really great

00:09:11,790 --> 00:09:19,560
name so I just kind of had to put it up

00:09:13,529 --> 00:09:21,779
there yeah so with that I figured I

00:09:19,560 --> 00:09:26,810
would jump into a couple live examples

00:09:21,779 --> 00:09:26,810
to demonstrate some of these things

00:09:30,050 --> 00:09:33,050
hopefully

00:09:43,290 --> 00:09:52,840
okay so the first example here I'm just

00:09:48,130 --> 00:09:56,800
converting a date time our date to a day

00:09:52,840 --> 00:09:59,200
time as you can see you can you know

00:09:56,800 --> 00:10:01,480
create a time with just your month day

00:09:59,200 --> 00:10:03,100
and gives your day time there's also a

00:10:01,480 --> 00:10:07,060
couple of nice helpers for daytime

00:10:03,100 --> 00:10:10,840
objects date and time if you want to go

00:10:07,060 --> 00:10:15,640
the one way or the other and yeah here's

00:10:10,840 --> 00:10:17,350
an interesting situation around getting

00:10:15,640 --> 00:10:18,940
the last day of the month I kind of

00:10:17,350 --> 00:10:20,200
talked about how using like a magic

00:10:18,940 --> 00:10:22,720
number in this case really isn't the

00:10:20,200 --> 00:10:25,240
best idea and there's this great library

00:10:22,720 --> 00:10:27,700
out there called calendar and what it'll

00:10:25,240 --> 00:10:29,170
do is it'll if you say month range and

00:10:27,700 --> 00:10:30,880
you give it a year in a month it'll

00:10:29,170 --> 00:10:35,140
return you the number of days in the

00:10:30,880 --> 00:10:39,430
month and then the first day of the week

00:10:35,140 --> 00:10:44,380
zero index I believe so in 2016 February

00:10:39,430 --> 00:10:49,570
February started on a Monday and in 2019

00:10:44,380 --> 00:10:50,800
February started on Thursday I think so

00:10:49,570 --> 00:10:53,200
yeah then the example of getting last

00:10:50,800 --> 00:10:57,190
day of the month just do something

00:10:53,200 --> 00:10:59,740
similar we did above daytime today year

00:10:57,190 --> 00:11:03,760
today month and then I am getting that

00:10:59,740 --> 00:11:09,220
value out of the month range tuple to to

00:11:03,760 --> 00:11:11,830
give me the last day and here's also

00:11:09,220 --> 00:11:15,550
kind of an interesting problem around

00:11:11,830 --> 00:11:21,330
time resolution so date times are

00:11:15,550 --> 00:11:21,330
accurate to the millisecond I believe

00:11:26,040 --> 00:11:30,910
sorry it's it's been awhile since I

00:11:28,300 --> 00:11:33,250
worked with this but if you're looking

00:11:30,910 --> 00:11:35,770
to say get the quote last moment of a

00:11:33,250 --> 00:11:39,400
given time period you can use date time

00:11:35,770 --> 00:11:41,350
dot resolution to work with that the

00:11:39,400 --> 00:11:43,050
example I'm showing here is if I want to

00:11:41,350 --> 00:11:45,040
at the last moment in a given month I

00:11:43,050 --> 00:11:48,100
mentioned the example of doing month

00:11:45,040 --> 00:11:50,530
plus 1-minus time resolution and that's

00:11:48,100 --> 00:11:53,670
given me you know nine thirty twenty you

00:11:50,530 --> 00:11:55,769
know 23rd hour 59 minutes nine seconds

00:11:53,670 --> 00:11:59,070
no mention nine seconds nine point nine

00:11:55,769 --> 00:12:01,380
nine nine nine milliseconds and as I

00:11:59,070 --> 00:12:04,459
already talked about things like that

00:12:01,380 --> 00:12:07,680
were you hard code a value to increment

00:12:04,459 --> 00:12:10,019
will fail at some point or another as

00:12:07,680 --> 00:12:12,510
this example shows in December that code

00:12:10,019 --> 00:12:13,589
would start to fail so that would not be

00:12:12,510 --> 00:12:15,300
something you'd want to have running in

00:12:13,589 --> 00:12:18,360
production when all of a sudden midnight

00:12:15,300 --> 00:12:22,579
of December first rolls around in your

00:12:18,360 --> 00:12:27,260
code does it stops working so really a

00:12:22,579 --> 00:12:31,200
best solution to something like this is

00:12:27,260 --> 00:12:33,570
sighs my place is to once again use

00:12:31,200 --> 00:12:36,269
month range to get that value and

00:12:33,570 --> 00:12:40,769
subtract it out interestingly you can

00:12:36,269 --> 00:12:42,990
also use max so date times have a Max

00:12:40,769 --> 00:12:46,110
and min value associated with them where

00:12:42,990 --> 00:12:50,510
date/time dot min is I believe epic time

00:12:46,110 --> 00:12:52,800
and anytime that Max is some

00:12:50,510 --> 00:12:58,199
ridiculously large year that we're

00:12:52,800 --> 00:12:59,579
probably never going to hit and yeah so

00:12:58,199 --> 00:13:02,040
there's just a couple more examples of

00:12:59,579 --> 00:13:05,699
that I mentioned the date util library

00:13:02,040 --> 00:13:08,279
I'm using their relative delta time

00:13:05,699 --> 00:13:08,970
Delta's don't support incrementing by

00:13:08,279 --> 00:13:10,440
months

00:13:08,970 --> 00:13:11,760
the main reason we've already kind of

00:13:10,440 --> 00:13:13,890
talked about where a month doesn't have

00:13:11,760 --> 00:13:16,230
a set number of days but they have a

00:13:13,890 --> 00:13:18,660
function relative Delta which does that

00:13:16,230 --> 00:13:20,040
for you and I'm guessing in the hood it

00:13:18,660 --> 00:13:22,230
essentially does what I've showed you

00:13:20,040 --> 00:13:26,579
above which is used like month range and

00:13:22,230 --> 00:13:27,959
then convert that but when you're

00:13:26,579 --> 00:13:30,540
looking for something like that we have

00:13:27,959 --> 00:13:32,070
the last moment what you're probably

00:13:30,540 --> 00:13:35,310
really concerned about is just comparing

00:13:32,070 --> 00:13:37,260
values so you can always just use the

00:13:35,310 --> 00:13:40,380
less than comparison operator with day x

00:13:37,260 --> 00:13:42,959
and it'll have a assembly k a similar

00:13:40,380 --> 00:13:45,360
exact same effect if i say you know

00:13:42,959 --> 00:13:49,050
check the date before you know that

00:13:45,360 --> 00:13:51,380
specific time it'll work for any anytime

00:13:49,050 --> 00:13:51,380
prior

00:13:53,450 --> 00:14:00,260
so yes oh yeah then one low one little

00:13:58,310 --> 00:14:03,140
gotcha there as well you can actually

00:14:00,260 --> 00:14:04,670
compare dates and date times they need

00:14:03,140 --> 00:14:07,010
to be the same type of object you have

00:14:04,670 --> 00:14:08,690
to cast them into one or the other so

00:14:07,010 --> 00:14:11,210
that's always a good thing to know and

00:14:08,690 --> 00:14:13,430
also probably a good reason to try to to

00:14:11,210 --> 00:14:15,080
use just date times because it just

00:14:13,430 --> 00:14:17,060
makes your gonna have to cast them

00:14:15,080 --> 00:14:20,570
anyway do a comparison so I feel like

00:14:17,060 --> 00:14:26,420
you might as well just use daytime and

00:14:20,570 --> 00:14:30,020
then lastly we've got time zones as you

00:14:26,420 --> 00:14:34,510
can see there are a lot of time zones

00:14:30,020 --> 00:14:37,430
available from P Y T Z is a database

00:14:34,510 --> 00:14:39,320
maintained I'm actually not quite sure

00:14:37,430 --> 00:14:41,300
by who but there's a database out there

00:14:39,320 --> 00:14:46,580
maintained that stories all the time

00:14:41,300 --> 00:14:48,710
zones in the world there offsets etc and

00:14:46,580 --> 00:14:51,350
that has some nice features where you

00:14:48,710 --> 00:14:56,360
can just say like give me US Eastern and

00:14:51,350 --> 00:14:59,320
it'll give me that time zone and here's

00:14:56,360 --> 00:15:02,270
an example of localizing a time zone so

00:14:59,320 --> 00:15:05,510
time zone dot today does not give you a

00:15:02,270 --> 00:15:07,130
time zone aware object in this case I'm

00:15:05,510 --> 00:15:11,830
localizing it so it doesn't have a time

00:15:07,130 --> 00:15:15,680
zone so this attaches that value to it

00:15:11,830 --> 00:15:21,620
another example localizing with Pacific

00:15:15,680 --> 00:15:25,130
time oh yes not another example because

00:15:21,620 --> 00:15:27,830
the object I had before had already been

00:15:25,130 --> 00:15:31,060
localized it's no longer native and when

00:15:27,830 --> 00:15:35,810
you try to localize it throws an error

00:15:31,060 --> 00:15:38,210
and that's the case if if you're really

00:15:35,810 --> 00:15:41,060
interested in just replacing the time

00:15:38,210 --> 00:15:44,090
zone of a day time you can simply do

00:15:41,060 --> 00:15:46,850
date time dot replace and you can see

00:15:44,090 --> 00:15:49,100
the comparison here or I do dot replace

00:15:46,850 --> 00:15:50,870
on a day time and it just literally

00:15:49,100 --> 00:15:53,990
replaces the day time with the one I

00:15:50,870 --> 00:15:55,340
have or I do dot normalize and what it

00:15:53,990 --> 00:15:57,620
does is it's essentially the same data

00:15:55,340 --> 00:16:01,430
so it shifts the time and updates the

00:15:57,620 --> 00:16:03,920
time zone there's actually what I think

00:16:01,430 --> 00:16:06,050
is a bug here if you see the first

00:16:03,920 --> 00:16:06,499
statement the time zone is minus seven

00:16:06,050 --> 00:16:09,919
hours

00:16:06,499 --> 00:16:12,469
53 minutes I don't know why that is if

00:16:09,919 --> 00:16:15,259
any one last time I gave this talk no

00:16:12,469 --> 00:16:17,239
one knew why if anyone in the room knows

00:16:15,259 --> 00:16:19,969
why I would love to know because I still

00:16:17,239 --> 00:16:21,589
haven't figured it out I also don't use

00:16:19,969 --> 00:16:25,519
replace because it's not generally a

00:16:21,589 --> 00:16:29,029
good practice and then lastly just a

00:16:25,519 --> 00:16:33,469
couple little oddities with times and

00:16:29,029 --> 00:16:35,509
time zones so in this is also

00:16:33,469 --> 00:16:38,809
interesting Python to Python 3 issue

00:16:35,509 --> 00:16:42,559
Python 3 time zones are always evaluated

00:16:38,809 --> 00:16:46,129
to true but in Python 2 some of them

00:16:42,559 --> 00:16:48,919
will resolve to false time of 0 I

00:16:46,129 --> 00:16:52,729
believe like date time men were also

00:16:48,919 --> 00:16:54,109
resolved to false in Python 2 I don't

00:16:52,729 --> 00:16:56,089
know why you'd ever use that

00:16:54,109 --> 00:16:59,119
I'm sure someone at some time did and

00:16:56,089 --> 00:17:01,729
they made it a feature but price didn't

00:16:59,119 --> 00:17:04,750
do that as I already mentioned date time

00:17:01,729 --> 00:17:09,230
mandate IMAX those are pretty useful

00:17:04,750 --> 00:17:11,949
because if you try to go below or above

00:17:09,230 --> 00:17:18,019
one of those you'll get an exception

00:17:11,949 --> 00:17:21,980
basically says that's not valid date so

00:17:18,019 --> 00:17:24,079
that's basically all I've got and I went

00:17:21,980 --> 00:17:28,069
pretty quickly so I think I left plenty

00:17:24,079 --> 00:17:35,070
of time for questions cool

00:17:28,069 --> 00:17:48,369
[Applause]

00:17:35,070 --> 00:17:48,369

YouTube URL: https://www.youtube.com/watch?v=1ukJed7nYdg


