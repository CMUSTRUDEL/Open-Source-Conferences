Title: Moshe Zadka: Boring Object Orientation
Publication date: 2019-10-22
Playlist: PyColorado 2019
Description: 
	The strengths and weaknesses of Python lend themselves to a different style of object oriented programming. By accepting several constraints on how we design and implement classes, we make our code more robust, more testable, and easier to adapt to changing circumstances
Captions: 
	00:00:00,370 --> 00:00:46,500
[Music]

00:00:43,610 --> 00:00:48,000
right so my name is Moshe zotkin today

00:00:46,500 --> 00:00:49,829
I'm gonna talk to you about how to make

00:00:48,000 --> 00:00:52,260
your objects more boring and why you

00:00:49,829 --> 00:00:56,070
should whoa

00:00:52,260 --> 00:00:59,309
that was exciting okay

00:00:56,070 --> 00:01:01,080
my website is Kobo diesel.com if you

00:00:59,309 --> 00:01:02,970
catch me later I'll explain the funny

00:01:01,080 --> 00:01:06,000
funny mask joke that like basically five

00:01:02,970 --> 00:01:08,250
people can get but it is on the bottom

00:01:06,000 --> 00:01:09,840
of everything and you can find every

00:01:08,250 --> 00:01:13,050
single way to reach me including twitter

00:01:09,840 --> 00:01:15,930
and mail and instagram if you that's how

00:01:13,050 --> 00:01:18,180
you want to reach me that's fine okay so

00:01:15,930 --> 00:01:20,160
let's try and start talking about python

00:01:18,180 --> 00:01:21,930
and object-oriented programming in

00:01:20,160 --> 00:01:25,560
Python as you know everything is an

00:01:21,930 --> 00:01:27,300
object and not just everything is an

00:01:25,560 --> 00:01:29,759
object right the object modeling of

00:01:27,300 --> 00:01:31,470
Python is very closely related to say

00:01:29,759 --> 00:01:33,420
the object model of small talk we're at

00:01:31,470 --> 00:01:36,090
of these object-oriented concepts come

00:01:33,420 --> 00:01:37,950
from so not just everything in Python is

00:01:36,090 --> 00:01:38,970
an object Python is really related to

00:01:37,950 --> 00:01:42,200
like these languages where

00:01:38,970 --> 00:01:45,720
object-oriented programming came from

00:01:42,200 --> 00:01:47,310
and where that's where originally people

00:01:45,720 --> 00:01:50,009
started coming up with object-oriented

00:01:47,310 --> 00:01:52,860
design principles and why do we have

00:01:50,009 --> 00:01:54,509
them the basically ways to structure

00:01:52,860 --> 00:01:56,819
your code in a way that are easy to

00:01:54,509 --> 00:02:00,709
maintain in various ways is to change it

00:01:56,819 --> 00:02:04,050
to modify it so debug is to understand

00:02:00,709 --> 00:02:07,319
so do these design principles apply to

00:02:04,050 --> 00:02:09,090
Python well yes they come from the same

00:02:07,319 --> 00:02:10,619
source right they come from these

00:02:09,090 --> 00:02:12,330
languages that are very similar to

00:02:10,619 --> 00:02:16,230
Python there's no reason why they

00:02:12,330 --> 00:02:18,510
shouldn't move but python has its own

00:02:16,230 --> 00:02:20,280
special flavor its own special way of

00:02:18,510 --> 00:02:22,380
doing things it's a little bit different

00:02:20,280 --> 00:02:23,880
the object model it'll be different how

00:02:22,380 --> 00:02:26,129
it treats methods and functions it will

00:02:23,880 --> 00:02:28,800
be different so most of the principles

00:02:26,129 --> 00:02:30,780
work on some high level but applies them

00:02:28,800 --> 00:02:32,250
to Python take some thoughts and often

00:02:30,780 --> 00:02:33,930
just kind of copying and pasting what

00:02:32,250 --> 00:02:38,370
you see in like design principles

00:02:33,930 --> 00:02:40,470
doesn't work right off the bat so I'll

00:02:38,370 --> 00:02:42,599
talk about the principles that I want to

00:02:40,470 --> 00:02:44,220
kind of tell you about how to make your

00:02:42,599 --> 00:02:46,050
objects more boring these are the

00:02:44,220 --> 00:02:48,060
secrets they don't want you to know to

00:02:46,050 --> 00:02:49,739
make your objects boring further the

00:02:48,060 --> 00:02:52,260
first one is to explicitly declare your

00:02:49,739 --> 00:02:54,120
interfaces to simplify your

00:02:52,260 --> 00:02:56,489
initialization

00:02:54,120 --> 00:02:59,939
avoid this much as possible mutation

00:02:56,489 --> 00:03:03,060
avoid hiding stuff avoid methods and

00:02:59,939 --> 00:03:04,859
avoid inheritance these are all things

00:03:03,060 --> 00:03:07,890
that make your objects not boring and

00:03:04,859 --> 00:03:09,930
you want to make them boring so I

00:03:07,890 --> 00:03:12,480
declare interfaces in general the best

00:03:09,930 --> 00:03:15,870
way to cheat in an argument about Python

00:03:12,480 --> 00:03:17,790
is to quote a ton of Python let's let it

00:03:15,870 --> 00:03:20,549
never be set a time above cheating I

00:03:17,790 --> 00:03:22,379
will put the know Python explicit is

00:03:20,549 --> 00:03:24,900
better than implicit hopefully always

00:03:22,379 --> 00:03:27,659
then you all remember that part that

00:03:24,900 --> 00:03:29,370
applies to interfaces right why not make

00:03:27,659 --> 00:03:31,889
your interfaces explicit instead of

00:03:29,370 --> 00:03:33,720
saying fie like object and then we start

00:03:31,889 --> 00:03:35,280
having these weird arguments what is a

00:03:33,720 --> 00:03:37,829
file like object that the final call

00:03:35,280 --> 00:03:40,019
object it good right because that's a

00:03:37,829 --> 00:03:41,700
writable file object you can say all

00:03:40,019 --> 00:03:44,340
these methods expect only readable file

00:03:41,700 --> 00:03:45,870
objects does it expect seek well then

00:03:44,340 --> 00:03:47,730
you have the writable see Keable object

00:03:45,870 --> 00:03:49,409
and nobody actually maintains it so

00:03:47,730 --> 00:03:51,719
people write a method then they say this

00:03:49,409 --> 00:03:53,519
method expects a file like object well

00:03:51,719 --> 00:03:55,950
let you guess exactly what to use and

00:03:53,519 --> 00:03:58,290
the main tenez of that method have not

00:03:55,950 --> 00:04:00,329
ever committed to what they need so if

00:03:58,290 --> 00:04:02,310
they send you six a well we said you're

00:04:00,329 --> 00:04:04,049
supposed to pass a file object well he

00:04:02,310 --> 00:04:05,729
makes magnet sick so instead of having

00:04:04,049 --> 00:04:07,919
these weird scene where nobody knows

00:04:05,729 --> 00:04:10,470
what we actually talked about how about

00:04:07,919 --> 00:04:12,389
we specify it in code we make it

00:04:10,470 --> 00:04:14,970
explicit right so this is a good example

00:04:12,389 --> 00:04:17,849
this is how you specify sprite like

00:04:14,970 --> 00:04:19,919
object right sprite of the things in

00:04:17,849 --> 00:04:22,949
computer games that move around right

00:04:19,919 --> 00:04:25,740
your character or bullet or whatever and

00:04:22,949 --> 00:04:27,780
this is a good way to structure sprite

00:04:25,740 --> 00:04:30,090
right you'd have a bounding box white

00:04:27,780 --> 00:04:32,070
which says wait what box

00:04:30,090 --> 00:04:34,169
Spidey's inside and then whether it

00:04:32,070 --> 00:04:35,759
intersects box while it's on the same as

00:04:34,169 --> 00:04:38,130
intersecting the bounding box because if

00:04:35,759 --> 00:04:39,750
you imagine despite being a circle then

00:04:38,130 --> 00:04:41,250
the bounding box by district but the

00:04:39,750 --> 00:04:43,320
circle might not intersect right so

00:04:41,250 --> 00:04:45,419
there's a method then attribute and you

00:04:43,320 --> 00:04:47,220
notice that you specify the method and

00:04:45,419 --> 00:04:49,259
you specify the attribute right you did

00:04:47,220 --> 00:04:51,000
not give any objects attributes or

00:04:49,259 --> 00:04:54,060
methods because all you're doing here is

00:04:51,000 --> 00:04:55,979
just specifying an interface unlike say

00:04:54,060 --> 00:04:58,409
what you would use from an abstract

00:04:55,979 --> 00:04:59,820
basis this is not useful useful as a

00:04:58,409 --> 00:05:01,199
base class which is very good because

00:04:59,820 --> 00:05:04,259
you do not want to use it as a base

00:05:01,199 --> 00:05:07,560
class the way to use an interface is to

00:05:04,259 --> 00:05:08,430
implement it and the way to verify that

00:05:07,560 --> 00:05:10,259
you implement

00:05:08,430 --> 00:05:12,259
it's like that you can literally just

00:05:10,259 --> 00:05:16,590
say verify object it's a method

00:05:12,259 --> 00:05:17,940
interface and it will verify that you

00:05:16,590 --> 00:05:19,740
actually implements the interface of

00:05:17,940 --> 00:05:21,270
course it's not a perfect verification

00:05:19,740 --> 00:05:22,949
right it doesn't check that you can call

00:05:21,270 --> 00:05:25,169
the method without waiting an exception

00:05:22,949 --> 00:05:27,840
it can check any semantics but it will

00:05:25,169 --> 00:05:30,150
at least check two things first the

00:05:27,840 --> 00:05:32,910
object thinks it's supposed to implement

00:05:30,150 --> 00:05:34,590
right this is if you are familiar with

00:05:32,910 --> 00:05:36,870
go and go they have the ad-hoc

00:05:34,590 --> 00:05:38,130
implementation of interfaces where if an

00:05:36,870 --> 00:05:40,530
object talked like you didn't brain

00:05:38,130 --> 00:05:42,330
interfaces probably meant to know an

00:05:40,530 --> 00:05:44,430
object will not implement an interface

00:05:42,330 --> 00:05:46,440
unless it's explicitly said I am going

00:05:44,430 --> 00:05:47,610
to implement that interface right so

00:05:46,440 --> 00:05:49,139
first of all it makes sure that the

00:05:47,610 --> 00:05:52,940
object meant to implement that interface

00:05:49,139 --> 00:05:55,979
and in a big system or you have a lot of

00:05:52,940 --> 00:05:58,110
vaguely similar interfaces say the eye

00:05:55,979 --> 00:06:00,270
readable file in the available seqable

00:05:58,110 --> 00:06:01,740
file it matter that the objects thinks

00:06:00,270 --> 00:06:04,169
it's supposed to implement a readable

00:06:01,740 --> 00:06:06,060
file while readable seqable file and

00:06:04,169 --> 00:06:07,889
then it will actually verify it has all

00:06:06,060 --> 00:06:15,500
the attributes and all the methods that

00:06:07,889 --> 00:06:17,280
was specified in the interface okay so

00:06:15,500 --> 00:06:18,960
the next thing I'm going to talk about

00:06:17,280 --> 00:06:20,880
after we understood it we here have to

00:06:18,960 --> 00:06:23,849
declare our interfaces is why you should

00:06:20,880 --> 00:06:25,830
simplify our initialization so this is

00:06:23,849 --> 00:06:27,990
an interesting constructor and it's

00:06:25,830 --> 00:06:30,389
interesting in exactly the bad way of

00:06:27,990 --> 00:06:32,699
interesting there's a lot of ways it can

00:06:30,389 --> 00:06:34,800
go wrong so first of all it creates a

00:06:32,699 --> 00:06:37,530
new object called destination with

00:06:34,800 --> 00:06:39,360
specific parameters and probably that

00:06:37,530 --> 00:06:42,060
object kind of like you know focus into

00:06:39,360 --> 00:06:44,220
all kind of systems and what if you want

00:06:42,060 --> 00:06:46,199
to market what if you want to use it

00:06:44,220 --> 00:06:48,270
without the wheel destination what if

00:06:46,199 --> 00:06:49,740
you want to proxy the destination to

00:06:48,270 --> 00:06:51,840
something else you can do that because

00:06:49,740 --> 00:06:53,940
it already besides the only class it

00:06:51,840 --> 00:06:55,800
will will accept its destination

00:06:53,940 --> 00:06:57,419
because it literally calls that class so

00:06:55,800 --> 00:06:59,400
you start with like you know patching

00:06:57,419 --> 00:07:01,139
and that never works well because it

00:06:59,400 --> 00:07:04,139
depends on exactly how you import it

00:07:01,139 --> 00:07:05,639
that's bad and then to make it even more

00:07:04,139 --> 00:07:08,580
interesting because that wasn't

00:07:05,639 --> 00:07:12,000
interesting enough we open a filing

00:07:08,580 --> 00:07:13,770
right so of course there's like almost

00:07:12,000 --> 00:07:15,810
an infinite number of ways is the open

00:07:13,770 --> 00:07:17,729
system coking fail why the file cannot

00:07:15,810 --> 00:07:19,979
be there you cannot have permission it

00:07:17,729 --> 00:07:21,330
might be on an NFS Drive in which case

00:07:19,979 --> 00:07:22,169
it's not going to fail just gonna take

00:07:21,330 --> 00:07:24,750
forever

00:07:22,169 --> 00:07:28,490
right so you have no idea how long this

00:07:24,750 --> 00:07:31,050
construction takes and best of all if

00:07:28,490 --> 00:07:33,630
the destination call fails if somehow

00:07:31,050 --> 00:07:37,440
this doesn't work that you will have to

00:07:33,630 --> 00:07:39,270
use an object that doesn't have also if

00:07:37,440 --> 00:07:41,970
your destination costs exceeding the I

00:07:39,270 --> 00:07:44,820
think put the open call failed you left

00:07:41,970 --> 00:07:47,090
with an object of type stuff that has a

00:07:44,820 --> 00:07:49,950
destination input but does not have a

00:07:47,090 --> 00:07:52,139
but does not have an F input attribute

00:07:49,950 --> 00:07:54,630
what does it mean it means if you were

00:07:52,139 --> 00:07:56,100
civilized the way I was not here because

00:07:54,630 --> 00:07:57,720
I'm trying to match my code to strive

00:07:56,100 --> 00:07:59,460
and you ought to wear poor method that

00:07:57,720 --> 00:08:02,610
is useful that shows you what F in put

00:07:59,460 --> 00:08:04,229
is that method would fail because it

00:08:02,610 --> 00:08:06,510
would add try to accelerate with doesn't

00:08:04,229 --> 00:08:09,210
exist now we have an object somewhere in

00:08:06,510 --> 00:08:12,840
the bowels of your system in trace backs

00:08:09,210 --> 00:08:14,160
that cannot be displayed that probably

00:08:12,840 --> 00:08:15,479
means that there will be a trace like

00:08:14,160 --> 00:08:18,389
you cannot displace you cannot even

00:08:15,479 --> 00:08:20,070
figure out by open failed so this is

00:08:18,389 --> 00:08:21,510
great right this is like like really

00:08:20,070 --> 00:08:23,280
interesting and you're gonna have like a

00:08:21,510 --> 00:08:27,030
really fun station at 4 a.m.

00:08:23,280 --> 00:08:29,220
debugging the NFS drive and well that

00:08:27,030 --> 00:08:31,110
does cause a lots of interest I like to

00:08:29,220 --> 00:08:37,710
sleep it for um and that's very boring

00:08:31,110 --> 00:08:39,979
of me so this is what they do right so

00:08:37,710 --> 00:08:43,320
now the constructor is very very boring

00:08:39,979 --> 00:08:46,470
the constructor just copies things to

00:08:43,320 --> 00:08:48,060
other things that almost can't fail

00:08:46,470 --> 00:08:49,860
there's like really weird edge cases

00:08:48,060 --> 00:08:54,630
where the memory allocation can fail if

00:08:49,860 --> 00:08:56,580
that happens god help you but if the

00:08:54,630 --> 00:08:58,980
constructor most of the time work but we

00:08:56,580 --> 00:09:00,630
had good code in the constructor it

00:08:58,980 --> 00:09:02,550
shouldn't have in the constructor but we

00:09:00,630 --> 00:09:05,690
did make some interesting choices right

00:09:02,550 --> 00:09:08,130
we said that every input should be the

00:09:05,690 --> 00:09:10,170
name of a file and destination is the

00:09:08,130 --> 00:09:11,910
destination let's take all this code

00:09:10,170 --> 00:09:13,410
that we wrote and worked hard and you

00:09:11,910 --> 00:09:14,730
know kind of talked about with our

00:09:13,410 --> 00:09:17,400
teammates and decided this is the right

00:09:14,730 --> 00:09:19,500
thing to do then put it in what we would

00:09:17,400 --> 00:09:21,000
call a named constructor in other

00:09:19,500 --> 00:09:24,330
language and in Python is just a class

00:09:21,000 --> 00:09:26,279
method that in this case has a name

00:09:24,330 --> 00:09:28,260
right firm name right so you can have

00:09:26,279 --> 00:09:30,480
like this in theory other named

00:09:28,260 --> 00:09:32,430
constructor if you so desire and it

00:09:30,480 --> 00:09:33,990
takes the class in the name wide we ship

00:09:32,430 --> 00:09:35,670
the name of the file and then

00:09:33,990 --> 00:09:38,100
the destination a lot is that I don't

00:09:35,670 --> 00:09:39,899
bother creating the object until I have

00:09:38,100 --> 00:09:43,770
all the prerequisites of the objects in

00:09:39,899 --> 00:09:44,310
hand which means if form name fails that

00:09:43,770 --> 00:09:45,990
it's fine

00:09:44,310 --> 00:09:48,060
you know like ideally not great but

00:09:45,990 --> 00:09:50,760
least I'll have good trace backs right

00:09:48,060 --> 00:09:53,370
and if one name text a long time from

00:09:50,760 --> 00:09:54,899
name takes a long time I know I can I

00:09:53,370 --> 00:09:56,790
can do magic I can't fix that but I can

00:09:54,899 --> 00:09:58,680
figure out why it happened right and

00:09:56,790 --> 00:10:01,490
it's nothing like they will suffice in

00:09:58,680 --> 00:10:03,990
firm name I understand what happened and

00:10:01,490 --> 00:10:08,910
so I there's a few things that this lets

00:10:03,990 --> 00:10:11,040
me do much better right first of all I

00:10:08,910 --> 00:10:14,040
can test right

00:10:11,040 --> 00:10:16,080
so if I want to test this object I can

00:10:14,040 --> 00:10:18,990
just call the constructor with a mock

00:10:16,080 --> 00:10:21,029
destination object with say string i/o

00:10:18,990 --> 00:10:22,890
input and do everything I do with the

00:10:21,029 --> 00:10:25,050
object the object doesn't care the

00:10:22,890 --> 00:10:26,610
constructor is built to support that I'm

00:10:25,050 --> 00:10:28,230
just not going to be back from 9 but

00:10:26,610 --> 00:10:29,790
that's fine from name is not very

00:10:28,230 --> 00:10:30,240
complicated code either it works or it

00:10:29,790 --> 00:10:34,080
doesn't

00:10:30,240 --> 00:10:36,390
I don't have partial objects and I even

00:10:34,080 --> 00:10:38,850
get one other nice thing which is more

00:10:36,390 --> 00:10:40,620
and more code nowadays is starting to

00:10:38,850 --> 00:10:42,480
think how can i leverage async

00:10:40,620 --> 00:10:44,250
especially now the taissa can await our

00:10:42,480 --> 00:10:46,560
keywords in the language and it's much

00:10:44,250 --> 00:10:49,440
easier to write async code you'll notice

00:10:46,560 --> 00:10:52,260
that a named constructor the way I wrote

00:10:49,440 --> 00:10:54,810
it I wrote it with death but you can

00:10:52,260 --> 00:10:56,579
easily write async death you can make

00:10:54,810 --> 00:10:58,709
open something that you know you can

00:10:56,579 --> 00:11:01,200
make like that something that which is

00:10:58,709 --> 00:11:02,940
across the internet asks what's the name

00:11:01,200 --> 00:11:05,339
of the file should open then open the

00:11:02,940 --> 00:11:06,630
local file and that can takes hours and

00:11:05,339 --> 00:11:08,610
that's fine because you're doing away

00:11:06,630 --> 00:11:10,980
there and that can be an Isaac death a

00:11:08,610 --> 00:11:12,540
constructor cannot have an ASIC defin in

00:11:10,980 --> 00:11:14,220
it while you cannot async death under

00:11:12,540 --> 00:11:14,850
underneath that wouldn't really make

00:11:14,220 --> 00:11:16,860
sense

00:11:14,850 --> 00:11:18,600
what would you return but you and I

00:11:16,860 --> 00:11:20,730
think that make sense it's just a method

00:11:18,600 --> 00:11:27,210
that happens to return something of type

00:11:20,730 --> 00:11:35,690
stuff yes sorry

00:11:27,210 --> 00:11:35,690
oh so yeah that's a mistake - by med

00:11:37,280 --> 00:11:44,520
okay let's move on okay so you might

00:11:42,390 --> 00:11:46,470
think this is really boring motion all

00:11:44,520 --> 00:11:48,600
my constructor are gonna be like you

00:11:46,470 --> 00:11:50,280
know these like the Attic was there that

00:11:48,600 --> 00:11:52,380
equal that and there's one thing that

00:11:50,280 --> 00:11:54,030
computers are really good at which is

00:11:52,380 --> 00:11:55,890
automating the boring stuff was even

00:11:54,030 --> 00:11:57,930
like a book of that name automate the

00:11:55,890 --> 00:11:59,430
boring stuff with my son and one

00:11:57,930 --> 00:12:01,370
excellent library that automates the

00:11:59,430 --> 00:12:04,020
boring stuff with python is others

00:12:01,370 --> 00:12:06,030
others helps you automate building

00:12:04,020 --> 00:12:07,920
object and that will construct an object

00:12:06,030 --> 00:12:09,720
that is much better than the object ray

00:12:07,920 --> 00:12:13,020
showed you earlier right because eight

00:12:09,720 --> 00:12:16,230
will have the right constructor and it

00:12:13,020 --> 00:12:17,400
has a good rapper right so I talked

00:12:16,230 --> 00:12:19,020
about like why I should write a rapper

00:12:17,400 --> 00:12:20,670
because it's a stack trace they probably

00:12:19,020 --> 00:12:22,800
want to know what's the name of the file

00:12:20,670 --> 00:12:24,300
world and I probably want to know I

00:12:22,800 --> 00:12:26,580
probably want the representation of

00:12:24,300 --> 00:12:28,470
destination to be there so this is great

00:12:26,580 --> 00:12:30,480
and it also has like you know equality

00:12:28,470 --> 00:12:33,240
checking and lots of other things and it

00:12:30,480 --> 00:12:36,930
just creates Auto attributes so I just

00:12:33,240 --> 00:12:40,320
have to specify my stuff in the mypie

00:12:36,930 --> 00:12:43,440
syntax and just works and as a side

00:12:40,320 --> 00:12:45,780
benefit I even got my PI syntax so again

00:12:43,440 --> 00:12:48,000
if I was slightly more civilized I would

00:12:45,780 --> 00:12:49,710
say destination actually has to comply

00:12:48,000 --> 00:12:52,710
with some interface and if input has to

00:12:49,710 --> 00:12:54,210
comply with some interface actually my

00:12:52,710 --> 00:12:56,310
PI with the right plugins will support

00:12:54,210 --> 00:12:58,830
those interfaces so you can actually be

00:12:56,310 --> 00:13:03,840
really civilized here I was just doing

00:12:58,830 --> 00:13:06,450
it super fast once use others then it's

00:13:03,840 --> 00:13:08,790
really really easy to also make your

00:13:06,450 --> 00:13:10,980
object immutable so we already call at

00:13:08,790 --> 00:13:12,840
all you need to do is for than equals

00:13:10,980 --> 00:13:15,330
true and you notice it's the way I

00:13:12,840 --> 00:13:17,550
showed you what stuff is there's no

00:13:15,330 --> 00:13:19,500
reason to ever mutate stuff right the F

00:13:17,550 --> 00:13:21,330
input is F input the destination the

00:13:19,500 --> 00:13:22,860
destination may be say we know will

00:13:21,330 --> 00:13:25,620
mutate in weird ways but there's no

00:13:22,860 --> 00:13:27,360
reason to have a mutate stuff itself and

00:13:25,620 --> 00:13:28,710
it's pretty nice not to have to mutate

00:13:27,360 --> 00:13:30,750
it because then you know that if you set

00:13:28,710 --> 00:13:32,550
it to a function that function cannot

00:13:30,750 --> 00:13:35,670
mutate it because nothing can mutate it

00:13:32,550 --> 00:13:36,900
right so you know that you can pass it

00:13:35,670 --> 00:13:38,670
around and you don't have to worry about

00:13:36,900 --> 00:13:39,720
whether the function doc string says I

00:13:38,670 --> 00:13:41,279
actually changed

00:13:39,720 --> 00:13:42,750
if input and you don't have to read the

00:13:41,279 --> 00:13:46,740
dog string it's not going to change it

00:13:42,750 --> 00:13:48,509
so here I'm creating stuff and you

00:13:46,740 --> 00:13:51,870
notice that if I try to change the F

00:13:48,509 --> 00:13:53,519
input it will just raise an exception so

00:13:51,870 --> 00:13:55,170
that's great right you think okay at

00:13:53,519 --> 00:13:57,839
least like you cannot mutate it but

00:13:55,170 --> 00:13:59,100
sometimes I do need to kind of mutate

00:13:57,839 --> 00:14:00,689
you I'd event you might imagine an

00:13:59,100 --> 00:14:02,639
object that's a point right like the

00:14:00,689 --> 00:14:04,620
point has two coordinates x and y and

00:14:02,639 --> 00:14:06,480
you want a point if this has the same X

00:14:04,620 --> 00:14:08,069
and different why I'm not going to use

00:14:06,480 --> 00:14:09,480
that point anyway so you say oh yeah I

00:14:08,069 --> 00:14:15,810
wish I could mutate it it would have

00:14:09,480 --> 00:14:17,519
been easier oh so so I already talked

00:14:15,810 --> 00:14:20,639
about that like you mutability helps you

00:14:17,519 --> 00:14:22,769
avoid bugs nonfunction can change it it

00:14:20,639 --> 00:14:26,250
helps you simplify the interfaces

00:14:22,769 --> 00:14:29,670
because usually you have to specify what

00:14:26,250 --> 00:14:32,339
variance invariants your class have if

00:14:29,670 --> 00:14:33,930
you have immutability you cannot change

00:14:32,339 --> 00:14:35,819
invariants right because you have no

00:14:33,930 --> 00:14:37,379
variance you cannot break any invariance

00:14:35,819 --> 00:14:40,160
so whatever variance you create with

00:14:37,379 --> 00:14:43,139
will stay for the lifetime of the object

00:14:40,160 --> 00:14:45,209
and finally if you do want to kind of

00:14:43,139 --> 00:14:47,550
mutate which means give me a new object

00:14:45,209 --> 00:14:50,279
with almost the same attributes except

00:14:47,550 --> 00:14:52,350
one change there is the vol function and

00:14:50,279 --> 00:14:54,750
evolve is very useful again imagine that

00:14:52,350 --> 00:14:57,959
if evolve is the only thing that has

00:14:54,750 --> 00:14:59,459
like the access to point then that's

00:14:57,959 --> 00:15:01,439
fine you just garbage collects the old

00:14:59,459 --> 00:15:03,300
point but if someone did hole somewhere

00:15:01,439 --> 00:15:04,680
we would refer to the old point that

00:15:03,300 --> 00:15:07,500
reference is not gonna change it that's

00:15:04,680 --> 00:15:11,309
very useful right like because you won't

00:15:07,500 --> 00:15:13,079
have any inadvertent in inadvertently

00:15:11,309 --> 00:15:17,309
share immutable data which is of course

00:15:13,079 --> 00:15:19,500
the worst thing in the world okay so now

00:15:17,309 --> 00:15:22,680
that we've done away with immutability

00:15:19,500 --> 00:15:25,529
and we've done away with with with

00:15:22,680 --> 00:15:27,899
induced across factors why do we need

00:15:25,529 --> 00:15:30,389
private methods so this is a classic

00:15:27,899 --> 00:15:32,430
example for private methods right this

00:15:30,389 --> 00:15:34,800
is an object this is eval to simulate an

00:15:32,430 --> 00:15:36,269
HTTP session we don't want to give

00:15:34,800 --> 00:15:37,800
people direct access to underscore

00:15:36,269 --> 00:15:40,410
requests because then we would have to

00:15:37,800 --> 00:15:41,939
worry about you know what methods do we

00:15:40,410 --> 00:15:43,649
allow and some methods have different

00:15:41,939 --> 00:15:45,300
semantics and I might actually you know

00:15:43,649 --> 00:15:46,620
have different ifs and I I don't want to

00:15:45,300 --> 00:15:48,480
like think about it

00:15:46,620 --> 00:15:51,179
I just want my public interface to be

00:15:48,480 --> 00:15:52,829
getting ahead and I mean tell me like

00:15:51,179 --> 00:15:53,370
they also share some code white which I

00:15:52,829 --> 00:15:55,080
would

00:15:53,370 --> 00:15:56,730
all put in requests and in this case I

00:15:55,080 --> 00:15:58,440
didn't have time to write it and no

00:15:56,730 --> 00:16:00,029
space on a slide so I'm just not doing

00:15:58,440 --> 00:16:04,080
anything but you know in real life this

00:16:00,029 --> 00:16:05,160
would you know do something HTTP like so

00:16:04,080 --> 00:16:08,130
what's the problem is that that looks

00:16:05,160 --> 00:16:11,460
like a perfectly good design well the

00:16:08,130 --> 00:16:14,270
problem with that is that nobody

00:16:11,460 --> 00:16:18,150
specified what request actually does

00:16:14,270 --> 00:16:20,400
right so what can I assume about

00:16:18,150 --> 00:16:22,110
requests what can it do right like

00:16:20,400 --> 00:16:24,060
you'll suddenly find you need to

00:16:22,110 --> 00:16:26,310
document it why did we need to document

00:16:24,060 --> 00:16:27,570
it not because someone external to the

00:16:26,310 --> 00:16:29,070
class because you're not probably the

00:16:27,570 --> 00:16:30,480
last one to touch it right like someone

00:16:29,070 --> 00:16:32,910
will probably want to add some post

00:16:30,480 --> 00:16:34,200
method right and when the post method

00:16:32,910 --> 00:16:35,850
that you want to care about what

00:16:34,200 --> 00:16:37,410
requests assumptions assumptions

00:16:35,850 --> 00:16:39,120
requests make so it doesn't we didn't

00:16:37,410 --> 00:16:42,810
save yourself any time by making a no

00:16:39,120 --> 00:16:44,730
request private what you did was

00:16:42,810 --> 00:16:46,860
probably not do that documentation

00:16:44,730 --> 00:16:48,510
correct its private I don't believe me -

00:16:46,860 --> 00:16:51,990
like carefully document what it very the

00:16:48,510 --> 00:16:53,670
specs and then the maintainer is gonna

00:16:51,990 --> 00:16:55,440
have a very interesting time and of

00:16:53,670 --> 00:16:57,839
course you don't wanna do fine you wanna

00:16:55,440 --> 00:16:59,190
maintainer to have a very boring time so

00:16:57,839 --> 00:17:01,260
what do you do if you still don't want

00:16:59,190 --> 00:17:03,240
to make requests external externally

00:17:01,260 --> 00:17:05,939
available well you have private objects

00:17:03,240 --> 00:17:07,949
right we have a class called voyaged PE

00:17:05,939 --> 00:17:09,839
session it's very obvious what they need

00:17:07,949 --> 00:17:12,390
to document about HTTP section which is

00:17:09,839 --> 00:17:14,730
the request oh you know and what what it

00:17:12,390 --> 00:17:17,189
assumes and then I don't allow access to

00:17:14,730 --> 00:17:19,110
that directly from inside the HTTP

00:17:17,189 --> 00:17:22,559
session so by external interface it's

00:17:19,110 --> 00:17:24,329
still the same thing but internally I

00:17:22,559 --> 00:17:25,980
built in a way that is very obvious that

00:17:24,329 --> 00:17:27,480
this is a separate object it has its own

00:17:25,980 --> 00:17:29,580
invariants and I should worry about

00:17:27,480 --> 00:17:31,590
those invariants and as you maintain it

00:17:29,580 --> 00:17:35,820
you have to read what does what gtp

00:17:31,590 --> 00:17:38,850
session assume finally after we have

00:17:35,820 --> 00:17:40,800
done away with private methods we come

00:17:38,850 --> 00:17:43,410
to other methods which are not private

00:17:40,800 --> 00:17:44,880
and we like should we have them so this

00:17:43,410 --> 00:17:46,740
is a classic case of why you should have

00:17:44,880 --> 00:17:50,490
private message right you have a 2d

00:17:46,740 --> 00:17:53,640
point and you have a 3d point and they

00:17:50,490 --> 00:17:55,080
have methods this of origin and each of

00:17:53,640 --> 00:17:56,670
them like understand this is voyage on

00:17:55,080 --> 00:17:58,350
and as you noticed because they had to

00:17:56,670 --> 00:18:00,179
switch sides I couldn't put both

00:17:58,350 --> 00:18:01,560
thousands on the same slide because I

00:18:00,179 --> 00:18:04,710
didn't have room right those classes

00:18:01,560 --> 00:18:06,510
have distance from origin right and you

00:18:04,710 --> 00:18:07,360
know this is a Pythagorean distance but

00:18:06,510 --> 00:18:09,190
if you read my

00:18:07,360 --> 00:18:10,630
like me maybe you want like the New York

00:18:09,190 --> 00:18:12,549
City metric where it's like how many

00:18:10,630 --> 00:18:16,270
blocks you have to go was the Maxima

00:18:12,549 --> 00:18:18,130
trick or the P matrix which is weirdly

00:18:16,270 --> 00:18:20,559
as a tarik but really important for like

00:18:18,130 --> 00:18:22,330
some people I mean fine you have more

00:18:20,559 --> 00:18:24,280
and more method than this distance right

00:18:22,330 --> 00:18:25,660
points can do a lot more things than

00:18:24,280 --> 00:18:27,040
just compute the distance right maybe

00:18:25,660 --> 00:18:28,929
you want to rotate it about the origin

00:18:27,040 --> 00:18:32,230
and you have all these things that you

00:18:28,929 --> 00:18:34,440
suddenly have to do and you your classes

00:18:32,230 --> 00:18:37,120
get some gets more and more bloated

00:18:34,440 --> 00:18:38,770
right so it's really hard to read and

00:18:37,120 --> 00:18:41,020
even adding one method I couldn't fit

00:18:38,770 --> 00:18:44,740
both classes on on one slide I just kind

00:18:41,020 --> 00:18:47,940
of annoying so let's stop that let's

00:18:44,740 --> 00:18:51,160
stop writing myself better so stupid so

00:18:47,940 --> 00:18:53,049
we put now we can put both classes on

00:18:51,160 --> 00:18:55,210
the same thing but you well I still want

00:18:53,049 --> 00:18:56,380
to have a distance from origin I don't

00:18:55,210 --> 00:18:58,390
want to not to have to carry don't

00:18:56,380 --> 00:19:01,440
matter if it's two Dean's and do that if

00:18:58,390 --> 00:19:03,850
it's 3d do that great this is why the

00:19:01,440 --> 00:19:06,580
module called funk tools in which the

00:19:03,850 --> 00:19:08,380
function called single dispatch and you

00:19:06,580 --> 00:19:11,080
can define business from origin like

00:19:08,380 --> 00:19:13,210
that and now you can just call this from

00:19:11,080 --> 00:19:15,400
origin it's a function notice that this

00:19:13,210 --> 00:19:17,110
code you can put in a separate model why

00:19:15,400 --> 00:19:18,760
this is a separate concern one was the

00:19:17,110 --> 00:19:20,169
concern about how to represent points

00:19:18,760 --> 00:19:22,570
the other is how to represent

00:19:20,169 --> 00:19:24,160
Pythagorean distance which only matters

00:19:22,570 --> 00:19:25,780
if you care about Pythagorean distance

00:19:24,160 --> 00:19:28,270
if you care about this is you don't even

00:19:25,780 --> 00:19:29,559
bother importing that module right you

00:19:28,270 --> 00:19:31,150
know you can imagine that maybe it's

00:19:29,559 --> 00:19:32,770
even bigger right maybe you don't even

00:19:31,150 --> 00:19:34,210
bother people strolling that Python

00:19:32,770 --> 00:19:36,070
package if you don't need Pythagorean

00:19:34,210 --> 00:19:38,470
distance right maybe you only need other

00:19:36,070 --> 00:19:39,970
diseases and of course this is just one

00:19:38,470 --> 00:19:41,860
function but you know in real life of

00:19:39,970 --> 00:19:44,320
course this has a whole lot of things so

00:19:41,860 --> 00:19:47,380
it may might actually break out to

00:19:44,320 --> 00:19:49,419
separate by P I example and let us keep

00:19:47,380 --> 00:19:53,830
the why should innovate inheritance

00:19:49,419 --> 00:19:54,850
because I don't have tons of time but we

00:19:53,830 --> 00:19:56,770
can talk about this later

00:19:54,850 --> 00:20:00,309
if you matter and I'll be hanging out

00:19:56,770 --> 00:20:01,840
you know in the conference but I want to

00:20:00,309 --> 00:20:03,490
talk about like the bigger lessons I

00:20:01,840 --> 00:20:05,490
have to I have to talk about like you

00:20:03,490 --> 00:20:08,169
know about boring objects which is

00:20:05,490 --> 00:20:09,940
packed in Python you can do anything if

00:20:08,169 --> 00:20:12,490
you want to have like a weird diamond

00:20:09,940 --> 00:20:14,020
inheritance and you want to write about

00:20:12,490 --> 00:20:16,370
construction that's part of your

00:20:14,020 --> 00:20:18,710
interface you can do that

00:20:16,370 --> 00:20:20,809
you can do that popular packages in the

00:20:18,710 --> 00:20:22,580
wild have done that right it sounds like

00:20:20,809 --> 00:20:24,290
a theory right people actually done that

00:20:22,580 --> 00:20:28,820
and publish the things in pypy I and

00:20:24,290 --> 00:20:30,590
other people have used it but maybe it's

00:20:28,820 --> 00:20:32,240
not a great idea to do that right maybe

00:20:30,590 --> 00:20:34,490
it makes people life's very way more

00:20:32,240 --> 00:20:36,500
interesting and why do people do that

00:20:34,490 --> 00:20:39,920
because when you start you have no idea

00:20:36,500 --> 00:20:42,800
what you're doing right I'm on a Python

00:20:39,920 --> 00:20:44,360
channel kind of like a secret of the

00:20:42,800 --> 00:20:46,100
books channel with a lot of people who

00:20:44,360 --> 00:20:47,630
hold like big systems right like some of

00:20:46,100 --> 00:20:50,360
us come from distance some of us come

00:20:47,630 --> 00:20:52,190
from a career and we all have these big

00:20:50,360 --> 00:20:54,380
systems that have all these really bad

00:20:52,190 --> 00:20:56,179
things about them every single thing I

00:20:54,380 --> 00:20:58,160
said is something a twisted and

00:20:56,179 --> 00:21:00,020
mercurial and Jupiter and lots of these

00:20:58,160 --> 00:21:02,059
big systems you're used to in Python all

00:21:00,020 --> 00:21:04,010
do it's because when we started writing

00:21:02,059 --> 00:21:06,320
those big systems we didn't know how to

00:21:04,010 --> 00:21:08,840
build big systems we learned all these

00:21:06,320 --> 00:21:12,170
lessons later on you can change a lot of

00:21:08,840 --> 00:21:14,660
the earlier decisions you make because

00:21:12,170 --> 00:21:16,370
you already made them and now you're

00:21:14,660 --> 00:21:17,690
like stuck in like backwards-compatible

00:21:16,370 --> 00:21:20,660
hell because not only are these big

00:21:17,690 --> 00:21:22,820
systems so used by like everybody right

00:21:20,660 --> 00:21:24,140
a lot of people use mercurial a lot of

00:21:22,820 --> 00:21:26,600
people use traces a lot of people use

00:21:24,140 --> 00:21:28,550
flask lots of people use Django every

00:21:26,600 --> 00:21:30,410
decision that the people in these big

00:21:28,550 --> 00:21:35,300
systems made is the first approximation

00:21:30,410 --> 00:21:37,700
forever right so basically this is part

00:21:35,300 --> 00:21:39,740
of our reach out effort which is don't

00:21:37,700 --> 00:21:41,750
copy our stupid design decisions please

00:21:39,740 --> 00:21:43,520
do not look at what we have done in

00:21:41,750 --> 00:21:46,040
twisted America not all great systems

00:21:43,520 --> 00:21:49,820
built by really really smart engineers

00:21:46,040 --> 00:21:51,980
and occasionally I helped but they do

00:21:49,820 --> 00:21:53,750
not show you how to write good Python

00:21:51,980 --> 00:21:55,670
code the people who wrote those did not

00:21:53,750 --> 00:21:57,470
know how to write Python code the way we

00:21:55,670 --> 00:21:59,240
learn how to write Python code but by

00:21:57,470 --> 00:22:02,929
building those systems those are where

00:21:59,240 --> 00:22:05,630
we practiced and you don't often get

00:22:02,929 --> 00:22:07,730
these lessons until you have finished

00:22:05,630 --> 00:22:10,340
writing the big system and you started

00:22:07,730 --> 00:22:12,170
maintaining it so you only figure out

00:22:10,340 --> 00:22:13,910
that you've done everything wrong when

00:22:12,170 --> 00:22:15,559
you are done and these these things are

00:22:13,910 --> 00:22:17,960
in my deployment which is why people

00:22:15,559 --> 00:22:19,370
keep making those mistakes people say oh

00:22:17,960 --> 00:22:21,290
this is a great idea and it looks like a

00:22:19,370 --> 00:22:23,179
great idea for the first year and by the

00:22:21,290 --> 00:22:25,340
time you realize it was not a great idea

00:22:23,179 --> 00:22:29,240
it's too late to change - the only way

00:22:25,340 --> 00:22:32,510
to like win the game is not to start

00:22:29,240 --> 00:22:34,159
and so I want to encourage you all of

00:22:32,510 --> 00:22:35,630
you to write less interesting code that

00:22:34,159 --> 00:22:37,100
you relate to less interesting debug

00:22:35,630 --> 00:22:38,770
sessions at 4:00 a.m. in the morning

00:22:37,100 --> 00:22:40,820
because it's probably gonna be me

00:22:38,770 --> 00:22:43,159
debugging it at 4:00 a.m. and I really

00:22:40,820 --> 00:22:44,809
really like sleeping so be as dumb as

00:22:43,159 --> 00:22:48,350
possible when you're writing the code so

00:22:44,809 --> 00:22:50,179
I can understand it at 4:00 a.m. and

00:22:48,350 --> 00:22:52,190
that's it that's all I have to say don't

00:22:50,179 --> 00:22:53,600
have a few minutes for questions okay

00:22:52,190 --> 00:22:57,169
cool I have a few minutes for questions

00:22:53,600 --> 00:22:58,370
so I guess if you come up to a mic or

00:22:57,169 --> 00:22:59,809
something like that or you can shout the

00:22:58,370 --> 00:23:02,659
question at me and I'll repeat it if

00:22:59,809 --> 00:23:05,450
that makes it easier for you so like I

00:23:02,659 --> 00:23:09,169
said a lot of these big systems predate

00:23:05,450 --> 00:23:10,940
single dispatch I think by now like some

00:23:09,169 --> 00:23:12,440
internal projects are using single

00:23:10,940 --> 00:23:13,429
dispatch tracing some some big things

00:23:12,440 --> 00:23:15,799
inside Facebook

00:23:13,429 --> 00:23:20,659
I don't know big open sourcing that uses

00:23:15,799 --> 00:23:22,340
big dispatch in general the question was

00:23:20,659 --> 00:23:25,669
given given examples it will signal

00:23:22,340 --> 00:23:28,399
dispatch can you explain the benefits of

00:23:25,669 --> 00:23:32,090
using evolve as opposed to me mutating

00:23:28,399 --> 00:23:33,909
the object it seems like it can actually

00:23:32,090 --> 00:23:36,620
give a system that does it in the wild

00:23:33,909 --> 00:23:39,140
it didn't use evolve because when it was

00:23:36,620 --> 00:23:44,330
written characters was existing but it

00:23:39,140 --> 00:23:46,640
uses equivalent code so if you have a

00:23:44,330 --> 00:23:49,039
big system that kind of smoothes objects

00:23:46,640 --> 00:23:50,419
around right you eventually realize that

00:23:49,039 --> 00:23:53,539
you're not really sure who you gave that

00:23:50,419 --> 00:23:55,789
objects to and if you change that object

00:23:53,539 --> 00:23:57,860
you have no idea what other piece of

00:23:55,789 --> 00:23:59,450
thing that assumed they had an object

00:23:57,860 --> 00:24:02,299
they assumed I knew what was going on

00:23:59,450 --> 00:24:04,190
it's only gonna change people usually

00:24:02,299 --> 00:24:06,260
think of it in terms of Moses threaded

00:24:04,190 --> 00:24:08,390
code but the system I'm thinking about

00:24:06,260 --> 00:24:10,399
actually had zero threads right it has

00:24:08,390 --> 00:24:12,710
the one thread but it was written in a

00:24:10,399 --> 00:24:14,210
very thick style and I think style ends

00:24:12,710 --> 00:24:15,799
up having a lot of the similar things

00:24:14,210 --> 00:24:17,600
that spreads have well like these

00:24:15,799 --> 00:24:20,539
objects can move all about the system

00:24:17,600 --> 00:24:23,659
and the very long-lived and you take it

00:24:20,539 --> 00:24:25,640
and like you change something that is in

00:24:23,659 --> 00:24:27,440
this flow and it really didn't expect

00:24:25,640 --> 00:24:31,460
the object to change and now it's very

00:24:27,440 --> 00:24:33,200
very sad so we used in that case model

00:24:31,460 --> 00:24:35,990
called persistence which gives you like

00:24:33,200 --> 00:24:38,090
persistent data structures in Python so

00:24:35,990 --> 00:24:39,140
like things that look like lists and

00:24:38,090 --> 00:24:40,760
dictionaries

00:24:39,140 --> 00:24:44,240
it cannot mutate you can you think we

00:24:40,760 --> 00:24:46,100
were to revolve so we've always kind of

00:24:44,240 --> 00:24:47,950
like a lower grade version of that but

00:24:46,100 --> 00:24:51,380
it's often good enough for those things

00:24:47,950 --> 00:24:53,750
in Python and JavaScript especially it

00:24:51,380 --> 00:24:55,970
seems like there's this trend to shim in

00:24:53,750 --> 00:24:58,520
new things into the language that are

00:24:55,970 --> 00:24:59,900
missing in this case especially I feel

00:24:58,520 --> 00:25:02,360
like we saw a lot of that a lot of

00:24:59,900 --> 00:25:04,130
decorator functions and whatnot how do

00:25:02,360 --> 00:25:06,710
you feel like that fits into the

00:25:04,130 --> 00:25:08,810
narrative of beat'em right less

00:25:06,710 --> 00:25:10,880
interesting code but we're still

00:25:08,810 --> 00:25:13,280
introducing new proprietary knowledge

00:25:10,880 --> 00:25:16,160
that you need to have to understand a

00:25:13,280 --> 00:25:17,450
particular code base so that's a good

00:25:16,160 --> 00:25:19,070
question and you know like a lot of

00:25:17,450 --> 00:25:20,720
people like they see like you know the

00:25:19,070 --> 00:25:22,730
first thing I start is talking about

00:25:20,720 --> 00:25:24,680
boring objects and the first thing I

00:25:22,730 --> 00:25:27,830
show if dope interface which is a whole

00:25:24,680 --> 00:25:31,510
package that is some people consider

00:25:27,830 --> 00:25:33,860
really complicated and it ends up that

00:25:31,510 --> 00:25:35,660
so if you're not using the OP interface

00:25:33,860 --> 00:25:37,310
you're gonna use other things that will

00:25:35,660 --> 00:25:41,840
be more complicated as an OB interface

00:25:37,310 --> 00:25:43,550
you'll have an ABC but the ABC some at

00:25:41,840 --> 00:25:44,690
some point someone will add the message

00:25:43,550 --> 00:25:46,850
that does something and you realize that

00:25:44,690 --> 00:25:48,530
this was a really stupid idea so now you

00:25:46,850 --> 00:25:50,570
have a comment next to IBC saying never

00:25:48,530 --> 00:25:52,220
put method the do stuff and then you

00:25:50,570 --> 00:25:54,140
realize it like inheriting from the ABC

00:25:52,220 --> 00:25:56,690
in general is bad and you start having a

00:25:54,140 --> 00:25:59,810
comment next to it saying only use dot

00:25:56,690 --> 00:26:01,850
register and the thing is that like

00:25:59,810 --> 00:26:03,770
eventually you have more complexity than

00:26:01,850 --> 00:26:05,660
if you use something that people who

00:26:03,770 --> 00:26:07,640
build big systems right like in many

00:26:05,660 --> 00:26:10,990
ways though put spice of first big

00:26:07,640 --> 00:26:13,400
system because the people who use dope

00:26:10,990 --> 00:26:15,380
needles dope interface exactly because

00:26:13,400 --> 00:26:18,080
they needed a way to manage all that

00:26:15,380 --> 00:26:19,970
complexity and at that time the people

00:26:18,080 --> 00:26:21,350
who were like working on Python did not

00:26:19,970 --> 00:26:23,810
have a lot of experience with big

00:26:21,350 --> 00:26:26,360
systems so like ABC is probably good

00:26:23,810 --> 00:26:27,470
enough so unfortunately like a lot of

00:26:26,360 --> 00:26:30,500
these things are missing from core

00:26:27,470 --> 00:26:32,870
Python and you need other packages to

00:26:30,500 --> 00:26:35,960
add them core Python evolves more slowly

00:26:32,870 --> 00:26:38,600
than the package ecosystem okay so thank

00:26:35,960 --> 00:26:43,250
you all for listening I hope you had fun

00:26:38,600 --> 00:26:56,549
[Applause]

00:26:43,250 --> 00:26:56,549

YouTube URL: https://www.youtube.com/watch?v=EETjH5B0ujw


