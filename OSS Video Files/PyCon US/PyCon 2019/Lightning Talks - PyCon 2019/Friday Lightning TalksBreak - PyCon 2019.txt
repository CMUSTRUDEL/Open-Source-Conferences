Title: Friday Lightning TalksBreak - PyCon 2019
Publication date: 2019-05-06
Playlist: Lightning Talks - PyCon 2019
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:02,550
things that you can do app icon are

00:00:01,260 --> 00:00:04,319
great but none of my particular

00:00:02,550 --> 00:00:05,549
favorites is the lightning talk it's not

00:00:04,319 --> 00:00:07,259
started yet but it's starting soon

00:00:05,549 --> 00:00:09,120
please come and sit closer to the front

00:00:07,259 --> 00:00:10,320
but closer to the front you sit the more

00:00:09,120 --> 00:00:11,519
the speakers can see you the more they

00:00:10,320 --> 00:00:12,960
think you're engaged the more they think

00:00:11,519 --> 00:00:15,000
you're engaged the better their talks

00:00:12,960 --> 00:00:17,220
are it's like a virtuous circle of

00:00:15,000 --> 00:00:18,660
lightning talk wonderfulness so come to

00:00:17,220 --> 00:00:20,250
the front if you're sitting we're at the

00:00:18,660 --> 00:00:22,260
back consider coming forward did you

00:00:20,250 --> 00:00:24,779
know that every single row forwards you

00:00:22,260 --> 00:00:26,369
move guarantees an extra 10 percent of

00:00:24,779 --> 00:00:28,550
enjoyment and that is a mathematical

00:00:26,369 --> 00:00:28,550
fact

00:00:55,920 --> 00:00:59,309
welcome everyone welcome to Lightning

00:00:57,840 --> 00:01:00,690
tour's come sit near the front near the

00:00:59,309 --> 00:01:01,980
front is where the speakers can see you

00:01:00,690 --> 00:01:05,180
it makes them happy and makes their

00:01:01,980 --> 00:01:05,180
talks better that makes you happy

00:01:16,250 --> 00:01:19,490
we're going to start shortly so our

00:01:17,930 --> 00:01:21,940
first two speakers can come and get set

00:01:19,490 --> 00:01:21,940
up on stage

00:01:27,020 --> 00:01:30,979
rade welcome one and all welcome one and

00:01:29,329 --> 00:01:34,130
all to the lightning talks in some

00:01:30,979 --> 00:01:36,110
people's opinion the best session of all

00:01:34,130 --> 00:01:37,310
PyCon but actually all the sessions are

00:01:36,110 --> 00:01:39,610
good but this one's particularly good oh

00:01:37,310 --> 00:01:39,610
yeah

00:01:45,160 --> 00:01:48,310
[Music]

00:01:51,720 --> 00:01:54,600
now give it a little more time for a few

00:01:53,430 --> 00:01:55,740
more stragglers to come in if you've

00:01:54,600 --> 00:01:57,630
just come in come and sitting in the

00:01:55,740 --> 00:01:59,400
front if you came in ages ago and sat

00:01:57,630 --> 00:02:01,380
near the back why not come forwards and

00:01:59,400 --> 00:02:02,550
sit near the front you can stare at the

00:02:01,380 --> 00:02:05,160
speakers into the whites of their eye

00:02:02,550 --> 00:02:07,080
and get more out of the session rather

00:02:05,160 --> 00:02:10,100
than hiding at the back and and going on

00:02:07,080 --> 00:02:10,100
slack or something

00:02:51,770 --> 00:02:54,740
all right everyone I think we should

00:02:53,510 --> 00:02:57,470
make a start without too much further

00:02:54,740 --> 00:03:00,170
ado my name is Harry I am here to be

00:02:57,470 --> 00:03:02,060
your host for the lightning talks I hope

00:03:00,170 --> 00:03:09,890
you've all been enjoying PyCon so far I

00:03:02,060 --> 00:03:11,600
certainly have how are you alright for

00:03:09,890 --> 00:03:13,220
anyone that's new to lightning talks the

00:03:11,600 --> 00:03:14,900
lightning talk format is you have five

00:03:13,220 --> 00:03:16,700
minutes that's a maximum of five minutes

00:03:14,900 --> 00:03:18,680
although you can take less to give a

00:03:16,700 --> 00:03:20,360
talk about a pretty much any topic you

00:03:18,680 --> 00:03:23,090
like we have one session of lightning

00:03:20,360 --> 00:03:24,260
talks now you can also sign up for

00:03:23,090 --> 00:03:26,090
future sessions there is a session

00:03:24,260 --> 00:03:27,860
tomorrow morning which I believe there

00:03:26,090 --> 00:03:29,930
is a few slots left for the sign-up

00:03:27,860 --> 00:03:31,940
sheets are by the registration you just

00:03:29,930 --> 00:03:33,650
put your name up and we make a selection

00:03:31,940 --> 00:03:35,300
and send you an email shortly afterwards

00:03:33,650 --> 00:03:36,590
to tell you if you're up for the next

00:03:35,300 --> 00:03:38,420
slot there's a session tomorrow morning

00:03:36,590 --> 00:03:39,650
there's a session tomorrow evening sort

00:03:38,420 --> 00:03:41,320
of about this time tomorrow and there's

00:03:39,650 --> 00:03:43,790
a final session on Sunday morning

00:03:41,320 --> 00:03:44,270
they're great fun you never know what to

00:03:43,790 --> 00:03:45,980
expect

00:03:44,270 --> 00:03:47,210
perhaps one talk is boring to you but

00:03:45,980 --> 00:03:48,650
it's interesting to the person next to

00:03:47,210 --> 00:03:50,840
you and then the next talk is boring to

00:03:48,650 --> 00:03:53,060
them but interesting to you they're just

00:03:50,840 --> 00:03:54,410
my favorite my job here is to fill some

00:03:53,060 --> 00:03:55,790
dead air in between the speakers and

00:03:54,410 --> 00:03:57,500
tell bad jokes so that they sound better

00:03:55,790 --> 00:04:00,110
sorry about that

00:03:57,500 --> 00:04:02,630
and there's one little bit of lightning

00:04:00,110 --> 00:04:04,070
talks kind of administration which is

00:04:02,630 --> 00:04:05,630
I'd like you all at this point to just

00:04:04,070 --> 00:04:08,060
practice the thing with me which is clap

00:04:05,630 --> 00:04:12,110
with your fingers and you do like this

00:04:08,060 --> 00:04:14,450
could you do that for me or everyone

00:04:12,110 --> 00:04:16,220
like as loud as you can with your little

00:04:14,450 --> 00:04:18,049
fingers here we go can you hear that

00:04:16,220 --> 00:04:19,850
little murmur around the room so that

00:04:18,049 --> 00:04:21,859
when I basically give you a signal like

00:04:19,850 --> 00:04:23,180
this with one hand you do that clapping

00:04:21,859 --> 00:04:24,680
like that and that's going to be the

00:04:23,180 --> 00:04:26,660
signal to the speaker that their time is

00:04:24,680 --> 00:04:28,730
up and they're supposed to finish their

00:04:26,660 --> 00:04:31,070
current sentence I'll put up one hand

00:04:28,730 --> 00:04:32,420
you do this murmuring clap they get to

00:04:31,070 --> 00:04:34,430
finish their sentence when I put two

00:04:32,420 --> 00:04:36,140
hands up then you drown them out with

00:04:34,430 --> 00:04:38,120
applause because a you've enjoyed their

00:04:36,140 --> 00:04:39,350
talk and be their time is up and we move

00:04:38,120 --> 00:04:42,250
on to the next person does that make

00:04:39,350 --> 00:04:42,250
sense so we practice

00:04:50,400 --> 00:04:55,530
without further ado let me hand over to

00:04:52,540 --> 00:04:55,530
Eric please give him a big hand

00:04:58,889 --> 00:05:06,310
hi my name is Eric Smith I designed f

00:05:04,000 --> 00:05:12,280
strings and implement them for C Python

00:05:06,310 --> 00:05:13,990
so thank you so this is a talk about a

00:05:12,280 --> 00:05:16,630
feature of f strings that I'm planning

00:05:13,990 --> 00:05:18,760
on adding 43.8 but in all fairness this

00:05:16,630 --> 00:05:20,380
is not my idea it's Larry Hastings idea

00:05:18,760 --> 00:05:23,500
so if you dislike it

00:05:20,380 --> 00:05:25,210
it is Larry's idea if you're like me you

00:05:23,500 --> 00:05:28,630
do lots of debugging with print

00:05:25,210 --> 00:05:29,800
statements I do it all day long and my

00:05:28,630 --> 00:05:32,650
print statements are often like this

00:05:29,800 --> 00:05:34,810
first line x equals curly brace X being

00:05:32,650 --> 00:05:36,880
our right curly brace and you go on and

00:05:34,810 --> 00:05:39,460
on and on I don't know about you but I

00:05:36,880 --> 00:05:41,530
find that all but impossible to type I'm

00:05:39,460 --> 00:05:44,740
wrong more often than I'm right with the

00:05:41,530 --> 00:05:47,530
braces and whatnot so this idea is to

00:05:44,740 --> 00:05:50,290
add a converging operator which is kind

00:05:47,530 --> 00:05:53,860
of like banging s bang are and bang a

00:05:50,290 --> 00:05:56,110
and we're currently thinking bang D for

00:05:53,860 --> 00:05:58,720
debug and the idea is that when you

00:05:56,110 --> 00:06:01,330
write F expression bang D in curly

00:05:58,720 --> 00:06:03,400
braces and expands to the text of the

00:06:01,330 --> 00:06:05,919
expression an equal sign and the value

00:06:03,400 --> 00:06:09,820
of the expression so now you can write

00:06:05,919 --> 00:06:11,979
just write X bang dy bang D my long URL

00:06:09,820 --> 00:06:14,380
bang D in the expression bang D and it

00:06:11,979 --> 00:06:15,880
will produce as its output the literal

00:06:14,380 --> 00:06:17,919
text of the expression so if you've got

00:06:15,880 --> 00:06:21,400
spaces in there it'll put the spaces in

00:06:17,919 --> 00:06:23,289
the output my example here with the 9

00:06:21,400 --> 00:06:25,720
times X plus 15 it would literally print

00:06:23,289 --> 00:06:28,660
out nine times active space plus space

00:06:25,720 --> 00:06:31,030
15 equals 42 so hopefully it's will save

00:06:28,660 --> 00:06:36,280
lots of typing for people like me who is

00:06:31,030 --> 00:06:38,610
my audience and this will be in 3.8 and

00:06:36,280 --> 00:06:38,610
that's it

00:06:43,500 --> 00:06:47,520
thank you Eric Chilton suite up next is

00:06:45,870 --> 00:06:49,500
Shawn are you ready to go Shawn I am is

00:06:47,520 --> 00:06:50,940
your slide up on the screen look up on

00:06:49,500 --> 00:06:53,330
the screen yeah all right give a big

00:06:50,940 --> 00:06:53,330
hand everyone

00:06:56,220 --> 00:06:59,889
okay so I'm gonna talk about a project

00:06:58,870 --> 00:07:02,620
I've been working on for a couple years

00:06:59,889 --> 00:07:04,889
called data test that deals with data

00:07:02,620 --> 00:07:07,180
wrangling which can many times be awful

00:07:04,889 --> 00:07:10,569
a little bit about me my name is Shawn

00:07:07,180 --> 00:07:14,770
brown at zero 3sj Brown on Twitter I

00:07:10,569 --> 00:07:16,509
started using Python in about 2006 and I

00:07:14,770 --> 00:07:17,710
work as the technology director for the

00:07:16,509 --> 00:07:20,949
National Committee for an effective

00:07:17,710 --> 00:07:23,740
Congress which would call the NCC and at

00:07:20,949 --> 00:07:26,199
at the NCC we have done a lot of data

00:07:23,740 --> 00:07:28,780
analysis for a long time but with a lot

00:07:26,199 --> 00:07:31,060
of data analysis comes with a lot of

00:07:28,780 --> 00:07:32,860
data analysis means a lot of data

00:07:31,060 --> 00:07:37,330
processing so we do a lot of data

00:07:32,860 --> 00:07:39,220
processing and to make sure that the

00:07:37,330 --> 00:07:41,919
data that we get is accurate when we

00:07:39,220 --> 00:07:44,979
receive it and accurate after we do work

00:07:41,919 --> 00:07:47,409
to it we've been working on this data

00:07:44,979 --> 00:07:51,789
test tool which has three main features

00:07:47,409 --> 00:07:54,699
so start it provides validation methods

00:07:51,789 --> 00:07:57,130
to check that data satisfies a given

00:07:54,699 --> 00:08:00,400
requirement difference classes that

00:07:57,130 --> 00:08:01,690
describe elements that fail to when data

00:08:00,400 --> 00:08:04,030
elements fail to satisfy a requirement

00:08:01,690 --> 00:08:06,669
they're they're expressed as these

00:08:04,030 --> 00:08:09,460
difference objects and then it also

00:08:06,669 --> 00:08:13,060
provides acceptance context managers

00:08:09,460 --> 00:08:17,050
that accept differences that meet a

00:08:13,060 --> 00:08:18,969
specified criteria one of the main

00:08:17,050 --> 00:08:20,110
functions one thing I should say on that

00:08:18,969 --> 00:08:22,690
previous slide

00:08:20,110 --> 00:08:24,669
it supports PI test and unit tests but

00:08:22,690 --> 00:08:28,210
the slides here are PI tests

00:08:24,669 --> 00:08:30,159
specifically and in the PI test API the

00:08:28,210 --> 00:08:31,780
one of the main functions is the

00:08:30,159 --> 00:08:34,890
validate function which is rich

00:08:31,780 --> 00:08:39,399
comparison function and in this example

00:08:34,890 --> 00:08:42,279
it's the requirement is a set of a and B

00:08:39,399 --> 00:08:44,950
and we're validating that the data the

00:08:42,279 --> 00:08:48,450
elements in data satisfy that

00:08:44,950 --> 00:08:51,220
requirement and when validate is given a

00:08:48,450 --> 00:08:54,130
set requirement it checks for set

00:08:51,220 --> 00:08:55,930
membership when validate is given a

00:08:54,130 --> 00:08:57,579
function requirement it checks that that

00:08:55,930 --> 00:09:00,310
function returns true when given the

00:08:57,579 --> 00:09:02,920
data element it also works for mappings

00:09:00,310 --> 00:09:07,940
lists and other objects this example

00:09:02,920 --> 00:09:13,770
it's given a to to dictionaries

00:09:07,940 --> 00:09:15,510
the difference objects are right I guess

00:09:13,770 --> 00:09:18,330
when a validation fails the validation

00:09:15,510 --> 00:09:19,680
error is raised that in the validation

00:09:18,330 --> 00:09:21,560
error contains a number of these

00:09:19,680 --> 00:09:24,560
different objects the differences can be

00:09:21,560 --> 00:09:27,770
missing extra deviation or invalid

00:09:24,560 --> 00:09:32,220
looking back at this first example the

00:09:27,770 --> 00:09:33,750
given this set here there are two extra

00:09:32,220 --> 00:09:35,790
elements so when you run the test it

00:09:33,750 --> 00:09:37,140
sees Oh C and D are not part of this

00:09:35,790 --> 00:09:39,000
requirement so it fails with that

00:09:37,140 --> 00:09:41,730
validation error that contains these two

00:09:39,000 --> 00:09:43,800
differences likewise with the function

00:09:41,730 --> 00:09:49,590
here there are two elements that don't

00:09:43,800 --> 00:09:52,350
satisfy the is even predicate here in

00:09:49,590 --> 00:09:56,070
the mapping comparison this one does a

00:09:52,350 --> 00:09:58,260
numeric comparison and it sees that the

00:09:56,070 --> 00:10:00,660
that B contains one hundred and

00:09:58,260 --> 00:10:02,880
ninety-nine in the data but it contains

00:10:00,660 --> 00:10:04,560
200 in the requirement and likewise C

00:10:02,880 --> 00:10:06,120
contains 305 in the data but three

00:10:04,560 --> 00:10:09,180
hundred in the requirement so it gives

00:10:06,120 --> 00:10:14,400
these deviations with minus 1 and plus

00:10:09,180 --> 00:10:16,290
five ideally you want to correct errors

00:10:14,400 --> 00:10:19,530
when possible but sometimes you can't

00:10:16,290 --> 00:10:21,210
always correct errors sometimes two

00:10:19,530 --> 00:10:22,590
different reporting authorities disagree

00:10:21,210 --> 00:10:24,120
sometimes you don't have enough

00:10:22,590 --> 00:10:26,760
information and sometimes there's a

00:10:24,120 --> 00:10:29,370
requirement that you maintain the data

00:10:26,760 --> 00:10:32,700
as it was recorded and in these cases we

00:10:29,370 --> 00:10:35,490
have an acceptance system and these act

00:10:32,700 --> 00:10:37,110
as context managers that accept certain

00:10:35,490 --> 00:10:39,930
differences based on these criteria and

00:10:37,110 --> 00:10:41,280
if all of the acceptances or if all of

00:10:39,930 --> 00:10:44,100
the differences have been accepted the

00:10:41,280 --> 00:10:47,250
air is completely suppressed so here in

00:10:44,100 --> 00:10:50,880
this example back to that set membership

00:10:47,250 --> 00:10:53,520
test C and D fail that test and the the

00:10:50,880 --> 00:10:55,860
differences are extra C extra D we can

00:10:53,520 --> 00:10:58,500
add this accepted extra and then the

00:10:55,860 --> 00:10:59,760
test passes if we've decided you know

00:10:58,500 --> 00:11:01,230
with our own judgement that that's

00:10:59,760 --> 00:11:03,570
acceptable thing to do

00:11:01,230 --> 00:11:06,750
same here we have this two differences

00:11:03,570 --> 00:11:11,010
of minus 1 and plus 5 if we think that a

00:11:06,750 --> 00:11:12,870
deviation of you know 5 is okay we can

00:11:11,010 --> 00:11:16,460
add this accepted tolerance of plus or

00:11:12,870 --> 00:11:19,810
minus 5 acceptances can also be composed

00:11:16,460 --> 00:11:23,200
with you know operators ampersand

00:11:19,810 --> 00:11:25,210
to do intersections and unions you can

00:11:23,200 --> 00:11:27,490
install it with pip pip install there's

00:11:25,210 --> 00:11:28,870
no heart dependencies it supports many

00:11:27,490 --> 00:11:33,060
varieties of Python it's freely

00:11:28,870 --> 00:11:33,060
available and thank you for listening

00:11:34,380 --> 00:11:37,460
[Music]

00:11:38,370 --> 00:11:44,250
thank you very much Sean what was I

00:11:42,180 --> 00:11:46,620
gonna say hey you know what when a

00:11:44,250 --> 00:11:49,170
speaker finishes and there's questions

00:11:46,620 --> 00:11:50,670
time I don't think that's a nice time to

00:11:49,170 --> 00:11:52,680
leave the room because it's like really

00:11:50,670 --> 00:11:54,690
explicitly saying I'm finished being

00:11:52,680 --> 00:11:56,370
interested in this talk and I don't care

00:11:54,690 --> 00:11:57,779
about anyone's questions so a small

00:11:56,370 --> 00:11:59,610
thing of politeness is maybe if you've

00:11:57,779 --> 00:12:01,410
stayed for a whole talk stay for the

00:11:59,610 --> 00:12:02,700
last five minutes of questions as well

00:12:01,410 --> 00:12:04,170
rather than walking out I thought that

00:12:02,700 --> 00:12:04,770
in a room recently it didn't feel so

00:12:04,170 --> 00:12:06,270
nice

00:12:04,770 --> 00:12:07,529
everybody at PyCon has been incredibly

00:12:06,270 --> 00:12:10,730
nice says it's just a silly little

00:12:07,529 --> 00:12:13,110
oversight I'm sure on everyone's part

00:12:10,730 --> 00:12:15,710
yeah I shouldn't probably open with a

00:12:13,110 --> 00:12:20,250
general critique of audience behavior

00:12:15,710 --> 00:12:22,320
because so far been great the next one

00:12:20,250 --> 00:12:28,260
will be great too please give a big hand

00:12:22,320 --> 00:12:31,160
to Elisaveta and today I want to tell

00:12:28,260 --> 00:12:33,900
you a short story which changed my mind

00:12:31,160 --> 00:12:36,870
I'm a software developer of the PI term

00:12:33,900 --> 00:12:38,760
ID at JetBrains we're not a really big

00:12:36,870 --> 00:12:41,279
company in fact but we have several

00:12:38,760 --> 00:12:43,620
offices around the world and the biggest

00:12:41,279 --> 00:12:46,680
one is located in Saint Petersburg in

00:12:43,620 --> 00:12:50,040
Russia it is situated in the office

00:12:46,680 --> 00:12:52,620
building named the universe during the

00:12:50,040 --> 00:12:55,020
latest years we started to grow really

00:12:52,620 --> 00:12:58,110
fast and we realized that the universe

00:12:55,020 --> 00:13:00,120
isn't enough for NASA for us we started

00:12:58,110 --> 00:13:03,780
to look for the new office for the new

00:13:00,120 --> 00:13:05,700
space for us and finally we found it we

00:13:03,780 --> 00:13:10,170
found the new office and we called it

00:13:05,700 --> 00:13:14,070
yes we called it space our new office is

00:13:10,170 --> 00:13:16,770
a new building it's really cool we were

00:13:14,070 --> 00:13:19,230
very excited when we arrived there it

00:13:16,770 --> 00:13:22,410
has two towers it is located near the

00:13:19,230 --> 00:13:25,260
neva river and near the Gulf of Finland

00:13:22,410 --> 00:13:29,270
so we were really happy when we arrived

00:13:25,260 --> 00:13:35,310
there it's a new building it is cool and

00:13:29,270 --> 00:13:38,700
this nice Scandic style and it was it

00:13:35,310 --> 00:13:39,270
was really nice it it doesn't have open

00:13:38,700 --> 00:13:42,089
spaces

00:13:39,270 --> 00:13:44,610
you know just real room for four or five

00:13:42,089 --> 00:13:49,330
people a really great great place right

00:13:44,610 --> 00:13:52,029
and it was it was very good but

00:13:49,330 --> 00:13:54,850
there were some minor things about it

00:13:52,029 --> 00:13:57,640
you know it was still a bit under

00:13:54,850 --> 00:14:00,430
construct under construction for example

00:13:57,640 --> 00:14:03,100
you want to use a printer you come to a

00:14:00,430 --> 00:14:06,209
printer room and then you realize that

00:14:03,100 --> 00:14:10,120
there is no paper there okay no problem

00:14:06,209 --> 00:14:12,910
the paper appears in a few hours you go

00:14:10,120 --> 00:14:14,529
to a coffee point and there are some

00:14:12,910 --> 00:14:16,930
coffee machines but they don't produce

00:14:14,529 --> 00:14:20,560
hot water ok no problem

00:14:16,930 --> 00:14:23,290
you file the bulk and the fix appears

00:14:20,560 --> 00:14:26,410
with the next minor update now they

00:14:23,290 --> 00:14:28,029
produce hot water great you go to a

00:14:26,410 --> 00:14:30,970
meeting room and there are no

00:14:28,029 --> 00:14:33,970
whiteboards there ok no problems again

00:14:30,970 --> 00:14:34,510
you file a bug it will it is fixed in a

00:14:33,970 --> 00:14:39,550
few hours

00:14:34,510 --> 00:14:41,079
and you're happy that's great and in

00:14:39,550 --> 00:14:45,040
fact you have nothing to complain

00:14:41,079 --> 00:14:48,300
because every time the bug is fixed in a

00:14:45,040 --> 00:14:50,350
few hours and there are no problems and

00:14:48,300 --> 00:14:53,230
every day you see continuous

00:14:50,350 --> 00:14:56,350
improvements everywhere every day but

00:14:53,230 --> 00:15:00,940
the problem is every day you find new

00:14:56,350 --> 00:15:05,350
box as well after several iterations our

00:15:00,940 --> 00:15:09,670
new office was stabilized now it has a

00:15:05,350 --> 00:15:13,720
lot of happy users and a great view to a

00:15:09,670 --> 00:15:16,600
Baltic Sea you can see it's sunny on

00:15:13,720 --> 00:15:20,790
this photo but sometimes we have the

00:15:16,600 --> 00:15:26,200
weather exactly like in Cleveland and

00:15:20,790 --> 00:15:29,680
one thing which changed my mind in this

00:15:26,200 --> 00:15:31,839
history we're all here create software

00:15:29,680 --> 00:15:34,600
and everybody understands that it's

00:15:31,839 --> 00:15:37,720
important to create software without a

00:15:34,600 --> 00:15:41,230
box but this situation with the new

00:15:37,720 --> 00:15:43,810
building gave me an unforgettable

00:15:41,230 --> 00:15:45,940
experience because it's very important

00:15:43,810 --> 00:15:50,500
for every software developer to find

00:15:45,940 --> 00:15:55,299
themselves in the situation where every

00:15:50,500 --> 00:15:59,739
users find themselves rather often

00:15:55,299 --> 00:16:02,409
you definitely should do it and I

00:15:59,739 --> 00:16:04,119
believe it will change your mind at

00:16:02,409 --> 00:16:12,659
least it changed mine

00:16:04,119 --> 00:16:16,929
thank you all right Thank You Lizaveta I

00:16:12,659 --> 00:16:18,999
have a little joke about a ladies I

00:16:16,929 --> 00:16:20,709
heard this from a Polish programmer

00:16:18,999 --> 00:16:23,019
friend and she told me this joke says

00:16:20,709 --> 00:16:24,429
this is my granny's favorite joke it's a

00:16:23,019 --> 00:16:27,879
ladies walking down the road and she

00:16:24,429 --> 00:16:30,669
sees a horseshoe so she picks it up and

00:16:27,879 --> 00:16:33,629
and looks at it and turns it over and on

00:16:30,669 --> 00:16:33,629
the other side there's a horse

00:16:33,779 --> 00:16:40,680
please give Meredith a big hand

00:16:36,650 --> 00:16:44,110
[Applause]

00:16:40,680 --> 00:16:46,300
Thanks so my name my name is Meredith I

00:16:44,110 --> 00:16:47,709
run a startup called anvil we make tools

00:16:46,300 --> 00:16:49,240
for building full stack web apps with

00:16:47,709 --> 00:16:52,420
nothing but Python and we are sponsoring

00:16:49,240 --> 00:16:52,810
Python again this year it's great to be

00:16:52,420 --> 00:16:55,360
back

00:16:52,810 --> 00:16:57,550
like any good sponsor we have give out

00:16:55,360 --> 00:16:58,959
t-shirts to anybody who builds a nap

00:16:57,550 --> 00:17:01,450
with anvil and shows it to us at our

00:16:58,959 --> 00:17:04,120
stand there are two problems with this

00:17:01,450 --> 00:17:06,610
one as you've probably guessed from my

00:17:04,120 --> 00:17:08,079
accent we're not from round here so all

00:17:06,610 --> 00:17:10,799
the t-shirts have to come with me in a

00:17:08,079 --> 00:17:13,240
very heavy suitcase problem number two

00:17:10,799 --> 00:17:16,329
Python developers it turns out coming

00:17:13,240 --> 00:17:19,179
all sorts of shapes and sizes here are

00:17:16,329 --> 00:17:20,589
two people who program in Python and the

00:17:19,179 --> 00:17:22,540
shirt looks good or the one on the left

00:17:20,589 --> 00:17:26,049
is not going to look very dignified on

00:17:22,540 --> 00:17:27,760
the one on the right so the question is

00:17:26,049 --> 00:17:31,660
how many shirts in our limited space

00:17:27,760 --> 00:17:32,950
should we be bringing of each size and I

00:17:31,660 --> 00:17:34,630
mean we've done this before we could

00:17:32,950 --> 00:17:36,640
just be naive we could say well how many

00:17:34,630 --> 00:17:38,950
would take we gave out last year bring

00:17:36,640 --> 00:17:40,780
twice as many last year we gave out to

00:17:38,950 --> 00:17:43,390
women's extra smalls we should maybe

00:17:40,780 --> 00:17:46,150
bring four this year that makes sense

00:17:43,390 --> 00:17:49,570
last year we gave out 27 men's large

00:17:46,150 --> 00:17:51,070
shirts bringing 54 feels a little bit

00:17:49,570 --> 00:17:54,820
like overkill you there

00:17:51,070 --> 00:17:58,179
it's the law of large numbers that 54th

00:17:54,820 --> 00:18:00,790
men's large shirt is so much less likely

00:17:58,179 --> 00:18:03,160
to get used than that fourth women's

00:18:00,790 --> 00:18:05,919
extra small it's the law of large

00:18:03,160 --> 00:18:09,160
numbers larger sample sizes averaged out

00:18:05,919 --> 00:18:11,980
more reliably we can model this with a

00:18:09,160 --> 00:18:13,900
binomial distribution we roll three and

00:18:11,980 --> 00:18:16,030
a half thousand dice one for each of you

00:18:13,900 --> 00:18:19,960
and we just count up how many of them

00:18:16,030 --> 00:18:22,120
rolled men's large and thankfully it

00:18:19,960 --> 00:18:24,040
turns out that Syfy has a function for

00:18:22,120 --> 00:18:25,540
calculating exactly this and so I'm

00:18:24,040 --> 00:18:27,790
going to use it to build an interactive

00:18:25,540 --> 00:18:30,070
tool for exploring this distribution I'm

00:18:27,790 --> 00:18:32,230
the Reuters function that gets this

00:18:30,070 --> 00:18:34,510
distribution for a given number of

00:18:32,230 --> 00:18:37,690
attendees and a given probability of

00:18:34,510 --> 00:18:42,190
needing particular size of shirt so we

00:18:37,690 --> 00:18:44,470
return the PMF for that number of

00:18:42,190 --> 00:18:50,260
attendees and that probability for every

00:18:44,470 --> 00:18:52,120
value up to the number of attendees okay

00:18:50,260 --> 00:18:54,710
so we have our distribution we can now

00:18:52,120 --> 00:18:55,760
make an interactive tool to explore it

00:18:54,710 --> 00:18:59,510
we're gonna go to our user interface

00:18:55,760 --> 00:19:01,669
have a text box where we can enter how

00:18:59,510 --> 00:19:03,500
many of this shirt we used last time and

00:19:01,669 --> 00:19:05,320
then underneath it we're gonna stick a

00:19:03,500 --> 00:19:08,149
plot so we can explore the distribution

00:19:05,320 --> 00:19:14,090
and when you hit enter in this text box

00:19:08,149 --> 00:19:15,830
we're going to call that get

00:19:14,090 --> 00:19:18,320
distribution function we made earlier

00:19:15,830 --> 00:19:21,140
the number of attendees is 3,200 that

00:19:18,320 --> 00:19:23,870
spike on the probability is actually we

00:19:21,140 --> 00:19:26,419
can get this from the number we gave out

00:19:23,870 --> 00:19:29,330
last time because that was also out of a

00:19:26,419 --> 00:19:31,519
population of 3200 and once we've got

00:19:29,330 --> 00:19:34,820
the distribution then we can just plot

00:19:31,519 --> 00:19:37,789
that data as a bar chart whose y-values

00:19:34,820 --> 00:19:40,970
are that distribution so okay let's run

00:19:37,789 --> 00:19:43,010
this and let's explore the women's extra

00:19:40,970 --> 00:19:46,639
smalls right we gave away too last time

00:19:43,010 --> 00:19:49,250
and that's any guide the distribution is

00:19:46,639 --> 00:19:51,289
actually quite wide we're most likely of

00:19:49,250 --> 00:19:53,149
course to need to again this year but we

00:19:51,289 --> 00:19:55,850
could easily need twice that number or

00:19:53,149 --> 00:19:59,899
even more whereas if we go with the

00:19:55,850 --> 00:20:01,250
men's larges again gave away 27 last

00:19:59,899 --> 00:20:03,590
time but the distribution is a lot

00:20:01,250 --> 00:20:05,899
tighter here we're still again most

00:20:03,590 --> 00:20:09,049
likely to need 27 but with vanishingly

00:20:05,899 --> 00:20:11,179
unlikely to need twice that number so

00:20:09,049 --> 00:20:13,130
now we've constructed as a statistical

00:20:11,179 --> 00:20:14,960
model that can actually answer our

00:20:13,130 --> 00:20:16,370
question because we want to know how

00:20:14,960 --> 00:20:18,590
many shirts to bring because we don't

00:20:16,370 --> 00:20:20,889
want to run out and what we want to do

00:20:18,590 --> 00:20:24,049
is find a number of shirts of each size

00:20:20,889 --> 00:20:27,169
where there's a 95% probability that we

00:20:24,049 --> 00:20:29,059
will need that number or fewer and again

00:20:27,169 --> 00:20:30,950
Sify to the rescue it has a function for

00:20:29,059 --> 00:20:32,960
calculating this we're going to return

00:20:30,950 --> 00:20:35,779
this alongside the distribution it's the

00:20:32,960 --> 00:20:38,269
PPF so we're going to find the 95%

00:20:35,779 --> 00:20:40,730
points for this number of attendees and

00:20:38,269 --> 00:20:43,880
this probability back on my user

00:20:40,730 --> 00:20:46,399
interface that is the number of shirts

00:20:43,880 --> 00:20:47,659
we should be giving out so we want to

00:20:46,399 --> 00:20:51,679
display this we're going to stick a

00:20:47,659 --> 00:20:53,240
headline on our page oops nope we're

00:20:51,679 --> 00:20:56,480
going to stick a headline on our page

00:20:53,240 --> 00:20:58,730
and then as well as crossing the

00:20:56,480 --> 00:21:00,559
distribution we can just put some text

00:20:58,730 --> 00:21:02,180
on that headline saying with the

00:21:00,559 --> 00:21:08,630
instruction bring

00:21:02,180 --> 00:21:11,300
so many shirts and now if we run this we

00:21:08,630 --> 00:21:13,070
can see that if we want serve over the

00:21:11,300 --> 00:21:14,990
women's extra smalls we brought to last

00:21:13,070 --> 00:21:17,800
year we actually need to bring five this

00:21:14,990 --> 00:21:21,200
year to be 95% sure of not running out

00:21:17,800 --> 00:21:24,800
whereas with the men's extra-large sorry

00:21:21,200 --> 00:21:29,510
men's larges we only need to bring 36

00:21:24,800 --> 00:21:31,070
that's only 9 spares out of 27 all the

00:21:29,510 --> 00:21:35,000
source code for the app I have just

00:21:31,070 --> 00:21:37,130
britain is available at tiny URL slash

00:21:35,000 --> 00:21:38,570
overthinking t-shirts and if you want to

00:21:37,130 --> 00:21:41,000
know more please do come past our booth

00:21:38,570 --> 00:21:42,650
at the exhibition hall and you know what

00:21:41,000 --> 00:21:44,210
if every single one of you turns up and

00:21:42,650 --> 00:21:45,920
you all build an app with anvil and you

00:21:44,210 --> 00:21:47,480
completely clean us out of shirts

00:21:45,920 --> 00:21:51,160
well at least samples show the

00:21:47,480 --> 00:21:51,160
statisticians thank you very much

00:21:55,090 --> 00:21:58,080
Thank You Meredith

00:21:58,150 --> 00:22:03,370
pirate programmer walks into a bar and

00:22:01,270 --> 00:22:06,970
he's got a parrot on his shoulder and

00:22:03,370 --> 00:22:10,300
the parrots going pieces of seven pieces

00:22:06,970 --> 00:22:11,650
of seven and the bar me goes I think

00:22:10,300 --> 00:22:13,750
there's something wrong with your parrot

00:22:11,650 --> 00:22:16,150
and the programmer goes yeah he's got a

00:22:13,750 --> 00:22:18,330
parity error and the bomb he goes yeah I

00:22:16,150 --> 00:22:26,680
thought he was a bit off

00:22:18,330 --> 00:22:29,920
please get math you'll be hand hi I'm

00:22:26,680 --> 00:22:30,250
Maddie Maddie P on all kinds of social

00:22:29,920 --> 00:22:32,560
media

00:22:30,250 --> 00:22:35,560
I'm a full-time numpy developer in my

00:22:32,560 --> 00:22:37,210
day job I'm one year into a two-year

00:22:35,560 --> 00:22:39,670
contract and I'd love to talk to you all

00:22:37,210 --> 00:22:41,650
about that but not now people want to

00:22:39,670 --> 00:22:44,080
talk about it either we can do the

00:22:41,650 --> 00:22:46,180
hallway track or come to Syfy and Austin

00:22:44,080 --> 00:22:48,070
in July and we'll be talking about that

00:22:46,180 --> 00:22:49,960
I really would like to talk to you about

00:22:48,070 --> 00:22:53,920
type I how many people have heard about

00:22:49,960 --> 00:22:57,580
pi PI and what if I told you that pi PI

00:22:53,920 --> 00:22:59,860
is not pi PI now how many people have

00:22:57,580 --> 00:23:02,470
heard about it it's an alternative

00:22:59,860 --> 00:23:05,070
Python implementation written in Python

00:23:02,470 --> 00:23:08,890
and as a JIT which makes it really fast

00:23:05,070 --> 00:23:12,070
and a different GC and it's fast how

00:23:08,890 --> 00:23:14,590
fast blazingly astonish lis amazingly

00:23:12,070 --> 00:23:17,050
incredibly impressively fast and this

00:23:14,590 --> 00:23:19,540
claimers will be at the end now how many

00:23:17,050 --> 00:23:22,420
of you are actually used pi PI could you

00:23:19,540 --> 00:23:25,510
stand up not very many

00:23:22,420 --> 00:23:27,460
right but look around everybody who saw

00:23:25,510 --> 00:23:30,310
somebody who stood up they can ask them

00:23:27,460 --> 00:23:32,320
how their experience was with it you can

00:23:30,310 --> 00:23:35,470
actually try pi PI yourself would you

00:23:32,320 --> 00:23:37,230
like to see a demonstration of it want

00:23:35,470 --> 00:23:40,649
to see it again

00:23:37,230 --> 00:23:44,580
it was fast right so I can't actually

00:23:40,649 --> 00:23:46,470
show you demonstration right now if you

00:23:44,580 --> 00:23:48,750
want to try it out you can download it

00:23:46,470 --> 00:23:51,269
you open up a zip file and it's

00:23:48,750 --> 00:23:54,570
basically like a virtual end or a

00:23:51,269 --> 00:23:57,600
different Python distribution you do pi

00:23:54,570 --> 00:23:59,190
pi minus m ensure pip which provides you

00:23:57,600 --> 00:24:02,850
with a now you've got a nice pip

00:23:59,190 --> 00:24:05,330
environment pi pi minus m pip install

00:24:02,850 --> 00:24:09,059
the world and we promise that works

00:24:05,330 --> 00:24:12,510
disclaimers at the end so the good news

00:24:09,059 --> 00:24:14,669
is this should all just work okay the

00:24:12,510 --> 00:24:17,389
disclaimers are the pipe I may cause

00:24:14,669 --> 00:24:20,340
anxiety feelings of inadequacy

00:24:17,389 --> 00:24:22,590
frustration a desire to rip your CP out

00:24:20,340 --> 00:24:24,779
of you out of your computer and if you

00:24:22,590 --> 00:24:28,799
feel any of these symptoms don't blame

00:24:24,779 --> 00:24:30,480
us okay but really pip install will

00:24:28,799 --> 00:24:32,460
sometimes need a compiler because we're

00:24:30,480 --> 00:24:37,470
just now building wheels and starting to

00:24:32,460 --> 00:24:40,230
now that many Linux 2010 is a thing yay

00:24:37,470 --> 00:24:44,130
for the pipe we're gonna start uploading

00:24:40,230 --> 00:24:47,100
some wheels to pipe I pure Python should

00:24:44,130 --> 00:24:49,799
be very very fast but some see extension

00:24:47,100 --> 00:24:51,570
modules like numpy may not be as fast as

00:24:49,799 --> 00:24:54,179
you'd like them to be and if you want

00:24:51,570 --> 00:24:57,300
more information talk to me or visit us

00:24:54,179 --> 00:25:00,500
at our website thank you

00:24:57,300 --> 00:25:00,500
[Music]

00:25:01,690 --> 00:25:06,030
all right I have another story about a

00:25:04,630 --> 00:25:08,230
Russian watchmaker

00:25:06,030 --> 00:25:09,700
but I feel like these lightning talks

00:25:08,230 --> 00:25:12,640
are so slick there's absolutely no need

00:25:09,700 --> 00:25:14,500
for anyone to hear that are you ready to

00:25:12,640 --> 00:25:22,840
take us away jelly please give a big

00:25:14,500 --> 00:25:24,460
hand and yellow toaster I'm a software

00:25:22,840 --> 00:25:25,810
engineer over at Quora in California

00:25:24,460 --> 00:25:28,780
which is a great place to read Python

00:25:25,810 --> 00:25:30,520
codes if you're interested I also think

00:25:28,780 --> 00:25:32,830
your open source software like type shed

00:25:30,520 --> 00:25:34,810
and black but I'm not here today to talk

00:25:32,830 --> 00:25:38,140
about dads I'm here today to talk about

00:25:34,810 --> 00:25:40,660
biology because I actually started out

00:25:38,140 --> 00:25:44,530
in college as a urologist then turned a

00:25:40,660 --> 00:25:46,660
few software engineer but I still like

00:25:44,530 --> 00:25:48,700
to think about biology sometimes because

00:25:46,660 --> 00:25:53,200
I spent all of college staring at fossil

00:25:48,700 --> 00:25:56,320
teeth like this one so what I do now is

00:25:53,200 --> 00:26:00,190
my day job is making this big database

00:25:56,320 --> 00:26:02,980
of animal names mostly mammals some

00:26:00,190 --> 00:26:05,230
other animals I try to like cover every

00:26:02,980 --> 00:26:08,890
single species like this every name has

00:26:05,230 --> 00:26:12,130
been published of mystic now more than

00:26:08,890 --> 00:26:15,460
80,000 in my database and I'm gathering

00:26:12,130 --> 00:26:16,510
data like who named each species where

00:26:15,460 --> 00:26:18,700
was it published

00:26:16,510 --> 00:26:22,780
where did each species come from

00:26:18,700 --> 00:26:25,210
originally and I'm making a lot of

00:26:22,780 --> 00:26:28,060
progress in getting closer to completion

00:26:25,210 --> 00:26:29,650
for like every single mammal know where

00:26:28,060 --> 00:26:31,900
it came from

00:26:29,650 --> 00:26:34,750
there's like 40,000 names given to

00:26:31,900 --> 00:26:37,720
living mammals and I go to 99% progress

00:26:34,750 --> 00:26:40,510
on the locality so far so what about

00:26:37,720 --> 00:26:42,730
doing this really the main reason is

00:26:40,510 --> 00:26:44,020
because this is what I like I enjoy

00:26:42,730 --> 00:26:46,420
working on this I like reading about

00:26:44,020 --> 00:26:49,090
animals but I think there's more it

00:26:46,420 --> 00:26:51,160
helps to documents the biodiversity of

00:26:49,090 --> 00:26:53,140
the world there's many species that are

00:26:51,160 --> 00:26:55,510
in danger of growing away that they

00:26:53,140 --> 00:26:57,760
don't understand well and getting all

00:26:55,510 --> 00:27:00,630
this data helps us figure out what is

00:26:57,760 --> 00:27:04,120
going on in the world and that's kind of

00:27:00,630 --> 00:27:07,000
how the first memos are now I diversity

00:27:04,120 --> 00:27:09,520
we're in the past and if I gather all

00:27:07,000 --> 00:27:11,650
this data this makes it easy for actual

00:27:09,520 --> 00:27:13,000
scientists to focus on their users

00:27:11,650 --> 00:27:16,030
actually working with animals

00:27:13,000 --> 00:27:19,539
if you look up literature and look up

00:27:16,030 --> 00:27:21,370
details of nomenclature at last it's

00:27:19,539 --> 00:27:22,690
just interesting as a piece of

00:27:21,370 --> 00:27:24,960
historical research I can answer

00:27:22,690 --> 00:27:28,090
questions like which historical memos

00:27:24,960 --> 00:27:30,070
researcher was the worst at making up

00:27:28,090 --> 00:27:31,179
names because all of their names are not

00:27:30,070 --> 00:27:34,150
on considered mallets

00:27:31,179 --> 00:27:38,620
it turns out if this guy the imported

00:27:34,150 --> 00:27:40,630
singer 19th century Austrian geologists

00:27:38,620 --> 00:27:42,309
he wrote described hundreds of new

00:27:40,630 --> 00:27:42,909
species I was not a thing or consider

00:27:42,309 --> 00:27:48,549
that I did

00:27:42,909 --> 00:27:51,429
Terra Paradis but I wanna do in the

00:27:48,549 --> 00:27:52,929
future is extended to the website

00:27:51,429 --> 00:27:54,970
because currently it's just databases I

00:27:52,929 --> 00:27:56,860
maintain but I want to make sure that

00:27:54,970 --> 00:28:01,120
all people also able to use this data

00:27:56,860 --> 00:28:03,159
and maybe contribute to it add more

00:28:01,120 --> 00:28:05,980
automation just to catch more issues

00:28:03,159 --> 00:28:08,350
like that piece of nomenclature better

00:28:05,980 --> 00:28:10,390
interactions between names that are easy

00:28:08,350 --> 00:28:13,750
to add because I have this nice battle

00:28:10,390 --> 00:28:17,980
map that's maintains my database and can

00:28:13,750 --> 00:28:20,470
find issues can report about things may

00:28:17,980 --> 00:28:24,120
also just cover more in the future like

00:28:20,470 --> 00:28:26,440
more kind of animals more kind of data

00:28:24,120 --> 00:28:29,169
if you wanna know more about this this

00:28:26,440 --> 00:28:32,350
how you can reach me I'll be at icon you

00:28:29,169 --> 00:28:38,940
can find me by email or on github thank

00:28:32,350 --> 00:28:40,950
you thank you yellow

00:28:38,940 --> 00:28:42,149
so this rotten watchmaker is getting to

00:28:40,950 --> 00:28:43,859
the end of his career and he decides

00:28:42,149 --> 00:28:45,179
that he's going to invite some of his

00:28:43,859 --> 00:28:46,649
friends around to look at his shop and

00:28:45,179 --> 00:28:48,659
decide what the most beautiful object

00:28:46,649 --> 00:28:49,919
he's ever made in his career is and his

00:28:48,659 --> 00:28:50,940
friends look around the shop and they

00:28:49,919 --> 00:28:52,859
look at all the things and eventually

00:28:50,940 --> 00:28:54,840
goes one goes oh I think I found it and

00:28:52,859 --> 00:28:56,549
he goes what come over here he says I

00:28:54,840 --> 00:28:58,200
think the most beautiful shop thing in

00:28:56,549 --> 00:28:59,789
the shop is this he goes what are you

00:28:58,200 --> 00:29:02,159
pointing on the bracelet the bracelet on

00:28:59,789 --> 00:29:04,440
this watch yes ah yes this is Gregor the

00:29:02,159 --> 00:29:06,239
bracelet it is very beautiful tell me

00:29:04,440 --> 00:29:07,950
why you think you like it and I saw well

00:29:06,239 --> 00:29:10,710
I like the way you've alternated silver

00:29:07,950 --> 00:29:12,179
and gold links I like you know that you

00:29:10,710 --> 00:29:13,259
they're finely carved and you know in

00:29:12,179 --> 00:29:14,369
the end if you haven't got a bracelet

00:29:13,259 --> 00:29:15,779
you have got a watch so that's why I

00:29:14,369 --> 00:29:18,239
think it's the most beautiful object and

00:29:15,779 --> 00:29:20,190
Russian watchmaker goes no it is not the

00:29:18,239 --> 00:29:21,509
most beautiful object and then the

00:29:20,190 --> 00:29:23,309
second one has another idea but we'll

00:29:21,509 --> 00:29:30,899
hear about died today after Jacobs talk

00:29:23,309 --> 00:29:32,759
please give him a big hand I feel like I

00:29:30,899 --> 00:29:35,070
should just go quickly so we can hear

00:29:32,759 --> 00:29:36,659
the end of that one but I'll start off

00:29:35,070 --> 00:29:38,129
with my favorite joke actually have you

00:29:36,659 --> 00:29:42,049
heard about the restaurant the moon it

00:29:38,129 --> 00:29:42,049
has great food but no atmosphere so

00:29:42,229 --> 00:29:47,789
anyway this is my first PyCon I come

00:29:46,349 --> 00:29:50,070
from the land down under

00:29:47,789 --> 00:29:52,049
not quite Perth the other the other side

00:29:50,070 --> 00:29:55,019
in Melbourne and to give you an idea of

00:29:52,049 --> 00:30:00,450
how far away that was my flight here

00:29:55,019 --> 00:30:04,950
left at 9:30 a.m. on Tuesday and arrived

00:30:00,450 --> 00:30:10,440
in LA at 6:40 a.m. on Tuesday after 14

00:30:04,950 --> 00:30:12,239
hours of flight yes so I'm a PhD student

00:30:10,440 --> 00:30:15,210
over in Melbourne I'm doing my

00:30:12,239 --> 00:30:16,950
astrophysics PhD and so I thought I'd

00:30:15,210 --> 00:30:18,840
come and talk about how astronomers use

00:30:16,950 --> 00:30:20,909
Python I will give a quick disclaimer

00:30:18,840 --> 00:30:23,190
this should actually be how some

00:30:20,909 --> 00:30:24,359
astronomers use Python a lot of my

00:30:23,190 --> 00:30:25,580
contemporaries and colleagues are

00:30:24,359 --> 00:30:27,929
actually doing a bunch of cool stuff

00:30:25,580 --> 00:30:29,669
involving machine learning looking at

00:30:27,929 --> 00:30:31,529
gravitational wave signals and things

00:30:29,669 --> 00:30:34,379
such as that self you interested please

00:30:31,529 --> 00:30:36,809
feel free to come and talk to me but I'm

00:30:34,379 --> 00:30:40,830
a simulator I simulate galaxy evolutions

00:30:36,809 --> 00:30:44,070
and so in astronomy we have data and

00:30:40,830 --> 00:30:46,649
unfortunately we have a crap ton of data

00:30:44,070 --> 00:30:48,839
so I did a quick LS of one of my

00:30:46,649 --> 00:30:50,070
directories one of my output models and

00:30:48,839 --> 00:30:53,010
as you can see

00:30:50,070 --> 00:30:55,440
the total is 118 gigabytes worth of data

00:30:53,010 --> 00:30:57,330
and so I'm running for this for five

00:30:55,440 --> 00:31:00,000
different models and I'm trying to

00:30:57,330 --> 00:31:02,460
collapse all of this into a single image

00:31:00,000 --> 00:31:06,780
that I can put into one of my papers and

00:31:02,460 --> 00:31:10,560
so this is how astronomers use Python we

00:31:06,780 --> 00:31:14,580
use numpy we use matplotlib we use Syfy

00:31:10,560 --> 00:31:16,350
that's really it I thought up the idea

00:31:14,580 --> 00:31:19,620
of this talk and then I realized that

00:31:16,350 --> 00:31:23,640
punchline isn't that intriguing but

00:31:19,620 --> 00:31:25,230
anyway on the more observational side we

00:31:23,640 --> 00:31:27,410
have this this is the Square Kilometre

00:31:25,230 --> 00:31:29,910
Array out in the desert of Australia

00:31:27,410 --> 00:31:32,130
Australia is great for radio telescopes

00:31:29,910 --> 00:31:34,710
because you need a whole lot of know

00:31:32,130 --> 00:31:39,090
radio interference and Australia has a

00:31:34,710 --> 00:31:42,030
whole lot of nothing and so when the SK

00:31:39,090 --> 00:31:44,400
is operational it we expect that 10

00:31:42,030 --> 00:31:47,190
petabytes worth of data will be coming

00:31:44,400 --> 00:31:50,310
in every single day and so we need to

00:31:47,190 --> 00:31:52,650
use data analysis tools such as Python

00:31:50,310 --> 00:31:54,960
to crunch through all of that data and

00:31:52,650 --> 00:31:58,440
produce beautiful things that we can put

00:31:54,960 --> 00:32:00,750
in our papers so for example this movie

00:31:58,440 --> 00:32:02,850
here that I've made use data that would

00:32:00,750 --> 00:32:05,130
have come from this sko telescope 10

00:32:02,850 --> 00:32:08,340
petabytes worth of data it used things

00:32:05,130 --> 00:32:11,730
such as numpy scipy matplotlib to

00:32:08,340 --> 00:32:14,310
produce this image so if you've ever

00:32:11,730 --> 00:32:18,120
wondered how do astronomers use Python

00:32:14,310 --> 00:32:21,180
the answer is pretty boring numpy sci-fi

00:32:18,120 --> 00:32:23,540
Astro Prior and map slot lib thank you

00:32:21,180 --> 00:32:23,540
very much

00:32:28,020 --> 00:32:33,270
so that the second friend goes I know

00:32:30,990 --> 00:32:34,770
why I know why it's not Gregor the

00:32:33,270 --> 00:32:36,150
bracelet because I think the most

00:32:34,770 --> 00:32:38,100
beautiful object on the shop is over

00:32:36,150 --> 00:32:39,510
here so I watch them watch maker goes

00:32:38,100 --> 00:32:41,130
and goes okay well what have you found

00:32:39,510 --> 00:32:42,420
you guys I think it's the dial on this

00:32:41,130 --> 00:32:45,929
watch I think it's beautiful and he goes

00:32:42,420 --> 00:32:47,400
I yes it is Vania the dial I think is

00:32:45,929 --> 00:32:49,920
beautiful as well tell me why you think

00:32:47,400 --> 00:32:51,809
you liked it I think as well I just like

00:32:49,920 --> 00:32:53,820
the way you've got little diamonds

00:32:51,809 --> 00:32:55,500
encrusted each of the cardinal points I

00:32:53,820 --> 00:32:57,330
like the way you've used Roman numerals

00:32:55,500 --> 00:32:58,530
that's really classic and in the end if

00:32:57,330 --> 00:32:59,910
you don't have the dial you can't tell a

00:32:58,530 --> 00:33:01,679
time so that's why it's the most

00:32:59,910 --> 00:33:03,720
beautiful object and the Russian

00:33:01,679 --> 00:33:05,580
watchmaker goes no no it is not most

00:33:03,720 --> 00:33:07,350
beautiful object because he has his own

00:33:05,580 --> 00:33:11,030
idea which we'll find out about after

00:33:07,350 --> 00:33:11,030
Jesse's talk please get Jesse a big hat

00:33:12,410 --> 00:33:22,260
hi Jesus the for the first time come to

00:33:15,300 --> 00:33:24,270
Pyke on us I'm Jesse I'm a software

00:33:22,260 --> 00:33:27,150
engineer at crash ship which is an ed

00:33:24,270 --> 00:33:29,970
tech company based in Tokyo I'm mostly

00:33:27,150 --> 00:33:32,340
working in did it both the design and

00:33:29,970 --> 00:33:34,559
engineering so in the last year I've

00:33:32,340 --> 00:33:37,530
been developing refactoring a research

00:33:34,559 --> 00:33:40,410
research oriented code and the face with

00:33:37,530 --> 00:33:41,970
some struggles so based on my experience

00:33:40,410 --> 00:33:44,250
I'm gonna try to identify the

00:33:41,970 --> 00:33:47,280
differences between research oriented

00:33:44,250 --> 00:33:49,260
code and production code so why am I

00:33:47,280 --> 00:33:50,910
gonna talk about this topic is the

00:33:49,260 --> 00:33:52,140
recently Python engineers are more

00:33:50,910 --> 00:33:54,450
opportunities to work with the

00:33:52,140 --> 00:33:57,059
scientists or researchers than before

00:33:54,450 --> 00:34:00,590
so understanding each other can help

00:33:57,059 --> 00:34:02,760
make AI ml projects work more smoothly

00:34:00,590 --> 00:34:04,620
so there are three differences between

00:34:02,760 --> 00:34:06,600
research oriented code and production

00:34:04,620 --> 00:34:09,000
code first different scopes of data

00:34:06,600 --> 00:34:10,770
scientists and engineers and second

00:34:09,000 --> 00:34:15,210
different characteristic to each and

00:34:10,770 --> 00:34:17,419
different objects of age so now the

00:34:15,210 --> 00:34:20,730
definition of research oriented code

00:34:17,419 --> 00:34:22,830
researcher rigid code in a ml project is

00:34:20,730 --> 00:34:25,200
a code with many by data scientists or

00:34:22,830 --> 00:34:26,820
researchers and for figuring out the

00:34:25,200 --> 00:34:29,399
most efficient suitable machine learning

00:34:26,820 --> 00:34:31,619
model so this is the image of how

00:34:29,399 --> 00:34:34,980
research oriented code can be developed

00:34:31,619 --> 00:34:36,840
so research oriented code is the group

00:34:34,980 --> 00:34:39,020
through an iterative process and

00:34:36,840 --> 00:34:41,990
integrate it into production code

00:34:39,020 --> 00:34:44,840
so dick code is basing on our scripts

00:34:41,990 --> 00:34:46,850
and our prototype so data scientists or

00:34:44,840 --> 00:34:49,310
researchers have responsibilities to

00:34:46,850 --> 00:34:50,810
write research or teach code now on the

00:34:49,310 --> 00:34:52,730
other hand engineers have

00:34:50,810 --> 00:34:56,270
responsibilities to write production

00:34:52,730 --> 00:35:00,080
code the whole part of the code in

00:34:56,270 --> 00:35:02,060
production level so let's look at

00:35:00,080 --> 00:35:04,550
example machine learning API is a

00:35:02,060 --> 00:35:06,440
composed of three elements the product

00:35:04,550 --> 00:35:08,690
in this case production code includes

00:35:06,440 --> 00:35:11,119
preparation code pre-processing code

00:35:08,690 --> 00:35:12,740
machine learning model on the other hand

00:35:11,119 --> 00:35:14,360
to research or edit code includes

00:35:12,740 --> 00:35:17,060
pre-processing code and machine learning

00:35:14,360 --> 00:35:18,320
model so this is the example data

00:35:17,060 --> 00:35:20,000
pre-processing code written by

00:35:18,320 --> 00:35:22,670
researchers of data scientist

00:35:20,000 --> 00:35:25,220
this code to use the empty list for

00:35:22,670 --> 00:35:28,160
rupan defend ourselves and it seems to

00:35:25,220 --> 00:35:30,050
be long but this code can make it

00:35:28,160 --> 00:35:31,700
possible for everyone to visually trace

00:35:30,050 --> 00:35:35,660
a call from the top to the bottom and

00:35:31,700 --> 00:35:37,340
easily quickly righted so this is

00:35:35,660 --> 00:35:39,500
example machine learning model written

00:35:37,340 --> 00:35:43,010
by researchers the data scientist so

00:35:39,500 --> 00:35:45,680
there one simple variation fraction of

00:35:43,010 --> 00:35:48,470
the top and this code is data frame in

00:35:45,680 --> 00:35:50,570
total pan so this code can allows

00:35:48,470 --> 00:35:52,880
researchers of data scientist to easily

00:35:50,570 --> 00:35:56,510
handle in potata with theta prime and

00:35:52,880 --> 00:35:57,890
choice up to theta so what a Python

00:35:56,510 --> 00:36:02,420
engineer supposed to do for research

00:35:57,890 --> 00:36:05,780
oriented code it's a refactoring in

00:36:02,420 --> 00:36:08,990
passive way so this code seems to be

00:36:05,780 --> 00:36:10,580
shorter than previous code and on the

00:36:08,990 --> 00:36:13,340
bottom there are simple calculation

00:36:10,580 --> 00:36:15,680
function and this list computation is

00:36:13,340 --> 00:36:17,690
that comprehension actually this code

00:36:15,680 --> 00:36:20,450
can view the model in the much faster in

00:36:17,690 --> 00:36:22,460
the simpler way so let's wrap up

00:36:20,450 --> 00:36:23,030
different scopes of data scientists

00:36:22,460 --> 00:36:25,520
engineers

00:36:23,030 --> 00:36:27,020
data scientists have responsibilities to

00:36:25,520 --> 00:36:29,510
write proposals called machine learning

00:36:27,020 --> 00:36:31,490
code on the other hand engineers have

00:36:29,510 --> 00:36:33,560
responsibilities to the whole part of

00:36:31,490 --> 00:36:35,930
the code in production code production

00:36:33,560 --> 00:36:37,430
level so second

00:36:35,930 --> 00:36:40,040
different characteristics for coding

00:36:37,430 --> 00:36:43,130
side the research oriented code seems to

00:36:40,040 --> 00:36:45,590
be easy handle and visually transport on

00:36:43,130 --> 00:36:47,540
the other hand production code have can

00:36:45,590 --> 00:36:50,030
have high education speed high

00:36:47,540 --> 00:36:50,740
readability and it can be testable and

00:36:50,030 --> 00:36:54,680
modular

00:36:50,740 --> 00:36:57,260
in the last defend objective reporting

00:36:54,680 --> 00:36:59,000
sigh so research researchers or data

00:36:57,260 --> 00:37:00,440
scientist focus on finding the most

00:36:59,000 --> 00:37:02,870
efficient suitable machine learning

00:37:00,440 --> 00:37:04,520
model on the other hand engineers make

00:37:02,870 --> 00:37:07,460
the core work on the server correctly

00:37:04,520 --> 00:37:09,920
and quickly so this is what I research

00:37:07,460 --> 00:37:12,140
oriented code seems the lot seems to be

00:37:09,920 --> 00:37:14,830
necessary to be concerned about heritage

00:37:12,140 --> 00:37:17,330
speed and readability because the

00:37:14,830 --> 00:37:19,370
priority is in finding out the most

00:37:17,330 --> 00:37:25,540
efficient suitable machine learning

00:37:19,370 --> 00:37:25,540
model so that's all thank you so much

00:37:29,420 --> 00:37:34,760
Thank You Jessie so the two friends go

00:37:33,440 --> 00:37:36,080
well come on all right if it's not if

00:37:34,760 --> 00:37:37,460
it's not Gregor the bracelet and it's

00:37:36,080 --> 00:37:39,080
not valuing the dial what is it and so

00:37:37,460 --> 00:37:40,970
the Russian watchmaker goes come with me

00:37:39,080 --> 00:37:43,100
and he takes him to the back of the shop

00:37:40,970 --> 00:37:45,140
and in a dusty little party finds this

00:37:43,100 --> 00:37:47,150
old watch and he points it in he goes

00:37:45,140 --> 00:37:49,820
look here this is a nondescript watch

00:37:47,150 --> 00:37:52,220
and they go what look the second hand

00:37:49,820 --> 00:37:54,470
the second hand on this watch is the

00:37:52,220 --> 00:37:56,210
first second hand I ever made in the

00:37:54,470 --> 00:37:59,390
first-ever watch I call him

00:37:56,210 --> 00:38:01,970
Olaf and you see Olaf is counting along

00:37:59,390 --> 00:38:03,290
the time and that is the true essence of

00:38:01,970 --> 00:38:05,330
a watch and that's why I think it's the

00:38:03,290 --> 00:38:08,030
most beautiful object in the shop and

00:38:05,330 --> 00:38:09,650
his two friends go now and so they get

00:38:08,030 --> 00:38:10,910
into a huge argument about it I think

00:38:09,650 --> 00:38:12,560
it's you know Oh laughs I think it's

00:38:10,910 --> 00:38:13,880
Gregor I think it's Vanya and so they're

00:38:12,560 --> 00:38:16,430
gonna need an impartial third party

00:38:13,880 --> 00:38:18,020
referee to help them decide it and I'll

00:38:16,430 --> 00:38:19,970
tell you who the third party referee is

00:38:18,020 --> 00:38:27,950
after Rebekah's talk please give Rebecca

00:38:19,970 --> 00:38:30,560
a huge hand hello everyone my name is

00:38:27,950 --> 00:38:33,110
Rebecca I work at Google on a tool

00:38:30,560 --> 00:38:35,510
called high-type which analyzes Python

00:38:33,110 --> 00:38:37,460
code for type errors now PI type is

00:38:35,510 --> 00:38:40,310
publicly available and it's hugely

00:38:37,460 --> 00:38:42,260
popular inside Google but outside Google

00:38:40,310 --> 00:38:46,550
people always have one particular

00:38:42,260 --> 00:38:49,520
question about it there exists a popular

00:38:46,550 --> 00:38:51,110
Python type checker called my PI so the

00:38:49,520 --> 00:38:53,600
question is how is pi type different

00:38:51,110 --> 00:38:55,340
from my PI I'm going to explain the two

00:38:53,600 --> 00:38:58,280
main differences and then show a code

00:38:55,340 --> 00:39:00,440
example for each so let's start by

00:38:58,280 --> 00:39:03,110
talking about my PI my part has a

00:39:00,440 --> 00:39:05,450
philosophy of gradual typing which means

00:39:03,110 --> 00:39:08,030
that you object code piecemeal into type

00:39:05,450 --> 00:39:10,820
checking by adding type annotations my

00:39:08,030 --> 00:39:13,040
PI is also a very strict type checker it

00:39:10,820 --> 00:39:15,830
does not allow operations that change

00:39:13,040 --> 00:39:18,440
the types of objects on the other hand

00:39:15,830 --> 00:39:20,840
pi type analyzes all of your code

00:39:18,440 --> 00:39:23,540
whether it has type annotations or not

00:39:20,840 --> 00:39:25,850
and it uses type inference to figure out

00:39:23,540 --> 00:39:28,220
the types and on annotated parts it's

00:39:25,850 --> 00:39:30,170
also more lenient it will allow any

00:39:28,220 --> 00:39:32,380
operations that would be allowed an

00:39:30,170 --> 00:39:34,970
untyped code as long as you're not

00:39:32,380 --> 00:39:37,670
contradicting explicit type annotations

00:39:34,970 --> 00:39:40,460
to make this more concrete let's look at

00:39:37,670 --> 00:39:42,950
a couple examples first

00:39:40,460 --> 00:39:45,530
and here we have a function f that turns

00:39:42,950 --> 00:39:48,410
a string in a function G that takes that

00:39:45,530 --> 00:39:51,350
string and adds it to an integer which

00:39:48,410 --> 00:39:55,310
is wrong doesn't work let's try to catch

00:39:51,350 --> 00:39:58,760
this bug with type checkers first with

00:39:55,310 --> 00:40:01,400
my PI we are adding type annotations to

00:39:58,760 --> 00:40:03,770
our code to opt in to type checking we

00:40:01,400 --> 00:40:06,560
annotate G so that's body is type

00:40:03,770 --> 00:40:09,350
checked and then we annotate F so that

00:40:06,560 --> 00:40:11,840
my PI knows the type returned by F in

00:40:09,350 --> 00:40:13,310
the body of G and then my PI will say

00:40:11,840 --> 00:40:17,240
hey you're adding a string and an

00:40:13,310 --> 00:40:20,570
integer this is a bad idea on the other

00:40:17,240 --> 00:40:23,060
hand when we use PI type PI type will

00:40:20,570 --> 00:40:25,820
analyze this code even if it has no type

00:40:23,060 --> 00:40:29,780
annotations what it will do is it will

00:40:25,820 --> 00:40:32,420
go into G see that G calls s and then

00:40:29,780 --> 00:40:34,880
analyze F to infer that it returns a

00:40:32,420 --> 00:40:39,310
string and finally it says hey you're

00:40:34,880 --> 00:40:41,510
adding a string and an integer bad idea

00:40:39,310 --> 00:40:43,970
now let's look at an example of

00:40:41,510 --> 00:40:46,340
strictness here with a function get list

00:40:43,970 --> 00:40:49,070
that declares it returns a list of

00:40:46,340 --> 00:40:50,690
strings but in the body it creates a

00:40:49,070 --> 00:40:53,750
list of a string and then adds an

00:40:50,690 --> 00:40:55,550
integer to the list and returns that an

00:40:53,750 --> 00:40:58,370
integer is not a string so there's

00:40:55,550 --> 00:41:02,660
clearly a bug here but on which line of

00:40:58,370 --> 00:41:05,180
code now if we use my PI to analyze this

00:41:02,660 --> 00:41:07,790
it will say that the error is on the

00:41:05,180 --> 00:41:10,100
second to last slide because remember my

00:41:07,790 --> 00:41:12,920
PI is very strict it says you've created

00:41:10,100 --> 00:41:15,890
a list of strings if you add an integer

00:41:12,920 --> 00:41:20,300
you violate the type of that list which

00:41:15,890 --> 00:41:22,610
is not allowed but if we use PI type PI

00:41:20,300 --> 00:41:25,010
type doesn't report an error until the

00:41:22,610 --> 00:41:27,230
very last line this is because PI type

00:41:25,010 --> 00:41:29,810
says at one time you can put anything

00:41:27,230 --> 00:41:31,970
you want into a list so you've created a

00:41:29,810 --> 00:41:34,310
list of strings you've added an integer

00:41:31,970 --> 00:41:36,110
and that's okay that just mutates the

00:41:34,310 --> 00:41:36,980
type to be a list of strings and

00:41:36,110 --> 00:41:39,980
integers

00:41:36,980 --> 00:41:42,590
however this now no longer matches your

00:41:39,980 --> 00:41:44,650
declared return type so then that very

00:41:42,590 --> 00:41:47,750
last line is an error

00:41:44,650 --> 00:41:49,280
so to recap I've talked about two type

00:41:47,750 --> 00:41:50,530
checkers with very different

00:41:49,280 --> 00:41:53,230
philosophies

00:41:50,530 --> 00:41:55,510
my pied is very strict type-checking of

00:41:53,230 --> 00:41:58,150
code that explicitly opts into that

00:41:55,510 --> 00:42:00,790
checking by adding type annotations and

00:41:58,150 --> 00:42:03,430
PI type does more lenient checking of

00:42:00,790 --> 00:42:11,800
all of your code by using type inference

00:42:03,430 --> 00:42:14,260
thank you thank you so they need an

00:42:11,800 --> 00:42:16,750
impartial referee so they get Tina

00:42:14,260 --> 00:42:17,980
Turner and Tina Turner comes to the shop

00:42:16,750 --> 00:42:19,270
and she says what's going on here says

00:42:17,980 --> 00:42:21,580
well they were arguing about which is

00:42:19,270 --> 00:42:23,950
the nicest watch well part of a watch

00:42:21,580 --> 00:42:25,690
and the first one says oh I think it's

00:42:23,950 --> 00:42:27,580
Greg or the bracelet and the second one

00:42:25,690 --> 00:42:29,080
says I think it's very the dial and then

00:42:27,580 --> 00:42:30,430
the actual watchmaker says oh I think

00:42:29,080 --> 00:42:34,390
it's Oh laughs and Tina Turner goes Oh

00:42:30,430 --> 00:42:37,960
laughs what so laughs got to do got to

00:42:34,390 --> 00:42:41,340
do with it what so laughter the second

00:42:37,960 --> 00:42:41,340
hand in motion

00:42:45,930 --> 00:42:51,130
thank you I'm here all weekend

00:42:48,160 --> 00:42:55,599
please give Catherine a huge hand

00:42:51,130 --> 00:42:58,089
[Applause]

00:42:55,599 --> 00:42:59,799
all right hello PyCon this is doc

00:42:58,089 --> 00:43:01,119
assemble it's not my baby but you've

00:42:59,799 --> 00:43:04,359
never heard of it and you should that's

00:43:01,119 --> 00:43:06,309
why I am here so I am NOT a full-stack

00:43:04,359 --> 00:43:07,449
developer even when wisdom comes out I

00:43:06,309 --> 00:43:09,130
still won't because I can't do a

00:43:07,449 --> 00:43:10,539
stylesheet to save my life maybe I

00:43:09,130 --> 00:43:12,579
should learn anvil but in the meantime

00:43:10,539 --> 00:43:14,380
what I want to be able to do is just

00:43:12,579 --> 00:43:16,599
throw up a form here to collect some

00:43:14,380 --> 00:43:18,609
information from a user and I want to be

00:43:16,599 --> 00:43:22,029
able to define it really easily so that

00:43:18,609 --> 00:43:23,650
for example I could say we're making an

00:43:22,029 --> 00:43:26,589
application to collect data for

00:43:23,650 --> 00:43:28,180
potential rideshare partners to PI Ohio

00:43:26,589 --> 00:43:31,089
where you're going to come in July right

00:43:28,180 --> 00:43:32,829
so what if you could define your

00:43:31,089 --> 00:43:40,809
questionnaire pretty simply like this

00:43:32,829 --> 00:43:42,940
and yeah what if it was that easy let's

00:43:40,809 --> 00:43:44,680
take the zeppelin why not

00:43:42,940 --> 00:43:46,930
the zeppelin can fit a lot of people

00:43:44,680 --> 00:43:48,699
that's pretty cool all right so what

00:43:46,930 --> 00:43:52,299
this has done is it has gathered a bunch

00:43:48,699 --> 00:43:55,479
of data and using a platform called doc

00:43:52,299 --> 00:43:58,900
assemble which is a high level platform

00:43:55,479 --> 00:44:01,209
that is used to for two purposes it

00:43:58,900 --> 00:44:03,579
collects data and then it assembles it

00:44:01,209 --> 00:44:08,440
into a document not into documentation

00:44:03,579 --> 00:44:12,009
but into a it it's its design purpose is

00:44:08,440 --> 00:44:14,279
to put that data into maybe a PDF maybe

00:44:12,009 --> 00:44:16,390
a Microsoft Word document something a

00:44:14,279 --> 00:44:18,309
legal document something with

00:44:16,390 --> 00:44:21,489
boilerplate paperwork it will get shoved

00:44:18,309 --> 00:44:23,650
into a big metal filing cabinet and that

00:44:21,489 --> 00:44:26,170
is why it is called doc assemble however

00:44:23,650 --> 00:44:28,900
that's not the only thing it does you

00:44:26,170 --> 00:44:30,489
know before you put this information in

00:44:28,900 --> 00:44:32,709
there you need to collect it from the

00:44:30,489 --> 00:44:34,930
user and that's the part that I think is

00:44:32,709 --> 00:44:36,489
the most interesting because going

00:44:34,930 --> 00:44:37,479
through an interview as this doc

00:44:36,489 --> 00:44:39,640
assemble calls it with the user

00:44:37,479 --> 00:44:41,109
collecting data that is not a rare or

00:44:39,640 --> 00:44:43,420
specialty problem that's a really common

00:44:41,109 --> 00:44:45,219
problem so doc assemble has this name

00:44:43,420 --> 00:44:47,680
implying that it's a very specialized

00:44:45,219 --> 00:44:49,269
tool but the truth is it also does

00:44:47,680 --> 00:44:50,890
something that is not so specialized I

00:44:49,269 --> 00:44:52,119
wouldn't have called it doc assemble if

00:44:50,890 --> 00:44:56,949
I'd written it I would have called it

00:44:52,119 --> 00:44:58,599
Spanish Inquisition but oh well so if

00:44:56,949 --> 00:45:00,309
you looked at this interview you will

00:44:58,599 --> 00:45:02,739
notice that it was Hamel which was

00:45:00,309 --> 00:45:06,609
pretty cool it was it was this very

00:45:02,739 --> 00:45:08,380
specialized DSL which just kind of

00:45:06,609 --> 00:45:09,620
describes the questions want to ask I

00:45:08,380 --> 00:45:12,980
don't know if you know

00:45:09,620 --> 00:45:17,090
there's no control flow in here so if I

00:45:12,980 --> 00:45:20,570
back up and I changed my mind

00:45:17,090 --> 00:45:21,920
and I say you know we're having a

00:45:20,570 --> 00:45:24,740
problem with the hydrogen in the

00:45:21,920 --> 00:45:26,690
Zeppelin and we don't have any vehicles

00:45:24,740 --> 00:45:28,670
at all so can't provide a vehicle so it

00:45:26,690 --> 00:45:29,840
just cuts straight to thank you you know

00:45:28,670 --> 00:45:32,420
we'll see if we can find your right your

00:45:29,840 --> 00:45:33,800
partner where's the code that said okay

00:45:32,420 --> 00:45:35,900
now we don't have to ask for the type of

00:45:33,800 --> 00:45:38,240
vehicle it is actually not in here

00:45:35,900 --> 00:45:41,210
because doc assemble works backward from

00:45:38,240 --> 00:45:42,980
the end it looked at my final slide saw

00:45:41,210 --> 00:45:44,870
that I didn't or at my final question

00:45:42,980 --> 00:45:46,700
saw that I didn't need any vehicle

00:45:44,870 --> 00:45:48,470
details and so it skipped those over

00:45:46,700 --> 00:45:51,080
it's an interesting way to structure an

00:45:48,470 --> 00:45:52,850
application you can specify control flow

00:45:51,080 --> 00:45:56,720
if you really want to but generally you

00:45:52,850 --> 00:46:02,510
don't want to and you don't need to let

00:45:56,720 --> 00:46:05,000
me see if I can so the screen has me

00:46:02,510 --> 00:46:06,800
confused so it's in Python it's

00:46:05,000 --> 00:46:08,450
extensible in Python you can include

00:46:06,800 --> 00:46:10,940
chunks of Python in it that's all really

00:46:08,450 --> 00:46:13,340
cool the documentation is absolutely

00:46:10,940 --> 00:46:16,070
amazing including every time they show

00:46:13,340 --> 00:46:19,250
you a piece of syntax they link to a

00:46:16,070 --> 00:46:24,800
live demonstration online so we could

00:46:19,250 --> 00:46:26,390
actually do to do mmm I think the

00:46:24,800 --> 00:46:28,750
touchscreen isn't isn't hooked up with

00:46:26,390 --> 00:46:31,340
the dual screens but in any case amazing

00:46:28,750 --> 00:46:33,890
documentation tons of batteries included

00:46:31,340 --> 00:46:36,590
to easily do all sorts of tasks mostly

00:46:33,890 --> 00:46:38,510
centered around if you're gathering

00:46:36,590 --> 00:46:40,490
information to produce legal documents

00:46:38,510 --> 00:46:42,170
the community this came out of but a lot

00:46:40,490 --> 00:46:46,280
of really interesting stuff

00:46:42,170 --> 00:46:48,650
the batteries are welded in if you don't

00:46:46,280 --> 00:46:50,120
want to generate PDF stuff the libraries

00:46:48,650 --> 00:46:51,950
are there that is something that I would

00:46:50,120 --> 00:46:54,500
love somebody to wait in there and make

00:46:51,950 --> 00:46:55,700
it removable the workflow is kind of

00:46:54,500 --> 00:46:58,100
designed around people who aren't

00:46:55,700 --> 00:46:59,870
professional coders as described you can

00:46:58,100 --> 00:47:02,180
figure out how to hook it into your IDE

00:46:59,870 --> 00:47:03,440
but that's not the way the documentation

00:47:02,180 --> 00:47:05,360
points you so that's kind of an issue

00:47:03,440 --> 00:47:07,040
and then the big problem with it is just

00:47:05,360 --> 00:47:09,050
that it's kind of unknown among you

00:47:07,040 --> 00:47:11,300
folks so even though doc assemble has

00:47:09,050 --> 00:47:13,790
its own community its own slack channel

00:47:11,300 --> 00:47:14,990
its own people answering questions there

00:47:13,790 --> 00:47:17,240
hasn't been a lot of contact with the

00:47:14,990 --> 00:47:18,590
Greater pike Python and Python community

00:47:17,240 --> 00:47:20,540
I hope that'll change they're actually

00:47:18,590 --> 00:47:23,150
running their own conference

00:47:20,540 --> 00:47:34,280
these talks are online in my github give

00:47:23,150 --> 00:47:36,140
it a try I hope you like it thank you

00:47:34,280 --> 00:47:42,800
everyone our next speaker is Anthony

00:47:36,140 --> 00:47:45,320
please give a huge hand hello my name is

00:47:42,800 --> 00:47:47,420
Anthony lupine Eddie and I founded and

00:47:45,320 --> 00:47:50,090
run a nonprofit called open-source kids

00:47:47,420 --> 00:47:53,030
and our mission is to teach the children

00:47:50,090 --> 00:47:54,430
of New Mexico computer science and by

00:47:53,030 --> 00:47:56,330
children I mean specifically

00:47:54,430 --> 00:47:58,280
kindergarteners through fifth grade

00:47:56,330 --> 00:48:00,590
students five year old to eleven year

00:47:58,280 --> 00:48:02,390
old students and today I'm going to tell

00:48:00,590 --> 00:48:04,910
you about something that I use in my

00:48:02,390 --> 00:48:07,490
teaching when I teach 4th and 5th

00:48:04,910 --> 00:48:10,160
graders Python I use something called

00:48:07,490 --> 00:48:12,440
snappy code that I created so snappy

00:48:10,160 --> 00:48:15,320
code is a blockly implementation of

00:48:12,440 --> 00:48:17,270
Python 3.7 and it's designed

00:48:15,320 --> 00:48:19,970
specifically to help young students

00:48:17,270 --> 00:48:23,150
learn Python and so far we've used it in

00:48:19,970 --> 00:48:27,530
about three schools with 1,200 students

00:48:23,150 --> 00:48:29,900
since 2015 and what can you do with

00:48:27,530 --> 00:48:32,480
snappy code what can kids do well they

00:48:29,900 --> 00:48:33,740
can create programs with blocks most of

00:48:32,480 --> 00:48:36,370
the students that I'm talking about

00:48:33,740 --> 00:48:39,890
can't type a large quantities of code

00:48:36,370 --> 00:48:42,050
correctly without some difficulty so we

00:48:39,890 --> 00:48:45,650
use block based code we can focus on

00:48:42,050 --> 00:48:47,480
concepts not syntax and they can see

00:48:45,650 --> 00:48:49,730
immediate results right there in their

00:48:47,480 --> 00:48:51,920
screen they can learn from examples they

00:48:49,730 --> 00:48:54,950
can debug problems they can make art

00:48:51,920 --> 00:48:57,650
they we augment their stem learning by

00:48:54,950 --> 00:49:00,020
working on geometry things like angles

00:48:57,650 --> 00:49:01,760
and number of sides and shapes that sort

00:49:00,020 --> 00:49:03,170
of thing and we can control hardware

00:49:01,760 --> 00:49:05,630
which we do in fifth grade

00:49:03,170 --> 00:49:07,880
things like micro bits and the circuit

00:49:05,630 --> 00:49:10,280
playground express that everybody got in

00:49:07,880 --> 00:49:13,220
their swag bags so what's included in

00:49:10,280 --> 00:49:15,590
snappy code here's a short list of

00:49:13,220 --> 00:49:18,500
what's included lots of different things

00:49:15,590 --> 00:49:21,380
from Python all of the basics and a

00:49:18,500 --> 00:49:22,640
number of libraries to boot so I thought

00:49:21,380 --> 00:49:25,250
I would show you a little bit about what

00:49:22,640 --> 00:49:30,470
we do this is a screenshot of one

00:49:25,250 --> 00:49:32,150
program but let's go to this

00:49:30,470 --> 00:49:34,250
and after we learned the basics of how

00:49:32,150 --> 00:49:36,410
to use snappy code we learned that there

00:49:34,250 --> 00:49:40,190
are toolboxes that we can choose we can

00:49:36,410 --> 00:49:42,200
save blocks we can run examples we then

00:49:40,190 --> 00:49:43,280
would move on to something a little bit

00:49:42,200 --> 00:49:44,930
more complicated where we're building

00:49:43,280 --> 00:49:46,940
bigger programs and we're learning

00:49:44,930 --> 00:49:49,280
something about how Python works in this

00:49:46,940 --> 00:49:50,270
example they're learning about print

00:49:49,280 --> 00:49:53,720
they're learning a little bit about

00:49:50,270 --> 00:49:56,720
numbers and what the operators in Python

00:49:53,720 --> 00:49:59,240
look like and the users would click run

00:49:56,720 --> 00:50:01,340
and in the terminal on the side of the

00:49:59,240 --> 00:50:03,310
screen you would see the printout just

00:50:01,340 --> 00:50:05,869
as if you were to type this and run it

00:50:03,310 --> 00:50:07,460
and then on the side they see a printout

00:50:05,869 --> 00:50:09,920
of the Python code we can save that

00:50:07,460 --> 00:50:14,480
python code and run it however we like

00:50:09,920 --> 00:50:17,480
in the future if we move on from basic

00:50:14,480 --> 00:50:19,670
concepts like how to use the the tools

00:50:17,480 --> 00:50:21,619
and what a print is we move on to

00:50:19,670 --> 00:50:24,190
something like turtle graphics where we

00:50:21,619 --> 00:50:27,530
can explore concepts in a graphical way

00:50:24,190 --> 00:50:29,510
so this program is designed to make a

00:50:27,530 --> 00:50:32,390
shape so we would write this program

00:50:29,510 --> 00:50:34,820
together this would be fourth graders we

00:50:32,390 --> 00:50:36,680
would run it and it would open up a

00:50:34,820 --> 00:50:39,320
screen showing our turtle graphics

00:50:36,680 --> 00:50:41,240
window we see a triangle and we might

00:50:39,320 --> 00:50:43,940
proceed from something like this to

00:50:41,240 --> 00:50:46,130
working on loops we might grab a for

00:50:43,940 --> 00:50:48,230
loop talk about patterns and while we

00:50:46,130 --> 00:50:50,570
were talking about patterns we would

00:50:48,230 --> 00:50:53,270
talk about looping we would learn how to

00:50:50,570 --> 00:50:56,330
use our loop structure in snappy code

00:50:53,270 --> 00:50:59,359
and Python we would identify patterns

00:50:56,330 --> 00:51:01,700
put them in our loops and run our code

00:50:59,359 --> 00:51:04,099
and we would see that we can make the

00:51:01,700 --> 00:51:08,000
same shape much more simply and if we

00:51:04,099 --> 00:51:10,490
wanted to we could then explore by

00:51:08,000 --> 00:51:13,160
changing numbers looking at the

00:51:10,490 --> 00:51:14,420
relationship between sides and angles so

00:51:13,160 --> 00:51:15,830
that's a very powerful way for them to

00:51:14,420 --> 00:51:19,369
reinforce the geometry that they're

00:51:15,830 --> 00:51:21,950
already learning after that we may move

00:51:19,369 --> 00:51:25,089
on to more complicated ideas in fifth

00:51:21,950 --> 00:51:27,310
grade we incorporate hardware I have a

00:51:25,089 --> 00:51:31,220
circuit playground express here it's

00:51:27,310 --> 00:51:34,070
flashing some Morse code SOS so if

00:51:31,220 --> 00:51:35,960
anyone wants to SOS me that would be

00:51:34,070 --> 00:51:39,109
great but what we're going to do with

00:51:35,960 --> 00:51:45,030
this is see how we might use this to

00:51:39,109 --> 00:51:47,700
to run something like a rainbow and this

00:51:45,030 --> 00:51:49,980
is taken off the adafruit tutorial

00:51:47,700 --> 00:51:53,160
examples and what we would do with this

00:51:49,980 --> 00:51:55,980
one is not run it but rather save it we

00:51:53,160 --> 00:52:02,339
would find our circuit playground right

00:51:55,980 --> 00:52:04,440
here we would save it as code pi and you

00:52:02,339 --> 00:52:07,050
would push the code and in a second

00:52:04,440 --> 00:52:09,930
would start producing our rainbow effect

00:52:07,050 --> 00:52:11,250
and then we could move on to change this

00:52:09,930 --> 00:52:12,750
in many different ways you can see here

00:52:11,250 --> 00:52:15,450
we're using more sophisticated concepts

00:52:12,750 --> 00:52:18,030
like functions so if you're interested

00:52:15,450 --> 00:52:21,720
in learning more about this you can go

00:52:18,030 --> 00:52:23,730
to snappy code org there will be a

00:52:21,720 --> 00:52:26,310
version of this posted online or you can

00:52:23,730 --> 00:52:28,530
go to github and download an installable

00:52:26,310 --> 00:52:31,260
version for mac and in the near future

00:52:28,530 --> 00:52:35,190
Linux and raspberry pi or follow us on

00:52:31,260 --> 00:52:37,859
at snappy code and I'm also hosting a an

00:52:35,190 --> 00:52:39,030
open space tomorrow 10:30 to noon if

00:52:37,859 --> 00:52:41,369
you'd like to learn more about it or

00:52:39,030 --> 00:52:43,020
discuss lesson plans so thank you very

00:52:41,369 --> 00:52:45,290
much for your attention and I hope to

00:52:43,020 --> 00:52:45,290
see you tomorrow

00:52:49,150 --> 00:52:54,579
thank you very much what do you call an

00:52:53,380 --> 00:52:58,539
apposite

00:52:54,579 --> 00:53:00,460
pachyderm this is a joke that relies

00:52:58,539 --> 00:53:02,200
strongly on the audience knowing the

00:53:00,460 --> 00:53:05,049
meanings of both the words opposite and

00:53:02,200 --> 00:53:07,890
the word pachyderm but the answer is

00:53:05,049 --> 00:53:07,890
irrelevant

00:53:09,130 --> 00:53:14,140
yeah I made that one up yeah so please

00:53:12,700 --> 00:53:20,740
give our lost speaker a huge hand his

00:53:14,140 --> 00:53:22,510
name is Chris thank you all for saying

00:53:20,740 --> 00:53:24,550
for the last lightning talk of our first

00:53:22,510 --> 00:53:26,980
day here I'm gonna talk to you about a

00:53:24,550 --> 00:53:29,740
less kind less gentle sort of data frame

00:53:26,980 --> 00:53:32,620
so I've used pandas for over six years

00:53:29,740 --> 00:53:34,570
now and I can say this vastly increased

00:53:32,620 --> 00:53:36,550
my productivity and for that I'm

00:53:34,570 --> 00:53:39,150
tremendously grateful to the pandas

00:53:36,550 --> 00:53:41,680
developers for their contributions

00:53:39,150 --> 00:53:43,540
pandas critical to pandas utility is a

00:53:41,680 --> 00:53:46,930
sufficient performance it's powerful

00:53:43,540 --> 00:53:49,540
routines and is concise syntax but not

00:53:46,930 --> 00:53:52,420
so critical to it are it's what I would

00:53:49,540 --> 00:53:54,400
call kinder and gentler API that is

00:53:52,420 --> 00:53:56,680
there's very often multiple convenient

00:53:54,400 --> 00:53:58,060
ways to do the same thing and while this

00:53:56,680 --> 00:54:00,190
might be quite appropriate for data

00:53:58,060 --> 00:54:02,470
extrapolation data exploration and

00:54:00,190 --> 00:54:05,080
notebooks isn't really appropriate for

00:54:02,470 --> 00:54:06,760
every use case in my practice I'm

00:54:05,080 --> 00:54:09,850
building libraries and applications for

00:54:06,760 --> 00:54:11,860
financial systems and I find that pandas

00:54:09,850 --> 00:54:15,460
is often a little too kind and too

00:54:11,860 --> 00:54:17,890
gentle in my practice I do not want

00:54:15,460 --> 00:54:20,320
kindness or forgiveness I don't want

00:54:17,890 --> 00:54:22,930
gentleness or accommodation what I want

00:54:20,320 --> 00:54:26,950
are discreet and strict interfaces pure

00:54:22,930 --> 00:54:28,900
functions and fast failures for that

00:54:26,950 --> 00:54:30,430
reason we create a static frame static

00:54:28,900 --> 00:54:32,860
frame offers an alternative to pandas

00:54:30,430 --> 00:54:34,270
dependent only on numpy it's been in

00:54:32,860 --> 00:54:37,120
development at research affiliates since

00:54:34,270 --> 00:54:39,780
2017 our first open source was in 2018

00:54:37,120 --> 00:54:43,960
and we're already using it in production

00:54:39,780 --> 00:54:45,940
so while pandas is kind in allowing you

00:54:43,960 --> 00:54:48,280
to set any column you want to be an

00:54:45,940 --> 00:54:50,290
index even if that index is not unique

00:54:48,280 --> 00:54:52,450
and even if that resulting index is

00:54:50,290 --> 00:54:54,910
going to be kind of awkward to deal with

00:54:52,450 --> 00:54:57,460
later on pandas will happily let you set

00:54:54,910 --> 00:54:59,500
it as an index static frame is less kind

00:54:57,460 --> 00:55:01,870
static frame insists that all indices

00:54:59,500 --> 00:55:03,250
are unique and if you try to create an

00:55:01,870 --> 00:55:06,060
index with something that is not unique

00:55:03,250 --> 00:55:09,340
you get a handy exception

00:55:06,060 --> 00:55:10,840
while pandas is very kind and allowing

00:55:09,340 --> 00:55:13,450
you to do multiple things with the

00:55:10,840 --> 00:55:15,040
getitem syntax the getitem syntax can be

00:55:13,450 --> 00:55:17,170
used to select a column that's it's

00:55:15,040 --> 00:55:18,970
overwhelming use case I would say it can

00:55:17,170 --> 00:55:20,850
also be used as a little shortcut to

00:55:18,970 --> 00:55:23,880
given a boolean

00:55:20,850 --> 00:55:25,650
list or array to actually select rows it

00:55:23,880 --> 00:55:28,470
can be used both for selecting columns

00:55:25,650 --> 00:55:30,600
and four rows static frame is less kind

00:55:28,470 --> 00:55:32,340
static frame insists that the get item

00:55:30,600 --> 00:55:34,380
syntax is only used for selecting

00:55:32,340 --> 00:55:39,480
columns and if you want to select rows

00:55:34,380 --> 00:55:42,570
you need to use an LOC selection while

00:55:39,480 --> 00:55:45,720
pandas is kind in allowing you to wrap

00:55:42,570 --> 00:55:48,300
an array so for example here I create an

00:55:45,720 --> 00:55:51,390
array and I give that to a data frame I

00:55:48,300 --> 00:55:53,250
can mutate that array external to my

00:55:51,390 --> 00:55:55,230
data frame and those mutations show up

00:55:53,250 --> 00:55:58,290
in my data frame pandas is very nicely

00:55:55,230 --> 00:55:59,910
wrapping the array and providing an

00:55:58,290 --> 00:56:02,330
alternative interface and yet an

00:55:59,910 --> 00:56:04,680
alternative way to mutate that frame

00:56:02,330 --> 00:56:07,740
static frame is less kind static frame

00:56:04,680 --> 00:56:09,930
only wraps immutable arrays and as such

00:56:07,740 --> 00:56:10,980
if you give it an array the static frame

00:56:09,930 --> 00:56:13,320
is going to take it and make it

00:56:10,980 --> 00:56:15,150
immutable and you will no longer be able

00:56:13,320 --> 00:56:18,920
to mutate the lingering reference

00:56:15,150 --> 00:56:21,690
hanging over from after your creation

00:56:18,920 --> 00:56:23,370
finally while pandas is very kind and

00:56:21,690 --> 00:56:25,920
giving you lots of flexible ways to

00:56:23,370 --> 00:56:28,170
mutate your data frames for example a

00:56:25,920 --> 00:56:30,360
function functions like sort values

00:56:28,170 --> 00:56:32,420
allow you to use an in-place argument so

00:56:30,360 --> 00:56:35,730
you can mutate your frame in place

00:56:32,420 --> 00:56:37,400
similarly you can directly assign to a

00:56:35,730 --> 00:56:40,020
data frame using an assignment statement

00:56:37,400 --> 00:56:42,900
pandas offers lots of flexible ways to

00:56:40,020 --> 00:56:45,420
mutate your data frames in place static

00:56:42,900 --> 00:56:47,940
frame is far less kind static frame is

00:56:45,420 --> 00:56:49,890
based on immutable numpy arrays and as

00:56:47,940 --> 00:56:51,780
such you cannot mutate the internal data

00:56:49,890 --> 00:56:53,730
if you want to call a function like sort

00:56:51,780 --> 00:56:56,220
values it will give you a new frame if

00:56:53,730 --> 00:56:59,400
you want to actually mutate a value well

00:56:56,220 --> 00:57:01,620
you cannot do an LOC assignment into a

00:56:59,400 --> 00:57:03,570
frame instead you use an assignment like

00:57:01,620 --> 00:57:06,270
interface that through a function call

00:57:03,570 --> 00:57:09,120
gives you a new frame never mutating

00:57:06,270 --> 00:57:12,270
your original frame now we all know

00:57:09,120 --> 00:57:16,230
kindness is a virtue but sometimes not

00:57:12,270 --> 00:57:18,660
in our AP is less kind less gentle API

00:57:16,230 --> 00:57:20,430
is reduce opportunities for air aid and

00:57:18,660 --> 00:57:24,120
refactoring and testing and promote

00:57:20,430 --> 00:57:25,710
better code so please check out static

00:57:24,120 --> 00:57:27,510
frame it's initiative that we've been

00:57:25,710 --> 00:57:28,920
working on for a few years we'd be

00:57:27,510 --> 00:57:31,500
interested in hear your comments ideas

00:57:28,920 --> 00:57:33,120
and suggestions and you can come talk to

00:57:31,500 --> 00:57:36,200
us at the research affiliates job fair

00:57:33,120 --> 00:57:36,200
on Sunday thank you very much

00:57:39,510 --> 00:57:44,130
all right thank you very much teaching

00:57:42,750 --> 00:57:45,750
every single one of our lightning talk

00:57:44,130 --> 00:57:47,400
speakers thanks Center very much to each

00:57:45,750 --> 00:57:48,630
and every one of you for coming into

00:57:47,400 --> 00:57:49,950
this room for giving them a round of

00:57:48,630 --> 00:57:51,480
applause for giving them your attention

00:57:49,950 --> 00:57:53,070
thank you for being here at this

00:57:51,480 --> 00:57:55,080
conference thank you if you're a speaker

00:57:53,070 --> 00:57:56,880
or a volunteer or an attendee I hope

00:57:55,080 --> 00:57:58,770
you've really enjoyed your first day I

00:57:56,880 --> 00:58:00,210
certainly have please sign up to give

00:57:58,770 --> 00:58:01,500
more lining talks there's some tomorrow

00:58:00,210 --> 00:58:03,180
morning tomorrow evening and Sunday

00:58:01,500 --> 00:58:05,010
morning enjoy the whole of the rest of

00:58:03,180 --> 00:58:06,510
the conference have a lovely evening and

00:58:05,010 --> 00:58:07,860
I'll see you all tomorrow or tonight or

00:58:06,510 --> 00:58:12,780
sometime hooray

00:58:07,860 --> 00:58:12,780
[Applause]

00:58:14,230 --> 00:58:16,290

YouTube URL: https://www.youtube.com/watch?v=yFcCuinRVnU


