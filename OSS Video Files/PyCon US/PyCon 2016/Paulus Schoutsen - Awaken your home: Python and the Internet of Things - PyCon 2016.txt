Title: Paulus Schoutsen - Awaken your home: Python and the Internet of Things - PyCon 2016
Publication date: 2016-06-16
Playlist: PyCon 2016
Description: 
	"Speaker: Paulus Schoutsen

People are acquiring more and more connected devices for their homes. With no standard in place for communication, vendors are shipping their own platforms. This results in devices unable to work together. This talk shows people how to take control of their houses, their data and their privacy using Python – no cloud attached. Enter the world of Home Assistant.

Slides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"
Captions: 
	00:00:00,000 --> 00:00:02,940
(moderator) OK, hello everyone, welcome back.

00:00:02,940 --> 00:00:05,760
Next up we're going to have Paulus Schoutsen,

00:00:05,760 --> 00:00:08,260
and he's going to talk to us about "Awaken your home:

00:00:08,260 --> 00:00:10,580
"Python and the Internet of Things." Give him applause.

00:00:10,589 --> 00:00:15,760
[applause].

00:00:15,760 --> 00:00:18,920
(Paulus Schoutsen) Awesome, awesome, hello everyone.

00:00:18,920 --> 00:00:20,720
Before I get started, just a quick show of hands:

00:00:20,720 --> 00:00:23,900
who has heard here of Home Assistant?

00:00:23,900 --> 00:00:25,660
OK, OK, that's cool.

00:00:25,660 --> 00:00:29,500
Who here in the room has a smart internet of things device

00:00:29,500 --> 00:00:31,760
in their house?

00:00:31,760 --> 00:00:34,440
Awesome, and of those people who live in a house, apartment,

00:00:34,450 --> 00:00:37,240
or do you actually live in a house, apartment, or room?

00:00:37,240 --> 00:00:40,880
In that case, pay attention because this is going to be useful.

00:00:40,880 --> 00:00:44,800
Um, my name is Paulus Schoutsen. I'm a software engineer

00:00:44,800 --> 00:00:48,120
for a company called AppFolio in San Diego.

00:00:48,120 --> 00:00:50,240
But I’m here not to talk about my work today.

00:00:50,240 --> 00:00:52,440
I’ll talk about my side project, Home Assistant,

00:00:52,440 --> 00:00:55,560
and how it could help you to automate your home.

00:00:55,560 --> 00:01:00,120
And so first I want to talk about, like, why does Home Assistant exist?

00:01:00,120 --> 00:01:02,360
Because we already have the internet of things,

00:01:02,360 --> 00:01:04,220
we already have apps.

00:01:04,220 --> 00:01:07,420
Why would we need Python to, like, manage this?

00:01:07,420 --> 00:01:11,320
And so the main reason this is: is that there is no standard yet

00:01:11,320 --> 00:01:13,560
that is widely adopted for home automation.

00:01:13,560 --> 00:01:16,620
And so every vendor who wants to go quick to market,

00:01:16,620 --> 00:01:19,020
doesn’t want to, like, support some small standard,

00:01:19,020 --> 00:01:21,860
they are like, you know what? We'll just run our own cloud.

00:01:21,870 --> 00:01:23,920
We'll run our own protocol.

00:01:23,920 --> 00:01:26,780
And by doing so, they create an isolated environment

00:01:26,780 --> 00:01:30,560
where, you know, your lights do not know about your thermostat,

00:01:30,560 --> 00:01:33,180
they do not know about your media player.

00:01:33,180 --> 00:01:36,000
And this goes one step further, is that you as a user

00:01:36,000 --> 00:01:39,200
end up with, like, an app per device type in your home.

00:01:39,200 --> 00:01:42,700
So you have one app to open to get your thermostat going,

00:01:42,700 --> 00:01:44,540
one for your lights.

00:01:44,540 --> 00:01:46,860
And it's also resulted in when you want to do automation

00:01:46,860 --> 00:01:49,580
that crosses these boundaries, it's impossible

00:01:49,590 --> 00:01:51,830
because they don't know about each other.

00:01:51,830 --> 00:01:54,780
And so to solve this, there's this thing called a hub,

00:01:54,780 --> 00:01:56,840
a home automation hub.

00:01:56,840 --> 00:01:59,100
And so that is what -- how Home Assistant is.

00:01:59,100 --> 00:02:02,100
And a hub bridges, um, these devices

00:02:02,100 --> 00:02:04,360
by speaking all the different protocols

00:02:04,360 --> 00:02:07,720
that all these different devices speak.

00:02:07,720 --> 00:02:10,640
And so when we look at what the essence of a hub is,

00:02:10,640 --> 00:02:12,380
it's actually very simple.

00:02:12,380 --> 00:02:15,020
The first thing is it communicates with the internet of things,

00:02:15,020 --> 00:02:18,840
sending out commands. Thermostat, set your temperature.

00:02:18,840 --> 00:02:21,240
Light, turn on.

00:02:21,240 --> 00:02:24,260
Um, media player, start playing a movie.

00:02:24,260 --> 00:02:27,440
But the other piece that it -- home control part is

00:02:27,450 --> 00:02:29,930
is that it gets information from the internet of things.

00:02:29,930 --> 00:02:32,660
And we can break up the information we get from the internet of things

00:02:32,660 --> 00:02:36,360
into two parts: The first part is state.

00:02:36,360 --> 00:02:38,560
And so there's devices; they have a state.

00:02:38,560 --> 00:02:42,240
At any point in time you can look at the device and you can see its state.

00:02:42,240 --> 00:02:44,940
So, for example, a light, its state is on,

00:02:44,950 --> 00:02:47,609
and there might be some extra attributes that explain

00:02:47,609 --> 00:02:49,549
the state of that device.

00:02:49,560 --> 00:02:52,580
So if the light is on, its brightness might be 60%

00:02:52,580 --> 00:02:54,340
and the color might be red.

00:02:54,340 --> 00:02:58,200
If a media player is playing, the volume might be 80%

00:02:58,200 --> 00:03:01,340
and it’s playing a TV show called "Game of Thrones."

00:03:01,340 --> 00:03:06,120
The other piece of information that we get from the internet of things is events.

00:03:06,120 --> 00:03:08,600
And events is not something you can just look by --

00:03:08,600 --> 00:03:11,320
you can observe by looking at, like, a device.

00:03:11,320 --> 00:03:14,120
You have to actually pay attention and then the event happens.

00:03:14,120 --> 00:03:17,680
So for example, a light is being turned on

00:03:17,689 --> 00:03:20,720
or motion is detected.

00:03:20,720 --> 00:03:22,559
And so this is like the foundation of a hub.

00:03:22,560 --> 00:03:26,180
This is how you as a user can control your home.

00:03:26,180 --> 00:03:30,779
And so the user will see the information from home control

00:03:30,779 --> 00:03:33,519
and can issue commands saying, like, "Hey, why don't you turn

00:03:33,519 --> 00:03:37,039
"the light on? "Why don't you set the thermostat?"

00:03:37,040 --> 00:03:40,360
But of course this is also perfect to automate.

00:03:40,360 --> 00:03:43,600
If the user knows, "Oh, when I’m arriving home

00:03:43,600 --> 00:03:46,660
"and the sun is down, I want the lights to turn on,"

00:03:46,660 --> 00:03:49,200
that's home automation. And so home automation

00:03:49,200 --> 00:03:51,160
is rule-based.

00:03:51,160 --> 00:03:54,440
The triggers for home automation are always an event.

00:03:54,440 --> 00:03:57,340
So it cannot be, when the light is on, trigger something,

00:03:57,340 --> 00:04:00,840
because it is active over a longer period of time.

00:04:00,840 --> 00:04:04,580
But instead you're going to have to look at when the light turns on.

00:04:04,580 --> 00:04:07,060
And so this is, for example, in the example I just gave,

00:04:07,060 --> 00:04:10,880
it is when a person arrives home.

00:04:10,880 --> 00:04:13,000
And so the next part is conditions.

00:04:13,000 --> 00:04:15,540
And so you want not always -- you don't always want

00:04:15,540 --> 00:04:17,060
your home automation rules to execute

00:04:17,060 --> 00:04:20,780
when the certain event happens. And so, in the example I gave,

00:04:20,780 --> 00:04:22,620
only when the sun has set

00:04:22,620 --> 00:04:25,480
do you actually want to turn the lights on.

00:04:25,480 --> 00:04:27,680
And the last piece of home automation

00:04:27,680 --> 00:04:29,919
is to actually send the commands.

00:04:29,919 --> 00:04:32,359
"Let's turn the lights on."

00:04:32,360 --> 00:04:34,940
And so this combination of home control and home automation

00:04:34,940 --> 00:04:37,460
is what makes a home automation hub,

00:04:37,460 --> 00:04:39,620
and that is what Home Assistant is.

00:04:39,620 --> 00:04:42,380
And so Home Assistant is a home automation platform

00:04:42,389 --> 00:04:44,660
that is running on Python 3.

00:04:44,660 --> 00:04:47,940
It is open-source, released under the MIT license.

00:04:47,940 --> 00:04:52,460
And it runs from tiny computers like your $35 Raspberry Pi.

00:04:52,460 --> 00:04:54,580
And the nice thing, because it is so easy,

00:04:54,580 --> 00:04:57,220
accessible to get running, you host it locally.

00:04:57,220 --> 00:04:59,940
You know, for example, that your data will stay yours.

00:04:59,940 --> 00:05:02,000
There will be nobody looking at your data.

00:05:02,000 --> 00:05:06,640
And this is very important because when you're doing home automation,

00:05:06,640 --> 00:05:08,640
your home automation hub knows everything about you.

00:05:08,640 --> 00:05:10,640
It knows like, which room are you in?

00:05:10,640 --> 00:05:14,280
Which lights are on? Which -- what are you playing?

00:05:14,280 --> 00:05:16,560
What's your favorite TV show?

00:05:17,440 --> 00:05:19,140
And the next thing that Home Assistant offers is that

00:05:19,140 --> 00:05:21,580
we allow you to track people and things on a map,

00:05:21,580 --> 00:05:24,160
using like iBeacons or OwnTracks,

00:05:24,160 --> 00:05:26,360
which is an open-source mobile phone application

00:05:26,370 --> 00:05:28,640
that talks directly to Home Assistant.

00:05:28,640 --> 00:05:32,320
This gives you a whole extra dimension to home automation.

00:05:32,320 --> 00:05:34,140
Because all of a sudden you can say,

00:05:34,140 --> 00:05:36,139
"Hey, if I am arriving home

00:05:36,139 --> 00:05:38,419
"and I’m within two kilometers of my home, why don't we

00:05:38,420 --> 00:05:42,200
"make sure that the thermostat is gonna heat up my house?"

00:05:42,200 --> 00:05:45,960
or, "Hey, maybe when I’m at 7 PM and I’m still at work,

00:05:45,960 --> 00:05:49,080
"let me get a notification, say, 'hey, go home.'"

00:05:49,080 --> 00:05:51,620
[laughter]

00:05:51,620 --> 00:05:54,160
Home Assistant comes with a responsive web application

00:05:54,160 --> 00:05:57,300
that you can run everywhere, so you can run it on your mobile phone,

00:05:57,310 --> 00:06:00,070
on your tablet, or on your browser.

00:06:01,740 --> 00:06:05,160
Another piece that is very nice is that because we know the state

00:06:05,160 --> 00:06:08,880
of your home at a current point in time, we're also keeping track of it.

00:06:08,880 --> 00:06:11,440
So you can go back in time as sort of like a time machine

00:06:11,440 --> 00:06:15,719
and say, "Well, how did my home look yesterday at 5 PM?"

00:06:15,720 --> 00:06:19,620
Or, "When did my kids arrive home last night?"

00:06:21,180 --> 00:06:23,520
And the last piece is that right now,

00:06:23,520 --> 00:06:28,479
Home Assistant contains already 286 built-in components and platforms

00:06:28,479 --> 00:06:31,459
that integrate a lot of different services and devices.

00:06:31,460 --> 00:06:34,139
So the Philips Hue bulbs, the Nest thermostats,

00:06:34,139 --> 00:06:37,740
the Ecobee thermostats, but also, If This, Then That,

00:06:37,740 --> 00:06:42,320
the Amazon Echo, they all work with Home Assistant.

00:06:42,320 --> 00:06:46,800
And so to see how Home Assistant actually maps to the internet of things,

00:06:46,800 --> 00:06:49,900
it's actually very simple and it's a very, almost like a one-on-one mapping

00:06:49,900 --> 00:06:54,220
about how I just described the essence of a hub.

00:06:54,220 --> 00:06:56,280
So the core of Home Assistant is an event bus.

00:06:56,289 --> 00:06:58,749
Any component, which are the piece of code

00:06:58,749 --> 00:07:02,330
that you plug into Home Assistant, can fire any event,

00:07:02,330 --> 00:07:05,560
and they can listen to any event.

00:07:05,560 --> 00:07:08,159
The next piece is a state machine.

00:07:08,160 --> 00:07:12,100
And the state machine stores the state of so-called entities.

00:07:12,100 --> 00:07:15,040
I don't use the word device here because we also track people

00:07:15,050 --> 00:07:17,039
or, like, uptime of your computer.

00:07:17,039 --> 00:07:20,559
But the state machine, again, it's very, like, open-minded.

00:07:20,560 --> 00:07:22,840
It doesn't force you to, say, register how a light

00:07:22,840 --> 00:07:25,319
should be represented; it doesn't matter.

00:07:25,320 --> 00:07:28,260
It just holds the state and it holds --

00:07:28,260 --> 00:07:31,380
uh, it just holds the state and the entity and some extra data.

00:07:31,380 --> 00:07:35,660
And whenever the state changes, it will fire a state changed event.

00:07:35,660 --> 00:07:39,860
And so now, as your code wants to, like, listen for changes to states,

00:07:39,860 --> 00:07:43,080
it just again has to listen to the event bus.

00:07:44,160 --> 00:07:46,060
The next piece is the service registry.

00:07:46,060 --> 00:07:48,140
And so the service registry will allow components

00:07:48,140 --> 00:07:51,460
to register services that they want to make available to all the code

00:07:51,460 --> 00:07:56,380
that's on the event bus to allow calling to control devices, for example.

00:07:56,389 --> 00:07:59,240
So a light component will register it turned on a light,

00:07:59,240 --> 00:08:03,240
a switch will toggle the switch service.

00:08:03,240 --> 00:08:08,100
So again, to call a service, you fire an event on the event bus

00:08:08,100 --> 00:08:11,360
and then the service registry, once it has executed your event,

00:08:11,360 --> 00:08:15,060
will fire back, "Hey, we actually executed your service."

00:08:15,069 --> 00:08:18,969
And so as the calling code, you know, OK, the work is done.

00:08:20,060 --> 00:08:21,860
And the last piece is the timer.

00:08:21,860 --> 00:08:23,779
So Home Assistant is an event-based system.

00:08:23,779 --> 00:08:27,210
And what an event-based system means is the state of your application

00:08:27,210 --> 00:08:29,880
can only change based on the event.

00:08:29,880 --> 00:08:32,780
And so internally this happens with a timer, and the timer

00:08:32,780 --> 00:08:36,180
will fire a time changed event every second.

00:08:36,180 --> 00:08:38,860
And this will allow, for example, listeners to say,

00:08:38,860 --> 00:08:43,300
"Hey, notify me at 7 PM" to know when to actually fire.

00:08:43,300 --> 00:08:47,280
Another way the internal state can change is with external events.

00:08:47,280 --> 00:08:49,160
So there are, for example, certain devices that allow

00:08:49,160 --> 00:08:51,860
to push their state directly to Home Assistant.

00:08:51,860 --> 00:08:54,700
So we get notified.

00:08:54,700 --> 00:08:57,640
So now let's have a look how this actually works, right?

00:08:57,640 --> 00:09:01,900
Like, how does it work to integrate an internet of things device

00:09:01,900 --> 00:09:05,400
into Home Assistant? And so let's say we have a light bulb.

00:09:05,400 --> 00:09:09,060
And so to integrate the light bulb, we have a light component.

00:09:09,060 --> 00:09:11,560
The light component, in this case the light bulb,

00:09:11,570 --> 00:09:15,380
does not tell us about its state so we have to pull for it.

00:09:15,380 --> 00:09:18,080
The light bulb, OK, what's your state?

00:09:18,080 --> 00:09:20,690
I mean right into the state machine.

00:09:20,690 --> 00:09:24,660
The state machine will do its job, fires a state changed event.

00:09:24,660 --> 00:09:27,440
And the light component will talk to the service registry

00:09:27,450 --> 00:09:30,120
to register the turn on command.

00:09:30,120 --> 00:09:33,380
Now let's say we have a motion detector in our house.

00:09:33,380 --> 00:09:36,580
And we want the motion detector to also integrate with Home Assistant.

00:09:36,580 --> 00:09:40,540
So we have a motion detector component, and if a motion gets detected,

00:09:40,540 --> 00:09:42,560
it gets routed through the motion detector component

00:09:42,560 --> 00:09:47,700
it pushes an event, and that component will translate that event to the event bus

00:09:47,700 --> 00:09:50,660
and fires a motion detected event.

00:09:50,660 --> 00:09:53,100
Now we want to have some automation.

00:09:53,100 --> 00:09:57,620
And so to get automation going, we would have a simple automation component

00:09:57,620 --> 00:10:00,880
that only what it does is it listens to the event bus.

00:10:00,880 --> 00:10:05,680
It listens for motion detected events, fires to the event bus,

00:10:05,680 --> 00:10:08,240
let's call the service, turn the light on,

00:10:08,240 --> 00:10:10,980
which gets routed to the service registry,

00:10:10,980 --> 00:10:14,580
gets routed to the light component, gets routed to a light bulb,

00:10:14,590 --> 00:10:16,380
a light bulb turns on.

00:10:16,380 --> 00:10:18,720
And all of this happens without the components knowing

00:10:18,720 --> 00:10:20,480
about each other's existence.

00:10:20,480 --> 00:10:22,960
Every component runs in isolation.

00:10:22,960 --> 00:10:27,280
Every component, it just only knows about its own things.

00:10:27,280 --> 00:10:30,970
And it just exposes the interfaces that it wants to be --

00:10:30,970 --> 00:10:33,500
wants to have exposed.

00:10:33,500 --> 00:10:38,350
And so there's one specific type of component that we have.

00:10:38,350 --> 00:10:40,820
It’s called entity components. And entity components

00:10:40,820 --> 00:10:43,000
in Home Assistant allow you to add support.

00:10:43,000 --> 00:10:46,300
And so the entity components sort of describe

00:10:46,300 --> 00:10:48,380
how Home Assistant expects a light to work,

00:10:48,380 --> 00:10:52,520
or, like, what we expect from a light or we expect from a thermostat.

00:10:52,520 --> 00:10:55,560
And so on top of these entity components are platforms.

00:10:55,560 --> 00:10:59,320
So every integration we do with the device or cloud

00:10:59,330 --> 00:11:01,330
is always represented as a platform.

00:11:01,330 --> 00:11:04,880
They just follow the specifications of your entity component.

00:11:04,880 --> 00:11:07,840
And then they are -- entity component abstracts

00:11:07,840 --> 00:11:10,820
the Home Assistant core away from the platform so the platform

00:11:10,820 --> 00:11:13,840
doesn't actually have to know about the state machine,

00:11:13,850 --> 00:11:15,940
the service registry, anything.

00:11:15,940 --> 00:11:19,120
So it does this with an abstract base class.

00:11:19,120 --> 00:11:22,920
And so this abstract base class consists of two parts.

00:11:22,920 --> 00:11:26,380
The first part is information that we want to know about this device,

00:11:26,380 --> 00:11:29,420
and some of this information is optional if you don't support it,

00:11:29,420 --> 00:11:31,560
otherwise, some are mandatory.

00:11:31,560 --> 00:11:35,460
So for example, in the case of a light, is_on is very important,

00:11:35,470 --> 00:11:38,100
it’s mandatory for a light because you have to know

00:11:38,100 --> 00:11:40,100
if the light is on or off.

00:11:40,100 --> 00:11:43,660
But the rgb_color and the brightness are optional.

00:11:43,660 --> 00:11:46,400
We don't -- if your light doesn't support it,

00:11:46,400 --> 00:11:48,760
you don't implement it.

00:11:48,760 --> 00:11:50,831
And the next thing that you have to implement when you extend

00:11:50,831 --> 00:11:53,220
our abstract base class is the methods.

00:11:53,220 --> 00:11:55,660
So for light it’s: we want to be able to turn on,

00:11:55,660 --> 00:11:57,640
we want to be able to turn off.

00:11:57,640 --> 00:12:00,880
By just implementing these two commands,

00:12:00,880 --> 00:12:02,640
you already have your own light.

00:12:02,640 --> 00:12:06,100
And you see how this, like -- it's actually this simple.

00:12:06,100 --> 00:12:08,800
So I wanna show an example and this is --

00:12:08,800 --> 00:12:11,920
I’m going to show three examples: one of a sensor,

00:12:11,920 --> 00:12:14,240
one of a switch and one of automation.

00:12:14,250 --> 00:12:17,900
And then I’m actually going to show how it looks in real life.

00:12:17,900 --> 00:12:19,700
So let's say we have a sensor platform.

00:12:19,700 --> 00:12:22,000
This is going to be a hardcoded sensor platform

00:12:22,000 --> 00:12:24,970
so it will always return a static value.

00:12:24,970 --> 00:12:28,120
And all these code examples I’m going to put here on the slides --

00:12:28,120 --> 00:12:31,200
and I hope it's readable but I think it is -- do actually work.

00:12:31,200 --> 00:12:33,700
They can be copied straight into Home Assistant

00:12:33,700 --> 00:12:37,280
without having to adjust any code.

00:12:37,280 --> 00:12:40,800
On the left, this is if you're just at home reading the slides again,

00:12:40,800 --> 00:12:42,230
you would actually -- how you would add it

00:12:42,230 --> 00:12:45,400
to your configuration, to your setup.

00:12:45,400 --> 00:12:47,600
And so when we start writing our sensor platform,

00:12:47,600 --> 00:12:51,620
the first thing we do is that we import our abstract base class.

00:12:51,620 --> 00:12:53,680
And then we implement it with our own -- we extend

00:12:53,680 --> 00:12:55,840
that abstract base class.

00:12:55,840 --> 00:13:00,540
Then we want to give it a name, so we say temperature.

00:13:00,550 --> 00:13:04,050
We want to say the state of the sensor, which is 23.

00:13:04,050 --> 00:13:06,030
But of course 23 doesn't mean anything.

00:13:06,030 --> 00:13:08,820
It could be Fahrenheit, it could be Celsius,

00:13:08,830 --> 00:13:13,480
so the last piece we have to expose is a unit of measurement.

00:13:13,480 --> 00:13:17,620
And so now we the only thing left is, how do we get this sensor

00:13:17,620 --> 00:13:19,780
into Home Assistant?

00:13:19,780 --> 00:13:21,680
And that's through a method, and this is like a method

00:13:21,680 --> 00:13:23,230
you define in your module.

00:13:23,230 --> 00:13:25,660
Home Assistant will automatically load your file,

00:13:25,660 --> 00:13:29,120
load your module, and call this method.

00:13:29,120 --> 00:13:33,740
And so there are four parameters: first is the Home Assistant instance.

00:13:33,740 --> 00:13:37,540
The second is the configuration specific to your platform.

00:13:37,540 --> 00:13:40,760
Add_devices is a function, a callback that you can call

00:13:40,760 --> 00:13:45,540
at any point in time, even later, if you detect new types of your device.

00:13:45,540 --> 00:13:47,820
And discovery_info is if your platform was actually

00:13:47,820 --> 00:13:51,980
automatically discovered instead of issued by user configuration.

00:13:51,980 --> 00:13:54,080
And because this is hardcoded, the only thing we're going to do

00:13:54,090 --> 00:13:58,620
is we're going to instantiate an instance of our example sensor.

00:13:58,620 --> 00:14:02,620
We put it in a list because that's what the add_devices expects.

00:14:02,620 --> 00:14:04,800
And then we pass it to add_devices.

00:14:04,800 --> 00:14:07,740
And then it looks like this in Home Assistant.

00:14:07,740 --> 00:14:10,420
We have our sensor.

00:14:10,420 --> 00:14:12,980
So now let's go a bit deeper.

00:14:12,980 --> 00:14:14,780
Let's see how a switch looks.

00:14:14,780 --> 00:14:16,540
But I didn't want to do a hardcoded switch

00:14:16,540 --> 00:14:19,070
just as an instance variable to control the state.

00:14:19,070 --> 00:14:21,610
I wanted to, like, represent a real life scenario

00:14:21,610 --> 00:14:25,200
because in real life, home automation is not that easy, you know?

00:14:25,200 --> 00:14:27,350
You have your app to control your thermostat

00:14:27,350 --> 00:14:29,550
but somebody might just walk to your thermostat and actually

00:14:29,550 --> 00:14:32,390
just change the temperature and you have to be able to pick that up,

00:14:32,390 --> 00:14:34,440
you have to be able to control that.

00:14:34,440 --> 00:14:37,070
And so to sort of mimic this in the demo,

00:14:37,070 --> 00:14:39,790
I do it based on the existence of a file.

00:14:39,790 --> 00:14:42,390
So if the file exists, the switch is on.

00:14:42,390 --> 00:14:45,100
The file doesn't exist, the switch is off.

00:14:45,100 --> 00:14:47,380
If we turn on the switch, the file will get created.

00:14:47,390 --> 00:14:50,880
And if we turn off the switch, the file will be removed.

00:14:50,880 --> 00:14:53,140
And so we can actually now also go in the file system

00:14:53,140 --> 00:14:56,620
and remove the file and Home Assistant will have to pick it up.

00:14:56,620 --> 00:14:58,940
So the extra piece to make it more useful and reusable,

00:14:58,940 --> 00:15:02,240
we allow it to be configured by a file path

00:15:02,240 --> 00:15:05,120
that you put in your configuration.

00:15:05,120 --> 00:15:08,180
Um, if you look at the bottom left, you see that we actually --

00:15:08,180 --> 00:15:10,900
just inside the switch block in the configuration --

00:15:10,900 --> 00:15:14,340
we add file_path and we add a path to a file.

00:15:15,100 --> 00:15:19,780
And so again we first start by importing and extending

00:15:19,790 --> 00:15:24,860
the abstract base class. And so by -- this will allow us --

00:15:24,860 --> 00:15:27,280
this time we actually focus on ToggleEntity

00:15:27,290 --> 00:15:31,560
as our abstract base class which is the basis for a switch.

00:15:31,560 --> 00:15:34,090
And so we define a constructor because we want to actually focus

00:15:34,090 --> 00:15:36,660
on a specific file path that the user chose.

00:15:36,660 --> 00:15:40,260
Then we want to be able to test, is the switch on or not?

00:15:40,260 --> 00:15:42,720
So we implemented update method.

00:15:42,730 --> 00:15:46,360
And this update method will just use the built-in OS module

00:15:46,360 --> 00:15:49,460
to see if the file exists on the machine.

00:15:50,580 --> 00:15:52,400
And this method will also be automatically called

00:15:52,410 --> 00:15:55,620
by Home Assistant periodically to make sure that Home Assistant

00:15:55,620 --> 00:16:00,280
has the latest representation of your switch.

00:16:00,280 --> 00:16:02,440
Now we're gonna add a name.

00:16:02,440 --> 00:16:04,080
The name is going to be the file name, so again,

00:16:04,080 --> 00:16:07,220
we use the built-in OS module.

00:16:07,220 --> 00:16:10,630
We want to expose if you're on or not and so we will just expose

00:16:10,630 --> 00:16:14,290
the internal instance method -- yeah sorry, instance variable

00:16:14,290 --> 00:16:17,530
that we stored in the update method.

00:16:17,530 --> 00:16:20,390
For turning on we're doing the Python equivalent

00:16:20,390 --> 00:16:25,260
of the touch tool in Linux so we open and close the file right away,

00:16:25,260 --> 00:16:27,580
making sure it gets -- exists.

00:16:27,580 --> 00:16:30,180
And for turn off, we remove the file.

00:16:30,180 --> 00:16:35,120
And so now again, the last piece is, um . . .

00:16:35,120 --> 00:16:37,280
to add it to Home Assistant. And so again,

00:16:37,280 --> 00:16:39,840
we have a setup_platform method.

00:16:39,840 --> 00:16:42,620
And this time because we want to have -- want to add the file path

00:16:42,620 --> 00:16:46,040
that the user supplies, we adjust the configuration,

00:16:46,040 --> 00:16:50,900
which is a dictionary, with the data that the user put in its platform block.

00:16:50,900 --> 00:16:54,420
We get that data, so we can just reference config file_path,

00:16:54,420 --> 00:16:56,900
and there we have the file path of the user.

00:16:56,900 --> 00:16:59,160
We add it to Home Assistant,

00:16:59,160 --> 00:17:01,180
and it will look, for example, like this.

00:17:01,180 --> 00:17:05,160
Here we observe hello and the file world.

00:17:05,160 --> 00:17:07,700
And hello is on and world is off.

00:17:08,680 --> 00:17:10,660
And so before I’m going to show how this actually works,

00:17:10,660 --> 00:17:15,080
I want to show one more example, and this is the automation component,

00:17:15,080 --> 00:17:18,420
because this is the actual fun part, of course.

00:17:18,420 --> 00:17:21,420
And so this automation component is going to be very simple.

00:17:21,420 --> 00:17:24,780
It's like an xor component and it's going to keep two switches

00:17:24,780 --> 00:17:26,880
in opposite states.

00:17:26,880 --> 00:17:31,380
And so again, you create a file in your configuration directory

00:17:31,390 --> 00:17:34,960
if you want to add this, but this time in the configuration section,

00:17:34,960 --> 00:17:37,540
you have to point it at the two names of your switches

00:17:37,540 --> 00:17:39,180
that you want to observe.

00:17:39,190 --> 00:17:41,220
And this, for example, would be a very simple one.

00:17:41,220 --> 00:17:43,670
"Hey, if my air conditioning goes on, make sure that the fan

00:17:43,670 --> 00:17:47,570
"to the outside is off and vice versa."

00:17:47,570 --> 00:17:50,030
And so this is a component, this is not a platform.

00:17:50,030 --> 00:17:52,470
This is actually something that runs directly

00:17:52,470 --> 00:17:54,940
on the Home Assistant core and has knowledge of this.

00:17:54,940 --> 00:17:57,420
And so it's a slightly different structure.

00:17:57,420 --> 00:18:00,520
So first, every component has to define its domain.

00:18:00,520 --> 00:18:03,020
In this case it's xor_automation.

00:18:04,060 --> 00:18:05,960
The next piece is the setup method.

00:18:05,960 --> 00:18:09,320
The setup method is, there's no entity component abstraction

00:18:09,320 --> 00:18:11,620
around the platform -- around this component,

00:18:11,620 --> 00:18:13,070
so this is the real --

00:18:13,070 --> 00:18:15,070
this is how Home Assistant loads its components.

00:18:15,070 --> 00:18:19,110
And so you get the Home Assistant instance and you get the whole configuration,

00:18:19,110 --> 00:18:22,080
so everything that the user supplied.

00:18:22,080 --> 00:18:24,630
In our case, we're just going to extract the two entities

00:18:24,630 --> 00:18:27,260
that we’re going to observe,

00:18:27,260 --> 00:18:30,560
we're going to import some helpers that will allow us to test

00:18:30,560 --> 00:18:32,860
if an entity is on and toggle it.

00:18:32,870 --> 00:18:36,370
And toggle it means if it’s on, we turn it off and vice versa.

00:18:36,370 --> 00:18:39,140
And so what we're going to do now is that the component wants to make sure

00:18:39,140 --> 00:18:42,340
when it gets started we're already in a good place.

00:18:42,340 --> 00:18:45,840
So it's going to test, "Hey, is entity_1 equal to the state of entity_2?

00:18:45,840 --> 00:18:49,460
"In that case, let's toggle entity_2 so it's in a reverse state."

00:18:50,600 --> 00:18:53,340
And then we're going to add a -- we want to listen to state changes.

00:18:53,340 --> 00:18:55,190
So whenever entity_1 changes, we want to make sure

00:18:55,190 --> 00:19:01,030
that we can update entity_2, if necessary, and the same with entity_2 updates.

00:19:01,030 --> 00:19:04,650
And so almost this allows for state listeners.

00:19:04,650 --> 00:19:07,750
And so what you get passed in is the entity that changed,

00:19:07,750 --> 00:19:12,220
the previous state and the new state it became.

00:19:12,220 --> 00:19:14,650
And so in our state change list now it's very simple.

00:19:14,650 --> 00:19:16,900
We're going to first see, what is the entity that change,

00:19:16,900 --> 00:19:20,720
so we know, what is the other entity that we have to look at?

00:19:20,720 --> 00:19:23,500
We're going to compare the two entities again

00:19:23,500 --> 00:19:26,290
and if one is not the same -- if both are the same,

00:19:26,290 --> 00:19:28,510
we're going to again toggle the other one.

00:19:29,540 --> 00:19:34,320
Then we'll import a helper to register our state callback listener.

00:19:34,320 --> 00:19:36,760
And so you're passing your Home Assistant instance,

00:19:36,760 --> 00:19:38,720
you pass in the entities you want to observe

00:19:38,720 --> 00:19:40,740
and you pass in your state callback listener.

00:19:40,740 --> 00:19:45,360
And by doing so, this will actually listen for state changed events

00:19:45,360 --> 00:19:48,420
on the event bus and it will actually already filter out

00:19:48,420 --> 00:19:50,530
all the state changed events that are not about

00:19:50,530 --> 00:19:52,310
the two entities we care about.

00:19:52,310 --> 00:19:55,240
So it's already, like, filtered down a lot.

00:19:55,240 --> 00:19:58,330
And the last piece is that you're going to return true

00:19:58,330 --> 00:20:03,290
to show -- to tell Home Assistant, "Hey, this component,

00:20:03,290 --> 00:20:05,550
"it loaded successfully."

00:20:05,550 --> 00:20:08,030
And so now that we have an automation component

00:20:08,030 --> 00:20:12,460
and we have file switches, I have this demo ready.

00:20:12,460 --> 00:20:14,710
And so this is Home Assistant.

00:20:14,710 --> 00:20:16,780
I have two browsers open that are both pointing

00:20:16,780 --> 00:20:20,360
at the same version of Home Assistant.

00:20:20,360 --> 00:20:23,920
I have two switches, but one is pointed at hello,

00:20:23,920 --> 00:20:25,990
the other is pointed at world.

00:20:25,990 --> 00:20:29,800
And so now if I’m going to turn the hello switch,

00:20:29,800 --> 00:20:33,490
the file hello will be deleted, our automation will kick in,

00:20:33,490 --> 00:20:37,250
turn world on, and because world is being turned on,

00:20:37,250 --> 00:20:39,600
our world file will get created.

00:20:39,600 --> 00:20:41,800
So let's hope it works.

00:20:41,800 --> 00:20:43,820
There you go.

00:20:43,820 --> 00:20:48,200
[applause]

00:20:48,200 --> 00:20:50,160
OK, thank you. And so . . .

00:20:50,160 --> 00:20:52,060
[laughter]

00:20:52,060 --> 00:20:55,540
Um, as you guys might have seen, the other interface

00:20:55,540 --> 00:20:58,060
actually updated too. And so,

00:20:58,060 --> 00:21:00,980
however, I’m going to click again on the left top interface

00:21:00,980 --> 00:21:05,780
and at the bottom right is going to update as well.

00:21:05,780 --> 00:21:08,280
And this is all instantly because every -- the front end

00:21:08,280 --> 00:21:10,300
is connected to Home Assistant. It is connected

00:21:10,300 --> 00:21:13,120
to the same event bus that, like the rest

00:21:13,120 --> 00:21:15,250
of the components are connected to.

00:21:15,250 --> 00:21:17,400
And because the front end can observe state changes

00:21:17,400 --> 00:21:22,350
as they come in, it can update the representation of the whole --

00:21:22,350 --> 00:21:27,000
of your home inside the browser and can immediately update this

00:21:27,000 --> 00:21:29,400
uh, in the browser for you to see.

00:21:29,400 --> 00:21:31,961
But of course, like I said before, we want a real case scenario.

00:21:31,961 --> 00:21:35,680
So now let's see if we can -- if we delete this file,

00:21:35,680 --> 00:21:38,440
Home Assistant which is, like, trying to update the switches

00:21:38,440 --> 00:21:42,230
in the background periodically, will catch this,

00:21:42,230 --> 00:21:44,960
will delete the file, so hello will be turned off

00:21:44,960 --> 00:21:46,660
because the file doesn't exist.

00:21:46,660 --> 00:21:50,580
Our automation again will kick in and will create world.

00:21:53,480 --> 00:21:55,360
There you go.

00:21:55,360 --> 00:21:58,780
And so now you can see we can actually handle external state

00:21:58,780 --> 00:22:01,900
and we can handle internal commands.

00:22:05,100 --> 00:22:08,340
And so that's everything I wanted to show to you guys today.

00:22:08,350 --> 00:22:12,220
If you, like, want to try the interface on your phone right now,

00:22:12,220 --> 00:22:15,940
you can go to home-assistant.io/demo. It should load fine.

00:22:15,940 --> 00:22:20,620
On your computer with Python 3, you can run pip3 install home assistant.

00:22:20,620 --> 00:22:22,680
It will install the core.

00:22:22,680 --> 00:22:26,380
And you can actually run the command line hass --open-ui

00:22:26,380 --> 00:22:29,940
and it will start the server, it will start your browser

00:22:29,940 --> 00:22:34,280
pointing at the server, and it will figure things out right away.

00:22:34,280 --> 00:22:36,580
If you want more website -- if you want more information

00:22:36,590 --> 00:22:41,010
or tutorials, you can check out our website at home-assistant.io.

00:22:41,010 --> 00:22:44,250
You can also stop by our community at community.home-assistant.io

00:22:44,250 --> 00:22:47,090
or our very active chat room

00:22:47,090 --> 00:22:49,480
if you run into any troubles.

00:22:49,480 --> 00:22:51,680
And also today at 5 PM,

00:22:51,680 --> 00:22:55,760
we're having an open space at C122.

00:22:55,760 --> 00:22:58,680
So if you want to, like, get some help to get --

00:22:58,690 --> 00:23:01,520
oh, C120? OK, C120.

00:23:01,520 --> 00:23:03,800
So if you want to, like, get started with it or, like,

00:23:03,800 --> 00:23:05,960
wanna meet and greet some of the developers,

00:23:05,970 --> 00:23:09,220
because there are, I think four of us right now at PyCon,

00:23:09,220 --> 00:23:11,420
that will be your chance.

00:23:11,420 --> 00:23:13,400
Thank you very much.

00:23:13,400 --> 00:23:20,280
[applause]

00:23:25,940 --> 00:23:27,560
Are there any questions?

00:23:27,560 --> 00:23:29,360
(moderator) So hello, we have about five minutes

00:23:29,360 --> 00:23:32,800
for questions; there are two microphones over here.

00:23:43,360 --> 00:23:45,060
(Paulus Schoutsen) In the meanwhile, this is actually

00:23:45,060 --> 00:23:48,400
how Home Assistant looks if you have a full system.

00:23:48,400 --> 00:23:50,500
We can turn things off, you can, like,

00:23:50,500 --> 00:23:54,520
observe your media players, you can do a lot.

00:23:55,600 --> 00:23:58,360
(audience member 1) What did you write the, uh, uh,

00:23:58,360 --> 00:24:00,840
Android component in, Paulus? It’s really nice.

00:24:00,840 --> 00:24:02,860
(Paulus Schoutsen) Um, so it's not an Android component.

00:24:02,860 --> 00:24:06,080
It’s actually a website and it runs Polymer web components.

00:24:06,080 --> 00:24:08,000
(audience member 1) Perfect, thanks, it's just a question.

00:24:08,000 --> 00:24:10,060
(audience member 2) Check one, two, we good?

00:24:11,300 --> 00:24:13,940
OK, I think the mike is working now.

00:24:13,940 --> 00:24:16,620
Right? OK, three really quick questions.

00:24:16,620 --> 00:24:19,300
First one: I noticed that the event bus kind of took a minute

00:24:19,300 --> 00:24:22,700
when you deleted hello and waiting for world to come up.

00:24:22,700 --> 00:24:24,880
Is that because of watchdog or something, or will that happen

00:24:24,890 --> 00:24:26,980
if you flick a switch, that kind of thing?

00:24:26,980 --> 00:24:28,900
Um, because obviously flicking a switch,

00:24:28,900 --> 00:24:30,920
that’d be kind of a long time to wait for lighting.

00:24:30,920 --> 00:24:32,940
Uh, question number two: you were passing around

00:24:32,940 --> 00:24:36,360
an H-A-S-S object in there but it wasn't clear what type

00:24:36,360 --> 00:24:39,560
that object was, so could you tell a little bit about that object?

00:24:39,560 --> 00:24:42,380
And also, would there ever be an occasion practically

00:24:42,380 --> 00:24:44,400
where you'd have more than one of those objects,

00:24:44,400 --> 00:24:46,120
or is it in effect a singleton?

00:24:46,120 --> 00:24:49,100
Question number three: is the home -- the notion of the home

00:24:49,100 --> 00:24:51,160
sort of hardcoded as a location?

00:24:51,160 --> 00:24:53,160
Because I’m working on living on a school bus,

00:24:53,160 --> 00:24:55,740
so is it possible that you could accommodate in your data model

00:24:55,740 --> 00:24:58,800
a home that moves?

00:24:58,800 --> 00:25:01,691
(Paulus Schoutsen) Well, I mean, OK, so the first one,

00:25:01,691 --> 00:25:05,591
the event bus, I forgot your question. But I’ll go on to the second question.

00:25:05,600 --> 00:25:07,680
(audience member 2) The delay -- it took a second from hello,

00:25:07,680 --> 00:25:09,560
deleting hello to get world, remember?

00:25:09,560 --> 00:25:12,160
(Paulus Schoutsen) Uh, yeah, so it's, um . . .

00:25:12,160 --> 00:25:14,680
well, so it's instant like this but it's not instant

00:25:14,690 --> 00:25:18,440
when you remove the file because it is not constantly watching

00:25:18,440 --> 00:25:21,200
the operating system because it's using our update method

00:25:21,200 --> 00:25:26,540
that we defined -- oh -- that we defined earlier in the example.

00:25:26,540 --> 00:25:28,540
(audience member 2) But what if that were a light switch?

00:25:28,540 --> 00:25:30,800
(Paulus Schoutsen) If it was a light switch,

00:25:30,809 --> 00:25:32,869
it all depends on how fast your light can say,

00:25:32,869 --> 00:25:36,589
"Hey, I’m turned on or turned off." And so this depends per implementation.

00:25:36,600 --> 00:25:39,060
So for a bad light switch, we have to be optimistic,

00:25:39,070 --> 00:25:41,080
assuming our command succeeded.

00:25:41,080 --> 00:25:44,280
If it is a LIFX bulb, we actually get the state pushed to us.

00:25:44,280 --> 00:25:46,750
And for you, we just have to say after we send the command,

00:25:46,750 --> 00:25:49,340
"Hey, did the command succeed?"

00:25:49,340 --> 00:25:53,890
The second question was the hass object, which is the Home Assistant instance.

00:25:53,890 --> 00:25:56,380
And this is where you can interact with the service registry,

00:25:56,380 --> 00:25:59,440
the bus, and the state machine.

00:25:59,440 --> 00:26:04,460
And the third, a moving home would also be possible

00:26:04,460 --> 00:26:07,780
because we can like -- we don't right now have for --

00:26:07,780 --> 00:26:09,820
is home-like detection. But you could set up

00:26:09,820 --> 00:26:12,520
a dynamic GPS that you set somewhere

00:26:12,530 --> 00:26:14,810
in your state machine so it should be possible.

00:26:14,810 --> 00:26:17,240
(audience member 2) Thank you.

00:26:17,240 --> 00:26:19,260
(audience member 3) I wasn't here the first talk,

00:26:19,260 --> 00:26:21,200
I was just wondering, have you talked about -- what is --

00:26:21,200 --> 00:26:23,240
what do you use for device-device communication

00:26:23,240 --> 00:26:26,760
in the back end, and also between the hub and the web app?

00:26:26,760 --> 00:26:29,140
(Paulus Schoutsen) So we use for -- the web app currently

00:26:29,140 --> 00:26:33,900
uses event stream, which is a HTML5 JavaScript implementation

00:26:33,900 --> 00:26:36,020
to get all the events into the front end.

00:26:36,020 --> 00:26:38,040
And for device communication, it really depends

00:26:38,040 --> 00:26:40,320
on what the device supports. So for Philips Hue,

00:26:40,320 --> 00:26:42,280
we speak their protocol.

00:26:42,280 --> 00:26:45,670
But so, some -- if there’s an open, like Z-Wave, for example,

00:26:45,670 --> 00:26:48,401
is a home automation standard, so then you have to plug in

00:26:48,401 --> 00:26:51,660
a USB stick that speaks Z-Wave into your computer.

00:26:51,660 --> 00:26:53,520
Home Assistant will connect to that and then can speak

00:26:53,520 --> 00:26:56,880
to the Z-Wave network in whatever language they use.

00:26:58,080 --> 00:27:00,020
(audience member 4) I just had a question that you just

00:27:00,020 --> 00:27:02,080
kind of answered: is there any -- is there any

00:27:02,090 --> 00:27:03,910
recommendation of protocol, of kind of compliance

00:27:03,910 --> 00:27:06,570
that devices should have that would work better for this?

00:27:06,570 --> 00:27:09,940
Or just can -- or each model as I can see can just implement

00:27:09,940 --> 00:27:11,840
the protocol for whatever device I get?

00:27:11,840 --> 00:27:15,260
(Paulus Schoutsen) So you just -- we don't specify any protocol.

00:27:15,260 --> 00:27:17,760
You -- we implement whatever.

00:27:17,770 --> 00:27:21,750
The platforms implement any -- only the protocols that one device

00:27:21,750 --> 00:27:24,350
is speaking because, you know, vendors are not making things

00:27:24,350 --> 00:27:26,450
to integrate with Home Assistant, but we want Home Assistant

00:27:26,450 --> 00:27:28,410
to integrate with vendors.

00:27:28,410 --> 00:27:30,940
(audience member 4) OK, thanks.

00:27:30,940 --> 00:27:32,740
(audience member 5) I’m just wondering how you avoid

00:27:32,740 --> 00:27:36,960
some kind of recursion problem in the xor automation example,

00:27:36,960 --> 00:27:40,590
like when you change hello via the interface

00:27:40,590 --> 00:27:44,770
and your component changes world, what’s to prevent you again responding

00:27:44,770 --> 00:27:46,760
to world changing and going?

00:27:46,760 --> 00:27:49,240
(Paulus Schoutsen) There's nothing preventing you.

00:27:49,240 --> 00:27:52,250
So Home Assistant doesn't know how you're going to handle the event

00:27:52,250 --> 00:27:55,679
or what you're going to call next. It's all within your component.

00:27:55,679 --> 00:27:58,590
So if in my example, I wouldn't have to check

00:27:58,590 --> 00:28:00,660
if they are not -- if they are the same,

00:28:00,660 --> 00:28:04,020
it would indeed lead into recursion and the system crashes.

00:28:06,260 --> 00:28:08,900
(audience member 6) Do you integrate with 1-Wire devices?

00:28:08,900 --> 00:28:10,500
(Paulus Schoutsen) Sorry, which one?

00:28:10,500 --> 00:28:12,220
(audience member 6) 1-Wire.

00:28:12,220 --> 00:28:15,720
(Paulus Schoutsen) 1-Wire, um, yes, I think we have

00:28:15,720 --> 00:28:19,100
a 1-Wire sensor but I’m not 100% sure.

00:28:19,100 --> 00:28:20,700
(audience member) Yes, we do.

00:28:20,700 --> 00:28:22,760
(Paulus Schoutsen) I do, OK, yeah we do.

00:28:22,760 --> 00:28:25,420
(audience member 6) Is it just the temperature sensor?

00:28:25,420 --> 00:28:27,300
(Paulus Schoutsen) Yes, I heard.

00:28:27,310 --> 00:28:30,580
The expert is over there.

00:28:30,580 --> 00:28:33,340
(audience member 7) So what's the recommended approach with --

00:28:33,340 --> 00:28:36,820
for example, I have Arduinos and any moment in time I have

00:28:36,820 --> 00:28:39,940
an X number of sensors throughout my apartment.

00:28:39,940 --> 00:28:43,080
One right now is detecting when my downstairs neighbor

00:28:43,090 --> 00:28:45,770
starts smoking a cigarette and it alerts me.

00:28:45,770 --> 00:28:47,180
(laughter)

00:28:47,180 --> 00:28:49,540
So I'd like to have a light in my Hue turn red

00:28:49,550 --> 00:28:51,590
or a text or something.

00:28:51,590 --> 00:28:52,840
What's the recommended approach with your own --?

00:28:52,840 --> 00:28:56,970
(Paulus Schoutsen) So the easiest way, if like -- so Arduinos,

00:28:56,970 --> 00:29:01,320
I think we have an Arduino USB protocol, so you can actually talk --

00:29:01,320 --> 00:29:03,270
if you connect it to a Raspberry Pi,

00:29:03,270 --> 00:29:05,010
it could talk to the Arduino.

00:29:05,010 --> 00:29:08,070
But a lot of people are switched to the ESP8266 which is

00:29:08,070 --> 00:29:11,660
a microcontroller which includes Wi-Fi and then you can just send

00:29:11,660 --> 00:29:14,220
either a REST call directly to Home Assistant,

00:29:14,220 --> 00:29:18,300
but a lot of people actually use MQTT as a broker intermediate.

00:29:18,300 --> 00:29:20,520
(Paulus Schoutsen) So that other things can also plug in easy.

00:29:20,520 --> 00:29:22,640
(audience member 7) Thank you.

00:29:22,640 --> 00:29:26,240
(audience member 8) Hi, I wanted to know about the Nest integration

00:29:26,240 --> 00:29:32,929
because at some point I wanted to just keep a log, a history

00:29:32,929 --> 00:29:38,160
of the temperature in the home using the Nest as a, you know,

00:29:38,160 --> 00:29:40,320
a measuring device.

00:29:40,320 --> 00:29:44,070
and Nest makes it very hard because you have to go through

00:29:44,070 --> 00:29:47,059
their API certification process and so on, so I was wondering if --

00:29:47,059 --> 00:29:49,970
(Paulus Schoutsen) So that will -- we have a Nest component.

00:29:49,970 --> 00:29:53,090
It integrates Nest, and we record all the temperatures.

00:29:53,090 --> 00:29:55,110
So this is something you can get for free

00:29:55,110 --> 00:29:57,620
if you were to use -- you can also then --

00:29:57,620 --> 00:29:59,440
you don't only have to keep it in Home Assistant.

00:29:59,440 --> 00:30:01,940
We have certain components that actually support it too,

00:30:01,940 --> 00:30:04,620
like Grafana and Splunk.

00:30:04,630 --> 00:30:06,680
So you can have like, analytics engines.

00:30:06,680 --> 00:30:08,760
(audience member 8) Cool, thanks.

00:30:08,760 --> 00:30:10,440
(moderator) I'm sorry, this is all we have time

00:30:10,450 --> 00:30:12,440
for questions. If you have further questions,

00:30:12,440 --> 00:30:14,700
you can talk to the speaker directly.

00:30:14,700 --> 00:30:16,700
Give him a hand again.

00:30:16,700 --> 00:30:18,740
(Paulus Schoutsen) Yeah, or at 5 PM.

00:30:18,740 --> 00:30:22,820

YouTube URL: https://www.youtube.com/watch?v=Cfasc9EgbMU


