Title: A. Jesse Jiryu Davis - Write an Excellent Programming Blog - PyCon 2016
Publication date: 2016-06-01
Playlist: PyCon 2016
Description: 
	Speaker: A. Jesse Jiryu Davis

Writing rewards you and benefits us all: when you write you refine your thinking, share your knowledge, and connect with your niche community. This talk describes the special challenges of writing a programming blog. It outlines solid article structures, and offers methods for generating ideas and writing more skillfully. Get the guidance and inspiration to craft articles of enduring value.

Slides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides
Captions: 
	00:00:00,140 --> 00:00:05,700
A. Jesse Jiryu Davis talking to us about how to write an excellent programming blog.

00:00:05,700 --> 00:00:07,500
Please welcome Jesse to the stage.

00:00:07,500 --> 00:00:13,880
[Applause]

00:00:13,880 --> 00:00:15,320
Thank you.

00:00:15,320 --> 00:00:23,100
I really love being at PyCon because the open source spirit is so alive here.

00:00:23,100 --> 00:00:28,560
There are so many experts who are inspired to share their code.

00:00:28,560 --> 00:00:31,860
But I don't want you to just share your code.

00:00:31,860 --> 00:00:35,370
I want you to share your words too.

00:00:35,370 --> 00:00:38,440
I want you to write an excellent programming blog.

00:00:38,440 --> 00:00:45,180
So, if you're in the room, then, I probably don't need to convince you why writing

00:00:45,180 --> 00:00:47,180
is so important.

00:00:47,180 --> 00:00:52,700
But nevertheless I want to share with you my reasons why I think

00:00:52,700 --> 00:00:55,340
that writing benefits us all.

00:00:55,340 --> 00:00:59,520
So, the main reason is that you're a specialist, right?

00:00:59,540 --> 00:01:08,600
It's a characteristic of being a programmer that we never write exactly the same thing twice.

00:01:08,600 --> 00:01:11,180
So, we're all specialists.

00:01:11,180 --> 00:01:16,020
And you're the preeminent expert in whatever it is you do, right?

00:01:16,020 --> 00:01:22,680
You know how to parse New York City subway schedules or how to do Python development

00:01:22,680 --> 00:01:28,420
without an internet connection or to accommodate a colleague with a disability.

00:01:28,420 --> 00:01:31,540
Like, there's something that you know and I want you to write it

00:01:31,540 --> 00:01:34,500
so that I can learn from you.

00:01:34,500 --> 00:01:42,580
Writing about it will also send up a flare that lets your fellow specialists

00:01:42,580 --> 00:01:45,380
know what you're into.

00:01:45,380 --> 00:01:52,380
And that's great because it allows you to share advice, help each other

00:01:52,380 --> 00:01:58,219
with your specialist problems, and collaborate at the level,

00:01:58,219 --> 00:02:03,170
not of submitting pull requests, but at the level of ideas.

00:02:03,170 --> 00:02:08,720
It's a very effective way to contribute to each other's projects.

00:02:08,720 --> 00:02:14,940
But even if nobody ever reads what you write, writing is still worthwhile

00:02:14,940 --> 00:02:20,260
because writing is thinking, super-powered.

00:02:20,260 --> 00:02:26,510
I use this, like, super-powered thinking when I encounter some problem

00:02:26,510 --> 00:02:30,320
that I'm worried is just going to be too hard for me.

00:02:30,320 --> 00:02:33,940
Like, it's over my head.

00:02:33,940 --> 00:02:38,080
For example, a few years ago, I encountered what looked to me

00:02:38,080 --> 00:02:46,280
like a bug in Python 2.6 where assigning to a threadlocal is not thread safe.

00:02:47,980 --> 00:02:53,460
And that was so mind-blowing to me, and so terrifyingly complex,

00:02:53,460 --> 00:02:56,180
that I knew I wouldn't be able to think it through

00:02:56,180 --> 00:02:58,040
without some sort of help.

00:02:58,040 --> 00:03:04,880
So what I did was, I started writing the story about how I diagnosed this bug.

00:03:07,120 --> 00:03:11,060
So I know that I'm violating a couple of rules of public speaking here

00:03:11,060 --> 00:03:13,800
by showing you a wall of text...

00:03:13,800 --> 00:03:14,600
[Speaker clicks tongue]

00:03:14,600 --> 00:03:16,540
I'm gonna help you with that.

00:03:16,540 --> 00:03:19,020
[Laughter]

00:03:19,020 --> 00:03:23,140
So right, so I started writing this story about how I diagnosed this bug

00:03:23,140 --> 00:03:25,580
before this story was complete.

00:03:25,580 --> 00:03:29,840
I didn't know how it was gonna end.

00:03:29,840 --> 00:03:36,300
But by writing it down as I went, getting my hypotheses onto the page,

00:03:36,300 --> 00:03:42,360
and consolidating my understanding at every stage, I was able, by the time

00:03:42,360 --> 00:03:48,180
I reached the end a few days later, to understand the problem,

00:03:48,180 --> 00:03:53,840
which was indeed a race condition in the Python 2.6 threadlocal implementation

00:03:53,840 --> 00:03:57,840
that causes an intermediate memory leak.

00:03:57,850 --> 00:04:02,260
I had found an easy workaround and I had this kind of nice article

00:04:02,260 --> 00:04:05,200
about this kind of awful bug.

00:04:05,200 --> 00:04:11,060
So, these are the reasons why I think that writing

00:04:11,060 --> 00:04:15,100
benefits us all.

00:04:15,100 --> 00:04:20,220
But there's kind of a problem that we all have.

00:04:20,220 --> 00:04:24,240
Every time I talk to people about writing, it seems they complain about writer's block,

00:04:24,240 --> 00:04:28,180
about not finding the time or not being able to get started.

00:04:28,180 --> 00:04:34,040
And this was true for me as well until a few years ago when I really changed

00:04:34,040 --> 00:04:37,680
how I think about writing and my approach to it.

00:04:37,680 --> 00:04:45,780
And that change in my approach to writing was this breakthrough that's made writing

00:04:45,780 --> 00:04:48,560
prolific and joyful for me.

00:04:48,560 --> 00:04:53,180
And I hope that by the end of this talk you'll understand where I'm coming from

00:04:53,190 --> 00:04:59,160
and you'll be able to have the same joyful parrot leaping out of something experience

00:04:59,160 --> 00:05:02,920
that I did, whatever the heck is going on in that image.

00:05:02,920 --> 00:05:10,060
So, the agenda for today is why, and since I think you're all now convinced,

00:05:11,480 --> 00:05:14,320
the next stage is gonna be what.

00:05:14,320 --> 00:05:16,100
What should you write?

00:05:16,100 --> 00:05:18,480
Who is going to read your writing?

00:05:18,480 --> 00:05:21,080
When will you find the time to write?

00:05:21,080 --> 00:05:26,400
And how do you improve your writing?

00:05:26,400 --> 00:05:31,560
So when I read articles that I really admire, I notice that they tend to fall

00:05:31,560 --> 00:05:35,420
into very roughly five categories.

00:05:35,420 --> 00:05:42,260
And the first of these is stories, the most basic founding form

00:05:42,260 --> 00:05:44,100
of human communication.

00:05:44,100 --> 00:05:46,740
And we know how stories go, right?

00:05:46,740 --> 00:05:48,740
They start with once upon a time.

00:05:48,740 --> 00:05:51,340
Once upon a time, there was a Foo.

00:05:51,340 --> 00:05:53,740
This happened, and then that happened.

00:05:53,740 --> 00:05:55,940
I learned some important lesson.

00:05:55,940 --> 00:05:59,440
And that's the story of Foo.

00:05:59,440 --> 00:06:05,000
When we write stories about programming, there always needs to be a moral to the story,

00:06:05,000 --> 00:06:07,740
some important lesson that you learned.

00:06:07,740 --> 00:06:10,460
That's the value that you're promising your reader

00:06:10,460 --> 00:06:15,900
in exchange for reading your story to the end.

00:06:15,900 --> 00:06:21,680
Quick show of hands, who here has read Glyph's Unyielding?

00:06:21,680 --> 00:06:24,860
I cannot recommend it enough.

00:06:24,860 --> 00:06:32,160
It's famous among the specialty of Python async people.

00:06:32,160 --> 00:06:38,620
So once upon a time, Glyph was writing a text adventure game in multi-threaded Java.

00:06:38,620 --> 00:06:43,320
And because he was using multi-threading, he had bugs.

00:06:43,320 --> 00:06:48,260
And the particular bug that this story's about is where there was a feature in the game,

00:06:48,270 --> 00:06:53,560
a brass cockroach, that players could have in their inventory.

00:06:53,560 --> 00:06:57,390
And on a timer, the cockroach would leap out of your inventory

00:06:57,390 --> 00:06:59,460
and scuttle around the game world.

00:06:59,460 --> 00:07:05,100
But due to a concurrency bug, sometimes it would leave a copy of itself.

00:07:05,100 --> 00:07:11,040
And this led to an exponential multiplication of brass cockroaches that filled

00:07:11,040 --> 00:07:15,100
both the players' inventories and the entire game world.

00:07:15,100 --> 00:07:19,480
Glyph writes that, given that the feeling that this particular narrative feature

00:07:19,490 --> 00:07:26,040
was supposed to inspire was eccentric whimsy, and not existential terror,

00:07:26,050 --> 00:07:29,850
the non-determinism introduced by threads was a serious problem.

00:07:29,850 --> 00:07:30,850
[Laughter]

00:07:30,850 --> 00:07:36,140
So, the lesson is that explicit async code with the yield keyword

00:07:36,140 --> 00:07:41,940
or some other sort of marker is far less prone to race conditions than multi-threading is.

00:07:41,940 --> 00:07:46,980
And there's this appealing and memorable image to go along with it that makes this

00:07:46,980 --> 00:07:53,740
one of the most widely cited blog posts in my little corner of the Python world.

00:07:53,740 --> 00:07:57,340
So this is the kind of story that you might want to write.

00:07:57,340 --> 00:08:00,580
You also might want to write an opinion.

00:08:00,580 --> 00:08:04,640
And opinions, they're structured just like we learned in high school.

00:08:04,640 --> 00:08:07,880
You state your thesis, you back it up with evidence,

00:08:07,880 --> 00:08:14,480
you anticipate likely objections, and then you conclude by restating your thesis.

00:08:14,480 --> 00:08:19,740
The important thing here is, don't go attacking people.

00:08:19,740 --> 00:08:23,080
Don't go saying that stuff is bad, all right?

00:08:23,080 --> 00:08:27,830
Mr. Miyagi says, karate for defense only.

00:08:27,830 --> 00:08:29,240
[Laughter]

00:08:29,240 --> 00:08:31,900
You want to have an interesting and insightful opinion

00:08:31,900 --> 00:08:35,220
that is actually productive for people.

00:08:35,220 --> 00:08:38,160
So a great example of this is Julia Evans'

00:08:38,160 --> 00:08:42,120
"Don't feel guilty about not contributing to open source."

00:08:42,120 --> 00:08:46,600
Julia noticed that there were periods when open source software just works for her.

00:08:46,600 --> 00:08:50,460
She doesn't need to fix bugs or add features to anybody else's project

00:08:50,460 --> 00:08:53,100
in order to be able to use their code.

00:08:53,100 --> 00:08:59,200
And for her, she felt guilty about not making contributions.

00:08:59,200 --> 00:09:04,960
But then she realized that it's when we have our own use cases,

00:09:04,960 --> 00:09:09,300
our own itches to scratch, that we make useful contributions.

00:09:09,300 --> 00:09:13,220
And otherwise, making contributions out of a sense of guilt or obligation

00:09:13,220 --> 00:09:17,620
is typically not as useful.

00:09:17,620 --> 00:09:22,380
So this is an interesting and insightful and productive opinion

00:09:22,380 --> 00:09:25,920
that doesn't hurt anybody's feelings.

00:09:25,920 --> 00:09:31,120
Probably the most common kind of article that we write about programming is,

00:09:31,120 --> 00:09:33,840
we say how to do something.

00:09:33,840 --> 00:09:35,680
And the structure here is very simple.

00:09:35,680 --> 00:09:38,950
You say that doing Foo is important under the given conditions.

00:09:38,950 --> 00:09:41,120
I'm going to show you how to do it.

00:09:41,120 --> 00:09:43,020
You do this, and then you do that.

00:09:43,020 --> 00:09:44,970
There, now I've shown you how to do it.

00:09:44,970 --> 00:09:48,700
You should go out and do Foo.

00:09:48,700 --> 00:09:51,400
You begin with a motivation.

00:09:51,400 --> 00:09:55,480
It's important under these circumstances.

00:09:55,480 --> 00:09:59,080
You want your user to know whether they ought to invest the time

00:09:59,080 --> 00:10:05,540
in learning how to do Foo right upfront so that you can make them a promise to fulfill.

00:10:05,540 --> 00:10:10,240
And this example of a how-to is Kenneth Reitz's article about growing

00:10:10,240 --> 00:10:12,560
open source seeds.

00:10:12,560 --> 00:10:19,400
So, Kenneth is the author of Requests, one of the most popular Python projects.

00:10:19,400 --> 00:10:23,260
And he's writing about how to maintain and nurture

00:10:23,270 --> 00:10:28,860
a very popular project, and be responsive to users

00:10:28,860 --> 00:10:31,020
without burning out.

00:10:31,020 --> 00:10:37,440
He motivates it with an opening anecdote about a Python project that was open sourced

00:10:37,440 --> 00:10:40,840
and then abandoned by Facebook.

00:10:40,840 --> 00:10:43,880
And everybody was mad at them.

00:10:43,880 --> 00:10:46,420
And so this is the cautionary tale.

00:10:46,420 --> 00:10:48,500
This is what you don't want to do.

00:10:48,500 --> 00:10:51,000
You don't want to let your users down.

00:10:51,000 --> 00:10:57,840
And that's the reason why you want to learn the how-to that he presents to you.

00:10:59,280 --> 00:11:04,040
Another thing that we can emulate in Kenneth's article, here,

00:11:04,040 --> 00:11:07,560
it might be a little hard to see, but notice what he calls this.

00:11:07,560 --> 00:11:11,880
He doesn't call this piece of writing a blog post.

00:11:11,880 --> 00:11:15,060
He calls it an essay.

00:11:15,060 --> 00:11:18,740
And I want you to think about what you want as an article or as an essay.

00:11:18,750 --> 00:11:25,440
These words connote deeply thought pieces of writing that have lasting value

00:11:25,440 --> 00:11:29,380
that stands the test of time and continues to pay off for your investment

00:11:29,380 --> 00:11:30,620
for years to come.

00:11:30,620 --> 00:11:34,300
Whereas a blog post, you know, it's ephemeral; it's here today, it's gone tomorrow.

00:11:34,300 --> 00:11:37,900
It's probably not as worth the time that you invested into writing it

00:11:37,900 --> 00:11:40,620
or users' time reading it.

00:11:40,620 --> 00:11:45,740
So write essays and articles, not posts.

00:11:45,740 --> 00:11:51,200
Besides how-to's, there are also articles about how things work.

00:11:51,200 --> 00:11:55,130
I apologize that this is a viper, not a python.

00:11:55,130 --> 00:11:56,120
[Laughter]

00:11:56,120 --> 00:11:59,680
It's the best I could do; forgive me.

00:11:59,680 --> 00:12:03,820
I think that we all sort of have, like, a little bit of engineer in us

00:12:03,820 --> 00:12:06,180
and also a little bit of scientist.

00:12:06,180 --> 00:12:09,840
And engineers, we want to know how to do things.

00:12:09,840 --> 00:12:14,100
But scientists don't need to make things.

00:12:14,100 --> 00:12:17,680
Scientists just want to know how things work.

00:12:17,680 --> 00:12:21,880
Curiosity is motivation enough for the scientist within us.

00:12:21,880 --> 00:12:27,500
So, an article about how something works, it can just start off with,

00:12:27,500 --> 00:12:29,380
do you want to know?

00:12:29,380 --> 00:12:31,540
If you don't, don't read this.

00:12:31,540 --> 00:12:34,760
If you do, I'm going to show you how it's implemented.

00:12:34,760 --> 00:12:37,240
It does this and it does that.

00:12:37,240 --> 00:12:40,280
There, now I've shown you how it works.

00:12:40,280 --> 00:12:44,630
A nice example of this is Allison Kaptur's article

00:12:44,630 --> 00:12:50,140
about syntax warnings and symbol tables in Python.

00:12:50,140 --> 00:12:55,620
She had a student at the Recurse Center, which was called the Hacker School then.

00:12:55,620 --> 00:13:02,880
And the student hit this bug where doing from a module import star

00:13:02,880 --> 00:13:09,400
within a function call would throw this syntax warning.

00:13:09,400 --> 00:13:15,560
And for the engineering side of us, we don't care why this happens

00:13:15,560 --> 00:13:17,180
because the workaround is simple enough.

00:13:17,180 --> 00:13:20,380
You just move that import statement up to the top of the file.

00:13:20,380 --> 00:13:25,400
But for the scientist part of Allison's personality, this wasn't enough.

00:13:25,400 --> 00:13:29,460
She needed to know why this was happening.

00:13:29,460 --> 00:13:35,060
And figuring that out led her to investigate the Python compiler and how it implements

00:13:35,060 --> 00:13:37,640
its scoping rules.

00:13:37,640 --> 00:13:44,720
And explaining this to us, it satisfies the scientist within us.

00:13:45,880 --> 00:13:51,540
The final type of article that you could write is a review.

00:13:51,540 --> 00:13:59,980
Anytime that you read something, read a book, finish playing a video game, see a movie,

00:13:59,980 --> 00:14:03,980
use an application, consider reviewing it.

00:14:03,980 --> 00:14:08,300
And reviews are a little bit dangerous.

00:14:08,300 --> 00:14:12,740
So here's how I recommend you approach them.

00:14:12,740 --> 00:14:15,680
Say that you read or saw or played or used something.

00:14:15,680 --> 00:14:18,300
And describe what it is.

00:14:18,300 --> 00:14:23,680
Describe the experience that you had reading, seeing, playing, or using it.

00:14:23,680 --> 00:14:26,740
You can evaluate, did it have strengths or weaknesses?

00:14:26,740 --> 00:14:31,560
And then in conclusion, tell me what it's good for, right?

00:14:31,570 --> 00:14:34,920
So don't -- this isn't thumbs up, thumbs down,

00:14:34,930 --> 00:14:36,320
you liked it, you didn't like it,

00:14:36,320 --> 00:14:37,980
four outta five stars on Yelp.

00:14:37,980 --> 00:14:40,860
Spend most of your time not evaluating the thing

00:14:40,860 --> 00:14:44,460
you're reviewing but analyzing and describing it.

00:14:44,460 --> 00:14:50,000
That's what's most useful to your readers.

00:14:50,000 --> 00:14:54,420
I promise this is the last time I'm gonna toot my own horn.

00:14:54,420 --> 00:14:55,140
And...

00:14:55,140 --> 00:14:55,800
[Speaker clicks tongue]

00:14:55,800 --> 00:15:01,680
Once again I'm gonna prevent you from reading while I'm talking to you.

00:15:01,680 --> 00:15:04,680
So I wrote this article about this O'Reilly book,

00:15:04,680 --> 00:15:06,280
Building MongoDB Applications

00:15:06,280 --> 00:15:08,320
with Node and Backbone.

00:15:08,320 --> 00:15:15,620
And I tried to make my review very useful to readers of my blog by first describing

00:15:15,620 --> 00:15:17,160
what was in the book.

00:15:17,160 --> 00:15:23,720
It was a chapter by chapter example application built from the ground up using these technologies.

00:15:23,720 --> 00:15:27,980
I described my experience of reading the book as somebody who has certain expertise.

00:15:27,980 --> 00:15:31,860
I know MongoDB well but not Node.

00:15:31,860 --> 00:15:34,750
I thought that the author did have some weaknesses.

00:15:34,750 --> 00:15:41,220
The book had an exception-handling style that I thought was very dangerous.

00:15:41,220 --> 00:15:44,440
But the book also had a lot of strengths.

00:15:44,440 --> 00:15:51,580
It was a very methodical and easy to understand presentation of an example application.

00:15:51,580 --> 00:15:55,480
And in conclusion, if you have the sort of level of expertise

00:15:55,490 --> 00:15:59,480
that I do, this is a good introduction to these technologies.

00:15:59,480 --> 00:16:03,350
So, whenever you review a book or anything else,

00:16:03,350 --> 00:16:04,780
this is the kind of review that I think

00:16:04,780 --> 00:16:09,020
is most useful for your readers.

00:16:09,020 --> 00:16:17,060
So I promised that somehow I would help you to overcome writer's block

00:16:18,000 --> 00:16:19,340
or help you to overcome

00:16:19,340 --> 00:16:22,840
your hesitation or your procrastination about writing.

00:16:22,840 --> 00:16:26,560
And keeping these five kinds of articles in mind

00:16:26,560 --> 00:16:28,500
can really help with that.

00:16:28,500 --> 00:16:31,680
So let's say you have a topic, but you're not sure how to get started.

00:16:31,680 --> 00:16:36,360
You can ask yourself, is your topic best approached as a review

00:16:36,360 --> 00:16:38,960
or a how-to or an opinion piece?

00:16:38,960 --> 00:16:41,940
Then you have a template already set out for you.

00:16:41,940 --> 00:16:46,340
You just need to fill in the blanks and voilà, you have an outline.

00:16:46,340 --> 00:16:50,320
You're already halfway to writing the article.

00:16:50,320 --> 00:16:54,020
On the other hand, if you want to write but you don't have a specific topic

00:16:54,029 --> 00:16:58,120
in mind to choose, you can ask yourself, do you have a story to tell,

00:16:58,120 --> 00:17:02,279
do you have an opinion to argue for, do you have something that you want to explain

00:17:02,280 --> 00:17:04,780
how it works?

00:17:04,780 --> 00:17:09,340
You can use this to brainstorm topics and figure out what most inspires you

00:17:09,340 --> 00:17:14,760
to write about.

00:17:14,760 --> 00:17:16,980
So who's gonna read you?

00:17:16,980 --> 00:17:19,480
How do you find your audience?

00:17:19,480 --> 00:17:25,420
And right off the bat I'm gonna say that this is not about search engine optimization.

00:17:25,420 --> 00:17:29,880
SEO is a set of techniques for competing with people who are writing

00:17:29,880 --> 00:17:32,360
about similar topics for a mass audience.

00:17:32,360 --> 00:17:36,840
And that is the exact opposite of what we are doing when we write.

00:17:36,840 --> 00:17:44,040
We are writing articles about our specialty for an extremely narrow set of readers.

00:17:44,040 --> 00:17:45,840
So they'll find us.

00:17:45,840 --> 00:17:51,290
They subscribe to aggregators like Planet Python.

00:17:51,290 --> 00:17:58,820
So, if you're a Python writer, somebody who writes about Python,

00:17:58,820 --> 00:18:01,480
get your blog aggregated by Planet Python.

00:18:01,480 --> 00:18:08,160
It merges feeds of Python authors into a single feed that Python people read.

00:18:08,160 --> 00:18:10,580
And at the end of this talk, I'll share a link

00:18:10,580 --> 00:18:11,920
that will include instructions

00:18:11,920 --> 00:18:16,060
on how to get your feed included.

00:18:16,060 --> 00:18:19,760
There are planets for many other specialties.

00:18:19,760 --> 00:18:24,920
If you write about NoSQL, or data science, or visualization,

00:18:24,920 --> 00:18:27,800
get aggregated by their planets too.

00:18:27,800 --> 00:18:33,200
There's also all of these weekly emails, Python Weekly, Pycoder's Weekly.

00:18:33,200 --> 00:18:35,940
Their editors are looking for submissions.

00:18:35,940 --> 00:18:38,840
When you publish an article about something they're interested in,

00:18:38,840 --> 00:18:41,700
send them an email and ask to be included.

00:18:41,700 --> 00:18:46,780
If you do this basic legwork, that's really gonna be enough.

00:18:46,780 --> 00:18:52,620
You're writing using the words and phrases that your fellow specialists are searching for.

00:18:52,620 --> 00:18:55,820
And Google was made for exactly this.

00:18:55,820 --> 00:19:01,180
Uh, do not worry; they will find you.

00:19:03,940 --> 00:19:06,000
How do you improve your writing?

00:19:06,000 --> 00:19:11,860
I think this is probably why a lot of us are in this room, right?

00:19:13,780 --> 00:19:17,780
So writing, like any skill, it improves with practice.

00:19:17,780 --> 00:19:20,730
Additionally, you want to read as a writer.

00:19:20,730 --> 00:19:23,809
And get an editor.

00:19:23,809 --> 00:19:31,309
So, I practice by bookmarking the articles by my favorite authors,

00:19:31,309 --> 00:19:32,920
the articles that I admire most.

00:19:32,920 --> 00:19:39,580
And when I write an article, I might try to specifically emulate whatever it was

00:19:39,580 --> 00:19:42,040
that I thought made that article effective, either

00:19:42,040 --> 00:19:44,640
its prose style or some technique of writing

00:19:44,640 --> 00:19:46,940
that I particularly liked.

00:19:46,940 --> 00:19:50,540
And I also read the internet a little bit differently.

00:19:50,540 --> 00:19:55,160
So as people who care about writing, let's promise each other that when we read

00:19:55,160 --> 00:19:59,760
a relevant article, we're actually gonna read it to the end.

00:19:59,760 --> 00:20:05,400
And that's gonna distinguish us from 90% of readers of the internet.

00:20:05,400 --> 00:20:07,880
And don't just skim to the end.

00:20:07,880 --> 00:20:10,320
Actually read the words.

00:20:10,320 --> 00:20:13,880
And when you get to the end, just take a moment to ask yourself,

00:20:13,880 --> 00:20:18,040
was this piece of writing effective or ineffective?

00:20:18,040 --> 00:20:24,800
And either way, how could it be improved?

00:20:24,800 --> 00:20:29,680
And share early drafts with your friends and ask for their critique.

00:20:29,680 --> 00:20:33,420
Pretty early on, you'll discover that some of your friends just say,

00:20:33,420 --> 00:20:36,460
great, good job, I'm proud of you.

00:20:36,460 --> 00:20:41,040
And other friends will provide insightful critiques.

00:20:41,040 --> 00:20:44,340
So you want to keep leaning on the latter.

00:20:44,340 --> 00:20:47,760
And get writing buddies with whom you share drafts

00:20:47,760 --> 00:20:52,920
and share criticism.

00:20:52,920 --> 00:21:00,620
If you, oh right, so I know what's next, making time to write.

00:21:00,620 --> 00:21:02,880
So when are you gonna write?

00:21:02,880 --> 00:21:05,720
People complain about, they have these blog posts

00:21:05,720 --> 00:21:06,740
that they wanna write.

00:21:06,740 --> 00:21:09,840
But they can't make the time for it.

00:21:09,840 --> 00:21:17,040
And I think that this sort of guilt about having ideas but not writing them down

00:21:17,040 --> 00:21:22,040
or having a blog that hasn't been updated in a while, it comes from a misconception

00:21:22,040 --> 00:21:25,360
about what we're doing on the internet.

00:21:25,360 --> 00:21:26,760
We're not Buzzfeed.

00:21:26,760 --> 00:21:32,220
We don't make money off of writing and we're not obliged to come up with a stream

00:21:32,220 --> 00:21:35,020
of constantly new content.

00:21:35,020 --> 00:21:39,000
So just write infrequently.

00:21:39,000 --> 00:21:41,520
Write when you have something to say.

00:21:41,520 --> 00:21:48,380
Write when you're inspired by something that, some discovery you made or something

00:21:48,380 --> 00:21:53,480
that you achieved that is so exciting that you just, you cannot help but share it.

00:21:53,480 --> 00:21:57,770
These are the circumstances under which you will create articles

00:21:57,770 --> 00:22:05,410
that have the greatest value to your readers and which best continue to pay off your investment

00:22:05,410 --> 00:22:07,940
for years to come.

00:22:07,940 --> 00:22:10,060
But if you only write infrequently, how are you

00:22:10,060 --> 00:22:13,840
going to keep your writing muscles toned?

00:22:13,840 --> 00:22:15,570
How are you gonna practice?

00:22:15,570 --> 00:22:19,060
In that case, write short things more often.

00:22:19,060 --> 00:22:22,680
And reviews are particularly great for this because there's always something fresh

00:22:22,680 --> 00:22:24,000
to write about.

00:22:24,000 --> 00:22:29,800
You're finishing a book, whatever it is, maybe you can make a commitment

00:22:29,809 --> 00:22:37,600
that whenever you finish a book, just set aside an hour to write a three-paragraph

00:22:37,600 --> 00:22:39,740
review of the book.

00:22:39,740 --> 00:22:45,340
Doesn't need to be a programming book, although if it is, reading it with the intent

00:22:45,340 --> 00:22:52,540
to review will lead you to pay much closer attention both to its content

00:22:52,540 --> 00:22:55,520
and its style than you would otherwise.

00:22:55,520 --> 00:23:00,580
But whatever kind of book it is, just practice encapsulating your experience

00:23:00,580 --> 00:23:03,980
of reading the book in a few paragraphs.

00:23:03,980 --> 00:23:08,640
This will really kind of keep your muscles in shape.

00:23:08,640 --> 00:23:19,140
So, by changing how you think about your writing and by having ideas about the basic structures

00:23:19,140 --> 00:23:26,560
to choose among, you can become a much more prolific and much more joyful writer

00:23:26,560 --> 00:23:29,640
and a much more powerful communicator.

00:23:29,640 --> 00:23:35,780
And the next level of this is writing together.

00:23:35,780 --> 00:23:40,420
And no, I do not know what is going on in this image.

00:23:40,420 --> 00:23:43,200
[Laughter]

00:23:43,200 --> 00:23:46,000
Ooh -- I, I really don't.

00:23:46,000 --> 00:23:48,360
[Laughter intensifies]

00:23:48,360 --> 00:23:56,500
This year at MongoDB, we created a tech blog where the programmers who work for MongoDB

00:23:56,500 --> 00:24:02,060
can write about our discoveries and our accomplishments and our challenges.

00:24:02,060 --> 00:24:07,060
And I've been editing and writing for the blog

00:24:07,060 --> 00:24:09,140
and soliciting articles.

00:24:09,140 --> 00:24:12,820
So I'll ask friends to write up some cool thing

00:24:12,820 --> 00:24:16,100
that I heard that they were working on.

00:24:16,100 --> 00:24:19,580
It's gotten the word out about what we're doing.

00:24:19,580 --> 00:24:25,560
And it's been a way for me to contribute something to my company and my colleagues

00:24:25,560 --> 00:24:28,960
besides writing code.

00:24:28,960 --> 00:24:33,280
If your company has a tech blog, you should write for it.

00:24:33,280 --> 00:24:35,980
And if your company doesn't have a tech blog yet,

00:24:35,980 --> 00:24:38,100
this is an opportunity for you

00:24:38,100 --> 00:24:45,070
because you can use your passion and skill as a writer to spread the word

00:24:45,070 --> 00:24:48,470
about what's going on at your company and advance your own career

00:24:48,470 --> 00:24:51,760
and raise your own profile.

00:24:51,760 --> 00:24:55,120
Something else I've been doing this year is writing for the PSF blog.

00:24:55,120 --> 00:25:02,240
And that's been a total blast because I stay connected with the community,

00:25:02,240 --> 00:25:11,620
I interview prominent Python people I admire, I keep abreast of the PSF news

00:25:11,620 --> 00:25:15,340
and see how PSF grants are benefiting people.

00:25:15,340 --> 00:25:20,440
It's been a way for me to contribute to the Python ecosystem using words

00:25:20,440 --> 00:25:25,540
and to connect to people much more effectively than I had before.

00:25:25,540 --> 00:25:32,420
So if you're involved in a nonprofit or an open source project or a community,

00:25:32,420 --> 00:25:37,940
think about blogging for and about that community and spreading the word about what's going on.

00:25:37,940 --> 00:25:46,160
That can be a really generous way for you to contribute back.

00:25:46,160 --> 00:25:48,500
So, I promised you a link.

00:25:48,500 --> 00:25:54,840
And here it is, bit.ly/excellent-blog.

00:25:54,840 --> 00:26:03,860
And this links out to all of the articles that I showed you today and a dozen other articles

00:26:03,860 --> 00:26:08,140
that I admire and that you can emulate to improve your writing.

00:26:08,140 --> 00:26:12,680
It also has instructions for how to get aggregated and links to other resources

00:26:12,680 --> 00:26:20,820
for refining your writing and becoming a more powerful communicator.

00:26:20,820 --> 00:26:25,740
So I won't take questions now, but I'll be out in the hallway

00:26:25,740 --> 00:26:30,160
and I look forward to talking with you about writing an excellent programming blog.

00:26:30,160 --> 00:26:32,780
Thank you very much.

00:26:32,780 --> 00:26:39,900

YouTube URL: https://www.youtube.com/watch?v=eHXq-IzlGUE


