Title: Sebastian Vetter - Click: A Pleasure To Write, A Pleasure To Use - PyCon 2016
Publication date: 2016-05-31
Playlist: PyCon 2016
Description: 
	Speaker: Sebastian Vetter

We have a wide variety of packages and modules in Python that help build commandline tools in different ways. One of the more recent contenders is 'click'. It uses a very intuitive approach to create simple CLIs as well as complex ones. In this talk, I will introduce building CLIs with 'click' and illustrate some of its advantages.

Slides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides
Captions: 
	00:00:03,080 --> 00:00:04,860
(host) Good morning everybody,

00:00:04,860 --> 00:00:07,920
and welcome to the Oregon Ballroom 203-204.

00:00:07,920 --> 00:00:10,300
I hope you've been having a great conference so far.

00:00:10,300 --> 00:00:13,020
My name is Peter, and it's my pleasure to introduce to you

00:00:13,030 --> 00:00:14,980
our first speaker of the morning, Sebastian.

00:00:14,980 --> 00:00:16,949
Sebastian will be speaking on

00:00:16,949 --> 00:00:19,309
creating command-line interfaces with Click.

00:00:19,309 --> 00:00:21,689
So, Sebastian, take it away. Thank you.

00:00:21,689 --> 00:00:23,189
[applause]

00:00:23,189 --> 00:00:25,029
(Sebastian Vetter) Hi everyone.

00:00:26,380 --> 00:00:28,460
Thanks for coming out.

00:00:28,460 --> 00:00:31,660
I'll be starting off with --

00:00:31,669 --> 00:00:33,849
I've given a couple of talks before,

00:00:33,849 --> 00:00:36,740
but this is the biggest crowd I've been in front of,

00:00:36,750 --> 00:00:40,090
so I'm a little bit shaky, a little bit nervous.

00:00:40,800 --> 00:00:44,060
I hope I'll get through this and you'll enjoy it

00:00:44,060 --> 00:00:46,000
as much as I'm freaked out.

00:00:46,000 --> 00:00:48,180
[laughter]

00:00:48,580 --> 00:00:52,440
So, quick introduction to myself.

00:00:52,440 --> 00:00:55,520
I'm Sebastian. I live in Vancouver.

00:00:55,530 --> 00:00:58,770
This is my -- oh, interesting.

00:01:01,040 --> 00:01:05,860
Let's see if we can fix that real quick.

00:01:15,820 --> 00:01:17,680
Or maybe not.

00:01:19,240 --> 00:01:22,280
OK, so I'll just go with that.

00:01:22,289 --> 00:01:24,920
I'm a back-end engineer. I work at Mobify.

00:01:24,920 --> 00:01:28,520
And we mostly work with Django.

00:01:28,520 --> 00:01:30,840
We have a couple of Flask apps.

00:01:30,840 --> 00:01:33,400
We also do a lot of JavaScript.

00:01:33,920 --> 00:01:37,840
But my domain is mostly around working with Django projects.

00:01:38,320 --> 00:01:41,440
I'm also one of the organizers of the Python meetup

00:01:41,450 --> 00:01:45,010
and the Django meetup in Vancouver.

00:01:46,560 --> 00:01:48,820
So why am I giving this talk?

00:01:48,820 --> 00:01:51,000
And actually, if you had a chance to see

00:01:51,000 --> 00:01:56,240
either Alex Gaynor or Kate Heddleston and Joyce Jang

00:01:56,249 --> 00:02:01,429
talk yesterday about usable ops and automating of workflows,

00:02:01,429 --> 00:02:04,039
this was sort of a quite a good introduction

00:02:04,039 --> 00:02:07,399
into what I'm trying to tell you today,

00:02:07,399 --> 00:02:11,899
and introduce basically one tool that you can use to achieve that

00:02:11,900 --> 00:02:15,880
is, like, codifying the things that we do

00:02:15,890 --> 00:02:17,990
in our day-to-day lives:

00:02:17,990 --> 00:02:22,430
working, building web applications,

00:02:22,430 --> 00:02:25,310
deploying them to servers, rolling back,

00:02:25,310 --> 00:02:27,330
applying database migrations.

00:02:27,330 --> 00:02:30,180
Things like that are tasks that we have to do

00:02:30,180 --> 00:02:32,700
over and over and over again.

00:02:35,180 --> 00:02:38,380
And they are something that we can document,

00:02:38,380 --> 00:02:43,060
but it's easier to just put it into code and document that code,

00:02:43,060 --> 00:02:45,340
but make it easy for someone to reuse it

00:02:45,340 --> 00:02:48,860
rather than having to go through manual commands.

00:02:49,600 --> 00:02:53,880
So I've always tried to do that sort of codifying of tasks

00:02:53,880 --> 00:02:58,440
that I'm pretty sure I have to do again and again and again.

00:02:58,440 --> 00:03:00,820
And through that, I've come --

00:03:00,820 --> 00:03:02,700
I've looked at a couple of different tools.

00:03:02,700 --> 00:03:05,360
I've looked at tools that come with Python,

00:03:05,360 --> 00:03:09,200
writing scripts just as they are.

00:03:11,640 --> 00:03:14,540
And so I want to share with you a little bit of the experience

00:03:14,540 --> 00:03:17,980
that I've had and the things that I've learned.

00:03:19,160 --> 00:03:22,920
But first, just a really quick terminology thing,

00:03:22,920 --> 00:03:25,760
what I'm going to use throughout the slides.

00:03:25,760 --> 00:03:29,760
When I'm talking about parameters on the command line,

00:03:29,760 --> 00:03:32,440
so we're talking about command line tools,

00:03:32,440 --> 00:03:34,880
and parameters are basically all the things

00:03:34,880 --> 00:03:39,280
that come after the command line tool's name itself.

00:03:39,280 --> 00:03:42,680
And they are separated into arguments and options.

00:03:43,800 --> 00:03:46,080
Arguments are mandatory.

00:03:46,080 --> 00:03:49,080
They are just values that get passed in.

00:03:49,090 --> 00:03:52,420
And like in this example, we have pgclient

00:03:52,420 --> 00:03:55,900
which is a command-line interface to connect to postgres,

00:03:55,900 --> 00:04:02,020
and the argument in this case is a URL-encoded credentials hostname

00:04:02,020 --> 00:04:05,160
for whichever postgres instance I'm going to connect to.

00:04:06,520 --> 00:04:10,560
Options, as the name says, are optional parameters.

00:04:10,560 --> 00:04:12,440
They come in different shapes or form.

00:04:12,450 --> 00:04:17,910
The most common one is having a name and a value attached to it.

00:04:17,910 --> 00:04:22,270
But there is also flags that have an implied value.

00:04:22,270 --> 00:04:26,600
So I have a default, and with using that option name,

00:04:26,600 --> 00:04:30,180
I toggle it on or off depending on what the default is.

00:04:30,180 --> 00:04:32,700
Here are a couple of examples.

00:04:35,020 --> 00:04:38,140
[off-screen speaker inaudible]

00:04:38,140 --> 00:04:39,680
OK.

00:04:39,680 --> 00:04:48,120
[off-screen speaker inaudible]

00:04:51,840 --> 00:05:06,360
[inaudible conversation between Sebastian and tech]

00:05:12,920 --> 00:05:17,340
[applause]

00:05:18,660 --> 00:05:20,200
Yay!

00:05:20,200 --> 00:05:23,000
[applause]

00:05:23,000 --> 00:05:25,060
Sorry about that.

00:05:25,060 --> 00:05:28,740
OK, so, better quality this time.

00:05:30,500 --> 00:05:32,980
So, commands is the other thing

00:05:32,980 --> 00:05:36,100
that I want to define first, or sub-commands.

00:05:36,100 --> 00:05:38,580
One of the great benefits of Click

00:05:38,580 --> 00:05:42,180
is basically nesting of commands,

00:05:42,180 --> 00:05:44,560
providing a little bit modularity

00:05:44,560 --> 00:05:48,320
within the command line interface,

00:05:48,320 --> 00:05:52,480
so that not all the options are at the top level.

00:05:52,480 --> 00:05:55,060
So if you, for example, have done a -help

00:05:55,070 --> 00:05:59,240
on uWSGI, for example, you get pages and pages of options

00:05:59,240 --> 00:06:02,280
that are really confusing, and some of them just apply

00:06:02,280 --> 00:06:07,880
to a subset of other options or things like that.

00:06:07,880 --> 00:06:11,640
So in this case, this tool basically has two commands.

00:06:11,640 --> 00:06:14,740
One is AWS and the other one is instances.

00:06:14,740 --> 00:06:16,700
And then there is options like the region

00:06:16,700 --> 00:06:20,700
that just specifically applies to that AWS command.

00:06:23,140 --> 00:06:26,840
Taking a little step into, like, plain Python,

00:06:26,840 --> 00:06:30,140
we can basically just take a script

00:06:30,150 --> 00:06:34,690
and use it like a bash script but use Python in it,

00:06:34,690 --> 00:06:38,250
and import sys, look at syst.argv,

00:06:38,250 --> 00:06:40,500
and look at what are the arguments.

00:06:40,500 --> 00:06:44,480
Have any arguments been passed to this command-line client?

00:06:44,480 --> 00:06:46,740
And then process them in some way.

00:06:46,740 --> 00:06:49,880
So, pretty straightforward in this case.

00:06:51,400 --> 00:06:55,400
The limitations of that, obviously, are manual parsing.

00:06:55,400 --> 00:06:59,320
I have to either take the approach of, well, this is positional,

00:06:59,320 --> 00:07:04,180
so the first argument is a URL and the second argument is something else.

00:07:04,180 --> 00:07:07,580
Or I have to start implementing parsing of those options

00:07:07,590 --> 00:07:10,530
and flags and things like that.

00:07:11,640 --> 00:07:14,860
Which is a little bit pointless

00:07:14,860 --> 00:07:18,720
because there is enough frameworks that already do that kind of work,

00:07:18,720 --> 00:07:21,830
and there is even stuff in the standard library.

00:07:21,830 --> 00:07:24,260
And then there is input validation.

00:07:24,270 --> 00:07:27,170
To some extent, that's probably something that I have to do anyways,

00:07:27,170 --> 00:07:32,930
but some come in -- come by default in frameworks.

00:07:32,930 --> 00:07:35,830
And then there is help text formatting,

00:07:35,830 --> 00:07:38,800
which would basically be a series of print statements

00:07:38,800 --> 00:07:40,900
or things like that.

00:07:42,320 --> 00:07:45,860
And Python comes with some libraries

00:07:45,870 --> 00:07:49,920
that already allow us to do some of that work.

00:07:49,920 --> 00:07:52,480
So, optparse and argparse are probably things

00:07:52,480 --> 00:07:55,000
that you are all familiar with.

00:07:55,000 --> 00:07:59,820
And one of the other more popular ones is docopt.

00:08:00,460 --> 00:08:03,620
And then there is a whole bunch of, like, smaller tools

00:08:03,620 --> 00:08:06,840
that have their audiences, have specific things

00:08:06,840 --> 00:08:08,980
that they are trying to achieve.

00:08:10,140 --> 00:08:12,820
Looking at optparse, that was part of --

00:08:12,830 --> 00:08:15,270
or is still part of the standard library,

00:08:15,270 --> 00:08:18,850
which was the default for a very long time,

00:08:18,850 --> 00:08:23,850
but now has been deprecated since version 3.2.

00:08:24,480 --> 00:08:27,720
It was basically -- it has an option parser object.

00:08:27,720 --> 00:08:30,560
I can define several options,

00:08:30,560 --> 00:08:35,390
and then internally the parse_args at the bottom of this

00:08:35,390 --> 00:08:38,200
basically extract all those defined options

00:08:38,200 --> 00:08:40,630
and gives me all the remaining arguments

00:08:40,630 --> 00:08:43,370
in a list or a tuple.

00:08:44,120 --> 00:08:46,820
So this is already better. It gives me a little bit of control

00:08:46,820 --> 00:08:49,340
over options.

00:08:49,340 --> 00:08:51,860
But I get the arguments at the end still

00:08:51,860 --> 00:08:55,160
as something that's not necessarily validated.

00:08:56,440 --> 00:09:01,420
Argparse has now -- or is now considered

00:09:01,420 --> 00:09:03,460
the default in the standard library,

00:09:03,460 --> 00:09:06,460
and is supposed to replace optparse.

00:09:07,740 --> 00:09:12,620
It basically doesn't deviate too much from optparse.

00:09:12,620 --> 00:09:15,960
It just gives a little bit more control over arguments

00:09:15,960 --> 00:09:21,120
and allows validation and type

00:09:21,120 --> 00:09:23,500
automatically converting into specific types

00:09:23,500 --> 00:09:27,660
and things like that for options and arguments.

00:09:29,140 --> 00:09:32,500
And then docopt is taking a very different approach to that.

00:09:32,510 --> 00:09:35,690
It takes the documentation-first approach.

00:09:35,690 --> 00:09:39,660
So basically, you're writing the documentation

00:09:39,660 --> 00:09:42,860
for your command-line clients in a doc string.

00:09:42,860 --> 00:09:47,520
And then docopt infers from that what the options are,

00:09:47,520 --> 00:09:50,180
which ones are optional, which ones are mandatory,

00:09:50,180 --> 00:09:53,280
and potentially what kind of types they have.

00:09:54,020 --> 00:09:56,540
Which is definitely a very nice approach

00:09:56,540 --> 00:09:59,620
to writing documentation first,

00:09:59,620 --> 00:10:03,120
and I do encourage taking a look at that.

00:10:05,160 --> 00:10:09,040
What I found a little bit

00:10:09,040 --> 00:10:11,260
more than two years ago with Click,

00:10:11,270 --> 00:10:15,100
as one of the options that sort of resonated with me --

00:10:15,100 --> 00:10:18,000
and I'm not saying that this is the best way of doing it.

00:10:18,000 --> 00:10:20,580
It's probably a pick the tool for the job.

00:10:20,580 --> 00:10:23,020
But I do really enjoy working with it,

00:10:23,020 --> 00:10:26,080
and I've worked -- used it for most of the command-line clients

00:10:26,080 --> 00:10:28,600
that I've written since then.

00:10:29,560 --> 00:10:32,940
It's a small library written by Armin Ronacher,

00:10:32,940 --> 00:10:37,340
who's also the author of Flask and several other tools.

00:10:37,340 --> 00:10:41,300
It's currently in version 6, and you can see the website here

00:10:41,300 --> 00:10:43,260
for documentation.

00:10:44,230 --> 00:10:46,850
I like it because it's very intuitive to work with.

00:10:46,850 --> 00:10:51,350
It's very Pythonic in how to do things.

00:10:51,350 --> 00:10:55,180
It allows the nestability of those commands

00:10:55,190 --> 00:10:57,290
and is very composable,

00:10:57,290 --> 00:11:01,490
and I like it for the handling of inputs and outputs.

00:11:01,490 --> 00:11:04,730
And it has a very good description of "Why Click?",

00:11:04,730 --> 00:11:09,030
looking at other options as well in their documentation.

00:11:09,030 --> 00:11:11,290
These slides will be up on Speaker Deck, by the way,

00:11:11,290 --> 00:11:14,010
so these are all linked through and you can take a look

00:11:14,010 --> 00:11:15,930
if you're interested.

00:11:17,040 --> 00:11:19,080
So what I'm gonna do is, I'm going to take you through

00:11:19,080 --> 00:11:23,200
a little example and step-by-step put together a command-line client

00:11:23,209 --> 00:11:29,209
with Click to give you an idea of what this sort of looks like.

00:11:31,320 --> 00:11:35,360
So the example that I take is buying a bike

00:11:35,360 --> 00:11:37,840
from a site that is not craigslist,

00:11:37,840 --> 00:11:40,940
and you have a search that you put in

00:11:40,950 --> 00:11:44,110
and you get the list of search results.

00:11:44,110 --> 00:11:47,280
But there is no way of, like, getting an email notification

00:11:47,280 --> 00:11:50,860
of what the latest ads were that somebody posted.

00:11:50,860 --> 00:11:54,020
So we write a little tool around that that just takes the URL,

00:11:54,020 --> 00:11:57,680
does some web scraping, extracts the ads,

00:11:57,680 --> 00:12:01,800
caches them, and for all the new ones, sends out an email.

00:12:01,800 --> 00:12:05,020
We don't worry about the implementation of scraping and stuff like that.

00:12:05,020 --> 00:12:08,600
There are a million talks and videos out there

00:12:08,600 --> 00:12:11,440
that cover that to exhaust.

00:12:12,600 --> 00:12:16,460
So, setting up a command-line client in Click is fairly simple.

00:12:16,460 --> 00:12:19,520
All you have to do is pip install click.

00:12:19,520 --> 00:12:22,160
And then there is your project setup,

00:12:22,160 --> 00:12:27,600
which I have a little cookie cutter project for Click

00:12:27,600 --> 00:12:30,640
that I use for all my command-line clients.

00:12:30,640 --> 00:12:35,860
It's opinionated to what I like, but feel free to take a look.

00:12:35,860 --> 00:12:40,200
And I've also put this little example up on Github as well.

00:12:42,180 --> 00:12:45,300
So, the most basic thing that you can do,

00:12:45,300 --> 00:12:49,780
and if you run that cookie cutter template,

00:12:49,780 --> 00:12:52,060
that's actually what you get after you provide

00:12:52,060 --> 00:12:55,240
a couple of names and things like that,

00:12:55,240 --> 00:12:58,760
is our command-line client is called ad_notifier,

00:12:58,760 --> 00:13:03,980
and we run it, and it just prints out "I am the ad_notifier CLI".

00:13:05,500 --> 00:13:09,520
And this is fairly trivial to implement with Click.

00:13:09,520 --> 00:13:12,501
You just do an import of Click,

00:13:12,501 --> 00:13:15,181
and then Click is decorator-based,

00:13:15,181 --> 00:13:19,640
and you just wrap the function that you want to run

00:13:19,649 --> 00:13:22,689
in that decorator and turn it into the command.

00:13:22,689 --> 00:13:26,160
So here we just turn main into the main entry point

00:13:26,160 --> 00:13:30,560
for our command-line client, and whenever we run that,

00:13:30,560 --> 00:13:33,280
it just executes that print statement.

00:13:36,100 --> 00:13:38,100
So, the first thing that we have to do

00:13:38,100 --> 00:13:42,760
for our little example is basically make it possible to add a URL,

00:13:42,760 --> 00:13:46,520
pass that URL into our command-line client.

00:13:46,520 --> 00:13:50,260
In this case, we're basically talking about an argument.

00:13:50,780 --> 00:13:56,140
And so the way we specify arguments is using another decorator

00:13:56,140 --> 00:13:59,280
and say, "This decorator is called URL."

00:13:59,280 --> 00:14:01,160
Click will do some validation.

00:14:01,160 --> 00:14:03,540
In this case, it'll just make sure that it's there

00:14:03,540 --> 00:14:06,940
and that it is a string.

00:14:07,760 --> 00:14:10,580
And then it passes it in as the first argument

00:14:10,580 --> 00:14:14,301
into that function that this decorator wraps.

00:14:14,301 --> 00:14:19,061
And then we can do all of our scraping and all that kind of stuff,

00:14:19,061 --> 00:14:21,981
provide some output, whatever we want to do.

00:14:24,520 --> 00:14:26,760
As I said, this is sort of the example,

00:14:26,760 --> 00:14:30,600
sending out an email, so let's add an email address

00:14:30,600 --> 00:14:34,500
that we can use to actually send the email to.

00:14:34,500 --> 00:14:38,980
And this would basically look a little bit like that.

00:14:38,980 --> 00:14:42,320
--email is the option, and then I specify the email address

00:14:42,320 --> 00:14:45,320
on the command line, and it adds sending out an email

00:14:45,320 --> 00:14:49,120
using an SMTP of some sort.

00:14:50,200 --> 00:14:53,000
So we're looking at options now.

00:14:53,000 --> 00:14:58,540
And again, another decorator that we just add on top of that.

00:14:58,550 --> 00:15:02,950
We specify what the name is of that option,

00:15:02,950 --> 00:15:05,210
and that option gets validated.

00:15:05,210 --> 00:15:09,870
If it's there, it'll get passed in as email into the function,

00:15:09,870 --> 00:15:12,190
and if it's not there, it will be None.

00:15:12,840 --> 00:15:15,040
And there's also a nifty little feature

00:15:15,040 --> 00:15:18,560
for, like, 12-factorizing little tools

00:15:18,560 --> 00:15:21,040
that you run on a server or something like that.

00:15:21,040 --> 00:15:23,420
You can actually not specify it

00:15:23,420 --> 00:15:27,540
and let Click pull it out of an environment variable,

00:15:27,540 --> 00:15:31,500
if that's the kind of thing that you want to do.

00:15:33,280 --> 00:15:37,500
And with that, we have our email notification that we send out,

00:15:37,500 --> 00:15:41,420
but so far we haven't actually done any, like, processing of --

00:15:41,420 --> 00:15:45,020
like, we just send out an email every time that thing runs,

00:15:45,020 --> 00:15:49,560
and it gives us the full list.

00:15:49,560 --> 00:15:52,580
So let's say we have some caching implemented.

00:15:52,580 --> 00:15:56,440
But because we want to run this, testing it a little bit,

00:15:56,440 --> 00:15:59,990
we can add a reset cache flag to just reset that

00:15:59,990 --> 00:16:01,910
and start from scratch.

00:16:03,060 --> 00:16:07,680
So here we get into options as flags,

00:16:07,680 --> 00:16:11,980
and these flags are fairly easy to specify as well.

00:16:11,980 --> 00:16:14,160
Like, it's the same option decorator,

00:16:14,170 --> 00:16:18,400
we just provide the default -- in this case, we make it false.

00:16:18,400 --> 00:16:23,480
And then the is_flag argument that we pass in

00:16:23,480 --> 00:16:25,960
basically turns it into a flag,

00:16:25,960 --> 00:16:30,100
which makes it a toggle and makes it not require a value.

00:16:30,660 --> 00:16:32,660
And with that, we can use that now

00:16:32,670 --> 00:16:36,430
and get, like, either use the cache or we reset the cache.

00:16:38,340 --> 00:16:42,060
But this is a little bit ridiculous because that means I'm running the tool.

00:16:42,060 --> 00:16:45,350
I get sent an email and I probably would be quicker

00:16:45,350 --> 00:16:48,370
just, like, looking at the URL in the first place.

00:16:48,370 --> 00:16:53,990
So, turning this into a periodic task that I can run on the server

00:16:53,990 --> 00:16:57,740
is a good way of saying, like, I want to run this in two ways.

00:16:57,750 --> 00:17:02,880
I want to run this as a periodic task, or I want to run it once

00:17:02,880 --> 00:17:06,860
just, like, locally for testing purposes and stuff like that.

00:17:06,860 --> 00:17:12,000
So this is where the sub-commands and the nesting comes in.

00:17:12,010 --> 00:17:15,089
We have to do a little bit of refactoring for that.

00:17:15,089 --> 00:17:18,329
So the first thing that we do is we take out all the logic

00:17:18,329 --> 00:17:20,569
that we have in our main function,

00:17:20,569 --> 00:17:23,440
and move it out into a separate function.

00:17:23,440 --> 00:17:27,580
Snd then we create something that's called a group.

00:17:27,589 --> 00:17:32,189
We wrap our main entry point into the command-line client in a group,

00:17:32,189 --> 00:17:35,589
and then we can create a new function,

00:17:35,589 --> 00:17:38,480
and this is basically the command that will be exposed

00:17:38,480 --> 00:17:40,410
on the command-line client.

00:17:40,410 --> 00:17:43,710
We call that, run once in our case,

00:17:43,710 --> 00:17:48,040
and then we use, instead of click.command, we use main.command,

00:17:48,040 --> 00:17:51,960
the group that we used in the previous slide,

00:17:51,960 --> 00:17:56,360
and create that first level of nesting.

00:17:56,370 --> 00:17:59,910
So this is now a sub-command,

00:17:59,910 --> 00:18:04,100
and as you saw here, the way we would call that is

00:18:04,100 --> 00:18:06,940
we pass in the URL as the first argument,

00:18:06,940 --> 00:18:09,740
and then specify either run once

00:18:09,750 --> 00:18:13,430
or run periodically as our two commands.

00:18:15,380 --> 00:18:18,320
And then for our periodic task,

00:18:18,330 --> 00:18:20,910
we potentially have an additional option

00:18:20,910 --> 00:18:24,130
that's, like, run every five minutes,

00:18:24,130 --> 00:18:27,340
that gives us a little bit of control of the frequency.

00:18:27,340 --> 00:18:31,260
And then we use, like, a little scheduler that runs our task.

00:18:31,260 --> 00:18:33,700
And that's basically it.

00:18:35,340 --> 00:18:38,840
What you might have seen there is,

00:18:38,840 --> 00:18:42,890
we have the arguments and options

00:18:42,890 --> 00:18:46,030
on both of those nested commands,

00:18:46,030 --> 00:18:48,380
which obviously isn't the driest way

00:18:48,380 --> 00:18:50,320
of actually handling this.

00:18:51,000 --> 00:18:56,040
So there is a very nice feature that is global, using global settings,

00:18:56,040 --> 00:18:59,440
or what they are called in Click, context.

00:19:00,040 --> 00:19:02,860
And so, looking at this,

00:19:02,860 --> 00:19:06,059
we can basically move our options and arguments

00:19:06,059 --> 00:19:11,080
onto the group definition of our command-line client

00:19:11,080 --> 00:19:14,920
rather than have it duplicated on the nested commands.

00:19:14,920 --> 00:19:17,320
And then from there, use a little feature

00:19:17,320 --> 00:19:19,780
called pass context,

00:19:19,780 --> 00:19:24,600
which -- internally Click is using context for every command that's run.

00:19:24,600 --> 00:19:26,880
So we've used contexts before,

00:19:26,880 --> 00:19:31,880
but they are never really apparent to us unless we want to see them.

00:19:31,880 --> 00:19:34,320
And with this pass context,

00:19:34,320 --> 00:19:39,760
we get, as the first argument to our function, the context passed.

00:19:39,760 --> 00:19:42,290
And we can then use that context,

00:19:42,290 --> 00:19:46,010
which has a special attribute obj,

00:19:46,010 --> 00:19:49,380
we can use that to add custom objects,

00:19:49,380 --> 00:19:52,140
or in our case, a dictionary to it,

00:19:52,140 --> 00:19:56,840
and then pass this into our children or sub0commands.

00:19:57,580 --> 00:20:00,260
So doing it this way basically means

00:20:00,260 --> 00:20:04,980
specifying pass context on our sub-command,

00:20:04,980 --> 00:20:08,780
will give us access to that context object

00:20:08,789 --> 00:20:11,609
and we can just take out that dictionary,

00:20:11,609 --> 00:20:16,949
and in this case just forward it into our process URL.

00:20:19,960 --> 00:20:24,200
And this basically then also simplifies

00:20:24,200 --> 00:20:28,000
the schedule sub-command,

00:20:28,000 --> 00:20:31,260
where we have our periodic task in our scheduler,

00:20:31,260 --> 00:20:34,420
and we can use the same thing. We don't have to replicate it.

00:20:34,420 --> 00:20:37,180
It just makes it a lot easier.

00:20:38,900 --> 00:20:41,700
And one thing that I haven't touched on yet

00:20:41,710 --> 00:20:43,750
is the documentation of this.

00:20:43,750 --> 00:20:49,260
So let's assume we want somebody to use that that tool

00:20:49,270 --> 00:20:52,190
other than me who wrote it.

00:20:52,190 --> 00:20:54,120
Obviously we want some documentation.

00:20:54,130 --> 00:20:56,210
What are the inputs that are required?

00:20:56,210 --> 00:20:59,890
What is the text that I'm looking for?

00:21:01,340 --> 00:21:04,620
So here we look at -- this is basically just what comes out

00:21:04,620 --> 00:21:09,100
if I forget to pass in the argument, which is mandatory.

00:21:09,100 --> 00:21:10,960
And...

00:21:13,720 --> 00:21:15,580
Give me a second.

00:21:21,860 --> 00:21:24,520
So basically, if I --

00:21:24,520 --> 00:21:27,020
This is without specifying an argument.

00:21:27,020 --> 00:21:31,260
It just assumes I don't really know what I'm doing or how this works.

00:21:31,260 --> 00:21:34,090
So it's printing out a very sort of familiar-looking

00:21:34,090 --> 00:21:37,710
command-line client documentation.

00:21:38,180 --> 00:21:43,280
And we can basically -- the "check pinkbike ads for URLs"

00:21:43,280 --> 00:21:45,400
are just things that are taken

00:21:45,400 --> 00:21:51,000
from our function.

00:21:51,000 --> 00:21:53,900
So this is just a doc string that gets parsed

00:21:53,910 --> 00:21:58,230
and then added on top of my command-line client

00:21:58,230 --> 00:22:00,510
for the group that we have.

00:22:00,510 --> 00:22:04,410
And then for all the sub-commands, correspondingly I can just, like,

00:22:04,410 --> 00:22:11,880
define those doc strings and get the same description.

00:22:11,880 --> 00:22:14,700
So if we look back at this,

00:22:14,700 --> 00:22:17,860
down there you can see the commands that are available

00:22:17,870 --> 00:22:20,130
and their documentation and they are basically

00:22:20,130 --> 00:22:23,230
in the doc strings of those functions.

00:22:23,230 --> 00:22:26,669
And then we have, for the options and the flags,

00:22:26,669 --> 00:22:32,241
we basically can use help= argument

00:22:32,241 --> 00:22:35,110
that we passed to that decorator

00:22:35,110 --> 00:22:39,070
to specify a little help text that makes it easier

00:22:39,070 --> 00:22:42,590
for the user to understand, which is fairly similar

00:22:42,590 --> 00:22:46,050
to what optparse and argparse are doing as well.

00:22:48,140 --> 00:22:50,960
And with that,

00:22:50,970 --> 00:22:54,350
I hope that illustrated a little bit how easy it is

00:22:54,350 --> 00:22:58,510
with Click to actually write command-line clients.

00:22:58,510 --> 00:23:01,480
And from my perspective, the decorator approach

00:23:01,480 --> 00:23:07,220
is something that I find really intuitive and really easy to use.

00:23:07,220 --> 00:23:11,020
And the nesting of groups is something that

00:23:11,020 --> 00:23:14,000
has helped me sort of build up more complex clients

00:23:14,000 --> 00:23:19,380
that have different functionality but can be shipped as a single command,

00:23:19,380 --> 00:23:22,120
where I only have to remember that one command

00:23:22,130 --> 00:23:26,970
and not have, like, five different command-line clients that I package up.

00:23:28,080 --> 00:23:32,500
And then there is easy validation of inputs,

00:23:32,500 --> 00:23:36,280
in terms of making sure that, like,

00:23:36,280 --> 00:23:40,640
options that are options are getting validated,

00:23:40,640 --> 00:23:44,980
that flags are parsed in the right way,

00:23:44,980 --> 00:23:47,280
and there is also a couple of things

00:23:47,289 --> 00:23:49,860
on top of that like parameter types

00:23:49,860 --> 00:23:52,880
that I didn't really have the time to go into

00:23:52,880 --> 00:23:55,490
that allow specific -- more specific parsing

00:23:55,490 --> 00:23:58,630
of the types of an input.

00:23:58,630 --> 00:24:01,320
So I can specify, "This has to be an integer,"

00:24:01,320 --> 00:24:05,260
and if that validation fails, then...

00:24:07,500 --> 00:24:10,960
...instead of accepting that, and I have to handle it manually,

00:24:10,960 --> 00:24:14,830
I immediately get feedback from Click as a user

00:24:14,830 --> 00:24:17,090
saying this is the wrong type.

00:24:18,040 --> 00:24:22,360
There is also a way of specifying parameter types,

00:24:22,360 --> 00:24:24,180
custom parameter types.

00:24:24,180 --> 00:24:28,660
So it's definitely worth a look at the documentation,

00:24:28,660 --> 00:24:32,840
looking at environment variables, as I showed briefly,

00:24:32,840 --> 00:24:35,180
looking at parameter types.

00:24:35,180 --> 00:24:37,220
Click comes with a testing framework

00:24:37,220 --> 00:24:39,840
that doesn't really cover unit testing,

00:24:39,840 --> 00:24:43,080
but actually covers the testing and execution

00:24:43,080 --> 00:24:45,940
of the entire pipeline through Click.

00:24:45,940 --> 00:24:50,040
And then it comes with bash auto-completion,

00:24:50,040 --> 00:24:53,940
which might not be that necessary for your use cases,

00:24:53,940 --> 00:24:58,100
but it's definitely a nifty little feature.

00:24:58,100 --> 00:25:02,720
And with that, I'm going to open it up for questions.

00:25:02,720 --> 00:25:09,940
[applause]

00:25:09,940 --> 00:25:11,540
(Peter) Thank you very much, Sebastian.

00:25:11,540 --> 00:25:13,440
We have time for a few minutes' worth of questions.

00:25:13,440 --> 00:25:15,120
There are two microphones set up

00:25:15,120 --> 00:25:17,020
if you would like to make your way there.

00:25:17,020 --> 00:25:18,820
And let's please remember what Brandon Rhodes,

00:25:18,820 --> 00:25:21,900
our illustrious chair, said: please form your question --

00:25:21,900 --> 00:25:24,640
phrase your question in the form of a question.

00:25:24,640 --> 00:25:27,400
So let's start over here on my right. Thank you.

00:25:27,400 --> 00:25:29,260
(audience member) What's gained with using

00:25:29,260 --> 00:25:33,080
that inbuilt scheduler versus Cron?

00:25:34,880 --> 00:25:37,440
(Sebastian Vetter) So, one of the reasons I've started

00:25:37,440 --> 00:25:40,820
doing some of these things is,

00:25:40,820 --> 00:25:43,760
we are using docker in a production environment.

00:25:43,760 --> 00:25:46,820
And especially when you're looking at certain providers

00:25:46,820 --> 00:25:49,720
that give you hosted solutions,

00:25:49,720 --> 00:25:53,620
you don't have access, or you can't run them as root.

00:25:53,620 --> 00:25:57,880
So, setting something like Cron up inside a docker container

00:25:57,880 --> 00:26:01,480
can turn into a little bit of a difficult task

00:26:01,480 --> 00:26:03,720
because of permissions and assumptions.

00:26:03,720 --> 00:26:06,740
So for things like that, a scheduler might be

00:26:06,740 --> 00:26:09,560
the easier way of doing that.

00:26:09,560 --> 00:26:14,419
But it's obviously an option to just, like, have it run one time

00:26:14,419 --> 00:26:17,739
and execute in Cron.

00:26:17,740 --> 00:26:21,620
For me it was merely to illustrate the nesting of commands

00:26:21,620 --> 00:26:23,820
in Click, in this case.

00:26:25,960 --> 00:26:28,680
(audience member) Hi, I'm running a victim support group

00:26:28,680 --> 00:26:33,820
for people who have used the built-in argument parsers.

00:26:33,820 --> 00:26:36,060
[laughs]

00:26:36,060 --> 00:26:40,360
I noticed you began your talk talking about docopt,

00:26:40,370 --> 00:26:42,740
which is really nice, but then you sort of

00:26:42,740 --> 00:26:45,680
didn't really give an example of how to put --

00:26:45,680 --> 00:26:49,660
how docopt was gonna work with Click, and so I'm gonna ask you,

00:26:49,660 --> 00:26:52,240
can you just kind of illustrate that?

00:26:52,240 --> 00:26:57,080
Because I've become a big docopt fan. Wow.

00:26:57,080 --> 00:26:59,520
(Sebastian Vetter) Um, can you -- when you say

00:26:59,520 --> 00:27:02,120
"illustrate," what exactly?

00:27:02,120 --> 00:27:04,200
(audience member) In other words, with docopt,

00:27:04,200 --> 00:27:07,840
you're using the first doc string

00:27:07,840 --> 00:27:11,440
as your argument, you know,

00:27:11,440 --> 00:27:15,340
[indistinct] and it parses it and hands you back a dictionary

00:27:15,350 --> 00:27:18,660
with all the cool responses of the user

00:27:18,660 --> 00:27:21,080
at the time of the instance,

00:27:21,090 --> 00:27:23,470
at the time you ran the command line.

00:27:23,470 --> 00:27:29,080
And I was wondering how that kind of dances with Click,

00:27:29,080 --> 00:27:32,080
do you understand? That seemed like a really very --

00:27:32,080 --> 00:27:34,760
You're using your own doc strings

00:27:34,760 --> 00:27:39,060
within your various sub-functions, which was kind of cool.

00:27:39,060 --> 00:27:42,280
(Sebastian Vetter) Yeah, I mean, Click uses doc strings

00:27:42,280 --> 00:27:45,779
to extract help text for itself.

00:27:45,779 --> 00:27:50,259
I actually have no idea whether docopt and Click play nice together

00:27:50,260 --> 00:27:52,840
or, like, conflict in any way.

00:27:54,680 --> 00:27:57,080
There is obviously ways of documenting

00:27:57,080 --> 00:28:01,400
in a similar style to docopt with Click,

00:28:01,400 --> 00:28:05,580
but Click provides all of that formatted output for you

00:28:05,580 --> 00:28:09,560
by specifying the arguments and the options in your decorator.

00:28:09,570 --> 00:28:13,770
And there is a lot of granularity that you can go into.

00:28:13,770 --> 00:28:16,720
And then it generates documentation from that.

00:28:16,720 --> 00:28:20,400
So it's basically a different approach

00:28:20,400 --> 00:28:23,420
to writing your command-line client.

00:28:23,420 --> 00:28:27,080
One is, from documentation, you infer the validation,

00:28:27,090 --> 00:28:30,730
and in the other one, you basically define

00:28:30,730 --> 00:28:34,340
what you want to have validated, and then generate documentation from that.

00:28:34,340 --> 00:28:36,220
(audience member) In your experience, has there been

00:28:36,220 --> 00:28:38,960
a collision between when you do an include of docopt

00:28:38,960 --> 00:28:42,400
and you do an include of Click and then go at it,

00:28:42,400 --> 00:28:45,700
have they played relatively well together?

00:28:45,700 --> 00:28:48,020
(Sebastian Vetter) I haven't done anything like that

00:28:48,020 --> 00:28:49,860
(audience member) Thank you.

00:28:54,300 --> 00:28:57,340
(audience member) Hi. I was just wondering,

00:28:57,340 --> 00:29:00,760
do you have any suggestions on --

00:29:00,760 --> 00:29:04,160
or knowledge on what sort of things it would take

00:29:04,161 --> 00:29:09,280
to switch from using argparse to Click or something?

00:29:09,280 --> 00:29:11,980
Because I have a monolithic argparse program.

00:29:11,980 --> 00:29:13,700
[laughs]

00:29:14,560 --> 00:29:16,440
(Sebastian Vetter) That's a good question.

00:29:16,450 --> 00:29:19,570
I don't really have experience in the sense that, like,

00:29:19,570 --> 00:29:22,800
I had an undertaking like that. Most of the scripts that I've written

00:29:22,800 --> 00:29:26,580
started out as, like, small scripts of, like, two, three functions,

00:29:26,580 --> 00:29:30,580
and then went from that to become a little bit more.

00:29:30,580 --> 00:29:33,340
But the ones that I've written so far

00:29:33,340 --> 00:29:37,040
have still been very small and contained.

00:29:39,280 --> 00:29:42,740
I think there might be a way of, like, maybe taking

00:29:42,740 --> 00:29:47,480
a couple of specific parts out of it,

00:29:47,480 --> 00:29:51,160
off the existing monolith, and move them over.

00:29:51,160 --> 00:29:54,130
Like, taking one group of functionality

00:29:54,130 --> 00:29:57,170
and start it off as a group of commands,

00:29:57,170 --> 00:30:02,020
and then basically start adding more and more nested commands to it

00:30:02,020 --> 00:30:04,100
from that monolith.

00:30:04,840 --> 00:30:08,080
That would be something that might be a way of doing it

00:30:08,080 --> 00:30:10,020
in a step-by-step process

00:30:10,020 --> 00:30:13,860
and documenting how to move forward from that.

00:30:13,860 --> 00:30:15,740
(audience member) Thank you.

00:30:15,740 --> 00:30:17,580
(Peter) I think we have to end it there,

00:30:17,580 --> 00:30:19,780
but let's give Sebastian another round of applause.

00:30:19,780 --> 00:30:21,940
[applause]

00:30:21,940 --> 00:30:23,700

YouTube URL: https://www.youtube.com/watch?v=SDyHLG2ltSY


