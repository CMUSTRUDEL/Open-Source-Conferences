Title: Marko Samastur - Publish your code so others can use it in 5 easy steps - PyCon 2016
Publication date: 2016-06-17
Playlist: PyCon 2016
Description: 
	"Speaker: Marko Samastur

As developers we all love well-documented, well-tested packages. If we do the same for our code it is easier for others to re-use our hard work, and maybe even contribute. We will take a quick look on how to do this using popular tools and only a small investment of time. With Github and some simple tools, setting up a well-groomed package doesn't have to be difficult.

Slides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"
Captions: 
	00:00:00,000 --> 00:00:04,920
[applause]

00:00:06,320 --> 00:00:07,880
Thank you.

00:00:07,880 --> 00:00:12,060
So hi, I'm Marko Samastur and I've been --

00:00:12,060 --> 00:00:14,600
I'm an independent -- OK, sorry.

00:00:14,600 --> 00:00:17,820
I'm an independent software developer who has been using Python for 20 years

00:00:17,820 --> 00:00:22,280
but this is my first PyCon, and it's great to be here.

00:00:22,280 --> 00:00:26,980
So before I start with the meat of this talk,

00:00:26,980 --> 00:00:31,720
I would like to say that this talk is being recorded,

00:00:31,720 --> 00:00:35,320
slides will be published, as well as the code at that URL,

00:00:35,320 --> 00:00:38,800
and some additional resources which we'll probably not have time

00:00:38,800 --> 00:00:41,540
to discuss in detail.

00:00:41,540 --> 00:00:47,739
And this talk is about my experience publishing packages,

00:00:47,739 --> 00:00:50,879
the process, the tools, the services that I use.

00:00:50,880 --> 00:00:55,460
And they work well for me, and I hope they will work well for you as well.

00:00:55,460 --> 00:00:59,040
But if they don't, they're easy to modify, so it shouldn't be a problem.

00:00:59,040 --> 00:01:03,960
And we will be looking at a pure Python package.

00:01:03,960 --> 00:01:07,700
Because of simplicity, we don't really have time

00:01:07,700 --> 00:01:10,880
for anything more complicated, and because like most developers,

00:01:10,880 --> 00:01:13,900
I learn about packaging only slightly more than I need to.

00:01:13,900 --> 00:01:18,320
So, the pure Python package that we will be working with

00:01:18,330 --> 00:01:21,090
is a fake one called PyStart,

00:01:21,090 --> 00:01:25,030
and first let's start with the code layout.

00:01:25,720 --> 00:01:29,960
So the first thing that every package needs

00:01:29,960 --> 00:01:32,310
is a setup.py configuration file

00:01:32,310 --> 00:01:35,680
that goes into root directory of repository.

00:01:35,680 --> 00:01:39,640
It also needs to have code stored somewhere.

00:01:39,640 --> 00:01:44,140
I tend to use the same name that I want to import.

00:01:44,140 --> 00:01:47,800
So if I want to use an import statement pystart,

00:01:47,800 --> 00:01:51,740
I would use pystart as a directory name.

00:01:51,740 --> 00:01:53,580
Probably you don't have to do this,

00:01:53,580 --> 00:01:56,100
but why complicate it if you don't have to?

00:01:56,100 --> 00:02:01,880
I also like to create two additional directories

00:02:01,880 --> 00:02:03,700
as a separate one on the top level,

00:02:03,700 --> 00:02:06,740
one for tests and one for documentation,

00:02:06,740 --> 00:02:10,020
so they are easy to find if needed and it's also easy

00:02:10,030 --> 00:02:13,510
to include or exclude them into the package itself.

00:02:13,510 --> 00:02:16,560
So the next thing is...

00:02:16,560 --> 00:02:20,200
So, as I mentioned, setup.py is the configuration file

00:02:20,200 --> 00:02:24,940
of every package, and it consists of two parts.

00:02:24,940 --> 00:02:29,140
One is metadata and the other one is packaging info

00:02:29,140 --> 00:02:34,040
required for the package to be built

00:02:34,040 --> 00:02:36,540
and to be able to install it.

00:02:36,540 --> 00:02:41,020
So metadata itself is very straightforward, obvious what it does.

00:02:41,020 --> 00:02:43,940
So you have an author, you have a name of the package,

00:02:43,940 --> 00:02:47,360
description, and a few other bits

00:02:47,360 --> 00:02:51,920
that I think are in general self-explanatory, so let's not try to --

00:02:51,920 --> 00:02:55,020
let's not spend too much time on them.

00:02:55,020 --> 00:02:58,040
But I would like to point out a couple of things.

00:02:58,040 --> 00:03:03,740
One is that if you store your code

00:03:03,750 --> 00:03:07,269
on a public repository like GitHub,

00:03:07,269 --> 00:03:10,349
then it makes sense to also store description

00:03:10,349 --> 00:03:14,440
in a separate file, because this way you can reuse it

00:03:14,440 --> 00:03:17,900
on GitHub and on PyPI.

00:03:17,900 --> 00:03:20,820
And while GitHub itself doesn't really care all that much

00:03:20,820 --> 00:03:24,000
about formats -- it supports, I think, about nine of them --

00:03:24,000 --> 00:03:29,400
PyPI does use reStructuredText for your description file.

00:03:29,400 --> 00:03:33,040
The other thing to pay attention to are also the classifiers

00:03:33,040 --> 00:03:35,720
which are at the bottom of the screen.

00:03:35,720 --> 00:03:39,159
And those classifiers that are in a format

00:03:39,160 --> 00:03:42,960
that can be easily processed by code.

00:03:42,960 --> 00:03:47,620
Also something we developers use when we look for packages

00:03:47,620 --> 00:03:49,550
that are interesting to us.

00:03:49,550 --> 00:03:53,510
So make sure to pick relevant ones

00:03:53,510 --> 00:03:57,220
and to update them as needed when new Python versions come out

00:03:57,220 --> 00:04:03,380
or a package which is the next level of maturity.

00:04:03,380 --> 00:04:05,739
Well, there's another one thing I almost forgot,

00:04:05,739 --> 00:04:10,819
which is a license, and do pick one, because since Berne Convention,

00:04:10,820 --> 00:04:13,620
every code is automatically copyrighted,

00:04:13,620 --> 00:04:15,790
and that effectively means it's copy locked.

00:04:15,790 --> 00:04:20,220
So nobody can do anything meaningful with it

00:04:20,220 --> 00:04:23,060
except you until you pick a license.

00:04:23,060 --> 00:04:24,960
If you want to discuss more about licenses

00:04:24,960 --> 00:04:27,580
with somebody who has no legal training whatsoever,

00:04:27,580 --> 00:04:30,200
talk to me later.

00:04:30,200 --> 00:04:32,560
Or better yet, wait for the next talk

00:04:32,560 --> 00:04:36,140
when Felix Crux will tell all about them.

00:04:36,140 --> 00:04:40,500
So, once we have metadata section done, covered,

00:04:40,500 --> 00:04:42,740
we need to set up the package itself.

00:04:42,740 --> 00:04:46,339
And in certain cases, this is all you need.

00:04:46,339 --> 00:04:50,919
So the packages option specifies where to find code,

00:04:50,920 --> 00:04:54,800
and in this particular case, since we at the beginning said

00:04:54,800 --> 00:04:58,060
that we will store code in pystart directory,

00:04:58,060 --> 00:05:02,360
we only need to list pystart as a relative path to that code.

00:05:02,840 --> 00:05:07,260
Now, most packages actually need, I think --

00:05:07,260 --> 00:05:12,380
have some external dependencies beyond standard library of Python.

00:05:12,380 --> 00:05:17,620
And for them, we also need to include those dependencies

00:05:17,629 --> 00:05:20,469
so that it will be installed before our package

00:05:20,469 --> 00:05:23,069
and that installation will not be broken.

00:05:23,069 --> 00:05:26,940
And so install required is the section where we list those packages.

00:05:26,940 --> 00:05:32,800
We use names that are used on PyPI together with version numbers.

00:05:32,800 --> 00:05:36,339
It's a good idea in general to limit those version numbers

00:05:36,339 --> 00:05:40,879
so that it will automatically pick up bug fix releases

00:05:40,879 --> 00:05:44,659
but won't be too liberal because every now and then

00:05:44,659 --> 00:05:48,839
packages do introduce backwards incompatible changes

00:05:48,840 --> 00:05:51,340
and your package might break.

00:05:51,960 --> 00:05:58,120
So at this point what we have is a package that can be installed,

00:05:58,120 --> 00:06:01,080
it can be built, it can be installed locally,

00:06:01,080 --> 00:06:05,480
but we have no idea if it's -- if it works yet.

00:06:05,480 --> 00:06:08,220
And for that, we need to do some testing.

00:06:08,220 --> 00:06:13,220
And while we could do -- while we could perform manual tests,

00:06:13,229 --> 00:06:16,419
it's in general a better idea to write executable tests

00:06:16,419 --> 00:06:19,830
that you can then run at any time,

00:06:19,830 --> 00:06:21,740
as it is far more likely that you will do so

00:06:21,740 --> 00:06:25,819
and also you're able then to exp--

00:06:25,819 --> 00:06:27,819
to expand your test suite over time

00:06:27,819 --> 00:06:32,579
with tests from the bug fixes and things like that.

00:06:34,580 --> 00:06:39,820
Python itself already comes with a testing framework called unittest,

00:06:39,820 --> 00:06:43,600
but if you haven't invested yourself in one yet,

00:06:43,600 --> 00:06:46,180
I would recommend to look at Pytest,

00:06:46,180 --> 00:06:50,120
which is an extremely powerful and flexible framework.

00:06:50,760 --> 00:06:55,860
And so to get it running, all you need to do is install it

00:06:55,860 --> 00:07:00,180
with pip install Pytest and then execute it,

00:07:00,180 --> 00:07:04,740
and once you have a few tests written, you'll get a display like this.

00:07:04,740 --> 00:07:07,860
Pytest itself will find tests almost everywhere.

00:07:07,869 --> 00:07:15,669
So as long as you have a file that starts with or ends with "test_"

00:07:15,669 --> 00:07:19,860
and includes functions that start with "test_",

00:07:19,860 --> 00:07:23,900
those of you already recognize this valid test.

00:07:23,900 --> 00:07:28,460
So at this point, we have, I guess,

00:07:28,470 --> 00:07:30,840
a package that can be installed locally

00:07:30,840 --> 00:07:33,909
and that has some tests that we can use

00:07:33,909 --> 00:07:37,110
to make sure that everything works fine.

00:07:37,110 --> 00:07:40,669
Now, most packages we probably don't write

00:07:40,669 --> 00:07:44,429
to work with just one Python interpreter version.

00:07:44,429 --> 00:07:48,609
We want our package to work with several.

00:07:48,609 --> 00:07:51,480
And to make sure that this is actually true,

00:07:51,490 --> 00:07:55,050
we need to test with all these interpreters.

00:07:55,050 --> 00:07:59,610
And for this, we can use a tool called Tox.

00:08:00,249 --> 00:08:05,439
So if you think of Python Interpreter

00:08:05,439 --> 00:08:12,099
as just another package, another dependency for our own package,

00:08:12,100 --> 00:08:14,780
then what we actually need is a tool

00:08:14,780 --> 00:08:18,340
that can create a separate testing environment

00:08:18,349 --> 00:08:20,729
for different package configurations

00:08:20,729 --> 00:08:24,200
and can run those tests automatically in all of them

00:08:24,209 --> 00:08:29,749
and collect results at the end of the run.

00:08:29,749 --> 00:08:34,529
And Tox can do all of this and much more.

00:08:34,529 --> 00:08:39,420
But to be able to use it, we need to configure it first

00:08:39,420 --> 00:08:42,800
with tox.ini file

00:08:42,810 --> 00:08:48,460
which basically consists of two parts, tox and testenv.

00:08:48,460 --> 00:08:53,100
In Tox, we list the test environments

00:08:53,100 --> 00:08:57,460
that we want to use in envlist -- with the envlist parameter.

00:08:57,460 --> 00:09:04,000
Now, Tox itself comes with a long list of ready-made test environments,

00:09:04,010 --> 00:09:09,130
and in this case, those are Python 2.7, Python 3.5, and PyPy,

00:09:09,130 --> 00:09:14,180
and basically all the relevant Python versions.

00:09:14,180 --> 00:09:16,000
You can also define your own,

00:09:16,000 --> 00:09:20,560
although we don't really have time, sadly, for that.

00:09:20,560 --> 00:09:23,520
But here you just list those that you are interested in

00:09:23,529 --> 00:09:26,940
to test with, and in the next section, testenv,

00:09:26,940 --> 00:09:32,050
we need to then specify how those -- what needs to happen

00:09:32,050 --> 00:09:34,920
when the test environment

00:09:34,920 --> 00:09:38,180
gets configured and run.

00:09:38,180 --> 00:09:42,020
So first we need to specify which things need to be installed,

00:09:42,020 --> 00:09:45,640
and for us, this is just pytest.

00:09:45,649 --> 00:09:49,109
So that's what we list in the dependency list,

00:09:49,109 --> 00:09:52,380
and in the commands list, we specify which command to run

00:09:52,380 --> 00:09:54,900
once the dependencies have been installed,

00:09:54,900 --> 00:09:58,280
which for us is just normal py.test.

00:09:58,280 --> 00:10:01,300
And once we've done this, we can run Tox,

00:10:01,310 --> 00:10:05,620
which will create a test environment

00:10:05,620 --> 00:10:08,360
for each of the specified interpreters,

00:10:08,360 --> 00:10:13,579
run tests, install dependencies in those environments

00:10:13,579 --> 00:10:16,010
and run them, and you'll get a display like this.

00:10:16,010 --> 00:10:21,610
So at the end, we can see that tests in all three of them were successful.

00:10:22,580 --> 00:10:24,020
So...

00:10:25,240 --> 00:10:28,960
At this point, we are -- so we are at the point

00:10:28,970 --> 00:10:31,470
where we have a package that can be installed,

00:10:31,470 --> 00:10:35,030
that can be tested in multiple environments,

00:10:35,030 --> 00:10:39,080
but wouldn't it be nice if we --

00:10:39,080 --> 00:10:42,760
if the tests ran every time we make a change

00:10:42,769 --> 00:10:44,729
that we want to keep?

00:10:45,720 --> 00:10:50,800
And you can actually do this with something called Travis-CI.

00:10:50,800 --> 00:10:56,220
It's a tool -- it's a continuous integration service

00:10:56,220 --> 00:10:58,920
at travis-ci.org that you can use

00:10:58,920 --> 00:11:03,280
for public repositories

00:11:03,290 --> 00:11:06,090
or private if you are willing to pay.

00:11:06,090 --> 00:11:08,660
And what it does is that it can automatically,

00:11:08,660 --> 00:11:14,920
every time you push to GitHub, it can run tests for you.

00:11:14,920 --> 00:11:18,600
And pushing to GitHub is sort of a --

00:11:18,600 --> 00:11:22,320
I mean, commits that we push to GitHub

00:11:22,320 --> 00:11:24,240
are those, I guess, we want to keep.

00:11:24,240 --> 00:11:28,460
So this is also -- matches well with expectations.

00:11:28,460 --> 00:11:32,579
So, to use Travis-ci.org,

00:11:32,579 --> 00:11:35,319
we need to create an account,

00:11:35,320 --> 00:11:39,920
and that means that we need to -- we go to that URL,

00:11:39,920 --> 00:11:42,540
log in with our GitHub account.

00:11:42,540 --> 00:11:44,660
We need to then authorize the application

00:11:44,660 --> 00:11:48,740
to have access to our repositories.

00:11:48,740 --> 00:11:53,900
Once we've done this, you get to the list of our repositories.

00:11:53,900 --> 00:11:57,040
If it's not complete, we need to just click "sync"

00:11:57,040 --> 00:12:01,480
in the top right corner, and then we switch those on

00:12:01,480 --> 00:12:06,380
that we want to handle with Travis.

00:12:07,260 --> 00:12:09,600
So once we've done this,

00:12:09,610 --> 00:12:14,300
we also need to set up Travis in our repository.

00:12:14,300 --> 00:12:18,850
So we need to write a Travis configuration file, such as this.

00:12:18,850 --> 00:12:22,650
This is from one of my projects, slightly simplified.

00:12:22,650 --> 00:12:25,340
And the first line in this file

00:12:25,350 --> 00:12:30,110
is specifying which language we want to use.

00:12:30,110 --> 00:12:32,840
So in our case, this is Python.

00:12:32,840 --> 00:12:38,700
And the next few lines, the metrics part is the --

00:12:38,700 --> 00:12:45,040
So Travis can run -- can execute tests in multiple --

00:12:45,040 --> 00:12:48,020
with multiple interpreters, but at the same time,

00:12:48,020 --> 00:12:51,999
we already used Tox to do this locally.

00:12:51,999 --> 00:12:54,719
It's a good idea to also do it on Travis,

00:12:54,720 --> 00:12:57,699
because this way the test will run more quickly

00:12:57,700 --> 00:13:03,560
because each interpreter will run in parallel with the others.

00:13:03,560 --> 00:13:07,040
And also, the results that we have will be more readable

00:13:07,040 --> 00:13:11,000
because we can see which ones failed more easily.

00:13:11,000 --> 00:13:15,199
But the problem is that then Travis and Tox

00:13:15,199 --> 00:13:17,940
need to know which one to use.

00:13:17,940 --> 00:13:23,080
So here, what we do is an include.

00:13:23,080 --> 00:13:29,260
We specify the Python version for Travis with a Python attribute.

00:13:29,269 --> 00:13:33,209
So an example is 2.7.

00:13:33,209 --> 00:13:40,500
And then we direct Tox to use just the Python 2.7 environment

00:13:40,500 --> 00:13:43,600
by setting toxenv variable,

00:13:43,600 --> 00:13:46,400
environmental variable with env parameter.

00:13:46,410 --> 00:13:49,110
So this way, Travis will use 2.7,

00:13:49,110 --> 00:13:54,090
and Tox will know from toxenv to use py27 environment,

00:13:54,090 --> 00:13:58,650
and this way, everything works just as we would like.

00:13:58,650 --> 00:14:01,000
But it is important that those names actually match

00:14:01,000 --> 00:14:04,380
those that are used in Tox, because otherwise, obviously,

00:14:04,380 --> 00:14:07,960
it can't know which one to use.

00:14:08,640 --> 00:14:12,740
So once we've taken care of this, we also need to take care of

00:14:12,740 --> 00:14:14,820
setting up the environment.

00:14:14,820 --> 00:14:16,700
Since...

00:14:20,500 --> 00:14:22,520
...we delegated more or less everything to Tox,

00:14:22,520 --> 00:14:25,500
we just need to install Tox itself with pip install tox.

00:14:25,500 --> 00:14:30,080
And once it's installed, we need to specify commands to run.

00:14:30,080 --> 00:14:34,080
For us again, this is just running Tox as it is.

00:14:34,080 --> 00:14:38,640
And at that point, we might -- once we push --

00:14:38,640 --> 00:14:41,639
make the next push to GitHub, the tests will run

00:14:41,639 --> 00:14:44,550
and we can get a page like this listing results

00:14:44,550 --> 00:14:48,070
of how successful or not they were.

00:14:48,070 --> 00:14:52,720
And we also have a badge that we can include

00:14:52,720 --> 00:14:55,480
to let other developers know how well we're doing.

00:14:55,480 --> 00:14:59,380
If you click on that badge, you can get embed codes

00:14:59,380 --> 00:15:04,500
that we can use to add to our readme file and things.

00:15:04,980 --> 00:15:07,140
So at this point,

00:15:07,140 --> 00:15:11,700
we have tests that run locally in multiple environments.

00:15:11,700 --> 00:15:15,760
They also run automatically every time you push new changes.

00:15:15,760 --> 00:15:21,240
But we don't yet know how much of our code they actually cover.

00:15:21,240 --> 00:15:23,579
A passing test suite is nice, but it's no use

00:15:23,579 --> 00:15:28,019
if it just tests a minor part of the project.

00:15:28,020 --> 00:15:32,220
So...to counter that,

00:15:32,220 --> 00:15:35,839
we want to also collect coverage information,

00:15:35,839 --> 00:15:39,119
which is information...

00:15:39,120 --> 00:15:43,640
which is information that tells us

00:15:43,640 --> 00:15:46,779
how much of our code is covered with tests.

00:15:46,779 --> 00:15:53,019
And we use coverage module, an excellent one as well for this.

00:15:53,020 --> 00:15:59,440
To make it work -- I mean, before I go into installing,

00:15:59,440 --> 00:16:01,340
what I want to say is that coverage by itself

00:16:01,340 --> 00:16:05,560
doesn't tell us that there are no bugs if we have full coverage.

00:16:05,560 --> 00:16:09,720
But if you have -- if the coverage is low,

00:16:09,720 --> 00:16:11,860
we do know that there are certain parts --

00:16:11,860 --> 00:16:14,259
there are significant parts of our code

00:16:14,259 --> 00:16:18,560
where we just don't know how well it works.

00:16:18,560 --> 00:16:22,120
So to use it,

00:16:22,120 --> 00:16:27,840
we need to pip install pytest-cov

00:16:27,840 --> 00:16:31,280
to integrate it with pytest framework.

00:16:31,280 --> 00:16:35,480
And once we run pytest, we just need to use

00:16:35,480 --> 00:16:39,660
--cov parameter

00:16:39,660 --> 00:16:41,940
to also collect the coverage information.

00:16:41,940 --> 00:16:44,920
Now before we actually -- before I actually show you

00:16:44,930 --> 00:16:47,949
an example of this, let's make another change.

00:16:47,949 --> 00:16:50,990
So, create another configuration file

00:16:50,990 --> 00:16:54,670
in root repository of our package

00:16:54,670 --> 00:16:57,400
and add two parameters.

00:16:57,400 --> 00:17:01,160
So, source parameter limits collecting of coverage

00:17:01,160 --> 00:17:03,940
just to the directory of pystart.

00:17:03,940 --> 00:17:06,900
This is a relative path to our code because we -- in general,

00:17:06,900 --> 00:17:09,280
we are not interested in coverage of tests

00:17:09,280 --> 00:17:13,180
and other bits of code that we haven't written.

00:17:14,140 --> 00:17:15,700
And...

00:17:18,040 --> 00:17:22,260
The branch -- what it does is that

00:17:22,260 --> 00:17:24,200
it shows...

00:17:25,400 --> 00:17:29,120
With branch set to True, we also cover

00:17:29,120 --> 00:17:31,960
affirmative and negative statements, 'if' statements,

00:17:31,960 --> 00:17:36,520
so that all branches of code get covered.

00:17:36,520 --> 00:17:40,840
So once we've done this, we can run pytest-cov

00:17:40,840 --> 00:17:46,720
with a cov parameter, and we get a table like this

00:17:46,720 --> 00:17:50,929
which shows coverage information.

00:17:50,929 --> 00:17:54,769
We can also include this into...

00:17:54,769 --> 00:18:00,460
into Tox so that we can gather this information also

00:18:00,460 --> 00:18:04,840
for different configuration testing environments.

00:18:04,840 --> 00:18:09,540
And to do this with Tox, we need to add pytest-cov as a dependency,

00:18:09,540 --> 00:18:15,680
and we need to change command to include the --cov parameter.

00:18:15,680 --> 00:18:18,840
And so...

00:18:19,280 --> 00:18:24,240
Now we're getting information about coverage locally

00:18:24,240 --> 00:18:27,080
when we run tests on our machines.

00:18:27,080 --> 00:18:29,540
But again, wouldn't it be nice

00:18:29,549 --> 00:18:32,149
if we could also show this information

00:18:32,149 --> 00:18:35,330
to developers who want to use our package

00:18:35,330 --> 00:18:39,900
and might want to know how well it is covered with tests?

00:18:39,900 --> 00:18:44,860
And you can do this with another service called coveralls.io.

00:18:44,860 --> 00:18:47,080
Getting an account is very similar to Travis.

00:18:47,080 --> 00:18:50,160
So you log in with a GitHub account,

00:18:50,160 --> 00:18:53,880
you authorize it to access your repositories,

00:18:53,880 --> 00:18:55,880
and then you get to the list of repositories

00:18:55,880 --> 00:18:59,180
where you need to flick those that --

00:18:59,180 --> 00:19:04,400
turn on those that you're interested to monitor.

00:19:04,400 --> 00:19:08,820
You might get a page like this asking you for subscription.

00:19:08,820 --> 00:19:11,620
In case you don't want to do that yet,

00:19:11,620 --> 00:19:15,460
you just have to click "REPOS" in the left top corner,

00:19:15,460 --> 00:19:17,280
get to this page,

00:19:17,280 --> 00:19:21,420
and then click on the "ADD REPOS" in the top right corner

00:19:21,420 --> 00:19:25,280
so you can add the repositories that you're interested in.

00:19:25,280 --> 00:19:30,500
And -- but the thing is, coveralls can't access

00:19:30,500 --> 00:19:34,780
Travis pages or environments.

00:19:34,780 --> 00:19:38,260
So to make everything work correctly,

00:19:38,260 --> 00:19:41,320
we need to instruct Travis itself

00:19:41,330 --> 00:19:43,830
to send this information to coveralls.

00:19:43,830 --> 00:19:50,690
So we need to change the Travis configuration file to do this.

00:19:50,690 --> 00:19:57,060
So first we need to install coveralls module package,

00:19:57,060 --> 00:20:03,040
which is -- it really just installs the code and the utility

00:20:03,040 --> 00:20:07,000
that needs to be called to send the data.

00:20:07,000 --> 00:20:10,820
And we need to also add after_success: coveralls.

00:20:10,820 --> 00:20:14,880
What it does is that after Travis has completed

00:20:14,880 --> 00:20:18,510
running the tests successfully, if you call coveralls command,

00:20:18,510 --> 00:20:25,050
that will also send the results to coveralls service.

00:20:25,050 --> 00:20:28,320
There's an alternative also called after)failure,

00:20:28,330 --> 00:20:33,340
so we could also send coverage information when tests fail,

00:20:33,340 --> 00:20:36,920
because in this case it just happened that the test passed --

00:20:36,920 --> 00:20:41,260
this test suite passes successfully.

00:20:41,260 --> 00:20:44,800
But personally, in my opinion, if you have a failing test suite,

00:20:44,800 --> 00:20:47,620
you should fix that first before you worry too much

00:20:47,630 --> 00:20:50,000
about coverage itself.

00:20:50,000 --> 00:20:53,760
So -- but anyway, you can just add it if you want to.

00:20:53,760 --> 00:20:59,320
And after you've done this, you might get a page like this,

00:20:59,320 --> 00:21:04,420
again, listing how successful your last few runs were,

00:21:04,420 --> 00:21:07,620
with some additional information about how much it's covered,

00:21:07,620 --> 00:21:10,180
and again there's a badge in the top right corner

00:21:10,180 --> 00:21:14,580
that you can use with embed snippets that you can use

00:21:14,580 --> 00:21:17,600
to add this information to your documentation

00:21:17,600 --> 00:21:22,840
so that other developers can see how well you're doing.

00:21:23,560 --> 00:21:29,240
Now at this point, we have a local installable package

00:21:29,240 --> 00:21:34,200
that gets tested every time you push changes.

00:21:34,200 --> 00:21:37,980
And it also collects information about coverage.

00:21:37,980 --> 00:21:42,520
But if we publish this package,

00:21:42,529 --> 00:21:47,180
I am guessing we wouldn't be inclined to use it if it wasn't ours

00:21:47,180 --> 00:21:50,420
or it wasn't sort of a package of last resort.

00:21:50,420 --> 00:21:54,400
And the reason for this is that it doesn't have a documentation yet.

00:21:54,400 --> 00:21:56,200
And so...

00:21:57,860 --> 00:22:02,140
If you have a choice between packages that have ample documentation

00:22:02,140 --> 00:22:05,970
and one that has just a short blurb with a couple of examples,

00:22:05,970 --> 00:22:09,390
you probably will first start with the one with the good documentation.

00:22:09,390 --> 00:22:11,540
And writing documentation has also other benefits.

00:22:11,540 --> 00:22:15,280
I think Daniele mentioned a few of them before.

00:22:15,280 --> 00:22:20,700
Sadly, I missed most of the talk, so I might repeat what he said.

00:22:20,710 --> 00:22:24,690
So what documentation does is help us design the software.

00:22:24,690 --> 00:22:27,980
If we write the documentation first, we also think about

00:22:27,980 --> 00:22:30,800
how the software is supposed to be used.

00:22:30,800 --> 00:22:34,400
and it also works really well for marketing

00:22:34,400 --> 00:22:37,800
because when we explain how to use software,

00:22:37,809 --> 00:22:40,980
we are also explaining what the software does,

00:22:40,980 --> 00:22:43,960
and we are also showing that we actually care

00:22:43,960 --> 00:22:46,060
more than the bare minimum.

00:22:46,060 --> 00:22:49,260
So let's publish some docs and let's publish them

00:22:49,270 --> 00:22:52,380
on the website called ReadTheDocs.org,

00:22:52,380 --> 00:22:55,920
which is I think, quite popular.

00:22:55,920 --> 00:22:57,920
We need to create an account there.

00:22:57,920 --> 00:23:01,340
And I will skip it, because registering an account

00:23:01,340 --> 00:23:05,240
is easier than registering for PyCon, and we are all here.

00:23:05,240 --> 00:23:06,920
So...

00:23:07,360 --> 00:23:10,440
So once we registered an account, we get a page like this.

00:23:10,440 --> 00:23:14,880
And again, we need to connect to GitHub

00:23:14,890 --> 00:23:18,830
so it will be able to read the repositories

00:23:18,830 --> 00:23:21,530
and get documentation from there.

00:23:21,530 --> 00:23:26,250
So we need to authorize and -- authorize the service.

00:23:26,250 --> 00:23:30,520
And once we've done that, we come to a very similar-looking page

00:23:30,520 --> 00:23:35,920
where we need to import a project and then get to a list of projects,

00:23:35,929 --> 00:23:39,409
which, for me, for some reason is always kind of empty.

00:23:39,409 --> 00:23:45,240
And if it is, you just click the "sync" button

00:23:45,240 --> 00:23:48,260
right at the top of the screen. and then you will get a list.

00:23:48,260 --> 00:23:53,780
And after you click plus, you will get a page like this.

00:23:53,780 --> 00:23:55,860
Usually the defaults are pretty good.

00:23:55,860 --> 00:23:58,720
I mean, you don't really need to change them

00:23:58,720 --> 00:24:04,020
except maybe a name, might be something more meaningful.

00:24:04,020 --> 00:24:06,640
But if you do change them later on,

00:24:06,640 --> 00:24:09,679
do keep the documentation type as sphinx html

00:24:09,680 --> 00:24:12,740
because this is the tool that we will be using.

00:24:12,740 --> 00:24:15,780
And once you've done all this, you will get a page list

00:24:15,780 --> 00:24:20,540
telling you the current status, and also the URLs

00:24:20,540 --> 00:24:23,360
to the documentation in the top right corner.

00:24:23,360 --> 00:24:26,630
Sorry, bottom right corner.

00:24:26,630 --> 00:24:30,140
So once we've done this, once we've set up the ReadTheDocs part,

00:24:30,140 --> 00:24:34,240
we need to do it also locally.

00:24:34,250 --> 00:24:40,010
And we first need to install sphinx and sphinx autobuild packages,

00:24:40,010 --> 00:24:42,420
and we'll be using reStructuredText.

00:24:42,420 --> 00:24:46,480
So sphinx is a documentation tool that Python uses itself.

00:24:46,480 --> 00:24:49,220
And so once we've done this,

00:24:49,220 --> 00:24:52,880
we switch to the documentation directory

00:24:52,880 --> 00:24:55,231
and we run sphinx quickstart,

00:24:55,240 --> 00:24:57,980
which will ask us a few easy answerable questions,

00:24:57,980 --> 00:25:00,960
and when we don't know the answer, the defaults are fine.

00:25:00,960 --> 00:25:06,780
And it will generate a configuration file conf.py

00:25:06,780 --> 00:25:10,020
where we should check that we also have these two extensions.

00:25:10,029 --> 00:25:14,949
So the first extension is called autodoc.

00:25:14,949 --> 00:25:18,960
What it does is it can generate documentation from Python docstrings,

00:25:18,960 --> 00:25:22,100
which is really useful if you want to generate

00:25:22,100 --> 00:25:25,020
API documentation from your code.

00:25:25,020 --> 00:25:27,420
And the second one, intersphinx, what it does is

00:25:27,429 --> 00:25:32,010
enables you to reference documentation --

00:25:32,010 --> 00:25:34,970
parts of documentation of other packages.

00:25:35,680 --> 00:25:40,540
So once we've done this, we need to write

00:25:40,540 --> 00:25:46,180
a bit of documentation, or a lot, ideally, in reStructuredText.

00:25:47,140 --> 00:25:50,560
We don't really have time to get into that, so let's skip this.

00:25:50,570 --> 00:25:53,029
Once we've done this with $ make html,

00:25:53,029 --> 00:25:57,049
we can build a local version so we can see it,

00:25:57,049 --> 00:25:59,889
but we don't have to check it in because ReadTheDocs

00:25:59,889 --> 00:26:04,700
will generate its own version anyway.

00:26:04,700 --> 00:26:08,800
So at this point, we now have a package that we can install,

00:26:08,800 --> 00:26:12,020
that's tested, it's documented.

00:26:12,020 --> 00:26:13,520
It just...

00:26:14,960 --> 00:26:18,540
The only problem it has is that people can't install it.

00:26:18,540 --> 00:26:20,700
Or, that's not completely true.

00:26:20,700 --> 00:26:24,360
Pip does support GitHub, so we could install from there,

00:26:24,360 --> 00:26:28,760
but we would be very limited in the way that we can do this,

00:26:28,760 --> 00:26:32,040
since we could only either install the latest version

00:26:32,040 --> 00:26:35,260
or a version fix to a particular commit.

00:26:36,420 --> 00:26:39,560
And you can, for example, do --

00:26:39,560 --> 00:26:42,140
install the latest bug fix

00:26:42,140 --> 00:26:46,500
for a certain version of a package.

00:26:46,500 --> 00:26:48,700
So, to do --

00:26:48,710 --> 00:26:54,800
to actually enable everyone else to be able to install our package,

00:26:54,800 --> 00:26:58,000
we need to publish it on PyPI,

00:26:58,000 --> 00:27:00,980
or CheeseShop, as it used to be called,

00:27:00,980 --> 00:27:04,340
which is Python's one-stop shop for packages.

00:27:04,340 --> 00:27:07,820
And again,

00:27:07,820 --> 00:27:11,060
we need to create an account there,

00:27:11,060 --> 00:27:16,400
either on that site itself or during the registration --

00:27:16,400 --> 00:27:19,440
package registration process.

00:27:19,440 --> 00:27:24,820
And we already have everything we need to initiate that registration.

00:27:24,820 --> 00:27:28,340
So we just need to run $ python setup.py register command

00:27:28,340 --> 00:27:31,220
and it will ask us for PyPI credentials.

00:27:31,220 --> 00:27:35,960
Or if we don't have them, we can create an account at that point.

00:27:35,960 --> 00:27:40,620
And once we have registered our package, we can push it.

00:27:40,620 --> 00:27:45,860
We can publish it with this command which will send

00:27:45,860 --> 00:27:49,520
source distribution and wheel distribution.

00:27:49,520 --> 00:27:52,080
It will upload it to PyPI.

00:27:52,560 --> 00:27:57,680
Now if you don't want to write PyPI credentials every time,

00:27:57,680 --> 00:28:02,680
we can store some of it in a configuration file.

00:28:02,680 --> 00:28:09,240
But unless you have misplaced trust in the security of your computer,

00:28:09,240 --> 00:28:12,180
you really shouldn't store your password in this file.

00:28:12,180 --> 00:28:14,600
Just use -- just put username

00:28:14,610 --> 00:28:17,770
and type your password every time you have to.

00:28:17,770 --> 00:28:20,650
So this is mostly it.

00:28:20,650 --> 00:28:23,220
So we can now publish our package.

00:28:23,220 --> 00:28:26,500
It's well tested, it's well documented,

00:28:26,500 --> 00:28:28,780
but now that we know how to do this, it would be kind of silly

00:28:28,790 --> 00:28:32,320
to do this manually every time you want to publish a new one.

00:28:32,320 --> 00:28:34,980
I hope we will publish more than one.

00:28:34,980 --> 00:28:39,000
And so, let's try to automate this as well.

00:28:39,000 --> 00:28:44,540
And the tool to do this is an excellent application

00:28:44,550 --> 00:28:47,720
called Cookiecutter by Audrey Roy Greenfeld,

00:28:47,720 --> 00:28:51,160
which is a common -- for those of you not familiar with Cookiecutter,

00:28:51,160 --> 00:28:55,340
it's a common line utility that creates scaffolding

00:28:55,340 --> 00:28:57,400
for a project from project templates.

00:28:57,540 --> 00:29:02,600
And Audrey also wrote one for creating a Python package,

00:29:02,600 --> 00:29:05,380
which I slightly modified

00:29:05,380 --> 00:29:09,220
so it includes all the bits that I talked about.

00:29:09,220 --> 00:29:13,920
And to use it, we first need to install Coookiecutter itself.

00:29:13,920 --> 00:29:16,700
And once we have Cookiecutter, we just run it

00:29:16,700 --> 00:29:19,760
with the name of the template that we want to use

00:29:19,769 --> 00:29:23,269
and it's smart enough that it can pick it from GitHub.

00:29:23,269 --> 00:29:26,329
And then we have to answer a few questions,

00:29:26,329 --> 00:29:30,789
and afterwards, we have a project template

00:29:30,789 --> 00:29:32,860
ready to be used.

00:29:32,860 --> 00:29:37,500
Now, there was a lot we didn't have time to cover.

00:29:37,500 --> 00:29:40,700
We didn't -- we couldn't create mixed pack--

00:29:40,700 --> 00:29:43,680
packages mixing Python code with C or some other.

00:29:43,680 --> 00:29:45,960
We didn't look into shell scripts.

00:29:45,960 --> 00:29:49,400
We had a very cursory look of the tools that were described,

00:29:49,400 --> 00:29:54,120
and I urge you to look into their documentation

00:29:54,130 --> 00:29:57,279
because they offer so much more.

00:29:57,279 --> 00:29:59,779
We also didn't have time to look at alternatives,

00:29:59,780 --> 00:30:01,640
and there are many, so if you --

00:30:01,640 --> 00:30:04,500
for some reason you don't like any of the tools --

00:30:04,500 --> 00:30:07,720
or some of the tools that I mentioned,

00:30:07,720 --> 00:30:12,060
you can replace it very easily with alternatives.

00:30:12,060 --> 00:30:15,480
And that's it. That's all.

00:30:15,480 --> 00:30:18,260
If you have any questions or are just looking for

00:30:18,260 --> 00:30:20,620
a versatile, experienced developer,

00:30:20,620 --> 00:30:22,920
then please contact me after the talk.

00:30:22,920 --> 00:30:24,660
Thank you all for coming.

00:30:24,660 --> 00:30:30,540
[applause]

00:30:31,460 --> 00:30:34,600
(audience member) Do we have time for questions?

00:30:34,600 --> 00:30:39,580
My understanding is that you're not supposed to use setup upload

00:30:39,580 --> 00:30:44,860
because it's not as secure as [indistinct].

00:30:44,860 --> 00:30:47,960
I've heard there are some security issues with using

00:30:47,960 --> 00:30:50,840
the setup.py upload.

00:30:54,340 --> 00:30:58,220
(Marko Samastur) You know, I have no idea. I don't know.

00:30:58,220 --> 00:31:02,120
I've been using it completely unaware of this problem, so --

00:31:02,120 --> 00:31:04,000
(audience member) You might want to check that out.

00:31:04,000 --> 00:31:05,920
That's one of the things you were saying in the packaging --

00:31:05,920 --> 00:31:08,100
(Marko Samastur) Yes, so the thing is,

00:31:08,100 --> 00:31:12,419
the Python template, Audrey's template or modified my version,

00:31:12,420 --> 00:31:16,700
actually doesn't push it

00:31:16,700 --> 00:31:19,620
in this, let's say, "old" way.

00:31:19,620 --> 00:31:23,031
It uses GitHub to automatically -- once you deploy it,

00:31:23,031 --> 00:31:25,291
it will automatically also deploy it.

00:31:25,300 --> 00:31:27,200
And I think it does it differently,

00:31:27,200 --> 00:31:30,420
so you're probably fine if you use the template

00:31:30,429 --> 00:31:35,309
that was mentioned at the end of the talk.

00:31:35,309 --> 00:31:38,849
But yeah, I will definitely look into it. Thank you.

00:31:43,680 --> 00:31:45,600
(host) Any questions?

00:31:45,600 --> 00:31:47,619
We have one more question.

00:31:47,820 --> 00:31:49,800
(audience member) How consistent is the documentation

00:31:49,800 --> 00:31:52,760
created by coveralls and by the local [indistinct]?

00:31:52,760 --> 00:31:56,040
Is it the same documentation or does it vary --

00:31:56,040 --> 00:31:58,600
(Marko Samastur) Sorry? How consistently

00:31:58,600 --> 00:32:00,740
is documentation created? You mean by ReadTheDocs

00:32:00,740 --> 00:32:04,660
and the local one? It's the same.

00:32:05,580 --> 00:32:07,800
(audience member) You said [indistinct] coveralls?

00:32:07,800 --> 00:32:09,880
(Marko Samastur) Well, coveralls is the one

00:32:09,880 --> 00:32:14,140
that is a service that you use for collecting coverage information.

00:32:14,140 --> 00:32:16,580
And the documentation is the ReadTheDocs.

00:32:16,580 --> 00:32:20,800
But it uses the same con-- it uses your configuration file,

00:32:20,809 --> 00:32:23,919
so it will generate the same one.

00:32:25,200 --> 00:32:26,600
OK.

00:32:28,740 --> 00:32:30,420
Thank you, again.

00:32:31,260 --> 00:32:32,680
[applause]

00:32:32,680 --> 00:32:34,440

YouTube URL: https://www.youtube.com/watch?v=nFozViwDWvY


