Title: The Report Of Twistedâ€™s Death or: Why Twisted and Tornado Are Relevant In The Asyncio Age
Publication date: 2016-06-01
Playlist: PyCon 2016
Description: 
	Speaker: Amber Brown

With asyncio on the scene, the question has been asked: is there any point in having Twisted or Tornado around?

Slides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides
Captions: 
	00:00:00,320 --> 00:00:07,840
[applause]

00:00:07,840 --> 00:00:10,740
(Amber Brown) Hello, everyone. Can you all hear me?

00:00:10,740 --> 00:00:16,100
Great. Now, just as a precursor, I do love questions.

00:00:16,100 --> 00:00:19,000
And as a reward for everyone that asks me a good question

00:00:19,000 --> 00:00:21,100
I have to think about and that is not a statement,

00:00:21,100 --> 00:00:23,000
you'll get a Kit Kat.

00:00:23,000 --> 00:00:24,580
[laughter]

00:00:24,580 --> 00:00:27,080
So think of those questions.

00:00:27,080 --> 00:00:30,160
I'm Amber Brown, better known as HawkOwl on the Internet.

00:00:30,160 --> 00:00:34,180
A lot of people have gone, "Amber? Oh, HawkOwl, right, yes, you."

00:00:34,180 --> 00:00:36,660
I live in Perth, Western Australia.

00:00:36,660 --> 00:00:40,100
That's probably the most notable bit of the city that we have.

00:00:40,100 --> 00:00:44,660
It glows like rainbows at night and wastes so much power.

00:00:45,620 --> 00:00:48,760
I do stuff with the Twisted project.

00:00:48,760 --> 00:00:52,340
Here's its logo. It's a twisted snake.

00:00:52,340 --> 00:00:55,140
I'm the co-developer, the release manager,

00:00:55,140 --> 00:01:00,160
and I have ported 40,000 lines of code to Python 3 --

00:01:00,160 --> 00:01:06,560
[applause]

00:01:06,560 --> 00:01:09,040
-- which I'll go into a bit more later on.

00:01:09,040 --> 00:01:14,560
So, yeah, the day-to-day Twisted operations is pretty much like this.

00:01:14,560 --> 00:01:18,400
My day job is working at Crossbar.io.

00:01:18,400 --> 00:01:21,260
It is a sort of WebSocket router.

00:01:21,260 --> 00:01:26,700
We also do Autobahn for Python and JavaScript and all sorts of things.

00:01:26,700 --> 00:01:30,100
I ported the Twisted version of that to Python 3

00:01:30,100 --> 00:01:33,060
and the entirety of Crossbar.io to Python 3,

00:01:33,060 --> 00:01:37,880
and mostly work on API and REST integration, so that's sort of fun.

00:01:38,640 --> 00:01:43,860
The idea from this talk comes from -- mainly from two people.

00:01:43,860 --> 00:01:46,200
So, Keith...

00:01:46,200 --> 00:01:47,740
[laughter]

00:01:47,740 --> 00:01:50,020
...and Glyph.

00:01:50,020 --> 00:01:53,820
Russell, not Keith, he asked me a question:

00:01:53,820 --> 00:01:57,820
Why is Twisted relevant when there's asyncio?

00:01:57,820 --> 00:02:00,240
And Glyph actually published a blog post

00:02:00,250 --> 00:02:02,930
a little bit earlier about this.

00:02:02,930 --> 00:02:06,560
You might note that I've stolen the title.

00:02:06,560 --> 00:02:08,660
It's been asked for a while,

00:02:08,660 --> 00:02:12,599
and I think I am one of the most uniquely positioned people

00:02:12,600 --> 00:02:14,980
to answer this question.

00:02:14,980 --> 00:02:17,420
But we need to start at the start.

00:02:17,420 --> 00:02:20,160
So, you want to do some input and output.

00:02:20,440 --> 00:02:24,380
So, you know, we mainly do web stuff,

00:02:24,380 --> 00:02:28,220
and some frameworks are better at, you know,

00:02:28,220 --> 00:02:30,680
concurrent connections than others.

00:02:31,320 --> 00:02:33,820
Django, Pyramid, Flask -- all those sorts of things

00:02:33,820 --> 00:02:38,020
just by themselves can only serve one request at a time.

00:02:38,900 --> 00:02:44,080
They are deployed using runners that run copies of these frameworks

00:02:44,080 --> 00:02:46,220
in threads or processes.

00:02:46,220 --> 00:02:51,000
They don't actually run or handle more than one request themselves.

00:02:51,000 --> 00:02:53,620
They just run lots and lots of copies.

00:02:54,300 --> 00:02:58,020
Now, in Python, Python specifically,

00:02:58,020 --> 00:03:02,520
threads or processes really won't help with C10K.

00:03:03,480 --> 00:03:07,220
So, you have your server, and then C10K.

00:03:07,220 --> 00:03:08,980
[laughter]

00:03:10,420 --> 00:03:13,440
Threads themselves are hard to use safely,

00:03:13,440 --> 00:03:17,860
so without race conditions or other sorts of interesting things,

00:03:17,860 --> 00:03:21,880
and they're not really happy to scale within Python.

00:03:22,280 --> 00:03:24,880
So, the thread memory overhead is --

00:03:24,880 --> 00:03:27,060
you know, on Linux it's by default 8 MB.

00:03:27,060 --> 00:03:30,100
There's also 32 KB per stack, which is fine.

00:03:30,100 --> 00:03:33,320
But if you times that times 10,000, you end up with a bit of overhead.

00:03:33,320 --> 00:03:35,610
Now, there's optimizations for this, and you can clean it up

00:03:35,610 --> 00:03:38,080
and all of that, but in the end, the global interpreter lock

00:03:38,080 --> 00:03:41,220
means that you're not doing anything parallel anyway.

00:03:41,220 --> 00:03:44,480
So, you know, you don't really get a benefit from that.

00:03:44,480 --> 00:03:46,920
And even if you make some processes, you've still got that,

00:03:46,920 --> 00:03:49,680
but it's still a slightly smaller problem.

00:03:49,680 --> 00:03:52,360
Also, you won't do threads properly.

00:03:52,360 --> 00:03:56,140
Just take a picture of that and put it above your computer

00:03:56,140 --> 00:03:58,880
and just keep it, because you will not.

00:03:59,320 --> 00:04:02,920
Microthreads and green threads aren't really that much better.

00:04:02,920 --> 00:04:06,220
I mean, they're better, but, you know, they're still threads.

00:04:06,220 --> 00:04:09,300
Glyph talks about this a little bit more,

00:04:09,300 --> 00:04:12,460
about how green threads are, you know,

00:04:12,460 --> 00:04:15,620
still the same sort of thing and how threads are bad.

00:04:17,180 --> 00:04:21,640
Now, the only real good way to do it in Python right now

00:04:21,640 --> 00:04:24,940
is non-threaded asynchronous I/O.

00:04:24,940 --> 00:04:28,320
This is the approach of Twisted, Tornado, asyncio, curio,

00:04:28,320 --> 00:04:30,940
all of those sorts of frameworks.

00:04:30,940 --> 00:04:37,060
Twisted was one of the first, so here's a commit graph from SVN.

00:04:37,060 --> 00:04:39,940
I've been told that's actually earlier than that.

00:04:39,940 --> 00:04:43,620
I was, like, in preschool at the start of that graph, so...

00:04:43,620 --> 00:04:45,500
[laughter]

00:04:45,500 --> 00:04:48,160
You think I'm joking; I'm not.

00:04:48,160 --> 00:04:53,060
Asyncio is much newer, and was released in --

00:04:53,060 --> 00:04:55,780
started work happened in 2012, and you know,

00:04:55,780 --> 00:04:58,800
it's still regularly developed.

00:04:59,480 --> 00:05:01,900
They are identical at their core.

00:05:01,900 --> 00:05:04,300
They use selector functions.

00:05:04,860 --> 00:05:09,500
They are select() and their friends like poll and epoll and kqueue,

00:05:09,500 --> 00:05:12,240
or IOCP on windows, but that's a little bit different.

00:05:12,249 --> 00:05:16,229
That's a proactive rather than a reactive sort of design,

00:05:16,229 --> 00:05:18,770
but we don't have to worry about that at this core.

00:05:18,770 --> 00:05:22,660
They take a list file descriptors, which are sockets, open files,

00:05:22,660 --> 00:05:25,080
possibly other events, and they tell you what is ready

00:05:25,080 --> 00:05:29,100
for reading or writing, or sometimes other events can happen on them.

00:05:29,860 --> 00:05:32,700
Selector loops can handle thousands and thousands

00:05:32,700 --> 00:05:34,900
of open sockets and events,

00:05:34,900 --> 00:05:37,280
and I'm getting demonstrate why you should never do

00:05:37,280 --> 00:05:40,220
live demos with this.

00:05:40,220 --> 00:05:44,320
Oh, I'm also going to demonstrate why I should plug my computer in.

00:05:48,140 --> 00:05:50,500
Why would you ever prepare?

00:05:54,740 --> 00:05:56,900
OK. There we go.

00:05:56,900 --> 00:05:58,920
Now, if I get my mouse here...

00:05:58,920 --> 00:06:03,840
So, as an example... so, running PyPy.

00:06:03,840 --> 00:06:07,100
So I've got this server that does some connections.

00:06:13,580 --> 00:06:19,680
So this is using PyPy and Twisted on a Mac,

00:06:19,680 --> 00:06:23,980
so this is holding, like, 7,000 open connections

00:06:23,980 --> 00:06:26,960
and responding to, like, 10,000 pings a second.

00:06:26,960 --> 00:06:29,040
Now, this isn't that amazing these days,

00:06:29,040 --> 00:06:33,460
but about ten years ago, this was, you know, rather stunning.

00:06:33,460 --> 00:06:37,060
So it can be done. You can handle 10,000 concurrent connections,

00:06:37,060 --> 00:06:39,380
which is probably more than your site needs,

00:06:39,380 --> 00:06:44,200
on just, you know, a terrible Mac. You can do it.

00:06:44,200 --> 00:06:47,420
I'll just go and cancel that so it doesn't eat up all of my CPU.

00:06:48,900 --> 00:06:51,980
So it is possible and can be done even on consumer hardware,

00:06:51,980 --> 00:06:53,920
so you don't have to worry about scaling out

00:06:53,920 --> 00:06:55,800
to big server farms or anything.

00:06:55,800 --> 00:06:58,460
You can just, you know, have one computer,

00:06:58,460 --> 00:07:00,440
depending on what you're doing.

00:07:01,360 --> 00:07:04,940
Now, when you do have that selector loop,

00:07:04,940 --> 00:07:08,080
data, when it becomes available, is channeled through a transport,

00:07:08,089 --> 00:07:12,129
so something like a TCP transport, to a protocol implementation.

00:07:12,129 --> 00:07:17,140
For example, HTTP is one really good example.

00:07:17,140 --> 00:07:22,220
Sending data is queued and buffered until you can send more,

00:07:22,220 --> 00:07:25,180
because if you're sending a 100 MB file down the pipe,

00:07:25,180 --> 00:07:27,559
it's going to take a while for that all to go

00:07:27,560 --> 00:07:30,180
into the operating system's send buffers,

00:07:30,180 --> 00:07:32,460
onto the network, out, and then --

00:07:32,460 --> 00:07:35,380
you know, so you can't put all of that 100 MB

00:07:35,380 --> 00:07:38,880
on the network right away. You do need to queue it.

00:07:39,640 --> 00:07:43,200
But nothing blocks, so everything just kind of works together.

00:07:43,210 --> 00:07:46,069
It just waits until more data is able to be sent

00:07:46,069 --> 00:07:49,320
or more data has arrived and does things on that.

00:07:49,840 --> 00:07:52,940
Things that do this are called I/O loops or reactors,

00:07:52,940 --> 00:07:55,120
after the reactor pattern,

00:07:55,120 --> 00:07:57,780
and they generally end up with a higher density per call.

00:07:57,780 --> 00:07:59,760
You don't need threads,

00:07:59,760 --> 00:08:02,620
but you still end up with concurrency, not parallelism.

00:08:02,620 --> 00:08:05,240
You're still handling one thing at a time,

00:08:05,240 --> 00:08:09,360
but you're a bit smarter about what one thing you're handling and when.

00:08:10,340 --> 00:08:14,100
This works really good when you have high I/O throughput,

00:08:14,100 --> 00:08:16,900
so for example, things that are web proxies,

00:08:16,900 --> 00:08:20,460
or sending a lot of data through it,

00:08:20,460 --> 00:08:24,880
when you have high-latency clients, for example, mobile phones

00:08:24,880 --> 00:08:28,660
and people on 3G connections, or over the Internet,

00:08:28,660 --> 00:08:33,520
and when handling a request has low amounts of CPU requirements.

00:08:33,520 --> 00:08:37,840
So for example, you won't be able to process pi to the millionth digit

00:08:37,840 --> 00:08:41,000
with every request and still get good performance,

00:08:41,000 --> 00:08:44,360
but it does also mean that if you only need to do

00:08:44,360 --> 00:08:49,040
something really small, like return pi to two digits,

00:08:49,040 --> 00:08:52,420
then you'll be able to do that a lot better.

00:08:52,420 --> 00:08:54,480
And really, these days you're probably waiting on

00:08:54,480 --> 00:08:58,440
either the client to send you data or the database to send you data.

00:08:58,440 --> 00:09:01,360
There's not a lot of things that your web server actually does,

00:09:01,360 --> 00:09:04,920
or a lot of client servers actually do apart from store data

00:09:04,920 --> 00:09:08,020
and port data elsewhere that -- you know, server farms

00:09:08,020 --> 00:09:11,040
that are better suited to processing lots of information

00:09:11,040 --> 00:09:13,000
can actually put it.

00:09:14,600 --> 00:09:17,120
Some implementations come with abstractions

00:09:17,120 --> 00:09:21,160
to help you with all of this sort of asynchronous programming

00:09:21,160 --> 00:09:24,360
and waiting for events to happen and all of that.

00:09:24,360 --> 00:09:27,100
So, a common one is that they provide an object,

00:09:27,100 --> 00:09:29,660
which is stand-in for some future result,

00:09:29,660 --> 00:09:33,620
and then it has functionality so that when that result happens,

00:09:33,620 --> 00:09:35,740
you can do a thing.

00:09:35,740 --> 00:09:38,040
You might know this as a Future from asyncio

00:09:38,040 --> 00:09:39,800
or a Deferred from Twisted.

00:09:39,800 --> 00:09:41,790
They both do pretty much the same thing.

00:09:41,790 --> 00:09:44,970
So here's an example of a Deferred. You make a Deferred.

00:09:44,970 --> 00:09:48,200
You tell it that when it calls back, print something.

00:09:48,200 --> 00:09:52,120
You call and you give it a result, which then calls the print.

00:09:53,640 --> 00:09:57,620
The equivalent code with Futures is pretty much the same.

00:09:57,620 --> 00:10:00,880
They're very similar in, you know, their outside operation.

00:10:00,880 --> 00:10:03,140
They've got a lot of internals that are different.

00:10:03,140 --> 00:10:06,180
For example, Deferreds run callbacks as soon as they're able,

00:10:06,180 --> 00:10:09,020
but Futures schedule it for the next time

00:10:09,020 --> 00:10:12,160
the reactor is giving out work.

00:10:14,040 --> 00:10:18,640
So, if we've already got Twisted, and if we've already got Tornado,

00:10:18,640 --> 00:10:20,680
why a new solution?

00:10:21,360 --> 00:10:26,280
Well, asyncio in 2012 was fairly a total mess.

00:10:27,240 --> 00:10:30,760
Well, I should note: that's on Python 3.

00:10:31,320 --> 00:10:34,820
No gevent or eventlet was on Python 3.

00:10:34,820 --> 00:10:36,860
Not very much of Twisted was ported.

00:10:36,860 --> 00:10:41,380
Most of Tornado was ported, though, so, you know, it wasn't all bad.

00:10:42,020 --> 00:10:45,100
But node.js was completely exploding in popularity.

00:10:45,100 --> 00:10:49,720
Like, npm already had, like, ten bajillion packages on it.

00:10:49,720 --> 00:10:53,600
Async/await also shipped in .NET 4.5,

00:10:53,600 --> 00:10:57,740
so ASP.NET, like, had a -- I think ASP probably had it, yeah.

00:10:57,740 --> 00:11:01,420
So, you know, other things were getting better than us

00:11:01,420 --> 00:11:03,980
in call language features.

00:11:04,480 --> 00:11:07,780
And Python 3 really did need its killer feature.

00:11:07,780 --> 00:11:10,080
It needed something that everyone could go,

00:11:10,080 --> 00:11:13,920
"This is good. This is why I should use Python 3."

00:11:16,680 --> 00:11:21,560
So, asyncio was this, but why asyncio in particular?

00:11:21,560 --> 00:11:25,960
It was a framework that was designed with coroutines from the start.

00:11:26,400 --> 00:11:29,080
Coroutines are like a special sort of generator,

00:11:29,080 --> 00:11:31,560
if you've ever used those in Python.

00:11:32,200 --> 00:11:35,260
And Python 3.5 has some syntax

00:11:35,260 --> 00:11:37,259
that makes Futures sort of turn into coroutines

00:11:37,260 --> 00:11:40,520
and you can interact with them in coroutines.

00:11:40,880 --> 00:11:43,360
So here's an example of, like,

00:11:43,360 --> 00:11:45,380
actually doing something with a coroutine.

00:11:45,380 --> 00:11:49,880
So async def defines that this function is a coroutine.

00:11:49,880 --> 00:11:52,520
And then inside that, there is a loop.

00:11:52,520 --> 00:11:56,040
And inside that loop, it has await asnycio.sleep.

00:11:56,040 --> 00:11:59,300
Now, asyncio.sleep returns a coroutine,

00:11:59,300 --> 00:12:02,300
and you await on that coroutine.

00:12:03,140 --> 00:12:07,899
So, as you'll see, it will just print every second

00:12:07,900 --> 00:12:11,940
until five seconds has passed, and then it will close.

00:12:12,520 --> 00:12:17,160
So yeah. It returns Future. It's awaited on in the coroutine.

00:12:17,160 --> 00:12:19,060
But the other thing that it's also good for

00:12:19,060 --> 00:12:21,820
is repairing the library API fragmentation.

00:12:21,820 --> 00:12:25,280
Now, everyone sort of does things their own separate way,

00:12:25,280 --> 00:12:28,240
and we really needed something that would tie all those together,

00:12:28,240 --> 00:12:30,180
make it so that, you know,

00:12:30,180 --> 00:12:32,080
you didn't have to relearn the framework

00:12:32,080 --> 00:12:33,980
if you wanted to use something different.

00:12:33,980 --> 00:12:36,360
Because it's all Python and there should be one way

00:12:36,360 --> 00:12:39,340
of doing things; that's the Pythonic way.

00:12:40,500 --> 00:12:46,420
It also reduces duplication, because asyncio in Python 3.4

00:12:46,420 --> 00:12:48,700
ships with all these reactors and all these things,

00:12:48,700 --> 00:12:51,720
and then Twisted doesn't have to do it and Tornado doesn't have to do it,

00:12:51,720 --> 00:12:54,520
so it's less things for them to care about.

00:12:55,720 --> 00:12:59,320
But some people seem to think that the existence of asyncio

00:12:59,320 --> 00:13:02,500
kind of replaces Twisted, makes the requirement for it

00:13:02,500 --> 00:13:06,580
or other frameworks not really that important.

00:13:06,580 --> 00:13:09,200
Just going to grab some water.

00:13:12,320 --> 00:13:15,600
So, they both do very much the same things:

00:13:15,600 --> 00:13:18,060
cooperative, single-threaded multitasking.

00:13:18,060 --> 00:13:22,380
They both have primitives for supporting asynchronous programming.

00:13:22,380 --> 00:13:26,560
They both use the same system APIs, as I mentioned.

00:13:26,560 --> 00:13:28,920
The protocols and transports, among the best things

00:13:28,920 --> 00:13:32,740
that Twisted has to offer, are in asyncio.

00:13:33,540 --> 00:13:37,840
It is all very similar to Twisted, too, so, you know,

00:13:37,840 --> 00:13:40,220
is it a strictly better version?

00:13:40,220 --> 00:13:42,340
And it's just there in Python 3.4.

00:13:42,340 --> 00:13:45,740
You don't need to go to PyPI and install anything,

00:13:45,740 --> 00:13:48,980
or worry about not having zope.interface

00:13:48,980 --> 00:13:53,660
or compiling extensions, you just get it in Python 3.4.

00:13:55,140 --> 00:13:57,780
And from Glyph's blog post, it's like, you know,

00:13:57,780 --> 00:14:01,460
Twisted is an asyncio thing. Asyncio is an asyncio thing.

00:14:01,460 --> 00:14:04,960
They're the same kind of thing. You only need one of the things,

00:14:04,960 --> 00:14:06,940
so the standard one is probably better,

00:14:06,940 --> 00:14:09,500
so we can just get rid of the other one.

00:14:10,220 --> 00:14:14,660
Well, Twisted is a fruit salad to asyncio's apple.

00:14:16,820 --> 00:14:21,920
Now, if you can compare what they do in terms of lines of code,

00:14:21,920 --> 00:14:24,500
Twisted is much bigger.

00:14:24,500 --> 00:14:27,019
But that's not bloat.

00:14:27,020 --> 00:14:29,080
A lot of it is tests.

00:14:29,080 --> 00:14:31,040
We have a lot of the tests.

00:14:31,960 --> 00:14:35,080
But we also do a lot more things than asyncio.

00:14:35,080 --> 00:14:36,920
But the important thing to realize

00:14:36,920 --> 00:14:38,940
is that Twisted did a lot of these things

00:14:38,940 --> 00:14:42,240
because the things that were in the standard library didn't exist yet,

00:14:42,240 --> 00:14:46,400
or weren't quite where we needed them to be.

00:14:46,400 --> 00:14:48,740
And one big package that had all these tools

00:14:48,740 --> 00:14:53,380
back in 2003 was much easier to distribute and install and use

00:14:53,380 --> 00:14:55,600
because you couldn't just pip install things.

00:14:55,600 --> 00:14:57,620
It wasn't until like 2012 that you could actually

00:14:57,620 --> 00:15:01,020
pip install things and have PyPI actually be up.

00:15:03,940 --> 00:15:09,560
And Twisted, compared to other projects of the same age,

00:15:09,560 --> 00:15:12,820
they're both similarly-sized big packages.

00:15:14,780 --> 00:15:19,840
So if we cut it down to just what asyncio is

00:15:19,840 --> 00:15:21,800
compared to Twisted,

00:15:21,800 --> 00:15:24,320
so the asynchronous I/O primitives, the tools for doing it,

00:15:24,320 --> 00:15:27,640
some Python utilities to support it, and protocols.

00:15:27,640 --> 00:15:30,820
If you wrap that all down, Twisted is actually

00:15:30,820 --> 00:15:33,260
not that much bigger than asyncio.

00:15:33,260 --> 00:15:36,020
It's not bloat, we just do things.

00:15:37,020 --> 00:15:39,820
Here's an example of all the things that Twisted does

00:15:39,820 --> 00:15:43,020
that asyncio does not do by default.

00:15:43,020 --> 00:15:48,160
You can get them all on PyPI, but, you know, Twisted just has them.

00:15:48,160 --> 00:15:53,080
You know, I'm not going to say which one is better; it is how it is.

00:15:53,080 --> 00:15:56,500
Having packages that do one specific thing is very good,

00:15:56,500 --> 00:15:58,800
but also having a package that comes with batteries included

00:15:58,800 --> 00:16:01,420
also has its good things.

00:16:02,100 --> 00:16:05,800
Twisted also has protocols that don't have implementations

00:16:05,800 --> 00:16:08,320
in the asyncio world yet.

00:16:09,040 --> 00:16:11,340
But Let's talk about Tornado.

00:16:11,940 --> 00:16:14,580
It is an asynchronous web framework in Python.

00:16:14,580 --> 00:16:18,240
It was written by FriendFeed and, later, Facebook.

00:16:18,240 --> 00:16:22,580
Its IOStream is similar to Twisted and asyncio's transports,

00:16:22,580 --> 00:16:25,860
but it doesn't quite have the protocol abstraction.

00:16:26,620 --> 00:16:28,620
It does implement its own I/O loop,

00:16:28,620 --> 00:16:31,340
and it does integrate with Twisted and asyncio,

00:16:31,340 --> 00:16:34,079
and you can yield Deferreds and Futures inside of it,

00:16:34,080 --> 00:16:37,180
I'm fairly sure, and it all sort of works together.

00:16:37,180 --> 00:16:40,260
It builds on top of those things,

00:16:40,260 --> 00:16:43,180
and they might remove their own I/O loop.

00:16:44,300 --> 00:16:46,819
And if you go through the history, there is, you know,

00:16:46,820 --> 00:16:51,260
a lot of change that they have done to adopt the Python standard way.

00:16:51,860 --> 00:16:53,740
And this is a really great example

00:16:53,740 --> 00:16:55,640
of interoperating between the frameworks

00:16:55,640 --> 00:16:59,260
because Tornado just sits on top and uses the other things.

00:16:59,260 --> 00:17:01,120
Is this an example for Twisted?

00:17:01,120 --> 00:17:03,860
Is this what we should end up doing? Should we remove all that stuff

00:17:03,860 --> 00:17:08,160
and just do it the Python standard library way?

00:17:09,040 --> 00:17:12,740
Well...it's hard.

00:17:15,100 --> 00:17:17,100
Asyncio is very similar

00:17:17,100 --> 00:17:19,540
in a lot of its concepts, but it's not the same.

00:17:19,540 --> 00:17:22,740
It's not direct mappings for a lot of things.

00:17:23,300 --> 00:17:27,680
My focus of recent, as anyone who has seen me

00:17:27,680 --> 00:17:32,040
complaining about it on IRC, is getting async/wait working.

00:17:32,040 --> 00:17:38,460
It was introduced in Python 3.5 and detailed in PEP-0492.

00:17:40,060 --> 00:17:48,620
So, here is an example of a coroutine which uses async/await.

00:17:48,620 --> 00:17:52,840
So, async def read_data, and then data = await db.fetch.

00:17:52,840 --> 00:17:55,580
So by going async def, that means that this function

00:17:55,580 --> 00:17:58,280
always returns a coroutine.

00:17:58,280 --> 00:18:00,900
So, returning a coroutine

00:18:00,900 --> 00:18:03,680
is a bit different than regular Python functions,

00:18:03,680 --> 00:18:06,840
because in Python functions, you usually return a result.

00:18:06,840 --> 00:18:11,660
But because this is a coroutine, a coroutine will have a result later,

00:18:11,660 --> 00:18:13,600
but it's a different thing right now.

00:18:13,600 --> 00:18:16,560
So it's very similar to Futures and Deferreds.

00:18:17,680 --> 00:18:21,860
So, await gets the result of a coroutine that is awaited.

00:18:21,860 --> 00:18:25,700
And they are a special kind of generator, so they're quite similar.

00:18:26,300 --> 00:18:29,020
Really what it does under the hood is that you await,

00:18:29,020 --> 00:18:33,420
and then that awaits on a coroutine which has a subgenerator.

00:18:33,420 --> 00:18:36,020
It allows you to write code that is asynchronous,

00:18:36,020 --> 00:18:39,360
but is in a very synchronous style, so it's easier to understand

00:18:39,360 --> 00:18:42,580
for people who might be new to asynchronous programming.

00:18:43,340 --> 00:18:45,500
And it doesn't actually block.

00:18:45,500 --> 00:18:47,520
Even though it looks like it's blocking code,

00:18:47,520 --> 00:18:49,420
again, it's asynchronous, so it will wait

00:18:49,420 --> 00:18:52,940
for other things to happen while the result is not there.

00:18:54,500 --> 00:18:57,700
We have had a trampoline to turn Deferreds into a generator

00:18:57,700 --> 00:19:00,460
since, like, 2006.

00:19:00,460 --> 00:19:03,600
So, here's an example here of inlineCallbacks.

00:19:03,600 --> 00:19:07,660
So, you wrap it in this inlineCallbacks thing,

00:19:07,660 --> 00:19:11,060
and you call the function, and then you yield.

00:19:11,460 --> 00:19:15,580
And what yielding does is it waits for the result to happen

00:19:15,580 --> 00:19:17,560
and then resumes execution.

00:19:17,560 --> 00:19:19,780
So it pauses there, gets the result,

00:19:19,780 --> 00:19:24,220
resumes it after it. So it's a lot easier to understand,

00:19:24,220 --> 00:19:28,780
but unfortunately, inlineCallbacks has a lot of problems with it.

00:19:28,780 --> 00:19:32,040
For example, in Python 2.7 you can't just return.

00:19:32,040 --> 00:19:34,620
That's only a feature in Python 3 and above.

00:19:34,620 --> 00:19:39,380
It also completely destroys the PyPy just-in-time interpreter

00:19:39,390 --> 00:19:47,090
because you can raise the special return value on Python 2.7.

00:19:47,090 --> 00:19:49,940
Like, this is using return as if it was Python 3,

00:19:49,940 --> 00:19:52,840
but on Python 2 you have to use a return value,

00:19:52,840 --> 00:19:55,280
which you can potentially call from the wrong spot,

00:19:55,280 --> 00:19:58,040
so we have to make sure you don't call it from the wrong spot,

00:19:58,040 --> 00:20:01,400
which means that performance just takes a nosedive.

00:20:03,280 --> 00:20:10,200
What's next? Well, deferredCoroutine is what's next, I think, for this.

00:20:10,880 --> 00:20:15,740
It allows you to await on Deferreds as if they were Futures,

00:20:15,740 --> 00:20:19,640
and coroutines get wrapped in Deferreds.

00:20:19,640 --> 00:20:23,620
So, here's an example here.

00:20:24,540 --> 00:20:26,920
So I'll just read this code. What that means

00:20:26,920 --> 00:20:30,440
is that you can have code that uses inlineCallbacks,

00:20:30,440 --> 00:20:32,540
you can have code that uses deferredCoroutine,

00:20:32,540 --> 00:20:37,900
and you can have code that uses actual Deferreds themselves raw,

00:20:37,900 --> 00:20:40,620
and then they will all work together in the same Twisted code base

00:20:40,620 --> 00:20:42,800
because everything returns a Deferred

00:20:42,810 --> 00:20:46,200
and everything works when a Deferred has a result.

00:20:46,200 --> 00:20:48,280
So you don't have to worry about, you know,

00:20:48,280 --> 00:20:51,680
one layer using deferredCoroutine and another layer using

00:20:51,680 --> 00:20:55,080
regular Deferreds, because they all sort of work together.

00:20:55,080 --> 00:20:58,180
So this here uses the await functionality

00:20:58,180 --> 00:21:01,700
to await treq.content,

00:21:01,700 --> 00:21:04,520
which is sort of like requests, but for Twisted.

00:21:04,520 --> 00:21:09,340
So, what that means is that code that used to be --

00:21:09,340 --> 00:21:12,060
you had to import Deferred and you had to do some other stuff,

00:21:12,060 --> 00:21:15,600
you just await on it; you don't have to worry about anything.

00:21:18,280 --> 00:21:22,120
Also coming soon is some sort of asyncioreactor.

00:21:22,120 --> 00:21:27,720
So this is based on prior art by Itamar Turner-Trauring,

00:21:27,720 --> 00:21:29,880
if I pronounced his name right,

00:21:29,880 --> 00:21:33,660
which builds a Twisted reactor on top of asyncio.

00:21:33,660 --> 00:21:36,580
So that means that perhaps in the future

00:21:36,580 --> 00:21:41,890
when Python 3.5 or Python 3.4 is the primary and only version

00:21:41,890 --> 00:21:44,440
of Python that anyone cares about and uses,

00:21:44,440 --> 00:21:46,760
we'll be able to get rid of a whole bunch of code

00:21:46,760 --> 00:21:48,920
where we're duplicating what asyncio does.

00:21:48,920 --> 00:21:52,020
We're not quite at that point yet, and we won't be for several years,

00:21:52,020 --> 00:21:54,040
but that's what might happen.

00:21:54,040 --> 00:21:57,820
And that's really great to see that core part

00:21:57,820 --> 00:22:02,140
of what asyncio was meant to do finally start to happen.

00:22:03,540 --> 00:22:06,320
So, yeah, Twisted reactor on top, works all good.

00:22:06,320 --> 00:22:10,900
So that leads into a second thing, deferredToFuture,

00:22:10,900 --> 00:22:15,020
and not mentioned, futureToDeferred.

00:22:15,020 --> 00:22:17,260
This is kind of a hack for right now

00:22:17,260 --> 00:22:20,220
until we get some bugs fixed in asyncio.

00:22:20,220 --> 00:22:24,220
But it does mean that if you have Twisted and asyncio

00:22:24,220 --> 00:22:26,600
talking to the same event loop or reactor,

00:22:26,600 --> 00:22:29,320
and both coordinating on events,

00:22:29,320 --> 00:22:32,120
then it doesn't really matter what framework you're using.

00:22:32,120 --> 00:22:37,980
So this here is aiohttp, which is a Google proxy.

00:22:37,980 --> 00:22:42,100
So it's not great Google proxy, but it is a Google proxy.

00:22:42,740 --> 00:22:45,580
So, as you see there at the top, there's some ugly hacks

00:22:45,580 --> 00:22:50,140
which we'll get rid of to actually set up the event loop.

00:22:50,140 --> 00:22:55,160
But you can see the await defer.deferredtofuture(treq.get),

00:22:55,160 --> 00:22:59,040
but it's in an asyncio coroutine.

00:22:59,040 --> 00:23:02,580
So this will mean that eventually, you won't have to worry about

00:23:02,580 --> 00:23:04,880
whether you're using an asyncio library

00:23:04,880 --> 00:23:09,460
or a Twisted library or any of that because they'll just work together.

00:23:09,460 --> 00:23:12,100
There might be some glue, there might be some gotchas

00:23:12,100 --> 00:23:14,240
along the way, but this is the kind of thing

00:23:14,240 --> 00:23:19,200
that we're going to have to end up doing

00:23:19,200 --> 00:23:23,920
because, you know, we are going to have to interoperate.

00:23:24,680 --> 00:23:29,860
It's not reviewed, it's not merged, it's probably not great code,

00:23:29,860 --> 00:23:32,300
but the important thing is knowing that it can be done,

00:23:32,300 --> 00:23:34,360
because knowing that it can be done

00:23:34,360 --> 00:23:36,660
means that we can start working on it.

00:23:36,660 --> 00:23:38,560
And there's a bit more about that.

00:23:38,560 --> 00:23:40,620
I'll speak about it at the end.

00:23:42,260 --> 00:23:44,660
But now we know about, you know, the core of it.

00:23:44,660 --> 00:23:47,880
Why is Twisted itself, apart from asyncio,

00:23:47,880 --> 00:23:50,560
still worth using as a project?

00:23:51,040 --> 00:23:56,120
Well, thanks to my efforts in particular, I will say --

00:23:56,120 --> 00:23:59,760
[applause]

00:23:59,760 --> 00:24:01,900
See, all the Twisted people up here are clapping

00:24:01,900 --> 00:24:05,300
because I've done release management for three years.

00:24:05,300 --> 00:24:08,960
So, Twisted last year had the most releases in a year

00:24:08,960 --> 00:24:12,320
it's ever had in its lifetime.

00:24:12,320 --> 00:24:14,300
So we're really getting to the point

00:24:14,300 --> 00:24:16,220
where we're having it three times a year.

00:24:16,220 --> 00:24:18,640
2016 is going to have five releases in it,

00:24:18,640 --> 00:24:22,700
and that means that we're going to be able to react a lot quicker

00:24:22,700 --> 00:24:27,420
and get new features and all sorts of cool things out to users.

00:24:28,060 --> 00:24:30,260
We do a time-based release management schedule,

00:24:30,260 --> 00:24:33,060
which means that they're just taken off a trunk branch.

00:24:33,060 --> 00:24:37,040
So, that means that every so often, we go, "Yeah, let's do a release --"

00:24:37,040 --> 00:24:39,420
well, actually, I do, "Yeah, let's do a release,"

00:24:39,420 --> 00:24:42,280
and then Glyph is like, "Yeah, that sounds good," and then I do a release.

00:24:42,280 --> 00:24:45,380
So we just do this by going, "Yeah, let's get this trunk,

00:24:45,380 --> 00:24:49,020
"that's good," and we move forward.

00:24:49,580 --> 00:24:52,960
Our trunk branch is very stable. Some people deploy off it.

00:24:52,960 --> 00:24:55,580
I'm not going to say you should do that, but some people do it.

00:24:55,580 --> 00:24:59,500
And so far it's only been a minor footgun for them some of the time.

00:24:59,500 --> 00:25:01,140
[laughs]

00:25:04,780 --> 00:25:07,320
We make sure that our trunk branch is stable

00:25:07,320 --> 00:25:11,940
with very, very, very stringent at times code review,

00:25:11,940 --> 00:25:14,740
and lots of linting and lots of, you know, tooling

00:25:14,740 --> 00:25:17,240
and -- you know, it needs to be better in some ways,

00:25:17,240 --> 00:25:19,840
but we do try and make sure that no matter what,

00:25:19,840 --> 00:25:22,120
trunk is usable.

00:25:23,460 --> 00:25:26,080
We have lots and lots and lots of protocols out of the box,

00:25:26,080 --> 00:25:28,340
which can be a really cool thing.

00:25:28,340 --> 00:25:31,820
You can write an HTTP 1.1 server just out of the box.

00:25:31,820 --> 00:25:36,240
You can do DNS, you can do Memcache, you can do IMAPs,

00:25:36,240 --> 00:25:40,060
you can write protocols that map these protocols together

00:25:40,060 --> 00:25:44,160
so that when you send- -- when you do a DNS request,

00:25:44,160 --> 00:25:47,360
it sends an e-mail, which then goes to SSH, which --

00:25:47,360 --> 00:25:50,280
it doesn't matter, you can glue all of these things together

00:25:50,280 --> 00:25:53,700
and can end up with some really cool solutions to things.

00:25:53,700 --> 00:25:56,100
And if you want to use any of these in particular,

00:25:56,100 --> 00:25:59,080
they're just there; you can grab them.

00:26:00,080 --> 00:26:02,820
And, you know, if you do need to make your own protocols,

00:26:02,820 --> 00:26:05,740
which I highly don't recommend,

00:26:05,740 --> 00:26:08,200
but if you want to implement a protocol that someone else

00:26:08,200 --> 00:26:11,160
has written in the RFC that is actually being proposed

00:26:11,160 --> 00:26:13,570
that does not have massive security holes in it,

00:26:13,570 --> 00:26:17,780
I will note, you can do it pretty easy in Twisted.

00:26:17,790 --> 00:26:20,840
So here's like a LineReceiver protocol. So if you have

00:26:20,840 --> 00:26:23,440
a protocol that is separated by lines,

00:26:23,440 --> 00:26:27,360
it's super easy to just descend from LineReceiver,

00:26:27,360 --> 00:26:31,580
import, define the lineReceived method,

00:26:31,580 --> 00:26:34,700
and you just kind of get it for free. You don't have to worry

00:26:34,700 --> 00:26:37,960
about splitting or new lines or doing any of that junk,

00:26:37,960 --> 00:26:41,740
or really connecting to anything, because Twisted's got stuff

00:26:41,740 --> 00:26:45,520
for that already. So you can do all sorts of cool things.

00:26:45,520 --> 00:26:47,360
And thanks to Cory --

00:26:47,360 --> 00:26:51,500
[applause]

00:26:51,500 --> 00:26:54,960
So, thanks to Cory's wonderful efforts --

00:26:54,960 --> 00:26:56,880
if you haven't seen his talk,

00:26:56,880 --> 00:27:01,020
I demand that you go on YouTube when it's released and watch it.

00:27:01,020 --> 00:27:03,220
Thanks to his wonderful hyper-h2 library,

00:27:03,220 --> 00:27:07,300
we're getting closer and closer to HTTP2 being in Twisted,

00:27:07,300 --> 00:27:10,260
and aiohttp and various other things,

00:27:10,260 --> 00:27:12,760
so that's going to be really good.

00:27:14,160 --> 00:27:16,440
We do have established library support.

00:27:16,440 --> 00:27:19,200
We've been around for so long that there are lots of applications

00:27:19,200 --> 00:27:22,420
and lots of little libraries that do use us.

00:27:23,020 --> 00:27:30,780
One of my favorites is txacme by mithrandi on IRC

00:27:30,780 --> 00:27:33,460
and txsni by Glyph.

00:27:33,460 --> 00:27:37,480
So, when combined together, which txacme uses txsni,

00:27:37,480 --> 00:27:39,800
it is a Python interface to Let's Encrypt

00:27:39,800 --> 00:27:42,900
that allows you to do automatic certificate renewal.

00:27:42,900 --> 00:27:46,820
So, essentially, if you have a public-facing Python web server

00:27:46,820 --> 00:27:49,860
using Twisted, you can turn on TLS.

00:27:49,860 --> 00:27:52,880
It is pretty much zero maintenance, you just turn it on

00:27:52,880 --> 00:27:58,100
and you get an "A" from Qualys, so you have good TLS out of the box.

00:27:58,100 --> 00:28:01,500
And if you have a recent OpenSSL, it's also got

00:28:01,500 --> 00:28:04,980
perfect forward secrecy on all the platforms you care about.

00:28:04,980 --> 00:28:08,300
So it makes it really, really, easy to get a good, secure connection

00:28:08,300 --> 00:28:12,160
to your users without caring about everything underneath.

00:28:13,160 --> 00:28:16,180
There's also hendrix, which I think the author of

00:28:16,180 --> 00:28:20,480
is somewhere in here. Better be.

00:28:20,480 --> 00:28:22,580
It's a WSGI runner on top of Twisted.

00:28:22,590 --> 00:28:25,540
So it's got, like, WebSocket stuff and TLS stuff,

00:28:25,540 --> 00:28:28,570
and you can run Twisted code in your blocking code

00:28:28,570 --> 00:28:31,420
and it all works. Very cool.

00:28:31,420 --> 00:28:33,940
And that's a thing that's built on top of Twisted,

00:28:33,940 --> 00:28:37,560
because to actually provide the concurrency primitives

00:28:37,560 --> 00:28:41,460
to do all of that is Twisted, and then there's a hendrix layer,

00:28:41,460 --> 00:28:44,940
and then there's your Django or your Flask or your whatever,

00:28:44,940 --> 00:28:47,700
so if you can't wait for Django Channels,

00:28:47,700 --> 00:28:51,280
this is possibly a way to get WebSockets right now.

00:28:52,720 --> 00:28:55,160
A thing I work on that I rather like working on

00:28:55,160 --> 00:28:57,060
is Autobahn|Python, for example.

00:28:57,060 --> 00:29:00,880
It's WebSockets for Twisted and asyncio.

00:29:00,880 --> 00:29:03,860
So you can right now just grab it and get a WebSocket server

00:29:03,860 --> 00:29:08,000
and get a WAMP server and then everything kind of just works.

00:29:08,000 --> 00:29:11,540
So it's really, really fast under PyPy as well,

00:29:11,540 --> 00:29:15,500
which is really great. It can serve a bajillion connections per second.

00:29:15,500 --> 00:29:17,780
A bajillion is not a real number.

00:29:18,760 --> 00:29:22,200
We are quite a dependable base, I'd like to think.

00:29:22,200 --> 00:29:27,500
We try not to break your code, even though I probably do sometimes.

00:29:27,500 --> 00:29:31,580
I mean, we try to not break your code.

00:29:32,300 --> 00:29:34,220
We implement deprecation cycles.

00:29:34,220 --> 00:29:36,560
So if you depend on anything in Twisted,

00:29:36,560 --> 00:29:40,100
you generally have a year to notice that it's going to get removed.

00:29:40,110 --> 00:29:43,470
So, because we often have releases,

00:29:43,470 --> 00:29:46,770
you can just update, run your test suite with warnings --

00:29:46,770 --> 00:29:49,140
with walls to get all the warnings,

00:29:49,140 --> 00:29:51,420
and then see if anything that you're using

00:29:51,420 --> 00:29:55,420
may move from under you. So as long as you stay

00:29:55,420 --> 00:29:57,820
on top of it, you can pretty much upgrade with impunity.

00:29:57,820 --> 00:30:00,060
You should be running your tests to make sure you can upgrade

00:30:00,060 --> 00:30:02,920
with impunity, but you can pretty much do it.

00:30:04,620 --> 00:30:07,240
We do a lot of this to -- a lot of code review

00:30:07,240 --> 00:30:10,660
and automated testing and have a bajillion, thousands,

00:30:10,660 --> 00:30:12,820
lots and lots of tests

00:30:12,820 --> 00:30:16,260
to make sure that we don't move from under you.

00:30:16,260 --> 00:30:18,900
And Cory, for instance, has had wonderful instances

00:30:18,900 --> 00:30:21,180
finding that the deprecation policy means

00:30:21,180 --> 00:30:24,160
that even if something is bad, if people depend on it,

00:30:24,160 --> 00:30:27,760
we kind of have to stick with it. Cory's shaking his head.

00:30:27,760 --> 00:30:29,780
He thinks we should burn it to the ground.

00:30:29,780 --> 00:30:33,180
And I think we should, too -- after a year.

00:30:33,180 --> 00:30:34,940
[laughter]

00:30:36,060 --> 00:30:40,140
It is also very, very fast. Just add PyPy.

00:30:40,140 --> 00:30:43,240
Here's some graphs. Everyone like graphs.

00:30:43,240 --> 00:30:45,160
I'm not going to tell you what they mean; no,

00:30:45,160 --> 00:30:47,160
that would make them look less fantastic.

00:30:47,160 --> 00:30:53,520
No, so, for example, here's a select amount of benchmarks.

00:30:53,520 --> 00:30:57,180
So, the blue on the left is PyPy.

00:30:57,180 --> 00:30:59,140
So as you can see, it's like a --

00:30:59,140 --> 00:31:02,360
anywhere from twice as fast to, like, five times as fast.

00:31:02,360 --> 00:31:04,660
When you get to templating, it's, like, ten times as fast.

00:31:04,660 --> 00:31:09,640
You can handle, like, twice as many TCP accepts per second.

00:31:09,640 --> 00:31:13,340
SSL isn't quite as good, but, you know, it still --

00:31:13,340 --> 00:31:17,800
it will make your Python fast, because the thing that happens

00:31:17,800 --> 00:31:21,160
with, for example, uvloop, it makes your event loop fast,

00:31:21,160 --> 00:31:23,620
but PyPy will make the rest of your code fast,

00:31:23,620 --> 00:31:26,400
and sometimes that's what matters.

00:31:27,800 --> 00:31:30,200
We support basically everything under the sun.

00:31:30,200 --> 00:31:32,520
It's kind of ridiculous.

00:31:32,520 --> 00:31:34,700
Officially supported means that the tests pass,

00:31:34,700 --> 00:31:37,180
and they must pass before branches are merged.

00:31:37,180 --> 00:31:40,060
So here's an example of the platforms we support.

00:31:40,060 --> 00:31:43,900
We try and make sure that if you are using a computer

00:31:43,900 --> 00:31:47,480
that is modern and has enough users,

00:31:47,480 --> 00:31:52,120
that we will make sure that we do not try and break that computer.

00:31:52,120 --> 00:31:58,120
So that includes Windows and OS X, and even CentOS,

00:31:58,120 --> 00:32:01,140
even as much as -- well, CentOS 7 is not too bad.

00:32:01,140 --> 00:32:03,180
We did have CentOS 6 for a while,

00:32:03,180 --> 00:32:06,060
and then we stopped supporting Python 2.6.

00:32:06,060 --> 00:32:07,900
We don't support Python 2.6.

00:32:07,900 --> 00:32:09,820
You shouldn't support Python 2.6.

00:32:09,820 --> 00:32:11,700
Don't support Python 2.6.

00:32:11,700 --> 00:32:15,080
[applause]

00:32:15,080 --> 00:32:19,660
Nick is up there grinning because, yeah, you shouldn't.

00:32:19,660 --> 00:32:23,040
Unless you pay for it; then, you know, we can talk.

00:32:24,680 --> 00:32:27,540
So we do support Python 2.7 on all the platforms.

00:32:27,540 --> 00:32:31,640
We support Python 3.4 and 3.5 on Linux and FreeBSD.

00:32:31,640 --> 00:32:35,780
Some earlier versions of Twisted, like a couple months ago,

00:32:35,780 --> 00:32:38,600
do support 2.6 and 3.3.

00:32:39,280 --> 00:32:43,180
PyPy is very close. Only a handful of tests actually remain,

00:32:43,180 --> 00:32:45,420
and a lot of them are due to CPYthon assumptions --

00:32:45,420 --> 00:32:47,880
for example, how the garbage collector works

00:32:47,880 --> 00:32:52,480
or other various things. So, you know, it's close.

00:32:52,480 --> 00:32:55,560
You can run your production applications in PyPy

00:32:55,560 --> 00:32:57,880
and they'll probably work.

00:32:57,880 --> 00:33:01,960
Python 3.4 and 3.5 support is coming to Windows as well soon,

00:33:01,960 --> 00:33:06,960
and that will be really exciting because we've pigeoned

00:33:06,960 --> 00:33:14,560
the CPython JITing compiler thingy that Microsoft has been working on.

00:33:14,560 --> 00:33:17,640
You'll also be able to get fast code on Windows.

00:33:18,400 --> 00:33:21,820
And competition is good. I mean, we fit in this ecosystem

00:33:21,820 --> 00:33:27,460
even as competitors because competition is always very good.

00:33:27,460 --> 00:33:31,080
It's good because asyncio showing up meant, oh no,

00:33:31,080 --> 00:33:34,400
we need to actually, like, support Python 3 a bit better.

00:33:34,400 --> 00:33:37,040
And hopefully Twisted coming up and supporting Python 3

00:33:37,040 --> 00:33:39,960
will make sure that asyncio keeps innovating.

00:33:39,970 --> 00:33:43,650
So we all sort of guilt each other into, you know, not being the best

00:33:43,650 --> 00:33:47,640
for our users, and then eventually, you know, you all win.

00:33:48,920 --> 00:33:50,940
Now, where to from here?

00:33:52,740 --> 00:33:55,900
Twisted calling asyncio and asyncio calling Twisted

00:33:55,910 --> 00:33:57,890
is going to be the endgame.

00:33:57,890 --> 00:34:00,480
The endgame will be that you don't care what framework

00:34:00,480 --> 00:34:03,360
you're using or what libraries your framework is using,

00:34:03,360 --> 00:34:05,780
that you'll just sort of -- everything will kind of work

00:34:05,780 --> 00:34:09,180
and you can drop down to the lower levels if you want to

00:34:09,180 --> 00:34:11,800
if you need more control or more power,

00:34:11,800 --> 00:34:15,680
but that won't matter for the majority of users.

00:34:16,720 --> 00:34:19,260
I've heard that there's a mailing list,

00:34:19,260 --> 00:34:22,639
as a couple of us in the Open Space discussed coming up,

00:34:22,639 --> 00:34:24,560
so we can all collaborate on this.

00:34:24,560 --> 00:34:27,710
So we've got people from asyncio and from Twisted

00:34:27,710 --> 00:34:30,860
all wanting to work on this, and you can, too.

00:34:33,180 --> 00:34:36,600
You do want to see these two talks.

00:34:38,560 --> 00:34:41,340
They talk how about how you can build protocol libraries,

00:34:41,340 --> 00:34:43,930
which will work, which will make it easier

00:34:43,930 --> 00:34:46,960
to support multiple platforms,

00:34:46,960 --> 00:34:50,320
as well as what coroutines really are and how they work in asyncio.

00:34:50,320 --> 00:34:53,900
They mostly work the same in Twisted.

00:34:53,900 --> 00:34:57,400
Yeah, that will all be coming, hopefully 16.3 in a couple of months,

00:34:57,400 --> 00:35:00,880
but we'll see, we'll see. Needs to get code reviewed.

00:35:01,600 --> 00:35:03,520
Questions?

00:35:03,840 --> 00:35:11,800
[applause]

00:35:11,800 --> 00:35:15,300
Oh, the first Kit Kat contender steps up.

00:35:15,300 --> 00:35:17,420
(audience member) Are you concerned that frequent releases

00:35:17,420 --> 00:35:21,980
will increase fragmentation and add support load to your community?

00:35:21,980 --> 00:35:25,220
(Amber Brown) No. The reason for that is because

00:35:25,220 --> 00:35:28,800
we make it so frictionless to upgrade, at least in theory,

00:35:28,800 --> 00:35:32,040
means that upgrading from version to version

00:35:32,040 --> 00:35:34,880
is not as big as something like, say, Django.

00:35:34,880 --> 00:35:39,060
A lot of projects especially use something like requires.io

00:35:39,060 --> 00:35:42,480
to update the version of Twisted as soon as it's released.

00:35:42,480 --> 00:35:45,700
So, for example, the rackerlabs Mimic project

00:35:45,700 --> 00:35:48,750
I think use requires -- yep, they use requires,

00:35:48,750 --> 00:35:51,140
as well as a whole bunch of open source projects

00:35:51,140 --> 00:35:54,700
based on Twisted, so that really updating is --

00:35:54,700 --> 00:35:56,840
we get a pull request from requires.io,

00:35:56,840 --> 00:35:59,420
the tests run, we see if there's any new warnings,

00:35:59,420 --> 00:36:02,300
see if there's any test failures and support that.

00:36:02,300 --> 00:36:05,000
We do have a lot of applications -- for example, Buildbot,

00:36:05,000 --> 00:36:07,010
which works on Twisted,

00:36:07,010 --> 00:36:11,060
that supports all the way back to Twisted 8.2, so from 2008.

00:36:11,060 --> 00:36:14,460
Autobahn itself supports, like, 12.1 and up.

00:36:14,460 --> 00:36:16,740
So there's not really that much effort

00:36:16,740 --> 00:36:20,100
in supporting lots and lots of versions of Twisted

00:36:20,100 --> 00:36:22,640
because we try and make sure that we deprecate things

00:36:22,640 --> 00:36:25,480
and make sure it doesn't move too far under us.

00:36:25,480 --> 00:36:27,320
Here, do you want your Kit Kat?

00:36:27,320 --> 00:36:29,460
(audience member) Sure.

00:36:29,460 --> 00:36:32,060
(Amber Brown) Oh, OK. Awful throw.

00:36:32,400 --> 00:36:34,300
Any other questions?

00:36:34,300 --> 00:36:35,960
[laughter]

00:36:35,960 --> 00:36:37,540
OK, go ahead.

00:36:37,540 --> 00:36:39,460
(audience member) Are there any additions to asyncio

00:36:39,460 --> 00:36:42,320
that you are advocating for beyond bug fixes?

00:36:44,980 --> 00:36:48,260
(Amber Brown) Me personally? Not too particularly.

00:36:48,260 --> 00:36:51,740
Like, asyncio is good at its size.

00:36:51,750 --> 00:36:55,870
I think it defines the future, which even though we don't use ourselves

00:36:55,870 --> 00:36:59,090
might be good for other platforms that want to make a better future.

00:36:59,090 --> 00:37:03,560
For example, uvloop has its own future implemented in C that is much faster,

00:37:03,560 --> 00:37:07,020
and the standard reactor, sort of API sort of all works.

00:37:07,020 --> 00:37:09,780
So I don't think that asyncio should grow bigger,

00:37:09,780 --> 00:37:12,420
but I think things that use asyncio

00:37:12,420 --> 00:37:15,780
should get bigger, if that makes sense.

00:37:18,940 --> 00:37:22,500
(audience member) You spoke a bit about Tornado

00:37:22,500 --> 00:37:25,880
as it relates to Twisted.

00:37:25,880 --> 00:37:29,860
Is there news of the synchronous frameworks

00:37:29,860 --> 00:37:32,220
picking up on this asyncio now that it's --

00:37:32,220 --> 00:37:35,480
the barrier to their entry to this asynchronous stuff is so lower?

00:37:35,480 --> 00:37:38,460
(Amber Brown) So, as far as frameworks

00:37:38,460 --> 00:37:41,250
making the jump from synchronous to asynchronous,

00:37:41,250 --> 00:37:44,240
the closest that we've got is Django Channels,

00:37:44,240 --> 00:37:49,120
which sort of -- yeah, we've got Jacob Kaplan-Moss going, "Yeah!"

00:37:49,120 --> 00:37:53,140
So what Django Channels is is it's a frontend

00:37:53,140 --> 00:37:55,360
that handles all the incoming requests,

00:37:55,360 --> 00:37:57,340
puts the request on, like, a Redis key,

00:37:57,340 --> 00:37:59,460
and then synchronous workers work on it.

00:37:59,460 --> 00:38:02,660
So it doesn't actually make your code synchronous,

00:38:02,660 --> 00:38:05,440
but it splits it up and makes it smaller.

00:38:05,440 --> 00:38:08,120
And because there's that barrier

00:38:08,120 --> 00:38:11,300
in between the thing that accepts the connections off the network

00:38:11,300 --> 00:38:13,800
and the thing that comes up with the response,

00:38:13,800 --> 00:38:16,780
that there is actually room in that specification

00:38:16,780 --> 00:38:20,460
to have an asynchronous Django worker that works on your thing,

00:38:20,460 --> 00:38:22,960
that works in tandem with your synchronous ones

00:38:22,960 --> 00:38:24,990
and you can kind of switch between the two.

00:38:24,990 --> 00:38:28,360
So as far as running it in a thread pool,

00:38:28,360 --> 00:38:31,820
there's been no progress on making the frameworks

00:38:31,830 --> 00:38:35,230
themselves asynchronous, but there's ways of making it

00:38:35,230 --> 00:38:38,420
so they can become asynchronous in the future.

00:38:39,700 --> 00:38:41,460
Kit Kat.

00:38:41,940 --> 00:38:44,040
Best idea I ever had.

00:38:45,480 --> 00:38:51,860
(audience member) So, you mentioned four different patterns,

00:38:51,860 --> 00:38:55,740
four different object-assisted patterns for managing concurrency

00:38:55,740 --> 00:39:02,160
that have ebbed and waned throughout the past decade.

00:39:02,160 --> 00:39:06,540
If you could advocate for one single change

00:39:06,540 --> 00:39:09,780
to the Python language and standard library,

00:39:09,780 --> 00:39:14,020
what would you advocate for, keeping in mind that we seem to be

00:39:14,020 --> 00:39:17,120
constantly iterating over new kinds of concurrency?

00:39:17,120 --> 00:39:19,000
(Amber Brown) If I could change anything

00:39:19,000 --> 00:39:22,880
in the Python standard library, I would not have Python 3 happen.

00:39:22,880 --> 00:39:25,280
[laughter]

00:39:25,280 --> 00:39:29,280
Now, I love Python 3. I think it made brilliant decisions

00:39:29,280 --> 00:39:32,340
and that it has brilliant things in it,

00:39:32,340 --> 00:39:35,380
but the transition wasn't that good between 2 and 3,

00:39:35,380 --> 00:39:39,220
which, you know, it's just happened and we've had to live with it.

00:39:39,220 --> 00:39:43,400
But I think that would have been -- that there would be less time

00:39:43,400 --> 00:39:47,100
porting to Python 3 and worrying about 2-3 compatibility

00:39:47,100 --> 00:39:49,980
so that more time would be able to be spent

00:39:49,980 --> 00:39:53,080
on new, innovative, cool things in Python.

00:39:53,080 --> 00:39:55,760
So, I think that if we didn't have all these people

00:39:55,760 --> 00:39:59,720
worrying about 2-3 compatibility like me, and people that review my code

00:39:59,720 --> 00:40:05,660
and people that, for example, back ported asyncio to Python 2.7

00:40:05,660 --> 00:40:09,840
as Trollius, I think that that time could be used much more smartly

00:40:09,840 --> 00:40:11,860
and have much richer ideas.

00:40:11,860 --> 00:40:15,260
And I'm not smart enough to come up with any better ways.

00:40:15,260 --> 00:40:18,660
I mean, async/await is pretty much perfect, I'd say.

00:40:18,660 --> 00:40:21,340
There's a little bit of glitches in the implementation

00:40:21,340 --> 00:40:24,120
as far as how asyncio interacts with it,

00:40:24,120 --> 00:40:27,060
but other than that I'd say it's pretty good.

00:40:31,220 --> 00:40:33,260
(host) Anyone else?

00:40:33,260 --> 00:40:35,640
(Amber Brown) James, You get a Kit Kat anyway.

00:40:35,640 --> 00:40:37,680
[James inaudible]

00:40:37,680 --> 00:40:40,380
(Amber Brown) Well, I've got, like, 30 here.

00:40:40,940 --> 00:40:42,840
(audience member) OK, so, because you're mentioning

00:40:42,840 --> 00:40:45,240
Python 3 and the standard library,

00:40:45,240 --> 00:40:47,260
how do you feel about the future of Twisted

00:40:47,260 --> 00:40:50,300
as the thing that isn't the standard library?

00:40:50,300 --> 00:40:52,320
Because, as we all know, the standard library is where

00:40:52,320 --> 00:40:54,880
things go to die and be frozen forever.

00:40:54,880 --> 00:40:57,700
So Twisted is the place where actual new, innovative work

00:40:57,700 --> 00:41:00,840
would happen on asynchronous programming in Python.

00:41:01,240 --> 00:41:03,780
(Amber Brown) I do think that asyncio

00:41:03,780 --> 00:41:05,880
after two or three more years

00:41:05,880 --> 00:41:09,290
will essentially stay static until the end of time.

00:41:09,290 --> 00:41:13,240
Asyncio itself is more of an idea

00:41:13,240 --> 00:41:16,020
than an implementation, I think, ultimately,

00:41:16,020 --> 00:41:20,900
because you have the reactor -- sorry, the event loop

00:41:20,900 --> 00:41:24,120
and the Futures and the APIs that provide it,

00:41:24,120 --> 00:41:27,940
and that will all stay the same, and I think that eventually

00:41:27,940 --> 00:41:31,420
you're going to have asynchronous frameworks that aren't asyncio

00:41:31,420 --> 00:41:33,300
that will implement those same things

00:41:33,300 --> 00:41:36,040
but aren't the same as the concrete asyncio.

00:41:36,040 --> 00:41:39,700
So I think that -- you know, I think it will keep going

00:41:39,700 --> 00:41:43,400
because it is sort of a separate project posted on PyPy --

00:41:43,400 --> 00:41:48,360
er, PyPI, not PyPy (I mean, you can run it in PyPy, but whatever),

00:41:48,360 --> 00:41:53,500
which PyPy 3.3 beta 1 -- alpha 1 just released. Go try it out.

00:41:53,500 --> 00:41:57,780
But yeah, so I think that being outside the standard library

00:41:57,780 --> 00:41:59,900
is good in this case,

00:41:59,900 --> 00:42:02,460
but I don't think asyncio will really die

00:42:02,460 --> 00:42:04,620
because of lack of maintainership,

00:42:04,620 --> 00:42:08,000
but it will die because not much needs to happen to it.

00:42:08,000 --> 00:42:11,380
Or it won't die, it will just be complete.

00:42:13,500 --> 00:42:15,420
Now you get a Kit Kat.

00:42:19,580 --> 00:42:22,440
Maybe I should try over-arm, just ditch it.

00:42:22,920 --> 00:42:26,580
Any other questions? OK, how about some statements?

00:42:26,580 --> 00:42:28,900
[laughter]

00:42:28,900 --> 00:42:30,900
Now you get a Kit Kat now that the questions are done

00:42:30,900 --> 00:42:32,860
to make a statement.

00:42:32,860 --> 00:42:35,420
Glyph, do you like making statements?

00:42:35,660 --> 00:42:37,560
(Glyph) I think you said it all. Thank you.

00:42:39,920 --> 00:42:44,600
(audience member) So, if async/await is perfect,

00:42:44,600 --> 00:42:47,540
why does composability with it suck so much?

00:42:47,860 --> 00:42:49,520
(Amber Brown) Sorry?

00:42:49,520 --> 00:42:51,520
(audience member) Sorry, let me phrase that as a statement.

00:42:51,520 --> 00:42:54,680
[laughter]

00:42:54,680 --> 00:42:56,960
(Amber Brown) Sorry, I didn't understand the word you said.

00:42:56,960 --> 00:43:00,340
(audience member) Async/await doesn't compose.

00:43:00,340 --> 00:43:02,780
I contend that this makes it imperfect.

00:43:02,780 --> 00:43:04,880
[laughter]

00:43:04,880 --> 00:43:06,800
(Amber Brown) I would agree with you.

00:43:06,800 --> 00:43:10,180
Now, the thing about async/await is that you can async/await

00:43:10,180 --> 00:43:13,500
on a Deferred or on a Future, but you can still use a Deferred

00:43:13,500 --> 00:43:16,200
and a Future as a Deferred or a Future,

00:43:16,200 --> 00:43:19,200
which gives you the composability inside of that.

00:43:19,200 --> 00:43:21,160
But at the end, you return a Deferred,

00:43:21,170 --> 00:43:23,730
so if you don't need the great composability,

00:43:23,730 --> 00:43:26,460
for example if you're just throwing some stupid script together,

00:43:26,460 --> 00:43:28,680
to, like, download the entire Internet,

00:43:28,680 --> 00:43:31,040
then you don't have to worry about all that composability

00:43:31,040 --> 00:43:33,420
because you'll use it once and throw it away, and sort of --

00:43:33,420 --> 00:43:37,280
you don't need to worry about the long-term benefits

00:43:37,280 --> 00:43:39,440
that composability give you.

00:43:39,440 --> 00:43:44,840
So I think that by having an object that can be awaited,

00:43:44,840 --> 00:43:47,720
that you still do get the good composability

00:43:47,720 --> 00:43:51,200
and, you know, features of that, but you just make it easier to use

00:43:51,200 --> 00:43:54,040
for some people, if that makes sense.

00:43:56,480 --> 00:43:58,880
Do I give you a Kit Kat?

00:43:58,880 --> 00:44:00,700
(audience member) If you want.

00:44:00,700 --> 00:44:02,580
(Amber Brown) Come out here, I'm not going to ditch it

00:44:02,580 --> 00:44:05,540
at the group full of people. Yes!

00:44:05,540 --> 00:44:08,180
[applause]

00:44:08,180 --> 00:44:09,980
It's like cricket.

00:44:09,980 --> 00:44:11,780
[audience member inaudible]

00:44:11,780 --> 00:44:13,220
[laughter]

00:44:13,220 --> 00:44:16,300
The actual British person just said that it's not like cricket.

00:44:16,300 --> 00:44:18,080
[laughter]

00:44:18,080 --> 00:44:20,000
Anyone else?

00:44:20,560 --> 00:44:22,220
No?

00:44:22,780 --> 00:44:24,700
OK, you all just get Kit Kats.

00:44:24,700 --> 00:44:27,720
[cheering, applause]

00:44:27,720 --> 00:44:31,280
[laughter]

00:44:31,280 --> 00:44:33,160
Thank you, everyone.

00:44:33,160 --> 00:44:34,680
[applause]

00:44:34,680 --> 00:44:36,580
(host) Thank you, everybody.

00:44:36,580 --> 00:44:38,580

YouTube URL: https://www.youtube.com/watch?v=82vuCZ4FLFE


