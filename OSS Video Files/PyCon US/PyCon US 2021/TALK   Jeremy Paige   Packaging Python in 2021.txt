Title: TALK   Jeremy Paige   Packaging Python in 2021
Publication date: 2021-05-29
Playlist: PyCon US 2021
Description: 
	Five years after the inception of pyproject.toml the Python packaging landscape is now richer than ever. Despite all the new choices when setting up a project, setup.py's roll is diminishing. Discover why it may soon be absent and what to use in its place.

Slides: https://docs.google.com/presentation/d/19K_QccShcWncnFK-6Q4JvD1Ictg1VYTMiL5xEZjA8gc/edit?usp=sharing
Captions: 
	00:00:04,170 --> 00:00:11,869
[Music]

00:00:14,400 --> 00:00:17,760
good morning and welcome everyone

00:00:16,160 --> 00:00:20,000
i'm so excited to be here with you

00:00:17,760 --> 00:00:23,039
virtually at pycon

00:00:20,000 --> 00:00:24,640
this is packaging python in 2021

00:00:23,039 --> 00:00:26,320
it's everything you need to know about

00:00:24,640 --> 00:00:28,840
the latest standards

00:00:26,320 --> 00:00:30,000
and how you can write easily buildable

00:00:28,840 --> 00:00:31,760
projects

00:00:30,000 --> 00:00:33,520
i'll be detailing how to maintain

00:00:31,760 --> 00:00:36,880
explicit predictable

00:00:33,520 --> 00:00:38,559
and readable build information this is

00:00:36,880 --> 00:00:40,879
information that can be used by both

00:00:38,559 --> 00:00:45,039
humans and machines to better understand

00:00:40,879 --> 00:00:47,280
your project today i'll be focusing on

00:00:45,039 --> 00:00:48,960
how to use the new pi project.tamul

00:00:47,280 --> 00:00:50,879
configuration

00:00:48,960 --> 00:00:54,239
along with the modern build front-end

00:00:50,879 --> 00:00:56,239
back-end paradigm that comes with it

00:00:54,239 --> 00:00:58,640
this file was first introduced into the

00:00:56,239 --> 00:01:00,559
ecosystem five years ago

00:00:58,640 --> 00:01:02,719
but it's gone through some changes and

00:01:00,559 --> 00:01:05,040
has only recently been marked as a final

00:01:02,719 --> 00:01:08,000
standard

00:01:05,040 --> 00:01:09,200
pi project.tamil is meant to hold core

00:01:08,000 --> 00:01:12,560
project metadata

00:01:09,200 --> 00:01:14,640
in a predictable location it's not meant

00:01:12,560 --> 00:01:15,040
to be a blueprint that describes step by

00:01:14,640 --> 00:01:17,759
step

00:01:15,040 --> 00:01:19,520
exactly how to build your project

00:01:17,759 --> 00:01:21,200
instead it's more of a sign

00:01:19,520 --> 00:01:22,799
that points the read in the direction of

00:01:21,200 --> 00:01:24,479
some specific tools

00:01:22,799 --> 00:01:27,840
and other environment that the project

00:01:24,479 --> 00:01:30,079
needs to prepare its own blueprint

00:01:27,840 --> 00:01:31,119
although it might not contain enough

00:01:30,079 --> 00:01:33,280
information

00:01:31,119 --> 00:01:35,680
to completely build your project

00:01:33,280 --> 00:01:37,280
whatever metadata is contained within

00:01:35,680 --> 00:01:39,439
should we treat as canonical for the

00:01:37,280 --> 00:01:41,759
project

00:01:39,439 --> 00:01:42,799
then the actual build tool specified by

00:01:41,759 --> 00:01:44,960
this file

00:01:42,799 --> 00:01:46,479
can come along and require additional

00:01:44,960 --> 00:01:48,720
configuration

00:01:46,479 --> 00:01:52,560
either in the same pi project autumnal

00:01:48,720 --> 00:01:52,560
or its own configuration files

00:01:53,040 --> 00:01:57,840
if you weren't aware tomml stands for

00:01:55,280 --> 00:01:59,600
tom's obvious minimal language

00:01:57,840 --> 00:02:02,320
it's a configuration format that's

00:01:59,600 --> 00:02:04,560
similar to yaml or ini

00:02:02,320 --> 00:02:06,840
become popular choice for packaging

00:02:04,560 --> 00:02:09,679
systems across many programming

00:02:06,840 --> 00:02:11,760
languages

00:02:09,679 --> 00:02:14,640
however it's not only build metadata

00:02:11,760 --> 00:02:16,480
that ends up in pi project.tamil

00:02:14,640 --> 00:02:18,239
despite that being its singular goal

00:02:16,480 --> 00:02:20,319
when it was conceived

00:02:18,239 --> 00:02:22,400
having a single configuration file

00:02:20,319 --> 00:02:23,360
that's known to exist for all python

00:02:22,400 --> 00:02:25,360
projects

00:02:23,360 --> 00:02:27,760
was just too attractive for many tool

00:02:25,360 --> 00:02:30,160
maintainers to avoid

00:02:27,760 --> 00:02:32,400
and over time space was made in the tom

00:02:30,160 --> 00:02:32,959
layout for arbitrary python tools to

00:02:32,400 --> 00:02:36,160
share

00:02:32,959 --> 00:02:37,599
not conflict with one another some

00:02:36,160 --> 00:02:39,840
projects such as black

00:02:37,599 --> 00:02:40,879
only allow authors to specify

00:02:39,840 --> 00:02:44,319
configuration

00:02:40,879 --> 00:02:47,120
in pi project.tamil

00:02:44,319 --> 00:02:48,640
while other projects such as isort allow

00:02:47,120 --> 00:02:50,640
the author to choose

00:02:48,640 --> 00:02:51,760
either write the configuration in pi

00:02:50,640 --> 00:02:54,560
project.tunnel

00:02:51,760 --> 00:02:55,360
and consolidate with other tools or

00:02:54,560 --> 00:02:58,879
write it all out

00:02:55,360 --> 00:03:01,280
to its own tool specific file

00:02:58,879 --> 00:03:01,920
it is legal for pi project.tunnel to

00:03:01,280 --> 00:03:04,400
contain

00:03:01,920 --> 00:03:06,400
this sort of tool configuration but no

00:03:04,400 --> 00:03:08,319
build system

00:03:06,400 --> 00:03:10,239
however in this case the project is

00:03:08,319 --> 00:03:12,480
created as legacy

00:03:10,239 --> 00:03:14,720
and to a build tool it's the same as if

00:03:12,480 --> 00:03:18,319
it didn't have a pi project outdoor file

00:03:14,720 --> 00:03:20,360
at all

00:03:18,319 --> 00:03:24,080
here's an example of what a minimal pi

00:03:20,360 --> 00:03:24,080
project.tamul might look like

00:03:24,560 --> 00:03:28,640
notice in the middle the project table

00:03:26,400 --> 00:03:30,319
contains only static data

00:03:28,640 --> 00:03:32,000
that is required to be part of any

00:03:30,319 --> 00:03:34,640
distribution whatever

00:03:32,000 --> 00:03:36,480
its type or whatever tool is used to

00:03:34,640 --> 00:03:38,159
create it

00:03:36,480 --> 00:03:39,599
there are other possible project fields

00:03:38,159 --> 00:03:41,440
that can go in this table

00:03:39,599 --> 00:03:43,440
but not all of them are required to be

00:03:41,440 --> 00:03:45,680
filled out

00:03:43,440 --> 00:03:48,319
the project table is very new and not is

00:03:45,680 --> 00:03:50,400
supported by all build tools

00:03:48,319 --> 00:03:51,840
but look here in the future for where

00:03:50,400 --> 00:03:55,360
all projects might

00:03:51,840 --> 00:03:55,360
contain their core metadata

00:03:56,720 --> 00:04:00,480
you can see lower down that the black

00:03:58,319 --> 00:04:01,760
configuration is in the sub table under

00:04:00,480 --> 00:04:03,840
tool

00:04:01,760 --> 00:04:05,840
within this space black is free to

00:04:03,840 --> 00:04:08,640
define any interface it wants for its

00:04:05,840 --> 00:04:08,640
own options

00:04:08,959 --> 00:04:13,280
back at the top you'll see the build

00:04:11,040 --> 00:04:14,640
system configuration table

00:04:13,280 --> 00:04:16,639
where all the backend builder

00:04:14,640 --> 00:04:18,639
requirements are listed out

00:04:16,639 --> 00:04:21,680
along with a single entry point into a

00:04:18,639 --> 00:04:23,680
specific build backend

00:04:21,680 --> 00:04:25,440
a build backend might not be what you're

00:04:23,680 --> 00:04:26,560
used to selecting when defining how to

00:04:25,440 --> 00:04:28,320
build a project

00:04:26,560 --> 00:04:29,600
but it actually gives you and your

00:04:28,320 --> 00:04:32,000
project's consumers

00:04:29,600 --> 00:04:35,360
more flexibility to choose the tools

00:04:32,000 --> 00:04:35,360
that everyone wants to use

00:04:37,280 --> 00:04:41,680
what used to always be a single tool

00:04:39,120 --> 00:04:42,000
chain has now been formally separated

00:04:41,680 --> 00:04:45,600
into

00:04:42,000 --> 00:04:48,560
three categories the old giant

00:04:45,600 --> 00:04:49,440
build tools would often lock downstream

00:04:48,560 --> 00:04:52,320
consumers

00:04:49,440 --> 00:04:53,520
such as packagers installers or other

00:04:52,320 --> 00:04:55,360
maintainers

00:04:53,520 --> 00:04:57,120
to always choose the same tools that the

00:04:55,360 --> 00:04:59,199
author used when first building the

00:04:57,120 --> 00:05:01,039
project

00:04:59,199 --> 00:05:02,560
but these new categories which

00:05:01,039 --> 00:05:04,639
interconnect through a set of standard

00:05:02,560 --> 00:05:05,840
apis that are independent of any one

00:05:04,639 --> 00:05:09,120
project

00:05:05,840 --> 00:05:11,199
allow each part to operate independently

00:05:09,120 --> 00:05:14,320
if in the end they are all defined in

00:05:11,199 --> 00:05:16,320
some larger project

00:05:14,320 --> 00:05:17,680
there are three main tool categories

00:05:16,320 --> 00:05:19,440
used in turning

00:05:17,680 --> 00:05:21,680
source code into something you can

00:05:19,440 --> 00:05:24,479
import as a package

00:05:21,680 --> 00:05:27,039
the build backend is the first it turns

00:05:24,479 --> 00:05:30,160
source code into a distribution format

00:05:27,039 --> 00:05:30,160
such as a wheel file

00:05:30,479 --> 00:05:34,560
a project build backend is chosen by the

00:05:33,280 --> 00:05:38,000
project author

00:05:34,560 --> 00:05:39,440
and record in pi project.tamil

00:05:38,000 --> 00:05:42,560
the only one of these tools that

00:05:39,440 --> 00:05:42,560
actually gets recorded

00:05:43,520 --> 00:05:48,000
next up is the build front end which

00:05:45,680 --> 00:05:49,600
handles user interaction

00:05:48,000 --> 00:05:52,639
for instance it might provide a command

00:05:49,600 --> 00:05:53,919
line interface display progress to the

00:05:52,639 --> 00:05:56,639
user

00:05:53,919 --> 00:05:57,039
or show errors from either bad metadata

00:05:56,639 --> 00:06:00,240
or

00:05:57,039 --> 00:06:02,800
problems on the build back end

00:06:00,240 --> 00:06:04,400
build friends also must execute the back

00:06:02,800 --> 00:06:06,319
end in an environment that's actually

00:06:04,400 --> 00:06:07,919
suitable for building

00:06:06,319 --> 00:06:10,319
so this could involve installing

00:06:07,919 --> 00:06:12,400
dependencies for the build backend

00:06:10,319 --> 00:06:14,560
creating a virtual environment for it

00:06:12,400 --> 00:06:17,600
setting its working directory

00:06:14,560 --> 00:06:19,280
and other similar tasks although it's

00:06:17,600 --> 00:06:21,759
not very common

00:06:19,280 --> 00:06:23,280
users wanting to build a project can

00:06:21,759 --> 00:06:26,560
select a different front end

00:06:23,280 --> 00:06:28,080
than the author used provided both that

00:06:26,560 --> 00:06:31,600
build front-end and back-end

00:06:28,080 --> 00:06:31,600
respect these new apis

00:06:33,120 --> 00:06:37,440
the integration front end is not

00:06:35,600 --> 00:06:40,080
actually involved in the build process

00:06:37,440 --> 00:06:43,280
per se as by this point there already

00:06:40,080 --> 00:06:45,360
exists a built distribution file

00:06:43,280 --> 00:06:47,600
but it does install this distribution

00:06:45,360 --> 00:06:49,120
file into your python environment

00:06:47,600 --> 00:06:51,120
and i think that's probably the most

00:06:49,120 --> 00:06:52,560
frequent way any of us actually interact

00:06:51,120 --> 00:06:55,759
with distributions

00:06:52,560 --> 00:06:58,080
is by importing them

00:06:55,759 --> 00:07:00,160
an integration front end is capable of

00:06:58,080 --> 00:07:02,560
not just installing distributions

00:07:00,160 --> 00:07:04,160
but also resolving that distribution's

00:07:02,560 --> 00:07:06,160
dependencies

00:07:04,160 --> 00:07:08,080
possibly going out and finding them

00:07:06,160 --> 00:07:10,160
locally over the internet

00:07:08,080 --> 00:07:14,080
maybe downloading them and also

00:07:10,160 --> 00:07:14,080
installing those distributions

00:07:14,479 --> 00:07:18,880
a project author has no control over

00:07:17,280 --> 00:07:20,319
what integration front-end

00:07:18,880 --> 00:07:22,240
is actually used to install our

00:07:20,319 --> 00:07:24,800
distribution

00:07:22,240 --> 00:07:26,400
in fact probably all public projects

00:07:24,800 --> 00:07:30,400
right now are being installed

00:07:26,400 --> 00:07:32,960
by multiple integration front-ends

00:07:30,400 --> 00:07:34,479
for many of you there's just one tool

00:07:32,960 --> 00:07:38,240
that's done all these tasks

00:07:34,479 --> 00:07:40,560
and that's pip pip often handles

00:07:38,240 --> 00:07:42,240
all of them for you at once and hides

00:07:40,560 --> 00:07:45,120
the complexity of having to do different

00:07:42,240 --> 00:07:48,639
jobs behind the scenes

00:07:45,120 --> 00:07:50,319
yet pip is not actually a packaging tool

00:07:48,639 --> 00:07:52,479
even though it's great i believe it's

00:07:50,319 --> 00:07:53,199
historic use as the one command line

00:07:52,479 --> 00:07:55,360
tool

00:07:53,199 --> 00:07:57,520
that's used to fulfill any kind of

00:07:55,360 --> 00:07:59,520
requirement for python

00:07:57,520 --> 00:08:01,360
has blurred how python used to see these

00:07:59,520 --> 00:08:03,360
different categories

00:08:01,360 --> 00:08:07,280
and some cases made it hard for them to

00:08:03,360 --> 00:08:07,280
see the need for them existing at all

00:08:09,199 --> 00:08:12,879
so to show why pip was originally needed

00:08:11,440 --> 00:08:15,120
for python

00:08:12,879 --> 00:08:16,080
and why python now needs to go beyond

00:08:15,120 --> 00:08:18,080
pip

00:08:16,080 --> 00:08:20,240
we're going to take a brief look at how

00:08:18,080 --> 00:08:23,199
packaging has evolved alongside the

00:08:20,240 --> 00:08:23,199
python language

00:08:24,080 --> 00:08:30,000
it all started with disc details this

00:08:26,720 --> 00:08:31,840
utils was the original packaging library

00:08:30,000 --> 00:08:35,919
it was released as part of the python

00:08:31,840 --> 00:08:38,839
language in version 1.6

00:08:35,919 --> 00:08:41,519
it also gave us the current sub.py

00:08:38,839 --> 00:08:44,560
convention and the top level directory

00:08:41,519 --> 00:08:47,279
to build projects

00:08:44,560 --> 00:08:49,120
the common setup.py script can act as

00:08:47,279 --> 00:08:51,920
either a build front end

00:08:49,120 --> 00:08:53,440
or a sort of integration front-end as

00:08:51,920 --> 00:08:56,080
this cli provided

00:08:53,440 --> 00:08:56,480
by importing disk details allows for

00:08:56,080 --> 00:08:58,880
both

00:08:56,480 --> 00:09:02,080
building from source and then installing

00:08:58,880 --> 00:09:04,560
that build into your environment

00:09:02,080 --> 00:09:05,120
however just details did not originally

00:09:04,560 --> 00:09:07,920
declare

00:09:05,120 --> 00:09:09,360
anyway allow any way to declare

00:09:07,920 --> 00:09:11,279
requirements

00:09:09,360 --> 00:09:13,120
let alone go out and resolve those

00:09:11,279 --> 00:09:15,120
dependencies

00:09:13,120 --> 00:09:16,240
so it goes a little beyond what a build

00:09:15,120 --> 00:09:18,080
front end is

00:09:16,240 --> 00:09:21,600
but not quite so far to be an

00:09:18,080 --> 00:09:24,160
integration front end in my opinion

00:09:21,600 --> 00:09:25,680
this utils therefore is kind of like a

00:09:24,160 --> 00:09:27,600
build back end for which

00:09:25,680 --> 00:09:28,959
you as a project author have to write

00:09:27,600 --> 00:09:32,000
your own build front end

00:09:28,959 --> 00:09:34,880
each time as you write a new setup.py

00:09:32,000 --> 00:09:34,880
for every project

00:09:35,120 --> 00:09:38,880
also note that this details has been

00:09:37,040 --> 00:09:40,320
marked deprecated in the latest version

00:09:38,880 --> 00:09:42,000
of python

00:09:40,320 --> 00:09:45,440
which definitely makes it not a good

00:09:42,000 --> 00:09:45,440
choice for new projects

00:09:47,200 --> 00:09:52,000
after years nothing but dist utils setup

00:09:50,160 --> 00:09:54,240
tools emerged on the scene

00:09:52,000 --> 00:09:57,200
as a popular placement that exists

00:09:54,240 --> 00:10:00,080
outside the standard library

00:09:57,200 --> 00:10:01,440
it continues the use of setup.py for all

00:10:00,080 --> 00:10:03,839
projects

00:10:01,440 --> 00:10:05,680
meaning that project authors are still

00:10:03,839 --> 00:10:07,839
to some degree writing their own build

00:10:05,680 --> 00:10:10,079
front-ends

00:10:07,839 --> 00:10:12,079
however setup tools also came with a

00:10:10,079 --> 00:10:13,839
script called easy install

00:10:12,079 --> 00:10:16,000
which did act as an integration

00:10:13,839 --> 00:10:16,800
front-end and definitely a better one

00:10:16,000 --> 00:10:20,079
than calling

00:10:16,800 --> 00:10:22,800
straight setup.py scripts

00:10:20,079 --> 00:10:25,240
it was capable of resolving dependencies

00:10:22,800 --> 00:10:27,839
and downloading distributions from

00:10:25,240 --> 00:10:29,600
pipi.org which was originally brought

00:10:27,839 --> 00:10:33,839
online around the same time as

00:10:29,600 --> 00:10:33,839
setup tools first release

00:10:33,920 --> 00:10:38,399
those setup tools was originally

00:10:35,920 --> 00:10:41,440
released to duplicate and extend

00:10:38,399 --> 00:10:43,680
all the functionality this utils had

00:10:41,440 --> 00:10:46,880
its use as a front end of any kind right

00:10:43,680 --> 00:10:48,640
now is being actively moved away from

00:10:46,880 --> 00:10:51,200
much of the original functionality it

00:10:48,640 --> 00:10:54,560
first gave the scripts that imported it

00:10:51,200 --> 00:10:56,160
has been removed functionality such as

00:10:54,560 --> 00:10:58,160
running tests

00:10:56,160 --> 00:11:00,079
or being able to declare requirements

00:10:58,160 --> 00:11:01,600
for setting up your code

00:11:00,079 --> 00:11:03,279
or building your code using those

00:11:01,600 --> 00:11:06,399
special requirements

00:11:03,279 --> 00:11:08,800
are all no longer supported

00:11:06,399 --> 00:11:10,320
soon setup tools projects will only be

00:11:08,800 --> 00:11:13,040
able to be built

00:11:10,320 --> 00:11:16,959
when using a build front end that

00:11:13,040 --> 00:11:19,839
complies to the new front specification

00:11:16,959 --> 00:11:22,720
however its use of the build back end is

00:11:19,839 --> 00:11:24,800
still very important and not going away

00:11:22,720 --> 00:11:26,240
it's likely to remain the core of python

00:11:24,800 --> 00:11:29,680
packaging

00:11:26,240 --> 00:11:29,680
just as build buildback ends

00:11:31,360 --> 00:11:35,279
after setup tools it's still another

00:11:33,279 --> 00:11:37,440
couple of years until python is finally

00:11:35,279 --> 00:11:39,200
get a proper integration front end with

00:11:37,440 --> 00:11:41,920
pip

00:11:39,200 --> 00:11:43,600
pip makes using projects easier by

00:11:41,920 --> 00:11:46,560
hiding the details of using

00:11:43,600 --> 00:11:48,399
many setup.pys directly in order to

00:11:46,560 --> 00:11:50,160
satisfy a set of requirements for a

00:11:48,399 --> 00:11:52,320
project

00:11:50,160 --> 00:11:53,760
as a tool it's definitely superior to

00:11:52,320 --> 00:11:56,560
easy install

00:11:53,760 --> 00:11:58,160
and acted as a full replacement even it

00:11:56,560 --> 00:12:00,240
would be a few more years

00:11:58,160 --> 00:12:02,320
until easy install was officially marked

00:12:00,240 --> 00:12:04,560
deprecated

00:12:02,320 --> 00:12:06,240
pip was also python's first integration

00:12:04,560 --> 00:12:07,519
front-end that allowed dependencies to

00:12:06,240 --> 00:12:11,040
be installed

00:12:07,519 --> 00:12:12,880
directly from via vcs addresses

00:12:11,040 --> 00:12:14,720
so you can thank it for being able to

00:12:12,880 --> 00:12:16,959
install that project directly from a

00:12:14,720 --> 00:12:20,399
github link

00:12:16,959 --> 00:12:22,320
so pip is not a build tool it originally

00:12:20,399 --> 00:12:22,800
only knew how to build projects from

00:12:22,320 --> 00:12:24,800
source

00:12:22,800 --> 00:12:27,519
because it knew the special way to

00:12:24,800 --> 00:12:30,959
invoke a setup.py

00:12:27,519 --> 00:12:30,959
which was the build frontnet

00:12:31,040 --> 00:12:36,240
after the build backend was formalized

00:12:34,000 --> 00:12:39,440
pip did then learn how to build

00:12:36,240 --> 00:12:41,040
call build backends directly which

00:12:39,440 --> 00:12:43,279
technically also makes it a build

00:12:41,040 --> 00:12:45,360
front-end but i think it's a pretty poor

00:12:43,279 --> 00:12:48,160
one as it's missing some important

00:12:45,360 --> 00:12:49,600
functionality you would want from a full

00:12:48,160 --> 00:12:52,160
build front end

00:12:49,600 --> 00:12:55,040
like the ability to create s-dist file

00:12:52,160 --> 00:12:55,040
distributions

00:12:57,200 --> 00:13:02,399
so if pip already worked as a front-end

00:13:00,399 --> 00:13:04,000
and setup tools is still working great

00:13:02,399 --> 00:13:05,680
as a back-end

00:13:04,000 --> 00:13:07,680
and they work together pretty well to do

00:13:05,680 --> 00:13:09,680
your building installing

00:13:07,680 --> 00:13:13,279
you might wonder why we're asking you to

00:13:09,680 --> 00:13:15,200
add yet another file to your projects

00:13:13,279 --> 00:13:17,279
especially if you stop to consider that

00:13:15,200 --> 00:13:17,920
pi project autumnal isn't accurately

00:13:17,279 --> 00:13:19,680
placing

00:13:17,920 --> 00:13:22,320
any of the functionality of either of

00:13:19,680 --> 00:13:22,320
those tools

00:13:23,120 --> 00:13:26,399
well first start you'll be following the

00:13:24,959 --> 00:13:29,279
new expectations

00:13:26,399 --> 00:13:29,600
of consumers of your project it's not

00:13:29,279 --> 00:13:31,600
just

00:13:29,600 --> 00:13:32,639
tools but humans that work with your

00:13:31,600 --> 00:13:34,639
project

00:13:32,639 --> 00:13:36,639
are all now looking for that ubiquitous

00:13:34,639 --> 00:13:40,079
pi project dot tomml

00:13:36,639 --> 00:13:42,240
when first getting to know your project

00:13:40,079 --> 00:13:43,199
by including one you as the project

00:13:42,240 --> 00:13:45,199
officer

00:13:43,199 --> 00:13:47,360
are then free to change how you build

00:13:45,199 --> 00:13:49,839
your project without disruption to your

00:13:47,360 --> 00:13:49,839
users

00:13:50,240 --> 00:13:54,000
another important build problem that's

00:13:52,000 --> 00:13:55,199
solved only by the use of pi project

00:13:54,000 --> 00:13:57,279
automo

00:13:55,199 --> 00:14:00,800
is declaring what packages your project

00:13:57,279 --> 00:14:00,800
needs to start its build

00:14:01,440 --> 00:14:06,240
i think pep 518 best sums up the problem

00:14:04,320 --> 00:14:08,240
when it talks about setup.py's

00:14:06,240 --> 00:14:10,800
shortcomings

00:14:08,240 --> 00:14:11,839
it's a catch-22 of a file not being

00:14:10,800 --> 00:14:14,320
runnable

00:14:11,839 --> 00:14:16,000
without knowing its own contents which

00:14:14,320 --> 00:14:19,040
can't be known programmatically

00:14:16,000 --> 00:14:19,040
unless you run the file

00:14:19,199 --> 00:14:23,760
python has gotten a long ways by simply

00:14:21,519 --> 00:14:26,639
assuming that setup tools in pip

00:14:23,760 --> 00:14:29,600
are almost universally available just

00:14:26,639 --> 00:14:31,519
like the math module

00:14:29,600 --> 00:14:33,360
but both of these third-party packages

00:14:31,519 --> 00:14:34,240
have been deemed so important that they

00:14:33,360 --> 00:14:37,680
are in fact

00:14:34,240 --> 00:14:41,440
available on a fresh install of python

00:14:37,680 --> 00:14:44,000
or anytime you created new vms

00:14:41,440 --> 00:14:46,000
but it doesn't help you packaging if you

00:14:44,000 --> 00:14:46,880
decide to use a different build front

00:14:46,000 --> 00:14:49,839
end

00:14:46,880 --> 00:14:50,720
or if you use a different build backend

00:14:49,839 --> 00:14:52,639
or if you need

00:14:50,720 --> 00:14:54,880
anything more than just set up tools and

00:14:52,639 --> 00:14:58,399
pip to do your build

00:14:54,880 --> 00:15:00,959
like if you need syphon or wheels

00:14:58,399 --> 00:15:01,839
making pip and setup tools as available

00:15:00,959 --> 00:15:03,600
as they are

00:15:01,839 --> 00:15:05,680
has fixed a lot of python's build

00:15:03,600 --> 00:15:08,160
bootstrap problems

00:15:05,680 --> 00:15:09,440
at least it did until everyone decided

00:15:08,160 --> 00:15:11,040
that wheel

00:15:09,440 --> 00:15:13,199
was the newest standard and everyone

00:15:11,040 --> 00:15:15,199
should follow it

00:15:13,199 --> 00:15:17,440
you see pip doesn't really know how to

00:15:15,199 --> 00:15:20,079
install a package from source

00:15:17,440 --> 00:15:21,760
it knows how to install a distribution

00:15:20,079 --> 00:15:24,959
so if it comes across from source

00:15:21,760 --> 00:15:26,639
it first turns that source into a wheel

00:15:24,959 --> 00:15:29,680
file

00:15:26,639 --> 00:15:30,480
but the build backend that pep uses most

00:15:29,680 --> 00:15:32,480
commonly

00:15:30,480 --> 00:15:33,680
just setup tools doesn't know how to

00:15:32,480 --> 00:15:36,800
build a wheel file

00:15:33,680 --> 00:15:39,199
it knows how to build an sdis file

00:15:36,800 --> 00:15:40,800
so we need this extra package which

00:15:39,199 --> 00:15:43,839
confusingly is also called

00:15:40,800 --> 00:15:43,839
the wheel package

00:15:44,480 --> 00:15:48,399
you'll have noticed this oddness if

00:15:46,639 --> 00:15:49,199
you've ever tried to pip install from

00:15:48,399 --> 00:15:51,279
source

00:15:49,199 --> 00:15:54,000
a project that does not contain a pi

00:15:51,279 --> 00:15:55,600
project autonomous file

00:15:54,000 --> 00:15:57,040
you can see here what happens when we

00:15:55,600 --> 00:15:59,920
try this in a fresh

00:15:57,040 --> 00:15:59,920
virtual environment

00:16:00,160 --> 00:16:05,120
when we try and pip install pip gives us

00:16:02,720 --> 00:16:08,079
a less than helpful error message

00:16:05,120 --> 00:16:10,480
noting something about bdist wheel not

00:16:08,079 --> 00:16:12,480
being a legal command

00:16:10,480 --> 00:16:16,160
even though all pip was asked to do was

00:16:12,480 --> 00:16:17,839
just install some python source code

00:16:16,160 --> 00:16:21,279
if we look a little further up the stack

00:16:17,839 --> 00:16:23,680
trace we see some of pip's secret magic

00:16:21,279 --> 00:16:24,800
it's calling setup.py behind the scenes

00:16:23,680 --> 00:16:26,639
for us

00:16:24,800 --> 00:16:28,639
but it's choosing to pass along this

00:16:26,639 --> 00:16:32,160
illegal betas wheel command

00:16:28,639 --> 00:16:32,160
then complained about later on

00:16:32,639 --> 00:16:36,079
if you've seen this error before you

00:16:34,399 --> 00:16:37,519
probably immediately recognize the

00:16:36,079 --> 00:16:39,839
solution

00:16:37,519 --> 00:16:42,079
you need to download a package called

00:16:39,839 --> 00:16:44,000
wheel from pipi

00:16:42,079 --> 00:16:46,320
just having this package around will

00:16:44,000 --> 00:16:48,000
magically fix the pip command

00:16:46,320 --> 00:16:51,440
through the use of some special setup

00:16:48,000 --> 00:16:53,120
tools hooks during its installation

00:16:51,440 --> 00:16:55,040
there's no change necessary to the

00:16:53,120 --> 00:16:56,720
setup.py file

00:16:55,040 --> 00:16:58,720
or the pip command that was chosen to

00:16:56,720 --> 00:17:00,480
run

00:16:58,720 --> 00:17:02,720
but all this is a pretty confusing

00:17:00,480 --> 00:17:05,919
conclusion from an error

00:17:02,720 --> 00:17:08,880
about an invalid command that was not

00:17:05,919 --> 00:17:09,360
executed directly and which complained

00:17:08,880 --> 00:17:12,640
about

00:17:09,360 --> 00:17:13,679
something beatist wheel command nothing

00:17:12,640 --> 00:17:17,199
about a wheel

00:17:13,679 --> 00:17:19,439
or a packages error message

00:17:17,199 --> 00:17:20,799
this confusion and probable stack

00:17:19,439 --> 00:17:23,280
overflow searching

00:17:20,799 --> 00:17:24,319
could have been avoided if this project

00:17:23,280 --> 00:17:26,480
just added a pi

00:17:24,319 --> 00:17:28,799
project dot tomml with a wheel

00:17:26,480 --> 00:17:31,520
requirement

00:17:28,799 --> 00:17:34,320
doing so saves its users a lot of pain

00:17:31,520 --> 00:17:34,320
and frustration

00:17:35,120 --> 00:17:39,360
so let's take a look at how we can make

00:17:36,799 --> 00:17:42,320
this pi project.towel work for you

00:17:39,360 --> 00:17:42,320
in your projects

00:17:43,520 --> 00:17:47,520
using the modern configuration that is

00:17:45,520 --> 00:17:49,360
pi project.tamil

00:17:47,520 --> 00:17:50,640
not only lets you shed some outdated

00:17:49,360 --> 00:17:52,720
packaging practices

00:17:50,640 --> 00:17:54,799
but gives you a lot of new advantages as

00:17:52,720 --> 00:17:57,360
well

00:17:54,799 --> 00:17:59,039
being explicit about your build backend

00:17:57,360 --> 00:18:00,480
will always get you the same build

00:17:59,039 --> 00:18:03,679
environment

00:18:00,480 --> 00:18:04,400
always on your machine and in ci and

00:18:03,679 --> 00:18:06,880
even on your

00:18:04,400 --> 00:18:09,919
users machines even if they choose to

00:18:06,880 --> 00:18:11,520
use a different front end than you did

00:18:09,919 --> 00:18:13,039
it will also allow you to try out

00:18:11,520 --> 00:18:14,799
different back ends

00:18:13,039 --> 00:18:18,320
and have to change very little or

00:18:14,799 --> 00:18:18,320
nothing at all about your code

00:18:18,720 --> 00:18:21,760
and now that pi project optomel is a

00:18:20,720 --> 00:18:24,000
standard

00:18:21,760 --> 00:18:26,080
some build related tools will only work

00:18:24,000 --> 00:18:28,480
on projects that have this file in their

00:18:26,080 --> 00:18:30,799
project at all

00:18:28,480 --> 00:18:33,200
similarly more and more tools are

00:18:30,799 --> 00:18:36,080
adopting pi project.tamil

00:18:33,200 --> 00:18:37,520
as the location for their settings even

00:18:36,080 --> 00:18:39,120
a lot of tools that have nothing to do

00:18:37,520 --> 00:18:41,280
with building

00:18:39,120 --> 00:18:45,120
this makes for a lot less files overall

00:18:41,280 --> 00:18:45,120
in your project's top level directory

00:18:47,679 --> 00:18:51,120
so your project is building just fine

00:18:50,240 --> 00:18:53,120
right now

00:18:51,120 --> 00:18:54,320
it's only doing so based on a lot of

00:18:53,120 --> 00:18:56,080
assumptions

00:18:54,320 --> 00:18:58,559
and assumptions are no way to build

00:18:56,080 --> 00:19:00,960
dependable software

00:18:58,559 --> 00:19:03,039
so go ahead and choose a build backend

00:19:00,960 --> 00:19:06,480
and let everyone know what you chose by

00:19:03,039 --> 00:19:08,160
putting it in pi project dot tomml

00:19:06,480 --> 00:19:10,160
if you're sticking with the setup tools

00:19:08,160 --> 00:19:12,400
back-end that's great

00:19:10,160 --> 00:19:13,679
but even after including a pi project

00:19:12,400 --> 00:19:16,000
dot tunnel file

00:19:13,679 --> 00:19:18,880
there's a few tasks you can do to even

00:19:16,000 --> 00:19:22,160
more modernize your packaging

00:19:18,880 --> 00:19:25,440
first stop using sub-dot py as a script

00:19:22,160 --> 00:19:27,360
for any of your tasks no longer attended

00:19:25,440 --> 00:19:29,440
as any kind of front end

00:19:27,360 --> 00:19:32,799
and whatever capabilities it does still

00:19:29,440 --> 00:19:32,799
have will be going away

00:19:33,520 --> 00:19:37,760
another advantage pi project dot tommo

00:19:35,600 --> 00:19:39,039
can give is the ability to actually drop

00:19:37,760 --> 00:19:43,360
shut up.py

00:19:39,039 --> 00:19:46,640
altogether instead pi project.commall

00:19:43,360 --> 00:19:48,000
and the setup.cfg files as static

00:19:46,640 --> 00:19:50,840
configuration

00:19:48,000 --> 00:19:52,000
can handle all of your build details for

00:19:50,840 --> 00:19:53,600
you

00:19:52,000 --> 00:19:56,000
then you don't have to have a build

00:19:53,600 --> 00:19:59,440
front end as part of your project

00:19:56,000 --> 00:19:59,919
with the setup.ui scripts a building

00:19:59,440 --> 00:20:01,679
tool

00:19:59,919 --> 00:20:04,480
outside of your project can handle all

00:20:01,679 --> 00:20:08,320
the building logic for you

00:20:04,480 --> 00:20:11,039
finally if you keep your setup.py file

00:20:08,320 --> 00:20:14,240
and it's important for disk utils switch

00:20:11,039 --> 00:20:15,760
that to importing from setup tools

00:20:14,240 --> 00:20:17,840
you want to get away with from this

00:20:15,760 --> 00:20:21,840
library before it disappears entirely

00:20:17,840 --> 00:20:21,840
from the python language

00:20:22,799 --> 00:20:27,360
if you maintain a project that doesn't

00:20:24,480 --> 00:20:28,720
have a pi project.tunnel file right now

00:20:27,360 --> 00:20:30,640
and you want to add one with the least

00:20:28,720 --> 00:20:32,640
amount of friction just create it with

00:20:30,640 --> 00:20:36,000
these three lines

00:20:32,640 --> 00:20:38,000
the legacy build specified here

00:20:36,000 --> 00:20:39,919
is in fact the exact behavior tip will

00:20:38,000 --> 00:20:41,679
give you

00:20:39,919 --> 00:20:44,880
if it comes across a project that is

00:20:41,679 --> 00:20:46,720
missing in pi project autumnal file

00:20:44,880 --> 00:20:48,000
so adding this file will not change how

00:20:46,720 --> 00:20:51,520
your project actually gets

00:20:48,000 --> 00:20:52,080
built and as a bonus users of your

00:20:51,520 --> 00:20:55,120
project

00:20:52,080 --> 00:20:56,720
won't get confusing fetus wheel errors

00:20:55,120 --> 00:21:00,000
because they didn't have wheel ready to

00:20:56,720 --> 00:21:00,000
go for you on their machine

00:21:01,520 --> 00:21:04,799
if you don't go further than just adding

00:21:03,520 --> 00:21:05,440
build information for what was

00:21:04,799 --> 00:21:08,080
essentially

00:21:05,440 --> 00:21:10,000
already happening try moving to the

00:21:08,080 --> 00:21:12,000
standard setup tools back end entry

00:21:10,000 --> 00:21:14,080
point

00:21:12,000 --> 00:21:15,520
note that setup tools does not yet

00:21:14,080 --> 00:21:18,720
support project

00:21:15,520 --> 00:21:21,760
data in pi project dot tunnel so you'll

00:21:18,720 --> 00:21:24,799
still have to use setup.cfg to specify

00:21:21,760 --> 00:21:25,840
metadata as configuration if you don't

00:21:24,799 --> 00:21:28,720
already have one

00:21:25,840 --> 00:21:31,679
try creating it and adding some core

00:21:28,720 --> 00:21:33,600
metadata there

00:21:31,679 --> 00:21:38,159
then try moving more metadata from

00:21:33,600 --> 00:21:38,159
setup.py into your setup.cfg

00:21:39,200 --> 00:21:44,240
before long you may find that everything

00:21:41,440 --> 00:21:47,840
that originally needs setup.py4

00:21:44,240 --> 00:21:50,880
can be moved to sub.cfg which means your

00:21:47,840 --> 00:21:53,679
setup.py disappears entirely

00:21:50,880 --> 00:21:54,400
and leaves you and users of your project

00:21:53,679 --> 00:21:57,520
with only

00:21:54,400 --> 00:21:59,520
explicit predictable and readable build

00:21:57,520 --> 00:22:01,760
information

00:21:59,520 --> 00:22:05,280
in the end all users of this project

00:22:01,760 --> 00:22:05,280
will benefit from these changes

00:22:07,600 --> 00:22:10,960
packaging is a very rich landscape

00:22:09,360 --> 00:22:12,240
that's still evolving

00:22:10,960 --> 00:22:14,240
so i encourage you to keep learning

00:22:12,240 --> 00:22:16,080
about it there's a lot of great

00:22:14,240 --> 00:22:17,520
resources out there

00:22:16,080 --> 00:22:20,159
these are some that have been helpful to

00:22:17,520 --> 00:22:23,840
me informing this talk

00:22:20,159 --> 00:22:23,840
thank you and have a great rest of the

00:22:24,840 --> 00:22:27,840
conference

00:23:27,600 --> 00:23:29,679

YouTube URL: https://www.youtube.com/watch?v=j8iXO5VErjw


