Title: TALK   Dustin Ingram   Secure Software Supply Chains for Python
Publication date: 2021-05-30
Playlist: PyCon US 2021
Description: 
	One of the most powerful parts of Python lies not within the language itself, but within the robust ecosystem of open-source Python packages available to use along with it. The Python Package Index, the canonical repository for Python code, hosts nearly 300,000 different projects. However, integrating software from so many third-parties comes at a cost: how can we be sure it's secure?

In this talk, we'll explore the common Python software supply chain, various ways in which such a supply chain can be attacked, as well as protected. We'll examine some tools and methodologies that help improve supply-chain security, and discuss the challenges and benefits these tools provide. Finally, we'll look at what fundamental improvements we can make to the overall ecosystem.
Captions: 
	00:00:04,170 --> 00:00:11,869
[Music]

00:00:13,840 --> 00:00:16,560
this is

00:00:14,320 --> 00:00:18,480
secure software supply chains for python

00:00:16,560 --> 00:00:20,720
for pyconus 2021.

00:00:18,480 --> 00:00:22,160
so i'm dustin i'm a few things i'm a

00:00:20,720 --> 00:00:23,680
developer advocate at google

00:00:22,160 --> 00:00:25,119
i'm one of the directors of the python

00:00:23,680 --> 00:00:27,279
software foundation i'm also a

00:00:25,119 --> 00:00:28,960
maintainer of the python package index

00:00:27,279 --> 00:00:30,560
and the package index is something you

00:00:28,960 --> 00:00:32,640
might have been hearing about recently

00:00:30,560 --> 00:00:34,880
in the news which is sometimes a good

00:00:32,640 --> 00:00:37,040
thing sometimes a bad thing

00:00:34,880 --> 00:00:38,559
so here's one pipi and gitlab dealing

00:00:37,040 --> 00:00:41,520
with spam attacks

00:00:38,559 --> 00:00:42,320
doesn't sound great how about python

00:00:41,520 --> 00:00:44,239
package index

00:00:42,320 --> 00:00:46,399
nukes more than 3 000 malicious

00:00:44,239 --> 00:00:49,039
libraries after a security shortcoming

00:00:46,399 --> 00:00:50,640
that's not great how about this one new

00:00:49,039 --> 00:00:52,719
type of supply chain attack hit apple

00:00:50,640 --> 00:00:56,079
microsoft and 33 other companies

00:00:52,719 --> 00:00:57,440
via pipi so this talks about the

00:00:56,079 --> 00:00:59,359
software supply chain and you might be

00:00:57,440 --> 00:00:59,920
asking what is this and by supply chain

00:00:59,359 --> 00:01:01,920
i don't

00:00:59,920 --> 00:01:03,199
mean a literal physical supply chain

00:01:01,920 --> 00:01:03,760
right we're not talking about producing

00:01:03,199 --> 00:01:05,280
goods

00:01:03,760 --> 00:01:06,400
but it's sort of the same sense for

00:01:05,280 --> 00:01:07,119
software we're talking about a software

00:01:06,400 --> 00:01:09,040
supply chain

00:01:07,119 --> 00:01:10,479
and so a software supply chain is really

00:01:09,040 --> 00:01:12,400
everything that it takes

00:01:10,479 --> 00:01:14,720
in terms of software to produce your

00:01:12,400 --> 00:01:17,759
software so this office supply chain is

00:01:14,720 --> 00:01:18,799
all of your third-party dependencies the

00:01:17,759 --> 00:01:19,840
places those dependencies are

00:01:18,799 --> 00:01:20,799
distributed

00:01:19,840 --> 00:01:23,040
everything used to build those

00:01:20,799 --> 00:01:23,759
dependencies all their external

00:01:23,040 --> 00:01:25,040
dependencies

00:01:23,759 --> 00:01:27,119
the places those dependencies are

00:01:25,040 --> 00:01:28,400
distributed and everything used to build

00:01:27,119 --> 00:01:29,840
those dependencies

00:01:28,400 --> 00:01:31,439
so as you can see it's turtles more

00:01:29,840 --> 00:01:32,240
turtles even more turtles all the way

00:01:31,439 --> 00:01:33,920
down

00:01:32,240 --> 00:01:35,280
and this could even extend to the source

00:01:33,920 --> 00:01:36,479
control repository that you use you can

00:01:35,280 --> 00:01:39,119
consider that part of your

00:01:36,479 --> 00:01:40,240
software supply chain or the ftp server

00:01:39,119 --> 00:01:42,159
that you host your

00:01:40,240 --> 00:01:43,600
you know software on once it's built or

00:01:42,159 --> 00:01:44,399
the identity server that you use to

00:01:43,600 --> 00:01:45,840
authenticate

00:01:44,399 --> 00:01:47,119
people on your team who are allowed to

00:01:45,840 --> 00:01:47,920
commit and push new changes to your

00:01:47,119 --> 00:01:51,119
software

00:01:47,920 --> 00:01:52,479
or who can so if you're a python esta

00:01:51,119 --> 00:01:53,759
a python software supply chain might

00:01:52,479 --> 00:01:54,560
look something like this you might

00:01:53,759 --> 00:01:56,240
depend on some

00:01:54,560 --> 00:01:58,320
third-party packages or libraries like

00:01:56,240 --> 00:01:59,520
flask or pandas or something like that

00:01:58,320 --> 00:02:01,439
you might get them from a software

00:01:59,520 --> 00:02:02,399
repository like pipi the python package

00:02:01,439 --> 00:02:04,159
index

00:02:02,399 --> 00:02:06,240
and those tools might use things like

00:02:04,159 --> 00:02:07,280
setup tools wheel twine to actually

00:02:06,240 --> 00:02:09,920
build that software that you're

00:02:07,280 --> 00:02:10,479
consuming so that's a software supply

00:02:09,920 --> 00:02:13,280
chain

00:02:10,479 --> 00:02:14,560
what is a secure software supply chain

00:02:13,280 --> 00:02:16,080
and it's basically

00:02:14,560 --> 00:02:17,840
all of those things and also they're

00:02:16,080 --> 00:02:19,200
definitely not compromised in any way

00:02:17,840 --> 00:02:20,640
let's look at what this means with some

00:02:19,200 --> 00:02:22,239
examples of supply chain attacks

00:02:20,640 --> 00:02:23,360
specifically how they relate to python

00:02:22,239 --> 00:02:24,800
and python ecosystem

00:02:23,360 --> 00:02:25,920
one type of supply chain attack that we

00:02:24,800 --> 00:02:27,520
could consider here is a

00:02:25,920 --> 00:02:29,040
man-in-the-middle attack if at any point

00:02:27,520 --> 00:02:30,160
someone can get between you

00:02:29,040 --> 00:02:31,280
and the place where the software is

00:02:30,160 --> 00:02:32,239
stored the place where you're expecting

00:02:31,280 --> 00:02:34,160
to get software from

00:02:32,239 --> 00:02:35,840
and either change it or modify it or in

00:02:34,160 --> 00:02:37,200
some way compromise it in that process

00:02:35,840 --> 00:02:38,640
that's a man-in-the-middle attack

00:02:37,200 --> 00:02:40,239
so if you're pythonista a man-to-middle

00:02:38,640 --> 00:02:41,680
attack might be you know

00:02:40,239 --> 00:02:43,200
you asked for something to be downloaded

00:02:41,680 --> 00:02:44,480
from pipi someone is looking at your

00:02:43,200 --> 00:02:45,599
internet traffic and they are somehow

00:02:44,480 --> 00:02:48,160
modifying it or

00:02:45,599 --> 00:02:49,360
trojaning it or backdooring it in flight

00:02:48,160 --> 00:02:50,080
so what they're actually giving you is

00:02:49,360 --> 00:02:51,519
something that's

00:02:50,080 --> 00:02:53,280
not what you asked for another type of

00:02:51,519 --> 00:02:55,200
supply chain attack that we see fairly

00:02:53,280 --> 00:02:56,560
frequently is typo squatting so here's a

00:02:55,200 --> 00:02:58,080
recent article published by that

00:02:56,560 --> 00:03:00,000
published by sneak which is a security

00:02:58,080 --> 00:03:01,280
organization and basically

00:03:00,000 --> 00:03:03,280
the way the type of squatting attack

00:03:01,280 --> 00:03:04,080
works is you know pipeai is this open

00:03:03,280 --> 00:03:06,080
repository

00:03:04,080 --> 00:03:07,840
for packages anyone can register any

00:03:06,080 --> 00:03:09,599
package any package name

00:03:07,840 --> 00:03:11,599
and so that means that some popular

00:03:09,599 --> 00:03:12,720
package names uh when you're pip

00:03:11,599 --> 00:03:14,400
installing it you could

00:03:12,720 --> 00:03:15,599
potentially make a typo and you could

00:03:14,400 --> 00:03:17,120
potentially be installing some other

00:03:15,599 --> 00:03:18,959
package that isn't what you asked for

00:03:17,120 --> 00:03:20,159
and these typos can be not so noticeable

00:03:18,959 --> 00:03:21,040
right so this particular example they're

00:03:20,159 --> 00:03:23,360
showing here

00:03:21,040 --> 00:03:24,959
is a jellyfish with an i instead of an l

00:03:23,360 --> 00:03:26,159
so that would be hard to actually like

00:03:24,959 --> 00:03:27,440
mistype in your keyboard but there's

00:03:26,159 --> 00:03:29,120
others too like

00:03:27,440 --> 00:03:31,120
a very popular packages requests and

00:03:29,120 --> 00:03:33,599
they're packages like request case on

00:03:31,120 --> 00:03:35,040
pipi now this package is is on pipeline

00:03:33,599 --> 00:03:36,480
it didn't take me too long to find

00:03:35,040 --> 00:03:37,599
um but it's not actually malicious it's

00:03:36,480 --> 00:03:38,640
actually someone that's trying to look

00:03:37,599 --> 00:03:39,599
out for you they know this is a common

00:03:38,640 --> 00:03:41,200
typo and they've

00:03:39,599 --> 00:03:42,319
gone ahead and squatted it so usually

00:03:41,200 --> 00:03:43,519
when we find something like this we go

00:03:42,319 --> 00:03:44,720
and we block it and we make sure that it

00:03:43,519 --> 00:03:46,159
can't be registered again but

00:03:44,720 --> 00:03:48,319
you know there's an infinite number of

00:03:46,159 --> 00:03:50,400
possible typos for a lot of possible

00:03:48,319 --> 00:03:51,760
and popular package names so we can't

00:03:50,400 --> 00:03:53,120
always do that for every single one so

00:03:51,760 --> 00:03:54,560
another type of supply chain attack

00:03:53,120 --> 00:03:56,480
is what we're calling dependency

00:03:54,560 --> 00:03:57,840
confusion and this is somewhat similar

00:03:56,480 --> 00:03:59,120
to typo squatting but it's almost taking

00:03:57,840 --> 00:04:01,040
it to the next level

00:03:59,120 --> 00:04:02,720
and the community was sort of made aware

00:04:01,040 --> 00:04:03,519
of this in a big way recently earlier

00:04:02,720 --> 00:04:06,080
this year

00:04:03,519 --> 00:04:07,599
when a particular researcher found a way

00:04:06,080 --> 00:04:09,760
to compromise a lot of large software

00:04:07,599 --> 00:04:11,360
companies as a result of this pattern

00:04:09,760 --> 00:04:13,519
and the way it works is that a lot of

00:04:11,360 --> 00:04:14,959
these companies have software

00:04:13,519 --> 00:04:16,400
maybe internal packages or things that

00:04:14,959 --> 00:04:17,519
they don't want to open source or share

00:04:16,400 --> 00:04:19,359
with the rest of the world

00:04:17,519 --> 00:04:20,639
and they host those on internal package

00:04:19,359 --> 00:04:21,759
indexes so for example if they're a

00:04:20,639 --> 00:04:23,600
python house

00:04:21,759 --> 00:04:25,280
they might depend on some you know

00:04:23,600 --> 00:04:26,320
third-party packages on pipeline but

00:04:25,280 --> 00:04:28,400
they might also publish their own

00:04:26,320 --> 00:04:29,919
private packages to an internal index

00:04:28,400 --> 00:04:30,880
and then they configure their pip that

00:04:29,919 --> 00:04:31,600
they use when they install their

00:04:30,880 --> 00:04:33,759
software

00:04:31,600 --> 00:04:34,880
to you know look at pi pi for certain

00:04:33,759 --> 00:04:36,000
packages that are there and look at

00:04:34,880 --> 00:04:37,919
their internal index for

00:04:36,000 --> 00:04:40,320
certain packages that are there and so

00:04:37,919 --> 00:04:42,880
the way this compromise sort of works is

00:04:40,320 --> 00:04:44,880
is possible to determine which internal

00:04:42,880 --> 00:04:46,880
package names these companies were using

00:04:44,880 --> 00:04:48,880
and registered those packages externally

00:04:46,880 --> 00:04:49,759
on pipi and if they had misconfigured

00:04:48,880 --> 00:04:51,360
pip in a way

00:04:49,759 --> 00:04:53,600
that it would prefer the packages on

00:04:51,360 --> 00:04:54,639
pipi over the same package name on the

00:04:53,600 --> 00:04:56,080
internal index

00:04:54,639 --> 00:04:57,919
they could be compromised because those

00:04:56,080 --> 00:04:59,440
packages would then be preferred from pi

00:04:57,919 --> 00:05:01,039
pi install from pipi and that wouldn't

00:04:59,440 --> 00:05:02,479
be the package that they were expecting

00:05:01,039 --> 00:05:04,320
and it could potentially be something

00:05:02,479 --> 00:05:05,759
very malicious now this example is

00:05:04,320 --> 00:05:07,680
mostly proof of concept for him to

00:05:05,759 --> 00:05:08,960
collect a security bounty but

00:05:07,680 --> 00:05:10,960
you know a bad actor could have used

00:05:08,960 --> 00:05:11,919
that to their advantage another supply

00:05:10,960 --> 00:05:13,520
chain attack is

00:05:11,919 --> 00:05:15,440
what i'll call being the target of

00:05:13,520 --> 00:05:16,880
research and this makes me glad that i

00:05:15,440 --> 00:05:18,479
procrastinated a little bit to give this

00:05:16,880 --> 00:05:21,039
talk because

00:05:18,479 --> 00:05:22,400
this is actually just recently the other

00:05:21,039 --> 00:05:23,840
day in the news where

00:05:22,400 --> 00:05:25,440
a particular researcher at the

00:05:23,840 --> 00:05:27,759
university of minnesota was doing

00:05:25,440 --> 00:05:30,000
research on how easy it was to land

00:05:27,759 --> 00:05:30,960
compromises in the linux kernel and you

00:05:30,000 --> 00:05:31,600
think of the linux kernel something

00:05:30,960 --> 00:05:32,880
that's you know

00:05:31,600 --> 00:05:34,479
really well reviewed something where

00:05:32,880 --> 00:05:35,680
it's super hard to get security problems

00:05:34,479 --> 00:05:37,440
into

00:05:35,680 --> 00:05:39,280
but they were accused of sending buggy

00:05:37,440 --> 00:05:40,639
patches in the name of research to see

00:05:39,280 --> 00:05:41,759
if it was possible

00:05:40,639 --> 00:05:43,280
into the carnival and they were somewhat

00:05:41,759 --> 00:05:44,800
successful in doing it and another

00:05:43,280 --> 00:05:45,360
supply chain attack that allowed is what

00:05:44,800 --> 00:05:47,199
i'll call

00:05:45,360 --> 00:05:48,560
getting solar winded so i think a lot of

00:05:47,199 --> 00:05:50,479
people have at this point heard of

00:05:48,560 --> 00:05:52,160
solarwind in that particular attack

00:05:50,479 --> 00:05:54,560
and you know this happens when a large

00:05:52,160 --> 00:05:56,080
nation state is motivated to compromise

00:05:54,560 --> 00:05:58,080
uh not just one software system but a

00:05:56,080 --> 00:05:59,600
lot of software systems um

00:05:58,080 --> 00:06:01,199
this has been called the worst cyber

00:05:59,600 --> 00:06:01,840
attack uh the worst nightmare cyber

00:06:01,199 --> 00:06:04,319
attack and

00:06:01,840 --> 00:06:06,479
it was actually a truly huge attack but

00:06:04,319 --> 00:06:08,479
ultimately it was not about

00:06:06,479 --> 00:06:09,680
um the actual packages themselves being

00:06:08,479 --> 00:06:11,039
compromised and the way that maybe the

00:06:09,680 --> 00:06:12,880
linux kernel was compromised

00:06:11,039 --> 00:06:14,240
it's ultimately about compromised

00:06:12,880 --> 00:06:15,600
building infrastructure so the

00:06:14,240 --> 00:06:17,360
infrastructure that's used to build the

00:06:15,600 --> 00:06:18,160
code before it even gets distributed was

00:06:17,360 --> 00:06:19,280
compromised

00:06:18,160 --> 00:06:21,280
solarwinds was distributing this

00:06:19,280 --> 00:06:23,440
software to the customers this

00:06:21,280 --> 00:06:25,360
the software itself was signed delivered

00:06:23,440 --> 00:06:27,039
you know exactly as they said it was

00:06:25,360 --> 00:06:28,880
you know the signatures match the hashes

00:06:27,039 --> 00:06:31,360
match but before it had even been

00:06:28,880 --> 00:06:32,240
packaged up to be released uh it was

00:06:31,360 --> 00:06:34,639
compromised

00:06:32,240 --> 00:06:36,000
just before that had even happened so

00:06:34,639 --> 00:06:37,600
there this sort of falls into a category

00:06:36,000 --> 00:06:38,000
of other kinds of like upstream attacks

00:06:37,600 --> 00:06:39,360
right

00:06:38,000 --> 00:06:40,560
your maintainers could be compromised

00:06:39,360 --> 00:06:41,199
they could be working for a three-letter

00:06:40,560 --> 00:06:42,880
agency

00:06:41,199 --> 00:06:44,080
um you could have a compromise source

00:06:42,880 --> 00:06:45,520
control system where you don't actually

00:06:44,080 --> 00:06:45,840
have full control of the software in

00:06:45,520 --> 00:06:48,240
your

00:06:45,840 --> 00:06:50,080
repository you could leak your passwords

00:06:48,240 --> 00:06:52,080
or your api tokens that you used to

00:06:50,080 --> 00:06:53,840
commit to a software repository or

00:06:52,080 --> 00:06:55,360
upload your packages to a package index

00:06:53,840 --> 00:06:56,400
and you could also just be the victim of

00:06:55,360 --> 00:06:57,360
social engineering someone could

00:06:56,400 --> 00:06:58,080
convince you that they're a great

00:06:57,360 --> 00:06:58,960
maintainer

00:06:58,080 --> 00:07:00,400
you could add them to your project

00:06:58,960 --> 00:07:02,319
because you have a high workload and

00:07:00,400 --> 00:07:04,240
then they could go and compromise it

00:07:02,319 --> 00:07:05,919
so and on top of this there's just

00:07:04,240 --> 00:07:07,039
regular old non-malicious bugs right

00:07:05,919 --> 00:07:07,840
we're all human we're all software

00:07:07,039 --> 00:07:09,199
engineers

00:07:07,840 --> 00:07:10,800
we could introduce bugs that introduce

00:07:09,199 --> 00:07:11,280
compromises as well that we're not aware

00:07:10,800 --> 00:07:12,880
of that

00:07:11,280 --> 00:07:15,599
weren't as a result of maliciousness but

00:07:12,880 --> 00:07:18,960
just just sort of happened

00:07:15,599 --> 00:07:21,919
so what can we do to have a more secure

00:07:18,960 --> 00:07:23,440
supply chain i'm going to think mostly

00:07:21,919 --> 00:07:24,160
specifically about the python ecosystem

00:07:23,440 --> 00:07:26,319
here and what

00:07:24,160 --> 00:07:28,880
people who work with python can do to

00:07:26,319 --> 00:07:31,599
have a more secure python supply chain

00:07:28,880 --> 00:07:32,080
so one thing we can do is just https

00:07:31,599 --> 00:07:35,199
everywhere

00:07:32,080 --> 00:07:36,960
right https and ssl allow us to avoid

00:07:35,199 --> 00:07:38,080
basically the entire class of men in the

00:07:36,960 --> 00:07:39,280
middle attacks

00:07:38,080 --> 00:07:41,199
assuming that those are working as we

00:07:39,280 --> 00:07:42,400
expect them to we don't have to worry

00:07:41,199 --> 00:07:44,560
about someone getting in between us

00:07:42,400 --> 00:07:46,960
and pi pi so we did this already we did

00:07:44,560 --> 00:07:47,840
this four years ago we made pipi https

00:07:46,960 --> 00:07:49,520
only

00:07:47,840 --> 00:07:51,280
basically to mitigate the potential for

00:07:49,520 --> 00:07:52,960
a man in the middle attack basically

00:07:51,280 --> 00:07:55,360
now that you every time you interact

00:07:52,960 --> 00:07:56,560
with pypi it's over https and

00:07:55,360 --> 00:07:59,440
you can be sure that the response you're

00:07:56,560 --> 00:08:01,120
getting is actually delivered from pi pi

00:07:59,440 --> 00:08:02,319
this is great sort of an easy one that

00:08:01,120 --> 00:08:02,800
we turned on a long time ago and has

00:08:02,319 --> 00:08:04,800
been

00:08:02,800 --> 00:08:06,800
in use ever since another thing that we

00:08:04,800 --> 00:08:08,960
can do as python is to secure our

00:08:06,800 --> 00:08:10,800
software supply chain is to use lock

00:08:08,960 --> 00:08:12,240
files so log files are actually

00:08:10,800 --> 00:08:14,080
incredibly powerful but i don't really

00:08:12,240 --> 00:08:15,680
see them being used quite as much as i

00:08:14,080 --> 00:08:16,879
would hope them to be used and they're

00:08:15,680 --> 00:08:17,840
powerful because they actually probably

00:08:16,879 --> 00:08:19,840
could have prevented

00:08:17,840 --> 00:08:21,520
almost all those supply chain attacks i

00:08:19,840 --> 00:08:22,800
just described not all of them you know

00:08:21,520 --> 00:08:24,479
they can't prevent the ones where your

00:08:22,800 --> 00:08:26,000
maintainers are compromised or maybe

00:08:24,479 --> 00:08:27,919
your build system is compromised

00:08:26,000 --> 00:08:30,080
but but any man in the middle attack any

00:08:27,919 --> 00:08:32,000
type of squad attack anything like that

00:08:30,080 --> 00:08:33,599
could be mitigated with lock files so

00:08:32,000 --> 00:08:34,479
some of the important components of a

00:08:33,599 --> 00:08:36,479
lock file

00:08:34,479 --> 00:08:38,320
first version pins so a version pin

00:08:36,479 --> 00:08:40,640
means that each package is pinned to

00:08:38,320 --> 00:08:41,440
one specific version um it's not a range

00:08:40,640 --> 00:08:43,039
of versions

00:08:41,440 --> 00:08:45,040
it's not autocompletely unversioned it's

00:08:43,039 --> 00:08:45,440
one specific version and what that means

00:08:45,040 --> 00:08:46,560
is that

00:08:45,440 --> 00:08:48,480
that version that you're requesting from

00:08:46,560 --> 00:08:49,680
pipeline is exactly the version and it's

00:08:48,480 --> 00:08:50,800
never going to change if a new version

00:08:49,680 --> 00:08:52,399
is published you're going to get that

00:08:50,800 --> 00:08:53,120
same old version until you bump the

00:08:52,399 --> 00:08:55,279
version

00:08:53,120 --> 00:08:56,640
in your lock file another important

00:08:55,279 --> 00:08:58,720
component is hashes

00:08:56,640 --> 00:08:59,920
so hashes are you know a means of

00:08:58,720 --> 00:09:01,360
verifying that the file that we've

00:08:59,920 --> 00:09:02,880
downloaded from pipi

00:09:01,360 --> 00:09:04,800
and we hash and come up with a compute

00:09:02,880 --> 00:09:06,560
the hash independently is the same as

00:09:04,800 --> 00:09:07,760
the hash that pipi computed when it was

00:09:06,560 --> 00:09:09,279
uploaded by the author

00:09:07,760 --> 00:09:10,720
and that verifies that the package

00:09:09,279 --> 00:09:11,680
wasn't manipulated or changed at some

00:09:10,720 --> 00:09:13,279
point or that

00:09:11,680 --> 00:09:15,120
uh you know this with a dependency

00:09:13,279 --> 00:09:16,320
confusion attack that potentially we're

00:09:15,120 --> 00:09:17,519
installing the same version that we

00:09:16,320 --> 00:09:18,720
thought we wanted but it's actually

00:09:17,519 --> 00:09:20,160
giving us a different file from a

00:09:18,720 --> 00:09:21,519
different index

00:09:20,160 --> 00:09:23,040
and the last thing is a full dependency

00:09:21,519 --> 00:09:24,720
tree so version pins and hashes are

00:09:23,040 --> 00:09:25,440
pretty useless if we're only looking at

00:09:24,720 --> 00:09:27,839
a subset

00:09:25,440 --> 00:09:29,440
of the packages that we actually need to

00:09:27,839 --> 00:09:29,760
deliver our software or that we depend

00:09:29,440 --> 00:09:31,200
on

00:09:29,760 --> 00:09:32,720
so full dependency tree means that not

00:09:31,200 --> 00:09:34,560
only do we have version pins and hashes

00:09:32,720 --> 00:09:36,080
for all of our top level dependencies

00:09:34,560 --> 00:09:37,279
everything we're actually installing but

00:09:36,080 --> 00:09:38,480
for all the sub dependencies their

00:09:37,279 --> 00:09:39,920
dependencies everything all the way down

00:09:38,480 --> 00:09:41,279
literally every python package that

00:09:39,920 --> 00:09:43,600
might get used

00:09:41,279 --> 00:09:44,560
to run or install this software so let's

00:09:43,600 --> 00:09:45,839
look at some things that we

00:09:44,560 --> 00:09:46,800
already kind of use in the python

00:09:45,839 --> 00:09:47,920
ecosystem and try and figure out if

00:09:46,800 --> 00:09:49,040
they're log files or not

00:09:47,920 --> 00:09:50,240
so something that's probably very

00:09:49,040 --> 00:09:51,600
familiar in common is the

00:09:50,240 --> 00:09:52,959
requirements.txt file

00:09:51,600 --> 00:09:54,720
so sometimes it looks something like

00:09:52,959 --> 00:09:55,440
this right let's say this kind of looks

00:09:54,720 --> 00:09:57,200
like a web app

00:09:55,440 --> 00:09:59,839
it's using flask as it's web servers

00:09:57,200 --> 00:10:02,320
allende boto bigquery whatever

00:09:59,839 --> 00:10:03,440
is this a log file the answer is no so

00:10:02,320 --> 00:10:04,399
there were no version pins we had

00:10:03,440 --> 00:10:05,760
version ranges

00:10:04,399 --> 00:10:06,800
which is good but that's mostly for

00:10:05,760 --> 00:10:07,760
compatibility that doesn't actually

00:10:06,800 --> 00:10:08,880
prevent us from

00:10:07,760 --> 00:10:10,240
accidentally getting upgraded to

00:10:08,880 --> 00:10:10,959
something that may be compromised or

00:10:10,240 --> 00:10:12,560
insecure

00:10:10,959 --> 00:10:14,079
there are no hashes and that's probably

00:10:12,560 --> 00:10:15,839
not the full dependency tree right i

00:10:14,079 --> 00:10:17,360
know flask has some sub dependencies

00:10:15,839 --> 00:10:19,519
that weren't listed in that

00:10:17,360 --> 00:10:21,279
requirements.txt file so this is far

00:10:19,519 --> 00:10:22,880
from a lock file

00:10:21,279 --> 00:10:24,240
um so you might say okay i know fix this

00:10:22,880 --> 00:10:25,200
pip freeze i'm going to pip freeze and

00:10:24,240 --> 00:10:26,480
i'm going to redirect who

00:10:25,200 --> 00:10:28,240
requirements.txt

00:10:26,480 --> 00:10:29,920
do not do this this is an anti-pattern

00:10:28,240 --> 00:10:30,959
and i would not recommend anyone do this

00:10:29,920 --> 00:10:32,880
and if you're currently doing this

00:10:30,959 --> 00:10:34,240
i'm going to show you overflow that is a

00:10:32,880 --> 00:10:35,120
sort of a better way to do what you're

00:10:34,240 --> 00:10:36,160
trying to do here

00:10:35,120 --> 00:10:37,600
so the reason you don't do this is

00:10:36,160 --> 00:10:38,880
because you do this and you get

00:10:37,600 --> 00:10:40,480
something that looks like this

00:10:38,880 --> 00:10:42,079
this is a lot like maybe you're in a

00:10:40,480 --> 00:10:43,600
virtual level maybe you're pretty sure

00:10:42,079 --> 00:10:45,120
that these are all the packages you need

00:10:43,600 --> 00:10:46,720
but you have the potential to introduce

00:10:45,120 --> 00:10:48,320
a lot of other stuff here so is this a

00:10:46,720 --> 00:10:48,959
log file yes we have some version pins

00:10:48,320 --> 00:10:50,959
in here

00:10:48,959 --> 00:10:52,000
we do not have hashes still and it's

00:10:50,959 --> 00:10:53,200
hard to say whether this is the full

00:10:52,000 --> 00:10:54,560
dependency tree or not

00:10:53,200 --> 00:10:56,480
it probably is if i'm running my

00:10:54,560 --> 00:10:57,680
application locally and i've pip-freezed

00:10:56,480 --> 00:10:58,720
and it works locally and

00:10:57,680 --> 00:11:00,399
you know those are probably all the

00:10:58,720 --> 00:11:01,680
right dependencies but there's

00:11:00,399 --> 00:11:03,120
potentially other stuff in there that i

00:11:01,680 --> 00:11:04,399
don't even need that i just installed by

00:11:03,120 --> 00:11:05,760
accident or as a one-off thing when i

00:11:04,399 --> 00:11:07,200
was trying something that's not actually

00:11:05,760 --> 00:11:08,560
a dependency of my application

00:11:07,200 --> 00:11:10,640
and has the potential to increase the

00:11:08,560 --> 00:11:12,320
surface area which um you know

00:11:10,640 --> 00:11:14,880
i could be potentially compromised so

00:11:12,320 --> 00:11:16,399
this isn't really a lock file

00:11:14,880 --> 00:11:18,480
how about pip end install and pip bent

00:11:16,399 --> 00:11:19,360
lock this is a log file so if i run pip

00:11:18,480 --> 00:11:20,880
uninstall

00:11:19,360 --> 00:11:22,560
and install something like requests and

00:11:20,880 --> 00:11:23,440
then i run pip and lock afterwards to

00:11:22,560 --> 00:11:25,200
produce a

00:11:23,440 --> 00:11:27,600
lock file it gives me something like

00:11:25,200 --> 00:11:28,800
this and we can see in here that we have

00:11:27,600 --> 00:11:30,079
not only just requests but all the

00:11:28,800 --> 00:11:30,720
sub-dependencies of requests like

00:11:30,079 --> 00:11:33,760
parallel

00:11:30,720 --> 00:11:34,880
url lib3 um so yeah is this a log file

00:11:33,760 --> 00:11:36,640
we could probably tell by the name but

00:11:34,880 --> 00:11:38,079
yes it has version pins in it it has

00:11:36,640 --> 00:11:38,560
hashes and it has the full dependency

00:11:38,079 --> 00:11:40,320
tree

00:11:38,560 --> 00:11:42,079
um pipbem of when when you asked it to

00:11:40,320 --> 00:11:43,279
install request it looked at every other

00:11:42,079 --> 00:11:44,399
thing that got installed when you

00:11:43,279 --> 00:11:46,240
requested to install

00:11:44,399 --> 00:11:48,160
requests and then it put those all in

00:11:46,240 --> 00:11:50,399
lock file as well

00:11:48,160 --> 00:11:52,160
so fitbit is pretty powerful but it does

00:11:50,399 --> 00:11:53,760
have its sort of own form of log file

00:11:52,160 --> 00:11:55,279
and i want to show you another use what

00:11:53,760 --> 00:11:57,200
i think is an underused workflow which

00:11:55,279 --> 00:11:59,440
i'll call compile dependencies

00:11:57,200 --> 00:12:00,320
and this uses a tool a package on pipe

00:11:59,440 --> 00:12:02,800
called pip tools

00:12:00,320 --> 00:12:04,720
and specifically the pip compile subtool

00:12:02,800 --> 00:12:07,440
of this so if you pip install pip tools

00:12:04,720 --> 00:12:07,760
you'll get a tool called pip compile i

00:12:07,440 --> 00:12:09,920
think

00:12:07,760 --> 00:12:12,079
i said that right so this is really

00:12:09,920 --> 00:12:14,000
powerful because it actually reuses the

00:12:12,079 --> 00:12:15,120
it uses pip under the hood and and

00:12:14,000 --> 00:12:17,279
actually so does pip but

00:12:15,120 --> 00:12:18,240
this also reuses the same files and

00:12:17,279 --> 00:12:21,200
formats that pip

00:12:18,240 --> 00:12:22,720
uses to um use its to declare dependency

00:12:21,200 --> 00:12:24,800
so the requirements.txt file

00:12:22,720 --> 00:12:26,320
format can be reused here and i'll give

00:12:24,800 --> 00:12:28,800
you an example of what this looks like

00:12:26,320 --> 00:12:30,720
so this is a one of the requirements

00:12:28,800 --> 00:12:32,560
files for warehouse which is what we

00:12:30,720 --> 00:12:33,839
use to power the python package index

00:12:32,560 --> 00:12:36,000
that's a web application

00:12:33,839 --> 00:12:37,120
and so in this file here this sort of

00:12:36,000 --> 00:12:38,800
looked like that

00:12:37,120 --> 00:12:41,200
requirements file way back when right we

00:12:38,800 --> 00:12:42,639
just sort of listed all of the

00:12:41,200 --> 00:12:44,560
high level dependencies i'm actually

00:12:42,639 --> 00:12:46,000
importing in this file and none of the

00:12:44,560 --> 00:12:47,680
sub dependencies and there's maybe some

00:12:46,000 --> 00:12:48,320
version ranges for compatibility but no

00:12:47,680 --> 00:12:49,760
pins

00:12:48,320 --> 00:12:51,279
and then what i would do is run pip

00:12:49,760 --> 00:12:52,480
compile i would tell pip compile to

00:12:51,279 --> 00:12:54,160
generate hashes

00:12:52,480 --> 00:12:55,760
and also output its output into a

00:12:54,160 --> 00:12:57,440
requirements.txt file and then i would

00:12:55,760 --> 00:12:58,560
pass it this requirements.infile the

00:12:57,440 --> 00:13:00,639
extensions don't really matter here you

00:12:58,560 --> 00:13:02,160
can name these files whatever you want

00:13:00,639 --> 00:13:04,000
and then what this produces is a file

00:13:02,160 --> 00:13:05,360
that looks like this so it has a nice

00:13:04,000 --> 00:13:06,880
little header that's a comment says this

00:13:05,360 --> 00:13:08,000
files are generated here's the command

00:13:06,880 --> 00:13:10,160
to generate it

00:13:08,000 --> 00:13:11,519
it has all the dependencies i listed and

00:13:10,160 --> 00:13:12,880
their subdependencies

00:13:11,519 --> 00:13:14,160
and their hashes and a nice little

00:13:12,880 --> 00:13:15,120
comment that tells me where it came from

00:13:14,160 --> 00:13:17,200
so if i was curious

00:13:15,120 --> 00:13:18,639
why botocore is getting introduced i can

00:13:17,200 --> 00:13:19,519
see that oh that's a dependency of

00:13:18,639 --> 00:13:21,360
photo3

00:13:19,519 --> 00:13:22,560
and s3 transfer for example and i can

00:13:21,360 --> 00:13:23,600
see this for every single thing in the

00:13:22,560 --> 00:13:24,880
log file

00:13:23,600 --> 00:13:27,200
so for warehouse it looks kind of like

00:13:24,880 --> 00:13:28,480
this and it's pretty nice and the the

00:13:27,200 --> 00:13:30,079
powerful thing about this is like i said

00:13:28,480 --> 00:13:31,120
it's using pip and pip's existing format

00:13:30,079 --> 00:13:32,480
so you might not have seen a

00:13:31,120 --> 00:13:32,880
requirements.txt file that looks like

00:13:32,480 --> 00:13:35,519
this

00:13:32,880 --> 00:13:36,959
with hashes in it but pip does have a

00:13:35,519 --> 00:13:38,160
really nice feature that's hash checking

00:13:36,959 --> 00:13:40,000
mode

00:13:38,160 --> 00:13:42,320
you can configure pip2 verify the hashes

00:13:40,000 --> 00:13:43,519
for everything you tell it to install

00:13:42,320 --> 00:13:45,360
and the really nice thing about the hash

00:13:43,519 --> 00:13:46,880
checking mode is that in order to use

00:13:45,360 --> 00:13:47,839
hash shaking mode you have to hash check

00:13:46,880 --> 00:13:49,199
every file so you don't have the

00:13:47,839 --> 00:13:50,720
potential for

00:13:49,199 --> 00:13:52,320
having a long requirements file where

00:13:50,720 --> 00:13:53,760
most of the things are hash checked but

00:13:52,320 --> 00:13:54,079
you've forgotten to hashtag one thing

00:13:53,760 --> 00:13:55,360
that

00:13:54,079 --> 00:13:57,279
could potentially compromise you it's

00:13:55,360 --> 00:13:58,720
sort of an all or nothing thing so this

00:13:57,279 --> 00:14:00,000
is great and i really recommend trying

00:13:58,720 --> 00:14:01,519
this workflow and then seeing if

00:14:00,000 --> 00:14:03,040
it works for you if you're maybe if

00:14:01,519 --> 00:14:04,320
you're not ready to adopt a pip band

00:14:03,040 --> 00:14:06,320
or if you just want to continue using

00:14:04,320 --> 00:14:07,360
vanilla pip this is also super powerful

00:14:06,320 --> 00:14:09,199
if you want

00:14:07,360 --> 00:14:10,959
to deploy your an application or

00:14:09,199 --> 00:14:12,639
something to a cloud provider

00:14:10,959 --> 00:14:14,000
which might not support pip m or poetry

00:14:12,639 --> 00:14:16,480
or something like that which also

00:14:14,000 --> 00:14:18,480
supports log files so what kind of

00:14:16,480 --> 00:14:20,079
things can we prevent with lock files

00:14:18,480 --> 00:14:21,440
so lock files definitely prevent man and

00:14:20,079 --> 00:14:22,480
middle attacks because we have hash

00:14:21,440 --> 00:14:23,680
checking mode enabled

00:14:22,480 --> 00:14:25,040
they prevent typo squatting because

00:14:23,680 --> 00:14:26,399
we're not actually as humans typing

00:14:25,040 --> 00:14:28,480
these package names they are

00:14:26,399 --> 00:14:29,839
set in the lock file you've checked them

00:14:28,480 --> 00:14:31,279
hopefully when they got committed that

00:14:29,839 --> 00:14:33,199
they were not a typo

00:14:31,279 --> 00:14:34,560
and uh yeah this basically avoids

00:14:33,199 --> 00:14:36,320
potential for type of squatting

00:14:34,560 --> 00:14:37,839
um it avoids dependency confusion again

00:14:36,320 --> 00:14:39,360
because of the hash checking mode

00:14:37,839 --> 00:14:40,880
it doesn't prevent you from being a

00:14:39,360 --> 00:14:42,320
target of research social engineering or

00:14:40,880 --> 00:14:44,240
getting solar winded though

00:14:42,320 --> 00:14:45,920
um so i'm going to move on to those next

00:14:44,240 --> 00:14:46,720
so what's another thing we can do we

00:14:45,920 --> 00:14:48,160
could um

00:14:46,720 --> 00:14:49,839
enable something that i'll call

00:14:48,160 --> 00:14:51,440
vulnerability notifications so these

00:14:49,839 --> 00:14:52,000
tend to kind of go hand in hand with log

00:14:51,440 --> 00:14:55,040
files

00:14:52,000 --> 00:14:56,240
and they are it's a series of services

00:14:55,040 --> 00:14:57,600
that will notify you

00:14:56,240 --> 00:14:58,959
about things that change with your

00:14:57,600 --> 00:15:00,240
dependencies specifically whether

00:14:58,959 --> 00:15:02,000
there's new versions or

00:15:00,240 --> 00:15:03,920
potentially new vulnerabilities in a

00:15:02,000 --> 00:15:05,120
package that it knows that you're using

00:15:03,920 --> 00:15:06,959
so there's a couple services like this

00:15:05,120 --> 00:15:08,000
that popped up in recent years one

00:15:06,959 --> 00:15:08,560
that's really nice for the python

00:15:08,000 --> 00:15:10,480
community

00:15:08,560 --> 00:15:11,760
is pi up they're specifically built for

00:15:10,480 --> 00:15:14,560
for python

00:15:11,760 --> 00:15:15,920
it's super powerful um another tool is

00:15:14,560 --> 00:15:17,519
dependable it's very similar it's a

00:15:15,920 --> 00:15:19,040
little more integrated into github

00:15:17,519 --> 00:15:20,480
these tools are fairly similar they have

00:15:19,040 --> 00:15:21,519
some advantages and disadvantages but

00:15:20,480 --> 00:15:22,000
you can sort of weigh them against each

00:15:21,519 --> 00:15:24,800
other

00:15:22,000 --> 00:15:25,519
so again using warehouse pipi as an

00:15:24,800 --> 00:15:26,959
example

00:15:25,519 --> 00:15:29,120
um one of the really nice things about

00:15:26,959 --> 00:15:30,480
this is that we get automated pull

00:15:29,120 --> 00:15:31,360
request notifications whenever there's a

00:15:30,480 --> 00:15:33,360
new version

00:15:31,360 --> 00:15:34,639
and it will go in actually to the file

00:15:33,360 --> 00:15:36,320
where we've defined

00:15:34,639 --> 00:15:37,839
our requirements and it will change that

00:15:36,320 --> 00:15:39,279
version pin and it will update the

00:15:37,839 --> 00:15:41,199
hashes now

00:15:39,279 --> 00:15:42,399
i'm trusting that dependable is securely

00:15:41,199 --> 00:15:43,920
getting these hashes from

00:15:42,399 --> 00:15:46,560
pipeyi and that it hasn't been

00:15:43,920 --> 00:15:48,480
compromised which um you know

00:15:46,560 --> 00:15:49,759
it's again introducing another component

00:15:48,480 --> 00:15:51,040
of my supply chain

00:15:49,759 --> 00:15:52,320
but the advantages here are really nice

00:15:51,040 --> 00:15:53,199
because i'm constantly being upgraded to

00:15:52,320 --> 00:15:56,240
the latest version

00:15:53,199 --> 00:15:57,279
i can merge this whenever i want my ci

00:15:56,240 --> 00:15:58,880
and dependency checks

00:15:57,279 --> 00:16:00,560
get run every single time this pull

00:15:58,880 --> 00:16:01,920
request is made so i can be sure that

00:16:00,560 --> 00:16:04,000
a given change is probably not going to

00:16:01,920 --> 00:16:05,680
break my software

00:16:04,000 --> 00:16:07,120
and yeah i don't have to manually run

00:16:05,680 --> 00:16:08,079
pip compile every time to generate this

00:16:07,120 --> 00:16:09,759
file

00:16:08,079 --> 00:16:11,279
so what kind of classes of attacks can

00:16:09,759 --> 00:16:12,800
we prevent with notifications well

00:16:11,279 --> 00:16:13,920
they don't really prevent any of them in

00:16:12,800 --> 00:16:15,279
the middle or type of squatting

00:16:13,920 --> 00:16:17,199
dependency confusion attacks

00:16:15,279 --> 00:16:18,800
they don't really prevent being a target

00:16:17,199 --> 00:16:20,320
of research or getting solar winded

00:16:18,800 --> 00:16:21,680
either i think those are fairly hard to

00:16:20,320 --> 00:16:23,519
prevent but

00:16:21,680 --> 00:16:25,600
if they do happen and we become aware of

00:16:23,519 --> 00:16:26,959
it these kind of tools will

00:16:25,600 --> 00:16:28,480
basically immediately or as soon as

00:16:26,959 --> 00:16:29,440
possible notify you that you're using

00:16:28,480 --> 00:16:30,240
something that is known to be

00:16:29,440 --> 00:16:32,240
compromised

00:16:30,240 --> 00:16:33,440
and have a faster upgrade path so it's

00:16:32,240 --> 00:16:35,199
as easy as hitting merge

00:16:33,440 --> 00:16:37,920
to make yourself more secure once a

00:16:35,199 --> 00:16:39,199
vulnerability has been found

00:16:37,920 --> 00:16:41,279
so let's talk about some other

00:16:39,199 --> 00:16:42,079
improvements like what else can we do to

00:16:41,279 --> 00:16:43,839
fix this

00:16:42,079 --> 00:16:45,759
and i'm going to outline some things

00:16:43,839 --> 00:16:48,079
that have been proposed in the past or

00:16:45,759 --> 00:16:49,040
are potentially in progress now and sort

00:16:48,079 --> 00:16:51,120
of discuss why

00:16:49,040 --> 00:16:52,800
they are or aren't great ideas and what

00:16:51,120 --> 00:16:54,880
we're going to be doing there

00:16:52,800 --> 00:16:56,560
so one improvement that gets floated a

00:16:54,880 --> 00:16:58,399
lot all the time basically is package

00:16:56,560 --> 00:16:59,199
signing so basically the idea that a

00:16:58,399 --> 00:17:00,880
package author

00:16:59,199 --> 00:17:02,560
can sign their package upload that to pi

00:17:00,880 --> 00:17:04,079
pi include a signature and then every

00:17:02,560 --> 00:17:04,799
time that you download it you verify

00:17:04,079 --> 00:17:07,039
that signature

00:17:04,799 --> 00:17:08,319
and you're good you know that it's legit

00:17:07,039 --> 00:17:10,240
so

00:17:08,319 --> 00:17:11,839
there's a definitive post on package

00:17:10,240 --> 00:17:13,039
signing that donald stuff has made

00:17:11,839 --> 00:17:14,480
about why package signing is not the

00:17:13,039 --> 00:17:15,439
holy grail at the end of the day there's

00:17:14,480 --> 00:17:17,039
a couple problems here

00:17:15,439 --> 00:17:18,559
first it doesn't prevent a whole series

00:17:17,039 --> 00:17:20,240
of attacks like solarwinds solarwinds

00:17:18,559 --> 00:17:21,360
that software was signed perfectly there

00:17:20,240 --> 00:17:22,319
was nothing wrong with the signature

00:17:21,360 --> 00:17:24,640
process there

00:17:22,319 --> 00:17:25,839
and they still got compromised so um it

00:17:24,640 --> 00:17:26,880
doesn't prevent that whole that whole

00:17:25,839 --> 00:17:28,240
class of attacks

00:17:26,880 --> 00:17:29,919
it could potentially prevent the

00:17:28,240 --> 00:17:31,600
dependency confusion attacks

00:17:29,919 --> 00:17:33,360
but so could hashes and the thing about

00:17:31,600 --> 00:17:35,280
um things like gpg

00:17:33,360 --> 00:17:37,039
is that you know not only those tools

00:17:35,280 --> 00:17:38,160
fairly hard to use for new users

00:17:37,039 --> 00:17:41,280
users that just want to publish

00:17:38,160 --> 00:17:43,360
something on pipi um they are also

00:17:41,280 --> 00:17:45,039
built on a web of trust and you know at

00:17:43,360 --> 00:17:46,559
the end of the day you have to also

00:17:45,039 --> 00:17:48,080
trust that the signatures that you're

00:17:46,559 --> 00:17:49,039
verifying are actually the people that

00:17:48,080 --> 00:17:49,840
have permissions to publish that

00:17:49,039 --> 00:17:51,440
software

00:17:49,840 --> 00:17:52,960
and so it's just sort of just shifting

00:17:51,440 --> 00:17:54,640
the trust around a little bit

00:17:52,960 --> 00:17:55,679
um so i would encourage you to read

00:17:54,640 --> 00:17:56,400
donald's post he goes into a lot of

00:17:55,679 --> 00:17:58,320
detail about

00:17:56,400 --> 00:17:59,280
why currently you can upload signatures

00:17:58,320 --> 00:18:00,880
to pipeline to go along with the

00:17:59,280 --> 00:18:01,840
packages that you've published there

00:18:00,880 --> 00:18:03,919
in practice i don't think a lot of

00:18:01,840 --> 00:18:05,440
people are actually using this another

00:18:03,919 --> 00:18:07,360
improvement that sometimes gets floated

00:18:05,440 --> 00:18:08,640
let's have a fully audited and curated

00:18:07,360 --> 00:18:10,720
pipi

00:18:08,640 --> 00:18:12,240
so basically this means let's say every

00:18:10,720 --> 00:18:13,520
package that gets uploaded pipi someone

00:18:12,240 --> 00:18:14,960
looks at it they review the code they

00:18:13,520 --> 00:18:16,720
make sure that it's not malicious

00:18:14,960 --> 00:18:18,720
and then they say right this is

00:18:16,720 --> 00:18:21,360
available for everyone else to install

00:18:18,720 --> 00:18:22,080
hit publish the kind of problem with

00:18:21,360 --> 00:18:24,720
this idea

00:18:22,080 --> 00:18:25,440
is that one of the reasons why pi pi is

00:18:24,720 --> 00:18:26,960
successful

00:18:25,440 --> 00:18:28,880
is because anyone can publish to it it

00:18:26,960 --> 00:18:29,919
is an open ecosystem and an open

00:18:28,880 --> 00:18:31,039
repository

00:18:29,919 --> 00:18:32,799
which in some ways makes it a little bit

00:18:31,039 --> 00:18:33,280
like the wild west but in other ways

00:18:32,799 --> 00:18:35,200
makes it

00:18:33,280 --> 00:18:36,960
very welcoming and you know really

00:18:35,200 --> 00:18:37,760
lowers the bar to who is able to publish

00:18:36,960 --> 00:18:39,679
software

00:18:37,760 --> 00:18:41,200
um we've worked on that improving that

00:18:39,679 --> 00:18:42,720
for a really long time right that is a

00:18:41,200 --> 00:18:44,160
goal like we want it to be easier for

00:18:42,720 --> 00:18:46,000
folks to publish software

00:18:44,160 --> 00:18:48,240
um in my previous python talks i said

00:18:46,000 --> 00:18:49,919
something like pypi is now so easy that

00:18:48,240 --> 00:18:51,280
spammers can do it and it's true right

00:18:49,919 --> 00:18:52,160
lowering that bar also introduced the

00:18:51,280 --> 00:18:54,559
potential for

00:18:52,160 --> 00:18:55,200
spam and you know script kitty type of

00:18:54,559 --> 00:18:56,960
stuff on pi

00:18:55,200 --> 00:18:58,320
pi but that's a trade-off and the

00:18:56,960 --> 00:18:59,760
trade-off is that at the same time it's

00:18:58,320 --> 00:19:01,280
also a lot easier for everyone that

00:18:59,760 --> 00:19:01,760
legitimately wants to publish actual

00:19:01,280 --> 00:19:03,120
code

00:19:01,760 --> 00:19:04,799
on pipeli as well and that's actually

00:19:03,120 --> 00:19:06,640
what we're trying to get there are

00:19:04,799 --> 00:19:09,280
uh software distros where their package

00:19:06,640 --> 00:19:10,400
repositories are fully curated

00:19:09,280 --> 00:19:11,840
that's a lot of work at the end of the

00:19:10,400 --> 00:19:12,640
day it ends up being a ton of work and

00:19:11,840 --> 00:19:14,240
it's not something

00:19:12,640 --> 00:19:16,000
right now that a team of volunteers that

00:19:14,240 --> 00:19:18,960
support pipi or the small

00:19:16,000 --> 00:19:20,240
psf staff would be able to support

00:19:18,960 --> 00:19:22,480
another improvement we can make

00:19:20,240 --> 00:19:24,640
is basically furthering the slow but

00:19:22,480 --> 00:19:26,960
inevitable death of the setup.pi file

00:19:24,640 --> 00:19:28,559
so if you're not familiar with setup.pi

00:19:26,960 --> 00:19:30,240
basically every package

00:19:28,559 --> 00:19:31,919
that's published on pypi usually

00:19:30,240 --> 00:19:34,240
contains a setup.pi file

00:19:31,919 --> 00:19:35,520
and this file is executed at install

00:19:34,240 --> 00:19:36,240
time so when you download a package from

00:19:35,520 --> 00:19:38,960
pypi

00:19:36,240 --> 00:19:40,160
this setup.pi file is executed and at

00:19:38,960 --> 00:19:41,520
the end of the day

00:19:40,160 --> 00:19:42,960
you know you can do anything in that

00:19:41,520 --> 00:19:44,240
file that you can do with the python

00:19:42,960 --> 00:19:45,840
package and that thing happens on the

00:19:44,240 --> 00:19:47,280
user's machine when it's installed

00:19:45,840 --> 00:19:49,200
so that's how a lot of like potentially

00:19:47,280 --> 00:19:49,840
malicious python packages can be created

00:19:49,200 --> 00:19:51,520
is by

00:19:49,840 --> 00:19:52,640
you know running some arbitrary scripts

00:19:51,520 --> 00:19:53,520
or shell commands or something from

00:19:52,640 --> 00:19:55,120
setup.pi

00:19:53,520 --> 00:19:57,039
at install time right you don't even

00:19:55,120 --> 00:19:57,760
have to you know import the package in

00:19:57,039 --> 00:19:59,600
order to

00:19:57,760 --> 00:20:02,080
potentially run something that's

00:19:59,600 --> 00:20:04,240
malicious so there is a move towards

00:20:02,080 --> 00:20:05,280
making source distributions and things

00:20:04,240 --> 00:20:07,280
that are published on pybi

00:20:05,280 --> 00:20:08,720
more static and now require code

00:20:07,280 --> 00:20:10,720
execution to install or

00:20:08,720 --> 00:20:12,240
execution of the package itself this

00:20:10,720 --> 00:20:13,520
wouldn't fully absolve us of any

00:20:12,240 --> 00:20:15,200
potential for

00:20:13,520 --> 00:20:16,559
malicious packages on pipeline right you

00:20:15,200 --> 00:20:18,159
could still have something which just

00:20:16,559 --> 00:20:18,960
happen when you import or run certain

00:20:18,159 --> 00:20:21,120
functions

00:20:18,960 --> 00:20:22,559
of the api of the package but this does

00:20:21,120 --> 00:20:23,600
sort of prevent some things that can

00:20:22,559 --> 00:20:24,559
happen with type of squatting where you

00:20:23,600 --> 00:20:25,200
accidentally take the wrong thing and

00:20:24,559 --> 00:20:26,880
you're like oh

00:20:25,200 --> 00:20:27,840
what did i just install um you wouldn't

00:20:26,880 --> 00:20:28,720
have to worry about that as much because

00:20:27,840 --> 00:20:30,720
setup.i

00:20:28,720 --> 00:20:32,240
wouldn't have been getting executed so

00:20:30,720 --> 00:20:33,760
we're slowly moving towards this

00:20:32,240 --> 00:20:35,039
it's going to take a while because septa

00:20:33,760 --> 00:20:37,120
pipe is something that we've centered on

00:20:35,039 --> 00:20:40,320
as a standard for language ecosystem

00:20:37,120 --> 00:20:42,159
and and it'll take some time for sure

00:20:40,320 --> 00:20:43,840
another improvement better docs i mean

00:20:42,159 --> 00:20:45,679
let's be honest we can always use better

00:20:43,840 --> 00:20:47,360
docs basically everywhere

00:20:45,679 --> 00:20:49,679
we actually i think have fairly good

00:20:47,360 --> 00:20:52,159
docs so the python packaging user guide

00:20:49,679 --> 00:20:53,280
which lives at packaging.python.org is

00:20:52,159 --> 00:20:56,480
actually a really nice

00:20:53,280 --> 00:20:57,760
guide for how to do python packaging

00:20:56,480 --> 00:20:59,840
one thing i think we could improve here

00:20:57,760 --> 00:21:01,360
is you know being able to better inform

00:20:59,840 --> 00:21:03,360
users about the power

00:21:01,360 --> 00:21:04,640
and potential that their tools give them

00:21:03,360 --> 00:21:06,320
right i don't think

00:21:04,640 --> 00:21:08,000
actually restricting something like

00:21:06,320 --> 00:21:09,840
pip's ability to install

00:21:08,000 --> 00:21:11,679
any single package on pipeline or from

00:21:09,840 --> 00:21:12,799
any repository is a good idea

00:21:11,679 --> 00:21:13,919
that's one of the reasons why pip is

00:21:12,799 --> 00:21:14,799
successful is because it is such a

00:21:13,919 --> 00:21:17,200
powerful tool

00:21:14,799 --> 00:21:18,640
but at the same time we do want users to

00:21:17,200 --> 00:21:19,520
know that there is potential for

00:21:18,640 --> 00:21:21,120
misconfiguration

00:21:19,520 --> 00:21:22,720
there is potential for using the tool in

00:21:21,120 --> 00:21:24,559
a way that could make them vulnerable

00:21:22,720 --> 00:21:25,760
and i think you know me giving a talk

00:21:24,559 --> 00:21:27,360
like this helps with that

00:21:25,760 --> 00:21:28,960
documentation and best practices also

00:21:27,360 --> 00:21:30,159
really helps with that as well and

00:21:28,960 --> 00:21:31,520
you know i'd love to see a section in

00:21:30,159 --> 00:21:32,880
this guide also specifically about

00:21:31,520 --> 00:21:34,799
supply chain security

00:21:32,880 --> 00:21:36,000
um some of the workflows that i

00:21:34,799 --> 00:21:38,559
described and things like that would be

00:21:36,000 --> 00:21:40,080
right at home there

00:21:38,559 --> 00:21:41,760
another improvement that's happening

00:21:40,080 --> 00:21:44,320
actually in progress is the integration

00:21:41,760 --> 00:21:46,159
of the update framework into pipi so the

00:21:44,320 --> 00:21:49,039
update framework is a bit like

00:21:46,159 --> 00:21:49,919
hashes but better so it's based on pep

00:21:49,039 --> 00:21:51,840
00:21:49,919 --> 00:21:53,600
which is a way to secure ipi downloads

00:21:51,840 --> 00:21:54,960
with signed repository metadata

00:21:53,600 --> 00:21:57,120
so this is a bit different than package

00:21:54,960 --> 00:21:58,799
signing itself because packages here are

00:21:57,120 --> 00:22:00,400
signed by the repository

00:21:58,799 --> 00:22:02,159
and not the author so this is like a

00:22:00,400 --> 00:22:03,760
more secure way to verify

00:22:02,159 --> 00:22:05,280
what pi pi is serving you is actually

00:22:03,760 --> 00:22:07,520
what you want to install

00:22:05,280 --> 00:22:10,000
however tuff does allow for the ability

00:22:07,520 --> 00:22:11,280
for package authors to also sign as well

00:22:10,000 --> 00:22:12,640
it doesn't help with web of trust or

00:22:11,280 --> 00:22:13,760
anything like that but it does give us

00:22:12,640 --> 00:22:15,200
another avenue towards

00:22:13,760 --> 00:22:16,960
actually having fully and signed

00:22:15,200 --> 00:22:18,559
packages um this is in progress we have

00:22:16,960 --> 00:22:19,760
some folks working on this right now

00:22:18,559 --> 00:22:22,000
the national science foundation actually

00:22:19,760 --> 00:22:23,679
just gave a large 800 000

00:22:22,000 --> 00:22:25,520
grant to the new york university and

00:22:23,679 --> 00:22:27,120
some folks working there to help

00:22:25,520 --> 00:22:29,200
improve tough and also integrate it into

00:22:27,120 --> 00:22:30,080
pipi so watch the space that's going to

00:22:29,200 --> 00:22:31,919
happen

00:22:30,080 --> 00:22:33,280
over the next couple of years i think

00:22:31,919 --> 00:22:34,159
another improvement that we can make

00:22:33,280 --> 00:22:35,440
that i think would really help with

00:22:34,159 --> 00:22:36,159
supply chain security on pipi

00:22:35,440 --> 00:22:39,600
specifically

00:22:36,159 --> 00:22:41,520
is introducing name spaces so this idea

00:22:39,600 --> 00:22:43,440
was actually we've been thinking about

00:22:41,520 --> 00:22:45,440
it for a while was introduced by a user

00:22:43,440 --> 00:22:47,039
as an issue on warehouse and basically

00:22:45,440 --> 00:22:48,720
the idea is that um

00:22:47,039 --> 00:22:50,480
we would be able to add some confidence

00:22:48,720 --> 00:22:52,400
that a certain package is owned by a

00:22:50,480 --> 00:22:54,480
certain entity so right now

00:22:52,400 --> 00:22:56,080
anyone can go and register a package

00:22:54,480 --> 00:22:56,720
that starts with amazon or something

00:22:56,080 --> 00:22:58,480
like that

00:22:56,720 --> 00:23:00,080
a namespace would allow us to enforce

00:22:58,480 --> 00:23:01,440
that let's say every package just starts

00:23:00,080 --> 00:23:03,360
with amazon dash

00:23:01,440 --> 00:23:04,320
is definitely owned by the amazon team

00:23:03,360 --> 00:23:05,600
and you can install those with

00:23:04,320 --> 00:23:06,960
confidence right and you can also

00:23:05,600 --> 00:23:08,480
restrict um

00:23:06,960 --> 00:23:09,760
that you know if you're installing

00:23:08,480 --> 00:23:11,120
certain packages with amazon dash

00:23:09,760 --> 00:23:12,720
they're only coming from that team

00:23:11,120 --> 00:23:13,840
so this cases would be powerful a lot of

00:23:12,720 --> 00:23:15,120
other repositories have them you can

00:23:13,840 --> 00:23:17,679
start think of namespaces like

00:23:15,120 --> 00:23:18,480
um users and organizations on github

00:23:17,679 --> 00:23:20,400
right

00:23:18,480 --> 00:23:21,760
you can have multiple namespaces and

00:23:20,400 --> 00:23:22,080
then start the same project name within

00:23:21,760 --> 00:23:24,000
them

00:23:22,080 --> 00:23:25,919
this would also open up the potential

00:23:24,000 --> 00:23:27,440
for a lot more packages and

00:23:25,919 --> 00:23:28,240
on pi pi in fact more packages name

00:23:27,440 --> 00:23:30,000
would become available because they

00:23:28,240 --> 00:23:31,360
would be under the name spaces

00:23:30,000 --> 00:23:33,039
but yeah generally this would just help

00:23:31,360 --> 00:23:34,559
improve confidence in

00:23:33,039 --> 00:23:36,320
who owns what package when it's being

00:23:34,559 --> 00:23:37,760
installed we sort of have to retrofit

00:23:36,320 --> 00:23:38,559
this onto some of the existing tools and

00:23:37,760 --> 00:23:39,919
tooling um

00:23:38,559 --> 00:23:41,679
and we think it can probably be done but

00:23:39,919 --> 00:23:43,279
it will be a fair amount of work we have

00:23:41,679 --> 00:23:44,799
a lot of projects like this that we have

00:23:43,279 --> 00:23:48,159
sort of outlined and have ideas about

00:23:44,799 --> 00:23:49,520
and um we need help basically so

00:23:48,159 --> 00:23:51,679
one improvement we can make is just

00:23:49,520 --> 00:23:53,520
increasing funding for projects like i

00:23:51,679 --> 00:23:56,320
said we have a long list

00:23:53,520 --> 00:23:57,440
if you go to psf fundable packaging

00:23:56,320 --> 00:23:58,559
improvements on github

00:23:57,440 --> 00:24:00,400
there's a long list of packaging

00:23:58,559 --> 00:24:02,159
improvements that we've outlined here

00:24:00,400 --> 00:24:03,520
that are maybe not quite on the roadmap

00:24:02,159 --> 00:24:04,480
but we think could be funded and would

00:24:03,520 --> 00:24:06,480
be really useful

00:24:04,480 --> 00:24:08,559
for the community for package security

00:24:06,480 --> 00:24:10,400
and all those kinds of things

00:24:08,559 --> 00:24:12,080
and increasing funding here having more

00:24:10,400 --> 00:24:13,200
organizations step up to help fund some

00:24:12,080 --> 00:24:14,960
of these projects

00:24:13,200 --> 00:24:16,720
would go a really long way on pipe we

00:24:14,960 --> 00:24:18,400
have a good history of the last couple

00:24:16,720 --> 00:24:20,320
years now bringing in grants

00:24:18,400 --> 00:24:21,440
to work on projects like this and

00:24:20,320 --> 00:24:24,000
successfully land them

00:24:21,440 --> 00:24:25,279
to a great benefit so um just generally

00:24:24,000 --> 00:24:26,000
an improvement we can make is more

00:24:25,279 --> 00:24:27,760
funding here

00:24:26,000 --> 00:24:30,240
and to to my own horn a little bit i'm

00:24:27,760 --> 00:24:32,960
really proud that my employer google

00:24:30,240 --> 00:24:34,080
recently just gave the psf a large grant

00:24:32,960 --> 00:24:35,520
to do some of these things we're going

00:24:34,080 --> 00:24:37,120
to build productionized malware

00:24:35,520 --> 00:24:38,640
detection for pipi doing some sort of

00:24:37,120 --> 00:24:40,320
static analysis

00:24:38,640 --> 00:24:42,240
make some general foundational tool

00:24:40,320 --> 00:24:43,600
improvement for packaging and some other

00:24:42,240 --> 00:24:45,039
things as well so

00:24:43,600 --> 00:24:47,039
i'd love to see more organizations step

00:24:45,039 --> 00:24:48,480
up like this to this degree and support

00:24:47,039 --> 00:24:50,080
these projects and help

00:24:48,480 --> 00:24:51,679
improve the general ecosystem as well

00:24:50,080 --> 00:24:53,520
all right thanks for watching

00:24:51,679 --> 00:24:55,120
i also want to give a huge thank you to

00:24:53,520 --> 00:24:56,880
the pycon staff as usual

00:24:55,120 --> 00:24:58,000
for everything that they're doing all

00:24:56,880 --> 00:24:59,279
the hard work they've put into making

00:24:58,000 --> 00:25:01,039
this online event

00:24:59,279 --> 00:25:03,039
super successful i'm really impressed

00:25:01,039 --> 00:25:05,120
and it's it's gonna be really amazing

00:25:03,039 --> 00:25:06,159
um they absolutely deserve all of your

00:25:05,120 --> 00:25:07,760
thanks as well so

00:25:06,159 --> 00:25:09,440
please be sure to reach out on twitter

00:25:07,760 --> 00:25:10,480
or via email and let them know that you

00:25:09,440 --> 00:25:12,799
appreciate all the work that they've

00:25:10,480 --> 00:25:15,840
been doing to make this event successful

00:25:12,799 --> 00:25:15,840
see you all next year

00:26:13,679 --> 00:26:15,760

YouTube URL: https://www.youtube.com/watch?v=VWWgkF-0cDQ


