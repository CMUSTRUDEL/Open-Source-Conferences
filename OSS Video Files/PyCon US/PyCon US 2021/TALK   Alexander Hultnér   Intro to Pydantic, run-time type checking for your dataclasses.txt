Title: TALK   Alexander Hultnér   Intro to Pydantic, run-time type checking for your dataclasses
Publication date: 2021-05-30
Playlist: PyCon US 2021
Description: 
	Want static type checking in run time? Want to use standard python type annotations? Want compatibility with standard python dataclasses? Then it sounds like pydantic is something for you. Pydantic offers a pythonic way to validate your user data using run-time enforced standard type-annotations.

This talk focuses on how Pydantic can be used with web APIs to simplify many parts regarding user input validation. I’ve previously back in early 2018 built a similar solution to Pydantic based upon standard dataclasses for a large B2B SaaS application built with flask. When I left that project I was briefly considered rebuilding it as open-source but while doing my research I discovered Pydantic’s powers which I had put in my keep tabs on the list when it was in a much earlier stage, but at this point, it had evolved to a polished library and a perfect companion for JSON-based APIs.

Slides: https://slides.com/hultner/pycon-us-2021
Captions: 
	00:00:04,170 --> 00:00:11,869
[Music]

00:00:14,080 --> 00:00:18,000
hello

00:00:15,040 --> 00:00:19,520
i'm alexander halpner and i'm from

00:00:18,000 --> 00:00:23,039
gothenburg sweden

00:00:19,520 --> 00:00:25,760
and i'm here at pycon us this year and

00:00:23,039 --> 00:00:26,080
um i'm very happy to be here and speak

00:00:25,760 --> 00:00:28,480
for

00:00:26,080 --> 00:00:29,519
you all today i'm gonna talk a little

00:00:28,480 --> 00:00:32,800
bit about

00:00:29,519 --> 00:00:36,000
pedantic and my talk is titled

00:00:32,800 --> 00:00:36,320
intro to pedantic runtime type checking

00:00:36,000 --> 00:00:40,079
for

00:00:36,320 --> 00:00:43,200
your python data classes so

00:00:40,079 --> 00:00:44,000
let's get ahead done so as i told you my

00:00:43,200 --> 00:00:47,680
name is alexander

00:00:44,000 --> 00:00:51,039
hartner and i'm the founder of hulkneer

00:00:47,680 --> 00:00:54,000
technologies and as well paper.io

00:00:51,039 --> 00:00:55,120
which is a service which me and my

00:00:54,000 --> 00:00:57,680
colleague magnus

00:00:55,120 --> 00:00:58,559
have been working on for the past year

00:00:57,680 --> 00:01:01,039
you can see

00:00:58,559 --> 00:01:01,920
a small screenshot here down to the

00:01:01,039 --> 00:01:04,879
right

00:01:01,920 --> 00:01:05,840
uh i also talk at a lot of conferences

00:01:04,879 --> 00:01:10,400
i'm uh

00:01:05,840 --> 00:01:13,840
i'm a frequent uh i'm a frequent uh

00:01:10,400 --> 00:01:14,479
speaker at the different uh conferences

00:01:13,840 --> 00:01:17,759
for instance

00:01:14,479 --> 00:01:18,560
icon sweden quite a few years uh euro

00:01:17,759 --> 00:01:21,119
python

00:01:18,560 --> 00:01:22,400
and of course here in python us for my

00:01:21,119 --> 00:01:24,159
first time this

00:01:22,400 --> 00:01:26,400
time around so that's very nice i do

00:01:24,159 --> 00:01:28,640
some freelance consulting

00:01:26,400 --> 00:01:30,320
and i also do some training and

00:01:28,640 --> 00:01:32,320
workshops so you can contact me if

00:01:30,320 --> 00:01:34,640
you're interested about that

00:01:32,320 --> 00:01:35,920
my twitter handle is at a haltner and

00:01:34,640 --> 00:01:39,520
you can also email me

00:01:35,920 --> 00:01:42,799
via contact hulkner.sc

00:01:39,520 --> 00:01:43,759
my all my slides are available at

00:01:42,799 --> 00:01:46,079
slides.com

00:01:43,759 --> 00:01:47,200
slash haltner and all the links you can

00:01:46,079 --> 00:01:50,240
see in these slides

00:01:47,200 --> 00:01:54,320
they are clickable so you can

00:01:50,240 --> 00:01:56,960
so you can find them via slice.com

00:01:54,320 --> 00:01:58,079
and just scroll down until you find the

00:01:56,960 --> 00:02:01,280
python

00:01:58,079 --> 00:02:04,719
us slides which should probably be

00:02:01,280 --> 00:02:07,119
on top right now and

00:02:04,719 --> 00:02:09,039
you can also reach me on linkedin where

00:02:07,119 --> 00:02:11,120
i'm also haltner

00:02:09,039 --> 00:02:12,400
so let's go ahead down so the outline

00:02:11,120 --> 00:02:14,800
for today's talk is

00:02:12,400 --> 00:02:16,640
uh like this done and we're gonna start

00:02:14,800 --> 00:02:19,120
with a quick refresher for python

00:02:16,640 --> 00:02:21,520
data classes uh which could be good if

00:02:19,120 --> 00:02:25,040
you've forgotten some of the details

00:02:21,520 --> 00:02:28,080
or if not just see what we're gonna

00:02:25,040 --> 00:02:29,120
be covering and then i'm gonna introduce

00:02:28,080 --> 00:02:31,920
you to pydantik

00:02:29,120 --> 00:02:32,480
i'm gonna talk a little bit about the

00:02:31,920 --> 00:02:34,160
runtime

00:02:32,480 --> 00:02:36,239
type checking gonna show you some really

00:02:34,160 --> 00:02:37,360
cool json stuff you can do

00:02:36,239 --> 00:02:39,760
i'm going to show you some custom

00:02:37,360 --> 00:02:41,040
validators as well as built-in

00:02:39,760 --> 00:02:42,720
validators

00:02:41,040 --> 00:02:44,319
i'm also going to show you a little bit

00:02:42,720 --> 00:02:47,920
how you can use fidentic 2

00:02:44,319 --> 00:02:51,120
runtime type check the types of your

00:02:47,920 --> 00:02:54,319
functions in

00:02:51,120 --> 00:02:56,160
in runtime so basically if you have a

00:02:54,319 --> 00:02:57,760
function you can check that as well

00:02:56,160 --> 00:03:00,000
i'm going to show you a little bit about

00:02:57,760 --> 00:03:02,720
some framework integrations

00:03:00,000 --> 00:03:04,319
and how pedantic can be used with a lot

00:03:02,720 --> 00:03:05,920
of different frameworks

00:03:04,319 --> 00:03:08,239
i'm also going to show a small example

00:03:05,920 --> 00:03:11,040
of that and some auto

00:03:08,239 --> 00:03:11,360
generated testing which i'm not going to

00:03:11,040 --> 00:03:14,480
go

00:03:11,360 --> 00:03:16,319
too deep into but i'm going to drop a

00:03:14,480 --> 00:03:18,000
little hint there so you can

00:03:16,319 --> 00:03:20,319
find out more if you're interested about

00:03:18,000 --> 00:03:22,560
that and some cool features worth me

00:03:20,319 --> 00:03:24,480
mentioning and then we're gonna conclude

00:03:22,560 --> 00:03:27,360
uh this talk today

00:03:24,480 --> 00:03:29,200
so uh let's not wait any further and uh

00:03:27,360 --> 00:03:32,640
get started so data class is done

00:03:29,200 --> 00:03:34,159
uh here's a quick refresher uh we have

00:03:32,640 --> 00:03:36,239
the at data class

00:03:34,159 --> 00:03:37,440
decorator and for this talk we're going

00:03:36,239 --> 00:03:41,360
to use uh

00:03:37,440 --> 00:03:43,760
imaginary waffle place for

00:03:41,360 --> 00:03:44,480
our examples because who doesn't love

00:03:43,760 --> 00:03:47,440
waffles

00:03:44,480 --> 00:03:48,000
anyway so our imaginary company is a

00:03:47,440 --> 00:03:51,120
cafe

00:03:48,000 --> 00:03:53,519
named the waffle bistro and the waffle

00:03:51,120 --> 00:03:56,560
beaster need to model their waffles

00:03:53,519 --> 00:03:56,959
so let's take a look at how such a data

00:03:56,560 --> 00:04:00,159
class

00:03:56,959 --> 00:04:02,000
could look like so we have a waffle

00:04:00,159 --> 00:04:03,920
we have some style we have some topping

00:04:02,000 --> 00:04:05,920
toppings and we have some type

00:04:03,920 --> 00:04:08,640
annotations on that

00:04:05,920 --> 00:04:09,599
and now let's try it out then so as you

00:04:08,640 --> 00:04:11,760
can see

00:04:09,599 --> 00:04:14,640
we're trying to create a swedish style

00:04:11,760 --> 00:04:18,079
waffle with chocolate sauce and ham

00:04:14,640 --> 00:04:21,199
not my favorite combination of toppings

00:04:18,079 --> 00:04:23,440
and i'm not sure if it's what

00:04:21,199 --> 00:04:24,880
the waffle beast we want to serve either

00:04:23,440 --> 00:04:27,280
but as you can see

00:04:24,880 --> 00:04:28,000
it's completely allowed by our waffle

00:04:27,280 --> 00:04:30,960
class at this

00:04:28,000 --> 00:04:33,120
point so that's something we probably

00:04:30,960 --> 00:04:35,199
would want to avoid maybe we want some

00:04:33,120 --> 00:04:36,880
stricture types on this because string

00:04:35,199 --> 00:04:39,199
could be anything

00:04:36,880 --> 00:04:40,960
basically so let's go ahead down and see

00:04:39,199 --> 00:04:42,240
if we can constrain which types of

00:04:40,960 --> 00:04:44,960
toppings we offer

00:04:42,240 --> 00:04:45,840
and which styles so we offer a couple of

00:04:44,960 --> 00:04:49,520
cream based

00:04:45,840 --> 00:04:51,280
toppings so you can see we have

00:04:49,520 --> 00:04:52,800
we have whipped cream we have ice cream

00:04:51,280 --> 00:04:56,000
we also have a couple of

00:04:52,800 --> 00:04:58,880
dessert sauces so you can see uh see

00:04:56,000 --> 00:05:00,080
that we have cloudberry jam uh one of my

00:04:58,880 --> 00:05:02,160
personal favorites

00:05:00,080 --> 00:05:03,919
it's a bear we have here in sweden which

00:05:02,160 --> 00:05:05,360
is very good and if you have the chance

00:05:03,919 --> 00:05:08,240
you should try it out

00:05:05,360 --> 00:05:09,680
uh raspberry jam a classic and chocolate

00:05:08,240 --> 00:05:12,000
sauce for our belgian style

00:05:09,680 --> 00:05:14,479
waffles and as you can see we have two

00:05:12,000 --> 00:05:16,479
styles swedish and belgian

00:05:14,479 --> 00:05:17,520
and we updated our data class using the

00:05:16,479 --> 00:05:20,479
waffle style

00:05:17,520 --> 00:05:21,840
for style and a couple of toppings for

00:05:20,479 --> 00:05:24,240
the toppings

00:05:21,840 --> 00:05:27,840
so let's see what happens now if we try

00:05:24,240 --> 00:05:31,600
to create a waffle with ham topping

00:05:27,840 --> 00:05:33,919
so as you can see the user provided a

00:05:31,600 --> 00:05:34,880
waffle order where we have a swedish

00:05:33,919 --> 00:05:38,720
style waffle

00:05:34,880 --> 00:05:42,320
and chocolate sauce with ham okay

00:05:38,720 --> 00:05:45,280
so didn't our type stop this well

00:05:42,320 --> 00:05:45,919
uh for statically checked types with

00:05:45,280 --> 00:05:47,919
mifi

00:05:45,919 --> 00:05:49,680
this would maybe be enough you would

00:05:47,919 --> 00:05:52,080
catch it as a

00:05:49,680 --> 00:05:53,120
type error in your static type

00:05:52,080 --> 00:05:55,360
validation but

00:05:53,120 --> 00:05:57,199
in runtime it's still not stopped and

00:05:55,360 --> 00:05:59,600
especially if you're working with

00:05:57,199 --> 00:06:01,039
runtime data then this could be a

00:05:59,600 --> 00:06:04,800
problem so you can see

00:06:01,039 --> 00:06:06,319
that we're completely allowed to create

00:06:04,800 --> 00:06:10,319
a waffle with ham

00:06:06,319 --> 00:06:12,479
and there's nothing stopping us so

00:06:10,319 --> 00:06:14,400
what can we do about that then and this

00:06:12,479 --> 00:06:17,520
is where pideantic comes

00:06:14,400 --> 00:06:19,840
comes handy so but i think it's a live

00:06:17,520 --> 00:06:21,680
python library which allows you to

00:06:19,840 --> 00:06:24,479
enforce run type

00:06:21,680 --> 00:06:26,000
or enforce types from type annotations

00:06:24,479 --> 00:06:29,919
in runtime

00:06:26,000 --> 00:06:32,240
it's compatible with data classes and

00:06:29,919 --> 00:06:34,240
you also have some bonus stuff if you

00:06:32,240 --> 00:06:36,479
want to go further

00:06:34,240 --> 00:06:38,319
you have very user-friendly errors

00:06:36,479 --> 00:06:41,759
there's uh

00:06:38,319 --> 00:06:43,280
no special syntax syntax it's just pure

00:06:41,759 --> 00:06:46,960
pythonic classes

00:06:43,280 --> 00:06:49,039
uh nothing strange we have built-in dc

00:06:46,960 --> 00:06:51,680
realization and serialization

00:06:49,039 --> 00:06:53,759
of classes and it's even supporting

00:06:51,680 --> 00:06:55,280
nested

00:06:53,759 --> 00:06:57,520
structures and there are some

00:06:55,280 --> 00:07:00,160
predecessors like data classes

00:06:57,520 --> 00:07:02,080
actors marshmallow validir and orm

00:07:00,160 --> 00:07:02,880
libraries and those could be good to

00:07:02,080 --> 00:07:05,280
look at

00:07:02,880 --> 00:07:07,360
and what makes spidernic stand out is

00:07:05,280 --> 00:07:08,800
that it's just using the standard type

00:07:07,360 --> 00:07:10,639
annotations

00:07:08,800 --> 00:07:13,199
and the documentation is really great

00:07:10,639 --> 00:07:15,280
and as you can see it's blue here in the

00:07:13,199 --> 00:07:17,280
slide and that means you can click the

00:07:15,280 --> 00:07:22,000
link if you go to slice afterwards and

00:07:17,280 --> 00:07:22,000
find all the nice documentation yourself

00:07:23,199 --> 00:07:30,319
so let's get in to pedantic done

00:07:27,199 --> 00:07:32,400
so run type type checking

00:07:30,319 --> 00:07:33,520
is of course very nice and this is what

00:07:32,400 --> 00:07:37,120
we want to do

00:07:33,520 --> 00:07:39,360
so let's lean on the shoulder of the

00:07:37,120 --> 00:07:40,319
giant in the house which is pedantic in

00:07:39,360 --> 00:07:42,800
this case

00:07:40,319 --> 00:07:44,560
so now we change our code a little bit

00:07:42,800 --> 00:07:48,160
we import data classes

00:07:44,560 --> 00:07:50,720
uh from pidentic instead of the

00:07:48,160 --> 00:07:52,479
standard library classes and then we

00:07:50,720 --> 00:07:55,759
don't really change anything else

00:07:52,479 --> 00:07:58,800
we keep our waffle class the same but

00:07:55,759 --> 00:08:00,479
when we now try to initiate the waffle

00:07:58,800 --> 00:08:02,160
you can see that we get a validation

00:08:00,479 --> 00:08:02,960
error actually we get two validation

00:08:02,160 --> 00:08:05,599
errors

00:08:02,960 --> 00:08:06,720
and they provide a nice readable value

00:08:05,599 --> 00:08:10,160
uh you can see that

00:08:06,720 --> 00:08:10,879
it references which index in the topping

00:08:10,160 --> 00:08:13,680
topple

00:08:10,879 --> 00:08:15,039
that's actually invalid so ham at the

00:08:13,680 --> 00:08:16,879
index one

00:08:15,039 --> 00:08:18,080
and it gives us an error explaining

00:08:16,879 --> 00:08:21,280
what's wrong

00:08:18,080 --> 00:08:23,840
uh so this is uh it's really helpful

00:08:21,280 --> 00:08:26,000
and we can see it's neither uh desert

00:08:23,840 --> 00:08:29,360
source nor is it uh

00:08:26,000 --> 00:08:32,159
cream so it's not allowed

00:08:29,360 --> 00:08:33,919
and with that simple change we already

00:08:32,159 --> 00:08:35,839
got some runtime

00:08:33,919 --> 00:08:38,080
type checking on our classes so we could

00:08:35,839 --> 00:08:40,080
stop here but

00:08:38,080 --> 00:08:41,360
of course we want to go further and see

00:08:40,080 --> 00:08:43,519
what more we can do

00:08:41,360 --> 00:08:45,200
so let's try to create a valid waffle

00:08:43,519 --> 00:08:48,160
and maybe with cloudberry jam

00:08:45,200 --> 00:08:49,600
uh you can see in the picture here is uh

00:08:48,160 --> 00:08:51,600
what the clubber

00:08:49,600 --> 00:08:52,959
is looks like it's kind of like orange

00:08:51,600 --> 00:08:56,000
raspberries in

00:08:52,959 --> 00:08:58,240
look but it tastes completely different

00:08:56,000 --> 00:09:01,600
so let's create a swedish style waffle

00:08:58,240 --> 00:09:04,399
with the whipped cream and clover jam

00:09:01,600 --> 00:09:05,440
see here how i used the cream enom for

00:09:04,399 --> 00:09:08,800
the whipped cream

00:09:05,440 --> 00:09:10,240
but the strings were representations for

00:09:08,800 --> 00:09:13,040
the other fields

00:09:10,240 --> 00:09:15,519
pedantic is a parsing library which will

00:09:13,040 --> 00:09:15,519
try to

00:09:15,600 --> 00:09:19,920
parse the data you actually want from

00:09:18,480 --> 00:09:21,920
this so it will convert it

00:09:19,920 --> 00:09:24,000
to enums for you automatically as you

00:09:21,920 --> 00:09:26,080
can see here and cloud your

00:09:24,000 --> 00:09:27,600
very gem automatically got parsed as the

00:09:26,080 --> 00:09:29,680
search source

00:09:27,600 --> 00:09:31,440
if you want more strictness than this

00:09:29,680 --> 00:09:34,839
you can achieve some of this with the

00:09:31,440 --> 00:09:36,320
strict types which you can also see in

00:09:34,839 --> 00:09:39,680
the

00:09:36,320 --> 00:09:41,600
documentation or if you want even

00:09:39,680 --> 00:09:44,640
further there is being work

00:09:41,600 --> 00:09:46,880
made on a fully strict mode

00:09:44,640 --> 00:09:47,920
so that might be coming in the future

00:09:46,880 --> 00:09:49,839
not sure when

00:09:47,920 --> 00:09:52,240
but keep your eyes open if that's

00:09:49,839 --> 00:09:54,399
something that matters to you

00:09:52,240 --> 00:09:56,720
so what about json done so the data

00:09:54,399 --> 00:09:58,320
class drop-in replacements is really

00:09:56,720 --> 00:09:59,920
great for capability and

00:09:58,320 --> 00:10:01,600
makes it possible to get started really

00:09:59,920 --> 00:10:02,320
quickly you don't need to change

00:10:01,600 --> 00:10:04,320
anything

00:10:02,320 --> 00:10:07,200
but sometimes you want to do even more

00:10:04,320 --> 00:10:09,680
and with the fidantic base model you can

00:10:07,200 --> 00:10:10,480
so you have first class json support

00:10:09,680 --> 00:10:12,240
built in

00:10:10,480 --> 00:10:14,800
and the only thing we changed right now

00:10:12,240 --> 00:10:16,480
as you can see is that we removed the

00:10:14,800 --> 00:10:18,560
data class decorator

00:10:16,480 --> 00:10:19,839
and instead inherit from base model and

00:10:18,560 --> 00:10:22,320
of course you can

00:10:19,839 --> 00:10:23,920
also have your own base class that

00:10:22,320 --> 00:10:27,519
inherits from base model

00:10:23,920 --> 00:10:29,920
and then later you can inherit

00:10:27,519 --> 00:10:31,120
that class and you automatically get it

00:10:29,920 --> 00:10:32,880
all the way

00:10:31,120 --> 00:10:34,160
but let's not go into that too much

00:10:32,880 --> 00:10:37,360
right now

00:10:34,160 --> 00:10:39,519
so uh let's say done i always

00:10:37,360 --> 00:10:42,079
need to specify the arguments using

00:10:39,519 --> 00:10:45,360
keyword arguments when we use

00:10:42,079 --> 00:10:48,800
our base model and as you can see here

00:10:45,360 --> 00:10:51,440
we use style equal swedish and toppings

00:10:48,800 --> 00:10:54,640
equals and the same data as before

00:10:51,440 --> 00:10:57,120
and as you can see we get the same style

00:10:54,640 --> 00:11:00,160
of waffle object as we did before

00:10:57,120 --> 00:11:03,279
so everything works great

00:11:00,160 --> 00:11:06,560
but now we can easily

00:11:03,279 --> 00:11:08,240
both encode this entire object as json

00:11:06,560 --> 00:11:10,800
and decode it as well there's also

00:11:08,240 --> 00:11:14,000
built-in support for um

00:11:10,800 --> 00:11:17,279
for dict pickle and there's a

00:11:14,000 --> 00:11:20,240
an immutable copy method and but that

00:11:17,279 --> 00:11:23,519
they can also deserialize or serialize

00:11:20,240 --> 00:11:27,440
uh subclasses and

00:11:23,519 --> 00:11:28,240
also if you reference another pedantic

00:11:27,440 --> 00:11:30,160
class within

00:11:28,240 --> 00:11:31,920
your properties in the pythagoras that

00:11:30,160 --> 00:11:33,680
will also be handled for you

00:11:31,920 --> 00:11:35,600
so it's really handy for those kinds of

00:11:33,680 --> 00:11:39,279
things

00:11:35,600 --> 00:11:41,040
so let's see then we have our json

00:11:39,279 --> 00:11:43,200
object we could easily

00:11:41,040 --> 00:11:44,160
create here you can see we just run the

00:11:43,200 --> 00:11:47,200
json function

00:11:44,160 --> 00:11:49,120
on it and we can see that we get json

00:11:47,200 --> 00:11:51,360
output

00:11:49,120 --> 00:11:54,160
so what about reconstruction then so

00:11:51,360 --> 00:11:57,200
let's try to reconstruct our

00:11:54,160 --> 00:11:59,600
object from the json output uh so we

00:11:57,200 --> 00:12:01,360
we will use the parse raw function you

00:11:59,600 --> 00:12:04,560
can also uh

00:12:01,360 --> 00:12:07,040
parse a list of uh of the

00:12:04,560 --> 00:12:08,079
financial items but let's not do that

00:12:07,040 --> 00:12:11,519
right now

00:12:08,079 --> 00:12:13,839
so we can use parsera and as you see we

00:12:11,519 --> 00:12:17,040
get the original waffle

00:12:13,839 --> 00:12:20,800
object back again so that's really great

00:12:17,040 --> 00:12:21,360
uh so let's see then what happens with

00:12:20,800 --> 00:12:24,160
errors

00:12:21,360 --> 00:12:24,959
so we have the validation errors which

00:12:24,160 --> 00:12:28,000
were readable

00:12:24,959 --> 00:12:30,880
and exceptions are great but when you're

00:12:28,000 --> 00:12:32,720
working with third-party clients or with

00:12:30,880 --> 00:12:34,160
apis or stuff like that maybe you want

00:12:32,720 --> 00:12:36,079
to expose those errors

00:12:34,160 --> 00:12:38,880
in a structured format and of course

00:12:36,079 --> 00:12:40,720
json can be used here as well so

00:12:38,880 --> 00:12:43,040
let's see here we create an invalid

00:12:40,720 --> 00:12:45,519
waffle and

00:12:43,040 --> 00:12:46,160
in this case we have the style 42 which

00:12:45,519 --> 00:12:48,480
isn't an

00:12:46,160 --> 00:12:49,519
allowed style at the waffle bistro and

00:12:48,480 --> 00:12:51,200
we point there

00:12:49,519 --> 00:12:54,079
and here you can see we have the same

00:12:51,200 --> 00:12:56,480
error data but in a structured object

00:12:54,079 --> 00:12:58,240
where we can get this location of the

00:12:56,480 --> 00:13:00,320
error we can get a message

00:12:58,240 --> 00:13:01,279
telling in a more human readable way

00:13:00,320 --> 00:13:03,680
what's wrong

00:13:01,279 --> 00:13:05,760
and we also get some context data and a

00:13:03,680 --> 00:13:06,480
type of error so that's really useful

00:13:05,760 --> 00:13:08,160
i've used this

00:13:06,480 --> 00:13:10,079
in for instance in react and other

00:13:08,160 --> 00:13:13,120
front-end

00:13:10,079 --> 00:13:13,519
frontend libraries to wrap it and easily

00:13:13,120 --> 00:13:17,120
get

00:13:13,519 --> 00:13:19,200
some very nice output and maybe

00:13:17,120 --> 00:13:20,880
automatically mark in a form for

00:13:19,200 --> 00:13:25,120
instance where the

00:13:20,880 --> 00:13:28,639
error is yeah i think that's really nice

00:13:25,120 --> 00:13:30,480
so jason schema then so maybe you've

00:13:28,639 --> 00:13:33,760
heard about json schema and

00:13:30,480 --> 00:13:34,000
we can also export json schema directly

00:13:33,760 --> 00:13:36,320
from

00:13:34,000 --> 00:13:38,240
our model so this is where python almost

00:13:36,320 --> 00:13:40,399
gets mad magical for me

00:13:38,240 --> 00:13:42,000
because i mean this is so useful you can

00:13:40,399 --> 00:13:44,480
use it to

00:13:42,000 --> 00:13:45,839
create a swagger or open api as it's

00:13:44,480 --> 00:13:49,370
known as now

00:13:45,839 --> 00:13:50,560
specifications for your for your

00:13:49,370 --> 00:13:53,360
[Music]

00:13:50,560 --> 00:13:55,440
data so here we have the waffle class

00:13:53,360 --> 00:13:56,720
and we run the schema function on it and

00:13:55,440 --> 00:14:00,000
as you can see

00:13:56,720 --> 00:14:01,600
we get this large scheme out which is

00:14:00,000 --> 00:14:04,399
actually a json schema

00:14:01,600 --> 00:14:06,480
keep in mind that the python does use

00:14:04,399 --> 00:14:08,959
the draft 7 of json schema which is

00:14:06,480 --> 00:14:12,079
standard in open api 3.1

00:14:08,959 --> 00:14:14,079
which was released earlier this year

00:14:12,079 --> 00:14:15,360
but maybe if you're using the still

00:14:14,079 --> 00:14:17,360
common 3.0

00:14:15,360 --> 00:14:19,440
you could have some slight comparability

00:14:17,360 --> 00:14:22,720
issues usually it's no problem

00:14:19,440 --> 00:14:23,920
but i've run into it like a few times so

00:14:22,720 --> 00:14:27,040
it's

00:14:23,920 --> 00:14:27,920
good to know and the differences is

00:14:27,040 --> 00:14:31,120
quite small but

00:14:27,920 --> 00:14:32,959
there are some and if you want to

00:14:31,120 --> 00:14:35,120
have straight comparability with the

00:14:32,959 --> 00:14:36,399
draft 4 you can create the skim extra

00:14:35,120 --> 00:14:40,399
function

00:14:36,399 --> 00:14:42,639
which handles it for you so

00:14:40,399 --> 00:14:44,160
that was the built-in validators but

00:14:42,639 --> 00:14:44,880
maybe you want to create some custom

00:14:44,160 --> 00:14:47,199
ones

00:14:44,880 --> 00:14:49,040
and encode our own business logic and

00:14:47,199 --> 00:14:51,920
the waffle be structure does

00:14:49,040 --> 00:14:53,120
so we have our own business logic which

00:14:51,920 --> 00:14:57,120
we want to implement

00:14:53,120 --> 00:14:59,600
and in this case we want to

00:14:57,120 --> 00:15:01,199
concentrate a little bit about what kind

00:14:59,600 --> 00:15:02,720
of waffles we can create so now we're

00:15:01,199 --> 00:15:05,040
creating a waffle order

00:15:02,720 --> 00:15:06,800
which is a subclass of the waffle and

00:15:05,040 --> 00:15:07,600
the only difference is that we actually

00:15:06,800 --> 00:15:09,920
enforce

00:15:07,600 --> 00:15:11,120
some stuff when customers are ordering

00:15:09,920 --> 00:15:13,839
our waffles

00:15:11,120 --> 00:15:15,040
for instance for swedish style waffles

00:15:13,839 --> 00:15:19,600
we only want to allow

00:15:15,040 --> 00:15:19,600
jam to start sauces so raspberry jam or

00:15:19,920 --> 00:15:27,120
or clubber jam and for the belgian

00:15:22,800 --> 00:15:30,000
styles we allow chocolate sauce

00:15:27,120 --> 00:15:30,880
and additionally we don't want to have

00:15:30,000 --> 00:15:32,639
waffles with

00:15:30,880 --> 00:15:35,519
both ice cream and whipped cream so they

00:15:32,639 --> 00:15:38,720
have to choose either

00:15:35,519 --> 00:15:39,440
ice cream or whipped cream and you can

00:15:38,720 --> 00:15:41,440
see

00:15:39,440 --> 00:15:43,519
we created some functions here uh

00:15:41,440 --> 00:15:46,560
basically we have this

00:15:43,519 --> 00:15:49,680
at root validator uh telling us

00:15:46,560 --> 00:15:51,680
that we should run this pre equals false

00:15:49,680 --> 00:15:53,600
tells us that we should run this after

00:15:51,680 --> 00:15:55,839
we've done

00:15:53,600 --> 00:15:57,759
all the other validators so we know that

00:15:55,839 --> 00:16:00,000
we have parsed all the data and stuff

00:15:57,759 --> 00:16:01,759
like that so that can be useful

00:16:00,000 --> 00:16:04,000
and we check the styles basically

00:16:01,759 --> 00:16:07,040
looking at

00:16:04,000 --> 00:16:10,480
the toppings and at the

00:16:07,040 --> 00:16:13,120
at the styles and we can see uh

00:16:10,480 --> 00:16:14,160
we can see that we followed these rules

00:16:13,120 --> 00:16:17,519
we said

00:16:14,160 --> 00:16:19,440
and the same for uh for uh cream them

00:16:17,519 --> 00:16:20,800
so here we can see that we checked that

00:16:19,440 --> 00:16:24,320
there's only one

00:16:20,800 --> 00:16:27,440
cream in the list of toppings and we

00:16:24,320 --> 00:16:31,040
raise a nice error if there's

00:16:27,440 --> 00:16:36,240
more so

00:16:31,040 --> 00:16:38,079
let's let's go ahead then so let's see

00:16:36,240 --> 00:16:40,480
now what happens if we try to create an

00:16:38,079 --> 00:16:42,160
invalid waffle based on these new rules

00:16:40,480 --> 00:16:43,519
so i'm going to create one with both ice

00:16:42,160 --> 00:16:45,600
cream and whipped cream

00:16:43,519 --> 00:16:46,800
i'm really feeling like having a lot of

00:16:45,600 --> 00:16:49,120
cream today

00:16:46,800 --> 00:16:50,560
and as you can see the order wasn't

00:16:49,120 --> 00:16:53,600
accepted it's

00:16:50,560 --> 00:16:56,079
telling us that we're only allowed

00:16:53,600 --> 00:16:56,639
to have one cream topping but we were

00:16:56,079 --> 00:16:59,519
given

00:16:56,639 --> 00:17:01,360
both ice cream and whipped cream so that

00:16:59,519 --> 00:17:04,559
won't do

00:17:01,360 --> 00:17:04,880
basically that gives us a very nice way

00:17:04,559 --> 00:17:06,959
of

00:17:04,880 --> 00:17:08,720
knowing then we you can see that we get

00:17:06,959 --> 00:17:10,000
an error on the root validator as well

00:17:08,720 --> 00:17:13,679
this is because

00:17:10,000 --> 00:17:16,400
uh the previous validator doesn't pass

00:17:13,679 --> 00:17:18,400
we could add like an exception for this

00:17:16,400 --> 00:17:21,520
or handle it in a smarter way

00:17:18,400 --> 00:17:22,880
but in this case like for the purpose of

00:17:21,520 --> 00:17:24,480
this talk i'm just going to keep it

00:17:22,880 --> 00:17:27,120
simple

00:17:24,480 --> 00:17:27,919
so if we try to create a waffle order

00:17:27,120 --> 00:17:30,320
now

00:17:27,919 --> 00:17:31,200
with both cloudberry jam and chocolate

00:17:30,320 --> 00:17:33,120
sauce

00:17:31,200 --> 00:17:35,120
and it's a swedish style so we don't

00:17:33,120 --> 00:17:37,200
allow chocolate sauce on swedish style

00:17:35,120 --> 00:17:39,280
we can see also we get an error saying

00:17:37,200 --> 00:17:40,960
that the waffle baster doesn't sell this

00:17:39,280 --> 00:17:43,120
type of waffle here we could also create

00:17:40,960 --> 00:17:46,400
even better errors if we want but for

00:17:43,120 --> 00:17:49,280
custom ones it's up to you so

00:17:46,400 --> 00:17:51,200
these runtime functions or type checkers

00:17:49,280 --> 00:17:52,720
are really really useful for a lot of

00:17:51,200 --> 00:17:54,080
things so maybe you want to use them for

00:17:52,720 --> 00:17:55,039
functions as well sometimes your

00:17:54,080 --> 00:17:59,280
boundaries in the

00:17:55,039 --> 00:18:01,280
class so actually

00:17:59,280 --> 00:18:02,799
finally got you covered here as well

00:18:01,280 --> 00:18:06,160
because there's a

00:18:02,799 --> 00:18:08,880
validate arguments decorator uh

00:18:06,160 --> 00:18:11,120
which is still in beta and uh it was

00:18:08,880 --> 00:18:14,640
released in 2020

00:18:11,120 --> 00:18:17,440
18 of april in version 1.5

00:18:14,640 --> 00:18:17,840
but it's quite stable and it could be

00:18:17,440 --> 00:18:20,640
good

00:18:17,840 --> 00:18:21,440
to know or interesting to see so here we

00:18:20,640 --> 00:18:24,480
have

00:18:21,440 --> 00:18:26,960
the valid arguments import

00:18:24,480 --> 00:18:28,559
and then we have our function make order

00:18:26,960 --> 00:18:30,960
with some undefined

00:18:28,559 --> 00:18:32,240
business logic taking in a waffle and

00:18:30,960 --> 00:18:34,880
actually

00:18:32,240 --> 00:18:35,520
or a waffle order and actually making

00:18:34,880 --> 00:18:38,480
sure

00:18:35,520 --> 00:18:39,919
that the argument for waffle is and

00:18:38,480 --> 00:18:43,200
waffle order

00:18:39,919 --> 00:18:45,600
so we try to make a waffle here and we

00:18:43,200 --> 00:18:46,960
create a breakfast style waffle here you

00:18:45,600 --> 00:18:49,679
can see we add a dick

00:18:46,960 --> 00:18:52,160
and if the dick would be valid it would

00:18:49,679 --> 00:18:54,400
actually create the

00:18:52,160 --> 00:18:56,480
it would actually create the waffle

00:18:54,400 --> 00:18:58,720
object for you and

00:18:56,480 --> 00:19:00,000
as you can see we get the error is

00:18:58,720 --> 00:19:03,200
telling us that the

00:19:00,000 --> 00:19:06,000
style wasn't uh correct because we don't

00:19:03,200 --> 00:19:07,440
sell breakfast waffles just swedish and

00:19:06,000 --> 00:19:10,960
belgian styles

00:19:07,440 --> 00:19:12,559
and we can also see

00:19:10,960 --> 00:19:14,240
that we get the root validator error

00:19:12,559 --> 00:19:17,280
saying that we don't don't

00:19:14,240 --> 00:19:21,280
sell this type of waffle

00:19:17,280 --> 00:19:23,520
so that's very nice and

00:19:21,280 --> 00:19:24,720
now that you've seen this maybe you

00:19:23,520 --> 00:19:26,240
you're thinking

00:19:24,720 --> 00:19:28,480
that you want to integrate this in your

00:19:26,240 --> 00:19:30,400
frameworks and that's also

00:19:28,480 --> 00:19:32,799
a very nice thing about pythagoras a lot

00:19:30,400 --> 00:19:34,799
of frameworks uh having great

00:19:32,799 --> 00:19:38,320
integrations with pydantic

00:19:34,799 --> 00:19:40,400
so you can use it for instance with the

00:19:38,320 --> 00:19:42,559
flask or falcon or solid with the front

00:19:40,400 --> 00:19:46,480
framework agnostic spectry

00:19:42,559 --> 00:19:49,120
there's a quartz schema which is a async

00:19:46,480 --> 00:19:49,919
or quartus async reimplementation of

00:19:49,120 --> 00:19:51,919
flask

00:19:49,919 --> 00:19:54,000
and quartz schema is a first party

00:19:51,919 --> 00:19:56,799
pythagorean integration for that

00:19:54,000 --> 00:19:57,679
there's fast api which is very famous

00:19:56,799 --> 00:20:00,799
and

00:19:57,679 --> 00:20:02,240
it's using fidantic for everything so

00:20:00,799 --> 00:20:04,080
it's really the first class there

00:20:02,240 --> 00:20:06,880
we have something called django ninja

00:20:04,080 --> 00:20:09,919
for you using jenga outside there

00:20:06,880 --> 00:20:12,799
and i haven't

00:20:09,919 --> 00:20:14,799
used used it myself but i've looked at

00:20:12,799 --> 00:20:15,440
it and it's very similar to the other

00:20:14,799 --> 00:20:17,520
ones

00:20:15,440 --> 00:20:18,640
should be quite easy to use there's

00:20:17,520 --> 00:20:20,880
another cool one

00:20:18,640 --> 00:20:23,520
i like to mention which is strawberry

00:20:20,880 --> 00:20:27,760
which is actually a graphql framework

00:20:23,520 --> 00:20:29,360
uh but it got experimental support for

00:20:27,760 --> 00:20:32,480
python classes as well for your

00:20:29,360 --> 00:20:34,960
graphql graphs so that's that's nice

00:20:32,480 --> 00:20:36,400
so it's like a puzzle piece that you can

00:20:34,960 --> 00:20:39,440
kind of fit into

00:20:36,400 --> 00:20:41,360
a little bit of everywhere and another

00:20:39,440 --> 00:20:42,320
thing i really really like is automatic

00:20:41,360 --> 00:20:45,679
testing

00:20:42,320 --> 00:20:49,600
so there's a pedentic hypothesis plug-in

00:20:45,679 --> 00:20:51,760
and you can use it for automatic testing

00:20:49,600 --> 00:20:53,520
i've linked an article here by phil

00:20:51,760 --> 00:20:55,520
jones

00:20:53,520 --> 00:20:56,880
where he uses a technique very similar

00:20:55,520 --> 00:21:00,480
to one i use to

00:20:56,880 --> 00:21:03,679
automatically test apis using using

00:21:00,480 --> 00:21:06,080
this hypothesis plugin basically if you

00:21:03,679 --> 00:21:07,200
use the pi hypothesis when you build

00:21:06,080 --> 00:21:09,679
your

00:21:07,200 --> 00:21:11,280
strategy you just reference the model

00:21:09,679 --> 00:21:12,720
and you're fine

00:21:11,280 --> 00:21:15,039
if you want to learn more about

00:21:12,720 --> 00:21:17,280
hypothesis you could watch my talk from

00:21:15,039 --> 00:21:18,080
python suite in 2019 which is linked

00:21:17,280 --> 00:21:20,400
here

00:21:18,080 --> 00:21:22,480
another great library schema feces which

00:21:20,400 --> 00:21:25,120
takes in an open api specs

00:21:22,480 --> 00:21:27,360
spec and makes sure that your api

00:21:25,120 --> 00:21:31,440
actually can handle everything the spec

00:21:27,360 --> 00:21:34,720
says so it just generates a lot of tests

00:21:31,440 --> 00:21:36,559
very nice library if you want to

00:21:34,720 --> 00:21:38,720
know more you can watch my europe and

00:21:36,559 --> 00:21:41,200
talk from last year linked here

00:21:38,720 --> 00:21:43,520
or just check out the library i highly

00:21:41,200 --> 00:21:45,840
recommend it

00:21:43,520 --> 00:21:47,679
so i'm going to show you very quickly a

00:21:45,840 --> 00:21:51,120
super small example

00:21:47,679 --> 00:21:55,360
using a fast api

00:21:51,120 --> 00:21:59,039
basically and using it to create a

00:21:55,360 --> 00:22:02,480
very small api around our waffle

00:21:59,039 --> 00:22:05,919
this through logic so fast api

00:22:02,480 --> 00:22:08,799
is very tightly integrated with

00:22:05,919 --> 00:22:11,440
pedantic and it's a async ascii

00:22:08,799 --> 00:22:14,000
framework but it can be used with sync

00:22:11,440 --> 00:22:15,760
mode as well and this is everything we

00:22:14,000 --> 00:22:17,840
need to create an application

00:22:15,760 --> 00:22:19,520
with an api around us so here we have

00:22:17,840 --> 00:22:21,840
two functions

00:22:19,520 --> 00:22:23,520
implementing our business logic

00:22:21,840 --> 00:22:26,480
basically

00:22:23,520 --> 00:22:28,320
make order and dispatch order so we can

00:22:26,480 --> 00:22:29,679
make a waffle order and we can dispatch

00:22:28,320 --> 00:22:33,520
it when the waffle

00:22:29,679 --> 00:22:37,039
is done and we just reference

00:22:33,520 --> 00:22:38,799
our waffle models here and just using

00:22:37,039 --> 00:22:41,440
that you get the automatic

00:22:38,799 --> 00:22:44,240
api documentation and you also get type

00:22:41,440 --> 00:22:45,840
validation for everything in runtime

00:22:44,240 --> 00:22:47,360
and this is just the beginning so this

00:22:45,840 --> 00:22:49,440
is just the tip of the iceberg

00:22:47,360 --> 00:22:51,840
there's a lot more and you can contact

00:22:49,440 --> 00:22:53,919
me via chat here on the conference or

00:22:51,840 --> 00:22:55,919
via twitter or linkedin or the email if

00:22:53,919 --> 00:22:58,080
you want to know more

00:22:55,919 --> 00:22:59,039
here's just a quick taste about some of

00:22:58,080 --> 00:23:01,120
the things

00:22:59,039 --> 00:23:02,400
you could look at but i'm not going to

00:23:01,120 --> 00:23:05,360
have time to cover them

00:23:02,400 --> 00:23:06,960
but for instance built-in support 4. so

00:23:05,360 --> 00:23:08,080
you can use it for settings management

00:23:06,960 --> 00:23:11,919
very nice

00:23:08,080 --> 00:23:14,960
uh there's uh stuff like annotated types

00:23:11,919 --> 00:23:16,480
there's plugins for pycharm there's a

00:23:14,960 --> 00:23:18,240
mypi plugin

00:23:16,480 --> 00:23:20,320
making the mypixel support even better

00:23:18,240 --> 00:23:21,280
but there's of course native my pi

00:23:20,320 --> 00:23:24,880
support

00:23:21,280 --> 00:23:28,240
we have a very fast

00:23:24,880 --> 00:23:29,679
way of handling this so if you look at

00:23:28,240 --> 00:23:32,480
the benchmarks it's very

00:23:29,679 --> 00:23:34,080
fast compared to alternatives but of

00:23:32,480 --> 00:23:35,440
course you should make your own

00:23:34,080 --> 00:23:37,520
if you're going to use it there's a lot

00:23:35,440 --> 00:23:39,039
of built-in types you can use

00:23:37,520 --> 00:23:41,200
and of course you can create your own

00:23:39,039 --> 00:23:43,840
types so concluding

00:23:41,200 --> 00:23:45,039
this talk done we have the pure python

00:23:43,840 --> 00:23:48,080
syntax

00:23:45,039 --> 00:23:51,360
uh we get some better validation very

00:23:48,080 --> 00:23:54,080
useful json tools for apis

00:23:51,360 --> 00:23:56,320
easy to migrate from standard data

00:23:54,080 --> 00:23:59,440
classes if you have those

00:23:56,320 --> 00:24:01,279
lots of useful features and

00:23:59,440 --> 00:24:02,799
more things are always coming very

00:24:01,279 --> 00:24:05,120
active development stuff

00:24:02,799 --> 00:24:06,559
is happening all the time and they're

00:24:05,120 --> 00:24:08,080
working on the street mode

00:24:06,559 --> 00:24:09,679
and you should really try it out i mean

00:24:08,080 --> 00:24:10,640
just play around with it a little bit

00:24:09,679 --> 00:24:12,559
i've used it from

00:24:10,640 --> 00:24:15,200
everything from production applications

00:24:12,559 --> 00:24:16,799
to just small one-off experiments just

00:24:15,200 --> 00:24:18,640
playing around

00:24:16,799 --> 00:24:20,400
so if you have any further questions you

00:24:18,640 --> 00:24:22,240
can ask me

00:24:20,400 --> 00:24:23,520
either here on the conference or you can

00:24:22,240 --> 00:24:26,159
contact me

00:24:23,520 --> 00:24:27,360
via some of these links i also have a

00:24:26,159 --> 00:24:29,840
link here to

00:24:27,360 --> 00:24:31,120
my github where i also have a github

00:24:29,840 --> 00:24:33,760
page for this

00:24:31,120 --> 00:24:35,039
talk where i have even more information

00:24:33,760 --> 00:24:37,760
some more links

00:24:35,039 --> 00:24:38,480
i have a jupiter notebook with all the

00:24:37,760 --> 00:24:41,360
examples

00:24:38,480 --> 00:24:43,520
so you can run them yourself you can

00:24:41,360 --> 00:24:44,720
sign up for my hypothesis course if

00:24:43,520 --> 00:24:47,279
you're interested in property-based

00:24:44,720 --> 00:24:49,200
testing which i'm developing

00:24:47,279 --> 00:24:52,240
on the link here and also for the

00:24:49,200 --> 00:24:54,559
paper.io beta if you're interested in

00:24:52,240 --> 00:24:55,600
optimizing your pdf workflow being able

00:24:54,559 --> 00:25:00,000
to create

00:24:55,600 --> 00:25:01,919
pdfs with html css and javascript

00:25:00,000 --> 00:25:05,279
and i'm also available for training

00:25:01,919 --> 00:25:08,480
workshops and freelance consulting

00:25:05,279 --> 00:25:10,880
if you want to learn more so don't

00:25:08,480 --> 00:25:11,840
hesitate to contact me if you want to

00:25:10,880 --> 00:25:14,320
know

00:25:11,840 --> 00:25:16,559
and thank you a lot for watching my talk

00:25:14,320 --> 00:25:19,520
today it's been a pleasure and i hope

00:25:16,559 --> 00:25:19,520
you enjoyed it

00:25:26,840 --> 00:25:29,840
bye

00:26:21,440 --> 00:26:23,520

YouTube URL: https://www.youtube.com/watch?v=W7f52FhfYqQ


