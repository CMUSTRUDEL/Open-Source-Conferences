Title: TALK   Reuven M. Lerner   When is an exception not an exception? Using warnings in Python
Publication date: 2021-05-30
Playlist: PyCon US 2021
Description: 
	If your code encounters a big problem, then you probably want to raise an exception. But what should your code do if it finds a small problem, one that shouldn't be ignored, but that doesn't merit an exception? Python's answer to this question is warnings.

In this talk, I'll introduce Python's warnings, close cousins to exceptions but still distinct from them. We'll see how you can generate warnings, and what happens when you do. But then we'll dig deeper, looking at how you can filter and redirect warnings, telling Python which types of warnings you want to see, and which you want to hide. We'll also see how you can get truly fancy, turning some warnings into (potentially fatal) exceptions and handling certain types with custom callback functions.

After this talk, you'll be able to take advantage of Python's warning system, letting your users know when something is wrong without having to choose between "print" and a full-blown exception.

Slides: https://speakerdeck.com/reuven/when-is-an-exception-not-an-exception-using-pythons-warnings
Captions: 
	00:00:04,170 --> 00:00:11,869
[Music]

00:00:16,000 --> 00:00:19,680
hey there this is reuben lerner and i

00:00:17,680 --> 00:00:21,199
want to welcome you to my talk for pycon

00:00:19,680 --> 00:00:24,160
00:00:21,199 --> 00:00:24,800
when is an exception not an exception

00:00:24,160 --> 00:00:27,519
warnings

00:00:24,800 --> 00:00:29,359
in python so let's start off with an

00:00:27,519 --> 00:00:32,559
example from real life

00:00:29,359 --> 00:00:35,120
your car your car needs gasoline well

00:00:32,559 --> 00:00:37,040
most of us in our cars we need gasoline

00:00:35,120 --> 00:00:39,120
and that gasoline can run out

00:00:37,040 --> 00:00:41,200
and you really don't want to be stranded

00:00:39,120 --> 00:00:43,600
on the road without gasoline

00:00:41,200 --> 00:00:46,160
so your car has a fuel gauge and the

00:00:43,600 --> 00:00:49,360
fuel gauge goes from empty to full

00:00:46,160 --> 00:00:51,199
and you are supposed to go put gas in

00:00:49,360 --> 00:00:52,160
your car when it gets close to empty

00:00:51,199 --> 00:00:54,719
because again

00:00:52,160 --> 00:00:56,640
you don't want it to run out of gas what

00:00:54,719 --> 00:00:59,920
happens if your car

00:00:56,640 --> 00:01:02,559
is close to empty not quite empty

00:00:59,920 --> 00:01:02,960
and you haven't put gas in well that's

00:01:02,559 --> 00:01:05,760
right

00:01:02,960 --> 00:01:06,320
a yellow warning light goes on now the

00:01:05,760 --> 00:01:07,760
lights

00:01:06,320 --> 00:01:10,400
on the dashboard of the cars you might

00:01:07,760 --> 00:01:13,200
know are known as idiot lights sometimes

00:01:10,400 --> 00:01:14,159
and this light is indeed saying hey

00:01:13,200 --> 00:01:15,759
dummy

00:01:14,159 --> 00:01:17,280
you really don't want to be stranded on

00:01:15,759 --> 00:01:20,880
the side of the road without gas

00:01:17,280 --> 00:01:22,960
you really should put gas in the car now

00:01:20,880 --> 00:01:24,560
drop everything else you're doing get

00:01:22,960 --> 00:01:27,360
gas

00:01:24,560 --> 00:01:29,040
well that's great because the car is

00:01:27,360 --> 00:01:30,320
trying to stop us from doing something

00:01:29,040 --> 00:01:32,079
that could be harmful

00:01:30,320 --> 00:01:34,400
before we actually cause harm to

00:01:32,079 --> 00:01:37,840
ourselves or even to the car

00:01:34,400 --> 00:01:40,320
well think of how often in our code

00:01:37,840 --> 00:01:42,479
our program encounters all sorts of

00:01:40,320 --> 00:01:43,759
really dangerous situations or the user

00:01:42,479 --> 00:01:44,479
is going to do something potentially

00:01:43,759 --> 00:01:46,320
dangerous

00:01:44,479 --> 00:01:48,560
they haven't done anything dangerous yet

00:01:46,320 --> 00:01:52,159
but if they persist in their behavior

00:01:48,560 --> 00:01:53,200
things could get bad so what we need is

00:01:52,159 --> 00:01:55,439
some sort of

00:01:53,200 --> 00:01:56,960
low fuel light for our software and

00:01:55,439 --> 00:01:59,200
idiot light as it were to say

00:01:56,960 --> 00:02:00,479
hey dummy if you don't change what

00:01:59,200 --> 00:02:03,520
you're doing soon

00:02:00,479 --> 00:02:06,079
bad things will happen and such a

00:02:03,520 --> 00:02:07,360
such a low fuel light such a warning

00:02:06,079 --> 00:02:09,119
needs to be annoying

00:02:07,360 --> 00:02:10,640
it needs to be persistent enough to get

00:02:09,119 --> 00:02:12,160
us to change we need to say off

00:02:10,640 --> 00:02:14,640
not this again i really should change

00:02:12,160 --> 00:02:15,680
what i'm doing but it shouldn't be fatal

00:02:14,640 --> 00:02:17,920
to the program

00:02:15,680 --> 00:02:19,520
it should be annoying but not stop us

00:02:17,920 --> 00:02:20,959
from running what we're doing

00:02:19,520 --> 00:02:22,560
well that's what i'm going to talk about

00:02:20,959 --> 00:02:24,160
here warnings and warnings have been

00:02:22,560 --> 00:02:27,360
around in python for an awfully

00:02:24,160 --> 00:02:29,680
long time since november of 2000 it was

00:02:27,360 --> 00:02:32,080
introduced in pep230 and it was first in

00:02:29,680 --> 00:02:32,959
python 2.1 and the original motivation

00:02:32,080 --> 00:02:36,000
was

00:02:32,959 --> 00:02:38,400
to annoy python developers enough

00:02:36,000 --> 00:02:39,519
with bad behavior that they would change

00:02:38,400 --> 00:02:42,239
how they do things

00:02:39,519 --> 00:02:44,000
so it would be compatible with python 3.

00:02:42,239 --> 00:02:45,599
at the time the python core developers

00:02:44,000 --> 00:02:47,200
were really worried that people were not

00:02:45,599 --> 00:02:49,200
going to switch to python 3.

00:02:47,200 --> 00:02:50,400
and quite frankly there was good reason

00:02:49,200 --> 00:02:52,160
for them to be worried

00:02:50,400 --> 00:02:54,480
given how things played out and how long

00:02:52,160 --> 00:02:56,400
people continued to use python 2.

00:02:54,480 --> 00:02:57,840
and so what they wanted to do is say

00:02:56,400 --> 00:03:00,000
don't do it this way

00:02:57,840 --> 00:03:01,200
do it this other way and you can get rid

00:03:00,000 --> 00:03:04,239
of the warnings of course

00:03:01,200 --> 00:03:06,000
by adopting new best practices now

00:03:04,239 --> 00:03:06,560
you've probably seen some warnings

00:03:06,000 --> 00:03:08,800
already

00:03:06,560 --> 00:03:09,920
here's one that's in python 3.9 which is

00:03:08,800 --> 00:03:11,920
the latest version

00:03:09,920 --> 00:03:14,400
if you try to import mapping from

00:03:11,920 --> 00:03:16,800
collections you get this message

00:03:14,400 --> 00:03:18,000
deprecation warning using or importing

00:03:16,800 --> 00:03:19,680
the abcs

00:03:18,000 --> 00:03:21,760
from collections instead of from

00:03:19,680 --> 00:03:23,519
collections abc is deprecated since

00:03:21,760 --> 00:03:26,640
python 3.3

00:03:23,519 --> 00:03:30,080
and in 3.10 it will stop working so

00:03:26,640 --> 00:03:32,480
it's basically saying look dummy change

00:03:30,080 --> 00:03:33,920
your behavior it's also saying you

00:03:32,480 --> 00:03:35,760
should have noticed this before

00:03:33,920 --> 00:03:37,920
and we're really trying to save you from

00:03:35,760 --> 00:03:39,760
yourself because the next time we

00:03:37,920 --> 00:03:40,640
release a new version of python python

00:03:39,760 --> 00:03:42,640
00:03:40,640 --> 00:03:44,400
what you're doing in your code will no

00:03:42,640 --> 00:03:47,040
longer work

00:03:44,400 --> 00:03:48,799
right don't run out of gas pull over put

00:03:47,040 --> 00:03:50,239
some gas in your car or just change the

00:03:48,799 --> 00:03:51,280
import statement which is actually quite

00:03:50,239 --> 00:03:53,280
easy

00:03:51,280 --> 00:03:55,120
so do we really need warnings aren't

00:03:53,280 --> 00:03:57,519
there other mechanisms in python

00:03:55,120 --> 00:03:58,720
that we could use instead of them well

00:03:57,519 --> 00:04:00,720
one is we could go

00:03:58,720 --> 00:04:02,560
with exceptions and exceptions actually

00:04:00,720 --> 00:04:04,159
have a lot going for them

00:04:02,560 --> 00:04:05,680
they're a separate communications

00:04:04,159 --> 00:04:06,560
channel people don't really appreciate

00:04:05,680 --> 00:04:08,879
this enough

00:04:06,560 --> 00:04:10,799
exceptions are not just different in

00:04:08,879 --> 00:04:12,640
that they're providing us with a way to

00:04:10,799 --> 00:04:14,959
indicate something has gone wrong

00:04:12,640 --> 00:04:16,639
they are a separate way of communicating

00:04:14,959 --> 00:04:18,560
that doesn't get mixed up

00:04:16,639 --> 00:04:20,880
with assignments doesn't get mixed up

00:04:18,560 --> 00:04:22,639
with anything else and we can trap them

00:04:20,880 --> 00:04:24,080
um the way that i like to think of

00:04:22,639 --> 00:04:24,639
exceptions actually sort of like a cell

00:04:24,080 --> 00:04:26,400
phone

00:04:24,639 --> 00:04:27,759
if you're talking with a good friend

00:04:26,400 --> 00:04:28,000
maybe not such a good friend after you

00:04:27,759 --> 00:04:30,639
hear

00:04:28,000 --> 00:04:32,080
my example talking with a friend and

00:04:30,639 --> 00:04:33,360
your cell phone goes off

00:04:32,080 --> 00:04:35,120
you're gonna say to your friend hold on

00:04:33,360 --> 00:04:36,880
a second let me just get this right

00:04:35,120 --> 00:04:38,479
right am i right we all do this right

00:04:36,880 --> 00:04:39,919
and you answer your cell phone and then

00:04:38,479 --> 00:04:41,280
when the cell phone is done you know

00:04:39,919 --> 00:04:42,479
that conversation is done you put down

00:04:41,280 --> 00:04:43,600
the mobile phone and you continue

00:04:42,479 --> 00:04:44,960
speaking with your friend

00:04:43,600 --> 00:04:46,639
assuming they're still friends with you

00:04:44,960 --> 00:04:48,880
after such rude behavior

00:04:46,639 --> 00:04:50,160
well basically you can think of your

00:04:48,880 --> 00:04:51,600
exceptions and your code

00:04:50,160 --> 00:04:53,280
as being like a cell phone you have to

00:04:51,600 --> 00:04:54,320
take it you have to deal with it

00:04:53,280 --> 00:04:56,160
and then after you're done dealing with

00:04:54,320 --> 00:04:56,880
it then you can go back to the program

00:04:56,160 --> 00:04:58,880
and so

00:04:56,880 --> 00:05:00,479
that's really good about exceptions also

00:04:58,880 --> 00:05:01,840
we can trap them by name we can

00:05:00,479 --> 00:05:03,600
distinguish between them

00:05:01,840 --> 00:05:05,199
and then we can decide whether we want

00:05:03,600 --> 00:05:07,120
to ignore them

00:05:05,199 --> 00:05:08,560
yeah but exceptions aren't exactly what

00:05:07,120 --> 00:05:09,039
we want for this kind of warning because

00:05:08,560 --> 00:05:11,360
if you

00:05:09,039 --> 00:05:13,280
don't catch an exception the program

00:05:11,360 --> 00:05:14,560
ends and it's not a crash

00:05:13,280 --> 00:05:16,800
right it might as well be a crash

00:05:14,560 --> 00:05:18,720
because the program exiting with an

00:05:16,800 --> 00:05:20,560
unhandled exception doesn't make anyone

00:05:18,720 --> 00:05:21,919
feel better about it just means like

00:05:20,560 --> 00:05:24,160
we're using a different term for it

00:05:21,919 --> 00:05:25,680
exiting now in some other languages you

00:05:24,160 --> 00:05:26,639
have to trap for any exceptions that

00:05:25,680 --> 00:05:28,639
might be raised they have to be

00:05:26,639 --> 00:05:31,199
mentioned explicitly but in python

00:05:28,639 --> 00:05:32,080
anyone can raise any exception any time

00:05:31,199 --> 00:05:33,680
so in order to

00:05:32,080 --> 00:05:35,600
trap these sorts of warnings you would

00:05:33,680 --> 00:05:36,639
have all sorts of equivalent of accept

00:05:35,600 --> 00:05:37,919
clauses

00:05:36,639 --> 00:05:40,000
so that's not really going to work for

00:05:37,919 --> 00:05:41,520
us well we can go sort to the other

00:05:40,000 --> 00:05:42,880
extreme we can try print

00:05:41,520 --> 00:05:44,560
right why don't just print hey

00:05:42,880 --> 00:05:46,560
something's going wrong here the thing

00:05:44,560 --> 00:05:47,600
is it's not serious or scary enough we

00:05:46,560 --> 00:05:48,000
want something that's really going to

00:05:47,600 --> 00:05:49,680
like

00:05:48,000 --> 00:05:51,199
shake people up and say hey you should

00:05:49,680 --> 00:05:53,039
really change your behavior

00:05:51,199 --> 00:05:54,800
the other thing is that print it might

00:05:53,039 --> 00:05:56,160
get mixed up with regular program output

00:05:54,800 --> 00:05:58,400
and yeah we can start printing the

00:05:56,160 --> 00:06:00,479
standard error instead but

00:05:58,400 --> 00:06:01,840
it's not really what we want the other

00:06:00,479 --> 00:06:04,479
thing is we can't really

00:06:01,840 --> 00:06:06,080
filter or trap print statements i guess

00:06:04,479 --> 00:06:07,440
print functions right you can't

00:06:06,080 --> 00:06:09,680
filter what's being printed on the

00:06:07,440 --> 00:06:11,280
screen and we really need something some

00:06:09,680 --> 00:06:12,800
sort of mechanism like that

00:06:11,280 --> 00:06:14,080
and that's what warnings provides us

00:06:12,800 --> 00:06:16,080
with it provides us with sort of an

00:06:14,080 --> 00:06:16,720
in-betweeny thing between exceptions in

00:06:16,080 --> 00:06:19,440
print

00:06:16,720 --> 00:06:21,759
that we can filter we can trap and we

00:06:19,440 --> 00:06:23,360
can even redirect to other places

00:06:21,759 --> 00:06:25,039
so that doesn't get interfered with or

00:06:23,360 --> 00:06:27,520
doesn't interfere with our code

00:06:25,039 --> 00:06:29,280
so how do we use warnings well let's

00:06:27,520 --> 00:06:31,840
assume that i maintain

00:06:29,280 --> 00:06:33,520
a module with a python function hello so

00:06:31,840 --> 00:06:35,600
my module is called hello my function

00:06:33,520 --> 00:06:37,039
is called hello and it's pretty simple

00:06:35,600 --> 00:06:39,840
right so def hello name

00:06:37,039 --> 00:06:41,199
and return f hello and then f string

00:06:39,840 --> 00:06:42,800
curly braces name

00:06:41,199 --> 00:06:44,800
now i'm going to change this function

00:06:42,800 --> 00:06:45,680
i'm about to change the api on all of my

00:06:44,800 --> 00:06:47,280
users

00:06:45,680 --> 00:06:49,680
which not the smartest thing to do but

00:06:47,280 --> 00:06:51,599
fine and now i want to take a list of

00:06:49,680 --> 00:06:54,080
inputs rather than a single string

00:06:51,599 --> 00:06:54,639
how can i notify my users they should

00:06:54,080 --> 00:06:57,360
start

00:06:54,639 --> 00:06:59,360
passing me a list of inputs rather than

00:06:57,360 --> 00:07:01,759
a single string

00:06:59,360 --> 00:07:03,360
well i'm going to make this change this

00:07:01,759 --> 00:07:05,919
change is going to be dramatic

00:07:03,360 --> 00:07:07,520
so i'd better warn people about this so

00:07:05,919 --> 00:07:09,199
before it goes into effect and it's a

00:07:07,520 --> 00:07:11,280
really crucial point about warnings

00:07:09,199 --> 00:07:12,319
you want to warn them giving them enough

00:07:11,280 --> 00:07:14,400
time to do something

00:07:12,319 --> 00:07:15,440
like the low fuel light right if you

00:07:14,400 --> 00:07:17,120
told them

00:07:15,440 --> 00:07:18,880
30 seconds before you're about to run

00:07:17,120 --> 00:07:20,800
out of fuel they'd better mess up

00:07:18,880 --> 00:07:22,800
that's not so helpful so what are we

00:07:20,800 --> 00:07:24,160
going to do i'm going to before this

00:07:22,800 --> 00:07:26,240
change goes into effect

00:07:24,160 --> 00:07:27,280
add a warning to the function and here's

00:07:26,240 --> 00:07:28,639
what the warning looks like

00:07:27,280 --> 00:07:30,479
well first of all i have to import

00:07:28,639 --> 00:07:31,759
warnings it's not in built-ins

00:07:30,479 --> 00:07:33,599
in the pep they actually say that this

00:07:31,759 --> 00:07:35,840
was considered but they decided

00:07:33,599 --> 00:07:37,360
that developers are you know we we can

00:07:35,840 --> 00:07:39,360
deal with a little bit of importing

00:07:37,360 --> 00:07:41,520
so import warnings and then i'm going to

00:07:39,360 --> 00:07:43,280
call the function warnings.warn

00:07:41,520 --> 00:07:44,879
that is how we this is sort of the

00:07:43,280 --> 00:07:46,720
equivalent of raised that's how we

00:07:44,879 --> 00:07:49,840
indicate that something has gone wrong

00:07:46,720 --> 00:07:51,520
and we pass a an argument there a string

00:07:49,840 --> 00:07:52,879
indicating what message we want to show

00:07:51,520 --> 00:07:54,400
to the user

00:07:52,879 --> 00:07:56,160
so how does this work well now my

00:07:54,400 --> 00:07:56,960
program just say from hello import hello

00:07:56,160 --> 00:07:59,680
i'm going to call

00:07:56,960 --> 00:08:00,720
print hello world and when i run it

00:07:59,680 --> 00:08:02,560
that's what i get

00:08:00,720 --> 00:08:03,919
this is the output that we see now the

00:08:02,560 --> 00:08:04,560
output is broken to a few different

00:08:03,919 --> 00:08:07,520
pieces

00:08:04,560 --> 00:08:08,000
we see in what file did we get this

00:08:07,520 --> 00:08:10,800
warning

00:08:08,000 --> 00:08:12,800
and what line of that file as well then

00:08:10,800 --> 00:08:13,759
we see what kind of warning it was and

00:08:12,800 --> 00:08:15,120
you're going to see there are lots of

00:08:13,759 --> 00:08:17,599
different types of warnings

00:08:15,120 --> 00:08:18,479
or categories of warnings that we can

00:08:17,599 --> 00:08:20,560
issue

00:08:18,479 --> 00:08:22,319
then the message the message that was

00:08:20,560 --> 00:08:25,360
passed as that second argument

00:08:22,319 --> 00:08:26,240
to warnings.one and then finally we see

00:08:25,360 --> 00:08:28,240
that indeed

00:08:26,240 --> 00:08:29,919
this warning was raised by the function

00:08:28,240 --> 00:08:30,479
warnings.warren that's not such a

00:08:29,919 --> 00:08:31,599
surprise

00:08:30,479 --> 00:08:34,080
we're going to talk about that more in a

00:08:31,599 --> 00:08:36,080
bit finally you see

00:08:34,080 --> 00:08:37,360
that our program does actually run we

00:08:36,080 --> 00:08:40,000
have not exited

00:08:37,360 --> 00:08:40,719
we have not you know crashed nothing

00:08:40,000 --> 00:08:42,640
like that

00:08:40,719 --> 00:08:44,399
the program still runs the warning just

00:08:42,640 --> 00:08:47,200
sort of pops up and they're saying

00:08:44,399 --> 00:08:48,720
hey don't forget about me now it's true

00:08:47,200 --> 00:08:50,480
that the output from the warnings is

00:08:48,720 --> 00:08:51,440
sent to standard error not to standard

00:08:50,480 --> 00:08:53,279
out

00:08:51,440 --> 00:08:54,800
so that means that if you're redirecting

00:08:53,279 --> 00:08:56,320
standard up from your program

00:08:54,800 --> 00:08:58,800
you'll still see the warning on your

00:08:56,320 --> 00:09:00,320
screen and it'll go along with any other

00:08:58,800 --> 00:09:01,360
errors that are printed so that's really

00:09:00,320 --> 00:09:03,519
good now of course you

00:09:01,360 --> 00:09:04,880
redirect standard error that's not a bad

00:09:03,519 --> 00:09:05,839
thing because it'll go as i said with

00:09:04,880 --> 00:09:09,040
all the other errors

00:09:05,839 --> 00:09:11,040
so if i now say use hello.py and i

00:09:09,040 --> 00:09:12,560
redirect it to hello.txt we're still

00:09:11,040 --> 00:09:13,040
going to see the warning on the screen

00:09:12,560 --> 00:09:16,800
here

00:09:13,040 --> 00:09:19,120
which is good so the thing to keep in

00:09:16,800 --> 00:09:20,480
mind is that warnings require you to

00:09:19,120 --> 00:09:23,120
plan ahead

00:09:20,480 --> 00:09:24,080
you need to warn your users that in

00:09:23,120 --> 00:09:26,080
advance

00:09:24,080 --> 00:09:27,440
of what they are doing that's wrong and

00:09:26,080 --> 00:09:30,240
how things are going to break

00:09:27,440 --> 00:09:31,600
and we see this in well-maintained open

00:09:30,240 --> 00:09:33,279
source projects

00:09:31,600 --> 00:09:35,279
they plan ahead enough that they can say

00:09:33,279 --> 00:09:37,600
okay in another two versions

00:09:35,279 --> 00:09:39,200
this is no longer going to work so this

00:09:37,600 --> 00:09:41,120
version the next version we're going to

00:09:39,200 --> 00:09:42,240
give them increasingly dire sounding

00:09:41,120 --> 00:09:44,080
warnings saying hey

00:09:42,240 --> 00:09:45,920
dummy you'd better keep saying dummy

00:09:44,080 --> 00:09:49,120
right we want to respect her you suggest

00:09:45,920 --> 00:09:50,720
hey user we really want you to plan

00:09:49,120 --> 00:09:52,399
ahead and think about what's going on

00:09:50,720 --> 00:09:54,080
you want to give your users time to

00:09:52,399 --> 00:09:56,640
transition so

00:09:54,080 --> 00:09:58,000
really think about if you need to make

00:09:56,640 --> 00:09:59,839
changes like this

00:09:58,000 --> 00:10:01,120
how far in advance you can make them and

00:09:59,839 --> 00:10:02,720
then how far in advance you can warn

00:10:01,120 --> 00:10:06,160
your users about it

00:10:02,720 --> 00:10:08,480
so we saw before that user warning

00:10:06,160 --> 00:10:10,240
was what was uh being sent and as i said

00:10:08,480 --> 00:10:11,440
user warning is a category it's similar

00:10:10,240 --> 00:10:13,040
to an exception class

00:10:11,440 --> 00:10:14,959
and it provides us with two different

00:10:13,040 --> 00:10:15,680
benefits one of which is the semantic

00:10:14,959 --> 00:10:17,680
power

00:10:15,680 --> 00:10:19,279
i as a person will read and say oh it's

00:10:17,680 --> 00:10:20,720
a user warning i understand what it

00:10:19,279 --> 00:10:22,320
means i understand how to distinguish

00:10:20,720 --> 00:10:23,920
that from other kinds of warnings

00:10:22,320 --> 00:10:25,760
but the other advantage is that by

00:10:23,920 --> 00:10:28,480
having this category

00:10:25,760 --> 00:10:29,839
it's sort of like with exception classes

00:10:28,480 --> 00:10:31,440
i can detect it and

00:10:29,839 --> 00:10:33,600
filter it and the warning system

00:10:31,440 --> 00:10:36,480
actually does help us with that

00:10:33,600 --> 00:10:37,920
by the way warning categories are

00:10:36,480 --> 00:10:39,920
exception classes how do i know this

00:10:37,920 --> 00:10:41,920
well if i go to user warning

00:10:39,920 --> 00:10:44,320
and i say what is your dunder basis and

00:10:41,920 --> 00:10:45,279
under bases is how a class in python

00:10:44,320 --> 00:10:47,200
indicates

00:10:45,279 --> 00:10:48,800
what it inherits from and it inherits

00:10:47,200 --> 00:10:50,160
from class warning

00:10:48,800 --> 00:10:52,399
all right so warning is sort of the

00:10:50,160 --> 00:10:53,839
overall parent class for all warnings

00:10:52,399 --> 00:10:54,560
but then i go to warning and say hey

00:10:53,839 --> 00:10:56,720
warning what

00:10:54,560 --> 00:10:58,160
are your bases it says oh i inherit from

00:10:56,720 --> 00:11:00,720
exception

00:10:58,160 --> 00:11:01,839
so warnings are exceptions at least in

00:11:00,720 --> 00:11:03,200
technical sense

00:11:01,839 --> 00:11:05,040
but they're handled separately and

00:11:03,200 --> 00:11:06,480
differently you're not going to raise a

00:11:05,040 --> 00:11:08,240
warning typically although we'll see how

00:11:06,480 --> 00:11:09,920
you can turn warnings into exceptions if

00:11:08,240 --> 00:11:11,680
you really want

00:11:09,920 --> 00:11:13,120
so built-in warning categories there are

00:11:11,680 --> 00:11:14,000
a whole bunch of them right there's

00:11:13,120 --> 00:11:15,600
regular warning that's

00:11:14,000 --> 00:11:17,519
the parent class as i said there's user

00:11:15,600 --> 00:11:20,079
warning deprecation warning

00:11:17,519 --> 00:11:21,600
syntax warning runtime warning and

00:11:20,079 --> 00:11:23,600
pending deprecation warning

00:11:21,600 --> 00:11:24,640
so deprecation warnings means you really

00:11:23,600 --> 00:11:26,880
should not be using this

00:11:24,640 --> 00:11:28,240
paying deprecation warning means hey

00:11:26,880 --> 00:11:29,040
soon you won't want to be able to use

00:11:28,240 --> 00:11:31,120
this

00:11:29,040 --> 00:11:33,040
and so i can actually pass this as the

00:11:31,120 --> 00:11:34,320
second argument to warnings that warrant

00:11:33,040 --> 00:11:35,600
so when i call warnings.warrant i'm

00:11:34,320 --> 00:11:37,600
going to pass a message and i'm going to

00:11:35,600 --> 00:11:38,959
say what kind of warning i want to pass

00:11:37,600 --> 00:11:41,440
here's the deprecation warning because

00:11:38,959 --> 00:11:43,120
that's sort of appropriate right

00:11:41,440 --> 00:11:45,519
the thing is if we actually run this

00:11:43,120 --> 00:11:46,240
code suddenly our warnings don't appear

00:11:45,519 --> 00:11:47,519
anymore

00:11:46,240 --> 00:11:49,440
it disappears and that's because

00:11:47,519 --> 00:11:50,320
deprecation warning is filtered out by

00:11:49,440 --> 00:11:51,600
default

00:11:50,320 --> 00:11:53,200
so it won't appear you have to

00:11:51,600 --> 00:11:54,320
explicitly say that you wanted to appear

00:11:53,200 --> 00:11:56,079
and we're going to talk about filtering

00:11:54,320 --> 00:11:58,639
in a little bit

00:11:56,079 --> 00:11:59,760
the thing is as you might know in python

00:11:58,639 --> 00:12:01,040
when you're just writing code

00:11:59,760 --> 00:12:02,560
you want to raise an exception to

00:12:01,040 --> 00:12:03,519
indicate that something has gone wrong

00:12:02,560 --> 00:12:05,600
you should not

00:12:03,519 --> 00:12:07,120
raise the built-in exceptions it seems

00:12:05,600 --> 00:12:08,000
so tempting right i'll raise a type

00:12:07,120 --> 00:12:10,160
error here

00:12:08,000 --> 00:12:12,320
i'll raise an index error there but it's

00:12:10,160 --> 00:12:13,519
generally frowned upon to raise your

00:12:12,320 --> 00:12:15,040
the built-in exceptions you should

00:12:13,519 --> 00:12:15,760
create your own exception classes and

00:12:15,040 --> 00:12:17,120
raise those

00:12:15,760 --> 00:12:18,880
and once again those give us extra

00:12:17,120 --> 00:12:20,240
semantic power and they allow us to do

00:12:18,880 --> 00:12:21,920
better filtering

00:12:20,240 --> 00:12:23,440
similarly it's a really good idea to

00:12:21,920 --> 00:12:24,320
create your own custom warning

00:12:23,440 --> 00:12:25,519
categories

00:12:24,320 --> 00:12:27,440
now your new warning should probably

00:12:25,519 --> 00:12:29,279
subclass one of the existing types so

00:12:27,440 --> 00:12:31,200
it'll be filtered appropriately

00:12:29,279 --> 00:12:32,959
but you can you know you can do what you

00:12:31,200 --> 00:12:34,560
want um as long as you create

00:12:32,959 --> 00:12:36,320
a class that inherits from warning

00:12:34,560 --> 00:12:37,040
you're good so let's see how that could

00:12:36,320 --> 00:12:39,200
work here

00:12:37,040 --> 00:12:41,360
well i'm going to create my class as i

00:12:39,200 --> 00:12:42,959
said class args changing warning which

00:12:41,360 --> 00:12:45,040
inherits from user warning

00:12:42,959 --> 00:12:46,800
and then what is going to be the content

00:12:45,040 --> 00:12:50,560
what are the contents of my class

00:12:46,800 --> 00:12:52,480
nothing just pats why well because

00:12:50,560 --> 00:12:53,600
i don't really want to give any content

00:12:52,480 --> 00:12:55,200
right the warning is not

00:12:53,600 --> 00:12:56,800
useful as a class i'm going to

00:12:55,200 --> 00:12:58,320
instantiate and then call a method on

00:12:56,800 --> 00:12:59,760
and i don't need to store any additional

00:12:58,320 --> 00:13:00,480
state i just want to be able to

00:12:59,760 --> 00:13:02,720
distinguish it

00:13:00,480 --> 00:13:03,600
from other warnings and then what we can

00:13:02,720 --> 00:13:06,000
do

00:13:03,600 --> 00:13:08,000
in addition to pass we can then pass as

00:13:06,000 --> 00:13:10,639
it were our exchanging warning as our

00:13:08,000 --> 00:13:12,240
second argument to warnings.org

00:13:10,639 --> 00:13:13,519
so what happens when we're rewarded well

00:13:12,240 --> 00:13:14,639
we've already seen that a warning will

00:13:13,519 --> 00:13:16,000
be sent to standard error like the

00:13:14,639 --> 00:13:17,200
message will be printed there but we can

00:13:16,000 --> 00:13:19,040
actually customize

00:13:17,200 --> 00:13:20,560
what happens to warren and we can

00:13:19,040 --> 00:13:21,920
customize what happens to particular

00:13:20,560 --> 00:13:24,800
categories of warnings

00:13:21,920 --> 00:13:26,160
and that's done with warnings filters or

00:13:24,800 --> 00:13:28,240
python's warnings filter

00:13:26,160 --> 00:13:29,440
we can specify what should be done with

00:13:28,240 --> 00:13:30,800
particular types of warnings

00:13:29,440 --> 00:13:32,399
particularly categories

00:13:30,800 --> 00:13:33,839
but we can specify not only based on

00:13:32,399 --> 00:13:34,959
category we can filter based on the

00:13:33,839 --> 00:13:37,440
message contents

00:13:34,959 --> 00:13:39,440
and the module in which it was raised

00:13:37,440 --> 00:13:41,920
and a whole bunch of other things

00:13:39,440 --> 00:13:43,199
now the default filter the what comes

00:13:41,920 --> 00:13:44,240
with python by default you don't do

00:13:43,199 --> 00:13:46,639
anything else

00:13:44,240 --> 00:13:48,959
it prints warnings the first time they

00:13:46,639 --> 00:13:51,040
appear in a given file on a given line

00:13:48,959 --> 00:13:53,440
so if you encounter the same call the

00:13:51,040 --> 00:13:54,639
warnings that worn multiple times

00:13:53,440 --> 00:13:56,720
then you're only going to see one

00:13:54,639 --> 00:13:58,320
message but the same warning appears in

00:13:56,720 --> 00:13:59,279
multiple places in the code you will see

00:13:58,320 --> 00:14:01,440
multiple messages

00:13:59,279 --> 00:14:02,800
let's see how that would work so i'm

00:14:01,440 --> 00:14:05,839
actually going to call now

00:14:02,800 --> 00:14:06,560
hello twice in my program in my use

00:14:05,839 --> 00:14:08,000
hello

00:14:06,560 --> 00:14:10,480
i'm going to say hello world one hello

00:14:08,000 --> 00:14:12,320
world two and if i just say use hello

00:14:10,480 --> 00:14:13,040
dot py look we're going to get our

00:14:12,320 --> 00:14:14,959
warning

00:14:13,040 --> 00:14:17,519
once even though you see we have output

00:14:14,959 --> 00:14:19,440
twice so we did call the function twice

00:14:17,519 --> 00:14:20,560
but because of the default behavior in

00:14:19,440 --> 00:14:21,920
python

00:14:20,560 --> 00:14:24,800
for this kind of warning is only going

00:14:21,920 --> 00:14:24,800
to warn us once

00:14:25,040 --> 00:14:31,760
wait a second though hello.py9

00:14:29,199 --> 00:14:32,639
okay like i can see where the warning

00:14:31,760 --> 00:14:34,560
was raised

00:14:32,639 --> 00:14:36,399
and it was raised by warnings.warren

00:14:34,560 --> 00:14:37,920
isn't that kind of obvious

00:14:36,399 --> 00:14:39,279
like don't we know that the warning was

00:14:37,920 --> 00:14:41,519
raised by warning.warren that hasn't

00:14:39,279 --> 00:14:43,040
added any useful information to us

00:14:41,519 --> 00:14:45,120
well when we call warnings that warm we

00:14:43,040 --> 00:14:46,639
can actually pass a stack level

00:14:45,120 --> 00:14:48,480
and that stack level is an integer

00:14:46,639 --> 00:14:50,639
indicating what function should be

00:14:48,480 --> 00:14:52,000
messaged so how far back how many stack

00:14:50,639 --> 00:14:53,279
frames back should we go

00:14:52,000 --> 00:14:55,120
to pull out information about the

00:14:53,279 --> 00:14:57,440
function and print it on

00:14:55,120 --> 00:14:59,040
standard out so by default stack level

00:14:57,440 --> 00:15:00,240
equals one i mean the call the warnings

00:14:59,040 --> 00:15:01,040
that warn itself meaning you're going to

00:15:00,240 --> 00:15:03,279
see them

00:15:01,040 --> 00:15:04,639
on what line warnings.one was called but

00:15:03,279 --> 00:15:06,240
it's pretty common to say stack level

00:15:04,639 --> 00:15:07,199
equals two so you're gonna see who

00:15:06,240 --> 00:15:09,279
called the thing

00:15:07,199 --> 00:15:11,199
that generated the warning and indeed

00:15:09,279 --> 00:15:12,079
here we can see now if i call with our

00:15:11,199 --> 00:15:14,560
changing warning

00:15:12,079 --> 00:15:16,399
comma two now we're going to see that

00:15:14,560 --> 00:15:18,959
the call to hello

00:15:16,399 --> 00:15:20,880
with um is what triggered it not the

00:15:18,959 --> 00:15:22,399
call to warnings.org and sure enough if

00:15:20,880 --> 00:15:24,360
i call use hello dot py

00:15:22,399 --> 00:15:25,519
we're going to see that now is on use

00:15:24,360 --> 00:15:28,639
hello.py.5

00:15:25,519 --> 00:15:30,800
of line five and it's gonna say hey it

00:15:28,639 --> 00:15:32,959
happened here when you called hello

00:15:30,800 --> 00:15:35,120
so many times it's gonna be more useful

00:15:32,959 --> 00:15:36,880
all right back to our filter

00:15:35,120 --> 00:15:38,399
when python encounters a warning it has

00:15:36,880 --> 00:15:39,920
actually six different actions it can

00:15:38,399 --> 00:15:40,800
take and we can choose which of these we

00:15:39,920 --> 00:15:43,759
want

00:15:40,800 --> 00:15:44,639
so we can say always and always means it

00:15:43,759 --> 00:15:46,320
doesn't matter

00:15:44,639 --> 00:15:48,240
how many times the warning is raised

00:15:46,320 --> 00:15:48,959
from where we always want to print it

00:15:48,240 --> 00:15:50,639
out

00:15:48,959 --> 00:15:52,160
another option is ignore i don't need

00:15:50,639 --> 00:15:54,240
this warning i don't care about it

00:15:52,160 --> 00:15:56,079
right not important to me and another

00:15:54,240 --> 00:15:58,399
one sort of the other direction is error

00:15:56,079 --> 00:15:59,920
meaning turn this into an exception and

00:15:58,399 --> 00:16:01,040
that's the advantage of having warnings

00:15:59,920 --> 00:16:02,880
as a subclass of

00:16:01,040 --> 00:16:04,880
exception that python can handle then

00:16:02,880 --> 00:16:06,800
right away and so if you want to be

00:16:04,880 --> 00:16:08,000
really harsh you can just say always

00:16:06,800 --> 00:16:09,199
raise an exception make an error for

00:16:08,000 --> 00:16:10,800
everything

00:16:09,199 --> 00:16:12,240
so for example let's say we want our

00:16:10,800 --> 00:16:14,320
exchanging warning to be displayed

00:16:12,240 --> 00:16:16,079
every time it occurs no matter what so

00:16:14,320 --> 00:16:17,360
every time that's the always action so

00:16:16,079 --> 00:16:19,920
how do i say

00:16:17,360 --> 00:16:22,000
this warning should be shown always no

00:16:19,920 --> 00:16:23,519
matter how often it's chosen

00:16:22,000 --> 00:16:25,040
well if i want from the command line i

00:16:23,519 --> 00:16:27,920
can pass the minus

00:16:25,040 --> 00:16:29,279
big w option and that switch there takes

00:16:27,920 --> 00:16:30,480
an argument and that argument is the

00:16:29,279 --> 00:16:32,880
action we want

00:16:30,480 --> 00:16:34,160
so i can say minus big w always by the

00:16:32,880 --> 00:16:34,800
way each action begins with a different

00:16:34,160 --> 00:16:36,880
letter

00:16:34,800 --> 00:16:38,320
so you can abbreviate to minus big w

00:16:36,880 --> 00:16:41,519
little a

00:16:38,320 --> 00:16:44,800
so if i now say python 3 minus

00:16:41,519 --> 00:16:46,639
big w always for use hello2.py

00:16:44,800 --> 00:16:48,639
right so what it's going to show now is

00:16:46,639 --> 00:16:49,519
both times both times that we called

00:16:48,639 --> 00:16:51,360
hello world

00:16:49,519 --> 00:16:53,759
it's going to show me well i didn't i

00:16:51,360 --> 00:16:55,600
only said it to be uh stack level one

00:16:53,759 --> 00:16:57,279
so it's going to show us warnings.worn

00:16:55,600 --> 00:16:58,560
and the file in which that's defined

00:16:57,279 --> 00:17:01,279
which is fine

00:16:58,560 --> 00:17:02,240
now the thing is you can filter in a lot

00:17:01,279 --> 00:17:03,680
of different ways

00:17:02,240 --> 00:17:05,360
we've already seen how you can filter

00:17:03,680 --> 00:17:06,799
based on the action but you can filter

00:17:05,360 --> 00:17:08,319
based on the message

00:17:06,799 --> 00:17:10,000
and there's a regular expression match

00:17:08,319 --> 00:17:11,199
of the case and sensitive message start

00:17:10,000 --> 00:17:12,079
i know that sounds complicated but

00:17:11,199 --> 00:17:15,120
basically

00:17:12,079 --> 00:17:16,720
we can use regex to uh match the

00:17:15,120 --> 00:17:18,240
beginning of the message

00:17:16,720 --> 00:17:20,160
you can filter based on the category you

00:17:18,240 --> 00:17:20,959
can filter based on the module name in

00:17:20,160 --> 00:17:22,880
which

00:17:20,959 --> 00:17:25,199
we have the warning you can also do the

00:17:22,880 --> 00:17:27,919
line number so you can say

00:17:25,199 --> 00:17:28,720
i want to filter on i want to give this

00:17:27,919 --> 00:17:30,960
action

00:17:28,720 --> 00:17:33,360
for this category for this message in

00:17:30,960 --> 00:17:35,840
this module with his line number

00:17:33,360 --> 00:17:36,480
the thing is if you want to pass

00:17:35,840 --> 00:17:39,679
multiple

00:17:36,480 --> 00:17:41,679
actions for multiple types of

00:17:39,679 --> 00:17:42,960
categories you just pass minus big w

00:17:41,679 --> 00:17:44,240
multiple times

00:17:42,960 --> 00:17:46,400
so for example if i want to give

00:17:44,240 --> 00:17:48,080
deprecation warning but nothing else an

00:17:46,400 --> 00:17:50,720
always action and regardless of the

00:17:48,080 --> 00:17:52,320
message i can say minus big w action

00:17:50,720 --> 00:17:53,200
colon colon double calling there means

00:17:52,320 --> 00:17:54,880
i'm going to ignore the message

00:17:53,200 --> 00:17:56,559
deprecation warning

00:17:54,880 --> 00:17:58,160
what if i want to make those deprecation

00:17:56,559 --> 00:17:58,880
warnings visible but only if the message

00:17:58,160 --> 00:18:00,160
starts with an a

00:17:58,880 --> 00:18:02,320
and i should add again it's case

00:18:00,160 --> 00:18:04,160
insensitive so then i'll put an a there

00:18:02,320 --> 00:18:05,840
between those two colons

00:18:04,160 --> 00:18:07,200
and if i want to make unicode warnings

00:18:05,840 --> 00:18:08,480
anytime i encounter a unicode warning

00:18:07,200 --> 00:18:10,720
turn that into exception

00:18:08,480 --> 00:18:12,160
i'll say minus big w error colon calling

00:18:10,720 --> 00:18:14,720
unicode warn

00:18:12,160 --> 00:18:15,919
now by default the warning system works

00:18:14,720 --> 00:18:16,640
like this these are the filters that are

00:18:15,919 --> 00:18:20,160
set

00:18:16,640 --> 00:18:21,840
so it says deprecation warning main

00:18:20,160 --> 00:18:24,240
has the default but we're going to

00:18:21,840 --> 00:18:25,520
ignore general deprecation warnings and

00:18:24,240 --> 00:18:26,320
you can see then that you can set up the

00:18:25,520 --> 00:18:29,039
filters

00:18:26,320 --> 00:18:30,160
to work on the same warning category but

00:18:29,039 --> 00:18:31,600
you can do it

00:18:30,160 --> 00:18:33,440
with different actions for different

00:18:31,600 --> 00:18:33,760
matches now why would they have done

00:18:33,440 --> 00:18:35,440
this

00:18:33,760 --> 00:18:37,280
aren't deprecation warnings important

00:18:35,440 --> 00:18:39,760
don't we want to know about them

00:18:37,280 --> 00:18:41,280
well the answer is of course yes and no

00:18:39,760 --> 00:18:42,000
we want to know about deprecation

00:18:41,280 --> 00:18:43,760
warnings in

00:18:42,000 --> 00:18:45,440
our own code and the programs that we're

00:18:43,760 --> 00:18:47,919
running but if i

00:18:45,440 --> 00:18:49,360
import a module and that module hasn't

00:18:47,919 --> 00:18:50,880
been updated and gives me a deprecation

00:18:49,360 --> 00:18:52,400
warning do i really want to see warnings

00:18:50,880 --> 00:18:53,919
for someone else's code

00:18:52,400 --> 00:18:55,760
probably not and if you've ever

00:18:53,919 --> 00:18:56,240
encountered that or when if you import

00:18:55,760 --> 00:18:57,600
something

00:18:56,240 --> 00:18:59,360
suddenly you're flooded with warnings

00:18:57,600 --> 00:19:00,480
you know how annoying that can be

00:18:59,360 --> 00:19:02,240
because like you're not going to go

00:19:00,480 --> 00:19:03,120
maintain that code that's someone else's

00:19:02,240 --> 00:19:04,400
code

00:19:03,120 --> 00:19:05,679
and yet you're suffering the

00:19:04,400 --> 00:19:06,559
consequences because they haven't

00:19:05,679 --> 00:19:08,080
maintained it

00:19:06,559 --> 00:19:10,080
that's why deprecation warnings are

00:19:08,080 --> 00:19:10,880
traditionally ignored accepted and done

00:19:10,080 --> 00:19:13,120
domain

00:19:10,880 --> 00:19:14,080
because then it's it's your fault we're

00:19:13,120 --> 00:19:15,120
also going to ignore pending

00:19:14,080 --> 00:19:16,640
deprecations

00:19:15,120 --> 00:19:17,919
and import warnings and resource

00:19:16,640 --> 00:19:19,600
warnings of course you can change all

00:19:17,919 --> 00:19:21,360
this but these are the defaults

00:19:19,600 --> 00:19:23,200
now there is another option where you

00:19:21,360 --> 00:19:25,520
can set the python warnings

00:19:23,200 --> 00:19:27,280
environment variable so we can say

00:19:25,520 --> 00:19:27,760
python warnings equals e depreciation

00:19:27,280 --> 00:19:29,679
warning

00:19:27,760 --> 00:19:31,440
and d resource warning so we can do all

00:19:29,679 --> 00:19:34,000
that stuff

00:19:31,440 --> 00:19:34,960
now the thing is you can't use what we

00:19:34,000 --> 00:19:36,720
just saw

00:19:34,960 --> 00:19:38,000
you can't use the minus big w switch or

00:19:36,720 --> 00:19:40,640
python warnings the environment

00:19:38,000 --> 00:19:42,400
variable you cannot do that for custom

00:19:40,640 --> 00:19:43,760
warning categories and that's because

00:19:42,400 --> 00:19:46,240
our custom warning categories are

00:19:43,760 --> 00:19:49,200
classes defined in our code

00:19:46,240 --> 00:19:51,360
and because those warning switches are

00:19:49,200 --> 00:19:52,880
done before our code is loaded and run

00:19:51,360 --> 00:19:54,880
it just can't know about it

00:19:52,880 --> 00:19:56,480
the thing is we can do it from within

00:19:54,880 --> 00:19:58,679
python and there are a few

00:19:56,480 --> 00:19:59,840
different functions we can call there's

00:19:58,679 --> 00:20:01,679
warnings.filterwarnings

00:19:59,840 --> 00:20:02,880
which lets us specify all five different

00:20:01,679 --> 00:20:04,000
filter elements

00:20:02,880 --> 00:20:05,679
right but a lot of times you're not

00:20:04,000 --> 00:20:06,000
going to want to do that so for people

00:20:05,679 --> 00:20:07,679
like

00:20:06,000 --> 00:20:09,600
us like normal people they're going to

00:20:07,679 --> 00:20:12,080
have simple filter and then just specify

00:20:09,600 --> 00:20:13,919
the action the category line number

00:20:12,080 --> 00:20:15,600
and then there's also reset warnings so

00:20:13,919 --> 00:20:16,720
if you have one portion of your code

00:20:15,600 --> 00:20:18,159
where you really want to be using

00:20:16,720 --> 00:20:19,760
warnings in a certain way and you want

00:20:18,159 --> 00:20:22,000
to change the filter later on

00:20:19,760 --> 00:20:22,799
just do reset filter reset warnings and

00:20:22,000 --> 00:20:24,080
it'll do that

00:20:22,799 --> 00:20:25,760
and here's an example of how you can do

00:20:24,080 --> 00:20:27,200
that in code so i'm going to import

00:20:25,760 --> 00:20:28,960
warnings and then i'm going to import

00:20:27,200 --> 00:20:30,320
from hello import hello and rx changing

00:20:28,960 --> 00:20:31,039
warning i'm going to import a custom

00:20:30,320 --> 00:20:33,679
category

00:20:31,039 --> 00:20:35,120
now i can actually set on the filter for

00:20:33,679 --> 00:20:36,559
my custom category i'm going to say set

00:20:35,120 --> 00:20:38,080
the default for them

00:20:36,559 --> 00:20:40,000
and then when i call hello world one and

00:20:38,080 --> 00:20:41,919
glow world 2 will be fine

00:20:40,000 --> 00:20:43,200
there's even a context manager you can

00:20:41,919 --> 00:20:45,360
use catch warnings

00:20:43,200 --> 00:20:48,000
if you want to temporarily change the

00:20:45,360 --> 00:20:49,600
filters just for one simple set of code

00:20:48,000 --> 00:20:50,880
so we can turn off all warnings that i'm

00:20:49,600 --> 00:20:51,760
doing if i'm calling something poorly

00:20:50,880 --> 00:20:52,960
that hit function

00:20:51,760 --> 00:20:54,559
right i know it's going to cause

00:20:52,960 --> 00:20:56,559
warnings but i don't care so i'll just

00:20:54,559 --> 00:20:58,080
do a with warnings.catch warnings

00:20:56,559 --> 00:21:00,000
and then i set the simple filter to

00:20:58,080 --> 00:21:02,000
ignore i'm going to ignore everything

00:21:00,000 --> 00:21:03,200
like i'll go around with yeah can't see

00:21:02,000 --> 00:21:03,919
any problems so there must not be

00:21:03,200 --> 00:21:06,640
problems

00:21:03,919 --> 00:21:07,120
call poorly behave funds so where should

00:21:06,640 --> 00:21:08,240
we use

00:21:07,120 --> 00:21:09,600
warranties it's very nice to have all

00:21:08,240 --> 00:21:11,679
this you know technology around that we

00:21:09,600 --> 00:21:14,720
can use but where should we use it

00:21:11,679 --> 00:21:17,280
well one is if you have a module that

00:21:14,720 --> 00:21:18,080
is that that people are using and it's

00:21:17,280 --> 00:21:20,480
going away

00:21:18,080 --> 00:21:21,919
or it's going to change its api if

00:21:20,480 --> 00:21:23,200
you're making sense of changes

00:21:21,919 --> 00:21:25,679
you can put warnings that weren't at the

00:21:23,200 --> 00:21:27,120
top of the module remember remember that

00:21:25,679 --> 00:21:27,919
modules are executed when they're

00:21:27,120 --> 00:21:30,159
imported

00:21:27,919 --> 00:21:32,000
now normally i'm not a big fan of

00:21:30,159 --> 00:21:33,120
putting executable code or at least like

00:21:32,000 --> 00:21:35,840
printing things out

00:21:33,120 --> 00:21:37,679
in modules but this is an exception it's

00:21:35,840 --> 00:21:39,919
not exception it's a warning all right

00:21:37,679 --> 00:21:41,200
but i can't in any event remember that

00:21:39,919 --> 00:21:42,960
deprecation warning is

00:21:41,200 --> 00:21:44,559
ignored by default so you might want to

00:21:42,960 --> 00:21:46,000
change that or you might want to

00:21:44,559 --> 00:21:47,200
understand that maybe you shouldn't be

00:21:46,000 --> 00:21:48,799
turning on warnings

00:21:47,200 --> 00:21:51,039
for other people who are using your

00:21:48,799 --> 00:21:52,480
modules you'll have to figure exactly

00:21:51,039 --> 00:21:55,039
how you want to do this

00:21:52,480 --> 00:21:56,080
but again you want to inform people

00:21:55,039 --> 00:21:59,039
before

00:21:56,080 --> 00:21:59,760
it's too late another great thing to do

00:21:59,039 --> 00:22:02,000
is if you're

00:21:59,760 --> 00:22:03,919
noticing common mistakes so if people

00:22:02,000 --> 00:22:05,280
are commonly causing calling a function

00:22:03,919 --> 00:22:07,039
with the wrong arguments

00:22:05,280 --> 00:22:08,559
use a warning to point them in the right

00:22:07,039 --> 00:22:09,919
direction right so if you have a

00:22:08,559 --> 00:22:11,200
function and people are constantly

00:22:09,919 --> 00:22:12,320
calling with an integer and you really

00:22:11,200 --> 00:22:13,840
expect a string

00:22:12,320 --> 00:22:15,360
you can warn them about that right that

00:22:13,840 --> 00:22:18,559
might even be nice

00:22:15,360 --> 00:22:21,120
now the most uh sort of famous

00:22:18,559 --> 00:22:22,400
warning in pandas is the setting with

00:22:21,120 --> 00:22:25,360
copy warning

00:22:22,400 --> 00:22:26,559
and that basically happens when you are

00:22:25,360 --> 00:22:28,000
sort of using

00:22:26,559 --> 00:22:30,159
for life better term double square

00:22:28,000 --> 00:22:33,200
brackets you're you're uh

00:22:30,159 --> 00:22:33,679
you know trying to set data on a data

00:22:33,200 --> 00:22:34,880
frame

00:22:33,679 --> 00:22:36,000
the problem is that you're not actually

00:22:34,880 --> 00:22:37,039
setting on that data frame you're

00:22:36,000 --> 00:22:38,640
setting it on the thing

00:22:37,039 --> 00:22:40,799
that you got back from the second set of

00:22:38,640 --> 00:22:41,840
square brackets so a lot of people make

00:22:40,799 --> 00:22:43,840
this mistake

00:22:41,840 --> 00:22:46,000
and so pandas is constantly issuing

00:22:43,840 --> 00:22:47,520
these setting with copy warnings

00:22:46,000 --> 00:22:49,039
all over the world lots of people how do

00:22:47,520 --> 00:22:50,799
i know that happens a lot of times

00:22:49,039 --> 00:22:52,320
because if you look on stack overflow

00:22:50,799 --> 00:22:53,600
it's just full of people complaining

00:22:52,320 --> 00:22:54,720
about studying with copy warning what do

00:22:53,600 --> 00:22:57,360
we do

00:22:54,720 --> 00:22:58,080
so rather than let people make these

00:22:57,360 --> 00:23:00,400
mistakes

00:22:58,080 --> 00:23:01,200
panda says hey this is a warning even in

00:23:00,400 --> 00:23:02,720
the warning text

00:23:01,200 --> 00:23:04,640
points you to the url of the

00:23:02,720 --> 00:23:05,840
documentation for pandas where you can

00:23:04,640 --> 00:23:07,600
fix them

00:23:05,840 --> 00:23:08,640
um scikit-learn used to warn you if you

00:23:07,600 --> 00:23:10,240
tried to run predict on a

00:23:08,640 --> 00:23:12,159
one-dimensional list or right

00:23:10,240 --> 00:23:14,320
now it's an exception so they were sort

00:23:12,159 --> 00:23:15,440
of trying to wean people off of bad

00:23:14,320 --> 00:23:17,200
behavior

00:23:15,440 --> 00:23:19,600
and python 2 which i hope you're not

00:23:17,200 --> 00:23:20,799
using inside of a function if you use

00:23:19,600 --> 00:23:22,799
the global statement

00:23:20,799 --> 00:23:24,720
after you'd already assigned to a a

00:23:22,799 --> 00:23:26,799
variable that variable

00:23:24,720 --> 00:23:28,559
it would give you a warning nowadays it

00:23:26,799 --> 00:23:29,919
raises an exception that's an example i

00:23:28,559 --> 00:23:30,960
guess you know sort of going back to the

00:23:29,919 --> 00:23:33,679
beginning

00:23:30,960 --> 00:23:34,880
of how python 2 started to try to warn

00:23:33,679 --> 00:23:37,440
us a bad behavior

00:23:34,880 --> 00:23:38,799
that would not work in python 3.

00:23:37,440 --> 00:23:41,520
speaking of going back to the beginning

00:23:38,799 --> 00:23:42,880
remember our fuel gauge so you as the

00:23:41,520 --> 00:23:44,000
driver of the car the owner of the car

00:23:42,880 --> 00:23:45,120
you're supposed to notice when you're

00:23:44,000 --> 00:23:46,880
low on fuel

00:23:45,120 --> 00:23:48,240
if you don't notice that then you have

00:23:46,880 --> 00:23:49,760
the yellow light and that's like

00:23:48,240 --> 00:23:52,000
screaming at you hey you should really

00:23:49,760 --> 00:23:53,520
do something but what if you ignore

00:23:52,000 --> 00:23:55,520
the yellow light guess what there's

00:23:53,520 --> 00:23:57,679
another warning that kicks in

00:23:55,520 --> 00:23:58,720
a lot of beeping a lot of beeping

00:23:57,679 --> 00:24:00,720
telling you

00:23:58,720 --> 00:24:02,720
listen you didn't notice the fuel gauge

00:24:00,720 --> 00:24:04,720
you didn't notice the yellow light

00:24:02,720 --> 00:24:06,480
it's really time to get gasoline before

00:24:04,720 --> 00:24:09,360
you're stuck in the edge of the road

00:24:06,480 --> 00:24:10,000
be nice to your users give them warnings

00:24:09,360 --> 00:24:11,919
suggest

00:24:10,000 --> 00:24:13,919
how they can improve and they will thank

00:24:11,919 --> 00:24:16,400
you for it if there are any questions in

00:24:13,919 --> 00:24:17,919
their comments i would love to hear them

00:24:16,400 --> 00:24:19,919
if you want you can always email me you

00:24:17,919 --> 00:24:21,279
can catch me on twitter go to my website

00:24:19,919 --> 00:24:23,120
learn about my courses

00:24:21,279 --> 00:24:24,880
my books my corporate training and you

00:24:23,120 --> 00:24:27,120
can also sign up for

00:24:24,880 --> 00:24:28,960
my better developers free weekly list

00:24:27,120 --> 00:24:30,159
currently about 20 000 other python

00:24:28,960 --> 00:24:32,480
developers around the world

00:24:30,159 --> 00:24:34,559
get a an article about python to help

00:24:32,480 --> 00:24:36,559
them improve their fluency every week

00:24:34,559 --> 00:24:38,240
thanks so much for coming to my talk and

00:24:36,559 --> 00:24:40,000
i really really hope

00:24:38,240 --> 00:24:41,600
to see you in person next year in salt

00:24:40,000 --> 00:24:47,840
lake city at pycon

00:24:41,600 --> 00:24:47,840
2022 thanks so much

00:25:51,039 --> 00:25:53,120

YouTube URL: https://www.youtube.com/watch?v=X0AjcpicNOM


