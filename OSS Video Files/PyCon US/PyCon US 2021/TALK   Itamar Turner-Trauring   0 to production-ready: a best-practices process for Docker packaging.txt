Title: TALK   Itamar Turner-Trauring   0 to production-ready: a best-practices process for Docker packaging
Publication date: 2021-05-29
Playlist: PyCon US 2021
Description: 
	You know the basics of packaging your Python application for Docker, but do you know enough to run that image in production? Bad packaging can result in security and production problems, not to mention wasted time try to debug unreproducible errors.

And even if you figure out the best practices, there's still a huge number of details to get right, many of which interact with each other in unexpected ways. My personal list includes over 60 Docker packaging best practices, and it keeps growing. So where do you start? What should you do first?

To help you quickly package your application in a production-ready way, this talk will give you a process to help you prioritize and iteratively implement these best practices, by starting with the highest priority best practices (security, automation), moving on the correctness and reproducibility, and finally focusing on optimization.
Captions: 
	00:00:04,170 --> 00:00:11,869
[Music]

00:00:14,960 --> 00:00:18,160
hi

00:00:15,440 --> 00:00:19,600
my name is itamar turner charring um

00:00:18,160 --> 00:00:20,320
today i'll be talking about best

00:00:19,600 --> 00:00:23,119
practices

00:00:20,320 --> 00:00:24,880
process for taking your application

00:00:23,119 --> 00:00:25,760
python application and packaging it for

00:00:24,880 --> 00:00:28,480
docker

00:00:25,760 --> 00:00:32,800
dockerizing it for production you can

00:00:28,480 --> 00:00:32,800
find more on my website pythonspeed.com

00:00:33,840 --> 00:00:36,960
the thing about docker packaging is that

00:00:35,440 --> 00:00:40,160
it's quite complicated

00:00:36,960 --> 00:00:42,480
and the first reason is history

00:00:40,160 --> 00:00:44,239
docker builds on technologies that go

00:00:42,480 --> 00:00:46,960
back 50 years to the original unix

00:00:44,239 --> 00:00:50,239
designs for example signals

00:00:46,960 --> 00:00:51,120
and then all these technologies that got

00:00:50,239 --> 00:00:54,559
built over the next

00:00:51,120 --> 00:00:57,199
50 years networking python and so on

00:00:54,559 --> 00:00:59,440
and in order to make your packaging work

00:00:57,199 --> 00:01:01,199
correctly you need to deal with

00:00:59,440 --> 00:01:02,640
all of these technologies intersecting

00:01:01,199 --> 00:01:04,239
in one place

00:01:02,640 --> 00:01:05,920
all the design decisions are led into

00:01:04,239 --> 00:01:07,360
them some of them have design mistakes

00:01:05,920 --> 00:01:09,920
these things happen

00:01:07,360 --> 00:01:11,360
and so all of these different things

00:01:09,920 --> 00:01:12,880
intersect in this one place

00:01:11,360 --> 00:01:15,520
and so that just makes it pretty

00:01:12,880 --> 00:01:17,600
complicated

00:01:15,520 --> 00:01:19,119
the other reason the docker packaging is

00:01:17,600 --> 00:01:21,119
complicated is because it's an

00:01:19,119 --> 00:01:23,600
intersection of multiple processes

00:01:21,119 --> 00:01:24,400
within your organization so when you're

00:01:23,600 --> 00:01:26,320
writing software

00:01:24,400 --> 00:01:28,240
someone has to write the actual code

00:01:26,320 --> 00:01:30,240
you're going to test your software

00:01:28,240 --> 00:01:32,079
once it's packaged it gets deployed it

00:01:30,240 --> 00:01:33,439
runs in production

00:01:32,079 --> 00:01:35,360
you may have to upgrade your software

00:01:33,439 --> 00:01:36,799
with limited downtime

00:01:35,360 --> 00:01:38,560
when things go wrong you have bug

00:01:36,799 --> 00:01:39,520
reporting and you have feedback and you

00:01:38,560 --> 00:01:42,640
want to know what's going on in

00:01:39,520 --> 00:01:44,240
production and packaging

00:01:42,640 --> 00:01:45,680
interacts with all these different

00:01:44,240 --> 00:01:46,799
processes

00:01:45,680 --> 00:01:49,360
and so that's another source of

00:01:46,799 --> 00:01:52,240
complexity because instead of being this

00:01:49,360 --> 00:01:53,520
isolated thing it packaging interacts

00:01:52,240 --> 00:01:55,840
with almost everything you do with your

00:01:53,520 --> 00:01:55,840
software

00:01:57,040 --> 00:02:01,600
and so result of this complexity is that

00:01:59,600 --> 00:02:04,000
i can't actually teach you

00:02:01,600 --> 00:02:07,040
how to do production grade docker

00:02:04,000 --> 00:02:08,640
packaging within a 25-minute talk

00:02:07,040 --> 00:02:10,399
just in terms of best practices i have a

00:02:08,640 --> 00:02:11,840
personal list that grows over time right

00:02:10,399 --> 00:02:13,760
now it's up to more than 70 best

00:02:11,840 --> 00:02:16,160
practices it keeps growing

00:02:13,760 --> 00:02:17,599
i teach this as a training class it's a

00:02:16,160 --> 00:02:18,720
day and a half and only covers some of

00:02:17,599 --> 00:02:21,280
these best practices

00:02:18,720 --> 00:02:24,480
it's not feasible to cover all the

00:02:21,280 --> 00:02:27,200
details you need to know

00:02:24,480 --> 00:02:28,720
so instead in this talk what i'd like to

00:02:27,200 --> 00:02:32,560
cover and help you learn

00:02:28,720 --> 00:02:34,640
is the big picture and in particular

00:02:32,560 --> 00:02:36,080
when you're working on packaging this is

00:02:34,640 --> 00:02:39,280
the case for anything you're doing their

00:02:36,080 --> 00:02:39,280
software you only have

00:02:39,840 --> 00:02:43,040
a limited amount of time to do any

00:02:41,280 --> 00:02:44,400
particular task and at any point you

00:02:43,040 --> 00:02:46,720
might get

00:02:44,400 --> 00:02:48,080
called away uh you may get interrupted

00:02:46,720 --> 00:02:48,560
maybe it's a critical bug maybe

00:02:48,080 --> 00:02:52,400
something

00:02:48,560 --> 00:02:53,840
else you have to deliver and so it's not

00:02:52,400 --> 00:02:55,280
because it's a complex process you won't

00:02:53,840 --> 00:02:56,480
necessarily be able to finish it in one

00:02:55,280 --> 00:02:57,920
go

00:02:56,480 --> 00:03:00,239
and so i'm going to talk about today is

00:02:57,920 --> 00:03:02,480
a process for decorating

00:03:00,239 --> 00:03:04,239
dockerizing your application and a

00:03:02,480 --> 00:03:05,760
process that is iterative

00:03:04,239 --> 00:03:07,280
and so you're going to go through

00:03:05,760 --> 00:03:07,920
multiple steps and each step you're

00:03:07,280 --> 00:03:09,200
going to

00:03:07,920 --> 00:03:11,760
come up with something that's basically

00:03:09,200 --> 00:03:14,239
working and it's prioritized so you do

00:03:11,760 --> 00:03:15,360
the most important parts first

00:03:14,239 --> 00:03:17,519
and then each step builds on the

00:03:15,360 --> 00:03:18,959
previous steps and so the idea is you go

00:03:17,519 --> 00:03:20,319
through this logical progression where

00:03:18,959 --> 00:03:21,519
each step you're improving your doctor

00:03:20,319 --> 00:03:23,840
images and you're improving your

00:03:21,519 --> 00:03:25,120
packaging process and if you're

00:03:23,840 --> 00:03:28,000
interrupted at any point you're at a

00:03:25,120 --> 00:03:28,000
good stopping point

00:03:28,959 --> 00:03:32,879
and so this is the sort of big picture

00:03:31,280 --> 00:03:34,080
process and this is how the rest of the

00:03:32,879 --> 00:03:35,760
talk is going to be structured going

00:03:34,080 --> 00:03:38,799
through each of these steps

00:03:35,760 --> 00:03:41,760
explaining why

00:03:38,799 --> 00:03:43,120
that is a next logical step to do i'll

00:03:41,760 --> 00:03:44,560
probably give an example of one of the

00:03:43,120 --> 00:03:46,000
best practices i'm

00:03:44,560 --> 00:03:48,319
again i'm not covering all the best

00:03:46,000 --> 00:03:49,519
practices at the end of the talk i'll

00:03:48,319 --> 00:03:51,120
give you links to some

00:03:49,519 --> 00:03:53,040
resources where you can learn a lot more

00:03:51,120 --> 00:03:55,920
about the details this is more about the

00:03:53,040 --> 00:03:58,560
big picture what you should do first

00:03:55,920 --> 00:03:59,360
and this is a sort of generic order

00:03:58,560 --> 00:04:01,599
which

00:03:59,360 --> 00:04:03,200
i've chosen that that i think will work

00:04:01,599 --> 00:04:05,280
for most people

00:04:03,200 --> 00:04:06,720
and it may be that in your particular

00:04:05,280 --> 00:04:07,840
case you might want to order it

00:04:06,720 --> 00:04:11,040
differently

00:04:07,840 --> 00:04:12,000
but for example it is not uncommon for

00:04:11,040 --> 00:04:14,239
people to

00:04:12,000 --> 00:04:15,120
look at their first pass a docker image

00:04:14,239 --> 00:04:17,680
and say

00:04:15,120 --> 00:04:18,239
oh no this is a two gigabyte image and

00:04:17,680 --> 00:04:20,239
it takes

00:04:18,239 --> 00:04:21,840
20 minutes to build and so i'm going to

00:04:20,239 --> 00:04:23,440
spend a bunch of time making it faster

00:04:21,840 --> 00:04:25,040
and making the image smaller

00:04:23,440 --> 00:04:26,960
and that's a fine thing to do and we'll

00:04:25,040 --> 00:04:28,479
get to that the problem is if you do

00:04:26,960 --> 00:04:30,000
that first

00:04:28,479 --> 00:04:31,199
you might then run out of time and then

00:04:30,000 --> 00:04:33,040
have to go work on something else and

00:04:31,199 --> 00:04:36,880
you've created an insecure image

00:04:33,040 --> 00:04:38,240
and so security in for most applications

00:04:36,880 --> 00:04:40,320
is probably more important than having a

00:04:38,240 --> 00:04:41,919
small image and so this is a

00:04:40,320 --> 00:04:43,840
prioritization order and eventually you

00:04:41,919 --> 00:04:45,440
should try to get through everything

00:04:43,840 --> 00:04:46,960
but we do want to start with the most

00:04:45,440 --> 00:04:48,800
important things first

00:04:46,960 --> 00:04:50,400
and so this is my proposal but you can

00:04:48,800 --> 00:04:52,479
then think through and say what is the

00:04:50,400 --> 00:04:53,600
most important order for my particular

00:04:52,479 --> 00:04:57,680
application

00:04:53,600 --> 00:05:00,800
my particular circumstances

00:04:57,680 --> 00:05:02,960
and the first step when you're packaging

00:05:00,800 --> 00:05:06,080
your application for docker is to just

00:05:02,960 --> 00:05:08,160
get something working if your

00:05:06,080 --> 00:05:09,680
application doesn't run

00:05:08,160 --> 00:05:11,120
then the whole exercise is pointless

00:05:09,680 --> 00:05:12,479
like you can have a secure image it

00:05:11,120 --> 00:05:15,680
builds quickly and it's

00:05:12,479 --> 00:05:18,080
fast and it has all the you know

00:05:15,680 --> 00:05:19,520
configuration that you need but if it

00:05:18,080 --> 00:05:22,960
doesn't actually run your application

00:05:19,520 --> 00:05:25,440
the whole exercise is a waste of time

00:05:22,960 --> 00:05:26,800
and so the first thing you have to do is

00:05:25,440 --> 00:05:27,919
figure out how to get your application

00:05:26,800 --> 00:05:30,160
working and when you're doing that

00:05:27,919 --> 00:05:31,919
you'll be thinking about things like

00:05:30,160 --> 00:05:33,840
how do you configure your application

00:05:31,919 --> 00:05:35,199
docker encourages you to

00:05:33,840 --> 00:05:36,880
configure things via environment

00:05:35,199 --> 00:05:38,320
variables but some

00:05:36,880 --> 00:05:40,240
depending on your runtime environment

00:05:38,320 --> 00:05:42,160
mounting configuration files

00:05:40,240 --> 00:05:44,240
might be another thing you can do

00:05:42,160 --> 00:05:46,240
kubernetes makes it easier

00:05:44,240 --> 00:05:47,440
um you want to think about which ports

00:05:46,240 --> 00:05:48,800
are going to be public which parts are

00:05:47,440 --> 00:05:50,720
going to be private

00:05:48,800 --> 00:05:52,160
uh so you're going through this decision

00:05:50,720 --> 00:05:54,639
process of how

00:05:52,160 --> 00:05:56,000
your application is going to interact

00:05:54,639 --> 00:05:58,000
with docker but also you're just

00:05:56,000 --> 00:05:59,440
making it work at all so installing the

00:05:58,000 --> 00:06:00,400
right dependencies installing great

00:05:59,440 --> 00:06:01,919
packages

00:06:00,400 --> 00:06:05,680
making sure it starts up that sort of

00:06:01,919 --> 00:06:08,800
thing so here's an example docker file

00:06:05,680 --> 00:06:10,479
it's sort of for a simple application

00:06:08,800 --> 00:06:13,039
like this is the most basic

00:06:10,479 --> 00:06:13,840
doc docker file you can write and it's

00:06:13,039 --> 00:06:17,759
not

00:06:13,840 --> 00:06:19,120
um the best packaging ever

00:06:17,759 --> 00:06:20,720
but this is just step one and we have

00:06:19,120 --> 00:06:23,840
five more steps and by the time we're

00:06:20,720 --> 00:06:23,840
done we can do better than this

00:06:25,199 --> 00:06:28,479
and once you have something working the

00:06:26,639 --> 00:06:32,000
next step is to work on

00:06:28,479 --> 00:06:34,800
security before you can deploy

00:06:32,000 --> 00:06:36,080
your application anywhere you really

00:06:34,800 --> 00:06:37,919
want it to be secure

00:06:36,080 --> 00:06:40,000
and for that matter before you push your

00:06:37,919 --> 00:06:41,120
image to a public image registry before

00:06:40,000 --> 00:06:42,639
you even

00:06:41,120 --> 00:06:44,639
leave for it leaves your computer you

00:06:42,639 --> 00:06:48,080
want it to be secure for example

00:06:44,639 --> 00:06:49,280
if you have some secrets that you use to

00:06:48,080 --> 00:06:50,479
build your image

00:06:49,280 --> 00:06:53,120
you don't want those secrets to be

00:06:50,479 --> 00:06:56,400
leaked in your image um

00:06:53,120 --> 00:06:58,720
and so before you can really do anything

00:06:56,400 --> 00:07:01,280
with your image before you can actually

00:06:58,720 --> 00:07:04,720
make any use of it for most applications

00:07:01,280 --> 00:07:04,720
security is the next step

00:07:06,560 --> 00:07:09,919
and here's an example again there are

00:07:08,160 --> 00:07:11,039
many best practices i can't cover them

00:07:09,919 --> 00:07:12,240
all but i'll

00:07:11,039 --> 00:07:14,160
give you some links at the end of the

00:07:12,240 --> 00:07:17,599
talk so here's an example of one of the

00:07:14,160 --> 00:07:19,919
best practices for security

00:07:17,599 --> 00:07:22,560
when you run a docker image by default

00:07:19,919 --> 00:07:25,840
it's going to run as root

00:07:22,560 --> 00:07:28,880
and it while it's true that containers

00:07:25,840 --> 00:07:30,800
provide a measure of isolation and it's

00:07:28,880 --> 00:07:32,319
true that root inside a container is

00:07:30,800 --> 00:07:33,919
typically more restricted than root on

00:07:32,319 --> 00:07:37,360
the host machine

00:07:33,919 --> 00:07:40,000
this is only true up to a point and

00:07:37,360 --> 00:07:42,160
running as root does make your container

00:07:40,000 --> 00:07:43,440
that much more

00:07:42,160 --> 00:07:46,240
powerful in terms of what it could

00:07:43,440 --> 00:07:48,000
potentially do and so if an attacker

00:07:46,240 --> 00:07:50,080
manages somehow to gain access to your

00:07:48,000 --> 00:07:53,120
container and take it over

00:07:50,080 --> 00:07:54,319
if their gate they've taken over a

00:07:53,120 --> 00:07:56,080
container running this route they have a

00:07:54,319 --> 00:07:56,720
lot more access and it'll be easier for

00:07:56,080 --> 00:07:59,360
them

00:07:56,720 --> 00:08:00,800
to then escape the container or take

00:07:59,360 --> 00:08:03,199
over the whole host machine

00:08:00,800 --> 00:08:05,360
so it's a good best practice not to run

00:08:03,199 --> 00:08:06,960
your container as root

00:08:05,360 --> 00:08:08,560
and so in this docker file what we're

00:08:06,960 --> 00:08:10,960
doing is

00:08:08,560 --> 00:08:12,560
we're creating a new user called app

00:08:10,960 --> 00:08:16,000
user

00:08:12,560 --> 00:08:19,039
and then we're using the user command

00:08:16,000 --> 00:08:22,240
the docker file to say all

00:08:19,039 --> 00:08:22,960
commands after this are going to run as

00:08:22,240 --> 00:08:24,639
that user

00:08:22,960 --> 00:08:26,800
and so when you do pip install it's

00:08:24,639 --> 00:08:29,759
grown as a user

00:08:26,800 --> 00:08:31,280
and when you eventually start the

00:08:29,759 --> 00:08:34,399
resulting image and start up

00:08:31,280 --> 00:08:35,919
your process it will run as the new user

00:08:34,399 --> 00:08:38,320
and so now you have an image that by

00:08:35,919 --> 00:08:40,560
default it doesn't run as root

00:08:38,320 --> 00:08:41,599
and so your image is just inherently

00:08:40,560 --> 00:08:44,159
safer

00:08:41,599 --> 00:08:47,120
and it doesn't take very much work but

00:08:44,159 --> 00:08:47,120
it's a good idea

00:08:48,399 --> 00:08:54,480
and so beyond just

00:08:51,440 --> 00:08:55,839
the uh like right you know configuring

00:08:54,480 --> 00:08:57,519
your application

00:08:55,839 --> 00:08:59,519
uh files like a docker file on your

00:08:57,519 --> 00:09:01,680
startup script and so on

00:08:59,519 --> 00:09:04,320
part of packaging is also creating

00:09:01,680 --> 00:09:06,160
processes organizational processes

00:09:04,320 --> 00:09:09,360
for example when it comes to security a

00:09:06,160 --> 00:09:10,720
process you really need is a process for

00:09:09,360 --> 00:09:12,959
figuring out what to do about security

00:09:10,720 --> 00:09:14,560
updates and the issue is that a docker

00:09:12,959 --> 00:09:16,720
image is immutable

00:09:14,560 --> 00:09:18,560
every time you start it up the container

00:09:16,720 --> 00:09:20,399
starts with the exact same file system

00:09:18,560 --> 00:09:22,080
and so security updates require

00:09:20,399 --> 00:09:24,080
typically a new image

00:09:22,080 --> 00:09:25,839
and in some sense you can work around

00:09:24,080 --> 00:09:26,880
this but like the immutable artifacts

00:09:25,839 --> 00:09:27,680
are actually one of the features of

00:09:26,880 --> 00:09:30,080
docker

00:09:27,680 --> 00:09:31,279
they make it easy to reason about in

00:09:30,080 --> 00:09:34,800
many ways

00:09:31,279 --> 00:09:36,959
and so when security updates come out

00:09:34,800 --> 00:09:38,720
you need to a know this hat is happening

00:09:36,959 --> 00:09:40,320
like you need to know that there's a bug

00:09:38,720 --> 00:09:42,080
in open ssl that

00:09:40,320 --> 00:09:44,480
might allow someone to exploit your

00:09:42,080 --> 00:09:45,760
server and then you need to

00:09:44,480 --> 00:09:47,920
update your image so get the latest

00:09:45,760 --> 00:09:49,120
version of openssl and rebuild the image

00:09:47,920 --> 00:09:50,640
then you have to redeploy your

00:09:49,120 --> 00:09:51,600
application if it's a server of some

00:09:50,640 --> 00:09:55,360
sort

00:09:51,600 --> 00:09:55,360
and so this is not a

00:09:55,600 --> 00:09:59,120
sometimes a thing you can manage with

00:09:57,200 --> 00:10:02,399
just some configuration

00:09:59,120 --> 00:10:04,480
but not always and it is

00:10:02,399 --> 00:10:06,399
not just about configuring your files

00:10:04,480 --> 00:10:07,600
this is an ongoing process

00:10:06,399 --> 00:10:10,320
it's a thing you're going to have to

00:10:07,600 --> 00:10:12,800
continue doing uh

00:10:10,320 --> 00:10:14,399
even beyond the the time where you're

00:10:12,800 --> 00:10:16,560
doing the upfront packaging like

00:10:14,399 --> 00:10:18,079
once you've committed to packaging

00:10:16,560 --> 00:10:21,279
you're also committing to have a process

00:10:18,079 --> 00:10:23,120
for security updates and so that's the

00:10:21,279 --> 00:10:24,399
thing to keep in mind that

00:10:23,120 --> 00:10:27,040
you're not just going to this is not

00:10:24,399 --> 00:10:28,720
like a write some configuration files

00:10:27,040 --> 00:10:29,920
and you're done you need ongoing

00:10:28,720 --> 00:10:31,920
processes

00:10:29,920 --> 00:10:35,279
or you're going to suffer from suffer in

00:10:31,920 --> 00:10:35,279
this case lack of security

00:10:35,440 --> 00:10:40,320
so once you've packaged your image

00:10:38,880 --> 00:10:41,920
securely

00:10:40,320 --> 00:10:44,560
the next step is to try to automate

00:10:41,920 --> 00:10:47,200
builds integrate with the rci system

00:10:44,560 --> 00:10:48,800
and the reason is that you don't want at

00:10:47,200 --> 00:10:50,399
this point you've been building images

00:10:48,800 --> 00:10:51,519
manually and that's fine for like

00:10:50,399 --> 00:10:54,000
testing

00:10:51,519 --> 00:10:55,360
but for real software development where

00:10:54,000 --> 00:10:56,800
you're continuously working on the

00:10:55,360 --> 00:10:58,399
software and maybe have a team of people

00:10:56,800 --> 00:11:02,000
working on the software

00:10:58,399 --> 00:11:03,120
you want to automate this

00:11:02,000 --> 00:11:04,560
so you don't have to teach your

00:11:03,120 --> 00:11:05,760
teammates how to build a docker image

00:11:04,560 --> 00:11:06,959
and give all them the credentials the

00:11:05,760 --> 00:11:09,680
image registry

00:11:06,959 --> 00:11:11,200
you want it to just automatically work

00:11:09,680 --> 00:11:14,000
and so next you wants to

00:11:11,200 --> 00:11:14,320
integrate with the build system and so

00:11:14,000 --> 00:11:15,839
the

00:11:14,320 --> 00:11:17,760
the simplest process where you can do it

00:11:15,839 --> 00:11:20,000
is unlike the shell script which you

00:11:17,760 --> 00:11:21,440
run automatically in like in every check

00:11:20,000 --> 00:11:23,680
into your main branch

00:11:21,440 --> 00:11:25,200
where you run the tests build the image

00:11:23,680 --> 00:11:28,240
and then push the image

00:11:25,200 --> 00:11:31,680
to registry so that's sort of

00:11:28,240 --> 00:11:34,240
the simplest possible uh

00:11:31,680 --> 00:11:34,959
automatic automated build beyond that

00:11:34,240 --> 00:11:38,240
however

00:11:34,959 --> 00:11:39,680
um you

00:11:38,240 --> 00:11:40,480
again need to think about how you're

00:11:39,680 --> 00:11:42,560
going to integrate in your

00:11:40,480 --> 00:11:44,240
organizational processes their packaging

00:11:42,560 --> 00:11:46,079
interacts with how your team develops

00:11:44,240 --> 00:11:48,160
their code

00:11:46,079 --> 00:11:49,839
for example testing are you going to be

00:11:48,160 --> 00:11:51,279
using the docker image to run

00:11:49,839 --> 00:11:53,200
integration tests then you have to

00:11:51,279 --> 00:11:55,200
figure out how that fits in ci

00:11:53,200 --> 00:11:56,720
if you have multiple branches however

00:11:55,200 --> 00:11:58,000
multiple branches going to

00:11:56,720 --> 00:11:59,839
interact with your docker build are you

00:11:58,000 --> 00:12:02,240
going to have images for all the

00:11:59,839 --> 00:12:03,760
branches or just your production branch

00:12:02,240 --> 00:12:05,440
uh you might want to start thinking

00:12:03,760 --> 00:12:06,079
about like is this going to be a

00:12:05,440 --> 00:12:07,760
bottleneck

00:12:06,079 --> 00:12:10,480
in which case performance we'll talk

00:12:07,760 --> 00:12:13,360
about later is going to be an issue

00:12:10,480 --> 00:12:14,560
and so as an example of a best practice

00:12:13,360 --> 00:12:17,839
it's quite common

00:12:14,560 --> 00:12:19,839
to have feature branches for

00:12:17,839 --> 00:12:21,040
particular features and then you open up

00:12:19,839 --> 00:12:23,200
pull requests and

00:12:21,040 --> 00:12:25,360
run the tests and then merge that polar

00:12:23,200 --> 00:12:27,120
crest into the main branch

00:12:25,360 --> 00:12:29,120
so imagine you're building an image for

00:12:27,120 --> 00:12:29,920
future branch one two three more cowbell

00:12:29,120 --> 00:12:33,600
for

00:12:29,920 --> 00:12:35,519
ticket number one two three and

00:12:33,600 --> 00:12:37,440
you want to build a docker image for

00:12:35,519 --> 00:12:39,040
every pull request because you want to

00:12:37,440 --> 00:12:39,839
run integration tests using the docker

00:12:39,040 --> 00:12:41,920
images

00:12:39,839 --> 00:12:42,959
you don't want your docker image from

00:12:41,920 --> 00:12:44,959
the feature branch

00:12:42,959 --> 00:12:47,279
to overwrite to your docker image from

00:12:44,959 --> 00:12:48,399
the main branch so that you

00:12:47,279 --> 00:12:49,920
really what you want to do is you want

00:12:48,399 --> 00:12:51,600
to have different names for different

00:12:49,920 --> 00:12:53,839
docker images depending what branch of

00:12:51,600 --> 00:12:55,680
the code they're from

00:12:53,839 --> 00:12:57,200
and so here's an example of how you

00:12:55,680 --> 00:12:59,440
might do that where

00:12:57,200 --> 00:13:01,120
in your build script you figure out what

00:12:59,440 --> 00:13:03,839
the current git branches using this git

00:13:01,120 --> 00:13:05,680
command they got off of stack overflow

00:13:03,839 --> 00:13:08,480
and then when you build your image the

00:13:05,680 --> 00:13:10,560
part after the colon which is the tag

00:13:08,480 --> 00:13:12,639
is taken from the name of the branch so

00:13:10,560 --> 00:13:14,639
if your branches main branch

00:13:12,639 --> 00:13:16,880
it'll be your image colon main and if

00:13:14,639 --> 00:13:18,560
it's branch one two three four more

00:13:16,880 --> 00:13:20,079
cowbell it'll be your image colon one

00:13:18,560 --> 00:13:21,440
two three more cowbell so just by

00:13:20,079 --> 00:13:23,200
looking at the docker image name you'll

00:13:21,440 --> 00:13:26,240
know a branch you came from

00:13:23,200 --> 00:13:28,560
and moreover docker images from your

00:13:26,240 --> 00:13:30,160
feature branches won't break

00:13:28,560 --> 00:13:32,639
won't overwrite your docker images for

00:13:30,160 --> 00:13:32,639
production

00:13:33,360 --> 00:13:37,279
once you're building images

00:13:34,560 --> 00:13:38,959
automatically you're going to start

00:13:37,279 --> 00:13:40,320
accumulating more images as you build

00:13:38,959 --> 00:13:42,000
them

00:13:40,320 --> 00:13:44,399
you may be running in production at this

00:13:42,000 --> 00:13:44,399
point

00:13:44,480 --> 00:13:47,440
so you can have more errors being

00:13:46,160 --> 00:13:48,959
required from production so you want

00:13:47,440 --> 00:13:51,040
debugability

00:13:48,959 --> 00:13:53,040
you want your images to start up and

00:13:51,040 --> 00:13:53,680
shut down reasonably and maybe be easier

00:13:53,040 --> 00:13:55,519
to monitor

00:13:53,680 --> 00:13:56,800
because they're running in production

00:13:55,519 --> 00:13:57,839
and so that's a good next step

00:13:56,800 --> 00:13:58,959
operational correctness and

00:13:57,839 --> 00:14:02,160
debuggability

00:13:58,959 --> 00:14:02,880
make things work well in production and

00:14:02,160 --> 00:14:05,920
make them

00:14:02,880 --> 00:14:09,600
easier to debug when things go wrong

00:14:05,920 --> 00:14:12,639
so here's an example when

00:14:09,600 --> 00:14:14,240
you have a bug in your python code

00:14:12,639 --> 00:14:16,079
you can get a traceback if it's not

00:14:14,240 --> 00:14:17,519
handled of any exception handler

00:14:16,079 --> 00:14:20,560
and that tracevac will end up in your

00:14:17,519 --> 00:14:22,160
logs or maybe you have some service to

00:14:20,560 --> 00:14:23,760
collect all your tracebacks and put them

00:14:22,160 --> 00:14:24,800
one place

00:14:23,760 --> 00:14:26,800
and so then you can look at your

00:14:24,800 --> 00:14:31,360
traceback and you can say oh

00:14:26,800 --> 00:14:33,680
line 230 and the server module

00:14:31,360 --> 00:14:35,279
had a value error and that gives you a

00:14:33,680 --> 00:14:36,639
really good starting point for debugging

00:14:35,279 --> 00:14:38,959
bugs

00:14:36,639 --> 00:14:40,720
if you have a bug in c code and remember

00:14:38,959 --> 00:14:42,639
python itself was written in c

00:14:40,720 --> 00:14:44,399
a lot of extension modules are in the c

00:14:42,639 --> 00:14:47,360
or c plus or cython

00:14:44,399 --> 00:14:49,120
if you have a bug in one of those often

00:14:47,360 --> 00:14:51,519
your program's just going to crash

00:14:49,120 --> 00:14:52,399
the seg faults and when it crashes

00:14:51,519 --> 00:14:54,000
you're not going to get

00:14:52,399 --> 00:14:56,000
a python trace back you're just going to

00:14:54,000 --> 00:14:57,279
get silence and then you have no idea

00:14:56,000 --> 00:14:59,519
how to debug it

00:14:57,279 --> 00:15:00,639
but python has a feature that will fix

00:14:59,519 --> 00:15:03,839
this called

00:15:00,639 --> 00:15:05,680
fault handler and basically all you have

00:15:03,839 --> 00:15:07,839
to do is set this environment variable

00:15:05,680 --> 00:15:08,880
python fault handler

00:15:07,839 --> 00:15:12,079
in this case we're setting in the

00:15:08,880 --> 00:15:13,600
dockerfile using the end of command and

00:15:12,079 --> 00:15:15,040
then just by setting the environment

00:15:13,600 --> 00:15:16,560
variable when you have a seg fault

00:15:15,040 --> 00:15:18,880
you'll get a nice

00:15:16,560 --> 00:15:20,560
python traceback that will show you

00:15:18,880 --> 00:15:21,760
which package it came from so you might

00:15:20,560 --> 00:15:23,600
say oh it's

00:15:21,760 --> 00:15:24,839
matplotlib or it's your database adapter

00:15:23,600 --> 00:15:27,519
or whatever

00:15:24,839 --> 00:15:29,040
um and that can be extremely useful in

00:15:27,519 --> 00:15:30,560
debugging crashes because instead of

00:15:29,040 --> 00:15:32,000
silence you actually know exactly where

00:15:30,560 --> 00:15:33,600
to start

00:15:32,000 --> 00:15:34,880
and so this is just like a one line

00:15:33,600 --> 00:15:36,320
thing in your docker file and will make

00:15:34,880 --> 00:15:38,240
your life much easier when things go

00:15:36,320 --> 00:15:41,519
wrong

00:15:38,240 --> 00:15:44,639
so another example when you start up

00:15:41,519 --> 00:15:46,880
python it loads in all the dot py files

00:15:44,639 --> 00:15:47,759
and turns them into pyc files from

00:15:46,880 --> 00:15:49,120
bytecode

00:15:47,759 --> 00:15:51,120
it's a compilation step it's not really

00:15:49,120 --> 00:15:52,959
like a c compiler because it's basically

00:15:51,120 --> 00:15:55,440
one to one but basically

00:15:52,959 --> 00:15:57,279
it's a necessary step and then python

00:15:55,440 --> 00:15:59,120
stores the pyc file so next time you

00:15:57,279 --> 00:16:00,639
start up the server

00:15:59,120 --> 00:16:02,000
it doesn't or the application it doesn't

00:16:00,639 --> 00:16:03,920
have to do the compilation step and

00:16:02,000 --> 00:16:05,519
startup will be faster

00:16:03,920 --> 00:16:07,440
the problem is with docker images is

00:16:05,519 --> 00:16:08,079
that they're immutable the second time

00:16:07,440 --> 00:16:10,560
you run the

00:16:08,079 --> 00:16:12,079
the run it and get a new container as

00:16:10,560 --> 00:16:13,120
the exact same file system as the first

00:16:12,079 --> 00:16:14,880
time you ran it

00:16:13,120 --> 00:16:16,399
so if your docker image doesn't have pyc

00:16:14,880 --> 00:16:19,360
files your startup will be

00:16:16,399 --> 00:16:21,199
slower and some applications it doesn't

00:16:19,360 --> 00:16:23,360
matter but in others this can

00:16:21,199 --> 00:16:24,959
might be meaningful you actually want to

00:16:23,360 --> 00:16:26,639
start up quickly

00:16:24,959 --> 00:16:27,920
and so in your docker image if you care

00:16:26,639 --> 00:16:29,040
less about image size and more about

00:16:27,920 --> 00:16:31,040
startup time

00:16:29,040 --> 00:16:32,560
you can use python's compile module and

00:16:31,040 --> 00:16:34,800
basically make sure

00:16:32,560 --> 00:16:36,720
that you've created pyc files for all

00:16:34,800 --> 00:16:37,759
your source code as part of creating the

00:16:36,720 --> 00:16:41,120
locker image

00:16:37,759 --> 00:16:43,279
that will give you faster startup

00:16:41,120 --> 00:16:45,120
so this point your image is secure it

00:16:43,279 --> 00:16:48,639
works well in

00:16:45,120 --> 00:16:50,560
operational environments and

00:16:48,639 --> 00:16:51,680
builds are automated this probably

00:16:50,560 --> 00:16:55,680
doesn't take very long

00:16:51,680 --> 00:16:58,160
to do these initial steps if you're not

00:16:55,680 --> 00:17:01,199
distracted

00:16:58,160 --> 00:17:02,079
but so chances are there hasn't been say

00:17:01,199 --> 00:17:03,279
a new release of

00:17:02,079 --> 00:17:06,400
freezing django there hasn't been a

00:17:03,279 --> 00:17:07,679
major new release of django uh

00:17:06,400 --> 00:17:09,679
during the week you're working on your

00:17:07,679 --> 00:17:10,959
docker image with a couple days

00:17:09,679 --> 00:17:12,720
but if you wait six months there might

00:17:10,959 --> 00:17:14,240
be a major release of django and if you

00:17:12,720 --> 00:17:17,679
wait two years it'll definitely be

00:17:14,240 --> 00:17:20,799
a major release of jingle and so

00:17:17,679 --> 00:17:22,880
you want to if you're just always

00:17:20,799 --> 00:17:25,199
installing the latest version of django

00:17:22,880 --> 00:17:26,400
in the short term that's fine but in the

00:17:25,199 --> 00:17:28,000
long term that's going to break your

00:17:26,400 --> 00:17:29,120
application like and then you'll rebuild

00:17:28,000 --> 00:17:29,840
your dockle image and something that's

00:17:29,120 --> 00:17:31,280
using a different

00:17:29,840 --> 00:17:33,440
version of django and things are going

00:17:31,280 --> 00:17:34,880
badly because incompatible so you want

00:17:33,440 --> 00:17:36,720
reproducible builds

00:17:34,880 --> 00:17:38,640
you want to get the same image or the

00:17:36,720 --> 00:17:41,760
same packages more or less

00:17:38,640 --> 00:17:43,039
whenever you rebuild it so that when you

00:17:41,760 --> 00:17:44,559
do upgrade you can upgrade in a

00:17:43,039 --> 00:17:47,520
controlled manner rather than based on

00:17:44,559 --> 00:17:50,559
jango's release schedule

00:17:47,520 --> 00:17:53,120
so part of having reproducible images

00:17:50,559 --> 00:17:54,000
is having the system packages you rely

00:17:53,120 --> 00:17:57,280
on so like

00:17:54,000 --> 00:17:58,880
glibsee and openssl and so on having

00:17:57,280 --> 00:18:01,600
those be

00:17:58,880 --> 00:18:02,880
stable and the easiest way to do that is

00:18:01,600 --> 00:18:06,000
to use a linux

00:18:02,880 --> 00:18:07,600
based image that guarantees backwards

00:18:06,000 --> 00:18:08,960
compatibility and stability but also

00:18:07,600 --> 00:18:11,280
gives you security updates

00:18:08,960 --> 00:18:12,640
like ubuntu long term support or centos

00:18:11,280 --> 00:18:15,840
such as these things would be red hat

00:18:12,640 --> 00:18:15,840
enterprise linux

00:18:16,640 --> 00:18:19,039
and

00:18:20,720 --> 00:18:25,360
once you do that when you can rely on

00:18:23,760 --> 00:18:26,799
the

00:18:25,360 --> 00:18:28,640
the easy thing to do just install

00:18:26,799 --> 00:18:30,160
security updates and then

00:18:28,640 --> 00:18:31,360
rely on the fact that the operating

00:18:30,160 --> 00:18:32,880
system has guaranteed backwards

00:18:31,360 --> 00:18:34,080
compatibility

00:18:32,880 --> 00:18:36,000
problem with these is they have old

00:18:34,080 --> 00:18:38,240
versions of python typically

00:18:36,000 --> 00:18:39,039
so the default i recommend is the

00:18:38,240 --> 00:18:42,080
official

00:18:39,039 --> 00:18:45,200
python base images created by docker

00:18:42,080 --> 00:18:46,640
for example python colon 3.9 slim buster

00:18:45,200 --> 00:18:49,360
which means the latest mini release of

00:18:46,640 --> 00:18:51,039
python 3.9 on debian buster which is a

00:18:49,360 --> 00:18:52,320
stable release and giving it slim means

00:18:51,039 --> 00:18:55,280
a smaller version

00:18:52,320 --> 00:18:56,000
if you use this version you can rely on

00:18:55,280 --> 00:18:58,160
the base

00:18:56,000 --> 00:18:59,120
image not changing out from under you

00:18:58,160 --> 00:19:01,520
like you're not going to get a

00:18:59,120 --> 00:19:03,440
completely different version open ssl

00:19:01,520 --> 00:19:05,840
but you can also get access to security

00:19:03,440 --> 00:19:05,840
updates

00:19:07,360 --> 00:19:10,559
and again reproducibility isn't just

00:19:09,840 --> 00:19:12,240
about

00:19:10,559 --> 00:19:13,679
uh the artifacts you're creating it's

00:19:12,240 --> 00:19:16,640
also a process

00:19:13,679 --> 00:19:18,000
uh so if you update your dependencies

00:19:16,640 --> 00:19:19,280
and this is mostly about your python

00:19:18,000 --> 00:19:20,720
dependencies but if you're really

00:19:19,280 --> 00:19:21,280
paranoid it might also be your system

00:19:20,720 --> 00:19:23,280
that

00:19:21,280 --> 00:19:24,799
dependencies like your apps packages

00:19:23,280 --> 00:19:26,080
your rpms

00:19:24,799 --> 00:19:27,440
if you update your dependencies the

00:19:26,080 --> 00:19:28,799
latest version every builds you don't

00:19:27,440 --> 00:19:30,080
have reproducibility you'll get a

00:19:28,799 --> 00:19:32,400
different version of django without a

00:19:30,080 --> 00:19:34,080
new whenever new version of j1 comes up

00:19:32,400 --> 00:19:36,000
so you really want to pin or freeze all

00:19:34,080 --> 00:19:38,960
your dependencies using tools like pip

00:19:36,000 --> 00:19:40,400
tools or poetry or conde luck

00:19:38,960 --> 00:19:41,200
and then whenever you rebuild your image

00:19:40,400 --> 00:19:42,720
you'll be installing the same

00:19:41,200 --> 00:19:44,320
dependencies

00:19:42,720 --> 00:19:46,799
then you have a new problem if you don't

00:19:44,320 --> 00:19:47,600
update over time eventually you're

00:19:46,799 --> 00:19:49,840
running an old

00:19:47,600 --> 00:19:50,960
dependencies and if you wait long enough

00:19:49,840 --> 00:19:52,799
you're in the situation where you have

00:19:50,960 --> 00:19:54,080
to upgrade five major dependencies at

00:19:52,799 --> 00:19:55,440
once and then you don't know what's

00:19:54,080 --> 00:19:57,120
breaking your code and

00:19:55,440 --> 00:19:59,120
it's a mess and so you need an

00:19:57,120 --> 00:20:00,480
organizational process where like

00:19:59,120 --> 00:20:01,679
every three months that you say i'm

00:20:00,480 --> 00:20:02,799
going to upgrade to latest version

00:20:01,679 --> 00:20:04,880
dependencies

00:20:02,799 --> 00:20:06,480
and that way in the short term you have

00:20:04,880 --> 00:20:07,760
stability or the term

00:20:06,480 --> 00:20:10,080
those three months you're using the same

00:20:07,760 --> 00:20:11,520
version of django but because you

00:20:10,080 --> 00:20:13,039
upgrade every three months

00:20:11,520 --> 00:20:14,880
you're never really lagging behind too

00:20:13,039 --> 00:20:15,440
much and this is an organizational

00:20:14,880 --> 00:20:17,440
process

00:20:15,440 --> 00:20:21,440
it requires human intervention and you

00:20:17,440 --> 00:20:24,880
need to plan for it and do it regularly

00:20:21,440 --> 00:20:26,799
the final step in the process is to

00:20:24,880 --> 00:20:29,120
optimize your packages so they are build

00:20:26,799 --> 00:20:32,240
faster and the images are smaller

00:20:29,120 --> 00:20:33,120
packaging if packaging takes 30 minutes

00:20:32,240 --> 00:20:34,559
and

00:20:33,120 --> 00:20:36,240
every time you do a pull request you

00:20:34,559 --> 00:20:37,520
have to wait 30 minutes for the docker

00:20:36,240 --> 00:20:38,799
image build

00:20:37,520 --> 00:20:40,559
that's going to slow your development

00:20:38,799 --> 00:20:42,000
down that gets expensive if you have a 2

00:20:40,559 --> 00:20:43,120
gigabyte image it takes a long time to

00:20:42,000 --> 00:20:45,280
download

00:20:43,120 --> 00:20:47,440
uh can again slow things down or just

00:20:45,280 --> 00:20:49,440
cost you in bandwidth

00:20:47,440 --> 00:20:52,480
so you next step and final step is to

00:20:49,440 --> 00:20:52,480
optimize your images

00:20:52,960 --> 00:21:00,080
for example in terms of build time

00:20:57,440 --> 00:21:02,799
alpine linux is often recommended as a

00:21:00,080 --> 00:21:04,559
base image for your docker images

00:21:02,799 --> 00:21:06,400
but in python context it's quite

00:21:04,559 --> 00:21:09,280
problematic because it can't use

00:21:06,400 --> 00:21:10,000
the pre-compiled wheels from pipi what

00:21:09,280 --> 00:21:11,440
that means is

00:21:10,000 --> 00:21:12,880
all the things that are usually provided

00:21:11,440 --> 00:21:14,880
to you by the package authors in a

00:21:12,880 --> 00:21:16,880
pre-compiled format you have to compile

00:21:14,880 --> 00:21:18,480
from scratch

00:21:16,880 --> 00:21:20,240
so for example if you want to install

00:21:18,480 --> 00:21:23,200
pandas in matlab lab

00:21:20,240 --> 00:21:25,919
if you're installing a debian based

00:21:23,200 --> 00:21:27,280
docker image like slimbuster

00:21:25,919 --> 00:21:29,440
it'll just download the precompiled

00:21:27,280 --> 00:21:30,559
packages takes 30 seconds

00:21:29,440 --> 00:21:32,480
on alpine you're going to have to

00:21:30,559 --> 00:21:35,600
compile them yourself it's

00:21:32,480 --> 00:21:39,280
1500 seconds 50 times slower

00:21:35,600 --> 00:21:40,080
it's just a pain and there's a pep 656 i

00:21:39,280 --> 00:21:41,760
think that will

00:21:40,080 --> 00:21:43,039
get around to fixing this and another

00:21:41,760 --> 00:21:44,880
year or two from now there might

00:21:43,039 --> 00:21:46,880
actually be pre-compiled wheels for

00:21:44,880 --> 00:21:48,400
alpine and you can use alpine

00:21:46,880 --> 00:21:50,320
but at the moment i recommend against

00:21:48,400 --> 00:21:53,039
using it if you want fast builds for

00:21:50,320 --> 00:21:53,039
your docker image

00:21:53,919 --> 00:21:57,440
so that's the big picture process first

00:21:56,080 --> 00:21:58,960
you get something working

00:21:57,440 --> 00:22:01,520
then you make it secure then you

00:21:58,960 --> 00:22:03,360
automate the builds make it run in ci

00:22:01,520 --> 00:22:04,960
then you do all the tuning and

00:22:03,360 --> 00:22:08,240
correctness you want for

00:22:04,960 --> 00:22:11,520
a debug ability you want for

00:22:08,240 --> 00:22:13,360
production then you reproducible builds

00:22:11,520 --> 00:22:15,039
and then you optimize your builds

00:22:13,360 --> 00:22:17,360
and in your particular case you might

00:22:15,039 --> 00:22:18,799
want to order it differently

00:22:17,360 --> 00:22:21,120
like in many applications

00:22:18,799 --> 00:22:23,039
reproducibility

00:22:21,120 --> 00:22:24,159
is perhaps more important and you might

00:22:23,039 --> 00:22:25,440
want to do it earlier

00:22:24,159 --> 00:22:26,960
and once you get good at this like

00:22:25,440 --> 00:22:28,159
you'll actually start interleaving this

00:22:26,960 --> 00:22:30,240
more

00:22:28,159 --> 00:22:31,919
but sort of as a as a map of what you

00:22:30,240 --> 00:22:33,039
need to do and sort of a first pass

00:22:31,919 --> 00:22:36,240
prioritization

00:22:33,039 --> 00:22:36,240
this is a good starting point

00:22:38,080 --> 00:22:42,640
and i've been pointing this out as you

00:22:40,720 --> 00:22:45,840
go but i want to reiterate it

00:22:42,640 --> 00:22:47,679
doctorizing is not just about writing a

00:22:45,840 --> 00:22:49,360
doctor file a build script or docker

00:22:47,679 --> 00:22:51,760
ignore file

00:22:49,360 --> 00:22:53,360
it is also something that involves

00:22:51,760 --> 00:22:54,880
processes and interacts with your

00:22:53,360 --> 00:22:56,880
development processes you have to think

00:22:54,880 --> 00:22:58,400
about how it's going to work with

00:22:56,880 --> 00:23:00,720
things like branches and feature

00:22:58,400 --> 00:23:01,840
branches and also requires you to create

00:23:00,720 --> 00:23:03,360
new processes

00:23:01,840 --> 00:23:04,880
for security updates for dependency

00:23:03,360 --> 00:23:06,159
updates

00:23:04,880 --> 00:23:08,080
and so as in much of software

00:23:06,159 --> 00:23:08,480
development it is important not just to

00:23:08,080 --> 00:23:10,720
get

00:23:08,480 --> 00:23:12,240
the actual artifacts right it's also

00:23:10,720 --> 00:23:13,840
important to think about

00:23:12,240 --> 00:23:16,240
the overall processes and how they

00:23:13,840 --> 00:23:19,200
interact with your organization and your

00:23:16,240 --> 00:23:19,200
organizational goals

00:23:20,000 --> 00:23:23,919
so that's it that's the process and

00:23:22,159 --> 00:23:26,720
that's my talk

00:23:23,919 --> 00:23:27,679
uh so on my website you can find a pros

00:23:26,720 --> 00:23:31,039
version of this talk

00:23:27,679 --> 00:23:34,640
much more expanded um at pythonspeed.com

00:23:31,039 --> 00:23:36,320
products or stacker process um

00:23:34,640 --> 00:23:38,159
and so this sort of goes over the ideas

00:23:36,320 --> 00:23:40,240
in this in a

00:23:38,159 --> 00:23:41,520
longer form you can read i also have a

00:23:40,240 --> 00:23:44,400
free guide uh

00:23:41,520 --> 00:23:44,799
to all the details you need to get right

00:23:44,400 --> 00:23:48,080
so

00:23:44,799 --> 00:23:49,440
security and image size and builds and

00:23:48,080 --> 00:23:51,600
reproducibility

00:23:49,440 --> 00:23:52,559
it's at pythonspeed.com it's a lot of

00:23:51,600 --> 00:23:54,000
articles

00:23:52,559 --> 00:23:56,240
going into a lot of detail about all

00:23:54,000 --> 00:23:57,600
these best practices

00:23:56,240 --> 00:24:00,159
and so you can learn a lot more about

00:23:57,600 --> 00:24:03,760
what you need to do by

00:24:00,159 --> 00:24:06,400
going to these two urls and

00:24:03,760 --> 00:24:08,240
if you have any questions suggestions

00:24:06,400 --> 00:24:10,480
problems

00:24:08,240 --> 00:24:11,679
anything you want to talk about please

00:24:10,480 --> 00:24:13,840
do email me

00:24:11,679 --> 00:24:16,240
or tweet at me and i believe will also

00:24:13,840 --> 00:24:19,840
be a q a session after this

00:24:16,240 --> 00:24:19,840
thank you

00:25:23,200 --> 00:25:25,279

YouTube URL: https://www.youtube.com/watch?v=EC0CSevbt9k


