Title: TALK   Alan Yu, Vasu Bhog   What we learned from Papermill to operationalize notebooks
Publication date: 2021-05-29
Playlist: PyCon US 2021
Description: 
	When you hear about beautiful notebook automation, your first thought usually goes to what Netflix is doing with Jupyter Notebooks. Their work is heavily inspired by nteract's papermill, which allows for the parameterization, execution, and analysis of Jupyter notebooks. Notebook operationalization opens many doors for team's troubleshooting pipelines, and we wanted to learn more from the open source community for how we can work together to empower developers who are on-call. Join us for this code-focused session to hear about our journey of listening and learning to the open source community, and how we used Python to evolve notebook parameterization.
Captions: 
	00:00:04,170 --> 00:00:11,869
[Music]

00:00:14,080 --> 00:00:17,840
welcome everyone to our session what we

00:00:16,400 --> 00:00:20,560
learned from paper mill to

00:00:17,840 --> 00:00:22,000
operationalize notebooks

00:00:20,560 --> 00:00:23,600
to get started let me just start off

00:00:22,000 --> 00:00:26,080
with an introduction on myself

00:00:23,600 --> 00:00:28,080
my name is alan yu i'm a program manager

00:00:26,080 --> 00:00:29,039
from microsoft working on the azure data

00:00:28,080 --> 00:00:31,359
studio team

00:00:29,039 --> 00:00:32,719
and i'm joined today by our engineer

00:00:31,359 --> 00:00:34,719
fosse bogue

00:00:32,719 --> 00:00:36,559
who will be demoing the more interesting

00:00:34,719 --> 00:00:38,320
part of this presentation and we'll be

00:00:36,559 --> 00:00:41,200
showing the actual the code that we've

00:00:38,320 --> 00:00:42,960
been using to build up this experience

00:00:41,200 --> 00:00:44,879
but to get started let's kind of talk

00:00:42,960 --> 00:00:46,000
about the problem that we're trying to

00:00:44,879 --> 00:00:47,280
solve

00:00:46,000 --> 00:00:50,000
and you know when you kind of think

00:00:47,280 --> 00:00:52,320
about your internal teams or just

00:00:50,000 --> 00:00:53,520
businesses in general there's a lot of

00:00:52,320 --> 00:00:55,440
instances where

00:00:53,520 --> 00:00:57,039
you have a team that's dedicated to

00:00:55,440 --> 00:00:58,879
internal troubleshooting

00:00:57,039 --> 00:01:00,160
and as you can imagine there's a lot of

00:00:58,879 --> 00:01:01,600
issues that may have appeared in the

00:01:00,160 --> 00:01:03,520
past so for example

00:01:01,600 --> 00:01:05,760
you may have some text lying around and

00:01:03,520 --> 00:01:06,400
like a word doc or a onenote just lying

00:01:05,760 --> 00:01:08,400
around

00:01:06,400 --> 00:01:09,920
and it's just like you know it's almost

00:01:08,400 --> 00:01:10,240
like you have to know where everything

00:01:09,920 --> 00:01:12,560
is

00:01:10,240 --> 00:01:14,000
there's a system behind it um it's very

00:01:12,560 --> 00:01:14,960
hard to find these things there's no

00:01:14,000 --> 00:01:16,400
version control

00:01:14,960 --> 00:01:18,159
it's really hard to share any of the

00:01:16,400 --> 00:01:19,040
code or results in order to handle this

00:01:18,159 --> 00:01:20,960
troubleshooting

00:01:19,040 --> 00:01:22,720
it's very hard to search for things and

00:01:20,960 --> 00:01:24,240
these are all kind of problems that you

00:01:22,720 --> 00:01:24,880
must want to take a moment to think

00:01:24,240 --> 00:01:26,799
about

00:01:24,880 --> 00:01:28,240
you know this is what exists today and

00:01:26,799 --> 00:01:30,479
how can we

00:01:28,240 --> 00:01:31,759
looking forward how do we improve this

00:01:30,479 --> 00:01:33,840
experience

00:01:31,759 --> 00:01:35,439
and so you know we kind of noticed that

00:01:33,840 --> 00:01:37,119
there were some general patterns that

00:01:35,439 --> 00:01:39,280
were in these kind of buckets as we

00:01:37,119 --> 00:01:41,200
thought of a solution to this

00:01:39,280 --> 00:01:42,720
troubleshooting issue and we realized

00:01:41,200 --> 00:01:43,280
that it came down to these three main

00:01:42,720 --> 00:01:45,040
things

00:01:43,280 --> 00:01:46,479
we want to find a solution that was

00:01:45,040 --> 00:01:48,880
highly interactive

00:01:46,479 --> 00:01:50,320
so that you know things aren't just like

00:01:48,880 --> 00:01:52,799
easily

00:01:50,320 --> 00:01:54,159
outdated very quickly we want to make

00:01:52,799 --> 00:01:56,240
sure that you know anything that we

00:01:54,159 --> 00:01:56,799
share whether it's results or sample

00:01:56,240 --> 00:01:59,439
code

00:01:56,799 --> 00:02:01,040
things like that is very accessible and

00:01:59,439 --> 00:02:02,079
then we also want to make sure that any

00:02:01,040 --> 00:02:03,040
pipeline that we build for

00:02:02,079 --> 00:02:06,079
troubleshooting

00:02:03,040 --> 00:02:07,680
is highly maintainable and so as we kind

00:02:06,079 --> 00:02:10,000
of thought of different solutions

00:02:07,680 --> 00:02:10,959
one thing we discovered was notebooks

00:02:10,000 --> 00:02:12,560
and how we

00:02:10,959 --> 00:02:14,800
realized that this really highly

00:02:12,560 --> 00:02:17,599
interactive document

00:02:14,800 --> 00:02:19,360
is just a really powerful way to be a

00:02:17,599 --> 00:02:20,879
key piece of this pipeline

00:02:19,360 --> 00:02:22,879
and so for those of you who aren't

00:02:20,879 --> 00:02:24,560
familiar with notebooks notebooks are

00:02:22,879 --> 00:02:26,080
simply these in highly interactive

00:02:24,560 --> 00:02:29,599
documents

00:02:26,080 --> 00:02:32,959
that include both code cells

00:02:29,599 --> 00:02:34,640
that you can execute such as like python

00:02:32,959 --> 00:02:36,720
cells for example and they could lead to

00:02:34,640 --> 00:02:38,800
some kind of output but it also is

00:02:36,720 --> 00:02:39,840
accompanied by these rich text cells

00:02:38,800 --> 00:02:42,000
which are powered by

00:02:39,840 --> 00:02:43,519
markdown and by having this deep

00:02:42,000 --> 00:02:45,519
combination you can

00:02:43,519 --> 00:02:47,120
easily be able to have this document

00:02:45,519 --> 00:02:48,400
that you could share with various folks

00:02:47,120 --> 00:02:50,160
whether they need to do

00:02:48,400 --> 00:02:51,760
a little bit more coding or if they

00:02:50,160 --> 00:02:53,360
simply are just looking for the results

00:02:51,760 --> 00:02:53,920
of these notebooks to share off with

00:02:53,360 --> 00:02:56,959
other

00:02:53,920 --> 00:02:59,519
folks on the team and as you can imagine

00:02:56,959 --> 00:03:01,599
um if we were to make notebooks a core

00:02:59,519 --> 00:03:04,000
piece of this troubleshooting pipeline

00:03:01,599 --> 00:03:05,519
this is almost what it would look like

00:03:04,000 --> 00:03:07,280
so let's start off with roger who is

00:03:05,519 --> 00:03:10,000
this data engineer and a dba

00:03:07,280 --> 00:03:11,760
working in this uh working with this

00:03:10,000 --> 00:03:14,000
tool called azure data studio

00:03:11,760 --> 00:03:15,680
and you know it's through azure data to

00:03:14,000 --> 00:03:17,519
you that they can go ahead and create

00:03:15,680 --> 00:03:19,120
this troubleshooting guide notebook

00:03:17,519 --> 00:03:21,440
and then publish these notebooks to a

00:03:19,120 --> 00:03:22,720
github repo so it's very easy to have

00:03:21,440 --> 00:03:24,080
source control behind

00:03:22,720 --> 00:03:25,760
any of the troubleshooting guides that

00:03:24,080 --> 00:03:27,840
are built on there and easily shareable

00:03:25,760 --> 00:03:29,440
with other folks on the team

00:03:27,840 --> 00:03:31,360
and then we think about tim who is on

00:03:29,440 --> 00:03:33,120
the support team where he

00:03:31,360 --> 00:03:34,640
go ahead goes ahead and creates a task

00:03:33,120 --> 00:03:36,480
assigns it to a dba

00:03:34,640 --> 00:03:38,159
and then it triggers these kind of

00:03:36,480 --> 00:03:39,760
actions across

00:03:38,159 --> 00:03:41,519
a certain pipeline and leads to this

00:03:39,760 --> 00:03:44,239
automation where at the end of it

00:03:41,519 --> 00:03:45,760
it actually will create this

00:03:44,239 --> 00:03:47,599
troubleshooting guide notebook

00:03:45,760 --> 00:03:49,840
or it will create an output output

00:03:47,599 --> 00:03:51,440
output file with this notebook

00:03:49,840 --> 00:03:52,879
that can then be shared with other

00:03:51,440 --> 00:03:55,280
people on the team

00:03:52,879 --> 00:03:56,319
such as you know by adding a url to this

00:03:55,280 --> 00:03:58,560
notebook output

00:03:56,319 --> 00:03:59,360
gloria as a dba could then view that

00:03:58,560 --> 00:04:02,640
task and

00:03:59,360 --> 00:04:03,200
also the url to the notebook which they

00:04:02,640 --> 00:04:05,360
could then

00:04:03,200 --> 00:04:06,480
open inside of azure data studio and see

00:04:05,360 --> 00:04:08,080
the results of it

00:04:06,480 --> 00:04:10,239
and you can kind of see that you know in

00:04:08,080 --> 00:04:10,640
this kind of vision notebooks are the

00:04:10,239 --> 00:04:13,680
key

00:04:10,640 --> 00:04:15,599
to this automation and

00:04:13,680 --> 00:04:17,199
touches all across the different folks

00:04:15,599 --> 00:04:18,160
on the team and their various skill sets

00:04:17,199 --> 00:04:20,320
as well

00:04:18,160 --> 00:04:21,199
but in order to kind of build this you

00:04:20,320 --> 00:04:23,120
know really

00:04:21,199 --> 00:04:24,320
wonderful solution you have to start off

00:04:23,120 --> 00:04:26,160
with the building blocks

00:04:24,320 --> 00:04:28,080
and one core piece is this

00:04:26,160 --> 00:04:30,000
parameterization experience

00:04:28,080 --> 00:04:32,400
so parameterization simply in this

00:04:30,000 --> 00:04:34,800
example is ability to be able to pass

00:04:32,400 --> 00:04:35,680
values from a url or from a notebook to

00:04:34,800 --> 00:04:38,639
another notebook

00:04:35,680 --> 00:04:39,919
or even between code cells within a

00:04:38,639 --> 00:04:41,680
notebook itself

00:04:39,919 --> 00:04:43,040
and you know as we kind of thought about

00:04:41,680 --> 00:04:44,639
designing this experience

00:04:43,040 --> 00:04:46,560
with already the notebook experience we

00:04:44,639 --> 00:04:49,280
have in azure data studio

00:04:46,560 --> 00:04:49,759
um you know there's no better place to

00:04:49,280 --> 00:04:52,240
start

00:04:49,759 --> 00:04:53,919
than with open source community and so

00:04:52,240 --> 00:04:55,520
you know as our team has been more and

00:04:53,919 --> 00:04:56,080
more involved with contributing to

00:04:55,520 --> 00:04:58,479
github

00:04:56,080 --> 00:04:59,360
and building more of our tools in open

00:04:58,479 --> 00:05:00,639
source

00:04:59,360 --> 00:05:02,479
we came up with these kind of design

00:05:00,639 --> 00:05:03,600
principles as we were kind of building

00:05:02,479 --> 00:05:05,520
out this experience

00:05:03,600 --> 00:05:07,120
and one was to leverage open source as

00:05:05,520 --> 00:05:09,199
much as possible and there's no reason

00:05:07,120 --> 00:05:12,240
for us to rebuild everything

00:05:09,199 --> 00:05:13,039
on our own on top of that whatever we do

00:05:12,240 --> 00:05:14,320
build custom

00:05:13,039 --> 00:05:16,479
you want to make sure there's backwards

00:05:14,320 --> 00:05:18,080
compatibility with all other jupiter

00:05:16,479 --> 00:05:20,560
viewers out there

00:05:18,080 --> 00:05:22,000
and then finally you know iterate

00:05:20,560 --> 00:05:25,360
quickly so have a crawl

00:05:22,000 --> 00:05:27,360
walk run approach and also make sure to

00:05:25,360 --> 00:05:29,039
work with open source influencer

00:05:27,360 --> 00:05:30,960
influencers out there

00:05:29,039 --> 00:05:33,039
in order to kind of make sure that we're

00:05:30,960 --> 00:05:34,960
not creating anything that will break

00:05:33,039 --> 00:05:36,800
things in the ecosystem

00:05:34,960 --> 00:05:38,000
and of course you know one thing that

00:05:36,800 --> 00:05:39,360
we've realized

00:05:38,000 --> 00:05:41,280
and you know a company that's really

00:05:39,360 --> 00:05:44,160
spearheaded this like netflix

00:05:41,280 --> 00:05:45,759
um is paper mill and so i'm going to

00:05:44,160 --> 00:05:47,360
hand this over to bossy who will go

00:05:45,759 --> 00:05:48,880
into a little bit more detail about

00:05:47,360 --> 00:05:50,479
paper mill

00:05:48,880 --> 00:05:52,080
thanks alan so i'll be discussing the

00:05:50,479 --> 00:05:52,639
parameterization demos that we currently

00:05:52,080 --> 00:05:54,320
support

00:05:52,639 --> 00:05:55,919
as well as up and coming new ideas for

00:05:54,320 --> 00:05:57,680
parameterization

00:05:55,919 --> 00:05:59,840
our main focus for parameterization was

00:05:57,680 --> 00:06:01,759
to become compatible with paper mode

00:05:59,840 --> 00:06:03,600
as well as enhancing the experiences of

00:06:01,759 --> 00:06:05,759
automating and parameterizing notebooks

00:06:03,600 --> 00:06:07,360
in azure data studio first we will look

00:06:05,759 --> 00:06:08,160
at paperwork's approach and how we

00:06:07,360 --> 00:06:10,400
understood

00:06:08,160 --> 00:06:12,560
and leverage their foundations that led

00:06:10,400 --> 00:06:14,160
us to evolve our notebooks

00:06:12,560 --> 00:06:16,240
papermill lets us parametrize and

00:06:14,160 --> 00:06:18,479
execute notebooks in order to

00:06:16,240 --> 00:06:20,479
do that we need to ensure that we follow

00:06:18,479 --> 00:06:22,319
their two fundamental concepts

00:06:20,479 --> 00:06:23,759
tagging a cell with the tag parameters

00:06:22,319 --> 00:06:27,280
indicates that you would like to

00:06:23,759 --> 00:06:28,960
make this notebook to be parameterized

00:06:27,280 --> 00:06:30,479
this will ensure that when you execute

00:06:28,960 --> 00:06:31,440
the notebook using either the papermill

00:06:30,479 --> 00:06:33,520
python api

00:06:31,440 --> 00:06:35,680
or the papermill command line execution

00:06:33,520 --> 00:06:37,759
it will inject the new parameters

00:06:35,680 --> 00:06:38,800
properly after the designated parameter

00:06:37,759 --> 00:06:40,720
cell

00:06:38,800 --> 00:06:42,720
so let's see how this is done in jupyter

00:06:40,720 --> 00:06:45,600
notebook so that we can visually see

00:06:42,720 --> 00:06:46,960
how we tag parameter cells so here we

00:06:45,600 --> 00:06:50,080
have a very simple

00:06:46,960 --> 00:06:51,360
notebook which is x and y and arithmetic

00:06:50,080 --> 00:06:54,000
and print statements

00:06:51,360 --> 00:06:55,919
and now we can really visually see how

00:06:54,000 --> 00:06:58,240
we utilize parameterization

00:06:55,919 --> 00:06:59,680
so here in order to see the tags we go

00:06:58,240 --> 00:07:03,039
to view cell toolbar

00:06:59,680 --> 00:07:03,599
tags and we can actually see that x and

00:07:03,039 --> 00:07:05,680
y

00:07:03,599 --> 00:07:07,599
are stated as the parameters and

00:07:05,680 --> 00:07:10,160
therefore we'll be able to inject new

00:07:07,599 --> 00:07:12,560
values for these specific parameters

00:07:10,160 --> 00:07:13,919
now let's go to azure data studio to

00:07:12,560 --> 00:07:17,199
understand how we

00:07:13,919 --> 00:07:20,400
implemented a very similar concept so

00:07:17,199 --> 00:07:23,680
we did the same conceptualization of

00:07:20,400 --> 00:07:25,599
you know indicating a cell as parameters

00:07:23,680 --> 00:07:27,280
and by doing so all the user will have

00:07:25,599 --> 00:07:28,639
to do is go to the more toggle for this

00:07:27,280 --> 00:07:32,000
specific cell

00:07:28,639 --> 00:07:33,680
and make it a parameter cell so we have

00:07:32,000 --> 00:07:36,479
the exact same content

00:07:33,680 --> 00:07:38,319
exact same tag functionality and now we

00:07:36,479 --> 00:07:39,919
can go ahead and run this notebook and

00:07:38,319 --> 00:07:41,440
see that the addition and multiplication

00:07:39,919 --> 00:07:43,599
is outputted as that

00:07:41,440 --> 00:07:44,800
and now in order to understand that you

00:07:43,599 --> 00:07:46,800
know how

00:07:44,800 --> 00:07:48,479
this looks in the metadata side of the

00:07:46,800 --> 00:07:50,240
notebook we can go ahead and just look

00:07:48,479 --> 00:07:52,879
at it take a quick peek

00:07:50,240 --> 00:07:54,639
and so x and y are stated here and

00:07:52,879 --> 00:07:56,720
within the metadata for that specific

00:07:54,639 --> 00:07:59,039
cell we see it's tagged as parameters

00:07:56,720 --> 00:08:00,400
so therefore when we go ahead and use

00:07:59,039 --> 00:08:03,039
the python api

00:08:00,400 --> 00:08:03,919
execution it will know where to inject

00:08:03,039 --> 00:08:07,280
the parameters

00:08:03,919 --> 00:08:08,479
the newly injected parameters so here

00:08:07,280 --> 00:08:11,120
we're going to use

00:08:08,479 --> 00:08:13,120
the import for papermill and execute

00:08:11,120 --> 00:08:13,440
notebook functionality where we take put

00:08:13,120 --> 00:08:15,759
a

00:08:13,440 --> 00:08:17,680
input path as well as our desired output

00:08:15,759 --> 00:08:19,360
path for that specific notebook

00:08:17,680 --> 00:08:21,280
and then indicate the new parameter

00:08:19,360 --> 00:08:24,000
values that we want to utilize

00:08:21,280 --> 00:08:26,080
so go ahead and run this and then we can

00:08:24,000 --> 00:08:28,560
see that execution has completed and now

00:08:26,080 --> 00:08:30,800
we can open up that new output notebook

00:08:28,560 --> 00:08:32,080
and see visually that the injected

00:08:30,800 --> 00:08:35,039
parameters are stated

00:08:32,080 --> 00:08:37,039
clearly as well as the x and the new x

00:08:35,039 --> 00:08:39,120
and y values

00:08:37,039 --> 00:08:40,640
the parameter cell is still there

00:08:39,120 --> 00:08:43,680
indicating that we had

00:08:40,640 --> 00:08:44,399
a parameterized that notebook from that

00:08:43,680 --> 00:08:46,800
original

00:08:44,399 --> 00:08:48,880
input and the new values for this

00:08:46,800 --> 00:08:50,800
results are all solely based on the new

00:08:48,880 --> 00:08:52,720
injected parameters values

00:08:50,800 --> 00:08:54,000
we can also use the command line

00:08:52,720 --> 00:08:57,120
interface for paper mill

00:08:54,000 --> 00:09:00,320
utilizing paper mold input output dash p

00:08:57,120 --> 00:09:01,279
for individual uh parameters and setting

00:09:00,320 --> 00:09:04,240
the same format

00:09:01,279 --> 00:09:06,399
but we'll get the exact same result so

00:09:04,240 --> 00:09:07,920
we saw incredible potential with paper

00:09:06,399 --> 00:09:10,240
malt and how it can be used for many

00:09:07,920 --> 00:09:12,080
different notebook scenarios

00:09:10,240 --> 00:09:14,320
within azure data studio we not only

00:09:12,080 --> 00:09:17,200
wanted to implement integrate

00:09:14,320 --> 00:09:18,000
a paper more foundational approach but

00:09:17,200 --> 00:09:20,839
we wanted to

00:09:18,000 --> 00:09:22,240
implement new methods to parameterize

00:09:20,839 --> 00:09:25,360
notebooks

00:09:22,240 --> 00:09:28,959
so one of the ways that we actually did

00:09:25,360 --> 00:09:31,360
was utilizing the notebook uri and

00:09:28,959 --> 00:09:32,399
programmatically adding these parameters

00:09:31,360 --> 00:09:34,800
so here

00:09:32,399 --> 00:09:36,640
you can see that this is our ads

00:09:34,800 --> 00:09:39,839
notebook uri handler

00:09:36,640 --> 00:09:40,480
and in order in order to parameterize a

00:09:39,839 --> 00:09:43,519
notebook

00:09:40,480 --> 00:09:46,800
a user would add their specific location

00:09:43,519 --> 00:09:49,279
of their notebook for instance on github

00:09:46,800 --> 00:09:50,240
or a remote location and then in order

00:09:49,279 --> 00:09:52,720
to inject those

00:09:50,240 --> 00:09:53,279
all user would have to do is append this

00:09:52,720 --> 00:09:56,399
query

00:09:53,279 --> 00:09:58,959
uh at the end of that notebook and state

00:09:56,399 --> 00:09:59,680
uh which values that they would would

00:09:58,959 --> 00:10:01,440
like to change

00:09:59,680 --> 00:10:02,880
so here we have the same exact concept

00:10:01,440 --> 00:10:04,959
of x equals one

00:10:02,880 --> 00:10:06,079
ampersand indicating a new parameter

00:10:04,959 --> 00:10:09,279
value and y

00:10:06,079 --> 00:10:09,920
with a new value as well so here we can

00:10:09,279 --> 00:10:12,959
go ahead

00:10:09,920 --> 00:10:15,200
back into azure data studio

00:10:12,959 --> 00:10:16,320
go ahead and see on our uri

00:10:15,200 --> 00:10:19,279
parameterization

00:10:16,320 --> 00:10:20,079
closing our um input notebook so we

00:10:19,279 --> 00:10:22,640
don't have to

00:10:20,079 --> 00:10:23,200
uh worry see if it's actually there or

00:10:22,640 --> 00:10:25,600
not

00:10:23,200 --> 00:10:26,959
and we can actually see our location of

00:10:25,600 --> 00:10:29,920
our github

00:10:26,959 --> 00:10:31,040
notebook as well right and so this

00:10:29,920 --> 00:10:32,079
notebook is something we want to

00:10:31,040 --> 00:10:33,839
parameterize

00:10:32,079 --> 00:10:35,680
so we can go ahead and actually utilize

00:10:33,839 --> 00:10:36,160
that handler pass it in the same way

00:10:35,680 --> 00:10:39,839
into

00:10:36,160 --> 00:10:41,120
your url here and say we want to inject

00:10:39,839 --> 00:10:44,399
the same

00:10:41,120 --> 00:10:46,240
values so go ahead open up uh

00:10:44,399 --> 00:10:48,000
azure data studio it recognizes that

00:10:46,240 --> 00:10:51,360
we're going to open up the same

00:10:48,000 --> 00:10:52,720
uri here we just download that file from

00:10:51,360 --> 00:10:55,760
that location

00:10:52,720 --> 00:10:57,600
and inject that new values based on that

00:10:55,760 --> 00:10:59,360
query at the end

00:10:57,600 --> 00:11:00,640
so here you can clearly see that we did

00:10:59,360 --> 00:11:03,120
the exact same concept

00:11:00,640 --> 00:11:03,760
we can run all the cells see the exact

00:11:03,120 --> 00:11:06,800
same

00:11:03,760 --> 00:11:08,079
values from those results and clearly

00:11:06,800 --> 00:11:09,920
understand that

00:11:08,079 --> 00:11:11,360
we follow papermost foundational

00:11:09,920 --> 00:11:13,279
parameterization but

00:11:11,360 --> 00:11:14,399
incorporated it to leverage what we

00:11:13,279 --> 00:11:16,240
already implemented

00:11:14,399 --> 00:11:18,640
and now what we can also further

00:11:16,240 --> 00:11:18,640
implement

00:11:21,839 --> 00:11:25,600
so from here we really wanted to see how

00:11:24,480 --> 00:11:27,680
we can

00:11:25,600 --> 00:11:30,399
continue on this parameterization

00:11:27,680 --> 00:11:32,240
journey within azure data studio

00:11:30,399 --> 00:11:34,640
where we wanted to tie in all these

00:11:32,240 --> 00:11:36,800
different forms of parameterization

00:11:34,640 --> 00:11:38,480
and implement something that was very

00:11:36,800 --> 00:11:40,640
seamless to the user

00:11:38,480 --> 00:11:42,079
and utilize our components within our

00:11:40,640 --> 00:11:45,040
notebook interface

00:11:42,079 --> 00:11:46,800
and create a simple run experience for

00:11:45,040 --> 00:11:49,839
parameterizing a notebook

00:11:46,800 --> 00:11:51,920
and this is where our new action run

00:11:49,839 --> 00:11:53,519
with parameters comes in

00:11:51,920 --> 00:11:55,200
this new action can parameterize a

00:11:53,519 --> 00:11:58,079
notebook all within this

00:11:55,200 --> 00:11:58,959
azure data studio notebook so we can

00:11:58,079 --> 00:12:02,240
quickly see

00:11:58,959 --> 00:12:03,440
here a demo of what what it kind of

00:12:02,240 --> 00:12:06,639
would look like

00:12:03,440 --> 00:12:10,079
in terms of using this action

00:12:06,639 --> 00:12:13,360
so as we see and as we've shown

00:12:10,079 --> 00:12:16,240
the parameter cell here is just simple

00:12:13,360 --> 00:12:16,800
x and y statement so we can quickly go

00:12:16,240 --> 00:12:19,200
ahead

00:12:16,800 --> 00:12:20,399
and just utilize this functionality in

00:12:19,200 --> 00:12:22,720
this new button

00:12:20,399 --> 00:12:23,760
called run with parameters and it will

00:12:22,720 --> 00:12:26,880
identify

00:12:23,760 --> 00:12:28,880
the parameter cell within the notebook

00:12:26,880 --> 00:12:30,240
and ask the user if they would like to

00:12:28,880 --> 00:12:34,000
change the

00:12:30,240 --> 00:12:35,680
variable and parameter value

00:12:34,000 --> 00:12:37,120
so we're going to say let's change it to

00:12:35,680 --> 00:12:40,399
10 again and y

00:12:37,120 --> 00:12:42,639
to 20. and now quickly execute

00:12:40,399 --> 00:12:44,480
and create that new parameterized

00:12:42,639 --> 00:12:45,279
notebook with the injected parameter

00:12:44,480 --> 00:12:46,959
cell

00:12:45,279 --> 00:12:48,720
all while ensuring that we're

00:12:46,959 --> 00:12:50,959
continuously

00:12:48,720 --> 00:12:53,920
compatible and remaining on that

00:12:50,959 --> 00:12:56,160
structured foundational step of

00:12:53,920 --> 00:12:58,240
inserting this injected parameter cell

00:12:56,160 --> 00:13:00,480
after the parameter

00:12:58,240 --> 00:13:01,360
a cell has been identified in the

00:13:00,480 --> 00:13:05,120
metadata

00:13:01,360 --> 00:13:07,279
so there's quite a bit of uh nuance

00:13:05,120 --> 00:13:08,560
you know of what we've taken from the

00:13:07,279 --> 00:13:11,440
start of paper mill

00:13:08,560 --> 00:13:11,839
to what we have now and so now let's

00:13:11,440 --> 00:13:14,440
let's

00:13:11,839 --> 00:13:15,920
show uh even more advanced example of

00:13:14,440 --> 00:13:19,120
parameterization

00:13:15,920 --> 00:13:20,079
so here we're actually utilizing uh kql

00:13:19,120 --> 00:13:23,279
magic

00:13:20,079 --> 00:13:26,959
which is allows us to run

00:13:23,279 --> 00:13:30,240
analysis using kqo and

00:13:26,959 --> 00:13:33,519
connect to azure data explorer cluster

00:13:30,240 --> 00:13:35,200
so here we can see that this cluster

00:13:33,519 --> 00:13:36,880
specifically and what we're gonna look

00:13:35,200 --> 00:13:40,160
into is storm events

00:13:36,880 --> 00:13:42,959
uh from the sample database

00:13:40,160 --> 00:13:44,959
and uh here we actually stated uh the

00:13:42,959 --> 00:13:45,279
state filter to be georgia so that's

00:13:44,959 --> 00:13:47,680
what

00:13:45,279 --> 00:13:49,680
we're actually gonna be looking at and

00:13:47,680 --> 00:13:51,600
from here we actually ran this notebook

00:13:49,680 --> 00:13:53,839
already since it is a bit long to just

00:13:51,600 --> 00:13:56,959
understand what this notebook contains

00:13:53,839 --> 00:13:58,000
so we load the kql magic we set up the

00:13:56,959 --> 00:14:01,600
connection to

00:13:58,000 --> 00:14:02,000
the cluster and indicate that's the

00:14:01,600 --> 00:14:03,760
sample

00:14:02,000 --> 00:14:06,160
database that we want to actually look

00:14:03,760 --> 00:14:08,160
into and now here i just

00:14:06,160 --> 00:14:09,199
quickly wanted to see what type of data

00:14:08,160 --> 00:14:13,199
we have

00:14:09,199 --> 00:14:15,600
within um this storm events

00:14:13,199 --> 00:14:16,959
and so we can clearly see here the

00:14:15,600 --> 00:14:19,920
different states

00:14:16,959 --> 00:14:20,560
the different event types injuries

00:14:19,920 --> 00:14:23,680
damage

00:14:20,560 --> 00:14:28,160
property you know different items that

00:14:23,680 --> 00:14:30,079
all within this database itself

00:14:28,160 --> 00:14:32,399
and so now we can see there's a bunch of

00:14:30,079 --> 00:14:35,760
those 59 000 storm events

00:14:32,399 --> 00:14:37,040
so we can really get granular towards

00:14:35,760 --> 00:14:39,680
what we want to understand

00:14:37,040 --> 00:14:42,560
so here this is how we actually utilize

00:14:39,680 --> 00:14:45,519
the parameters into our kql query

00:14:42,560 --> 00:14:47,040
all within this notebook so what we have

00:14:45,519 --> 00:14:49,040
to do is just state that

00:14:47,040 --> 00:14:50,720
that state filter that we set to georgia

00:14:49,040 --> 00:14:53,040
is set to this state

00:14:50,720 --> 00:14:53,760
and then that's when we pass it into our

00:14:53,040 --> 00:14:55,839
query

00:14:53,760 --> 00:14:57,519
for kql magic to understand that we're

00:14:55,839 --> 00:15:00,800
only looking for

00:14:57,519 --> 00:15:02,399
storm events of georgia so it seems like

00:15:00,800 --> 00:15:05,920
georgia had quite a bit of

00:15:02,399 --> 00:15:09,360
thunderstorm wind uh drought hail

00:15:05,920 --> 00:15:12,560
and many different other storm events

00:15:09,360 --> 00:15:14,399
we can really chart this even by looking

00:15:12,560 --> 00:15:18,399
at what the data would look like

00:15:14,399 --> 00:15:21,440
on a render chart chart and this is all

00:15:18,399 --> 00:15:23,120
very similar to plotly so this is all

00:15:21,440 --> 00:15:26,560
produced with plotly

00:15:23,120 --> 00:15:29,519
and here we can actually

00:15:26,560 --> 00:15:30,959
granularly just go even further in say

00:15:29,519 --> 00:15:33,920
we only want to look

00:15:30,959 --> 00:15:36,079
closer to certain dates it's all very

00:15:33,920 --> 00:15:38,160
interactive in this approach

00:15:36,079 --> 00:15:39,519
so now let's say we want to go back up

00:15:38,160 --> 00:15:42,320
and

00:15:39,519 --> 00:15:42,880
add a new parameter let's say for a new

00:15:42,320 --> 00:15:44,160
state

00:15:42,880 --> 00:15:46,480
so all we're going to have to actually

00:15:44,160 --> 00:15:49,759
do is indicate within

00:15:46,480 --> 00:15:52,399
uh using our run with parameters action

00:15:49,759 --> 00:15:53,120
what state we actually want to do so

00:15:52,399 --> 00:15:55,279
let's say i

00:15:53,120 --> 00:15:58,880
am currently living in washington state

00:15:55,279 --> 00:15:58,880
so let's do washington

00:15:59,120 --> 00:16:02,560
and now the uh part that we have to do

00:16:01,279 --> 00:16:06,320
here is actually

00:16:02,560 --> 00:16:07,759
we have to rerun um the notebook for it

00:16:06,320 --> 00:16:09,920
to actually be executed

00:16:07,759 --> 00:16:11,279
so it will be just quick you know

00:16:09,920 --> 00:16:14,639
understanding of

00:16:11,279 --> 00:16:16,639
reloading kql magic

00:16:14,639 --> 00:16:17,680
setting up the connection and in order

00:16:16,639 --> 00:16:19,360
to do that we actually have to

00:16:17,680 --> 00:16:21,839
authenticate in our browser

00:16:19,360 --> 00:16:23,440
so it's a very quick and easy just copy

00:16:21,839 --> 00:16:26,480
and paste the code that's already

00:16:23,440 --> 00:16:30,000
pasted in you can sign in with your

00:16:26,480 --> 00:16:31,759
email address that will allow you to

00:16:30,000 --> 00:16:34,959
connect to the custo client

00:16:31,759 --> 00:16:36,480
and then just authenticate there all

00:16:34,959 --> 00:16:39,759
within that

00:16:36,480 --> 00:16:42,800
space for us to leverage this

00:16:39,759 --> 00:16:46,160
uh custo azure data explorer cluster

00:16:42,800 --> 00:16:49,120
and get that data so i authenticated

00:16:46,160 --> 00:16:50,160
um now we get the same kind of

00:16:49,120 --> 00:16:52,560
understanding of the

00:16:50,160 --> 00:16:53,519
data and we can come down here and now

00:16:52,560 --> 00:16:56,000
we can quickly see

00:16:53,519 --> 00:16:56,800
for washington state we had heavy snow

00:16:56,000 --> 00:16:59,360
heavy snow

00:16:56,800 --> 00:17:00,079
and uh during this time period heavy

00:16:59,360 --> 00:17:03,199
wind

00:17:00,079 --> 00:17:05,520
other factors and storm events as well

00:17:03,199 --> 00:17:07,679
and now when we look at the render chart

00:17:05,520 --> 00:17:10,880
and we actually can even compare with

00:17:07,679 --> 00:17:10,880
georgia for example

00:17:11,280 --> 00:17:15,679
and just panning out

00:17:16,640 --> 00:17:22,319
for more understanding so we can go back

00:17:20,160 --> 00:17:23,199
and understand that's kind of the date

00:17:22,319 --> 00:17:26,720
frame

00:17:23,199 --> 00:17:28,400
and see that you know for washington

00:17:26,720 --> 00:17:30,080
state had much less storm

00:17:28,400 --> 00:17:31,520
severe storm events during this time

00:17:30,080 --> 00:17:34,080
period as compared to

00:17:31,520 --> 00:17:36,000
the storm events of georgia so there's a

00:17:34,080 --> 00:17:37,200
lot that we can leverage here with

00:17:36,000 --> 00:17:41,039
parameterization

00:17:37,200 --> 00:17:42,720
quickly quickly parameterize notebooks

00:17:41,039 --> 00:17:44,160
utilizing different formats that we

00:17:42,720 --> 00:17:46,640
already laid out to you

00:17:44,160 --> 00:17:47,520
of paper mills approach using the python

00:17:46,640 --> 00:17:50,799
api

00:17:47,520 --> 00:17:53,919
and command line interface using

00:17:50,799 --> 00:17:58,160
our uri parameterization which you can

00:17:53,919 --> 00:18:00,160
store this actual um notebook and github

00:17:58,160 --> 00:18:01,600
different locations and just call it

00:18:00,160 --> 00:18:04,640
with um

00:18:01,600 --> 00:18:07,919
our azure data studio uh notebook uri

00:18:04,640 --> 00:18:10,720
handler and then now we have this uh

00:18:07,919 --> 00:18:12,320
run with notebooks action so this all

00:18:10,720 --> 00:18:15,679
really ties in

00:18:12,320 --> 00:18:16,400
to how we're continuously looking at

00:18:15,679 --> 00:18:19,200
paper mill

00:18:16,400 --> 00:18:21,520
and started on that framework of

00:18:19,200 --> 00:18:24,400
targeting that cell as parameters

00:18:21,520 --> 00:18:26,400
and then going and uh seeing what more

00:18:24,400 --> 00:18:29,760
implementations we can really do

00:18:26,400 --> 00:18:32,880
to help users integrate and have a more

00:18:29,760 --> 00:18:35,200
ease of use with notebooks

00:18:32,880 --> 00:18:36,400
specifically parameterizing them and

00:18:35,200 --> 00:18:39,600
then executing them

00:18:36,400 --> 00:18:42,720
in automated fashions so

00:18:39,600 --> 00:18:45,440
from here we've developed and integrated

00:18:42,720 --> 00:18:46,480
many different parameterization actions

00:18:45,440 --> 00:18:50,080
as well as

00:18:46,480 --> 00:18:52,559
uh usability that not only

00:18:50,080 --> 00:18:53,520
focuses on the foundations that

00:18:52,559 --> 00:18:57,039
papermill has

00:18:53,520 --> 00:19:00,400
set up for us and leverage those

00:18:57,039 --> 00:19:03,840
to enhance our uh parameterization

00:19:00,400 --> 00:19:06,559
within notebooks for added data studio

00:19:03,840 --> 00:19:07,520
so we shown all of that and now we

00:19:06,559 --> 00:19:10,080
really wanted to

00:19:07,520 --> 00:19:11,120
understand what more and what it could

00:19:10,080 --> 00:19:14,480
be next

00:19:11,120 --> 00:19:17,360
for parameterization so one of our goals

00:19:14,480 --> 00:19:18,880
and our next kind of items that we

00:19:17,360 --> 00:19:20,559
wanted to look at was global

00:19:18,880 --> 00:19:22,640
parameterization

00:19:20,559 --> 00:19:24,080
so parameterizing multiple notebooks

00:19:22,640 --> 00:19:26,160
that are all contained

00:19:24,080 --> 00:19:27,919
in a jupiter book using global

00:19:26,160 --> 00:19:29,679
parameters

00:19:27,919 --> 00:19:31,360
and we really wanted to take this a bit

00:19:29,679 --> 00:19:33,200
further by utilizing you know the

00:19:31,360 --> 00:19:36,559
jupiter books

00:19:33,200 --> 00:19:39,840
open source project as well and creating

00:19:36,559 --> 00:19:42,880
those global parameters to

00:19:39,840 --> 00:19:44,320
continue uh with the paper mills open

00:19:42,880 --> 00:19:46,240
source

00:19:44,320 --> 00:19:47,360
approach and really combine those two

00:19:46,240 --> 00:19:49,840
together

00:19:47,360 --> 00:19:50,559
this will allow us to really take a

00:19:49,840 --> 00:19:53,919
notebook

00:19:50,559 --> 00:19:57,520
take a jupiter book and

00:19:53,919 --> 00:20:00,400
set a set of parameters and open it

00:19:57,520 --> 00:20:02,240
open that notebook that was already know

00:20:00,400 --> 00:20:05,200
knows what those parameters would be

00:20:02,240 --> 00:20:06,880
so let's go ahead and look at what a

00:20:05,200 --> 00:20:08,720
prototype of that would be as we

00:20:06,880 --> 00:20:09,600
continue doing user studies on this as

00:20:08,720 --> 00:20:11,919
well

00:20:09,600 --> 00:20:12,880
so here we have azure data studio and

00:20:11,919 --> 00:20:15,280
we're going to be

00:20:12,880 --> 00:20:18,000
you know opening a new uh jupiter book

00:20:15,280 --> 00:20:20,640
here so we'll click weather analysis

00:20:18,000 --> 00:20:21,200
as we kind of have shown and now we open

00:20:20,640 --> 00:20:23,039
that

00:20:21,200 --> 00:20:24,240
jupiter book as you can see it's a

00:20:23,039 --> 00:20:25,919
different uh

00:20:24,240 --> 00:20:27,760
it's a book here and with many different

00:20:25,919 --> 00:20:30,880
notebooks

00:20:27,760 --> 00:20:32,880
now we'll look uh click on the first

00:20:30,880 --> 00:20:35,760
notebook similar to that of what we just

00:20:32,880 --> 00:20:39,360
tested so the storm weather analysis

00:20:35,760 --> 00:20:42,960
and from here what we wanted to do is

00:20:39,360 --> 00:20:43,840
set this book to look at for all these

00:20:42,960 --> 00:20:45,840
notebooks

00:20:43,840 --> 00:20:47,200
a specific state so we're going to right

00:20:45,840 --> 00:20:49,919
click that book

00:20:47,200 --> 00:20:51,919
and say set as parameters now we can say

00:20:49,919 --> 00:20:53,440
set parameters for jupyter book

00:20:51,919 --> 00:20:55,600
and these are setting the parameters for

00:20:53,440 --> 00:20:57,200
an entire book as indicated

00:20:55,600 --> 00:20:59,280
and all we're going to do is adding the

00:20:57,200 --> 00:21:02,400
state filter in georgia

00:20:59,280 --> 00:21:04,640
and so when we press set now the this

00:21:02,400 --> 00:21:07,840
current notebook that we currently open

00:21:04,640 --> 00:21:10,799
will automatically uh add this uh

00:21:07,840 --> 00:21:11,760
no add this parameter cell as there was

00:21:10,799 --> 00:21:15,440
none

00:21:11,760 --> 00:21:16,000
initially so now we've already seen the

00:21:15,440 --> 00:21:18,480
results for

00:21:16,000 --> 00:21:19,120
georgia and we wanted to test something

00:21:18,480 --> 00:21:21,280
else

00:21:19,120 --> 00:21:22,559
so now we can just go back and use a run

00:21:21,280 --> 00:21:24,400
with parameters action

00:21:22,559 --> 00:21:26,000
instead of georgia we can do let's say

00:21:24,400 --> 00:21:28,960
michigan right

00:21:26,000 --> 00:21:30,000
and that will open up a new uh notebook

00:21:28,960 --> 00:21:32,159
as we just showed

00:21:30,000 --> 00:21:33,679
with the injected parameters so it's all

00:21:32,159 --> 00:21:36,799
a nice seamless

00:21:33,679 --> 00:21:39,919
process from going from a global setting

00:21:36,799 --> 00:21:42,799
to a new run

00:21:39,919 --> 00:21:44,080
for that specific notebook right and we

00:21:42,799 --> 00:21:46,080
can compare those analysis

00:21:44,080 --> 00:21:48,159
as well now let's say we actually wanted

00:21:46,080 --> 00:21:50,400
to just see like you know the other

00:21:48,159 --> 00:21:51,440
annual rainfall so as you can see we

00:21:50,400 --> 00:21:54,799
actually

00:21:51,440 --> 00:21:57,360
still illustrate that the

00:21:54,799 --> 00:21:58,000
global parameters is still set for this

00:21:57,360 --> 00:22:01,200
notebook as

00:21:58,000 --> 00:22:03,440
well so that's what we intend to do and

00:22:01,200 --> 00:22:04,640
we really want to look forward to you

00:22:03,440 --> 00:22:06,400
know getting

00:22:04,640 --> 00:22:08,000
more feedback regarding this approach

00:22:06,400 --> 00:22:09,600
since it's

00:22:08,000 --> 00:22:11,440
we're looking to improve

00:22:09,600 --> 00:22:14,880
parameterization optim

00:22:11,440 --> 00:22:16,960
uh you know automation as a whole

00:22:14,880 --> 00:22:18,000
in order to operationalize these

00:22:16,960 --> 00:22:21,679
notebooks

00:22:18,000 --> 00:22:25,440
for many different cases and so

00:22:21,679 --> 00:22:28,640
uh tying this all back into you know

00:22:25,440 --> 00:22:31,640
a good state was

00:22:28,640 --> 00:22:33,200
continuously implement different

00:22:31,640 --> 00:22:36,000
parameterization

00:22:33,200 --> 00:22:36,880
functionalities that both makes it easy

00:22:36,000 --> 00:22:40,000
for the user

00:22:36,880 --> 00:22:43,600
as well as our notebook environment

00:22:40,000 --> 00:22:44,880
that focuses on parameterization

00:22:43,600 --> 00:22:46,559
these demos illustrate all our

00:22:44,880 --> 00:22:48,400
parameterization efforts and how we

00:22:46,559 --> 00:22:51,120
start off with paper mode compatibility

00:22:48,400 --> 00:22:52,799
and work towards global parameterization

00:22:51,120 --> 00:22:53,520
all within the context of ida data

00:22:52,799 --> 00:22:56,159
studio

00:22:53,520 --> 00:22:57,440
and the paper most open source framework

00:22:56,159 --> 00:23:00,080
and we'll continue to learn and

00:22:57,440 --> 00:23:03,919
implement new ways to operationalize

00:23:00,080 --> 00:23:04,400
notebooks thanks vasu for that wonderful

00:23:03,919 --> 00:23:07,440
demo

00:23:04,400 --> 00:23:09,280
showing off parameterization one thing

00:23:07,440 --> 00:23:10,159
that we really want to emphasize

00:23:09,280 --> 00:23:12,159
throughout this

00:23:10,159 --> 00:23:13,280
presentation of this wonderful work

00:23:12,159 --> 00:23:15,120
we've been working on

00:23:13,280 --> 00:23:16,720
is that whatever we build we want to

00:23:15,120 --> 00:23:17,679
contribute back to the open source

00:23:16,720 --> 00:23:19,760
community

00:23:17,679 --> 00:23:21,360
so even though this is just one area of

00:23:19,760 --> 00:23:23,200
potential collaboration

00:23:21,360 --> 00:23:24,720
we have been working for the last couple

00:23:23,200 --> 00:23:27,520
of years with the jupiter

00:23:24,720 --> 00:23:30,159
interact community with many of the

00:23:27,520 --> 00:23:32,080
maintainers and influencers out there

00:23:30,159 --> 00:23:33,840
and have also presented at other

00:23:32,080 --> 00:23:34,559
conferences like jupiter khan in the

00:23:33,840 --> 00:23:36,640
past

00:23:34,559 --> 00:23:38,159
to really make sure that you know things

00:23:36,640 --> 00:23:39,760
that we would like to see

00:23:38,159 --> 00:23:41,279
that our customers could benefit from

00:23:39,760 --> 00:23:42,240
could also benefit the rest of the open

00:23:41,279 --> 00:23:45,120
source community

00:23:42,240 --> 00:23:45,679
so we've built things like a sql kernel

00:23:45,120 --> 00:23:47,760
that

00:23:45,679 --> 00:23:49,360
has intellisense and syntax highlighting

00:23:47,760 --> 00:23:51,520
and those type of experiences

00:23:49,360 --> 00:23:53,039
and we'd love to make this available for

00:23:51,520 --> 00:23:55,039
the rest of the community one day

00:23:53,039 --> 00:23:56,320
especially through a project like don

00:23:55,039 --> 00:23:58,640
interactive which is all

00:23:56,320 --> 00:24:01,120
mit licensed and and is really working

00:23:58,640 --> 00:24:02,640
on this polyglot story

00:24:01,120 --> 00:24:04,720
but you know this is something we want

00:24:02,640 --> 00:24:06,080
to continue to invest in by working with

00:24:04,720 --> 00:24:08,000
open source community

00:24:06,080 --> 00:24:09,760
and we would just love to kind of just

00:24:08,000 --> 00:24:12,240
share with you just from

00:24:09,760 --> 00:24:13,120
what we learned from paper mill today to

00:24:12,240 --> 00:24:15,440
kind of

00:24:13,120 --> 00:24:16,880
lead to what our customers are

00:24:15,440 --> 00:24:19,200
benefiting from

00:24:16,880 --> 00:24:21,120
going forward and so if you're curious

00:24:19,200 --> 00:24:22,640
about the work that we're doing around

00:24:21,120 --> 00:24:24,559
notebooks and working with open source

00:24:22,640 --> 00:24:25,679
community i encourage you to reach out

00:24:24,559 --> 00:24:27,360
to these different links

00:24:25,679 --> 00:24:29,440
you can check out our project for azure

00:24:27,360 --> 00:24:31,200
data studio on github

00:24:29,440 --> 00:24:32,880
you can also just learn more about our

00:24:31,200 --> 00:24:33,919
notebooks and play around with them

00:24:32,880 --> 00:24:37,120
yourself including

00:24:33,919 --> 00:24:38,559
our dedicated sql kernel and then also

00:24:37,120 --> 00:24:41,679
you can follow us on twitter

00:24:38,559 --> 00:24:44,240
at azure data studio

00:24:41,679 --> 00:24:47,840
and yes thank you so much for your time

00:24:44,240 --> 00:24:47,840
any questions

00:25:45,679 --> 00:25:47,760

YouTube URL: https://www.youtube.com/watch?v=pvaIi0l1GME


