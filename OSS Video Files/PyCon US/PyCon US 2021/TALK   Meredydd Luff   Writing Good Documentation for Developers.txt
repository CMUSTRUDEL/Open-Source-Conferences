Title: TALK   Meredydd Luff   Writing Good Documentation for Developers
Publication date: 2021-05-29
Playlist: PyCon US 2021
Description: 
	If you're building something for developers, you want it to get used. This means your potential users need to find your library, framework, or API. They need to work out whether it's useful for them, learn how to use it, and solve problems they encounter along the way. All these things depend on your developer docs!

Docs aren't just docs: They're your UI, your marketing, and they - not your code - define what your product is.

This talk talk about important functions of your docs that you might not think about, and then some particular pitfalls of documenting things for developers.

Slides: https://drive.google.com/file/d/1K93TsQ4s39X70vvzckPpdke7srzMTXZ6/view
Captions: 
	00:00:04,170 --> 00:00:11,869
[Music]

00:00:14,559 --> 00:00:17,840
hi

00:00:15,280 --> 00:00:19,920
my name is amareth and i'm here to talk

00:00:17,840 --> 00:00:21,760
about writing good documentation for

00:00:19,920 --> 00:00:23,519
developers

00:00:21,760 --> 00:00:26,560
it's a huge subject so i want to

00:00:23,519 --> 00:00:29,359
concentrate on why it's important

00:00:26,560 --> 00:00:30,000
and then what we should be writing and

00:00:29,359 --> 00:00:31,840
then finish

00:00:30,000 --> 00:00:33,840
up by talking about how our users can

00:00:31,840 --> 00:00:36,239
help us improve it

00:00:33,840 --> 00:00:38,480
but it's reasonable to start by asking

00:00:36,239 --> 00:00:41,040
why we care in the first place

00:00:38,480 --> 00:00:43,200
well i care because i'm one of the

00:00:41,040 --> 00:00:45,200
original creators of anvil

00:00:43,200 --> 00:00:47,520
a framework for building full stack web

00:00:45,200 --> 00:00:48,960
apps entirely in python so that's python

00:00:47,520 --> 00:00:51,120
running in the web browser

00:00:48,960 --> 00:00:52,800
python on the server a python user

00:00:51,120 --> 00:00:54,719
interface toolkit

00:00:52,800 --> 00:00:56,079
and we have a company that makes

00:00:54,719 --> 00:00:58,559
development tools so

00:00:56,079 --> 00:01:00,399
an online ide with a drag and drop

00:00:58,559 --> 00:01:02,399
designer for applications built with

00:01:00,399 --> 00:01:04,559
this framework

00:01:02,399 --> 00:01:07,040
and a hosting platform so you don't need

00:01:04,559 --> 00:01:08,240
to know about devops or html or

00:01:07,040 --> 00:01:10,799
javascript

00:01:08,240 --> 00:01:12,880
you can build an interactive application

00:01:10,799 --> 00:01:15,520
and put it on the web even if all you

00:01:12,880 --> 00:01:18,159
know is python

00:01:15,520 --> 00:01:20,320
so obviously i'm pretty keen on

00:01:18,159 --> 00:01:21,600
developers having a good and productive

00:01:20,320 --> 00:01:25,119
time with the project

00:01:21,600 --> 00:01:27,360
i've built and so should you be because

00:01:25,119 --> 00:01:29,759
whether we are building developer tools

00:01:27,360 --> 00:01:31,600
or an api for a commercial product

00:01:29,759 --> 00:01:34,159
or an open source project we're sticking

00:01:31,600 --> 00:01:35,920
up on github and pi pi

00:01:34,159 --> 00:01:37,759
we're putting that effort in because we

00:01:35,920 --> 00:01:40,240
want it to get used

00:01:37,759 --> 00:01:41,040
and so we want developers to find our

00:01:40,240 --> 00:01:43,840
project

00:01:41,040 --> 00:01:45,360
to discover that it exists we want them

00:01:43,840 --> 00:01:47,119
to decide that it's useful

00:01:45,360 --> 00:01:48,720
that it solves a problem they actually

00:01:47,119 --> 00:01:50,479
have

00:01:48,720 --> 00:01:52,960
we want them to be able to learn how to

00:01:50,479 --> 00:01:55,040
use it and to be able to solve the

00:01:52,960 --> 00:01:57,360
inevitable problems they will have along

00:01:55,040 --> 00:01:59,280
the way

00:01:57,360 --> 00:02:01,439
and we traditionally think of

00:01:59,280 --> 00:02:02,880
documentation in terms of these latter

00:02:01,439 --> 00:02:05,360
two

00:02:02,880 --> 00:02:06,640
but developer documentation is in fact

00:02:05,360 --> 00:02:09,360
vital to this whole

00:02:06,640 --> 00:02:13,040
journey because your documentation is a

00:02:09,360 --> 00:02:15,760
lot more than just learning material

00:02:13,040 --> 00:02:17,840
your documentation is content marketing

00:02:15,760 --> 00:02:19,920
if you're solving a real problem

00:02:17,840 --> 00:02:21,599
that people are having out in the world

00:02:19,920 --> 00:02:22,000
then those people will be opening their

00:02:21,599 --> 00:02:25,840
magic

00:02:22,000 --> 00:02:29,040
search box and typing how do i do

00:02:25,840 --> 00:02:31,040
specifically what your project does and

00:02:29,040 --> 00:02:33,120
your documentation is literally the

00:02:31,040 --> 00:02:37,680
answer to that question

00:02:33,120 --> 00:02:40,000
and so they should be able to find it

00:02:37,680 --> 00:02:41,120
however they find your project the

00:02:40,000 --> 00:02:43,360
developer's next

00:02:41,120 --> 00:02:45,599
task is to decide whether it's any use

00:02:43,360 --> 00:02:49,519
to them and that means understanding

00:02:45,599 --> 00:02:52,400
what your project actually is

00:02:49,519 --> 00:02:54,160
what can it do what is its sweet spot

00:02:52,400 --> 00:02:55,840
what are its other capabilities what are

00:02:54,160 --> 00:02:58,640
its limitations

00:02:55,840 --> 00:03:00,959
and often the best way to find this out

00:02:58,640 --> 00:03:02,720
is to look at the documentation

00:03:00,959 --> 00:03:04,159
which means that for new users your

00:03:02,720 --> 00:03:07,599
documentation describes

00:03:04,159 --> 00:03:07,599
what your project is

00:03:08,640 --> 00:03:14,000
so it matters a lot whether a new user

00:03:11,760 --> 00:03:15,760
clicking onto your documentation

00:03:14,000 --> 00:03:17,440
and scanning it or looking at the table

00:03:15,760 --> 00:03:19,680
of contents

00:03:17,440 --> 00:03:20,720
if they see a good summary of what your

00:03:19,680 --> 00:03:24,080
project does

00:03:20,720 --> 00:03:25,680
and where its sweet spot is that's going

00:03:24,080 --> 00:03:26,480
to enable them to make a much better

00:03:25,680 --> 00:03:28,799
decision

00:03:26,480 --> 00:03:29,920
than if they see a paragraph of

00:03:28,799 --> 00:03:32,239
introduction

00:03:29,920 --> 00:03:33,680
one code sample of the common case

00:03:32,239 --> 00:03:34,560
because you've assumed everything else

00:03:33,680 --> 00:03:37,200
is obvious

00:03:34,560 --> 00:03:40,239
and then three pages of discussion of

00:03:37,200 --> 00:03:42,080
weird edge cases

00:03:40,239 --> 00:03:43,599
this is the table of contents of the

00:03:42,080 --> 00:03:45,760
anvil manual

00:03:43,599 --> 00:03:46,799
i actually think this one isn't bad it

00:03:45,760 --> 00:03:49,599
goes editor

00:03:46,799 --> 00:03:50,640
user interface client code server code

00:03:49,599 --> 00:03:53,920
storing data

00:03:50,640 --> 00:03:55,840
deployment but that's not a bad summary

00:03:53,920 --> 00:03:57,760
and of course i bring this up because we

00:03:55,840 --> 00:04:00,159
got this catastrophically wrong

00:03:57,760 --> 00:04:01,680
first time round because the first

00:04:00,159 --> 00:04:04,480
version of our documentation

00:04:01,680 --> 00:04:05,760
was structured like our code base and as

00:04:04,480 --> 00:04:08,799
it happens

00:04:05,760 --> 00:04:09,439
in the anvil code base uh database

00:04:08,799 --> 00:04:12,840
storage

00:04:09,439 --> 00:04:14,159
and sending and receiving email and user

00:04:12,840 --> 00:04:15,840
authentication and

00:04:14,159 --> 00:04:17,680
integration with google and facebook and

00:04:15,840 --> 00:04:19,919
microsoft and stripe and so on

00:04:17,680 --> 00:04:21,519
they are all the same sort of plugin

00:04:19,919 --> 00:04:23,840
type object

00:04:21,519 --> 00:04:25,759
and so the documentation for all of

00:04:23,840 --> 00:04:28,880
those was stuck next to each other off

00:04:25,759 --> 00:04:31,840
in a folder to the side which was

00:04:28,880 --> 00:04:33,520
very unhelpful for new users because if

00:04:31,840 --> 00:04:34,479
you're exploring this framework for the

00:04:33,520 --> 00:04:36,400
first time

00:04:34,479 --> 00:04:37,759
does it store data is a much more

00:04:36,400 --> 00:04:40,080
important question

00:04:37,759 --> 00:04:41,199
than what third-party services does it

00:04:40,080 --> 00:04:43,600
integrate with

00:04:41,199 --> 00:04:44,800
so lesson learned we restructured our

00:04:43,600 --> 00:04:46,560
documentation

00:04:44,800 --> 00:04:48,400
so that the table of contents would

00:04:46,560 --> 00:04:51,280
provide an accurate summary of what it

00:04:48,400 --> 00:04:51,280
is and what it does

00:04:54,320 --> 00:04:58,400
so now a developer has found your

00:04:56,400 --> 00:05:00,080
project described it's useful

00:04:58,400 --> 00:05:01,759
decided that it's useful they're

00:05:00,080 --> 00:05:03,360
settling down to learn it and solve

00:05:01,759 --> 00:05:05,199
problems and now of course your

00:05:03,360 --> 00:05:06,639
documentation is going to get a real

00:05:05,199 --> 00:05:10,160
workout

00:05:06,639 --> 00:05:12,960
and this is where developer software

00:05:10,160 --> 00:05:14,720
differs from most software because for

00:05:12,960 --> 00:05:18,160
developers your documentation

00:05:14,720 --> 00:05:18,160
is your user interface

00:05:18,240 --> 00:05:21,440
most software is built kind of like a

00:05:20,639 --> 00:05:23,520
car

00:05:21,440 --> 00:05:25,520
the person using it spends all of their

00:05:23,520 --> 00:05:27,280
time staring at the dashboard

00:05:25,520 --> 00:05:30,320
and the manual is half forgotten in a

00:05:27,280 --> 00:05:30,320
glove box somewhere

00:05:30,560 --> 00:05:36,080
but for developer tools it's different

00:05:34,000 --> 00:05:37,680
if somebody is developing code against

00:05:36,080 --> 00:05:39,600
your api

00:05:37,680 --> 00:05:40,960
then they will spend their time staring

00:05:39,600 --> 00:05:44,080
at their code

00:05:40,960 --> 00:05:46,240
and your documentation and that is it

00:05:44,080 --> 00:05:47,199
so if you happen to have the skills or

00:05:46,240 --> 00:05:48,800
resources

00:05:47,199 --> 00:05:51,120
it's probably worth making it look

00:05:48,800 --> 00:05:54,000
decent

00:05:51,120 --> 00:05:55,199
so here is the documentation index for

00:05:54,000 --> 00:05:58,000
twilio which is an

00:05:55,199 --> 00:05:59,680
api for driving telephony so voice and

00:05:58,000 --> 00:06:01,440
sms and that kind of thing

00:05:59,680 --> 00:06:02,720
and you can see it looks kind of like a

00:06:01,440 --> 00:06:05,360
second home page

00:06:02,720 --> 00:06:07,680
because they want to make it clear what

00:06:05,360 --> 00:06:11,360
it is and what it does

00:06:07,680 --> 00:06:11,360
it is their user interface

00:06:12,240 --> 00:06:16,880
okay so we've talked about some of the

00:06:14,639 --> 00:06:19,199
roles of our documentation

00:06:16,880 --> 00:06:20,400
let's move on to talking about what we

00:06:19,199 --> 00:06:22,800
should be writing

00:06:20,400 --> 00:06:24,560
because of course not all documentation

00:06:22,800 --> 00:06:27,120
is alike

00:06:24,560 --> 00:06:29,199
and a tutorial is not the same thing as

00:06:27,120 --> 00:06:31,759
a reference doc

00:06:29,199 --> 00:06:32,479
a very clever man by the name of daniele

00:06:31,759 --> 00:06:34,240
prachita

00:06:32,479 --> 00:06:36,800
has actually come up with a framework

00:06:34,240 --> 00:06:39,199
for categorizing documentation

00:06:36,800 --> 00:06:40,080
he puts documentation into four

00:06:39,199 --> 00:06:43,360
categories

00:06:40,080 --> 00:06:46,319
so you've got the tutorials which are

00:06:43,360 --> 00:06:48,960
the step-by-step guides to your project

00:06:46,319 --> 00:06:51,199
you've got the explanations which are

00:06:48,960 --> 00:06:54,639
the discursive discussions

00:06:51,199 --> 00:06:56,479
about how and why it works as it does

00:06:54,639 --> 00:06:58,160
you've got the how-to guides the

00:06:56,479 --> 00:07:00,479
step-by-step guides

00:06:58,160 --> 00:07:01,199
to getting a particular real world task

00:07:00,479 --> 00:07:02,400
done

00:07:01,199 --> 00:07:04,479
and then you've got the reference

00:07:02,400 --> 00:07:06,880
documentation the dry but

00:07:04,479 --> 00:07:09,280
comprehensive description of everything

00:07:06,880 --> 00:07:11,440
it does

00:07:09,280 --> 00:07:12,960
and danielle would actually make a

00:07:11,440 --> 00:07:15,440
pretty good management consultant i

00:07:12,960 --> 00:07:16,319
think because he's even got a 2x2 matrix

00:07:15,440 --> 00:07:18,160
going on

00:07:16,319 --> 00:07:20,080
you've got the tutorials and

00:07:18,160 --> 00:07:20,720
explanations you use when studying the

00:07:20,080 --> 00:07:22,880
project

00:07:20,720 --> 00:07:24,240
versus the how-to guides and reference

00:07:22,880 --> 00:07:25,360
you use when you're trying to get

00:07:24,240 --> 00:07:27,120
something specific

00:07:25,360 --> 00:07:29,919
done and then you've got the

00:07:27,120 --> 00:07:32,240
step-by-step tutorials and how-to guides

00:07:29,919 --> 00:07:34,240
versus the more theoretical explanations

00:07:32,240 --> 00:07:37,680
and references

00:07:34,240 --> 00:07:40,880
and it's a handy framework you can read

00:07:37,680 --> 00:07:44,639
more about it at diataxis.fr

00:07:40,880 --> 00:07:47,520
but i am inherently suspicious

00:07:44,639 --> 00:07:49,120
of anything that fits too neatly into a

00:07:47,520 --> 00:07:51,440
two by two matrix

00:07:49,120 --> 00:07:52,720
and in this case i think the biggest

00:07:51,440 --> 00:07:54,800
problems down here

00:07:52,720 --> 00:07:56,400
in the reference documentation because

00:07:54,800 --> 00:07:58,319
this framework is trying to cram

00:07:56,400 --> 00:08:00,879
too many different things into that

00:07:58,319 --> 00:08:00,879
category

00:08:02,080 --> 00:08:05,680
let me explain so this according to this

00:08:04,800 --> 00:08:07,120
framework

00:08:05,680 --> 00:08:09,039
reference guides are technical

00:08:07,120 --> 00:08:09,919
descriptions of the machinery and how to

00:08:09,039 --> 00:08:12,720
operate it

00:08:09,919 --> 00:08:14,800
well that sounds good it sounds like we

00:08:12,720 --> 00:08:17,520
want those

00:08:14,800 --> 00:08:18,639
but it also says reference guys describe

00:08:17,520 --> 00:08:21,360
the subject

00:08:18,639 --> 00:08:21,919
describe the software itself apis

00:08:21,360 --> 00:08:25,680
classes

00:08:21,919 --> 00:08:28,800
functions and so on and how to use them

00:08:25,680 --> 00:08:31,840
now we clearly want this as well but

00:08:28,800 --> 00:08:34,959
can one piece of documentation really

00:08:31,840 --> 00:08:35,599
fill both of these needs i don't think

00:08:34,959 --> 00:08:37,279
so

00:08:35,599 --> 00:08:39,039
i'm going to call this stuff reference

00:08:37,279 --> 00:08:41,760
documentation and this stuff

00:08:39,039 --> 00:08:43,680
api documentation and they are not the

00:08:41,760 --> 00:08:47,120
same thing

00:08:43,680 --> 00:08:50,000
to illustrate why let's use an example

00:08:47,120 --> 00:08:52,080
so let's say i have written a unit

00:08:50,000 --> 00:08:52,800
testing library and i want to document

00:08:52,080 --> 00:08:56,000
it

00:08:52,800 --> 00:08:58,480
so like most unit testing libraries uh

00:08:56,000 --> 00:09:00,560
it has a concept of fixtures so code

00:08:58,480 --> 00:09:01,279
that runs before the test to set up the

00:09:00,560 --> 00:09:02,640
environment

00:09:01,279 --> 00:09:05,200
and then you run the tests and then you

00:09:02,640 --> 00:09:07,040
run some tear down code afterwards

00:09:05,200 --> 00:09:08,720
now if we're going to describe the

00:09:07,040 --> 00:09:10,560
mechanism and how to the machinery and

00:09:08,720 --> 00:09:15,120
how to operate it

00:09:10,560 --> 00:09:17,680
then we need to describe this sequence

00:09:15,120 --> 00:09:20,959
we need to tell the story of how these

00:09:17,680 --> 00:09:20,959
components work together

00:09:21,600 --> 00:09:27,839
by contrast api documentation

00:09:24,800 --> 00:09:31,360
describes code objects it describes

00:09:27,839 --> 00:09:33,600
classes functions commands

00:09:31,360 --> 00:09:34,480
and so everything you write in your api

00:09:33,600 --> 00:09:37,839
documentation

00:09:34,480 --> 00:09:37,839
is about a code object

00:09:39,680 --> 00:09:43,040
now this doesn't leave much space for

00:09:41,279 --> 00:09:46,560
storytelling if

00:09:43,040 --> 00:09:47,440
we were to document our unit testing

00:09:46,560 --> 00:09:50,480
library

00:09:47,440 --> 00:09:52,880
and all we had was api documentation

00:09:50,480 --> 00:09:54,160
where would we describe this setup test

00:09:52,880 --> 00:09:56,320
teardown sequence

00:09:54,160 --> 00:09:57,920
would we put it in the api docs for the

00:09:56,320 --> 00:10:00,480
setup decorator

00:09:57,920 --> 00:10:01,519
for the test functionality for the tear

00:10:00,480 --> 00:10:03,360
down functions

00:10:01,519 --> 00:10:06,240
would we try and copy and paste it into

00:10:03,360 --> 00:10:06,240
all of these places

00:10:06,640 --> 00:10:12,000
there's just no good place in api

00:10:09,040 --> 00:10:15,120
documentation to tell the story

00:10:12,000 --> 00:10:17,440
and if we try to cram this reference

00:10:15,120 --> 00:10:18,880
documentation into the shape of api

00:10:17,440 --> 00:10:21,680
documentation

00:10:18,880 --> 00:10:23,279
we'll end up with what i call javadoc

00:10:21,680 --> 00:10:26,079
disease

00:10:23,279 --> 00:10:26,959
now this is slightly unfair because

00:10:26,079 --> 00:10:29,680
javadoc

00:10:26,959 --> 00:10:30,399
is awesome it is the badass great

00:10:29,680 --> 00:10:35,279
grandma

00:10:30,399 --> 00:10:35,279
of every modern api documentation tool

00:10:35,760 --> 00:10:40,959
javadoc came out in 1995 and

00:10:38,959 --> 00:10:42,000
the world has not been the same since it

00:10:40,959 --> 00:10:44,480
lets you write

00:10:42,000 --> 00:10:46,880
your documentation like this so what we

00:10:44,480 --> 00:10:49,920
have here is a function definition

00:10:46,880 --> 00:10:50,959
preceded by a block comment and that

00:10:49,920 --> 00:10:54,240
comment contains

00:10:50,959 --> 00:10:55,279
some text and also some machine readable

00:10:54,240 --> 00:10:56,959
tags

00:10:55,279 --> 00:10:59,120
to describe the parameters and the

00:10:56,959 --> 00:11:02,320
return value and so on

00:10:59,120 --> 00:11:03,839
and a program called javadoc will crawl

00:11:02,320 --> 00:11:06,240
over your code base

00:11:03,839 --> 00:11:08,560
parsing these comments and also the

00:11:06,240 --> 00:11:12,480
function definitions that follow them

00:11:08,560 --> 00:11:16,399
and generating clean consistent

00:11:12,480 --> 00:11:19,600
easy to navigate html api documentation

00:11:16,399 --> 00:11:22,160
it really is great uh

00:11:19,600 --> 00:11:23,920
it makes it so much easier to write

00:11:22,160 --> 00:11:26,320
documentation

00:11:23,920 --> 00:11:28,880
because you just comment your code in a

00:11:26,320 --> 00:11:30,480
slightly structured way

00:11:28,880 --> 00:11:32,000
it makes it much easier to keep the

00:11:30,480 --> 00:11:34,320
documentation up to date

00:11:32,000 --> 00:11:36,640
because you can change those comments

00:11:34,320 --> 00:11:39,279
alongside the code

00:11:36,640 --> 00:11:40,000
and because of javadoc for a very long

00:11:39,279 --> 00:11:42,399
time

00:11:40,000 --> 00:11:43,680
the average java library was much better

00:11:42,399 --> 00:11:46,480
documented than almost

00:11:43,680 --> 00:11:46,480
anything else

00:11:46,880 --> 00:11:50,959
so it was a great success but the

00:11:49,040 --> 00:11:52,959
problem with this great success

00:11:50,959 --> 00:11:55,680
is that it crowded out other forms of

00:11:52,959 --> 00:11:58,639
documentation

00:11:55,680 --> 00:11:59,120
and even today if you look at a library

00:11:58,639 --> 00:12:02,880
written

00:11:59,120 --> 00:12:05,440
in java it's pretty likely that

00:12:02,880 --> 00:12:06,639
all or nearly all of its documentation

00:12:05,440 --> 00:12:10,160
will be javadoc

00:12:06,639 --> 00:12:12,720
which is to say all api documentation

00:12:10,160 --> 00:12:13,839
and so you end up with something like

00:12:12,720 --> 00:12:16,480
this

00:12:13,839 --> 00:12:19,120
this is the javadoc for a library that

00:12:16,480 --> 00:12:21,120
parses command line arguments

00:12:19,120 --> 00:12:23,519
and it is perfectly good api

00:12:21,120 --> 00:12:24,399
documentation it lists the 15 classes in

00:12:23,519 --> 00:12:26,160
this package

00:12:24,399 --> 00:12:27,839
and you can click through on any one of

00:12:26,160 --> 00:12:30,639
them and find out its functions

00:12:27,839 --> 00:12:31,120
and their arguments and return values

00:12:30,639 --> 00:12:33,440
but

00:12:31,120 --> 00:12:35,360
how do these classes work together which

00:12:33,440 --> 00:12:38,399
ones call which ones

00:12:35,360 --> 00:12:42,079
we don't know this is api documentation

00:12:38,399 --> 00:12:44,079
there is nowhere to tell that story

00:12:42,079 --> 00:12:46,399
actually this is a pretty well designed

00:12:44,079 --> 00:12:48,800
library and there is one class

00:12:46,399 --> 00:12:50,720
that you can instantiate and it does

00:12:48,800 --> 00:12:53,760
pretty much everything you need for it

00:12:50,720 --> 00:12:55,920
for you it is this one

00:12:53,760 --> 00:12:58,079
did you spot it of course you didn't

00:12:55,920 --> 00:12:59,200
this is api documentation there was

00:12:58,079 --> 00:13:02,320
nowhere

00:12:59,200 --> 00:13:05,440
no good place to represent that

00:13:02,320 --> 00:13:05,440
important information

00:13:05,600 --> 00:13:12,320
so api documentation and reference

00:13:10,399 --> 00:13:14,320
documentation are different things and

00:13:12,320 --> 00:13:15,760
they belong as different top level

00:13:14,320 --> 00:13:18,320
categories when you're thinking about

00:13:15,760 --> 00:13:20,639
your documentation

00:13:18,320 --> 00:13:22,880
reference documentation describes

00:13:20,639 --> 00:13:26,240
systems that describes the machinery

00:13:22,880 --> 00:13:30,079
api documentation describes code objects

00:13:26,240 --> 00:13:33,519
a class a function a command

00:13:30,079 --> 00:13:36,560
reference docs tell a story setup test

00:13:33,519 --> 00:13:39,680
teardown api documentation

00:13:36,560 --> 00:13:41,519
describes one code object alone so

00:13:39,680 --> 00:13:43,040
you can go and look up the api

00:13:41,519 --> 00:13:45,279
documentation for the

00:13:43,040 --> 00:13:47,279
setup decorator and find everything

00:13:45,279 --> 00:13:48,480
about how to call it and what it does in

00:13:47,279 --> 00:13:51,199
isolation

00:13:48,480 --> 00:13:52,240
because that's the point reference

00:13:51,199 --> 00:13:54,160
documentation

00:13:52,240 --> 00:13:56,560
should be structured logically according

00:13:54,160 --> 00:13:59,040
to what your project does

00:13:56,560 --> 00:14:00,399
api documentation is structured

00:13:59,040 --> 00:14:03,839
automatically because it should be

00:14:00,399 --> 00:14:03,839
generated from your code

00:14:06,079 --> 00:14:11,040
so i put them as two

00:14:09,199 --> 00:14:12,240
separate categories of your

00:14:11,040 --> 00:14:15,600
documentation

00:14:12,240 --> 00:14:17,360
and we have quite a few categories now

00:14:15,600 --> 00:14:18,880
and there's a lot of documentation to

00:14:17,360 --> 00:14:20,560
write so

00:14:18,880 --> 00:14:23,040
let's think about how they can work

00:14:20,560 --> 00:14:23,040
together

00:14:23,760 --> 00:14:30,639
so it's very unlikely for

00:14:26,800 --> 00:14:31,760
a user to read your api documentation

00:14:30,639 --> 00:14:34,800
from beginning to end

00:14:31,760 --> 00:14:36,480
users generally don't do that but it's

00:14:34,800 --> 00:14:37,920
actually pretty unlikely for a user to

00:14:36,480 --> 00:14:40,079
read all of your tutorials from

00:14:37,920 --> 00:14:42,399
beginning to end either

00:14:40,079 --> 00:14:44,000
your user is on a journey and that

00:14:42,399 --> 00:14:46,000
journey is going to take them through

00:14:44,000 --> 00:14:47,600
several different sorts of documentation

00:14:46,000 --> 00:14:49,760
most likely

00:14:47,600 --> 00:14:51,519
here's an example of such a journey so a

00:14:49,760 --> 00:14:52,639
user starts by wondering what they

00:14:51,519 --> 00:14:54,320
should use

00:14:52,639 --> 00:14:56,959
and they run across a blog post saying

00:14:54,320 --> 00:14:59,440
hey this project's pretty good

00:14:56,959 --> 00:15:01,360
so they go to your project and try to

00:14:59,440 --> 00:15:02,560
work out how they can use it for this

00:15:01,360 --> 00:15:05,760
task

00:15:02,560 --> 00:15:08,560
there's a how-to guide for that

00:15:05,760 --> 00:15:10,160
now they're really digging in and they

00:15:08,560 --> 00:15:11,839
want to modify one of their function

00:15:10,160 --> 00:15:12,480
calls they want to know what arguments

00:15:11,839 --> 00:15:14,480
it takes

00:15:12,480 --> 00:15:17,040
well that's clearly a job for the api

00:15:14,480 --> 00:15:19,600
documentation

00:15:17,040 --> 00:15:20,639
and you can see they're sort of steadily

00:15:19,600 --> 00:15:22,480
zooming in

00:15:20,639 --> 00:15:24,880
to the more fine-grained and specific

00:15:22,480 --> 00:15:28,480
documentation here

00:15:24,880 --> 00:15:31,120
but here's another journey a user starts

00:15:28,480 --> 00:15:32,880
wondering how do i do such and such so

00:15:31,120 --> 00:15:34,800
they plug that question into google and

00:15:32,880 --> 00:15:40,480
land on a how-to guide remember

00:15:34,800 --> 00:15:42,320
docs are content marketing this looks

00:15:40,480 --> 00:15:45,360
cool but the next question is how does

00:15:42,320 --> 00:15:47,519
that work and of course

00:15:45,360 --> 00:15:50,720
that is the story that's told by your

00:15:47,519 --> 00:15:50,720
reference documentation

00:15:51,600 --> 00:15:55,360
they read a little bit of this and

00:15:53,120 --> 00:15:55,759
decide yes that this is something that's

00:15:55,360 --> 00:15:58,880
worth

00:15:55,759 --> 00:15:59,680
learning properly and so they do a

00:15:58,880 --> 00:16:02,959
step-by-step

00:15:59,680 --> 00:16:05,920
overall tutorial and again this is a

00:16:02,959 --> 00:16:07,680
perfectly legitimate journey

00:16:05,920 --> 00:16:09,199
but you can see they're not just zooming

00:16:07,680 --> 00:16:12,480
in they're zooming out

00:16:09,199 --> 00:16:14,399
as well and we want to let users take

00:16:12,480 --> 00:16:16,079
whatever journey they need to through

00:16:14,399 --> 00:16:18,480
our documentation

00:16:16,079 --> 00:16:19,279
the easiest way to do this of course is

00:16:18,480 --> 00:16:21,519
hyperlinks

00:16:19,279 --> 00:16:23,680
just link from any sort of documentation

00:16:21,519 --> 00:16:26,399
to any other sort of documentation

00:16:23,680 --> 00:16:26,959
that's covering the same subject so if

00:16:26,399 --> 00:16:29,120
you

00:16:26,959 --> 00:16:30,399
touch on a topic in a very didactic

00:16:29,120 --> 00:16:32,079
how-to guide

00:16:30,399 --> 00:16:34,320
link to the reference documentation so

00:16:32,079 --> 00:16:36,160
they can find out how it works

00:16:34,320 --> 00:16:37,920
but when you're talking about a feature

00:16:36,160 --> 00:16:40,800
in the reference documentation

00:16:37,920 --> 00:16:41,519
link to a relative to a related tutorial

00:16:40,800 --> 00:16:44,720
so they can

00:16:41,519 --> 00:16:46,320
zoom out if they need to now links

00:16:44,720 --> 00:16:48,000
aren't the only way to do this

00:16:46,320 --> 00:16:49,360
it can be quite handy to put some of

00:16:48,000 --> 00:16:50,160
these some of these types of

00:16:49,360 --> 00:16:53,839
documentation

00:16:50,160 --> 00:16:56,000
next to each other so anvil has

00:16:53,839 --> 00:16:58,320
a built-in library for building

00:16:56,000 --> 00:16:59,920
applications that do user authentication

00:16:58,320 --> 00:17:01,680
and this is the section of the manual

00:16:59,920 --> 00:17:04,160
about that feature

00:17:01,680 --> 00:17:04,799
and the first two pages here are

00:17:04,160 --> 00:17:07,520
actually

00:17:04,799 --> 00:17:08,160
mini tutorials and then the rest are

00:17:07,520 --> 00:17:11,439
reference

00:17:08,160 --> 00:17:12,319
about how this feature works now to be

00:17:11,439 --> 00:17:14,319
clear

00:17:12,319 --> 00:17:15,839
none of these pages are trying to be

00:17:14,319 --> 00:17:17,919
tutorial and reference

00:17:15,839 --> 00:17:19,199
at once because that's just not going to

00:17:17,919 --> 00:17:21,760
work

00:17:19,199 --> 00:17:23,280
but by putting them next to each other

00:17:21,760 --> 00:17:26,079
we can make it easy to

00:17:23,280 --> 00:17:29,360
zoom in and zoom out to follow whatever

00:17:26,079 --> 00:17:29,360
journey the user needs to take

00:17:31,120 --> 00:17:36,080
so we've got a few different forms of

00:17:34,000 --> 00:17:39,600
documentation

00:17:36,080 --> 00:17:42,960
and there's obviously a lot to do

00:17:39,600 --> 00:17:43,919
and it can be hard to work out what you

00:17:42,960 --> 00:17:47,120
should be working on

00:17:43,919 --> 00:17:49,679
next and so i would like to finish up

00:17:47,120 --> 00:17:51,039
by talking about the best way to work

00:17:49,679 --> 00:17:54,240
that work that out

00:17:51,039 --> 00:17:57,280
which is of course to talk to your users

00:17:54,240 --> 00:17:59,760
because if you listen to your users

00:17:57,280 --> 00:18:01,600
you will hear where your documentation

00:17:59,760 --> 00:18:03,600
most needs improvement

00:18:01,600 --> 00:18:04,720
they might not always say it in as many

00:18:03,600 --> 00:18:06,160
words but

00:18:04,720 --> 00:18:08,080
if you're having a conversation with

00:18:06,160 --> 00:18:10,320
them you will know now

00:18:08,080 --> 00:18:11,200
obviously the easiest way to do this is

00:18:10,320 --> 00:18:14,480
in person

00:18:11,200 --> 00:18:14,960
this is my colleague bridget helping a

00:18:14,480 --> 00:18:18,240
user

00:18:14,960 --> 00:18:20,400
last time we could have pycon in person

00:18:18,240 --> 00:18:21,360
i desperately miss it i cannot wait to

00:18:20,400 --> 00:18:24,080
be back

00:18:21,360 --> 00:18:25,679
but even when conferences are running in

00:18:24,080 --> 00:18:28,160
person

00:18:25,679 --> 00:18:30,640
this is not very scalable so you'll want

00:18:28,160 --> 00:18:33,840
to do stuff online too

00:18:30,640 --> 00:18:36,080
we have a forum uh discourse

00:18:33,840 --> 00:18:38,240
is free it's open source and it's

00:18:36,080 --> 00:18:38,880
actually really easy to set up and host

00:18:38,240 --> 00:18:41,200
yourself

00:18:38,880 --> 00:18:42,080
so i would recommend it but if you don't

00:18:41,200 --> 00:18:45,280
want that hassle

00:18:42,080 --> 00:18:47,919
then stack overflow works as well

00:18:45,280 --> 00:18:48,480
or you could set up a slack or a discord

00:18:47,919 --> 00:18:52,240
instance

00:18:48,480 --> 00:18:54,080
actually no please don't use slack

00:18:52,240 --> 00:18:56,799
the community is closed and the

00:18:54,080 --> 00:18:57,840
conversation is ephemeral and that is a

00:18:56,799 --> 00:19:00,960
problem

00:18:57,840 --> 00:19:04,480
because every time a developer asks

00:19:00,960 --> 00:19:07,919
how to use your project that is a bug

00:19:04,480 --> 00:19:11,600
report in your documentation

00:19:07,919 --> 00:19:15,280
and every time that question is

00:19:11,600 --> 00:19:18,880
answered in a public searchable place

00:19:15,280 --> 00:19:21,120
that's a patch one answer

00:19:18,880 --> 00:19:23,200
can help any user who gets stuck on the

00:19:21,120 --> 00:19:25,679
same question

00:19:23,200 --> 00:19:26,559
even better because this process is

00:19:25,679 --> 00:19:29,039
driven

00:19:26,559 --> 00:19:29,760
by questions from your users these

00:19:29,039 --> 00:19:32,640
patches

00:19:29,760 --> 00:19:35,679
will naturally gravitate towards the

00:19:32,640 --> 00:19:38,640
holes in your existing documentation

00:19:35,679 --> 00:19:39,919
and if you're using a platform that has

00:19:38,640 --> 00:19:41,919
voting such as

00:19:39,919 --> 00:19:43,360
a discourse with its likes or stack

00:19:41,919 --> 00:19:46,160
overflows up voting

00:19:43,360 --> 00:19:47,919
then you'll even get some numerical idea

00:19:46,160 --> 00:19:48,880
of which of these patches are really

00:19:47,919 --> 00:19:50,880
really urgent

00:19:48,880 --> 00:19:52,720
need to go upstream into your mainline

00:19:50,880 --> 00:19:56,480
documentation

00:19:52,720 --> 00:19:59,200
of course not every question needs to go

00:19:56,480 --> 00:20:01,280
upstream like that some questions are

00:19:59,200 --> 00:20:03,520
just too obscure

00:20:01,280 --> 00:20:06,080
and some of them are too tangential to

00:20:03,520 --> 00:20:09,440
what your project is really about

00:20:06,080 --> 00:20:12,880
but that's okay because if your

00:20:09,440 --> 00:20:13,919
q a is public and searchable then it

00:20:12,880 --> 00:20:18,000
forms

00:20:13,919 --> 00:20:18,000
another pillar of your documentation

00:20:18,559 --> 00:20:24,480
and your documentation becomes almost

00:20:21,600 --> 00:20:26,320
self-healing as the patches gravitate to

00:20:24,480 --> 00:20:28,480
the right places

00:20:26,320 --> 00:20:31,600
and the long tail of obscure questions

00:20:28,480 --> 00:20:31,600
takes care of itself

00:20:32,000 --> 00:20:36,320
but i have now made an absolute dog's

00:20:34,400 --> 00:20:37,280
breakfast of danielle's beautiful

00:20:36,320 --> 00:20:39,200
diagram

00:20:37,280 --> 00:20:41,520
so i think it might be best if i stop

00:20:39,200 --> 00:20:41,520
here

00:20:42,559 --> 00:20:48,480
i want to leave you with the headlines

00:20:45,760 --> 00:20:50,000
your documentation is your user

00:20:48,480 --> 00:20:52,720
interface

00:20:50,000 --> 00:20:54,559
it is your marketing and it is the

00:20:52,720 --> 00:20:56,640
definition of your product

00:20:54,559 --> 00:20:57,760
for a new user who hasn't heard about

00:20:56,640 --> 00:21:02,240
you which is of course

00:20:57,760 --> 00:21:04,720
almost everybody so please act like it

00:21:02,240 --> 00:21:06,799
especially if this is a commercial

00:21:04,720 --> 00:21:09,280
project

00:21:06,799 --> 00:21:10,640
it's worth thinking about the fact that

00:21:09,280 --> 00:21:12,880
developer documentation

00:21:10,640 --> 00:21:16,240
matters much closer to the top of the

00:21:12,880 --> 00:21:17,600
funnel than you might think

00:21:16,240 --> 00:21:20,080
and when you are writing developer

00:21:17,600 --> 00:21:22,240
documentation think about what type of

00:21:20,080 --> 00:21:24,799
doc you are writing

00:21:22,240 --> 00:21:26,480
remember that api docs are not reference

00:21:24,799 --> 00:21:28,480
docs

00:21:26,480 --> 00:21:30,320
and talk to your users talk to them

00:21:28,480 --> 00:21:31,760
somewhere public and searchable

00:21:30,320 --> 00:21:34,080
because they will help you fill in the

00:21:31,760 --> 00:21:34,080
gaps

00:21:34,320 --> 00:21:38,000
thank you very much for watching and i

00:21:36,080 --> 00:21:45,840
very much look forward to meeting you in

00:21:38,000 --> 00:21:45,840
the question and answer session

00:22:45,520 --> 00:22:47,600

YouTube URL: https://www.youtube.com/watch?v=eWaWvUhpseM


