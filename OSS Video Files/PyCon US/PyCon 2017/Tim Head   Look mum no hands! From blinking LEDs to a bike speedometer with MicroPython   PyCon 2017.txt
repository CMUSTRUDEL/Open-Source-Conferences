Title: Tim Head   Look mum no hands! From blinking LEDs to a bike speedometer with MicroPython   PyCon 2017
Publication date: 2017-05-21
Playlist: PyCon 2017
Description: 
	"Speaker: Tim Head

In this talk I will show you how to use a micro-controller to build a wifi enabled speedometer for your bike, using MicroPython. And some hardware. And a bike (maybe). I will introduce you to the world of MicroPython: a python distribution that runs on micro-controllers. Micro-controllers are small computers that are all around us: in cars, TVs, and your internet connected fridge. We will start with making LEDs blink, then serve webpages, build an interrupt handler and finally put it all together to make a wifi enabled speedometer for a bike.


Slides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides"
Captions: 
	00:00:00,149 --> 00:00:06,450
good afternoon everyone our next speaker

00:00:03,210 --> 00:00:09,389
is Tim head and the title of his talk is

00:00:06,450 --> 00:00:11,730
look mom no hands from blinking LEDs to

00:00:09,389 --> 00:00:14,410
a bike speedometer with microphone so

00:00:11,730 --> 00:00:20,900
please give a warm welcome to Tim head

00:00:14,410 --> 00:00:25,019
[Applause]

00:00:20,900 --> 00:00:27,720
hi my name is Tim and hopefully we will

00:00:25,019 --> 00:00:30,150
at the end of this thirty minutes you

00:00:27,720 --> 00:00:34,140
will understand why there's a bike at

00:00:30,150 --> 00:00:37,110
the front here hopefully also because

00:00:34,140 --> 00:00:41,000
this involves lots of live demos nothing

00:00:37,110 --> 00:00:45,719
will go wrong if it does then please

00:00:41,000 --> 00:00:50,039
help me as much as you can so I will

00:00:45,719 --> 00:00:53,840
talk about how you can use micro Python

00:00:50,039 --> 00:00:58,020
and a microcontroller to build a

00:00:53,840 --> 00:00:59,699
speedometer for your bike and because

00:00:58,020 --> 00:01:02,640
this reminds me of my youth then I

00:00:59,699 --> 00:01:04,680
titled the talk look mom no hands by a

00:01:02,640 --> 00:01:07,979
promise I will not cycle without any

00:01:04,680 --> 00:01:10,560
hands so how did I get started with this

00:01:07,979 --> 00:01:13,530
about a year ago I listened to a talk

00:01:10,560 --> 00:01:15,689
about micro Python in the local Python

00:01:13,530 --> 00:01:19,110
meetup and I was so impressed and

00:01:15,689 --> 00:01:22,710
thought wow I need to I need to try this

00:01:19,110 --> 00:01:25,380
out myself and so I went out and ordered

00:01:22,710 --> 00:01:27,420
some components and the first thing I

00:01:25,380 --> 00:01:31,409
did I think one really one of the first

00:01:27,420 --> 00:01:35,009
projects I did was this and I think more

00:01:31,409 --> 00:01:37,740
people should do this themselves and

00:01:35,009 --> 00:01:39,810
just to give you an idea I know nothing

00:01:37,740 --> 00:01:43,549
about electronics I know nothing about

00:01:39,810 --> 00:01:47,549
microcontrollers I spend my days writing

00:01:43,549 --> 00:01:52,229
machine learning software so I'm really

00:01:47,549 --> 00:01:54,270
a software guy so yeah as I said what we

00:01:52,229 --> 00:01:57,689
will do today is build one of these guys

00:01:54,270 --> 00:02:01,890
slightly more MVP this is what you can

00:01:57,689 --> 00:02:03,719
find on Aliexpress and I have one of

00:02:01,890 --> 00:02:05,850
these when I was a kid this was one of

00:02:03,719 --> 00:02:09,330
the coolest gadgets you could have for

00:02:05,850 --> 00:02:11,640
your bike and its main purpose was to

00:02:09,330 --> 00:02:12,670
tell you how fast you had gone down the

00:02:11,640 --> 00:02:14,980
local

00:02:12,670 --> 00:02:16,870
Hill and you could compare it to your

00:02:14,980 --> 00:02:18,459
friends and then they would probably

00:02:16,870 --> 00:02:20,140
check you know do you have any scratches

00:02:18,459 --> 00:02:23,319
on Yale though is also did you cheat by

00:02:20,140 --> 00:02:26,140
falling off and the way it works it has

00:02:23,319 --> 00:02:28,750
a little display and it has on the

00:02:26,140 --> 00:02:32,140
right-hand side a little Center that you

00:02:28,750 --> 00:02:33,720
attach to your fork and your wheel and

00:02:32,140 --> 00:02:36,790
then every time the wheel goes around

00:02:33,720 --> 00:02:40,540
you count that has gone round once and

00:02:36,790 --> 00:02:43,989
from that you can calculate the speed so

00:02:40,540 --> 00:02:46,569
microcontrollers they are everywhere

00:02:43,989 --> 00:02:49,890
around us so I think in your telephone

00:02:46,569 --> 00:02:52,209
in your car and your remote control

00:02:49,890 --> 00:02:55,209
literally everywhere there will be a

00:02:52,209 --> 00:02:57,760
microcontroller these days and they are

00:02:55,209 --> 00:03:00,299
more or less full-featured computers so

00:02:57,760 --> 00:03:04,569
they have a CPU to have RAM

00:03:00,299 --> 00:03:07,870
however they usually have very little

00:03:04,569 --> 00:03:11,739
processing power and very little amount

00:03:07,870 --> 00:03:14,170
of memory so that's good because they

00:03:11,739 --> 00:03:16,299
use very little power so you can drive

00:03:14,170 --> 00:03:18,250
one of these off a coin cell battery so

00:03:16,299 --> 00:03:23,440
you don't need to bring a USB power

00:03:18,250 --> 00:03:25,000
device and this also means that usually

00:03:23,440 --> 00:03:27,390
you program these in something like

00:03:25,000 --> 00:03:29,709
assembler or C and that has all the

00:03:27,390 --> 00:03:32,109
advantages and disadvantages of

00:03:29,709 --> 00:03:33,760
programming stuff in C so you know you

00:03:32,109 --> 00:03:36,519
write your program on your laptop you

00:03:33,760 --> 00:03:38,440
compile it tells you made typos you fix

00:03:36,519 --> 00:03:42,130
the type as you compile it again you

00:03:38,440 --> 00:03:43,810
copy it on to your microcontroller and

00:03:42,130 --> 00:03:45,670
you try and run it and it gets stuck

00:03:43,810 --> 00:03:48,220
somewhere and you essentially have no

00:03:45,670 --> 00:03:49,930
idea how and where it got stuck and you

00:03:48,220 --> 00:03:55,350
try and figure out some way to do the

00:03:49,930 --> 00:04:00,900
debugging but it's quite tedious and I

00:03:55,350 --> 00:04:03,100
think for for the hobbyists the Arduino

00:04:00,900 --> 00:04:06,069
15 years ago or something like this

00:04:03,100 --> 00:04:08,140
really started microcontrollers for

00:04:06,069 --> 00:04:11,380
normal people because it's heavy keep it

00:04:08,140 --> 00:04:14,560
fairly accessible the downside is I

00:04:11,380 --> 00:04:16,329
think it has a 16 megahertz clock and an

00:04:14,560 --> 00:04:19,780
amount of memory measured in kilobytes

00:04:16,329 --> 00:04:21,849
so you cannot get python to run on this

00:04:19,780 --> 00:04:23,830
no matter I think there are some people

00:04:21,849 --> 00:04:24,820
who did try and they succeeded to some

00:04:23,830 --> 00:04:27,220
extent

00:04:24,820 --> 00:04:29,200
but for normal people it's essentially

00:04:27,220 --> 00:04:33,150
impossible to get Python running on one

00:04:29,200 --> 00:04:36,040
of these guys so then a few years ago

00:04:33,150 --> 00:04:39,340
what microcontrollers haven't gotten a

00:04:36,040 --> 00:04:42,520
lot more powerful and a lot more memory

00:04:39,340 --> 00:04:46,440
still not a lot a lot more so this is

00:04:42,520 --> 00:04:51,010
the esp8266 and it's extremely popular

00:04:46,440 --> 00:04:52,990
and I think the the number one reason

00:04:51,010 --> 00:04:57,120
for why it's so popular is it has Wi-Fi

00:04:52,990 --> 00:05:00,280
built in so the little squiggly area a

00:04:57,120 --> 00:05:03,190
little squiggly thing that you can see

00:05:00,280 --> 00:05:06,040
is the area for the Wi-Fi and it has a

00:05:03,190 --> 00:05:09,580
massive CPU that runs at 80 megahertz

00:05:06,040 --> 00:05:14,080
and it has a few megabytes of memory but

00:05:09,580 --> 00:05:18,790
this is enough to run a stripped-down

00:05:14,080 --> 00:05:21,130
version of Python so I think two years

00:05:18,790 --> 00:05:23,850
ago roughly damien george got bored of

00:05:21,130 --> 00:05:26,740
doing string theory and thought well

00:05:23,850 --> 00:05:29,620
let's find out how hard it can be to put

00:05:26,740 --> 00:05:32,770
python on microcontrollers and it's a

00:05:29,620 --> 00:05:36,220
reimplementation of c python it's open

00:05:32,770 --> 00:05:39,580
source it's MIT license so you can use

00:05:36,220 --> 00:05:40,590
it forever what forever whatever you

00:05:39,580 --> 00:05:43,240
want to do with it

00:05:40,590 --> 00:05:46,960
you can also contribute to it which is

00:05:43,240 --> 00:05:49,480
also great and they've implemented a

00:05:46,960 --> 00:05:52,450
large part of the standard library so

00:05:49,480 --> 00:05:54,670
you do get this batteries included field

00:05:52,450 --> 00:05:57,580
that we like about Python and the best

00:05:54,670 --> 00:05:59,680
part about it is it has a referal or an

00:05:57,580 --> 00:06:01,870
interactive prompt so now you can

00:05:59,680 --> 00:06:04,030
develop software in the way that most

00:06:01,870 --> 00:06:07,540
people who do software development with

00:06:04,030 --> 00:06:09,550
Python do it by you know writing a

00:06:07,540 --> 00:06:11,980
little bit of code trying out seeing

00:06:09,550 --> 00:06:16,150
white breaks and you know modifying it

00:06:11,980 --> 00:06:17,440
as you go along so I will show you so

00:06:16,150 --> 00:06:20,410
this is the first part where it can go

00:06:17,440 --> 00:06:24,250
wrong because it's a live demo I'll show

00:06:20,410 --> 00:06:29,980
you how you can do that so you open a

00:06:24,250 --> 00:06:32,470
terminal and then you do the thing that

00:06:29,980 --> 00:06:34,870
every speaker so if you're not nervous

00:06:32,470 --> 00:06:37,000
already when you're giving a talk a

00:06:34,870 --> 00:06:37,350
prime way to make yourself nervous is to

00:06:37,000 --> 00:06:39,660
have a

00:06:37,350 --> 00:06:43,590
camera pointing at your face like on the

00:06:39,660 --> 00:06:47,550
big screen but this little trick means

00:06:43,590 --> 00:06:50,250
you can actually see the device so this

00:06:47,550 --> 00:06:52,530
is what it looks like and you can see

00:06:50,250 --> 00:06:56,490
it's plugged in with a black cable on

00:06:52,530 --> 00:06:58,500
black background and all all this cable

00:06:56,490 --> 00:07:02,520
does is deliver power and transmit

00:06:58,500 --> 00:07:06,750
characters so my expensive laptop has

00:07:02,520 --> 00:07:09,660
become a dumb terminal so you connect to

00:07:06,750 --> 00:07:13,080
it with your favorite term line me later

00:07:09,660 --> 00:07:15,720
I use screen and when you connect then

00:07:13,080 --> 00:07:18,000
and you power cycle it you're greeted

00:07:15,720 --> 00:07:20,070
with a bunch of garbage and then

00:07:18,000 --> 00:07:22,380
something which looks very familiar to

00:07:20,070 --> 00:07:30,720
people who use Python and you can just

00:07:22,380 --> 00:07:34,080
start doing maths you can print just as

00:07:30,720 --> 00:07:38,360
you would in normal Python if you're

00:07:34,080 --> 00:07:42,030
using Python 3 you can also do maths

00:07:38,360 --> 00:07:44,310
like this which to most of us is not

00:07:42,030 --> 00:07:45,330
particularly impressive but if you're if

00:07:44,310 --> 00:07:47,580
you come from a microcontroller

00:07:45,330 --> 00:07:49,050
background the fact that you can divide

00:07:47,580 --> 00:07:53,250
two integers and get a floating-point

00:07:49,050 --> 00:07:56,430
number is something that is not you know

00:07:53,250 --> 00:07:59,700
is somewhat impressive and you can also

00:07:56,430 --> 00:08:01,410
do big numbers and you can do somewhat

00:07:59,700 --> 00:08:05,280
bigger numbers and you can do very big

00:08:01,410 --> 00:08:07,590
numbers so you know maths is easy on

00:08:05,280 --> 00:08:10,320
these things and if you need to do more

00:08:07,590 --> 00:08:13,500
math then you import the math module and

00:08:10,320 --> 00:08:16,020
if you don't remember what's in the math

00:08:13,500 --> 00:08:19,230
module then you type math dot and then

00:08:16,020 --> 00:08:23,720
you press tab and you get tab completion

00:08:19,230 --> 00:08:29,300
on your microcontroller so if we do

00:08:23,720 --> 00:08:29,300
scroll of 2 to the power of 10 that's 32

00:08:39,360 --> 00:08:46,990
okay so what's in an esp8266 you saw a

00:08:44,860 --> 00:08:49,959
little picture of it before on the video

00:08:46,990 --> 00:08:53,259
this is a still picture that doesn't

00:08:49,959 --> 00:08:55,029
wobble on the left-hand side there's a

00:08:53,259 --> 00:08:59,920
plug where as I said you deliver power

00:08:55,029 --> 00:09:02,470
and serial port then the actual

00:08:59,920 --> 00:09:06,009
microcontroller is the stuff underneath

00:09:02,470 --> 00:09:08,259
that gray cover so everything around it

00:09:06,009 --> 00:09:13,029
is actually just there to support it so

00:09:08,259 --> 00:09:16,509
it turns USB into actual serial it

00:09:13,029 --> 00:09:18,850
converts voltages stuff like this so

00:09:16,509 --> 00:09:20,559
there's also to LEDs built onto the

00:09:18,850 --> 00:09:23,410
board which is very nice you can use it

00:09:20,559 --> 00:09:25,930
to write your actual first hello world

00:09:23,410 --> 00:09:29,259
program on the microcontroller but you

00:09:25,930 --> 00:09:32,199
can also use it to indicate status and

00:09:29,259 --> 00:09:33,939
things like this and then as I said

00:09:32,199 --> 00:09:36,610
before the squiggly thing has nothing to

00:09:33,939 --> 00:09:40,120
do with Python this is the Wi-Fi aerial

00:09:36,610 --> 00:09:42,459
and that really makes a very nice piece

00:09:40,120 --> 00:09:43,990
of kit because you can suddenly do all

00:09:42,459 --> 00:09:48,160
sorts of things which are connected to

00:09:43,990 --> 00:09:50,019
the Internet and then the big difference

00:09:48,160 --> 00:09:51,699
between microcontrollers and normal

00:09:50,019 --> 00:09:53,920
computers is that they have a whole

00:09:51,699 --> 00:09:56,339
bunch of these GPIO pins and their

00:09:53,920 --> 00:09:58,809
general purpose input output pins and

00:09:56,339 --> 00:10:01,449
that's a complicated way of saying these

00:09:58,809 --> 00:10:03,970
are the pins to which you hook up your

00:10:01,449 --> 00:10:07,930
temperature centers your switches your

00:10:03,970 --> 00:10:08,740
LEDs your servo motors whatever you want

00:10:07,930 --> 00:10:11,529
yeah

00:10:08,740 --> 00:10:13,300
via these pins is how you interact with

00:10:11,529 --> 00:10:17,290
the real world and that's what most

00:10:13,300 --> 00:10:20,439
people use microcontrollers for so the

00:10:17,290 --> 00:10:24,670
GPIO pin is a sophisticated three-way

00:10:20,439 --> 00:10:28,329
switch and two of the states the high

00:10:24,670 --> 00:10:31,569
and the low is what you use if you want

00:10:28,329 --> 00:10:33,939
to control some peripheral so you set it

00:10:31,569 --> 00:10:38,290
to high which sends a logical high

00:10:33,939 --> 00:10:40,480
signal or one or three volts to whatever

00:10:38,290 --> 00:10:43,709
is connected or you set it to low which

00:10:40,480 --> 00:10:46,809
means zero or you set it to the middle

00:10:43,709 --> 00:10:49,689
setting which is input which is what you

00:10:46,809 --> 00:10:51,429
use if you want to sense what is

00:10:49,689 --> 00:10:52,700
connected so for example if you can

00:10:51,429 --> 00:10:55,070
connect a thermistor

00:10:52,700 --> 00:10:57,590
then you would use the input setting to

00:10:55,070 --> 00:10:59,720
sense the voltage which would tell you

00:10:57,590 --> 00:11:04,490
what the temperature is that you're

00:10:59,720 --> 00:11:05,960
sensing and so the esp8266 has a whole

00:11:04,490 --> 00:11:10,490
bunch of them and you can control them

00:11:05,960 --> 00:11:13,100
from software and so because the real

00:11:10,490 --> 00:11:15,770
hello world of microcontrollers is

00:11:13,100 --> 00:11:22,010
making LEDs blink I'll show you the how

00:11:15,770 --> 00:11:25,250
to do that so to talk to all these pins

00:11:22,010 --> 00:11:31,850
on the board you import a module called

00:11:25,250 --> 00:11:33,470
machine and then machine dot pin and now

00:11:31,850 --> 00:11:35,030
you need to know which pin you want to

00:11:33,470 --> 00:11:37,100
address so I happen to know that one of

00:11:35,030 --> 00:11:39,140
the LEDs is connected to the second pin

00:11:37,100 --> 00:11:41,930
but this is something you look up in the

00:11:39,140 --> 00:11:45,110
in the documentation and then you tell

00:11:41,930 --> 00:11:47,960
it that you would like to have this pin

00:11:45,110 --> 00:11:55,460
in the output mode because we want to

00:11:47,960 --> 00:11:59,330
control an LED so you can see there's

00:11:55,460 --> 00:12:01,700
now a bright blue dot on on the on the

00:11:59,330 --> 00:12:04,970
chip here so it's just over there

00:12:01,700 --> 00:12:11,570
and if you want to change whether it's

00:12:04,970 --> 00:12:13,430
on or not then you can set the basically

00:12:11,570 --> 00:12:18,860
you can set where the switch is so now

00:12:13,430 --> 00:12:22,100
the LED is off and if we do now then it

00:12:18,860 --> 00:12:24,170
comes back on and you can keep going

00:12:22,100 --> 00:12:25,970
back and forwards like this and it

00:12:24,170 --> 00:12:29,150
changes the color of that or the

00:12:25,970 --> 00:12:31,550
brightness of the LED and that's kind of

00:12:29,150 --> 00:12:39,230
boring so what you would want to really

00:12:31,550 --> 00:12:42,020
do is something like this so actually we

00:12:39,230 --> 00:12:45,140
we will automate it my finger gets bored

00:12:42,020 --> 00:12:48,470
of going up and down so we'll the loop

00:12:45,140 --> 00:12:50,570
and for that we need the time module so

00:12:48,470 --> 00:12:57,350
we can do some sleep between switching

00:12:50,570 --> 00:13:01,930
the pins of the LED so we sleep half a

00:12:57,350 --> 00:13:01,930
second and then we do

00:13:02,350 --> 00:13:06,180
this and we sleep again

00:13:12,780 --> 00:13:21,360
so you will see the LED comes on it goes

00:13:17,070 --> 00:13:24,120
off and it goes on and goes off and this

00:13:21,360 --> 00:13:32,640
is what people do as their real hello

00:13:24,120 --> 00:13:34,110
world because it proves to you and

00:13:32,640 --> 00:13:36,060
everybody else that you can interact

00:13:34,110 --> 00:13:45,120
with the real world via the power of

00:13:36,060 --> 00:13:48,870
software so I promise to you I would

00:13:45,120 --> 00:13:50,250
explain why there's a bike here so we

00:13:48,870 --> 00:13:52,440
were going to build a bike computer

00:13:50,250 --> 00:13:54,990
right so one thing we need to build a

00:13:52,440 --> 00:13:57,090
bike computer is some way to send how

00:13:54,990 --> 00:13:58,500
often the wheel has gone around because

00:13:57,090 --> 00:14:01,200
we will use that to figure out how fast

00:13:58,500 --> 00:14:04,980
we're going then we need a little bit of

00:14:01,200 --> 00:14:07,140
math as well to convert that into an

00:14:04,980 --> 00:14:08,670
actual speed and distance and then we

00:14:07,140 --> 00:14:12,630
need a display to somehow show the

00:14:08,670 --> 00:14:15,360
information so for the switch one thing

00:14:12,630 --> 00:14:18,030
that I found in the starter kit that I

00:14:15,360 --> 00:14:20,550
bought was a reed switch which is a

00:14:18,030 --> 00:14:23,460
fancy name for the thing that most of us

00:14:20,550 --> 00:14:26,370
know from our home alarm system as what

00:14:23,460 --> 00:14:28,260
keeps burglars out because it detects

00:14:26,370 --> 00:14:31,410
whether or not your door is open or shut

00:14:28,260 --> 00:14:33,570
so these are two parts of this switch

00:14:31,410 --> 00:14:36,510
one of them is a magnet and one of them

00:14:33,570 --> 00:14:39,560
is a switch which is activated by the

00:14:36,510 --> 00:14:41,700
magnet so with this we will get a

00:14:39,560 --> 00:14:47,070
switching signal every time the wheel

00:14:41,700 --> 00:14:49,560
goes around then in my previous life I

00:14:47,070 --> 00:14:52,740
was a physicist so I did a little bit of

00:14:49,560 --> 00:14:55,650
math to work out how to convert them the

00:14:52,740 --> 00:14:59,790
number of wheel revolutions and the time

00:14:55,650 --> 00:15:02,250
between wheel revolutions into a speed

00:14:59,790 --> 00:15:07,080
and distance so you should trust me that

00:15:02,250 --> 00:15:08,850
is it correct so distance is the number

00:15:07,080 --> 00:15:11,670
of times the wheel has turned times the

00:15:08,850 --> 00:15:14,610
circumference of the wheel which for my

00:15:11,670 --> 00:15:16,890
road bike is 2.11 meters as every road

00:15:14,610 --> 00:15:19,290
like this noise for this bike I think

00:15:16,890 --> 00:15:21,360
it's slightly different and then once

00:15:19,290 --> 00:15:22,890
you know the distance or the

00:15:21,360 --> 00:15:25,050
circumference of the wheel then you just

00:15:22,890 --> 00:15:26,250
keep track of the Delta T's or the time

00:15:25,050 --> 00:15:27,840
between switches

00:15:26,250 --> 00:15:30,030
and that tells you how fast you're going

00:15:27,840 --> 00:15:33,120
which if your scientist meters per

00:15:30,030 --> 00:15:36,140
seconds is great if your normal human

00:15:33,120 --> 00:15:37,770
you would probably want to have km/h or

00:15:36,140 --> 00:15:40,500
miles per hour

00:15:37,770 --> 00:15:43,140
so you can work now as well and then the

00:15:40,500 --> 00:15:45,680
only problem that I had was in my

00:15:43,140 --> 00:15:48,330
starter kit there was no display and

00:15:45,680 --> 00:15:49,110
then I had to think about it for a

00:15:48,330 --> 00:15:52,740
moment what do I do

00:15:49,110 --> 00:15:54,780
how do I show what is going on and in

00:15:52,740 --> 00:15:57,990
the end it was obvious I have a mobile

00:15:54,780 --> 00:16:00,960
phone in my pocket all of us do and it

00:15:57,990 --> 00:16:03,720
has a fantastic display and the esp8266

00:16:00,960 --> 00:16:06,450
has Wi-Fi so we'll just make a little

00:16:03,720 --> 00:16:09,090
web server on the microcontroller and

00:16:06,450 --> 00:16:11,940
then with our mobile phone connect to it

00:16:09,090 --> 00:16:14,550
with a browser and if you wanted to you

00:16:11,940 --> 00:16:16,800
would call it you know internet of bikes

00:16:14,550 --> 00:16:22,970
or bike of networks or something like

00:16:16,800 --> 00:16:22,970
this so live demo the next one Oh

00:16:27,269 --> 00:16:33,160
so just to show you how things work I'm

00:16:31,540 --> 00:16:35,920
not going to stand here and try and make

00:16:33,160 --> 00:16:40,149
a magnet go past a switch very carefully

00:16:35,920 --> 00:16:42,490
instead I put a button on the board here

00:16:40,149 --> 00:16:45,250
so press that and pretend that everytime

00:16:42,490 --> 00:16:52,420
the wheel goes round I'll click my

00:16:45,250 --> 00:16:54,790
finger so to connect to the button you

00:16:52,420 --> 00:16:58,570
need to look where you wired it up to

00:16:54,790 --> 00:17:03,399
and I wired it up to pin 12 and then we

00:16:58,570 --> 00:17:06,579
want it to be an input pin so instead of

00:17:03,399 --> 00:17:09,179
before with the LED we used out now we

00:17:06,579 --> 00:17:14,410
do dot in and then we also need a

00:17:09,179 --> 00:17:17,140
resistant a resistor connected to this

00:17:14,410 --> 00:17:19,569
switch you can ask your local

00:17:17,140 --> 00:17:24,040
electronics friend to explain to you why

00:17:19,569 --> 00:17:27,040
you need this so now you can ask your

00:17:24,040 --> 00:17:29,320
switch for the value and for whatever

00:17:27,040 --> 00:17:32,440
reason when it's open it gives you value

00:17:29,320 --> 00:17:35,770
1 and if I push it so I promise I'm

00:17:32,440 --> 00:17:38,470
holding it now now the value is what 0

00:17:35,770 --> 00:17:42,400
and it remains there and let go and it's

00:17:38,470 --> 00:17:44,650
back to 1 so that's nice we can now read

00:17:42,400 --> 00:17:47,740
out the switch but really what we wanted

00:17:44,650 --> 00:17:50,530
to have is something which calls us when

00:17:47,740 --> 00:17:53,500
the switch is pressed we don't really

00:17:50,530 --> 00:17:55,540
want to be having you know a busy while

00:17:53,500 --> 00:17:57,429
loop here which every few microseconds

00:17:55,540 --> 00:18:00,100
checks has the switch pin press or not

00:17:57,429 --> 00:18:03,010
and then we end up missing it so the way

00:18:00,100 --> 00:18:06,610
you do that is you ask your dad about

00:18:03,010 --> 00:18:08,140
interrupt handlers or if your Alden

00:18:06,610 --> 00:18:10,780
older than me then maybe you remember

00:18:08,140 --> 00:18:12,250
that interrupt and azar thing so it

00:18:10,780 --> 00:18:14,500
turns out they're super easy to actually

00:18:12,250 --> 00:18:18,460
use in this project first thing you do

00:18:14,500 --> 00:18:20,140
is define a callback so you make a

00:18:18,460 --> 00:18:24,240
function which gets called every time

00:18:20,140 --> 00:18:26,740
the interrupt handler is triggered and

00:18:24,240 --> 00:18:28,480
before you do that you need to have a

00:18:26,740 --> 00:18:34,300
variable in which we will keep track of

00:18:28,480 --> 00:18:39,340
how many times things get called so if

00:18:34,300 --> 00:18:47,440
button value is zero then we would like

00:18:39,340 --> 00:18:50,650
to increase the value on now let's see

00:18:47,440 --> 00:18:59,670
if I can do this without making a typo

00:18:50,650 --> 00:18:59,670
if the button value is zero then

00:19:02,070 --> 00:19:06,190
probably the more often you try to type

00:19:04,390 --> 00:19:09,210
it without a typo the higher the chances

00:19:06,190 --> 00:19:12,400
you will make a typo right so that's

00:19:09,210 --> 00:19:16,560
right and then we will also just print

00:19:12,400 --> 00:19:16,560
out but

00:19:25,130 --> 00:19:30,590
we will print out how often the button

00:19:27,740 --> 00:19:33,559
has been pressed so now what you do you

00:19:30,590 --> 00:19:38,270
install your interrupt Handler and you

00:19:33,559 --> 00:19:41,210
would like we would like to be told when

00:19:38,270 --> 00:19:46,130
the switch goes from 1 to 0 so on the

00:19:41,210 --> 00:19:51,970
falling edge and then we tell it that

00:19:46,130 --> 00:19:51,970
our handler is called pressed so now

00:19:52,090 --> 00:20:04,640
when I press the button hopefully you

00:19:55,400 --> 00:20:07,039
will see a message ok so this was on

00:20:04,640 --> 00:20:08,960
purpose to explain to you one of the

00:20:07,039 --> 00:20:12,650
constraints of interrupt handlers

00:20:08,960 --> 00:20:14,630
obviously so interrupt handlers think of

00:20:12,650 --> 00:20:17,720
them like threads which wake up as soon

00:20:14,630 --> 00:20:20,360
as the hardware decides that the thread

00:20:17,720 --> 00:20:24,200
needs to run this means that whatever is

00:20:20,360 --> 00:20:26,720
happening right now in your program it

00:20:24,200 --> 00:20:29,090
will be interrupted your interrupt

00:20:26,720 --> 00:20:32,210
handler will run and then it will resume

00:20:29,090 --> 00:20:34,400
running your code this means if your

00:20:32,210 --> 00:20:36,200
interrupt handlers running while the

00:20:34,400 --> 00:20:38,450
interrupt handler fires your interrupt

00:20:36,200 --> 00:20:41,659
handler will be interrupted by a danger

00:20:38,450 --> 00:20:44,630
up Handler this means you cannot do

00:20:41,659 --> 00:20:47,480
things like allocate memory and things

00:20:44,630 --> 00:20:50,929
like this so what print apparently does

00:20:47,480 --> 00:20:52,400
is allocate some memory and I promise

00:20:50,929 --> 00:20:55,340
you that this would be much easier to

00:20:52,400 --> 00:20:58,190
debug then some Arduino thing which

00:20:55,340 --> 00:21:00,679
prints out maybe nothing so memory

00:20:58,190 --> 00:21:02,600
errors not particularly useful but what

00:21:00,679 --> 00:21:04,820
we can do so the problem why does it

00:21:02,600 --> 00:21:06,610
opened out a nice trace back is because

00:21:04,820 --> 00:21:11,299
to do that you need to allocate memory

00:21:06,610 --> 00:21:17,929
so what we do is we pre allocate some

00:21:11,299 --> 00:21:22,520
memory for the trace back and in the

00:21:17,929 --> 00:21:26,630
micro Python module so go in the

00:21:22,520 --> 00:21:29,659
interest of time and typos copy and

00:21:26,630 --> 00:21:34,760
paste days so you can allocate some

00:21:29,659 --> 00:21:37,010
buffer for trace backs and then now if

00:21:34,760 --> 00:21:38,880
we press it then you actually get a nice

00:21:37,010 --> 00:21:40,140
trace back which tells you that

00:21:38,880 --> 00:21:43,860
trying to allocate memory in you

00:21:40,140 --> 00:21:45,480
interrupt handler or whatever else

00:21:43,860 --> 00:21:49,500
you're trying to do which is not allowed

00:21:45,480 --> 00:21:56,700
so to fix this we'll make a slightly

00:21:49,500 --> 00:22:05,430
modified version of this so again if the

00:21:56,700 --> 00:22:09,780
value 0 we increase n by 1 and it turns

00:22:05,430 --> 00:22:15,930
out if you write your print statement

00:22:09,780 --> 00:22:23,160
like this then no memory is allocated so

00:22:15,930 --> 00:22:28,460
now if I press the button yes yes

00:22:23,160 --> 00:22:30,780
exactly so we need to install our new

00:22:28,460 --> 00:22:42,270
interrupt handler so now if I press the

00:22:30,780 --> 00:22:46,380
button yeah there we go so but you as

00:22:42,270 --> 00:22:47,640
you saw it it's confusing and the first

00:22:46,380 --> 00:22:50,880
time you do this you're like what the

00:22:47,640 --> 00:22:52,620
heck is going on but you get somewhat

00:22:50,880 --> 00:22:54,030
helpful error messages and you can group

00:22:52,620 --> 00:22:55,980
you know you get something that you can

00:22:54,030 --> 00:22:58,470
type into Google so you will eventually

00:22:55,980 --> 00:23:01,650
learn that what you're doing is wrong

00:22:58,470 --> 00:23:04,680
and why it's wrong so the last thing we

00:23:01,650 --> 00:23:09,120
need now is a web server that runs on

00:23:04,680 --> 00:23:10,980
the microcontroller and that is not very

00:23:09,120 --> 00:23:13,380
complicated so if you've done any socket

00:23:10,980 --> 00:23:15,030
programming in Python then you will

00:23:13,380 --> 00:23:17,040
recognize the bit of code that I have

00:23:15,030 --> 00:23:18,600
here if you've not done any socket

00:23:17,040 --> 00:23:20,160
programming then you will not recognize

00:23:18,600 --> 00:23:21,800
it but there has nothing to do with the

00:23:20,160 --> 00:23:24,750
fact that this is a microcontroller

00:23:21,800 --> 00:23:26,760
however it's more than five lines so I

00:23:24,750 --> 00:23:28,530
will just copy and paste it which gives

00:23:26,760 --> 00:23:31,320
me an excuse to show you one other cool

00:23:28,530 --> 00:23:35,870
feature of this repple so you can press

00:23:31,320 --> 00:23:35,870
ctrl e and you're now in paste mode

00:23:43,520 --> 00:23:49,340
so in this now because it's a busy loop

00:23:47,300 --> 00:23:51,980
we'll just sit there and do nothing

00:23:49,340 --> 00:24:01,900
but luckily I have a browser that we can

00:23:51,980 --> 00:24:04,900
go to connect it to the right Wi-Fi yeah

00:24:01,900 --> 00:24:04,900
okay

00:24:17,910 --> 00:24:29,640
so okay so if you forget what the

00:24:25,860 --> 00:24:30,930
network configuration for your oh yeah

00:24:29,640 --> 00:24:33,450
now I remember now

00:24:30,930 --> 00:24:35,270
so what you should do is you set up your

00:24:33,450 --> 00:24:37,380
live demo for the end of the talk and

00:24:35,270 --> 00:24:40,140
then you forget to switch to Wi-Fi

00:24:37,380 --> 00:24:43,050
network for the first part of your life

00:24:40,140 --> 00:24:44,850
demo so the micro Python or micro

00:24:43,050 --> 00:24:46,290
plaything sets up an access point for

00:24:44,850 --> 00:24:50,130
you and you can connect to it so that's

00:24:46,290 --> 00:24:54,900
that one and now hopefully if I reload

00:24:50,130 --> 00:24:59,450
this page I am and you turn on your web

00:24:54,900 --> 00:24:59,450
server oh my goodness

00:25:07,300 --> 00:25:11,640
okay in the interest of time I will just

00:25:09,310 --> 00:25:14,440
show you what I've been waiting to do

00:25:11,640 --> 00:25:20,500
all week essentially not all week all

00:25:14,440 --> 00:25:27,160
weekend which is the bike so I'll

00:25:20,500 --> 00:25:35,680
connect back to that Wi-Fi okay so we

00:25:27,160 --> 00:25:38,080
could set up the web server again on

00:25:35,680 --> 00:25:40,750
this guy etc etc but really what I would

00:25:38,080 --> 00:25:52,480
like to show you is that if you hook up

00:25:40,750 --> 00:25:56,440
everything and you don't make any menu

00:25:52,480 --> 00:26:04,630
stand behind the speaker and then you

00:25:56,440 --> 00:26:08,800
should be able to yeah there we go

00:26:04,630 --> 00:26:11,110
so this is the micro Python that is in

00:26:08,800 --> 00:26:19,540
the bass Gilders bike so when I start

00:26:11,110 --> 00:26:23,980
moving it hopefully it will change I'm

00:26:19,540 --> 00:26:26,110
sorry but I've been wanting to cycle

00:26:23,980 --> 00:26:28,530
this bike indoors in the conference

00:26:26,110 --> 00:26:28,530
center

00:26:42,910 --> 00:26:53,900
there you go that's all you need

00:26:45,530 --> 00:26:55,850
I other cool feature I added on the

00:26:53,900 --> 00:26:58,580
plane because you know nothing better to

00:26:55,850 --> 00:27:01,310
do than modify your life demo on the way

00:26:58,580 --> 00:27:08,330
here is it detects when you stop cycling

00:27:01,310 --> 00:27:10,070
so reset itself ok ladies gentlemen boys

00:27:08,330 --> 00:27:13,220
and girls that's how you build a bike

00:27:10,070 --> 00:27:15,710
computer with nothing but a tube door

00:27:13,220 --> 00:27:20,660
switch a micro controller and a bit of

00:27:15,710 --> 00:27:22,700
Python and so you can read that at your

00:27:20,660 --> 00:27:26,380
leisure and if you want to ask any

00:27:22,700 --> 00:27:39,839
questions then go ahead do that

00:27:26,380 --> 00:27:39,839
[Applause]

00:27:44,690 --> 00:27:52,649
thank you very much and how far away

00:27:47,909 --> 00:27:54,509
would you be for example from producing

00:27:52,649 --> 00:27:58,169
something using what you have there

00:27:54,509 --> 00:28:00,629
actually to manufacture a bike computer

00:27:58,169 --> 00:28:03,090
that has an embedded web server that

00:28:00,629 --> 00:28:05,789
will connect the phone in someone's

00:28:03,090 --> 00:28:07,499
pocket because people are manufacturing

00:28:05,789 --> 00:28:11,990
these things for planned out of money

00:28:07,499 --> 00:28:15,240
and it's obviously easier than it looks

00:28:11,990 --> 00:28:16,799
so let me take if I have a picture from

00:28:15,240 --> 00:28:24,990
what it looked like the first time I

00:28:16,799 --> 00:28:27,550
attached it to my bike at home so it

00:28:24,990 --> 00:28:28,850
looked a little bit like this which you

00:28:27,550 --> 00:28:32,220
[Music]

00:28:28,850 --> 00:28:36,299
know it's super cool if you ask me but

00:28:32,220 --> 00:28:39,869
potentially not ready not really quite

00:28:36,299 --> 00:28:44,029
for mass market production I don't know

00:28:39,869 --> 00:28:46,860
I think it should not be too much work

00:28:44,029 --> 00:28:48,480
but working as a freelancer I always say

00:28:46,860 --> 00:28:54,179
that and it turns out actually it takes

00:28:48,480 --> 00:29:00,450
a long time so yeah make a case make a

00:28:54,179 --> 00:29:07,350
battery and give probably done so the

00:29:00,450 --> 00:29:09,869
super cool have you figured out how to

00:29:07,350 --> 00:29:11,999
do like the whole vibration dampening

00:29:09,869 --> 00:29:13,740
thing with with all the electronics and

00:29:11,999 --> 00:29:15,980
baking I know that's one issue that I

00:29:13,740 --> 00:29:21,059
run into when I have done similar things

00:29:15,980 --> 00:29:24,200
so I've not run into that problem so

00:29:21,059 --> 00:29:29,070
this seems to work quite well on Swiss

00:29:24,200 --> 00:29:30,690
tarmac nicely paved yeah

00:29:29,070 --> 00:29:32,519
the bigger problem is trying to hold the

00:29:30,690 --> 00:29:33,990
camera still while like taking a video

00:29:32,519 --> 00:29:35,670
of your mobile phone so that was the

00:29:33,990 --> 00:29:38,490
biggest problem I had

00:29:35,670 --> 00:29:41,670
but it seemed to just work quite quite

00:29:38,490 --> 00:29:43,680
well yeah there any tricks you can do to

00:29:41,670 --> 00:29:45,900
get like a deep sleep mode or basically

00:29:43,680 --> 00:29:47,760
power saving techniques or is this just

00:29:45,900 --> 00:29:50,570
going to break your battery like crazy

00:29:47,760 --> 00:29:55,620
so at the moment is just on all the time

00:29:50,570 --> 00:29:58,620
but the ESP itself can put itself into

00:29:55,620 --> 00:30:03,390
30 deep sleep mode and then you can

00:29:58,620 --> 00:30:06,300
connect you can use one of the pins to

00:30:03,390 --> 00:30:08,160
wake it up and then go back to sleep if

00:30:06,300 --> 00:30:09,900
you wanted to do that every time the

00:30:08,160 --> 00:30:11,940
wheel goes around I'm not sure how much

00:30:09,900 --> 00:30:13,860
power you would save because I think

00:30:11,940 --> 00:30:14,400
it's something like 2 or 3 times per

00:30:13,860 --> 00:30:21,000
second

00:30:14,400 --> 00:30:23,820
normal cycling speed um do you need to

00:30:21,000 --> 00:30:26,430
install any external libraries and also

00:30:23,820 --> 00:30:29,760
for this for microcontrollers are there

00:30:26,430 --> 00:30:32,850
many open are there many libraries that

00:30:29,760 --> 00:30:34,800
people are making right now for micro

00:30:32,850 --> 00:30:38,700
Python for running on the

00:30:34,800 --> 00:30:41,430
microcontroller yeah I mean github as

00:30:38,700 --> 00:30:42,780
full of projects that people doing and

00:30:41,430 --> 00:30:48,680
most of them are open source so you can

00:30:42,780 --> 00:30:51,680
just look at them thank you Tim thank

00:30:48,680 --> 00:30:51,680
you

00:30:54,790 --> 00:30:56,850

YouTube URL: https://www.youtube.com/watch?v=D-5V7s0GflU


