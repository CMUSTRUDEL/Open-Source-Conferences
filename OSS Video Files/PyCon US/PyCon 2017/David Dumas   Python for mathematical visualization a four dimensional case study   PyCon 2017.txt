Title: David Dumas   Python for mathematical visualization a four dimensional case study   PyCon 2017
Publication date: 2017-05-21
Playlist: PyCon 2017
Description: 
	"Speaker: David Dumas

This is a talk about creating pictures of a mathematical object---specifically, a 4-dimensional fractal ""dust"" that has been the subject of mathematical research in hyperbolic geometry since the 1980s.  In the end this is accomplished using a little algebra, a little geometry, and a healthy dose of Python.

That is, I will present a case study of using Python in several aspects of a mathematical visualization project, from the computation itself, to transforming and converting data, and finally for scripting the process of generating the images.  Along the way I'll explain how Python's convenient idioms and containers (e.g. sets and set comprehensions) are a good fit for some of the algebraic and geometric questions that come up, how Scipy and Numpy enable fast numerical calculations, and how Python's strength as a language for scripting and automation allows easy orchestration of rendering of still images and frames of animations.

The mathematical visualization project we describe is a collaboration with François Guéritaud (Université de Lille).

Slides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides"
Captions: 
	00:00:00,900 --> 00:00:06,359
after that we have David Emma who is

00:00:03,840 --> 00:00:09,150
going to talk about the Python

00:00:06,359 --> 00:00:13,889
visualization for the mathematical part

00:00:09,150 --> 00:00:17,250
and I've made up your title okay thank

00:00:13,889 --> 00:00:18,779
you I'm David Dumont and I'm a

00:00:17,250 --> 00:00:22,260
mathematician from the University of

00:00:18,779 --> 00:00:25,320
Illinois in Chicago and my research is

00:00:22,260 --> 00:00:28,439
in hyperbolic geometry complex analysis

00:00:25,320 --> 00:00:29,789
it doesn't directly use computation it's

00:00:28,439 --> 00:00:33,300
not directly connected to the theory of

00:00:29,789 --> 00:00:35,610
computation but whenever I can I like to

00:00:33,300 --> 00:00:37,980
incorporate mathematical visualizations

00:00:35,610 --> 00:00:40,260
or computer experiments into my work and

00:00:37,980 --> 00:00:42,239
so what I'd like to do today is to pick

00:00:40,260 --> 00:00:44,550
one of those as an example and to

00:00:42,239 --> 00:00:47,430
describe a mathematical visualization

00:00:44,550 --> 00:00:50,430
project related to hyperbolic geometry

00:00:47,430 --> 00:00:53,280
that uses Python and along the way by

00:00:50,430 --> 00:00:55,050
describing that project both the

00:00:53,280 --> 00:00:57,329
mathematical aspects and how they map to

00:00:55,050 --> 00:00:59,520
code to highlight characteristics of

00:00:57,329 --> 00:01:02,399
Python that make it suitable for this

00:00:59,520 --> 00:01:04,019
application so what I'm going to tell

00:01:02,399 --> 00:01:05,670
you about today is a visualization

00:01:04,019 --> 00:01:08,280
project that makes a picture of an

00:01:05,670 --> 00:01:09,869
object a mathematical object the name of

00:01:08,280 --> 00:01:12,600
that object is the space of projective

00:01:09,869 --> 00:01:15,210
measured laminations which often goes by

00:01:12,600 --> 00:01:17,009
this abbreviation PML it won't be so

00:01:15,210 --> 00:01:18,479
important what that object is I'm going

00:01:17,009 --> 00:01:20,909
to go through the details of what the

00:01:18,479 --> 00:01:22,290
visualization shows but I should say

00:01:20,909 --> 00:01:24,360
that everything that I'm telling you

00:01:22,290 --> 00:01:26,790
about today is a joint project with

00:01:24,360 --> 00:01:29,280
Francoise Gary tow a mathematician at

00:01:26,790 --> 00:01:30,659
the University of Lille and the URL

00:01:29,280 --> 00:01:33,659
that's given at the bottom of the slide

00:01:30,659 --> 00:01:35,390
there is a place where you can find more

00:01:33,659 --> 00:01:38,700
information about this visualization

00:01:35,390 --> 00:01:40,740
related ones at the same sort link to a

00:01:38,700 --> 00:01:44,430
github repo that has all the demo code

00:01:40,740 --> 00:01:47,460
from my talk today as well as full

00:01:44,430 --> 00:01:49,619
demonstration of the kind of rendering

00:01:47,460 --> 00:01:51,329
that I'm showing you and that URL is on

00:01:49,619 --> 00:01:54,240
all the subsequent slides so don't worry

00:01:51,329 --> 00:01:56,130
about jotting it down right now so let

00:01:54,240 --> 00:01:57,689
me tell you the three steps that the

00:01:56,130 --> 00:01:59,460
rest of the talk is going to cover are

00:01:57,689 --> 00:02:01,710
basically the steps that would be

00:01:59,460 --> 00:02:03,270
involved in making a scatterplot in two

00:02:01,710 --> 00:02:05,070
or three dimensions you have to have

00:02:03,270 --> 00:02:06,960
some data set that you want to show so

00:02:05,070 --> 00:02:08,970
you have to enumerate the objects you

00:02:06,960 --> 00:02:11,250
need to choose which characteristics of

00:02:08,970 --> 00:02:12,860
the objects should map to coordinates to

00:02:11,250 --> 00:02:14,210
choose your coordinates properly

00:02:12,860 --> 00:02:15,770
and then finally you have to render an

00:02:14,210 --> 00:02:19,070
image and I'm going to say something

00:02:15,770 --> 00:02:20,630
about each aspect here and how it plays

00:02:19,070 --> 00:02:23,720
out in this specific problem under

00:02:20,630 --> 00:02:25,520
consideration so let me tell you what

00:02:23,720 --> 00:02:28,100
our problem is because the objects are

00:02:25,520 --> 00:02:29,270
not going to be rows in a data set that

00:02:28,100 --> 00:02:31,580
comes from the real world instead

00:02:29,270 --> 00:02:33,800
they're going to be topological objects

00:02:31,580 --> 00:02:36,350
and this all fits into what you could

00:02:33,800 --> 00:02:38,750
call a topological enumeration framework

00:02:36,350 --> 00:02:40,430
so let me give a simpler example of a

00:02:38,750 --> 00:02:42,020
topological enumeration problem that you

00:02:40,430 --> 00:02:44,000
may have encountered in your everyday

00:02:42,020 --> 00:02:45,770
life suppose you're trying to walk from

00:02:44,000 --> 00:02:47,720
one place to another marked here as

00:02:45,770 --> 00:02:49,640
start and finish but there's some kind

00:02:47,720 --> 00:02:51,230
of obstacle in your way maybe it's a

00:02:49,640 --> 00:02:52,580
hole that you don't want to fall into or

00:02:51,230 --> 00:02:56,450
a telephone pole that you don't want to

00:02:52,580 --> 00:02:58,370
walk into I think you know what I mean

00:02:56,450 --> 00:03:01,130
when I say that you have essentially two

00:02:58,370 --> 00:03:02,930
ways to deal with this problem and they

00:03:01,130 --> 00:03:05,660
are to go around the obstacle to the

00:03:02,930 --> 00:03:07,940
left or to go around it to the right now

00:03:05,660 --> 00:03:10,220
I do not mean that those are literally

00:03:07,940 --> 00:03:11,840
the only two walking paths that you

00:03:10,220 --> 00:03:13,610
could possibly pick that those two

00:03:11,840 --> 00:03:15,709
pictures are the only paths and of

00:03:13,610 --> 00:03:17,810
course you could modify the path that

00:03:15,709 --> 00:03:18,980
goes to left just a little bit and I

00:03:17,810 --> 00:03:21,769
would say that that makes the same

00:03:18,980 --> 00:03:23,840
essential choice in this problem more

00:03:21,769 --> 00:03:27,440
formally what I would say is you cannot

00:03:23,840 --> 00:03:29,510
turn the blue path into the red one by

00:03:27,440 --> 00:03:32,540
moving it around without crossing the

00:03:29,510 --> 00:03:34,940
obstacle however you can turn these two

00:03:32,540 --> 00:03:36,739
blue paths into one another by making

00:03:34,940 --> 00:03:38,300
small changes and never crossing the

00:03:36,739 --> 00:03:39,650
obstacle so that's the kind of

00:03:38,300 --> 00:03:40,910
equivalent that's going to be in play

00:03:39,650 --> 00:03:42,530
for the rest of the talk you're always

00:03:40,910 --> 00:03:44,840
allowed to move things around but never

00:03:42,530 --> 00:03:48,019
across obstacles now you might object

00:03:44,840 --> 00:03:50,269
and say I can imagine at least one other

00:03:48,019 --> 00:03:52,280
way to solve this problem I could do a

00:03:50,269 --> 00:03:54,500
kind of 360 around the telephone pole

00:03:52,280 --> 00:03:56,000
and and then go to the finish so let me

00:03:54,500 --> 00:03:57,920
use that as an opportunity to introduce

00:03:56,000 --> 00:03:59,690
an arbitrary rule that's going to be in

00:03:57,920 --> 00:04:02,269
play for the rest of the talk which is

00:03:59,690 --> 00:04:03,860
that this is not allowed we will not

00:04:02,269 --> 00:04:06,140
allow any paths that have self

00:04:03,860 --> 00:04:07,970
intersections and in mathematics the

00:04:06,140 --> 00:04:10,370
convention is a path is called simple if

00:04:07,970 --> 00:04:13,400
it doesn't cross itself so no simple

00:04:10,370 --> 00:04:14,750
paths from now on get rid of that and

00:04:13,400 --> 00:04:16,820
we've solved their topological

00:04:14,750 --> 00:04:18,709
enumeration problem this one does not

00:04:16,820 --> 00:04:21,080
produce a very interesting scatter plot

00:04:18,709 --> 00:04:22,669
the space of simple tasks that avoid

00:04:21,080 --> 00:04:24,410
this obstacle and go from start to

00:04:22,669 --> 00:04:25,790
finish is a two point space and so

00:04:24,410 --> 00:04:27,620
that's a picture of it

00:04:25,790 --> 00:04:29,540
more interesting problem I'm going to

00:04:27,620 --> 00:04:32,390
tell you about is one of enumerated

00:04:29,540 --> 00:04:34,400
paths in fact loops on a different

00:04:32,390 --> 00:04:37,850
surface not the surface of the earth not

00:04:34,400 --> 00:04:39,830
a plane but on five hold sphere so

00:04:37,850 --> 00:04:42,830
imagine here that this is the surface of

00:04:39,830 --> 00:04:44,120
a sphere it could be a ping-pong ball or

00:04:42,830 --> 00:04:46,340
a beach ball or something and that

00:04:44,120 --> 00:04:47,630
you've put five holes into it there go

00:04:46,340 --> 00:04:49,550
these holes are going to play the role

00:04:47,630 --> 00:04:50,990
of the obstacle because the holes are

00:04:49,550 --> 00:04:52,400
missing you can't actually go through

00:04:50,990 --> 00:04:55,370
them you have to go around them somehow

00:04:52,400 --> 00:04:56,990
and we're going to be talking about the

00:04:55,370 --> 00:04:58,700
numerating loops rather than paths

00:04:56,990 --> 00:05:00,770
because the start and end are going to

00:04:58,700 --> 00:05:02,960
be the same and not approximately the

00:05:00,770 --> 00:05:04,670
same but literally the same all the

00:05:02,960 --> 00:05:08,000
curves that I draw from now on will have

00:05:04,670 --> 00:05:10,820
to be closed start they start and end at

00:05:08,000 --> 00:05:12,530
exactly the same place this is

00:05:10,820 --> 00:05:14,120
significant because of that simplicity

00:05:12,530 --> 00:05:15,770
assumption the requirement that the

00:05:14,120 --> 00:05:17,900
paths don't have any self intersections

00:05:15,770 --> 00:05:19,880
because I'm perfectly reasonable looking

00:05:17,900 --> 00:05:21,500
paths that go around the obstacles and

00:05:19,880 --> 00:05:24,470
come back very close to where they

00:05:21,500 --> 00:05:26,390
started cannot be exactly closed up

00:05:24,470 --> 00:05:28,520
without introducing a self intersection

00:05:26,390 --> 00:05:30,380
this figure eight path is an example of

00:05:28,520 --> 00:05:32,960
that if you try to close it up you will

00:05:30,380 --> 00:05:36,230
necessarily cross yourself and so this

00:05:32,960 --> 00:05:38,180
is deemed illegal and thrown away okay

00:05:36,230 --> 00:05:39,740
so having some of the most of the

00:05:38,180 --> 00:05:40,940
arbitrary rules out of the way I should

00:05:39,740 --> 00:05:42,230
also say that I'm going to draw the

00:05:40,940 --> 00:05:43,150
picture a little bit differently from

00:05:42,230 --> 00:05:46,300
now on

00:05:43,150 --> 00:05:48,320
mostly because all of the pictures I had

00:05:46,300 --> 00:05:49,910
before we're drawn in this other

00:05:48,320 --> 00:05:52,550
convention I'm going to draw the same

00:05:49,910 --> 00:05:54,440
surface like this where I've taken the

00:05:52,550 --> 00:05:57,950
five holes and I've pulled them outward

00:05:54,440 --> 00:06:00,560
to be the punctures just at five points

00:05:57,950 --> 00:06:01,970
so a sphere which before it was nice and

00:06:00,560 --> 00:06:04,310
round has now become a kind of

00:06:01,970 --> 00:06:06,770
pentagonal pillow it has a front it has

00:06:04,310 --> 00:06:08,480
a back and it has five holes or

00:06:06,770 --> 00:06:10,940
punctures that have become these very

00:06:08,480 --> 00:06:13,670
small points and the curve that I drawn

00:06:10,940 --> 00:06:15,380
before that goes around two of those two

00:06:13,670 --> 00:06:16,790
of those punctures now becomes a curve

00:06:15,380 --> 00:06:19,400
that has half on the front half on the

00:06:16,790 --> 00:06:21,260
back I'm also going to get rid of the

00:06:19,400 --> 00:06:23,900
pretty pink background and just for

00:06:21,260 --> 00:06:25,970
simplicity and something you may have

00:06:23,900 --> 00:06:28,550
noticed about this curve that is going

00:06:25,970 --> 00:06:30,410
to play a role in the rest and the last

00:06:28,550 --> 00:06:32,390
arbitrary rule that I'll introduce is

00:06:30,410 --> 00:06:34,190
that this curve has two sides to it

00:06:32,390 --> 00:06:36,740
which I've colored green and yellow in

00:06:34,190 --> 00:06:38,600
this case and you'll notice that there

00:06:36,740 --> 00:06:39,100
are two of the punctures on one side and

00:06:38,600 --> 00:06:40,840
three

00:06:39,100 --> 00:06:44,530
the other you could call this a kind of

00:06:40,840 --> 00:06:45,820
2/3 closed loop on the 5 volt sphere and

00:06:44,530 --> 00:06:47,260
those are the only kind we're going to

00:06:45,820 --> 00:06:50,050
consider from now on all the others

00:06:47,260 --> 00:06:51,730
uninteresting get rid of them I mean the

00:06:50,050 --> 00:06:53,530
truth is you could do this for any of

00:06:51,730 --> 00:06:54,730
the other types it's just the two three

00:06:53,530 --> 00:06:56,890
cases the one that leads to the most

00:06:54,730 --> 00:06:58,780
interesting mathematics and so it's the

00:06:56,890 --> 00:07:00,250
one I'm going to concentrate on so

00:06:58,780 --> 00:07:01,660
bearing with me on that I should tell

00:07:00,250 --> 00:07:03,460
you that these curves are named they're

00:07:01,660 --> 00:07:05,530
called the non peripheral simple closed

00:07:03,460 --> 00:07:09,550
curves on the five holed sphere and I

00:07:05,530 --> 00:07:10,870
might have reavie NSCC for now on okay

00:07:09,550 --> 00:07:12,300
so that's what we're a brief but that's

00:07:10,870 --> 00:07:14,950
what we're enumerated

00:07:12,300 --> 00:07:16,420
you can see that there's there are some

00:07:14,950 --> 00:07:17,680
of these I have one example that I've

00:07:16,420 --> 00:07:20,380
been working with on several of the

00:07:17,680 --> 00:07:22,540
slides so far I'll bet you can imagine

00:07:20,380 --> 00:07:24,280
at least four others just looking at the

00:07:22,540 --> 00:07:26,950
picture right you could take that one

00:07:24,280 --> 00:07:28,510
and rotate it around and get these maybe

00:07:26,950 --> 00:07:30,190
I'll call these the basic curves the

00:07:28,510 --> 00:07:32,140
five most basic examples you could

00:07:30,190 --> 00:07:34,630
produce of these two three four non

00:07:32,140 --> 00:07:36,190
peripheral simple closed curves but let

00:07:34,630 --> 00:07:37,870
me just quickly convince you that there

00:07:36,190 --> 00:07:40,600
are others you could take those last two

00:07:37,870 --> 00:07:42,550
that I showed you and do a little bit of

00:07:40,600 --> 00:07:45,070
cut and paste to produce a new simple

00:07:42,550 --> 00:07:48,070
closed curve that's an example and that

00:07:45,070 --> 00:07:49,770
was that's not on our list so far here's

00:07:48,070 --> 00:07:53,080
a more complicated example that I'll

00:07:49,770 --> 00:07:54,280
give some more details on later but this

00:07:53,080 --> 00:07:55,630
hints that the kind of thing that could

00:07:54,280 --> 00:07:58,420
allow you to produce a whole lot of

00:07:55,630 --> 00:08:01,300
these things you see how this example

00:07:58,420 --> 00:08:02,530
wines around a lot and that will allow

00:08:01,300 --> 00:08:04,210
you to introduce more and more

00:08:02,530 --> 00:08:07,510
complexity well without crossing

00:08:04,210 --> 00:08:09,100
yourself okay so that's our topological

00:08:07,510 --> 00:08:11,350
enumeration problem how are we going to

00:08:09,100 --> 00:08:13,210
turn this into a coding problem we need

00:08:11,350 --> 00:08:15,220
some way of encoding a curve which is a

00:08:13,210 --> 00:08:17,140
sort of continuous object into a data

00:08:15,220 --> 00:08:19,060
structure so for that we're going to use

00:08:17,140 --> 00:08:20,950
strings of characters that represent

00:08:19,060 --> 00:08:23,290
curves according to their component

00:08:20,950 --> 00:08:25,510
parts so let's introduce names for some

00:08:23,290 --> 00:08:28,060
basic operations that you can do a will

00:08:25,510 --> 00:08:29,410
mean you're in the starting area you go

00:08:28,060 --> 00:08:31,360
around one of the holes and you come

00:08:29,410 --> 00:08:32,560
back to where you started B will mean

00:08:31,360 --> 00:08:35,680
that you do the same thing for one of

00:08:32,560 --> 00:08:38,320
the other holes C D D so these five

00:08:35,680 --> 00:08:39,969
basic pieces of a path have names that

00:08:38,320 --> 00:08:42,610
are lowercase letters and they all mean

00:08:39,969 --> 00:08:44,229
going around the hole in a clockwise

00:08:42,610 --> 00:08:45,430
fashion if you do the same thing in a

00:08:44,229 --> 00:08:49,180
counterclockwise fashion we'll use a

00:08:45,430 --> 00:08:51,220
capital letter so in this way a sequence

00:08:49,180 --> 00:08:53,030
of characters can represent a sequence

00:08:51,220 --> 00:08:55,340
of things that you do in order and

00:08:53,030 --> 00:08:56,900
for encode a curve and I'll just keep

00:08:55,340 --> 00:08:58,760
the names for the five punctures there

00:08:56,900 --> 00:09:02,510
for reference but if you consider the

00:08:58,760 --> 00:09:05,930
string a B that represents first do a

00:09:02,510 --> 00:09:08,630
and then do B so you go around hole a

00:09:05,930 --> 00:09:10,190
and then hole B and you get a curve but

00:09:08,630 --> 00:09:11,780
remembering our rule that you're allowed

00:09:10,190 --> 00:09:13,130
to make small modifications to the

00:09:11,780 --> 00:09:14,840
curves you're just not allowed to drag

00:09:13,130 --> 00:09:16,760
them over the puncture this is actually

00:09:14,840 --> 00:09:18,440
a curve that we've seen before we just

00:09:16,760 --> 00:09:20,270
push it a little bit we're down to the

00:09:18,440 --> 00:09:22,430
one of those five basic curves I showed

00:09:20,270 --> 00:09:25,550
you before the string a B represents

00:09:22,430 --> 00:09:27,260
that one B C represents this other curve

00:09:25,550 --> 00:09:31,040
another one of the five basic ones that

00:09:27,260 --> 00:09:33,340
goes around two of the punctures AC is

00:09:31,040 --> 00:09:36,230
another example of a simple curve and

00:09:33,340 --> 00:09:37,880
this is a good time to note that all the

00:09:36,230 --> 00:09:40,340
curves I've drawn so far are oriented

00:09:37,880 --> 00:09:42,620
you could go around they specify a

00:09:40,340 --> 00:09:44,780
direction in which you should travel if

00:09:42,620 --> 00:09:47,240
you reverse the orientation of the curve

00:09:44,780 --> 00:09:49,610
that is equivalent to reversing the

00:09:47,240 --> 00:09:51,770
string but also switching lower case and

00:09:49,610 --> 00:09:53,000
upper case so CA would represent the

00:09:51,770 --> 00:09:55,580
same curve with these opposite

00:09:53,000 --> 00:09:57,589
orientation this is also a good time to

00:09:55,580 --> 00:09:59,990
observe that not all strings work if you

00:09:57,589 --> 00:10:01,339
consider the string lowercase a capital

00:09:59,990 --> 00:10:02,510
C that represents one of these

00:10:01,339 --> 00:10:04,490
figure-eight curves that has this

00:10:02,510 --> 00:10:07,880
essential self intersection and I get to

00:10:04,490 --> 00:10:09,830
bring out the big red X again okay so

00:10:07,880 --> 00:10:11,390
that example that I assumed before is

00:10:09,830 --> 00:10:13,040
the more complicated one can be

00:10:11,390 --> 00:10:15,170
represented as a string of length five

00:10:13,040 --> 00:10:17,240
and to see that this is a proper

00:10:15,170 --> 00:10:18,710
encoding of that curve is a little bit

00:10:17,240 --> 00:10:20,720
complicated you have to do quite a bit

00:10:18,710 --> 00:10:23,180
of this moving around but it's a general

00:10:20,720 --> 00:10:25,490
fact that any curve any closed curve on

00:10:23,180 --> 00:10:27,530
this five punctured sphere can be

00:10:25,490 --> 00:10:30,230
represented by a string in these five

00:10:27,530 --> 00:10:32,450
characters a three and their associated

00:10:30,230 --> 00:10:36,260
capital letters how would you go about

00:10:32,450 --> 00:10:38,810
generating generating a list of these

00:10:36,260 --> 00:10:41,240
things well let's consider the simpler

00:10:38,810 --> 00:10:43,880
problem of generating just all of the

00:10:41,240 --> 00:10:47,240
words in a fixed alphabet of letters

00:10:43,880 --> 00:10:49,310
ABCDE and they're capital letters if we

00:10:47,240 --> 00:10:51,800
restricted to just a fixed length of

00:10:49,310 --> 00:10:54,050
word like five in this case then the

00:10:51,800 --> 00:10:56,540
product operator from the itertools

00:10:54,050 --> 00:10:59,089
module provides a nice way to sample

00:10:56,540 --> 00:11:01,250
with replacement a fixed number of

00:10:59,089 --> 00:11:05,180
elements from any iterable so we can use

00:11:01,250 --> 00:11:06,620
the string ABCDE ABCDE here and then W

00:11:05,180 --> 00:11:08,960
in this loop will just

00:11:06,620 --> 00:11:12,380
contain all possible five tuples taken

00:11:08,960 --> 00:11:14,330
from that string and so this loop if you

00:11:12,380 --> 00:11:16,220
were to run it would just print out all

00:11:14,330 --> 00:11:18,410
of the possible five character strings

00:11:16,220 --> 00:11:19,820
made from that alphabet now I've of

00:11:18,410 --> 00:11:21,620
course skipped a step here right

00:11:19,820 --> 00:11:23,930
I should really check if they're legal

00:11:21,620 --> 00:11:25,970
if they represent curves that don't have

00:11:23,930 --> 00:11:27,920
self intersections and I should probably

00:11:25,970 --> 00:11:31,300
at the same time make a note for myself

00:11:27,920 --> 00:11:34,340
that I ought to implement the check and

00:11:31,300 --> 00:11:36,050
I won't do that because what I'll

00:11:34,340 --> 00:11:37,400
explain next is that this is not an

00:11:36,050 --> 00:11:39,830
ideal approach to the problem and

00:11:37,400 --> 00:11:41,540
something better is needed to get good

00:11:39,830 --> 00:11:45,110
results so what's the problem the

00:11:41,540 --> 00:11:47,690
problem is that is simple they'll

00:11:45,110 --> 00:11:49,280
basically always return false you're

00:11:47,690 --> 00:11:51,380
searching for a tiny needle in an

00:11:49,280 --> 00:11:53,060
exponentially growing haystack so here's

00:11:51,380 --> 00:11:55,850
an example if you look at all of the

00:11:53,060 --> 00:11:58,550
words of length two in that alphabet and

00:11:55,850 --> 00:11:59,840
you highlight in red the ones that

00:11:58,550 --> 00:12:01,010
represent simple curves you get a

00:11:59,840 --> 00:12:02,660
picture that looks like this

00:12:01,010 --> 00:12:04,490
pretty good right we have a good number

00:12:02,660 --> 00:12:06,470
of them if you go to words of length

00:12:04,490 --> 00:12:07,970
three I don't know if maybe it's a

00:12:06,470 --> 00:12:10,160
little bit hard to see the red there but

00:12:07,970 --> 00:12:11,750
there's quite a bit less of it let's

00:12:10,160 --> 00:12:13,580
jump all the way to words of length five

00:12:11,750 --> 00:12:18,010
and let's represent each word with a

00:12:13,580 --> 00:12:20,270
pixel then here the gray pixels are

00:12:18,010 --> 00:12:22,250
curves with self intersections and those

00:12:20,270 --> 00:12:23,960
few scattered red pixels are the simple

00:12:22,250 --> 00:12:26,450
ones so we're searching for very small

00:12:23,960 --> 00:12:28,010
needle it's in general true that the

00:12:26,450 --> 00:12:30,590
number of words of a given length grows

00:12:28,010 --> 00:12:32,420
exponentially in length whereas the

00:12:30,590 --> 00:12:35,450
number of those words that represent

00:12:32,420 --> 00:12:37,810
simple curves grows only some power the

00:12:35,450 --> 00:12:42,260
length so asymptotically they represent

00:12:37,810 --> 00:12:43,580
zero fraction of the words so here's

00:12:42,260 --> 00:12:46,310
another approach that you could use to

00:12:43,580 --> 00:12:48,500
the same problem which is never

00:12:46,310 --> 00:12:50,750
introduce any curves that have self

00:12:48,500 --> 00:12:52,310
intersections at all start with some

00:12:50,750 --> 00:12:54,650
curves that you know to be simple and

00:12:52,310 --> 00:12:56,750
modify them in a way that preserves the

00:12:54,650 --> 00:12:58,580
property of being simple preserves not

00:12:56,750 --> 00:12:59,840
having any self intersections so

00:12:58,580 --> 00:13:01,940
twisting is a way to do that I'll

00:12:59,840 --> 00:13:04,370
explain the twisting operation now this

00:13:01,940 --> 00:13:07,370
is an operation that has a kind of input

00:13:04,370 --> 00:13:10,160
a target curve BC in this example the

00:13:07,370 --> 00:13:11,600
blue curve and also some information

00:13:10,160 --> 00:13:14,360
about where you're going to modify it

00:13:11,600 --> 00:13:16,730
which is the twisting curve or CD in

00:13:14,360 --> 00:13:18,170
this example it's shown in red so the

00:13:16,730 --> 00:13:20,089
first thing that you do is you stick in

00:13:18,170 --> 00:13:22,610
the twisting curve to a ring

00:13:20,089 --> 00:13:24,350
and now we're going to change the target

00:13:22,610 --> 00:13:26,329
curve wherever it crosses through the

00:13:24,350 --> 00:13:27,889
ring we're going to delete all of the

00:13:26,329 --> 00:13:30,259
places where it traverses the ring and

00:13:27,889 --> 00:13:32,149
instead of having those the curve

00:13:30,259 --> 00:13:35,660
crossed straight across we're going to

00:13:32,149 --> 00:13:37,399
introduce a 180 degree turn as it goes

00:13:35,660 --> 00:13:41,660
through the ring and reconnect the

00:13:37,399 --> 00:13:43,790
strings so after doing this the curve

00:13:41,660 --> 00:13:45,970
that was the target curve has become the

00:13:43,790 --> 00:13:48,470
curve that we would encode by BD and

00:13:45,970 --> 00:13:50,480
this is a general operation that you can

00:13:48,470 --> 00:13:52,610
apply to any simple closed curve and

00:13:50,480 --> 00:13:54,559
produce another simple closed curve in

00:13:52,610 --> 00:13:58,189
in naming the operation I would call

00:13:54,559 --> 00:13:59,899
this the twist around CD or T CD you can

00:13:58,189 --> 00:14:01,850
do this several times if you want and

00:13:59,899 --> 00:14:06,259
introduce more and more twisting in that

00:14:01,850 --> 00:14:08,180
ring the nice thing is that this

00:14:06,259 --> 00:14:09,980
operation that I just described is

00:14:08,180 --> 00:14:12,980
actually equivalent to a string

00:14:09,980 --> 00:14:15,379
operation doing this changes which curve

00:14:12,980 --> 00:14:17,149
you have and it does so in a predictable

00:14:15,379 --> 00:14:19,009
way all you need to know is the string

00:14:17,149 --> 00:14:21,529
representing the curve and you need to

00:14:19,009 --> 00:14:24,110
replace each C that appears with D and

00:14:21,529 --> 00:14:25,610
separately each D that appears within

00:14:24,110 --> 00:14:30,259
the original curve you replaced with

00:14:25,610 --> 00:14:32,959
capital D CD it's in fact true that each

00:14:30,259 --> 00:14:37,850
twist in one of those five basic curves

00:14:32,959 --> 00:14:39,679
a b b c c d e and e a the five simplest

00:14:37,850 --> 00:14:42,139
curves that I showed you before can be

00:14:39,679 --> 00:14:44,059
represented by a simple rule for how you

00:14:42,139 --> 00:14:46,429
replace each of the five characters a b

00:14:44,059 --> 00:14:47,660
c and d with other strings and the

00:14:46,429 --> 00:14:49,370
contents of this table are not so

00:14:47,660 --> 00:14:51,439
important what i want to highlight is

00:14:49,370 --> 00:14:53,300
the fact that this table exists all of

00:14:51,439 --> 00:14:55,040
these twisting operations which take

00:14:53,300 --> 00:14:57,889
simple curves and give you new simple

00:14:55,040 --> 00:15:01,939
curves are represented as tables of

00:14:57,889 --> 00:15:03,709
replacements for the five characters now

00:15:01,939 --> 00:15:06,589
what's the topological fact that makes

00:15:03,709 --> 00:15:09,920
this work it's that these operations

00:15:06,589 --> 00:15:12,170
suffice to turn any simple curve on the

00:15:09,920 --> 00:15:14,660
five hold sphere into any other you can

00:15:12,170 --> 00:15:17,410
it it's true that these twists in the

00:15:14,660 --> 00:15:20,089
five basic curves and their inverses

00:15:17,410 --> 00:15:21,769
applying those in some sequence can turn

00:15:20,089 --> 00:15:24,470
any simple closed curve on the five

00:15:21,769 --> 00:15:27,139
volts here into any other for that

00:15:24,470 --> 00:15:30,049
reason there is well because of that

00:15:27,139 --> 00:15:32,279
there is a natural algorithm you could

00:15:30,049 --> 00:15:34,529
use to produce a big list of simple

00:15:32,279 --> 00:15:36,600
you simply start with some curves that

00:15:34,529 --> 00:15:38,430
you know to be simple to begin with call

00:15:36,600 --> 00:15:41,040
those the seed curves and then you apply

00:15:38,430 --> 00:15:43,259
a bunch of twists say all of the twists

00:15:41,040 --> 00:15:44,790
in those basic curves then you get some

00:15:43,259 --> 00:15:47,490
new stuff call the new stuff the

00:15:44,790 --> 00:15:48,870
frontier then you apply twist to

00:15:47,490 --> 00:15:51,029
everything in the frontier to get some

00:15:48,870 --> 00:15:53,279
more new stuff the frontier evolve you

00:15:51,029 --> 00:15:54,959
keep going until your you decide that

00:15:53,279 --> 00:15:57,240
you're done or you run out of memory or

00:15:54,959 --> 00:15:59,819
disk space or the free tier on Amazon

00:15:57,240 --> 00:16:02,360
Web Services or whatever and then you

00:15:59,819 --> 00:16:05,660
say that's our that's our list of curves

00:16:02,360 --> 00:16:08,790
okay what I just told you is a lie

00:16:05,660 --> 00:16:10,800
because the twists don't always give you

00:16:08,790 --> 00:16:12,120
new things sometimes you're undoing a

00:16:10,800 --> 00:16:14,100
twist that you had just done at the

00:16:12,120 --> 00:16:16,079
previous step so the pictures a little

00:16:14,100 --> 00:16:18,569
more complicated applying twists will

00:16:16,079 --> 00:16:20,550
give you a mixture of duplication things

00:16:18,569 --> 00:16:22,529
you've already seen and some new stuff

00:16:20,550 --> 00:16:25,079
but as long as you only remember the new

00:16:22,529 --> 00:16:27,360
stuff and apply the twist to those the

00:16:25,079 --> 00:16:28,980
same basic algorithm applies you apply

00:16:27,360 --> 00:16:30,870
all the twists to all than all the

00:16:28,980 --> 00:16:32,819
things on the frontier you filter out

00:16:30,870 --> 00:16:34,949
what's genuinely new and then you do the

00:16:32,819 --> 00:16:37,889
same thing again you get some big lists

00:16:34,949 --> 00:16:40,079
of curves so let's see what that that

00:16:37,889 --> 00:16:43,470
new algorithm the twist based generator

00:16:40,079 --> 00:16:45,629
would look like in Python code so let's

00:16:43,470 --> 00:16:48,720
assume here that you already have these

00:16:45,629 --> 00:16:51,079
functions ta be TBC and so on that

00:16:48,720 --> 00:16:54,180
perform those replacements on the string

00:16:51,079 --> 00:16:56,639
the Python set data type is perfect for

00:16:54,180 --> 00:16:58,230
this kind of thing it is it's meant for

00:16:56,639 --> 00:17:00,990
storing collections of distinct elements

00:16:58,230 --> 00:17:03,300
so it takes care of filtering duplicates

00:17:00,990 --> 00:17:05,909
out for you and it supports efficient

00:17:03,300 --> 00:17:08,069
boolean operations so in this case what

00:17:05,909 --> 00:17:10,110
we can do is have a collection of curves

00:17:08,069 --> 00:17:12,209
that's initially the empty set have a

00:17:10,110 --> 00:17:14,760
frontier which is everything that is

00:17:12,209 --> 00:17:16,530
brand new at this step which is

00:17:14,760 --> 00:17:18,329
initialized to just contain our seed

00:17:16,530 --> 00:17:20,490
curves and then we do the following

00:17:18,329 --> 00:17:23,370
three lines of Python however many times

00:17:20,490 --> 00:17:26,100
is the depth we want in this kind of

00:17:23,370 --> 00:17:28,439
tree of possible twisting operations so

00:17:26,100 --> 00:17:32,309
what you do is here using a Python set

00:17:28,439 --> 00:17:34,890
comprehension you apply every twist T to

00:17:32,309 --> 00:17:36,929
every curve X in the frontier and take a

00:17:34,890 --> 00:17:40,830
set of all of those so this filters some

00:17:36,929 --> 00:17:42,480
duplicates we call that latest then we

00:17:40,830 --> 00:17:45,600
need to calculate the frontier which is

00:17:42,480 --> 00:17:46,180
all the latest curves but removing any

00:17:45,600 --> 00:17:48,040
that we have

00:17:46,180 --> 00:17:49,930
before so this is taking the difference

00:17:48,040 --> 00:17:53,230
of the two sets which is supported by

00:17:49,930 --> 00:17:54,730
Python set datatype and then finally you

00:17:53,230 --> 00:17:56,980
should make a note of the fact that now

00:17:54,730 --> 00:17:59,080
the frontier has been seen and add it to

00:17:56,980 --> 00:18:01,720
your big bag of curves with this update

00:17:59,080 --> 00:18:04,810
call update could be called take Union

00:18:01,720 --> 00:18:06,700
width so after this call curves is equal

00:18:04,810 --> 00:18:11,260
to the union of the old curves and

00:18:06,700 --> 00:18:14,290
frontier so this is the the generator

00:18:11,260 --> 00:18:16,030
now we have some gigantic collection of

00:18:14,290 --> 00:18:17,530
simple curves of the five hold sphere

00:18:16,030 --> 00:18:19,270
represented by words and we have to

00:18:17,530 --> 00:18:22,900
decide where to put them how to make a

00:18:19,270 --> 00:18:25,120
good picture so this is was actually the

00:18:22,900 --> 00:18:27,940
inspiration for the project was that in

00:18:25,120 --> 00:18:30,940
1986 the mathematician William Thurston

00:18:27,940 --> 00:18:33,460
described a way to associate four

00:18:30,940 --> 00:18:36,490
dimensional vectors to curves on the

00:18:33,460 --> 00:18:38,500
five hold sphere in fact he described a

00:18:36,490 --> 00:18:41,290
way to associate a vector in some space

00:18:38,500 --> 00:18:44,200
to a curve on any surface and we're just

00:18:41,290 --> 00:18:45,880
doing what is the simplest case the case

00:18:44,200 --> 00:18:48,760
where it's only four dimensions and so

00:18:45,880 --> 00:18:50,950
there's some chance of visualizing it so

00:18:48,760 --> 00:18:52,780
I will tell you in a moment what how

00:18:50,950 --> 00:18:54,310
this calculation of the four dimensional

00:18:52,780 --> 00:18:56,650
vector works but what you should know

00:18:54,310 --> 00:18:58,270
right now is that the resulting cloud of

00:18:56,650 --> 00:19:00,430
points in four dimensional space doesn't

00:18:58,270 --> 00:19:02,170
go everywhere they end up clustering

00:19:00,430 --> 00:19:04,780
around a surface in three-dimensional

00:19:02,170 --> 00:19:06,730
space in four dimensional space it's a

00:19:04,780 --> 00:19:08,380
hyper surface and so it's a three

00:19:06,730 --> 00:19:10,540
dimensional object sitting inside a four

00:19:08,380 --> 00:19:12,520
space and that object that these curves

00:19:10,540 --> 00:19:14,740
cluster along that they densely fill

00:19:12,520 --> 00:19:17,110
that's the thing that is called PML or

00:19:14,740 --> 00:19:18,160
projective visualization space but we'll

00:19:17,110 --> 00:19:20,920
just be talking about the cloud of

00:19:18,160 --> 00:19:22,930
points we know all right so now I have

00:19:20,920 --> 00:19:24,220
to do this is the only point at which I

00:19:22,930 --> 00:19:25,000
think I really have to take a rabbit out

00:19:24,220 --> 00:19:27,160
of a hat

00:19:25,000 --> 00:19:28,570
I can't I can't tell you all about

00:19:27,160 --> 00:19:30,610
hyperbolic geometry though I would love

00:19:28,570 --> 00:19:32,440
to but I'll tell you

00:19:30,610 --> 00:19:33,610
functionally speaking what hyperbolic

00:19:32,440 --> 00:19:36,340
geometry gives you in this whole

00:19:33,610 --> 00:19:39,040
procedure so it turns out that you can

00:19:36,340 --> 00:19:42,340
take the five whole sphere and associate

00:19:39,040 --> 00:19:45,160
to it a beautiful tiling picture a

00:19:42,340 --> 00:19:46,720
tiling by Pentagon's not of the plane

00:19:45,160 --> 00:19:47,620
that not of the Euclidean plane that

00:19:46,720 --> 00:19:50,710
we're familiar with but it's a

00:19:47,620 --> 00:19:52,210
hyperbolic plane and this is a picture

00:19:50,710 --> 00:19:53,830
of one of those objects it looks kind of

00:19:52,210 --> 00:19:56,020
like an MC Escher print if you've ever

00:19:53,830 --> 00:19:57,080
seen one of those like circle limit one

00:19:56,020 --> 00:19:59,600
through four

00:19:57,080 --> 00:20:02,870
and here's what you can do using one of

00:19:59,600 --> 00:20:06,440
these tie links and any curve X on the 5

00:20:02,870 --> 00:20:09,320
volt sphere you can get by some magic a

00:20:06,440 --> 00:20:11,360
2 by 2 matrix I'll call it row of X here

00:20:09,320 --> 00:20:12,770
and then by looking at the numbers that

00:20:11,360 --> 00:20:15,350
appear in that matrix you can calculate

00:20:12,770 --> 00:20:17,090
a length for the curve that length is a

00:20:15,350 --> 00:20:18,380
hyperbolic length now the Euclidean

00:20:17,090 --> 00:20:20,600
length but it doesn't matter it's just

00:20:18,380 --> 00:20:22,160
some number so let me just quickly

00:20:20,600 --> 00:20:23,930
sketch what the calculation would look

00:20:22,160 --> 00:20:26,630
like it turned out that the tiling

00:20:23,930 --> 00:20:28,220
directly gives you the 2 by 2 matrices

00:20:26,630 --> 00:20:32,660
that you should associate to the

00:20:28,220 --> 00:20:34,490
generators a b c d and d and then if you

00:20:32,660 --> 00:20:36,800
want to calculate the matrix usage

00:20:34,490 --> 00:20:39,380
associate to some other words like a b c

00:20:36,800 --> 00:20:40,790
b what you do is you take the product of

00:20:39,380 --> 00:20:43,190
the matrices corresponding to those

00:20:40,790 --> 00:20:45,140
individual letters then you get some

00:20:43,190 --> 00:20:47,180
matrix out of it to calculate the length

00:20:45,140 --> 00:20:49,070
you then substitute the sum of the

00:20:47,180 --> 00:20:50,810
diagonal entries of the matrix into some

00:20:49,070 --> 00:20:52,640
trig function which doesn't matter and

00:20:50,810 --> 00:20:54,470
you get a number out of it so this is a

00:20:52,640 --> 00:20:55,550
machine for taking a curve and a tiling

00:20:54,470 --> 00:20:58,220
and getting a number

00:20:55,550 --> 00:21:00,020
Thurston's great idea was there isn't

00:20:58,220 --> 00:21:02,120
just one tiling of the hyperbolic plane

00:21:00,020 --> 00:21:03,470
you can use there are many so let's

00:21:02,120 --> 00:21:05,930
consider what happens when you make an

00:21:03,470 --> 00:21:08,240
adjustment to the tiling so you move the

00:21:05,930 --> 00:21:10,130
tiling a little bit then everything in

00:21:08,240 --> 00:21:12,380
the picture changes there's a change to

00:21:10,130 --> 00:21:14,810
each of the matrices and there's a

00:21:12,380 --> 00:21:17,120
change to the link so now we get not

00:21:14,810 --> 00:21:20,090
just a length associated to X but also a

00:21:17,120 --> 00:21:22,850
change in length associated to this way

00:21:20,090 --> 00:21:24,530
of modifying the tiler why four

00:21:22,850 --> 00:21:26,150
dimensional space appears in this whole

00:21:24,530 --> 00:21:28,400
problem is that there are four

00:21:26,150 --> 00:21:30,710
essentially different ways of modifying

00:21:28,400 --> 00:21:33,350
the Thailand so if you repeat this same

00:21:30,710 --> 00:21:35,960
procedure for four different ways of

00:21:33,350 --> 00:21:40,040
adjusting the tiling you get four delta

00:21:35,960 --> 00:21:42,140
length quantities associated to X so

00:21:40,040 --> 00:21:44,480
assemble those into a vector with four

00:21:42,140 --> 00:21:46,610
components and that's what you could

00:21:44,480 --> 00:21:48,290
call D lengths the differential of

00:21:46,610 --> 00:21:52,550
length it tells you how length changes

00:21:48,290 --> 00:21:55,820
is you adjust the time so how would a

00:21:52,550 --> 00:21:57,920
calculation of this look in Python maybe

00:21:55,820 --> 00:21:59,720
I won't go into a lot of detail about

00:21:57,920 --> 00:22:03,260
the method that's displayed here which

00:21:59,720 --> 00:22:05,450
is a factory function but let me just

00:22:03,260 --> 00:22:07,550
say that the core is you do it using

00:22:05,450 --> 00:22:08,190
numpy x' matrix algebra which is very

00:22:07,550 --> 00:22:11,009
nice

00:22:08,190 --> 00:22:12,929
and we use a recursive method you take a

00:22:11,009 --> 00:22:14,879
given word X that you're trying to

00:22:12,929 --> 00:22:17,220
compute the matrix for and you split it

00:22:14,879 --> 00:22:19,169
into two parts the first part and the

00:22:17,220 --> 00:22:21,090
last part that each has roughly half of

00:22:19,169 --> 00:22:23,549
the letters you calculate the matrix

00:22:21,090 --> 00:22:25,320
associated to each of those halves by

00:22:23,549 --> 00:22:27,840
making a recursive call to this function

00:22:25,320 --> 00:22:30,750
row and then you take the matrix product

00:22:27,840 --> 00:22:32,879
of those two so this recursively splits

00:22:30,750 --> 00:22:34,379
a long word into smaller pieces until

00:22:32,879 --> 00:22:37,169
you get down to a base case in which

00:22:34,379 --> 00:22:38,700
case you just use the matrix associated

00:22:37,169 --> 00:22:42,690
to that generator according to your

00:22:38,700 --> 00:22:45,389
tiling so this kind of because the call

00:22:42,690 --> 00:22:46,799
is is quite efficient and the other base

00:22:45,389 --> 00:22:48,450
case I should have mentioned is if you

00:22:46,799 --> 00:22:54,000
start with the empty string you should

00:22:48,450 --> 00:22:55,500
return the identity matrix okay maybe

00:22:54,000 --> 00:22:58,769
I'll summarize this next part just by

00:22:55,500 --> 00:23:00,629
saying that once you can calculate the

00:22:58,769 --> 00:23:02,429
length associated with a curve you can

00:23:00,629 --> 00:23:04,470
calculate the differential of length

00:23:02,429 --> 00:23:06,990
associated with a change in tiling just

00:23:04,470 --> 00:23:09,000
by taking differences okay so what do

00:23:06,990 --> 00:23:11,850
you get out of this you get a big list

00:23:09,000 --> 00:23:14,750
of four dimensional vectors associated

00:23:11,850 --> 00:23:17,129
with all of those simple closed curves

00:23:14,750 --> 00:23:18,210
the next problem you encounter though is

00:23:17,129 --> 00:23:19,980
that four dimensional space is

00:23:18,210 --> 00:23:24,269
relatively difficult to visualize I

00:23:19,980 --> 00:23:26,460
don't it is for me talk to me afterward

00:23:24,269 --> 00:23:29,309
if you are uniquely skilled in seeing

00:23:26,460 --> 00:23:31,139
four dimensional spaces so we use a

00:23:29,309 --> 00:23:33,000
dimensional reduction technique to

00:23:31,139 --> 00:23:35,279
address this where we take this kind of

00:23:33,000 --> 00:23:37,769
hyper surface in four dimensional space

00:23:35,279 --> 00:23:40,019
here it's shown as a square that has a

00:23:37,769 --> 00:23:42,149
cloud of points sitting around it we

00:23:40,019 --> 00:23:44,159
inflate it to be a sphere and then we

00:23:42,149 --> 00:23:46,200
open up the sphere and we flatten it out

00:23:44,159 --> 00:23:47,759
onto three dimensional space the

00:23:46,200 --> 00:23:49,500
specific way that we do it is not so

00:23:47,759 --> 00:23:51,269
important you're probably familiar with

00:23:49,500 --> 00:23:52,919
things like the Mercator projection that

00:23:51,269 --> 00:23:54,840
take the Earth's surface and spread them

00:23:52,919 --> 00:23:55,919
out onto a two-dimensional plane even

00:23:54,840 --> 00:23:57,929
though the earth sits in the

00:23:55,919 --> 00:23:59,850
3-dimensional space we do something

00:23:57,929 --> 00:24:02,309
similar called stereographic projection

00:23:59,850 --> 00:24:04,799
that opens up the spearing flattens it

00:24:02,309 --> 00:24:06,480
out onto a three dimensional three

00:24:04,799 --> 00:24:08,669
dimensional hyper plane inside of our

00:24:06,480 --> 00:24:10,259
for the formula Florida is at the bottom

00:24:08,669 --> 00:24:12,000
but just think of it as a dimensional

00:24:10,259 --> 00:24:13,740
reduction step that introduces

00:24:12,000 --> 00:24:15,179
distortion but lets you see a four

00:24:13,740 --> 00:24:18,750
dimensional data set with just three

00:24:15,179 --> 00:24:19,730
variables so after you do all this what

00:24:18,750 --> 00:24:22,720
you have

00:24:19,730 --> 00:24:26,510
what you would have is a big list of

00:24:22,720 --> 00:24:28,970
maybe a million or two million rows that

00:24:26,510 --> 00:24:31,310
tell you a word representing a simple

00:24:28,970 --> 00:24:32,960
closed curve maybe you might want to

00:24:31,310 --> 00:24:35,810
keep the length of that curve around and

00:24:32,960 --> 00:24:38,510
then these three variables XY and Z that

00:24:35,810 --> 00:24:40,490
represents the projected version of the

00:24:38,510 --> 00:24:44,480
sensitivity of that length to different

00:24:40,490 --> 00:24:46,760
changes in the tiling here's an idea

00:24:44,480 --> 00:24:48,890
rather than just rendering points to

00:24:46,760 --> 00:24:51,140
display this it might be a good idea to

00:24:48,890 --> 00:24:53,150
make the short curves more prominent

00:24:51,140 --> 00:24:56,330
simply because they are fewer in number

00:24:53,150 --> 00:24:59,120
and they represent allow you to see the

00:24:56,330 --> 00:25:01,010
important features of the set of curves

00:24:59,120 --> 00:25:02,810
in your picture more readily if you

00:25:01,010 --> 00:25:04,520
highlight the short curves so what we

00:25:02,810 --> 00:25:07,160
decided to do was to illustrate a curve

00:25:04,520 --> 00:25:08,900
using not a dot but a sphere and the

00:25:07,160 --> 00:25:10,400
radius of the sphere is inversely

00:25:08,900 --> 00:25:13,100
proportional to its length as a

00:25:10,400 --> 00:25:17,210
considered as a curve so the question

00:25:13,100 --> 00:25:21,020
then is what is your best choice for and

00:25:17,210 --> 00:25:22,460
I I wish I had gone to the previous

00:25:21,020 --> 00:25:23,930
lecture when we were considering this

00:25:22,460 --> 00:25:25,850
question what is a good way to use

00:25:23,930 --> 00:25:28,060
Python it's possible to make a picture

00:25:25,850 --> 00:25:29,990
of millions of spheres and our

00:25:28,060 --> 00:25:32,090
particular constraints in this problem

00:25:29,990 --> 00:25:36,290
where that real-time rendering is not

00:25:32,090 --> 00:25:38,240
essential to us but having an accurate

00:25:36,290 --> 00:25:41,240
picture that includes all of these

00:25:38,240 --> 00:25:45,050
millions of data points is so we decided

00:25:41,240 --> 00:25:47,180
to party like it's 1992 not with a

00:25:45,050 --> 00:25:50,180
refreshing Crystal Pepsi but with ray

00:25:47,180 --> 00:25:52,940
tracing so the technique we use to make

00:25:50,180 --> 00:25:56,840
this picture is to use the open-source

00:25:52,940 --> 00:25:58,820
ray tracer pov-ray which includes as one

00:25:56,840 --> 00:26:00,470
of its geometric primitives a sphere of

00:25:58,820 --> 00:26:01,870
a given radius centered at a point you

00:26:00,470 --> 00:26:04,520
don't have to deal with meshing

00:26:01,870 --> 00:26:06,830
triangles anything like that you can

00:26:04,520 --> 00:26:09,350
just say sphere at this point with this

00:26:06,830 --> 00:26:10,850
radius the great thing about Python for

00:26:09,350 --> 00:26:12,830
this part of the project is that python

00:26:10,850 --> 00:26:15,050
is great at talking to other languages

00:26:12,830 --> 00:26:17,420
other programs especially if it speaks

00:26:15,050 --> 00:26:20,990
any kind of text so in this case we

00:26:17,420 --> 00:26:23,660
simply take our data set and we write

00:26:20,990 --> 00:26:26,380
out a list of sphere primitives using

00:26:23,660 --> 00:26:28,670
the three coordinates computed from the

00:26:26,380 --> 00:26:31,710
differential of length calculation and

00:26:28,670 --> 00:26:34,860
one over the length of the curve used

00:26:31,710 --> 00:26:36,419
turns into the radius of the sphere if

00:26:34,860 --> 00:26:37,980
you take this and you append a little

00:26:36,419 --> 00:26:39,600
bit of boilerplate code at the beginning

00:26:37,980 --> 00:26:41,880
of the end to set up things like

00:26:39,600 --> 00:26:43,770
lighting in the camera then you get a

00:26:41,880 --> 00:26:46,580
full scene file that you can then feed

00:26:43,770 --> 00:26:48,630
into pov-ray and make some pictures with

00:26:46,580 --> 00:26:54,120
so now I'll just show you some of those

00:26:48,630 --> 00:26:57,929
pictures the first one is is just going

00:26:54,120 --> 00:27:00,210
to show you all the simple curves on the

00:26:57,929 --> 00:27:02,309
a large number of simple closed curves

00:27:00,210 --> 00:27:04,110
on the 5 punctured sphere shown in r3

00:27:02,309 --> 00:27:05,340
it's going to rotate in 3-dimensional

00:27:04,110 --> 00:27:07,500
space so that you can see it from

00:27:05,340 --> 00:27:09,059
different size this was produced by

00:27:07,500 --> 00:27:10,890
rendering individual frames and then

00:27:09,059 --> 00:27:15,029
later assembling them into a video file

00:27:10,890 --> 00:27:17,460
using ffmpeg so this was really

00:27:15,029 --> 00:27:19,260
satisfying I have a feeling that when

00:27:17,460 --> 00:27:21,539
the first time I got to look at this

00:27:19,260 --> 00:27:23,669
picture I filled away astronomers must

00:27:21,539 --> 00:27:26,309
feel when they see these cosmic

00:27:23,669 --> 00:27:28,590
background radiation and isotropy plots

00:27:26,309 --> 00:27:31,860
where you see ah i've always imagined

00:27:28,590 --> 00:27:33,840
how that how that must work but it's

00:27:31,860 --> 00:27:35,880
really satisfying to see it and you see

00:27:33,840 --> 00:27:38,610
that it has this intricate structure

00:27:35,880 --> 00:27:41,010
what you're looking at is the is somehow

00:27:38,610 --> 00:27:43,370
an intrinsic structure that exists in

00:27:41,010 --> 00:27:46,620
that five holed sphere in its topology

00:27:43,370 --> 00:27:48,929
reflected in this three dimensional data

00:27:46,620 --> 00:27:50,520
set this cloud of points and you might

00:27:48,929 --> 00:27:52,049
notice it has this kind of self similar

00:27:50,520 --> 00:27:54,090
structure little pieces of the picture

00:27:52,049 --> 00:27:57,360
end up looking like much like the whole

00:27:54,090 --> 00:27:59,549
picture that is basically because all

00:27:57,360 --> 00:28:01,649
these operations like twisting you can

00:27:59,549 --> 00:28:03,419
do them not just around the five basic

00:28:01,649 --> 00:28:05,100
curves but around any curve and that

00:28:03,419 --> 00:28:06,870
forces the picture to essentially look

00:28:05,100 --> 00:28:07,980
the same around every point as it does

00:28:06,870 --> 00:28:13,590
in the large scale

00:28:07,980 --> 00:28:15,419
I think I'll interrupt the rotation to

00:28:13,590 --> 00:28:17,690
show you another view of this that

00:28:15,419 --> 00:28:18,990
rotation was happening inside of

00:28:17,690 --> 00:28:20,970
3-dimensional space

00:28:18,990 --> 00:28:22,529
but remember the original object was in

00:28:20,970 --> 00:28:24,390
the four dimensional space so it makes

00:28:22,529 --> 00:28:27,480
sense to also take a four dimensional

00:28:24,390 --> 00:28:29,490
rotation of the object and then project

00:28:27,480 --> 00:28:32,130
that out to three space so what you're

00:28:29,490 --> 00:28:34,830
about to see now is a is an image of the

00:28:32,130 --> 00:28:38,130
same data set but rotating in a way that

00:28:34,830 --> 00:28:40,529
is not compatible with the stereographic

00:28:38,130 --> 00:28:42,029
projection so things appear to Bend and

00:28:40,529 --> 00:28:43,530
distort in this three dimensional

00:28:42,029 --> 00:28:44,760
projection

00:28:43,530 --> 00:28:47,190
to a 4-dimensional person this would

00:28:44,760 --> 00:28:50,640
just look like rotating around the

00:28:47,190 --> 00:28:52,140
z-axis so while this animation is

00:28:50,640 --> 00:28:53,730
playing I don't want to interrupt your

00:28:52,140 --> 00:28:54,960
enjoyment of it but maybe I'll point out

00:28:53,730 --> 00:28:56,640
some features in the picture do you

00:28:54,960 --> 00:28:59,940
notice that there are these five really

00:28:56,640 --> 00:29:03,750
big spheres here that are arranged from

00:28:59,940 --> 00:29:06,930
the Pentagon so can you imagine what so

00:29:03,750 --> 00:29:09,150
those have to represent five non

00:29:06,930 --> 00:29:13,260
peripheral simple closed curves that are

00:29:09,150 --> 00:29:14,760
arranged in some way that five non

00:29:13,260 --> 00:29:16,230
peripheral simple closed curves that

00:29:14,760 --> 00:29:19,320
because these spheres are very large

00:29:16,230 --> 00:29:22,050
they must be very short curves so what

00:29:19,320 --> 00:29:23,790
could they possibly be those are just

00:29:22,050 --> 00:29:25,770
the five basic curves that I talked

00:29:23,790 --> 00:29:28,590
about from the beginning a B BC C D and

00:29:25,770 --> 00:29:30,870
so on okay and similarly you could

00:29:28,590 --> 00:29:32,310
identify these second shortest ones that

00:29:30,870 --> 00:29:37,020
appear kind of to be coming toward you

00:29:32,310 --> 00:29:38,970
and those are the curves a C B D and so

00:29:37,020 --> 00:29:46,470
on that use two letters but not

00:29:38,970 --> 00:29:49,470
necessarily adjacent ones okay so I had

00:29:46,470 --> 00:29:50,940
maybe also just one more view of this

00:29:49,470 --> 00:29:52,410
this is combining rotations in

00:29:50,940 --> 00:29:55,440
3-dimensional space in four-dimensional

00:29:52,410 --> 00:29:57,030
space the point of looking at these

00:29:55,440 --> 00:29:58,890
different kinds of distortion operations

00:29:57,030 --> 00:30:00,540
is to get a feeling for what the

00:29:58,890 --> 00:30:01,530
four-dimensional data set looks like you

00:30:00,540 --> 00:30:03,870
need to be able to look at something

00:30:01,530 --> 00:30:05,640
like this and say sure the shape of it

00:30:03,870 --> 00:30:07,080
is not changing I'm just changing my

00:30:05,640 --> 00:30:10,110
viewpoint of this single four

00:30:07,080 --> 00:30:12,300
dimensional object so here you can see

00:30:10,110 --> 00:30:14,130
that the the five basic curves go from

00:30:12,300 --> 00:30:16,790
being an irregular Pentagon to being all

00:30:14,130 --> 00:30:16,790
along a straight line

00:30:20,249 --> 00:30:25,860
okay so I think I'm just about out of

00:30:22,899 --> 00:30:35,650
time so I'll stop there

00:30:25,860 --> 00:30:35,650
[Applause]

00:30:41,809 --> 00:30:51,350
you can ask to him wherever you want to

00:30:45,420 --> 00:30:51,350

YouTube URL: https://www.youtube.com/watch?v=HYVr-b46VJo


