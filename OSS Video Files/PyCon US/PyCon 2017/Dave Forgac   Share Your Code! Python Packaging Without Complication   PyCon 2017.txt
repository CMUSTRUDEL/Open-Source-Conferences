Title: Dave Forgac   Share Your Code! Python Packaging Without Complication   PyCon 2017
Publication date: 2017-05-21
Playlist: PyCon 2017
Description: 
	"Speaker: Dave Forgac

If you want people to use your code you should package it! You may have heard that packaging is hard but the Python packaging ecosystem has evolved a lot over the years. Taking your beautiful code and sharing it with the world is complex but it doesn't have to be complicated. In this talk you will learn how to take advantage of modern tooling and practices so you can get boring stuff out of the way, publish quickly and frequently, and focus on your code.

This talk will cover:

- A (brief) history of Python packaging
- Python Packaging User Guide recommendations
- Distribution formats
- Anatomy of a package
- Automating package creation
- Adding:
  - Testing
  - CI
  - Documentation
- Testing package installation
- Releasing to PyPI

This talk is for you if you're new to Python packaging and would like to learn how to share you code or if you've worked with Python for a while and just aren't up-to-date with the latest packaging practices. 

Slides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides"
Captions: 
	00:00:54,030 --> 00:01:01,530
hi everyone it's time for our first talk

00:00:57,300 --> 00:01:03,600
here on the Sunday of Pike on 2017 our

00:01:01,530 --> 00:01:05,280
speaker today is Dave for jak who's

00:01:03,600 --> 00:01:07,350
going to be telling us how to share our

00:01:05,280 --> 00:01:18,299
code placement packaging without

00:01:07,350 --> 00:01:27,750
complication please make him welcome of

00:01:18,299 --> 00:01:29,580
course the screen shot there we go

00:01:27,750 --> 00:01:31,860
okay so before we get started I just

00:01:29,580 --> 00:01:35,310
want to note that I'm covering a lot of

00:01:31,860 --> 00:01:39,539
topics briefly today so I'll have the

00:01:35,310 --> 00:01:41,850
slides notes and some further reading at

00:01:39,539 --> 00:01:43,500
the URL here on I'll have it up again at

00:01:41,850 --> 00:01:45,060
the end so you don't have to you don't

00:01:43,500 --> 00:01:48,630
have to catch it now that'll be there at

00:01:45,060 --> 00:01:51,450
the end so you write beautiful plays on

00:01:48,630 --> 00:01:54,000
code and if you think it'll be useful to

00:01:51,450 --> 00:01:55,710
others you want to share it and when you

00:01:54,000 --> 00:01:57,300
share it you want to do it in a way that

00:01:55,710 --> 00:01:59,820
people know how to download it and use

00:01:57,300 --> 00:02:02,579
it and you may even want to collaborate

00:01:59,820 --> 00:02:06,360
with other people to make your code

00:02:02,579 --> 00:02:08,600
better so you have the code you think I

00:02:06,360 --> 00:02:11,850
want to share it what do we need to do

00:02:08,600 --> 00:02:14,250
so the first thing is we need to package

00:02:11,850 --> 00:02:17,549
the code and upload it to the package

00:02:14,250 --> 00:02:19,980
index this allows people to download it

00:02:17,549 --> 00:02:24,359
and install it the way they expect via

00:02:19,980 --> 00:02:26,040
pip install I said we want people to

00:02:24,359 --> 00:02:29,850
know how to use the code so this means

00:02:26,040 --> 00:02:31,620
we need to have some documentation okay

00:02:29,850 --> 00:02:34,530
and if we want to be able to collaborate

00:02:31,620 --> 00:02:36,239
with people to make this code better we

00:02:34,530 --> 00:02:38,390
need to put it somewhere that they can

00:02:36,239 --> 00:02:41,130
access it and this usually means a

00:02:38,390 --> 00:02:45,209
source hosting like github bitbucket get

00:02:41,130 --> 00:02:47,040
lab something like that and then we want

00:02:45,209 --> 00:02:48,810
to make sure that when people make

00:02:47,040 --> 00:02:52,410
changes they don't break things so we

00:02:48,810 --> 00:02:54,600
need tests and we want the tests to run

00:02:52,410 --> 00:02:57,239
automatically so that we can see if any

00:02:54,600 --> 00:02:58,230
incoming changes break things so we

00:02:57,239 --> 00:03:02,849
should setup continuous integration

00:02:58,230 --> 00:03:04,860
service for our tests and we should have

00:03:02,849 --> 00:03:06,900
a license so that people know under what

00:03:04,860 --> 00:03:09,689
terms they can share the code and

00:03:06,900 --> 00:03:12,030
is a code and then it's a good idea to

00:03:09,689 --> 00:03:15,590
have a contributing document so that

00:03:12,030 --> 00:03:18,209
people know about how they can help you

00:03:15,590 --> 00:03:20,459
improve the code so this should include

00:03:18,209 --> 00:03:22,650
things like should they open an issue

00:03:20,459 --> 00:03:24,239
first or just submit a pull request I

00:03:22,650 --> 00:03:26,970
mean what kind of things you want help

00:03:24,239 --> 00:03:28,409
with for this project okay so we want to

00:03:26,970 --> 00:03:32,519
share the code and already we have this

00:03:28,409 --> 00:03:35,189
list of things that we need so you may

00:03:32,519 --> 00:03:38,159
be thinking that setting all of this

00:03:35,189 --> 00:03:42,989
sounds like a lot of work and it really

00:03:38,159 --> 00:03:44,940
would be but it's not quite so if you

00:03:42,989 --> 00:03:47,099
take just one thing away from this talk

00:03:44,940 --> 00:03:49,109
I hope it's this because someone's

00:03:47,099 --> 00:03:51,780
already done a lot of the work to get

00:03:49,109 --> 00:03:54,420
these things set up for you so use a

00:03:51,780 --> 00:03:56,819
tool like cookie cutter cookie cutter is

00:03:54,420 --> 00:04:01,409
a tool that helps you make new projects

00:03:56,819 --> 00:04:03,930
from existing templates templates exist

00:04:01,409 --> 00:04:06,389
for all kinds of different projects not

00:04:03,930 --> 00:04:10,109
even all just Python but there are some

00:04:06,389 --> 00:04:12,569
really good ones for developing Python

00:04:10,109 --> 00:04:15,900
packages and I have one of the good

00:04:12,569 --> 00:04:18,180
defaults linked with the notes so my

00:04:15,900 --> 00:04:20,970
recommendation is to start from one of

00:04:18,180 --> 00:04:26,580
these already developed templates and

00:04:20,970 --> 00:04:28,500
make the fork the project and update it

00:04:26,580 --> 00:04:31,169
with your preferences like if you're

00:04:28,500 --> 00:04:32,820
using different services different test

00:04:31,169 --> 00:04:35,010
frameworks and things like that and then

00:04:32,820 --> 00:04:39,300
you can make all of your new projects

00:04:35,010 --> 00:04:41,070
based on this template ok so before we

00:04:39,300 --> 00:04:42,539
go any further I want to go over a

00:04:41,070 --> 00:04:44,810
little bit of terminology just to make

00:04:42,539 --> 00:04:49,830
sure that we're using the same language

00:04:44,810 --> 00:04:52,789
so module is just Python code stored in

00:04:49,830 --> 00:04:55,650
a file so that it can be imported an

00:04:52,789 --> 00:04:59,520
import package is a directory structure

00:04:55,650 --> 00:05:02,520
for storing Python modules and then a

00:04:59,520 --> 00:05:04,199
distribution package is where you bundle

00:05:02,520 --> 00:05:07,530
up your code and share it with other

00:05:04,199 --> 00:05:09,750
people so they can install it so this

00:05:07,530 --> 00:05:11,099
talk is about sharing your code so for

00:05:09,750 --> 00:05:13,080
the rest of the talk if I just say

00:05:11,099 --> 00:05:15,779
package or Python package I'm referring

00:05:13,080 --> 00:05:18,570
to distribution packages unless I say

00:05:15,779 --> 00:05:20,880
otherwise now of course to make things

00:05:18,570 --> 00:05:23,960
more complex there are multiple types of

00:05:20,880 --> 00:05:26,850
packages there's a source distribution

00:05:23,960 --> 00:05:30,990
so this is what it sounds like it's the

00:05:26,850 --> 00:05:33,050
source code for your application and it

00:05:30,990 --> 00:05:35,910
includes extension source if you have

00:05:33,050 --> 00:05:39,750
like extensions in other languages like

00:05:35,910 --> 00:05:41,610
C so when you install a source

00:05:39,750 --> 00:05:45,960
distribution all these extensions are

00:05:41,610 --> 00:05:48,270
compiled at install time so then another

00:05:45,960 --> 00:05:51,090
type is a built distribution and these

00:05:48,270 --> 00:05:53,010
are built or compiled beforehand so that

00:05:51,090 --> 00:05:56,010
they just need to be unpacked at install

00:05:53,010 --> 00:05:58,470
time you may have seen reference to eggs

00:05:56,010 --> 00:06:00,470
this is an older format of distribution

00:05:58,470 --> 00:06:02,970
and there's a couple other older ones

00:06:00,470 --> 00:06:04,650
but wheel is the current built

00:06:02,970 --> 00:06:07,410
distribution format and you should be

00:06:04,650 --> 00:06:10,170
making them for your projects for a

00:06:07,410 --> 00:06:12,750
while the packaged index only supported

00:06:10,170 --> 00:06:15,180
uploading wheels for Windows and Mac but

00:06:12,750 --> 00:06:18,120
more recently the many Linux platform

00:06:15,180 --> 00:06:20,430
tag was developed which defines a

00:06:18,120 --> 00:06:23,760
lowest-common-denominator interface for

00:06:20,430 --> 00:06:27,600
linux systems so this allows you to make

00:06:23,760 --> 00:06:31,530
a wheel that will work on most modern

00:06:27,600 --> 00:06:33,780
linux systems so of course there are

00:06:31,530 --> 00:06:36,120
multiple types of wheels so let's talk

00:06:33,780 --> 00:06:38,490
about those real quick there's a

00:06:36,120 --> 00:06:40,740
universal wheel and this is one that

00:06:38,490 --> 00:06:43,770
contains only Python code and is

00:06:40,740 --> 00:06:46,530
compatible with Python 2 and 3 so it's

00:06:43,770 --> 00:06:48,780
going to be installed anywhere so that's

00:06:46,530 --> 00:06:51,090
why it's called the universal wheel then

00:06:48,780 --> 00:06:54,150
there's the pure Python wheel and this

00:06:51,090 --> 00:06:57,630
is one that is specific to either 2 or 3

00:06:54,150 --> 00:07:00,810
but it's still only Python code and then

00:06:57,630 --> 00:07:04,440
there's the platform wheel and so these

00:07:00,810 --> 00:07:07,320
are files that contain all the compiled

00:07:04,440 --> 00:07:09,210
code for a specific target platform and

00:07:07,320 --> 00:07:14,760
so you need to build one for every

00:07:09,210 --> 00:07:16,410
platform you wish to support ok so this

00:07:14,760 --> 00:07:19,740
is going to be the really short version

00:07:16,410 --> 00:07:22,470
of packaging history so the packaging

00:07:19,740 --> 00:07:25,020
ecosystem grew organically for a long

00:07:22,470 --> 00:07:27,660
time and for a while it wasn't clear

00:07:25,020 --> 00:07:29,040
what was considered best practice if you

00:07:27,660 --> 00:07:31,740
searched online you'd find a lot of

00:07:29,040 --> 00:07:33,510
conflicting information about how to how

00:07:31,740 --> 00:07:34,360
to do these things and almost always

00:07:33,510 --> 00:07:38,979
with a really strong

00:07:34,360 --> 00:07:40,960
piñon so the way I went about packaging

00:07:38,979 --> 00:07:43,330
was I found a project that seemed like

00:07:40,960 --> 00:07:45,789
they they knew what they were doing and

00:07:43,330 --> 00:07:47,919
I copied the code copied their settings

00:07:45,789 --> 00:07:51,009
replaced the code with mine search to

00:07:47,919 --> 00:07:52,330
replace the name and release the package

00:07:51,009 --> 00:07:55,330
but I never really understood what was

00:07:52,330 --> 00:07:58,599
going on and I wasn't sure that I was

00:07:55,330 --> 00:08:02,080
doing things the right way then in 2011

00:07:58,599 --> 00:08:04,539
the Python packaging Authority a working

00:08:02,080 --> 00:08:06,310
group was created and it took over the

00:08:04,539 --> 00:08:09,250
maintenance of core packaging tools and

00:08:06,310 --> 00:08:10,509
they've since worked on making some

00:08:09,250 --> 00:08:13,319
really great improvements to this

00:08:10,509 --> 00:08:15,400
packaging ecosystem and one of the

00:08:13,319 --> 00:08:17,139
besides the tooling and the

00:08:15,400 --> 00:08:19,509
specifications one of the the big

00:08:17,139 --> 00:08:21,580
improvements is that they took over

00:08:19,509 --> 00:08:25,259
maintainer ship of the Python packaging

00:08:21,580 --> 00:08:27,879
user guide so now there's a guide that

00:08:25,259 --> 00:08:30,789
gives you authority of information for

00:08:27,879 --> 00:08:33,820
how you should build Python packages and

00:08:30,789 --> 00:08:34,839
so the rest of this talk tries to show

00:08:33,820 --> 00:08:38,469
you how you can build a package

00:08:34,839 --> 00:08:42,789
following that guide ok so let's go

00:08:38,469 --> 00:08:45,579
ahead and make a new package so we're

00:08:42,789 --> 00:08:47,620
going to be using cookie cutter and the

00:08:45,579 --> 00:08:49,810
way cookie cutter works is you just

00:08:47,620 --> 00:08:53,560
provide it with a template it can be a

00:08:49,810 --> 00:08:56,620
location on disk or a github repo it

00:08:53,560 --> 00:08:58,510
will prompt you for some just general

00:08:56,620 --> 00:09:00,490
information about the package or the

00:08:58,510 --> 00:09:01,709
project you want to build and then it

00:09:00,490 --> 00:09:06,010
generates a directory structure

00:09:01,709 --> 00:09:08,670
customized with your input this is the

00:09:06,010 --> 00:09:10,570
layout of a very minimal Python package

00:09:08,670 --> 00:09:12,550
so most templates are going to have a

00:09:10,570 --> 00:09:15,640
lot more than this but this is kind of

00:09:12,550 --> 00:09:19,779
the bare minimum so the first part is

00:09:15,640 --> 00:09:21,550
your code the the cookie cutter template

00:09:19,779 --> 00:09:24,070
made a directory for the code and then

00:09:21,550 --> 00:09:26,170
we put our code in that directory a

00:09:24,070 --> 00:09:28,839
really common pattern is to store the

00:09:26,170 --> 00:09:32,980
code in an import package with the same

00:09:28,839 --> 00:09:37,060
name as the project now the most

00:09:32,980 --> 00:09:40,750
important file for the packaging and

00:09:37,060 --> 00:09:43,779
distribution is the setup PI this

00:09:40,750 --> 00:09:45,970
contains information that's used during

00:09:43,779 --> 00:09:47,830
installation and by the packaged index

00:09:45,970 --> 00:09:52,660
so that it knows about

00:09:47,830 --> 00:09:56,200
you know what this code is doing it is

00:09:52,660 --> 00:09:59,019
just a Python file so you can do fancy

00:09:56,200 --> 00:10:02,170
things in it but you shouldn't so don't

00:09:59,019 --> 00:10:05,920
be clever here just follow the follow

00:10:02,170 --> 00:10:10,000
the the minimum that is already provided

00:10:05,920 --> 00:10:13,149
in the template setup that CFG is a

00:10:10,000 --> 00:10:16,690
configuration file that often goes along

00:10:13,149 --> 00:10:20,290
with the setup PI it usually has

00:10:16,690 --> 00:10:22,779
settings for a building and packaging

00:10:20,290 --> 00:10:24,250
plugins so wheel is the most common

00:10:22,779 --> 00:10:27,670
thing that you'll see settings for here

00:10:24,250 --> 00:10:28,899
and then if you have like test

00:10:27,670 --> 00:10:33,430
frameworks and things like that you can

00:10:28,899 --> 00:10:36,490
also store settings there by default

00:10:33,430 --> 00:10:38,829
your Python code will be included when

00:10:36,490 --> 00:10:41,440
you build a distribution package but if

00:10:38,829 --> 00:10:43,959
you have any other non Python files that

00:10:41,440 --> 00:10:45,100
need to be included when the when the

00:10:43,959 --> 00:10:47,290
thing is installed they need to be

00:10:45,100 --> 00:10:49,480
listed in this manifest file called

00:10:47,290 --> 00:10:52,660
manifest in um this is typically used

00:10:49,480 --> 00:10:56,920
for things like data files configuration

00:10:52,660 --> 00:10:58,510
and documentation and then finally we

00:10:56,920 --> 00:11:00,279
have a readme file and this is what

00:10:58,510 --> 00:11:03,760
people see when they browse your project

00:11:00,279 --> 00:11:05,350
on source hosting it's also commonly

00:11:03,760 --> 00:11:08,110
used as the long description on the

00:11:05,350 --> 00:11:09,640
packaging index so this should contain

00:11:08,110 --> 00:11:12,670
general information about what your code

00:11:09,640 --> 00:11:15,579
does basic basic usage instructions and

00:11:12,670 --> 00:11:18,940
then where to find more information like

00:11:15,579 --> 00:11:22,779
a link to your documentation ok so let's

00:11:18,940 --> 00:11:25,570
look at the setup pi the first thing it

00:11:22,779 --> 00:11:27,730
does is it imports setup and optionally

00:11:25,570 --> 00:11:30,399
this helper called find packages from

00:11:27,730 --> 00:11:32,410
setup tools and then all of the

00:11:30,399 --> 00:11:36,100
packaging configuration is provided as

00:11:32,410 --> 00:11:37,870
arguments to this setup function here

00:11:36,100 --> 00:11:40,260
there's just basic packaging meta

00:11:37,870 --> 00:11:43,000
information like the name the version

00:11:40,260 --> 00:11:46,839
descriptions info about the authors

00:11:43,000 --> 00:11:49,029
stuff like that and then you define

00:11:46,839 --> 00:11:51,670
which packages should be included in

00:11:49,029 --> 00:11:53,560
this distribution these can be listed

00:11:51,670 --> 00:11:55,779
manually or you can use this find

00:11:53,560 --> 00:11:58,779
package helper which will discover any

00:11:55,779 --> 00:12:01,930
packages any import packages that are in

00:11:58,779 --> 00:12:04,210
the directory structure and then you you

00:12:01,930 --> 00:12:06,250
names of directories that should not be

00:12:04,210 --> 00:12:09,220
included so if you don't want the docs

00:12:06,250 --> 00:12:13,750
or the test to be in the installation

00:12:09,220 --> 00:12:16,000
you can exclude those install requires

00:12:13,750 --> 00:12:18,070
is what's used to determine the

00:12:16,000 --> 00:12:20,740
dependencies of your package at install

00:12:18,070 --> 00:12:22,810
time so when you pip install the package

00:12:20,740 --> 00:12:25,690
things listed here will get installed

00:12:22,810 --> 00:12:27,250
before your package gets installed note

00:12:25,690 --> 00:12:30,070
that this is different than requirements

00:12:27,250 --> 00:12:33,130
text we'll look at that briefly in a

00:12:30,070 --> 00:12:35,560
moment but I've linked to a page that

00:12:33,130 --> 00:12:37,030
would take a half hour to read that

00:12:35,560 --> 00:12:39,100
explains the details between

00:12:37,030 --> 00:12:42,420
requirements that text and install

00:12:39,100 --> 00:12:45,610
requires so go ahead and check that out

00:12:42,420 --> 00:12:48,100
and then the package data allows you to

00:12:45,610 --> 00:12:49,630
define extra files that will get

00:12:48,100 --> 00:12:53,050
included in your package and when you

00:12:49,630 --> 00:12:55,510
use this directive it exposes it to your

00:12:53,050 --> 00:12:57,960
code via the name on the left so that

00:12:55,510 --> 00:13:01,450
you don't have to worry about

00:12:57,960 --> 00:13:03,910
calculating the path at runtime so in

00:13:01,450 --> 00:13:05,830
your application you can just reference

00:13:03,910 --> 00:13:09,630
in this case sample and it would know

00:13:05,830 --> 00:13:13,450
where to find this package data file

00:13:09,630 --> 00:13:16,600
moving down the set up PI entry points

00:13:13,450 --> 00:13:20,170
define interfaces and so this is

00:13:16,600 --> 00:13:22,270
commonly used for defining plugins but

00:13:20,170 --> 00:13:26,050
there's a special type of entry point

00:13:22,270 --> 00:13:28,240
called console scripts so this creates a

00:13:26,050 --> 00:13:30,210
command that maps from the name on the

00:13:28,240 --> 00:13:32,260
left to the Python code on the right

00:13:30,210 --> 00:13:37,110
it's good to use this instead of just

00:13:32,260 --> 00:13:39,220
including binary scripts in your our

00:13:37,110 --> 00:13:41,290
executable scripts in your package

00:13:39,220 --> 00:13:44,590
because it's going to do the right thing

00:13:41,290 --> 00:13:46,870
depending on the installation platform

00:13:44,590 --> 00:13:50,830
so on Linux and Mac it's going to create

00:13:46,870 --> 00:13:53,050
a small wrapper script in this case

00:13:50,830 --> 00:13:54,820
called hello that's going to map to that

00:13:53,050 --> 00:13:57,550
code and on Windows it's going to create

00:13:54,820 --> 00:13:59,460
a small exe file that will know how to

00:13:57,550 --> 00:14:03,790
find the right Python interpreter and

00:13:59,460 --> 00:14:06,010
where to find your code here we can

00:14:03,790 --> 00:14:08,730
define the license so we can tell people

00:14:06,010 --> 00:14:11,890
what license the code is released under

00:14:08,730 --> 00:14:15,100
and then we have what are called trove

00:14:11,890 --> 00:14:18,000
classifiers and so these X

00:14:15,100 --> 00:14:20,860
information about your package and

00:14:18,000 --> 00:14:22,780
really commonly it's used to indicate

00:14:20,860 --> 00:14:25,510
what versions of Python you intend to

00:14:22,780 --> 00:14:28,630
support just note that nothing actually

00:14:25,510 --> 00:14:31,960
uses these values right now it's just

00:14:28,630 --> 00:14:37,960
saying advertising that yeah I intend to

00:14:31,960 --> 00:14:42,090
support 2 7 & 3 4 3 5 3 6 if the setup

00:14:37,960 --> 00:14:45,820
that CFG file is just in any style

00:14:42,090 --> 00:14:48,130
configuration it has settings for your

00:14:45,820 --> 00:14:51,160
build plugins so in this case a setting

00:14:48,130 --> 00:14:53,950
for wheel telling the build system that

00:14:51,160 --> 00:14:55,930
this is a universal wheel and it can

00:14:53,950 --> 00:15:00,760
include settings for things like flake 8

00:14:55,930 --> 00:15:04,690
and tests the manifest in allows you to

00:15:00,760 --> 00:15:06,790
explicitly include or exclude files or

00:15:04,690 --> 00:15:12,640
directories from the package that gets

00:15:06,790 --> 00:15:14,500
built and then readme is typically

00:15:12,640 --> 00:15:16,870
written in the restructured text format

00:15:14,500 --> 00:15:18,610
and it should include the basic

00:15:16,870 --> 00:15:20,590
information about the package and like I

00:15:18,610 --> 00:15:24,370
said it should include a link to where

00:15:20,590 --> 00:15:26,890
your documentation lives in addition to

00:15:24,370 --> 00:15:28,510
listing the license in the setup pie you

00:15:26,890 --> 00:15:30,850
should also have a separate license file

00:15:28,510 --> 00:15:33,420
just to make it really clear the terms

00:15:30,850 --> 00:15:35,950
under which you're releasing the code

00:15:33,420 --> 00:15:38,140
you should really copy one of the common

00:15:35,950 --> 00:15:41,620
open-source licenses unless your lawyer

00:15:38,140 --> 00:15:43,540
tells you to do otherwise so again

00:15:41,620 --> 00:15:45,370
that's another place don't don't try to

00:15:43,540 --> 00:15:47,980
get clever

00:15:45,370 --> 00:15:50,350
you should have tests now even if this

00:15:47,980 --> 00:15:52,840
is just an experimental project you

00:15:50,350 --> 00:15:56,020
really should have at least a test that

00:15:52,840 --> 00:15:58,450
goes over the most basic use case of

00:15:56,020 --> 00:16:00,730
your program and then if you're looking

00:15:58,450 --> 00:16:02,020
to improve coverage you might want to

00:16:00,730 --> 00:16:03,250
note that in your contributing

00:16:02,020 --> 00:16:05,650
instructions that you're looking for

00:16:03,250 --> 00:16:08,620
help with test coverage but people are a

00:16:05,650 --> 00:16:10,930
lot more likely to help you expand upon

00:16:08,620 --> 00:16:13,450
existing tests than they are to just

00:16:10,930 --> 00:16:15,340
create them for you from scratch so your

00:16:13,450 --> 00:16:19,030
template should include a test directory

00:16:15,340 --> 00:16:20,830
with some stubs and then configuration

00:16:19,030 --> 00:16:27,100
for running the tests using the tool

00:16:20,830 --> 00:16:28,470
like tox you should again like the tests

00:16:27,100 --> 00:16:30,570
you should have at least min

00:16:28,470 --> 00:16:31,890
Molde documentation one of the good

00:16:30,570 --> 00:16:33,900
things about using these templates is

00:16:31,890 --> 00:16:36,300
they'll build out a really good

00:16:33,900 --> 00:16:38,700
documentation structure for you and you

00:16:36,300 --> 00:16:40,350
just need to fill in some details and

00:16:38,700 --> 00:16:42,270
again people are a lot more likely to

00:16:40,350 --> 00:16:44,070
help you expand on documentation than

00:16:42,270 --> 00:16:47,160
they are to just create documentation

00:16:44,070 --> 00:16:48,570
for your project wholesale so at minimum

00:16:47,160 --> 00:16:52,140
you should at least start with you

00:16:48,570 --> 00:16:53,970
should usage information and then our

00:16:52,140 --> 00:16:59,010
templates going to include configuration

00:16:53,970 --> 00:17:00,750
for continuous integration so the most

00:16:59,010 --> 00:17:02,630
common one for open source projects

00:17:00,750 --> 00:17:04,500
right now is Travis but there are others

00:17:02,630 --> 00:17:07,260
so it doesn't matter which one you use

00:17:04,500 --> 00:17:09,210
but the configuration for this should

00:17:07,260 --> 00:17:13,350
live in your template so that it gets

00:17:09,210 --> 00:17:14,850
generated automatically and then the

00:17:13,350 --> 00:17:16,800
requirements are text file now this

00:17:14,850 --> 00:17:19,260
serves a different purpose than install

00:17:16,800 --> 00:17:21,120
requires like I said and there's a

00:17:19,260 --> 00:17:23,280
there's a really good post with the the

00:17:21,120 --> 00:17:26,100
differences but this is generally used

00:17:23,280 --> 00:17:29,090
for developers of your project to

00:17:26,100 --> 00:17:31,770
install the exact version of the

00:17:29,090 --> 00:17:34,290
dependencies that you're using there's a

00:17:31,770 --> 00:17:37,230
great tool for managing the requirements

00:17:34,290 --> 00:17:39,180
of text called pip tools so I suggest

00:17:37,230 --> 00:17:41,760
looking into that to help you help you

00:17:39,180 --> 00:17:44,310
manage these things and then also really

00:17:41,760 --> 00:17:45,810
common you'll have files that go over

00:17:44,310 --> 00:17:50,070
the history of the project like history

00:17:45,810 --> 00:17:51,510
changes or change log you can have a

00:17:50,070 --> 00:17:54,600
contributing document to thank people

00:17:51,510 --> 00:17:56,880
who've made contributions or have an

00:17:54,600 --> 00:18:01,500
author's document okay so let's go ahead

00:17:56,880 --> 00:18:04,680
and and share this code so we're going

00:18:01,500 --> 00:18:06,450
to use git we create or we already

00:18:04,680 --> 00:18:09,780
created the package with cookie cutter

00:18:06,450 --> 00:18:11,930
we're going to add the code and commit

00:18:09,780 --> 00:18:15,060
it we're going to run our tox tests and

00:18:11,930 --> 00:18:19,470
see that it passes in the environments

00:18:15,060 --> 00:18:23,430
we intend to support we that was out of

00:18:19,470 --> 00:18:24,870
order so so now we're going to go ahead

00:18:23,430 --> 00:18:30,180
and setup the services that are going to

00:18:24,870 --> 00:18:32,940
support this project so the first thing

00:18:30,180 --> 00:18:38,250
is we're going to create a repository on

00:18:32,940 --> 00:18:39,990
source code hosting like github and then

00:18:38,250 --> 00:18:42,180
we'll go over to the continuous

00:18:39,990 --> 00:18:45,240
integration and add

00:18:42,180 --> 00:18:47,640
repository there so with Travis you sign

00:18:45,240 --> 00:18:51,000
in with your github account and click

00:18:47,640 --> 00:18:53,220
sync and then enable the continuous

00:18:51,000 --> 00:18:54,540
integration for your new repository they

00:18:53,220 --> 00:18:56,550
also have a command line tool if you're

00:18:54,540 --> 00:18:58,580
going to be doing this commonly that

00:18:56,550 --> 00:19:01,100
that makes that process a little faster

00:18:58,580 --> 00:19:05,430
so then you go ahead and push your code

00:19:01,100 --> 00:19:07,050
up to github and then a couple moments

00:19:05,430 --> 00:19:09,510
later when you log into Travis you'll

00:19:07,050 --> 00:19:13,250
see your tests are succeeding and so now

00:19:09,510 --> 00:19:16,830
you already have continuous integration

00:19:13,250 --> 00:19:19,110
so the next thing you should do is setup

00:19:16,830 --> 00:19:21,300
your documentation hosting read the docs

00:19:19,110 --> 00:19:22,500
is a great service for this but if you

00:19:21,300 --> 00:19:24,990
don't want to do that you could also use

00:19:22,500 --> 00:19:27,660
something like github pages so you

00:19:24,990 --> 00:19:30,390
create an account and login and you

00:19:27,660 --> 00:19:34,500
point it at your repo similarly to how

00:19:30,390 --> 00:19:36,930
you did with Travis and then you

00:19:34,500 --> 00:19:38,640
basically click build in a few moments

00:19:36,930 --> 00:19:40,320
later you're going to have the

00:19:38,640 --> 00:19:44,430
documentation for your project already

00:19:40,320 --> 00:19:46,740
built out then you need to create an

00:19:44,430 --> 00:19:50,070
account on the package index so this is

00:19:46,740 --> 00:19:51,660
at PI pi PI thon org and this is what

00:19:50,070 --> 00:19:55,050
you use to upload and share your

00:19:51,660 --> 00:19:57,870
packages and there's a little-known copy

00:19:55,050 --> 00:19:59,610
of the package index called test pi pi

00:19:57,870 --> 00:20:01,410
that you can use when you're

00:19:59,610 --> 00:20:03,750
experimenting so if you just want to

00:20:01,410 --> 00:20:06,210
test the package upload and releasing

00:20:03,750 --> 00:20:07,530
process use test pi pi it has a

00:20:06,210 --> 00:20:09,780
different set of credentials but this

00:20:07,530 --> 00:20:14,550
way you're not adding more junk to the

00:20:09,780 --> 00:20:17,550
real index then you save your settings

00:20:14,550 --> 00:20:19,380
in your home directory in a dot pi pirc

00:20:17,550 --> 00:20:22,830
file this saves you from having to

00:20:19,380 --> 00:20:26,430
specify them every time you run the

00:20:22,830 --> 00:20:28,170
commands you may or may not want to save

00:20:26,430 --> 00:20:30,150
the password in this file though if you

00:20:28,170 --> 00:20:35,550
don't the commands will prompt you for a

00:20:30,150 --> 00:20:36,570
password every time you use them so for

00:20:35,550 --> 00:20:39,300
the rest of this you should be working

00:20:36,570 --> 00:20:41,850
in a virtual lymph and there's two great

00:20:39,300 --> 00:20:43,200
tools for managing virtual ends one is

00:20:41,850 --> 00:20:46,380
called Q the other one's called virtual

00:20:43,200 --> 00:20:50,130
and rapper at suggest finding which one

00:20:46,380 --> 00:20:51,810
you like and using it so then once you

00:20:50,130 --> 00:20:55,290
have your virtual end created we need to

00:20:51,810 --> 00:20:56,190
install our packaging tools we you may

00:20:55,290 --> 00:20:58,530
need to install we

00:20:56,190 --> 00:21:00,510
depending on the version of Python you

00:20:58,530 --> 00:21:02,190
have in the environment and then you'll

00:21:00,510 --> 00:21:04,650
install twine and twine is a tool for

00:21:02,190 --> 00:21:08,220
uploading these packages to the index

00:21:04,650 --> 00:21:12,210
and then we build the distribution files

00:21:08,220 --> 00:21:13,830
and so you run the setup dot pi with the

00:21:12,210 --> 00:21:16,710
s dist command to build the source

00:21:13,830 --> 00:21:19,590
distribution or the B disc wheel command

00:21:16,710 --> 00:21:21,840
to make wheels or if you're using one of

00:21:19,590 --> 00:21:23,520
the the templates they already include a

00:21:21,840 --> 00:21:26,220
make file so you can just type make dist

00:21:23,520 --> 00:21:27,840
and it will make all these files and so

00:21:26,220 --> 00:21:29,880
when these are generated it puts them in

00:21:27,840 --> 00:21:33,570
a subdirectory of your project called

00:21:29,880 --> 00:21:36,480
dist so then you use twine to upload

00:21:33,570 --> 00:21:39,390
them to the package index and again the

00:21:36,480 --> 00:21:43,650
make file also includes commands for

00:21:39,390 --> 00:21:46,890
doing the uploading so something to note

00:21:43,650 --> 00:21:49,110
here is don't use the built-in setup I

00:21:46,890 --> 00:21:51,960
upload command because that's actually

00:21:49,110 --> 00:21:54,030
insecure but it's being kept there for

00:21:51,960 --> 00:21:57,840
backward compatibility purposes so use

00:21:54,030 --> 00:21:59,400
twine to do your uploading so now you

00:21:57,840 --> 00:22:01,140
should be able to install your package

00:21:59,400 --> 00:22:03,300
via pip it's already on the index so you

00:22:01,140 --> 00:22:05,910
can pip install just with the package

00:22:03,300 --> 00:22:08,610
name and then when you're going to

00:22:05,910 --> 00:22:11,430
continue doing development you can

00:22:08,610 --> 00:22:14,510
install your package in develop mode and

00:22:11,430 --> 00:22:19,080
so that's done with setup I develop or

00:22:14,510 --> 00:22:21,690
pip install - II the current directory

00:22:19,080 --> 00:22:24,420
you're in and what this will do is it

00:22:21,690 --> 00:22:26,130
will install the package and its

00:22:24,420 --> 00:22:28,230
dependencies in your current virtual

00:22:26,130 --> 00:22:30,570
environment but then any changes you

00:22:28,230 --> 00:22:32,910
make are reflected immediately without

00:22:30,570 --> 00:22:34,130
having to reinstall the package so this

00:22:32,910 --> 00:22:36,630
is really great for doing development

00:22:34,130 --> 00:22:38,850
just note that if you make changes to

00:22:36,630 --> 00:22:40,890
the entry points you're going to need to

00:22:38,850 --> 00:22:45,780
reinstall because it needs to remake

00:22:40,890 --> 00:22:49,350
things like those those wrappers okay

00:22:45,780 --> 00:22:51,030
and then once you do that you continue

00:22:49,350 --> 00:22:55,590
changing your code you update the

00:22:51,030 --> 00:22:57,240
version you commit you you run tests you

00:22:55,590 --> 00:22:59,430
you know make sure the continuous

00:22:57,240 --> 00:23:01,140
integration is still passing you build

00:22:59,430 --> 00:23:05,670
the distribution files and you upload

00:23:01,140 --> 00:23:08,160
the new version to the package index so

00:23:05,670 --> 00:23:10,200
one more set of tools that helps you

00:23:08,160 --> 00:23:12,660
with this part of the process

00:23:10,200 --> 00:23:14,520
it is things that help you with the the

00:23:12,660 --> 00:23:15,930
version and the releasing there's two

00:23:14,520 --> 00:23:17,760
that take different approaches and I've

00:23:15,930 --> 00:23:20,550
used them both in different situations

00:23:17,760 --> 00:23:22,110
I'm one's called bump version which

00:23:20,550 --> 00:23:24,450
allows you to kind of drive the the

00:23:22,110 --> 00:23:26,910
version number changes and the other one

00:23:24,450 --> 00:23:29,940
is called version year that allows you

00:23:26,910 --> 00:23:32,610
to control the versions based on your

00:23:29,940 --> 00:23:34,680
source control tags but either way I'd

00:23:32,610 --> 00:23:36,960
suggest using one of those to make the

00:23:34,680 --> 00:23:43,230
releasing a new version process easier

00:23:36,960 --> 00:23:45,090
and then just to recap so don't do this

00:23:43,230 --> 00:23:48,270
stuff by yourself someone's already made

00:23:45,090 --> 00:23:50,130
templates for everything so there's

00:23:48,270 --> 00:23:54,000
really no reason to to go off on your

00:23:50,130 --> 00:23:56,910
own take the time to setup the tools

00:23:54,000 --> 00:23:59,190
that will make your life easier in the

00:23:56,910 --> 00:24:00,600
long run and then go ahead and share

00:23:59,190 --> 00:24:04,290
your code so that other people can

00:24:00,600 --> 00:24:11,790
benefit from the cool stuff you do thank

00:24:04,290 --> 00:24:13,260
you very much all right if you have any

00:24:11,790 --> 00:24:15,380
questions today there's a microphone

00:24:13,260 --> 00:24:17,550
here in the in the middle of the room

00:24:15,380 --> 00:24:22,830
we'll just give you a couple of minutes

00:24:17,550 --> 00:24:29,610
to us to see what we got here oh yeah

00:24:22,830 --> 00:24:33,090
first question yeah I had a question is

00:24:29,610 --> 00:24:37,020
there anything that is like CI for build

00:24:33,090 --> 00:24:38,550
where I can like have my my build and

00:24:37,020 --> 00:24:39,980
deploy process done sort of

00:24:38,550 --> 00:24:41,970
automatically with some sort of

00:24:39,980 --> 00:24:43,800
assertions so that because I'm just

00:24:41,970 --> 00:24:45,330
terrified every time I publish anything

00:24:43,800 --> 00:24:47,430
no matter how much I've tested it

00:24:45,330 --> 00:24:50,960
locally I'm just like this is not

00:24:47,430 --> 00:24:53,490
formalized enough yeah so there are

00:24:50,960 --> 00:24:55,440
there configurations for doing this with

00:24:53,490 --> 00:24:58,620
the same CI that used to run just the

00:24:55,440 --> 00:25:00,600
tests so there's a process for defining

00:24:58,620 --> 00:25:03,480
a Travis configuration so you can do

00:25:00,600 --> 00:25:05,520
this via Travis or one of the other like

00:25:03,480 --> 00:25:07,320
jenkins or circle CI or anything like

00:25:05,520 --> 00:25:12,390
that so yeah you can you can definitely

00:25:07,320 --> 00:25:14,610
have a separate task for that next

00:25:12,390 --> 00:25:18,330
question Ida I'm still pretty new at

00:25:14,610 --> 00:25:20,970
this is there a preference to putting

00:25:18,330 --> 00:25:21,590
the list of files in manifests versus

00:25:20,970 --> 00:25:25,870
using the

00:25:21,590 --> 00:25:29,330
packages option and set up 2py so the

00:25:25,870 --> 00:25:32,450
the packages is specifically for the

00:25:29,330 --> 00:25:34,190
Python import packages the manifest is

00:25:32,450 --> 00:25:36,110
for everything that's not a Python

00:25:34,190 --> 00:25:40,610
import package so anything else like

00:25:36,110 --> 00:25:42,710
documentation and configs next yeah you

00:25:40,610 --> 00:25:45,140
mentioned there was an option with a set

00:25:42,710 --> 00:25:46,580
of tools the develop mode so in the past

00:25:45,140 --> 00:25:48,350
what I've done for testing is you do

00:25:46,580 --> 00:25:50,330
that nasty shim thing were you in like a

00:25:48,350 --> 00:25:52,130
context and it changed the relative

00:25:50,330 --> 00:25:54,409
import path and actually imports from

00:25:52,130 --> 00:25:55,909
the source code for pure Python files

00:25:54,409 --> 00:25:59,179
what does it actually do when it's

00:25:55,909 --> 00:26:02,539
running in development as far as I know

00:25:59,179 --> 00:26:05,659
all that it does is symlinks the the

00:26:02,539 --> 00:26:10,000
directory that you're developing in to

00:26:05,659 --> 00:26:12,890
the to your site packages so it's it's

00:26:10,000 --> 00:26:14,720
like a pretty lightweight thing but yeah

00:26:12,890 --> 00:26:16,820
I have run into problems where you have

00:26:14,720 --> 00:26:18,320
to even reinstall in development mode if

00:26:16,820 --> 00:26:19,909
you change anything else about the

00:26:18,320 --> 00:26:22,370
environment and do you know that plays

00:26:19,909 --> 00:26:23,720
all like talks or something just for all

00:26:22,370 --> 00:26:25,250
the different virtual ends that's

00:26:23,720 --> 00:26:27,260
running in I'm sorry I didn't hear that

00:26:25,250 --> 00:26:28,880
does it play well with talks as well if

00:26:27,260 --> 00:26:30,940
you're you know trying it out in the

00:26:28,880 --> 00:26:34,309
budget with virtual lab well so talks

00:26:30,940 --> 00:26:36,110
runs the tests in an isolated

00:26:34,309 --> 00:26:38,419
environment for each version of Python

00:26:36,110 --> 00:26:41,090
so it's not connected to installing it

00:26:38,419 --> 00:26:46,970
in editable mode at all okay cool thank

00:26:41,090 --> 00:26:49,539
you hmm next our DLLs packaged it

00:26:46,970 --> 00:26:52,039
handled and also how do you specify that

00:26:49,539 --> 00:26:55,309
okay this is really only for a Windows

00:26:52,039 --> 00:26:56,840
environment versus um honestly I have no

00:26:55,309 --> 00:26:59,120
experience doing that so I wouldn't be

00:26:56,840 --> 00:27:01,669
able to tell you there may be some

00:26:59,120 --> 00:27:04,039
information in the Python packaging user

00:27:01,669 --> 00:27:08,149
guide about that but I I've just not

00:27:04,039 --> 00:27:11,149
experienced it do you have any thoughts

00:27:08,149 --> 00:27:15,320
on using docker compose or docker images

00:27:11,149 --> 00:27:19,309
to distribute vectors um yeah I've

00:27:15,320 --> 00:27:22,880
thought um so what I really wanted to

00:27:19,309 --> 00:27:24,740
focus on here was specific to like the

00:27:22,880 --> 00:27:30,950
core Python ecosystem there are other

00:27:24,740 --> 00:27:33,840
packaging ecosystems both the like

00:27:30,950 --> 00:27:35,910
kondeh and then like system

00:27:33,840 --> 00:27:39,180
repository packages so that was kind of

00:27:35,910 --> 00:27:43,590
outside of the scope of the talk thank

00:27:39,180 --> 00:27:46,020
you just two more is there a particular

00:27:43,590 --> 00:27:48,780
reason the read miss have to be in RSC

00:27:46,020 --> 00:27:52,680
instead of two example markdown I'm

00:27:48,780 --> 00:27:55,140
sorry jr. the readme file has to be the

00:27:52,680 --> 00:27:57,570
rst format um so the readme file

00:27:55,140 --> 00:28:00,600
actually does not have to be rst but the

00:27:57,570 --> 00:28:04,140
package index is looking for rst so what

00:28:00,600 --> 00:28:05,970
you could do is have a different readme

00:28:04,140 --> 00:28:08,370
file so like a markdown readme file or

00:28:05,970 --> 00:28:10,770
just plain text and then in your setup

00:28:08,370 --> 00:28:12,330
hi you can load the contents of a

00:28:10,770 --> 00:28:14,760
different file some people use like a

00:28:12,330 --> 00:28:19,890
description rst just for the package

00:28:14,760 --> 00:28:21,600
index I see thank you last question so

00:28:19,890 --> 00:28:23,700
this is all good for stuff you want to

00:28:21,600 --> 00:28:26,850
publish publicly open source stuff up on

00:28:23,700 --> 00:28:29,160
github but for stuff that you want to is

00:28:26,850 --> 00:28:31,290
for internal consumption only what sort

00:28:29,160 --> 00:28:34,260
of stuff is available so I can you know

00:28:31,290 --> 00:28:36,660
to use pip install to deploy myself yeah

00:28:34,260 --> 00:28:39,090
so my recommendation is to follow the

00:28:36,660 --> 00:28:42,060
same process and there's actually a

00:28:39,090 --> 00:28:44,970
trick if you put an invalid troph

00:28:42,060 --> 00:28:46,950
classifier in that classifiers it won't

00:28:44,970 --> 00:28:48,600
be allowed to be uploaded so you can

00:28:46,950 --> 00:28:51,090
prevent it from being uploaded to the

00:28:48,600 --> 00:28:52,980
package index and then there are a

00:28:51,090 --> 00:28:58,050
couple different repository hosting

00:28:52,980 --> 00:29:00,120
solutions one is called a dev GI that

00:28:58,050 --> 00:29:02,310
allows you to run your own local package

00:29:00,120 --> 00:29:05,280
index but then there's also tools like

00:29:02,310 --> 00:29:08,010
nexus that have plugins to allow you to

00:29:05,280 --> 00:29:10,140
do a Python package index okay and

00:29:08,010 --> 00:29:13,370
that's all the time we have so everybody

00:29:10,140 --> 00:29:13,370
please thank Dave for Jack

00:29:15,090 --> 00:29:21,710
and we'll be getting underway here again

00:29:18,450 --> 00:29:21,710

YouTube URL: https://www.youtube.com/watch?v=qOH-h-EKKac


