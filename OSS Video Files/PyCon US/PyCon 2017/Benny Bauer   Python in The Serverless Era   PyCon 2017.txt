Title: Benny Bauer   Python in The Serverless Era   PyCon 2017
Publication date: 2017-05-21
Playlist: PyCon 2017
Description: 
	"Speaker: Benny Bauer

Serverless is the latest phase in the evolution of cloud development. Its building blocks are functions, a bunch of stateless “nano-services”, that can scale automatically and charged only when used. It enables teams to focus more on development while having fully managed servers. In this talk I'll cover the Serverless Architectures practices, use cases, tooling and the role python plays in it. 


Slides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides"
Captions: 
	00:00:11,420 --> 00:00:18,570
hello everybody and welcome again back

00:00:13,799 --> 00:00:21,000
to our final track on the pike on 2017 -

00:00:18,570 --> 00:00:23,039
last day Sunday thanks so much for being

00:00:21,000 --> 00:00:24,240
here on a Sunday afternoon you're going

00:00:23,039 --> 00:00:26,970
to be excited I think we're going to

00:00:24,240 --> 00:00:28,710
have a demo from Benny Bower who's going

00:00:26,970 --> 00:00:31,619
to talk about Python in the serverless

00:00:28,710 --> 00:00:33,540
area please do me a favor do all of us a

00:00:31,619 --> 00:00:35,730
favor by turning off your electronics or

00:00:33,540 --> 00:00:37,380
at least making him quiet and we will

00:00:35,730 --> 00:00:40,079
have a 10-minute break following the

00:00:37,380 --> 00:00:41,340
talk so there's no need to rush out to

00:00:40,079 --> 00:00:42,870
try to get to your next talk will give

00:00:41,340 --> 00:00:43,590
you plenty of time for that everybody

00:00:42,870 --> 00:00:50,000
please welcome

00:00:43,590 --> 00:00:54,809
Benny Bower hi good afternoon

00:00:50,000 --> 00:00:56,219
am I on okay so glad to see you minute

00:00:54,809 --> 00:01:00,359
for the third day I wasn't sure around

00:00:56,219 --> 00:01:02,460
menu will pop here so in this session I

00:01:00,359 --> 00:01:04,650
would like to talk about build house

00:01:02,460 --> 00:01:08,130
which frameworks there are to build

00:01:04,650 --> 00:01:11,159
fight and surveillance applications I'll

00:01:08,130 --> 00:01:14,760
start with I'll skim through the what is

00:01:11,159 --> 00:01:16,740
survey list and we'll get to the demos

00:01:14,760 --> 00:01:19,140
as fast as I can

00:01:16,740 --> 00:01:22,200
my name is Benny Bower I came all the

00:01:19,140 --> 00:01:25,740
way from Israel to talk about service

00:01:22,200 --> 00:01:28,530
and enjoy Python I also heard that Trump

00:01:25,740 --> 00:01:32,670
is coming for a visit so I said it's a

00:01:28,530 --> 00:01:36,079
good time to go so here I am I'm a chief

00:01:32,670 --> 00:01:40,200
architect that discovered a brand new

00:01:36,079 --> 00:01:42,720
startup our mission is to tell the story

00:01:40,200 --> 00:01:45,229
of design items and the places they're

00:01:42,720 --> 00:01:49,049
residing and the creators behind them

00:01:45,229 --> 00:01:52,530
prior to that I was a cloud architect

00:01:49,049 --> 00:01:58,590
that's AutoCAD in the Autodesk for seven

00:01:52,530 --> 00:02:01,009
years so let's get it going so how many

00:01:58,590 --> 00:02:03,540
of you heard about server listens for I

00:02:01,009 --> 00:02:05,689
guess most of you how many are using

00:02:03,540 --> 00:02:09,989
server lists

00:02:05,689 --> 00:02:13,739
okay so serverless is the latest

00:02:09,989 --> 00:02:13,980
evolution of cloud development you can

00:02:13,739 --> 00:02:16,470
see

00:02:13,980 --> 00:02:20,790
kuvira's and another abstraction layer

00:02:16,470 --> 00:02:24,750
on top of compute and platform and

00:02:20,790 --> 00:02:27,510
infrastructure resources which makes it

00:02:24,750 --> 00:02:31,290
easier for us as developers to build

00:02:27,510 --> 00:02:34,349
applications and ship them but service

00:02:31,290 --> 00:02:38,879
is also an overused term and I'll try to

00:02:34,349 --> 00:02:42,450
to make some order in it so there are

00:02:38,879 --> 00:02:45,390
three main meanings to surrealists the

00:02:42,450 --> 00:02:48,590
first one which I call developer success

00:02:45,390 --> 00:02:53,190
or software is a service which is

00:02:48,590 --> 00:02:56,390
designated many service managed services

00:02:53,190 --> 00:02:59,129
that deal with specific things in the

00:02:56,390 --> 00:03:02,269
usually provided by third parties for

00:02:59,129 --> 00:03:06,750
example if you need authentication for

00:03:02,269 --> 00:03:08,790
for your app you can use up zero

00:03:06,750 --> 00:03:12,000
Tullio forest and that's ending

00:03:08,790 --> 00:03:14,190
al-awliya for search and you get all of

00:03:12,000 --> 00:03:17,730
these out of the box so you don't need

00:03:14,190 --> 00:03:20,040
to implement the backend of them another

00:03:17,730 --> 00:03:24,000
another meaning for service is back end

00:03:20,040 --> 00:03:27,180
as a service which is things like

00:03:24,000 --> 00:03:32,370
firebase and AWS mobile app they're

00:03:27,180 --> 00:03:34,980
basically a set of common services that

00:03:32,370 --> 00:03:37,319
you will need to build your mobile

00:03:34,980 --> 00:03:39,690
application for example you probably

00:03:37,319 --> 00:03:43,260
need authentication you need some kind

00:03:39,690 --> 00:03:45,810
of basic data store push notifications

00:03:43,260 --> 00:03:48,900
if this is all you need from for your

00:03:45,810 --> 00:03:51,959
mobile application you probably want to

00:03:48,900 --> 00:03:54,989
use one of the back and back into the

00:03:51,959 --> 00:03:56,489
service services instead of implementing

00:03:54,989 --> 00:04:00,209
it by yourself and maintaining a

00:03:56,489 --> 00:04:03,569
back-end for this and but there are

00:04:00,209 --> 00:04:06,329
still times maybe most of the times when

00:04:03,569 --> 00:04:09,209
you have your own business logic that

00:04:06,329 --> 00:04:11,549
you need to run on a back-end and this

00:04:09,209 --> 00:04:14,629
is the third meaning of server lists

00:04:11,549 --> 00:04:19,079
which is TAS or function as a service

00:04:14,629 --> 00:04:22,770
and they're most of the cloud providers

00:04:19,079 --> 00:04:26,370
or the largest cloud providers have a

00:04:22,770 --> 00:04:27,920
service for this o AWS has lambda as

00:04:26,370 --> 00:04:30,980
your has function do

00:04:27,920 --> 00:04:33,470
thousands cloud functions IBM the

00:04:30,980 --> 00:04:38,510
bluemix has opened whisk which is also

00:04:33,470 --> 00:04:40,240
open source and this is so last year

00:04:38,510 --> 00:04:44,270
when someone mentioned server lists

00:04:40,240 --> 00:04:46,690
probably me mentioned SAS ok and and

00:04:44,270 --> 00:04:52,100
this will be the focus of my talk here

00:04:46,690 --> 00:04:54,230
so what what exactly is says so it's a

00:04:52,100 --> 00:04:58,190
fully managed compute you get out of the

00:04:54,230 --> 00:05:01,400
box a provisioning of an instance you

00:04:58,190 --> 00:05:05,360
get the patching of it you get some some

00:05:01,400 --> 00:05:07,190
basic monitoring and logging you get

00:05:05,360 --> 00:05:09,740
scaling out of the blocks and which

00:05:07,190 --> 00:05:12,050
means you have less operations for

00:05:09,740 --> 00:05:17,000
provisioning instances or maintaining

00:05:12,050 --> 00:05:19,220
your your server you take your code and

00:05:17,000 --> 00:05:22,310
just deploy it package and deploy it and

00:05:19,220 --> 00:05:25,670
then the nicest thing about it is that

00:05:22,310 --> 00:05:27,950
you pay for the actual usage and there

00:05:25,670 --> 00:05:31,520
is a resolution of hundreds of

00:05:27,950 --> 00:05:34,910
milliseconds which is I think that's the

00:05:31,520 --> 00:05:38,330
thing that made server lists or function

00:05:34,910 --> 00:05:41,480
as a service that made a hype out of out

00:05:38,330 --> 00:05:45,470
of function of the service and basically

00:05:41,480 --> 00:05:49,580
it means you have no idle servers no

00:05:45,470 --> 00:05:51,710
idle compute so how it works as I

00:05:49,580 --> 00:05:54,170
mentioned you deploy your code but then

00:05:51,710 --> 00:05:58,450
you need to define triggers to what will

00:05:54,170 --> 00:06:00,980
make this code execute and triggers are

00:05:58,450 --> 00:06:04,580
many types of events that you can

00:06:00,980 --> 00:06:06,890
configure it could be just in HTTP

00:06:04,580 --> 00:06:09,350
requests so you define an endpoint that

00:06:06,890 --> 00:06:12,290
will trigger your function it could be

00:06:09,350 --> 00:06:14,780
an event of uploading a file to the

00:06:12,290 --> 00:06:17,780
storage service of the provider that

00:06:14,780 --> 00:06:20,690
you're using it could be a change in a

00:06:17,780 --> 00:06:23,240
in a database row or a new row in a

00:06:20,690 --> 00:06:26,150
database that is provided as a service

00:06:23,240 --> 00:06:29,600
by that provider for example dynamo to

00:06:26,150 --> 00:06:32,570
be in AWS and there are many other

00:06:29,600 --> 00:06:36,710
events have scheduled tasks and many

00:06:32,570 --> 00:06:38,900
many others and there are new almost

00:06:36,710 --> 00:06:41,540
every month you can hear about a new

00:06:38,900 --> 00:06:45,100
integration with another service

00:06:41,540 --> 00:06:49,730
in in debt for that cloud provider and

00:06:45,100 --> 00:06:51,740
and it means that the architecture of

00:06:49,730 --> 00:06:55,070
the application becomes event-driven

00:06:51,740 --> 00:06:58,160
okay and and this is this is a big

00:06:55,070 --> 00:07:01,010
change for building cloud applications

00:06:58,160 --> 00:07:04,520
if you are used to build applications

00:07:01,010 --> 00:07:07,300
that poll to see if something happened

00:07:04,520 --> 00:07:12,380
so now it's the other way around

00:07:07,300 --> 00:07:14,480
and then when the event occurs it

00:07:12,380 --> 00:07:17,660
triggers the specific function that you

00:07:14,480 --> 00:07:20,780
configured and the code is being

00:07:17,660 --> 00:07:24,140
executed and you don't need to worry

00:07:20,780 --> 00:07:28,730
about all scaling and redundancy you get

00:07:24,140 --> 00:07:33,410
it out of the box and the use cases or

00:07:28,730 --> 00:07:38,210
analyst these are just a few within we

00:07:33,410 --> 00:07:40,220
can have talked only about use cases but

00:07:38,210 --> 00:07:43,700
the main things that you will hear about

00:07:40,220 --> 00:07:46,780
them is building a back-end so it could

00:07:43,700 --> 00:07:51,560
be a web deck and mobile backend box or

00:07:46,780 --> 00:07:55,100
another popular use case is a data data

00:07:51,560 --> 00:07:56,720
processing using those events of when

00:07:55,100 --> 00:07:59,720
files uploaded when something is

00:07:56,720 --> 00:08:02,660
changing the database when when you have

00:07:59,720 --> 00:08:06,470
a data stream that you want to to

00:08:02,660 --> 00:08:10,400
process this is this is very common

00:08:06,470 --> 00:08:12,770
so as I said analysts they're so many so

00:08:10,400 --> 00:08:16,160
many use cases and every other day

00:08:12,770 --> 00:08:19,310
there's a new post about some about new

00:08:16,160 --> 00:08:22,930
use case but there are also things that

00:08:19,310 --> 00:08:24,980
you need to be aware of when when using

00:08:22,930 --> 00:08:27,680
function in the service or service

00:08:24,980 --> 00:08:29,900
architecture and I'm not going to go

00:08:27,680 --> 00:08:34,640
through them because again it's another

00:08:29,900 --> 00:08:36,410
another topic for a full talk but you

00:08:34,640 --> 00:08:38,090
need to understand that server list is

00:08:36,410 --> 00:08:42,349
not a silver bullet

00:08:38,090 --> 00:08:45,320
unity understand it if it works for your

00:08:42,349 --> 00:08:49,910
use cases and you need to know the

00:08:45,320 --> 00:08:53,180
limitations and how to overcome them ok

00:08:49,910 --> 00:08:55,250
so we got to buy some okay we're in

00:08:53,180 --> 00:08:58,130
baikin so let's talk about

00:08:55,250 --> 00:09:03,860
I can and functional deserve so out of

00:08:58,130 --> 00:09:08,150
the cloud providers AWS IBM open whisk

00:09:03,860 --> 00:09:13,820
and Microsoft Azure support fight on

00:09:08,150 --> 00:09:16,880
both to Python 2.7 and 3.6 Azure is

00:09:13,820 --> 00:09:23,180
still experimental but you can already

00:09:16,880 --> 00:09:26,090
try it but if you already had a chance

00:09:23,180 --> 00:09:28,130
to try and Detroit functions and

00:09:26,090 --> 00:09:30,560
configure everything you know that it's

00:09:28,130 --> 00:09:33,200
not easy and there's a lot of things

00:09:30,560 --> 00:09:39,140
that you need to tweak and configure and

00:09:33,200 --> 00:09:41,960
define and package and deploy and we as

00:09:39,140 --> 00:09:44,690
developers we're lazy and will always

00:09:41,960 --> 00:09:48,440
invent things to make our life better so

00:09:44,690 --> 00:09:53,360
their frameworks for doing this stuff

00:09:48,440 --> 00:09:56,080
and these are some I think most of the

00:09:53,360 --> 00:10:00,830
frameworks that support Python runtime

00:09:56,080 --> 00:10:02,170
will go through some of them I'll start

00:10:00,830 --> 00:10:05,960
with serverless

00:10:02,170 --> 00:10:08,390
so if the term service wasn't confusing

00:10:05,960 --> 00:10:12,680
enough it has another meaning which is a

00:10:08,390 --> 00:10:17,000
framework called service by the way all

00:10:12,680 --> 00:10:20,660
all of these frameworks are open source

00:10:17,000 --> 00:10:25,640
and then you can go for the code you can

00:10:20,660 --> 00:10:27,950
contribute you can add stuff so the

00:10:25,640 --> 00:10:30,080
service framework think it's the most

00:10:27,950 --> 00:10:36,890
mature and when I'm saying most mature

00:10:30,080 --> 00:10:41,780
it's a 1 1/2 years old maybe surrealist

00:10:36,890 --> 00:10:45,290
is is such a new thing so 1/2 years in

00:10:41,780 --> 00:10:47,390
the cereal stands is a lot that's that's

00:10:45,290 --> 00:10:49,880
what makes it the most mature and also

00:10:47,390 --> 00:10:56,930
support the different cloud providers

00:10:49,880 --> 00:11:00,470
and various runtimes so I want to show a

00:10:56,930 --> 00:11:03,220
demo of building some simple Python

00:11:00,470 --> 00:11:05,630
application with the service framework

00:11:03,220 --> 00:11:08,600
surrealists frameworks itself is built

00:11:05,630 --> 00:11:12,130
in no js'

00:11:08,600 --> 00:11:16,880
you you installed by using NPM install

00:11:12,130 --> 00:11:19,310
serverless and once you installed it you

00:11:16,880 --> 00:11:22,100
can create a project you can create a

00:11:19,310 --> 00:11:24,380
new project out of the templates using

00:11:22,100 --> 00:11:27,050
the CLI so this is something that common

00:11:24,380 --> 00:11:30,170
to all the frameworks they usually the

00:11:27,050 --> 00:11:32,600
way they work the you configure you use

00:11:30,170 --> 00:11:35,720
the CLI and you can figure a

00:11:32,600 --> 00:11:39,110
configuration file with the rest of your

00:11:35,720 --> 00:11:44,680
code and the framework does everything

00:11:39,110 --> 00:11:49,220
for you so I want to create a Python

00:11:44,680 --> 00:11:52,280
project for AWS to the 4/3 AWS so they

00:11:49,220 --> 00:11:57,800
have templates so my minus t4 template

00:11:52,280 --> 00:12:10,670
on have Python this one is is a Python

00:11:57,800 --> 00:12:17,530
2.7 and let's see what I got so sorry my

00:12:10,670 --> 00:12:17,530
dad I wanted to create a new menu folder

00:12:20,410 --> 00:12:23,410
okay

00:12:25,560 --> 00:12:32,819
so what I got is I get two Falls created

00:12:29,730 --> 00:12:34,790
for me I got the circle this Yano which

00:12:32,819 --> 00:12:38,220
is the configuration file and I got a

00:12:34,790 --> 00:12:41,329
template of the function the function

00:12:38,220 --> 00:12:43,379
itself that I'm going to deploy so let's

00:12:41,329 --> 00:12:48,300
start with the service

00:12:43,379 --> 00:12:51,089
Yano from the configuration file you can

00:12:48,300 --> 00:12:53,519
see that you can configure the provider

00:12:51,089 --> 00:12:56,309
as I said it's not only for AWS but this

00:12:53,519 --> 00:13:00,209
project is the template for of AWS and

00:12:56,309 --> 00:13:04,199
the runtime is Python 2.7 and I want to

00:13:00,209 --> 00:13:09,769
configure that the region will be Oregon

00:13:04,199 --> 00:13:12,180
so it's yes West - there are many things

00:13:09,769 --> 00:13:14,490
examples for many things that you can do

00:13:12,180 --> 00:13:17,959
that you can configure but I'm going to

00:13:14,490 --> 00:13:20,430
skip them and I'm getting to the

00:13:17,959 --> 00:13:23,009
function itself so this is the

00:13:20,430 --> 00:13:26,819
definition of the configuration of the

00:13:23,009 --> 00:13:30,029
function so I have out of the template

00:13:26,819 --> 00:13:34,529
they created me hello function in the

00:13:30,029 --> 00:13:37,430
handler PI file and now I want to bind

00:13:34,529 --> 00:13:42,319
an event to trigger this function so

00:13:37,430 --> 00:13:46,319
they have some samples here I'm just

00:13:42,319 --> 00:13:51,540
comment out the things that I want so I

00:13:46,319 --> 00:13:58,110
want to create a simple HTTP API that

00:13:51,540 --> 00:14:03,779
when someone calls hello and provides a

00:13:58,110 --> 00:14:07,009
name argument and this call is a HTTP

00:14:03,779 --> 00:14:11,279
call it will trigger my function and

00:14:07,009 --> 00:14:14,040
let's go to my function so this function

00:14:11,279 --> 00:14:18,420
was created out of templates let me just

00:14:14,040 --> 00:14:21,000
move some redundant things from here and

00:14:18,420 --> 00:14:23,519
what you can see in this function that I

00:14:21,000 --> 00:14:29,220
get two arguments the first argument is

00:14:23,519 --> 00:14:30,949
event event is the input of the input of

00:14:29,220 --> 00:14:35,339
the event that triggered this

00:14:30,949 --> 00:14:38,170
dysfunction and context is the runtime

00:14:35,339 --> 00:14:42,040
information about the

00:14:38,170 --> 00:14:45,400
the specific lambda so I have a body

00:14:42,040 --> 00:14:48,010
that I want to return and I define the

00:14:45,400 --> 00:14:51,580
response the status code of the response

00:14:48,010 --> 00:14:56,920
and and the body that I have up above

00:14:51,580 --> 00:14:59,200
here and I just want to say hi and I

00:14:56,920 --> 00:15:03,880
want to get the name out of the argument

00:14:59,200 --> 00:15:08,710
that was sent to me so this argument is

00:15:03,880 --> 00:15:12,070
in the test parameters and as we

00:15:08,710 --> 00:15:16,840
configured in the llamo file name is

00:15:12,070 --> 00:15:21,070
name and that's about it now I'm ready

00:15:16,840 --> 00:15:22,720
to deploy all I need to do is SLS deploy

00:15:21,070 --> 00:15:27,190
and hope for the best

00:15:22,720 --> 00:15:31,120
so what happens now the frameworks the

00:15:27,190 --> 00:15:33,490
framework packages all my code and start

00:15:31,120 --> 00:15:37,450
starting to create the resources that I

00:15:33,490 --> 00:15:40,990
need on AWS to be able to deploy the

00:15:37,450 --> 00:15:44,980
function to bind it to an API gateway

00:15:40,990 --> 00:15:47,790
which is the HTTP gateway that map's an

00:15:44,980 --> 00:15:51,610
endpoint to my function it also

00:15:47,790 --> 00:15:55,750
configures a bucket to upload the codes

00:15:51,610 --> 00:15:58,510
to it will configure the different

00:15:55,750 --> 00:16:01,330
security rules that I need to - for the

00:15:58,510 --> 00:16:06,100
API gateway to call the lambda function

00:16:01,330 --> 00:16:11,770
and also log everything that you see

00:16:06,100 --> 00:16:14,350
here if I if I wasn't using the

00:16:11,770 --> 00:16:17,710
framework I needed to do it by ourselves

00:16:14,350 --> 00:16:19,870
either by going to the AWS console or

00:16:17,710 --> 00:16:22,330
using the AWS CLI

00:16:19,870 --> 00:16:24,160
when here I did it with just by

00:16:22,330 --> 00:16:27,340
configuring a configuration file and

00:16:24,160 --> 00:16:30,550
using the CLI to deploy it so it usually

00:16:27,340 --> 00:16:33,130
it takes a few minutes it also depends

00:16:30,550 --> 00:16:39,840
on the amount of resources that you can

00:16:33,130 --> 00:16:39,840
figure on for the for this project

00:16:40,200 --> 00:16:43,920
hopefully it will be done

00:16:47,800 --> 00:16:54,079
maybe in the meantime I can show you

00:16:51,140 --> 00:16:57,470
what other things you can you can define

00:16:54,079 --> 00:16:58,880
in the Yama file so I could have defined

00:16:57,470 --> 00:17:01,700
that the event that will trigger the

00:16:58,880 --> 00:17:04,850
function would be a ns3 event which is

00:17:01,700 --> 00:17:07,610
the file Apple Store the file Apple

00:17:04,850 --> 00:17:11,089
storage event or a scheduled task or

00:17:07,610 --> 00:17:14,240
many other different things that can

00:17:11,089 --> 00:17:16,459
trigger my my function I can also pass

00:17:14,240 --> 00:17:19,640
environment variables through the

00:17:16,459 --> 00:17:23,630
configuration file I can define other

00:17:19,640 --> 00:17:25,339
resources to be created on AWS if I need

00:17:23,630 --> 00:17:29,960
let's say I want to create another

00:17:25,339 --> 00:17:32,440
bucket for my project or a DynamoDB

00:17:29,960 --> 00:17:37,450
table so I can do everything from here

00:17:32,440 --> 00:17:43,400
okay so it's done I have this endpoint

00:17:37,450 --> 00:17:46,820
let's curl it and say hello vikon and I

00:17:43,400 --> 00:17:49,700
got it I got the response back then I

00:17:46,820 --> 00:17:52,640
need to spin a server then it needs to

00:17:49,700 --> 00:17:55,490
do anything to go to a console

00:17:52,640 --> 00:17:58,220
everything is here from the CLI okay but

00:17:55,490 --> 00:18:02,559
that's the simple case now I want to add

00:17:58,220 --> 00:18:10,820
some dependencies to my Python project

00:18:02,559 --> 00:18:17,950
so I'll create a virtual environment and

00:18:10,820 --> 00:18:21,530
just update my tip butter us okay and

00:18:17,950 --> 00:18:25,070
let's say I want to add arrow because I

00:18:21,530 --> 00:18:27,679
want to display the time I know I can do

00:18:25,070 --> 00:18:33,830
it with day time but I love arrow so

00:18:27,679 --> 00:18:37,309
let's do it with let's add arrow and I

00:18:33,830 --> 00:18:39,490
also want to create the requirements

00:18:37,309 --> 00:18:39,490
file

00:18:42,590 --> 00:18:54,460
okay so now theoretically I can go to my

00:18:48,679 --> 00:19:06,309
function doing for an arrow that's some

00:18:54,460 --> 00:19:06,309
time rival that's right a time

00:19:13,200 --> 00:19:21,600
and let's write both the you to seein

00:19:16,020 --> 00:19:35,520
and the important time just to justify

00:19:21,600 --> 00:19:39,450
my my arrow so it's - yes cific okay

00:19:35,520 --> 00:19:41,930
but how will how will serve a list or

00:19:39,450 --> 00:19:47,040
now to package online requirements and

00:19:41,930 --> 00:19:50,460
also bind them in the code so for this

00:19:47,040 --> 00:19:52,410
the nice thing that you can do with with

00:19:50,460 --> 00:19:54,660
server list is that it's pluggable so

00:19:52,410 --> 00:19:57,920
anyone can write a plug-in that hooks

00:19:54,660 --> 00:20:02,370
into events in the framework and

00:19:57,920 --> 00:20:03,900
implement stuff so there is a nice nice

00:20:02,370 --> 00:20:06,660
plugin called service Python

00:20:03,900 --> 00:20:17,850
requirements I will still it as I said

00:20:06,660 --> 00:20:23,820
it's it's a node so and I also I also

00:20:17,850 --> 00:20:25,800
need to edit to my Yano file to

00:20:23,820 --> 00:20:33,150
configure it to configure it to work

00:20:25,800 --> 00:20:40,640
with it so let's go to the ya know I led

00:20:33,150 --> 00:20:45,660
up plugins section and put it here and

00:20:40,640 --> 00:20:51,900
again I'm deploying and now you'll see

00:20:45,660 --> 00:20:56,040
that it takes the Python packages from

00:20:51,900 --> 00:21:00,990
the spiritual environment and it will

00:20:56,040 --> 00:21:03,980
create the requirements folder will my

00:21:00,990 --> 00:21:10,590
packages and package everything together

00:21:03,980 --> 00:21:12,270
deploy to to AWS this time it only goes

00:21:10,590 --> 00:21:16,320
for the changes that are needed to be

00:21:12,270 --> 00:21:21,900
done so this deployment should be

00:21:16,320 --> 00:21:25,720
quicker and let's curl again and I get

00:21:21,900 --> 00:21:28,450
all the data time and the

00:21:25,720 --> 00:21:33,220
the message so this was an example of

00:21:28,450 --> 00:21:35,920
using circle this framework let's see

00:21:33,220 --> 00:21:39,850
another example that is unique for for

00:21:35,920 --> 00:21:44,050
Python and this is a friend called Zappa

00:21:39,850 --> 00:21:46,390
it was developed by rich Jones and the

00:21:44,050 --> 00:21:49,360
idea of Zappa is that if you already

00:21:46,390 --> 00:21:53,500
have a whiskey server for example you

00:21:49,360 --> 00:21:56,470
have Slough or jungle and you want to

00:21:53,500 --> 00:21:58,390
take it as a whole and deploy to lambda

00:21:56,470 --> 00:22:01,480
because you don't want to manage your

00:21:58,390 --> 00:22:04,960
servers so you can use that for this and

00:22:01,480 --> 00:22:09,280
it's a super simple the way it works it

00:22:04,960 --> 00:22:14,020
it's packages your let's say Django or

00:22:09,280 --> 00:22:17,140
flask application it uploads it to a

00:22:14,020 --> 00:22:19,900
lambda function creates a proxy from an

00:22:17,140 --> 00:22:22,330
API gateway and so you don't need to

00:22:19,900 --> 00:22:27,250
define every endpoint that you have on

00:22:22,330 --> 00:22:31,780
your API and it handles it for you and

00:22:27,250 --> 00:22:37,210
it's super easy because let's say I have

00:22:31,780 --> 00:22:44,790
here a basic flask application with two

00:22:37,210 --> 00:22:47,920
endpoints it converts currency so if

00:22:44,790 --> 00:22:52,380
what I need to do is just create a Zepa

00:22:47,920 --> 00:22:54,850
in it I already pip install SAP ok and

00:22:52,380 --> 00:22:58,240
when you do that by in it it will just

00:22:54,850 --> 00:23:02,650
ask you for different configurations I'm

00:22:58,240 --> 00:23:07,870
going with the default here and it

00:23:02,650 --> 00:23:12,540
created a configuration file which call

00:23:07,870 --> 00:23:18,010
data settings so again here I want to

00:23:12,540 --> 00:23:19,510
change the AWS region and there are many

00:23:18,010 --> 00:23:22,900
many other stuff that I can configure

00:23:19,510 --> 00:23:24,730
here but will not get into it but it has

00:23:22,900 --> 00:23:31,270
a lot of functionality that you can do

00:23:24,730 --> 00:23:35,530
here and again Zepa deploy it takes

00:23:31,270 --> 00:23:38,170
about a minute and it does again it

00:23:35,530 --> 00:23:39,140
happens it takes the environment

00:23:38,170 --> 00:23:41,960
environment

00:23:39,140 --> 00:23:44,570
invar the virtual environment that

00:23:41,960 --> 00:23:45,950
you're in it takes all the dependencies

00:23:44,570 --> 00:23:49,090
from this environment

00:23:45,950 --> 00:23:52,549
packages everything with your code and

00:23:49,090 --> 00:23:55,820
creates the needed resources on AWS the

00:23:52,549 --> 00:23:59,750
EPI gateway the s3 bucket upload

00:23:55,820 --> 00:24:14,090
everything creates a lambda and then you

00:23:59,750 --> 00:24:16,160
got it okay so let's take this and so we

00:24:14,090 --> 00:24:19,309
said that we have two endpoints so this

00:24:16,160 --> 00:24:22,669
is the first one the hello and we have

00:24:19,309 --> 00:24:27,740
another that conferred let's say from

00:24:22,669 --> 00:24:32,960
some dollars to euros and convert 20

00:24:27,740 --> 00:24:36,650
oops to euros and convert 20 dollars and

00:24:32,960 --> 00:24:39,980
you got the response again it didn't

00:24:36,650 --> 00:24:47,120
need to spin anything doing everything

00:24:39,980 --> 00:24:49,340
from CLI with a configuration there

00:24:47,120 --> 00:24:51,620
there are pretty unique features in

00:24:49,340 --> 00:24:53,240
zappa for example you can do a global

00:24:51,620 --> 00:24:55,669
deployment so instead of deploying a

00:24:53,240 --> 00:24:59,720
lambda to one region you can deploy to

00:24:55,669 --> 00:25:02,419
all the regions in AWS there's also a

00:24:59,720 --> 00:25:07,630
functionality for keeping it's warm it's

00:25:02,419 --> 00:25:10,970
something one of the limitations of

00:25:07,630 --> 00:25:13,850
lambda where the way it's implemented is

00:25:10,970 --> 00:25:15,710
it runs on container and when you're not

00:25:13,850 --> 00:25:18,410
calling this container for five minutes

00:25:15,710 --> 00:25:21,530
it will become cold so next time when

00:25:18,410 --> 00:25:23,270
you call it it will mean might need two

00:25:21,530 --> 00:25:25,850
seconds to get warmer

00:25:23,270 --> 00:25:28,790
so if latency is something important you

00:25:25,850 --> 00:25:35,240
get here a kind of a trick of keeping

00:25:28,790 --> 00:25:36,950
keeping it's warm it also supports using

00:25:35,240 --> 00:25:41,720
the lambda packages and many Linux

00:25:36,950 --> 00:25:44,780
Wheels packages which are pre compiled

00:25:41,720 --> 00:25:48,770
packages for Python precompile packages

00:25:44,780 --> 00:25:52,060
that are suitable for the AWS lambda in

00:25:48,770 --> 00:25:56,090
since the linux version that they use

00:25:52,060 --> 00:26:01,730
another framework is a chalice it's by

00:25:56,090 --> 00:26:04,190
AWS it looks very similar to flask I

00:26:01,730 --> 00:26:07,900
like that but it creates automatically

00:26:04,190 --> 00:26:10,910
creates a separate endpoint for every

00:26:07,900 --> 00:26:13,790
route video you will define in your code

00:26:10,910 --> 00:26:17,960
but again it's very simple to use you

00:26:13,790 --> 00:26:20,180
create a new project from CLI and you

00:26:17,960 --> 00:26:23,630
define everything in your code and then

00:26:20,180 --> 00:26:27,830
you deploy last thing that I want to

00:26:23,630 --> 00:26:30,940
show you is is it's not a front iframe

00:26:27,830 --> 00:26:34,520
abut a library called fibrin it was

00:26:30,940 --> 00:26:38,780
developed by Eric Jonas he's a postdoc

00:26:34,520 --> 00:26:41,450
in Berkeley and it's simply a library

00:26:38,780 --> 00:26:44,320
that enables you to take a function from

00:26:41,450 --> 00:26:48,500
your code and at runtime distributed to

00:26:44,320 --> 00:26:50,900
endless amount of lambda functions so

00:26:48,500 --> 00:26:55,460
there's a nice example by Sean Smith

00:26:50,900 --> 00:26:58,550
that he used it for web scraping it

00:26:55,460 --> 00:27:02,390
created the that's the whole code so he

00:26:58,550 --> 00:27:07,130
has a script function that takes a URL

00:27:02,390 --> 00:27:11,090
and using pyrin you create a pyrin

00:27:07,130 --> 00:27:15,620
executor and then you pass equal to the

00:27:11,090 --> 00:27:16,910
max rank function of pyrin and you pass

00:27:15,620 --> 00:27:19,700
the function that you want to be

00:27:16,910 --> 00:27:23,930
executed distributed li and you pass an

00:27:19,700 --> 00:27:27,350
array of inputs so in this this example

00:27:23,930 --> 00:27:30,920
array of URLs that he wants he wanted to

00:27:27,350 --> 00:27:33,110
describe and that's it and what happens

00:27:30,920 --> 00:27:37,130
behind the scenes is that during

00:27:33,110 --> 00:27:39,560
execution pyrin will create those

00:27:37,130 --> 00:27:41,930
lambdas will deployed and package deploy

00:27:39,560 --> 00:27:44,510
them and create to configure all the

00:27:41,930 --> 00:27:48,020
roles that you need and basically it's

00:27:44,510 --> 00:27:50,900
just one line of codes and I think this

00:27:48,020 --> 00:27:54,700
is this is an amazing example of what

00:27:50,900 --> 00:27:59,870
you can simply do with with serverless

00:27:54,700 --> 00:28:00,909
okay so we got to the end if you take

00:27:59,870 --> 00:28:04,690
ways

00:28:00,909 --> 00:28:07,239
that that you might take is that serious

00:28:04,690 --> 00:28:10,239
is pretty fast to develop it's cost

00:28:07,239 --> 00:28:12,159
effective for most used cases within

00:28:10,239 --> 00:28:14,409
talked about we didn't talk enough about

00:28:12,159 --> 00:28:16,269
limitation but you should be again

00:28:14,409 --> 00:28:19,629
should be aware of when to use it when

00:28:16,269 --> 00:28:23,379
not and you can do it easily with Python

00:28:19,629 --> 00:28:25,749
and using the frameworks and for for

00:28:23,379 --> 00:28:28,239
those of you contributes to frameworks

00:28:25,749 --> 00:28:32,429
or build like to build stuff and open

00:28:28,239 --> 00:28:35,080
source think there's a plenty of

00:28:32,429 --> 00:28:37,149
opportunities in the server list domain

00:28:35,080 --> 00:28:40,749
because there are many problems and

00:28:37,149 --> 00:28:43,509
challenges to be solved there and there

00:28:40,749 --> 00:28:47,019
are many tools that can be built to

00:28:43,509 --> 00:28:49,690
solve these issues and Python is one of

00:28:47,019 --> 00:28:50,950
the best tools to do that that's it

00:28:49,690 --> 00:28:54,740
thank you

00:28:50,950 --> 00:28:59,300
[Applause]

00:28:54,740 --> 00:29:01,220
you have any question so we got about

00:28:59,300 --> 00:29:03,740
one minute happy to take one question

00:29:01,220 --> 00:29:05,390
here and then Benny's offered to also

00:29:03,740 --> 00:29:07,850
meet people out in the hallway to to

00:29:05,390 --> 00:29:11,150
continue questions yeah okay great

00:29:07,850 --> 00:29:14,300
go ahead hi um I really enjoyed your

00:29:11,150 --> 00:29:18,050
talk I was wondering if you have any

00:29:14,300 --> 00:29:21,590
preference or comments about the the the

00:29:18,050 --> 00:29:24,970
config files being like general or JSON

00:29:21,590 --> 00:29:28,730
format like on the ease of maintenance

00:29:24,970 --> 00:29:32,650
for me ya know is easier easier that's

00:29:28,730 --> 00:29:32,650
less code PMO

00:29:32,770 --> 00:29:40,460
okay how easy is it to switch between

00:29:38,840 --> 00:29:42,740
some of these frameworks because I know

00:29:40,460 --> 00:29:44,660
they're all kind of young and so if we

00:29:42,740 --> 00:29:47,230
pick one and then in three or four years

00:29:44,660 --> 00:29:50,390
it turns out we picked the wrong one

00:29:47,230 --> 00:29:52,190
music are the configurations kind of

00:29:50,390 --> 00:29:54,140
similar where you can obviously it's not

00:29:52,190 --> 00:29:55,820
trivial but like what'swhat's the effort

00:29:54,140 --> 00:29:57,950
involved have you converted projects

00:29:55,820 --> 00:29:59,690
between these different frameworks yeah

00:29:57,950 --> 00:30:01,910
so free or four years in terms of

00:29:59,690 --> 00:30:04,010
service is eternity so it's hard to say

00:30:01,910 --> 00:30:08,600
what it will be in three or four years

00:30:04,010 --> 00:30:10,610
but I think it's every framework has its

00:30:08,600 --> 00:30:13,850
own configuration and configuration

00:30:10,610 --> 00:30:16,850
style so it's not reveal the code itself

00:30:13,850 --> 00:30:19,640
is the same programming model so it's

00:30:16,850 --> 00:30:22,520
easy but take the configuration and and

00:30:19,640 --> 00:30:27,070
replace it it's not trivial but it's one

00:30:22,520 --> 00:30:27,070
file so it shouldn't be too hard

00:30:27,309 --> 00:30:36,490
thank you very much again thank you very

00:30:32,120 --> 00:30:36,490

YouTube URL: https://www.youtube.com/watch?v=G17E4Muylis


