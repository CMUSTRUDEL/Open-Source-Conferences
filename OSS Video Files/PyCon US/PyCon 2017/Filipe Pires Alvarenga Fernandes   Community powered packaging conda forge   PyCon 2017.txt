Title: Filipe Pires Alvarenga Fernandes   Community powered packaging conda forge   PyCon 2017
Publication date: 2017-05-21
Playlist: PyCon 2017
Description: 
	"Speaker: Filipe Pires Alvarenga Fernandes

The Python scientific community always wanted a package manager that is cross platform,
does not require `sudo`,
and lets Python be awesome!
The conda package manager solved that problem, but created a new ones...

This talk is a tour disguised as a beginner tutorial to `conda-forge` packaging.
We will try to discuss some myths and misconceptions about `conda` and `conda-forge`,
as well as a quick comparison with `pip` and `wheels`.

Slides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides"
Captions: 
	00:00:05,089 --> 00:00:11,160
good afternoon welcome to this ficon

00:00:08,610 --> 00:00:15,540
afternoon session we're going to hear

00:00:11,160 --> 00:00:17,039
from Philippe for nine days about Conda

00:00:15,540 --> 00:00:19,590
and I guess some of the history perhaps

00:00:17,039 --> 00:00:27,750
yep I'm looking forward to hearing about

00:00:19,590 --> 00:00:29,910
it thank you so just before I start I

00:00:27,750 --> 00:00:31,289
would like to thank my con organizer for

00:00:29,910 --> 00:00:34,020
everything this is really an awesome

00:00:31,289 --> 00:00:37,079
event and I'm very nervous to be here

00:00:34,020 --> 00:00:37,770
under this light and it's big room so if

00:00:37,079 --> 00:00:39,780
I faint

00:00:37,770 --> 00:00:42,050
anyone can come up here and just read

00:00:39,780 --> 00:00:45,090
the speaker notes everything is in here

00:00:42,050 --> 00:00:47,760
I'll probably run too fast because I'm

00:00:45,090 --> 00:00:49,410
nervous and so if you are really

00:00:47,760 --> 00:00:51,770
interesting just try to find me in the

00:00:49,410 --> 00:00:54,270
corridor so we can speak more later and

00:00:51,770 --> 00:00:55,829
because English is not my first language

00:00:54,270 --> 00:00:57,180
there's a big chance that we're not

00:00:55,829 --> 00:00:59,850
gonna understand what I'm saying

00:00:57,180 --> 00:01:02,930
so I really wouldn't want to be the

00:00:59,850 --> 00:01:06,119
person doing the live captioning

00:01:02,930 --> 00:01:10,650
so before I start a show of hands who

00:01:06,119 --> 00:01:12,900
here use this counter awesome and who

00:01:10,650 --> 00:01:16,080
here knows about motherboards are used

00:01:12,900 --> 00:01:18,659
104 before let's even better

00:01:16,080 --> 00:01:23,040
and here contributed took on the forge

00:01:18,659 --> 00:01:26,850
in a way like a package a PR or opening

00:01:23,040 --> 00:01:30,030
an issue not so much so that's what I

00:01:26,850 --> 00:01:32,040
want to change I mean I'm here to

00:01:30,030 --> 00:01:33,990
actually tell you guys that it's a

00:01:32,040 --> 00:01:36,299
community effort and you are all invited

00:01:33,990 --> 00:01:37,740
to participate so that's why the title

00:01:36,299 --> 00:01:41,970
of my talk is community powered

00:01:37,740 --> 00:01:45,450
packaging on the forge just before I

00:01:41,970 --> 00:01:47,159
start a little bit of who I am like my

00:01:45,450 --> 00:01:51,960
name is Libby Fernandez my Twitter

00:01:47,159 --> 00:01:53,939
github and everything is OC e FB AF I'm

00:01:51,960 --> 00:01:57,329
not a developer I'm a physical

00:01:53,939 --> 00:01:59,909
geographers turned neutral developer I'm

00:01:57,329 --> 00:02:01,829
a science not a data science which is a

00:01:59,909 --> 00:02:04,079
buzzword lately I like to throw

00:02:01,829 --> 00:02:06,390
electronic instruments into the salt

00:02:04,079 --> 00:02:08,180
water of the sea hope they come back

00:02:06,390 --> 00:02:11,389
with data

00:02:08,180 --> 00:02:11,389
[Music]

00:02:11,850 --> 00:02:18,940
usually this is what I do for a living

00:02:15,030 --> 00:02:21,280
like the wave is not always there it's

00:02:18,940 --> 00:02:27,430
only the one picture that I nice picture

00:02:21,280 --> 00:02:30,220
that I had so right now I'm working for

00:02:27,430 --> 00:02:31,930
NOAA in our organization that's called I

00:02:30,220 --> 00:02:35,650
use the integrated ocean observing

00:02:31,930 --> 00:02:39,489
system I use break the u.s. into two

00:02:35,650 --> 00:02:41,260
several smaller regions and the reason

00:02:39,489 --> 00:02:45,730
why I'm telling you guys is is because

00:02:41,260 --> 00:02:48,580
all these regions have universities 30

00:02:45,730 --> 00:02:51,430
companies and individuals they are

00:02:48,580 --> 00:02:53,650
acquiring data oceanographic data or

00:02:51,430 --> 00:02:56,050
they are creating data via models and

00:02:53,650 --> 00:02:58,540
they are putting the data online and all

00:02:56,050 --> 00:03:02,620
this pipeline is processed mostly with

00:02:58,540 --> 00:03:04,120
Python or analyzed with Python and you

00:03:02,620 --> 00:03:08,019
can imagine that such a big organization

00:03:04,120 --> 00:03:11,500
with so many moving parts like 11

00:03:08,019 --> 00:03:14,739
regional situations 17 federal partners

00:03:11,500 --> 00:03:17,500
we are using several different formats

00:03:14,739 --> 00:03:22,480
to store the data and at CDF hdf four

00:03:17,500 --> 00:03:25,959
and five CGS and anything that you can

00:03:22,480 --> 00:03:29,470
imagine exist there so how can we

00:03:25,959 --> 00:03:32,739
actually share our scripts or Jupiter

00:03:29,470 --> 00:03:34,480
notebooks across all this community it's

00:03:32,739 --> 00:03:35,110
virtually impossible like some people

00:03:34,480 --> 00:03:37,540
use needles

00:03:35,110 --> 00:03:41,590
some people use OS 10 some people use

00:03:37,540 --> 00:03:44,230
Linux and if I send someone a Jupiter

00:03:41,590 --> 00:03:45,280
notebook that loads this data the first

00:03:44,230 --> 00:03:47,500
thing they are going to complain all

00:03:45,280 --> 00:03:50,320
import error oh I cannot install these

00:03:47,500 --> 00:03:52,360
or I cannot install that package so it's

00:03:50,320 --> 00:03:57,579
hell software deployment in this

00:03:52,360 --> 00:04:00,220
scenario it's good tutorial so this is

00:03:57,579 --> 00:04:03,280
how I define the problem the scientific

00:04:00,220 --> 00:04:05,709
community always wanted a cross-platform

00:04:03,280 --> 00:04:08,140
package manager' cross bet from it is

00:04:05,709 --> 00:04:09,880
very important for us like we cannot

00:04:08,140 --> 00:04:11,859
think that everybody has a Mac or

00:04:09,880 --> 00:04:13,840
everybody uses media or everybody is

00:04:11,859 --> 00:04:15,489
going to use Linux even in the linux

00:04:13,840 --> 00:04:16,870
word things are not really homogeneous

00:04:15,489 --> 00:04:20,769
like there are different distributions

00:04:16,870 --> 00:04:23,290
different ways to install things I app

00:04:20,769 --> 00:04:25,480
to get um to get your headers

00:04:23,290 --> 00:04:28,330
everything it's very complicated so we

00:04:25,480 --> 00:04:31,390
need a single cross-platform package

00:04:28,330 --> 00:04:34,510
manager' and we also want it to not

00:04:31,390 --> 00:04:36,070
require elevated privileges like I'm

00:04:34,510 --> 00:04:38,230
talking about the government agency not

00:04:36,070 --> 00:04:39,820
everybody can sue do things they you

00:04:38,230 --> 00:04:42,250
know they are very limited on how to

00:04:39,820 --> 00:04:46,060
install packages so we need things that

00:04:42,250 --> 00:04:48,400
I can leave on the user space and we

00:04:46,060 --> 00:04:51,610
needed to handle every type of packages

00:04:48,400 --> 00:04:54,870
not only Python packages right including

00:04:51,610 --> 00:04:57,070
Python packages that depends on

00:04:54,870 --> 00:05:02,950
third-party libraries from C libraries

00:04:57,070 --> 00:05:04,960
and etc and if we have all that we can

00:05:02,950 --> 00:05:08,860
actually use by - as an awesome

00:05:04,960 --> 00:05:11,980
scientific tool that we all love so just

00:05:08,860 --> 00:05:14,470
a little bit of history before I go into

00:05:11,980 --> 00:05:17,320
the actual meat of the talk people

00:05:14,470 --> 00:05:21,250
before we who here remember how people

00:05:17,320 --> 00:05:23,530
four wheels was nightmare right you're

00:05:21,250 --> 00:05:25,030
going through hell like how can I get

00:05:23,530 --> 00:05:28,450
the headers how can I get these

00:05:25,030 --> 00:05:32,980
libraries that my Python packages its

00:05:28,450 --> 00:05:36,010
prep something needs to work and if

00:05:32,980 --> 00:05:38,050
you're on Windows it's even worse like

00:05:36,010 --> 00:05:39,730
Windows actually has a very nice

00:05:38,050 --> 00:05:42,990
open-source package manager called

00:05:39,730 --> 00:05:45,580
chocolaty does anyone here ever use it

00:05:42,990 --> 00:05:49,450
just a few hands yeah

00:05:45,580 --> 00:05:50,590
so casein just by three hands you can

00:05:49,450 --> 00:05:56,740
say that people don't even know that

00:05:50,590 --> 00:05:59,110
about that too much and after that we

00:05:56,740 --> 00:06:01,660
got the distribution area like everybody

00:05:59,110 --> 00:06:04,330
was packing whole pile distributions and

00:06:01,660 --> 00:06:06,640
giving them to you we have the info at

00:06:04,330 --> 00:06:08,440
Python distribution we have the Anaconda

00:06:06,640 --> 00:06:11,260
distribution rate which has called in it

00:06:08,440 --> 00:06:13,330
we had to activate byte in Python XY and

00:06:11,260 --> 00:06:16,390
many others but distribution will pretty

00:06:13,330 --> 00:06:18,510
much like those Bronze Age tools for

00:06:16,390 --> 00:06:21,100
carpentry they all look alike and we

00:06:18,510 --> 00:06:23,920
don't really know if all the tools that

00:06:21,100 --> 00:06:25,330
we need are there like if you need

00:06:23,920 --> 00:06:28,330
anything that's not in the distribution

00:06:25,330 --> 00:06:30,760
you are back to hell you can't really

00:06:28,330 --> 00:06:32,919
solve that problem very easily sometimes

00:06:30,760 --> 00:06:35,330
it's even worse I met people who had

00:06:32,919 --> 00:06:38,210
three to four distributions

00:06:35,330 --> 00:06:41,270
different tasks oh I'm doing GIS so I

00:06:38,210 --> 00:06:43,400
have the ark by distribution also but

00:06:41,270 --> 00:06:46,009
now I'm doing I'm really netcdf file I

00:06:43,400 --> 00:06:49,340
have the epd distribution and so on and

00:06:46,009 --> 00:06:50,419
so forth so it's even worse in fact if

00:06:49,340 --> 00:06:55,330
you have more than one distribution

00:06:50,419 --> 00:06:58,159
installed after that we had colder and

00:06:55,330 --> 00:07:01,219
the chances of publishing your binaries

00:06:58,159 --> 00:07:02,599
on online on the Anaconda cloud that's

00:07:01,219 --> 00:07:06,560
what I like to call Condor in the

00:07:02,599 --> 00:07:08,030
various storage channels to me Condor in

00:07:06,560 --> 00:07:09,469
the territory part channel this is

00:07:08,030 --> 00:07:11,690
pretty much like that if you're an

00:07:09,469 --> 00:07:14,389
expert and know what you're doing you

00:07:11,690 --> 00:07:16,789
can get away with it but the chances of

00:07:14,389 --> 00:07:19,190
having a broken environment with broken

00:07:16,789 --> 00:07:21,020
lips it's really really high because you

00:07:19,190 --> 00:07:22,879
have no idea how that binary was

00:07:21,020 --> 00:07:24,770
compiled if it's going to be compatible

00:07:22,879 --> 00:07:26,960
with the other binaries that you have on

00:07:24,770 --> 00:07:29,539
your environment you have no provenance

00:07:26,960 --> 00:07:31,669
on all those binaries like how did the

00:07:29,539 --> 00:07:34,400
guy compile this I mean do you trust

00:07:31,669 --> 00:07:37,250
installing a binary out of the blue from

00:07:34,400 --> 00:07:38,810
online on your machine like it's not

00:07:37,250 --> 00:07:40,279
signed you have no idea how it was

00:07:38,810 --> 00:07:46,190
compiled you have no idea what's in

00:07:40,279 --> 00:07:48,650
there so about this time some companies

00:07:46,190 --> 00:07:52,129
not really company some communities you

00:07:48,650 --> 00:07:55,449
start organizing themselves and in kind

00:07:52,129 --> 00:07:57,740
of a ring of trust for channels my

00:07:55,449 --> 00:08:00,620
community I use we created a I use

00:07:57,740 --> 00:08:03,289
channel the UK met offs create the situs

00:08:00,620 --> 00:08:05,529
Channel some people create the bio

00:08:03,289 --> 00:08:09,529
called a channel where they had all this

00:08:05,529 --> 00:08:12,560
biological stuff compiled and many

00:08:09,529 --> 00:08:17,539
others communities so things starts

00:08:12,560 --> 00:08:19,909
organizing by themselves and then people

00:08:17,539 --> 00:08:24,199
traduced wheels it's awesome right who

00:08:19,909 --> 00:08:27,199
here doesn't like wheels just one hand

00:08:24,199 --> 00:08:29,479
yeah I can get that I understand but

00:08:27,199 --> 00:08:31,190
still it's awesome right we can do

00:08:29,479 --> 00:08:34,099
everything now we can just push a button

00:08:31,190 --> 00:08:38,050
Aries on pi PI and people saw anything

00:08:34,099 --> 00:08:38,050
right we are happy right

00:08:42,259 --> 00:08:48,810
no we are not that happy there are many

00:08:45,839 --> 00:08:52,050
problems with wheels the first one is

00:08:48,810 --> 00:08:55,019
that PI P I is a publishing platform so

00:08:52,050 --> 00:08:57,660
if I'm the author of a library and I own

00:08:55,019 --> 00:09:00,329
that namespace and I don't want to

00:08:57,660 --> 00:09:04,319
publish wheels you can't do that for me

00:09:00,329 --> 00:09:06,389
you need my permission to do it also if

00:09:04,319 --> 00:09:08,040
I want to do it it's not that easy all

00:09:06,389 --> 00:09:10,079
the boilerplate to publish the wheels

00:09:08,040 --> 00:09:11,879
it's online it's open but it's

00:09:10,079 --> 00:09:14,300
distributed in many different places

00:09:11,879 --> 00:09:17,129
it's not that easy to just you know

00:09:14,300 --> 00:09:20,939
build binary and put it there unless

00:09:17,129 --> 00:09:22,740
it's a pure Python package and the worst

00:09:20,939 --> 00:09:26,129
thing for me is that many packages they

00:09:22,740 --> 00:09:27,629
have some compiler flags and by

00:09:26,129 --> 00:09:29,220
publishing the wheels you have only one

00:09:27,629 --> 00:09:31,800
option and you hope that's the best

00:09:29,220 --> 00:09:36,139
option but what if you need numpy with

00:09:31,800 --> 00:09:38,459
atlas and not open blasts or with mko or

00:09:36,139 --> 00:09:42,360
whatever library that you want to link

00:09:38,459 --> 00:09:46,769
to you don't have that option and you

00:09:42,360 --> 00:09:49,019
have only one binary and what's worse is

00:09:46,769 --> 00:09:50,279
that someone takes some software

00:09:49,019 --> 00:09:53,430
developers they don't want to maintain

00:09:50,279 --> 00:09:55,170
wheels it's too hard for them they just

00:09:53,430 --> 00:09:57,810
don't want to publish like Zhi Dao is

00:09:55,170 --> 00:09:59,790
one of those unless you have the headers

00:09:57,810 --> 00:10:04,199
on your machine you can't pip install

00:09:59,790 --> 00:10:06,050
data so long story short packaging is

00:10:04,199 --> 00:10:08,399
not easy

00:10:06,050 --> 00:10:10,860
we still have trouble installing our

00:10:08,399 --> 00:10:15,360
machines even with people use even with

00:10:10,860 --> 00:10:17,819
coda and various generations this Center

00:10:15,360 --> 00:10:19,800
is even worse if the library the Python

00:10:17,819 --> 00:10:22,829
I will use two types trucks as a seed

00:10:19,800 --> 00:10:24,269
library or C++ library it gets even

00:10:22,829 --> 00:10:27,269
worse when it has a compilation step

00:10:24,269 --> 00:10:31,110
like seitan or Fortran like my word

00:10:27,269 --> 00:10:35,910
Fortran is alive and well unfortunately

00:10:31,110 --> 00:10:38,879
and only in those I mean come on we

00:10:35,910 --> 00:10:43,019
don't even know how to find VC vers top

00:10:38,879 --> 00:10:47,430
at so yeah I found myself doing that a

00:10:43,019 --> 00:10:49,439
lot especially on Windows so let me just

00:10:47,430 --> 00:10:51,690
take a step back even though I've almost

00:10:49,439 --> 00:10:54,150
everybody raised the rent the hands

00:10:51,690 --> 00:10:58,520
what is called I just want to give my

00:10:54,150 --> 00:11:01,470
view of Conda it is an open-source tool

00:10:58,520 --> 00:11:03,960
and it was widely adopted by the

00:11:01,470 --> 00:11:07,620
scientific community from their own

00:11:03,960 --> 00:11:09,300
webpage package everything and share

00:11:07,620 --> 00:11:12,210
your repository with your clients or

00:11:09,300 --> 00:11:15,750
colleagues now why the scientific

00:11:12,210 --> 00:11:17,970
community adopt quanta why we didn't

00:11:15,750 --> 00:11:22,410
adopt apt-get or your arm or chocolate

00:11:17,970 --> 00:11:25,260
or brew well the main reason there in my

00:11:22,410 --> 00:11:27,510
opinion is because in actually my

00:11:25,260 --> 00:11:29,160
community if I adopt apt-get I have to

00:11:27,510 --> 00:11:32,790
tell everybody you need useable to

00:11:29,160 --> 00:11:35,070
derive the distress if I adopt yum you

00:11:32,790 --> 00:11:38,640
need to use the order derived distress

00:11:35,070 --> 00:11:41,310
and if I had adopt chocolate everybody

00:11:38,640 --> 00:11:45,870
needs to use Windows so we can't really

00:11:41,310 --> 00:11:48,900
do that and why we can't use people

00:11:45,870 --> 00:11:50,130
Mills that's another problem that very

00:11:48,900 --> 00:11:52,470
specific to the scientific community

00:11:50,130 --> 00:11:54,780
like I said it is going to be a

00:11:52,470 --> 00:11:56,940
canonical binary compiled with those

00:11:54,780 --> 00:11:58,680
flags and those options if you need

00:11:56,940 --> 00:12:01,320
anything that's not there it's not

00:11:58,680 --> 00:12:02,340
possible or I mean maybe it can be

00:12:01,320 --> 00:12:04,500
possible you're going to be adding

00:12:02,340 --> 00:12:06,330
layers and layers of complexity to views

00:12:04,500 --> 00:12:09,540
that maybe pipeline materials don't

00:12:06,330 --> 00:12:14,730
really want that as of today I don't

00:12:09,540 --> 00:12:16,560
think that exists so another step back

00:12:14,730 --> 00:12:19,230
just to explain what is a counter chain

00:12:16,560 --> 00:12:21,210
icon the channel is similar to a Linux

00:12:19,230 --> 00:12:26,420
repository or an app store is where you

00:12:21,210 --> 00:12:28,890
go to get your binary right now the only

00:12:26,420 --> 00:12:32,940
canonical place to host your binary is

00:12:28,890 --> 00:12:35,600
on anaconda org because Condor is a tool

00:12:32,940 --> 00:12:38,880
created by continuing they also gave us

00:12:35,600 --> 00:12:42,080
free cloud storage so we can put our

00:12:38,880 --> 00:12:44,610
binaries there although it supports

00:12:42,080 --> 00:12:45,870
anything if you want to host it locally

00:12:44,610 --> 00:12:48,180
on your machine if you want to host it

00:12:45,870 --> 00:12:49,500
on an Internet on your company or if you

00:12:48,180 --> 00:12:51,390
want to create your own cloud and put

00:12:49,500 --> 00:12:55,130
your binders there you should be able to

00:12:51,390 --> 00:12:55,130
do it and just point to a different URL

00:12:55,310 --> 00:13:02,220
and then we can upload or pick compiled

00:12:57,870 --> 00:13:04,060
binary binary there so like I said

00:13:02,220 --> 00:13:05,800
package is hard

00:13:04,060 --> 00:13:09,460
and that's why you shouldn't do it alone

00:13:05,800 --> 00:13:11,140
and this is where I actually get to the

00:13:09,460 --> 00:13:13,690
meat of this talk I mean what is going

00:13:11,140 --> 00:13:16,000
to Forge kind of Forge is this all this

00:13:13,690 --> 00:13:18,970
work that we have to do for Peggy all

00:13:16,000 --> 00:13:21,180
these communities let's join together

00:13:18,970 --> 00:13:23,710
and let's do it together

00:13:21,180 --> 00:13:28,390
so how it's not a for different from all

00:13:23,710 --> 00:13:32,140
those story party channels first we try

00:13:28,390 --> 00:13:34,300
to call on other communities and put

00:13:32,140 --> 00:13:38,800
everybody under one organization on

00:13:34,300 --> 00:13:40,870
github and then we have all these

00:13:38,800 --> 00:13:43,270
recipes under the same umbrella so we

00:13:40,870 --> 00:13:47,890
can discuss we can talk to each other we

00:13:43,270 --> 00:13:50,110
can have standards for the recipes then

00:13:47,890 --> 00:13:51,700
we unify everybody into one build

00:13:50,110 --> 00:13:53,050
infrastructure I'm going to talk more

00:13:51,700 --> 00:13:55,870
about the building infrastructure later

00:13:53,050 --> 00:13:57,730
but I'm not going to be compiling things

00:13:55,870 --> 00:13:59,110
on my machine or on someone else's

00:13:57,730 --> 00:14:00,670
machine we're going to be compiling is

00:13:59,110 --> 00:14:02,740
on the cloud with a set of rules and

00:14:00,670 --> 00:14:07,870
configurations to standardize all the

00:14:02,740 --> 00:14:10,210
packages so basically this is the idea

00:14:07,870 --> 00:14:12,190
behind color Forge want to be one single

00:14:10,210 --> 00:14:14,410
channel to rule them all so you don't

00:14:12,190 --> 00:14:16,360
really need to go to other target buyers

00:14:14,410 --> 00:14:20,140
channels basically can't afford should

00:14:16,360 --> 00:14:23,800
have everything that you need so I've

00:14:20,140 --> 00:14:25,630
been talking how we put these binaries

00:14:23,800 --> 00:14:27,760
online but how we build these binaries

00:14:25,630 --> 00:14:30,310
they are built using recipes there are

00:14:27,760 --> 00:14:32,260
called Condor recipes and they're very

00:14:30,310 --> 00:14:34,840
similar to respect files for familiar

00:14:32,260 --> 00:14:37,060
with rpms it's basically just a set of

00:14:34,840 --> 00:14:40,840
instructions that the machine will use

00:14:37,060 --> 00:14:43,510
to create a binary this is an example

00:14:40,840 --> 00:14:45,360
that I got from the pandas recipe we

00:14:43,510 --> 00:14:48,040
basically have the name the version

00:14:45,360 --> 00:14:49,930
where we're going to download it from a

00:14:48,040 --> 00:14:53,560
checksum to check the download is fine

00:14:49,930 --> 00:14:55,990
and a comment that we use to build paint

00:14:53,560 --> 00:14:58,750
is relatively easy it's just PI to setup

00:14:55,990 --> 00:15:01,390
install if it's an on Python package we

00:14:58,750 --> 00:15:06,820
can put all that in a separate file that

00:15:01,390 --> 00:15:10,990
we call Gil dot SH and some metadata on

00:15:06,820 --> 00:15:13,000
who is maintaining that when the license

00:15:10,990 --> 00:15:15,010
and everything now

00:15:13,000 --> 00:15:17,680
the infrastructure and I really want to

00:15:15,010 --> 00:15:19,570
take some time to explain this

00:15:17,680 --> 00:15:23,500
all can't afford recipes are hosted on

00:15:19,570 --> 00:15:26,440
github we use a purveyor to build for

00:15:23,500 --> 00:15:30,100
Windows travesty is to build for OS 10

00:15:26,440 --> 00:15:33,089
and circle CI and a docker image to

00:15:30,100 --> 00:15:36,010
build for Linux and just a few numbers

00:15:33,089 --> 00:15:37,480
on the community and I like to say that

00:15:36,010 --> 00:15:39,850
this is outdated daily because the

00:15:37,480 --> 00:15:41,320
community is growing so fast that I got

00:15:39,850 --> 00:15:43,690
these numbers five minutes ago and I'm

00:15:41,320 --> 00:15:45,640
pretty sure the they are different right

00:15:43,690 --> 00:15:49,810
now we have four hundred and fifty eight

00:15:45,640 --> 00:15:53,250
people we have more than 2000 teams and

00:15:49,810 --> 00:15:55,630
we have more than 2400 repositories

00:15:53,250 --> 00:15:57,580
these are the packages that we have the

00:15:55,630 --> 00:15:59,230
team's reflects directly the number of

00:15:57,580 --> 00:16:02,230
packages that we have we have one

00:15:59,230 --> 00:16:05,680
repository for every package how can you

00:16:02,230 --> 00:16:08,800
use the channel you basically do you add

00:16:05,680 --> 00:16:11,620
the chain of your configuration or you

00:16:08,800 --> 00:16:16,120
can just install using the - C called a

00:16:11,620 --> 00:16:18,610
forge and how can you help us how can

00:16:16,120 --> 00:16:20,490
you have the community you can help us

00:16:18,610 --> 00:16:22,720
by reporting issues on the packages

00:16:20,490 --> 00:16:27,310
updating existing packages when they're

00:16:22,720 --> 00:16:30,940
outdated adding new packages reviewing

00:16:27,310 --> 00:16:33,070
her recipes this is a perfect example in

00:16:30,940 --> 00:16:35,200
my opinion how to report issues

00:16:33,070 --> 00:16:36,279
this guy had a problem he just put all

00:16:35,200 --> 00:16:40,440
the information that we need their

00:16:36,279 --> 00:16:43,029
versions the platform the error and

00:16:40,440 --> 00:16:45,850
what's the best of that is example I

00:16:43,029 --> 00:16:47,650
have a script to reproduce it so that

00:16:45,850 --> 00:16:51,730
scripts becomes part of the package test

00:16:47,650 --> 00:16:53,470
later so it is never resurfaces updating

00:16:51,730 --> 00:16:55,870
a rasp is pretty easy you bump the

00:16:53,470 --> 00:16:58,750
version number and then you change the

00:16:55,870 --> 00:17:01,240
checksum and this can be done using a PR

00:16:58,750 --> 00:17:02,650
VI P R so if you're familiar with github

00:17:01,240 --> 00:17:04,179
you can help us right now by just

00:17:02,650 --> 00:17:07,300
sending PR to P date your favorite

00:17:04,179 --> 00:17:10,780
package adding new package is a little

00:17:07,300 --> 00:17:11,740
bit more involved process we have one

00:17:10,780 --> 00:17:13,929
point of entry

00:17:11,740 --> 00:17:15,610
that's called stages recipes these

00:17:13,929 --> 00:17:18,250
repositories where you send a new

00:17:15,610 --> 00:17:21,429
package this new package is reviewed by

00:17:18,250 --> 00:17:24,160
the community and also that package is

00:17:21,429 --> 00:17:27,100
merged it will be quit automatically

00:17:24,160 --> 00:17:29,050
created a new repository with only that

00:17:27,100 --> 00:17:31,160
package and with the person that

00:17:29,050 --> 00:17:34,190
submitted as the maintainer

00:17:31,160 --> 00:17:38,270
so if you submit a package you have full

00:17:34,190 --> 00:17:40,460
control of that repository later this is

00:17:38,270 --> 00:17:42,290
just one example of a PR - stated

00:17:40,460 --> 00:17:45,710
recipes I was adding a package called

00:17:42,290 --> 00:17:48,350
those and that creates a feed stock

00:17:45,710 --> 00:17:51,430
which is individual repository that was

00:17:48,350 --> 00:17:54,380
created later it's basically a

00:17:51,430 --> 00:17:57,950
repository with all the boilerplate for

00:17:54,380 --> 00:18:01,460
Travis CI for circle CI and for a player

00:17:57,950 --> 00:18:03,410
should build your package and upload the

00:18:01,460 --> 00:18:07,310
binary so you don't have to worry about

00:18:03,410 --> 00:18:10,010
that it's everything is automated all

00:18:07,310 --> 00:18:12,140
the tools that we use to automate this

00:18:10,010 --> 00:18:15,400
process lives in a tool called Congolese

00:18:12,140 --> 00:18:18,530
meaty and content it can create a ripple

00:18:15,400 --> 00:18:22,610
automatically can link the recipe

00:18:18,530 --> 00:18:26,660
automatically and can create all the

00:18:22,610 --> 00:18:30,320
boilerplate for all these guys and the

00:18:26,660 --> 00:18:33,230
last step that someone can help us is

00:18:30,320 --> 00:18:34,880
reviewing recipes this is a little bit

00:18:33,230 --> 00:18:37,970
easier but requires some experience

00:18:34,880 --> 00:18:41,600
because we can't automate everything so

00:18:37,970 --> 00:18:44,720
and it's also the most remaining human

00:18:41,600 --> 00:18:47,180
time activity on a forge so if you're an

00:18:44,720 --> 00:18:49,040
expert in recipes we will like you to

00:18:47,180 --> 00:18:51,890
taking a look at the recipes that lives

00:18:49,040 --> 00:18:57,320
in stages recipes we need a hand there -

00:18:51,890 --> 00:19:00,380
George knew packages just a quick look

00:18:57,320 --> 00:19:02,510
under the hood like I said context movie

00:19:00,380 --> 00:19:05,480
is a tool that we use to linked we

00:19:02,510 --> 00:19:07,730
render and create the feedstocks we use

00:19:05,480 --> 00:19:12,140
Heroku services to run all the automated

00:19:07,730 --> 00:19:15,080
stuff and this is probably an

00:19:12,140 --> 00:19:16,520
interesting part to assure that all the

00:19:15,080 --> 00:19:19,280
packages are consistent with you each

00:19:16,520 --> 00:19:22,430
other will bring certain packages to key

00:19:19,280 --> 00:19:24,890
versions and because we cannot propagate

00:19:22,430 --> 00:19:27,320
this pin manually because we have more

00:19:24,890 --> 00:19:28,870
than 200 packages we have a tool that

00:19:27,320 --> 00:19:31,070
does that for us

00:19:28,870 --> 00:19:33,320
just a few example this is how the

00:19:31,070 --> 00:19:35,570
linter works like this person who

00:19:33,320 --> 00:19:37,100
submitted for recipes and you can see

00:19:35,570 --> 00:19:40,940
that all the problems with the recipe

00:19:37,100 --> 00:19:42,950
was automatic commented on the PR but it

00:19:40,940 --> 00:19:44,240
was missing a summary it was missing a

00:19:42,950 --> 00:19:48,350
build number it was

00:19:44,240 --> 00:19:49,730
finish add some context mystery

00:19:48,350 --> 00:19:51,620
generates the boilerplate

00:19:49,730 --> 00:19:53,960
using ginger templates so it's pretty

00:19:51,620 --> 00:19:58,250
easy to hack into and change the border

00:19:53,960 --> 00:20:01,610
plate if you have to this is one example

00:19:58,250 --> 00:20:04,010
of how we use those templates to update

00:20:01,610 --> 00:20:07,040
the feed stock which is basically the

00:20:04,010 --> 00:20:10,490
whole CI configuration in this case we

00:20:07,040 --> 00:20:12,950
changed the docker image as you can see

00:20:10,490 --> 00:20:14,840
over there and we remove the pin that we

00:20:12,950 --> 00:20:16,520
had took on the build this is all

00:20:14,840 --> 00:20:18,500
automatic if you're in the maintainer of

00:20:16,520 --> 00:20:20,950
a feed stock all you need to do is to

00:20:18,500 --> 00:20:25,880
click merge when you see a PR like that

00:20:20,950 --> 00:20:28,100
and this is another PR that shows how we

00:20:25,880 --> 00:20:31,760
update the pinning in this case we

00:20:28,100 --> 00:20:35,740
change the painting of hdf5 in libel a

00:20:31,760 --> 00:20:38,630
netcdf like we updated from 4.3 to 4.4

00:20:35,740 --> 00:20:40,100
again this is all automatic if you're

00:20:38,630 --> 00:20:43,970
the maintainer of this feed stock all

00:20:40,100 --> 00:20:46,550
you have to do is hit merge the pinning

00:20:43,970 --> 00:20:49,400
basically is a dictionary that we update

00:20:46,550 --> 00:20:51,530
every now and then by we I'm saying the

00:20:49,400 --> 00:20:54,050
counter forged core members and we have

00:20:51,530 --> 00:20:57,980
open meetings to discuss what to do and

00:20:54,050 --> 00:21:00,380
how to do it so discount Forge core

00:20:57,980 --> 00:21:03,200
members who we are I mean you're

00:21:00,380 --> 00:21:06,950
basically a list of volunteers no one is

00:21:03,200 --> 00:21:08,570
paid to be there and it's actually the

00:21:06,950 --> 00:21:10,280
graph is cutted down here but we have

00:21:08,570 --> 00:21:15,830
way more members than those that are

00:21:10,280 --> 00:21:19,130
shown here and but why we're doing this

00:21:15,830 --> 00:21:22,400
we're not why can't we just you know

00:21:19,130 --> 00:21:25,700
upload just we upload binaries upload

00:21:22,400 --> 00:21:27,290
wheels to pi PI basically because what's

00:21:25,700 --> 00:21:29,720
something that already said pi PI is

00:21:27,290 --> 00:21:31,250
first come first served as a publishing

00:21:29,720 --> 00:21:32,360
platform so we can't change anything

00:21:31,250 --> 00:21:34,700
that's already there

00:21:32,360 --> 00:21:36,170
encounter for you can you go into the

00:21:34,700 --> 00:21:39,260
recipe you see how that's built in

00:21:36,170 --> 00:21:39,500
itself PR to change it and anyone can do

00:21:39,260 --> 00:21:42,050
that

00:21:39,500 --> 00:21:46,330
you don't need to have the rights to

00:21:42,050 --> 00:21:48,620
that package namespace on by own pi PI

00:21:46,330 --> 00:21:49,820
another problem with building wheels

00:21:48,620 --> 00:21:51,890
Rebecca is that everything is

00:21:49,820 --> 00:21:53,480
decentralized encounter for everything

00:21:51,890 --> 00:21:55,669
is centralized in one bit hub

00:21:53,480 --> 00:21:56,940
organization so if you hang around long

00:21:55,669 --> 00:21:58,440
enough you

00:21:56,940 --> 00:22:01,140
learn a lot like I learned a lot about

00:21:58,440 --> 00:22:05,550
packaging just by you know being part of

00:22:01,140 --> 00:22:07,170
that community but what would be the

00:22:05,550 --> 00:22:09,450
dream in my opinion the dream would be

00:22:07,170 --> 00:22:13,980
to use color forge to upload videos to

00:22:09,450 --> 00:22:18,810
pi PI so that's a probably a long-term

00:22:13,980 --> 00:22:21,540
goal if you want to know more the two

00:22:18,810 --> 00:22:23,850
best pieces of documentation we're not

00:22:21,540 --> 00:22:27,360
reaching by can't afford members is the

00:22:23,850 --> 00:22:30,870
West McKinney blog post on counter forge

00:22:27,360 --> 00:22:34,160
the sentence moment there is a blog that

00:22:30,870 --> 00:22:37,500
we publish on the continuo

00:22:34,160 --> 00:22:38,010
there is a really nice blog post by jake

00:22:37,500 --> 00:22:40,140
vanderplatt

00:22:38,010 --> 00:22:42,300
on condom myths and misconceptions where

00:22:40,140 --> 00:22:45,600
he explains way better than I did here

00:22:42,300 --> 00:22:50,190
some of these topics and talk by Tom to

00:22:45,600 --> 00:22:53,010
me episode that's also pretty good I

00:22:50,190 --> 00:22:54,750
would like to take questions now even

00:22:53,010 --> 00:22:57,720
though I have a few more slides in case

00:22:54,750 --> 00:23:07,800
the question hits exactly where I'm I

00:22:57,720 --> 00:23:11,790
think you guys have an ask here are mics

00:23:07,800 --> 00:23:16,170
in the there there are mics in the in

00:23:11,790 --> 00:23:17,880
the aisles I think so if you have a

00:23:16,170 --> 00:23:21,390
question come up walk up to a mic and

00:23:17,880 --> 00:23:25,110
state your question can you walk up to a

00:23:21,390 --> 00:23:27,030
mic yeah oh you are okay sorry

00:23:25,110 --> 00:23:29,540
so why is it so hard to build wheels

00:23:27,030 --> 00:23:33,390
with condom I'm tired of building wheels

00:23:29,540 --> 00:23:36,120
well here's the thing if you are an

00:23:33,390 --> 00:23:38,610
expert packager is not that hard but

00:23:36,120 --> 00:23:41,250
it's hard to do that as a community if

00:23:38,610 --> 00:23:44,520
you build wheels and you decided for

00:23:41,250 --> 00:23:47,670
example a netcdf for python which is a

00:23:44,520 --> 00:23:51,090
wrapper to the netcdf library and you

00:23:47,670 --> 00:23:55,440
decide to use the net CDF library 4.3

00:23:51,090 --> 00:23:57,540
but I need 4.4 it's hard how can I

00:23:55,440 --> 00:24:00,300
access you and ask you to rebuild that

00:23:57,540 --> 00:24:02,130
will and and recompile it and then I

00:24:00,300 --> 00:24:04,500
needed to have the open that flag

00:24:02,130 --> 00:24:06,690
because I need to access data online and

00:24:04,500 --> 00:24:09,060
then things get really hard I mean the

00:24:06,690 --> 00:24:10,890
communication gets really hard because

00:24:09,060 --> 00:24:13,320
it's going to be only developed

00:24:10,890 --> 00:24:14,040
creating the binary and putting on that

00:24:13,320 --> 00:24:15,990
platform

00:24:14,040 --> 00:24:18,660
the difference in can't afford is that

00:24:15,990 --> 00:24:20,940
it's not the developer it's the users

00:24:18,660 --> 00:24:24,540
like we have about five maintained errs

00:24:20,940 --> 00:24:26,820
for the live netcdf and any user can

00:24:24,540 --> 00:24:29,010
just go there on the feed stock open an

00:24:26,820 --> 00:24:31,470
issue and request a change or just send

00:24:29,010 --> 00:24:34,260
a PR to fix any problem so it's not that

00:24:31,470 --> 00:24:36,870
it's hard to build with but it's easier

00:24:34,260 --> 00:24:39,480
to maintain binaries in the counter

00:24:36,870 --> 00:24:41,790
forward model my opinion maybe you

00:24:39,480 --> 00:24:43,830
should phrase that like that so you're

00:24:41,790 --> 00:24:47,730
saying it's a pipe eyes problem that it

00:24:43,830 --> 00:24:50,610
doesn't allow for several wheels version

00:24:47,730 --> 00:24:51,860
and correct correctly thank you thank

00:24:50,610 --> 00:24:54,390
you

00:24:51,860 --> 00:24:55,650
so I've installed packages from

00:24:54,390 --> 00:24:57,450
different channels and they'll sometimes

00:24:55,650 --> 00:24:58,800
conflict or have different dependencies

00:24:57,450 --> 00:25:00,120
that will conflict and break is there

00:24:58,800 --> 00:25:02,520
some sort of guarantee that if you

00:25:00,120 --> 00:25:03,960
install from Conda Forge that all of the

00:25:02,520 --> 00:25:09,630
packages will play nicely together

00:25:03,960 --> 00:25:12,630
yes okay how do you do that how do you

00:25:09,630 --> 00:25:16,230
do that well to be honest I mean I can't

00:25:12,630 --> 00:25:17,970
really say yes I kind of it may be

00:25:16,230 --> 00:25:19,890
broken every now and then but then

00:25:17,970 --> 00:25:21,150
please if it's broken report the issue

00:25:19,890 --> 00:25:23,190
and we're going to try to fix it

00:25:21,150 --> 00:25:26,490
immediately and how we do that with that

00:25:23,190 --> 00:25:29,430
pinning but it's part of it and our

00:25:26,490 --> 00:25:32,790
build infrastructure is uniform so we

00:25:29,430 --> 00:25:35,100
always use at failure trewsy i-n a same

00:25:32,790 --> 00:25:36,660
docker image and everything is host all

00:25:35,100 --> 00:25:38,190
the configuration a docker file

00:25:36,660 --> 00:25:40,440
everything is hosted on github and it's

00:25:38,190 --> 00:25:42,660
open and it's trackable so even though

00:25:40,440 --> 00:25:45,060
we do face problems when we do break

00:25:42,660 --> 00:25:50,250
things it's very easy to trace back to

00:25:45,060 --> 00:25:52,890
them and fix them you mentioned several

00:25:50,250 --> 00:25:55,470
times the issue with choosing

00:25:52,890 --> 00:25:59,330
compilation flag how do you choose

00:25:55,470 --> 00:26:02,010
compilation Flags it's kind of a

00:25:59,330 --> 00:26:04,110
dictator thing like a family maintainer

00:26:02,010 --> 00:26:06,540
I want this I just put it in there and

00:26:04,110 --> 00:26:09,030
then the community starts shouting at me

00:26:06,540 --> 00:26:11,850
hey we move that flag it's bugging me

00:26:09,030 --> 00:26:16,980
it's breaking my workflow and we start a

00:26:11,850 --> 00:26:19,710
discussion it's a community effort we

00:26:16,980 --> 00:26:21,750
need some discussion hi are there any

00:26:19,710 --> 00:26:24,000
plans to go any lower level so for

00:26:21,750 --> 00:26:26,100
example like you're using an older Lib C

00:26:24,000 --> 00:26:28,470
version or you have a VC runtime that's

00:26:26,100 --> 00:26:31,590
no too old you say you have like sort of

00:26:28,470 --> 00:26:34,230
three environments but there any plans

00:26:31,590 --> 00:26:36,330
to basically add dependency tags in your

00:26:34,230 --> 00:26:38,340
in your sort of compiled packages for

00:26:36,330 --> 00:26:40,380
like oh you know you have to use you

00:26:38,340 --> 00:26:43,770
know Lipsy you know whatever to twelve

00:26:40,380 --> 00:26:46,170
not to 17 that's a very good question of

00:26:43,770 --> 00:26:49,770
afraid that show up I mean we we are

00:26:46,170 --> 00:26:51,660
limited to a certain set of versions

00:26:49,770 --> 00:26:53,430
that we can support right now we're

00:26:51,660 --> 00:26:57,000
trying to use a really old Santa's

00:26:53,430 --> 00:27:00,120
docker image to be backward forward

00:26:57,000 --> 00:27:02,850
compatible but everybody needs new c++

00:27:00,120 --> 00:27:04,230
features so we need a newer GCC it's

00:27:02,850 --> 00:27:07,980
basically the same problem with the

00:27:04,230 --> 00:27:10,020
pinning like I said before we can create

00:27:07,980 --> 00:27:12,720
different channels in different docker

00:27:10,020 --> 00:27:15,360
images and have different versions but

00:27:12,720 --> 00:27:17,700
that's all very complex right now maybe

00:27:15,360 --> 00:27:19,380
in the future we can do that what we can

00:27:17,700 --> 00:27:22,680
do is with torture discussion opening

00:27:19,380 --> 00:27:25,740
issue hey I really need modern C++ so I

00:27:22,680 --> 00:27:26,940
really need a modern GCC and we started

00:27:25,740 --> 00:27:29,520
discussing from there all the

00:27:26,940 --> 00:27:31,920
discussions on a further open our

00:27:29,520 --> 00:27:33,660
meetings are open so if you want

00:27:31,920 --> 00:27:35,730
something that's not there just attend a

00:27:33,660 --> 00:27:46,580
meeting and request it and we're going

00:27:35,730 --> 00:27:50,700
to start working for is it okay is it

00:27:46,580 --> 00:27:52,950
possible to use condo forge that the

00:27:50,700 --> 00:27:55,800
environment the tools and the the

00:27:52,950 --> 00:27:57,690
methodology using to like install that

00:27:55,800 --> 00:28:01,170
locally and use it if we're in a

00:27:57,690 --> 00:28:03,060
situation where we can't be doing it

00:28:01,170 --> 00:28:04,770
from a web based thing where we need to

00:28:03,060 --> 00:28:08,040
be building our own on our own hardware

00:28:04,770 --> 00:28:09,570
but use the use the infrastructure I'm

00:28:08,040 --> 00:28:11,250
not sure if I got your cuts correctly

00:28:09,570 --> 00:28:12,810
here's what I understood if you want to

00:28:11,250 --> 00:28:16,440
use quanta forge but you don't want to

00:28:12,810 --> 00:28:22,380
store the binaries from an account at

00:28:16,440 --> 00:28:24,150
work right well I'm interested in in how

00:28:22,380 --> 00:28:26,130
you're doing that but we would basically

00:28:24,150 --> 00:28:28,200
need to do it ourselves we need to do a

00:28:26,130 --> 00:28:30,540
build that's perfect their own

00:28:28,200 --> 00:28:32,280
repositories that's perfect we have one

00:28:30,540 --> 00:28:33,929
repository that aggregates all the

00:28:32,280 --> 00:28:36,429
recipes that's called the feedstocks

00:28:33,929 --> 00:28:38,769
with an ass repository

00:28:36,429 --> 00:28:41,110
actually in government people do that

00:28:38,769 --> 00:28:42,970
they can't use the binaries but you can

00:28:41,110 --> 00:28:44,740
use our recipes you can use our

00:28:42,970 --> 00:28:47,710
infrastructure to just recompile

00:28:44,740 --> 00:28:50,799
everything and and have your own local

00:28:47,710 --> 00:28:52,149
channel and we actually have some people

00:28:50,799 --> 00:28:54,669
doing that

00:28:52,149 --> 00:29:03,490
edu came at offs they do that Noah some

00:28:54,669 --> 00:29:06,519
people do that so really quick one last

00:29:03,490 --> 00:29:08,950
question on compiled flags and actually

00:29:06,519 --> 00:29:12,279
specifically wills and the problem wills

00:29:08,950 --> 00:29:14,409
has with Linux distributions take

00:29:12,279 --> 00:29:16,869
something like curl lip curl one of the

00:29:14,409 --> 00:29:21,519
most common libraries probably used out

00:29:16,869 --> 00:29:24,190
there under Debian has some flags that

00:29:21,519 --> 00:29:25,869
are required under Red Hat has other

00:29:24,190 --> 00:29:29,409
flags that are required do you support

00:29:25,869 --> 00:29:32,320
that I mean are we back to fighting over

00:29:29,409 --> 00:29:37,210
which distribution is best so I'm not

00:29:32,320 --> 00:29:40,299
really sure I got your question so at

00:29:37,210 --> 00:29:42,730
the compile at the flag level do you

00:29:40,299 --> 00:29:45,700
support different distributions of Linux

00:29:42,730 --> 00:29:48,669
or is it less because will you have the

00:29:45,700 --> 00:29:50,110
many Linux and everything fits in there

00:29:48,669 --> 00:29:52,119
and if you have different flags on

00:29:50,110 --> 00:29:55,899
different platforms then you don't have

00:29:52,119 --> 00:29:58,929
a wheel well we are somehow also limited

00:29:55,899 --> 00:30:02,169
like that we our doctor images our many

00:29:58,929 --> 00:30:04,570
Linux the only difference from the many

00:30:02,169 --> 00:30:06,399
Linux is that if you did something

00:30:04,570 --> 00:30:08,830
different you can open a discussion and

00:30:06,399 --> 00:30:11,889
we can see what we can do with many

00:30:08,830 --> 00:30:14,350
Linux unless you're part of the people

00:30:11,889 --> 00:30:16,360
organizing that in I mean it's open as

00:30:14,350 --> 00:30:18,490
well you could open up app and request

00:30:16,360 --> 00:30:21,159
to change it and request something

00:30:18,490 --> 00:30:23,559
different but it's more bureaucratic and

00:30:21,159 --> 00:30:26,850
sole encounter Forge hopefully it's less

00:30:23,559 --> 00:30:26,850
bureaucratic and faster

00:30:28,590 --> 00:30:35,190

YouTube URL: https://www.youtube.com/watch?v=qJFkIuzD6tI


