Title: Amjith Ramanujam   Awesome Command Line Tools   PyCon 2017
Publication date: 2017-05-20
Playlist: PyCon 2017
Description: 
	"Speaker: Amjith Ramanujam

Designing a good command line tool is challenging. Command line tools look archaic compared to modern graphical interfaces, discoverability is a big issue for command line tools, proactive help is hard to implement. This talk will cover a set of specific techniques to help alleviate those challenges.

How did [pgcli](http://pgcli.com) and [mycli](http://mycli.net) overcome these problems? We will cover specific examples where command line apps shine. The examples will be drawn from pgcli, mycli and [bpython](http://bpython-interpreter.org/). This talk will suggest libraries and show how they can help you implement a wonderful command line interface. 

The libraries covered in this talk include [python-prompt-toolkit](https://github.com/jonathanslenders/python-prompt-toolkit),  [pygments](http://pygments.org/), [click](http://click.pocoo.org/), [fuzzyfind](https://github.com/amjith/fuzzyfinder).

The goal of the talk is to distil the ideas that exist in successful command line applications as guidelines for building powerful command line applications.


Slides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides"
Captions: 
	00:00:00,000 --> 00:00:25,859
and hello and welcome to another talk

00:00:23,939 --> 00:00:27,449
here at PyCon my name is I'm Jeff

00:00:25,859 --> 00:00:29,760
Ramanujan I'll be speaking about

00:00:27,449 --> 00:00:31,439
command-line tools if you have any

00:00:29,760 --> 00:00:32,759
questions or feedback about the stock

00:00:31,439 --> 00:00:35,489
you're welcome to reach out to me on

00:00:32,759 --> 00:00:39,540
twitter my twitter handle is at i'm just

00:00:35,489 --> 00:00:40,920
are for my day job I work at Netflix I'm

00:00:39,540 --> 00:00:42,989
part of the traffic engineering team

00:00:40,920 --> 00:00:46,469
where we get to move enormous amounts of

00:00:42,989 --> 00:00:48,960
traffic between AWS regions at peak

00:00:46,469 --> 00:00:50,940
traffic we sometimes handle over

00:00:48,960 --> 00:00:54,930
one-third of entire Internet's traffic

00:00:50,940 --> 00:00:56,340
it's just a lot of fun but I'm not here

00:00:54,930 --> 00:00:57,989
to talk about my day job I'm actually

00:00:56,340 --> 00:01:01,109
here to talk about a couple of my side

00:00:57,989 --> 00:01:04,320
projects one called PG CLI and the other

00:01:01,109 --> 00:01:07,439
one called my CLI they're both command

00:01:04,320 --> 00:01:09,960
line clients for data bases Postgres and

00:01:07,439 --> 00:01:11,700
and my sequel respectively and this talk

00:01:09,960 --> 00:01:13,830
is actually about some of the design

00:01:11,700 --> 00:01:16,380
decisions that we as the core team of BG

00:01:13,830 --> 00:01:17,610
CLI and my CL I took and in order to

00:01:16,380 --> 00:01:20,909
overcome some of the inherent

00:01:17,610 --> 00:01:22,799
limitations of command line interfaces

00:01:20,909 --> 00:01:25,080
we took a lot of inspiration from

00:01:22,799 --> 00:01:26,640
existing good command line applications

00:01:25,080 --> 00:01:28,200
that were well designed and I'm going to

00:01:26,640 --> 00:01:30,869
go over some of the some of the other

00:01:28,200 --> 00:01:35,189
tools as well that will be covered and

00:01:30,869 --> 00:01:37,700
where we took pens for Asian from the

00:01:35,189 --> 00:01:39,990
story actually begins about 20 years ago

00:01:37,700 --> 00:01:42,540
the protagonist was typing away

00:01:39,990 --> 00:01:45,960
furiously on the on a computer terminal

00:01:42,540 --> 00:01:49,170
on the on a cutting edge operating

00:01:45,960 --> 00:01:50,520
system called ms-dos at the time he was

00:01:49,170 --> 00:01:52,079
typing one character at a time because

00:01:50,520 --> 00:01:56,070
he did not know how to touch type at the

00:01:52,079 --> 00:01:57,659
time and he finished the command presses

00:01:56,070 --> 00:01:59,909
the enter key and looks up at the

00:01:57,659 --> 00:02:02,520
monitor eagerly waiting for the results

00:01:59,909 --> 00:02:06,030
only to realize that he made a typo and

00:02:02,520 --> 00:02:08,879
it resulted in an error I'm defeated by

00:02:06,030 --> 00:02:10,470
the setback he proceeds to begin typing

00:02:08,879 --> 00:02:12,660
that command one more time hoping that

00:02:10,470 --> 00:02:13,530
there is not going to be a typo this

00:02:12,660 --> 00:02:16,950
happens for a couple

00:02:13,530 --> 00:02:18,690
a couple of weeks until his teacher

00:02:16,950 --> 00:02:21,330
introduces him to this concept of

00:02:18,690 --> 00:02:24,480
history navigation the way you do this

00:02:21,330 --> 00:02:26,910
is you press the uparrow and suddenly

00:02:24,480 --> 00:02:28,560
the previous command that you typed

00:02:26,910 --> 00:02:30,390
comes back up and you can edit it

00:02:28,560 --> 00:02:32,190
accordingly and suddenly you're able to

00:02:30,390 --> 00:02:33,569
fix the fix the mistakes without having

00:02:32,190 --> 00:02:37,230
to type the entire thing one more time

00:02:33,569 --> 00:02:41,010
it was a he was euphoric

00:02:37,230 --> 00:02:44,150
the kid was just G billion he had lots

00:02:41,010 --> 00:02:48,600
of hot chocolate that day to celebrate

00:02:44,150 --> 00:02:51,060
the protagonist may have been me later

00:02:48,600 --> 00:02:53,940
on when I was in grad school I was

00:02:51,060 --> 00:02:55,890
introduced to the Linux and I was

00:02:53,940 --> 00:02:57,600
pleasantly surprised that bash kept the

00:02:55,890 --> 00:02:59,340
convention of using the apparel and

00:02:57,600 --> 00:03:01,590
down-arrow in order to navigate history

00:02:59,340 --> 00:03:03,090
and that was that was great and by now I

00:03:01,590 --> 00:03:05,130
have actually learned how to touch type

00:03:03,090 --> 00:03:07,200
and I was typing at a furious blazing

00:03:05,130 --> 00:03:12,420
speed of 50 words per minute that's

00:03:07,200 --> 00:03:14,519
right a pair programming with a friend

00:03:12,420 --> 00:03:17,549
of mine and I noticed that whenever he

00:03:14,519 --> 00:03:19,709
typed any file names or path names that

00:03:17,549 --> 00:03:21,720
happened to appear at a tremendous speed

00:03:19,709 --> 00:03:24,060
it was it was beyond humanly possible

00:03:21,720 --> 00:03:26,579
and so I was surprised I'm like how did

00:03:24,060 --> 00:03:28,200
you do that and then he introduces me to

00:03:26,579 --> 00:03:30,030
this concept of tab-completion because

00:03:28,200 --> 00:03:32,100
now you can hit a tab and the shell

00:03:30,030 --> 00:03:33,209
automatically knows what you have you

00:03:32,100 --> 00:03:34,650
know whatever prefix you have typed

00:03:33,209 --> 00:03:36,480
it'll try to match a file name to that

00:03:34,650 --> 00:03:38,510
and it'll automatically complete

00:03:36,480 --> 00:03:41,610
complete the rest of the name for you oh

00:03:38,510 --> 00:03:45,959
that was another joyous day much

00:03:41,610 --> 00:03:48,720
chocolate milk was had and the moral of

00:03:45,959 --> 00:03:50,280
the story here is is not that not that

00:03:48,720 --> 00:03:55,019
command-line tools have awesome features

00:03:50,280 --> 00:03:56,730
which they do the the fact is those

00:03:55,019 --> 00:03:58,440
awesome features are not easy to find

00:03:56,730 --> 00:03:59,910
it's actually pretty hard to stumble

00:03:58,440 --> 00:04:04,950
upon these features unless someone

00:03:59,910 --> 00:04:06,870
introduces them to you by by being a new

00:04:04,950 --> 00:04:08,579
user to a command-line interface it's

00:04:06,870 --> 00:04:10,650
not easy to find these features

00:04:08,579 --> 00:04:12,030
organically you are either reading a man

00:04:10,650 --> 00:04:13,940
page which is a different program from

00:04:12,030 --> 00:04:16,500
the program that you're trying to use or

00:04:13,940 --> 00:04:17,640
you have a good mentor or a friend who

00:04:16,500 --> 00:04:20,299
who tells you how to do these things

00:04:17,640 --> 00:04:22,740
let's contrast that to a GUI application

00:04:20,299 --> 00:04:25,110
whenever a new feature or a new version

00:04:22,740 --> 00:04:26,909
of your application is released if there

00:04:25,110 --> 00:04:27,930
is a new feature in that then there is

00:04:26,909 --> 00:04:29,880
an icon or

00:04:27,930 --> 00:04:33,300
kind of a toolbar or a menu item that is

00:04:29,880 --> 00:04:35,940
listed and being humans that we are

00:04:33,300 --> 00:04:38,460
whenever we see something new where we

00:04:35,940 --> 00:04:41,970
tend to kind of poke at it until we find

00:04:38,460 --> 00:04:44,430
out what it is so how can we how can we

00:04:41,970 --> 00:04:46,050
bring this idea of discoverability to

00:04:44,430 --> 00:04:47,910
command line applications the the two

00:04:46,050 --> 00:04:50,460
that the two features that I just showed

00:04:47,910 --> 00:04:52,560
you which is history navigation and tab

00:04:50,460 --> 00:04:54,360
completion I'm going to take that as

00:04:52,560 --> 00:04:55,830
examples and show you what we could do

00:04:54,360 --> 00:04:58,370
to make those two features more

00:04:55,830 --> 00:05:00,270
discoverable in command line apps and

00:04:58,370 --> 00:05:02,669
that brings us to the first application

00:05:00,270 --> 00:05:06,930
I'm going to show you how we solve this

00:05:02,669 --> 00:05:10,039
specific problem in pgc Li have you ever

00:05:06,930 --> 00:05:12,660
wondered why we call that tab completion

00:05:10,039 --> 00:05:16,349
why do we need the tab key in order to

00:05:12,660 --> 00:05:18,570
complete that for example I'm going to

00:05:16,349 --> 00:05:22,139
launch PG CLI I'm launching a particular

00:05:18,570 --> 00:05:24,840
database here and I'm going to type a

00:05:22,139 --> 00:05:26,970
select statement and try and see you

00:05:24,840 --> 00:05:29,220
know how we could complete that as soon

00:05:26,970 --> 00:05:30,660
as I start typing I am presented with

00:05:29,220 --> 00:05:34,139
all the completion options here I have

00:05:30,660 --> 00:05:36,270
not pressed the tab key and this is how

00:05:34,139 --> 00:05:39,210
I think we should be making this more

00:05:36,270 --> 00:05:42,240
discoverable where I could type select

00:05:39,210 --> 00:05:44,430
star and again it provides us with all

00:05:42,240 --> 00:05:51,389
possible completions and we can start

00:05:44,430 --> 00:05:54,000
typing those things we did not use any

00:05:51,389 --> 00:05:55,470
tab key in that in that scenario I'm

00:05:54,000 --> 00:05:57,419
going to switch over to a different

00:05:55,470 --> 00:05:58,919
program that we are going to look at

00:05:57,419 --> 00:06:02,210
which is called fish shell which is a

00:05:58,919 --> 00:06:04,440
modern shell I mean the word modern is

00:06:02,210 --> 00:06:06,930
it might not be appropriate because it's

00:06:04,440 --> 00:06:11,310
been 20 years since it came out but it's

00:06:06,930 --> 00:06:13,349
an alternative to bash and Z shell well

00:06:11,310 --> 00:06:15,090
this is the feature that I'm that goes

00:06:13,349 --> 00:06:17,340
even beyond the history navigation of up

00:06:15,090 --> 00:06:20,130
up and down arrows if you've used bash

00:06:17,340 --> 00:06:22,199
there is a special keyboard combination

00:06:20,130 --> 00:06:24,479
called ctrl R which allows you to search

00:06:22,199 --> 00:06:27,090
through the history so you press ctrl R

00:06:24,479 --> 00:06:28,470
you type up some of the partial string

00:06:27,090 --> 00:06:30,419
from the command that you type in the

00:06:28,470 --> 00:06:32,280
past and it'll try and bring up that

00:06:30,419 --> 00:06:34,710
that command from the history by

00:06:32,280 --> 00:06:36,630
searching through the history and this

00:06:34,710 --> 00:06:38,610
allows you to navigate history in a much

00:06:36,630 --> 00:06:40,289
more random manner rather than the

00:06:38,610 --> 00:06:41,639
linear manner in which you know you you

00:06:40,289 --> 00:06:43,740
are used to using the up

00:06:41,639 --> 00:06:46,800
down arrow again it took me a couple of

00:06:43,740 --> 00:06:48,919
years before I found control-r and once

00:06:46,800 --> 00:06:51,180
I found that there was I would always

00:06:48,919 --> 00:06:54,060
prefix our I would always start my

00:06:51,180 --> 00:06:56,430
commands by typing ctrl R and try to SSH

00:06:54,060 --> 00:06:58,229
into the into the machine that is

00:06:56,430 --> 00:07:03,659
attached like last week or yesterday or

00:06:58,229 --> 00:07:05,580
something now official kind of obviates

00:07:03,659 --> 00:07:07,979
the need to start every command with a

00:07:05,580 --> 00:07:10,889
control are the way the solves this is

00:07:07,979 --> 00:07:12,689
as soon as I start typing it will start

00:07:10,889 --> 00:07:14,400
to search through the history and it

00:07:12,689 --> 00:07:16,409
will start recommending things for me

00:07:14,400 --> 00:07:17,699
and it is automatically suggesting

00:07:16,409 --> 00:07:19,650
things for me and I could just press the

00:07:17,699 --> 00:07:22,319
right arrow and make that happen or

00:07:19,650 --> 00:07:24,180
press ENTER and and that command will be

00:07:22,319 --> 00:07:27,120
executed so I could do work on and I

00:07:24,180 --> 00:07:29,610
have been working on prompt or make a

00:07:27,120 --> 00:07:31,620
new virtual environment all those things

00:07:29,610 --> 00:07:33,629
as soon as I start typing it pulls up

00:07:31,620 --> 00:07:35,400
that command that was similar to the one

00:07:33,629 --> 00:07:37,860
that you are trying to type from history

00:07:35,400 --> 00:07:39,330
and it starts suggesting that this is a

00:07:37,860 --> 00:07:41,279
fantastic way in which discoverability

00:07:39,330 --> 00:07:44,069
was solved in fish shell for that

00:07:41,279 --> 00:07:47,159
particular feature that is we looked at

00:07:44,069 --> 00:07:49,500
some specific examples but in general

00:07:47,159 --> 00:07:52,740
the idea behind discoverability is that

00:07:49,500 --> 00:07:54,469
be a little bit more forthcoming do not

00:07:52,740 --> 00:07:56,849
hide your features behind a special key

00:07:54,469 --> 00:07:59,460
because those special combinations are

00:07:56,849 --> 00:08:01,560
going to make it undiscoverable so if

00:07:59,460 --> 00:08:03,389
you want your features or your make your

00:08:01,560 --> 00:08:04,740
program more discoverable just be a

00:08:03,389 --> 00:08:08,520
little bit more forthcoming with your

00:08:04,740 --> 00:08:12,089
features the next item that I would like

00:08:08,520 --> 00:08:15,000
to talk about is user focus and what I

00:08:12,089 --> 00:08:17,479
mean by user focus is that whenever you

00:08:15,000 --> 00:08:19,969
have whenever you are implementing a

00:08:17,479 --> 00:08:23,819
application or a program or a feature

00:08:19,969 --> 00:08:25,800
the users always come first think about

00:08:23,819 --> 00:08:28,439
how you could make your program the most

00:08:25,800 --> 00:08:30,509
intuitive for the user absolute

00:08:28,439 --> 00:08:33,510
absolutely powerful for the user don't

00:08:30,509 --> 00:08:35,430
think about how much harder is going to

00:08:33,510 --> 00:08:38,449
be to make the implementation of it the

00:08:35,430 --> 00:08:40,740
implementation should always come next

00:08:38,449 --> 00:08:42,060
in order to demonstrate this I'm going

00:08:40,740 --> 00:08:43,829
to start with my CLI one of the other

00:08:42,060 --> 00:08:45,660
programs that I showed but before

00:08:43,829 --> 00:08:48,750
showing my CLI I want to show you my

00:08:45,660 --> 00:08:51,660
sequel and my CLI is a is an alternative

00:08:48,750 --> 00:08:54,060
for my sequel so my sequel I'm launching

00:08:51,660 --> 00:08:55,590
a database launching the repple here

00:08:54,060 --> 00:08:58,560
with the database

00:08:55,590 --> 00:09:02,160
I start to type SEL and I hit a tab and

00:08:58,560 --> 00:09:04,170
nothing happens here I expected at least

00:09:02,160 --> 00:09:06,660
some kind of tab completion let's redo

00:09:04,170 --> 00:09:08,340
that again by doing all care all caps on

00:09:06,660 --> 00:09:09,900
everything uppercase and I hit a tab key

00:09:08,340 --> 00:09:12,120
and now it actually autocomplete for me

00:09:09,900 --> 00:09:13,560
there is a simple little tweak all we

00:09:12,120 --> 00:09:14,970
have to do is make that auto completion

00:09:13,560 --> 00:09:16,650
case-insensitive

00:09:14,970 --> 00:09:19,140
and it would be that much more easier

00:09:16,650 --> 00:09:20,970
for a user to use it and it is a simple

00:09:19,140 --> 00:09:23,970
thing that the the programmer could have

00:09:20,970 --> 00:09:26,670
done but it but they apparently didn't

00:09:23,970 --> 00:09:28,860
and after the select start from and I

00:09:26,670 --> 00:09:31,050
hit a tab key and it asks me if I would

00:09:28,860 --> 00:09:34,080
like to see all 811 possibilities that I

00:09:31,050 --> 00:09:36,360
that it's going to offer I certainly

00:09:34,080 --> 00:09:38,730
don't have 800 tables in my database I

00:09:36,360 --> 00:09:42,240
say yes and I'm presented with every

00:09:38,730 --> 00:09:45,780
single keyword that is available in my

00:09:42,240 --> 00:09:50,160
sequel let's contrast this with how my

00:09:45,780 --> 00:09:52,320
CLI handles a similar scenario once

00:09:50,160 --> 00:09:53,640
again as soon as I start typing it's

00:09:52,320 --> 00:09:54,870
going to start suggesting things and

00:09:53,640 --> 00:09:58,200
you'll notice that it is not

00:09:54,870 --> 00:10:02,010
case-sensitive so I could do select star

00:09:58,200 --> 00:10:04,290
from and I hit a an a and it

00:10:02,010 --> 00:10:05,880
automatically suggest only tables that

00:10:04,290 --> 00:10:07,500
come after the from keyword because it

00:10:05,880 --> 00:10:10,140
knows that these are the tables in that

00:10:07,500 --> 00:10:13,530
current database and it goes even

00:10:10,140 --> 00:10:15,360
further when you choose where it'll only

00:10:13,530 --> 00:10:17,970
give the columns inside of that table

00:10:15,360 --> 00:10:19,950
because it knows to scope inside of

00:10:17,970 --> 00:10:22,600
inside of the show only the columns

00:10:19,950 --> 00:10:27,110
inside of that table thank you

00:10:22,600 --> 00:10:30,330
[Applause]

00:10:27,110 --> 00:10:31,890
when I first got got started with my CLI

00:10:30,330 --> 00:10:33,930
I had actually taken the approach of

00:10:31,890 --> 00:10:36,540
doing what my sequel was doing which is

00:10:33,930 --> 00:10:38,400
show all the key words and let the user

00:10:36,540 --> 00:10:40,920
type them out and try to figure out you

00:10:38,400 --> 00:10:43,050
know from the from the menu but then

00:10:40,920 --> 00:10:45,060
later I figured that actually being

00:10:43,050 --> 00:10:46,920
context sensitive about the completions

00:10:45,060 --> 00:10:49,410
will make it that much more powerful for

00:10:46,920 --> 00:10:52,950
the user to use but at the time and

00:10:49,410 --> 00:10:55,260
still now there is no open source SQL

00:10:52,950 --> 00:10:57,570
completion engine it was ridiculously

00:10:55,260 --> 00:10:59,130
hard to implement it took me another two

00:10:57,570 --> 00:11:00,990
three weeks before I could actually call

00:10:59,130 --> 00:11:02,490
that then complete and it was in a

00:11:00,990 --> 00:11:05,310
broken state I mean it was it was not a

00:11:02,490 --> 00:11:06,840
very well polished one and thankfully

00:11:05,310 --> 00:11:08,790
there are now smarter core and

00:11:06,840 --> 00:11:12,380
developers for my CLI who have done a

00:11:08,790 --> 00:11:12,380
much better job of doing this completion

00:11:12,500 --> 00:11:17,970
so the point about the user focus is

00:11:15,240 --> 00:11:19,380
that make the users always come first

00:11:17,970 --> 00:11:22,050
whenever you are implementing a new

00:11:19,380 --> 00:11:24,420
feature or the program think about what

00:11:22,050 --> 00:11:26,430
the user wants think about how to make

00:11:24,420 --> 00:11:27,600
it most intuitive and absolutely

00:11:26,430 --> 00:11:29,820
powerful for the user

00:11:27,600 --> 00:11:32,700
do not worry about implementation

00:11:29,820 --> 00:11:37,560
implementation comes next you can make

00:11:32,700 --> 00:11:41,730
that happen I kind of saved the best for

00:11:37,560 --> 00:11:44,970
the last be Python is the favorite

00:11:41,730 --> 00:11:47,070
interactive shell that I absolutely love

00:11:44,970 --> 00:11:48,930
I've taken a lot of inspiration from

00:11:47,070 --> 00:11:54,200
this and stolen a bunch of ideas from

00:11:48,930 --> 00:11:56,880
here you'll see why in just a second

00:11:54,200 --> 00:11:59,040
once again I'm going to start out with

00:11:56,880 --> 00:12:02,280
Python to show you what could be

00:11:59,040 --> 00:12:05,220
improved I'm going to import a module a

00:12:02,280 --> 00:12:08,010
type I NPO and I hit tab and a tab key

00:12:05,220 --> 00:12:10,800
gets inserted I don't think there is any

00:12:08,010 --> 00:12:13,430
business and a tab key in a Python code

00:12:10,800 --> 00:12:13,430
at all ever

00:12:14,009 --> 00:12:17,160
thank you

00:12:19,990 --> 00:12:25,570
so I've imported requests and I wanted

00:12:23,589 --> 00:12:27,370
to request that and I hit a tab key

00:12:25,570 --> 00:12:29,500
again I'm trying to see what is

00:12:27,370 --> 00:12:31,269
available in requests now how can this

00:12:29,500 --> 00:12:36,670
be improved well let's look at what be

00:12:31,269 --> 00:12:39,160
python does here i do IM p and it not

00:12:36,670 --> 00:12:40,959
only gives me the the list of items that

00:12:39,160 --> 00:12:44,290
could be completed it also does fish

00:12:40,959 --> 00:12:45,639
fish style autosuggestion where i have

00:12:44,290 --> 00:12:46,930
typed this command before so i could

00:12:45,639 --> 00:12:51,550
just press the right arrow key and

00:12:46,930 --> 00:12:53,649
proceed and i do requests docked and it

00:12:51,550 --> 00:12:55,209
gives me all the available things that i

00:12:53,649 --> 00:12:58,449
could do it I could do a post command if

00:12:55,209 --> 00:13:00,970
I wanted to sort of get and if I open a

00:12:58,449 --> 00:13:02,649
bracket here it shows me the different

00:13:00,970 --> 00:13:04,389
arguments for that particular method and

00:13:02,649 --> 00:13:05,920
not only that it actually shows me the

00:13:04,389 --> 00:13:07,810
doc string for that method so I never

00:13:05,920 --> 00:13:09,610
ever have to leave the terminal in order

00:13:07,810 --> 00:13:12,420
to find out how to use this particular

00:13:09,610 --> 00:13:23,709
method I think this is a powerful

00:13:12,420 --> 00:13:27,220
powerful powerful tool and one of the

00:13:23,709 --> 00:13:29,470
common things that I get a push back on

00:13:27,220 --> 00:13:31,660
from users when I show B Python is that

00:13:29,470 --> 00:13:33,730
of course the pythons default thing

00:13:31,660 --> 00:13:35,709
could do most of what you have shown all

00:13:33,730 --> 00:13:37,180
I have to do is copy this particular

00:13:35,709 --> 00:13:39,959
snippet that I got from stack overflow

00:13:37,180 --> 00:13:42,639
put it inside my Python RC file and

00:13:39,959 --> 00:13:44,110
suddenly if I hit the tab key it will do

00:13:42,639 --> 00:13:46,240
some of the things that you actually

00:13:44,110 --> 00:13:49,380
showed and I don't have to install a new

00:13:46,240 --> 00:13:51,630
program my counterpoint to that is that

00:13:49,380 --> 00:13:56,829
configurability is the root of all evil

00:13:51,630 --> 00:13:59,350
I'm actually paraphrasing things from

00:13:56,829 --> 00:14:00,610
fish shells design documentation here

00:13:59,350 --> 00:14:02,500
which have taken a lot of inspiration

00:14:00,610 --> 00:14:05,769
from one of the things that is mentioned

00:14:02,500 --> 00:14:07,660
there is that whenever you'll have added

00:14:05,769 --> 00:14:10,420
a configuration option to your program

00:14:07,660 --> 00:14:12,519
what it means is that your program was

00:14:10,420 --> 00:14:17,170
too stupid to figure out what was best

00:14:12,519 --> 00:14:19,120
for the user by definition or by

00:14:17,170 --> 00:14:24,130
extension it's also calling the person

00:14:19,120 --> 00:14:26,709
who implemented the program stupid so if

00:14:24,130 --> 00:14:27,460
you I do completely understand the

00:14:26,709 --> 00:14:29,830
configuration

00:14:27,460 --> 00:14:31,899
configurations are essential for some

00:14:29,830 --> 00:14:33,730
situations because certain things are

00:14:31,899 --> 00:14:35,800
taste based they are subjective

00:14:33,730 --> 00:14:37,000
say for example color scheme picking a

00:14:35,800 --> 00:14:39,040
color scheme I mean you might think that

00:14:37,000 --> 00:14:40,810
solarized is the best default and I

00:14:39,040 --> 00:14:44,020
agree I mean it is a good sane default

00:14:40,810 --> 00:14:45,730
but some other person might want a

00:14:44,020 --> 00:14:48,130
lighter color scheme or a much darker

00:14:45,730 --> 00:14:50,920
color scheme in that case I think

00:14:48,130 --> 00:14:52,630
subjective options are okay so if you

00:14:50,920 --> 00:14:55,750
are going to add a configuration option

00:14:52,630 --> 00:14:57,250
make it a one where the program really

00:14:55,750 --> 00:15:02,290
can't figure out what the producers

00:14:57,250 --> 00:15:04,870
taste our tastes are alright we looked

00:15:02,290 --> 00:15:07,540
into three specific issues with command

00:15:04,870 --> 00:15:10,510
line applications discoverability user

00:15:07,540 --> 00:15:12,250
focus and configurability and we showed

00:15:10,510 --> 00:15:15,130
some concrete examples from some of the

00:15:12,250 --> 00:15:20,230
existing tools such as fish shell B

00:15:15,130 --> 00:15:21,880
Python PG CLI and my CLI at this

00:15:20,230 --> 00:15:24,160
juncture you might be thinking well I

00:15:21,880 --> 00:15:26,860
learned about these tools I'll start

00:15:24,160 --> 00:15:28,300
using them in my workflow but it looks

00:15:26,860 --> 00:15:30,839
like these are some advanced features

00:15:28,300 --> 00:15:33,040
these are going to be hard to implement

00:15:30,839 --> 00:15:35,700
when I'm writing my own interactive

00:15:33,040 --> 00:15:38,170
shell either for my internal use or I

00:15:35,700 --> 00:15:42,010
plan on releasing something to use the

00:15:38,170 --> 00:15:44,350
users these things are much harder to

00:15:42,010 --> 00:15:45,790
implement and these things are you know

00:15:44,350 --> 00:15:47,350
you might have competing priorities like

00:15:45,790 --> 00:15:49,420
deadlines or you might be thinking this

00:15:47,350 --> 00:15:50,890
is only for internal users so they're

00:15:49,420 --> 00:15:55,420
going to be forced to use my tool anyway

00:15:50,890 --> 00:15:57,400
so I don't really have to care I've done

00:15:55,420 --> 00:16:00,220
that before so it's not it's not that

00:15:57,400 --> 00:16:02,230
uncommon and I completely and I

00:16:00,220 --> 00:16:05,130
completely want to empathize with that

00:16:02,230 --> 00:16:07,060
sentiment but what if I told you that

00:16:05,130 --> 00:16:10,180
implementing all these features is

00:16:07,060 --> 00:16:13,630
actually not that hard what if I told

00:16:10,180 --> 00:16:17,940
you that they can all be done in under

00:16:13,630 --> 00:16:22,959
10 minutes with merely 10 maybe 11

00:16:17,940 --> 00:16:24,700
statements in Python in fact this is a

00:16:22,959 --> 00:16:26,649
checklist that I that I typically use

00:16:24,700 --> 00:16:28,779
whenever I am implementing a interactive

00:16:26,649 --> 00:16:31,300
shell which is you must always have a

00:16:28,779 --> 00:16:32,920
persistent history which is just because

00:16:31,300 --> 00:16:34,270
you quit a program and you come back to

00:16:32,920 --> 00:16:36,520
it it doesn't mean you have to start

00:16:34,270 --> 00:16:38,770
from a clean slate because obviously you

00:16:36,520 --> 00:16:40,800
have type you know some important

00:16:38,770 --> 00:16:42,899
commands in the past and you

00:16:40,800 --> 00:16:44,610
like to be able to recover those so

00:16:42,899 --> 00:16:48,089
having a persistent history is a great

00:16:44,610 --> 00:16:50,459
thing the ability to search the history

00:16:48,089 --> 00:16:52,080
either using a command our special key

00:16:50,459 --> 00:16:53,880
which is common these days and people

00:16:52,080 --> 00:16:56,880
power users of shell already know about

00:16:53,880 --> 00:16:59,100
it or using the fish style suggestion

00:16:56,880 --> 00:17:01,440
where it goes above and beyond and doing

00:16:59,100 --> 00:17:04,319
that an eMac ski bindings this is

00:17:01,440 --> 00:17:05,910
another hidden feature maybe not so

00:17:04,319 --> 00:17:09,480
hidden anymore because a lot of people

00:17:05,910 --> 00:17:10,709
are used to using bash pressing ctrl a

00:17:09,480 --> 00:17:12,360
will take you to the beginning of a line

00:17:10,709 --> 00:17:14,640
pressing ctrl e will take you to the end

00:17:12,360 --> 00:17:16,260
of a line and ctrl P and ctrl n or

00:17:14,640 --> 00:17:19,800
equivalence of up arrow and down arrow

00:17:16,260 --> 00:17:21,569
and these are these are default key

00:17:19,800 --> 00:17:25,050
bindings that comes with any any shell

00:17:21,569 --> 00:17:28,350
bash z show and even fish shell

00:17:25,050 --> 00:17:31,020
everything and I think it's essential

00:17:28,350 --> 00:17:32,790
that anytime a user is interacting with

00:17:31,020 --> 00:17:34,500
an interactive shell they have come to

00:17:32,790 --> 00:17:37,380
come to expect these things to be

00:17:34,500 --> 00:17:39,570
available so that's good to have paged

00:17:37,380 --> 00:17:41,820
output is when your output that you are

00:17:39,570 --> 00:17:43,740
trying to print is much larger than it's

00:17:41,820 --> 00:17:45,480
going to fit on the page then it is good

00:17:43,740 --> 00:17:47,370
to send it through a pager so the user

00:17:45,480 --> 00:17:50,160
doesn't have to scroll up and down it's

00:17:47,370 --> 00:17:52,679
just a convenience and the last three

00:17:50,160 --> 00:17:54,960
are the items that I kind of showed just

00:17:52,679 --> 00:17:57,120
a minute ago which is auto completion

00:17:54,960 --> 00:17:58,860
being able to automatically trigger them

00:17:57,120 --> 00:18:02,160
without having to type the tab key it's

00:17:58,860 --> 00:18:04,080
a it's a very nice to have having

00:18:02,160 --> 00:18:05,520
minimal configuration in fact if you

00:18:04,080 --> 00:18:08,460
don't have any configuration at all much

00:18:05,520 --> 00:18:10,410
better and adding syntax coloring so I

00:18:08,460 --> 00:18:12,840
did not show or I don't know if you

00:18:10,410 --> 00:18:16,620
notice this or not but all the shells

00:18:12,840 --> 00:18:18,360
that I showed today my CLI PG CLI facial

00:18:16,620 --> 00:18:20,010
and B Python all of them have syntax

00:18:18,360 --> 00:18:21,059
highlighting automatically so as soon as

00:18:20,010 --> 00:18:23,309
you start typing them it will

00:18:21,059 --> 00:18:27,540
appropriately color those commands for

00:18:23,309 --> 00:18:29,490
you we're going to implement most of

00:18:27,540 --> 00:18:31,470
those things in the checklist using just

00:18:29,490 --> 00:18:34,940
a single tool or a single library called

00:18:31,470 --> 00:18:38,820
prompt toolkit I'm going to show you how

00:18:34,940 --> 00:18:41,520
and we're going to actually implement

00:18:38,820 --> 00:18:44,610
one called a repo a rebel stands for

00:18:41,520 --> 00:18:46,640
read eval print and loop which means

00:18:44,610 --> 00:18:49,320
you're going to read a user input

00:18:46,640 --> 00:18:50,940
evaluate what the user what needs to be

00:18:49,320 --> 00:18:54,050
done with the user input print the

00:18:50,940 --> 00:18:55,790
result of that of that evaluation

00:18:54,050 --> 00:18:59,330
look back and start taking user input

00:18:55,790 --> 00:19:02,150
from the user again I believe I still

00:18:59,330 --> 00:19:03,410
have 10 more minutes left how many of

00:19:02,150 --> 00:19:05,300
you would like to see me do this live

00:19:03,410 --> 00:19:12,890
and how many of you want to just alright

00:19:05,300 --> 00:19:14,690
do it live okay so we're going to create

00:19:12,890 --> 00:19:16,520
something from blank slate there is

00:19:14,690 --> 00:19:18,800
nothing in this file I'm going to start

00:19:16,520 --> 00:19:21,260
from scratch first thing we want to do

00:19:18,800 --> 00:19:22,880
want to be able to do is read an input

00:19:21,260 --> 00:19:24,590
from the user and typically if it is

00:19:22,880 --> 00:19:26,420
just a pure Python program without any

00:19:24,590 --> 00:19:28,190
library is imported then you know

00:19:26,420 --> 00:19:30,440
standard library comes with the input

00:19:28,190 --> 00:19:32,990
command or the input function or raw

00:19:30,440 --> 00:19:35,330
input function but we're good we are not

00:19:32,990 --> 00:19:36,860
just building any any repple we're

00:19:35,330 --> 00:19:39,290
building an awesome rebel so we're going

00:19:36,860 --> 00:19:41,510
to take the prompt function that's

00:19:39,290 --> 00:19:47,840
provided by prompt toolkit so I'm going

00:19:41,510 --> 00:19:52,580
to I'm going to pull in the prompt

00:19:47,840 --> 00:19:55,610
function and it has the same signature

00:19:52,580 --> 00:19:59,300
as the input or the raw input where you

00:19:55,610 --> 00:20:01,610
give it some kind of a prompt and the

00:19:59,300 --> 00:20:05,030
whatever the user has typed will go into

00:20:01,610 --> 00:20:05,600
the InP variable and to keep things

00:20:05,030 --> 00:20:08,990
simple

00:20:05,600 --> 00:20:10,610
our eval is going to be a no op and what

00:20:08,990 --> 00:20:12,140
I mean by that is whatever the user has

00:20:10,610 --> 00:20:15,080
typed we're just going to print it back

00:20:12,140 --> 00:20:17,810
to the user so it's just an echo rebel

00:20:15,080 --> 00:20:19,580
if you will and we obviously want to

00:20:17,810 --> 00:20:21,110
loop back and make this into an infinite

00:20:19,580 --> 00:20:27,530
loop so we'll just put a while loop

00:20:21,110 --> 00:20:29,930
there okay how does that look like so

00:20:27,530 --> 00:20:32,600
now we have a rebel that can take input

00:20:29,930 --> 00:20:33,920
from the user and it can do it can do

00:20:32,600 --> 00:20:36,560
just echo it back to the user

00:20:33,920 --> 00:20:38,510
it does not have history it does not

00:20:36,560 --> 00:20:40,640
have any kind of auto completion no

00:20:38,510 --> 00:20:42,980
syntax highlighting nothing but we can

00:20:40,640 --> 00:20:46,430
fix that obviously if I press control-d

00:20:42,980 --> 00:20:48,470
it's exiting with a trace back but again

00:20:46,430 --> 00:20:50,240
we can catch that exception and do

00:20:48,470 --> 00:20:52,880
something useful with it but we're not

00:20:50,240 --> 00:20:55,520
going to do that right now for the sake

00:20:52,880 --> 00:20:57,710
of time so the next thing we want to do

00:20:55,520 --> 00:21:00,200
is add some history to this repli'd up

00:20:57,710 --> 00:21:03,350
we just built and again prompt comes

00:21:00,200 --> 00:21:05,060
with everything you need in order to

00:21:03,350 --> 00:21:07,399
build an awesome raffle and I'm going to

00:21:05,060 --> 00:21:15,320
do I'm going to add a history up

00:21:07,399 --> 00:21:17,269
to it and import file based history

00:21:15,320 --> 00:21:18,950
because we want this history to be

00:21:17,269 --> 00:21:21,739
persistent we don't want it to go away

00:21:18,950 --> 00:21:24,649
when the when we've quit a particular

00:21:21,739 --> 00:21:31,070
session and store it in a file let's

00:21:24,649 --> 00:21:34,700
call it history text ok so now I type a

00:21:31,070 --> 00:21:40,190
B C D F I can press the up arrow down

00:21:34,700 --> 00:21:42,889
arrow and I can even do select from and

00:21:40,190 --> 00:21:46,099
if I do a ctrl R it allows me to search

00:21:42,889 --> 00:21:49,219
things and that's all it took it

00:21:46,099 --> 00:21:52,099
literally seven lines with white space

00:21:49,219 --> 00:21:54,440
including and that is having persistent

00:21:52,099 --> 00:21:56,299
history and it also comes with the Emacs

00:21:54,440 --> 00:21:59,299
key binding so I could do ctrl ctrl a

00:21:56,299 --> 00:22:01,759
ctrl e control B ctrl F do all of that

00:21:59,299 --> 00:22:03,979
stuff this is all built into the prompt

00:22:01,759 --> 00:22:07,219
built-in to prompt ok this is already a

00:22:03,979 --> 00:22:09,649
good working repple that we could use

00:22:07,219 --> 00:22:11,019
but we're going to continue to make this

00:22:09,649 --> 00:22:13,429
awesome

00:22:11,019 --> 00:22:16,369
so the next thing that we talked about

00:22:13,429 --> 00:22:18,259
was ctrl R is nice and all but we just

00:22:16,369 --> 00:22:21,139
talked about making it more discoverable

00:22:18,259 --> 00:22:24,139
so we can take the idea from fish and

00:22:21,139 --> 00:22:26,799
let it automatically suggest things from

00:22:24,139 --> 00:22:28,669
history that matches this scenario

00:22:26,799 --> 00:22:36,259
matches the command that we're trying to

00:22:28,669 --> 00:22:39,169
type and again it comes with autosuggest

00:22:36,259 --> 00:22:40,609
and you can also just from various

00:22:39,169 --> 00:22:43,899
things but we're going to autosuggest

00:22:40,609 --> 00:22:43,899
from history

00:22:52,220 --> 00:23:00,210
okay and now it's actually Otto

00:22:56,009 --> 00:23:01,470
suggesting right there and I could

00:23:00,210 --> 00:23:05,940
select that and this is coming from

00:23:01,470 --> 00:23:08,639
history and again just one line to add

00:23:05,940 --> 00:23:10,830
the fish style auto-completion the next

00:23:08,639 --> 00:23:12,570
thing we talked about was we don't want

00:23:10,830 --> 00:23:14,519
to be using tab keys for completion we

00:23:12,570 --> 00:23:15,980
want it to be automatically completing

00:23:14,519 --> 00:23:18,389
the things as we start typing things

00:23:15,980 --> 00:23:22,230
once again prompts toolkit to the rescue

00:23:18,389 --> 00:23:24,299
I can provide it with a completer and

00:23:22,230 --> 00:23:26,100
since I'm typing select statements let's

00:23:24,299 --> 00:23:28,649
make this into let's say that we are

00:23:26,100 --> 00:23:31,309
writing as I'm writing an SQL Lite CLI

00:23:28,649 --> 00:23:33,989
so we want to be able to provide

00:23:31,309 --> 00:23:38,220
automatically complete SQL keywords in

00:23:33,989 --> 00:23:40,169
this case so prom toolkit comes with a

00:23:38,220 --> 00:23:47,159
lot of different completers and I'm

00:23:40,169 --> 00:23:50,730
going to pick one called sorry I'm

00:23:47,159 --> 00:23:58,889
blanking the name word completer thank

00:23:50,730 --> 00:24:00,299
you okay and I'm going the way word

00:23:58,889 --> 00:24:02,399
completed works is as soon as you start

00:24:00,299 --> 00:24:04,289
typing it is going to do a substring

00:24:02,399 --> 00:24:06,509
match on a list of strings that you have

00:24:04,289 --> 00:24:08,309
provided as its corpus and it is going

00:24:06,509 --> 00:24:11,129
to start providing the suggestions from

00:24:08,309 --> 00:24:12,840
that so we need to instantiate a word

00:24:11,129 --> 00:24:15,359
completed object and initialize it with

00:24:12,840 --> 00:24:17,580
a bunch of over the list of keywords so

00:24:15,359 --> 00:24:18,720
let's call our new object as SQL

00:24:17,580 --> 00:24:21,899
completed because that's what we're

00:24:18,720 --> 00:24:22,499
trying to build and it's a word

00:24:21,899 --> 00:24:24,809
completer

00:24:22,499 --> 00:24:29,669
and it takes a list of items and let's

00:24:24,809 --> 00:24:32,279
say select show let's keep it simple

00:24:29,669 --> 00:24:37,049
just just four items maybe like from and

00:24:32,279 --> 00:24:39,179
we're and we made a big deal about how

00:24:37,049 --> 00:24:43,070
my sequel was being all case sensitive

00:24:39,179 --> 00:24:43,070
with its completion so let's ignore case

00:24:45,739 --> 00:24:48,889
thank you

00:24:50,679 --> 00:25:04,969
thank you and we pass the completer to

00:24:56,659 --> 00:25:09,080
the prompt function let's see how that

00:25:04,969 --> 00:25:11,989
works so now I start with the statement

00:25:09,080 --> 00:25:17,389
and right away it is trying to suggest

00:25:11,989 --> 00:25:20,149
things that I could be doing and it

00:25:17,389 --> 00:25:28,759
still has fish style completion that I

00:25:20,149 --> 00:25:30,769
could try and try and use here and again

00:25:28,759 --> 00:25:33,019
that is all it took to actually build a

00:25:30,769 --> 00:25:35,179
ripple that can autocomplete I can do

00:25:33,019 --> 00:25:37,909
auto suggestion like fish and that can

00:25:35,179 --> 00:25:42,830
do history navigation with the up/down

00:25:37,909 --> 00:25:45,349
arrow and all of that another item we

00:25:42,830 --> 00:25:48,139
kind of briefly mentioned is using

00:25:45,349 --> 00:25:50,960
syntax highlighting in Python there is a

00:25:48,139 --> 00:25:52,639
powerful library called pigments if you

00:25:50,960 --> 00:25:54,799
don't know what pigments does it does

00:25:52,639 --> 00:25:57,229
syntax highlighting for your code and it

00:25:54,799 --> 00:25:59,149
comes built in with syntax highlighting

00:25:57,229 --> 00:26:00,799
for a lot of different languages since

00:25:59,149 --> 00:26:03,619
we're dealing with SQL here we could

00:26:00,799 --> 00:26:05,479
pull the SQL syntax highlighting lecture

00:26:03,619 --> 00:26:06,799
and automatically feed it to prompt and

00:26:05,479 --> 00:26:09,019
prompt book it has built in a way where

00:26:06,799 --> 00:26:11,239
it will automatically work with the

00:26:09,019 --> 00:26:13,129
pigments lectures and you could do

00:26:11,239 --> 00:26:16,609
autocomplete a syntax highlighting for

00:26:13,129 --> 00:26:20,330
that so let me feed the SQL lecture to

00:26:16,609 --> 00:26:23,149
this obviously I need to import that so

00:26:20,330 --> 00:26:26,419
that is coming from pigments so I am in

00:26:23,149 --> 00:26:29,960
fact using more than one library here

00:26:26,419 --> 00:26:32,139
but I think will will not worry about

00:26:29,960 --> 00:26:32,139
that

00:26:36,970 --> 00:26:44,480
okay now I have a select statement with

00:26:42,230 --> 00:27:00,740
Auto completion and that has syntax

00:26:44,480 --> 00:27:02,539
highlighting here thank you by the way

00:27:00,740 --> 00:27:04,159
all the code that I typed is available

00:27:02,539 --> 00:27:06,890
here in the slides and I will be posting

00:27:04,159 --> 00:27:10,460
the slides on my Twitter account pretty

00:27:06,890 --> 00:27:12,020
soon and this is our checklist that we

00:27:10,460 --> 00:27:13,820
started with and we finish everything

00:27:12,020 --> 00:27:16,130
except for paging through the output if

00:27:13,820 --> 00:27:19,070
you are interested in knowing how to do

00:27:16,130 --> 00:27:21,500
the paged output check out click-click

00:27:19,070 --> 00:27:23,179
as a another command line a library for

00:27:21,500 --> 00:27:25,460
python that allows you to echo any

00:27:23,179 --> 00:27:26,809
output through a pager and it is

00:27:25,460 --> 00:27:28,789
cross-platform compatible so it'll work

00:27:26,809 --> 00:27:31,039
right off the bat in Windows as well as

00:27:28,789 --> 00:27:32,900
in Linux by the way prom toolkit is also

00:27:31,039 --> 00:27:35,120
completely cross-platform compatible so

00:27:32,900 --> 00:27:36,799
you could use this in the program that I

00:27:35,120 --> 00:27:41,120
wrote will also work in Windows as well

00:27:36,799 --> 00:27:43,700
as Linux these are some of the resources

00:27:41,120 --> 00:27:46,340
that I shared today PG CLI my CLI says

00:27:43,700 --> 00:27:49,460
she'll be Python interpreter and prompts

00:27:46,340 --> 00:27:50,780
Tolkien if you have any questions or

00:27:49,460 --> 00:27:52,669
comments about any of the things that

00:27:50,780 --> 00:27:55,820
I've said in this talk you can reach out

00:27:52,669 --> 00:27:57,230
to me on Twitter at i'm jeff are the

00:27:55,820 --> 00:27:59,330
people that i've listed on the right

00:27:57,230 --> 00:28:01,940
Jonathan slender sees the author of

00:27:59,330 --> 00:28:05,720
prompts toolkit he's here at at PyCon

00:28:01,940 --> 00:28:08,750
and first row actually and I had Thomas

00:28:05,720 --> 00:28:11,380
Bollinger he is a core developer in V

00:28:08,750 --> 00:28:15,110
Python he's also here at at PyCon and

00:28:11,380 --> 00:28:16,640
Edina she is the lead maintainer for PG

00:28:15,110 --> 00:28:18,080
CLI actually I've given the range to

00:28:16,640 --> 00:28:20,600
Edina and she's doing a fantastic job

00:28:18,080 --> 00:28:23,270
she's also here at Python and she's

00:28:20,600 --> 00:28:24,710
somewhere here in the talk so feel free

00:28:23,270 --> 00:28:28,460
to reach out to any of them and they'll

00:28:24,710 --> 00:28:29,960
be happy to help that's it thank you

00:28:28,460 --> 00:28:39,450
very much goodbye

00:28:29,960 --> 00:28:39,450

YouTube URL: https://www.youtube.com/watch?v=hJhZhLg3obk


