Title: Education Summit Afternoon Room A106 Part01
Publication date: 2017-05-21
Playlist: PyCon 2017
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:07,080
hey everyone can you hear me okay all

00:00:02,300 --> 00:00:09,830
right so welcome to from snake 'let's

00:00:07,080 --> 00:00:12,750
to pipe aneesa's I'm going to talk about

00:00:09,830 --> 00:00:17,010
teaching Python in public school

00:00:12,750 --> 00:00:21,180
classroom so first I just want to

00:00:17,010 --> 00:00:23,970
introduce myself I am the teacher in

00:00:21,180 --> 00:00:27,420
residence at Cornell Tech that is a

00:00:23,970 --> 00:00:30,660
graduate campus of Cornell University in

00:00:27,420 --> 00:00:34,380
New York City my primary job there is to

00:00:30,660 --> 00:00:37,590
work on solving the problem of scaling

00:00:34,380 --> 00:00:40,469
quality computer science in New York

00:00:37,590 --> 00:00:43,920
City Public Schools and I do that

00:00:40,469 --> 00:00:46,590
through training teachers coaching

00:00:43,920 --> 00:00:49,620
teachers consulting with schools on

00:00:46,590 --> 00:00:52,770
curriculum and developing curriculum I

00:00:49,620 --> 00:00:56,070
also am a teacher in the school of

00:00:52,770 --> 00:01:00,870
education at Hunter College and I worked

00:00:56,070 --> 00:01:07,380
on writing the National k12 Cs framework

00:01:00,870 --> 00:01:10,250
and national k12 Cs standards and please

00:01:07,380 --> 00:01:14,700
go ahead and tweet me at teach Python

00:01:10,250 --> 00:01:20,580
all right so this journey began in the

00:01:14,700 --> 00:01:22,470
90s I saved my babysitting money for two

00:01:20,580 --> 00:01:25,380
years so that I could go to Space Camp

00:01:22,470 --> 00:01:28,920
and there I decided I would be an

00:01:25,380 --> 00:01:32,850
aerospace engineer and I was dedicated I

00:01:28,920 --> 00:01:36,720
also met my hero astronaut mae Jemison

00:01:32,850 --> 00:01:40,140
at that time and I knew that's what I

00:01:36,720 --> 00:01:41,880
was going to do when it came time I was

00:01:40,140 --> 00:01:45,030
finally in college when it came time to

00:01:41,880 --> 00:01:47,610
enroll in my first CS class I never

00:01:45,030 --> 00:01:51,390
written a line of code before I decided

00:01:47,610 --> 00:01:55,619
you know I just don't think this is for

00:01:51,390 --> 00:01:58,439
me seems a little boring and I ended up

00:01:55,619 --> 00:02:02,909
majoring in theater and was a starving

00:01:58,439 --> 00:02:05,189
actor in another life um so that is

00:02:02,909 --> 00:02:08,069
really what drives and motivates me to

00:02:05,189 --> 00:02:10,170
teach kids because I want them to have

00:02:08,069 --> 00:02:12,870
the opportunity to write that line of

00:02:10,170 --> 00:02:13,830
code and discover if this is something

00:02:12,870 --> 00:02:16,170
that is

00:02:13,830 --> 00:02:18,480
or isn't for them because years later

00:02:16,170 --> 00:02:22,050
when I did write my first line of code

00:02:18,480 --> 00:02:26,550
and caught the bug I realized that I

00:02:22,050 --> 00:02:28,650
made a mistake all those years ago so

00:02:26,550 --> 00:02:31,050
now I'm part of a movement that is both

00:02:28,650 --> 00:02:34,560
local and national called computer

00:02:31,050 --> 00:02:37,680
science for all has anyone heard of this

00:02:34,560 --> 00:02:41,670
movement chopin's one person all right

00:02:37,680 --> 00:02:45,630
um so the idea behind computer science

00:02:41,670 --> 00:02:49,050
for all is that we want to teach every

00:02:45,630 --> 00:02:51,840
single kid a baseline of computer

00:02:49,050 --> 00:02:54,480
science so that means they don't have to

00:02:51,840 --> 00:02:56,130
test into it they don't have to opt into

00:02:54,480 --> 00:02:58,590
an elective they don't have to have a

00:02:56,130 --> 00:03:00,540
specific math score they don't have to

00:02:58,590 --> 00:03:05,040
be available after school they don't

00:03:00,540 --> 00:03:08,580
have to pay for a summer camp the vision

00:03:05,040 --> 00:03:10,920
is to have computer science during the

00:03:08,580 --> 00:03:13,140
school day for every student in the

00:03:10,920 --> 00:03:15,750
school and we're not doing that because

00:03:13,140 --> 00:03:19,800
we think a hundred percent of students

00:03:15,750 --> 00:03:22,110
will become software engineers just the

00:03:19,800 --> 00:03:24,390
same way we don't teach science and K to

00:03:22,110 --> 00:03:27,000
12 because we think every single student

00:03:24,390 --> 00:03:29,430
will be a research scientist we do it

00:03:27,000 --> 00:03:32,340
because they need a baseline of science

00:03:29,430 --> 00:03:36,410
literacy to contribute to society to

00:03:32,340 --> 00:03:38,580
vote and often to do their jobs so

00:03:36,410 --> 00:03:42,390
computers computer science and

00:03:38,580 --> 00:03:46,680
technology is also just as vital a

00:03:42,390 --> 00:03:49,140
literacy for students to have so you

00:03:46,680 --> 00:03:50,940
know how sort of after you write your

00:03:49,140 --> 00:03:53,010
first program or take your first CS

00:03:50,940 --> 00:03:56,519
class you automatically become the IT

00:03:53,010 --> 00:03:58,680
person for everybody you know so we

00:03:56,519 --> 00:04:01,769
don't want that to happen anymore we

00:03:58,680 --> 00:04:05,180
want to educate the first generation of

00:04:01,769 --> 00:04:08,400
Pegg note of computationally literate

00:04:05,180 --> 00:04:10,200
students and that doesn't mean that they

00:04:08,400 --> 00:04:12,690
can pick up an iPhone and figure out any

00:04:10,200 --> 00:04:16,500
game within five minutes because we

00:04:12,690 --> 00:04:19,080
don't want to create more users we want

00:04:16,500 --> 00:04:23,250
to can create and who understand the

00:04:19,080 --> 00:04:27,150
underlying processes so what does this

00:04:23,250 --> 00:04:27,690
look like in action well the first thing

00:04:27,150 --> 00:04:30,150
it looks

00:04:27,690 --> 00:04:32,550
like is our classrooms they are

00:04:30,150 --> 00:04:37,020
wonderfully diverse they're also

00:04:32,550 --> 00:04:41,460
challengingly diverse so in a typical

00:04:37,020 --> 00:04:43,170
classroom in New York City I'll just use

00:04:41,460 --> 00:04:46,050
myself as an example you'll have a

00:04:43,170 --> 00:04:47,700
teacher who is self-taught they may have

00:04:46,050 --> 00:04:50,370
been asked to teach computer science

00:04:47,700 --> 00:04:52,320
with no prior knowledge they may have

00:04:50,370 --> 00:04:55,650
one or two courses and it's sort of a

00:04:52,320 --> 00:04:58,440
hobby but they are learning along with

00:04:55,650 --> 00:05:02,970
the students and then they have a class

00:04:58,440 --> 00:05:06,390
of up to 34 kids plus with only one

00:05:02,970 --> 00:05:09,840
teacher up to a third of those students

00:05:06,390 --> 00:05:14,100
might have disabilities many of those

00:05:09,840 --> 00:05:15,660
students may be learning English and no

00:05:14,100 --> 00:05:19,320
matter what school you're in you will

00:05:15,660 --> 00:05:22,890
always have a range of cultural

00:05:19,320 --> 00:05:25,080
identities gender identity and just

00:05:22,890 --> 00:05:28,320
personal interests and all of those

00:05:25,080 --> 00:05:29,820
things are really important to teaching

00:05:28,320 --> 00:05:33,930
and they're really important to teaching

00:05:29,820 --> 00:05:35,880
computer science so teachers who are

00:05:33,930 --> 00:05:38,850
just learning Python and computer

00:05:35,880 --> 00:05:41,550
science for the first time are finding

00:05:38,850 --> 00:05:43,350
new ways to reach kids and are

00:05:41,550 --> 00:05:47,360
redefining the way that we're

00:05:43,350 --> 00:05:50,660
introducing kids to computer science so

00:05:47,360 --> 00:05:56,070
python has become a very popular

00:05:50,660 --> 00:06:01,280
language to do this in so we are super

00:05:56,070 --> 00:06:04,140
hip I had a teacher the other day say oh

00:06:01,280 --> 00:06:05,930
well you know all the schools use Python

00:06:04,140 --> 00:06:08,210
it may be I'll tell you something else

00:06:05,930 --> 00:06:13,770
and I was like oh we're like mainstream

00:06:08,210 --> 00:06:17,940
so here's why it works so well for CS

00:06:13,770 --> 00:06:20,250
roll first it's object-oriented this is

00:06:17,940 --> 00:06:23,160
developmentally appropriate for the

00:06:20,250 --> 00:06:24,930
cognitive level that our students are at

00:06:23,160 --> 00:06:27,570
especially if we start them in middle

00:06:24,930 --> 00:06:29,370
school where they're developing they're

00:06:27,570 --> 00:06:31,770
still developing the capacity for

00:06:29,370 --> 00:06:34,050
abstract thought starting with an object

00:06:31,770 --> 00:06:38,640
and thinking constructing your thinking

00:06:34,050 --> 00:06:41,070
around that is very helpful this syntax

00:06:38,640 --> 00:06:45,330
is straightforward the kids don't

00:06:41,070 --> 00:06:47,790
to type curly brackets it's readable

00:06:45,330 --> 00:06:51,630
they can look at code and kind of figure

00:06:47,790 --> 00:06:54,540
out what's going on there's a range of

00:06:51,630 --> 00:06:57,360
libraries this is so great because that

00:06:54,540 --> 00:06:59,790
means we can use Python in a bunch of

00:06:57,360 --> 00:07:02,780
different subject areas and we can also

00:06:59,790 --> 00:07:07,520
use libraries to strategically hide

00:07:02,780 --> 00:07:07,520
complexity when it's when we need to

00:07:07,650 --> 00:07:12,570
it's got street cred with students when

00:07:09,840 --> 00:07:15,500
they hear that YouTube is written in

00:07:12,570 --> 00:07:17,880
Python they cannot wait to write Python

00:07:15,500 --> 00:07:21,360
and a bunch of other companies that

00:07:17,880 --> 00:07:24,150
they've heard of and finally it has an

00:07:21,360 --> 00:07:25,590
active and supportive community so that

00:07:24,150 --> 00:07:30,750
once they start learning they have

00:07:25,590 --> 00:07:32,760
somewhere to go so just to give you an

00:07:30,750 --> 00:07:35,940
idea of what this actually looks like in

00:07:32,760 --> 00:07:39,180
the wild I'm going to give you a tour of

00:07:35,940 --> 00:07:41,430
a school and this school is a mishmash

00:07:39,180 --> 00:07:42,510
of the different schools they work in

00:07:41,430 --> 00:07:46,290
around New York City

00:07:42,510 --> 00:07:48,480
so please imagine with me walking

00:07:46,290 --> 00:07:51,960
through the bright red doors of this

00:07:48,480 --> 00:07:54,300
school and first off we're going to

00:07:51,960 --> 00:07:56,580
start in the kindergarten classroom and

00:07:54,300 --> 00:08:00,180
know the kindergartners aren't using

00:07:56,580 --> 00:08:02,640
Python what they are doing is building

00:08:00,180 --> 00:08:06,570
towers with marshmallows and popsicle

00:08:02,640 --> 00:08:08,190
sticks so as we watch see all the

00:08:06,570 --> 00:08:11,790
kindergartners building away and

00:08:08,190 --> 00:08:15,210
suddenly the tallest tower falls over

00:08:11,790 --> 00:08:18,510
and the kid stands there there's this

00:08:15,210 --> 00:08:25,920
tense silence oh and my computer is

00:08:18,510 --> 00:08:28,520
going I don't know where my singlet oh

00:08:25,920 --> 00:08:28,520
here

00:08:33,590 --> 00:08:42,650
oh my gosh it's a very tense silence

00:08:38,870 --> 00:08:47,060
standing for a long time and all of a

00:08:42,650 --> 00:08:49,790
sudden the kid jumps up and says yes I

00:08:47,060 --> 00:08:52,970
got a bug and he holds up a picture of a

00:08:49,790 --> 00:08:55,760
cartoon bug as soon as he does that he

00:08:52,970 --> 00:08:58,520
and his partner start talking about how

00:08:55,760 --> 00:09:02,060
they can rebuild so it'll stand up so

00:08:58,520 --> 00:09:05,300
we're introducing major concepts and

00:09:02,060 --> 00:09:07,730
vocabulary right away just like we don't

00:09:05,300 --> 00:09:10,670
want kids to start algebra without any

00:09:07,730 --> 00:09:12,560
arithmetic we don't want kids to start

00:09:10,670 --> 00:09:17,390
all of a sudden programming in high

00:09:12,560 --> 00:09:19,640
school with no prior knowledge so we'll

00:09:17,390 --> 00:09:22,270
move on to a second grade room these

00:09:19,640 --> 00:09:25,430
kids are doing an unplugged activity

00:09:22,270 --> 00:09:27,140
meaning they don't have devices what

00:09:25,430 --> 00:09:29,900
they're doing is cutting out paper

00:09:27,140 --> 00:09:33,800
arrows and putting them in a sequence

00:09:29,900 --> 00:09:36,880
their partner then uses that sequence to

00:09:33,800 --> 00:09:40,220
move a cut out character around a grid

00:09:36,880 --> 00:09:43,390
so this is getting them ready to code

00:09:40,220 --> 00:09:46,100
and it's using sort of logo style

00:09:43,390 --> 00:09:49,850
introduction now we can do this at

00:09:46,100 --> 00:09:53,570
higher grade levels with Python so one

00:09:49,850 --> 00:09:55,850
way I've done that is to take a Python

00:09:53,570 --> 00:09:58,970
command make a card deck of it and have

00:09:55,850 --> 00:10:02,600
kids direct each other around the room

00:09:58,970 --> 00:10:06,950
or create designs on their desk with

00:10:02,600 --> 00:10:10,750
beams and then I have them go and write

00:10:06,950 --> 00:10:10,750
the exact same program when they're done

00:10:11,020 --> 00:10:19,100
okay we'll move on to fourth grade we're

00:10:14,780 --> 00:10:21,440
moving up a little bit so in this fourth

00:10:19,100 --> 00:10:23,570
grade room they these fourth graders are

00:10:21,440 --> 00:10:26,720
solving the problem of climate change

00:10:23,570 --> 00:10:29,540
right now they are prototyping they have

00:10:26,720 --> 00:10:32,810
brainstorms and are prototyping a device

00:10:29,540 --> 00:10:35,230
that will solve climate change and most

00:10:32,810 --> 00:10:38,140
of the kids are doing this in scratch

00:10:35,230 --> 00:10:40,880
which is a language made of blocks

00:10:38,140 --> 00:10:45,500
Digital blocks that snap together like

00:10:40,880 --> 00:10:47,270
Legos on the screen it has no syntax but

00:10:45,500 --> 00:10:50,540
this group of students

00:10:47,270 --> 00:10:53,740
is doing the exact same task in Python

00:10:50,540 --> 00:10:56,450
and when I asked the teacher she said I

00:10:53,740 --> 00:11:00,380
have no idea what they're doing their

00:10:56,450 --> 00:11:02,480
parents are in tech so that's actually

00:11:00,380 --> 00:11:05,290
something that comes up a lot a lot of

00:11:02,480 --> 00:11:08,660
professional developers I know say oh

00:11:05,290 --> 00:11:12,020
you know my kids started Python at eight

00:11:08,660 --> 00:11:14,060
years old well that's not appropriate in

00:11:12,020 --> 00:11:17,120
a general fourth-grade classroom

00:11:14,060 --> 00:11:20,060
however we never want to hold kids back

00:11:17,120 --> 00:11:23,960
so anytime that we can do the exact same

00:11:20,060 --> 00:11:25,820
project in multiple languages and the

00:11:23,960 --> 00:11:30,160
students can use the one that is most

00:11:25,820 --> 00:11:36,110
challenging for them that is a plus this

00:11:30,160 --> 00:11:39,820
is an example of one way that Python

00:11:36,110 --> 00:11:42,980
could be used so these blocks this is a

00:11:39,820 --> 00:11:45,860
this is a website called trinket i/o by

00:11:42,980 --> 00:11:48,380
Elliott Hauser these blocks are

00:11:45,860 --> 00:11:53,300
specifically made to correspond with

00:11:48,380 --> 00:11:57,710
Python so some kids could run this

00:11:53,300 --> 00:12:00,080
turtle program using blocks and you

00:11:57,710 --> 00:12:04,480
could have other kids who run the exact

00:12:00,080 --> 00:12:04,480
same program writing Python like normal

00:12:08,440 --> 00:12:16,790
so let's pop over to sixth grade in this

00:12:13,010 --> 00:12:19,550
grade they're all using Python to create

00:12:16,790 --> 00:12:22,460
a game but they're using a special

00:12:19,550 --> 00:12:25,670
educational platform and fold this

00:12:22,460 --> 00:12:30,370
closure I worked on this platform in

00:12:25,670 --> 00:12:33,470
this platform they are moving the blocks

00:12:30,370 --> 00:12:37,760
dropping them into the editor and when

00:12:33,470 --> 00:12:39,920
they do it turns into text so this is a

00:12:37,760 --> 00:12:42,410
tool that is made specifically to

00:12:39,920 --> 00:12:46,010
transition students from blocks that

00:12:42,410 --> 00:12:48,950
almost all schools use to text we're

00:12:46,010 --> 00:12:51,620
finding that blocks are being used up

00:12:48,950 --> 00:12:54,290
through the end of high school and part

00:12:51,620 --> 00:12:57,440
of my goal is to get teachers to move

00:12:54,290 --> 00:13:00,650
students to Python much earlier sometime

00:12:57,440 --> 00:13:00,889
around 6:00 or 7th grade if possible so

00:13:00,650 --> 00:13:03,019
they

00:13:00,889 --> 00:13:09,499
to help them directly make those

00:13:03,019 --> 00:13:12,769
connections and finally so we'll also

00:13:09,499 --> 00:13:14,119
visit the seventh grade room um now if

00:13:12,769 --> 00:13:16,670
you went into this room it would be

00:13:14,119 --> 00:13:19,040
pretty chaotic and loud you might not

00:13:16,670 --> 00:13:23,389
know what's going on what they're

00:13:19,040 --> 00:13:25,429
actually doing is they're building a

00:13:23,389 --> 00:13:29,089
biome project this is the back of one

00:13:25,429 --> 00:13:34,189
project because the front of it lights

00:13:29,089 --> 00:13:36,649
up now that's just building circuits but

00:13:34,189 --> 00:13:40,279
these students were able we were able to

00:13:36,649 --> 00:13:45,169
connect their paper circuits with a

00:13:40,279 --> 00:13:47,689
makey makey to a scratch program that

00:13:45,169 --> 00:13:49,609
gives that read out their report so when

00:13:47,689 --> 00:13:53,540
they flip these switches they made it

00:13:49,609 --> 00:13:56,600
turns on their LED and it plays their

00:13:53,540 --> 00:14:02,629
programs we're in the process of porting

00:13:56,600 --> 00:14:05,509
this project to Python I'm really

00:14:02,629 --> 00:14:08,779
excited to hear about micro Python and

00:14:05,509 --> 00:14:10,249
the other microcontroller that's coming

00:14:08,779 --> 00:14:12,169
out because I might use that I was

00:14:10,249 --> 00:14:15,709
planning to use a tool called

00:14:12,169 --> 00:14:19,009
hummingbird which can sit on either an

00:14:15,709 --> 00:14:22,549
Arduino or Raspberry Pi but there's lots

00:14:19,009 --> 00:14:25,879
more tools coming out something really

00:14:22,549 --> 00:14:29,869
important is to use computer science in

00:14:25,879 --> 00:14:32,239
other subject areas so it's not just a

00:14:29,869 --> 00:14:35,449
dedicated class every school can't

00:14:32,239 --> 00:14:38,540
afford to do that especially if they

00:14:35,449 --> 00:14:42,379
have to prove that they have high test

00:14:38,540 --> 00:14:44,010
scores to stay open or to get funding so

00:14:42,379 --> 00:14:45,309
it's really important the kids learn

00:14:44,010 --> 00:14:47,929
[Music]

00:14:45,309 --> 00:14:50,269
programming and computer science and use

00:14:47,929 --> 00:14:53,709
it as a creative tool or as a

00:14:50,269 --> 00:14:57,230
problem-solving tool in other courses a

00:14:53,709 --> 00:14:58,789
final example of that is if we were to

00:14:57,230 --> 00:15:01,879
go to this ninth and 10th grade

00:14:58,789 --> 00:15:05,739
classroom they are working on an ela

00:15:01,879 --> 00:15:09,589
project or an English literature project

00:15:05,739 --> 00:15:11,989
pairs of students chose a classic novel

00:15:09,589 --> 00:15:14,960
and read it and then pair programmed in

00:15:11,989 --> 00:15:17,780
RPG using Python

00:15:14,960 --> 00:15:24,590
that would allow the user to experience

00:15:17,780 --> 00:15:26,750
the core themes of the novel so what is

00:15:24,590 --> 00:15:28,820
the impact of all this this is all very

00:15:26,750 --> 00:15:32,990
exciting how does this affect the Python

00:15:28,820 --> 00:15:35,060
community well as python is becoming

00:15:32,990 --> 00:15:38,510
more and more popular in high school and

00:15:35,060 --> 00:15:41,960
k12 in general it's also becoming

00:15:38,510 --> 00:15:44,240
popular in undergraduate studies as of

00:15:41,960 --> 00:15:47,270
2014 I don't have a more current

00:15:44,240 --> 00:15:49,030
statistic according to the ACM Python

00:15:47,270 --> 00:15:52,340
was the most popular

00:15:49,030 --> 00:15:56,210
cs1 language and it's been adopted by

00:15:52,340 --> 00:15:59,240
colleges like ma MIT and UC Berkeley so

00:15:56,210 --> 00:16:02,840
as colleges are also changing how they

00:15:59,240 --> 00:16:06,140
teach computer science it will have an

00:16:02,840 --> 00:16:10,220
impact on industry and use in industry

00:16:06,140 --> 00:16:14,390
will go up another impact is that

00:16:10,220 --> 00:16:20,540
especially in k-12 as it's becoming more

00:16:14,390 --> 00:16:23,780
popular teachers are creating just a

00:16:20,540 --> 00:16:26,570
plethora of new tools for beginners I

00:16:23,780 --> 00:16:30,020
could name at least 10 different Python

00:16:26,570 --> 00:16:33,890
platforms right now that are tutorials

00:16:30,020 --> 00:16:38,420
and that's in addition to videos lesson

00:16:33,890 --> 00:16:41,900
plans and books so all of this widens

00:16:38,420 --> 00:16:45,770
the funnel of our pipeline for Python

00:16:41,900 --> 00:16:48,200
users so we talked about oh there's this

00:16:45,770 --> 00:16:50,840
diversity problem in tech which there is

00:16:48,200 --> 00:16:53,030
and we try to solve it by recruiting

00:16:50,840 --> 00:16:56,960
they sing like oh let's have a pink

00:16:53,030 --> 00:16:58,940
themed recruiting initiative or you know

00:16:56,960 --> 00:17:02,200
fill in the blank recruiting initiative

00:16:58,940 --> 00:17:05,420
that will not solve the problem

00:17:02,200 --> 00:17:09,050
this problem will be solved when kids

00:17:05,420 --> 00:17:12,230
have access to high-quality computer

00:17:09,050 --> 00:17:16,760
science education regardless of where

00:17:12,230 --> 00:17:19,610
they live or where they go to school so

00:17:16,760 --> 00:17:20,949
as a Python community I already feel

00:17:19,610 --> 00:17:25,400
that this community is incredibly

00:17:20,949 --> 00:17:26,680
supportive and bringing in the next

00:17:25,400 --> 00:17:32,010
generation

00:17:26,680 --> 00:17:36,750
is what will grow and widen our circle

00:17:32,010 --> 00:17:39,820
skip through that really quickly so I

00:17:36,750 --> 00:17:43,150
feel like there's sort of two silos of

00:17:39,820 --> 00:17:45,430
Python education one is in the Python

00:17:43,150 --> 00:17:47,620
community we're all here meeting about

00:17:45,430 --> 00:17:50,680
education we have this summit and there

00:17:47,620 --> 00:17:52,000
are Python education summits around the

00:17:50,680 --> 00:17:56,620
globe

00:17:52,000 --> 00:17:58,270
separately in education run by sponsored

00:17:56,620 --> 00:18:01,060
by school districts there are teacher

00:17:58,270 --> 00:18:03,820
meetups and movements that are pushing

00:18:01,060 --> 00:18:06,400
CS and Python and those movements are

00:18:03,820 --> 00:18:10,690
both gaining momentum sort of in silos

00:18:06,400 --> 00:18:14,020
so we always teach that first we have to

00:18:10,690 --> 00:18:15,460
get the what the content that has to be

00:18:14,020 --> 00:18:17,980
right that's what I have to work on with

00:18:15,460 --> 00:18:20,920
my teachers but then they have to do it

00:18:17,980 --> 00:18:24,310
well they have to learn how to teach it

00:18:20,920 --> 00:18:27,280
to reach all students and that's the

00:18:24,310 --> 00:18:28,900
part that programmers and the Python

00:18:27,280 --> 00:18:32,560
community that's the piece that the

00:18:28,900 --> 00:18:34,920
education community tempering so how do

00:18:32,560 --> 00:18:39,130
we work together what are some practical

00:18:34,920 --> 00:18:42,850
solutions I have a few ideas

00:18:39,130 --> 00:18:45,100
the first is volunteer in classrooms

00:18:42,850 --> 00:18:47,680
there are two organizations that I know

00:18:45,100 --> 00:18:51,220
of that bring programmers into the

00:18:47,680 --> 00:18:54,100
classroom to teach students but also to

00:18:51,220 --> 00:18:58,750
teach the teacher how to teach the class

00:18:54,100 --> 00:19:00,720
so that's teal by Microsoft hopefully

00:18:58,750 --> 00:19:05,410
these will be shared out I don't know

00:19:00,720 --> 00:19:08,020
and script IDI is local to California

00:19:05,410 --> 00:19:11,230
and New York but teals is national and

00:19:08,020 --> 00:19:17,020
teals also reaches rural areas through

00:19:11,230 --> 00:19:20,410
virtual coaching you can advocate there

00:19:17,020 --> 00:19:22,630
are multiple movements in every state to

00:19:20,410 --> 00:19:26,710
change the graduation requirements and

00:19:22,630 --> 00:19:29,260
to adopt CS standards so they need to

00:19:26,710 --> 00:19:33,090
each state government needs to hear

00:19:29,260 --> 00:19:35,560
voices of educators and programmers

00:19:33,090 --> 00:19:39,160
letting them know that this is important

00:19:35,560 --> 00:19:40,440
next is if you're creating tools and

00:19:39,160 --> 00:19:43,420
materials that are

00:19:40,440 --> 00:19:46,270
don't just think about that after-school

00:19:43,420 --> 00:19:50,080
program don't just think about a really

00:19:46,270 --> 00:19:53,320
fun camp where a group of what a group

00:19:50,080 --> 00:19:56,490
of ten kids can all do think about what

00:19:53,320 --> 00:20:00,250
it might look like in a classroom and

00:19:56,490 --> 00:20:03,420
finally partner up we have a really

00:20:00,250 --> 00:20:07,150
strong community if you live in a city

00:20:03,420 --> 00:20:09,160
you may have a Python meetup in New York

00:20:07,150 --> 00:20:12,429
City we have a Python Meetup

00:20:09,160 --> 00:20:16,929
you may also have either an educator a

00:20:12,429 --> 00:20:19,240
CS educator meetup or a CSP a chapter

00:20:16,929 --> 00:20:23,970
CSA's computer science teachers

00:20:19,240 --> 00:20:26,380
association invite each other to events

00:20:23,970 --> 00:20:30,250
attend their events invite them to your

00:20:26,380 --> 00:20:32,559
events and think about partnering for

00:20:30,250 --> 00:20:35,710
example a Python meetup and a teacher

00:20:32,559 --> 00:20:38,230
Meetup might work together to co-lead an

00:20:35,710 --> 00:20:44,290
hour of code during computer science

00:20:38,230 --> 00:20:46,510
education week thank you so much do we

00:20:44,290 --> 00:20:52,500
have any time for questions I've time

00:20:46,510 --> 00:20:55,500
for maybe one or two questions oh great

00:20:52,500 --> 00:20:55,500
yes

00:21:21,779 --> 00:21:27,809
I usually switch kids to a keyboard at

00:21:25,019 --> 00:21:30,749
second grade and that's usually because

00:21:27,809 --> 00:21:33,840
they don't have a mouse they only have a

00:21:30,749 --> 00:21:36,690
second yes they only have a trackpad and

00:21:33,840 --> 00:21:38,999
the trackpad is even harder than the

00:21:36,690 --> 00:21:42,419
keyboard especially when they're

00:21:38,999 --> 00:21:46,229
developing fine motor skills there's an

00:21:42,419 --> 00:21:48,960
app called scratch jr. now for preschool

00:21:46,229 --> 00:21:52,169
through first grade and there's also

00:21:48,960 --> 00:21:56,070
robots that can be coded by putting

00:21:52,169 --> 00:22:15,599
together physical blocks that are really

00:21:56,070 --> 00:22:17,969
great for young kids yes so every

00:22:15,599 --> 00:22:20,969
teacher I work with that is an issue

00:22:17,969 --> 00:22:23,969
that will happen wherever you are so the

00:22:20,969 --> 00:22:26,999
first thing is to proactively and

00:22:23,969 --> 00:22:28,710
explicitly teach them what to do when

00:22:26,999 --> 00:22:32,399
they don't know what to do or when they

00:22:28,710 --> 00:22:34,979
get stuck I also part of my research is

00:22:32,399 --> 00:22:38,009
in special education so I also like to

00:22:34,979 --> 00:22:41,159
do things like provide sentence starters

00:22:38,009 --> 00:22:42,929
for asking for help so sometimes

00:22:41,159 --> 00:22:45,749
students don't know how to ask their

00:22:42,929 --> 00:22:49,019
friend for help they just say it's not

00:22:45,749 --> 00:22:52,289
working right so I give them sentence

00:22:49,019 --> 00:22:57,509
starters like my program I want my

00:22:52,289 --> 00:23:01,469
program to right now my program is right

00:22:57,509 --> 00:23:04,259
those sorts of supports and then I have

00:23:01,469 --> 00:23:07,259
a protocol that I call walk the room I

00:23:04,259 --> 00:23:09,839
walk a pattern I show the kids the

00:23:07,259 --> 00:23:12,359
pattern and I don't deviate from the

00:23:09,839 --> 00:23:15,749
pattern no matter what I spend one

00:23:12,359 --> 00:23:17,999
minute or less with each kid if I can't

00:23:15,749 --> 00:23:20,729
solve their problem in one minute then I

00:23:17,999 --> 00:23:23,339
give them a specific problem solving

00:23:20,729 --> 00:23:25,919
task and check back in on them when I

00:23:23,339 --> 00:23:28,799
come around this way I don't spend my

00:23:25,919 --> 00:23:30,809
entire class time with maybe four or

00:23:28,799 --> 00:23:33,749
five kids that are really struggling and

00:23:30,809 --> 00:23:35,170
never get to help one of the kids in the

00:23:33,749 --> 00:23:38,940
middle and to those

00:23:35,170 --> 00:23:38,940
that really needs to be pushed forward

00:23:58,830 --> 00:24:10,840
right yes so all of my curriculum will

00:24:08,530 --> 00:24:13,450
be open source through Cornell Tech

00:24:10,840 --> 00:24:17,640
everything we do is open source with a

00:24:13,450 --> 00:24:21,370
commitment impacting k-12 CS education

00:24:17,640 --> 00:24:25,020
so right now we have a pilot database

00:24:21,370 --> 00:24:27,580
and that will be public at some point

00:24:25,020 --> 00:24:30,070
but I'm also happy for you to email me

00:24:27,580 --> 00:24:32,920
it is hard for parents to get into a lot

00:24:30,070 --> 00:24:35,290
of schools one thing that's really

00:24:32,920 --> 00:24:38,460
important as a parent is advocating to

00:24:35,290 --> 00:24:41,200
the principal how important it is to you

00:24:38,460 --> 00:24:43,810
because a lot of principals don't

00:24:41,200 --> 00:24:46,630
realize Google did research that they

00:24:43,810 --> 00:24:50,830
published earlier this year that showed

00:24:46,630 --> 00:24:52,870
that parents valued CS very highly but

00:24:50,830 --> 00:24:57,040
principals were completely unaware of

00:24:52,870 --> 00:24:59,920
that and did not value it in general so

00:24:57,040 --> 00:25:04,830
letting them know that will kicks could

00:24:59,920 --> 00:25:04,830
hopefully kickstart some kind of program

00:25:09,730 --> 00:25:13,170
oh yeah

00:25:20,140 --> 00:25:26,800
there are lots of objections things like

00:25:23,280 --> 00:25:29,590
you know my kids don't have time they

00:25:26,800 --> 00:25:31,690
just have to pass this math exam or

00:25:29,590 --> 00:25:33,760
they're not going to get into you know a

00:25:31,690 --> 00:25:36,460
middle school or a high school and I

00:25:33,760 --> 00:25:39,870
don't mean like a prep school I mean a

00:25:36,460 --> 00:25:44,350
school that they can learn something so

00:25:39,870 --> 00:25:46,360
it is one of the biggest challenges is

00:25:44,350 --> 00:25:49,110
time during the day

00:25:46,360 --> 00:25:52,450
another thing is school don't have

00:25:49,110 --> 00:25:55,090
funding a lot of times to bring in these

00:25:52,450 --> 00:25:58,360
projects like the hands-on stuff is

00:25:55,090 --> 00:26:00,490
really engaging well that's something

00:25:58,360 --> 00:26:03,810
schools can get computers but they can't

00:26:00,490 --> 00:26:09,790
get a pack of robots or circuit boards

00:26:03,810 --> 00:26:12,310
things like that and then also just you

00:26:09,790 --> 00:26:15,040
know some people think it's not

00:26:12,310 --> 00:26:18,010
important or they're worried that it

00:26:15,040 --> 00:26:20,410
might displace arts things like that I

00:26:18,010 --> 00:26:23,020
would love to see it integrated into art

00:26:20,410 --> 00:26:27,340
we're doing some a textiles in an art

00:26:23,020 --> 00:26:32,220
class coming up so those are those are

00:26:27,340 --> 00:26:32,220
some common ones yes

00:26:38,390 --> 00:26:45,050
so not much yet um there hasn't been

00:26:42,710 --> 00:26:48,500
much there is a great need for research

00:26:45,050 --> 00:26:51,320
in this area computational thinking is a

00:26:48,500 --> 00:26:53,270
very big deal and it's very trendy but

00:26:51,320 --> 00:26:56,690
we don't have enough research yet to

00:26:53,270 --> 00:26:59,120
show that it improves math scores and

00:26:56,690 --> 00:27:02,060
this is also something at Cornell Tech

00:26:59,120 --> 00:27:04,490
we also do education research but it's

00:27:02,060 --> 00:27:06,920
very difficult to do research in schools

00:27:04,490 --> 00:27:08,750
because they don't really know the

00:27:06,920 --> 00:27:11,930
purpose it's hard to have a stranger

00:27:08,750 --> 00:27:16,550
come in and observe so there are

00:27:11,930 --> 00:27:18,650
obstacles thank you very much I would

00:27:16,550 --> 00:27:22,160
love to continue this conversation

00:27:18,650 --> 00:27:26,239
please feel free to contact me

00:27:22,160 --> 00:27:26,239
[Applause]

00:30:24,230 --> 00:30:28,220
by kids and I just like to apologize in

00:30:26,510 --> 00:30:31,100
advance for my voice I'm just feeling I

00:30:28,220 --> 00:30:32,600
have a bit of a sore throat today so

00:30:31,100 --> 00:30:37,399
just pardon if I start coughing

00:30:32,600 --> 00:30:39,980
intermittently so here's just a brief

00:30:37,399 --> 00:30:42,649
overview of my talk so first I'll talk

00:30:39,980 --> 00:30:46,340
about what my experience was learning to

00:30:42,649 --> 00:30:48,740
program and then from from my experience

00:30:46,340 --> 00:30:50,750
I'll tell you what I learned and what

00:30:48,740 --> 00:30:52,850
how this information can be used to

00:30:50,750 --> 00:30:55,789
teach programming to younger kids like

00:30:52,850 --> 00:30:58,340
from elementary through middle school

00:30:55,789 --> 00:31:01,370
and then I'll talk about what to talk

00:30:58,340 --> 00:31:01,789
about teaching programming to high

00:31:01,370 --> 00:31:04,250
schoolers

00:31:01,789 --> 00:31:06,980
and in the end all this and I'll end it

00:31:04,250 --> 00:31:08,809
with a brief summary so a little bit

00:31:06,980 --> 00:31:12,289
about me I'm a high school junior right

00:31:08,809 --> 00:31:16,039
now and I program in Python Java NAR and

00:31:12,289 --> 00:31:17,389
obviously Python - my favorite and my

00:31:16,039 --> 00:31:19,399
current interests include machine

00:31:17,389 --> 00:31:22,789
learning data science button buy

00:31:19,399 --> 00:31:26,169
informatics and I I teach programming at

00:31:22,789 --> 00:31:29,360
my local community center once a month

00:31:26,169 --> 00:31:32,299
so first let's start off with my

00:31:29,360 --> 00:31:35,659
experience programming so I started

00:31:32,299 --> 00:31:37,370
programming in elementary school and my

00:31:35,659 --> 00:31:39,980
first language is scratch I'm pretty

00:31:37,370 --> 00:31:41,809
sure you've heard of scratch it's a very

00:31:39,980 --> 00:31:44,899
simple drag-and-drop programming

00:31:41,809 --> 00:31:46,399
language with a visual air face so this

00:31:44,899 --> 00:31:50,350
is what the interface looks like so in

00:31:46,399 --> 00:31:53,029
the right right right side you have the

00:31:50,350 --> 00:31:55,010
visual interface so you can control your

00:31:53,029 --> 00:31:59,059
actors or sprites as they're called in

00:31:55,010 --> 00:32:00,799
scratch and on the left hand side you

00:31:59,059 --> 00:32:04,970
have all the drag-and-drop blocks which

00:32:00,799 --> 00:32:07,909
control your actors and this is for for

00:32:04,970 --> 00:32:09,620
younger kids I really I really like

00:32:07,909 --> 00:32:13,190
using scratch or any drag-and-drop

00:32:09,620 --> 00:32:14,899
language because first of all it's it's

00:32:13,190 --> 00:32:17,809
visual and for younger kids especially

00:32:14,899 --> 00:32:21,380
the visual aspect is very important as

00:32:17,809 --> 00:32:23,299
they can see what's going on see get

00:32:21,380 --> 00:32:26,240
visual feedback from their code and see

00:32:23,299 --> 00:32:28,370
what's going on and also you can't

00:32:26,240 --> 00:32:31,130
really make any syntax errors using

00:32:28,370 --> 00:32:34,580
scratch because only certain blocks can

00:32:31,130 --> 00:32:35,870
only go in certain places and if you try

00:32:34,580 --> 00:32:37,880
to put something which doesn't belong

00:32:35,870 --> 00:32:39,650
it'll just automatically reject

00:32:37,880 --> 00:32:42,530
that so you can't really make any

00:32:39,650 --> 00:32:45,020
mistakes but in the chance that you do

00:32:42,530 --> 00:32:47,060
make a mistake in putting a wrong the

00:32:45,020 --> 00:32:50,120
wrong value for a block you'll see your

00:32:47,060 --> 00:32:52,370
error visually and like if you code the

00:32:50,120 --> 00:32:54,230
fish the big green fish in the middle

00:32:52,370 --> 00:32:55,880
and correctly you'll see oh that's not

00:32:54,230 --> 00:32:59,990
doing what I want it to do and then you

00:32:55,880 --> 00:33:02,030
can easily correct it from there so then

00:32:59,990 --> 00:33:03,710
at age fourteen I decided to make jump

00:33:02,030 --> 00:33:07,490
from a visual programming language like

00:33:03,710 --> 00:33:09,380
scratch to a PCS which is a V computer

00:33:07,490 --> 00:33:13,820
science course which was online and

00:33:09,380 --> 00:33:18,440
taught in Java and for a 14-year old I

00:33:13,820 --> 00:33:20,630
had to go from this to this so uh first

00:33:18,440 --> 00:33:22,880
of all as you can probably tell there

00:33:20,630 --> 00:33:25,100
are a ton of differences between a Java

00:33:22,880 --> 00:33:28,610
and scratch so first of all there's no

00:33:25,100 --> 00:33:30,710
visual interface so for a kid I really

00:33:28,610 --> 00:33:32,960
like the visual aspect of scratch and

00:33:30,710 --> 00:33:35,960
that really helped me understand what my

00:33:32,960 --> 00:33:38,000
code was doing but in Java since it's a

00:33:35,960 --> 00:33:40,400
more traditional text based programming

00:33:38,000 --> 00:33:42,020
language you couldn't really see what

00:33:40,400 --> 00:33:45,320
was going on with your code you would

00:33:42,020 --> 00:33:47,810
just compile it run and then see what

00:33:45,320 --> 00:33:50,300
the output gave you in the bottom and on

00:33:47,810 --> 00:33:52,040
top of that if you made an error you

00:33:50,300 --> 00:33:55,940
would you would compile it run it and

00:33:52,040 --> 00:33:58,520
then the the Java then Java would tell

00:33:55,940 --> 00:34:00,500
you that hey you missing a semicolon or

00:33:58,520 --> 00:34:02,410
you forgot a bracket and I and I didn't

00:34:00,500 --> 00:34:05,210
like that I actually I preferred it when

00:34:02,410 --> 00:34:07,130
it would not it would prevent you from

00:34:05,210 --> 00:34:09,710
creating the error in the first place

00:34:07,130 --> 00:34:12,470
like in scratch how you just couldn't

00:34:09,710 --> 00:34:13,970
drag a block to a certain place but in

00:34:12,470 --> 00:34:16,250
Java you could do whatever the heck you

00:34:13,970 --> 00:34:18,679
wanted and then and then only after you

00:34:16,250 --> 00:34:20,210
compiled it after only after you

00:34:18,679 --> 00:34:23,210
compiled it then it would give you

00:34:20,210 --> 00:34:26,840
errors and I that was the aspect of

00:34:23,210 --> 00:34:31,820
learning in turf text-based languages

00:34:26,840 --> 00:34:33,950
which I really disliked so I that gave

00:34:31,820 --> 00:34:35,389
me a real the the whole Java experience

00:34:33,950 --> 00:34:36,950
gave me a really sour taste in my mouth

00:34:35,389 --> 00:34:38,899
with programming in general in general

00:34:36,950 --> 00:34:40,610
so I just didn't code for like a year

00:34:38,899 --> 00:34:42,320
and then fast forward to when I'm in

00:34:40,610 --> 00:34:44,899
high school I have nothing to do for the

00:34:42,320 --> 00:34:47,480
summer so I just I just decided to pick

00:34:44,899 --> 00:34:49,010
up Python and the way I learned Python

00:34:47,480 --> 00:34:50,540
was I didn't really take any courses I

00:34:49,010 --> 00:34:51,890
just looked on YouTube Stack Overflow

00:34:50,540 --> 00:34:54,320
was my best friend

00:34:51,890 --> 00:34:57,050
I looked through code Academy which is a

00:34:54,320 --> 00:34:59,450
interactive coding interactive coding

00:34:57,050 --> 00:35:03,710
website and yeah pretty much

00:34:59,450 --> 00:35:06,260
I just self studied all of all of Python

00:35:03,710 --> 00:35:09,770
and because this day python is my

00:35:06,260 --> 00:35:12,710
favorite and I have never stopped so

00:35:09,770 --> 00:35:14,300
from my experience there was one major

00:35:12,710 --> 00:35:16,250
problem for me and that was that I

00:35:14,300 --> 00:35:18,320
didn't learn what I wanted to learn for

00:35:16,250 --> 00:35:20,510
for example when when I was doing

00:35:18,320 --> 00:35:22,550
scratch if I wanted to make pac-man I

00:35:20,510 --> 00:35:25,430
could just draw a yellow circle create a

00:35:22,550 --> 00:35:27,590
maze make it so that if on if touching

00:35:25,430 --> 00:35:29,030
the maze bounced off and then could have

00:35:27,590 --> 00:35:31,070
done a million of those little dots for

00:35:29,030 --> 00:35:33,260
him to eat and then I could I could be

00:35:31,070 --> 00:35:35,810
done and play that all day long but with

00:35:33,260 --> 00:35:38,450
Java when I was taking the course it was

00:35:35,810 --> 00:35:40,040
more of a fixed thing like okay here's

00:35:38,450 --> 00:35:42,770
an assignment where you have to

00:35:40,040 --> 00:35:45,320
calculate the change after you pay

00:35:42,770 --> 00:35:47,060
someone from a register and like who

00:35:45,320 --> 00:35:51,070
cares I don't even have a credit card so

00:35:47,060 --> 00:35:53,780
I found that to be extremely boring and

00:35:51,070 --> 00:35:57,650
the main so the main problem was that I

00:35:53,780 --> 00:35:59,900
didn't learn what I wanted to so now

00:35:57,650 --> 00:36:02,530
I'll go on to how some of this can be

00:35:59,900 --> 00:36:05,330
used to teach younger kids how to code

00:36:02,530 --> 00:36:07,220
so first I would recommend a

00:36:05,330 --> 00:36:08,870
drag-and-drop language like scratch

00:36:07,220 --> 00:36:10,850
there's also another language called

00:36:08,870 --> 00:36:12,320
tinker which is basically scratch except

00:36:10,850 --> 00:36:14,750
it's web-based so you can save

00:36:12,320 --> 00:36:19,370
everything in the cloud it's awesome and

00:36:14,750 --> 00:36:23,270
then from there on based on what your

00:36:19,370 --> 00:36:26,240
student or child likes I just go into

00:36:23,270 --> 00:36:28,160
that field so after you're done with

00:36:26,240 --> 00:36:30,140
after you're done with scratch I would

00:36:28,160 --> 00:36:31,880
recommend going to Python because simply

00:36:30,140 --> 00:36:33,830
because it's really easy to use and it's

00:36:31,880 --> 00:36:36,440
very it's very friendly especially for

00:36:33,830 --> 00:36:41,030
kids Java for me wasn't a very friendly

00:36:36,440 --> 00:36:43,370
first programming language so for me so

00:36:41,030 --> 00:36:45,290
I would recommend using Python as the

00:36:43,370 --> 00:36:48,190
first programming language and then from

00:36:45,290 --> 00:36:50,870
there on once he he or she has mastered

00:36:48,190 --> 00:36:53,570
programming in Python he or she can

00:36:50,870 --> 00:36:56,300
continue using Python or move on to or

00:36:53,570 --> 00:36:58,190
depending on what he/she likes then you

00:36:56,300 --> 00:37:00,500
can move on to other languages like if

00:36:58,190 --> 00:37:02,360
they like the visual aspect and I really

00:37:00,500 --> 00:37:04,610
like using PI game for example maybe

00:37:02,360 --> 00:37:04,859
they can create more video games you

00:37:04,610 --> 00:37:09,930
need

00:37:04,859 --> 00:37:13,319
or design graphics you do HTML CSS etc

00:37:09,930 --> 00:37:15,890
or they can stick with Python or if

00:37:13,319 --> 00:37:18,450
they're more interested in like in

00:37:15,890 --> 00:37:20,900
competitive programming like Java and C

00:37:18,450 --> 00:37:23,369
are very popular for those so they can

00:37:20,900 --> 00:37:25,709
essentially choose your own path and

00:37:23,369 --> 00:37:27,719
whatever your student likes I'd

00:37:25,709 --> 00:37:31,709
recommend just go with the language

00:37:27,719 --> 00:37:33,869
which best suits them so now let's move

00:37:31,709 --> 00:37:38,249
on to teams something I'm more familiar

00:37:33,869 --> 00:37:41,219
with so as of now in schools there are

00:37:38,249 --> 00:37:43,709
two there are two computer science

00:37:41,219 --> 00:37:46,799
courses there's AP Computer Science a

00:37:43,709 --> 00:37:49,589
which is taught in Java and ap computer

00:37:46,799 --> 00:37:52,410
science principles or ap CSP which is a

00:37:49,589 --> 00:37:54,119
more recent of course which was just

00:37:52,410 --> 00:37:56,400
introduced by the College Board just

00:37:54,119 --> 00:37:58,559
like a couple a couple years ago I think

00:37:56,400 --> 00:38:01,979
and it's an AP just means Advanced

00:37:58,559 --> 00:38:04,170
Placement it's just something it's you

00:38:01,979 --> 00:38:05,519
could these courses can be you can take

00:38:04,170 --> 00:38:07,529
these courses and then you can earn

00:38:05,519 --> 00:38:09,569
college credits so you can skip an

00:38:07,529 --> 00:38:13,049
introductory programming class in

00:38:09,569 --> 00:38:18,089
college so I'll briefly go over what

00:38:13,049 --> 00:38:22,109
each of these courses entail so you have

00:38:18,089 --> 00:38:24,469
AP Computer Science a or just a pcs the

00:38:22,109 --> 00:38:27,509
nice thing about this is that it teaches

00:38:24,469 --> 00:38:30,539
important computer science concepts like

00:38:27,509 --> 00:38:33,719
like Big O recursion iteration data

00:38:30,539 --> 00:38:35,099
structures etc however one of the

00:38:33,719 --> 00:38:37,229
problems with this course is that it's

00:38:35,099 --> 00:38:39,029
very simple so if you want to do well on

00:38:37,229 --> 00:38:40,890
many of the tests you have to be

00:38:39,029 --> 00:38:44,849
well-versed in java and many of the

00:38:40,890 --> 00:38:46,920
tests are like are simply a java are

00:38:44,849 --> 00:38:49,019
very syntactical and there's also very

00:38:46,920 --> 00:38:50,609
few projects so basically what it is

00:38:49,019 --> 00:38:53,400
you'd go into class the teacher would

00:38:50,609 --> 00:38:55,019
explain explain briefly a concept and

00:38:53,400 --> 00:38:57,449
then you'd be given an assignment for

00:38:55,019 --> 00:38:59,729
the day and then you just be expected to

00:38:57,449 --> 00:39:01,650
turn that in by the end of the day so

00:38:59,729 --> 00:39:06,569
there's no long term project it's just a

00:39:01,650 --> 00:39:08,880
project on a daily daily basis AP

00:39:06,569 --> 00:39:11,759
computer science principles or AP CSP

00:39:08,880 --> 00:39:13,380
the more recent course the nice thing

00:39:11,759 --> 00:39:15,690
about is that it's language agnostic so

00:39:13,380 --> 00:39:17,910
it's not in Java but it uses

00:39:15,690 --> 00:39:20,280
drag-and-drop it's very

00:39:17,910 --> 00:39:23,190
I level like it doesn't teach and most

00:39:20,280 --> 00:39:25,770
of what job apcs teaches like Big O

00:39:23,190 --> 00:39:27,960
recursion etc but the good thing is that

00:39:25,770 --> 00:39:31,289
it's more project-based so instead of

00:39:27,960 --> 00:39:35,849
having daily daily assignments you're

00:39:31,289 --> 00:39:37,349
you have more long-term projects so what

00:39:35,849 --> 00:39:38,940
what one of the course requirements is

00:39:37,349 --> 00:39:41,549
that you complete a few long term

00:39:38,940 --> 00:39:46,730
projects and then submit that to the

00:39:41,549 --> 00:39:49,740
graders of the college board and you and

00:39:46,730 --> 00:39:52,890
based on how good your projects is broad

00:39:49,740 --> 00:39:55,940
projects are in terms of complexity and

00:39:52,890 --> 00:40:00,150
how innovative they are you'll be scored

00:39:55,940 --> 00:40:04,799
so here's just a brief side-by-side

00:40:00,150 --> 00:40:07,319
comparison so what would an ideal course

00:40:04,799 --> 00:40:12,210
be well I think it should take aspects

00:40:07,319 --> 00:40:15,140
of both APCs and APCs piso well I spoke

00:40:12,210 --> 00:40:18,660
with many of my AP Computer Science

00:40:15,140 --> 00:40:20,520
classmates and they thought that they

00:40:18,660 --> 00:40:23,069
didn't like it that the course was all

00:40:20,520 --> 00:40:24,900
in Java they thought they would rather

00:40:23,069 --> 00:40:29,309
have it in other languages like Python

00:40:24,900 --> 00:40:32,460
Java and C and a whole other bunch of

00:40:29,309 --> 00:40:34,650
languages and specifically that the unit

00:40:32,460 --> 00:40:37,589
which is being taught like data science

00:40:34,650 --> 00:40:41,369
or Big O or something that that unit

00:40:37,589 --> 00:40:43,740
should that the programming language

00:40:41,369 --> 00:40:46,559
which it is best at should be used for

00:40:43,740 --> 00:40:48,420
that unit so maybe object-oriented you

00:40:46,559 --> 00:40:50,190
could if you're doing a lesson on

00:40:48,420 --> 00:40:52,740
object-oriented you could use Java or

00:40:50,190 --> 00:40:54,990
Python because pythons also good with

00:40:52,740 --> 00:40:57,390
that there should be more projects like

00:40:54,990 --> 00:41:00,059
in AP computer science principles less

00:40:57,390 --> 00:41:03,150
syntax tests and it should also teach

00:41:00,059 --> 00:41:07,829
important computer science concepts like

00:41:03,150 --> 00:41:10,770
in APCs ok so now let's put yourselves

00:41:07,829 --> 00:41:13,529
in the mind of a beginning coder of a

00:41:10,770 --> 00:41:16,440
kid and let's go through what a kid

00:41:13,529 --> 00:41:21,799
thinks when it's when he or she sees

00:41:16,440 --> 00:41:24,510
code like this so pretend you are a

00:41:21,799 --> 00:41:27,150
beginning programmer and you don't have

00:41:24,510 --> 00:41:29,539
very much experience if at all so I have

00:41:27,150 --> 00:41:31,470
here three examples you have a simple

00:41:29,539 --> 00:41:34,200
print hello world

00:41:31,470 --> 00:41:36,060
a stepping through a collection and and

00:41:34,200 --> 00:41:37,800
creating a simple function just to

00:41:36,060 --> 00:41:40,859
return the square of a number

00:41:37,800 --> 00:41:43,080
so the nice thing about Python is that

00:41:40,859 --> 00:41:45,869
it's very readable and it's very easy to

00:41:43,080 --> 00:41:48,810
understand so if when a kid sees print

00:41:45,869 --> 00:41:50,250
hello world it's it's the Python it says

00:41:48,810 --> 00:41:52,770
exactly what it's supposed to do just

00:41:50,250 --> 00:41:54,660
say hello world and when you're stepping

00:41:52,770 --> 00:41:56,880
through a collection you just print each

00:41:54,660 --> 00:42:00,270
element in that collection when you're

00:41:56,880 --> 00:42:03,030
defining a function to a square a number

00:42:00,270 --> 00:42:06,960
it just says return the number times

00:42:03,030 --> 00:42:09,720
itself so it's very easy to read if we

00:42:06,960 --> 00:42:11,340
look at something like Java I'm doing

00:42:09,720 --> 00:42:13,440
the same thing except a kid's gonna

00:42:11,340 --> 00:42:15,900
wonder why what is what does public

00:42:13,440 --> 00:42:18,660
class main mean and remember this is but

00:42:15,900 --> 00:42:20,490
this is a beginning programmer with very

00:42:18,660 --> 00:42:22,170
little experience so the kids going to

00:42:20,490 --> 00:42:24,450
wonder what the heck is a public class

00:42:22,170 --> 00:42:28,619
main what does void mean what is static

00:42:24,450 --> 00:42:29,960
what is args what what is the kids going

00:42:28,619 --> 00:42:33,840
to wonder what all that extraneous

00:42:29,960 --> 00:42:37,320
extraneous code is so for beginning

00:42:33,840 --> 00:42:39,869
programmers since Java has a lot of

00:42:37,320 --> 00:42:41,970
extra stuff which hasn't been explained

00:42:39,869 --> 00:42:44,160
yet you're essentially leaving the kid

00:42:41,970 --> 00:42:45,930
on you're leaving the kid hanging like

00:42:44,160 --> 00:42:47,760
you'll you're gonna have to say oh I'll

00:42:45,930 --> 00:42:49,530
explain what main is I'm going to

00:42:47,760 --> 00:42:52,109
explain what classes are in a later

00:42:49,530 --> 00:42:53,339
section so you leave the kid hanging so

00:42:52,109 --> 00:42:55,260
that's not a that's not an ideal

00:42:53,339 --> 00:43:01,410
situation to be in

00:42:55,260 --> 00:43:04,290
ok so now let's say you've the student

00:43:01,410 --> 00:43:07,230
or kid has progressed more in

00:43:04,290 --> 00:43:10,410
programming and now you want to explain

00:43:07,230 --> 00:43:12,660
what a private and public functions and

00:43:10,410 --> 00:43:15,720
classes are so this here we're defining

00:43:12,660 --> 00:43:18,450
a a private function within the class

00:43:15,720 --> 00:43:22,680
something called say hello and it just

00:43:18,450 --> 00:43:26,010
prints hello so in Python since it's

00:43:22,680 --> 00:43:28,200
very simple you just have there's no

00:43:26,010 --> 00:43:31,080
like you don't explicitly say like

00:43:28,200 --> 00:43:32,490
public def public say hello and said

00:43:31,080 --> 00:43:34,950
what you do is you just put two

00:43:32,490 --> 00:43:38,550
underscores right before the function

00:43:34,950 --> 00:43:39,089
and but if you look at something like

00:43:38,550 --> 00:43:42,089
Java

00:43:39,089 --> 00:43:44,880
I think the Java does this a little bit

00:43:42,089 --> 00:43:47,700
better because since it explicitly says

00:43:44,880 --> 00:43:51,060
avoid say hello since it explicitly says

00:43:47,700 --> 00:43:54,720
private private say hello it better

00:43:51,060 --> 00:43:57,030
explains that this function can cannot

00:43:54,720 --> 00:43:59,490
be called outside of this because it

00:43:57,030 --> 00:44:01,470
says private so I think what we can take

00:43:59,490 --> 00:44:03,900
away from this is that you should use

00:44:01,470 --> 00:44:07,340
the programming language with which best

00:44:03,900 --> 00:44:09,900
X which is the most explicit when

00:44:07,340 --> 00:44:12,180
defining functions are doing anything in

00:44:09,900 --> 00:44:14,400
general and you should do it the one

00:44:12,180 --> 00:44:17,550
which does it the most succinctly as

00:44:14,400 --> 00:44:20,940
well so let's look at one more example

00:44:17,550 --> 00:44:23,730
but not so much as not so much syntax

00:44:20,940 --> 00:44:26,700
but rather a CS a computer science

00:44:23,730 --> 00:44:29,250
concept so here I'm just creating a java

00:44:26,700 --> 00:44:32,550
array of length 5 and I'm just putting

00:44:29,250 --> 00:44:33,690
the same value 95 5 times so quick

00:44:32,550 --> 00:44:35,250
question I know this is Python

00:44:33,690 --> 00:44:37,940
conference but what happens if you do

00:44:35,250 --> 00:44:45,060
the first line system dot out dot print

00:44:37,940 --> 00:44:49,770
data so what that does is it prints it

00:44:45,060 --> 00:44:51,630
prints a it prints the ID for that for

00:44:49,770 --> 00:44:54,000
that array data so it'll print something

00:44:51,630 --> 00:44:57,450
like bracket I at and then a random

00:44:54,000 --> 00:45:00,210
jumble of numbers and letters so but

00:44:57,450 --> 00:45:02,910
when you do when you execute the second

00:45:00,210 --> 00:45:06,090
line which is arrays dot to string a

00:45:02,910 --> 00:45:10,490
data that actually prints out 95 so I

00:45:06,090 --> 00:45:12,870
think in this case Java explains that

00:45:10,490 --> 00:45:17,880
variables are data does not actually

00:45:12,870 --> 00:45:20,970
contain 95 5 x instead it just has the

00:45:17,880 --> 00:45:23,910
hash ID for data which is stored

00:45:20,970 --> 00:45:26,550
somewhere in memory and you have to call

00:45:23,910 --> 00:45:29,670
the to string method for data since

00:45:26,550 --> 00:45:32,700
arrays don't override the object to

00:45:29,670 --> 00:45:35,280
string method but and if you look at

00:45:32,700 --> 00:45:37,530
python this would be a really good

00:45:35,280 --> 00:45:39,930
example for something for a beginning

00:45:37,530 --> 00:45:42,210
programmer like if you're just creating

00:45:39,930 --> 00:45:44,970
a tuple with the same values and you

00:45:42,210 --> 00:45:48,750
print it and they'll return 95 and it

00:45:44,970 --> 00:45:51,780
doesn't return the the hash ID so I

00:45:48,750 --> 00:45:55,740
think in this in this case when

00:45:51,780 --> 00:45:57,450
explaining the concepts of how data or

00:45:55,740 --> 00:45:58,890
how a variables are stored

00:45:57,450 --> 00:46:01,230
I think Java does

00:45:58,890 --> 00:46:03,690
better job than Python so if you just

00:46:01,230 --> 00:46:06,299
look at all of these examples together I

00:46:03,690 --> 00:46:09,210
would say just use the language which

00:46:06,299 --> 00:46:11,789
just which best exemplifies whatever

00:46:09,210 --> 00:46:13,789
you're trying to teach so if you're just

00:46:11,789 --> 00:46:16,380
beginning if you're starting with a

00:46:13,789 --> 00:46:19,049
beginning programmer use Python if

00:46:16,380 --> 00:46:21,809
you're doing data science use Python if

00:46:19,049 --> 00:46:23,640
you want to do object oriented on is

00:46:21,809 --> 00:46:26,220
good but maybe you want to use a mix of

00:46:23,640 --> 00:46:31,829
Python and Java to convey what your

00:46:26,220 --> 00:46:35,700
whatever you're trying to teach so a in

00:46:31,829 --> 00:46:38,849
summary just whatever your student wants

00:46:35,700 --> 00:46:40,950
to be taught just explain what just use

00:46:38,849 --> 00:46:43,730
the language which best exemplifies it

00:46:40,950 --> 00:46:46,170
and keep it project-based because a

00:46:43,730 --> 00:46:49,589
student gets really motivated when they

00:46:46,170 --> 00:46:51,210
see a long-term project complete like I

00:46:49,589 --> 00:46:53,730
know for me it's a big motivation

00:46:51,210 --> 00:46:55,260
whenever I complete my whenever I

00:46:53,730 --> 00:46:58,440
complete a big project and it's on

00:46:55,260 --> 00:47:02,490
github and I tweet about it so I make it

00:46:58,440 --> 00:47:05,849
gets me really motivated and I spent and

00:47:02,490 --> 00:47:09,420
I think the programming language which

00:47:05,849 --> 00:47:11,160
you used to teach the CS concept you

00:47:09,420 --> 00:47:13,500
should have a visual understanding so

00:47:11,160 --> 00:47:15,390
use a lot of print statements to see

00:47:13,500 --> 00:47:17,279
what the heck is going on in your code

00:47:15,390 --> 00:47:19,799
especially since these interpreted

00:47:17,279 --> 00:47:22,049
languages don't don't have a visual

00:47:19,799 --> 00:47:24,359
interface built in so just use a lot of

00:47:22,049 --> 00:47:27,029
print statements that's how I D bug my

00:47:24,359 --> 00:47:29,490
code sometimes so whenever you see

00:47:27,029 --> 00:47:31,650
something printed to your console it

00:47:29,490 --> 00:47:36,049
gives you a better understanding of what

00:47:31,650 --> 00:47:36,049
is going on yeah thank you very much

00:47:40,249 --> 00:47:44,179
yeah I'll take any questions

00:47:49,640 --> 00:48:01,749
oh I'm in the bay area so I just go once

00:47:57,680 --> 00:48:01,749
a month to my city community center

00:48:33,230 --> 00:48:48,960
yeah yeah oh because I'm currently a

00:48:43,369 --> 00:48:52,020
Java is used for APCs so oh so because

00:48:48,960 --> 00:48:53,910
they're more concerned with like I know

00:48:52,020 --> 00:48:56,869
Python is a bit different but I think

00:48:53,910 --> 00:49:00,599
because a lot of the a lot of these kids

00:48:56,869 --> 00:49:03,000
they will be coming from APCs background

00:49:00,599 --> 00:49:05,490
so they'll understand how like Java

00:49:03,000 --> 00:49:09,569
works in general so them I think I feel

00:49:05,490 --> 00:49:11,550
like they might get confused if they see

00:49:09,569 --> 00:49:15,569
how Python works although it is more

00:49:11,550 --> 00:49:16,770
readable but I would but I would say

00:49:15,569 --> 00:49:18,359
that they should start with Python

00:49:16,770 --> 00:49:21,560
instead of Java to begin with so they

00:49:18,359 --> 00:49:21,560
can understand it both ways yeah

00:49:31,520 --> 00:49:39,090
yeah so I we have like an emailing list

00:49:35,790 --> 00:49:41,700
so that they just they just email their

00:49:39,090 --> 00:49:48,840
questions are talking about like during

00:49:41,700 --> 00:49:51,300
the class or after oh no this is this is

00:49:48,840 --> 00:49:54,690
not assignment based I'll just teach

00:49:51,300 --> 00:49:58,350
I'll just have a concept which is taught

00:49:54,690 --> 00:50:01,110
for the meeting briefly and then the kid

00:49:58,350 --> 00:50:02,850
the students can go home try it out for

00:50:01,110 --> 00:50:04,650
themselves and then they can at the next

00:50:02,850 --> 00:50:06,150
meeting they can bring it back and then

00:50:04,650 --> 00:50:09,080
they can show to the rest of the

00:50:06,150 --> 00:50:09,080
students what they're doing

00:50:27,650 --> 00:50:33,479
[Applause]

00:50:45,270 --> 00:50:56,280
this fine gentleman can get it laptop

00:50:48,630 --> 00:51:09,090
all set up and it's going to wow you

00:50:56,280 --> 00:51:10,650
guys alright where's your look over here

00:51:09,090 --> 00:51:13,160
because you can see the screen and I'll

00:51:10,650 --> 00:51:13,160
show you exactly

00:52:13,119 --> 00:52:15,180
you

00:53:10,660 --> 00:53:21,960
oh god David

00:53:38,319 --> 00:53:42,829
hello everyone my name is Anne a I'm 11

00:53:42,319 --> 00:53:45,470
years old

00:53:42,829 --> 00:53:52,099
and my talk today is Python for grade

00:53:45,470 --> 00:53:54,260
school so a little bit about myself I'm

00:53:52,099 --> 00:53:57,200
a 5th grader and Chadbourne Elementary

00:53:54,260 --> 00:54:01,279
in Fremont California my hobbies are

00:53:57,200 --> 00:54:03,319
basketball reading so I like basketball

00:54:01,279 --> 00:54:05,390
I like to play basketball at school

00:54:03,319 --> 00:54:07,309
especially I like reading history books

00:54:05,390 --> 00:54:10,309
one of my favorite subject is history

00:54:07,309 --> 00:54:15,799
and I absolutely love playing video

00:54:10,309 --> 00:54:19,279
games um I called in I sometimes I got

00:54:15,799 --> 00:54:21,319
in Python JavaScript and some seed so

00:54:19,279 --> 00:54:24,770
currently I'm working on a tic-tac-toe

00:54:21,319 --> 00:54:26,809
in Python in C I wrote a program with my

00:54:24,770 --> 00:54:30,410
dad it calculates all the prime numbers

00:54:26,809 --> 00:54:32,599
until a certain digit and in JavaScript

00:54:30,410 --> 00:54:36,920
on code Academy I made a choice game

00:54:32,599 --> 00:54:37,579
which is like a yes or no game so let's

00:54:36,920 --> 00:54:41,210
cut to the chase

00:54:37,579 --> 00:54:43,430
she kids code in grade school my answer

00:54:41,210 --> 00:54:46,400
is yes kids have the potential and

00:54:43,430 --> 00:54:49,099
Python Python makes it easy in our

00:54:46,400 --> 00:54:53,569
school today with we do typing some

00:54:49,099 --> 00:54:57,890
coding and we look at Google Docs I want

00:54:53,569 --> 00:55:01,539
it I want just um we can learn something

00:54:57,890 --> 00:55:01,539
new by quoting in Python

00:55:01,690 --> 00:55:07,819
well why Python first of all Python is

00:55:05,390 --> 00:55:10,240
easy to understand since it is like

00:55:07,819 --> 00:55:13,250
English is easy to communicate

00:55:10,240 --> 00:55:15,799
second of all the Python editors are

00:55:13,250 --> 00:55:17,059
easy to access because there's so many

00:55:15,799 --> 00:55:19,690
and you don't have to download anything

00:55:17,059 --> 00:55:23,869
I especially have fun with the Jupiter

00:55:19,690 --> 00:55:25,339
Jupiter notebook I could save it I could

00:55:23,869 --> 00:55:26,059
say this by downloading it and come back

00:55:25,339 --> 00:55:29,450
easily

00:55:26,059 --> 00:55:35,420
third of all mom loved it she started Pi

00:55:29,450 --> 00:55:40,180
kids and teaches kids like me so this is

00:55:35,420 --> 00:55:40,180
my lesson plan so if I get this

00:55:41,810 --> 00:56:08,010
and so if I go next um so it's not

00:56:06,090 --> 00:56:11,940
working right now but my first lesson

00:56:08,010 --> 00:56:14,550
was called it was an introduction to

00:56:11,940 --> 00:56:17,640
Python so we watched a video by Khan

00:56:14,550 --> 00:56:19,320
Academy called what is programming this

00:56:17,640 --> 00:56:21,780
means that the could we learn that the

00:56:19,320 --> 00:56:24,480
computer is like an obedient pet it will

00:56:21,780 --> 00:56:26,040
do what it is told to do we started with

00:56:24,480 --> 00:56:29,490
basic fundamentals like the print

00:56:26,040 --> 00:56:31,680
command we use numbers by we can

00:56:29,490 --> 00:56:33,650
calculate numbers by simply inserting

00:56:31,680 --> 00:56:36,300
the numbers and operations like usual

00:56:33,650 --> 00:56:37,980
when I use the Python notebook I found

00:56:36,300 --> 00:56:43,520
out it also behaves like a calculator

00:56:37,980 --> 00:56:46,080
for example 343 times 16 is 5,000 488 I

00:56:43,520 --> 00:56:48,030
tried to understand what infinity would

00:56:46,080 --> 00:56:50,220
be like but I ran the command and the

00:56:48,030 --> 00:56:51,900
server hung up these are the first steps

00:56:50,220 --> 00:56:54,050
in order to understand the code in

00:56:51,900 --> 00:56:54,050
Python

00:57:23,980 --> 00:57:27,130
[Music]

00:57:38,470 --> 00:57:45,710
Sondra's continues so lesson two is

00:57:43,279 --> 00:57:47,869
called what's in a name so in this next

00:57:45,710 --> 00:57:50,480
lesson I learned that I not only do I

00:57:47,869 --> 00:57:52,819
can I multiple multiple I manipulative

00:57:50,480 --> 00:57:55,400
numbers but I can also manipulate words

00:57:52,819 --> 00:57:57,890
by using strings I can add and multiply

00:57:55,400 --> 00:57:59,720
words together I'm not sure what I can

00:57:57,890 --> 00:58:02,299
use it yet but I might I might be used

00:57:59,720 --> 00:58:03,470
to make banners for example I could just

00:58:02,299 --> 00:58:05,539
write happy Halloween

00:58:03,470 --> 00:58:10,999
times 200 and I could be using the

00:58:05,539 --> 00:58:12,650
Halloween Carnival lesson 3 this was one

00:58:10,999 --> 00:58:14,989
of my favorite lessons because it was

00:58:12,650 --> 00:58:16,960
called fun with art in this lesson we

00:58:14,989 --> 00:58:20,509
use the program called the PI sig link a

00:58:16,960 --> 00:58:24,559
pilot is a full port is a full part of

00:58:20,509 --> 00:58:26,599
Figment we learn how to use help which

00:58:24,559 --> 00:58:31,069
is which tells you how what's how to use

00:58:26,599 --> 00:58:32,450
something there what have been a picture

00:58:31,069 --> 00:58:36,670
on the right but we would have typed the

00:58:32,450 --> 00:58:36,670
word missile using a Star Wars launch

00:58:37,539 --> 00:58:42,980
lesson for colorful grids in this final

00:58:41,089 --> 00:58:45,680
lesson we learned about grids and

00:58:42,980 --> 00:58:47,989
ipython blocks grids are used to develop

00:58:45,680 --> 00:58:50,569
websites and designs which is why we

00:58:47,989 --> 00:58:52,519
learn to code them Python we looked up

00:58:50,569 --> 00:58:53,960
the hell for grids and documentation and

00:58:52,519 --> 00:58:56,480
figured out that we had to use block

00:58:53,960 --> 00:58:58,279
grid block word is a tool that that

00:58:56,480 --> 00:59:00,529
takes the size in the color of the grid

00:58:58,279 --> 00:59:01,819
it contains parameters that can be

00:59:00,529 --> 00:59:04,640
filled according to the coders

00:59:01,819 --> 00:59:06,640
satisfaction if you want a 10 x 10 grid

00:59:04,640 --> 00:59:09,140
the block word will help with that I

00:59:06,640 --> 00:59:17,059
want to make a chessboard with scripts I

00:59:09,140 --> 00:59:19,910
figure it'll take way too many loops um

00:59:17,059 --> 00:59:23,140
so there was supposed to be a demo but I

00:59:19,910 --> 00:59:23,140
couldn't put it on

00:59:31,740 --> 00:59:42,609
sorry about that obviously this is not

00:59:34,690 --> 00:59:45,569
he one too friendly and you can go to

00:59:42,609 --> 00:59:45,569
the Jupiter

01:00:03,090 --> 01:00:13,900
okay so we left off here so this was the

01:00:07,570 --> 01:00:16,120
Python reasons and this was um this was

01:00:13,900 --> 01:00:18,460
the main thing that was used in our

01:00:16,120 --> 01:00:20,980
lessons and my mom taught my friends and

01:00:18,460 --> 01:00:22,780
I so this is called a notebook viewer

01:00:20,980 --> 01:00:24,820
and it's based off of the Jupiter

01:00:22,780 --> 01:00:26,710
notebooks so this was our pikas

01:00:24,820 --> 01:00:33,940
curriculum anak as you can see all the

01:00:26,710 --> 01:00:39,340
classes are here so introduction and if

01:00:33,940 --> 01:00:41,020
I go back to so here was what it this is

01:00:39,340 --> 01:00:43,660
what a jupiter notebook viewer looks

01:00:41,020 --> 01:00:49,570
like so as you can see we use the Print

01:00:43,660 --> 01:00:53,590
command and we use help on print this

01:00:49,570 --> 01:00:56,440
was lesson two and so lesson three we

01:00:53,590 --> 01:01:01,030
created um the word missile using the

01:00:56,440 --> 01:01:02,950
Star Wars haunt I said and lesson 4 so

01:01:01,030 --> 01:01:06,820
at the top it shows the color picker and

01:01:02,950 --> 01:01:08,440
then the bottom shows a chess board so

01:01:06,820 --> 01:01:13,540
here was the demo I wanted to show you

01:01:08,440 --> 01:01:19,300
guys so if we go to this website so it

01:01:13,540 --> 01:01:21,250
started a notebook server it should be

01:01:19,300 --> 01:01:23,170
so this is what does your bitter home

01:01:21,250 --> 01:01:24,970
would look like so if I make a new

01:01:23,170 --> 01:01:28,890
notebook so I'm going to make a new

01:01:24,970 --> 01:01:28,890
notebook and it'll be called Python 3

01:01:31,620 --> 01:01:41,650
and it's loading and if I go so this is

01:01:38,440 --> 01:01:43,510
what the Jupiter editor looks like so

01:01:41,650 --> 01:01:45,700
over here we have the save checkpoint

01:01:43,510 --> 01:01:48,400
save and checkpoint so this is like when

01:01:45,700 --> 01:01:50,470
we save it this will add a new one of

01:01:48,400 --> 01:01:53,230
these inputs but this is called a cell

01:01:50,470 --> 01:01:56,770
in the Jupiter notebook this will be to

01:01:53,230 --> 01:01:59,130
delete a cell this is copy/paste this

01:01:56,770 --> 01:02:03,370
will be to move cells between each other

01:01:59,130 --> 01:02:06,400
this one is run stop and restart this

01:02:03,370 --> 01:02:09,940
restart the entire engine so I can just

01:02:06,400 --> 01:02:12,110
use normal commands like print and I can

01:02:09,940 --> 01:02:16,310
just save with sync normal things like

01:02:12,110 --> 01:02:18,470
hello world and it'll come when I press

01:02:16,310 --> 01:02:22,400
the Run button it will come as an output

01:02:18,470 --> 01:02:26,780
oh my did have something to show you

01:02:22,400 --> 01:02:30,860
guys it was a loop so it was we had a

01:02:26,780 --> 01:02:37,040
variable it was on my older laptop now

01:02:30,860 --> 01:02:43,760
but so if we did so River I used the

01:02:37,040 --> 01:02:46,550
example of a car and gas so a cart the C

01:02:43,760 --> 01:03:00,200
stands for the gas so excuse me a second

01:02:46,550 --> 01:03:02,090
when we create this so it would look

01:03:00,200 --> 01:03:05,510
something like this so we would have an

01:03:02,090 --> 01:03:09,170
if-else statement so that this would

01:03:05,510 --> 01:03:15,830
look like the gas meter so I'll just

01:03:09,170 --> 01:03:18,170
come back to this at the end our next

01:03:15,830 --> 01:03:20,930
steps in Python will be we want to learn

01:03:18,170 --> 01:03:22,760
more more concepts we'll create and

01:03:20,930 --> 01:03:25,730
share more notebooks and contribute to

01:03:22,760 --> 01:03:31,900
pockets I want to become a teaching

01:03:25,730 --> 01:03:34,610
assistant to fellow grade schoolers um

01:03:31,900 --> 01:03:37,820
we thanked the Python community Jupiter

01:03:34,610 --> 01:03:39,980
team i Python blocks and especially my

01:03:37,820 --> 01:03:41,300
mother helping this thank you and I hope

01:03:39,980 --> 01:03:44,080
you guys have a great time in a

01:03:41,300 --> 01:03:44,080
wonderful afternoon

01:03:50,440 --> 01:03:53,950
any questions

01:03:55,260 --> 01:03:57,950
yeah

01:04:14,569 --> 01:04:22,950
um so lies to children um so when we're

01:04:20,160 --> 01:04:52,829
we're getting in so like what do mean by

01:04:22,950 --> 01:04:55,609
lies the children like yeah okay also I

01:04:52,829 --> 01:04:58,230
would feel I would not feel like like

01:04:55,609 --> 01:05:00,270
what he called the trade but I would

01:04:58,230 --> 01:05:03,690
feel for like curious and I would go and

01:05:00,270 --> 01:05:05,700
probably google it or something so my

01:05:03,690 --> 01:05:07,710
friend asked me some sort of question

01:05:05,700 --> 01:05:10,349
like this he said if your teacher lies

01:05:07,710 --> 01:05:13,530
to you what would you do and I said that

01:05:10,349 --> 01:05:15,569
I said that um I would not feel betrayed

01:05:13,530 --> 01:05:17,790
I would sort of feel curious and I would

01:05:15,569 --> 01:05:19,740
ask other people with what they would

01:05:17,790 --> 01:05:21,809
feel and other people what they think

01:05:19,740 --> 01:05:23,309
about that topic so I'm sure everything

01:05:21,809 --> 01:05:31,309
in math standards I probably grew up a

01:05:23,309 --> 01:05:31,309
little more questions yes

01:05:33,320 --> 01:05:45,140
I wouldn't recommend probably um

01:05:42,130 --> 01:05:49,000
starting also I think I believe that

01:05:45,140 --> 01:05:51,350
Python is one of the basic languages um

01:05:49,000 --> 01:05:55,310
so they could start with Python

01:05:51,350 --> 01:05:57,710
essentially I I would I would look at

01:05:55,310 --> 01:06:00,110
YouTube videos to understand where I

01:05:57,710 --> 01:06:03,200
would get Google something up like what

01:06:00,110 --> 01:06:04,910
is this or what is that and once I

01:06:03,200 --> 01:06:08,210
understand the meaning and there is

01:06:04,910 --> 01:06:12,100
actually a a Jupiter page that gives you

01:06:08,210 --> 01:06:14,960
at the meaning of all of these all this

01:06:12,100 --> 01:06:20,650
curriculum and everything so that's what

01:06:14,960 --> 01:06:20,650
I would do more questions

01:06:39,110 --> 01:06:44,199
[Applause]

01:07:29,329 --> 01:07:32,329
yeah

01:07:56,859 --> 01:07:58,920
you

01:08:21,900 --> 01:08:34,620
all right so glad you came back we start

01:08:32,910 --> 01:08:37,020
off with a conversation about micro bit

01:08:34,620 --> 01:08:40,080
it's pretty awesome don't forget if you

01:08:37,020 --> 01:08:42,780
are a speaker today at the education

01:08:40,080 --> 01:08:45,060
summit we have a gift micro micro bit

01:08:42,780 --> 01:08:48,290
for you come see me to get yours and

01:08:45,060 --> 01:08:55,230
I'll turn the time over to Christian

01:08:48,290 --> 01:08:57,030
hello my name is Christian yeah okay

01:08:55,230 --> 01:08:59,720
I'm a board member of the European

01:08:57,030 --> 01:09:02,520
Society also your pine-sol organizer and

01:08:59,720 --> 01:09:04,440
I'm also a software and data carpet or

01:09:02,520 --> 01:09:07,940
instructor and today we're going to talk

01:09:04,440 --> 01:09:11,670
about project called micro bit polka

01:09:07,940 --> 01:09:14,280
before starting with this what's your

01:09:11,670 --> 01:09:18,270
plan for this summer because we have a

01:09:14,280 --> 01:09:20,520
conference and you are all invited so it

01:09:18,270 --> 01:09:24,750
will be during this July in in Italy in

01:09:20,520 --> 01:09:28,470
Rimini so yeah take your ticket so what

01:09:24,750 --> 01:09:31,260
about the agenda I will tell a little

01:09:28,470 --> 01:09:34,620
bit about the story of this project the

01:09:31,260 --> 01:09:39,330
idea behind the workshop the workshop

01:09:34,620 --> 01:09:41,250
that we had and some thoughts about my

01:09:39,330 --> 01:09:42,990
conclusion and about the future of this

01:09:41,250 --> 01:09:44,820
project and then I will have some

01:09:42,990 --> 01:09:48,000
questions for you and I hope some

01:09:44,820 --> 01:09:50,520
questions also for me so the story of

01:09:48,000 --> 01:09:54,390
this project starts at doing your Python

01:09:50,520 --> 01:09:56,670
2016 thanks to this guider

01:09:54,390 --> 01:10:01,320
we received some micro bits for free

01:09:56,670 --> 01:10:05,310
during the conference and yeah this is a

01:10:01,320 --> 01:10:08,910
micro bit is what I have here it's like

01:10:05,310 --> 01:10:11,430
blinking and it's it's a micro device

01:10:08,910 --> 01:10:16,230
and the cool thing is that you can use

01:10:11,430 --> 01:10:22,410
micro Python beside this micro bit so

01:10:16,230 --> 01:10:25,920
during July or August of 2016 I have a

01:10:22,410 --> 01:10:29,070
presentation in Poland doing a

01:10:25,920 --> 01:10:32,220
conference called Coalition for open

01:10:29,070 --> 01:10:34,739
education and I presented this this idea

01:10:32,220 --> 01:10:38,130
about bringing also the micro bits

01:10:34,739 --> 01:10:39,960
to to Poland yeah you can check the

01:10:38,130 --> 01:10:43,110
website for follow-up about the

01:10:39,960 --> 01:10:43,980
conference so the story behind me curb

01:10:43,110 --> 01:10:46,320
it is

01:10:43,980 --> 01:10:49,739
they gave 1 million of this for free in

01:10:46,320 --> 01:10:53,159
UK and well maybe we can do something

01:10:49,739 --> 01:10:57,110
similar in in Poland of course with with

01:10:53,159 --> 01:11:01,559
a smaller number so I thought about 300

01:10:57,110 --> 01:11:03,659
so I decided ok let's let's try this so

01:11:01,559 --> 01:11:05,880
what I wanted as I said you can use

01:11:03,659 --> 01:11:08,940
micro Python on this you can also use

01:11:05,880 --> 01:11:11,940
different programming languages I think

01:11:08,940 --> 01:11:15,809
I also scratch but my point was to use

01:11:11,940 --> 01:11:20,329
Python so what I also wanted to have is

01:11:15,809 --> 01:11:23,070
a course so we prepared a workshop I

01:11:20,329 --> 01:11:23,789
wanted to have like gentle introduction

01:11:23,070 --> 01:11:25,949
to Python

01:11:23,789 --> 01:11:29,429
so without big expectation for the

01:11:25,949 --> 01:11:31,889
students and at least at the beginning

01:11:29,429 --> 01:11:36,499
the idea was to leave the damico bits to

01:11:31,889 --> 01:11:39,059
the schools but the big problem was that

01:11:36,499 --> 01:11:42,030
I didn't have my kibbutz

01:11:39,059 --> 01:11:45,360
so I decided ok let's write an email to

01:11:42,030 --> 01:11:47,940
the PSF and let's see if we can add

01:11:45,360 --> 01:11:50,150
something so I got a grant from the PSF

01:11:47,940 --> 01:11:52,199
to buy some micro beads I also got some

01:11:50,150 --> 01:11:55,530
micro beads from the micro bit

01:11:52,199 --> 01:11:59,869
educational foundation and thanks to

01:11:55,530 --> 01:11:59,869
them I started this project in Poland so

01:12:00,170 --> 01:12:08,519
the idea of the workshop we decided to

01:12:05,309 --> 01:12:10,650
structure the workshop in this way it

01:12:08,519 --> 01:12:13,949
has to be during the weekends because it

01:12:10,650 --> 01:12:18,690
was like a volunteer experience around 6

01:12:13,949 --> 01:12:21,989
hours with a number of between 20 and 30

01:12:18,690 --> 01:12:25,320
students 5 teachers and also 5

01:12:21,989 --> 01:12:27,150
programmers and if you're wondering

01:12:25,320 --> 01:12:31,559
about the teachers there they were there

01:12:27,150 --> 01:12:33,329
mostly because they want to also control

01:12:31,559 --> 01:12:37,499
and check for the students but also

01:12:33,329 --> 01:12:40,440
because they want to learn Python so

01:12:37,499 --> 01:12:43,170
these are the results so we started this

01:12:40,440 --> 01:12:45,630
project called microbe it polska we

01:12:43,170 --> 01:12:47,620
prepare all the materials it's it's

01:12:45,630 --> 01:12:50,380
online

01:12:47,620 --> 01:12:53,770
we made this this material specifically

01:12:50,380 --> 01:12:55,390
to target students so because it's not

01:12:53,770 --> 01:12:58,000
that easy so you can be a good

01:12:55,390 --> 01:13:00,460
programmer but be good teachers it's

01:12:58,000 --> 01:13:05,230
something completely different and it's

01:13:00,460 --> 01:13:08,200
it's in both English and polish this is

01:13:05,230 --> 01:13:09,900
a screenshot from the git book we

01:13:08,200 --> 01:13:14,650
decided to use this platform so

01:13:09,900 --> 01:13:19,630
everything is like a markdown and you

01:13:14,650 --> 01:13:21,700
can check the website it's every finger

01:13:19,630 --> 01:13:25,240
you can find the English version and the

01:13:21,700 --> 01:13:28,000
Polish version and it's it's very easy

01:13:25,240 --> 01:13:35,050
to you know navigate the website during

01:13:28,000 --> 01:13:38,200
the course and move between the pages so

01:13:35,050 --> 01:13:40,240
until now he had two workshops one was

01:13:38,200 --> 01:13:45,300
in February in Gavita

01:13:40,240 --> 01:13:45,300
it's a city in the south part of Poland

01:13:45,540 --> 01:13:50,530
you can find the blog post about the

01:13:48,130 --> 01:13:54,070
first workshop this is a picture of the

01:13:50,530 --> 01:13:59,620
students they were quite happy after the

01:13:54,070 --> 01:14:04,120
workshop and as I said this was the

01:13:59,620 --> 01:14:07,900
first workshop we had around 30 or 35

01:14:04,120 --> 01:14:12,360
students five teachers and five Python

01:14:07,900 --> 01:14:15,790
programmers from the globus area and

01:14:12,360 --> 01:14:18,970
these are my thoughts after the workshop

01:14:15,790 --> 01:14:20,950
the first one so we had a great feedback

01:14:18,970 --> 01:14:24,430
from the students from the teachers and

01:14:20,950 --> 01:14:29,830
also from the programmers of course you

01:14:24,430 --> 01:14:31,990
can always improve something we didn't

01:14:29,830 --> 01:14:34,080
have like big expectation for the first

01:14:31,990 --> 01:14:38,620
workshop but everything went fine and

01:14:34,080 --> 01:14:41,560
English works well even if they speak

01:14:38,620 --> 01:14:43,540
Polish because they I mean at least for

01:14:41,560 --> 01:14:46,510
the students was wasn't like a problem

01:14:43,540 --> 01:14:49,570
to learn or to read the materials in

01:14:46,510 --> 01:14:54,190
English it was more a problem related to

01:14:49,570 --> 01:14:56,440
the to the teachers and yeah you can

01:14:54,190 --> 01:14:59,890
teach Buyten it's not such a big deal so

01:14:56,440 --> 01:15:00,910
if you want to cross the say the gap

01:14:59,890 --> 01:15:05,110
between

01:15:00,910 --> 01:15:07,150
garage and Python the errors or the

01:15:05,110 --> 01:15:10,090
issues that you can find our mostly

01:15:07,150 --> 01:15:13,240
related to the syntax so it's at least

01:15:10,090 --> 01:15:15,550
what what we did is okay just just just

01:15:13,240 --> 01:15:17,980
try this code and you're going to learn

01:15:15,550 --> 01:15:20,230
that is not going to work because you

01:15:17,980 --> 01:15:26,530
miss something and that works really

01:15:20,230 --> 01:15:28,990
well so for the first workshop we

01:15:26,530 --> 01:15:31,720
decided to leave the microbeads to the

01:15:28,990 --> 01:15:37,720
school and we were expecting something

01:15:31,720 --> 01:15:39,550
and this is the follow-up after the the

01:15:37,720 --> 01:15:41,230
first workshop so they're still using

01:15:39,550 --> 01:15:42,940
the microbeads they're having classes

01:15:41,230 --> 01:15:49,840
there about Python and about the

01:15:42,940 --> 01:15:54,670
microbeads yeah that it was super cool

01:15:49,840 --> 01:15:59,080
for me so that's as I said before it

01:15:54,670 --> 01:16:01,360
works not just inside the classroom but

01:15:59,080 --> 01:16:05,230
you can also get pull requests from the

01:16:01,360 --> 01:16:09,070
students so this is a pull request about

01:16:05,230 --> 01:16:14,260
some correction about the polish

01:16:09,070 --> 01:16:18,460
translations and the second workshop

01:16:14,260 --> 01:16:23,290
were was doing May it was in the city

01:16:18,460 --> 01:16:25,120
code Ishii about this this last workshop

01:16:23,290 --> 01:16:29,830
the feedback it's a little bit different

01:16:25,120 --> 01:16:32,230
the students were older so maybe the

01:16:29,830 --> 01:16:38,410
feet with the microwave systems not good

01:16:32,230 --> 01:16:40,510
as with the first workshop we at least I

01:16:38,410 --> 01:16:43,240
saw that it's really important to

01:16:40,510 --> 01:16:45,100
prepare the materials before and the

01:16:43,240 --> 01:16:46,570
fact that you have the Python

01:16:45,100 --> 01:16:49,180
programmers it's not enough you need

01:16:46,570 --> 01:16:51,130
someone to lead the workshop you cannot

01:16:49,180 --> 01:16:53,080
just say okay this is the microwave this

01:16:51,130 --> 01:16:57,160
is the workshop and with the website

01:16:53,080 --> 01:17:02,910
just you know run through the webpage is

01:16:57,160 --> 01:17:05,140
not going to to work really well and

01:17:02,910 --> 01:17:07,270
yeah this is also an experience that

01:17:05,140 --> 01:17:09,880
comes from the software and data

01:17:07,270 --> 01:17:13,980
carpentry to prefer the material before

01:17:09,880 --> 01:17:17,410
the the class or the workshop

01:17:13,980 --> 01:17:21,970
so now a little bit about the conclusion

01:17:17,410 --> 01:17:23,620
and the future of this project I can say

01:17:21,970 --> 01:17:25,840
and I think that this is shared between

01:17:23,620 --> 01:17:32,080
all of us that Python works well in

01:17:25,840 --> 01:17:34,270
education personally I don't see a good

01:17:32,080 --> 01:17:36,940
problem in starting with Python directly

01:17:34,270 --> 01:17:38,950
and let's say skipping for example

01:17:36,940 --> 01:17:41,650
scratch I think that it's really easy

01:17:38,950 --> 01:17:45,130
because you can just read Python and

01:17:41,650 --> 01:17:47,890
it's like pure English so it's I mean

01:17:45,130 --> 01:17:49,600
depending from the students that you're

01:17:47,890 --> 01:17:54,730
targeting I think you can start directly

01:17:49,600 --> 01:17:57,100
with with the Python and what about the

01:17:54,730 --> 01:18:03,820
microbe it I think it's it's a good

01:17:57,100 --> 01:18:05,830
platform so you can compare this to many

01:18:03,820 --> 01:18:08,110
other platforms like for example the

01:18:05,830 --> 01:18:09,610
Raspberry Pi the cool thing about the

01:18:08,110 --> 01:18:13,540
microbead is that you can just attach

01:18:09,610 --> 01:18:16,210
the Micra to your computer you it's it's

01:18:13,540 --> 01:18:18,790
not just a computer as for example the

01:18:16,210 --> 01:18:21,400
Raspberry Pi you can so you need I don't

01:18:18,790 --> 01:18:24,550
know a keyboard or a monitor all the

01:18:21,400 --> 01:18:27,610
stuff you can just use your notebook you

01:18:24,550 --> 01:18:31,240
can just attach using the micro USB and

01:18:27,610 --> 01:18:34,120
you can program this directly and but

01:18:31,240 --> 01:18:36,220
the problem that we saw was that with

01:18:34,120 --> 01:18:38,290
all the students it's it's not the right

01:18:36,220 --> 01:18:40,600
platform probably so if you have like

01:18:38,290 --> 01:18:46,690
students older than I don't know 14 or

01:18:40,600 --> 01:18:48,340
15 years it's too easy for them well

01:18:46,690 --> 01:18:51,880
another thing is the experience of

01:18:48,340 --> 01:18:54,930
teaching it's really wonderful one of

01:18:51,880 --> 01:18:58,110
the best experience that I had so far

01:18:54,930 --> 01:19:01,480
another very important thing is to

01:18:58,110 --> 01:19:04,600
follow the material that we have

01:19:01,480 --> 01:19:05,830
prepared so as I said before you cannot

01:19:04,600 --> 01:19:08,050
just give the I don't know the

01:19:05,830 --> 01:19:11,410
microbeads this is the and just play

01:19:08,050 --> 01:19:13,090
with them because yeah probably they're

01:19:11,410 --> 01:19:14,740
going to have fun that you're not going

01:19:13,090 --> 01:19:16,570
to receive a good feedback and they are

01:19:14,740 --> 01:19:20,740
not going to learn a lot from this

01:19:16,570 --> 01:19:24,670
workshop another very important thing

01:19:20,740 --> 01:19:26,680
that I still was having 30 young

01:19:24,670 --> 01:19:30,220
students for six hours so

01:19:26,680 --> 01:19:33,030
was yes so it was like for free for them

01:19:30,220 --> 01:19:36,010
it was like outside of the normal

01:19:33,030 --> 01:19:38,110
classes so they decided to be there and

01:19:36,010 --> 01:19:41,830
they decided to be there for six hours

01:19:38,110 --> 01:19:43,320
and you know learning new stuff and as I

01:19:41,830 --> 01:19:46,270
said it was like their choice and

01:19:43,320 --> 01:19:49,930
because they they were having fun so

01:19:46,270 --> 01:19:57,190
it's it's a good point for for Python I

01:19:49,930 --> 01:20:00,040
would say and about the future so so one

01:19:57,190 --> 01:20:02,800
of the problem that I saw was lack of

01:20:00,040 --> 01:20:05,350
engagement from teachers and probably

01:20:02,800 --> 01:20:07,780
because I don't speak Polish and they

01:20:05,350 --> 01:20:09,070
speak only Polish so this was a big at

01:20:07,780 --> 01:20:13,540
least at the beginning was a huge

01:20:09,070 --> 01:20:19,290
problem so we will try and I will try to

01:20:13,540 --> 01:20:21,910
find a way to engage the teachers more

01:20:19,290 --> 01:20:26,050
because it's the only way in which I can

01:20:21,910 --> 01:20:28,800
grow this project in Poland another

01:20:26,050 --> 01:20:33,910
thing that we lack until now its

01:20:28,800 --> 01:20:37,480
feedback so we had like general feedback

01:20:33,910 --> 01:20:39,550
yeah the workshop was good and yeah

01:20:37,480 --> 01:20:42,010
let's do this again but we should start

01:20:39,550 --> 01:20:43,750
to gather more data more metrics and to

01:20:42,010 --> 01:20:46,630
have some kind of quantitative measure

01:20:43,750 --> 01:20:50,200
about the feedback and quality of the

01:20:46,630 --> 01:20:54,120
workshop and have more workshop

01:20:50,200 --> 01:20:57,280
organized by local people because I

01:20:54,120 --> 01:21:01,540
cannot scale myself so I need other

01:20:57,280 --> 01:21:05,260
people to run workshops around Poland

01:21:01,540 --> 01:21:08,110
and I think that sooner we will start to

01:21:05,260 --> 01:21:11,950
collaborate with the pipe off guide is

01:21:08,110 --> 01:21:14,830
the Polish baton user group so I decided

01:21:11,950 --> 01:21:19,120
that they are really interested in this

01:21:14,830 --> 01:21:24,340
so probably in the future we are going

01:21:19,120 --> 01:21:28,060
to work more together so this is all I

01:21:24,340 --> 01:21:31,750
got for you but if you don't mind I have

01:21:28,060 --> 01:21:36,810
a few questions for you and first of all

01:21:31,750 --> 01:21:39,960
how can I actively engage more people in

01:21:36,810 --> 01:21:43,469
to this kind of project but

01:21:39,960 --> 01:21:45,680
also in say open-source project because

01:21:43,469 --> 01:21:48,900
it's something that I see very often

01:21:45,680 --> 01:21:51,120
like to be too along let's say and

01:21:48,900 --> 01:21:54,239
another thing is that we have two very

01:21:51,120 --> 01:21:56,550
successful projects called software and

01:21:54,239 --> 01:22:02,489
data carpentry so what about having

01:21:56,550 --> 01:22:03,870
something like kids carpentry because so

01:22:02,489 --> 01:22:06,660
I think there was like in project to

01:22:03,870 --> 01:22:08,910
have this this website with a collection

01:22:06,660 --> 01:22:11,550
of materials about Python in education

01:22:08,910 --> 01:22:15,660
and I think it's it's it's a good idea

01:22:11,550 --> 01:22:19,770
to continue on that road to have a kind

01:22:15,660 --> 01:22:21,840
of collection to you know to avoid you

01:22:19,770 --> 01:22:23,960
have and a thousand of materials in

01:22:21,840 --> 01:22:30,000
different languages and they're not like

01:22:23,960 --> 01:22:47,630
together so thank you polish sites in

01:22:30,000 --> 01:22:47,630
kuia so questions yeah okay

01:22:53,449 --> 01:22:56,449
yeah

01:22:58,499 --> 01:23:34,380
okay yeah yeah yeah yeah I remember you

01:23:32,610 --> 01:23:35,789
said this many times that okay

01:23:34,380 --> 01:23:37,440
programming is like in English but

01:23:35,789 --> 01:23:40,079
teaching is like in the language of the

01:23:37,440 --> 01:23:51,079
country so sometimes yes

01:23:40,079 --> 01:23:51,079
big F yeah oh yes

01:24:14,000 --> 01:24:21,540
okay so this is the website of the

01:24:16,260 --> 01:24:24,020
project this is the link to their

01:24:21,540 --> 01:24:24,020
materials

01:24:30,330 --> 01:24:35,940
so we started mostly from zero so from

01:24:33,120 --> 01:24:38,070
printing a log word and then we started

01:24:35,940 --> 01:24:40,950
to use old like the sensors inside

01:24:38,070 --> 01:24:44,190
microbeads so you have like and also the

01:24:40,950 --> 01:24:46,860
display so you have like animations so

01:24:44,190 --> 01:24:50,670
you can like display this kind of images

01:24:46,860 --> 01:24:54,630
like Earth fps Miles said you can also

01:24:50,670 --> 01:24:59,580
use the buttons so you have two physical

01:24:54,630 --> 01:25:02,670
buttons what we have the sensor so I

01:24:59,580 --> 01:25:07,350
mean it was it was six hours so he had

01:25:02,670 --> 01:25:09,720
time to teach a lot it wasn't really

01:25:07,350 --> 01:25:14,130
related to Python so you don't have like

01:25:09,720 --> 01:25:17,160
this I don't know serious of topics like

01:25:14,130 --> 01:25:19,590
if conditions loops and so on it was

01:25:17,160 --> 01:25:21,300
like okay let's give them a gentle

01:25:19,590 --> 01:25:24,210
introduction to Python using the micro

01:25:21,300 --> 01:25:26,520
bit and of course there was the last

01:25:24,210 --> 01:25:29,790
part in which they could like peek and

01:25:26,520 --> 01:25:32,760
mix everything together so we had we

01:25:29,790 --> 01:25:37,100
tried to have this kind of approach

01:25:32,760 --> 01:25:37,100
using challenges yeah

01:25:42,979 --> 01:25:48,320
I mean the last hour was just about big

01:25:45,860 --> 01:25:50,420
a mix so they could seriously just play

01:25:48,320 --> 01:25:52,130
with the microbeads so it was really

01:25:50,420 --> 01:26:06,709
cool to see them playing with the

01:25:52,130 --> 01:26:09,860
Magritte so the plan is to have a series

01:26:06,709 --> 01:26:12,469
of workshops the main problem is that I

01:26:09,860 --> 01:26:15,050
think I have something like 200

01:26:12,469 --> 01:26:16,900
megabytes so I need to decide if I want

01:26:15,050 --> 01:26:21,679
to leave the microbeads to the schools

01:26:16,900 --> 01:26:23,630
to the teachers to the students for the

01:26:21,679 --> 01:26:25,610
first workshop we decided to leave the

01:26:23,630 --> 01:26:27,499
microbeads to the school and yes they

01:26:25,610 --> 01:26:30,559
are still using them for the second

01:26:27,499 --> 01:26:34,070
workshop we prefer to give just 5

01:26:30,559 --> 01:26:35,809
microbeads to the teachers the problem

01:26:34,070 --> 01:26:37,909
is that we really don't know which is

01:26:35,809 --> 01:26:40,670
the best formula so we have a limited

01:26:37,909 --> 01:26:44,599
amount of research and we need to find

01:26:40,670 --> 01:26:46,429
the best way to use them I know that are

01:26:44,599 --> 01:26:49,400
running different projects across Europe

01:26:46,429 --> 01:26:51,889
using the microbeads but I think they

01:26:49,400 --> 01:26:54,110
have more money for this so they I mean

01:26:51,889 --> 01:26:55,519
you can just drop I don't know 200 micro

01:26:54,110 --> 01:26:56,559
bits inside the school and that then

01:26:55,519 --> 01:26:59,269
will be fine

01:26:56,559 --> 01:27:03,769
so yes the plan is to have a series of

01:26:59,269 --> 01:27:07,099
workshop and at least for now it's more

01:27:03,769 --> 01:27:09,469
like a volunteer kind of approach so I

01:27:07,099 --> 01:27:12,199
need to have some feedback loop transfer

01:27:09,469 --> 01:27:13,789
I don't know two or three more workshop

01:27:12,199 --> 01:27:16,459
before the end of the year but it

01:27:13,789 --> 01:27:22,640
depends mostly from you know from the

01:27:16,459 --> 01:27:28,580
local yeah

01:27:22,640 --> 01:27:36,860
I don't speak Polish yes sorry no I do

01:27:28,580 --> 01:27:39,590
not speak Polish well I decided I was

01:27:36,860 --> 01:27:42,410
expecting this question so well I

01:27:39,590 --> 01:27:44,900
decided to I mean I was traveling for

01:27:42,410 --> 01:27:46,130
three years and that they said okay

01:27:44,900 --> 01:27:48,710
let's try a different experience

01:27:46,130 --> 01:27:51,410
everyone is moving to London to Berlin

01:27:48,710 --> 01:27:53,450
let's try another country so it's not

01:27:51,410 --> 01:27:57,500
bad it's it's a cool place where to be

01:27:53,450 --> 01:27:59,750
and it's I mean English is commonly

01:27:57,500 --> 01:28:03,770
spoken there so it's not really a huge

01:27:59,750 --> 01:28:05,840
deal but just between the students so if

01:28:03,770 --> 01:28:09,800
you start to engage with the teachers

01:28:05,840 --> 01:28:12,350
they speak just polish so at the

01:28:09,800 --> 01:28:16,310
beginning I had some help with the you

01:28:12,350 --> 01:28:17,840
know English polish problem but if I

01:28:16,310 --> 01:28:20,690
want to scale the project I need to

01:28:17,840 --> 01:28:23,540
speak polish somehow this is a problem

01:28:20,690 --> 01:28:26,600
that I'm facing right now also because

01:28:23,540 --> 01:28:28,640
they receive a lot of requests but they

01:28:26,600 --> 01:28:31,130
are in Polish so I need someone to

01:28:28,640 --> 01:28:40,690
translate this request and you know it's

01:28:31,130 --> 01:28:40,690
just a week to reply to an email yes hi

01:28:46,249 --> 01:28:49,249
yeah

01:28:53,920 --> 01:28:55,980
you

01:29:10,340 --> 01:29:17,789
yeah so before starting the project I

01:29:15,229 --> 01:29:21,869
presented the project during PyCon PL

01:29:17,789 --> 01:29:24,059
bike on Poland then I try to I mean I

01:29:21,869 --> 01:29:27,479
presented the project during the local

01:29:24,059 --> 01:29:27,840
meet up I to meet up it didn't help a

01:29:27,479 --> 01:29:30,900
lot

01:29:27,840 --> 01:29:33,749
I plan to reach directly the jungle

01:29:30,900 --> 01:29:36,360
girls and pilot is there so I will try

01:29:33,749 --> 01:29:51,619
this again I hope to have you know

01:29:36,360 --> 01:29:55,949
better feedback this time yes yes yeah I

01:29:51,619 --> 01:29:58,440
mean when you try something is it's it's

01:29:55,949 --> 01:30:04,130
a good idea to copy from something that

01:29:58,440 --> 01:30:04,130
yes that worked out before

01:30:08,570 --> 01:30:25,159
oh you're welcome okay yeah what do you

01:30:21,860 --> 01:30:31,730
mean you mean like the places where I

01:30:25,159 --> 01:30:34,460
can have like random workshops so

01:30:31,730 --> 01:30:38,060
generally I start from the teachers and

01:30:34,460 --> 01:30:40,040
that's the problem so I start to talk

01:30:38,060 --> 01:30:41,780
with the teachers they say okay we're

01:30:40,040 --> 01:30:44,480
very interested in this let's let's do

01:30:41,780 --> 01:30:46,909
this and then they bring the students so

01:30:44,480 --> 01:30:49,070
it's before we need to get the teachers

01:30:46,909 --> 01:30:59,650
and automatically we can get the

01:30:49,070 --> 01:30:59,650
students from this something more

01:31:02,010 --> 01:31:08,280
what about experiences here in USA about

01:31:04,709 --> 01:31:13,229
teaching kids I think that my kibbutz is

01:31:08,280 --> 01:31:23,999
coming here not yet yeah I think it's

01:31:13,229 --> 01:31:26,150
coming here yeah okay okay do you have

01:31:23,999 --> 01:31:42,959
another platform

01:31:26,150 --> 01:31:45,380
okay okay okay good surgery it's like a

01:31:42,959 --> 01:31:45,380
question

01:32:01,580 --> 01:32:03,640
you

01:32:04,469 --> 01:32:08,710
okay but what is really expensive here

01:32:07,389 --> 01:32:11,500
because probably it's different from

01:32:08,710 --> 01:32:22,320
what is really expensive in Poland so

01:32:11,500 --> 01:32:22,320
you need just this uh-huh okay

01:32:29,070 --> 01:32:31,820
okay

01:33:06,770 --> 01:33:09,770
okay

01:33:50,930 --> 01:34:05,670
yeah that's that's yeah yeah that's

01:34:03,930 --> 01:34:08,670
that's awesome I mean it's it's I think

01:34:05,670 --> 01:34:11,240
that teaching using like a kind of

01:34:08,670 --> 01:34:14,040
chemical equation it's it's really

01:34:11,240 --> 01:34:16,350
something that I want to try because we

01:34:14,040 --> 01:34:18,660
didn't try with the Raspberry Pi we just

01:34:16,350 --> 01:34:20,610
tried with the microbead but as I said

01:34:18,660 --> 01:34:24,020
before for all their students I think

01:34:20,610 --> 01:34:29,660
it's better there is very PI approach

01:34:24,020 --> 01:34:29,660
yeah I think it's the last question yeah

01:35:06,539 --> 01:35:17,359
yeah thank you thank you

01:35:11,290 --> 01:35:17,359
[Applause]

01:35:40,200 --> 01:35:53,580
a little more clicking Nico I can make a

01:35:43,540 --> 01:35:53,580
brighter blind them I control or combat

01:35:54,450 --> 01:36:16,900
HDMI I guess I'll agree to that iTunes

01:36:11,920 --> 01:36:22,900
let's see that's later oh my guess don't

01:36:16,900 --> 01:36:24,520
want me to see it later they're gonna

01:36:22,900 --> 01:36:28,020
toughen the microphone and get it move

01:36:24,520 --> 01:36:28,020
um yeah microphones probably

01:36:50,560 --> 01:36:55,630
all right Christian thank you very much

01:36:53,380 --> 01:36:57,310
appreciate that we're going to have a

01:36:55,630 --> 01:36:59,230
conversation with Tony now he's going to

01:36:57,310 --> 01:37:03,310
talk to us about tangible tools that you

01:36:59,230 --> 01:37:04,540
can use for teaching Python hey thanks a

01:37:03,310 --> 01:37:06,220
lot everyone for being here

01:37:04,540 --> 01:37:09,340
so yeah let's talk about physical

01:37:06,220 --> 01:37:11,440
computing and Python but first a little

01:37:09,340 --> 01:37:13,930
bit about me oops get to my slide here

01:37:11,440 --> 01:37:15,940
basically my name is Tony and I work for

01:37:13,930 --> 01:37:17,890
a company called Adafruit and this is

01:37:15,940 --> 01:37:20,470
the founder and CEO of Adafruit L'Amour

01:37:17,890 --> 01:37:22,750
free so quite an inspiration she wanted

01:37:20,470 --> 01:37:25,090
to create hardware that's easy for

01:37:22,750 --> 01:37:28,690
people to use so people like students

01:37:25,090 --> 01:37:30,640
teachers educators hobbyists anyone

01:37:28,690 --> 01:37:33,160
could use electronics to build something

01:37:30,640 --> 01:37:35,230
interesting and fun so very inspiring I

01:37:33,160 --> 01:37:36,640
write a lot of Python code for Adafruit

01:37:35,230 --> 01:37:38,710
so if you've ever used some of our

01:37:36,640 --> 01:37:40,570
sensors with like a Raspberry Pi you

01:37:38,710 --> 01:37:42,550
might even use my code hopefully it work

01:37:40,570 --> 01:37:43,810
pretty well but basically I have a lot

01:37:42,550 --> 01:37:45,940
of experience with using Python and

01:37:43,810 --> 01:37:48,250
hardware and so in this talk I want to

01:37:45,940 --> 01:37:51,430
go through interesting options you can

01:37:48,250 --> 01:37:54,370
use to do physical computing with Python

01:37:51,430 --> 01:37:57,640
code so how you control hardware using

01:37:54,370 --> 01:37:59,890
Python first what is physical computing

01:37:57,640 --> 01:38:02,380
so this is a pretty good definition of

01:37:59,890 --> 01:38:04,360
it it's basically creating objects using

01:38:02,380 --> 01:38:06,040
programmable hardware and this comes

01:38:04,360 --> 01:38:07,630
from a really interesting research

01:38:06,040 --> 01:38:10,030
project that I found called my

01:38:07,630 --> 01:38:11,740
interactive garden and this was created

01:38:10,030 --> 01:38:13,900
by a person named Marine pres Billa

01:38:11,740 --> 01:38:15,640
and it was a research project for

01:38:13,900 --> 01:38:17,680
education in Germany I think it was

01:38:15,640 --> 01:38:20,260
ninth graders in Germany where they

01:38:17,680 --> 01:38:22,360
built physical computing projects to go

01:38:20,260 --> 01:38:24,070
into a garden so this wasn't like a

01:38:22,360 --> 01:38:26,260
robot competition or something it was

01:38:24,070 --> 01:38:28,420
more of letting the kids be creative and

01:38:26,260 --> 01:38:29,950
build something to go and populate a

01:38:28,420 --> 01:38:32,560
garden and be kind of interesting so

01:38:29,950 --> 01:38:34,300
this is an example right here of a bunny

01:38:32,560 --> 01:38:36,310
that's guarding an Easter egg and

01:38:34,300 --> 01:38:37,600
there's a little infrared sensor in

01:38:36,310 --> 01:38:40,540
front of the egg and when you pick the

01:38:37,600 --> 01:38:42,280
egg up the sensor detects when it's gone

01:38:40,540 --> 01:38:44,380
and then the rabbit will move its ear as

01:38:42,280 --> 01:38:46,000
it gets angry it blinks its lights and

01:38:44,380 --> 01:38:47,770
it can see it's all programmed in

01:38:46,000 --> 01:38:49,510
scratch this was actually created using

01:38:47,770 --> 01:38:51,370
Arduino hardware which we'll talk a

01:38:49,510 --> 01:38:52,390
little bit more about later but this was

01:38:51,370 --> 01:38:54,520
using the visual programming language

01:38:52,390 --> 01:38:56,530
there and she wrote a really excellent

01:38:54,520 --> 01:38:58,900
set of papers about what they learned

01:38:56,530 --> 01:39:00,880
from this and how it kind of applies to

01:38:58,900 --> 01:39:02,860
physical computing and one thing that

01:39:00,880 --> 01:39:03,490
she went into is what are the pillars of

01:39:02,860 --> 01:39:05,500
the

01:39:03,490 --> 01:39:08,080
computing and so she lays out three

01:39:05,500 --> 01:39:10,090
things there the processes and this is

01:39:08,080 --> 01:39:11,920
basically how you do physical computing

01:39:10,090 --> 01:39:13,420
so built on like constructionist

01:39:11,920 --> 01:39:15,280
learning where you start with a

01:39:13,420 --> 01:39:17,560
prototype and then you use your existing

01:39:15,280 --> 01:39:20,500
knowledge to build on it so you learn

01:39:17,560 --> 01:39:22,360
maybe how to toggle an LED and then you

01:39:20,500 --> 01:39:24,670
can learn okay well now I can control a

01:39:22,360 --> 01:39:26,320
relay and a relay can control maybe a

01:39:24,670 --> 01:39:28,150
device or something like that so that

01:39:26,320 --> 01:39:30,670
process of building on your knowledge as

01:39:28,150 --> 01:39:32,170
one of the pillars the second pillar or

01:39:30,670 --> 01:39:34,420
the product so those are the things that

01:39:32,170 --> 01:39:36,070
you actually create so like the bunny

01:39:34,420 --> 01:39:37,840
that guards the Easter egg for example

01:39:36,070 --> 01:39:40,270
this is open to kind of a lot of

01:39:37,840 --> 01:39:41,560
interpretation and lets kids be really

01:39:40,270 --> 01:39:42,760
creative voice you know they want to

01:39:41,560 --> 01:39:44,710
create something that's maybe personal

01:39:42,760 --> 01:39:46,720
to them and then the third pillar are

01:39:44,710 --> 01:39:49,030
the tools and so that's what you use to

01:39:46,720 --> 01:39:51,250
build things with physical computing and

01:39:49,030 --> 01:39:53,170
that's what I want to focus on and this

01:39:51,250 --> 01:39:55,300
talk is actually looking at what are

01:39:53,170 --> 01:39:58,270
some of the tools you can use that can

01:39:55,300 --> 01:39:59,920
be controlled with Python and in that

01:39:58,270 --> 01:40:01,090
paper they actually go through an

01:39:59,920 --> 01:40:02,970
interesting table right here it's a

01:40:01,090 --> 01:40:05,500
little hard to read so I put some of the

01:40:02,970 --> 01:40:07,300
basically the the categories here so

01:40:05,500 --> 01:40:10,450
there are programmable toys and bricks

01:40:07,300 --> 01:40:12,100
IO devices microcontrollers and many

01:40:10,450 --> 01:40:13,600
computers and they went through these

01:40:12,100 --> 01:40:15,790
are interesting options at the time this

01:40:13,600 --> 01:40:17,740
paper is about four years old and it

01:40:15,790 --> 01:40:19,180
wasn't really specific to Python but in

01:40:17,740 --> 01:40:21,670
this talk I want to go through these

01:40:19,180 --> 01:40:24,670
categories and look at what are options

01:40:21,670 --> 01:40:25,480
today that exist that you can use with

01:40:24,670 --> 01:40:27,160
Python

01:40:25,480 --> 01:40:29,560
so programmable bricks and toys that you

01:40:27,160 --> 01:40:31,000
might go to program with Python and all

01:40:29,560 --> 01:40:33,490
the way down to many computers and

01:40:31,000 --> 01:40:35,140
things so we'll dive in and get started

01:40:33,490 --> 01:40:37,000
here and hopefully do an updated version

01:40:35,140 --> 01:40:39,040
of this table that you can take a look

01:40:37,000 --> 01:40:40,600
at to get some inspiration from now

01:40:39,040 --> 01:40:42,910
first before I get too far into this

01:40:40,600 --> 01:40:44,770
though when we're talking Python and

01:40:42,910 --> 01:40:46,600
hardware there's a very important

01:40:44,770 --> 01:40:49,810
distinction that I want to make as far

01:40:46,600 --> 01:40:52,600
as where Python runs so you can have

01:40:49,810 --> 01:40:54,910
Python on your computer and that's the

01:40:52,600 --> 01:40:56,560
normal C Python that you're used to so

01:40:54,910 --> 01:40:58,840
you can use pip you can use all the

01:40:56,560 --> 01:41:00,460
packages and modules you can use the

01:40:58,840 --> 01:41:01,990
same editing experience you know

01:41:00,460 --> 01:41:04,180
whatever Python editor PyCharm

01:41:01,990 --> 01:41:05,980
everything you're happy with works

01:41:04,180 --> 01:41:07,570
because it's Python running on your

01:41:05,980 --> 01:41:09,340
computer but it might be tethered to

01:41:07,570 --> 01:41:12,160
some piece of hardware like maybe a

01:41:09,340 --> 01:41:14,200
sensor some lights a servo some kind of

01:41:12,160 --> 01:41:15,530
actuator and it's possible I'll show you

01:41:14,200 --> 01:41:17,090
a lot of options that

01:41:15,530 --> 01:41:19,160
doing that tethered controller it's

01:41:17,090 --> 01:41:21,320
Python on your computer now the drawback

01:41:19,160 --> 01:41:23,210
with that is that the device always has

01:41:21,320 --> 01:41:24,800
to be connected to your computer so if

01:41:23,210 --> 01:41:26,660
you wanted to build a robot for example

01:41:24,800 --> 01:41:28,400
the computer kind of has to be on the

01:41:26,660 --> 01:41:30,620
robot so it's going to be pretty big or

01:41:28,400 --> 01:41:32,330
really long cable to make it work now in

01:41:30,620 --> 01:41:34,550
contrast to that there are options that

01:41:32,330 --> 01:41:37,280
can actually natively run Python and so

01:41:34,550 --> 01:41:39,170
that's hardware that has maybe C Python

01:41:37,280 --> 01:41:40,790
running on it or a different version of

01:41:39,170 --> 01:41:42,770
Python we'll look at one called micro

01:41:40,790 --> 01:41:45,290
Python and so that's where you've got

01:41:42,770 --> 01:41:47,270
Python code running on the device itself

01:41:45,290 --> 01:41:49,490
and there's trade-offs to that it's not

01:41:47,270 --> 01:41:51,170
just ly better or worse in a lot of

01:41:49,490 --> 01:41:52,760
cases you might be more limited so these

01:41:51,170 --> 01:41:55,310
devices typically don't have as much

01:41:52,760 --> 01:41:56,780
memory or as many capabilities as your

01:41:55,310 --> 01:41:57,980
desktop computer so your computer

01:41:56,780 --> 01:42:00,140
probably has like gigabytes of memory

01:41:57,980 --> 01:42:02,330
you never even have to worry about is my

01:42:00,140 --> 01:42:03,680
Python program too big or is on a lot of

01:42:02,330 --> 01:42:05,360
these devices they might only have

01:42:03,680 --> 01:42:07,070
kilobytes of memory which means you know

01:42:05,360 --> 01:42:09,110
get past a few hundred lines and it

01:42:07,070 --> 01:42:10,310
starts to get a little difficult so

01:42:09,110 --> 01:42:12,380
trade-offs there you know you get more

01:42:10,310 --> 01:42:14,930
portability but you might have less

01:42:12,380 --> 01:42:16,730
capabilities in that case and so we'll

01:42:14,930 --> 01:42:19,070
look at both those options for all these

01:42:16,730 --> 01:42:21,260
categories both tethered options and

01:42:19,070 --> 01:42:22,910
native options that are available so

01:42:21,260 --> 01:42:25,730
let's start with programmable bricks and

01:42:22,910 --> 01:42:28,070
toys the first thing is something called

01:42:25,730 --> 01:42:30,080
little bits so these are pretty cool

01:42:28,070 --> 01:42:32,420
these are basically a modular

01:42:30,080 --> 01:42:34,490
electronics platform and it's all based

01:42:32,420 --> 01:42:36,740
on magnets so you have little components

01:42:34,490 --> 01:42:38,300
like this is an LED bar graph and these

01:42:36,740 --> 01:42:40,070
are a couple little potentiometers

01:42:38,300 --> 01:42:41,480
little knobs and you can just snap them

01:42:40,070 --> 01:42:43,340
together you can snap a power source

01:42:41,480 --> 01:42:46,070
onto here and you can build up complex

01:42:43,340 --> 01:42:47,930
circuits and in most cases whoops I lose

01:42:46,070 --> 01:42:49,250
all these in most cases you don't

01:42:47,930 --> 01:42:50,810
actually have to program these which is

01:42:49,250 --> 01:42:52,850
kind of a cool thing like if I snap to

01:42:50,810 --> 01:42:55,100
the tenshi ometer onto the LED bar graph

01:42:52,850 --> 01:42:56,450
and if I give it a power supply I can

01:42:55,100 --> 01:42:58,820
just twist the knob and it lights up the

01:42:56,450 --> 01:43:00,770
light but there are some special bits

01:42:58,820 --> 01:43:02,900
loops going Wow one too far there are

01:43:00,770 --> 01:43:05,330
some special bits that are programmable

01:43:02,900 --> 01:43:07,820
so there's a bit called the Arduino bit

01:43:05,330 --> 01:43:10,340
this guy right here and you can write

01:43:07,820 --> 01:43:12,560
code that runs on this bit and then snap

01:43:10,340 --> 01:43:14,720
on other bits to it and control them

01:43:12,560 --> 01:43:16,790
from here and the cool thing is with the

01:43:14,720 --> 01:43:18,530
Arduino bit you can actually load

01:43:16,790 --> 01:43:19,940
something on here called firmata and

01:43:18,530 --> 01:43:22,640
I'll talk more about that in a later

01:43:19,940 --> 01:43:24,410
slide but you can load something on here

01:43:22,640 --> 01:43:26,300
that allows your computer to control

01:43:24,410 --> 01:43:28,500
this bit so you hook this bit up to your

01:43:26,300 --> 01:43:30,720
computer you hook other bits like lie

01:43:28,500 --> 01:43:32,520
and servos and things up to it and then

01:43:30,720 --> 01:43:34,410
you can have Python on your computer so

01:43:32,520 --> 01:43:36,090
this is a tethered example sending

01:43:34,410 --> 01:43:37,590
control commands to this bit that

01:43:36,090 --> 01:43:39,630
controls everything that's connected to

01:43:37,590 --> 01:43:41,940
it so this is a good way if you wanted

01:43:39,630 --> 01:43:43,650
to add some simple act interactivity to

01:43:41,940 --> 01:43:45,690
your computer like some lights or maybe

01:43:43,650 --> 01:43:47,370
move a servo you know maybe the bunny

01:43:45,690 --> 01:43:49,380
rabbit that's guarding the Easter egg it

01:43:47,370 --> 01:43:51,120
would just need to trigger a servo and

01:43:49,380 --> 01:43:52,800
you don't want to learn about okay how

01:43:51,120 --> 01:43:55,380
do I solder these connections together

01:43:52,800 --> 01:43:57,240
how do I build this circuit that's a lot

01:43:55,380 --> 01:43:58,350
of stuff to deal with you can use

01:43:57,240 --> 01:44:00,270
something like little bits where it just

01:43:58,350 --> 01:44:01,800
snaps together and you're ready to go

01:44:00,270 --> 01:44:03,600
with that so that's one option is the

01:44:01,800 --> 01:44:04,920
Arduino bit there's also a cloud bit

01:44:03,600 --> 01:44:06,870
that it's like a really advanced bit

01:44:04,920 --> 01:44:08,280
that's also somewhat programmable you

01:44:06,870 --> 01:44:10,260
connect bits to it and then there's a

01:44:08,280 --> 01:44:12,390
cloud API that you can use to send it

01:44:10,260 --> 01:44:13,650
commands to control those bits and it's

01:44:12,390 --> 01:44:15,300
also possible to control that with

01:44:13,650 --> 01:44:16,920
Python I would say that's maybe a little

01:44:15,300 --> 01:44:18,840
more advanced because then you need to

01:44:16,920 --> 01:44:20,520
get into the whole web protocols and ap

01:44:18,840 --> 01:44:22,470
is but an interesting thing to explore

01:44:20,520 --> 01:44:25,890
potentially for controlling that

01:44:22,470 --> 01:44:28,740
hardware now an example of native Python

01:44:25,890 --> 01:44:30,360
control would be with Lego Mindstorms so

01:44:28,740 --> 01:44:32,460
Lego Mindstorms is kind of Legos

01:44:30,360 --> 01:44:34,140
physical computing platform similar to

01:44:32,460 --> 01:44:36,210
little bits and it's a modular system

01:44:34,140 --> 01:44:38,730
now Lego compatible there are things

01:44:36,210 --> 01:44:40,770
like servos and sensors that you plug in

01:44:38,730 --> 01:44:42,270
to a Lego control brick that middle

01:44:40,770 --> 01:44:43,950
thing right there and typically you

01:44:42,270 --> 01:44:46,740
program that with a visual programming

01:44:43,950 --> 01:44:48,330
language so you put together a control

01:44:46,740 --> 01:44:50,070
flow of maybe a robot you're building

01:44:48,330 --> 01:44:51,270
and how it should operate but the

01:44:50,070 --> 01:44:53,280
interesting thing is with the latest

01:44:51,270 --> 01:44:54,450
versions and Mindstorms on Eve III and

01:44:53,280 --> 01:44:56,310
there's been a lot of versions so you

01:44:54,450 --> 01:44:57,660
might need to do some research and see

01:44:56,310 --> 01:44:59,910
what's available but Evie 3 is the

01:44:57,660 --> 01:45:01,650
latest one you can load custom firmware

01:44:59,910 --> 01:45:03,990
on there and there's a linux-based

01:45:01,650 --> 01:45:05,670
firmware called an AV 3 dev that you can

01:45:03,990 --> 01:45:07,740
load and that gives you access to

01:45:05,670 --> 01:45:09,660
everything with python that gives you C

01:45:07,740 --> 01:45:11,520
Python almost like a Raspberry Pi if

01:45:09,660 --> 01:45:13,170
you're familiar with that so you can run

01:45:11,520 --> 01:45:15,120
a normal version of Python directly on

01:45:13,170 --> 01:45:18,150
that control brick and there's a pretty

01:45:15,120 --> 01:45:21,180
comprehensive Python API it's Eve III

01:45:18,150 --> 01:45:23,490
Python comm that gives really simple

01:45:21,180 --> 01:45:25,260
code like maybe 20 lines of code I saw a

01:45:23,490 --> 01:45:26,520
line following robot that can just

01:45:25,260 --> 01:45:28,140
interact with all those motors and

01:45:26,520 --> 01:45:29,910
sensors and things so a really cool

01:45:28,140 --> 01:45:32,220
example of again you know you want

01:45:29,910 --> 01:45:34,050
simple devices that you don't have to

01:45:32,220 --> 01:45:35,520
learn about all the soldering and all

01:45:34,050 --> 01:45:37,350
the electronics you just want to get

01:45:35,520 --> 01:45:39,120
started but you want Python to natively

01:45:37,350 --> 01:45:40,200
run on it you could definitely check

01:45:39,120 --> 01:45:41,250
that out but it is a little more

01:45:40,200 --> 01:45:42,450
advanced and that you

01:45:41,250 --> 01:45:45,420
you need to load this custom firmware

01:45:42,450 --> 01:45:47,040
it's simpler with the ev3 version of

01:45:45,420 --> 01:45:49,110
Legos because you just plug in a microSD

01:45:47,040 --> 01:45:50,820
card so you know unfortunately not

01:45:49,110 --> 01:45:53,370
Python out of the box but it's pretty

01:45:50,820 --> 01:45:55,830
close to that there are also a lot of

01:45:53,370 --> 01:45:58,410
toy robots and drones that you can

01:45:55,830 --> 01:46:00,360
control with Python some of them the

01:45:58,410 --> 01:46:02,790
actual the manufacturer gives you an API

01:46:00,360 --> 01:46:04,170
for that like this iRobot created in the

01:46:02,790 --> 01:46:06,510
upper right hand corner that's basically

01:46:04,170 --> 01:46:08,850
a Roomba that iRobot took but they made

01:46:06,510 --> 01:46:10,200
a stem version of that so that they

01:46:08,850 --> 01:46:11,700
published an API and there's a

01:46:10,200 --> 01:46:13,350
programming port you can plug into it to

01:46:11,700 --> 01:46:14,340
the serial port and you can send two

01:46:13,350 --> 01:46:16,350
commands like you know move forward

01:46:14,340 --> 01:46:18,300
almost like a logo robot if you wanted

01:46:16,350 --> 01:46:19,980
to create maybe that Caroll robot you

01:46:18,300 --> 01:46:20,970
can make a physical version of that but

01:46:19,980 --> 01:46:22,470
it would have to be tethered to your

01:46:20,970 --> 01:46:25,140
computer so these are all examples of

01:46:22,470 --> 01:46:27,390
Python on your computer sending control

01:46:25,140 --> 01:46:28,920
commands to some of these robots and a

01:46:27,390 --> 01:46:30,420
lot of toys I looked around actually

01:46:28,920 --> 01:46:33,150
people have reverse-engineered some the

01:46:30,420 --> 01:46:34,590
protocols like if any toy uses Bluetooth

01:46:33,150 --> 01:46:36,960
Low Energy or some kind of wireless

01:46:34,590 --> 01:46:38,640
protocol in a lot of cases people have

01:46:36,960 --> 01:46:40,080
kind of sniffed the traffic and written

01:46:38,640 --> 01:46:42,480
a quick little library to let you

01:46:40,080 --> 01:46:43,770
control it so things like Sphero or the

01:46:42,480 --> 01:46:46,080
dash and the dot in the lower left-hand

01:46:43,770 --> 01:46:48,060
corner the really popular science stem

01:46:46,080 --> 01:46:49,530
kind of robot there's a library I found

01:46:48,060 --> 01:46:50,910
that you can use to control that even

01:46:49,530 --> 01:46:52,890
drones like the parrot ar.drone

01:46:50,910 --> 01:46:54,240
their libraries out there to control

01:46:52,890 --> 01:46:56,280
that the one thing I would say about

01:46:54,240 --> 01:46:58,730
these if it doesn't have an official

01:46:56,280 --> 01:47:00,870
library from the creator of the device

01:46:58,730 --> 01:47:02,460
sometimes you're on your own as far as

01:47:00,870 --> 01:47:04,440
support goes some of these are

01:47:02,460 --> 01:47:05,910
maintained some of them seem like maybe

01:47:04,440 --> 01:47:08,310
a little project that was an interesting

01:47:05,910 --> 01:47:10,080
hack but maybe not might not be working

01:47:08,310 --> 01:47:11,220
as well so be a little bit careful with

01:47:10,080 --> 01:47:13,440
these I wouldn't say that they're in a

01:47:11,220 --> 01:47:14,340
perfect solution but an interesting

01:47:13,440 --> 01:47:16,230
thing that you might be able to take a

01:47:14,340 --> 01:47:18,330
toy and just immediately do some control

01:47:16,230 --> 01:47:19,680
with it using Python again that's a

01:47:18,330 --> 01:47:21,630
tethered example where it's Python on

01:47:19,680 --> 01:47:23,220
your computer controlling those and

01:47:21,630 --> 01:47:25,860
there is a neat little robot that I

01:47:23,220 --> 01:47:27,510
found that can actually do somewhat

01:47:25,860 --> 01:47:29,790
Native control of Python so this is a

01:47:27,510 --> 01:47:32,160
robot called Edison and it's a little

01:47:29,790 --> 01:47:35,160
two-wheeled robot but it also has a

01:47:32,160 --> 01:47:36,570
light sensor on the bottom here and it's

01:47:35,160 --> 01:47:38,670
normally you can program this with a

01:47:36,570 --> 01:47:41,270
graphical programming language but the

01:47:38,670 --> 01:47:43,860
creators also provide a python-based

01:47:41,270 --> 01:47:46,050
editor here this EDI environment and

01:47:43,860 --> 01:47:47,910
this will actually you write Python code

01:47:46,050 --> 01:47:49,350
to control this robot so you can move it

01:47:47,910 --> 01:47:50,520
forward move it left right you can read

01:47:49,350 --> 01:47:52,860
the sensor

01:47:50,520 --> 01:47:55,290
and doing that all in Python code but

01:47:52,860 --> 01:47:57,660
it's not actually a version of like

01:47:55,290 --> 01:47:59,460
maybe micro Python or C Python that

01:47:57,660 --> 01:48:00,660
you're using they call it a Python like

01:47:59,460 --> 01:48:01,920
language because I think what they're

01:48:00,660 --> 01:48:04,380
actually doing is just converting that

01:48:01,920 --> 01:48:06,090
Python code into native instructions

01:48:04,380 --> 01:48:07,350
that can run on the robot but in any

01:48:06,090 --> 01:48:08,550
event though you're still programming it

01:48:07,350 --> 01:48:10,830
with Python it's just you don't have

01:48:08,550 --> 01:48:12,180
access to all the Python libraries that

01:48:10,830 --> 01:48:14,520
you might expect so you know you're just

01:48:12,180 --> 01:48:15,840
limited to the basic robot control but a

01:48:14,520 --> 01:48:18,000
really cool option that you might want

01:48:15,840 --> 01:48:20,760
to look at for all native control you

01:48:18,000 --> 01:48:22,440
know teaching how to program with Python

01:48:20,760 --> 01:48:26,550
you could again make me a physical

01:48:22,440 --> 01:48:28,920
version the local robot using that okay

01:48:26,550 --> 01:48:31,230
so let's talk about IO devices so IO

01:48:28,920 --> 01:48:33,120
devices these are things that plug into

01:48:31,230 --> 01:48:35,400
your computer and give you some

01:48:33,120 --> 01:48:38,130
interface to like a sensor or an

01:48:35,400 --> 01:48:40,800
actuator like a servo all of these are

01:48:38,130 --> 01:48:42,420
tethered examples because your computer

01:48:40,800 --> 01:48:44,280
is what's controlling these basically

01:48:42,420 --> 01:48:45,600
this just goes a little bit further down

01:48:44,280 --> 01:48:48,300
you can see kind of that gradient of

01:48:45,600 --> 01:48:50,070
complexity from easy to most difficult

01:48:48,300 --> 01:48:51,810
at the bottom and so this is maybe a

01:48:50,070 --> 01:48:53,220
little more difficult than some of the

01:48:51,810 --> 01:48:54,570
programmable bricks and toys where they

01:48:53,220 --> 01:48:55,380
try to take away all the electronics

01:48:54,570 --> 01:48:56,880
you're not too worried about wiring

01:48:55,380 --> 01:48:59,010
things up with a lot of these i/o

01:48:56,880 --> 01:49:00,420
devices you might get a raw sensor but

01:48:59,010 --> 01:49:02,310
they take care of interfacing with your

01:49:00,420 --> 01:49:04,320
computer so most of these are like USB

01:49:02,310 --> 01:49:05,940
devices that you plug in and you have a

01:49:04,320 --> 01:49:08,340
library that you can use to get started

01:49:05,940 --> 01:49:10,020
with for those and one example is

01:49:08,340 --> 01:49:12,090
actually mentioned in the original paper

01:49:10,020 --> 01:49:14,250
for the my interactive garden project

01:49:12,090 --> 01:49:16,950
are these devices called fidgets and so

01:49:14,250 --> 01:49:18,990
these are USB sensors and actuators I

01:49:16,950 --> 01:49:21,030
almost think these like grown up little

01:49:18,990 --> 01:49:22,200
bits so there you can get all kinds of

01:49:21,030 --> 01:49:24,630
different sensors and you can see the

01:49:22,200 --> 01:49:25,800
table here of just a little sampling of

01:49:24,630 --> 01:49:27,450
what they sell so you know everything

01:49:25,800 --> 01:49:30,450
from like temperature to amenity sensor

01:49:27,450 --> 01:49:33,120
to servos linear actuators but these are

01:49:30,450 --> 01:49:35,310
closer to the actual hardware so you

01:49:33,120 --> 01:49:36,180
might have to wire up relays for example

01:49:35,310 --> 01:49:37,950
so you might need to learn a little bit

01:49:36,180 --> 01:49:39,960
more about electronics but they give you

01:49:37,950 --> 01:49:41,430
a USB output so you just plug the USB

01:49:39,960 --> 01:49:43,200
port of your relay board for example

01:49:41,430 --> 01:49:45,120
into your computer and then they have a

01:49:43,200 --> 01:49:46,170
really comprehensive set of libraries

01:49:45,120 --> 01:49:48,060
for pretty much every programming

01:49:46,170 --> 01:49:49,800
language I'm including Python so you

01:49:48,060 --> 01:49:52,140
download their Python library install a

01:49:49,800 --> 01:49:53,460
driver maybe on Windows and you're good

01:49:52,140 --> 01:49:55,410
to go you start writing code and

01:49:53,460 --> 01:49:57,300
controlling a servo turning on some

01:49:55,410 --> 01:49:58,920
lights some things like that so that's

01:49:57,300 --> 01:50:01,590
an interesting option it's kind of in a

01:49:58,920 --> 01:50:02,820
middle ground of complexity there's some

01:50:01,590 --> 01:50:04,219
boards though like the circuit

01:50:02,820 --> 01:50:06,349
playground the board that we

01:50:04,219 --> 01:50:08,210
created a fruit and let's see I have an

01:50:06,349 --> 01:50:10,159
example of it grab it right here

01:50:08,210 --> 01:50:12,349
basically this is a board that

01:50:10,159 --> 01:50:14,809
integrates a lot of components onto a

01:50:12,349 --> 01:50:17,630
single board so it has lights it has a

01:50:14,809 --> 01:50:19,340
sound sensor it has a little speaker on

01:50:17,630 --> 01:50:22,369
it it has temperature sensor and

01:50:19,340 --> 01:50:23,599
accelerometer text kind of movement and

01:50:22,369 --> 01:50:25,670
there's an interesting thing that we did

01:50:23,599 --> 01:50:27,229
where we created this thing for model

01:50:25,670 --> 01:50:29,090
firmware that kind of mentioned before

01:50:27,229 --> 01:50:31,429
so you can load this firmata firmware

01:50:29,090 --> 01:50:32,929
onto this board and there's a Python API

01:50:31,429 --> 01:50:35,809
that we make available where you can

01:50:32,929 --> 01:50:37,489
call Python code to interact with all of

01:50:35,809 --> 01:50:39,559
the hardware on this board I'll show a

01:50:37,489 --> 01:50:41,449
demo later of that but this is maybe an

01:50:39,559 --> 01:50:43,130
easier option where you plug this into

01:50:41,449 --> 01:50:44,929
your computer you have Python running on

01:50:43,130 --> 01:50:46,249
your computer and suddenly you can light

01:50:44,929 --> 01:50:47,449
up some lights you can read some

01:50:46,249 --> 01:50:48,920
temperature sensors and do some

01:50:47,449 --> 01:50:51,349
interesting things so I'll show you more

01:50:48,920 --> 01:50:53,449
later after we get through the rest of

01:50:51,349 --> 01:50:55,699
this there's also a class of these i/o

01:50:53,449 --> 01:50:57,380
devices that are called HCI devices or

01:50:55,699 --> 01:50:59,840
human control interfaces these are

01:50:57,380 --> 01:51:02,360
basically devices that look like a USB

01:50:59,840 --> 01:51:04,610
keyboard or mouse so you plug them into

01:51:02,360 --> 01:51:06,320
your computer and then suddenly you know

01:51:04,610 --> 01:51:08,510
maybe the device in the upper right

01:51:06,320 --> 01:51:10,610
that's called makey makey that's based

01:51:08,510 --> 01:51:12,559
on capacitive touch so if you touch one

01:51:10,610 --> 01:51:14,630
of those pads on there it sends like an

01:51:12,559 --> 01:51:16,969
arrow or a button press to your computer

01:51:14,630 --> 01:51:18,440
and then below their cert 2 playground

01:51:16,969 --> 01:51:19,789
you can actually program that to act

01:51:18,440 --> 01:51:21,530
like a make you make you or with

01:51:19,789 --> 01:51:23,300
capacitive touch it will send key

01:51:21,530 --> 01:51:26,210
presses that's kind of the canonical

01:51:23,300 --> 01:51:28,340
example I think of capacitor touches the

01:51:26,210 --> 01:51:30,079
fruit keyboard where you have a bunch of

01:51:28,340 --> 01:51:32,570
pieces of fruit if you just connect them

01:51:30,079 --> 01:51:34,190
up to the capacitor touch inputs it can

01:51:32,570 --> 01:51:36,409
detect even the capacitance of touching

01:51:34,190 --> 01:51:38,059
the piece of fruit maybe play sounds and

01:51:36,409 --> 01:51:39,139
things now the cool thing with this you

01:51:38,059 --> 01:51:41,840
know you're not programming these

01:51:39,139 --> 01:51:44,150
devices but you can use them with Python

01:51:41,840 --> 01:51:46,249
programs or really any kind of program

01:51:44,150 --> 01:51:48,050
and so this was a neat example I saw at

01:51:46,249 --> 01:51:50,719
world Maker Faire last year in New York

01:51:48,050 --> 01:51:52,639
a teacher basically did a project where

01:51:50,719 --> 01:51:55,340
he had his students create these pinball

01:51:52,639 --> 01:51:57,289
tables and it was making makey powered

01:51:55,340 --> 01:51:59,179
so they would hook up to all the bumpers

01:51:57,289 --> 01:52:01,219
on the pinball table little pieces of

01:51:59,179 --> 01:52:02,840
aluminum foil so when the metal ball

01:52:01,219 --> 01:52:04,639
would roll across and maybe hit one of

01:52:02,840 --> 01:52:06,289
the bumpers the makey makey could detect

01:52:04,639 --> 01:52:08,059
that and send a key press to the

01:52:06,289 --> 01:52:09,530
computer and you can see above there was

01:52:08,059 --> 01:52:10,999
like a scratch program running so they

01:52:09,530 --> 01:52:12,110
could play sound effects or you know

01:52:10,999 --> 01:52:13,789
maybe keep the high score or something

01:52:12,110 --> 01:52:15,079
like that so that's I think a really

01:52:13,789 --> 01:52:17,210
cool example that you could use these

01:52:15,079 --> 01:52:17,869
HCI devices with Python you can imagine

01:52:17,210 --> 01:52:19,789
maybe like a

01:52:17,869 --> 01:52:21,289
tie game program maybe you know version

01:52:19,789 --> 01:52:23,510
a breakout or asteroids or something

01:52:21,289 --> 01:52:24,829
where now you build a physical interface

01:52:23,510 --> 01:52:26,209
but you don't have to worry about the

01:52:24,829 --> 01:52:27,530
complexity of like trying to design his

01:52:26,209 --> 01:52:29,989
hardware use something like Mickey

01:52:27,530 --> 01:52:31,280
Mickey and you know just detecting some

01:52:29,989 --> 01:52:33,079
of the touch of something or maybe a

01:52:31,280 --> 01:52:34,789
metal object touching it and that can

01:52:33,079 --> 01:52:36,829
add interactivity to some of your

01:52:34,789 --> 01:52:39,949
projects for that so really interesting

01:52:36,829 --> 01:52:42,019
kind of use of that device there okay so

01:52:39,949 --> 01:52:44,419
let's talk about microcontrollers real

01:52:42,019 --> 01:52:47,269
fast microcontrollers these are tiny

01:52:44,419 --> 01:52:48,800
little computers so you can write code

01:52:47,269 --> 01:52:50,599
you can load the code on these devices

01:52:48,800 --> 01:52:52,099
they'll run it just like your laptop or

01:52:50,599 --> 01:52:53,840
your desktop computer but the big

01:52:52,099 --> 01:52:56,229
difference is that these are much more

01:52:53,840 --> 01:52:59,059
constrained so you have a lot less

01:52:56,229 --> 01:53:00,469
resources like memory so on your laptop

01:52:59,059 --> 01:53:02,269
you might have gigabytes of memory on a

01:53:00,469 --> 01:53:04,999
microcontroller you're lucky to have

01:53:02,269 --> 01:53:06,530
kilobytes of memory so it's you know a

01:53:04,999 --> 01:53:09,979
little bit of a trade-off in some cases

01:53:06,530 --> 01:53:12,169
usually there are smaller more less cost

01:53:09,979 --> 01:53:14,449
in a lot of cases than compared to

01:53:12,169 --> 01:53:16,610
larger computers now one of sitting with

01:53:14,449 --> 01:53:18,709
my controllers you can do tethered

01:53:16,610 --> 01:53:20,209
control so I have Python on your

01:53:18,709 --> 01:53:21,979
computer controlling some

01:53:20,209 --> 01:53:23,840
microcontrollers and that's using an

01:53:21,979 --> 01:53:25,879
Arduino and so Arduino is a platform for

01:53:23,840 --> 01:53:27,709
electronics learning been around for

01:53:25,879 --> 01:53:29,989
quite a while and typically with Arduino

01:53:27,709 --> 01:53:31,519
you write code in the Arduino

01:53:29,989 --> 01:53:33,709
programming language which is C and C++

01:53:31,519 --> 01:53:35,030
based you use the Arduino editor and you

01:53:33,709 --> 01:53:37,159
load that code onto the board and it

01:53:35,030 --> 01:53:39,169
runs it natively but you can use this

01:53:37,159 --> 01:53:41,389
thing called firmata and so firmata is a

01:53:39,169 --> 01:53:43,249
special arduino sketch or we know

01:53:41,389 --> 01:53:45,439
firmware that you load onto your Arduino

01:53:43,249 --> 01:53:47,719
board and it basically makes that board

01:53:45,439 --> 01:53:49,820
controllable by any device that connects

01:53:47,719 --> 01:53:50,899
the Arduino like your computer so

01:53:49,820 --> 01:53:52,550
there's a little protocol that it

01:53:50,899 --> 01:53:54,169
implements and then when that board is

01:53:52,550 --> 01:53:55,820
connected to the computer your computer

01:53:54,169 --> 01:53:57,649
can basically take over the Arduino and

01:53:55,820 --> 01:53:59,780
say okay all of your inputs and outputs

01:53:57,649 --> 01:54:01,340
I want to control individually I want to

01:53:59,780 --> 01:54:02,959
set an output high or I want to read one

01:54:01,340 --> 01:54:04,669
of your inputs or read an analog input

01:54:02,959 --> 01:54:06,320
or maybe control an LED that's

01:54:04,669 --> 01:54:08,119
connecting to the board so that's a

01:54:06,320 --> 01:54:10,159
really powerful example of tethered

01:54:08,119 --> 01:54:12,019
control where you know maybe you don't

01:54:10,159 --> 01:54:13,849
have a board that can run Python

01:54:12,019 --> 01:54:15,320
natively but you want your computer to

01:54:13,849 --> 01:54:16,999
do something with hardware well if your

01:54:15,320 --> 01:54:18,679
computer can talk to an Arduino then

01:54:16,999 --> 01:54:20,179
that Arduino can interface with all of

01:54:18,679 --> 01:54:21,590
your hardware and you can control like

01:54:20,179 --> 01:54:22,909
switches or maybe

01:54:21,590 --> 01:54:24,770
you know turn an LED on and off for

01:54:22,909 --> 01:54:27,020
example or maybe control a servo to move

01:54:24,770 --> 01:54:28,969
a robot around and I also just want to

01:54:27,020 --> 01:54:30,679
mention too there are a couple really

01:54:28,969 --> 01:54:32,659
good for model libraries you can use

01:54:30,679 --> 01:54:34,520
with python there's there's a bunch out

01:54:32,659 --> 01:54:37,010
there I've used a few in PI Mata a IO

01:54:34,520 --> 01:54:38,630
and it's kind of a more advanced library

01:54:37,010 --> 01:54:40,340
use the async i/o interface so if you're

01:54:38,630 --> 01:54:42,500
doing really cool advanced stuff with

01:54:40,340 --> 01:54:44,449
Python 3 that's a good one to look at or

01:54:42,500 --> 01:54:46,760
just the older PI model library these

01:54:44,449 --> 01:54:48,440
are both created by the same person that

01:54:46,760 --> 01:54:50,449
one works without async i/o it's a

01:54:48,440 --> 01:54:52,040
little bit simpler but they give you

01:54:50,449 --> 01:54:53,330
that control over your Arduino again a

01:54:52,040 --> 01:54:55,429
tethered example where you have a

01:54:53,330 --> 01:54:57,020
microcontroller but your computer ran

01:54:55,429 --> 01:54:59,869
Python on your computer's controlling it

01:54:57,020 --> 01:55:02,270
and then there's also a class of boards

01:54:59,869 --> 01:55:03,949
where you can run Python natively on

01:55:02,270 --> 01:55:05,060
them and these are actually pretty new

01:55:03,949 --> 01:55:06,739
and you might have heard of these I

01:55:05,060 --> 01:55:08,840
think Scott actually talked about them

01:55:06,739 --> 01:55:10,880
earlier in a lightning talk basically

01:55:08,840 --> 01:55:12,949
these are boards that run a version of

01:55:10,880 --> 01:55:14,750
Python 2 there it's called micro Python

01:55:12,949 --> 01:55:16,340
and what you're seeing this is the first

01:55:14,750 --> 01:55:18,230
micro Python board the PI board it's

01:55:16,340 --> 01:55:21,380
created by the creator of micro Python

01:55:18,230 --> 01:55:23,750
and basically this runs almost a

01:55:21,380 --> 01:55:25,760
complete Python interpreter I think 90%

01:55:23,750 --> 01:55:27,110
of the Python 3 language is implemented

01:55:25,760 --> 01:55:30,290
I went through all the differences and

01:55:27,110 --> 01:55:32,300
it's very obscure differences I mean you

01:55:30,290 --> 01:55:33,800
can do object-oriented programming you

01:55:32,300 --> 01:55:35,750
can do functional programming you can do

01:55:33,800 --> 01:55:37,369
lots of things with microplate on the

01:55:35,750 --> 01:55:40,310
one thing is you don't have access to

01:55:37,369 --> 01:55:41,690
the standard Python library so all of

01:55:40,310 --> 01:55:43,580
the modules that you might use on your

01:55:41,690 --> 01:55:44,300
desktop aren't necessarily available in

01:55:43,580 --> 01:55:45,500
microfibe

01:55:44,300 --> 01:55:47,090
again just because of the memory

01:55:45,500 --> 01:55:48,199
constraints so like this micro Python

01:55:47,090 --> 01:55:49,880
board here just has like a few hundred

01:55:48,199 --> 01:55:52,280
kilobytes of memory so you're never

01:55:49,880 --> 01:55:54,560
going to fit all of them Python modules

01:55:52,280 --> 01:55:56,239
onto it but they're making really good

01:55:54,560 --> 01:55:58,520
progress as far as adding things like

01:55:56,239 --> 01:56:00,320
you know json decoding there's even like

01:55:58,520 --> 01:56:02,810
regular expression parsing and things

01:56:00,320 --> 01:56:04,280
like that so again so that's Python

01:56:02,810 --> 01:56:06,440
running on your microcontroller

01:56:04,280 --> 01:56:08,270
the pi board there is a really cool

01:56:06,440 --> 01:56:10,340
examples that was the first board it's a

01:56:08,270 --> 01:56:11,900
really powerful board it uses this

01:56:10,340 --> 01:56:13,429
really powerful microcontroller that has

01:56:11,900 --> 01:56:15,110
a lot of memory and a lot of peripherals

01:56:13,429 --> 01:56:17,300
but it shows off a lot of the cool

01:56:15,110 --> 01:56:18,500
features of microphone and one other

01:56:17,300 --> 01:56:20,030
feature I just want to mention too with

01:56:18,500 --> 01:56:22,730
it is that my group I thought has a

01:56:20,030 --> 01:56:24,440
rebel built into the board so you know

01:56:22,730 --> 01:56:26,239
when you run Python on your desktop you

01:56:24,440 --> 01:56:27,679
can interactively enter Python code and

01:56:26,239 --> 01:56:30,110
see the results in the output

01:56:27,679 --> 01:56:31,820
exact same thing applies to micro Python

01:56:30,110 --> 01:56:33,290
where you can connect a micro Python

01:56:31,820 --> 01:56:34,620
board to your computer and suddenly

01:56:33,290 --> 01:56:35,910
start issuing commands and

01:56:34,620 --> 01:56:37,590
running Python code interactively and

01:56:35,910 --> 01:56:39,420
that's very powerful I think for

01:56:37,590 --> 01:56:40,830
education because you don't have to

01:56:39,420 --> 01:56:42,420
learn about you know with typical

01:56:40,830 --> 01:56:44,400
microcontrollers you've got a compiled

01:56:42,420 --> 01:56:46,650
code and upload it and learn this whole

01:56:44,400 --> 01:56:48,660
tool chain with micro Python plug the

01:56:46,650 --> 01:56:50,100
board in and start running code and

01:56:48,660 --> 01:56:51,270
seeing the results of it and I should

01:56:50,100 --> 01:56:53,520
also just say that it is a little bit

01:56:51,270 --> 01:56:54,780
early days with micro Python so it's

01:56:53,520 --> 01:56:57,150
only about three or four years old as

01:56:54,780 --> 01:56:58,620
far as project goes so compared like the

01:56:57,150 --> 01:57:01,650
Arduino ecosystem there's not as many

01:56:58,620 --> 01:57:02,760
tools and editors and documentation and

01:57:01,650 --> 01:57:04,380
things a lot of that stuff is being

01:57:02,760 --> 01:57:05,460
built right now so it's a good

01:57:04,380 --> 01:57:06,630
opportunity if you want to contribute to

01:57:05,460 --> 01:57:08,460
a lot of projects I think put a lot of

01:57:06,630 --> 01:57:09,780
opportunities in air forward I want to

01:57:08,460 --> 01:57:11,010
run through real fast just a few of the

01:57:09,780 --> 01:57:13,140
micro Python boards that are out there

01:57:11,010 --> 01:57:14,640
to just give you an idea of what's

01:57:13,140 --> 01:57:17,130
available and what might be interesting

01:57:14,640 --> 01:57:18,990
so all these boards run micro Python so

01:57:17,130 --> 01:57:21,060
you can program them with Python the

01:57:18,990 --> 01:57:22,590
esp8266 is a really popular little

01:57:21,060 --> 01:57:24,570
low-cost Wi-Fi microcontroller

01:57:22,590 --> 01:57:26,370
originally built for a smart light bulb

01:57:24,570 --> 01:57:27,750
and then the creators realized oh the

01:57:26,370 --> 01:57:29,100
open-source community loves this thing

01:57:27,750 --> 01:57:30,180
like let's give them the tool chain and

01:57:29,100 --> 01:57:32,280
let them go wild with it

01:57:30,180 --> 01:57:33,720
so micro Python is ported to it it's a

01:57:32,280 --> 01:57:35,430
really good balance of price and

01:57:33,720 --> 01:57:37,290
performance you get a decent amount of

01:57:35,430 --> 01:57:38,880
memory less memory than like the pi

01:57:37,290 --> 01:57:40,830
board but it's less expensive than the

01:57:38,880 --> 01:57:43,500
pi board but you don't have a lot of i/o

01:57:40,830 --> 01:57:45,150
so you can't control a lot of devices it

01:57:43,500 --> 01:57:46,710
just has a few digital inputs and

01:57:45,150 --> 01:57:48,450
outputs and just one analog digital

01:57:46,710 --> 01:57:50,430
converter because they'll do a lot with

01:57:48,450 --> 01:57:51,660
that it does have Wi-Fi control and

01:57:50,430 --> 01:57:53,610
there's really good support for that in

01:57:51,660 --> 01:57:56,580
micro Python so this is great for like

01:57:53,610 --> 01:57:58,170
IOT scenarios but it's also you know

01:57:56,580 --> 01:58:00,960
just a good option to just get started

01:57:58,170 --> 01:58:02,130
with micro Python there's also the micro

01:58:00,960 --> 01:58:04,350
bit which you've heard a lot about of

01:58:02,130 --> 01:58:06,390
earlier today so that's an excellent

01:58:04,350 --> 01:58:07,980
board the BBC created and gave to I

01:58:06,390 --> 01:58:09,780
think all the seventh graders in the

01:58:07,980 --> 01:58:11,610
United Kingdom and that's a board that

01:58:09,780 --> 01:58:13,290
originally I think written to be a

01:58:11,610 --> 01:58:14,730
program with different like graphical

01:58:13,290 --> 01:58:16,920
programming languages but a port of

01:58:14,730 --> 01:58:18,360
micro Python was made for it and it's

01:58:16,920 --> 01:58:20,040
really amazing because this fall is kind

01:58:18,360 --> 01:58:21,180
of on the low end of capabilities

01:58:20,040 --> 01:58:23,790
there's not a lot of memory on this

01:58:21,180 --> 01:58:25,620
board but it's still able to run a full

01:58:23,790 --> 01:58:27,000
Python interpreter but the one thing to

01:58:25,620 --> 01:58:29,070
know is that you don't I think you only

01:58:27,000 --> 01:58:30,990
have around 4 kilobytes or so of memory

01:58:29,070 --> 01:58:32,460
for your code so don't expect to do a

01:58:30,990 --> 01:58:35,100
ton of things but you can still do some

01:58:32,460 --> 01:58:37,080
very cool interactive projects with this

01:58:35,100 --> 01:58:38,400
there's a really comprehensive API

01:58:37,080 --> 01:58:40,020
that's available that gives you access

01:58:38,400 --> 01:58:41,430
to all of the sensors and components on

01:58:40,020 --> 01:58:44,040
this board there's a grid of LEDs

01:58:41,430 --> 01:58:44,849
there's a compass some buttons and

01:58:44,040 --> 01:58:45,960
things like that so

01:58:44,849 --> 01:58:47,520
really easy to get started with Python

01:58:45,960 --> 01:58:49,770
there's also really good tooling for

01:58:47,520 --> 01:58:51,840
this one too so there's an online editor

01:58:49,770 --> 01:58:53,550
or you just go to a web page type in

01:58:51,840 --> 01:58:55,530
your Python code it gives you a file and

01:58:53,550 --> 01:58:56,699
you can copy it onto the board and get

01:58:55,530 --> 01:58:58,349
started there's also a desktop editor

01:58:56,699 --> 01:59:01,320
tooth that's that's a good option to get

01:58:58,349 --> 01:59:03,000
started with especially for beginner and

01:59:01,320 --> 01:59:05,130
then there also some boards that we may

01:59:03,000 --> 01:59:07,699
create it from here so these are the m0

01:59:05,130 --> 01:59:09,929
boards we have the feather m0 Metro m0

01:59:07,699 --> 01:59:11,730
they also board called the circuit

01:59:09,929 --> 01:59:14,489
playground express all of these use the

01:59:11,730 --> 01:59:16,920
same processor this Atmel Sam D 21

01:59:14,489 --> 01:59:18,659
processor it's an Arduino based or

01:59:16,920 --> 01:59:20,909
processor that came from a line of

01:59:18,659 --> 01:59:23,130
Arduino but we've been able to port

01:59:20,909 --> 01:59:24,840
micro Python to it and we actually call

01:59:23,130 --> 01:59:26,820
it circuit Python so we took micro

01:59:24,840 --> 01:59:28,380
Python and created derivative because we

01:59:26,820 --> 01:59:30,300
want to kind of simplify some of the

01:59:28,380 --> 01:59:31,949
api's and make it a little bit easier so

01:59:30,300 --> 01:59:33,840
that when you get started you know right

01:59:31,949 --> 01:59:35,849
now each of the micro Python boards is a

01:59:33,840 --> 01:59:37,829
little bit different in how they expose

01:59:35,849 --> 01:59:38,790
their hardware so since we have a lot of

01:59:37,829 --> 01:59:40,530
different boards that we create from

01:59:38,790 --> 01:59:43,079
Adafruit we want to have one API that

01:59:40,530 --> 01:59:44,280
everyone uses to use our hardware so

01:59:43,079 --> 01:59:45,480
that's kind of why we took it in called

01:59:44,280 --> 01:59:47,550
circuit Python just so it's not as

01:59:45,480 --> 01:59:50,040
confusing but it's based on micro Python

01:59:47,550 --> 01:59:51,630
it's derived from that code and it's

01:59:50,040 --> 01:59:53,760
these are excellent boards they're a

01:59:51,630 --> 01:59:54,960
little more memory than the micro bit so

01:59:53,760 --> 01:59:57,389
they have 32 kilobytes of memory

01:59:54,960 --> 01:59:58,650
compared like 16 kilobytes but they're

01:59:57,389 --> 02:00:00,000
kind of hitting that sweet spot of price

01:59:58,650 --> 02:00:01,860
to performance so they're not as

02:00:00,000 --> 02:00:03,300
powerful as the pi board they're

02:00:01,860 --> 02:00:06,060
actually a little less powerful than the

02:00:03,300 --> 02:00:07,800
esp8266 but you can get some more

02:00:06,060 --> 02:00:09,060
interesting options and the circuit

02:00:07,800 --> 02:00:10,560
playground express so I'll talk more

02:00:09,060 --> 02:00:11,550
about that but that's a version of the

02:00:10,560 --> 02:00:13,199
circuit playground board that I

02:00:11,550 --> 02:00:15,179
mentioned it has things like lights and

02:00:13,199 --> 02:00:17,400
sensors built into it but it has this

02:00:15,179 --> 02:00:19,079
sandy 21 processor where you can run

02:00:17,400 --> 02:00:22,020
micro Python and we'll look at a demo

02:00:19,079 --> 02:00:23,429
that a moment here and then the y pine

02:00:22,020 --> 02:00:26,010
the low pi these are from a company

02:00:23,429 --> 02:00:28,530
called pi comm these are very cool IOT

02:00:26,010 --> 02:00:30,570
focused boards so all of these boards

02:00:28,530 --> 02:00:32,909
have interesting things like radios the

02:00:30,570 --> 02:00:34,590
low pi has this 900 megahertz radio that

02:00:32,909 --> 02:00:37,079
can do like mile-long wireless

02:00:34,590 --> 02:00:39,060
communication a really cool thing a

02:00:37,079 --> 02:00:40,440
little more IOT focused not so much

02:00:39,060 --> 02:00:41,639
maybe education focus but you could

02:00:40,440 --> 02:00:43,980
certainly use these and maybe more

02:00:41,639 --> 02:00:45,150
advanced classes and also I just want to

02:00:43,980 --> 02:00:47,610
mention pi comm has some really cool

02:00:45,150 --> 02:00:49,139
stuff of doing they have some apps and a

02:00:47,610 --> 02:00:51,389
whole kind of desktop editor there's a

02:00:49,139 --> 02:00:52,349
plugin for the atom text editor and I

02:00:51,389 --> 02:00:53,969
think they're doing working on a cloud

02:00:52,349 --> 02:00:56,289
system so they're putting a lot of

02:00:53,969 --> 02:00:58,239
effort into and more of an ecosystem

02:00:56,289 --> 02:01:00,099
their boards there that you can look at

02:00:58,239 --> 02:01:02,889
so again those are all micro Python

02:01:00,099 --> 02:01:04,749
boards they run Python code natively on

02:01:02,889 --> 02:01:06,699
them and there are a lot of cool things

02:01:04,749 --> 02:01:08,229
and I expect this time next year we'll

02:01:06,699 --> 02:01:09,459
probably have a whole new crop of boards

02:01:08,229 --> 02:01:11,709
because there's a lot of movement a lot

02:01:09,459 --> 02:01:13,719
of new things coming out with that ok at

02:01:11,709 --> 02:01:15,669
the end here real quickly many computers

02:01:13,719 --> 02:01:17,289
so this is the last category this is at

02:01:15,669 --> 02:01:19,989
the bottom so this is the most complex

02:01:17,289 --> 02:01:22,059
and the the difference between a mini

02:01:19,989 --> 02:01:24,939
computer and a microcontroller is that

02:01:22,059 --> 02:01:26,499
many computers are usually larger as far

02:01:24,939 --> 02:01:28,780
as they have more memory and they

02:01:26,499 --> 02:01:30,669
usually run a full operating system so

02:01:28,780 --> 02:01:32,289
something like a Linux or they're in

02:01:30,669 --> 02:01:34,089
Windows versions that run on these mini

02:01:32,289 --> 02:01:35,859
computers and so that just brings a

02:01:34,089 --> 02:01:37,869
little more complexity because you know

02:01:35,859 --> 02:01:39,399
if you're new completely to physical

02:01:37,869 --> 02:01:41,589
computing you might need to learn about

02:01:39,399 --> 02:01:43,089
electronics and microcontrollers and

02:01:41,589 --> 02:01:44,679
then with mini computers now you have to

02:01:43,089 --> 02:01:46,780
learn about like Linux and command-line

02:01:44,679 --> 02:01:47,949
and some of things like that so you know

02:01:46,780 --> 02:01:50,260
just be aware of like you get more

02:01:47,949 --> 02:01:51,699
capabilities usually you can use the

02:01:50,260 --> 02:01:52,539
full version like see Python on these

02:01:51,699 --> 02:01:54,010
machines

02:01:52,539 --> 02:01:55,959
but there's more complexity that comes

02:01:54,010 --> 02:01:58,030
with that and the Raspberry Pi of course

02:01:55,959 --> 02:02:00,909
is kind of the most well-known one it's

02:01:58,030 --> 02:02:03,010
a huge success it was created as the

02:02:00,909 --> 02:02:05,409
Raspberry Pi foundation as an education

02:02:03,010 --> 02:02:06,549
focused board and there are multiple

02:02:05,409 --> 02:02:09,069
variants of it now you can get small

02:02:06,549 --> 02:02:11,349
boards in Raspberry Pi 0 so really cool

02:02:09,069 --> 02:02:13,659
board there's an ecosystem of apps that

02:02:11,349 --> 02:02:15,549
are expansion boards that kind of stack

02:02:13,659 --> 02:02:17,829
on and you can add things like motor

02:02:15,549 --> 02:02:19,719
controllers or LCD displays and things

02:02:17,829 --> 02:02:21,789
so you know if you're looking at a mini

02:02:19,719 --> 02:02:23,559
computer the Raspberry Pi is the first

02:02:21,789 --> 02:02:24,849
one to look at for sure and there's

02:02:23,559 --> 02:02:28,119
really good Python support for it so

02:02:24,849 --> 02:02:31,929
this natively runs C Python either 2 or

02:02:28,119 --> 02:02:34,479
3 both versions great GPIO libraries and

02:02:31,929 --> 02:02:36,010
a huge ecosystem of just people using it

02:02:34,479 --> 02:02:38,049
lots of guides and tutorials and

02:02:36,010 --> 02:02:39,519
information available other mini

02:02:38,049 --> 02:02:41,409
computers just real fast I mentioned

02:02:39,519 --> 02:02:43,359
their board like the BeagleBone black a

02:02:41,409 --> 02:02:44,919
really good one for drones because it

02:02:43,359 --> 02:02:46,569
has this really cool real-time control

02:02:44,919 --> 02:02:48,999
the one thing to be aware with other

02:02:46,569 --> 02:02:50,889
boards just be careful of boards that

02:02:48,999 --> 02:02:52,809
say that their Raspberry Pi compatible

02:02:50,889 --> 02:02:54,939
you know just because they have a 26 pin

02:02:52,809 --> 02:02:56,589
header doesn't mean that all the same

02:02:54,939 --> 02:02:58,149
software will work because if it's a

02:02:56,589 --> 02:03:00,010
different chipset your Raspberry Pi

02:02:58,149 --> 02:03:01,510
driver might not work with that board so

02:03:00,010 --> 02:03:02,530
you might go to plug the hardware in but

02:03:01,510 --> 02:03:03,969
you might not be able to control very

02:03:02,530 --> 02:03:05,439
well so you know be aware sometimes a

02:03:03,969 --> 02:03:07,690
lot of the manufacturers like to claim

02:03:05,439 --> 02:03:10,270
like a its Raspberry Pi compatible

02:03:07,690 --> 02:03:12,100
that's not the full story so okay so

02:03:10,270 --> 02:03:15,130
here's a quick little summary this is

02:03:12,100 --> 02:03:16,690
the updated table that I made and I

02:03:15,130 --> 02:03:18,670
won't go through this because actually

02:03:16,690 --> 02:03:20,350
you can grab the slide deck here and

02:03:18,670 --> 02:03:21,880
then look at the table later and real

02:03:20,350 --> 02:03:24,730
fast I just wanted to run through two

02:03:21,880 --> 02:03:26,770
little demos in the last few minutes

02:03:24,730 --> 02:03:28,930
that I have so I'll show an example of

02:03:26,770 --> 02:03:30,790
tethered control of a circuit playground

02:03:28,930 --> 02:03:33,699
Usenet firmata and then I'll show an

02:03:30,790 --> 02:03:35,440
example of micro Python native control

02:03:33,699 --> 02:03:37,360
of Python on hardware so these are both

02:03:35,440 --> 02:03:39,070
using circuit playground boards so I'm

02:03:37,360 --> 02:03:40,930
going to plug in this is the circuit

02:03:39,070 --> 02:03:42,310
playground and I call it classic it's

02:03:40,930 --> 02:03:44,260
our older version of circuit playground

02:03:42,310 --> 02:03:45,699
and I'll show you the Express board in a

02:03:44,260 --> 02:03:47,980
moment so you know this one does not

02:03:45,699 --> 02:03:49,870
natively run Python but I've loaded it

02:03:47,980 --> 02:03:51,940
with that fermata firmware ahead of time

02:03:49,870 --> 02:03:53,800
and that's basically an Arduino sketch

02:03:51,940 --> 02:03:55,930
that you load on using the Arduino

02:03:53,800 --> 02:03:58,180
editor and okay so now it's connected to

02:03:55,930 --> 02:03:59,530
my machine and by default it's waiting

02:03:58,180 --> 02:04:01,480
for my computer to connect into place a

02:03:59,530 --> 02:04:05,219
little animation but what I'm going to

02:04:01,480 --> 02:04:08,500
do is open up a terminal right here and

02:04:05,219 --> 02:04:11,050
I'll bump up the screen size a little

02:04:08,500 --> 02:04:12,910
bit okay so this thing is connected and

02:04:11,050 --> 02:04:15,400
it shows up as a serial port and I'm

02:04:12,910 --> 02:04:17,350
going to run a command so I'm going to

02:04:15,400 --> 02:04:20,080
run a script that I wrote and python and

02:04:17,350 --> 02:04:21,580
this is using a little library that's

02:04:20,080 --> 02:04:23,380
using the Fermata protocol and it's

02:04:21,580 --> 02:04:24,400
going to start controlling this board so

02:04:23,380 --> 02:04:25,780
when I run this and it takes a moment

02:04:24,400 --> 02:04:27,340
it's using that PI model library that I

02:04:25,780 --> 02:04:28,350
mentioned it's going to connect to the

02:04:27,340 --> 02:04:31,330
board's going to figure out how many

02:04:28,350 --> 02:04:33,520
pens and things that it has but once it

02:04:31,330 --> 02:04:34,540
connects here in a second so now it's

02:04:33,520 --> 02:04:36,460
running and it's doing a little

02:04:34,540 --> 02:04:38,710
animation so it's animating the colors

02:04:36,460 --> 02:04:40,690
moving around this board and it's just a

02:04:38,710 --> 02:04:42,310
simple little API call that you call in

02:04:40,690 --> 02:04:43,840
python to do that if i press some of the

02:04:42,310 --> 02:04:45,630
buttons that changes like the speed of

02:04:43,840 --> 02:04:46,750
the animation or this button changes

02:04:45,630 --> 02:04:48,760
oops

02:04:46,750 --> 02:04:51,489
Oh looks like it may be crashed here oh

02:04:48,760 --> 02:04:53,560
the demo gods are not not not dealing

02:04:51,489 --> 02:04:55,239
well so all right well anyway so maybe

02:04:53,560 --> 02:04:56,710
this demo didn't work super well I have

02:04:55,239 --> 02:04:58,480
a feeling it's this little USB connector

02:04:56,710 --> 02:05:00,850
around the double Apple connector

02:04:58,480 --> 02:05:01,780
anyways let me show you native controls

02:05:00,850 --> 02:05:03,670
I was going to show you basically you

02:05:01,780 --> 02:05:06,160
can press the buttons and it changes the

02:05:03,670 --> 02:05:07,960
speed and the color of the animation but

02:05:06,160 --> 02:05:09,880
this is the exact same thing that I

02:05:07,960 --> 02:05:11,560
wanted to show with the firm auto

02:05:09,880 --> 02:05:13,030
control but this is native controls I

02:05:11,560 --> 02:05:15,219
just plugged in a battery you know it's

02:05:13,030 --> 02:05:17,140
not going to connect to any computer and

02:05:15,219 --> 02:05:19,900
this is cool because it's animating the

02:05:17,140 --> 02:05:21,910
pixels and if I press the buttons here

02:05:19,900 --> 02:05:23,500
see that changes the speed and then this

02:05:21,910 --> 02:05:25,870
button changes the color so changes to

02:05:23,500 --> 02:05:28,330
green and this is all Python code that's

02:05:25,870 --> 02:05:29,740
controlling this and if I plug this into

02:05:28,330 --> 02:05:31,660
my computer I don't know we'll see if

02:05:29,740 --> 02:05:33,940
this works although I think this USB

02:05:31,660 --> 02:05:36,190
adapter might not be working super well

02:05:33,940 --> 02:05:38,140
but Scott showed earlier with this board

02:05:36,190 --> 02:05:40,720
you can plug it into your computer and

02:05:38,140 --> 02:05:42,430
it shows up as a USB Drive so that you

02:05:40,720 --> 02:05:45,250
can actually access the Python code

02:05:42,430 --> 02:05:47,860
that's on your device so you see the

02:05:45,250 --> 02:05:50,350
circuit PI device and then this main dot

02:05:47,860 --> 02:05:52,990
pi is actually my Python code directly

02:05:50,350 --> 02:05:53,950
off the device and here it is in Adam

02:05:52,990 --> 02:05:56,410
text editor so you can see this is

02:05:53,950 --> 02:05:58,240
Python code that's running and I have a

02:05:56,410 --> 02:05:59,890
little circuit playground module that I

02:05:58,240 --> 02:06:02,470
created micro Python that gives me a

02:05:59,890 --> 02:06:03,910
little bit simpler access to control

02:06:02,470 --> 02:06:05,980
these so like this is the call right

02:06:03,910 --> 02:06:08,110
here that sets the color the pixels for

02:06:05,980 --> 02:06:10,060
example so just real quick little demo

02:06:08,110 --> 02:06:13,210
of OOP some examples that you can do

02:06:10,060 --> 02:06:14,800
with native control of micro Python on a

02:06:13,210 --> 02:06:16,680
board like this so this is the circuit

02:06:14,800 --> 02:06:19,240
playground Express board there's using

02:06:16,680 --> 02:06:22,660
so that's it I think we're probably just

02:06:19,240 --> 02:06:23,470
about out of time but thanks a lot and I

02:06:22,660 --> 02:06:27,820
don't know if we have time for any

02:06:23,470 --> 02:06:33,580
questions or anything ok you one or two

02:06:27,820 --> 02:06:34,860
questions essentially he said oh yeah

02:06:33,580 --> 02:06:53,850
question

02:06:34,860 --> 02:06:57,060
oh and you're like I'm oh it seemed like

02:06:53,850 --> 02:07:00,389
a network control of other hardware I

02:06:57,060 --> 02:07:02,489
don't but I have heard like node-red is

02:07:00,389 --> 02:07:03,869
kind of interesting it's thinking more

02:07:02,489 --> 02:07:05,100
on the Raspberry Pi I don't know if it

02:07:03,869 --> 02:07:06,300
works with a lot of hardware but it's

02:07:05,100 --> 02:07:08,100
just thing the IBM ads where they're

02:07:06,300 --> 02:07:09,570
trying to do all these IOT scenarios

02:07:08,100 --> 02:07:10,710
more I think look like a graphical

02:07:09,570 --> 02:07:13,110
interface where you just plug together

02:07:10,710 --> 02:07:14,760
devices and it like a graphical view you

02:07:13,110 --> 02:07:16,260
build this graph of like you know here's

02:07:14,760 --> 02:07:18,300
my output and here's some input and you

02:07:16,260 --> 02:07:20,369
just wire them together that might be

02:07:18,300 --> 02:07:22,679
sort of related but ya know I don't know

02:07:20,369 --> 02:07:25,350
anything that's maybe like fermata over

02:07:22,679 --> 02:07:27,060
the network necessarily unfortunately so

02:07:25,350 --> 02:07:29,520
but if you can find a tool that tunnels

02:07:27,060 --> 02:07:30,929
serial over network which I'm sure

02:07:29,520 --> 02:07:32,520
there's some kind of UNIX tool that does

02:07:30,929 --> 02:07:33,869
that then in theory you could probably

02:07:32,520 --> 02:07:38,639
make that work with fermata

02:07:33,869 --> 02:07:41,130
over network yeah right mqtt that's more

02:07:38,639 --> 02:07:42,719
of like a kind of control protocol like

02:07:41,130 --> 02:07:44,730
not initially you wouldn't use Fermata

02:07:42,719 --> 02:07:46,440
you need some device it's probably has a

02:07:44,730 --> 02:07:48,960
network control like the esp8266 for

02:07:46,440 --> 02:07:50,880
example could talk a protocol like mqtt

02:07:48,960 --> 02:07:52,260
and then you can maybe send a control

02:07:50,880 --> 02:07:53,400
messages and things and I don't know

02:07:52,260 --> 02:07:55,530
that would be really neat though to see

02:07:53,400 --> 02:07:57,630
oh for Mata Protocol over mqtt they were

02:07:55,530 --> 02:07:59,820
the esp8266 but i don't know one

02:07:57,630 --> 02:08:01,260
unfortunately yeah a little advance how

02:07:59,820 --> 02:08:05,639
many buzzwords can you throw into it but

02:08:01,260 --> 02:08:17,750
yeah cool all right Lex no thanks so

02:08:05,639 --> 02:08:17,750
much cool so we're going to do

02:08:18,340 --> 02:08:53,969
oh oh thank you

02:18:14,340 --> 02:18:54,330
alright alright

02:18:51,210 --> 02:18:54,330
so what

02:19:05,310 --> 02:19:07,370

YouTube URL: https://www.youtube.com/watch?v=-GAVgEBfgas


