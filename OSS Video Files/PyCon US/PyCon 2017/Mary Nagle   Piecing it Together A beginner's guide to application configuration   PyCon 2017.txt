Title: Mary Nagle   Piecing it Together A beginner's guide to application configuration   PyCon 2017
Publication date: 2017-05-21
Playlist: PyCon 2017
Description: 
	"Speaker: Mary Nagle

Assembling all the necessary setup for an application you’re building can often be more frustrating than writing the app itself. Learning to do this well is difficult, especially for those who are new to Python and might not know where to begin or what questions to ask. While there is no “right way” to set up a development environment or application, understanding the components involved and how they interact can empower you to customize your setup to best suit your needs. This talk will dive into what happens when setting up a database, the purpose and configuration of an isolated environment, how Python packages are installed, and finally, how each of these components interact with each other and the application itself; in particular, how an application's structure facilitates said interactions.



Slides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides"
Captions: 
	00:00:13,769 --> 00:00:19,420
hello and welcome thank you so much for

00:00:17,140 --> 00:00:21,189
lasting until the Sunday afternoon

00:00:19,420 --> 00:00:22,000
period you're going to love what you're

00:00:21,189 --> 00:00:26,500
going to hear today

00:00:22,000 --> 00:00:28,689
welcome to Pike on 2017 ending three

00:00:26,500 --> 00:00:30,730
sessions the first one of which is going

00:00:28,689 --> 00:00:32,680
to be piecing it together a beginner's

00:00:30,730 --> 00:00:36,220
guide to application configuration with

00:00:32,680 --> 00:00:38,050
married Nagle and we're very excited to

00:00:36,220 --> 00:00:39,640
have her here today I do want to let you

00:00:38,050 --> 00:00:41,590
know that we're going to have a

00:00:39,640 --> 00:00:43,360
10-minute break after the talk you'll

00:00:41,590 --> 00:00:45,400
have plenty of time to get to your next

00:00:43,360 --> 00:00:47,770
talk or to stay here take a break and

00:00:45,400 --> 00:00:49,830
come back so no rushing out before she's

00:00:47,770 --> 00:00:51,970
done it's going to be a very good talk

00:00:49,830 --> 00:00:54,070
now the other thing is please please

00:00:51,970 --> 00:00:56,440
please turn off your electronics or at

00:00:54,070 --> 00:00:56,980
least make them quiet thanks so much for

00:00:56,440 --> 00:01:05,530
coming here

00:00:56,980 --> 00:01:07,780
let's give Mary a big hand hi everyone

00:01:05,530 --> 00:01:09,850
as you said I'm Mary I'm a software

00:01:07,780 --> 00:01:11,620
engineer at Warby Parker and this is my

00:01:09,850 --> 00:01:14,140
talk piecing it together a beginner's

00:01:11,620 --> 00:01:16,330
guide to application configuration so

00:01:14,140 --> 00:01:18,760
I'm going to start with a quick show of

00:01:16,330 --> 00:01:20,260
hands raise your hand if you've ever

00:01:18,760 --> 00:01:23,920
been given the advice that the best way

00:01:20,260 --> 00:01:25,110
to learn to code is just by doing it all

00:01:23,920 --> 00:01:27,190
right

00:01:25,110 --> 00:01:28,750
somewhat related follow up raise your

00:01:27,190 --> 00:01:30,820
hand if you ever encounter technical

00:01:28,750 --> 00:01:33,640
documentation and you had no idea what

00:01:30,820 --> 00:01:35,700
it was trying to say all right so this

00:01:33,640 --> 00:01:38,470
clearly is resonating with some of you

00:01:35,700 --> 00:01:39,190
this was certainly the case for me I'm

00:01:38,470 --> 00:01:41,050
self-taught

00:01:39,190 --> 00:01:43,300
so when I first started coding I had no

00:01:41,050 --> 00:01:44,740
technical background and when I would go

00:01:43,300 --> 00:01:46,600
to practice this would lead to a lot of

00:01:44,740 --> 00:01:48,970
frustration on trying to claw my way

00:01:46,600 --> 00:01:52,510
through documentation and spending zero

00:01:48,970 --> 00:01:54,250
time coding so for example this

00:01:52,510 --> 00:01:56,590
paragraph is from the sequel Lite

00:01:54,250 --> 00:01:58,540
documentation like what is this even

00:01:56,590 --> 00:02:01,210
trying to say I had no idea what any of

00:01:58,540 --> 00:02:02,620
this meant is beginner and you encounter

00:02:01,210 --> 00:02:03,640
this kind of documentation it's like how

00:02:02,620 --> 00:02:04,990
are you supposed to make a decision

00:02:03,640 --> 00:02:07,229
about your application when you can't

00:02:04,990 --> 00:02:09,190
even understand what's written about it

00:02:07,229 --> 00:02:11,440
so the point I'm trying to make here is

00:02:09,190 --> 00:02:13,060
that documentation is a big old pain in

00:02:11,440 --> 00:02:14,500
the butt and it's okay to feel that way

00:02:13,060 --> 00:02:15,640
there's a lot of good

00:02:14,500 --> 00:02:17,680
in out there and a lot of bad

00:02:15,640 --> 00:02:19,990
documentation but either way you have to

00:02:17,680 --> 00:02:22,390
fight your way through it but it does

00:02:19,990 --> 00:02:24,460
get easier as the more you know and I

00:02:22,390 --> 00:02:26,380
found that the more technical concepts

00:02:24,460 --> 00:02:28,920
and or technical terms that you're at

00:02:26,380 --> 00:02:30,880
least familiar with the easier this gets

00:02:28,920 --> 00:02:32,860
so that's what we're going to try to

00:02:30,880 --> 00:02:34,959
cover in this talk I'm going to go over

00:02:32,860 --> 00:02:36,400
some technical terms and concepts that

00:02:34,959 --> 00:02:38,800
come up a lot in application development

00:02:36,400 --> 00:02:39,790
that will help you and knowing these

00:02:38,800 --> 00:02:41,950
will help you better understand

00:02:39,790 --> 00:02:43,270
documentation but also form better

00:02:41,950 --> 00:02:46,090
Google queries and I'll show you what I

00:02:43,270 --> 00:02:47,440
mean by that so if you want to practice

00:02:46,090 --> 00:02:49,540
building a website you might Google

00:02:47,440 --> 00:02:51,250
something like make a website and this

00:02:49,540 --> 00:02:53,920
is what you get you get a bunch of ads

00:02:51,250 --> 00:02:55,660
for Squarespace like tools there's a

00:02:53,920 --> 00:02:56,440
tutorial for how to build an HTML

00:02:55,660 --> 00:02:58,270
webpage

00:02:56,440 --> 00:03:00,790
none of the really needy technical stuff

00:02:58,270 --> 00:03:02,170
you're after and even if your fine is a

00:03:00,790 --> 00:03:03,430
little bit the tutorials that come up

00:03:02,170 --> 00:03:05,230
you're like not sure if they're reliable

00:03:03,430 --> 00:03:08,440
it doesn't really tell you exactly

00:03:05,230 --> 00:03:09,610
what's going on and part of the reason

00:03:08,440 --> 00:03:10,870
you're getting this information back is

00:03:09,610 --> 00:03:13,959
because you don't know the tech terms to

00:03:10,870 --> 00:03:16,090
search for so that is to say there's a

00:03:13,959 --> 00:03:18,489
ton of information out there related to

00:03:16,090 --> 00:03:19,720
the topic of web development and finding

00:03:18,489 --> 00:03:20,500
the helpful information and sifting

00:03:19,720 --> 00:03:22,600
through it is hard

00:03:20,500 --> 00:03:24,820
googling is hard and we're going to get

00:03:22,600 --> 00:03:26,739
specific about how to build an

00:03:24,820 --> 00:03:28,660
application in this talk but the

00:03:26,739 --> 00:03:30,640
underlying goal is to make this process

00:03:28,660 --> 00:03:32,440
easier for you and set you up with the

00:03:30,640 --> 00:03:34,120
knowledge you need to help yourself as

00:03:32,440 --> 00:03:36,850
you go through the steps of making a web

00:03:34,120 --> 00:03:38,950
app and again with googling getting

00:03:36,850 --> 00:03:41,230
specific helped so for example if I were

00:03:38,950 --> 00:03:43,510
to do this I would search for a build

00:03:41,230 --> 00:03:45,310
and deploy a Python web site using flask

00:03:43,510 --> 00:03:47,769
and sequel Lite and here you just get

00:03:45,310 --> 00:03:50,160
four full tutorials that tell you how to

00:03:47,769 --> 00:03:52,390
do it with these specific technologies

00:03:50,160 --> 00:03:54,640
but even so none of these tutorials

00:03:52,390 --> 00:03:56,200
explain that there are other options out

00:03:54,640 --> 00:03:58,870
there or why you might choose one over

00:03:56,200 --> 00:04:00,820
the other and while it's frustrating

00:03:58,870 --> 00:04:02,320
it's also understandable because who has

00:04:00,820 --> 00:04:03,700
time for that the person writing the

00:04:02,320 --> 00:04:05,769
tutorial doesn't have time to list out

00:04:03,700 --> 00:04:08,799
every single technology and you don't

00:04:05,769 --> 00:04:10,750
have time as the person learning to sift

00:04:08,799 --> 00:04:11,739
through all that and unfortunately this

00:04:10,750 --> 00:04:14,290
talk is no exception

00:04:11,739 --> 00:04:15,670
I have brought about 27 minutes left to

00:04:14,290 --> 00:04:18,070
teach you how to build a website in

00:04:15,670 --> 00:04:21,459
Python using as little technical jargon

00:04:18,070 --> 00:04:23,050
as possible and so what instead I'm

00:04:21,459 --> 00:04:24,610
going to try to do is army was the

00:04:23,050 --> 00:04:26,530
technical vocabulary you need that will

00:04:24,610 --> 00:04:28,090
help you get through documentation and

00:04:26,530 --> 00:04:29,680
find the information that will help you

00:04:28,090 --> 00:04:32,320
and to do that I'm gonna give you a

00:04:29,680 --> 00:04:33,970
ground-up explanation of what to do when

00:04:32,320 --> 00:04:35,860
you want to build a web app in Python so

00:04:33,970 --> 00:04:38,010
list the key benefits of the more

00:04:35,860 --> 00:04:39,940
popular options for each step and

00:04:38,010 --> 00:04:41,380
knowing realizing that there are a lot

00:04:39,940 --> 00:04:44,199
of beginners out there I'll also provide

00:04:41,380 --> 00:04:46,650
a sample recipe of what technologies you

00:04:44,199 --> 00:04:49,090
should use when you build an application

00:04:46,650 --> 00:04:50,979
so this is what we're going to cover the

00:04:49,090 --> 00:04:53,169
first four are kind of key components of

00:04:50,979 --> 00:04:54,550
building an application and then were

00:04:53,169 --> 00:04:56,110
going to finish off with how to tie them

00:04:54,550 --> 00:04:58,479
together and how to connect your app to

00:04:56,110 --> 00:05:01,090
the web and you can think of what we go

00:04:58,479 --> 00:05:01,960
through here as a recipe because with

00:05:01,090 --> 00:05:03,910
cooking you can use different

00:05:01,960 --> 00:05:04,510
ingredients but you'll still end up with

00:05:03,910 --> 00:05:06,190
something edible

00:05:04,510 --> 00:05:07,630
it'll just taste different and similar

00:05:06,190 --> 00:05:09,370
with building a website you can use

00:05:07,630 --> 00:05:10,900
different technologies and it might

00:05:09,370 --> 00:05:13,540
function a little differently but it'll

00:05:10,900 --> 00:05:15,910
still work and either way the more you

00:05:13,540 --> 00:05:17,590
learn the more advanced you get the

00:05:15,910 --> 00:05:19,830
better you get at telling what fits what

00:05:17,590 --> 00:05:21,940
situations and what works well together

00:05:19,830 --> 00:05:23,050
so to start we have your operating

00:05:21,940 --> 00:05:26,320
system and we're going to build on this

00:05:23,050 --> 00:05:28,030
as we go so the thing about these first

00:05:26,320 --> 00:05:30,310
components that I mentioned is that they

00:05:28,030 --> 00:05:31,960
all require some sort of installation or

00:05:30,310 --> 00:05:34,300
at least rely on packages that require

00:05:31,960 --> 00:05:36,130
installation and packet installation can

00:05:34,300 --> 00:05:37,180
be tricky as a beginner because you want

00:05:36,130 --> 00:05:39,220
to make the best choice for your

00:05:37,180 --> 00:05:40,570
application but in order to do this you

00:05:39,220 --> 00:05:42,639
have to sift through all that technical

00:05:40,570 --> 00:05:45,130
documentation to try to figure that out

00:05:42,639 --> 00:05:46,960
so what I'm going to do is walk you

00:05:45,130 --> 00:05:49,090
through some common terms found often

00:05:46,960 --> 00:05:50,380
found in packaged documentation and the

00:05:49,090 --> 00:05:52,180
fun part is that once you know these

00:05:50,380 --> 00:05:54,490
terms you can be free to ignore them

00:05:52,180 --> 00:05:57,070
completely and just focus on what the

00:05:54,490 --> 00:05:58,180
package actually does so for those of

00:05:57,070 --> 00:06:02,110
you unsure what I mean when I'm saying

00:05:58,180 --> 00:06:03,880
package let me briefly explain so Python

00:06:02,110 --> 00:06:06,130
and the Python ecosystem as a whole are

00:06:03,880 --> 00:06:07,510
full of packages most of them are just

00:06:06,130 --> 00:06:10,620
kind of an extension of the language

00:06:07,510 --> 00:06:16,240
some of them are also very useful tools

00:06:10,620 --> 00:06:18,460
so for example this crazy wacky coloring

00:06:16,240 --> 00:06:20,020
here is because I'm using ipython I

00:06:18,460 --> 00:06:22,840
don't have like some weird formatting on

00:06:20,020 --> 00:06:24,639
my terminal I'm just using ipython which

00:06:22,840 --> 00:06:28,300
is a tool that's basically a Python

00:06:24,639 --> 00:06:30,940
console on steroids and in ipython I'm

00:06:28,300 --> 00:06:33,190
using it too I'm using the packaged PI

00:06:30,940 --> 00:06:35,410
TZ which you can use to change the

00:06:33,190 --> 00:06:38,080
timezone on daytime objects so here I'll

00:06:35,410 --> 00:06:41,830
import it here's the date time and then

00:06:38,080 --> 00:06:44,020
here's where it's converted to UTC

00:06:41,830 --> 00:06:46,120
in order to use pi TV or ipython you

00:06:44,020 --> 00:06:47,410
have to install them and you can do that

00:06:46,120 --> 00:06:48,970
by finding their installation

00:06:47,410 --> 00:06:51,760
instructions on their page and the

00:06:48,970 --> 00:06:53,800
Python package index and here again you

00:06:51,760 --> 00:06:56,950
hit the tech documentation problem so

00:06:53,800 --> 00:06:59,200
this is actually from the installation

00:06:56,950 --> 00:07:00,370
instructions on the PI to Z page so

00:06:59,200 --> 00:07:02,260
raise your hand if any of these terms

00:07:00,370 --> 00:07:05,410
are unfamiliar to you or you don't know

00:07:02,260 --> 00:07:07,870
what this is saying right yeah so before

00:07:05,410 --> 00:07:10,990
I made this talk I had zero idea what

00:07:07,870 --> 00:07:13,000
any of these words meant and it's it's

00:07:10,990 --> 00:07:14,140
they create this obstacle for you

00:07:13,000 --> 00:07:15,460
because you're reading through and

00:07:14,140 --> 00:07:17,110
you're like I don't know if this word is

00:07:15,460 --> 00:07:18,370
important I don't know if this is going

00:07:17,110 --> 00:07:19,840
to completely mess me up and break

00:07:18,370 --> 00:07:22,120
everything if I don't know what this

00:07:19,840 --> 00:07:23,470
word means and I ignore it so I'm going

00:07:22,120 --> 00:07:26,620
to try to remove that obstacle in the

00:07:23,470 --> 00:07:28,510
next couple slides so these six words

00:07:26,620 --> 00:07:30,730
come up all the time and package

00:07:28,510 --> 00:07:32,080
installation and rather than let them

00:07:30,730 --> 00:07:33,550
trip you up like they trip me up I'm

00:07:32,080 --> 00:07:35,530
going to tell you that they do not

00:07:33,550 --> 00:07:37,540
matter especially these first four if

00:07:35,530 --> 00:07:39,310
you want a highly technical description

00:07:37,540 --> 00:07:41,470
you can definitely google them there's a

00:07:39,310 --> 00:07:43,390
lot of blog posts on them I'm just going

00:07:41,470 --> 00:07:46,300
to give you a high-level description so

00:07:43,390 --> 00:07:47,980
you have some basic familiarity wheels

00:07:46,300 --> 00:07:50,290
and eggs our package formats kind of

00:07:47,980 --> 00:07:51,790
like zip files we also generally prefer

00:07:50,290 --> 00:07:53,740
these days because they're easy to make

00:07:51,790 --> 00:07:56,680
Python two and three compatible but

00:07:53,740 --> 00:07:58,180
either usable and as you as a person

00:07:56,680 --> 00:08:00,700
installing the package will never really

00:07:58,180 --> 00:08:02,830
have to worry about this then we have

00:08:00,700 --> 00:08:05,920
set of tools and disutilities which are

00:08:02,830 --> 00:08:07,810
ways to distribute the packages on pi PI

00:08:05,920 --> 00:08:09,610
so they carry this installation script

00:08:07,810 --> 00:08:11,860
that can get information from the egg or

00:08:09,610 --> 00:08:14,380
wheel file set of tools does everything

00:08:11,860 --> 00:08:16,270
disutilities and then some in fact the

00:08:14,380 --> 00:08:17,860
second paragraph of the documentation on

00:08:16,270 --> 00:08:19,420
disk details all that tel-aviv you set

00:08:17,860 --> 00:08:22,210
up tools and then precedes to list the

00:08:19,420 --> 00:08:24,340
benefits of setup tools so that's kind

00:08:22,210 --> 00:08:25,840
of ridiculous but again you don't really

00:08:24,340 --> 00:08:28,090
have to worry about these as a person

00:08:25,840 --> 00:08:29,730
installing the package the only time you

00:08:28,090 --> 00:08:32,200
do kind of have a choice and you can

00:08:29,730 --> 00:08:34,260
pick which one you want is between pip

00:08:32,200 --> 00:08:36,850
and easy install which are command line

00:08:34,260 --> 00:08:38,680
commands that trigger these installation

00:08:36,850 --> 00:08:40,840
scripts the most commonly referred to

00:08:38,680 --> 00:08:42,820
difference is that pip uses wheels and

00:08:40,840 --> 00:08:45,430
easy install uses eggs but there's a lot

00:08:42,820 --> 00:08:47,530
of overlap in what they do if you're

00:08:45,430 --> 00:08:50,170
unsure which to use go with pip it's

00:08:47,530 --> 00:08:53,200
much more prevalent in my experience it

00:08:50,170 --> 00:08:54,820
works faster because it uses wheels but

00:08:53,200 --> 00:08:55,780
the biggest thing is probably that it

00:08:54,820 --> 00:08:58,510
introduced the

00:08:55,780 --> 00:09:00,490
Exe file so this is a file you include

00:08:58,510 --> 00:09:03,040
in your Python apps that just lists each

00:09:00,490 --> 00:09:05,800
package and the version of the package

00:09:03,040 --> 00:09:07,420
that your app uses pitts makes this file

00:09:05,800 --> 00:09:09,370
really easy to generate and the presence

00:09:07,420 --> 00:09:12,490
of this file makes it really easy to

00:09:09,370 --> 00:09:14,710
replicate development environments so to

00:09:12,490 --> 00:09:18,820
add a bit of technical detail here's how

00:09:14,710 --> 00:09:21,670
pip and easy install work they both find

00:09:18,820 --> 00:09:23,530
packages and generate data from setup

00:09:21,670 --> 00:09:25,840
tools they'll install those packages

00:09:23,530 --> 00:09:27,520
using the setup dot pi file and they'll

00:09:25,840 --> 00:09:30,070
include any dependencies in that

00:09:27,520 --> 00:09:31,480
installation finally they'll resolve

00:09:30,070 --> 00:09:32,950
conflicts between the packages being

00:09:31,480 --> 00:09:35,740
installed and the ones already on your

00:09:32,950 --> 00:09:37,390
system and it's here at the third step

00:09:35,740 --> 00:09:40,110
where the main difference comes in how

00:09:37,390 --> 00:09:42,610
they function so pip will do this by

00:09:40,110 --> 00:09:43,810
uninstalling any pre-existing dependent

00:09:42,610 --> 00:09:45,970
packages that don't match the

00:09:43,810 --> 00:09:47,350
requirement well easy install will

00:09:45,970 --> 00:09:48,910
actually allow for different versions of

00:09:47,350 --> 00:09:51,900
a specific package on a single

00:09:48,910 --> 00:09:55,960
environment and it can do this because

00:09:51,900 --> 00:09:59,410
it can modify sis that path and to try

00:09:55,960 --> 00:10:01,480
to demystify what that even means this

00:09:59,410 --> 00:10:03,339
is a Python module that sets up system

00:10:01,480 --> 00:10:05,680
specific variables and it has this

00:10:03,339 --> 00:10:08,620
property called pass which is a list of

00:10:05,680 --> 00:10:11,380
strings that tells the file path to the

00:10:08,620 --> 00:10:13,839
desired module so what easy install does

00:10:11,380 --> 00:10:15,910
is it takes the path to the egg file and

00:10:13,839 --> 00:10:17,980
append that to the front of this dot

00:10:15,910 --> 00:10:19,630
path so that when Python looks to sis

00:10:17,980 --> 00:10:23,230
that path for which module to import

00:10:19,630 --> 00:10:24,670
it'll find this one first so now that

00:10:23,230 --> 00:10:27,430
you know you can ignore these four words

00:10:24,670 --> 00:10:28,660
you can hopefully claw your way through

00:10:27,430 --> 00:10:30,390
documentation a little bit easier

00:10:28,660 --> 00:10:33,520
knowing that they don't really matter

00:10:30,390 --> 00:10:34,690
and now that you know how to use pip you

00:10:33,520 --> 00:10:35,710
want to get comfortable you might be

00:10:34,690 --> 00:10:37,390
able to switch it out for a different

00:10:35,710 --> 00:10:39,490
package installer like I know for

00:10:37,390 --> 00:10:42,280
example anaconda is really popular in

00:10:39,490 --> 00:10:44,530
the data world but it's really

00:10:42,280 --> 00:10:49,060
whatever's best for you but to start use

00:10:44,530 --> 00:10:51,670
tip and if you run into any issues you

00:10:49,060 --> 00:10:55,210
can Google install whatever package with

00:10:51,670 --> 00:10:57,010
pip so if you study package installation

00:10:55,210 --> 00:10:58,870
one thing you learn is that version

00:10:57,010 --> 00:11:01,210
management of packages on a system is a

00:10:58,870 --> 00:11:02,830
tricky problem to solve a lot of the

00:11:01,210 --> 00:11:04,300
packages on pi pi are actively

00:11:02,830 --> 00:11:06,339
maintained so they release new versions

00:11:04,300 --> 00:11:08,050
over time and sometimes these versions

00:11:06,339 --> 00:11:08,680
are backwards compatible but sometimes

00:11:08,050 --> 00:11:09,970
they're not

00:11:08,680 --> 00:11:11,740
and there's a lot of ways that can mess

00:11:09,970 --> 00:11:15,250
you up but here's a straightforward

00:11:11,740 --> 00:11:16,750
simple example of how so you have your

00:11:15,250 --> 00:11:18,340
operating system and on it you want to

00:11:16,750 --> 00:11:19,990
build an application where that will

00:11:18,340 --> 00:11:21,820
help you rank the New York City subway

00:11:19,990 --> 00:11:24,970
trains in terms of how smelly they are

00:11:21,820 --> 00:11:27,280
and so in building this application you

00:11:24,970 --> 00:11:29,230
find this package called sequel alchemy

00:11:27,280 --> 00:11:31,420
which allows you to perform advanced

00:11:29,230 --> 00:11:34,000
operations on data in your database and

00:11:31,420 --> 00:11:35,410
it has this free order by method that

00:11:34,000 --> 00:11:37,420
allows you to specify the column you

00:11:35,410 --> 00:11:39,430
want to sort and the rule by which you

00:11:37,420 --> 00:11:41,710
want to sort it so use that the Saffir

00:11:39,430 --> 00:11:43,300
is great on to the next you create a

00:11:41,710 --> 00:11:44,770
second application where you have a

00:11:43,300 --> 00:11:46,870
person and you want to find out they're

00:11:44,770 --> 00:11:48,160
a customer but if they're not a customer

00:11:46,870 --> 00:11:50,410
you don't want your application to blow

00:11:48,160 --> 00:11:52,330
up so you find this one or none method

00:11:50,410 --> 00:11:54,760
which will return none if no results are

00:11:52,330 --> 00:11:56,920
found in order to use this you have to

00:11:54,760 --> 00:11:58,800
upgrade to sequel alchemy 1.1 because

00:11:56,920 --> 00:12:01,060
this is when one or none was introduced

00:11:58,800 --> 00:12:02,680
so you do that in your second app works

00:12:01,060 --> 00:12:04,360
great but then you go back to run your

00:12:02,680 --> 00:12:06,610
first app and you find that it no longer

00:12:04,360 --> 00:12:09,250
works because the order by method was

00:12:06,610 --> 00:12:10,600
deprecated and sequels me 1.1 and that

00:12:09,250 --> 00:12:13,110
is the version that this application is

00:12:10,600 --> 00:12:16,630
now trying to run on so it doesn't work

00:12:13,110 --> 00:12:18,730
a really common solution here is virtual

00:12:16,630 --> 00:12:20,200
environments virtual environments allow

00:12:18,730 --> 00:12:22,230
for the installation of different

00:12:20,200 --> 00:12:24,520
versions of a package across one system

00:12:22,230 --> 00:12:26,980
they keep these packages isolated from

00:12:24,520 --> 00:12:28,300
one another so that different apps that

00:12:26,980 --> 00:12:29,260
require different versions of a package

00:12:28,300 --> 00:12:31,360
can still work

00:12:29,260 --> 00:12:33,040
some people prefer not to use virtual

00:12:31,360 --> 00:12:34,150
environments and that's totally fine if

00:12:33,040 --> 00:12:35,980
you're comfortable and you know what

00:12:34,150 --> 00:12:36,940
you're doing like absolutely more power

00:12:35,980 --> 00:12:38,710
to you

00:12:36,940 --> 00:12:42,250
but if you don't know what you're doing

00:12:38,710 --> 00:12:44,380
or you're lazy some this is a really

00:12:42,250 --> 00:12:47,380
relatively easy to use solution to this

00:12:44,380 --> 00:12:49,030
problem when it comes to virtual

00:12:47,380 --> 00:12:51,100
environments and Python the two main

00:12:49,030 --> 00:12:53,560
contenders are virtual ends and Ben's if

00:12:51,100 --> 00:12:56,260
you're going to use one use virtual ends

00:12:53,560 --> 00:12:58,390
because it's it works for both Python 2

00:12:56,260 --> 00:13:00,100
and 3 and it has a lot of really

00:12:58,390 --> 00:13:02,470
well-written documentation and blog

00:13:00,100 --> 00:13:04,560
posts out there about it it's a package

00:13:02,470 --> 00:13:06,850
on PI pi so you can install it with pips

00:13:04,560 --> 00:13:08,980
then on the other hand is a library

00:13:06,850 --> 00:13:10,090
that's built into Python 3 and it

00:13:08,980 --> 00:13:12,040
actually functions pretty much

00:13:10,090 --> 00:13:13,840
identically to virtual ohms it just has

00:13:12,040 --> 00:13:16,810
some different commands so for example

00:13:13,840 --> 00:13:19,900
here's the creation command for virtual

00:13:16,810 --> 00:13:21,170
ends and here's the creation command for

00:13:19,900 --> 00:13:22,610
vent but

00:13:21,170 --> 00:13:23,300
much doing the same thing or saying hey

00:13:22,610 --> 00:13:25,010
I want to create this virtual

00:13:23,300 --> 00:13:28,250
environment and here's where I want to

00:13:25,010 --> 00:13:29,570
do that so they specify the path or the

00:13:28,250 --> 00:13:32,300
folder in which you want to store the

00:13:29,570 --> 00:13:34,040
virtual environment usually this is the

00:13:32,300 --> 00:13:36,800
same parent folder as your application

00:13:34,040 --> 00:13:38,449
so for example if you want to build an

00:13:36,800 --> 00:13:41,570
app called Pizza app which is actually

00:13:38,449 --> 00:13:43,940
something I tried to build once you

00:13:41,570 --> 00:13:46,160
would do this by pointing the activation

00:13:43,940 --> 00:13:47,779
script to parent folder and you do this

00:13:46,160 --> 00:13:50,029
either by specifying the path where it

00:13:47,779 --> 00:13:53,120
would live or by running the command

00:13:50,029 --> 00:13:54,440
from inside that folder either way

00:13:53,120 --> 00:13:57,649
that's where your virtual end ends up

00:13:54,440 --> 00:13:59,180
living and putting it here is only a

00:13:57,649 --> 00:14:00,709
recommendation but it's a pretty good

00:13:59,180 --> 00:14:01,940
recommendation especially for beginners

00:14:00,709 --> 00:14:03,920
because it's a good way to stay

00:14:01,940 --> 00:14:05,329
organized but also a lot of the

00:14:03,920 --> 00:14:07,130
documentation assumes that you're going

00:14:05,329 --> 00:14:10,940
to do this so it's easier to follow if

00:14:07,130 --> 00:14:12,260
that's what you do so a virtual

00:14:10,940 --> 00:14:14,329
environment is basically just a folder

00:14:12,260 --> 00:14:16,459
with all your things all your packages

00:14:14,329 --> 00:14:19,459
in it plus a bash script which modifies

00:14:16,459 --> 00:14:21,079
system variables on creation it makes a

00:14:19,459 --> 00:14:23,329
replica of your system Python or

00:14:21,079 --> 00:14:24,769
whatever version you specify but either

00:14:23,329 --> 00:14:27,829
way you end up with a virtual

00:14:24,769 --> 00:14:29,990
environment that has a Python its own

00:14:27,829 --> 00:14:32,149
Python interpreter tailored to the

00:14:29,990 --> 00:14:34,279
packages and Python in that virtual

00:14:32,149 --> 00:14:36,579
environment so when your code runs its

00:14:34,279 --> 00:14:38,990
compiled using that environments Python

00:14:36,579 --> 00:14:41,029
what this means is that any application

00:14:38,990 --> 00:14:43,010
can point to any virtual environment and

00:14:41,029 --> 00:14:45,410
try to run using that Python and those

00:14:43,010 --> 00:14:47,449
packages it won't necessarily work but

00:14:45,410 --> 00:14:49,190
this is a great way to test whether your

00:14:47,449 --> 00:14:50,750
application will work with multiple

00:14:49,190 --> 00:14:53,870
versions of Python or multiple versions

00:14:50,750 --> 00:14:55,279
of packages and you might be wondering

00:14:53,870 --> 00:14:56,720
how can an app switch between virtual

00:14:55,279 --> 00:14:58,760
environments how would it know which one

00:14:56,720 --> 00:15:02,089
to point to and the answer lies in that

00:14:58,760 --> 00:15:03,620
bash script that I mentioned so to run a

00:15:02,089 --> 00:15:03,829
virtual environment you have to activate

00:15:03,620 --> 00:15:05,390
it

00:15:03,829 --> 00:15:09,709
which means you run its activation

00:15:05,390 --> 00:15:11,839
script this lives in the bin folder of

00:15:09,709 --> 00:15:13,819
your virtual environment and what it

00:15:11,839 --> 00:15:15,890
does is it modifies your path variable

00:15:13,819 --> 00:15:17,600
this is a system level variable that

00:15:15,890 --> 00:15:19,880
tells the set of directories in which

00:15:17,600 --> 00:15:21,949
executables Lib so it tells Python where

00:15:19,880 --> 00:15:24,980
to find the binary files for packages

00:15:21,949 --> 00:15:26,600
and similar to the fifth modification it

00:15:24,980 --> 00:15:27,740
prepends the path to the virtual

00:15:26,600 --> 00:15:29,899
environment the beginning of this

00:15:27,740 --> 00:15:31,760
variable so before I run your my

00:15:29,899 --> 00:15:34,279
activation script my path variable might

00:15:31,760 --> 00:15:34,940
look like this the output then I'll run

00:15:34,279 --> 00:15:36,800
it

00:15:34,940 --> 00:15:38,240
and as you can see the path to the

00:15:36,800 --> 00:15:41,270
virtual environment is now at the front

00:15:38,240 --> 00:15:42,710
of the path variable when you're done

00:15:41,270 --> 00:15:44,300
working and want to shut things down for

00:15:42,710 --> 00:15:46,070
the time being you just run deactivate

00:15:44,300 --> 00:15:50,150
and this does the opposite it removes

00:15:46,070 --> 00:15:51,650
that path from the path variable and if

00:15:50,150 --> 00:15:53,210
you run into any trouble while you're

00:15:51,650 --> 00:15:55,760
going through all this you can just

00:15:53,210 --> 00:15:59,450
Google set up virtual ends and that will

00:15:55,760 --> 00:16:01,280
return some helpful results so now we

00:15:59,450 --> 00:16:02,840
have these two covered and here's what

00:16:01,280 --> 00:16:04,490
your setups looking like you have your

00:16:02,840 --> 00:16:06,440
operating system and on that you have

00:16:04,490 --> 00:16:09,350
your virtual end with its own separate

00:16:06,440 --> 00:16:11,840
version of Python and some packages

00:16:09,350 --> 00:16:13,010
installed using pip but there are a lot

00:16:11,840 --> 00:16:15,310
of other ingredients you need to build

00:16:13,010 --> 00:16:18,320
an application so let's talk about those

00:16:15,310 --> 00:16:19,940
one important decision for important

00:16:18,320 --> 00:16:21,920
architectural decision for any app is

00:16:19,940 --> 00:16:23,240
how to store data and you don't

00:16:21,920 --> 00:16:24,680
necessarily need a database to do this

00:16:23,240 --> 00:16:27,170
you could do something as simple as

00:16:24,680 --> 00:16:29,660
storing data in a JSON file that you

00:16:27,170 --> 00:16:31,520
keep in your application you could do

00:16:29,660 --> 00:16:33,740
cloud storage which requires some setup

00:16:31,520 --> 00:16:36,350
but usually not as complexity' set up as

00:16:33,740 --> 00:16:37,730
database but because we don't have much

00:16:36,350 --> 00:16:39,410
time and because databases are

00:16:37,730 --> 00:16:41,210
everywhere I'm going to cover the

00:16:39,410 --> 00:16:42,680
tried-and-true super common databases

00:16:41,210 --> 00:16:46,040
that you're likely to come across in

00:16:42,680 --> 00:16:49,670
Python they are sequel Lite Postgres

00:16:46,040 --> 00:16:51,020
people and my sequel sequel Lite is what

00:16:49,670 --> 00:16:53,690
you choose if you're working on a pet

00:16:51,020 --> 00:16:55,670
project or an application prototype it

00:16:53,690 --> 00:16:57,890
stores the entire database in a single

00:16:55,670 --> 00:17:01,880
file on disk which means that the

00:16:57,890 --> 00:17:04,940
database lives inside your computer it's

00:17:01,880 --> 00:17:06,950
included in Python 2.7 on so no extra

00:17:04,940 --> 00:17:09,500
packages are required to make it run and

00:17:06,950 --> 00:17:11,120
make it work with your app and it's best

00:17:09,500 --> 00:17:12,710
for small applications for many reasons

00:17:11,120 --> 00:17:14,660
but the main one is that it doesn't

00:17:12,710 --> 00:17:17,090
scale well it only supports a single

00:17:14,660 --> 00:17:19,340
connection it doesn't allow for sharding

00:17:17,090 --> 00:17:20,960
when your road get too big and it

00:17:19,340 --> 00:17:24,350
doesn't support most advanced column

00:17:20,960 --> 00:17:25,910
types like JSON and the like fortunately

00:17:24,350 --> 00:17:27,560
it's possible to port your so move your

00:17:25,910 --> 00:17:28,670
data from sequel Lite to a larger

00:17:27,560 --> 00:17:30,620
database when you are ready for

00:17:28,670 --> 00:17:31,760
production now if you recall the

00:17:30,620 --> 00:17:33,620
documentation I showed at the beginning

00:17:31,760 --> 00:17:35,900
it starts to make a little bit more

00:17:33,620 --> 00:17:37,550
sense this is just a more technical

00:17:35,900 --> 00:17:39,500
version of everything I just said about

00:17:37,550 --> 00:17:41,510
sequel I like this port the code line at

00:17:39,500 --> 00:17:43,640
the end that's just saying that you can

00:17:41,510 --> 00:17:46,040
move the data to a larger database when

00:17:43,640 --> 00:17:47,000
it comes time for production and when

00:17:46,040 --> 00:17:48,530
you get to production

00:17:47,000 --> 00:17:50,780
Postgres sequel and my sequel are

00:17:48,530 --> 00:17:53,810
- solid bets they're both open-source

00:17:50,780 --> 00:17:55,100
and super mature on a high level you use

00:17:53,810 --> 00:17:57,050
my sequel when you want something really

00:17:55,100 --> 00:17:58,370
fast and you use Postgres sequel when

00:17:57,050 --> 00:18:00,890
you want something really reliable

00:17:58,370 --> 00:18:03,530
maybe sequel compliance and to add a

00:18:00,890 --> 00:18:05,330
little bit more color to that Postgres

00:18:03,530 --> 00:18:06,890
sequel has really great data integrity

00:18:05,330 --> 00:18:10,340
and that's in part due to the sequel

00:18:06,890 --> 00:18:13,280
compliance component it has a robust

00:18:10,340 --> 00:18:16,340
community and third party support around

00:18:13,280 --> 00:18:18,320
its open-source community and it allows

00:18:16,340 --> 00:18:21,290
for objective storage so nesting and

00:18:18,320 --> 00:18:22,880
things like that however it has been

00:18:21,290 --> 00:18:26,090
known to lack in performance especially

00:18:22,880 --> 00:18:27,440
in applications that are read heavy my

00:18:26,090 --> 00:18:29,690
sequel on the other hand is known to be

00:18:27,440 --> 00:18:32,030
easy to set up and work with it has

00:18:29,690 --> 00:18:34,340
advanced security features and it's

00:18:32,030 --> 00:18:35,980
super fast even when storing huge huge

00:18:34,340 --> 00:18:38,450
huge amounts of data at scale

00:18:35,980 --> 00:18:39,710
however simultaneous read and write

00:18:38,450 --> 00:18:43,610
operations have been known to cause

00:18:39,710 --> 00:18:45,020
reliability issues with my sequel but

00:18:43,610 --> 00:18:46,400
again this is your first application

00:18:45,020 --> 00:18:50,180
you're just getting your feet wet

00:18:46,400 --> 00:18:52,220
databases so use sequel Lite it's really

00:18:50,180 --> 00:18:54,440
it provides a really easy relatively

00:18:52,220 --> 00:18:57,140
easy introduction to data storage and

00:18:54,440 --> 00:18:59,060
when you when you choose a method of

00:18:57,140 --> 00:19:01,100
data storage for your application the

00:18:59,060 --> 00:19:02,930
main thing to focus on is that it fits

00:19:01,100 --> 00:19:03,770
your needs so as a beginner you need

00:19:02,930 --> 00:19:05,420
something that's simple and

00:19:03,770 --> 00:19:07,580
well-documented you need something that

00:19:05,420 --> 00:19:09,830
easily integrates with Python and is

00:19:07,580 --> 00:19:11,740
relatively easy to understand and sequel

00:19:09,830 --> 00:19:13,400
Lite fits all of those needs

00:19:11,740 --> 00:19:15,350
unfortunately I don't have time to go

00:19:13,400 --> 00:19:17,690
into cloud storage but if you are

00:19:15,350 --> 00:19:18,650
curious about this please feel free to

00:19:17,690 --> 00:19:23,330
reach out and I'll send you some

00:19:18,650 --> 00:19:24,440
resources and again when you want to

00:19:23,330 --> 00:19:25,790
come some to Google something if you

00:19:24,440 --> 00:19:27,590
need help you can just Google set up

00:19:25,790 --> 00:19:30,340
sequel Lite and that will get you the

00:19:27,590 --> 00:19:32,900
tutorials you need to get this going so

00:19:30,340 --> 00:19:35,390
now we have data storage and here's how

00:19:32,900 --> 00:19:37,190
your setup looks you have your sequel

00:19:35,390 --> 00:19:41,150
Lite database living on your operating

00:19:37,190 --> 00:19:43,000
system and now you'll need to connect it

00:19:41,150 --> 00:19:44,960
to your application and you do this with

00:19:43,000 --> 00:19:47,540
configuration variables and this next

00:19:44,960 --> 00:19:49,700
piece helps with that this is also the

00:19:47,540 --> 00:19:51,050
last major piece are going to cover web

00:19:49,700 --> 00:19:52,700
frameworks make developing an

00:19:51,050 --> 00:19:54,980
application way easier because they take

00:19:52,700 --> 00:19:57,260
care of a lot of the overhead of getting

00:19:54,980 --> 00:19:59,450
things set up and to help you understand

00:19:57,260 --> 00:20:00,980
why they're so important I'm going to

00:19:59,450 --> 00:20:02,150
skip ahead and tell you how your

00:20:00,980 --> 00:20:05,180
application communicates with

00:20:02,150 --> 00:20:06,980
web so this might be a review for a lot

00:20:05,180 --> 00:20:08,840
of you but your web communicates with

00:20:06,980 --> 00:20:10,790
the app with your app through an HTTP

00:20:08,840 --> 00:20:12,740
request the request will tell your app

00:20:10,790 --> 00:20:15,230
what information the user wants and your

00:20:12,740 --> 00:20:18,320
app will retrieve that info and return

00:20:15,230 --> 00:20:19,640
it packaged as an HTTP response but you

00:20:18,320 --> 00:20:21,230
might wonder how the request gets there

00:20:19,640 --> 00:20:23,390
and where the response goes afterwards

00:20:21,230 --> 00:20:24,920
and in order to explain that I'm going

00:20:23,390 --> 00:20:28,790
to tell you as simply as possible how

00:20:24,920 --> 00:20:30,650
HTTP works so to start you have a URL in

00:20:28,790 --> 00:20:33,170
your browser your browser needs to send

00:20:30,650 --> 00:20:34,550
that URL to your application in order to

00:20:33,170 --> 00:20:36,830
do this it needs to find the servers

00:20:34,550 --> 00:20:39,230
that host that app and it can only find

00:20:36,830 --> 00:20:41,420
them if it has their IP address so to

00:20:39,230 --> 00:20:44,270
get that IP address DNS has to happen

00:20:41,420 --> 00:20:46,850
and what DNS does is it's the browser

00:20:44,270 --> 00:20:49,220
sends the URL as a request via resolver

00:20:46,850 --> 00:20:52,880
to the top-level domain server so calmed

00:20:49,220 --> 00:20:54,650
I word etc so the TLD server directs the

00:20:52,880 --> 00:20:57,110
resolver to the site's name servers and

00:20:54,650 --> 00:21:00,410
the name servers hold the IP of the app

00:20:57,110 --> 00:21:02,240
servers and map to them so they send

00:21:00,410 --> 00:21:04,850
that IP back to the browser and now it

00:21:02,240 --> 00:21:08,060
sends the URL to those servers by an

00:21:04,850 --> 00:21:10,160
HTTP request the server receives the URL

00:21:08,060 --> 00:21:13,790
and sends it to the web app and that's

00:21:10,160 --> 00:21:15,650
where the HTTP interaction that I just

00:21:13,790 --> 00:21:16,910
described happened your app acts cutes

00:21:15,650 --> 00:21:18,200
the appropriate code and returns the

00:21:16,910 --> 00:21:19,790
applet with a bunch of information and

00:21:18,200 --> 00:21:22,340
the server will take that output and

00:21:19,790 --> 00:21:24,860
return it as a response under a bunch of

00:21:22,340 --> 00:21:27,140
HTTP headers this request response

00:21:24,860 --> 00:21:29,990
interation or interaction is what

00:21:27,140 --> 00:21:32,120
happens under WSGI which is the web

00:21:29,990 --> 00:21:34,670
server gateway interface this is just a

00:21:32,120 --> 00:21:37,580
protocol made to simplify communications

00:21:34,670 --> 00:21:38,930
over HTTP that I just described it's the

00:21:37,580 --> 00:21:40,700
point at which the web interacts your

00:21:38,930 --> 00:21:42,560
your application so it's where the web

00:21:40,700 --> 00:21:43,820
passes the request the application and

00:21:42,560 --> 00:21:47,030
where the application passes the

00:21:43,820 --> 00:21:49,700
response back to the web if you want to

00:21:47,030 --> 00:21:51,980
know the gnarly details about WSGI check

00:21:49,700 --> 00:21:56,120
out Pep 333 which is the specification

00:21:51,980 --> 00:21:58,850
in which WSGI was formalized so with

00:21:56,120 --> 00:22:00,200
that back to frameworks again they take

00:21:58,850 --> 00:22:01,640
care of the really tedious parts of the

00:22:00,200 --> 00:22:03,500
application configuration so that you

00:22:01,640 --> 00:22:06,020
don't have to and this includes all that

00:22:03,500 --> 00:22:07,700
HTTP WSGI business I just mentioned you

00:22:06,020 --> 00:22:09,110
can install a framework like you would a

00:22:07,700 --> 00:22:10,670
package and it will provide you with

00:22:09,110 --> 00:22:12,680
configuration files as well as a

00:22:10,670 --> 00:22:16,010
skeleton file structure that you can use

00:22:12,680 --> 00:22:17,840
as a base list of your application code

00:22:16,010 --> 00:22:19,190
and by no means saying that you have to

00:22:17,840 --> 00:22:21,620
use a web framework plenty of people

00:22:19,190 --> 00:22:24,020
don't but if you're a beginner and you

00:22:21,620 --> 00:22:26,540
don't know the intricacies of getting an

00:22:24,020 --> 00:22:28,730
app up and running using a web framework

00:22:26,540 --> 00:22:30,049
can really help not only because it will

00:22:28,730 --> 00:22:31,790
do a lot of it for you but by working

00:22:30,049 --> 00:22:33,140
with it and looking at how it does

00:22:31,790 --> 00:22:34,640
things you can kind of get an idea of

00:22:33,140 --> 00:22:36,380
how it all works and maybe learn

00:22:34,640 --> 00:22:39,260
something for if you ever want to try to

00:22:36,380 --> 00:22:41,090
do a so yourself experienced coders use

00:22:39,260 --> 00:22:44,210
frameworks a lot too because again they

00:22:41,090 --> 00:22:45,830
make your life so much easier there are

00:22:44,210 --> 00:22:47,390
a lot of frameworks out there I'm sure

00:22:45,830 --> 00:22:49,549
you've heard of plenty this whole

00:22:47,390 --> 00:22:51,980
conference but I'm going to go ahead and

00:22:49,549 --> 00:22:53,690
recommend flasks for beginners because

00:22:51,980 --> 00:22:55,250
it's simple enough for a beginner to use

00:22:53,690 --> 00:22:56,990
but it still has enough structure that

00:22:55,250 --> 00:23:00,110
you can learn from observing it and

00:22:56,990 --> 00:23:03,500
working with it this is the point of

00:23:00,110 --> 00:23:06,380
WSGI for flask how it looks in a very

00:23:03,500 --> 00:23:10,040
basic form and I'm going to use this

00:23:06,380 --> 00:23:13,160
WSGI point to demo some of the main

00:23:10,040 --> 00:23:14,510
functions of a web framework so

00:23:13,160 --> 00:23:16,460
frameworks provide an easy way to

00:23:14,510 --> 00:23:18,309
specify how to match a URL from a

00:23:16,460 --> 00:23:21,080
browser to the code in your application

00:23:18,309 --> 00:23:23,570
so here I have a defying route that will

00:23:21,080 --> 00:23:26,600
make sure this HTML is rendered if you

00:23:23,570 --> 00:23:29,720
go to my site slash PyCon and this

00:23:26,600 --> 00:23:31,370
wrapper and function are all pre-baked

00:23:29,720 --> 00:23:32,270
into the framework so I don't have to

00:23:31,370 --> 00:23:34,660
worry about what they're doing I just

00:23:32,270 --> 00:23:38,450
know that if I type that out it will

00:23:34,660 --> 00:23:40,400
define that route for me they also a

00:23:38,450 --> 00:23:43,040
frameworks also convert incoming HTTP

00:23:40,400 --> 00:23:45,140
requests to Python objects so that your

00:23:43,040 --> 00:23:46,720
code more easily access key information

00:23:45,140 --> 00:23:49,840
about the request

00:23:46,720 --> 00:23:53,299
similarly on the way back out it will

00:23:49,840 --> 00:23:56,919
package the information into an HTTP

00:23:53,299 --> 00:23:59,299
HTTP response that the browser can read

00:23:56,919 --> 00:24:01,669
then there are template engines and they

00:23:59,299 --> 00:24:03,140
kinda have two purposes first it will

00:24:01,669 --> 00:24:06,200
ensure that your app can render HTML

00:24:03,140 --> 00:24:07,669
files so here we have the render

00:24:06,200 --> 00:24:10,250
template function which takes care of

00:24:07,669 --> 00:24:12,770
rendering this HTML file and this is

00:24:10,250 --> 00:24:14,510
pretty much just the same as what you

00:24:12,770 --> 00:24:16,400
see here in the return only it's pre

00:24:14,510 --> 00:24:19,100
baked into a file and thanks to this

00:24:16,400 --> 00:24:22,130
flask render template function it knows

00:24:19,100 --> 00:24:24,590
that it can render this with template

00:24:22,130 --> 00:24:26,090
engines you can also pass Python data

00:24:24,590 --> 00:24:28,130
and variables directly into your HTML

00:24:26,090 --> 00:24:29,870
like you would a function rather than

00:24:28,130 --> 00:24:32,690
having to parse an HTML string

00:24:29,870 --> 00:24:34,220
or something gross like that finally

00:24:32,690 --> 00:24:35,570
they provide the ability to spin up a

00:24:34,220 --> 00:24:37,700
development web service that you can

00:24:35,570 --> 00:24:39,170
test your changes locally and sometimes

00:24:37,700 --> 00:24:41,990
the documentation on how to do this is

00:24:39,170 --> 00:24:43,550
unclear but typically it involves either

00:24:41,990 --> 00:24:45,980
running a file directly from your

00:24:43,550 --> 00:24:47,840
command line or some custom commands

00:24:45,980 --> 00:24:51,260
that you can find I guess you'll have to

00:24:47,840 --> 00:24:53,270
find the documentation flask requires

00:24:51,260 --> 00:24:56,480
you to run a file directly from the

00:24:53,270 --> 00:24:58,700
command line so that app pi is the WSGI

00:24:56,480 --> 00:25:01,000
file that I showed before and you can

00:24:58,700 --> 00:25:03,679
see in the output it tells you the exact

00:25:01,000 --> 00:25:05,570
host and port that you can type in to

00:25:03,679 --> 00:25:07,250
are the exact IP and port that you can

00:25:05,570 --> 00:25:10,730
type into your browser to get to your

00:25:07,250 --> 00:25:12,290
changes on localhost the last thing

00:25:10,730 --> 00:25:14,059
about frameworks that I'll mention just

00:25:12,290 --> 00:25:15,650
in case you're curious is that web

00:25:14,059 --> 00:25:17,290
frameworks set up a skeleton file

00:25:15,650 --> 00:25:19,429
structure for you

00:25:17,290 --> 00:25:21,710
dank Jango and flats are two popular

00:25:19,429 --> 00:25:23,420
ones so here's how they do it as you can

00:25:21,710 --> 00:25:25,790
see Jango kind of has its configuration

00:25:23,420 --> 00:25:27,980
files in a separate folder alongside the

00:25:25,790 --> 00:25:29,570
app code while flask has I'm kind of

00:25:27,980 --> 00:25:32,090
living out in the open but still in the

00:25:29,570 --> 00:25:35,540
parent folder but it really doesn't

00:25:32,090 --> 00:25:38,270
matter you can do it either way I mean

00:25:35,540 --> 00:25:39,710
it just matters that the the file path

00:25:38,270 --> 00:25:42,860
configuration variables are set up

00:25:39,710 --> 00:25:47,630
properly but again as a beginner if you

00:25:42,860 --> 00:25:49,010
use flask you should be good and there

00:25:47,630 --> 00:25:50,420
are so many Flash tutorials out there

00:25:49,010 --> 00:25:53,380
that if you type this into Google you

00:25:50,420 --> 00:25:55,370
will get a ton of helpful information

00:25:53,380 --> 00:25:57,620
when it comes time to pick your own

00:25:55,370 --> 00:26:00,080
framework and forming your own recipe

00:25:57,620 --> 00:26:01,580
you just need to consider that it suits

00:26:00,080 --> 00:26:03,440
the need of your application and it

00:26:01,580 --> 00:26:05,360
makes your life easier and if you look

00:26:03,440 --> 00:26:07,460
at the four key purposes of a web

00:26:05,360 --> 00:26:09,710
framework that I just described that can

00:26:07,460 --> 00:26:11,270
help you make that decision if you

00:26:09,710 --> 00:26:15,230
consider whether and how well they do

00:26:11,270 --> 00:26:17,330
these things so once you get the

00:26:15,230 --> 00:26:20,000
framework set up this is how your your

00:26:17,330 --> 00:26:21,080
situation looks but it's the of all

00:26:20,000 --> 00:26:22,309
these components and none of them are

00:26:21,080 --> 00:26:25,850
connected so let's talk about how to do

00:26:22,309 --> 00:26:28,130
that the main file for application

00:26:25,850 --> 00:26:31,550
configuration is usually called either

00:26:28,130 --> 00:26:33,350
Settings app high or config dot PI among

00:26:31,550 --> 00:26:35,270
other things it will this file will

00:26:33,350 --> 00:26:38,360
define database variables so it will

00:26:35,270 --> 00:26:40,370
tell you the location of your database

00:26:38,360 --> 00:26:42,470
either the IP of the server it's running

00:26:40,370 --> 00:26:43,399
on or the file path to the sequel light

00:26:42,470 --> 00:26:45,960
on your

00:26:43,399 --> 00:26:48,210
this file to also indicate the hostname

00:26:45,960 --> 00:26:51,059
for the server you deploy to in each

00:26:48,210 --> 00:26:52,799
environment as well as credentials and

00:26:51,059 --> 00:26:56,639
location of any other external

00:26:52,799 --> 00:26:58,110
integrations like Twitter or s3 then we

00:26:56,639 --> 00:27:00,419
have requirements that txt which you

00:26:58,110 --> 00:27:02,279
might remember any server that runs your

00:27:00,419 --> 00:27:03,659
application will know which versions of

00:27:02,279 --> 00:27:06,029
packages to download thanks to the

00:27:03,659 --> 00:27:07,529
presence of this file and once they're

00:27:06,029 --> 00:27:09,299
installed the path variable on that

00:27:07,529 --> 00:27:12,690
server will tell them where to find the

00:27:09,299 --> 00:27:14,970
executables for those patches this is a

00:27:12,690 --> 00:27:18,210
file you might recognize the emit dot P

00:27:14,970 --> 00:27:19,980
file it's kind of everywhere but all it

00:27:18,210 --> 00:27:21,570
does is it's usually just an empty file

00:27:19,980 --> 00:27:23,549
and all it does is just tell your Python

00:27:21,570 --> 00:27:24,809
compiler like hey these other files that

00:27:23,549 --> 00:27:26,370
are in this folder I'm in these are

00:27:24,809 --> 00:27:29,159
Python files so make sure you include

00:27:26,370 --> 00:27:32,789
them when you compile all this code and

00:27:29,159 --> 00:27:34,980
finally we have if you want to see WSGI

00:27:32,789 --> 00:27:37,230
you can look for the if name equals main

00:27:34,980 --> 00:27:39,029
statement and the file that contains

00:27:37,230 --> 00:27:41,970
this usually won't explicitly mention

00:27:39,029 --> 00:27:44,700
WSGI but it will tell you where the web

00:27:41,970 --> 00:27:46,169
service request or this file is where

00:27:44,700 --> 00:27:48,090
the web service request first makes

00:27:46,169 --> 00:27:49,919
contact with your application code and

00:27:48,090 --> 00:27:53,850
you can kind of see how everything

00:27:49,919 --> 00:27:56,399
executes from there so we've covered it

00:27:53,850 --> 00:27:58,980
all and hopefully demystified these

00:27:56,399 --> 00:28:01,710
different topics for you here's how your

00:27:58,980 --> 00:28:04,049
setup looks and if you need help getting

00:28:01,710 --> 00:28:05,909
here you can just Google what I did at

00:28:04,049 --> 00:28:09,360
the beginning build and deploy a Python

00:28:05,909 --> 00:28:11,490
web site using flask and sequel Lite but

00:28:09,360 --> 00:28:13,649
again this is one of the many many

00:28:11,490 --> 00:28:15,809
possible setups you can sub in any

00:28:13,649 --> 00:28:17,220
technology for any one of these you can

00:28:15,809 --> 00:28:18,899
remove some of these you can add stuff

00:28:17,220 --> 00:28:20,460
there's a ton of different ways to do

00:28:18,899 --> 00:28:22,549
this it's really just a matter of

00:28:20,460 --> 00:28:25,350
preference and what makes sense to you

00:28:22,549 --> 00:28:27,960
but if you need somewhere to start

00:28:25,350 --> 00:28:29,519
here's what I suggest when you want to

00:28:27,960 --> 00:28:31,409
build a web app you'll need a virtual

00:28:29,519 --> 00:28:34,440
environment and if you're a beginner I

00:28:31,409 --> 00:28:36,000
recommend virtual ends if when you want

00:28:34,440 --> 00:28:37,799
to set up data storage if you're a

00:28:36,000 --> 00:28:41,490
beginner I recommend using sequel Lite

00:28:37,799 --> 00:28:44,669
and finally for a web framework flask is

00:28:41,490 --> 00:28:47,760
really easy to use and you can learn a

00:28:44,669 --> 00:28:50,639
lot from using it and again use tip to

00:28:47,760 --> 00:28:52,440
install any packages that you need so

00:28:50,639 --> 00:28:54,480
now that you have this sample recipe um

00:28:52,440 --> 00:28:56,129
you can get comfortable with it and once

00:28:54,480 --> 00:28:57,120
you're comfortable again you can sub it

00:28:56,129 --> 00:28:58,440
out free sub out and

00:28:57,120 --> 00:28:59,760
of these for your own ingredients and

00:28:58,440 --> 00:29:01,140
hopefully you can use what you've

00:28:59,760 --> 00:29:03,120
learned in this talk as well as your own

00:29:01,140 --> 00:29:04,650
experience to figure out which

00:29:03,120 --> 00:29:06,780
ingredients will work best for you and

00:29:04,650 --> 00:29:08,100
your application so now these steps in

00:29:06,780 --> 00:29:09,750
terms have been unmasked and be

00:29:08,100 --> 00:29:12,030
mystified hopefully you'll be better

00:29:09,750 --> 00:29:13,380
prepared to navigate the overwhelming

00:29:12,030 --> 00:29:15,360
amount of unhelpful information out

00:29:13,380 --> 00:29:17,640
there and to better understand helpful

00:29:15,360 --> 00:29:19,440
information when you come across it and

00:29:17,640 --> 00:29:26,930
remember knowing what to Google is half

00:29:19,440 --> 00:29:32,720
the battle thank you thank you

00:29:26,930 --> 00:29:35,520
let's give Mary one more big hand and

00:29:32,720 --> 00:29:37,410
she's offered to take questions in the

00:29:35,520 --> 00:29:38,790
hallway track so anybody wants to talk

00:29:37,410 --> 00:29:40,679
with her right after this please feel

00:29:38,790 --> 00:29:42,690
free to to meet with Mary in the hallway

00:29:40,679 --> 00:29:43,800
right outside yeah right outside that's

00:29:42,690 --> 00:29:47,900
great we're going to have a ten minute

00:29:43,800 --> 00:29:47,900

YouTube URL: https://www.youtube.com/watch?v=OaT0EN-02iY


