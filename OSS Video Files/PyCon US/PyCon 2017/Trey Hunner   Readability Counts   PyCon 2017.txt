Title: Trey Hunner   Readability Counts   PyCon 2017
Publication date: 2017-05-20
Playlist: PyCon 2017
Description: 
	"Speaker: Trey Hunner

Have you found unreadable PEP8-compliant code and wondered how to fix it?  Have you ever seen code that was simply a pleasure to read?

If you've ever wondered what makes code easy to read, this talk is for you.

During this talk we'll learn a number of techniques for refactoring code to improve readability and maintainability.

We'll discuss:

- whitespace
- self-documenting code
- modularity
- expectation management

We'll end with a checklist for improving the readability of your own code.

Slides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides"
Captions: 
	00:00:52,010 --> 00:00:56,309
good morning

00:00:54,199 --> 00:00:57,989
we've got Trey hunter here and he's

00:00:56,309 --> 00:00:58,760
gonna talk to us about readability Thank

00:00:57,989 --> 00:01:08,369
You Trey

00:00:58,760 --> 00:01:10,140
Jim hi so I don't have an introduction

00:01:08,369 --> 00:01:12,630
slide so you can look stuff up about me

00:01:10,140 --> 00:01:14,880
on the internet so if we - ask me

00:01:12,630 --> 00:01:19,200
afterwards so we are going to talk about

00:01:14,880 --> 00:01:20,610
readability readability is simply the

00:01:19,200 --> 00:01:22,799
measure of how easily we can read our

00:01:20,610 --> 00:01:24,090
code we're talking about code here this

00:01:22,799 --> 00:01:28,049
is a definition about text from

00:01:24,090 --> 00:01:29,400
Wikipedia it's the same deal so we are

00:01:28,049 --> 00:01:31,380
all here because we care about

00:01:29,400 --> 00:01:33,420
readability or because you stayed in

00:01:31,380 --> 00:01:34,829
this room from the last talk for those

00:01:33,420 --> 00:01:35,939
of you who care about readability why do

00:01:34,829 --> 00:01:41,790
we care about readability

00:01:35,939 --> 00:01:44,100
what makes readability important every

00:01:41,790 --> 00:01:45,810
time you fix a bug change some

00:01:44,100 --> 00:01:49,159
functionality or add a feature to your

00:01:45,810 --> 00:01:51,630
code you probably need to read your code

00:01:49,159 --> 00:01:54,720
so you probably read more code more

00:01:51,630 --> 00:01:57,180
often than you write it also code

00:01:54,720 --> 00:01:59,070
doesn't always completely stagnate you

00:01:57,180 --> 00:02:01,939
do sometimes need to change code to

00:01:59,070 --> 00:02:04,290
change code you need to read that code

00:02:01,939 --> 00:02:06,210
readability is a prerequisite for

00:02:04,290 --> 00:02:09,869
maintainability you can't maintain a

00:02:06,210 --> 00:02:12,330
code unless you can read it also not all

00:02:09,869 --> 00:02:14,010
teams are immortal you do sometimes need

00:02:12,330 --> 00:02:15,480
to hire new developers when you

00:02:14,010 --> 00:02:17,879
irony developers you need to onboard

00:02:15,480 --> 00:02:20,159
those new developers it is a lot easier

00:02:17,879 --> 00:02:25,349
to onboard a new team member if they can

00:02:20,159 --> 00:02:27,060
read your code before we get started

00:02:25,349 --> 00:02:30,209
let's make it clear what we are not

00:02:27,060 --> 00:02:33,540
talking about we are not going to talk

00:02:30,209 --> 00:02:35,190
about how easy it is to write code we

00:02:33,540 --> 00:02:37,560
are also not going to talk about how

00:02:35,190 --> 00:02:39,980
easy it is for a computer to read your

00:02:37,560 --> 00:02:42,390
code or a computer to run your code

00:02:39,980 --> 00:02:44,609
during this talk we are assuming that

00:02:42,390 --> 00:02:46,980
code is primarily meant for human

00:02:44,609 --> 00:02:49,470
consumption we are specifically talking

00:02:46,980 --> 00:02:54,150
about how easy it is for humans to read

00:02:49,470 --> 00:02:56,099
your code let's talk about how you

00:02:54,150 --> 00:02:59,329
structure your code this basically boils

00:02:56,099 --> 00:03:01,950
down to where you put your line breaks

00:02:59,329 --> 00:03:05,340
we are also going to talk about during

00:03:01,950 --> 00:03:07,980
this talk naming unnamed things and

00:03:05,340 --> 00:03:09,750
naming things descriptively and finally

00:03:07,980 --> 00:03:11,690
we're going to reconsider some of the

00:03:09,750 --> 00:03:13,980
programming idioms that we use every day

00:03:11,690 --> 00:03:15,510
we'll be looking at a lot of small code

00:03:13,980 --> 00:03:17,010
examples I'm going to tweet out the

00:03:15,510 --> 00:03:19,379
slides after the sock so don't worry

00:03:17,010 --> 00:03:23,400
about missing any codes that you don't

00:03:19,379 --> 00:03:25,859
understand let's talk about the

00:03:23,400 --> 00:03:28,169
structure of our code first in the

00:03:25,859 --> 00:03:30,540
modern age line length is no longer a

00:03:28,169 --> 00:03:33,120
technical limitation screens are really

00:03:30,540 --> 00:03:35,609
wide line lengths nowadays is about

00:03:33,120 --> 00:03:39,090
readability long lines are simply hard

00:03:35,609 --> 00:03:41,370
to read line length is a little flawed

00:03:39,090 --> 00:03:44,120
though line length only approximately

00:03:41,370 --> 00:03:46,680
correlates with readability

00:03:44,120 --> 00:03:49,160
when discussing line length remember

00:03:46,680 --> 00:03:52,680
that short lines are not the end goal

00:03:49,160 --> 00:03:54,810
readability is so when inserting line

00:03:52,680 --> 00:04:01,019
breaks make sure that you're focusing on

00:03:54,810 --> 00:04:05,010
readability not on line lengths let's

00:04:01,019 --> 00:04:09,659
take a look at an example this code has

00:04:05,010 --> 00:04:11,370
a line length under 60 characters as you

00:04:09,659 --> 00:04:13,799
read this code you're probably trying to

00:04:11,370 --> 00:04:15,180
figure out what it does you're not going

00:04:13,799 --> 00:04:16,709
to figure out what it does until you've

00:04:15,180 --> 00:04:19,380
discovered the structure of this code

00:04:16,709 --> 00:04:20,909
that first line there it is a generator

00:04:19,380 --> 00:04:23,760
expression that has two four loops

00:04:20,909 --> 00:04:26,340
inside it that second line is a generate

00:04:23,760 --> 00:04:27,389
expression that has an if statement

00:04:26,340 --> 00:04:29,909
inside and Edison

00:04:27,389 --> 00:04:31,620
for loop this code is hard to read

00:04:29,909 --> 00:04:33,900
because the line breaks were inserted

00:04:31,620 --> 00:04:36,300
completely arbitrarily the author of

00:04:33,900 --> 00:04:41,849
this code was focusing on line lengths

00:04:36,300 --> 00:04:46,979
and not on readability is this code more

00:04:41,849 --> 00:04:48,449
readable yeah this is the same code as

00:04:46,979 --> 00:04:50,279
before but the line breaks have been

00:04:48,449 --> 00:04:53,159
moved around to split up the code into

00:04:50,279 --> 00:04:54,870
logical parts these line breaks are not

00:04:53,159 --> 00:04:56,849
inserted arbitrarily they were inserted

00:04:54,870 --> 00:05:02,310
with purpose the purpose of improving

00:04:56,849 --> 00:05:07,379
readability let's talk about regular

00:05:02,310 --> 00:05:11,129
expressions this function returns true

00:05:07,379 --> 00:05:14,569
if the string it is given is a valid

00:05:11,129 --> 00:05:16,650
universally unique identifier a UUID

00:05:14,569 --> 00:05:18,509
UUID is consists of a bunch of

00:05:16,650 --> 00:05:21,419
hexadecimal digits with dashes in

00:05:18,509 --> 00:05:23,159
between them this function uses a

00:05:21,419 --> 00:05:24,479
regular expression at split over two

00:05:23,159 --> 00:05:26,669
lines of code here could have been one

00:05:24,479 --> 00:05:28,499
line of code it's difficult to read

00:05:26,669 --> 00:05:31,229
because regular expressions are

00:05:28,499 --> 00:05:33,240
information dense regular expressions

00:05:31,229 --> 00:05:35,250
are code it's a programming language

00:05:33,240 --> 00:05:38,969
inside of a programming language regular

00:05:35,250 --> 00:05:42,899
expressions are code written all on one

00:05:38,969 --> 00:05:44,729
line without whitespace or comments who

00:05:42,899 --> 00:05:48,960
writes their Python code all on one line

00:05:44,729 --> 00:05:50,189
without whitespace or comments all right

00:05:48,960 --> 00:05:52,349
I don't see any hands so there's not

00:05:50,189 --> 00:05:54,389
even any Joker's in the room no one

00:05:52,349 --> 00:05:55,649
writes their Python code on one line

00:05:54,389 --> 00:05:57,839
without white space or comments it's not

00:05:55,649 --> 00:05:59,339
possible to do you wouldn't write your

00:05:57,839 --> 00:06:01,370
Python code this way you couldn't write

00:05:59,339 --> 00:06:03,779
your Python code this way

00:06:01,370 --> 00:06:08,279
why do we write our regular expressions

00:06:03,779 --> 00:06:11,099
this way when using regular expressions

00:06:08,279 --> 00:06:13,409
always enable verbose mode verbose mode

00:06:11,099 --> 00:06:15,120
allows you to wrap your look at regular

00:06:13,409 --> 00:06:17,849
expressions over multiple lines and

00:06:15,120 --> 00:06:20,009
insert comments we've broken up what we

00:06:17,849 --> 00:06:21,990
had is two lines of code into 13 lines

00:06:20,009 --> 00:06:24,779
of code we've also added whitespace and

00:06:21,990 --> 00:06:26,629
we've added comments those extra line

00:06:24,779 --> 00:06:29,250
breaks are the biggest help here though

00:06:26,629 --> 00:06:34,770
when using regular expressions always

00:06:29,250 --> 00:06:36,899
turn on verbose mode let's look at

00:06:34,770 --> 00:06:39,659
another example let's say we are

00:06:36,899 --> 00:06:41,250
creating a Django model and one of our

00:06:39,659 --> 00:06:45,120
model fields has a bun

00:06:41,250 --> 00:06:46,860
of arguments being passed to it so we

00:06:45,120 --> 00:06:48,270
are passing a lot of arguments into this

00:06:46,860 --> 00:06:50,040
foreign key field if you don't

00:06:48,270 --> 00:06:51,990
understand Django this is a function

00:06:50,040 --> 00:06:54,840
call or maybe a class a class that's

00:06:51,990 --> 00:06:56,220
being called here this feels a little

00:06:54,840 --> 00:06:59,880
bit unwieldy there's a lot of things

00:06:56,220 --> 00:07:05,280
going on here is this a good way to wrap

00:06:59,880 --> 00:07:06,900
our code over multiple lines what about

00:07:05,280 --> 00:07:12,210
this way is this better or is this worse

00:07:06,900 --> 00:07:15,800
than what we had before how about this

00:07:12,210 --> 00:07:18,390
one how does this compare the other two

00:07:15,800 --> 00:07:21,170
when anything change here if we were

00:07:18,390 --> 00:07:25,250
exclusively using keyword arguments

00:07:21,170 --> 00:07:25,250
would that affect our choice so

00:07:26,030 --> 00:07:29,940
personally I usually prefer that last

00:07:28,530 --> 00:07:32,490
strategy for wrapping my lines

00:07:29,940 --> 00:07:34,800
especially with all keyword arguments

00:07:32,490 --> 00:07:36,690
that first one is difficult to read and

00:07:34,800 --> 00:07:40,320
the second one is tricky when you've got

00:07:36,690 --> 00:07:41,610
really long lines like we do here let's

00:07:40,320 --> 00:07:46,770
take a look at that last strategy more

00:07:41,610 --> 00:07:52,919
closely would it be better to leave the

00:07:46,770 --> 00:07:56,430
closing parenthesis on its own line what

00:07:52,919 --> 00:07:59,880
if we added a trailing comma but that'd

00:07:56,430 --> 00:08:01,950
make things better or worse so

00:07:59,880 --> 00:08:03,510
personally I prefer this one the most

00:08:01,950 --> 00:08:06,150
when I'm calling a function or a class

00:08:03,510 --> 00:08:08,820
on its own but not what I'm defining a

00:08:06,150 --> 00:08:10,590
function now I am certain that many of

00:08:08,820 --> 00:08:12,900
you disagree with my preferences here

00:08:10,590 --> 00:08:15,780
and that's okay the fact that we

00:08:12,900 --> 00:08:18,030
disagree means that we must document the

00:08:15,780 --> 00:08:22,770
way that we wrap our lines using a style

00:08:18,030 --> 00:08:24,570
guide for every project we create we do

00:08:22,770 --> 00:08:30,990
have a style guide for every project you

00:08:24,570 --> 00:08:32,969
create right consistency lies at the

00:08:30,990 --> 00:08:35,490
heart of readability make sure you

00:08:32,969 --> 00:08:37,589
define a style guide with explicit

00:08:35,490 --> 00:08:41,130
conventions in every single Python

00:08:37,589 --> 00:08:42,630
project you make speaking of style

00:08:41,130 --> 00:08:45,780
guides let's talk about pet babe

00:08:42,630 --> 00:08:47,940
so pet fate is the Python style guide if

00:08:45,780 --> 00:08:50,339
you aren't familiar with pet baits read

00:08:47,940 --> 00:08:52,560
it if you think you're familiar with

00:08:50,339 --> 00:08:55,180
Pepe Tree read it in fact why not make a

00:08:52,560 --> 00:08:56,800
habit of rereading Pepe Devery

00:08:55,180 --> 00:08:58,480
six months and thinking about how your

00:08:56,800 --> 00:09:01,560
perception of it is changed and your

00:08:58,480 --> 00:09:01,560
relationship with your code has changed

00:09:02,040 --> 00:09:08,830
so Pepe is the Python style guy but it

00:09:05,649 --> 00:09:11,410
is not your projects style guide you

00:09:08,830 --> 00:09:13,570
need an opinionated style guide Pepe tis

00:09:11,410 --> 00:09:16,360
not opinionated enough for your project

00:09:13,570 --> 00:09:20,040
it's a great starting point though you

00:09:16,360 --> 00:09:20,040
need a sound guide that goes beyond Pepe

00:09:22,230 --> 00:09:27,720
do poets use a maximum line length to

00:09:25,149 --> 00:09:27,720
wrap their lines

00:09:28,320 --> 00:09:34,630
no poets break up their lines with

00:09:31,720 --> 00:09:37,180
purpose in poetry inserting a line break

00:09:34,630 --> 00:09:40,330
as an art form in code inserting a line

00:09:37,180 --> 00:09:42,160
break is also an art form so its

00:09:40,330 --> 00:09:45,070
programmers we should wrap our lines

00:09:42,160 --> 00:09:47,290
with great care and remember all of your

00:09:45,070 --> 00:09:49,570
projects should have a style guide that

00:09:47,290 --> 00:09:51,010
goes beyond Pepe your code style

00:09:49,570 --> 00:09:57,040
convention should be explicitly

00:09:51,010 --> 00:09:59,980
documented if naming a concept if a

00:09:57,040 --> 00:10:03,339
concept is important it needs a name it

00:09:59,980 --> 00:10:06,880
deserves a name names give you something

00:10:03,339 --> 00:10:08,110
to communicate about unfortunately

00:10:06,880 --> 00:10:10,690
naming things is hard

00:10:08,110 --> 00:10:12,310
naming a thing requires describing that

00:10:10,690 --> 00:10:12,790
thing and describing things isn't always

00:10:12,310 --> 00:10:15,459
easy

00:10:12,790 --> 00:10:17,050
not only that once you've described a

00:10:15,459 --> 00:10:19,300
thing you need to shorten that name or

00:10:17,050 --> 00:10:20,709
shorten that description into a name and

00:10:19,300 --> 00:10:23,920
that's not always easy either

00:10:20,709 --> 00:10:26,290
if you can't think of a good short name

00:10:23,920 --> 00:10:29,440
use along a descriptive one that's a lot

00:10:26,290 --> 00:10:32,529
better than a subpar name plus you can

00:10:29,440 --> 00:10:34,839
always shorten a long name tomorrow so

00:10:32,529 --> 00:10:36,430
when naming things worry about accuracy

00:10:34,839 --> 00:10:42,130
of your variable names and not the

00:10:36,430 --> 00:10:44,170
length of them let's take a look at a

00:10:42,130 --> 00:10:49,450
couple code examples with poor variable

00:10:44,170 --> 00:10:54,459
names I bet you do not know what SC

00:10:49,450 --> 00:10:56,170
stands for in this code you might know

00:10:54,459 --> 00:10:57,550
if you had more context but if you're

00:10:56,170 --> 00:10:59,230
new to this code you'll search around

00:10:57,550 --> 00:11:01,329
for a while until you may finally

00:10:59,230 --> 00:11:03,420
discover that s C stands for state

00:11:01,329 --> 00:11:05,920
capitals

00:11:03,420 --> 00:11:09,110
don't use two letter variable names in

00:11:05,920 --> 00:11:11,490
Python use descriptive names

00:11:09,110 --> 00:11:14,519
speaking of descriptive names what does

00:11:11,490 --> 00:11:15,149
this variable I here represent is it a

00:11:14,519 --> 00:11:18,570
2-tuple

00:11:15,149 --> 00:11:21,560
is I Sub Zero capitals or is it states

00:11:18,570 --> 00:11:24,450
or is it something else completely

00:11:21,560 --> 00:11:26,760
whenever you see an index access like

00:11:24,450 --> 00:11:29,310
that Sub Zero there those brackets with

00:11:26,760 --> 00:11:32,130
a number in it this should be a red flag

00:11:29,310 --> 00:11:36,600
index accesses can usually be replaced

00:11:32,130 --> 00:11:39,690
by variables to do this we can use two

00:11:36,600 --> 00:11:42,209
to one packing you can probably tell now

00:11:39,690 --> 00:11:45,800
that s means state and C means capital

00:11:42,209 --> 00:11:48,800
so avoid using arbitrary indexes and

00:11:45,800 --> 00:11:53,310
when possible use two plon packing

00:11:48,800 --> 00:11:55,170
instead it's often a lot more explicit

00:11:53,310 --> 00:11:56,730
to use two blonds packing rather than

00:11:55,170 --> 00:11:59,910
having these arbitrary indexes in your

00:11:56,730 --> 00:12:01,620
code now while you did probably guess

00:11:59,910 --> 00:12:03,570
that s and c here means state and

00:12:01,620 --> 00:12:06,390
capital there's no reason not to use

00:12:03,570 --> 00:12:09,300
real words for these variables name

00:12:06,390 --> 00:12:11,880
every variable with care optimize for

00:12:09,300 --> 00:12:17,490
maximum accuracy and completeness not

00:12:11,880 --> 00:12:18,899
for short variable names let's take a

00:12:17,490 --> 00:12:25,770
look at an example of code that could

00:12:18,899 --> 00:12:28,470
use some more variable names this code

00:12:25,770 --> 00:12:33,420
returns a list of all anagrams of this

00:12:28,470 --> 00:12:34,890
word variable here all anagrams of this

00:12:33,420 --> 00:12:37,170
word variable that are specifically in

00:12:34,890 --> 00:12:39,540
the candidates list that comes into this

00:12:37,170 --> 00:12:42,089
function this isn't bad code but it's

00:12:39,540 --> 00:12:44,430
also not the most descriptive code that

00:12:42,089 --> 00:12:47,910
if statement in particular is pretty

00:12:44,430 --> 00:12:52,829
long what if we abstract that logic out

00:12:47,910 --> 00:12:54,750
into its own function so we have an is

00:12:52,829 --> 00:12:56,699
anagram function we're calling now I

00:12:54,750 --> 00:12:59,910
think that makes things a lot more

00:12:56,699 --> 00:13:03,209
obvious we are checking whether two

00:12:59,910 --> 00:13:04,890
words are in fact anagrams we've broken

00:13:03,209 --> 00:13:06,959
the problem down and described the

00:13:04,890 --> 00:13:09,060
process that we're using and at the same

00:13:06,959 --> 00:13:11,300
time we've hidden away the details of

00:13:09,060 --> 00:13:13,560
our actual algorithm in that function

00:13:11,300 --> 00:13:18,420
let's take a look at that is anagram

00:13:13,560 --> 00:13:21,329
function so this is pretty much exactly

00:13:18,420 --> 00:13:22,980
what our if statement had in it before

00:13:21,329 --> 00:13:25,529
it could still use some work here though

00:13:22,980 --> 00:13:26,910
word one dot upper appears twice and so

00:13:25,529 --> 00:13:28,850
does word to that upper so we have a

00:13:26,910 --> 00:13:34,619
little bit of code duplication going on

00:13:28,850 --> 00:13:35,069
let's fix that so I think that's a lot

00:13:34,619 --> 00:13:37,889
better

00:13:35,069 --> 00:13:39,449
I find the conditional expression on

00:13:37,889 --> 00:13:42,269
that last line a little easier to read

00:13:39,449 --> 00:13:45,899
at this point I think there's still room

00:13:42,269 --> 00:13:49,019
for improvement though so one strategy I

00:13:45,899 --> 00:13:51,089
like to use to test code clarity is to

00:13:49,019 --> 00:13:54,540
read my code allowed to test how

00:13:51,089 --> 00:13:57,149
descriptive it is so here we are sorting

00:13:54,540 --> 00:13:59,129
our words checking whether the sorted

00:13:57,149 --> 00:14:00,509
versions are equal and then checking

00:13:59,129 --> 00:14:03,839
whether the unsorted versions are not

00:14:00,509 --> 00:14:05,249
equal that description is not very

00:14:03,839 --> 00:14:07,319
helpful that's not how we describe

00:14:05,249 --> 00:14:09,269
asking or checking if two words or

00:14:07,319 --> 00:14:10,829
anagrams in English let's write a

00:14:09,269 --> 00:14:15,269
comment that describes our intent a

00:14:10,829 --> 00:14:17,939
little bit better so we've added two

00:14:15,269 --> 00:14:19,470
comments here if we ignore the code and

00:14:17,939 --> 00:14:21,239
just read the comments we'll see that

00:14:19,470 --> 00:14:23,429
we're verifying that the words have the

00:14:21,239 --> 00:14:26,970
same letters and whether they are

00:14:23,429 --> 00:14:28,499
different words whenever you find

00:14:26,970 --> 00:14:31,769
yourself adding a comment to your code

00:14:28,499 --> 00:14:34,769
that might be a hint that you need to

00:14:31,769 --> 00:14:37,049
make another variable name remember that

00:14:34,769 --> 00:14:40,110
comments describe things and variables

00:14:37,049 --> 00:14:41,669
make that description into code so let's

00:14:40,110 --> 00:14:46,679
turn those comments into some

00:14:41,669 --> 00:14:48,059
descriptive variable names so we've

00:14:46,679 --> 00:14:50,069
turned those two conditional statements

00:14:48,059 --> 00:14:53,220
into two new variables that describe

00:14:50,069 --> 00:14:55,259
what they do that last line says that

00:14:53,220 --> 00:14:57,059
we're checking whether these words have

00:14:55,259 --> 00:14:59,519
the same letters but are different words

00:14:57,059 --> 00:15:02,489
that's exactly what our comments said

00:14:59,519 --> 00:15:04,639
before this these new variables are

00:15:02,489 --> 00:15:07,290
different letters and have same words

00:15:04,639 --> 00:15:10,230
made the logic of our function a little

00:15:07,290 --> 00:15:13,589
bit more explicit this code is more

00:15:10,230 --> 00:15:15,419
clear and more readable because we are

00:15:13,589 --> 00:15:21,629
conveying the intent of our algorithm

00:15:15,419 --> 00:15:24,480
and not just the details so we ended up

00:15:21,629 --> 00:15:27,360
adding a I think four extra lines of

00:15:24,480 --> 00:15:31,079
code here but we broke down our process

00:15:27,360 --> 00:15:34,019
a bit so our code is a little bit easier

00:15:31,079 --> 00:15:34,980
to understand at a glance especially for

00:15:34,019 --> 00:15:36,329
a new programmer

00:15:34,980 --> 00:15:39,149
specially to someone who's new to this

00:15:36,329 --> 00:15:41,190
block of code now you may think this is

00:15:39,149 --> 00:15:43,100
a silly example I mean what we started

00:15:41,190 --> 00:15:46,110
with was not really that complicated but

00:15:43,100 --> 00:15:47,610
even if you decide to revert some or all

00:15:46,110 --> 00:15:49,889
of these changes this was still a

00:15:47,610 --> 00:15:53,519
worthwhile mental exercise the exercise

00:15:49,889 --> 00:15:55,740
of refactoring your code to make it more

00:15:53,519 --> 00:15:57,570
self documenting and more readable can

00:15:55,740 --> 00:16:02,910
really reframe the way you think about

00:15:57,570 --> 00:16:10,709
your own code let's take a look a cop at

00:16:02,910 --> 00:16:12,959
a complex django model method so this

00:16:10,709 --> 00:16:16,380
function is a method that lives inside

00:16:12,959 --> 00:16:18,149
of a Django model there's a lot going on

00:16:16,380 --> 00:16:19,680
in this method instead of reading all

00:16:18,149 --> 00:16:22,320
this code I want you to unfocus your

00:16:19,680 --> 00:16:24,949
eyes and look at the structure let me

00:16:22,320 --> 00:16:24,949
help you out there

00:16:26,250 --> 00:16:29,820
so now we can talk about this code

00:16:28,500 --> 00:16:32,010
without your getting distracted and

00:16:29,820 --> 00:16:33,209
reading it as I'm speaking the first

00:16:32,010 --> 00:16:36,149
thing you'll notice is that this code is

00:16:33,209 --> 00:16:37,709
broken up into three sections this code

00:16:36,149 --> 00:16:39,779
is broken up into three sections because

00:16:37,709 --> 00:16:42,180
each of those sections performs a

00:16:39,779 --> 00:16:45,560
different task let's add some comments

00:16:42,180 --> 00:16:48,149
to these sections to see what they do in

00:16:45,560 --> 00:16:49,589
my opinion adding those comments improve

00:16:48,149 --> 00:16:52,139
the readability of this code not just

00:16:49,589 --> 00:16:54,089
because the code is blurred out we can

00:16:52,139 --> 00:16:56,310
understand very quickly what each

00:16:54,089 --> 00:17:00,360
section is actually doing here by simply

00:16:56,310 --> 00:17:01,769
reading the comment depending on why

00:17:00,360 --> 00:17:03,569
you're reading this code you might even

00:17:01,769 --> 00:17:05,429
be able to get away with only reading

00:17:03,569 --> 00:17:07,280
the comments which is great you can

00:17:05,429 --> 00:17:09,630
understand what the code is doing

00:17:07,280 --> 00:17:14,610
without needing to understand all of the

00:17:09,630 --> 00:17:16,290
details but sometimes comments or hints

00:17:14,610 --> 00:17:20,429
that we might have forgotten to name

00:17:16,290 --> 00:17:22,230
some things we have Commons that

00:17:20,429 --> 00:17:25,650
describe each of these sections of code

00:17:22,230 --> 00:17:28,770
we could also name them let's turn these

00:17:25,650 --> 00:17:30,480
comments into variable names by putting

00:17:28,770 --> 00:17:36,450
each of these blocks of code into its

00:17:30,480 --> 00:17:38,160
own method so we've named each of these

00:17:36,450 --> 00:17:40,710
three sections of code by making three

00:17:38,160 --> 00:17:42,840
separate functions these functions are

00:17:40,710 --> 00:17:46,610
methods that live next to our original

00:17:42,840 --> 00:17:47,630
code their helper functions of sorts

00:17:46,610 --> 00:17:49,159
we left the Commons in it's

00:17:47,630 --> 00:17:51,049
documentation strings because it never

00:17:49,159 --> 00:17:53,840
hurts to have extra clarity through

00:17:51,049 --> 00:17:56,090
documentation so now that we've made

00:17:53,840 --> 00:17:57,559
three separate methods for each of these

00:17:56,090 --> 00:18:02,840
sections of code we need to call these

00:17:57,559 --> 00:18:04,159
in our original method now I don't know

00:18:02,840 --> 00:18:06,950
about you but I find this a lot easier

00:18:04,159 --> 00:18:08,720
to digest than the three completely

00:18:06,950 --> 00:18:11,690
undocumented blocks of code that we had

00:18:08,720 --> 00:18:14,149
before we've named the three actions

00:18:11,690 --> 00:18:15,799
that we're doing and most of the time

00:18:14,149 --> 00:18:17,210
you probably don't have to worry about

00:18:15,799 --> 00:18:19,580
the details of each of these three

00:18:17,210 --> 00:18:25,909
actions these variable names are good

00:18:19,580 --> 00:18:27,620
enough let's do a brief recap read your

00:18:25,909 --> 00:18:29,330
code aloud to ensure that you're

00:18:27,620 --> 00:18:30,260
describing the intent of your algorithm

00:18:29,330 --> 00:18:32,750
in detail

00:18:30,260 --> 00:18:35,360
remember that comments are great for

00:18:32,750 --> 00:18:37,340
describing things but sometimes a

00:18:35,360 --> 00:18:39,950
comment is just the first step toward a

00:18:37,340 --> 00:18:43,519
better variable name or toward a missing

00:18:39,950 --> 00:18:46,610
variable name make sure you give a name

00:18:43,519 --> 00:18:48,080
to everything you can and in general

00:18:46,610 --> 00:18:54,230
strive for a descriptive and

00:18:48,080 --> 00:18:56,620
self-documenting code let's talk about

00:18:54,230 --> 00:18:58,970
some of the code constructs that we use

00:18:56,620 --> 00:19:02,360
there's usually multiple ways to write

00:18:58,970 --> 00:19:04,850
the same code but there's often multiple

00:19:02,360 --> 00:19:06,950
tools that we could use to write that

00:19:04,850 --> 00:19:09,799
code so when given the opportunity in

00:19:06,950 --> 00:19:12,559
general I prefer to use specific purpose

00:19:09,799 --> 00:19:15,289
tools over general purpose tools as long

00:19:12,559 --> 00:19:19,370
as they are easy to understand or easier

00:19:15,289 --> 00:19:25,250
to understand specific problems call for

00:19:19,370 --> 00:19:30,200
specific solutions let's take a look at

00:19:25,250 --> 00:19:34,010
some exception handling code here we are

00:19:30,200 --> 00:19:35,929
opening a database connection we are

00:19:34,010 --> 00:19:37,100
reading from that database connection

00:19:35,929 --> 00:19:39,200
and then we are closing that database

00:19:37,100 --> 00:19:41,149
connection we need to make sure that we

00:19:39,200 --> 00:19:42,679
close our database connection even if an

00:19:41,149 --> 00:19:45,500
exception occurs so we're using a try

00:19:42,679 --> 00:19:48,289
finally block here whenever you have a

00:19:45,500 --> 00:19:50,149
section of code that's wrapped in a try

00:19:48,289 --> 00:19:51,950
finally or has some kind of cleanup step

00:19:50,149 --> 00:19:55,360
I want you to think about using a

00:19:51,950 --> 00:19:55,360
context manager instead

00:19:56,650 --> 00:20:01,330
it's not that hard to make your own

00:19:58,480 --> 00:20:03,820
context managers to do so you need to

00:20:01,330 --> 00:20:06,670
make a dunder inter method and a dunder

00:20:03,820 --> 00:20:08,230
exit method oh and for those who don't

00:20:06,670 --> 00:20:09,910
know what dunder stands for it stands

00:20:08,230 --> 00:20:11,800
for double underscore because there are

00:20:09,910 --> 00:20:15,190
two underscores before they method name

00:20:11,800 --> 00:20:16,510
two underscores after that name let's

00:20:15,190 --> 00:20:18,550
take a look at how we can use this

00:20:16,510 --> 00:20:23,290
context manager we've made here to

00:20:18,550 --> 00:20:25,030
refactor that code so this is somewhat

00:20:23,290 --> 00:20:27,550
simpler than that try finally statement

00:20:25,030 --> 00:20:29,080
that we were using before is a reader of

00:20:27,550 --> 00:20:30,490
this code we don't have to worry about

00:20:29,080 --> 00:20:32,200
whether we're closing the database

00:20:30,490 --> 00:20:35,950
connection after we open it that's

00:20:32,200 --> 00:20:37,750
pretty nice but we don't always have to

00:20:35,950 --> 00:20:42,460
write our own context managers like we

00:20:37,750 --> 00:20:45,309
just did the standard library has a

00:20:42,460 --> 00:20:46,570
closing context manager it does pretty

00:20:45,309 --> 00:20:49,000
much the same thing as what we were

00:20:46,570 --> 00:20:51,340
doing so whenever you need a cleanup

00:20:49,000 --> 00:20:53,530
step think about using a context manager

00:20:51,340 --> 00:20:55,630
and you can probably find one that fits

00:20:53,530 --> 00:20:58,150
your use case in a standard library or a

00:20:55,630 --> 00:21:07,480
third-party library you rarely have to

00:20:58,150 --> 00:21:09,970
write your own talk about for loops this

00:21:07,480 --> 00:21:12,190
code loops over something you can tell

00:21:09,970 --> 00:21:13,420
that even though it's blurred out this

00:21:12,190 --> 00:21:16,900
code actually does a little bit more

00:21:13,420 --> 00:21:18,580
than that though specifically the

00:21:16,900 --> 00:21:20,800
purpose of this code is to loop over

00:21:18,580 --> 00:21:23,140
something check a condition and create a

00:21:20,800 --> 00:21:25,990
new list from items that pass that

00:21:23,140 --> 00:21:28,030
condition we're using a list append an

00:21:25,990 --> 00:21:30,340
if statement and a for loop to

00:21:28,030 --> 00:21:35,170
accomplish this task there's a better

00:21:30,340 --> 00:21:37,030
way to write this code here we are

00:21:35,170 --> 00:21:39,070
accomplishing the same task as before

00:21:37,030 --> 00:21:41,410
but instead of using a for loop an if

00:21:39,070 --> 00:21:43,750
statement and an append call we're using

00:21:41,410 --> 00:21:47,140
a list comprehension this code is

00:21:43,750 --> 00:21:49,510
shorter but it does contain less

00:21:47,140 --> 00:21:52,480
unnecessary information for our brains

00:21:49,510 --> 00:21:54,010
to process actually it isn't shorter

00:21:52,480 --> 00:21:58,809
it's one-line longer I think than what

00:21:54,010 --> 00:22:00,429
we had so when we glanced at this code

00:21:58,809 --> 00:22:02,140
we don't think looping that's the

00:22:00,429 --> 00:22:03,910
important part here looping is not what

00:22:02,140 --> 00:22:06,630
we're thinking about we think we are

00:22:03,910 --> 00:22:09,040
transforming one list into another list

00:22:06,630 --> 00:22:09,910
that's a better description of what our

00:22:09,040 --> 00:22:13,450
code actually

00:22:09,910 --> 00:22:18,910
does when you have a specific problem

00:22:13,450 --> 00:22:21,520
use a specific tool let's say we're

00:22:18,910 --> 00:22:26,440
creating a class to represent items in a

00:22:21,520 --> 00:22:29,170
shopping cart this shopping cart class

00:22:26,440 --> 00:22:31,480
is a wrapper around a dictionary now the

00:22:29,170 --> 00:22:32,770
code is not included in this class you

00:22:31,480 --> 00:22:34,330
can guess what the code is from the

00:22:32,770 --> 00:22:35,520
documentation string they had to fit it

00:22:34,330 --> 00:22:37,960
on a slide

00:22:35,520 --> 00:22:40,270
notice that this class here implements a

00:22:37,960 --> 00:22:42,820
lot of methods that really just access

00:22:40,270 --> 00:22:46,420
that dictionary that we are using under

00:22:42,820 --> 00:22:48,760
the hood in a fancy way these methods

00:22:46,420 --> 00:22:50,500
check for containments they add things

00:22:48,760 --> 00:22:52,270
they remove things they ask questions

00:22:50,500 --> 00:22:54,940
about the status of our shopping cart

00:22:52,270 --> 00:22:56,610
how many things are in it whether or not

00:22:54,940 --> 00:22:59,200
it's empty

00:22:56,610 --> 00:23:04,060
these methods should seem a little bit

00:22:59,200 --> 00:23:06,940
familiar all of these methods correspond

00:23:04,060 --> 00:23:08,650
to operations that work automatically on

00:23:06,940 --> 00:23:11,500
many native Python objects like

00:23:08,650 --> 00:23:15,160
dictionaries and lists when we use

00:23:11,500 --> 00:23:17,290
custom methods and properties someone

00:23:15,160 --> 00:23:18,730
trying to use our class will need to

00:23:17,290 --> 00:23:21,580
learn those custom methods and

00:23:18,730 --> 00:23:24,220
properties before they can use it if we

00:23:21,580 --> 00:23:26,740
use built-in Python operators instead

00:23:24,220 --> 00:23:28,630
the users of our class will not need to

00:23:26,740 --> 00:23:30,610
worry as much about learning new things

00:23:28,630 --> 00:23:34,870
because they already probably understand

00:23:30,610 --> 00:23:36,550
how lists and dictionaries work in terms

00:23:34,870 --> 00:23:38,230
of details of how we could do that how

00:23:36,550 --> 00:23:40,060
we could make our own list or dictionary

00:23:38,230 --> 00:23:43,000
like object we could use those dunder

00:23:40,060 --> 00:23:45,520
methods again we can make the operators

00:23:43,000 --> 00:23:47,710
under the hood work on our class using

00:23:45,520 --> 00:23:50,380
dunder methods for operator overloading

00:23:47,710 --> 00:23:51,520
so with this change here our shopping

00:23:50,380 --> 00:23:53,890
cart will feel a little bit more like a

00:23:51,520 --> 00:23:55,810
native Python object we can check for

00:23:53,890 --> 00:23:57,430
containment we can set items delete

00:23:55,810 --> 00:24:00,790
items check the length and check whether

00:23:57,430 --> 00:24:02,200
our shopping cart is empty do not be

00:24:00,790 --> 00:24:05,110
afraid of reaching for operator

00:24:02,200 --> 00:24:07,270
overloading when it makes sense by the

00:24:05,110 --> 00:24:08,890
way the standard library has abstract

00:24:07,270 --> 00:24:11,620
base classes that make this even easier

00:24:08,890 --> 00:24:14,200
if you're ever planning to make your own

00:24:11,620 --> 00:24:15,850
container like object a list a

00:24:14,200 --> 00:24:16,330
dictionary like object or something

00:24:15,850 --> 00:24:20,400
similar

00:24:16,330 --> 00:24:20,400
check the collections library first

00:24:21,890 --> 00:24:29,130
let's talk about functions this code

00:24:26,910 --> 00:24:33,929
connects to an IMAP server and reads

00:24:29,130 --> 00:24:35,910
email notice that one of these functions

00:24:33,929 --> 00:24:37,799
returns with server objects and the

00:24:35,910 --> 00:24:40,260
other three functions each except a

00:24:37,799 --> 00:24:44,190
server objects this should be a hint

00:24:40,260 --> 00:24:46,080
that something weird is going on if you

00:24:44,190 --> 00:24:47,820
ever find yourself repeatedly passing

00:24:46,080 --> 00:24:52,049
the same data to multiple functions

00:24:47,820 --> 00:24:53,909
think about making a class that is

00:24:52,049 --> 00:24:56,520
exactly what classes were designed for

00:24:53,909 --> 00:25:06,240
classes bundled together functionality

00:24:56,520 --> 00:25:07,830
and data okay let's do a recap when you

00:25:06,240 --> 00:25:09,600
find yourself wrapping code and

00:25:07,830 --> 00:25:11,730
redundant try final your try except

00:25:09,600 --> 00:25:14,909
blocks think about whether you could use

00:25:11,730 --> 00:25:17,820
a context manager instead when making

00:25:14,909 --> 00:25:21,150
one list from another list use a list

00:25:17,820 --> 00:25:23,100
comprehension when your object looks

00:25:21,150 --> 00:25:26,250
like a container and acts like a

00:25:23,100 --> 00:25:30,179
container use operator overloading and

00:25:26,250 --> 00:25:34,230
make it into a container don't be afraid

00:25:30,179 --> 00:25:40,020
of dunder methods if you have a specific

00:25:34,230 --> 00:25:42,000
problem use a specific solution when

00:25:40,020 --> 00:25:44,789
you're writing code stop to pause every

00:25:42,000 --> 00:25:48,030
once in awhile and actively consider the

00:25:44,789 --> 00:25:49,650
readability of your code you can use

00:25:48,030 --> 00:25:51,539
this checklist here as a starting point

00:25:49,650 --> 00:25:53,730
to make your own reflections on code

00:25:51,539 --> 00:25:56,250
readability a little bit easier as you

00:25:53,730 --> 00:25:58,620
use this checklist on your code start to

00:25:56,250 --> 00:26:00,120
build up that code style guide that we

00:25:58,620 --> 00:26:02,659
talked about earlier that we all agreed

00:26:00,120 --> 00:26:05,340
we need to have in our own projects

00:26:02,659 --> 00:26:09,030
remember that every project you make

00:26:05,340 --> 00:26:11,039
needs a detailed code style guide the

00:26:09,030 --> 00:26:12,990
more decisions you can offload to your

00:26:11,039 --> 00:26:15,210
style guide the more brainpower you'll

00:26:12,990 --> 00:26:19,169
have to worry about less trivial and

00:26:15,210 --> 00:26:21,240
more interesting things this is a link

00:26:19,169 --> 00:26:22,740
to my style guide this is not your style

00:26:21,240 --> 00:26:24,690
guide you need to make your own style

00:26:22,740 --> 00:26:27,030
guide you're welcome to look at mine you

00:26:24,690 --> 00:26:30,059
can steal it if you like make sure that

00:26:27,030 --> 00:26:32,600
you make one that matches your own code

00:26:30,059 --> 00:26:32,600
style though

00:26:33,480 --> 00:26:38,840
and finally here's a list of videos that

00:26:36,269 --> 00:26:41,039
I recommend watching when you get home

00:26:38,840 --> 00:26:43,490
specifically that first one I said you

00:26:41,039 --> 00:26:45,690
should I should you should make classes

00:26:43,490 --> 00:26:47,610
when you have functionality and data

00:26:45,690 --> 00:26:48,960
that you want to bundle together if you

00:26:47,610 --> 00:26:50,250
do not have functionality and data that

00:26:48,960 --> 00:26:52,500
you want to bundle together don't make

00:26:50,250 --> 00:26:55,139
classes please watch all these videos

00:26:52,500 --> 00:26:56,909
they're really great I would like to

00:26:55,139 --> 00:26:58,529
take questions in the hallway so we can

00:26:56,909 --> 00:27:00,050
talk a little bit more in person thank

00:26:58,529 --> 00:27:06,109
you

00:27:00,050 --> 00:27:06,109

YouTube URL: https://www.youtube.com/watch?v=knMg6G9_XCg


