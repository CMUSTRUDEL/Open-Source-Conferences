Title: Brendan McCollam   Web identity OAuth2 and OpenIDConnect   PyCon 2017
Publication date: 2017-05-20
Playlist: PyCon 2017
Description: 
	"Speaker: Brendan McCollam

Interested in adding single sign-on to your application, but confused about the variety of different web authentication methods out there? OAuth, OAuth2, OpenID, OpenIDConnect, SAML, Facebook Connect? This talk will clarify the different protocols, examining OAuth2 and OpenIDConnect in greater detail. It will demonstrate a basic client implementation using FLOSS libraries, and briefly touch on some of the issues involved in server implementation.

Slides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides"
Captions: 
	00:00:00,030 --> 00:00:05,310
welcome so this is Brandon McCullen

00:00:03,210 --> 00:00:08,429
he's from the University of Chicago and

00:00:05,310 --> 00:00:11,790
he's been coding in Python for well over

00:00:08,429 --> 00:00:13,590
five to ten years and he's going to give

00:00:11,790 --> 00:00:22,410
us a talk about today let's go ahead and

00:00:13,590 --> 00:00:24,570
give him a round of applause hi thanks

00:00:22,410 --> 00:00:26,039
for coming to my talk everyone just to

00:00:24,570 --> 00:00:28,500
start off with a little bit about myself

00:00:26,039 --> 00:00:30,869
I'm originally from Chicago but I moved

00:00:28,500 --> 00:00:33,390
to London about a year ago so living

00:00:30,869 --> 00:00:35,520
there now I work at Globus we're a

00:00:33,390 --> 00:00:37,020
non-profit we're a joint project between

00:00:35,520 --> 00:00:40,079
the University of Chicago and Argonne

00:00:37,020 --> 00:00:42,420
National Lab we're a data platform that

00:00:40,079 --> 00:00:44,700
helps manage large-scale scientific data

00:00:42,420 --> 00:00:47,399
and I work on the authentication

00:00:44,700 --> 00:00:49,469
back-end for that using OAuth 2 an open

00:00:47,399 --> 00:00:51,570
ID connect to protocols that were going

00:00:49,469 --> 00:00:53,190
to be talking about today so what do I

00:00:51,570 --> 00:00:54,840
mean by those what are what are we

00:00:53,190 --> 00:00:56,760
actually talking about

00:00:54,840 --> 00:01:00,000
if you've ever logged into a website

00:00:56,760 --> 00:01:02,879
using some other account Facebook Google

00:01:00,000 --> 00:01:05,250
maybe Twitter you have probably used

00:01:02,879 --> 00:01:07,950
these protocols without necessarily even

00:01:05,250 --> 00:01:09,360
being aware of it different people have

00:01:07,950 --> 00:01:10,920
different terms for this some people

00:01:09,360 --> 00:01:13,470
call this single sign-on some people

00:01:10,920 --> 00:01:14,790
call this federated identity some people

00:01:13,470 --> 00:01:16,590
get really pedantic about the

00:01:14,790 --> 00:01:19,170
distinctions between those and will

00:01:16,590 --> 00:01:20,549
fight you if you use the wrong word so

00:01:19,170 --> 00:01:23,310
I'm kind of sidestepping that I'm

00:01:20,549 --> 00:01:25,650
calling this whole scheme web identity

00:01:23,310 --> 00:01:27,720
so basically any situation where you

00:01:25,650 --> 00:01:30,900
have a user that wants to login to a

00:01:27,720 --> 00:01:32,850
website but that website doesn't want to

00:01:30,900 --> 00:01:35,009
do the authentication itself so they're

00:01:32,850 --> 00:01:37,380
going to redirect the user over to some

00:01:35,009 --> 00:01:39,390
third-party authorization service the

00:01:37,380 --> 00:01:42,000
user can log in there and then they get

00:01:39,390 --> 00:01:44,880
redirected back to the website as a as

00:01:42,000 --> 00:01:46,259
an authenticated user so why would you

00:01:44,880 --> 00:01:49,140
want that why does anyone care about

00:01:46,259 --> 00:01:52,079
this so a big part is going to be

00:01:49,140 --> 00:01:54,090
convenience so users have lots of

00:01:52,079 --> 00:01:56,040
accounts these days users don't like

00:01:54,090 --> 00:01:57,930
signing up for new accounts especially

00:01:56,040 --> 00:01:59,729
if you have a small website maybe you're

00:01:57,930 --> 00:02:00,950
running a hobby project or a little app

00:01:59,729 --> 00:02:03,479
that you're trying to get off the ground

00:02:00,950 --> 00:02:05,610
users might not want to sign up for yet

00:02:03,479 --> 00:02:08,340
another account so it's more convenient

00:02:05,610 --> 00:02:09,690
if they can just use an account that

00:02:08,340 --> 00:02:12,870
they already have and log into your

00:02:09,690 --> 00:02:13,740
application access to a third party

00:02:12,870 --> 00:02:16,440
platform

00:02:13,740 --> 00:02:19,560
be a big advantage of using remote

00:02:16,440 --> 00:02:21,450
authentication like this so if you have

00:02:19,560 --> 00:02:23,580
some kind of professional application

00:02:21,450 --> 00:02:25,020
maybe you let users log in with their

00:02:23,580 --> 00:02:28,050
LinkedIn account and then you get access

00:02:25,020 --> 00:02:29,610
to their LinkedIn contacts so you want

00:02:28,050 --> 00:02:31,620
to be careful about the privacy

00:02:29,610 --> 00:02:34,520
implications of that but it can be a

00:02:31,620 --> 00:02:38,880
real advantage for your application

00:02:34,520 --> 00:02:40,980
security is a big win here so especially

00:02:38,880 --> 00:02:42,690
if you're just starting out and you

00:02:40,980 --> 00:02:44,940
don't want to have to deal with all of

00:02:42,690 --> 00:02:48,060
the security implications of managing

00:02:44,940 --> 00:02:50,460
users passwords securing password hashes

00:02:48,060 --> 00:02:52,350
using salts setting up two-factor

00:02:50,460 --> 00:02:54,360
authentication having a secure way to

00:02:52,350 --> 00:02:56,490
recover a lost password like these are

00:02:54,360 --> 00:02:58,740
all hassles to deal with and if you can

00:02:56,490 --> 00:03:00,120
offload that to somebody like Google or

00:02:58,740 --> 00:03:02,010
somebody like Facebook somebody who's

00:03:00,120 --> 00:03:04,490
got deep pockets and a security

00:03:02,010 --> 00:03:07,110
engineering team and intrusion detection

00:03:04,490 --> 00:03:09,840
you that's a big win for you as a

00:03:07,110 --> 00:03:11,600
developer and for your users who you

00:03:09,840 --> 00:03:14,940
know don't have their credentials stolen

00:03:11,600 --> 00:03:18,150
and finally just sheer laziness as a

00:03:14,940 --> 00:03:20,010
developer anything that we can do that

00:03:18,150 --> 00:03:21,480
can be somebody else's problem if you

00:03:20,010 --> 00:03:23,190
can use a library if you can avoid

00:03:21,480 --> 00:03:26,520
repeating yourself if you can avoid

00:03:23,190 --> 00:03:28,560
reinventing the wheel that's great so if

00:03:26,520 --> 00:03:30,780
you can let somebody else handle

00:03:28,560 --> 00:03:32,700
authentication for you then it's

00:03:30,780 --> 00:03:35,850
something it's one less thing on your

00:03:32,700 --> 00:03:37,800
plate so I know I said I wasn't going to

00:03:35,850 --> 00:03:40,290
be pedantic about terminology but there

00:03:37,800 --> 00:03:41,910
is one distinction that I want to draw

00:03:40,290 --> 00:03:44,040
here that I think will help understand

00:03:41,910 --> 00:03:45,690
helped make it easier to understand as

00:03:44,040 --> 00:03:47,130
we go forward so I want to talk about

00:03:45,690 --> 00:03:49,200
the difference between an authorization

00:03:47,130 --> 00:03:51,870
protocol like the OAuth series of

00:03:49,200 --> 00:03:54,420
protocols and authentication protocols

00:03:51,870 --> 00:03:57,210
like the open ID connect and open ID

00:03:54,420 --> 00:03:58,920
protocols so when you're talking about

00:03:57,210 --> 00:04:01,550
authorization you're talking about

00:03:58,920 --> 00:04:03,690
something that gives you the client

00:04:01,550 --> 00:04:05,280
permission to do something so it is

00:04:03,690 --> 00:04:07,020
authorizing you to do something so you

00:04:05,280 --> 00:04:10,590
can think of this as analogous to a key

00:04:07,020 --> 00:04:12,110
that unlocks a door it unlocks something

00:04:10,590 --> 00:04:14,280
you know it might give you access to

00:04:12,110 --> 00:04:16,590
calendar entries it might give you

00:04:14,280 --> 00:04:18,209
access to upload files to a cloud

00:04:16,590 --> 00:04:20,760
storage solution it might give you

00:04:18,209 --> 00:04:23,580
access to read from or post to social

00:04:20,760 --> 00:04:25,229
media but the important thing is that

00:04:23,580 --> 00:04:27,450
the key itself doesn't have

00:04:25,229 --> 00:04:29,760
informational content so the key doesn't

00:04:27,450 --> 00:04:31,650
tell you anything about the owner of the

00:04:29,760 --> 00:04:34,860
key or the person that that key belongs

00:04:31,650 --> 00:04:36,900
to on its own in contrast an

00:04:34,860 --> 00:04:40,170
authentication protocol you can think of

00:04:36,900 --> 00:04:41,880
authentication as analogous to a ID

00:04:40,170 --> 00:04:43,800
badge you know maybe maybe an employee

00:04:41,880 --> 00:04:45,810
ID badge would say something like the

00:04:43,800 --> 00:04:49,620
person's name what department they work

00:04:45,810 --> 00:04:51,930
for maybe when it expires so the other

00:04:49,620 --> 00:04:53,310
thing that is important to mention here

00:04:51,930 --> 00:04:55,140
is that these various different

00:04:53,310 --> 00:04:57,420
protocols are not backward compatible

00:04:55,140 --> 00:04:58,650
with one another so this this is a

00:04:57,420 --> 00:05:00,300
really important thing to get across

00:04:58,650 --> 00:05:01,980
when I first started learning about this

00:05:00,300 --> 00:05:03,840
stuff I wasted a lot of time going down

00:05:01,980 --> 00:05:05,880
rabbit holes you know reading about the

00:05:03,840 --> 00:05:08,100
wrong thing because you think well you

00:05:05,880 --> 00:05:09,720
know I'm going to Google for OAuth and I

00:05:08,100 --> 00:05:12,360
get Olaf one results that aren't

00:05:09,720 --> 00:05:14,760
applicable to auth - or you know if

00:05:12,360 --> 00:05:16,290
you're reading about open ID - that

00:05:14,760 --> 00:05:19,080
document isn't necessarily going to help

00:05:16,290 --> 00:05:20,430
you implement open ID Connect so really

00:05:19,080 --> 00:05:22,320
it's important to know that other than

00:05:20,430 --> 00:05:24,300
the fact that the names are similar like

00:05:22,320 --> 00:05:26,630
these protocols have basically nothing

00:05:24,300 --> 00:05:29,790
to do with one another I mean they

00:05:26,630 --> 00:05:31,110
accomplish similar goals but they in

00:05:29,790 --> 00:05:33,630
terms of implementation they're

00:05:31,110 --> 00:05:36,120
completely different but there is one

00:05:33,630 --> 00:05:37,470
thing there is related open ID Connect

00:05:36,120 --> 00:05:39,810
and OAuth 2 the ones that we're talking

00:05:37,470 --> 00:05:43,440
about here so open ID Connect in fact is

00:05:39,810 --> 00:05:46,410
an extension of OAuth 2 so any open ID

00:05:43,440 --> 00:05:48,780
connect server is also an OAuth 2 server

00:05:46,410 --> 00:05:52,770
so an open ID Connect is a strict

00:05:48,780 --> 00:05:54,330
superset of oo-oo - so what does ought

00:05:52,770 --> 00:05:56,910
to do for us

00:05:54,330 --> 00:05:58,950
it basically answers the question of how

00:05:56,910 --> 00:06:01,350
do you let users log in without seeing

00:05:58,950 --> 00:06:04,860
their passwords there's a specification

00:06:01,350 --> 00:06:06,960
or a document for this RFC 67 49 so you

00:06:04,860 --> 00:06:10,440
can go look it up and read it it defines

00:06:06,960 --> 00:06:12,720
some concepts it defines an access token

00:06:10,440 --> 00:06:14,190
which is in this analogy as our plays

00:06:12,720 --> 00:06:16,740
the role of our key so it's just an

00:06:14,190 --> 00:06:19,230
opaque piece of text that lets you do

00:06:16,740 --> 00:06:21,180
things and then it also defines a

00:06:19,230 --> 00:06:23,100
concept of a scope so a scope you can

00:06:21,180 --> 00:06:24,780
think of as a unit of permission or what

00:06:23,100 --> 00:06:27,450
the key unlocks so there might be

00:06:24,780 --> 00:06:29,700
different authorization providers define

00:06:27,450 --> 00:06:31,770
their own scopes and your client that

00:06:29,700 --> 00:06:34,080
you write can request those scopes so

00:06:31,770 --> 00:06:36,840
you might request access to a user's

00:06:34,080 --> 00:06:38,880
contacts or their calendar or you know

00:06:36,840 --> 00:06:40,260
whatever else the authorization provider

00:06:38,880 --> 00:06:42,240
offers

00:06:40,260 --> 00:06:45,600
and that's that's the scope is what you

00:06:42,240 --> 00:06:48,330
can do with the access token the other

00:06:45,600 --> 00:06:50,790
thing to know is that the RFC is more of

00:06:48,330 --> 00:06:53,520
a framework than a specification so it

00:06:50,790 --> 00:06:55,740
lays out kind of in broad terms how to

00:06:53,520 --> 00:06:58,080
accomplish this goal but it leaves a lot

00:06:55,740 --> 00:06:59,850
of details up to individual implementers

00:06:58,080 --> 00:07:01,890
which is actually kind of frustrating

00:06:59,850 --> 00:07:03,510
because it means that no 202

00:07:01,890 --> 00:07:05,250
implementations are necessarily

00:07:03,510 --> 00:07:07,440
compatible with one another so if you

00:07:05,250 --> 00:07:09,990
have a client that works to log into

00:07:07,440 --> 00:07:12,600
Twitter you can't just use it unmodified

00:07:09,990 --> 00:07:14,520
to log in via Google or using Globus

00:07:12,600 --> 00:07:15,780
there's always going to be some

00:07:14,520 --> 00:07:16,680
configuration that you have to do

00:07:15,780 --> 00:07:18,450
there's always going to be little

00:07:16,680 --> 00:07:19,680
changes that you have to make and you're

00:07:18,450 --> 00:07:21,900
always going to wind up having to read

00:07:19,680 --> 00:07:23,930
the documentation from the authorization

00:07:21,900 --> 00:07:27,300
provider that you want to work with

00:07:23,930 --> 00:07:29,370
nevertheless despite that drawback to

00:07:27,300 --> 00:07:31,800
has had wide adoption it's kind of the

00:07:29,370 --> 00:07:34,560
de facto standard for web login these

00:07:31,800 --> 00:07:37,680
days almost all of the big web

00:07:34,560 --> 00:07:39,180
properties support it and the advantage

00:07:37,680 --> 00:07:41,040
of that is that there are nice Python

00:07:39,180 --> 00:07:43,230
libraries out there for it especially on

00:07:41,040 --> 00:07:44,640
the client side so a lot of these

00:07:43,230 --> 00:07:46,140
implementation details and kind of

00:07:44,640 --> 00:07:47,910
irritating things you don't have to

00:07:46,140 --> 00:07:51,420
worry about so much the library will

00:07:47,910 --> 00:07:53,460
take care of it for you so the main flow

00:07:51,420 --> 00:07:55,440
in oo-oo 2 is what's called the

00:07:53,460 --> 00:07:57,780
authorization code grant so this is how

00:07:55,440 --> 00:08:00,420
we log in a user without seeing their

00:07:57,780 --> 00:08:03,360
passwords so the user agent which is the

00:08:00,420 --> 00:08:05,220
user's browser is going to say I want to

00:08:03,360 --> 00:08:06,930
login so it makes a get request to the

00:08:05,220 --> 00:08:08,580
client so the client in this case is

00:08:06,930 --> 00:08:11,280
your application so you as developers

00:08:08,580 --> 00:08:13,740
will write a web application that's a

00:08:11,280 --> 00:08:16,440
client so this would be a server-side

00:08:13,740 --> 00:08:18,840
web application so you're going to say

00:08:16,440 --> 00:08:20,910
oh actually we don't do authentication

00:08:18,840 --> 00:08:22,800
or authorization ourselves here we're

00:08:20,910 --> 00:08:25,260
returning a redirect and we'd like you

00:08:22,800 --> 00:08:27,930
to follow that over to the authorization

00:08:25,260 --> 00:08:31,200
server and as part of that redirect URL

00:08:27,930 --> 00:08:33,150
you're going to include a scope that

00:08:31,200 --> 00:08:36,540
your client is requesting one or more

00:08:33,150 --> 00:08:38,610
scopes and then also a client ID so when

00:08:36,540 --> 00:08:40,169
you register your application with an

00:08:38,610 --> 00:08:42,180
authorization provider they'll give you

00:08:40,169 --> 00:08:44,310
a client ID and client secret and you'll

00:08:42,180 --> 00:08:46,470
pass that client ID along with your

00:08:44,310 --> 00:08:49,530
authorization request so the user is

00:08:46,470 --> 00:08:51,720
going to login how that happens is not

00:08:49,530 --> 00:08:53,940
your problem you don't care but assuming

00:08:51,720 --> 00:08:55,890
that they succeed in logging in

00:08:53,940 --> 00:08:57,600
the authorization server is going to

00:08:55,890 --> 00:08:59,580
return another redirect and that

00:08:57,600 --> 00:09:01,650
redirect in the query parameters is

00:08:59,580 --> 00:09:03,660
going to include a secret code and this

00:09:01,650 --> 00:09:05,190
is called the authorization code you can

00:09:03,660 --> 00:09:08,970
kind of think of this as like a one-time

00:09:05,190 --> 00:09:10,770
use password so the users browser the

00:09:08,970 --> 00:09:12,570
user agent is again going to follow that

00:09:10,770 --> 00:09:15,180
redirect and it's going to come back to

00:09:12,570 --> 00:09:18,210
your client application on the callback

00:09:15,180 --> 00:09:20,460
URL so this is a URL that lives on your

00:09:18,210 --> 00:09:23,190
application you define it but you'll

00:09:20,460 --> 00:09:25,710
give it to the authorization server when

00:09:23,190 --> 00:09:27,660
you register so that the authorization

00:09:25,710 --> 00:09:30,990
server knows that it's a legitimate URL

00:09:27,660 --> 00:09:33,330
to redirect the user back to so the user

00:09:30,990 --> 00:09:35,070
arrives back at your client at the

00:09:33,330 --> 00:09:38,010
callback URL with their authorization

00:09:35,070 --> 00:09:39,960
code in hand your client is going to

00:09:38,010 --> 00:09:41,430
grab that authorization code and then

00:09:39,960 --> 00:09:43,980
it's going to turn around and post that

00:09:41,430 --> 00:09:46,620
to the authorization server and this

00:09:43,980 --> 00:09:48,840
post is also authenticated with your

00:09:46,620 --> 00:09:50,340
client ID and client secret for your

00:09:48,840 --> 00:09:53,040
application so the authorization server

00:09:50,340 --> 00:09:56,220
can validate that this is a legitimate

00:09:53,040 --> 00:09:58,530
application using this code and then

00:09:56,220 --> 00:10:00,480
assuming that that is all good it

00:09:58,530 --> 00:10:02,760
returns a JSON document that includes

00:10:00,480 --> 00:10:04,710
among other things the access token so

00:10:02,760 --> 00:10:07,920
finally you have your key in hand and

00:10:04,710 --> 00:10:10,230
you can use that in an HTTP

00:10:07,920 --> 00:10:13,050
authorization header so you can return

00:10:10,230 --> 00:10:15,330
make other requests to protected

00:10:13,050 --> 00:10:16,980
resources and you can say here's here's

00:10:15,330 --> 00:10:18,780
my key let me let me in let me have

00:10:16,980 --> 00:10:21,090
access to that there's a bunch of other

00:10:18,780 --> 00:10:23,040
stuff in auth - beyond that if you need

00:10:21,090 --> 00:10:25,380
long-term access there's such a thing as

00:10:23,040 --> 00:10:28,110
a refresh token so access tokens expire

00:10:25,380 --> 00:10:30,780
but you can keep getting new access

00:10:28,110 --> 00:10:32,340
tokens by using a refresh token if you

00:10:30,780 --> 00:10:34,710
have a public client so like a

00:10:32,340 --> 00:10:36,120
JavaScript client or an installed maybe

00:10:34,710 --> 00:10:38,370
a mobile application or a desktop

00:10:36,120 --> 00:10:41,010
application they can't keep a secret

00:10:38,370 --> 00:10:42,960
there's another less secure flow that

00:10:41,010 --> 00:10:45,600
you can use for that there's a client

00:10:42,960 --> 00:10:47,250
credentials grant if your instead of

00:10:45,600 --> 00:10:48,750
getting a token for a user if you need

00:10:47,250 --> 00:10:50,910
an access token that belongs to your

00:10:48,750 --> 00:10:52,860
application itself you can do that the

00:10:50,910 --> 00:10:54,690
spec also defines a user name/password

00:10:52,860 --> 00:10:57,540
grant I guess just for legacy

00:10:54,690 --> 00:11:00,330
compatibility and it defines ways to

00:10:57,540 --> 00:11:02,310
build extensions on the oauth2 framework

00:11:00,330 --> 00:11:03,720
so if you work in academia you might be

00:11:02,310 --> 00:11:05,940
familiar with sam'l which i think is

00:11:03,720 --> 00:11:07,500
security assertion markup language it's

00:11:05,940 --> 00:11:09,660
an XML based

00:11:07,500 --> 00:11:11,490
an occasion protocol so there's an

00:11:09,660 --> 00:11:14,280
extension to oauth2 that kind of allows

00:11:11,490 --> 00:11:16,170
interoperability between sam'l universe

00:11:14,280 --> 00:11:19,380
and an oauth2 authentication universe

00:11:16,170 --> 00:11:24,030
and oopen ID connect itself is actually

00:11:19,380 --> 00:11:26,670
an extension 200 auth - so it's actually

00:11:24,030 --> 00:11:28,970
a series of extensions and the point of

00:11:26,670 --> 00:11:31,830
open ID Connect is to add the missing

00:11:28,970 --> 00:11:32,970
authentication layer on top of oauth2 so

00:11:31,830 --> 00:11:34,430
remember we talked about the distinction

00:11:32,970 --> 00:11:37,410
between authorization and authentication

00:11:34,430 --> 00:11:39,420
so open ID Connect will give you

00:11:37,410 --> 00:11:41,160
metadata about the user so instead of

00:11:39,420 --> 00:11:44,490
just having a key you'll know something

00:11:41,160 --> 00:11:47,760
about who this user is and the way that

00:11:44,490 --> 00:11:49,800
you enable that is if you are talking to

00:11:47,760 --> 00:11:51,390
an authorization server that you know is

00:11:49,800 --> 00:11:53,400
actually an authentication server it's

00:11:51,390 --> 00:11:56,280
an open ID connect server you pass a

00:11:53,400 --> 00:12:00,000
special scope which is open ID and that

00:11:56,280 --> 00:12:02,040
triggers the flow to say I want this to

00:12:00,000 --> 00:12:03,930
be an open ID connect flow and what that

00:12:02,040 --> 00:12:07,170
means is that in addition to the access

00:12:03,930 --> 00:12:09,300
token you also get back an ID token this

00:12:07,170 --> 00:12:10,890
is a JSON web token some people might be

00:12:09,300 --> 00:12:14,190
familiar with that it's basically just

00:12:10,890 --> 00:12:16,380
an encoded JSON document that is

00:12:14,190 --> 00:12:19,440
cryptographically signed and if you

00:12:16,380 --> 00:12:21,000
decode it it contains these claims which

00:12:19,440 --> 00:12:22,770
are metadata about the user might be

00:12:21,000 --> 00:12:24,810
like the user's name or their email

00:12:22,770 --> 00:12:26,490
address or perhaps their postal address

00:12:24,810 --> 00:12:27,600
or basically whatever the authentication

00:12:26,490 --> 00:12:29,460
server feels like so different

00:12:27,600 --> 00:12:30,600
authentication servers have different

00:12:29,460 --> 00:12:33,000
information about their users and

00:12:30,600 --> 00:12:35,190
different claims that they can return to

00:12:33,000 --> 00:12:37,470
you ok so that's kind of the basic

00:12:35,190 --> 00:12:40,260
layout so let's look at what this looks

00:12:37,470 --> 00:12:42,000
like in practice so this is our kind of

00:12:40,260 --> 00:12:43,500
toy application for this demo don't

00:12:42,000 --> 00:12:45,720
worry too much about the details of this

00:12:43,500 --> 00:12:47,640
we're using flask which is a Python

00:12:45,720 --> 00:12:50,160
micro frameworks some people here might

00:12:47,640 --> 00:12:52,070
be familiar with or if you've used Jango

00:12:50,160 --> 00:12:54,300
or pyramid it's basically a similar idea

00:12:52,070 --> 00:12:56,160
so that's going to handle routing and

00:12:54,300 --> 00:12:59,250
give us a request object and a session

00:12:56,160 --> 00:13:00,830
object that we can save things to but so

00:12:59,250 --> 00:13:04,380
this is this is kind of a standard

00:13:00,830 --> 00:13:06,600
database username password login we're

00:13:04,380 --> 00:13:08,580
going to look at this login post method

00:13:06,600 --> 00:13:10,140
here so some people here might have a

00:13:08,580 --> 00:13:12,330
method like this already in their

00:13:10,140 --> 00:13:15,480
application so the user submits a form

00:13:12,330 --> 00:13:17,430
as a HTTP POST you grab their user name

00:13:15,480 --> 00:13:19,709
from the form look up that user in the

00:13:17,430 --> 00:13:21,240
database you check their password we're

00:13:19,709 --> 00:13:22,980
using the bcrypt

00:13:21,240 --> 00:13:25,230
rhythm to verify that the users password

00:13:22,980 --> 00:13:27,240
matches the password hash that we have

00:13:25,230 --> 00:13:29,130
stored we've been careful and not saved

00:13:27,240 --> 00:13:31,589
any clear text passwords in our database

00:13:29,130 --> 00:13:34,200
because we treat users security

00:13:31,589 --> 00:13:37,980
seriously assuming that that validates

00:13:34,200 --> 00:13:39,450
we return we set the user has logged in

00:13:37,980 --> 00:13:41,250
in our session and return to the main

00:13:39,450 --> 00:13:43,740
page otherwise we return a login error

00:13:41,250 --> 00:13:46,680
so if we want to replace that kind of a

00:13:43,740 --> 00:13:49,110
login flow with an oauth2 based login

00:13:46,680 --> 00:13:50,970
system we're going to use this library

00:13:49,110 --> 00:13:53,430
request so off live this is a nice

00:13:50,970 --> 00:13:56,339
high-level client library uses another

00:13:53,430 --> 00:13:57,990
library OAuth Lib and requests under the

00:13:56,339 --> 00:13:59,850
hood and we need to get some

00:13:57,990 --> 00:14:01,709
configuration parameters so you need

00:13:59,850 --> 00:14:03,330
your client ID and your client secret

00:14:01,709 --> 00:14:04,560
that I mentioned when you register your

00:14:03,330 --> 00:14:07,380
application with your authorization

00:14:04,560 --> 00:14:10,260
provider they'll give you those you need

00:14:07,380 --> 00:14:11,760
an auth URL a token URL so the auth URL

00:14:10,260 --> 00:14:15,720
is the URL that we're going to send the

00:14:11,760 --> 00:14:17,970
user to to go login the token URL is the

00:14:15,720 --> 00:14:20,279
URL that we're going to be posting to to

00:14:17,970 --> 00:14:22,350
exchange when we do that swap of the

00:14:20,279 --> 00:14:24,510
authorization code for the access token

00:14:22,350 --> 00:14:26,670
the token URL is where we're making that

00:14:24,510 --> 00:14:29,100
post and then the scope is going to be

00:14:26,670 --> 00:14:31,860
whatever scope we want to request for

00:14:29,100 --> 00:14:35,070
our application and the redirect URL or

00:14:31,860 --> 00:14:37,410
URI this is the client applications URL

00:14:35,070 --> 00:14:38,790
that is going to handle those requests

00:14:37,410 --> 00:14:42,149
when they come back from the

00:14:38,790 --> 00:14:44,610
authorization provider so here's what

00:14:42,149 --> 00:14:47,070
the login method would look like we

00:14:44,610 --> 00:14:50,010
instantiate this oh up to session object

00:14:47,070 --> 00:14:52,320
so we make a provider we pass in our

00:14:50,010 --> 00:14:55,079
client ID we pass in our scope we pass

00:14:52,320 --> 00:14:57,000
in our redirect URI and it's going then

00:14:55,079 --> 00:14:59,100
we're going to call this authorization

00:14:57,000 --> 00:15:00,839
URL we pass the base URL and it will

00:14:59,100 --> 00:15:03,000
populate this with all the query

00:15:00,839 --> 00:15:05,010
parameters that we need and it's going

00:15:03,000 --> 00:15:07,350
to return us a URL and also a state

00:15:05,010 --> 00:15:09,690
parameter so this state parameter we

00:15:07,350 --> 00:15:11,370
just hang on to and that's going to be

00:15:09,690 --> 00:15:12,899
used to prevent cross-site scripting

00:15:11,370 --> 00:15:14,520
attacks so we want to be able to double

00:15:12,899 --> 00:15:16,620
check that when the user comes back to

00:15:14,520 --> 00:15:18,720
our callback URL that we actually sent

00:15:16,620 --> 00:15:20,490
them out it's not you know somebody else

00:15:18,720 --> 00:15:23,070
on a malicious attacker sending that

00:15:20,490 --> 00:15:25,290
request in so then we redirect the user

00:15:23,070 --> 00:15:26,670
we say okay goodbye go off to the

00:15:25,290 --> 00:15:29,339
authorization provider we'll see you

00:15:26,670 --> 00:15:31,650
later and then this is our callback

00:15:29,339 --> 00:15:33,570
method so after they've logged in and

00:15:31,650 --> 00:15:35,430
they this is the redirect coming

00:15:33,570 --> 00:15:36,600
back from the authorization provider so

00:15:35,430 --> 00:15:39,390
it looks kind of similar

00:15:36,600 --> 00:15:42,690
we again instantiate a provider object

00:15:39,390 --> 00:15:45,120
from this this OAuth 2 session and we

00:15:42,690 --> 00:15:47,070
pass in our state parameter that we had

00:15:45,120 --> 00:15:48,300
saved and it's going to validate that

00:15:47,070 --> 00:15:51,810
for us

00:15:48,300 --> 00:15:53,550
we call this fetch token method so in

00:15:51,810 --> 00:15:55,770
the background what this is doing is

00:15:53,550 --> 00:15:57,270
grabbing the authorization code out of

00:15:55,770 --> 00:15:59,730
the query parameters so you see we

00:15:57,270 --> 00:16:01,650
passed in request dot URL so it's

00:15:59,730 --> 00:16:03,900
grabbing the authorization code and it's

00:16:01,650 --> 00:16:06,300
making that authenticated post in the

00:16:03,900 --> 00:16:08,490
background and it's going to assuming

00:16:06,300 --> 00:16:10,200
that the code is valid and our client

00:16:08,490 --> 00:16:12,780
credentials are valid it's going to

00:16:10,200 --> 00:16:15,240
return a successful token response which

00:16:12,780 --> 00:16:17,280
contains our access token and it also

00:16:15,240 --> 00:16:19,530
contains some other nice things like the

00:16:17,280 --> 00:16:21,630
expiration time of our token which we

00:16:19,530 --> 00:16:23,880
might want to hold on to and then if we

00:16:21,630 --> 00:16:26,760
want to use that token to make other

00:16:23,880 --> 00:16:28,170
requests so this is just an API URL for

00:16:26,760 --> 00:16:30,870
a protected resource so this is our

00:16:28,170 --> 00:16:33,810
transfer API so you can use it directly

00:16:30,870 --> 00:16:36,360
the provider you can call just provider

00:16:33,810 --> 00:16:37,980
get and since we just got that token

00:16:36,360 --> 00:16:40,440
it'll just automatically use it for you

00:16:37,980 --> 00:16:42,060
so that's kind of convenient but if you

00:16:40,440 --> 00:16:44,040
don't have that provider handy let's say

00:16:42,060 --> 00:16:46,050
you redirect to another method now we

00:16:44,040 --> 00:16:48,540
have our access token so we're logged in

00:16:46,050 --> 00:16:50,340
it's not that hard to sort of manually

00:16:48,540 --> 00:16:51,840
use this tokens all you do is set an

00:16:50,340 --> 00:16:53,730
authorization header so you do

00:16:51,840 --> 00:16:56,100
authorization bearer and then your

00:16:53,730 --> 00:16:59,190
access token and then we're just using

00:16:56,100 --> 00:17:00,990
request get and passing the that as an

00:16:59,190 --> 00:17:03,810
authorization header and so that'll get

00:17:00,990 --> 00:17:05,850
us the same result and so that that's

00:17:03,810 --> 00:17:09,270
how you use the access token that you've

00:17:05,850 --> 00:17:10,980
gotten back so obviously we don't know

00:17:09,270 --> 00:17:13,589
anything about our user yet we just have

00:17:10,980 --> 00:17:15,900
this sort of anonymous token now so if

00:17:13,589 --> 00:17:17,130
we wanted to add open ID connect on top

00:17:15,900 --> 00:17:19,530
of that so that we actually learned

00:17:17,130 --> 00:17:21,060
something about who this user is we're

00:17:19,530 --> 00:17:23,490
just getting to import a few more

00:17:21,060 --> 00:17:25,140
libraries here we're using system random

00:17:23,490 --> 00:17:28,340
just to generate cryptographically

00:17:25,140 --> 00:17:31,770
random data and then we're using this

00:17:28,340 --> 00:17:34,680
Python jose JWT library so as I

00:17:31,770 --> 00:17:37,200
mentioned the ID token is a JWT so we

00:17:34,680 --> 00:17:40,560
want to use a JWT library to manipulate

00:17:37,200 --> 00:17:43,200
that the JWT is signed so we go ahead

00:17:40,560 --> 00:17:45,480
and grab the public keys from our

00:17:43,200 --> 00:17:47,640
authorization authentication provider

00:17:45,480 --> 00:17:50,910
and we just hang on

00:17:47,640 --> 00:17:52,230
those the scopes here we're requesting

00:17:50,910 --> 00:17:55,050
different scopes we're requesting the

00:17:52,230 --> 00:17:57,630
open ID scope to signal that yes we want

00:17:55,050 --> 00:18:00,030
this to be an open ID connect flow we're

00:17:57,630 --> 00:18:01,680
also requesting the email scope which is

00:18:00,030 --> 00:18:04,530
saying I'd like to have the email

00:18:01,680 --> 00:18:06,600
claimed in our ID token and then the

00:18:04,530 --> 00:18:08,520
profile scope just says yes I'd like

00:18:06,600 --> 00:18:10,560
some other metadata about this user

00:18:08,520 --> 00:18:12,540
different authentication providers have

00:18:10,560 --> 00:18:14,940
different ideas about what counts as

00:18:12,540 --> 00:18:17,730
profile information so you have to read

00:18:14,940 --> 00:18:19,770
the docs the issuer is who do we expect

00:18:17,730 --> 00:18:21,420
is going to be signing the ID token and

00:18:19,770 --> 00:18:22,770
then the algorithm is the algorithm that

00:18:21,420 --> 00:18:24,990
the token will be signed with so that

00:18:22,770 --> 00:18:28,020
will all be from available from the docs

00:18:24,990 --> 00:18:29,880
from your authentication provider so

00:18:28,020 --> 00:18:32,490
this is the login method you notice this

00:18:29,880 --> 00:18:34,080
looks very very similar the only real

00:18:32,490 --> 00:18:36,270
difference is that we're now generating

00:18:34,080 --> 00:18:37,530
this random nonce parameter and we're

00:18:36,270 --> 00:18:39,450
passing that along with our

00:18:37,530 --> 00:18:40,950
authorization URL we're holding on to

00:18:39,450 --> 00:18:43,230
that so it's kind of similar to the

00:18:40,950 --> 00:18:45,210
state parameter it's to prevent replay

00:18:43,230 --> 00:18:47,100
attacks or cross-site scripting attacks

00:18:45,210 --> 00:18:48,870
so it basically we're going to validate

00:18:47,100 --> 00:18:51,060
that and it's going to come back in the

00:18:48,870 --> 00:18:54,090
ID token you'll see on the callback URL

00:18:51,060 --> 00:18:55,860
so this is a callback method it looks a

00:18:54,090 --> 00:18:58,530
little longer than the one that we saw

00:18:55,860 --> 00:19:01,050
for OAuth 2 but actually the top half of

00:18:58,530 --> 00:19:02,640
this is all the same so we're only going

00:19:01,050 --> 00:19:05,070
to look at the bottom half of this that

00:19:02,640 --> 00:19:07,200
is the new stuff for Open ID Connect so

00:19:05,070 --> 00:19:09,990
everything above that was was the same

00:19:07,200 --> 00:19:13,940
as from oh up to so as I mentioned

00:19:09,990 --> 00:19:17,190
alongside our ID or our access token the

00:19:13,940 --> 00:19:19,200
response now contains an ID token we're

00:19:17,190 --> 00:19:22,170
going to decode that using this JWT

00:19:19,200 --> 00:19:23,910
decode method we pass in the ID token we

00:19:22,170 --> 00:19:27,450
pass in the public key we expect it to

00:19:23,910 --> 00:19:30,060
be signed with the issuer the audience

00:19:27,450 --> 00:19:32,460
here is ourselves so we pass our own

00:19:30,060 --> 00:19:35,610
client ID we expect this ID token will

00:19:32,460 --> 00:19:37,440
be issued with an audience for us we

00:19:35,610 --> 00:19:39,270
pass in the algorithm we pass in

00:19:37,440 --> 00:19:42,420
actually the access token that we got

00:19:39,270 --> 00:19:44,730
back as well so it validates that this

00:19:42,420 --> 00:19:46,560
access token and this ID token go

00:19:44,730 --> 00:19:49,200
together that they came back as part of

00:19:46,560 --> 00:19:50,850
the same authentication flow and then we

00:19:49,200 --> 00:19:52,740
also want to assert that the nonce

00:19:50,850 --> 00:19:54,390
parameter that we saved in our session

00:19:52,740 --> 00:19:56,700
is the same as the nonce that's in the

00:19:54,390 --> 00:19:59,490
claims that from our decoded token and

00:19:56,700 --> 00:20:00,980
assuming that that's all good then we

00:19:59,490 --> 00:20:03,840
now have

00:20:00,980 --> 00:20:06,509
the information that we wanted about the

00:20:03,840 --> 00:20:08,340
user so the the sub claim is for subject

00:20:06,509 --> 00:20:10,110
so that's basically just a user ID it's

00:20:08,340 --> 00:20:12,960
what the it's what the authentication

00:20:10,110 --> 00:20:14,370
provider identifies that user as we can

00:20:12,960 --> 00:20:16,529
get their email because we asked for the

00:20:14,370 --> 00:20:19,830
email provider and we get their name and

00:20:16,529 --> 00:20:20,940
we can redirect to the home page so

00:20:19,830 --> 00:20:22,649
that's pretty much what a client

00:20:20,940 --> 00:20:23,940
implementation looks like if you're

00:20:22,649 --> 00:20:25,769
doing a server implementation

00:20:23,940 --> 00:20:27,990
unfortunately there are fewer libraries

00:20:25,769 --> 00:20:29,490
out there there's AF Lib which is a

00:20:27,990 --> 00:20:31,259
little bit more mature

00:20:29,490 --> 00:20:33,960
there's pi OID C which looks very

00:20:31,259 --> 00:20:36,509
promising but is new and doesn't have as

00:20:33,960 --> 00:20:38,639
good of documentation some things you

00:20:36,509 --> 00:20:40,169
need to think about all of the

00:20:38,639 --> 00:20:42,119
authentication problems that you

00:20:40,169 --> 00:20:43,860
offloaded as a client you now need to

00:20:42,119 --> 00:20:46,289
consider if you're going to be a server

00:20:43,860 --> 00:20:48,210
so password resets two-factor

00:20:46,289 --> 00:20:50,519
authentication password hashing all that

00:20:48,210 --> 00:20:52,080
stuff how are you going to get consent

00:20:50,519 --> 00:20:53,820
from your users and how are you going to

00:20:52,080 --> 00:20:55,559
provide your users a way to revoke that

00:20:53,820 --> 00:20:58,230
consent if they don't want to share data

00:20:55,559 --> 00:20:59,909
with a third party anymore and then

00:20:58,230 --> 00:21:02,369
thinking about the token format so the

00:20:59,909 --> 00:21:04,320
ID token format is already specified for

00:21:02,369 --> 00:21:07,320
you by the Open ID Connect specification

00:21:04,320 --> 00:21:09,149
but for the OAuth 2 tokens the access

00:21:07,320 --> 00:21:10,679
tokens those are just opaque strings

00:21:09,149 --> 00:21:12,450
they can be whatever you want so you can

00:21:10,679 --> 00:21:14,100
think about do I want to have to look

00:21:12,450 --> 00:21:15,869
that up in my database every time do I

00:21:14,100 --> 00:21:17,249
want to include a signature in that so I

00:21:15,869 --> 00:21:19,799
can validate it cryptographically

00:21:17,249 --> 00:21:22,139
without talking to the database how do I

00:21:19,799 --> 00:21:24,809
want to handle revocation of tokens so

00:21:22,139 --> 00:21:26,429
things to think about if you want to

00:21:24,809 --> 00:21:29,249
come talk to me afterwards about server

00:21:26,429 --> 00:21:31,049
implementations I have thoughts so

00:21:29,249 --> 00:21:34,110
that's pretty much it if anyone has any

00:21:31,049 --> 00:21:36,899
questions please please come forward and

00:21:34,110 --> 00:21:39,330
the slides and there's all the code

00:21:36,899 --> 00:21:40,679
examples are up on my website Globus

00:21:39,330 --> 00:21:42,419
we're actually hiring if you want to

00:21:40,679 --> 00:21:45,179
work for a university and help

00:21:42,419 --> 00:21:47,369
contribute to science Globus org slash

00:21:45,179 --> 00:21:49,019
jobs and there's some links to useful

00:21:47,369 --> 00:21:52,110
libraries that we talked about or used

00:21:49,019 --> 00:21:53,669
today and also the Globus SDK which is

00:21:52,110 --> 00:21:55,619
kind of a higher level if you if you

00:21:53,669 --> 00:21:57,629
only want to interact with Globus api's

00:21:55,619 --> 00:21:59,309
you don't even have to really think

00:21:57,629 --> 00:22:01,080
about any of these details there we have

00:21:59,309 --> 00:22:03,559
a library that will handle that for you

00:22:01,080 --> 00:22:03,559
so

00:22:03,830 --> 00:22:08,570
[Applause]

00:22:09,290 --> 00:22:16,370
yeah it was a nice talk so I'm assuming

00:22:12,950 --> 00:22:19,370
like can we do open ID connected for KP

00:22:16,370 --> 00:22:21,710
ice I'm sorry I didn't quite catch that

00:22:19,370 --> 00:22:23,330
you're asking about active something

00:22:21,710 --> 00:22:26,600
about active directory is that right no

00:22:23,330 --> 00:22:29,390
how can we do open ad connector for ap

00:22:26,600 --> 00:22:32,630
ice rest ApS or something yeah yeah

00:22:29,390 --> 00:22:34,550
absolutely so so you're going to be the

00:22:32,630 --> 00:22:36,290
it works really well with REST API is

00:22:34,550 --> 00:22:39,710
because you're passing the access token

00:22:36,290 --> 00:22:41,780
in the authorization header so if you're

00:22:39,710 --> 00:22:43,550
making a get request or a post request

00:22:41,780 --> 00:22:45,740
so any kind of REST API you can

00:22:43,550 --> 00:22:48,650
authenticate that via OAuth 2 so you

00:22:45,740 --> 00:22:50,090
would just you you if you were setting

00:22:48,650 --> 00:22:53,480
up a server you'd need to have a way to

00:22:50,090 --> 00:22:55,280
validate those tokens so your your

00:22:53,480 --> 00:22:57,560
authorization provider will tell you

00:22:55,280 --> 00:22:58,880
either they'll say hey send a token to

00:22:57,560 --> 00:23:00,500
us and we'll tell you whether it's valid

00:22:58,880 --> 00:23:02,060
or not or they'll say you know our

00:23:00,500 --> 00:23:03,440
tokens are signed with this and you can

00:23:02,060 --> 00:23:05,480
you can check cryptographically that

00:23:03,440 --> 00:23:06,890
it's a valid token so so if you're you

00:23:05,480 --> 00:23:11,300
basically would just develop your REST

00:23:06,890 --> 00:23:12,830
API so that you expect the authorization

00:23:11,300 --> 00:23:14,750
headers look for the token and then

00:23:12,830 --> 00:23:17,900
validate that that token is legitimate

00:23:14,750 --> 00:23:19,960
before before granting access okay thank

00:23:17,900 --> 00:23:19,960
you

00:23:26,380 --> 00:23:32,410
okay right oh sorry yeah just a quick

00:23:31,280 --> 00:23:33,530
question

00:23:32,410 --> 00:23:37,340
[Music]

00:23:33,530 --> 00:23:39,020
provided you you can't use a like a big

00:23:37,340 --> 00:23:40,730
social network or something like that a

00:23:39,020 --> 00:23:42,170
provider you know you have a business

00:23:40,730 --> 00:23:44,750
clients or something like that yeah

00:23:42,170 --> 00:23:47,120
you're wanting to maybe brand it as your

00:23:44,750 --> 00:23:49,910
own is there any particular thing that

00:23:47,120 --> 00:23:51,050
you want to look for in a third-party

00:23:49,910 --> 00:23:53,900
provider if you don't want to do your

00:23:51,050 --> 00:23:55,940
own solution for the actual

00:23:53,900 --> 00:23:57,350
authorization and authentication that

00:23:55,940 --> 00:24:01,070
they've done in their implementation

00:23:57,350 --> 00:24:03,560
that'd be a better thing to evaluate

00:24:01,070 --> 00:24:08,660
them with that's an interesting question

00:24:03,560 --> 00:24:10,850
um I guess I would sort of ask them

00:24:08,660 --> 00:24:14,420
questions about kind of how how they

00:24:10,850 --> 00:24:16,250
handle user data how they handle uh user

00:24:14,420 --> 00:24:18,980
security so things like you know what's

00:24:16,250 --> 00:24:20,960
the lifetime of their tokens do they do

00:24:18,980 --> 00:24:22,340
they publish their public keys so it's

00:24:20,960 --> 00:24:24,890
one thing that I didn't really mention

00:24:22,340 --> 00:24:27,560
is all that stuff about signing and

00:24:24,890 --> 00:24:29,450
validating the ID token is kind of semi

00:24:27,560 --> 00:24:31,070
optional because you're going to be

00:24:29,450 --> 00:24:33,230
you're going to be receiving that

00:24:31,070 --> 00:24:34,970
information over an SSL connection so

00:24:33,230 --> 00:24:36,620
assuming that that connection is secure

00:24:34,970 --> 00:24:39,260
and that the server certificates are

00:24:36,620 --> 00:24:41,060
legitimate like it you can kind of get

00:24:39,260 --> 00:24:42,800
away without doing that but it's you

00:24:41,060 --> 00:24:44,660
know it's always best practice to you

00:24:42,800 --> 00:24:46,730
know kind of belt and braces solutions

00:24:44,660 --> 00:24:48,350
so you know I would I would maybe ask

00:24:46,730 --> 00:24:50,720
some questions about you know how

00:24:48,350 --> 00:24:53,030
seriously what do they provide for

00:24:50,720 --> 00:24:55,280
validating ID tokens you know do they

00:24:53,030 --> 00:24:56,330
rotate their keys so those are those are

00:24:55,280 --> 00:24:58,190
kind of questions that I think are

00:24:56,330 --> 00:25:00,590
general would be generally indicative of

00:24:58,190 --> 00:25:02,300
how they handle security and then like

00:25:00,590 --> 00:25:04,550
how good is their documentation you know

00:25:02,300 --> 00:25:05,720
how how what's their uptime like I mean

00:25:04,550 --> 00:25:07,970
if you're gonna if you're going to rely

00:25:05,720 --> 00:25:10,040
on them for your login solution and if

00:25:07,970 --> 00:25:12,530
they go down then none of your users can

00:25:10,040 --> 00:25:15,410
get into your system than like you know

00:25:12,530 --> 00:25:17,120
I think I think separate from how

00:25:15,410 --> 00:25:19,310
seriously is their security how serious

00:25:17,120 --> 00:25:20,600
is their ops you know what's what's are

00:25:19,310 --> 00:25:22,100
they going to be there when you need

00:25:20,600 --> 00:25:25,660
them so those are those are questions

00:25:22,100 --> 00:25:25,660
that I would I would ask thank you

00:25:25,900 --> 00:25:30,010
thanks for the great talk I was

00:25:28,520 --> 00:25:32,450
wondering if you had thoughts on

00:25:30,010 --> 00:25:35,750
requiring servers or authorization

00:25:32,450 --> 00:25:37,430
services to use secure Enclave when

00:25:35,750 --> 00:25:41,240
they're trying to

00:25:37,430 --> 00:25:43,910
authenticate your tokens of people login

00:25:41,240 --> 00:25:47,330
to so when you say secure you mean

00:25:43,910 --> 00:25:49,730
ssl/tls secured or like the enclave

00:25:47,330 --> 00:25:51,890
security and processors where you it has

00:25:49,730 --> 00:25:54,170
to have signed computations and can't be

00:25:51,890 --> 00:25:57,290
kind of hacked in case these services

00:25:54,170 --> 00:26:00,020
are running on themes or stuff like yeah

00:25:57,290 --> 00:26:03,590
I'm not really that familiar with that

00:26:00,020 --> 00:26:05,600
myself so so the so one of the

00:26:03,590 --> 00:26:07,670
advantages of Oh up to is kind of its

00:26:05,600 --> 00:26:10,220
basic simplicity that the tokens

00:26:07,670 --> 00:26:12,680
themselves are bearer tokens so anyone

00:26:10,220 --> 00:26:16,220
who has that token has that permission

00:26:12,680 --> 00:26:18,230
so there there have been in attempts to

00:26:16,220 --> 00:26:21,620
enhance the security of that so there's

00:26:18,230 --> 00:26:22,850
I think there's Mac signed tokens so

00:26:21,620 --> 00:26:25,280
maybe maybe that's what you're getting

00:26:22,850 --> 00:26:28,130
at there are there are attempts to kind

00:26:25,280 --> 00:26:30,110
of harden that more but I haven't I

00:26:28,130 --> 00:26:32,000
haven't used them myself and I don't

00:26:30,110 --> 00:26:35,150
think they have really wide adoption I

00:26:32,000 --> 00:26:36,890
think people one of it one of the

00:26:35,150 --> 00:26:38,810
reasons OAuth 2 is more popular than oo

00:26:36,890 --> 00:26:41,000
auth one is that oweth one had its own

00:26:38,810 --> 00:26:43,310
extra signing protocols and things and

00:26:41,000 --> 00:26:46,340
it proved difficult and complicated for

00:26:43,310 --> 00:26:48,470
people to implement and so I think in in

00:26:46,340 --> 00:26:50,180
kind of a narrow scenario where you knew

00:26:48,470 --> 00:26:52,220
all the parties involved and you were

00:26:50,180 --> 00:26:53,600
building both sides of the system then

00:26:52,220 --> 00:26:55,100
yeah I think you know some of those

00:26:53,600 --> 00:26:56,990
other things would add security but I

00:26:55,100 --> 00:26:58,670
don't think you'll don't think you'll

00:26:56,990 --> 00:27:02,900
see that many of them on the on the open

00:26:58,670 --> 00:27:05,120
Internet in the wild yet thank you maybe

00:27:02,900 --> 00:27:07,310
go ahead and call it get there and have

00:27:05,120 --> 00:27:07,970
any more questions feel free to talk to

00:27:07,310 --> 00:27:09,650
them afterwards

00:27:07,970 --> 00:27:13,030
so now we'll break for lunch thanks

00:27:09,650 --> 00:27:13,030

YouTube URL: https://www.youtube.com/watch?v=xHFzhBjnMPI


