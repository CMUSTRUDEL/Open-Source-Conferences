Title: Cory Benfield   Requests Under The Hood   PyCon 2017
Publication date: 2017-05-20
Playlist: PyCon 2017
Description: 
	"Speaker: Cory Benfield

Requests is widely acknowledged as a library that saves users an enormous amount of time, effort, and pain through its intuitive and clear API. For this reason, most people who have never looked at the code assume that its code is as intuitive, well-structured, and clear as the API.

Of course, the truth is more complex than that. Real software that deals with real problems is rarely ideal: there are edge cases, terrible hacks, and awkward workarounds for problems.

Often in the software industry we pretend that these imperfections in our software don’t exist, or we try to hide them. These imperfections frequently cause people to reinvent wheels in order to simplify the code, which has benefits for understandability but frequently has downsides for resilience. When people talk about “battle-tested” code, they mean code that has been dirtied up over time from its original Platonic ideal implementation to something that is just as complex and warty as real life.

In this talk, one of the Requests and urllib3 core maintainers lays bare all of the worst and hackiest corners of the codebases of these two libraries. The goal is to help expose all of the invisible work done in mature codebases to tolerate edge cases and misbehaviour, as well as to try to remind us all that the perfect is the enemy of the good.


Slides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides"
Captions: 
	00:00:00,290 --> 00:00:04,500
all right everyone we're going to get

00:00:02,429 --> 00:00:07,109
started now so I'm going to introduce

00:00:04,500 --> 00:00:17,699
Cory Ben field here with requests under

00:00:07,109 --> 00:00:20,699
the hood all right hello unexpectedly

00:00:17,699 --> 00:00:23,010
full room it was quite an opening slot

00:00:20,699 --> 00:00:24,420
we've got a whole bunch of heavier

00:00:23,010 --> 00:00:26,340
hitters than me that you've decided not

00:00:24,420 --> 00:00:28,199
to go so you speak which is an extremely

00:00:26,340 --> 00:00:31,470
questionable decision we're going to

00:00:28,199 --> 00:00:33,210
have words afterwards all right hello

00:00:31,470 --> 00:00:36,450
welcome to the first of the regularly

00:00:33,210 --> 00:00:38,850
scheduled talks lots at PyCon you us not

00:00:36,450 --> 00:00:40,350
UK I hope you very excited I am this is

00:00:38,850 --> 00:00:42,239
my favorite conference of the year

00:00:40,350 --> 00:00:44,700
I'm always particularly thrilled to get

00:00:42,239 --> 00:00:46,739
a chance to speak for those of you who

00:00:44,700 --> 00:00:48,860
don't know me my name is Cory Benfield

00:00:46,739 --> 00:00:51,210
I'm an open-source software developer in

00:00:48,860 --> 00:00:53,460
my day job I work at Hewlett Packard

00:00:51,210 --> 00:00:55,949
enterprise and my role there is an

00:00:53,460 --> 00:00:59,129
interesting one it's basically to help

00:00:55,949 --> 00:01:03,059
be a bit of the bridge between the

00:00:59,129 --> 00:01:05,970
Python open source community and HPE HPE

00:01:03,059 --> 00:01:07,770
is pretty invested in Python it's

00:01:05,970 --> 00:01:09,180
enormously important to us and it's an

00:01:07,770 --> 00:01:10,590
obviously important to our customers we

00:01:09,180 --> 00:01:13,110
sell to enterprises and software

00:01:10,590 --> 00:01:15,150
companies and they use Python just as

00:01:13,110 --> 00:01:16,799
much as we do if not more so we're

00:01:15,150 --> 00:01:19,170
extremely invested in having the Python

00:01:16,799 --> 00:01:21,509
community be healthy and vibrant part of

00:01:19,170 --> 00:01:24,479
the way we do that is by paying people

00:01:21,509 --> 00:01:28,290
like me to work on open-source Python

00:01:24,479 --> 00:01:31,710
projects of various kinds now I've got a

00:01:28,290 --> 00:01:33,689
lot of responsibilities but the ones

00:01:31,710 --> 00:01:35,579
that are relevant for this talk are that

00:01:33,689 --> 00:01:37,890
I am one of four Co maintained errs on

00:01:35,579 --> 00:01:40,079
the Python requests project which I

00:01:37,890 --> 00:01:42,240
suspect many of you have heard of if not

00:01:40,079 --> 00:01:46,110
you've definitely come to an interesting

00:01:42,240 --> 00:01:48,000
talk and I'm also the current acting

00:01:46,110 --> 00:01:49,860
maintainer of the Python URL Lib 3

00:01:48,000 --> 00:01:52,170
project which I suspect substantially

00:01:49,860 --> 00:01:54,270
fewer of you have heard of it is the

00:01:52,170 --> 00:01:56,820
project that does most of the heavy

00:01:54,270 --> 00:01:58,290
protocol listing for requests and those

00:01:56,820 --> 00:02:02,640
two projects of what we're going to talk

00:01:58,290 --> 00:02:03,659
about a bit today so with that set what

00:02:02,640 --> 00:02:08,280
are we talking about today

00:02:03,659 --> 00:02:09,239
exactly well I wanted to kind of put

00:02:08,280 --> 00:02:11,670
forward a little bit of an interesting

00:02:09,239 --> 00:02:13,840
talk idea I think it's fair to say that

00:02:11,670 --> 00:02:16,390
requests is one of the most

00:02:13,840 --> 00:02:18,580
Villa and most famous both Python

00:02:16,390 --> 00:02:21,849
projects in the world and arguably

00:02:18,580 --> 00:02:23,860
software projects in the world and it

00:02:21,849 --> 00:02:25,180
justifiably in my opinion appears on

00:02:23,860 --> 00:02:28,330
lots of lists of people's favorite

00:02:25,180 --> 00:02:30,640
Python projects projects that people you

00:02:28,330 --> 00:02:32,620
know think help them most change their

00:02:30,640 --> 00:02:36,010
lives and use most often and that's good

00:02:32,620 --> 00:02:37,569
I think it deserves to be there all of

00:02:36,010 --> 00:02:38,940
the requests maintainer czar extremely

00:02:37,569 --> 00:02:43,720
proud of the project and we think it's

00:02:38,940 --> 00:02:46,360
pretty good but there are certain kinds

00:02:43,720 --> 00:02:48,040
of other lists of software projects that

00:02:46,360 --> 00:02:49,569
people like to write people have to put

00:02:48,040 --> 00:02:51,970
something on their blogs and writing

00:02:49,569 --> 00:02:54,370
lists is a good thing to do and often

00:02:51,970 --> 00:02:56,230
one kind of list you see is a list of

00:02:54,370 --> 00:02:58,540
projects that beginners or newcomers to

00:02:56,230 --> 00:03:00,370
a language should go to look at to see

00:02:58,540 --> 00:03:02,260
what idiomatic Python code looks like

00:03:00,370 --> 00:03:05,379
you know what does it look like to write

00:03:02,260 --> 00:03:07,030
good beautiful Python code now this is a

00:03:05,379 --> 00:03:08,440
really good idea for a list right if

00:03:07,030 --> 00:03:10,180
you're coming to learn new language you

00:03:08,440 --> 00:03:13,090
want to learn what it is to write that

00:03:10,180 --> 00:03:15,579
language well so I have no problem with

00:03:13,090 --> 00:03:17,829
the list in general but those projects

00:03:15,579 --> 00:03:21,370
those lists also often have requests on

00:03:17,829 --> 00:03:23,560
them now I've worked on the request code

00:03:21,370 --> 00:03:26,290
base for six years so I would say I know

00:03:23,560 --> 00:03:27,639
it pretty well and I think it's fair to

00:03:26,290 --> 00:03:30,880
say that I find its inclusion on those

00:03:27,639 --> 00:03:32,980
lists confusing the request code bases

00:03:30,880 --> 00:03:35,650
many things but I don't think that

00:03:32,980 --> 00:03:39,310
beautiful or idiomatic are words I would

00:03:35,650 --> 00:03:42,010
use to describe it the reason this is

00:03:39,310 --> 00:03:44,200
the case is because generally speaking

00:03:42,010 --> 00:03:47,169
beautiful and idiomatic software

00:03:44,200 --> 00:03:48,940
projects are designed someone sits down

00:03:47,169 --> 00:03:51,280
things very hard about the problem they

00:03:48,940 --> 00:03:52,660
want to solve works out what a generally

00:03:51,280 --> 00:03:55,299
good solution to that problem would be

00:03:52,660 --> 00:03:58,150
and codes it out and this is great and

00:03:55,299 --> 00:03:59,919
important I'm not trying to say you know

00:03:58,150 --> 00:04:01,239
anything particularly exciting here like

00:03:59,919 --> 00:04:03,310
let's all change the way we write

00:04:01,239 --> 00:04:07,660
software I think this is a good thing to

00:04:03,310 --> 00:04:09,130
do but generally speaking what this

00:04:07,660 --> 00:04:11,859
means is that your beautiful idiomatic

00:04:09,130 --> 00:04:13,840
software project works perfectly to

00:04:11,859 --> 00:04:16,180
solve the idealized version of a problem

00:04:13,840 --> 00:04:17,650
you know you want to write an HTTP

00:04:16,180 --> 00:04:20,109
library so you sit down and you read the

00:04:17,650 --> 00:04:21,639
specs and you design the perfect way you

00:04:20,109 --> 00:04:23,140
would implement those specs and you

00:04:21,639 --> 00:04:24,940
write all that code and it's beautiful

00:04:23,140 --> 00:04:26,770
and magnificent and then you deploy it

00:04:24,940 --> 00:04:29,110
on an actual computer in

00:04:26,770 --> 00:04:31,840
to all world talking actual HTTP and

00:04:29,110 --> 00:04:34,120
nothing works and this is because as

00:04:31,840 --> 00:04:35,949
most professional programmers know the

00:04:34,120 --> 00:04:38,830
actual world of computers is horrifying

00:04:35,949 --> 00:04:41,020
with tentacles everywhere it is just the

00:04:38,830 --> 00:04:42,669
worst because every yard who in the

00:04:41,020 --> 00:04:45,400
world implements random code just

00:04:42,669 --> 00:04:46,840
willy-nilly and so your beautiful

00:04:45,400 --> 00:04:48,879
perfectly designed software project

00:04:46,840 --> 00:04:51,400
starts growing because you need to

00:04:48,879 --> 00:04:53,949
handle the wacky edge cases and quickly

00:04:51,400 --> 00:04:56,620
the wacky edge cases turn into grime and

00:04:53,949 --> 00:05:00,370
warts in your codebase all kinds of

00:04:56,620 --> 00:05:02,590
whacking answers generally speaking it

00:05:00,370 --> 00:05:04,330
is my belief that most projects that

00:05:02,590 --> 00:05:08,139
have been widely deployed for a long

00:05:04,330 --> 00:05:10,300
time solving the same problem do not

00:05:08,139 --> 00:05:12,069
have beautiful code bases they have

00:05:10,300 --> 00:05:13,599
beautiful portions of their code bases

00:05:12,069 --> 00:05:16,449
but they in general do not have

00:05:13,599 --> 00:05:19,960
beautiful code bases and the purpose of

00:05:16,449 --> 00:05:22,360
this talk is to illuminate that part of

00:05:19,960 --> 00:05:23,860
requests and to hopefully use it to help

00:05:22,360 --> 00:05:26,349
teach you some things about the way

00:05:23,860 --> 00:05:27,669
long-running old code bases work because

00:05:26,349 --> 00:05:29,949
many of us haven't had the opportunity

00:05:27,669 --> 00:05:32,710
to work on code bases like that it is

00:05:29,949 --> 00:05:34,210
generally speaking more fun to work on

00:05:32,710 --> 00:05:35,740
brand-new code bases that are

00:05:34,210 --> 00:05:38,590
self-contained and beautiful and

00:05:35,740 --> 00:05:41,020
designed it is a bit less fun to work on

00:05:38,590 --> 00:05:43,300
code bases that are old and a little bit

00:05:41,020 --> 00:05:45,580
boring and then have to handle all the

00:05:43,300 --> 00:05:48,550
kinds of horrifying real truths of

00:05:45,580 --> 00:05:50,229
computing so the purpose of this talk is

00:05:48,550 --> 00:05:52,750
a little bit different I want to shine a

00:05:50,229 --> 00:05:54,550
light on the waters parts of one of the

00:05:52,750 --> 00:05:58,419
most popular Python software projects

00:05:54,550 --> 00:06:00,610
around the goal will hopefully be to

00:05:58,419 --> 00:06:01,930
provide teachable moments so that you

00:06:00,610 --> 00:06:04,180
can learn from the successes and

00:06:01,930 --> 00:06:07,120
failures of a library that you use

00:06:04,180 --> 00:06:09,969
extremely extensively generally speaking

00:06:07,120 --> 00:06:12,250
as a community we don't tend to look

00:06:09,969 --> 00:06:15,099
under the covers of the libraries we use

00:06:12,250 --> 00:06:17,349
we just import them in go and that's

00:06:15,099 --> 00:06:19,690
fine but I think it would be nice to

00:06:17,349 --> 00:06:22,000
take 20 minutes sit down look under the

00:06:19,690 --> 00:06:24,750
covers a little bit and go oh that's

00:06:22,000 --> 00:06:27,039
weird why do we do that

00:06:24,750 --> 00:06:29,560
now I want to stress something here I

00:06:27,039 --> 00:06:31,930
want this talk to be positive fun

00:06:29,560 --> 00:06:34,569
light-hearted right I want you to feel

00:06:31,930 --> 00:06:36,789
free to chuckle laughs maybe giggle

00:06:34,569 --> 00:06:39,250
whatever kind of laughter works for you

00:06:36,789 --> 00:06:40,340
but it is worth remembering that I'm

00:06:39,250 --> 00:06:42,770
going to be putting code up

00:06:40,340 --> 00:06:44,690
the slides and this code represents the

00:06:42,770 --> 00:06:46,550
hard work of literally hundreds of

00:06:44,690 --> 00:06:48,860
contributors over a number of years

00:06:46,550 --> 00:06:50,150
these contributors are rightfully

00:06:48,860 --> 00:06:51,860
extremely proud of their contributions

00:06:50,150 --> 00:06:53,990
for many of them it will have been their

00:06:51,860 --> 00:06:56,360
first open source contribution and I

00:06:53,990 --> 00:06:59,389
want to stress that we mustn't denigrate

00:06:56,360 --> 00:07:00,889
their work it is important to be able to

00:06:59,389 --> 00:07:02,720
look at code objectively separate from

00:07:00,889 --> 00:07:05,449
its author and we need to remember to do

00:07:02,720 --> 00:07:07,460
this here but in general also let's all

00:07:05,449 --> 00:07:10,130
try not to be mean we are not a

00:07:07,460 --> 00:07:12,290
community that is generally mean so

00:07:10,130 --> 00:07:13,820
positivity is good let's be nice to each

00:07:12,290 --> 00:07:16,310
other kind to each other

00:07:13,820 --> 00:07:19,820
laughing at other people it's just not

00:07:16,310 --> 00:07:22,310
not cool alright so here's what I'm

00:07:19,820 --> 00:07:24,200
going to do I'm going to put forward a

00:07:22,310 --> 00:07:26,450
problem that requests has had to solve

00:07:24,200 --> 00:07:27,800
at one point in the past I'm going to

00:07:26,450 --> 00:07:29,360
talk it through so that you have some

00:07:27,800 --> 00:07:31,400
kind of understanding of what the

00:07:29,360 --> 00:07:32,990
problem is where it comes from and then

00:07:31,400 --> 00:07:36,080
I want to show the code in request that

00:07:32,990 --> 00:07:39,169
handled it that code is going to be for

00:07:36,080 --> 00:07:40,610
lack of a better word imperfect and I'm

00:07:39,169 --> 00:07:41,990
going to talk briefly about how we got

00:07:40,610 --> 00:07:44,030
to this imperfect code and why it's

00:07:41,990 --> 00:07:45,500
still there all the code I'm showing you

00:07:44,030 --> 00:07:46,970
today is still in the codebase if

00:07:45,500 --> 00:07:49,130
anything you see here particularly

00:07:46,970 --> 00:07:50,720
bothers you feel free to submit a pull

00:07:49,130 --> 00:07:52,250
request and we can talk about whether or

00:07:50,720 --> 00:07:54,740
not actually doing anything about that's

00:07:52,250 --> 00:07:57,320
a good idea but the purpose here will be

00:07:54,740 --> 00:07:59,510
hopefully not just to see that the code

00:07:57,320 --> 00:08:02,139
is silly but to understand why silly

00:07:59,510 --> 00:08:06,470
code comes up and why it's persistent

00:08:02,139 --> 00:08:08,780
all right cool let's go question number

00:08:06,470 --> 00:08:13,010
one you're about to make an HTTP request

00:08:08,780 --> 00:08:15,410
should it go via a proxy yes or no this

00:08:13,010 --> 00:08:17,780
is on the surface a fairly simple

00:08:15,410 --> 00:08:19,160
question but in practice it gets a

00:08:17,780 --> 00:08:20,840
little bit more complicated when you

00:08:19,160 --> 00:08:23,660
begin to think of unusual Network

00:08:20,840 --> 00:08:25,010
topologies how many of you work for what

00:08:23,660 --> 00:08:27,700
I'm going to call an enterprise

00:08:25,010 --> 00:08:30,380
something that has a big IT department

00:08:27,700 --> 00:08:32,630
yeah like plenty of you cool that's good

00:08:30,380 --> 00:08:34,849
so generally speaking on networks like

00:08:32,630 --> 00:08:36,979
that there will be some kind of edge

00:08:34,849 --> 00:08:39,050
proxy that the IT department wants all

00:08:36,979 --> 00:08:42,159
the requests to go through for perfectly

00:08:39,050 --> 00:08:45,380
legitimate surveillance reasons and

00:08:42,159 --> 00:08:46,940
as a result you want to root most

00:08:45,380 --> 00:08:49,339
requests that leave a network through

00:08:46,940 --> 00:08:51,560
that edge proxy but probably it's a

00:08:49,339 --> 00:08:53,540
pretty old server probably bought from a

00:08:51,560 --> 00:08:55,160
previous incarnation of my employer it's

00:08:53,540 --> 00:08:58,040
maybe not capable of taking enormous

00:08:55,160 --> 00:08:59,269
load and so not every request should go

00:08:58,040 --> 00:09:01,310
through it so requests that are staying

00:08:59,269 --> 00:09:03,200
in the corporate network should not go

00:09:01,310 --> 00:09:06,410
via the proxy this is fine and

00:09:03,200 --> 00:09:08,120
reasonable cool so there are lots of

00:09:06,410 --> 00:09:09,980
ways you can configure this on a modern

00:09:08,120 --> 00:09:12,940
computer but I'm going to focus for a

00:09:09,980 --> 00:09:19,100
moment on Linux and the other kind of

00:09:12,940 --> 00:09:20,959
non Mac unix's on this kind of system

00:09:19,100 --> 00:09:23,269
this is usually configured using an

00:09:20,959 --> 00:09:25,010
environment variable because as we all

00:09:23,269 --> 00:09:26,740
know the core principle of Unix is

00:09:25,010 --> 00:09:29,930
everything is an environment variable

00:09:26,740 --> 00:09:32,149
right so the environment area bill is no

00:09:29,930 --> 00:09:34,010
proxy it's very straightforward the

00:09:32,149 --> 00:09:36,140
standard is no proxy is a comma

00:09:34,010 --> 00:09:40,760
separated list of hosts that should not

00:09:36,140 --> 00:09:44,089
be routed by the proxy cool simple set

00:09:40,760 --> 00:09:46,519
as it turns out host is a pretty

00:09:44,089 --> 00:09:49,550
undefined term right comma separated

00:09:46,519 --> 00:09:52,370
list of posts host names sure yeah why

00:09:49,550 --> 00:09:55,010
not host names with specific ports as it

00:09:52,370 --> 00:09:57,560
turns out yes individual IP addresses IP

00:09:55,010 --> 00:09:59,329
networks all kinds of things this is a

00:09:57,560 --> 00:10:00,800
totally legitimate no proxy string and

00:09:59,329 --> 00:10:05,690
it's not even one of the stupider ones

00:10:00,800 --> 00:10:07,279
I've seen so by itself this just looks

00:10:05,690 --> 00:10:08,839
like an interesting pausing problem

00:10:07,279 --> 00:10:10,190
right like you could sit down and give

00:10:08,839 --> 00:10:11,690
it to a junior developer and say look

00:10:10,190 --> 00:10:14,089
come up with a way you would parse this

00:10:11,690 --> 00:10:16,670
to get unambiguous data out and you know

00:10:14,089 --> 00:10:18,050
they take a couple of hours probably to

00:10:16,670 --> 00:10:22,910
come up with a solution and they go and

00:10:18,050 --> 00:10:24,260
code it this is not what happens in a

00:10:22,910 --> 00:10:25,519
codebase like request because what

00:10:24,260 --> 00:10:27,019
happens in a code base like request is

00:10:25,519 --> 00:10:28,880
you start out not knowing that this is a

00:10:27,019 --> 00:10:30,620
problem at all so if someone eventually

00:10:28,880 --> 00:10:32,360
comes along and says I've got this no

00:10:30,620 --> 00:10:34,339
proxy string and you're not paying any

00:10:32,360 --> 00:10:36,589
attention to it and you think cool all

00:10:34,339 --> 00:10:38,959
right I'll go look at the spec for the

00:10:36,589 --> 00:10:40,399
no proxy string is Unix

00:10:38,959 --> 00:10:42,740
so there is no spec for the no proxy

00:10:40,399 --> 00:10:44,300
string what there is is curl the

00:10:42,740 --> 00:10:47,440
effective specification for something

00:10:44,300 --> 00:10:49,389
like this is do what curl does

00:10:47,440 --> 00:10:50,740
and that's fine but I don't know about

00:10:49,389 --> 00:10:53,050
you I'm not going to sit down and pull

00:10:50,740 --> 00:10:54,819
apart the seed code for curls or pausing

00:10:53,050 --> 00:10:56,589
this and work out exactly what it does

00:10:54,819 --> 00:10:58,660
and more importantly whether it's sure

00:10:56,589 --> 00:11:00,639
to do that or whether that's a bug so

00:10:58,660 --> 00:11:02,620
I'm going to actually do is write code

00:11:00,639 --> 00:11:04,180
to solve the version of the problem that

00:11:02,620 --> 00:11:06,430
has been put in front of me by the user

00:11:04,180 --> 00:11:08,019
who has the problem so they put forward

00:11:06,430 --> 00:11:09,610
their no proxy string and you sit down

00:11:08,019 --> 00:11:11,759
you write some code and it fixes that

00:11:09,610 --> 00:11:15,509
maybe you write a test maybe you don't

00:11:11,759 --> 00:11:18,910
put the code in fab cool that's fixed

00:11:15,509 --> 00:11:20,410
and then everything goes quiet then a

00:11:18,910 --> 00:11:23,199
year later another user pops up and goes

00:11:20,410 --> 00:11:24,670
I've got this no proxy string and curl

00:11:23,199 --> 00:11:27,129
does the right thing with it but you

00:11:24,670 --> 00:11:28,540
don't and you say oh that's that's no

00:11:27,129 --> 00:11:30,220
good what's your no proxy string look

00:11:28,540 --> 00:11:31,779
like and then you see it's got a port in

00:11:30,220 --> 00:11:34,660
it and you go well that's stupid but

00:11:31,779 --> 00:11:35,709
okay fine you write some more code and

00:11:34,660 --> 00:11:37,839
then you sit down

00:11:35,709 --> 00:11:40,149
it's quiet for a year and then a user

00:11:37,839 --> 00:11:42,490
comes forward and so on and so on so

00:11:40,149 --> 00:11:44,949
what this means is that no one designed

00:11:42,490 --> 00:11:47,139
this code and because no one designed

00:11:44,949 --> 00:11:51,160
this code the code starts to look

00:11:47,139 --> 00:11:53,019
something like this now this code is not

00:11:51,160 --> 00:11:55,240
on the face of it enormously horrifying

00:11:53,019 --> 00:11:57,220
it's not particularly long but this code

00:11:55,240 --> 00:11:59,259
is an excellent example of how just

00:11:57,220 --> 00:12:04,209
because Python code is short doesn't

00:11:59,259 --> 00:12:07,000
mean it's not horrifying this code has a

00:12:04,209 --> 00:12:09,250
particular interesting property which is

00:12:07,000 --> 00:12:11,920
that it has an enormous cyclomatic

00:12:09,250 --> 00:12:13,870
complexity which is to say there are a

00:12:11,920 --> 00:12:15,880
number of ways to get through this

00:12:13,870 --> 00:12:16,769
function and that number is very very

00:12:15,880 --> 00:12:18,939
large

00:12:16,769 --> 00:12:21,009
put another way there are a lot of if

00:12:18,939 --> 00:12:23,290
statements in this function those of you

00:12:21,009 --> 00:12:24,759
who know Python will also hopefully know

00:12:23,290 --> 00:12:26,470
that there are a whole bunch of places

00:12:24,759 --> 00:12:29,350
where you can think of implicit if

00:12:26,470 --> 00:12:30,550
statements so for implicitly contains an

00:12:29,350 --> 00:12:33,130
if statement to work out

00:12:30,550 --> 00:12:34,569
termination conditions the or statement

00:12:33,130 --> 00:12:36,250
at the bottom also implicitly contains

00:12:34,569 --> 00:12:37,990
an if statement so there are really an

00:12:36,250 --> 00:12:41,319
enormous number of if statements in this

00:12:37,990 --> 00:12:43,930
function also is ipv4 address is valid

00:12:41,319 --> 00:12:45,699
Sider and E's addressing network also

00:12:43,930 --> 00:12:47,259
are all quite complicated handwritten

00:12:45,699 --> 00:12:50,410
functions that have different execution

00:12:47,259 --> 00:12:53,259
paths so there are an enormous number of

00:12:50,410 --> 00:12:54,639
ways through this function now that's

00:12:53,259 --> 00:12:56,350
not in and of itself inherently a

00:12:54,639 --> 00:12:58,149
problem it's bad for understanding the

00:12:56,350 --> 00:12:59,769
code but that's okay you can refactor

00:12:58,149 --> 00:13:00,970
this away a whole bunch of senior devs

00:12:59,769 --> 00:13:02,800
in the audience are sitting there going

00:13:00,970 --> 00:13:06,009
this is just one good refactoring away

00:13:02,800 --> 00:13:07,509
from being clean and that's true but now

00:13:06,009 --> 00:13:09,519
I tell you that there are no tests for

00:13:07,509 --> 00:13:10,899
this function and the reason there are

00:13:09,519 --> 00:13:13,389
no tests for this function is because

00:13:10,899 --> 00:13:14,500
when it started it solved a very simple

00:13:13,389 --> 00:13:16,149
straightforward problem that was

00:13:14,500 --> 00:13:18,250
self-evident to the developer who wrote

00:13:16,149 --> 00:13:20,589
it and the people who code reviewed it

00:13:18,250 --> 00:13:22,209
like myself couldn't be bothered to

00:13:20,589 --> 00:13:25,300
fight about the lack of tests so it got

00:13:22,209 --> 00:13:27,879
merged and then each one it got extended

00:13:25,300 --> 00:13:29,350
the absence of tests meant that there

00:13:27,879 --> 00:13:31,990
was no clear way to work out what the

00:13:29,350 --> 00:13:34,060
code currently should do and without

00:13:31,990 --> 00:13:36,639
that refactoring is dangerous you don't

00:13:34,060 --> 00:13:38,589
want to break anything so all you do is

00:13:36,639 --> 00:13:40,360
you glom on the little extra bit you

00:13:38,589 --> 00:13:43,379
need that doesn't affect anything else

00:13:40,360 --> 00:13:46,300
and you don't write a test for it and

00:13:43,379 --> 00:13:48,310
you end up with function whose only

00:13:46,300 --> 00:13:49,810
defined behavior is well probably it

00:13:48,310 --> 00:13:53,259
does whatever it does now let's not

00:13:49,810 --> 00:13:56,199
change it this is an enormous problem

00:13:53,259 --> 00:14:00,189
right extremely complex code like this

00:13:56,199 --> 00:14:01,660
ends up not just in libraries like

00:14:00,189 --> 00:14:04,509
requests but specifically in these

00:14:01,660 --> 00:14:07,240
places features that most people have

00:14:04,509 --> 00:14:08,500
never heard of honest question who here

00:14:07,240 --> 00:14:11,769
has ever heard of the no proxy

00:14:08,500 --> 00:14:14,529
environment variable all right this is a

00:14:11,769 --> 00:14:15,759
tech conference and we got you know 15%

00:14:14,529 --> 00:14:17,470
of the room shoving their hands up there

00:14:15,759 --> 00:14:20,529
which is frankly pretty good all y'all

00:14:17,470 --> 00:14:22,029
you've Linux users right this is not a

00:14:20,529 --> 00:14:23,350
feature most people think about and it's

00:14:22,029 --> 00:14:25,750
only a feature they think about when it

00:14:23,350 --> 00:14:27,519
breaks this is going to become a

00:14:25,750 --> 00:14:29,319
recurring theme but in open source

00:14:27,519 --> 00:14:31,000
projects maintainer x' only pay

00:14:29,319 --> 00:14:33,339
attention to things that users complain

00:14:31,000 --> 00:14:35,709
about so when it works we don't think

00:14:33,339 --> 00:14:37,329
about it this code does not generate

00:14:35,709 --> 00:14:39,399
user complaints despite the absence of

00:14:37,329 --> 00:14:40,480
tests it generates developer complaints

00:14:39,399 --> 00:14:41,649
that we all really care about that

00:14:40,480 --> 00:14:44,620
because we've got other more important

00:14:41,649 --> 00:14:46,720
things to deal with so this code tends

00:14:44,620 --> 00:14:50,439
to sit and intimidate anyone who comes

00:14:46,720 --> 00:14:51,389
past to try to fix it let's ask a

00:14:50,439 --> 00:14:54,309
different question

00:14:51,389 --> 00:14:56,050
ipv6 support if you're writing a

00:14:54,309 --> 00:14:58,540
cross-platform program like requests

00:14:56,050 --> 00:15:00,550
it's helpful to know if ipv6 can be

00:14:58,540 --> 00:15:02,350
expected to work because in many cases

00:15:00,550 --> 00:15:06,250
it can't and you'd like to not bother

00:15:02,350 --> 00:15:07,930
trying if it's not going to work so how

00:15:06,250 --> 00:15:11,079
do you write cross-platform checks for

00:15:07,930 --> 00:15:13,300
ipv6 support the correct way to do this

00:15:11,079 --> 00:15:14,610
is to use the kernel you can ask the

00:15:13,300 --> 00:15:17,459
kernel to question

00:15:14,610 --> 00:15:21,209
but we run on a lot of kernels we ran on

00:15:17,459 --> 00:15:23,430
Windows Mac Linux BSD Solaris probably

00:15:21,209 --> 00:15:28,200
all kinds of wacky kernels and they all

00:15:23,430 --> 00:15:29,940
have different interfaces so the proper

00:15:28,200 --> 00:15:32,339
way to solve this problem is to get up

00:15:29,940 --> 00:15:34,410
there spin up build machines on all of

00:15:32,339 --> 00:15:37,200
these platforms write custom code that

00:15:34,410 --> 00:15:38,820
checks write tests for that code and

00:15:37,200 --> 00:15:40,200
then you have you know whatever eight or

00:15:38,820 --> 00:15:44,029
nine branches of code each of which

00:15:40,200 --> 00:15:44,029
implements a custom per kernel check

00:15:44,180 --> 00:15:48,810
that's pretty horrifying I don't want to

00:15:46,769 --> 00:15:49,860
write that code if I can avoid it so the

00:15:48,810 --> 00:15:51,240
first thing I would do is look at the

00:15:49,860 --> 00:15:53,459
standard library the standard library

00:15:51,240 --> 00:15:55,649
has a socket has ipv6 boolean which

00:15:53,459 --> 00:15:57,899
seems extremely tempting but that

00:15:55,649 --> 00:16:00,029
boolean is a lie that boolean just means

00:15:57,899 --> 00:16:02,519
does the socket module know what an ipv6

00:16:00,029 --> 00:16:05,040
address looks like which is very much

00:16:02,519 --> 00:16:09,209
not the same thing as actually can do

00:16:05,040 --> 00:16:11,040
ipv6 so if you don't want to start by

00:16:09,209 --> 00:16:13,079
biting off that enormous multi kernel

00:16:11,040 --> 00:16:14,430
approach to solving this problem what

00:16:13,079 --> 00:16:18,060
you'll end up with is something pretty

00:16:14,430 --> 00:16:19,920
silly like this this code is in the URL

00:16:18,060 --> 00:16:22,829
m3 code base and also the request code

00:16:19,920 --> 00:16:25,199
base and to the joy of all of you runs

00:16:22,829 --> 00:16:27,899
on input which means every time you

00:16:25,199 --> 00:16:29,550
import requests ever one of the things

00:16:27,899 --> 00:16:34,620
we take time out of our day to do is

00:16:29,550 --> 00:16:37,829
bind the ipv6 loopback address now this

00:16:34,620 --> 00:16:39,600
is pretty stupid right like that block

00:16:37,829 --> 00:16:40,949
of code inside the try accept could fail

00:16:39,600 --> 00:16:42,930
for an enormous number of reasons that

00:16:40,949 --> 00:16:45,420
really have nothing to do with ipv6 at

00:16:42,930 --> 00:16:47,040
all except exception is the kind of

00:16:45,420 --> 00:16:51,260
thing that in code review a good code

00:16:47,040 --> 00:16:54,750
reviewer would flag ants over broad but

00:16:51,260 --> 00:16:58,170
here's the thing this is extremely

00:16:54,750 --> 00:17:00,029
pragmatic it turns out that if you merge

00:16:58,170 --> 00:17:01,890
this code and put it into your code base

00:17:00,029 --> 00:17:03,720
all of the bug reports you got from

00:17:01,890 --> 00:17:05,490
users who were annoyed that you were

00:17:03,720 --> 00:17:08,370
trying to do ipv6 on their machine that

00:17:05,490 --> 00:17:10,319
can't go away they stopped complaining

00:17:08,370 --> 00:17:13,640
because you fixed their problem you fix

00:17:10,319 --> 00:17:17,370
their problem badly but you did fix it

00:17:13,640 --> 00:17:19,919
so you no longer think about this part

00:17:17,370 --> 00:17:22,500
of the code base this is an important

00:17:19,919 --> 00:17:24,780
lesson about the way in which you solve

00:17:22,500 --> 00:17:26,730
problems a very tempting thing to do

00:17:24,780 --> 00:17:27,270
when you have an urgent problem like the

00:17:26,730 --> 00:17:30,690
houses

00:17:27,270 --> 00:17:32,550
fire is to go alright let's put in the

00:17:30,690 --> 00:17:34,950
quickest fix we can to make the pain go

00:17:32,550 --> 00:17:36,210
away and we promise to come back and

00:17:34,950 --> 00:17:38,580
look at it again in the future

00:17:36,210 --> 00:17:40,590
and do the right thing then I'm going to

00:17:38,580 --> 00:17:42,930
tell you right now you will never come

00:17:40,590 --> 00:17:45,660
back and look at this cut it's just not

00:17:42,930 --> 00:17:47,370
going to happen because the pain is

00:17:45,660 --> 00:17:48,600
going to go away and once the pain goes

00:17:47,370 --> 00:17:50,670
away you're going to start worrying

00:17:48,600 --> 00:17:53,190
about the new thing that hurts right

00:17:50,670 --> 00:17:55,500
there is always some user screaming at

00:17:53,190 --> 00:17:57,360
you always and you're going to worry

00:17:55,500 --> 00:17:59,130
about them first before you go back and

00:17:57,360 --> 00:18:01,370
make quality of life fixes by improving

00:17:59,130 --> 00:18:04,560
code that does stupid stuff like this

00:18:01,370 --> 00:18:07,140
this is a warning about merging the

00:18:04,560 --> 00:18:09,560
quick hacky fix the quick hacky fix is

00:18:07,140 --> 00:18:12,990
never temporary anything that says

00:18:09,560 --> 00:18:16,020
comment to do refactor this later that

00:18:12,990 --> 00:18:17,730
comment is going to be there in 2026

00:18:16,020 --> 00:18:19,590
and no one's going to have to touch the

00:18:17,730 --> 00:18:21,540
code this is just the kind of thing that

00:18:19,590 --> 00:18:23,490
sticks around this codes been in the

00:18:21,540 --> 00:18:25,320
codebase two years and has received

00:18:23,490 --> 00:18:28,470
exactly zero complaints for how silly it

00:18:25,320 --> 00:18:30,450
is by definition this code is therefore

00:18:28,470 --> 00:18:34,350
totally fine and the best solution to

00:18:30,450 --> 00:18:35,370
the problem let's talk about something a

00:18:34,350 --> 00:18:39,840
little bit different let's talk about

00:18:35,370 --> 00:18:41,550
files requests has a really neat feature

00:18:39,840 --> 00:18:44,160
of its API which says it'll let you

00:18:41,550 --> 00:18:46,590
upload a file like object a file like

00:18:44,160 --> 00:18:49,680
object it turns out in Python is not

00:18:46,590 --> 00:18:51,060
really a thing the closest thing to a

00:18:49,680 --> 00:18:53,700
protocol around file like objects in

00:18:51,060 --> 00:18:54,870
python is has a read method and an

00:18:53,700 --> 00:18:56,640
important part of a description of

00:18:54,870 --> 00:18:58,770
something that has a read method is that

00:18:56,640 --> 00:19:00,960
it does not include has a way to ask it

00:18:58,770 --> 00:19:03,270
how long it is and this is a problem

00:19:00,960 --> 00:19:04,770
because in HTTP it turns out uploading

00:19:03,270 --> 00:19:07,110
data that you don't know the length of

00:19:04,770 --> 00:19:11,340
makes some servers mentioning no names

00:19:07,110 --> 00:19:13,290
Amazon s3 really mad really really mad

00:19:11,340 --> 00:19:14,910
which means you need to bend over

00:19:13,290 --> 00:19:18,450
backwards try and find out how long

00:19:14,910 --> 00:19:20,730
things are that turns out to be somewhat

00:19:18,450 --> 00:19:22,980
tricky this is the actual request

00:19:20,730 --> 00:19:24,840
function that does this it's been shrunk

00:19:22,980 --> 00:19:25,920
I've removed a whole bunch error

00:19:24,840 --> 00:19:28,740
handling code because it doesn't

00:19:25,920 --> 00:19:30,570
actually make my point very clearly but

00:19:28,740 --> 00:19:32,130
this is the perfect example of code that

00:19:30,570 --> 00:19:34,650
seems like a complete waste of time

00:19:32,130 --> 00:19:35,970
until you realize how we got there it's

00:19:34,650 --> 00:19:37,260
actually somewhat comprehensible to

00:19:35,970 --> 00:19:39,360
someone who has worked in the codebase

00:19:37,260 --> 00:19:40,860
six years because it ultimately only

00:19:39,360 --> 00:19:43,050
solves three problems

00:19:40,860 --> 00:19:45,390
the first block at the top is how long

00:19:43,050 --> 00:19:46,800
is this file and we try a number of

00:19:45,390 --> 00:19:48,450
different approaches we try using the

00:19:46,800 --> 00:19:49,860
Python standard method of asking how

00:19:48,450 --> 00:19:53,640
long something is which works

00:19:49,860 --> 00:19:55,530
surprisingly infrequently then we check

00:19:53,640 --> 00:19:57,000
for a Len property because in Python 2

00:19:55,530 --> 00:19:59,730
an enormous number of things in the i/o

00:19:57,000 --> 00:20:04,260
module don't do done delenn but do have

00:19:59,730 --> 00:20:07,260
dot Len which is inexplicable to me and

00:20:04,260 --> 00:20:09,180
then we go hey turns out a huge number

00:20:07,260 --> 00:20:10,680
of files are in fact files and you can

00:20:09,180 --> 00:20:13,140
call s stat on them which is super

00:20:10,680 --> 00:20:15,390
convenient so at the end of that maybe

00:20:13,140 --> 00:20:16,800
we know how long the file is then we

00:20:15,390 --> 00:20:18,750
have to do this other thing around

00:20:16,800 --> 00:20:20,730
working out if the file is already

00:20:18,750 --> 00:20:22,470
advanced somewhat lots of people want to

00:20:20,730 --> 00:20:25,170
do partial file uploads which are

00:20:22,470 --> 00:20:26,610
extremely important so we need to try

00:20:25,170 --> 00:20:28,230
that you try that by using the tail

00:20:26,610 --> 00:20:29,400
method and a whole bunch of things have

00:20:28,230 --> 00:20:31,200
a tell method but the tail method

00:20:29,400 --> 00:20:32,640
doesn't work all kinds of other wacky

00:20:31,200 --> 00:20:35,550
nonsense but if it's there and it works

00:20:32,640 --> 00:20:37,170
we'll use it if it's there it works and

00:20:35,550 --> 00:20:39,330
we don't know how long the file is and

00:20:37,170 --> 00:20:41,340
the file has a seek method that works

00:20:39,330 --> 00:20:43,680
which is a real thing that happens

00:20:41,340 --> 00:20:45,360
sometimes you can use both of those to

00:20:43,680 --> 00:20:47,400
work out how long the file is per our

00:20:45,360 --> 00:20:49,830
that bottom branch this genuinely does

00:20:47,400 --> 00:20:52,800
get used this is utterly perplexing to

00:20:49,830 --> 00:20:54,900
me and then we do something that is on

00:20:52,800 --> 00:20:56,550
the face of it extremely stupid and that

00:20:54,900 --> 00:20:59,180
has no code comment explaining why we do

00:20:56,550 --> 00:21:03,600
it because nothing gets code comment

00:20:59,180 --> 00:21:05,850
which is if the length is unknown we

00:21:03,600 --> 00:21:08,010
round it to zero everyone knows that

00:21:05,850 --> 00:21:10,980
none found it is zero I think we're all

00:21:08,010 --> 00:21:12,900
ok with this the reason we do this is it

00:21:10,980 --> 00:21:15,210
turns out that a number of things

00:21:12,900 --> 00:21:18,180
actively report their length as zero

00:21:15,210 --> 00:21:19,830
when they are not the bigger best

00:21:18,180 --> 00:21:22,050
quickest example of this is UNIX named

00:21:19,830 --> 00:21:23,610
pipes which live on the file system if

00:21:22,050 --> 00:21:25,620
you call F sat on them it will say

00:21:23,610 --> 00:21:27,870
thanks hero but you might read from it

00:21:25,620 --> 00:21:29,400
and there's data there this is super

00:21:27,870 --> 00:21:32,040
confusing but people want to pass those

00:21:29,400 --> 00:21:33,660
in to the request upload functions so if

00:21:32,040 --> 00:21:36,540
we see anything that claims to have

00:21:33,660 --> 00:21:38,790
length 0 we just go oh probably not and

00:21:36,540 --> 00:21:40,290
stream the upload instead we're not

00:21:38,790 --> 00:21:43,650
telling the other side how long the file

00:21:40,290 --> 00:21:44,670
is this is utterly bonkers this is

00:21:43,650 --> 00:21:46,410
really bad

00:21:44,670 --> 00:21:49,110
but it turns out it works just fine in

00:21:46,410 --> 00:21:51,120
almost all cases and continuing my

00:21:49,110 --> 00:21:53,370
common theme users don't complain about

00:21:51,120 --> 00:21:54,429
this very much anymore they do complain

00:21:53,370 --> 00:21:56,470
about this one occasionally

00:21:54,429 --> 00:21:58,029
but it's like once a year and we then

00:21:56,470 --> 00:22:01,240
usually explain how we got to this place

00:21:58,029 --> 00:22:03,190
and they get sad and stop bugging us

00:22:01,240 --> 00:22:08,799
which is like again it's a success

00:22:03,190 --> 00:22:11,350
basically is what I'm saying this code

00:22:08,799 --> 00:22:13,480
is utterly silly again exhibits this

00:22:11,350 --> 00:22:16,600
evolutionary behavior - stupid code

00:22:13,480 --> 00:22:18,669
which is over time you work out every

00:22:16,600 --> 00:22:20,440
wacky edge case that any computer has

00:22:18,669 --> 00:22:22,509
ever done and then you enshrine them in

00:22:20,440 --> 00:22:24,039
your code base as a monument to the tip

00:22:22,509 --> 00:22:26,830
to the foolishness and hubris of

00:22:24,039 --> 00:22:28,690
programmers who came before us all right

00:22:26,830 --> 00:22:31,629
last one I'm going to come to a close

00:22:28,690 --> 00:22:34,299
somewhat shortly it's the big one HTTP

00:22:31,629 --> 00:22:35,860
redirects on the face of it HTTP

00:22:34,299 --> 00:22:37,929
redirects are super simple the server

00:22:35,860 --> 00:22:38,259
just says cool thank you for your

00:22:37,929 --> 00:22:40,809
business

00:22:38,259 --> 00:22:43,210
please go look over here that's fine

00:22:40,809 --> 00:22:44,499
however it turns out there are an

00:22:43,210 --> 00:22:46,690
enormous number of ways to do

00:22:44,499 --> 00:22:48,249
redirecting HTTP all which have slightly

00:22:46,690 --> 00:22:51,070
different semantics and slightly

00:22:48,249 --> 00:22:53,289
different behaviors because we can't ask

00:22:51,070 --> 00:22:56,080
the user what they want we have to apply

00:22:53,289 --> 00:22:57,909
a strict set of well-defined automatic

00:22:56,080 --> 00:22:59,950
transformations to the requests they

00:22:57,909 --> 00:23:02,080
gave us to get the new redirect request

00:22:59,950 --> 00:23:02,470
server get some input the user gets some

00:23:02,080 --> 00:23:04,509
input

00:23:02,470 --> 00:23:07,690
we get a bunch of input and our goal is

00:23:04,509 --> 00:23:09,580
to try to copy what browsers do now as

00:23:07,690 --> 00:23:11,440
we all know browsers are famous for

00:23:09,580 --> 00:23:14,889
their incredibly small tightly

00:23:11,440 --> 00:23:16,869
constrained code bases and so they only

00:23:14,889 --> 00:23:19,840
spend a couple thousand lines of code

00:23:16,869 --> 00:23:21,789
trying to work this out because we are

00:23:19,840 --> 00:23:23,379
much more dedicated developers of the

00:23:21,789 --> 00:23:27,039
web browser developers ours is merely

00:23:23,379 --> 00:23:29,080
several hundred lines of code and it is

00:23:27,039 --> 00:23:30,820
the perfect example of the kind of code

00:23:29,080 --> 00:23:33,429
but if you gave it in code review all at

00:23:30,820 --> 00:23:37,210
once no one would their lives ever say

00:23:33,429 --> 00:23:40,210
yeah that's cool will lurch that this is

00:23:37,210 --> 00:23:41,679
a major chunk of the code in requests

00:23:40,210 --> 00:23:43,809
that handle this is not even all of it

00:23:41,679 --> 00:23:45,460
this is just most of it it's split

00:23:43,809 --> 00:23:46,779
across multiple functions which are

00:23:45,460 --> 00:23:48,909
written in a mixed in class because of

00:23:46,779 --> 00:23:51,759
course they are so that people can

00:23:48,909 --> 00:23:53,710
intervene and change the logic like this

00:23:51,759 --> 00:23:57,009
is just a perfect example of how not to

00:23:53,710 --> 00:23:59,350
solve this problem and trying to tie

00:23:57,009 --> 00:24:02,049
things back together the reason we get

00:23:59,350 --> 00:24:03,789
to a place like this is because we have

00:24:02,049 --> 00:24:05,830
a complex problem to solve redirection

00:24:03,789 --> 00:24:07,330
is complex it takes an enormous amount

00:24:05,830 --> 00:24:10,809
of time and effort to get

00:24:07,330 --> 00:24:14,080
but more importantly it's complex and

00:24:10,809 --> 00:24:15,610
evolves different client user agents do

00:24:14,080 --> 00:24:17,289
different things we try to copy them

00:24:15,610 --> 00:24:19,539
browsers change what they do we try to

00:24:17,289 --> 00:24:21,100
copy them users complain we try to make

00:24:19,539 --> 00:24:23,230
it evil for them to override our

00:24:21,100 --> 00:24:24,909
behavior we are balancing an enormous

00:24:23,230 --> 00:24:26,950
number of concerns none of which we knew

00:24:24,909 --> 00:24:30,190
about when we started and ultimately

00:24:26,950 --> 00:24:32,799
none of which justify us coming back and

00:24:30,190 --> 00:24:34,710
trying to define the complete surface

00:24:32,799 --> 00:24:36,700
area of what these functions should do

00:24:34,710 --> 00:24:39,100
trying to write tests or something like

00:24:36,700 --> 00:24:41,860
this after you've written it is nigh on

00:24:39,100 --> 00:24:44,950
impossible and trust me I've tried it

00:24:41,860 --> 00:24:46,720
just is almost impossible after the fact

00:24:44,950 --> 00:24:48,639
to work out what here is the intended

00:24:46,720 --> 00:24:51,580
behavior and what here is emergent

00:24:48,639 --> 00:24:53,470
behavior and once you've had a code base

00:24:51,580 --> 00:24:54,970
like requests that's been on at the same

00:24:53,470 --> 00:24:57,039
major release for four years at a

00:24:54,970 --> 00:24:59,080
certain point the emergent behavior

00:24:57,039 --> 00:25:02,710
becomes the behavior your users depend

00:24:59,080 --> 00:25:05,200
on so at a certain point it becomes

00:25:02,710 --> 00:25:06,340
impossible to change even if you find

00:25:05,200 --> 00:25:09,519
that there is something in here that's

00:25:06,340 --> 00:25:11,950
wrong code like this tends to ossify

00:25:09,519 --> 00:25:13,869
over time and get stuck the way it is

00:25:11,950 --> 00:25:16,779
becoming a portion of the code base that

00:25:13,869 --> 00:25:19,649
is left alone and only ever incremental

00:25:16,779 --> 00:25:21,909
II changed and it becomes a monument to

00:25:19,649 --> 00:25:25,779
we weren't we foolish when we thought

00:25:21,909 --> 00:25:27,639
this request thing was a good idea so

00:25:25,779 --> 00:25:31,269
this was a really short dive into the

00:25:27,639 --> 00:25:32,499
requests codebase I had about 15 more

00:25:31,269 --> 00:25:33,789
examples when I originally wrote this

00:25:32,499 --> 00:25:35,559
talk and the talk was three hours long

00:25:33,789 --> 00:25:37,480
and there's just no way that would have

00:25:35,559 --> 00:25:37,869
been okay but if you want to see some

00:25:37,480 --> 00:25:39,220
more

00:25:37,869 --> 00:25:41,110
come find me some time and I'll show you

00:25:39,220 --> 00:25:43,029
some other fun bits of the code base but

00:25:41,110 --> 00:25:45,519
I hope you found this at the very least

00:25:43,029 --> 00:25:47,139
enjoyable but also hopefully somewhat

00:25:45,519 --> 00:25:48,549
illuminating many of you don't get the

00:25:47,139 --> 00:25:50,980
privilege to work on a code base like

00:25:48,549 --> 00:25:53,860
requests very much and it's worth

00:25:50,980 --> 00:25:55,269
showing that it turns out an enormous

00:25:53,860 --> 00:25:57,129
number of the projects that we hold up

00:25:55,269 --> 00:25:59,649
as the great treasures of our community

00:25:57,129 --> 00:26:03,129
have utterly horrifying code within them

00:25:59,649 --> 00:26:04,690
just some of the worst code ever but we

00:26:03,129 --> 00:26:07,240
don't talk about it very much because

00:26:04,690 --> 00:26:11,110
you know these are our heroes these are

00:26:07,240 --> 00:26:15,369
the things we aspire to be so the lesson

00:26:11,110 --> 00:26:17,230
here is firstly hero worship while fine

00:26:15,369 --> 00:26:20,049
and by all means hero worship me if

00:26:17,230 --> 00:26:20,920
you'd like I won't say no but hero

00:26:20,049 --> 00:26:23,050
worship is

00:26:20,920 --> 00:26:25,390
mentally predicated on our on a lie our

00:26:23,050 --> 00:26:28,030
heroes are not dramatically better at

00:26:25,390 --> 00:26:29,500
writing good code than us they might be

00:26:28,030 --> 00:26:31,810
dramatically better at solving a problem

00:26:29,500 --> 00:26:34,930
but that is not quite the same thing all

00:26:31,810 --> 00:26:37,180
software we write is flawed all of it

00:26:34,930 --> 00:26:38,860
any non-trivial software I will find a

00:26:37,180 --> 00:26:41,650
flaw in its codebase I guarantee it

00:26:38,860 --> 00:26:44,800
people make mistakes those mistakes

00:26:41,650 --> 00:26:46,060
become entrenched in the codebase what

00:26:44,800 --> 00:26:48,160
is really important is that we

00:26:46,060 --> 00:26:50,320
acknowledge our mistakes we shouldn't

00:26:48,160 --> 00:26:52,990
hide from the imperfections in our code

00:26:50,320 --> 00:26:55,180
base because if we do we will never ever

00:26:52,990 --> 00:26:58,420
learn from them or improve upon them

00:26:55,180 --> 00:26:59,710
ever it's bad that there are all of

00:26:58,420 --> 00:27:02,080
these parts of the codebase that never

00:26:59,710 --> 00:27:03,940
get touched but if I pretended they

00:27:02,080 --> 00:27:07,180
didn't exist I would only make the

00:27:03,940 --> 00:27:10,000
problem worse by having the decency to

00:27:07,180 --> 00:27:12,220
stand up in front of you and say look

00:27:10,000 --> 00:27:14,800
I've left this here three years isn't

00:27:12,220 --> 00:27:16,330
that horrifying at least means that

00:27:14,800 --> 00:27:17,950
there is a chance that either I or

00:27:16,330 --> 00:27:20,950
someone else will come along and make

00:27:17,950 --> 00:27:22,900
this better we all make all make

00:27:20,950 --> 00:27:24,700
mistakes and we really need to not be

00:27:22,900 --> 00:27:28,360
afraid of them so I highly encourage you

00:27:24,700 --> 00:27:30,100
to stand up in a room full of people and

00:27:28,360 --> 00:27:31,510
show them your mistakes and invite them

00:27:30,100 --> 00:27:35,590
to laugh at you because it's only

00:27:31,510 --> 00:27:38,170
moderately terrifying all right time for

00:27:35,590 --> 00:27:40,320
questions if we have any thank you very

00:27:38,170 --> 00:27:40,320
much

00:27:45,489 --> 00:27:49,849
we have three minutes for questions you

00:27:48,019 --> 00:27:51,440
can approach this audience mic over here

00:27:49,849 --> 00:27:55,459
remember to phrase your question as a

00:27:51,440 --> 00:27:56,690
question thank you this person is a hack

00:27:55,459 --> 00:28:00,619
and should not be allowed to ask

00:27:56,690 --> 00:28:01,999
questions hi everyone my name is Kenneth

00:28:00,619 --> 00:28:09,379
writes and I wrote the request library

00:28:01,999 --> 00:28:12,049
and thank you I just wanted to take a

00:28:09,379 --> 00:28:15,469
moment to to say that I'm sorry for all

00:28:12,049 --> 00:28:17,029
of the terrible mistake you saw and also

00:28:15,469 --> 00:28:18,949
I wanted to say that I've been thanked

00:28:17,029 --> 00:28:20,269
by thousands and thousands of people for

00:28:18,949 --> 00:28:23,059
writing this library which has been

00:28:20,269 --> 00:28:24,859
wonderful and I want to thank you all

00:28:23,059 --> 00:28:27,190
for that and but in addition to that

00:28:24,859 --> 00:28:29,059
Corey and Ian are two people who are

00:28:27,190 --> 00:28:31,009
tremendously responsible to the

00:28:29,059 --> 00:28:33,259
sustainability of the project and they

00:28:31,009 --> 00:28:34,969
are complete reason why it's available

00:28:33,259 --> 00:28:38,559
to you today so I want everyone to

00:28:34,969 --> 00:28:38,559
please clap for Cory right now

00:28:44,220 --> 00:28:50,700
uh so my name is Joseph Metzinger my

00:28:47,730 --> 00:28:53,220
question is when you do have users

00:28:50,700 --> 00:28:55,289
screaming at you and you have a quick

00:28:53,220 --> 00:28:57,780
dirty ugly solution how do you balance

00:28:55,289 --> 00:28:59,960
that with actually making sure that

00:28:57,780 --> 00:29:02,370
someone comes back and kind of writes a

00:28:59,960 --> 00:29:04,980
good solution because it's very hard to

00:29:02,370 --> 00:29:06,059
tell people that they're just going to

00:29:04,980 --> 00:29:07,710
have to live with everything being

00:29:06,059 --> 00:29:08,970
broken for another day or two while you

00:29:07,710 --> 00:29:13,320
come up with a great a better solution

00:29:08,970 --> 00:29:15,720
yeah I mean ultimately you know this

00:29:13,320 --> 00:29:17,400
talk could be rephrased how do you

00:29:15,720 --> 00:29:18,659
balance the need to immediately fix

00:29:17,400 --> 00:29:20,909
things with the needs to do things right

00:29:18,659 --> 00:29:21,840
and I wish I had a general answer to

00:29:20,909 --> 00:29:23,820
that question I don't

00:29:21,840 --> 00:29:25,799
I only have specific case examples and

00:29:23,820 --> 00:29:28,679
it ultimately becomes at least for me a

00:29:25,799 --> 00:29:31,530
matter of gut feel at a certain point I

00:29:28,679 --> 00:29:33,270
come you know if for no other reason

00:29:31,530 --> 00:29:35,340
than to get some kind of metric a good

00:29:33,270 --> 00:29:36,780
answer is how many users are shouting at

00:29:35,340 --> 00:29:40,080
you and how important are they to you

00:29:36,780 --> 00:29:42,030
like there is always that balance and at

00:29:40,080 --> 00:29:44,130
a certain point I mean the point of

00:29:42,030 --> 00:29:46,080
putting the the hacks up is not to say

00:29:44,130 --> 00:29:48,120
aren't they horrible that's part of it

00:29:46,080 --> 00:29:49,620
but it's also to say aren't they a

00:29:48,120 --> 00:29:52,110
pragmatic way to have dealt with this

00:29:49,620 --> 00:29:55,650
problem at certain point building up the

00:29:52,110 --> 00:29:57,659
hacks is okay so long as you own the

00:29:55,650 --> 00:29:59,250
fact that they're there and when users

00:29:57,659 --> 00:30:00,900
come along or a developer comes along

00:29:59,250 --> 00:30:02,730
abilities to fix it you don't say

00:30:00,900 --> 00:30:04,409
excuse me I've bought into this horrible

00:30:02,730 --> 00:30:06,299
hack way of doing things but you can say

00:30:04,409 --> 00:30:09,990
yeah okay by all means let's try and fix

00:30:06,299 --> 00:30:12,809
this and do better thanks for the talk

00:30:09,990 --> 00:30:15,140
queries at what point you talked about

00:30:12,809 --> 00:30:17,370
greenfield projects and you talked about

00:30:15,140 --> 00:30:19,650
you know fixing something and getting it

00:30:17,370 --> 00:30:21,179
going at what point is there a tipping

00:30:19,650 --> 00:30:25,409
point or where do you feel can a

00:30:21,179 --> 00:30:28,110
codebase that's established and good can

00:30:25,409 --> 00:30:29,820
it eventually be deified or is it

00:30:28,110 --> 00:30:31,740
eventually going to have to you know

00:30:29,820 --> 00:30:34,340
some other greenfield you know reflect

00:30:31,740 --> 00:30:37,610
that all going to come up and replace it

00:30:34,340 --> 00:30:39,570
so I'm a big believer in the

00:30:37,610 --> 00:30:41,789
evolutionary model of software

00:30:39,570 --> 00:30:44,730
development so I think that requests

00:30:41,789 --> 00:30:47,100
should continue to be maintained and

00:30:44,730 --> 00:30:49,890
have bug fixes etc applied to it as much

00:30:47,100 --> 00:30:52,409
as possible and at the point where the

00:30:49,890 --> 00:30:53,880
combined weight of all the bad decisions

00:30:52,409 --> 00:30:55,800
we have made in the past make it

00:30:53,880 --> 00:30:56,910
impossible for us to keep up

00:30:55,800 --> 00:30:58,740
I'm quite confident that someone

00:30:56,910 --> 00:31:00,720
probably in this room will come along

00:30:58,740 --> 00:31:01,830
and eat our lunch and when that happens

00:31:00,720 --> 00:31:04,800
I will quietly retire from public

00:31:01,830 --> 00:31:06,510
speaking go off stand on a farm

00:31:04,800 --> 00:31:08,430
somewhere by all means I encourage

00:31:06,510 --> 00:31:11,190
people to write something better than

00:31:08,430 --> 00:31:13,890
this just so that you don't have to keep

00:31:11,190 --> 00:31:15,060
hearing me speak everybody all right

00:31:13,890 --> 00:31:17,550
that's all the time that we have for

00:31:15,060 --> 00:31:19,020
questions please Doctore later if you

00:31:17,550 --> 00:31:21,770
have a question for me thank you thank

00:31:19,020 --> 00:31:21,770

YouTube URL: https://www.youtube.com/watch?v=ptbCIvve6-k


