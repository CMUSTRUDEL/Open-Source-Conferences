Title: Flávio Juvenal   How to make a good library API   PyCon 2017
Publication date: 2017-05-20
Playlist: PyCon 2017
Description: 
	"Speaker: Flávio Juvenal

It's not easy to write libraries with great APIs. We're aware of that. However, it's not always clear how we can follow abstract ideals like elegance, simplicity, and extensibility to improve our APIs. That's why in this talk we'll discuss good and bad APIs with real-world examples. For each thing learned, we'll come up with a checklist to help us with practical advice for writing good APIs.


Slides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides"
Captions: 
	00:00:00,709 --> 00:00:08,069
good afternoon everybody welcome to our

00:00:03,720 --> 00:00:10,290
next session here Flavio juvenile is

00:00:08,069 --> 00:00:12,269
going to be speaking out on how to make

00:00:10,290 --> 00:00:14,570
a good library API what's given the

00:00:12,269 --> 00:00:14,570
began

00:00:19,520 --> 00:00:25,110
thank you everyone I'm really glad to be

00:00:23,010 --> 00:00:28,340
here with you today is a amazing

00:00:25,110 --> 00:00:31,080
opportunity this is my first bike on and

00:00:28,340 --> 00:00:34,739
I'll talk about how to make a good

00:00:31,080 --> 00:00:38,430
library API I'm not a API expert but I

00:00:34,739 --> 00:00:41,250
stood it a lot about these so what the

00:00:38,430 --> 00:00:48,720
Giants are saying about this so hope you

00:00:41,250 --> 00:00:52,530
enjoy I work at vinta and I'm one of the

00:00:48,720 --> 00:00:55,110
partners we are small but expert Python

00:00:52,530 --> 00:00:57,899
Jango react development team from Brazil

00:00:55,110 --> 00:01:00,480
and we do custom web development for

00:00:57,899 --> 00:01:05,520
companies all over the world mostly in

00:01:00,480 --> 00:01:09,200
the US and here's a picture of your our

00:01:05,520 --> 00:01:12,180
team just to give you some context and

00:01:09,200 --> 00:01:14,550
ok just to make sure everyone here is on

00:01:12,180 --> 00:01:18,479
the same page I'll be talking about

00:01:14,550 --> 00:01:21,810
general library API so library model

00:01:18,479 --> 00:01:23,250
packages API is not just web api's even

00:01:21,810 --> 00:01:26,310
though the concepts that I'll discuss

00:01:23,250 --> 00:01:31,619
here can be adapt and applied to web api

00:01:26,310 --> 00:01:34,560
stew ok so what you want to learn here

00:01:31,619 --> 00:01:37,950
is how to make a good API and according

00:01:34,560 --> 00:01:40,590
to Wikipedia and this is not like those

00:01:37,950 --> 00:01:45,240
crazy pages of Wikipedia is one that has

00:01:40,590 --> 00:01:47,340
good contributors it says that a good

00:01:45,240 --> 00:01:49,770
API makes easier to develop a solution

00:01:47,340 --> 00:01:51,210
by providing the building blocks to be

00:01:49,770 --> 00:01:54,180
put together by the programmer

00:01:51,210 --> 00:01:57,329
and the programmer matters here because

00:01:54,180 --> 00:02:00,750
it's for them that will make the API we

00:01:57,329 --> 00:02:06,149
need to recognize that an API is a user

00:02:00,750 --> 00:02:09,660
interface and we need to think about who

00:02:06,149 --> 00:02:14,400
will consume the API we want to bring

00:02:09,660 --> 00:02:17,190
the human factor into the API design by

00:02:14,400 --> 00:02:20,400
students ability we can summarize good

00:02:17,190 --> 00:02:23,790
UI into four values simplicity

00:02:20,400 --> 00:02:25,530
flexibility consistency is safety those

00:02:23,790 --> 00:02:28,379
values usually will overlap with each

00:02:25,530 --> 00:02:32,490
other but we can use them to guide

00:02:28,379 --> 00:02:34,530
ourselves while building API in this

00:02:32,490 --> 00:02:37,880
Takao get into details on simplicity and

00:02:34,530 --> 00:02:40,920
flexibility because of the limited time

00:02:37,880 --> 00:02:44,760
but those four values are explored on

00:02:40,920 --> 00:02:47,970
this online checklist that we've built

00:02:44,760 --> 00:02:50,610
and it's Python dot a PA checklist calm

00:02:47,970 --> 00:02:54,440
and you can go there and you find all

00:02:50,610 --> 00:02:57,660
this for UI values applied to python api

00:02:54,440 --> 00:03:00,000
this is our online checklist you can use

00:02:57,660 --> 00:03:02,150
you can check it and it will save on

00:03:00,000 --> 00:03:06,210
local storage so you can come back later

00:03:02,150 --> 00:03:08,700
it's free is open source MIT listen said

00:03:06,210 --> 00:03:11,040
so feel free to contribute it create

00:03:08,700 --> 00:03:15,450
issues disagree with something just

00:03:11,040 --> 00:03:18,360
create the issue the forked etc I got

00:03:15,450 --> 00:03:21,900
this those guidelines from those and off

00:03:18,360 --> 00:03:26,070
saucers but I'm happy to to have

00:03:21,900 --> 00:03:29,840
contributions on this ok now talking

00:03:26,070 --> 00:03:35,280
about the uij values applied to api's

00:03:29,840 --> 00:03:39,210
first simplicity design of Python talks

00:03:35,280 --> 00:03:41,490
a lot about simplicity and this is in

00:03:39,210 --> 00:03:42,920
the core design of Python so this is

00:03:41,490 --> 00:03:47,070
something that we need to care about

00:03:42,920 --> 00:03:48,810
when writing our api's beautiful is

00:03:47,070 --> 00:03:50,910
better than ugly explicit very name

00:03:48,810 --> 00:03:53,870
please yet cetera this is a beautiful

00:03:50,910 --> 00:03:56,760
this all nice but how we achieve that

00:03:53,870 --> 00:03:59,550
the first idea for achieving simplicity

00:03:56,760 --> 00:04:04,340
in API design is to focus on the nine

00:03:59,550 --> 00:04:08,390
percent use cases and this means that

00:04:04,340 --> 00:04:11,370
nine percent of our API users should be

00:04:08,390 --> 00:04:14,220
simply calling a function or using a

00:04:11,370 --> 00:04:18,270
class to fix their problem to solve

00:04:14,220 --> 00:04:21,060
their problem using your library API but

00:04:18,270 --> 00:04:24,360
will not forget the other ten percent

00:04:21,060 --> 00:04:27,780
we still need to handle those minor use

00:04:24,360 --> 00:04:30,270
cases may be by letting them calling

00:04:27,780 --> 00:04:32,670
multiple functions changing attributes

00:04:30,270 --> 00:04:35,790
in classes then we also have to care

00:04:32,670 --> 00:04:38,430
about the three percent which we'll call

00:04:35,790 --> 00:04:40,740
some few functions intertwined with

00:04:38,430 --> 00:04:43,500
custom logic or they will inherit

00:04:40,740 --> 00:04:45,360
classes to change methods but of course

00:04:43,500 --> 00:04:47,669
there will always be some

00:04:45,360 --> 00:04:51,060
developers some problems that we won't

00:04:47,669 --> 00:04:53,610
be able to fix and for this 1% we can

00:04:51,060 --> 00:04:58,439
just ask them to FARC and contribute

00:04:53,610 --> 00:05:01,530
with the API and this means the 9% here

00:04:58,439 --> 00:05:04,530
is simplicity and the other 10% is

00:05:01,530 --> 00:05:06,780
flexibility so we will make the 90%

00:05:04,530 --> 00:05:09,750
possible through simplicity the other

00:05:06,780 --> 00:05:14,729
with flexibility we should talk about

00:05:09,750 --> 00:05:18,000
later ok but how can we discover the 90%

00:05:14,729 --> 00:05:20,129
use cases of our API a good idea to

00:05:18,000 --> 00:05:22,740
follow a top-down approach so we can

00:05:20,129 --> 00:05:25,590
start with the readme we can wipe write

00:05:22,740 --> 00:05:29,969
the rhythmical code even before the

00:05:25,590 --> 00:05:31,979
actual implementation code and to do

00:05:29,969 --> 00:05:35,520
that we should start teaching to your

00:05:31,979 --> 00:05:38,460
users API is like a product the users it

00:05:35,520 --> 00:05:40,979
solves a problem for them so we need to

00:05:38,460 --> 00:05:44,729
figure out why the library exists what

00:05:40,979 --> 00:05:47,550
it solves and to each extent and you can

00:05:44,729 --> 00:05:50,069
see this on good Python api's like

00:05:47,550 --> 00:05:52,860
pendulum which is exists for making

00:05:50,069 --> 00:05:54,930
Python date times easier or beautiful

00:05:52,860 --> 00:05:58,610
soaps which are is a Python library for

00:05:54,930 --> 00:06:02,520
pulling data out of HTML and xml files

00:05:58,610 --> 00:06:05,099
and we can show users how to use we can

00:06:02,520 --> 00:06:08,099
write just simple things simple code

00:06:05,099 --> 00:06:10,440
that doesn't even work yet because we

00:06:08,099 --> 00:06:12,270
are not writing the implementation but

00:06:10,440 --> 00:06:15,900
we should try to write this code to know

00:06:12,270 --> 00:06:18,509
how developers will use our API pendula

00:06:15,900 --> 00:06:19,680
for example does that right in the first

00:06:18,509 --> 00:06:23,129
lines of the readme

00:06:19,680 --> 00:06:25,409
it contains simple code and it's good to

00:06:23,129 --> 00:06:28,020
start like this because you think more

00:06:25,409 --> 00:06:32,189
about the API design in a top-down

00:06:28,020 --> 00:06:36,180
approach other thing we must do is know

00:06:32,189 --> 00:06:38,759
your users to do that we need to get

00:06:36,180 --> 00:06:41,789
people involved in API design we need to

00:06:38,759 --> 00:06:44,669
ask developers what they need we need to

00:06:41,789 --> 00:06:47,490
share the problem we are trying to solve

00:06:44,669 --> 00:06:49,439
with developers and we ask we should ask

00:06:47,490 --> 00:06:54,349
them to use should ask your co-workers

00:06:49,439 --> 00:06:57,750
ask random people on the internet on

00:06:54,349 --> 00:06:59,340
chat rooms or forums or anything to

00:06:57,750 --> 00:07:01,199
touch your API

00:06:59,340 --> 00:07:04,380
and then you figure out what would be

00:07:01,199 --> 00:07:07,500
the 90% use cases and you also know the

00:07:04,380 --> 00:07:11,280
other 10% that maybe won't be so easy to

00:07:07,500 --> 00:07:13,400
do in your API but with some extension

00:07:11,280 --> 00:07:17,490
with some flexibility we'll be able to

00:07:13,400 --> 00:07:20,729
do this do it other idea is to reduce

00:07:17,490 --> 00:07:25,350
clutter for this 90% use cases this is

00:07:20,729 --> 00:07:27,840
an idea for simplicity to do that we can

00:07:25,350 --> 00:07:31,370
follow a UI good practice called

00:07:27,840 --> 00:07:34,740
progressive disclosure and what's that

00:07:31,370 --> 00:07:36,810
Google homepage shows a lot of those a

00:07:34,740 --> 00:07:39,810
lot about progressive disclosure because

00:07:36,810 --> 00:07:42,120
90% of the users who go to Google just

00:07:39,810 --> 00:07:44,400
want to serve something google.com they

00:07:42,120 --> 00:07:46,830
probably want to search something so

00:07:44,400 --> 00:07:49,710
Google is very focused on search on its

00:07:46,830 --> 00:07:52,919
homepage and focusing on textual search

00:07:49,710 --> 00:07:55,590
you can do image search you can do other

00:07:52,919 --> 00:07:58,199
stuff like visiting Gmail on Google

00:07:55,590 --> 00:08:00,510
homepage but most of the users will be

00:07:58,199 --> 00:08:04,010
there to search so Google's focus on

00:08:00,510 --> 00:08:07,950
that making the more advanced adoptions

00:08:04,010 --> 00:08:14,010
also available but more hidden less

00:08:07,950 --> 00:08:16,530
focuses than the search here is you know

00:08:14,010 --> 00:08:20,580
example of progressive disclosure in an

00:08:16,530 --> 00:08:25,160
API you can figure you can figure out

00:08:20,580 --> 00:08:28,650
these on the post research API on Jango

00:08:25,160 --> 00:08:31,410
you can just do a simple search by using

00:08:28,650 --> 00:08:33,270
the underline underline search and you

00:08:31,410 --> 00:08:35,310
search for AG but you can do more

00:08:33,270 --> 00:08:37,440
advanced stuff you can use a search

00:08:35,310 --> 00:08:39,959
vector that config the description to

00:08:37,440 --> 00:08:43,229
french and then you can search the query

00:08:39,959 --> 00:08:45,900
with french words and this is the more

00:08:43,229 --> 00:08:47,850
advanced that the use cases but to do

00:08:45,900 --> 00:08:50,070
the simple use case you don't need to

00:08:47,850 --> 00:08:51,930
use all the advanced stuff you can just

00:08:50,070 --> 00:08:54,300
use the simple use case and you'll be

00:08:51,930 --> 00:08:57,000
fine this is progressive disclosure you

00:08:54,300 --> 00:08:59,130
are hiding the complex stuff without

00:08:57,000 --> 00:09:02,070
making it as possible it's also possible

00:08:59,130 --> 00:09:06,260
but it's not just there for the simple

00:09:02,070 --> 00:09:08,670
users and this means we need good folds

00:09:06,260 --> 00:09:10,940
this is what makes progressive

00:09:08,670 --> 00:09:13,370
disclosure possible

00:09:10,940 --> 00:09:15,170
and to have good defaults we need to

00:09:13,370 --> 00:09:18,140
make assumptions we need to decide for

00:09:15,170 --> 00:09:20,510
the 9% of our users we need to require

00:09:18,140 --> 00:09:23,810
from them only the essentials to solve

00:09:20,510 --> 00:09:26,030
their problem all the other stuff we can

00:09:23,810 --> 00:09:27,800
figure out for them and there are many

00:09:26,030 --> 00:09:30,340
default we need to think about argument

00:09:27,800 --> 00:09:33,620
values argument order behavior

00:09:30,340 --> 00:09:38,240
environment many things we need to carry

00:09:33,620 --> 00:09:42,110
about to build a good API with

00:09:38,240 --> 00:09:45,950
progressive disclosure here is I example

00:09:42,110 --> 00:09:50,330
the history API on JavaScript has a very

00:09:45,950 --> 00:09:53,120
bad Defoe in pushstate

00:09:50,330 --> 00:09:55,730
because most of the users 90% of the

00:09:53,120 --> 00:10:00,500
users will use pushstate just to add a

00:09:55,730 --> 00:10:02,990
URL to the history but they can't just

00:10:00,500 --> 00:10:05,390
do that by just telling the URL to page

00:10:02,990 --> 00:10:08,060
state they need to give a state object

00:10:05,390 --> 00:10:10,190
then give a title that's not even used

00:10:08,060 --> 00:10:13,130
in modern browsers and then finally just

00:10:10,190 --> 00:10:15,590
give the URL instead the order should be

00:10:13,130 --> 00:10:19,780
the URL first and the other stuff should

00:10:15,590 --> 00:10:23,600
have default this would be a better API

00:10:19,780 --> 00:10:27,590
also to reduce clutter we can we should

00:10:23,600 --> 00:10:29,960
avoid compare some inputs sometimes the

00:10:27,590 --> 00:10:32,630
API misleads the client we cover some

00:10:29,960 --> 00:10:38,120
inputs for example described by Milly

00:10:32,630 --> 00:10:41,600
API it receives a two argument and the

00:10:38,120 --> 00:10:45,800
two argument needs to be a list so this

00:10:41,600 --> 00:10:48,740
is not to list or recipients list many

00:10:45,800 --> 00:10:52,700
users just try to use this API putting a

00:10:48,740 --> 00:10:54,710
single string and then the scrap I will

00:10:52,700 --> 00:10:58,010
try to send an email to each character

00:10:54,710 --> 00:11:03,320
of the string which users do not want

00:10:58,010 --> 00:11:05,870
and they fix that on a square by 1.3 by

00:11:03,320 --> 00:11:07,850
also accepting the single string they

00:11:05,870 --> 00:11:11,810
still accept the list but they also

00:11:07,850 --> 00:11:15,710
accept a single string and here's the

00:11:11,810 --> 00:11:17,800
issue related to this this case there's

00:11:15,710 --> 00:11:22,970
some discussion is interesting to see

00:11:17,800 --> 00:11:24,920
and also we need to check related

00:11:22,970 --> 00:11:26,959
cumbersome inputs if they use a distance

00:11:24,920 --> 00:11:29,209
raging something just to call the API

00:11:26,959 --> 00:11:31,670
for example there's a the world has

00:11:29,209 --> 00:11:35,630
changed from Python to Python 3 in fact

00:11:31,670 --> 00:11:38,690
python 3 - the robotic parcel only

00:11:35,630 --> 00:11:41,060
accepted a file like object it only

00:11:38,690 --> 00:11:43,760
affected a fellow object with read SP

00:11:41,060 --> 00:11:46,910
and you if you have the context of the

00:11:43,760 --> 00:11:49,130
config already loaded you need you

00:11:46,910 --> 00:11:51,440
needed to use a string I'll just to call

00:11:49,130 --> 00:11:54,620
the API this is bad the API should have

00:11:51,440 --> 00:11:59,380
a rich string method to allow this use

00:11:54,620 --> 00:11:59,380
case and this was fixed in Python 3 -

00:11:59,440 --> 00:12:06,410
another thing to reduce clutter is

00:12:01,820 --> 00:12:08,449
creating abstractions and what is

00:12:06,410 --> 00:12:11,420
abstraction we we talk about that a lot

00:12:08,449 --> 00:12:13,310
but we don't think much about it and to

00:12:11,420 --> 00:12:15,110
abstract is to draw away from the

00:12:13,310 --> 00:12:18,709
physical nature of something this is

00:12:15,110 --> 00:12:20,870
very poetic very artistic and we tart

00:12:18,709 --> 00:12:23,000
with abstract eyes will you explain this

00:12:20,870 --> 00:12:26,870
this is a painting with a low

00:12:23,000 --> 00:12:30,079
abstraction value you can see that it's

00:12:26,870 --> 00:12:33,110
sunny it's a tree you can see the

00:12:30,079 --> 00:12:35,149
physical nature behind the painting then

00:12:33,110 --> 00:12:37,279
you can move to medium abstraction and

00:12:35,149 --> 00:12:40,130
you can still see there is a tree but

00:12:37,279 --> 00:12:42,800
it's more abstracted tree the structure

00:12:40,130 --> 00:12:44,810
suggests a tree but it's less clear it's

00:12:42,800 --> 00:12:47,540
getting farther from the physical

00:12:44,810 --> 00:12:49,730
reality and we can do more on high

00:12:47,540 --> 00:12:51,709
abstraction there is structure and maybe

00:12:49,730 --> 00:12:54,230
only structure the physical nature

00:12:51,709 --> 00:12:56,839
disappeared there is no tree there only

00:12:54,230 --> 00:12:59,839
the nature of hierarchy that tree

00:12:56,839 --> 00:13:02,120
suggests and through abstraction we

00:12:59,839 --> 00:13:04,910
highlighted the concept of hierarchy and

00:13:02,120 --> 00:13:08,839
we got rid of the concept of 3 which is

00:13:04,910 --> 00:13:11,800
the physical nature here and those

00:13:08,839 --> 00:13:15,140
paintings are from Mondrian eventually

00:13:11,800 --> 00:13:18,380
he got into total abstraction and is

00:13:15,140 --> 00:13:23,630
probably more smart analysis because you

00:13:18,380 --> 00:13:27,139
can see things like this and too

00:13:23,630 --> 00:13:29,930
abstract in api's means that we need to

00:13:27,139 --> 00:13:33,769
get drawn away from the whole nature of

00:13:29,930 --> 00:13:37,370
things to focus on the what nature this

00:13:33,769 --> 00:13:38,810
is the the concept related to api's in

00:13:37,370 --> 00:13:41,540
abstractions

00:13:38,810 --> 00:13:44,840
practice here's our example salary

00:13:41,540 --> 00:13:47,690
salary is a great API because it solves

00:13:44,840 --> 00:13:49,850
the problems of background tasks and the

00:13:47,690 --> 00:13:52,940
implementation involves that skew is

00:13:49,850 --> 00:13:55,580
workers methods brokers sterilization

00:13:52,940 --> 00:13:58,100
lots of stuff that we don't need to care

00:13:55,580 --> 00:14:01,339
much about when you are writing your own

00:13:58,100 --> 00:14:03,110
tasks you can just say app desk and it

00:14:01,339 --> 00:14:04,940
dissolves it

00:14:03,110 --> 00:14:06,800
salaries abstracting out the

00:14:04,940 --> 00:14:09,410
implementation it's not focusing on how

00:14:06,800 --> 00:14:10,760
its focusing on what what do you want

00:14:09,410 --> 00:14:13,930
you want the tasks okay

00:14:10,760 --> 00:14:17,470
just use this decoration and you have it

00:14:13,930 --> 00:14:20,240
beautiful soap is also a great API its

00:14:17,470 --> 00:14:23,600
support selecting HTML down elements

00:14:20,240 --> 00:14:26,270
with CSS and you can just use HTML soap

00:14:23,600 --> 00:14:28,880
select and you are done you just need to

00:14:26,270 --> 00:14:34,130
say what you want you don't need to say

00:14:28,880 --> 00:14:37,900
how you want pillow is also maybe not a

00:14:34,130 --> 00:14:40,670
great API but a good one because it

00:14:37,900 --> 00:14:43,430
allows you to rotate images and do some

00:14:40,670 --> 00:14:47,000
stuff with images without caring about

00:14:43,430 --> 00:14:52,010
linear algebra you just do a rotate and

00:14:47,000 --> 00:14:54,470
it's done what is what matters here what

00:14:52,010 --> 00:14:57,410
do you want you want to rotate okay how

00:14:54,470 --> 00:15:01,820
do you do it pillow will do it for you

00:14:57,410 --> 00:15:05,120
and here we learned that abstractions

00:15:01,820 --> 00:15:07,310
enable brief brevity good abstractions

00:15:05,120 --> 00:15:11,060
reduce the claw de-clutter good

00:15:07,310 --> 00:15:12,980
abstractions reduce the verbosity okay

00:15:11,060 --> 00:15:14,930
but not everything is beautiful about

00:15:12,980 --> 00:15:17,270
abstractions there's a thing called the

00:15:14,930 --> 00:15:20,450
law of leaky abstractions and it says

00:15:17,270 --> 00:15:23,000
all abstractions leak back to sorry

00:15:20,450 --> 00:15:24,050
unfortunately I lied when I told you

00:15:23,000 --> 00:15:27,050
that you don't need to care about

00:15:24,050 --> 00:15:28,400
workers and everything because workers

00:15:27,050 --> 00:15:30,920
can crash

00:15:28,400 --> 00:15:35,209
this happened at veinte we made a deploy

00:15:30,920 --> 00:15:37,250
that stopped its salary just when that

00:15:35,209 --> 00:15:42,950
task was running and we got this crash

00:15:37,250 --> 00:15:45,380
error and because this exceptional

00:15:42,950 --> 00:15:46,790
condition broke the worker we need to

00:15:45,380 --> 00:15:48,830
carry about the implementation because

00:15:46,790 --> 00:15:51,410
the implementation needs to needs to run

00:15:48,830 --> 00:15:53,209
the task again so our task needs to act

00:15:51,410 --> 00:15:55,190
late

00:15:53,209 --> 00:15:58,010
that means that they need to tell that

00:15:55,190 --> 00:16:01,610
they worked properly after they are done

00:15:58,010 --> 00:16:03,890
but we also needed a patent tasks so the

00:16:01,610 --> 00:16:07,250
worker can run the task again without

00:16:03,890 --> 00:16:09,019
causing side effects and because of

00:16:07,250 --> 00:16:12,079
these because of the nature of the

00:16:09,019 --> 00:16:14,180
worker the abstraction likud we needed

00:16:12,079 --> 00:16:16,790
to care about how it works on the

00:16:14,180 --> 00:16:20,930
implementation side we are not just on

00:16:16,790 --> 00:16:22,490
the web side now and it's impossible to

00:16:20,930 --> 00:16:24,500
abstract perfectly because other

00:16:22,490 --> 00:16:27,560
obstructions are lying they are hiding

00:16:24,500 --> 00:16:30,680
the physical nature and sometimes these

00:16:27,560 --> 00:16:32,420
leaks are even necessary complex is

00:16:30,680 --> 00:16:34,550
better than complicated let's remember

00:16:32,420 --> 00:16:36,709
that from the zen of python and it's

00:16:34,550 --> 00:16:41,380
better to embrace complexity then

00:16:36,709 --> 00:16:45,500
creating complicated so situations

00:16:41,380 --> 00:16:47,360
classical example is RPC RPC abstracts a

00:16:45,500 --> 00:16:50,180
lot but it creates complicated

00:16:47,360 --> 00:16:53,600
situations you can for example get a

00:16:50,180 --> 00:16:56,920
facebook profile and set the name but if

00:16:53,600 --> 00:16:59,630
another user do something why why you

00:16:56,920 --> 00:17:02,000
getting a profile setting the name you

00:16:59,630 --> 00:17:04,910
have a conflict because here you are

00:17:02,000 --> 00:17:07,520
pretending that servers and clients that

00:17:04,910 --> 00:17:10,130
these British systems work just like a

00:17:07,520 --> 00:17:13,339
local system but they don't this British

00:17:10,130 --> 00:17:16,610
systems create conflicts and it's better

00:17:13,339 --> 00:17:19,490
than using this kind of API using a more

00:17:16,610 --> 00:17:21,799
restful api i api that embraces the

00:17:19,490 --> 00:17:24,260
complexity between the client and the

00:17:21,799 --> 00:17:27,230
server and rest does that and it

00:17:24,260 --> 00:17:30,100
supports this with if unmodified things

00:17:27,230 --> 00:17:32,630
and now you can have a operation that

00:17:30,100 --> 00:17:35,059
prevents conflicts because it won't

00:17:32,630 --> 00:17:40,870
modify something if it was a ready mode

00:17:35,059 --> 00:17:44,660
file so RPC is like trying to explaining

00:17:40,870 --> 00:17:46,820
relativity or quantum mechanics for a 8

00:17:44,660 --> 00:17:49,010
year old kid you just can't do that you

00:17:46,820 --> 00:17:53,090
can simplify this stuff because it's so

00:17:49,010 --> 00:17:54,950
far away from the regular physical

00:17:53,090 --> 00:17:57,080
reality that you can't simplify it

00:17:54,950 --> 00:18:01,520
sometimes it's better to embrace the

00:17:57,080 --> 00:18:04,070
complexity still simplicity the third

00:18:01,520 --> 00:18:06,360
and last idea to make it real is to make

00:18:04,070 --> 00:18:09,120
it pythonic

00:18:06,360 --> 00:18:11,519
and being pythonic has everything to do

00:18:09,120 --> 00:18:14,460
with the principle of recognition rather

00:18:11,519 --> 00:18:15,630
than recall because pythonic api's look

00:18:14,460 --> 00:18:18,120
like each other

00:18:15,630 --> 00:18:21,330
you wouldn't want in a user interface

00:18:18,120 --> 00:18:24,510
that control-c meant something else then

00:18:21,330 --> 00:18:26,820
copy in the same way you have to follow

00:18:24,510 --> 00:18:29,580
Python patterns by two idioms when

00:18:26,820 --> 00:18:33,299
building your api's you need to do what

00:18:29,580 --> 00:18:34,919
is natural to do in Python for example

00:18:33,299 --> 00:18:38,880
there is a change that happen in config

00:18:34,919 --> 00:18:41,100
parser from python 2 to 3 which is get

00:18:38,880 --> 00:18:44,100
an options value from the name it

00:18:41,100 --> 00:18:46,169
section that's the use case and in

00:18:44,100 --> 00:18:48,690
Python 2 you needed to do that with

00:18:46,169 --> 00:18:50,850
parcel yet and you pass the section then

00:18:48,690 --> 00:18:54,000
you pass the option the key that you

00:18:50,850 --> 00:18:56,970
want but this API is not natural to

00:18:54,000 --> 00:18:58,169
Python because digs don't work like that

00:18:56,970 --> 00:19:01,289
on disk

00:18:58,169 --> 00:19:04,200
the second value of get is the default

00:19:01,289 --> 00:19:07,049
value and the first one is the key so a

00:19:04,200 --> 00:19:09,600
user might think that parsad get works

00:19:07,049 --> 00:19:12,659
like a dict but it doesn't and in Python

00:19:09,600 --> 00:19:18,179
3 that Judas was solved by having a dick

00:19:12,659 --> 00:19:20,880
like interface on the config parser okay

00:19:18,179 --> 00:19:24,840
enough of simplicity let's talk now

00:19:20,880 --> 00:19:28,559
about flexibility we talked about what

00:19:24,840 --> 00:19:32,039
makes the 9 percent simple but what

00:19:28,559 --> 00:19:35,039
makes the 10 percent possible one of the

00:19:32,039 --> 00:19:39,809
main problems we face in API flexibility

00:19:35,039 --> 00:19:41,820
is the integration discontinuity and to

00:19:39,809 --> 00:19:44,190
explain integration discontinuity we

00:19:41,820 --> 00:19:46,559
must think about options of integration

00:19:44,190 --> 00:19:48,960
when you are looking for a library to

00:19:46,559 --> 00:19:52,399
solve a problem you have multiple

00:19:48,960 --> 00:19:56,010
options of integrating it in not your

00:19:52,399 --> 00:19:59,429
program you are on a Soviet state and

00:19:56,010 --> 00:20:01,769
now you have three options to solve the

00:19:59,429 --> 00:20:04,110
problem you have you can just use the

00:20:01,769 --> 00:20:06,120
exact solution you need then you move to

00:20:04,110 --> 00:20:08,039
the Soviet state you can use a more

00:20:06,120 --> 00:20:10,080
complicated solution that will be is

00:20:08,039 --> 00:20:13,559
likely over queue in that same library

00:20:10,080 --> 00:20:16,049
and you can use like a low-level API

00:20:13,559 --> 00:20:19,740
from the same library that would be way

00:20:16,049 --> 00:20:22,470
over queue and you probably should

00:20:19,740 --> 00:20:25,950
try this and this is actually good

00:20:22,470 --> 00:20:29,010
because what is Soviet for you might be

00:20:25,950 --> 00:20:30,840
over Q from other user what is over Q

00:20:29,010 --> 00:20:33,380
for the user might be exactly what you

00:20:30,840 --> 00:20:35,550
need to solve the problem so to have

00:20:33,380 --> 00:20:38,309
multiple options of integration is

00:20:35,550 --> 00:20:40,170
actually good and discontinuity is when

00:20:38,309 --> 00:20:42,600
you don't have these mod portions of

00:20:40,170 --> 00:20:44,309
integration when you just have on Soviet

00:20:42,600 --> 00:20:49,500
state and then if you use the library

00:20:44,309 --> 00:20:51,360
you are on a way over Q State and to

00:20:49,500 --> 00:20:55,230
prevent that we need to increase the

00:20:51,360 --> 00:20:57,210
granularity of the API and to increase

00:20:55,230 --> 00:21:02,280
the granularity we need to separate the

00:20:57,210 --> 00:21:05,970
concerns for example you can have a

00:21:02,280 --> 00:21:09,690
print formatted a function that prints

00:21:05,970 --> 00:21:12,480
hello world into red and both okay then

00:21:09,690 --> 00:21:15,690
I use it games API user came to say hey

00:21:12,480 --> 00:21:18,660
my my out is not the standard output

00:21:15,690 --> 00:21:20,490
I want to out these to some other output

00:21:18,660 --> 00:21:23,610
and then you think okay then

00:21:20,490 --> 00:21:25,920
I will add a parameter out for that but

00:21:23,610 --> 00:21:28,470
that's not the best solution because

00:21:25,920 --> 00:21:30,570
print formatted is not a single concern

00:21:28,470 --> 00:21:33,210
it's two concerns inside a single

00:21:30,570 --> 00:21:35,420
function so the best option would be to

00:21:33,210 --> 00:21:38,160
break bring formatted into print and

00:21:35,420 --> 00:21:42,720
formatted functions now you have a more

00:21:38,160 --> 00:21:44,520
flexible and more granular API another

00:21:42,720 --> 00:21:48,780
thing that helps granularity is the

00:21:44,520 --> 00:21:50,370
multiple levels of abstractions as we

00:21:48,780 --> 00:21:53,700
see me salary supports a high level

00:21:50,370 --> 00:21:55,590
abstraction for tasks but it also

00:21:53,700 --> 00:22:00,540
includes a low level API that you can

00:21:55,590 --> 00:22:04,230
inherit from tasks and you can do more

00:22:00,540 --> 00:22:06,630
configure config on it this means that

00:22:04,230 --> 00:22:09,540
it's flexible 90% of the users can just

00:22:06,630 --> 00:22:11,429
use the decorator but the other 10% can

00:22:09,540 --> 00:22:12,050
use custom classes for tasks and

00:22:11,429 --> 00:22:14,460
everything

00:22:12,050 --> 00:22:18,240
other idea is to increase the

00:22:14,460 --> 00:22:20,040
opportunities for extension but there is

00:22:18,240 --> 00:22:22,740
one thing that is called the mock patch

00:22:20,040 --> 00:22:24,630
smell that every mock patch is a method

00:22:22,740 --> 00:22:28,410
option of integration that's about

00:22:24,630 --> 00:22:30,840
statement ok but let's see why look for

00:22:28,410 --> 00:22:33,210
match mock patch in your test what they

00:22:30,840 --> 00:22:36,270
do they are basically a monkey fetch but

00:22:33,210 --> 00:22:39,000
in tests so here you have a scheduler

00:22:36,270 --> 00:22:42,390
that has some delay and we will execute

00:22:39,000 --> 00:22:45,720
a task after diesel a and to touch this

00:22:42,390 --> 00:22:48,750
you need to mark this leap because you

00:22:45,720 --> 00:22:51,120
don't want to wait 10 seconds just to

00:22:48,750 --> 00:22:56,370
test this so you have to mark at the

00:22:51,120 --> 00:22:58,620
time sleep with custom sleep but if you

00:22:56,370 --> 00:23:01,980
are mocking on your test maybe your

00:22:58,620 --> 00:23:05,340
clients will need to monkey patch when

00:23:01,980 --> 00:23:07,110
they are using the API and schedule

00:23:05,340 --> 00:23:11,130
iPhone fight on recognize that and

00:23:07,110 --> 00:23:14,370
support time funk and delay funk so you

00:23:11,130 --> 00:23:17,430
can just pass custom sleep - scheduler

00:23:14,370 --> 00:23:19,740
and then it will work with this it's

00:23:17,430 --> 00:23:21,900
like dependency injections with just

00:23:19,740 --> 00:23:24,330
high order functions and this is good

00:23:21,900 --> 00:23:26,340
this is fine because you are preventing

00:23:24,330 --> 00:23:30,060
users to monkey patch if they want some

00:23:26,340 --> 00:23:32,300
custom behavior there's others male

00:23:30,060 --> 00:23:36,330
that's the attribute vessels methods now

00:23:32,300 --> 00:23:38,460
and we can see example of that in that

00:23:36,330 --> 00:23:42,480
change that happened in Django rest

00:23:38,460 --> 00:23:44,880
framework on Porsche pagination users

00:23:42,480 --> 00:23:47,910
were requiring that page size could be

00:23:44,880 --> 00:23:50,190
could vary according to the request but

00:23:47,910 --> 00:23:53,360
this was impossible because the page

00:23:50,190 --> 00:23:56,460
size was affixed attribute from the

00:23:53,360 --> 00:23:58,980
cursor pagination and this was fix it by

00:23:56,460 --> 00:24:02,250
introducing a method a new method that

00:23:58,980 --> 00:24:04,140
which is get face size and here's the

00:24:02,250 --> 00:24:06,020
issue related to this so we need to take

00:24:04,140 --> 00:24:08,580
care about if you should have a

00:24:06,020 --> 00:24:11,120
attribute or maybe a method that

00:24:08,580 --> 00:24:14,610
generates that attribute this will allow

00:24:11,120 --> 00:24:17,940
more flexibility more options of

00:24:14,610 --> 00:24:22,830
integration and finally we need to be

00:24:17,940 --> 00:24:25,110
photonic and one thing that very

00:24:22,830 --> 00:24:27,210
controversial but I think it's a good

00:24:25,110 --> 00:24:30,510
way to think that design patterns are a

00:24:27,210 --> 00:24:33,360
missing language features if you are

00:24:30,510 --> 00:24:35,580
having to do design patterns it may be

00:24:33,360 --> 00:24:38,550
because your library your language

00:24:35,580 --> 00:24:40,860
doesn't supports many features that it

00:24:38,550 --> 00:24:44,010
should have for example adapter pattern

00:24:40,860 --> 00:24:46,980
no in Python don't do that just use duck

00:24:44,010 --> 00:24:48,299
typing with duck typing and easier

00:24:46,980 --> 00:24:51,480
to ask for forgiveness than permission

00:24:48,299 --> 00:24:55,470
we can avoid building adapters you can

00:24:51,480 --> 00:24:57,780
just call and if it gets an error you

00:24:55,470 --> 00:25:00,210
can catch that error and raise a type

00:24:57,780 --> 00:25:01,919
error okay but you should just call you

00:25:00,210 --> 00:25:04,770
should accept the objects that the

00:25:01,919 --> 00:25:07,410
client passes to you exception from that

00:25:04,770 --> 00:25:11,460
is abstract base classes which you can

00:25:07,410 --> 00:25:14,700
see more on this pap and here is our

00:25:11,460 --> 00:25:17,250
example the Django avatar supports

00:25:14,700 --> 00:25:20,640
custom providers and the provider is

00:25:17,250 --> 00:25:25,260
really adapter it adapts the Facebook

00:25:20,640 --> 00:25:28,650
API in this case to to the get avatar

00:25:25,260 --> 00:25:32,100
URL that's the API that Django avatar

00:25:28,650 --> 00:25:35,340
supports and Jing what that doesn't care

00:25:32,100 --> 00:25:37,710
about the type of your provider it just

00:25:35,340 --> 00:25:40,320
calls it and past the user and the size

00:25:37,710 --> 00:25:43,080
and you can just define any class you

00:25:40,320 --> 00:25:45,660
want to adapt this behavior to the API

00:25:43,080 --> 00:25:48,299
you are using and this is good this

00:25:45,660 --> 00:25:52,320
means that it's respecting the typing

00:25:48,299 --> 00:25:54,809
and it's flexible and other thing is the

00:25:52,320 --> 00:25:57,540
strategy pattern forget it just use high

00:25:54,809 --> 00:26:00,929
order functions for example in Python

00:25:57,540 --> 00:26:03,559
the sort the list sort except sake

00:26:00,929 --> 00:26:06,320
that gives the strategy to sort the list

00:26:03,559 --> 00:26:09,120
but in Java for example you have to

00:26:06,320 --> 00:26:11,160
inherit from comparator to create an

00:26:09,120 --> 00:26:15,120
adapter and everything to create a

00:26:11,160 --> 00:26:17,340
strategy and everything and this is this

00:26:15,120 --> 00:26:20,309
is not necessary in Python just use a

00:26:17,340 --> 00:26:22,080
high order function and there's many

00:26:20,309 --> 00:26:24,270
more things to do to be pythonic you

00:26:22,080 --> 00:26:26,490
need to use properties magic methods the

00:26:24,270 --> 00:26:28,500
great alliteration and everything all of

00:26:26,490 --> 00:26:31,290
these increases flexibility all of this

00:26:28,500 --> 00:26:35,520
is good these are features from Python

00:26:31,290 --> 00:26:38,970
that make your API more flexible and to

00:26:35,520 --> 00:26:42,030
conclude well if you want to get one

00:26:38,970 --> 00:26:45,090
thing from this talk this is it that you

00:26:42,030 --> 00:26:48,480
should make an API that makes things

00:26:45,090 --> 00:26:50,850
that makes the simple easy the complex

00:26:48,480 --> 00:26:54,240
possible and the wrong impossible so

00:26:50,850 --> 00:26:57,270
this means that simplicity is the simple

00:26:54,240 --> 00:26:59,580
easy flexibility is the complex possible

00:26:57,270 --> 00:27:00,780
and consistency and safety which I

00:26:59,580 --> 00:27:03,180
didn't talk here

00:27:00,780 --> 00:27:04,590
the wrong impossible and this is

00:27:03,180 --> 00:27:08,730
basically what we need to have in mind

00:27:04,590 --> 00:27:10,680
when building our api's so that's it

00:27:08,730 --> 00:27:27,320
thank you very much feel free to reach

00:27:10,680 --> 00:27:32,130
me thank you thank you video we have

00:27:27,320 --> 00:27:42,870
time for a question or two if anybody

00:27:32,130 --> 00:27:44,730
wants to set it up to the mic all right

00:27:42,870 --> 00:27:48,440
well let's have another round of

00:27:44,730 --> 00:27:48,440
applause here for explicitly thank you

00:27:49,820 --> 00:27:56,640
just award so in the same room that will

00:27:53,880 --> 00:28:00,350
be another talk about api's so you might

00:27:56,640 --> 00:28:00,350

YouTube URL: https://www.youtube.com/watch?v=4mkFfce46zE


