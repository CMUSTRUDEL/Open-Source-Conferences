Title: Factory Automation with Python   Stories about Robots, Serial Ports, and Barcode Readers
Publication date: 2017-05-20
Playlist: PyCon 2017
Description: 
	"Speaker: Jonas Neubert

In industrial automation _tried and tested_ always beats _latest and greatest_: The machines that make smartphones have a serial port and are configured with `.csv` files. But when your factory automates complex non-linear workflows and is jam-packed with sensors and robots, you are quickly faced with software engineering challenges that call for modern tools.

Python turns out to be surprisingly versatile in this setting, whether for prototyping a single conveyor belt or taming a building full of robots. This talk explains how to use Python for interfacing with two common industrial automation devices: a barcode scanner and a Programmable Logic Controller (PLC). After a simple demo, you’ll hear about lessons learned using Python packages that weren’t written with robots in mind, like Celery and pandas, with robots.

Slides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides"
Captions: 
	00:00:01,280 --> 00:00:06,779
good afternoon everybody welcome to our

00:00:04,110 --> 00:00:08,340
next session at PyCon 2017

00:00:06,779 --> 00:00:10,290
two brief announcements before we start

00:00:08,340 --> 00:00:12,300
firstly if you have any electronic

00:00:10,290 --> 00:00:14,280
devices that are liable to make noise

00:00:12,300 --> 00:00:15,839
please make sure that they don't because

00:00:14,280 --> 00:00:18,020
if they do everyone's going to stare at

00:00:15,839 --> 00:00:20,369
you and you're going to feel bad

00:00:18,020 --> 00:00:22,710
secondly there is a ten minute gap

00:00:20,369 --> 00:00:23,730
between presentations this is to allow

00:00:22,710 --> 00:00:25,320
people to get from one room to another

00:00:23,730 --> 00:00:27,330
so please don't feel that you need to

00:00:25,320 --> 00:00:29,670
leave the session before the end in

00:00:27,330 --> 00:00:30,929
order to get to your next one with those

00:00:29,670 --> 00:00:32,550
out of the way I would like to welcome

00:00:30,929 --> 00:00:34,170
you honest know that who will be talking

00:00:32,550 --> 00:00:35,860
about factory automation automation with

00:00:34,170 --> 00:00:42,020
Python they can feel welcomed please

00:00:35,860 --> 00:00:46,890
[Applause]

00:00:42,020 --> 00:00:50,910
let's talk about factory automation this

00:00:46,890 --> 00:00:53,730
is my title slide obviously and I did

00:00:50,910 --> 00:00:55,739
some keyword stuffing there and I put

00:00:53,730 --> 00:00:58,050
this nice stock photo of a car assembly

00:00:55,739 --> 00:01:00,390
line into the background just to make it

00:00:58,050 --> 00:01:02,190
extra clear that this talk is about

00:01:00,390 --> 00:01:03,480
factory s and building a group of

00:01:02,190 --> 00:01:06,510
buildings or goods our manufacturer to

00:01:03,480 --> 00:01:08,070
assemble chiefly by machines that's from

00:01:06,510 --> 00:01:11,070
the Oxford English Dictionary this talk

00:01:08,070 --> 00:01:12,869
is not about an interface for creating

00:01:11,070 --> 00:01:14,250
families of related or dependent objects

00:01:12,869 --> 00:01:17,130
without specifying the concrete classes

00:01:14,250 --> 00:01:19,680
which is the design pattern that we all

00:01:17,130 --> 00:01:23,700
know maybe a couple of people leaving in

00:01:19,680 --> 00:01:26,009
the back there it's okay this is also an

00:01:23,700 --> 00:01:26,820
example of how the field of software

00:01:26,009 --> 00:01:29,780
development

00:01:26,820 --> 00:01:31,799
sometimes borrows or maybe steals

00:01:29,780 --> 00:01:35,729
terminology from other fields of

00:01:31,799 --> 00:01:39,060
engineering funny story I got my job

00:01:35,729 --> 00:01:43,049
title stolen this way I write software

00:01:39,060 --> 00:01:44,579
for factories and a couple years ago I

00:01:43,049 --> 00:01:45,899
could say hey I'm an automation engineer

00:01:44,579 --> 00:01:48,689
people would understand what I'm doing

00:01:45,899 --> 00:01:52,290
then a DevOps crowd came along and it

00:01:48,689 --> 00:01:56,040
claimed that word for themselves in fact

00:01:52,290 --> 00:01:58,979
I think that this lack of clear

00:01:56,040 --> 00:02:01,290
terminology and job titles is one of the

00:01:58,979 --> 00:02:03,869
reasons that industrial automation is

00:02:01,290 --> 00:02:05,040
not as prominent on people's minds when

00:02:03,869 --> 00:02:06,930
they think about where they can apply

00:02:05,040 --> 00:02:09,690
their software development skills as

00:02:06,930 --> 00:02:12,000
like the hot topics like web development

00:02:09,690 --> 00:02:13,560
and data science so this is what this

00:02:12,000 --> 00:02:14,000
talk is about it's going to be a very

00:02:13,560 --> 00:02:17,150
base

00:02:14,000 --> 00:02:20,860
take introduction to the fact that you

00:02:17,150 --> 00:02:24,230
can use your Python skills in factories

00:02:20,860 --> 00:02:26,750
so a couple words about me I'm a

00:02:24,230 --> 00:02:29,090
software engineer temper automation we

00:02:26,750 --> 00:02:30,980
have a circuit board Factory in in the

00:02:29,090 --> 00:02:33,980
middle of San Francisco and we use

00:02:30,980 --> 00:02:36,020
automation there to automate the setup

00:02:33,980 --> 00:02:38,240
process of the factories so that we can

00:02:36,020 --> 00:02:41,420
send you your prototype or small batch

00:02:38,240 --> 00:02:43,280
circuit boards really fast but I've been

00:02:41,420 --> 00:02:48,380
causing downtime in other factories for

00:02:43,280 --> 00:02:49,700
many years I'm on the internet if you're

00:02:48,380 --> 00:02:51,140
sitting all the way in the back we want

00:02:49,700 --> 00:02:53,030
to follow along with the slides this is

00:02:51,140 --> 00:02:56,000
the link if you have trouble spelling my

00:02:53,030 --> 00:02:58,190
name don't worry I sometimes do - you

00:02:56,000 --> 00:03:03,520
can go to my Twitter and I just send out

00:02:58,190 --> 00:03:07,160
a link to this slide so about this talk

00:03:03,520 --> 00:03:13,040
it's my first time at PyCon and the

00:03:07,160 --> 00:03:14,480
organizers and and the organizers had a

00:03:13,040 --> 00:03:16,640
couple pieces of advice for me as a

00:03:14,480 --> 00:03:20,570
first timer one of them was don't do an

00:03:16,640 --> 00:03:24,620
on-stage live demo and I was like okay

00:03:20,570 --> 00:03:27,350
so this thing on the screen is also

00:03:24,620 --> 00:03:29,390
right here and this can be the pike on

00:03:27,350 --> 00:03:31,790
2017 chewing gum

00:03:29,390 --> 00:03:33,739
sorting Factory and we'll be using this

00:03:31,790 --> 00:03:35,030
and running this life in fact there's a

00:03:33,739 --> 00:03:37,519
webcam here that's going to like

00:03:35,030 --> 00:03:39,260
livestream onto the screens what's going

00:03:37,519 --> 00:03:41,690
on for the demo later

00:03:39,260 --> 00:03:45,950
so everyone cross your fingers because

00:03:41,690 --> 00:03:48,590
this joke might be on me so this photo

00:03:45,950 --> 00:03:50,690
this top view but I brought us a

00:03:48,590 --> 00:03:52,670
conveyer belt so it goes back and forth

00:03:50,690 --> 00:03:55,760
there's a barcode reader here the little

00:03:52,670 --> 00:03:58,519
black square with the red and white

00:03:55,760 --> 00:04:00,470
writing on it scans barcodes there's

00:03:58,519 --> 00:04:03,530
some little pusher paddles so I got a

00:04:00,470 --> 00:04:07,040
flipper machine they go like this and

00:04:03,530 --> 00:04:08,989
the other one obviously so and we'll be

00:04:07,040 --> 00:04:11,480
using those that's really all you need

00:04:08,989 --> 00:04:13,700
for for an automation demo every

00:04:11,480 --> 00:04:15,200
automation demo needs sensing so I

00:04:13,700 --> 00:04:17,840
brought you what I think is the most

00:04:15,200 --> 00:04:19,729
common sensor and any factory automated

00:04:17,840 --> 00:04:22,130
setting these days the barcode scanner

00:04:19,729 --> 00:04:23,900
next to its siblings like the

00:04:22,130 --> 00:04:25,340
temperature sensor pressure sensor

00:04:23,900 --> 00:04:27,140
different of things barcode scanner is

00:04:25,340 --> 00:04:29,130
what we are using today

00:04:27,140 --> 00:04:32,160
actuation is the second thing you need

00:04:29,130 --> 00:04:35,160
for an automation demo I wish I could

00:04:32,160 --> 00:04:36,780
have brought a robot arm but they don't

00:04:35,160 --> 00:04:39,510
travel so well in suitcases

00:04:36,780 --> 00:04:41,100
so the conveyor is what you get and

00:04:39,510 --> 00:04:42,450
brains we're just going to skim over

00:04:41,100 --> 00:04:44,370
that at the very end because we're all

00:04:42,450 --> 00:04:46,410
software developers we all know how to

00:04:44,370 --> 00:04:48,060
implement business logic and this is

00:04:46,410 --> 00:04:50,010
really an automation demo if anyone ever

00:04:48,060 --> 00:04:51,120
wants to sell you an automation demo

00:04:50,010 --> 00:04:56,220
that's missing one of those pieces

00:04:51,120 --> 00:04:58,470
return it it's a scam everyone's waiting

00:04:56,220 --> 00:05:00,210
for the first line of Python on the

00:04:58,470 --> 00:05:03,360
screen I think so let's let's dive right

00:05:00,210 --> 00:05:05,240
in this is a barcode this is the barcode

00:05:03,360 --> 00:05:08,370
scanner that's the one I brought today

00:05:05,240 --> 00:05:09,930
the left side that's very photons come

00:05:08,370 --> 00:05:12,380
shooting out that's the laser that's

00:05:09,930 --> 00:05:14,430
ruining a barcode on the right side

00:05:12,380 --> 00:05:16,290
that's where the electrons are coming

00:05:14,430 --> 00:05:18,180
out that's the data that we're

00:05:16,290 --> 00:05:20,580
interested in we want to know a barcode

00:05:18,180 --> 00:05:24,690
scanner of what did you read and it's

00:05:20,580 --> 00:05:25,890
using this protocol called rs-232 some

00:05:24,690 --> 00:05:27,690
people in this room might be too young

00:05:25,890 --> 00:05:32,010
to remember computers having serial

00:05:27,690 --> 00:05:33,750
ports rs-232 is what specifies the type

00:05:32,010 --> 00:05:35,790
of cable how long how many strands all

00:05:33,750 --> 00:05:38,070
that kind of stuff also the type of data

00:05:35,790 --> 00:05:40,440
going through it the good news is Python

00:05:38,070 --> 00:05:42,660
is old enough to remember the serial

00:05:40,440 --> 00:05:44,610
port so there there's a library to talk

00:05:42,660 --> 00:05:47,010
to the serial port in Python so this is

00:05:44,610 --> 00:05:49,740
when I flip over that totally works and

00:05:47,010 --> 00:05:51,270
so what we have here is the terminal at

00:05:49,740 --> 00:05:51,750
the top I think you've seen that sort of

00:05:51,270 --> 00:05:56,100
thing before

00:05:51,750 --> 00:05:57,270
and then this camera here so we're

00:05:56,100 --> 00:06:00,150
looking right over the shoulder of the

00:05:57,270 --> 00:06:02,700
barcode scanner this is it let's try to

00:06:00,150 --> 00:06:06,060
ask it for Parkwood so I'm just going to

00:06:02,700 --> 00:06:07,500
pip install PI serial which is the

00:06:06,060 --> 00:06:13,710
library obviously I'm prepared I had it

00:06:07,500 --> 00:06:16,290
installed right so we import serial and

00:06:13,710 --> 00:06:19,950
then we open a port if you have never

00:06:16,290 --> 00:06:24,540
opened a serial port this is what it

00:06:19,950 --> 00:06:28,280
looks like so on Windows this this would

00:06:24,540 --> 00:06:31,110
be like come one come two come three I

00:06:28,280 --> 00:06:33,180
use a USB to serial adapter that's why

00:06:31,110 --> 00:06:37,470
it's that long name it wants to know a

00:06:33,180 --> 00:06:39,280
couple of things you know the baud rate

00:06:37,470 --> 00:06:42,790
is how fast it is

00:06:39,280 --> 00:06:45,290
parody is like how the bits are

00:06:42,790 --> 00:06:49,400
positioned relative to each other kind

00:06:45,290 --> 00:06:50,990
of bite size is something I think it

00:06:49,400 --> 00:06:56,030
wants to know from us how do I know what

00:06:50,990 --> 00:07:02,240
it wants well I read the as or what that

00:06:56,030 --> 00:07:09,110
I got a type on my side I think that

00:07:02,240 --> 00:07:10,760
would have been a disaster and I'm going

00:07:09,110 --> 00:07:15,620
to ask for a timeout that's pretty long

00:07:10,760 --> 00:07:18,080
because this is a demo let's see okay so

00:07:15,620 --> 00:07:19,610
looks like we open that port and now we

00:07:18,080 --> 00:07:20,870
have to tell the barcode together or

00:07:19,610 --> 00:07:23,240
something

00:07:20,870 --> 00:07:25,540
so it's going to be in byte strings are

00:07:23,240 --> 00:07:27,860
for humans bytes are for machines easy

00:07:25,540 --> 00:07:30,560
so we're just going to send it that

00:07:27,860 --> 00:07:32,660
character did you see the laser come up

00:07:30,560 --> 00:07:34,130
on a thing it did some reading now we

00:07:32,660 --> 00:07:37,910
have to ask it hey barcodes you know

00:07:34,130 --> 00:07:45,350
what did you read read line boom that's

00:07:37,910 --> 00:07:48,110
a barcode let's try another one same

00:07:45,350 --> 00:07:51,950
thing again we read this time let's

00:07:48,110 --> 00:07:54,430
strip off that white space maybe decode

00:07:51,950 --> 00:07:56,840
that to turn it into a string for humans

00:07:54,430 --> 00:07:59,450
that's right if you don't believe me

00:07:56,840 --> 00:08:04,640
they actually print the number right

00:07:59,450 --> 00:08:07,520
next to the barcode so it is right

00:08:04,640 --> 00:08:08,960
okay so we're software developers who

00:08:07,520 --> 00:08:10,940
like to abstract things make them more

00:08:08,960 --> 00:08:12,320
modular reusable so I wrote a class that

00:08:10,940 --> 00:08:14,150
does the same thing

00:08:12,320 --> 00:08:15,770
just open the port I'm doing it a little

00:08:14,150 --> 00:08:17,450
abbreviated on that slide because I

00:08:15,770 --> 00:08:20,000
don't have enough space on the slide

00:08:17,450 --> 00:08:21,170
here reading barcodes just what we just

00:08:20,000 --> 00:08:22,880
did we sent the trigger

00:08:21,170 --> 00:08:25,100
we're eagle-eyed we clean it up we

00:08:22,880 --> 00:08:27,070
return it with these things when you

00:08:25,100 --> 00:08:29,510
write instrument drivers here's a trick

00:08:27,070 --> 00:08:31,760
make them context managers because that

00:08:29,510 --> 00:08:33,080
way if your code that Adam that does

00:08:31,760 --> 00:08:35,930
something with the barcode of distress

00:08:33,080 --> 00:08:38,270
has an exception cleans up after itself

00:08:35,930 --> 00:08:40,220
closes that port especially on Windows

00:08:38,270 --> 00:08:42,560
it can be a bit of a pain having a

00:08:40,220 --> 00:08:46,070
program hugging that that port that's

00:08:42,560 --> 00:08:48,230
that's crashed so it's just try if this

00:08:46,070 --> 00:08:51,670
works and I'm just going to copy that

00:08:48,230 --> 00:08:53,260
right over here paste it in

00:08:51,670 --> 00:08:54,670
I'm gonna call this the emissary that's

00:08:53,260 --> 00:08:58,510
the name of the instrument that I'm

00:08:54,670 --> 00:09:02,290
using barcode reader driver gonna give

00:08:58,510 --> 00:09:07,030
it that annoying name again and then we

00:09:02,290 --> 00:09:08,830
just to read a barcode oh there's no

00:09:07,030 --> 00:09:16,830
barcode there I wonder what it's going

00:09:08,830 --> 00:09:21,430
to do now oh no worry okay there we go

00:09:16,830 --> 00:09:23,200
so that's cool instrument driver 15

00:09:21,430 --> 00:09:31,570
lines of Python we are automation

00:09:23,200 --> 00:09:33,910
engineers now couple of caveats zero

00:09:31,570 --> 00:09:35,500
cables are only up to 15 meters long if

00:09:33,910 --> 00:09:36,550
you have a big factory you don't wanna

00:09:35,500 --> 00:09:38,050
have your server that's running the

00:09:36,550 --> 00:09:39,700
business logic right in the middle there

00:09:38,050 --> 00:09:42,310
you want it off to the side maybe

00:09:39,700 --> 00:09:44,050
somewhere else in the world also you'll

00:09:42,310 --> 00:09:46,780
be using lots of these things because

00:09:44,050 --> 00:09:49,840
this is the toy factory like Tyson toy

00:09:46,780 --> 00:09:51,790
example a real toy factory will have

00:09:49,840 --> 00:09:53,980
hundreds of barcode readers you won't

00:09:51,790 --> 00:09:57,010
find a server to plug them on so it

00:09:53,980 --> 00:10:00,910
would sure be nice if we could read that

00:09:57,010 --> 00:10:02,620
barcode over the network and and you

00:10:00,910 --> 00:10:05,370
know how Python gets advertised less

00:10:02,620 --> 00:10:09,100
like comes with batteries included well

00:10:05,370 --> 00:10:11,440
this is this is one of the ones the best

00:10:09,100 --> 00:10:13,000
batteries in Python but in Python I

00:10:11,440 --> 00:10:14,170
think it comes with this cool library

00:10:13,000 --> 00:10:17,050
xml-rpc

00:10:14,170 --> 00:10:18,730
that's in the standard library XML you

00:10:17,050 --> 00:10:21,340
guys know what that is RPC remote

00:10:18,730 --> 00:10:23,470
procedure call and what it does is it

00:10:21,340 --> 00:10:24,970
wraps our class that which is road while

00:10:23,470 --> 00:10:28,030
could read a driver and a little bit of

00:10:24,970 --> 00:10:29,590
setup code and runs it as a server on

00:10:28,030 --> 00:10:30,160
the network I'm going to show you how

00:10:29,590 --> 00:10:33,220
that works

00:10:30,160 --> 00:10:34,840
paste that in again it's not returning

00:10:33,220 --> 00:10:37,090
because we told it to surf forever so

00:10:34,840 --> 00:10:43,120
it's stuck in a loop let's open up a new

00:10:37,090 --> 00:10:50,070
shell i python from xml-rpc this time

00:10:43,120 --> 00:10:50,070
we've got the client import server proxy

00:10:50,850 --> 00:10:55,360
so it's going to be on localhost

00:10:53,380 --> 00:10:59,690
obviously anyone remember the port we

00:10:55,360 --> 00:11:02,330
use 21.1 that's right

00:10:59,690 --> 00:11:05,870
one person still paying attention read

00:11:02,330 --> 00:11:11,000
barcode read barcode was the was was a

00:11:05,870 --> 00:11:13,640
function on the class few Road and over

00:11:11,000 --> 00:11:17,030
the network so now we could have done

00:11:13,640 --> 00:11:20,890
this we could have done this from

00:11:17,030 --> 00:11:20,890
anywhere in the world read this barcode

00:11:23,440 --> 00:11:29,210
that's pretty cool so let's just recap

00:11:25,850 --> 00:11:30,980
what we achieved so far so first of all

00:11:29,210 --> 00:11:32,180
I hope I managed to communicate that

00:11:30,980 --> 00:11:36,470
there is such a thing as industrial

00:11:32,180 --> 00:11:37,910
automation equipment we saw that Python

00:11:36,470 --> 00:11:39,920
works fine for interfacing with it in

00:11:37,910 --> 00:11:42,230
fact pure Python we use pi0 it's a

00:11:39,920 --> 00:11:42,980
Python only library knows he extensions

00:11:42,230 --> 00:11:46,640
or anything in there

00:11:42,980 --> 00:11:49,220
and our code was like fifteen lines in

00:11:46,640 --> 00:11:52,100
fact but pythons batteries are really

00:11:49,220 --> 00:11:53,420
useful for industrial automation even

00:11:52,100 --> 00:11:57,050
though they were probably not written

00:11:53,420 --> 00:11:59,600
with industrial automation in mind and I

00:11:57,050 --> 00:12:01,220
would actually argue that the results

00:11:59,600 --> 00:12:03,260
that we can achieve with these tools are

00:12:01,220 --> 00:12:05,630
often more elegant and efficient than

00:12:03,260 --> 00:12:08,210
what's documented or recommended by the

00:12:05,630 --> 00:12:09,890
vendors because turns out for this

00:12:08,210 --> 00:12:16,790
barcode scanner that's more than twenty

00:12:09,890 --> 00:12:19,040
lines of code of each is rode cool so

00:12:16,790 --> 00:12:23,810
we've got sensing covered we talked to a

00:12:19,040 --> 00:12:26,150
barcode reader in fact I'm skipping some

00:12:23,810 --> 00:12:28,220
slides here so we're going to go back

00:12:26,150 --> 00:12:29,930
and just get this ready what I was going

00:12:28,220 --> 00:12:31,610
to say in those slides is that it does

00:12:29,930 --> 00:12:33,740
make sense when you work with the device

00:12:31,610 --> 00:12:34,580
to maybe publish the package on PI pi

00:12:33,740 --> 00:12:36,500
which is what I did

00:12:34,580 --> 00:12:38,600
it's called micro scan I like the

00:12:36,500 --> 00:12:42,890
company that makes these things and I'm

00:12:38,600 --> 00:12:43,460
going to use a sorry maybe exit out of

00:12:42,890 --> 00:12:45,290
here first

00:12:43,460 --> 00:12:47,780
I'm just going to use what I wrote in

00:12:45,290 --> 00:12:49,460
that library it there's no rocket

00:12:47,780 --> 00:12:51,650
science in there it just deals with like

00:12:49,460 --> 00:12:53,690
this reads and things like that better

00:12:51,650 --> 00:12:56,060
so I want to use that for the demo we've

00:12:53,690 --> 00:12:57,740
got coming up later but back to the

00:12:56,060 --> 00:13:06,100
presentation sorry for the information

00:12:57,740 --> 00:13:09,699
and let's move on to actuation so what

00:13:06,100 --> 00:13:11,110
what is this conveyor belt and this is

00:13:09,699 --> 00:13:13,209
kind of the documentation you get with

00:13:11,110 --> 00:13:15,699
it it's like this box with all the

00:13:13,209 --> 00:13:17,380
cables this is kind of the API Docs of

00:13:15,699 --> 00:13:20,170
that thing

00:13:17,380 --> 00:13:22,209
just in case it's not clear that's a

00:13:20,170 --> 00:13:24,339
black cable white cable these are

00:13:22,209 --> 00:13:27,279
physical cables and they've on voltages

00:13:24,339 --> 00:13:30,279
5 0 to 5 volts to control the speed of

00:13:27,279 --> 00:13:31,959
the conveyor nobody wrote a python

00:13:30,279 --> 00:13:35,290
library for that sort of stuff because

00:13:31,959 --> 00:13:37,509
your computer can output those so I'm

00:13:35,290 --> 00:13:38,920
actually going to use this slide to

00:13:37,509 --> 00:13:42,480
introduce you to the most important cast

00:13:38,920 --> 00:13:46,660
member of every factory out there the

00:13:42,480 --> 00:13:48,490
programmable logic controller I know

00:13:46,660 --> 00:13:50,829
called PLC maybe you've heard about it

00:13:48,490 --> 00:13:53,259
not this is what I look like if you work

00:13:50,829 --> 00:13:55,540
in a real factory your controls engineer

00:13:53,259 --> 00:13:57,040
will tell you what's running in the

00:13:55,540 --> 00:13:59,440
factory what it's doing what variables

00:13:57,040 --> 00:14:01,720
are in and all that if you just build a

00:13:59,440 --> 00:14:03,399
little demo setup for PyCon you are your

00:14:01,720 --> 00:14:05,680
own controls engineer you go to ebay

00:14:03,399 --> 00:14:07,509
because ebay is where factories are

00:14:05,680 --> 00:14:10,750
going to factory dies the PLC's go to

00:14:07,509 --> 00:14:15,009
ebay and that's very good what is in

00:14:10,750 --> 00:14:16,540
there to the left side the same with the

00:14:15,009 --> 00:14:18,639
heatsink that's an industrial PC

00:14:16,540 --> 00:14:21,699
industrial means it's very rugged and

00:14:18,639 --> 00:14:23,350
low powered usually and it's running a

00:14:21,699 --> 00:14:24,970
simple OS depending on the vendor it

00:14:23,350 --> 00:14:26,949
might be a proprietary one this one's

00:14:24,970 --> 00:14:28,240
running Windows CE the magic thing and

00:14:26,949 --> 00:14:30,100
there is a real-time kernel that's

00:14:28,240 --> 00:14:32,230
running a little piece of software at

00:14:30,100 --> 00:14:34,089
guaranteed time intervals over and over

00:14:32,230 --> 00:14:37,779
and over again and you program it in a

00:14:34,089 --> 00:14:41,439
family of languages called IEC 611 31

00:14:37,779 --> 00:14:44,769
which is pretty ancient and kind of

00:14:41,439 --> 00:14:47,589
funny on the Left fire on the right side

00:14:44,769 --> 00:14:49,660
we've got these IO slices you buy those

00:14:47,589 --> 00:14:51,040
this is the 5 volt one for the speed

00:14:49,660 --> 00:14:53,560
output this is the one for the digital

00:14:51,040 --> 00:14:56,470
one which is I kind of slide them into

00:14:53,560 --> 00:14:58,420
each other slide them into your PLC and

00:14:56,470 --> 00:14:59,920
you've got a configure PLC you can mix

00:14:58,420 --> 00:15:01,689
and match them this is what the code

00:14:59,920 --> 00:15:03,720
looks like this is a language called

00:15:01,689 --> 00:15:06,189
structured text

00:15:03,720 --> 00:15:08,230
don't worry understanding all the

00:15:06,189 --> 00:15:10,089
details the interesting bit is these

00:15:08,230 --> 00:15:12,189
variables up here those are bound to an

00:15:10,089 --> 00:15:15,069
actual physical output voltage that's

00:15:12,189 --> 00:15:17,559
getting switched and even better these

00:15:15,069 --> 00:15:19,920
ones are writable over the ethernet so

00:15:17,559 --> 00:15:22,060
that's what we are after

00:15:19,920 --> 00:15:25,300
every PLC vendor has a different

00:15:22,060 --> 00:15:27,520
protocol all the ones I looked up like

00:15:25,300 --> 00:15:30,070
you know cement and alike there are

00:15:27,520 --> 00:15:32,860
packages available for Python same for

00:15:30,070 --> 00:15:35,350
this one the vendor uses a protocol

00:15:32,860 --> 00:15:38,350
called ADF to make these variables

00:15:35,350 --> 00:15:40,120
accessible over the network multiple

00:15:38,350 --> 00:15:42,640
options out there is one on pi pi that's

00:15:40,120 --> 00:15:45,010
called pi ADF that's wrapping the C

00:15:42,640 --> 00:15:47,470
library I'm kind of a fan of pure Python

00:15:45,010 --> 00:15:51,370
because it's more portable so Chris

00:15:47,470 --> 00:15:55,089
vitamin is published one called also pi

00:15:51,370 --> 00:15:57,850
ADF kind of name flash there and then my

00:15:55,089 --> 00:15:59,230
former colleagues at Council I put some

00:15:57,850 --> 00:16:01,960
pressure on them because pythons coming

00:15:59,230 --> 00:16:04,630
up they just open sourced the the fork

00:16:01,960 --> 00:16:06,460
of that which is kept with more variable

00:16:04,630 --> 00:16:11,520
types and things so we'll be using this

00:16:06,460 --> 00:16:15,450
council PI ADF library in this demo so

00:16:11,520 --> 00:16:17,980
let's see what we can do with that

00:16:15,450 --> 00:16:20,589
there's a lot of boilerplate to set up

00:16:17,980 --> 00:16:23,440
the connection similar to serial to the

00:16:20,589 --> 00:16:25,690
serial port here there is a security

00:16:23,440 --> 00:16:28,089
layer because if anyone can write those

00:16:25,690 --> 00:16:30,220
variables over a network you know like

00:16:28,089 --> 00:16:31,630
maybe your uranium centrifuges suddenly

00:16:30,220 --> 00:16:32,589
start running too fast or things like

00:16:31,630 --> 00:16:39,190
that

00:16:32,589 --> 00:16:43,000
we don't want that so what we're going

00:16:39,190 --> 00:16:44,110
to do is we copy that so this is

00:16:43,000 --> 00:16:46,530
basically going to set up the connection

00:16:44,110 --> 00:16:49,890
set this conveyor on variable to true

00:16:46,530 --> 00:16:52,690
which should switch the conveyor on

00:16:49,890 --> 00:16:54,700
paste that in just one little thing I'm

00:16:52,690 --> 00:16:58,440
doing here I'm going to switch the

00:16:54,700 --> 00:17:02,760
camera over so that you all can see the

00:16:58,440 --> 00:17:02,760
entire thing let's see

00:17:10,800 --> 00:17:15,520
here we go

00:17:12,720 --> 00:17:17,380
ducky sitting on the conveyor belt and

00:17:15,520 --> 00:17:20,280
switches on oh it's moving now it's up

00:17:17,380 --> 00:17:20,280
to me to save ducky

00:17:26,560 --> 00:17:30,000
[Applause]

00:17:31,940 --> 00:17:36,980
I'm telling you typing on this podium is

00:17:34,560 --> 00:17:36,980
hard

00:17:37,470 --> 00:17:42,390
let's put duckie back on there a couple

00:17:39,270 --> 00:17:45,960
of other variables who can write let's

00:17:42,390 --> 00:17:47,570
say we want to reverse it I want to

00:17:45,960 --> 00:17:54,120
reverse it I want to go the other way

00:17:47,570 --> 00:17:57,450
true this one called speed that's a

00:17:54,120 --> 00:18:04,340
integer and it's between zero and a

00:17:57,450 --> 00:18:10,080
hundred and I like a hundred okay

00:18:04,340 --> 00:18:24,300
everyone say goodbye to ducky oh no it's

00:18:10,080 --> 00:18:29,550
not oh thank you I actually brought

00:18:24,300 --> 00:18:31,470
another ducky okay so you might be

00:18:29,550 --> 00:18:33,570
asking like what is Python there's code

00:18:31,470 --> 00:18:36,150
running on the scale see what's going on

00:18:33,570 --> 00:18:38,310
rule of thumb and your controls engineer

00:18:36,150 --> 00:18:39,870
might argue with you on this but really

00:18:38,310 --> 00:18:41,640
anything that touches voltage outputs

00:18:39,870 --> 00:18:43,110
and signals directly runs on the PLC

00:18:41,640 --> 00:18:45,930
anything that's related to human safety

00:18:43,110 --> 00:18:48,990
machine safety or otherwise timing

00:18:45,930 --> 00:18:50,580
vertical running on a PLC like in my

00:18:48,990 --> 00:18:52,440
case here you might have seen that note

00:18:50,580 --> 00:18:54,000
and the conveyor belt documentation

00:18:52,440 --> 00:18:56,190
don't switch the reverse and the on

00:18:54,000 --> 00:18:57,780
input at the very same time that's

00:18:56,190 --> 00:19:00,480
implemented in the PLC that's machine

00:18:57,780 --> 00:19:02,370
safety anything that connects to outside

00:19:00,480 --> 00:19:03,630
services your ERP or database or

00:19:02,370 --> 00:19:05,070
anything like that or that provides a

00:19:03,630 --> 00:19:07,430
user interface it's probably a better

00:19:05,070 --> 00:19:09,810
fit for Python and one of the reasons is

00:19:07,430 --> 00:19:11,400
deploying code to this PLC almost

00:19:09,810 --> 00:19:13,170
certainly requires factory down time

00:19:11,400 --> 00:19:15,900
might need recertification extensive

00:19:13,170 --> 00:19:17,610
testing veracity of your Python code

00:19:15,900 --> 00:19:19,200
it's probably on a much faster deploy

00:19:17,610 --> 00:19:21,390
schedule so you want to align the

00:19:19,200 --> 00:19:23,250
purpose of what you're writing with the

00:19:21,390 --> 00:19:25,740
kind of deploy schedule and procedures

00:19:23,250 --> 00:19:27,750
you have to build around it generally

00:19:25,740 --> 00:19:30,060
you should for you know your usual daily

00:19:27,750 --> 00:19:32,370
or continuous deploy of your Python code

00:19:30,060 --> 00:19:37,080
and just don't touch this approach to

00:19:32,370 --> 00:19:39,710
PLC's cool

00:19:37,080 --> 00:19:41,580
so we covered sensing actuation brains

00:19:39,710 --> 00:19:43,320
I'm just going to tell you right now I

00:19:41,580 --> 00:19:45,090
brought this little Python package I

00:19:43,320 --> 00:19:48,539
call it gum it's got a database with

00:19:45,090 --> 00:19:51,119
eight lines of barcodes for all these

00:19:48,539 --> 00:19:54,119
different chewing gum colors positive

00:19:51,119 --> 00:19:59,029
barcode it tells you what the color is

00:19:54,119 --> 00:20:04,249
and this is the business logic of the

00:19:59,029 --> 00:20:04,249
Python 2017 chewing gum sorting Factory

00:20:04,340 --> 00:20:08,519
so basically we start the conveyor we

00:20:06,899 --> 00:20:10,350
read the barcode if you don't get one

00:20:08,519 --> 00:20:12,929
you try again once you have a barcode

00:20:10,350 --> 00:20:16,739
find out the color from our proprietary

00:20:12,929 --> 00:20:18,869
chewing gum database if it's more red

00:20:16,739 --> 00:20:22,109
than blue we flip the right paddle it's

00:20:18,869 --> 00:20:25,529
more blue than red with the left pedal

00:20:22,109 --> 00:20:28,049
this is what that looks in Python in the

00:20:25,529 --> 00:20:30,149
interest of time I'm not going to copy

00:20:28,049 --> 00:20:32,580
it this time instead of going to go

00:20:30,149 --> 00:20:34,649
right over here you know what's ironic

00:20:32,580 --> 00:20:39,119
we're going to talk about automation the

00:20:34,649 --> 00:20:45,470
auto focus is switched off there you go

00:20:39,119 --> 00:20:48,179
better picture okay so let's see

00:20:45,470 --> 00:20:50,340
exit out of here we already got that XML

00:20:48,179 --> 00:20:52,919
RPC server running that's telling us the

00:20:50,340 --> 00:20:55,109
barcodes and we're talking to the PLC

00:20:52,919 --> 00:20:56,940
over the network so there's no direct to

00:20:55,109 --> 00:20:57,749
machine communication going on from our

00:20:56,940 --> 00:21:03,359
central server

00:20:57,749 --> 00:21:05,070
it's all happening over to network so

00:21:03,359 --> 00:21:06,989
we've got the barcode it scanned it and

00:21:05,070 --> 00:21:08,639
it's sorting it to the right side guess

00:21:06,989 --> 00:21:14,450
who forgot to put a little trace here

00:21:08,639 --> 00:21:14,450
that catch let's catch the chewing gum

00:21:15,830 --> 00:21:23,779
that's perfect setup and let's just run

00:21:21,059 --> 00:21:26,909
a couple more down this is pink coming

00:21:23,779 --> 00:21:30,139
pink is more red than blue this is kind

00:21:26,909 --> 00:21:33,450
of orange yeah more red than blue

00:21:30,139 --> 00:21:35,720
another different kind of orange just

00:21:33,450 --> 00:21:38,009
FYI Trident is the only brand that

00:21:35,720 --> 00:21:43,279
prints the barcode on the short side of

00:21:38,009 --> 00:21:43,279
the package Oh

00:21:43,400 --> 00:22:02,240
I don't even chew gum I yeah so this is

00:21:51,799 --> 00:22:04,159
this is the factory total you know total

00:22:02,240 --> 00:22:08,450
lines of code of Python code running

00:22:04,159 --> 00:22:11,360
here really less than 100 and we did

00:22:08,450 --> 00:22:15,020
something kind of meaningful well kind

00:22:11,360 --> 00:22:16,640
of meaningful right we we've got three

00:22:15,020 --> 00:22:18,110
instruments using two Ethernet

00:22:16,640 --> 00:22:18,470
connections obviously a real factory

00:22:18,110 --> 00:22:20,990
oops

00:22:18,470 --> 00:22:23,299
the real factory is going to be having

00:22:20,990 --> 00:22:25,669
more instruments more diverse and just

00:22:23,299 --> 00:22:27,470
more in sure quantity so it's going to

00:22:25,669 --> 00:22:30,049
look more like this and the first thing

00:22:27,470 --> 00:22:32,330
that your factory manager will ask you

00:22:30,049 --> 00:22:34,549
is for HMIS human-machine interfaces

00:22:32,330 --> 00:22:35,929
they want to like find out what these

00:22:34,549 --> 00:22:37,280
variables are there aren't appeal so you

00:22:35,929 --> 00:22:38,720
maybe click a button trigger a barcode

00:22:37,280 --> 00:22:40,159
scan you're going to put a little web

00:22:38,720 --> 00:22:42,289
app in front you know you dig through a

00:22:40,159 --> 00:22:44,330
Python tool chest mega flask

00:22:42,289 --> 00:22:46,220
Django something like this and for

00:22:44,330 --> 00:22:48,919
they'll be more and they'll also be

00:22:46,220 --> 00:22:51,380
talking to all the other data sources in

00:22:48,919 --> 00:22:54,190
your business maybe comparing you know

00:22:51,380 --> 00:22:56,270
barcodes to chewing gum color library

00:22:54,190 --> 00:22:58,549
then you'll run into this interesting

00:22:56,270 --> 00:23:00,830
dichotomy like people are interested in

00:22:58,549 --> 00:23:02,270
State they want a quick response from

00:23:00,830 --> 00:23:03,950
the web server and want to know the

00:23:02,270 --> 00:23:06,679
current status it running is not running

00:23:03,950 --> 00:23:09,500
machines you know things take time if

00:23:06,679 --> 00:23:11,330
you're if your shaker process it has to

00:23:09,500 --> 00:23:12,590
shake a minute but the response time is

00:23:11,330 --> 00:23:14,260
a minute and you're not going to make it

00:23:12,590 --> 00:23:17,780
faster also they are inherently

00:23:14,260 --> 00:23:19,400
singleton like a web api you send a ton

00:23:17,780 --> 00:23:21,679
of requests to it they just spin up more

00:23:19,400 --> 00:23:26,110
AWS instances that's not how it works

00:23:21,679 --> 00:23:29,870
for six axis robot arms a really good

00:23:26,110 --> 00:23:32,059
tool to actually bridge that gap is

00:23:29,870 --> 00:23:34,880
using task runners like celery in the

00:23:32,059 --> 00:23:36,770
background that keep you know your your

00:23:34,880 --> 00:23:38,750
instruments running while the front-end

00:23:36,770 --> 00:23:40,340
can carry them for what this status so

00:23:38,750 --> 00:23:45,080
they're like the virtual representation

00:23:40,340 --> 00:23:47,030
of your device you know then you

00:23:45,080 --> 00:23:49,159
automated everything there's buttons to

00:23:47,030 --> 00:23:50,870
trigger all the actions your operators

00:23:49,159 --> 00:23:52,130
are you know going to run clicking the

00:23:50,870 --> 00:23:54,440
same button every day someone's going to

00:23:52,130 --> 00:23:56,540
be like can't we automate that too and

00:23:54,440 --> 00:23:59,240
you'll be putting it like a

00:23:56,540 --> 00:24:00,680
career level scheduler that's clicking

00:23:59,240 --> 00:24:03,820
the buttons for people so we put in an

00:24:00,680 --> 00:24:05,990
API to read Django rest framework maybe

00:24:03,820 --> 00:24:08,270
something something like that like that

00:24:05,990 --> 00:24:10,250
exposes all those button clicks that

00:24:08,270 --> 00:24:12,260
operators were doing as an API and you

00:24:10,250 --> 00:24:13,790
have a process scheduling server that's

00:24:12,260 --> 00:24:15,470
going around making sure you know to

00:24:13,790 --> 00:24:17,650
chewing them packages arrive at the

00:24:15,470 --> 00:24:20,450
barcode scanner in the right time see

00:24:17,650 --> 00:24:21,640
and then you know your your operators

00:24:20,450 --> 00:24:24,020
come in in the morning and they're like

00:24:21,640 --> 00:24:25,550
what's going on all the tooling gums all

00:24:24,020 --> 00:24:28,670
over the floor

00:24:25,550 --> 00:24:30,500
we need like metrics and logs of what

00:24:28,670 --> 00:24:33,800
happened so you put in like logs and

00:24:30,500 --> 00:24:35,020
stuff and and soon enough this is

00:24:33,800 --> 00:24:37,540
looking like your standard

00:24:35,020 --> 00:24:41,780
service-oriented architecture you know

00:24:37,540 --> 00:24:43,430
micro-services and you're probably using

00:24:41,780 --> 00:24:44,570
just the standard tools of modern

00:24:43,430 --> 00:24:46,700
software engineering you'll be putting

00:24:44,570 --> 00:24:48,620
in a message queue maybe so you can go

00:24:46,700 --> 00:24:50,030
out there and and you know all the like

00:24:48,620 --> 00:24:52,940
all the big ones that have Python

00:24:50,030 --> 00:24:55,100
libraries available like 0 mq Kafka are

00:24:52,940 --> 00:24:56,960
probably a good fit for what you're

00:24:55,100 --> 00:24:59,900
trying to achieve here so this is really

00:24:56,960 --> 00:25:02,960
this is what could be coming after

00:24:59,900 --> 00:25:08,270
you've done your little modest barcode

00:25:02,960 --> 00:25:10,610
scanner with one conveyor belt I hope

00:25:08,270 --> 00:25:13,520
this was a good intro to just give you a

00:25:10,610 --> 00:25:15,470
taste of you know how this works how do

00:25:13,520 --> 00:25:17,090
you talk to machines how do you make

00:25:15,470 --> 00:25:19,850
factories run

00:25:17,090 --> 00:25:23,210
I think industrial automation is a

00:25:19,850 --> 00:25:25,190
really cool domain for software

00:25:23,210 --> 00:25:28,010
engineers if you if you show up as a

00:25:25,190 --> 00:25:30,650
newbie in data science it might look

00:25:28,010 --> 00:25:32,360
like everything's been done now

00:25:30,650 --> 00:25:34,970
industrial automation because it's a bit

00:25:32,360 --> 00:25:37,340
of a niche not like that at all it's a

00:25:34,970 --> 00:25:40,700
wide-open field here here a couple of

00:25:37,340 --> 00:25:42,410
things you could just start doing and do

00:25:40,700 --> 00:25:44,540
something useful you could write device

00:25:42,410 --> 00:25:47,420
drivers they're basically the api's for

00:25:44,540 --> 00:25:49,720
robot the way I see it is every time you

00:25:47,420 --> 00:25:52,640
publish a device driver as open-source

00:25:49,720 --> 00:25:55,730
you make that device available to

00:25:52,640 --> 00:25:58,280
academics hobbies' tinkerers who don't

00:25:55,730 --> 00:26:00,380
have the luxury of a field Application

00:25:58,280 --> 00:26:03,320
Engineer from the manufacturer who can

00:26:00,380 --> 00:26:05,060
tell them how to set it up for them if

00:26:03,320 --> 00:26:07,700
you're not into like tinkering with

00:26:05,060 --> 00:26:10,070
tangible things that's ok file formats

00:26:07,700 --> 00:26:12,050
and protocols there are hundreds of

00:26:10,070 --> 00:26:15,800
every machine has its own proprietary

00:26:12,050 --> 00:26:17,660
protocol and people on the factory floor

00:26:15,800 --> 00:26:19,580
and many factories spend a lot of time

00:26:17,660 --> 00:26:22,460
just converting between one format to

00:26:19,580 --> 00:26:25,220
another using tools like Excel by

00:26:22,460 --> 00:26:28,880
writing viewers converters parsers

00:26:25,220 --> 00:26:30,500
there's just a huge scope of things that

00:26:28,880 --> 00:26:31,250
can be done out there if you're into

00:26:30,500 --> 00:26:33,170
data science

00:26:31,250 --> 00:26:35,240
sorry data scientist I cannot like you

00:26:33,170 --> 00:26:36,920
see as the example for you overcrowded

00:26:35,240 --> 00:26:39,890
two popular field if you're into that

00:26:36,920 --> 00:26:41,750
actually this is also exploding in

00:26:39,890 --> 00:26:43,640
factories right now this concept of

00:26:41,750 --> 00:26:46,190
predictive maintenance we monitor the

00:26:43,640 --> 00:26:47,960
vibration of a motor over time and then

00:26:46,190 --> 00:26:51,920
predict when it will fail so that you

00:26:47,960 --> 00:26:54,050
can monitor it is huge if you want to

00:26:51,920 --> 00:26:57,430
Google at industrial Internet of Things

00:26:54,050 --> 00:26:59,810
is the buzzword and same for scheduling

00:26:57,430 --> 00:27:02,810
factories are super complicated networks

00:26:59,810 --> 00:27:04,010
of you know good and data making them

00:27:02,810 --> 00:27:05,570
all show up in the right place at the

00:27:04,010 --> 00:27:08,690
right time is a huge scheduling from

00:27:05,570 --> 00:27:10,760
same same thing lots of work to be done

00:27:08,690 --> 00:27:15,830
there one security I'm just going to say

00:27:10,760 --> 00:27:18,230
you'll be busy and with that I am on my

00:27:15,830 --> 00:27:20,000
last slide and I think this went

00:27:18,230 --> 00:27:22,540
surprisingly fast so we probably have

00:27:20,000 --> 00:27:22,540
time for a question

00:27:28,690 --> 00:27:35,620
I think we have time for one maybe two

00:27:32,950 --> 00:27:37,870
questions if anyone has a question

00:27:35,620 --> 00:27:43,660
please go up to one of the microphones

00:27:37,870 --> 00:27:45,610
in the aisle a great presentation for

00:27:43,660 --> 00:27:48,370
the device drivers do you have any tips

00:27:45,610 --> 00:27:51,250
on writing those like entirely in Python

00:27:48,370 --> 00:27:53,350
or do use some C libraries or are there

00:27:51,250 --> 00:27:57,550
any standards for like that's no methods

00:27:53,350 --> 00:28:01,270
for creating those drivers so many

00:27:57,550 --> 00:28:04,140
questions from there the answer is no so

00:28:01,270 --> 00:28:06,580
basically for every device and for every

00:28:04,140 --> 00:28:08,800
application you really have to like

00:28:06,580 --> 00:28:11,650
judge what's the right thing to do in

00:28:08,800 --> 00:28:13,900
some cases it is cut the cable sent the

00:28:11,650 --> 00:28:16,000
voltage just ahead at once and you're

00:28:13,900 --> 00:28:18,640
good sometimes there is a pretty good

00:28:16,000 --> 00:28:20,950
like let's say Windows software and they

00:28:18,640 --> 00:28:23,320
even like the vendor gives you a calm

00:28:20,950 --> 00:28:24,850
object or dll or access X object

00:28:23,320 --> 00:28:27,790
something like that and maybe then you

00:28:24,850 --> 00:28:29,740
just want to wrap that it really depends

00:28:27,790 --> 00:28:31,360
it also obviously depends on like

00:28:29,740 --> 00:28:33,400
encryption and things like that some

00:28:31,360 --> 00:28:36,130
vendors encrypt the communication so

00:28:33,400 --> 00:28:38,650
long story short it really depends on a

00:28:36,130 --> 00:28:40,420
specific device I always and you kind of

00:28:38,650 --> 00:28:42,550
hurt that during this presentation try

00:28:40,420 --> 00:28:44,860
to shoot for pure Python and sending

00:28:42,550 --> 00:28:53,650
bits and bytes over Ethernet or serial

00:28:44,860 --> 00:28:54,190
port hello a great talk thank you very

00:28:53,650 --> 00:28:56,350
much

00:28:54,190 --> 00:28:59,890
I have a quick question about the serial

00:28:56,350 --> 00:29:01,810
ports in fact if you would like having a

00:28:59,890 --> 00:29:03,460
serial server that converts all the

00:29:01,810 --> 00:29:07,420
serial input into network right away

00:29:03,460 --> 00:29:09,610
that's how it's done well I actually

00:29:07,420 --> 00:29:12,190
skimmed over the part where most

00:29:09,610 --> 00:29:14,380
factories usually have these serial to

00:29:12,190 --> 00:29:15,970
Ethernet converters scattered around and

00:29:14,380 --> 00:29:17,410
that's true but you would obviously be

00:29:15,970 --> 00:29:19,360
using that even though sometimes those

00:29:17,410 --> 00:29:23,650
can be hard to communicate with iron

00:29:19,360 --> 00:29:25,780
Devils in the detail there one place I

00:29:23,650 --> 00:29:29,490
worked at actually the folks at Council

00:29:25,780 --> 00:29:32,590
who contributed that PI 80s library our

00:29:29,490 --> 00:29:35,860
approach there was to use XML RPC

00:29:32,590 --> 00:29:38,170
servers just as this boundary like one

00:29:35,860 --> 00:29:39,820
team works up to the XML RPC server and

00:29:38,170 --> 00:29:41,770
then other teams have a unified

00:29:39,820 --> 00:29:42,700
interface to every device and that's how

00:29:41,770 --> 00:29:45,130
we did it there but is

00:29:42,700 --> 00:29:46,810
again you know they're like hundreds of

00:29:45,130 --> 00:29:48,700
manufacturers with like thousands of

00:29:46,810 --> 00:29:50,680
devices so it really depends on the case

00:29:48,700 --> 00:29:52,690
thank you thank you very much that's a

00:29:50,680 --> 00:29:53,480
way of time for um thank you please

00:29:52,690 --> 00:30:01,890
thank you on the front again

00:29:53,480 --> 00:30:01,890

YouTube URL: https://www.youtube.com/watch?v=cEyVfiix1Lw


