Title: Andrew T  Baker   5 ways to deploy your Python web app in 2017   PyCon 2017
Publication date: 2017-05-20
Playlist: PyCon 2017
Description: 
	"Speaker: Andrew T. Baker

You’ve built a fine Python web application and now you’re ready to share it with the world. But what’s the best way to deploy your app in 2017?

This talk will demonstrate popular techniques for deploying Python web applications. We’ll start with a simple Flask application and expose it to the world five times over as we learn to use different tools and services available to the modern Python developer.

Specific topics covered include:

* Exposing your local dev environment with [ngrok](https://ngrok.com/)
* Using a Platform-as-a-Service (PaaS) like [Heroku](https://www.heroku.com/)
* Going “serverless” with [AWS Lambda](https://aws.amazon.com/lambda/)
* Configuring your own VM with [Google Compute Engine](https://cloud.google.com/compute/)
* Thinking inside the box using [Docker](https://www.docker.com/)

We’ll also briefly touch on the pros and cons of each technique to help you figure out which one is right for your app.

At the end of this talk you will have a basic understanding of how each of these techniques work and you’ll be ready to try them out yourself.

Slides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides"
Captions: 
	00:00:01,909 --> 00:00:13,889
good cool and once we get that gift back

00:00:08,849 --> 00:00:15,509
up there Thank You Drake thank you folks

00:00:13,889 --> 00:00:17,340
hopefully the way it was worth it for

00:00:15,509 --> 00:00:19,710
that one that is my favorite gift of all

00:00:17,340 --> 00:00:20,520
time my name is Andrew Baker and I'm

00:00:19,710 --> 00:00:24,510
here to talk to you today about

00:00:20,520 --> 00:00:26,400
deploying your Python web apps in 2017

00:00:24,510 --> 00:00:28,410
so we'll put Drake aside for the moment

00:00:26,400 --> 00:00:30,900
thank you for your service

00:00:28,410 --> 00:00:31,650
a little bit about me so my name is

00:00:30,900 --> 00:00:34,200
Andrew Baker

00:00:31,650 --> 00:00:35,250
I am a Python web developer that's what

00:00:34,200 --> 00:00:37,860
I've been doing for most of my career

00:00:35,250 --> 00:00:39,239
these days I work at Twilio if you

00:00:37,860 --> 00:00:40,649
haven't heard of us before Twilio is a

00:00:39,239 --> 00:00:41,730
company that makes it easy for

00:00:40,649 --> 00:00:42,870
developers like you to put

00:00:41,730 --> 00:00:44,969
communications in your apps

00:00:42,870 --> 00:00:47,940
so by communications I mean things like

00:00:44,969 --> 00:00:49,289
phone calls text messages video chat and

00:00:47,940 --> 00:00:53,730
I work on the documentation team at

00:00:49,289 --> 00:00:55,350
Twilio and I know that's that's enough

00:00:53,730 --> 00:00:56,940
about Twilio if you want to know more

00:00:55,350 --> 00:00:59,100
stop by the booth and I have happy to

00:00:56,940 --> 00:01:01,230
talk to you more about it but today

00:00:59,100 --> 00:01:02,370
we're here to talk about deployments so

00:01:01,230 --> 00:01:04,500
what we're going to try and do in the

00:01:02,370 --> 00:01:05,939
next 30 minutes is cover five different

00:01:04,500 --> 00:01:07,409
ways that you can take code that you've

00:01:05,939 --> 00:01:09,890
got running locally on your machine and

00:01:07,409 --> 00:01:13,229
get it up and running in the cloud and

00:01:09,890 --> 00:01:14,820
rather than tell you how to do this

00:01:13,229 --> 00:01:16,860
I'm figured it would be more fun if I

00:01:14,820 --> 00:01:17,970
try to show you so in the next 30

00:01:16,860 --> 00:01:20,220
minutes we're going to try and take the

00:01:17,970 --> 00:01:23,040
same sample code and deploy it to the

00:01:20,220 --> 00:01:27,570
web five times over sound good all right

00:01:23,040 --> 00:01:29,880
let's give it a shot so our sample app

00:01:27,570 --> 00:01:30,900
today is a flask application I imagine

00:01:29,880 --> 00:01:32,939
most be in the room are familiar with

00:01:30,900 --> 00:01:34,710
flask already but if you're not it's a

00:01:32,939 --> 00:01:37,110
micro framework that makes it really

00:01:34,710 --> 00:01:39,329
really easy to bootstrap a Python web

00:01:37,110 --> 00:01:42,780
application so we've got the little

00:01:39,329 --> 00:01:44,670
hello world code right here and indeed

00:01:42,780 --> 00:01:45,689
that looks very similar to the sample

00:01:44,670 --> 00:01:47,220
code that we're going to be using in our

00:01:45,689 --> 00:01:48,990
app today so we've just got one route

00:01:47,220 --> 00:01:51,329
the route route and it's just going to

00:01:48,990 --> 00:01:57,420
spit out an h1 tag with a hello world

00:01:51,329 --> 00:01:59,189
there so the first technique we're going

00:01:57,420 --> 00:02:00,479
to talk about today is end grok you

00:01:59,189 --> 00:02:02,219
could even call this technique number

00:02:00,479 --> 00:02:04,290
zero because it's not really deploying

00:02:02,219 --> 00:02:05,549
so much as it is a really really handy

00:02:04,290 --> 00:02:09,000
tool that I think should be in every

00:02:05,549 --> 00:02:11,899
developers tool belt so an grukk if you

00:02:09,000 --> 00:02:11,899
check out their website

00:02:14,210 --> 00:02:19,890
it is secure tunnels to localhost so the

00:02:17,610 --> 00:02:21,930
quote says it all I want to expose my

00:02:19,890 --> 00:02:23,520
local server behind a net or firewall to

00:02:21,930 --> 00:02:25,080
the internet and if you click that

00:02:23,520 --> 00:02:27,690
download button you go over to the end

00:02:25,080 --> 00:02:30,660
crack download page download that file

00:02:27,690 --> 00:02:32,460
which I've done already and you really

00:02:30,660 --> 00:02:34,500
just need to do two things first I'm

00:02:32,460 --> 00:02:36,570
going to fire up that flask app that we

00:02:34,500 --> 00:02:39,180
had before and we'll make sure that's

00:02:36,570 --> 00:02:41,460
working on localhost 5,000 hello world

00:02:39,180 --> 00:02:43,440
diggin it and then I'm just going to go

00:02:41,460 --> 00:02:46,110
over to another window here and do an

00:02:43,440 --> 00:02:48,390
grok HTTP 5,000 to tell an Kruk that I

00:02:46,110 --> 00:02:51,320
want it to route to port 5,000 on my

00:02:48,390 --> 00:02:53,430
local host and groj gonna fire up here

00:02:51,320 --> 00:02:55,890
it's going to give me this weird kind of

00:02:53,430 --> 00:02:57,660
gobbledygook URL I'm just going to paste

00:02:55,890 --> 00:03:00,240
that into my browser and hello world

00:02:57,660 --> 00:03:03,450
that is it your app is now live for the

00:03:00,240 --> 00:03:04,890
world to see and rock is a really really

00:03:03,450 --> 00:03:07,500
great tool for just getting something up

00:03:04,890 --> 00:03:09,000
in a pinch one thing that even folks

00:03:07,500 --> 00:03:10,770
who've used n growth before might not be

00:03:09,000 --> 00:03:12,900
aware of is it also has this awesome

00:03:10,770 --> 00:03:14,820
request inspector so if you go to

00:03:12,900 --> 00:03:17,070
localhost 4040 while you've got n grog

00:03:14,820 --> 00:03:19,080
running you can click around see the

00:03:17,070 --> 00:03:20,459
requests that were coming in see the

00:03:19,080 --> 00:03:22,500
response that your app was putting back

00:03:20,459 --> 00:03:23,610
if you can go over to the Status page

00:03:22,500 --> 00:03:25,290
here you can get some performance

00:03:23,610 --> 00:03:29,430
information on how your app is doing

00:03:25,290 --> 00:03:33,720
locally so n grok is the simplest way to

00:03:29,430 --> 00:03:35,400
get your app running in the cloud so

00:03:33,720 --> 00:03:36,840
after each of these techniques we're

00:03:35,400 --> 00:03:38,940
going to do a brief breakdown of the

00:03:36,840 --> 00:03:40,950
pros and cons of each the pros for n

00:03:38,940 --> 00:03:42,930
crack it is fast and easy there's no way

00:03:40,950 --> 00:03:44,790
that it's faster easier it's really

00:03:42,930 --> 00:03:46,080
handy for demos so if you're just going

00:03:44,790 --> 00:03:47,130
to a meeting with some code that you've

00:03:46,080 --> 00:03:48,690
been working on you haven't really

00:03:47,130 --> 00:03:49,950
showed it to anyone else yet but you

00:03:48,690 --> 00:03:51,570
want some of the people in that meeting

00:03:49,950 --> 00:03:54,120
to be able to play with it and rock is a

00:03:51,570 --> 00:03:55,980
great tool for that and it's also really

00:03:54,120 --> 00:03:57,209
great for hacking on web hooks so if you

00:03:55,980 --> 00:04:00,209
haven't heard of web hooks before a

00:03:57,209 --> 00:04:01,920
great examples with Twilio if when

00:04:00,209 --> 00:04:03,480
you're Twilio phone number has an

00:04:01,920 --> 00:04:05,549
incoming phone call from somewhere in

00:04:03,480 --> 00:04:08,250
the outside world Twilio will send your

00:04:05,549 --> 00:04:10,560
server a HTTP request asking you how you

00:04:08,250 --> 00:04:11,760
want to handle the phone call and that's

00:04:10,560 --> 00:04:13,260
great when your server is live and

00:04:11,760 --> 00:04:15,060
running and prod but when you're just

00:04:13,260 --> 00:04:17,280
working locally you don't actually have

00:04:15,060 --> 00:04:19,140
that URL that you can point to Leo to to

00:04:17,280 --> 00:04:20,400
get those instructions and grog is the

00:04:19,140 --> 00:04:21,630
way that we recommend doing it and

00:04:20,400 --> 00:04:23,450
that's why it's an indispensable part of

00:04:21,630 --> 00:04:25,800
my indispensable part of my toolkit now

00:04:23,450 --> 00:04:26,639
the cons obviously it stops when you

00:04:25,800 --> 00:04:28,080
close your laptop

00:04:26,639 --> 00:04:31,560
so as soon as your screen goes black

00:04:28,080 --> 00:04:32,550
that URL is gone and every time you fire

00:04:31,560 --> 00:04:34,680
it up you're going to get a different

00:04:32,550 --> 00:04:36,389
random domain you can upgrade to a paid

00:04:34,680 --> 00:04:38,099
version of course and it's great

00:04:36,389 --> 00:04:40,830
products so I support paying developers

00:04:38,099 --> 00:04:41,909
who do cool stuff but if you're just

00:04:40,830 --> 00:04:44,699
sticking with a free one you're going to

00:04:41,909 --> 00:04:47,879
get a random domain each time and it

00:04:44,699 --> 00:04:50,039
definitely doesn't scale so even on the

00:04:47,879 --> 00:04:51,599
free tier if you have like maybe 12

00:04:50,039 --> 00:04:53,039
people in a meeting and you're trying to

00:04:51,599 --> 00:04:55,199
point them at your end crack URL at the

00:04:53,039 --> 00:04:58,770
same time your request may get throttled

00:04:55,199 --> 00:05:01,729
so be careful be careful of how many

00:04:58,770 --> 00:05:04,080
people you send that URL out to at once

00:05:01,729 --> 00:05:06,479
awesome all right moving on technique

00:05:04,080 --> 00:05:08,729
number two is Heroku so furrow coup is a

00:05:06,479 --> 00:05:10,979
platform as a service and in my opinion

00:05:08,729 --> 00:05:13,770
today it's still the easiest way to get

00:05:10,979 --> 00:05:17,180
your code running in the cloud 24/7 so

00:05:13,770 --> 00:05:19,650
if you pop over to Heroku website

00:05:17,180 --> 00:05:21,150
they've got lots of interesting language

00:05:19,650 --> 00:05:23,789
here which explains what it does but for

00:05:21,150 --> 00:05:26,339
me Heroku isn't really so easy to

00:05:23,789 --> 00:05:27,779
explain as it is easy to show so we're

00:05:26,339 --> 00:05:30,360
going to pop back over to our flask app

00:05:27,779 --> 00:05:32,939
still got that running there I'm going

00:05:30,360 --> 00:05:35,250
to close down and grok stop my local

00:05:32,939 --> 00:05:37,500
server and we need two things to get an

00:05:35,250 --> 00:05:39,029
app running on Heroku the first thing we

00:05:37,500 --> 00:05:41,639
need to do is create this file cut a

00:05:39,029 --> 00:05:43,710
proc file a proc file tells for okuu how

00:05:41,639 --> 00:05:45,479
it should run our app in production and

00:05:43,710 --> 00:05:47,909
then we need to actually create a Heroku

00:05:45,479 --> 00:05:50,069
app which is going to give us the URL

00:05:47,909 --> 00:05:53,699
where app is going to live so we'll

00:05:50,069 --> 00:05:56,639
start with the proc file first and the

00:05:53,699 --> 00:05:58,710
proc files are a pretty simple syntax

00:05:56,639 --> 00:06:00,180
you just do web and then the command you

00:05:58,710 --> 00:06:02,370
want Heroku to run when it starts your

00:06:00,180 --> 00:06:04,319
service now if you look the flash

00:06:02,370 --> 00:06:05,490
development Docs they will tell you do

00:06:04,319 --> 00:06:06,779
not run the development server in

00:06:05,490 --> 00:06:08,909
production never ever run the

00:06:06,779 --> 00:06:09,990
development server in production so for

00:06:08,909 --> 00:06:12,210
the rest of this talk today we're going

00:06:09,990 --> 00:06:14,370
to use a Python HTTP server called G

00:06:12,210 --> 00:06:15,960
unicorn to actually run our app when

00:06:14,370 --> 00:06:19,110
it's out in the world for everyone to

00:06:15,960 --> 00:06:22,439
see and so the claim to do that is G

00:06:19,110 --> 00:06:23,939
unicorn and then the path Python path to

00:06:22,439 --> 00:06:26,219
where our app is defined so that's

00:06:23,939 --> 00:06:27,800
inside hello dot py module and then we

00:06:26,219 --> 00:06:31,069
have a variable in here called app and

00:06:27,800 --> 00:06:34,500
then there's a couple other options that

00:06:31,069 --> 00:06:36,750
we like to pass for okuu this one just

00:06:34,500 --> 00:06:38,699
tells G unicorn hey don't store your

00:06:36,750 --> 00:06:39,210
logs locally on the server instead pass

00:06:38,699 --> 00:06:41,569
them back

00:06:39,210 --> 00:06:44,400
okuu so that Heroku can give them to me

00:06:41,569 --> 00:06:46,860
so once we've got our proc file when you

00:06:44,400 --> 00:06:48,300
create your Heroku account Heroku

00:06:46,860 --> 00:06:49,520
account they will tell you to download

00:06:48,300 --> 00:06:51,599
this thing called a Heroku toolbelt

00:06:49,520 --> 00:06:53,819
which is basically their command-line

00:06:51,599 --> 00:06:55,020
interface after you login to that all

00:06:53,819 --> 00:06:57,720
you have to do is type

00:06:55,020 --> 00:06:59,669
karoku create and it's going to go ahead

00:06:57,720 --> 00:07:02,639
and give us a unique URL right on the

00:06:59,669 --> 00:07:04,590
spot it's also going to add a new remote

00:07:02,639 --> 00:07:06,690
to our repository that ties to that

00:07:04,590 --> 00:07:08,039
unique URL so if I was just pushing my

00:07:06,690 --> 00:07:11,400
changes up to get help I would do git

00:07:08,039 --> 00:07:14,550
push origin master I'm pushing my

00:07:11,400 --> 00:07:22,050
changes up to Heroku I'm going to do git

00:07:14,550 --> 00:07:24,120
push Heroku master and so what's

00:07:22,050 --> 00:07:27,539
happening now is Roku has accepted our

00:07:24,120 --> 00:07:28,650
source code it is looking at the

00:07:27,539 --> 00:07:31,289
requirements that are inside our

00:07:28,650 --> 00:07:32,789
requirements txt file it's going to go

00:07:31,289 --> 00:07:35,190
ahead and install all those requirements

00:07:32,789 --> 00:07:36,960
it's really really fast because Heroku

00:07:35,190 --> 00:07:38,669
servers are pretty close to where pi pi

00:07:36,960 --> 00:07:40,949
servers are at least a lot closer than

00:07:38,669 --> 00:07:42,750
where our laptop is then going to bundle

00:07:40,949 --> 00:07:48,060
it all up and shoot it out on that URL

00:07:42,750 --> 00:07:50,340
and launching cool so if we do Heroku

00:07:48,060 --> 00:07:53,430
open which is a nice handy little

00:07:50,340 --> 00:07:56,460
shortcut they give us we'll hit that URL

00:07:53,430 --> 00:07:59,580
it's making all the pipes line up for us

00:07:56,460 --> 00:08:02,759
and HelloWorld cool so now we are up and

00:07:59,580 --> 00:08:07,020
live with Roku so what exactly does this

00:08:02,759 --> 00:08:08,940
mean to me my favorite part about Heroku

00:08:07,020 --> 00:08:10,770
is that it's like the easiest way to get

00:08:08,940 --> 00:08:13,169
an app that's running into cloud 24/7

00:08:10,770 --> 00:08:14,610
for free so Heroku is free tier is a

00:08:13,169 --> 00:08:16,380
little more complicated than it used to

00:08:14,610 --> 00:08:18,240
be but the last time I did the math you

00:08:16,380 --> 00:08:21,060
can basically have one app per account

00:08:18,240 --> 00:08:24,090
running all the time without any serious

00:08:21,060 --> 00:08:26,639
consequences there's zero server

00:08:24,090 --> 00:08:28,110
management we didn't have to access any

00:08:26,639 --> 00:08:29,930
machines open any terminals on any

00:08:28,110 --> 00:08:31,620
remote servers anything like that and

00:08:29,930 --> 00:08:34,169
her crew has a really interesting

00:08:31,620 --> 00:08:35,579
add-ons ecosystem where they partner

00:08:34,169 --> 00:08:37,310
with other companies to make it easy for

00:08:35,579 --> 00:08:40,740
you to add things like logging

00:08:37,310 --> 00:08:43,469
monitoring and databases caches things

00:08:40,740 --> 00:08:45,480
like that to your application the

00:08:43,469 --> 00:08:47,130
content this one the scaling is really

00:08:45,480 --> 00:08:49,500
really easy but it can also get pricey

00:08:47,130 --> 00:08:51,570
so if you just have like a big event for

00:08:49,500 --> 00:08:52,470
your organization and you need to pop on

00:08:51,570 --> 00:08:53,820
some extra Japan

00:08:52,470 --> 00:08:55,860
for like just one day or an afternoon

00:08:53,820 --> 00:08:57,840
her who's probably still a great choice

00:08:55,860 --> 00:09:00,120
if you need to be running your app that

00:08:57,840 --> 00:09:02,370
like more than one server on Heroku for

00:09:00,120 --> 00:09:04,850
a sustained period of time you might

00:09:02,370 --> 00:09:07,740
want to start looking at other options

00:09:04,850 --> 00:09:10,620
server customization is harder so if you

00:09:07,740 --> 00:09:12,330
need some sort of OS library to make

00:09:10,620 --> 00:09:14,310
your application work there's a way to

00:09:12,330 --> 00:09:16,310
get it in there with Oroku but you have

00:09:14,310 --> 00:09:18,240
to do a little bit more legwork to do it

00:09:16,310 --> 00:09:18,810
and some of those add-ons are better

00:09:18,240 --> 00:09:21,450
than others

00:09:18,810 --> 00:09:23,220
so some of those add-ons are maintained

00:09:21,450 --> 00:09:25,170
by Heroku itself some of them are

00:09:23,220 --> 00:09:27,000
maintained by third-party vendors those

00:09:25,170 --> 00:09:28,680
third-party vendors can vary in their

00:09:27,000 --> 00:09:31,890
reliability and in the quality of their

00:09:28,680 --> 00:09:34,680
documentation all right number three

00:09:31,890 --> 00:09:35,910
server lists in quotes it's pretty much

00:09:34,680 --> 00:09:39,480
the only way you can talk about server

00:09:35,910 --> 00:09:40,860
lists is in quotes so this is the one

00:09:39,480 --> 00:09:43,020
the newest hottest techniques to get

00:09:40,860 --> 00:09:46,050
your app out there in the world the idea

00:09:43,020 --> 00:09:48,390
is that instead of like Heroku where

00:09:46,050 --> 00:09:50,190
Heroku managed all the server stuff for

00:09:48,390 --> 00:09:52,680
us but we still have our process running

00:09:50,190 --> 00:09:54,360
in Heroku cloud all the time with server

00:09:52,680 --> 00:09:55,530
lists the idea is that our code is only

00:09:54,360 --> 00:09:57,840
going to be running when someone

00:09:55,530 --> 00:09:59,160
actually needs to use it and most of the

00:09:57,840 --> 00:10:00,630
time it's going to be sleeping and as

00:09:59,160 --> 00:10:03,180
soon as someone sends a request to our

00:10:00,630 --> 00:10:04,410
website the server list provider is just

00:10:03,180 --> 00:10:05,820
going to flip a switch and get our

00:10:04,410 --> 00:10:09,030
process running again quick enough to

00:10:05,820 --> 00:10:12,420
respond so today I'm going to show you

00:10:09,030 --> 00:10:13,980
how to use AWS lambda but all the big

00:10:12,420 --> 00:10:14,550
cloud providers have their own server

00:10:13,980 --> 00:10:17,370
list feature

00:10:14,550 --> 00:10:19,620
asher has one Google Cloud has one so

00:10:17,370 --> 00:10:25,020
I'm just showing you AWS for example

00:10:19,620 --> 00:10:26,550
sake when you look at lambda you can see

00:10:25,020 --> 00:10:28,260
pay for only the compute time you

00:10:26,550 --> 00:10:30,180
consume and we'll talk more about the

00:10:28,260 --> 00:10:33,120
pricing on the pros and cons list but

00:10:30,180 --> 00:10:35,340
when I've used lambda before you can log

00:10:33,120 --> 00:10:36,870
into your AWS console copy and paste

00:10:35,340 --> 00:10:39,030
some code get things set up and working

00:10:36,870 --> 00:10:41,010
pretty well I find it a little

00:10:39,030 --> 00:10:42,780
cumbersome so I like to use one of the

00:10:41,010 --> 00:10:44,580
third-party frameworks that sprung up

00:10:42,780 --> 00:10:45,570
around the surrealist movement and the

00:10:44,580 --> 00:10:47,670
one I'm going to show you how to use

00:10:45,570 --> 00:10:50,040
today is called Zappa

00:10:47,670 --> 00:10:52,200
so Zappo is basically just a wrapper

00:10:50,040 --> 00:10:53,640
around AWS lambda that makes it easier

00:10:52,200 --> 00:10:57,150
for me to take my existing flask

00:10:53,640 --> 00:11:01,410
application and fit it inside lambda so

00:10:57,150 --> 00:11:04,030
to get Zappa working I already data pick

00:11:01,410 --> 00:11:06,070
install Zappa before I got up here so

00:11:04,030 --> 00:11:08,710
what we need to start with here is Zappa

00:11:06,070 --> 00:11:10,450
and MIT and zappas just going to ask me

00:11:08,710 --> 00:11:13,480
a few questions about how I want my app

00:11:10,450 --> 00:11:14,350
to run inside lambda first it's going to

00:11:13,480 --> 00:11:15,730
say what do we want to call this

00:11:14,350 --> 00:11:18,550
environment so I'm just going to say

00:11:15,730 --> 00:11:22,810
production which AWS credentials do we

00:11:18,550 --> 00:11:25,060
want to use I'll say personal and Zappa

00:11:22,810 --> 00:11:26,140
creates a three bucket lambda also

00:11:25,060 --> 00:11:27,400
creates an s3 bucket

00:11:26,140 --> 00:11:29,590
for where you're going to store your

00:11:27,400 --> 00:11:30,340
source code before it gets deployed so

00:11:29,590 --> 00:11:32,710
I'm just going to go with the default

00:11:30,340 --> 00:11:34,810
name there don't really care it found

00:11:32,710 --> 00:11:37,720
that hello dot app is the right path to

00:11:34,810 --> 00:11:40,030
get our application started so I'm gonna

00:11:37,720 --> 00:11:42,130
stick with the default there do we want

00:11:40,030 --> 00:11:44,740
to deploy globally though it would be

00:11:42,130 --> 00:11:46,510
the best way to say hello world it also

00:11:44,740 --> 00:11:50,740
costs a little more so I'm going to say

00:11:46,510 --> 00:11:53,140
no everything look okay yes it does

00:11:50,740 --> 00:11:56,160
thank yous ephah and then to get things

00:11:53,140 --> 00:11:59,160
rolling we just say zappa deploy

00:11:56,160 --> 00:11:59,160
production

00:12:04,060 --> 00:12:07,900
so right now is that those making a

00:12:06,070 --> 00:12:10,510
whole bunch of API calls to Amazon Web

00:12:07,900 --> 00:12:11,860
Services underneath the scenes it's

00:12:10,510 --> 00:12:13,870
given me a warning here because my

00:12:11,860 --> 00:12:15,550
virtual ends and my zapper project have

00:12:13,870 --> 00:12:19,630
the same name it's probably something we

00:12:15,550 --> 00:12:23,560
should all fix next time the interesting

00:12:19,630 --> 00:12:26,230
thing about Zappa and lambda is all of

00:12:23,560 --> 00:12:29,440
it is mostly a recombination of other

00:12:26,230 --> 00:12:31,090
Amazon Web Services products and because

00:12:29,440 --> 00:12:32,830
all those products are products you can

00:12:31,090 --> 00:12:34,270
use in their own right you can access

00:12:32,830 --> 00:12:36,880
them and poke around your Amazon Web

00:12:34,270 --> 00:12:40,150
Services console after you've already

00:12:36,880 --> 00:12:42,340
set it up so after you deploy a Zappa

00:12:40,150 --> 00:12:43,750
project you should log into your AWS

00:12:42,340 --> 00:12:44,980
console and kind of poke around and see

00:12:43,750 --> 00:12:46,450
all the things that have made for you

00:12:44,980 --> 00:12:48,670
you're going to want to look at this

00:12:46,450 --> 00:12:50,350
thing called API gateway that's

00:12:48,670 --> 00:12:51,760
basically the way that you tell Amazon

00:12:50,350 --> 00:12:53,620
Web Services that you want to accept

00:12:51,760 --> 00:12:55,840
traffic from the outside world that's

00:12:53,620 --> 00:12:59,800
also where you're going to go in and set

00:12:55,840 --> 00:13:01,960
up your own custom domains and an SSL

00:12:59,800 --> 00:13:03,340
and all sorts of things like that like I

00:13:01,960 --> 00:13:05,440
mentioned before there's also a tie-in

00:13:03,340 --> 00:13:08,860
with the s3 bucket so that's what's

00:13:05,440 --> 00:13:10,930
happening right now is AWS sorry Zappa

00:13:08,860 --> 00:13:13,510
just zipped above our source code and is

00:13:10,930 --> 00:13:15,060
dropping it in that s3 bucket and this

00:13:13,510 --> 00:13:17,230
is a little bit different than Heroku

00:13:15,060 --> 00:13:19,690
because when we pushed our code up to

00:13:17,230 --> 00:13:21,910
Heroku Heroku just looked at our source

00:13:19,690 --> 00:13:23,620
code took a peek inside our requirements

00:13:21,910 --> 00:13:26,350
that txt and then pulled all of our

00:13:23,620 --> 00:13:28,360
dependencies on to Heroku servers with

00:13:26,350 --> 00:13:29,950
lambda you have to basically bundle up

00:13:28,360 --> 00:13:31,960
your dependencies locally and then

00:13:29,950 --> 00:13:34,660
upload them all to Amazon Web Services

00:13:31,960 --> 00:13:36,280
so a small distinction but if you see

00:13:34,660 --> 00:13:39,910
something wonky going on that could be

00:13:36,280 --> 00:13:43,180
part of your trouble all right

00:13:39,910 --> 00:13:46,990
deployment complete got a weird ugly URL

00:13:43,180 --> 00:13:53,560
you know what that means hello world

00:13:46,990 --> 00:13:56,200
awesome cool so talking a little bit

00:13:53,560 --> 00:13:58,060
more about serverless lambda it's pretty

00:13:56,200 --> 00:13:59,500
economical for small to medium loads if

00:13:58,060 --> 00:14:02,110
you don't need something that's actually

00:13:59,500 --> 00:14:04,540
available 24/7 but you just need it to

00:14:02,110 --> 00:14:07,420
be quickly available at any time of day

00:14:04,540 --> 00:14:10,510
this is a really great choice it's also

00:14:07,420 --> 00:14:12,910
good for spiky traffic so if you have

00:14:10,510 --> 00:14:14,830
kind of unexpected bursts of traffic to

00:14:12,910 --> 00:14:16,330
your service and you don't know when

00:14:14,830 --> 00:14:17,630
they're going to come lamb does a good

00:14:16,330 --> 00:14:18,980
choice because Amazon is

00:14:17,630 --> 00:14:22,190
basically going to take care of all the

00:14:18,980 --> 00:14:24,410
scaling for you and as you saw

00:14:22,190 --> 00:14:27,950
absolutely zero server configuration

00:14:24,410 --> 00:14:29,210
even less than Heroku the concept that

00:14:27,950 --> 00:14:30,500
this is a relatively new technique

00:14:29,210 --> 00:14:34,100
probably the newest one that we're going

00:14:30,500 --> 00:14:36,950
to talk about today so not only is it

00:14:34,100 --> 00:14:38,240
kind of a fast-moving ecosystem you're

00:14:36,950 --> 00:14:39,530
not going to find that much to read out

00:14:38,240 --> 00:14:40,610
there about it compared to the other

00:14:39,530 --> 00:14:43,040
techniques that we're talking about

00:14:40,610 --> 00:14:44,750
today but also the best practices are

00:14:43,040 --> 00:14:47,060
still kind of settling in for this one

00:14:44,750 --> 00:14:51,080
so you're going to be a little bit more

00:14:47,060 --> 00:14:52,490
on the bleeding edge in my opinion this

00:14:51,080 --> 00:14:53,720
is just named your Baker opinion it's a

00:14:52,490 --> 00:14:55,430
little bit less fun when you have to

00:14:53,720 --> 00:14:57,530
work directly with Amazon Web Services

00:14:55,430 --> 00:14:59,630
or the other cloud providers interfaces

00:14:57,530 --> 00:15:01,310
I prefer to use these third-party

00:14:59,630 --> 00:15:03,230
frameworks like Zappa or the one that's

00:15:01,310 --> 00:15:05,660
called serverless but your mileage may

00:15:03,230 --> 00:15:06,800
vary there and the other things that

00:15:05,660 --> 00:15:08,810
they can be a little tricky to

00:15:06,800 --> 00:15:11,390
troubleshoot so when something goes

00:15:08,810 --> 00:15:13,160
wrong with your lambda deployment like I

00:15:11,390 --> 00:15:14,870
said because it's just a combination of

00:15:13,160 --> 00:15:17,120
other Amazon Web Services products

00:15:14,870 --> 00:15:18,470
behind the scenes that kind of means

00:15:17,120 --> 00:15:19,880
that you have the ability to go

00:15:18,470 --> 00:15:21,470
spelunking on your own and figure out

00:15:19,880 --> 00:15:22,880
where things went wrong and you're

00:15:21,470 --> 00:15:24,020
probably going to have to spelunk inside

00:15:22,880 --> 00:15:25,930
products that you didn't even know

00:15:24,020 --> 00:15:28,250
existed

00:15:25,930 --> 00:15:30,530
all right technique number four virtual

00:15:28,250 --> 00:15:32,810
machines so this is where we get to the

00:15:30,530 --> 00:15:35,120
workhorse of the Internet this is the

00:15:32,810 --> 00:15:37,550
way that most big organizations run

00:15:35,120 --> 00:15:38,780
their code in the cloud and today we're

00:15:37,550 --> 00:15:41,360
going to be taking a look at Google

00:15:38,780 --> 00:15:43,010
compute engine virtual machines but all

00:15:41,360 --> 00:15:45,100
the big cloud service providers have

00:15:43,010 --> 00:15:49,310
their own VM service so for Amazon ec2

00:15:45,100 --> 00:15:51,440
for example and with this one you are

00:15:49,310 --> 00:15:54,470
pretty much just getting your own tiny

00:15:51,440 --> 00:15:56,690
corner of the cloud and setting it up

00:15:54,470 --> 00:15:58,040
exactly the same way you would locally

00:15:56,690 --> 00:16:00,080
so I mean my Google cloud platform

00:15:58,040 --> 00:16:02,210
account now I just hit create a new

00:16:00,080 --> 00:16:07,970
instance we'll call this one pie con

00:16:02,210 --> 00:16:09,710
2017 I'll give it that one the CPU

00:16:07,970 --> 00:16:11,960
that's how much horsepower I want on it

00:16:09,710 --> 00:16:13,610
right now I'm going to stick with a bun

00:16:11,960 --> 00:16:15,980
too because that's what I know best and

00:16:13,610 --> 00:16:19,340
we're going to make sure we allow HTTP

00:16:15,980 --> 00:16:21,530
traffic and so right now Google is going

00:16:19,340 --> 00:16:23,510
to get started spinning up a new virtual

00:16:21,530 --> 00:16:25,910
machine for me inside my Google compute

00:16:23,510 --> 00:16:28,010
account so virtual machines if you

00:16:25,910 --> 00:16:29,750
haven't heard of the concept before the

00:16:28,010 --> 00:16:31,430
basic idea is we're taking the software

00:16:29,750 --> 00:16:33,080
power of Google's cloud

00:16:31,430 --> 00:16:34,970
and we're basically using it to create

00:16:33,080 --> 00:16:36,410
what looks like fake hardware and then

00:16:34,970 --> 00:16:38,900
we're installing another operating

00:16:36,410 --> 00:16:41,810
system on top of it so the pro is that

00:16:38,900 --> 00:16:43,220
you get full isolation between say my

00:16:41,810 --> 00:16:44,960
virtual machine that I'm running on

00:16:43,220 --> 00:16:47,210
Google Cloud and your virtual machine

00:16:44,960 --> 00:16:50,660
that you're running on Google Cloud the

00:16:47,210 --> 00:16:52,310
downside is that it's not quite as

00:16:50,660 --> 00:16:53,900
efficient as if you were just running a

00:16:52,310 --> 00:16:55,730
process without that overhead of

00:16:53,900 --> 00:16:57,740
virtualization we'll talk a little bit

00:16:55,730 --> 00:17:00,470
more about that in a second but now that

00:16:57,740 --> 00:17:03,260
my virtual machine is up I'm going to

00:17:00,470 --> 00:17:09,440
use this little shortcut in here to copy

00:17:03,260 --> 00:17:11,060
the command to SSH into it we'll see if

00:17:09,440 --> 00:17:13,580
the box is actually ready to accept our

00:17:11,060 --> 00:17:14,750
SSH command now all right cool

00:17:13,580 --> 00:17:16,250
so if we start poking around this

00:17:14,750 --> 00:17:19,190
instance we'll see it looks pretty much

00:17:16,250 --> 00:17:22,339
what a stock ubuntu service would look

00:17:19,190 --> 00:17:24,250
like right out the gate I'm going to

00:17:22,339 --> 00:17:26,240
move on over to the bar

00:17:24,250 --> 00:17:27,620
activate sudo mode because we're about

00:17:26,240 --> 00:17:29,510
to run a whole bunch of sudo commands

00:17:27,620 --> 00:17:31,700
and we basically need to do three things

00:17:29,510 --> 00:17:33,800
to get things set up here one we

00:17:31,700 --> 00:17:34,760
actually need to install pip first so

00:17:33,800 --> 00:17:40,730
I'm going to get that started right now

00:17:34,760 --> 00:17:43,120
I have to install Python pip yes one

00:17:40,730 --> 00:17:45,200
ninety two megabytes let's do it

00:17:43,120 --> 00:17:47,900
after we install pip we're going to have

00:17:45,200 --> 00:17:49,160
to make a virtual end and then after we

00:17:47,900 --> 00:17:52,340
make the virtual ends we're going to

00:17:49,160 --> 00:17:54,620
need to clone our git repository to pull

00:17:52,340 --> 00:17:55,970
our source code onto this server then

00:17:54,620 --> 00:17:57,650
we're going to install our requirements

00:17:55,970 --> 00:17:59,810
inside that virtual end and then we'll

00:17:57,650 --> 00:18:03,410
finally be ready to run our app so this

00:17:59,810 --> 00:18:05,030
one is definitely the most legwork so

00:18:03,410 --> 00:18:11,330
now we've got pips I can do pip install

00:18:05,030 --> 00:18:13,760
virtual ends and then I'm going to do

00:18:11,330 --> 00:18:16,720
virtual ends - pea luckily the box comes

00:18:13,760 --> 00:18:16,720
with Python three already

00:18:20,419 --> 00:18:25,789
I'm going to activate that virtual ends

00:18:23,179 --> 00:18:30,350
just like we would locally and then it's

00:18:25,789 --> 00:18:37,070
time to go ahead and grab our repo clone

00:18:30,350 --> 00:18:40,149
it in pop in there install our

00:18:37,070 --> 00:18:43,879
requirements just like we would locally

00:18:40,149 --> 00:18:46,759
and then the last thing we need to do to

00:18:43,879 --> 00:18:50,269
get it running is to get that same G

00:18:46,759 --> 00:18:52,220
unicorn command but we actually need to

00:18:50,269 --> 00:18:54,889
make one small tweak to at this time so

00:18:52,220 --> 00:18:57,499
with G unicorn by default it's only

00:18:54,889 --> 00:18:58,909
going to listen on port 8000 and it's

00:18:57,499 --> 00:19:01,399
only going to listen to request coming

00:18:58,909 --> 00:19:03,379
in from localhost so we need to actually

00:19:01,399 --> 00:19:05,389
pass it one more command which tells it

00:19:03,379 --> 00:19:08,929
hey listen to requests from the internet

00:19:05,389 --> 00:19:10,759
at large and do it on port 80 instead so

00:19:08,929 --> 00:19:14,539
if we pop back over to our compute

00:19:10,759 --> 00:19:15,859
engine click this little icon here we've

00:19:14,539 --> 00:19:21,919
got our hello world running there in

00:19:15,859 --> 00:19:24,200
Google Cloud so pros and cons and

00:19:21,919 --> 00:19:25,909
virtual machines pros full control you

00:19:24,200 --> 00:19:27,590
get to do literally anything you want on

00:19:25,909 --> 00:19:29,659
this thing and set it up exactly the way

00:19:27,590 --> 00:19:33,769
you like it scales as much as your

00:19:29,659 --> 00:19:35,779
wallet so that's for you to consider but

00:19:33,769 --> 00:19:37,759
it can still be economical if you're

00:19:35,779 --> 00:19:40,369
careful so you can get a lot of value

00:19:37,759 --> 00:19:43,369
out of it if you put in the time to set

00:19:40,369 --> 00:19:45,710
things up kind of in the right way the

00:19:43,369 --> 00:19:46,999
cons undoubtedly more work for you the

00:19:45,710 --> 00:19:48,830
most work out of any of the options that

00:19:46,999 --> 00:19:51,139
we talked about here today and there's

00:19:48,830 --> 00:19:53,210
also a lot more to learn so we set up

00:19:51,139 --> 00:19:55,759
this virtual machine today using just

00:19:53,210 --> 00:19:57,259
manual commands on the box if you really

00:19:55,759 --> 00:19:58,730
decide to run your organization on this

00:19:57,259 --> 00:19:59,779
in production you're probably going to

00:19:58,730 --> 00:20:01,850
need to learn about things like

00:19:59,779 --> 00:20:03,559
configuration management monitoring

00:20:01,850 --> 00:20:05,149
you're going to want an alerting system

00:20:03,559 --> 00:20:07,369
for when things go down or weird Network

00:20:05,149 --> 00:20:10,309
flips happen you are going to be in it

00:20:07,369 --> 00:20:11,600
if you go this round and the last thing

00:20:10,309 --> 00:20:13,609
is that ultimately it's harder to

00:20:11,600 --> 00:20:15,679
predict the costs especially if you add

00:20:13,609 --> 00:20:17,359
things like load balancers to your stack

00:20:15,679 --> 00:20:18,710
where you have multiple virtual machines

00:20:17,359 --> 00:20:20,450
running at once and you want the cloud

00:20:18,710 --> 00:20:24,259
provider to balance traffic across them

00:20:20,450 --> 00:20:25,639
evenly those prices can can come back

00:20:24,259 --> 00:20:27,830
and bite you on your bill if you're not

00:20:25,639 --> 00:20:30,409
careful so ultimately with virtual

00:20:27,830 --> 00:20:31,820
machines most control most work but if

00:20:30,409 --> 00:20:33,980
you go this route you will be in good

00:20:31,820 --> 00:20:35,149
company because it is the way that a lot

00:20:33,980 --> 00:20:38,210
of people in the world run their

00:20:35,149 --> 00:20:41,750
software last piece that we're going to

00:20:38,210 --> 00:20:43,850
talk about here today is docker so

00:20:41,750 --> 00:20:46,760
docker is kind of a newcomer on the

00:20:43,850 --> 00:20:47,779
scene maybe a couple years ago if most

00:20:46,760 --> 00:20:51,620
of the techniques we've talked about

00:20:47,779 --> 00:20:52,970
today are going from least effort to

00:20:51,620 --> 00:20:54,799
least control

00:20:52,970 --> 00:20:57,649
sorry least effort and least control

00:20:54,799 --> 00:20:59,090
like with Heroku to the most effort and

00:20:57,649 --> 00:21:01,279
the most control with virtual machines

00:20:59,090 --> 00:21:02,690
you can kind of see docker as a way of

00:21:01,279 --> 00:21:05,630
trying to split the difference where

00:21:02,690 --> 00:21:07,880
we're going to set up our app just like

00:21:05,630 --> 00:21:09,350
it was in a virtual machine locally when

00:21:07,880 --> 00:21:10,850
we run our app it's going to think that

00:21:09,350 --> 00:21:13,190
it's in its own personal virtual

00:21:10,850 --> 00:21:14,330
environment but the docker containers

00:21:13,190 --> 00:21:15,980
that we use are going to be a lot more

00:21:14,330 --> 00:21:18,730
lightweight than a full virtual machine

00:21:15,980 --> 00:21:20,870
and a little easier to manipulate so

00:21:18,730 --> 00:21:24,769
usually I find that with docker it's

00:21:20,870 --> 00:21:27,230
easier to show than tell so we'll pop

00:21:24,769 --> 00:21:31,820
back over to our apps here we need two

00:21:27,230 --> 00:21:33,019
things to get our docker machine our

00:21:31,820 --> 00:21:34,549
docker container running in the cloud

00:21:33,019 --> 00:21:36,200
first we need to create this thing

00:21:34,549 --> 00:21:37,700
called a docker file which is going to

00:21:36,200 --> 00:21:43,070
tell docker how it should actually

00:21:37,700 --> 00:21:44,809
assemble our project inside oh yeah I'm

00:21:43,070 --> 00:21:50,440
not on localhost get out your Google

00:21:44,809 --> 00:21:50,440
Cloud thank you now is not the time

00:21:50,559 --> 00:21:57,110
cool so for this part doc files have

00:21:54,380 --> 00:21:58,730
their own weird syntax if those of you

00:21:57,110 --> 00:22:01,399
in the audience who know me know that I

00:21:58,730 --> 00:22:04,460
know this one all too well so we're

00:22:01,399 --> 00:22:06,500
going to pull off a start of our docker

00:22:04,460 --> 00:22:10,789
file by pulling from the Python base

00:22:06,500 --> 00:22:12,169
image we do 3 5 on build and then we're

00:22:10,789 --> 00:22:13,880
going to tell at which port we wanted to

00:22:12,169 --> 00:22:16,190
expose in production so this time I'm

00:22:13,880 --> 00:22:17,570
going to do 5,000 and then we tell it

00:22:16,190 --> 00:22:20,510
what command it should use to actually

00:22:17,570 --> 00:22:22,610
start things up and I'm actually going

00:22:20,510 --> 00:22:25,299
to go back and grab that same one from

00:22:22,610 --> 00:22:25,299
our proc file

00:22:29,169 --> 00:22:36,880
and then add that bind just like we had

00:22:31,059 --> 00:22:38,139
before 0.0004 5000 this time because

00:22:36,880 --> 00:22:40,630
that's one we're telling doctor to pay

00:22:38,139 --> 00:22:42,460
attention to so before we can actually

00:22:40,630 --> 00:22:44,769
run our project inside the docker

00:22:42,460 --> 00:22:46,149
container we need to build it so I'm

00:22:44,769 --> 00:22:46,419
going to docker build I'm going to

00:22:46,149 --> 00:22:53,200
called

00:22:46,419 --> 00:22:55,960
80 Baker / 5 waves and so docker is

00:22:53,200 --> 00:22:57,399
going to look at our code take a look at

00:22:55,960 --> 00:22:59,679
our requirements file install the

00:22:57,399 --> 00:23:00,909
requirements and then add some metadata

00:22:59,679 --> 00:23:03,039
about how we want to run the container

00:23:00,909 --> 00:23:05,019
and then to run it we're going to say

00:23:03,039 --> 00:23:06,820
docker run we need to tell it that we

00:23:05,019 --> 00:23:08,559
care about port 5,000 so I'm going to

00:23:06,820 --> 00:23:10,509
say take port 5,000 from our container

00:23:08,559 --> 00:23:14,049
and expose it on port 5,000 on our host

00:23:10,509 --> 00:23:18,009
and I want to run that image 80 Baker 5

00:23:14,049 --> 00:23:19,990
ways so we see Gina corn running inside

00:23:18,009 --> 00:23:22,990
the docker container now if we go and

00:23:19,990 --> 00:23:25,659
check out localhost 5,000 we've got our

00:23:22,990 --> 00:23:27,370
hello world awesome so the next piece to

00:23:25,659 --> 00:23:29,529
actually get our docker image running in

00:23:27,370 --> 00:23:31,600
the cloud is we first need to push it up

00:23:29,529 --> 00:23:34,629
to the docker hub it's basically like

00:23:31,600 --> 00:23:37,090
the github of docker so we do docker

00:23:34,629 --> 00:23:38,980
push 5 ways you'll see a lot of these

00:23:37,090 --> 00:23:41,950
layer already exists images coming up

00:23:38,980 --> 00:23:43,269
here and only that first one is the one

00:23:41,950 --> 00:23:45,399
that it actually had to push up on its

00:23:43,269 --> 00:23:47,139
own that's because docker is kind of

00:23:45,399 --> 00:23:49,179
smart enough to realize hey most of the

00:23:47,139 --> 00:23:51,039
stuff that's inside this image is stuff

00:23:49,179 --> 00:23:54,129
that's being pulled from the base Python

00:23:51,039 --> 00:23:55,870
image which I already know about so

00:23:54,129 --> 00:23:58,750
doctor comes with this extra tool called

00:23:55,870 --> 00:24:00,460
docker machine which lets you spin up

00:23:58,750 --> 00:24:03,039
virtual machines really easily and then

00:24:00,460 --> 00:24:04,149
SSH into them or sorry you can't acetate

00:24:03,039 --> 00:24:05,799
chained to them but you can also just

00:24:04,149 --> 00:24:07,539
manipulate them as if they were your

00:24:05,799 --> 00:24:10,450
localhost so I've already got one

00:24:07,539 --> 00:24:12,940
running here called 5 ways so we do the

00:24:10,450 --> 00:24:16,000
command to apply basically that docker

00:24:12,940 --> 00:24:19,440
virtual machine instance to my local

00:24:16,000 --> 00:24:22,830
environment by saying docker machine and

00:24:19,440 --> 00:24:22,830
five ways

00:24:27,530 --> 00:24:37,350
cool so I'm going to kill this one that

00:24:33,120 --> 00:24:39,990
we had locally and now to get things

00:24:37,350 --> 00:24:45,120
working on our machine in the cloud I'm

00:24:39,990 --> 00:24:48,120
going to pull down our five ways start

00:24:45,120 --> 00:24:50,010
it up just like we did locally five

00:24:48,120 --> 00:24:57,300
thousand five thousand eighty Baker five

00:24:50,010 --> 00:25:02,220
ways alright and then I'm just going to

00:24:57,300 --> 00:25:03,420
pop up another window here and there's a

00:25:02,220 --> 00:25:06,450
handy little command we can run to

00:25:03,420 --> 00:25:09,620
actually see what IP address our doctor

00:25:06,450 --> 00:25:14,420
machine is running on so grab this guy

00:25:09,620 --> 00:25:18,630
pop over port five thousand hello world

00:25:14,420 --> 00:25:19,980
cool so that one may have seemed a

00:25:18,630 --> 00:25:21,180
little bit like dark magic it's

00:25:19,980 --> 00:25:22,410
definitely the most advanced option that

00:25:21,180 --> 00:25:25,020
we talked about here but it does have

00:25:22,410 --> 00:25:26,460
some of its own pros and cons the pro is

00:25:25,020 --> 00:25:28,500
that it helps a lot with dev fraud

00:25:26,460 --> 00:25:29,670
parody so once you're running your app

00:25:28,500 --> 00:25:31,650
in production you're going to find that

00:25:29,670 --> 00:25:33,180
a lot of your biggest bugs are happening

00:25:31,650 --> 00:25:34,350
because something that was set up in

00:25:33,180 --> 00:25:36,870
your local development environment is

00:25:34,350 --> 00:25:38,940
not the same way that is actually being

00:25:36,870 --> 00:25:40,860
run in production doctor is great for

00:25:38,940 --> 00:25:42,120
helping with that it's nice for micro

00:25:40,860 --> 00:25:44,070
services if that's a thing that you're

00:25:42,120 --> 00:25:45,840
looking for it's also a great way to

00:25:44,070 --> 00:25:49,200
impress your friends I can speak with

00:25:45,840 --> 00:25:50,520
this personal experience the concept

00:25:49,200 --> 00:25:52,410
that it's one of the newest techniques

00:25:50,520 --> 00:25:53,070
out there the best practices are still

00:25:52,410 --> 00:25:55,200
getting settled

00:25:53,070 --> 00:25:56,370
probably less new than serverless at

00:25:55,200 --> 00:25:57,840
this point when you're looking at the

00:25:56,370 --> 00:26:00,390
documentation materials that are out

00:25:57,840 --> 00:26:03,060
there but still pretty new it works best

00:26:00,390 --> 00:26:05,370
when you and all your team go all-in on

00:26:03,060 --> 00:26:07,020
docker and it definitely has its own

00:26:05,370 --> 00:26:07,980
learning curve besides all the tools

00:26:07,020 --> 00:26:10,950
that you're actually putting inside

00:26:07,980 --> 00:26:12,780
these containers to run them so that's

00:26:10,950 --> 00:26:14,610
all I got folks the five techniques we

00:26:12,780 --> 00:26:16,530
covered our end rot karoku server list

00:26:14,610 --> 00:26:18,240
virtual machines and docker my name is

00:26:16,530 --> 00:26:19,890
Andrew Baker I'll be hanging at the

00:26:18,240 --> 00:26:20,790
Twilio booth in the expo hall all day

00:26:19,890 --> 00:26:22,680
tomorrow if you want to ask some

00:26:20,790 --> 00:26:26,430
questions thank you

00:26:22,680 --> 00:26:26,430
[Applause]

00:26:28,720 --> 00:26:33,539
[Applause]

00:26:34,100 --> 00:26:42,360
catch him out the booth with questions

00:26:38,840 --> 00:26:45,750
yeah thank you five demos successful

00:26:42,360 --> 00:26:48,840
Nadia single air you and I are both

00:26:45,750 --> 00:26:53,659
surprised I think thank you surprise

00:26:48,840 --> 00:26:53,659
very good thank you

00:27:03,090 --> 00:27:09,600
yeah yeah it was fun charting it and you

00:27:06,360 --> 00:27:14,039
know like I said hey hey dream oh hey hi

00:27:09,600 --> 00:27:20,630
thank you Thanks yeah please do

00:27:14,039 --> 00:27:20,630

YouTube URL: https://www.youtube.com/watch?v=vGphzPLemZE


