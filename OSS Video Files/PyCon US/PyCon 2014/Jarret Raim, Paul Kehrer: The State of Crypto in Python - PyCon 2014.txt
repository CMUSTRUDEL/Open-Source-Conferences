Title: Jarret Raim, Paul Kehrer: The State of Crypto in Python - PyCon 2014
Publication date: 2014-04-24
Playlist: PyCon 2014
Description: 
	Speaker: Jarret Raim, Paul Kehrer

There are a half-dozen major Python cryptography frameworks built on at least three separate C implementations, each with their own strengths and weaknesses and in various states of maintenance. This presentation will review the current state of the art and discuss the future of crypto in Python including a new library under development, PyPy support and more.

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:00,000 --> 00:00:11,940
so on make sure my clicker is working

00:00:08,970 --> 00:00:13,440
here alright so I'm jarem as we

00:00:11,940 --> 00:00:15,540
mentioned I'm the cloud security product

00:00:13,440 --> 00:00:16,920
manager at Rackspace so my job is to

00:00:15,540 --> 00:00:18,930
basically build products that our

00:00:16,920 --> 00:00:20,039
customers meet are used to meet various

00:00:18,930 --> 00:00:22,619
security needs as part of the

00:00:20,039 --> 00:00:24,660
configurations and I'm Paul carer and I

00:00:22,619 --> 00:00:25,800
my software developer on barbican which

00:00:24,660 --> 00:00:27,510
is a key management service for

00:00:25,800 --> 00:00:31,830
OpenStack and in my spare time I

00:00:27,510 --> 00:00:32,790
unfortunately do a lot of crypto so well

00:00:31,830 --> 00:00:35,430
today we're gonna be talking about the

00:00:32,790 --> 00:00:37,469
the state of crypto in Python so we put

00:00:35,430 --> 00:00:39,930
this talked in months and months and

00:00:37,469 --> 00:00:41,280
months ago and kind of since that point

00:00:39,930 --> 00:00:42,420
we've actually been working on a library

00:00:41,280 --> 00:00:43,980
that will talk about tonight that kind

00:00:42,420 --> 00:00:46,469
of does a little bit of trying to solve

00:00:43,980 --> 00:00:47,610
this problem but the running joke and

00:00:46,469 --> 00:00:49,559
our communities we're working on this

00:00:47,610 --> 00:00:50,610
libraries that it's basically a library

00:00:49,559 --> 00:00:53,449
created by people who make poor life

00:00:50,610 --> 00:00:57,600
choices because working in crypto is

00:00:53,449 --> 00:00:58,620
something else for sure so as we kind of

00:00:57,600 --> 00:00:59,850
get started one of the things we want to

00:00:58,620 --> 00:01:02,489
talk about a little bit as you know what

00:00:59,850 --> 00:01:04,320
do we actually want out of a cryptic

00:01:02,489 --> 00:01:06,360
library I don't know why the want is no

00:01:04,320 --> 00:01:08,640
longer on the slide but we'll pretend

00:01:06,360 --> 00:01:11,369
that it's there and so as we went out

00:01:08,640 --> 00:01:12,810
and looked at at the crypto libraries

00:01:11,369 --> 00:01:13,830
one of the products that I'm working on

00:01:12,810 --> 00:01:15,930
at Rackspace is a product called

00:01:13,830 --> 00:01:17,640
barbican it's a key management service

00:01:15,930 --> 00:01:19,590
for OpenStack which is an open source

00:01:17,640 --> 00:01:20,640
cloud platform and so one of the things

00:01:19,590 --> 00:01:22,380
we're looking as well we're going to be

00:01:20,640 --> 00:01:23,549
doing a lot of crypto work and barbican

00:01:22,380 --> 00:01:26,520
so we need to really understand what the

00:01:23,549 --> 00:01:28,650
crypto kind of landscape is in Python

00:01:26,520 --> 00:01:29,909
because everything in OpenStack is in

00:01:28,650 --> 00:01:30,900
python is we really went out there and

00:01:29,909 --> 00:01:32,280
we looked it all right well what do we

00:01:30,900 --> 00:01:34,110
what do we want out of a crypto library

00:01:32,280 --> 00:01:35,220
and so the first thing we want to be

00:01:34,110 --> 00:01:36,720
able to do is kind of make sure that we

00:01:35,220 --> 00:01:38,070
have the standard set of algorithms that

00:01:36,720 --> 00:01:39,329
we need right and so whenever you're

00:01:38,070 --> 00:01:40,409
writing a library other people are going

00:01:39,329 --> 00:01:42,030
to use that are going to be part of a

00:01:40,409 --> 00:01:43,170
big open source kind of system that

00:01:42,030 --> 00:01:44,520
needs interoperability and make sure

00:01:43,170 --> 00:01:47,340
that all the standard libraries are

00:01:44,520 --> 00:01:49,619
available for you know whatever use

00:01:47,340 --> 00:01:50,520
cases that your customers want in

00:01:49,619 --> 00:01:51,960
addition that we wanted to make sure

00:01:50,520 --> 00:01:54,450
that it was open source right so

00:01:51,960 --> 00:01:56,040
everything that that is in OpenStack is

00:01:54,450 --> 00:01:57,479
Apache to everything that we work on

00:01:56,040 --> 00:01:58,500
everything at Rackspace but most of the

00:01:57,479 --> 00:02:00,570
things that we work on our rack space or

00:01:58,500 --> 00:02:02,790
open source and from a security

00:02:00,570 --> 00:02:03,840
standpoint you know it's always a little

00:02:02,790 --> 00:02:05,280
bit better if the code is open source

00:02:03,840 --> 00:02:07,079
and you can have access to it you take a

00:02:05,280 --> 00:02:08,789
look at yourself audit yourself and kind

00:02:07,079 --> 00:02:10,170
of pay attention what's going on we

00:02:08,789 --> 00:02:12,330
wanted to have a pretty wide variety of

00:02:10,170 --> 00:02:14,190
Python support right so we didn't want

00:02:12,330 --> 00:02:15,840
something that was locked 227

00:02:14,190 --> 00:02:17,880
we wanted to be able to do pi/3 we want

00:02:15,840 --> 00:02:19,980
to be able to do pie pie and some of the

00:02:17,880 --> 00:02:21,110
various options that are out there and

00:02:19,980 --> 00:02:24,510
finally we wanted something that was

00:02:21,110 --> 00:02:25,560
maintained and strongly tested one of

00:02:24,510 --> 00:02:27,390
the things that we've noticed in a lot

00:02:25,560 --> 00:02:29,250
of the Python options that are out there

00:02:27,390 --> 00:02:31,470
now is that they're kind of a varying

00:02:29,250 --> 00:02:32,730
levels of both of those things it's

00:02:31,470 --> 00:02:34,050
really what we were looking for in the

00:02:32,730 --> 00:02:36,150
grand scheme of things is a

00:02:34,050 --> 00:02:37,410
constellation of features for these

00:02:36,150 --> 00:02:38,820
libraries that would make something that

00:02:37,410 --> 00:02:40,740
we could build on for a long period of

00:02:38,820 --> 00:02:42,030
time right crypto code is not something

00:02:40,740 --> 00:02:43,950
you want to go in and screw with on a

00:02:42,030 --> 00:02:45,360
day-to-day basis and so something that

00:02:43,950 --> 00:02:46,650
we could go in and build something on

00:02:45,360 --> 00:02:48,000
and provide other people that we could

00:02:46,650 --> 00:02:50,850
rely on for a while it's kind of

00:02:48,000 --> 00:02:52,140
something that we were looking for so we

00:02:50,850 --> 00:02:54,690
wanted to look at at what was out there

00:02:52,140 --> 00:02:57,510
right so we looked at you know openssl

00:02:54,690 --> 00:03:00,000
in botan and crypto plus plus and the

00:02:57,510 --> 00:03:01,920
crypto API and NSS and common crypto and

00:03:00,000 --> 00:03:02,850
G krypton polar SSL and all these

00:03:01,920 --> 00:03:04,680
libraries that are out there I mean

00:03:02,850 --> 00:03:06,210
they're just dozens and dozens libraries

00:03:04,680 --> 00:03:07,500
that people put together and one thing

00:03:06,210 --> 00:03:11,550
that you notice about all of these is

00:03:07,500 --> 00:03:16,080
that they're all written in C right and

00:03:11,550 --> 00:03:17,430
so why is that really the case and for

00:03:16,080 --> 00:03:19,739
those of you who probably already know

00:03:17,430 --> 00:03:21,390
the answer this it's that C allows a lot

00:03:19,739 --> 00:03:23,360
of low-level control that you cannot get

00:03:21,390 --> 00:03:25,380
with managed languages such as Python

00:03:23,360 --> 00:03:27,420
specifically there are things like

00:03:25,380 --> 00:03:30,360
timing and memory attacks uninitialized

00:03:27,420 --> 00:03:33,330
memory it's but the timing is actually

00:03:30,360 --> 00:03:34,500
one of the most extensive problems when

00:03:33,330 --> 00:03:36,000
you do things in crypto it's very

00:03:34,500 --> 00:03:38,130
important to do things constant time

00:03:36,000 --> 00:03:40,200
that means if you succeed if you fail

00:03:38,130 --> 00:03:41,790
what kind of bite you just processed all

00:03:40,200 --> 00:03:43,050
those things need to be they should be

00:03:41,790 --> 00:03:45,000
irrelevant from the standpoint of the

00:03:43,050 --> 00:03:48,090
amount of time and ideally the amount of

00:03:45,000 --> 00:03:49,800
power consumed by the process so those

00:03:48,090 --> 00:03:52,320
are things that unfortunately Python for

00:03:49,800 --> 00:03:55,260
all its wonderful parts cannot offer us

00:03:52,320 --> 00:03:57,180
right now we obviously would like to

00:03:55,260 --> 00:03:58,680
have existing code well obviously we

00:03:57,180 --> 00:04:00,780
just talked about that and it turns out

00:03:58,680 --> 00:04:02,610
to be an extensive amount of existing

00:04:00,780 --> 00:04:04,260
code in crypto now whether or not it's

00:04:02,610 --> 00:04:07,580
good well you guys can draw your own

00:04:04,260 --> 00:04:11,310
conclusions for the moment but it exists

00:04:07,580 --> 00:04:13,050
reviewed code now again some of the more

00:04:11,310 --> 00:04:14,640
recent things might imply that the

00:04:13,050 --> 00:04:17,040
reviews or maybe not as good as they

00:04:14,640 --> 00:04:19,350
should be over on the seaside but in

00:04:17,040 --> 00:04:21,810
general these projects have seen a lot

00:04:19,350 --> 00:04:23,610
of use most of their code is well

00:04:21,810 --> 00:04:26,850
reviewed maybe not so much in the TLS

00:04:23,610 --> 00:04:29,310
extension component but in general

00:04:26,850 --> 00:04:31,290
and you can largely trust it especially

00:04:29,310 --> 00:04:34,620
a lot of symmetric primitives with

00:04:31,290 --> 00:04:37,050
things like a GCM allows you to do

00:04:34,620 --> 00:04:38,370
low-level behaviors using actual

00:04:37,050 --> 00:04:39,840
Hardware extensions to guarantee

00:04:38,370 --> 00:04:40,830
constant time so these are things that

00:04:39,840 --> 00:04:43,500
have been developed over a long period

00:04:40,830 --> 00:04:45,090
of time and are very reliable in the

00:04:43,500 --> 00:04:46,950
future there there are some interesting

00:04:45,090 --> 00:04:49,530
languages that are very fast like rust

00:04:46,950 --> 00:04:51,300
and go that may have some ways to get

00:04:49,530 --> 00:04:53,250
away from sea but at the moment if you

00:04:51,300 --> 00:04:56,220
want fi then the only game in town and

00:04:53,250 --> 00:04:57,480
see I think we managed to make it about

00:04:56,220 --> 00:04:59,550
a minute and a half before we made

00:04:57,480 --> 00:05:00,990
openssl jokes that's pretty that's

00:04:59,550 --> 00:05:03,210
better than I thought it's pretty good

00:05:00,990 --> 00:05:04,830
all right so we kind of went looked at

00:05:03,210 --> 00:05:05,910
at the major libraries and see right so

00:05:04,830 --> 00:05:07,200
we were gonna look at all of them there

00:05:05,910 --> 00:05:08,520
are dozens and dozens and dozens and

00:05:07,200 --> 00:05:09,960
dozens but we decided to try to pick

00:05:08,520 --> 00:05:11,610
what we thought was a reasonable sample

00:05:09,960 --> 00:05:13,020
of what people actually use right so

00:05:11,610 --> 00:05:14,880
open SSL is obviously the king daddy

00:05:13,020 --> 00:05:16,230
that's you know the the most common that

00:05:14,880 --> 00:05:18,060
you see it's it's the most widely

00:05:16,230 --> 00:05:21,060
deployed that used in all kinds of

00:05:18,060 --> 00:05:22,920
platforms all over the place NSS which

00:05:21,060 --> 00:05:25,170
was originally the netscape library

00:05:22,920 --> 00:05:27,180
which is now mostly used by firefox to

00:05:25,170 --> 00:05:28,500
do all of its crypto although it's used

00:05:27,180 --> 00:05:30,090
in a couple of other areas yeah Red Hat

00:05:28,500 --> 00:05:31,410
uses a quintic steer it uses it quite

00:05:30,090 --> 00:05:35,100
extensively as well so that one's out

00:05:31,410 --> 00:05:36,240
there NaCl so which we're actually

00:05:35,100 --> 00:05:39,840
supposed to call salt but no one ever

00:05:36,240 --> 00:05:41,760
does and then boat on which is actually

00:05:39,840 --> 00:05:42,870
a relatively interesting library it's

00:05:41,760 --> 00:05:44,370
one of the sea libraries that actually

00:05:42,870 --> 00:05:46,650
has a little bit better testing story

00:05:44,370 --> 00:05:47,790
than most which is why we kind of

00:05:46,650 --> 00:05:49,530
included it here that was kind of

00:05:47,790 --> 00:05:50,940
interesting in that case we looked at

00:05:49,530 --> 00:05:54,300
common crypto from Apple we look at the

00:05:50,940 --> 00:05:56,220
the Microsoft side of things and then we

00:05:54,300 --> 00:05:57,360
looked at at lib decrypt which when we

00:05:56,220 --> 00:05:59,700
got into this neither of us had ever

00:05:57,360 --> 00:06:00,840
actually heard of and we were kind of

00:05:59,700 --> 00:06:02,940
shocked when we looked the download

00:06:00,840 --> 00:06:05,250
counts and Lib g crypt was like super

00:06:02,940 --> 00:06:06,900
high up and it turns out that it's

00:06:05,250 --> 00:06:09,240
mostly i think a debian vendetta right

00:06:06,900 --> 00:06:11,160
yeah the debian has some strong views on

00:06:09,240 --> 00:06:12,900
free software of course and so lib she

00:06:11,160 --> 00:06:15,930
tripped and new TLS or something they

00:06:12,900 --> 00:06:18,090
push libraries to use or sorry packages

00:06:15,930 --> 00:06:19,500
inside their repos you yeah so it ended

00:06:18,090 --> 00:06:20,670
up being quite widely deployed much

00:06:19,500 --> 00:06:21,720
wider than we thought and so we kind of

00:06:20,670 --> 00:06:23,070
spent a little time looking at that and

00:06:21,720 --> 00:06:24,210
so if you look at the top kind of the

00:06:23,070 --> 00:06:26,130
stuff that we cared about right we want

00:06:24,210 --> 00:06:27,840
to care that it was open source we cared

00:06:26,130 --> 00:06:31,770
that it was cross-platform right we

00:06:27,840 --> 00:06:33,420
cared that it was maintained we did want

00:06:31,770 --> 00:06:34,800
to look at kind of ubiquitous is kind of

00:06:33,420 --> 00:06:36,570
a little bit of a subjective measure but

00:06:34,800 --> 00:06:38,100
like how likely is it that you as a

00:06:36,570 --> 00:06:38,409
developer or a consumer of your library

00:06:38,100 --> 00:06:40,300
would have

00:06:38,409 --> 00:06:41,199
access to that particular piece we

00:06:40,300 --> 00:06:42,580
wanted to make sure that it had the

00:06:41,199 --> 00:06:44,860
standard algorithm so that you could go

00:06:42,580 --> 00:06:48,309
and actually you know ask for GCM and

00:06:44,860 --> 00:06:50,050
get GCM right and one thing that I'm not

00:06:48,309 --> 00:06:51,489
sure how much we care so much about but

00:06:50,050 --> 00:06:52,749
one thing that does come up in crypto

00:06:51,489 --> 00:06:55,059
conversations especially with your

00:06:52,749 --> 00:06:56,679
larger enterprise customers is phipps

00:06:55,059 --> 00:06:59,559
compliance or Common Criteria compliance

00:06:56,679 --> 00:07:01,449
both of which are kind of granted by the

00:06:59,559 --> 00:07:03,129
US government these days so I'm not sure

00:07:01,449 --> 00:07:05,889
that we care as much anymore I cannot

00:07:03,129 --> 00:07:07,269
stress enough you do not want phipps oh

00:07:05,889 --> 00:07:08,949
right yes if you were going to use

00:07:07,269 --> 00:07:12,610
openssl don't use the tips branch that

00:07:08,949 --> 00:07:13,719
stuff's messed up so anyway it's one of

00:07:12,610 --> 00:07:16,089
those things that like you do hear about

00:07:13,719 --> 00:07:17,259
it I think you know the NSA is pretty

00:07:16,089 --> 00:07:18,519
much screwed that up for everybody at

00:07:17,259 --> 00:07:19,569
this point so I'm not sure that we care

00:07:18,519 --> 00:07:22,149
so much anymore but it was something

00:07:19,569 --> 00:07:23,860
that we looked at and and of course you

00:07:22,149 --> 00:07:26,169
know I mean openssl comes out on top

00:07:23,860 --> 00:07:27,429
which is not too much of a surprise I

00:07:26,169 --> 00:07:28,869
mean it was kind of what we expected

00:07:27,429 --> 00:07:30,399
going into it but there were some other

00:07:28,869 --> 00:07:31,869
pieces that were interesting like nacl

00:07:30,399 --> 00:07:33,069
is really cool unfortunately it doesn't

00:07:31,869 --> 00:07:34,349
really have the standard algorithms that

00:07:33,069 --> 00:07:36,159
you need so that makes it kind of hard

00:07:34,349 --> 00:07:38,409
some of these things are really hard to

00:07:36,159 --> 00:07:39,189
build and they don't necessarily work

00:07:38,409 --> 00:07:40,959
too well in certain environments

00:07:39,189 --> 00:07:42,759
obviously the apple stuff and the

00:07:40,959 --> 00:07:44,259
microsoft stuff you know reasonably good

00:07:42,759 --> 00:07:45,399
but some of its not open source it's

00:07:44,259 --> 00:07:47,769
obviously not available in a lot of

00:07:45,399 --> 00:07:50,289
different platforms and so having access

00:07:47,769 --> 00:07:51,490
to it is is not super great and so we're

00:07:50,289 --> 00:07:52,899
looking at these these types of things

00:07:51,490 --> 00:07:55,449
open SSL was kind of where we'll spend

00:07:52,899 --> 00:07:56,499
most of our time talking but as we'll

00:07:55,449 --> 00:07:58,209
talk about a little bit later there is

00:07:56,499 --> 00:07:59,949
we've kind of allowed 4 ways for people

00:07:58,209 --> 00:08:01,240
to use some of these other options and

00:07:59,949 --> 00:08:03,099
in some cases there are really good

00:08:01,240 --> 00:08:04,300
reasons if you're sitting on top of an

00:08:03,099 --> 00:08:05,919
Apple device or sitting on top of

00:08:04,300 --> 00:08:07,629
something running Windows to use those

00:08:05,919 --> 00:08:10,539
particular platforms rather than using a

00:08:07,629 --> 00:08:12,099
bundled openssl in fact all the people

00:08:10,539 --> 00:08:13,479
that didn't have to patch for heart

00:08:12,099 --> 00:08:14,529
later probably happy about that at the

00:08:13,479 --> 00:08:17,979
moment although they might have had to

00:08:14,529 --> 00:08:19,929
patch for go to fail well yeah so kind

00:08:17,979 --> 00:08:21,399
of stepping up okay now we looked at the

00:08:19,929 --> 00:08:22,899
c libraries right so now we know what

00:08:21,399 --> 00:08:24,610
the state of the world is in see those

00:08:22,899 --> 00:08:26,649
are our options right so now we can look

00:08:24,610 --> 00:08:27,939
at how like what how Python can actually

00:08:26,649 --> 00:08:29,559
use those libraries right and so there's

00:08:27,939 --> 00:08:31,689
a series of kind of Python libraries

00:08:29,559 --> 00:08:33,699
here we got em to crypto pi crypto pi

00:08:31,689 --> 00:08:37,240
openssl the pipe on SS guys and then

00:08:33,699 --> 00:08:38,649
botan also has a a Python version of it

00:08:37,240 --> 00:08:39,969
and so what we cared about here was kind

00:08:38,649 --> 00:08:41,800
of what back-end that particular library

00:08:39,969 --> 00:08:43,509
used so what c library it was using to

00:08:41,800 --> 00:08:45,339
actually do its work again we care about

00:08:43,509 --> 00:08:46,930
maintenance and we care deeply about

00:08:45,339 --> 00:08:48,819
Python support right so we wanted to

00:08:46,930 --> 00:08:50,019
make sure that we could do PI 3 and we

00:08:48,819 --> 00:08:51,740
could do pie pie and some of these other

00:08:50,019 --> 00:08:53,300
kind of options that are out there

00:08:51,740 --> 00:08:54,320
which tends to be somewhat of a problem

00:08:53,300 --> 00:08:56,870
for libraries that are dumping

00:08:54,320 --> 00:08:58,520
everything down into see we wanted to

00:08:56,870 --> 00:08:59,600
look at the state of review for all

00:08:58,520 --> 00:09:01,130
these you'll notice that the answer is

00:08:59,600 --> 00:09:03,470
no on all of them this is not to knock

00:09:01,130 --> 00:09:04,970
on anybody doing reviews like having

00:09:03,470 --> 00:09:07,399
professional crypto reviews of this type

00:09:04,970 --> 00:09:08,750
of code is really very expensive and if

00:09:07,399 --> 00:09:09,800
you're doing it right in Python you're

00:09:08,750 --> 00:09:12,290
generally not doing any crypto

00:09:09,800 --> 00:09:13,459
operations in Python anyway I'm so not

00:09:12,290 --> 00:09:15,500
super critical but it was something that

00:09:13,459 --> 00:09:16,700
we wanted to kind of call out lastly

00:09:15,500 --> 00:09:18,950
kind of completeness is very subjective

00:09:16,700 --> 00:09:20,149
but kind of the you know some kind of

00:09:18,950 --> 00:09:22,399
notes or whatever that we had on the

00:09:20,149 --> 00:09:23,630
structure and so well the ones it's

00:09:22,399 --> 00:09:25,790
interesting to call out since the time

00:09:23,630 --> 00:09:28,580
that we pitch this talk pi openssl has

00:09:25,790 --> 00:09:30,200
actually rebased all of their library on

00:09:28,580 --> 00:09:31,670
top of our library cryptography which

00:09:30,200 --> 00:09:33,260
we'll talk a little bit about later and

00:09:31,670 --> 00:09:35,089
so some of these answers with the

00:09:33,260 --> 00:09:37,640
asterisks are basically because if you

00:09:35,089 --> 00:09:39,649
take it as it is today it has much

00:09:37,640 --> 00:09:42,410
better options than it did about three

00:09:39,649 --> 00:09:43,370
or four months ago and but you know some

00:09:42,410 --> 00:09:46,459
of the big ones that we saw I mean

00:09:43,370 --> 00:09:47,839
obviously no pi PI R pi/3 support em to

00:09:46,459 --> 00:09:49,490
crypto just start just got a new

00:09:47,839 --> 00:09:51,080
maintainer a little while ago yep just a

00:09:49,490 --> 00:09:52,459
few months ago yep so he's been getting

00:09:51,080 --> 00:09:55,730
it getting it working again in those

00:09:52,459 --> 00:09:56,959
types of things you know and mostly kind

00:09:55,730 --> 00:09:58,610
of Python support was a big problem for

00:09:56,959 --> 00:10:00,410
us and then of course pi cripta which is

00:09:58,610 --> 00:10:03,110
by far the most widely deployed python

00:10:00,410 --> 00:10:05,510
crypto library which is great is that

00:10:03,110 --> 00:10:07,880
has its own see back end so it's kind of

00:10:05,510 --> 00:10:09,770
bespoke see written for themselves

00:10:07,880 --> 00:10:11,899
specifically for that library it's never

00:10:09,770 --> 00:10:13,190
been an audited by anybody doesn't mean

00:10:11,899 --> 00:10:14,480
that it's necessarily good or bad just

00:10:13,190 --> 00:10:18,260
means that that that work hasn't been

00:10:14,480 --> 00:10:19,670
done yet and of course boton is really

00:10:18,260 --> 00:10:21,709
quite painful to build and install if i

00:10:19,670 --> 00:10:23,690
remember correctly yes easy to build lib

00:10:21,709 --> 00:10:26,959
botan not so easy to get the python

00:10:23,690 --> 00:10:28,250
bindings yeah you know but the most

00:10:26,959 --> 00:10:29,240
important thing for us that you kind of

00:10:28,250 --> 00:10:30,770
come out of this looking at is that

00:10:29,240 --> 00:10:32,870
almost all these Python libraries

00:10:30,770 --> 00:10:34,279
basically require that you as the

00:10:32,870 --> 00:10:36,500
developer have a very deep understanding

00:10:34,279 --> 00:10:38,959
of how the C library works these are

00:10:36,500 --> 00:10:40,940
very very thin layers they're not really

00:10:38,959 --> 00:10:42,649
necessarily pythonic it's really just

00:10:40,940 --> 00:10:44,600
like hey this is like literally the same

00:10:42,649 --> 00:10:47,089
name that you see in the openssl LC code

00:10:44,600 --> 00:10:49,100
is exactly what it exposes in Python and

00:10:47,089 --> 00:10:51,380
you better know how to call that and you

00:10:49,100 --> 00:10:54,050
can crash Python very easily and you can

00:10:51,380 --> 00:10:55,130
do very bad things and it won't prevent

00:10:54,050 --> 00:10:58,279
you from doing any of that and so

00:10:55,130 --> 00:10:59,660
there's no kind of you know non foot gun

00:10:58,279 --> 00:11:01,190
version of these libraries you're almost

00:10:59,660 --> 00:11:04,339
guaranteed to blow your toes off unless

00:11:01,190 --> 00:11:05,510
you really know what you're doing so

00:11:04,339 --> 00:11:07,010
after all that

00:11:05,510 --> 00:11:08,180
we looked and said okay well do we you

00:11:07,010 --> 00:11:09,620
know there's all these options right we

00:11:08,180 --> 00:11:10,820
just went through 20 or 30 or whatever

00:11:09,620 --> 00:11:12,470
different libraries do we really need

00:11:10,820 --> 00:11:18,020
another one and of course the answer to

00:11:12,470 --> 00:11:20,960
that by any real developers yes so we we

00:11:18,020 --> 00:11:22,430
built one and so today we'll be spending

00:11:20,960 --> 00:11:24,560
a little bit of time talking about the

00:11:22,430 --> 00:11:26,990
library which we call cryptography its

00:11:24,560 --> 00:11:29,930
cryptography I oh it's on github under

00:11:26,990 --> 00:11:31,400
pipe pyc a slash cryptography pull it

00:11:29,930 --> 00:11:33,770
out there and the main goals that we

00:11:31,400 --> 00:11:35,750
wanted to achieve with wits library was

00:11:33,770 --> 00:11:37,040
one to expand our to make sure that it

00:11:35,750 --> 00:11:38,480
has all the modern algorithms that we

00:11:37,040 --> 00:11:40,250
want so especially with all the problems

00:11:38,480 --> 00:11:42,320
that we've had with TLS which will be a

00:11:40,250 --> 00:11:44,720
lovely talk tomorrow about the state of

00:11:42,320 --> 00:11:46,160
TLS you should all go to that you know

00:11:44,720 --> 00:11:47,780
being able to jump to some linear

00:11:46,160 --> 00:11:50,000
algorithms like GCM making sure we have

00:11:47,780 --> 00:11:51,890
forward security all these various other

00:11:50,000 --> 00:11:52,850
things are becoming much much much more

00:11:51,890 --> 00:11:54,800
important in fact they've been important

00:11:52,850 --> 00:11:56,870
for a long time we've just chosen to

00:11:54,800 --> 00:11:58,190
ignore them but having access to those

00:11:56,870 --> 00:11:59,360
modern algorithms is now getting very

00:11:58,190 --> 00:12:01,070
very important we wanted to make sure

00:11:59,360 --> 00:12:03,620
the library was really really strongly

00:12:01,070 --> 00:12:04,880
tested one of those things that in fact

00:12:03,620 --> 00:12:06,860
we'll talk a lot about how we kind of do

00:12:04,880 --> 00:12:08,510
testing in cryptography and we wanted to

00:12:06,860 --> 00:12:10,400
make sure that there was it was a saint

00:12:08,510 --> 00:12:11,840
a p.i with safe defaults so that if you

00:12:10,400 --> 00:12:12,980
as a developer went and tried to use it

00:12:11,840 --> 00:12:14,180
the same way that you use every other

00:12:12,980 --> 00:12:15,590
library right you have a problem to

00:12:14,180 --> 00:12:16,760
solve you go out and you do some

00:12:15,590 --> 00:12:18,350
searching you figure out how to do it

00:12:16,760 --> 00:12:19,790
you type some code in hey it works great

00:12:18,350 --> 00:12:22,130
right well we know encrypt all and

00:12:19,790 --> 00:12:24,730
that's hard because working and not

00:12:22,130 --> 00:12:26,750
working can look the same right and so

00:12:24,730 --> 00:12:29,060
we wanted to make sure that if you did

00:12:26,750 --> 00:12:30,950
the same thing that the same thing was

00:12:29,060 --> 00:12:32,480
safe right rather than having to know

00:12:30,950 --> 00:12:33,590
that if you happen to pass one into this

00:12:32,480 --> 00:12:35,060
function it turns out that that

00:12:33,590 --> 00:12:36,950
completely validates all of the work

00:12:35,060 --> 00:12:38,720
that you've done we wanted to support pi

00:12:36,950 --> 00:12:39,890
PI and Python 3 we wanted to have

00:12:38,720 --> 00:12:42,140
something that was maintained obviously

00:12:39,890 --> 00:12:43,370
we wanted to have no known broken

00:12:42,140 --> 00:12:45,470
options or a lot of libraries out there

00:12:43,370 --> 00:12:47,060
right now that kind of for historical

00:12:45,470 --> 00:12:48,770
reasons or various other reasons include

00:12:47,060 --> 00:12:50,420
things that are known to be broken and

00:12:48,770 --> 00:12:51,800
they were just exposed like everything

00:12:50,420 --> 00:12:53,480
else so if you don't happen to know that

00:12:51,800 --> 00:12:55,580
and you use them then you've just

00:12:53,480 --> 00:12:56,750
screwed yourself and then of course we

00:12:55,580 --> 00:12:58,640
wanted to offer a high level API which

00:12:56,750 --> 00:13:00,560
we'll talk a little bit about when we

00:12:58,640 --> 00:13:01,400
get there so I did want to kind of call

00:13:00,560 --> 00:13:03,350
out all the people that have been

00:13:01,400 --> 00:13:05,000
involved in cryptography because working

00:13:03,350 --> 00:13:07,490
with openssl is enough to drive anyone

00:13:05,000 --> 00:13:08,630
insane and so that the top for

00:13:07,490 --> 00:13:10,760
contributors up here according to get

00:13:08,630 --> 00:13:12,140
hover on the top one of which being Paul

00:13:10,760 --> 00:13:13,400
which are kind of general joke is that

00:13:12,140 --> 00:13:15,230
Paul writes all the code and the rest of

00:13:13,400 --> 00:13:16,730
us just review it and then there about

00:13:15,230 --> 00:13:18,080
30 or so people i'm not going to go

00:13:16,730 --> 00:13:19,279
through all of them obviously but there

00:13:18,080 --> 00:13:20,360
are lots of people who come and hang out

00:13:19,279 --> 00:13:21,860
one of the things I wanted to kind of

00:13:20,360 --> 00:13:23,480
call out for this is that a lot of times

00:13:21,860 --> 00:13:24,800
people think they can't contribute to a

00:13:23,480 --> 00:13:27,350
project like this if they're not crypto

00:13:24,800 --> 00:13:29,720
experts and that's really not true we've

00:13:27,350 --> 00:13:31,069
had theirs I think I don't know at least

00:13:29,720 --> 00:13:33,170
five or ten of the people down here

00:13:31,069 --> 00:13:34,670
helped us with packaging obviously we

00:13:33,170 --> 00:13:35,809
always need people to kind of read and

00:13:34,670 --> 00:13:38,240
try out the docs and tell us whether

00:13:35,809 --> 00:13:39,079
they suck opinions on API design and

00:13:38,240 --> 00:13:40,850
various other things are always

00:13:39,079 --> 00:13:42,769
important right so you don't have to be

00:13:40,850 --> 00:13:44,120
a crypto expert to come and help right

00:13:42,769 --> 00:13:45,589
and so if you're interested in this if

00:13:44,120 --> 00:13:47,029
security is the thing that that you like

00:13:45,589 --> 00:13:48,800
to get involved in if cryptos something

00:13:47,029 --> 00:13:50,300
that that kind of floats your boat then

00:13:48,800 --> 00:13:52,370
come and hang out on the IRC channel

00:13:50,300 --> 00:13:55,189
there's a link to it at the end of the

00:13:52,370 --> 00:13:56,420
talk here you don't have to be a crypto

00:13:55,189 --> 00:13:57,740
master to be able to do it in fact I

00:13:56,420 --> 00:14:01,100
most definitely am NOT I don't how much

00:13:57,740 --> 00:14:02,389
help I am but I do hang out a lot all

00:14:01,100 --> 00:14:04,639
right so let's talk a little bit about

00:14:02,389 --> 00:14:07,069
the actual structure of the project so

00:14:04,639 --> 00:14:10,360
cryptography is based on cff I which is

00:14:07,069 --> 00:14:13,699
a a Python package that allows you to be

00:14:10,360 --> 00:14:14,839
up at five fans out there so C F of I is

00:14:13,699 --> 00:14:17,360
a Python package that allows you to

00:14:14,839 --> 00:14:20,420
define either at the ABI or the API

00:14:17,360 --> 00:14:22,550
level a set of functions and then bind

00:14:20,420 --> 00:14:24,559
them into your Python code so that you

00:14:22,550 --> 00:14:26,269
can pass back and forth from C to python

00:14:24,559 --> 00:14:27,910
and vice versa it provides a bunch of

00:14:26,269 --> 00:14:30,379
wrappers around that so you can declare

00:14:27,910 --> 00:14:31,879
character pointers and all sorts other

00:14:30,379 --> 00:14:34,220
things and translate them into Python

00:14:31,879 --> 00:14:36,350
strings and back and forth and do things

00:14:34,220 --> 00:14:37,759
of that nature which is very nice along

00:14:36,350 --> 00:14:39,199
with allowing you to register things for

00:14:37,759 --> 00:14:41,420
later garbage collection so that way you

00:14:39,199 --> 00:14:42,829
can actually kind of hand that off to

00:14:41,420 --> 00:14:44,990
the Python runtime and not worry about

00:14:42,829 --> 00:14:47,360
any of that stuff so at the very bottom

00:14:44,990 --> 00:14:50,300
layer we have our bindings our bindings

00:14:47,360 --> 00:14:52,759
are exactly that in the primary case

00:14:50,300 --> 00:14:55,129
there are a whole whole lot of open SSL

00:14:52,759 --> 00:14:58,129
functions that are bound openssl has a

00:14:55,129 --> 00:15:00,259
very interesting API that is not

00:14:58,129 --> 00:15:03,620
particularly reliable from version to

00:15:00,259 --> 00:15:05,179
version or even patch to patch so we

00:15:03,620 --> 00:15:06,800
have a lot of if deaths unfortunately

00:15:05,179 --> 00:15:10,040
but you know that just kind of mimics

00:15:06,800 --> 00:15:12,319
the openssl API at this point so at this

00:15:10,040 --> 00:15:14,389
this is the layer that actually on pi

00:15:12,319 --> 00:15:17,209
sorry excuse me this is the way that pie

00:15:14,389 --> 00:15:19,610
openssl consumes as of 0.1 for which i

00:15:17,209 --> 00:15:21,350
would like to call out and thank JP very

00:15:19,610 --> 00:15:23,870
very much for actually going ahead and

00:15:21,350 --> 00:15:26,899
doing that that allows pie openssl to

00:15:23,870 --> 00:15:28,459
run on pi 2 pi 3 pi pi and also frees

00:15:26,899 --> 00:15:30,370
him from the burden of ever having to

00:15:28,459 --> 00:15:32,990
deal with any of the sea bindings again

00:15:30,370 --> 00:15:35,959
so PI openssl is now up your price

00:15:32,990 --> 00:15:37,190
package and if the m2 crypto maintainer

00:15:35,959 --> 00:15:38,480
happens to be in the audience I would be

00:15:37,190 --> 00:15:41,390
happy to discuss whether or not that's

00:15:38,480 --> 00:15:43,940
possible to do for you as well at the

00:15:41,390 --> 00:15:45,709
next level we have the hazmat layer so

00:15:43,940 --> 00:15:49,779
it is literally called the hazmat layer

00:15:45,709 --> 00:15:52,040
to use it you use cryptography hazmat

00:15:49,779 --> 00:15:54,830
this is the layer that allows you to do

00:15:52,040 --> 00:15:56,630
things that crypto allows so that means

00:15:54,830 --> 00:15:58,130
anything that you can do in crypto you

00:15:56,630 --> 00:16:00,980
can do in here that includes shooting

00:15:58,130 --> 00:16:02,300
yourself in the foot and in fact this is

00:16:00,980 --> 00:16:05,180
a layer we're shooting yourself in the

00:16:02,300 --> 00:16:06,920
foot is pretty likely so we would prefer

00:16:05,180 --> 00:16:08,180
people not use this layer however if you

00:16:06,920 --> 00:16:09,980
know what you're doing well we can't

00:16:08,180 --> 00:16:11,510
stop you we've certainly written a lot

00:16:09,980 --> 00:16:13,130
of documentation for every single

00:16:11,510 --> 00:16:15,560
function that exists in it we've talked

00:16:13,130 --> 00:16:17,300
about every single block side for every

00:16:15,560 --> 00:16:18,920
single stream cipher all the different

00:16:17,300 --> 00:16:20,390
padding modes for RSA we've exposed

00:16:18,920 --> 00:16:22,370
whether or not those padding modes makes

00:16:20,390 --> 00:16:23,930
sense whether or not you need to be how

00:16:22,370 --> 00:16:26,089
you would do salt length recovery and

00:16:23,930 --> 00:16:27,050
probabilistic signature scheme things of

00:16:26,089 --> 00:16:29,300
that nature those are all there and

00:16:27,050 --> 00:16:30,440
hazmat those are all things ideally you

00:16:29,300 --> 00:16:32,270
shouldn't really need to worry about

00:16:30,440 --> 00:16:34,490
because at the top layer we have the

00:16:32,270 --> 00:16:36,920
recipes now at the moment we only have

00:16:34,490 --> 00:16:38,089
one recipe so you know your unfortunate

00:16:36,920 --> 00:16:39,410
going to have to use the hazmat layer if

00:16:38,089 --> 00:16:43,010
you want to do a whole lot but the

00:16:39,410 --> 00:16:44,209
recipes are designed to be one shot when

00:16:43,010 --> 00:16:46,700
I shouldn't say one shot they are

00:16:44,209 --> 00:16:49,190
designed to be box unboxed model where

00:16:46,700 --> 00:16:51,050
you can send in some data send us some

00:16:49,190 --> 00:16:53,480
bytes get back some bites and not have

00:16:51,050 --> 00:16:55,720
to worry about anything else so right

00:16:53,480 --> 00:16:58,579
now we have fernet which is actually a

00:16:55,720 --> 00:17:00,410
AE ad so that would be an authenticated

00:16:58,579 --> 00:17:01,579
encryption with additional data but all

00:17:00,410 --> 00:17:03,800
you have to really know about it is it's

00:17:01,579 --> 00:17:05,150
encrypted data that has an H mac for

00:17:03,800 --> 00:17:07,579
authentication to verify but no one's

00:17:05,150 --> 00:17:09,740
changed the data so you get to generate

00:17:07,579 --> 00:17:11,449
a key you pass some data and you get

00:17:09,740 --> 00:17:13,459
back your encrypted data and then when

00:17:11,449 --> 00:17:15,110
you need to decrypt it you do the exact

00:17:13,459 --> 00:17:16,100
same thing and that's all you need to

00:17:15,110 --> 00:17:17,569
know you don't need to know what

00:17:16,100 --> 00:17:18,770
initialization vectors are you don't

00:17:17,569 --> 00:17:19,699
need to know what annonces you don't

00:17:18,770 --> 00:17:21,410
need to know what the difference between

00:17:19,699 --> 00:17:22,819
the two is which by the way even

00:17:21,410 --> 00:17:25,069
cryptographers will have trouble telling

00:17:22,819 --> 00:17:26,540
you the difference and you certainly

00:17:25,069 --> 00:17:28,189
don't need to worry about whether or not

00:17:26,540 --> 00:17:30,320
reuse of those things is going to be a

00:17:28,189 --> 00:17:32,300
problem or how many bytes you're allowed

00:17:30,320 --> 00:17:34,370
to encrypt before you're going to start

00:17:32,300 --> 00:17:37,850
having probability of reuse and things

00:17:34,370 --> 00:17:39,110
of that nature so certainly anybody

00:17:37,850 --> 00:17:40,670
who's interested in these sorts of

00:17:39,110 --> 00:17:42,590
things recipes or where we actually need

00:17:40,670 --> 00:17:44,480
ideas we want to know what your use

00:17:42,590 --> 00:17:46,610
cases are and what you need to solve

00:17:44,480 --> 00:17:46,870
because we can't build recipes or at

00:17:46,610 --> 00:17:48,580
least

00:17:46,870 --> 00:17:52,000
try and convince cryptographers we know

00:17:48,580 --> 00:17:53,890
if LVH is in the audience will be you we

00:17:52,000 --> 00:17:54,910
would certainly like to know those that

00:17:53,890 --> 00:17:59,860
that information so we can actually

00:17:54,910 --> 00:18:02,650
build these recipes appropriately all

00:17:59,860 --> 00:18:04,930
right so as part of this whole system we

00:18:02,650 --> 00:18:07,630
have a concept called back ends our

00:18:04,930 --> 00:18:10,450
system is built to be agnostic to the

00:18:07,630 --> 00:18:12,490
underlying c library and that means that

00:18:10,450 --> 00:18:14,320
you can choose whatever back-end you

00:18:12,490 --> 00:18:15,730
want maybe you really hate openness oh

00:18:14,320 --> 00:18:17,050
maybe you think heartbleed is just the

00:18:15,730 --> 00:18:19,870
tip of the iceberg and you would rather

00:18:17,050 --> 00:18:21,400
go over and use common crypto common

00:18:19,870 --> 00:18:23,980
crypto is actually currently our

00:18:21,400 --> 00:18:25,300
preferred back-end on OS 10 we don't

00:18:23,980 --> 00:18:27,130
actually implement any of the secure

00:18:25,300 --> 00:18:28,690
transport components so none of the

00:18:27,130 --> 00:18:32,559
parts that have had recent bugs are

00:18:28,690 --> 00:18:34,420
implemented we however we also have a

00:18:32,559 --> 00:18:35,590
concept called multi back end and the

00:18:34,420 --> 00:18:37,360
purpose of multi back end is to

00:18:35,590 --> 00:18:39,820
eventually allow us to basically compose

00:18:37,360 --> 00:18:41,800
as many backends as we want such that

00:18:39,820 --> 00:18:45,429
you can choose I actually want to use

00:18:41,800 --> 00:18:47,710
poly 1305 which is a DJ B thing from

00:18:45,429 --> 00:18:52,030
from the salt library and I want to use

00:18:47,710 --> 00:18:53,230
that with AES for some reason I don't

00:18:52,030 --> 00:18:55,270
know why you do that but maybe you would

00:18:53,230 --> 00:18:57,690
or maybe you want to use chacha and you

00:18:55,270 --> 00:19:00,760
want to you want to hash that against

00:18:57,690 --> 00:19:02,380
Blake to those are things that right now

00:19:00,760 --> 00:19:03,700
there it would be very difficult to do

00:19:02,380 --> 00:19:05,170
in a sea library but within our

00:19:03,700 --> 00:19:07,030
libraries it will allow you to compose

00:19:05,170 --> 00:19:08,530
across the the different backends and it

00:19:07,030 --> 00:19:09,580
will actually stitch them together such

00:19:08,530 --> 00:19:12,910
that you'll be able to accomplish those

00:19:09,580 --> 00:19:14,309
goals obviously as part of this the idea

00:19:12,910 --> 00:19:17,050
is that NEC back-end can be included

00:19:14,309 --> 00:19:18,790
we've tried to structure the system such

00:19:17,050 --> 00:19:20,230
that the backend can either implement

00:19:18,790 --> 00:19:22,660
all the different interfaces that we

00:19:20,230 --> 00:19:24,790
have or it can implement just one so

00:19:22,660 --> 00:19:26,080
maybe on one back end you choose to

00:19:24,790 --> 00:19:27,850
implement the cipher system and the

00:19:26,080 --> 00:19:29,320
cipher system says okay I understand the

00:19:27,850 --> 00:19:31,360
concept of block ciphers I understand

00:19:29,320 --> 00:19:35,440
the concept of symmetric ciphers sorry

00:19:31,360 --> 00:19:38,140
block ciphers stream ciphers and then it

00:19:35,440 --> 00:19:41,500
also understands the ideas behind RSA

00:19:38,140 --> 00:19:43,750
and DSA and it can handle h.o.t P&T OTP

00:19:41,500 --> 00:19:46,870
which are one-time password protocols

00:19:43,750 --> 00:19:48,040
that are backed by H Mac and then it can

00:19:46,870 --> 00:19:49,690
build all these things or you can have

00:19:48,040 --> 00:19:51,580
one that just says okay I only implement

00:19:49,690 --> 00:19:53,950
hashes and actually I only implement

00:19:51,580 --> 00:19:55,330
this one hash which one in this case

00:19:53,950 --> 00:19:57,429
would be like something like Libby to

00:19:55,330 --> 00:19:59,830
which is an inflammation implementation

00:19:57,429 --> 00:20:00,850
of Blake to how Blake to was a sháá

00:19:59,830 --> 00:20:02,770
three finalists

00:20:00,850 --> 00:20:04,780
that actually has very similar security

00:20:02,770 --> 00:20:07,210
properties to shot the finalists for the

00:20:04,780 --> 00:20:08,500
winner of shot two shot three was

00:20:07,210 --> 00:20:09,640
actually chosen because it was very

00:20:08,500 --> 00:20:11,410
different from shot too because they

00:20:09,640 --> 00:20:14,530
wanted to not keep all their eggs in one

00:20:11,410 --> 00:20:15,970
basket yes I mean the the idea of multi

00:20:14,530 --> 00:20:17,800
back end is it gets really powerful when

00:20:15,970 --> 00:20:19,360
we have the ability to include kind of

00:20:17,800 --> 00:20:20,740
single shot libraries like Levesque rip

00:20:19,360 --> 00:20:23,110
door would be too or various other

00:20:20,740 --> 00:20:24,700
things along with openssl or various

00:20:23,110 --> 00:20:26,560
other things right so you can choose to

00:20:24,700 --> 00:20:28,150
use a particular library that you want

00:20:26,560 --> 00:20:29,740
and then if you need a function that's

00:20:28,150 --> 00:20:31,030
not part of that it can fall back on

00:20:29,740 --> 00:20:33,400
another library and a different back-end

00:20:31,030 --> 00:20:34,660
and then you as a developer of the

00:20:33,400 --> 00:20:36,520
Python code don't have to change your

00:20:34,660 --> 00:20:37,990
code need to do those things so for

00:20:36,520 --> 00:20:39,160
example you know like when you're

00:20:37,990 --> 00:20:41,050
looking at heart bleed or something like

00:20:39,160 --> 00:20:42,910
that if you are running python code you

00:20:41,050 --> 00:20:44,590
literally could just flip a switch and

00:20:42,910 --> 00:20:46,840
use a different back-end right and

00:20:44,590 --> 00:20:47,980
that's a weird use case but it does

00:20:46,840 --> 00:20:50,500
allow you to do those types of things

00:20:47,980 --> 00:20:52,360
also allows you to write a single set of

00:20:50,500 --> 00:20:53,410
Python code that on when I'm run on

00:20:52,360 --> 00:20:54,790
different platforms will you've

00:20:53,410 --> 00:20:56,470
different backends depending on what

00:20:54,790 --> 00:20:57,790
that platform best supports yeah I mean

00:20:56,470 --> 00:21:00,100
a more concrete example of why this

00:20:57,790 --> 00:21:02,500
might be beneficial is if you compile

00:21:00,100 --> 00:21:04,030
and so there are ways you can use Python

00:21:02,500 --> 00:21:06,400
code in iOS and there are ways you can

00:21:04,030 --> 00:21:08,890
use Python code in and other unusual

00:21:06,400 --> 00:21:10,960
platforms that are not desktop on the

00:21:08,890 --> 00:21:12,070
iOS side now we have not don't go out

00:21:10,960 --> 00:21:14,590
and try this yet because I actually

00:21:12,070 --> 00:21:16,690
haven't tested it but common crypto is

00:21:14,590 --> 00:21:19,120
has the exact same interfaces on iOS as

00:21:16,690 --> 00:21:21,730
a dozen OS 10 so if you are actually

00:21:19,120 --> 00:21:24,670
capable of compiling the Python you need

00:21:21,730 --> 00:21:29,170
then this code would work just fine in

00:21:24,670 --> 00:21:30,250
theory in theory so I did I mentioned

00:21:29,170 --> 00:21:32,110
before I want to talk a little bit about

00:21:30,250 --> 00:21:34,420
how we do testing and the testing was a

00:21:32,110 --> 00:21:35,500
big consideration for the library that

00:21:34,420 --> 00:21:36,550
we wanted to choose and something that

00:21:35,500 --> 00:21:39,100
we wanted to make sure we did a really

00:21:36,550 --> 00:21:41,890
really great job of and so as of right

00:21:39,100 --> 00:21:43,330
now every time that you run what we call

00:21:41,890 --> 00:21:47,200
kind of a single test run in

00:21:43,330 --> 00:21:51,790
cryptography you're running about 66,000

00:21:47,200 --> 00:21:53,500
or so tests and then each run is

00:21:51,790 --> 00:21:55,000
basically a combination of a whole bunch

00:21:53,500 --> 00:21:56,170
of factors of like what type of back-end

00:21:55,000 --> 00:21:57,760
you're using and what type of platform

00:21:56,170 --> 00:22:00,280
you're on and all these various other

00:21:57,760 --> 00:22:02,350
things right so for every build that we

00:22:00,280 --> 00:22:03,760
run which includes every single PR that

00:22:02,350 --> 00:22:05,050
somebody puts in any time that we're

00:22:03,760 --> 00:22:07,930
running a full build you're actually

00:22:05,050 --> 00:22:09,790
doing seventy seven of these runs right

00:22:07,930 --> 00:22:11,350
which works out there's 15 about 15

00:22:09,790 --> 00:22:14,140
build today we average between 10 to 20

00:22:11,350 --> 00:22:17,110
which works out to be about almost what

00:22:14,140 --> 00:22:18,760
5.1 million tests / build which means

00:22:17,110 --> 00:22:21,250
that right now we're doing about 500

00:22:18,760 --> 00:22:22,510
million tests per week I'm so build

00:22:21,250 --> 00:22:24,490
right now takes about what about 20

00:22:22,510 --> 00:22:26,590
minutes so it kind of depends upon the

00:22:24,490 --> 00:22:28,750
how busy travis's and whether or not

00:22:26,590 --> 00:22:31,390
Jenkins feels like working but uh yes in

00:22:28,750 --> 00:22:33,280
general we take about 10 to 20 minutes

00:22:31,390 --> 00:22:35,590
to run our bills now yep so we also do

00:22:33,280 --> 00:22:36,940
45 documentation builds per day most of

00:22:35,590 --> 00:22:39,310
this is done on Travis so if there any

00:22:36,940 --> 00:22:40,420
Travis people in here thank you we take

00:22:39,310 --> 00:22:41,920
up an enormous amount of their

00:22:40,420 --> 00:22:44,590
infrastructure I think we're like in

00:22:41,920 --> 00:22:46,960
their top five people for wrecking their

00:22:44,590 --> 00:22:48,250
stuff we've been helping them build

00:22:46,960 --> 00:22:50,860
their Python support those so hopefully

00:22:48,250 --> 00:22:52,600
it works out and then we also have our

00:22:50,860 --> 00:22:53,920
own Jenkins builder that runs on top of

00:22:52,600 --> 00:22:55,180
rackspace rackspace gives us a free

00:22:53,920 --> 00:22:58,240
cloud account to use for this I think

00:22:55,180 --> 00:22:59,980
we've got 25 28 builders or 28 servers

00:22:58,240 --> 00:23:01,480
that run bills on there there's 24

00:22:59,980 --> 00:23:03,040
actual Jenkins builders which means

00:23:01,480 --> 00:23:05,310
there's less servers but uh we actually

00:23:03,040 --> 00:23:10,390
run our tests against Ubuntu 1204

00:23:05,310 --> 00:23:12,760
centos-5 centos 64 because 65 plus root

00:23:10,390 --> 00:23:15,010
actually have a later openssl that

00:23:12,760 --> 00:23:17,920
doesn't have elliptic curve disabled we

00:23:15,010 --> 00:23:22,570
also run tests against OS 10 10 7 10 8

00:23:17,920 --> 00:23:24,040
10 9 freebsd 92 freebsd 10 and i believe

00:23:22,570 --> 00:23:26,350
there's a few other things in there that

00:23:24,040 --> 00:23:28,300
i'm not remembering yeah might build

00:23:26,350 --> 00:23:29,530
them openness openbsd builder since we

00:23:28,300 --> 00:23:33,220
discovered that they forgot to include

00:23:29,530 --> 00:23:34,120
parts of openssl recently so yes so

00:23:33,220 --> 00:23:35,230
these are the type of things that the

00:23:34,120 --> 00:23:37,960
testing infrastructure actually finds

00:23:35,230 --> 00:23:40,000
for us which is very nice but it is an

00:23:37,960 --> 00:23:40,900
absolute enormous amount of testing that

00:23:40,000 --> 00:23:42,430
gets done now obviously when you're

00:23:40,900 --> 00:23:43,570
doing local development you can run

00:23:42,430 --> 00:23:44,860
subsets of these because you're

00:23:43,570 --> 00:23:47,200
basically running kind of this number

00:23:44,860 --> 00:23:48,520
which is not so bad and of course some

00:23:47,200 --> 00:23:49,630
of these things get skipped depending on

00:23:48,520 --> 00:23:50,590
various platforms that you're working

00:23:49,630 --> 00:23:51,640
with and some of those types of things

00:23:50,590 --> 00:23:53,470
so these numbers are a little bit kind

00:23:51,640 --> 00:23:54,640
of estimates but yeah so the biggest

00:23:53,470 --> 00:23:56,890
challenge we've had with our testing

00:23:54,640 --> 00:23:58,360
infrastructure of late is that we we

00:23:56,890 --> 00:24:00,790
require one hundred percent code

00:23:58,360 --> 00:24:03,250
coverage nope no patches ever allowed to

00:24:00,790 --> 00:24:06,040
land for any reason knows no pragma no

00:24:03,250 --> 00:24:07,870
covers allowed so the only way to land

00:24:06,040 --> 00:24:09,220
Oh actually that reminds me we have a

00:24:07,870 --> 00:24:11,410
bunch of Windows builders but I forgot

00:24:09,220 --> 00:24:12,580
to mention them the only reason any

00:24:11,410 --> 00:24:14,230
patch can ever land is if it's one

00:24:12,580 --> 00:24:16,840
hundred percent code coverage and then

00:24:14,230 --> 00:24:19,570
surpassed peer review so no one can ever

00:24:16,840 --> 00:24:20,920
merge their own patches and usually

00:24:19,570 --> 00:24:24,040
there's three or four people who end up

00:24:20,920 --> 00:24:27,110
reviewing any one of our patches so at

00:24:24,040 --> 00:24:29,200
the end of that we end up usually with

00:24:27,110 --> 00:24:33,260
reasonably sized patches about a hundred

00:24:29,200 --> 00:24:34,940
comments and we generally require you

00:24:33,260 --> 00:24:37,010
splitting a patch up if it exceeds about

00:24:34,940 --> 00:24:38,660
a hundred lines maybe 150 lines of code

00:24:37,010 --> 00:24:42,410
if there's anything we're good at it's

00:24:38,660 --> 00:24:44,179
like shedding say oh so what do we

00:24:42,410 --> 00:24:45,320
currently support right now so we have a

00:24:44,179 --> 00:24:46,190
good selection of the symmetric

00:24:45,320 --> 00:24:48,470
algorithms that are out there though

00:24:46,190 --> 00:24:49,670
that's what we tackled first lots of

00:24:48,470 --> 00:24:51,740
stuff so any of the aes to that you

00:24:49,670 --> 00:24:52,790
expect chamilia Triple DES cat5 any of

00:24:51,740 --> 00:24:54,740
these types of things we're all kind of

00:24:52,790 --> 00:24:55,910
in there obviously there's more work

00:24:54,740 --> 00:24:58,549
getting done there I think there was a

00:24:55,910 --> 00:24:59,960
patch for some so I'm trying to land

00:24:58,549 --> 00:25:01,700
seed but it turns out that everybody

00:24:59,960 --> 00:25:02,960
associated with cryptography is probably

00:25:01,700 --> 00:25:04,370
in this row yet now they're probably all

00:25:02,960 --> 00:25:07,820
here so nobody's actually doing any work

00:25:04,370 --> 00:25:10,250
rain pretty good support for H max so

00:25:07,820 --> 00:25:11,600
mostly H max stuff that you would you

00:25:10,250 --> 00:25:14,090
would want is there we also have a

00:25:11,600 --> 00:25:15,919
constant time bit that was submitted by

00:25:14,090 --> 00:25:17,210
someone in this room Julian Krause who

00:25:15,919 --> 00:25:19,220
may very well be in the room when I be

00:25:17,210 --> 00:25:20,990
Thank You Julie doing constant time

00:25:19,220 --> 00:25:24,380
comparisons and python by the way not

00:25:20,990 --> 00:25:26,990
easy well you just go down see ya and do

00:25:24,380 --> 00:25:29,390
it and see you cheat so we've got some

00:25:26,990 --> 00:25:32,750
key derivation function so that PT kdf

00:25:29,390 --> 00:25:34,730
tues with the HH kdf we did one time

00:25:32,750 --> 00:25:36,350
password stuff so this is totp and HTTP

00:25:34,730 --> 00:25:38,350
is the Google Authenticator algorithms

00:25:36,350 --> 00:25:42,740
that they use for their for two-factor

00:25:38,350 --> 00:25:43,610
got RSA signing a verification we've got

00:25:42,740 --> 00:25:45,020
the pertinent stuff we talked about

00:25:43,610 --> 00:25:46,220
before which i think is Hiroko right

00:25:45,020 --> 00:25:48,020
someone's who can yeah that was

00:25:46,220 --> 00:25:50,390
originally extracted from some internal

00:25:48,020 --> 00:25:53,030
use cases at Heroku and so we talked a

00:25:50,390 --> 00:25:54,350
little bit before you know we've we

00:25:53,030 --> 00:25:55,790
pulled in a bunch of stuff of the the

00:25:54,350 --> 00:25:57,169
process of kind of pulling things into

00:25:55,790 --> 00:25:58,850
cryptography is that first level of kind

00:25:57,169 --> 00:26:00,140
of creating the bindings right and then

00:25:58,850 --> 00:26:01,760
we write hazmat layer stuff on top of

00:26:00,140 --> 00:26:03,650
that and then kind of the the recipes

00:26:01,760 --> 00:26:05,179
come out come up on the top so as we

00:26:03,650 --> 00:26:06,919
pull in New see backends and various

00:26:05,179 --> 00:26:08,150
other things it'll you know expose the

00:26:06,919 --> 00:26:11,299
ability for us to do all these various

00:26:08,150 --> 00:26:12,919
different types of things so let's go

00:26:11,299 --> 00:26:14,090
back and review a little bit on kind of

00:26:12,919 --> 00:26:15,530
at the beginning we talked about what do

00:26:14,090 --> 00:26:17,390
we want out of a crypto library so we

00:26:15,530 --> 00:26:18,710
wanted algorithm support right so the

00:26:17,390 --> 00:26:20,929
fact that we do multi back-end gives us

00:26:18,710 --> 00:26:22,610
that right so if you want to use nacl

00:26:20,929 --> 00:26:24,500
and use some of the weird d gb stuff or

00:26:22,610 --> 00:26:25,760
whatever you can do that you can also

00:26:24,500 --> 00:26:27,200
have a back-end that supports the

00:26:25,760 --> 00:26:29,960
regular standard algorithms that are out

00:26:27,200 --> 00:26:31,429
there right and so open a cell obviously

00:26:29,960 --> 00:26:33,320
is the big one that we use our way they

00:26:31,429 --> 00:26:34,370
spent most of the time on but of course

00:26:33,320 --> 00:26:36,530
you can use whatever back in the

00:26:34,370 --> 00:26:38,840
cryptography supports it is open source

00:26:36,530 --> 00:26:40,130
the whole thing is under apache2 most of

00:26:38,840 --> 00:26:40,730
the people who are involved at least at

00:26:40,130 --> 00:26:42,049
the beginning

00:26:40,730 --> 00:26:43,429
of creating this where rackers at this

00:26:42,049 --> 00:26:45,890
point it's pretty much wide open there's

00:26:43,429 --> 00:26:49,760
people from all over the place and all

00:26:45,890 --> 00:26:53,090
over the world to Python support so oops

00:26:49,760 --> 00:26:57,290
bad cut and pasting job so obviously we

00:26:53,090 --> 00:27:00,080
support 26 27 32 33 34 and pipe I know

00:26:57,290 --> 00:27:01,520
all of those work and then for a moment

00:27:00,080 --> 00:27:03,980
eight from a Magnus of test we talked

00:27:01,520 --> 00:27:05,809
about testing as about over 30 people

00:27:03,980 --> 00:27:08,000
now that are working on on cryptography

00:27:05,809 --> 00:27:09,950
I would like more of you to to join us

00:27:08,000 --> 00:27:11,660
if you want to come and hang out whether

00:27:09,950 --> 00:27:14,600
you're a crypto expert or not we would

00:27:11,660 --> 00:27:16,730
love to have you so talking a little bit

00:27:14,600 --> 00:27:18,440
about kind of what's next yeah so on the

00:27:16,730 --> 00:27:20,480
future work side there's lots to do

00:27:18,440 --> 00:27:24,140
still we've been working on this project

00:27:20,480 --> 00:27:26,620
for cheese nine months now I guess maybe

00:27:24,140 --> 00:27:28,970
not quite that much yet but there's just

00:27:26,620 --> 00:27:30,770
an immense amount of work still to go

00:27:28,970 --> 00:27:32,090
while we you may have noticed that we

00:27:30,770 --> 00:27:33,470
wrote that we have our essay signing and

00:27:32,090 --> 00:27:35,330
verification and that does include a

00:27:33,470 --> 00:27:36,500
relatively complex component pkc as one

00:27:35,330 --> 00:27:38,510
point five is actually very simple but

00:27:36,500 --> 00:27:41,660
oh I epr sorry that would be PSS in that

00:27:38,510 --> 00:27:43,220
case is not at all however we don't

00:27:41,660 --> 00:27:46,669
actually have a way to load keys right

00:27:43,220 --> 00:27:47,960
now so if you guys want to convert them

00:27:46,669 --> 00:27:49,520
into integers and then load them

00:27:47,960 --> 00:27:50,990
directly through then they'll work fine

00:27:49,520 --> 00:27:52,820
but most people probably not want to do

00:27:50,990 --> 00:27:54,320
that so one of the things we really need

00:27:52,820 --> 00:27:57,290
to work on is we gotta pee que seus 1

00:27:54,320 --> 00:27:59,179
and p kc s 8 key loads we're also going

00:27:57,290 --> 00:28:02,900
to rob ibly look at a JW k and some

00:27:59,179 --> 00:28:04,549
other key key serialization stuff we

00:28:02,900 --> 00:28:06,860
also have of course DSA signing and

00:28:04,549 --> 00:28:09,260
verification and as part of that we will

00:28:06,860 --> 00:28:11,059
be defaulting to deterministic k so

00:28:09,260 --> 00:28:12,970
those of you unfamiliar with DSA signing

00:28:11,059 --> 00:28:14,990
it turns out that DSA signing is

00:28:12,970 --> 00:28:17,179
unbelievably sensitive to the quality of

00:28:14,990 --> 00:28:19,160
your random number generator and if you

00:28:17,179 --> 00:28:21,110
do not have great random numbers

00:28:19,160 --> 00:28:22,850
especially if you just reuse it every

00:28:21,110 --> 00:28:24,020
time then you can leak the entire

00:28:22,850 --> 00:28:25,250
contents of your private key very

00:28:24,020 --> 00:28:27,410
quickly this is actually how the

00:28:25,250 --> 00:28:28,820
PlayStation 3 was cracked they had a

00:28:27,410 --> 00:28:31,580
nice EDSA private key that they were

00:28:28,820 --> 00:28:33,679
using to sign their firmware but they

00:28:31,580 --> 00:28:36,710
use the exact same signature oh sorry

00:28:33,679 --> 00:28:39,440
the exact same generated random k every

00:28:36,710 --> 00:28:41,299
time and because of that they leaked

00:28:39,440 --> 00:28:42,919
everything and then that allowed custom

00:28:41,299 --> 00:28:47,150
firmware which i guess for that we shall

00:28:42,919 --> 00:28:48,890
thank them but we will definitely be

00:28:47,150 --> 00:28:51,020
deterred defaulting to deterministic k

00:28:48,890 --> 00:28:53,830
and then of course we have a nice big

00:28:51,020 --> 00:28:55,330
question there around x509 and TLS

00:28:53,830 --> 00:28:56,950
we're pretty sure we're going to go

00:28:55,330 --> 00:28:59,140
ahead and implement this but this is

00:28:56,950 --> 00:29:02,380
going to be a long-term project x509 is

00:28:59,140 --> 00:29:03,760
a very large spec and income as part of

00:29:02,380 --> 00:29:06,669
x509 you also have to implement all of

00:29:03,760 --> 00:29:08,019
asn.1 so those are all things there in

00:29:06,669 --> 00:29:09,429
openssl those are all things that are

00:29:08,019 --> 00:29:11,919
other libraries but exposing them in

00:29:09,429 --> 00:29:13,029
what we would consider a same API let's

00:29:11,919 --> 00:29:14,590
give me a lot of discussions and if you

00:29:13,029 --> 00:29:16,779
guys have an opinion about those things

00:29:14,590 --> 00:29:18,789
come talk to us we're happy to hear more

00:29:16,779 --> 00:29:20,470
more opinions that doesn't mean ours

00:29:18,789 --> 00:29:24,669
you're right fact most of the time but

00:29:20,470 --> 00:29:26,950
probably wrong and of course TLS we have

00:29:24,669 --> 00:29:28,210
obviously much to do there is much to

00:29:26,950 --> 00:29:30,909
talk about about TLS but I'm going to

00:29:28,210 --> 00:29:32,139
let him extort state of SSL tomorrow so

00:29:30,909 --> 00:29:33,730
you guys should all definitely attend

00:29:32,139 --> 00:29:35,679
that you can learn about how everyone

00:29:33,730 --> 00:29:40,179
does everything really really poorly and

00:29:35,679 --> 00:29:41,889
there's no end in sight however maybe

00:29:40,179 --> 00:29:43,750
there is an end in sight at least on the

00:29:41,889 --> 00:29:45,880
Python side we will be spending some

00:29:43,750 --> 00:29:47,519
time talking very seriously about what a

00:29:45,880 --> 00:29:50,139
TLS API looks like in the near future

00:29:47,519 --> 00:29:51,820
how you would implement that and allow

00:29:50,139 --> 00:29:53,019
it to be composable with other backends

00:29:51,820 --> 00:29:54,639
such that we don't actually have to

00:29:53,019 --> 00:29:55,779
implement the symmetric primitives

00:29:54,639 --> 00:29:58,870
because we have no interest in doing

00:29:55,779 --> 00:29:59,799
that then the final thing is we're very

00:29:58,870 --> 00:30:01,690
interested in some of the less common

00:29:59,799 --> 00:30:04,149
symmetric primitives those are things

00:30:01,690 --> 00:30:07,059
that are more of a DJ beware which be

00:30:04,149 --> 00:30:10,299
things that salt mackall for those who

00:30:07,059 --> 00:30:12,309
you really hate calling itself so chacha

00:30:10,299 --> 00:30:14,049
20 which is actually I so charged that

00:30:12,309 --> 00:30:15,940
20 is a derivative of salsa 20 and

00:30:14,049 --> 00:30:18,850
actually Google is very enamored of it

00:30:15,940 --> 00:30:22,090
so cha-cha 20 with poly 1305 as a Mac

00:30:18,850 --> 00:30:24,279
are the are actually cipher suites that

00:30:22,090 --> 00:30:25,899
Google has implemented in their TLS

00:30:24,279 --> 00:30:28,510
stack and actually supports in chrome

00:30:25,899 --> 00:30:29,529
right now now they are talking with IETF

00:30:28,510 --> 00:30:31,330
and other people about whether or not

00:30:29,529 --> 00:30:33,519
that becomes an official thing in TLS 13

00:30:31,330 --> 00:30:34,809
or maybe even sooner who knows but those

00:30:33,519 --> 00:30:37,539
sorts of things are becoming a little

00:30:34,809 --> 00:30:40,000
more common as NIST has kind of hurt

00:30:37,539 --> 00:30:42,190
their own reputation that's not to say I

00:30:40,000 --> 00:30:44,620
that their crypto is anyway anyway

00:30:42,190 --> 00:30:45,820
actually bad but their reputation has

00:30:44,620 --> 00:30:48,190
been damaged and that means that people

00:30:45,820 --> 00:30:50,590
are looking outside of them either to

00:30:48,190 --> 00:30:53,110
things like crypt wreck which is the

00:30:50,590 --> 00:30:54,730
japanese body there's a there's european

00:30:53,110 --> 00:30:57,730
one that's slipping my mind at the

00:30:54,730 --> 00:30:58,840
moment there's even korean ones which is

00:30:57,730 --> 00:31:00,309
actually where the seed algorithm comes

00:30:58,840 --> 00:31:02,740
from which is another 128-bit block

00:31:00,309 --> 00:31:04,480
cipher so there's lots of stuff and

00:31:02,740 --> 00:31:05,830
there's lots more work to do I mean

00:31:04,480 --> 00:31:06,590
there's even things that aren't on here

00:31:05,830 --> 00:31:08,299
many men

00:31:06,590 --> 00:31:10,669
things aren't and you're like CMAC which

00:31:08,299 --> 00:31:13,130
is a way of doing max using block

00:31:10,669 --> 00:31:15,130
ciphers that is well it's well

00:31:13,130 --> 00:31:17,059
standardized but it's relatively unused

00:31:15,130 --> 00:31:18,919
and there's something we're definitely

00:31:17,059 --> 00:31:20,690
interested in like ultimately we want to

00:31:18,919 --> 00:31:22,909
become a cryptographic standard library

00:31:20,690 --> 00:31:26,539
only hopefully better maintained then

00:31:22,909 --> 00:31:28,820
standard libraries usually are and I

00:31:26,539 --> 00:31:31,730
mean that that's ultimately our our goal

00:31:28,820 --> 00:31:34,159
yep so mention the github link obviously

00:31:31,730 --> 00:31:35,210
the cryptography I oh it's out on pip so

00:31:34,159 --> 00:31:36,860
you can install it we actually put

00:31:35,210 --> 00:31:39,140
binary wheels up there so it should

00:31:36,860 --> 00:31:44,450
install kind of pre-compiled for most of

00:31:39,140 --> 00:31:46,460
your no no but slight digression but

00:31:44,450 --> 00:31:48,740
binary wheels are not our very difficult

00:31:46,460 --> 00:31:50,029
to do for linux and OS 10 so you can do

00:31:48,740 --> 00:31:51,770
them on windows which is what we have

00:31:50,029 --> 00:31:53,029
them for which is also the platform

00:31:51,770 --> 00:31:55,279
that's most least likely to have a

00:31:53,029 --> 00:31:56,960
compiler if you wish to install Pippins

00:31:55,279 --> 00:31:58,070
if you wish to pip install cryptography

00:31:56,960 --> 00:32:00,380
i would highly recommend having the

00:31:58,070 --> 00:32:02,990
openssl have headers and also a compiler

00:32:00,380 --> 00:32:04,850
yeah and then most the work we hang out

00:32:02,990 --> 00:32:06,590
on IRC so we're in cryptography dash dev

00:32:04,850 --> 00:32:08,210
which leads to not only people talking

00:32:06,590 --> 00:32:08,990
about this library but also just random

00:32:08,210 --> 00:32:10,580
people that come to talk about

00:32:08,990 --> 00:32:13,159
cryptography because they happen to find

00:32:10,580 --> 00:32:17,210
yeah we didn't choose the most specific

00:32:13,159 --> 00:32:18,289
name for our project ya know so we kind

00:32:17,210 --> 00:32:19,190
of hot put it through this a little bit

00:32:18,289 --> 00:32:20,630
we kind of tweaked the slides this

00:32:19,190 --> 00:32:22,880
morning cuz we wanted to have a little

00:32:20,630 --> 00:32:24,289
bit more time for questions so that's

00:32:22,880 --> 00:32:27,020
all we're going to cover for now I guess

00:32:24,289 --> 00:32:28,309
there's a microphone over here somewhere

00:32:27,020 --> 00:32:30,350
so if you would like to ask questions

00:32:28,309 --> 00:32:32,919
please come up if you're going to stump

00:32:30,350 --> 00:32:38,200
US about crypto things ask Paul not me

00:32:32,919 --> 00:32:38,200
please don't stumpy it's really easy

00:32:38,230 --> 00:32:43,970
sure hey guys great talk thanks um I

00:32:41,779 --> 00:32:47,390
just wanted to ask you mentioned

00:32:43,970 --> 00:32:49,340
implementing in a SN 1 parser I was

00:32:47,390 --> 00:32:51,500
wondering if you knew about PI asn.1 and

00:32:49,340 --> 00:32:53,000
if you'd rejected it or what so we have

00:32:51,500 --> 00:32:54,710
not rejected in any way I am familiar

00:32:53,000 --> 00:32:55,970
with pious and one but I don't know

00:32:54,710 --> 00:32:58,159
enough about it to know whether or not

00:32:55,970 --> 00:32:59,929
it meets what I need so I would very

00:32:58,159 --> 00:33:01,580
much prefer to do it all pure python so

00:32:59,929 --> 00:33:03,890
the fact that pious and one is pure

00:33:01,580 --> 00:33:05,110
python and supports hypothetically

00:33:03,890 --> 00:33:07,100
everything we need is big encouragement

00:33:05,110 --> 00:33:09,500
but that would be the very first place

00:33:07,100 --> 00:33:10,730
we look cool thanks think it was on it's

00:33:09,500 --> 00:33:13,279
on the list of things to do we haven't

00:33:10,730 --> 00:33:15,679
decided how to do it yet speaking of

00:33:13,279 --> 00:33:17,539
pure python feel free to slap me down if

00:33:15,679 --> 00:33:20,260
I've got this wrong but did you guys

00:33:17,539 --> 00:33:23,800
actually craft and

00:33:20,260 --> 00:33:26,170
document a way to guarantee the minimum

00:33:23,800 --> 00:33:28,600
and maximum runtime of constant time and

00:33:26,170 --> 00:33:32,160
linear time operations for the sensitive

00:33:28,600 --> 00:33:36,100
things like H max or is that conjectured

00:33:32,160 --> 00:33:37,810
constant or linear time so it's constant

00:33:36,100 --> 00:33:40,060
time comparison because we do it down at

00:33:37,810 --> 00:33:41,710
the sea layer where we guarantee that it

00:33:40,060 --> 00:33:44,410
takes exactly that long now there's a

00:33:41,710 --> 00:33:46,180
transition period from Python to see and

00:33:44,410 --> 00:33:47,590
back however because that's the same

00:33:46,180 --> 00:33:49,360
number of bytes in the way that copy

00:33:47,590 --> 00:33:51,280
which should work that should also be

00:33:49,360 --> 00:33:54,250
constant time however I can't tell you

00:33:51,280 --> 00:33:55,990
that for sure okay I misunderstood you

00:33:54,250 --> 00:33:57,280
when you said what you were doing in

00:33:55,990 --> 00:33:58,630
Python and what didn't see thank you

00:33:57,280 --> 00:33:59,950
yeah sorry about that but all the

00:33:58,630 --> 00:34:01,450
constant time verification we do is

00:33:59,950 --> 00:34:03,400
actually done at the sea level room I

00:34:01,450 --> 00:34:06,580
think we do have a long-term goal of

00:34:03,400 --> 00:34:09,100
having cryptography audited maybe we can

00:34:06,580 --> 00:34:10,630
con Rackspace it into paying for it but

00:34:09,100 --> 00:34:11,950
that'll be a little bit farther down the

00:34:10,630 --> 00:34:13,149
road I think before we do that if you

00:34:11,950 --> 00:34:15,310
can get somebody else to pick up the

00:34:13,149 --> 00:34:17,649
bill asked them to do you know Isabel

00:34:15,310 --> 00:34:19,240
formal verification that'll definitely

00:34:17,649 --> 00:34:24,340
be a good use of money in time

00:34:19,240 --> 00:34:27,429
absolutely well we're talking about

00:34:24,340 --> 00:34:29,080
money and certification if you can do CC

00:34:27,429 --> 00:34:33,399
or something along those lines that

00:34:29,080 --> 00:34:37,480
would be great to conquer here yeah my

00:34:33,399 --> 00:34:42,850
company uses a I think it's a fork of

00:34:37,480 --> 00:34:46,179
openssl that is phipps certified howies

00:34:42,850 --> 00:34:47,919
so I I missed most of your talk I just

00:34:46,179 --> 00:34:52,330
coming near the end but you said it

00:34:47,919 --> 00:34:54,370
works with openssl I would imagine as

00:34:52,330 --> 00:34:56,610
long as we don't muck with the openssl

00:34:54,370 --> 00:34:58,930
headers it should work with our

00:34:56,610 --> 00:35:01,180
certified openness that's correct so

00:34:58,930 --> 00:35:03,220
open SSL has a phipps module and when

00:35:01,180 --> 00:35:04,870
you have the phipps module engaged then

00:35:03,220 --> 00:35:06,250
there's inside the code there's a bunch

00:35:04,870 --> 00:35:09,460
of if deaths that just send it down the

00:35:06,250 --> 00:35:12,280
phipps paths so if you compile

00:35:09,460 --> 00:35:14,160
cryptography against openssl phipps then

00:35:12,280 --> 00:35:16,510
it will use nothing but the phipps pads

00:35:14,160 --> 00:35:17,920
with all the commensurate statements

00:35:16,510 --> 00:35:19,690
that that accompanies like so early i

00:35:17,920 --> 00:35:21,250
actually had said that I don't really

00:35:19,690 --> 00:35:22,450
particularly care for phipps one of the

00:35:21,250 --> 00:35:23,680
reasons I don't care for that there's

00:35:22,450 --> 00:35:24,850
regulatory requirements and then you

00:35:23,680 --> 00:35:26,050
just need to use it but one of the

00:35:24,850 --> 00:35:28,450
reasons I don't particularly care for

00:35:26,050 --> 00:35:31,690
phipps is that it does not allow for the

00:35:28,450 --> 00:35:33,609
concept of bugs when you audit code for

00:35:31,690 --> 00:35:35,140
phipps when it becomes phipps come

00:35:33,609 --> 00:35:36,670
client you can never touch that code

00:35:35,140 --> 00:35:38,710
again without Rio de ting it that

00:35:36,670 --> 00:35:41,410
doesn't matter if you find an enormous

00:35:38,710 --> 00:35:43,599
game stopping everything breaking bug

00:35:41,410 --> 00:35:45,489
because that's been found in the openssl

00:35:43,599 --> 00:35:49,059
phipps module and they are not allowed

00:35:45,489 --> 00:35:50,950
to fix it that's only in the dual EC

00:35:49,059 --> 00:35:53,470
random number generator so nobody's

00:35:50,950 --> 00:35:58,359
using it so don't worry about it thank

00:35:53,470 --> 00:36:00,940
you Ron hi I'm would you mind

00:35:58,359 --> 00:36:03,099
elaborating more on why the Python

00:36:00,940 --> 00:36:05,349
language all a python by code is not

00:36:03,099 --> 00:36:08,920
particularly suitable for custom time

00:36:05,349 --> 00:36:11,799
comparisons sure so in general pythons

00:36:08,920 --> 00:36:15,009
attempting to optimize and do things as

00:36:11,799 --> 00:36:17,529
quickly as it can and in as part of that

00:36:15,009 --> 00:36:19,869
behavior Python will short-circuit logic

00:36:17,529 --> 00:36:22,180
in generally you know if you know that

00:36:19,869 --> 00:36:23,499
after evaluating you're trying to

00:36:22,180 --> 00:36:25,569
evaluate the Equality of two byte

00:36:23,499 --> 00:36:27,640
strings right and after the first bite

00:36:25,569 --> 00:36:30,390
you notice oh actually they don't match

00:36:27,640 --> 00:36:33,819
so why bother comparing the rest of them

00:36:30,390 --> 00:36:37,299
so that that is a in the string

00:36:33,819 --> 00:36:39,759
comparisons logic right but I mean if

00:36:37,299 --> 00:36:43,839
you build your own comparison logic then

00:36:39,759 --> 00:36:45,730
that wouldn't I mean basically the

00:36:43,839 --> 00:36:47,349
problem is with the load that string

00:36:45,730 --> 00:36:49,509
comparison logic is not with the

00:36:47,349 --> 00:36:51,700
language I'll with the Python bytecode

00:36:49,509 --> 00:36:53,130
so to a certain extent that's true but

00:36:51,700 --> 00:36:55,210
when you start dealing with big numbers

00:36:53,130 --> 00:36:56,680
Python also has a whole lot of

00:36:55,210 --> 00:36:58,690
optimizations for dealing with big

00:36:56,680 --> 00:37:00,519
numbers so if you start wanting to do

00:36:58,690 --> 00:37:02,739
our essay or DSA operations you're going

00:37:00,519 --> 00:37:05,499
to be dealing with 2048-bit and larger

00:37:02,739 --> 00:37:08,769
numbers and that number handling even

00:37:05,499 --> 00:37:10,930
the actual if you ask Python how many

00:37:08,769 --> 00:37:13,960
bits it it is with bit length that

00:37:10,930 --> 00:37:15,489
actually can leak I we did I don't

00:37:13,960 --> 00:37:17,200
remember exactly so don't don't take

00:37:15,489 --> 00:37:18,880
this as gospel but I believe one of the

00:37:17,200 --> 00:37:20,739
one of the guys we have working with us

00:37:18,880 --> 00:37:22,210
Alex Stapleton was looking at it it

00:37:20,739 --> 00:37:24,069
looked like that there was a timing

00:37:22,210 --> 00:37:25,809
attack potentially available that leaked

00:37:24,069 --> 00:37:29,230
something about the number of ones

00:37:25,809 --> 00:37:30,400
versus zeros in the bits so it's it's

00:37:29,230 --> 00:37:31,869
little things like that like you may be

00:37:30,400 --> 00:37:34,180
able to avoid each one of those things

00:37:31,869 --> 00:37:35,920
if you know about them but every time

00:37:34,180 --> 00:37:38,049
you do that you're spending a bunch more

00:37:35,920 --> 00:37:41,140
effort trying to figure out what it is

00:37:38,049 --> 00:37:42,069
pythons actually doing okay thanks yeah

00:37:41,140 --> 00:37:43,690
I mean it's the same problem you have

00:37:42,069 --> 00:37:44,920
even in C right it's not easy to write

00:37:43,690 --> 00:37:46,150
timing independent stuff and see right

00:37:44,920 --> 00:37:46,619
the compilers are always trying to get

00:37:46,150 --> 00:37:47,609
smarter

00:37:46,619 --> 00:37:48,569
source circuit the code that you want so

00:37:47,609 --> 00:37:50,940
if you go and you look at some of the

00:37:48,569 --> 00:37:52,470
openssl stuff that c code is really

00:37:50,940 --> 00:37:54,420
nasty and hard to follow specifically

00:37:52,470 --> 00:37:55,650
because it's designed to defeat compiler

00:37:54,420 --> 00:37:57,420
optimizations and some of the other

00:37:55,650 --> 00:37:59,670
things that are in there yeah that's the

00:37:57,420 --> 00:38:02,339
charitable of you yeah yes one of the

00:37:59,670 --> 00:38:04,170
many reasons um but you know and so as

00:38:02,339 --> 00:38:05,819
the Python runtimes get smarter or as

00:38:04,170 --> 00:38:07,140
you run different runtimes that behavior

00:38:05,819 --> 00:38:08,130
might change out from underneath you so

00:38:07,140 --> 00:38:09,240
you may have thought that you did it

00:38:08,130 --> 00:38:10,259
right the first time but then when

00:38:09,240 --> 00:38:12,150
you're running it on pie pie that's not

00:38:10,259 --> 00:38:16,920
true anymore or whatever and so it's

00:38:12,150 --> 00:38:18,779
probably not impossible just hard hi so

00:38:16,920 --> 00:38:21,299
earlier you had mentioned that the

00:38:18,779 --> 00:38:26,779
reputation of Miss had kind of been

00:38:21,299 --> 00:38:29,640
downgraded because of the I guess RSA

00:38:26,779 --> 00:38:33,690
not vulnerability but you know weakening

00:38:29,640 --> 00:38:38,759
so I'm curious where you're looking for

00:38:33,690 --> 00:38:41,519
other standards and resources as that

00:38:38,759 --> 00:38:45,150
are more reputable and what are you kind

00:38:41,519 --> 00:38:46,499
of seeing as the best ones out there so

00:38:45,150 --> 00:38:50,039
that's a great question and the answer

00:38:46,499 --> 00:38:52,470
is I don't know in general while miss

00:38:50,039 --> 00:38:54,569
miss has been tarnished because either I

00:38:52,470 --> 00:38:55,980
mean the charitable view and the view I

00:38:54,569 --> 00:38:58,230
actually personally subscribe to is that

00:38:55,980 --> 00:38:59,999
they were probably at Patsy they did

00:38:58,230 --> 00:39:01,769
they they didn't necessarily do anything

00:38:59,999 --> 00:39:04,410
wrong but they allowed bad things to

00:39:01,769 --> 00:39:07,259
happen and that's not necessarily a good

00:39:04,410 --> 00:39:10,890
thing it seems actually self-evident

00:39:07,259 --> 00:39:13,170
that means that to me they're their

00:39:10,890 --> 00:39:15,539
specs are actually still fine with the

00:39:13,170 --> 00:39:17,730
exception of one of them there's no

00:39:15,539 --> 00:39:19,710
evidence of any kind like shot to shot

00:39:17,730 --> 00:39:21,869
three certainly actually was shot three

00:39:19,710 --> 00:39:24,059
they actually even took public feedback

00:39:21,869 --> 00:39:25,890
into account they were originally trying

00:39:24,059 --> 00:39:28,710
to speed it up for a variety of what may

00:39:25,890 --> 00:39:30,059
or may not have been good reasons but

00:39:28,710 --> 00:39:32,009
they actually backed off that because

00:39:30,059 --> 00:39:34,349
the community was concerned so they kept

00:39:32,009 --> 00:39:38,190
the preimage resistance at 2n for the

00:39:34,349 --> 00:39:40,859
bit length and then but I I'm sorry to

00:39:38,190 --> 00:39:42,119
get back to your point be there aren't

00:39:40,859 --> 00:39:45,029
really a whole lot of other bodies that

00:39:42,119 --> 00:39:47,249
do this stuff so like there's trek

00:39:45,029 --> 00:39:50,609
from Japan there's kisa which is in

00:39:47,249 --> 00:39:53,099
Korea and again i apologize i cannot

00:39:50,609 --> 00:39:56,369
remember well the guys who do it over in

00:39:53,099 --> 00:39:58,380
Europe but none of them really do a

00:39:56,369 --> 00:39:59,940
whole lot of work like mist is

00:39:58,380 --> 00:40:00,390
constantly holding competitions their

00:39:59,940 --> 00:40:03,990
constant

00:40:00,390 --> 00:40:05,309
doing work so in the end either it's

00:40:03,990 --> 00:40:07,829
going to continue to be missed i mean

00:40:05,309 --> 00:40:08,970
sha-3 is well respected well it's not

00:40:07,829 --> 00:40:10,410
technically shot through yet but it will

00:40:08,970 --> 00:40:12,900
be soon it's very well respected though

00:40:10,410 --> 00:40:15,539
and while people are going to be very

00:40:12,900 --> 00:40:19,579
cautious to an initial up take over time

00:40:15,539 --> 00:40:19,579
it probably will prove to be a good idea

00:40:19,880 --> 00:40:24,210
otherwise I think maybe you've actually

00:40:21,960 --> 00:40:26,460
got some shift into academia even which

00:40:24,210 --> 00:40:27,599
is kind of surprising given academia is

00:40:26,460 --> 00:40:29,910
kind of history of not caring about

00:40:27,599 --> 00:40:33,059
actual implementation but djb has

00:40:29,910 --> 00:40:35,339
recently been running a I forget the

00:40:33,059 --> 00:40:36,960
name of his crypto contest but there's

00:40:35,339 --> 00:40:39,150
actually a new crypto contest for

00:40:36,960 --> 00:40:40,380
finding new ciphers that just but just

00:40:39,150 --> 00:40:41,880
closed submissions and there's been

00:40:40,380 --> 00:40:43,289
there were tons of submissions and

00:40:41,880 --> 00:40:45,390
they're actually being evaluated now and

00:40:43,289 --> 00:40:47,519
that's been this old that was their

00:40:45,390 --> 00:40:49,799
whole mo that's how they built that's

00:40:47,519 --> 00:40:52,500
how a es was built because AES was said

00:40:49,799 --> 00:40:53,609
of a whole lot of rounds of competition

00:40:52,500 --> 00:40:56,849
against a bunch of different block

00:40:53,609 --> 00:40:58,769
ciphers started with rib have a whole

00:40:56,849 --> 00:41:02,160
bunch and at the end it turned into Ryan

00:40:58,769 --> 00:41:03,599
doll which became a yes so that may be

00:41:02,160 --> 00:41:05,759
where it goes long term but for now it's

00:41:03,599 --> 00:41:06,869
pretty much just missed yeah we were at

00:41:05,759 --> 00:41:08,190
a true world crypt in one of the

00:41:06,869 --> 00:41:09,059
conversations that was going on it's

00:41:08,190 --> 00:41:10,920
leaking we have these nice formal

00:41:09,059 --> 00:41:12,390
methods to talk about crypto in academia

00:41:10,920 --> 00:41:13,829
where you can actually do security

00:41:12,390 --> 00:41:15,900
proofs and so they say those are still

00:41:13,829 --> 00:41:17,279
relatively new but like there's some

00:41:15,900 --> 00:41:19,619
pretty good formalism there and usually

00:41:17,279 --> 00:41:21,450
a lot of times the that formalism and

00:41:19,619 --> 00:41:23,400
that kind of ends at the implementation

00:41:21,450 --> 00:41:24,359
layer and most of the bugs and the

00:41:23,400 --> 00:41:26,160
problems that we're seeing or

00:41:24,359 --> 00:41:28,650
implementation bugs not protocol bugs

00:41:26,160 --> 00:41:30,269
and so there's kind of a lot of

00:41:28,650 --> 00:41:31,410
discussion going on in the academic

00:41:30,269 --> 00:41:32,549
community I think Matt green and some

00:41:31,410 --> 00:41:34,069
other guys kind of been talking about it

00:41:32,549 --> 00:41:35,700
where it's like oh well as

00:41:34,069 --> 00:41:38,160
cryptographers if you want to actually

00:41:35,700 --> 00:41:39,539
build ciphers that people can use that

00:41:38,160 --> 00:41:40,950
are actually useful for anybody you have

00:41:39,539 --> 00:41:42,630
to worry about the implementation just

00:41:40,950 --> 00:41:44,220
as much as you have to worry about the

00:41:42,630 --> 00:41:46,380
crypto side of things so I don't know

00:41:44,220 --> 00:41:50,430
we'll see how it goes but the answer

00:41:46,380 --> 00:41:52,349
your question is who knows Thanks I was

00:41:50,430 --> 00:41:55,430
also wondering you know you said this

00:41:52,349 --> 00:41:58,079
was I guess point a version point 14

00:41:55,430 --> 00:42:01,319
what do you what features do you see is

00:41:58,079 --> 00:42:03,750
you know being robust enough to have a

00:42:01,319 --> 00:42:06,299
version 1 and what do you envision for

00:42:03,750 --> 00:42:07,859
that so point 14 is actually pi openssl

00:42:06,299 --> 00:42:10,140
which has been around for over a decade

00:42:07,859 --> 00:42:11,339
so i don't know that he's ever going to

00:42:10,140 --> 00:42:13,769
go to one point out you'll have to ask

00:42:11,339 --> 00:42:14,060
JP uh-huh however on our side we're

00:42:13,769 --> 00:42:16,970
actually

00:42:14,060 --> 00:42:18,590
at 0.3 right now I don't know what

00:42:16,970 --> 00:42:19,970
constitutes one point oh we may change

00:42:18,590 --> 00:42:23,240
our versioning scheme before we ever

00:42:19,970 --> 00:42:24,710
even get there there's the IC henick

00:42:23,240 --> 00:42:26,990
nodding here he would vastly prefer us

00:42:24,710 --> 00:42:29,900
to be version based on date released but

00:42:26,990 --> 00:42:31,850
we'll see hi we're using keys are

00:42:29,900 --> 00:42:35,420
internally and it has a really good

00:42:31,850 --> 00:42:36,740
support for for versioned version key

00:42:35,420 --> 00:42:38,180
material which is really really useful

00:42:36,740 --> 00:42:39,910
in our environment do you plan on

00:42:38,180 --> 00:42:41,630
supporting something like that is that

00:42:39,910 --> 00:42:42,950
something that's going to be coming down

00:42:41,630 --> 00:42:45,650
the road so we are definitely interested

00:42:42,950 --> 00:42:46,730
we have not it has not been prioritized

00:42:45,650 --> 00:42:48,110
because none of the people who are

00:42:46,730 --> 00:42:50,630
working on it right now use key cell

00:42:48,110 --> 00:42:52,040
however we're aware of it and if if

00:42:50,630 --> 00:42:53,870
you're interested in talking more about

00:42:52,040 --> 00:42:55,490
how we might go about implementing that

00:42:53,870 --> 00:42:57,560
I'd be happy to talk about it after yeah

00:42:55,490 --> 00:42:58,700
yeah definitely interested in like we've

00:42:57,560 --> 00:42:59,720
been playing around with it on the side

00:42:58,700 --> 00:43:01,190
of it but none of us use it in

00:42:59,720 --> 00:43:03,200
production and so we haven't don't have

00:43:01,190 --> 00:43:05,120
a lot of experience with yet hey first

00:43:03,200 --> 00:43:06,680
of all um why do you call it bike

00:43:05,120 --> 00:43:11,090
shedding instead of Parkinson's love

00:43:06,680 --> 00:43:15,200
triviality well bike shed on that later

00:43:11,090 --> 00:43:16,730
and the the constant time compared bails

00:43:15,200 --> 00:43:19,850
out if there are different lengths why

00:43:16,730 --> 00:43:22,400
doesn't it just explode as like

00:43:19,850 --> 00:43:24,080
exception I don't know the answer them

00:43:22,400 --> 00:43:25,520
off the top of my head seems like that

00:43:24,080 --> 00:43:27,350
would be a mistake and would be

00:43:25,520 --> 00:43:29,690
something to fail about rather than

00:43:27,350 --> 00:43:31,280
simply you know potentially leak it into

00:43:29,690 --> 00:43:32,960
a timing attack so are we currently

00:43:31,280 --> 00:43:36,170
doing that you look to the core to that

00:43:32,960 --> 00:43:39,320
I with documentation not the code but I

00:43:36,170 --> 00:43:40,670
will assume they're honest so well I

00:43:39,320 --> 00:43:42,170
hope it is if it's not then we

00:43:40,670 --> 00:43:44,330
definitely should fix one of those two

00:43:42,170 --> 00:43:46,010
things but I will have to look at that I

00:43:44,330 --> 00:43:48,470
actually don't know the answer certainly

00:43:46,010 --> 00:43:50,960
I would prefer that we do the right

00:43:48,470 --> 00:43:53,480
thing if you would prefer we do the

00:43:50,960 --> 00:43:56,870
right thing varies Middleton right there

00:43:53,480 --> 00:44:00,020
yeah um yeah so constant time compared

00:43:56,870 --> 00:44:02,930
popular topic I guess you mentioned that

00:44:00,020 --> 00:44:04,820
all changes require full test coverage

00:44:02,930 --> 00:44:08,030
and you mentioned that there is a

00:44:04,820 --> 00:44:10,460
constant time compare function what is

00:44:08,030 --> 00:44:12,290
your unit test for combat actually being

00:44:10,460 --> 00:44:13,940
constant time look like so you've you've

00:44:12,290 --> 00:44:15,170
got you've hit on the one piece of our

00:44:13,940 --> 00:44:16,859
infrastructure that I'm not currently

00:44:15,170 --> 00:44:19,859
happy with the testing object

00:44:16,859 --> 00:44:21,480
and that is that at the sea layer we

00:44:19,859 --> 00:44:23,339
can't guarantee full cast coverage

00:44:21,480 --> 00:44:25,440
because well we don't have the ability

00:44:23,339 --> 00:44:27,989
to introspect in to see if fi from there

00:44:25,440 --> 00:44:30,029
so everything is just a string that we

00:44:27,989 --> 00:44:32,279
pass and so we don't know that we've

00:44:30,029 --> 00:44:33,930
actually evaluated it in practice the

00:44:32,279 --> 00:44:35,970
only way we're doing our evaluation of

00:44:33,930 --> 00:44:38,130
that line is basically saying well does

00:44:35,970 --> 00:44:40,230
it evaluate true does it raise when it's

00:44:38,130 --> 00:44:42,329
not so when it's supposed to so and

00:44:40,230 --> 00:44:43,739
otherwise we've just had three or four

00:44:42,329 --> 00:44:45,539
people or five I don't remember how many

00:44:43,739 --> 00:44:46,829
it was look at it and say yeah that

00:44:45,539 --> 00:44:49,380
looks like it's probably taunts constant

00:44:46,829 --> 00:44:50,759
time do you have thoughts on future

00:44:49,380 --> 00:44:52,109
improvements to that or it's a big

00:44:50,759 --> 00:44:53,579
question mark so it's a big question

00:44:52,109 --> 00:44:55,019
mark to me there may be other members of

00:44:53,579 --> 00:44:56,759
the team who have better ideas about it

00:44:55,019 --> 00:44:58,319
but from for my part I don't know the

00:44:56,759 --> 00:45:00,390
answer to that question yet I mean I

00:44:58,319 --> 00:45:02,190
dearly want to have better test coverage

00:45:00,390 --> 00:45:04,799
on that side but I don't know how to go

00:45:02,190 --> 00:45:05,970
about it right now okay cool thanks all

00:45:04,799 --> 00:45:09,839
right that any we got time for one more

00:45:05,970 --> 00:45:13,410
question so you know recent heartbleed

00:45:09,839 --> 00:45:15,749
stuff some people are calling the

00:45:13,410 --> 00:45:20,099
openssl maintainer is negligent for not

00:45:15,749 --> 00:45:23,400
using lib sees malloc and free for

00:45:20,099 --> 00:45:24,809
performance reasons and I wonder if you

00:45:23,400 --> 00:45:28,349
know the recent news is affected your

00:45:24,809 --> 00:45:29,880
confidence in openssl um I don't think

00:45:28,349 --> 00:45:32,369
we could think workers oh is this off

00:45:29,880 --> 00:45:33,930
question I i I've been down and don't

00:45:32,369 --> 00:45:35,430
open SSL long enough that I don't know

00:45:33,930 --> 00:45:39,089
that my confidence could be shaken in it

00:45:35,430 --> 00:45:41,480
because it was already shaken uh-huh the

00:45:39,089 --> 00:45:44,009
bass parts of openssl are very good

00:45:41,480 --> 00:45:46,650
however there are things like this that

00:45:44,009 --> 00:45:48,390
happen obviously too often because even

00:45:46,650 --> 00:45:51,299
once is too often but ultimately it is

00:45:48,390 --> 00:45:55,410
software and it's software that's very

00:45:51,299 --> 00:45:57,180
old maybe not old in some senses but in

00:45:55,410 --> 00:45:58,819
another sense it's more than 25 ish

00:45:57,180 --> 00:46:01,109
years since it was started at this point

00:45:58,819 --> 00:46:02,700
C best practices have changed

00:46:01,109 --> 00:46:05,489
dramatically testing best practices have

00:46:02,700 --> 00:46:06,749
changed dramatically when opus SSL was

00:46:05,489 --> 00:46:07,769
started the c preprocessor was

00:46:06,749 --> 00:46:09,869
considered the greatest thing on earth

00:46:07,769 --> 00:46:11,039
and you needed to write a macro for

00:46:09,869 --> 00:46:12,329
everything and your macro should call a

00:46:11,039 --> 00:46:14,940
macro and that macro should call three

00:46:12,329 --> 00:46:17,039
more macros those things are not usually

00:46:14,940 --> 00:46:19,829
considered best practice anymore uh so

00:46:17,039 --> 00:46:20,819
and actually even when they originally

00:46:19,829 --> 00:46:22,769
put in their malloc and free

00:46:20,819 --> 00:46:24,420
implementation there may very well have

00:46:22,769 --> 00:46:26,759
been a very good reason for it like 15

00:46:24,420 --> 00:46:29,730
years ago malik implementations could

00:46:26,759 --> 00:46:30,779
have been problematic not good reason

00:46:29,730 --> 00:46:34,229
anymore so that's not

00:46:30,779 --> 00:46:35,999
defense really what ultimately at my

00:46:34,229 --> 00:46:38,189
concern with openssl is that it's a

00:46:35,999 --> 00:46:39,809
critical piece of infrastructure and it

00:46:38,189 --> 00:46:42,109
has one full-time developer it has less

00:46:39,809 --> 00:46:45,749
it has less work going on with it then

00:46:42,109 --> 00:46:47,549
this project does and that concerns me

00:46:45,749 --> 00:46:48,809
yeah they had a three-day funding

00:46:47,549 --> 00:46:51,029
challenge I think they made nine hundred

00:46:48,809 --> 00:46:52,289
bucks you know I mean like this is

00:46:51,029 --> 00:46:53,519
probably one of the most important

00:46:52,289 --> 00:46:55,739
pieces of software that we all deploy

00:46:53,519 --> 00:46:56,939
and we all deploy it everywhere like as

00:46:55,739 --> 00:46:58,439
somebody who works at Rackspace right

00:46:56,939 --> 00:47:00,359
now like literally rebooting every

00:46:58,439 --> 00:47:01,709
device that a customer has because we

00:47:00,359 --> 00:47:03,059
don't we need to patch all of this stuff

00:47:01,709 --> 00:47:05,429
for them it's an enormous pain in the

00:47:03,059 --> 00:47:06,689
butt and nobody supports it you know and

00:47:05,429 --> 00:47:08,279
so it's like that's something that will

00:47:06,689 --> 00:47:10,289
be arguing with with our people that to

00:47:08,279 --> 00:47:12,479
try to get rack to pony up some money at

00:47:10,289 --> 00:47:14,099
least because this is one of those

00:47:12,479 --> 00:47:15,390
things that needs to be paid more

00:47:14,099 --> 00:47:17,309
attention to and we haven't been paying

00:47:15,390 --> 00:47:18,989
a lot of attention but lately yeah so I

00:47:17,309 --> 00:47:21,659
guess ultimately the answer your

00:47:18,989 --> 00:47:22,859
question is yes it concerns me but it

00:47:21,659 --> 00:47:24,749
doesn't concern me any more than it

00:47:22,859 --> 00:47:27,959
every other implementation concerns me

00:47:24,749 --> 00:47:30,089
this is just the latest in a series of

00:47:27,959 --> 00:47:34,219
hopefully serious wake-up calls for us

00:47:30,089 --> 00:47:34,219
on the way we do these things thank you

00:47:34,489 --> 00:47:38,789
yes sure they do they would love that we

00:47:37,109 --> 00:47:41,249
welcome some of that 240 million that we

00:47:38,789 --> 00:47:44,809
can't find yeah all right I think we're

00:47:41,249 --> 00:47:44,809

YouTube URL: https://www.youtube.com/watch?v=r_Pj__qjBvA


