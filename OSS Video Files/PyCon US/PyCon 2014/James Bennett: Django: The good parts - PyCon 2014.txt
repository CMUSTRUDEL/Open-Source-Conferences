Title: James Bennett: Django: The good parts - PyCon 2014
Publication date: 2014-04-24
Playlist: PyCon 2014
Description: 
	Speaker: James Bennett

Lots of talks and tutorials try to cover Django exhaustively, going over every component and feature. But not so many take a look at the bits that let Django be Django. In this talk, we'll see exactly what those bits -- some old, some new -- are, in a way that shows why it's still a solid and popular choice for web developers nearly nine years after its initial public release.

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:03,930 --> 00:00:09,370
all right the last speaker in this

00:00:06,910 --> 00:00:13,410
session is James Bennett he's gonna be

00:00:09,370 --> 00:00:13,410
talking about the good parts of Django

00:00:18,420 --> 00:00:25,570
hi okay so I know you're all anxious to

00:00:23,859 --> 00:00:27,460
get to lunch fortunately there aren't

00:00:25,570 --> 00:00:31,060
that many good things in Django so this

00:00:27,460 --> 00:00:32,829
won't take very long just by way of

00:00:31,060 --> 00:00:35,620
introduction my name is James Bennett

00:00:32,829 --> 00:00:37,750
I'm one of the release managers for

00:00:35,620 --> 00:00:40,059
Django used to work at the Lawrence

00:00:37,750 --> 00:00:42,730
Journal world which is the company in

00:00:40,059 --> 00:00:47,640
Django originally came out of I've been

00:00:42,730 --> 00:00:51,359
involved with Django for quite some time

00:00:47,640 --> 00:00:54,250
not as long as Django has existed though

00:00:51,359 --> 00:00:56,019
the initial public preview of it which I

00:00:54,250 --> 00:00:58,350
remembered downloading and playing with

00:00:56,019 --> 00:01:02,140
and falling in love with was in July

00:00:58,350 --> 00:01:06,520
2005 so we're looking at you know about

00:01:02,140 --> 00:01:09,730
nine years of Django releases growing

00:01:06,520 --> 00:01:12,370
adding code adding features what does

00:01:09,730 --> 00:01:18,810
Django look like today well we just did

00:01:12,370 --> 00:01:21,630
the 1.7 beta 160 1923 lines of Python

00:01:18,810 --> 00:01:26,770
was the count that I got out of that

00:01:21,630 --> 00:01:29,680
Django is now you know we call it a full

00:01:26,770 --> 00:01:32,460
stack framework because we have well a

00:01:29,680 --> 00:01:35,440
full stack of all of these things

00:01:32,460 --> 00:01:39,040
request in response and templating and

00:01:35,440 --> 00:01:40,390
ORM and forms and authentication and it

00:01:39,040 --> 00:01:44,830
just keeps going and going and going

00:01:40,390 --> 00:01:46,750
there this huge list of features Django

00:01:44,830 --> 00:01:48,970
can now be literally described as the

00:01:46,750 --> 00:01:51,580
800-pound gorilla of the Python web

00:01:48,970 --> 00:01:53,530
framework world a title that I believe

00:01:51,580 --> 00:01:55,360
we've claimed from zope by throwing

00:01:53,530 --> 00:02:00,070
enough bananas at them to blow up the

00:01:55,360 --> 00:02:03,700
building they were on so this raises a

00:02:00,070 --> 00:02:06,850
question aren't other frameworks smaller

00:02:03,700 --> 00:02:10,300
or lighter or better or more flexible

00:02:06,850 --> 00:02:12,550
than Django what is it that Django still

00:02:10,300 --> 00:02:15,550
has still does that makes it a good

00:02:12,550 --> 00:02:16,520
choice so I want to talk about three

00:02:15,550 --> 00:02:20,690
things

00:02:16,520 --> 00:02:22,040
mainly the good parts of Django first

00:02:20,690 --> 00:02:25,070
one I want to talk about is gonna be the

00:02:22,040 --> 00:02:28,400
HTTP abstractions that Django provides

00:02:25,070 --> 00:02:31,580
and the way Django handles HTTP and your

00:02:28,400 --> 00:02:34,270
request response cycle second is the

00:02:31,580 --> 00:02:37,690
conservative and yes I do mean that word

00:02:34,270 --> 00:02:40,990
conservative approach to adding features

00:02:37,690 --> 00:02:43,790
third and finally our secret weapon you

00:02:40,990 --> 00:02:45,800
know amongst our weapons are surprised

00:02:43,790 --> 00:02:48,500
fear a fanatical devotion to the Pope

00:02:45,800 --> 00:02:49,670
and the Django application which is

00:02:48,500 --> 00:02:52,870
something we will talk about in a few

00:02:49,670 --> 00:03:00,220
minutes but first let's talk about HTTP

00:02:52,870 --> 00:03:03,380
HTTP sucks when no love for that okay

00:03:00,220 --> 00:03:06,650
HTTP has some problems has nine

00:03:03,380 --> 00:03:08,390
different request methods god only knows

00:03:06,650 --> 00:03:09,710
how you keep track of all of them and

00:03:08,390 --> 00:03:12,980
what options go with them

00:03:09,710 --> 00:03:17,600
it is completely and hilariously unaware

00:03:12,980 --> 00:03:20,120
that Unicode exists persistence and off

00:03:17,600 --> 00:03:21,970
and streaming and security and all these

00:03:20,120 --> 00:03:25,760
other things that we care about here in

00:03:21,970 --> 00:03:28,580
2014 were kind of either never added or

00:03:25,760 --> 00:03:32,209
tacked on was like oh maybe we should do

00:03:28,580 --> 00:03:34,720
that ten years later the HCV really kind

00:03:32,209 --> 00:03:37,340
of sucks as a protocol to work with and

00:03:34,720 --> 00:03:42,250
traditionally if you wanted to write

00:03:37,340 --> 00:03:47,900
programs that spoke HTTP you wrote CGI

00:03:42,250 --> 00:03:51,050
CGI is also not a lot of fun here's in

00:03:47,900 --> 00:03:53,330
theory in theory if you were to read a

00:03:51,050 --> 00:03:55,370
CGI tutorial this is what it would tell

00:03:53,330 --> 00:03:57,530
you would tell you that you're going to

00:03:55,370 --> 00:03:59,600
write a script the web server is going

00:03:57,530 --> 00:04:01,940
to set up all of the request information

00:03:59,600 --> 00:04:05,420
in environment variables and then invoke

00:04:01,940 --> 00:04:07,190
your script your script is also going to

00:04:05,420 --> 00:04:10,040
receive any submitted data from the

00:04:07,190 --> 00:04:12,140
request over its standard input your

00:04:10,040 --> 00:04:13,640
script will then read the environment to

00:04:12,140 --> 00:04:14,870
figure out what's going on read the

00:04:13,640 --> 00:04:18,109
standard input to figure out what's

00:04:14,870 --> 00:04:20,209
going on do its processing and then on

00:04:18,109 --> 00:04:23,450
standard output send out your response

00:04:20,209 --> 00:04:25,610
headers and your response body who here

00:04:23,450 --> 00:04:26,810
believes that this is how CGI actually

00:04:25,610 --> 00:04:30,740
works in the real world

00:04:26,810 --> 00:04:33,350
I noticed not a lot of hands that's a

00:04:30,740 --> 00:04:35,990
good thing here's how CGI actually works

00:04:33,350 --> 00:04:37,850
first of all you hope and pray that the

00:04:35,990 --> 00:04:40,550
web server will actually invoke your

00:04:37,850 --> 00:04:42,080
script it may or may not at some point

00:04:40,550 --> 00:04:44,270
you're going to type a command that

00:04:42,080 --> 00:04:48,680
looks like this you're not going to

00:04:44,270 --> 00:04:50,450
understand why and if you don't get why

00:04:48,680 --> 00:04:52,910
you're doing that ask someone who has a

00:04:50,450 --> 00:04:56,660
very very large beard to explain what

00:04:52,910 --> 00:04:58,250
that means the environment that you're

00:04:56,660 --> 00:05:01,310
going to be handed by your web server is

00:04:58,250 --> 00:05:04,100
full of lies and sadness and things that

00:05:01,310 --> 00:05:05,690
are going to make you upset at some

00:05:04,100 --> 00:05:07,940
point you're finally just going to give

00:05:05,690 --> 00:05:09,830
up on trying to figure out what URL was

00:05:07,940 --> 00:05:11,360
requested because that information could

00:05:09,830 --> 00:05:13,700
be in any of multiple different

00:05:11,360 --> 00:05:15,410
environment variables and you're just

00:05:13,700 --> 00:05:17,840
going to try to fork bomb the server

00:05:15,410 --> 00:05:20,300
after which you will finally completely

00:05:17,840 --> 00:05:23,360
give up and start drinking this is how

00:05:20,300 --> 00:05:27,320
real programmers really do CGI I have

00:05:23,360 --> 00:05:29,630
done this for a living now fortunately

00:05:27,320 --> 00:05:32,720
in Python we don't have to write CGI we

00:05:29,630 --> 00:05:38,270
write whiskey unfortunately whiskey is

00:05:32,720 --> 00:05:40,130
basically CGI done in Python I realize

00:05:38,270 --> 00:05:43,280
you know some people may not like

00:05:40,130 --> 00:05:45,350
hearing whiskey criticised having a

00:05:43,280 --> 00:05:49,280
standard is important whiskey is our

00:05:45,350 --> 00:05:52,310
standard gateway interface but number

00:05:49,280 --> 00:05:54,140
one it is a CGI style programming model

00:05:52,310 --> 00:05:56,180
you're handed and environment you are

00:05:54,140 --> 00:05:58,310
expected to parse and understand what is

00:05:56,180 --> 00:06:01,220
in that environment rather than be hand

00:05:58,310 --> 00:06:03,380
handed any kind of normalized data which

00:06:01,220 --> 00:06:05,660
means that your entire whiskey stack has

00:06:03,380 --> 00:06:07,280
to parse that environment okay now we

00:06:05,660 --> 00:06:09,020
passed it to this component which has to

00:06:07,280 --> 00:06:10,760
reparse it which passed it to that

00:06:09,020 --> 00:06:12,530
component which has to reparse it and

00:06:10,760 --> 00:06:14,479
you just end up with this mess of

00:06:12,530 --> 00:06:16,220
parsing an environment there really was

00:06:14,479 --> 00:06:20,539
never that good of a programming model

00:06:16,220 --> 00:06:22,910
begin with second whiskey doesn't really

00:06:20,539 --> 00:06:24,229
have any way for different components to

00:06:22,910 --> 00:06:26,750
communicate with each other in a

00:06:24,229 --> 00:06:29,060
standardized way you have to go and

00:06:26,750 --> 00:06:30,410
either invent your own things that you

00:06:29,060 --> 00:06:31,970
stick in their environment and hope

00:06:30,410 --> 00:06:34,430
something else doesn't trample on them

00:06:31,970 --> 00:06:38,539
or you have to go invent an out-of-band

00:06:34,430 --> 00:06:40,139
signaling process the way you return

00:06:38,539 --> 00:06:43,139
HTTP responses from was

00:06:40,139 --> 00:06:44,729
he sucks as far as I know even people

00:06:43,139 --> 00:06:48,930
who really love whiskey agree with me on

00:06:44,729 --> 00:06:51,029
this one and finally it inherits HTTP

00:06:48,930 --> 00:06:52,860
willful blindness to the fact that

00:06:51,029 --> 00:06:56,490
character sets other than latin one

00:06:52,860 --> 00:06:59,520
might exist somewhere this is a real

00:06:56,490 --> 00:07:03,389
problem you will run into the spec on

00:06:59,520 --> 00:07:06,270
whisky actually I don't remember exactly

00:07:03,389 --> 00:07:08,789
but it does on Python 3 on Python 2 you

00:07:06,270 --> 00:07:13,229
are required to return a byte string

00:07:08,789 --> 00:07:15,300
containing only ISO 8859 that's one code

00:07:13,229 --> 00:07:17,759
points for a lot of things and the

00:07:15,300 --> 00:07:21,120
whiskey ref module actually checks the

00:07:17,759 --> 00:07:23,909
you passed exactly the type stir and not

00:07:21,120 --> 00:07:28,050
any subclass or functionality you added

00:07:23,909 --> 00:07:31,110
to it so can we do better than this

00:07:28,050 --> 00:07:33,210
yes we can we can do much better than

00:07:31,110 --> 00:07:36,029
this so let's do better let's start with

00:07:33,210 --> 00:07:38,939
HTTP requests let's have a class called

00:07:36,029 --> 00:07:41,460
HTTP request let's have an already parse

00:07:38,939 --> 00:07:43,080
and normalize everything for you let's

00:07:41,460 --> 00:07:44,879
have it have all the things you wanted

00:07:43,080 --> 00:07:47,969
to access you know available as

00:07:44,879 --> 00:07:49,740
attributes with dictionaries for things

00:07:47,969 --> 00:07:51,839
like the query string or the post data

00:07:49,740 --> 00:07:54,599
let's actually handle the character

00:07:51,839 --> 00:07:56,009
encoding in a sane and consistent way so

00:07:54,599 --> 00:07:57,300
that the programmer doesn't have to

00:07:56,009 --> 00:08:00,000
worry about that when they're writing

00:07:57,300 --> 00:08:02,460
their application code now that we've

00:08:00,000 --> 00:08:05,370
got a request let's do a response

00:08:02,460 --> 00:08:07,710
let's make HTTP responses really easy to

00:08:05,370 --> 00:08:09,810
construct and play with let's not fool

00:08:07,710 --> 00:08:12,180
around with any of this you know start

00:08:09,810 --> 00:08:15,029
response and send your headers and then

00:08:12,180 --> 00:08:16,409
do this and then do this let's just have

00:08:15,029 --> 00:08:19,229
an HTTP response

00:08:16,409 --> 00:08:21,479
let's have subclasses of the HTTP

00:08:19,229 --> 00:08:23,099
response for you know common things like

00:08:21,479 --> 00:08:26,699
not being able to find something or

00:08:23,099 --> 00:08:29,699
needing to issue a redirect then finally

00:08:26,699 --> 00:08:31,589
let's tie it all together let's say okay

00:08:29,699 --> 00:08:34,320
just write a callable that takes one of

00:08:31,589 --> 00:08:35,430
these requests and returns a response or

00:08:34,320 --> 00:08:38,070
raises an exception

00:08:35,430 --> 00:08:39,510
let's do URL parsing the simplest

00:08:38,070 --> 00:08:41,669
possible way let's just break some

00:08:39,510 --> 00:08:43,409
regular expressions and say this regular

00:08:41,669 --> 00:08:45,480
expression goes to this collarbone and

00:08:43,409 --> 00:08:47,490
you know if you ever need extra

00:08:45,480 --> 00:08:48,839
arguments in there okay we'll just put

00:08:47,490 --> 00:08:51,790
some capturing groups in the regular

00:08:48,839 --> 00:08:56,470
expression and you know what that

00:08:51,790 --> 00:08:58,870
it that's HTTP in Django that's all you

00:08:56,470 --> 00:09:01,330
have to do you have the same normalized

00:08:58,870 --> 00:09:03,520
api's and abstractions you have this

00:09:01,330 --> 00:09:05,170
easy way because hopefully everybody

00:09:03,520 --> 00:09:07,420
already knows regular expressions right

00:09:05,170 --> 00:09:09,760
you're all regular expression masters I

00:09:07,420 --> 00:09:12,040
know you are everybody knows regular

00:09:09,760 --> 00:09:15,700
expressions easy enough to wire up the

00:09:12,040 --> 00:09:20,340
urls and billy mays voice is Jesse know

00:09:15,700 --> 00:09:23,620
we're in here all but wait there's more

00:09:20,340 --> 00:09:26,440
we also get HTTP and request response

00:09:23,620 --> 00:09:28,270
lifecycle we get a middleware system now

00:09:26,440 --> 00:09:30,310
granted all middleware systems suck

00:09:28,270 --> 00:09:31,930
including Django's including whiskey

00:09:30,310 --> 00:09:33,100
middleware including every middleware

00:09:31,930 --> 00:09:34,990
system ever invented

00:09:33,100 --> 00:09:38,110
they all suck but you have to have one

00:09:34,990 --> 00:09:40,240
we have one we have signals we have a

00:09:38,110 --> 00:09:42,070
way for components within Django to

00:09:40,240 --> 00:09:45,250
signal each other and listen to those

00:09:42,070 --> 00:09:47,410
signals completely naturally completely

00:09:45,250 --> 00:09:48,850
baked into the framework we have the

00:09:47,410 --> 00:09:50,800
ability because everything is just a

00:09:48,850 --> 00:09:54,040
callable to do decorators for

00:09:50,800 --> 00:09:56,140
composition you can stick basically

00:09:54,040 --> 00:09:58,690
anything you can think of pre or post

00:09:56,140 --> 00:10:01,120
processing on any one of these kala

00:09:58,690 --> 00:10:03,190
bowls just as a decorator because it is

00:10:01,120 --> 00:10:04,810
just kala bowls all the way down or

00:10:03,190 --> 00:10:07,210
Turtles all the way down as I believe

00:10:04,810 --> 00:10:11,020
Simon Willison likes to put it sitting

00:10:07,210 --> 00:10:14,470
there in the front row finally we do in

00:10:11,020 --> 00:10:16,480
fact do whisky yes we read pep 333 so

00:10:14,470 --> 00:10:18,160
you didn't have to because once you've

00:10:16,480 --> 00:10:19,780
used all of these useful abstractions

00:10:18,160 --> 00:10:22,720
you have a django project which is a

00:10:19,780 --> 00:10:24,060
whisky application and django under the

00:10:22,720 --> 00:10:28,060
hood will do the hard work of

00:10:24,060 --> 00:10:33,390
translating whisky to actually say HTTP

00:10:28,060 --> 00:10:35,290
abstractions for you personally

00:10:33,390 --> 00:10:37,720
borrowing a phrase from jamie zawinski

00:10:35,290 --> 00:10:40,450
where he once said first off java

00:10:37,720 --> 00:10:43,780
doesn't have free after that everything

00:10:40,450 --> 00:10:45,910
is gravy I'm willing to take quite a hit

00:10:43,780 --> 00:10:49,120
in terms of importing libraries to get

00:10:45,910 --> 00:10:51,190
seen HTTP abstractions maybe this is

00:10:49,120 --> 00:10:54,430
because I've been doing it long enough a

00:10:51,190 --> 00:10:57,100
bit I just want to bang my head against

00:10:54,430 --> 00:11:00,490
the keyboard sometimes but to me that's

00:10:57,100 --> 00:11:02,220
worth a lot Django has for my money and

00:11:00,490 --> 00:11:05,410
I've looked at a lot of the frameworks

00:11:02,220 --> 00:11:07,449
absolutely the best HTTP abstraction

00:11:05,410 --> 00:11:09,190
and request/response lifecycle handling

00:11:07,449 --> 00:11:11,769
of any of the current generation of

00:11:09,190 --> 00:11:13,600
Python web frameworks it is absolutely

00:11:11,769 --> 00:11:16,509
one of the best things about Django and

00:11:13,600 --> 00:11:17,769
I would probably still use it even if I

00:11:16,509 --> 00:11:22,209
weren't using any of the other

00:11:17,769 --> 00:11:25,829
components second thing I want to talk

00:11:22,209 --> 00:11:29,709
about is conservatism Django is a

00:11:25,829 --> 00:11:32,319
conservative framework and I really do

00:11:29,709 --> 00:11:34,629
mean this I really you know I'm not

00:11:32,319 --> 00:11:35,920
gonna call Django minimal I don't think

00:11:34,629 --> 00:11:39,069
anybody would ever do that

00:11:35,920 --> 00:11:43,269
Django is not a minimal framework Django

00:11:39,069 --> 00:11:46,629
is a conservative framework so take an

00:11:43,269 --> 00:11:50,079
example we have this filter that was new

00:11:46,629 --> 00:11:52,360
in one point form that all it does is

00:11:50,079 --> 00:11:56,560
take a string and truncate it at a

00:11:52,360 --> 00:11:58,149
certain number of characters if you're

00:11:56,560 --> 00:12:00,279
familiar with Django's development

00:11:58,149 --> 00:12:04,649
process you know that getting that in

00:12:00,279 --> 00:12:07,959
took four years I'm not even joking

00:12:04,649 --> 00:12:09,730
coming soon in Django 1.7 in fact Andrew

00:12:07,959 --> 00:12:12,069
Godwin was just here talking about it we

00:12:09,730 --> 00:12:15,639
Wade have a migration API built into the

00:12:12,069 --> 00:12:20,980
core framework that only took about six

00:12:15,639 --> 00:12:24,730
years Django is incredibly conservative

00:12:20,980 --> 00:12:28,089
about adding new things things get into

00:12:24,730 --> 00:12:31,769
Django very very slowly

00:12:28,089 --> 00:12:34,689
in fact now some things are getting out

00:12:31,769 --> 00:12:37,089
if you look at the last few releases and

00:12:34,689 --> 00:12:39,610
if you look at road maps and plans we

00:12:37,089 --> 00:12:41,800
are either have removed or are in the

00:12:39,610 --> 00:12:46,689
process of removing quite a lot of

00:12:41,800 --> 00:12:48,759
things especially in contribs to have

00:12:46,689 --> 00:12:50,500
the comments framework which is still in

00:12:48,759 --> 00:12:52,569
Django but I don't think is anywhere

00:12:50,500 --> 00:12:55,329
officially documented we used to have

00:12:52,569 --> 00:12:58,089
the data browse application which now is

00:12:55,329 --> 00:12:59,980
just gone the local flavor application

00:12:58,089 --> 00:13:02,500
which has now been split out into its

00:12:59,980 --> 00:13:04,269
own completely separate package the

00:13:02,500 --> 00:13:07,480
markup application which no longer

00:13:04,269 --> 00:13:09,250
exists probably a lot more things are

00:13:07,480 --> 00:13:11,920
going to come out of Django in the near

00:13:09,250 --> 00:13:13,089
future what this means is the Django has

00:13:11,920 --> 00:13:15,460
reached a point where things are

00:13:13,089 --> 00:13:18,910
difficult to add and easy to remove

00:13:15,460 --> 00:13:20,980
and not just whole libraries or api's if

00:13:18,910 --> 00:13:23,529
you look at the deprecation warnings the

00:13:20,980 --> 00:13:26,010
Django issues from one release to the

00:13:23,529 --> 00:13:28,980
next of things that are deprecated we go

00:13:26,010 --> 00:13:32,709
one release to release then it's gone

00:13:28,980 --> 00:13:34,810
we are not shy about that we do have a

00:13:32,709 --> 00:13:37,830
compatibility policy we do deprecated

00:13:34,810 --> 00:13:40,600
things slowly but we get them out now

00:13:37,830 --> 00:13:42,520
usually this is described as a bad thing

00:13:40,600 --> 00:13:44,589
a lot of people over the years have

00:13:42,520 --> 00:13:46,660
talked about how frustrated they are

00:13:44,589 --> 00:13:48,279
when they're trying to contribute to

00:13:46,660 --> 00:13:50,589
Django and they have an idea for a great

00:13:48,279 --> 00:13:52,510
new feature and it just sort of seems

00:13:50,589 --> 00:13:55,029
like it stalls it seems like it takes

00:13:52,510 --> 00:13:56,920
forever to get this in there poor Eric

00:13:55,029 --> 00:13:58,589
florins ah no with the truncate filter

00:13:56,920 --> 00:14:01,990
literally did spend four years

00:13:58,589 --> 00:14:03,820
championing that on every mailing list

00:14:01,990 --> 00:14:07,450
he could find in every venue he could

00:14:03,820 --> 00:14:09,399
find and finally it did make it in but

00:14:07,450 --> 00:14:11,680
generally people you know treat this as

00:14:09,399 --> 00:14:14,589
a bad thing I don't think it's

00:14:11,680 --> 00:14:16,240
necessarily a bad thing for Django to be

00:14:14,589 --> 00:14:18,640
as conservative as it is in fact I think

00:14:16,240 --> 00:14:22,150
it can be a good thing

00:14:18,640 --> 00:14:25,300
conservatism as an approach to framework

00:14:22,150 --> 00:14:27,640
design there's a strong preference for

00:14:25,300 --> 00:14:29,620
letting solutions bubble up out of the

00:14:27,640 --> 00:14:32,170
community and in fact Andrea's talk

00:14:29,620 --> 00:14:34,930
about migrations is a great example of

00:14:32,170 --> 00:14:36,940
that we have had over Django's history

00:14:34,930 --> 00:14:41,110
several competing migration frameworks

00:14:36,940 --> 00:14:42,940
South is the one that seems to have won

00:14:41,110 --> 00:14:46,000
and captured the hearts and minds of

00:14:42,940 --> 00:14:48,400
Django users if we just pick something

00:14:46,000 --> 00:14:50,410
way back at the beginning or rolled our

00:14:48,400 --> 00:14:54,370
own we never would have gotten something

00:14:50,410 --> 00:14:57,310
as good as self the core framework these

00:14:54,370 --> 00:14:59,829
days I've heard Jacob talk about this

00:14:57,310 --> 00:15:01,570
and I think he's onto something should

00:14:59,829 --> 00:15:04,270
be more about providing the underlying

00:15:01,570 --> 00:15:06,640
api's to let you do things rather than

00:15:04,270 --> 00:15:07,870
providing fully baked features I mean

00:15:06,640 --> 00:15:09,430
obviously there's still some things

00:15:07,870 --> 00:15:11,620
they're gonna have to be real features

00:15:09,430 --> 00:15:14,200
that are in there but mostly just

00:15:11,620 --> 00:15:16,300
providing the API support and the result

00:15:14,200 --> 00:15:17,770
of this is you end up with Django is

00:15:16,300 --> 00:15:19,149
often criticized as making it hard to

00:15:17,770 --> 00:15:20,380
swap components you end up with things

00:15:19,149 --> 00:15:24,579
that are more swappable than you

00:15:20,380 --> 00:15:26,890
expected at my day job at Mozilla I work

00:15:24,579 --> 00:15:29,800
on the Mozilla developer Network

00:15:26,890 --> 00:15:31,890
the number of things in Django that we

00:15:29,800 --> 00:15:34,180
don't use or that we use something else

00:15:31,890 --> 00:15:37,120
swapping in we don't use the template

00:15:34,180 --> 00:15:39,180
system we use Jinja swapping that in is

00:15:37,120 --> 00:15:41,680
really easy and making Jan you use it

00:15:39,180 --> 00:15:45,220
the result of this is often you get

00:15:41,680 --> 00:15:48,400
slightly more swappable you also get

00:15:45,220 --> 00:15:51,210
more stability over time something that

00:15:48,400 --> 00:15:53,440
makes me at least feel warm and fuzzy is

00:15:51,210 --> 00:15:55,810
every once in a while I'll see someone

00:15:53,440 --> 00:15:59,080
on reddit or on a mailing list or hacker

00:15:55,810 --> 00:16:01,180
knew this or talking about how they

00:15:59,080 --> 00:16:03,250
tried Django way back in the day and

00:16:01,180 --> 00:16:04,960
then they got busy doing something else

00:16:03,250 --> 00:16:06,940
and now they've come back to it and they

00:16:04,960 --> 00:16:08,620
say well I can see it's got all these

00:16:06,940 --> 00:16:10,630
new features but it still feels very

00:16:08,620 --> 00:16:13,480
much the same framework that I learned

00:16:10,630 --> 00:16:17,610
you know four or five years ago Django

00:16:13,480 --> 00:16:21,760
is conceptually very very stable

00:16:17,610 --> 00:16:23,680
features go into Django not when there's

00:16:21,760 --> 00:16:25,120
hype around them not when there's lots

00:16:23,680 --> 00:16:26,830
of people saying we need to have this

00:16:25,120 --> 00:16:32,800
now features go in when they're ready

00:16:26,830 --> 00:16:34,780
most of the time we hope competition

00:16:32,800 --> 00:16:37,510
often ends up giving us better solutions

00:16:34,780 --> 00:16:39,610
South again is a wonderful example of

00:16:37,510 --> 00:16:42,220
that we've also had other features where

00:16:39,610 --> 00:16:43,870
we've had competing proposals and we've

00:16:42,220 --> 00:16:46,810
had things even sometimes that never

00:16:43,870 --> 00:16:51,130
made it in because we never could get a

00:16:46,810 --> 00:16:54,210
solid competing proposal the very first

00:16:51,130 --> 00:16:57,010
year that we did Summer of Code

00:16:54,210 --> 00:17:00,460
officially I was mentoring Yanis who now

00:16:57,010 --> 00:17:02,650
you know needs no mentoring talking

00:17:00,460 --> 00:17:04,750
about packaging and making Django more

00:17:02,650 --> 00:17:09,520
friendly to packaging tools and set up

00:17:04,750 --> 00:17:11,980
tools and he put in a ton of work and it

00:17:09,520 --> 00:17:13,780
just never really played out nothing

00:17:11,980 --> 00:17:15,790
satisfactory ever came out of the

00:17:13,780 --> 00:17:18,580
community as far as making Django play

00:17:15,790 --> 00:17:21,070
nice or was setup tools and so we never

00:17:18,580 --> 00:17:24,250
turned into an all end setup tool based

00:17:21,070 --> 00:17:25,720
framework sometimes that's the result of

00:17:24,250 --> 00:17:28,090
having this type of competition as you

00:17:25,720 --> 00:17:30,640
realize there's nothing that white makes

00:17:28,090 --> 00:17:32,610
white makes the cut so nothing goes into

00:17:30,640 --> 00:17:38,640
the framework just yet

00:17:32,610 --> 00:17:41,580
so Django overall feel free to disagree

00:17:38,640 --> 00:17:43,830
I think Django's conservatism towards

00:17:41,580 --> 00:17:46,410
new features and conservatism towards

00:17:43,830 --> 00:17:48,990
adding things towards making major

00:17:46,410 --> 00:17:51,540
radical changes is really one of its

00:17:48,990 --> 00:17:54,000
strengths primarily for that reason of

00:17:51,540 --> 00:17:56,280
that person who comes in on Hacker News

00:17:54,000 --> 00:17:58,260
or reddit or on the mailing list where

00:17:56,280 --> 00:18:01,140
that person who learned Django once upon

00:17:58,260 --> 00:18:03,470
a time and now they don't need to learn

00:18:01,140 --> 00:18:06,690
it all over again Django is not a

00:18:03,470 --> 00:18:08,760
completely new framework every year we

00:18:06,690 --> 00:18:10,650
get new features every year we get new

00:18:08,760 --> 00:18:13,500
things that we can do every year but

00:18:10,650 --> 00:18:17,570
Django itself remains remarkably stable

00:18:13,500 --> 00:18:21,240
and consistent conceptually speaking of

00:18:17,570 --> 00:18:23,280
conceptually the third and final good

00:18:21,240 --> 00:18:26,630
part and this is my personal favorite

00:18:23,280 --> 00:18:30,180
I've given several talks on this is

00:18:26,630 --> 00:18:31,460
encapsulation of applications or maybe

00:18:30,180 --> 00:18:35,810
if you want to have a little pun

00:18:31,460 --> 00:18:38,670
encapsulation as Django secret weapon

00:18:35,810 --> 00:18:41,160
you look at other ways to do

00:18:38,670 --> 00:18:44,280
applications a Django project as we

00:18:41,160 --> 00:18:47,430
mentioned is a whiskey application

00:18:44,280 --> 00:18:50,850
what is a Django application though if

00:18:47,430 --> 00:18:53,040
you want to talk about say pure whiskey

00:18:50,850 --> 00:18:55,290
applications or applications and a lot

00:18:53,040 --> 00:18:58,890
of other frameworks we're talking about

00:18:55,290 --> 00:19:02,100
monoliths or black boxes a lot of cases

00:18:58,890 --> 00:19:04,650
where you sort of feel a need to do

00:19:02,100 --> 00:19:07,740
everything in one application or

00:19:04,650 --> 00:19:09,600
everything in one endpoint and sort of

00:19:07,740 --> 00:19:12,540
because of the nature of whiskey anybody

00:19:09,600 --> 00:19:14,820
who's more thoroughbred exposing whiskey

00:19:12,540 --> 00:19:16,170
to you all the way through it's going to

00:19:14,820 --> 00:19:17,670
end up being a lot more black box

00:19:16,170 --> 00:19:19,110
because it's harder for whiskey

00:19:17,670 --> 00:19:22,770
components to communicate with each

00:19:19,110 --> 00:19:24,870
other you don't have the sort of up and

00:19:22,770 --> 00:19:27,120
down the stack signaling communication

00:19:24,870 --> 00:19:29,040
processes that you would have from

00:19:27,120 --> 00:19:31,380
something else so you end up designing

00:19:29,040 --> 00:19:33,420
either these really huge things or these

00:19:31,380 --> 00:19:36,020
things that sort of act like black boxes

00:19:33,420 --> 00:19:39,750
or both

00:19:36,020 --> 00:19:42,540
whereas a Django application could be

00:19:39,750 --> 00:19:43,510
any of these things models use utility

00:19:42,540 --> 00:19:48,160
code

00:19:43,510 --> 00:19:52,720
we're forms but they're all the Django

00:19:48,160 --> 00:19:54,100
bits were there all the Django api's now

00:19:52,720 --> 00:19:56,230
I mentioned for example you don't have

00:19:54,100 --> 00:19:58,120
to use janko's template system but if

00:19:56,230 --> 00:20:00,280
you use Django API is for loading and

00:19:58,120 --> 00:20:02,050
rendering a template it just works

00:20:00,280 --> 00:20:04,060
even if you're using Django's template

00:20:02,050 --> 00:20:05,490
system if you're using Jinja if you're

00:20:04,060 --> 00:20:09,040
using something else

00:20:05,490 --> 00:20:11,890
Django gives you a bunch of safe API if

00:20:09,040 --> 00:20:14,710
you can rely upon being present a lot of

00:20:11,890 --> 00:20:16,000
safe assumptions that you can make about

00:20:14,710 --> 00:20:17,890
things that are going to be present

00:20:16,000 --> 00:20:19,600
things that you can use and this makes

00:20:17,890 --> 00:20:22,720
integration of lots of different

00:20:19,600 --> 00:20:24,970
components a whole lot easier than

00:20:22,720 --> 00:20:28,780
integrating a monolith or integrating a

00:20:24,970 --> 00:20:31,540
bunch of black boxes Django applications

00:20:28,780 --> 00:20:33,880
as a result are free to be sort of

00:20:31,540 --> 00:20:35,980
encapsulated pluggable functionality

00:20:33,880 --> 00:20:39,280
first time I ever talked about this was

00:20:35,980 --> 00:20:41,890
six years ago at a django con in

00:20:39,280 --> 00:20:44,680
california and at the time I thought

00:20:41,890 --> 00:20:47,230
this was the selling point of Django I

00:20:44,680 --> 00:20:50,950
still think it is the ability to write a

00:20:47,230 --> 00:20:53,710
django application as a single reusable

00:20:50,950 --> 00:20:55,990
pluggable encapsulated bit of whatever

00:20:53,710 --> 00:20:58,120
you needed to do at the time my example

00:20:55,990 --> 00:21:00,310
was Jenga registration jagat profiles

00:20:58,120 --> 00:21:04,000
some things that I put out there as

00:21:00,310 --> 00:21:08,380
examples since then people have gone

00:21:04,000 --> 00:21:11,740
above and beyond in terms of that sort

00:21:08,380 --> 00:21:13,960
of the philosophy of UNIX tools a Django

00:21:11,740 --> 00:21:18,340
application is just like UNIX tool do

00:21:13,960 --> 00:21:20,530
one thing do it well so now for example

00:21:18,340 --> 00:21:22,840
I have a personal blog my personal blog

00:21:20,530 --> 00:21:26,410
has an installed apps list with 12

00:21:22,840 --> 00:21:28,540
entries in it at my day job where I work

00:21:26,410 --> 00:21:31,180
on mdn we have an installed apps list

00:21:28,540 --> 00:21:33,880
with closer to 50 apps in it and about a

00:21:31,180 --> 00:21:36,850
dozen of those are ones that either we

00:21:33,880 --> 00:21:39,670
rolled ourselves or specific dem DN the

00:21:36,850 --> 00:21:41,080
rest of them are either other Mozilla

00:21:39,670 --> 00:21:42,820
tools or things that were completely

00:21:41,080 --> 00:21:45,900
third-party that we pulled in and

00:21:42,820 --> 00:21:49,450
integrate it you can do this with django

00:21:45,900 --> 00:21:51,370
django packages is a website that lists

00:21:49,450 --> 00:21:54,790
well packages that you can get for

00:21:51,370 --> 00:21:58,240
Django currently lists 2206

00:21:54,790 --> 00:22:00,580
available apps as much as it's a cliche

00:21:58,240 --> 00:22:06,880
you can say with Django there's an app

00:22:00,580 --> 00:22:10,030
for that apps really are the secret

00:22:06,880 --> 00:22:13,660
weapon in my opinion the fact that you

00:22:10,030 --> 00:22:18,250
can take user registration or user

00:22:13,660 --> 00:22:22,570
profiles or signing up with persona or a

00:22:18,250 --> 00:22:25,030
wiki or A's that take something else off

00:22:22,570 --> 00:22:27,400
MDNA studio for showing demos of web

00:22:25,030 --> 00:22:29,230
technology you can wrap any of these

00:22:27,400 --> 00:22:32,320
things up these sort of one sentence

00:22:29,230 --> 00:22:35,080
ideas into an application that you can

00:22:32,320 --> 00:22:36,250
just pull off the internet plug in to

00:22:35,080 --> 00:22:38,170
your website do a little bit of

00:22:36,250 --> 00:22:41,380
integration work you don't have to worry

00:22:38,170 --> 00:22:43,330
about oh well is this app using some

00:22:41,380 --> 00:22:45,280
completely different framework is this

00:22:43,330 --> 00:22:46,990
app using some completely different ORM

00:22:45,280 --> 00:22:49,440
some completely different form library

00:22:46,990 --> 00:22:52,600
completely different controller setup

00:22:49,440 --> 00:22:55,870
the lovely thing about Django is it as

00:22:52,600 --> 00:22:59,820
much as people complain about there

00:22:55,870 --> 00:23:03,130
being a full stack and feeling locked in

00:22:59,820 --> 00:23:04,870
what you get in return for accepting

00:23:03,130 --> 00:23:06,820
some basic components and you don't have

00:23:04,870 --> 00:23:08,200
to accept all of them what you get in

00:23:06,820 --> 00:23:10,180
return for accepting some basic

00:23:08,200 --> 00:23:13,690
components is the ability to do this to

00:23:10,180 --> 00:23:16,360
compose large complex sites with lots of

00:23:13,690 --> 00:23:18,310
moving parts without having to write all

00:23:16,360 --> 00:23:20,290
of the code yourself without having to

00:23:18,310 --> 00:23:23,800
do tons and tons and tons of integration

00:23:20,290 --> 00:23:26,410
work so much of every production Django

00:23:23,800 --> 00:23:28,690
site I see nowadays is off-the-shelf

00:23:26,410 --> 00:23:31,330
components that are taking advantage of

00:23:28,690 --> 00:23:33,850
the fact that you can just go pull a

00:23:31,330 --> 00:23:35,950
bunch of Django apps off of pie-pie off

00:23:33,850 --> 00:23:38,590
of Django packages off of wherever you

00:23:35,950 --> 00:23:40,090
want to index them from and say okay we

00:23:38,590 --> 00:23:42,370
get that functionality from that that

00:23:40,090 --> 00:23:45,010
functionality from that everything that

00:23:42,370 --> 00:23:46,870
is not the core of your site your core

00:23:45,010 --> 00:23:48,460
business logically you need to write you

00:23:46,870 --> 00:23:50,350
can probably outsource to something else

00:23:48,460 --> 00:23:52,660
and then you can just write one or two

00:23:50,350 --> 00:23:55,840
little apps that encapsulate what your

00:23:52,660 --> 00:23:58,330
site needs to do I really think I always

00:23:55,840 --> 00:24:00,660
have thought this is Django secret

00:23:58,330 --> 00:24:00,660
weapon

00:24:00,830 --> 00:24:07,049
encapsulation reusability plug ability

00:24:03,690 --> 00:24:09,840
of jangle applications and the concept

00:24:07,049 --> 00:24:11,640
of the Django application as being

00:24:09,840 --> 00:24:13,470
something so radically different from

00:24:11,640 --> 00:24:15,059
what all the other Python frameworks

00:24:13,470 --> 00:24:19,010
were doing which was mostly an

00:24:15,059 --> 00:24:19,010
application as a whiskey application

00:24:19,039 --> 00:24:23,190
that's about all I've got and I hear

00:24:21,390 --> 00:24:25,110
people clapping in the room next door

00:24:23,190 --> 00:24:28,409
which means I timed this just about

00:24:25,110 --> 00:24:31,770
right so we have I believe about 10 15

00:24:28,409 --> 00:24:34,080
minutes for questions if anybody wants I

00:24:31,770 --> 00:24:45,539
believe we have microphones just the one

00:24:34,080 --> 00:24:47,520
yeah I know I have two questions uh

00:24:45,539 --> 00:24:50,640
first why isn't there a Django booth in

00:24:47,520 --> 00:24:52,770
the expo hall why isn't there a Django

00:24:50,640 --> 00:24:54,539
booth in the expo hall is there one

00:24:52,770 --> 00:24:55,590
there is no Django booth there's a

00:24:54,539 --> 00:24:56,970
there's other booths for other

00:24:55,590 --> 00:24:57,450
frameworks but there's no Django proof

00:24:56,970 --> 00:25:00,150
at all

00:24:57,450 --> 00:25:02,909
there's no reason behind that why isn't

00:25:00,150 --> 00:25:06,390
there one I don't know that would be a

00:25:02,909 --> 00:25:08,700
question probably for the DSF or someone

00:25:06,390 --> 00:25:16,260
who knows more about that than I do okay

00:25:08,700 --> 00:25:19,370
and then the other question I have give

00:25:16,260 --> 00:25:19,370
me is like an old man okay

00:25:31,300 --> 00:25:39,520
so you've mentioned you use Django at

00:25:35,470 --> 00:25:41,290
your job and use Jinja for the template

00:25:39,520 --> 00:25:45,010
part of Django and I'm just wondering

00:25:41,290 --> 00:25:46,690
like what's your typical Django like

00:25:45,010 --> 00:25:49,780
what are you using Django for now and

00:25:46,690 --> 00:25:51,700
what parts are you replacing okay so

00:25:49,780 --> 00:25:56,950
work we we are the Mozilla developer

00:25:51,700 --> 00:25:58,960
Network mbn mostly we are a wiki of

00:25:56,950 --> 00:26:03,670
documentation on web technologies which

00:25:58,960 --> 00:26:06,400
is written in Django mostly back-end is

00:26:03,670 --> 00:26:10,210
Python using Django request/response

00:26:06,400 --> 00:26:13,480
Django or M ginger for templates with

00:26:10,210 --> 00:26:16,060
jingo as the integration library and a

00:26:13,480 --> 00:26:17,440
nodejs service providing scripting and

00:26:16,060 --> 00:26:19,210
templating like if you're familiar with

00:26:17,440 --> 00:26:21,120
Wikipedia where you can do like

00:26:19,210 --> 00:26:23,530
templates that do sort of scripty things

00:26:21,120 --> 00:26:27,550
we have a service written in JavaScript

00:26:23,530 --> 00:26:28,930
that does that we also have a demo

00:26:27,550 --> 00:26:30,310
studio where people can upload

00:26:28,930 --> 00:26:34,500
demonstrations of different web

00:26:30,310 --> 00:26:38,860
technologies that is entirely Django

00:26:34,500 --> 00:26:41,530
things and we also we sort of use

00:26:38,860 --> 00:26:44,050
Django's authentication system we

00:26:41,530 --> 00:26:47,110
replace it we use Mozilla persona as the

00:26:44,050 --> 00:26:49,030
authentication source but the all

00:26:47,110 --> 00:26:52,750
framework is designed to let you do that

00:26:49,030 --> 00:26:54,730
sort of thing are using Django for the

00:26:52,750 --> 00:26:58,090
framework - I'm sorry the Django

00:26:54,730 --> 00:26:59,890
framework for like the admin we have the

00:26:58,090 --> 00:27:02,200
Django admin enabled and we use it a

00:26:59,890 --> 00:27:04,410
little bit but whenever possible try not

00:27:02,200 --> 00:27:04,410
to

00:27:07,400 --> 00:27:12,410
okay I remember now okay is there any

00:27:10,460 --> 00:27:13,760
plans on upgrading the orm system at all

00:27:12,410 --> 00:27:15,680
because there was a few complaints of

00:27:13,760 --> 00:27:19,790
the RM being much lower than say SQL

00:27:15,680 --> 00:27:22,550
helped me every couple years somebody

00:27:19,790 --> 00:27:24,830
comes up with a proposal to write an API

00:27:22,550 --> 00:27:27,559
compatible wrapper around sequel alchemy

00:27:24,830 --> 00:27:29,180
for the Django ORM and every couple

00:27:27,559 --> 00:27:30,920
years the person who comes up with that

00:27:29,180 --> 00:27:33,710
idea gives up on it about six months

00:27:30,920 --> 00:27:35,840
later okay if somebody you can actually

00:27:33,710 --> 00:27:39,350
do it I would certainly be interested to

00:27:35,840 --> 00:27:40,820
see it but so far I don't think anybody

00:27:39,350 --> 00:27:46,070
has really produced a convincing

00:27:40,820 --> 00:27:48,260
implementation of it okay thank you hi

00:27:46,070 --> 00:27:49,910
thanks very much to the talk I wonder if

00:27:48,260 --> 00:27:52,100
maybe this is a bit of obvious or you

00:27:49,910 --> 00:27:54,110
don't want to get into it but I wonder

00:27:52,100 --> 00:27:56,210
if I can get you to do the obvious thing

00:27:54,110 --> 00:27:58,340
and maybe compare Django to some of the

00:27:56,210 --> 00:27:59,570
other frameworks and say where you think

00:27:58,340 --> 00:28:01,309
some of the strengths and weaknesses in

00:27:59,570 --> 00:28:04,059
each direction not just in your opinion

00:28:01,309 --> 00:28:11,360
and I'm thinking of them maybe flask and

00:28:04,059 --> 00:28:12,770
web to PI I like flask a lot I haven't

00:28:11,360 --> 00:28:15,410
had a chance to use it for anything

00:28:12,770 --> 00:28:17,600
major I really like a lot of the ideas

00:28:15,410 --> 00:28:20,510
of paring down to sort of the essentials

00:28:17,600 --> 00:28:23,030
of doing the web and just saying

00:28:20,510 --> 00:28:24,350
anything that's not the web go you'll

00:28:23,030 --> 00:28:26,110
find something else to do it weird is

00:28:24,350 --> 00:28:29,059
going to do the web and focus

00:28:26,110 --> 00:28:31,780
meticulously on that I really do like

00:28:29,059 --> 00:28:33,679
that sort of do one thing and do it well

00:28:31,780 --> 00:28:35,179
don't really have experience with

00:28:33,679 --> 00:28:37,010
whipped by so don't really have anything

00:28:35,179 --> 00:28:38,420
to say one way or another no you should

00:28:37,010 --> 00:28:43,280
check it out it's magic

00:28:38,420 --> 00:28:45,429
okay what do you feel are the worst

00:28:43,280 --> 00:28:47,660
parts of Django what needs work

00:28:45,429 --> 00:28:51,429
everything I didn't mention is a good

00:28:47,660 --> 00:28:54,860
part in this talk is that is that okay

00:28:51,429 --> 00:28:57,410
now Django the internals are really

00:28:54,860 --> 00:28:59,570
messy and really hard to understand they

00:28:57,410 --> 00:29:02,990
tend to scare off contributors we use

00:28:59,570 --> 00:29:08,660
metaclasses way way way way way way way

00:29:02,990 --> 00:29:13,820
too many meta classes in Django the ORM

00:29:08,660 --> 00:29:15,080
is a minefield it's there maybe I think

00:29:13,820 --> 00:29:16,880
half a dozen people in the world

00:29:15,080 --> 00:29:18,560
qualified to actually make

00:29:16,880 --> 00:29:24,800
he has changes to the RM code at this

00:29:18,560 --> 00:29:27,260
point honestly I think the thing Django

00:29:24,800 --> 00:29:30,040
needs a needs the most right now is a

00:29:27,260 --> 00:29:31,880
good cleaning up of the internals and

00:29:30,040 --> 00:29:33,410
grated some of that's happening the a

00:29:31,880 --> 00:29:36,380
polluting refactor is one of my

00:29:33,410 --> 00:29:37,970
favorites that's landing in 1.7 maybe

00:29:36,380 --> 00:29:46,990
the next few releases we can focus on

00:29:37,970 --> 00:29:49,300
other things nobody else ah going once

00:29:46,990 --> 00:29:52,100
going twice

00:29:49,300 --> 00:29:54,760
okay thank you all for coming out hope

00:29:52,100 --> 00:29:54,760

YouTube URL: https://www.youtube.com/watch?v=9Vrk44sHIvw


