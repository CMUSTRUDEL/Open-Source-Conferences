Title: Andrew Godwin: Designing Django's Migrations - PyCon 2014
Publication date: 2014-04-24
Playlist: PyCon 2014
Description: 
	Speaker: Andrew Godwin

Django finally has built-in migrations, and they're a long way from the designs of South or django-evolution. Learn the key design decisions we made, ideas we discarded, and the unique treatment we have to give each of our four official database backends.

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:13,820 --> 00:00:18,420
alright sorry about the delay the next

00:00:16,500 --> 00:00:19,950
talk is by Andrew Godwin he's one of the

00:00:18,420 --> 00:00:21,360
core Python developers and he's going to

00:00:19,950 --> 00:00:30,149
be talking about designing Django's

00:00:21,360 --> 00:00:32,850
migrations please give him a hand hello

00:00:30,149 --> 00:00:34,710
everyone Oh fell out hello everyone I'm

00:00:32,850 --> 00:00:36,570
Andrew as you've just been introduced

00:00:34,710 --> 00:00:40,140
and this clicker is stopped working here

00:00:36,570 --> 00:00:42,000
we go and so as previously mentioned I'm

00:00:40,140 --> 00:00:43,680
a django core developer but I'm also the

00:00:42,000 --> 00:00:51,240
author of South the popular Django

00:00:43,680 --> 00:00:54,030
migrations library I'm thank you and

00:00:51,240 --> 00:00:55,350
I've been doing this for what now feels

00:00:54,030 --> 00:00:57,690
like an age was actually only seven

00:00:55,350 --> 00:01:00,360
years and South is seven years old I

00:00:57,690 --> 00:01:03,510
think in September of this year and so

00:01:00,360 --> 00:01:05,250
throughout all of those many years I've

00:01:03,510 --> 00:01:06,950
always thought migrations they're pretty

00:01:05,250 --> 00:01:09,810
good they've proven themselves useful

00:01:06,950 --> 00:01:11,280
South has been very very popular more

00:01:09,810 --> 00:01:14,100
popular than I would ever have imagined

00:01:11,280 --> 00:01:15,840
to start out with and you know it's

00:01:14,100 --> 00:01:17,760
fantastic I've had people come to me

00:01:15,840 --> 00:01:20,010
saying then they know they're writing

00:01:17,760 --> 00:01:21,900
antigens in PHP but they still use

00:01:20,010 --> 00:01:23,159
Django and south of migrations with no

00:01:21,900 --> 00:01:26,880
it's just that good a solution so that's

00:01:23,159 --> 00:01:28,290
kind of reassuring for me but sort of

00:01:26,880 --> 00:01:30,020
underlying this whole thing for last

00:01:28,290 --> 00:01:32,960
seven years for me is when that South is

00:01:30,020 --> 00:01:36,990
it was good it was good for its time it

00:01:32,960 --> 00:01:39,120
had a couple of bad design decisions

00:01:36,990 --> 00:01:40,710
initially done Anna this is seven years

00:01:39,120 --> 00:01:42,510
ago I was a much more novice programmer

00:01:40,710 --> 00:01:44,430
back then and that's understandable but

00:01:42,510 --> 00:01:46,500
as the years have gone by as we've got

00:01:44,430 --> 00:01:48,690
feedback for community for my users I've

00:01:46,500 --> 00:01:51,330
realized that actually there are some

00:01:48,690 --> 00:01:53,420
core underlying problems in South not

00:01:51,330 --> 00:01:56,280
only is it sort of got these slight

00:01:53,420 --> 00:01:58,590
idiosyncrasies its design but it also is

00:01:56,280 --> 00:02:00,960
it lives next Django it's sort of a

00:01:58,590 --> 00:02:02,729
third party library it's not integrated

00:02:00,960 --> 00:02:04,290
well into cause it should be there's a

00:02:02,729 --> 00:02:06,510
module called South taught hacks that is

00:02:04,290 --> 00:02:07,920
there purely to be that integration into

00:02:06,510 --> 00:02:09,689
Django it's called hacks for a reason

00:02:07,920 --> 00:02:11,400
it's very obvious like no sign that this

00:02:09,689 --> 00:02:13,560
is the bad part of the code it's full of

00:02:11,400 --> 00:02:15,450
horrible changes to install the apps the

00:02:13,560 --> 00:02:16,980
settings at runtime it fills with the RM

00:02:15,450 --> 00:02:20,099
and the app cache and that's just not

00:02:16,980 --> 00:02:22,019
good and so about two or three years ago

00:02:20,099 --> 00:02:23,730
me and some other cool developers

00:02:22,019 --> 00:02:25,650
started formulating an initial plan for

00:02:23,730 --> 00:02:27,720
this the idea was that we take

00:02:25,650 --> 00:02:29,459
south and we take the sort of

00:02:27,720 --> 00:02:30,930
abstraction backends part of it the bit

00:02:29,459 --> 00:02:33,060
that takes your database and turns it

00:02:30,930 --> 00:02:34,890
into a nice easy layer that you can use

00:02:33,060 --> 00:02:37,349
and take that and put that into Django

00:02:34,890 --> 00:02:39,180
itself a sort of a schema abstraction

00:02:37,349 --> 00:02:41,310
back-end kind of thing and at the same

00:02:39,180 --> 00:02:42,540
time we put in there some RM hooks that

00:02:41,310 --> 00:02:44,760
would get rid of that hacks module and

00:02:42,540 --> 00:02:46,890
South things like be able to change your

00:02:44,760 --> 00:02:48,870
models at runtime being able to sort of

00:02:46,890 --> 00:02:50,819
load and unload versions of models into

00:02:48,870 --> 00:02:54,060
the RM without having to fiddle with all

00:02:50,819 --> 00:02:55,950
the settings this all seemed fine I sort

00:02:54,060 --> 00:02:58,170
of aside that the same time the plan was

00:02:55,950 --> 00:02:59,579
that we would have south to and south to

00:02:58,170 --> 00:03:01,560
would be this sort of rerun of South

00:02:59,579 --> 00:03:03,239
with a different format better user

00:03:01,560 --> 00:03:06,150
interface but using this underlying

00:03:03,239 --> 00:03:08,459
Django library now that was a sort of

00:03:06,150 --> 00:03:10,170
good start the idea but when you look at

00:03:08,459 --> 00:03:12,269
it overall South is one of those

00:03:10,170 --> 00:03:13,950
libraries that is one of the very few

00:03:12,269 --> 00:03:15,420
things in Django everyone seems to use

00:03:13,950 --> 00:03:17,879
it's almost a unanimous thing that

00:03:15,420 --> 00:03:19,500
everyone prefers even migrations and one

00:03:17,879 --> 00:03:21,870
of Jango's be problems historically is

00:03:19,500 --> 00:03:24,090
that it for a new user especially it can

00:03:21,870 --> 00:03:25,319
be very hard to decide what library to

00:03:24,090 --> 00:03:28,200
use for BOTS like you know if we're

00:03:25,319 --> 00:03:29,970
going for API is to use rest framework

00:03:28,200 --> 00:03:31,889
to use piston usual have many other ones

00:03:29,970 --> 00:03:34,049
and so on for every other kind of thing

00:03:31,889 --> 00:03:36,569
and so there is some value to having a

00:03:34,049 --> 00:03:38,160
blessed option or a preferred options

00:03:36,569 --> 00:03:40,290
this stuff and in fact we went one

00:03:38,160 --> 00:03:42,930
further the revised plan was that what

00:03:40,290 --> 00:03:45,569
we would have is migrations built into

00:03:42,930 --> 00:03:46,980
Django itself you know it's such a

00:03:45,569 --> 00:03:50,010
fundamental part of the way you write

00:03:46,980 --> 00:03:51,359
web applications and for new users you

00:03:50,010 --> 00:03:53,220
need to bring them and introduce them to

00:03:51,359 --> 00:03:55,859
it early on and so it is felt that

00:03:53,220 --> 00:03:57,030
actually it makes a lot of sense as a

00:03:55,859 --> 00:03:58,889
core part of Django it's a very

00:03:57,030 --> 00:04:01,680
underlying crucial part of the way we

00:03:58,889 --> 00:04:03,239
build up web applications and so that's

00:04:01,680 --> 00:04:05,419
all well and good but the same time

00:04:03,239 --> 00:04:08,340
these are still logically separate items

00:04:05,419 --> 00:04:10,379
I've kept that separation between the

00:04:08,340 --> 00:04:12,510
schema abstraction back end and the

00:04:10,379 --> 00:04:15,599
migration sort of front end user

00:04:12,510 --> 00:04:17,789
interface built into Django itself so

00:04:15,599 --> 00:04:19,769
even when 1.7 is released and you start

00:04:17,789 --> 00:04:21,479
using this you'll be using to

00:04:19,769 --> 00:04:22,949
abstractions talking to each other and

00:04:21,479 --> 00:04:25,169
that means that if you want to write

00:04:22,949 --> 00:04:27,030
your own version of a migrations library

00:04:25,169 --> 00:04:29,400
if you want to change the database at

00:04:27,030 --> 00:04:31,979
run time for some kind of mad crazy

00:04:29,400 --> 00:04:33,750
reason or you have other reasons to sort

00:04:31,979 --> 00:04:35,190
of change in alter the schema that back

00:04:33,750 --> 00:04:37,349
end is there for you already it's with a

00:04:35,190 --> 00:04:38,900
good API it's well defined and you can

00:04:37,349 --> 00:04:41,720
step down and use it straight away

00:04:38,900 --> 00:04:43,550
and I cover both of those in second but

00:04:41,720 --> 00:04:46,759
I first want to cover the key thing here

00:04:43,550 --> 00:04:49,789
that I am not moving south into Django I

00:04:46,759 --> 00:04:51,440
am adding migrations into Django this is

00:04:49,789 --> 00:04:53,900
a complete rewrite of the South code

00:04:51,440 --> 00:04:56,240
they are somewhat similar in sort of

00:04:53,900 --> 00:04:58,820
ideas and logic but a lot of the code

00:04:56,240 --> 00:05:00,110
has been rewritten the migration file

00:04:58,820 --> 00:05:01,220
formats very different the user

00:05:00,110 --> 00:05:03,860
interface and commands are very

00:05:01,220 --> 00:05:06,080
different and so it is not the South you

00:05:03,860 --> 00:05:07,850
know directly but it bears a lot of sort

00:05:06,080 --> 00:05:09,470
of external similarities to it

00:05:07,850 --> 00:05:12,080
especially the way it organizes and runs

00:05:09,470 --> 00:05:14,210
migrations the kind that's that schemer

00:05:12,080 --> 00:05:16,630
editor interface the schemer editor is

00:05:14,210 --> 00:05:19,130
this part of the database backends that

00:05:16,630 --> 00:05:20,780
abstracts the schema operations over

00:05:19,130 --> 00:05:22,639
databases in the same way the ORM

00:05:20,780 --> 00:05:24,979
abstracts things like select update and

00:05:22,639 --> 00:05:26,630
delete over databases the schema editor

00:05:24,979 --> 00:05:28,760
ball abstract things like create table

00:05:26,630 --> 00:05:30,590
drop table create index drop index and

00:05:28,760 --> 00:05:31,940
things like that as you'll see later at

00:05:30,590 --> 00:05:33,260
the end of the talk this is very

00:05:31,940 --> 00:05:35,630
important for some particularly tricky

00:05:33,260 --> 00:05:37,430
databases it's also written to work in

00:05:35,630 --> 00:05:39,110
terms of Django fields and models so

00:05:37,430 --> 00:05:41,389
south for those of you aren't familiar

00:05:39,110 --> 00:05:42,800
with it it works in terms of tables and

00:05:41,389 --> 00:05:44,539
columns which is a great sort of

00:05:42,800 --> 00:05:46,520
starting point for doing a table

00:05:44,539 --> 00:05:48,260
alteration and that kind of stuff but it

00:05:46,520 --> 00:05:51,050
sort of falls down with a more complex

00:05:48,260 --> 00:05:53,120
column types in Django and so what this

00:05:51,050 --> 00:05:55,430
does instead is it sort of takes the

00:05:53,120 --> 00:05:57,260
models and feels themselves and then for

00:05:55,430 --> 00:05:59,270
example a foreign key it has a certain

00:05:57,260 --> 00:06:02,030
name as an attribute but the column name

00:05:59,270 --> 00:06:04,490
is under school ID and with this sort of

00:06:02,030 --> 00:06:06,139
slightly higher level interface the new

00:06:04,490 --> 00:06:08,990
migration stuff has a much better idea

00:06:06,139 --> 00:06:10,909
of what is changing what is staying the

00:06:08,990 --> 00:06:12,470
same and it can do much more intelligent

00:06:10,909 --> 00:06:14,900
things because it has the feel because

00:06:12,470 --> 00:06:16,909
it has the models it can know the past

00:06:14,900 --> 00:06:19,250
and future versions of a field it can do

00:06:16,909 --> 00:06:21,800
casts correctly and all manner of things

00:06:19,250 --> 00:06:23,870
you couldn't do properly when you know

00:06:21,800 --> 00:06:25,960
South had just here's your table name

00:06:23,870 --> 00:06:28,099
here's your rough field type and go

00:06:25,960 --> 00:06:30,949
unless we see later for sequel like this

00:06:28,099 --> 00:06:32,570
is particularly important then by the

00:06:30,949 --> 00:06:35,060
sort of other part of this is what I

00:06:32,570 --> 00:06:39,349
either called Jango DB migrations or

00:06:35,060 --> 00:06:40,880
just migrations this is kind of it's not

00:06:39,349 --> 00:06:43,039
separate inside Django but it is

00:06:40,880 --> 00:06:45,860
somewhat self-contained this is where

00:06:43,039 --> 00:06:48,590
you have things like the user interface

00:06:45,860 --> 00:06:50,479
so the commands for running migrations

00:06:48,590 --> 00:06:51,740
the commands for squashing migrations

00:06:50,479 --> 00:06:52,639
into one the commands for making

00:06:51,740 --> 00:06:53,990
migrations

00:06:52,639 --> 00:06:56,210
and you also have sort of the core

00:06:53,990 --> 00:06:57,710
framework about migrations frame Oh kids

00:06:56,210 --> 00:06:59,629
things that read and write migrations

00:06:57,710 --> 00:07:01,550
files things that resolve dependencies

00:06:59,629 --> 00:07:03,800
into serialized sort of straight through

00:07:01,550 --> 00:07:05,779
plans and things like the altar detector

00:07:03,800 --> 00:07:07,580
which I'll come to again in a second but

00:07:05,779 --> 00:07:10,129
what it does is it takes your migration

00:07:07,580 --> 00:07:11,300
state takes your current models file and

00:07:10,129 --> 00:07:12,919
it works out the differences between

00:07:11,300 --> 00:07:16,460
them and that's how it can make

00:07:12,919 --> 00:07:18,889
migrations for you but underlying all

00:07:16,460 --> 00:07:20,629
this is a brand new migration format now

00:07:18,889 --> 00:07:22,430
for those who aren't familiar and I'll

00:07:20,629 --> 00:07:24,740
show it here on the slide this is the

00:07:22,430 --> 00:07:26,270
Old South migration format now it's very

00:07:24,740 --> 00:07:28,580
very small I apply even see it on my

00:07:26,270 --> 00:07:31,189
screen here but as I've highlighted

00:07:28,580 --> 00:07:32,870
there the top sort of i say fifth or

00:07:31,189 --> 00:07:34,969
sixth of that is the actual code to run

00:07:32,870 --> 00:07:37,610
migration this is making a simple table

00:07:34,969 --> 00:07:40,279
with three columns the the rest of that

00:07:37,610 --> 00:07:42,620
file is what's called the frozen RM so

00:07:40,279 --> 00:07:44,960
what South does is it takes the entire

00:07:42,620 --> 00:07:46,909
history of your application and freezes

00:07:44,960 --> 00:07:49,069
it into this big sort of of

00:07:46,909 --> 00:07:51,620
serialize fields and arguments so it can

00:07:49,069 --> 00:07:53,779
reconstruct models at runtime that's

00:07:51,620 --> 00:07:55,279
obviously not a great idea as you can

00:07:53,779 --> 00:07:58,039
see it's very verbose and this is quite

00:07:55,279 --> 00:07:59,839
a small file if any of you run these in

00:07:58,039 --> 00:08:01,550
production you'll have seen files that

00:07:59,839 --> 00:08:04,689
are much much longer than this in that

00:08:01,550 --> 00:08:07,189
second half say half second five six and

00:08:04,689 --> 00:08:09,229
so the idea here is come up with a more

00:08:07,189 --> 00:08:10,699
concise format and not only that but a

00:08:09,229 --> 00:08:13,279
format that was in respectable

00:08:10,699 --> 00:08:15,889
declarative this format you see here all

00:08:13,279 --> 00:08:17,569
it is is it's a class with two methods a

00:08:15,889 --> 00:08:19,819
forwards method and a backwards method

00:08:17,569 --> 00:08:21,979
when you run a migration south just

00:08:19,819 --> 00:08:23,539
calls the forwards method partisan an

00:08:21,979 --> 00:08:25,520
object that can make schema changes and

00:08:23,539 --> 00:08:28,039
then just let it run this is great for

00:08:25,520 --> 00:08:29,569
simplicity in sort of a nice API but it

00:08:28,039 --> 00:08:31,699
means you can't tell what a migration

00:08:29,569 --> 00:08:32,690
will do without actually running it and

00:08:31,699 --> 00:08:34,760
if you don't want to run against a

00:08:32,690 --> 00:08:37,219
database you sort of step out a whole

00:08:34,760 --> 00:08:39,469
fake schema object passed I didn't run

00:08:37,219 --> 00:08:40,610
through them the method itself hope

00:08:39,469 --> 00:08:42,669
they're not calling any moles in the

00:08:40,610 --> 00:08:45,050
process and record all the changes and

00:08:42,669 --> 00:08:47,449
so the change here instead is to

00:08:45,050 --> 00:08:48,860
declarative format and this is one where

00:08:47,449 --> 00:08:50,269
rather than having a method you just

00:08:48,860 --> 00:08:52,279
have a series of operations which

00:08:50,269 --> 00:08:54,019
themselves having my simple API with

00:08:52,279 --> 00:08:55,699
forwards and backwards and methods but

00:08:54,019 --> 00:08:57,769
the nice thing here is that I can look

00:08:55,699 --> 00:09:00,529
at this migration in code as well as

00:08:57,769 --> 00:09:02,870
with just a text editor okay I can see

00:09:00,529 --> 00:09:04,279
that it is creating a model and you also

00:09:02,870 --> 00:09:06,560
notice that this is the full migration

00:09:04,279 --> 00:09:08,150
there's no second half here this is

00:09:06,560 --> 00:09:10,220
I call you know seven or eight

00:09:08,150 --> 00:09:12,260
significant lines of code here and the

00:09:10,220 --> 00:09:14,480
reason for that is that we have what's

00:09:12,260 --> 00:09:16,520
now called in-memory running so the

00:09:14,480 --> 00:09:19,220
thing that made these long sort of

00:09:16,520 --> 00:09:20,779
pieces of frozen ORM before that's

00:09:19,220 --> 00:09:23,150
announced their dynamically generated

00:09:20,779 --> 00:09:25,700
from these operations what we do is we

00:09:23,150 --> 00:09:27,700
load all the migrations in the full

00:09:25,700 --> 00:09:30,350
history of a project into memory and

00:09:27,700 --> 00:09:32,360
those operations as well as having a way

00:09:30,350 --> 00:09:34,670
of running the database for words have a

00:09:32,360 --> 00:09:36,380
special method that's called state for

00:09:34,670 --> 00:09:38,150
words and what that does is there sort

00:09:36,380 --> 00:09:40,190
of a representation of the models and of

00:09:38,150 --> 00:09:41,690
the fields in an in memories of dicta

00:09:40,190 --> 00:09:44,210
like object called Project state and

00:09:41,690 --> 00:09:45,740
that me take them as it goes and so in

00:09:44,210 --> 00:09:47,480
incredibly fast this is all running just

00:09:45,740 --> 00:09:49,370
running and sort of list changes

00:09:47,480 --> 00:09:51,110
we can run through every migration in

00:09:49,370 --> 00:09:53,420
the history build up that any project

00:09:51,110 --> 00:09:55,070
state and then you can sort of render

00:09:53,420 --> 00:09:57,080
that project state into an era Rome

00:09:55,070 --> 00:09:59,360
itself into a set of models and that

00:09:57,080 --> 00:10:01,310
means that we can discard all the

00:09:59,360 --> 00:10:03,200
extraneous information and just take

00:10:01,310 --> 00:10:05,330
migrations run through them in memory

00:10:03,200 --> 00:10:06,740
takes you know 10 milliseconds and then

00:10:05,330 --> 00:10:09,020
you have a copy of the models ready to

00:10:06,740 --> 00:10:11,270
go and not only is that useful running

00:10:09,020 --> 00:10:14,030
migrations is also good for the auto

00:10:11,270 --> 00:10:16,310
detector so the auto detector takes that

00:10:14,030 --> 00:10:18,080
run through version as I said before it

00:10:16,310 --> 00:10:19,460
takes an on disc version and it

00:10:18,080 --> 00:10:21,410
literally just goes through and distant

00:10:19,460 --> 00:10:22,730
like what models are here that aren't in

00:10:21,410 --> 00:10:25,160
the old version what models have

00:10:22,730 --> 00:10:26,839
disappeared what has changed and it sort

00:10:25,160 --> 00:10:28,430
of compares them intelligently and tries

00:10:26,839 --> 00:10:30,800
to find renames like matching parameters

00:10:28,430 --> 00:10:33,290
and things like that and so it's a very

00:10:30,800 --> 00:10:35,780
useful way of doing all this stuff but

00:10:33,290 --> 00:10:37,580
that's kind of the nice logical side of

00:10:35,780 --> 00:10:40,250
migrations that's all clean code it's

00:10:37,580 --> 00:10:42,650
lovely it's the sponsible like beautiful

00:10:40,250 --> 00:10:44,839
computer science ii world of pure

00:10:42,650 --> 00:10:48,280
abstraction databases themselves are

00:10:44,839 --> 00:10:51,020
unfortunately much much worse there are

00:10:48,280 --> 00:10:52,610
peculiarities unique to each database

00:10:51,020 --> 00:10:54,140
that I have to work through and

00:10:52,610 --> 00:10:56,690
fortunately South has given me plenty of

00:10:54,140 --> 00:10:58,310
experience in most of these but I'll

00:10:56,690 --> 00:11:00,740
sort of run through them for you here

00:10:58,310 --> 00:11:05,680
one by one and the first one is postgres

00:11:00,740 --> 00:11:05,680
it's great let's move on the second one

00:11:08,060 --> 00:11:13,050
that's kind of a PR side but you should

00:11:10,470 --> 00:11:15,120
use postgres by the way the second one

00:11:13,050 --> 00:11:17,610
is my sequel now my sequel is a

00:11:15,120 --> 00:11:20,370
reasonable database that's tempering my

00:11:17,610 --> 00:11:23,970
reactions slightly but it has a few key

00:11:20,370 --> 00:11:25,230
problems so number one ddl that's data

00:11:23,970 --> 00:11:28,319
definition language that seems like

00:11:25,230 --> 00:11:30,029
create table drop table add index it's

00:11:28,319 --> 00:11:31,589
not transactional so even though my

00:11:30,029 --> 00:11:33,779
sequel has transactions some other time

00:11:31,589 --> 00:11:35,850
in in ODB mode those transactions just

00:11:33,779 --> 00:11:37,440
silently stop themselves and commit when

00:11:35,850 --> 00:11:40,170
you try and run things like add table

00:11:37,440 --> 00:11:42,240
add column and so this means that if a

00:11:40,170 --> 00:11:44,790
migration fails partway through we can't

00:11:42,240 --> 00:11:46,350
roll back on post grades we just go okay

00:11:44,790 --> 00:11:48,899
migration failed and undo all the things

00:11:46,350 --> 00:11:50,759
we did until now unfortunately my see we

00:11:48,899 --> 00:11:52,949
can't do that and so when a migration

00:11:50,759 --> 00:11:54,480
fails in my sequel you're kind of left

00:11:52,949 --> 00:11:55,800
up to your own devices you know it's

00:11:54,480 --> 00:11:57,600
this thing more like well we don't

00:11:55,800 --> 00:11:59,060
anything good luck and then you should

00:11:57,600 --> 00:12:01,350
go in the diving then do it yourself

00:11:59,060 --> 00:12:02,880
fortunately it's often not too bad the

00:12:01,350 --> 00:12:04,199
situation is of you might just like

00:12:02,880 --> 00:12:06,089
added one column and not added another

00:12:04,199 --> 00:12:07,410
one but it's a really annoying thing

00:12:06,089 --> 00:12:08,880
from a user have like gave them this

00:12:07,410 --> 00:12:10,709
wonderful world of just running a

00:12:08,880 --> 00:12:13,170
command it was by itself to diving into

00:12:10,709 --> 00:12:15,209
the database and typing command to

00:12:13,170 --> 00:12:17,639
remove columns manually so that's not

00:12:15,209 --> 00:12:19,050
amazing my signal also doesn't have

00:12:17,639 --> 00:12:21,120
check constraint which is you know

00:12:19,050 --> 00:12:22,649
generally fine that's actually the

00:12:21,120 --> 00:12:24,839
easiest thing here to deal with we just

00:12:22,649 --> 00:12:27,000
have a rapper that says if this

00:12:24,839 --> 00:12:28,649
databases feature and that Jang guys are

00:12:27,000 --> 00:12:31,199
thin good features lady says like this

00:12:28,649 --> 00:12:32,430
database supports DLX transactions this

00:12:31,199 --> 00:12:34,110
I debase has things like check

00:12:32,430 --> 00:12:35,670
constraints if it's not there we just

00:12:34,110 --> 00:12:37,620
sort of know up that code that's an easy

00:12:35,670 --> 00:12:39,449
thing to deal with and finally as this

00:12:37,620 --> 00:12:41,040
fun thing where it conflates the idea of

00:12:39,449 --> 00:12:42,449
unique and strays and indexes in my

00:12:41,040 --> 00:12:44,610
sequel there one the same in the same

00:12:42,449 --> 00:12:46,410
namespace essentially and so this means

00:12:44,610 --> 00:12:48,959
that whenever you sort of create and

00:12:46,410 --> 00:12:50,730
remove a unique constraint you're also

00:12:48,959 --> 00:12:52,560
indirectly affecting the indexes as well

00:12:50,730 --> 00:12:53,850
we get around this by having sort of

00:12:52,560 --> 00:12:55,889
almost duplicates with different names

00:12:53,850 --> 00:12:56,939
for them but it's a knowing side effect

00:12:55,889 --> 00:13:01,620
that is not really as good as it should

00:12:56,939 --> 00:13:04,769
be Oracle is more fun in a certain sense

00:13:01,620 --> 00:13:07,410
of the word fun Oracle is generally fine

00:13:04,769 --> 00:13:09,420
it's very old in the cheer database it

00:13:07,410 --> 00:13:10,949
has a different sequel syntax especially

00:13:09,420 --> 00:13:13,529
things like things like counters and

00:13:10,949 --> 00:13:15,149
triggers and stuff the the language is

00:13:13,529 --> 00:13:17,189
different to my sequel on postcards and

00:13:15,149 --> 00:13:18,720
it's very picky about names you can't I

00:13:17,189 --> 00:13:21,089
think start names with a number in

00:13:18,720 --> 00:13:22,439
in oracle then much shorter length

00:13:21,089 --> 00:13:25,500
restriction on them things like that and

00:13:22,439 --> 00:13:27,810
it has some unique odd sort of behavior

00:13:25,500 --> 00:13:30,029
when conversing tune from a text field

00:13:27,810 --> 00:13:32,610
which is Django uses the lob column type

00:13:30,029 --> 00:13:34,680
for in Oracle you just can't do that and

00:13:32,610 --> 00:13:36,870
so in the back end we have to add a new

00:13:34,680 --> 00:13:38,279
column update and move later across

00:13:36,870 --> 00:13:40,769
delete the old column and rename the new

00:13:38,279 --> 00:13:46,350
column which is a pattern familiar to

00:13:40,769 --> 00:13:48,360
sequel light a sequel light the idea of

00:13:46,350 --> 00:13:50,100
having schema migrations is kind of like

00:13:48,360 --> 00:13:51,959
having pigs fly it's technically

00:13:50,100 --> 00:13:53,339
possible if you have like enough

00:13:51,959 --> 00:13:57,600
equipment but it's probably not

00:13:53,339 --> 00:13:59,279
advisable sequel light has just two ddl

00:13:57,600 --> 00:14:00,480
statements there you know they think of

00:13:59,279 --> 00:14:03,120
having more but essentially it has

00:14:00,480 --> 00:14:04,529
create table add column there's no

00:14:03,120 --> 00:14:06,420
delete table that's there is a drop

00:14:04,529 --> 00:14:08,370
table sorry but there's no delete column

00:14:06,420 --> 00:14:10,529
there's no altar column there's no sort

00:14:08,370 --> 00:14:12,449
of run time adding indexes and top it

00:14:10,529 --> 00:14:14,519
all off there is no way to see what the

00:14:12,449 --> 00:14:17,910
schema is at runtime a part of going to

00:14:14,519 --> 00:14:19,350
create table statement you do you can

00:14:17,910 --> 00:14:20,699
get it's like that that lovely sequel

00:14:19,350 --> 00:14:22,560
it's well formatted it looks really nice

00:14:20,699 --> 00:14:24,300
in the terminal but you have to manually

00:14:22,560 --> 00:14:25,769
pause that sequel or you can do other

00:14:24,300 --> 00:14:27,540
things of things but to get it back so

00:14:25,769 --> 00:14:29,370
it's it's much harder to work with and

00:14:27,540 --> 00:14:31,170
be fair to see polite it's not designed

00:14:29,370 --> 00:14:33,120
for this secret light is a fantastic

00:14:31,170 --> 00:14:34,949
embedded database is really good at that

00:14:33,120 --> 00:14:38,220
it is not designed to run production

00:14:34,949 --> 00:14:39,629
websites on please don't do it if you

00:14:38,220 --> 00:14:41,389
want to use of for development that's

00:14:39,629 --> 00:14:43,230
fine be prepared for weirdness

00:14:41,389 --> 00:14:44,879
especially remember that sequel light

00:14:43,230 --> 00:14:46,589
doesn't enforce constraints nearly as

00:14:44,879 --> 00:14:48,269
much as the other two databases so you

00:14:46,589 --> 00:14:50,250
can put the wrong types and columns and

00:14:48,269 --> 00:14:52,139
things and so when you point your data

00:14:50,250 --> 00:14:54,779
across you may find it doesn't fit and

00:14:52,139 --> 00:14:56,939
and it used to be the sequel light was

00:14:54,779 --> 00:14:59,250
because postgres was hard to install on

00:14:56,939 --> 00:15:01,319
a mac that can fix now post gaza

00:14:59,250 --> 00:15:05,129
postcards doc appt exists please go and

00:15:01,319 --> 00:15:06,600
use it but that's kind of you know part

00:15:05,129 --> 00:15:08,850
of the part of the cause when you're

00:15:06,600 --> 00:15:11,699
developing migrations like django has

00:15:08,850 --> 00:15:13,259
this historical thing of supporting you

00:15:11,699 --> 00:15:15,870
know for official backends and many more

00:15:13,259 --> 00:15:17,250
unofficial backends and why i'd love to

00:15:15,870 --> 00:15:19,259
just develop a post cause any solution

00:15:17,250 --> 00:15:20,839
I'm too much of a realist and pragmatist

00:15:19,259 --> 00:15:22,949
too nervous that's a realistic solution

00:15:20,839 --> 00:15:25,230
and that kind of tales into backwards

00:15:22,949 --> 00:15:26,250
compatibility Django has traditionally

00:15:25,230 --> 00:15:28,139
been quite good at backwards

00:15:26,250 --> 00:15:30,389
compatibility we very rarely break stuff

00:15:28,139 --> 00:15:31,470
in a in a one release bump and sometimes

00:15:30,389 --> 00:15:32,410
we do bits often like a very good reason

00:15:31,470 --> 00:15:33,610
for it and

00:15:32,410 --> 00:15:35,829
generally you can get all the way from

00:15:33,610 --> 00:15:37,870
point nine six through to 1.6 I know

00:15:35,829 --> 00:15:40,240
I've done this it took a long time about

00:15:37,870 --> 00:15:42,009
whole evening without breaking much code

00:15:40,240 --> 00:15:43,480
so you do the one release jump you read

00:15:42,009 --> 00:15:45,670
the release notes make a few changes do

00:15:43,480 --> 00:15:47,769
the next jump and so on and so that

00:15:45,670 --> 00:15:50,470
applies to this new rewrite as well but

00:15:47,769 --> 00:15:52,420
not only to django South is south exists

00:15:50,470 --> 00:15:54,040
and South is also for the purposes of

00:15:52,420 --> 00:15:55,480
these migrations something you'd be

00:15:54,040 --> 00:15:58,810
backwards compatible with at least you

00:15:55,480 --> 00:16:00,250
need to ignore properly and so I'm old

00:15:58,810 --> 00:16:02,199
for a long time over this the first

00:16:00,250 --> 00:16:04,269
version of the code for this the Alpha

00:16:02,199 --> 00:16:06,189
didn't have many ways of doing this and

00:16:04,269 --> 00:16:08,230
in the end I came to a very reasonable

00:16:06,189 --> 00:16:10,000
solution so what happens is when a

00:16:08,230 --> 00:16:12,009
migration is detected as the first

00:16:10,000 --> 00:16:13,720
migration application and it hasn't been

00:16:12,009 --> 00:16:16,750
applied so basically you've got a brand

00:16:13,720 --> 00:16:18,879
new app that was on 1.6 movie to 1.7 you

00:16:16,750 --> 00:16:20,170
add a first migration what do I need to

00:16:18,879 --> 00:16:21,759
do because it's introspect well because

00:16:20,170 --> 00:16:23,680
you can read what's in there it says

00:16:21,759 --> 00:16:25,240
okay we'll read all the create model

00:16:23,680 --> 00:16:27,009
statements will work out what the model

00:16:25,240 --> 00:16:28,959
set tables will be called and we'll see

00:16:27,009 --> 00:16:30,639
the tables exist and if those tables

00:16:28,959 --> 00:16:32,439
exist it just marks as is applied

00:16:30,639 --> 00:16:34,149
doesn't you just says okay that's done

00:16:32,439 --> 00:16:35,920
already marks does that and moves on

00:16:34,149 --> 00:16:38,889
with its life and that means that you

00:16:35,920 --> 00:16:40,569
can upgrade in 1.6 1.7 just by having an

00:16:38,889 --> 00:16:41,649
initial migration and it will auto apply

00:16:40,569 --> 00:16:43,180
everywhere you want it to and this

00:16:41,649 --> 00:16:44,500
happens in production this happens on

00:16:43,180 --> 00:16:46,540
development it happens at every machine

00:16:44,500 --> 00:16:48,339
it's a very painless process the porting

00:16:46,540 --> 00:16:51,130
guy is about three four lines like this

00:16:48,339 --> 00:16:53,889
just saying move and some migrations run

00:16:51,130 --> 00:16:56,649
this command done if you're moving from

00:16:53,889 --> 00:16:58,630
south as a bit harder South has the same

00:16:56,649 --> 00:17:01,209
naming convention as the new migrations

00:16:58,630 --> 00:17:05,140
for its files which is a app / migration

00:17:01,209 --> 00:17:07,240
/ number something's up I what this code

00:17:05,140 --> 00:17:08,890
does is it will try and import those

00:17:07,240 --> 00:17:10,449
that matches his naming convention and

00:17:08,890 --> 00:17:12,010
it catches the employee run goes okay

00:17:10,449 --> 00:17:13,689
this is a South file and just sort of

00:17:12,010 --> 00:17:15,610
ignores it for you and so when you move

00:17:13,689 --> 00:17:16,809
from South these new migrations all you

00:17:15,610 --> 00:17:18,159
have to do is make sure everything's at

00:17:16,809 --> 00:17:20,829
the right of the newest version which is

00:17:18,159 --> 00:17:22,329
a thing the South one thing all the new

00:17:20,829 --> 00:17:23,890
version you can wipe the old migrations

00:17:22,329 --> 00:17:25,720
away and add a brand-new initial

00:17:23,890 --> 00:17:27,909
migration on this new version which is

00:17:25,720 --> 00:17:29,559
kind of what you do to sort of upgrade

00:17:27,909 --> 00:17:32,320
South to a brand new motivation set

00:17:29,559 --> 00:17:34,450
anyway but in all of this all the

00:17:32,320 --> 00:17:36,100
lessons we've learned like I've been

00:17:34,450 --> 00:17:38,409
working through this project for about a

00:17:36,100 --> 00:17:39,940
year in a bit now and there's been a

00:17:38,409 --> 00:17:42,549
sort of some interesting things

00:17:39,940 --> 00:17:45,399
discovered along the way the first is

00:17:42,549 --> 00:17:46,419
this I further somewhere before this

00:17:45,399 --> 00:17:48,609
inputs explicit

00:17:46,419 --> 00:17:50,830
better than implicit a lot of the

00:17:48,609 --> 00:17:52,330
migration stuff in South was kind of

00:17:50,830 --> 00:17:54,879
implicit like the structure the way it

00:17:52,330 --> 00:17:57,159
worked the code is all conventional most

00:17:54,879 --> 00:17:58,539
why you called code and the new format

00:17:57,159 --> 00:18:00,429
is much more explicitly force you to

00:17:58,539 --> 00:18:01,989
have this list of operations it forces

00:18:00,429 --> 00:18:04,359
an order it forces atomic pneus and

00:18:01,989 --> 00:18:05,889
that's really nice and all not on top of

00:18:04,359 --> 00:18:07,090
all that all the imports are now

00:18:05,889 --> 00:18:08,590
explicit at the top of the file it's a

00:18:07,090 --> 00:18:11,590
much better way of resolving those and

00:18:08,590 --> 00:18:13,509
so you can dive into migration and they

00:18:11,590 --> 00:18:14,590
even more human readable and scannable

00:18:13,509 --> 00:18:17,649
now and they ever were which is

00:18:14,590 --> 00:18:19,720
absolutely fantastic extracting

00:18:17,649 --> 00:18:21,279
databases is hard this is generally a

00:18:19,720 --> 00:18:23,379
problem with any abstraction layer if

00:18:21,279 --> 00:18:25,769
you're targeting more than one thing you

00:18:23,379 --> 00:18:27,789
go down add-on denominator now

00:18:25,769 --> 00:18:30,070
migrations is not the lowest common

00:18:27,789 --> 00:18:31,539
denominator it is set above that we like

00:18:30,070 --> 00:18:33,450
you know if you try and do certain

00:18:31,539 --> 00:18:35,679
operations on my sequel we just go look

00:18:33,450 --> 00:18:38,139
same to sequel light so there's there is

00:18:35,679 --> 00:18:40,419
some advanced stuff there but purely by

00:18:38,139 --> 00:18:42,730
supporting the databases we have to

00:18:40,419 --> 00:18:44,259
count tau somewhat to the realities you

00:18:42,730 --> 00:18:46,419
know I can't support things like post

00:18:44,259 --> 00:18:47,559
presses building indexes in the

00:18:46,419 --> 00:18:49,149
background easily because that doesn't

00:18:47,559 --> 00:18:51,669
really fit into the general flow of

00:18:49,149 --> 00:18:53,710
Django and so if I was doing this from

00:18:51,669 --> 00:18:56,409
scratch for a new project what I support

00:18:53,710 --> 00:18:58,090
multiple db's possibly not it depends on

00:18:56,409 --> 00:18:59,350
the Jersey like I think post which is

00:18:58,090 --> 00:19:01,960
great ada base I think it's very

00:18:59,350 --> 00:19:04,840
popularly used but in the jangle world

00:19:01,960 --> 00:19:07,929
we must be realists and you know we have

00:19:04,840 --> 00:19:10,690
to support those backends composability

00:19:07,929 --> 00:19:12,879
is really good now the old stuff as I

00:19:10,690 --> 00:19:13,960
said was code new service operations not

00:19:12,879 --> 00:19:15,909
only does that mean we can introspect

00:19:13,960 --> 00:19:17,350
them what I can do is when I squash

00:19:15,909 --> 00:19:20,019
migrations which is when you basically

00:19:17,350 --> 00:19:23,139
take you know 100 migrations history and

00:19:20,019 --> 00:19:24,279
move them down to one in South you

00:19:23,139 --> 00:19:25,690
couldn't do that automatically yet to

00:19:24,279 --> 00:19:26,769
sort of manually write a new one and

00:19:25,690 --> 00:19:28,989
make an initial one and fiddle around

00:19:26,769 --> 00:19:31,029
with it those annoying in the new one

00:19:28,989 --> 00:19:32,559
what you do is you take hundred

00:19:31,029 --> 00:19:34,509
migrations extract all the operations

00:19:32,559 --> 00:19:35,529
put them in one big list because they

00:19:34,509 --> 00:19:37,690
were all composable they're all atomic

00:19:35,529 --> 00:19:39,129
and then check the list and there's an

00:19:37,690 --> 00:19:40,840
optimizer it runs to the list okay

00:19:39,129 --> 00:19:42,489
that's a that's a Creighton tallit they

00:19:40,840 --> 00:19:44,499
can optimize away that's an ad in a

00:19:42,489 --> 00:19:45,789
rename you can push that into the ad and

00:19:44,499 --> 00:19:47,080
it optimizes the list down and down and

00:19:45,789 --> 00:19:49,090
down and down and down take funds as

00:19:47,080 --> 00:19:51,460
small as it can and so this way not only

00:19:49,090 --> 00:19:52,269
are you optimizing the correct history

00:19:51,460 --> 00:19:54,639
like if you've got something like a

00:19:52,269 --> 00:19:56,649
custom command in there a custom secret

00:19:54,639 --> 00:19:58,450
creation or custom model they stay in

00:19:56,649 --> 00:19:59,950
there they can optimize away all the

00:19:58,450 --> 00:20:02,139
other redundant stuff like you can push

00:19:59,950 --> 00:20:04,269
add columns in to create tables it can

00:20:02,139 --> 00:20:06,700
cancel out icons delete columns all that

00:20:04,269 --> 00:20:08,940
kind of stuff and it makes all that and

00:20:06,700 --> 00:20:13,840
also the internal codes so much better

00:20:08,940 --> 00:20:15,850
and finally feedback is vital seven

00:20:13,840 --> 00:20:17,919
years of feedback I think is what has

00:20:15,850 --> 00:20:20,380
helped me out with this massively like I

00:20:17,919 --> 00:20:22,570
i developed websites I develop

00:20:20,380 --> 00:20:24,070
reasonably large ones these days but I

00:20:22,570 --> 00:20:25,630
cannot see everything and there are

00:20:24,070 --> 00:20:27,820
people out there who are far more crazy

00:20:25,630 --> 00:20:29,950
than I am and this is a good thing they

00:20:27,820 --> 00:20:31,659
do horrible things migrations and tables

00:20:29,950 --> 00:20:33,250
and they are the people who send me

00:20:31,659 --> 00:20:35,169
feedback send me bug reports and they

00:20:33,250 --> 00:20:37,029
are how I've managed to fix the horrible

00:20:35,169 --> 00:20:39,130
horrible parts of migrations that some

00:20:37,029 --> 00:20:40,210
nasty edge cases you go or just ignore

00:20:39,130 --> 00:20:42,039
that and commit it now I hope nobody

00:20:40,210 --> 00:20:44,529
sees it and they find it all they find

00:20:42,039 --> 00:20:46,269
it and so that that is very important in

00:20:44,529 --> 00:20:47,950
getting this to be a nice stable mature

00:20:46,269 --> 00:20:51,250
platform make sure that it's much more

00:20:47,950 --> 00:20:53,139
reliable than anything else is and as

00:20:51,250 --> 00:20:55,179
the last thing the next slide is my last

00:20:53,139 --> 00:20:57,789
slide the last slide I'm usually very

00:20:55,179 --> 00:20:59,230
lazy but thanks on there and my name and

00:20:57,789 --> 00:21:01,299
put a handle and I go yeah it's done

00:20:59,230 --> 00:21:04,029
that's great my thing fancier but found

00:21:01,299 --> 00:21:06,340
on there and then end that way this is a

00:21:04,029 --> 00:21:08,590
bit different migrations was made

00:21:06,340 --> 00:21:10,929
possible thanks to a Kickstarter

00:21:08,590 --> 00:21:12,730
campaign Iran which raised over 17,000

00:21:10,929 --> 00:21:15,100
pounds sterling which is just under

00:21:12,730 --> 00:21:16,630
thirty thousand US dollars and it was

00:21:15,100 --> 00:21:18,250
all thanks to community community

00:21:16,630 --> 00:21:20,200
contributions paying for my time

00:21:18,250 --> 00:21:21,820
throughout this rather huge feature in

00:21:20,200 --> 00:21:23,830
the Django cool and so rather than

00:21:21,820 --> 00:21:27,450
thanking me later also thank everyone

00:21:23,830 --> 00:21:27,450
who contributed thank you very much

00:21:31,120 --> 00:21:34,120
ok

00:21:40,970 --> 00:21:46,350
have time for a few questions so please

00:21:43,320 --> 00:21:50,850
go ahead yes I'm curious when I can have

00:21:46,350 --> 00:21:52,650
this so the scheduled release 1.7 is May

00:21:50,850 --> 00:21:54,500
fifteenth wasn't me the RC I think but

00:21:52,650 --> 00:21:56,970
it's certainly mid-may at the end of May

00:21:54,500 --> 00:22:01,710
Django as historically i think never

00:21:56,970 --> 00:22:05,520
actually made a release date i I'm in

00:22:01,710 --> 00:22:07,140
charge this time did I'm in charge this

00:22:05,520 --> 00:22:08,610
time of the lease so it will hopefully

00:22:07,140 --> 00:22:11,460
be on time it's not very close to it so

00:22:08,610 --> 00:22:12,929
end of May is my rough guesstimate I was

00:22:11,460 --> 00:22:14,550
just wondering for migrations that

00:22:12,929 --> 00:22:16,050
required data changes or like actual

00:22:14,550 --> 00:22:17,700
other grunting commands that changed

00:22:16,050 --> 00:22:20,160
data in the tables how it handles that

00:22:17,700 --> 00:22:21,780
so there are operations that you can

00:22:20,160 --> 00:22:24,420
write in manually called run sequel and

00:22:21,780 --> 00:22:26,250
run Python run sequel takes a custom

00:22:24,420 --> 00:22:28,320
single string and just runs that run

00:22:26,250 --> 00:22:29,880
Python you could you pass in a function

00:22:28,320 --> 00:22:31,590
and you get a scheme redditor object you

00:22:29,880 --> 00:22:32,790
can do whatever you like so that sort of

00:22:31,590 --> 00:22:33,960
option if you want to run out with your

00:22:32,790 --> 00:22:35,610
code is still in there you can't

00:22:33,960 --> 00:22:37,350
optimize past those because they're sort

00:22:35,610 --> 00:22:43,110
of opaque box but they all still there

00:22:37,350 --> 00:22:46,040
if you want them think again for the

00:22:43,110 --> 00:22:49,290
talk I'm wondering how do you deal with

00:22:46,040 --> 00:22:51,890
now that people use get everywhere with

00:22:49,290 --> 00:22:54,059
branching and I know that the alembic

00:22:51,890 --> 00:22:55,350
kind of tries to deal with that and try

00:22:54,059 --> 00:22:56,670
to deal with conflicts when people work

00:22:55,350 --> 00:23:00,179
in different branches and you have to

00:22:56,670 --> 00:23:01,530
like merge conflicts and I'm just

00:23:00,179 --> 00:23:04,800
wondering I'd yeah well it's a good

00:23:01,530 --> 00:23:06,450
question and so South used to track sort

00:23:04,800 --> 00:23:08,429
of the history the graph of migrations

00:23:06,450 --> 00:23:10,170
the numbers so you'd have 0 1 0 2 0 3

00:23:08,429 --> 00:23:12,600
and then you branch target 20 / fours

00:23:10,170 --> 00:23:14,700
and that's not good the new stuff it

00:23:12,600 --> 00:23:16,350
tracks explicitly again explicit better

00:23:14,700 --> 00:23:18,900
than implicit the parent we might each

00:23:16,350 --> 00:23:20,880
migration so it knows it as a fork if

00:23:18,900 --> 00:23:23,190
it's LexA fork it will just stop tell

00:23:20,880 --> 00:23:25,410
you you've got a merge conflict and it

00:23:23,190 --> 00:23:27,240
will offer you if it detects the two

00:23:25,410 --> 00:23:28,530
sides are compatible it offers you a

00:23:27,240 --> 00:23:30,120
dash dash emerge option which will make

00:23:28,530 --> 00:23:31,860
a second migration that parents them

00:23:30,120 --> 00:23:33,990
both and go this is fine and rearrange

00:23:31,860 --> 00:23:35,970
them properly so there is now proper

00:23:33,990 --> 00:23:38,220
texture in there there's some orthotic

00:23:35,970 --> 00:23:40,170
fixing but unlike code merging is a lot

00:23:38,220 --> 00:23:42,179
harder like if it says any hint of

00:23:40,170 --> 00:23:47,400
possible and compatibility it will just

00:23:42,179 --> 00:23:50,500
blow up and stop Thanks is there any

00:23:47,400 --> 00:23:53,050
plan for migrating myself migrations

00:23:50,500 --> 00:23:55,000
to the new jangled migrations of should

00:23:53,050 --> 00:23:56,290
I just declare migration bankruptcy

00:23:55,000 --> 00:23:58,300
start the banished open the way

00:23:56,290 --> 00:23:59,890
unfortunately the planets are you had to

00:23:58,300 --> 00:24:02,350
throw away old history them you know

00:23:59,890 --> 00:24:06,580
south migrations are just they're not

00:24:02,350 --> 00:24:09,850
really forward to come a school so one

00:24:06,580 --> 00:24:11,820
common problem with sites that are that

00:24:09,850 --> 00:24:13,980
see a lot of traffic is dealing with

00:24:11,820 --> 00:24:16,000
migrations that can cause some

00:24:13,980 --> 00:24:17,200
inconsistency or some downtime and there

00:24:16,000 --> 00:24:19,140
have been some various techniques to

00:24:17,200 --> 00:24:20,800
trying to do sort of zero downtime

00:24:19,140 --> 00:24:21,970
migrations have you thought about

00:24:20,800 --> 00:24:24,910
whether that's something that could be

00:24:21,970 --> 00:24:27,730
systematized and brought into Django as

00:24:24,910 --> 00:24:30,730
a as a feature definitely so unfortunate

00:24:27,730 --> 00:24:33,280
stew like 1.7 but my rough plan for this

00:24:30,730 --> 00:24:34,960
was to have the operations can say her

00:24:33,280 --> 00:24:36,340
back end if they are blocking and

00:24:34,960 --> 00:24:38,290
unblocking so example on post graves

00:24:36,340 --> 00:24:39,640
adding and adding a nullable problem is

00:24:38,290 --> 00:24:41,440
non blocking and happens and taneously

00:24:39,640 --> 00:24:43,750
and so then you have a mode way you say

00:24:41,440 --> 00:24:46,390
this migration will it block and

00:24:43,750 --> 00:24:48,160
thinking go it will lock up a table lock

00:24:46,390 --> 00:24:49,360
up a row will look up everything and so

00:24:48,160 --> 00:24:51,010
it's like some kind of hint and then

00:24:49,360 --> 00:24:52,930
your DB people a lot of people can go

00:24:51,010 --> 00:24:54,340
okay this one's safe we can just run it

00:24:52,930 --> 00:24:56,170
this one is going to block we need to

00:24:54,340 --> 00:25:00,400
prepare for it so there's something like

00:24:56,170 --> 00:25:04,090
that that will come eventually sweet

00:25:00,400 --> 00:25:06,660
okay one more question please more is

00:25:04,090 --> 00:25:09,280
there any overlap or code reuse between

00:25:06,660 --> 00:25:11,380
Django migrations and sequel alchemy

00:25:09,280 --> 00:25:12,610
alembic it seems similar projects they

00:25:11,380 --> 00:25:15,790
seem to deal with a lot of the same

00:25:12,610 --> 00:25:18,990
issues repeat the question sorry is

00:25:15,790 --> 00:25:21,910
there overlap or code reuse between

00:25:18,990 --> 00:25:24,130
Django migrations and sequel alchemy

00:25:21,910 --> 00:25:25,420
alembic anything like them I mean that

00:25:24,130 --> 00:25:27,340
there could be I mean so I I have

00:25:25,420 --> 00:25:29,320
something be inspired by our alembic and

00:25:27,340 --> 00:25:31,090
other other frameworks in fact South

00:25:29,320 --> 00:25:32,620
entire frozen RM thing was a supply by

00:25:31,090 --> 00:25:34,180
another frame of a sort of i just took

00:25:32,620 --> 00:25:36,790
the idea and then consumed it and I was

00:25:34,180 --> 00:25:39,280
kind of bad of me but there is something

00:25:36,790 --> 00:25:42,310
there but unfortunately my current

00:25:39,280 --> 00:25:44,230
priority is getting this done and civil

00:25:42,310 --> 00:25:45,700
alchemy and jenga's ORM they can have

00:25:44,230 --> 00:25:47,170
different levels like Django's was much

00:25:45,700 --> 00:25:49,090
much higher level sig lobbies much lower

00:25:47,170 --> 00:25:51,100
so there's potential there was AI de

00:25:49,090 --> 00:25:53,380
sharing and reviewing but unfortunately

00:25:51,100 --> 00:26:10,870
I haven't got a for you thank you thank

00:25:53,380 --> 00:26:13,770
you everybody thank you I have bank

00:26:10,870 --> 00:26:13,770

YouTube URL: https://www.youtube.com/watch?v=a-_GAHfpk1Y


