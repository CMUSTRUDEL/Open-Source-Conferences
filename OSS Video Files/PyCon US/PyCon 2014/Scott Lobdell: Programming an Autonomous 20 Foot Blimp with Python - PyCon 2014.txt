Title: Scott Lobdell: Programming an Autonomous 20 Foot Blimp with Python - PyCon 2014
Publication date: 2014-04-24
Playlist: PyCon 2014
Description: 
	Speaker: Scott Lobdell

This talk documents the journey of a less than conventional robotics application in which python is used as the logical controller of an autonomous 20 foot blimp. The blimp's autopilot features, prolonged air time, large size, and smooth motion make it the ideal platform for aerial photography. Giving the blimp an onboard controller reduces the overall costs and requirements of the operation.

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:07,970 --> 00:00:12,330
now see thank you for joining us I'd

00:00:10,769 --> 00:00:14,009
like to take a moment to introduce Scott

00:00:12,330 --> 00:00:15,990
Lobdell he's a software engineer at

00:00:14,009 --> 00:00:17,070
hearsay social who's recently left the

00:00:15,990 --> 00:00:27,890
army is going to talk about this big

00:00:17,070 --> 00:00:30,539
blimp here so give it up Jeremiah how

00:00:27,890 --> 00:00:32,369
much did you tie this thing so this is a

00:00:30,539 --> 00:00:33,630
presentation about blimps so I did want

00:00:32,369 --> 00:00:37,110
to get to start it off right so bear

00:00:33,630 --> 00:00:39,780
with me which is one moment please all

00:00:37,110 --> 00:00:40,950
right it's not hydrogen though so that

00:00:39,780 --> 00:00:43,079
was good as going to hell it was going

00:00:40,950 --> 00:00:44,280
to be really awesome anyway it just a

00:00:43,079 --> 00:00:46,260
little bit about me my name is Scott

00:00:44,280 --> 00:00:49,289
Lobdell left the army I work for hearsay

00:00:46,260 --> 00:00:51,690
social now I do have some resources for

00:00:49,289 --> 00:00:53,280
this talk I did present or I have them

00:00:51,690 --> 00:00:54,420
post it at the end of the slide show but

00:00:53,280 --> 00:00:56,280
otherwise if you just follow me on

00:00:54,420 --> 00:00:57,690
Twitter I have the resources posted

00:00:56,280 --> 00:00:59,789
online you can follow along if you want

00:00:57,690 --> 00:01:01,739
if I can also just put in a brief plug

00:00:59,789 --> 00:01:04,140
hearsay social is going to be hosting

00:01:01,739 --> 00:01:06,060
the blimp after party the deer jepara if

00:01:04,140 --> 00:01:10,500
you will directly after this at the the

00:01:06,060 --> 00:01:12,030
Wesen in the reserved room right a lot

00:01:10,500 --> 00:01:13,710
of big names going to be there akshay

00:01:12,030 --> 00:01:17,460
Shah is going to be there for any fans

00:01:13,710 --> 00:01:18,869
of him and his work so without further

00:01:17,460 --> 00:01:21,930
ado let me just go ahead and get into

00:01:18,869 --> 00:01:24,119
the blimp here so what this is is the

00:01:21,930 --> 00:01:27,090
semi-autonomous blimp so the idea is

00:01:24,119 --> 00:01:28,860
that I can instead of piloting this

00:01:27,090 --> 00:01:31,890
thing directly I can click way points on

00:01:28,860 --> 00:01:33,119
a map the blimp will navigate to my own

00:01:31,890 --> 00:01:35,790
goal for this was to do aerial

00:01:33,119 --> 00:01:37,320
photography so the idea behind this here

00:01:35,790 --> 00:01:39,600
is that if any of you want to replicate

00:01:37,320 --> 00:01:41,220
any or all of this project this should

00:01:39,600 --> 00:01:42,630
give you enough resources to get started

00:01:41,220 --> 00:01:44,880
and to avoid some of the same pitfalls

00:01:42,630 --> 00:01:47,490
that I had so the overall architecture

00:01:44,880 --> 00:01:49,710
that we have here is we have a laptop

00:01:47,490 --> 00:01:51,780
that has a client application that's in

00:01:49,710 --> 00:01:56,130
Python everything is in Python and even

00:01:51,780 --> 00:01:58,079
wearing python skin boots no big deal so

00:01:56,130 --> 00:02:00,930
we've got an xbox remote it's wired to a

00:01:58,079 --> 00:02:02,700
laptop that we can control that xbox

00:02:00,930 --> 00:02:05,219
remote sends commands that are that are

00:02:02,700 --> 00:02:06,689
encoded into specialized bike commands

00:02:05,219 --> 00:02:08,729
that I wrote they're sent across the

00:02:06,689 --> 00:02:11,190
wire wireless XP connection which I'll

00:02:08,729 --> 00:02:13,110
get into that then connects to the

00:02:11,190 --> 00:02:15,000
onboard controller here in

00:02:13,110 --> 00:02:17,520
blimp which is actually a full-blown

00:02:15,000 --> 00:02:22,200
computer running a bun to 10 for that in

00:02:17,520 --> 00:02:24,270
turn sends commands to the rotor so with

00:02:22,200 --> 00:02:25,950
any basic aircraft I know Ned just had a

00:02:24,270 --> 00:02:28,530
previous talk about helicopters but your

00:02:25,950 --> 00:02:30,060
basic controls are pitch roll and yaw so

00:02:28,530 --> 00:02:31,920
pitch of course controls the nose of the

00:02:30,060 --> 00:02:33,510
aircraft roll is going to be your side

00:02:31,920 --> 00:02:35,970
to side and then y'all is going to be

00:02:33,510 --> 00:02:38,730
your your compass azmuth here so if we

00:02:35,970 --> 00:02:41,250
have a blimp then we have those same

00:02:38,730 --> 00:02:43,350
controls and we just manipulate pitch

00:02:41,250 --> 00:02:46,080
rolling you on different manners so for

00:02:43,350 --> 00:02:51,540
pitch we essentially manipulate the tail

00:02:46,080 --> 00:02:53,070
the tail elevator to to apply force as a

00:02:51,540 --> 00:02:54,510
result of the win then we can also

00:02:53,070 --> 00:02:56,940
manipulate the thrust vector on the

00:02:54,510 --> 00:03:00,420
gondola to control the direction of the

00:02:56,940 --> 00:03:04,260
rotors as far as role goes blimp is a

00:03:00,420 --> 00:03:06,239
blimp is naturally it has a very center

00:03:04,260 --> 00:03:08,370
a very heavy center of gravity so it's

00:03:06,239 --> 00:03:10,620
going to naturally roll to your your

00:03:08,370 --> 00:03:12,480
normal position so you really only need

00:03:10,620 --> 00:03:13,830
to worry about pitch and yaw then of

00:03:12,480 --> 00:03:15,630
course with y'all you could just control

00:03:13,830 --> 00:03:18,780
the tail rudder and then you can go left

00:03:15,630 --> 00:03:20,459
or right so the idea behind the

00:03:18,780 --> 00:03:22,799
autopilot algorithm or how this goes

00:03:20,459 --> 00:03:24,810
about working is I only care about

00:03:22,799 --> 00:03:26,640
pitching y'all so I have I need to

00:03:24,810 --> 00:03:28,830
establish a target pitch in a target

00:03:26,640 --> 00:03:30,840
y'all so the target pitch is established

00:03:28,830 --> 00:03:32,250
based on your current altitude and your

00:03:30,840 --> 00:03:33,780
target altitude and that tells you

00:03:32,250 --> 00:03:36,239
whether you want to pitch up or down and

00:03:33,780 --> 00:03:38,220
then for y'all you have your current

00:03:36,239 --> 00:03:39,989
azmuth and then you have your target

00:03:38,220 --> 00:03:41,850
azmuth which is based on gps coordinates

00:03:39,989 --> 00:03:43,290
so with both of those things you can

00:03:41,850 --> 00:03:45,900
easily determine do I need to go up or

00:03:43,290 --> 00:03:47,820
down do I need to turn left or right so

00:03:45,900 --> 00:03:49,290
from there you have the intensity of how

00:03:47,820 --> 00:03:51,000
hard you want to turn or how hard you

00:03:49,290 --> 00:03:52,739
want to pitch and that's based on the

00:03:51,000 --> 00:03:54,900
differential between those two so it's

00:03:52,739 --> 00:03:56,910
directly proportional to the relative to

00:03:54,900 --> 00:04:03,209
relative distance between those two

00:03:56,910 --> 00:04:04,950
things alright so here's the overall

00:04:03,209 --> 00:04:08,070
start software architecture behind what

00:04:04,950 --> 00:04:09,720
we have so we have a controller which is

00:04:08,070 --> 00:04:13,620
responsible for managing all of these

00:04:09,720 --> 00:04:15,329
different asynchronous tasks and I just

00:04:13,620 --> 00:04:17,940
say task because I actually use G event

00:04:15,329 --> 00:04:22,109
here so this isn't a talk about G event

00:04:17,940 --> 00:04:23,700
but G event itself is emulated threat

00:04:22,109 --> 00:04:25,800
emulated multi-threading so it's not

00:04:23,700 --> 00:04:26,820
actually multi-threaded you have what's

00:04:25,800 --> 00:04:28,740
called green let's hear

00:04:26,820 --> 00:04:31,080
here and so how this works is

00:04:28,740 --> 00:04:33,120
essentially you spawn multiple green

00:04:31,080 --> 00:04:35,730
'let's and as soon as you create those

00:04:33,120 --> 00:04:37,140
there kicked off asynchronously and once

00:04:35,730 --> 00:04:38,460
you get down to that joint all that's

00:04:37,140 --> 00:04:41,010
going to block until each of those

00:04:38,460 --> 00:04:43,500
different green 'let's finishes its task

00:04:41,010 --> 00:04:44,970
so in this case case each one of those

00:04:43,500 --> 00:04:48,510
individual green 'let's was an infinite

00:04:44,970 --> 00:04:51,240
loop so it didn't have to do that we can

00:04:48,510 --> 00:04:53,580
also do monkey patching which will take

00:04:51,240 --> 00:04:55,170
anything that naturally blocks so in

00:04:53,580 --> 00:04:57,030
this case we have a serial connection

00:04:55,170 --> 00:04:58,920
for example so anytime anything is

00:04:57,030 --> 00:05:00,720
blocking it's going to immediately yield

00:04:58,920 --> 00:05:03,270
to another thread so that's also going

00:05:00,720 --> 00:05:05,160
to make it when we do time dot sleep so

00:05:03,270 --> 00:05:07,200
if you even in that bottom bottom

00:05:05,160 --> 00:05:08,820
example we have the sample green lit and

00:05:07,200 --> 00:05:09,870
that's the basic structure of every

00:05:08,820 --> 00:05:11,430
single green lit that we have we're

00:05:09,870 --> 00:05:12,540
going to do something we're going to do

00:05:11,430 --> 00:05:14,010
a little thing and then we're going to

00:05:12,540 --> 00:05:15,360
sleep which is going to yield to the

00:05:14,010 --> 00:05:16,860
other threads and then once that

00:05:15,360 --> 00:05:21,360
sleeping is complete it's going to be

00:05:16,860 --> 00:05:23,010
reactivated alright so the very first

00:05:21,360 --> 00:05:26,640
thing we have to do is we had to read

00:05:23,010 --> 00:05:28,860
from sensors so the the sensors

00:05:26,640 --> 00:05:31,080
themselves had sample code written in

00:05:28,860 --> 00:05:34,080
C++ and that's really the easiest way to

00:05:31,080 --> 00:05:36,150
interface with them so the basic premise

00:05:34,080 --> 00:05:38,100
behind what I did is I took the things

00:05:36,150 --> 00:05:39,690
that I had to write in C++ so the things

00:05:38,100 --> 00:05:41,100
that needed to be particularly fast and

00:05:39,690 --> 00:05:43,950
then I bubbled up the high-level

00:05:41,100 --> 00:05:45,390
abstractions to python and then with

00:05:43,950 --> 00:05:48,450
Python it's very easy to kind of create

00:05:45,390 --> 00:05:49,440
an autopilot algorithm here so again

00:05:48,450 --> 00:05:51,540
this is going to talk about boosts

00:05:49,440 --> 00:05:54,150
either but here's the basic premise we

00:05:51,540 --> 00:05:56,220
have a we have some things that we want

00:05:54,150 --> 00:05:57,780
to do in C++ and then we want to create

00:05:56,220 --> 00:05:59,220
a manager class for those different

00:05:57,780 --> 00:06:01,110
things and then we want to surface some

00:05:59,220 --> 00:06:02,520
of those functions up to python so here

00:06:01,110 --> 00:06:04,680
in this example if you look at the very

00:06:02,520 --> 00:06:06,720
bottom we're surfacing up the function

00:06:04,680 --> 00:06:07,800
say hello and get integer and then the

00:06:06,720 --> 00:06:10,890
bottom is just how you would you go

00:06:07,800 --> 00:06:12,960
about using that Python so what this

00:06:10,890 --> 00:06:16,110
means for us then is that we can create

00:06:12,960 --> 00:06:18,570
these these drivers that we write in C++

00:06:16,110 --> 00:06:20,550
and then here I just surface this one

00:06:18,570 --> 00:06:24,990
function up to python just get azmuth so

00:06:20,550 --> 00:06:27,540
here python is going to call C++ code so

00:06:24,990 --> 00:06:29,520
we that was the example for the compass

00:06:27,540 --> 00:06:31,740
so now we can go and do that with every

00:06:29,520 --> 00:06:34,080
single one of our of our sensors so in

00:06:31,740 --> 00:06:37,140
this case i have a gps accelerometer

00:06:34,080 --> 00:06:38,730
compass and an altimeter so for all of

00:06:37,140 --> 00:06:40,770
those things i have drivers written in

00:06:38,730 --> 00:06:42,690
c++ I service those functions of the pie

00:06:40,770 --> 00:06:45,509
thon and I have a sensor manager that

00:06:42,690 --> 00:06:47,610
manages all of those things and the

00:06:45,509 --> 00:06:49,379
controller is then going to pull the

00:06:47,610 --> 00:06:51,690
sensor manager every one tenth of a

00:06:49,379 --> 00:06:53,280
second and as it gets those values it

00:06:51,690 --> 00:06:55,379
then updates and communicates with the

00:06:53,280 --> 00:06:57,000
other green listen tells them about the

00:06:55,379 --> 00:06:59,039
update so in this case we're going to

00:06:57,000 --> 00:07:00,500
tell the the communicator about it which

00:06:59,039 --> 00:07:03,240
will send the data back to the client

00:07:00,500 --> 00:07:05,460
with you know what my current GPS is

00:07:03,240 --> 00:07:06,780
what my out suit is everything else and

00:07:05,460 --> 00:07:08,639
it's going to send it to the autopilot

00:07:06,780 --> 00:07:11,460
so the autopilot relies on the sensor

00:07:08,639 --> 00:07:16,560
data in order to think and decide what

00:07:11,460 --> 00:07:18,960
to do next so with the camera this is

00:07:16,560 --> 00:07:20,909
the exact same concept again I use Boost

00:07:18,960 --> 00:07:23,340
and the reason i did here in this case

00:07:20,909 --> 00:07:26,280
is because I relied on a c++ library

00:07:23,340 --> 00:07:29,909
called G photo too and so what that is

00:07:26,280 --> 00:07:31,319
it's a camera library written in C++

00:07:29,909 --> 00:07:33,210
that supports hundreds and hundreds of

00:07:31,319 --> 00:07:35,400
cameras that you can then take pictures

00:07:33,210 --> 00:07:37,740
with them you can get the live view and

00:07:35,400 --> 00:07:39,479
in my case I had a canon t2i so what I

00:07:37,740 --> 00:07:41,009
want to do is I want it to be able to

00:07:39,479 --> 00:07:42,060
grab a frame from the live view and I

00:07:41,009 --> 00:07:43,919
wanted to be able to take a picture

00:07:42,060 --> 00:07:49,409
remotely this is all done through the

00:07:43,919 --> 00:07:50,729
USB or a USB connection and then I could

00:07:49,409 --> 00:07:54,599
just surface this function to python

00:07:50,729 --> 00:07:57,240
that I could take pictures from there so

00:07:54,599 --> 00:08:00,330
in order to communicate from the client

00:07:57,240 --> 00:08:02,610
to the blimp I use an XP module and what

00:08:00,330 --> 00:08:04,710
this is it's basically you can imagine

00:08:02,610 --> 00:08:06,419
just a really really long serial cable

00:08:04,710 --> 00:08:08,729
and that's basically what this is if you

00:08:06,419 --> 00:08:11,430
just think of that abstraction but it's

00:08:08,729 --> 00:08:12,960
a wireless module that uses the 80 to 15

00:08:11,430 --> 00:08:16,500
dot for protocol which is just a

00:08:12,960 --> 00:08:18,150
peer-to-peer low-power protocol and then

00:08:16,500 --> 00:08:20,580
here i use PI serial to interface with

00:08:18,150 --> 00:08:22,979
it so i can just dynamically find where

00:08:20,580 --> 00:08:24,840
where the serial port is loaded or the

00:08:22,979 --> 00:08:26,520
XP module is loaded i can open it and i

00:08:24,840 --> 00:08:27,690
can write to it and read from it i'm

00:08:26,520 --> 00:08:30,000
going to do both of those things from

00:08:27,690 --> 00:08:31,889
the writer and the reader so in this

00:08:30,000 --> 00:08:33,450
case I develop my own sort of

00:08:31,889 --> 00:08:35,370
communications protocol which I'm sure a

00:08:33,450 --> 00:08:37,140
lot of you can probably imagine that

00:08:35,370 --> 00:08:38,940
there's better ways to do this but it

00:08:37,140 --> 00:08:42,690
worked for me but the basic pattern was

00:08:38,940 --> 00:08:46,589
that I send I send a command and a value

00:08:42,690 --> 00:08:47,670
and so the value what the value means is

00:08:46,589 --> 00:08:48,959
dependent on the command that sent

00:08:47,670 --> 00:08:50,870
before it so here this is all i'm doing

00:08:48,959 --> 00:08:52,070
i'm sending a command and a value I'm

00:08:50,870 --> 00:08:54,980
packed

00:08:52,070 --> 00:08:57,410
those values in Python into just two

00:08:54,980 --> 00:09:00,050
bites for a short for instance or eight

00:08:57,410 --> 00:09:01,670
bytes I believe for a float and what I'm

00:09:00,050 --> 00:09:04,310
doing as well is i'm adding header

00:09:01,670 --> 00:09:07,550
header bytes so i can designate a packet

00:09:04,310 --> 00:09:09,170
so if there's any sort of packet loss i

00:09:07,550 --> 00:09:10,580
need to be able to reestablish that

00:09:09,170 --> 00:09:11,900
stream and determine what's the command

00:09:10,580 --> 00:09:13,820
of what's the value so in this case I

00:09:11,900 --> 00:09:16,280
just had some reserved by its 02 54 and

00:09:13,820 --> 00:09:18,020
255 and that pattern only appeared in

00:09:16,280 --> 00:09:21,350
the header bytes so that way I was able

00:09:18,020 --> 00:09:23,090
to designate what's a packet so on the

00:09:21,350 --> 00:09:25,400
receiving end I have a I have a reader

00:09:23,090 --> 00:09:27,470
and writer on both the controller and

00:09:25,400 --> 00:09:29,300
the client and so all this is just doing

00:09:27,470 --> 00:09:31,370
is just interpreting that stream and do

00:09:29,300 --> 00:09:33,470
it taking the appropriate action so the

00:09:31,370 --> 00:09:35,750
basic pattern is up here I have a

00:09:33,470 --> 00:09:37,550
dictionary that has the command and then

00:09:35,750 --> 00:09:39,530
the appropriate function that it maps to

00:09:37,550 --> 00:09:40,880
then it's going to call that function as

00:09:39,530 --> 00:09:42,950
soon as it gets the command is going to

00:09:40,880 --> 00:09:44,600
pass in the value that we got so this is

00:09:42,950 --> 00:09:46,820
just one example in this case this is

00:09:44,600 --> 00:09:48,350
the the control that I use with from the

00:09:46,820 --> 00:09:50,120
xbox so if I press a button it's going

00:09:48,350 --> 00:09:51,830
to say hey there's a button pressed the

00:09:50,120 --> 00:09:53,150
value is going to be the button that was

00:09:51,830 --> 00:09:55,190
pressed and then it's going to take the

00:09:53,150 --> 00:09:56,870
appropriate action so down there at the

00:09:55,190 --> 00:09:58,670
bottom you can see start issued the kill

00:09:56,870 --> 00:10:01,970
can't command up would increase the

00:09:58,670 --> 00:10:05,060
target altitude and so forth all right

00:10:01,970 --> 00:10:07,040
so to actually control the blimp I made

00:10:05,060 --> 00:10:09,740
another abstraction where we have a

00:10:07,040 --> 00:10:11,660
class strictly responsible for managing

00:10:09,740 --> 00:10:13,700
the motors and one thing that I did hear

00:10:11,660 --> 00:10:15,260
that proved to be very valuable was to

00:10:13,700 --> 00:10:18,200
make it to the inputs were basically

00:10:15,260 --> 00:10:19,790
enumerated data types in this man I

00:10:18,200 --> 00:10:22,340
could send command just like pitch up

00:10:19,790 --> 00:10:23,810
pitch down with an Associated value and

00:10:22,340 --> 00:10:26,660
what this allowed me to do it allowed me

00:10:23,810 --> 00:10:29,300
to independently independently validate

00:10:26,660 --> 00:10:30,830
the autopilot in the motor control so

00:10:29,300 --> 00:10:32,540
essentially i could do manual control

00:10:30,830 --> 00:10:34,190
and send commands like pitch up pitch

00:10:32,540 --> 00:10:35,750
down validated the work properly and

00:10:34,190 --> 00:10:37,490
then with the autopilot i could

00:10:35,750 --> 00:10:39,980
essentially validate hey depending on

00:10:37,490 --> 00:10:43,210
the action I take am I outputting pitch

00:10:39,980 --> 00:10:45,710
up or pitch down here so this has two

00:10:43,210 --> 00:10:48,320
two major functions that are exposed to

00:10:45,710 --> 00:10:49,880
the controller so we have tick so every

00:10:48,320 --> 00:10:52,430
one tenth of a second it's going to take

00:10:49,880 --> 00:10:54,020
and recalculate what the motors are

00:10:52,430 --> 00:10:56,240
supposed to do next and then basically

00:10:54,020 --> 00:10:57,860
update from instruction so we have other

00:10:56,240 --> 00:10:59,450
classes that are updating the

00:10:57,860 --> 00:11:02,570
information here which is a pretty good

00:10:59,450 --> 00:11:04,940
pattern to use its tell don't ask so

00:11:02,570 --> 00:11:05,720
here is the illustration of that pattern

00:11:04,940 --> 00:11:08,000
here

00:11:05,720 --> 00:11:10,579
of the autopilot and the manual control

00:11:08,000 --> 00:11:14,029
that both subclass a base class and that

00:11:10,579 --> 00:11:15,589
base pilot has a think and a get

00:11:14,029 --> 00:11:17,689
instruction so whether you're using the

00:11:15,589 --> 00:11:19,160
Amanda controller the autopilot you can

00:11:17,689 --> 00:11:20,449
get the instructions from them but

00:11:19,160 --> 00:11:22,850
they're both updated in their own

00:11:20,449 --> 00:11:25,819
respective manners so the autopilot will

00:11:22,850 --> 00:11:27,620
take input from some things from the

00:11:25,819 --> 00:11:29,180
Xbox control or the client you can

00:11:27,620 --> 00:11:31,879
essentially say like increase the

00:11:29,180 --> 00:11:33,709
altitude or decrease the altitude send

00:11:31,879 --> 00:11:35,300
in this GPS coordinate but primarily

00:11:33,709 --> 00:11:36,709
we're going to use the central sensors

00:11:35,300 --> 00:11:38,750
in this case so based on the sensor data

00:11:36,709 --> 00:11:40,250
we're going to respond accordingly and

00:11:38,750 --> 00:11:44,329
then with manual control this is based

00:11:40,250 --> 00:11:46,160
this uses purely the Xbox control in

00:11:44,329 --> 00:11:49,399
this case which is hooked up to the

00:11:46,160 --> 00:11:51,410
laptop and custom commands are sent

00:11:49,399 --> 00:11:53,629
across so here's some sample code from

00:11:51,410 --> 00:11:54,920
the manual control here the two public

00:11:53,629 --> 00:11:57,139
functions i mentioned we're thinking

00:11:54,920 --> 00:12:00,500
getting getting instructions it's

00:11:57,139 --> 00:12:02,269
updated it's updated in its own way so

00:12:00,500 --> 00:12:05,149
set right thumbstick worlds out

00:12:02,269 --> 00:12:06,410
horizontal in this case so as you send

00:12:05,149 --> 00:12:08,029
it commands is going to update what

00:12:06,410 --> 00:12:09,589
values its supposed to supposed to do

00:12:08,029 --> 00:12:11,209
and then for the autopilot it's

00:12:09,589 --> 00:12:12,350
basically the same pattern but we're

00:12:11,209 --> 00:12:14,360
just updating from the Centers as you

00:12:12,350 --> 00:12:16,100
could see here so this is the sample

00:12:14,360 --> 00:12:18,699
code for the yaw there's a lot more that

00:12:16,100 --> 00:12:21,920
goes into this but in this case this was

00:12:18,699 --> 00:12:23,959
how to calculate young left or young

00:12:21,920 --> 00:12:26,209
right and the associate intensity based

00:12:23,959 --> 00:12:28,730
on the current azmuth in the target

00:12:26,209 --> 00:12:31,059
azmuth so this is kind of interesting

00:12:28,730 --> 00:12:33,559
actually because if you imagine with

00:12:31,059 --> 00:12:35,569
pitch this pattern works just fine

00:12:33,559 --> 00:12:37,309
because you have naturally opposing

00:12:35,569 --> 00:12:39,019
forces so you have gravity that's going

00:12:37,309 --> 00:12:41,420
to naturally slow it down as you pitch

00:12:39,019 --> 00:12:43,309
up for example with y'all there's no

00:12:41,420 --> 00:12:44,629
counter there's no opposing forces as

00:12:43,309 --> 00:12:46,250
you do this so in this case what I

00:12:44,629 --> 00:12:48,230
actually did is rather than start

00:12:46,250 --> 00:12:50,720
establish a target position I establish

00:12:48,230 --> 00:12:51,800
a target velocity so you can imagine

00:12:50,720 --> 00:12:53,689
we're getting into some derivatives

00:12:51,800 --> 00:12:55,550
there and as you're going left going

00:12:53,689 --> 00:12:58,459
right you're manipulating acceleration

00:12:55,550 --> 00:13:00,290
to affect velocity here and so as you

00:12:58,459 --> 00:13:01,790
imagine then we could start yawning left

00:13:00,290 --> 00:13:03,050
and as we approach our position we're

00:13:01,790 --> 00:13:04,220
going to realize that we're going too

00:13:03,050 --> 00:13:05,689
fast and you can imagine that we're

00:13:04,220 --> 00:13:11,629
applying counter forces as we get to

00:13:05,689 --> 00:13:13,970
that point all right for the hardware

00:13:11,629 --> 00:13:15,769
Arkansas for the client application here

00:13:13,970 --> 00:13:17,600
we're just running a laptop and the

00:13:15,769 --> 00:13:19,519
point of the laptop is to be able to set

00:13:17,600 --> 00:13:19,820
waypoints so here I just have some video

00:13:19,519 --> 00:13:21,740
that

00:13:19,820 --> 00:13:24,080
just rating that point the circle

00:13:21,740 --> 00:13:25,370
represents the radius of how far we can

00:13:24,080 --> 00:13:27,050
communicate with the blimp so it's a

00:13:25,370 --> 00:13:29,090
one-mile radius so this is two miles

00:13:27,050 --> 00:13:30,500
across and two miles high and you can

00:13:29,090 --> 00:13:32,720
click any point within that range and

00:13:30,500 --> 00:13:35,240
these xB modules are supposed to be one

00:13:32,720 --> 00:13:37,220
mile line of sight connectivity all

00:13:35,240 --> 00:13:39,530
right and then so from here I also use

00:13:37,220 --> 00:13:41,780
the google maps api and that returns a

00:13:39,530 --> 00:13:43,940
PNG and then i used opencv to go ahead

00:13:41,780 --> 00:13:45,950
and render that PNG onto a GUI and i

00:13:43,940 --> 00:13:47,900
wrote some other stuff on there and took

00:13:45,950 --> 00:13:50,030
mouse and putting things like that with

00:13:47,900 --> 00:13:53,090
the xbox control i again use boost and

00:13:50,030 --> 00:13:55,190
here i use another c++ library which was

00:13:53,090 --> 00:13:57,650
SD l and again i just surfaced those

00:13:55,190 --> 00:13:59,690
high level high level things that we

00:13:57,650 --> 00:14:03,350
care about to python which then took

00:13:59,690 --> 00:14:05,240
care of everything else so oh bummer i

00:14:03,350 --> 00:14:06,740
didn't hook up the sound so here's the

00:14:05,240 --> 00:14:08,960
the actual maiden flight so what i did

00:14:06,740 --> 00:14:10,640
is i had this theory that if I could

00:14:08,960 --> 00:14:12,790
take make the sensors work in concert

00:14:10,640 --> 00:14:17,510
and manipulate the servos and everything

00:14:12,790 --> 00:14:18,800
then we could go ahead and make a test

00:14:17,510 --> 00:14:21,500
platform and then just change the

00:14:18,800 --> 00:14:22,880
autopilot algorithm but as you saw that

00:14:21,500 --> 00:14:24,350
actually didn't work because I had a big

00:14:22,880 --> 00:14:27,050
center of gravity problem at that point

00:14:24,350 --> 00:14:31,370
I decided to just go ahead and shift to

00:14:27,050 --> 00:14:33,050
the blimp so now for a hardware to

00:14:31,370 --> 00:14:34,280
preempt some questions I'm sure a lot of

00:14:33,050 --> 00:14:36,380
people might have why didn't I use a

00:14:34,280 --> 00:14:37,340
Raspberry Pi the honest answer is that

00:14:36,380 --> 00:14:38,810
when i was putting this together i

00:14:37,340 --> 00:14:40,490
didn't really know enough about it and

00:14:38,810 --> 00:14:43,310
just after some googling i found this

00:14:40,490 --> 00:14:44,720
single board computer robe or darby 110

00:14:43,310 --> 00:14:46,970
which is excellent hardware but it

00:14:44,720 --> 00:14:48,920
wasn't very well documented but a few

00:14:46,970 --> 00:14:50,990
advantages it had had over the Raspberry

00:14:48,920 --> 00:14:52,820
Pi to begin with there's variable

00:14:50,990 --> 00:14:56,420
voltages I think it supports anywhere

00:14:52,820 --> 00:14:58,160
from six to 24 volts input and you can

00:14:56,420 --> 00:15:00,320
connect servos directly you can connect

00:14:58,160 --> 00:15:01,580
I to see directly and then here's just

00:15:00,320 --> 00:15:02,720
some of the you can see some of the

00:15:01,580 --> 00:15:04,330
other sensors that I use which already

00:15:02,720 --> 00:15:07,700
talked about but we have the

00:15:04,330 --> 00:15:10,100
accelerometer the compass we had which

00:15:07,700 --> 00:15:11,690
we use the accelerometer to find out

00:15:10,100 --> 00:15:14,690
what the pitch roll and yaw was the

00:15:11,690 --> 00:15:16,490
altimeter was a a temperature pressure

00:15:14,690 --> 00:15:19,520
and humidity sensor that could then

00:15:16,490 --> 00:15:22,280
calculate a relative altitude based on a

00:15:19,520 --> 00:15:27,850
zero is zero eyes altitude as soon as

00:15:22,280 --> 00:15:30,620
you started the application alright so

00:15:27,850 --> 00:15:32,360
the the most difficult part of this

00:15:30,620 --> 00:15:33,379
project was independently validating

00:15:32,360 --> 00:15:35,689
everything so

00:15:33,379 --> 00:15:37,519
with a blimp especially we have some

00:15:35,689 --> 00:15:38,660
it's very large it's very costly to

00:15:37,519 --> 00:15:41,449
inflate it so this is about a hundred

00:15:38,660 --> 00:15:43,279
dollars worth of helium so if we could

00:15:41,449 --> 00:15:45,169
validate everything independently and

00:15:43,279 --> 00:15:47,720
then bring them together that was a much

00:15:45,169 --> 00:15:49,729
better option better thing to do so on

00:15:47,720 --> 00:15:51,409
the top left that's an example of

00:15:49,729 --> 00:15:53,599
automated pitch control so you can see

00:15:51,409 --> 00:15:55,549
that as I'm manipulating the gondola

00:15:53,599 --> 00:15:57,470
it's the sensors are responding

00:15:55,549 --> 00:15:59,599
appropriately and telling the servos to

00:15:57,470 --> 00:16:01,159
manipulate the thrust vector and then

00:15:59,599 --> 00:16:03,439
the center image is just me actually

00:16:01,159 --> 00:16:05,179
doing that with a full-blown blimp so

00:16:03,439 --> 00:16:09,829
the rest of the videos top right I'm

00:16:05,179 --> 00:16:11,269
going left and right bottom left I am

00:16:09,829 --> 00:16:13,279
manipulating a servo to change the

00:16:11,269 --> 00:16:15,349
thrust vector and on the bottom right I

00:16:13,279 --> 00:16:21,579
am just changing the motor control to

00:16:15,349 --> 00:16:25,549
actually speed up or speed down so uh

00:16:21,579 --> 00:16:26,989
this demo was pretty wild I worked a lot

00:16:25,549 --> 00:16:28,699
so I didn't actually build any of the

00:16:26,989 --> 00:16:30,739
hardware here I didn't build the blimp I

00:16:28,699 --> 00:16:32,869
just did the software portion of it and

00:16:30,739 --> 00:16:35,539
I was working with a guy in San Diego

00:16:32,869 --> 00:16:37,189
from a company called a blimp and I went

00:16:35,539 --> 00:16:39,529
down with him and worked on this project

00:16:37,189 --> 00:16:41,149
together and of course testing right

00:16:39,529 --> 00:16:43,189
here what we actually filmed wasn't the

00:16:41,149 --> 00:16:44,569
best of conditions I got down there in

00:16:43,189 --> 00:16:46,220
this little small park and the guy told

00:16:44,569 --> 00:16:47,779
me like all right you got power lines

00:16:46,220 --> 00:16:52,009
here and you got a freeway they're so

00:16:47,779 --> 00:16:54,769
good luck so that was a little

00:16:52,009 --> 00:16:57,319
frightening because when we have this

00:16:54,769 --> 00:16:59,839
blimp which if the motors are on is just

00:16:57,319 --> 00:17:02,119
going to fly away and it's optimized for

00:16:59,839 --> 00:17:03,979
a prolonged air time so this is quite

00:17:02,119 --> 00:17:05,929
scary because if there was some sort of

00:17:03,979 --> 00:17:07,339
exception that I didn't account for the

00:17:05,929 --> 00:17:09,079
motors would just keep spinning and

00:17:07,339 --> 00:17:12,079
would just go off into the distance so I

00:17:09,079 --> 00:17:13,549
actually bit did add some safety

00:17:12,079 --> 00:17:15,110
mechanisms in there which actually

00:17:13,549 --> 00:17:17,480
proved to be very vital so for example

00:17:15,110 --> 00:17:19,220
if it doesn't receive communication for

00:17:17,480 --> 00:17:20,990
five seconds it'll go ahead and pitch

00:17:19,220 --> 00:17:22,490
down and then kill the motor so that

00:17:20,990 --> 00:17:24,919
actually proved to be invaluable because

00:17:22,490 --> 00:17:27,319
the very first time I did manual testing

00:17:24,919 --> 00:17:29,570
it was the other guy that flew it and I

00:17:27,319 --> 00:17:32,690
did in fact make a mistake long story

00:17:29,570 --> 00:17:34,639
short and he flew it up and then got a

00:17:32,690 --> 00:17:35,929
little excited and he ripped the Xbox

00:17:34,639 --> 00:17:38,629
control out and then so it just flew

00:17:35,929 --> 00:17:40,820
away so five seconds later it came back

00:17:38,629 --> 00:17:44,090
down though onto a roof had to go get

00:17:40,820 --> 00:17:45,799
that but don't worry it was good so the

00:17:44,090 --> 00:17:47,390
blimp itself is not actually lighter

00:17:45,799 --> 00:17:49,370
than air it's about 95

00:17:47,390 --> 00:17:52,430
buoyant so as you can see right here it

00:17:49,370 --> 00:17:54,110
does just rest on something but creating

00:17:52,430 --> 00:17:56,360
lift is very easy and as you're moving

00:17:54,110 --> 00:18:04,370
forward the blimp itself acts like a

00:17:56,360 --> 00:18:07,220
wing so some of the biggest pitfalls

00:18:04,370 --> 00:18:09,230
that I had so ironically the most

00:18:07,220 --> 00:18:11,180
challenging part of this project was

00:18:09,230 --> 00:18:13,400
getting linux installed onto the single

00:18:11,180 --> 00:18:14,930
board computer so there's limited RAM to

00:18:13,400 --> 00:18:16,730
begin with so you can't just install

00:18:14,930 --> 00:18:19,040
from a CD so there's two and a 56

00:18:16,730 --> 00:18:21,530
megabytes RAM and you also have to

00:18:19,040 --> 00:18:26,180
install a custom kernel because there's

00:18:21,530 --> 00:18:27,530
a specialized chipset here so if you do

00:18:26,180 --> 00:18:29,390
want to use this hardware I do have

00:18:27,530 --> 00:18:32,030
resources that i put on my blog so i

00:18:29,390 --> 00:18:33,500
actually have a working a bunt to 10 for

00:18:32,030 --> 00:18:35,980
image that you could just copy onto an

00:18:33,500 --> 00:18:38,360
SD card and get this working immediately

00:18:35,980 --> 00:18:41,540
another problem I had was the initial

00:18:38,360 --> 00:18:42,800
setup of boost for any Python

00:18:41,540 --> 00:18:44,960
programmers I would really recommend

00:18:42,800 --> 00:18:47,240
that you just do a hello world program

00:18:44,960 --> 00:18:48,830
with boost because as you do that it's

00:18:47,240 --> 00:18:50,120
really going to open some doors to some

00:18:48,830 --> 00:18:52,760
libraries that you wouldn't otherwise be

00:18:50,120 --> 00:18:55,070
able to use so if you know in your back

00:18:52,760 --> 00:18:57,680
pocket you can use any C++ library that

00:18:55,070 --> 00:18:59,600
you want it's very useful to know how to

00:18:57,680 --> 00:19:02,060
use boost and if you get that make file

00:18:59,600 --> 00:19:04,070
working once and in my case I ran into

00:19:02,060 --> 00:19:06,590
some issues because the version of

00:19:04,070 --> 00:19:08,720
Python on my path was different from the

00:19:06,590 --> 00:19:11,690
Python headers that I'd compiled against

00:19:08,720 --> 00:19:14,330
and it took me a long time to figure out

00:19:11,690 --> 00:19:18,020
that that problem was going on so

00:19:14,330 --> 00:19:20,150
another challenge here was that the the

00:19:18,020 --> 00:19:22,190
communication mechanism I'm using as I

00:19:20,150 --> 00:19:24,260
mentioned is an XP module so that's a

00:19:22,190 --> 00:19:26,270
serial connection so you're sending

00:19:24,260 --> 00:19:28,340
commands linearly and it's interpreting

00:19:26,270 --> 00:19:32,960
them linearly so not only is that

00:19:28,340 --> 00:19:35,960
somewhat slow but there's also not much

00:19:32,960 --> 00:19:37,820
throughput so the autopilot itself

00:19:35,960 --> 00:19:40,580
actually flew way better than I can

00:19:37,820 --> 00:19:42,320
because I mean the response time from a

00:19:40,580 --> 00:19:44,500
human is much lower than just onboard

00:19:42,320 --> 00:19:47,780
calculations and recalculations and

00:19:44,500 --> 00:19:50,150
creating a response so another big

00:19:47,780 --> 00:19:52,190
problem was properly reading the

00:19:50,150 --> 00:19:53,840
altimeter so as I mentioned the

00:19:52,190 --> 00:19:56,180
altimeter that I have was a pressure

00:19:53,840 --> 00:19:58,010
temperature and humidity sensor and so

00:19:56,180 --> 00:19:59,990
the problem there is that a gust of wind

00:19:58,010 --> 00:20:00,470
will then affect both the pressure and

00:19:59,990 --> 00:20:02,720
the temperature

00:20:00,470 --> 00:20:04,580
and the result is that the altitude

00:20:02,720 --> 00:20:06,200
reading will change so essentially if a

00:20:04,580 --> 00:20:08,000
gust of wind is going to it comes and

00:20:06,200 --> 00:20:09,409
hits the blimp it's going to think oh

00:20:08,000 --> 00:20:11,450
I'm at a different altitude so I need a

00:20:09,409 --> 00:20:13,370
pitch so a gust of wind would cause a

00:20:11,450 --> 00:20:15,650
thing to basically pitch at random which

00:20:13,370 --> 00:20:17,900
would then push the blink blimp back so

00:20:15,650 --> 00:20:20,120
i went ahead and switch to gps and

00:20:17,900 --> 00:20:22,940
apparently you have the same problem so

00:20:20,120 --> 00:20:24,710
the gps still gives fluctuating readings

00:20:22,940 --> 00:20:26,080
for altitude which would then cause this

00:20:24,710 --> 00:20:29,630
thing to pitch up and down at random so

00:20:26,080 --> 00:20:31,640
i guess with with gps satellites it's

00:20:29,630 --> 00:20:33,169
easy to triangulate the x and y because

00:20:31,640 --> 00:20:35,360
satellites are spread apart but i guess

00:20:33,169 --> 00:20:36,679
the z axis is a little more challenging

00:20:35,360 --> 00:20:39,470
because you can't do that same kind of

00:20:36,679 --> 00:20:41,320
triangulation so I learned about that so

00:20:39,470 --> 00:20:44,330
I haven't entirely solved that problem

00:20:41,320 --> 00:20:47,330
and then beyond that it's just a matter

00:20:44,330 --> 00:20:48,799
of accounting for the wind because any

00:20:47,330 --> 00:20:50,780
problem that you have like the the

00:20:48,799 --> 00:20:52,130
pitching problem that I mentioned or the

00:20:50,780 --> 00:20:54,289
yelling problem that i mentioned

00:20:52,130 --> 00:20:56,330
initially where it would constantly like

00:20:54,289 --> 00:20:58,010
i started out by using position so it

00:20:56,330 --> 00:20:59,450
would constantly overshoot the young

00:20:58,010 --> 00:21:02,240
because of an absence of any sort of

00:20:59,450 --> 00:21:03,710
counteracting force so when you bring

00:21:02,240 --> 00:21:05,419
the wind into the picture that's going

00:21:03,710 --> 00:21:09,080
to exacerbate any flaws that you

00:21:05,419 --> 00:21:14,360
actually have so those were some of the

00:21:09,080 --> 00:21:15,530
biggest pitfalls all right so I do need

00:21:14,360 --> 00:21:18,440
to go ahead and give some credit where

00:21:15,530 --> 00:21:19,850
credit is due here so as I said I worked

00:21:18,440 --> 00:21:22,220
with a guy named Larry Fleming from a

00:21:19,850 --> 00:21:23,990
blimp com he was a hardware guy so it

00:21:22,220 --> 00:21:26,570
was really luxurious to have him as part

00:21:23,990 --> 00:21:29,150
of this Roger who was one of my

00:21:26,570 --> 00:21:30,260
co-workers and he was amazing with Linux

00:21:29,150 --> 00:21:32,270
he was the only reason I was able to get

00:21:30,260 --> 00:21:34,490
it installed on the board and then I

00:21:32,270 --> 00:21:40,909
also got a little help from a guy from

00:21:34,490 --> 00:21:43,340
Eric am calm so if you want to get any

00:21:40,909 --> 00:21:45,080
of these resources I have all of the

00:21:43,340 --> 00:21:47,270
parts list so everything that I used

00:21:45,080 --> 00:21:51,370
I've sample code in Python for every

00:21:47,270 --> 00:21:53,990
single module and I have I have like the

00:21:51,370 --> 00:21:55,309
laser-cut design for the acrylic piece

00:21:53,990 --> 00:21:56,480
that I used to mouth the board and all

00:21:55,309 --> 00:21:58,549
the screws and everything associated

00:21:56,480 --> 00:22:00,590
with that the working row board image

00:21:58,549 --> 00:22:03,470
the turning a bun to 10 4 if you want to

00:22:00,590 --> 00:22:04,909
contact me there's my email and once

00:22:03,470 --> 00:22:07,880
again we have the blimp after party

00:22:04,909 --> 00:22:11,960
across the street at the West End so you

00:22:07,880 --> 00:22:13,690
can come find us there so that that

00:22:11,960 --> 00:22:16,980
actually brings us to a close

00:22:13,690 --> 00:22:16,980
if I can take any questions

00:22:29,690 --> 00:22:35,400
yeah if you were moving this to like an

00:22:33,300 --> 00:22:37,290
inside area where you didn't have gps if

00:22:35,400 --> 00:22:39,030
you kind of thought about how you could

00:22:37,290 --> 00:22:41,940
get like a 3d representation of its

00:22:39,030 --> 00:22:43,710
location on an internal space so there

00:22:41,940 --> 00:22:45,390
are systems to solve that problem and I

00:22:43,710 --> 00:22:46,950
don't know much about them but I do know

00:22:45,390 --> 00:22:48,750
that they're very expensive so you have

00:22:46,950 --> 00:22:51,180
something that like basically represents

00:22:48,750 --> 00:22:52,590
a GPS so I really couldn't answer that

00:22:51,180 --> 00:22:54,390
with confidence but you have something

00:22:52,590 --> 00:22:58,290
that you mount on a ceiling and then you

00:22:54,390 --> 00:23:00,060
can triangulate a position but yeah I

00:22:58,290 --> 00:23:02,310
mean that's that's kind of a problem you

00:23:00,060 --> 00:23:03,210
can only use the GPS outdoors and even

00:23:02,310 --> 00:23:05,960
then it takes a little while to get a

00:23:03,210 --> 00:23:08,070
fix go thank you good to me thank you

00:23:05,960 --> 00:23:10,590
couldn't talk my name is Otto von

00:23:08,070 --> 00:23:14,460
Bismarck I want to salute you for your

00:23:10,590 --> 00:23:16,200
excellent work here thank you thank you

00:23:14,460 --> 00:23:18,750
yeah it's the only question I have is

00:23:16,200 --> 00:23:20,790
why didn't you pick helium why did you

00:23:18,750 --> 00:23:24,210
do Paquita money did you pick hydrogen

00:23:20,790 --> 00:23:26,790
that is the basis uh so I actually well

00:23:24,210 --> 00:23:28,920
the answers that I did but I thought

00:23:26,790 --> 00:23:31,290
people might not like it if I had this

00:23:28,920 --> 00:23:33,870
hydrogen-filled blimp in here and of

00:23:31,290 --> 00:23:35,310
course my company has graciously you

00:23:33,870 --> 00:23:37,050
know sponsored my efforts at this point

00:23:35,310 --> 00:23:38,430
and they are actually paying for the

00:23:37,050 --> 00:23:40,770
helium it were just me i would use

00:23:38,430 --> 00:23:42,450
hydrogen and i actually did take the

00:23:40,770 --> 00:23:44,700
time to manufacture my own hydrogen

00:23:42,450 --> 00:23:47,370
using electrolysis but i ended up that

00:23:44,700 --> 00:23:48,990
was not very easy at all so the math is

00:23:47,370 --> 00:23:50,490
basically that one amp power will

00:23:48,990 --> 00:23:52,980
generate point for one liters of

00:23:50,490 --> 00:23:54,240
hydrogen so that's the first problem is

00:23:52,980 --> 00:23:55,680
that is not very efficient and then

00:23:54,240 --> 00:23:57,360
beyond that to actually get that

00:23:55,680 --> 00:23:58,830
amperage with electrolysis is very

00:23:57,360 --> 00:24:00,720
difficult so I actually made this little

00:23:58,830 --> 00:24:03,690
contraption with carbon graphite

00:24:00,720 --> 00:24:05,460
electrodes I put potassium hydroxide in

00:24:03,690 --> 00:24:06,980
the water that the graphite made it so

00:24:05,460 --> 00:24:09,960
the metal wasn't part of the reaction

00:24:06,980 --> 00:24:11,520
but then the the resistance of the water

00:24:09,960 --> 00:24:13,830
was still very very high even with a

00:24:11,520 --> 00:24:15,150
really large power supply so i could

00:24:13,830 --> 00:24:17,520
only generate a small amount of hydrogen

00:24:15,150 --> 00:24:20,010
and then once you got to that point you

00:24:17,520 --> 00:24:21,600
had a gas that wasn't pressurized so

00:24:20,010 --> 00:24:23,010
it's very difficult to manipulate so at

00:24:21,600 --> 00:24:26,210
that point i just had some hydrogen I

00:24:23,010 --> 00:24:31,220
blew it up and burned my finger and

00:24:26,210 --> 00:24:31,220
that's what I did with that what's that

00:24:32,529 --> 00:24:38,299
okay uh so following off of what you

00:24:36,770 --> 00:24:39,919
said a little bit do you have any tips

00:24:38,299 --> 00:24:45,909
on how to convince your company to

00:24:39,919 --> 00:24:49,039
purchase one of these uh I don't know um

00:24:45,909 --> 00:24:50,570
no well here the story behind this is I

00:24:49,039 --> 00:24:53,299
actually started this project before I

00:24:50,570 --> 00:24:54,950
join my company so my initial goal was

00:24:53,299 --> 00:24:56,289
to do aerial photography so I basically

00:24:54,950 --> 00:24:58,279
wanted to build a Django application

00:24:56,289 --> 00:25:00,770
that has a bunch of pictures and

00:24:58,279 --> 00:25:02,270
automated when the like building a

00:25:00,770 --> 00:25:03,799
calendar view based on when the picture

00:25:02,270 --> 00:25:05,390
was taken extracted from the exit data

00:25:03,799 --> 00:25:06,919
and I want to just go to public places

00:25:05,390 --> 00:25:08,090
and take pictures and have the domain

00:25:06,919 --> 00:25:09,740
name on the blimp it sell those and

00:25:08,090 --> 00:25:11,000
whatever but then I stopped working once

00:25:09,740 --> 00:25:13,640
I got to my company because i had to do

00:25:11,000 --> 00:25:15,289
real work so if you if you get app icon

00:25:13,640 --> 00:25:17,450
talk or something claiming to have a

00:25:15,289 --> 00:25:21,500
blimp then they'll help you so that's

00:25:17,450 --> 00:25:23,630
that's a thought sounds great yeah i had

00:25:21,500 --> 00:25:26,330
a similar question to the first one

00:25:23,630 --> 00:25:31,460
which is that you know i guess do you

00:25:26,330 --> 00:25:34,130
know if the cell tower location signal

00:25:31,460 --> 00:25:36,590
contains its height and if it does could

00:25:34,130 --> 00:25:38,600
do triangulate from that so so you're

00:25:36,590 --> 00:25:40,220
saying basically get a better gps signal

00:25:38,600 --> 00:25:41,600
by using doing the same thing that cell

00:25:40,220 --> 00:25:44,960
phones do and try and get your height

00:25:41,600 --> 00:25:46,100
data with cellular you know triangular

00:25:44,960 --> 00:25:48,350
yeah that would certainly be a better

00:25:46,100 --> 00:25:51,710
way to do it there definitely was a cost

00:25:48,350 --> 00:25:52,549
of time in getting this done so yeah

00:25:51,710 --> 00:25:55,600
that would certainly be a better

00:25:52,549 --> 00:26:00,950
solution but i did not do it in short

00:25:55,600 --> 00:26:03,320
yeah i was wondering if you found the

00:26:00,950 --> 00:26:04,730
solution to the problem of the wind and

00:26:03,320 --> 00:26:07,370
the pressure changing i was thinking

00:26:04,730 --> 00:26:09,559
maybe just capping like how fast you

00:26:07,370 --> 00:26:11,390
would expect it to change and then

00:26:09,559 --> 00:26:12,740
waiting for it to so there I mean

00:26:11,390 --> 00:26:14,929
there's a few different things to do

00:26:12,740 --> 00:26:17,450
with that I haven't exactly figured out

00:26:14,929 --> 00:26:18,710
what to try next I the point is I

00:26:17,450 --> 00:26:20,270
haven't really been able to test it yet

00:26:18,710 --> 00:26:22,220
i've really actually been doing a lot of

00:26:20,270 --> 00:26:24,320
preparation for just coming here but a

00:26:22,220 --> 00:26:27,169
few ideas I had were too for instance

00:26:24,320 --> 00:26:28,610
take the average altitude reading over

00:26:27,169 --> 00:26:31,070
the past second and then use that

00:26:28,610 --> 00:26:33,049
another example would be to go ahead and

00:26:31,070 --> 00:26:35,600
assume that I can maintain an altitude

00:26:33,049 --> 00:26:37,220
like so once i reach it then stop stop

00:26:35,600 --> 00:26:39,980
reading for a little bit until i change

00:26:37,220 --> 00:26:41,330
the target altitude again so the few

00:26:39,980 --> 00:26:41,910
ideas that I'd like to play with I just

00:26:41,330 --> 00:26:44,730
haven't gone

00:26:41,910 --> 00:26:48,570
to actually test it yet thank you mm-hmm

00:26:44,730 --> 00:26:51,590
I awesome talk um do you have any

00:26:48,570 --> 00:26:54,570
experience with any other like drone

00:26:51,590 --> 00:26:56,100
platforms like somebody say 3d robotics

00:26:54,570 --> 00:26:59,550
autopilot systems or anything like that

00:26:56,100 --> 00:27:01,620
did you choose to go with like a like a

00:26:59,550 --> 00:27:03,990
you know full annex computer instead of

00:27:01,620 --> 00:27:08,370
using that for a specific reason yeah I

00:27:03,990 --> 00:27:10,980
guess I mean part of I don't know enough

00:27:08,370 --> 00:27:12,450
about it like i know i mean the short

00:27:10,980 --> 00:27:14,820
answer is that no i didn't do that i

00:27:12,450 --> 00:27:16,080
didn't really look into it much I kind

00:27:14,820 --> 00:27:17,400
of felt confident and just writing my

00:27:16,080 --> 00:27:19,320
own but for instance I know like

00:27:17,400 --> 00:27:21,360
typically with these auto pilot projects

00:27:19,320 --> 00:27:23,010
you would use an Arduino but I know like

00:27:21,360 --> 00:27:24,540
an hour I don't know much about it but I

00:27:23,010 --> 00:27:25,920
know there are limitations with them so

00:27:24,540 --> 00:27:27,690
I know like Arduino is for instance

00:27:25,920 --> 00:27:29,400
don't have a lot of RAM so you actually

00:27:27,690 --> 00:27:31,470
have to be conscious of that while

00:27:29,400 --> 00:27:32,820
you're coding whereas here with my

00:27:31,470 --> 00:27:33,960
system I really don't even have to worry

00:27:32,820 --> 00:27:36,180
about that because i'm actually just

00:27:33,960 --> 00:27:42,390
running a full-blown version of ubuntu

00:27:36,180 --> 00:27:44,100
great awesome things thanks um first off

00:27:42,390 --> 00:27:46,050
is pretty sweet I'm kind of sad it

00:27:44,100 --> 00:27:48,210
doesn't drive in here but hey what's

00:27:46,050 --> 00:27:50,010
that I'm kind of sad isn't driving here

00:27:48,210 --> 00:27:51,720
that'd be pretty oh yeah I wanted to put

00:27:50,010 --> 00:27:53,490
a saddle on top and just you know ride

00:27:51,720 --> 00:27:56,160
it around but it only has an eight pound

00:27:53,490 --> 00:27:58,230
payload in this case so I'm a little too

00:27:56,160 --> 00:27:59,880
heavy what I wasn't asked is how

00:27:58,230 --> 00:28:01,260
optimistic would you be about trying to

00:27:59,880 --> 00:28:04,320
make something like this run off an

00:28:01,260 --> 00:28:05,850
android phone uh yeah so that actually

00:28:04,320 --> 00:28:07,860
was a fairly common question with the

00:28:05,850 --> 00:28:09,540
people that I was working with like

00:28:07,860 --> 00:28:11,730
honestly I don't know enough about how

00:28:09,540 --> 00:28:13,530
to how to communicate between the phone

00:28:11,730 --> 00:28:15,150
and the controller or I don't know how

00:28:13,530 --> 00:28:17,280
to like what the best ways to go about

00:28:15,150 --> 00:28:19,080
doing that and in this case I just got

00:28:17,280 --> 00:28:21,870
these XP modules which I think total

00:28:19,080 --> 00:28:24,000
cost like seventy dollars so that was

00:28:21,870 --> 00:28:25,170
just the choice i went with hey it's

00:28:24,000 --> 00:28:30,540
nice if your phone doesn't go flying

00:28:25,170 --> 00:28:34,110
away on you yeah that was a great talk

00:28:30,540 --> 00:28:36,570
Alex a couple of questions what was the

00:28:34,110 --> 00:28:39,480
total cost and how long did it actually

00:28:36,570 --> 00:28:41,670
take you to do this okay yeah so that's

00:28:39,480 --> 00:28:46,020
a good question the cost it's okay so

00:28:41,670 --> 00:28:49,020
the cost of building it was much so ok

00:28:46,020 --> 00:28:51,300
so the blimp itself is several thousand

00:28:49,020 --> 00:28:53,370
dollars you can get these from I got it

00:28:51,300 --> 00:28:55,110
from a blimp com basically depending on

00:28:53,370 --> 00:28:56,700
the size that's going to affect how

00:28:55,110 --> 00:28:58,620
but the magnitude is several thousand

00:28:56,700 --> 00:29:01,020
dollars the hardware that I bought all

00:28:58,620 --> 00:29:02,400
costs less than a thousand which is

00:29:01,020 --> 00:29:04,049
actually much cheaper than if you were

00:29:02,400 --> 00:29:05,549
to go with like an analog solution so

00:29:04,049 --> 00:29:07,830
like I know there are some systems to

00:29:05,549 --> 00:29:09,420
like record video aerial video or

00:29:07,830 --> 00:29:10,650
whatever with purely analog systems I

00:29:09,420 --> 00:29:12,540
think there's a power draw problems as

00:29:10,650 --> 00:29:13,950
well or they draw more power but short

00:29:12,540 --> 00:29:17,100
answer yeah about less than a thousand

00:29:13,950 --> 00:29:19,230
dollars the helium itself in total about

00:29:17,100 --> 00:29:22,370
two hundred fifty dollars for three and

00:29:19,230 --> 00:29:27,360
a cubic feet which fills this up twice

00:29:22,370 --> 00:29:28,950
so yeah oh I'm sorry I started this

00:29:27,360 --> 00:29:30,840
project over a year ago put it on hold

00:29:28,950 --> 00:29:33,720
for a while and then for the past few

00:29:30,840 --> 00:29:35,669
months I've been spending I mean a bit

00:29:33,720 --> 00:29:40,620
short it probably about three months

00:29:35,669 --> 00:29:42,270
total like seriously working on it okay

00:29:40,620 --> 00:29:44,600
I guess I'm out of time so thank you

00:29:42,270 --> 00:29:44,600
very much

00:29:47,580 --> 00:29:54,440

YouTube URL: https://www.youtube.com/watch?v=RntMu5DqfSo


