Title: Amjith Ramanujam: Introduction to Docker - PyCon 2014
Publication date: 2014-04-24
Playlist: PyCon 2014
Description: 
	Speaker: Amjith Ramanujam

Docker is a tool for sandboxing entire application environments using Linux containers. Docker's feature set includes versioning, sharing etc. They are light-weight and fast, you can recreate a deployment environment in development or push your development containers to production. Imagine never having to worry about fragmentation of servers or syncing the versions of different libraries.

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:00,000 --> 00:00:08,010
it who will be doing an intro to dokur

00:00:03,060 --> 00:00:17,670
talk please give him a hand and let's

00:00:08,010 --> 00:00:20,039
get it started thank you hello everyone

00:00:17,670 --> 00:00:22,890
welcome to the introductory talk on

00:00:20,039 --> 00:00:25,680
docker as Carlos mention my name is I'm

00:00:22,890 --> 00:00:28,170
Jeff I go by I'm jet are on Twitter but

00:00:25,680 --> 00:00:31,050
so I work for a company called New Relic

00:00:28,170 --> 00:00:32,610
and we use darker in many internal

00:00:31,050 --> 00:00:34,350
projects i'm going to explain a very

00:00:32,610 --> 00:00:36,450
specific example where we use it and how

00:00:34,350 --> 00:00:40,770
we solve this particularly hairy problem

00:00:36,450 --> 00:00:43,260
but more on that ladder i want to set

00:00:40,770 --> 00:00:45,480
the stage for why do we want to learn

00:00:43,260 --> 00:00:48,390
about darker why is it important why is

00:00:45,480 --> 00:00:50,579
worth your time so let's get started by

00:00:48,390 --> 00:00:52,230
explaining a typical web stack it you

00:00:50,579 --> 00:00:54,180
know you have your front end server

00:00:52,230 --> 00:00:56,879
apache and genetics and your back-end

00:00:54,180 --> 00:00:59,820
server like unicorn you whiskey or mod

00:00:56,879 --> 00:01:02,520
wsgi and then you run jingle on top of

00:00:59,820 --> 00:01:03,690
that it's not it doesn't stop right

00:01:02,520 --> 00:01:05,400
there I mean you have your database

00:01:03,690 --> 00:01:06,930
which could be postcards my sequel and

00:01:05,400 --> 00:01:10,439
then you're caching layer and your

00:01:06,930 --> 00:01:11,640
background task manager and you know if

00:01:10,439 --> 00:01:13,560
you are in your attic customer then you

00:01:11,640 --> 00:01:17,220
have new I like to monitor all of these

00:01:13,560 --> 00:01:19,290
different pieces if you have if you

00:01:17,220 --> 00:01:20,939
happen to be a full stack developer you

00:01:19,290 --> 00:01:24,210
could be modifying any of these layers

00:01:20,939 --> 00:01:25,830
and come deployment time you check

00:01:24,210 --> 00:01:27,330
everything you run your unit tests

00:01:25,830 --> 00:01:28,680
everything works great you run it on

00:01:27,330 --> 00:01:30,829
your local machine to make sure that you

00:01:28,680 --> 00:01:33,119
know you haven't broken anything and

00:01:30,829 --> 00:01:34,500
everything looks great you look feel

00:01:33,119 --> 00:01:36,659
confident and then you start rolling out

00:01:34,500 --> 00:01:37,979
to deploy half an hour later you find

00:01:36,659 --> 00:01:40,259
out that none of your customers are able

00:01:37,979 --> 00:01:41,939
to pay so you hurriedly roll everything

00:01:40,259 --> 00:01:44,640
back and then you know try to start

00:01:41,939 --> 00:01:46,619
debugging and that can be anywhere from

00:01:44,640 --> 00:01:48,329
looking at log files to try to reproduce

00:01:46,619 --> 00:01:50,579
your production environment by you know

00:01:48,329 --> 00:01:53,310
exactly matching a minor version of your

00:01:50,579 --> 00:01:56,700
engine x2 Django and and trying to

00:01:53,310 --> 00:01:58,020
recreate the problem and you know like

00:01:56,700 --> 00:01:59,159
half a day later you'll find out that

00:01:58,020 --> 00:02:00,090
there's an environment variable that you

00:01:59,159 --> 00:02:02,610
forgot to set in the production

00:02:00,090 --> 00:02:05,640
environment does that sound familiar to

00:02:02,610 --> 00:02:07,280
anyone at all oh good i'm not the only

00:02:05,640 --> 00:02:09,780
one

00:02:07,280 --> 00:02:12,000
so doctor is supposed to solve this

00:02:09,780 --> 00:02:14,040
problem in a very unique way the way it

00:02:12,000 --> 00:02:15,900
handles this is your development

00:02:14,040 --> 00:02:17,160
environment will be exactly the same as

00:02:15,900 --> 00:02:18,600
your production environment the reason

00:02:17,160 --> 00:02:20,220
for that is because whatever you develop

00:02:18,600 --> 00:02:21,660
in will be the one that actually gets

00:02:20,220 --> 00:02:23,540
deployed in production and I'm going to

00:02:21,660 --> 00:02:27,090
show you how that how you could do that

00:02:23,540 --> 00:02:29,550
and and we'll look at a lot of different

00:02:27,090 --> 00:02:32,310
features of dr. but before we actually

00:02:29,550 --> 00:02:33,570
get started or Before we jump into that

00:02:32,310 --> 00:02:36,990
I want to start by answering a very

00:02:33,570 --> 00:02:38,340
simple question what is darker since

00:02:36,990 --> 00:02:39,900
this is a technology conference I

00:02:38,340 --> 00:02:42,060
presume no one's here thinking it's

00:02:39,900 --> 00:02:47,400
about Dockers the trousers company right

00:02:42,060 --> 00:02:49,830
a lot of disappointed faces well you put

00:02:47,400 --> 00:02:51,180
them one leg at a time and unless you're

00:02:49,830 --> 00:02:55,800
a Superman please wear the underwear

00:02:51,180 --> 00:02:59,040
inside and yeah I'm just I'm just

00:02:55,800 --> 00:03:02,459
kidding a darker is an internal project

00:02:59,040 --> 00:03:05,459
that was started by dark cloud in 2013

00:03:02,459 --> 00:03:07,500
so it's a fairly young project but it

00:03:05,459 --> 00:03:09,300
has a very active community around it in

00:03:07,500 --> 00:03:10,950
fact the project was so wildly

00:03:09,300 --> 00:03:13,470
successful the company actually pivoted

00:03:10,950 --> 00:03:16,190
and changed their name to darker ink and

00:03:13,470 --> 00:03:18,480
it's a project that's written in go and

00:03:16,190 --> 00:03:20,430
as I mentioned it has a very active

00:03:18,480 --> 00:03:24,120
community which is very welcoming and

00:03:20,430 --> 00:03:25,470
helpful this is a definition taken

00:03:24,120 --> 00:03:26,970
straight out of dockers website that

00:03:25,470 --> 00:03:28,470
says doctor is an open source engine

00:03:26,970 --> 00:03:31,100
that automates deployment of any

00:03:28,470 --> 00:03:33,420
application as a lightweight portable

00:03:31,100 --> 00:03:35,910
self-sufficient container that will run

00:03:33,420 --> 00:03:37,500
virtually anywhere when they said

00:03:35,910 --> 00:03:43,380
virtually anywhere they mean in Linux

00:03:37,500 --> 00:03:45,120
machines and and to make it even

00:03:43,380 --> 00:03:48,090
complicated in modern Linux machines

00:03:45,120 --> 00:03:49,799
with a recent colonel but apart from

00:03:48,090 --> 00:03:51,329
that the definition is actually pretty

00:03:49,799 --> 00:03:52,970
good actually it's a it's a fairly

00:03:51,329 --> 00:03:55,890
accurate description of what doctor does

00:03:52,970 --> 00:03:58,380
if you're familiar with chroot or bsd

00:03:55,890 --> 00:03:59,660
jails and or solara zones then doctor is

00:03:58,380 --> 00:04:02,280
a similar technology which provides

00:03:59,660 --> 00:04:04,079
sandboxing for a process you it allows

00:04:02,280 --> 00:04:07,049
you to run your process in a little

00:04:04,079 --> 00:04:09,450
sandbox that doesn't you know interact

00:04:07,049 --> 00:04:14,239
with outside of its container and and

00:04:09,450 --> 00:04:17,039
other things so for this particular

00:04:14,239 --> 00:04:18,479
sandboxing it uses linux containers and

00:04:17,039 --> 00:04:20,160
linux containers have been in the linux

00:04:18,479 --> 00:04:20,670
mainline kernel for about five years i

00:04:20,160 --> 00:04:23,100
think

00:04:20,670 --> 00:04:24,960
so it's a very stable technology that

00:04:23,100 --> 00:04:27,090
they're using and dark arisen is a

00:04:24,960 --> 00:04:28,350
interface on top of that that makes easy

00:04:27,090 --> 00:04:30,600
for you to interact with these Linux

00:04:28,350 --> 00:04:32,910
containers and in addition to just you

00:04:30,600 --> 00:04:34,290
know being a sitting on top of Linux

00:04:32,910 --> 00:04:35,610
containers it also provides some

00:04:34,290 --> 00:04:37,860
additional features that makes it easy

00:04:35,610 --> 00:04:39,750
to use which is a union file system

00:04:37,860 --> 00:04:42,630
which we'll see what it means in a

00:04:39,750 --> 00:04:45,060
little bit and you know a nice

00:04:42,630 --> 00:04:47,820
versioning system kind of like get but

00:04:45,060 --> 00:04:49,320
not quite as powerful and a REST API

00:04:47,820 --> 00:04:54,060
that allows you to interact with the

00:04:49,320 --> 00:04:55,740
doctor to contrast this with a with a

00:04:54,060 --> 00:04:56,730
virtual machine you have your bare metal

00:04:55,740 --> 00:04:59,340
on which you run your host operating

00:04:56,730 --> 00:05:00,960
system and you know you run vmware or

00:04:59,340 --> 00:05:02,730
virtual box which is your hypervisor

00:05:00,960 --> 00:05:04,230
layer and then you install a full guest

00:05:02,730 --> 00:05:05,940
operating system inside of that which is

00:05:04,230 --> 00:05:08,490
you know bin to or send toss or anything

00:05:05,940 --> 00:05:10,920
and you know but multiple libraries and

00:05:08,490 --> 00:05:12,840
Django and and then you run your app

00:05:10,920 --> 00:05:14,460
inside of that now if you want to create

00:05:12,840 --> 00:05:15,690
another one of these instances in a

00:05:14,460 --> 00:05:16,920
different box then you have to go

00:05:15,690 --> 00:05:18,300
through the same process even in the

00:05:16,920 --> 00:05:19,800
same box you have to go through the same

00:05:18,300 --> 00:05:21,360
process of actually installing the guest

00:05:19,800 --> 00:05:22,980
operating system or you know launching a

00:05:21,360 --> 00:05:26,040
whole another snapshot of your existing

00:05:22,980 --> 00:05:28,920
vm which can be quite expensive and kind

00:05:26,040 --> 00:05:30,810
of resource hungry comparing that to a

00:05:28,920 --> 00:05:32,640
docker container you have your bare

00:05:30,810 --> 00:05:35,760
metal and your host our operating system

00:05:32,640 --> 00:05:37,680
which is Linux in this case and if you

00:05:35,760 --> 00:05:39,960
install darker then docker sits as a

00:05:37,680 --> 00:05:42,300
demon that runs on your machine and any

00:05:39,960 --> 00:05:44,430
time you launch a container it gets

00:05:42,300 --> 00:05:46,320
launched from an image we'll get into

00:05:44,430 --> 00:05:48,420
the terminology definition of what an

00:05:46,320 --> 00:05:49,830
images and in just a minute but it

00:05:48,420 --> 00:05:51,890
launches the image and multiple

00:05:49,830 --> 00:05:54,810
containers can share the same library

00:05:51,890 --> 00:05:55,800
because it has a read-only layer as soon

00:05:54,810 --> 00:05:58,670
as one of these containers starts

00:05:55,800 --> 00:06:01,410
modifying that library then it creates a

00:05:58,670 --> 00:06:02,940
separate snapshot of that and only the

00:06:01,410 --> 00:06:04,890
diffs are the deltas are stored so

00:06:02,940 --> 00:06:07,260
that's the advantage of having the union

00:06:04,890 --> 00:06:11,960
file system which allows you to do these

00:06:07,260 --> 00:06:14,280
copy-on-write type type operation so

00:06:11,960 --> 00:06:15,840
containers are very lightweight because

00:06:14,280 --> 00:06:17,880
they share the kernel with the

00:06:15,840 --> 00:06:19,440
underlying operating system it provides

00:06:17,880 --> 00:06:21,540
you the isolated instance that you'll

00:06:19,440 --> 00:06:24,120
get from running an actual virtual

00:06:21,540 --> 00:06:25,650
machine because from inside of a

00:06:24,120 --> 00:06:27,630
container it looks as if you're inside a

00:06:25,650 --> 00:06:29,160
vm but outside of a container it looks

00:06:27,630 --> 00:06:30,720
as if you're just another process it

00:06:29,160 --> 00:06:34,000
just you know it's really that simple

00:06:30,720 --> 00:06:36,400
and a vm even the strip

00:06:34,000 --> 00:06:37,720
down bare minimum linux machine takes at

00:06:36,400 --> 00:06:40,030
least five seconds if you're really

00:06:37,720 --> 00:06:42,370
lucky but a container can start up in

00:06:40,030 --> 00:06:46,780
under a second sometimes in just

00:06:42,370 --> 00:06:50,050
milliseconds so so that's the advantage

00:06:46,780 --> 00:06:52,750
of darker now I'm not going to go into

00:06:50,050 --> 00:06:53,740
the to the steps of how to get darker

00:06:52,750 --> 00:06:55,450
installed on your machine and get

00:06:53,740 --> 00:06:57,640
started because they do a very good job

00:06:55,450 --> 00:06:59,710
on the documentation and dockers website

00:06:57,640 --> 00:07:01,720
but I just want to briefly touch how I

00:06:59,710 --> 00:07:03,160
run docker on OS X because I keep

00:07:01,720 --> 00:07:05,830
talking about it it uses linux

00:07:03,160 --> 00:07:09,070
containers if you are inland on a Linux

00:07:05,830 --> 00:07:11,620
machine then you when you install doctor

00:07:09,070 --> 00:07:13,300
you get two components the Dockers demon

00:07:11,620 --> 00:07:15,130
component and a doctor's plan component

00:07:13,300 --> 00:07:17,140
and it runs on your host operating

00:07:15,130 --> 00:07:19,300
system and your client talks to the

00:07:17,140 --> 00:07:20,919
doctor a demon and you run you get to

00:07:19,300 --> 00:07:23,350
you know launch containers and create

00:07:20,919 --> 00:07:26,260
images and so on if you are on OSX like

00:07:23,350 --> 00:07:28,840
mine then there is a project called boot

00:07:26,260 --> 00:07:33,130
to docker which is a very minimal linux

00:07:28,840 --> 00:07:34,960
machine like 25 megabytes that allows

00:07:33,130 --> 00:07:36,970
you to run docker I just have just the

00:07:34,960 --> 00:07:39,880
bare essentials to get darker up and

00:07:36,970 --> 00:07:41,860
running and there is OSX client so what

00:07:39,880 --> 00:07:43,540
I do is booted are automatically

00:07:41,860 --> 00:07:44,890
launches itself on a virtual box in

00:07:43,540 --> 00:07:46,660
which it runs its linux and then a

00:07:44,890 --> 00:07:48,850
darker demon runs inside of that so all

00:07:46,660 --> 00:07:50,140
the stuff that I'm about to show you

00:07:48,850 --> 00:07:54,580
will be happening in that particular

00:07:50,140 --> 00:07:55,930
setup so i mentioned so i'm going to

00:07:54,580 --> 00:07:56,890
introduce a couple of terminologies here

00:07:55,930 --> 00:07:59,979
and then we'll we'll introduce

00:07:56,890 --> 00:08:01,750
terminology as we keep going a doc so i

00:07:59,979 --> 00:08:02,950
mentioned doctor has two components the

00:08:01,750 --> 00:08:06,700
server component and the client

00:08:02,950 --> 00:08:08,890
component and the the server component

00:08:06,700 --> 00:08:11,440
which is the demon has to run on a linux

00:08:08,890 --> 00:08:13,510
machine and it talks to clients in two

00:08:11,440 --> 00:08:14,890
ways one is using a unix socket if the

00:08:13,510 --> 00:08:17,050
client happens to be in the same machine

00:08:14,890 --> 00:08:19,780
or it through as TCP socket if the

00:08:17,050 --> 00:08:21,250
client is on a different machine from

00:08:19,780 --> 00:08:23,020
different machines you can talk to it

00:08:21,250 --> 00:08:26,500
through the TCP socket there are clients

00:08:23,020 --> 00:08:28,720
available for linux boxes or OSX and you

00:08:26,500 --> 00:08:31,210
can use them to to talk to a demon

00:08:28,720 --> 00:08:36,479
that's running in a in a separate linux

00:08:31,210 --> 00:08:36,479
machine ok it's time for a quick demo

00:08:37,320 --> 00:08:42,580
let's look at what what i have here

00:08:40,089 --> 00:08:44,140
installed so i have a client version

00:08:42,580 --> 00:08:47,440
installed anna have the darker server

00:08:44,140 --> 00:08:50,410
version installed and i want to

00:08:47,440 --> 00:08:51,760
get started by using a particular image

00:08:50,410 --> 00:08:54,430
and I can start playing around with it

00:08:51,760 --> 00:08:55,990
now if I'm pulling so what i'm doing

00:08:54,430 --> 00:08:58,360
here is i'm pulling an image from the

00:08:55,990 --> 00:09:00,520
registry and again i'm throwing out some

00:08:58,360 --> 00:09:02,190
terminology so i'm going to get back to

00:09:00,520 --> 00:09:06,330
my slide and explain what those are an

00:09:02,190 --> 00:09:08,710
image is a read-only snapshot of your

00:09:06,330 --> 00:09:11,260
it's a read-only snapshot and a

00:09:08,710 --> 00:09:14,140
container is a instantiation of this

00:09:11,260 --> 00:09:16,810
image what this means is say you you're

00:09:14,140 --> 00:09:18,880
writing your master's thesis you spend

00:09:16,810 --> 00:09:20,710
two years you put together an awesome

00:09:18,880 --> 00:09:23,140
thesis you sit there and you type one

00:09:20,710 --> 00:09:24,520
letter at a time and create your master

00:09:23,140 --> 00:09:26,140
copy and you're about to give it to your

00:09:24,520 --> 00:09:27,880
professor you're not going to sit there

00:09:26,140 --> 00:09:29,200
and type out the entire thesis again

00:09:27,880 --> 00:09:30,640
just to give it to your professor is

00:09:29,200 --> 00:09:32,050
just going to make a photocopy and send

00:09:30,640 --> 00:09:33,760
it to him and you can make as many

00:09:32,050 --> 00:09:36,130
photocopies as you want and your

00:09:33,760 --> 00:09:38,320
professor can in turn make modifications

00:09:36,130 --> 00:09:40,480
you know strike out certain things and

00:09:38,320 --> 00:09:42,130
do margin notes and highlights and

00:09:40,480 --> 00:09:43,570
things like that but that's not going to

00:09:42,130 --> 00:09:45,550
affect your master copy and it's not

00:09:43,570 --> 00:09:47,470
going to affect other professors copies

00:09:45,550 --> 00:09:50,680
either it's completely localized to that

00:09:47,470 --> 00:09:52,930
professors copy so this is the idea

00:09:50,680 --> 00:09:54,700
behind images in containers so an image

00:09:52,930 --> 00:09:55,900
is something that you put together which

00:09:54,700 --> 00:09:57,220
is kind of like the master copy where

00:09:55,900 --> 00:09:58,540
you install all of your libraries and

00:09:57,220 --> 00:10:00,580
you create your in mindset your

00:09:58,540 --> 00:10:02,890
environment variables add your project

00:10:00,580 --> 00:10:04,840
files and do all of your stuff and when

00:10:02,890 --> 00:10:06,610
you're ready to run that image you

00:10:04,840 --> 00:10:08,350
instantiate a container it's kind of

00:10:06,610 --> 00:10:11,590
like instantiating an object from a

00:10:08,350 --> 00:10:13,030
class and it gets started and it starts

00:10:11,590 --> 00:10:14,620
running your container might start

00:10:13,030 --> 00:10:16,510
adding lock files or something but that

00:10:14,620 --> 00:10:18,250
those log files will be contained inside

00:10:16,510 --> 00:10:19,570
of that container it's not going to go

00:10:18,250 --> 00:10:20,620
back to the image and it's not going to

00:10:19,570 --> 00:10:23,100
pollute other containers that are

00:10:20,620 --> 00:10:26,440
running so this is completely contained

00:10:23,100 --> 00:10:30,280
in that container anyway they have been

00:10:26,440 --> 00:10:33,180
that horse to death so a registry is

00:10:30,280 --> 00:10:35,980
kind of like the Python package index

00:10:33,180 --> 00:10:37,900
where you have a collection of a bunch

00:10:35,980 --> 00:10:40,390
of different projects that people have

00:10:37,900 --> 00:10:41,920
pushed and I'm going to pull a specific

00:10:40,390 --> 00:10:43,900
image out of this registry and start

00:10:41,920 --> 00:10:46,210
playing around with it now repositories

00:10:43,900 --> 00:10:47,740
are just projects in this registry so if

00:10:46,210 --> 00:10:49,410
registry is kind of like github then

00:10:47,740 --> 00:10:51,430
your repository is your project repo

00:10:49,410 --> 00:10:54,180
kind of thing and so it's just a

00:10:51,430 --> 00:10:59,360
collection of images is your repository

00:10:54,180 --> 00:11:02,990
ok so I'm pulling an image called base

00:10:59,360 --> 00:11:05,060
and now if I do darker images this lists

00:11:02,990 --> 00:11:07,100
all the images that I have in my local

00:11:05,060 --> 00:11:09,019
repository even though I pulled a single

00:11:07,100 --> 00:11:12,350
image there's four entries here right

00:11:09,019 --> 00:11:15,649
sorry about the the font being too big

00:11:12,350 --> 00:11:16,940
but it's showing four images but if you

00:11:15,649 --> 00:11:18,950
notice there they all have the same

00:11:16,940 --> 00:11:20,990
image ID so they're all this exactly

00:11:18,950 --> 00:11:23,180
same images with just different tax they

00:11:20,990 --> 00:11:25,760
happen to be named latest ubuntu went to

00:11:23,180 --> 00:11:30,589
quant all and we won't do with a cantar

00:11:25,760 --> 00:11:32,630
with the typo so so that's that's how

00:11:30,589 --> 00:11:35,510
you list all the images in your in your

00:11:32,630 --> 00:11:37,100
local registry docker PS as a command

00:11:35,510 --> 00:11:38,570
that you use to look at the containers

00:11:37,100 --> 00:11:40,850
that are currently running and since we

00:11:38,570 --> 00:11:42,079
haven't launched any containers dr. PS

00:11:40,850 --> 00:11:45,050
doesn't give us anything it's empty

00:11:42,079 --> 00:11:47,720
right now so let's launch a container so

00:11:45,050 --> 00:11:49,370
what I the way you do that is you say

00:11:47,720 --> 00:11:51,589
doctor run and then give it the image

00:11:49,370 --> 00:11:52,970
name and then give it a program that you

00:11:51,589 --> 00:11:54,470
want to run in that container that

00:11:52,970 --> 00:11:56,390
you're about to launch so in this case

00:11:54,470 --> 00:11:58,010
it was echo hello even though the hello

00:11:56,390 --> 00:12:00,350
got printed in my terminal it actually

00:11:58,010 --> 00:12:03,470
ran inside of the container and then it

00:12:00,350 --> 00:12:05,449
came back dr. P is still gives me

00:12:03,470 --> 00:12:07,550
nothing the reason is because as soon as

00:12:05,449 --> 00:12:10,070
the process is done the containers job

00:12:07,550 --> 00:12:12,500
is over and so it stopped and dr. Pierce

00:12:10,070 --> 00:12:15,470
will only give me containers that are

00:12:12,500 --> 00:12:17,720
actively currently running so let's run

00:12:15,470 --> 00:12:21,230
something a little bit longer so I'm

00:12:17,720 --> 00:12:29,860
going to do a infinite loop sorry about

00:12:21,230 --> 00:12:29,860
that okay okay that did not work well

00:12:40,299 --> 00:12:46,970
okay so I ran an infinite loop that was

00:12:43,489 --> 00:12:49,309
printing hello multiple times and this

00:12:46,970 --> 00:12:51,529
tied up my terminal because I'm running

00:12:49,309 --> 00:12:52,819
it in the foreground you can also run it

00:12:51,529 --> 00:12:56,540
in the background which is that the

00:12:52,819 --> 00:12:59,449
demon mode where you do the same exact

00:12:56,540 --> 00:13:01,489
command with a dash D option what that

00:12:59,449 --> 00:13:03,049
means is it runs the command in a

00:13:01,489 --> 00:13:04,879
container and puts it in the background

00:13:03,049 --> 00:13:07,129
when you run this it just gives you a

00:13:04,879 --> 00:13:09,459
shy ID so let's see what dr. P is tells

00:13:07,129 --> 00:13:11,839
us the occupier says that there is a

00:13:09,459 --> 00:13:13,819
container that is currently running with

00:13:11,839 --> 00:13:16,040
the command that says while true and its

00:13:13,819 --> 00:13:19,339
pretty long and then that's the shiid

00:13:16,040 --> 00:13:22,189
i'm going to copy that one and run

00:13:19,339 --> 00:13:23,720
darker logs on it darker logs lets me

00:13:22,189 --> 00:13:25,730
see what is the STD out that is

00:13:23,720 --> 00:13:27,619
currently in that container so this is

00:13:25,730 --> 00:13:28,819
how you can inspect a currently running

00:13:27,619 --> 00:13:32,449
container to see what it is actually

00:13:28,819 --> 00:13:34,339
doing okay so that's a brief description

00:13:32,449 --> 00:13:36,439
of images and containers and how you can

00:13:34,339 --> 00:13:38,209
run them there's another way that you

00:13:36,439 --> 00:13:40,579
can run which is the interactive mode so

00:13:38,209 --> 00:13:43,129
the only command here the only change

00:13:40,579 --> 00:13:44,600
here is I do a dash I on the dash T so I

00:13:43,129 --> 00:13:46,249
say is I'm running at an interactive

00:13:44,600 --> 00:13:47,480
mode and daddies I'm going to attach my

00:13:46,249 --> 00:13:50,269
current TTYL to this particular

00:13:47,480 --> 00:13:52,399
container that I'm about to run and here

00:13:50,269 --> 00:13:54,039
when I run LS I actually get root

00:13:52,399 --> 00:13:57,049
permission inside of the container so

00:13:54,039 --> 00:13:59,720
inside of a container as I mentioned it

00:13:57,049 --> 00:14:01,699
looks exactly like a new fresh vm so I

00:13:59,720 --> 00:14:05,720
have all the whole file system available

00:14:01,699 --> 00:14:07,730
in and everything for me but when I run

00:14:05,720 --> 00:14:09,199
PS there is nothing running inside of

00:14:07,730 --> 00:14:10,549
that because there well the only thing

00:14:09,199 --> 00:14:12,589
that's running is bashed with which I

00:14:10,549 --> 00:14:15,230
started this particular container so

00:14:12,589 --> 00:14:17,720
that's the advantage of having a

00:14:15,230 --> 00:14:21,730
container which can which can have its

00:14:17,720 --> 00:14:25,789
minimal processes running inside ok

00:14:21,730 --> 00:14:27,259
let's mess around a little bit so I'm so

00:14:25,789 --> 00:14:30,769
this particular container I'm modifying

00:14:27,259 --> 00:14:34,399
a bunch of things inside by installing a

00:14:30,769 --> 00:14:37,220
couple of typos grams because you know

00:14:34,399 --> 00:14:41,209
who doesn't like fortune-telling cow so

00:14:37,220 --> 00:14:43,339
let's try let's try that so i just

00:14:41,209 --> 00:14:47,139
installed fortune and cow say in my

00:14:43,339 --> 00:14:50,350
machine and my cow tells me to eat pork

00:14:47,139 --> 00:14:50,350
that's nice

00:14:50,970 --> 00:14:57,100
okay so we saw that i modified certain

00:14:55,390 --> 00:14:58,420
things inside of the container I'm going

00:14:57,100 --> 00:15:02,520
to copy this container charge it's going

00:14:58,420 --> 00:15:02,520
to come in handy a little bit later but

00:15:02,880 --> 00:15:06,010
again the doctor piece doesn't show me

00:15:05,050 --> 00:15:07,420
that the container is running because

00:15:06,010 --> 00:15:09,130
when I exit out of the container the

00:15:07,420 --> 00:15:11,320
container has stopped but it is not

00:15:09,130 --> 00:15:14,890
destroyed it's still just somewhere

00:15:11,320 --> 00:15:17,740
sleeping I still have the infinite loop

00:15:14,890 --> 00:15:19,660
running I'm going to stop that so the

00:15:17,740 --> 00:15:23,650
way you do that is using docker stop and

00:15:19,660 --> 00:15:26,370
and that is gone so that's how you stop

00:15:23,650 --> 00:15:28,870
a running container for container goes

00:15:26,370 --> 00:15:32,050
yeah keeps keeps running then you can

00:15:28,870 --> 00:15:35,589
just stop it like that okay let's get

00:15:32,050 --> 00:15:38,200
back to something else so as I mentioned

00:15:35,589 --> 00:15:40,180
the container that I messed with does

00:15:38,200 --> 00:15:41,560
not translate back to the image the

00:15:40,180 --> 00:15:43,450
original image because this is a master

00:15:41,560 --> 00:15:45,400
copy to prove let's start another

00:15:43,450 --> 00:15:48,820
interactive command and launch it from

00:15:45,400 --> 00:15:50,950
base now if I try fortune the command is

00:15:48,820 --> 00:15:52,540
not found so that was actually localized

00:15:50,950 --> 00:15:55,690
to only that containers or whatever I

00:15:52,540 --> 00:16:01,450
modified and app installed that was in

00:15:55,690 --> 00:16:03,490
in that container that I stopped so as I

00:16:01,450 --> 00:16:05,950
mentioned that shiid comes in handy

00:16:03,490 --> 00:16:07,240
because after you've created a container

00:16:05,950 --> 00:16:08,560
and you've changed a bunch of things

00:16:07,240 --> 00:16:10,180
inside of it if you want to create an

00:16:08,560 --> 00:16:12,700
image out of it because you know you

00:16:10,180 --> 00:16:14,290
brought it to just how you want it then

00:16:12,700 --> 00:16:16,690
all you have to do is take the show ID

00:16:14,290 --> 00:16:19,770
use the commit command and give it a new

00:16:16,690 --> 00:16:23,440
name and now if I run docker images I

00:16:19,770 --> 00:16:28,740
see the fortunate cow with a new image

00:16:23,440 --> 00:16:33,640
ID because files have changed inside so

00:16:28,740 --> 00:16:36,990
now if i run fortunate cow and check

00:16:33,640 --> 00:16:42,190
whether i have my fortune and i do I

00:16:36,990 --> 00:16:45,490
feel like it's mocking me but but I i

00:16:42,190 --> 00:16:47,290
have fortune so that's how that's how

00:16:45,490 --> 00:16:51,430
you can create a image out of an

00:16:47,290 --> 00:16:55,270
existing container introduce one other

00:16:51,430 --> 00:16:57,910
command called tag what this does is it

00:16:55,270 --> 00:17:00,970
it creates a tag it gives a different

00:16:57,910 --> 00:17:02,530
name for an existing image to prove that

00:17:00,970 --> 00:17:03,760
it is the existing image if you notice

00:17:02,530 --> 00:17:05,230
they have the exact same image

00:17:03,760 --> 00:17:07,390
ready I just gave it a new name and

00:17:05,230 --> 00:17:08,920
called it am j / base towards the reason

00:17:07,390 --> 00:17:12,130
i put on jet there as we there is a

00:17:08,920 --> 00:17:14,829
reason for that because this is how you

00:17:12,130 --> 00:17:16,690
push to the registry if you want your

00:17:14,829 --> 00:17:21,640
image to be available for everyone else

00:17:16,690 --> 00:17:24,930
to download and use then you can do that

00:17:21,640 --> 00:17:24,930
so this is your registry

00:17:34,200 --> 00:17:38,550
this is how the registry looks you can

00:17:36,460 --> 00:17:43,000
do container surgeons out of this and

00:17:38,550 --> 00:17:45,550
other things what I think my push is

00:17:43,000 --> 00:17:47,880
probably done yeah my push is probably

00:17:45,550 --> 00:17:51,180
done and if I go in here and look at it

00:17:47,880 --> 00:17:53,350
there's the new one that I just pushed

00:17:51,180 --> 00:17:55,780
so that's how you can share things with

00:17:53,350 --> 00:18:00,010
with people that you I just want to

00:17:55,780 --> 00:18:03,310
share images okay so let's get back to

00:18:00,010 --> 00:18:05,620
the presentation and get going so

00:18:03,310 --> 00:18:07,930
introduce registries repositories we saw

00:18:05,620 --> 00:18:11,110
a bunch of basic commands how to pull

00:18:07,930 --> 00:18:14,170
list images run PS logs you guys know

00:18:11,110 --> 00:18:15,820
all this stuff but those are created by

00:18:14,170 --> 00:18:17,410
with by hand like you have to type in

00:18:15,820 --> 00:18:18,730
one at a time and if someone else wants

00:18:17,410 --> 00:18:20,110
to recreate this I mean you have to

00:18:18,730 --> 00:18:21,460
either give them the image or tell them

00:18:20,110 --> 00:18:24,190
how you created the image in the first

00:18:21,460 --> 00:18:26,050
place whereas docker file allows you to

00:18:24,190 --> 00:18:27,670
do automate all of this stuff here's an

00:18:26,050 --> 00:18:29,830
example of a docker file so this says

00:18:27,670 --> 00:18:32,770
from the base image so you're using an

00:18:29,830 --> 00:18:34,420
base image as your starting point you

00:18:32,770 --> 00:18:37,120
can use the env to set an environment

00:18:34,420 --> 00:18:40,330
variable use add to add local files from

00:18:37,120 --> 00:18:41,800
your machine into the images and run a

00:18:40,330 --> 00:18:43,840
bunch of commands while you're creating

00:18:41,800 --> 00:18:45,190
this image as a step-by-step process so

00:18:43,840 --> 00:18:47,830
the apt get update and apt-get install

00:18:45,190 --> 00:18:49,420
will happen automatically and the CMD

00:18:47,830 --> 00:18:51,820
command is actually interesting so every

00:18:49,420 --> 00:18:53,440
time I do the darker run you'll notice

00:18:51,820 --> 00:18:55,060
that I add a program at the end if you

00:18:53,440 --> 00:18:57,370
don't if you ignore that program if you

00:18:55,060 --> 00:18:58,960
completely omit the programs then this

00:18:57,370 --> 00:19:06,760
is the default program that will get

00:18:58,960 --> 00:19:10,120
launched its soon here's the darker file

00:19:06,760 --> 00:19:13,180
and the way you build that is say dr.

00:19:10,120 --> 00:19:15,250
bill dash T dash T is basically saying I

00:19:13,180 --> 00:19:17,580
want to give it a new name and docker

00:19:15,250 --> 00:19:20,620
file is located in my current folder I

00:19:17,580 --> 00:19:29,890
run that it actually installs everything

00:19:20,620 --> 00:19:32,410
and now if I run there we go so without

00:19:29,890 --> 00:19:35,790
a command it automatically launches the

00:19:32,410 --> 00:19:35,790
command that I defined in my doctor file

00:19:36,480 --> 00:19:39,810
okay

00:19:37,770 --> 00:19:41,070
so so far we've just been looking at you

00:19:39,810 --> 00:19:42,480
know playing out playing with linux

00:19:41,070 --> 00:19:44,190
tours and things like that but if you

00:19:42,480 --> 00:19:46,290
want to run a jingle application you can

00:19:44,190 --> 00:19:47,880
you can create a docker file that sets

00:19:46,290 --> 00:19:49,320
up Django for you inside of that add

00:19:47,880 --> 00:19:52,440
your project files and do all of that

00:19:49,320 --> 00:19:54,180
sort of things and explore support and

00:19:52,440 --> 00:19:55,740
and you know it'll exposing a port

00:19:54,180 --> 00:19:58,320
basically means opening a port in your

00:19:55,740 --> 00:20:01,140
container do all of that and let's say

00:19:58,320 --> 00:20:02,700
you launch your container that as I

00:20:01,140 --> 00:20:05,460
mentioned the container is completely

00:20:02,700 --> 00:20:07,140
isolated if you open a port 8000 and

00:20:05,460 --> 00:20:09,180
start listening on that using Django

00:20:07,140 --> 00:20:11,460
then that 8,000 is actually not

00:20:09,180 --> 00:20:14,280
available to your host machine it's only

00:20:11,460 --> 00:20:17,070
available for that in that container the

00:20:14,280 --> 00:20:19,650
way you can map your host machine sport

00:20:17,070 --> 00:20:23,010
to your container sport is using the

00:20:19,650 --> 00:20:27,600
dash PHP option so you just say dash be

00:20:23,010 --> 00:20:31,860
8,000 colon 8080 nurs 8000 with your

00:20:27,600 --> 00:20:33,780
local machines 8,000 that's networking

00:20:31,860 --> 00:20:35,190
stuff there are a couple of other quick

00:20:33,780 --> 00:20:38,580
features that I want to go over which is

00:20:35,190 --> 00:20:39,990
volumes allows you to mount a volume

00:20:38,580 --> 00:20:41,580
from your host machine into your

00:20:39,990 --> 00:20:43,410
container there are multiple different

00:20:41,580 --> 00:20:45,630
options that you can do with volumes

00:20:43,410 --> 00:20:47,610
like mount volumes between containers

00:20:45,630 --> 00:20:49,680
and things like that but for simplicity

00:20:47,610 --> 00:20:51,210
sake I'm just going to keep it simple

00:20:49,680 --> 00:20:52,650
where you can mount something from your

00:20:51,210 --> 00:20:53,850
host machine into your container and

00:20:52,650 --> 00:20:55,710
anything you write into your container

00:20:53,850 --> 00:20:57,420
will be available on your host machine

00:20:55,710 --> 00:20:59,490
and any changes you make in host will be

00:20:57,420 --> 00:21:01,380
available on your container and it

00:20:59,490 --> 00:21:04,290
allows you to do read only mounts and

00:21:01,380 --> 00:21:06,900
read write and all of that stuff links

00:21:04,290 --> 00:21:08,100
is a simple service discovery so let's

00:21:06,900 --> 00:21:09,810
say you have a container that's running

00:21:08,100 --> 00:21:12,570
my sequel and a container that's running

00:21:09,810 --> 00:21:14,220
Django how is this Jango going to know

00:21:12,570 --> 00:21:16,140
what's the IP address and the port

00:21:14,220 --> 00:21:18,480
number that's available for it to

00:21:16,140 --> 00:21:20,310
contact on my sequel because every time

00:21:18,480 --> 00:21:22,020
a new container gets created a new IP

00:21:20,310 --> 00:21:23,610
address gets assigned to it dr.

00:21:22,020 --> 00:21:25,140
automatically takes care of you know

00:21:23,610 --> 00:21:27,180
which is the available IP address and it

00:21:25,140 --> 00:21:29,550
assigns it for you so the way you do

00:21:27,180 --> 00:21:33,060
that is you use the dash link option and

00:21:29,550 --> 00:21:34,800
that tells you that my sequels an IP

00:21:33,060 --> 00:21:37,230
address and port number will be injected

00:21:34,800 --> 00:21:39,540
into my dog into my Django's container

00:21:37,230 --> 00:21:41,100
as environment variables so you just

00:21:39,540 --> 00:21:42,870
design your Django application to look

00:21:41,100 --> 00:21:46,350
up these credentials from an environment

00:21:42,870 --> 00:21:48,420
variable and you're good to go briefly

00:21:46,350 --> 00:21:51,240
mention REST API you can use it to pool

00:21:48,420 --> 00:21:53,220
images to get a list of containers

00:21:51,240 --> 00:21:54,809
shipyard is actually a project that a

00:21:53,220 --> 00:21:56,429
Django project that allows you to do all

00:21:54,809 --> 00:21:59,550
of the things that I showed in command

00:21:56,429 --> 00:22:01,440
line from your browser actually it's

00:21:59,550 --> 00:22:03,300
actually pretty cool the way we use it

00:22:01,440 --> 00:22:05,550
at New Relic and if you guys don't know

00:22:03,300 --> 00:22:07,140
what we do we you install our software

00:22:05,550 --> 00:22:08,550
we do application performance monitoring

00:22:07,140 --> 00:22:10,290
so we you install our software on your

00:22:08,550 --> 00:22:12,420
server we collect performance metrics

00:22:10,290 --> 00:22:14,970
and we send them to our server now we do

00:22:12,420 --> 00:22:17,730
this for all of these different

00:22:14,970 --> 00:22:20,190
libraries actually I think this is part

00:22:17,730 --> 00:22:23,820
of it there's a lot more but slide stand

00:22:20,190 --> 00:22:25,890
fit anyway trying to do integration

00:22:23,820 --> 00:22:27,360
tests would mean like I need a my sequel

00:22:25,890 --> 00:22:29,730
instance the postgres instance a

00:22:27,360 --> 00:22:31,710
reticence tins memcache different

00:22:29,730 --> 00:22:32,940
versions of Django different versions of

00:22:31,710 --> 00:22:35,010
flask and all of these different things

00:22:32,940 --> 00:22:36,300
this was getting quite hairy and our

00:22:35,010 --> 00:22:38,850
integration tests can only run in

00:22:36,300 --> 00:22:40,320
Jenkins it cannot be running locally the

00:22:38,850 --> 00:22:44,309
way we solved that was we put everything

00:22:40,320 --> 00:22:46,140
inside of a container and you can have

00:22:44,309 --> 00:22:47,490
different kinds of versions for these

00:22:46,140 --> 00:22:48,900
different things my sequel different

00:22:47,490 --> 00:22:52,410
versions will have its own containers

00:22:48,900 --> 00:22:54,210
and if I made some changes to the Django

00:22:52,410 --> 00:22:56,690
instrumentation then I will start a

00:22:54,210 --> 00:22:59,610
container with django app inside of it

00:22:56,690 --> 00:23:01,260
which automatically has links so all

00:22:59,610 --> 00:23:03,120
these different services will be

00:23:01,260 --> 00:23:05,120
injected in as environment variables and

00:23:03,120 --> 00:23:08,309
I just have to go through my integration

00:23:05,120 --> 00:23:11,250
tests locally and if I made some changes

00:23:08,309 --> 00:23:12,840
to cherry pie flask whatever it is all

00:23:11,250 --> 00:23:15,630
of these can be run locally and it is

00:23:12,840 --> 00:23:17,400
all available and ready to go this

00:23:15,630 --> 00:23:19,290
actually made our integration tests

00:23:17,400 --> 00:23:20,400
faster on Jenkins because now we can run

00:23:19,290 --> 00:23:22,980
them in parallel since they are

00:23:20,400 --> 00:23:25,200
completely isolated from each other so

00:23:22,980 --> 00:23:26,970
we just wrote some basic simple bash

00:23:25,200 --> 00:23:32,010
scripts to get get this thing going and

00:23:26,970 --> 00:23:34,200
it actually works really well so coming

00:23:32,010 --> 00:23:36,059
back to the original problem so how

00:23:34,200 --> 00:23:38,550
would you solve if you are a full stack

00:23:36,059 --> 00:23:41,670
developer and things like breaking thing

00:23:38,550 --> 00:23:43,830
breaking changes happen all the time the

00:23:41,670 --> 00:23:46,080
way you can solve this is put them in

00:23:43,830 --> 00:23:47,910
containers you're my sequel can be in

00:23:46,080 --> 00:23:50,070
its own container your application stack

00:23:47,910 --> 00:23:51,510
in its own different container and each

00:23:50,070 --> 00:23:53,370
of your services can be in separate

00:23:51,510 --> 00:23:55,380
containers any time you make a change

00:23:53,370 --> 00:23:57,030
you're making it your change in a

00:23:55,380 --> 00:23:58,920
specific container and since container

00:23:57,030 --> 00:24:00,480
is a dirt-cheap you can actually run

00:23:58,920 --> 00:24:02,600
them on your dev machine it's not like

00:24:00,480 --> 00:24:06,110
you're starting up a whole vm and like

00:24:02,600 --> 00:24:09,980
working inside of a crippled machine or

00:24:06,110 --> 00:24:12,380
anything like that and if you want you

00:24:09,980 --> 00:24:15,559
can mount your local machines a folder

00:24:12,380 --> 00:24:18,200
as your host as volumes and it'll be

00:24:15,559 --> 00:24:20,870
completely available for you so you can

00:24:18,200 --> 00:24:23,059
do your development push it to prod well

00:24:20,870 --> 00:24:24,620
it's not quite as simple you probably

00:24:23,059 --> 00:24:25,940
want to push it to registry and then

00:24:24,620 --> 00:24:27,950
from there you can push it to product

00:24:25,940 --> 00:24:29,480
but you know the registry doesn't have

00:24:27,950 --> 00:24:30,710
to be the public registry where everyone

00:24:29,480 --> 00:24:31,970
can see it I mean there are private

00:24:30,710 --> 00:24:34,100
registry like commercial offerings that

00:24:31,970 --> 00:24:35,450
are available or you can actually host

00:24:34,100 --> 00:24:37,539
your own private errs it's rly locally

00:24:35,450 --> 00:24:39,650
on your machine there's like Django a

00:24:37,539 --> 00:24:41,059
darker registry just search for it and

00:24:39,650 --> 00:24:44,600
github and you can find that really

00:24:41,059 --> 00:24:48,110
easily there is a really good community

00:24:44,600 --> 00:24:50,270
there is IRC Ken Cochran actually is

00:24:48,110 --> 00:24:55,370
doing a post-recession very friendly guy

00:24:50,270 --> 00:24:58,370
no ask questions to him I think that

00:24:55,370 --> 00:25:01,990
pretty much concludes my talk I think

00:24:58,370 --> 00:25:01,990
I'm ready for questions now

00:25:07,790 --> 00:25:12,680
Thank You MJ if anyone has any questions

00:25:10,110 --> 00:25:15,420
please go to the microphone over there

00:25:12,680 --> 00:25:18,060
so I'm kind of a shill but I'll go ahead

00:25:15,420 --> 00:25:19,200
and throw it out there for you debugging

00:25:18,060 --> 00:25:23,430
how do you go about doing that with

00:25:19,200 --> 00:25:26,400
docker so so there are different levels

00:25:23,430 --> 00:25:27,900
to be by so the logs that I showed are a

00:25:26,400 --> 00:25:29,520
pretty good example of lexan if

00:25:27,900 --> 00:25:32,760
something is going wrong inside of it

00:25:29,520 --> 00:25:35,640
now typically what we do is we try to

00:25:32,760 --> 00:25:37,710
run an ssh daemon also in that in a

00:25:35,640 --> 00:25:39,210
container so if something is going wrong

00:25:37,710 --> 00:25:41,640
and we want to go in and inspect it we

00:25:39,210 --> 00:25:44,040
can ssh into the container and start to

00:25:41,640 --> 00:25:46,860
see what's what's actually changing the

00:25:44,040 --> 00:25:49,380
other thing that we do is drop down one

00:25:46,860 --> 00:25:51,180
level one layer down where there is lxc

00:25:49,380 --> 00:25:52,860
attached command that's available so you

00:25:51,180 --> 00:25:54,330
can do LX c dash attack if you don't

00:25:52,860 --> 00:25:56,100
have ssh running in that container

00:25:54,330 --> 00:25:59,040
because you want to keep your container

00:25:56,100 --> 00:26:01,200
absolutely minimal but you could still

00:25:59,040 --> 00:26:02,970
do Alex attached and it puts you in an

00:26:01,200 --> 00:26:05,100
interactive mode in that container and

00:26:02,970 --> 00:26:06,890
you can start messing around with the

00:26:05,100 --> 00:26:09,330
log files take a look at it and see

00:26:06,890 --> 00:26:12,570
what's actually going on so those are

00:26:09,330 --> 00:26:15,180
some of the tips that I have if you need

00:26:12,570 --> 00:26:17,010
to have a different configuration for

00:26:15,180 --> 00:26:19,140
your production environment like say you

00:26:17,010 --> 00:26:21,120
want to turn off debugging and have

00:26:19,140 --> 00:26:23,190
different you know maybe you have

00:26:21,120 --> 00:26:25,290
replicated servers in production if

00:26:23,190 --> 00:26:27,360
you're using the same image on

00:26:25,290 --> 00:26:28,500
development and production how do you

00:26:27,360 --> 00:26:30,780
account for the differences between

00:26:28,500 --> 00:26:32,550
those two environments so that's a very

00:26:30,780 --> 00:26:34,620
good question so I forgot to mention

00:26:32,550 --> 00:26:36,510
that there is a staging environment that

00:26:34,620 --> 00:26:38,370
is involved in our actual production

00:26:36,510 --> 00:26:39,900
deployment so we not only use it for

00:26:38,370 --> 00:26:41,610
integration testing we actually use it

00:26:39,900 --> 00:26:43,440
in some parts of our production although

00:26:41,610 --> 00:26:46,980
doctor tells us not to use it to one

00:26:43,440 --> 00:26:50,820
Dario's you know reached but you know we

00:26:46,980 --> 00:26:52,320
like living on the edge anyway the way

00:26:50,820 --> 00:26:54,960
we do that is your staging environment

00:26:52,320 --> 00:26:56,220
should be very very closely replicated

00:26:54,960 --> 00:26:59,700
with your production environment and the

00:26:56,220 --> 00:27:01,440
way we do this is after we we create our

00:26:59,700 --> 00:27:03,390
images we push it to our Jenkins server

00:27:01,440 --> 00:27:04,800
and our Jenkins server actually changes

00:27:03,390 --> 00:27:06,090
all the environment variables according

00:27:04,800 --> 00:27:07,980
to how the production environment should

00:27:06,090 --> 00:27:10,320
be set up and then it runs all its

00:27:07,980 --> 00:27:12,390
integration tests on that exact image so

00:27:10,320 --> 00:27:14,220
whatever the image is will be the one

00:27:12,390 --> 00:27:17,220
that actually gets deployed eventually

00:27:14,220 --> 00:27:19,200
so we run all of our tests with how the

00:27:17,220 --> 00:27:21,809
the containers will be and

00:27:19,200 --> 00:27:27,690
would you ship them so i don't know if

00:27:21,809 --> 00:27:31,110
that helped can doctor be used to run

00:27:27,690 --> 00:27:34,200
untrusted code in a safe manner as a

00:27:31,110 --> 00:27:36,990
sandbox yeah i think that was the

00:27:34,200 --> 00:27:38,850
intention for dr. so the way it i mean

00:27:36,990 --> 00:27:40,789
it is a complete San a sandbox

00:27:38,850 --> 00:27:42,720
environment so you can run something and

00:27:40,789 --> 00:27:44,130
there are a couple of features that are

00:27:42,720 --> 00:27:45,720
kind of left at which is you can

00:27:44,130 --> 00:27:48,630
restrict how much memory that the

00:27:45,720 --> 00:27:50,039
container can consume and I don't know

00:27:48,630 --> 00:27:51,120
if cpu can be restricted that's

00:27:50,039 --> 00:27:53,669
something you can look up on the

00:27:51,120 --> 00:27:55,559
documentation but you can in fact you

00:27:53,669 --> 00:27:58,320
know run your fork bomb inside and see

00:27:55,559 --> 00:28:05,370
if it'll if it'll bring down the host or

00:27:58,320 --> 00:28:09,360
not try it oh yeah we're a Python shop

00:28:05,370 --> 00:28:12,240
and we're using docker in production on

00:28:09,360 --> 00:28:13,740
the edge as you say yes yeah but we're

00:28:12,240 --> 00:28:18,029
still trying to figure out the best way

00:28:13,740 --> 00:28:20,639
to deploy like requirements files with

00:28:18,029 --> 00:28:22,679
pip they go in the dockerfile or leave

00:28:20,639 --> 00:28:24,779
them in a volume and relationship

00:28:22,679 --> 00:28:27,600
between you know like our mercurial

00:28:24,779 --> 00:28:28,860
repository and virtual environments we

00:28:27,600 --> 00:28:31,320
don't really need virtual environments

00:28:28,860 --> 00:28:33,870
anymore with docker but do you have any

00:28:31,320 --> 00:28:35,730
suggestions for best practices on moving

00:28:33,870 --> 00:28:38,370
from traditional virtual environment and

00:28:35,730 --> 00:28:41,010
pip requirements and checking out the

00:28:38,370 --> 00:28:44,039
latest for development versus doing that

00:28:41,010 --> 00:28:46,080
and docker we still use virtual

00:28:44,039 --> 00:28:47,970
environments actually because it's just

00:28:46,080 --> 00:28:49,919
easier to do well I guess you don't need

00:28:47,970 --> 00:28:53,010
virtual environments in order to do PR

00:28:49,919 --> 00:28:56,669
requirements are txt but we just still

00:28:53,010 --> 00:28:58,169
have it in our environment but the so we

00:28:56,669 --> 00:28:59,610
actually do it at the image creation

00:28:58,169 --> 00:29:00,720
step we don't do it inside of the

00:28:59,610 --> 00:29:02,549
container like after the container has

00:29:00,720 --> 00:29:05,279
launched so that you know the deploy

00:29:02,549 --> 00:29:06,630
process is literally just to move the

00:29:05,279 --> 00:29:08,460
image into the production system and

00:29:06,630 --> 00:29:10,380
then like you know launcher container

00:29:08,460 --> 00:29:16,159
out of it so that happens at the build

00:29:10,380 --> 00:29:18,419
step and so yeah we still have our our

00:29:16,159 --> 00:29:20,250
requirements as part of the repository

00:29:18,419 --> 00:29:23,399
and then that repository as a whole gets

00:29:20,250 --> 00:29:25,500
added into the image and then we run a

00:29:23,399 --> 00:29:27,269
bunch of different test steps to set up

00:29:25,500 --> 00:29:29,399
the image and finally create the

00:29:27,269 --> 00:29:31,970
container out of it thanks I'm sorry we

00:29:29,399 --> 00:29:35,250
only have time for one more question

00:29:31,970 --> 00:29:38,010
not really a question docker does

00:29:35,250 --> 00:29:40,649
support CPU shares and I would recommend

00:29:38,010 --> 00:29:43,980
checking out fig it's a pip install bowl

00:29:40,649 --> 00:29:47,460
thing for a really good for local dev

00:29:43,980 --> 00:29:49,679
environment cool thank you we ran out of

00:29:47,460 --> 00:29:52,070
time thank you very much we can friend

00:29:49,679 --> 00:29:52,070

YouTube URL: https://www.youtube.com/watch?v=9bvdc55xYdo


