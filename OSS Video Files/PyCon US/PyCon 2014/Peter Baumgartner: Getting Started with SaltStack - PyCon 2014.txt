Title: Peter Baumgartner: Getting Started with SaltStack - PyCon 2014
Publication date: 2014-04-12
Playlist: PyCon 2014
Description: 
	Speaker: Peter Baumgartner

"Salt is the new kid on the block in the configuration management space. Unlike the Ruby-based Chef and Puppet, Salt is written in Python, making it easy to debug and extend for Python developers.  This talk will introduce Salt as well as explore some of the things that make it unique."

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:03,230 --> 00:00:07,049
hello everybody

00:00:05,370 --> 00:00:11,670
welcome to the last session in the

00:00:07,049 --> 00:00:13,170
automation ops team to track I'm very

00:00:11,670 --> 00:00:14,759
happy to introduce to you Peter Baum

00:00:13,170 --> 00:00:19,070
Carter he's going to talk about salt

00:00:14,759 --> 00:00:19,070
salt stack and give it away

00:00:25,210 --> 00:00:30,380
all right thank you thanks everybody for

00:00:27,470 --> 00:00:33,950
coming so yeah this is getting started

00:00:30,380 --> 00:00:35,540
with salt like you said I'm Peter

00:00:33,950 --> 00:00:38,360
Baumgartner founder of a company called

00:00:35,540 --> 00:00:40,370
Lincoln loop we do lots of web

00:00:38,360 --> 00:00:42,410
application development in pythons so we

00:00:40,370 --> 00:00:45,650
end up setting up a lot of servers to do

00:00:42,410 --> 00:00:49,040
that we use salt just to get a idea

00:00:45,650 --> 00:00:50,720
who's here how many people in the

00:00:49,040 --> 00:00:52,670
audience have used chef or puppet in the

00:00:50,720 --> 00:00:53,960
past for configuration management Wow

00:00:52,670 --> 00:00:58,129
okay

00:00:53,960 --> 00:01:02,420
fabric have you used fabric okay and is

00:00:58,129 --> 00:01:07,640
anybody here use salt okay this is a

00:01:02,420 --> 00:01:09,680
pretty introductory talk so if you've

00:01:07,640 --> 00:01:12,920
used salt quite a bit you may find it

00:01:09,680 --> 00:01:16,250
boring or repetitive but yeah and he saw

00:01:12,920 --> 00:01:17,720
devs in the in the audience okay good

00:01:16,250 --> 00:01:21,140
nobody to tell me I'm wrong

00:01:17,720 --> 00:01:24,320
oh wait did I see a hand oh no okay well

00:01:21,140 --> 00:01:26,620
if I screw something up let me know okay

00:01:24,320 --> 00:01:29,390
so let's get started what is salt stack

00:01:26,620 --> 00:01:30,799
salt stack this is from their website

00:01:29,390 --> 00:01:32,689
saltstack delivers a dynamic

00:01:30,799 --> 00:01:34,840
infrastructure communication bus used

00:01:32,689 --> 00:01:37,750
for orchestration remote execution

00:01:34,840 --> 00:01:40,789
configuration management and much more

00:01:37,750 --> 00:01:43,340
so kind of some buzzword bingo there and

00:01:40,789 --> 00:01:44,570
a lot of things going on so so let's

00:01:43,340 --> 00:01:47,049
break it down

00:01:44,570 --> 00:01:49,579
salt stack is configuration management

00:01:47,049 --> 00:01:51,079
other configuration management tools you

00:01:49,579 --> 00:01:53,420
may have heard of cfengine

00:01:51,079 --> 00:01:54,829
was one of the early ones there's chef

00:01:53,420 --> 00:01:57,740
and puppet like many of you have used

00:01:54,829 --> 00:02:02,149
ansible is out there as well another

00:01:57,740 --> 00:02:04,250
Python option so before configuration

00:02:02,149 --> 00:02:06,350
management we would set up a server we'd

00:02:04,250 --> 00:02:09,399
set up nginx on the server and we'd

00:02:06,350 --> 00:02:11,900
configure nginx in the nginx comp file

00:02:09,399 --> 00:02:14,750
then we'd want to make a change to nginx

00:02:11,900 --> 00:02:19,400
comp and we'd back it up and then we

00:02:14,750 --> 00:02:24,200
would do it again and again and we just

00:02:19,400 --> 00:02:26,030
need to stop doing that so after

00:02:24,200 --> 00:02:29,350
configuration management it looks like

00:02:26,030 --> 00:02:32,269
this configuration management lets you

00:02:29,350 --> 00:02:34,519
have a single set of files that tell you

00:02:32,269 --> 00:02:37,300
exactly what your server is doing how it

00:02:34,519 --> 00:02:40,660
is configured when people make changes

00:02:37,300 --> 00:02:42,940
you get a nice log so you can put it in

00:02:40,660 --> 00:02:44,860
version control all these nice things

00:02:42,940 --> 00:02:47,380
you you basically version controlled

00:02:44,860 --> 00:02:48,460
your servers it's self documenting when

00:02:47,380 --> 00:02:50,410
somebody wants to know what the server

00:02:48,460 --> 00:02:52,030
is doing they can review your

00:02:50,410 --> 00:02:54,910
configuration management system and see

00:02:52,030 --> 00:02:57,700
that it's as easy to set up one server

00:02:54,910 --> 00:03:01,690
as it is a hundred servers so repeatable

00:02:57,700 --> 00:03:04,750
and reusable so next up saltstack is

00:03:01,690 --> 00:03:07,290
remote execution remote execution is

00:03:04,750 --> 00:03:09,060
kind of the territory of fabric

00:03:07,290 --> 00:03:11,560
Capistrano func

00:03:09,060 --> 00:03:13,600
basically the ability to run one or more

00:03:11,560 --> 00:03:17,890
commands against one or more remote

00:03:13,600 --> 00:03:20,110
systems this is sort of out of the scope

00:03:17,890 --> 00:03:23,770
of what chef and puppet are designed to

00:03:20,110 --> 00:03:26,580
do some examples of when you want to use

00:03:23,770 --> 00:03:29,050
remote execution deploying your code

00:03:26,580 --> 00:03:32,200
running all the things necessary to do a

00:03:29,050 --> 00:03:34,870
deploy running one-off scripts doing

00:03:32,200 --> 00:03:37,090
critical package updates so the open SSL

00:03:34,870 --> 00:03:38,890
heartbleed issue is a great example of

00:03:37,090 --> 00:03:40,980
when you might want to run a specific

00:03:38,890 --> 00:03:43,390
command one time against many systems

00:03:40,980 --> 00:03:45,730
and you can use it for system monitoring

00:03:43,390 --> 00:03:48,010
as well so you know check the load on

00:03:45,730 --> 00:03:53,110
this server every five minutes or this

00:03:48,010 --> 00:03:55,630
set of servers and report back so that's

00:03:53,110 --> 00:03:58,930
what saltstack is or a subset at least

00:03:55,630 --> 00:04:00,180
we'll cover today why would you want to

00:03:58,930 --> 00:04:03,340
choose saltstack

00:04:00,180 --> 00:04:05,770
big thing for me I'm a Python developer

00:04:03,340 --> 00:04:09,160
I typically work build websites in

00:04:05,770 --> 00:04:11,560
Django so salt stacks written in Python

00:04:09,160 --> 00:04:13,660
it's configured with Y amel which is a

00:04:11,560 --> 00:04:16,419
dead simple kind of configuration

00:04:13,660 --> 00:04:18,940
language and it uses Jinja to as a

00:04:16,419 --> 00:04:20,919
templating engine so coming from to the

00:04:18,940 --> 00:04:23,290
django world Jinja two templates were

00:04:20,919 --> 00:04:26,140
very familiar to me it's all familiar

00:04:23,290 --> 00:04:28,750
tools easy for me to hack on in contrast

00:04:26,140 --> 00:04:30,880
tools like chef and puppet use their own

00:04:28,750 --> 00:04:33,880
custom DSL they're sort of based off of

00:04:30,880 --> 00:04:37,230
Ruby that wasn't very comfortable for me

00:04:33,880 --> 00:04:39,640
so those are things I liked about salt

00:04:37,230 --> 00:04:41,650
another thing I like it's got really

00:04:39,640 --> 00:04:43,330
good documentation if you want to print

00:04:41,650 --> 00:04:45,910
it out on their website it be over 800

00:04:43,330 --> 00:04:47,860
pages they are insanely responsive

00:04:45,910 --> 00:04:50,889
they're there IRC room is always full of

00:04:47,860 --> 00:04:52,300
people if you file an issue on github

00:04:50,889 --> 00:04:55,479
don't be surprised if you get a response

00:04:52,300 --> 00:04:58,120
the same day and and finally it's backed

00:04:55,479 --> 00:04:59,590
by a for-profit organization so there's

00:04:58,120 --> 00:05:01,719
people with a vested interest in making

00:04:59,590 --> 00:05:05,020
sure salt is cutting-edge

00:05:01,719 --> 00:05:07,389
state-of-the-art and works they're not

00:05:05,020 --> 00:05:10,060
going to go away or get busy with their

00:05:07,389 --> 00:05:12,849
day job and disappear so all things I

00:05:10,060 --> 00:05:14,740
liked about it so that's that's why you

00:05:12,849 --> 00:05:16,810
might want to choose saltstack how about

00:05:14,740 --> 00:05:19,810
some reasons maybe why you might not

00:05:16,810 --> 00:05:22,779
want to choose saltstack here's sort of

00:05:19,810 --> 00:05:25,210
the the common things I hear about why

00:05:22,779 --> 00:05:28,000
people don't like salt it's a young

00:05:25,210 --> 00:05:30,340
project it moves fast there they're

00:05:28,000 --> 00:05:33,069
constantly building new features that

00:05:30,340 --> 00:05:35,979
might be scary as long as they kind of

00:05:33,069 --> 00:05:39,069
maintain stability that's that's a plus

00:05:35,979 --> 00:05:41,439
in my book there they're making it

00:05:39,069 --> 00:05:43,560
better without breaking old stuff and in

00:05:41,439 --> 00:05:46,689
my general experience over the last

00:05:43,560 --> 00:05:50,289
probably couple years now that's the

00:05:46,689 --> 00:05:51,969
case and it doesn't use SSH as its

00:05:50,289 --> 00:05:55,419
transport transport and communication

00:05:51,969 --> 00:05:58,750
mechanism between servers so SSH is

00:05:55,419 --> 00:06:01,569
tried-and-true people trust it that's

00:05:58,750 --> 00:06:04,509
great a lot of the things salt needs to

00:06:01,569 --> 00:06:07,539
do it does over a kind of an always-on

00:06:04,509 --> 00:06:10,270
communication bus between servers SSH

00:06:07,539 --> 00:06:12,490
really doesn't work as well for that and

00:06:10,270 --> 00:06:15,879
doesn't scale to the level they want to

00:06:12,490 --> 00:06:20,110
scale they're you know talking thousands

00:06:15,879 --> 00:06:22,149
of servers managed by by one master it

00:06:20,110 --> 00:06:24,789
has some SSH support it's an alpha

00:06:22,149 --> 00:06:29,589
status right now but yeah you don't want

00:06:24,789 --> 00:06:31,330
to use it in production so let's dive in

00:06:29,589 --> 00:06:33,639
and actually start learning about salt

00:06:31,330 --> 00:06:37,210
so the first thing we need to do is take

00:06:33,639 --> 00:06:39,550
of a cat vocabulary lesson the state of

00:06:37,210 --> 00:06:41,500
kind of DevOps in general is is terrible

00:06:39,550 --> 00:06:43,870
with vocabulary there is no kind of

00:06:41,500 --> 00:06:46,960
widely accepted terminology for this

00:06:43,870 --> 00:06:49,180
stuff so chef has knife and recipes and

00:06:46,960 --> 00:06:51,789
cookbooks and puppet has terminus and

00:06:49,180 --> 00:06:54,520
meta parameters ansible as play books

00:06:51,789 --> 00:06:56,500
and inventories salt might be the worst

00:06:54,520 --> 00:06:59,800
offender here there's lots of

00:06:56,500 --> 00:07:02,199
terminology you need to learn so to get

00:06:59,800 --> 00:07:04,660
started there's the master this is the

00:07:02,199 --> 00:07:07,210
server that kind of manages everything

00:07:04,660 --> 00:07:09,820
you know authenticating other servers

00:07:07,210 --> 00:07:13,030
states pillars we'll get into that in a

00:07:09,820 --> 00:07:15,280
second there's a minion a minion

00:07:13,030 --> 00:07:17,200
connects to the master typically you

00:07:15,280 --> 00:07:20,200
have one master server and many minions

00:07:17,200 --> 00:07:22,450
you can have zero master servers and

00:07:20,200 --> 00:07:24,040
minions can manage themselves and

00:07:22,450 --> 00:07:25,540
there's lots of other configurations but

00:07:24,040 --> 00:07:28,510
in general a minion is the server

00:07:25,540 --> 00:07:31,210
controlled by the master there's a state

00:07:28,510 --> 00:07:33,280
in a set of states so the state is a

00:07:31,210 --> 00:07:36,040
declarative representation of system

00:07:33,280 --> 00:07:38,140
state basically how you want your minion

00:07:36,040 --> 00:07:40,210
to be configured so when you stack up

00:07:38,140 --> 00:07:43,720
all these states that's that's the

00:07:40,210 --> 00:07:46,390
configuration of your system there is a

00:07:43,720 --> 00:07:48,310
grain a grain is a static piece of

00:07:46,390 --> 00:07:49,690
information about your minion you're

00:07:48,310 --> 00:07:52,090
basically your your server your

00:07:49,690 --> 00:07:54,250
configuring this is things that that

00:07:52,090 --> 00:07:56,320
don't change regularly things like how

00:07:54,250 --> 00:08:01,470
much RAM is in the Box how many CPUs it

00:07:56,320 --> 00:08:03,820
has what OS it's running there's pillars

00:08:01,470 --> 00:08:06,280
pillars are basically you can think of

00:08:03,820 --> 00:08:07,390
as variables so these are things that

00:08:06,280 --> 00:08:10,030
you might want to change between

00:08:07,390 --> 00:08:13,180
different deployments maybe you have a

00:08:10,030 --> 00:08:14,800
development server that runs one branch

00:08:13,180 --> 00:08:16,840
of your code and a production server

00:08:14,800 --> 00:08:20,320
that runs another you use pillars to

00:08:16,840 --> 00:08:23,010
manage this ports file paths things like

00:08:20,320 --> 00:08:26,080
that that change between your systems so

00:08:23,010 --> 00:08:28,060
kind of putting that all together we've

00:08:26,080 --> 00:08:30,490
got our our big master server here it's

00:08:28,060 --> 00:08:33,310
got a set of pillars on it in a set of

00:08:30,490 --> 00:08:35,349
states that master connects to one or

00:08:33,310 --> 00:08:40,210
many minions and each minion brings its

00:08:35,349 --> 00:08:43,630
own set of grains with it ok next up is

00:08:40,210 --> 00:08:46,960
the top file the top file matches States

00:08:43,630 --> 00:08:48,700
and pillars to minions so in your master

00:08:46,960 --> 00:08:50,350
you probably have configuration for lots

00:08:48,700 --> 00:08:52,570
of different systems maybe a database

00:08:50,350 --> 00:08:54,940
server maybe an application server the

00:08:52,570 --> 00:08:56,920
top file is what says these specific

00:08:54,940 --> 00:08:59,440
states go to these specific servers it

00:08:56,920 --> 00:09:03,310
basically pulls out a subset and matches

00:08:59,440 --> 00:09:06,070
those and finally there's high state

00:09:03,310 --> 00:09:10,990
high state is that subset of states that

00:09:06,070 --> 00:09:13,360
belong to a specific minion so adding to

00:09:10,990 --> 00:09:15,640
our diagram we now have pillars and

00:09:13,360 --> 00:09:17,530
states those kind of filter through a

00:09:15,640 --> 00:09:20,710
top file

00:09:17,530 --> 00:09:23,140
the minion hands its grains to the to

00:09:20,710 --> 00:09:24,790
the master that are cached there some

00:09:23,140 --> 00:09:27,220
magic happens it all smashes together

00:09:24,790 --> 00:09:30,250
and your configuration lives on your

00:09:27,220 --> 00:09:32,710
minion it's it's really not too magical

00:09:30,250 --> 00:09:36,210
it's just Python but this is getting

00:09:32,710 --> 00:09:37,330
started with salt so it's magic for now

00:09:36,210 --> 00:09:40,170
okay

00:09:37,330 --> 00:09:43,060
so let's really get started installation

00:09:40,170 --> 00:09:45,460
really easy there's binaries available

00:09:43,060 --> 00:09:48,040
for most distributions you can pip

00:09:45,460 --> 00:09:50,710
install it if you want a the bleeding

00:09:48,040 --> 00:09:52,810
edge or if you want to hack on it in

00:09:50,710 --> 00:09:55,870
Python yourself there is a script

00:09:52,810 --> 00:09:58,840
available at bootstrap saltstack org it

00:09:55,870 --> 00:10:02,290
probably does what you want which is to

00:09:58,840 --> 00:10:05,980
reach out to repos that salt manages and

00:10:02,290 --> 00:10:07,390
install binaries from there you do

00:10:05,980 --> 00:10:10,450
generally don't want to install from

00:10:07,390 --> 00:10:13,180
your operating systems repos because

00:10:10,450 --> 00:10:18,220
they're probably old and like I said the

00:10:13,180 --> 00:10:20,770
project moves fast so once this is an

00:10:18,220 --> 00:10:22,750
example with Ubuntu I'm going to go

00:10:20,770 --> 00:10:24,730
ahead and let's say we've installed the

00:10:22,750 --> 00:10:27,100
salts package archive their PPA

00:10:24,730 --> 00:10:29,620
to get the master running I would run

00:10:27,100 --> 00:10:31,120
apt-get install salt master we can also

00:10:29,620 --> 00:10:34,660
run it master list which I'll show you

00:10:31,120 --> 00:10:37,420
in a second next up we're gonna set up a

00:10:34,660 --> 00:10:40,000
minion so app get install salt minion

00:10:37,420 --> 00:10:44,290
and then we need to tell that minion

00:10:40,000 --> 00:10:45,550
where its master lives so by default

00:10:44,290 --> 00:10:49,390
it's going to look for a server called

00:10:45,550 --> 00:10:52,300
salt so we can drop the IP address into

00:10:49,390 --> 00:10:55,330
our hosts file alternatively there's

00:10:52,300 --> 00:10:59,200
this configuration file at Etsy / salt /

00:10:55,330 --> 00:11:01,570
mass sorry / minion and you can put in

00:10:59,200 --> 00:11:05,710
whatever hostname there that your master

00:11:01,570 --> 00:11:07,450
lives in so when you do that the minions

00:11:05,710 --> 00:11:11,100
going to reach out to the master and say

00:11:07,450 --> 00:11:13,840
hey here's my authentication key let me

00:11:11,100 --> 00:11:15,610
access you know all the all my states

00:11:13,840 --> 00:11:17,770
the master is going to say I don't

00:11:15,610 --> 00:11:20,320
recognize you I've never seen this

00:11:17,770 --> 00:11:21,760
server before and put it into a set of

00:11:20,320 --> 00:11:24,520
pending servers that have now

00:11:21,760 --> 00:11:27,760
authenticated with the master we can go

00:11:24,520 --> 00:11:30,910
to the master now salt - key - a has

00:11:27,760 --> 00:11:33,400
accept and accept the

00:11:30,910 --> 00:11:36,790
this minion connecting you can also list

00:11:33,400 --> 00:11:38,530
all the keys waiting and you can verify

00:11:36,790 --> 00:11:40,210
them with their fingerprints to make

00:11:38,530 --> 00:11:42,520
sure that actually is the server you

00:11:40,210 --> 00:11:44,230
think it is but we'll just kind of

00:11:42,520 --> 00:11:45,450
short-circuit that for now and go ahead

00:11:44,230 --> 00:11:50,200
and accept it

00:11:45,450 --> 00:11:51,640
so let's write our first state this is

00:11:50,200 --> 00:11:55,990
this is probably the simplest state we

00:11:51,640 --> 00:11:58,810
can run it lives in /s RV / salt that's

00:11:55,990 --> 00:12:03,010
kind of salts default directory for all

00:11:58,810 --> 00:12:05,920
its states and it's called my state s LS

00:12:03,010 --> 00:12:09,790
s LS is the file extension that salt

00:12:05,920 --> 00:12:11,680
uses package dot installed is a state

00:12:09,790 --> 00:12:14,170
we're gonna call and we're going to call

00:12:11,680 --> 00:12:18,670
it for nginx here so what this is going

00:12:14,170 --> 00:12:21,790
to do is install nginx on our system so

00:12:18,670 --> 00:12:23,680
that's a state file next we need to

00:12:21,790 --> 00:12:27,090
create the top file the top file is that

00:12:23,680 --> 00:12:29,800
thing that matches States to minions so

00:12:27,090 --> 00:12:32,260
that also lives in slash serve slash

00:12:29,800 --> 00:12:36,940
salt it's called top dot s LS it's

00:12:32,260 --> 00:12:38,740
always called top dot s LS it this is

00:12:36,940 --> 00:12:40,060
the environment base here we're not

00:12:38,740 --> 00:12:43,060
going to deal with environments today so

00:12:40,060 --> 00:12:44,950
just we're always going to use base my

00:12:43,060 --> 00:12:48,190
server is the name of the server we're

00:12:44,950 --> 00:12:51,700
expecting to connect and my state is the

00:12:48,190 --> 00:12:55,030
file name of the state we created here

00:12:51,700 --> 00:12:57,610
my state s LS so this says whenever my

00:12:55,030 --> 00:13:01,180
server checks in send it my state and

00:12:57,610 --> 00:13:03,520
now we're going to high state so a few

00:13:01,180 --> 00:13:05,740
different ways to do this because salt

00:13:03,520 --> 00:13:08,860
has a kind of a noise on communication

00:13:05,740 --> 00:13:10,960
bus we can push it down from the master

00:13:08,860 --> 00:13:13,180
that looks like salt the name of the

00:13:10,960 --> 00:13:15,670
server you want to push to and state dot

00:13:13,180 --> 00:13:18,640
hi state that's the module we want to

00:13:15,670 --> 00:13:22,210
run we can pull it from the minion so

00:13:18,640 --> 00:13:24,310
that's salt - call state hi state and

00:13:22,210 --> 00:13:26,020
then you can actually run master list so

00:13:24,310 --> 00:13:28,810
if we didn't have a master server and

00:13:26,020 --> 00:13:31,210
that those files we created we're living

00:13:28,810 --> 00:13:35,140
on the minion we could just run with

00:13:31,210 --> 00:13:38,970
this - - local flag and that is going to

00:13:35,140 --> 00:13:38,970
pull it right off the local file system

00:13:41,540 --> 00:13:46,240
next up you're gonna get a wall of text

00:13:43,610 --> 00:13:49,610
that's gonna do all sorts of stuff like

00:13:46,240 --> 00:13:51,949
install nginx on your system it's gonna

00:13:49,610 --> 00:13:54,709
install all these packages that nginx

00:13:51,949 --> 00:13:57,980
depends on to run and it's going to tell

00:13:54,709 --> 00:13:59,540
you at the very end way down at the

00:13:57,980 --> 00:14:02,449
bottom here and you get this green line

00:13:59,540 --> 00:14:07,579
one succeeded no our we ran one state it

00:14:02,449 --> 00:14:10,610
succeeded success we've done it so just

00:14:07,579 --> 00:14:13,250
to review again created its state file

00:14:10,610 --> 00:14:15,740
we created a top file and we told the

00:14:13,250 --> 00:14:17,810
minion to check in and get its high

00:14:15,740 --> 00:14:20,709
state and that we kind of ran through

00:14:17,810 --> 00:14:23,480
the bottom section of that picture there

00:14:20,709 --> 00:14:24,860
so that's a really basic state example

00:14:23,480 --> 00:14:27,860
let's do something a little more

00:14:24,860 --> 00:14:30,500
advanced here I'm going to create a user

00:14:27,860 --> 00:14:32,600
on the system you can kind of think of

00:14:30,500 --> 00:14:35,930
States like Python functions they take

00:14:32,600 --> 00:14:37,370
they can take keyword arguments so user

00:14:35,930 --> 00:14:40,190
dot present as the state we're going to

00:14:37,370 --> 00:14:41,870
call the name of the state is Pete so

00:14:40,190 --> 00:14:44,029
that's going to create a user called

00:14:41,870 --> 00:14:46,399
Pete on my system I'm gonna give it a

00:14:44,029 --> 00:14:52,010
shell and a home directory and all that

00:14:46,399 --> 00:14:53,720
good stuff I can stack states up so here

00:14:52,010 --> 00:14:57,649
I've got my user dot present state at

00:14:53,720 --> 00:15:00,529
the top and below I'm gonna set an SSH

00:14:57,649 --> 00:15:03,529
key for myself on it so SSH off dot

00:15:00,529 --> 00:15:07,699
present is my second state and I'm gonna

00:15:03,529 --> 00:15:09,949
run it for the user Pete and I've got a

00:15:07,699 --> 00:15:13,660
source and require here so those kind of

00:15:09,949 --> 00:15:17,660
probably require a little explanation so

00:15:13,660 --> 00:15:19,160
in that s / s RV / salt directory you

00:15:17,660 --> 00:15:21,199
can basically serve files out of that

00:15:19,160 --> 00:15:22,940
and push those down to your minions so

00:15:21,199 --> 00:15:25,670
in this example I would have a file

00:15:22,940 --> 00:15:27,860
called Pete pub that would have my

00:15:25,670 --> 00:15:31,370
public key in it and I would put it in

00:15:27,860 --> 00:15:33,560
slash serve slash salt and that could

00:15:31,370 --> 00:15:36,500
push it right down for that user as a

00:15:33,560 --> 00:15:39,649
accepted key and then I have this

00:15:36,500 --> 00:15:42,380
require statement here that that says

00:15:39,649 --> 00:15:44,870
that the SSH auth requires that the user

00:15:42,380 --> 00:15:48,260
state named Pete which I've defined

00:15:44,870 --> 00:15:51,019
right above it needs to run for this to

00:15:48,260 --> 00:15:54,350
run the the requires aren't totally

00:15:51,019 --> 00:15:55,400
necessary anymore salt runs states top

00:15:54,350 --> 00:15:57,590
to bottom

00:15:55,400 --> 00:15:59,150
so I can be pretty guaranteed that the

00:15:57,590 --> 00:16:02,540
user dot present is going to run before

00:15:59,150 --> 00:16:06,050
the SSH auth dot present but this makes

00:16:02,540 --> 00:16:07,730
that relationship explicit and when you

00:16:06,050 --> 00:16:10,070
have when you're debugging or you have

00:16:07,730 --> 00:16:11,990
errors that's really nice

00:16:10,070 --> 00:16:13,550
so rather than having all your errors

00:16:11,990 --> 00:16:15,590
kind of pile up and having to sift

00:16:13,550 --> 00:16:18,710
through to figure out what caused what

00:16:15,590 --> 00:16:21,470
problem it might my if my first state

00:16:18,710 --> 00:16:23,780
fails my second one is going to say a

00:16:21,470 --> 00:16:26,180
state I depend on a prerequisite failed

00:16:23,780 --> 00:16:27,470
and and I didn't run so it makes it

00:16:26,180 --> 00:16:30,110
really easy to find the root cause of

00:16:27,470 --> 00:16:32,330
problems so even though require isn't

00:16:30,110 --> 00:16:34,700
totally necessary I'd recommend it just

00:16:32,330 --> 00:16:39,020
to keep things explicit we like that in

00:16:34,700 --> 00:16:41,720
Python right here's another example of a

00:16:39,020 --> 00:16:44,540
state get that latest is the state I'm

00:16:41,720 --> 00:16:47,390
calling I'm checking out a git repo from

00:16:44,540 --> 00:16:49,550
github I can give it a revision and a

00:16:47,390 --> 00:16:52,540
place directory I want it to land on my

00:16:49,550 --> 00:16:54,860
filesystem and tell it that the package

00:16:52,540 --> 00:16:57,950
get needs to be installed in order to

00:16:54,860 --> 00:17:00,890
run this I can also run out arbitrary

00:16:57,950 --> 00:17:03,500
commands so command dot run is is

00:17:00,890 --> 00:17:05,209
another state I can call in this example

00:17:03,500 --> 00:17:07,250
I've got a let's say I've got a Django

00:17:05,209 --> 00:17:08,990
site and I want to sync the database so

00:17:07,250 --> 00:17:11,600
I pass in the name

00:17:08,990 --> 00:17:14,360
I tell it where to run and I need to

00:17:11,600 --> 00:17:17,510
make sure my my software is is on the

00:17:14,360 --> 00:17:19,430
server as well so tons of ways you can

00:17:17,510 --> 00:17:21,610
kind of mix these up and set up your

00:17:19,430 --> 00:17:24,050
servers there's over 50 built-in states

00:17:21,610 --> 00:17:25,880
they they do pretty much everything you

00:17:24,050 --> 00:17:28,550
need to do it's it's very rare that you

00:17:25,880 --> 00:17:32,030
need to build your own state or module

00:17:28,550 --> 00:17:34,610
two to set up a server so for Python

00:17:32,030 --> 00:17:37,220
people Pip and virtual em bar there you

00:17:34,610 --> 00:17:39,590
can manage databases database users you

00:17:37,220 --> 00:17:41,870
can bring services up and down you can

00:17:39,590 --> 00:17:44,240
put files on your server you can add

00:17:41,870 --> 00:17:48,680
cron jobs or you can write your own

00:17:44,240 --> 00:17:52,070
it's just Python so next up is pillars

00:17:48,680 --> 00:17:54,710
so if you remember pillars are basically

00:17:52,070 --> 00:17:56,000
variables and in this whole system they

00:17:54,710 --> 00:17:59,140
variables that apply to one or more

00:17:56,000 --> 00:18:02,450
minions so let's create our first pillar

00:17:59,140 --> 00:18:04,310
our pillars live in /sr v / pillar

00:18:02,450 --> 00:18:07,580
that's the default location just like

00:18:04,310 --> 00:18:08,900
/sr v / salt is the default location for

00:18:07,580 --> 00:18:11,060
states

00:18:08,900 --> 00:18:14,060
you can change those but if you put them

00:18:11,060 --> 00:18:15,830
there everything just works so we're

00:18:14,060 --> 00:18:18,860
gonna create a pillar called my site and

00:18:15,830 --> 00:18:23,960
it's got this value in a key value

00:18:18,860 --> 00:18:26,360
branch develop so just like on our

00:18:23,960 --> 00:18:30,320
state's we're gonna create a top file

00:18:26,360 --> 00:18:32,030
serve pillar top sls the the base

00:18:30,320 --> 00:18:36,380
environment and then we put the server

00:18:32,030 --> 00:18:38,980
that it applies to and the name of the

00:18:36,380 --> 00:18:41,930
pillar so again we called it my site

00:18:38,980 --> 00:18:45,230
doesn't need to be the same name as our

00:18:41,930 --> 00:18:49,310
state it's just an example so my site

00:18:45,230 --> 00:18:51,170
dot sls will match that you can get

00:18:49,310 --> 00:18:54,440
fancy with top files too

00:18:51,170 --> 00:18:56,780
so so this is you know some some kind of

00:18:54,440 --> 00:18:58,730
common stuff you'll see star will match

00:18:56,780 --> 00:19:00,320
anything so if you have a default you

00:18:58,730 --> 00:19:02,600
know maybe you want to put all your

00:19:00,320 --> 00:19:04,490
users or your company that they can log

00:19:02,600 --> 00:19:06,170
into the servers so you could put that

00:19:04,490 --> 00:19:08,600
into there and it will match all the

00:19:06,170 --> 00:19:11,870
servers you can use globbing so

00:19:08,600 --> 00:19:13,550
basically star dot something and match

00:19:11,870 --> 00:19:15,710
you know maybe all your app servers or

00:19:13,550 --> 00:19:18,530
something like that you can match on

00:19:15,710 --> 00:19:20,750
grains so i can say it this this applies

00:19:18,530 --> 00:19:23,030
to all my ubuntu servers if maybe you've

00:19:20,750 --> 00:19:26,030
got some abun too and windows stuff in

00:19:23,030 --> 00:19:28,310
your infrastructure you can use regex

00:19:26,030 --> 00:19:31,910
regular expression regular expressions

00:19:28,310 --> 00:19:34,220
like and or compound statements so you

00:19:31,910 --> 00:19:36,470
can get really fancy with this this

00:19:34,220 --> 00:19:38,840
applies to pillar top files it also

00:19:36,470 --> 00:19:41,030
applies to state top files it also

00:19:38,840 --> 00:19:43,700
applies to the way we ran it from the

00:19:41,030 --> 00:19:45,710
command line so we just showed an

00:19:43,700 --> 00:19:49,040
example when we did high state of a

00:19:45,710 --> 00:19:52,970
single server but you can match multiple

00:19:49,040 --> 00:19:56,840
servers with one command so we'll take

00:19:52,970 --> 00:19:59,500
let's go back and take here's our pillar

00:19:56,840 --> 00:20:02,570
we created my site branch develop and

00:19:59,500 --> 00:20:04,070
we're going to apply that to a state so

00:20:02,570 --> 00:20:06,620
here's an example we've got our

00:20:04,070 --> 00:20:09,950
application and we want to apply our

00:20:06,620 --> 00:20:12,170
develop branch to one server and our

00:20:09,950 --> 00:20:14,930
production branch to another server we

00:20:12,170 --> 00:20:18,650
can use a pillar to modify our state so

00:20:14,930 --> 00:20:21,170
we can you reuse the same state and when

00:20:18,650 --> 00:20:22,310
those when all those things merge the

00:20:21,170 --> 00:20:27,860
right thing happens on the

00:20:22,310 --> 00:20:30,380
right server or minion its Jinja so you

00:20:27,860 --> 00:20:33,950
can use some Python constructs inside

00:20:30,380 --> 00:20:36,800
here so in this example I'm gonna check

00:20:33,950 --> 00:20:39,890
the my site dictionary which is what it

00:20:36,800 --> 00:20:42,560
ends up being and if branch exists in

00:20:39,890 --> 00:20:46,280
there I'll use that value or if not I'm

00:20:42,560 --> 00:20:48,350
gonna use the value master as default so

00:20:46,280 --> 00:20:54,800
you can do all sorts of crazy stuff with

00:20:48,350 --> 00:20:56,450
Jinja inside these if you want to you

00:20:54,800 --> 00:20:57,770
can use grains and pillars you can use

00:20:56,450 --> 00:21:00,560
them in state so you can use them in

00:20:57,770 --> 00:21:03,290
files this is what using a grain looks

00:21:00,560 --> 00:21:07,310
like so in this example I'm gonna set a

00:21:03,290 --> 00:21:10,610
pillar in I'm gonna set the pillar name

00:21:07,310 --> 00:21:12,680
Redis max memory and there's a grain

00:21:10,610 --> 00:21:15,050
called mem total that's all the memory

00:21:12,680 --> 00:21:18,230
and my system in megabytes and I'm gonna

00:21:15,050 --> 00:21:22,280
say use half of that memory for this

00:21:18,230 --> 00:21:24,040
pillar Redis max memory so if I had 512

00:21:22,280 --> 00:21:29,930
megabytes in the system this is going to

00:21:24,040 --> 00:21:34,070
output 256 MB now I could write a state

00:21:29,930 --> 00:21:37,700
and in my state I am going to set my

00:21:34,070 --> 00:21:38,900
Redis comp file and I'm going to tell it

00:21:37,700 --> 00:21:40,850
that it is

00:21:38,900 --> 00:21:43,220
Jinja template there's other template

00:21:40,850 --> 00:21:44,840
languages available if you want to and I

00:21:43,220 --> 00:21:48,580
tell it where the source is this also

00:21:44,840 --> 00:21:51,470
lives in that /sr v / salt directory

00:21:48,580 --> 00:21:53,600
Redis kampf jinjos the name of the file

00:21:51,470 --> 00:21:54,830
and I pass it a set of defaults those

00:21:53,600 --> 00:21:56,900
are basically variables that are going

00:21:54,830 --> 00:22:00,620
to get used when this file gets rendered

00:21:56,900 --> 00:22:03,590
out to the server so that templates

00:22:00,620 --> 00:22:05,720
going to look like this it's it's not

00:22:03,590 --> 00:22:08,090
going to work as we've written it but

00:22:05,720 --> 00:22:10,700
when it gets dumped on to the minion

00:22:08,090 --> 00:22:12,770
that it's going to run that max memory

00:22:10,700 --> 00:22:17,980
variable is going to be replaced with

00:22:12,770 --> 00:22:21,290
the value we defined in our pillar here

00:22:17,980 --> 00:22:23,900
so you can get really dynamic with it

00:22:21,290 --> 00:22:25,460
you can apply this stuff really anywhere

00:22:23,900 --> 00:22:30,110
in the system inside pillars inside

00:22:25,460 --> 00:22:33,350
states inside files yeah so so that is

00:22:30,110 --> 00:22:35,450
kind of the basics of salt and setting

00:22:33,350 --> 00:22:38,899
up a server

00:22:35,450 --> 00:22:40,909
there are it's like the tiniest little

00:22:38,899 --> 00:22:44,480
subset of what salt can do but that's

00:22:40,909 --> 00:22:46,370
getting started with salt other things

00:22:44,480 --> 00:22:49,279
that are interesting in salt there's

00:22:46,370 --> 00:22:52,730
salt cloud salt cloud lets you bring up

00:22:49,279 --> 00:22:55,820
and down cloud servers in AWS or

00:22:52,730 --> 00:22:58,340
Rackspace or line out or digital ocean

00:22:55,820 --> 00:23:00,139
and they've got all the providers all

00:22:58,340 --> 00:23:03,710
the popular providers are in there so

00:23:00,139 --> 00:23:05,539
really awesome for maybe you want to

00:23:03,710 --> 00:23:09,529
test you can test your configurations

00:23:05,539 --> 00:23:11,450
you know spin up a server run it you

00:23:09,529 --> 00:23:13,370
know do a continuous integration and

00:23:11,450 --> 00:23:15,019
Jenkins make sure it gets configured

00:23:13,370 --> 00:23:16,220
properly and you can access your website

00:23:15,019 --> 00:23:20,179
and tear it all down when you're done

00:23:16,220 --> 00:23:22,760
and pay for five minutes of usage you

00:23:20,179 --> 00:23:25,789
can build custom modules so modules are

00:23:22,760 --> 00:23:28,639
the things that back like command dot

00:23:25,789 --> 00:23:31,760
run that we saw or get that latest you

00:23:28,639 --> 00:23:34,760
can do those in Python so I've written

00:23:31,760 --> 00:23:37,760
some custom modules that will probe for

00:23:34,760 --> 00:23:41,059
status on on certain systems so check my

00:23:37,760 --> 00:23:45,080
nginx status how many active connections

00:23:41,059 --> 00:23:49,809
does it have probe memcache status and

00:23:45,080 --> 00:23:54,320
push that somewhere the scheduler is

00:23:49,809 --> 00:23:56,090
pretty great it's like cron but probably

00:23:54,320 --> 00:23:59,779
easier to use I think and so you can

00:23:56,090 --> 00:24:02,299
schedule a certain tasks to run and also

00:23:59,779 --> 00:24:05,179
configure what happens to the output of

00:24:02,299 --> 00:24:07,970
that so this works really well for like

00:24:05,179 --> 00:24:10,039
system monitoring I can say you know

00:24:07,970 --> 00:24:13,870
check the load on this system and send

00:24:10,039 --> 00:24:16,250
send that info to graphite when I'm done

00:24:13,870 --> 00:24:18,260
there's custom renderers so what I

00:24:16,250 --> 00:24:21,590
showed you today is is yeah Mille in

00:24:18,260 --> 00:24:23,440
Jinja but you can use other things you

00:24:21,590 --> 00:24:27,019
can actually configure it in pure Python

00:24:23,440 --> 00:24:29,630
just just writing functional Python you

00:24:27,019 --> 00:24:31,880
can it has its own Python DSL if you

00:24:29,630 --> 00:24:33,730
thought the DSL is and chef and Ruby

00:24:31,880 --> 00:24:36,980
were or chef and puppet were a good idea

00:24:33,730 --> 00:24:40,190
and Maiko

00:24:36,980 --> 00:24:42,590
it has custom returners so when we ran

00:24:40,190 --> 00:24:44,419
the the states the first time it

00:24:42,590 --> 00:24:47,000
returned to the console and just spewed

00:24:44,419 --> 00:24:48,540
all that text out we instead could

00:24:47,000 --> 00:24:50,700
configure it to

00:24:48,540 --> 00:24:53,760
return to an email address so whenever

00:24:50,700 --> 00:24:57,450
anybody runs hi state I want to get an

00:24:53,760 --> 00:25:01,410
email to an OPS address to know you can

00:24:57,450 --> 00:25:04,980
return to graphite you can return to a

00:25:01,410 --> 00:25:06,570
century you can return to syslog so lots

00:25:04,980 --> 00:25:09,630
of different ways you can kind of handle

00:25:06,570 --> 00:25:12,510
the output of your salt commands and

00:25:09,630 --> 00:25:14,250
then finally the reactor this is

00:25:12,510 --> 00:25:17,370
something that I think is kind of unique

00:25:14,250 --> 00:25:18,930
to salt it's got this always on

00:25:17,370 --> 00:25:21,300
communication bus between all your

00:25:18,930 --> 00:25:23,070
servers and anything anytime salt is

00:25:21,300 --> 00:25:25,380
doing something in your system its

00:25:23,070 --> 00:25:27,990
firing events over that communication

00:25:25,380 --> 00:25:29,910
bus you can basically plug into it and

00:25:27,990 --> 00:25:33,150
listen to those events and react to them

00:25:29,910 --> 00:25:35,580
and do other things so you could say

00:25:33,150 --> 00:25:38,640
every time I run a high state

00:25:35,580 --> 00:25:41,460
I want to notify New Relic that a new

00:25:38,640 --> 00:25:44,040
deploy happened and and you know mark

00:25:41,460 --> 00:25:47,070
that in my history so I can see that in

00:25:44,040 --> 00:25:48,630
my graphs you can do that in yeah Mel

00:25:47,070 --> 00:25:51,120
directly or you can actually write

00:25:48,630 --> 00:25:54,570
Python scripts custom Python scripts

00:25:51,120 --> 00:25:58,290
that will listen and do stuff based on

00:25:54,570 --> 00:26:03,150
what's happening over that bus a few

00:25:58,290 --> 00:26:06,000
tips and tricks one the default output

00:26:03,150 --> 00:26:07,830
as you saw is really verbose I like to

00:26:06,000 --> 00:26:10,170
go into the minion configuration file

00:26:07,830 --> 00:26:13,560
and change the output mode to mixed that

00:26:10,170 --> 00:26:15,450
will show all your success statements as

00:26:13,560 --> 00:26:18,000
just one single line and anything that

00:26:15,450 --> 00:26:22,950
fails you get the full output on so it's

00:26:18,000 --> 00:26:25,050
easier to find problems - Jinja - is a

00:26:22,950 --> 00:26:28,320
seriously powerful template language

00:26:25,050 --> 00:26:30,540
don't go crazy with it like I said one

00:26:28,320 --> 00:26:33,540
of the benefits of configuration

00:26:30,540 --> 00:26:35,340
management is that you can look at the

00:26:33,540 --> 00:26:36,810
configuration files and understand

00:26:35,340 --> 00:26:39,390
what's happening and understand what

00:26:36,810 --> 00:26:41,550
your servers are doing if you go crazy

00:26:39,390 --> 00:26:44,400
with logic all over your templates or

00:26:41,550 --> 00:26:46,140
all over your configuration files you're

00:26:44,400 --> 00:26:49,140
not going to be able to reason what

00:26:46,140 --> 00:26:50,520
they're doing very easily and you don't

00:26:49,140 --> 00:26:52,440
want to have to debug that when you're

00:26:50,520 --> 00:26:58,380
dealing with important things like your

00:26:52,440 --> 00:27:01,050
servers update often they do releases

00:26:58,380 --> 00:27:02,809
pretty quickly and review the change log

00:27:01,050 --> 00:27:05,309
it's not often that they have

00:27:02,809 --> 00:27:07,289
backwards-compatibility stuff but I'm

00:27:05,309 --> 00:27:09,059
usually reviewing the changelog for kind

00:27:07,289 --> 00:27:13,169
of what new cool few features I can use

00:27:09,059 --> 00:27:15,330
that make the system better for me and

00:27:13,169 --> 00:27:18,450
then finally as far as testing before

00:27:15,330 --> 00:27:20,909
you deploy vagrant and docker are great

00:27:18,450 --> 00:27:23,850
tools here you can actually run your

00:27:20,909 --> 00:27:25,770
full set of salt states in a vagrant

00:27:23,850 --> 00:27:28,830
machine on your on your desktop your

00:27:25,770 --> 00:27:30,779
laptop you can run them in docker so

00:27:28,830 --> 00:27:32,669
kind of make sure do sanity checks

00:27:30,779 --> 00:27:35,460
before you push those out to production

00:27:32,669 --> 00:27:38,250
there's actually a project called salty

00:27:35,460 --> 00:27:43,409
vagrant which will help with that as

00:27:38,250 --> 00:27:46,049
well so that's all I have thank you very

00:27:43,409 --> 00:27:48,419
much for coming and I'm here for

00:27:46,049 --> 00:27:51,529
questions and I've got a booth we

00:27:48,419 --> 00:27:54,419
accompany Lincoln loop has a booth 6:15

00:27:51,529 --> 00:27:56,460
down in the expo hall so if you don't

00:27:54,419 --> 00:27:58,380
catch me here feel free to stop by there

00:27:56,460 --> 00:28:01,070
and I love to talk about this stuff so

00:27:58,380 --> 00:28:01,070
thank you

00:28:25,110 --> 00:28:30,299
it's hard to see the mic from here yes

00:28:28,499 --> 00:28:33,600
we have a question hi

00:28:30,299 --> 00:28:37,139
so say you were deploying for a lot of

00:28:33,600 --> 00:28:41,460
customers and you didn't really want

00:28:37,139 --> 00:28:43,619
them to see the contents of your salt

00:28:41,460 --> 00:28:45,450
configuration files because those

00:28:43,619 --> 00:28:46,769
contain say intellectual property that

00:28:45,450 --> 00:28:49,289
you didn't want to show them how could

00:28:46,769 --> 00:28:51,119
you obfuscate those on those hosts when

00:28:49,289 --> 00:28:52,799
the customers say don't have root but

00:28:51,119 --> 00:28:56,600
they do have user access they can SSH

00:28:52,799 --> 00:29:01,619
and stuff like that huh

00:28:56,600 --> 00:29:03,929
well you could set up you can set up

00:29:01,619 --> 00:29:05,789
multiple masters which might be an

00:29:03,929 --> 00:29:08,669
option so maybe you have a master for

00:29:05,789 --> 00:29:14,429
each customer

00:29:08,669 --> 00:29:17,129
the the I don't know the default

00:29:14,429 --> 00:29:18,989
permissions of the cache that that where

00:29:17,129 --> 00:29:21,539
all those state files are get cache but

00:29:18,989 --> 00:29:23,820
I don't if I remember correctly it's

00:29:21,539 --> 00:29:25,499
it's not going to push all your state

00:29:23,820 --> 00:29:28,169
files down to the minion just the ones

00:29:25,499 --> 00:29:29,700
that apply to that minion and it may be

00:29:28,169 --> 00:29:30,899
possible that if they didn't have root

00:29:29,700 --> 00:29:39,330
you could make them so they weren't

00:29:30,899 --> 00:29:43,320
readable by it by that user the problem

00:29:39,330 --> 00:29:44,629
had with salty vagrant when I tried to

00:29:43,320 --> 00:29:47,070
actually use it for testing is that

00:29:44,629 --> 00:29:49,470
vagrant isn't happy assigning specific

00:29:47,070 --> 00:29:51,809
network addresses yes when you spin up

00:29:49,470 --> 00:29:54,269
multiple vagrants yes which means they

00:29:51,809 --> 00:29:57,090
can't find the salt server is there some

00:29:54,269 --> 00:29:59,759
kind of an easy fix for that okay so

00:29:57,090 --> 00:30:02,279
when I've used it I've just done it for

00:29:59,759 --> 00:30:05,580
a single servers or a single server

00:30:02,279 --> 00:30:08,309
setup so I haven't had an issue with it

00:30:05,580 --> 00:30:11,039
finding the the salt server because I'm

00:30:08,309 --> 00:30:12,929
basically pushing the states down and

00:30:11,039 --> 00:30:15,570
running it master master list basically

00:30:12,929 --> 00:30:19,679
all the all the states go on to that

00:30:15,570 --> 00:30:22,619
vagrant box and then spin up as far as

00:30:19,679 --> 00:30:25,669
running yeah I'm not sure how you would

00:30:22,619 --> 00:30:28,799
do a multi setup

00:30:25,669 --> 00:30:31,460
there's some interesting stuff there's a

00:30:28,799 --> 00:30:35,279
something called salt mine which lets

00:30:31,460 --> 00:30:36,749
minions talk to minions I think so maybe

00:30:35,279 --> 00:30:38,100
it's possible that you could kind of

00:30:36,749 --> 00:30:41,760
query for where

00:30:38,100 --> 00:30:43,309
the master is dynamically and set

00:30:41,760 --> 00:30:46,500
something up

00:30:43,309 --> 00:30:48,030
yeah I'm not I'm not quite sure but yeah

00:30:46,500 --> 00:30:50,340
like I said most most of the time I'm

00:30:48,030 --> 00:30:52,919
doing it for a single box and it works

00:30:50,340 --> 00:30:54,390
we've just masterless set up but I'm not

00:30:52,919 --> 00:30:57,289
sure how you would dynamically do that

00:30:54,390 --> 00:30:57,289
otherwise Oh

00:31:08,820 --> 00:31:17,400
okay so yeah there what's the name of

00:31:11,040 --> 00:31:19,950
that project boasts manator host manator

00:31:17,400 --> 00:31:23,190
okay so yeah maybe there's a possibility

00:31:19,950 --> 00:31:28,110
to inject info into your host file and

00:31:23,190 --> 00:31:29,490
make that work hi I have a question I

00:31:28,110 --> 00:31:32,340
know that salt implemented its own

00:31:29,490 --> 00:31:35,100
crypto could you please go into the

00:31:32,340 --> 00:31:39,990
reasons behind that and why it is a good

00:31:35,100 --> 00:31:42,930
thing I'm not a a salt developer I work

00:31:39,990 --> 00:31:46,920
with salt I

00:31:42,930 --> 00:31:51,270
I think that's holdover I think they're

00:31:46,920 --> 00:31:54,540
pretty aware that maybe there are better

00:31:51,270 --> 00:32:01,830
options there and just haven't gotten to

00:31:54,540 --> 00:32:03,540
it I think if you're very concerned

00:32:01,830 --> 00:32:07,440
about the crypto there are other options

00:32:03,540 --> 00:32:10,200
you can you know basically firewall

00:32:07,440 --> 00:32:12,270
stuff you can make sure your minions can

00:32:10,200 --> 00:32:15,180
only talk to you know the master over

00:32:12,270 --> 00:32:19,680
that port and maybe just trusted it as

00:32:15,180 --> 00:32:21,630
you know encryption so yeah I think the

00:32:19,680 --> 00:32:23,940
only reason that is in there now there's

00:32:21,630 --> 00:32:26,750
a there's a long-running issue and

00:32:23,940 --> 00:32:29,040
github about their crypto implementation

00:32:26,750 --> 00:32:33,990
there's kind of two issues with that one

00:32:29,040 --> 00:32:37,050
is it's it's using m2 crypto which is

00:32:33,990 --> 00:32:40,740
sort of slowly dying in the Python world

00:32:37,050 --> 00:32:42,530
and so they can't I think it's not

00:32:40,740 --> 00:32:46,410
Python 3 compatible it requires

00:32:42,530 --> 00:32:48,960
compiling so it's not pure Python and

00:32:46,410 --> 00:32:51,240
then the other one is you know are there

00:32:48,960 --> 00:32:55,980
more secure ways of doing it

00:32:51,240 --> 00:32:58,200
so I think it's a known issue it just is

00:32:55,980 --> 00:33:01,830
probably a development bandwidth issue

00:32:58,200 --> 00:33:04,980
at this point there's I know they were

00:33:01,830 --> 00:33:09,750
looking at keys are that that Google has

00:33:04,980 --> 00:33:13,950
there's another project called NaCl that

00:33:09,750 --> 00:33:16,380
has a little more vetted crypto stuff so

00:33:13,950 --> 00:33:19,490
yeah I don't know exactly why but I

00:33:16,380 --> 00:33:19,490
would say it's mostly legacy

00:33:21,450 --> 00:33:25,790
if there are no more questions thank you

00:33:23,250 --> 00:33:25,790
very much Peter

00:33:30,070 --> 00:33:34,630
so PyCon is a conference that relies on

00:33:32,230 --> 00:33:37,570
volunteers and sponsors for keeping the

00:33:34,630 --> 00:33:39,430
entrance fee low and so we really want

00:33:37,570 --> 00:33:40,630
to thank this particular sponsor go meet

00:33:39,430 --> 00:33:42,910
him in the booths and say how much you

00:33:40,630 --> 00:33:44,110
love them volunteers as well somebody

00:33:42,910 --> 00:33:47,020
asked me like how did you get this job

00:33:44,110 --> 00:33:48,790
like the one I do there's a way of

00:33:47,020 --> 00:33:50,920
signing up before the conference starts

00:33:48,790 --> 00:33:52,660
so anybody can do this kind of job we

00:33:50,920 --> 00:33:55,420
all volunteer we know I don't get paid

00:33:52,660 --> 00:33:59,020
for this and the third one is there's a

00:33:55,420 --> 00:34:01,260
break right now in room 220 de so see

00:33:59,020 --> 00:34:01,260

YouTube URL: https://www.youtube.com/watch?v=mXjLhFUruzA


