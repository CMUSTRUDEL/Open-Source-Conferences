Title: Carl Meyer: Set your code free: releasing and maintaining an open-source Python project - PyCon 2014
Publication date: 2014-04-24
Playlist: PyCon 2014
Description: 
	Speaker: Carl Meyer

Got some code that you've written that would be useful to others, but actually releasing it feels like too much new stuff to figure out? Releasing software does take some work, but this talk will take you step-by-step through the process with specific recommendations and tools. We'll cover preparing your code for release, packaging it, releasing it, and maintaining it over time.

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:01,730 --> 00:00:08,189
good afternoon everyone thank you so

00:00:05,130 --> 00:00:09,300
much this is the last session I want you

00:00:08,189 --> 00:00:14,639
guys to give yourselves a round of

00:00:09,300 --> 00:00:16,770
applause you made it I hope you guys had

00:00:14,639 --> 00:00:20,730
a fantastic time this has been a great

00:00:16,770 --> 00:00:23,580
conference just final note i do want to

00:00:20,730 --> 00:00:25,289
push the sprints one last time as you

00:00:23,580 --> 00:00:28,019
may well know this is not the last day

00:00:25,289 --> 00:00:31,130
of pike on their arse development

00:00:28,019 --> 00:00:33,719
sprints happening tomorrow onwards and

00:00:31,130 --> 00:00:35,760
this is the best time to work with the

00:00:33,719 --> 00:00:38,040
world's best Python programmers the

00:00:35,760 --> 00:00:39,930
world's best minds in the you know like

00:00:38,040 --> 00:00:41,730
in this city you have the advantage of

00:00:39,930 --> 00:00:45,120
working on high-profile projects like

00:00:41,730 --> 00:00:46,620
mercurial and pi PI and pyramid and all

00:00:45,120 --> 00:00:49,620
sorts of other projects including

00:00:46,620 --> 00:00:51,690
getting help for your own projects at

00:00:49,620 --> 00:00:54,989
the end of the lightning talks which I

00:00:51,690 --> 00:00:57,660
highly encourage that you go to you will

00:00:54,989 --> 00:00:59,070
be able to pitch for 20 seconds one of

00:00:57,660 --> 00:01:01,739
our products that you want to have help

00:00:59,070 --> 00:01:03,300
with please go there pitch a project but

00:01:01,739 --> 00:01:05,640
any kind of project that you've wanted

00:01:03,300 --> 00:01:08,610
to have advice on even if it's really a

00:01:05,640 --> 00:01:11,880
little hobby thing go and pitch it show

00:01:08,610 --> 00:01:13,110
up to the sprints or if you get really

00:01:11,880 --> 00:01:15,390
excited about someone else's project

00:01:13,110 --> 00:01:19,770
please go and contributes the best way

00:01:15,390 --> 00:01:23,360
to get started in open source now it's

00:01:19,770 --> 00:01:26,340
my pleasure to introduce Carl Meyer who

00:01:23,360 --> 00:01:28,470
when he's not hacking on Python plays a

00:01:26,340 --> 00:01:29,820
mean ultimate frisbee and he's going to

00:01:28,470 --> 00:01:32,340
be talking about setting your code free

00:01:29,820 --> 00:01:33,930
releasing and maintaining an open-source

00:01:32,340 --> 00:01:36,170
Python library please a big round of

00:01:33,930 --> 00:01:36,170
pause

00:01:41,790 --> 00:01:47,650
thank you I'm Carl Meyer I work for odd

00:01:45,490 --> 00:01:49,930
bird we build web applications and do

00:01:47,650 --> 00:01:51,550
Python code consultation and review so

00:01:49,930 --> 00:01:54,430
if you want to hire us you can let me

00:01:51,550 --> 00:01:55,870
know I'll be talking about releasing and

00:01:54,430 --> 00:01:59,470
maintaining your first open source

00:01:55,870 --> 00:02:02,740
Python library the premise of this talk

00:01:59,470 --> 00:02:04,060
is that you have code writing that code

00:02:02,740 --> 00:02:07,260
is outside the scope of this particular

00:02:04,060 --> 00:02:09,940
talk we presume that you have it already

00:02:07,260 --> 00:02:12,250
we're presuming also that you want me to

00:02:09,940 --> 00:02:14,770
use your code and the particular means

00:02:12,250 --> 00:02:16,840
is via pip install there's other methods

00:02:14,770 --> 00:02:19,270
of getting your code to users web

00:02:16,840 --> 00:02:22,240
application deployment or creating GUI

00:02:19,270 --> 00:02:24,370
installers or operating system packages

00:02:22,240 --> 00:02:26,140
those methods of getting code to users

00:02:24,370 --> 00:02:30,610
are also outside the scope of this talk

00:02:26,140 --> 00:02:32,050
will be discussing pip install and the

00:02:30,610 --> 00:02:35,260
other premise is that you want me to

00:02:32,050 --> 00:02:36,850
contribute to your code and presumably

00:02:35,260 --> 00:02:38,350
you want to be able to accept my

00:02:36,850 --> 00:02:41,770
contributions without breaking your

00:02:38,350 --> 00:02:43,270
software or losing your sanity so you

00:02:41,770 --> 00:02:44,470
look up some documentation on the

00:02:43,270 --> 00:02:51,430
internet about how to do this with a

00:02:44,470 --> 00:02:53,580
python project and you may find more

00:02:51,430 --> 00:02:55,720
than one source of information and

00:02:53,580 --> 00:02:57,730
documentation and more than one relevant

00:02:55,720 --> 00:02:59,320
project and it might be a little

00:02:57,730 --> 00:03:01,750
confusing finding your way through and

00:02:59,320 --> 00:03:03,790
navigating the various advice and

00:03:01,750 --> 00:03:05,920
documentation when you're doing

00:03:03,790 --> 00:03:08,200
something for the first time too many

00:03:05,920 --> 00:03:10,660
choices can kill your motivation to

00:03:08,200 --> 00:03:13,840
finish it so this talk the idea is to

00:03:10,660 --> 00:03:15,220
present a set of rails for releasing and

00:03:13,840 --> 00:03:17,440
maintaining your first open source

00:03:15,220 --> 00:03:18,850
python project it's not the only way to

00:03:17,440 --> 00:03:20,709
do it there are many choices that you

00:03:18,850 --> 00:03:23,470
could make this is one set of choices

00:03:20,709 --> 00:03:25,870
that can work so we'll be long on

00:03:23,470 --> 00:03:28,840
opinions here short on choices the idea

00:03:25,870 --> 00:03:31,120
is from 0 to awesome in 20 minutes some

00:03:28,840 --> 00:03:34,590
of the awesome that will have after 20

00:03:31,120 --> 00:03:37,450
minutes are over includes public HTML

00:03:34,590 --> 00:03:39,130
documentation with a responsive theme

00:03:37,450 --> 00:03:42,310
that automatically updates when you push

00:03:39,130 --> 00:03:43,780
to your repo tests that automatically

00:03:42,310 --> 00:03:47,049
run every time you push to your

00:03:43,780 --> 00:03:48,549
repository a pip install working and a

00:03:47,049 --> 00:03:50,650
project that's welcoming to new

00:03:48,549 --> 00:03:50,980
contributors and if you've done this

00:03:50,650 --> 00:03:52,180
before

00:03:50,980 --> 00:03:54,010
or if you're already the owner of a

00:03:52,180 --> 00:03:57,569
Python open source project hopefully

00:03:54,010 --> 00:03:59,560
you'll still pick up a new trick or two

00:03:57,569 --> 00:04:01,860
the roadmap for this presentation

00:03:59,560 --> 00:04:05,140
includes talking about project structure

00:04:01,860 --> 00:04:08,200
choosing a license where to host your

00:04:05,140 --> 00:04:10,480
code your documentation testing and

00:04:08,200 --> 00:04:12,299
continuous integration packaging your

00:04:10,480 --> 00:04:14,410
code so people can install it and

00:04:12,299 --> 00:04:16,150
setting up a community around your

00:04:14,410 --> 00:04:21,820
project that's welcoming to new

00:04:16,150 --> 00:04:23,680
contributors here's a bare-bones project

00:04:21,820 --> 00:04:25,990
structure for a hypothetical project

00:04:23,680 --> 00:04:28,000
I've named the hypothetical project PI

00:04:25,990 --> 00:04:29,770
fly which I was shocked to discover is

00:04:28,000 --> 00:04:33,130
not yet registered on the Python package

00:04:29,770 --> 00:04:35,380
index so consider this the zero day for

00:04:33,130 --> 00:04:36,789
that we'll see who's the first to

00:04:35,380 --> 00:04:40,510
register it and build something under

00:04:36,789 --> 00:04:42,310
that name we'll have a docs directory

00:04:40,510 --> 00:04:44,470
within our outer repository directory

00:04:42,310 --> 00:04:46,060
where a documentation will live will

00:04:44,470 --> 00:04:47,949
have a top-level python package

00:04:46,060 --> 00:04:50,199
containing all of your python code

00:04:47,949 --> 00:04:52,930
that's marked with at least under in it

00:04:50,199 --> 00:04:55,419
pi file and probably some other python

00:04:52,930 --> 00:05:00,280
modules will have a test directory where

00:04:55,419 --> 00:05:02,310
our tests live a license file manifests

00:05:00,280 --> 00:05:05,500
dot in we'll talk about a little later a

00:05:02,310 --> 00:05:07,120
readme and a setup pi which is what

00:05:05,500 --> 00:05:11,050
makes your package installable by other

00:05:07,120 --> 00:05:12,400
users the first decision you have to

00:05:11,050 --> 00:05:14,080
make if you're going to release some

00:05:12,400 --> 00:05:16,389
code is open source is what license you

00:05:14,080 --> 00:05:18,039
will release it under obligatory

00:05:16,389 --> 00:05:21,220
disclaimer I'm not a lawyer none of

00:05:18,039 --> 00:05:23,380
what's on this slide is legal advice but

00:05:21,220 --> 00:05:26,470
your license is the conditions under

00:05:23,380 --> 00:05:28,360
which I may use your code if you don't

00:05:26,470 --> 00:05:30,729
have a license the default is all rights

00:05:28,360 --> 00:05:32,560
reserved so the fact that you've pushed

00:05:30,729 --> 00:05:34,419
your code to github does not mean i can

00:05:32,560 --> 00:05:38,020
use it if it doesn't have an open source

00:05:34,419 --> 00:05:39,460
licence then you have not given me any

00:05:38,020 --> 00:05:43,300
conditions under which i'm allowed to

00:05:39,460 --> 00:05:45,789
use your code if you aren't sure what

00:05:43,300 --> 00:05:50,650
license to use i recommend starting with

00:05:45,789 --> 00:05:52,389
bsd or MIT license these are less

00:05:50,650 --> 00:05:53,889
restrictive open-source licenses

00:05:52,389 --> 00:05:56,530
essentially all you asked from your

00:05:53,889 --> 00:05:58,030
users is that if they modify or

00:05:56,530 --> 00:06:00,280
redistribute your code they preserve

00:05:58,030 --> 00:06:01,719
your name attached to it so you keep

00:06:00,280 --> 00:06:04,360
your credit for writing the code and

00:06:01,719 --> 00:06:04,620
they preserve the license under which

00:06:04,360 --> 00:06:08,370
you

00:06:04,620 --> 00:06:09,840
release the code that you wrote so if

00:06:08,370 --> 00:06:12,330
your interest isn't having people use

00:06:09,840 --> 00:06:15,419
your software almost anyone can use your

00:06:12,330 --> 00:06:17,370
software under those conditions other

00:06:15,419 --> 00:06:20,430
reasonable alternatives if you know why

00:06:17,370 --> 00:06:22,380
you need them include the GPL or lgpl

00:06:20,430 --> 00:06:25,680
the apache license or the mozilla public

00:06:22,380 --> 00:06:28,830
license the GPL in particular is a bit

00:06:25,680 --> 00:06:30,660
more restrictive it requires anyone

00:06:28,830 --> 00:06:32,729
redistributing or modifying your code to

00:06:30,660 --> 00:06:34,680
release all of their contributions under

00:06:32,729 --> 00:06:36,630
the same license if you're concerned

00:06:34,680 --> 00:06:38,430
about freeloaders you may think about

00:06:36,630 --> 00:06:40,260
that it will probably mean that some

00:06:38,430 --> 00:06:44,610
people choose not to use your software

00:06:40,260 --> 00:06:47,699
so that's the trade-off don't use any

00:06:44,610 --> 00:06:50,490
other licenses besides these the goal

00:06:47,699 --> 00:06:52,320
the goal of the license is to clarify

00:06:50,490 --> 00:06:54,090
for someone else the terms under which

00:06:52,320 --> 00:06:55,470
they can use their software and reduce

00:06:54,090 --> 00:06:56,760
their concern that they'll be getting

00:06:55,470 --> 00:06:58,710
into legal trouble by using yourself

00:06:56,760 --> 00:07:01,229
twere if you use a less well-known

00:06:58,710 --> 00:07:03,960
license you're simply giving potential

00:07:01,229 --> 00:07:06,090
users of your software a reason to

00:07:03,960 --> 00:07:07,380
question whether it's safe to use you

00:07:06,090 --> 00:07:09,300
don't want someone considering using

00:07:07,380 --> 00:07:11,580
your code to feel like they have to go

00:07:09,300 --> 00:07:13,680
ask their legal department whether it's

00:07:11,580 --> 00:07:15,419
safe to do so so you avoid that by using

00:07:13,680 --> 00:07:18,229
a well-known and common license and you

00:07:15,419 --> 00:07:21,750
help to avoid license proliferation

00:07:18,229 --> 00:07:23,340
quick hat tip most of the advice on this

00:07:21,750 --> 00:07:25,229
slide comes from a lightning talk that

00:07:23,340 --> 00:07:28,500
Jacob Kaplan Moss gave at django Connie

00:07:25,229 --> 00:07:30,330
you 2010 if you find my slides online

00:07:28,500 --> 00:07:33,180
later this is a link to that lightning

00:07:30,330 --> 00:07:37,530
talk and you can view see that advice in

00:07:33,180 --> 00:07:39,690
a little more depth so here's a sample

00:07:37,530 --> 00:07:42,389
of how we apply a license to our code we

00:07:39,690 --> 00:07:44,070
simply put in the license txt file or in

00:07:42,389 --> 00:07:47,039
some cases some people call the file

00:07:44,070 --> 00:07:49,680
copying the text of the license you want

00:07:47,039 --> 00:07:51,960
to use this is the two claws BSD license

00:07:49,680 --> 00:07:55,800
one of the ones i recommend it as a good

00:07:51,960 --> 00:07:57,210
choice we got a lot of items to get

00:07:55,800 --> 00:07:58,199
through this talk so thankfully some of

00:07:57,210 --> 00:07:59,849
them are going to be very short and

00:07:58,199 --> 00:08:01,260
sweet and this is one of them you should

00:07:59,849 --> 00:08:05,460
host your code on github because that's

00:08:01,260 --> 00:08:08,090
where the people are documentation is

00:08:05,460 --> 00:08:11,580
another one that's short and sweet I

00:08:08,090 --> 00:08:14,070
like reading code I read a lot of code I

00:08:11,580 --> 00:08:16,110
will happily read your code to find a

00:08:14,070 --> 00:08:18,420
bug to find out what I'm doing wrong to

00:08:16,110 --> 00:08:20,970
fix a bug or just a better understand

00:08:18,420 --> 00:08:22,530
what your library does but if I have to

00:08:20,970 --> 00:08:24,150
read your code in order to even start

00:08:22,530 --> 00:08:26,040
using it to figure out the very first

00:08:24,150 --> 00:08:28,530
step of what I need to call in what

00:08:26,040 --> 00:08:29,910
order to make it do a thing then I'm

00:08:28,530 --> 00:08:31,530
probably going to decide that it's

00:08:29,910 --> 00:08:33,060
easier just to write it myself or I'll

00:08:31,530 --> 00:08:37,920
use a competing library for the same

00:08:33,060 --> 00:08:39,510
purpose fortunately how to write your

00:08:37,920 --> 00:08:41,580
docs and how to host them are also very

00:08:39,510 --> 00:08:43,740
easy choices these days you should write

00:08:41,580 --> 00:08:45,600
your docs using Sphinx which is the tool

00:08:43,740 --> 00:08:47,670
that pythons own docs are written in and

00:08:45,600 --> 00:08:53,070
you should host your docs at read the

00:08:47,670 --> 00:08:54,930
docs to get started with sphinx will pip

00:08:53,070 --> 00:08:57,840
install it change into the docs

00:08:54,930 --> 00:08:59,940
directory we're on the Sphinx QuickStart

00:08:57,840 --> 00:09:02,040
tool which will just ask you a series of

00:08:59,940 --> 00:09:04,080
questions for your first time most

00:09:02,040 --> 00:09:06,590
likely the default answer to every one

00:09:04,080 --> 00:09:08,900
of those questions will serve just fine

00:09:06,590 --> 00:09:10,920
once you've answered all those questions

00:09:08,900 --> 00:09:12,390
you'll have a number of files in your

00:09:10,920 --> 00:09:14,910
docs directory and one of them will be

00:09:12,390 --> 00:09:16,650
index rst and you can just jump right

00:09:14,910 --> 00:09:19,320
into indexed rst and start writing

00:09:16,650 --> 00:09:21,750
documentation Sphinx docs are written in

00:09:19,320 --> 00:09:23,370
the restructured txt format if you

00:09:21,750 --> 00:09:25,860
haven't written restructured text before

00:09:23,370 --> 00:09:27,420
it's very easy to get started with we

00:09:25,860 --> 00:09:28,650
have underlined headers we can have

00:09:27,420 --> 00:09:30,930
different layers of headers with

00:09:28,650 --> 00:09:33,720
different underlined characters we can

00:09:30,930 --> 00:09:36,360
have inline formatting bold we can have

00:09:33,720 --> 00:09:37,950
code literals in line and we can have

00:09:36,360 --> 00:09:40,050
code examples just introduced with a

00:09:37,950 --> 00:09:43,320
double colon and this code example

00:09:40,050 --> 00:09:49,020
automatically the syntax highlighted as

00:09:43,320 --> 00:09:52,520
Python code even if you write exactly

00:09:49,020 --> 00:09:55,350
this much documentation for your package

00:09:52,520 --> 00:09:57,240
it's already miles ahead of a package

00:09:55,350 --> 00:09:58,680
without any documentation I can look at

00:09:57,240 --> 00:10:00,600
this and I already understand to do the

00:09:58,680 --> 00:10:03,210
most basic thing with your package this

00:10:00,600 --> 00:10:08,250
is what I need to do and this this would

00:10:03,210 --> 00:10:10,980
take five minutes to write so then we'll

00:10:08,250 --> 00:10:14,250
run make HTML to generate an HTML

00:10:10,980 --> 00:10:16,080
version of our documentation and after

00:10:14,250 --> 00:10:18,900
we've done that sphynx gives us this a

00:10:16,080 --> 00:10:21,990
nice table of contents based on our

00:10:18,900 --> 00:10:24,950
header structure we see all our syntax

00:10:21,990 --> 00:10:29,040
highlighting their and our code example

00:10:24,950 --> 00:10:30,360
so you just get HTML files so then we

00:10:29,040 --> 00:10:31,830
want to host these publicly and for that

00:10:30,360 --> 00:10:34,080
we'll use read the docs

00:10:31,830 --> 00:10:35,760
so we go to read the docs org give read

00:10:34,080 --> 00:10:37,830
the docs a few pieces of information a

00:10:35,760 --> 00:10:41,130
name for our package and the repository

00:10:37,830 --> 00:10:43,620
URL and then we head over to github and

00:10:41,130 --> 00:10:45,590
activate the read the docs web hook from

00:10:43,620 --> 00:10:48,840
the long list of github web hooks and

00:10:45,590 --> 00:10:51,060
then push to our project and we'll have

00:10:48,840 --> 00:10:52,890
documentation built hosted publicly it

00:10:51,060 --> 00:10:55,440
read the docs org using their theme

00:10:52,890 --> 00:10:57,180
which is mobile responsive there you can

00:10:55,440 --> 00:10:58,650
build multiple versions of your docs

00:10:57,180 --> 00:11:00,270
it'll automatically build one for

00:10:58,650 --> 00:11:02,490
various tags or branches in your code

00:11:00,270 --> 00:11:04,110
base and gives you a version Switzer for

00:11:02,490 --> 00:11:12,240
people to choose which version they want

00:11:04,110 --> 00:11:14,610
to read if your code is changing over

00:11:12,240 --> 00:11:17,700
time and you don't have automated tests

00:11:14,610 --> 00:11:19,920
for it or else a QA staff over time the

00:11:17,700 --> 00:11:24,480
likelihood of that code being broken

00:11:19,920 --> 00:11:27,630
approaches one having tests is important

00:11:24,480 --> 00:11:32,690
for any code but for open source code it

00:11:27,630 --> 00:11:35,280
can be especially important here's in

00:11:32,690 --> 00:11:37,680
that open source libraries often have is

00:11:35,280 --> 00:11:39,840
the dependency matrix problem if we have

00:11:37,680 --> 00:11:41,910
five versions of Python that we want to

00:11:39,840 --> 00:11:43,770
support and five versions of a

00:11:41,910 --> 00:11:45,090
dependency say Django in this case if

00:11:43,770 --> 00:11:49,440
we're writing a project that depends on

00:11:45,090 --> 00:11:52,200
django now we have 25 different boxes

00:11:49,440 --> 00:11:54,150
here that represent environments that we

00:11:52,200 --> 00:11:55,920
ideally should be testing if we really

00:11:54,150 --> 00:11:59,310
mean to support all of these versions of

00:11:55,920 --> 00:12:01,710
all these dependencies if you aren't

00:11:59,310 --> 00:12:03,120
actually creating 25 virtual ends and

00:12:01,710 --> 00:12:05,130
running your tests under any one of

00:12:03,120 --> 00:12:06,600
those environments then your claim to

00:12:05,130 --> 00:12:08,550
support all of those environments is

00:12:06,600 --> 00:12:11,430
purely theoretical and over time it's

00:12:08,550 --> 00:12:14,660
almost certainly not true fortunately

00:12:11,430 --> 00:12:18,150
there's a tool to help with this problem

00:12:14,660 --> 00:12:19,680
the tox tool with one command talks will

00:12:18,150 --> 00:12:20,820
create a whole bunch of virtual ends all

00:12:19,680 --> 00:12:22,470
the ones that you need for all the

00:12:20,820 --> 00:12:24,480
environments you need to test inside and

00:12:22,470 --> 00:12:29,670
it will run your tests in all of those

00:12:24,480 --> 00:12:32,730
environments here's an example the very

00:12:29,670 --> 00:12:35,430
simple talks setup you place your talks

00:12:32,730 --> 00:12:38,040
configuration in a tox ini file in the

00:12:35,430 --> 00:12:39,960
root of your repository you give it a

00:12:38,040 --> 00:12:41,550
list of the environments in which you

00:12:39,960 --> 00:12:43,800
want to run your tests this is a very

00:12:41,550 --> 00:12:45,630
simple hochstein I we're just running

00:12:43,800 --> 00:12:47,900
our tests under Python 2.7

00:12:45,630 --> 00:12:50,010
in Python 3 dot 4 and under pie pie

00:12:47,900 --> 00:12:52,080
originally I had only the first two but

00:12:50,010 --> 00:12:53,850
then Alex gainer looked over my shoulder

00:12:52,080 --> 00:12:55,470
and saw my slides and then tied me up

00:12:53,850 --> 00:13:00,750
and wouldn't let me go until I added pie

00:12:55,470 --> 00:13:02,730
pie then we also define the dependencies

00:13:00,750 --> 00:13:04,200
for testing our project so in this case

00:13:02,730 --> 00:13:06,330
we'll say we want to install pie tests

00:13:04,200 --> 00:13:08,160
and then the commands that need to be

00:13:06,330 --> 00:13:10,200
run to test our project in this case

00:13:08,160 --> 00:13:11,430
we'll just run pi dot test you can stick

00:13:10,200 --> 00:13:13,440
anything in here that you can run at a

00:13:11,430 --> 00:13:14,580
shell prompt and talks will decide

00:13:13,440 --> 00:13:18,390
whether your tests passed or failed

00:13:14,580 --> 00:13:20,220
simply based on the return code so you

00:13:18,390 --> 00:13:23,340
can use any kind of testing frame where

00:13:20,220 --> 00:13:25,380
you can imagine with talks you can of

00:13:23,340 --> 00:13:27,710
course do much more complex things talks

00:13:25,380 --> 00:13:29,970
can handle the full matrix of

00:13:27,710 --> 00:13:32,970
dependencies and python versions that we

00:13:29,970 --> 00:13:34,380
saw in the previous matrix i'm showing a

00:13:32,970 --> 00:13:35,730
very simple example here if you want to

00:13:34,380 --> 00:13:37,020
see how to do more complex things you

00:13:35,730 --> 00:13:38,400
can check the documentation or I'd be

00:13:37,020 --> 00:13:41,850
happy to show you some real life

00:13:38,400 --> 00:13:45,090
examples after the talk when we run

00:13:41,850 --> 00:13:46,920
talks it creates it packages up our

00:13:45,090 --> 00:13:49,020
project it creates a virtual end for

00:13:46,920 --> 00:13:51,390
Python 2.7 in this case it installs our

00:13:49,020 --> 00:13:53,670
dependencies installs our project into

00:13:51,390 --> 00:13:55,320
the virtual end runs our tests here we

00:13:53,670 --> 00:13:58,140
see the output from PI tests running our

00:13:55,320 --> 00:13:59,880
tests 33 tests passed and then you'll

00:13:58,140 --> 00:14:04,560
see exactly the same output for Python

00:13:59,880 --> 00:14:06,300
3.4 and again for pi PI and then at the

00:14:04,560 --> 00:14:08,190
end it informs us that our tests passed

00:14:06,300 --> 00:14:11,970
on all three environments and gives us a

00:14:08,190 --> 00:14:13,680
smiley face so you have talks setup

00:14:11,970 --> 00:14:15,210
that's great with one command you can

00:14:13,680 --> 00:14:16,950
run tests and verify that you support

00:14:15,210 --> 00:14:19,500
all the environments you claim to so you

00:14:16,950 --> 00:14:21,660
get a pull request from someone so you

00:14:19,500 --> 00:14:23,910
open your terminal you add the source of

00:14:21,660 --> 00:14:25,980
the pull request as a git remote you

00:14:23,910 --> 00:14:28,370
fetch that branch the source branch for

00:14:25,980 --> 00:14:30,630
the poor request and then you run talks

00:14:28,370 --> 00:14:32,280
so it's still a lot nicer than having to

00:14:30,630 --> 00:14:33,300
run your test 25 times for that poor

00:14:32,280 --> 00:14:35,250
request but there's still a bit of

00:14:33,300 --> 00:14:37,380
boilerplate work in there you have to do

00:14:35,250 --> 00:14:39,900
to review a pull request wouldn't it be

00:14:37,380 --> 00:14:42,090
nice if when you first looked at a pull

00:14:39,900 --> 00:14:45,030
request to your project you already knew

00:14:42,090 --> 00:14:46,710
whether the test passed or failed this

00:14:45,030 --> 00:14:49,170
used to be a hard thing to do to set up

00:14:46,710 --> 00:14:51,450
today fortunately it's easy thanks to a

00:14:49,170 --> 00:14:53,730
number of services 1 i'll talk about

00:14:51,450 --> 00:14:56,339
today is travis CI org because it's the

00:14:53,730 --> 00:14:57,870
one I've used drone do i think is

00:14:56,339 --> 00:14:59,330
another service that does similar things

00:14:57,870 --> 00:15:03,270
there may be others

00:14:59,330 --> 00:15:05,550
Travis CI will provide continuous

00:15:03,270 --> 00:15:09,960
integration for free for public github

00:15:05,550 --> 00:15:12,390
projects to use it it's very easy go to

00:15:09,960 --> 00:15:14,580
Travis CI org login with your github

00:15:12,390 --> 00:15:16,529
account using OAuth it will give you a

00:15:14,580 --> 00:15:18,870
list of all of your public get github

00:15:16,529 --> 00:15:20,400
repositories and you simply click the on

00:15:18,870 --> 00:15:23,460
button for any of them that you want to

00:15:20,400 --> 00:15:25,470
run your tests on Travis CI org and it

00:15:23,460 --> 00:15:29,190
will automatically set up the web hook

00:15:25,470 --> 00:15:30,540
on github for those projects second

00:15:29,190 --> 00:15:32,730
thing we have to do is tell Travis how

00:15:30,540 --> 00:15:35,400
to run our tests we do this via Travis

00:15:32,730 --> 00:15:37,830
yeah mol file in our repository it

00:15:35,400 --> 00:15:39,510
serves a similar purpose to the toxin I

00:15:37,830 --> 00:15:41,820
we tell Travis that it's a Python

00:15:39,510 --> 00:15:44,250
project we want to run our tests under

00:15:41,820 --> 00:15:46,110
these three Python versions we need

00:15:44,250 --> 00:15:48,089
these install commands run before the

00:15:46,110 --> 00:15:51,300
tests are run and this is the script for

00:15:48,089 --> 00:15:54,630
running our tests pi test there are

00:15:51,300 --> 00:15:56,610
tools to automatically convert a talk

00:15:54,630 --> 00:15:59,940
stat I&I to a travis tamil and vice

00:15:56,610 --> 00:16:02,220
versa one is called pan CI you can also

00:15:59,940 --> 00:16:03,720
there's tricks you can use to make use

00:16:02,220 --> 00:16:05,970
of your tox environments within your

00:16:03,720 --> 00:16:07,440
Travis Tamil for my projects I tend to

00:16:05,970 --> 00:16:08,670
just maintain them both in parallel they

00:16:07,440 --> 00:16:13,680
don't change that often and it's not

00:16:08,670 --> 00:16:15,180
hard to do it's simpler so once you've

00:16:13,680 --> 00:16:17,040
done that you'll get something like this

00:16:15,180 --> 00:16:19,080
from Travis every time you push to your

00:16:17,040 --> 00:16:20,760
repository it'll summarize whether the

00:16:19,080 --> 00:16:22,800
build pastor failed and show you each

00:16:20,760 --> 00:16:29,940
environment that you specified whether

00:16:22,800 --> 00:16:31,320
that environment pastor failed and every

00:16:29,940 --> 00:16:34,050
time since someone sends a pull request

00:16:31,320 --> 00:16:35,280
to your github repository github will

00:16:34,050 --> 00:16:37,290
even show you above the pull request

00:16:35,280 --> 00:16:39,450
Travis will run your tests using that

00:16:37,290 --> 00:16:41,160
pull request code and github will tell

00:16:39,450 --> 00:16:42,330
you whether the test pastor failed so

00:16:41,160 --> 00:16:43,980
the first moment you look at a pull

00:16:42,330 --> 00:16:48,150
request you already know whether it

00:16:43,980 --> 00:16:51,690
broke the tests so you also want someone

00:16:48,150 --> 00:16:55,410
to be able to pip install your thing the

00:16:51,690 --> 00:16:57,150
key to that is the setup I file we'll

00:16:55,410 --> 00:16:59,760
just look at a sample set up dot pie and

00:16:57,150 --> 00:17:03,300
go through some of the the key elements

00:16:59,760 --> 00:17:06,630
in it in this setup I we're going to use

00:17:03,300 --> 00:17:08,280
set up tools which is a third-party

00:17:06,630 --> 00:17:10,319
project it's not part of the Python

00:17:08,280 --> 00:17:12,209
standard library in practice almost

00:17:10,319 --> 00:17:13,079
everyone has it if you're concerned

00:17:12,209 --> 00:17:15,209
about people being able

00:17:13,079 --> 00:17:16,949
pip install your code pip relies on

00:17:15,209 --> 00:17:18,689
setup tools so you can assume that your

00:17:16,949 --> 00:17:23,100
users will have set up tools already in

00:17:18,689 --> 00:17:25,500
that scenario we have a readme trst file

00:17:23,100 --> 00:17:27,449
which we wrote some very basic

00:17:25,500 --> 00:17:30,299
documentation may be linking to our full

00:17:27,449 --> 00:17:31,710
documentation and github will display

00:17:30,299 --> 00:17:34,799
that on the front page of our project on

00:17:31,710 --> 00:17:36,899
github and the python package index has

00:17:34,799 --> 00:17:38,580
a similar long description where you can

00:17:36,899 --> 00:17:40,440
have restructured text formatted

00:17:38,580 --> 00:17:41,970
description of your project so it's nice

00:17:40,440 --> 00:17:44,159
to reuse the readme we've already

00:17:41,970 --> 00:17:45,899
written as our long description on the

00:17:44,159 --> 00:17:48,019
package index so we can do that in setup

00:17:45,899 --> 00:17:50,100
I just by opening the readme and

00:17:48,019 --> 00:17:53,240
assigning its contents to our long

00:17:50,100 --> 00:17:55,830
description we call this setup function

00:17:53,240 --> 00:17:57,419
when you execute setup I the setup

00:17:55,830 --> 00:17:59,130
function will magically do some things

00:17:57,419 --> 00:18:01,919
based on whatever command-line arguments

00:17:59,130 --> 00:18:04,860
you gave and we pass to set up by a

00:18:01,919 --> 00:18:07,549
variety of metadata about our package so

00:18:04,860 --> 00:18:10,320
the name of the package the version a

00:18:07,549 --> 00:18:13,230
short description our long description

00:18:10,320 --> 00:18:17,340
the author's name the author's email URL

00:18:13,230 --> 00:18:20,220
homepage for the project the list of

00:18:17,340 --> 00:18:21,960
Python packages in the projects in this

00:18:20,220 --> 00:18:25,559
case we just have one top level package

00:18:21,960 --> 00:18:27,539
pi fly install requires is where we can

00:18:25,559 --> 00:18:29,940
specify dependencies on other packages

00:18:27,539 --> 00:18:32,190
in this case will say well we depend on

00:18:29,940 --> 00:18:34,049
the six package which is tools for

00:18:32,190 --> 00:18:36,720
supporting Python 2 and Python 3 in a

00:18:34,049 --> 00:18:39,299
single code base and then lastly trove

00:18:36,720 --> 00:18:41,159
classifiers these allow you to provide

00:18:39,299 --> 00:18:42,960
extra metadata about your package which

00:18:41,159 --> 00:18:45,299
automated tools can use to collect

00:18:42,960 --> 00:18:48,480
statistics on on the package index or

00:18:45,299 --> 00:18:50,820
make decisions about about your deduce

00:18:48,480 --> 00:18:53,730
things about your software these are not

00:18:50,820 --> 00:18:55,350
used by pip so specifying your Python

00:18:53,730 --> 00:18:57,539
version support here won't affect what

00:18:55,350 --> 00:18:59,850
pip will or won't install but it can

00:18:57,539 --> 00:19:03,090
still be useful for knowing how many

00:18:59,850 --> 00:19:05,490
packages on the package index support

00:19:03,090 --> 00:19:06,990
python 3 for instance if you provide the

00:19:05,490 --> 00:19:09,330
versions you support here and your

00:19:06,990 --> 00:19:10,440
license here also is just providing

00:19:09,330 --> 00:19:12,799
information to your users in a

00:19:10,440 --> 00:19:12,799
structured way

00:19:14,510 --> 00:19:21,030
another file we need for packaging is

00:19:17,040 --> 00:19:23,280
manifest in when Python when you're set

00:19:21,030 --> 00:19:25,380
up I builds a source distribution of

00:19:23,280 --> 00:19:27,360
your package it will include all of your

00:19:25,380 --> 00:19:29,190
Python code automatically and if there's

00:19:27,360 --> 00:19:31,620
any non Python files you want to include

00:19:29,190 --> 00:19:34,080
we need to specify them in our manifest

00:19:31,620 --> 00:19:36,750
in so in this case will include our

00:19:34,080 --> 00:19:39,630
authors file a changelog the license

00:19:36,750 --> 00:19:40,890
file or manifest in or read me and then

00:19:39,630 --> 00:19:42,420
we'll include all of our documentation

00:19:40,890 --> 00:19:44,490
so anyone who downloads a source

00:19:42,420 --> 00:19:46,200
distribution from the package index also

00:19:44,490 --> 00:19:50,300
has access to the documentation in

00:19:46,200 --> 00:19:52,380
source form once we have those two files

00:19:50,300 --> 00:19:55,590
we're going to prepare to release to the

00:19:52,380 --> 00:19:57,600
package index before we release will tag

00:19:55,590 --> 00:19:59,100
our release in github we'll push our

00:19:57,600 --> 00:20:03,960
tags to github that doesn't happen by

00:19:59,100 --> 00:20:06,780
default and then we'll create a source

00:20:03,960 --> 00:20:08,460
distribution s dist stands for source

00:20:06,780 --> 00:20:11,030
distribution is just basically a tarball

00:20:08,460 --> 00:20:13,860
of your code and some associated files

00:20:11,030 --> 00:20:17,040
you can create that with python setup is

00:20:13,860 --> 00:20:19,020
dist there's also a new wheel format

00:20:17,040 --> 00:20:21,270
which i'd encourage you to look into

00:20:19,020 --> 00:20:23,940
it's a binary format so if your if your

00:20:21,270 --> 00:20:25,140
package has compiled extensions using

00:20:23,940 --> 00:20:27,420
the wheel format will make it much

00:20:25,140 --> 00:20:28,920
easier if people to install if it's a

00:20:27,420 --> 00:20:30,540
pure python package and it's your first

00:20:28,920 --> 00:20:31,950
time it'll probably be simpler just to

00:20:30,540 --> 00:20:33,630
stick with s disk that's the most common

00:20:31,950 --> 00:20:37,350
format and still works very well for

00:20:33,630 --> 00:20:39,150
pure python packages once you have your

00:20:37,350 --> 00:20:41,880
s dist you can actually install it

00:20:39,150 --> 00:20:44,280
directly with pip setup i will place the

00:20:41,880 --> 00:20:46,440
s dist inside the dist subdirectory and

00:20:44,280 --> 00:20:48,720
pip can install directly from that tar

00:20:46,440 --> 00:20:50,550
bowl and that way you know you can test

00:20:48,720 --> 00:20:52,500
and make sure that your packaging works

00:20:50,550 --> 00:20:54,810
correctly that your package installs and

00:20:52,500 --> 00:20:57,470
you can import it and use it before you

00:20:54,810 --> 00:21:00,360
actually upload it to the package index

00:20:57,470 --> 00:21:02,430
now python setup pie it does have a

00:21:00,360 --> 00:21:04,260
command for uploading code uploading

00:21:02,430 --> 00:21:06,630
your disk to the package index

00:21:04,260 --> 00:21:09,930
unfortunately it works over a plate

00:21:06,630 --> 00:21:11,460
plain a non encrypted connection so it

00:21:09,930 --> 00:21:13,500
actually passes your package index

00:21:11,460 --> 00:21:15,000
credentials unencrypted so rather than

00:21:13,500 --> 00:21:17,040
using that we'll use a third party

00:21:15,000 --> 00:21:19,530
package called twine which can securely

00:21:17,040 --> 00:21:22,050
upload your project to the package index

00:21:19,530 --> 00:21:23,820
so we'll pip install twine and then we

00:21:22,050 --> 00:21:27,060
just say twine upload and pointed at our

00:21:23,820 --> 00:21:27,309
tar ball at RS dist and it'll upload it

00:21:27,060 --> 00:21:33,490
to the

00:21:27,309 --> 00:21:35,200
packaged index before you can do this

00:21:33,490 --> 00:21:37,330
step you need to have already gone to

00:21:35,200 --> 00:21:40,809
the Python package index web page

00:21:37,330 --> 00:21:42,549
created an account and claimed your

00:21:40,809 --> 00:21:44,409
package name on the package index and

00:21:42,549 --> 00:21:50,440
then you can use twine upload to upload

00:21:44,409 --> 00:21:51,549
your version of your project once we've

00:21:50,440 --> 00:21:53,440
done that we should be able to pip

00:21:51,549 --> 00:21:59,649
install pi fly and our package will

00:21:53,440 --> 00:22:03,700
install from the back end index so the

00:21:59,649 --> 00:22:05,350
last item will talk about or first for

00:22:03,700 --> 00:22:06,399
more information about packaging there's

00:22:05,350 --> 00:22:09,029
a lot more that could be covered

00:22:06,399 --> 00:22:12,070
packaging python org has documentation

00:22:09,029 --> 00:22:13,960
there's IRC channel PI PA on freenode

00:22:12,070 --> 00:22:15,220
where there's people hanging out we'll

00:22:13,960 --> 00:22:17,889
be glad to help you with your packaging

00:22:15,220 --> 00:22:22,029
problems and there's a disk utility I

00:22:17,889 --> 00:22:23,529
thought org mailing list last we'll talk

00:22:22,029 --> 00:22:25,629
a little bit about building a community

00:22:23,529 --> 00:22:26,799
around your project people join

00:22:25,629 --> 00:22:28,330
communities because they make their

00:22:26,799 --> 00:22:30,039
lives better so building a community

00:22:28,330 --> 00:22:31,840
around your project is all about finding

00:22:30,039 --> 00:22:34,779
ways to make your users and contributors

00:22:31,840 --> 00:22:37,090
lives better a lot of that has to do

00:22:34,779 --> 00:22:38,649
with valuing their time so we'll talk

00:22:37,090 --> 00:22:40,690
about some ways to value the time of

00:22:38,649 --> 00:22:42,669
your users and contributors one way to

00:22:40,690 --> 00:22:45,100
value your users time is to communicate

00:22:42,669 --> 00:22:47,049
clearly about changes to your software

00:22:45,100 --> 00:22:48,940
that will affect them semantic

00:22:47,049 --> 00:22:50,740
versioning is a technique to use your

00:22:48,940 --> 00:22:52,570
version numbers to communicate

00:22:50,740 --> 00:22:55,299
information to your users about changes

00:22:52,570 --> 00:22:58,840
in your software the idea is that if you

00:22:55,299 --> 00:23:02,200
have a version number like XYZ you'll

00:22:58,840 --> 00:23:05,440
increment X anytime you make breaking

00:23:02,200 --> 00:23:07,809
changes to your API so if someone knows

00:23:05,440 --> 00:23:10,899
that if they upgrade from version 10 to

00:23:07,809 --> 00:23:12,549
version 20 they're likely to need to

00:23:10,899 --> 00:23:13,809
update their code to use your software

00:23:12,549 --> 00:23:16,779
differently because you've made breaking

00:23:13,809 --> 00:23:18,070
changes you increment Y for feature

00:23:16,779 --> 00:23:23,080
changes that are backwards compatible

00:23:18,070 --> 00:23:27,879
and you an increment z4 releases that

00:23:23,080 --> 00:23:29,049
include only bug fixes some ver org has

00:23:27,879 --> 00:23:32,590
more information about semantic

00:23:29,049 --> 00:23:34,570
versioning another part of value in your

00:23:32,590 --> 00:23:36,730
users time when someone sees that you've

00:23:34,570 --> 00:23:38,230
made backwards incompatible changes the

00:23:36,730 --> 00:23:40,250
change log is where they can look to

00:23:38,230 --> 00:23:41,300
find out what those changes are

00:23:40,250 --> 00:23:43,730
what kind of things they'll need to

00:23:41,300 --> 00:23:45,140
update in their code so semantic

00:23:43,730 --> 00:23:46,790
versioning tells your users about the

00:23:45,140 --> 00:23:48,380
magnitude and the type of changes in a

00:23:46,790 --> 00:23:52,390
release and the changelog gives them

00:23:48,380 --> 00:23:54,440
details changelog is not just a

00:23:52,390 --> 00:23:56,450
something you can generate automatically

00:23:54,440 --> 00:23:58,700
from your commit mod it should pull out

00:23:56,450 --> 00:24:00,860
user interesting changes and summarize

00:23:58,700 --> 00:24:02,690
them in a user-friendly way here's an

00:24:00,860 --> 00:24:09,800
example of how I structure a change log

00:24:02,690 --> 00:24:11,630
using restructured text so a way that

00:24:09,800 --> 00:24:13,520
you can value your contributors time and

00:24:11,630 --> 00:24:16,820
save yourself time is by having a

00:24:13,520 --> 00:24:18,290
contributing document here's a some

00:24:16,820 --> 00:24:19,790
things that you might want to include in

00:24:18,290 --> 00:24:21,680
your contributing document will call it

00:24:19,790 --> 00:24:23,960
contributing rst in the root of our

00:24:21,680 --> 00:24:26,690
repository you can include things like

00:24:23,960 --> 00:24:28,550
how to get set up for development how a

00:24:26,690 --> 00:24:30,380
contributor can run the tests for your

00:24:28,550 --> 00:24:33,080
project what they should include in a

00:24:30,380 --> 00:24:35,390
bug report or a pull request what coding

00:24:33,080 --> 00:24:36,680
standards or test coverage standards or

00:24:35,390 --> 00:24:38,030
other requirements you have for

00:24:36,680 --> 00:24:40,910
contributing to your codebase that they

00:24:38,030 --> 00:24:42,680
should know about in advance and my side

00:24:40,910 --> 00:24:44,210
effect if you have a top-level file on

00:24:42,680 --> 00:24:46,040
your repo called contributing dot

00:24:44,210 --> 00:24:47,480
something github will find it and

00:24:46,040 --> 00:24:49,610
automatically provide a link to it

00:24:47,480 --> 00:24:53,020
prominently on top of the new pull

00:24:49,610 --> 00:24:55,010
request or the new issue form so

00:24:53,020 --> 00:24:56,330
contributors will be guided to your

00:24:55,010 --> 00:25:01,760
contributing guidelines before they

00:24:56,330 --> 00:25:04,190
contribute so I'm all excited to fix the

00:25:01,760 --> 00:25:05,810
bug I found in your project I download

00:25:04,190 --> 00:25:07,190
it I follow your contributing guidelines

00:25:05,810 --> 00:25:08,750
I get all set up for development I

00:25:07,190 --> 00:25:10,490
install all the dependencies I'm all

00:25:08,750 --> 00:25:12,200
excited to run the tests so that I can

00:25:10,490 --> 00:25:13,460
have a clean slate to work from and make

00:25:12,200 --> 00:25:17,300
sure I'm not breaking anything with my

00:25:13,460 --> 00:25:18,950
change and for tests fail and my

00:25:17,300 --> 00:25:21,980
motivation to contribute to your project

00:25:18,950 --> 00:25:25,300
is gone so one very important thing you

00:25:21,980 --> 00:25:25,300
can do is keep your tests passing

00:25:27,760 --> 00:25:31,610
another way to value your contributors

00:25:29,900 --> 00:25:34,310
time and contribution is to give quick

00:25:31,610 --> 00:25:36,440
feedback when you get bug reports or

00:25:34,310 --> 00:25:38,000
pull requests you may not have time to

00:25:36,440 --> 00:25:40,460
deal with them right away or think fully

00:25:38,000 --> 00:25:43,310
through the feature request or how to

00:25:40,460 --> 00:25:45,170
fix the bug but you can very easily give

00:25:43,310 --> 00:25:47,060
a one line response on the issue or pull

00:25:45,170 --> 00:25:48,410
request saying I don't have time to look

00:25:47,060 --> 00:25:50,720
at this now I really appreciate the

00:25:48,410 --> 00:25:52,370
contribution I'll look at it next week

00:25:50,720 --> 00:25:54,230
or in a month or

00:25:52,370 --> 00:25:57,470
maybe in three years or whatever the

00:25:54,230 --> 00:26:01,970
truth is but you can give immediate

00:25:57,470 --> 00:26:03,790
feedback for contributions and when

00:26:01,970 --> 00:26:06,320
people pitching you can give them props

00:26:03,790 --> 00:26:08,059
you can do that in a commit message you

00:26:06,320 --> 00:26:09,680
can do that in your change log you can

00:26:08,059 --> 00:26:11,510
do that in an author's file that lists

00:26:09,680 --> 00:26:13,790
all your contributors you can do that

00:26:11,510 --> 00:26:15,200
with tweets you can all kinds of ways

00:26:13,790 --> 00:26:16,820
you can give people props and give them

00:26:15,200 --> 00:26:20,540
credit for their work but that motivates

00:26:16,820 --> 00:26:21,920
people to contribute even beyond that if

00:26:20,540 --> 00:26:23,510
you have helpful contributors who have

00:26:21,920 --> 00:26:25,190
submitted a couple good pull requests

00:26:23,510 --> 00:26:28,309
you can be very quick to give them

00:26:25,190 --> 00:26:29,960
commit access with distributed version

00:26:28,309 --> 00:26:31,490
control commit access isn't as

00:26:29,960 --> 00:26:33,920
technically important as it used to be

00:26:31,490 --> 00:26:35,360
but it's still a mark of confidence it's

00:26:33,920 --> 00:26:37,790
still a social signal that you trust

00:26:35,360 --> 00:26:39,920
someone to handle your project correctly

00:26:37,790 --> 00:26:41,720
and so giving commit access to someone

00:26:39,920 --> 00:26:45,110
will motivate greater involvement from

00:26:41,720 --> 00:26:46,190
them and chances are someday you're

00:26:45,110 --> 00:26:47,330
going to be tired of maintaining this

00:26:46,190 --> 00:26:49,130
project you're going to want to move on

00:26:47,330 --> 00:26:51,140
to other things you're going to have

00:26:49,130 --> 00:26:54,260
other things demanding your time so

00:26:51,140 --> 00:26:56,330
giving commit access to someone is

00:26:54,260 --> 00:26:57,650
preparing someone to possibly take over

00:26:56,330 --> 00:27:02,290
the project from you in the future when

00:26:57,650 --> 00:27:05,809
you're done with it the very last thing

00:27:02,290 --> 00:27:07,670
but definitely not least anytime you get

00:27:05,809 --> 00:27:10,250
a bug or a pull request on your software

00:27:07,670 --> 00:27:12,980
even if it's irritating or it's phrased

00:27:10,250 --> 00:27:14,210
in a aggressive way or if someone hasn't

00:27:12,980 --> 00:27:15,559
done their homework and read the

00:27:14,210 --> 00:27:17,809
contributing document or whatever it

00:27:15,559 --> 00:27:20,660
might be it still represents someone who

00:27:17,809 --> 00:27:22,400
took the time to get to to take the

00:27:20,660 --> 00:27:23,690
initiative to make a contribution to

00:27:22,400 --> 00:27:25,640
your project because they wanted it to

00:27:23,690 --> 00:27:26,900
be better because they cared about it it

00:27:25,640 --> 00:27:28,940
represents someone who cares about your

00:27:26,900 --> 00:27:31,550
project who took time and energy to try

00:27:28,940 --> 00:27:32,780
to make it better and regardless of what

00:27:31,550 --> 00:27:34,970
other issues you may have with their

00:27:32,780 --> 00:27:37,580
contribution you can always thank them

00:27:34,970 --> 00:27:39,230
for taking that time and energy for

00:27:37,580 --> 00:27:41,030
every one person that you communicate

00:27:39,230 --> 00:27:42,470
with directly in a public way via an

00:27:41,030 --> 00:27:45,020
issue or a pull request on github

00:27:42,470 --> 00:27:47,360
there's or mailing list or IRC or

00:27:45,020 --> 00:27:49,300
whatever there may be 10 or 20 or 50 or

00:27:47,360 --> 00:27:51,559
100 other people who will see that

00:27:49,300 --> 00:27:54,650
interaction either now or in the future

00:27:51,559 --> 00:27:56,210
and based on what they see in that

00:27:54,650 --> 00:27:57,500
interaction may make a decision about

00:27:56,210 --> 00:27:58,730
whether it's worth their time to

00:27:57,500 --> 00:28:00,920
interact with you and contribute to your

00:27:58,730 --> 00:28:02,210
project so there is nothing to be lost

00:28:00,920 --> 00:28:05,320
by being nice to everyone who

00:28:02,210 --> 00:28:05,320
contributes to your project

00:28:06,040 --> 00:28:11,260
so go forth and release code

00:28:18,809 --> 00:28:31,289
I think we have about four minutes for

00:28:24,090 --> 00:28:33,480
questions thank you very much for a nice

00:28:31,289 --> 00:28:35,690
summary of many good things you could do

00:28:33,480 --> 00:28:38,549
to your project and a few comments I

00:28:35,690 --> 00:28:40,950
don't know why get people did it but you

00:28:38,549 --> 00:28:43,200
don't want to tack on the get tag and

00:28:40,950 --> 00:28:45,419
then the tag you want to use annotated

00:28:43,200 --> 00:28:47,100
or signed tags because if you use git

00:28:45,419 --> 00:28:49,529
described command which is really useful

00:28:47,100 --> 00:28:51,840
to define where you are in the actual

00:28:49,529 --> 00:28:55,679
history of development those will not be

00:28:51,840 --> 00:28:57,360
used so use those with dash mne you can

00:28:55,679 --> 00:28:59,700
provide even message which describes it

00:28:57,360 --> 00:29:04,110
right there in the common line yes then

00:28:59,700 --> 00:29:07,259
for for licenses i I'm sorry I've missed

00:29:04,110 --> 00:29:09,779
that part but I asked around if you're

00:29:07,259 --> 00:29:11,580
using third-party code in your code it

00:29:09,779 --> 00:29:13,499
would be great if you come up with

00:29:11,580 --> 00:29:15,330
description of what code have you used

00:29:13,499 --> 00:29:17,909
what is the copyright well its license

00:29:15,330 --> 00:29:20,279
license itself without copyright doesn't

00:29:17,909 --> 00:29:22,409
matter so it needs to be a bundle of

00:29:20,279 --> 00:29:24,509
copyright and the license also be

00:29:22,409 --> 00:29:26,369
careful about looking at the third-party

00:29:24,509 --> 00:29:28,919
modules which have more restrictive

00:29:26,369 --> 00:29:31,499
licenses if you use GPL code and your

00:29:28,919 --> 00:29:34,830
project is a mighty or bsd effectively

00:29:31,499 --> 00:29:37,259
at runtime is GPL so those guys in the

00:29:34,830 --> 00:29:39,269
next room who compile their code right

00:29:37,259 --> 00:29:40,980
and deliver it that will be all ready

00:29:39,269 --> 00:29:43,440
GPL code you would need to provide your

00:29:40,980 --> 00:29:45,059
sources well not in this booth that were

00:29:43,440 --> 00:29:47,220
it's important since we do it open

00:29:45,059 --> 00:29:49,440
source anyway already and if you do

00:29:47,220 --> 00:29:52,019
semantic versioning that that's awesome

00:29:49,440 --> 00:29:54,149
and but if you want to verify somebody's

00:29:52,019 --> 00:29:56,460
else version you could use these two

00:29:54,149 --> 00:29:58,470
Till's loose version and strict version

00:29:56,460 --> 00:30:00,330
to do proper comparison not like

00:29:58,470 --> 00:30:02,279
breaking to topple and then compare it

00:30:00,330 --> 00:30:04,860
some other ways because that might fail

00:30:02,279 --> 00:30:07,200
badly if you use development versions of

00:30:04,860 --> 00:30:08,490
other projects thank you again great

00:30:07,200 --> 00:30:13,259
that's those are great additions thank

00:30:08,490 --> 00:30:14,610
you um the I originally included dash S

00:30:13,259 --> 00:30:16,710
in the get tagged command and you should

00:30:14,610 --> 00:30:21,149
definitely sign your gig tags if you

00:30:16,710 --> 00:30:23,309
have a pgp set up also if you have PG PG

00:30:21,149 --> 00:30:25,649
PG set up you should also use dash dash

00:30:23,309 --> 00:30:28,679
sign or dash S on your client upload and

00:30:25,649 --> 00:30:30,869
that will sign your s test file on the

00:30:28,679 --> 00:30:32,480
package index I remove those so that it

00:30:30,869 --> 00:30:33,860
would work for people who don't have VP

00:30:32,480 --> 00:30:35,120
set up but if you're going to be

00:30:33,860 --> 00:30:38,780
releasing software it's probably worth

00:30:35,120 --> 00:30:39,890
your time to get a gpg key set up and

00:30:38,780 --> 00:30:42,470
make sure you're signing those things so

00:30:39,890 --> 00:30:45,110
thank you very much yep thank you it was

00:30:42,470 --> 00:30:46,549
a great talk a lot of information um how

00:30:45,110 --> 00:30:48,590
do you feel about using github is a

00:30:46,549 --> 00:30:50,870
source of requesting people to help on

00:30:48,590 --> 00:30:52,370
your project in a sense that you have an

00:30:50,870 --> 00:30:54,230
idea of where you want the project to be

00:30:52,370 --> 00:30:56,120
and you have a certain level of skill

00:30:54,230 --> 00:30:58,220
and you kind of got it to get started

00:30:56,120 --> 00:31:03,500
but you need assistance do you see that

00:30:58,220 --> 00:31:05,660
is a bad way to get started or um using

00:31:03,500 --> 00:31:08,720
github to get contributors how exactly

00:31:05,660 --> 00:31:10,309
um in the sense that you you you're not

00:31:08,720 --> 00:31:12,410
at the level that you need you need you

00:31:10,309 --> 00:31:13,940
need assistance in your project but you

00:31:12,410 --> 00:31:15,830
have some sort of working code like I

00:31:13,940 --> 00:31:17,360
like the boilerplate of it in the sense

00:31:15,830 --> 00:31:18,799
that you need a you would like other

00:31:17,360 --> 00:31:21,679
people to help contribute to your

00:31:18,799 --> 00:31:23,240
project doesn't hurt to try I mean

00:31:21,679 --> 00:31:25,040
usually my experiences that you get

00:31:23,240 --> 00:31:26,600
contributors because you've built

00:31:25,040 --> 00:31:29,660
something useful that helps them and

00:31:26,600 --> 00:31:30,830
then they need something else they need

00:31:29,660 --> 00:31:34,850
to do something else and so they're

00:31:30,830 --> 00:31:36,890
motivated to add to it so if you you put

00:31:34,850 --> 00:31:38,900
something up on github that's more more

00:31:36,890 --> 00:31:40,730
an idea than an actual working code I

00:31:38,900 --> 00:31:42,559
think in most cases that probably won't

00:31:40,730 --> 00:31:45,049
be that successful but if it's something

00:31:42,559 --> 00:31:51,290
that a lot of people really want I mean

00:31:45,049 --> 00:31:53,059
doesn't hurt Thanks hi I have wondering

00:31:51,290 --> 00:31:55,100
if you have advice for maintaining those

00:31:53,059 --> 00:31:57,799
manifests on in files like I've broken

00:31:55,100 --> 00:32:00,410
libraries that we use internally because

00:31:57,799 --> 00:32:02,240
I've made code changes and then forgot

00:32:00,410 --> 00:32:03,950
to update the manifests not in file to

00:32:02,240 --> 00:32:06,080
include like mighty Python Paulo

00:32:03,950 --> 00:32:09,919
whatever so other tools or advice or

00:32:06,080 --> 00:32:11,840
anything for that there aren't tools

00:32:09,919 --> 00:32:13,820
that I've used to help maintain manifest

00:32:11,840 --> 00:32:15,460
in there may be some out there that I

00:32:13,820 --> 00:32:18,790
don't know of but yeah that is a problem

00:32:15,460 --> 00:32:21,020
it's a good reason to to test your estes

00:32:18,790 --> 00:32:22,490
before you upload them the package index

00:32:21,020 --> 00:32:24,890
another thing i should probably mention

00:32:22,490 --> 00:32:26,390
is that one thing i didn't have time to

00:32:24,890 --> 00:32:28,100
include in the slides is what to do if

00:32:26,390 --> 00:32:30,140
you have make a bad release if you do

00:32:28,100 --> 00:32:33,020
upload a release to the package index

00:32:30,140 --> 00:32:34,820
that doesn't work and the answer is you

00:32:33,020 --> 00:32:36,830
should not remove or change that release

00:32:34,820 --> 00:32:38,660
once it's up on the package index you

00:32:36,830 --> 00:32:41,659
should consider there for good you just

00:32:38,660 --> 00:32:45,100
upload a new release with a bumped micro

00:32:41,659 --> 00:32:45,100
version number and move on

00:32:50,540 --> 00:32:53,170
yep

00:32:54,640 --> 00:33:01,360
yep I have one more question last

00:32:58,060 --> 00:33:03,600
question um thank you for the talk and I

00:33:01,360 --> 00:33:06,280
know it's still a lot of steps and it's

00:33:03,600 --> 00:33:07,870
at least it's a lot like less Messier

00:33:06,280 --> 00:33:09,220
and less complicated for now but do you

00:33:07,870 --> 00:33:12,340
feel that to what extent do you think

00:33:09,220 --> 00:33:14,260
that so the steps can be automated in

00:33:12,340 --> 00:33:18,190
the future perhaps to make it much more

00:33:14,260 --> 00:33:20,350
easier for forgetting packages it's

00:33:18,190 --> 00:33:21,970
already a lot more automated than it was

00:33:20,350 --> 00:33:23,350
a few years ago I mean a few years ago

00:33:21,970 --> 00:33:24,520
if I'd given this talk we wouldn't have

00:33:23,350 --> 00:33:26,010
had read the docs who wouldn't have had

00:33:24,520 --> 00:33:29,800
travis CI and so there's some very

00:33:26,010 --> 00:33:32,110
important steps here that would have

00:33:29,800 --> 00:33:34,450
been up way harder a couple years ago so

00:33:32,110 --> 00:33:36,570
yeah I presume that that I hope that

00:33:34,450 --> 00:33:38,650
things will continue to get easier

00:33:36,570 --> 00:33:39,670
particularly on the on the packaging

00:33:38,650 --> 00:33:43,470
side of things there's definitely

00:33:39,670 --> 00:33:43,470
movement in that area so we'll see

00:33:48,860 --> 00:33:52,980
yeah and I'll be in the hallway if

00:33:50,940 --> 00:33:55,940
anybody wants to talk more about about

00:33:52,980 --> 00:33:55,940

YouTube URL: https://www.youtube.com/watch?v=nHWRN5gCPSI


