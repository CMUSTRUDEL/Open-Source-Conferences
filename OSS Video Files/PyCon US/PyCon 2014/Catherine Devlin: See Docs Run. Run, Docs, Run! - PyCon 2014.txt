Title: Catherine Devlin: See Docs Run. Run, Docs, Run! - PyCon 2014
Publication date: 2014-04-24
Playlist: PyCon 2014
Description: 
	Speaker: Catherine Devlin

Code executes. Docs just sit there looking pretty. Now it's time to blur that boundary! Tools like the IPython Notebook, Sphinx, dexy, and old-fashioned doctests blend code with docs, making package docs, educational materials, and system-level docs more engaging, relevant, and trustworthy.

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:00,000 --> 00:00:11,190
Devlin please welcome her hi bonjour je

00:00:08,970 --> 00:00:13,530
m'appelle Catherine Devon Belva new see

00:00:11,190 --> 00:00:14,849
docs run run docs run I hope that came

00:00:13,530 --> 00:00:19,680
out right that's all the French I've got

00:00:14,849 --> 00:00:23,369
but thank you um all these slides are

00:00:19,680 --> 00:00:25,199
already online at tinyurl / run docs run

00:00:23,369 --> 00:00:27,810
and i will give that URL again at the

00:00:25,199 --> 00:00:29,010
end and it has links to my github repo

00:00:27,810 --> 00:00:30,900
and everything else you're going to need

00:00:29,010 --> 00:00:32,130
so that's the only part that you'll need

00:00:30,900 --> 00:00:34,829
to write down and you don't even need to

00:00:32,130 --> 00:00:37,079
write it down yet so this talk is on

00:00:34,829 --> 00:00:38,670
executable documentation which is a term

00:00:37,079 --> 00:00:41,100
that I just made up so I better define

00:00:38,670 --> 00:00:43,500
it I'm talking about documents that pull

00:00:41,100 --> 00:00:46,110
in real living code and execute that

00:00:43,500 --> 00:00:48,870
code and the results of that execution

00:00:46,110 --> 00:00:51,120
either validate or get incorporated into

00:00:48,870 --> 00:00:53,010
the document when you generate that

00:00:51,120 --> 00:00:55,020
document or refresh that document or

00:00:53,010 --> 00:00:58,800
even when the reader is reading the

00:00:55,020 --> 00:01:00,480
document as for what a document is I

00:00:58,800 --> 00:01:01,710
want you to think really broadly here so

00:01:00,480 --> 00:01:04,350
I can get away with being in the

00:01:01,710 --> 00:01:06,090
education track yeah I'm talking about I

00:01:04,350 --> 00:01:08,580
wrote this package here's how you use it

00:01:06,090 --> 00:01:10,320
but I'm also talking about educational

00:01:08,580 --> 00:01:12,210
documents like here's how you learn to

00:01:10,320 --> 00:01:13,619
program here's how you do this science

00:01:12,210 --> 00:01:16,500
problem here's how you do this math

00:01:13,619 --> 00:01:18,390
problem or organizational documentation

00:01:16,500 --> 00:01:21,180
here's how you request a new laptop

00:01:18,390 --> 00:01:22,890
here's how we do our builds here's how

00:01:21,180 --> 00:01:24,960
you request funding to come to pike on

00:01:22,890 --> 00:01:27,479
these are all kinds of documents that

00:01:24,960 --> 00:01:31,890
can actually benefit from having code

00:01:27,479 --> 00:01:34,470
embedded in them why are we bothering

00:01:31,890 --> 00:01:37,560
aren't docs perfect well Doc's aren't

00:01:34,470 --> 00:01:39,360
perfect a bunch of problems with them

00:01:37,560 --> 00:01:41,130
this doesn't address all of them but it

00:01:39,360 --> 00:01:43,380
addresses some of them one of the big

00:01:41,130 --> 00:01:45,570
problems is in accuracy that results

00:01:43,380 --> 00:01:47,040
from forgetfulness you think okay now

00:01:45,570 --> 00:01:48,299
i'm going to write the docs do to do it

00:01:47,040 --> 00:01:49,890
works like this it works like this and

00:01:48,299 --> 00:01:51,390
you've already forgotten some of the

00:01:49,890 --> 00:01:54,810
details of how the program works and you

00:01:51,390 --> 00:01:57,210
write inaccuracies in or it was accurate

00:01:54,810 --> 00:01:59,369
to begin with but then time passes the

00:01:57,210 --> 00:02:01,200
code changes the organization changes

00:01:59,369 --> 00:02:04,320
and you forget to update the documents

00:02:01,200 --> 00:02:06,570
also there's boredom most of us love to

00:02:04,320 --> 00:02:08,459
code it really engages our brain we get

00:02:06,570 --> 00:02:10,200
focused on the problem when we do a

00:02:08,459 --> 00:02:13,140
fairly good job of writing code and

00:02:10,200 --> 00:02:15,480
documentation is more like a chore

00:02:13,140 --> 00:02:17,280
resent it and that boredom shows through

00:02:15,480 --> 00:02:19,290
and the boredom spreads to the reader

00:02:17,280 --> 00:02:22,350
and it's just not that engaging or

00:02:19,290 --> 00:02:24,569
relevant or fun to read so what we end

00:02:22,350 --> 00:02:25,980
up writing is historical fiction it

00:02:24,569 --> 00:02:29,160
wasn't even true to begin with is

00:02:25,980 --> 00:02:31,590
progressively less true and nobody's

00:02:29,160 --> 00:02:33,390
interested in reading it now I've never

00:02:31,590 --> 00:02:39,959
read this book but it sure looks like it

00:02:33,390 --> 00:02:42,180
sucks so coding your documents can help

00:02:39,959 --> 00:02:44,459
fix this problem both in that the

00:02:42,180 --> 00:02:46,080
document can become self verifying the

00:02:44,459 --> 00:02:48,420
document lets you know when it's false

00:02:46,080 --> 00:02:50,250
or the document cannot be false because

00:02:48,420 --> 00:02:53,850
it's pulled straight out of live working

00:02:50,250 --> 00:02:55,980
code also because it's code your brain

00:02:53,850 --> 00:02:57,570
will re-engage it wakes up it gets back

00:02:55,980 --> 00:02:59,580
into the problem it's right something

00:02:57,570 --> 00:03:01,140
that's relevant and that you care about

00:02:59,580 --> 00:03:02,760
and then the reader will end up caring

00:03:01,140 --> 00:03:06,570
about it and the quality of your

00:03:02,760 --> 00:03:08,640
documentation will improve so to

00:03:06,570 --> 00:03:10,680
illustrate all this i'm going to i made

00:03:08,640 --> 00:03:12,090
up a fake little package called argument

00:03:10,680 --> 00:03:13,620
clinic and we're going to just run

00:03:12,090 --> 00:03:15,750
through how we might document up some

00:03:13,620 --> 00:03:18,180
users samples and checking on the

00:03:15,750 --> 00:03:20,250
software requirements we're going to do

00:03:18,180 --> 00:03:21,840
that with four different technologies

00:03:20,250 --> 00:03:23,430
and because that's a lot to cover we're

00:03:21,840 --> 00:03:25,049
going to be going fast the examples are

00:03:23,430 --> 00:03:26,850
going to be really simple but i want to

00:03:25,049 --> 00:03:28,500
cover some of the basic boilerplate of

00:03:26,850 --> 00:03:31,590
using each of these and then you can

00:03:28,500 --> 00:03:33,720
decide what might suit your project so

00:03:31,590 --> 00:03:35,670
the oldest one is doc tests this goes

00:03:33,720 --> 00:03:39,000
back to a previous millennium lost

00:03:35,670 --> 00:03:42,120
wisdom of the ages the idea of doc tests

00:03:39,000 --> 00:03:44,100
is simply that your your your doc

00:03:42,120 --> 00:03:46,260
strings can and should include usage

00:03:44,100 --> 00:03:47,820
samples those should show the user how

00:03:46,260 --> 00:03:49,709
you use a piece of code and what the

00:03:47,820 --> 00:03:51,959
result should be that they can expect

00:03:49,709 --> 00:03:54,510
now in this case here's a piece of code

00:03:51,959 --> 00:03:56,040
where clearly the code is not complete

00:03:54,510 --> 00:03:57,630
it's not going to succeed at both of

00:03:56,040 --> 00:03:59,370
these it will answer this first one

00:03:57,630 --> 00:04:01,079
correctly but it's not going to respond

00:03:59,370 --> 00:04:04,500
the way our doc test suggests it should

00:04:01,079 --> 00:04:07,470
our doc string suggested should and doc

00:04:04,500 --> 00:04:10,890
tests job is to go through pluck out

00:04:07,470 --> 00:04:12,930
those examples in doc strings and let

00:04:10,890 --> 00:04:14,940
you know when they fail so this is just

00:04:12,930 --> 00:04:18,510
a verification technique for your

00:04:14,940 --> 00:04:21,000
docstrings docstrings get kind of a bad

00:04:18,510 --> 00:04:23,250
rap from testing snobs because they feel

00:04:21,000 --> 00:04:25,710
like it's not a good complete rigorous

00:04:23,250 --> 00:04:26,790
unit testing solution and fine going to

00:04:25,710 --> 00:04:29,130
concede that

00:04:26,790 --> 00:04:31,500
this is orthogonal to your unit testing

00:04:29,130 --> 00:04:33,690
solution not competing with nose or pi

00:04:31,500 --> 00:04:35,940
dot test or anything else instead I'm

00:04:33,690 --> 00:04:37,410
renaming these two executable docstrings

00:04:35,940 --> 00:04:39,480
now the word test isn't even in there

00:04:37,410 --> 00:04:42,990
and the whole point is simply to make

00:04:39,480 --> 00:04:45,390
your doc strings relevant and accurate

00:04:42,990 --> 00:04:48,170
and more interesting and enjoyable to

00:04:45,390 --> 00:04:51,270
read so those have been around forever

00:04:48,170 --> 00:04:53,700
next technology up Sphinx is more recent

00:04:51,270 --> 00:04:55,440
and this is actually part of why the

00:04:53,700 --> 00:04:58,230
documentation in the Python world has

00:04:55,440 --> 00:05:00,150
improved a ton because Sphinx takes a

00:04:58,230 --> 00:05:03,480
bunch of restructured text documents and

00:05:00,150 --> 00:05:06,600
generates a complex but not overly

00:05:03,480 --> 00:05:08,670
complex a tree of documents that can

00:05:06,600 --> 00:05:10,830
refer to each other they include

00:05:08,670 --> 00:05:12,680
searchability and index ability really a

00:05:10,830 --> 00:05:15,240
pleasure to read and a pleasure to use

00:05:12,680 --> 00:05:17,130
Sphinx in itself isn't exactly what I'm

00:05:15,240 --> 00:05:18,840
calling executable documentation but

00:05:17,130 --> 00:05:21,030
there are some really worthwhile plugins

00:05:18,840 --> 00:05:23,700
for Sphinx extensions rather for

00:05:21,030 --> 00:05:25,470
instance the doc test extension does

00:05:23,700 --> 00:05:28,020
exactly what the regular doc tests

00:05:25,470 --> 00:05:30,270
module does but it does it against your

00:05:28,020 --> 00:05:31,590
Sphinx document it comes with Sphinx so

00:05:30,270 --> 00:05:33,210
all you have to do is say that you want

00:05:31,590 --> 00:05:35,580
it as you're setting up each Sphinx

00:05:33,210 --> 00:05:37,500
project I'm popping into the directory

00:05:35,580 --> 00:05:40,170
where all right here's a restructured

00:05:37,500 --> 00:05:41,910
text document that uses it that big

00:05:40,170 --> 00:05:43,800
chunk in the middle there is just it

00:05:41,910 --> 00:05:45,900
looks exactly like a doc test you might

00:05:43,800 --> 00:05:48,450
use in a regular piece of code but it's

00:05:45,900 --> 00:05:50,850
included in this doc test directive and

00:05:48,450 --> 00:05:52,950
once I've done that when I build my

00:05:50,850 --> 00:05:56,010
Sphinx talk and I include the magic word

00:05:52,950 --> 00:05:58,080
doc test the extension is going to run

00:05:56,010 --> 00:06:00,570
through there grab those doc tests and

00:05:58,080 --> 00:06:02,340
run them just the same way the doc test

00:06:00,570 --> 00:06:04,890
module itself would and give me a

00:06:02,340 --> 00:06:06,720
complaint and thus verify that the usage

00:06:04,890 --> 00:06:11,490
samples I put in my Sphinx document are

00:06:06,720 --> 00:06:13,650
in fact still up to date sphinx also has

00:06:11,490 --> 00:06:15,390
an autodoc extension which will go

00:06:13,650 --> 00:06:18,240
through the doc strings in your code

00:06:15,390 --> 00:06:21,180
pull them into your Sphinx document and

00:06:18,240 --> 00:06:23,460
these Fink's doc test extension

00:06:21,180 --> 00:06:25,770
understands what the autodoc extension

00:06:23,460 --> 00:06:27,330
is doing we'll see those doc tests that

00:06:25,770 --> 00:06:28,950
have been brought in that way will

00:06:27,330 --> 00:06:30,750
recognize them and execute them so

00:06:28,950 --> 00:06:32,430
that'll be another chance to execute

00:06:30,750 --> 00:06:36,240
those doc tests and verify that it's

00:06:32,430 --> 00:06:38,040
working another possibility this one is

00:06:36,240 --> 00:06:40,230
not included with Sphinx it's called

00:06:38,040 --> 00:06:40,500
autorun so you have to go through a few

00:06:40,230 --> 00:06:42,450
steps

00:06:40,500 --> 00:06:44,790
first to install it and then to enable

00:06:42,450 --> 00:06:47,520
it with each within each Fink's project

00:06:44,790 --> 00:06:49,890
but the idea is that once you've done so

00:06:47,520 --> 00:06:53,040
you can create these run block

00:06:49,890 --> 00:06:54,690
directives and then have a literal block

00:06:53,040 --> 00:06:57,180
that look this looks a lot like a doc

00:06:54,690 --> 00:06:59,550
test but what is missing is the response

00:06:57,180 --> 00:07:01,440
instead of predicting what the response

00:06:59,550 --> 00:07:04,470
should be and complaining if it's wrong

00:07:01,440 --> 00:07:06,270
this leaves the response blank and lets

00:07:04,470 --> 00:07:08,280
that get filled in at the time that we

00:07:06,270 --> 00:07:10,200
build the doc so here we have we're

00:07:08,280 --> 00:07:13,500
using the package but we're saying

00:07:10,200 --> 00:07:15,450
nothing about the response when we make

00:07:13,500 --> 00:07:17,850
this document what we get now the

00:07:15,450 --> 00:07:23,310
responses that the program provided are

00:07:17,850 --> 00:07:26,490
mixed in there into the document there's

00:07:23,310 --> 00:07:28,860
one option another extension very very

00:07:26,490 --> 00:07:30,450
similar oh I'm sorry we have a little

00:07:28,860 --> 00:07:32,550
more to show on autorun the other

00:07:30,450 --> 00:07:35,280
interesting thing here I just whipped up

00:07:32,550 --> 00:07:36,890
a package that can probe the system find

00:07:35,280 --> 00:07:39,120
out what the requirements are txt are

00:07:36,890 --> 00:07:42,090
whether the system meets those

00:07:39,120 --> 00:07:45,690
requirements and then I can invoke that

00:07:42,090 --> 00:07:47,669
from within my document so here's a kind

00:07:45,690 --> 00:07:49,440
of a live requirements document I can

00:07:47,669 --> 00:07:51,330
also go all the way outside of Python

00:07:49,440 --> 00:07:54,660
all the way out to the console with this

00:07:51,330 --> 00:07:57,470
run block console command and execute a

00:07:54,660 --> 00:08:00,479
command line like I'm going to ask what

00:07:57,470 --> 00:08:04,860
postgres version I'm running sorry my

00:08:00,479 --> 00:08:09,090
co-presenter gel neck so the result of

00:08:04,860 --> 00:08:10,919
that here we have we checked on our what

00:08:09,090 --> 00:08:18,570
documentation we've got and on what

00:08:10,919 --> 00:08:20,910
postgres version were running all right

00:08:18,570 --> 00:08:23,700
another very similar extension is called

00:08:20,910 --> 00:08:27,060
program output again you need to install

00:08:23,700 --> 00:08:29,490
this and enable it and the basic working

00:08:27,060 --> 00:08:31,110
is really really similar but in this

00:08:29,490 --> 00:08:33,450
case you have a couple of choices you

00:08:31,110 --> 00:08:36,750
can either use program output or command

00:08:33,450 --> 00:08:38,370
output you can't go directly into Python

00:08:36,750 --> 00:08:39,570
if you want to call Python from here you

00:08:38,370 --> 00:08:43,190
have to do it as if you were at the

00:08:39,570 --> 00:08:45,750
command line using the Python command

00:08:43,190 --> 00:08:48,150
but let's take it a look at the result

00:08:45,750 --> 00:08:50,490
that gives pretty similar the difference

00:08:48,150 --> 00:08:52,170
is with the program output you don't

00:08:50,490 --> 00:08:54,180
actually see the command that was used

00:08:52,170 --> 00:08:56,460
to generate it whereas with command

00:08:54,180 --> 00:09:00,560
put the command that we issued gets

00:08:56,460 --> 00:09:00,560
echoed back just a couple of options

00:09:00,620 --> 00:09:05,970
tons of advantages to Sphinx it

00:09:04,170 --> 00:09:08,580
generates this lovely structure it's

00:09:05,970 --> 00:09:10,110
really become the python standard you

00:09:08,580 --> 00:09:11,490
can host Sphinx documents while they're

00:09:10,110 --> 00:09:13,620
actually playing HTML so they're really

00:09:11,490 --> 00:09:16,320
easy to host but you can also host them

00:09:13,620 --> 00:09:18,720
at read the docs for free and then the

00:09:16,320 --> 00:09:20,760
Sphinx ecosystem is huge very rich all

00:09:18,720 --> 00:09:22,920
sorts of things all sorts of extensions

00:09:20,760 --> 00:09:24,740
and options and yet it's not too hard to

00:09:22,920 --> 00:09:26,940
get started with just right off the bat

00:09:24,740 --> 00:09:28,260
I'm going to give shoutouts to a couple

00:09:26,940 --> 00:09:29,459
projects that I don't really have time

00:09:28,260 --> 00:09:31,529
to cover and they're a little bit off

00:09:29,459 --> 00:09:33,450
the beaten track but one is called

00:09:31,529 --> 00:09:35,640
literate resting it's really pretty

00:09:33,450 --> 00:09:37,470
similar to what i was showing with these

00:09:35,640 --> 00:09:39,510
Fink's extensions in that it takes a

00:09:37,470 --> 00:09:43,380
restructured text doc and lets you go

00:09:39,510 --> 00:09:44,670
out and insert external code against one

00:09:43,380 --> 00:09:46,440
restructure tech stock at a time it

00:09:44,670 --> 00:09:48,330
doesn't hook straight into Sphinx that's

00:09:46,440 --> 00:09:49,620
not a Python program but Titus Brown did

00:09:48,330 --> 00:09:52,380
it so it deserves an honorable mention

00:09:49,620 --> 00:09:54,839
any way and then Sphinx contrib auto

00:09:52,380 --> 00:09:56,760
program is a very limited but nice

00:09:54,839 --> 00:09:58,950
program that just goes out if you use

00:09:56,760 --> 00:10:01,440
arg parse it looks at your programs are

00:09:58,950 --> 00:10:03,120
purse and pulls that documentation into

00:10:01,440 --> 00:10:07,230
Sphinx so that kind of counts as a

00:10:03,120 --> 00:10:09,420
version of executable documentation next

00:10:07,230 --> 00:10:11,760
big technology is there anybody here who

00:10:09,420 --> 00:10:14,730
isn't yet jittering with excitement over

00:10:11,760 --> 00:10:17,940
the ipython notebook anybody good good

00:10:14,730 --> 00:10:19,620
all right as well you should be I am NOT

00:10:17,940 --> 00:10:22,020
going to try to compete with the

00:10:19,620 --> 00:10:23,430
fantastic keynote by Fernando yesterday

00:10:22,020 --> 00:10:26,250
if you haven't seen it definitely watch

00:10:23,430 --> 00:10:29,820
the video i am just going to remind you

00:10:26,250 --> 00:10:31,770
that every ipython notebook is in fact a

00:10:29,820 --> 00:10:33,540
beautiful example of executable

00:10:31,770 --> 00:10:35,640
documentation as i've been talking about

00:10:33,540 --> 00:10:37,829
because every single cell in that

00:10:35,640 --> 00:10:39,810
notebook can either be a markdown cell

00:10:37,829 --> 00:10:42,810
which will be interpreted into a

00:10:39,810 --> 00:10:45,390
good-looking piece of document or a code

00:10:42,810 --> 00:10:47,310
cell which you can execute and get the

00:10:45,390 --> 00:10:49,320
results right there and of course

00:10:47,310 --> 00:10:53,100
because it's ipython you're not limited

00:10:49,320 --> 00:10:55,200
to python you can use the ! and go

00:10:53,100 --> 00:10:56,970
outside to the system so this is doing

00:10:55,200 --> 00:10:59,130
what those Fink's extensions were doing

00:10:56,970 --> 00:11:01,320
doing it really fast and easy when it

00:10:59,130 --> 00:11:03,000
comes to ease of integrating the

00:11:01,320 --> 00:11:05,430
documentation part with the code part

00:11:03,000 --> 00:11:08,160
you you really can't beat this every

00:11:05,430 --> 00:11:10,019
single cell all you do is

00:11:08,160 --> 00:11:11,639
say oh okay this one's a code sell this

00:11:10,019 --> 00:11:16,440
one's a markdown sell and that's all

00:11:11,639 --> 00:11:20,519
there is to it ooh oh I made a change

00:11:16,440 --> 00:11:22,860
that's why it's complaining ipython

00:11:20,519 --> 00:11:24,480
notebooks you have a bunch of options

00:11:22,860 --> 00:11:26,970
for serving them you can certainly serve

00:11:24,480 --> 00:11:29,759
them yourselves NBD viewer is supplied

00:11:26,970 --> 00:11:31,769
by the ipython project basically if your

00:11:29,759 --> 00:11:34,110
notebook is saved out there on the web

00:11:31,769 --> 00:11:38,579
anywhere and has a URL then you pump

00:11:34,110 --> 00:11:41,040
that URL over to NB viewer and let's see

00:11:38,579 --> 00:11:42,930
if and then it's hosted online this is a

00:11:41,040 --> 00:11:44,730
free service now in this case it's a

00:11:42,930 --> 00:11:47,459
static copy of the document so the user

00:11:44,730 --> 00:11:49,230
can't actually use it live but they can

00:11:47,459 --> 00:11:53,120
always download it and then run it on

00:11:49,230 --> 00:11:55,500
their own machine if they like and then

00:11:53,120 --> 00:11:58,529
continuum analytics will let you host a

00:11:55,500 --> 00:12:00,029
notebook live at wakari i/o again for

00:11:58,529 --> 00:12:01,259
free at least for certain I'm not sure

00:12:00,029 --> 00:12:04,379
what their cutoff is or how their

00:12:01,259 --> 00:12:05,699
funding works but um so you have all

00:12:04,379 --> 00:12:07,350
these options for hosting and the

00:12:05,699 --> 00:12:08,970
ipython notebook is kind of the most

00:12:07,350 --> 00:12:11,459
executable documentation because not

00:12:08,970 --> 00:12:13,380
only do you get to execute it when you

00:12:11,459 --> 00:12:14,819
generate the document the user can

00:12:13,380 --> 00:12:16,439
execute it while they're reading it and

00:12:14,819 --> 00:12:18,839
see what's actually true on their system

00:12:16,439 --> 00:12:21,089
in fact they can jump in and experiment

00:12:18,839 --> 00:12:22,949
with these code cells try things out so

00:12:21,089 --> 00:12:24,449
that they you can be introducing a

00:12:22,949 --> 00:12:27,600
concept to them in the documentation

00:12:24,449 --> 00:12:29,579
part and their work area to try it out

00:12:27,600 --> 00:12:30,990
an experiment and learn things is right

00:12:29,579 --> 00:12:32,430
there in the very same window their

00:12:30,990 --> 00:12:33,660
brain doesn't have to switch gears as

00:12:32,430 --> 00:12:39,209
they move back and forth between other

00:12:33,660 --> 00:12:41,100
windows amazing amazing tool now the

00:12:39,209 --> 00:12:44,370
notebook that I've shown really basic

00:12:41,100 --> 00:12:47,579
really dull but the ipython project has

00:12:44,370 --> 00:12:50,009
some amazing tools out there look at the

00:12:47,579 --> 00:12:52,319
main NBD viewer site which hosts some

00:12:50,009 --> 00:12:54,089
great-looking notebooks there's a

00:12:52,319 --> 00:12:56,040
gallery of interesting I Python

00:12:54,089 --> 00:12:57,750
notebooks likewise really expands your

00:12:56,040 --> 00:13:00,000
brain with some of the possibilities I'm

00:12:57,750 --> 00:13:02,130
just going to quickly show you one

00:13:00,000 --> 00:13:04,079
notebook that was used to generate a

00:13:02,130 --> 00:13:07,800
textbook a piece of educational material

00:13:04,079 --> 00:13:10,529
so if you want to know if a I'm going to

00:13:07,800 --> 00:13:12,930
squash up the size a little if the

00:13:10,529 --> 00:13:14,519
notebook can do the sort of rich output

00:13:12,930 --> 00:13:17,899
that you need for what you're looking

00:13:14,519 --> 00:13:20,550
for the answer is almost certainly yes

00:13:17,899 --> 00:13:23,750
so not only does it have all this the

00:13:20,550 --> 00:13:23,750
user can go and mess with them

00:13:26,490 --> 00:13:31,120
yeah really easy integration between the

00:13:29,139 --> 00:13:32,790
code and the document the user gets to

00:13:31,120 --> 00:13:35,139
experiment and all these hosting options

00:13:32,790 --> 00:13:39,610
definitely want to check out the ipython

00:13:35,139 --> 00:13:42,660
notebook last technology I think I'm

00:13:39,610 --> 00:13:44,800
rushing from nervousness just forgive me

00:13:42,660 --> 00:13:47,110
dexi here's the only one you probably

00:13:44,800 --> 00:13:48,850
haven't heard of at a guess this is a

00:13:47,110 --> 00:13:51,370
framework for applying various

00:13:48,850 --> 00:13:53,949
transformations to documents that sounds

00:13:51,370 --> 00:13:56,769
kind of meaningless but we'll get it

00:13:53,949 --> 00:14:01,120
installed and then we'll try there's

00:13:56,769 --> 00:14:03,399
several steps to using it first you need

00:14:01,120 --> 00:14:05,560
to run setup to build kind of the

00:14:03,399 --> 00:14:08,649
infrastructure that you need in the

00:14:05,560 --> 00:14:10,569
directory then you write up your source

00:14:08,649 --> 00:14:13,509
text files these can be the restructure

00:14:10,569 --> 00:14:15,610
text or markdown then you need to write

00:14:13,509 --> 00:14:17,800
a recipe and that's just a text file

00:14:15,610 --> 00:14:21,069
that tells deck see what transformations

00:14:17,800 --> 00:14:23,589
you want to apply finally you run the

00:14:21,069 --> 00:14:29,170
deck C command itself to generate the

00:14:23,589 --> 00:14:30,819
document from all this source so here's

00:14:29,170 --> 00:14:34,209
an example of a source file that's going

00:14:30,819 --> 00:14:36,130
to run through Dec see it looks pretty

00:14:34,209 --> 00:14:39,040
similar to what we've seen before but

00:14:36,130 --> 00:14:41,649
now oh I wish hang on can I crank that

00:14:39,040 --> 00:14:43,300
front size up no it's rather resists

00:14:41,649 --> 00:14:49,269
having the size cranked up sorry about

00:14:43,300 --> 00:14:52,089
that what we have here this looks like a

00:14:49,269 --> 00:14:54,670
jinja to tag and in fact it is a jinja

00:14:52,089 --> 00:14:57,220
to tag and it says we want to go out to

00:14:54,670 --> 00:14:59,740
deck C and have it grab a document and

00:14:57,220 --> 00:15:01,720
include that in here and then pipe that

00:14:59,740 --> 00:15:03,220
through its own indent filter index see

00:15:01,720 --> 00:15:06,040
each of the transformations are referred

00:15:03,220 --> 00:15:08,439
to as filters so basically we want the

00:15:06,040 --> 00:15:10,329
raw text of this script and then we want

00:15:08,439 --> 00:15:12,220
it again but this time we're grabbing

00:15:10,329 --> 00:15:13,990
the text of the script and then we're

00:15:12,220 --> 00:15:15,939
piping it through the Python filter in

00:15:13,990 --> 00:15:18,100
other words run it through Python and

00:15:15,939 --> 00:15:21,250
get the results and include that right

00:15:18,100 --> 00:15:22,540
here and then we're going to do

00:15:21,250 --> 00:15:26,079
something similar on the software

00:15:22,540 --> 00:15:29,319
requirements finally we're going to go

00:15:26,079 --> 00:15:31,779
out and use a bash script and pump the

00:15:29,319 --> 00:15:34,120
results of that bash or sorry pump this

00:15:31,779 --> 00:15:35,059
bash script through bash itself to

00:15:34,120 --> 00:15:37,009
execute it

00:15:35,059 --> 00:15:39,559
and we're going to insert those results

00:15:37,009 --> 00:15:41,289
right here in the paragraph and deck C

00:15:39,559 --> 00:15:44,089
is the only tool that makes it easy to

00:15:41,289 --> 00:15:45,319
insert your results wherever you want

00:15:44,089 --> 00:15:47,539
them in the document they don't need to

00:15:45,319 --> 00:15:49,069
be in separate blocks they can be right

00:15:47,539 --> 00:15:52,839
there in the flow of the text if that's

00:15:49,069 --> 00:15:55,999
what you want so let's see the result oh

00:15:52,839 --> 00:15:57,229
i'm sorry i forgot the recipe file the

00:15:55,999 --> 00:15:59,509
next thing you have to do is say two

00:15:57,229 --> 00:16:01,399
decks see all right for all the

00:15:59,509 --> 00:16:03,919
restructured text files you find in this

00:16:01,399 --> 00:16:06,889
directory please apply jinja so that the

00:16:03,919 --> 00:16:08,839
tags work and then there's a couple of

00:16:06,889 --> 00:16:12,409
filters that basically set up some sane

00:16:08,839 --> 00:16:14,419
defaults for an HTML page and then these

00:16:12,409 --> 00:16:16,759
indented items those represent

00:16:14,419 --> 00:16:19,099
requirements that are required for the

00:16:16,759 --> 00:16:21,619
rst file namely you're going to need to

00:16:19,099 --> 00:16:23,569
pump the Python files through the Python

00:16:21,619 --> 00:16:28,399
filter and the batch files through the

00:16:23,569 --> 00:16:32,839
bash filter so finally once we've done

00:16:28,399 --> 00:16:36,079
oh my goodness not a problem I have

00:16:32,839 --> 00:16:42,429
thought I had that going let us which

00:16:36,079 --> 00:16:42,429
window is this haha

00:16:48,279 --> 00:16:55,079
oh I know it oh that's right I beg your

00:16:51,970 --> 00:16:58,870
pardon I remember what I have to do I

00:16:55,079 --> 00:17:01,839
included the link right here there we go

00:16:58,870 --> 00:17:04,449
alright here's our result so we have the

00:17:01,839 --> 00:17:06,730
text of the Python program and then we

00:17:04,449 --> 00:17:09,069
have the result of the Python program

00:17:06,730 --> 00:17:11,260
here we didn't ask for the text of it we

00:17:09,069 --> 00:17:13,860
just asked for the result and here we

00:17:11,260 --> 00:17:16,689
have requires blah blah blah you have

00:17:13,860 --> 00:17:18,970
postgresql and this is the result of

00:17:16,689 --> 00:17:26,260
that bash script inserted directly into

00:17:18,970 --> 00:17:33,309
my paragraph all right let me back up a

00:17:26,260 --> 00:17:35,950
place alright advantages of deck see you

00:17:33,309 --> 00:17:38,380
get a huge variety of transformations in

00:17:35,950 --> 00:17:41,020
fact I meant to put this in the slide

00:17:38,380 --> 00:17:43,630
but let's um I mentioned that each of

00:17:41,020 --> 00:17:49,960
these transformations is called a filter

00:17:43,630 --> 00:17:54,070
index e so deck C has a lot of available

00:17:49,960 --> 00:17:57,070
filters how goodness okay yeah as almost

00:17:54,070 --> 00:17:59,159
too many and deck C although it's

00:17:57,070 --> 00:18:01,149
written in Python the code you're

00:17:59,159 --> 00:18:03,520
executing doesn't have to be in Python

00:18:01,149 --> 00:18:05,530
so if you're doing a ruby or coffee

00:18:03,520 --> 00:18:07,149
script or who knows what you can pipe it

00:18:05,530 --> 00:18:09,130
through any of those as the filter and

00:18:07,149 --> 00:18:12,130
document up whatever language you're

00:18:09,130 --> 00:18:14,110
working in and you have really the most

00:18:12,130 --> 00:18:16,030
complete control of your output so if

00:18:14,110 --> 00:18:17,620
you have really exacting demands on what

00:18:16,030 --> 00:18:21,190
the output is going to look like you

00:18:17,620 --> 00:18:24,399
very well may need to end up using deck

00:18:21,190 --> 00:18:26,200
C but I got to admit this is the hardest

00:18:24,399 --> 00:18:27,820
one to work with um I was up kind of

00:18:26,200 --> 00:18:30,250
late last night because deck C was doing

00:18:27,820 --> 00:18:31,270
some last-minute betrayal on me so

00:18:30,250 --> 00:18:33,760
you're going to put more work into this

00:18:31,270 --> 00:18:35,980
if that's the way you need to go there's

00:18:33,760 --> 00:18:37,390
a deck C reset commit command that you

00:18:35,980 --> 00:18:39,880
will probably need to fall back on

00:18:37,390 --> 00:18:42,640
sometimes because deck C caches and

00:18:39,880 --> 00:18:44,860
either there's a bug or I'm bad at using

00:18:42,640 --> 00:18:46,780
it and it keeps on thinking that it

00:18:44,860 --> 00:18:49,659
should reuse cached material that I have

00:18:46,780 --> 00:18:52,140
refreshed also here's irony the

00:18:49,659 --> 00:18:55,780
documentation for deck C is incomplete

00:18:52,140 --> 00:18:58,770
what okay whatever nonetheless an

00:18:55,780 --> 00:19:01,680
extremely powerful tool

00:18:58,770 --> 00:19:03,810
so I've shown you mechanics mechanics of

00:19:01,680 --> 00:19:06,030
really basic hello world style wrapping

00:19:03,810 --> 00:19:07,530
code into documentation but honestly

00:19:06,030 --> 00:19:09,450
that was not the most important part of

00:19:07,530 --> 00:19:11,160
the talk this is the most important part

00:19:09,450 --> 00:19:14,400
of the talk which is where you use your

00:19:11,160 --> 00:19:16,500
imagination to apply these techniques to

00:19:14,400 --> 00:19:18,780
all sorts of problems all sorts of

00:19:16,500 --> 00:19:20,310
documents that you write almost anything

00:19:18,780 --> 00:19:22,050
that you write this on a computer could

00:19:20,310 --> 00:19:24,720
benefit if you think about it

00:19:22,050 --> 00:19:27,630
imaginatively for example don't just

00:19:24,720 --> 00:19:30,360
assert what python versions your code

00:19:27,630 --> 00:19:32,370
runs with run talks and include the

00:19:30,360 --> 00:19:34,860
results of your talks run right there in

00:19:32,370 --> 00:19:36,510
the document how about living lecture

00:19:34,860 --> 00:19:39,120
notes where the student can experiment

00:19:36,510 --> 00:19:40,950
as they read without even breaking away

00:19:39,120 --> 00:19:43,260
from your text that would be an iPod on

00:19:40,950 --> 00:19:46,110
notebook technique and in fact I've used

00:19:43,260 --> 00:19:48,510
that to teach it does work very well how

00:19:46,110 --> 00:19:50,580
about tutorials that actually assist

00:19:48,510 --> 00:19:53,730
with configuration obviously they would

00:19:50,580 --> 00:19:55,800
need to install your document first but

00:19:53,730 --> 00:19:57,420
then the tutorial could look at the

00:19:55,800 --> 00:19:59,670
system see what they have and help talk

00:19:57,420 --> 00:20:01,410
them through what else they need or a

00:19:59,670 --> 00:20:03,720
troubleshooting document that doesn't

00:20:01,410 --> 00:20:05,280
just say what the problem might be but

00:20:03,720 --> 00:20:06,810
the examines the system and tries to

00:20:05,280 --> 00:20:09,600
figure out what the problem might be

00:20:06,810 --> 00:20:11,700
don't just say this needs two gigs of

00:20:09,600 --> 00:20:13,890
memory say this needs two gigs of memory

00:20:11,700 --> 00:20:16,650
and I see that you only have one gig

00:20:13,890 --> 00:20:18,930
maybe that's the problem how about

00:20:16,650 --> 00:20:20,940
dashboards that don't just give you

00:20:18,930 --> 00:20:23,520
statistics and facts about the system

00:20:20,940 --> 00:20:25,350
but include the text explaining the

00:20:23,520 --> 00:20:28,590
relevance of those statistics and those

00:20:25,350 --> 00:20:30,330
facts how about organizational

00:20:28,590 --> 00:20:33,000
documentation that responds to changes

00:20:30,330 --> 00:20:35,850
in the organization so it no longer says

00:20:33,000 --> 00:20:39,030
see Joe for a new laptop once Joe's user

00:20:35,850 --> 00:20:41,970
account disappears from the system how

00:20:39,030 --> 00:20:43,710
about compliance documentation for those

00:20:41,970 --> 00:20:45,240
of you who have to do PCI compliance

00:20:43,710 --> 00:20:47,910
documentation or government compliance

00:20:45,240 --> 00:20:50,460
documentation that actually can verify

00:20:47,910 --> 00:20:53,010
itself don't just assert that the data

00:20:50,460 --> 00:20:54,630
is hashed in the database for example

00:20:53,010 --> 00:20:57,390
you can query the database in the

00:20:54,630 --> 00:20:59,310
document and verify that tons of

00:20:57,390 --> 00:21:01,230
possibilities I hope that your

00:20:59,310 --> 00:21:02,610
imagination will get fired up that you

00:21:01,230 --> 00:21:04,760
will start to include these techniques

00:21:02,610 --> 00:21:07,620
in documents you write in the future and

00:21:04,760 --> 00:21:11,670
I hope that your imagination will work

00:21:07,620 --> 00:21:12,669
on some questions the github repo is

00:21:11,670 --> 00:21:15,369
right here

00:21:12,669 --> 00:21:16,690
and all the slides are right here plus

00:21:15,369 --> 00:21:18,519
of course you will be able to find them

00:21:16,690 --> 00:21:20,139
on the Python website and i finished way

00:21:18,519 --> 00:21:23,070
early so if you don't have some

00:21:20,139 --> 00:21:36,369
questions are going to have a long break

00:21:23,070 --> 00:21:38,470
thank you hi our great talk I was

00:21:36,369 --> 00:21:39,999
wondering so I'm writing a software

00:21:38,470 --> 00:21:42,489
where we have in the documentation or

00:21:39,999 --> 00:21:45,460
tutorial of how to install the software

00:21:42,489 --> 00:21:48,999
and the stabs the files to create for

00:21:45,460 --> 00:21:50,830
the configuration on salon and maybe I'm

00:21:48,999 --> 00:21:53,470
missing something I was wondering if we

00:21:50,830 --> 00:21:55,749
could run this tutorial against like

00:21:53,470 --> 00:21:58,929
like a test if there was a solution for

00:21:55,749 --> 00:22:02,619
that for creating files changing those

00:21:58,929 --> 00:22:03,909
two lines and so on um yes I do think

00:22:02,619 --> 00:22:06,220
that you should be able to do that if

00:22:03,909 --> 00:22:08,109
you can the trouble is of course that

00:22:06,220 --> 00:22:10,239
the user is first going to need to get

00:22:08,109 --> 00:22:13,720
enough installed so that one of these

00:22:10,239 --> 00:22:16,779
techniques will work so that they will

00:22:13,720 --> 00:22:18,129
need to have a little bit of they'll

00:22:16,779 --> 00:22:19,659
either need to have the notebook or

00:22:18,129 --> 00:22:21,730
whatever the technology is but at that

00:22:19,659 --> 00:22:24,789
point you could definitely have a

00:22:21,730 --> 00:22:26,139
document that then oh no I was wondering

00:22:24,789 --> 00:22:28,659
if there was a way to make sure that

00:22:26,139 --> 00:22:30,039
this tutorial is still valid like we

00:22:28,659 --> 00:22:31,869
don't have to update the tutorial like

00:22:30,039 --> 00:22:35,169
if every time we do have come into an

00:22:31,869 --> 00:22:37,179
hour software we run the double-digit

00:22:35,169 --> 00:22:39,399
Oriole against the software I see yes

00:22:37,179 --> 00:22:42,820
well if it for instance if it's finks

00:22:39,399 --> 00:22:44,889
then every time you run make HTML it's

00:22:42,820 --> 00:22:47,440
going to execute those if you're using

00:22:44,889 --> 00:22:51,039
like the autorun or program output that

00:22:47,440 --> 00:22:53,559
will in fact execute every time you run

00:22:51,039 --> 00:22:55,330
make HTML so if you can run a make of

00:22:53,559 --> 00:22:57,489
the wherever that fits into your

00:22:55,330 --> 00:23:00,399
workflow generating the document it will

00:22:57,489 --> 00:23:02,139
confirm that live just thank exactly and

00:23:00,399 --> 00:23:05,710
what I was wondering if if there was a

00:23:02,139 --> 00:23:08,200
tool for because here like there are

00:23:05,710 --> 00:23:10,840
great tools for doc test and for Python

00:23:08,200 --> 00:23:15,519
testing but what about bash testing

00:23:10,840 --> 00:23:18,759
modifying a foul adding this file and so

00:23:15,519 --> 00:23:20,919
for example there is a the Charlie's

00:23:18,759 --> 00:23:24,120
eyes can create these follow this exact

00:23:20,919 --> 00:23:30,270
path yes is there such tool

00:23:24,120 --> 00:23:33,150
if you're let me think you can write up

00:23:30,270 --> 00:23:34,350
say if you wrote up a bash script that

00:23:33,150 --> 00:23:37,460
would look at their system to see if

00:23:34,350 --> 00:23:39,570
they'd followed these tutorial steps

00:23:37,460 --> 00:23:42,270
then you could include the result from

00:23:39,570 --> 00:23:44,300
that in a document am I am i close to

00:23:42,270 --> 00:23:47,070
what you're getting at I'm not sure uh

00:23:44,300 --> 00:23:50,190
naturally uh I think we can chat about

00:23:47,070 --> 00:23:51,780
that you later i'm sorry missing the

00:23:50,190 --> 00:23:54,810
point okay that's all right thank you

00:23:51,780 --> 00:23:57,030
thanks i will catch you after here um

00:23:54,810 --> 00:23:59,310
see I guess I actually have a very

00:23:57,030 --> 00:24:01,110
similar question so we shouldn't write

00:23:59,310 --> 00:24:03,030
documentation that is test but if we're

00:24:01,110 --> 00:24:07,040
putting code in our documentation is

00:24:03,030 --> 00:24:09,180
there can any of these tools test the

00:24:07,040 --> 00:24:11,340
expected results I mean if we put a doc

00:24:09,180 --> 00:24:13,620
test but if we say you know I don't want

00:24:11,340 --> 00:24:16,950
my documentation to say not implement it

00:24:13,620 --> 00:24:20,640
or value error or something in that case

00:24:16,950 --> 00:24:22,320
um the doc test extension two Fink's

00:24:20,640 --> 00:24:25,080
would be a good one in that it doesn't

00:24:22,320 --> 00:24:27,750
throw ugly things into the document it

00:24:25,080 --> 00:24:30,330
just verifies that what you have is what

00:24:27,750 --> 00:24:31,710
you expected so that might be the way

00:24:30,330 --> 00:24:33,150
you want to go in that case there's

00:24:31,710 --> 00:24:34,860
probably a way to I'm sure you could

00:24:33,150 --> 00:24:37,110
hack up the other techniques like the

00:24:34,860 --> 00:24:39,150
notebook to do that too but yeah the doc

00:24:37,110 --> 00:24:41,010
test extension would be the easiest way

00:24:39,150 --> 00:24:43,830
to approach that just quick answer also

00:24:41,010 --> 00:24:47,130
this if anybody knows about Seaborn

00:24:43,830 --> 00:24:49,680
plotting library on top of mat plot leap

00:24:47,130 --> 00:24:52,530
for ipython notebooks so that guy wrote

00:24:49,680 --> 00:24:54,990
little script which test if notebook

00:24:52,530 --> 00:24:56,760
produces the same output as before right

00:24:54,990 --> 00:24:58,830
so if you create a document using

00:24:56,760 --> 00:25:01,500
ipython notebook you just rerun it and

00:24:58,830 --> 00:25:04,020
it would verify that output is the same

00:25:01,500 --> 00:25:06,060
so it's simple solution for that and

00:25:04,020 --> 00:25:09,150
isn't that in oh gosh there's a

00:25:06,060 --> 00:25:11,250
repository of ipython notebook add-ons

00:25:09,150 --> 00:25:13,530
is that do you know if that's where that

00:25:11,250 --> 00:25:16,800
is I just saw I didn't see born itself

00:25:13,530 --> 00:25:18,840
so if you go git hub just search for a

00:25:16,800 --> 00:25:21,900
seaborne and it's beautiful plot in

00:25:18,840 --> 00:25:24,210
library guy so based on panda so if you

00:25:21,900 --> 00:25:26,690
want really quick overview and there is

00:25:24,210 --> 00:25:30,030
tutorials on that and how he analyzed

00:25:26,690 --> 00:25:32,070
Titanic data using Seaborn just really

00:25:30,030 --> 00:25:35,100
going step by step oh but that's already

00:25:32,070 --> 00:25:36,960
a virgin so he has the tool seabourn for

00:25:35,100 --> 00:25:37,740
verifying that an ipad on notebook is

00:25:36,960 --> 00:25:39,690
not giving

00:25:37,740 --> 00:25:42,300
you weird unexpected results okay thank

00:25:39,690 --> 00:25:45,420
you for that um so question could you

00:25:42,300 --> 00:25:47,070
use deck C as a preprocessor for Sphinx

00:25:45,420 --> 00:25:48,750
basically keep the output as a

00:25:47,070 --> 00:25:51,150
restructured test and then incorporate

00:25:48,750 --> 00:25:54,090
that in the Sphinx output you can in

00:25:51,150 --> 00:25:57,059
fact do that and that would be one way

00:25:54,090 --> 00:25:58,140
to still use Sphinx and you could have

00:25:57,059 --> 00:25:59,700
some additional options for how to

00:25:58,140 --> 00:26:02,250
incorporate live data from your system

00:25:59,700 --> 00:26:04,410
via the dexion excellent example yeah

00:26:02,250 --> 00:26:08,580
yeah because your your output format

00:26:04,410 --> 00:26:10,290
from exe doesn't have to be anything it

00:26:08,580 --> 00:26:12,210
can you can just put it right back in to

00:26:10,290 --> 00:26:14,840
restructure text and then process that

00:26:12,210 --> 00:26:17,220
from there thank you for a great example

00:26:14,840 --> 00:26:19,410
so like you said we've all seen an eye

00:26:17,220 --> 00:26:22,800
Python notebook do like insanely

00:26:19,410 --> 00:26:24,960
mind-blowingly awesome things has anyone

00:26:22,800 --> 00:26:26,809
tried to integrate that into Sphinx so

00:26:24,960 --> 00:26:29,730
that you can get all those cool like

00:26:26,809 --> 00:26:32,130
spinach arts and like sliders that make

00:26:29,730 --> 00:26:33,240
re graph things I mean some of that

00:26:32,130 --> 00:26:35,550
probably wouldn't be possible in a

00:26:33,240 --> 00:26:38,520
static static environment but like has

00:26:35,550 --> 00:26:40,230
anyone tried to get to like I guess get

00:26:38,520 --> 00:26:43,380
some of that I Python magic into Sphinx

00:26:40,230 --> 00:26:46,500
yes um usually the answer to has anyone

00:26:43,380 --> 00:26:47,850
tried is yes okay um but I don't know

00:26:46,500 --> 00:26:49,410
okay I'm gonna throw this one out there

00:26:47,850 --> 00:26:52,020
I don't know if such an example does

00:26:49,410 --> 00:26:56,010
anyone know of one does anyone is anyone

00:26:52,020 --> 00:26:58,020
saying for Sprint's um that would be a

00:26:56,010 --> 00:27:02,210
really interesting project and I can't

00:26:58,020 --> 00:27:06,870
tell you but okay thank you thank you

00:27:02,210 --> 00:27:09,510
okay I'm one of the interesting tool to

00:27:06,870 --> 00:27:12,929
look out here is another Sphinx plug-in

00:27:09,510 --> 00:27:18,090
called Manuel which lets you instead of

00:27:12,929 --> 00:27:19,410
displaying your doc tests as dope tests

00:27:18,090 --> 00:27:21,780
it allows you to show them as code

00:27:19,410 --> 00:27:27,510
snippets which the more complex examples

00:27:21,780 --> 00:27:34,650
can be really helpful and well as in the

00:27:27,510 --> 00:27:39,960
waiter from Fawlty Towers ma nu e LEL

00:27:34,650 --> 00:27:41,900
yes hmm I had to put pie pie in there as

00:27:39,960 --> 00:27:43,890
well to find out interesting okay well

00:27:41,900 --> 00:27:45,570
thank you for the recommendation so

00:27:43,890 --> 00:27:49,020
there is somewhere out there a sphinx

00:27:45,570 --> 00:27:52,790
Manuel extension that will give you

00:27:49,020 --> 00:27:52,790
other options for running the doc tests

00:27:53,070 --> 00:27:58,090
ok so let's see my contacts are giving

00:27:56,710 --> 00:27:59,230
me trouble under the glare I think

00:27:58,090 --> 00:28:07,450
that's all the questions we have them

00:27:59,230 --> 00:28:10,230
all right ok all right thank you enjoy

00:28:07,450 --> 00:28:10,230

YouTube URL: https://www.youtube.com/watch?v=yc1CjhoQFNQ


