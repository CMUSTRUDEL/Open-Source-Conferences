Title: Kate Heddleston: So you want to be a full-stack developer? How to build a full-stack Py - PyCon 2014
Publication date: 2014-04-24
Playlist: PyCon 2014
Description: 
	Speaker: Kate Heddleston

This is a talk about building full-stack python web applications where you manage every part of the application yourself. I will walk through how to setup a production server with your web application code, a local development environment using vagrant, and how to deploy from your local environment to production. I will also walk through python and Django libraries that will make your life easier.

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:02,300 --> 00:00:06,750
please join me in welcoming stingy was

00:00:05,310 --> 00:00:14,940
gonna be talking about how that is to be

00:00:06,750 --> 00:00:18,480
a full-stack developer alright hi

00:00:14,940 --> 00:00:20,670
everybody welcome um so my name is Kate

00:00:18,480 --> 00:00:22,560
Huddleston I am a software engineer I

00:00:20,670 --> 00:00:25,170
hail from San Francisco California

00:00:22,560 --> 00:00:28,109
that is a picture of me and then also my

00:00:25,170 --> 00:00:29,580
self-portraits I drew it because my mom

00:00:28,109 --> 00:00:31,439
decided recently that she wanted to

00:00:29,580 --> 00:00:33,960
embroider a jean jacket for me with an

00:00:31,439 --> 00:00:35,370
image of a computer girl so I have a

00:00:33,960 --> 00:00:36,660
sweet jean jacket with that on the back

00:00:35,370 --> 00:00:40,140
if you want to find me later in the

00:00:36,660 --> 00:00:43,469
conference so why am i giving this talk

00:00:40,140 --> 00:00:46,140
I submitted this presentation because I

00:00:43,469 --> 00:00:48,270
I am an applications developer and when

00:00:46,140 --> 00:00:51,480
I started doing contract work I had to

00:00:48,270 --> 00:00:53,100
manage the whole stack myself and it

00:00:51,480 --> 00:00:55,289
turns out Python is usually part of a

00:00:53,100 --> 00:00:57,809
much larger system and when you come

00:00:55,289 --> 00:01:00,510
outside of the application layer it can

00:00:57,809 --> 00:01:02,879
be very confusing you can get lost there

00:01:00,510 --> 00:01:04,589
are a lot of pieces and that's pretty

00:01:02,879 --> 00:01:07,890
much roughly how I play Tetris as well

00:01:04,589 --> 00:01:09,720
as how I program so there's just a lot

00:01:07,890 --> 00:01:11,280
of stuff going on and it's important to

00:01:09,720 --> 00:01:15,240
understand how this system works as a

00:01:11,280 --> 00:01:17,100
whole okay so what we're gonna talk

00:01:15,240 --> 00:01:19,799
about today I'm gonna walk you through a

00:01:17,100 --> 00:01:21,810
semi typical web application and I say

00:01:19,799 --> 00:01:23,189
semi typical because this is computers

00:01:21,810 --> 00:01:25,170
and there are always a lot of different

00:01:23,189 --> 00:01:26,670
ways to do things I'm gonna walk you

00:01:25,170 --> 00:01:28,710
through kind of the system of systems

00:01:26,670 --> 00:01:30,210
which is development staging and

00:01:28,710 --> 00:01:32,400
production environments as well as

00:01:30,210 --> 00:01:33,869
deploy and then along the way I'm going

00:01:32,400 --> 00:01:37,170
to talk to you about some helpful Python

00:01:33,869 --> 00:01:38,790
libraries what we are not going to talk

00:01:37,170 --> 00:01:40,110
about today we are not going to talk

00:01:38,790 --> 00:01:42,450
about massively scalable web

00:01:40,110 --> 00:01:43,890
applications so if you're looking to

00:01:42,450 --> 00:01:45,720
build something like Google or Facebook

00:01:43,890 --> 00:01:47,850
or understand those we're not going to

00:01:45,720 --> 00:01:49,710
talk about that today we're not going to

00:01:47,850 --> 00:01:51,210
talk about every single installation on

00:01:49,710 --> 00:01:52,979
the machine there are things missing

00:01:51,210 --> 00:01:55,170
from this presentation because I cannot

00:01:52,979 --> 00:01:57,210
cover everything in 25 minutes

00:01:55,170 --> 00:02:02,250
and we're not gonna go into the nitty

00:01:57,210 --> 00:02:05,340
gritty details of anything okay so a

00:02:02,250 --> 00:02:07,890
semi typical web application how many of

00:02:05,340 --> 00:02:10,890
you have heard the term lamp a lamp

00:02:07,890 --> 00:02:12,720
stack nice I've actually never

00:02:10,890 --> 00:02:14,030
programmed a lamp stuff stack

00:02:12,720 --> 00:02:17,990
specifically

00:02:14,030 --> 00:02:19,910
but what it refers to is Linux Apache my

00:02:17,990 --> 00:02:23,720
sequel and PHP and these are kind of the

00:02:19,910 --> 00:02:25,880
four core parts of a small full stack

00:02:23,720 --> 00:02:28,370
web application it's the operating

00:02:25,880 --> 00:02:31,489
system which in this case is Linux the

00:02:28,370 --> 00:02:33,650
web server which is Apache the database

00:02:31,489 --> 00:02:35,780
which is my sequel and the application

00:02:33,650 --> 00:02:37,400
language which is PHP however most of us

00:02:35,780 --> 00:02:41,060
here probably don't program that stack

00:02:37,400 --> 00:02:46,670
we I program something like lint limp

00:02:41,060 --> 00:02:48,980
Ellen peepee Linux nginx Postgres Python

00:02:46,670 --> 00:02:52,370
so you can change out the parts of this

00:02:48,980 --> 00:02:55,880
stack the next part of this presentation

00:02:52,370 --> 00:02:57,769
I can either speak or I can do in song

00:02:55,880 --> 00:02:59,660
because I kind of came up with the theme

00:02:57,769 --> 00:03:02,690
song one day while I was getting ready

00:02:59,660 --> 00:03:05,510
so does anyone have a strong preference

00:03:02,690 --> 00:03:06,620
either way song okay I was kind of

00:03:05,510 --> 00:03:10,010
hoping and dreading that you would say

00:03:06,620 --> 00:03:15,260
that all right it's to the tune of the

00:03:10,010 --> 00:03:19,130
Brady Bunch theme song all right it's

00:03:15,260 --> 00:03:22,430
the story of a Linux server that was

00:03:19,130 --> 00:03:24,590
hosting Apache and some apps all of them

00:03:22,430 --> 00:03:28,250
were running Python because it's awesome

00:03:24,590 --> 00:03:31,340
the smallest one with flask it's the

00:03:28,250 --> 00:03:34,400
story of a post card server that was

00:03:31,340 --> 00:03:36,250
busy with some data of its own it was

00:03:34,400 --> 00:03:38,660
clear these two should come together

00:03:36,250 --> 00:03:41,750
that's the way we built our first full

00:03:38,660 --> 00:03:44,750
stack web app full stack web apps full

00:03:41,750 --> 00:03:47,690
stack web apps that's the way we built

00:03:44,750 --> 00:03:50,320
our first full stack web app Duronto Ton

00:03:47,690 --> 00:03:50,320
Ton Hey

00:03:57,349 --> 00:04:03,870
yes you were all free to laugh at me now

00:04:01,370 --> 00:04:05,849
but this actually has the right content

00:04:03,870 --> 00:04:07,739
amazingly enough being for being as

00:04:05,849 --> 00:04:09,540
corny as it is it's um it's all the

00:04:07,739 --> 00:04:11,640
parts of a small full stack web

00:04:09,540 --> 00:04:14,190
application it has the operating system

00:04:11,640 --> 00:04:16,739
the web server the application and the

00:04:14,190 --> 00:04:19,380
database and so if you take a look at

00:04:16,739 --> 00:04:21,239
these parts the web server is what

00:04:19,380 --> 00:04:24,990
receives requests and gives back

00:04:21,239 --> 00:04:26,940
responses nginx in G unicorn or Apache

00:04:24,990 --> 00:04:29,940
and mod whiskey are typical tools that

00:04:26,940 --> 00:04:31,770
people use for their web servers the

00:04:29,940 --> 00:04:34,200
application layer which is where the

00:04:31,770 --> 00:04:36,030
bulk of a lot of engineers spend most of

00:04:34,200 --> 00:04:38,460
their time this is where frameworks like

00:04:36,030 --> 00:04:40,680
Django and flask live Python libraries

00:04:38,460 --> 00:04:42,270
some of your front-end code may be your

00:04:40,680 --> 00:04:43,710
static files although those can

00:04:42,270 --> 00:04:46,410
technically be served from anywhere

00:04:43,710 --> 00:04:48,270
because they are static and then finally

00:04:46,410 --> 00:04:49,979
your database and a lot of people use

00:04:48,270 --> 00:04:52,680
relational databases like Postgres

00:04:49,979 --> 00:04:55,140
sequel my sequel sequel server you can

00:04:52,680 --> 00:04:57,990
also use alternative data alternative

00:04:55,140 --> 00:05:01,140
data stores like key value stores such

00:04:57,990 --> 00:05:03,180
as Redis or MongoDB you can use those in

00:05:01,140 --> 00:05:05,580
conjunction with or in lieu of a

00:05:03,180 --> 00:05:08,490
relational database people kind of do

00:05:05,580 --> 00:05:09,870
either these days so we're gonna start

00:05:08,490 --> 00:05:11,940
adding stuff to our small web

00:05:09,870 --> 00:05:14,400
application now you've got things up and

00:05:11,940 --> 00:05:16,650
running you have a website it you know

00:05:14,400 --> 00:05:18,720
serves web pages you might have user

00:05:16,650 --> 00:05:20,729
authentication and things like that and

00:05:18,720 --> 00:05:21,870
so now you want some logging you want to

00:05:20,729 --> 00:05:23,789
know what's going on you want to know

00:05:21,870 --> 00:05:26,310
who's accessing your web application and

00:05:23,789 --> 00:05:27,840
these can just live as log files on the

00:05:26,310 --> 00:05:29,789
machine for now because you have one

00:05:27,840 --> 00:05:32,400
server and it's pretty small so you just

00:05:29,789 --> 00:05:35,700
have maybe a jewnicorn access log some

00:05:32,400 --> 00:05:37,169
Python logs whatever you also probably

00:05:35,700 --> 00:05:39,840
have something for version control

00:05:37,169 --> 00:05:42,360
you probably don't just have code hosted

00:05:39,840 --> 00:05:45,030
on this server so for version control

00:05:42,360 --> 00:05:48,150
people use get an SVN and they use

00:05:45,030 --> 00:05:54,000
github or bitbucket to host code

00:05:48,150 --> 00:05:55,680
repositories so next now that

00:05:54,000 --> 00:05:57,600
everything's working and running you

00:05:55,680 --> 00:05:59,909
have a web application people can log in

00:05:57,600 --> 00:06:01,289
it you know does whatever it is that you

00:05:59,909 --> 00:06:02,460
want your web application to do you're

00:06:01,289 --> 00:06:04,380
like I want to start sending and

00:06:02,460 --> 00:06:04,770
receiving emails maybe I would like to

00:06:04,380 --> 00:06:07,020
send

00:06:04,770 --> 00:06:08,759
users newsletters or I would like to

00:06:07,020 --> 00:06:11,160
verify their email address when they

00:06:08,759 --> 00:06:14,099
sign up for my site so now you have to

00:06:11,160 --> 00:06:15,930
set up an SMTP server you can host this

00:06:14,099 --> 00:06:17,400
yourself or you can use some of the

00:06:15,930 --> 00:06:18,840
great services out there for it like

00:06:17,400 --> 00:06:21,419
postmark apps SendGrid

00:06:18,840 --> 00:06:24,870
Amazon SES and they have really great

00:06:21,419 --> 00:06:30,330
freemium tiers like 15,000 free emails I

00:06:24,870 --> 00:06:33,060
still haven't used them all so now you

00:06:30,330 --> 00:06:35,310
have your website sending emails doing

00:06:33,060 --> 00:06:37,199
all this stuff but you realize as the

00:06:35,310 --> 00:06:39,150
user is registering you put in their

00:06:37,199 --> 00:06:41,340
username password email they hit

00:06:39,150 --> 00:06:42,780
register some of these tasks are taking

00:06:41,340 --> 00:06:44,669
a long time and they're kind of blocking

00:06:42,780 --> 00:06:46,560
the UI which is a bad experience for

00:06:44,669 --> 00:06:48,000
your user and you're like I would like

00:06:46,560 --> 00:06:49,440
some of these tasks to run in the

00:06:48,000 --> 00:06:52,590
background I'd like to kick them to an

00:06:49,440 --> 00:06:54,360
asynchronous task service you also might

00:06:52,590 --> 00:06:56,310
want to do some web crawling so if you

00:06:54,360 --> 00:06:58,409
want to go out and get data across the

00:06:56,310 --> 00:07:00,090
web you might do that in the background

00:06:58,409 --> 00:07:01,289
you might want to schedule tasks to do

00:07:00,090 --> 00:07:02,969
that so there's a lot of things that

00:07:01,289 --> 00:07:04,349
you're you're thinking you might want to

00:07:02,969 --> 00:07:06,690
have run in the background of your

00:07:04,349 --> 00:07:08,449
application so setting up an

00:07:06,690 --> 00:07:11,250
asynchronous task system makes sense now

00:07:08,449 --> 00:07:12,960
it's important to note that asynchronous

00:07:11,250 --> 00:07:15,500
tasks usually have some sort of data

00:07:12,960 --> 00:07:19,080
store that they run on so like Redis or

00:07:15,500 --> 00:07:21,690
RabbitMQ to store the tasks that you're

00:07:19,080 --> 00:07:24,449
running so things that people typically

00:07:21,690 --> 00:07:26,370
use Python RQ is a Python library for

00:07:24,449 --> 00:07:29,250
asynchronous tasks and you can use Redis

00:07:26,370 --> 00:07:31,229
to store the tasks celery and RabbitMQ

00:07:29,250 --> 00:07:33,840
is also a really really common stack for

00:07:31,229 --> 00:07:35,520
this I mentioned asynchronous frameworks

00:07:33,840 --> 00:07:38,360
because there are a lot of talks at

00:07:35,520 --> 00:07:40,770
PyCon about them so twisted and tornado

00:07:38,360 --> 00:07:41,969
and you guys can go to those talks if

00:07:40,770 --> 00:07:46,349
you want to learn more about that

00:07:41,969 --> 00:07:46,740
section okay so you've got everything

00:07:46,349 --> 00:07:49,560
set up

00:07:46,740 --> 00:07:51,360
you can run tasks in the background do

00:07:49,560 --> 00:07:54,990
web crawling you have a pretty robust

00:07:51,360 --> 00:07:56,639
web application now and you're starting

00:07:54,990 --> 00:07:58,229
to have some errors that people are

00:07:56,639 --> 00:07:59,550
emailing you and you don't really know

00:07:58,229 --> 00:08:01,849
what's going on so you're like I should

00:07:59,550 --> 00:08:04,409
probably set up some exception handling

00:08:01,849 --> 00:08:06,539
and right now exception handling can

00:08:04,409 --> 00:08:09,180
just be emails you have your SMTP server

00:08:06,539 --> 00:08:10,139
set up so every time Python or Jango

00:08:09,180 --> 00:08:12,509
throws an exception

00:08:10,139 --> 00:08:13,949
you can email yourself and know that

00:08:12,509 --> 00:08:16,339
there's a problem so you can go in and

00:08:13,949 --> 00:08:16,339
fix these

00:08:17,400 --> 00:08:22,440
all right so this is where we're at this

00:08:19,860 --> 00:08:25,020
is a pretty small single server web

00:08:22,440 --> 00:08:26,400
application you have the other services

00:08:25,020 --> 00:08:28,889
like version control and your SMTP

00:08:26,400 --> 00:08:30,360
server but now we're gonna start pulling

00:08:28,889 --> 00:08:31,949
things out into separate services

00:08:30,360 --> 00:08:33,870
because your web application is getting

00:08:31,949 --> 00:08:36,330
larger and it doesn't all fit on one

00:08:33,870 --> 00:08:38,070
server in fact your database has a lot

00:08:36,330 --> 00:08:40,409
of data in it now and it's growing

00:08:38,070 --> 00:08:41,969
faster than your web application and so

00:08:40,409 --> 00:08:44,310
you pull that out into a separate server

00:08:41,969 --> 00:08:45,779
so now you've got two servers so you got

00:08:44,310 --> 00:08:46,380
your front-end server and your database

00:08:45,779 --> 00:08:49,140
server

00:08:46,380 --> 00:08:51,779
and you have to make Network calls to

00:08:49,140 --> 00:08:53,490
your database so you also do some math

00:08:51,779 --> 00:08:55,860
and you realize that there's some data

00:08:53,490 --> 00:08:58,529
that people need a lot that doesn't

00:08:55,860 --> 00:08:59,940
change very often and so you can add in

00:08:58,529 --> 00:09:01,410
a cache so that you don't have to make

00:08:59,940 --> 00:09:03,480
these Network calls and so you can serve

00:09:01,410 --> 00:09:05,160
up this data really fast some typical

00:09:03,480 --> 00:09:08,400
things that people use for caches are

00:09:05,160 --> 00:09:09,810
memcached Redis or varnish you'll notice

00:09:08,400 --> 00:09:14,490
rhetta's can be used for a lot of

00:09:09,810 --> 00:09:16,230
different things monitoring so you have

00:09:14,490 --> 00:09:17,880
logging and exception handling but now

00:09:16,230 --> 00:09:19,050
you need more monitoring you want to

00:09:17,880 --> 00:09:20,880
know what's going on you want to know

00:09:19,050 --> 00:09:23,430
what the performance looks like you want

00:09:20,880 --> 00:09:25,290
to know if your site goes down so there

00:09:23,430 --> 00:09:27,810
are tools like New Relic that do great

00:09:25,290 --> 00:09:29,850
performance monitoring Nagios says I T

00:09:27,810 --> 00:09:31,650
infrastructure monitoring Pingdom will

00:09:29,850 --> 00:09:33,390
tell you if your site is up or down so

00:09:31,650 --> 00:09:34,950
you can get a really delightful text

00:09:33,390 --> 00:09:36,330
message at 4:00 in the morning that your

00:09:34,950 --> 00:09:38,190
website is down and you have to go fix

00:09:36,330 --> 00:09:42,000
it because that's what I love doing at

00:09:38,190 --> 00:09:44,670
4:00 in the morning ok your asynchronous

00:09:42,000 --> 00:09:46,260
tasks these are growing a lot it's

00:09:44,670 --> 00:09:48,360
taking up a ton of the processing power

00:09:46,260 --> 00:09:49,560
on your single front-end web server so

00:09:48,360 --> 00:09:51,600
you have to pull these out into a

00:09:49,560 --> 00:09:53,610
separate server it can still write to

00:09:51,600 --> 00:09:55,440
the database you still kick past's to it

00:09:53,610 --> 00:09:59,279
the same way but you can scale that

00:09:55,440 --> 00:10:01,050
independently now as well exception

00:09:59,279 --> 00:10:02,940
handling is also growing as you get more

00:10:01,050 --> 00:10:04,940
users and you write more code you

00:10:02,940 --> 00:10:08,580
generally get more exceptions although

00:10:04,940 --> 00:10:10,529
hopefully not but probably so emails are

00:10:08,580 --> 00:10:12,209
insufficient you can use tools like

00:10:10,529 --> 00:10:13,500
sentry so we'll give a shout-out to

00:10:12,209 --> 00:10:14,160
century because I think David Kramer's

00:10:13,500 --> 00:10:16,650
here somewhere

00:10:14,160 --> 00:10:18,600
the conference and it will aggregate

00:10:16,650 --> 00:10:20,100
your exceptions and give you a lot of

00:10:18,600 --> 00:10:22,850
really great information about the types

00:10:20,100 --> 00:10:24,779
of exceptions that people are hitting

00:10:22,850 --> 00:10:27,930
finally we're gonna pull logging out

00:10:24,779 --> 00:10:30,390
into its own service you can either host

00:10:27,930 --> 00:10:32,010
your own log server or you can use tools

00:10:30,390 --> 00:10:34,630
like log Lee and

00:10:32,010 --> 00:10:36,400
when you have multiple servers running

00:10:34,630 --> 00:10:37,750
you need to aggregate those logs across

00:10:36,400 --> 00:10:39,820
the server's otherwise you're gonna have

00:10:37,750 --> 00:10:42,430
to log into each server check the logs

00:10:39,820 --> 00:10:44,890
on the machine and that's inefficient as

00:10:42,430 --> 00:10:46,270
you grow so you want to aggregate all

00:10:44,890 --> 00:10:48,310
the logs and you want to do some

00:10:46,270 --> 00:10:50,860
probably data mining on them to get

00:10:48,310 --> 00:10:52,510
useful information out of user patterns

00:10:50,860 --> 00:10:53,860
and all that other stuff so log lea and

00:10:52,510 --> 00:10:56,160
spunk will do that for you or you can

00:10:53,860 --> 00:10:56,160
build it yourself

00:10:56,400 --> 00:11:00,700
okay so we've started pulling stuff out

00:10:58,840 --> 00:11:03,100
into separate services but your web

00:11:00,700 --> 00:11:05,680
traffic is growing even more so one

00:11:03,100 --> 00:11:07,570
front-end web server is not sufficient

00:11:05,680 --> 00:11:09,790
and this is where you start to have two

00:11:07,570 --> 00:11:12,910
or more servers with a load balancer in

00:11:09,790 --> 00:11:14,710
front the load balancer will will kick

00:11:12,910 --> 00:11:16,000
your traffic you know across the web

00:11:14,710 --> 00:11:17,500
servers they can all still talk to the

00:11:16,000 --> 00:11:20,620
same database the same asynchronous

00:11:17,500 --> 00:11:22,210
tasks servers and the user looks like

00:11:20,620 --> 00:11:25,960
the same website but you can now scale

00:11:22,210 --> 00:11:27,460
it as your traffic grows you still have

00:11:25,960 --> 00:11:29,170
all of these other services by the way

00:11:27,460 --> 00:11:31,030
that you need to manage and remember and

00:11:29,170 --> 00:11:34,300
log into all of the dashboards and take

00:11:31,030 --> 00:11:37,140
a look at and then the final step for

00:11:34,300 --> 00:11:39,880
our web server is database replication

00:11:37,140 --> 00:11:41,260
so you don't want any single point of

00:11:39,880 --> 00:11:43,600
failure you might actually have done

00:11:41,260 --> 00:11:45,130
this earlier but you can set up a master

00:11:43,600 --> 00:11:47,500
database and have it replicate to a

00:11:45,130 --> 00:11:49,090
slave database if your master goes down

00:11:47,500 --> 00:11:51,400
or something bad happens you then have a

00:11:49,090 --> 00:11:53,230
backup that you can failover to you can

00:11:51,400 --> 00:11:54,940
also do cool stuff like write data into

00:11:53,230 --> 00:11:57,220
the master and read off of the read

00:11:54,940 --> 00:11:58,810
slaves at this point you might also have

00:11:57,220 --> 00:12:00,250
multiple servers for your asynchronous

00:11:58,810 --> 00:12:02,020
tasks because if you're doing a lot of

00:12:00,250 --> 00:12:03,610
web crawling and getting a lot of data

00:12:02,020 --> 00:12:04,630
you're gonna need multiple servers for

00:12:03,610 --> 00:12:07,600
that and so you can scale that

00:12:04,630 --> 00:12:10,690
independently so this is a pretty robust

00:12:07,600 --> 00:12:13,150
small to medium sized web application at

00:12:10,690 --> 00:12:13,840
this point you probably can't manage it

00:12:13,150 --> 00:12:15,280
all alone

00:12:13,840 --> 00:12:17,080
to be totally honest especially if you

00:12:15,280 --> 00:12:20,650
have the web traffic that justifies

00:12:17,080 --> 00:12:23,470
multiple servers and all of that okay

00:12:20,650 --> 00:12:25,900
next up the system of systems so this

00:12:23,470 --> 00:12:27,430
story line happens at the same time as

00:12:25,900 --> 00:12:30,340
the story line that I was just talking

00:12:27,430 --> 00:12:32,860
about at some point in building your

00:12:30,340 --> 00:12:35,650
production web server you realize that

00:12:32,860 --> 00:12:37,480
you can't edit the code on production

00:12:35,650 --> 00:12:39,460
while people are hitting it so

00:12:37,480 --> 00:12:41,050
production represents everything that we

00:12:39,460 --> 00:12:43,630
just talked about all distill down into

00:12:41,050 --> 00:12:44,980
one tiny box so you build out a

00:12:43,630 --> 00:12:46,690
development environment where you

00:12:44,980 --> 00:12:48,339
can write code test it and do all this

00:12:46,690 --> 00:12:50,730
stuff before you do a very simple deploy

00:12:48,339 --> 00:12:52,779
to your production machine

00:12:50,730 --> 00:12:55,089
the thing about dev is that you want it

00:12:52,779 --> 00:12:57,370
to be as close as possible to production

00:12:55,089 --> 00:12:59,380
if not the exact same and there are some

00:12:57,370 --> 00:13:01,449
tools to help you do that if you have a

00:12:59,380 --> 00:13:04,180
Mac or you use Ubuntu for your operating

00:13:01,449 --> 00:13:06,639
system you can use VNV in VN wrapper

00:13:04,180 --> 00:13:09,070
locally to set up environments that have

00:13:06,639 --> 00:13:11,260
all of the Python installations if you

00:13:09,070 --> 00:13:13,449
use Windows or you want a really really

00:13:11,260 --> 00:13:16,000
exact replica of production you can use

00:13:13,449 --> 00:13:18,269
vagrant and VirtualBox to create VMs

00:13:16,000 --> 00:13:21,610
that have the exact operating system and

00:13:18,269 --> 00:13:23,649
installations of production so those are

00:13:21,610 --> 00:13:25,060
really great tools for that deploy at

00:13:23,649 --> 00:13:27,490
this point might be really simple it

00:13:25,060 --> 00:13:29,170
might just be a git push and get pull to

00:13:27,490 --> 00:13:32,470
your one server and restart services

00:13:29,170 --> 00:13:33,790
this will not scale though but this is a

00:13:32,470 --> 00:13:38,199
place where you start when you have one

00:13:33,790 --> 00:13:41,290
server all right so now you've written

00:13:38,199 --> 00:13:42,790
tests like a good developer but you want

00:13:41,290 --> 00:13:44,320
that to be automated you want to have

00:13:42,790 --> 00:13:45,820
automated testing running so that you

00:13:44,320 --> 00:13:48,790
know your tests are passing before you

00:13:45,820 --> 00:13:51,910
ever push to production so you add in a

00:13:48,790 --> 00:13:55,120
testing layer you can use Jenkins circle

00:13:51,910 --> 00:13:57,220
CI Travis CI these are tools that will

00:13:55,120 --> 00:13:59,079
help you run your tests automatically

00:13:57,220 --> 00:14:05,019
either periodically or every time you

00:13:59,079 --> 00:14:06,699
push to your github repo finally you

00:14:05,019 --> 00:14:08,170
you've reached the stage or the size

00:14:06,699 --> 00:14:09,699
where you have more than just you

00:14:08,170 --> 00:14:11,649
working on your code base which is

00:14:09,699 --> 00:14:13,029
awesome so now you have buddies which

00:14:11,649 --> 00:14:14,560
means you have multiple development

00:14:13,029 --> 00:14:17,410
environments one for each of you

00:14:14,560 --> 00:14:19,029
this means that you probably need a

00:14:17,410 --> 00:14:20,589
staging environment you don't want each

00:14:19,029 --> 00:14:22,269
developer pushing straight to production

00:14:20,589 --> 00:14:23,949
you kind of want to push all the code to

00:14:22,269 --> 00:14:25,930
one place make sure it's all working

00:14:23,949 --> 00:14:27,370
make sure all of your automated tests

00:14:25,930 --> 00:14:30,819
are running and then deploy to

00:14:27,370 --> 00:14:33,190
production so staging is gated by

00:14:30,819 --> 00:14:35,589
testing still but you have multiple dab

00:14:33,190 --> 00:14:37,209
environments Oh at this point it's

00:14:35,589 --> 00:14:38,319
important to note that you have so you

00:14:37,209 --> 00:14:39,790
have basically three sets of

00:14:38,319 --> 00:14:41,500
environments production staging and

00:14:39,790 --> 00:14:43,389
development you want these all to be

00:14:41,500 --> 00:14:45,610
identical you don't want any surprises

00:14:43,389 --> 00:14:47,260
in how your code runs so you're hitting

00:14:45,610 --> 00:14:49,630
the point where you probably need

00:14:47,260 --> 00:14:51,190
automatic server configuration you don't

00:14:49,630 --> 00:14:53,560
want to log into every server install

00:14:51,190 --> 00:14:55,810
everything you want to be able to create

00:14:53,560 --> 00:14:58,360
new machines that are exact replicas of

00:14:55,810 --> 00:14:58,780
the old ones immediately so if you're a

00:14:58,360 --> 00:15:00,460
front-end

00:14:58,780 --> 00:15:01,870
web server goes down and you decide you

00:15:00,460 --> 00:15:03,610
need to kill it you can just spin up a

00:15:01,870 --> 00:15:06,430
new one start all of the processes and

00:15:03,610 --> 00:15:07,900
it's up and running deploy is also

00:15:06,430 --> 00:15:09,640
probably getting more robust at this

00:15:07,900 --> 00:15:11,260
point if you have multiple machines in

00:15:09,640 --> 00:15:13,150
production you can't log into each

00:15:11,260 --> 00:15:15,190
machine and update your code so you need

00:15:13,150 --> 00:15:19,060
some tool to help you deploy across

00:15:15,190 --> 00:15:20,230
multiple servers simultaneously so there

00:15:19,060 --> 00:15:23,080
are a bunch of tools for server

00:15:20,230 --> 00:15:25,990
configuration there are talks on puppet

00:15:23,080 --> 00:15:26,590
ansible salt and docker at this

00:15:25,990 --> 00:15:29,800
conference

00:15:26,590 --> 00:15:31,930
um and chef is another tool these tools

00:15:29,800 --> 00:15:34,030
can also be used for deploy often a lot

00:15:31,930 --> 00:15:35,530
of them have features for helping you

00:15:34,030 --> 00:15:37,900
deploy across many different machines

00:15:35,530 --> 00:15:40,000
Noah Kantrowitz also has a really

00:15:37,900 --> 00:15:42,670
awesome talk later today specifically on

00:15:40,000 --> 00:15:44,080
deploy and I seen right there so if

00:15:42,670 --> 00:15:48,460
you're interested in this topic you

00:15:44,080 --> 00:15:49,900
should definitely go to his talk finally

00:15:48,460 --> 00:15:51,640
at this point if you have multiple

00:15:49,900 --> 00:15:53,110
development environments you might need

00:15:51,640 --> 00:15:54,520
some automation around creating

00:15:53,110 --> 00:15:56,980
development environments either some

00:15:54,520 --> 00:15:59,290
scripts or if you use vagrant and

00:15:56,980 --> 00:16:01,120
VirtualBox to create VMs you can use a

00:15:59,290 --> 00:16:03,850
lot of the server configuration tools

00:16:01,120 --> 00:16:05,470
like chef and puppet to configure those

00:16:03,850 --> 00:16:07,090
local VMs which is really useful because

00:16:05,470 --> 00:16:09,400
then you know that it's an exact

00:16:07,090 --> 00:16:12,240
replication of production and also you

00:16:09,400 --> 00:16:15,970
can automate the these scripts for that

00:16:12,240 --> 00:16:17,980
the final level of systems of systems is

00:16:15,970 --> 00:16:20,260
when you start pulling things in

00:16:17,980 --> 00:16:22,450
production out into multiple services so

00:16:20,260 --> 00:16:24,430
let's say that your code base for the

00:16:22,450 --> 00:16:26,500
front-end web application is different

00:16:24,430 --> 00:16:28,720
from the code base for your asynchronous

00:16:26,500 --> 00:16:30,790
tasks those are separate services

00:16:28,720 --> 00:16:32,350
separate code bases you're gonna have

00:16:30,790 --> 00:16:33,610
multiple development and staging

00:16:32,350 --> 00:16:36,580
environments they're all going to work

00:16:33,610 --> 00:16:38,260
the same you're gonna you know aggregate

00:16:36,580 --> 00:16:39,580
things on staging do automated testing

00:16:38,260 --> 00:16:42,610
and deploy but you're gonna have to

00:16:39,580 --> 00:16:45,070
deploy two separate code bases this is

00:16:42,610 --> 00:16:46,870
actually a good thing because each code

00:16:45,070 --> 00:16:48,430
base is smaller and more manageable and

00:16:46,870 --> 00:16:50,740
it makes it easier for you to deploy

00:16:48,430 --> 00:16:52,210
code changes because there is no such

00:16:50,740 --> 00:16:55,750
thing as a small change to a large

00:16:52,210 --> 00:16:57,760
system so my favorite quotes all right

00:16:55,750 --> 00:16:59,110
some notes on hosting I didn't talk

00:16:57,760 --> 00:17:00,610
about this earlier but if you decide to

00:16:59,110 --> 00:17:01,090
manage all of the things that I talked

00:17:00,610 --> 00:17:03,190
about

00:17:01,090 --> 00:17:04,810
now yourself you're gonna need to host

00:17:03,190 --> 00:17:07,420
your service somewhere you can either

00:17:04,810 --> 00:17:10,150
buy a giant server and put it in your

00:17:07,420 --> 00:17:12,700
basement all other 90s or you can host

00:17:10,150 --> 00:17:17,080
it someplace like AWS

00:17:12,700 --> 00:17:19,060
backspace or line owed if you decide

00:17:17,080 --> 00:17:21,430
that you would like to manage all of

00:17:19,060 --> 00:17:23,830
this stuff yourself for a talk last year

00:17:21,430 --> 00:17:26,500
I set up a starter chef repository for

00:17:23,830 --> 00:17:28,990
configuring a single server with nginx

00:17:26,500 --> 00:17:31,870
Postgres Redis and a couple other things

00:17:28,990 --> 00:17:33,940
and this is up-to-date so you can go run

00:17:31,870 --> 00:17:36,700
that and you can have a web server up

00:17:33,940 --> 00:17:38,080
and running really quickly if you decide

00:17:36,700 --> 00:17:40,120
you do not want to host all of this

00:17:38,080 --> 00:17:41,830
yourself which I do not blame you for

00:17:40,120 --> 00:17:43,600
there are a couple of tools out there

00:17:41,830 --> 00:17:45,790
some platform as a service providers

00:17:43,600 --> 00:17:48,160
that will do everything for you all of

00:17:45,790 --> 00:17:51,220
the server configuration all of the

00:17:48,160 --> 00:17:52,450
installations security scaling and

00:17:51,220 --> 00:17:55,090
Heroku will do this for you they're

00:17:52,450 --> 00:17:56,680
great elastic Beanstalk is Amazon's

00:17:55,090 --> 00:17:58,060
version of this and it's a little bit

00:17:56,680 --> 00:17:59,950
behind Heroku it doesn't have quite as

00:17:58,060 --> 00:18:04,050
many features but I know they're working

00:17:59,950 --> 00:18:07,540
on it so these tools are fantastic I

00:18:04,050 --> 00:18:09,400
also made you guys some party favors

00:18:07,540 --> 00:18:12,790
so all of the things we talked about I

00:18:09,400 --> 00:18:14,770
put into maps and I put them in github

00:18:12,790 --> 00:18:16,030
so if you want to take a look at any of

00:18:14,770 --> 00:18:17,980
these resources that we talked about

00:18:16,030 --> 00:18:19,710
today in one place and I don't expect

00:18:17,980 --> 00:18:23,310
you to be able to read these by the way

00:18:19,710 --> 00:18:25,990
you can see there's the web server and

00:18:23,310 --> 00:18:27,490
you know some of the typical tools that

00:18:25,990 --> 00:18:31,210
people use these are by no means all of

00:18:27,490 --> 00:18:32,920
the tools just a starting point for the

00:18:31,210 --> 00:18:36,820
application layer it's a bunch of Python

00:18:32,920 --> 00:18:39,310
libraries a bunch of Python dev tools DB

00:18:36,820 --> 00:18:45,910
libraries kind of fun stuff that you

00:18:39,310 --> 00:18:47,950
might want to use there's also the local

00:18:45,910 --> 00:18:49,000
dev tools testing server configuration

00:18:47,950 --> 00:18:50,380
and deploy so you don't have to remember

00:18:49,000 --> 00:18:53,140
all this stuff there's a whole bunch of

00:18:50,380 --> 00:18:55,570
maps for you I also I did something

00:18:53,140 --> 00:18:57,250
really fun I made a map of all of the

00:18:55,570 --> 00:18:59,740
talks at PyCon and where they live in

00:18:57,250 --> 00:19:03,220
the stack so if you want to do a deep

00:18:59,740 --> 00:19:04,990
dive on any part of this stack that I

00:19:03,220 --> 00:19:06,520
talked about here's where all of the

00:19:04,990 --> 00:19:07,750
talks live and once again I don't expect

00:19:06,520 --> 00:19:10,780
you to be able to read this but you can

00:19:07,750 --> 00:19:13,180
see there are a couple of talks on web

00:19:10,780 --> 00:19:15,670
servers there's a bunch of talks on

00:19:13,180 --> 00:19:17,860
databases database libraries optimizing

00:19:15,670 --> 00:19:19,540
Postgres and there's a bunch of talks on

00:19:17,860 --> 00:19:23,820
asynchronous tasks but mostly

00:19:19,540 --> 00:19:25,999
asynchronous frameworks so tornado

00:19:23,820 --> 00:19:28,279
twisted

00:19:25,999 --> 00:19:31,249
monitoring there are a couple of talks

00:19:28,279 --> 00:19:33,019
on monitoring your application the bulk

00:19:31,249 --> 00:19:35,119
of the talks at this conference are in

00:19:33,019 --> 00:19:37,989
the application layer because python is

00:19:35,119 --> 00:19:42,320
commonly used as an application layer

00:19:37,989 --> 00:19:44,089
code or language there's the Python core

00:19:42,320 --> 00:19:46,399
talks kind of like how does Python work

00:19:44,089 --> 00:19:48,609
at its core there's some talks on the

00:19:46,399 --> 00:19:50,950
front-end frameworks in ORM layers

00:19:48,609 --> 00:19:52,879
database libraries machine learning data

00:19:50,950 --> 00:19:55,820
so there's a bunch of good stuff in here

00:19:52,879 --> 00:19:58,070
and then finally there are a couple of

00:19:55,820 --> 00:20:00,529
talks on security a bunch of talks on

00:19:58,070 --> 00:20:04,999
testing and a bunch of talks on server

00:20:00,529 --> 00:20:06,409
configuration and deploy finally there

00:20:04,999 --> 00:20:09,019
are a bunch of talks that while

00:20:06,409 --> 00:20:10,700
technical do not fit in the stack that I

00:20:09,019 --> 00:20:11,989
made so I thought I'd throw them up here

00:20:10,700 --> 00:20:13,639
just so that you know that there are

00:20:11,989 --> 00:20:17,690
other talks I didn't want them to feel

00:20:13,639 --> 00:20:20,450
left out all right so the three major

00:20:17,690 --> 00:20:22,429
takeaways from this talk hopefully you

00:20:20,450 --> 00:20:24,409
know what are the basic pieces of a full

00:20:22,429 --> 00:20:25,999
stack if nothing else I hope that you

00:20:24,409 --> 00:20:28,129
remember the song and you sing it to

00:20:25,999 --> 00:20:29,389
yourself I apologize but not really if

00:20:28,129 --> 00:20:32,419
the Brady Bunch song is stuck in your

00:20:29,389 --> 00:20:34,009
head for the rest of the day second what

00:20:32,419 --> 00:20:36,200
are these pieces look like in different

00:20:34,009 --> 00:20:39,649
environments so dev staging production

00:20:36,200 --> 00:20:43,399
deploy and some resources for learning

00:20:39,649 --> 00:20:45,049
more and and going forward so the maps

00:20:43,399 --> 00:20:46,369
have the different parts of the stack

00:20:45,049 --> 00:20:48,859
and some of the resources that people

00:20:46,369 --> 00:20:50,179
use so that you can do research and get

00:20:48,859 --> 00:20:52,539
up and running when you want to do one

00:20:50,179 --> 00:20:55,570
of the things that I talked about

00:20:52,539 --> 00:20:58,099
already so it's time for questions and

00:20:55,570 --> 00:20:59,029
if anyone's terrified of getting up at

00:20:58,099 --> 00:21:00,950
the microphone and asking questions

00:20:59,029 --> 00:21:02,959
which by the way I think is way more

00:21:00,950 --> 00:21:05,899
terrifying than presenting you can find

00:21:02,959 --> 00:21:09,729
me afterwards or you can find me for the

00:21:05,899 --> 00:21:09,729
rest of the conference thank you

00:21:28,970 --> 00:21:37,100
hi so you mentioned shortly about how to

00:21:32,970 --> 00:21:39,179
test databases so yeah how do you

00:21:37,100 --> 00:21:40,350
replicate it right because it's so

00:21:39,179 --> 00:21:43,080
difficult than to replicate your

00:21:40,350 --> 00:21:45,360
database like in the staging and on the

00:21:43,080 --> 00:21:47,429
test oh yeah

00:21:45,360 --> 00:21:49,620
test data test data that's a big area

00:21:47,429 --> 00:21:51,179
that is a really good question that a

00:21:49,620 --> 00:21:53,520
lot of people are trying very hard to

00:21:51,179 --> 00:21:55,470
solve some of the common things people

00:21:53,520 --> 00:21:57,270
do is they create scripts for test data

00:21:55,470 --> 00:21:59,280
I know that there are services out there

00:21:57,270 --> 00:22:01,530
I don't know the names off the top of my

00:21:59,280 --> 00:22:03,600
head that will help you create kind of

00:22:01,530 --> 00:22:05,820
development data because oftentimes you

00:22:03,600 --> 00:22:08,460
can't test on production data it's

00:22:05,820 --> 00:22:09,690
either sensitive or it's too large so we

00:22:08,460 --> 00:22:10,799
can talk about those afterwards to take

00:22:09,690 --> 00:22:12,630
a look at them afterwards but yeah

00:22:10,799 --> 00:22:17,669
that's that is a good question and a

00:22:12,630 --> 00:22:20,010
really hard thing to deal with you talk

00:22:17,669 --> 00:22:21,419
briefly about web servers but you maybe

00:22:20,010 --> 00:22:22,770
elaborate a little bit on the

00:22:21,419 --> 00:22:27,390
differences between web and whiskey

00:22:22,770 --> 00:22:30,299
servers and how they interplay yeah a

00:22:27,390 --> 00:22:31,799
little bit so the the stack that I

00:22:30,299 --> 00:22:33,690
mentioned is like nginx

00:22:31,799 --> 00:22:36,630
and G unicorn is a really common stack

00:22:33,690 --> 00:22:38,610
so nginx is a reverse proxy you can

00:22:36,630 --> 00:22:40,710
actually serve up pretty much anything

00:22:38,610 --> 00:22:42,690
from nginx you can serve up static files

00:22:40,710 --> 00:22:44,580
from a different location but it will

00:22:42,690 --> 00:22:47,280
also listen on ports at your servers and

00:22:44,580 --> 00:22:48,929
so you can use G unicorn which is a

00:22:47,280 --> 00:22:51,750
whiskey application that will serve up

00:22:48,929 --> 00:22:52,890
your Python code specifically to nginx

00:22:51,750 --> 00:22:55,230
and so they're listening to each other

00:22:52,890 --> 00:22:57,030
and so with Apache you need I think mod

00:22:55,230 --> 00:22:58,919
whiskey or something similar to it and

00:22:57,030 --> 00:22:59,910
they have to work in tandem but you can

00:22:58,919 --> 00:23:02,760
actually switch them out you can use

00:22:59,910 --> 00:23:05,309
nginx with there's you whiskey and a

00:23:02,760 --> 00:23:12,450
couple of other tools so that's that's

00:23:05,309 --> 00:23:15,210
vaguely how it works thank you you

00:23:12,450 --> 00:23:20,190
didn't mention fabric as a way for

00:23:15,210 --> 00:23:21,720
deploying into is it is it because you

00:23:20,190 --> 00:23:22,500
don't use it or you don't recommend it

00:23:21,720 --> 00:23:24,420
or

00:23:22,500 --> 00:23:25,680
I didn't there's a lot of things I did

00:23:24,420 --> 00:23:27,270
not mention in this talk by the way

00:23:25,680 --> 00:23:29,520
there are a lot of other tools out there

00:23:27,270 --> 00:23:30,810
I didn't go really deep into the POI

00:23:29,520 --> 00:23:33,960
because I do think that NOAA has a

00:23:30,810 --> 00:23:36,750
fantastic talk on that he talks about

00:23:33,960 --> 00:23:39,360
fabric he talks about you know sending

00:23:36,750 --> 00:23:41,070
tar files over to different servers and

00:23:39,360 --> 00:23:43,560
so he goes really in-depth there are a

00:23:41,070 --> 00:23:45,330
lot of ways to deploy deploy is also a

00:23:43,560 --> 00:23:48,990
really challenging problem to solve and

00:23:45,330 --> 00:23:51,210
so that's something that you can you can

00:23:48,990 --> 00:23:53,100
do very simply and very manually which

00:23:51,210 --> 00:23:54,540
is what i illustrated by like get

00:23:53,100 --> 00:23:56,400
pushing and get pulling and it's not

00:23:54,540 --> 00:23:58,350
necessarily a production recommendation

00:23:56,400 --> 00:24:00,900
but it's possible to do it that manually

00:23:58,350 --> 00:24:03,090
and that simply but as you grow and you

00:24:00,900 --> 00:24:04,890
have many many servers it becomes very

00:24:03,090 --> 00:24:07,950
challenging to deploy across all of

00:24:04,890 --> 00:24:10,050
those servers at the same time and so i

00:24:07,950 --> 00:24:13,940
would recommend going to know his talk

00:24:10,050 --> 00:24:13,940
because he will tell you all about it

00:24:26,320 --> 00:24:32,029
hi I've turned in here in love like

00:24:29,929 --> 00:24:34,159
legacy Python code and a lot of times

00:24:32,029 --> 00:24:36,860
I've seen a lot of previous developers

00:24:34,159 --> 00:24:39,019
where they said run the inbuilt Python

00:24:36,860 --> 00:24:41,750
web server and in production they just

00:24:39,019 --> 00:24:43,340
went on party or nginx normally what

00:24:41,750 --> 00:24:45,230
what would you recommend when you fall

00:24:43,340 --> 00:24:46,759
look for local productions look for your

00:24:45,230 --> 00:24:48,889
own local dev site you guys actually run

00:24:46,759 --> 00:24:51,759
it on your local Apache or you just rely

00:24:48,889 --> 00:24:53,960
on the local I'm a Python web server

00:24:51,759 --> 00:24:55,429
yeah that's entirely up to you it

00:24:53,960 --> 00:24:56,509
depends I think on how much you want to

00:24:55,429 --> 00:24:59,120
be testing in your development

00:24:56,509 --> 00:25:00,830
environment so if you have a staging

00:24:59,120 --> 00:25:02,269
environment that is an exact replica

00:25:00,830 --> 00:25:03,529
production there are some things that

00:25:02,269 --> 00:25:04,850
you can be maybe a little more lacks

00:25:03,529 --> 00:25:07,389
about with your development environment

00:25:04,850 --> 00:25:10,220
and just use kind of like a local Python

00:25:07,389 --> 00:25:11,539
server so that's what I do and then I

00:25:10,220 --> 00:25:13,009
double check that everything works in

00:25:11,539 --> 00:25:15,169
staging before I ever deploy to

00:25:13,009 --> 00:25:16,250
production if you just have dev in

00:25:15,169 --> 00:25:19,460
production you have a really small

00:25:16,250 --> 00:25:20,870
system and you want everything to be the

00:25:19,460 --> 00:25:22,519
exact same you can you can either

00:25:20,870 --> 00:25:24,559
install all of those things locally or I

00:25:22,519 --> 00:25:27,259
mentioned vagrant vagrant is a really

00:25:24,559 --> 00:25:29,120
awesome tool for setting up VMs that are

00:25:27,259 --> 00:25:30,889
exact replications of production on your

00:25:29,120 --> 00:25:33,110
local machine so you have a local VM

00:25:30,889 --> 00:25:37,659
running and you can have Apache and all

00:25:33,110 --> 00:25:37,659
of that different stuff installed thanks

00:25:42,940 --> 00:25:48,700
hi I was wondering if you could sing

00:25:45,799 --> 00:25:52,669
another song that's great

00:25:48,700 --> 00:25:54,859
sadly I do have more song parodies so I

00:25:52,669 --> 00:25:56,629
was curious you've mentioned a few a

00:25:54,859 --> 00:25:59,330
synchronous frameworks that you can use

00:25:56,629 --> 00:26:01,340
like twisted and tornado I'm wondering

00:25:59,330 --> 00:26:04,039
like what are the use cases within your

00:26:01,340 --> 00:26:06,710
full-stack environment would you use

00:26:04,039 --> 00:26:07,220
that for um that is an excellent

00:26:06,710 --> 00:26:09,369
question

00:26:07,220 --> 00:26:13,639
I don't use twisted and tornado much

00:26:09,369 --> 00:26:17,149
they're they're fairly complicated in my

00:26:13,639 --> 00:26:19,369
opinion and fairly advanced the chat

00:26:17,149 --> 00:26:21,559
servers and things like that I think of

00:26:19,369 --> 00:26:23,059
what people use twisted for I don't

00:26:21,559 --> 00:26:24,529
personally have a use case when I'm

00:26:23,059 --> 00:26:27,529
building out my bells and whistles web

00:26:24,529 --> 00:26:29,179
applications for them but that's why I

00:26:27,529 --> 00:26:31,779
mentioned there are a bunch of talks at

00:26:29,179 --> 00:26:33,859
this conference on twisted and tornado

00:26:31,779 --> 00:26:35,929
people who are experts will tell you

00:26:33,859 --> 00:26:40,330
more about it I am definitely not an

00:26:35,929 --> 00:26:40,330
expert on either one of those Thanks

00:26:41,590 --> 00:26:46,659

YouTube URL: https://www.youtube.com/watch?v=8uxQOzKi3_0


