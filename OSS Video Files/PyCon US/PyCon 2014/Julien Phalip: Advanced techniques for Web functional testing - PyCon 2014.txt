Title: Julien Phalip: Advanced techniques for Web functional testing - PyCon 2014
Publication date: 2014-04-24
Playlist: PyCon 2014
Description: 
	Speaker: Julien Phalip

This talk will present multiple advanced techniques for Web functional testing. You will learn how to test a wide range of Web front-end components, such as CSS, visuals, responsive designs and user interactions â€” all using Python. Various practical tips will also be presented to harness your functional tests in real project workflows.

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:00,829 --> 00:00:06,029
good afternoon everyone now we have my

00:00:03,929 --> 00:00:08,099
friend Julie envelop with from San

00:00:06,029 --> 00:00:10,080
Francisco and he'll be talking about

00:00:08,099 --> 00:00:18,300
advanced techniques for web functional

00:00:10,080 --> 00:00:21,570
testing Julian thank you and thanks

00:00:18,300 --> 00:00:23,039
everyone for coming today I'm going to

00:00:21,570 --> 00:00:24,930
start just very briefly don't want to

00:00:23,039 --> 00:00:26,750
bore you with that just couple facts

00:00:24,930 --> 00:00:29,160
about me so you know why I'm here today

00:00:26,750 --> 00:00:31,859
I've been happily programming with

00:00:29,160 --> 00:00:34,140
Python as my main language for a number

00:00:31,859 --> 00:00:37,110
of years I am also a jungle core

00:00:34,140 --> 00:00:39,300
committer and I occasionally tweet from

00:00:37,110 --> 00:00:43,800
this angle if you're ever interested in

00:00:39,300 --> 00:00:46,879
what I have to say I work at neuron we

00:00:43,800 --> 00:00:49,710
are a web agency with a few offices

00:00:46,879 --> 00:00:51,719
scattered scattered around the world I'm

00:00:49,710 --> 00:00:55,340
personally based in San Francisco but we

00:00:51,719 --> 00:00:57,840
also have an office here in Montreal and

00:00:55,340 --> 00:00:59,879
we do really good work and we encourage

00:00:57,840 --> 00:01:01,140
you to check out our website or come and

00:00:59,879 --> 00:01:04,949
see me after the talk if you like to

00:01:01,140 --> 00:01:07,920
learn more about us okay so starting

00:01:04,949 --> 00:01:09,780
with a few definitions just so we're

00:01:07,920 --> 00:01:14,250
clear on what I'm going to be talking

00:01:09,780 --> 00:01:16,470
about when we talk about unit testing it

00:01:14,250 --> 00:01:21,360
is to ensure that small parts of our

00:01:16,470 --> 00:01:23,670
code each work in isolation integration

00:01:21,360 --> 00:01:25,950
testing is about ensuring that some of

00:01:23,670 --> 00:01:28,920
those parts when combined together keep

00:01:25,950 --> 00:01:31,140
working well and then functional testing

00:01:28,920 --> 00:01:32,520
is one step beyond is when you want to

00:01:31,140 --> 00:01:35,880
make sure that you application as a

00:01:32,520 --> 00:01:40,079
whole functions well in particular from

00:01:35,880 --> 00:01:42,630
a user's perspective and one we do with

00:01:40,079 --> 00:01:45,890
functional testing for the web typically

00:01:42,630 --> 00:01:49,470
it comes down to using browser automated

00:01:45,890 --> 00:01:52,110
now why would be using browser or

00:01:49,470 --> 00:01:55,799
tomatoes first because it brings us

00:01:52,110 --> 00:01:58,229
closer to real web user environment all

00:01:55,799 --> 00:02:01,170
the median static files such as CSS

00:01:58,229 --> 00:02:02,549
images etc they automatically get loaded

00:02:01,170 --> 00:02:04,680
by the browser you don't have to worry

00:02:02,549 --> 00:02:06,899
about any of that and similarly any

00:02:04,680 --> 00:02:10,920
JavaScript code any age of course

00:02:06,899 --> 00:02:13,709
implicitly get executed by the browser

00:02:10,920 --> 00:02:15,720
and then when all that is put together

00:02:13,709 --> 00:02:18,980
then it allows you to test user

00:02:15,720 --> 00:02:24,569
interactions browser compatibility and

00:02:18,980 --> 00:02:27,930
very importantly it's a lot of fun now

00:02:24,569 --> 00:02:31,380
the the most most likely the most

00:02:27,930 --> 00:02:33,420
popular web browser Automator are there

00:02:31,380 --> 00:02:37,950
these days is selenium I was actually

00:02:33,420 --> 00:02:39,739
curious today who of you have ever used

00:02:37,950 --> 00:02:42,900
selenium if you could raise your hand

00:02:39,739 --> 00:02:45,090
well that's clearly the majority that's

00:02:42,900 --> 00:02:46,260
exciting and really hope that as you

00:02:45,090 --> 00:02:50,670
walk out with this doc you actually

00:02:46,260 --> 00:02:52,799
learn a lot of new tricks so selenium

00:02:50,670 --> 00:02:56,489
very briefly implements the webdriver

00:02:52,799 --> 00:02:59,130
API which is about to become the WTC w3c

00:02:56,489 --> 00:03:00,930
standard and it's currently in draft it

00:02:59,130 --> 00:03:03,450
works across multiple browsers for

00:03:00,930 --> 00:03:06,930
example firefox chrome IE safari and

00:03:03,450 --> 00:03:08,880
opera it has client libraries in verse

00:03:06,930 --> 00:03:11,519
languages in particular python that's

00:03:08,880 --> 00:03:13,200
what we're interested in and it's very 0

00:03:11,519 --> 00:03:16,769
install you just run pip install

00:03:13,200 --> 00:03:18,840
selenium and off you go so for those of

00:03:16,769 --> 00:03:21,269
you who do not know about selenium a

00:03:18,840 --> 00:03:23,100
photo just give very quick demo just to

00:03:21,269 --> 00:03:26,370
get an idea of the kinds of things that

00:03:23,100 --> 00:03:30,359
you can do with it so here I'm just

00:03:26,370 --> 00:03:33,390
going to run a subset of the Django

00:03:30,359 --> 00:03:35,340
admin test read which is written with

00:03:33,390 --> 00:03:37,680
selenium I'm going to be holding my

00:03:35,340 --> 00:03:39,540
hands up so you know that it's automated

00:03:37,680 --> 00:03:41,190
I'm not going to do anything everything

00:03:39,540 --> 00:03:42,780
is going to be running by itself what's

00:03:41,190 --> 00:03:44,910
going to happen is that you will see an

00:03:42,780 --> 00:03:46,290
instance of Firefox that will open and

00:03:44,910 --> 00:03:51,930
then a bunch of user action being

00:03:46,290 --> 00:03:54,359
executed in an automated way so here you

00:03:51,930 --> 00:03:56,340
see Firefox is running running a bunch

00:03:54,359 --> 00:04:00,959
of user action and it's all going very

00:03:56,340 --> 00:04:03,269
fast here typically we using selenium in

00:04:00,959 --> 00:04:07,560
Django mostly to test the functionality

00:04:03,269 --> 00:04:10,650
so that means forms midships false

00:04:07,560 --> 00:04:13,350
emissions and JavaScript any little

00:04:10,650 --> 00:04:15,690
JavaScript tidbits that help improve the

00:04:13,350 --> 00:04:17,880
experience in the Django admin so we

00:04:15,690 --> 00:04:21,269
didn't want to have some tests to make

00:04:17,880 --> 00:04:23,580
sure that as we keep adding more code to

00:04:21,269 --> 00:04:26,789
JavaScript or even in the Python code

00:04:23,580 --> 00:04:27,900
sometimes just make sure that everything

00:04:26,789 --> 00:04:33,690
keeps working that there are no

00:04:27,900 --> 00:04:34,890
regression over time so that's it just

00:04:33,690 --> 00:04:39,210
to give you an idea of the kinds of

00:04:34,890 --> 00:04:41,700
stuff that you can do with selenium now

00:04:39,210 --> 00:04:43,289
then I thought that I show a few things

00:04:41,700 --> 00:04:46,740
that may not necessarily be obvious when

00:04:43,289 --> 00:04:48,330
you start using selenium if you for

00:04:46,740 --> 00:04:51,000
example you you you've created

00:04:48,330 --> 00:04:52,140
responsive websites which responsiveness

00:04:51,000 --> 00:04:53,940
something that's become really popular

00:04:52,140 --> 00:04:56,070
in the last couple of years and for good

00:04:53,940 --> 00:04:59,789
reasons because with a single code base

00:04:56,070 --> 00:05:01,620
you can display content optimally for

00:04:59,789 --> 00:05:04,950
very screen sizes for example for mobile

00:05:01,620 --> 00:05:06,300
or desktop or tablet now testing your

00:05:04,950 --> 00:05:09,180
website we see liam is actually really

00:05:06,300 --> 00:05:11,340
really simple it all comes down to using

00:05:09,180 --> 00:05:13,979
that one method which comes in the

00:05:11,340 --> 00:05:16,020
webdriver API set window size which

00:05:13,979 --> 00:05:17,400
allows you to at any point in time

00:05:16,020 --> 00:05:20,360
during your test to resize the browser

00:05:17,400 --> 00:05:23,669
window and then for example you may stop

00:05:20,360 --> 00:05:25,349
with 600 pixel width run some tests make

00:05:23,669 --> 00:05:28,080
sure everything works for mobile and

00:05:25,349 --> 00:05:29,700
then expand the window size 2 then run

00:05:28,080 --> 00:05:32,729
some tests to make sure that you're

00:05:29,700 --> 00:05:35,820
worse on desktop and I just had a very

00:05:32,729 --> 00:05:39,240
simple demo here again to do that i

00:05:35,820 --> 00:05:41,700
actually used the pipe con website which

00:05:39,240 --> 00:05:44,070
which i'm sure you've all used and

00:05:41,700 --> 00:05:46,320
interacted with i'm just currently

00:05:44,070 --> 00:05:49,560
running it locally so it actually

00:05:46,320 --> 00:05:51,120
happens to be a jungle side too and if

00:05:49,560 --> 00:05:52,919
you look here at the top for example

00:05:51,120 --> 00:05:54,479
there's a menu which you can expand is

00:05:52,919 --> 00:05:56,810
very you know traditional kind of

00:05:54,479 --> 00:06:00,360
interaction and he resize the browser

00:05:56,810 --> 00:06:02,610
that menu will hide behind that icon

00:06:00,360 --> 00:06:05,789
here and then we can expand it and then

00:06:02,610 --> 00:06:09,120
again interact with the same menu so I

00:06:05,789 --> 00:06:13,490
wrote a very simple test to make sure

00:06:09,120 --> 00:06:16,380
that this works fine and again opening

00:06:13,490 --> 00:06:23,070
automatically hands up automatically

00:06:16,380 --> 00:06:25,380
openly the browser opening each of those

00:06:23,070 --> 00:06:28,229
menus and then resizing the window using

00:06:25,380 --> 00:06:29,880
that method and checking the that menu

00:06:28,229 --> 00:06:31,260
works on mobile so it's very

00:06:29,880 --> 00:06:33,090
straightforward something that just may

00:06:31,260 --> 00:06:36,540
not be totally obvious

00:06:33,090 --> 00:06:39,780
to start using selenium so that was very

00:06:36,540 --> 00:06:42,419
quick demo now something that I think is

00:06:39,780 --> 00:06:44,340
very very cool is that you can also test

00:06:42,419 --> 00:06:46,979
not only the functionality so your

00:06:44,340 --> 00:06:50,550
javascript etc you can also test visual

00:06:46,979 --> 00:06:53,520
so you CSS images etc anything that

00:06:50,550 --> 00:06:55,440
would be visually rendered on your page

00:06:53,520 --> 00:06:59,280
and that can be done with a nifty little

00:06:55,440 --> 00:07:01,290
app that's called needle it's a variable

00:06:59,280 --> 00:07:03,240
github you started Batman freshman and I

00:07:01,290 --> 00:07:07,800
it's an ad that I call that I help

00:07:03,240 --> 00:07:10,919
maintain its based on selenium and he

00:07:07,800 --> 00:07:14,220
will catch any regressions in the

00:07:10,919 --> 00:07:15,810
display of your site by for example that

00:07:14,220 --> 00:07:18,660
might be your styles or your CSS

00:07:15,810 --> 00:07:20,340
typography SVG images basically anything

00:07:18,660 --> 00:07:22,260
that would be visually represented on

00:07:20,340 --> 00:07:24,080
your site and it would do that by

00:07:22,260 --> 00:07:26,970
actually taking screenshots and

00:07:24,080 --> 00:07:30,510
comparing screenshots of the time and if

00:07:26,970 --> 00:07:32,449
it spots any any differences between the

00:07:30,510 --> 00:07:37,770
screenshots then it will fail with a

00:07:32,449 --> 00:07:39,690
standard test failure so just to give

00:07:37,770 --> 00:07:43,919
you a very quick example it's extremely

00:07:39,690 --> 00:07:46,710
simple to use again I'm going to use the

00:07:43,919 --> 00:07:49,830
pike on website as a as a an example

00:07:46,710 --> 00:07:52,310
here I'm interested in that nice little

00:07:49,830 --> 00:07:55,020
banner here it has some cool graphics

00:07:52,310 --> 00:07:57,599
some nice colors and they also has some

00:07:55,020 --> 00:07:59,820
text in it so how would we go about

00:07:57,599 --> 00:08:02,970
writing some tests to make sure that

00:07:59,820 --> 00:08:05,160
this visual keeps looking the same over

00:08:02,970 --> 00:08:06,960
time as we keep making changes in our

00:08:05,160 --> 00:08:11,130
CSS just make sure we'd never introduced

00:08:06,960 --> 00:08:13,800
any regressions and all it takes is that

00:08:11,130 --> 00:08:15,720
really that one method a search screen

00:08:13,800 --> 00:08:19,740
shot which comes with which is provided

00:08:15,720 --> 00:08:21,750
by needle so what it does that'sthat's

00:08:19,740 --> 00:08:24,120
gunshot the sauce screenshot method

00:08:21,750 --> 00:08:27,090
accepts two parameters the first one is

00:08:24,120 --> 00:08:29,340
a CSS selector to the element on your

00:08:27,090 --> 00:08:32,240
page that you want a target and take a

00:08:29,340 --> 00:08:34,500
screenshot of the second parameter is

00:08:32,240 --> 00:08:37,260
just define name that's going to be

00:08:34,500 --> 00:08:39,440
stored the PNG file screenshot is going

00:08:37,260 --> 00:08:41,430
to be stored on your on your disk and

00:08:39,440 --> 00:08:43,370
the very first time you're going to run

00:08:41,430 --> 00:08:46,820
this test you're going to pass it a flag

00:08:43,370 --> 00:08:48,860
which going to instruct needle tracks

00:08:46,820 --> 00:08:51,200
the baseline copy of the screenshot and

00:08:48,860 --> 00:08:53,210
every subsequent times that you run the

00:08:51,200 --> 00:08:55,340
test for example on CI server you will

00:08:53,210 --> 00:08:56,750
run this test without that flag what's

00:08:55,340 --> 00:08:58,570
going to do is that it's going to take a

00:08:56,750 --> 00:09:00,500
new screenshot and compare it with the

00:08:58,570 --> 00:09:02,990
baseline image that you've previously

00:09:00,500 --> 00:09:05,710
created so I'm going to give you a quick

00:09:02,990 --> 00:09:05,710
example gun

00:09:15,699 --> 00:09:26,480
so it's a it's a very first time I'm

00:09:18,920 --> 00:09:28,040
going to forget clear okay so the very

00:09:26,480 --> 00:09:33,040
first time that I'm running these so I'm

00:09:28,040 --> 00:09:35,629
going to pass it that flag save baseline

00:09:33,040 --> 00:09:37,339
so it's going to run that that code that

00:09:35,629 --> 00:09:45,679
I've just showed you gonna make this a

00:09:37,339 --> 00:09:47,899
bigger maybe if we can see okay so

00:09:45,679 --> 00:09:51,230
running a test so now you see it opens

00:09:47,899 --> 00:09:53,839
Firefox loads the loads of sight take

00:09:51,230 --> 00:09:56,709
the screenshot or very fast now if we

00:09:53,839 --> 00:10:01,369
take a look here it's created a folder

00:09:56,709 --> 00:10:03,199
with that one screenshot so it's all

00:10:01,369 --> 00:10:05,420
well and good so far not particularly

00:10:03,199 --> 00:10:08,300
useful I'm just going to run the test

00:10:05,420 --> 00:10:09,829
again now without this flag what's going

00:10:08,300 --> 00:10:11,629
to happen now is that again is going to

00:10:09,829 --> 00:10:13,309
do exactly the same thing that's going

00:10:11,629 --> 00:10:14,990
to open the page take take a screenshot

00:10:13,309 --> 00:10:17,779
compare it with the baseline that

00:10:14,990 --> 00:10:21,019
previously credit then detect any

00:10:17,779 --> 00:10:25,839
differences so the test passed now let's

00:10:21,019 --> 00:10:25,839
go in into the code and insert a mistake

00:10:25,990 --> 00:10:31,399
i'm just going to challenge here

00:10:28,069 --> 00:10:33,980
accidentally the color of the blue sky

00:10:31,399 --> 00:10:39,769
and in very subtle way here instead of

00:10:33,980 --> 00:10:45,470
five i'm just going to put a zero if I

00:10:39,769 --> 00:10:46,819
reload the page here it's okay it's

00:10:45,470 --> 00:10:48,199
really hard to see that anything

00:10:46,819 --> 00:10:49,730
challenge if you just look at it you

00:10:48,199 --> 00:10:51,980
know it prematurely the same very easy

00:10:49,730 --> 00:10:54,980
to miss that we've inserted that the

00:10:51,980 --> 00:10:57,410
typo in the in the CSS but this is where

00:10:54,980 --> 00:11:01,249
need will consider rescue so here I'm

00:10:57,410 --> 00:11:02,980
going to rerun that same test something

00:11:01,249 --> 00:11:06,620
up on the browser takes a screenshot

00:11:02,980 --> 00:11:09,649
compares it with the baseline and this

00:11:06,620 --> 00:11:12,889
time to test the test failed if you go

00:11:09,649 --> 00:11:14,389
back up you see the error message so the

00:11:12,889 --> 00:11:17,240
new spring show blah blah blah didn't

00:11:14,389 --> 00:11:19,160
match the best line but it doesn't just

00:11:17,240 --> 00:11:22,279
stop there it would actually also create

00:11:19,160 --> 00:11:24,920
a defile between the new screenshot and

00:11:22,279 --> 00:11:25,999
the best line to actually highlight what

00:11:24,920 --> 00:11:28,190
actually one wrong where are the

00:11:25,999 --> 00:11:30,710
differences

00:11:28,190 --> 00:11:34,060
so he created a new file by not a deef

00:11:30,710 --> 00:11:36,140
the PNG and here actually highlights

00:11:34,060 --> 00:11:37,760
what's basically different leaching the

00:11:36,140 --> 00:11:39,950
baseline and a new screenshot so here

00:11:37,760 --> 00:11:46,220
it's obvious that there's something

00:11:39,950 --> 00:11:48,170
wrong with the the sky and the color so

00:11:46,220 --> 00:11:56,660
here I'm going to go back here and undo

00:11:48,170 --> 00:12:00,200
my mistake rerun the test another test

00:11:56,660 --> 00:12:02,870
passed another another very common

00:12:00,200 --> 00:12:05,450
mistake when dealing with CSS is when

00:12:02,870 --> 00:12:07,280
messing up font sizes so here again

00:12:05,450 --> 00:12:09,890
another example I'm going to change the

00:12:07,280 --> 00:12:22,160
font size for some of the text in that

00:12:09,890 --> 00:12:24,890
banner and then rerun that test and here

00:12:22,160 --> 00:12:27,500
again the test failed if we look again

00:12:24,890 --> 00:12:30,380
now that death highlights the text

00:12:27,500 --> 00:12:32,660
actually changed within that banner so

00:12:30,380 --> 00:12:40,730
it's extremely simply used and it's

00:12:32,660 --> 00:12:42,740
really really powerful oh actually so

00:12:40,730 --> 00:12:44,990
now just to show you again if I knew my

00:12:42,740 --> 00:12:50,930
mistake here and I put it back to what

00:12:44,990 --> 00:12:56,260
it used to be and rerun the test then

00:12:50,930 --> 00:12:56,260
now we back on track okay so moving on

00:12:56,770 --> 00:13:01,700
just wanna give you a few a few tips

00:12:59,450 --> 00:13:03,890
about needle the best line screenshots

00:13:01,700 --> 00:13:05,600
actually act as fixtures for your test

00:13:03,890 --> 00:13:07,100
suite so you typically want to store

00:13:05,600 --> 00:13:08,570
them in your repository so that their

00:13:07,100 --> 00:13:10,550
share with the rest of your team and the

00:13:08,570 --> 00:13:12,080
CI server so that everybody can run the

00:13:10,550 --> 00:13:15,350
test against the those baseline

00:13:12,080 --> 00:13:18,440
screenshot it's also extremely important

00:13:15,350 --> 00:13:21,800
to ensure consistency between different

00:13:18,440 --> 00:13:23,390
environments if the CI server uses a

00:13:21,800 --> 00:13:25,010
different browser version or has

00:13:23,390 --> 00:13:27,830
different system fonts installed for

00:13:25,010 --> 00:13:29,290
example the page may not render exactly

00:13:27,830 --> 00:13:33,170
the same so you want to be very careful

00:13:29,290 --> 00:13:34,330
that all environments actually use the

00:13:33,170 --> 00:13:36,880
same and that can be done using

00:13:34,330 --> 00:13:41,170
configuration management systems like a

00:13:36,880 --> 00:13:41,170
chef and civil puppet or salt

00:13:41,290 --> 00:13:46,430
then I wanted to touch on topic of

00:13:43,490 --> 00:13:50,209
continuous integration how to use all

00:13:46,430 --> 00:13:52,850
this stuff in a real workflow so when

00:13:50,209 --> 00:13:54,230
you're going to be running a CI server

00:13:52,850 --> 00:13:57,709
typically that server is not going to be

00:13:54,230 --> 00:13:59,300
using a physical monitor so instead you

00:13:57,709 --> 00:14:00,949
want to run your tests in a headless

00:13:59,300 --> 00:14:03,889
mode which means basically using a

00:14:00,949 --> 00:14:06,190
virtual display very simple to do on

00:14:03,889 --> 00:14:08,750
your CI server you want to install a

00:14:06,190 --> 00:14:10,699
brother it's possible very specific

00:14:08,750 --> 00:14:12,860
version of the browser you want is to

00:14:10,699 --> 00:14:15,139
you know system fonts anything we need

00:14:12,860 --> 00:14:17,240
to make sure that no consistency between

00:14:15,139 --> 00:14:20,300
your environment and then you want to

00:14:17,240 --> 00:14:23,949
install XV BF which is a program that

00:14:20,300 --> 00:14:26,750
will run a virtual display in memory

00:14:23,949 --> 00:14:29,060
then it's very simple to use you can run

00:14:26,750 --> 00:14:30,860
the sv BF command and then assign the

00:14:29,060 --> 00:14:33,019
number for that display that's then

00:14:30,860 --> 00:14:35,300
going to be used by your browser if you

00:14:33,019 --> 00:14:36,949
use Jenkins you can also use X VBF

00:14:35,300 --> 00:14:39,160
plugin that's basically going to run

00:14:36,949 --> 00:14:42,170
those two things for you automatically

00:14:39,160 --> 00:14:44,360
for every time the tests are run if you

00:14:42,170 --> 00:14:46,550
use Travis it's also very simple use

00:14:44,360 --> 00:14:50,120
just run those comments before your test

00:14:46,550 --> 00:14:51,680
actually start you can also use PI

00:14:50,120 --> 00:14:54,050
virtual display which is a nice little

00:14:51,680 --> 00:14:55,760
package which will allow it's basically

00:14:54,050 --> 00:14:57,649
wrapper around XV BF and it will allow

00:14:55,760 --> 00:15:01,550
you to start and stop that there to

00:14:57,649 --> 00:15:04,519
display using Python code or you may

00:15:01,550 --> 00:15:06,170
also use phantom jes which is a headless

00:15:04,519 --> 00:15:08,779
browser and it's going to deal with its

00:15:06,170 --> 00:15:12,800
own virtual display it's also super

00:15:08,779 --> 00:15:15,920
easily used selenium ships and interface

00:15:12,800 --> 00:15:19,130
to that browser so it's very easy just

00:15:15,920 --> 00:15:21,589
get started with so only their show a

00:15:19,130 --> 00:15:25,370
very cool service that is called sauce

00:15:21,589 --> 00:15:27,980
labs what's the slat does it actually

00:15:25,370 --> 00:15:30,829
runs remotely in the cloud it has a

00:15:27,980 --> 00:15:32,569
whole bunch of different vns and what's

00:15:30,829 --> 00:15:34,490
really nice is that it actually gives

00:15:32,569 --> 00:15:37,850
access to multiple different browsers

00:15:34,490 --> 00:15:39,649
like Firefox pretty much any any browser

00:15:37,850 --> 00:15:42,170
search can think of even including

00:15:39,649 --> 00:15:46,459
mobile browsers and that saves you the

00:15:42,170 --> 00:15:47,540
trouble of managing your own set of you

00:15:46,459 --> 00:15:51,170
know different environments different

00:15:47,540 --> 00:15:52,070
browsers locally it also allows to run

00:15:51,170 --> 00:15:54,470
tests in

00:15:52,070 --> 00:15:56,330
parallel and something's really useful

00:15:54,470 --> 00:15:58,010
it also keeps video recordings of all

00:15:56,330 --> 00:15:59,990
these sessions that you run it's

00:15:58,010 --> 00:16:01,640
particularly useful one test actually

00:15:59,990 --> 00:16:03,560
failure so you can go back and it a

00:16:01,640 --> 00:16:06,680
point in time and look at the video to

00:16:03,560 --> 00:16:11,780
see where tests actually failed so here

00:16:06,680 --> 00:16:16,280
again I'm going to show a demo I'm going

00:16:11,780 --> 00:16:19,480
to run some of the jungle tests that i

00:16:16,280 --> 00:16:26,510
showed earlier this time only this time

00:16:19,480 --> 00:16:27,800
remotely on the slab platform I just

00:16:26,510 --> 00:16:35,390
realize that I'm actually have to

00:16:27,800 --> 00:16:38,140
restart a server here just bear with me

00:16:35,390 --> 00:16:38,140
for a second

00:16:46,470 --> 00:16:50,070
here what I'm doing basically is to

00:16:48,210 --> 00:16:52,320
create the initial connection with the

00:16:50,070 --> 00:16:57,410
sauce lab server just make sure

00:16:52,320 --> 00:16:57,410
everything is authenticated

00:17:19,829 --> 00:17:30,710
ok

00:17:22,430 --> 00:17:32,450
so now I'm going to rerun those tests ok

00:17:30,710 --> 00:17:42,770
so now I'm going to go to the source lab

00:17:32,450 --> 00:17:45,350
website refresh so now you see that some

00:17:42,770 --> 00:17:51,650
tests are currently being run you can

00:17:45,350 --> 00:17:53,210
actually see them in real time so you

00:17:51,650 --> 00:17:55,700
can see the tests that are run as I

00:17:53,210 --> 00:17:57,860
speak in the platform and so that was a

00:17:55,700 --> 00:18:00,530
very quick one and the cool thing is

00:17:57,860 --> 00:18:02,060
that again it kept a video recording of

00:18:00,530 --> 00:18:06,950
that test so any point in time you can

00:18:02,060 --> 00:18:08,570
go back and then view the video in this

00:18:06,950 --> 00:18:13,280
particular instance i'm running those

00:18:08,570 --> 00:18:17,140
django tests on I think firefox on a

00:18:13,280 --> 00:18:17,140
linux machine yeah

00:18:24,179 --> 00:18:38,659
and that same test which I've been

00:18:27,059 --> 00:18:41,999
running on I think ie8 yes let's try

00:18:38,659 --> 00:18:44,639
yeah so that's I ate on a on a Windows

00:18:41,999 --> 00:18:54,440
XP machine again that's just currently

00:18:44,639 --> 00:18:56,909
being run so we can just view the video

00:18:54,440 --> 00:18:59,190
so what I'm currently having currently

00:18:56,909 --> 00:19:01,230
integrating the Django test read with

00:18:59,190 --> 00:19:03,960
sauce labs because they're kind enough

00:19:01,230 --> 00:19:07,769
to actually provide us an account as for

00:19:03,960 --> 00:19:09,149
open source projects and so we're just

00:19:07,769 --> 00:19:10,409
now in the process of integrating the

00:19:09,149 --> 00:19:11,759
whole test which is going to be very

00:19:10,409 --> 00:19:13,619
useful to make sure that the jungle

00:19:11,759 --> 00:19:18,840
means keeps working in all different

00:19:13,619 --> 00:19:20,879
kinds of browsers okay so i encourage

00:19:18,840 --> 00:19:22,409
you to check them out it's it's it's

00:19:20,879 --> 00:19:23,730
very handy especially if you don't want

00:19:22,409 --> 00:19:25,669
to have to deal with the trouble dealing

00:19:23,730 --> 00:19:29,990
with all those environments yourself

00:19:25,669 --> 00:19:32,850
thought also touch on topic that's a bit

00:19:29,990 --> 00:19:36,450
controversial win selenium selenium is

00:19:32,850 --> 00:19:39,149
often criticized for its slowness and

00:19:36,450 --> 00:19:41,580
flakiness really that should be an

00:19:39,149 --> 00:19:43,590
entire top dedicated to this there are

00:19:41,580 --> 00:19:45,899
solutions for just about everything but

00:19:43,590 --> 00:19:48,019
it does require some effort i just

00:19:45,899 --> 00:19:50,220
thought i would provide a few quick tips

00:19:48,019 --> 00:19:52,049
first of all if you really concern about

00:19:50,220 --> 00:19:53,220
speed i encourage you to use phantoms is

00:19:52,049 --> 00:19:55,619
because it's much more lightweight than

00:19:53,220 --> 00:19:58,200
firefox and it will burn much faster i

00:19:55,619 --> 00:20:00,629
also encourage you to use paralyzation

00:19:58,200 --> 00:20:03,990
actually I actually can show you an

00:20:00,629 --> 00:20:05,999
example here I'm going to run some tests

00:20:03,990 --> 00:20:08,759
so I'm going to study social add tabs

00:20:05,999 --> 00:20:11,759
test here here I'm going to run some of

00:20:08,759 --> 00:20:15,119
the tests that I showed you earlier only

00:20:11,759 --> 00:20:16,909
in just multiple processes at a time

00:20:15,119 --> 00:20:19,619
that's a feature that's provided by nose

00:20:16,909 --> 00:20:21,559
nose test runners all the tests runners

00:20:19,619 --> 00:20:23,340
also have this kind of functionality

00:20:21,559 --> 00:20:26,100
while you're going to see here is

00:20:23,340 --> 00:20:28,919
multiple versions instances of Firefox

00:20:26,100 --> 00:20:31,499
running at the same time and each each

00:20:28,919 --> 00:20:35,700
running a different test so that's going

00:20:31,499 --> 00:20:39,139
to really speed up the

00:20:35,700 --> 00:20:42,750
the time execution time of your test and

00:20:39,139 --> 00:20:45,870
again very easily use now if you concern

00:20:42,750 --> 00:20:47,940
about robustness I I can't emphasize

00:20:45,870 --> 00:20:49,500
this enough it's really really important

00:20:47,940 --> 00:20:52,139
to pin down the versions of your host

00:20:49,500 --> 00:20:54,000
software stack there are so much so much

00:20:52,139 --> 00:20:55,950
stuff happening when you run functional

00:20:54,000 --> 00:20:58,889
tests because it exercises its so many

00:20:55,950 --> 00:21:01,320
layers of your software stack it's very

00:20:58,889 --> 00:21:03,389
important that everybody on your team

00:21:01,320 --> 00:21:05,190
and on CL servers using exactly the same

00:21:03,389 --> 00:21:06,659
versions otherwise any subtle

00:21:05,190 --> 00:21:10,380
differences between two versions of

00:21:06,659 --> 00:21:12,750
software may cause the the your website

00:21:10,380 --> 00:21:15,960
to behave or look slightly differently

00:21:12,750 --> 00:21:19,529
and then cause a false positive in

00:21:15,960 --> 00:21:22,679
positives in your test suite extremely

00:21:19,529 --> 00:21:24,440
important also you want to master the

00:21:22,679 --> 00:21:27,630
use of explicit wait it's a very common

00:21:24,440 --> 00:21:31,380
source of mistakes when writing selenium

00:21:27,630 --> 00:21:33,419
test a very common mistake is actually

00:21:31,380 --> 00:21:35,490
to run your tests too fast before the

00:21:33,419 --> 00:21:37,320
state in the browser is ready for those

00:21:35,490 --> 00:21:39,539
tests to be run so you want to make sure

00:21:37,320 --> 00:21:42,029
for example if you have very long Ajax

00:21:39,539 --> 00:21:45,600
calls being run you want to have ways of

00:21:42,029 --> 00:21:47,370
tracking that the the web app is at a

00:21:45,600 --> 00:21:50,250
stage where you can continue running

00:21:47,370 --> 00:21:52,919
your tests and the webdriver API gives

00:21:50,250 --> 00:21:56,190
you that kind of functionality to test

00:21:52,919 --> 00:21:58,440
for particular condition for you to wait

00:21:56,190 --> 00:22:01,289
on and then resume your test that

00:21:58,440 --> 00:22:03,149
already goes a long way into increasing

00:22:01,289 --> 00:22:06,559
robustness of your test but it does

00:22:03,149 --> 00:22:09,720
require to be methodical and meticulous

00:22:06,559 --> 00:22:11,220
and there are a lot more tips that I

00:22:09,720 --> 00:22:12,600
don't have time to cover today but I

00:22:11,220 --> 00:22:14,730
encourage you to check out those two

00:22:12,600 --> 00:22:17,220
books which are both really useful I'll

00:22:14,730 --> 00:22:21,510
share the links in this when I publish

00:22:17,220 --> 00:22:22,950
the slide the slider later on those are

00:22:21,510 --> 00:22:24,750
really full of really good tips for

00:22:22,950 --> 00:22:28,909
increasing the efficiency of your tests

00:22:24,750 --> 00:22:31,500
so in conclusion I just want to give a

00:22:28,909 --> 00:22:34,080
word of caution integration functional

00:22:31,500 --> 00:22:36,149
tests are slow that's an obvious fact so

00:22:34,080 --> 00:22:38,610
use them with moderation you should also

00:22:36,149 --> 00:22:41,130
only use selenium for why the dummy test

00:22:38,610 --> 00:22:43,740
client may not already achieve so focus

00:22:41,130 --> 00:22:46,080
your singing tests on complex user

00:22:43,740 --> 00:22:47,429
workflows for example or visuals and let

00:22:46,080 --> 00:22:48,809
the dummy client take care of everything

00:22:47,429 --> 00:22:52,259
else because it's going to be much

00:22:48,809 --> 00:22:53,759
faster a much more reliable and finally

00:22:52,259 --> 00:22:55,649
integration and fashion tests are

00:22:53,759 --> 00:22:57,600
important re encourage you to include

00:22:55,649 --> 00:23:00,149
some in your test read because they will

00:22:57,600 --> 00:23:03,090
increase your confidence in your code

00:23:00,149 --> 00:23:07,139
greatly they will create increase your

00:23:03,090 --> 00:23:09,029
test coverage that will increase they

00:23:07,139 --> 00:23:10,340
will allow you to test the integration

00:23:09,029 --> 00:23:13,230
between your front end on your backhand

00:23:10,340 --> 00:23:17,340
ensure that the user interface works and

00:23:13,230 --> 00:23:19,350
looks as expected and it's again it's a

00:23:17,340 --> 00:23:21,029
lot of fun to use them so and if you've

00:23:19,350 --> 00:23:22,590
never used it i really encourage you to

00:23:21,029 --> 00:23:23,850
use those tools because at the very

00:23:22,590 --> 00:23:27,659
least you're just going to have a lot of

00:23:23,850 --> 00:23:29,519
fun so thanks very much for listening

00:23:27,659 --> 00:23:32,090
and i'm happy to answer any questions

00:23:29,519 --> 00:23:32,090
you may have

00:23:36,690 --> 00:23:40,840
since we have time for question and

00:23:38,740 --> 00:23:44,320
answers do you have any questions for

00:23:40,840 --> 00:23:47,260
Julian so just one very quick question

00:23:44,320 --> 00:23:49,900
if you mentioned phantom Jas for

00:23:47,260 --> 00:23:51,850
headless testing of course given the

00:23:49,900 --> 00:23:54,520
JavaScript tends to work very

00:23:51,850 --> 00:23:57,970
differently in different browsers have

00:23:54,520 --> 00:23:59,230
you got any suggestions for headless

00:23:57,970 --> 00:24:06,340
versions of other browsers like Firefox

00:23:59,230 --> 00:24:08,320
or ie well typically when using an

00:24:06,340 --> 00:24:10,390
headless mode I would use a virtual

00:24:08,320 --> 00:24:14,050
display so we keep still use the same

00:24:10,390 --> 00:24:15,490
and engine if possible as far as phantom

00:24:14,050 --> 00:24:18,460
Jas is concerned actually really

00:24:15,490 --> 00:24:21,400
impressed by how robust and efficient it

00:24:18,460 --> 00:24:23,260
is it's pretty much on par with firefox

00:24:21,400 --> 00:24:24,970
and chrome in terms of functionality at

00:24:23,260 --> 00:24:27,430
least as far as as far as i've been

00:24:24,970 --> 00:24:31,150
testing it and it's something that

00:24:27,430 --> 00:24:33,250
actually reuse very confidently with my

00:24:31,150 --> 00:24:34,870
test i really recommend you to check it

00:24:33,250 --> 00:24:40,540
out super easy to install and spurs

00:24:34,870 --> 00:24:43,510
Edu's I thanks very much to talk I

00:24:40,540 --> 00:24:44,950
learned a lot so just a tiny little

00:24:43,510 --> 00:24:46,690
thing really in case you didn't know it

00:24:44,950 --> 00:24:48,850
there's a command that comes with the

00:24:46,690 --> 00:24:51,490
latest versions of XP FB called XV FB

00:24:48,850 --> 00:24:53,290
dash run which will just run the next

00:24:51,490 --> 00:24:54,430
command you put in bash in a virtual

00:24:53,290 --> 00:24:55,480
frame buffer and it's really useful even

00:24:54,430 --> 00:24:57,520
on your own machine if you're running

00:24:55,480 --> 00:24:58,540
selenium tests that they'll be in a

00:24:57,520 --> 00:24:59,770
virtual frame office so they're not

00:24:58,540 --> 00:25:01,780
popping up and annoying you while you're

00:24:59,770 --> 00:25:07,300
trying to do something else so X vfb

00:25:01,780 --> 00:25:08,830
dash run cool packs alright thanks for

00:25:07,300 --> 00:25:10,150
the talk that was really interesting I

00:25:08,830 --> 00:25:12,100
just said was wondering if you could

00:25:10,150 --> 00:25:14,620
comment on how you decide what to test

00:25:12,100 --> 00:25:18,850
like would you test that basic path

00:25:14,620 --> 00:25:20,560
through your app or edge cases mark so I

00:25:18,850 --> 00:25:22,570
mean it's a common problem you have with

00:25:20,560 --> 00:25:24,940
tests in general you know you could

00:25:22,570 --> 00:25:27,400
spend your days you know writing tests

00:25:24,940 --> 00:25:28,720
and that's that's so good but you really

00:25:27,400 --> 00:25:30,910
want to think about what's really

00:25:28,720 --> 00:25:32,410
critical what's really important what

00:25:30,910 --> 00:25:35,380
really makes sense of and it really

00:25:32,410 --> 00:25:37,780
differs from website to website web apps

00:25:35,380 --> 00:25:39,850
web apps if you have for example an app

00:25:37,780 --> 00:25:42,640
that it's extremely crucial that

00:25:39,850 --> 00:25:44,980
something looks pixel perfect otherwise

00:25:42,640 --> 00:25:46,180
your app won't make any stand stand it's

00:25:44,980 --> 00:25:49,230
something that would definitely make

00:25:46,180 --> 00:25:52,260
sense to put you won't put some effort

00:25:49,230 --> 00:25:54,360
into using you know selenium for example

00:25:52,260 --> 00:25:56,280
if it's not that important the way it

00:25:54,360 --> 00:25:59,400
looks if it breaks a little it's no big

00:25:56,280 --> 00:26:01,980
deal then don't worry about selenium and

00:25:59,400 --> 00:26:04,470
again you seen iam should be kind of

00:26:01,980 --> 00:26:08,370
your last resort always think how can I

00:26:04,470 --> 00:26:10,950
achieve this test using something like a

00:26:08,370 --> 00:26:13,020
dummy test client if I can then don't

00:26:10,950 --> 00:26:15,090
even look at selenium only use selenium

00:26:13,020 --> 00:26:16,470
for what you couldn't test with anything

00:26:15,090 --> 00:26:22,470
else and for something that's really

00:26:16,470 --> 00:26:26,370
important for you and your app yeah

00:26:22,470 --> 00:26:28,890
thanks for the talk is there any way to

00:26:26,370 --> 00:26:33,390
evaluate what code has been executed on

00:26:28,890 --> 00:26:36,500
your environment yes you can use the

00:26:33,390 --> 00:26:39,330
coverage package which will basically

00:26:36,500 --> 00:26:41,160
list every line of code in your entire

00:26:39,330 --> 00:26:43,650
stack that's been executed during the

00:26:41,160 --> 00:26:50,340
test and that that definitely works with

00:26:43,650 --> 00:26:53,010
selenium yeah if it is in the same

00:26:50,340 --> 00:26:54,840
process that's right so if everything

00:26:53,010 --> 00:26:57,570
runs in multiple threads within the same

00:26:54,840 --> 00:26:59,840
process it will work not if it's running

00:26:57,570 --> 00:27:03,059
multiple process that's a good point I

00:26:59,840 --> 00:27:05,730
thank you for the presentation um how

00:27:03,059 --> 00:27:08,160
does sauce labs are even selenium handle

00:27:05,730 --> 00:27:10,770
the data driven website so for example

00:27:08,160 --> 00:27:13,470
if you need there's some sort of an ajax

00:27:10,770 --> 00:27:15,090
query that gets the database value from

00:27:13,470 --> 00:27:18,690
there are from that from the data and

00:27:15,090 --> 00:27:20,280
and then matches it against it so how

00:27:18,690 --> 00:27:23,070
does it handle that does it generate the

00:27:20,280 --> 00:27:25,470
values by itself or do you have to

00:27:23,070 --> 00:27:28,169
provide those values or does there need

00:27:25,470 --> 00:27:30,570
to be a database connection for that so

00:27:28,169 --> 00:27:34,350
as far as I understand the processing

00:27:30,570 --> 00:27:36,690
actually happens so every any custom

00:27:34,350 --> 00:27:39,780
code any database related code we run

00:27:36,690 --> 00:27:42,690
locally so say on your CI server or on

00:27:39,780 --> 00:27:44,850
your laptop so slab we just only take

00:27:42,690 --> 00:27:48,240
care of the rendering and executing of

00:27:44,850 --> 00:27:50,700
you know whatever javascript inside that

00:27:48,240 --> 00:27:52,770
vm but then it will still communicate

00:27:50,700 --> 00:27:55,110
with your local app as far as data is

00:27:52,770 --> 00:27:57,419
concerned for example so that means

00:27:55,110 --> 00:27:58,820
database needs to be accessible for

00:27:57,419 --> 00:28:01,779
sauce labs

00:27:58,820 --> 00:28:05,419
to do that I know as far as I concerned

00:28:01,779 --> 00:28:08,450
that only needs to be that will only be

00:28:05,419 --> 00:28:10,850
executed on your machine and then it

00:28:08,450 --> 00:28:13,190
will just send rid basically the HTML on

00:28:10,850 --> 00:28:15,230
the resulting that the result of your

00:28:13,190 --> 00:28:18,259
app will be then sent over to source lab

00:28:15,230 --> 00:28:19,759
and that we be rendered so its toe slab

00:28:18,259 --> 00:28:23,480
only takes care of the client side

00:28:19,759 --> 00:28:25,159
basically I see thanks is that they have

00:28:23,480 --> 00:28:26,570
like um if you're running service

00:28:25,159 --> 00:28:28,490
locally they have a little encrypted

00:28:26,570 --> 00:28:29,990
tunnel that they'll put between your

00:28:28,490 --> 00:28:31,519
machine so you run a little proxy server

00:28:29,990 --> 00:28:32,960
on your machine yeah and it'll tunnel

00:28:31,519 --> 00:28:34,070
over to the source added service they

00:28:32,960 --> 00:28:35,870
can look at anything you've got running

00:28:34,070 --> 00:28:37,190
locally or on your own network that's

00:28:35,870 --> 00:28:39,110
right this is this is the thing that I

00:28:37,190 --> 00:28:42,799
was running that took a minute to get

00:28:39,110 --> 00:28:44,029
started earlier I would you use needle

00:28:42,799 --> 00:28:45,409
with multiple different browsers if

00:28:44,029 --> 00:28:47,870
you're trying to do visual testing and

00:28:45,409 --> 00:28:52,610
Internet Explorer say six because you

00:28:47,870 --> 00:28:54,110
want to kill yourself yeah it's very

00:28:52,610 --> 00:28:56,570
easy actually you just need to use a

00:28:54,110 --> 00:28:58,279
different you know it's up to you that

00:28:56,570 --> 00:29:02,570
there are two cases that say if you

00:28:58,279 --> 00:29:05,059
really care that both browsers a Firefox

00:29:02,570 --> 00:29:07,009
and ie six would render a particular

00:29:05,059 --> 00:29:09,350
component of your page exactly the same

00:29:07,009 --> 00:29:12,500
then you want to test against the same

00:29:09,350 --> 00:29:14,179
baseline image if you acknowledge that

00:29:12,500 --> 00:29:16,519
there might be differences they're not

00:29:14,179 --> 00:29:18,080
so important but you do want to make

00:29:16,519 --> 00:29:20,539
sure that it keeps working the same nie

00:29:18,080 --> 00:29:22,100
keeps working the same in Firefox then

00:29:20,539 --> 00:29:24,740
just create two different sets of

00:29:22,100 --> 00:29:26,779
baseline images so you can you know

00:29:24,740 --> 00:29:29,360
maybe have a class that we inherit from

00:29:26,779 --> 00:29:31,610
your say an IE test class that will

00:29:29,360 --> 00:29:34,460
inherit from Firefox you run exactly the

00:29:31,610 --> 00:29:36,320
same test except you switch the the

00:29:34,460 --> 00:29:38,419
webdriver and you just give you know

00:29:36,320 --> 00:29:44,649
different file names so they don't

00:29:38,419 --> 00:29:47,269
conflict that's right any more questions

00:29:44,649 --> 00:29:50,590
well thanks for the dog Julian thank you

00:29:47,269 --> 00:29:50,590
give a big applause thank you

00:29:51,180 --> 00:29:53,240

YouTube URL: https://www.youtube.com/watch?v=St9cL47_1GI


