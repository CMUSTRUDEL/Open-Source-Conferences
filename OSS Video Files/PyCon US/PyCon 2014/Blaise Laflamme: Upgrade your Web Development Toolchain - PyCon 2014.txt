Title: Blaise Laflamme: Upgrade your Web Development Toolchain - PyCon 2014
Publication date: 2014-04-24
Playlist: PyCon 2014
Description: 
	Speaker: Blaise Laflamme

How to make our Python web development workflow less painful and more predictable? By mixing a collection of tools and best practices for both back and front ends like Buildout, Grunt, Bower and Ansible to automate tasks.

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:00,000 --> 00:00:06,540
hello everybody i'm here to present

00:00:03,589 --> 00:00:08,820
blaze Laflamme who will be speaking

00:00:06,540 --> 00:00:10,860
about operating your web development

00:00:08,820 --> 00:00:20,430
tool chain please welcome him with an

00:00:10,860 --> 00:00:22,769
applause hello thank you so welcome to

00:00:20,430 --> 00:00:27,869
my upgrade your web development to chain

00:00:22,769 --> 00:00:29,849
the attack so as usual a bit about me so

00:00:27,869 --> 00:00:33,000
I'm doing a full wet a full stack web

00:00:29,849 --> 00:00:36,000
development I mostly lead project and

00:00:33,000 --> 00:00:41,219
teams and still learning a lot every day

00:00:36,000 --> 00:00:44,399
probably as all of you so what this talk

00:00:41,219 --> 00:00:47,370
is about in fact this talk is about more

00:00:44,399 --> 00:00:49,980
IDs and patterns it's about combining

00:00:47,370 --> 00:00:53,520
tools it's also about working with

00:00:49,980 --> 00:00:55,770
people's people in project it's not

00:00:53,520 --> 00:00:59,609
about let's say strong opinions because

00:00:55,770 --> 00:01:03,090
I'm not a over opinionated guy it's not

00:00:59,609 --> 00:01:08,280
about cookbook recipes too and it's not

00:01:03,090 --> 00:01:10,920
in that technical example I'm open to

00:01:08,280 --> 00:01:13,140
everything so if you want to discuss

00:01:10,920 --> 00:01:15,689
anything about what I'm talking today

00:01:13,140 --> 00:01:19,890
after I would be happy to talk with any

00:01:15,689 --> 00:01:23,189
of you so the talk was under the best

00:01:19,890 --> 00:01:26,880
practices and patterns so they'll just

00:01:23,189 --> 00:01:31,110
talk a bit about that dogmatism is never

00:01:26,880 --> 00:01:34,170
a good thing so I think being like close

00:01:31,110 --> 00:01:37,619
to other IDs is not a good idea in

00:01:34,170 --> 00:01:40,650
itself I try to not be dogmatic about

00:01:37,619 --> 00:01:44,220
what I've just said but I think is the

00:01:40,650 --> 00:01:47,939
right way to be open to others it should

00:01:44,220 --> 00:01:51,090
always have a significant benefit so it

00:01:47,939 --> 00:01:54,990
means that why would you do something

00:01:51,090 --> 00:01:57,240
and it gives you less after so it means

00:01:54,990 --> 00:02:00,090
you need at minimum a significant

00:01:57,240 --> 00:02:02,960
benefit and to stick to what really

00:02:00,090 --> 00:02:06,060
makes a difference so why would you use

00:02:02,960 --> 00:02:08,399
tools because of a hype let's say and

00:02:06,060 --> 00:02:10,229
rewrite everything and in the end you

00:02:08,399 --> 00:02:12,210
get the same results so you should be

00:02:10,229 --> 00:02:17,490
careful about what you should

00:02:12,210 --> 00:02:19,830
to use then the idea of the talk is

00:02:17,490 --> 00:02:23,910
based about problem i try to solve

00:02:19,830 --> 00:02:27,480
across the years it's mainly based on

00:02:23,910 --> 00:02:30,000
how to tie up multiple in development

00:02:27,480 --> 00:02:31,620
project so for sure when you have just

00:02:30,000 --> 00:02:34,500
one project you installed and everything

00:02:31,620 --> 00:02:38,730
it's easy at some point you'll need to

00:02:34,500 --> 00:02:41,220
separate in some components it could be

00:02:38,730 --> 00:02:43,140
like you separate in that case will be

00:02:41,220 --> 00:02:44,970
more like the front end stuff with the

00:02:43,140 --> 00:02:48,480
back end stuff but you can start like

00:02:44,970 --> 00:02:50,550
sharing components like for web forms a

00:02:48,480 --> 00:02:53,730
database or anything you want to reuse

00:02:50,550 --> 00:02:56,820
the cross project and then the idea is

00:02:53,730 --> 00:02:58,950
to have an environment where you can

00:02:56,820 --> 00:03:01,620
develop those multiple project at the

00:02:58,950 --> 00:03:04,830
same time so to tie up multiple

00:03:01,620 --> 00:03:07,170
environments and tools and to mix up

00:03:04,830 --> 00:03:10,080
development things because at some point

00:03:07,170 --> 00:03:12,510
when your project grow you'll have more

00:03:10,080 --> 00:03:14,790
people involved and probably more teen

00:03:12,510 --> 00:03:17,460
it could be a remote teams too so you

00:03:14,790 --> 00:03:21,780
need to find a way to mix up all those

00:03:17,460 --> 00:03:24,000
thing together in the same way so my

00:03:21,780 --> 00:03:26,700
point of view is the separation of

00:03:24,000 --> 00:03:28,950
concerns so for sure for each of us

00:03:26,700 --> 00:03:31,560
concerns could be different it could be

00:03:28,950 --> 00:03:33,060
different like ice like I said after

00:03:31,560 --> 00:03:37,310
adapt to contact so depending of the

00:03:33,060 --> 00:03:40,410
context so it's a also use known tools

00:03:37,310 --> 00:03:42,240
that's good to create your own staff but

00:03:40,410 --> 00:03:45,510
at some point you get stuck with what

00:03:42,240 --> 00:03:48,690
you're doing so try to use tools that

00:03:45,510 --> 00:03:51,000
already exist that people are behind

00:03:48,690 --> 00:03:54,900
those tools so if you need help or

00:03:51,000 --> 00:03:58,950
anything and try to add that to context

00:03:54,900 --> 00:04:01,110
that means that the one ring to rule

00:03:58,950 --> 00:04:03,120
them all is not a good way to think

00:04:01,110 --> 00:04:06,330
about things so it's not because you

00:04:03,120 --> 00:04:07,980
develop a way of doing things that way

00:04:06,330 --> 00:04:12,480
will be good for everything you'll be

00:04:07,980 --> 00:04:15,030
doing p sometimes people like concept

00:04:12,480 --> 00:04:19,440
and ids and tools and make everything

00:04:15,030 --> 00:04:21,720
fits in those patterns i think people

00:04:19,440 --> 00:04:24,360
are more important than two so we should

00:04:21,720 --> 00:04:26,390
find a way to make the most out of

00:04:24,360 --> 00:04:30,360
people

00:04:26,390 --> 00:04:33,030
so what will people people do if if I

00:04:30,360 --> 00:04:36,380
die if you died it means if I create a

00:04:33,030 --> 00:04:40,500
lot of thing that I like and I'm alone

00:04:36,380 --> 00:04:42,240
to work with so if at some point I'm no

00:04:40,500 --> 00:04:44,100
longer part of the project people will

00:04:42,240 --> 00:04:45,630
get stuck with what I've done and

00:04:44,100 --> 00:04:47,850
they'll have to rewrite everything so

00:04:45,630 --> 00:04:50,400
when you manage something you should be

00:04:47,850 --> 00:04:53,160
careful about what you use and be sure

00:04:50,400 --> 00:04:55,800
you do thing in a way people will be

00:04:53,160 --> 00:05:00,120
able to continue and work on top of what

00:04:55,800 --> 00:05:02,670
you're done so what's the typical

00:05:00,120 --> 00:05:04,740
workflow for a project I mean it's

00:05:02,670 --> 00:05:06,090
basically saying I don't want to go too

00:05:04,740 --> 00:05:10,230
much in detail it just like to

00:05:06,090 --> 00:05:12,840
understand like the step so normally you

00:05:10,230 --> 00:05:14,700
lad like a server provisioning and setup

00:05:12,840 --> 00:05:17,180
you'll have a web application

00:05:14,700 --> 00:05:22,680
development and you'll have the

00:05:17,180 --> 00:05:26,210
deployment phase so for the provisioning

00:05:22,680 --> 00:05:29,070
and development and deployment you need

00:05:26,210 --> 00:05:31,200
somewhere to run your application on so

00:05:29,070 --> 00:05:33,270
it could be your own machine could be a

00:05:31,200 --> 00:05:36,150
developer machine it could be a

00:05:33,270 --> 00:05:39,810
dedicated hardware it could be any of

00:05:36,150 --> 00:05:45,180
the awesome I cloud thing we have like

00:05:39,810 --> 00:05:49,230
lino the Rackspace their work you and it

00:05:45,180 --> 00:05:51,120
could be set up manually by someone or

00:05:49,230 --> 00:05:54,870
with an orchestration the two like

00:05:51,120 --> 00:05:58,470
ansibles all stack docker images it

00:05:54,870 --> 00:06:01,740
could be present in any way but we

00:05:58,470 --> 00:06:04,440
should not care where the application

00:06:01,740 --> 00:06:06,330
will run yes for deployment that when

00:06:04,440 --> 00:06:10,230
you develop it should be your it should

00:06:06,330 --> 00:06:12,830
not be your concern so they should call

00:06:10,230 --> 00:06:15,680
you in their process of building their

00:06:12,830 --> 00:06:18,150
their their their setup and their

00:06:15,680 --> 00:06:21,210
deployment environment so they should

00:06:18,150 --> 00:06:23,940
provide you all the tools like database

00:06:21,210 --> 00:06:27,300
and caching system and all that stuff so

00:06:23,940 --> 00:06:29,310
a developer could install all of that by

00:06:27,300 --> 00:06:31,110
himself with a system package if you

00:06:29,310 --> 00:06:33,000
want you want to use like a virtual

00:06:31,110 --> 00:06:35,310
machine or anything we should not care

00:06:33,000 --> 00:06:37,930
when we organize the with app

00:06:35,310 --> 00:06:41,729
environment is done

00:06:37,930 --> 00:06:47,259
so the app environment should be

00:06:41,729 --> 00:06:52,449
self-contained as much as possible so if

00:06:47,259 --> 00:06:55,090
it's a self-contained it eventually it

00:06:52,449 --> 00:06:57,400
will be able to be run on multiple

00:06:55,090 --> 00:07:00,759
platforms environment and that will

00:06:57,400 --> 00:07:04,330
provide a better tested and rubbles code

00:07:00,759 --> 00:07:08,050
base so to bring back the back the

00:07:04,330 --> 00:07:13,330
concept of people is I i still think in

00:07:08,050 --> 00:07:16,000
a team tools are not more important than

00:07:13,330 --> 00:07:18,639
people so you won't asked like your

00:07:16,000 --> 00:07:22,660
developer to use them because you have

00:07:18,639 --> 00:07:25,539
developed develop it a lot of a super

00:07:22,660 --> 00:07:27,460
awesome micro and then you you want

00:07:25,539 --> 00:07:30,520
everyone to use the same setup than you

00:07:27,460 --> 00:07:33,520
and most of the developers use the

00:07:30,520 --> 00:07:35,349
system the tweak the way they want to

00:07:33,520 --> 00:07:37,870
have their own stuff on it their

00:07:35,349 --> 00:07:40,720
database and everything so I think your

00:07:37,870 --> 00:07:43,630
app environment should not tell them how

00:07:40,720 --> 00:07:46,060
to use their own their own computer and

00:07:43,630 --> 00:07:48,909
their own way of doing doing things and

00:07:46,060 --> 00:07:51,580
if you want to get the most out of them

00:07:48,909 --> 00:07:58,260
you should let them work in a way

00:07:51,580 --> 00:08:01,690
they're effective so the web development

00:07:58,260 --> 00:08:04,449
actually is mostly front end and back

00:08:01,690 --> 00:08:07,360
and work so when you do back in mostly

00:08:04,449 --> 00:08:10,440
you're doing for us Python we're using

00:08:07,360 --> 00:08:13,900
web frameworks like pyramid Django flask

00:08:10,440 --> 00:08:18,039
we'll use it template engines like make

00:08:13,900 --> 00:08:21,580
oh jinjja to chameleons or em and all

00:08:18,039 --> 00:08:24,849
other libraries and for front-end they

00:08:21,580 --> 00:08:27,550
use like HTML CSS JavaScript the use

00:08:24,849 --> 00:08:31,260
frameworks to like angular backbone they

00:08:27,550 --> 00:08:34,659
use preprocessor like less SAS

00:08:31,260 --> 00:08:38,169
CoffeeScript and lot of stuff the Darius

00:08:34,659 --> 00:08:44,079
too so both have developed their own

00:08:38,169 --> 00:08:47,680
expertise tools and workflow so in some

00:08:44,079 --> 00:08:50,440
corners the overlaps some others they

00:08:47,680 --> 00:08:51,500
are like complementary just as an

00:08:50,440 --> 00:08:54,140
example

00:08:51,500 --> 00:08:56,630
if we look at package management so

00:08:54,140 --> 00:08:59,570
under Python where yours too so we can

00:08:56,630 --> 00:09:03,190
do is install or pip install a package

00:08:59,570 --> 00:09:06,110
or a package with its own version and

00:09:03,190 --> 00:09:09,110
for front-end they can do the same like

00:09:06,110 --> 00:09:13,160
Bower install jquery or jQuery a

00:09:09,110 --> 00:09:16,160
specific version and in files like in

00:09:13,160 --> 00:09:18,470
require requirement that a txt or a

00:09:16,160 --> 00:09:20,090
setup file we can specify all the

00:09:18,470 --> 00:09:22,790
required libraries with their own

00:09:20,090 --> 00:09:25,660
version and with the bower file a JSON

00:09:22,790 --> 00:09:29,120
file we can do the same thing for at the

00:09:25,660 --> 00:09:32,510
front end so what is Bauer it's simply a

00:09:29,120 --> 00:09:37,180
package manager for the web actually the

00:09:32,510 --> 00:09:37,180
prop the problem is where is the line

00:09:37,270 --> 00:09:45,490
the front end developer will need like

00:09:40,730 --> 00:09:48,890
two to two nope I turn and add his own

00:09:45,490 --> 00:09:50,690
dependency in Python code so at some

00:09:48,890 --> 00:09:53,000
point it makes no sense to add the front

00:09:50,690 --> 00:09:55,970
end developer relying on the back end

00:09:53,000 --> 00:09:59,839
stop so let's look at it with asset

00:09:55,970 --> 00:10:04,700
management so we can use on the backhand

00:09:59,839 --> 00:10:07,430
side the web assets that is a great

00:10:04,700 --> 00:10:11,089
tools where you can define let's say

00:10:07,430 --> 00:10:13,850
bundles with those bundles you can

00:10:11,089 --> 00:10:16,850
define a lot of different files you can

00:10:13,850 --> 00:10:19,940
apply filters to let's say minify them

00:10:16,850 --> 00:10:22,610
cash busting everything and like the

00:10:19,940 --> 00:10:25,520
output file let's say package es and

00:10:22,610 --> 00:10:28,430
then within the application or within

00:10:25,520 --> 00:10:31,220
the template you can reference the file

00:10:28,430 --> 00:10:32,900
and then it writes that the right URL

00:10:31,220 --> 00:10:35,750
and everything so for a back end user

00:10:32,900 --> 00:10:38,510
it's awesome because it is a lot of

00:10:35,750 --> 00:10:40,339
things but they have the same or

00:10:38,510 --> 00:10:42,890
something similar in the front end the

00:10:40,339 --> 00:10:48,680
world so they have their own tools to

00:10:42,890 --> 00:10:51,230
let's say minify packages and then if

00:10:48,680 --> 00:10:55,520
you look at at that small snippet so it

00:10:51,230 --> 00:10:57,680
loads a module granted GS main source

00:10:55,520 --> 00:11:01,040
map and then it registered a task and

00:10:57,680 --> 00:11:02,930
the task is defined in the config so you

00:11:01,040 --> 00:11:04,780
would sit there there's no way in the

00:11:02,930 --> 00:11:07,780
back end like to reference

00:11:04,780 --> 00:11:11,560
URL and everything but that's a bit the

00:11:07,780 --> 00:11:14,710
point because at some point you you'll

00:11:11,560 --> 00:11:17,650
reach sorry so just to get back grant

00:11:14,710 --> 00:11:21,700
like you said is a test runner for

00:11:17,650 --> 00:11:26,260
automation so it's a tool for them to

00:11:21,700 --> 00:11:28,630
help them like to to do a lot of things

00:11:26,260 --> 00:11:42,460
we normally do on the back end side but

00:11:28,630 --> 00:11:44,770
for them and then sorry okay I was

00:11:42,460 --> 00:11:47,080
referring to how we referent things in

00:11:44,770 --> 00:11:49,690
like the application so in the front

00:11:47,080 --> 00:11:54,220
side the front hand side they also need

00:11:49,690 --> 00:11:56,170
a way of including import and require a

00:11:54,220 --> 00:11:59,170
libraries what we do on the backhand

00:11:56,170 --> 00:12:01,090
side but at some point they need that

00:11:59,170 --> 00:12:03,010
too because the application becomes more

00:12:01,090 --> 00:12:07,510
and more complicated so they need a way

00:12:03,010 --> 00:12:10,600
to load dependencies too so if you look

00:12:07,510 --> 00:12:13,150
at this simple snippet you'll see that

00:12:10,600 --> 00:12:15,430
you can define a path for jquery for a

00:12:13,150 --> 00:12:19,510
specific library and then in their own

00:12:15,430 --> 00:12:22,420
code they can let's say add jquery and

00:12:19,510 --> 00:12:26,260
make it available as the dollar string

00:12:22,420 --> 00:12:28,380
inside that module so why would you want

00:12:26,260 --> 00:12:31,120
front them to rely on a back-end

00:12:28,380 --> 00:12:35,230
dependency why you would you want them

00:12:31,120 --> 00:12:38,350
to know about Titan so you'll reach a

00:12:35,230 --> 00:12:42,250
point of separation where when the

00:12:38,350 --> 00:12:44,230
application is an i bred application so

00:12:42,250 --> 00:12:47,440
a lot of stuff is done on the front end

00:12:44,230 --> 00:12:49,540
or it's a single page application so in

00:12:47,440 --> 00:12:52,620
that case your back back end becomes

00:12:49,540 --> 00:12:55,240
like just an API so it won't make sense

00:12:52,620 --> 00:12:57,820
to have those front-end developer

00:12:55,240 --> 00:13:01,360
relying on all the stuff you can do on

00:12:57,820 --> 00:13:04,600
the back end so you'll benefit from

00:13:01,360 --> 00:13:07,300
splitting to multiple project so

00:13:04,600 --> 00:13:10,540
multiple project could be 13 or /

00:13:07,300 --> 00:13:13,120
concern for so in that case it means

00:13:10,540 --> 00:13:15,400
probably back and stuff and front-end

00:13:13,120 --> 00:13:17,580
stuff so let's say we have a single page

00:13:15,400 --> 00:13:21,510
app so you can add like the back end

00:13:17,580 --> 00:13:24,330
in a github repo the package and the

00:13:21,510 --> 00:13:27,600
same for the front end but what we want

00:13:24,330 --> 00:13:29,880
to use is to use those project under the

00:13:27,600 --> 00:13:32,610
same global app or project environment

00:13:29,880 --> 00:13:35,600
and share a common set of tools and

00:13:32,610 --> 00:13:40,710
patterns so this is where build-out

00:13:35,600 --> 00:13:43,980
entered the game so build-out it is the

00:13:40,710 --> 00:13:46,530
its application centric so it is the

00:13:43,980 --> 00:13:50,100
assembly and deployment of application

00:13:46,530 --> 00:13:53,640
environment and make that a reachable a

00:13:50,100 --> 00:13:56,400
repeatable process so build-out uses

00:13:53,640 --> 00:13:59,820
extendable configuration files so simple

00:13:56,400 --> 00:14:03,780
like I knife I'll it uses extensions and

00:13:59,820 --> 00:14:07,050
it uses received so if you look at a

00:14:03,780 --> 00:14:08,970
simple a build-out config file you'll

00:14:07,050 --> 00:14:11,790
see like that they build out part where

00:14:08,970 --> 00:14:14,250
I use the extension mr. developer it's

00:14:11,790 --> 00:14:17,910
an extension like to ease the

00:14:14,250 --> 00:14:19,200
development of multiple in development

00:14:17,910 --> 00:14:22,020
project so you can have like multiple

00:14:19,200 --> 00:14:24,060
repo under the same application

00:14:22,020 --> 00:14:27,630
environment it takes tends a

00:14:24,060 --> 00:14:30,510
configuration files on get up done by

00:14:27,630 --> 00:14:34,640
baloche Sri was kind enough to create

00:14:30,510 --> 00:14:38,190
that simple config files that wraps and

00:14:34,640 --> 00:14:41,040
like grant and Bauer coming inside your

00:14:38,190 --> 00:14:43,080
application environment and then you see

00:14:41,040 --> 00:14:45,450
I have different parts like deers eggs

00:14:43,080 --> 00:14:48,060
and bowery modules borrow modules in the

00:14:45,450 --> 00:14:51,150
roots from the human configuration and

00:14:48,060 --> 00:14:55,020
then under develop this is where I have

00:14:51,150 --> 00:14:59,280
my multiple application so my app won an

00:14:55,020 --> 00:15:04,200
ipad 2 and so on and under dears I have

00:14:59,280 --> 00:15:06,750
I use a recipe I use a recipe to create

00:15:04,200 --> 00:15:10,410
a directory so let's say a VAR directory

00:15:06,750 --> 00:15:16,500
for temporary say things I need for my

00:15:10,410 --> 00:15:19,710
application and then the source my app

00:15:16,500 --> 00:15:23,660
one in my app to where to get them from

00:15:19,710 --> 00:15:26,700
and in the egg part I ever recipient all

00:15:23,660 --> 00:15:29,220
like my appt 1 and my app to that will

00:15:26,700 --> 00:15:30,030
have though their dependency and I can

00:15:29,220 --> 00:15:31,890
add

00:15:30,030 --> 00:15:35,010
dependencies just like for the project

00:15:31,890 --> 00:15:38,910
so if I want like to say to add app and

00:15:35,010 --> 00:15:41,220
light client to have monitoring for my

00:15:38,910 --> 00:15:46,410
application instead of defining that

00:15:41,220 --> 00:15:49,170
into my setup that py project it would

00:15:46,410 --> 00:15:53,850
be a better place to have that in the

00:15:49,170 --> 00:15:56,580
app environment configuration so the ID

00:15:53,850 --> 00:15:58,710
is to provide a development project that

00:15:56,580 --> 00:16:00,780
builds the application environment so

00:15:58,710 --> 00:16:03,450
you have a new project and you don't

00:16:00,780 --> 00:16:07,560
care about my app one and my app to and

00:16:03,450 --> 00:16:09,660
do a git clone and and do the pool and

00:16:07,560 --> 00:16:12,060
everything so it's the application

00:16:09,660 --> 00:16:14,760
environment will take care of building

00:16:12,060 --> 00:16:18,030
everything so basically what you get is

00:16:14,760 --> 00:16:20,460
is that so you have a ground file for

00:16:18,030 --> 00:16:23,880
the grunt task so you'll probably have a

00:16:20,460 --> 00:16:26,480
make file I'll tell you a bit more about

00:16:23,880 --> 00:16:30,450
after you'll have like the bootstrap dot

00:16:26,480 --> 00:16:32,430
piy file that that's used to bootstrap

00:16:30,450 --> 00:16:34,320
the build-out environment so the bower

00:16:32,430 --> 00:16:36,660
for the bower dependencies your

00:16:34,320 --> 00:16:39,780
javascript dependencies the build-out

00:16:36,660 --> 00:16:42,900
configuration probably netc directories

00:16:39,780 --> 00:16:45,630
for your application configuration and

00:16:42,900 --> 00:16:50,460
the package that Jason it's for the node

00:16:45,630 --> 00:16:52,880
module package management to install

00:16:50,460 --> 00:16:57,000
it's a grant and power and other

00:16:52,880 --> 00:17:00,080
required libraries then to set up the

00:16:57,000 --> 00:17:04,290
project really I'd like to clone that

00:17:00,080 --> 00:17:07,530
environment project then CD your app do

00:17:04,290 --> 00:17:09,900
a virtual end and then run bootstrap

00:17:07,530 --> 00:17:11,610
bootstrap will bootstrap build out and

00:17:09,900 --> 00:17:13,740
then around build out and build out will

00:17:11,610 --> 00:17:16,410
take care of installing everything you

00:17:13,740 --> 00:17:19,230
need for your application then you're

00:17:16,410 --> 00:17:23,010
done so people can start working on your

00:17:19,230 --> 00:17:25,170
project why it makes sense it's because

00:17:23,010 --> 00:17:27,450
I don't think you need to provide a full

00:17:25,170 --> 00:17:30,390
stack environment with all the server

00:17:27,450 --> 00:17:33,390
components under a virtual machine or an

00:17:30,390 --> 00:17:35,430
image or anything yet for developing an

00:17:33,390 --> 00:17:37,950
application for deployment yes but for

00:17:35,430 --> 00:17:41,460
for development it's a bit different I

00:17:37,950 --> 00:17:43,290
think so it will look a bit like that so

00:17:41,460 --> 00:17:45,750
once you install it

00:17:43,290 --> 00:17:49,050
you get all the same files plus other

00:17:45,750 --> 00:17:51,330
ones like the dip in that include done

00:17:49,050 --> 00:17:54,840
by the virtual end and the eggs done by

00:17:51,330 --> 00:17:57,420
the build-out configuration and you get

00:17:54,840 --> 00:18:03,950
the node modules and the components for

00:17:57,420 --> 00:18:08,730
Bauer and the node modules then another

00:18:03,950 --> 00:18:11,520
simple way to wrap those comments in an

00:18:08,730 --> 00:18:13,710
easier way would be to use let's say a

00:18:11,520 --> 00:18:18,120
make file just to wrap those can't

00:18:13,710 --> 00:18:20,310
comment under a common API so front end

00:18:18,120 --> 00:18:22,200
people don't care like you two knew

00:18:20,310 --> 00:18:24,870
about a Python comments and probably

00:18:22,200 --> 00:18:27,090
back in people don't care about knowing

00:18:24,870 --> 00:18:29,520
the front and comment so you can

00:18:27,090 --> 00:18:31,980
probably create like a make file where

00:18:29,520 --> 00:18:35,340
you wrap how you create the virtual and

00:18:31,980 --> 00:18:38,040
how you bootstrap a build-out out your

00:18:35,340 --> 00:18:40,650
run build out and have a comment setup

00:18:38,040 --> 00:18:42,930
that runs all those comment so in the

00:18:40,650 --> 00:18:44,760
end let's say your front-end developer

00:18:42,930 --> 00:18:46,830
to get start on the project will just

00:18:44,760 --> 00:18:49,350
add like to clone your project and then

00:18:46,830 --> 00:18:51,480
CD the app and make set up everything

00:18:49,350 --> 00:18:54,240
will be done and then you could have

00:18:51,480 --> 00:18:57,540
other comment like make run app that

00:18:54,240 --> 00:18:59,670
will do like a pea serve your you're an

00:18:57,540 --> 00:19:03,000
AI file and then run the web server and

00:18:59,670 --> 00:19:05,280
when you separate project so let's say

00:19:03,000 --> 00:19:09,330
you have the front-end total these

00:19:05,280 --> 00:19:11,550
standalone so grant provide a small web

00:19:09,330 --> 00:19:14,790
server for them to develop so there's no

00:19:11,550 --> 00:19:17,010
need for them to run your Python code to

00:19:14,790 --> 00:19:19,110
test and organize their thing but at

00:19:17,010 --> 00:19:21,900
some point it would be important like to

00:19:19,110 --> 00:19:24,540
run the back end or anything so both

00:19:21,900 --> 00:19:29,070
project can coexist under the same app

00:19:24,540 --> 00:19:32,070
environment so in fact the goal is to

00:19:29,070 --> 00:19:34,920
isolate application environment its to

00:19:32,070 --> 00:19:40,860
organize projects in this flexible way

00:19:34,920 --> 00:19:44,180
and give more power to users and T so

00:19:40,860 --> 00:19:44,180
many questions

00:19:44,930 --> 00:19:53,100
that was fast if anyone has a question

00:19:50,940 --> 00:19:58,620
there's a microphone over there for

00:19:53,100 --> 00:20:01,920
asking questions um I guess no questions

00:19:58,620 --> 00:20:11,790
so thank you very much ah there time for

00:20:01,920 --> 00:20:13,320
last question there's question I was

00:20:11,790 --> 00:20:16,580
just going to ask you afterwards but i

00:20:13,320 --> 00:20:18,810
guess i can ask it for everybody here um

00:20:16,580 --> 00:20:21,180
build-out is pretty cool but what

00:20:18,810 --> 00:20:22,980
happens when you have repositories that

00:20:21,180 --> 00:20:24,930
depend upon other repositories which

00:20:22,980 --> 00:20:27,900
themselves have their own set ups which

00:20:24,930 --> 00:20:29,880
are arbitrarily complex you're probably

00:20:27,900 --> 00:20:33,150
which I guess some module would get up

00:20:29,880 --> 00:20:35,070
you mean did they get sub modules not

00:20:33,150 --> 00:20:38,970
get sub modules some I've been burned by

00:20:35,070 --> 00:20:41,310
that one once or twice already so actual

00:20:38,970 --> 00:20:43,440
separate git repositories that your code

00:20:41,310 --> 00:20:45,090
project if you split something out into

00:20:43,440 --> 00:20:49,560
multiple git repositories for some

00:20:45,090 --> 00:20:52,200
reason and module a and module be our

00:20:49,560 --> 00:20:53,760
separate get repos yeah and how would

00:20:52,200 --> 00:20:55,080
you use build out to actually check all

00:20:53,760 --> 00:20:56,670
of that stuff out and set up both

00:20:55,080 --> 00:20:58,680
environments independently because they

00:20:56,670 --> 00:21:01,590
have overlapping requirements but not

00:20:58,680 --> 00:21:06,240
complete overlapping requirements well

00:21:01,590 --> 00:21:08,940
the I mean for multiple project under

00:21:06,240 --> 00:21:11,190
the same and application environment

00:21:08,940 --> 00:21:13,560
will probably means you need you need

00:21:11,190 --> 00:21:16,290
the same set so if you develop like

00:21:13,560 --> 00:21:19,260
three different module you probably need

00:21:16,290 --> 00:21:21,960
the same virtual end and everything so

00:21:19,260 --> 00:21:24,420
it's not different let's say it's not

00:21:21,960 --> 00:21:25,920
multiple virtual and inside the same

00:21:24,420 --> 00:21:27,870
application environment matters correct

00:21:25,920 --> 00:21:30,300
but you'll need the same requirements

00:21:27,870 --> 00:21:32,820
for all those modules but at least mr.

00:21:30,300 --> 00:21:36,690
developer as an extension lets you have

00:21:32,820 --> 00:21:40,470
comments to do all those and check out

00:21:36,690 --> 00:21:42,420
and everything under the then the

00:21:40,470 --> 00:21:44,520
application environment but it won't

00:21:42,420 --> 00:21:47,070
create different virtual and for those

00:21:44,520 --> 00:21:48,270
different projects actually that's

00:21:47,070 --> 00:21:52,670
actually good that's exactly what I

00:21:48,270 --> 00:21:52,670
would want it to do okay thank you

00:21:55,170 --> 00:22:03,690
okay let's give place a hand then thank

00:22:00,309 --> 00:22:03,690

YouTube URL: https://www.youtube.com/watch?v=NJf6pUVc7U8


