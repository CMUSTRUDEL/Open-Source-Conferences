Title: Jessica McKellar: Building and breaking a Python sandbox - PyCon 2014
Publication date: 2014-04-12
Playlist: PyCon 2014
Description: 
	Speaker: Jessica McKellar

What does it take to make a Python sandbox that can run untrusted code? Learn some surprising language features and experience security challenges first-hand as we work through building a Python sandbox from scratch. You'll leave this talk with renewed appreciation for the dynamic nature of Python, some sneaky language tricks, and a solid background in classes of sandboxing security issues.

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:02,810 --> 00:00:07,799
good afternoon everybody

00:00:04,890 --> 00:00:10,349
our next speaker Jessica mckellar is an

00:00:07,799 --> 00:00:12,059
entrepreneur software engineer an open

00:00:10,349 --> 00:00:13,080
source contributor from Cambridge

00:00:12,059 --> 00:00:16,980
Massachusetts

00:00:13,080 --> 00:00:19,619
she is co-organizer of Boston Python the

00:00:16,980 --> 00:00:22,740
largest Python meetup in the world and

00:00:19,619 --> 00:00:24,840
runs the bite the Boston Python workshop

00:00:22,740 --> 00:00:27,900
she's maintainer for the twisted and

00:00:24,840 --> 00:00:31,650
open hatch projects and on top of that

00:00:27,900 --> 00:00:33,960
she is co-founder and CTO of Zillah an

00:00:31,650 --> 00:00:37,410
enterprise messaging service that was

00:00:33,960 --> 00:00:39,600
acquired by Dropbox last month today she

00:00:37,410 --> 00:00:41,730
will be talking to us about security

00:00:39,600 --> 00:00:45,739
solutions and sandboxing with Python

00:00:41,730 --> 00:00:50,850
please give her a warm welcome everyone

00:00:45,739 --> 00:00:52,350
thank you so much all right so today

00:00:50,850 --> 00:00:55,770
we're going to talk about building and

00:00:52,350 --> 00:00:56,879
breaking a Python sandbox and this is me

00:00:55,770 --> 00:00:59,309
I'm also director for the Python

00:00:56,879 --> 00:01:01,800
Software Foundation I am probably too

00:00:59,309 --> 00:01:02,789
involved in the Python community here

00:01:01,800 --> 00:01:05,430
are a couple of ways to get in touch

00:01:02,789 --> 00:01:07,740
with me okay so building a sandbox why

00:01:05,430 --> 00:01:09,000
would we ever want to do this this

00:01:07,740 --> 00:01:11,280
actually comes up in a lot of a

00:01:09,000 --> 00:01:14,340
surprising number of contexts when

00:01:11,280 --> 00:01:15,600
learning a language when provide some

00:01:14,340 --> 00:01:17,189
companies want to provide a hosted

00:01:15,600 --> 00:01:20,310
scratch pad for doing arbitrary

00:01:17,189 --> 00:01:22,229
computation there are some researchers

00:01:20,310 --> 00:01:23,430
using distributed computation across

00:01:22,229 --> 00:01:26,159
bunch of platforms where you need to run

00:01:23,430 --> 00:01:27,479
untrusted code in remote contexts and

00:01:26,159 --> 00:01:29,460
there's some cases where you want to

00:01:27,479 --> 00:01:31,409
inspect running processes safely whereas

00:01:29,460 --> 00:01:33,740
sandbox might be helpful so a sandbox

00:01:31,409 --> 00:01:36,060
the ability to run untrusted Python code

00:01:33,740 --> 00:01:38,850
and there are a lot of examples of this

00:01:36,060 --> 00:01:40,579
in the why in the wild Seattle is an

00:01:38,850 --> 00:01:43,020
academic peer-to-peer computing network

00:01:40,579 --> 00:01:45,899
Google App Engine has a Python shell

00:01:43,020 --> 00:01:48,990
you've ever used code Academy they use

00:01:45,899 --> 00:01:51,329
this in Python service to run a Python

00:01:48,990 --> 00:01:55,110
sandbox and check i/o who I think is

00:01:51,329 --> 00:01:56,729
it's a start up row here there's an on

00:01:55,110 --> 00:01:59,969
line coding game that you know execute

00:01:56,729 --> 00:02:02,189
arbitrary Python code and if you have

00:01:59,969 --> 00:02:04,409
visited the Python org website post

00:02:02,189 --> 00:02:08,069
redesign front Center on the front page

00:02:04,409 --> 00:02:09,509
is you know Python repple and so this is

00:02:08,069 --> 00:02:13,800
running you know arbitrary code in the

00:02:09,509 --> 00:02:15,570
sandbox and we have two big choices

00:02:13,800 --> 00:02:17,310
or two big options when building a

00:02:15,570 --> 00:02:18,900
sandbox we could do language level

00:02:17,310 --> 00:02:21,030
sandboxing which is we're gonna focus on

00:02:18,900 --> 00:02:24,450
in this talk and then OS level

00:02:21,030 --> 00:02:26,640
sandboxing and these are sort of modeled

00:02:24,450 --> 00:02:29,070
by the PI sandbox project and then pi PI

00:02:26,640 --> 00:02:30,300
is sandboxing model and there we'll talk

00:02:29,070 --> 00:02:32,070
about sort of the pros and cons of each

00:02:30,300 --> 00:02:33,330
later in the talk but we're gonna stick

00:02:32,070 --> 00:02:35,550
with language level sandboxing because

00:02:33,330 --> 00:02:39,080
it is a lot of fun it gives us an excuse

00:02:35,550 --> 00:02:41,220
to dig into some fun language details

00:02:39,080 --> 00:02:42,480
okay so our most fundamental question

00:02:41,220 --> 00:02:45,570
here is how do you execute arbitrary

00:02:42,480 --> 00:02:47,280
Python code in the first place we have

00:02:45,570 --> 00:02:49,740
two main primitives for this we have

00:02:47,280 --> 00:02:52,020
eval which compiles and evaluates

00:02:49,740 --> 00:02:54,810
expressions and an expression is really

00:02:52,020 --> 00:02:57,600
just some stuff that reduces to a value

00:02:54,810 --> 00:02:59,340
like 1 plus 2 and then exact compiles

00:02:57,600 --> 00:03:01,950
and evaluates statements statements are

00:02:59,340 --> 00:03:03,320
you know the smallest standalone chunks

00:03:01,950 --> 00:03:05,760
of Python code

00:03:03,320 --> 00:03:07,430
exec is more general because you know

00:03:05,760 --> 00:03:09,570
all Python programs are made of

00:03:07,430 --> 00:03:13,170
statements so we'll use exec as the

00:03:09,570 --> 00:03:14,520
basis for our sandboxing model and we'll

00:03:13,170 --> 00:03:16,260
set up a little test harness here we

00:03:14,520 --> 00:03:18,390
have a sandbox in class is really simple

00:03:16,260 --> 00:03:21,900
it just has one method execute which

00:03:18,390 --> 00:03:24,390
takes a code string and execs it ok cool

00:03:21,900 --> 00:03:25,950
so let's test this and so we'll create

00:03:24,390 --> 00:03:27,060
an instance of our sandbox class and we

00:03:25,950 --> 00:03:29,610
have some really simple code we'll just

00:03:27,060 --> 00:03:32,670
print hello world and we'll execute that

00:03:29,610 --> 00:03:35,040
code and this works great ok so we've

00:03:32,670 --> 00:03:39,510
now written a sandbox that will execute

00:03:35,040 --> 00:03:40,880
anything but it works good ok so what

00:03:39,510 --> 00:03:43,410
are some things that we should disallow

00:03:40,880 --> 00:03:47,610
in our sandbox I was running untrusted

00:03:43,410 --> 00:03:51,150
user code a lot of options there we

00:03:47,610 --> 00:03:53,130
definitely we don't want people to use

00:03:51,150 --> 00:03:54,480
up all the file descriptors we probably

00:03:53,130 --> 00:03:57,209
don't want to be able to start up a web

00:03:54,480 --> 00:03:58,380
server that is doing its own thing maybe

00:03:57,209 --> 00:04:00,150
they shouldn't be able to air out of the

00:03:58,380 --> 00:04:01,530
sandbox it maybe should be able to read

00:04:00,150 --> 00:04:03,510
sensitive information from the file

00:04:01,530 --> 00:04:04,620
system and it's just a partial list so

00:04:03,510 --> 00:04:07,980
there are a lot of things to worry about

00:04:04,620 --> 00:04:11,280
if we're gonna run untrusted code to you

00:04:07,980 --> 00:04:13,920
know focus the discussion let's use the

00:04:11,280 --> 00:04:16,230
ability to write to the file system as a

00:04:13,920 --> 00:04:18,570
good example of something that our most

00:04:16,230 --> 00:04:19,770
basic sandbox should not allow just cuz

00:04:18,570 --> 00:04:20,970
that represents the ability to probably

00:04:19,770 --> 00:04:22,380
do a lot of other things we do filling

00:04:20,970 --> 00:04:24,120
the file system ok so the thing that

00:04:22,380 --> 00:04:26,460
we're going to focus on to this talk is

00:04:24,120 --> 00:04:28,169
the ability to write

00:04:26,460 --> 00:04:31,020
file we definitely don't want that to be

00:04:28,169 --> 00:04:35,039
possible so currently this is possible

00:04:31,020 --> 00:04:38,669
how can we prevent it okay well what is

00:04:35,039 --> 00:04:42,300
file exactly if we do some poking around

00:04:38,669 --> 00:04:43,919
at the repple we'll find that if we poke

00:04:42,300 --> 00:04:47,370
around in this double under square

00:04:43,919 --> 00:04:50,069
built-ins file is in there so file is

00:04:47,370 --> 00:04:51,479
one of the built-ins in Python and there

00:04:50,069 --> 00:04:52,530
are a lot of others so file is kind of

00:04:51,479 --> 00:04:55,410
problematic there are a lot of other

00:04:52,530 --> 00:04:59,509
potentially problematic built-ins that

00:04:55,410 --> 00:05:02,250
we might want to disallow in our sandbox

00:04:59,509 --> 00:05:05,039
so how do we disallow the execution of

00:05:02,250 --> 00:05:09,240
problematic built-ins starting to build

00:05:05,039 --> 00:05:10,949
up the functionality of our sandbox so

00:05:09,240 --> 00:05:12,539
okay here's one idea just you know

00:05:10,949 --> 00:05:16,229
spitballing what about a keyword

00:05:12,539 --> 00:05:17,699
blacklist so okay you know you can't use

00:05:16,229 --> 00:05:20,130
file you can't use a vowel

00:05:17,699 --> 00:05:22,229
you can't quit let's just like we're

00:05:20,130 --> 00:05:24,750
passing in a code string if we see the

00:05:22,229 --> 00:05:26,940
word file in our code string

00:05:24,750 --> 00:05:30,330
raisa value error instead of a you know

00:05:26,940 --> 00:05:32,370
actually executing it okay sounds like a

00:05:30,330 --> 00:05:33,419
plausible idea and if we try this with

00:05:32,370 --> 00:05:37,199
our keyword blacklist

00:05:33,419 --> 00:05:41,280
this will in fact fail with our value

00:05:37,199 --> 00:05:44,880
error okay good start can we get around

00:05:41,280 --> 00:05:46,229
this blacklist guess we're thinking

00:05:44,880 --> 00:05:49,830
we're scheming thinking like the

00:05:46,229 --> 00:05:53,400
attackers okay well here's one idea how

00:05:49,830 --> 00:05:55,050
about encryption and not even super

00:05:53,400 --> 00:05:58,320
sophisticated encryption by encryption

00:05:55,050 --> 00:06:01,380
what if we just did this what if we just

00:05:58,320 --> 00:06:04,080
rot13 encode the word file so like the

00:06:01,380 --> 00:06:07,919
literal text file never appears in our

00:06:04,080 --> 00:06:09,479
program but we can decode it and look it

00:06:07,919 --> 00:06:10,919
up in the built-ins dictionary and now

00:06:09,479 --> 00:06:13,320
that we have a reference to this file

00:06:10,919 --> 00:06:16,590
object you know we can write to the file

00:06:13,320 --> 00:06:18,360
system and so if we do this you know and

00:06:16,590 --> 00:06:19,830
in fact works right because you know our

00:06:18,360 --> 00:06:21,000
our key word blacklist and ever

00:06:19,830 --> 00:06:22,490
literally appears in the key word

00:06:21,000 --> 00:06:26,280
blacklist

00:06:22,490 --> 00:06:27,750
okay so blacklist not so hot an idea and

00:06:26,280 --> 00:06:29,280
in the main observation here is oh I can

00:06:27,750 --> 00:06:30,870
get a reference to something about I can

00:06:29,280 --> 00:06:32,430
invoke it like the name doesn't super

00:06:30,870 --> 00:06:35,610
matter it's the actual reference that

00:06:32,430 --> 00:06:39,400
matters okay well how can we remove all

00:06:35,610 --> 00:06:41,560
references to problematic built-ins

00:06:39,400 --> 00:06:43,300
okay well the blacklist didn't work so

00:06:41,560 --> 00:06:45,639
well but how about a whitelist a

00:06:43,300 --> 00:06:46,990
built-ins whitelist so you know we could

00:06:45,639 --> 00:06:49,210
we could literally have a set that

00:06:46,990 --> 00:06:51,520
enumerates all of the the built-ins that

00:06:49,210 --> 00:06:55,030
we deem okay and it leaves out the ones

00:06:51,520 --> 00:06:58,300
that we think are bad and then before we

00:06:55,030 --> 00:07:01,540
actually execute any code we could take

00:06:58,300 --> 00:07:04,870
this original built-ins and then iterate

00:07:01,540 --> 00:07:06,880
over all of the original built-ins

00:07:04,870 --> 00:07:08,500
keys and if it's not in the whitelist

00:07:06,880 --> 00:07:12,370
we'll just delete it so it's not in the

00:07:08,500 --> 00:07:14,169
namespace anymore okay that sounds

00:07:12,370 --> 00:07:16,090
pretty good let's try that so we've

00:07:14,169 --> 00:07:18,100
removed file file was not in the

00:07:16,090 --> 00:07:21,250
built-ins whitelist if we try to execute

00:07:18,100 --> 00:07:23,020
our sample code this exact fit fails so

00:07:21,250 --> 00:07:24,100
file is literally not defined like file

00:07:23,020 --> 00:07:25,590
is not a constant in the namespace

00:07:24,100 --> 00:07:28,690
anymore sweets

00:07:25,590 --> 00:07:31,510
okay so built-ins whitelist okay so I

00:07:28,690 --> 00:07:37,240
can't use file anymore what else can I

00:07:31,510 --> 00:07:40,210
do to write to the file system well what

00:07:37,240 --> 00:07:42,850
if I import something can I import it oh

00:07:40,210 --> 00:07:45,970
yeah I can import OS right it's like an

00:07:42,850 --> 00:07:47,979
import OS and OS has an open function

00:07:45,970 --> 00:07:50,440
that is very similar to file and I can

00:07:47,979 --> 00:07:53,950
use that to write to the file system and

00:07:50,440 --> 00:07:55,570
so far this is allowed okay so how do we

00:07:53,950 --> 00:07:58,930
prevent this from happening well the

00:07:55,570 --> 00:08:03,060
problem is that I can import OS right so

00:07:58,930 --> 00:08:03,060
how do we disallow problematic imports

00:08:04,020 --> 00:08:07,210
okay well the whitelist idea works

00:08:06,039 --> 00:08:08,680
pretty well for the built-in so why

00:08:07,210 --> 00:08:10,810
don't we try to import whitelist as well

00:08:08,680 --> 00:08:11,889
but importing is kind of interesting

00:08:10,810 --> 00:08:12,910
right because there's this magnet

00:08:11,889 --> 00:08:14,650
there's a whole mechanism around

00:08:12,910 --> 00:08:16,900
importing and we were going to need to

00:08:14,650 --> 00:08:18,789
hook that importing mechanism so I guess

00:08:16,900 --> 00:08:22,750
the first question is how does importing

00:08:18,789 --> 00:08:24,310
a module work in Python and if we put

00:08:22,750 --> 00:08:25,630
poke around at built-ins a little bit we

00:08:24,310 --> 00:08:29,440
see that there is this double underscore

00:08:25,630 --> 00:08:31,060
import in the built-ins dictionary and

00:08:29,440 --> 00:08:34,270
if we get a reference to that and we

00:08:31,060 --> 00:08:35,560
give it the name of a module that does

00:08:34,270 --> 00:08:36,820
the work of actually loading that

00:08:35,560 --> 00:08:37,450
modules information into the namespace

00:08:36,820 --> 00:08:39,849
great

00:08:37,450 --> 00:08:42,039
so using doubles underscore import you

00:08:39,849 --> 00:08:46,570
know we can sort of manually do the

00:08:42,039 --> 00:08:48,190
import ourselves through built-ins and

00:08:46,570 --> 00:08:49,480
and what is the expected function

00:08:48,190 --> 00:08:51,430
signature for the importer well we can

00:08:49,480 --> 00:08:52,420
just look at that you know in the little

00:08:51,430 --> 00:08:54,420
built-in help here

00:08:52,420 --> 00:08:56,950
and we see that we need a name and

00:08:54,420 --> 00:08:59,490
there's some stuff about Global's and

00:08:56,950 --> 00:09:01,630
locals and so much some other some other

00:08:59,490 --> 00:09:05,050
optional arguments in a function

00:09:01,630 --> 00:09:07,750
signature cool okay so let's write our

00:09:05,050 --> 00:09:09,160
own importer and for starters it is just

00:09:07,750 --> 00:09:10,780
gonna print that we're you know to prove

00:09:09,160 --> 00:09:12,370
to us that we're using an own importer

00:09:10,780 --> 00:09:14,140
we're gonna print that we are and then

00:09:12,370 --> 00:09:16,480
we're gonna use the underlying double

00:09:14,140 --> 00:09:20,470
underscore import that we pulled out a

00:09:16,480 --> 00:09:21,760
built-ins and so if we do this we see

00:09:20,470 --> 00:09:24,430
that it works cool

00:09:21,760 --> 00:09:26,350
so we've hooked the import mechanism to

00:09:24,430 --> 00:09:28,810
use our own importer and now that we've

00:09:26,350 --> 00:09:30,550
done this we can extend this to you know

00:09:28,810 --> 00:09:32,890
before actually trying to import

00:09:30,550 --> 00:09:34,180
something we can check if if the name

00:09:32,890 --> 00:09:35,170
that we're trying to import is in the

00:09:34,180 --> 00:09:37,600
module whitelist

00:09:35,170 --> 00:09:40,660
and if it is we we use that underlying

00:09:37,600 --> 00:09:43,560
import mechanism and if it's not we you

00:09:40,660 --> 00:09:46,270
know block the employer as an importer

00:09:43,560 --> 00:09:47,860
cool okay so so maybe we want to be

00:09:46,270 --> 00:09:50,620
super conservative of the only modules

00:09:47,860 --> 00:09:55,870
you can import our like string and re

00:09:50,620 --> 00:09:57,790
and we replace the importer that's in

00:09:55,870 --> 00:09:59,740
built-ins with our safe import

00:09:57,790 --> 00:10:03,370
implementation that's using our safe

00:09:59,740 --> 00:10:11,910
module with whitelist cool okay so now

00:10:03,370 --> 00:10:16,510
if we try using OS not open oh I have

00:10:11,910 --> 00:10:18,580
warnings about meetings cool let's make

00:10:16,510 --> 00:10:20,860
that never happen again where's my point

00:10:18,580 --> 00:10:23,950
okay we're just gonna we're gonna quit

00:10:20,860 --> 00:10:26,800
this I have a lot of meetings that I'm

00:10:23,950 --> 00:10:30,790
missing okay this is gonna look really

00:10:26,800 --> 00:10:36,390
good in the video edit okay where am i

00:10:30,790 --> 00:10:41,080
oh god okay

00:10:36,390 --> 00:10:43,630
we're back we're back okay okay so we're

00:10:41,080 --> 00:10:46,510
gonna try to import iOS and this doesn't

00:10:43,630 --> 00:10:48,640
work anymore because we have you know

00:10:46,510 --> 00:10:50,710
hook the importer and it's not annoy

00:10:48,640 --> 00:10:51,910
list awesome okay so whitelist are

00:10:50,710 --> 00:10:55,600
proving quite fruitful for us

00:10:51,910 --> 00:10:58,860
sweet what else can we do I can't import

00:10:55,600 --> 00:11:00,730
a can't use file what else can we do

00:10:58,860 --> 00:11:02,350
okay well this is a little hypothetical

00:11:00,730 --> 00:11:04,840
but one thing we've been doing a while

00:11:02,350 --> 00:11:05,930
is sort of managing built-ins and if I

00:11:04,840 --> 00:11:08,390
can play with built-in

00:11:05,930 --> 00:11:09,890
then an attacker couldn't - and there's

00:11:08,390 --> 00:11:11,420
a lot of really fundamental stuff in

00:11:09,890 --> 00:11:13,250
there like we this isn't Python - you

00:11:11,420 --> 00:11:16,070
know we define true and false in

00:11:13,250 --> 00:11:19,000
built-ins like what if an attacker like

00:11:16,070 --> 00:11:21,529
set true equal to false and vice versa

00:11:19,000 --> 00:11:22,850
at the very least that could do yeah

00:11:21,529 --> 00:11:24,980
it's possible that that could cause all

00:11:22,850 --> 00:11:26,839
kinds of checks to behave unexpectedly

00:11:24,980 --> 00:11:29,480
it is it seems like a bad idea to let

00:11:26,839 --> 00:11:31,610
people modify built-ins so so let's take

00:11:29,480 --> 00:11:34,810
that off the table then the question is

00:11:31,610 --> 00:11:37,700
okay how do we make us unable to modify

00:11:34,810 --> 00:11:38,770
built-ins so we really want to make

00:11:37,700 --> 00:11:41,060
built-ins read-only

00:11:38,770 --> 00:11:46,130
so how do you make something read-only

00:11:41,060 --> 00:11:48,589
in python okay well built-ins is a

00:11:46,130 --> 00:11:50,330
dictionary we can subclass a dictionary

00:11:48,589 --> 00:11:52,330
and why don't we just raise a value

00:11:50,330 --> 00:11:55,580
error for all of the things that would

00:11:52,330 --> 00:11:58,430
be to the dictionary cool okay so we

00:11:55,580 --> 00:12:00,500
have a read-only built-ins class you

00:11:58,430 --> 00:12:02,209
can't you know add or remove items from

00:12:00,500 --> 00:12:04,010
this dictionary that sounds pretty good

00:12:02,209 --> 00:12:06,110
and we can you know again before

00:12:04,010 --> 00:12:08,660
executing any of our untrusted code we

00:12:06,110 --> 00:12:18,350
can replace the original built-ins with

00:12:08,660 --> 00:12:19,190
our read-only version cool okay so what

00:12:18,350 --> 00:12:21,080
else can I do

00:12:19,190 --> 00:12:23,209
you know the main lesson that we learned

00:12:21,080 --> 00:12:25,339
earlier is that if I can get a reference

00:12:23,209 --> 00:12:26,870
to something bad I can invoke it can I

00:12:25,339 --> 00:12:29,930
get a reference to something bad

00:12:26,870 --> 00:12:31,490
anywhere else within Python like where

00:12:29,930 --> 00:12:32,930
can I poke around to get a reference to

00:12:31,490 --> 00:12:37,520
something that I could use to write to

00:12:32,930 --> 00:12:39,200
the file system okay well there's a

00:12:37,520 --> 00:12:41,450
bunch of funky stuff in the inheritance

00:12:39,200 --> 00:12:42,560
hierarchy why don't we just play around

00:12:41,450 --> 00:12:43,690
there like let's just poke around and

00:12:42,560 --> 00:12:46,100
see what we can find

00:12:43,690 --> 00:12:47,420
so like let's take a list what's render

00:12:46,100 --> 00:12:48,829
on list there's always double underscore

00:12:47,420 --> 00:12:50,209
methods that I usually just ignore in

00:12:48,829 --> 00:12:54,020
the door output is there anything

00:12:50,209 --> 00:12:56,630
interesting in here well there's this

00:12:54,020 --> 00:13:01,490
class attribute okay so list is a type

00:12:56,630 --> 00:13:05,420
list fine the class attribute has its

00:13:01,490 --> 00:13:07,670
own at remove basis which is what the

00:13:05,420 --> 00:13:10,339
objects base classes are so in this case

00:13:07,670 --> 00:13:13,339
list is just just subclasses objects not

00:13:10,339 --> 00:13:16,579
not super interesting but so you can get

00:13:13,339 --> 00:13:17,750
the base classes of an object and you

00:13:16,579 --> 00:13:19,250
know you can also do the reverse you can

00:13:17,750 --> 00:13:21,199
you can find the subclasses to

00:13:19,250 --> 00:13:24,050
so in this case list doesn't have any

00:13:21,199 --> 00:13:25,759
subclasses but it does so bool is a

00:13:24,050 --> 00:13:28,850
subclass events

00:13:25,759 --> 00:13:34,730
stir in Unicode both subclass base

00:13:28,850 --> 00:13:36,829
string okay so we can get the base

00:13:34,730 --> 00:13:40,430
classes of an object and we can get the

00:13:36,829 --> 00:13:44,540
subclasses of an object and the base

00:13:40,430 --> 00:13:45,879
class of list is object which everything

00:13:44,540 --> 00:13:50,060
inherits from right

00:13:45,879 --> 00:13:51,139
what are the subclasses of objects like

00:13:50,060 --> 00:13:53,959
that would be an interesting list of

00:13:51,139 --> 00:13:56,209
things whoa okay so that turns it to be

00:13:53,959 --> 00:13:58,610
a lot of things okay so this is all of

00:13:56,209 --> 00:14:00,439
the things that subclass the object

00:13:58,610 --> 00:14:02,180
class the most fundamental class and

00:14:00,439 --> 00:14:03,680
this is pretty hard to read so why don't

00:14:02,180 --> 00:14:07,459
we write a little for loop things easier

00:14:03,680 --> 00:14:08,959
to see okay so so we're iterating over

00:14:07,459 --> 00:14:11,240
these subclasses let's just print a name

00:14:08,959 --> 00:14:13,610
we're sort of scanning through this okay

00:14:11,240 --> 00:14:18,529
sweet instance ellipsis member

00:14:13,610 --> 00:14:20,389
descriptor wait a second you thought you

00:14:18,529 --> 00:14:24,949
were gone file but you're not okay so

00:14:20,389 --> 00:14:27,680
file we still have a reference to in one

00:14:24,949 --> 00:14:29,059
of the subclasses of objects and once we

00:14:27,680 --> 00:14:30,559
have a handle the file that's game over

00:14:29,059 --> 00:14:32,449
right we know exactly what to do with

00:14:30,559 --> 00:14:35,209
this so we pull out the name and you say

00:14:32,449 --> 00:14:36,649
you know we have these subclasses we you

00:14:35,209 --> 00:14:38,750
know make a nice little dictionary and

00:14:36,649 --> 00:14:41,059
mapping the name to the actual reference

00:14:38,750 --> 00:14:43,930
we pull out the reference for file and

00:14:41,059 --> 00:14:48,610
we use that to write to the file system

00:14:43,930 --> 00:14:51,709
okay how do we stop that from happening

00:14:48,610 --> 00:14:54,519
and maybe the thought here is that we

00:14:51,709 --> 00:14:56,480
really shouldn't be exposing these

00:14:54,519 --> 00:14:57,860
implementation details like maybe it's

00:14:56,480 --> 00:14:59,329
useful in some cases but maybe for the

00:14:57,860 --> 00:15:01,839
vast majority of programming use cases

00:14:59,329 --> 00:15:04,309
we could just hide these from the user

00:15:01,839 --> 00:15:05,899
so so let's see if we can just get rid

00:15:04,309 --> 00:15:08,870
of these can we delete bases and

00:15:05,899 --> 00:15:14,589
subclasses okay so we're gonna del type

00:15:08,870 --> 00:15:16,430
that basis shoot that did not work and

00:15:14,589 --> 00:15:17,899
the reason it doesn't work is because

00:15:16,430 --> 00:15:19,610
this is actually there's a check on

00:15:17,899 --> 00:15:21,410
doing this you can't actually set

00:15:19,610 --> 00:15:24,470
attributes of type this is imposed by

00:15:21,410 --> 00:15:27,019
the underlying cpython implementation so

00:15:24,470 --> 00:15:31,100
so we can't delete them from C sorry

00:15:27,019 --> 00:15:32,690
from Python but fortunately

00:15:31,100 --> 00:15:33,830
if we're willing to invest a little bit

00:15:32,690 --> 00:15:35,450
of effort we can actually work around

00:15:33,830 --> 00:15:36,800
that so there's this thing called C type

00:15:35,450 --> 00:15:39,080
so C types is a foreign function

00:15:36,800 --> 00:15:42,260
interface that allows us to sort of dig

00:15:39,080 --> 00:15:44,570
in to the underlying C Python guts and

00:15:42,260 --> 00:15:47,270
so if we use C types we can work up a

00:15:44,570 --> 00:15:49,010
little function that'll give us the

00:15:47,270 --> 00:15:51,500
dictionary of attributes on the

00:15:49,010 --> 00:15:55,610
underlying C Python implementation for

00:15:51,500 --> 00:15:58,070
something okay cool so if we if we write

00:15:55,610 --> 00:16:00,500
it this little dictionary of function we

00:15:58,070 --> 00:16:03,380
can pull out the underlying type dict by

00:16:00,500 --> 00:16:06,730
passing this deletion check and we can

00:16:03,380 --> 00:16:11,630
download bases and subclasses that way

00:16:06,730 --> 00:16:14,780
cool okay okay so no subclasses no super

00:16:11,630 --> 00:16:17,990
classes now what can we do what else can

00:16:14,780 --> 00:16:22,580
we do to write to this file system okay

00:16:17,990 --> 00:16:24,830
well was back to playing around here

00:16:22,580 --> 00:16:26,000
okay so let's say you know it was it was

00:16:24,830 --> 00:16:28,880
fruitful for us to look at some of these

00:16:26,000 --> 00:16:31,490
random double underscore attributes on

00:16:28,880 --> 00:16:32,570
lists why don't we write a function and

00:16:31,490 --> 00:16:36,380
see there's anything interesting than

00:16:32,570 --> 00:16:42,230
the drew output there okay so good hash

00:16:36,380 --> 00:16:46,280
we've got name you've got new func code

00:16:42,230 --> 00:16:49,070
okay that sounds interesting what what

00:16:46,280 --> 00:16:52,310
is what is func code what else is was an

00:16:49,070 --> 00:16:54,080
attribute of func code cool okay so

00:16:52,310 --> 00:16:56,390
there's this Co code attribute of func

00:16:54,080 --> 00:16:58,480
code and if you look at Co code so you

00:16:56,390 --> 00:17:01,100
know there's some sort of hex gibberish

00:16:58,480 --> 00:17:03,380
which looks like the actual byte code

00:17:01,100 --> 00:17:08,089
that the Python interpreter is is

00:17:03,380 --> 00:17:12,949
executing so that's cool surely we can't

00:17:08,089 --> 00:17:14,720
change that right okay so well just as

00:17:12,949 --> 00:17:16,670
sort of a prototype okay we have our our

00:17:14,720 --> 00:17:19,160
nice function foo I'm gonna write our

00:17:16,670 --> 00:17:21,370
own evil function that prints kaboom and

00:17:19,160 --> 00:17:26,240
you know if we run foo it prints meow

00:17:21,370 --> 00:17:27,680
but if we set the func code attribute on

00:17:26,240 --> 00:17:33,170
foo what happens

00:17:27,680 --> 00:17:36,860
oh okay so that works okay so that seems

00:17:33,170 --> 00:17:38,390
bad okay so that this brings us back to

00:17:36,860 --> 00:17:40,070
an idea that we discussed before which

00:17:38,390 --> 00:17:41,900
is that we got to be careful about

00:17:40,070 --> 00:17:44,330
exponents exposing potentially dangerous

00:17:41,900 --> 00:17:46,039
implementation details you know probably

00:17:44,330 --> 00:17:48,559
the vast majority of use cases our users

00:17:46,039 --> 00:17:50,480
don't need access to a font code object

00:17:48,559 --> 00:17:52,669
and actually we can use the same c-types

00:17:50,480 --> 00:17:55,000
trick from before to get rid of this so

00:17:52,669 --> 00:17:57,860
we can use our dictionary of function to

00:17:55,000 --> 00:18:00,500
to pull out the the attributes of that

00:17:57,860 --> 00:18:02,779
function of the function type and then

00:18:00,500 --> 00:18:07,880
delete font code so it's not accessible

00:18:02,779 --> 00:18:09,710
any more cool okay let's recap okay we

00:18:07,880 --> 00:18:12,019
tried a keyword blacklist that ended up

00:18:09,710 --> 00:18:14,360
being a bad idea rot13 was a big problem

00:18:12,019 --> 00:18:16,460
for us there built-ins whitelist though

00:18:14,360 --> 00:18:19,519
that was pretty good an import whitelist

00:18:16,460 --> 00:18:21,440
of hooking the importer making important

00:18:19,519 --> 00:18:24,320
objects like built-ins read-only sub

00:18:21,440 --> 00:18:25,760
classing dict we deleted a couple of

00:18:24,320 --> 00:18:27,679
problematic implementation details like

00:18:25,760 --> 00:18:30,889
bases and subclasses and func code and

00:18:27,679 --> 00:18:32,539
then we deleted the ability to construct

00:18:30,889 --> 00:18:37,460
arbitrary code objects which seems

00:18:32,539 --> 00:18:40,669
pretty dangerous sweets and actually

00:18:37,460 --> 00:18:42,529
we've run out of tricks we have

00:18:40,669 --> 00:18:44,990
implemented I would say 80% of a

00:18:42,529 --> 00:18:47,289
full-fledged Python sandbox where the

00:18:44,990 --> 00:18:50,659
remaining 20% are just edge cases due to

00:18:47,289 --> 00:18:52,460
you know details in the language but if

00:18:50,659 --> 00:18:54,200
we zoom way way way out you can imagine

00:18:52,460 --> 00:18:56,240
a single file containing all of the code

00:18:54,200 --> 00:18:58,070
we've written where first we produced a

00:18:56,240 --> 00:18:59,630
built-ins whitelist and we have an

00:18:58,070 --> 00:19:01,399
import whitelist and we make built-ins

00:18:59,630 --> 00:19:02,779
read-only and like before we execute any

00:19:01,399 --> 00:19:06,730
code we delete some of these problematic

00:19:02,779 --> 00:19:10,220
details and then we'd have a pretty cool

00:19:06,730 --> 00:19:11,929
sandbox it's pretty cool although we do

00:19:10,220 --> 00:19:12,980
limit some important functionality there

00:19:11,929 --> 00:19:15,889
there are definitely cases where I might

00:19:12,980 --> 00:19:18,260
want to be able to write to a file even

00:19:15,889 --> 00:19:19,659
in the sandbox and also if we think back

00:19:18,260 --> 00:19:22,929
to the things we said we should disallow

00:19:19,659 --> 00:19:26,389
we're not hitting all of these bases yet

00:19:22,929 --> 00:19:29,630
like this language level sandbox does

00:19:26,389 --> 00:19:31,340
not give us a lot of hooks for

00:19:29,630 --> 00:19:32,899
preventing resource exhaustion like

00:19:31,340 --> 00:19:36,590
nothing would like if someone decided to

00:19:32,899 --> 00:19:39,830
like create a fleet of Bitcoin miners on

00:19:36,590 --> 00:19:41,919
my server like there are no ways to stop

00:19:39,830 --> 00:19:46,519
them from using up all my CPU resources

00:19:41,919 --> 00:19:48,500
with this implementation and so there's

00:19:46,519 --> 00:19:50,480
going back to sort of our choices here

00:19:48,500 --> 00:19:52,130
our choice is a language level sandbox

00:19:50,480 --> 00:19:56,450
but there's definitely fun to explore or

00:19:52,130 --> 00:19:57,750
an OS level sandbox and actually the the

00:19:56,450 --> 00:19:59,880
code that we've written which is Bay

00:19:57,750 --> 00:20:02,400
on pi sandbox if you look at the at the

00:19:59,880 --> 00:20:05,820
github page for pi sandbox it even I'm a

00:20:02,400 --> 00:20:08,930
nice strong warning at the bottom by the

00:20:05,820 --> 00:20:12,180
author who wrote a really thoughtful

00:20:08,930 --> 00:20:14,520
retrospective on what he discovered

00:20:12,180 --> 00:20:16,680
while building up pi sandbox over the

00:20:14,520 --> 00:20:18,180
years which discusses a lot of the

00:20:16,680 --> 00:20:21,620
concerns that we've talked about and

00:20:18,180 --> 00:20:24,570
fundamentally it just it becomes hard to

00:20:21,620 --> 00:20:27,870
write a language level sandbox that

00:20:24,570 --> 00:20:31,020
allows you to do useful stuff but it's

00:20:27,870 --> 00:20:33,060
also safe and so the his recommendation

00:20:31,020 --> 00:20:34,580
and really the recommendation of most

00:20:33,060 --> 00:20:36,810
people that you talk to you when you

00:20:34,580 --> 00:20:38,490
have worked on Santa boxes is that you

00:20:36,810 --> 00:20:40,290
need to at least pair it with an OS

00:20:38,490 --> 00:20:42,980
level sandbox so leveraging the OS to

00:20:40,290 --> 00:20:44,970
enforce enforce resource constraints or

00:20:42,980 --> 00:20:47,970
limit your visibility in the file system

00:20:44,970 --> 00:20:52,350
things like that but it was a fun

00:20:47,970 --> 00:20:53,850
exercise no here's a little bit of food

00:20:52,350 --> 00:20:55,560
for thought here so one question is do

00:20:53,850 --> 00:20:56,190
other languages have these sandbox and

00:20:55,560 --> 00:20:59,370
concerns

00:20:56,190 --> 00:21:04,320
what does Java Script do what does Java

00:20:59,370 --> 00:21:05,790
do and also if we were designing a new

00:21:04,320 --> 00:21:07,440
language if we had the ability to do

00:21:05,790 --> 00:21:09,270
this from scratch and we wanted

00:21:07,440 --> 00:21:10,890
sandboxing to be you know sort of refer

00:21:09,270 --> 00:21:12,450
to a first-class consideration while

00:21:10,890 --> 00:21:17,670
designing this what are some design

00:21:12,450 --> 00:21:18,930
choices that would make and here are a

00:21:17,670 --> 00:21:19,740
couple of fun experiments this is the

00:21:18,930 --> 00:21:21,780
kind of thing that I would do on the

00:21:19,740 --> 00:21:23,550
weekend if I had more time we could look

00:21:21,780 --> 00:21:26,880
at how pi PI does this so we were

00:21:23,550 --> 00:21:29,250
looking at weeks utilize some C Python

00:21:26,880 --> 00:21:30,090
specific details while going through

00:21:29,250 --> 00:21:33,720
this experiment

00:21:30,090 --> 00:21:35,880
how does pi pi do it how exactly does

00:21:33,720 --> 00:21:39,180
the c python interpreter compile and run

00:21:35,880 --> 00:21:40,710
bytecode what does the Python stack look

00:21:39,180 --> 00:21:42,120
like you know coming from a sea world I

00:21:40,710 --> 00:21:44,300
have a very clear picture of that but is

00:21:42,120 --> 00:21:46,380
it more complicated in the Python world

00:21:44,300 --> 00:21:48,150
see types this foreign function

00:21:46,380 --> 00:21:49,980
interface we will hook into C code that

00:21:48,150 --> 00:21:52,800
seems like a very nifty trick how does

00:21:49,980 --> 00:21:54,840
that work and then how exactly can the

00:21:52,800 --> 00:21:57,600
operating system help provide a secure

00:21:54,840 --> 00:21:58,740
environment in this context so a couple

00:21:57,600 --> 00:22:01,710
of fun experiments that we could run

00:21:58,740 --> 00:22:03,510
through together and also a little bit

00:22:01,710 --> 00:22:04,950
of bedtime reading you can set the full

00:22:03,510 --> 00:22:09,420
PI sandbox implementation which is

00:22:04,950 --> 00:22:10,800
imminently readable and mostly what

00:22:09,420 --> 00:22:11,370
we've already talked about on these

00:22:10,800 --> 00:22:13,770
slides

00:22:11,370 --> 00:22:14,420
actually so I was up on github and then

00:22:13,770 --> 00:22:17,070
again it's really thoughtful

00:22:14,420 --> 00:22:19,380
retrospective on PI sandboxes challenges

00:22:17,070 --> 00:22:21,240
on lwn you can read through pipe is

00:22:19,380 --> 00:22:24,030
sandboxing implementation and how python

00:22:21,240 --> 00:22:27,120
anywhere the service that hosts the

00:22:24,030 --> 00:22:30,240
python.org sandbox how that works as

00:22:27,120 --> 00:22:31,950
well so thank you for accompanying me on

00:22:30,240 --> 00:22:33,990
this journey through this tricky

00:22:31,950 --> 00:22:36,870
sandboxing setup to learn a couple of

00:22:33,990 --> 00:22:39,030
interesting language tidbits and the

00:22:36,870 --> 00:22:41,309
sort of exploitation tricks as we walk

00:22:39,030 --> 00:22:42,510
through this thought experiments that is

00:22:41,309 --> 00:22:43,620
what I have for you so thank you so much

00:22:42,510 --> 00:22:45,360
and then also if you want to talk to me

00:22:43,620 --> 00:22:47,340
about this or anything I will be at the

00:22:45,360 --> 00:22:49,559
O'Reilly booth in the expo hall tomorrow

00:22:47,340 --> 00:22:52,460
morning and you can get free books there

00:22:49,559 --> 00:22:52,460
so thank you

00:22:59,259 --> 00:23:10,220
are there any questions there are mics

00:23:03,730 --> 00:23:12,710
on the sides yeah

00:23:10,220 --> 00:23:14,720
thanks for the talk this might not

00:23:12,710 --> 00:23:16,190
really change the fundamental discussion

00:23:14,720 --> 00:23:18,350
very much but if I want to

00:23:16,190 --> 00:23:21,499
sandbox something like ipython notebook

00:23:18,350 --> 00:23:22,759
have people worked on that at all I mean

00:23:21,499 --> 00:23:24,769
is in some sense that you can just rent

00:23:22,759 --> 00:23:26,360
through pi PI and use their sandbox like

00:23:24,769 --> 00:23:29,299
are there any recommendations on how to

00:23:26,360 --> 00:23:31,549
do that yeah so I think I mean there are

00:23:29,299 --> 00:23:33,110
various mature sandboxing there's

00:23:31,549 --> 00:23:34,429
certainly os-level sandboxing techniques

00:23:33,110 --> 00:23:35,869
and then pipe I definitely it's a

00:23:34,429 --> 00:23:39,080
supported operation to do things like

00:23:35,869 --> 00:23:41,779
this so yes I would say don't roll your

00:23:39,080 --> 00:23:48,769
own sandbox and do use one that's

00:23:41,779 --> 00:23:50,330
established yeah sandboxing horror

00:23:48,769 --> 00:23:55,179
stories anyone who's worked on maybe

00:23:50,330 --> 00:23:55,179
JavaScript or v8 probably has some no

00:23:56,470 --> 00:24:01,429
okay thank you so much there are

00:23:58,279 --> 00:24:03,549
lightning talks next stay tuned for

00:24:01,429 --> 00:24:03,549

YouTube URL: https://www.youtube.com/watch?v=sL_syMmRkoU


