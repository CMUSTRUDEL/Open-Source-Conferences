Title: Katherine Scott: Hello Physical World: A Crash Course on the Internet of Things - PyCon 2014
Publication date: 2014-04-24
Playlist: PyCon 2014
Description: 
	Speaker: Katherine Scott

Live and direct from the PyCon stage learn how to connect your things to the internet! In this talk we'll connect physical things and people to the internet. In this talk we will live code a tiny web server that interacts with the physical world via sensors, actuators, video, and audio. We will explore tools in the Python ecosystem that make this possible and show how they work together.

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:14,120 --> 00:00:21,450
hi welcome again to continuing our

00:00:18,210 --> 00:00:23,670
hardware centric track we have Catherine

00:00:21,450 --> 00:00:26,669
Scott she's the lead developer for

00:00:23,670 --> 00:00:28,980
temple automation and she's here to give

00:00:26,669 --> 00:00:32,300
us a crash course on the Internet of

00:00:28,980 --> 00:00:32,300
Things so let's give her a hand

00:00:39,000 --> 00:00:42,719
so a quick and dirty guide to putting

00:00:40,859 --> 00:00:45,780
things on the internet you guys having

00:00:42,719 --> 00:00:47,339
fun it's a good day and it's the end of

00:00:45,780 --> 00:00:52,469
the day so we're gonna have a ton of fun

00:00:47,339 --> 00:00:54,660
again all right so as I see it I wanted

00:00:52,469 --> 00:00:59,010
to write an intro sort of tutorial where

00:00:54,660 --> 00:01:00,989
I I talked about how to do different

00:00:59,010 --> 00:01:02,399
stuff with hardware and and part of the

00:01:00,989 --> 00:01:04,140
problem is is when you go and look at

00:01:02,399 --> 00:01:05,460
sort of all the tutorials out there

00:01:04,140 --> 00:01:08,070
there's a bunch of tutorials on how to

00:01:05,460 --> 00:01:10,770
do little tiny toy things with hardware

00:01:08,070 --> 00:01:12,360
and there's lots of tutorials about how

00:01:10,770 --> 00:01:13,890
to do web stuff and that's because

00:01:12,360 --> 00:01:15,119
people will tend to break off these

00:01:13,890 --> 00:01:17,520
cameras right there's people who do

00:01:15,119 --> 00:01:20,280
massive web scale stuff and then there's

00:01:17,520 --> 00:01:21,899
people who tend to build more Hardware

00:01:20,280 --> 00:01:23,729
stuff like robotics and computer vision

00:01:21,899 --> 00:01:27,030
and that's what I do most of the time

00:01:23,729 --> 00:01:28,409
and you know every time I go and build a

00:01:27,030 --> 00:01:29,939
robotics Justin would grow and build

00:01:28,409 --> 00:01:31,619
some piece of hardware almost

00:01:29,939 --> 00:01:33,439
immediately as soon as it's done or as

00:01:31,619 --> 00:01:35,610
it's being built it's like oh can you go

00:01:33,439 --> 00:01:37,500
give it a web interface can you go do

00:01:35,610 --> 00:01:39,390
something with it so I can see it's an

00:01:37,500 --> 00:01:41,490
internet it's like yes I can't but I

00:01:39,390 --> 00:01:43,610
gotta figure it out so I wanted to write

00:01:41,490 --> 00:01:46,649
like a really simple introductory

00:01:43,610 --> 00:01:48,539
experience for building something like

00:01:46,649 --> 00:01:50,759
that how do I take a simple object and

00:01:48,539 --> 00:01:52,289
connect it to the Internet so the part

00:01:50,759 --> 00:01:55,200
of the problem is is that you have to

00:01:52,289 --> 00:01:57,299
figure out what you want to put on the

00:01:55,200 --> 00:02:00,840
internet and stuff that sells really

00:01:57,299 --> 00:02:03,149
well is stuff that deals with pets so I

00:02:00,840 --> 00:02:06,040
decided to put pets on the Internet and

00:02:03,149 --> 00:02:08,020
I don't have cats

00:02:06,040 --> 00:02:10,930
have dogs I used to work in a

00:02:08,020 --> 00:02:12,880
neuroscience lab and I kind of fell in

00:02:10,930 --> 00:02:14,140
love with rats because you can leave

00:02:12,880 --> 00:02:16,630
them for a week and they have all the

00:02:14,140 --> 00:02:19,210
best qualities of dogs and cats and

00:02:16,630 --> 00:02:21,460
they're compact and easy to deal with so

00:02:19,210 --> 00:02:24,820
I decided to put rats on the Internet

00:02:21,460 --> 00:02:26,740
which is great because rats support all

00:02:24,820 --> 00:02:29,680
sorts of wireless protocols and

00:02:26,740 --> 00:02:31,560
interface standards and you know they're

00:02:29,680 --> 00:02:32,740
just they're super easy to wire up oh

00:02:31,560 --> 00:02:35,140
wait

00:02:32,740 --> 00:02:37,540
they are totally not easy to wire up on

00:02:35,140 --> 00:02:40,680
anything they have no standard

00:02:37,540 --> 00:02:43,270
interfaces except for one and that

00:02:40,680 --> 00:02:47,230
standard interface was thought up by

00:02:43,270 --> 00:02:51,100
this Harvard psychologist and his name

00:02:47,230 --> 00:02:52,450
was BF Skinner and and so BF Skinner his

00:02:51,100 --> 00:02:54,190
whole back was since he's a psychologist

00:02:52,450 --> 00:02:56,770
and he wants to train animals to do

00:02:54,190 --> 00:02:58,209
tasks so we can see how how they perform

00:02:56,770 --> 00:03:01,120
those tasks and how they change when you

00:02:58,209 --> 00:03:03,970
change sort of their environment and so

00:03:01,120 --> 00:03:06,010
he built this thing called a skinner box

00:03:03,970 --> 00:03:09,160
it's also called an operant conditioning

00:03:06,010 --> 00:03:11,170
conditioning chamber and so the Skinner

00:03:09,160 --> 00:03:13,870
box you you guys may be familiar with

00:03:11,170 --> 00:03:16,900
this from work is that it's either a

00:03:13,870 --> 00:03:18,100
light or a buzzer and the rat is

00:03:16,900 --> 00:03:21,010
supposed to hear the light or the buzzer

00:03:18,100 --> 00:03:22,540
and it's supposed to respond to that by

00:03:21,010 --> 00:03:26,410
pushing a lever and then it gets food

00:03:22,540 --> 00:03:29,140
and there's a sort of a other way you

00:03:26,410 --> 00:03:30,700
can train rats where you electrify the

00:03:29,140 --> 00:03:32,320
bottom of the cage and you shock them

00:03:30,700 --> 00:03:34,390
and then they push the lever and then

00:03:32,320 --> 00:03:36,640
you stop the electrification I wasn't

00:03:34,390 --> 00:03:39,100
going to do that because that's not cool

00:03:36,640 --> 00:03:40,959
so from these sort of just basic

00:03:39,100 --> 00:03:42,489
conditioning you you build up primitives

00:03:40,959 --> 00:03:44,470
to do real science did you do real

00:03:42,489 --> 00:03:46,570
biology and do real neuroscience and you

00:03:44,470 --> 00:03:48,250
can also just play with your pets so I

00:03:46,570 --> 00:03:50,950
went to go buy one anything's in there

00:03:48,250 --> 00:03:54,750
they're $10,000 I'm not even kidding you

00:03:50,950 --> 00:03:58,420
it's a lever a buzzer and a computer

00:03:54,750 --> 00:03:59,920
it's $10,000 this is the quote I got for

00:03:58,420 --> 00:04:02,650
doing this and this is actually like a

00:03:59,920 --> 00:04:05,650
huge problem because like the NIH and

00:04:02,650 --> 00:04:07,780
the NSF pay people to do research like

00:04:05,650 --> 00:04:10,269
this and you can't just have one rat no

00:04:07,780 --> 00:04:11,950
you have to do massive parallel rat

00:04:10,269 --> 00:04:14,490
testing at scale to get your drug

00:04:11,950 --> 00:04:18,690
through so you're looking at like 10

00:04:14,490 --> 00:04:20,370
Skinner boxes so I decided well shoot I

00:04:18,690 --> 00:04:22,170
can do this for a hundred bucks I and I

00:04:20,370 --> 00:04:23,610
totally did and it's it's super cheap to

00:04:22,170 --> 00:04:26,490
do it last year if you're at PyCon

00:04:23,610 --> 00:04:29,430
everyone got a Raspberry Pi you know you

00:04:26,490 --> 00:04:32,160
get a Raspberry Pi for 30 bucks I got a

00:04:29,430 --> 00:04:33,540
Raspberry Pi IR camera so IR is kind of

00:04:32,160 --> 00:04:35,940
like night-vision it's like the poor

00:04:33,540 --> 00:04:38,880
man's night-vision camera and that plugs

00:04:35,940 --> 00:04:42,030
right in the Raspberry Pi 30 bucks a

00:04:38,880 --> 00:04:43,940
couple of metric bolts it's a couple

00:04:42,030 --> 00:04:48,750
bucks the hardware store if $5

00:04:43,940 --> 00:04:51,030
stepper motor a resistor a buzzer and a

00:04:48,750 --> 00:04:52,530
little chip called an L in 2803 which is

00:04:51,030 --> 00:04:54,270
like a stepper driver motor all it does

00:04:52,530 --> 00:04:55,290
is takes little signals that have not a

00:04:54,270 --> 00:04:57,420
lot of current make them into big

00:04:55,290 --> 00:05:00,630
signals with lots of current and a

00:04:57,420 --> 00:05:02,670
switch and then a lot of really awesome

00:05:00,630 --> 00:05:04,320
3d printed parts so I had a friend from

00:05:02,670 --> 00:05:06,780
the internet help me do some mechanical

00:05:04,320 --> 00:05:08,760
design and we basically started building

00:05:06,780 --> 00:05:10,590
the bits of a Skinner box so there's a

00:05:08,760 --> 00:05:12,560
food hopper and the food hopper

00:05:10,590 --> 00:05:14,670
basically distributes treats the rats

00:05:12,560 --> 00:05:17,130
there's some mounting brackets to hold

00:05:14,670 --> 00:05:18,870
it up to a wreckage there's a lever and

00:05:17,130 --> 00:05:20,790
then just a simple mount for the camera

00:05:18,870 --> 00:05:23,670
and this all goes inside a Tupperware I

00:05:20,790 --> 00:05:25,560
took out of my kitchen

00:05:23,670 --> 00:05:27,360
and so inside the Tupperware is where I

00:05:25,560 --> 00:05:30,750
mounted all the hardware so the hardware

00:05:27,360 --> 00:05:32,430
is super easy it's just a Raspberry Pi a

00:05:30,750 --> 00:05:34,860
breakout board and this controller

00:05:32,430 --> 00:05:38,550
circuit couple resistors switching a

00:05:34,860 --> 00:05:40,290
buzzer and so then you mount it all and

00:05:38,550 --> 00:05:41,670
you deploy it so you have to deploy

00:05:40,290 --> 00:05:43,890
hardware just like you deploy software

00:05:41,670 --> 00:05:46,290
so I deployed it with my pets and wanted

00:05:43,890 --> 00:05:47,640
to see how they would do so once the

00:05:46,290 --> 00:05:50,310
hardware was built it's like well how do

00:05:47,640 --> 00:05:52,170
you build the software to do so you

00:05:50,310 --> 00:05:53,730
interact with it right and not just

00:05:52,170 --> 00:05:55,440
interact with it but interact with it

00:05:53,730 --> 00:05:57,240
over save yourself mode or over a web

00:05:55,440 --> 00:06:00,300
browser versus just like running a

00:05:57,240 --> 00:06:02,250
simple script so first you kind of back

00:06:00,300 --> 00:06:04,380
out what you want to do so what did I

00:06:02,250 --> 00:06:07,230
want to do I wanted to display the

00:06:04,380 --> 00:06:10,230
images on the camera record the activity

00:06:07,230 --> 00:06:11,970
over time be able to remote control to

00:06:10,230 --> 00:06:14,430
feed the pets that's a big big seller

00:06:11,970 --> 00:06:16,770
right and then I also wanted to run and

00:06:14,430 --> 00:06:19,440
record actual science experiments where

00:06:16,770 --> 00:06:21,060
I buzz the buzzer the rat responds it

00:06:19,440 --> 00:06:23,220
pushes a lever and I record whether it

00:06:21,060 --> 00:06:25,610
did so correctly or not and finally I

00:06:23,220 --> 00:06:27,840
wanted to display all of those results

00:06:25,610 --> 00:06:28,260
you know in something I could digest so

00:06:27,840 --> 00:06:32,070
like it

00:06:28,260 --> 00:06:33,270
digest of the results so to do all this

00:06:32,070 --> 00:06:34,950
I kind of went through and figured out

00:06:33,270 --> 00:06:36,720
what tools from the pytho ecosystem I

00:06:34,950 --> 00:06:40,650
could use so to run the motor and the

00:06:36,720 --> 00:06:42,800
buzzer and the switch that's simply GPIO

00:06:40,650 --> 00:06:46,080
library from Raspberry Pi and a thread

00:06:42,800 --> 00:06:48,810
to run the camera I just used a library

00:06:46,080 --> 00:06:51,360
called PI camera which is just a simple

00:06:48,810 --> 00:06:53,010
Raspberry Pi camera interface OpenCV

00:06:51,360 --> 00:06:55,620
which is a computer vision library and

00:06:53,010 --> 00:06:59,220
numpy which is a numerical processing

00:06:55,620 --> 00:07:01,910
library to run the experiments I have

00:06:59,220 --> 00:07:04,230
numpy which just does some analysis

00:07:01,910 --> 00:07:08,400
 which stores all the data in

00:07:04,230 --> 00:07:10,530
matplotlib you can build on a

00:07:08,400 --> 00:07:12,570
Raspberry Pi I'm just gonna warn you it

00:07:10,530 --> 00:07:15,090
takes like 12 hours and it doesn't

00:07:12,570 --> 00:07:17,670
really work well but it does run and

00:07:15,090 --> 00:07:20,820
then finally to display everything I

00:07:17,670 --> 00:07:22,380
just used a simple Python bottle app and

00:07:20,820 --> 00:07:27,000
some bootstrap and a couple of

00:07:22,380 --> 00:07:28,800
WebSockets so roughly how does this all

00:07:27,000 --> 00:07:29,940
work so from an integer perspective how

00:07:28,800 --> 00:07:32,250
do you put all these parts together and

00:07:29,940 --> 00:07:33,930
make them interesting so you start off

00:07:32,250 --> 00:07:36,390
by building the hardware interface which

00:07:33,930 --> 00:07:38,040
is just as a thread running and you you

00:07:36,390 --> 00:07:40,200
create a couple methods to get into that

00:07:38,040 --> 00:07:40,920
thread and say hey run the motor enough

00:07:40,200 --> 00:07:45,360
to feed the rats

00:07:40,920 --> 00:07:46,890
he has a switchman pressed similarly you

00:07:45,360 --> 00:07:48,540
build a camera interface and its entire

00:07:46,890 --> 00:07:50,940
job is to run inter thread grab an image

00:07:48,540 --> 00:07:53,130
once a second and then I actually wanted

00:07:50,940 --> 00:07:54,540
to monitor activity so I dip the image

00:07:53,130 --> 00:07:57,240
like I do something was processing where

00:07:54,540 --> 00:07:59,190
I dip it from the last image I received

00:07:57,240 --> 00:08:01,890
and see if I can measure the activity of

00:07:59,190 --> 00:08:06,240
the rats and then once you have that

00:08:01,890 --> 00:08:08,010
done you just do a a little tiny science

00:08:06,240 --> 00:08:10,770
thread right so this shut this thread

00:08:08,010 --> 00:08:11,820
job is to look at watch say okay how

00:08:10,770 --> 00:08:13,710
long has it been since I ran an

00:08:11,820 --> 00:08:15,210
experiment and it will look at its watch

00:08:13,710 --> 00:08:17,370
and say okay I need to run experiment

00:08:15,210 --> 00:08:18,810
every 30 minutes now it's time so run

00:08:17,370 --> 00:08:21,600
the buzzer wait for the rat to respond

00:08:18,810 --> 00:08:23,310
and if it doesn't respond in 30 seconds

00:08:21,600 --> 00:08:26,340
well the experiments have failed and

00:08:23,310 --> 00:08:28,050
then to tie all this together and

00:08:26,340 --> 00:08:30,000
remember what happened you create a data

00:08:28,050 --> 00:08:32,099
interface to sort of render your results

00:08:30,000 --> 00:08:34,020
and save your data and finally you just

00:08:32,099 --> 00:08:37,790
sort of load this all into a bottle web

00:08:34,020 --> 00:08:40,740
server set up some callbacks and it runs

00:08:37,790 --> 00:08:43,560
okay so you guys want to see

00:08:40,740 --> 00:08:51,600
say yes you you have seen code today

00:08:43,560 --> 00:08:53,340
right people just don't talk alright so

00:08:51,600 --> 00:08:54,510
this is the main web server and so I

00:08:53,340 --> 00:08:56,100
don't want to go on too long because I

00:08:54,510 --> 00:08:58,730
want to show you guys and actually demo

00:08:56,100 --> 00:09:00,960
the hardware so build some anticipation

00:08:58,730 --> 00:09:02,790
so this is really really simple I just

00:09:00,960 --> 00:09:04,200
import the four modules I just talked

00:09:02,790 --> 00:09:05,610
about and I'll go over those all in

00:09:04,200 --> 00:09:08,520
detail but I'll give you the overview

00:09:05,610 --> 00:09:10,710
here there's a simple JSON encoder for a

00:09:08,520 --> 00:09:13,220
message scheme that passes stuff over a

00:09:10,710 --> 00:09:15,570
WebSocket to the front end of the page

00:09:13,220 --> 00:09:17,820
then I have a pile of callbacks right

00:09:15,570 --> 00:09:21,060
and so these are basically they're to

00:09:17,820 --> 00:09:24,630
run and say whenever an event happens in

00:09:21,060 --> 00:09:28,590
Hardware call up and toss this either to

00:09:24,630 --> 00:09:32,430
a logging interface on or push it

00:09:28,590 --> 00:09:34,350
to the WebSocket once that's done or

00:09:32,430 --> 00:09:37,860
with these in place I basically create

00:09:34,350 --> 00:09:39,570
my objects my for objects and for all

00:09:37,860 --> 00:09:41,730
this project I use a really really

00:09:39,570 --> 00:09:44,460
simple callback mechanism so this is

00:09:41,730 --> 00:09:47,310
just lists of first-class functions

00:09:44,460 --> 00:09:50,130
being passed back and forth so I say

00:09:47,310 --> 00:09:52,110
like hey here's my protocol runner the

00:09:50,130 --> 00:09:53,850
run the experiments here's where you log

00:09:52,110 --> 00:09:55,710
your data whenever you get something

00:09:53,850 --> 00:09:57,540
that you want to save like say a past

00:09:55,710 --> 00:10:00,030
event or a fail event or a start

00:09:57,540 --> 00:10:01,740
experiment of nth send it there I also

00:10:00,030 --> 00:10:04,380
tell it hey whenever you get a pass

00:10:01,740 --> 00:10:07,380
event say call up the front end and send

00:10:04,380 --> 00:10:08,880
it there and so I go through and I set

00:10:07,380 --> 00:10:11,760
all these events right so past

00:10:08,880 --> 00:10:14,010
experiment failed experiment similarly

00:10:11,760 --> 00:10:16,550
from the hardware I say whenever a

00:10:14,010 --> 00:10:19,980
button is pressed whenever it comes up

00:10:16,550 --> 00:10:22,860
notify the front end log the data to the

00:10:19,980 --> 00:10:24,720
database and also tell the experiment

00:10:22,860 --> 00:10:25,980
runner that hey a button went up so if

00:10:24,720 --> 00:10:28,920
you're actually trying to look at

00:10:25,980 --> 00:10:30,570
experiment we remember that and so

00:10:28,920 --> 00:10:32,760
there's analogies for the buzzer and the

00:10:30,570 --> 00:10:35,160
feeder and similarly for the camera on

00:10:32,760 --> 00:10:37,590
motion so whenever the camera motion

00:10:35,160 --> 00:10:39,920
gets a motion update every once a second

00:10:37,590 --> 00:10:42,090
send that to database and update stuff

00:10:39,920 --> 00:10:46,440
then you basically tell everything to

00:10:42,090 --> 00:10:48,300
start start all your threads and so you

00:10:46,440 --> 00:10:51,000
go through and it's after this it's a

00:10:48,300 --> 00:10:52,110
standard bottle web server so set your

00:10:51,000 --> 00:10:52,810
routes for your images and your

00:10:52,110 --> 00:10:54,760
JavaScript

00:10:52,810 --> 00:10:57,130
and your CSS I use bootstrap in this

00:10:54,760 --> 00:11:01,060
case just to make it look pretty set up

00:10:57,130 --> 00:11:02,680
your air pages now to actually get the

00:11:01,060 --> 00:11:04,060
events to happen so one of the things

00:11:02,680 --> 00:11:06,160
you want right is to have a controller

00:11:04,060 --> 00:11:07,780
so you want to be able to click Buzz and

00:11:06,160 --> 00:11:10,450
have the Box Buzz or you want to cook

00:11:07,780 --> 00:11:13,060
Buzz in your web page and have the Box

00:11:10,450 --> 00:11:15,400
Buzz so all I did is I set up a route so

00:11:13,060 --> 00:11:17,080
whenever you post to this route you just

00:11:15,400 --> 00:11:19,690
call the hardware interface and say buzz

00:11:17,080 --> 00:11:21,640
and I there's a little trick on how I do

00:11:19,690 --> 00:11:24,520
that so it works well

00:11:21,640 --> 00:11:26,710
similarly on running the feeder you just

00:11:24,520 --> 00:11:30,430
call this you post to this feed event

00:11:26,710 --> 00:11:31,810
and it'll dispense a food picture the

00:11:30,430 --> 00:11:34,660
same thing and a lot of the stuff after

00:11:31,810 --> 00:11:37,180
this is pretty cut-and-dry like this is

00:11:34,660 --> 00:11:39,250
am ID to generate activity so this

00:11:37,180 --> 00:11:41,350
generates your plot right that says this

00:11:39,250 --> 00:11:43,480
is the rats activity over day just

00:11:41,350 --> 00:11:46,840
simply call that method it'll save a

00:11:43,480 --> 00:11:47,980
file to your image path which is great

00:11:46,840 --> 00:11:52,200
but it's a quick and dirty way to get

00:11:47,980 --> 00:11:56,230
this done and render the bottle template

00:11:52,200 --> 00:11:57,840
similar again for a pass/fail we have

00:11:56,230 --> 00:12:02,050
some table stuff that generates

00:11:57,840 --> 00:12:04,860
statistics on every day's run and a

00:12:02,050 --> 00:12:08,050
couple more just sort of fixed pages

00:12:04,860 --> 00:12:12,820
here's a little bit of meat so this is

00:12:08,050 --> 00:12:14,770
gonna be right here where we actually

00:12:12,820 --> 00:12:18,370
set up the WebSocket to push data to the

00:12:14,770 --> 00:12:19,870
web front-end finally and this is just a

00:12:18,370 --> 00:12:21,670
little bit of a helpful thing is that

00:12:19,870 --> 00:12:23,620
you set up a signal handler so when you

00:12:21,670 --> 00:12:24,610
close down the web server you shut down

00:12:23,620 --> 00:12:26,890
all the hardware threads

00:12:24,610 --> 00:12:28,480
their set and daemon mode which should

00:12:26,890 --> 00:12:30,400
kill it but it's usually good to help

00:12:28,480 --> 00:12:35,200
shut them down in a nice clean orderly

00:12:30,400 --> 00:12:40,150
way so then we can also look at the

00:12:35,200 --> 00:12:44,110
hardware interface so that looks like

00:12:40,150 --> 00:12:47,440
this and this is super simple wrote it

00:12:44,110 --> 00:12:49,120
in an afternoon basically what you do is

00:12:47,440 --> 00:12:51,880
you initialize a thread like I said you

00:12:49,120 --> 00:12:54,460
said it as a daemon so that it dies when

00:12:51,880 --> 00:12:55,900
you kill the web server then you have

00:12:54,460 --> 00:12:58,360
some pins to set so on a Raspberry Pi

00:12:55,900 --> 00:13:01,300
you have I think half a dozen or so

00:12:58,360 --> 00:13:03,880
maybe eight GPIO pins so you set the

00:13:01,300 --> 00:13:05,480
GPIO pins to coils that are going to be

00:13:03,880 --> 00:13:08,630
used to run your

00:13:05,480 --> 00:13:10,220
stepper motor or the core or the pin

00:13:08,630 --> 00:13:13,660
that will be used to run your buzzer or

00:13:10,220 --> 00:13:16,190
the pin that is connected to your switch

00:13:13,660 --> 00:13:19,070
so I set all those up with the output

00:13:16,190 --> 00:13:21,589
set all the ones that are output the

00:13:19,070 --> 00:13:24,230
buzzer and the stepper motor and I set

00:13:21,589 --> 00:13:26,510
the input for the the trigger switch and

00:13:24,230 --> 00:13:28,910
then I set some internal state variables

00:13:26,510 --> 00:13:32,690
so the way this is all gonna work is

00:13:28,910 --> 00:13:35,930
that whenever you want to dispense food

00:13:32,690 --> 00:13:38,000
or run the buzzer you set a flag and so

00:13:35,930 --> 00:13:40,490
when you set the flag inside of a main

00:13:38,000 --> 00:13:42,980
loop inside the thread you just say you

00:13:40,490 --> 00:13:45,889
countdown so you do it we know roughly

00:13:42,980 --> 00:13:49,040
this is not completely time accurate but

00:13:45,889 --> 00:13:50,899
you say roughly 5 times a second I want

00:13:49,040 --> 00:13:53,630
you to count down and keep running the

00:13:50,899 --> 00:13:56,990
buzzer so you start you start at 5 you

00:13:53,630 --> 00:13:59,420
say okay I'm writing the buzzer 5 4 3 2

00:13:56,990 --> 00:14:03,380
1 and then you turn it off and that's

00:13:59,420 --> 00:14:05,269
unless your threat along with that I

00:14:03,380 --> 00:14:09,290
also set up some some callbacks

00:14:05,269 --> 00:14:11,839
so these callbacks are there to notify

00:14:09,290 --> 00:14:16,399
other either modules or the main app

00:14:11,839 --> 00:14:18,649
when an event occurs so like whenever I

00:14:16,399 --> 00:14:19,880
dispense food somebody can set the

00:14:18,649 --> 00:14:22,100
callback we should just hand me a

00:14:19,880 --> 00:14:24,410
function they say set this callback here

00:14:22,100 --> 00:14:25,910
and whenever I dispense food I'll call

00:14:24,410 --> 00:14:27,470
that function and say okay I just went

00:14:25,910 --> 00:14:31,130
to it and as long as everyone does this

00:14:27,470 --> 00:14:33,319
relatively quickly it's not a big deal

00:14:31,130 --> 00:14:35,420
so you can see that here so when I call

00:14:33,319 --> 00:14:37,519
dispense I basically check if the flag

00:14:35,420 --> 00:14:41,329
for dispensing is up if it's not well

00:14:37,519 --> 00:14:42,860
cool so we reset our step counter we

00:14:41,329 --> 00:14:46,160
bring the flag up and then we just call

00:14:42,860 --> 00:14:49,519
all these callback mechanisms similar

00:14:46,160 --> 00:14:51,829
for buzzing same deal this is where we

00:14:49,519 --> 00:14:53,959
set the callbacks and this is where we

00:14:51,829 --> 00:14:56,410
actually set the stepper motor so

00:14:53,959 --> 00:14:59,449
stepper motors are two set of they're

00:14:56,410 --> 00:15:01,430
basically two pairs of coils and you

00:14:59,449 --> 00:15:02,959
sort of alternate how the coils are

00:15:01,430 --> 00:15:04,730
running and that causes it to step so

00:15:02,959 --> 00:15:05,760
you need four pins and you can build a

00:15:04,730 --> 00:15:09,389
stepper motor driver

00:15:05,760 --> 00:15:11,880
so here I have a basically a single step

00:15:09,389 --> 00:15:14,160
where I say it's at this pen higher than

00:15:11,880 --> 00:15:15,899
this pin hide then this pin hi it was go

00:15:14,160 --> 00:15:20,310
through the amplifier and they step the

00:15:15,899 --> 00:15:22,529
motor and I have a nice interface for

00:15:20,310 --> 00:15:25,500
the buttons and finally a shutdown

00:15:22,529 --> 00:15:28,949
mechanism just that sets all the Pens

00:15:25,500 --> 00:15:31,440
high if this is just a good point for

00:15:28,949 --> 00:15:34,139
building stuff if you're using say a

00:15:31,440 --> 00:15:35,970
Raspberry Pi or some other interface to

00:15:34,139 --> 00:15:37,889
build Hardware one of the greatest

00:15:35,970 --> 00:15:40,980
things you can do is run the ipython

00:15:37,889 --> 00:15:42,750
notebook and bring all your GPIO pins in

00:15:40,980 --> 00:15:44,490
because then you can interactively bring

00:15:42,750 --> 00:15:45,899
them up and down really really easy and

00:15:44,490 --> 00:15:47,850
as your you know if you have a circuit

00:15:45,899 --> 00:15:49,440
or a breadboard or something and you're

00:15:47,850 --> 00:15:50,790
trying to debug what's going on you can

00:15:49,440 --> 00:15:52,199
bring them up and bring them down and

00:15:50,790 --> 00:15:54,089
actually you know put your multimeter on

00:15:52,199 --> 00:15:58,860
there and say oh yes it came up okay so

00:15:54,089 --> 00:16:01,589
it's working so then you just run

00:15:58,860 --> 00:16:03,329
everything and this basically checks to

00:16:01,589 --> 00:16:05,339
see if the flags are up does the the

00:16:03,329 --> 00:16:09,810
bookkeeping and sends it on its merry

00:16:05,339 --> 00:16:11,279
way and finally there's the bit of logic

00:16:09,810 --> 00:16:12,720
for the buttons so button presses are

00:16:11,279 --> 00:16:14,819
actually really easy you're just looking

00:16:12,720 --> 00:16:16,110
for a higher low signal but usually you

00:16:14,819 --> 00:16:17,490
don't want to detect higher low because

00:16:16,110 --> 00:16:19,470
those are fixed what you actually want

00:16:17,490 --> 00:16:23,130
to detect is the derivative right going

00:16:19,470 --> 00:16:24,899
from 0 to 1 or 1 to 0 so I basically

00:16:23,130 --> 00:16:26,579
have a little method here that looks for

00:16:24,899 --> 00:16:29,940
that and then does a callback to the

00:16:26,579 --> 00:16:31,949
button ok

00:16:29,940 --> 00:16:34,889
so let's now take a look at the camera

00:16:31,949 --> 00:16:37,889
interface so the camera interfaces is

00:16:34,889 --> 00:16:42,180
again super simple same sort of idea

00:16:37,889 --> 00:16:43,649
running the thread in this case I'm not

00:16:42,180 --> 00:16:45,990
really gonna ask it for anything it's

00:16:43,649 --> 00:16:49,470
just gonna go run and take a photo once

00:16:45,990 --> 00:16:50,699
a second and every time it actually gets

00:16:49,470 --> 00:16:52,850
a photo it's just gonna save it to a

00:16:50,699 --> 00:16:55,529
regular directory in the webserver and

00:16:52,850 --> 00:16:57,420
it's also going to calculate the motion

00:16:55,529 --> 00:16:59,310
between the previous frame so this

00:16:57,420 --> 00:17:01,920
calculation right here this calculate

00:16:59,310 --> 00:17:05,640
motion basically what you do is you say

00:17:01,920 --> 00:17:07,140
ok here's the last image I took you have

00:17:05,640 --> 00:17:08,760
to initialize it but you say here's the

00:17:07,140 --> 00:17:11,100
last image I took and here's the image I

00:17:08,760 --> 00:17:12,660
just took and you you literally take

00:17:11,100 --> 00:17:14,400
every single pixel and you subtract from

00:17:12,660 --> 00:17:16,890
one or another and if things are moving

00:17:14,400 --> 00:17:17,790
if activity is going on that difference

00:17:16,890 --> 00:17:19,440
will be big

00:17:17,790 --> 00:17:21,839
if nothing's going on if you have the

00:17:19,440 --> 00:17:23,730
same image and if you have the same

00:17:21,839 --> 00:17:26,040
image twice the difference is gonna be

00:17:23,730 --> 00:17:28,140
really really small so all I do is I

00:17:26,040 --> 00:17:29,550
convert both the images the previous one

00:17:28,140 --> 00:17:32,940
and the current one to greyscale

00:17:29,550 --> 00:17:34,620
subtract them from one another take the

00:17:32,940 --> 00:17:36,600
absolute value and then take the mean of

00:17:34,620 --> 00:17:37,380
that and that's my correlate promotion

00:17:36,600 --> 00:17:39,870
or B here

00:17:37,380 --> 00:17:42,300
movement I also do a little bit of

00:17:39,870 --> 00:17:44,730
temporal filtering because if you do

00:17:42,300 --> 00:17:46,680
that really it's a really rough

00:17:44,730 --> 00:17:48,630
mechanism so if you average this out

00:17:46,680 --> 00:17:52,740
over a couple frames you get much better

00:17:48,630 --> 00:17:54,210
results getting images off the Raspberry

00:17:52,740 --> 00:17:56,880
Pi camera is a little bit different than

00:17:54,210 --> 00:18:00,090
say a standard USB camera what you do is

00:17:56,880 --> 00:18:02,640
you create a stream and you basically

00:18:00,090 --> 00:18:05,100
pipe the PNG out of the Raspberry Pi

00:18:02,640 --> 00:18:07,890
into the stream and then you can use a

00:18:05,100 --> 00:18:11,400
numpy to decode that stream and push it

00:18:07,890 --> 00:18:13,230
into a data buffer and then you can then

00:18:11,400 --> 00:18:15,270
use that data buffer inside of the

00:18:13,230 --> 00:18:19,110
opencv to bindings to either save the

00:18:15,270 --> 00:18:21,300
image do some processing or whatever you

00:18:19,110 --> 00:18:22,860
need to do so once you have basically

00:18:21,300 --> 00:18:24,960
these two functions get image and

00:18:22,860 --> 00:18:27,180
calculate motion the the main thread

00:18:24,960 --> 00:18:29,700
live becomes super easy get an image

00:18:27,180 --> 00:18:33,000
calculate motion wait a second get image

00:18:29,700 --> 00:18:33,860
calculate motion wait a second so how

00:18:33,000 --> 00:18:40,650
are we doing on time

00:18:33,860 --> 00:18:43,110
good all right so thanks so here is

00:18:40,650 --> 00:18:44,820
where the science happens and this is

00:18:43,110 --> 00:18:47,970
I'm gonna go through this really quick

00:18:44,820 --> 00:18:51,120
so same loop primitive same sets of

00:18:47,970 --> 00:18:52,440
callbacks it's the only interesting

00:18:51,120 --> 00:18:55,320
thing here is that I pass in the

00:18:52,440 --> 00:18:57,540
hardware to so the hardware basically

00:18:55,320 --> 00:18:59,700
are the hardware interface and so all

00:18:57,540 --> 00:19:00,540
this thing does is it basically looks

00:18:59,700 --> 00:19:02,400
for two things

00:19:00,540 --> 00:19:04,910
it looks at its watch every few minutes

00:19:02,400 --> 00:19:09,030
it does this time dude says this happen

00:19:04,910 --> 00:19:10,410
run it or it's been this long run

00:19:09,030 --> 00:19:12,090
another experiment or it hasn't been

00:19:10,410 --> 00:19:13,740
this long so run another dobra in

00:19:12,090 --> 00:19:15,660
another experiment and if the

00:19:13,740 --> 00:19:17,700
experiments running and the rep pushes a

00:19:15,660 --> 00:19:22,080
leaver then stop the experiment and

00:19:17,700 --> 00:19:24,680
record the results and finally we have a

00:19:22,080 --> 00:19:26,820
data interface and this is super simple

00:19:24,680 --> 00:19:28,370
it's just a connection to a

00:19:26,820 --> 00:19:31,470
database

00:19:28,370 --> 00:19:33,690
and a bunch of really simple functions

00:19:31,470 --> 00:19:35,250
that shove data into whenever you

00:19:33,690 --> 00:19:37,170
call them so it's just and this is

00:19:35,250 --> 00:19:39,750
extremely primitive but it's just log

00:19:37,170 --> 00:19:42,480
and experiment log a buzz and record a

00:19:39,750 --> 00:19:44,640
timestamp to display the data you

00:19:42,480 --> 00:19:46,500
basically go and ask hey has it

00:19:44,640 --> 00:19:49,410
been give me all the data for 24 hours

00:19:46,500 --> 00:19:51,720
that is just buzz presses or it or is

00:19:49,410 --> 00:19:55,710
button presses or just buzzes or

00:19:51,720 --> 00:19:57,840
experiments and so you generate some of

00:19:55,710 --> 00:20:00,690
this for the user you just go and query

00:19:57,840 --> 00:20:03,930
all that data and use matplotlib to

00:20:00,690 --> 00:20:05,790
render it so just really simple that

00:20:03,930 --> 00:20:07,200
popper in rendering no if you really

00:20:05,790 --> 00:20:08,460
want to be fancy you should do this in

00:20:07,200 --> 00:20:10,320
JavaScript but this is a Python

00:20:08,460 --> 00:20:10,950
conference so let's do it in Python with

00:20:10,320 --> 00:20:12,810
matplotlib

00:20:10,950 --> 00:20:15,030
the other thing you should know about

00:20:12,810 --> 00:20:16,550
using that lib is you have to set the

00:20:15,030 --> 00:20:18,840
backend

00:20:16,550 --> 00:20:20,250
map up live actually usually wants to

00:20:18,840 --> 00:20:21,780
run err in interactive mode so you have

00:20:20,250 --> 00:20:25,950
to change this flag to get it to run

00:20:21,780 --> 00:20:27,480
correctly okay so is that enough code

00:20:25,950 --> 00:20:30,030
are you guys done with that you want to

00:20:27,480 --> 00:20:35,810
see some demo and have some fun so

00:20:30,030 --> 00:20:39,030
where's my rat my human rat assistant

00:20:35,810 --> 00:20:41,910
all right so I'm gonna basically run

00:20:39,030 --> 00:20:50,190
some code here this is on the PI so I've

00:20:41,910 --> 00:20:51,930
asked a station all right so we're gonna

00:20:50,190 --> 00:20:53,520
pretend that it's a regular day at my

00:20:51,930 --> 00:20:55,440
house and I've left to go to work and

00:20:53,520 --> 00:20:57,300
I'm sitting around and why don't we grab

00:20:55,440 --> 00:21:02,850
a rat and just kind of have it have it

00:20:57,300 --> 00:21:07,640
run a little bit it should run around in

00:21:02,850 --> 00:21:07,640
the cake and so we will go to

00:21:10,370 --> 00:21:15,600
all right so we are now connected to the

00:21:13,560 --> 00:21:18,660
web server on the Raspberry Pi with the

00:21:15,600 --> 00:21:25,110
rat rat will you push that lever right

00:21:18,660 --> 00:21:26,490
there why thank you so then a button

00:21:25,110 --> 00:21:29,700
pressing event came up through the web

00:21:26,490 --> 00:21:31,950
socket and maybe we should would you

00:21:29,700 --> 00:21:38,730
guys like to take a look at this rat and

00:21:31,950 --> 00:21:49,020
see what's going on we can just do that

00:21:38,730 --> 00:21:50,820
rat I wish oh you're buzzing an

00:21:49,020 --> 00:21:52,190
experiments running will you hit the

00:21:50,820 --> 00:21:55,550
lever for me

00:21:52,190 --> 00:22:01,170
excellent there we go

00:21:55,550 --> 00:22:04,170
so live feed of the rat we can also look

00:22:01,170 --> 00:22:05,700
at your activity so caveat here I just

00:22:04,170 --> 00:22:07,740
killed the database so this is not

00:22:05,700 --> 00:22:09,540
all day it's just Unix the past couple

00:22:07,740 --> 00:22:12,570
minutes so this takes a few seconds to

00:22:09,540 --> 00:22:14,460
render but so this can this is just the

00:22:12,570 --> 00:22:15,810
activity of the rat over the past two

00:22:14,460 --> 00:22:18,990
minutes well it's been in here we can

00:22:15,810 --> 00:22:20,490
actually revisit this in a second we can

00:22:18,990 --> 00:22:22,500
also look at the experimental results

00:22:20,490 --> 00:22:26,390
it'll buzz again here in a second so

00:22:22,500 --> 00:22:26,390
hold on and have a fail

00:22:30,320 --> 00:22:44,460
okay so you press the leaver once you

00:22:33,210 --> 00:22:49,169
know what once it runs what's me um well

00:22:44,460 --> 00:22:53,730
I guess in the meantime I will buzz it

00:22:49,169 --> 00:22:55,549
manually I don't know how far back can

00:22:53,730 --> 00:22:59,220
you hear that

00:22:55,549 --> 00:23:01,559
excellent it's that annoying I I had to

00:22:59,220 --> 00:23:10,980
move it out of my bedroom so I can also

00:23:01,559 --> 00:23:12,419
feed you Oh feet thank you yes and we

00:23:10,980 --> 00:23:14,279
can we can actually see how you've been

00:23:12,419 --> 00:23:16,139
doing over the course of the day so we

00:23:14,279 --> 00:23:18,509
can see how many times you've done

00:23:16,139 --> 00:23:21,379
correct presses and a number of times

00:23:18,509 --> 00:23:23,940
you'd bad bad presses so today you fail

00:23:21,379 --> 00:23:25,710
zero times but you have passed twice the

00:23:23,940 --> 00:23:28,289
total number of experiments is two

00:23:25,710 --> 00:23:29,850
hundred percent correct number of times

00:23:28,289 --> 00:23:31,529
we've dispensed food the number of times

00:23:29,850 --> 00:23:34,289
you press that button the number of

00:23:31,529 --> 00:23:38,960
times the buzzer has buzzed and I can

00:23:34,289 --> 00:23:38,960
also see the correlate for your activity

00:23:44,980 --> 00:23:59,280
will you be my IRB and so that's about

00:23:53,710 --> 00:24:03,520
it you guys have any any questions or oh

00:23:59,280 --> 00:24:05,800
so this is all open software I've

00:24:03,520 --> 00:24:08,680
actually put all the hardware - up on

00:24:05,800 --> 00:24:13,950
Thingiverse so it is all free go fork it

00:24:08,680 --> 00:24:13,950
fix it mess with it build something else

00:24:14,310 --> 00:24:25,420
okay Thank You Catherine so if you have

00:24:23,140 --> 00:24:33,160
any questions might hear it up front so

00:24:25,420 --> 00:24:34,510
please come and ask your question is

00:24:33,160 --> 00:24:42,460
there something about the raspberry PI's

00:24:34,510 --> 00:24:44,590
specifically that you started to use oh

00:24:42,460 --> 00:24:46,090
you you certainly could it's just a it's

00:24:44,590 --> 00:24:47,920
a cheap piece of hardware it's a 30

00:24:46,090 --> 00:24:49,090
dollar piece of her you could use a

00:24:47,920 --> 00:24:52,240
BeagleBone you could run off a

00:24:49,090 --> 00:24:53,290
minnowboard you could do any of that you

00:24:52,240 --> 00:24:54,970
could run it on a web server and it

00:24:53,290 --> 00:24:56,860
would be blazingly fast and wonderful

00:24:54,970 --> 00:24:57,400
but i don't want to leave one next to

00:24:56,860 --> 00:24:59,380
wreckage

00:24:57,400 --> 00:25:03,270
any other question yeah I'd like to

00:24:59,380 --> 00:25:03,270
squeak with you about the design okay

00:25:04,620 --> 00:25:09,940
you really don't need MongoDB what you

00:25:08,170 --> 00:25:12,550
really don't need MongoDB you just need

00:25:09,940 --> 00:25:14,230
to write text files right you're keeping

00:25:12,550 --> 00:25:16,420
the picture as a separate object right

00:25:14,230 --> 00:25:18,970
yes it's not like you're dumping the

00:25:16,420 --> 00:25:20,680
picture into MongoDB oh certainly

00:25:18,970 --> 00:25:23,260
there's like it's completely lean

00:25:20,680 --> 00:25:25,210
there's no there's no reason really than

00:25:23,260 --> 00:25:27,340
to other show some principles of hey I'm

00:25:25,210 --> 00:25:28,570
pushing this to a database I mean yes

00:25:27,340 --> 00:25:30,580
you could get away with a text file and

00:25:28,570 --> 00:25:32,350
it'd be probably better easier more

00:25:30,580 --> 00:25:33,760
robust in a lot of other stuff but I

00:25:32,350 --> 00:25:37,540
wanted to write some code that was

00:25:33,760 --> 00:25:38,680
actually a little bit something that you

00:25:37,540 --> 00:25:41,460
could build upon to do something

00:25:38,680 --> 00:25:41,460
slightly more complex

00:25:43,580 --> 00:25:52,159
I I think that was my question - sorry

00:25:48,669 --> 00:25:53,419
but so tell us more about how do you to

00:25:52,159 --> 00:25:55,850
put Mangal in there

00:25:53,419 --> 00:25:57,259
excuse me how did you put mom go on to

00:25:55,850 --> 00:25:59,149
it you said it was hard oh there's

00:25:57,259 --> 00:26:00,559
there's actually a couple tutorials and

00:25:59,149 --> 00:26:03,499
it was pretty straightforward you'll

00:26:00,559 --> 00:26:07,279
want to start out with a large SD card

00:26:03,499 --> 00:26:09,619
and it will fail you will not keep this

00:26:07,279 --> 00:26:11,269
data a long time or you need to

00:26:09,619 --> 00:26:12,980
replicate it across something else but

00:26:11,269 --> 00:26:14,570
you know on a day to day basis if you're

00:26:12,980 --> 00:26:17,029
replicating once a day it seems really

00:26:14,570 --> 00:26:18,499
robust once it's running but it seems

00:26:17,029 --> 00:26:24,590
like when the pie comes down and comes

00:26:18,499 --> 00:26:28,940
back up there seems to be issues so it's

00:26:24,590 --> 00:26:30,679
all up on github and so if you should be

00:26:28,940 --> 00:26:35,419
on my blog here fairly quickly but it's

00:26:30,679 --> 00:26:37,879
all and get him the results of the

00:26:35,419 --> 00:26:39,109
experiment so we're still having my

00:26:37,879 --> 00:26:40,369
friend who's doing the mechanical

00:26:39,109 --> 00:26:41,960
engineering we're still having problems

00:26:40,369 --> 00:26:43,460
with this thing here and these are

00:26:41,960 --> 00:26:44,899
actually really hard the food hopper is

00:26:43,460 --> 00:26:47,659
really hard to build I've been feeding

00:26:44,899 --> 00:26:50,659
him kicks because they're like he had

00:26:47,659 --> 00:26:52,759
tested or at approved or you know you

00:26:50,659 --> 00:26:54,470
there's actually proprietary science

00:26:52,759 --> 00:26:56,450
blend sugar pellets that they normally

00:26:54,470 --> 00:26:58,340
feed rats and those aside from the Box

00:26:56,450 --> 00:27:01,909
being $10,000 those might as well be

00:26:58,340 --> 00:27:03,440
$10,000 for sugar pellets it's but

00:27:01,909 --> 00:27:05,330
getting that food to move through is

00:27:03,440 --> 00:27:06,259
actually mechanical engineering is a lot

00:27:05,330 --> 00:27:07,879
harder than you would think it would be

00:27:06,259 --> 00:27:09,639
just when you're running off a 3d

00:27:07,879 --> 00:27:11,840
printer and trying to do stuff to you

00:27:09,639 --> 00:27:17,509
but we're hopefully have some shaping

00:27:11,840 --> 00:27:18,440
behavior here soon a cool project one

00:27:17,509 --> 00:27:20,600
thing you might want to think about

00:27:18,440 --> 00:27:24,109
instead of rabbit just to keep it easy

00:27:20,600 --> 00:27:25,850
as iBM has an mqtt cueing system which

00:27:24,109 --> 00:27:28,009
is made for Raspberry Pi nor do we

00:27:25,850 --> 00:27:31,730
notice and stuff like that this multiple

00:27:28,009 --> 00:27:33,019
cueing system yeah actually uh queuing

00:27:31,730 --> 00:27:34,309
systems were doing hardware it so

00:27:33,019 --> 00:27:36,259
Raspberry Pi is definitely not my

00:27:34,309 --> 00:27:38,269
preferred platform actually been using

00:27:36,259 --> 00:27:41,570
Ross a lot for doing bigger real work

00:27:38,269 --> 00:27:44,840
projects and I I can't talk enough about

00:27:41,570 --> 00:27:47,029
how awesome Ross is Ross's robot

00:27:44,840 --> 00:27:48,320
operating system if you guys have not

00:27:47,029 --> 00:27:53,740
played with it go play with it because

00:27:48,320 --> 00:27:53,740
it is awesome its Rossum actually

00:27:55,929 --> 00:28:02,080
any other questions you guys want to go

00:27:58,130 --> 00:28:02,080

YouTube URL: https://www.youtube.com/watch?v=grMfIoDgn9M


