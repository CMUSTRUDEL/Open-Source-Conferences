Title: Mele Sax-Barnett: Python + Geographic Data = BFFs - PyCon 2014
Publication date: 2014-04-24
Playlist: PyCon 2014
Description: 
	Speaker: Mele Sax-Barnett

Python is so well-suited for processing and managing geographic data, I think they'll be best friends forever. In this talk, I'll introduce some of the best Python libraries to use with your geodata, and show you how treating GeoJSON like a Python dictionary can make cleaning and validating your data a breeze. I'll also discuss examples of using Python to add custom functionality to GIS software.

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:00,000 --> 00:00:05,100
so this would be last talk for the day

00:00:02,310 --> 00:00:07,620
it's going to be a talk called Python

00:00:05,100 --> 00:00:10,349
plus Geographic data equals two BFFs

00:00:07,620 --> 00:00:18,570
please give a hand for melee sex Ben

00:00:10,349 --> 00:00:21,330
Barnett there is the fabulous bitly link

00:00:18,570 --> 00:00:22,800
to my talk including everything that I'm

00:00:21,330 --> 00:00:25,230
not going to have time to say in

00:00:22,800 --> 00:00:27,000
markdown format so there's that for your

00:00:25,230 --> 00:00:29,820
reference thank you for hanging out till

00:00:27,000 --> 00:00:32,940
the end of the day I'm really excited to

00:00:29,820 --> 00:00:35,040
share this with you so why do I think

00:00:32,940 --> 00:00:38,969
Python and geographic data are going to

00:00:35,040 --> 00:00:41,780
be best friends forever well I love maps

00:00:38,969 --> 00:00:44,760
but making them can be a real pain and

00:00:41,780 --> 00:00:46,350
the reason is well cartographers don't

00:00:44,760 --> 00:00:51,840
just trace stuff anymore you have to

00:00:46,350 --> 00:00:55,110
deal with the data and that can be

00:00:51,840 --> 00:00:56,969
really really really awful it is usually

00:00:55,110 --> 00:00:58,530
not in the format that you need there's

00:00:56,969 --> 00:01:01,590
like a hundred different formats at

00:00:58,530 --> 00:01:03,390
least several obvious errors everyone

00:01:01,590 --> 00:01:06,869
with some bad data has created their own

00:01:03,390 --> 00:01:10,170
null island at some point split up into

00:01:06,869 --> 00:01:14,939
50 different files and is definitely in

00:01:10,170 --> 00:01:17,430
the wrong protection so um sometimes you

00:01:14,939 --> 00:01:18,960
even have no metadata so you don't know

00:01:17,430 --> 00:01:21,960
what projection it's in what encoding

00:01:18,960 --> 00:01:23,729
it's in it can be pretty awful so you

00:01:21,960 --> 00:01:27,150
can point and click all day in your

00:01:23,729 --> 00:01:30,360
out-of-the-box GIS software or you can

00:01:27,150 --> 00:01:33,869
bring Python into the mix so a little

00:01:30,360 --> 00:01:35,970
bit about vector geo data before we get

00:01:33,869 --> 00:01:38,460
started it can be made up of one or

00:01:35,970 --> 00:01:40,860
several files it will have a coordinate

00:01:38,460 --> 00:01:44,369
system or projection associated with it

00:01:40,860 --> 00:01:47,670
to show how the round earth ends up on a

00:01:44,369 --> 00:01:49,860
flat surface it can be made up of one or

00:01:47,670 --> 00:01:53,100
several layers of data each of which has

00:01:49,860 --> 00:01:56,070
one or more features and each feature

00:01:53,100 --> 00:01:58,439
has to have geometries and that includes

00:01:56,070 --> 00:02:01,770
both a type so whether it's a point line

00:01:58,439 --> 00:02:04,469
polygon and of course its coordinates

00:02:01,770 --> 00:02:06,149
themselves and then each feature also

00:02:04,469 --> 00:02:07,860
has various other attributes and

00:02:06,149 --> 00:02:09,890
properties these vary widely depending

00:02:07,860 --> 00:02:12,180
on the data

00:02:09,890 --> 00:02:14,670
so now we're going to talk about some of

00:02:12,180 --> 00:02:17,250
my favorite Python packages to use to

00:02:14,670 --> 00:02:20,790
deal with this problem fiona is the

00:02:17,250 --> 00:02:24,840
first one that I really like and what

00:02:20,790 --> 00:02:27,270
can be really awesome when you're making

00:02:24,840 --> 00:02:29,130
a map there's great Free data all over

00:02:27,270 --> 00:02:34,250
the place natural earth is a great place

00:02:29,130 --> 00:02:37,170
to get um simplified world data

00:02:34,250 --> 00:02:39,390
countries nice nice Carta graphically

00:02:37,170 --> 00:02:41,190
lined up and a lot of interesting

00:02:39,390 --> 00:02:43,560
attributes but it's usually not in a

00:02:41,190 --> 00:02:47,550
format that I like so let's say we want

00:02:43,560 --> 00:02:49,260
to change it to geo JSON so after you

00:02:47,550 --> 00:02:52,050
download your data you just create a

00:02:49,260 --> 00:02:55,380
really short script and with Fiona you

00:02:52,050 --> 00:02:57,480
can open it up it automatically figures

00:02:55,380 --> 00:02:59,400
out what it needs in the open part but

00:02:57,480 --> 00:03:02,100
then when you open up your output file

00:02:59,400 --> 00:03:03,810
you need to tell it okay which

00:03:02,100 --> 00:03:06,000
coordinate system am I going to use

00:03:03,810 --> 00:03:09,390
what's the schema so that includes the

00:03:06,000 --> 00:03:11,370
geometry and the attributes and what do

00:03:09,390 --> 00:03:13,290
you want to turn it into so here we're

00:03:11,370 --> 00:03:15,470
saying we just want to use the same as

00:03:13,290 --> 00:03:18,240
the input for the coordinate system and

00:03:15,470 --> 00:03:21,540
the schema and but we want to change it

00:03:18,240 --> 00:03:23,280
to geo JSON and then for each feature in

00:03:21,540 --> 00:03:25,560
that original file we go through it one

00:03:23,280 --> 00:03:29,130
by one and say okay as long as it's not

00:03:25,560 --> 00:03:30,840
Antarctica let's keep it um and you can

00:03:29,130 --> 00:03:32,520
also filter by bounding box so if you

00:03:30,840 --> 00:03:34,170
want the eastern hemisphere western

00:03:32,520 --> 00:03:36,180
hemisphere a much smaller bigger than

00:03:34,170 --> 00:03:41,940
that you can do that really easily with

00:03:36,180 --> 00:03:45,950
Fiona as well yay data another great

00:03:41,940 --> 00:03:48,420
Python package is pipe Raj so say you um

00:03:45,950 --> 00:03:50,820
projections can be a problem that last

00:03:48,420 --> 00:03:53,459
one actually not super pretty especially

00:03:50,820 --> 00:03:57,750
at the top and the bottom of the of the

00:03:53,459 --> 00:04:02,070
poles there um if you're tracing great

00:03:57,750 --> 00:04:03,720
circle routes if you are making a map of

00:04:02,070 --> 00:04:06,180
the poles you definitely need to use an

00:04:03,720 --> 00:04:09,510
appropriate projection pipe raj works

00:04:06,180 --> 00:04:12,270
really well with Fiona to do that so in

00:04:09,510 --> 00:04:15,900
this example we are going to go ahead

00:04:12,270 --> 00:04:18,720
and pull in the schema from the original

00:04:15,900 --> 00:04:21,200
file but then take the coordinate system

00:04:18,720 --> 00:04:22,620
and put it in a projection object and

00:04:21,200 --> 00:04:25,860
then

00:04:22,620 --> 00:04:27,930
after we open it up the new one and say

00:04:25,860 --> 00:04:30,870
okay I want to get I want it to be in

00:04:27,930 --> 00:04:32,729
projection to 163 that's a code and epsg

00:04:30,870 --> 00:04:34,350
code you can look these out these or

00:04:32,729 --> 00:04:37,500
well-known codes for all kinds of

00:04:34,350 --> 00:04:40,470
different projections and then get it

00:04:37,500 --> 00:04:42,660
ready to go by putting the output

00:04:40,470 --> 00:04:46,639
projection in a projection object as

00:04:42,660 --> 00:04:49,169
well this is where it gets kind of weird

00:04:46,639 --> 00:04:51,720
natural earth data some of it is

00:04:49,169 --> 00:04:53,880
polygons some of its multi polygons so

00:04:51,720 --> 00:04:56,460
multi polygon is kind of a higher level

00:04:53,880 --> 00:04:59,460
it can contain a number of polygons so

00:04:56,460 --> 00:05:00,720
in either of those cases you need to

00:04:59,460 --> 00:05:02,669
treat it a little differently because

00:05:00,720 --> 00:05:05,580
the coordinates themselves will live one

00:05:02,669 --> 00:05:08,729
level deeper so depending on whether

00:05:05,580 --> 00:05:11,880
it's a polygon or multi polygon you use

00:05:08,729 --> 00:05:14,070
the you you kind of stack it up a little

00:05:11,880 --> 00:05:16,949
differently but in either case you use

00:05:14,070 --> 00:05:19,050
transform which is from PI proj to

00:05:16,949 --> 00:05:21,120
change every single coordinate one by

00:05:19,050 --> 00:05:25,050
one from the input projection to the

00:05:21,120 --> 00:05:28,789
output production and then you can get

00:05:25,050 --> 00:05:32,430
something like this it's pretty awesome

00:05:28,789 --> 00:05:34,710
one last Fiona example so I am a real

00:05:32,430 --> 00:05:37,320
quantified self geek guide like where

00:05:34,710 --> 00:05:39,870
Fitbit I track on my bike rides I've

00:05:37,320 --> 00:05:41,789
never bothered to visualize them all in

00:05:39,870 --> 00:05:44,729
a map before which is kind of silly

00:05:41,789 --> 00:05:46,020
because I make maps all the time one of

00:05:44,729 --> 00:05:47,789
the biggest problems is that I have all

00:05:46,020 --> 00:05:49,770
these separate tracks and they download

00:05:47,789 --> 00:05:51,060
them all separately and I just want to

00:05:49,770 --> 00:05:53,550
do it once and I want to do it over and

00:05:51,060 --> 00:05:55,889
over and over again so this example

00:05:53,550 --> 00:05:57,599
takes a whole bunch of GP extracts puts

00:05:55,889 --> 00:06:01,979
them in a single file makes it a lot

00:05:57,599 --> 00:06:05,610
easier to Matt um so here what I do is I

00:06:01,979 --> 00:06:07,860
grab one example file and grab the

00:06:05,610 --> 00:06:10,979
coordinate system and the schema from

00:06:07,860 --> 00:06:13,410
that and then I set up your normal kind

00:06:10,979 --> 00:06:17,010
of directory walking operation pull

00:06:13,410 --> 00:06:20,990
everything that ends and GPX and read

00:06:17,010 --> 00:06:23,550
through it and add it to this final file

00:06:20,990 --> 00:06:25,080
so then I'm able to make a visualization

00:06:23,550 --> 00:06:27,030
like this where i find out that i really

00:06:25,080 --> 00:06:32,250
don't do much but go back and forth to

00:06:27,030 --> 00:06:33,750
work all the time um but that's ok but

00:06:32,250 --> 00:06:35,669
before we go any further let's talk a

00:06:33,750 --> 00:06:36,480
little bit about geo json so why do I

00:06:35,669 --> 00:06:39,390
keep turning every

00:06:36,480 --> 00:06:42,030
thing in geo JSON it is JSON for geo

00:06:39,390 --> 00:06:44,130
data it's super easy to use for web

00:06:42,030 --> 00:06:46,470
mapping web mapping libraries generally

00:06:44,130 --> 00:06:49,110
love it and it's really easy to parse

00:06:46,470 --> 00:06:54,810
with Python because really it's just a

00:06:49,110 --> 00:06:56,130
dictionary so here's kind of a weird

00:06:54,810 --> 00:06:58,740
example I have to talk about

00:06:56,130 --> 00:07:01,710
openstreetmap because I'm on the board

00:06:58,740 --> 00:07:05,220
and I love it um openstreetmap is great

00:07:01,710 --> 00:07:06,690
because it's a lot of free data crowd

00:07:05,220 --> 00:07:08,220
source that you can get from all over

00:07:06,690 --> 00:07:11,400
the world it can be really hard to find

00:07:08,220 --> 00:07:14,030
this kind of data anywhere else um but

00:07:11,400 --> 00:07:17,520
the data structure is really weird and

00:07:14,030 --> 00:07:19,170
you get everything all at once so let's

00:07:17,520 --> 00:07:21,000
say I'm planning a trip to Japan which I

00:07:19,170 --> 00:07:23,790
usually am planning one whether i'm

00:07:21,000 --> 00:07:25,620
going or not um and i want to check out

00:07:23,790 --> 00:07:28,170
all the buildings in this area that I'm

00:07:25,620 --> 00:07:30,210
interested in you can just download them

00:07:28,170 --> 00:07:31,800
from the OpenStreetMap website but

00:07:30,210 --> 00:07:33,450
you're going to get everything you're

00:07:31,800 --> 00:07:34,470
going to get all all of it you're going

00:07:33,450 --> 00:07:37,290
to get the streets you're going to get

00:07:34,470 --> 00:07:38,640
the state you know the country of Japan

00:07:37,290 --> 00:07:40,140
you're going to get all of this by

00:07:38,640 --> 00:07:43,920
selecting this area it's kind of crazy

00:07:40,140 --> 00:07:46,980
um there are a number of ways to convert

00:07:43,920 --> 00:07:48,840
it over to geo JSON um but really it's

00:07:46,980 --> 00:07:50,850
just XML data so you can dig into it

00:07:48,840 --> 00:07:55,440
with your favorite XML parser if you

00:07:50,850 --> 00:07:57,420
like as well and then process it so the

00:07:55,440 --> 00:08:00,690
reason why I loved you JSON and why I

00:07:57,420 --> 00:08:02,430
picked this example is you can just play

00:08:00,690 --> 00:08:03,780
with the data and keep exactly what you

00:08:02,430 --> 00:08:06,410
want what you don't want you don't have

00:08:03,780 --> 00:08:09,690
to use any libraries at all really um

00:08:06,410 --> 00:08:12,810
you just load it up by using JSON loads

00:08:09,690 --> 00:08:14,790
um here we're creating a feature

00:08:12,810 --> 00:08:16,590
collection in dictionary that is going

00:08:14,790 --> 00:08:18,900
to be valid geo JSON when it's all done

00:08:16,590 --> 00:08:23,040
and then we are going to loop through

00:08:18,900 --> 00:08:25,260
all of features in that data set check

00:08:23,040 --> 00:08:27,990
all of the tags in it so the way open

00:08:25,260 --> 00:08:31,620
street map represents its attributes is

00:08:27,990 --> 00:08:33,900
by having tags for everything so a

00:08:31,620 --> 00:08:36,180
building with a name is going to have a

00:08:33,900 --> 00:08:39,330
building tag with some value and a name

00:08:36,180 --> 00:08:40,890
tag of some value so I decided that

00:08:39,330 --> 00:08:43,260
that's what I wanted so I check if

00:08:40,890 --> 00:08:46,220
there's building in there if there's

00:08:43,260 --> 00:08:49,790
name in there let's go ahead and move on

00:08:46,220 --> 00:08:53,300
so then we're going to grab

00:08:49,790 --> 00:08:56,500
i D pull the name out of the tags grab

00:08:53,300 --> 00:09:01,040
all the other information we need and

00:08:56,500 --> 00:09:03,740
then create um with those variables the

00:09:01,040 --> 00:09:05,300
final geo JSON version that we want so

00:09:03,740 --> 00:09:06,500
we're going to put the geometry where it

00:09:05,300 --> 00:09:09,350
belongs the coordinates where they

00:09:06,500 --> 00:09:11,570
belong keep name outside of tags and

00:09:09,350 --> 00:09:14,480
keep all the other random tags in this

00:09:11,570 --> 00:09:17,120
separate tag dictionary and go ahead and

00:09:14,480 --> 00:09:18,980
add it to our final file and all you

00:09:17,120 --> 00:09:23,060
need to do to create that final geo JSON

00:09:18,980 --> 00:09:25,370
file then is do a JSON dumps then you

00:09:23,060 --> 00:09:27,920
can get cool stuff like this and these

00:09:25,370 --> 00:09:29,090
are all the buildings or an Shinjuku but

00:09:27,920 --> 00:09:30,800
I should have gotten the ramen shops

00:09:29,090 --> 00:09:34,700
instead that's what I really care about

00:09:30,800 --> 00:09:37,730
you can also do some more operation with

00:09:34,700 --> 00:09:39,860
CSV or XML data to all you need to do is

00:09:37,730 --> 00:09:43,010
put it in a dictionary and then put your

00:09:39,860 --> 00:09:44,870
geo JSON together so I do this with all

00:09:43,010 --> 00:09:48,500
kinds of data sets from all over the

00:09:44,870 --> 00:09:51,170
place and I'm able to make it so at the

00:09:48,500 --> 00:09:53,120
end I have only the features in the

00:09:51,170 --> 00:09:54,650
attributes that I want I don't have a

00:09:53,120 --> 00:09:57,410
bunch of other stuff that I don't that I

00:09:54,650 --> 00:09:59,120
don't need if you have a lot of data you

00:09:57,410 --> 00:10:01,220
can switch to reading and writing line

00:09:59,120 --> 00:10:03,620
by line by keeping kind of dictionaries

00:10:01,220 --> 00:10:05,480
one line at a time and I've done this

00:10:03,620 --> 00:10:07,580
with the whole openstreetmap planet

00:10:05,480 --> 00:10:10,340
before several gigs it was probably not

00:10:07,580 --> 00:10:13,970
a good idea but it worked that's great

00:10:10,340 --> 00:10:16,010
and because it's just a dictionary it's

00:10:13,970 --> 00:10:21,070
really easy to create tests for the data

00:10:16,010 --> 00:10:23,900
you can check for required keys so say

00:10:21,070 --> 00:10:25,400
your database that's going to keep the

00:10:23,900 --> 00:10:27,080
state and use it for something is

00:10:25,400 --> 00:10:28,730
expecting certain keys to be there it

00:10:27,080 --> 00:10:31,040
needs to have a boundary type string

00:10:28,730 --> 00:10:35,090
that represents the data source you can

00:10:31,040 --> 00:10:36,950
check that each keys um value is what

00:10:35,090 --> 00:10:39,110
you expect it to be you can check

00:10:36,950 --> 00:10:40,970
against the list of known values so say

00:10:39,110 --> 00:10:43,880
they're only a certain number of trusted

00:10:40,970 --> 00:10:45,560
sources or your filters are expecting

00:10:43,880 --> 00:10:48,110
certain values you can check and make

00:10:45,560 --> 00:10:49,640
sure that's all set ahead of time you

00:10:48,110 --> 00:10:52,730
can check the structure you know how

00:10:49,640 --> 00:10:54,620
deep do the dictionaries go and check to

00:10:52,730 --> 00:10:58,610
make sure the geometry valid so you

00:10:54,620 --> 00:11:00,200
don't end up with null island so this is

00:10:58,610 --> 00:11:02,480
really important if your system is

00:11:00,200 --> 00:11:03,630
expecting a very very particular format

00:11:02,480 --> 00:11:06,990
while your data comes

00:11:03,630 --> 00:11:09,000
a variety of sources so at UA we get

00:11:06,990 --> 00:11:12,270
data from all over the place we get map

00:11:09,000 --> 00:11:13,650
onyx data we get OpenStreetMap data we

00:11:12,270 --> 00:11:16,410
get a bunch of random stuff that

00:11:13,650 --> 00:11:18,900
customers give us and it all needs to be

00:11:16,410 --> 00:11:22,170
in exactly the right format every single

00:11:18,900 --> 00:11:24,780
feature or production incident and after

00:11:22,170 --> 00:11:26,700
I did that once i was never again no

00:11:24,780 --> 00:11:29,880
more prediction incidents i created this

00:11:26,700 --> 00:11:31,320
set of set of tests really easily just

00:11:29,880 --> 00:11:35,640
by going through the dictionaries and

00:11:31,320 --> 00:11:38,250
checking for the things that matter also

00:11:35,640 --> 00:11:40,230
on you can use spate shapely for spatial

00:11:38,250 --> 00:11:43,500
analysis and data manipulation shapely

00:11:40,230 --> 00:11:46,170
is a super powerful lit little library

00:11:43,500 --> 00:11:48,090
um there are tons of examples in the

00:11:46,170 --> 00:11:49,980
manual i made this wall of text just to

00:11:48,090 --> 00:11:53,490
kind of show you how many things it can

00:11:49,980 --> 00:11:56,070
do how powerful it is um you can

00:11:53,490 --> 00:12:00,810
construct geometry simplify it create

00:11:56,070 --> 00:12:03,510
buffers merge Union check distances

00:12:00,810 --> 00:12:05,850
between things get symmetrical

00:12:03,510 --> 00:12:07,590
difference see if one object contains

00:12:05,850 --> 00:12:10,590
the other object on and on and on and on

00:12:07,590 --> 00:12:12,420
it even works with 3d data and numpy

00:12:10,590 --> 00:12:17,220
there's all kinds of stuff that you can

00:12:12,420 --> 00:12:19,800
do with it so remember those GPX tracks

00:12:17,220 --> 00:12:21,990
that we put together earlier well some

00:12:19,800 --> 00:12:23,970
of them it turns out I didn't show them

00:12:21,990 --> 00:12:24,960
but I have a bunch in California I don't

00:12:23,970 --> 00:12:26,550
want to deal with them I don't want to

00:12:24,960 --> 00:12:28,080
deal with my flight to California either

00:12:26,550 --> 00:12:29,820
I want just the ones that are in

00:12:28,080 --> 00:12:33,780
Portland I don't want to go through them

00:12:29,820 --> 00:12:37,610
one by one by hand so what I did first

00:12:33,780 --> 00:12:42,870
you just get your city as G or JSON and

00:12:37,610 --> 00:12:46,470
I read Portland on in and put it in a

00:12:42,870 --> 00:12:49,440
shapely shape object its geometry that

00:12:46,470 --> 00:12:52,320
is and the same thing for each of the

00:12:49,440 --> 00:12:54,510
tracks in that original file I read them

00:12:52,320 --> 00:12:57,660
into shapely shape objects and then I

00:12:54,510 --> 00:13:01,110
was able to do this really easy line

00:12:57,660 --> 00:13:04,250
here check if the geometry of that track

00:13:01,110 --> 00:13:07,530
is within the convex hull of Portland

00:13:04,250 --> 00:13:08,730
yeah we're going to keep it I use the

00:13:07,530 --> 00:13:10,170
convex hull because there's a

00:13:08,730 --> 00:13:12,300
little-known very small city called

00:13:10,170 --> 00:13:15,420
maywood park that was formed when nobody

00:13:12,300 --> 00:13:17,160
wanted a freeway built through it um and

00:13:15,420 --> 00:13:19,680
my tracks would have been excluded

00:13:17,160 --> 00:13:21,629
that passed through there so i got the

00:13:19,680 --> 00:13:23,129
convex hull which is the smallest

00:13:21,629 --> 00:13:28,350
polygon that would contain everything

00:13:23,129 --> 00:13:31,290
within it then you just write it out so

00:13:28,350 --> 00:13:35,160
it kept all the stuff in pink not the

00:13:31,290 --> 00:13:38,819
plane tracks in in beige there that I

00:13:35,160 --> 00:13:40,920
didn't want so that's great um another

00:13:38,819 --> 00:13:44,459
great option for geoprocessing without

00:13:40,920 --> 00:13:48,689
GIS software is post chess and that is

00:13:44,459 --> 00:13:51,449
an extension to postgres as you many of

00:13:48,689 --> 00:13:53,759
you probably know and already love you

00:13:51,449 --> 00:13:56,209
can talk to a psycho pg2 it works really

00:13:53,759 --> 00:13:58,230
well and you can run spatial operations

00:13:56,209 --> 00:14:04,079
directly with that and it works

00:13:58,230 --> 00:14:09,959
surprisingly well finally GIS software

00:14:04,079 --> 00:14:13,079
loves python arcgis on esri i think is

00:14:09,959 --> 00:14:16,170
actually sponsored PyCon has a really

00:14:13,079 --> 00:14:19,199
cool Python community section set up

00:14:16,170 --> 00:14:21,360
they really like using our Python for

00:14:19,199 --> 00:14:26,149
scripting they set up their own arc PI

00:14:21,360 --> 00:14:28,319
module on that does all the tasks within

00:14:26,149 --> 00:14:33,329
ArcGIS that you can script them together

00:14:28,319 --> 00:14:35,970
create tools and add-ins with them q

00:14:33,329 --> 00:14:40,170
jess is kind of the closest open-source

00:14:35,970 --> 00:14:42,689
alternative to arcgis and it has it

00:14:40,170 --> 00:14:46,380
similarly it has a python console it

00:14:42,689 --> 00:14:51,600
also has a huge asst module that you can

00:14:46,380 --> 00:14:54,449
import from outside of outside of cages

00:14:51,600 --> 00:14:58,199
so you can have a third-party app that

00:14:54,449 --> 00:15:00,779
brings in the QGIS UI or or

00:14:58,199 --> 00:15:02,550
geoprocessing tools without actually

00:15:00,779 --> 00:15:06,089
having to run QGIS and that's cool um

00:15:02,550 --> 00:15:09,540
and development to you just is written

00:15:06,089 --> 00:15:13,439
in C and in Python so you can contribute

00:15:09,540 --> 00:15:16,709
to the development of it directly there

00:15:13,439 --> 00:15:19,170
are more than 250 plugins already for

00:15:16,709 --> 00:15:21,509
huges and they're all written in Python

00:15:19,170 --> 00:15:24,120
you can do all kinds of really really

00:15:21,509 --> 00:15:27,509
interesting stuff this one is a 3d

00:15:24,120 --> 00:15:29,400
export um helps you make a 3d map in a

00:15:27,509 --> 00:15:32,100
web browser with WebGL

00:15:29,400 --> 00:15:33,990
so actually I talked way too fast and I

00:15:32,100 --> 00:15:35,760
think I'm over or I think I'm way under

00:15:33,990 --> 00:15:39,500
my time so i think i'm just gonna open

00:15:35,760 --> 00:15:41,820
up for questions at this point thanks oh

00:15:39,500 --> 00:15:53,220
there's a there's a microphone over

00:15:41,820 --> 00:15:56,490
there if you need things all right thank

00:15:53,220 --> 00:15:58,650
you very much I'd like to ask if you

00:15:56,490 --> 00:16:01,980
would mind putting your first slide back

00:15:58,650 --> 00:16:06,780
on so let me copy your website yes sorry

00:16:01,980 --> 00:16:12,000
sorry there we go hi thanks again for

00:16:06,780 --> 00:16:14,670
the talk I've used 200 gr and GDL and

00:16:12,000 --> 00:16:16,140
I'm not familiar with Fiona can you talk

00:16:14,670 --> 00:16:19,410
a little bit about the differences and

00:16:16,140 --> 00:16:23,100
yeah so oh um Fiona actually uses

00:16:19,410 --> 00:16:26,670
ogr in cheadle or Google people say it

00:16:23,100 --> 00:16:28,230
either way um it's just a pythonic kind

00:16:26,670 --> 00:16:29,520
of interface to them so you do still

00:16:28,230 --> 00:16:31,950
have to install them and you are

00:16:29,520 --> 00:16:39,390
actually using them just in a pythonic

00:16:31,950 --> 00:16:44,360
way all right um great talk thank you

00:16:39,390 --> 00:16:47,910
thanks i'm working on a project that

00:16:44,360 --> 00:16:51,090
it's ocean modeling so the results that

00:16:47,910 --> 00:16:53,610
we get have latin long data in them

00:16:51,090 --> 00:16:54,930
we've also got currents and stuff we

00:16:53,610 --> 00:16:57,300
want to work with social scientists that

00:16:54,930 --> 00:17:00,840
use GIS so we've got data in netcdf

00:16:57,300 --> 00:17:02,400
files oh god they want shapefiles okay

00:17:00,840 --> 00:17:07,589
do you have any recommendation ton I

00:17:02,400 --> 00:17:09,780
don't do that so so oh gr um what the

00:17:07,589 --> 00:17:14,010
the guy in front of you brought up can

00:17:09,780 --> 00:17:18,810
do almost any translation Fiona works

00:17:14,010 --> 00:17:20,850
with a lot of the OSHA are um sorry now

00:17:18,810 --> 00:17:24,300
and the words escaping me a lot of those

00:17:20,850 --> 00:17:26,520
your drivers um Fiona works with them

00:17:24,300 --> 00:17:28,560
but it doesn't support all of them I I'm

00:17:26,520 --> 00:17:33,180
not super familiar with the format that

00:17:28,560 --> 00:17:35,580
you netcdf fur yeah I I haven't used it

00:17:33,180 --> 00:17:37,830
before so I don't have any particular

00:17:35,580 --> 00:17:41,720
tips for that but i think i go to my

00:17:37,830 --> 00:17:44,480
go-to is 0 gr witch Fiona uses

00:17:41,720 --> 00:17:46,370
um but doesn't always support all the

00:17:44,480 --> 00:17:48,679
drivers of and that's just really easy

00:17:46,370 --> 00:17:49,820
command line I mean not really easy for

00:17:48,679 --> 00:17:52,010
people that are afraid of the command

00:17:49,820 --> 00:17:53,510
line it's definitely not easy but once

00:17:52,010 --> 00:17:55,549
you kind of practice with it you'll

00:17:53,510 --> 00:18:01,190
trust it um it usually does the right

00:17:55,549 --> 00:18:03,200
thing okay thanks uh-huh hi I'm not sure

00:18:01,190 --> 00:18:05,659
if you address this but um I was just

00:18:03,200 --> 00:18:08,990
curious about the the biking data like

00:18:05,659 --> 00:18:11,870
what format was that in and also what

00:18:08,990 --> 00:18:14,110
did you use to visualize the yeah yeah

00:18:11,870 --> 00:18:16,669
totally I can talk about that I skipped

00:18:14,110 --> 00:18:18,350
past 60 I was like I'm not gonna have

00:18:16,669 --> 00:18:22,070
enough time and then I had a ton of time

00:18:18,350 --> 00:18:24,230
um so this is actually not biking data

00:18:22,070 --> 00:18:26,030
this is all of my data from walking all

00:18:24,230 --> 00:18:28,669
around and traveling around Portland I

00:18:26,030 --> 00:18:30,710
use an app called moves and it basically

00:18:28,669 --> 00:18:35,990
tracks me all the time and this is like

00:18:30,710 --> 00:18:38,270
a few months of moves data and so moves

00:18:35,990 --> 00:18:41,780
luckily has a pretty friendly API and it

00:18:38,270 --> 00:18:43,640
plugs into a lot of tools there's a tool

00:18:41,780 --> 00:18:45,350
called moves export that I used to

00:18:43,640 --> 00:18:46,940
download a week of data at a time

00:18:45,350 --> 00:18:48,580
because I didn't want to deal with

00:18:46,940 --> 00:18:53,600
having to download them all individually

00:18:48,580 --> 00:18:55,429
so once I had every week as GPX data so

00:18:53,600 --> 00:19:00,500
i was able to download them as GPX data

00:18:55,429 --> 00:19:03,440
um Fiona can read there are actually

00:19:00,500 --> 00:19:05,419
several layers in GPX data tracks or

00:19:03,440 --> 00:19:07,460
just one of them so you actually have to

00:19:05,419 --> 00:19:10,159
tell Fiona ok read the tracks layer

00:19:07,460 --> 00:19:13,039
don't read the waypoints and I think

00:19:10,159 --> 00:19:16,039
there are a few others um but once you

00:19:13,039 --> 00:19:19,820
have that and it's all thrown together

00:19:16,039 --> 00:19:22,789
so this is done with tile mill which is

00:19:19,820 --> 00:19:24,020
a neat I don't it's not I don't know if

00:19:22,789 --> 00:19:25,640
it's open source i think it's open

00:19:24,020 --> 00:19:28,549
source let's put up a company called

00:19:25,640 --> 00:19:30,440
matte box and it's on top of their tiles

00:19:28,549 --> 00:19:32,960
here and you use axe something that's

00:19:30,440 --> 00:19:35,780
actually called cardo CSS to style it up

00:19:32,960 --> 00:19:38,270
and do some composite operation so i did

00:19:35,780 --> 00:19:39,950
a like a multiplying composite operation

00:19:38,270 --> 00:19:41,900
so it would be darker the places that i

00:19:39,950 --> 00:19:43,940
want more if you want to know more about

00:19:41,900 --> 00:19:46,460
tile me like and i think you can just

00:19:43,940 --> 00:19:47,630
google tile mill or google map box and

00:19:46,460 --> 00:19:50,330
it's really easy to get started with

00:19:47,630 --> 00:19:53,440
them i'm i'm a big fan of matte box ok

00:19:50,330 --> 00:19:53,440
thank you yeah

00:19:55,690 --> 00:20:03,610
anything else thanks guys thanks for

00:20:00,769 --> 00:20:03,610
coming out to the talk

00:21:16,610 --> 00:21:18,670

YouTube URL: https://www.youtube.com/watch?v=dIzicVIwL8Q


