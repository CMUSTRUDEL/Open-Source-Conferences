Title: Selena Deckelmann: Sane schema migrations with Alembic and SQLAlchemy - PyCon 2014
Publication date: 2014-04-24
Playlist: PyCon 2014
Description: 
	Speaker: Selena Deckelmann

Working with developers on schema migrations is a perennial challenge for DBAs and developers. Devs tend to like a "set it and forget it" tool. This talk discusses the strategies used to move from a pure SQL and shell migration system to using SQLAlchemy and alembic for maximum DBA and developer happiness.

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:14,160 --> 00:00:19,360
good afternoon everyone it's my honor to

00:00:17,200 --> 00:00:22,030
introduce Selina Declan she's a major

00:00:19,360 --> 00:00:24,400
contributor to post grad school and she

00:00:22,030 --> 00:00:26,380
founded pi ladies PDX open source bridge

00:00:24,400 --> 00:00:29,050
post grads open do you still keep

00:00:26,380 --> 00:00:30,699
chickens she still keeps chickens so

00:00:29,050 --> 00:00:31,779
let's give her a big warm welcome she's

00:00:30,699 --> 00:00:38,829
gonna be talking about Alembic it's

00:00:31,779 --> 00:00:39,609
equally yeah there's one that's even

00:00:38,829 --> 00:00:43,749
alive right now

00:00:39,609 --> 00:00:48,030
it's good sorry little dead chicken

00:00:43,749 --> 00:00:48,030
humor to start off this talk okay so um

00:00:48,239 --> 00:00:53,639
so this talk is about database

00:00:50,769 --> 00:00:56,829
migrations and being sane about it I

00:00:53,639 --> 00:01:01,629
uploaded the slides already so you can

00:00:56,829 --> 00:01:03,999
check them out there and I wanted to

00:01:01,629 --> 00:01:08,590
start out by saying thank you and I'm

00:01:03,999 --> 00:01:11,800
sorry - Mike Baer who who's the primary

00:01:08,590 --> 00:01:13,840
author of Alembic and he's here today I

00:01:11,800 --> 00:01:17,020
think he's speaking after after me so I

00:01:13,840 --> 00:01:21,250
don't think he's here right now and so

00:01:17,020 --> 00:01:23,170
for work I work for Mozilla and I work

00:01:21,250 --> 00:01:26,700
on this tool called socorro which is an

00:01:23,170 --> 00:01:29,440
open-source crash management and

00:01:26,700 --> 00:01:33,790
business intelligence system that we run

00:01:29,440 --> 00:01:36,580
to analyze primarily Firefox crashes you

00:01:33,790 --> 00:01:38,890
can check out our source code at that

00:01:36,580 --> 00:01:41,170
URL and you can also see our production

00:01:38,890 --> 00:01:43,570
site that's running and we use Alembic

00:01:41,170 --> 00:01:46,270
for all of our migrations and while I

00:01:43,570 --> 00:01:48,070
have been at PyCon actually my

00:01:46,270 --> 00:01:51,820
co-workers have been running migrations

00:01:48,070 --> 00:01:52,320
all on their own which is amazing and

00:01:51,820 --> 00:01:56,110
awesome

00:01:52,320 --> 00:02:00,159
so as you might imagine from that

00:01:56,110 --> 00:02:04,080
introduction we use Postgres so most of

00:02:00,159 --> 00:02:04,080
these things thank you

00:02:05,220 --> 00:02:08,310
i I'm pretty sure that all this stuff

00:02:07,200 --> 00:02:09,750
that I'm going to talk about today would

00:02:08,310 --> 00:02:12,840
work with another database and I know

00:02:09,750 --> 00:02:16,800
that Mike develops quite a bit for

00:02:12,840 --> 00:02:18,570
Oracle but just to let you know that all

00:02:16,800 --> 00:02:22,770
of my experience has to do with using

00:02:18,570 --> 00:02:25,770
Alembic with Postgres so I think the

00:02:22,770 --> 00:02:30,959
first thing to note about databases is

00:02:25,770 --> 00:02:33,090
that database systems and maybe the also

00:02:30,959 --> 00:02:38,730
the people that maintain them very much

00:02:33,090 --> 00:02:41,070
resist change and this is my idea of

00:02:38,730 --> 00:02:44,280
sort of the evolution of schema change

00:02:41,070 --> 00:02:46,950
process over time you start out with the

00:02:44,280 --> 00:02:48,540
Yolo approach at the bottom there and

00:02:46,950 --> 00:02:51,270
people I don't know if you're familiar

00:02:48,540 --> 00:02:53,640
with the /ef command but that allows you

00:02:51,270 --> 00:02:55,620
to actually edit stored procedures and

00:02:53,640 --> 00:02:58,050
Postgres interactively and the PIA SQL

00:02:55,620 --> 00:03:00,270
command line so people do that in prod

00:02:58,050 --> 00:03:05,390
it's pretty awesome that's kind of on

00:03:00,270 --> 00:03:07,620
the the Precambrian evolutionary scale

00:03:05,390 --> 00:03:09,180
and then over time people figure out

00:03:07,620 --> 00:03:10,950
that maybe you know they want a little

00:03:09,180 --> 00:03:12,480
more process involved in their schema

00:03:10,950 --> 00:03:14,519
management and they start doing things

00:03:12,480 --> 00:03:17,970
like using revision control on their

00:03:14,519 --> 00:03:20,010
schemas and then eventually they do

00:03:17,970 --> 00:03:23,010
things like have rollback plans and code

00:03:20,010 --> 00:03:26,160
review and then finally finally we

00:03:23,010 --> 00:03:28,290
sometimes occasionally get two tests

00:03:26,160 --> 00:03:29,640
that are run using generator to date on

00:03:28,290 --> 00:03:33,540
our skews how do you hear you do that

00:03:29,640 --> 00:03:35,250
for intestine nice alright my people

00:03:33,540 --> 00:03:37,200
here that's great

00:03:35,250 --> 00:03:39,180
and then you might move on to testing on

00:03:37,200 --> 00:03:41,430
prod like data which is exciting and

00:03:39,180 --> 00:03:43,290
then finally you might get to testing a

00:03:41,430 --> 00:03:45,870
complete stage environment that has a

00:03:43,290 --> 00:03:48,299
copy of production data and I will say

00:03:45,870 --> 00:03:50,580
that I am one of the very fortunate few

00:03:48,299 --> 00:03:53,100
that has a complete copy of production

00:03:50,580 --> 00:03:55,980
data in my staging environment and it

00:03:53,100 --> 00:04:00,360
makes my life a lot easier so here to

00:03:55,980 --> 00:04:03,870
say it can be done it happens so what is

00:04:00,360 --> 00:04:06,360
same schema management well I think I

00:04:03,870 --> 00:04:09,720
define that as executing a schema change

00:04:06,360 --> 00:04:12,180
in a controlled and repeatable way while

00:04:09,720 --> 00:04:15,239
you're working with developers and also

00:04:12,180 --> 00:04:16,979
operations I think that this is the only

00:04:15,239 --> 00:04:17,790
way that you can get it to be controlled

00:04:16,979 --> 00:04:19,140
and repeat

00:04:17,790 --> 00:04:21,180
of all is if you have both the

00:04:19,140 --> 00:04:22,800
developers and the operations folks kind

00:04:21,180 --> 00:04:25,080
of working together you know it's the

00:04:22,800 --> 00:04:27,960
DevOps keyword but it it really you

00:04:25,080 --> 00:04:30,420
really do need people collaborating on

00:04:27,960 --> 00:04:33,480
this and the other thing that I've

00:04:30,420 --> 00:04:35,520
realized as I've had to maintain this

00:04:33,480 --> 00:04:37,590
system for the last couple years is that

00:04:35,520 --> 00:04:39,300
migration tools really are configuration

00:04:37,590 --> 00:04:41,280
management tools for your database and

00:04:39,300 --> 00:04:42,480
once that kind of clicks in the head of

00:04:41,280 --> 00:04:45,360
the people that are working on these

00:04:42,480 --> 00:04:47,430
problems in some ways it can make the

00:04:45,360 --> 00:04:49,680
conversations easier about really how

00:04:47,430 --> 00:04:52,560
this is managed why you need code review

00:04:49,680 --> 00:04:57,570
and why having downgrade scripts is

00:04:52,560 --> 00:04:58,970
actually a really good idea so the stuff

00:04:57,570 --> 00:05:01,050
we're going to talk about today

00:04:58,970 --> 00:05:04,140
migrations they're about communicating

00:05:01,050 --> 00:05:06,330
change communicating process and like I

00:05:04,140 --> 00:05:08,760
said executing stuff in a controlled and

00:05:06,330 --> 00:05:11,760
repeatable way with both developers and

00:05:08,760 --> 00:05:14,310
operations so what you came here for

00:05:11,760 --> 00:05:15,960
Alembic it's a schema migration tool

00:05:14,310 --> 00:05:17,190
that integrates with sequel alchemy and

00:05:15,960 --> 00:05:20,070
I'm gonna get into a lot of details

00:05:17,190 --> 00:05:23,310
about exactly how to use it in my talks

00:05:20,070 --> 00:05:24,630
today they might talk today so my

00:05:23,310 --> 00:05:26,400
assumptions about people's environments

00:05:24,630 --> 00:05:28,800
and why you might want to use something

00:05:26,400 --> 00:05:31,620
like olimpic specifically is that schema

00:05:28,800 --> 00:05:34,800
migrations are frequent automation of

00:05:31,620 --> 00:05:36,750
schema migration is a goal we currently

00:05:34,800 --> 00:05:39,060
have an environment that runs a

00:05:36,750 --> 00:05:42,720
downgrade and then an upgrade in Jenkins

00:05:39,060 --> 00:05:46,320
before every build of our production

00:05:42,720 --> 00:05:48,330
code that your stage environment is

00:05:46,320 --> 00:05:49,770
enough like production for testing it

00:05:48,330 --> 00:05:51,630
doesn't have to be an exact duplicate

00:05:49,770 --> 00:05:53,850
like ours but it needs to be enough it

00:05:51,630 --> 00:05:55,140
needs to have enough bad data in it or

00:05:53,850 --> 00:05:56,880
whatever else it is that you deal with

00:05:55,140 --> 00:06:00,060
in production so that it can make it

00:05:56,880 --> 00:06:02,580
real and also I assume that writing a

00:06:00,060 --> 00:06:03,930
small amount of code is okay sometimes

00:06:02,580 --> 00:06:05,400
this can be a problem if you're working

00:06:03,930 --> 00:06:08,910
in an environment where you have to hand

00:06:05,400 --> 00:06:11,760
things off wholesale to the DBAs I know

00:06:08,910 --> 00:06:14,070
that Mike wrote the Olympic with that

00:06:11,760 --> 00:06:16,260
specific situation in mind and there are

00:06:14,070 --> 00:06:17,910
tools built into it to help you with

00:06:16,260 --> 00:06:20,460
that so that you can just hand raw

00:06:17,910 --> 00:06:27,720
sequel off to a group of DBAs if that's

00:06:20,460 --> 00:06:30,180
how your environment runs yeah so but no

00:06:27,720 --> 00:06:31,200
tools perfect I'm gonna talk a little

00:06:30,180 --> 00:06:34,290
bit about some of the

00:06:31,200 --> 00:06:37,320
that I think that a limit could learn

00:06:34,290 --> 00:06:39,060
and change things about it that that

00:06:37,320 --> 00:06:41,460
could change in the future

00:06:39,060 --> 00:06:43,320
I really think ultimately DBAs should

00:06:41,460 --> 00:06:44,430
drive migration tool choice because

00:06:43,320 --> 00:06:46,710
otherwise they're probably just not

00:06:44,430 --> 00:06:48,390
going to use it and it really helps to

00:06:46,710 --> 00:06:51,930
have a tool that DBAs and developers

00:06:48,390 --> 00:06:54,390
like and I have to say our developers

00:06:51,930 --> 00:06:56,820
and DBAs both really like a limb book a

00:06:54,390 --> 00:06:58,500
lot so here's how the whole talk is

00:06:56,820 --> 00:07:00,690
organized for someone to share with you

00:06:58,500 --> 00:07:02,610
some DBA problems one specific one that

00:07:00,690 --> 00:07:04,440
I've had to talk a little bit about

00:07:02,610 --> 00:07:05,700
picking the right migration tool and

00:07:04,440 --> 00:07:09,030
while Ambika will probably work for you

00:07:05,700 --> 00:07:11,160
i'm going to go through basic commands

00:07:09,030 --> 00:07:12,810
talk about lessons learned and then

00:07:11,160 --> 00:07:15,870
finally some of the things that I think

00:07:12,810 --> 00:07:19,410
Alembic could learn from my production

00:07:15,870 --> 00:07:21,900
environment so I don't know if that's

00:07:19,410 --> 00:07:24,030
very easy to read but this is something

00:07:21,900 --> 00:07:27,300
that I had to do to my database not too

00:07:24,030 --> 00:07:29,760
long ago and to just cut to the punch

00:07:27,300 --> 00:07:33,420
line here it's kind of a scary bit of PL

00:07:29,760 --> 00:07:37,680
PG SQL I basically had to drop and

00:07:33,420 --> 00:07:41,070
replace about 200 partition constraints

00:07:37,680 --> 00:07:42,810
that had the wrong constraint on them

00:07:41,070 --> 00:07:45,570
they were just using timestamp instead

00:07:42,810 --> 00:07:47,250
of timestamp with time zone and this is

00:07:45,570 --> 00:07:49,920
kind of one of those really horrible

00:07:47,250 --> 00:07:52,860
messy DBA problems that comes up that is

00:07:49,920 --> 00:07:55,560
used as a reason or I would say an

00:07:52,860 --> 00:07:58,260
excuse about why people don't want to

00:07:55,560 --> 00:08:00,900
use migration systems this is one of

00:07:58,260 --> 00:08:03,060
those hard messy problems that that yeah

00:08:00,900 --> 00:08:07,650
that you may not want to put into your

00:08:03,060 --> 00:08:10,350
migration system but I actually used a

00:08:07,650 --> 00:08:13,530
limbic to run this and that link there

00:08:10,350 --> 00:08:16,110
is the code the actual revision file

00:08:13,530 --> 00:08:18,480
that's in our our production release

00:08:16,110 --> 00:08:24,420
that has this code in it and it worked

00:08:18,480 --> 00:08:26,580
really well and what what sucked about

00:08:24,420 --> 00:08:28,050
this was this wasn't the first time that

00:08:26,580 --> 00:08:32,070
we'd had to deal with this particular

00:08:28,050 --> 00:08:33,500
issue and it was a motivating factor for

00:08:32,070 --> 00:08:37,760
getting a limbic into our environment

00:08:33,500 --> 00:08:40,410
the change just sort of snuck in

00:08:37,760 --> 00:08:42,870
sometime between January and April into

00:08:40,410 --> 00:08:44,960
the production database we at the time

00:08:42,870 --> 00:08:47,300
didn't have any useful audit trail

00:08:44,960 --> 00:08:49,790
for how that had happened and some

00:08:47,300 --> 00:08:51,890
partitions were affected but not others

00:08:49,790 --> 00:08:56,300
and the original error dated back to

00:08:51,890 --> 00:08:58,250
like 2010 so it was time for us to

00:08:56,300 --> 00:09:00,260
examine the process of how we were

00:08:58,250 --> 00:09:02,780
managing our schema and so I did that I

00:09:00,260 --> 00:09:08,570
broke it down and this is what it looked

00:09:02,780 --> 00:09:10,730
like so first of all we created Ross

00:09:08,570 --> 00:09:13,040
sequel files for each change and we'd

00:09:10,730 --> 00:09:14,630
like test it locally on some some system

00:09:13,040 --> 00:09:17,510
we set up on our laptop we'd copy and

00:09:14,630 --> 00:09:20,420
edit some template files recreate the

00:09:17,510 --> 00:09:23,510
old schema run a shell script on it

00:09:20,420 --> 00:09:24,980
update the migration on and on and on

00:09:23,510 --> 00:09:26,960
you know commit things and then one of

00:09:24,980 --> 00:09:29,510
the worst most horrifying things that we

00:09:26,960 --> 00:09:31,700
had to do was test it on stage and then

00:09:29,510 --> 00:09:33,830
dump the schema out of stage and

00:09:31,700 --> 00:09:36,500
recommit that back into our production

00:09:33,830 --> 00:09:38,210
repo I really wanted to get away from

00:09:36,500 --> 00:09:41,000
this it was it was really frustrating

00:09:38,210 --> 00:09:42,170
and oftentimes that step of committing

00:09:41,000 --> 00:09:44,780
the schema back would get skipped

00:09:42,170 --> 00:09:48,170
because it was so frustrating to do and

00:09:44,780 --> 00:09:51,290
this is our process pretty much now you

00:09:48,170 --> 00:09:53,000
know we create an old schema we actually

00:09:51,290 --> 00:09:55,130
used to güell kameda to do that with a

00:09:53,000 --> 00:09:58,070
model that pi create an Alembic revision

00:09:55,130 --> 00:09:59,720
test an upgrade commit the revision to

00:09:58,070 --> 00:10:01,820
the repo and that's the last time that

00:09:59,720 --> 00:10:06,370
we touched the production code at that

00:10:01,820 --> 00:10:09,710
point it's ready to go so just quickly

00:10:06,370 --> 00:10:12,190
yeah so anyway it was great now we can

00:10:09,710 --> 00:10:14,060
use the limits to manage these changes

00:10:12,190 --> 00:10:15,680
experimentation on this particular

00:10:14,060 --> 00:10:17,270
problem that I had revealed you know

00:10:15,680 --> 00:10:19,730
which partitions could be modified

00:10:17,270 --> 00:10:21,650
without deadlocking and we just got to

00:10:19,730 --> 00:10:23,600
run it a few times over and over again

00:10:21,650 --> 00:10:25,910
to get the final change ruled out

00:10:23,600 --> 00:10:28,550
everywhere and I was able to roll out

00:10:25,910 --> 00:10:30,770
this partition management change in

00:10:28,550 --> 00:10:34,070
regular business hours I didn't have to

00:10:30,770 --> 00:10:39,920
take a downtime to do it which for me

00:10:34,070 --> 00:10:44,390
was pretty amazing so - without the

00:10:39,920 --> 00:10:46,100
visual here's here's the steps to do

00:10:44,390 --> 00:10:47,960
this process with Alembic you make the

00:10:46,100 --> 00:10:50,150
changes to your model dot PI or maybe

00:10:47,960 --> 00:10:52,820
raw sequel files you run Alembic

00:10:50,150 --> 00:10:54,470
revision - - auto-generate you edit the

00:10:52,820 --> 00:10:58,510
revision file and then you commit the

00:10:54,470 --> 00:11:00,460
changes and we also have another

00:10:58,510 --> 00:11:02,020
run we actually run manually the

00:11:00,460 --> 00:11:05,830
migration on stage after the auto to

00:11:02,020 --> 00:11:07,690
play of a release but another thing that

00:11:05,830 --> 00:11:10,090
we've just started doing the last like

00:11:07,690 --> 00:11:11,710
month is we have Jenkins run the

00:11:10,090 --> 00:11:13,780
downgrade and upgrade as part of the

00:11:11,710 --> 00:11:15,400
test suite and once we're satisfied that

00:11:13,780 --> 00:11:17,290
that's working well for everyone we're

00:11:15,400 --> 00:11:20,830
gonna have migrations run automatically

00:11:17,290 --> 00:11:22,300
on stage and maybe on production I don't

00:11:20,830 --> 00:11:25,000
know it's a little it's a little sketchy

00:11:22,300 --> 00:11:30,670
but I'm I'm hoping that we get to that

00:11:25,000 --> 00:11:32,050
point so yeah I don't know if these are

00:11:30,670 --> 00:11:34,630
the same kinds of problems that you guys

00:11:32,050 --> 00:11:36,630
run into you but we really wanted to

00:11:34,630 --> 00:11:40,150
have an easy way of including

00:11:36,630 --> 00:11:43,330
user-defined functions in the migrations

00:11:40,150 --> 00:11:47,320
for dev end stage we can embed raw

00:11:43,330 --> 00:11:49,240
sequel in these migrations by default it

00:11:47,320 --> 00:11:50,590
includes downgrades which you know if

00:11:49,240 --> 00:11:54,190
you're using self that's also something

00:11:50,590 --> 00:11:56,050
that happens there it really enables

00:11:54,190 --> 00:11:58,510
database change discipline this is how I

00:11:56,050 --> 00:12:01,630
get the developers to review our changes

00:11:58,510 --> 00:12:02,950
I send them a Python file move it has

00:12:01,630 --> 00:12:05,320
some sequel embedded in it and they're

00:12:02,950 --> 00:12:07,240
much more willing to review it so now we

00:12:05,320 --> 00:12:10,480
have a lot of code review discipline in

00:12:07,240 --> 00:12:12,970
our process and the revisions themselves

00:12:10,480 --> 00:12:14,650
are decoupled from release versions and

00:12:12,970 --> 00:12:17,170
the branch commit order which I'll talk

00:12:14,650 --> 00:12:18,880
a little bit more later

00:12:17,170 --> 00:12:20,740
the last few problems in a sulfurous I

00:12:18,880 --> 00:12:25,210
was able to remove a hundred thousand

00:12:20,740 --> 00:12:31,570
lines of code and that was in the form

00:12:25,210 --> 00:12:33,640
of shell scripts I know it was like the

00:12:31,570 --> 00:12:41,340
number one contributor for that quarter

00:12:33,640 --> 00:12:43,540
was so great all deletion we had no more

00:12:41,340 --> 00:12:47,500
post-deployment schema chickens

00:12:43,540 --> 00:12:49,420
oh god it's horrible and now we're you

00:12:47,500 --> 00:12:51,400
know we're deploying test it you know

00:12:49,420 --> 00:12:53,590
tested and I did well in anyway this

00:12:51,400 --> 00:12:56,440
enabled attested and automated stage

00:12:53,590 --> 00:12:58,390
deployment and we've finally separated

00:12:56,440 --> 00:13:00,460
the schema definition from version

00:12:58,390 --> 00:13:02,850
specific configuration which is

00:13:00,460 --> 00:13:06,310
incredibly also important for stability

00:13:02,850 --> 00:13:10,600
so maybe this is me so happy so happy

00:13:06,310 --> 00:13:11,070
now it's really great so if you're in

00:13:10,600 --> 00:13:13,740
the

00:13:11,070 --> 00:13:15,030
needing to pick data migration tool it's

00:13:13,740 --> 00:13:17,760
sort of a choose-your-own-adventure a

00:13:15,030 --> 00:13:19,320
little bit and here are some of the

00:13:17,760 --> 00:13:22,290
questions that I think it's important to

00:13:19,320 --> 00:13:24,780
kind of ask about before you dive in to

00:13:22,290 --> 00:13:26,220
any particular one first of all how fun

00:13:24,780 --> 00:13:28,140
does your schema change like if it's

00:13:26,220 --> 00:13:31,470
almost never you may not need a tool

00:13:28,140 --> 00:13:34,440
like olimpic right it may just be kind

00:13:31,470 --> 00:13:36,510
of a waste of your time do you need the

00:13:34,440 --> 00:13:37,710
migration as well do you first of all do

00:13:36,510 --> 00:13:40,350
you need the migrations to be run

00:13:37,710 --> 00:13:43,170
without you and also can you have them

00:13:40,350 --> 00:13:45,990
run without you individual person that

00:13:43,170 --> 00:13:47,970
knows a lot about the schema are you

00:13:45,990 --> 00:13:50,100
able to test the migration before you

00:13:47,970 --> 00:13:51,920
run it in production surprisingly this

00:13:50,100 --> 00:13:58,170
is not a question that everyone asks

00:13:51,920 --> 00:14:00,270
before they implement a system also can

00:13:58,170 --> 00:14:02,370
developers create a new schema without

00:14:00,270 --> 00:14:03,720
your help this is incredibly important

00:14:02,370 --> 00:14:05,820
for us for new contributors because we

00:14:03,720 --> 00:14:07,470
have outside contributors contributing

00:14:05,820 --> 00:14:09,870
code to this business intelligence

00:14:07,470 --> 00:14:11,190
system that we use for analyzing crashes

00:14:09,870 --> 00:14:13,850
and it's kind of amazing and they really

00:14:11,190 --> 00:14:16,080
need to be able to do this without me

00:14:13,850 --> 00:14:17,730
how hard is it to get from the old

00:14:16,080 --> 00:14:19,620
schema to the new one like we've got

00:14:17,730 --> 00:14:21,030
people that have adopted Socorro way way

00:14:19,620 --> 00:14:24,300
in the past like a year ago and I

00:14:21,030 --> 00:14:26,850
sometimes need to generate or need I try

00:14:24,300 --> 00:14:29,100
to help them generate migrations from

00:14:26,850 --> 00:14:33,270
ancient versions up to get them

00:14:29,100 --> 00:14:36,810
up-to-date and also our change rollbacks

00:14:33,270 --> 00:14:38,460
a standard use of the tool some people

00:14:36,810 --> 00:14:40,050
some people don't ever roll back some

00:14:38,460 --> 00:14:41,370
people only roll forward so that's

00:14:40,050 --> 00:14:45,240
important to know whether you need that

00:14:41,370 --> 00:14:47,730
or not so for us we need to communicate

00:14:45,240 --> 00:14:48,510
change we need to apply changes in the

00:14:47,730 --> 00:14:52,140
right order

00:14:48,510 --> 00:14:53,610
we need to apply changes only once we

00:14:52,140 --> 00:14:55,110
need to use a lot of rust sequel we're

00:14:53,610 --> 00:14:57,930
needed because we have a lot of this PL

00:14:55,110 --> 00:15:01,590
PG SQL code and we want to provide a

00:14:57,930 --> 00:15:03,870
single interface for those changes and

00:15:01,590 --> 00:15:06,090
finally I really want us to be able to

00:15:03,870 --> 00:15:07,950
real rollback gracefully Postgres makes

00:15:06,090 --> 00:15:09,390
that pretty easy because of the support

00:15:07,950 --> 00:15:11,670
for transactions which is really nice

00:15:09,390 --> 00:15:17,760
but sometimes you know he might need

00:15:11,670 --> 00:15:21,060
that in another system as well so one

00:15:17,760 --> 00:15:24,120
thing that I struggled with was that the

00:15:21,060 --> 00:15:24,790
DBAs were not super excited about what

00:15:24,120 --> 00:15:28,900
I'm going to say on

00:15:24,790 --> 00:15:31,270
this next slide really hated the idea of

00:15:28,900 --> 00:15:35,740
using an ORM at all

00:15:31,270 --> 00:15:37,360
and and what I'll say about that is it

00:15:35,740 --> 00:15:39,400
before we implemented Olympic we had

00:15:37,360 --> 00:15:43,620
three different ways of defining schema

00:15:39,400 --> 00:15:45,940
in our tests and they were all used by

00:15:43,620 --> 00:15:48,730
different parts of the code and so this

00:15:45,940 --> 00:15:51,190
is an opportunity to show them how

00:15:48,730 --> 00:15:52,630
having a central source of truth would

00:15:51,190 --> 00:15:56,470
be really helpful for maintaining this

00:15:52,630 --> 00:15:59,620
schema so yeah so anyway so this is

00:15:56,470 --> 00:16:01,030
about having that ORM talk I don't have

00:15:59,620 --> 00:16:03,970
a whole lot of time to go over all the

00:16:01,030 --> 00:16:05,410
details about this but basically having

00:16:03,970 --> 00:16:06,880
a single source of truth really helps a

00:16:05,410 --> 00:16:09,430
lot of stuff then you end up with

00:16:06,880 --> 00:16:11,430
reusable components and database version

00:16:09,430 --> 00:16:15,750
independence from the rest of the code

00:16:11,430 --> 00:16:18,010
and also this ability to use raw sequel

00:16:15,750 --> 00:16:19,750
some other stuff that we talked a lot

00:16:18,010 --> 00:16:21,550
about was fitting into the existing

00:16:19,750 --> 00:16:23,680
tooling enabling partnership with

00:16:21,550 --> 00:16:25,390
developers and integrating in with the

00:16:23,680 --> 00:16:26,590
testing framework which is still

00:16:25,390 --> 00:16:28,690
something that I'm struggling with now

00:16:26,590 --> 00:16:31,090
because I inherited this huge amount of

00:16:28,690 --> 00:16:33,370
code that had no tests and now we at

00:16:31,090 --> 00:16:34,960
least have a framework and a few tests

00:16:33,370 --> 00:16:36,820
but you know that's kind of my next

00:16:34,960 --> 00:16:40,620
large body of work is implementing

00:16:36,820 --> 00:16:41,860
complete tests for our database schema

00:16:40,620 --> 00:16:44,350
yeah

00:16:41,860 --> 00:16:48,370
anyway this might help you if you end up

00:16:44,350 --> 00:16:51,490
having to have that DBA talk so on to

00:16:48,370 --> 00:16:53,680
actually using a lymbic so I wrote a

00:16:51,490 --> 00:16:55,660
blog post that walks you through very

00:16:53,680 --> 00:16:58,480
practically in a narrative style like

00:16:55,660 --> 00:17:02,100
how to do this oh that was an

00:16:58,480 --> 00:17:04,390
interesting Thank You OpenOffice so

00:17:02,100 --> 00:17:06,160
Olympique has our read the doc site and

00:17:04,390 --> 00:17:07,630
the documentation there is really great

00:17:06,160 --> 00:17:09,400
it's got a lot of best practices built

00:17:07,630 --> 00:17:10,510
into it some of the vocabulary that

00:17:09,400 --> 00:17:12,010
you're gonna have to deal with right off

00:17:10,510 --> 00:17:13,960
the bat that might be different than

00:17:12,010 --> 00:17:16,540
other migration system use first of all

00:17:13,960 --> 00:17:18,220
revision is a single migration a down

00:17:16,540 --> 00:17:21,130
revision is the previous migration

00:17:18,220 --> 00:17:24,160
upgrade actually applying the change

00:17:21,130 --> 00:17:26,740
downgrade rolling back or downgrading

00:17:24,160 --> 00:17:29,740
and then offline mode which is emitting

00:17:26,740 --> 00:17:30,670
raw sequel for a particular change which

00:17:29,740 --> 00:17:34,330
I'm going to show you how to run that in

00:17:30,670 --> 00:17:36,880
a minute these are all the commands that

00:17:34,330 --> 00:17:37,970
you need to use to set up a lambic for

00:17:36,880 --> 00:17:39,799
the first time it'll

00:17:37,970 --> 00:17:41,780
create a directory it's like a limbic

00:17:39,799 --> 00:17:43,030
slash and then some stuff underneath

00:17:41,780 --> 00:17:45,980
there

00:17:43,030 --> 00:17:48,110
you know I first lens for all this stuff

00:17:45,980 --> 00:17:49,789
so I put that in there too

00:17:48,110 --> 00:17:51,320
and then when you're creating a new

00:17:49,789 --> 00:17:54,470
revision you can just say your revision

00:17:51,320 --> 00:17:57,559
and then you give it a message I often

00:17:54,470 --> 00:17:59,960
put our bug numbers in there as well so

00:17:57,559 --> 00:18:02,059
I'll say fixes bug whatever and then a

00:17:59,960 --> 00:18:04,940
message and then you can use upgrade

00:18:02,059 --> 00:18:06,409
head and it's got this nice positional

00:18:04,940 --> 00:18:09,200
syntax as well where you can downgrade

00:18:06,409 --> 00:18:16,159
and you can say minus 1 or minus 10 or

00:18:09,200 --> 00:18:18,169
whatever to upgrade or downgrade so if

00:18:16,159 --> 00:18:19,730
you have a schema defined in a model

00:18:18,169 --> 00:18:22,190
file you don't have to do this but you

00:18:19,730 --> 00:18:25,280
can you can just import that into your

00:18:22,190 --> 00:18:29,510
MJ PI and then Alembic does the right

00:18:25,280 --> 00:18:32,929
thing it's really great if you have

00:18:29,510 --> 00:18:34,909
helper functions and I have quite a few

00:18:32,929 --> 00:18:36,289
of these for dealing with like weird

00:18:34,909 --> 00:18:37,870
stuff that we have in our schema and

00:18:36,289 --> 00:18:41,690
also doing things like applying

00:18:37,870 --> 00:18:43,700
permissions on particular tables for me

00:18:41,690 --> 00:18:45,679
without having to do a lot of extra work

00:18:43,700 --> 00:18:50,750
you can just import that in your M PI as

00:18:45,679 --> 00:18:53,030
well and make it available one thing

00:18:50,750 --> 00:18:54,440
that I've had to do also is I'm just

00:18:53,030 --> 00:18:55,730
showing you like a couple of these

00:18:54,440 --> 00:18:57,169
things to just show you how easy it is

00:18:55,730 --> 00:19:00,169
to kind of integrate some of the typical

00:18:57,169 --> 00:19:01,820
DBA tasks in here but we need to ignore

00:19:00,169 --> 00:19:06,230
some schema elements that were not

00:19:01,820 --> 00:19:08,570
actively maintaining I should say in our

00:19:06,230 --> 00:19:11,240
production database with this particular

00:19:08,570 --> 00:19:13,970
code base and so an include symbol you

00:19:11,240 --> 00:19:15,350
can put things like ignoring a bunch of

00:19:13,970 --> 00:19:17,240
partitions you can see there I've got a

00:19:15,350 --> 00:19:19,789
regular expression to ignore things that

00:19:17,240 --> 00:19:22,400
have 8 digits at the end of them which

00:19:19,789 --> 00:19:24,169
indicates a date based partition and I'm

00:19:22,400 --> 00:19:29,929
also ignoring this schema called Big C

00:19:24,169 --> 00:19:33,080
which were we're deprecating another

00:19:29,929 --> 00:19:35,870
thing that I've done is I am managing a

00:19:33,080 --> 00:19:38,690
lot of raw sequel files that have PL PG

00:19:35,870 --> 00:19:41,600
SQL on them and I just put a creator

00:19:38,690 --> 00:19:43,100
replace function in there and then I

00:19:41,600 --> 00:19:44,690
just shove the whole file into this

00:19:43,100 --> 00:19:47,049
directory and this is how I load them

00:19:44,690 --> 00:19:47,049
every time

00:19:49,470 --> 00:19:52,710
when you first set up a database

00:19:51,540 --> 00:19:55,320
initially you need to tell it what

00:19:52,710 --> 00:19:57,570
revision you're at in your olympic repo

00:19:55,320 --> 00:19:59,430
and so there's a command called stamp

00:19:57,570 --> 00:20:00,900
that's provided so you can do that and

00:19:59,430 --> 00:20:03,240
so an example of where you might do that

00:20:00,900 --> 00:20:05,160
is like we have a set up DB command and

00:20:03,240 --> 00:20:07,920
then at the end of that we just stamp it

00:20:05,160 --> 00:20:12,410
with the most recent revision in our

00:20:07,920 --> 00:20:15,900
system and then here's the offline mode

00:20:12,410 --> 00:20:17,490
what you do is you create your change

00:20:15,900 --> 00:20:19,560
you know like you change your model in

00:20:17,490 --> 00:20:21,090
some way and then you say and then you

00:20:19,560 --> 00:20:22,320
create your revision file which we

00:20:21,090 --> 00:20:24,210
already did you know a couple of

00:20:22,320 --> 00:20:26,190
commands back and then you tell it to

00:20:24,210 --> 00:20:28,440
upgrade a particular revision here's

00:20:26,190 --> 00:20:30,000
where the positional syntax you know the

00:20:28,440 --> 00:20:31,920
relative syntax where you say like minus

00:20:30,000 --> 00:20:36,720
1 or plus 1 or something that doesn't

00:20:31,920 --> 00:20:39,780
work you need to use the actual you know

00:20:36,720 --> 00:20:43,160
actual revision ID and then you just say

00:20:39,780 --> 00:20:45,540
- - sequel and it will emit raw sequel

00:20:43,160 --> 00:20:51,990
same for downgrade or you have to give

00:20:45,540 --> 00:20:56,460
it a range but it works great so some of

00:20:51,990 --> 00:20:59,610
my lessons learned in dealing with

00:20:56,460 --> 00:21:01,410
implementing this migration system I

00:20:59,610 --> 00:21:03,570
always put the migrations in a separate

00:21:01,410 --> 00:21:05,400
commit from the rest of my schema

00:21:03,570 --> 00:21:07,050
changes so that if I have to for some

00:21:05,400 --> 00:21:10,590
reason rollback our production code I

00:21:07,050 --> 00:21:12,990
still have the migration in the repo we

00:21:10,590 --> 00:21:14,070
deploy our production code onto the

00:21:12,990 --> 00:21:16,860
database the same way we deploy

00:21:14,070 --> 00:21:20,790
everywhere so this has really helped

00:21:16,860 --> 00:21:22,860
make it so that I can roll back yeah so

00:21:20,790 --> 00:21:24,810
and then when you revert the commit for

00:21:22,860 --> 00:21:26,910
a general change you still have the

00:21:24,810 --> 00:21:29,970
revision file itself some people also

00:21:26,910 --> 00:21:32,010
separate their migration scripts out

00:21:29,970 --> 00:21:34,170
into a completely separate source

00:21:32,010 --> 00:21:40,680
controlled repo and that might might

00:21:34,170 --> 00:21:42,300
work better for you we you know I try to

00:21:40,680 --> 00:21:45,930
store the schema objects in the smallest

00:21:42,300 --> 00:21:47,880
reasonable composable unit that may mean

00:21:45,930 --> 00:21:51,270
different things for you we have a very

00:21:47,880 --> 00:21:52,950
large scheme as you may have realized

00:21:51,270 --> 00:21:55,740
when I told you I removed a hundred

00:21:52,950 --> 00:21:57,780
thousand lines of code but we use the

00:21:55,740 --> 00:21:59,610
ORM for the core schema and then I put

00:21:57,780 --> 00:22:01,070
all the types the user-defined functions

00:21:59,610 --> 00:22:04,700
and the views in their own

00:22:01,070 --> 00:22:07,159
separate sequel files yeah and like I

00:22:04,700 --> 00:22:08,659
said consider storing the schema and the

00:22:07,159 --> 00:22:09,980
revisions in a separate source

00:22:08,659 --> 00:22:13,159
controlled repo if that's appropriate

00:22:09,980 --> 00:22:18,500
for your environment if you write tests

00:22:13,159 --> 00:22:21,019
run them every time we wrote a really

00:22:18,500 --> 00:22:22,250
simple tool to generate a new schema

00:22:21,019 --> 00:22:24,200
from scratch so that we could run the

00:22:22,250 --> 00:22:27,259
tests on them we wrote a simple tool to

00:22:24,200 --> 00:22:29,330
make fake data for us and then we also

00:22:27,259 --> 00:22:31,610
wrote tests for those tools themselves

00:22:29,330 --> 00:22:33,919
and that has helped us kind of stay

00:22:31,610 --> 00:22:35,659
honest with everything and when things

00:22:33,919 --> 00:22:39,470
fail in your migration process write

00:22:35,659 --> 00:22:41,210
another test yeah anyway more harping on

00:22:39,470 --> 00:22:42,740
testing testing testing I just have a

00:22:41,210 --> 00:22:44,990
couple more minutes so just wanted to

00:22:42,740 --> 00:22:47,090
quickly say here's some of the stuff

00:22:44,990 --> 00:22:49,789
that I think would be really helpful to

00:22:47,090 --> 00:22:51,710
be core functionality and Alembic one is

00:22:49,789 --> 00:22:53,240
just understanding database partitions

00:22:51,710 --> 00:22:54,620
out-of-the-box would be really nice so

00:22:53,240 --> 00:22:57,799
that I didn't have to add this thing to

00:22:54,620 --> 00:23:02,000
ignore them another thing would be to

00:22:57,799 --> 00:23:03,289
never apply a default to a new column so

00:23:02,000 --> 00:23:05,269
in Postgres does a little performance

00:23:03,289 --> 00:23:07,129
optimization where if you don't apply a

00:23:05,269 --> 00:23:09,110
default you don't have to take out as

00:23:07,129 --> 00:23:11,960
many locks it doesn't take as long to

00:23:09,110 --> 00:23:14,440
add a column it would be nice if the or

00:23:11,960 --> 00:23:16,909
or sorry if Olympique understood that

00:23:14,440 --> 00:23:18,860
helped us manage user defined functions

00:23:16,909 --> 00:23:22,759
a little better it's a tall order but I

00:23:18,860 --> 00:23:24,200
would be so awesome if there was sort of

00:23:22,759 --> 00:23:25,730
some established patterns the pattern

00:23:24,200 --> 00:23:28,610
that we have of having these separate

00:23:25,730 --> 00:23:31,549
files works pretty well but there are

00:23:28,610 --> 00:23:33,200
some drawbacks to it having Olympique

00:23:31,549 --> 00:23:35,289
understand index concurrently when we're

00:23:33,200 --> 00:23:37,940
adding indexes would be really nice

00:23:35,289 --> 00:23:39,559
having a little bit prettier syntax for

00:23:37,940 --> 00:23:41,330
multi commit sequences because sometimes

00:23:39,559 --> 00:23:44,960
I need to do things in a certain order

00:23:41,330 --> 00:23:47,419
and I don't want my entire migration to

00:23:44,960 --> 00:23:49,279
run in a single transaction be nice if

00:23:47,419 --> 00:23:52,399
there was a little prettier syntax for

00:23:49,279 --> 00:23:55,159
that and finally this is something that

00:23:52,399 --> 00:23:57,980
Mike already is aware of and wants to

00:23:55,159 --> 00:23:59,389
work on and kind of has some stuff out

00:23:57,980 --> 00:24:01,279
there for is supporting multiple

00:23:59,389 --> 00:24:02,929
branches in history currently your

00:24:01,279 --> 00:24:04,639
history with Olympic just needs to be in

00:24:02,929 --> 00:24:07,250
a single order which I understand is

00:24:04,639 --> 00:24:09,919
different than the Django migration

00:24:07,250 --> 00:24:12,019
system and so in the future that's going

00:24:09,919 --> 00:24:13,510
to be possible and I have some ideas for

00:24:12,019 --> 00:24:16,180
maybe like a spring

00:24:13,510 --> 00:24:17,770
thing on Monday for hacking in something

00:24:16,180 --> 00:24:20,410
but he's got some great ideas for making

00:24:17,770 --> 00:24:27,550
this work more holistically in the

00:24:20,410 --> 00:24:28,990
future so just to close I will say in

00:24:27,550 --> 00:24:30,640
looking at lots of different tools no

00:24:28,990 --> 00:24:31,570
particular tool is perfect for all

00:24:30,640 --> 00:24:33,670
situations

00:24:31,570 --> 00:24:35,980
I think Olympic works really well for us

00:24:33,670 --> 00:24:38,440
because we have a large we have a large

00:24:35,980 --> 00:24:39,790
schema where really our team is really

00:24:38,440 --> 00:24:41,620
into automation and we have a really

00:24:39,790 --> 00:24:45,250
good relationship with our operations

00:24:41,620 --> 00:24:46,630
team so that works great for us and I

00:24:45,250 --> 00:24:48,910
think that a big part of that was

00:24:46,630 --> 00:24:53,110
choosing a tool that both the developers

00:24:48,910 --> 00:24:57,190
and the DBAs could could like at the

00:24:53,110 --> 00:24:59,290
same time so hopefully hopefully this is

00:24:57,190 --> 00:25:01,210
some food for that gives you something

00:24:59,290 --> 00:25:03,580
to start from here's some other tools

00:25:01,210 --> 00:25:07,030
that I looked at in my course of my

00:25:03,580 --> 00:25:09,040
research in your suggests definitely

00:25:07,030 --> 00:25:11,170
giving giving them a look if olymic

00:25:09,040 --> 00:25:14,410
doesn't seem to fit for your use case

00:25:11,170 --> 00:25:15,880
and then here's some resources related

00:25:14,410 --> 00:25:19,320
to a Lembeck that I hope are helpful to

00:25:15,880 --> 00:25:19,320
you so thank you

00:25:24,580 --> 00:25:37,100
so if anyone has questions for Selena we

00:25:27,320 --> 00:25:37,820
have about five minutes so I think you

00:25:37,100 --> 00:25:39,500
missed a step in the

00:25:37,820 --> 00:25:41,030
choose-your-own-adventure which is is

00:25:39,500 --> 00:25:44,780
the toolkit you're using still

00:25:41,030 --> 00:25:46,340
maintained if you could suggest possibly

00:25:44,780 --> 00:25:48,320
techniques for migrating from one

00:25:46,340 --> 00:25:50,450
migration system to another migration

00:25:48,320 --> 00:25:56,210
system not naming any names here but I

00:25:50,450 --> 00:26:00,470
need to make a migration well so when I

00:25:56,210 --> 00:26:02,210
when I did this I went one thing that

00:26:00,470 --> 00:26:07,190
Olympic enables is you don't have to

00:26:02,210 --> 00:26:09,919
have like a complete you don't have to

00:26:07,190 --> 00:26:12,350
start from zero with the tool so I just

00:26:09,919 --> 00:26:14,600
dove in and started writing migrations

00:26:12,350 --> 00:26:16,360
based on what the current define the

00:26:14,600 --> 00:26:18,410
schema was and I didn't even bother

00:26:16,360 --> 00:26:26,450
migrating any of the old stuff and I

00:26:18,410 --> 00:26:28,370
just removed it so it wasn't a

00:26:26,450 --> 00:26:31,910
requirement from our open source users

00:26:28,370 --> 00:26:34,850
that we make those migrations work I'm I

00:26:31,910 --> 00:26:36,799
don't have a lot of great suggestions I

00:26:34,850 --> 00:26:37,100
was talking with someone a couple days

00:26:36,799 --> 00:26:39,290
ago

00:26:37,100 --> 00:26:41,360
about what they were planning on doing

00:26:39,290 --> 00:26:44,150
and basically they they wrote their own

00:26:41,360 --> 00:26:47,840
tool to translate the old migrations in

00:26:44,150 --> 00:26:51,340
news so sorry it's a crappy situation I

00:26:47,840 --> 00:26:56,980
mean my my my best suggestion is to like

00:26:51,340 --> 00:26:59,690
ignore it and just move forward yeah

00:26:56,980 --> 00:27:01,400
I've got two quick questions for you one

00:26:59,690 --> 00:27:03,770
is you mentioned a tool to generate data

00:27:01,400 --> 00:27:06,080
is that open source is that do you have

00:27:03,770 --> 00:27:12,140
a name for that project oh yeah yeah

00:27:06,080 --> 00:27:14,390
yeah no um I don't know if I can so so

00:27:12,140 --> 00:27:17,240
my whole thing that we did it's very

00:27:14,390 --> 00:27:18,530
specific to us so I don't know if it

00:27:17,240 --> 00:27:21,980
would be very helpful but it might be a

00:27:18,530 --> 00:27:25,460
good pattern but the socorro repo itself

00:27:21,980 --> 00:27:28,000
which is just Mozilla let's see oh I'll

00:27:25,460 --> 00:27:28,000
put up this

00:27:30,920 --> 00:27:36,790
so if you go to the Socorro repo in

00:27:34,250 --> 00:27:41,000
there if you search for fake data dot pi

00:27:36,790 --> 00:27:43,970
rub Helmer wrote that and it's a great

00:27:41,000 --> 00:27:45,800
you know first step we we talked about

00:27:43,970 --> 00:27:47,690
trying to turn it into like a more

00:27:45,800 --> 00:27:49,250
modular iso but we weren't really sure

00:27:47,690 --> 00:27:51,320
what other people needed so if you talk

00:27:49,250 --> 00:27:53,710
to us and tell us like how we could make

00:27:51,320 --> 00:27:56,330
that better we could spin it out

00:27:53,710 --> 00:27:58,610
cool thanks and the other question you

00:27:56,330 --> 00:27:59,900
basically you touched on how South

00:27:58,610 --> 00:28:02,810
migrations are sequential

00:27:59,900 --> 00:28:05,960
how does Olympic dress that there's

00:28:02,810 --> 00:28:08,990
sequential in Olympic there's some plans

00:28:05,960 --> 00:28:11,960
and an architecture designed to make it

00:28:08,990 --> 00:28:15,470
so that you can have you know multiple

00:28:11,960 --> 00:28:16,970
children from one parent and that's you

00:28:15,470 --> 00:28:18,920
know that's some work that Mike has

00:28:16,970 --> 00:28:20,810
that's ongoing that he could use some

00:28:18,920 --> 00:28:23,210
funding for if anybody's got deep

00:28:20,810 --> 00:28:24,860
pockets that would be awesome but that's

00:28:23,210 --> 00:28:25,280
that's the plan moving forward to do

00:28:24,860 --> 00:28:28,310
that

00:28:25,280 --> 00:28:31,790
my idea for like a quick hack is just to

00:28:28,310 --> 00:28:34,910
create a file that generates conflicts

00:28:31,790 --> 00:28:36,170
when you try to merge and and so I'm I'm

00:28:34,910 --> 00:28:38,150
probably gonna hack something like that

00:28:36,170 --> 00:28:39,560
in for us because that's that's kind of

00:28:38,150 --> 00:28:42,580
the biggest stumbling block for our

00:28:39,560 --> 00:28:44,330
developers as they'll commit to

00:28:42,580 --> 00:28:47,420
migrations at the same time that are

00:28:44,330 --> 00:28:47,960
unrelated and then Alembic is like don't

00:28:47,420 --> 00:28:51,320
do that

00:28:47,960 --> 00:28:52,130
and jenkins blows up but that's really

00:28:51,320 --> 00:28:54,200
the only

00:28:52,130 --> 00:28:58,010
the only major operations thing that we

00:28:54,200 --> 00:29:00,470
need to fix at this point yeah so you

00:28:58,010 --> 00:29:03,020
also said that you run migrations during

00:29:00,470 --> 00:29:04,430
the testing step on your continuous

00:29:03,020 --> 00:29:06,380
integration server yes

00:29:04,430 --> 00:29:08,000
database migrations normally take a long

00:29:06,380 --> 00:29:10,540
time how do you do that in a reasonable

00:29:08,000 --> 00:29:10,540
amount of time

00:29:12,760 --> 00:29:23,240
yeah well there the short answer is I

00:29:19,930 --> 00:29:26,420
use every possible trick in the book

00:29:23,240 --> 00:29:28,790
that I can to make migrations take out

00:29:26,420 --> 00:29:30,470
as few locks as possible and to apply

00:29:28,790 --> 00:29:32,600
the changes as quickly as possible in

00:29:30,470 --> 00:29:36,290
all situations regardless of how much

00:29:32,600 --> 00:29:37,970
data is involved so that's that's my

00:29:36,290 --> 00:29:41,960
quick answer there's a longer answer

00:29:37,970 --> 00:29:43,149
which is very long but yeah I just use

00:29:41,960 --> 00:29:45,039
lots of tricks and

00:29:43,149 --> 00:29:48,309
I teach the developers like how to do

00:29:45,039 --> 00:29:50,379
that stuff and so I have an presentation

00:29:48,309 --> 00:29:52,239
that I gave at our last teamwork week

00:29:50,379 --> 00:29:55,739
you know that was basically a list of

00:29:52,239 --> 00:29:57,429
tricks to make the migrations run fast

00:29:55,739 --> 00:29:58,809
unfortunately it's all we have time for

00:29:57,429 --> 00:30:01,080
let's give Selena a big round of

00:29:58,809 --> 00:30:01,080

YouTube URL: https://www.youtube.com/watch?v=_ZdqwCr4c7Q


