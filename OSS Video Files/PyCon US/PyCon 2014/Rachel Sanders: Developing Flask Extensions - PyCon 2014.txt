Title: Rachel Sanders: Developing Flask Extensions - PyCon 2014
Publication date: 2014-04-24
Playlist: PyCon 2014
Description: 
	Speaker: Rachel Sanders

You can create a web application with Flask in seven lines of code, and you can grow that app to thousands. How do you create reusable, shareable libraries? We'll use a simple but real extension I created (Flask-FeatureFlags) to look at the different ways you can make Flask awesome.

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:07,770 --> 00:00:12,450
okay good morning everybody and our

00:00:10,620 --> 00:00:14,460
first talk of the day is developing

00:00:12,450 --> 00:00:17,699
plastic extensions by rachelsanders

00:00:14,460 --> 00:00:19,350
she's a developer at LinkedIn and is an

00:00:17,699 --> 00:00:21,150
organizer of the PI ladies in San

00:00:19,350 --> 00:00:30,840
Francisco so please give her a warm

00:00:21,150 --> 00:00:32,700
welcome hello everybody I want to

00:00:30,840 --> 00:00:34,379
apologize in advance for my voice I have

00:00:32,700 --> 00:00:36,690
caught the con flu

00:00:34,379 --> 00:00:39,329
so I will try my best not to sneeze and

00:00:36,690 --> 00:00:40,980
death and all of you but I'll just I'll

00:00:39,329 --> 00:00:43,110
try to give you a warning so there we go

00:00:40,980 --> 00:00:45,030
anyway welcome thank you so much for

00:00:43,110 --> 00:00:48,239
coming welcome to developing flask

00:00:45,030 --> 00:00:51,390
extensions before we get started a

00:00:48,239 --> 00:00:53,220
little bit about me I am a pilot a San

00:00:51,390 --> 00:00:55,800
Francisco organizer organizer and

00:00:53,220 --> 00:00:57,450
founder and when I'm not doing that I'm

00:00:55,800 --> 00:01:00,840
an engineer and technical lead at

00:00:57,450 --> 00:01:02,880
LinkedIn and at LinkedIn I code in

00:01:00,840 --> 00:01:04,949
Python all day every day

00:01:02,880 --> 00:01:07,799
and that's because linkedin's internal

00:01:04,949 --> 00:01:10,999
stack is Python Python and flask it to

00:01:07,799 --> 00:01:13,560
be specific oh yes

00:01:10,999 --> 00:01:15,630
so this talk came out of something I did

00:01:13,560 --> 00:01:18,359
at work for my team I needed to write an

00:01:15,630 --> 00:01:19,770
extension for them and I really

00:01:18,359 --> 00:01:21,780
struggled with getting something a

00:01:19,770 --> 00:01:23,340
reasonable together because there's not

00:01:21,780 --> 00:01:25,289
a lot of documentation out there on

00:01:23,340 --> 00:01:28,529
writing extensions and doing this kind

00:01:25,289 --> 00:01:30,060
of work so it turns out that flask is

00:01:28,529 --> 00:01:32,100
designed to be extended and it's

00:01:30,060 --> 00:01:34,229
actually I think very very

00:01:32,100 --> 00:01:35,880
straightforward and so that's my goal of

00:01:34,229 --> 00:01:37,950
this talk for you all the walk out of

00:01:35,880 --> 00:01:40,139
here thinking that extension development

00:01:37,950 --> 00:01:42,959
is just as straightforward and easy as I

00:01:40,139 --> 00:01:44,999
think it is okay so we're going to talk

00:01:42,959 --> 00:01:48,240
about we're going to do a really really

00:01:44,999 --> 00:01:49,679
quick introduction for those of you who

00:01:48,240 --> 00:01:51,840
haven't worked with flask or aren't

00:01:49,679 --> 00:01:53,759
familiar with it I promise it'll be very

00:01:51,840 --> 00:01:55,889
quick it'll be like two minutes long and

00:01:53,759 --> 00:01:58,469
we'll talk about what it means to extend

00:01:55,889 --> 00:02:01,020
flasks but we're gonna spend most of the

00:01:58,469 --> 00:02:03,179
talk on a case study on this extension

00:02:01,020 --> 00:02:05,239
that I wrote so and we'll talk about how

00:02:03,179 --> 00:02:07,859
it works in the implementation of it

00:02:05,239 --> 00:02:09,420
it's a very simple extension it was like

00:02:07,859 --> 00:02:12,060
100 lines of code and I've condensed it

00:02:09,420 --> 00:02:14,099
down to it quite a bit so once we see

00:02:12,060 --> 00:02:16,230
that very basic extension we're going to

00:02:14,099 --> 00:02:18,510
talk about where you can go from there

00:02:16,230 --> 00:02:20,820
for non-trivial examples for non you

00:02:18,510 --> 00:02:21,120
know that kind of thing so we'll go sort

00:02:20,820 --> 00:02:23,040
of like

00:02:21,120 --> 00:02:25,230
a study of other extensions that are

00:02:23,040 --> 00:02:28,349
good to learn from what I think and then

00:02:25,230 --> 00:02:30,209
finally we'll end with questions ok so I

00:02:28,349 --> 00:02:32,459
thought of a number of ways to do an

00:02:30,209 --> 00:02:34,409
introduction to this and the best way I

00:02:32,459 --> 00:02:38,310
could come up with was just to show you

00:02:34,409 --> 00:02:40,560
a working flask application this is a

00:02:38,310 --> 00:02:43,019
working flask application if you pip

00:02:40,560 --> 00:02:45,510
install flask and run this in a file

00:02:43,019 --> 00:02:49,980
what you'll get is a dev server running

00:02:45,510 --> 00:02:52,200
on port 5000 that if you load localhost

00:02:49,980 --> 00:02:54,269
5000 in your browser what you'll get is

00:02:52,200 --> 00:02:57,329
the words hello sandy MS hi print it

00:02:54,269 --> 00:02:59,430
there and okay so if you're coming from

00:02:57,329 --> 00:03:02,040
like the Django or rails world you'll

00:02:59,430 --> 00:03:05,190
look at this and go that's great it's a

00:03:02,040 --> 00:03:07,379
nice hello world function ok where's the

00:03:05,190 --> 00:03:09,480
rest of it where's where's my database

00:03:07,379 --> 00:03:12,390
where are my forms where is my admin

00:03:09,480 --> 00:03:15,840
interface and last doesn't have any of

00:03:12,390 --> 00:03:17,489
those it is a micro framework and this

00:03:15,840 --> 00:03:20,220
is pretty much what you get you get

00:03:17,489 --> 00:03:22,680
routes you get controllers it ships with

00:03:20,220 --> 00:03:25,139
the templating language ginger it has

00:03:22,680 --> 00:03:26,940
some session and cookie stuff but what

00:03:25,139 --> 00:03:29,489
you see in the slide is pretty much what

00:03:26,940 --> 00:03:32,040
you get and that's actually on purpose

00:03:29,489 --> 00:03:34,099
because the idea of flask is to build a

00:03:32,040 --> 00:03:36,329
good foundation for all applications

00:03:34,099 --> 00:03:38,430
everything else is up to you or

00:03:36,329 --> 00:03:42,150
extensions and this is Armen who is the

00:03:38,430 --> 00:03:45,870
creator of flask laughs is it hearty

00:03:42,150 --> 00:03:48,540
toolkit you use it to build HTTP things

00:03:45,870 --> 00:03:50,669
and the core library is purposely kept

00:03:48,540 --> 00:03:53,280
very small and focused to be good at

00:03:50,669 --> 00:03:54,810
doing that and that means that most of

00:03:53,280 --> 00:03:57,180
the stuff you need as a day-to-day

00:03:54,810 --> 00:04:00,120
application developer is all in the

00:03:57,180 --> 00:04:01,949
extension ecosystem so learning how to

00:04:00,120 --> 00:04:06,329
write extensions is a key part of

00:04:01,949 --> 00:04:08,190
learning how to write flask ok so let's

00:04:06,329 --> 00:04:10,799
talk about what it means to extend flask

00:04:08,190 --> 00:04:13,530
so this is the same hello san dimas hi

00:04:10,799 --> 00:04:15,540
application and the slide weren't really

00:04:13,530 --> 00:04:18,780
bought went by really fast a minute ago

00:04:15,540 --> 00:04:20,340
but if you look at line 3 that app

00:04:18,780 --> 00:04:24,449
equals flask name

00:04:20,340 --> 00:04:27,180
it's actually doing an awful lot so we

00:04:24,449 --> 00:04:31,529
use a method on it called route to map

00:04:27,180 --> 00:04:33,269
the route URL to that hello function and

00:04:31,529 --> 00:04:35,789
I don't know if you've ever had to do

00:04:33,269 --> 00:04:38,069
any CGI programming which I had to do

00:04:35,789 --> 00:04:40,709
back in my bad old Perl days but those

00:04:38,069 --> 00:04:44,189
three lines of code are lighting over a

00:04:40,709 --> 00:04:45,809
ton of magic or doing inbound routing it

00:04:44,189 --> 00:04:48,059
we have some string that were somehow

00:04:45,809 --> 00:04:50,549
transmitting into like an HTTP response

00:04:48,059 --> 00:04:53,459
and so there's a lot of stuff going on

00:04:50,549 --> 00:04:56,789
there and in the last one we're actually

00:04:53,459 --> 00:05:00,269
kicking off an entire dev test server so

00:04:56,789 --> 00:05:02,039
the takeaway is app is the heart of flap

00:05:00,269 --> 00:05:04,679
that app magic app object which I'm

00:05:02,039 --> 00:05:06,479
going to call it is that is where all of

00:05:04,679 --> 00:05:09,419
the functionality and what flask is so

00:05:06,479 --> 00:05:11,639
it is the core and when we talk about

00:05:09,419 --> 00:05:13,889
extending flask what we're really

00:05:11,639 --> 00:05:16,679
talking about is changing that app

00:05:13,889 --> 00:05:19,139
object and modifying it like I said

00:05:16,679 --> 00:05:21,869
flask is designed to be extended and you

00:05:19,139 --> 00:05:25,619
can change this app object in like lots

00:05:21,869 --> 00:05:28,319
of ways you can say hey when a request

00:05:25,619 --> 00:05:30,779
comes in let me have it first so that I

00:05:28,319 --> 00:05:34,079
can look at it and send my own response

00:05:30,779 --> 00:05:36,599
if I want to or after the application is

00:05:34,079 --> 00:05:38,249
done looking at it let me have it before

00:05:36,599 --> 00:05:40,459
it goes out the door so I can add

00:05:38,249 --> 00:05:44,939
cookies I can rewrite the response

00:05:40,459 --> 00:05:47,999
whatever I can also give my end user

00:05:44,939 --> 00:05:50,639
developers more resources I can point

00:05:47,999 --> 00:05:52,679
app to where other things are like I can

00:05:50,639 --> 00:05:55,349
tell it where other filters are in Jinja

00:05:52,679 --> 00:05:56,659
I can extend Jinja for them i can

00:05:55,349 --> 00:05:59,729
programmatically add in routes

00:05:56,659 --> 00:06:02,399
blueprints which are last way of

00:05:59,729 --> 00:06:05,519
organizing code or assets and things

00:06:02,399 --> 00:06:07,709
like that I can wrap the app in

00:06:05,519 --> 00:06:09,089
middleware and I can even monkey patch

00:06:07,709 --> 00:06:12,749
it and we will see an example of that

00:06:09,089 --> 00:06:14,969
late in the talk okay that is all super

00:06:12,749 --> 00:06:18,089
super super generic so let's look at a

00:06:14,969 --> 00:06:20,369
real real example here okay so I'm a

00:06:18,089 --> 00:06:22,679
team lead for a small kind of internal

00:06:20,369 --> 00:06:25,289
workflow we bility kind of tool cooking

00:06:22,679 --> 00:06:26,789
and we wanted to move to continuous

00:06:25,289 --> 00:06:28,169
integration we were deploying every two

00:06:26,789 --> 00:06:31,199
weeks so you want to deploy every day or

00:06:28,169 --> 00:06:32,879
every other day so no one gets the bad

00:06:31,199 --> 00:06:34,589
wrong idea the main site the main

00:06:32,879 --> 00:06:36,389
linkedin site that you all use has had

00:06:34,589 --> 00:06:39,449
this for days and it's like we are

00:06:36,389 --> 00:06:41,849
internal and we are sort of off on our

00:06:39,449 --> 00:06:43,169
own a little bit and we are all friends

00:06:41,849 --> 00:06:44,440
we all try to make sure we're all

00:06:43,169 --> 00:06:46,120
working the same direction but

00:06:44,440 --> 00:06:47,770
time's my little team is going off this

00:06:46,120 --> 00:06:48,580
way and the other thousand developers

00:06:47,770 --> 00:06:50,800
the company are going the other way so

00:06:48,580 --> 00:06:52,960
we try to be consistent but sometimes

00:06:50,800 --> 00:06:54,850
we're a little bit different so if it

00:06:52,960 --> 00:06:56,650
sounds like I'm talking about a 12

00:06:54,850 --> 00:07:01,000
person company instead of a 5,000 one

00:06:56,650 --> 00:07:02,350
that that's why so anyway so we needed a

00:07:01,000 --> 00:07:04,990
way when you move to continuous and

00:07:02,350 --> 00:07:06,940
Gration we needed a way to be able to

00:07:04,990 --> 00:07:10,810
commit and deploy code that was not

00:07:06,940 --> 00:07:12,700
ready for users to see so I wrote an

00:07:10,810 --> 00:07:15,430
extension to do that I wrote an

00:07:12,700 --> 00:07:19,240
extension to turn parts of the app on or

00:07:15,430 --> 00:07:20,950
off based on configuration I did not

00:07:19,240 --> 00:07:24,210
make up this idiom it's called feature

00:07:20,950 --> 00:07:27,940
flagging therefore flask feature flags

00:07:24,210 --> 00:07:30,880
so the actual extension that you can get

00:07:27,940 --> 00:07:32,770
on pipe eye and download from github is

00:07:30,880 --> 00:07:35,290
about a hundred lines of code and I

00:07:32,770 --> 00:07:39,190
could not fit that on a slide so instead

00:07:35,290 --> 00:07:42,550
I have shrunk it down to about 15 maybe

00:07:39,190 --> 00:07:44,290
less lines and I've done that by cutting

00:07:42,550 --> 00:07:45,790
out all the functionality all the error

00:07:44,290 --> 00:07:47,260
handling and all the paranoia and

00:07:45,790 --> 00:07:50,620
anything I would want in an actual

00:07:47,260 --> 00:07:52,540
production library so don't judge a book

00:07:50,620 --> 00:07:53,230
by it's heavily edited Reader's Digest

00:07:52,540 --> 00:07:57,550
version

00:07:53,230 --> 00:07:59,200
so anyway okay so what I want to do is

00:07:57,550 --> 00:08:00,850
I'm going to talk about excusing this

00:07:59,200 --> 00:08:02,620
extension from the end users point of

00:08:00,850 --> 00:08:04,900
view so if you were to download so they

00:08:02,620 --> 00:08:06,850
say this extension and use it let's talk

00:08:04,900 --> 00:08:08,530
about how that would work first and then

00:08:06,850 --> 00:08:09,790
we'll go into the implementation details

00:08:08,530 --> 00:08:11,440
of it okay

00:08:09,790 --> 00:08:13,720
so this is our old friend the hello san

00:08:11,440 --> 00:08:16,200
dimas hi application I've cut out the

00:08:13,720 --> 00:08:20,320
dev test server for space reasons

00:08:16,200 --> 00:08:21,910
okay so extensions are just modules

00:08:20,320 --> 00:08:24,640
you're like modules like anything else

00:08:21,910 --> 00:08:27,370
so you import them imports Flass X

00:08:24,640 --> 00:08:29,290
feature flags as feature Blas gives you

00:08:27,370 --> 00:08:30,760
this little indirection thing so the

00:08:29,290 --> 00:08:32,530
name of the extension is actually flash

00:08:30,760 --> 00:08:33,729
underscore feature flags but I think

00:08:32,530 --> 00:08:35,710
this is the supportive way of doing it

00:08:33,729 --> 00:08:39,099
and I'm importing it alias to feature

00:08:35,710 --> 00:08:41,200
because I can't say the other one so I

00:08:39,099 --> 00:08:43,570
take that and then I instantiate an

00:08:41,200 --> 00:08:47,110
object called feature flag and I feed it

00:08:43,570 --> 00:08:48,700
that magicapp object so from the end

00:08:47,110 --> 00:08:50,500
user's point of view this is all they

00:08:48,700 --> 00:08:54,040
have to do to configure this that's it

00:08:50,500 --> 00:08:56,170
and now they can start using it okay the

00:08:54,040 --> 00:08:57,550
second thing I want to have is a module

00:08:56,170 --> 00:09:00,430
level function called

00:08:57,550 --> 00:09:02,200
is active it has one argument which is a

00:09:00,430 --> 00:09:04,899
string that's the name of the feature

00:09:02,200 --> 00:09:06,760
features are just strings and it's

00:09:04,899 --> 00:09:10,660
supposed to return true the feature is

00:09:06,760 --> 00:09:13,060
on or false the feature is off so if you

00:09:10,660 --> 00:09:15,610
run this if you say if feature is active

00:09:13,060 --> 00:09:17,589
PyCon lopukhin else hello sim it seems

00:09:15,610 --> 00:09:19,980
hi if you run this what you'll actually

00:09:17,589 --> 00:09:22,240
get is hello sandy MS hi because I

00:09:19,980 --> 00:09:24,490
haven't actually defined any features

00:09:22,240 --> 00:09:28,120
yet so let's talk about how we would do

00:09:24,490 --> 00:09:31,839
that so in vanilla flask there's really

00:09:28,120 --> 00:09:34,300
only one place to store configuration

00:09:31,839 --> 00:09:36,490
like that and it's called in the app dot

00:09:34,300 --> 00:09:39,640
config on that magic app object there's

00:09:36,490 --> 00:09:42,040
a property called config which is mostly

00:09:39,640 --> 00:09:45,700
like a dictionary and it stores config

00:09:42,040 --> 00:09:50,200
key names and values so we're gonna call

00:09:45,700 --> 00:09:53,230
our config feature flags and itself will

00:09:50,200 --> 00:09:54,760
be a dictionary so the names of our the

00:09:53,230 --> 00:09:57,130
name of the keith keys are going to be

00:09:54,760 --> 00:09:59,560
the name of the feature and the values

00:09:57,130 --> 00:10:02,800
will be boolean true the features on

00:09:59,560 --> 00:10:05,950
false the feature is off so this is how

00:10:02,800 --> 00:10:07,899
you would turn a feature on app config

00:10:05,950 --> 00:10:11,910
feature flags name of the feature

00:10:07,899 --> 00:10:14,950
true I run this I will get hello PyCon

00:10:11,910 --> 00:10:17,470
okay so this is great for the Python

00:10:14,950 --> 00:10:19,720
like the app developers like me but I

00:10:17,470 --> 00:10:21,279
want my front-end developers and my web

00:10:19,720 --> 00:10:23,740
devs to be able to use this in the

00:10:21,279 --> 00:10:26,170
ginger layer as well and to do that I'm

00:10:23,740 --> 00:10:28,000
gonna use a thing of ginger called a

00:10:26,170 --> 00:10:30,760
template test and this is what a

00:10:28,000 --> 00:10:33,190
template test looks like if PyCon is

00:10:30,760 --> 00:10:36,820
active feature type icon else

00:10:33,190 --> 00:10:39,070
hello sandy MS hi active feature is the

00:10:36,820 --> 00:10:41,560
name of the template test and it it's

00:10:39,070 --> 00:10:43,390
like a function it will get PyCon as an

00:10:41,560 --> 00:10:45,640
argument and it's supposed to return

00:10:43,390 --> 00:10:48,220
true the features on or false the

00:10:45,640 --> 00:10:52,060
feature is off basically identical to

00:10:48,220 --> 00:10:53,680
the is active thing we just did so we're

00:10:52,060 --> 00:10:54,880
gonna put on our project manager hats

00:10:53,680 --> 00:10:56,709
for a second and we're gonna write a

00:10:54,880 --> 00:10:59,110
spec there's only really three things

00:10:56,709 --> 00:11:01,149
we're gonna do one we're gonna store the

00:10:59,110 --> 00:11:03,010
feature flags and the config we're gonna

00:11:01,149 --> 00:11:04,720
store the jint that we're going to have

00:11:03,010 --> 00:11:06,820
a ginger template test called active

00:11:04,720 --> 00:11:08,320
feature and we're gonna have a module a

00:11:06,820 --> 00:11:09,699
function called is active so I switch

00:11:08,320 --> 00:11:11,460
the last two or the order of last two

00:11:09,699 --> 00:11:13,110
for four reasons you'll see

00:11:11,460 --> 00:11:15,600
okay so let's get going so that you can

00:11:13,110 --> 00:11:17,040
see some actual code here a fair warning

00:11:15,600 --> 00:11:19,980
there is a giant wall of code coming up

00:11:17,040 --> 00:11:21,390
I know a giant wall of code can be hard

00:11:19,980 --> 00:11:23,460
to read for those of you back in the

00:11:21,390 --> 00:11:25,860
cheap seats but I will do my best to

00:11:23,460 --> 00:11:27,779
talk through it and but if you have a

00:11:25,860 --> 00:11:30,570
laptop feel free to open it two-bit

00:11:27,779 --> 00:11:32,370
lease last giant wall of code which is a

00:11:30,570 --> 00:11:34,709
link to a gist of everything I'm going

00:11:32,370 --> 00:11:36,450
to talk about so and if you have that

00:11:34,709 --> 00:11:38,690
feel free to open it and look at

00:11:36,450 --> 00:11:41,300
pictures of cats instead of you know

00:11:38,690 --> 00:11:48,899
so--but least that's giant wall of code

00:11:41,300 --> 00:11:50,550
ask your neighbors if you forget okay so

00:11:48,899 --> 00:11:53,459
remember what we said that last

00:11:50,550 --> 00:11:56,670
extensions are involves changing that

00:11:53,459 --> 00:11:59,040
app object so we need a callable if

00:11:56,670 --> 00:12:01,440
extensions are just caller bowls they

00:11:59,040 --> 00:12:03,390
can be functions they can be objects in

00:12:01,440 --> 00:12:04,740
practice they're almost always objects

00:12:03,390 --> 00:12:07,140
because they're almost always

00:12:04,740 --> 00:12:09,230
non-trivial so ours is going to be an

00:12:07,140 --> 00:12:13,020
object so this is class feature flag

00:12:09,230 --> 00:12:14,640
inherits from object so like all objects

00:12:13,020 --> 00:12:17,730
it has a double underscore init method

00:12:14,640 --> 00:12:20,850
and we allow the user to pass that magic

00:12:17,730 --> 00:12:23,600
op app object to us but if you notice

00:12:20,850 --> 00:12:25,709
we're actually making it optional and

00:12:23,600 --> 00:12:27,900
then we're gonna do something kind of

00:12:25,709 --> 00:12:30,330
weird we are going to if we get an app

00:12:27,900 --> 00:12:32,279
pass to us we are immediately gonna pass

00:12:30,330 --> 00:12:35,270
the buck over to another method called

00:12:32,279 --> 00:12:38,550
init app which is not optional for app

00:12:35,270 --> 00:12:40,140
okay so why why are we doing this this

00:12:38,550 --> 00:12:42,270
is to support something called

00:12:40,140 --> 00:12:45,150
application factories which is a really

00:12:42,270 --> 00:12:46,830
really common flask idiom we use it it

00:12:45,150 --> 00:12:47,820
like didn't to do a number of things so

00:12:46,830 --> 00:12:50,730
it's a function or something that

00:12:47,820 --> 00:12:52,350
generates that app object for you the

00:12:50,730 --> 00:12:54,810
reason why I'm splitting these two

00:12:52,350 --> 00:12:57,270
things is I want my extension to be able

00:12:54,810 --> 00:13:00,390
to be instantiated and run without

00:12:57,270 --> 00:13:01,380
having that app active yet application

00:13:00,390 --> 00:13:03,750
factories are used for things like

00:13:01,380 --> 00:13:05,730
testing so we may have many apps being

00:13:03,750 --> 00:13:07,170
generated and I want to be able to feed

00:13:05,730 --> 00:13:08,670
them to that extension without having to

00:13:07,170 --> 00:13:11,339
create an destroy it every single time

00:13:08,670 --> 00:13:13,380
so Armen actually the creator of flash

00:13:11,339 --> 00:13:14,940
actually suggests this is how you

00:13:13,380 --> 00:13:16,980
structure your extensions and that's why

00:13:14,940 --> 00:13:18,779
I wanted to show it to you so and it is

00:13:16,980 --> 00:13:21,329
all of your extension level and sanshi a

00:13:18,779 --> 00:13:24,180
ssin and init app is all the changes

00:13:21,329 --> 00:13:24,899
you're making to the app most extensions

00:13:24,180 --> 00:13:26,639
you'll see out

00:13:24,899 --> 00:13:28,399
in the wild are structured like this so

00:13:26,639 --> 00:13:30,689
that's why I wanted to show it to you

00:13:28,399 --> 00:13:33,269
okay so let's actually write some real

00:13:30,689 --> 00:13:35,339
code and not boilerplate the first thing

00:13:33,269 --> 00:13:38,509
you wanted to do was store our features

00:13:35,339 --> 00:13:40,860
in the config so I said that config is

00:13:38,509 --> 00:13:43,470
mostly a dictionary and here's the case

00:13:40,860 --> 00:13:45,209
where it's not so this says app config

00:13:43,470 --> 00:13:46,949
is set default because we are all

00:13:45,209 --> 00:13:50,429
professional developers and we set same

00:13:46,949 --> 00:13:52,139
defaults for our app so our default for

00:13:50,429 --> 00:13:54,329
our feature flag is going to be just an

00:13:52,139 --> 00:13:56,220
empty dictionary so that's all we're

00:13:54,329 --> 00:13:58,679
gonna do so if you remember a couple

00:13:56,220 --> 00:14:01,439
slides back I sort of merrily did app

00:13:58,679 --> 00:14:04,199
config feature Flags PyCon equals true

00:14:01,439 --> 00:14:06,269
and I can't usually do that in Python

00:14:04,199 --> 00:14:08,610
Python doesn't let you make a key in a

00:14:06,269 --> 00:14:11,490
sub key without throwing a key error I

00:14:08,610 --> 00:14:14,939
think and so that's why I could do that

00:14:11,490 --> 00:14:16,079
is because I set a default here and so

00:14:14,939 --> 00:14:17,519
to make our lives easier we're gonna

00:14:16,079 --> 00:14:20,189
write a method called

00:14:17,519 --> 00:14:23,279
in config which takes one argument which

00:14:20,189 --> 00:14:26,279
is the feature name okay so if you have

00:14:23,279 --> 00:14:28,379
you noticed I'm not actually storing the

00:14:26,279 --> 00:14:31,679
app anywhere in this extension there is

00:14:28,379 --> 00:14:34,439
no self-thought App equals app and that

00:14:31,679 --> 00:14:36,629
is on purpose I want this extension to

00:14:34,439 --> 00:14:38,399
not you know have that saved with it and

00:14:36,629 --> 00:14:40,519
I want the app to contain all of the

00:14:38,399 --> 00:14:42,749
state and all the things like this so

00:14:40,519 --> 00:14:46,829
that's because application factories and

00:14:42,749 --> 00:14:48,179
other things like that so yeah so I in

00:14:46,829 --> 00:14:50,910
order to get but I need to get the app

00:14:48,179 --> 00:14:55,800
right cuz I need to get in its config

00:14:50,910 --> 00:14:58,410
and so I'm gonna use an idiom of flash

00:14:55,800 --> 00:15:01,860
flash saves me here by having something

00:14:58,410 --> 00:15:04,529
called a current app current app is a

00:15:01,860 --> 00:15:06,319
global when an application context is

00:15:04,529 --> 00:15:09,740
live or basically a request is live

00:15:06,319 --> 00:15:12,509
flask sets current app to be whatever

00:15:09,740 --> 00:15:14,189
magic app object is currently running

00:15:12,509 --> 00:15:16,499
and currently controlling that request

00:15:14,189 --> 00:15:18,990
so that's how I can get to it here so

00:15:16,499 --> 00:15:21,059
here I'm gonna say app can this current

00:15:18,990 --> 00:15:23,189
app config feature flags I'm gonna look

00:15:21,059 --> 00:15:24,779
for my config I'm gonna see if the

00:15:23,189 --> 00:15:29,240
features there it is I'll turn the

00:15:24,779 --> 00:15:34,629
boolean and if it's not we'll turn false

00:15:29,240 --> 00:15:36,740
okay number one done jinda template test

00:15:34,629 --> 00:15:37,819
just to remind you what that looks like

00:15:36,740 --> 00:15:40,519
it looks like this

00:15:37,819 --> 00:15:43,940
if PyCon is active feature hype icon

00:15:40,519 --> 00:15:46,129
else hello Cindy MS hi so it turns out

00:15:43,940 --> 00:15:48,410
we can add a template test to Jinja in

00:15:46,129 --> 00:15:51,470
our intent has two flasks in one line of

00:15:48,410 --> 00:15:53,360
code there's a whole API for flask and

00:15:51,470 --> 00:15:56,329
this is one of the hooks that it has and

00:15:53,360 --> 00:15:59,600
it looks like this app dot add template

00:15:56,329 --> 00:16:00,980
test it has two arguments one is a

00:15:59,600 --> 00:16:05,180
function reference that we want it to

00:16:00,980 --> 00:16:07,040
call so we'll call in config the real

00:16:05,180 --> 00:16:09,439
extension has a much nicer way of doing

00:16:07,040 --> 00:16:12,170
this but whatever it's fine for now in

00:16:09,439 --> 00:16:13,730
config and the name the second one is

00:16:12,170 --> 00:16:18,290
the name of what we want to use in the

00:16:13,730 --> 00:16:22,040
Jinja layer so active feature okay so I

00:16:18,290 --> 00:16:25,250
did this I committed it and all of my

00:16:22,040 --> 00:16:29,629
Travis CI builds went red and I was like

00:16:25,250 --> 00:16:33,319
huh weird so I looked at the API and I

00:16:29,629 --> 00:16:39,259
was like I'm using it right weird can

00:16:33,319 --> 00:16:42,439
anybody see the problem here yeah yeah I

00:16:39,259 --> 00:16:44,209
was running version 8 this is something

00:16:42,439 --> 00:16:46,189
I want to talk about as application

00:16:44,209 --> 00:16:48,829
developers you deal with one version of

00:16:46,189 --> 00:16:51,380
flask as extension developers you deal

00:16:48,829 --> 00:16:54,649
with as many as you care to support and

00:16:51,380 --> 00:16:56,660
so you'll be doing this a lot a flask is

00:16:54,649 --> 00:16:59,509
under rapid development and it has and

00:16:56,660 --> 00:17:01,519
dot 10 specifically rewrote a lot of the

00:16:59,509 --> 00:17:03,860
API and added a lot of nice things to do

00:17:01,519 --> 00:17:05,809
this kind of stuff so it's great but you

00:17:03,860 --> 00:17:07,850
have to be really careful so what I

00:17:05,809 --> 00:17:10,520
ended up having to do is actually do has

00:17:07,850 --> 00:17:12,919
a doron the app and check for that API

00:17:10,520 --> 00:17:14,539
call and because that's the standard

00:17:12,919 --> 00:17:16,789
going forward I want to use that going

00:17:14,539 --> 00:17:19,850
forward but if it's not there then I

00:17:16,789 --> 00:17:23,059
need to fall back to editing basically

00:17:19,850 --> 00:17:24,890
dictionaries directly I will say that

00:17:23,059 --> 00:17:25,400
Travis CI a is amazing for stuff like

00:17:24,890 --> 00:17:27,260
this

00:17:25,400 --> 00:17:29,929
and if you're curious you can look at

00:17:27,260 --> 00:17:32,179
the github for Mike Travis CI config and

00:17:29,929 --> 00:17:33,890
and see how I did it I can test every

00:17:32,179 --> 00:17:35,720
version of Python I support vs. every

00:17:33,890 --> 00:17:41,090
version of flask I support and it all

00:17:35,720 --> 00:17:43,460
works great ok template test done so the

00:17:41,090 --> 00:17:45,590
last one is the is active module level

00:17:43,460 --> 00:17:47,090
function so just to remind you what that

00:17:45,590 --> 00:17:50,960
looks like

00:17:47,090 --> 00:17:53,090
feature is active PyCon okay so this is

00:17:50,960 --> 00:17:56,450
going to be a little confusing I hope it

00:17:53,090 --> 00:17:58,429
was clear what I'm doing is not as

00:17:56,450 --> 00:17:59,659
important as how I'm doing it be a

00:17:58,429 --> 00:18:01,789
little example I'm going to give you is

00:17:59,659 --> 00:18:03,460
a little bit contrived but I wanted to

00:18:01,789 --> 00:18:06,260
show you part of this kind of thing so

00:18:03,460 --> 00:18:09,890
let me see if I can explain okay this is

00:18:06,260 --> 00:18:12,200
a module level function it is not the

00:18:09,890 --> 00:18:14,299
extension object we created earlier if

00:18:12,200 --> 00:18:17,929
you notice on line five we throw it away

00:18:14,299 --> 00:18:20,450
basically it doesn't have the marginal

00:18:17,929 --> 00:18:23,059
function is active has no idea where

00:18:20,450 --> 00:18:25,100
that is how to get to it but I need it

00:18:23,059 --> 00:18:29,140
to be able to call that it cut in config

00:18:25,100 --> 00:18:32,149
method so you might look at this and go

00:18:29,140 --> 00:18:34,070
when I need to save it and like pass it

00:18:32,149 --> 00:18:36,409
to the the is active function or

00:18:34,070 --> 00:18:38,240
something that's just gross I mean it's

00:18:36,409 --> 00:18:40,100
it would work here but like if I had

00:18:38,240 --> 00:18:41,600
multiple files I'd have to start

00:18:40,100 --> 00:18:45,559
importing things and I get circular

00:18:41,600 --> 00:18:48,289
imports and uh gross so but what I do

00:18:45,559 --> 00:18:49,730
have I can get to the current app that

00:18:48,289 --> 00:18:54,409
we already saved something in there

00:18:49,730 --> 00:18:56,450
already so the short version is we can

00:18:54,409 --> 00:18:59,000
save ourselves in the current and in the

00:18:56,450 --> 00:19:01,039
app so if all that wasn't clear at all

00:18:59,000 --> 00:19:03,409
this is the takeaway part so this is

00:19:01,039 --> 00:19:05,840
what I want to show you flask has a

00:19:03,409 --> 00:19:09,200
special registry for extension it's

00:19:05,840 --> 00:19:10,970
called app dot extensions the key is the

00:19:09,200 --> 00:19:13,669
name of your extension and you can store

00:19:10,970 --> 00:19:15,590
anything you like in here in this case

00:19:13,669 --> 00:19:17,860
I'm just going to store myself I'm just

00:19:15,590 --> 00:19:20,299
gonna go along with the ride for the app

00:19:17,860 --> 00:19:21,710
you might say well wait a minute I

00:19:20,299 --> 00:19:24,559
thought we didn't want to hook those two

00:19:21,710 --> 00:19:26,779
up together right I don't let say the

00:19:24,559 --> 00:19:28,309
app with the extension because I want

00:19:26,779 --> 00:19:30,980
the extension to be able to run on any

00:19:28,309 --> 00:19:33,620
Advocates yes you know maybe a Sanchi at

00:19:30,980 --> 00:19:35,210
once and run it but the app is the heart

00:19:33,620 --> 00:19:36,890
and we're already modifying and we're

00:19:35,210 --> 00:19:38,539
already doing things to it so it's okay

00:19:36,890 --> 00:19:40,549
just work for the extension to ride

00:19:38,539 --> 00:19:43,669
along with the app so that's what we're

00:19:40,549 --> 00:19:46,549
gonna do and that means writing that

00:19:43,669 --> 00:19:48,140
module-level function is super easy it's

00:19:46,549 --> 00:19:52,760
actually one line which I've split here

00:19:48,140 --> 00:19:54,230
into two just for readability the so it

00:19:52,760 --> 00:19:56,059
says feature flagger I look in the

00:19:54,230 --> 00:19:58,429
current app because that's why that's a

00:19:56,059 --> 00:20:01,170
global I can get to it I look in its

00:19:58,429 --> 00:20:03,000
extension registry for our stuff

00:20:01,170 --> 00:20:05,700
and that's myself was just sitting there

00:20:03,000 --> 00:20:09,510
like all the in config like anything

00:20:05,700 --> 00:20:11,190
else so that's all we do alright we are

00:20:09,510 --> 00:20:13,650
done we have sore things in the config

00:20:11,190 --> 00:20:17,100
we have a template test and we have that

00:20:13,650 --> 00:20:20,460
is active function alright to summarize

00:20:17,100 --> 00:20:22,920
what did we learn we learned use in an

00:20:20,460 --> 00:20:25,440
app because application factories we

00:20:22,920 --> 00:20:27,630
learn how to set config defaults we

00:20:25,440 --> 00:20:30,240
learned about calling flask hooks with

00:20:27,630 --> 00:20:31,920
that add template test and we also

00:20:30,240 --> 00:20:33,480
learned that 10 is a trap

00:20:31,920 --> 00:20:36,420
and we have to be careful about what you

00:20:33,480 --> 00:20:38,040
know what things are available and we

00:20:36,420 --> 00:20:40,460
also learn how to use the extension

00:20:38,040 --> 00:20:44,120
registry to get to our extension later

00:20:40,460 --> 00:20:46,680
ok so I hope you're all saying oh

00:20:44,120 --> 00:20:48,990
develop it so easy so straightforward

00:20:46,680 --> 00:20:51,900
great why have I never done this before

00:20:48,990 --> 00:20:54,870
and then wait a minute

00:20:51,900 --> 00:20:56,490
my use case is way less trivial I have

00:20:54,870 --> 00:21:01,140
the database I have other stuff I need

00:20:56,490 --> 00:21:04,020
to do so since there's not a lot of

00:21:01,140 --> 00:21:05,430
documentation on this out there I wanted

00:21:04,020 --> 00:21:07,380
to show you sort of a sampler of

00:21:05,430 --> 00:21:09,240
extensions that I think are good and

00:21:07,380 --> 00:21:11,760
that are good tool ones to learn from

00:21:09,240 --> 00:21:13,470
and crib from the first one I want to

00:21:11,760 --> 00:21:14,100
talk about is debug to class debug

00:21:13,470 --> 00:21:16,290
toolbar

00:21:14,100 --> 00:21:18,330
it's a great example of a highly complex

00:21:16,290 --> 00:21:20,130
extension it was originally written by

00:21:18,330 --> 00:21:21,360
Micheal vent Ellington which I hope I

00:21:20,130 --> 00:21:23,280
have his name right and it's currently

00:21:21,360 --> 00:21:26,790
maintained my map good who I work with

00:21:23,280 --> 00:21:29,610
at LinkedIn it is a port of the Jango

00:21:26,790 --> 00:21:30,240
debug toolbar so in your flask app what

00:21:29,610 --> 00:21:31,980
you'll get

00:21:30,240 --> 00:21:34,920
it's a sidebar with a whole bunch of

00:21:31,980 --> 00:21:36,750
panels to it it shows you you know HTTP

00:21:34,920 --> 00:21:38,490
headers that are active

00:21:36,750 --> 00:21:40,320
what templates were rendered what

00:21:38,490 --> 00:21:42,330
variables are passed those templates and

00:21:40,320 --> 00:21:44,010
I'll show you your sequel alchemy

00:21:42,330 --> 00:21:47,280
queries and these for logging and things

00:21:44,010 --> 00:21:49,920
like that this is a little hard to read

00:21:47,280 --> 00:21:54,300
but um and I've this is a screenshot off

00:21:49,920 --> 00:21:57,000
of github basically so and I've given

00:21:54,300 --> 00:21:58,890
you no other context but I think this is

00:21:57,000 --> 00:22:00,540
actually pretty readable if you can't

00:21:58,890 --> 00:22:02,490
see it look at the slides later but it's

00:22:00,540 --> 00:22:04,230
so the top line says init app so it's

00:22:02,490 --> 00:22:06,810
using that same split as we already saw

00:22:04,230 --> 00:22:08,700
so within an app and then the first two

00:22:06,810 --> 00:22:11,310
lines are iterating fruits and things

00:22:08,700 --> 00:22:13,800
and it's setting app config set default

00:22:11,310 --> 00:22:14,950
so it's just setting the app default and

00:22:13,800 --> 00:22:17,140
it checks a couple configs

00:22:14,950 --> 00:22:19,720
paranoid purposes and then the middle

00:22:17,140 --> 00:22:21,280
says debug toolbar load panels app it's

00:22:19,720 --> 00:22:23,350
actually passing the app to sub

00:22:21,280 --> 00:22:25,990
extensions so it can do more

00:22:23,350 --> 00:22:27,550
configuration and then the rest of it is

00:22:25,990 --> 00:22:30,850
just calling template I was just calling

00:22:27,550 --> 00:22:33,040
a hooks app before request call me when

00:22:30,850 --> 00:22:35,110
the request starts app after request

00:22:33,040 --> 00:22:38,020
call this method when the app ends when

00:22:35,110 --> 00:22:39,340
the request ends teardown request so the

00:22:38,020 --> 00:22:41,140
last this the one over there's app

00:22:39,340 --> 00:22:43,150
dispatch request it's actually monkey

00:22:41,140 --> 00:22:45,670
patching the dispatch request to be able

00:22:43,150 --> 00:22:47,080
to to view that it to handle that view

00:22:45,670 --> 00:22:48,220
and do other things like that so was

00:22:47,080 --> 00:22:50,950
actually monkey patching it to some

00:22:48,220 --> 00:22:53,920
extent and the last two lines are just

00:22:50,950 --> 00:22:56,050
adding you all routes and blueprints so

00:22:53,920 --> 00:22:56,760
it can do CSS and JavaScript and things

00:22:56,050 --> 00:23:03,030
like that

00:22:56,760 --> 00:23:07,540
so other great extensions flask see surf

00:23:03,030 --> 00:23:09,520
is a CSRF protection library and so it's

00:23:07,540 --> 00:23:11,590
a great one to look at if you're doing

00:23:09,520 --> 00:23:13,450
request processing or you're handling

00:23:11,590 --> 00:23:14,470
cookies because it does things like that

00:23:13,450 --> 00:23:15,150
like that does a lot of that sort of

00:23:14,470 --> 00:23:18,760
stuff

00:23:15,150 --> 00:23:21,610
blast admin flask admin is kind of a

00:23:18,760 --> 00:23:23,650
port of the flask or the Django admin

00:23:21,610 --> 00:23:24,580
interface it integrates with sequel

00:23:23,650 --> 00:23:26,740
alchemy

00:23:24,580 --> 00:23:27,850
it has blueprints and as static files it

00:23:26,740 --> 00:23:30,040
does a lot of things like that it's

00:23:27,850 --> 00:23:31,960
another one good one to look at it has I

00:23:30,040 --> 00:23:33,760
think a slightly different approach to

00:23:31,960 --> 00:23:35,080
using seek welcoming than flash debug

00:23:33,760 --> 00:23:37,270
toolbar so you can kind of compare and

00:23:35,080 --> 00:23:39,790
contrast between the two and then

00:23:37,270 --> 00:23:42,460
finally a flask classy which I love I

00:23:39,790 --> 00:23:46,090
love this extension it adds class-based

00:23:42,460 --> 00:23:49,720
view so you can have an object with get

00:23:46,090 --> 00:23:52,780
post put delete methods that will map

00:23:49,720 --> 00:23:54,730
those HTTP methods directly to those

00:23:52,780 --> 00:23:56,980
things so you can create an API really

00:23:54,730 --> 00:24:01,840
really easily and it's pretty fantastic

00:23:56,980 --> 00:24:03,220
for that ok with that I am I'm done so

00:24:01,840 --> 00:24:06,160
thank you so much for watching and you

00:24:03,220 --> 00:24:08,520
need to reach me I am I am here so thank

00:24:06,160 --> 00:24:08,520
you so much

00:24:13,360 --> 00:24:17,810
meagan cough wads yes all right I we

00:24:16,670 --> 00:24:20,450
have five minutes for questions so if

00:24:17,810 --> 00:24:22,340
anybody would like to pick my brain and

00:24:20,450 --> 00:24:23,750
come up to the microphone and I won't

00:24:22,340 --> 00:24:28,220
try to remember to repeat your question

00:24:23,750 --> 00:24:29,540
which I've been told to do or if I've

00:24:28,220 --> 00:24:40,040
stunned you all in silence let us find

00:24:29,540 --> 00:24:42,430
you can you give me a sense for within

00:24:40,040 --> 00:24:45,650
within LinkedIn how much do you use

00:24:42,430 --> 00:24:47,060
extensions versus blueprints for your

00:24:45,650 --> 00:24:49,040
own code rather than things that are

00:24:47,060 --> 00:24:53,930
being produced externally it really

00:24:49,040 --> 00:24:55,790
depends so my my team is very workflow

00:24:53,930 --> 00:24:57,890
heavy so we have a very very big and

00:24:55,790 --> 00:25:00,500
very workflow enterprise-e kind of thing

00:24:57,890 --> 00:25:02,120
so we use blueprints extensively and we

00:25:00,500 --> 00:25:04,310
use we build our own extensions

00:25:02,120 --> 00:25:07,760
extensively we have a couple that we've

00:25:04,310 --> 00:25:09,980
done in terms of the other thing so

00:25:07,760 --> 00:25:11,540
flask is a Python is generally used for

00:25:09,980 --> 00:25:12,950
tooling and internal deployment and

00:25:11,540 --> 00:25:15,170
architecture and other stuff like that

00:25:12,950 --> 00:25:17,240
as well as internal apps so mostly

00:25:15,170 --> 00:25:19,280
blueprints are probably used more we do

00:25:17,240 --> 00:25:20,480
have a few extensions like that I've

00:25:19,280 --> 00:25:22,400
tried to open-source all the ones we

00:25:20,480 --> 00:25:24,140
have so it sort of depends on the use

00:25:22,400 --> 00:25:26,660
case we have such a wide range of stuff

00:25:24,140 --> 00:25:28,580
that's why we use flask because it's so

00:25:26,660 --> 00:25:30,700
flexible does that answer your question

00:25:28,580 --> 00:25:30,700
okay

00:25:40,400 --> 00:25:42,460

YouTube URL: https://www.youtube.com/watch?v=OXN3wuHUBP0


