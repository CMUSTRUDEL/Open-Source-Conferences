Title: Dan Langer: A Scenic Drive through the Django Request-Response Cycle - PyCon 2014
Publication date: 2014-04-24
Playlist: PyCon 2014
Description: 
	Speaker: Dan Langer

A simple "Hello World!" page, served via Django, passes though a surprising number of layers & components. For a newcomer to the language or the platform, this can be overwhelming at the start. Here I'll take you on a drive through Django's request-response cycle, focusing on using its layered model to understand what's going on and get things done.

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:04,670 --> 00:00:11,759
actually like it actual i was even

00:00:09,690 --> 00:00:13,679
waving frantically wing and nervous and

00:00:11,759 --> 00:00:17,850
i'll be standing next to alright but

00:00:13,679 --> 00:00:20,720
hopefully if 2500 yeah we should have a

00:00:17,850 --> 00:00:20,720
couple of minutes for talk

00:00:41,820 --> 00:00:45,980
f 5 17 is all good

00:01:03,600 --> 00:01:06,379
that's right

00:01:18,110 --> 00:01:21,640
at that time

00:01:44,410 --> 00:01:54,010
it's hard to please everyone I guess all

00:01:50,540 --> 00:01:54,010
the different ways people want to use

00:02:07,800 --> 00:02:11,530
collection of dongles for every possible

00:02:09,789 --> 00:02:17,170
situation I'm betting they still don't

00:02:11,530 --> 00:02:22,950
have mine down here thank God is it is

00:02:17,170 --> 00:02:22,950
it eh hdmi like now let's display board

00:02:27,840 --> 00:02:34,090
all right it's about time to get started

00:02:30,630 --> 00:02:35,560
the first talk in this session is by Dan

00:02:34,090 --> 00:02:37,300
Langer he's gonna give his a scenic

00:02:35,560 --> 00:02:45,160
drive through the Django request

00:02:37,300 --> 00:02:48,099
response cycle give him a hand thank you

00:02:45,160 --> 00:02:49,989
now seymour hoffman's I me my name is

00:02:48,099 --> 00:02:52,720
Dan Langer I'm a developer and manager

00:02:49,989 --> 00:02:54,190
wave in Toronto or a small or a startup

00:02:52,720 --> 00:02:56,799
that helps small businesses be

00:02:54,190 --> 00:02:58,450
successful with their online tools and

00:02:56,799 --> 00:03:00,010
I'm gonna talk about the generous with

00:02:58,450 --> 00:03:01,120
request and response cycle because

00:03:00,010 --> 00:03:03,610
that's where I spend the majority of my

00:03:01,120 --> 00:03:06,160
time when I'm working with Django now

00:03:03,610 --> 00:03:08,319
I've been doing Django for about pull

00:03:06,160 --> 00:03:09,549
over two years and Jago does have a lot

00:03:08,319 --> 00:03:13,690
of moving parts that something I've come

00:03:09,549 --> 00:03:15,190
to accept enjoy deal with but when

00:03:13,690 --> 00:03:17,260
you're starting out it's not at all

00:03:15,190 --> 00:03:18,670
obvious how they all fit together it's

00:03:17,260 --> 00:03:20,440
recently going working with some guys on

00:03:18,670 --> 00:03:22,269
my team who are experienced to us but

00:03:20,440 --> 00:03:24,069
rails devs and just coming to django

00:03:22,269 --> 00:03:26,260
they went and we're struggling with

00:03:24,069 --> 00:03:28,269
notions like I have this variable how do

00:03:26,260 --> 00:03:30,940
I get it into a template which appeared

00:03:28,269 --> 00:03:32,019
obvious to me but apparently isn't if

00:03:30,940 --> 00:03:33,400
you're coming from background that

00:03:32,019 --> 00:03:35,019
doesn't have so many different layers of

00:03:33,400 --> 00:03:37,450
moving parts so I'm going to talk about

00:03:35,019 --> 00:03:39,040
that and in particular how request turns

00:03:37,450 --> 00:03:40,750
into response which i think is one of

00:03:39,040 --> 00:03:43,540
the most fundamental not the most

00:03:40,750 --> 00:03:45,220
fundamental operations Django now

00:03:43,540 --> 00:03:47,230
speaking with up all those moving parts

00:03:45,220 --> 00:03:49,359
and without giving away the ending this

00:03:47,230 --> 00:03:50,470
is somewhat how it all works and it's

00:03:49,359 --> 00:03:52,209
great out for a reason because we'll

00:03:50,470 --> 00:03:53,410
talk about it as we go through it but

00:03:52,209 --> 00:03:55,510
you can see there's a lot going on here

00:03:53,410 --> 00:03:56,920
this a number words repeated there's

00:03:55,510 --> 00:03:58,630
sort of a u-shaped thing going on

00:03:56,920 --> 00:04:00,519
there's the word middleware in a bunch

00:03:58,630 --> 00:04:02,769
of places so let's talk about what this

00:04:00,519 --> 00:04:04,180
actually means and if we're gonna do

00:04:02,769 --> 00:04:06,849
that we should start with the request

00:04:04,180 --> 00:04:09,310
because it all begins there so in a log

00:04:06,849 --> 00:04:12,069
a long long time ago in a console far

00:04:09,310 --> 00:04:14,470
away the galaxy called Toronto someone

00:04:12,069 --> 00:04:16,600
typed this into their command prompt

00:04:14,470 --> 00:04:19,150
they said I want to curl out to Daniel

00:04:16,600 --> 00:04:21,670
anger calm / hello / MTO and they

00:04:19,150 --> 00:04:23,590
pressed enter and then they got this

00:04:21,670 --> 00:04:24,700
and this is Carl saying what it's

00:04:23,590 --> 00:04:27,100
actually going to do and that's what

00:04:24,700 --> 00:04:31,960
it's doing it's sending her up a HTTP

00:04:27,100 --> 00:04:33,550
1.1 get request to / hello / MTL saying

00:04:31,960 --> 00:04:35,710
i want a response from the host Daniel

00:04:33,550 --> 00:04:38,560
Agger calm and I'm going to accept just

00:04:35,710 --> 00:04:39,970
about anything that comes back and from

00:04:38,560 --> 00:04:41,290
there it went across the internet and

00:04:39,970 --> 00:04:43,210
I'm not going to talk about how the

00:04:41,290 --> 00:04:45,100
internet works because that is a talk in

00:04:43,210 --> 00:04:46,840
and of itself but trust me when that

00:04:45,100 --> 00:04:48,880
person being me in this case pressed

00:04:46,840 --> 00:04:50,920
enter the request did go out across the

00:04:48,880 --> 00:04:52,810
internet and ended up at something that

00:04:50,920 --> 00:04:54,910
looks like this in a data center what

00:04:52,810 --> 00:04:57,160
we're going to call the web server now

00:04:54,910 --> 00:04:59,530
in practice this web server was probably

00:04:57,160 --> 00:05:01,720
engine ax or Apache but that's just use

00:04:59,530 --> 00:05:03,730
popular nowadays bottom line is it's a

00:05:01,720 --> 00:05:06,250
web server and the web server

00:05:03,730 --> 00:05:08,650
fundamentally takes a request and gives

00:05:06,250 --> 00:05:10,330
back out a response depending on how it

00:05:08,650 --> 00:05:11,920
does that changes on what kind of

00:05:10,330 --> 00:05:13,330
request we're talking about it's a

00:05:11,920 --> 00:05:16,210
static request if it's something simple

00:05:13,330 --> 00:05:17,260
a file it's just on the machine the web

00:05:16,210 --> 00:05:19,210
server will probably just handle it

00:05:17,260 --> 00:05:21,040
itself stream the response back out and

00:05:19,210 --> 00:05:22,600
get on with itself but if it's more

00:05:21,040 --> 00:05:25,270
complex if sitting something that's

00:05:22,600 --> 00:05:27,570
powered by a web application like Django

00:05:25,270 --> 00:05:29,830
let's say gets a little more complicated

00:05:27,570 --> 00:05:31,600
is that it we have to ask the question

00:05:29,830 --> 00:05:34,540
well how does the web server itself

00:05:31,600 --> 00:05:36,610
which may be written in C or something

00:05:34,540 --> 00:05:38,110
how does that communicate with the

00:05:36,610 --> 00:05:40,330
Python process that's rounding Django

00:05:38,110 --> 00:05:43,000
and this has changed in the past ten

00:05:40,330 --> 00:05:45,370
years or so back in the day of the early

00:05:43,000 --> 00:05:46,690
2000s there wasn't a simple way to do it

00:05:45,370 --> 00:05:47,950
different web servers did it in

00:05:46,690 --> 00:05:49,900
different ways different frameworks to

00:05:47,950 --> 00:05:51,580
it in different ways some web server

00:05:49,900 --> 00:05:53,710
support mod Python some frameworks port

00:05:51,580 --> 00:05:55,450
a fast CGI and it meant that you assert

00:05:53,710 --> 00:05:57,010
your choice of web server and web

00:05:55,450 --> 00:05:59,380
framework was heavily coupled together

00:05:57,010 --> 00:06:00,850
which both slowed innovation in a

00:05:59,380 --> 00:06:01,990
pissed-off web server people up saints

00:06:00,850 --> 00:06:03,520
deal with framework people and pissed

00:06:01,990 --> 00:06:06,240
off framework people excited to care

00:06:03,520 --> 00:06:09,880
about web surfers and nobody like that

00:06:06,240 --> 00:06:11,590
so what we ended up with was pep 333

00:06:09,880 --> 00:06:12,760
called whiskey the web server gateway

00:06:11,590 --> 00:06:15,070
interface and it's the answer to the

00:06:12,760 --> 00:06:17,140
question of how to python frameworks and

00:06:15,070 --> 00:06:20,110
web servers in your act in a common and

00:06:17,140 --> 00:06:22,330
simple way and by web applications i'm

00:06:20,110 --> 00:06:25,120
talking about things like django the big

00:06:22,330 --> 00:06:27,850
value of whiskey and pep 33 when it came

00:06:25,120 --> 00:06:29,770
out was simplicity in these diplomat

00:06:27,850 --> 00:06:31,090
because the guys who wrote it knew that

00:06:29,770 --> 00:06:32,740
if it wasn't simple and if it wasn't

00:06:31,090 --> 00:06:34,300
easy to switch no one would actually

00:06:32,740 --> 00:06:36,610
do anything it would be left where we

00:06:34,300 --> 00:06:38,889
were so they went and they made it

00:06:36,610 --> 00:06:40,870
simple and they made one real entry

00:06:38,889 --> 00:06:42,400
point between your whiskey layer and

00:06:40,870 --> 00:06:44,550
your web server that the web server guys

00:06:42,400 --> 00:06:47,440
develop and your web application and

00:06:44,550 --> 00:06:50,020
this is about your minimal possible

00:06:47,440 --> 00:06:52,270
whiskey compatible application you can

00:06:50,020 --> 00:06:54,069
see the whiskey protocol which is a call

00:06:52,270 --> 00:06:56,110
and I'm saying callable deliberately and

00:06:54,069 --> 00:06:58,810
not function a callable that takes two

00:06:56,110 --> 00:07:00,729
arguments which have particular formats

00:06:58,810 --> 00:07:03,639
of the standard talks about does some

00:07:00,729 --> 00:07:06,520
stuff to it and then returns an iterable

00:07:03,639 --> 00:07:07,750
of strings now whiskey is careful not to

00:07:06,520 --> 00:07:09,849
talk about how the web server actually

00:07:07,750 --> 00:07:12,340
deals with this it just specifies that

00:07:09,849 --> 00:07:13,659
given this it can run in a particular

00:07:12,340 --> 00:07:16,090
way and it will get back something that

00:07:13,659 --> 00:07:17,560
handles a web response the other thing

00:07:16,090 --> 00:07:19,990
to highlight there is that there's

00:07:17,560 --> 00:07:21,669
nothing stateful in it every request has

00:07:19,990 --> 00:07:23,199
its own Enver on has its own start

00:07:21,669 --> 00:07:25,630
response there's nothing in there that

00:07:23,199 --> 00:07:27,460
lets by definition the whiskey keep

00:07:25,630 --> 00:07:28,960
track of one response to another so any

00:07:27,460 --> 00:07:31,060
type of persistence any type of session

00:07:28,960 --> 00:07:34,720
management has to happen down in the web

00:07:31,060 --> 00:07:36,370
application layer now probably thinking

00:07:34,720 --> 00:07:37,539
if I've said the whiskey is the way that

00:07:36,370 --> 00:07:39,370
web servers communicate will have

00:07:37,539 --> 00:07:41,469
applications and if Django is web

00:07:39,370 --> 00:07:43,659
application that runs does it speak

00:07:41,469 --> 00:07:46,150
whiskey the answer of course is yes so

00:07:43,659 --> 00:07:48,370
in general and your whiskey up your

00:07:46,150 --> 00:07:50,710
whiskey layer is in Django core dot

00:07:48,370 --> 00:07:53,110
handlers dog whiskey handlers and with a

00:07:50,710 --> 00:07:55,630
couple things pulled off for simplicity

00:07:53,110 --> 00:07:57,610
it looks something like this if you look

00:07:55,630 --> 00:07:59,830
at the shape of it compared to the last

00:07:57,610 --> 00:08:03,639
slide it's very similar and that they

00:07:59,830 --> 00:08:05,110
are both calls they both take two

00:08:03,639 --> 00:08:06,940
arguments and we're on in start response

00:08:05,110 --> 00:08:09,520
which are customarily called that but

00:08:06,940 --> 00:08:11,800
not defined in the server and they both

00:08:09,520 --> 00:08:14,830
great turn something in this case the

00:08:11,800 --> 00:08:16,210
somthing is self get response and you

00:08:14,830 --> 00:08:18,219
can see that self dot get response is

00:08:16,210 --> 00:08:19,509
really the meat of this thing self-doubt

00:08:18,219 --> 00:08:21,340
get response itself there two

00:08:19,509 --> 00:08:22,270
interesting things about it we're going

00:08:21,340 --> 00:08:24,370
to spend a lot of time going into

00:08:22,270 --> 00:08:27,550
exactly how that function works first

00:08:24,370 --> 00:08:29,229
interesting thing is that it's not

00:08:27,550 --> 00:08:31,330
defined on whiskey handler itself it's

00:08:29,229 --> 00:08:32,380
defined on base base handler which I

00:08:31,330 --> 00:08:34,029
thought was weird when i first started

00:08:32,380 --> 00:08:36,190
looking into this but it turns out

00:08:34,029 --> 00:08:38,770
there's one other class in Django that

00:08:36,190 --> 00:08:40,930
sub classes based off base handler only

00:08:38,770 --> 00:08:43,120
one and what that is is the thing that

00:08:40,930 --> 00:08:44,219
runs the Django test client so the one

00:08:43,120 --> 00:08:45,959
you're writing integration

00:08:44,219 --> 00:08:48,060
when you're firing off the Django test

00:08:45,959 --> 00:08:50,189
client as much as possible it's the

00:08:48,060 --> 00:08:52,439
exact same code path as you would get

00:08:50,189 --> 00:08:53,910
through whiskey you go into your normal

00:08:52,439 --> 00:08:56,279
path you just skip the whiskey Hanlon

00:08:53,910 --> 00:08:59,189
where the other interesting thing about

00:08:56,279 --> 00:09:01,230
how this is structured is that self dot

00:08:59,189 --> 00:09:02,670
get response takes request object which

00:09:01,230 --> 00:09:03,959
you'll see is not part of the whiskey

00:09:02,670 --> 00:09:06,329
standard it's not Enver on or start

00:09:03,959 --> 00:09:08,129
response request object is something

00:09:06,329 --> 00:09:09,899
that's created in that first ellipses

00:09:08,129 --> 00:09:11,550
stout area and it's a django structure

00:09:09,899 --> 00:09:12,660
that encompasses the request and

00:09:11,550 --> 00:09:15,870
everything that's needed to understand

00:09:12,660 --> 00:09:17,939
that request this layer Django Cordell

00:09:15,870 --> 00:09:19,319
whiskey handlers is the last place in

00:09:17,939 --> 00:09:21,180
Django that we actually see deal with

00:09:19,319 --> 00:09:22,889
whiskey so the rest urge angle below it

00:09:21,180 --> 00:09:24,060
doesn't care about how we got there it

00:09:22,889 --> 00:09:29,040
just cares about what it needs in order

00:09:24,060 --> 00:09:31,230
to run so jump into port up face

00:09:29,040 --> 00:09:33,540
handlers this is really what happens in

00:09:31,230 --> 00:09:35,069
get response base handler itself based

00:09:33,540 --> 00:09:37,079
on what I'll get response is that main

00:09:35,069 --> 00:09:39,509
event loop with a request response cycle

00:09:37,079 --> 00:09:41,100
so to understand how our questions into

00:09:39,509 --> 00:09:43,980
response it's really understanding how

00:09:41,100 --> 00:09:45,750
this works these are the sort of basic

00:09:43,980 --> 00:09:47,519
steps in it but before we get into that

00:09:45,750 --> 00:09:50,220
if we look at the list we see the word

00:09:47,519 --> 00:09:52,500
middleware is there a lot in fact on the

00:09:50,220 --> 00:09:53,879
six lines that are in there but we're

00:09:52,500 --> 00:09:56,459
middleware is involved in four of them

00:09:53,879 --> 00:09:57,959
so let's take a brief digression to what

00:09:56,459 --> 00:09:59,910
I mean when I say middle were before we

00:09:57,959 --> 00:10:02,399
see what they means if you're coming

00:09:59,910 --> 00:10:04,019
from a more enterprising background when

00:10:02,399 --> 00:10:05,399
you hear middleware you'll likely think

00:10:04,019 --> 00:10:07,559
something big something heavy something

00:10:05,399 --> 00:10:09,480
like oracle fusion or jboss are in

00:10:07,559 --> 00:10:11,220
common something that your boss's boss's

00:10:09,480 --> 00:10:12,839
boss bought for several million dollars

00:10:11,220 --> 00:10:15,089
this department to run it and it's

00:10:12,839 --> 00:10:16,980
generally a pain to deal with we're

00:10:15,089 --> 00:10:19,769
trying to go for the exact opposite here

00:10:16,980 --> 00:10:21,720
in Django the way the docs describe a

00:10:19,769 --> 00:10:23,459
django middleware is it's a light

00:10:21,720 --> 00:10:25,920
low-level plug-in system for globally

00:10:23,459 --> 00:10:27,870
altering changos input or output the two

00:10:25,920 --> 00:10:31,319
interesting points there are globally

00:10:27,870 --> 00:10:32,550
altering and light light you'll see as

00:10:31,319 --> 00:10:33,750
we get into looking at the structure of

00:10:32,550 --> 00:10:35,699
how these things are designed and how

00:10:33,750 --> 00:10:37,230
they're installed and globally because

00:10:35,699 --> 00:10:38,819
they're really unique thing about Jo

00:10:37,230 --> 00:10:40,920
middleware and the place in the Django

00:10:38,819 --> 00:10:42,360
ecosystem is that they run on every

00:10:40,920 --> 00:10:44,540
request that comes in and every request

00:10:42,360 --> 00:10:46,899
that goes out where as everything else

00:10:44,540 --> 00:10:50,350
gets funneled behind a view or

00:10:46,899 --> 00:10:52,300
something has an example of what light

00:10:50,350 --> 00:10:54,610
means is installing a middleware is

00:10:52,300 --> 00:10:57,189
really just adding a line to a settings

00:10:54,610 --> 00:10:58,600
file you'll find when you open up your

00:10:57,189 --> 00:11:00,519
settings file that comes in the project

00:10:58,600 --> 00:11:03,100
template you've got a middleware classes

00:11:00,519 --> 00:11:04,629
dictionary add something to it it'll get

00:11:03,100 --> 00:11:06,369
picked up when you open it the first

00:11:04,629 --> 00:11:07,420
time you'll see some things there you

00:11:06,369 --> 00:11:09,579
should probably leave them there they're

00:11:07,420 --> 00:11:12,129
pretty useful but you should also add

00:11:09,579 --> 00:11:14,139
your own that you go through so with

00:11:12,129 --> 00:11:15,999
that in mind with our thoughts around

00:11:14,139 --> 00:11:18,009
one middleware means in a django context

00:11:15,999 --> 00:11:20,529
let's look at the first step which is

00:11:18,009 --> 00:11:23,319
your request middleware a request

00:11:20,529 --> 00:11:25,029
middleware what it's for is it handles

00:11:23,319 --> 00:11:27,519
things that happen on all inbound

00:11:25,029 --> 00:11:28,929
requests and i say requests and not view

00:11:27,519 --> 00:11:30,970
calls because at the time we deal with

00:11:28,929 --> 00:11:32,499
the request Miller we don't know how

00:11:30,970 --> 00:11:33,699
it's going to be handled all we know is

00:11:32,499 --> 00:11:36,149
that there's a request that's come in

00:11:33,699 --> 00:11:38,259
through the whiskey layer down to here

00:11:36,149 --> 00:11:39,639
and if we look at the structure of it

00:11:38,259 --> 00:11:41,920
we'll see something that's going to

00:11:39,639 --> 00:11:43,209
repeat a few times in the other epitome

00:11:41,920 --> 00:11:45,309
of what I said one way to middle where

00:11:43,209 --> 00:11:47,379
is your a simple system all the middle

00:11:45,309 --> 00:11:49,839
where is is it plain old Django object

00:11:47,379 --> 00:11:51,999
that has a method process risk request

00:11:49,839 --> 00:11:53,800
in it which takes a request this is a

00:11:51,999 --> 00:11:56,920
pattern will keep seeing and it can

00:11:53,800 --> 00:11:59,709
really return only one of two things it

00:11:56,920 --> 00:12:02,139
can return either HTTP response which is

00:11:59,709 --> 00:12:03,670
a full-on jenga response object and if

00:12:02,139 --> 00:12:05,889
it does that the rest of the pipeline

00:12:03,670 --> 00:12:07,540
stops and it goes there and this is this

00:12:05,889 --> 00:12:09,610
usually happens if you've done your

00:12:07,540 --> 00:12:10,899
authentication in a general requests

00:12:09,610 --> 00:12:13,600
middleware which is a good place to do

00:12:10,899 --> 00:12:14,889
it if user comes who's not offended

00:12:13,600 --> 00:12:16,899
middleware would you shut down the

00:12:14,889 --> 00:12:18,519
process redirect that you to a login

00:12:16,899 --> 00:12:21,490
page without having to go through any of

00:12:18,519 --> 00:12:23,620
the rest of the layers the system or it

00:12:21,490 --> 00:12:25,660
can return none and not as middle words

00:12:23,620 --> 00:12:27,009
way of saying I have no opinion on

00:12:25,660 --> 00:12:28,240
what's happening here I've done my

00:12:27,009 --> 00:12:32,529
business or I haven't done my business

00:12:28,240 --> 00:12:33,819
but keep on going down the stack so this

00:12:32,529 --> 00:12:35,799
middleware in particular you can see

00:12:33,819 --> 00:12:36,939
just takes a request which means it

00:12:35,799 --> 00:12:38,199
doesn't know the view that's going to

00:12:36,939 --> 00:12:40,029
handle this and this is delivered

00:12:38,199 --> 00:12:41,949
because that's the stage where at if

00:12:40,029 --> 00:12:43,929
what you want to do in this request does

00:12:41,949 --> 00:12:45,759
require knowing what if you will handle

00:12:43,929 --> 00:12:46,809
it you could figure it out but really

00:12:45,759 --> 00:12:48,129
you just shouldn't be doing it here

00:12:46,809 --> 00:12:50,949
there's a later step in the process that

00:12:48,129 --> 00:12:53,350
will come to this design for that so

00:12:50,949 --> 00:12:56,470
before we keep going let's take a small

00:12:53,350 --> 00:12:58,819
break to catch up on where we are

00:12:56,470 --> 00:13:00,920
we've gone and we started with her

00:12:58,819 --> 00:13:02,779
request that came from the client client

00:13:00,920 --> 00:13:04,660
did something they pressed curl or they

00:13:02,779 --> 00:13:07,279
went use the web browsers that click

00:13:04,660 --> 00:13:08,749
that request went out went across the

00:13:07,279 --> 00:13:10,399
internet and God landed it landed on a

00:13:08,749 --> 00:13:13,309
web server the web server took the

00:13:10,399 --> 00:13:15,709
request parsed it using going through

00:13:13,309 --> 00:13:17,959
whiskey lair went down into python

00:13:15,709 --> 00:13:19,189
django and in Django first step we've

00:13:17,959 --> 00:13:21,499
gone through is the request of nowhere

00:13:19,189 --> 00:13:23,480
so at this point we have a request

00:13:21,499 --> 00:13:24,740
object we have some stuff done to it we

00:13:23,480 --> 00:13:27,529
haven't really done anything else with

00:13:24,740 --> 00:13:29,959
it which is what's coming next in the

00:13:27,529 --> 00:13:31,790
next thing up on the list is resolving

00:13:29,959 --> 00:13:35,360
that URL into a view that will actually

00:13:31,790 --> 00:13:38,029
deal with it resolving the URL is the

00:13:35,360 --> 00:13:41,449
process by definition of taking a URL

00:13:38,029 --> 00:13:43,309
like Daniel anger calm / hello / MTL and

00:13:41,449 --> 00:13:46,339
mapping that to a view function that's

00:13:43,309 --> 00:13:47,870
going to handle it if your new web

00:13:46,339 --> 00:13:50,029
frameworks are come from a background in

00:13:47,870 --> 00:13:52,999
static sites you look at a URL like that

00:13:50,029 --> 00:13:54,740
if daniel agger calm / hello / MTL and

00:13:52,999 --> 00:13:56,839
you would think that somewhere in the in

00:13:54,740 --> 00:13:58,730
below the webroot was directed called

00:13:56,839 --> 00:14:01,910
hello below that was a directory called

00:13:58,730 --> 00:14:03,800
MTL below that was an index file which

00:14:01,910 --> 00:14:05,389
would show whatever you get in response

00:14:03,800 --> 00:14:07,610
to this and that is how it would work

00:14:05,389 --> 00:14:09,019
but that's not necessarily in fact

00:14:07,610 --> 00:14:11,839
almost certainly how it doesn't work in

00:14:09,019 --> 00:14:14,990
a Django application at this point in

00:14:11,839 --> 00:14:18,620
using your resolution all we really do

00:14:14,990 --> 00:14:20,259
help / hello / MTL is just a mapping

00:14:18,620 --> 00:14:22,220
that we've chosen and we can specify

00:14:20,259 --> 00:14:25,459
using a format that looks something like

00:14:22,220 --> 00:14:26,629
this what / hello / MTL does and it

00:14:25,459 --> 00:14:29,389
where it relates to and the view

00:14:26,629 --> 00:14:31,850
function that gets used for it we can in

00:14:29,389 --> 00:14:32,870
this case I've got a small pattern block

00:14:31,850 --> 00:14:35,209
in the bottom there and what's called a

00:14:32,870 --> 00:14:37,279
URL conf and it shows two different ways

00:14:35,209 --> 00:14:40,100
you can make that mapping the first one

00:14:37,279 --> 00:14:42,649
is simple it's just saying let's map /

00:14:40,100 --> 00:14:44,809
hello / MTL to hi MTL view it just does

00:14:42,649 --> 00:14:46,189
a direct string mapping and the second

00:14:44,809 --> 00:14:48,620
one though is a little more complex it's

00:14:46,189 --> 00:14:51,980
using a regular expression and it's

00:14:48,620 --> 00:14:54,920
saying I want to map / hello / anything

00:14:51,980 --> 00:14:57,740
alphanumeric to high city view so if you

00:14:54,920 --> 00:14:59,769
made a request like / hello / Toronto

00:14:57,740 --> 00:15:02,739
you would end up there

00:14:59,769 --> 00:15:04,689
now it's the important thing is that

00:15:02,739 --> 00:15:08,499
these go in order and that we resolved

00:15:04,689 --> 00:15:09,850
if URL that matches first wins so if we

00:15:08,499 --> 00:15:11,709
switched our URL config to look like

00:15:09,850 --> 00:15:13,300
this this is what used to be and we've

00:15:11,709 --> 00:15:16,629
now just switch the order of the two of

00:15:13,300 --> 00:15:18,339
them in this case / hello / entail would

00:15:16,629 --> 00:15:20,499
go to high city view because it comes in

00:15:18,339 --> 00:15:23,319
it says well what does hello / anything

00:15:20,499 --> 00:15:24,670
map to / hello / MTL matches that so

00:15:23,319 --> 00:15:26,259
let's deal go deal with high city view

00:15:24,670 --> 00:15:30,549
and nothing would actually get to high

00:15:26,259 --> 00:15:33,069
MTL view now when we look at those

00:15:30,549 --> 00:15:35,170
patterns I mentioned the first section

00:15:33,069 --> 00:15:37,089
which is sort of the mapping key i

00:15:35,170 --> 00:15:38,679
mention the second section which is the

00:15:37,089 --> 00:15:39,999
view that gets handled by it but if

00:15:38,679 --> 00:15:42,610
there'd section the name equals high

00:15:39,999 --> 00:15:44,230
city is something important and it's a

00:15:42,610 --> 00:15:47,649
way that we can refer programmatically

00:15:44,230 --> 00:15:50,049
to what this URL looks like what it does

00:15:47,649 --> 00:15:52,299
and referring to that URL anywhere we're

00:15:50,049 --> 00:15:53,619
using it using those two functions the

00:15:52,299 --> 00:15:55,389
bottom of the screen either the URL

00:15:53,619 --> 00:15:57,759
template tag or the reverse function

00:15:55,389 --> 00:15:59,259
just referring to them that way means

00:15:57,759 --> 00:16:01,540
that we've decoupled the relationships

00:15:59,259 --> 00:16:02,709
between pages to the URLs themselves

00:16:01,540 --> 00:16:04,149
which is an interesting idea and

00:16:02,709 --> 00:16:06,249
something you can't do with static pages

00:16:04,149 --> 00:16:07,990
so I'll say that again we've decoupled

00:16:06,249 --> 00:16:09,549
the relationship between two pages and

00:16:07,990 --> 00:16:11,350
the way that we generate the link

00:16:09,549 --> 00:16:13,720
between the actual content of the link

00:16:11,350 --> 00:16:15,790
themselves so all we do is we call a

00:16:13,720 --> 00:16:18,189
reverse High City and Django will give

00:16:15,790 --> 00:16:20,670
me what right now based on how my URLs

00:16:18,189 --> 00:16:23,589
are set right now the URL should be

00:16:20,670 --> 00:16:24,910
doing that means we can do something

00:16:23,589 --> 00:16:27,040
like this and we can go and change our

00:16:24,910 --> 00:16:30,549
URL structure totally we've gone we

00:16:27,040 --> 00:16:32,949
changed hello to high city to Canadian

00:16:30,549 --> 00:16:34,899
High at the start of each URL and now

00:16:32,949 --> 00:16:36,579
everything just still works because

00:16:34,899 --> 00:16:38,619
we've gone and we're everywhere we went

00:16:36,579 --> 00:16:40,629
and use the dynamic look up using that

00:16:38,619 --> 00:16:43,839
template tag or that command to figure

00:16:40,629 --> 00:16:45,850
out the next URL things still go on this

00:16:43,839 --> 00:16:47,740
is an odd thing but trust me you will

00:16:45,850 --> 00:16:48,850
find it very useful nobody a couple

00:16:47,740 --> 00:16:52,149
times you'll thank yourself the Django

00:16:48,850 --> 00:16:54,850
does this for you so with that out of

00:16:52,149 --> 00:16:56,199
the way and seeing how those map we can

00:16:54,850 --> 00:16:59,679
now go back and look at our URL cough

00:16:56,199 --> 00:17:02,169
again and see that / hello / MTL what

00:16:59,679 --> 00:17:04,329
goes and matches to high MTL view now we

00:17:02,169 --> 00:17:05,600
figured that out we're done with this

00:17:04,329 --> 00:17:08,640
step in the process

00:17:05,600 --> 00:17:11,640
now next along the list we've got a few

00:17:08,640 --> 00:17:13,290
middlewares human aware is almost

00:17:11,640 --> 00:17:14,640
exactly the same thing as a request a

00:17:13,290 --> 00:17:15,810
mental matter where it's the degree that

00:17:14,640 --> 00:17:18,900
we're not really going to go into it

00:17:15,810 --> 00:17:20,640
except at this point we now know the

00:17:18,900 --> 00:17:22,079
view object that will handle it so

00:17:20,640 --> 00:17:24,180
whereas a request middleware just took a

00:17:22,079 --> 00:17:27,420
request object view middleware takes a

00:17:24,180 --> 00:17:30,660
request and a view object in all honesty

00:17:27,420 --> 00:17:32,670
I don't use these lot I've never

00:17:30,660 --> 00:17:34,290
actually built one myself in searching

00:17:32,670 --> 00:17:35,880
through all the Django docs and examples

00:17:34,290 --> 00:17:37,710
i found one get one good case of them

00:17:35,880 --> 00:17:40,110
which is the way the jungle had Django

00:17:37,710 --> 00:17:41,700
handles CSRF but it's there if you need

00:17:40,110 --> 00:17:43,500
it and if you find yourself in that

00:17:41,700 --> 00:17:44,580
situation where you want your middle

00:17:43,500 --> 00:17:46,860
word to know something about the view

00:17:44,580 --> 00:17:49,830
itself view middle where is the place

00:17:46,860 --> 00:17:51,450
you do it but the real point and the

00:17:49,830 --> 00:17:54,120
real meat of the request response cycle

00:17:51,450 --> 00:17:57,900
and where you'll do all your work is the

00:17:54,120 --> 00:17:59,940
view function views are where logic lips

00:17:57,900 --> 00:18:02,370
it's where your decide on your rendering

00:17:59,940 --> 00:18:05,490
system it's where you go and we call it

00:18:02,370 --> 00:18:07,890
databases and web services when we

00:18:05,490 --> 00:18:10,200
talked about URL resolution we said that

00:18:07,890 --> 00:18:12,180
/ hello / MTL mapped out to high MTL

00:18:10,200 --> 00:18:14,430
view and this is about as simple as

00:18:12,180 --> 00:18:16,680
possible view that we could do to handle

00:18:14,430 --> 00:18:17,910
that there's no magic going on here it's

00:18:16,680 --> 00:18:20,790
just a function that takes a request

00:18:17,910 --> 00:18:22,590
object and returns something in this

00:18:20,790 --> 00:18:24,840
case that something is HTTP response

00:18:22,590 --> 00:18:26,820
which you just give it a string and it

00:18:24,840 --> 00:18:28,440
will send back your right heading it'll

00:18:26,820 --> 00:18:29,970
give you back a status code with it but

00:18:28,440 --> 00:18:32,430
that's not the only thing that Django

00:18:29,970 --> 00:18:34,080
could respond with some other ones which

00:18:32,430 --> 00:18:36,180
you may find useful and end up dealing

00:18:34,080 --> 00:18:37,800
with you've got your HTTP response

00:18:36,180 --> 00:18:39,660
redirect which is if what you're trying

00:18:37,800 --> 00:18:40,950
to send back is or redirect somewhere

00:18:39,660 --> 00:18:44,070
else and there's a different subclass if

00:18:40,950 --> 00:18:45,420
you want a 301 or a 302 there's a JSON

00:18:44,070 --> 00:18:48,000
response which is just coming at one

00:18:45,420 --> 00:18:50,250
point seven which is designed for if

00:18:48,000 --> 00:18:52,140
you're dealing with JSON it just takes a

00:18:50,250 --> 00:18:53,040
dictionary it will serialize things that

00:18:52,140 --> 00:18:55,590
were properly will send the right

00:18:53,040 --> 00:18:57,600
headers it's there's nothing you can't

00:18:55,590 --> 00:18:58,710
do now but it will save a couple lines

00:18:57,600 --> 00:19:00,850
in the process of what you're typing

00:18:58,710 --> 00:19:03,740
something out

00:19:00,850 --> 00:19:05,690
and there's the streaming HTTP response

00:19:03,740 --> 00:19:08,570
which is very much different from all

00:19:05,690 --> 00:19:10,010
the others whereas all other response

00:19:08,570 --> 00:19:13,700
types including ones that haven't

00:19:10,010 --> 00:19:16,010
mentioned take a full string or body of

00:19:13,700 --> 00:19:17,929
things deal with streaming HTTP response

00:19:16,010 --> 00:19:19,130
takes in a durable and it's designed for

00:19:17,929 --> 00:19:21,010
response is where you haven't yet

00:19:19,130 --> 00:19:23,360
figured out what you're going to send

00:19:21,010 --> 00:19:24,860
you're giving a drill so that once it

00:19:23,360 --> 00:19:26,480
gets back up to the top whiskey will air

00:19:24,860 --> 00:19:28,490
that's where it'll keep calling the

00:19:26,480 --> 00:19:30,679
iterable and iterate through it now on

00:19:28,490 --> 00:19:31,640
one hand this is cool because it means

00:19:30,679 --> 00:19:32,990
you can have a very large or

00:19:31,640 --> 00:19:35,270
long-running response and not worry

00:19:32,990 --> 00:19:36,710
about filling up your memory it's bad

00:19:35,270 --> 00:19:37,970
also because you can have a long-running

00:19:36,710 --> 00:19:41,750
response and not worry about filling out

00:19:37,970 --> 00:19:43,520
your memory so with streaming HTTP

00:19:41,750 --> 00:19:45,320
response it's there it's an available

00:19:43,520 --> 00:19:47,059
tool for you it will break a few other

00:19:45,320 --> 00:19:48,530
middlewares but most of those handle it

00:19:47,059 --> 00:19:51,080
well but think about what you're doing

00:19:48,530 --> 00:19:52,850
when you choose to use it there's a few

00:19:51,080 --> 00:19:54,350
good cases for it but a lot of good

00:19:52,850 --> 00:19:56,000
cases of when you think you're going to

00:19:54,350 --> 00:19:57,200
use this what you should really be doing

00:19:56,000 --> 00:19:59,059
is looking at what you're actually try

00:19:57,200 --> 00:20:00,470
and deliver and saying well is this

00:19:59,059 --> 00:20:02,600
better suited to put in the long-running

00:20:00,470 --> 00:20:04,760
task and email my users is this better

00:20:02,600 --> 00:20:07,580
suited to run offline and then give them

00:20:04,760 --> 00:20:10,610
a push notification but if it's not

00:20:07,580 --> 00:20:12,679
you've got the option but for now we're

00:20:10,610 --> 00:20:14,500
going to stick to HTTP response because

00:20:12,679 --> 00:20:16,760
it's simple and gets at the point now

00:20:14,500 --> 00:20:18,770
I've called this a view function a few

00:20:16,760 --> 00:20:20,330
times because it is just a function but

00:20:18,770 --> 00:20:22,610
that's not the only way you can write

00:20:20,330 --> 00:20:24,230
your view your other option is something

00:20:22,610 --> 00:20:26,120
that looks like this and it's called a

00:20:24,230 --> 00:20:27,980
class-based view because it's a view

00:20:26,120 --> 00:20:30,500
that's based on a class for lack of a

00:20:27,980 --> 00:20:33,320
better name the defining features that

00:20:30,500 --> 00:20:36,260
are they subclass django d use generic

00:20:33,320 --> 00:20:37,549
view and there's a function they're

00:20:36,260 --> 00:20:38,990
called get and there's one called post

00:20:37,549 --> 00:20:41,690
that defines the verbs you're trying to

00:20:38,990 --> 00:20:44,360
work on to use function based use to use

00:20:41,690 --> 00:20:45,710
class-based views if there's 10 people

00:20:44,360 --> 00:20:47,840
in the room you've got 15 different

00:20:45,710 --> 00:20:49,370
answers there is no one right one

00:20:47,840 --> 00:20:51,650
depends where you're at and what you're

00:20:49,370 --> 00:20:52,700
trying to do I let class-based views but

00:20:51,650 --> 00:20:53,780
I'm going to stick with functional ones

00:20:52,700 --> 00:20:57,890
for the rest of this because they're

00:20:53,780 --> 00:21:00,980
simpler to deal with so add that I

00:20:57,890 --> 00:21:03,020
mentioned in those last two views that

00:21:00,980 --> 00:21:05,539
how what the views there aren't actually

00:21:03,020 --> 00:21:06,530
what we do there the simplest form but

00:21:05,539 --> 00:21:07,020
they're not the form you'd want to deal

00:21:06,530 --> 00:21:09,330
with

00:21:07,020 --> 00:21:11,070
they were going mixing HTML and Python

00:21:09,330 --> 00:21:13,080
into your same function blocks which

00:21:11,070 --> 00:21:14,400
while you're allowed to do that you're

00:21:13,080 --> 00:21:15,690
going to have a bad time once you start

00:21:14,400 --> 00:21:17,700
to scale up once you start to work with

00:21:15,690 --> 00:21:19,620
designers once you try to do anything in

00:21:17,700 --> 00:21:22,290
your HTML beyond basic string

00:21:19,620 --> 00:21:25,770
interpolation so what we've done here is

00:21:22,290 --> 00:21:27,510
set up using a template and so it means

00:21:25,770 --> 00:21:29,760
that all our view does and you can see

00:21:27,510 --> 00:21:31,830
what's in high MTL view now it just sets

00:21:29,760 --> 00:21:34,110
up the dictionary context in this case

00:21:31,830 --> 00:21:36,780
saying a dictionary with key city and

00:21:34,110 --> 00:21:38,820
the answer Montreal and then passes that

00:21:36,780 --> 00:21:40,680
context down into a function called

00:21:38,820 --> 00:21:42,480
render for which we've given a template

00:21:40,680 --> 00:21:44,370
as well using Django templating language

00:21:42,480 --> 00:21:46,980
and it goes the render function will

00:21:44,370 --> 00:21:48,480
take that template function substitute

00:21:46,980 --> 00:21:50,790
city and Montreal into the right place

00:21:48,480 --> 00:21:54,600
package it up into an HTTP response

00:21:50,790 --> 00:21:57,510
object and return that so this works and

00:21:54,600 --> 00:21:58,740
this is a nice simple way to do it but

00:21:57,510 --> 00:22:01,050
let's say I want to get a little fancier

00:21:58,740 --> 00:22:02,760
and now I've added a second thing to my

00:22:01,050 --> 00:22:05,400
django template I've said I also want to

00:22:02,760 --> 00:22:07,800
say hello to city from your request city

00:22:05,400 --> 00:22:11,400
and I want to do that on every page of

00:22:07,800 --> 00:22:13,980
my sight so I could go through each of

00:22:11,400 --> 00:22:16,650
my views add in that second line request

00:22:13,980 --> 00:22:17,910
city equals geoip dot something or some

00:22:16,650 --> 00:22:19,800
other vendor call where I figure out

00:22:17,910 --> 00:22:21,540
what city request is in but that gets

00:22:19,800 --> 00:22:23,340
annoying means I've got that same code

00:22:21,540 --> 00:22:25,380
everywhere in my site means i have to

00:22:23,340 --> 00:22:28,020
worry about it means that i've got also

00:22:25,380 --> 00:22:29,610
its repetition or i don't need it what

00:22:28,020 --> 00:22:30,780
I'd really like is something in the same

00:22:29,610 --> 00:22:32,970
way that a middleware works on all

00:22:30,780 --> 00:22:35,580
requests I'd like something that works

00:22:32,970 --> 00:22:37,620
on all render calls which does exist and

00:22:35,580 --> 00:22:41,940
it's called template cop get the context

00:22:37,620 --> 00:22:44,160
processor so template cos prep contacts

00:22:41,940 --> 00:22:45,960
processors are very simple they really

00:22:44,160 --> 00:22:48,750
just look like a function that takes a

00:22:45,960 --> 00:22:50,130
request object or turn the dict about

00:22:48,750 --> 00:22:52,710
the interesting thing and why they're

00:22:50,130 --> 00:22:55,830
useful is that they run on all a request

00:22:52,710 --> 00:22:57,570
call or on all render calls once you've

00:22:55,830 --> 00:23:00,120
added it to your template coprocessor

00:22:57,570 --> 00:23:02,580
sorry template contacts processor list

00:23:00,120 --> 00:23:05,310
in your settings file so if we've done

00:23:02,580 --> 00:23:07,830
that then we can go back in our view and

00:23:05,310 --> 00:23:09,870
template will just look like this in the

00:23:07,830 --> 00:23:13,230
view itself all we have to worry about

00:23:09,870 --> 00:23:15,390
is setting the city variable don't

00:23:13,230 --> 00:23:18,390
because we know that in the context

00:23:15,390 --> 00:23:19,320
processor later in the pipeline it will

00:23:18,390 --> 00:23:20,460
handle

00:23:19,320 --> 00:23:24,240
think about what you requested he is

00:23:20,460 --> 00:23:25,950
pushing that down there now at this

00:23:24,240 --> 00:23:28,380
point I want to take one last pause

00:23:25,950 --> 00:23:29,700
before we keep going and go back up talk

00:23:28,380 --> 00:23:33,120
about how we got here but before I do

00:23:29,700 --> 00:23:35,070
that please look at that picture this

00:23:33,120 --> 00:23:36,810
place is called Schwartz's it's about 20

00:23:35,070 --> 00:23:37,890
minutes away if it's your first time to

00:23:36,810 --> 00:23:40,410
Montreal and you've never been here

00:23:37,890 --> 00:23:41,850
before please go here will be a cultural

00:23:40,410 --> 00:23:44,940
experience for you it's also a very good

00:23:41,850 --> 00:23:46,740
sandwich order a large plate medium fat

00:23:44,940 --> 00:23:48,150
with pickle flies and fries and black

00:23:46,740 --> 00:23:49,530
cherry you're going to be tired

00:23:48,150 --> 00:23:56,460
afterwards but you'll appreciate that

00:23:49,530 --> 00:23:59,190
you did so with that and where I hope

00:23:56,460 --> 00:24:00,360
you all will go for lunch let's step

00:23:59,190 --> 00:24:02,880
back and look at how we got to where we

00:24:00,360 --> 00:24:04,680
are and we started with the client we

00:24:02,880 --> 00:24:06,420
went across the client again to the

00:24:04,680 --> 00:24:07,830
Internet to the web server which

00:24:06,420 --> 00:24:10,620
communicated with django and Python

00:24:07,830 --> 00:24:12,990
through the whiskey lair we then hit the

00:24:10,620 --> 00:24:15,780
request middleware went through URL

00:24:12,990 --> 00:24:17,310
resolution dealt with the view

00:24:15,780 --> 00:24:19,530
middleware and then dealt with the view

00:24:17,310 --> 00:24:21,660
itself the view itself use Django

00:24:19,530 --> 00:24:23,580
templates a templated it in and then

00:24:21,660 --> 00:24:25,860
went through the context process or

00:24:23,580 --> 00:24:27,840
template a couple of things in and to

00:24:25,860 --> 00:24:29,940
this point we're now in the last step in

00:24:27,840 --> 00:24:32,640
base handler which is the response

00:24:29,940 --> 00:24:34,140
middle war on the way in and the

00:24:32,640 --> 00:24:35,940
beginning of middleware I said the

00:24:34,140 --> 00:24:37,050
middle word was interesting it's

00:24:35,940 --> 00:24:38,910
interesting for a lot of reasons but in

00:24:37,050 --> 00:24:41,610
particular it's interesting because it

00:24:38,910 --> 00:24:44,460
takes action both on the way in and on

00:24:41,610 --> 00:24:46,020
the way out and buy in and out I also

00:24:44,460 --> 00:24:49,560
mean sort of down and up in this type of

00:24:46,020 --> 00:24:51,450
picture on the way in we use your quest

00:24:49,560 --> 00:24:52,620
middleware we use view middle where we

00:24:51,450 --> 00:24:53,790
use another type of middleware I didn't

00:24:52,620 --> 00:24:55,380
even mention because I never used it

00:24:53,790 --> 00:24:57,990
before but on the way back we use

00:24:55,380 --> 00:24:59,910
response middleware and if you look at

00:24:57,990 --> 00:25:01,860
the structure of it it looks as fish too

00:24:59,910 --> 00:25:03,180
similar to request middleware which is

00:25:01,860 --> 00:25:05,070
again the whole point that our

00:25:03,180 --> 00:25:06,210
middleware is follow a pattern they're

00:25:05,070 --> 00:25:09,120
lightweight and they're designed to be

00:25:06,210 --> 00:25:11,250
simple to understand response middleware

00:25:09,120 --> 00:25:12,720
is called with a fully formed response

00:25:11,250 --> 00:25:15,540
object so at this point we know what

00:25:12,720 --> 00:25:17,280
we're returning which may seem an odd

00:25:15,540 --> 00:25:18,750
thing when you want to hook in but it's

00:25:17,280 --> 00:25:21,480
really useful for performance related

00:25:18,750 --> 00:25:23,250
stuff so one of the core the key

00:25:21,480 --> 00:25:25,140
response middlewares comes built in

00:25:23,250 --> 00:25:27,570
which I go it's called conditional get

00:25:25,140 --> 00:25:28,950
middleware what that does is it goes it

00:25:27,570 --> 00:25:30,530
takes your response that comes back out

00:25:28,950 --> 00:25:32,750
adds a content length

00:25:30,530 --> 00:25:34,400
onto it and looks at the e tags that

00:25:32,750 --> 00:25:36,560
came in with a request and if your

00:25:34,400 --> 00:25:37,910
browser has a cache copy this it'll just

00:25:36,560 --> 00:25:39,680
go and erase the whole copy of the whole

00:25:37,910 --> 00:25:43,520
body of your response and replace it

00:25:39,680 --> 00:25:45,260
with a not changed response so it's

00:25:43,520 --> 00:25:47,420
useful for things like that it's also

00:25:45,260 --> 00:25:48,950
useful for cooking session management if

00:25:47,420 --> 00:25:50,840
you want to tack on an extra cookie

00:25:48,950 --> 00:25:52,990
field to set your cookie and refresher

00:25:50,840 --> 00:25:56,060
token each time you can do it there too

00:25:52,990 --> 00:25:57,980
now the only thing that actually defines

00:25:56,060 --> 00:25:59,720
this as a middle where is that is it

00:25:57,980 --> 00:26:01,910
being an object with process response

00:25:59,720 --> 00:26:03,290
from method so it's a reasonable

00:26:01,910 --> 00:26:04,970
question if could we combine that with

00:26:03,290 --> 00:26:07,550
the other middlewares and the answer is

00:26:04,970 --> 00:26:09,350
yes you can go and packaged up all your

00:26:07,550 --> 00:26:10,640
different middleware hooks into one

00:26:09,350 --> 00:26:13,250
object in this case we're going to call

00:26:10,640 --> 00:26:14,840
it icon middleware so it works both as a

00:26:13,250 --> 00:26:17,120
request until we're because it's got

00:26:14,840 --> 00:26:18,590
that processed request method it also

00:26:17,120 --> 00:26:20,240
works as a response model works it's got

00:26:18,590 --> 00:26:23,690
that process response middleware and

00:26:20,240 --> 00:26:25,270
this is really handy except you've got

00:26:23,690 --> 00:26:28,070
to remember one thing which is

00:26:25,270 --> 00:26:29,510
middleware is ordered what I mentioned

00:26:28,070 --> 00:26:31,130
at the beginning I said it's ordered but

00:26:29,510 --> 00:26:33,920
this is really where that point gets

00:26:31,130 --> 00:26:35,300
home on the way in so when we're dealing

00:26:33,920 --> 00:26:37,250
with our requests middle where's our

00:26:35,300 --> 00:26:38,900
view middle words we process through

00:26:37,250 --> 00:26:41,270
this list top to bottom so first we'd

00:26:38,900 --> 00:26:43,850
run common middleware then CSRF you and

00:26:41,270 --> 00:26:46,100
then our pycon middleware but on the way

00:26:43,850 --> 00:26:47,840
back once we've already got our view we

00:26:46,100 --> 00:26:48,890
got it from bottom to top so if we're

00:26:47,840 --> 00:26:51,740
street around the pike on middleware

00:26:48,890 --> 00:26:53,150
then CSRF you in that common and

00:26:51,740 --> 00:26:55,280
generally this will do the right thing

00:26:53,150 --> 00:26:56,780
but not always and it's important that

00:26:55,280 --> 00:26:57,860
when you're designing your middleware

00:26:56,780 --> 00:27:00,230
isn't thinking about how they work

00:26:57,860 --> 00:27:01,850
together you know that if you package

00:27:00,230 --> 00:27:03,590
them up into one object you're limited

00:27:01,850 --> 00:27:05,450
to one spot in the order whereas if you

00:27:03,590 --> 00:27:08,870
package them separately you can exactly

00:27:05,450 --> 00:27:12,530
place them where you want so the last

00:27:08,870 --> 00:27:14,210
step on our five and a half step process

00:27:12,530 --> 00:27:16,550
to base handler is our friendly

00:27:14,210 --> 00:27:18,290
exception handler and it's at the bottom

00:27:16,550 --> 00:27:22,490
and it doesn't have a number because

00:27:18,290 --> 00:27:23,720
it's a little different it is whereas

00:27:22,490 --> 00:27:25,670
all our other middle words will fire

00:27:23,720 --> 00:27:27,050
every time exception middleware is

00:27:25,670 --> 00:27:28,730
designed only fire if you've done

00:27:27,050 --> 00:27:29,900
something wrong really if you've done

00:27:28,730 --> 00:27:32,060
something wrong and haven't handled it

00:27:29,900 --> 00:27:33,890
yourself so you'll only get an exception

00:27:32,060 --> 00:27:36,040
middleware if your view function itself

00:27:33,890 --> 00:27:37,940
calls an exception that you don't handle

00:27:36,040 --> 00:27:39,980
and generally what you're going to use

00:27:37,940 --> 00:27:42,049
exception middle footwear for you

00:27:39,980 --> 00:27:44,919
tracking is going and inserting

00:27:42,049 --> 00:27:46,669
something's your bug system if you use

00:27:44,919 --> 00:27:48,710
century which I think has a boot

00:27:46,669 --> 00:27:50,450
downstairs they hook him there to go and

00:27:48,710 --> 00:27:51,620
capture the exceptions they can

00:27:50,450 --> 00:27:55,160
serialize and send it out to their

00:27:51,620 --> 00:27:57,140
service it only requires when something

00:27:55,160 --> 00:27:59,570
goes wrong and it like the others

00:27:57,140 --> 00:28:01,490
returns none or HTTP response but in

00:27:59,570 --> 00:28:03,830
this case you almost always want to

00:28:01,490 --> 00:28:04,970
return the HTTP response that's where

00:28:03,830 --> 00:28:06,590
you'd go and do something that handles

00:28:04,970 --> 00:28:09,140
that redirect your user back to a story

00:28:06,590 --> 00:28:10,490
page if you don't and if you get through

00:28:09,140 --> 00:28:12,350
the middleware chain with just returning

00:28:10,490 --> 00:28:15,169
none for everyone you just can end up

00:28:12,350 --> 00:28:17,390
with Django's basic 500 error page which

00:28:15,169 --> 00:28:20,540
may or may not do what you want to do

00:28:17,390 --> 00:28:23,720
depending on your plan so at this point

00:28:20,540 --> 00:28:25,040
were through Django we've gone in we've

00:28:23,720 --> 00:28:28,340
come through whiskey we've gone down

00:28:25,040 --> 00:28:29,750
we've gone back up we've called the get

00:28:28,340 --> 00:28:32,150
response function in the get response

00:28:29,750 --> 00:28:36,440
function has returned to thing and that

00:28:32,150 --> 00:28:37,850
thing being an iterable of text we've

00:28:36,440 --> 00:28:39,020
called start response which is part of

00:28:37,850 --> 00:28:41,120
the whiskey standard and we're turning

00:28:39,020 --> 00:28:43,429
it and this takes it all back to the

00:28:41,120 --> 00:28:45,260
request that started this thing at the

00:28:43,429 --> 00:28:47,570
beginning we started with this first bid

00:28:45,260 --> 00:28:50,210
and that was a curl request to the host

00:28:47,570 --> 00:28:52,910
Daniel Agger calm saying I want to do a

00:28:50,210 --> 00:28:55,820
get on / hello / nto and then I'm going

00:28:52,910 --> 00:28:58,460
to accept anything back and then what

00:28:55,820 --> 00:29:00,620
we've given them back is a 200 ok which

00:28:58,460 --> 00:29:01,970
came from Genco we've said it's being

00:29:00,620 --> 00:29:03,799
served by engine acts which is a web

00:29:01,970 --> 00:29:06,440
server we've said it's got a content

00:29:03,799 --> 00:29:08,770
type of text HTML which is great because

00:29:06,440 --> 00:29:11,780
we exceed we said we'd accept anything

00:29:08,770 --> 00:29:13,309
it's got a content length of 33 which

00:29:11,780 --> 00:29:14,630
was provided by a Django response

00:29:13,309 --> 00:29:16,669
middleware as you can do that after

00:29:14,630 --> 00:29:18,950
you've got the response and it's got two

00:29:16,669 --> 00:29:21,830
lines in the first line says Bonjour

00:29:18,950 --> 00:29:23,150
moja moja ella was templated in by our

00:29:21,830 --> 00:29:24,530
view function and the second one who

00:29:23,150 --> 00:29:26,390
says from Toronto because that's where I

00:29:24,530 --> 00:29:28,970
was when I made the request and that was

00:29:26,390 --> 00:29:30,830
templated in by a context processor now

00:29:28,970 --> 00:29:32,929
this view itself is not that thrilling

00:29:30,830 --> 00:29:34,880
there's not a lot to it says two lines

00:29:32,929 --> 00:29:36,350
of text but that view itself is where

00:29:34,880 --> 00:29:38,570
you do interesting things it's where you

00:29:36,350 --> 00:29:40,580
go and you call it to web services and

00:29:38,570 --> 00:29:42,080
you call it to logic and use the stuff

00:29:40,580 --> 00:29:43,070
that Andrew Godwin and James Bennett and

00:29:42,080 --> 00:29:46,010
everyone else you've heard this weekend

00:29:43,070 --> 00:29:48,049
is going to talk about but now no matter

00:29:46,010 --> 00:29:49,520
how far you take Django this is the

00:29:48,049 --> 00:29:50,160
basic structure of how you request a

00:29:49,520 --> 00:29:52,080
flow

00:29:50,160 --> 00:29:53,400
you'll start of the client they'll go it

00:29:52,080 --> 00:29:55,440
to the web server you'll hit a web

00:29:53,400 --> 00:29:57,030
server of your choice which will

00:29:55,440 --> 00:29:59,730
communicate using whiskey to get down

00:29:57,030 --> 00:30:01,530
into Django once you're in Django you'll

00:29:59,730 --> 00:30:02,670
go through your quest middleware do you

00:30:01,530 --> 00:30:04,230
are a law resolution to figure out what

00:30:02,670 --> 00:30:05,220
view is going to handle it they'll go

00:30:04,230 --> 00:30:07,200
through your view middleware which you

00:30:05,220 --> 00:30:08,190
probably won't use but you might you'll

00:30:07,200 --> 00:30:10,650
go through your view function that

00:30:08,190 --> 00:30:12,390
actually does stuff on the way back out

00:30:10,650 --> 00:30:13,980
assuming you've done nothing wrong we'll

00:30:12,390 --> 00:30:15,900
go back to our response mail work where

00:30:13,980 --> 00:30:17,160
we'll set our content headers going

00:30:15,900 --> 00:30:18,870
through whiskey again we'll go back to

00:30:17,160 --> 00:30:20,190
the web server then we'll send it back

00:30:18,870 --> 00:30:32,850
to the client which is where we all

00:30:20,190 --> 00:30:36,200
started with thank you there are any

00:30:32,850 --> 00:30:36,200
questions there is a microphone they're

00:30:40,400 --> 00:30:43,940
not thank you

00:31:04,139 --> 00:31:07,619
my junk here

00:31:17,030 --> 00:31:19,090

YouTube URL: https://www.youtube.com/watch?v=q0YqAbI7rw4


