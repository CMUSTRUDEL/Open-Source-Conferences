Title: Susan Tan: Python in the Browser: Intro to Brython - PyCon 2014
Publication date: 2014-04-24
Playlist: PyCon 2014
Description: 
	Speaker: Susan Tan

Have you ever wished that you can write Python in the browser? Brython is an experimental Javascript library that enables you to leverage the elegance of Python on the client side. Novice programmers who are familiar with Javascript will learn about Brython, how Brython measures up against Javascript, and why getting client-side Python adopted as a mainstream tool is really difficult.

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:02,300 --> 00:00:07,410
okay hi everyone I'm happy to introduce

00:00:04,890 --> 00:00:09,120
Susan tan who will be speaking about

00:00:07,410 --> 00:00:11,849
Python in the browser and intro to

00:00:09,120 --> 00:00:24,029
Brighton please welcome her with with a

00:00:11,849 --> 00:00:25,980
blouson hello hi good morning so this is

00:00:24,029 --> 00:00:33,329
my second Python and I'm a first-time

00:00:25,980 --> 00:00:35,670
speaker at Python so I'm really curious

00:00:33,329 --> 00:00:37,410
about the type of software occupations

00:00:35,670 --> 00:00:40,410
in his audience how many of you here are

00:00:37,410 --> 00:00:46,170
full-time front-end web developers who

00:00:40,410 --> 00:00:48,420
use JavaScript yay all right so did you

00:00:46,170 --> 00:00:49,680
introduce myself my name is Susan I'm a

00:00:48,420 --> 00:00:51,840
recent college graduate

00:00:49,680 --> 00:00:54,000
I'm also an open source contributor to a

00:00:51,840 --> 00:00:56,610
number of Python projects in particular

00:00:54,000 --> 00:00:58,829
I open hashtag argue some of my favorite

00:00:56,610 --> 00:01:00,660
projects i've previously i've also made

00:00:58,829 --> 00:01:02,520
commits to django dubois framework and

00:01:00,660 --> 00:01:05,040
the ipython notebook in which i

00:01:02,520 --> 00:01:07,409
redesigned the menu bar and UI and the

00:01:05,040 --> 00:01:10,799
look and feel of ipython notebook

00:01:07,409 --> 00:01:13,439
version 2.0 previously I worked as a web

00:01:10,799 --> 00:01:15,270
application engineer at flicks tariffs

00:01:13,439 --> 00:01:18,450
on Tomatoes which is a movie technology

00:01:15,270 --> 00:01:20,549
company in San Francisco so I every much

00:01:18,450 --> 00:01:23,220
grew tired of working with Java over the

00:01:20,549 --> 00:01:25,470
past year so I pretty much right before

00:01:23,220 --> 00:01:30,720
Python I lost my job so now I am a

00:01:25,470 --> 00:01:32,729
Python dad for hire so so if you want to

00:01:30,720 --> 00:01:33,780
Python software engineer in San

00:01:32,729 --> 00:01:36,950
Francisco you should talk to me

00:01:33,780 --> 00:01:40,380
afterwards go

00:01:36,950 --> 00:01:41,939
so just probably the first presentation

00:01:40,380 --> 00:01:43,680
that you'll hear speaker talk about a

00:01:41,939 --> 00:01:45,869
JavaScript library and a Python

00:01:43,680 --> 00:01:47,869
conference as you know Python is

00:01:45,869 --> 00:01:51,000
completely missing on the client-side

00:01:47,869 --> 00:01:54,479
work javascript dominates javascript is

00:01:51,000 --> 00:01:58,380
a parrot supported in all browsers every

00:01:54,479 --> 00:02:00,659
browser is a JavaScript compiler so

00:01:58,380 --> 00:02:03,000
about half a year ago I discovered just

00:02:00,659 --> 00:02:05,100
brand new experimental library called

00:02:03,000 --> 00:02:11,090
breath on and here's a quick live demo

00:02:05,100 --> 00:02:13,280
so here I can sort this table by

00:02:11,090 --> 00:02:16,720
numerical order

00:02:13,280 --> 00:02:26,780
I can sort by alphabetical order like so

00:02:16,720 --> 00:02:28,520
if I open D inspector element zoom and

00:02:26,780 --> 00:02:30,470
you go to the script tag instead of

00:02:28,520 --> 00:02:32,420
seeing a JavaScript script tag you see a

00:02:30,470 --> 00:02:37,190
Python script tag waiting that's pretty

00:02:32,420 --> 00:02:39,890
interesting so a bunch of Engineers from

00:02:37,190 --> 00:02:41,720
France decided to create an open search

00:02:39,890 --> 00:02:43,580
this brand-new JavaScript library

00:02:41,720 --> 00:02:45,500
because the refrigerator they couldn't

00:02:43,580 --> 00:02:49,940
use Python to do client-side programming

00:02:45,500 --> 00:02:56,060
so the the madest library for people who

00:02:49,940 --> 00:02:58,910
just like javascript so i am a very

00:02:56,060 --> 00:03:02,690
early new user of this brand new library

00:02:58,910 --> 00:03:04,489
called python i'll talk about the use

00:03:02,690 --> 00:03:05,989
case for why python the new browser give

00:03:04,489 --> 00:03:08,230
a strong case for it I'll talk about

00:03:05,989 --> 00:03:11,930
some existing features of writhe on

00:03:08,230 --> 00:03:14,060
compare a to do list made in JavaScript

00:03:11,930 --> 00:03:15,319
and another one made in Python I'll go

00:03:14,060 --> 00:03:17,329
over the results of some simple speech

00:03:15,319 --> 00:03:18,769
has comparing Franklin against both

00:03:17,329 --> 00:03:21,140
JavaScript and Python

00:03:18,769 --> 00:03:23,480
I'll Gord limitations of Reith on and

00:03:21,140 --> 00:03:24,950
what it still needs to work on and I'll

00:03:23,480 --> 00:03:27,530
also talk about the future of

00:03:24,950 --> 00:03:29,570
client-side Python and JavaScript as a

00:03:27,530 --> 00:03:31,700
disclaimer I am NOT a core developer on

00:03:29,570 --> 00:03:33,290
Python nor do I use a slider in

00:03:31,700 --> 00:03:34,820
production so this is not going to be

00:03:33,290 --> 00:03:35,840
some adage about what you should or

00:03:34,820 --> 00:03:37,940
should not use but I thought in

00:03:35,840 --> 00:03:40,070
production this talk will also not be

00:03:37,940 --> 00:03:42,019
about different architectural approaches

00:03:40,070 --> 00:03:43,609
and making a Python implementation in a

00:03:42,019 --> 00:03:45,380
browser these are all really interesting

00:03:43,609 --> 00:03:46,970
topics but for the focus of this talk

00:03:45,380 --> 00:03:52,280
doesn't ously about Python from a user

00:03:46,970 --> 00:03:54,410
perspective so who are the people who

00:03:52,280 --> 00:03:57,079
are most likely going to really want to

00:03:54,410 --> 00:03:58,430
have Python in the browser I think

00:03:57,079 --> 00:03:59,510
they're going to be friend and engineers

00:03:58,430 --> 00:04:01,880
I think they're going to be data

00:03:59,510 --> 00:04:03,560
scientists data engineers and they are

00:04:01,880 --> 00:04:09,769
going to be engineers who are working in

00:04:03,560 --> 00:04:13,310
the intersection of web and data so

00:04:09,769 --> 00:04:15,200
indeed scientific research fields data

00:04:13,310 --> 00:04:18,289
scientists are handling evermore

00:04:15,200 --> 00:04:20,510
increasing amounts of data and they need

00:04:18,289 --> 00:04:23,810
a way to look at data in an interactive

00:04:20,510 --> 00:04:26,580
way and be able to visualize data in in

00:04:23,810 --> 00:04:31,259
a meaningful way

00:04:26,580 --> 00:04:32,460
and overall this will really push the

00:04:31,259 --> 00:04:35,550
boundaries of what can be done with a

00:04:32,460 --> 00:04:38,539
front-end web development as you know

00:04:35,550 --> 00:04:42,090
JavaScript d3 library is the most

00:04:38,539 --> 00:04:46,020
popular JavaScript visualization library

00:04:42,090 --> 00:04:47,729
that's out there and it's I'm a huge fan

00:04:46,020 --> 00:04:49,949
of the d3 library however I feel that

00:04:47,729 --> 00:04:53,879
it's fairly limited to doing aesthetics

00:04:49,949 --> 00:04:55,349
and styling and of course d3 is not was

00:04:53,879 --> 00:04:58,289
not created to do heavy duty

00:04:55,349 --> 00:04:59,610
computations Python is however Python is

00:04:58,289 --> 00:05:02,069
really popular for doing numerical

00:04:59,610 --> 00:05:05,190
computations so so why not in the future

00:05:02,069 --> 00:05:08,069
can we leverage Python scientific

00:05:05,190 --> 00:05:09,419
libraries to perhaps create in a

00:05:08,069 --> 00:05:11,729
competitive alternative or a

00:05:09,419 --> 00:05:14,099
complementary tool to do the three

00:05:11,729 --> 00:05:16,919
JavaScript library so one of the goals

00:05:14,099 --> 00:05:18,960
of this Python in a browser topic is to

00:05:16,919 --> 00:05:21,719
eventually create like instantly

00:05:18,960 --> 00:05:24,090
interactive client-side you eyes like

00:05:21,719 --> 00:05:26,990
that's powered by Python and and why

00:05:24,090 --> 00:05:31,440
should we need a live server when

00:05:26,990 --> 00:05:34,409
potentially the entire computation can

00:05:31,440 --> 00:05:38,190
exist on the client-side and just have

00:05:34,409 --> 00:05:40,680
it run into browser so this is a very

00:05:38,190 --> 00:05:42,270
challenging topic and Darin um there are

00:05:40,680 --> 00:05:43,680
a number of projects that have popped up

00:05:42,270 --> 00:05:46,139
to solve this problem from a number of

00:05:43,680 --> 00:05:50,580
technical angles and so I'll be talking

00:05:46,139 --> 00:05:52,199
about one of those projects okay

00:05:50,580 --> 00:05:54,229
so just to give some context you are a

00:05:52,199 --> 00:05:58,349
number of Python to JavaScript compiler

00:05:54,229 --> 00:06:01,139
these are a list of some standalone

00:05:58,349 --> 00:06:03,930
compilers in a they're all in different

00:06:01,139 --> 00:06:06,449
stages of completion and success there

00:06:03,930 --> 00:06:08,400
are two in browser implementations a

00:06:06,449 --> 00:06:11,090
sculpt and breath on these are the two

00:06:08,400 --> 00:06:13,800
javascript libraries dot parsed out and

00:06:11,090 --> 00:06:17,460
do source to source compilation of

00:06:13,800 --> 00:06:19,560
Python code sculpt is fairly limited to

00:06:17,460 --> 00:06:22,830
running Python inside of a web browser

00:06:19,560 --> 00:06:24,990
console and sculpt does not come off a

00:06:22,830 --> 00:06:27,569
Dom API so breath on is the only project

00:06:24,990 --> 00:06:29,669
on this last touch that only has a Dom

00:06:27,569 --> 00:06:34,349
API so that way you can manipulate HTML

00:06:29,669 --> 00:06:35,820
CSS elements but you can also have it

00:06:34,349 --> 00:06:37,560
load on page load and so the entire

00:06:35,820 --> 00:06:39,919
compilation process happens directly on

00:06:37,560 --> 00:06:39,919
page load

00:06:39,980 --> 00:06:44,730
so I'm going to present a case for why

00:06:42,210 --> 00:06:47,580
Python of all languages should be in a

00:06:44,730 --> 00:06:48,960
browser so Python as you know is more

00:06:47,580 --> 00:06:51,840
fun to write in it's more readable than

00:06:48,960 --> 00:06:53,430
JavaScript and if you've been JavaScript

00:06:51,840 --> 00:06:56,100
in any capacity you know that it gets

00:06:53,430 --> 00:06:57,600
messy and unreadable fairly quickly even

00:06:56,100 --> 00:07:04,650
when you were writing for medium-sized

00:06:57,600 --> 00:07:06,750
applications so breath on is a source of

00:07:04,650 --> 00:07:09,210
source compiler dot translates as

00:07:06,750 --> 00:07:11,520
high-level dynamic language to another

00:07:09,210 --> 00:07:14,670
high-level dynamic language breath on

00:07:11,520 --> 00:07:16,620
has support for a good subset of the

00:07:14,670 --> 00:07:18,720
Python programming language including

00:07:16,620 --> 00:07:21,780
features such as decorators list

00:07:18,720 --> 00:07:23,610
comprehensions generators programming in

00:07:21,780 --> 00:07:26,340
the browser as possible in Python

00:07:23,610 --> 00:07:29,160
because it has support for the Dom for

00:07:26,340 --> 00:07:32,490
SVG for Ajax for WebSocket connections

00:07:29,160 --> 00:07:33,890
between the client and a server also by

00:07:32,490 --> 00:07:36,330
programming your Python you can

00:07:33,890 --> 00:07:38,670
circumvent the problems of using

00:07:36,330 --> 00:07:40,830
javascript such as global variables and

00:07:38,670 --> 00:07:42,720
function scope and I think the most

00:07:40,830 --> 00:07:44,490
important our powerful feature ever I

00:07:42,720 --> 00:07:46,080
thought is this Dom API because without

00:07:44,490 --> 00:07:51,650
a Dom API you can't really make any

00:07:46,080 --> 00:07:54,750
webpages so I'm just going to go over

00:07:51,650 --> 00:07:56,970
how to get started with line so first

00:07:54,750 --> 00:07:59,280
you get deep breath on that JS file from

00:07:56,970 --> 00:08:01,410
the source repository on bitbucket

00:07:59,280 --> 00:08:04,290
and then you include us breath on that

00:08:01,410 --> 00:08:06,510
Janus file into a script tag in the

00:08:04,290 --> 00:08:08,490
source directory then you embed Python

00:08:06,510 --> 00:08:10,290
code inside of the script tag is so

00:08:08,490 --> 00:08:12,450
instead of a Java scripts crypt occupy

00:08:10,290 --> 00:08:16,230
thon script tag then you finally include

00:08:12,450 --> 00:08:19,650
a Python a body tag that then invokes

00:08:16,230 --> 00:08:20,970
the Python library which then replaces

00:08:19,650 --> 00:08:23,580
all the Python code written with

00:08:20,970 --> 00:08:25,080
JavaScript code so in sorry just as a

00:08:23,580 --> 00:08:29,520
minimal setup of what you need to do to

00:08:25,080 --> 00:08:31,470
get breadth on up and running so now

00:08:29,520 --> 00:08:33,180
next I'm just going to go over some Dom

00:08:31,470 --> 00:08:35,610
API methods and breadth on and compare

00:08:33,180 --> 00:08:39,000
them against jQuery and I'm using jQuery

00:08:35,610 --> 00:08:41,610
as a reference because this is a really

00:08:39,000 --> 00:08:43,500
common JavaScript library it's pretty

00:08:41,610 --> 00:08:44,580
much used in just every modern web

00:08:43,500 --> 00:08:47,640
application in the world

00:08:44,580 --> 00:08:50,070
so in jQuery you can select a Dom

00:08:47,640 --> 00:08:52,889
element using its hash tag syntax and

00:08:50,070 --> 00:08:55,189
break on you can import the dock module

00:08:52,889 --> 00:08:57,629
the browser package and then select Asst

00:08:55,189 --> 00:08:59,790
Dom element using the bracket notation

00:08:57,629 --> 00:09:02,759
or you can use the get method to do that

00:08:59,790 --> 00:09:04,649
in jQuery you can add and remove CSS

00:09:02,759 --> 00:09:06,929
classes using the add class remove class

00:09:04,649 --> 00:09:09,179
method the input parameters are d names

00:09:06,929 --> 00:09:13,739
of the CSS classes and breath on is

00:09:09,179 --> 00:09:15,749
almost exactly the same syntax engine

00:09:13,739 --> 00:09:17,699
query you can append Dom elements using

00:09:15,749 --> 00:09:20,249
D append function and that append

00:09:17,699 --> 00:09:22,799
function takes in the name of the new

00:09:20,249 --> 00:09:25,079
dev div or Dom element do you want to

00:09:22,799 --> 00:09:27,299
create in breath on you can create a new

00:09:25,079 --> 00:09:29,879
div element using this HTML module which

00:09:27,299 --> 00:09:32,220
comes if a number of methods such as div

00:09:29,879 --> 00:09:34,589
or table or Li and all of these methods

00:09:32,220 --> 00:09:37,169
can take in as input parameters D name

00:09:34,589 --> 00:09:38,999
of the class order name of the ID then

00:09:37,169 --> 00:09:42,739
you can append a new dev - newly created

00:09:38,999 --> 00:09:45,839
list element using this rocket notation

00:09:42,739 --> 00:09:47,549
suppose you have a button on a page and

00:09:45,839 --> 00:09:50,399
you want to bind an on click event

00:09:47,549 --> 00:09:53,399
handler on this button how do you do

00:09:50,399 --> 00:09:56,249
that in jQuery you can bind you can do

00:09:53,399 --> 00:09:58,079
that using the bind method in which bind

00:09:56,249 --> 00:10:00,769
takes and D type of event handler and

00:09:58,079 --> 00:10:03,839
also the function that gets invoked when

00:10:00,769 --> 00:10:07,079
the button is clicked so in this case

00:10:03,839 --> 00:10:08,970
when upon it's like the hello just gets

00:10:07,079 --> 00:10:10,589
printed to the browser and breath on

00:10:08,970 --> 00:10:13,129
it's exactly the same syntax you can use

00:10:10,589 --> 00:10:13,129
the bind function

00:10:13,429 --> 00:10:18,269
localstorage is the key value

00:10:15,660 --> 00:10:20,129
client-side database a storage that

00:10:18,269 --> 00:10:21,629
persist for that particular machine and

00:10:20,129 --> 00:10:24,360
for that particular browser in

00:10:21,629 --> 00:10:26,549
JavaScript you can use the set item

00:10:24,360 --> 00:10:30,329
method to set a key and value pair you

00:10:26,549 --> 00:10:34,139
can get an item you can get the value by

00:10:30,329 --> 00:10:36,299
using a key you can also remove item in

00:10:34,139 --> 00:10:39,419
breath on you can use a storage module

00:10:36,299 --> 00:10:40,919
to to access local storage and you can

00:10:39,419 --> 00:10:46,049
see the syntax is surprisingly similar

00:10:40,919 --> 00:10:48,600
to that of Python dictionaries and

00:10:46,049 --> 00:10:50,039
breath on you can also access different

00:10:48,600 --> 00:10:51,899
JavaScript objects and libraries in

00:10:50,039 --> 00:10:53,369
Python using this javascript module so

00:10:51,899 --> 00:10:55,769
this is how you would access the g court

00:10:53,369 --> 00:10:57,629
library if you want to write jQuery or

00:10:55,769 --> 00:11:02,129
some other library of JavaScript library

00:10:57,629 --> 00:11:03,899
a Longworth breath on call so so now we

00:11:02,129 --> 00:11:06,570
know a whole bunch of Dom API methods

00:11:03,899 --> 00:11:08,910
and if you're real familiar with Java

00:11:06,570 --> 00:11:11,310
d quintessential HelloWorld application

00:11:08,910 --> 00:11:15,360
in the JavaScript land is a to-do list

00:11:11,310 --> 00:11:16,560
app and if you go to to do MVC comm you

00:11:15,360 --> 00:11:18,450
can see there's a whole lot of examples

00:11:16,560 --> 00:11:19,680
of different to-do list apps that are

00:11:18,450 --> 00:11:24,530
implemented from different JavaScript

00:11:19,680 --> 00:11:24,530
MVC frameworks so here's a live demo

00:11:25,160 --> 00:11:33,390
okay so this is it's you do this app I

00:11:28,890 --> 00:11:37,200
can add a number of things I can check

00:11:33,390 --> 00:11:39,270
them off I can delete items I can also

00:11:37,200 --> 00:11:45,480
clear to-do items so this is the

00:11:39,270 --> 00:11:47,070
JavaScript version of this app this is

00:11:45,480 --> 00:11:55,770
the broth on version of the app I can do

00:11:47,070 --> 00:11:57,150
exactly the same thing and I know you

00:11:55,770 --> 00:12:01,340
can't seen it back here but you have to

00:11:57,150 --> 00:12:01,340
take my word for it just as a Python app

00:12:02,270 --> 00:12:06,900
so pretty much in summary you can

00:12:04,980 --> 00:12:10,400
whatever you can do with JavaScript

00:12:06,900 --> 00:12:10,400
jQuery could pretty much do in Python

00:12:11,450 --> 00:12:14,880
okay so let's go over some results of

00:12:14,190 --> 00:12:16,650
the timing test

00:12:14,880 --> 00:12:18,870
I used the ipython notebooks time it

00:12:16,650 --> 00:12:21,090
module to run just my func function for

00:12:18,870 --> 00:12:23,640
a thousand times and get the average in

00:12:21,090 --> 00:12:25,770
embrace on there's no time at module so

00:12:23,640 --> 00:12:27,900
I had to use the time module instead to

00:12:25,770 --> 00:12:29,280
to get the time it takes for this

00:12:27,900 --> 00:12:30,630
function to run and then I use a for

00:12:29,280 --> 00:12:33,390
loop to just iterate for the function

00:12:30,630 --> 00:12:35,580
for a dozen times so breath on is pretty

00:12:33,390 --> 00:12:39,990
slow it's slower than I'd or JavaScript

00:12:35,580 --> 00:12:42,690
or Python by 23 times in another example

00:12:39,990 --> 00:12:44,790
a breath on is slower by python and

00:12:42,690 --> 00:12:47,010
javascript by a hundred and seventeen

00:12:44,790 --> 00:12:50,460
times in this case and this is a serious

00:12:47,010 --> 00:12:52,770
limitation it takes time to for a breath

00:12:50,460 --> 00:12:53,820
on to do two compilation from python to

00:12:52,770 --> 00:12:56,640
javascript but then it takes time for

00:12:53,820 --> 00:12:59,370
javascript to also interpret the

00:12:56,640 --> 00:13:02,130
javascript code so just as a serious

00:12:59,370 --> 00:13:03,240
limitation because this makes a huge

00:13:02,130 --> 00:13:05,820
difference in to percieve for

00:13:03,240 --> 00:13:08,430
performance of how long it takes for

00:13:05,820 --> 00:13:11,250
pages to load and when you have a very

00:13:08,430 --> 00:13:12,540
slow page load time then bounce rates go

00:13:11,250 --> 00:13:15,050
up and it's generally a bad user

00:13:12,540 --> 00:13:15,050
experience

00:13:18,310 --> 00:13:24,530
this is the output of the bright-line

00:13:21,560 --> 00:13:26,420
code from the that first function you

00:13:24,530 --> 00:13:28,670
can see it's there's a lot of code that

00:13:26,420 --> 00:13:31,820
gets generated from even a very simple

00:13:28,670 --> 00:13:34,340
for loop you can see that for example

00:13:31,820 --> 00:13:35,960
breath on uses its own number object

00:13:34,340 --> 00:13:39,590
instead of using javascript native

00:13:35,960 --> 00:13:41,840
number object and overall breath on is

00:13:39,590 --> 00:13:44,150
really slow because it does not do any

00:13:41,840 --> 00:13:50,300
optimizations that you would expect a

00:13:44,150 --> 00:13:53,240
compiler to do okay so if it's slow why

00:13:50,300 --> 00:13:55,280
use it it's having a slow a javascript

00:13:53,240 --> 00:13:57,560
library can be a deal breaker but I

00:13:55,280 --> 00:13:58,910
think that breath on is the first step

00:13:57,560 --> 00:14:00,980
or at least it opens the door to

00:13:58,910 --> 00:14:05,240
creating true full stack web

00:14:00,980 --> 00:14:06,620
applications entirely in Python many of

00:14:05,240 --> 00:14:09,200
the examples that I've seen in Python

00:14:06,620 --> 00:14:13,100
are typically front-end data intensive

00:14:09,200 --> 00:14:15,200
visualizations and breath on currently

00:14:13,100 --> 00:14:17,900
supports a number of core Python modules

00:14:15,200 --> 00:14:20,630
such as math date/time and JSON core

00:14:17,900 --> 00:14:21,830
modules but there's there's a lot but

00:14:20,630 --> 00:14:26,630
there's many other modules that it

00:14:21,830 --> 00:14:28,640
doesn't quite support yet so because all

00:14:26,630 --> 00:14:30,290
the compilation is done immediately on

00:14:28,640 --> 00:14:33,380
page load it's this makes for a very

00:14:30,290 --> 00:14:35,210
slow library another serious limitation

00:14:33,380 --> 00:14:37,280
is that breath on has those support for

00:14:35,210 --> 00:14:39,590
the scientific Python libraries because

00:14:37,280 --> 00:14:42,440
most of these libraries are written and

00:14:39,590 --> 00:14:46,910
C or in Fortran or to make API calls to

00:14:42,440 --> 00:14:49,130
see Python and so this is a really big

00:14:46,910 --> 00:14:51,860
limitation because if you want to have

00:14:49,130 --> 00:14:54,080
eventually to have a fast scientific

00:14:51,860 --> 00:14:55,520
Python and a browser then eventually

00:14:54,080 --> 00:14:56,780
somehow you have to you will have to get

00:14:55,520 --> 00:15:00,080
these scientific libraries in the

00:14:56,780 --> 00:15:02,450
browser so so one potential solution may

00:15:00,080 --> 00:15:04,190
be to just be right all of numpy and in

00:15:02,450 --> 00:15:05,900
python it didn't include it and you

00:15:04,190 --> 00:15:10,160
should have Python source directory

00:15:05,900 --> 00:15:12,710
maybe so I was annoyed with the fact

00:15:10,160 --> 00:15:14,090
that while I was making to-do list app I

00:15:12,710 --> 00:15:16,370
had to use print statements everywhere

00:15:14,090 --> 00:15:19,190
so I really wish there is some sort of

00:15:16,370 --> 00:15:20,480
debugger tool like a PDB in Python or do

00:15:19,190 --> 00:15:21,800
debugger tool and JavaScript where I

00:15:20,480 --> 00:15:23,270
could just like pause code during

00:15:21,800 --> 00:15:26,860
execution so that's something on my wish

00:15:23,270 --> 00:15:26,860
list for first new library

00:15:27,390 --> 00:15:31,210
okay so whether or not you want to

00:15:29,800 --> 00:15:33,310
convince your employer to start using

00:15:31,210 --> 00:15:36,310
this new experimental library it's

00:15:33,310 --> 00:15:39,520
really going to be company specific what

00:15:36,310 --> 00:15:41,860
is the business value and what is the

00:15:39,520 --> 00:15:44,589
engineering effort to take well will the

00:15:41,860 --> 00:15:47,410
stake so there's four main questions

00:15:44,589 --> 00:15:50,890
that I usually would ask as general

00:15:47,410 --> 00:15:53,110
guidelines to figure out like how do you

00:15:50,890 --> 00:15:55,180
evaluate this brand new about any brand

00:15:53,110 --> 00:15:56,860
new tool or library or framework the

00:15:55,180 --> 00:16:00,370
first question I ask is what problems

00:15:56,860 --> 00:16:02,740
solve for breath on its solving the

00:16:00,370 --> 00:16:04,270
problem of putting it's solving a

00:16:02,740 --> 00:16:07,390
problem of using JavaScript it's it's

00:16:04,270 --> 00:16:10,360
another additional front-end option to

00:16:07,390 --> 00:16:13,180
decoded is it easy to use and learn I

00:16:10,360 --> 00:16:17,320
would say it's fairly easy to get breath

00:16:13,180 --> 00:16:19,089
on set up and running so so I would say

00:16:17,320 --> 00:16:21,459
it is fairly easy to use and learn and

00:16:19,089 --> 00:16:25,930
the documentation does contain a lot of

00:16:21,459 --> 00:16:27,610
examples who else is using it why and so

00:16:25,930 --> 00:16:30,640
so Brian is a very new library just

00:16:27,610 --> 00:16:33,220
currently in my knowledge no developer

00:16:30,640 --> 00:16:34,870
using Python so if you have a user base

00:16:33,220 --> 00:16:38,529
of zero it's kind of hard to get other

00:16:34,870 --> 00:16:41,709
people to also use this tool to and and

00:16:38,529 --> 00:16:43,570
Jen in general people the tools that

00:16:41,709 --> 00:16:44,830
have a larger community behind it will

00:16:43,570 --> 00:16:46,959
have people who have more experience

00:16:44,830 --> 00:16:49,300
using it or it will have just more

00:16:46,959 --> 00:16:52,870
documentation to go along with this tool

00:16:49,300 --> 00:16:55,450
library is it an active development for

00:16:52,870 --> 00:16:57,040
breath on it's just the releases come

00:16:55,450 --> 00:16:58,839
out once or twice a year there's a

00:16:57,040 --> 00:17:02,620
breath on Google group for people to

00:16:58,839 --> 00:17:04,390
sign up and read what's going on and ask

00:17:02,620 --> 00:17:06,939
questions and follow its development and

00:17:04,390 --> 00:17:08,500
it's really important for in a library

00:17:06,939 --> 00:17:11,199
or just any new tool to be an active

00:17:08,500 --> 00:17:13,030
development because you don't want then

00:17:11,199 --> 00:17:18,459
the new tool to just fall over become

00:17:13,030 --> 00:17:20,020
deprecated to next day okay so I'm just

00:17:18,459 --> 00:17:22,300
going to talk about what's coming up

00:17:20,020 --> 00:17:24,790
next for JavaScript JavaScript 6 is

00:17:22,300 --> 00:17:27,970
coming up by the end of you by the end

00:17:24,790 --> 00:17:30,910
of the year to Firefox and if you read

00:17:27,970 --> 00:17:32,740
the specifications of the syntax for the

00:17:30,910 --> 00:17:34,830
new JavaScript 6 you'll notice that

00:17:32,740 --> 00:17:37,780
there's a whole ton of new syntax a

00:17:34,830 --> 00:17:39,340
particular interest is a syntax for the

00:17:37,780 --> 00:17:39,880
JavaScript list comprehensions and

00:17:39,340 --> 00:17:41,860
generators

00:17:39,880 --> 00:17:45,190
and the syntax for that looks strikingly

00:17:41,860 --> 00:17:46,630
similar to that today Python syntax and

00:17:45,190 --> 00:17:48,580
does not a coincidence because the

00:17:46,630 --> 00:17:53,080
writers of JavaScript 6 like directly

00:17:48,580 --> 00:17:55,240
ripped off from pythons and Jack's so

00:17:53,080 --> 00:17:59,350
the JavaScript ecosystem is a very large

00:17:55,240 --> 00:18:03,400
growing ecosystem there are subscripts

00:17:59,350 --> 00:18:05,410
of JavaScript and new languages that are

00:18:03,400 --> 00:18:08,620
trying to solve the problem of how do

00:18:05,410 --> 00:18:09,940
you create very fast app JavaScript

00:18:08,620 --> 00:18:13,540
application is how do you create very

00:18:09,940 --> 00:18:15,790
scalable JavaScript applications there's

00:18:13,540 --> 00:18:17,380
a why growing number of MVC frameworks

00:18:15,790 --> 00:18:20,020
for doing client-side JavaScript

00:18:17,380 --> 00:18:21,460
programming and they're all trying to

00:18:20,020 --> 00:18:25,920
solve the problem of how do you maintain

00:18:21,460 --> 00:18:25,920
really massive JavaScript code bases

00:18:25,980 --> 00:18:32,410
right if you try to Google top 50

00:18:29,470 --> 00:18:34,000
JavaScript libraries you'll get very

00:18:32,410 --> 00:18:38,140
many different options and this is a

00:18:34,000 --> 00:18:40,720
very crowded messy ecosystem and it's

00:18:38,140 --> 00:18:42,550
really hard to predict what if any day

00:18:40,720 --> 00:18:46,900
will replace javascript in the future

00:18:42,550 --> 00:18:48,610
but I want to make the claim that if any

00:18:46,900 --> 00:18:50,020
library or tool were to replace or

00:18:48,610 --> 00:18:52,030
complement JavaScript it would have to

00:18:50,020 --> 00:18:54,940
be compatible with the rest of the

00:18:52,030 --> 00:18:56,620
JavaScript ecosystem and I also want to

00:18:54,940 --> 00:18:57,970
make the claim that JavaScript would

00:18:56,620 --> 00:19:03,340
still be mainstream and important for

00:18:57,970 --> 00:19:06,730
yet another five years okay so the

00:19:03,340 --> 00:19:08,710
efforts of putting a fast scientific

00:19:06,730 --> 00:19:12,370
Python in a browser is just starting

00:19:08,710 --> 00:19:16,260
just as like super early stage field and

00:19:12,370 --> 00:19:19,150
I think that all the efforts to put a

00:19:16,260 --> 00:19:21,670
Python in a browser are really going to

00:19:19,150 --> 00:19:24,460
push what's possible with front-end web

00:19:21,670 --> 00:19:26,620
development breath on is just one

00:19:24,460 --> 00:19:30,220
project amongst many other projects that

00:19:26,620 --> 00:19:32,170
are in this relatively new field I want

00:19:30,220 --> 00:19:34,600
to mention very briefly a number of

00:19:32,170 --> 00:19:37,570
other interesting projects that are also

00:19:34,600 --> 00:19:40,660
trying to solve the same problem there's

00:19:37,570 --> 00:19:43,990
this new MPL d3 library that combines

00:19:40,660 --> 00:19:48,430
both the matplotlib Python library with

00:19:43,990 --> 00:19:50,940
dad of d3 so it basically generates d3

00:19:48,430 --> 00:19:53,690
JavaScript directly from matplotlib

00:19:50,940 --> 00:19:56,629
generated charts and graphs

00:19:53,690 --> 00:20:01,190
there is this very brand-new pipe aijs

00:19:56,629 --> 00:20:03,679
which combines the aspects of the pipe I

00:20:01,190 --> 00:20:07,370
compiler project a very fast Python

00:20:03,679 --> 00:20:10,549
implementation with the M script in C

00:20:07,370 --> 00:20:12,169
code to JavaScript compiler and the

00:20:10,549 --> 00:20:15,919
person who's doing this is basically

00:20:12,169 --> 00:20:18,500
trying to implement the pipe interpreter

00:20:15,919 --> 00:20:20,090
with the JIT and just translate all of

00:20:18,500 --> 00:20:24,470
that in JavaScript with the help of

00:20:20,090 --> 00:20:27,110
inscripted so so if you've ever used

00:20:24,470 --> 00:20:29,090
matplotlib and if you try to plot a

00:20:27,110 --> 00:20:31,730
hundred million data points in that plot

00:20:29,090 --> 00:20:36,710
live you'll run into memory issues and

00:20:31,730 --> 00:20:41,299
so there's this new project called vespi

00:20:36,710 --> 00:20:43,100
a Python project that aims to solve the

00:20:41,299 --> 00:20:45,080
problem of how do you efficiently handle

00:20:43,100 --> 00:20:47,559
extremely large data sets and how do you

00:20:45,080 --> 00:20:52,009
generate interactive visualizations from

00:20:47,559 --> 00:20:54,320
both static data and real-time data that

00:20:52,009 --> 00:20:59,049
is extremely large and so this B is

00:20:54,320 --> 00:21:01,730
based on the OpenGL project and it's

00:20:59,049 --> 00:21:04,210
utilizing the computers GPUs or

00:21:01,730 --> 00:21:06,769
graphical processing units to do

00:21:04,210 --> 00:21:10,399
real-time parallel processing of data

00:21:06,769 --> 00:21:13,309
and as you know the ipython notebook is

00:21:10,399 --> 00:21:16,669
super popular it's a game changer in the

00:21:13,309 --> 00:21:18,649
Python ecosystem and I think the ipython

00:21:16,669 --> 00:21:21,230
notebook itself represents a major step

00:21:18,649 --> 00:21:25,549
forward in moving Python to the browser

00:21:21,230 --> 00:21:28,940
in version 1.0 it supported static plots

00:21:25,549 --> 00:21:31,129
and the current version 2.0 people can

00:21:28,940 --> 00:21:34,009
now create JavaScript based visuals

00:21:31,129 --> 00:21:36,769
within a notebook and people can now

00:21:34,009 --> 00:21:39,860
prototype JavaScript widgets in it they

00:21:36,769 --> 00:21:42,080
can import d3 into it so this is pretty

00:21:39,860 --> 00:21:44,210
exciting times and I'm really excited to

00:21:42,080 --> 00:21:51,529
see like how these projects will evolve

00:21:44,210 --> 00:21:53,750
within a next year and when of course

00:21:51,529 --> 00:21:56,000
use all brand-new uncertain options but

00:21:53,750 --> 00:21:58,309
but when Python finally comes to the

00:21:56,000 --> 00:22:01,519
browser in whichever shape or form I'm

00:21:58,309 --> 00:22:04,610
really sure that the state front-end web

00:22:01,519 --> 00:22:07,129
development will be more richer more

00:22:04,610 --> 00:22:07,490
interactive and be drastically different

00:22:07,129 --> 00:22:12,700
did

00:22:07,490 --> 00:22:12,700
today thank you

00:22:19,640 --> 00:22:26,570
if anyone has any questions please go to

00:22:22,260 --> 00:22:26,570
the microphone over there any questions

00:22:30,680 --> 00:22:36,900
so I see a lot of talk about compiling

00:22:34,830 --> 00:22:38,040
certain things like Python into

00:22:36,900 --> 00:22:39,420
JavaScript and then having the

00:22:38,040 --> 00:22:41,370
JavaScript engine in the browser run

00:22:39,420 --> 00:22:43,950
them which is a clean solution because

00:22:41,370 --> 00:22:46,020
it's kind of stand-alone but there are

00:22:43,950 --> 00:22:49,470
other approaches for example it can

00:22:46,020 --> 00:22:54,990
there are some projects out there that

00:22:49,470 --> 00:22:57,030
interface a plugin to allow the Python

00:22:54,990 --> 00:22:59,220
interpreter a real type of interpreter

00:22:57,030 --> 00:23:00,870
to run in the background and actually it

00:22:59,220 --> 00:23:03,090
can interact with JavaScript it can

00:23:00,870 --> 00:23:05,580
export its classes to JavaScript it can

00:23:03,090 --> 00:23:07,830
pull JavaScript any JavaScript element

00:23:05,580 --> 00:23:11,280
into Python have you explored any of

00:23:07,830 --> 00:23:13,020
those kind of options I haven't explored

00:23:11,280 --> 00:23:15,360
those options but if you do you haven't

00:23:13,020 --> 00:23:16,980
your name of those projects why I

00:23:15,360 --> 00:23:19,200
started one I know there are another one

00:23:16,980 --> 00:23:21,000
I started when a while back I think it's

00:23:19,200 --> 00:23:23,880
on github under PI WebKit 3 it's

00:23:21,000 --> 00:23:25,230
specific to the WebKit ecosystem so

00:23:23,880 --> 00:23:27,750
that's there's some drawbacks to it

00:23:25,230 --> 00:23:29,190
but it's it's fascinating because you

00:23:27,750 --> 00:23:30,990
can interact completely with the

00:23:29,190 --> 00:23:33,120
JavaScript environment back and forth

00:23:30,990 --> 00:23:33,770
between Python and JavaScript pretty

00:23:33,120 --> 00:23:40,080
seamlessly

00:23:33,770 --> 00:23:42,809
thank you for yeah ok thanks very talk

00:23:40,080 --> 00:23:44,940
Susan question goes into kind of the

00:23:42,809 --> 00:23:48,900
similar direction in all the examples

00:23:44,940 --> 00:23:51,750
I've seen on Brian so far I don't see

00:23:48,900 --> 00:23:54,179
what the advantages of compiling Python

00:23:51,750 --> 00:23:57,420
in the browser as opposed to pre

00:23:54,179 --> 00:23:59,580
compiling it to JavaScript and not

00:23:57,420 --> 00:24:02,130
having to deal with that on the client

00:23:59,580 --> 00:24:04,080
side as well right of all the other

00:24:02,130 --> 00:24:07,170
options have looked into none of the

00:24:04,080 --> 00:24:10,770
standalone compilers have a Dom API

00:24:07,170 --> 00:24:12,929
that's built into it and and so I and

00:24:10,770 --> 00:24:15,929
Python is it's fairly easy to get set up

00:24:12,929 --> 00:24:17,460
and like running and I feel that it's

00:24:15,929 --> 00:24:19,679
it's doing things a little bit

00:24:17,460 --> 00:24:23,660
differently than what the other compiler

00:24:19,679 --> 00:24:23,660
projects are doing Thanks

00:24:24,760 --> 00:24:29,260
so um you talked a bit about the

00:24:27,100 --> 00:24:32,380
performance of growth earn and how it's

00:24:29,260 --> 00:24:34,570
sort of can sometimes be really slow do

00:24:32,380 --> 00:24:37,150
you have a sense of of how much of that

00:24:34,570 --> 00:24:39,400
is kind of a fundamental limitation of

00:24:37,150 --> 00:24:41,230
the approach versus how much of it is

00:24:39,400 --> 00:24:43,780
just well we need to put in the work to

00:24:41,230 --> 00:24:45,160
generate better JavaScript that's more

00:24:43,780 --> 00:24:45,780
amenable to the g8 and all of these

00:24:45,160 --> 00:24:50,799
sorts of things

00:24:45,780 --> 00:24:52,150
hmm I'm not totally sure about whether

00:24:50,799 --> 00:24:54,549
if that's a fundamental limitation of

00:24:52,150 --> 00:24:58,570
breath I like ken ken is it possible to

00:24:54,549 --> 00:25:00,370
like optimize for I thought to be really

00:24:58,570 --> 00:25:02,169
to be much faster even though the

00:25:00,370 --> 00:25:04,299
semantics of getting Python to

00:25:02,169 --> 00:25:06,370
JavaScript isn't exactly perfect I'm not

00:25:04,299 --> 00:25:08,320
sure of the exact answer to that well

00:25:06,370 --> 00:25:09,790
perhaps a sort of related question Inez

00:25:08,320 --> 00:25:11,740
is that something that the broth and

00:25:09,790 --> 00:25:13,840
developers are working on adding those

00:25:11,740 --> 00:25:21,010
optimizations yes yes they are aware of

00:25:13,840 --> 00:25:23,740
that yeah hi thank you for your talk I

00:25:21,010 --> 00:25:27,250
also have a comment about a question

00:25:23,740 --> 00:25:28,630
just asked I'd like to mention a project

00:25:27,250 --> 00:25:32,410
that I contribute to it's called rapid

00:25:28,630 --> 00:25:35,940
script and it compiles Python JavaScript

00:25:32,410 --> 00:25:38,980
but it's it has more of a it's basically

00:25:35,940 --> 00:25:41,790
adding a Python syntax to JavaScript so

00:25:38,980 --> 00:25:44,559
you don't need a API to talk to the Dom

00:25:41,790 --> 00:25:46,780
so it kind of skips that question or

00:25:44,559 --> 00:25:50,350
bypasses that I also have a question

00:25:46,780 --> 00:25:55,290
about performance compared to the other

00:25:50,350 --> 00:26:02,890
libraries do you have numbers for sculpt

00:25:55,290 --> 00:26:05,190
pajamas pajamas for performance for

00:26:02,890 --> 00:26:13,360
those other libraries unfortunately

00:26:05,190 --> 00:26:15,730
thanks hi thanks for your talk so I'd

00:26:13,360 --> 00:26:18,700
argue one of the biggest barriers for

00:26:15,730 --> 00:26:20,350
people using these new sort of I don't

00:26:18,700 --> 00:26:22,120
know sort of interpreters on

00:26:20,350 --> 00:26:24,820
interpreters is sort of a better

00:26:22,120 --> 00:26:26,440
debugging tool for them so for example

00:26:24,820 --> 00:26:27,910
one could argue that like the inspector

00:26:26,440 --> 00:26:28,990
in for JavaScript it's like one of the

00:26:27,910 --> 00:26:30,309
best debugging tools out there for

00:26:28,990 --> 00:26:33,460
client-side programming do you have a

00:26:30,309 --> 00:26:34,960
sense of where things like that stand on

00:26:33,460 --> 00:26:35,420
the right on roadmap is there a plan

00:26:34,960 --> 00:26:38,390
simple

00:26:35,420 --> 00:26:40,790
one specifically things like

00:26:38,390 --> 00:26:42,350
understanding what the interpreter is

00:26:40,790 --> 00:26:43,610
doing like at load time and things like

00:26:42,350 --> 00:26:46,600
that are like really useful things for

00:26:43,610 --> 00:26:50,090
the bucket for delivered I think sure so

00:26:46,600 --> 00:26:53,420
on the user side you can pretty much set

00:26:50,090 --> 00:26:56,660
a debugging level on within the your

00:26:53,420 --> 00:26:58,040
write line code itself and and I hope

00:26:56,660 --> 00:26:59,870
there are more debugging tools but

00:26:58,040 --> 00:27:01,610
that's fairly like where like that the

00:26:59,870 --> 00:27:02,930
limit of debugging is currently I wish

00:27:01,610 --> 00:27:03,320
there were more debugging tools in a

00:27:02,930 --> 00:27:10,670
breadline

00:27:03,320 --> 00:27:13,630
cool any more questions okay thank you

00:27:10,670 --> 00:27:13,630

YouTube URL: https://www.youtube.com/watch?v=BcDV9QUium4


