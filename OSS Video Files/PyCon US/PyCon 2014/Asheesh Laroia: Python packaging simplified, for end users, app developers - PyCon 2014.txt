Title: Asheesh Laroia: Python packaging simplified, for end users, app developers - PyCon 2014
Publication date: 2014-04-24
Playlist: PyCon 2014
Description: 
	Speaker: Asheesh Laroia

This talk covers the practical use of Python packaging tools. You'll see how to keep your system clean as an end user excited about installing a Python module from the web, the purpose of setup.py, how virtualenv makes life easier (and sometimes harder), what Ubuntu/Debian tools can offer, and how to make a complex app easier for new contributors to run. It is heavy on stories and recommendations.

Slides can be found at: https://speakerdeck.com/pycon2014 and https://github.com/PyCon/2014-slides
Captions: 
	00:00:07,550 --> 00:00:11,969
welcome everyone

00:00:09,210 --> 00:00:24,830
to Python packaging simplified by a

00:00:11,969 --> 00:00:27,779
shoosh Laura hi everyone Wow hi everyone

00:00:24,830 --> 00:00:31,140
hi great so I'm here to talk about

00:00:27,779 --> 00:00:33,149
Python packaging simplified and as this

00:00:31,140 --> 00:00:35,010
title slide suggests I'll provide

00:00:33,149 --> 00:00:37,290
information useful to end users app

00:00:35,010 --> 00:00:39,750
developers open source contributors this

00:00:37,290 --> 00:00:42,629
talk is focused mostly on people who

00:00:39,750 --> 00:00:44,129
aren't the one packaging things there

00:00:42,629 --> 00:00:45,629
will be tough talk after this in more

00:00:44,129 --> 00:00:48,149
depth I can talk about that at the end

00:00:45,629 --> 00:00:49,610
also there's also a couple of micro

00:00:48,149 --> 00:00:54,000
changes that you mostly don't care about

00:00:49,610 --> 00:00:55,559
sometimes in the in the in the

00:00:54,000 --> 00:00:57,870
description I promised that I would tell

00:00:55,559 --> 00:00:59,460
you how to debug complicated conflicts

00:00:57,870 --> 00:01:01,620
between Debian installed packages and

00:00:59,460 --> 00:01:02,850
piff installed packages if people really

00:01:01,620 --> 00:01:04,409
want to know that you can ask me the

00:01:02,850 --> 00:01:07,500
questions there wasn't time to fit it to

00:01:04,409 --> 00:01:09,780
fit it in and do it justice so with that

00:01:07,500 --> 00:01:11,820
said I will explain to you the goals of

00:01:09,780 --> 00:01:13,950
this talk I want everyone who attends

00:01:11,820 --> 00:01:16,619
this talk to be able to install Python

00:01:13,950 --> 00:01:18,360
code on their own system without needing

00:01:16,619 --> 00:01:21,659
to use root privileges or admin

00:01:18,360 --> 00:01:23,549
privileges or sudo I also you to want to

00:01:21,659 --> 00:01:24,990
have a basic understanding of how to

00:01:23,549 --> 00:01:27,900
distribute Python code that you've

00:01:24,990 --> 00:01:29,600
written and then I also want you to know

00:01:27,900 --> 00:01:32,009
how to learn more because there isn't

00:01:29,600 --> 00:01:34,710
time to do justice to everything in

00:01:32,009 --> 00:01:37,770
Python packaging land so it's helpful if

00:01:34,710 --> 00:01:39,780
you know the basics and what are the

00:01:37,770 --> 00:01:41,189
right questions to ask and then you can

00:01:39,780 --> 00:01:43,290
do the right research to find out the

00:01:41,189 --> 00:01:45,090
answers so let's talk about installing

00:01:43,290 --> 00:01:47,009
Python code if you have a Python

00:01:45,090 --> 00:01:49,380
interpreter it might look something like

00:01:47,009 --> 00:01:50,399
this and if you're lucky your Python

00:01:49,380 --> 00:01:52,350
interpreter comes with batteries

00:01:50,399 --> 00:01:54,030
included one of those modules is the

00:01:52,350 --> 00:01:57,450
numbers module anyone in here imported

00:01:54,030 --> 00:01:58,890
the numbers module ever yeah I just

00:01:57,450 --> 00:02:00,180
found the name of it in the Python

00:01:58,890 --> 00:02:04,409
standard library it sounded cool

00:02:00,180 --> 00:02:05,909
so when you import it anyway it gives

00:02:04,409 --> 00:02:08,009
you a thing you can print and if you

00:02:05,909 --> 00:02:09,679
print the numbers module like any module

00:02:08,009 --> 00:02:11,760
it'll print the path that it came from

00:02:09,679 --> 00:02:13,830
this is one of the most important things

00:02:11,760 --> 00:02:15,420
to know about Python packaging

00:02:13,830 --> 00:02:17,400
that the module object will tell you

00:02:15,420 --> 00:02:19,530
where it came from if you let it tell

00:02:17,400 --> 00:02:23,220
you this can be super useful in

00:02:19,530 --> 00:02:25,320
debugging and it's driven by a list of

00:02:23,220 --> 00:02:28,140
directories that are searched when you

00:02:25,320 --> 00:02:31,140
import and that list is an assist module

00:02:28,140 --> 00:02:32,900
sistar path it's a list it looks

00:02:31,140 --> 00:02:35,310
something like this this is kind of long

00:02:32,900 --> 00:02:36,660
but the numbers module definitely came

00:02:35,310 --> 00:02:39,210
from one of these entries and the

00:02:36,660 --> 00:02:41,280
purpose again that's to stop path is so

00:02:39,210 --> 00:02:44,160
that you can so the Python interpreter

00:02:41,280 --> 00:02:45,900
will search in each of these places for

00:02:44,160 --> 00:02:48,810
a module or something it can import

00:02:45,900 --> 00:02:52,170
until it satisfies your request so I'll

00:02:48,810 --> 00:02:55,770
highlight second one here this path

00:02:52,170 --> 00:02:57,780
usual lib Python 2.7 is in fact where

00:02:55,770 --> 00:02:59,520
the numbers module came from so that's

00:02:57,780 --> 00:03:01,260
great if you want to use Python code

00:02:59,520 --> 00:03:02,790
that comes in the standard library but

00:03:01,260 --> 00:03:04,410
you might want to install things that

00:03:02,790 --> 00:03:06,060
aren't in a standard library for example

00:03:04,410 --> 00:03:06,660
if it's around the time of Hurricane

00:03:06,060 --> 00:03:08,070
sandy

00:03:06,660 --> 00:03:11,370
and you've been reading this website

00:03:08,070 --> 00:03:13,350
regret see you might know that these

00:03:11,370 --> 00:03:14,910
cookies are a hurricane sandy special

00:03:13,350 --> 00:03:17,160
that you might want to buy they're

00:03:14,910 --> 00:03:19,890
handmade available for you on Etsy and

00:03:17,160 --> 00:03:21,570
so if you're lucky you can import an

00:03:19,890 --> 00:03:24,750
empty module by doing something like

00:03:21,570 --> 00:03:27,330
this the photo here is a snapshot from

00:03:24,750 --> 00:03:29,310
the cheese shop sketch because that is

00:03:27,330 --> 00:03:31,620
where you can find Python code to

00:03:29,310 --> 00:03:33,510
install the websites name is cheese shop

00:03:31,620 --> 00:03:37,170
although its domain spelled

00:03:33,510 --> 00:03:38,519
PYP i dot python that org i think

00:03:37,170 --> 00:03:40,110
there's some history about it being used

00:03:38,519 --> 00:03:41,459
to be called the cheese shop and so now

00:03:40,110 --> 00:03:43,980
it's still called the cheese shop but

00:03:41,459 --> 00:03:47,370
nobody says it except in recorded talks

00:03:43,980 --> 00:03:49,950
at PyCon but if you search there if you

00:03:47,370 --> 00:03:51,300
search on the cheese shop for se wrapper

00:03:49,950 --> 00:03:55,320
because you want to find something it

00:03:51,300 --> 00:03:56,820
will wrap the Etsy API then ah you put

00:03:55,320 --> 00:03:59,459
in that search you'll find a webpage

00:03:56,820 --> 00:04:01,620
that looks like this this is an index of

00:03:59,459 --> 00:04:03,150
packages matching anti wrapper I'll zoom

00:04:01,620 --> 00:04:06,450
in just about where the mouse pointer is

00:04:03,150 --> 00:04:08,250
on this first hit Python - Etsy so great

00:04:06,450 --> 00:04:10,200
there's some code on the cheese shop

00:04:08,250 --> 00:04:13,140
that will let you communicate with the

00:04:10,200 --> 00:04:15,320
Etsy API this is sweet but it says

00:04:13,140 --> 00:04:17,430
Python - Etsy is the name of the package

00:04:15,320 --> 00:04:18,780
some of you might have already noticed

00:04:17,430 --> 00:04:20,790
that if you try to import something

00:04:18,780 --> 00:04:22,919
called Python - Etsy you will get a

00:04:20,790 --> 00:04:24,539
syntax error this doesn't make sense

00:04:22,919 --> 00:04:26,510
how can this thing be called Python -

00:04:24,539 --> 00:04:28,100
Etsy there's

00:04:26,510 --> 00:04:30,350
can't put a hyphen in a module name so

00:04:28,100 --> 00:04:32,750
the name of things on the cheese shop is

00:04:30,350 --> 00:04:34,940
not the module you're installing it's

00:04:32,750 --> 00:04:36,440
the so-called distribution that happens

00:04:34,940 --> 00:04:39,080
to contain some module and who knows

00:04:36,440 --> 00:04:41,090
what modules it contains luckily this

00:04:39,080 --> 00:04:43,340
what explains on a cheese trap entry

00:04:41,090 --> 00:04:46,370
which you can see here this is just the

00:04:43,340 --> 00:04:47,210
Python - Etsy page on pi PI dot

00:04:46,370 --> 00:04:50,540
python.org

00:04:47,210 --> 00:04:52,400
and it says great it'll make it easy to

00:04:50,540 --> 00:04:54,890
interact with the Etsy API there's

00:04:52,400 --> 00:04:57,080
information on how to install it and in

00:04:54,890 --> 00:04:59,240
the initialization section down below it

00:04:57,080 --> 00:05:01,550
tells you that it'll make a module

00:04:59,240 --> 00:05:04,010
called Etsy so great if you have this

00:05:01,550 --> 00:05:05,810
you can import Etsy some of you as

00:05:04,010 --> 00:05:08,510
student readers might have noticed that

00:05:05,810 --> 00:05:10,100
the installation instructions say sudo a

00:05:08,510 --> 00:05:16,040
pip install Etsy and the more astute

00:05:10,100 --> 00:05:19,760
will have noticed it says sub-p PIF

00:05:16,040 --> 00:05:21,530
install Etsy so this is a photo of a guy

00:05:19,760 --> 00:05:23,720
named Genki sudo he's part of a band

00:05:21,530 --> 00:05:26,600
called world world order they make

00:05:23,720 --> 00:05:28,640
fantastic robot ask choreographed dance

00:05:26,600 --> 00:05:29,900
moves and the music to back it up I

00:05:28,640 --> 00:05:31,610
recommend finding some of their videos

00:05:29,900 --> 00:05:33,410
the point is this is what you should be

00:05:31,610 --> 00:05:35,140
thinking of when you think of sudo you

00:05:33,410 --> 00:05:37,610
should not be thinking sudo pip install

00:05:35,140 --> 00:05:40,880
because sudo is an extremely powerful

00:05:37,610 --> 00:05:42,410
way to run any command the result of it

00:05:40,880 --> 00:05:42,890
are sort of unrecoverable for your

00:05:42,410 --> 00:05:44,210
system

00:05:42,890 --> 00:05:47,270
something you run on a Mac or Linux

00:05:44,210 --> 00:05:49,580
system with sudo can totally replace

00:05:47,270 --> 00:05:52,930
your operating system and if you're on

00:05:49,580 --> 00:05:55,790
Windows it'll give you command not found

00:05:52,930 --> 00:05:57,290
so this is suboptimal also I want to

00:05:55,790 --> 00:05:59,390
take a brief digression to say how I

00:05:57,290 --> 00:06:00,020
first got really involved in programming

00:05:59,390 --> 00:06:03,560
in Python

00:06:00,020 --> 00:06:05,320
in 2001 I wanted to write some code to

00:06:03,560 --> 00:06:08,960
convert the high school newspapers

00:06:05,320 --> 00:06:12,320
PageMaker 6.5 multi-page printed monthly

00:06:08,960 --> 00:06:13,820
newspaper and generate an HTML website

00:06:12,320 --> 00:06:17,240
because the web is gonna be the future

00:06:13,820 --> 00:06:18,860
and I knew that Python was a great

00:06:17,240 --> 00:06:21,620
language to write programs in I've been

00:06:18,860 --> 00:06:23,720
learning C++ in high school but the

00:06:21,620 --> 00:06:25,760
computer in the trapezoid office that

00:06:23,720 --> 00:06:27,440
was the high school newspaper I didn't

00:06:25,760 --> 00:06:29,720
have admin privilege dog privileges on

00:06:27,440 --> 00:06:31,340
it luckily as a teenage script Kitty

00:06:29,720 --> 00:06:33,050
this wasn't a big deal I downloaded a

00:06:31,340 --> 00:06:37,070
local privilege escalation vulnerability

00:06:33,050 --> 00:06:39,650
so that I could get a CMD prompt running

00:06:37,070 --> 00:06:40,580
as the quality admin username system so

00:06:39,650 --> 00:06:44,810
that I could install

00:06:40,580 --> 00:06:46,400
on two point two or something ah people

00:06:44,810 --> 00:06:49,789
don't always have sudo they could tell

00:06:46,400 --> 00:06:52,039
them to run sudo and they can't it's

00:06:49,789 --> 00:06:53,689
kind of sad luckily there is a way to

00:06:52,039 --> 00:06:55,550
install Python packages for that meeting

00:06:53,689 --> 00:06:57,800
sudo and I'll bring you back to sis top

00:06:55,550 --> 00:06:59,659
path in particular one of the entries in

00:06:57,800 --> 00:07:01,909
sis top path is inside your home

00:06:59,659 --> 00:07:06,469
directory or your users directory on Mac

00:07:01,909 --> 00:07:07,580
OS or the users folder or documents and

00:07:06,469 --> 00:07:09,560
settings depending on what version of

00:07:07,580 --> 00:07:11,780
Windows you're on there's a place that

00:07:09,560 --> 00:07:13,310
Python has that it will look if you

00:07:11,780 --> 00:07:15,349
install things in the right way and

00:07:13,310 --> 00:07:18,680
there is a right way and that way is

00:07:15,349 --> 00:07:20,659
this pif install double - user Python -

00:07:18,680 --> 00:07:23,389
Etsy and that'll take this Python - Etsy

00:07:20,659 --> 00:07:26,419
thing look it up on pi PI it'll download

00:07:23,389 --> 00:07:28,039
the source distribution from pi PI it'll

00:07:26,419 --> 00:07:29,330
succeed and it'll clean up I don't know

00:07:28,039 --> 00:07:32,240
why prints cleaning up I guess it

00:07:29,330 --> 00:07:33,680
removes a temporary directories so after

00:07:32,240 --> 00:07:35,930
you do this you'll be able to import

00:07:33,680 --> 00:07:37,520
Etsy and when you do that that Etsy

00:07:35,930 --> 00:07:40,759
module will tell you that it came from

00:07:37,520 --> 00:07:42,259
inside your home directory so things

00:07:40,759 --> 00:07:46,250
look great I want to pause for a moment

00:07:42,259 --> 00:07:48,440
to reflect we've seen modules like the

00:07:46,250 --> 00:07:50,500
Etsy module we've seen distributions

00:07:48,440 --> 00:07:52,819
which are what you get from pi pi and

00:07:50,500 --> 00:07:55,099
we've seen tools we've just seen one

00:07:52,819 --> 00:07:57,080
tool pip install double - user we

00:07:55,099 --> 00:07:58,729
haven't talked about any useful reason

00:07:57,080 --> 00:08:00,849
to use sudo yet we haven't talked about

00:07:58,729 --> 00:08:08,180
virtual end yet and that's fine for now

00:08:00,849 --> 00:08:09,620
so pip and pi PI aren't all ah don't

00:08:08,180 --> 00:08:10,759
always work the way you want and so I'm

00:08:09,620 --> 00:08:12,500
gonna talk about a few of the failure

00:08:10,759 --> 00:08:14,449
modes there is by the way a brand of ice

00:08:12,500 --> 00:08:17,240
cream in India called quality spelled

00:08:14,449 --> 00:08:18,620
this way actually they stopped being

00:08:17,240 --> 00:08:20,690
allowed to be called ice cream because

00:08:18,620 --> 00:08:22,849
they fatten the milk with a vegetable

00:08:20,690 --> 00:08:24,770
fat so they're now quality frozen

00:08:22,849 --> 00:08:27,680
desserts but anyway if you pip install

00:08:24,770 --> 00:08:29,449
double - user Etsy which is the

00:08:27,680 --> 00:08:31,610
different distribution than Python -

00:08:29,449 --> 00:08:33,949
Etsy so it's a totally different thing

00:08:31,610 --> 00:08:35,209
made by some totally unrelated people it

00:08:33,949 --> 00:08:37,370
happens to also create a module called

00:08:35,209 --> 00:08:40,360
Etsy f you install it pip will give you

00:08:37,370 --> 00:08:40,360
this helpful error message

00:08:41,360 --> 00:08:45,360
and the reason it gives you the specific

00:08:43,500 --> 00:08:49,529
helpful error message is that the author

00:08:45,360 --> 00:08:51,120
of this distribution uses a readme file

00:08:49,529 --> 00:08:53,700
which has a square bracket in an

00:08:51,120 --> 00:08:57,630
inopportune place and the square bracket

00:08:53,700 --> 00:08:59,490
means that pip not knowing what what to

00:08:57,630 --> 00:09:01,470
do will like a little look through the

00:08:59,490 --> 00:09:03,420
readme for links hoping that it can find

00:09:01,470 --> 00:09:05,850
a place to download the source code from

00:09:03,420 --> 00:09:07,500
and it'll follow one of these links cuz

00:09:05,850 --> 00:09:09,000
anna has a square bracket so it's like

00:09:07,500 --> 00:09:11,370
oh this is definitely ninety version six

00:09:09,000 --> 00:09:14,940
URL and then it's not like version six

00:09:11,370 --> 00:09:16,440
to RL and then pip exits ah so one

00:09:14,940 --> 00:09:18,120
problem with pi PI is that sometimes

00:09:16,440 --> 00:09:20,459
download URLs are wrong or they are

00:09:18,120 --> 00:09:21,690
missing and in fact there's no automated

00:09:20,459 --> 00:09:24,180
checking that when you try to pick

00:09:21,690 --> 00:09:26,760
install something from pi pi that it'll

00:09:24,180 --> 00:09:31,110
actually install luckily the first of

00:09:26,760 --> 00:09:33,690
these is fixed with pip 1.5 pip 1.5 and

00:09:31,110 --> 00:09:35,640
going forward will only install if you

00:09:33,690 --> 00:09:37,740
pick install a thing it'll only little

00:09:35,640 --> 00:09:40,110
look for that distribution only look for

00:09:37,740 --> 00:09:42,110
table GZ or zip files hosted on the

00:09:40,110 --> 00:09:45,300
Python package index on the cheese shop

00:09:42,110 --> 00:09:46,770
so that's fixed nothing does check

00:09:45,300 --> 00:09:48,899
though that things will actually install

00:09:46,770 --> 00:09:51,329
it's just it'll only look on the cheese

00:09:48,899 --> 00:09:52,709
shop another situation you might find

00:09:51,329 --> 00:09:56,250
yourself running into this is a bit

00:09:52,709 --> 00:09:57,810
obscure ah is if let's say you're

00:09:56,250 --> 00:09:59,370
installing some Python code and it's

00:09:57,810 --> 00:10:01,860
incompatible with your version of Python

00:09:59,370 --> 00:10:03,600
Python 3.2 and ginger 2 don't get along

00:10:01,860 --> 00:10:07,680
3.3 plus great

00:10:03,600 --> 00:10:09,180
2.7 great not 3.2 but you might try to

00:10:07,680 --> 00:10:10,950
install it not knowing any better and

00:10:09,180 --> 00:10:13,410
pip not knowing any better will try to

00:10:10,950 --> 00:10:14,610
install it people run into this syntax

00:10:13,410 --> 00:10:16,440
error because this doesn't work with

00:10:14,610 --> 00:10:18,360
your version of Python and it'll say

00:10:16,440 --> 00:10:20,220
great I've successfully installed Jinja

00:10:18,360 --> 00:10:21,990
- I put it in the right place I've

00:10:20,220 --> 00:10:23,490
removed all the temporary files so

00:10:21,990 --> 00:10:26,160
you're like ok well I saw some stuff

00:10:23,490 --> 00:10:27,510
scroll by what if I import it and your

00:10:26,160 --> 00:10:31,050
Python interpreter will be like what are

00:10:27,510 --> 00:10:32,399
you talking about this can't run so at

00:10:31,050 --> 00:10:37,769
this point it might be worth thinking

00:10:32,399 --> 00:10:38,910
about uninstallation so if you want to

00:10:37,769 --> 00:10:41,970
uninstall something let's say you

00:10:38,910 --> 00:10:44,209
install this module called Etsy and you

00:10:41,970 --> 00:10:46,560
try to uninstall it pip might tell you

00:10:44,209 --> 00:10:48,959
there's no requirement called Etsy

00:10:46,560 --> 00:10:51,540
that's because pip calls distributions

00:10:48,959 --> 00:10:52,980
requirements and so there's no

00:10:51,540 --> 00:10:54,600
distribution installed called a--they

00:10:52,980 --> 00:10:57,990
cuz the empty module came in from

00:10:54,600 --> 00:10:59,339
Python - a t-distribution so okay we can

00:10:57,990 --> 00:11:00,480
understand things with pip on install

00:10:59,339 --> 00:11:04,019
and this by the way is a huge

00:11:00,480 --> 00:11:05,970
improvement from the past there are used

00:11:04,019 --> 00:11:07,380
to not be any uninstall from stuff from

00:11:05,970 --> 00:11:10,110
pi PI so this is actually pretty good

00:11:07,380 --> 00:11:12,120
and the uninstall process is driven

00:11:10,110 --> 00:11:15,720
through this thing in Python known as

00:11:12,120 --> 00:11:17,639
eggs so there's a data directory that

00:11:15,720 --> 00:11:20,880
contains information about this package

00:11:17,639 --> 00:11:23,550
then I should say the distribution the

00:11:20,880 --> 00:11:26,100
name of the distribution plus some stuff

00:11:23,550 --> 00:11:29,850
dot egg info and inside the file package

00:11:26,100 --> 00:11:32,370
data is information about this

00:11:29,850 --> 00:11:33,600
particular distribution actually this is

00:11:32,370 --> 00:11:35,250
getting renamed it's gonna be called

00:11:33,600 --> 00:11:37,339
just info not egg info but that's not

00:11:35,250 --> 00:11:40,410
that important inside this file is

00:11:37,339 --> 00:11:42,180
information from pi PI

00:11:40,410 --> 00:11:43,980
actually not from PI P I'll come down in

00:11:42,180 --> 00:11:45,750
a second it's information about the

00:11:43,980 --> 00:11:47,250
distribution anyway and the way this

00:11:45,750 --> 00:11:49,110
gets filled in this directory I should

00:11:47,250 --> 00:11:51,720
say also contains information about what

00:11:49,110 --> 00:11:53,399
files were added so that way pip can use

00:11:51,720 --> 00:11:56,639
that to drive the uninstallation process

00:11:53,399 --> 00:11:58,470
and there's no reverse index so if

00:11:56,639 --> 00:11:59,939
you've installed a module pip doesn't

00:11:58,470 --> 00:12:02,550
really know where it came from

00:11:59,939 --> 00:12:04,649
it is hacky but it can go from the name

00:12:02,550 --> 00:12:06,569
of the distribution to the list of files

00:12:04,649 --> 00:12:09,000
and then go delete them all anyway this

00:12:06,569 --> 00:12:11,279
directory gets generated because pip

00:12:09,000 --> 00:12:12,660
runs the setup table by command hanging

00:12:11,279 --> 00:12:14,730
out inside at our daddies either you

00:12:12,660 --> 00:12:16,319
downloaded with this argument egg

00:12:14,730 --> 00:12:19,259
underscore info and that generates all

00:12:16,319 --> 00:12:21,240
this metadata and I mean it run setup

00:12:19,259 --> 00:12:23,490
dot pi this is an important point set up

00:12:21,240 --> 00:12:24,930
by isn't a configuration file it's a

00:12:23,490 --> 00:12:27,709
Python program it happens to contain

00:12:24,930 --> 00:12:31,860
configuration about how a Python

00:12:27,709 --> 00:12:33,420
distribution should be installed and so

00:12:31,860 --> 00:12:36,060
a common feeling really people have is

00:12:33,420 --> 00:12:37,920
they want to not repeat themselves so

00:12:36,060 --> 00:12:40,680
they say I'm gonna store the version

00:12:37,920 --> 00:12:43,529
number of this code inside the code and

00:12:40,680 --> 00:12:45,899
then in a set up top PI they import the

00:12:43,529 --> 00:12:48,300
project but this means that anyone else

00:12:45,899 --> 00:12:49,560
when they run the setup top pi because

00:12:48,300 --> 00:12:52,199
they don't have the thing imported yet

00:12:49,560 --> 00:12:54,420
it breaks in half there's a lot of ways

00:12:52,199 --> 00:12:55,139
that set up top I programs can trip you

00:12:54,420 --> 00:12:58,170
up

00:12:55,139 --> 00:13:00,089
keep in mind or actually programs so

00:12:58,170 --> 00:13:02,279
this stuff so far the stuff so far works

00:13:00,089 --> 00:13:04,350
great so long as you have pip but if you

00:13:02,279 --> 00:13:07,199
don't have pip well we should talk about

00:13:04,350 --> 00:13:08,190
how to get it so if this is like your

00:13:07,199 --> 00:13:09,750
life because

00:13:08,190 --> 00:13:11,760
you just installed a vending machine or

00:13:09,750 --> 00:13:12,360
something then you'll need to download

00:13:11,760 --> 00:13:14,250
it somehow

00:13:12,360 --> 00:13:16,440
and according to the pip website the

00:13:14,250 --> 00:13:18,810
best way to do that is to download the

00:13:16,440 --> 00:13:20,760
file get pip dot pi and to run that

00:13:18,810 --> 00:13:23,070
program only knowing what I've said

00:13:20,760 --> 00:13:25,440
before you should probably add - - user

00:13:23,070 --> 00:13:27,420
to that and if you do that then great

00:13:25,440 --> 00:13:30,120
people get installed and you won't be

00:13:27,420 --> 00:13:32,610
able to find it in your shop path that's

00:13:30,120 --> 00:13:34,380
ok because you can add it to your shell

00:13:32,610 --> 00:13:36,420
path and how to do this varies between

00:13:34,380 --> 00:13:39,270
shells varies between Linux

00:13:36,420 --> 00:13:41,130
distributions and Mac OS and Windows but

00:13:39,270 --> 00:13:43,460
you'll need to add something like this

00:13:41,130 --> 00:13:45,720
this directory is the analog of that

00:13:43,460 --> 00:13:47,760
directory in your home folder this is

00:13:45,720 --> 00:13:49,590
where scripts or programs that are

00:13:47,760 --> 00:13:51,300
Python programs will be installed so

00:13:49,590 --> 00:13:55,820
once you've added that to your shells

00:13:51,300 --> 00:13:58,380
search path you'll get pip great so

00:13:55,820 --> 00:14:01,230
let's talk about how to distribute code

00:13:58,380 --> 00:14:02,370
and I want to take a bit of an example

00:14:01,230 --> 00:14:04,380
so we've talked about Etsy we've talked

00:14:02,370 --> 00:14:06,480
about shopping after Hurricane sandy I

00:14:04,380 --> 00:14:08,400
have this sweatshirt here and I can see

00:14:06,480 --> 00:14:10,560
it's kind of falling apart it does have

00:14:08,400 --> 00:14:13,080
this cool octopus on it though which is

00:14:10,560 --> 00:14:15,570
holding a boat and I want another one of

00:14:13,080 --> 00:14:17,400
these so I'm gonna write a program maybe

00:14:15,570 --> 00:14:19,340
to buy one of these every year if I just

00:14:17,400 --> 00:14:21,840
automate this then I'll never forget and

00:14:19,340 --> 00:14:24,210
we'll call it get octopi the name of the

00:14:21,840 --> 00:14:27,120
project but because we're allowed to

00:14:24,210 --> 00:14:29,760
mean consistency we'll make a Python

00:14:27,120 --> 00:14:31,020
program called octopi getter rather the

00:14:29,760 --> 00:14:32,190
final module will be called octopi

00:14:31,020 --> 00:14:34,620
getter and I'm hacking and I'm hacking

00:14:32,190 --> 00:14:36,810
and this goes great some time passes and

00:14:34,620 --> 00:14:39,060
I've read somewhere that I need a setup

00:14:36,810 --> 00:14:40,950
type I and a license in order to make

00:14:39,060 --> 00:14:43,230
this a real open source project so I've

00:14:40,950 --> 00:14:44,820
added those and now it's time to

00:14:43,230 --> 00:14:47,820
register it but the Python package index

00:14:44,820 --> 00:14:49,980
so other people other octopus sweatshirt

00:14:47,820 --> 00:14:52,260
enthusiasts can find this on the Python

00:14:49,980 --> 00:14:54,089
package index to do that you run the

00:14:52,260 --> 00:14:57,839
register command which like prints some

00:14:54,089 --> 00:14:59,339
stuff and succeeds so great and then if

00:14:57,839 --> 00:15:01,470
you need to upload this code to the

00:14:59,339 --> 00:15:03,540
Python package index you have to run

00:15:01,470 --> 00:15:06,210
these two commands at once

00:15:03,540 --> 00:15:08,610
it won't work to run them separately but

00:15:06,210 --> 00:15:10,800
if you do then it'll create a source

00:15:08,610 --> 00:15:13,170
distribution which will be named after

00:15:10,800 --> 00:15:14,550
the directory a little it'll be named

00:15:13,170 --> 00:15:16,380
after stuff in the set up top PI I'll

00:15:14,550 --> 00:15:18,510
come to that in a second ah

00:15:16,380 --> 00:15:20,490
and then it'll upload that to pi pi so

00:15:18,510 --> 00:15:21,560
it'll do some things it'll print some

00:15:20,490 --> 00:15:25,340
things and

00:15:21,560 --> 00:15:26,570
succeed so great ah that works so long

00:15:25,340 --> 00:15:28,970
as you know what to put in your setup

00:15:26,570 --> 00:15:29,630
top I file here is the simplest one

00:15:28,970 --> 00:15:31,820
that'll work

00:15:29,630 --> 00:15:34,520
for the product I've described the

00:15:31,820 --> 00:15:37,070
project is called get octopi so it'll be

00:15:34,520 --> 00:15:39,860
available on the cheese shop under the

00:15:37,070 --> 00:15:42,940
name get octopi version 100 why not and

00:15:39,860 --> 00:15:45,920
it has this one package octopi getter

00:15:42,940 --> 00:15:48,560
but actually some of you may know

00:15:45,920 --> 00:15:51,020
there's a difference in core Python land

00:15:48,560 --> 00:15:53,120
between modules and packages and this is

00:15:51,020 --> 00:15:56,210
a one file Python module so you have to

00:15:53,120 --> 00:15:58,490
spell it this way PI modules I don't

00:15:56,210 --> 00:16:00,350
know why it'll probably baby that'll

00:15:58,490 --> 00:16:01,550
change someday and we should talk about

00:16:00,350 --> 00:16:04,490
that and maybe we can fix that a

00:16:01,550 --> 00:16:07,100
Sprint's also this is the Python program

00:16:04,490 --> 00:16:10,520
so it's kind of weird that if you just

00:16:07,100 --> 00:16:12,860
run this thing it'll print some stuff

00:16:10,520 --> 00:16:14,390
out normally with Python programs the

00:16:12,860 --> 00:16:17,630
way that people structure them is they

00:16:14,390 --> 00:16:20,450
add a little protection so that it only

00:16:17,630 --> 00:16:21,980
runs intentionally if you run it as

00:16:20,450 --> 00:16:23,690
pythons based the program name if you

00:16:21,980 --> 00:16:26,780
were to try to import setup the way we

00:16:23,690 --> 00:16:29,540
had it before it would execute the setup

00:16:26,780 --> 00:16:30,970
top I call which is weird I think most

00:16:29,540 --> 00:16:33,740
setup I file should be written this way

00:16:30,970 --> 00:16:35,480
but people just don't do that they just

00:16:33,740 --> 00:16:37,250
leave out the if name equals main thing

00:16:35,480 --> 00:16:40,850
so great we'll just write them the

00:16:37,250 --> 00:16:44,390
standard way also by the way this utils

00:16:40,850 --> 00:16:46,460
dot core comes from around Python 1.5

00:16:44,390 --> 00:16:48,200
and even in the modern documentation you

00:16:46,460 --> 00:16:51,680
can see remarks about how these two

00:16:48,200 --> 00:16:53,380
tools is great and in Python 1.6 things

00:16:51,680 --> 00:16:55,580
will be totally better in this utils and

00:16:53,380 --> 00:16:58,100
you can see that in the current version

00:16:55,580 --> 00:16:59,890
of the Python 3 documentation not just

00:16:58,100 --> 00:17:01,730
the two-seven stuff so anyway

00:16:59,890 --> 00:17:03,950
maybe we should all I should submit a

00:17:01,730 --> 00:17:06,400
patch for that so I think I'm signing

00:17:03,950 --> 00:17:08,449
myself up to some work it's prints so

00:17:06,400 --> 00:17:10,790
you can add some more information to

00:17:08,449 --> 00:17:12,319
this I could talk about myself more

00:17:10,790 --> 00:17:13,640
importantly I should write a summary and

00:17:12,319 --> 00:17:15,860
a description of this particular

00:17:13,640 --> 00:17:18,230
distribution that I'm uploading to pi PI

00:17:15,860 --> 00:17:18,980
I'll tell you how to find information

00:17:18,230 --> 00:17:20,959
about that later

00:17:18,980 --> 00:17:23,630
long story short you add all that stuff

00:17:20,959 --> 00:17:28,040
to the setup lap I call using keyboard

00:17:23,630 --> 00:17:30,530
arguments so this is great I now have a

00:17:28,040 --> 00:17:32,240
thing on pi PI called get octopi it has

00:17:30,530 --> 00:17:33,980
a module called octopi getter the only

00:17:32,240 --> 00:17:35,350
thing it doesn't have is a program

00:17:33,980 --> 00:17:37,510
actually get

00:17:35,350 --> 00:17:39,370
sweatshirts and eventually I might write

00:17:37,510 --> 00:17:42,220
that I might call it main here's what it

00:17:39,370 --> 00:17:44,260
might look like but what I would really

00:17:42,220 --> 00:17:46,780
want is a way to run that from the

00:17:44,260 --> 00:17:48,549
command line which is a bit odd because

00:17:46,780 --> 00:17:49,799
python is sort of really about importing

00:17:48,549 --> 00:17:52,150
things running them inside Python

00:17:49,799 --> 00:17:54,130
luckily there is a way to make these

00:17:52,150 --> 00:17:56,230
little command line scripts using setup

00:17:54,130 --> 00:17:58,539
table pie files and it is using the

00:17:56,230 --> 00:18:02,770
entry points keyword argument to the

00:17:58,539 --> 00:18:06,220
setup function this is a really

00:18:02,770 --> 00:18:08,740
interestingly complex line it is a key

00:18:06,220 --> 00:18:10,840
on the outside there's a key in the

00:18:08,740 --> 00:18:12,750
inside console scripts and then there's

00:18:10,840 --> 00:18:15,280
a key value pair stored inside a string

00:18:12,750 --> 00:18:18,460
but that's just how it is so that's just

00:18:15,280 --> 00:18:19,510
how you have to do it so once you've

00:18:18,460 --> 00:18:22,809
done that ah

00:18:19,510 --> 00:18:25,360
you can run pit install double - user

00:18:22,809 --> 00:18:27,520
dot which means whatever directory I'm

00:18:25,360 --> 00:18:32,559
in find the setup that PI file there and

00:18:27,520 --> 00:18:36,340
execute it and that will put the get now

00:18:32,559 --> 00:18:37,690
program into your path so you might run

00:18:36,340 --> 00:18:40,360
it this way and I'll just show you an

00:18:37,690 --> 00:18:41,559
octopus here for good measure so if you

00:18:40,360 --> 00:18:44,020
just run this in your shell after

00:18:41,559 --> 00:18:45,760
running pip install double - user dot

00:18:44,020 --> 00:18:46,990
probably what you'll get is command not

00:18:45,760 --> 00:18:48,400
found because you need to fix your path

00:18:46,990 --> 00:18:52,450
so once you've fixed your path and you

00:18:48,400 --> 00:18:54,820
try again you'll get get now it'll log

00:18:52,450 --> 00:18:56,409
you in let's see maybe it'll search for

00:18:54,820 --> 00:18:58,780
the kind of things you want to buy if

00:18:56,409 --> 00:19:00,070
you've configured it properly it'll buy

00:18:58,780 --> 00:19:00,760
them and tell you how much you spent

00:19:00,070 --> 00:19:03,760
perfect

00:19:00,760 --> 00:19:06,340
annually Internet can now automate their

00:19:03,760 --> 00:19:08,500
acquisition process so you upload this

00:19:06,340 --> 00:19:10,240
to pi pi again and if somebody else will

00:19:08,500 --> 00:19:12,600
be downloads it what they're likely to

00:19:10,240 --> 00:19:14,320
see when they run it is an error message

00:19:12,600 --> 00:19:17,740
so we should probably talk about

00:19:14,320 --> 00:19:19,510
dependencies on your system you have an

00:19:17,740 --> 00:19:20,950
empty module because you installed it

00:19:19,510 --> 00:19:23,620
using people install double - user

00:19:20,950 --> 00:19:24,970
Python - jetty on their system they

00:19:23,620 --> 00:19:28,860
don't so we'll go back to the setup PI

00:19:24,970 --> 00:19:31,330
file going from this to add one more

00:19:28,860 --> 00:19:33,039
keyword argument install requires and

00:19:31,330 --> 00:19:37,720
this here is the name of a distribution

00:19:33,039 --> 00:19:38,710
that your distribution depends on so

00:19:37,720 --> 00:19:40,330
there are other ways to specify

00:19:38,710 --> 00:19:42,370
dependencies and I'll just mention them

00:19:40,330 --> 00:19:44,530
very briefly there's a well-known one

00:19:42,370 --> 00:19:46,480
named ZC build out there's another

00:19:44,530 --> 00:19:49,000
well-known one name requirements dot txt

00:19:46,480 --> 00:19:49,630
CC dot build out is really good for

00:19:49,000 --> 00:19:53,020
setting

00:19:49,630 --> 00:19:54,910
not just not just dating how to install

00:19:53,020 --> 00:19:56,020
this particular Python distribution but

00:19:54,910 --> 00:19:58,720
for describing the state of an

00:19:56,020 --> 00:20:00,010
application including random file he

00:19:58,720 --> 00:20:02,100
download off the internet and put a need

00:20:00,010 --> 00:20:04,690
to put into the right place and so on

00:20:02,100 --> 00:20:07,840
requirements dot text is a good way to

00:20:04,690 --> 00:20:09,670
list the specific distributions that you

00:20:07,840 --> 00:20:11,410
have installed and at any given moment

00:20:09,670 --> 00:20:13,570
that you really think your application

00:20:11,410 --> 00:20:15,929
works with and then you can pass that to

00:20:13,570 --> 00:20:18,820
pip in a way that I can talk about later

00:20:15,929 --> 00:20:19,870
so this is all good we can now upload

00:20:18,820 --> 00:20:21,429
things to PI pi

00:20:19,870 --> 00:20:24,610
we can distribute them in a way that

00:20:21,429 --> 00:20:26,020
other people know about and can install

00:20:24,610 --> 00:20:28,059
based on with the dependency is that

00:20:26,020 --> 00:20:29,799
correctly let's talk a bit about this

00:20:28,059 --> 00:20:31,600
development workflow so the way I

00:20:29,799 --> 00:20:33,040
mentioned it you run this command after

00:20:31,600 --> 00:20:35,110
you make any changes to your set up top

00:20:33,040 --> 00:20:37,960
PI and what this does is it copies all

00:20:35,110 --> 00:20:39,700
of your code into your local Sai

00:20:37,960 --> 00:20:41,380
packages directory which means that if

00:20:39,700 --> 00:20:44,500
you make any modifications inside the

00:20:41,380 --> 00:20:47,320
directory you're in you have to go run

00:20:44,500 --> 00:20:49,360
pip install double - user dot again for

00:20:47,320 --> 00:20:51,460
them to show up that's a bit annoying so

00:20:49,360 --> 00:20:54,220
if we instead and the double - editable

00:20:51,460 --> 00:20:56,679
flagged pip install then it'll actually

00:20:54,220 --> 00:20:58,270
use the modules from right here rather

00:20:56,679 --> 00:21:01,000
than copying them into your site package

00:20:58,270 --> 00:21:02,919
directory it'll link them so this is

00:21:01,000 --> 00:21:04,919
super useful by the way this has an old

00:21:02,919 --> 00:21:07,780
name which is set up top PI develop I

00:21:04,919 --> 00:21:10,480
haven't tried both of these can now say

00:21:07,780 --> 00:21:11,020
if install double - user double -

00:21:10,480 --> 00:21:12,760
editable

00:21:11,020 --> 00:21:14,710
it's totally better so there's always

00:21:12,760 --> 00:21:16,570
use that don't you set up top hi develop

00:21:14,710 --> 00:21:18,250
if you mentioned other people in your

00:21:16,570 --> 00:21:21,640
development environment instructions -

00:21:18,250 --> 00:21:23,350
you set up the PI develop go fix that so

00:21:21,640 --> 00:21:25,630
you might have also seen there's a few

00:21:23,350 --> 00:21:27,130
different places that provide a set up

00:21:25,630 --> 00:21:29,260
function we've talked about disutility

00:21:27,130 --> 00:21:30,400
core but there's this thing called setup

00:21:29,260 --> 00:21:32,650
tools there's this thing called

00:21:30,400 --> 00:21:35,260
distribute what are those which one

00:21:32,650 --> 00:21:37,840
should you use so distribute is an old

00:21:35,260 --> 00:21:40,299
fork of setup tools that is now merge

00:21:37,840 --> 00:21:43,210
back into setup tools so don't use that

00:21:40,299 --> 00:21:45,010
and in that case you have these two

00:21:43,210 --> 00:21:46,780
choices you can either use the one that

00:21:45,010 --> 00:21:49,020
comes with the Python distribution this

00:21:46,780 --> 00:21:51,220
utils core or it can use the one that

00:21:49,020 --> 00:21:53,530
sort of seems cooler and has more

00:21:51,220 --> 00:21:54,970
features called setup tools doesn't

00:21:53,530 --> 00:21:57,610
really matter that much to me just don't

00:21:54,970 --> 00:21:59,980
use distribute but also I recommend

00:21:57,610 --> 00:22:02,169
using digital core since that way anyone

00:21:59,980 --> 00:22:03,240
who runs your Python code in a set up

00:22:02,169 --> 00:22:05,940
top PI is gay

00:22:03,240 --> 00:22:12,120
to have the requirements needed to

00:22:05,940 --> 00:22:14,580
execute that set up top I file so ah if

00:22:12,120 --> 00:22:17,000
you're going along you might discover it

00:22:14,580 --> 00:22:20,130
at the Python - NC version that you need

00:22:17,000 --> 00:22:22,290
the Python - NT module had a bug in

00:22:20,130 --> 00:22:24,270
version zero point one point zero so you

00:22:22,290 --> 00:22:25,500
know that they upgraded it they fixed

00:22:24,270 --> 00:22:29,670
the bug you might need to specify

00:22:25,500 --> 00:22:32,400
version dependencies like this and if

00:22:29,670 --> 00:22:34,130
your code that relies on this Python -

00:22:32,400 --> 00:22:35,970
exe distribution the newer version

00:22:34,130 --> 00:22:37,380
conflicts with some stuff you already

00:22:35,970 --> 00:22:39,140
had installed it relies on the older

00:22:37,380 --> 00:22:41,429
version you're gonna have a bad time

00:22:39,140 --> 00:22:44,400
so there is a tool for separating these

00:22:41,429 --> 00:22:47,100
out and it is called virtual end virtual

00:22:44,400 --> 00:22:49,140
end visit way to separate out the Python

00:22:47,100 --> 00:22:51,900
packages that are installed so that you

00:22:49,140 --> 00:22:52,590
can get a fresh empty Python for better

00:22:51,900 --> 00:22:54,570
or for worse

00:22:52,590 --> 00:22:56,370
hopefully for better because it means

00:22:54,570 --> 00:22:59,280
that you have total control over what's

00:22:56,370 --> 00:23:02,280
in there and then once you've done this

00:22:59,280 --> 00:23:06,800
source bin activate step which will add

00:23:02,280 --> 00:23:10,260
these parens to your path to your shell

00:23:06,800 --> 00:23:11,820
prompt rather the friends indicate what

00:23:10,260 --> 00:23:13,380
the name of this virtual end is which it

00:23:11,820 --> 00:23:16,950
sort of guesses based on what directory

00:23:13,380 --> 00:23:19,410
the virtual end bits in ah you can run

00:23:16,950 --> 00:23:21,000
the usual pip install commands to make

00:23:19,410 --> 00:23:23,450
your code available inside this virtual

00:23:21,000 --> 00:23:27,050
end there is by the way a shortcut for

00:23:23,450 --> 00:23:31,020
pip install double - editable it is - II

00:23:27,050 --> 00:23:34,020
if you do things this way and they will

00:23:31,020 --> 00:23:35,670
drink some water if you do think this

00:23:34,020 --> 00:23:40,290
way you're probably gonna have a good

00:23:35,670 --> 00:23:42,000
life so long as you don't pass double -

00:23:40,290 --> 00:23:43,200
user to pick install inside a virtual

00:23:42,000 --> 00:23:45,300
end because then it will print you this

00:23:43,200 --> 00:23:46,710
obscure error message and you just have

00:23:45,300 --> 00:23:49,620
to not pass double - user inside a

00:23:46,710 --> 00:23:51,330
virtual end ok another doctor with

00:23:49,620 --> 00:23:52,800
virtual ends is let's say you're hacking

00:23:51,330 --> 00:23:55,020
along in one terminal you're a virtual

00:23:52,800 --> 00:23:57,540
lab is activated so if you run Python

00:23:55,020 --> 00:23:59,670
inside this terminal it'll only use the

00:23:57,540 --> 00:24:01,260
stuff from your virtual end and then if

00:23:59,670 --> 00:24:02,880
you open a new terminal window the

00:24:01,260 --> 00:24:06,240
virtual line of won't be activated and

00:24:02,880 --> 00:24:09,990
now you have to reactivate it or get

00:24:06,240 --> 00:24:12,150
totally confused so I think that the

00:24:09,990 --> 00:24:13,500
activate script is kind of confusing you

00:24:12,150 --> 00:24:15,450
can use virtual ends without using the

00:24:13,500 --> 00:24:16,950
activate scripts at all by just calling

00:24:15,450 --> 00:24:18,810
the particular copy of Pi

00:24:16,950 --> 00:24:20,460
found that it puts in that directory the

00:24:18,810 --> 00:24:22,770
virtual end tool will create a bin

00:24:20,460 --> 00:24:24,480
directory inside that will be bin slash

00:24:22,770 --> 00:24:25,980
Python you can just right bin slash

00:24:24,480 --> 00:24:28,830
Python every time and then you'll never

00:24:25,980 --> 00:24:31,710
have to have this confusion another

00:24:28,830 --> 00:24:33,840
problem you might run into is if you

00:24:31,710 --> 00:24:35,130
need to install not just pure Python

00:24:33,840 --> 00:24:36,240
code but Python code with some C

00:24:35,130 --> 00:24:39,750
dependencies how many people have seen

00:24:36,240 --> 00:24:42,330
an error message like this yeah now

00:24:39,750 --> 00:24:44,220
we're getting somewhere so ah if you

00:24:42,330 --> 00:24:45,630
don't have a C compiler nothing tells

00:24:44,220 --> 00:24:49,980
you exactly what you need to do here

00:24:45,630 --> 00:24:52,650
it's just like so what I would do is I

00:24:49,980 --> 00:24:54,920
would install this L XML module from the

00:24:52,650 --> 00:24:57,030
Ubuntu or the Debian package because

00:24:54,920 --> 00:24:58,890
those have been - in Debian people are

00:24:57,030 --> 00:25:00,270
good at compiling stuff I'm not that

00:24:58,890 --> 00:25:02,100
good at composing the fact I'm a Debian

00:25:00,270 --> 00:25:04,470
developer but you might not be as good

00:25:02,100 --> 00:25:07,440
at compiling stuff as I am so in that

00:25:04,470 --> 00:25:08,850
case you might have to get in the stall

00:25:07,440 --> 00:25:10,710
Python and it'll be great you can import

00:25:08,850 --> 00:25:12,270
l XML it'll be right there and if you

00:25:10,710 --> 00:25:14,820
try to pick this tall L XML it will

00:25:12,270 --> 00:25:17,070
actually satisfactorily say L XML is

00:25:14,820 --> 00:25:18,390
already there I'm not gonna try and it's

00:25:17,070 --> 00:25:20,760
good if it doesn't try because if it did

00:25:18,390 --> 00:25:23,280
it might fail but if you do this in a

00:25:20,760 --> 00:25:25,680
virtual end you won't have the system l

00:25:23,280 --> 00:25:29,820
XML available so it'll be like nope and

00:25:25,680 --> 00:25:32,640
if you really need to compile virtual

00:25:29,820 --> 00:25:37,010
end compile LX ml or another Python

00:25:32,640 --> 00:25:40,650
package that has C dependencies then you

00:25:37,010 --> 00:25:43,560
can use this Debian functionality to get

00:25:40,650 --> 00:25:46,290
the particular bits of code onto your

00:25:43,560 --> 00:25:49,080
system needed to compile the Debian

00:25:46,290 --> 00:25:50,700
package call Python - Aleks ml this is

00:25:49,080 --> 00:25:52,620
kind of a way to abuse the Python the

00:25:50,700 --> 00:25:55,380
Debian packaging system also useful in

00:25:52,620 --> 00:25:57,060
have been - because what you're going to

00:25:55,380 --> 00:25:58,560
do is not actually build the official

00:25:57,060 --> 00:26:00,990
Debian package you're just gonna use

00:25:58,560 --> 00:26:03,690
this to build a different version of the

00:26:00,990 --> 00:26:06,120
same Python code but you'll have all the

00:26:03,690 --> 00:26:07,590
stuff you need in order to do that so

00:26:06,120 --> 00:26:09,300
when faced with these sorts of problems

00:26:07,590 --> 00:26:12,150
a lot of people think I know I'll use

00:26:09,300 --> 00:26:15,870
vagrant so let's talk about that vagrant

00:26:12,150 --> 00:26:19,170
is a great virtualization system it

00:26:15,870 --> 00:26:21,180
takes like half a gigabyte of space you

00:26:19,170 --> 00:26:23,220
need a vagrant you need to have a

00:26:21,180 --> 00:26:24,540
virtual machine tool like VirtualBox you

00:26:23,220 --> 00:26:26,610
need to download some sort of a boon -

00:26:24,540 --> 00:26:28,740
or Debian image and when you do that on

00:26:26,610 --> 00:26:30,820
the hotel Wi-Fi a day and a half ago for

00:26:28,740 --> 00:26:34,149
me you know that you're in for an hour

00:26:30,820 --> 00:26:36,370
half-long wait and then ah if things go

00:26:34,149 --> 00:26:40,450
well you can type this command vagrant

00:26:36,370 --> 00:26:42,669
provision vagrant will then look for a

00:26:40,450 --> 00:26:44,169
file called vagrant file it'll look for

00:26:42,669 --> 00:26:47,080
all the steps in there needed to turn

00:26:44,169 --> 00:26:49,029
this instruction set into a working

00:26:47,080 --> 00:26:50,740
virtual machine image that's running on

00:26:49,029 --> 00:26:52,779
your computer because as far as I can

00:26:50,740 --> 00:26:54,789
tell Mac OS people find it hard to

00:26:52,779 --> 00:26:56,620
install software so they have to install

00:26:54,789 --> 00:26:59,230
a full virtual Linux distribution in

00:26:56,620 --> 00:27:03,190
order to install software once you've

00:26:59,230 --> 00:27:04,330
run this command then vagrant will run

00:27:03,190 --> 00:27:06,009
whatever provisioning tool you have

00:27:04,330 --> 00:27:07,299
configured inside your vagrant file so

00:27:06,009 --> 00:27:09,669
that means waiting some time for puppet

00:27:07,299 --> 00:27:10,990
or chef or ansible or shell scripts or

00:27:09,669 --> 00:27:13,029
make files or who knows well to build

00:27:10,990 --> 00:27:14,830
your VM and if that works out it'll be

00:27:13,029 --> 00:27:16,960
great you just took a long time though

00:27:14,830 --> 00:27:18,279
so let's think about things from a

00:27:16,960 --> 00:27:20,139
different perspective if you're this guy

00:27:18,279 --> 00:27:22,179
and you're staring out into the distance

00:27:20,139 --> 00:27:25,149
knowing that if things do not happen

00:27:22,179 --> 00:27:26,710
fast enough horrifying things will occur

00:27:25,149 --> 00:27:27,759
if you have new engineers of your

00:27:26,710 --> 00:27:29,769
company and you want to give them a good

00:27:27,759 --> 00:27:31,330
time when they first hack on your code

00:27:29,769 --> 00:27:32,830
or if you have new open source

00:27:31,330 --> 00:27:34,720
contributors to Europe and source

00:27:32,830 --> 00:27:36,970
project or you just want to have a

00:27:34,720 --> 00:27:38,679
speedier life you might want to think

00:27:36,970 --> 00:27:41,500
about other ways to handle these sorts

00:27:38,679 --> 00:27:42,700
of problems so I'm going to tell you

00:27:41,500 --> 00:27:44,590
about the ways that the open hatch

00:27:42,700 --> 00:27:46,659
project which is an open source web app

00:27:44,590 --> 00:27:48,750
for helping fittingly new contributors

00:27:46,659 --> 00:27:51,370
find open source projects to work on

00:27:48,750 --> 00:27:53,139
handle this so we have a set up that

00:27:51,370 --> 00:27:55,750
allows us to go from nothing just a

00:27:53,139 --> 00:27:57,429
Python interpreter on your computer to a

00:27:55,750 --> 00:27:58,929
full running django app in five minutes

00:27:57,429 --> 00:28:00,549
and we do that without virtual end we do

00:27:58,929 --> 00:28:03,250
it without pick install we do it without

00:28:00,549 --> 00:28:04,629
a C compiler we use the database that's

00:28:03,250 --> 00:28:06,639
bundle with Python which is equal light

00:28:04,629 --> 00:28:08,850
and I guess I didn't say it but we don't

00:28:06,639 --> 00:28:11,110
use sudo either

00:28:08,850 --> 00:28:14,139
unfortunately Django actually sort of

00:28:11,110 --> 00:28:16,809
requires some compiled code it requires

00:28:14,139 --> 00:28:18,460
the Python imaging library modules if

00:28:16,809 --> 00:28:20,230
you're going to use certain

00:28:18,460 --> 00:28:21,549
functionality so you might think that

00:28:20,230 --> 00:28:23,590
you can just import image but

00:28:21,549 --> 00:28:26,139
unfortunately image is not bundled with

00:28:23,590 --> 00:28:28,240
the Python interpreter so that's fine

00:28:26,139 --> 00:28:30,940
you might add an except to the import

00:28:28,240 --> 00:28:33,429
and what we do is we do this crazy hack

00:28:30,940 --> 00:28:36,220
where we take a totally random unrelated

00:28:33,429 --> 00:28:38,110
module and we stick it in system module

00:28:36,220 --> 00:28:39,700
so that way your import image you will

00:28:38,110 --> 00:28:42,570
totally get something what you're

00:28:39,700 --> 00:28:42,570
getting is an outright lie

00:28:42,970 --> 00:28:47,060
but this is important because the Django

00:28:45,200 --> 00:28:48,800
image field will otherwise fail to

00:28:47,060 --> 00:28:51,050
initialize your Django web app when you

00:28:48,800 --> 00:28:54,200
do manage pi run server it'll be like no

00:28:51,050 --> 00:28:55,820
your models don't validate and the new

00:28:54,200 --> 00:28:56,690
person will be like does that mean I

00:28:55,820 --> 00:28:57,920
need a C compiler

00:28:56,690 --> 00:29:01,070
why do I need to C compiler to make a

00:28:57,920 --> 00:29:03,470
web app don't understand so we also have

00:29:01,070 --> 00:29:05,450
some tricks in the test suite the file I

00:29:03,470 --> 00:29:08,060
showed you is a module called base /

00:29:05,450 --> 00:29:10,460
depends PI so then we can check if base

00:29:08,060 --> 00:29:13,520
top depends not image is none and if so

00:29:10,460 --> 00:29:14,930
then we skip this test I mentioned we do

00:29:13,520 --> 00:29:18,320
this all without virtual end so what we

00:29:14,930 --> 00:29:19,910
do is we just use pip to install all of

00:29:18,320 --> 00:29:24,170
our dependencies into a directory called

00:29:19,910 --> 00:29:27,530
vendor and then we modify this top path

00:29:24,170 --> 00:29:29,810
which is that directory of places Python

00:29:27,530 --> 00:29:30,830
will go search for things to include all

00:29:29,810 --> 00:29:32,420
the subdirectories that we've added

00:29:30,830 --> 00:29:33,830
inside the vendor directory and if you

00:29:32,420 --> 00:29:35,510
want to learn more about this we're

00:29:33,830 --> 00:29:37,430
using a trick created by them as a look

00:29:35,510 --> 00:29:39,430
at soon a project so you know wasn't our

00:29:37,430 --> 00:29:42,380
idea you can search for that here

00:29:39,430 --> 00:29:44,420
finally in terms of Django settings to

00:29:42,380 --> 00:29:47,330
make sure that the databases don't

00:29:44,420 --> 00:29:49,580
require complex setup we use sequel Lite

00:29:47,330 --> 00:29:51,530
as a default database we do have an

00:29:49,580 --> 00:29:53,210
environment variable that you can set so

00:29:51,530 --> 00:29:54,950
that if you want to use the database we

00:29:53,210 --> 00:29:57,080
use in production which in our case is

00:29:54,950 --> 00:29:58,640
my sequel we keep that information in a

00:29:57,080 --> 00:30:00,890
different dictionary in the settings

00:29:58,640 --> 00:30:03,710
file and then we dispatch based on the

00:30:00,890 --> 00:30:05,360
value of this environment variable so

00:30:03,710 --> 00:30:06,290
that's all good in theory but we want to

00:30:05,360 --> 00:30:08,390
know that it really works in practice

00:30:06,290 --> 00:30:10,190
and to know that we have an automated

00:30:08,390 --> 00:30:12,110
bot check our install instructions every

00:30:10,190 --> 00:30:14,840
day and this is that bot talking in IRC

00:30:12,110 --> 00:30:16,310
telling us to our relief that things

00:30:14,840 --> 00:30:18,440
will work if a new contributor shows up

00:30:16,310 --> 00:30:20,600
and also it takes about 2 minutes 51

00:30:18,440 --> 00:30:22,640
seconds so if you're a human and you

00:30:20,600 --> 00:30:24,260
type slower than a bot I think it's fair

00:30:22,640 --> 00:30:27,440
to say that it'll take about five

00:30:24,260 --> 00:30:29,450
minutes so that's good that's how we

00:30:27,440 --> 00:30:32,060
make the new contributor setup process

00:30:29,450 --> 00:30:33,890
for one django based web app really easy

00:30:32,060 --> 00:30:36,020
you can apply some similar tactics to

00:30:33,890 --> 00:30:38,990
your apps one other thing I'll say is

00:30:36,020 --> 00:30:41,330
that this bot helps us know that all of

00:30:38,990 --> 00:30:43,490
our dependencies actually work against

00:30:41,330 --> 00:30:45,710
the version of the website that we

00:30:43,490 --> 00:30:47,900
bundle sorry that we want people to use

00:30:45,710 --> 00:30:50,030
so a common problem as I mentioned

00:30:47,900 --> 00:30:53,270
before is people require one version of

00:30:50,030 --> 00:30:54,590
something in the dependencies files but

00:30:53,270 --> 00:30:55,910
then happen to have something else

00:30:54,590 --> 00:30:58,250
installed in their own

00:30:55,910 --> 00:30:59,630
Jeanne's so they don't find out that it

00:30:58,250 --> 00:31:03,140
would fail for a new contributor but I

00:30:59,630 --> 00:31:04,490
say they I mean we we failed on your

00:31:03,140 --> 00:31:05,390
contributors this way so I want to not

00:31:04,490 --> 00:31:06,770
fail them anymore

00:31:05,390 --> 00:31:09,890
the robots check it so these humans

00:31:06,770 --> 00:31:10,970
don't have to there's one other there's

00:31:09,890 --> 00:31:14,240
at least one of the topic I want to

00:31:10,970 --> 00:31:15,740
discuss so some Python modules are

00:31:14,240 --> 00:31:17,750
pretty slow to install twisted is one

00:31:15,740 --> 00:31:20,030
that takes about 41 seconds on my laptop

00:31:17,750 --> 00:31:21,830
a few days ago that's probably cuz it

00:31:20,030 --> 00:31:23,810
compiles a bunch of stuff wouldn't it be

00:31:21,830 --> 00:31:26,270
great if the second time you installed

00:31:23,810 --> 00:31:28,040
it pip just knew oh yeah I already

00:31:26,270 --> 00:31:30,200
downloaded that I already have compiled

00:31:28,040 --> 00:31:32,360
the C code I'm just gonna store it all

00:31:30,200 --> 00:31:34,700
and copy it into place and it can do

00:31:32,360 --> 00:31:36,920
that now thanks to this cool thing

00:31:34,700 --> 00:31:39,230
called wheels which are a way to take

00:31:36,920 --> 00:31:41,330
the results of the set up pi build

00:31:39,230 --> 00:31:43,520
process snapshot it and then whenever

00:31:41,330 --> 00:31:45,950
you redo the install process just unpack

00:31:43,520 --> 00:31:47,300
that wheel into place it requires

00:31:45,950 --> 00:31:48,680
studying these complicated environment

00:31:47,300 --> 00:31:50,510
variables there is a right way to set

00:31:48,680 --> 00:31:53,180
them I'm not gonna tell you that here

00:31:50,510 --> 00:31:56,540
what I'm gonna tell you instead is to go

00:31:53,180 --> 00:31:58,370
to glyph Lefkowitz website pip 2014 comm

00:31:56,540 --> 00:32:00,260
which he set up about a day ago but

00:31:58,370 --> 00:32:03,380
contains a shell script and a Mac app

00:32:00,260 --> 00:32:05,780
that you can use to set these things up

00:32:03,380 --> 00:32:06,950
for you correctly it's really awesome I

00:32:05,780 --> 00:32:11,360
recommend reading the shell script

00:32:06,950 --> 00:32:12,860
implementation it's complicated and gets

00:32:11,360 --> 00:32:14,720
the edge cases right thanks to some user

00:32:12,860 --> 00:32:16,970
testing he did with me and some other

00:32:14,720 --> 00:32:19,300
people so you can go there this link

00:32:16,970 --> 00:32:21,380
will be at the end of the slides also a

00:32:19,300 --> 00:32:23,990
lot of the problems I've talked about

00:32:21,380 --> 00:32:26,420
therefore come from compiled code that

00:32:23,990 --> 00:32:29,660
gets combined with Python code so called

00:32:26,420 --> 00:32:31,580
Python extensions and wheels are one way

00:32:29,660 --> 00:32:33,500
to solve that another common way in the

00:32:31,580 --> 00:32:35,300
parts the scientific community is a

00:32:33,500 --> 00:32:37,280
different package manager other than pip

00:32:35,300 --> 00:32:38,420
called Conda which I just want to

00:32:37,280 --> 00:32:40,520
mention to make sure people know it

00:32:38,420 --> 00:32:42,710
exists it has a really active user base

00:32:40,520 --> 00:32:45,440
in the scientific world so consider

00:32:42,710 --> 00:32:48,290
using it there's another way that you

00:32:45,440 --> 00:32:50,840
can use all these tools pi pi - install

00:32:48,290 --> 00:32:52,430
is a program kind of like pip that

00:32:50,840 --> 00:32:54,470
instead of going and downloading things

00:32:52,430 --> 00:32:56,210
from pip running setup the PI and

00:32:54,470 --> 00:32:58,490
putting them into your side packages

00:32:56,210 --> 00:33:00,590
directly it'll do something very much

00:32:58,490 --> 00:33:01,880
like that but it'll first make a dot Deb

00:33:00,590 --> 00:33:03,860
file which if you're running a mint or

00:33:01,880 --> 00:33:04,520
Debian might be awesome for me it's

00:33:03,860 --> 00:33:06,800
totally awesome

00:33:04,520 --> 00:33:09,500
I can use my package manager to find out

00:33:06,800 --> 00:33:11,180
which distributions

00:33:09,500 --> 00:33:13,250
from pipe I are responsible for which

00:33:11,180 --> 00:33:15,710
Python modules I've installed but using

00:33:13,250 --> 00:33:16,880
my package manager search tools quick

00:33:15,710 --> 00:33:18,080
show of hands how many people here run

00:33:16,880 --> 00:33:21,020
Debian and Ubuntu as her main

00:33:18,080 --> 00:33:23,150
workstation OS Wow okay more than I

00:33:21,020 --> 00:33:25,040
thought your mandy has folks still you

00:33:23,150 --> 00:33:26,420
flogged his pipe I - install and you

00:33:25,040 --> 00:33:27,830
should use it now because Paul

00:33:26,420 --> 00:33:31,250
Tagliamonte a who's sitting in the front

00:33:27,830 --> 00:33:33,230
row here fixed it earlier today it was

00:33:31,250 --> 00:33:35,360
broken due to a change in the Python

00:33:33,230 --> 00:33:36,980
there org website which has been fixed

00:33:35,360 --> 00:33:38,060
since there's also a tool that was

00:33:36,980 --> 00:33:40,160
talked about at a conference in a

00:33:38,060 --> 00:33:42,740
different session called eh virtual end

00:33:40,160 --> 00:33:44,690
which will take a requirement text file

00:33:42,740 --> 00:33:46,790
which is a long list of specific

00:33:44,690 --> 00:33:49,550
versions to install and make a virtual

00:33:46,790 --> 00:33:53,750
end that you can then install with a dog

00:33:49,550 --> 00:33:54,890
Deb file so that's actually all I have

00:33:53,750 --> 00:33:56,990
for you I'm happy to take some questions

00:33:54,890 --> 00:33:58,700
I'll summarize though I hope you've seen

00:33:56,990 --> 00:34:00,890
that you can install software from the

00:33:58,700 --> 00:34:02,780
Python package index the cheese shop

00:34:00,890 --> 00:34:04,880
I hope you've seen how to distribute it

00:34:02,780 --> 00:34:07,790
at least in the broad strokes and you

00:34:04,880 --> 00:34:09,679
know how to find out more the best place

00:34:07,790 --> 00:34:11,720
to find out more is packaging the

00:34:09,679 --> 00:34:13,100
python.org unless you just want to have

00:34:11,720 --> 00:34:14,570
things work out of the box

00:34:13,100 --> 00:34:17,810
I mean packaging the Python dog is great

00:34:14,570 --> 00:34:21,139
it tells you how things work pip 2014

00:34:17,810 --> 00:34:23,840
comm will help you install a pip and

00:34:21,139 --> 00:34:26,419
some shell configuration or a Mac app if

00:34:23,840 --> 00:34:28,280
you use Mac's that will set it up for

00:34:26,419 --> 00:34:30,379
you with double - user by default and

00:34:28,280 --> 00:34:32,510
lever to have to type that again out of

00:34:30,379 --> 00:34:34,100
the box Noah Kantrowitz after this is

00:34:32,510 --> 00:34:35,840
giving you a much more detailed look at

00:34:34,100 --> 00:34:38,629
how python packaging is going to be even

00:34:35,840 --> 00:34:40,610
better in the coming years so thanks and

00:34:38,629 --> 00:34:43,090
apologies to any PIP maintainer zyv

00:34:40,610 --> 00:34:43,090
offended

00:34:51,750 --> 00:34:55,530
please join me in thanking Ashish do we

00:34:53,880 --> 00:34:57,630
have any people that want to ask

00:34:55,530 --> 00:35:00,420
questions not a question but first of

00:34:57,630 --> 00:35:01,650
all great talk thank you very much and I

00:35:00,420 --> 00:35:05,250
was afraid you'd say something else I

00:35:01,650 --> 00:35:09,750
think no no I just one thing that I find

00:35:05,250 --> 00:35:13,590
useful that you left out was pip - -

00:35:09,750 --> 00:35:14,880
system site packages virtual end yes I'm

00:35:13,590 --> 00:35:16,620
sorry yeah yeah that's right

00:35:14,880 --> 00:35:20,040
so that allows you to create a virtual

00:35:16,620 --> 00:35:22,140
em that uses some with stuff that's app

00:35:20,040 --> 00:35:24,120
get installed or whatever your package

00:35:22,140 --> 00:35:26,730
manager happens to be and then you can

00:35:24,120 --> 00:35:28,860
add stuff from the cheese shop into your

00:35:26,730 --> 00:35:30,300
virtual end so yeah yeah thank you for

00:35:28,860 --> 00:35:32,430
that suggestion it's a totally useful

00:35:30,300 --> 00:35:34,710
thing I maybe should add it to these

00:35:32,430 --> 00:35:38,460
slides so that people afterwards can see

00:35:34,710 --> 00:35:40,500
that Bert rollin has an option where it

00:35:38,460 --> 00:35:43,950
will let you use code that has installed

00:35:40,500 --> 00:35:46,070
system-wide Oh at the glyph okay go

00:35:43,950 --> 00:35:46,070
ahead

00:35:47,540 --> 00:35:51,840
thank you so much

00:35:49,050 --> 00:35:53,550
I also glyph bought pick dot works but

00:35:51,840 --> 00:35:55,290
unfortunately is not ready yet but will

00:35:53,550 --> 00:35:56,730
be available soon as I understand that

00:35:55,290 --> 00:35:59,730
worked as apparently a top-level domain

00:35:56,730 --> 00:36:01,050
now yeah I originally wanted that to be

00:35:59,730 --> 00:36:02,160
the domain name but there's an ssl

00:36:01,050 --> 00:36:03,660
certificate and everything you can

00:36:02,160 --> 00:36:06,300
actually download that app and you know

00:36:03,660 --> 00:36:07,620
know that it's from me one thing I

00:36:06,300 --> 00:36:08,940
wanted to actually point out another

00:36:07,620 --> 00:36:10,980
suggestion that I think might be helpful

00:36:08,940 --> 00:36:13,410
is since so many people in the Python

00:36:10,980 --> 00:36:15,960
community are involved in outreach and

00:36:13,410 --> 00:36:18,390
education this was a fantastic talk on

00:36:15,960 --> 00:36:20,160
the internals of not as so the internals

00:36:18,390 --> 00:36:22,110
but the workings of PIP and set of tools

00:36:20,160 --> 00:36:23,780
and district Hills and all those things

00:36:22,110 --> 00:36:28,320
and it's great to know all that stuff

00:36:23,780 --> 00:36:30,210
many of you might be tempted when you're

00:36:28,320 --> 00:36:31,620
introducing new people to Python to

00:36:30,210 --> 00:36:34,470
explain all of this intricate

00:36:31,620 --> 00:36:36,210
interesting detail and having been

00:36:34,470 --> 00:36:39,930
present at many workshops and helped

00:36:36,210 --> 00:36:41,460
many people get Python set up I would

00:36:39,930 --> 00:36:43,400
just caution them not to ever explain

00:36:41,460 --> 00:36:46,170
anything about any of this

00:36:43,400 --> 00:36:47,490
Trott the reason why I wrote the shell

00:36:46,170 --> 00:36:50,160
script that it eventually became that

00:36:47,490 --> 00:36:52,860
domain was that it's hard enough to

00:36:50,160 --> 00:36:54,690
learn to program and if we give people

00:36:52,860 --> 00:36:56,160
instructions they should work and they

00:36:54,690 --> 00:36:57,039
shouldn't have to know why

00:36:56,160 --> 00:36:58,809
especially because

00:36:57,039 --> 00:37:00,400
is all that's actually happening inside

00:36:58,809 --> 00:37:02,109
pip and set of tools and all of these

00:37:00,400 --> 00:37:03,429
things is it's downloading some code and

00:37:02,109 --> 00:37:06,069
putting it on their computers so that

00:37:03,429 --> 00:37:07,569
they can use it and the so they can use

00:37:06,069 --> 00:37:08,709
it is all about the locations in the

00:37:07,569 --> 00:37:11,259
distributions and the packages and

00:37:08,709 --> 00:37:14,650
whatnot so use this knowledge for good

00:37:11,259 --> 00:37:15,969
and don't pass it on to people as the

00:37:14,650 --> 00:37:17,669
first thing they learn about Python

00:37:15,969 --> 00:37:20,109
because it's very intimidating so

00:37:17,669 --> 00:37:22,660
hopefully that's useful feedback yeah

00:37:20,109 --> 00:37:24,009
it's super useful this domain is great

00:37:22,660 --> 00:37:25,390
I've tested on my Debian machine and

00:37:24,009 --> 00:37:27,910
other people have tested it on Mac OS

00:37:25,390 --> 00:37:30,069
just to add to that of course I want to

00:37:27,910 --> 00:37:32,439
echo what Glyph said that if you're

00:37:30,069 --> 00:37:34,989
running introductory workshops that you

00:37:32,439 --> 00:37:36,279
can skip talking about this so that you

00:37:34,989 --> 00:37:41,049
talk about the things you have to want

00:37:36,279 --> 00:37:43,869
to talk about I received some meta

00:37:41,049 --> 00:37:45,640
advice on a website recently that if you

00:37:43,869 --> 00:37:47,380
want to give advice to people you

00:37:45,640 --> 00:37:50,949
probably want to find out so there's

00:37:47,380 --> 00:37:53,799
there's sort of this talk explains why

00:37:50,949 --> 00:37:55,269
you have to do things the way that the

00:37:53,799 --> 00:37:58,630
shell script recommends that I recommend

00:37:55,269 --> 00:38:00,849
here but explaining why isn't always the

00:37:58,630 --> 00:38:01,869
most useful thing so thinking about it

00:38:00,849 --> 00:38:04,959
from the perspective of somebody new

00:38:01,869 --> 00:38:07,179
means you just shouldn't explain that go

00:38:04,959 --> 00:38:09,729
ahead yeah sorry hi I have a question

00:38:07,179 --> 00:38:11,919
like I maintain some Python packages and

00:38:09,729 --> 00:38:14,380
I have some trouble getting set up WI

00:38:11,919 --> 00:38:15,759
work everywhere and it work work right

00:38:14,380 --> 00:38:17,979
for example I don't want to include the

00:38:15,759 --> 00:38:19,719
long description so I just read the

00:38:17,979 --> 00:38:21,549
readme file but of course that breaks

00:38:19,719 --> 00:38:24,099
for some older versions and set up tools

00:38:21,549 --> 00:38:26,409
or something so are there it is there

00:38:24,099 --> 00:38:28,390
somewhere a definitive tool the

00:38:26,409 --> 00:38:31,869
definitive guide how to write setup' del

00:38:28,390 --> 00:38:33,819
py so it's a bulletproof thank you so I

00:38:31,869 --> 00:38:35,619
don't know about guide for how to write

00:38:33,819 --> 00:38:39,729
setup' the pious so it's bulletproof but

00:38:35,619 --> 00:38:44,109
I unless there is one no okay but I will

00:38:39,729 --> 00:38:47,380
give you a few quick tips one is never

00:38:44,109 --> 00:38:50,140
run setup dot PI directly unless you

00:38:47,380 --> 00:38:53,890
have to so if you tell people to run pip

00:38:50,140 --> 00:38:55,869
install whatever dot or your thing pip

00:38:53,890 --> 00:38:57,579
will run setup the PI for you and picked

00:38:55,869 --> 00:39:00,489
up some crazy magic so that even if you

00:38:57,579 --> 00:39:02,650
do from dis utils core import setup

00:39:00,489 --> 00:39:04,119
it'll be like haha nope I put the setup

00:39:02,650 --> 00:39:06,189
tool setup different there instead and

00:39:04,119 --> 00:39:07,449
this means that people don't need any

00:39:06,189 --> 00:39:08,979
particular version of setup tools on

00:39:07,449 --> 00:39:10,109
their systems pip will sort of make sure

00:39:08,979 --> 00:39:13,829
that happens correctly

00:39:10,109 --> 00:39:15,930
I think so actually

00:39:13,829 --> 00:39:17,670
it will still if you have setup tools

00:39:15,930 --> 00:39:19,769
and then but an older version it will

00:39:17,670 --> 00:39:21,749
still use that so it won't break so it

00:39:19,769 --> 00:39:24,210
might remove some of the files from the

00:39:21,749 --> 00:39:28,200
package but then that's beyond beyond

00:39:24,210 --> 00:39:29,519
the scope thank you very much ok I think

00:39:28,200 --> 00:39:31,920
we have time for one more question ah

00:39:29,519 --> 00:39:35,400
this is probably also getting a little

00:39:31,920 --> 00:39:37,140
bit beyond the scope but um does open

00:39:35,400 --> 00:39:40,980
hatch or have you had any experience

00:39:37,140 --> 00:39:42,720
using pi m which is sort of the RBF of

00:39:40,980 --> 00:39:45,230
pipe of Python for managing different

00:39:42,720 --> 00:39:48,269
versions of Python and things like that

00:39:45,230 --> 00:39:49,980
so as a question with about different

00:39:48,269 --> 00:39:52,230
versions of Python installed in your

00:39:49,980 --> 00:39:53,910
system perhaps managed with PI n I don't

00:39:52,230 --> 00:39:55,559
have any experience with that I was sort

00:39:53,910 --> 00:39:56,970
of wince at the idea of multiple

00:39:55,559 --> 00:39:58,829
versions of Python installed on one

00:39:56,970 --> 00:40:00,359
machine I know that other people such as

00:39:58,829 --> 00:40:03,779
a person giving a talk right after mine

00:40:00,359 --> 00:40:05,460
winces have the idea of not having

00:40:03,779 --> 00:40:07,049
multiple versions of Python on one

00:40:05,460 --> 00:40:09,930
machine but I've just seen too many

00:40:07,049 --> 00:40:11,430
users confused by I opened a new

00:40:09,930 --> 00:40:13,230
terminal and I couldn't import this

00:40:11,430 --> 00:40:14,549
thing and the answer turns out to be

00:40:13,230 --> 00:40:16,259
that the version of Python they're

00:40:14,549 --> 00:40:17,549
running here is not the version of

00:40:16,259 --> 00:40:20,220
running the Python they're running there

00:40:17,549 --> 00:40:22,920
and why do I need to explain this so

00:40:20,220 --> 00:40:25,019
where possible I try really hard to

00:40:22,920 --> 00:40:26,400
never have to explain that by refusing

00:40:25,019 --> 00:40:28,680
to install more than one version of

00:40:26,400 --> 00:40:30,720
Python by minimizing use of virtual end

00:40:28,680 --> 00:40:35,910
and by recommending pip install double -

00:40:30,720 --> 00:40:39,680
user again please join me in thanking

00:40:35,910 --> 00:40:39,680

YouTube URL: https://www.youtube.com/watch?v=eLPiPHr6TVI


