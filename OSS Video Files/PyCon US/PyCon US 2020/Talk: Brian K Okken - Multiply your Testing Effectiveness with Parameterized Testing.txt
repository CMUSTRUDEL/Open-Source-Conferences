Title: Talk: Brian K Okken - Multiply your Testing Effectiveness with Parameterized Testing
Publication date: 2021-05-05
Playlist: PyCon US 2020
Description: 
	Presented by:
Brian K Okken

Parametrization is one of the superpowers of pytest. It allows you to cover a huge number of test cases with a single test function. This speeds up test writing and makes test maintenance easier. This talk is a medium depth dive into pytest parametrization, with techniques you can use right away.

This talk will use of code examples, starting with a simple test then demonstrating 3 methods of parametrization, as well as test case identifiers and using generators.

Slides, code, resources all listed at https://github.com/okken/talks/tree/master/2020/pycon_2020
Captions: 
	00:00:11,969 --> 00:00:16,680
thank you for pushing play on this video

00:00:14,309 --> 00:00:18,779
and it for at least starting to listen

00:00:16,680 --> 00:00:19,950
to my talk about parameterization I hope

00:00:18,779 --> 00:00:23,099
I keep you till the end

00:00:19,950 --> 00:00:25,619
I think parameterize testing is one of

00:00:23,099 --> 00:00:27,270
the super powers of Pi test and it

00:00:25,619 --> 00:00:30,480
really is one that I think that will

00:00:27,270 --> 00:00:33,149
save you tons of time but first Who am I

00:00:30,480 --> 00:00:36,420
I am Brian Aachen I wrote a book called

00:00:33,149 --> 00:00:38,489
Python testing with PI test because PI

00:00:36,420 --> 00:00:40,140
test is a really powerful test framework

00:00:38,489 --> 00:00:43,110
and I wanted other people to be able to

00:00:40,140 --> 00:00:45,179
start using it right away I also host a

00:00:43,110 --> 00:00:47,219
couple podcasts I host testing code

00:00:45,179 --> 00:00:48,989
which was created because software

00:00:47,219 --> 00:00:53,149
engineers don't talk about testing

00:00:48,989 --> 00:00:55,499
enough I don't think Python bites I also

00:00:53,149 --> 00:00:58,019
co-host with a friend of mine Michael

00:00:55,499 --> 00:01:00,300
Kennedy we sometimes also tell bad jokes

00:00:58,019 --> 00:01:03,359
at the end sometimes they are good jokes

00:01:00,300 --> 00:01:06,300
so please listen for those during the

00:01:03,359 --> 00:01:08,550
day I am a mild mannered to team lead at

00:01:06,300 --> 00:01:10,590
rohde & schwarz where I help build

00:01:08,550 --> 00:01:13,860
communication test equipment by writing

00:01:10,590 --> 00:01:16,080
a lot of C++ code and a lot of Python

00:01:13,860 --> 00:01:19,130
code and generally trying to avoid

00:01:16,080 --> 00:01:21,110
meetings the best I can

00:01:19,130 --> 00:01:23,400
automated tests are valuable because

00:01:21,110 --> 00:01:26,760
passing tests week gives you confidence

00:01:23,400 --> 00:01:28,470
in what you were building and allows you

00:01:26,760 --> 00:01:30,330
to have pride in your work and lets you

00:01:28,470 --> 00:01:33,270
play with the code I like playing with

00:01:30,330 --> 00:01:35,370
code and makes it so that you can change

00:01:33,270 --> 00:01:38,550
your code with less fear and helps help

00:01:35,370 --> 00:01:40,380
to build the team and Trust I think it's

00:01:38,550 --> 00:01:42,660
a bonus if your tests can be quick to

00:01:40,380 --> 00:01:45,960
write and easy to maintain and that is

00:01:42,660 --> 00:01:48,210
the part we're focusing on today we are

00:01:45,960 --> 00:01:50,250
going to cover how to parameterize your

00:01:48,210 --> 00:01:52,020
code in three different ways using

00:01:50,250 --> 00:01:53,970
fixture parameterization function

00:01:52,020 --> 00:01:55,830
parameterization and a thing called PI

00:01:53,970 --> 00:01:58,770
test generate tests which is a hook

00:01:55,830 --> 00:02:00,780
function I'll show you how to run all of

00:01:58,770 --> 00:02:02,640
these and how to run a subset of

00:02:00,780 --> 00:02:05,370
parameterizations that's one of the fun

00:02:02,640 --> 00:02:07,440
things you can do and lastly I do want

00:02:05,370 --> 00:02:10,950
to introduce you to a couple of concepts

00:02:07,440 --> 00:02:12,150
called pi test Ram and indirect not

00:02:10,950 --> 00:02:14,640
really because you need them right away

00:02:12,150 --> 00:02:16,470
but because I want you to know they're

00:02:14,640 --> 00:02:18,959
there so that you can reach for them

00:02:16,470 --> 00:02:21,450
when you need them okay before we're

00:02:18,959 --> 00:02:23,069
going to into it any further we got to

00:02:21,450 --> 00:02:25,830
clear something up parameterizing

00:02:23,069 --> 00:02:29,130
there's no e between the T and the R

00:02:25,830 --> 00:02:31,710
both spellings are valid English they're

00:02:29,130 --> 00:02:34,290
allowed one is more common in the UK and

00:02:31,710 --> 00:02:36,150
one is more common in the u.s. pi test

00:02:34,290 --> 00:02:39,060
only allows one of those spellings and

00:02:36,150 --> 00:02:41,820
it's the UK version so no he between the

00:02:39,060 --> 00:02:44,160
T and the R I submitted a ticket to

00:02:41,820 --> 00:02:45,900
allow both the ticket was rejected I've

00:02:44,160 --> 00:02:47,880
gotten over it we're gonna write some

00:02:45,900 --> 00:02:50,010
tests the thing I'm going to test is

00:02:47,880 --> 00:02:52,500
this a little function called triangle

00:02:50,010 --> 00:02:55,410
type give it three angles if one of the

00:02:52,500 --> 00:02:57,810
angles is got is 90 degrees it's a right

00:02:55,410 --> 00:03:01,310
triangle if one of the at least one

00:02:57,810 --> 00:03:04,230
angle is greater than 90 its obtuse

00:03:01,310 --> 00:03:06,510
actually only one of them can be if all

00:03:04,230 --> 00:03:08,610
of the angles are under 90 degrees well

00:03:06,510 --> 00:03:11,070
then it's an acute angle and if you

00:03:08,610 --> 00:03:13,290
remembered that all of that if what

00:03:11,070 --> 00:03:15,150
acute and obtuse triangles were you rock

00:03:13,290 --> 00:03:17,580
I had to look it up there's also at

00:03:15,150 --> 00:03:20,250
least one bug in the code I have that

00:03:17,580 --> 00:03:22,620
bug in the code on purpose so that we

00:03:20,250 --> 00:03:25,380
can see some test failures and I also

00:03:22,620 --> 00:03:28,050
want to shout out to Kent Beck I got the

00:03:25,380 --> 00:03:29,820
idea of testing triangles from TDD

00:03:28,050 --> 00:03:31,650
test-driven development by example I

00:03:29,820 --> 00:03:34,530
think he uses a triangle example so

00:03:31,650 --> 00:03:36,870
that's where I got that but uses sides

00:03:34,530 --> 00:03:38,700
and I'm using angles you don't really

00:03:36,870 --> 00:03:40,920
need this to follow the rest of the

00:03:38,700 --> 00:03:42,930
conversation but for those of you

00:03:40,920 --> 00:03:45,570
following along at home I have done a

00:03:42,930 --> 00:03:49,440
little bit of prep work for the examples

00:03:45,570 --> 00:03:52,320
I want - V for verbose so I can see the

00:03:49,440 --> 00:03:54,530
test names and I wanted to add the T be

00:03:52,320 --> 00:03:57,120
equals no that turns off trace backs

00:03:54,530 --> 00:03:59,640
because in this presentation trace backs

00:03:57,120 --> 00:04:01,770
aren't really help us much I put them in

00:03:59,640 --> 00:04:03,270
a PI test any files so that I don't have

00:04:01,770 --> 00:04:05,270
to type them all the time and you won't

00:04:03,270 --> 00:04:09,080
either if you want to follow along

00:04:05,270 --> 00:04:12,480
stepping back this is our function and

00:04:09,080 --> 00:04:14,610
if I want to test them so there's

00:04:12,480 --> 00:04:17,669
there's four outcomes that can come out

00:04:14,610 --> 00:04:20,520
of it right up to acute and invalid so I

00:04:17,669 --> 00:04:22,770
need at least four test cases so this is

00:04:20,520 --> 00:04:24,960
the minimal usually we would have more

00:04:22,770 --> 00:04:27,270
than this and I think that we should

00:04:24,960 --> 00:04:30,090
later nonetheless I think this is a

00:04:27,270 --> 00:04:32,220
reasonable first set of test cases this

00:04:30,090 --> 00:04:34,830
is something this is one way you could

00:04:32,220 --> 00:04:37,340
write all of this and these these are

00:04:34,830 --> 00:04:40,050
simple tests are only one line each

00:04:37,340 --> 00:04:40,530
not that big of a deal what's the big

00:04:40,050 --> 00:04:43,980
deal

00:04:40,530 --> 00:04:45,780
um I indeed there is redundancy here but

00:04:43,980 --> 00:04:48,780
it's hard to see the redundancy because

00:04:45,780 --> 00:04:51,300
these tests are so small but as tests

00:04:48,780 --> 00:04:54,780
grow in complexity the redundancy gets

00:04:51,300 --> 00:04:57,030
even more more painful but even with

00:04:54,780 --> 00:04:59,400
these simple test cases we can do better

00:04:57,030 --> 00:05:03,210
so what if I wanted to combine all of

00:04:59,400 --> 00:05:05,790
these into one test so if I wanted one

00:05:03,210 --> 00:05:09,150
of the things I could do I could just

00:05:05,790 --> 00:05:11,310
put all the test cases in a in in a in a

00:05:09,150 --> 00:05:14,640
list and then loop through that list and

00:05:11,310 --> 00:05:18,600
test each type of test case this works

00:05:14,640 --> 00:05:21,150
why not please don't do this it's easy

00:05:18,600 --> 00:05:23,640
to extend now when everything passes and

00:05:21,150 --> 00:05:26,070
it seems fine but there's problems with

00:05:23,640 --> 00:05:27,930
it there's actually really four test

00:05:26,070 --> 00:05:31,080
cases here but I'm only PI test only

00:05:27,930 --> 00:05:33,390
shows you that I have one test and one

00:05:31,080 --> 00:05:36,690
of the test cases fails but it failed

00:05:33,390 --> 00:05:38,850
the whole thing and I can't tell wit

00:05:36,690 --> 00:05:41,220
what failed without looking at the trace

00:05:38,850 --> 00:05:42,840
back so I've hidden yeah if I had left

00:05:41,220 --> 00:05:44,910
the trace backs on we could see it I

00:05:42,840 --> 00:05:47,910
don't know which one failed that's a

00:05:44,910 --> 00:05:50,190
bummer how can we do better function

00:05:47,910 --> 00:05:52,290
parameterization of course I love

00:05:50,190 --> 00:05:57,930
parameterization I think this deserves a

00:05:52,290 --> 00:06:00,930
hat okay this is the basic syntax of

00:05:57,930 --> 00:06:04,280
function parameterization let's run it

00:06:00,930 --> 00:06:08,070
and see how it looks when we run it

00:06:04,280 --> 00:06:10,440
it'll list all of the the test names out

00:06:08,070 --> 00:06:12,390
that is listing in the amount instead of

00:06:10,440 --> 00:06:16,860
dots because of the VAR because of the -

00:06:12,390 --> 00:06:18,960
V that we included and that part that's

00:06:16,860 --> 00:06:20,310
like you know from the test under I'm

00:06:18,960 --> 00:06:22,830
pointing at the screen you can't see

00:06:20,310 --> 00:06:26,010
that I'm from test underscore all the

00:06:22,830 --> 00:06:28,620
way through the brackets that is a test

00:06:26,010 --> 00:06:30,690
node and we we refer to those as note

00:06:28,620 --> 00:06:32,370
IDs and you normally don't have to care

00:06:30,690 --> 00:06:36,750
about that but the PI test documentation

00:06:32,370 --> 00:06:38,910
talks about it sometimes so I'm going to

00:06:36,750 --> 00:06:41,430
change this a little bit to make the

00:06:38,910 --> 00:06:42,180
rest of the the examples a little easier

00:06:41,430 --> 00:06:44,760
to deal with

00:06:42,180 --> 00:06:47,130
and I'm going to make this a little

00:06:44,760 --> 00:06:49,919
easier by just moving all of my test

00:06:47,130 --> 00:06:53,940
cases to a named list

00:06:49,919 --> 00:06:56,370
this is a just a little cleaner my my PI

00:06:53,940 --> 00:06:59,880
test mark parameterised decorator can be

00:06:56,370 --> 00:07:02,520
all in one line now maybe two lines if I

00:06:59,880 --> 00:07:05,070
have a lot of parameters but but this

00:07:02,520 --> 00:07:06,690
this is nice makes makes it cleaner so

00:07:05,070 --> 00:07:08,490
we'll pop back so this is the first

00:07:06,690 --> 00:07:12,360
example all of them are in the

00:07:08,490 --> 00:07:15,660
decorators and now they're in this extra

00:07:12,360 --> 00:07:17,430
list but it doesn't have to be a list it

00:07:15,660 --> 00:07:24,660
could even be a function and that's fun

00:07:17,430 --> 00:07:26,280
so fun we need a new hat instead of a

00:07:24,660 --> 00:07:29,720
fixed list we can hit return a function

00:07:26,280 --> 00:07:33,590
in the function can return a list and

00:07:29,720 --> 00:07:37,199
why is this cool this is cool because at

00:07:33,590 --> 00:07:38,970
test time you can generate the list it's

00:07:37,199 --> 00:07:42,090
not at well it's not really at test time

00:07:38,970 --> 00:07:43,860
it's at it's at test collection time and

00:07:42,090 --> 00:07:47,520
that's when this function will get

00:07:43,860 --> 00:07:49,380
called and you can since it's a function

00:07:47,520 --> 00:07:51,840
you can modify the list filter the list

00:07:49,380 --> 00:07:53,760
you can do lots of stuff okay so it can

00:07:51,840 --> 00:07:55,560
be a list we can return a list form

00:07:53,760 --> 00:07:58,710
function this function can also be a

00:07:55,560 --> 00:08:00,780
generator this many triangles function

00:07:58,710 --> 00:08:02,970
now is a generator because as a yield in

00:08:00,780 --> 00:08:05,810
it right so it returns one at a time

00:08:02,970 --> 00:08:09,479
this is pretty cool

00:08:05,810 --> 00:08:11,970
but keep in mind it will exhaust the

00:08:09,479 --> 00:08:15,090
generator at collection time not at

00:08:11,970 --> 00:08:17,760
runtime okay here's an example that is

00:08:15,090 --> 00:08:21,150
like the generator example but instead

00:08:17,760 --> 00:08:24,180
of instead of returning a little parts

00:08:21,150 --> 00:08:26,550
of a list we can even read a read some

00:08:24,180 --> 00:08:28,260
stuff from a file this is neat why is

00:08:26,550 --> 00:08:30,630
this neat well maybe part of your

00:08:28,260 --> 00:08:32,700
process is to is generates the test

00:08:30,630 --> 00:08:36,419
cases from other some other process and

00:08:32,700 --> 00:08:38,820
being able to pull out of pull stuff out

00:08:36,419 --> 00:08:41,490
to generate our parameterize test cases

00:08:38,820 --> 00:08:43,860
at test collection time it's really

00:08:41,490 --> 00:08:45,420
pretty powerful I'm using a CSV file

00:08:43,860 --> 00:08:48,120
right here but you can really use

00:08:45,420 --> 00:08:50,220
anything you want it's a very powerful

00:08:48,120 --> 00:08:51,690
technique in this case though for

00:08:50,220 --> 00:08:53,670
example one of the reasons why we use

00:08:51,690 --> 00:08:55,620
generators for files is so that we read

00:08:53,670 --> 00:08:56,700
one one line at a time while we're

00:08:55,620 --> 00:08:58,860
working on it

00:08:56,700 --> 00:09:00,390
it happens a test collection time so

00:08:58,860 --> 00:09:02,130
it's gonna read the whole thing before

00:09:00,390 --> 00:09:05,550
our test starts just keep that in mind

00:09:02,130 --> 00:09:07,140
okay so back to the list I went back

00:09:05,550 --> 00:09:08,370
took out of the function I could have

00:09:07,140 --> 00:09:10,740
done the rest of the examples with the

00:09:08,370 --> 00:09:12,660
function also but we went back to the

00:09:10,740 --> 00:09:14,250
list for just for the heck of it we're

00:09:12,660 --> 00:09:16,560
gonna look at some of the tricks to

00:09:14,250 --> 00:09:19,230
running parameterize tests so we have

00:09:16,560 --> 00:09:21,150
this failure here so we see it because

00:09:19,230 --> 00:09:23,460
it's the last one it's the invalid case

00:09:21,150 --> 00:09:27,330
it fails what if I just want to run that

00:09:23,460 --> 00:09:31,260
we can use the - - LF so that LF means

00:09:27,330 --> 00:09:33,690
last failure and it just runs the last

00:09:31,260 --> 00:09:35,280
the previously failed tests if I had

00:09:33,690 --> 00:09:37,620
more than one it would run more than one

00:09:35,280 --> 00:09:39,120
but right now I only have one and since

00:09:37,620 --> 00:09:41,070
I turned off trace backs this is

00:09:39,120 --> 00:09:43,350
actually a pattern that I use a lot I

00:09:41,070 --> 00:09:47,040
turn off trace backs most of the time or

00:09:43,350 --> 00:09:48,900
I keep them short and then when when I

00:09:47,040 --> 00:09:50,850
have a failure I couldn't turn on trace

00:09:48,900 --> 00:09:52,950
backs and just run the rerun the

00:09:50,850 --> 00:09:55,530
failures with the trace backs I also

00:09:52,950 --> 00:09:58,860
combine this with the - X often so that

00:09:55,530 --> 00:10:02,180
I only use so it stops out the first one

00:09:58,860 --> 00:10:06,630
so a turning a turning up trace backs

00:10:02,180 --> 00:10:10,080
bashing in passing in LF and then also -

00:10:06,630 --> 00:10:13,560
X will rerun just the last the first

00:10:10,080 --> 00:10:15,420
last failed test it's very handy um and

00:10:13,560 --> 00:10:17,070
this isn't just the last test it's only

00:10:15,420 --> 00:10:18,660
just doing that a failed test case

00:10:17,070 --> 00:10:21,840
that's but that's what I really wanted

00:10:18,660 --> 00:10:25,470
to point out I can use - K on these and

00:10:21,840 --> 00:10:28,710
pick out the test cases that have have

00:10:25,470 --> 00:10:30,240
60 degrees in them just pick 60 but it

00:10:28,710 --> 00:10:34,040
could be anything I could use this to

00:10:30,240 --> 00:10:37,110
pick out the right triangles as well I

00:10:34,040 --> 00:10:39,240
can even use the entire note ID full

00:10:37,110 --> 00:10:41,970
note idea with the the parameterization

00:10:39,240 --> 00:10:46,770
just to rerun one parameterization this

00:10:41,970 --> 00:10:49,860
is super handy and also both pycharm and

00:10:46,770 --> 00:10:51,680
vs code support running one individual

00:10:49,860 --> 00:10:54,420
so that's nice

00:10:51,680 --> 00:10:56,670
fixture parameterization this is the the

00:10:54,420 --> 00:10:59,190
other technique for right now I am

00:10:56,670 --> 00:11:02,190
showing test parameterization on top and

00:10:59,190 --> 00:11:03,960
fixture parameterization on the bottom

00:11:02,190 --> 00:11:07,260
just so that you can see the different

00:11:03,960 --> 00:11:09,720
styles of parameterization the basic

00:11:07,260 --> 00:11:11,250
syntax is easy enough the four fixture

00:11:09,720 --> 00:11:12,870
parameterization

00:11:11,250 --> 00:11:16,950
the parameters are passed into the

00:11:12,870 --> 00:11:19,770
fixture decorator so the request is a

00:11:16,950 --> 00:11:21,840
fixture sort of it's a kind of a magic

00:11:19,770 --> 00:11:24,150
fixture that we use for other fixtures

00:11:21,840 --> 00:11:25,530
and it contains extra information but

00:11:24,150 --> 00:11:29,280
fixture will be called multiple times

00:11:25,530 --> 00:11:30,930
one for each test case and so the

00:11:29,280 --> 00:11:33,870
requests up for EM will have that value

00:11:30,930 --> 00:11:36,750
it is traditional and recommended that

00:11:33,870 --> 00:11:40,140
your parameterised fixtures return

00:11:36,750 --> 00:11:42,090
request stop program so in the test fix

00:11:40,140 --> 00:11:44,880
they only change it says pretty much the

00:11:42,090 --> 00:11:47,820
same change but we take the the a

00:11:44,880 --> 00:11:50,130
triangle parameter is going to have the

00:11:47,820 --> 00:11:52,920
entire tuple in there so we have to

00:11:50,130 --> 00:11:55,920
unpack it so we've changed the change

00:11:52,920 --> 00:11:58,410
the tests so we've had test func now

00:11:55,920 --> 00:12:03,570
this is test fix this parameterization

00:11:58,410 --> 00:12:06,690
when we run it it's not pretty so we've

00:12:03,570 --> 00:12:08,580
got three I've got a triangle zero a

00:12:06,690 --> 00:12:10,380
triangle one a triangle to a triangle

00:12:08,580 --> 00:12:12,810
three that really doesn't tell them what

00:12:10,380 --> 00:12:14,070
tell us much yeah the problem is PI test

00:12:12,810 --> 00:12:15,870
doesn't even try to come up with good

00:12:14,070 --> 00:12:18,840
names it just adds this counter thing

00:12:15,870 --> 00:12:24,150
and so let's fix that so we fix it with

00:12:18,840 --> 00:12:26,610
IDs we can have an IDs list so I can I

00:12:24,150 --> 00:12:30,360
can know what my parameters are and I

00:12:26,610 --> 00:12:33,150
can just pass in a list so I passed in

00:12:30,360 --> 00:12:35,220
right obtuse acute invalid but there's

00:12:33,150 --> 00:12:37,530
other ways that I prefer to do it an IDs

00:12:35,220 --> 00:12:39,210
function is very interesting if I

00:12:37,530 --> 00:12:41,820
instead of a list I pass in a function

00:12:39,210 --> 00:12:44,760
the function will get called for each

00:12:41,820 --> 00:12:46,620
each test case so I need to be able to

00:12:44,760 --> 00:12:48,210
take that so I'll to be passed in with a

00:12:46,620 --> 00:12:50,850
tuple and I'm going to take that and

00:12:48,210 --> 00:12:52,410
turn it into a string well we have a lot

00:12:50,850 --> 00:12:53,610
of functions built into Python already

00:12:52,410 --> 00:12:55,740
that take something and turn them into

00:12:53,610 --> 00:12:57,630
strings the stur function and the

00:12:55,740 --> 00:13:00,300
wrapper function both work really good

00:12:57,630 --> 00:13:04,350
we can also just do a custom lambda one

00:13:00,300 --> 00:13:07,020
like so in this case I'm showing that if

00:13:04,350 --> 00:13:09,720
I used the stir function it'll just take

00:13:07,020 --> 00:13:12,840
the the tuple and make it into a string

00:13:09,720 --> 00:13:14,670
and pass it that way that works if I

00:13:12,840 --> 00:13:17,190
wanted just the right obtuse acute

00:13:14,670 --> 00:13:19,620
invalid back I could use a lambda to

00:13:17,190 --> 00:13:21,529
pull out the third positional element as

00:13:19,620 --> 00:13:23,749
in 0 1 2 3

00:13:21,529 --> 00:13:26,149
I can also if I want to like be fancy

00:13:23,749 --> 00:13:29,209
about it or do something special I can

00:13:26,149 --> 00:13:32,029
do a custom ID function and pass that in

00:13:29,209 --> 00:13:34,399
this is just the same thing it's getting

00:13:32,029 --> 00:13:37,670
a triangle passed in and turning it into

00:13:34,399 --> 00:13:39,559
a string often if I have a lot of

00:13:37,670 --> 00:13:40,809
parameters going into something and some

00:13:39,559 --> 00:13:43,399
of the parameters are huge

00:13:40,809 --> 00:13:45,499
representative wise but they don't

00:13:43,399 --> 00:13:49,339
distinguish the test cases they're not

00:13:45,499 --> 00:13:52,670
necessary for the for the ID so I try to

00:13:49,339 --> 00:13:55,160
limit the ID to small small enough to

00:13:52,670 --> 00:13:59,230
identify a test case in no more all

00:13:55,160 --> 00:13:59,230
right the last one deserves the last hat

00:14:01,449 --> 00:14:06,620
this is a neat little function so by

00:14:04,040 --> 00:14:09,860
test generate tests is a is a Sawbuck

00:14:06,620 --> 00:14:11,360
function and what's a hook function if I

00:14:09,860 --> 00:14:15,290
test if you have this in your test code

00:14:11,360 --> 00:14:17,389
or in your contest up pi PI test will

00:14:15,290 --> 00:14:19,699
just call it it calls it at the right

00:14:17,389 --> 00:14:22,249
time and it generates it kind of

00:14:19,699 --> 00:14:23,949
generates parameterizations as one of

00:14:22,249 --> 00:14:28,699
the one of the things you can do with it

00:14:23,949 --> 00:14:30,889
and the it's a little weird it's wacky

00:14:28,699 --> 00:14:33,439
to get used to this is especially useful

00:14:30,889 --> 00:14:35,269
if we want to use information from meta

00:14:33,439 --> 00:14:37,519
func one of the things in meta func of

00:14:35,269 --> 00:14:39,800
course is the fixture name but there's

00:14:37,519 --> 00:14:43,579
other stuff in there too and so if we

00:14:39,800 --> 00:14:45,680
take a looking up the PI test docks and

00:14:43,579 --> 00:14:48,259
all the stuff you can grab out with meta

00:14:45,680 --> 00:14:50,980
func because it's pretty handy but one

00:14:48,259 --> 00:14:53,240
of the things you can pull out is is

00:14:50,980 --> 00:14:57,259
command light information so I can

00:14:53,240 --> 00:14:59,209
create a new command line flag to to to

00:14:57,259 --> 00:15:01,550
help control what sort of testing I'm

00:14:59,209 --> 00:15:03,649
doing and then in generate tests I can

00:15:01,550 --> 00:15:06,379
use that command line for like to modify

00:15:03,649 --> 00:15:07,939
which parameters so I mean one example

00:15:06,379 --> 00:15:11,449
would be I could have a flag that

00:15:07,939 --> 00:15:13,459
determined like intensive testing versus

00:15:11,449 --> 00:15:15,709
like a smoke test or light test or

00:15:13,459 --> 00:15:17,480
something and instead of using all the

00:15:15,709 --> 00:15:19,730
other there's other mechanisms you could

00:15:17,480 --> 00:15:23,059
use to select tests I could go through

00:15:19,730 --> 00:15:25,040
and do huge parameterizations versus

00:15:23,059 --> 00:15:28,579
small parameter ization so it's just one

00:15:25,040 --> 00:15:31,129
use you could do to alter how to use

00:15:28,579 --> 00:15:33,040
generate tests and it's kind of a neat

00:15:31,129 --> 00:15:34,660
neat use of that

00:15:33,040 --> 00:15:38,650
now I'm gonna switch gears a little bit

00:15:34,660 --> 00:15:40,090
and talk about a few things that you

00:15:38,650 --> 00:15:43,870
probably won't need to hear right away

00:15:40,090 --> 00:15:47,500
or use right away but they're handy I

00:15:43,870 --> 00:15:51,100
test that pram and indirect now if I

00:15:47,500 --> 00:15:53,650
test a pram it does really one thing I

00:15:51,100 --> 00:15:56,470
can take my parameterization list and

00:15:53,650 --> 00:15:58,540
wrap it in PI test pram and then it's

00:15:56,470 --> 00:16:01,930
the same but I can add extra things and

00:15:58,540 --> 00:16:04,720
specifically I can add markers and I can

00:16:01,930 --> 00:16:07,660
add identifiers and in this example that

00:16:04,720 --> 00:16:10,210
I'm showing here I'm only using one each

00:16:07,660 --> 00:16:13,540
but you can use both markers 90s on the

00:16:10,210 --> 00:16:15,610
same test case if you want and so in

00:16:13,540 --> 00:16:17,980
this case I'm marking a couple of the

00:16:15,610 --> 00:16:20,890
test cases and smoke tests so that when

00:16:17,980 --> 00:16:23,530
I run them later I can - say - am smoke

00:16:20,890 --> 00:16:29,860
and just run those specific test cases

00:16:23,530 --> 00:16:32,470
that's handy and or if the this is if I

00:16:29,860 --> 00:16:35,920
want to do a custom identifier and I you

00:16:32,470 --> 00:16:38,860
know I often do a custom identifier for

00:16:35,920 --> 00:16:42,340
things that are especially for the error

00:16:38,860 --> 00:16:44,680
cases invalid cases things so so that it

00:16:42,340 --> 00:16:49,510
helps identify really why the test is

00:16:44,680 --> 00:16:51,760
there this is a good good reason anyway

00:16:49,510 --> 00:16:55,750
so let's test dot / am handy to have

00:16:51,760 --> 00:16:57,970
around the next thing is in direct and

00:16:55,750 --> 00:17:00,070
indirect is definitely a weird feature

00:16:57,970 --> 00:17:01,480
also but it's also kind of cool we'll

00:17:00,070 --> 00:17:03,730
just do you can set indirect to be a

00:17:01,480 --> 00:17:07,180
list of parameter names and those

00:17:03,730 --> 00:17:10,329
parameters that you list will have the

00:17:07,180 --> 00:17:14,199
value of their parameter passed through

00:17:10,329 --> 00:17:16,150
a fixture of the same name before going

00:17:14,199 --> 00:17:19,150
to the test that's where the indirect

00:17:16,150 --> 00:17:22,180
comes in and like goes round it back

00:17:19,150 --> 00:17:24,010
back into the test this one doesn't do

00:17:22,180 --> 00:17:26,470
much but print something extra but if

00:17:24,010 --> 00:17:27,760
you happen to have some extra extra work

00:17:26,470 --> 00:17:30,880
that you have to do on certain

00:17:27,760 --> 00:17:34,900
parameters this is a way to do it as

00:17:30,880 --> 00:17:37,990
this is indirect if you set you can also

00:17:34,900 --> 00:17:39,880
set indirect to true is this is the same

00:17:37,990 --> 00:17:42,160
as including a list of all of the

00:17:39,880 --> 00:17:44,580
parameters so true sit means all the

00:17:42,160 --> 00:17:47,220
parameters get indirect treatment

00:17:44,580 --> 00:17:49,889
otherwise you can pass it

00:17:47,220 --> 00:17:52,110
by default it's false it's weird

00:17:49,889 --> 00:17:55,259
true/false and no list those are the

00:17:52,110 --> 00:17:58,049
three states whatever but it works this

00:17:55,259 --> 00:18:00,179
is a handy thing when you need it as an

00:17:58,049 --> 00:18:03,120
example when I was pulling data from a

00:18:00,179 --> 00:18:06,269
CSV file I had to get it from the CSV

00:18:03,120 --> 00:18:08,850
code turns things into strings and I

00:18:06,269 --> 00:18:10,919
needed it an in integer form and in the

00:18:08,850 --> 00:18:12,269
original case I just did it when I was

00:18:10,919 --> 00:18:14,879
pulling him out of the CSVs

00:18:12,269 --> 00:18:17,970
I did it within the yield statement we

00:18:14,879 --> 00:18:22,169
could have done them in in using

00:18:17,970 --> 00:18:23,720
indirect like this I could have has said

00:18:22,169 --> 00:18:26,909
to indirect and pass them through

00:18:23,720 --> 00:18:30,119
fixtures to make two into Phi them this

00:18:26,909 --> 00:18:31,799
is an example of a use case it's not a

00:18:30,119 --> 00:18:33,840
great example because this makes the

00:18:31,799 --> 00:18:36,600
test worse I have the test code worse

00:18:33,840 --> 00:18:38,970
and I think it's adding more code but

00:18:36,600 --> 00:18:40,769
you know it's there the beauty of

00:18:38,970 --> 00:18:43,080
parameterization is that when you want

00:18:40,769 --> 00:18:45,509
to extend your test cases it's just

00:18:43,080 --> 00:18:49,169
another line of code we started with

00:18:45,509 --> 00:18:51,690
four test cases here's 11 and it's just

00:18:49,169 --> 00:18:54,330
as easy to read as before and I can add

00:18:51,690 --> 00:18:56,850
comments to it and group them together

00:18:54,330 --> 00:18:58,289
it's very nice and that's one of the

00:18:56,850 --> 00:19:02,129
reasons why parameterizations

00:18:58,289 --> 00:19:04,710
are so nice so with parameterization we

00:19:02,129 --> 00:19:06,779
have it's easy to have more a more full

00:19:04,710 --> 00:19:09,059
set of test cases without adding extra

00:19:06,779 --> 00:19:11,549
too much extra work and without

00:19:09,059 --> 00:19:14,220
increasing maintenance cost if you're

00:19:11,549 --> 00:19:17,309
having trouble coming up with what test

00:19:14,220 --> 00:19:19,409
cases you should have I talked about it

00:19:17,309 --> 00:19:22,139
several techniques in episodes 38 and 39

00:19:19,409 --> 00:19:24,240
of testing code all right to review

00:19:22,139 --> 00:19:26,929
here's the three types all listed

00:19:24,240 --> 00:19:29,490
together so that you can see the syntax

00:19:26,929 --> 00:19:31,200
see what's different about them and

00:19:29,490 --> 00:19:32,999
similar about them and also just see

00:19:31,200 --> 00:19:35,070
that there's really not that much syntax

00:19:32,999 --> 00:19:38,460
these are really not that hard to deal

00:19:35,070 --> 00:19:41,100
with also a reminder you can combine

00:19:38,460 --> 00:19:44,879
techniques you can you can do multiple

00:19:41,100 --> 00:19:46,889
mark pi test mark parameterize two

00:19:44,879 --> 00:19:48,929
parameter is multiple ones you can mix

00:19:46,889 --> 00:19:51,929
fixture parameterization and test

00:19:48,929 --> 00:19:54,059
parameterization you can also mix in PI

00:19:51,929 --> 00:19:56,340
test generate test if you want you can

00:19:54,059 --> 00:19:59,250
use a combination of techniques however

00:19:56,340 --> 00:20:00,330
you should be aware that when you mix a

00:19:59,250 --> 00:20:03,929
lot of parameters

00:20:00,330 --> 00:20:06,210
together it multiplies and you can get a

00:20:03,929 --> 00:20:08,940
whole bunch of test cases really rapidly

00:20:06,210 --> 00:20:13,490
so if that's what you're going for this

00:20:08,940 --> 00:20:16,409
is a technique if you want to keep them

00:20:13,490 --> 00:20:19,890
reasonably small set of test cases this

00:20:16,409 --> 00:20:22,110
might not be for you if you want to

00:20:19,890 --> 00:20:24,120
learn more about PI test there's this

00:20:22,110 --> 00:20:26,940
book called PI test Python testing with

00:20:24,120 --> 00:20:30,149
PI test that I highly recommend right

00:20:26,940 --> 00:20:33,029
there I've listed other great resources

00:20:30,149 --> 00:20:35,429
as well I don't have the links these are

00:20:33,029 --> 00:20:39,210
all linkable so if you if you go to the

00:20:35,429 --> 00:20:41,820
the slide deck you can click on these

00:20:39,210 --> 00:20:44,309
and get in the PI test documentation

00:20:41,820 --> 00:20:46,289
also a couple podcasts that I think that

00:20:44,309 --> 00:20:49,230
you might like you go ahead and ask me

00:20:46,289 --> 00:20:50,700
questions too I'm also available for

00:20:49,230 --> 00:20:52,110
corporate training I just started that

00:20:50,700 --> 00:20:54,840
last year and it's really a lot of fun

00:20:52,110 --> 00:20:58,580
or I can go in and teach your team about

00:20:54,840 --> 00:20:58,580
testing and using PI test

00:21:04,090 --> 00:21:06,150

YouTube URL: https://www.youtube.com/watch?v=2R1HELARjUk


