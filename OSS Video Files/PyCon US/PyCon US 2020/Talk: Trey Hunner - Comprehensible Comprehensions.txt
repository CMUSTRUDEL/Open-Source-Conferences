Title: Talk: Trey Hunner - Comprehensible Comprehensions
Publication date: 2021-05-05
Playlist: PyCon US 2020
Description: 
	Presented by:
Trey Hunner

Finding list comprehensions incomprehensible? Having trouble figuring out when to use list comprehensions or just plain for loops? Are your coworkers overusing comprehensions?

Come to this talk and learn the how, when, and why of list comprehensions.

We’ll discuss:

why list comprehensions exist and why people use them (yes you can always use a loop instead)
how to use list, set, an dictionary comprehensions as well as generator expressions
when and how to easily turn a for loop into a comprehension
why list comprehensions are often hard to read and how to make your comprehensions readable
When to use generator expressions instead of list comprehensions
when and how not to use comprehensions (they’re not a replacement for all loops)
Comprehensions are a unique tool for a unique task. Even if you dislike them, understanding how they work will help you better understand the Python code you find in the wild.

You’ll leave this talk with a better appreciation for both the use cases for comprehensions in Python and an understand of when not to use them.
Captions: 
	00:00:06,279 --> 00:00:13,059
hello I would like to share my love for

00:00:11,360 --> 00:00:15,679
our python feature that's often

00:00:13,059 --> 00:00:19,490
misunderstood by newer Python

00:00:15,679 --> 00:00:31,730
programmers I'm gonna start my screen

00:00:19,490 --> 00:00:34,489
share here alright so my name is Trey

00:00:31,730 --> 00:00:37,160
and I run a Python skill building

00:00:34,489 --> 00:00:39,350
services called Python morsels where I

00:00:37,160 --> 00:00:42,500
send out one Python exercise every week

00:00:39,350 --> 00:00:44,450
I also do on-site training for teams to

00:00:42,500 --> 00:00:46,820
help folks live love their Python skills

00:00:44,450 --> 00:00:48,680
if you are interested in improving your

00:00:46,820 --> 00:00:50,660
own Python skills check out Python

00:00:48,680 --> 00:00:53,600
morsels and if you'd like me to teach

00:00:50,660 --> 00:00:58,480
Python to your team remotely at the

00:00:53,600 --> 00:01:00,680
moment you're welcome to email me so

00:00:58,480 --> 00:01:03,890
let's talk about some assumptions before

00:01:00,680 --> 00:01:06,920
we actually dive in during this talk I'm

00:01:03,890 --> 00:01:08,240
assuming that you already know how for

00:01:06,920 --> 00:01:11,299
loops work in Python you're already

00:01:08,240 --> 00:01:14,210
familiar with a Python basics in terms

00:01:11,299 --> 00:01:17,120
of syntax I'm also assuming that you're

00:01:14,210 --> 00:01:19,549
not already a fan of what I'm talking

00:01:17,120 --> 00:01:22,460
about here comprehensions and generator

00:01:19,549 --> 00:01:24,020
expressions I do hope that by the end of

00:01:22,460 --> 00:01:25,250
this talk though that you will be a fan

00:01:24,020 --> 00:01:26,659
of list comprehensions or you'll at

00:01:25,250 --> 00:01:29,479
least consider using them a little bit

00:01:26,659 --> 00:01:32,869
more in your code so list comprehensions

00:01:29,479 --> 00:01:35,299
are a special-purpose tool for solving a

00:01:32,869 --> 00:01:38,510
problem that we already have a tool to

00:01:35,299 --> 00:01:41,740
solve that is for loops the problem is

00:01:38,510 --> 00:01:45,080
turning one list into another list or

00:01:41,740 --> 00:01:49,130
more generally transforming an old

00:01:45,080 --> 00:01:52,040
interval into a new iterable usually a

00:01:49,130 --> 00:01:54,530
list but not always but the whole

00:01:52,040 --> 00:01:57,920
purpose of list compressions is to

00:01:54,530 --> 00:01:59,990
either modify elements as you build up

00:01:57,920 --> 00:02:03,470
that new list or filter some elements

00:01:59,990 --> 00:02:05,000
out or sometimes both we'll take a look

00:02:03,470 --> 00:02:07,670
at examples of these in a moment but

00:02:05,000 --> 00:02:08,269
first let's talk about for loops in

00:02:07,670 --> 00:02:11,150
Python

00:02:08,269 --> 00:02:13,760
so pythons for loops allow us to loop

00:02:11,150 --> 00:02:17,150
over any interval and do things with

00:02:13,760 --> 00:02:18,500
each item as we loop we can put if

00:02:17,150 --> 00:02:20,150
statements and then we can put print

00:02:18,500 --> 00:02:21,739
calls we can put pretty much any code

00:02:20,150 --> 00:02:25,280
that we want inside of a for loop in

00:02:21,739 --> 00:02:28,430
Python one really common thing

00:02:25,280 --> 00:02:31,700
with four loops is turn one list into

00:02:28,430 --> 00:02:34,430
another list turning old lists into new

00:02:31,700 --> 00:02:37,069
lists is common in other programming

00:02:34,430 --> 00:02:42,620
languages but it is particularly common

00:02:37,069 --> 00:02:45,950
in Python why is that why is it so

00:02:42,620 --> 00:02:48,560
common in Python to turn old lists into

00:02:45,950 --> 00:02:51,140
new lists there's really two reasons for

00:02:48,560 --> 00:02:53,690
this at least two that I can think of if

00:02:51,140 --> 00:02:56,420
we want to modify the list that we're

00:02:53,690 --> 00:02:58,760
looping over in Python Python kind of

00:02:56,420 --> 00:03:02,300
makes us go out of our way in order to

00:02:58,760 --> 00:03:06,620
do it if we want to change our original

00:03:02,300 --> 00:03:08,989
list to have squares in it we need to

00:03:06,620 --> 00:03:12,050
get indexes which pythons for loops

00:03:08,989 --> 00:03:15,040
don't have which means we either need to

00:03:12,050 --> 00:03:19,340
get those indexes ourselves using the

00:03:15,040 --> 00:03:20,840
enumerate function which is kind of

00:03:19,340 --> 00:03:23,060
awkward

00:03:20,840 --> 00:03:25,250
it also doesn't really accomplish what

00:03:23,060 --> 00:03:28,310
we're looking for because what we're

00:03:25,250 --> 00:03:31,549
trying to do here is not actually just

00:03:28,310 --> 00:03:33,950
square all of our numbers but only get

00:03:31,549 --> 00:03:35,930
these squares of odd numbers so we're

00:03:33,950 --> 00:03:38,680
squaring the odd numbers but we're still

00:03:35,930 --> 00:03:42,920
including the even numbers in this list

00:03:38,680 --> 00:03:46,220
if we actually wanted to remove the even

00:03:42,920 --> 00:03:48,110
elements while maintaining the odd

00:03:46,220 --> 00:03:51,260
elements in our list and squaring them

00:03:48,110 --> 00:03:52,820
the results of doing this it would be

00:03:51,260 --> 00:03:54,530
really really awkward code we'd actually

00:03:52,820 --> 00:03:57,260
have to probably resort to a while loop

00:03:54,530 --> 00:03:59,329
because for loops if we try to remove

00:03:57,260 --> 00:04:02,780
items as we're looping we will end up

00:03:59,329 --> 00:04:04,760
skipping over items by accident so you

00:04:02,780 --> 00:04:07,150
don't really see code like this Python

00:04:04,760 --> 00:04:12,500
this is one of the really good reasons

00:04:07,150 --> 00:04:14,329
that we don't modify old lists very

00:04:12,500 --> 00:04:18,430
often we often make new lists out of old

00:04:14,329 --> 00:04:20,750
lists so that's one really good reason

00:04:18,430 --> 00:04:23,510
there is another good really good reason

00:04:20,750 --> 00:04:25,940
now that we don't tend to modify lists

00:04:23,510 --> 00:04:29,060
as we loop over them at least unless

00:04:25,940 --> 00:04:32,909
we're pending to them of course

00:04:29,060 --> 00:04:34,970
variables in Python are pointers meaning

00:04:32,909 --> 00:04:38,280
that when you assigned to a variable

00:04:34,970 --> 00:04:43,139
Python doesn't copy anything it just

00:04:38,280 --> 00:04:44,340
points that variable to the same object

00:04:43,139 --> 00:04:47,520
that you are already pointing to with a

00:04:44,340 --> 00:04:50,190
different variable so if we mutate our

00:04:47,520 --> 00:04:53,639
new list by removing the number three

00:04:50,190 --> 00:04:57,330
from it we will have mutated our old

00:04:53,639 --> 00:04:59,370
list as well because both of these

00:04:57,330 --> 00:05:02,280
variables here in new and old point to

00:04:59,370 --> 00:05:04,110
the exact same object in Python they

00:05:02,280 --> 00:05:07,469
point to the exact same list under the

00:05:04,110 --> 00:05:10,860
hood the variables in Python are not

00:05:07,469 --> 00:05:12,840
buckets that contain objects variables

00:05:10,860 --> 00:05:14,729
are buckets that contain objects and

00:05:12,840 --> 00:05:16,229
many programming languages but that

00:05:14,729 --> 00:05:19,379
mental model of the world breaks down

00:05:16,229 --> 00:05:22,860
very quickly in Python pythons variables

00:05:19,379 --> 00:05:26,129
are references to objects so when we

00:05:22,860 --> 00:05:28,409
modify a list every other variable that

00:05:26,129 --> 00:05:31,940
points to that same list is also going

00:05:28,409 --> 00:05:36,240
to change so instead of mutating lists

00:05:31,940 --> 00:05:38,669
that we are given we tend to copy lists

00:05:36,240 --> 00:05:41,520
we take an old list and we copy it into

00:05:38,669 --> 00:05:43,500
a new list this is one way to copy an

00:05:41,520 --> 00:05:46,620
old list into a new list by kind of

00:05:43,500 --> 00:05:48,990
chopping off that last item and we do

00:05:46,620 --> 00:05:50,430
this because mutating lists can be a bad

00:05:48,990 --> 00:05:56,599
idea if someone else is pointing to that

00:05:50,430 --> 00:05:59,430
list we're gonna upset them all right so

00:05:56,599 --> 00:06:01,529
turning old lists in a new list it's a

00:05:59,430 --> 00:06:02,490
really common thing to do in Python it's

00:06:01,529 --> 00:06:04,409
a really common thing to do because

00:06:02,490 --> 00:06:08,610
Python pushes us to do so and because

00:06:04,409 --> 00:06:10,740
it's often a good idea to do so this is

00:06:08,610 --> 00:06:12,449
such a common thing to do that the

00:06:10,740 --> 00:06:15,300
Python core developers have actually

00:06:12,449 --> 00:06:19,319
added a special syntax just for turning

00:06:15,300 --> 00:06:22,560
one list into another list instead of

00:06:19,319 --> 00:06:25,830
this this for loop that we had before we

00:06:22,560 --> 00:06:29,520
can do this this syntax is called a list

00:06:25,830 --> 00:06:31,710
comprehension this list comprehension is

00:06:29,520 --> 00:06:34,740
equivalent to that for loop that we

00:06:31,710 --> 00:06:38,110
started with that comprehension is very

00:06:34,740 --> 00:06:41,020
information dense though we

00:06:38,110 --> 00:06:44,650
condensed what was four lines of code in

00:06:41,020 --> 00:06:47,020
the four loop into one line of code in

00:06:44,650 --> 00:06:48,550
the comprehension so let's break down

00:06:47,020 --> 00:06:50,860
the four loop in the comprehension and

00:06:48,550 --> 00:06:53,020
see how these two compare I've

00:06:50,860 --> 00:06:56,320
highlighted here five things in this

00:06:53,020 --> 00:06:58,030
loop the variable name is highlighted in

00:06:56,320 --> 00:07:00,400
green the variable name of our new list

00:06:58,030 --> 00:07:02,290
the square brackets are highlighted in

00:07:00,400 --> 00:07:05,500
kind of a dark red color at least that's

00:07:02,290 --> 00:07:08,950
how they appear on my screen the looping

00:07:05,500 --> 00:07:11,190
logic is in purple and the condition

00:07:08,950 --> 00:07:14,170
that we're filtering by is in bright red

00:07:11,190 --> 00:07:18,240
also the item we are actually appending

00:07:14,170 --> 00:07:18,240
to that new list is in blue

00:07:18,670 --> 00:07:23,800
here the same things here well here's

00:07:22,300 --> 00:07:26,200
the things that I just said the variable

00:07:23,800 --> 00:07:30,430
name is in green the square brackets the

00:07:26,200 --> 00:07:32,740
loop the filter and the thing we're

00:07:30,430 --> 00:07:34,510
appending they're the same exact things

00:07:32,740 --> 00:07:35,740
are present in the comprehension all of

00:07:34,510 --> 00:07:38,350
those component parts exist in the

00:07:35,740 --> 00:07:40,090
comprehension as well so our coverage

00:07:38,350 --> 00:07:42,520
and it contains pretty much the same

00:07:40,090 --> 00:07:44,500
information as a for loop except that we

00:07:42,520 --> 00:07:47,760
aren't repeating the variable name and

00:07:44,500 --> 00:07:50,200
we don't actually have to type append

00:07:47,760 --> 00:07:52,330
loops and list comprehensions are

00:07:50,200 --> 00:07:54,940
actually so similar that you can often

00:07:52,330 --> 00:07:58,480
copy/paste your way from a for loop into

00:07:54,940 --> 00:08:00,250
a comprehension so if we start with a

00:07:58,480 --> 00:08:03,430
for loop like this we can copy the

00:08:00,250 --> 00:08:04,780
square brackets next we copy the append

00:08:03,430 --> 00:08:07,510
that's the first thing that goes in the

00:08:04,780 --> 00:08:09,180
comprehension after that the next thing

00:08:07,510 --> 00:08:12,400
in the comprehension is the four and

00:08:09,180 --> 00:08:14,260
then after that four we're gonna put the

00:08:12,400 --> 00:08:18,640
if in there that's the last thing that

00:08:14,260 --> 00:08:20,590
you can have in a comprehension by copy

00:08:18,640 --> 00:08:22,300
pasting away from this for loop to this

00:08:20,590 --> 00:08:24,640
comprehension we just built up something

00:08:22,300 --> 00:08:26,080
that's equivalent so that this

00:08:24,640 --> 00:08:27,490
comprehension here is equivalent to the

00:08:26,080 --> 00:08:30,310
loop that we started with and we didn't

00:08:27,490 --> 00:08:32,140
actually have to type anything new so

00:08:30,310 --> 00:08:33,850
I've highlighted the same five things as

00:08:32,140 --> 00:08:36,400
before but this is generic code this

00:08:33,850 --> 00:08:38,020
time it's a blueprint of sorts as long

00:08:36,400 --> 00:08:40,360
as you can figure out how to structure

00:08:38,020 --> 00:08:42,580
your code in this format you can always

00:08:40,360 --> 00:08:46,320
copy/paste your way from this particular

00:08:42,580 --> 00:08:48,550
for loop into this comprehension so

00:08:46,320 --> 00:08:50,720
we've seen how to build a comprehension

00:08:48,550 --> 00:08:52,040
from a for loop

00:08:50,720 --> 00:08:53,300
one of the biggest things people

00:08:52,040 --> 00:08:54,380
complain about when they first learn

00:08:53,300 --> 00:08:56,830
have had these things views a

00:08:54,380 --> 00:08:59,839
readability so let's talk about that

00:08:56,830 --> 00:09:02,420
list comprehensions they take what was

00:08:59,839 --> 00:09:04,250
perfectly readable code if for loop that

00:09:02,420 --> 00:09:07,730
we all understand and they make it less

00:09:04,250 --> 00:09:10,040
readable the main reason that I hear a

00:09:07,730 --> 00:09:11,839
complaint like this which I don't quite

00:09:10,040 --> 00:09:15,980
agree with is that list comprehensions

00:09:11,839 --> 00:09:18,740
are much more compact than for lips so

00:09:15,980 --> 00:09:19,850
let's talk about that comprehension is

00:09:18,740 --> 00:09:22,820
as you can see here they're often

00:09:19,850 --> 00:09:24,950
written on one line of code that is the

00:09:22,820 --> 00:09:29,890
thing that makes comprehension is hard

00:09:24,950 --> 00:09:32,149
to read this comprehension here has less

00:09:29,890 --> 00:09:35,290
unnecessary information but it also has

00:09:32,149 --> 00:09:38,029
a lot less whitespace than that for loop

00:09:35,290 --> 00:09:40,579
Python forces us to indent our loops it

00:09:38,029 --> 00:09:42,860
forces us to use whitespace Python

00:09:40,579 --> 00:09:44,180
doesn't force us to add any spaces

00:09:42,860 --> 00:09:48,320
inside of our comprehension and we've

00:09:44,180 --> 00:09:51,649
chosen here not to comprehensions have

00:09:48,320 --> 00:09:54,079
three parts the operation the loop and

00:09:51,649 --> 00:09:55,790
the condition there's no reason that all

00:09:54,079 --> 00:09:58,310
three of those parts have to be written

00:09:55,790 --> 00:10:00,470
on one line of code in Python whenever

00:09:58,310 --> 00:10:03,079
you've got an open bracket and open

00:10:00,470 --> 00:10:05,180
brace and open parenthesis you can

00:10:03,079 --> 00:10:08,020
insert line breaks to break up one line

00:10:05,180 --> 00:10:10,339
of code into multiple lines of code

00:10:08,020 --> 00:10:13,720
breaking comprehensions over multiple

00:10:10,339 --> 00:10:17,180
lines can make them much more readable

00:10:13,720 --> 00:10:18,950
in fact I would argue that breaking up

00:10:17,180 --> 00:10:22,700
comprehensions over multiple lines is

00:10:18,950 --> 00:10:24,829
almost always a readability improvement

00:10:22,700 --> 00:10:27,620
over using one line of code for your

00:10:24,829 --> 00:10:29,329
comprehension and because of that I

00:10:27,620 --> 00:10:30,829
would recommend that you start by

00:10:29,329 --> 00:10:32,959
writing all of your comprehension so for

00:10:30,829 --> 00:10:34,670
multiple lines you only combine them

00:10:32,959 --> 00:10:39,500
into one line if it makes your code more

00:10:34,670 --> 00:10:40,190
readable embrace whitespace whitespace

00:10:39,500 --> 00:10:42,970
is your friend

00:10:40,190 --> 00:10:44,959
whether it's indentation in Python or

00:10:42,970 --> 00:10:46,610
spaces and line breaks that you

00:10:44,959 --> 00:10:53,000
strategically put in your list

00:10:46,610 --> 00:10:54,680
comprehensions note that this multi-line

00:10:53,000 --> 00:10:56,930
list comprehension that we ended up with

00:10:54,680 --> 00:10:58,820
it hasn't actually saved us any lines of

00:10:56,930 --> 00:11:01,279
code in fact we've gone from four lines

00:10:58,820 --> 00:11:01,940
of code in the for loop to five lines of

00:11:01,279 --> 00:11:04,520
code and has

00:11:01,940 --> 00:11:06,830
branch in' list comprehensions are not

00:11:04,520 --> 00:11:09,470
about saving lines of code lines of code

00:11:06,830 --> 00:11:12,170
are not the measure that we should use

00:11:09,470 --> 00:11:13,670
for readability typically list

00:11:12,170 --> 00:11:19,150
comprehensions are about making your

00:11:13,670 --> 00:11:19,150
code more descriptive and more readable

00:11:19,450 --> 00:11:24,860
when someone reads a for lip you look at

00:11:23,450 --> 00:11:27,710
a for loop in Python it's obvious that

00:11:24,860 --> 00:11:30,200
you're looping but it might not

00:11:27,710 --> 00:11:32,420
immediately be obvious why we're looping

00:11:30,200 --> 00:11:36,320
what the thing we're doing is in each

00:11:32,420 --> 00:11:38,030
loop when someone looks at a

00:11:36,320 --> 00:11:39,200
comprehension in Python code as long as

00:11:38,030 --> 00:11:42,170
they understand what that comprehension

00:11:39,200 --> 00:11:45,050
is what that construct does it will be

00:11:42,170 --> 00:11:46,670
immediately obvious that a new list is

00:11:45,050 --> 00:11:49,160
being created we're looping over an old

00:11:46,670 --> 00:11:53,030
list for making a new list that is a

00:11:49,160 --> 00:11:55,490
specific purpose of comprehensions when

00:11:53,030 --> 00:11:57,500
we use a list comprehension we're being

00:11:55,490 --> 00:11:59,630
more specific with the intent of our

00:11:57,500 --> 00:12:02,650
code we're not just looping we're making

00:11:59,630 --> 00:12:05,840
a new list out of an old list

00:12:02,650 --> 00:12:08,870
so I've glossed over some important

00:12:05,840 --> 00:12:11,090
details in the world of comprehensions I

00:12:08,870 --> 00:12:12,740
would like to look at a few other ways

00:12:11,090 --> 00:12:15,290
you can make list comprehensions before

00:12:12,740 --> 00:12:18,170
we move on to some comprehension related

00:12:15,290 --> 00:12:19,730
topics so this whole time I've been

00:12:18,170 --> 00:12:22,010
showing you a list comprehension with a

00:12:19,730 --> 00:12:24,440
condition these list comprehensions

00:12:22,010 --> 00:12:26,150
filter out items that don't match a

00:12:24,440 --> 00:12:27,880
certain condition and they only include

00:12:26,150 --> 00:12:30,200
items that do match a certain condition

00:12:27,880 --> 00:12:34,010
you can also write list comprehensions

00:12:30,200 --> 00:12:35,840
without this if statement here we're not

00:12:34,010 --> 00:12:37,190
filtering down our list at all it has

00:12:35,840 --> 00:12:39,500
the same number of items at the end

00:12:37,190 --> 00:12:42,320
we're simply changing each item as we

00:12:39,500 --> 00:12:44,090
add it to the new list so our for loop

00:12:42,320 --> 00:12:45,440
doesn't have it if and our list

00:12:44,090 --> 00:12:47,660
comprehension doesn't have a condition

00:12:45,440 --> 00:12:49,400
of any sort note that you can still

00:12:47,660 --> 00:12:51,140
copy/paste your way from the for loop to

00:12:49,400 --> 00:12:54,290
the comprehension you just don't have an

00:12:51,140 --> 00:12:56,900
if list comprehension is can be used for

00:12:54,290 --> 00:12:58,790
filtering for mapping which was what I'd

00:12:56,900 --> 00:13:02,270
call this kind of change operation or

00:12:58,790 --> 00:13:04,070
for both what we saw before was both

00:13:02,270 --> 00:13:07,560
mapping and filtering here were just

00:13:04,070 --> 00:13:10,449
mapping old values to new values

00:13:07,560 --> 00:13:13,600
you can also put multiple four loops in

00:13:10,449 --> 00:13:16,660
a comprehension here we're looping into

00:13:13,600 --> 00:13:20,680
a list of lists and flattening it into a

00:13:16,660 --> 00:13:22,120
single list putting multiple four

00:13:20,680 --> 00:13:23,440
clauses in a comprehension you get a

00:13:22,120 --> 00:13:25,660
little bit complicated that so be

00:13:23,440 --> 00:13:28,240
careful using this and if you're going

00:13:25,660 --> 00:13:29,319
to do this definitely make sure you

00:13:28,240 --> 00:13:33,490
break up your comprehension

00:13:29,319 --> 00:13:34,990
over multiple lines also note copy/paste

00:13:33,490 --> 00:13:37,569
your way into these the order actually

00:13:34,990 --> 00:13:40,209
matters here for row and matrix for item

00:13:37,569 --> 00:13:43,110
and row has to come second the order is

00:13:40,209 --> 00:13:45,430
important with those forest

00:13:43,110 --> 00:13:48,130
comprehensions aren't just limited to

00:13:45,430 --> 00:13:50,560
lists they're also set comprehension in

00:13:48,130 --> 00:13:53,019
Python list comprehensions build up new

00:13:50,560 --> 00:13:56,050
lists set comprehensions build up new

00:13:53,019 --> 00:13:57,639
sets by adding items to the set just as

00:13:56,050 --> 00:14:00,430
we would append items to the end of a

00:13:57,639 --> 00:14:03,459
list there are also dictionary

00:14:00,430 --> 00:14:05,290
comprehensions list comprehensions make

00:14:03,459 --> 00:14:06,910
new lists set comprehension make new

00:14:05,290 --> 00:14:08,680
sets dictionary gone for engines make

00:14:06,910 --> 00:14:09,970
new dictionaries they look a little

00:14:08,680 --> 00:14:11,949
different though they're kind of like a

00:14:09,970 --> 00:14:13,990
sitcom branch and except they've got a

00:14:11,949 --> 00:14:17,709
colon in there because we have to say

00:14:13,990 --> 00:14:22,720
key colon value since we have both keys

00:14:17,709 --> 00:14:24,819
and values and dictionaries unlike list

00:14:22,720 --> 00:14:26,889
comprehensions I pretty much always

00:14:24,819 --> 00:14:28,540
break my dictionary comprehension is

00:14:26,889 --> 00:14:30,579
over multiple lines I really don't like

00:14:28,540 --> 00:14:32,500
to see that colon on the same line as

00:14:30,579 --> 00:14:36,730
that for clause that's just personal

00:14:32,500 --> 00:14:39,399
preference though so many other

00:14:36,730 --> 00:14:43,630
programming languages have map and

00:14:39,399 --> 00:14:46,300
filter methods on arrays which are our

00:14:43,630 --> 00:14:48,459
equivalent of lists in Python we don't

00:14:46,300 --> 00:14:50,350
have this in Python but we do have a map

00:14:48,459 --> 00:14:51,639
and filter function and I want to talk

00:14:50,350 --> 00:14:53,560
about how these compare to comprehension

00:14:51,639 --> 00:14:57,459
cuz you will see the two of these used

00:14:53,560 --> 00:14:59,199
sometimes in JavaScript arrays have a

00:14:57,459 --> 00:15:01,420
filter method and they have a map method

00:14:59,199 --> 00:15:05,170
which pretty much accomplished the same

00:15:01,420 --> 00:15:08,290
tasks as comprehensions in Python in

00:15:05,170 --> 00:15:10,470
Ruby arrays have a select method and a

00:15:08,290 --> 00:15:14,980
map method which do the same thing and

00:15:10,470 --> 00:15:18,160
Python this might look like this filter

00:15:14,980 --> 00:15:20,150
and this map method with lambda

00:15:18,160 --> 00:15:21,850
functions passed into them

00:15:20,150 --> 00:15:24,380
except that this doesn't work in Python

00:15:21,850 --> 00:15:28,130
lists don't have filter methods and they

00:15:24,380 --> 00:15:30,440
don't have map methods in Python instead

00:15:28,130 --> 00:15:34,700
of map and filter methods in Python we

00:15:30,440 --> 00:15:37,010
have a top-level filter function and a

00:15:34,700 --> 00:15:38,630
top-level map function so we've got a

00:15:37,010 --> 00:15:41,090
built-in filter function and a built-in

00:15:38,630 --> 00:15:43,310
built-in map function and we need to

00:15:41,090 --> 00:15:46,850
convert them to lists to see the results

00:15:43,310 --> 00:15:50,120
from them comprehensions are the cleaner

00:15:46,850 --> 00:15:53,590
alternative to this this is the way we

00:15:50,120 --> 00:15:55,880
typically do map and filter in Python so

00:15:53,590 --> 00:15:57,680
we don't have map and filter or rather

00:15:55,880 --> 00:15:58,730
we do have map and filter but we don't

00:15:57,680 --> 00:16:00,830
have the map and filter that other

00:15:58,730 --> 00:16:06,110
languages do and instead we tend to use

00:16:00,830 --> 00:16:07,610
comprehensions so we've seen the syntax

00:16:06,110 --> 00:16:10,010
of lists set and dictionary

00:16:07,610 --> 00:16:13,610
comprehensions let's take a look at some

00:16:10,010 --> 00:16:15,470
examples of comprehensions of different

00:16:13,610 --> 00:16:17,090
types of comprehension I'm going to move

00:16:15,470 --> 00:16:20,930
through these quickly but you can review

00:16:17,090 --> 00:16:22,850
these slides later on your own one of

00:16:20,930 --> 00:16:24,590
the simplest uses of list comprehensions

00:16:22,850 --> 00:16:26,510
is to make a new list from the old list

00:16:24,590 --> 00:16:28,490
well very slightly modifying each

00:16:26,510 --> 00:16:30,290
element along the way so here we're just

00:16:28,490 --> 00:16:32,420
lower casing a whole bunch of words that

00:16:30,290 --> 00:16:36,470
were in one list now they're a new list

00:16:32,420 --> 00:16:38,240
and they're all lowercase in this

00:16:36,470 --> 00:16:40,240
example we're doing something a little

00:16:38,240 --> 00:16:44,390
bit more complicated we're checking

00:16:40,240 --> 00:16:47,450
whether each word is an anagram and if

00:16:44,390 --> 00:16:48,740
it is we're including it in a new list

00:16:47,450 --> 00:16:53,030
we're checking if it's an anagram of

00:16:48,740 --> 00:16:55,580
some other list of words note that we're

00:16:53,030 --> 00:16:57,650
we're calling a function to do this

00:16:55,580 --> 00:16:59,120
because is anagram is a lot more

00:16:57,650 --> 00:17:01,430
descriptive if we just put that

00:16:59,120 --> 00:17:03,590
comparison line sorted word 1 equals

00:17:01,430 --> 00:17:06,800
equals sorted or two straight into our

00:17:03,590 --> 00:17:08,570
comprehension so we're we're using a

00:17:06,800 --> 00:17:10,850
list comprehension to filter down our

00:17:08,570 --> 00:17:13,270
words to only have the words that are

00:17:10,850 --> 00:17:13,270
anagrams

00:17:14,880 --> 00:17:19,500
this is not a comprehension there's no

00:17:17,160 --> 00:17:21,510
comprehension here this is a for loop

00:17:19,500 --> 00:17:24,750
with another for loop inside it we're

00:17:21,510 --> 00:17:26,430
building up a list of lists the inner

00:17:24,750 --> 00:17:28,920
for loop looks kind of like

00:17:26,430 --> 00:17:33,630
comprehension material though we could

00:17:28,920 --> 00:17:36,540
take that empty row list that new or

00:17:33,630 --> 00:17:39,510
rather that a new row list and that

00:17:36,540 --> 00:17:42,210
append and copy-paste our way into a

00:17:39,510 --> 00:17:44,460
list comprehension and I put this on one

00:17:42,210 --> 00:17:47,490
line here the reason I put this on one

00:17:44,460 --> 00:17:49,860
line is we can actually we could stop

00:17:47,490 --> 00:17:51,720
here but we could go further we could

00:17:49,860 --> 00:17:53,970
actually take this and then I said again

00:17:51,720 --> 00:17:56,820
looks like the recipe for copy pasting

00:17:53,970 --> 00:18:00,660
from a for loop into a comprehension so

00:17:56,820 --> 00:18:01,920
we can again copy paste the this whole

00:18:00,660 --> 00:18:04,170
thing into a comprehension we've got the

00:18:01,920 --> 00:18:06,690
empty list the for and the thing we're

00:18:04,170 --> 00:18:08,900
appending so we'd start with the thing

00:18:06,690 --> 00:18:11,700
we're appending and we'd stick the for

00:18:08,900 --> 00:18:14,190
and we now have a comprehension inside

00:18:11,700 --> 00:18:15,900
of a comprehension this isn't a god

00:18:14,190 --> 00:18:17,310
branch with two fours this is a

00:18:15,900 --> 00:18:20,970
comprehension inside of a comprehension

00:18:17,310 --> 00:18:22,700
I really this can be useful but really

00:18:20,970 --> 00:18:24,660
do this sparingly in your code

00:18:22,700 --> 00:18:26,220
comprehension since I'd of copper

00:18:24,660 --> 00:18:28,320
engines do not always improve the

00:18:26,220 --> 00:18:31,080
readability of your code I would argue

00:18:28,320 --> 00:18:32,430
though that in this case it actually has

00:18:31,080 --> 00:18:34,770
improved the readability of our code

00:18:32,430 --> 00:18:37,380
because it is well I'd say it's more

00:18:34,770 --> 00:18:39,690
descriptive it looks like a list of

00:18:37,380 --> 00:18:41,070
Lists what we started with looks like

00:18:39,690 --> 00:18:44,460
there's a lot of looping going on what

00:18:41,070 --> 00:18:45,930
we ended with looks like the thing we

00:18:44,460 --> 00:18:50,520
ended up with the shape of our code

00:18:45,930 --> 00:18:52,980
resembles a list of Lists list

00:18:50,520 --> 00:18:55,290
comprehensions make lists set

00:18:52,980 --> 00:18:57,080
comprehensions make sets dictionary

00:18:55,290 --> 00:18:59,960
comprehensions make dictionaries

00:18:57,080 --> 00:19:02,070
generator comprehensions make generators

00:18:59,960 --> 00:19:03,450
except that they're not called generator

00:19:02,070 --> 00:19:06,480
comprehensions they're called generator

00:19:03,450 --> 00:19:08,760
expressions why they're called that I

00:19:06,480 --> 00:19:10,320
don't entirely know if you say either

00:19:08,760 --> 00:19:12,450
one of these terms people will know what

00:19:10,320 --> 00:19:15,120
you're talking about technically they're

00:19:12,450 --> 00:19:17,300
called generator expressions so you

00:19:15,120 --> 00:19:19,410
might be wondering what a generator is

00:19:17,300 --> 00:19:20,880
this isn't something that if you're new

00:19:19,410 --> 00:19:24,179
to Python you're probably super familiar

00:19:20,880 --> 00:19:25,920
with I'm not going to go deep into what

00:19:24,179 --> 00:19:28,290
generators are

00:19:25,920 --> 00:19:29,550
because it's kind of a complex topic I

00:19:28,290 --> 00:19:31,800
do have another talk that I can

00:19:29,550 --> 00:19:33,690
recommend on that all I'll recommend in

00:19:31,800 --> 00:19:39,720
the links the resources at the end of

00:19:33,690 --> 00:19:40,650
this talk but I will I uh

00:19:39,720 --> 00:19:42,690
tell you a couple things about

00:19:40,650 --> 00:19:45,620
generators so generators are a

00:19:42,690 --> 00:19:48,090
single-use lays the iterable and

00:19:45,620 --> 00:19:50,510
generator expressions are pretty much

00:19:48,090 --> 00:19:53,190
the shorthand for making generators

00:19:50,510 --> 00:19:54,750
there's pretty much only one thing that

00:19:53,190 --> 00:19:56,520
I want you to remember about generator

00:19:54,750 --> 00:19:58,740
expressions at the end of this talk that

00:19:56,520 --> 00:20:00,840
is that if you're writing a list

00:19:58,740 --> 00:20:03,210
comprehension and you're going to loop

00:20:00,840 --> 00:20:05,490
over your list exactly once

00:20:03,210 --> 00:20:08,520
you should make a generator expression

00:20:05,490 --> 00:20:11,550
instead of a list comprehension so I'll

00:20:08,520 --> 00:20:15,420
say that again after I show you how

00:20:11,550 --> 00:20:17,670
generator expressions actually work if

00:20:15,420 --> 00:20:19,860
you write a list comprehension and you

00:20:17,670 --> 00:20:23,310
change the square brackets into

00:20:19,860 --> 00:20:27,240
parentheses like here you have made a

00:20:23,310 --> 00:20:29,970
generator expression instead generator

00:20:27,240 --> 00:20:32,450
expressions make generators the same way

00:20:29,970 --> 00:20:35,090
that list comprehensions make lists

00:20:32,450 --> 00:20:37,200
generators are pretty weird though

00:20:35,090 --> 00:20:39,180
generators don't know how many elements

00:20:37,200 --> 00:20:42,390
are inside them so they have no length

00:20:39,180 --> 00:20:43,620
you can't index a generator like you

00:20:42,390 --> 00:20:45,570
could with a list from our tooth we'll

00:20:43,620 --> 00:20:47,670
say add the really the only thing you

00:20:45,570 --> 00:20:50,130
can do with generators is loop over them

00:20:47,670 --> 00:20:52,320
and if you loop over a generator more

00:20:50,130 --> 00:20:54,360
than once loop over the second time here

00:20:52,320 --> 00:20:57,120
we're gonna get nothing back it's empty

00:20:54,360 --> 00:21:03,410
the second time generators are

00:20:57,120 --> 00:21:08,460
single-use iterables this generator is

00:21:03,410 --> 00:21:12,630
squaring all numbers from zero until

00:21:08,460 --> 00:21:14,730
just before 1 billion this could take a

00:21:12,630 --> 00:21:17,220
really long time and it might fill up my

00:21:14,730 --> 00:21:18,690
computer's memory but this generator

00:21:17,220 --> 00:21:21,750
hasn't actually done any work at this

00:21:18,690 --> 00:21:23,910
point so no work has been done until we

00:21:21,750 --> 00:21:25,500
start looping over our generator and we

00:21:23,910 --> 00:21:28,470
can manually loop over them using this

00:21:25,500 --> 00:21:32,730
built in next function generators

00:21:28,470 --> 00:21:35,220
compute items as they go so at this

00:21:32,730 --> 00:21:37,170
point only the first three items have

00:21:35,220 --> 00:21:38,460
actually been computed in this one

00:21:37,170 --> 00:21:43,740
billion

00:21:38,460 --> 00:21:45,630
generator generators are lazy they only

00:21:43,740 --> 00:21:48,570
compute values immediately before they

00:21:45,630 --> 00:21:50,460
give them to you so you can loop over

00:21:48,570 --> 00:21:52,170
generators just like lists but they

00:21:50,460 --> 00:21:57,090
compute their values inside themselves

00:21:52,170 --> 00:22:00,420
lazily generators are lazy and they're

00:21:57,090 --> 00:22:01,800
also one-time use only the only thing

00:22:00,420 --> 00:22:04,470
that you can do with generators is a

00:22:01,800 --> 00:22:06,180
loop over them but only once because the

00:22:04,470 --> 00:22:07,040
second time you loop over generator it's

00:22:06,180 --> 00:22:11,550
empty

00:22:07,040 --> 00:22:13,530
generators are one-time use only once

00:22:11,550 --> 00:22:16,260
you've fully looped over a generator we

00:22:13,530 --> 00:22:19,470
say that it is exhausted so generators

00:22:16,260 --> 00:22:23,820
are lazy and they're single-use lazy

00:22:19,470 --> 00:22:25,320
single-use iterables so to be on the

00:22:23,820 --> 00:22:27,740
safe side you should loop over a

00:22:25,320 --> 00:22:30,060
generator as soon as humanly possible

00:22:27,740 --> 00:22:31,590
don't even make a variable ideally to

00:22:30,060 --> 00:22:31,860
store them just loop over them right

00:22:31,590 --> 00:22:34,380
away

00:22:31,860 --> 00:22:35,700
the sooner you loop over a generator the

00:22:34,380 --> 00:22:38,580
less likely it is that you might

00:22:35,700 --> 00:22:41,220
accidentally loop over twice this

00:22:38,580 --> 00:22:42,990
particular syntax is such a common thing

00:22:41,220 --> 00:22:44,960
to do in Python to pass a generator

00:22:42,990 --> 00:22:47,880
expression off to another function that

00:22:44,960 --> 00:22:51,150
Python actually lose allows us to remove

00:22:47,880 --> 00:22:54,240
those redundant parentheses around that

00:22:51,150 --> 00:22:55,860
generator expression this is probably

00:22:54,240 --> 00:22:58,170
the most common way to use generators

00:22:55,860 --> 00:23:01,290
and buy them or these generator

00:22:58,170 --> 00:23:02,870
expressions you create it you loop over

00:23:01,290 --> 00:23:05,910
it right away

00:23:02,870 --> 00:23:07,140
alright so you I'm certain that if you

00:23:05,910 --> 00:23:08,580
haven't seen generators before you're

00:23:07,140 --> 00:23:12,510
probably still fuzzy on what exactly

00:23:08,580 --> 00:23:15,030
they are but I hope that you at least

00:23:12,510 --> 00:23:16,230
understand that after you've created

00:23:15,030 --> 00:23:16,950
them you should loop over them

00:23:16,230 --> 00:23:19,050
immediately

00:23:16,950 --> 00:23:20,580
I'd like to reinforce eyes that rule

00:23:19,050 --> 00:23:23,010
that I said about generator expressions

00:23:20,580 --> 00:23:26,820
before if you're making a list

00:23:23,010 --> 00:23:29,580
comprehension and you're going to loop

00:23:26,820 --> 00:23:32,070
over your list once and only once you

00:23:29,580 --> 00:23:35,460
should instead use a generator

00:23:32,070 --> 00:23:37,230
expression this avoids building up a new

00:23:35,460 --> 00:23:38,120
list just to loop over once and then

00:23:37,230 --> 00:23:41,220
throw it away

00:23:38,120 --> 00:23:43,140
so again if you're using a list

00:23:41,220 --> 00:23:45,990
comprehension to build up a list that

00:23:43,140 --> 00:23:48,090
you're only looping over once use a

00:23:45,990 --> 00:23:50,100
generator expression instead so you

00:23:48,090 --> 00:23:51,779
won't waste any resources building up a

00:23:50,100 --> 00:23:53,219
temporary list

00:23:51,779 --> 00:23:56,489
this really only matters when you get

00:23:53,219 --> 00:23:58,259
into actually using up more memory but

00:23:56,489 --> 00:24:02,219
it's it's a pretty good rule to get into

00:23:58,259 --> 00:24:04,019
the habit of so let's take a look at a

00:24:02,219 --> 00:24:07,679
couple examples of one you might use

00:24:04,019 --> 00:24:10,099
generate expressions in your code here

00:24:07,679 --> 00:24:11,879
we're looping over a list of words

00:24:10,099 --> 00:24:12,809
transforming them a little bit we're

00:24:11,879 --> 00:24:15,149
looking them up in some kind of

00:24:12,809 --> 00:24:16,739
dictionary and then we're joining them

00:24:15,149 --> 00:24:18,649
back together with spaces at the very

00:24:16,739 --> 00:24:21,419
end after we've built up a list of them

00:24:18,649 --> 00:24:22,950
we could turn that looping part into a

00:24:21,419 --> 00:24:25,409
list comprehension as we've already seen

00:24:22,950 --> 00:24:26,879
we can copy/paste your way into it but

00:24:25,409 --> 00:24:30,779
once we've done this we could take it a

00:24:26,879 --> 00:24:33,119
step further because the join method on

00:24:30,779 --> 00:24:35,909
strings accepts any iterable and it

00:24:33,119 --> 00:24:37,559
loops over it only once so we could take

00:24:35,909 --> 00:24:39,329
that list comprehension move it straight

00:24:37,559 --> 00:24:41,009
into the join call remove those square

00:24:39,329 --> 00:24:44,879
brackets and voila we've made a

00:24:41,009 --> 00:24:46,739
generator expression so generate

00:24:44,879 --> 00:24:50,219
expression pass directly into the string

00:24:46,739 --> 00:24:52,200
join method that's one example here is

00:24:50,219 --> 00:24:53,849
something that's not quite so obvious

00:24:52,200 --> 00:24:56,190
that it even has to do with generator

00:24:53,849 --> 00:24:58,889
expressions we're looping over numbers

00:24:56,190 --> 00:25:00,749
and we're summing up their squares this

00:24:58,889 --> 00:25:02,219
does not look like a list comprehension

00:25:00,749 --> 00:25:04,739
right now because there's no list at all

00:25:02,219 --> 00:25:06,629
we could make a list we could make a

00:25:04,739 --> 00:25:09,450
list of squares and then use the

00:25:06,629 --> 00:25:10,679
built-in sum function in Python it which

00:25:09,450 --> 00:25:11,969
seems a little silly because we're

00:25:10,679 --> 00:25:16,519
building up a whole list just to loop

00:25:11,969 --> 00:25:18,719
over once but this allows us to

00:25:16,519 --> 00:25:19,829
copy/paste your way ways sorry I said

00:25:18,719 --> 00:25:21,450
we're making a list comprehension we

00:25:19,829 --> 00:25:23,039
were making your for loop here but we

00:25:21,450 --> 00:25:25,889
could copy/paste your way into a list

00:25:23,039 --> 00:25:27,899
compromise for loop because it you know

00:25:25,889 --> 00:25:30,329
resembles a list comprehension empty

00:25:27,899 --> 00:25:32,099
list for an append and then once we've

00:25:30,329 --> 00:25:33,869
done that we could remove those square

00:25:32,099 --> 00:25:36,479
brackets and we've again made a generate

00:25:33,869 --> 00:25:38,659
expression we're passing squares of

00:25:36,479 --> 00:25:41,700
numbers straight into the sum function I

00:25:38,659 --> 00:25:44,339
find this generate expression more

00:25:41,700 --> 00:25:45,599
descriptive than what we started with it

00:25:44,339 --> 00:25:47,190
looks like what we're actually doing

00:25:45,599 --> 00:25:51,850
we're summing up the squares of these

00:25:47,190 --> 00:25:53,590
numbers all right so we

00:25:51,850 --> 00:25:55,210
looked at comprehensions and we looked

00:25:53,590 --> 00:25:56,830
at Trinity expressions we've also seen

00:25:55,210 --> 00:26:00,340
how to copy-paste your loops into

00:25:56,830 --> 00:26:02,320
comprehensions but when exactly should

00:26:00,340 --> 00:26:04,510
you use comprehensions and is there ever

00:26:02,320 --> 00:26:06,190
an inappropriate time to use a

00:26:04,510 --> 00:26:10,240
comprehension is it ever a bad idea to

00:26:06,190 --> 00:26:12,669
use one so list comprehensions are only

00:26:10,240 --> 00:26:13,179
useful for turning one list into another

00:26:12,669 --> 00:26:15,640
list

00:26:13,179 --> 00:26:18,490
don't use comprehensions except for

00:26:15,640 --> 00:26:20,530
making lists comprehension should only

00:26:18,490 --> 00:26:23,309
be used for the specific but pretty

00:26:20,530 --> 00:26:28,000
common in Python use of turning one list

00:26:23,309 --> 00:26:32,250
into another list here we're calling the

00:26:28,000 --> 00:26:34,510
print function inside a comprehension

00:26:32,250 --> 00:26:36,250
we've ended up printing out all these

00:26:34,510 --> 00:26:37,780
numbers but we also created a list of

00:26:36,250 --> 00:26:40,179
none values while we printed these

00:26:37,780 --> 00:26:41,950
things out we don't actually care about

00:26:40,179 --> 00:26:45,669
the non values we care about the side

00:26:41,950 --> 00:26:48,340
effect of the printing do not call print

00:26:45,669 --> 00:26:49,870
in a comprehension in fact don't put any

00:26:48,340 --> 00:26:51,570
side effects at all on a comprehension

00:26:49,870 --> 00:26:53,559
even if you are making an air list

00:26:51,570 --> 00:26:56,049
lizica branch and should only be used

00:26:53,559 --> 00:26:59,020
for turning one list into another list

00:26:56,049 --> 00:27:02,770
not for printing a for loop is great for

00:26:59,020 --> 00:27:05,320
printing here we are looping over a list

00:27:02,770 --> 00:27:07,450
of tuples and making a dictionary out of

00:27:05,320 --> 00:27:11,740
them but this actually looks like a

00:27:07,450 --> 00:27:13,179
pretty good use for a comprehension to

00:27:11,740 --> 00:27:15,850
take this for the paterno to

00:27:13,179 --> 00:27:17,320
comprehension but pilant actually has of

00:27:15,850 --> 00:27:19,539
recently will tell you this is an

00:27:17,320 --> 00:27:22,059
unnecessary comprehension you know

00:27:19,539 --> 00:27:25,720
complain about that because this is not

00:27:22,059 --> 00:27:27,880
the best way to take a list of tuples or

00:27:25,720 --> 00:27:30,190
any iterable of tuples and turn it into

00:27:27,880 --> 00:27:33,970
a dictionary and Python the easiest way

00:27:30,190 --> 00:27:37,179
to do that is the dict constructor dict

00:27:33,970 --> 00:27:40,120
is built into Python and it is specially

00:27:37,179 --> 00:27:41,950
designed for this exact task for taking

00:27:40,120 --> 00:27:43,900
something like a list of tuples and

00:27:41,950 --> 00:27:45,520
turning it into a dictionary there's no

00:27:43,900 --> 00:27:48,059
reason to reinvent the wheel by doing

00:27:45,520 --> 00:27:48,059
this ourselves

00:27:48,510 --> 00:27:53,500
similarly we've got a list comprehension

00:27:50,770 --> 00:27:55,560
here that's looping over lines in a file

00:27:53,500 --> 00:27:57,490
and putting them into a new list

00:27:55,560 --> 00:27:59,620
whenever you seal this comprehension

00:27:57,490 --> 00:28:01,870
that's written like this X for X in

00:27:59,620 --> 00:28:03,340
something that's not doing any

00:28:01,870 --> 00:28:06,700
modification and it's not doing any

00:28:03,340 --> 00:28:08,770
filtering this should be a red flag the

00:28:06,700 --> 00:28:11,290
list constructor does exactly the same

00:28:08,770 --> 00:28:14,350
thing so like the dick constructor

00:28:11,290 --> 00:28:15,940
before we can take our file pass it in

00:28:14,350 --> 00:28:18,310
to list it's gonna do the looping for us

00:28:15,940 --> 00:28:19,990
and give us the lines in our file if we

00:28:18,310 --> 00:28:24,070
can loop over something we can pass it

00:28:19,990 --> 00:28:25,470
to list I I would say the list

00:28:24,070 --> 00:28:28,330
constructor is usually the most

00:28:25,470 --> 00:28:30,460
idiomatic way the most pythonic way to

00:28:28,330 --> 00:28:31,500
build up any list rather than a list

00:28:30,460 --> 00:28:34,030
comprehension

00:28:31,500 --> 00:28:36,700
however on files in particular there is

00:28:34,030 --> 00:28:38,500
actually a red lines method some people

00:28:36,700 --> 00:28:40,030
might like this better I actually

00:28:38,500 --> 00:28:41,500
personally prefer the list constructor

00:28:40,030 --> 00:28:43,780
because it's obvious that we're actually

00:28:41,500 --> 00:28:46,000
getting a list at the end whereas red

00:28:43,780 --> 00:28:47,890
lines doesn't necessarily speak to me it

00:28:46,000 --> 00:28:53,500
doesn't say you're getting a list out of

00:28:47,890 --> 00:28:55,990
this just as there are some simpler ways

00:28:53,500 --> 00:28:57,190
to do things in a for loop for example

00:28:55,990 --> 00:28:58,690
using a comprehension there are also

00:28:57,190 --> 00:29:00,220
sometimes simpler ways and using

00:28:58,690 --> 00:29:04,120
comprehension for example the list

00:29:00,220 --> 00:29:05,830
constructor the dict constructor alright

00:29:04,120 --> 00:29:07,300
so I have a little visual review here of

00:29:05,830 --> 00:29:09,580
everything that we just gone through I

00:29:07,300 --> 00:29:11,170
hope that these slides can act as kind

00:29:09,580 --> 00:29:13,180
of a cheat sheet of sorts I'm going to

00:29:11,170 --> 00:29:16,570
run through them quickly but you can

00:29:13,180 --> 00:29:19,030
review them later so this is a for loop

00:29:16,570 --> 00:29:20,980
that loops over a list of items does an

00:29:19,030 --> 00:29:23,260
operation and it pins those items to a

00:29:20,980 --> 00:29:24,400
new list whenever you have a for loop

00:29:23,260 --> 00:29:26,340
written in this format you can

00:29:24,400 --> 00:29:28,750
copy/paste your way into a comprehension

00:29:26,340 --> 00:29:31,900
that loop is equivalent to this

00:29:28,750 --> 00:29:33,280
comprehension this for loop does the

00:29:31,900 --> 00:29:37,240
same thing as before except that we're

00:29:33,280 --> 00:29:39,160
checking a condition to filter out items

00:29:37,240 --> 00:29:42,070
in a list we're only including items it

00:29:39,160 --> 00:29:43,600
passed this condition whenever you have

00:29:42,070 --> 00:29:45,580
a for loop written like this you can

00:29:43,600 --> 00:29:48,340
copy/paste your way into this list

00:29:45,580 --> 00:29:51,010
comprehension comprehension is

00:29:48,340 --> 00:29:52,630
equivalent to that loop

00:29:51,010 --> 00:29:55,000
this is a loop that checks a condition

00:29:52,630 --> 00:29:58,480
and builds up a dictionary of key value

00:29:55,000 --> 00:30:01,690
pairs this loop is equivalent to this

00:29:58,480 --> 00:30:03,190
comprehension you can all me as almost

00:30:01,690 --> 00:30:04,450
copy-paste your way into this except

00:30:03,190 --> 00:30:06,460
those square brackets are gonna have to

00:30:04,450 --> 00:30:11,049
turn into a colon in the comprehension

00:30:06,460 --> 00:30:13,269
there as you can see this is a nested

00:30:11,049 --> 00:30:15,789
for loop that builds up a a new list

00:30:13,269 --> 00:30:17,830
we're kind of flattening a list of lists

00:30:15,789 --> 00:30:19,659
into just a list whenever you've got

00:30:17,830 --> 00:30:21,010
code of this format you can copy/paste

00:30:19,659 --> 00:30:23,710
in your new comprehension that has to

00:30:21,010 --> 00:30:25,570
four clauses inside it notice the two

00:30:23,710 --> 00:30:29,559
four clauses remain in the same order as

00:30:25,570 --> 00:30:31,360
they were in the loops if you're not

00:30:29,559 --> 00:30:33,580
filtering or changing anything in your

00:30:31,360 --> 00:30:35,049
comprehension instead of using a

00:30:33,580 --> 00:30:37,389
comprehension consider using the list

00:30:35,049 --> 00:30:38,740
constructor I find this a little bit

00:30:37,389 --> 00:30:41,049
more readable it's obvious what we're

00:30:38,740 --> 00:30:45,580
doing we're copying one list making a

00:30:41,049 --> 00:30:47,380
new list out of it this simplistic case

00:30:45,580 --> 00:30:50,799
here this is the time to use the list

00:30:47,380 --> 00:30:54,340
constructor if you're making a list and

00:30:50,799 --> 00:30:56,289
you are immediately looping over it you

00:30:54,340 --> 00:30:58,200
should also consider copy paste in your

00:30:56,289 --> 00:31:00,220
way and do a generator expression

00:30:58,200 --> 00:31:02,679
because long as you're only looping over

00:31:00,220 --> 00:31:04,409
at one set is so generate expressions

00:31:02,679 --> 00:31:09,490
they look a lot like list comprehension

00:31:04,409 --> 00:31:10,690
but they're lazy they're lazy and what

00:31:09,490 --> 00:31:12,700
that means is they don't do any work

00:31:10,690 --> 00:31:14,440
until you start looping over them and

00:31:12,700 --> 00:31:17,980
you can only loop over them once they're

00:31:14,440 --> 00:31:19,899
single-use intervals so we're getting

00:31:17,980 --> 00:31:22,000
the benefit here of not creating an

00:31:19,899 --> 00:31:26,590
unnecessary list just to loop over once

00:31:22,000 --> 00:31:29,380
and throw it away I want you to remember

00:31:26,590 --> 00:31:31,690
that you can use list comprehensions to

00:31:29,380 --> 00:31:34,899
loop over an interval while building up

00:31:31,690 --> 00:31:36,309
a new list from it and you can use set

00:31:34,899 --> 00:31:39,100
and dictionary comprehensions for

00:31:36,309 --> 00:31:42,940
turning an old interval into a new set

00:31:39,100 --> 00:31:44,830
or dictionary and if your for loop is

00:31:42,940 --> 00:31:48,010
written in the right format you can also

00:31:44,830 --> 00:31:49,539
copy paste your way from a for loop into

00:31:48,010 --> 00:31:50,830
a comprehension so you're already

00:31:49,539 --> 00:31:52,149
familiar with for loops we write your

00:31:50,830 --> 00:31:55,600
code using a for loop and then copy

00:31:52,149 --> 00:31:58,149
paste you at the comprehension if you

00:31:55,600 --> 00:32:00,340
ever find yourself making a new list

00:31:58,149 --> 00:32:02,139
just to loop over it once you should

00:32:00,340 --> 00:32:04,190
consider instead of a list comprehension

00:32:02,139 --> 00:32:07,500
using a generator

00:32:04,190 --> 00:32:09,240
and also please remember to break your

00:32:07,500 --> 00:32:11,040
comprehensions over multiple lines of

00:32:09,240 --> 00:32:16,170
code to improve the readability of your

00:32:11,040 --> 00:32:17,400
code whitespace is your friend the last

00:32:16,170 --> 00:32:19,890
thing that I have for you is the

00:32:17,400 --> 00:32:24,900
resources page where I've compiled other

00:32:19,890 --> 00:32:26,520
talks articles tutorials and whatever

00:32:24,900 --> 00:32:30,630
else I could find on comprehensions

00:32:26,520 --> 00:32:32,340
generators and related topics you can

00:32:30,630 --> 00:32:36,230
also find my contact information on that

00:32:32,340 --> 00:32:36,230

YouTube URL: https://www.youtube.com/watch?v=ei71YpmfRX4


