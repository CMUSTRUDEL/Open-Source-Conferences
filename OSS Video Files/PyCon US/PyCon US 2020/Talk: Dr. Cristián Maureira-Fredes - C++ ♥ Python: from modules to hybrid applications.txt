Title: Talk: Dr. Cristián Maureira-Fredes - C++ ♥ Python: from modules to hybrid applications
Publication date: 2021-05-05
Playlist: PyCon US 2020
Description: 
	Presented by:
Dr. Cristián Maureira-Fredes

Extending Python with C is a technique that many popular modules use for OS-level operations, serialization, performance, and more, but dealing with C code is not simple: you need to take care of memory, understand pointers, and write many lines of code for simple tasks. Luckily for you, there is C++.

Wait! Don’t be scared!

I know maybe you heard bad stories and saw complicated pieces of C code, but: are you aware of how C has been evolving?
The latest C++ standards include many goodies that smell a bit of Python, and I will show them to you.

During this talk, you will learn how to include C features into CPython modules, how to create hybrid applications**, and even to extend existent C applications with Python, making them scriptable**.

This talk is intended for developers who are familiar with Python and know basic C, but you don’t need to know any C++ to take the most out of it.




Talk resources:
- Github repository: https://github.com/cmaureir/pycon2020_cpp_python
Captions: 
	00:00:12,200 --> 00:00:17,040
hello everyone my name is Christian and

00:00:14,820 --> 00:00:19,590
welcome to my talk entitled

00:00:17,040 --> 00:00:21,720
- from Mario's two hybrid application

00:00:19,590 --> 00:00:24,570
before starting I just wanted to these

00:00:21,720 --> 00:00:27,029
thanks to Python and the PSF for giving

00:00:24,570 --> 00:00:28,470
us the speakers the opportunity to share

00:00:27,029 --> 00:00:30,960
our talks with you all in this new

00:00:28,470 --> 00:00:34,350
online format I really hope you enjoy I

00:00:30,960 --> 00:00:36,000
had prepared many little examples and we

00:00:34,350 --> 00:00:38,280
will start playing around with C Python

00:00:36,000 --> 00:00:41,220
writing our own modules and I start to

00:00:38,280 --> 00:00:43,350
integrate some features of C++ in Python

00:00:41,220 --> 00:00:45,420
modules and last but not least there is

00:00:43,350 --> 00:00:48,180
a large example that you can integrate a

00:00:45,420 --> 00:00:50,550
real C++ application with some Python

00:00:48,180 --> 00:00:52,350
scripting I really hope that you enjoy

00:00:50,550 --> 00:00:55,830
the talk and afterwards you can download

00:00:52,350 --> 00:01:02,460
the code and try it by yourself so let's

00:00:55,830 --> 00:01:04,409
start civil Express well you're thinking

00:01:02,460 --> 00:01:06,990
run conference to talk about C++

00:01:04,409 --> 00:01:10,710
I don't think so I really believe that

00:01:06,990 --> 00:01:14,190
C++ and Python has many things in common

00:01:10,710 --> 00:01:16,350
and of course a couple of difference so

00:01:14,190 --> 00:01:18,510
the similarity side you know that both

00:01:16,350 --> 00:01:20,549
languages are general purpose they are

00:01:18,510 --> 00:01:24,750
multi-paradigm of course supporting

00:01:20,549 --> 00:01:26,280
functional programming of it but also

00:01:24,750 --> 00:01:28,680
there are some difference and these are

00:01:26,280 --> 00:01:30,270
the most straightforward ones that

00:01:28,680 --> 00:01:32,190
improve course in C++ you need to

00:01:30,270 --> 00:01:34,560
compile everything is statically typed

00:01:32,190 --> 00:01:36,300
so you have types at the time of

00:01:34,560 --> 00:01:37,950
compiling but in the difference with

00:01:36,300 --> 00:01:42,420
Python that everything is interpreted

00:01:37,950 --> 00:01:45,210
and it's a dynamical language but we

00:01:42,420 --> 00:01:47,790
usually hear the argument simplice was

00:01:45,210 --> 00:01:49,650
too difficult well it is fast I don't

00:01:47,790 --> 00:01:53,700
the other side here python is so easy

00:01:49,650 --> 00:01:55,920
but kind of slow so which one do issues

00:01:53,700 --> 00:01:58,170
there that's a good thing we don't need

00:01:55,920 --> 00:02:00,390
to choose one and I will explain this

00:01:58,170 --> 00:02:02,850
thing in a bit so let's take a step back

00:02:00,390 --> 00:02:05,250
and try to analyze why python is so

00:02:02,850 --> 00:02:07,409
amazing at the moment I firmly believe

00:02:05,250 --> 00:02:10,140
that pythons nice because of two main

00:02:07,409 --> 00:02:12,420
reasons the first one is because it was

00:02:10,140 --> 00:02:14,010
heavily inspired in the ABC programming

00:02:12,420 --> 00:02:16,110
language if you are not familiar with it

00:02:14,010 --> 00:02:19,019
try to read that code with your Python

00:02:16,110 --> 00:02:20,879
knowledge you can't stand it because you

00:02:19,019 --> 00:02:22,630
can see the syntax is quite similar to

00:02:20,879 --> 00:02:24,850
what we have now

00:02:22,630 --> 00:02:26,950
and the second aspect is it because it

00:02:24,850 --> 00:02:28,420
was written see I know there are some

00:02:26,950 --> 00:02:30,310
modules that are written in Python

00:02:28,420 --> 00:02:33,910
itself inside the Python implementation

00:02:30,310 --> 00:02:37,810
but it's written in C and of course is C

00:02:33,910 --> 00:02:39,040
so using this all language that for some

00:02:37,810 --> 00:02:42,100
people will be like oh this is too

00:02:39,040 --> 00:02:45,790
complicated I really need to even learn

00:02:42,100 --> 00:02:47,560
about it we will have a free pass to

00:02:45,790 --> 00:02:50,170
other languages because many other

00:02:47,560 --> 00:02:54,250
languages are either written in C or

00:02:50,170 --> 00:02:56,110
have some nice compatibility with C so

00:02:54,250 --> 00:02:58,720
when I'm saying using C of course is

00:02:56,110 --> 00:03:00,250
kind of idea of glue right you will have

00:02:58,720 --> 00:03:02,530
some new functionalities that you would

00:03:00,250 --> 00:03:04,660
like to add to Python maybe have some

00:03:02,530 --> 00:03:06,820
small function in C that you want to

00:03:04,660 --> 00:03:09,100
expose a Python also you can have

00:03:06,820 --> 00:03:11,920
performant things I don't know doing

00:03:09,100 --> 00:03:13,900
some crazy approach a con with GPU

00:03:11,920 --> 00:03:15,850
computing for example connecting some

00:03:13,900 --> 00:03:18,640
some code that I don't know can paralyze

00:03:15,850 --> 00:03:21,750
the task of heavy tasks of processing

00:03:18,640 --> 00:03:24,250
files and so on or maybe you just have

00:03:21,750 --> 00:03:26,020
library written in C or other languages

00:03:24,250 --> 00:03:27,910
that it's C friendly and you want to

00:03:26,020 --> 00:03:30,580
expose it to path of course there are

00:03:27,910 --> 00:03:34,300
many other crazy ideas to do well using

00:03:30,580 --> 00:03:37,390
C but if you think that this is kind of

00:03:34,300 --> 00:03:38,440
weird still to use in Python just give

00:03:37,390 --> 00:03:41,680
you a couple of examples

00:03:38,440 --> 00:03:43,360
numpy if you didn't know numpy backend

00:03:41,680 --> 00:03:46,240
is mainly written in Fortran C that's

00:03:43,360 --> 00:03:49,480
quite selfish and that's why so nice if

00:03:46,240 --> 00:03:52,300
you go then to pandas pandas is relying

00:03:49,480 --> 00:03:54,160
on numpy and besides most of the

00:03:52,300 --> 00:03:56,740
functionality being in python there are

00:03:54,160 --> 00:03:58,480
a few things in c so for example the

00:03:56,740 --> 00:04:00,040
parser that they are using when they are

00:03:58,480 --> 00:04:01,930
dealing with when you are reading for

00:04:00,040 --> 00:04:04,600
example csv files that's why so fast

00:04:01,930 --> 00:04:06,910
that's why it's so efficient and you

00:04:04,600 --> 00:04:09,220
have more modern models like pi torch

00:04:06,910 --> 00:04:11,650
for example that is just exposing this

00:04:09,220 --> 00:04:13,690
huge c++ library which is torch to

00:04:11,650 --> 00:04:16,000
python plus having some new features on

00:04:13,690 --> 00:04:17,950
top of it so these are ideas are not

00:04:16,000 --> 00:04:20,620
really weird and we can see the most

00:04:17,950 --> 00:04:23,650
popular Python modules sometime have

00:04:20,620 --> 00:04:26,410
some small little folder there with some

00:04:23,650 --> 00:04:29,440
sheep files that can are providing some

00:04:26,410 --> 00:04:31,330
functionality so why C++ then because I

00:04:29,440 --> 00:04:34,120
truly believe that developers in Python

00:04:31,330 --> 00:04:36,970
can help each other in many ways

00:04:34,120 --> 00:04:38,680
and how do I know I have been the last

00:04:36,970 --> 00:04:41,740
two years working on a project called

00:04:38,680 --> 00:04:43,690
cute project and which is if you're not

00:04:41,740 --> 00:04:46,840
familiar with it is a cross-platform C++

00:04:43,690 --> 00:04:48,669
framework and where you can have UI

00:04:46,840 --> 00:04:50,650
components we can build divide for

00:04:48,669 --> 00:04:53,530
different system is closed platform

00:04:50,650 --> 00:04:55,540
because you can use the same code and

00:04:53,530 --> 00:04:57,340
run it on Windows Mac Linux and of

00:04:55,540 --> 00:05:00,729
course you have compatibility with iOS

00:04:57,340 --> 00:05:02,410
Android and so on and so forth but more

00:05:00,729 --> 00:05:04,180
particularly I have been working on a

00:05:02,410 --> 00:05:08,650
project called cute Python maybe you

00:05:04,180 --> 00:05:12,580
heard of Pi side which is a project that

00:05:08,650 --> 00:05:16,540
aims to expose this huge C++ framework

00:05:12,580 --> 00:05:17,830
to Python as a huge because a really old

00:05:16,540 --> 00:05:21,040
frame where they had been involved with

00:05:17,830 --> 00:05:23,470
years cute has it has more or less the

00:05:21,040 --> 00:05:25,419
same age as Python so there's a lot of

00:05:23,470 --> 00:05:29,830
things there that need to expose and

00:05:25,419 --> 00:05:31,479
treat and properly to Python so if

00:05:29,830 --> 00:05:33,070
you're not familiar with C++ I would

00:05:31,479 --> 00:05:34,660
like to give you now one slide that at

00:05:33,070 --> 00:05:37,270
least will help to help you to

00:05:34,660 --> 00:05:40,210
understand C++ code or at least basic

00:05:37,270 --> 00:05:42,490
components on the right you can see

00:05:40,210 --> 00:05:44,200
Python code on the Left you'll see C++

00:05:42,490 --> 00:05:46,240
code so there you have it some

00:05:44,200 --> 00:05:48,310
difference with the comments and the

00:05:46,240 --> 00:05:52,060
major difference there is that you need

00:05:48,310 --> 00:05:53,950
to specify types for each line and

00:05:52,060 --> 00:05:56,620
variable that you have in C++ so you

00:05:53,950 --> 00:05:59,530
have int float strings vectors events

00:05:56,620 --> 00:06:01,840
which is similar to lists the same idea

00:05:59,530 --> 00:06:03,880
with functions instead of braces in C++

00:06:01,840 --> 00:06:05,410
you have the color and in Python but you

00:06:03,880 --> 00:06:07,720
need to have the DEF but you need to

00:06:05,410 --> 00:06:10,450
specify the return type which in cases

00:06:07,720 --> 00:06:12,310
is integer if you're familiar with type

00:06:10,450 --> 00:06:14,860
annotation maybe you this is not so

00:06:12,310 --> 00:06:17,050
complicated for you to understand and

00:06:14,860 --> 00:06:20,289
the main that when we mix in Python with

00:06:17,050 --> 00:06:22,720
names equals main it's mandatory in C++

00:06:20,289 --> 00:06:24,460
and you need to have it and you can have

00:06:22,720 --> 00:06:28,050
there the call of the same function odd

00:06:24,460 --> 00:06:31,360
and printing something out as a result

00:06:28,050 --> 00:06:33,220
the xx read the extra step of course is

00:06:31,360 --> 00:06:36,160
when the Python you execute it directly

00:06:33,220 --> 00:06:39,250
in C++ you need to compile first and

00:06:36,160 --> 00:06:42,550
then execute the binary so that's it

00:06:39,250 --> 00:06:45,190
you already are now prepared to read any

00:06:42,550 --> 00:06:47,060
C++ code understand in the sand is not

00:06:45,190 --> 00:06:48,500
the whole language features but

00:06:47,060 --> 00:06:50,840
at least now you are more familiar with

00:06:48,500 --> 00:06:53,389
it if you didn't know that before and

00:06:50,840 --> 00:06:54,950
you have some grasp of the things that

00:06:53,389 --> 00:06:58,790
you will be approaching and I will be

00:06:54,950 --> 00:07:01,790
shown here C++ has been evolving since

00:06:58,790 --> 00:07:05,360
any programming language and in the

00:07:01,790 --> 00:07:07,970
latest releases all these are air every

00:07:05,360 --> 00:07:10,490
every three years there have been many

00:07:07,970 --> 00:07:12,830
features that on one side are really

00:07:10,490 --> 00:07:13,310
useful for C+ possess and the other side

00:07:12,830 --> 00:07:15,620
also

00:07:13,310 --> 00:07:17,389
they look really pythonic or at least

00:07:15,620 --> 00:07:21,590
they follow the same philosophy of

00:07:17,389 --> 00:07:23,330
making things simpler for example C++ 11

00:07:21,590 --> 00:07:25,190
you have the auto type which is kind of

00:07:23,330 --> 00:07:26,840
when you are compiling it in fear they

00:07:25,190 --> 00:07:29,389
say okay the first one is a float and

00:07:26,840 --> 00:07:32,540
the second is a string which is kind of

00:07:29,389 --> 00:07:34,790
Handy tuples you can create tuples and

00:07:32,540 --> 00:07:35,360
also unpack tuples in different

00:07:34,790 --> 00:07:38,450
variables

00:07:35,360 --> 00:07:40,370
they of course Python dictionaries are

00:07:38,450 --> 00:07:42,680
quite useful structure you can also have

00:07:40,370 --> 00:07:44,510
an in C++ is another map I know it's

00:07:42,680 --> 00:07:47,540
more verbose you need to specify more

00:07:44,510 --> 00:07:49,160
types but it is still possible to do and

00:07:47,540 --> 00:07:51,830
you can get the values of course using

00:07:49,160 --> 00:07:54,919
the different keys there and another

00:07:51,830 --> 00:07:56,930
auto value and lambdas you can put

00:07:54,919 --> 00:08:00,620
lambdas everywhere also now with these

00:07:56,930 --> 00:08:02,720
empty braces and syntax and you can put

00:08:00,620 --> 00:08:05,330
any functions there here and there to

00:08:02,720 --> 00:08:07,910
improve your your code so let's go a

00:08:05,330 --> 00:08:10,880
little bit further to C++ 14 and you can

00:08:07,910 --> 00:08:12,500
now use Auto as a return type there you

00:08:10,880 --> 00:08:15,140
can define also some bar variable

00:08:12,500 --> 00:08:18,410
templates like in this case I can use t

00:08:15,140 --> 00:08:20,690
as an int or float or double instead of

00:08:18,410 --> 00:08:24,020
to see a much precision that I need for

00:08:20,690 --> 00:08:27,080
my p value you can also have binary

00:08:24,020 --> 00:08:28,910
literals and even digits separators I

00:08:27,080 --> 00:08:32,120
don't know - you can use underscore here

00:08:28,910 --> 00:08:35,599
you can use the single quote in C++ 17

00:08:32,120 --> 00:08:37,370
you have the options to return more than

00:08:35,599 --> 00:08:41,990
one value like for example here on a par

00:08:37,370 --> 00:08:44,180
and a pair and unpack this values into

00:08:41,990 --> 00:08:45,830
two separate valuable X & Y which is

00:08:44,180 --> 00:08:49,220
kind of neat nice and also you have a

00:08:45,830 --> 00:08:51,380
new path in Python dictionaries again

00:08:49,220 --> 00:08:53,360
the same way that we treat them and

00:08:51,380 --> 00:08:55,970
which is really handy like for key value

00:08:53,360 --> 00:08:57,760
in dictionary items you can have a

00:08:55,970 --> 00:09:01,750
similar approach here

00:08:57,760 --> 00:09:04,710
and they last standard C++ 20 has two

00:09:01,750 --> 00:09:08,050
really nice features that are they like

00:09:04,710 --> 00:09:09,910
the first one is the modules you can see

00:09:08,050 --> 00:09:11,710
on the left side you are declaring a

00:09:09,910 --> 00:09:14,560
module in a file and export in this

00:09:11,710 --> 00:09:17,680
module called simple and export and some

00:09:14,560 --> 00:09:20,230
functions in this case hello for using

00:09:17,680 --> 00:09:22,510
the module then you need to import

00:09:20,230 --> 00:09:24,340
simple it sounds familiar this is really

00:09:22,510 --> 00:09:25,960
a Python in my opinion and then in the

00:09:24,340 --> 00:09:28,780
main you can just call the function that

00:09:25,960 --> 00:09:31,030
we have there the second feature that I

00:09:28,780 --> 00:09:33,340
want to highlight is our ranges you can

00:09:31,030 --> 00:09:36,040
declare first and integrase ranges you

00:09:33,340 --> 00:09:38,140
know simple number sequence two lambda

00:09:36,040 --> 00:09:40,420
functions to determinate if something in

00:09:38,140 --> 00:09:42,640
numbers even and another one to elevate

00:09:40,420 --> 00:09:45,010
number to the power of two and you can

00:09:42,640 --> 00:09:47,770
start to connect all these different

00:09:45,010 --> 00:09:49,330
functions to your vector of integrals so

00:09:47,770 --> 00:09:52,000
you can see there in the fourth you are

00:09:49,330 --> 00:09:54,880
iterating int but then you're saying but

00:09:52,000 --> 00:09:56,770
filter the numbers only the evens and

00:09:54,880 --> 00:09:59,500
then with the remainings filter that

00:09:56,770 --> 00:10:01,990
transform it and get the square of those

00:09:59,500 --> 00:10:04,240
numbers which is really cool I haven't

00:10:01,990 --> 00:10:06,640
used these features in production yet

00:10:04,240 --> 00:10:10,660
but I am really looking forward to to

00:10:06,640 --> 00:10:13,120
have some project that uses the

00:10:10,660 --> 00:10:14,770
operators you saw all the amazing things

00:10:13,120 --> 00:10:17,200
with the waters operator that was

00:10:14,770 --> 00:10:19,660
introduced in Python trade and believe

00:10:17,200 --> 00:10:21,240
it or not also in C++ 20 there is a new

00:10:19,660 --> 00:10:24,490
player kind of funny

00:10:21,240 --> 00:10:26,020
it's a spaceship operator I will not go

00:10:24,490 --> 00:10:28,360
into details here but it's just a

00:10:26,020 --> 00:10:30,370
comparison between two objects which is

00:10:28,360 --> 00:10:34,360
kind of nice see even to language it has

00:10:30,370 --> 00:10:36,280
the same new fancy operators okay but

00:10:34,360 --> 00:10:37,720
enough for the slides I would like to

00:10:36,280 --> 00:10:40,750
jump now into the terminal and show you

00:10:37,720 --> 00:10:42,370
some code and first of all and we will

00:10:40,750 --> 00:10:45,250
have two different scenario the first

00:10:42,370 --> 00:10:46,600
one is C++ help in Python for this I

00:10:45,250 --> 00:10:49,000
will have to show you an awesome C

00:10:46,600 --> 00:10:50,860
Python code just to get familiar with it

00:10:49,000 --> 00:10:53,140
and two little implementations of a

00:10:50,860 --> 00:10:57,160
couple of functions and for the second I

00:10:53,140 --> 00:10:58,000
will not spoil it yet so let's open at

00:10:57,160 --> 00:11:00,310
our own now

00:10:58,000 --> 00:11:02,400
I will just put it here just leave it

00:11:00,310 --> 00:11:02,400
aside

00:11:04,560 --> 00:11:09,670
you will have access to this repository

00:11:06,850 --> 00:11:11,980
of course so please download and get the

00:11:09,670 --> 00:11:16,779
code and try it by yourself we're going

00:11:11,980 --> 00:11:18,070
to code activate in my environment now

00:11:16,779 --> 00:11:20,680
let's go to the survival

00:11:18,070 --> 00:11:23,790
so what so start writing your own module

00:11:20,680 --> 00:11:26,410
in C Python you need a couple of

00:11:23,790 --> 00:11:28,209
instructors so just to give you an idea

00:11:26,410 --> 00:11:30,040
what you will need don't worry about it

00:11:28,209 --> 00:11:33,699
will not write too much code here you

00:11:30,040 --> 00:11:36,360
will need to model initialization you

00:11:33,699 --> 00:11:40,440
will need to have before that a module

00:11:36,360 --> 00:11:47,139
declaration before you will have

00:11:40,440 --> 00:11:48,399
functions decorations and here you will

00:11:47,139 --> 00:11:50,740
have the implementation of your

00:11:48,399 --> 00:11:53,019
functions like let's say you want to

00:11:50,740 --> 00:11:54,459
implement a function forget point if

00:11:53,019 --> 00:12:00,089
you're not familiar with C Python don't

00:11:54,459 --> 00:12:06,070
worry about it and then we have static

00:12:00,089 --> 00:12:09,310
no you do not put it documents there but

00:12:06,070 --> 00:12:13,589
you have a function stand then a will

00:12:09,310 --> 00:12:13,589
return like first of all I have a

00:12:13,860 --> 00:12:25,140
message and then I will turn it and then

00:12:22,600 --> 00:12:29,140
this function hello I will put it here

00:12:25,140 --> 00:12:31,029
somehow and I will keep this in in some

00:12:29,140 --> 00:12:33,130
variable and then in the model

00:12:31,029 --> 00:12:37,089
declaration I will say a the functions

00:12:33,130 --> 00:12:41,620
use affair and then a model declaration

00:12:37,089 --> 00:12:44,470
it sounds simple listen and that's why

00:12:41,620 --> 00:12:46,569
it is called simple as you can see here

00:12:44,470 --> 00:12:49,690
you have the module until ization just

00:12:46,569 --> 00:12:51,490
one line inside there in PI module

00:12:49,690 --> 00:12:54,160
create here you have the moral

00:12:51,490 --> 00:12:55,390
definition take these structures as

00:12:54,160 --> 00:12:57,970
boxes that you need to fill with

00:12:55,390 --> 00:12:59,980
different values have the name the dog

00:12:57,970 --> 00:13:03,130
and the methods that you want to use Oh

00:12:59,980 --> 00:13:05,470
what is simple funks you go up simple

00:13:03,130 --> 00:13:08,709
facts simplify yet another box to fill a

00:13:05,470 --> 00:13:09,910
name of a function what is the C

00:13:08,709 --> 00:13:11,560
function that I we need to call

00:13:09,910 --> 00:13:12,690
underneath in this case a simple hello

00:13:11,560 --> 00:13:14,639
and the

00:13:12,690 --> 00:13:17,699
function as argument and some

00:13:14,639 --> 00:13:18,870
documentation if you see here this is

00:13:17,699 --> 00:13:22,050
the same thing that we already

00:13:18,870 --> 00:13:24,990
implemented and that would be hit this

00:13:22,050 --> 00:13:26,880
will allow you to create of course you

00:13:24,990 --> 00:13:30,660
will need two lines of us set up there

00:13:26,880 --> 00:13:32,250
like just as a this is the extension and

00:13:30,660 --> 00:13:38,070
you will be able to run something like

00:13:32,250 --> 00:13:40,709
this so there install time to execute

00:13:38,070 --> 00:13:43,769
and there you have it your first and C

00:13:40,709 --> 00:13:47,130
function written a the C function that

00:13:43,769 --> 00:13:48,779
exists supposed to Python so I thought

00:13:47,130 --> 00:13:52,160
okay what else can I do

00:13:48,779 --> 00:13:55,910
once I was working with some data and

00:13:52,160 --> 00:14:01,440
managing many files so I did the typical

00:13:55,910 --> 00:14:03,930
blow of the globe of everything but I

00:14:01,440 --> 00:14:05,760
did it recursively and if and it took a

00:14:03,930 --> 00:14:08,399
lot of time and I thought maybe I can

00:14:05,760 --> 00:14:11,670
have something faster to implement so I

00:14:08,399 --> 00:14:14,220
thought what if I don't go to C to

00:14:11,670 --> 00:14:17,370
module and write my own C extension

00:14:14,220 --> 00:14:24,810
using a nice picture from C++ source

00:14:17,370 --> 00:14:26,730
code and so this is a really cool thing

00:14:24,810 --> 00:14:29,750
in the standard library and you can see

00:14:26,730 --> 00:14:31,740
it here I am using here right now

00:14:29,750 --> 00:14:34,199
destructor this is the same thing you

00:14:31,740 --> 00:14:36,480
saw while your initialization the finish

00:14:34,199 --> 00:14:40,519
and the same with the functions and you

00:14:36,480 --> 00:14:40,519
have to wonder is called fast clock blow

00:14:40,579 --> 00:14:46,050
this is their function forget about

00:14:44,040 --> 00:14:47,339
these lines these are just parsing the

00:14:46,050 --> 00:14:49,079
arguments because of course I will

00:14:47,339 --> 00:14:51,360
receive an expression and then an option

00:14:49,079 --> 00:14:53,639
that is if it recursive or not I will

00:14:51,360 --> 00:14:55,440
create an empty list I will just this

00:14:53,639 --> 00:14:57,990
nice iterator that I told you in a

00:14:55,440 --> 00:15:00,029
recursive way or in a non recursive way

00:14:57,990 --> 00:15:03,720
and I will start a pendent values on my

00:15:00,029 --> 00:15:05,970
list that's it nothing else you can even

00:15:03,720 --> 00:15:07,920
copy similar implementation of this

00:15:05,970 --> 00:15:12,750
argument parsing you need to worry much

00:15:07,920 --> 00:15:14,639
about it enough then I thought okay I

00:15:12,750 --> 00:15:16,470
will just wanted to see you can see

00:15:14,639 --> 00:15:20,130
there the timing for a non recursive of

00:15:16,470 --> 00:15:22,150
I think of directory with 1000 files and

00:15:20,130 --> 00:15:25,030
then inside each file has one

00:15:22,150 --> 00:15:28,000
more so you can see the values there

00:15:25,030 --> 00:15:30,670
there in a non recursive way fast clock

00:15:28,000 --> 00:15:33,070
is really fast in a recursive way also

00:15:30,670 --> 00:15:35,650
still very less this is not really a

00:15:33,070 --> 00:15:38,470
fair comparison of course drop-in pad

00:15:35,650 --> 00:15:39,850
live are written CSR in Python and this

00:15:38,470 --> 00:15:42,430
implementation is written in simple of

00:15:39,850 --> 00:15:44,470
so there is some performance gain there

00:15:42,430 --> 00:15:47,170
just for changing the language but I

00:15:44,470 --> 00:15:48,850
just wanted to show you that only with a

00:15:47,170 --> 00:15:50,140
couple of lines you can expose this

00:15:48,850 --> 00:15:53,100
little difunctional I didn't see

00:15:50,140 --> 00:15:55,750
Plattsburgh and create your own model

00:15:53,100 --> 00:15:57,940
this is really cool right so I thought

00:15:55,750 --> 00:15:59,380
okay let's continue this was looking

00:15:57,940 --> 00:16:01,300
good so I thought I will do the same

00:15:59,380 --> 00:16:03,430
with mathematical functions same

00:16:01,300 --> 00:16:07,720
structure as before this should be not

00:16:03,430 --> 00:16:09,760
different for you I thought okay I will

00:16:07,720 --> 00:16:13,600
implement my own square root function

00:16:09,760 --> 00:16:15,970
that accept a list of numbers here I

00:16:13,600 --> 00:16:18,130
thought okay only a simple integer I

00:16:15,970 --> 00:16:20,710
create a list and then I have the main

00:16:18,130 --> 00:16:23,710
loop where I kind of get the item from

00:16:20,710 --> 00:16:27,280
the list transforming to double certain

00:16:23,710 --> 00:16:29,830
in my list and that's it simple but then

00:16:27,280 --> 00:16:31,720
I thought maybe I can use a c-plus

00:16:29,830 --> 00:16:36,370
feature and there is a nice function

00:16:31,720 --> 00:16:39,940
called transform transform will graph

00:16:36,370 --> 00:16:41,980
the elements of a vector and put it into

00:16:39,940 --> 00:16:43,720
another vector with a certain lambda

00:16:41,980 --> 00:16:46,630
function theater I'm using to transform

00:16:43,720 --> 00:16:49,360
the values since I'm saying civil space

00:16:46,630 --> 00:16:51,550
vector I needed to copy the Python as

00:16:49,360 --> 00:16:55,810
you can see here the the Python lists

00:16:51,550 --> 00:16:57,220
under back to first and afterwards and I

00:16:55,810 --> 00:17:00,970
am allowing the threads to get some

00:16:57,220 --> 00:17:03,730
maybe some performance okay that's it

00:17:00,970 --> 00:17:06,130
and all the execution I thought okay

00:17:03,730 --> 00:17:09,180
easy I will get a list the last one was

00:17:06,130 --> 00:17:12,459
the best function so using the map

00:17:09,180 --> 00:17:15,280
square root function there you see okay

00:17:12,459 --> 00:17:19,420
2064 and then you have here this

00:17:15,280 --> 00:17:23,980
implementation is 1.73 okay turn this

00:17:19,420 --> 00:17:26,709
one to points it what you can see why

00:17:23,980 --> 00:17:29,710
this is even better the other one

00:17:26,709 --> 00:17:32,350
without the simplest path you can see

00:17:29,710 --> 00:17:34,450
that here the problem was that I was

00:17:32,350 --> 00:17:35,320
transforming this Python object into a

00:17:34,450 --> 00:17:37,480
C++ back

00:17:35,320 --> 00:17:40,240
and that was using a lot of time the

00:17:37,480 --> 00:17:42,820
process itself the transform take this

00:17:40,240 --> 00:17:45,250
compared to this time in microseconds

00:17:42,820 --> 00:17:47,860
it's way better but since you are also

00:17:45,250 --> 00:17:50,860
copying things around it was really not

00:17:47,860 --> 00:17:53,230
worth so in this case it didn't work as

00:17:50,860 --> 00:17:55,690
we planned but at least we know that

00:17:53,230 --> 00:17:59,800
there were some external cost of copying

00:17:55,690 --> 00:18:00,640
things around okay John get to the press

00:17:59,800 --> 00:18:02,470
with those results

00:18:00,640 --> 00:18:06,670
I promise you that now there are cooler

00:18:02,470 --> 00:18:09,280
examples so we saw the first scenario I

00:18:06,670 --> 00:18:11,880
wrote all the code by myself in sympathy

00:18:09,280 --> 00:18:14,350
but is that the only way no it's not

00:18:11,880 --> 00:18:18,730
there are many many tools that allows

00:18:14,350 --> 00:18:21,370
you to run expose a whole C++ project

00:18:18,730 --> 00:18:24,070
into Python and for that I'm sure for

00:18:21,370 --> 00:18:25,900
the self-promotion but on the same topic

00:18:24,070 --> 00:18:29,830
of interaction with C++ and Python and

00:18:25,900 --> 00:18:32,260
gave a target your Python to review many

00:18:29,830 --> 00:18:34,180
many of those tools and how easy they

00:18:32,260 --> 00:18:37,090
are to use it you can find here in the

00:18:34,180 --> 00:18:40,420
material even the also there is a report

00:18:37,090 --> 00:18:42,190
there with how to use a simple library

00:18:40,420 --> 00:18:43,810
and how to expose it with the different

00:18:42,190 --> 00:18:45,820
tools that are out there so I if you're

00:18:43,810 --> 00:18:48,160
interesting in generating automatic

00:18:45,820 --> 00:18:51,100
bindings from C++ receive projects I

00:18:48,160 --> 00:18:53,050
recommend you to keep a look at it ok

00:18:51,100 --> 00:18:55,720
enough with the self-promotion this is

00:18:53,050 --> 00:18:57,670
the most interesting scenario we still

00:18:55,720 --> 00:19:00,310
have some time and I was rushing because

00:18:57,670 --> 00:19:01,750
I really wanted for you to enjoy these

00:19:00,310 --> 00:19:04,060
last bits because these examples are

00:19:01,750 --> 00:19:06,460
really really cool this is the other

00:19:04,060 --> 00:19:08,110
case now it's not simple especially up

00:19:06,460 --> 00:19:08,800
in Python but Python here plain to

00:19:08,110 --> 00:19:12,790
blacksmith

00:19:08,800 --> 00:19:16,770
we will do two things the first one will

00:19:12,790 --> 00:19:21,580
be a simple example how to embed a

00:19:16,770 --> 00:19:23,500
Python interpreter inside a C++ code it

00:19:21,580 --> 00:19:28,180
sounds really complicated it's not and

00:19:23,500 --> 00:19:30,310
the second one will be to graph a

00:19:28,180 --> 00:19:33,270
function in desktop application

00:19:30,310 --> 00:19:36,040
graphical application written in C++ and

00:19:33,270 --> 00:19:37,810
embed Python on it and trying to see if

00:19:36,040 --> 00:19:42,340
we can get no new functionalities from

00:19:37,810 --> 00:19:46,270
there from the from the tool ok

00:19:42,340 --> 00:19:49,290
for debating believe it or not you just

00:19:46,270 --> 00:19:53,740
need a couple of things first of all you

00:19:49,290 --> 00:19:59,050
can put the Python headers second in

00:19:53,740 --> 00:20:02,680
your main is illegal unless it is asian

00:19:59,050 --> 00:20:10,930
of Python the same way you will have

00:20:02,680 --> 00:20:13,420
that finalized and that's it it's

00:20:10,930 --> 00:20:16,630
embedded theory and here if your desire

00:20:13,420 --> 00:20:23,850
if I can try simple string and then run

00:20:16,630 --> 00:20:27,730
something out like Hello don't give me

00:20:23,850 --> 00:20:30,010
these kills the fire that perfectly same

00:20:27,730 --> 00:20:33,550
idea I'm just setting now the the name

00:20:30,010 --> 00:20:34,170
of the project but then once I compile

00:20:33,550 --> 00:20:36,970
this

00:20:34,170 --> 00:20:40,060
then I have it and if you don't believe

00:20:36,970 --> 00:20:42,360
me here you can see how the live Python

00:20:40,060 --> 00:20:45,480
is linked to this binary code name

00:20:42,360 --> 00:20:47,890
besides all the other C and C++ things

00:20:45,480 --> 00:20:50,350
for building this project is not the

00:20:47,890 --> 00:20:54,040
setup that pi i gives a small cynic file

00:20:50,350 --> 00:20:55,720
which is also is quite a simple a couple

00:20:54,040 --> 00:20:57,550
of lines that you can copy around see

00:20:55,720 --> 00:21:00,720
but it is just the idea of adding to the

00:20:57,550 --> 00:21:06,370
linking process the python libraries

00:21:00,720 --> 00:21:08,890
that would be it so it isn't mine then

00:21:06,370 --> 00:21:11,350
you know that comparing python in any

00:21:08,890 --> 00:21:13,660
c++ existing application will be really

00:21:11,350 --> 00:21:18,190
really cool and easy to do so let's jump

00:21:13,660 --> 00:21:20,620
in this is a i think that one of the

00:21:18,190 --> 00:21:23,260
most important examples that we have and

00:21:20,620 --> 00:21:25,450
the good for Python project which is

00:21:23,260 --> 00:21:28,390
embedding the interpreter an existing

00:21:25,450 --> 00:21:30,910
kit supply specification so here we have

00:21:28,390 --> 00:21:33,070
many files don't get scared I want to

00:21:30,910 --> 00:21:36,030
first highlight it like how this thing

00:21:33,070 --> 00:21:39,430
with cute works so I have here an empty

00:21:36,030 --> 00:21:41,230
window in her example just to show you

00:21:39,430 --> 00:21:44,080
more or less how the Python code blocks

00:21:41,230 --> 00:21:46,060
you will import some stuff whatever you

00:21:44,080 --> 00:21:48,190
will declared an application create a

00:21:46,060 --> 00:21:50,350
window that maybe some components of the

00:21:48,190 --> 00:21:51,190
window show the window and start the

00:21:50,350 --> 00:21:53,440
application

00:21:51,190 --> 00:21:54,160
and with the loop that will be running

00:21:53,440 --> 00:21:58,770
all the time

00:21:54,160 --> 00:22:01,720
simple enough right so you have the

00:21:58,770 --> 00:22:03,670
here's our application her beautiful

00:22:01,720 --> 00:22:07,630
applications name hello message is there

00:22:03,670 --> 00:22:09,070
in the same way you can add maybe put

00:22:07,630 --> 00:22:13,450
everything inside a class to have

00:22:09,070 --> 00:22:15,850
something more understandable as you can

00:22:13,450 --> 00:22:19,450
see here same idea I create application

00:22:15,850 --> 00:22:21,250
window to some precise and show in this

00:22:19,450 --> 00:22:24,190
case I'm using a class to do everything

00:22:21,250 --> 00:22:26,080
and I am adding a button and then I'm

00:22:24,190 --> 00:22:35,160
connecting the bottom action of clicking

00:22:26,080 --> 00:22:37,510
the button to a print so here I have it

00:22:35,160 --> 00:22:40,510
or a beautiful application every time

00:22:37,510 --> 00:22:42,430
that I click I have to click this okay

00:22:40,510 --> 00:22:45,130
so this is this common instructor to

00:22:42,430 --> 00:22:48,850
writing any cute application but in C++

00:22:45,130 --> 00:22:53,890
and Python so now that we know that we

00:22:48,850 --> 00:22:57,070
have here a huge application that we

00:22:53,890 --> 00:23:00,490
will present this is the main visible as

00:22:57,070 --> 00:23:02,380
plus quite similar to what you saw you

00:23:00,490 --> 00:23:04,360
have okay this is nothing new to you

00:23:02,380 --> 00:23:06,940
that now we are proficient in syllabus

00:23:04,360 --> 00:23:09,340
you have your main and application a

00:23:06,940 --> 00:23:11,980
window you are showing the window and

00:23:09,340 --> 00:23:18,220
running the application everything is

00:23:11,980 --> 00:23:21,070
fine so far the main window class again

00:23:18,220 --> 00:23:22,660
don't be scare about all these macros it

00:23:21,070 --> 00:23:25,960
will be a class that if we have a

00:23:22,660 --> 00:23:30,580
constructor some functions more

00:23:25,960 --> 00:23:32,770
functions and some attributes okay so

00:23:30,580 --> 00:23:36,610
how the thing works

00:23:32,770 --> 00:23:41,050
first I will hide something that I

00:23:36,610 --> 00:23:44,800
wanted to show you before so you are not

00:23:41,050 --> 00:23:47,620
so I execute this application as you can

00:23:44,800 --> 00:23:48,760
see here really simple application one

00:23:47,620 --> 00:23:50,800
of the first thing that you notice is

00:23:48,760 --> 00:23:53,260
that okay there's wrong button imply on

00:23:50,800 --> 00:23:56,500
the right man this gets updated and here

00:23:53,260 --> 00:23:59,020
I'm executing Python code so there is

00:23:56,500 --> 00:24:01,150
another implementation to an enable the

00:23:59,020 --> 00:24:02,980
option to write a execute Python code

00:24:01,150 --> 00:24:04,720
that is inside here one of the first

00:24:02,980 --> 00:24:06,820
thing that you can see there is that you

00:24:04,720 --> 00:24:10,030
cannot see anything within this kind of

00:24:06,820 --> 00:24:14,410
small right so let's go on in Python

00:24:10,030 --> 00:24:16,660
code we can change the fonts in

00:24:14,410 --> 00:24:21,370
different ways I will just start it

00:24:16,660 --> 00:24:24,460
since this faster I will use font size

00:24:21,370 --> 00:24:28,270
34 there you have it

00:24:24,460 --> 00:24:31,000
I from Python I am changing the behavior

00:24:28,270 --> 00:24:33,040
and the state of the C++ application

00:24:31,000 --> 00:24:35,950
that is already running this is being

00:24:33,040 --> 00:24:39,190
done because we are exposing the C++

00:24:35,950 --> 00:24:41,740
object main window to PI talent and we

00:24:39,190 --> 00:24:44,710
can access it and interact with it so

00:24:41,740 --> 00:24:47,890
then you can think if I can have access

00:24:44,710 --> 00:24:50,950
to this I can do many other fun things

00:24:47,890 --> 00:24:53,620
right so what I wanted to do since we

00:24:50,950 --> 00:24:56,590
just changed the color is that we can

00:24:53,620 --> 00:24:59,380
maybe since this is a little bit ugly in

00:24:56,590 --> 00:25:03,130
interface create somehow has the idea of

00:24:59,380 --> 00:25:05,620
a dark mode of the of the interface so

00:25:03,130 --> 00:25:09,250
for this and we can for example this use

00:25:05,620 --> 00:25:13,840
the same solitude and let's say let's

00:25:09,250 --> 00:25:19,510
keep their font in 20 we will say that

00:25:13,840 --> 00:25:23,590
the background color is a dark grey for

00:25:19,510 --> 00:25:29,580
example will still say a 87 and let's

00:25:23,590 --> 00:25:32,380
say that a color black well in this case

00:25:29,580 --> 00:25:35,860
this is not the proper color we will

00:25:32,380 --> 00:25:40,929
have here okay no let's use this color

00:25:35,860 --> 00:25:46,610
so 31 36

00:25:40,929 --> 00:25:50,360
and three I was creating like a light

00:25:46,610 --> 00:25:55,190
Mountain but now and guess what

00:25:50,360 --> 00:25:57,230
so in this case we will have the option

00:25:55,190 --> 00:26:00,700
hopefully to change some color let's see

00:25:57,230 --> 00:26:03,830
who yes so this is a dark moment already

00:26:00,700 --> 00:26:06,559
but the problem is that okay I keep

00:26:03,830 --> 00:26:09,770
running it and I need to remove it now

00:26:06,559 --> 00:26:11,390
well and then I cannot go back right so

00:26:09,770 --> 00:26:13,460
maybe we can implement something a

00:26:11,390 --> 00:26:15,440
little bit more smarter maybe we can at

00:26:13,460 --> 00:26:18,620
the bottom here there's called dark mode

00:26:15,440 --> 00:26:22,580
and that's some functionalities right so

00:26:18,620 --> 00:26:24,710
I also Beverly you plug-in that kind of

00:26:22,580 --> 00:26:26,720
follows the same idea we will do the

00:26:24,710 --> 00:26:29,000
imports will declare a global variable

00:26:26,720 --> 00:26:31,370
there and a function that it will you

00:26:29,000 --> 00:26:33,830
know see if it's dark mode or not and

00:26:31,370 --> 00:26:40,010
change the colors and stuff but the most

00:26:33,830 --> 00:26:42,559
important part is States parts here we

00:26:40,010 --> 00:26:44,809
are getting the toolbar with the buttons

00:26:42,559 --> 00:26:47,830
that you got from the main window we are

00:26:44,809 --> 00:26:50,120
adding a new action called dark mode

00:26:47,830 --> 00:26:51,980
creating one we are adding it to the

00:26:50,120 --> 00:26:54,760
toolbar and then we are saying every

00:26:51,980 --> 00:27:00,549
time that someone click it or trigger

00:26:54,760 --> 00:27:02,780
let's call this function so and I

00:27:00,549 --> 00:27:05,480
implement it and for you for you to play

00:27:02,780 --> 00:27:08,330
around with it that every time we have

00:27:05,480 --> 00:27:12,350
plugins directory there you will be

00:27:08,330 --> 00:27:16,549
automatically loaded so let's see

00:27:12,350 --> 00:27:18,290
plug-in load dark mode dot pi ok and

00:27:16,549 --> 00:27:22,309
then we have our interface and we have

00:27:18,290 --> 00:27:24,049
our button thing easy enough so imagine

00:27:22,309 --> 00:27:26,270
all the possibilities you can have so

00:27:24,049 --> 00:27:28,190
you can maybe if you know some C++ piece

00:27:26,270 --> 00:27:29,809
of software that needs a little bit

00:27:28,190 --> 00:27:31,669
improvement maybe you can implement a

00:27:29,809 --> 00:27:37,760
plugin system for existing supplies

00:27:31,669 --> 00:27:39,710
specification ok what now first of all I

00:27:37,760 --> 00:27:41,690
hope that after this talk you are not

00:27:39,710 --> 00:27:44,030
afraid of C++ anymore there are many

00:27:41,690 --> 00:27:46,400
amazing features that have a little bit

00:27:44,030 --> 00:27:47,390
of Python flavor on it and I am really

00:27:46,400 --> 00:27:49,669
happy about it

00:27:47,390 --> 00:27:51,320
also keep an eye on what is happening in

00:27:49,669 --> 00:27:52,230
other languages even if you don't know

00:27:51,320 --> 00:27:54,899
that language

00:27:52,230 --> 00:27:56,940
read the updates read the news and see

00:27:54,899 --> 00:28:00,929
which kind of features we can maybe

00:27:56,940 --> 00:28:02,760
bring to Python because of course we

00:28:00,929 --> 00:28:04,919
need to start ringing with all these new

00:28:02,760 --> 00:28:06,029
things to Python to make it even better

00:28:04,919 --> 00:28:09,210
language right

00:28:06,029 --> 00:28:11,399
so unfortunately you don't need to pick

00:28:09,210 --> 00:28:12,990
only one language here you can start

00:28:11,399 --> 00:28:15,659
combining whatever you want in your

00:28:12,990 --> 00:28:16,799
stack and hopefully after this talk you

00:28:15,659 --> 00:28:19,860
will be more aware of what is happening

00:28:16,799 --> 00:28:22,200
in other languages and help us I hope

00:28:19,860 --> 00:28:25,590
everyone even yourself to improve what

00:28:22,200 --> 00:28:27,149
Python is today so I really hope that

00:28:25,590 --> 00:28:29,130
you enjoy this thing you're not too

00:28:27,149 --> 00:28:31,139
afraid of C++ you know that we can

00:28:29,130 --> 00:28:34,590
interact with this in different many

00:28:31,139 --> 00:28:36,899
ways so if you're interested on the

00:28:34,590 --> 00:28:39,000
topic send me a message you can find me

00:28:36,899 --> 00:28:41,429
there we can change some emails and

00:28:39,000 --> 00:28:42,929
stuff and I am really looking forward to

00:28:41,429 --> 00:28:45,539
hear what do you think about C++

00:28:42,929 --> 00:28:47,250
implementation that may be the latest

00:28:45,539 --> 00:28:49,769
features are kind of nice and you want

00:28:47,250 --> 00:28:51,450
to give it a try I'm totally up for a

00:28:49,769 --> 00:28:53,429
start helping you on learning and

00:28:51,450 --> 00:28:57,750
jumping into writing your own C++

00:28:53,429 --> 00:29:00,299
modules and of course if at some point

00:28:57,750 --> 00:29:02,190
you are in Berlin please let me know we

00:29:00,299 --> 00:29:04,049
can have a beer or two we have an

00:29:02,190 --> 00:29:06,000
amazing Python community here with many

00:29:04,049 --> 00:29:07,559
groups and maybe you can have a beer

00:29:06,000 --> 00:29:10,590
while enjoying one of the meetups or

00:29:07,559 --> 00:29:12,840
many groups here in Berlin so hopefully

00:29:10,590 --> 00:29:16,399
you can have a nice morning afternoon or

00:29:12,840 --> 00:29:16,399

YouTube URL: https://www.youtube.com/watch?v=klCfoGCwmMg


