Title: Talk: Mason Egger - Building Docs like Code: Continuous Integration for Documentation
Publication date: 2021-05-05
Playlist: PyCon US 2020
Description: 
	Presented by:
Mason Egger

It is common for developers to overlook the documentation of their works. They are either on a time crunch, lack the proper tooling, or simply just forget to create and update the documentation. Whatever the cause behind this, it is not a proper excuse for not keeping the documentation up to date. However, for all our development processes there are few as neglected as the documentation process. Documentation should be treated as important as the code that makes up the project. So, let’s move the documentation into the code. With modern documentation tools such as MkDocs and Sphinx, both of which are Python powered tools, and Continuous Integration tools we can now include docs in the commit. They can be reviewed in code reviews, built and versioned in a CI tool, and even tested for things such as correct code examples and broken links. This is the process that the developer knows, understands, and enjoys. I introduced a team to this exact workflow and a working pipeline; all they had to do was keep the documentation up to date. This team currently has some of the most up to date documentation in a company of near two thousand engineers, and they never complain about writing/updating documentation. It’s just part of the workflow.

Attendees will walk away with a new mindset on how to handle documentation, a list of tools that can aid in this process, and a proven, easy-to-implement method that works well for real engineers in a production setting.

Talk slides: https://masonegger.com/speaking/ci-docs/
Captions: 
	00:00:11,809 --> 00:00:16,630
hello everyone this is building docks

00:00:14,450 --> 00:00:19,000
like code continuous integration for

00:00:16,630 --> 00:00:20,589
human tation my name is Mason Egger and

00:00:19,000 --> 00:00:22,570
I serve the developer community at

00:00:20,589 --> 00:00:25,090
digitalocean I am also a volunteer

00:00:22,570 --> 00:00:26,949
educator for the Microsoft philanthropy

00:00:25,090 --> 00:00:29,140
program called teals which pairs

00:00:26,949 --> 00:00:31,119
industry professionals with teachers

00:00:29,140 --> 00:00:33,129
across the nation to help get computer

00:00:31,119 --> 00:00:36,250
science into schools I am also a

00:00:33,129 --> 00:00:38,920
documentation fanatic so who is this

00:00:36,250 --> 00:00:40,360
talk for this talk is for basically

00:00:38,920 --> 00:00:42,909
anybody whether you're an open-source

00:00:40,360 --> 00:00:45,070
maintainer or you are a junior or senior

00:00:42,909 --> 00:00:47,079
developer you manage either a program or

00:00:45,070 --> 00:00:48,399
a community you're a DevOps engineer

00:00:47,079 --> 00:00:49,420
really and truly the list just goes on

00:00:48,399 --> 00:00:51,820
and on and on

00:00:49,420 --> 00:00:54,369
in reality this talk is for anyone who

00:00:51,820 --> 00:00:56,140
writes maintains or manages a product

00:00:54,369 --> 00:00:58,780
that they intend to share with someone

00:00:56,140 --> 00:01:00,059
else so the first part of this talk

00:00:58,780 --> 00:01:03,280
let's talk about how we manage

00:01:00,059 --> 00:01:05,259
documentation so this is a common

00:01:03,280 --> 00:01:07,780
approach to documentation it's the tale

00:01:05,259 --> 00:01:10,360
as old as time developer writes code

00:01:07,780 --> 00:01:12,189
developer commits their code the code

00:01:10,360 --> 00:01:14,560
goes through reviews and tests to make

00:01:12,189 --> 00:01:16,329
sure that it is quality code is it ready

00:01:14,560 --> 00:01:18,460
for a release did the code pass the

00:01:16,329 --> 00:01:20,619
tests is it time for us to move forward

00:01:18,460 --> 00:01:22,600
if the answer is no the developer goes

00:01:20,619 --> 00:01:24,909
back and is happy and writes more code

00:01:22,600 --> 00:01:27,189
if the answer is yes on the other hand

00:01:24,909 --> 00:01:29,229
well someone now needs to write the docs

00:01:27,189 --> 00:01:30,999
because now the customers are you know

00:01:29,229 --> 00:01:33,670
expecting to have Docs with there's code

00:01:30,999 --> 00:01:35,619
so now this other person could be a

00:01:33,670 --> 00:01:37,479
developer it could be a technical writer

00:01:35,619 --> 00:01:39,549
it could be a different developer who

00:01:37,479 --> 00:01:42,069
wasn't even on the project it could be a

00:01:39,549 --> 00:01:44,350
new hire it could be an intern you know

00:01:42,069 --> 00:01:45,609
that that would lead to some really

00:01:44,350 --> 00:01:47,530
interesting Doc's to have your intern

00:01:45,609 --> 00:01:50,859
write your documentation but it does

00:01:47,530 --> 00:01:52,950
happen so issues with this current

00:01:50,859 --> 00:01:55,959
approach with this current model

00:01:52,950 --> 00:01:58,539
documentation is almost an afterthought

00:01:55,959 --> 00:02:00,880
in this long release cycles can also

00:01:58,539 --> 00:02:02,979
lead to things being forgotten I know a

00:02:00,880 --> 00:02:05,200
lot of us want to do agile development

00:02:02,979 --> 00:02:07,179
we think of iterative releases and

00:02:05,200 --> 00:02:09,819
two-week cycles and stuff but my first

00:02:07,179 --> 00:02:11,709
job actually was building a physical

00:02:09,819 --> 00:02:13,330
appliance and an operating system that

00:02:11,709 --> 00:02:16,180
went on to a physical appliance that we

00:02:13,330 --> 00:02:17,800
shipped out the door that went to a lot

00:02:16,180 --> 00:02:19,810
of locations that didn't have internet

00:02:17,800 --> 00:02:22,959
access so our release cycle was eight

00:02:19,810 --> 00:02:24,640
months and if you asked me at the end of

00:02:22,959 --> 00:02:26,680
that eight months what I had worked on

00:02:24,640 --> 00:02:29,270
at the beginning and needed to document

00:02:26,680 --> 00:02:31,040
it it was gonna probably be real

00:02:29,270 --> 00:02:33,800
difficult for me to remember what on

00:02:31,040 --> 00:02:35,570
earth I had done also the more layers of

00:02:33,800 --> 00:02:37,700
separation between the implementer and a

00:02:35,570 --> 00:02:40,010
author the more probability is the more

00:02:37,700 --> 00:02:41,990
likely the docs will become inaccurate

00:02:40,010 --> 00:02:43,700
so some companies do have technical

00:02:41,990 --> 00:02:44,900
writers that work really closely with

00:02:43,700 --> 00:02:47,810
the engineers to work with their Doc's

00:02:44,900 --> 00:02:49,610
and that's great but you know having you

00:02:47,810 --> 00:02:50,990
know a different engineer you know write

00:02:49,610 --> 00:02:52,130
them or having the intern who doesn't

00:02:50,990 --> 00:02:54,560
understand the project write the docs

00:02:52,130 --> 00:02:56,930
introduces this layer of separation and

00:02:54,560 --> 00:03:00,080
it's gonna likely lead to inaccurate

00:02:56,930 --> 00:03:01,550
documentation and the biggest issue with

00:03:00,080 --> 00:03:04,610
is that the developer dislikes

00:03:01,550 --> 00:03:06,950
documenting and that's actually the part

00:03:04,610 --> 00:03:09,620
that I want to focus on is the developer

00:03:06,950 --> 00:03:12,410
dislikes documenting why do developers

00:03:09,620 --> 00:03:14,540
dislike documenting their code because I

00:03:12,410 --> 00:03:16,490
mean I've been to PyCon before as I have

00:03:14,540 --> 00:03:17,720
some of you who have viewed viewing this

00:03:16,490 --> 00:03:19,550
video and maybe some of you who haven't

00:03:17,720 --> 00:03:20,960
even into other conferences or been

00:03:19,550 --> 00:03:23,210
around your co-workers or in your

00:03:20,960 --> 00:03:25,610
classrooms or something and developers

00:03:23,210 --> 00:03:27,410
enjoy writing code I would I would you

00:03:25,610 --> 00:03:30,140
know beg to say that it's probably a

00:03:27,410 --> 00:03:32,600
likely scenario that all of us here

00:03:30,140 --> 00:03:34,070
enjoy writing code and we enjoy talking

00:03:32,600 --> 00:03:36,200
about our code you know the hallway

00:03:34,070 --> 00:03:37,790
track at PyCon is full of people just

00:03:36,200 --> 00:03:40,040
catching up and talking about their

00:03:37,790 --> 00:03:42,080
projects and doing all of that so

00:03:40,040 --> 00:03:44,360
developers enjoy telling people what

00:03:42,080 --> 00:03:46,370
they've done so why do developers hate

00:03:44,360 --> 00:03:48,500
writing about their code it literally is

00:03:46,370 --> 00:03:50,060
just a way of talking about your code

00:03:48,500 --> 00:03:52,970
except instead of it coming out of your

00:03:50,060 --> 00:03:55,490
mouth it goes onto a piece of paper and

00:03:52,970 --> 00:03:58,400
this helps us to realize the real issue

00:03:55,490 --> 00:04:00,740
and that is most developers don't

00:03:58,400 --> 00:04:02,870
dislike writing documentation what they

00:04:00,740 --> 00:04:04,370
really dislike is the workflow that they

00:04:02,870 --> 00:04:07,160
are forced into to write this

00:04:04,370 --> 00:04:08,990
documentation a developer has to switch

00:04:07,160 --> 00:04:10,640
tools when they want to document

00:04:08,990 --> 00:04:13,580
something I have to leave my code editor

00:04:10,640 --> 00:04:15,560
I have to leave my terminal I have to go

00:04:13,580 --> 00:04:17,959
to this who knows what it is maybe this

00:04:15,560 --> 00:04:20,419
microsoft word maybe it's some sort of

00:04:17,959 --> 00:04:22,430
wiki that lives in my system I have to

00:04:20,419 --> 00:04:24,590
leave what I'm doing and go somewhere

00:04:22,430 --> 00:04:27,169
else to use somebody's barely working

00:04:24,590 --> 00:04:29,750
what you see is what you get editor to

00:04:27,169 --> 00:04:30,320
create this code and I'm sorry to create

00:04:29,750 --> 00:04:33,169
these Docs

00:04:30,320 --> 00:04:35,300
so this context which makes them

00:04:33,169 --> 00:04:36,740
reluctant to write Docs so the test gets

00:04:35,300 --> 00:04:38,930
pushed off pushed off to the very end

00:04:36,740 --> 00:04:40,100
you know I don't want to leave my text

00:04:38,930 --> 00:04:42,569
editor I'm in the middle of working on

00:04:40,100 --> 00:04:43,860
my code like why are you making melee

00:04:42,569 --> 00:04:45,809
this workflow that I'm comfortable with

00:04:43,860 --> 00:04:46,619
I'll just do it later that happens all

00:04:45,809 --> 00:04:48,629
the time

00:04:46,619 --> 00:04:51,059
so how can we integrate the

00:04:48,629 --> 00:04:54,270
documentation process into a workflow to

00:04:51,059 --> 00:04:56,039
make it more enjoyable for developers so

00:04:54,270 --> 00:04:57,689
let's think about it a different way

00:04:56,039 --> 00:05:00,629
instead of treating the docs like Docs

00:04:57,689 --> 00:05:02,699
what if we treat our docs like code what

00:05:00,629 --> 00:05:04,379
if instead of having our Doc's external

00:05:02,699 --> 00:05:06,990
to the code they live right next to it

00:05:04,379 --> 00:05:09,419
inside of our repository what if we use

00:05:06,990 --> 00:05:12,360
languages like markup or restructure

00:05:09,419 --> 00:05:14,669
text or is something like that that

00:05:12,360 --> 00:05:16,680
developers already know instead of again

00:05:14,669 --> 00:05:20,610
a busted WYSIWYG editor that doesn't let

00:05:16,680 --> 00:05:22,229
you create links or something so what do

00:05:20,610 --> 00:05:24,240
I mean by treating the docs like code

00:05:22,229 --> 00:05:25,919
though you know they're there you know

00:05:24,240 --> 00:05:27,719
people will Mason these are Doc's they

00:05:25,919 --> 00:05:29,520
don't execute how can they be code well

00:05:27,719 --> 00:05:31,319
they're not really code but we can treat

00:05:29,520 --> 00:05:33,270
them like code so this means that our

00:05:31,319 --> 00:05:35,879
doc files are stored in a version

00:05:33,270 --> 00:05:38,039
control system just like our code they

00:05:35,879 --> 00:05:39,779
could be stored right alongside of it

00:05:38,039 --> 00:05:42,779
our car Doc's could be in the same

00:05:39,779 --> 00:05:44,729
directory as our source code the build

00:05:42,779 --> 00:05:46,409
the Doc's are built automatically the

00:05:44,729 --> 00:05:48,360
artifacts are built automatically with

00:05:46,409 --> 00:05:50,399
every commit with every pull request

00:05:48,360 --> 00:05:52,830
this means we can build the Doc's

00:05:50,399 --> 00:05:54,539
automatically every time we push them or

00:05:52,830 --> 00:05:56,699
commit them so just how we normally

00:05:54,539 --> 00:05:58,259
would run unit tests and we would get an

00:05:56,699 --> 00:06:00,240
artifact with from those maybe like a

00:05:58,259 --> 00:06:02,309
test report we can also build our Doc's

00:06:00,240 --> 00:06:05,969
and we can view the docs with every

00:06:02,309 --> 00:06:07,709
change this ensures insure a trusted set

00:06:05,969 --> 00:06:09,869
of reviewers to make sure that the Doc's

00:06:07,709 --> 00:06:12,029
are meticulously reviewed we do code

00:06:09,869 --> 00:06:13,589
reviews on our code all the time why

00:06:12,029 --> 00:06:16,079
don't we do the same level of

00:06:13,589 --> 00:06:18,419
meticulousness across our Doc's we can

00:06:16,079 --> 00:06:20,639
check to see if the Doc's are tested

00:06:18,419 --> 00:06:24,149
both for accuracy and functionality and

00:06:20,639 --> 00:06:25,709
yes you can test Doc's Sphynx allows you

00:06:24,149 --> 00:06:28,169
to do things like testing to make sure

00:06:25,709 --> 00:06:30,360
that hyperlinks actually go where you

00:06:28,169 --> 00:06:32,129
say they go and if code snippets

00:06:30,360 --> 00:06:33,959
actually work and produce the outputs

00:06:32,129 --> 00:06:37,110
that you say they do so we can totally

00:06:33,959 --> 00:06:39,269
test Doc's and this also allows us to

00:06:37,110 --> 00:06:41,909
publish the artifacts without human

00:06:39,269 --> 00:06:44,099
intervention so what do we gain from

00:06:41,909 --> 00:06:46,469
this if we treat our Doc's like code

00:06:44,099 --> 00:06:47,909
this promotes collaboration that just

00:06:46,469 --> 00:06:49,589
how github helps us promote

00:06:47,909 --> 00:06:51,029
collaboration with our source code it

00:06:49,589 --> 00:06:53,639
helps us promote collaboration with our

00:06:51,029 --> 00:06:55,589
documentation somebody can do app or who

00:06:53,639 --> 00:06:56,250
can see that the docs are mistaken or

00:06:55,589 --> 00:06:57,450
broken

00:06:56,250 --> 00:06:59,220
you know maybe somebody from another

00:06:57,450 --> 00:07:00,540
team somebody from support maybe it's an

00:06:59,220 --> 00:07:02,220
open-source project and someone in the

00:07:00,540 --> 00:07:04,230
community who's maybe doing something

00:07:02,220 --> 00:07:06,210
like hack tober fest can view these docs

00:07:04,230 --> 00:07:08,640
pull change them and do a pull request

00:07:06,210 --> 00:07:10,170
back up and you know they will help

00:07:08,640 --> 00:07:12,390
collaborate and help build your Docs and

00:07:10,170 --> 00:07:15,150
make them better it allows us to track

00:07:12,390 --> 00:07:17,010
documentation mistakes as bugs one of my

00:07:15,150 --> 00:07:18,840
favorite things that I heard a long time

00:07:17,010 --> 00:07:21,990
ago when I first started was that the

00:07:18,840 --> 00:07:24,120
OpenBSD community which is a BSD based

00:07:21,990 --> 00:07:27,270
operating system one of the last living

00:07:24,120 --> 00:07:29,340
UNIX remanence treats bugs in their

00:07:27,270 --> 00:07:32,100
documentation as nothing less than a

00:07:29,340 --> 00:07:33,900
critical bug because the docs are

00:07:32,100 --> 00:07:35,850
important people will be using them and

00:07:33,900 --> 00:07:37,800
you have to treat them as such mistakes

00:07:35,850 --> 00:07:39,060
in documentation should be treated as

00:07:37,800 --> 00:07:41,310
bugs and they should be treated as

00:07:39,060 --> 00:07:43,170
relatively high bugs because otherwise

00:07:41,310 --> 00:07:45,180
people will use your product wrong and

00:07:43,170 --> 00:07:46,320
then they will you know complain about

00:07:45,180 --> 00:07:49,260
it on Twitter which is what most people

00:07:46,320 --> 00:07:51,150
do this allowed you to include the docs

00:07:49,260 --> 00:07:52,560
in the code review a lot of times you

00:07:51,150 --> 00:07:54,690
know if you write new code you have to

00:07:52,560 --> 00:07:55,830
have a unit test or your team lead won't

00:07:54,690 --> 00:07:57,270
accept that code of view they won't even

00:07:55,830 --> 00:07:59,550
start reviewing it until you have unit

00:07:57,270 --> 00:08:01,919
tests all we need to do is we can expand

00:07:59,550 --> 00:08:04,200
that to now say that we include a docs

00:08:01,919 --> 00:08:06,000
update or at least an explanation of why

00:08:04,200 --> 00:08:08,130
the Doc's don't need to be updated if

00:08:06,000 --> 00:08:09,300
you are doing this and more often than

00:08:08,130 --> 00:08:10,410
not if you're adding code the ducts

00:08:09,300 --> 00:08:12,030
probably need to be updated

00:08:10,410 --> 00:08:13,410
you're probably fixing a bug you're

00:08:12,030 --> 00:08:16,110
adding a new feature you're making

00:08:13,410 --> 00:08:17,910
something maybe a little bit more you

00:08:16,110 --> 00:08:19,560
know performance enhanced that may not

00:08:17,910 --> 00:08:20,880
require a little bit but it's likely

00:08:19,560 --> 00:08:21,810
that if you're making a change you need

00:08:20,880 --> 00:08:24,000
to update the docs

00:08:21,810 --> 00:08:26,760
it allows us to make beautiful and

00:08:24,000 --> 00:08:28,800
uniform Doc's we can you we can create a

00:08:26,760 --> 00:08:30,780
process that creates the same looking

00:08:28,800 --> 00:08:32,219
docs across the company across the

00:08:30,780 --> 00:08:35,669
project and they all come out looking

00:08:32,219 --> 00:08:37,890
great it allows us to leverage developer

00:08:35,669 --> 00:08:40,469
tools and workflows we've been using

00:08:37,890 --> 00:08:41,940
things like agile and like get get ops

00:08:40,469 --> 00:08:43,560
and things we've been using all of these

00:08:41,940 --> 00:08:45,210
developer tools and workflows for so

00:08:43,560 --> 00:08:46,589
long that we're used to them and they've

00:08:45,210 --> 00:08:49,470
helped us become more efficient in our

00:08:46,589 --> 00:08:52,140
coding world we will be able to leverage

00:08:49,470 --> 00:08:55,380
these workflows and tools like get to

00:08:52,140 --> 00:08:58,950
version our Docs whoo version Docs to

00:08:55,380 --> 00:09:00,990
gain all of this stuff from it it also

00:08:58,950 --> 00:09:03,270
empowers developers to document

00:09:00,990 --> 00:09:05,190
developers actually enjoy documenting

00:09:03,270 --> 00:09:06,690
this way when you've added it as part of

00:09:05,190 --> 00:09:08,430
the docs into the code review where it's

00:09:06,690 --> 00:09:09,730
required it eventually just becomes

00:09:08,430 --> 00:09:12,339
second nature and developers

00:09:09,730 --> 00:09:14,260
are constantly updating the docs and I

00:09:12,339 --> 00:09:16,389
actually have a case study to prove this

00:09:14,260 --> 00:09:18,639
actually I have two case studies to

00:09:16,389 --> 00:09:20,079
prove this a new team at HomeAway verbo

00:09:18,639 --> 00:09:21,790
which is where I used to be a site

00:09:20,079 --> 00:09:22,389
reliability engineer at before I joined

00:09:21,790 --> 00:09:24,940
digitalocean

00:09:22,389 --> 00:09:27,190
was building a new product new github

00:09:24,940 --> 00:09:29,199
organization new team members everything

00:09:27,190 --> 00:09:31,540
I was going to be on this team and the

00:09:29,199 --> 00:09:34,029
first repository added into that github

00:09:31,540 --> 00:09:36,760
organization was the documentation

00:09:34,029 --> 00:09:38,230
repository this was really interesting

00:09:36,760 --> 00:09:39,760
because it allowed us before we even

00:09:38,230 --> 00:09:41,620
started building the product all of our

00:09:39,760 --> 00:09:42,970
architectural discussions all of the

00:09:41,620 --> 00:09:44,800
decisions we were making all of the

00:09:42,970 --> 00:09:47,649
should we use this tool or that tool was

00:09:44,800 --> 00:09:49,389
documented and then just get pushed at

00:09:47,649 --> 00:09:51,040
the end of the day as marked down and

00:09:49,389 --> 00:09:53,019
then they would automatically update the

00:09:51,040 --> 00:09:55,839
site that has our Docs everybody could

00:09:53,019 --> 00:09:57,970
easily follow along and see what we were

00:09:55,839 --> 00:10:01,180
doing every day and it was really

00:09:57,970 --> 00:10:02,620
amazing the docs were the most

00:10:01,180 --> 00:10:04,230
up-to-date and well maintained in the

00:10:02,620 --> 00:10:06,519
entire org and the entire department

00:10:04,230 --> 00:10:08,139
everybody and always knew we were

00:10:06,519 --> 00:10:09,399
working on we never had to have like hey

00:10:08,139 --> 00:10:11,560
what's going on meetings with our

00:10:09,399 --> 00:10:14,230
director and stuff they were some of the

00:10:11,560 --> 00:10:15,970
best Doc's that there were and then I

00:10:14,230 --> 00:10:17,319
actually have a new case study for those

00:10:15,970 --> 00:10:19,810
of you who have seen this talk before

00:10:17,319 --> 00:10:21,910
and I'm not gonna read all of this but

00:10:19,810 --> 00:10:24,339
right before I left verbo I had joined a

00:10:21,910 --> 00:10:26,050
new team and this new team was in charge

00:10:24,339 --> 00:10:28,120
of a large API that had decent

00:10:26,050 --> 00:10:30,250
documentation but not the greatest I

00:10:28,120 --> 00:10:32,410
introduced this workflow this

00:10:30,250 --> 00:10:35,199
documentation is code workflow and I've

00:10:32,410 --> 00:10:36,459
gotten this huge wall of text from my

00:10:35,199 --> 00:10:38,050
friend and some of this the major

00:10:36,459 --> 00:10:41,019
highlights one of my ex co-workers

00:10:38,050 --> 00:10:42,990
actually from this says that the docs

00:10:41,019 --> 00:10:45,670
this is completely transformed the team

00:10:42,990 --> 00:10:47,860
they have improved their Doc's laid out

00:10:45,670 --> 00:10:49,690
29 separate sections in the internal

00:10:47,860 --> 00:10:51,850
Doc's and a hundred and eleven sections

00:10:49,690 --> 00:10:53,829
in eternal this includes run books this

00:10:51,850 --> 00:10:55,600
includes architectural decisions on why

00:10:53,829 --> 00:10:58,209
we chose to do this this includes

00:10:55,600 --> 00:11:00,610
outages all of the team's post mortems

00:10:58,209 --> 00:11:02,920
are put in these Doc's so you can go and

00:11:00,610 --> 00:11:04,089
read the entire incident from start to

00:11:02,920 --> 00:11:06,250
finish and you can see all of them

00:11:04,089 --> 00:11:08,680
chronologically as what incidents have

00:11:06,250 --> 00:11:11,440
come up they've all been really good

00:11:08,680 --> 00:11:13,510
it's also allowed for team onboarding to

00:11:11,440 --> 00:11:15,160
go down to a matter of days when I award

00:11:13,510 --> 00:11:17,680
it was onboarding onto this team it took

00:11:15,160 --> 00:11:20,560
two months of like meetings and like

00:11:17,680 --> 00:11:22,449
whiteboarding and you know oh we forgot

00:11:20,560 --> 00:11:23,380
you needed access to this get repository

00:11:22,449 --> 00:11:25,090
and all of the

00:11:23,380 --> 00:11:26,680
all of that is now documented Dow and

00:11:25,090 --> 00:11:29,830
they can actually onboard a team member

00:11:26,680 --> 00:11:30,880
in just a few days so I'm not gonna read

00:11:29,830 --> 00:11:32,410
the rest of this but if you're

00:11:30,880 --> 00:11:34,810
interested I would definitely read this

00:11:32,410 --> 00:11:36,700
this kind of proves the point that like

00:11:34,810 --> 00:11:38,230
if you have good docks and you make

00:11:36,700 --> 00:11:41,310
developers and want to write them they

00:11:38,230 --> 00:11:43,840
will and it will transform your org so

00:11:41,310 --> 00:11:45,130
how does this change the workflow that

00:11:43,840 --> 00:11:46,750
we were talking about earlier you know

00:11:45,130 --> 00:11:48,280
the developer writes code but now they

00:11:46,750 --> 00:11:51,100
also write the docks at the same time

00:11:48,280 --> 00:11:52,600
the developer commits this code and the

00:11:51,100 --> 00:11:54,490
docks because they're in either in the

00:11:52,600 --> 00:11:56,920
same repository or maybe they're in a

00:11:54,490 --> 00:11:58,420
separate repository for a more you know

00:11:56,920 --> 00:12:00,760
mainstream document but you were

00:11:58,420 --> 00:12:01,960
committed them at the same time they go

00:12:00,760 --> 00:12:04,600
through the reviews they go through the

00:12:01,960 --> 00:12:06,520
testing is it time to release know the

00:12:04,600 --> 00:12:06,880
developer goes back and writes code and

00:12:06,520 --> 00:12:09,700
docks

00:12:06,880 --> 00:12:11,260
if we say yes we simply push a button

00:12:09,700 --> 00:12:12,880
because the docks have been a part of

00:12:11,260 --> 00:12:15,670
this process the whole time and now the

00:12:12,880 --> 00:12:17,650
artifact of the build the are any other

00:12:15,670 --> 00:12:19,840
code artifacts and the docks are pushed

00:12:17,650 --> 00:12:21,850
and the developer can go right back into

00:12:19,840 --> 00:12:23,740
writing code with no interruption for

00:12:21,850 --> 00:12:25,330
having to pause and let's do a docks

00:12:23,740 --> 00:12:27,730
sprint I've actually heard of those

00:12:25,330 --> 00:12:29,740
before and that's if you're doing a dock

00:12:27,730 --> 00:12:31,420
sprint I would highly recommend you look

00:12:29,740 --> 00:12:33,670
at this this workflow I feel like you'll

00:12:31,420 --> 00:12:34,900
get a lot more iterative cycles out of

00:12:33,670 --> 00:12:38,830
this workflow than if you're using a

00:12:34,900 --> 00:12:40,540
dock sprint so what is the tooling and

00:12:38,830 --> 00:12:43,240
what is some CI CD stuff for

00:12:40,540 --> 00:12:45,760
documentation so just a quick definition

00:12:43,240 --> 00:12:47,560
because computer science and software

00:12:45,760 --> 00:12:48,880
engineering are filled with acronyms

00:12:47,560 --> 00:12:51,090
that nobody ever takes the time to

00:12:48,880 --> 00:12:53,320
explain so I'm going to explain them

00:12:51,090 --> 00:12:55,570
continuous integration means that code

00:12:53,320 --> 00:12:57,670
is continuously tested integrated with

00:12:55,570 --> 00:13:00,250
other code changes and then they are

00:12:57,670 --> 00:13:02,230
merged in continuous deployment me the

00:13:00,250 --> 00:13:03,640
code is continuously deployed out to

00:13:02,230 --> 00:13:05,760
either a testing or production server

00:13:03,640 --> 00:13:08,260
with each patch to the entire code base

00:13:05,760 --> 00:13:10,380
these definitions come directly out of

00:13:08,260 --> 00:13:13,600
the docks like codebook from and gentle

00:13:10,380 --> 00:13:15,880
so what does this mean for docks well

00:13:13,600 --> 00:13:18,400
for docks the CI CD means building a

00:13:15,880 --> 00:13:21,010
full artifact of the docks with every

00:13:18,400 --> 00:13:22,810
single patch so every time I do a patch

00:13:21,010 --> 00:13:25,030
version I get a new version of the docks

00:13:22,810 --> 00:13:26,410
in reality the version of your docks

00:13:25,030 --> 00:13:29,830
should line up perfectly with the

00:13:26,410 --> 00:13:31,690
version of your code you are

00:13:29,830 --> 00:13:34,420
continuously testing the content with

00:13:31,690 --> 00:13:35,730
each patch I can do doc test stuff and

00:13:34,420 --> 00:13:37,800
test the code and make sure that

00:13:35,730 --> 00:13:39,600
works I can make sure that all my links

00:13:37,800 --> 00:13:42,899
work I'm actually testing these docks

00:13:39,600 --> 00:13:45,360
the new sections are either hand tested

00:13:42,899 --> 00:13:47,010
by QA or were myself to make sure that

00:13:45,360 --> 00:13:49,800
what I wrote in there is actually true

00:13:47,010 --> 00:13:52,260
they are publishing automatically with

00:13:49,800 --> 00:13:54,240
every release and we have versioning of

00:13:52,260 --> 00:13:56,130
the docks version Doc's are literally

00:13:54,240 --> 00:13:57,959
like you know the best thing ever if

00:13:56,130 --> 00:13:59,130
you've never had them I don't know you

00:13:57,959 --> 00:14:00,510
know you're like I don't know which

00:13:59,130 --> 00:14:02,790
version of the API is this is it this

00:14:00,510 --> 00:14:04,769
version is it this version oh oh no look

00:14:02,790 --> 00:14:06,810
the docks were included in the release

00:14:04,769 --> 00:14:09,360
now I can know exactly what they meant

00:14:06,810 --> 00:14:12,329
when they said that this for this

00:14:09,360 --> 00:14:13,949
version and it's helpful so there are

00:14:12,329 --> 00:14:15,540
different types of documentation and

00:14:13,949 --> 00:14:17,310
different types that you will encounter

00:14:15,540 --> 00:14:19,110
there's what we call long-form

00:14:17,310 --> 00:14:22,920
documentation which are user guides

00:14:19,110 --> 00:14:24,240
getting started fa Q's etc you know so

00:14:22,920 --> 00:14:26,339
these are actually Doc's that could

00:14:24,240 --> 00:14:29,010
possibly live in a separate repository

00:14:26,339 --> 00:14:31,050
from your code hours did at verbo and

00:14:29,010 --> 00:14:33,690
these are you know just the whole

00:14:31,050 --> 00:14:35,519
welcome to this API this is how you use

00:14:33,690 --> 00:14:38,130
it kind of thing if you're not using a

00:14:35,519 --> 00:14:40,170
code generated style API like swagger

00:14:38,130 --> 00:14:42,930
and then there is also functional

00:14:40,170 --> 00:14:45,350
documentation like RESTful API is SDKs

00:14:42,930 --> 00:14:47,670
man pages and stuff these are actually

00:14:45,350 --> 00:14:49,980
more likely to be inside of the

00:14:47,670 --> 00:14:51,930
repository of the source code and you

00:14:49,980 --> 00:14:53,579
know they're probably going to be using

00:14:51,930 --> 00:14:55,620
some sort of auto-generated tool to help

00:14:53,579 --> 00:14:57,060
generate a lot of the content in them

00:14:55,620 --> 00:14:58,620
instead of doing a lot of the manual

00:14:57,060 --> 00:15:02,130
writing which you would kind of see in

00:14:58,620 --> 00:15:03,720
long-form documentation so documentation

00:15:02,130 --> 00:15:06,899
tools that we have we have static site

00:15:03,720 --> 00:15:09,899
generators make Doc's Hugo there's there

00:15:06,899 --> 00:15:12,569
so many I actually saw a friend of mine

00:15:09,899 --> 00:15:14,100
post a tweet about it on Twitter the

00:15:12,569 --> 00:15:15,870
other day and asking you know which

00:15:14,100 --> 00:15:17,220
static site generator do you use and

00:15:15,870 --> 00:15:18,060
everybody was commenting and so many

00:15:17,220 --> 00:15:21,300
people have just written their own

00:15:18,060 --> 00:15:22,800
there's literally probably like more

00:15:21,300 --> 00:15:25,380
static site generators than there are

00:15:22,800 --> 00:15:27,839
developers in the world good for

00:15:25,380 --> 00:15:29,130
long-form documentation FAQ run books

00:15:27,839 --> 00:15:30,779
this was the kind of thing that my buddy

00:15:29,130 --> 00:15:33,029
Jared in the previous slide had used was

00:15:30,779 --> 00:15:34,500
a static site generator to generate all

00:15:33,029 --> 00:15:36,750
of this code so that way it was easily

00:15:34,500 --> 00:15:38,579
searchable you know uniform but still

00:15:36,750 --> 00:15:41,339
felt like writing code when you were

00:15:38,579 --> 00:15:42,870
writing source code based documentation

00:15:41,339 --> 00:15:45,839
generators documentation that lives

00:15:42,870 --> 00:15:47,790
inside of the code pi doc is one of them

00:15:45,839 --> 00:15:49,800
is you know Sphinx Java doc

00:15:47,790 --> 00:15:51,450
and then some even Jerry clients for

00:15:49,800 --> 00:15:53,700
testing like swagger which will generate

00:15:51,450 --> 00:15:55,770
API testing clients and such and then

00:15:53,700 --> 00:15:57,840
there's system documentation generators

00:15:55,770 --> 00:15:59,100
I put this one in here because it makes

00:15:57,840 --> 00:16:02,190
me giggle every time I think about it

00:15:59,100 --> 00:16:04,620
it's called Ron it's a markdown paste

00:16:02,190 --> 00:16:07,230
based man page generator and as an SRE I

00:16:04,620 --> 00:16:11,130
love man pages but it makes me laugh

00:16:07,230 --> 00:16:14,100
because the format form man pages is raw

00:16:11,130 --> 00:16:15,810
ro FF and they made the tool Ron because

00:16:14,100 --> 00:16:17,370
it's the opposite of rough and I just I

00:16:15,810 --> 00:16:18,660
giggle every time I think about it so

00:16:17,370 --> 00:16:21,930
now you get to hear about it too

00:16:18,660 --> 00:16:24,570
so documentation tools however though I

00:16:21,930 --> 00:16:26,340
once heard this great quote from Drew

00:16:24,570 --> 00:16:28,800
Levine who is a core documentation

00:16:26,340 --> 00:16:30,990
maintainer of the FreeBSD project and at

00:16:28,800 --> 00:16:33,600
her talk at Texas Linux festival about

00:16:30,990 --> 00:16:35,940
Sphinx and essentially it was the more

00:16:33,600 --> 00:16:38,220
powerful your documentation tool is the

00:16:35,940 --> 00:16:41,610
more complex it is to use WYSIWYG

00:16:38,220 --> 00:16:43,950
editors like Microsoft Word relatively

00:16:41,610 --> 00:16:46,140
easy to use but not that much power in

00:16:43,950 --> 00:16:47,340
them tools like latex and then like

00:16:46,140 --> 00:16:49,410
Sphinx if you look at the curve on

00:16:47,340 --> 00:16:52,500
Sphinx it actually goes back back hurts

00:16:49,410 --> 00:16:55,890
um they're really powerful tools and you

00:16:52,500 --> 00:16:57,720
can do almost anything with them and so

00:16:55,890 --> 00:16:59,550
just know that like the farther down

00:16:57,720 --> 00:17:03,090
this rabbit hole you go the more complex

00:16:59,550 --> 00:17:04,950
the tooling will get so documentation

00:17:03,090 --> 00:17:06,300
tools mark make m'kay Doc's we're going

00:17:04,950 --> 00:17:09,330
to talk about two documentation tools

00:17:06,300 --> 00:17:11,580
that I like using one for static sites

00:17:09,330 --> 00:17:13,770
one for code generation and then go from

00:17:11,580 --> 00:17:15,390
there so make Doc's rmk Doc's

00:17:13,770 --> 00:17:17,700
I actually don't know how they prefer to

00:17:15,390 --> 00:17:20,100
be said is a markdown based

00:17:17,700 --> 00:17:22,710
documentation yamo based config file

00:17:20,100 --> 00:17:24,120
tool it is honestly in my opinion the

00:17:22,710 --> 00:17:25,410
easiest static site tool I've ever seen

00:17:24,120 --> 00:17:26,670
there's a yam will file and as a

00:17:25,410 --> 00:17:28,820
directory where all your stuff goes

00:17:26,670 --> 00:17:31,140
organize it accordingly it works

00:17:28,820 --> 00:17:34,590
amazingly well the time to hello world

00:17:31,140 --> 00:17:37,860
on this tool is about 30 seconds it is

00:17:34,590 --> 00:17:39,900
super easy to get it up and running it

00:17:37,860 --> 00:17:42,060
is easy to configure there are many

00:17:39,900 --> 00:17:44,370
extensions and themes supported I

00:17:42,060 --> 00:17:46,170
personally use the make Doc's material

00:17:44,370 --> 00:17:49,320
theme I feel like it just gives it a

00:17:46,170 --> 00:17:51,270
really nice flow and it has an amazing

00:17:49,320 --> 00:17:53,250
search functionality built into it to

00:17:51,270 --> 00:17:55,890
search through your Doc's and it's just

00:17:53,250 --> 00:17:58,230
absolutely the best um and it is Python

00:17:55,890 --> 00:18:00,240
based so it's easy to extend and modify

00:17:58,230 --> 00:18:02,010
you can easily add your own themes

00:18:00,240 --> 00:18:03,900
add your own extensions and do whatever

00:18:02,010 --> 00:18:06,690
you want with it so it's a Python tool

00:18:03,900 --> 00:18:08,179
that basically just uses Jinja to to

00:18:06,690 --> 00:18:11,460
template out a whole bunch of things and

00:18:08,179 --> 00:18:13,830
parse markdown it's really easy to

00:18:11,460 --> 00:18:17,130
extend um one of my favorite things

00:18:13,830 --> 00:18:18,750
about MK docks is and if you pair it up

00:18:17,130 --> 00:18:20,600
with a couple of really cool JavaScript

00:18:18,750 --> 00:18:23,370
tools called flowchart jeaious and

00:18:20,600 --> 00:18:25,559
sequence j/s sequence diagram you can

00:18:23,370 --> 00:18:27,720
actually create flowcharts that are

00:18:25,559 --> 00:18:29,390
based out of markdown and that are

00:18:27,720 --> 00:18:31,920
rendered at the time that they are built

00:18:29,390 --> 00:18:34,170
this is extremely important because I

00:18:31,920 --> 00:18:36,929
cannot I can't even think of how many

00:18:34,170 --> 00:18:39,179
times I've looked at documentation and

00:18:36,929 --> 00:18:39,870
looked at the looked at the diagram in

00:18:39,179 --> 00:18:41,550
there and I said well where did this

00:18:39,870 --> 00:18:43,020
diagram come from oh well somebody made

00:18:41,550 --> 00:18:45,210
it on their computer and took a you know

00:18:43,020 --> 00:18:46,140
a snapshot of it and now it's gonna you

00:18:45,210 --> 00:18:47,520
know where they left the company three

00:18:46,140 --> 00:18:50,730
months ago so that dock that that

00:18:47,520 --> 00:18:53,610
diagram is gone so now the only way for

00:18:50,730 --> 00:18:55,530
me to be able to you know modify that

00:18:53,610 --> 00:18:56,640
diagram is for me to completely remake

00:18:55,530 --> 00:18:58,230
it and I've actually done that before

00:18:56,640 --> 00:19:00,570
there have been times when I've stayed

00:18:58,230 --> 00:19:04,860
up you know past work for 3-4 hours

00:19:00,570 --> 00:19:07,800
trying to recreate a workflow diagram

00:19:04,860 --> 00:19:09,720
and it was just miserable so being able

00:19:07,800 --> 00:19:11,550
to have it have your diagrams in the

00:19:09,720 --> 00:19:13,530
source code is amazing now these are

00:19:11,550 --> 00:19:15,179
somewhat limited in what they can do but

00:19:13,530 --> 00:19:17,760
hey everything's code and it can be

00:19:15,179 --> 00:19:19,620
extended so best of luck to you

00:19:17,760 --> 00:19:22,410
I really like them and they're really

00:19:19,620 --> 00:19:23,670
awesome the other documentation tool

00:19:22,410 --> 00:19:26,610
that I'm going to briefly talk about is

00:19:23,670 --> 00:19:28,500
Sphinx so Sphinx is a restructured text

00:19:26,610 --> 00:19:31,080
based documentation tool with support

00:19:28,500 --> 00:19:33,200
for markdown it is the most common tool

00:19:31,080 --> 00:19:35,429
for creating Python SDK documentation

00:19:33,200 --> 00:19:37,050
for encode documentation so if you've

00:19:35,429 --> 00:19:40,260
ever created doc strings inside of your

00:19:37,050 --> 00:19:41,700
Python methods you've prot it's probably

00:19:40,260 --> 00:19:43,890
been using sphinx to parse it there are

00:19:41,700 --> 00:19:45,600
other tools that will do it but sphinx

00:19:43,890 --> 00:19:47,730
is pretty much the most common and it's

00:19:45,600 --> 00:19:48,540
not even just for SDK documentation for

00:19:47,730 --> 00:19:51,059
encode Doc's

00:19:48,540 --> 00:19:52,710
um a lot of people who have really

00:19:51,059 --> 00:19:56,300
complex Doc's make those things and

00:19:52,710 --> 00:19:57,660
sphinx the true OS which used to be

00:19:56,300 --> 00:19:59,820
pc-bsd

00:19:57,660 --> 00:20:02,309
documentation and I think almost all of

00:19:59,820 --> 00:20:04,920
the documentation that IX system does

00:20:02,309 --> 00:20:06,809
around like FreeNAS and things like that

00:20:04,920 --> 00:20:09,020
is all Sphynx documentation they have

00:20:06,809 --> 00:20:11,730
their own theme they have their own

00:20:09,020 --> 00:20:13,140
process for it but that uses things just

00:20:11,730 --> 00:20:15,750
to create long form document

00:20:13,140 --> 00:20:17,309
so again I want to talk previously about

00:20:15,750 --> 00:20:19,230
how the more powerful your tool is the

00:20:17,309 --> 00:20:21,059
more it can do things can do literally

00:20:19,230 --> 00:20:23,400
anything so you could do it for anything

00:20:21,059 --> 00:20:25,500
it is so you know powerful and stuff it

00:20:23,400 --> 00:20:28,500
can format to innerly literally any

00:20:25,500 --> 00:20:30,330
media including lay tech um I have

00:20:28,500 --> 00:20:32,429
trouble reading later on the best of

00:20:30,330 --> 00:20:35,070
days and sphynx does it um

00:20:32,429 --> 00:20:38,010
Sphinx might be sentient we're currently

00:20:35,070 --> 00:20:41,400
uncertain I'm pretty sure it's a

00:20:38,010 --> 00:20:44,100
turing-complete documentation tool but

00:20:41,400 --> 00:20:46,110
it's a great tool but it does have a

00:20:44,100 --> 00:20:47,700
little bit of a learning curve to it so

00:20:46,110 --> 00:20:49,290
one of the things that's really awesome

00:20:47,700 --> 00:20:50,640
about Sphinx that I love talking about

00:20:49,290 --> 00:20:52,080
and it's not even really in Sphinx

00:20:50,640 --> 00:20:54,660
technically it's in the standard library

00:20:52,080 --> 00:20:57,179
for python is doc tests um

00:20:54,660 --> 00:20:58,710
Sphinx actually helps bring this out and

00:20:57,179 --> 00:21:00,510
makes it really like they have like a

00:20:58,710 --> 00:21:02,900
Sphinx command for running it but you

00:21:00,510 --> 00:21:06,780
can actually test the documentation

00:21:02,900 --> 00:21:08,610
inside of your Sphinx code and make sure

00:21:06,780 --> 00:21:11,400
that the outputs that you say it does

00:21:08,610 --> 00:21:14,190
actually work so it will parse your code

00:21:11,400 --> 00:21:17,309
for things with the Python repple syntax

00:21:14,190 --> 00:21:18,780
in front of it actually run the code and

00:21:17,309 --> 00:21:20,700
then the output that you have at the

00:21:18,780 --> 00:21:23,070
bottom it will compare it and say yes

00:21:20,700 --> 00:21:26,370
the the code that you permit it that you

00:21:23,070 --> 00:21:28,890
gave did actually produce that output I

00:21:26,370 --> 00:21:31,110
have actually had my Sphinx

00:21:28,890 --> 00:21:33,780
documentation catch bugs that my unit

00:21:31,110 --> 00:21:35,970
tests have not which is just probably

00:21:33,780 --> 00:21:38,010
bad because you should have a good unit

00:21:35,970 --> 00:21:40,169
test coverage but this is just another

00:21:38,010 --> 00:21:44,220
layer of things to make sure that what

00:21:40,169 --> 00:21:46,260
you said actually happens so I love doc

00:21:44,220 --> 00:21:47,700
tests and I think that it doesn't get

00:21:46,260 --> 00:21:50,250
anywhere near mount they love that it

00:21:47,700 --> 00:21:52,470
deserves again just to talk about the

00:21:50,250 --> 00:21:54,990
documentation tool Ron this is what a

00:21:52,470 --> 00:21:59,010
markdown based man page would look like

00:21:54,990 --> 00:22:01,230
and that's what it converts to so demo

00:21:59,010 --> 00:22:03,270
time this would have been a live demo at

00:22:01,230 --> 00:22:07,140
PyCon but now it's going to be a live

00:22:03,270 --> 00:22:10,110
demo on a video so my issue was I needed

00:22:07,140 --> 00:22:12,240
to create many open source texts all

00:22:10,110 --> 00:22:13,980
with a similar format that is

00:22:12,240 --> 00:22:16,020
production-ready out of box that kind of

00:22:13,980 --> 00:22:17,460
makes it easier for maybe not the most

00:22:16,020 --> 00:22:19,860
technical people to be able to

00:22:17,460 --> 00:22:22,020
contribute to I don't want to have to

00:22:19,860 --> 00:22:25,350
worry about building the texts or doing

00:22:22,020 --> 00:22:26,490
any sort of build process or doing I

00:22:25,350 --> 00:22:29,040
just want to be able to push them

00:22:26,490 --> 00:22:31,080
github repository and they work and I

00:22:29,040 --> 00:22:34,470
want a workflow that jump-starts Docs

00:22:31,080 --> 00:22:36,990
writers so my solution is an author

00:22:34,470 --> 00:22:38,309
would generate Docs then they would

00:22:36,990 --> 00:22:40,050
write the docs those do they would

00:22:38,309 --> 00:22:42,360
generate a base template then they would

00:22:40,050 --> 00:22:44,550
write the docs the author would publish

00:22:42,360 --> 00:22:46,050
the docs by pushing them to get and the

00:22:44,550 --> 00:22:48,210
docs would be published to a hosted

00:22:46,050 --> 00:22:51,420
solution the tools that I chose to use

00:22:48,210 --> 00:22:53,160
for this for this project were cookie

00:22:51,420 --> 00:22:55,580
cutter for generating the docs is

00:22:53,160 --> 00:22:58,080
basically using a Python templating

00:22:55,580 --> 00:23:00,870
archetype generator to generate a Doc's

00:22:58,080 --> 00:23:02,040
directory using a text editor just to

00:23:00,870 --> 00:23:04,559
write the docs your favorite one

00:23:02,040 --> 00:23:06,450
whichever one you want to use then you

00:23:04,559 --> 00:23:08,490
would just do a git commit and push to

00:23:06,450 --> 00:23:10,170
publish these Doc's to github and then

00:23:08,490 --> 00:23:12,030
they would publish them on to github

00:23:10,170 --> 00:23:13,290
pages um they could be published

00:23:12,030 --> 00:23:14,820
anywhere they could be publish to read

00:23:13,290 --> 00:23:16,080
the docs they could be published to your

00:23:14,820 --> 00:23:18,120
own static site or your own internal

00:23:16,080 --> 00:23:20,870
site I just chose github pages for the

00:23:18,120 --> 00:23:20,870
sake of this demo

00:23:24,890 --> 00:23:30,330
the first step in our demo is we have to

00:23:28,230 --> 00:23:32,520
actually run the cookie cutter to get

00:23:30,330 --> 00:23:34,140
the templated documentation framework

00:23:32,520 --> 00:23:37,080
that has been created so we run cookie

00:23:34,140 --> 00:23:38,670
cutter with the github URL and it will

00:23:37,080 --> 00:23:40,110
ask us if we want to redownload it if

00:23:38,670 --> 00:23:41,610
you've already used it if you haven't it

00:23:40,110 --> 00:23:43,110
won't ask you this but it's usually

00:23:41,610 --> 00:23:44,370
always a pretty good idea to say yes

00:23:43,110 --> 00:23:47,670
just to make sure that you get the

00:23:44,370 --> 00:23:49,440
latest version and now you were able to

00:23:47,670 --> 00:23:56,010
give your site a name so we're gonna

00:23:49,440 --> 00:23:58,080
call this Docs like code demo site

00:23:56,010 --> 00:24:00,420
description all things cool that'll be a

00:23:58,080 --> 00:24:04,350
good repository name my name for the

00:24:00,420 --> 00:24:07,350
site author my github username is Elias

00:24:04,350 --> 00:24:09,990
we're going to set it as a BSD 3 license

00:24:07,350 --> 00:24:11,370
we're going to select make Doc's as the

00:24:09,990 --> 00:24:13,350
engine that's the only engine supported

00:24:11,370 --> 00:24:15,450
right now we're going to post it on

00:24:13,350 --> 00:24:17,130
github pages and now that we have that

00:24:15,450 --> 00:24:19,770
we can view our directory and see what

00:24:17,130 --> 00:24:21,120
we got so we get a license file we get a

00:24:19,770 --> 00:24:23,280
docker file which helps with the

00:24:21,120 --> 00:24:24,900
building process within Travis and you

00:24:23,280 --> 00:24:27,900
can also run the docker file locally but

00:24:24,900 --> 00:24:30,120
you'll don't have to the framework

00:24:27,900 --> 00:24:31,560
defaults to just running things locally

00:24:30,120 --> 00:24:33,870
we have a make file for all of our

00:24:31,560 --> 00:24:36,330
commands the readme we have the actual

00:24:33,870 --> 00:24:38,490
docs directory and then requirements txt

00:24:36,330 --> 00:24:40,110
for the package that we need so within

00:24:38,490 --> 00:24:43,260
our docs directory you will see that

00:24:40,110 --> 00:24:46,170
there is a mate Doc's camel and a Doc's

00:24:43,260 --> 00:24:49,950
directory the mate Doc's camel is the

00:24:46,170 --> 00:24:51,660
actual configuration for the server it

00:24:49,950 --> 00:24:53,160
gives you things like site name site

00:24:51,660 --> 00:24:55,290
description and author all those things

00:24:53,160 --> 00:24:57,570
we set up with a cookie cutter the theme

00:24:55,290 --> 00:24:59,820
is default material right now with a

00:24:57,570 --> 00:25:01,050
certain primary palate and then the

00:24:59,820 --> 00:25:02,880
navigation and a whole bunch of

00:25:01,050 --> 00:25:06,210
extensions that can be installed are in

00:25:02,880 --> 00:25:08,190
here and then with inside of our Doc's

00:25:06,210 --> 00:25:10,590
directories we have the CSS and

00:25:08,190 --> 00:25:12,660
JavaScript directories for custom CSS

00:25:10,590 --> 00:25:17,220
and JavaScript as well as an indexed

00:25:12,660 --> 00:25:19,620
markdown which we can look at which

00:25:17,220 --> 00:25:23,910
basically just has a really simple Doc's

00:25:19,620 --> 00:25:25,200
like code demo title in it so the first

00:25:23,910 --> 00:25:27,780
thing we have to do is we have to create

00:25:25,200 --> 00:25:29,230
a environment and install all of our

00:25:27,780 --> 00:25:31,929
requirements so I'm just gonna skip

00:25:29,230 --> 00:25:34,150
over that part in the video and now Saul

00:25:31,929 --> 00:25:36,280
I want if I want to run my McDuck site

00:25:34,150 --> 00:25:39,850
all I simply have to do is do a make run

00:25:36,280 --> 00:25:47,100
and it's going to serve my site over

00:25:39,850 --> 00:25:49,390
here on localhost port 8080 8,000 sorry

00:25:47,100 --> 00:25:51,940
and as you can see we have our Doc's

00:25:49,390 --> 00:25:54,370
like code page right here and with the

00:25:51,940 --> 00:25:59,380
coat with the text that was inside of

00:25:54,370 --> 00:26:04,600
our Doc's so if we open up Doc's Doc's

00:25:59,380 --> 00:26:08,440
and then the index file and I add MK

00:26:04,600 --> 00:26:10,660
Doc's is really cool and then if I want

00:26:08,440 --> 00:26:15,760
to add maybe a tie a subtitle oh we're

00:26:10,660 --> 00:26:21,490
gonna say I don't know welcome to Pike

00:26:15,760 --> 00:26:24,610
on 2020 and I run a make run again it

00:26:21,490 --> 00:26:26,890
will live sir it will serve my site

00:26:24,610 --> 00:26:28,809
again and as you can see it's updated

00:26:26,890 --> 00:26:30,880
now this is something that you could run

00:26:28,809 --> 00:26:35,740
and then do live updates with so you

00:26:30,880 --> 00:26:41,980
could say I could run a Bo boo and then

00:26:35,740 --> 00:26:45,250
source my Doc's like code and activate

00:26:41,980 --> 00:26:48,520
my virtual environment and make run and

00:26:45,250 --> 00:26:58,059
then I hit f2 over here and then I open

00:26:48,520 --> 00:26:59,620
up Doc's Docs and index and then we just

00:26:58,059 --> 00:27:01,299
write it be over it was cool and we just

00:26:59,620 --> 00:27:05,200
save it real quick and it'll live update

00:27:01,299 --> 00:27:08,410
for us so we can easily do that and that

00:27:05,200 --> 00:27:10,000
is how you run this locally now whenever

00:27:08,410 --> 00:27:11,500
you're ready and you have you are done

00:27:10,000 --> 00:27:13,510
and you want to go forward this you

00:27:11,500 --> 00:27:16,770
would go back to github and you would

00:27:13,510 --> 00:27:16,770
simply just create a new repository

00:27:17,549 --> 00:27:22,860
and now our website will be updated over

00:27:20,519 --> 00:27:24,899
here so now we have our code and there's

00:27:22,860 --> 00:27:27,389
a built tag for it and it's going to say

00:27:24,899 --> 00:27:29,879
build unknown it usually takes a little

00:27:27,389 --> 00:27:32,610
bit of time for Travis to detect that

00:27:29,879 --> 00:27:35,759
this has the this repository has a build

00:27:32,610 --> 00:27:38,759
so we will just fast forward until it

00:27:35,759 --> 00:27:39,899
actually starts working oh and it worked

00:27:38,759 --> 00:27:41,279
actually really quickly so I don't even

00:27:39,899 --> 00:27:43,049
have to fast forward so it has detected

00:27:41,279 --> 00:27:45,899
that there was a build and now it's

00:27:43,049 --> 00:27:47,669
going to build our docks like code now I

00:27:45,899 --> 00:27:49,169
will say really quickly I'm going to go

00:27:47,669 --> 00:27:51,960
ahead and cancel this first build this

00:27:49,169 --> 00:27:55,350
first build is going to fail because we

00:27:51,960 --> 00:27:56,909
don't have a certain thing set up and in

00:27:55,350 --> 00:27:58,259
our Travis Yambol there is a github

00:27:56,909 --> 00:28:00,419
token that we need to set that will

00:27:58,259 --> 00:28:01,440
allow us to publish back up to github so

00:28:00,419 --> 00:28:03,779
what we're going to do is we're going to

00:28:01,440 --> 00:28:05,730
come over to github really really

00:28:03,779 --> 00:28:08,480
quickly and we're going to just generate

00:28:05,730 --> 00:28:11,159
a quick token go to developer settings

00:28:08,480 --> 00:28:16,049
personal access tokens we're just gonna

00:28:11,159 --> 00:28:18,480
generate a new one and we're going to

00:28:16,049 --> 00:28:21,720
say we're just going to call this Doc's

00:28:18,480 --> 00:28:23,460
like code and we're gonna click all

00:28:21,720 --> 00:28:26,039
access on repo and we're going to

00:28:23,460 --> 00:28:28,379
generate the token and then we copy this

00:28:26,039 --> 00:28:32,629
token and we come over here to Travis

00:28:28,379 --> 00:28:35,850
and we go to settings and we put github

00:28:32,629 --> 00:28:38,489
token as the name and we paste the value

00:28:35,850 --> 00:28:40,559
and we've added it in so now we have a

00:28:38,489 --> 00:28:45,720
github token in here and I can go back

00:28:40,559 --> 00:28:47,369
to Travis and I can just restart this

00:28:45,720 --> 00:28:49,529
build and now this build will succeed

00:28:47,369 --> 00:28:52,859
and it will publish all of this directly

00:28:49,529 --> 00:28:54,119
to our github pages on this site so I'm

00:28:52,859 --> 00:28:55,789
going to go ahead and let it build and

00:28:54,119 --> 00:28:58,590
I'm gonna fast forward real quick and

00:28:55,789 --> 00:29:04,590
our build has succeeded so we go back to

00:28:58,590 --> 00:29:06,450
our github repository and we have a link

00:29:04,590 --> 00:29:09,149
in the github repository that takes you

00:29:06,450 --> 00:29:11,450
directly to your Doc's and now they are

00:29:09,149 --> 00:29:16,399
being hosted as you can see on our

00:29:11,450 --> 00:29:18,090
github pages and just for one last

00:29:16,399 --> 00:29:20,820
demonstration to show that this is

00:29:18,090 --> 00:29:25,909
completely automated as I can go and

00:29:20,820 --> 00:29:25,909
really quick and update my Doc's and say

00:29:26,970 --> 00:29:34,600
Automation is cool and then I update

00:29:30,880 --> 00:29:36,520
that and then I do a get ad - and now

00:29:34,600 --> 00:29:38,350
that kicks off a second commit and this

00:29:36,520 --> 00:29:40,420
will build the entire thing up again

00:29:38,350 --> 00:29:42,220
publish it to github and then we'll be

00:29:40,420 --> 00:29:45,940
good and the page will automatically be

00:29:42,220 --> 00:29:50,110
updated and now this build is finished

00:29:45,940 --> 00:29:52,960
so we go over here and we update it and

00:29:50,110 --> 00:29:57,880
it's automatically there and that's the

00:29:52,960 --> 00:30:00,010
end of the demo so you may be asking can

00:29:57,880 --> 00:30:02,440
I try this for myself and yes you can

00:30:00,010 --> 00:30:04,360
unlocked edu is an open source project

00:30:02,440 --> 00:30:06,190
dedicated to creating free and open

00:30:04,360 --> 00:30:07,690
source educational resources such as

00:30:06,190 --> 00:30:09,520
textbooks curriculums worksheets

00:30:07,690 --> 00:30:11,800
etcetera for the use inside of schools

00:30:09,520 --> 00:30:14,140
all of the books currently are written

00:30:11,800 --> 00:30:15,700
in markdown with make Doc's I actually

00:30:14,140 --> 00:30:17,860
found a really cool tool the other day

00:30:15,700 --> 00:30:19,840
that I'm evaluating for making textbooks

00:30:17,860 --> 00:30:21,370
that's also marked down but just a

00:30:19,840 --> 00:30:24,190
different tool we're gonna see how that

00:30:21,370 --> 00:30:25,450
goes a cookie cutter has been created to

00:30:24,190 --> 00:30:26,950
allow you to set up the entire

00:30:25,450 --> 00:30:28,480
documentation of pipeline with one

00:30:26,950 --> 00:30:31,120
single command as you saw in the demo

00:30:28,480 --> 00:30:33,730
and you can actually visit the site here

00:30:31,120 --> 00:30:36,490
this is the github link and you can see

00:30:33,730 --> 00:30:38,860
how to use it I do like to quote my

00:30:36,490 --> 00:30:40,690
sources when I use them um a lot of the

00:30:38,860 --> 00:30:42,040
inspiration for this talk and rule

00:30:40,690 --> 00:30:44,440
inspiration for this work came from the

00:30:42,040 --> 00:30:46,420
docs like code book by Anne gentle I

00:30:44,440 --> 00:30:47,950
hope I'm saying your name right and I

00:30:46,420 --> 00:30:49,530
just absolutely love this book it's a

00:30:47,950 --> 00:30:52,120
great book you can pick it up on Amazon

00:30:49,530 --> 00:30:53,559
for a Kindle or for paperback and I

00:30:52,120 --> 00:30:55,240
highly recommend it if you want to go

00:30:53,559 --> 00:30:58,570
more in depth into the kind of things

00:30:55,240 --> 00:31:00,940
that I spoke about today so some final

00:30:58,570 --> 00:31:02,860
thoughts every job that I've implemented

00:31:00,940 --> 00:31:05,850
this workflow at both the developer

00:31:02,860 --> 00:31:08,740
experience and the user experience have

00:31:05,850 --> 00:31:10,450
vastly vastly improved as you saw from

00:31:08,740 --> 00:31:12,850
my the testimonial from my friend Jared

00:31:10,450 --> 00:31:14,710
is easier for them to on board but also

00:31:12,850 --> 00:31:16,990
their customers are happier and they get

00:31:14,710 --> 00:31:19,090
less support tickets because the docs

00:31:16,990 --> 00:31:20,380
are better and because they have more to

00:31:19,090 --> 00:31:22,179
information in the docs they don't have

00:31:20,380 --> 00:31:24,790
to spend as much time in their support

00:31:22,179 --> 00:31:27,280
slack channel as they normally would um

00:31:24,790 --> 00:31:29,020
stop making Doc's as a punishment like

00:31:27,280 --> 00:31:30,820
you know I kind of feel like that's what

00:31:29,020 --> 00:31:33,460
I like what a Doc's sprint would be is

00:31:30,820 --> 00:31:34,929
you know it's kind of a punishment on it

00:31:33,460 --> 00:31:36,190
you know at the end you know if you're

00:31:34,929 --> 00:31:38,200
just doing a Doc's sprint because you

00:31:36,190 --> 00:31:39,550
want to say just clean up your Doc's and

00:31:38,200 --> 00:31:40,029
make them better and stuff hey go for it

00:31:39,550 --> 00:31:42,009
that's great

00:31:40,029 --> 00:31:43,509
I love it but like kind of always just

00:31:42,009 --> 00:31:44,379
putting it off at the end like cohhd

00:31:43,509 --> 00:31:47,259
cohhd cohhd cohhd cohhd cohhd cohhd

00:31:44,379 --> 00:31:49,629
docks sprint it kind of is like okay

00:31:47,259 --> 00:31:50,919
you've had your you know you've eaten

00:31:49,629 --> 00:31:52,989
all the good food now it's time to eat

00:31:50,919 --> 00:31:55,779
your vegetables and that kind of just

00:31:52,989 --> 00:31:57,969
makes it feel not fun make Doc's fun

00:31:55,779 --> 00:32:00,129
make it part of the process and stop

00:31:57,969 --> 00:32:01,809
making them a punishment um if your

00:32:00,129 --> 00:32:03,820
Doc's suck people will abandon your

00:32:01,809 --> 00:32:05,590
project plain and simple

00:32:03,820 --> 00:32:07,809
there's there's no doubt about it we

00:32:05,590 --> 00:32:10,749
live in a world of readme engineering

00:32:07,809 --> 00:32:12,549
these days where we just basically I

00:32:10,749 --> 00:32:14,889
will test something out and if it

00:32:12,549 --> 00:32:16,509
doesn't work almost immediately I quit

00:32:14,889 --> 00:32:19,059
and then I move forward and I go on to

00:32:16,509 --> 00:32:21,219
the next thing so if they are not good

00:32:19,059 --> 00:32:22,210
Docs people will go on to the next thing

00:32:21,219 --> 00:32:24,399
and if you want people to use your

00:32:22,210 --> 00:32:25,899
project the project with the best user

00:32:24,399 --> 00:32:28,210
experience will be the project that

00:32:25,899 --> 00:32:31,929
succeeds not always the project with the

00:32:28,210 --> 00:32:33,759
better tech we've seen that in in the

00:32:31,929 --> 00:32:35,859
history of software engineering um

00:32:33,759 --> 00:32:38,139
versioning Docs is great we should do a

00:32:35,859 --> 00:32:41,169
lot more of that all Doc's should be

00:32:38,139 --> 00:32:43,330
versioned so you can access them and so

00:32:41,169 --> 00:32:45,399
that way you can know I can access older

00:32:43,330 --> 00:32:47,950
versions I know what I actually expect

00:32:45,399 --> 00:32:49,839
of the API and it would just work and

00:32:47,950 --> 00:32:52,059
it's they're very important please

00:32:49,839 --> 00:32:54,759
please PLEASE version your Doc's um

00:32:52,059 --> 00:32:58,469
these slides will be available at my

00:32:54,759 --> 00:33:02,619
website masonry comm / tox / CI - Doc's

00:32:58,469 --> 00:33:06,159
so feel free to go there if you want but

00:33:02,619 --> 00:33:07,929
wait there's more so at the beginning of

00:33:06,159 --> 00:33:11,320
my presentation you may have seen this

00:33:07,929 --> 00:33:12,849
cute little Python Sammy sticker um when

00:33:11,320 --> 00:33:15,339
we were planning on coming to Pike on

00:33:12,849 --> 00:33:17,469
this year I had a lot of these stickers

00:33:15,339 --> 00:33:19,749
printed up and ready to go with PyCon

00:33:17,469 --> 00:33:21,159
2020 at the bottom so I couldn't

00:33:19,749 --> 00:33:23,469
possibly use them for any other

00:33:21,159 --> 00:33:26,080
conference and now I have 2000 of them

00:33:23,469 --> 00:33:29,229
sitting in my apartment so if you want a

00:33:26,080 --> 00:33:32,589
Pike on 2020 sandy sticker please fill

00:33:29,229 --> 00:33:35,200
out this form at Diageo slash pike on

00:33:32,589 --> 00:33:37,089
20/20 it's a Google Form and if you give

00:33:35,200 --> 00:33:39,460
me your name and your mailing address we

00:33:37,089 --> 00:33:41,109
will mail you a pike on Sammy 2020

00:33:39,460 --> 00:33:43,119
sticker these are a limited ish and

00:33:41,109 --> 00:33:45,549
sticker you will probably not ever see

00:33:43,119 --> 00:33:48,190
this sticker again I I like collecting

00:33:45,549 --> 00:33:50,259
the Sandy stickers um so I'm happy that

00:33:48,190 --> 00:33:52,089
I'm able to get some but definitely if

00:33:50,259 --> 00:33:54,080
you want one put it fill out your

00:33:52,089 --> 00:33:57,410
information and let us know

00:33:54,080 --> 00:33:59,060
I want to thank everybody for for

00:33:57,410 --> 00:34:01,550
watching this talk I hope you enjoyed it

00:33:59,060 --> 00:34:03,220
this is a really fun talk of mine to

00:34:01,550 --> 00:34:06,470
give I've given this talk a lot of times

00:34:03,220 --> 00:34:09,260
I want to thank the PSF and everybody

00:34:06,470 --> 00:34:10,490
involved in PyCon for the amazing work

00:34:09,260 --> 00:34:13,490
that they've done in these unprecedented

00:34:10,490 --> 00:34:15,140
times for making sure that weakens that

00:34:13,490 --> 00:34:16,460
those of us who have spent time creating

00:34:15,140 --> 00:34:17,990
these presentations can still get them

00:34:16,460 --> 00:34:19,700
to you and those of us who want to watch

00:34:17,990 --> 00:34:21,230
these presentations still get to see

00:34:19,700 --> 00:34:22,610
them because even as like a sponsor who

00:34:21,230 --> 00:34:23,960
had been stuck at a booth and stuff

00:34:22,610 --> 00:34:25,460
I see talks I'm like ooh whoo I have to

00:34:23,960 --> 00:34:28,220
go see that talk so now I get to view

00:34:25,460 --> 00:34:29,660
them all and I really enjoy that so

00:34:28,220 --> 00:34:33,429
thank you very much again for watching

00:34:29,660 --> 00:34:33,429

YouTube URL: https://www.youtube.com/watch?v=4SwdVMKhbn4


