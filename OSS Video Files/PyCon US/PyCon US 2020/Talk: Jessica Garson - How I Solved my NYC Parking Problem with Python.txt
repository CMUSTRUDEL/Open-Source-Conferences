Title: Talk: Jessica Garson - How I Solved my NYC Parking Problem with Python
Publication date: 2021-05-05
Playlist: PyCon US 2020
Description: 
	Presented by:
Jessica Garson

Since I have a car in New York City, my car is subject to the city’s alternate side of the street parking regulations. This means most nights I need to move my car before the early morning street cleaning that happens in my neighborhood. I had developed a nightly routine around moving my car before I go to sleep. I am sometimes a bit too good at this and I often move my car on days I don’t need to. Since alternate side of the street parking is often canceled on days where there are holidays, or bad weather, there is a Twitter handle @NYCASP, which posts daily and whenever there is an emergency situation. I used Python, Twilio and the Twitter API to solve this problem for myself so I get a text message whenever I don’t need to move my car.
Captions: 
	00:00:05,370 --> 00:00:09,389
my name is Jess and I'm a developer

00:00:07,319 --> 00:00:11,879
advocate with Twitter and I'm here to

00:00:09,389 --> 00:00:14,670
talk with you about how I silenced a

00:00:11,879 --> 00:00:18,180
parking problem in my life with Python

00:00:14,670 --> 00:00:21,090
and let me know if this inspires you to

00:00:18,180 --> 00:00:23,130
create anything you can tweet at me I'm

00:00:21,090 --> 00:00:25,590
Jessica Carson or feel free to send me a

00:00:23,130 --> 00:00:29,340
message it always makes my day when

00:00:25,590 --> 00:00:32,460
people build based on my work also code

00:00:29,340 --> 00:00:37,260
for today can be found at github comm

00:00:32,460 --> 00:00:39,000
slash Twitter dev slash parking and if

00:00:37,260 --> 00:00:41,579
you take a look at the site at the

00:00:39,000 --> 00:00:44,699
github repository you can notice that

00:00:41,579 --> 00:00:48,059
there is a folder called recent search

00:00:44,699 --> 00:00:51,510
and in there you'll find the code that

00:00:48,059 --> 00:00:52,980
we're using today also there's some

00:00:51,510 --> 00:00:55,350
resources that could be helpful as

00:00:52,980 --> 00:00:57,539
you're building and there's a link to a

00:00:55,350 --> 00:00:59,190
blog post version of this talk to you

00:00:57,539 --> 00:01:01,260
that I'll be giving at the end of this

00:00:59,190 --> 00:01:03,210
talk as well um so you might be

00:01:01,260 --> 00:01:05,519
wondering what was happening in my life

00:01:03,210 --> 00:01:09,300
that inspired me to build a solution

00:01:05,519 --> 00:01:13,650
with Python um so I live in Brooklyn New

00:01:09,300 --> 00:01:16,140
York and you might be noticing on this

00:01:13,650 --> 00:01:19,530
really cool cosmic looking car that

00:01:16,140 --> 00:01:22,020
there is this orange envelope on it

00:01:19,530 --> 00:01:24,360
that's a parking ticket and parking

00:01:22,020 --> 00:01:27,420
tickets in New York City can be fairly

00:01:24,360 --> 00:01:30,360
expensive they can run you up to over

00:01:27,420 --> 00:01:31,950
$100 so you really want to avoid getting

00:01:30,360 --> 00:01:34,350
a parking ticket I'm sure some people

00:01:31,950 --> 00:01:37,230
watching right now are nodding their

00:01:34,350 --> 00:01:40,050
heads and agreement I had a problem in

00:01:37,230 --> 00:01:43,980
my life um I had a car in New York and I

00:01:40,050 --> 00:01:45,900
was moving my car too much I was really

00:01:43,980 --> 00:01:47,670
good at like creating a nightly routine

00:01:45,900 --> 00:01:50,250
I looked at petrovic pattern data

00:01:47,670 --> 00:01:52,680
figured out like where the what time of

00:01:50,250 --> 00:01:54,840
day the traffic was the lightest it was

00:01:52,680 --> 00:01:57,990
a p.m. a night and had this routine of

00:01:54,840 --> 00:02:00,150
every night at a p.m. I would go and

00:01:57,990 --> 00:02:02,940
take a walk and move my car and then

00:02:00,150 --> 00:02:04,260
walk back home um and it typically took

00:02:02,940 --> 00:02:05,520
me about a half an hour every night but

00:02:04,260 --> 00:02:07,170
I you know it was part of my nightly

00:02:05,520 --> 00:02:10,860
routine that was pretty good about it

00:02:07,170 --> 00:02:12,629
um but you're probably like hey so why

00:02:10,860 --> 00:02:15,659
were you even doing this to begin with

00:02:12,629 --> 00:02:17,770
what are these alternate side of the

00:02:15,659 --> 00:02:20,740
street parking

00:02:17,770 --> 00:02:23,100
restrictions anyways so alternate side

00:02:20,740 --> 00:02:26,200
of the street parking restrictions or

00:02:23,100 --> 00:02:28,930
ASP as they're known in New York our

00:02:26,200 --> 00:02:30,880
rule that enforces the clearing of

00:02:28,930 --> 00:02:34,600
parked cars to accommodate a street

00:02:30,880 --> 00:02:36,460
cleaning schedule so basically a street

00:02:34,600 --> 00:02:38,170
cleaning track will come through and in

00:02:36,460 --> 00:02:39,820
my neighborhood that takes place on the

00:02:38,170 --> 00:02:42,940
right side of the street on Mondays and

00:02:39,820 --> 00:02:46,360
Thursdays between 8 a.m. and 11 a.m. and

00:02:42,940 --> 00:02:50,670
on the left side of the street between 8

00:02:46,360 --> 00:02:53,350
a.m. and 11 a.m. on Tuesdays and Fridays

00:02:50,670 --> 00:02:57,370
meaning for me most nights of the week I

00:02:53,350 --> 00:02:59,650
had to move my car by 8 a.m. so yeah it

00:02:57,370 --> 00:03:02,080
wasn't fun um and one night I was

00:02:59,650 --> 00:03:02,910
driving around my neighborhood looking

00:03:02,080 --> 00:03:07,090
for parking

00:03:02,910 --> 00:03:08,350
anny p.m. you know driving around and I

00:03:07,090 --> 00:03:10,660
couldn't find parking I was like this is

00:03:08,350 --> 00:03:12,250
really unusual like I went on I like all

00:03:10,660 --> 00:03:13,500
my usual spots and couldn't find

00:03:12,250 --> 00:03:16,030
anything that were cars everywhere

00:03:13,500 --> 00:03:17,380
finally found a spot after like two

00:03:16,030 --> 00:03:18,880
hours but it was fine I was like

00:03:17,380 --> 00:03:22,150
listening to a book on tape it was great

00:03:18,880 --> 00:03:24,160
but I got home I talked to my roommate

00:03:22,150 --> 00:03:26,350
and they were like where were you gonna

00:03:24,160 --> 00:03:28,390
I was like oh I was moving my car they

00:03:26,350 --> 00:03:30,730
like really you didn't go to a show or a

00:03:28,390 --> 00:03:32,950
party or you didn't run into someone you

00:03:30,730 --> 00:03:35,560
knew and I was like nope just moving my

00:03:32,950 --> 00:03:39,520
car and they were like do you know about

00:03:35,560 --> 00:03:41,320
this twitter handle NY CAS P which

00:03:39,520 --> 00:03:43,570
stands for in New York City alternative

00:03:41,320 --> 00:03:46,690
shoot parking and it tweets daily at

00:03:43,570 --> 00:03:47,770
7:30 and 4 p.m. and during emergency

00:03:46,690 --> 00:03:51,280
situations

00:03:47,770 --> 00:03:55,750
I started looking through the tweets and

00:03:51,280 --> 00:03:58,420
I was like oh wow I've been room my car

00:03:55,750 --> 00:04:01,209
way too much and I've and I would also

00:03:58,420 --> 00:04:03,880
like leave social events early sometimes

00:04:01,209 --> 00:04:08,190
my schedule way to revolve around moving

00:04:03,880 --> 00:04:11,350
my car literally so I was like you know

00:04:08,190 --> 00:04:13,750
between all look kind of the same to you

00:04:11,350 --> 00:04:16,390
I was like I think I can automate this

00:04:13,750 --> 00:04:19,720
so I built this solution using Twitter

00:04:16,390 --> 00:04:22,120
data and Twilio to send myself a text

00:04:19,720 --> 00:04:24,490
message whenever I don't have to move my

00:04:22,120 --> 00:04:27,400
car so let's talk a little bit about an

00:04:24,490 --> 00:04:31,060
overview of the solution I needed to get

00:04:27,400 --> 00:04:34,180
the tweets from NYC ASP

00:04:31,060 --> 00:04:37,210
I needed to see if the word suspended

00:04:34,180 --> 00:04:40,870
and tomorrow appeared in the same tweet

00:04:37,210 --> 00:04:44,410
I needed to get a text message when the

00:04:40,870 --> 00:04:47,140
right words appeared I needed to run

00:04:44,410 --> 00:04:48,670
this on a server so it repeated so I

00:04:47,140 --> 00:04:50,230
don't have to do you want anything

00:04:48,670 --> 00:04:53,980
manually it just would happen every day

00:04:50,230 --> 00:04:55,480
and so a high level the process for a

00:04:53,980 --> 00:04:57,070
crane this app was really simple if

00:04:55,480 --> 00:04:59,530
there were only three steps that I had

00:04:57,070 --> 00:05:02,500
to do I had to get the tweets that I

00:04:59,530 --> 00:05:04,630
wanted from the Twitter API and you need

00:05:02,500 --> 00:05:06,400
to connect to Thalia and I need to get a

00:05:04,630 --> 00:05:08,620
text one I didn't have to move my cart

00:05:06,400 --> 00:05:10,270
um so it seemed like this was actually

00:05:08,620 --> 00:05:13,780
something that was pretty easy and

00:05:10,270 --> 00:05:17,020
simple to do um and so I told all of you

00:05:13,780 --> 00:05:18,430
to start to think about the problems

00:05:17,020 --> 00:05:20,290
that you face in your everyday life that

00:05:18,430 --> 00:05:24,340
there might be solutions that you can

00:05:20,290 --> 00:05:26,500
engineer to resolve so um if you wanted

00:05:24,340 --> 00:05:28,270
to build absolutely if you also live in

00:05:26,500 --> 00:05:30,700
New York and have a car and you want to

00:05:28,270 --> 00:05:32,980
build this solution or something similar

00:05:30,700 --> 00:05:35,770
um you might be wondering what will I

00:05:32,980 --> 00:05:38,620
need to get started you will need to

00:05:35,770 --> 00:05:42,940
create a Twitter app which allows you to

00:05:38,620 --> 00:05:46,330
connect to the API and you can apply for

00:05:42,940 --> 00:05:50,680
access at developer twitter.com slash am

00:05:46,330 --> 00:05:54,790
slash apply for access um and you would

00:05:50,680 --> 00:05:58,930
also need to sign up for labs at t-that

00:05:54,790 --> 00:06:01,210
Co that lamps again that's T that co dot

00:05:58,930 --> 00:06:05,130
labs we have an internal link shortener

00:06:01,210 --> 00:06:08,800
so you might be seeing a lot of these

00:06:05,130 --> 00:06:11,650
Tico links throughout the presentation

00:06:08,800 --> 00:06:14,230
and currently we're in the midst of

00:06:11,650 --> 00:06:16,690
rebuilding the future of the Twitter API

00:06:14,230 --> 00:06:18,430
with Twitter developer labs and this

00:06:16,690 --> 00:06:21,130
allows you to have early access to new

00:06:18,430 --> 00:06:23,950
endpoints features and new versions and

00:06:21,130 --> 00:06:27,340
things like that and so we use labs to

00:06:23,950 --> 00:06:29,350
test out new ideas and things and we

00:06:27,340 --> 00:06:32,440
have a bunch of different previews and

00:06:29,350 --> 00:06:35,290
we made the developer community to share

00:06:32,440 --> 00:06:39,010
their feedback to help shape our roadmap

00:06:35,290 --> 00:06:42,550
moving forward um so we have a preview

00:06:39,010 --> 00:06:43,930
for an endpoint called recent search and

00:06:42,550 --> 00:06:45,020
you will also need to enroll in that

00:06:43,930 --> 00:06:47,150
preview too

00:06:45,020 --> 00:06:50,300
the tweets from the past seven days

00:06:47,150 --> 00:06:52,460
you'll also need a Twilio account and

00:06:50,300 --> 00:06:55,040
you can check out their documentation on

00:06:52,460 --> 00:06:57,830
getting some started um you will also

00:06:55,040 --> 00:07:01,580
need to pip install the libraries Twilio

00:06:57,830 --> 00:07:05,330
dot rest pandas and requests Twilio

00:07:01,580 --> 00:07:08,540
depressed allows us to connect to the

00:07:05,330 --> 00:07:10,400
Twilio api pandas will allow us to shape

00:07:08,540 --> 00:07:12,680
the theta and get into a data frame so

00:07:10,400 --> 00:07:14,450
we can kind of get a fuller picture of

00:07:12,680 --> 00:07:15,920
what we're looking at when we start to

00:07:14,450 --> 00:07:19,700
work with the data and you'll see that

00:07:15,920 --> 00:07:21,860
in a few minutes here and request allows

00:07:19,700 --> 00:07:27,320
us to actually make the request to the

00:07:21,860 --> 00:07:34,390
twitter api so now we're gonna start to

00:07:27,320 --> 00:07:37,460
take a look at the code so the first

00:07:34,390 --> 00:07:42,800
code sample that we're gonna look at is

00:07:37,460 --> 00:07:45,740
a code sample called Twilio connect demo

00:07:42,800 --> 00:07:47,450
dot py and you can also find a version

00:07:45,740 --> 00:07:51,500
of this inside of the github repository

00:07:47,450 --> 00:07:54,490
and in there we will first start off by

00:07:51,500 --> 00:07:56,900
importing in OS that will allow us to

00:07:54,490 --> 00:07:59,360
create environment variables so we don't

00:07:56,900 --> 00:08:00,980
have to pass any secrets directly in

00:07:59,360 --> 00:08:02,480
this code which is pretty exciting it's

00:08:00,980 --> 00:08:04,520
a way to make sure that our code is a

00:08:02,480 --> 00:08:09,050
bit more secure than it would be we're

00:08:04,520 --> 00:08:13,100
also going to import in a helper

00:08:09,050 --> 00:08:17,150
function called client from the Tullio

00:08:13,100 --> 00:08:20,840
dot Rast library that we have installed

00:08:17,150 --> 00:08:22,520
earlier and so from here we're gonna

00:08:20,840 --> 00:08:24,350
take a look at a function called Twilio

00:08:22,520 --> 00:08:26,180
connect and i like to think of this

00:08:24,350 --> 00:08:27,860
function as if it was a secret handshake

00:08:26,180 --> 00:08:32,270
so you're going to like a really cool

00:08:27,860 --> 00:08:33,980
party and you have to like give a secret

00:08:32,270 --> 00:08:36,050
handshake to a bouncer that's kind of

00:08:33,980 --> 00:08:39,590
the same sort of thing but instead of

00:08:36,050 --> 00:08:41,720
going into a party you are going to be

00:08:39,590 --> 00:08:44,390
authenticated into an API and in this

00:08:41,720 --> 00:08:46,040
case it's gonna be Twilio so Twilio

00:08:44,390 --> 00:08:48,230
again is what allows us to send this

00:08:46,040 --> 00:08:50,660
text message so from here we're gonna

00:08:48,230 --> 00:08:52,460
want to create and like our we're gonna

00:08:50,660 --> 00:08:53,480
want to use our account s ID and we're

00:08:52,460 --> 00:08:56,570
gonna want to create an environment

00:08:53,480 --> 00:08:58,250
variable so inside of our terminal we

00:08:56,570 --> 00:09:00,330
would just type

00:08:58,250 --> 00:09:02,580
something that looks like this for each

00:09:00,330 --> 00:09:04,830
of the secrets that we're gonna want to

00:09:02,580 --> 00:09:08,850
pass in so for here is the account si T

00:09:04,830 --> 00:09:10,230
account are the auth token R Twilio

00:09:08,850 --> 00:09:13,620
phone number and our cell phone numbers

00:09:10,230 --> 00:09:16,770
so this helps keeps things a little bit

00:09:13,620 --> 00:09:20,070
more secure so to get the account SI te

00:09:16,770 --> 00:09:23,550
we're gonna actually get the environment

00:09:20,070 --> 00:09:25,560
variable by using the OS library from

00:09:23,550 --> 00:09:28,380
the and that's included in the standard

00:09:25,560 --> 00:09:31,850
library as well so it's OS dot

00:09:28,380 --> 00:09:34,020
environment yet and we're gonna get the

00:09:31,850 --> 00:09:36,390
account s idea we're gonna do the same

00:09:34,020 --> 00:09:37,680
thing for the auth token as well and

00:09:36,390 --> 00:09:39,930
then we're gonna pass this in through

00:09:37,680 --> 00:09:41,940
the client helper just to authenticate

00:09:39,930 --> 00:09:44,660
and that's the client helper function

00:09:41,940 --> 00:09:48,630
and we're gonna return that that client

00:09:44,660 --> 00:09:51,209
variable as well so from here then we

00:09:48,630 --> 00:09:52,890
can start to really get into when I can

00:09:51,209 --> 00:09:55,200
Terry to be one of the most fun parts of

00:09:52,890 --> 00:09:57,959
the code which is where we decide what

00:09:55,200 --> 00:10:01,890
the text message will say um so it's

00:09:57,959 --> 00:10:03,180
this one function and it's def and then

00:10:01,890 --> 00:10:04,950
we're gonna define this function as a

00:10:03,180 --> 00:10:08,310
send message and we're gonna pass in the

00:10:04,950 --> 00:10:10,920
client object that we just defined and

00:10:08,310 --> 00:10:13,320
from here we're gonna do client that

00:10:10,920 --> 00:10:15,420
messages that create and it's gonna be

00:10:13,320 --> 00:10:17,490
from our Twilio phone number that's the

00:10:15,420 --> 00:10:19,050
number that you get from Twilio and then

00:10:17,490 --> 00:10:21,690
we're gonna send it to our cell phone

00:10:19,050 --> 00:10:23,610
and it's gonna say for the purposes of

00:10:21,690 --> 00:10:23,970
today you don't have to move your car

00:10:23,610 --> 00:10:28,399
tonight

00:10:23,970 --> 00:10:31,170
enjoy your name super-exciting and

00:10:28,399 --> 00:10:34,500
that's the Twilio connect helper script

00:10:31,170 --> 00:10:37,290
so it's just these two functions from

00:10:34,500 --> 00:10:39,600
here I like to actually for the next

00:10:37,290 --> 00:10:42,959
part of this run this in the jeepers

00:10:39,600 --> 00:10:44,550
tune notebook and that just allows us to

00:10:42,959 --> 00:10:47,520
gonna interact with the data a little

00:10:44,550 --> 00:10:50,880
bit more robustly we can actually start

00:10:47,520 --> 00:10:55,470
to see the input and the output all in

00:10:50,880 --> 00:10:58,380
one screen so I always like working with

00:10:55,470 --> 00:11:00,750
data type things inside of a Jupiter

00:10:58,380 --> 00:11:02,490
notebook it's a very nice experience so

00:11:00,750 --> 00:11:05,040
the first thing that we're gonna want to

00:11:02,490 --> 00:11:07,709
do is we're gonna want to import pandas

00:11:05,040 --> 00:11:10,770
as PD that's gonna allow us to shape the

00:11:07,709 --> 00:11:11,880
data later on we're also going to import

00:11:10,770 --> 00:11:13,770
yeah Mel and

00:11:11,880 --> 00:11:16,350
and we don't have to pip install these

00:11:13,770 --> 00:11:19,200
two things they actually come included

00:11:16,350 --> 00:11:21,000
with the standard library yeah Mel will

00:11:19,200 --> 00:11:24,900
allow us to pass in a configuration file

00:11:21,000 --> 00:11:27,300
that's the ML file and Jason will I was

00:11:24,900 --> 00:11:30,860
to work with the object coming from the

00:11:27,300 --> 00:11:33,600
EPA and request is something that we're

00:11:30,860 --> 00:11:37,230
that you will have to pip install but

00:11:33,600 --> 00:11:41,700
that allows you to make a request to the

00:11:37,230 --> 00:11:45,060
APM X so let's run that cool and then

00:11:41,700 --> 00:11:46,410
from here the next thing that we're

00:11:45,060 --> 00:11:47,970
gonna want to do is we're gonna want to

00:11:46,410 --> 00:11:50,330
actually import in that Twilio

00:11:47,970 --> 00:11:53,160
connection script I'm gonna want to

00:11:50,330 --> 00:11:56,520
import in Twilio connect and send

00:11:53,160 --> 00:11:59,760
message and then from here we're gonna

00:11:56,520 --> 00:12:03,450
want to make sure that we pass NYC ASP

00:11:59,760 --> 00:12:05,370
into the URL I'm gonna want to print it

00:12:03,450 --> 00:12:09,240
out just to make sure it looks right so

00:12:05,370 --> 00:12:13,020
the query is that it's gonna be equal to

00:12:09,240 --> 00:12:16,880
from the handle NY or colon and then the

00:12:13,020 --> 00:12:21,630
handle NYC ASP and so you can actually

00:12:16,880 --> 00:12:23,910
see the whole URL here that we get back

00:12:21,630 --> 00:12:26,460
which is pretty exciting and then for

00:12:23,910 --> 00:12:28,530
the next part of this we're going to

00:12:26,460 --> 00:12:30,720
want to do another step of

00:12:28,530 --> 00:12:33,390
authentication but this time instead of

00:12:30,720 --> 00:12:37,620
to the Twilio api we're gonna want to

00:12:33,390 --> 00:12:39,750
authenticate into the Twitter API and I

00:12:37,620 --> 00:12:42,150
like to do it with a configuration file

00:12:39,750 --> 00:12:45,060
um you will want to make sure that you

00:12:42,150 --> 00:12:46,410
don't save this into your github

00:12:45,060 --> 00:12:51,180
repository and make sure that you

00:12:46,410 --> 00:12:55,310
include this secret file in your docket

00:12:51,180 --> 00:12:57,900
ignore file so yeah most kind of like

00:12:55,310 --> 00:13:00,180
JSON but without the quotes is a good

00:12:57,900 --> 00:13:05,100
way of thinking about it um so from here

00:13:00,180 --> 00:13:07,500
we have an we have an object called

00:13:05,100 --> 00:13:08,880
search tweets API and then inside of

00:13:07,500 --> 00:13:10,290
that we have another object called

00:13:08,880 --> 00:13:12,540
bearer token which is where we would

00:13:10,290 --> 00:13:15,180
pass in our bearer token bearer tokens

00:13:12,540 --> 00:13:17,610
are one of the key features of OAuth 2

00:13:15,180 --> 00:13:19,980
and they're really great because you

00:13:17,610 --> 00:13:23,190
don't have to pass him much more in our

00:13:19,980 --> 00:13:24,480
documentation we actually have a curl

00:13:23,190 --> 00:13:26,010
command that you can run you can also

00:13:24,480 --> 00:13:29,040
create some pie

00:13:26,010 --> 00:13:30,390
to run that as well but yeah

00:13:29,040 --> 00:13:32,490
working with bearer tokens is really

00:13:30,390 --> 00:13:38,910
great so you don't have to pass in that

00:13:32,490 --> 00:13:41,520
much more so from here we're we're gonna

00:13:38,910 --> 00:13:44,220
want to load in our UML file save that

00:13:41,520 --> 00:13:47,610
into an object called data and then from

00:13:44,220 --> 00:13:49,260
here we actually want to extract out the

00:13:47,610 --> 00:13:51,000
bearer token so we have the bearer token

00:13:49,260 --> 00:13:52,740
and we're gonna set that equal to data

00:13:51,000 --> 00:13:54,870
and then we're gonna slice out the

00:13:52,740 --> 00:13:56,610
search tweets API on jegg and then we're

00:13:54,870 --> 00:13:58,890
gonna get the bearer token from there

00:13:56,610 --> 00:14:01,590
and then we need to pass that into the

00:13:58,890 --> 00:14:04,530
headers to actually make the request and

00:14:01,590 --> 00:14:07,740
do the authorization so inside of a

00:14:04,530 --> 00:14:10,320
variable called Heather headers and we

00:14:07,740 --> 00:14:12,060
wouldn't want to pass in authentication

00:14:10,320 --> 00:14:13,110
and then we're gonna say that the

00:14:12,060 --> 00:14:14,640
authentication method that we're going

00:14:13,110 --> 00:14:16,980
to use with a bearer token and we're

00:14:14,640 --> 00:14:19,530
gonna format that bearer token inside of

00:14:16,980 --> 00:14:20,580
there and then we're gonna pass it we're

00:14:19,530 --> 00:14:22,940
gonna since we're gonna be getting

00:14:20,580 --> 00:14:25,230
tweets we're gonna make a get request

00:14:22,940 --> 00:14:28,170
since we're searching for tweets and

00:14:25,230 --> 00:14:31,350
we're gonna want to pass in the URL and

00:14:28,170 --> 00:14:34,470
then we're gonna also want the headers

00:14:31,350 --> 00:14:36,480
to be equal to headers which is that

00:14:34,470 --> 00:14:39,300
variable that we've just looked at and

00:14:36,480 --> 00:14:41,220
then from here we're gonna want to make

00:14:39,300 --> 00:14:43,680
sure that the encoding is correct and

00:14:41,220 --> 00:14:46,530
then if everything is then we want to go

00:14:43,680 --> 00:14:48,690
through each of the lines and what we're

00:14:46,530 --> 00:14:51,330
gonna want to put that inside of a

00:14:48,690 --> 00:14:54,660
variable to get the JSON object back out

00:14:51,330 --> 00:14:57,960
and so from here we can actually print

00:14:54,660 --> 00:15:04,290
out our JSON data until the full object

00:14:57,960 --> 00:15:06,750
actually up here has two different

00:15:04,290 --> 00:15:10,230
objects inside of it there's thena which

00:15:06,750 --> 00:15:13,070
has the last ten tweets and then there's

00:15:10,230 --> 00:15:16,020
also Menna which has next tokens and

00:15:13,070 --> 00:15:18,240
lets you know how many results you'll

00:15:16,020 --> 00:15:20,070
get back and things like that but for

00:15:18,240 --> 00:15:25,200
the purposes of tonight we only need the

00:15:20,070 --> 00:15:26,220
last ten tweets just to be able to make

00:15:25,200 --> 00:15:31,010
sure that everything is running all

00:15:26,220 --> 00:15:34,380
right and debug if needed so from here

00:15:31,010 --> 00:15:38,250
we can actually since we don't need the

00:15:34,380 --> 00:15:39,390
meta object we can actually just get the

00:15:38,250 --> 00:15:42,240
data only

00:15:39,390 --> 00:15:45,420
so here's just the full data only object

00:15:42,240 --> 00:15:49,769
and then from here I like to pass that

00:15:45,420 --> 00:15:51,660
into a data frame just because it makes

00:15:49,769 --> 00:15:55,050
it a little bit easier to work with and

00:15:51,660 --> 00:15:58,649
a little bit easier to look at so from

00:15:55,050 --> 00:16:01,890
here let's run this and then we can get

00:15:58,649 --> 00:16:04,829
back a data frame which has the tweets

00:16:01,890 --> 00:16:09,600
and the IDS so it has the text of the

00:16:04,829 --> 00:16:10,769
tweet and the ID which is pretty it's

00:16:09,600 --> 00:16:12,510
pretty cool to look at so you can

00:16:10,769 --> 00:16:15,930
actually take a look and you can kind of

00:16:12,510 --> 00:16:19,079
see that the text seems really similar

00:16:15,930 --> 00:16:21,570
and that's what really allows this to

00:16:19,079 --> 00:16:23,490
work so well is that they only use

00:16:21,570 --> 00:16:25,620
certain words so it was really easy to

00:16:23,490 --> 00:16:30,420
kind of parse this out and create a

00:16:25,620 --> 00:16:34,470
solution that worked for me so there is

00:16:30,420 --> 00:16:37,410
this client function that we or this

00:16:34,470 --> 00:16:39,089
client variable that we created that we

00:16:37,410 --> 00:16:41,279
can create just by calling the Twilio

00:16:39,089 --> 00:16:45,480
connect and that's again what's gonna

00:16:41,279 --> 00:16:49,230
allow us to connect to Twilio and from

00:16:45,480 --> 00:16:51,510
here that there's this logic statement

00:16:49,230 --> 00:16:55,730
that basically allows us to see if the

00:16:51,510 --> 00:16:58,649
words suspend in and tomorrow up here in

00:16:55,730 --> 00:17:01,680
the text of the tweet so it's pretty

00:16:58,649 --> 00:17:03,839
exciting and then if the word suspended

00:17:01,680 --> 00:17:06,929
in tomorrow appear in this nested

00:17:03,839 --> 00:17:10,500
payment then hence the message I like

00:17:06,929 --> 00:17:12,929
having Halpert print statements just

00:17:10,500 --> 00:17:16,169
because it helps me debug you can also

00:17:12,929 --> 00:17:17,040
add in more robust logging as well if

00:17:16,169 --> 00:17:19,140
you're doing something a little bit more

00:17:17,040 --> 00:17:21,870
complicated but for my purpose print

00:17:19,140 --> 00:17:24,410
statements were pretty useful and then

00:17:21,870 --> 00:17:29,429
if not then I say no today friend and if

00:17:24,410 --> 00:17:30,990
it's not then but it looks like New York

00:17:29,429 --> 00:17:33,299
City alternate imma shoot parking

00:17:30,990 --> 00:17:36,990
restrictions are not in effect tomorrow

00:17:33,299 --> 00:17:40,320
so we should get a text oh wow I did get

00:17:36,990 --> 00:17:43,110
a text super exciting and you might be

00:17:40,320 --> 00:17:45,840
wondering what does that look like so if

00:17:43,110 --> 00:17:48,059
the right conditions are met I get a

00:17:45,840 --> 00:17:50,070
text that says you don't have to move

00:17:48,059 --> 00:17:52,110
your car tonight enjoy your night Jess

00:17:50,070 --> 00:17:53,600
and that's what it looks like on my

00:17:52,110 --> 00:17:56,929
server it used to be running on

00:17:53,600 --> 00:17:58,960
30 a.m. and 5 p.m. but these days I

00:17:56,929 --> 00:18:01,100
actually have it only running at 5 p.m.

00:17:58,960 --> 00:18:03,200
so let's talk a little about the

00:18:01,100 --> 00:18:05,179
employment I currently have this

00:18:03,200 --> 00:18:06,650
deployed to a digital ocean sniper but I

00:18:05,179 --> 00:18:08,390
thought about doing something a little

00:18:06,650 --> 00:18:10,580
bit more surveillance like using a

00:18:08,390 --> 00:18:13,580
lambda function and I'm currently just

00:18:10,580 --> 00:18:16,309
using her cron job to set it to send me

00:18:13,580 --> 00:18:18,919
a text at 5:00 p.m. every day so the

00:18:16,309 --> 00:18:20,960
conclusion of this TAC you might be

00:18:18,919 --> 00:18:23,900
wondering why didn't you make this so

00:18:20,960 --> 00:18:25,250
you do get a text when you have to move

00:18:23,900 --> 00:18:26,990
your car instead of when you don't I

00:18:25,250 --> 00:18:30,500
mean this is a question that people

00:18:26,990 --> 00:18:35,059
always ask and honestly I was very good

00:18:30,500 --> 00:18:36,770
at moving my car almost to go that I had

00:18:35,059 --> 00:18:43,240
this nightly routine and I did it every

00:18:36,770 --> 00:18:45,380
night and it was pretty cool but I

00:18:43,240 --> 00:18:48,200
wanted to solve a problem that I was

00:18:45,380 --> 00:18:49,970
facing in my real life and I didn't need

00:18:48,200 --> 00:18:51,590
to be reminded to move my car I need to

00:18:49,970 --> 00:18:54,860
move my car I was just doing it too much

00:18:51,590 --> 00:18:56,600
so I challenge everybody who's watching

00:18:54,860 --> 00:19:00,919
this video to think about a problem that

00:18:56,600 --> 00:19:02,809
you have and to really think about how

00:19:00,919 --> 00:19:05,450
you can engineer a solution to solve

00:19:02,809 --> 00:19:09,710
that problem and if you do please let me

00:19:05,450 --> 00:19:13,130
know you can tweet on Nia Jessica Garson

00:19:09,710 --> 00:19:15,260
or send me a message also if you want to

00:19:13,130 --> 00:19:18,460
see a blog post version of this talk you

00:19:15,260 --> 00:19:22,520
can check it out at Tico slash parking

00:19:18,460 --> 00:19:25,970
post and you can also let us know on

00:19:22,520 --> 00:19:28,100
Twitter dev or on the Twitter community

00:19:25,970 --> 00:19:31,220
forums also if you run into any trouble

00:19:28,100 --> 00:19:32,750
along the way folks from my team

00:19:31,220 --> 00:19:35,030
including myself are there to help you

00:19:32,750 --> 00:19:37,000
on the Twitter community forums and you

00:19:35,030 --> 00:19:39,440
can always tweet at us at Twitter dev

00:19:37,000 --> 00:19:41,900
also if you're working with the Twitter

00:19:39,440 --> 00:19:44,240
API and you have feedback for us or

00:19:41,900 --> 00:19:47,390
there's a feature you want to see you

00:19:44,240 --> 00:19:49,940
can give us feedback at Twitter dev

00:19:47,390 --> 00:19:51,350
feedback that user voice calm and that's

00:19:49,940 --> 00:19:53,900
just if there's something you want to

00:19:51,350 --> 00:19:55,460
see from the API maybe there's a new

00:19:53,900 --> 00:19:56,600
endpoint that you want maybe there's an

00:19:55,460 --> 00:19:58,780
endpoint that you're working with it you

00:19:56,600 --> 00:20:02,360
wish did something that doesn't you yet

00:19:58,780 --> 00:20:04,340
please let us know also if you are

00:20:02,360 --> 00:20:05,299
building with the Twitter API I'd love

00:20:04,340 --> 00:20:07,140
to get to know you and have a

00:20:05,299 --> 00:20:10,990
conversation

00:20:07,140 --> 00:20:13,180
again feel free to send me a DM or tweet

00:20:10,990 --> 00:20:15,970
at me and thanks again for taking the

00:20:13,180 --> 00:20:18,300
time to watch this video thanks and have

00:20:15,970 --> 00:20:18,300

YouTube URL: https://www.youtube.com/watch?v=bK2iPDu7RDE


