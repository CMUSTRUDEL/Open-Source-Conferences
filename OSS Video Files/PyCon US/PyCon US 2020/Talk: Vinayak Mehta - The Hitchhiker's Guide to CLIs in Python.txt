Title: Talk: Vinayak Mehta - The Hitchhiker's Guide to CLIs in Python
Publication date: 2021-05-05
Playlist: PyCon US 2020
Description: 
	Presented by:
Vinayak Mehta

Command-line applications and interfaces are used by both newcomers and experienced Python developers everyday. But do you know how they came to be? Hop on to this ship as we go through the CLI galaxy and look at its history, explore the CLI anatomy and discover some Python packages that can help us create them.

We’ll then look at some widely used CLIs of our time. And emulate one of them by creating our own CLI using Click. Finally, we’ll package it and publish it on PyPI. Are you ready to travel faster-than-light using this ship’s Infinite Improbability Drive? Carry your towel!

Talk Slides: https://github.com/vinayak-mehta/talks/blob/master/2020-pycon-us/slides.pdf
Captions: 
	00:00:11,760 --> 00:00:17,580
hey everyone I'm Mike and this is the

00:00:14,730 --> 00:00:19,920
hijackers guide to see lies in Python in

00:00:17,580 --> 00:00:21,510
the beginning was the command line well

00:00:19,920 --> 00:00:24,150
not quite the command line we know today

00:00:21,510 --> 00:00:26,279
there were typewriters and we were

00:00:24,150 --> 00:00:28,080
communicating using Morse code so one

00:00:26,279 --> 00:00:29,640
fine day someone had an idea to connect

00:00:28,080 --> 00:00:32,099
a typewriter to an existing set of

00:00:29,640 --> 00:00:35,040
communication bias and the teletype

00:00:32,099 --> 00:00:36,420
rider was born teletypes Ruby need for

00:00:35,040 --> 00:00:38,100
an operator to know Morse code and

00:00:36,420 --> 00:00:39,930
improved message typing speed and

00:00:38,100 --> 00:00:41,460
delivery time making it possible for

00:00:39,930 --> 00:00:43,339
messages to be flashed across the

00:00:41,460 --> 00:00:46,320
cutting with little manual intervention

00:00:43,339 --> 00:00:47,909
in this 1932 video the narrator

00:00:46,320 --> 00:00:49,979
describes our teletype takes only a

00:00:47,909 --> 00:00:52,260
matter of seconds to deliver our message

00:00:49,979 --> 00:00:54,059
from London to Edinburgh which is in

00:00:52,260 --> 00:00:56,489
stark contrast to the earlier ETA one

00:00:54,059 --> 00:00:59,839
week one week was a time taken by a male

00:00:56,489 --> 00:01:01,890
coach to undertake the 400-mile journey

00:00:59,839 --> 00:01:03,510
meanwhile computers were becoming

00:01:01,890 --> 00:01:05,250
powerful enough to multitask and

00:01:03,510 --> 00:01:06,750
interact with users in real time

00:01:05,250 --> 00:01:08,880
in contrast through the earlier bus

00:01:06,750 --> 00:01:10,830
processing model so another finding

00:01:08,880 --> 00:01:12,600
someone had another idea to connect a

00:01:10,830 --> 00:01:14,870
teletype to a modem which would let them

00:01:12,600 --> 00:01:17,370
interact with these computers remotely

00:01:14,870 --> 00:01:20,210
among these teletypes was the fried and

00:01:17,370 --> 00:01:22,470
fixer writers and the teletype model 33

00:01:20,210 --> 00:01:24,000
Dell types like these are adapted to

00:01:22,470 --> 00:01:26,040
provide a user interface to early

00:01:24,000 --> 00:01:28,290
computers and this was the origin of the

00:01:26,040 --> 00:01:29,970
command-line interface users type

00:01:28,290 --> 00:01:31,650
commands after a prompt character was

00:01:29,970 --> 00:01:32,940
printed on paper after they were

00:01:31,650 --> 00:01:34,680
satisfied with the input they would

00:01:32,940 --> 00:01:37,140
press ENTER which would send a command

00:01:34,680 --> 00:01:38,580
to the computer and finally the output

00:01:37,140 --> 00:01:41,640
from the computer computer would be

00:01:38,580 --> 00:01:43,410
printed on paper again the adepts work

00:01:41,640 --> 00:01:44,520
continued to be used as tunnels to

00:01:43,410 --> 00:01:45,990
computers until

00:01:44,520 --> 00:01:49,200
video displays became widely available

00:01:45,990 --> 00:01:51,390
in the late 1970s video Thomas quickly

00:01:49,200 --> 00:01:53,220
became extremely popular IO devices on

00:01:51,390 --> 00:01:55,890
many different types of computers once

00:01:53,220 --> 00:01:59,070
manufacturers moved to a set of common

00:01:55,890 --> 00:02:01,770
standards which were ASCII a serial port

00:01:59,070 --> 00:02:05,550
along the terminal to a model in 24 rows

00:02:01,770 --> 00:02:07,409
and 80 columns of text today we live in

00:02:05,550 --> 00:02:09,810
a time where physical teletypes and

00:02:07,409 --> 00:02:11,550
video terminals are obsolete we instead

00:02:09,810 --> 00:02:13,760
of terminal emulators which are a

00:02:11,550 --> 00:02:16,709
software simulation of the real thing

00:02:13,760 --> 00:02:18,510
but have modern terminal emulators

00:02:16,709 --> 00:02:20,990
borrowed any legacy from these old meta

00:02:18,510 --> 00:02:22,640
beasts let's find out

00:02:20,990 --> 00:02:25,340
one thing that is clearly visible is the

00:02:22,640 --> 00:02:28,040
meme if we take out T and dy from

00:02:25,340 --> 00:02:29,540
teletype it becomes TTY which is a

00:02:28,040 --> 00:02:31,070
prefix than the need for virtual

00:02:29,540 --> 00:02:33,650
terminals on UNIX based operating

00:02:31,070 --> 00:02:35,120
systems the fundamental type of

00:02:33,650 --> 00:02:37,400
application that runs on a virtual

00:02:35,120 --> 00:02:39,380
terminal is a shell the shell prompts

00:02:37,400 --> 00:02:41,720
for commands from the user in sends it

00:02:39,380 --> 00:02:43,040
to execution after the paste in term

00:02:41,720 --> 00:02:46,190
which is similar to the teletype

00:02:43,040 --> 00:02:47,990
workflow so based on intuition the whole

00:02:46,190 --> 00:02:49,700
line kinda looks like this keyboard

00:02:47,990 --> 00:02:51,590
passes input to the terminal which

00:02:49,700 --> 00:02:53,510
passes it to the process the process

00:02:51,590 --> 00:02:54,170
does some work and gives the output back

00:02:53,510 --> 00:02:56,750
to the terminal

00:02:54,170 --> 00:02:59,150
which then prints it on the display but

00:02:56,750 --> 00:03:00,400
an illusion sets in between the terminal

00:02:59,150 --> 00:03:03,350
in the process

00:03:00,400 --> 00:03:05,300
da - it's kinda like an interface

00:03:03,350 --> 00:03:07,220
interface through some default settings

00:03:05,300 --> 00:03:09,350
for socket communication parameters in

00:03:07,220 --> 00:03:12,440
line discipline which affect how text is

00:03:09,350 --> 00:03:14,710
entered and printed the man page footer

00:03:12,440 --> 00:03:17,990
- lists all these available settings

00:03:14,710 --> 00:03:19,580
this also the stty utility which can be

00:03:17,990 --> 00:03:22,550
used to turn these settings on or off

00:03:19,580 --> 00:03:24,500
and s Levi - issues all the settings in

00:03:22,550 --> 00:03:26,000
their current values for example the

00:03:24,500 --> 00:03:28,250
speed of signal communication and the

00:03:26,000 --> 00:03:30,260
number of rows and columns let's see

00:03:28,250 --> 00:03:32,120
what some of these settings do I show

00:03:30,260 --> 00:03:35,960
the same examples Grandin routes shared

00:03:32,120 --> 00:03:37,340
in his 2017 North Bay Python keynote the

00:03:35,960 --> 00:03:39,680
first setting we look at his coil I

00:03:37,340 --> 00:03:41,600
Karen it refers to the canonical text

00:03:39,680 --> 00:03:43,070
editor used for some rudimentary editing

00:03:41,600 --> 00:03:45,350
of commands before they are sent to the

00:03:43,070 --> 00:03:47,090
process upon pressing enter for example

00:03:45,350 --> 00:03:49,820
moving the cursor back and forth or

00:03:47,090 --> 00:03:51,110
removing characters using backspace most

00:03:49,820 --> 00:03:53,450
interactive applications like text

00:03:51,110 --> 00:03:56,600
editors turn the setting off in handle

00:03:53,450 --> 00:03:58,400
all the line editing themselves the

00:03:56,600 --> 00:03:59,750
canonical text editor is on by default

00:03:58,400 --> 00:04:02,600
and we can turn it off using a

00:03:59,750 --> 00:04:05,330
straightaway like this let's see what it

00:04:02,600 --> 00:04:07,460
does but first we'll open capped since

00:04:05,330 --> 00:04:08,960
the canonical x-rated is on the

00:04:07,460 --> 00:04:11,390
introduce buffer it will be presenter

00:04:08,960 --> 00:04:14,990
you can also use backspace to remove

00:04:11,390 --> 00:04:17,600
characters now now let's turn off I can

00:04:14,990 --> 00:04:19,750
amusing stt by - I kernel in use cat

00:04:17,600 --> 00:04:19,750
again

00:04:19,870 --> 00:04:24,280
as you can see the text is not being

00:04:22,300 --> 00:04:25,960
buffered now that is receiving a

00:04:24,280 --> 00:04:27,550
character as soon as they enter it and

00:04:25,960 --> 00:04:30,430
printing it right away rather than one

00:04:27,550 --> 00:04:32,260
line at a time we can turn I Canon back

00:04:30,430 --> 00:04:36,430
on by removing the - from the earlier

00:04:32,260 --> 00:04:38,740
command another setting is onl sphere

00:04:36,430 --> 00:04:41,139
where it is time for new line and Seija

00:04:38,740 --> 00:04:42,639
for parachuter the setting finds new

00:04:41,139 --> 00:04:44,650
lines in text and adds the carriage

00:04:42,639 --> 00:04:46,450
return to each one of them a carriage

00:04:44,650 --> 00:04:48,070
return make sure that the cursor moves

00:04:46,450 --> 00:04:50,860
back to the first column after in your

00:04:48,070 --> 00:04:52,900
line simulate was a teletype DS then the

00:04:50,860 --> 00:04:55,540
paper carriage would return to the first

00:04:52,900 --> 00:04:57,130
column with the new line a carriage

00:04:55,540 --> 00:04:58,660
return without the newline character is

00:04:57,130 --> 00:05:01,210
used to make progress bars on modern day

00:04:58,660 --> 00:05:02,860
tablets the program updates the progress

00:05:01,210 --> 00:05:04,540
moves the cursor back to the first

00:05:02,860 --> 00:05:07,169
column and then overrides the only

00:05:04,540 --> 00:05:10,000
promise with the new one

00:05:07,169 --> 00:05:13,570
when LCLs also on by default can be

00:05:10,000 --> 00:05:16,060
turned off using SVG I like this we look

00:05:13,570 --> 00:05:18,310
at PS the output looks very structured

00:05:16,060 --> 00:05:22,479
now let's turn off ons here and look at

00:05:18,310 --> 00:05:24,610
the PS output again it type in PS and as

00:05:22,479 --> 00:05:26,650
we can see the illusion is gone this is

00:05:24,610 --> 00:05:29,229
the real thing the cursor does not

00:05:26,650 --> 00:05:31,270
return to the first column even though

00:05:29,229 --> 00:05:33,789
the lines are being painted on new line

00:05:31,270 --> 00:05:35,169
a lot of applications are written with

00:05:33,789 --> 00:05:36,760
this assumption that the terminal will

00:05:35,169 --> 00:05:38,410
automatically move back the cursor to

00:05:36,760 --> 00:05:41,320
the new to the first column in the

00:05:38,410 --> 00:05:43,270
printer new line there's also a coupe

00:05:41,320 --> 00:05:44,710
which is on by default a coder exit

00:05:43,270 --> 00:05:47,470
terminal to print every character that

00:05:44,710 --> 00:05:50,889
we put back on the display what happens

00:05:47,470 --> 00:05:53,520
if we turn it off we look at cardigan we

00:05:50,889 --> 00:05:56,950
can see what we are typing hello world

00:05:53,520 --> 00:06:01,720
but when we turn it off using SCT why -

00:05:56,950 --> 00:06:03,700
echo this happens but in C card being

00:06:01,720 --> 00:06:05,710
typed in we didn't even see the input

00:06:03,700 --> 00:06:07,530
strings until cat which was running in

00:06:05,710 --> 00:06:09,729
the background printed them for us

00:06:07,530 --> 00:06:12,760
programmes turn off a Kovan they ask the

00:06:09,729 --> 00:06:14,289
users for passwords if you are

00:06:12,760 --> 00:06:16,030
experimenting with Tamiya settings you

00:06:14,289 --> 00:06:17,729
can use a reset command to return all of

00:06:16,030 --> 00:06:19,870
these settings to their default values

00:06:17,729 --> 00:06:21,820
you can also check out the timaeus

00:06:19,870 --> 00:06:24,010
module in the Python standard library to

00:06:21,820 --> 00:06:26,080
turn these settings on or off from your

00:06:24,010 --> 00:06:27,699
Python code

00:06:26,080 --> 00:06:29,550
another way to change a terminal state

00:06:27,699 --> 00:06:31,990
is through in banded out of band signals

00:06:29,550 --> 00:06:33,580
in back singling means that you throwing

00:06:31,990 --> 00:06:35,650
some special characters in your input

00:06:33,580 --> 00:06:37,000
the terminal interprets these special

00:06:35,650 --> 00:06:38,919
characters as commands and does not

00:06:37,000 --> 00:06:41,770
print them it instead causes the

00:06:38,919 --> 00:06:43,449
intended effect but made to do in bank

00:06:41,770 --> 00:06:45,639
signaling is using control characters

00:06:43,449 --> 00:06:47,560
for example control H will do a

00:06:45,639 --> 00:06:50,440
backspace in control C will interrupt

00:06:47,560 --> 00:06:52,330
the running process and another ways to

00:06:50,440 --> 00:06:53,830
use escape sequences which can control

00:06:52,330 --> 00:06:56,650
things like cursor location in text

00:06:53,830 --> 00:06:58,270
color for example printing the first

00:06:56,650 --> 00:07:00,520
sequence a will clear the screen in

00:06:58,270 --> 00:07:04,270
printing the second sequence before a

00:07:00,520 --> 00:07:05,620
string will make that string bold the

00:07:04,270 --> 00:07:07,599
middles are also be configured with

00:07:05,620 --> 00:07:08,830
input and output streams where the input

00:07:07,599 --> 00:07:11,409
stream is mapped to the keyboard and

00:07:08,830 --> 00:07:13,419
output streams are displayed this

00:07:11,409 --> 00:07:15,219
ability to automatically map input and

00:07:13,419 --> 00:07:17,680
output to the keyboard in display by

00:07:15,219 --> 00:07:19,810
default was a UNIX breakthrough in

00:07:17,680 --> 00:07:21,639
operating systems before UNIX programs

00:07:19,810 --> 00:07:23,919
are to explicitly connect to appropriate

00:07:21,639 --> 00:07:25,750
IO devices which was a tedious thing to

00:07:23,919 --> 00:07:28,990
do because of lack of standards across

00:07:25,750 --> 00:07:30,279
systems here s adenine as the input

00:07:28,990 --> 00:07:33,250
stream where the program bleeds its

00:07:30,279 --> 00:07:34,779
input data and STD out an STD our our

00:07:33,250 --> 00:07:37,930
output streams then the program writes

00:07:34,779 --> 00:07:40,060
its output it in error messages unless

00:07:37,930 --> 00:07:42,819
of course data is being redirected using

00:07:40,060 --> 00:07:44,529
some operators the greater than N double

00:07:42,819 --> 00:07:46,569
greater than our Z Direction operators

00:07:44,529 --> 00:07:48,639
which redirect the program programs

00:07:46,569 --> 00:07:50,139
output to a file the only difference

00:07:48,639 --> 00:07:51,669
between the two is that the first one

00:07:50,139 --> 00:07:54,610
will override the file while the second

00:07:51,669 --> 00:07:56,650
one will append to the file another

00:07:54,610 --> 00:07:58,330
redirection of platens the pipe which

00:07:56,650 --> 00:08:01,060
makes the output of one program my input

00:07:58,330 --> 00:08:02,379
to another now that we have an

00:08:01,060 --> 00:08:03,699
understanding of how the terminal

00:08:02,379 --> 00:08:05,620
evolved and how it works

00:08:03,699 --> 00:08:08,979
let's look at programs that run inside a

00:08:05,620 --> 00:08:11,199
terminal command line interfaces the

00:08:08,979 --> 00:08:13,120
words interfaces applications programs

00:08:11,199 --> 00:08:15,580
and tools are used interchangeably but

00:08:13,120 --> 00:08:18,009
they refer to the same thing well at

00:08:15,580 --> 00:08:19,750
least most of the time Eli's make it

00:08:18,009 --> 00:08:21,400
easy to automate repetitive tasks by

00:08:19,750 --> 00:08:24,789
shell scripting in our kind of point to

00:08:21,400 --> 00:08:26,979
use the general usage pattern of our CLI

00:08:24,789 --> 00:08:28,210
looks like this the shell displays the

00:08:26,979 --> 00:08:30,669
prompt arrow sign that it's ready to

00:08:28,210 --> 00:08:32,589
take it input they use within types in

00:08:30,669 --> 00:08:34,570
the command that they want to run along

00:08:32,589 --> 00:08:36,579
with some options and some arguments and

00:08:34,570 --> 00:08:38,800
finally ending the input by pressing the

00:08:36,579 --> 00:08:39,370
enter key this completes the command

00:08:38,800 --> 00:08:42,039
line of tech

00:08:39,370 --> 00:08:43,620
going into the command has been executed

00:08:42,039 --> 00:08:46,650
and output is printed on the terminal

00:08:43,620 --> 00:08:48,520
but what are these arguments and options

00:08:46,650 --> 00:08:50,680
arguments that acquire items of

00:08:48,520 --> 00:08:51,910
information for a program required in

00:08:50,680 --> 00:08:54,130
the sense that the program would work

00:08:51,910 --> 00:08:56,230
without them they are often positional

00:08:54,130 --> 00:08:58,180
which means that an arguments position

00:08:56,230 --> 00:09:01,390
in the command line helps the program

00:08:58,180 --> 00:09:03,250
identify the arguments type for example

00:09:01,390 --> 00:09:04,990
he has the copy command which can

00:09:03,250 --> 00:09:07,420
function without both the source and

00:09:04,990 --> 00:09:08,950
destination arguments in the argument in

00:09:07,420 --> 00:09:10,810
the first position will always be the

00:09:08,950 --> 00:09:13,200
source in the argument in the second

00:09:10,810 --> 00:09:15,760
position will always be the destination

00:09:13,200 --> 00:09:17,830
an option or a flag is used to modify

00:09:15,760 --> 00:09:19,390
the operation of a command as the name

00:09:17,830 --> 00:09:21,460
suggests they are optional and they may

00:09:19,390 --> 00:09:22,990
have some default values the general

00:09:21,460 --> 00:09:24,910
convention is to have hyphens in front

00:09:22,990 --> 00:09:28,000
of a character or a word to identify the

00:09:24,910 --> 00:09:29,800
option for example in the copy command -

00:09:28,000 --> 00:09:31,390
all can change its operation by asking

00:09:29,800 --> 00:09:32,589
it to recursively look for files in the

00:09:31,390 --> 00:09:36,370
source and then copy them to the

00:09:32,589 --> 00:09:38,980
destination and one of the criticisms of

00:09:36,370 --> 00:09:41,110
a CLI is - is the lack of cues it offers

00:09:38,980 --> 00:09:43,600
to the users about all its available

00:09:41,110 --> 00:09:45,790
actions in contrast book a graphical

00:09:43,600 --> 00:09:48,459
user interface which it usually informs

00:09:45,790 --> 00:09:52,060
the user about these actions with menus

00:09:48,459 --> 00:09:53,800
icons or other visual cues to overcome

00:09:52,060 --> 00:09:55,660
this limitation many sailor programmes

00:09:53,800 --> 00:09:57,370
display some brief documentation around

00:09:55,660 --> 00:09:59,830
that arguments and options that they

00:09:57,370 --> 00:10:01,240
support this documentation can be viewed

00:09:59,830 --> 00:10:04,690
by invoking the sea line with the help

00:10:01,240 --> 00:10:07,120
option some of them also have man pages

00:10:04,690 --> 00:10:08,589
which is short for manual page by

00:10:07,120 --> 00:10:10,360
default the man command uses the

00:10:08,589 --> 00:10:12,190
terminal pager program such as more or

00:10:10,360 --> 00:10:14,500
less to display the large manual for a

00:10:12,190 --> 00:10:17,950
CLI this makes it easy for the user to

00:10:14,500 --> 00:10:19,150
scroll and search through it well you

00:10:17,950 --> 00:10:21,459
must be wondering that there is a lot of

00:10:19,150 --> 00:10:23,080
moving parts is each programmer could

00:10:21,459 --> 00:10:24,910
write this e line differently for

00:10:23,080 --> 00:10:27,220
example they could use - X instead of

00:10:24,910 --> 00:10:28,930
hyphen H to display the head text are

00:10:27,220 --> 00:10:30,459
there any standards to make sure that

00:10:28,930 --> 00:10:31,360
that every sale I follow some basic

00:10:30,459 --> 00:10:35,709
conventions

00:10:31,360 --> 00:10:37,660
yes it's quite POSIX POSIX mix api is

00:10:35,709 --> 00:10:39,910
provided by unix-based operating systems

00:10:37,660 --> 00:10:42,339
uniform api such as command-line

00:10:39,910 --> 00:10:45,940
interfaces to follow the POSIX standard

00:10:42,339 --> 00:10:48,100
is to be POSIX compliant there's also

00:10:45,940 --> 00:10:49,990
the XD GP staticy spec

00:10:48,100 --> 00:10:51,310
which dictates LCL I should store the

00:10:49,990 --> 00:10:53,050
different types of files that they need

00:10:51,310 --> 00:10:55,139
for their function so that everyone

00:10:53,050 --> 00:10:57,820
doesn't save files all over the place

00:10:55,139 --> 00:11:00,009
these files could be configuration files

00:10:57,820 --> 00:11:01,509
data files of the program cache which

00:11:00,009 --> 00:11:04,899
should go into these directories on our

00:11:01,509 --> 00:11:06,819
users file system now let's see how we

00:11:04,899 --> 00:11:08,740
can implement a command-line interface

00:11:06,819 --> 00:11:10,420
using Python there are several options

00:11:08,740 --> 00:11:13,690
to do this both in the standard library

00:11:10,420 --> 00:11:15,610
and on PI P I will use a small example

00:11:13,690 --> 00:11:17,350
say like well it's small pepper and see

00:11:15,610 --> 00:11:18,779
how we can implement it using all these

00:11:17,350 --> 00:11:21,040
different options

00:11:18,779 --> 00:11:22,420
smart pipe just has one sub command

00:11:21,040 --> 00:11:25,089
called install using which we can

00:11:22,420 --> 00:11:27,250
install a package from pi PI it also has

00:11:25,089 --> 00:11:29,350
an upgrade option which will upgrade the

00:11:27,250 --> 00:11:30,730
package if it's already installed in the

00:11:29,350 --> 00:11:33,670
package name required argument to

00:11:30,730 --> 00:11:35,860
identify the package itself let's look

00:11:33,670 --> 00:11:38,170
at the standard library first it has the

00:11:35,860 --> 00:11:40,600
Syst module which comes with the art be

00:11:38,170 --> 00:11:42,100
variable since the dot b is a list where

00:11:40,600 --> 00:11:43,690
the first element contains the name of

00:11:42,100 --> 00:11:45,399
the C light that was removed in the

00:11:43,690 --> 00:11:48,459
restaurant limit come on in options pass

00:11:45,399 --> 00:11:50,139
to the CLI internally 6.80 uses a get

00:11:48,459 --> 00:11:53,139
off module to parse and create this list

00:11:50,139 --> 00:11:54,610
of command-line options the get off

00:11:53,139 --> 00:11:56,380
module is a parser for command and

00:11:54,610 --> 00:11:58,269
options whose API is designed to be

00:11:56,380 --> 00:12:00,970
similar to the UNIX cannot function and

00:11:58,269 --> 00:12:03,850
it follows the POSIX standard let's look

00:12:00,970 --> 00:12:05,319
at some code so when the CLR is invoked

00:12:03,850 --> 00:12:07,930
we get the list of arguments using

00:12:05,319 --> 00:12:10,209
Susteren on me and since the first

00:12:07,930 --> 00:12:12,610
element is the name of the CLI itself we

00:12:10,209 --> 00:12:15,279
check for the element at index one is if

00:12:12,610 --> 00:12:18,610
it has - H or - - hell we print the help

00:12:15,279 --> 00:12:19,990
and do the same for the Vol'jin finally

00:12:18,610 --> 00:12:21,370
we check the sub command that wasn't

00:12:19,990 --> 00:12:25,540
booked in dispatched control to the

00:12:21,370 --> 00:12:27,779
relevant code up until python 3.2 the

00:12:25,540 --> 00:12:30,579
standard library also had the

00:12:27,779 --> 00:12:31,839
opportunist ins been deprecated or purse

00:12:30,579 --> 00:12:34,060
could only purse options are not

00:12:31,839 --> 00:12:35,949
positional arguments something that

00:12:34,060 --> 00:12:38,589
Steven method the author of arc purse

00:12:35,949 --> 00:12:40,540
talks about in pep 3 diamond this may

00:12:38,589 --> 00:12:42,459
propose the duplication of offers in the

00:12:40,540 --> 00:12:44,649
favour of the new and improved our parse

00:12:42,459 --> 00:12:49,089
module it was a food bike we do on

00:12:44,649 --> 00:12:51,009
February 21 2010 10 years ago our purse

00:12:49,089 --> 00:12:52,930
was written because both gate octane hot

00:12:51,009 --> 00:12:56,199
/ support only options are not arguments

00:12:52,930 --> 00:12:57,579
as personals both and as a result it is

00:12:56,199 --> 00:12:59,949
able to auto generate better health

00:12:57,579 --> 00:13:01,630
messages alpha is also allowed

00:12:59,949 --> 00:13:04,540
customisation of characters there

00:13:01,630 --> 00:13:06,310
you identify options for example using a

00:13:04,540 --> 00:13:09,340
plus instead of a - while he went

00:13:06,310 --> 00:13:11,560
forward slashes my price also added

00:13:09,340 --> 00:13:13,570
support for subcommands this is a common

00:13:11,560 --> 00:13:16,270
pattern in CLS for example tip installed

00:13:13,570 --> 00:13:18,490
pretty simple search let's see how how

00:13:16,270 --> 00:13:19,470
the small pipe code looks like using art

00:13:18,490 --> 00:13:22,540
parts

00:13:19,470 --> 00:13:25,120
so we import our paths and initially is

00:13:22,540 --> 00:13:28,030
a parser object in passing a description

00:13:25,120 --> 00:13:31,660
of a sailor we also had a version option

00:13:28,030 --> 00:13:33,670
to it we then initialize a sub parser

00:13:31,660 --> 00:13:36,640
subject in add a sub parser for the

00:13:33,670 --> 00:13:38,050
install command to which we then add an

00:13:36,640 --> 00:13:40,300
upgrade option in a package named

00:13:38,050 --> 00:13:41,920
argument the action is equal to store

00:13:40,300 --> 00:13:44,430
true make sure that the upgrade option

00:13:41,920 --> 00:13:46,840
is treated like a boolean flag and

00:13:44,430 --> 00:13:48,910
inventor Scylla is invoked we call the

00:13:46,840 --> 00:13:50,860
parser dot parse arcs function which

00:13:48,910 --> 00:13:52,510
gives us a namespace object with all the

00:13:50,860 --> 00:13:55,120
parts - command-line options as its

00:13:52,510 --> 00:13:56,470
attributes finally we check the sub

00:13:55,120 --> 00:13:59,950
command that was invoked in dispatch

00:13:56,470 --> 00:14:01,210
control to the relevant good then I

00:13:59,950 --> 00:14:04,570
think it is that we got an

00:14:01,210 --> 00:14:06,190
auto-generated hip for a spheroid now

00:14:04,570 --> 00:14:08,560
let's look at some packages that are

00:14:06,190 --> 00:14:10,300
available on PI period the first one is

00:14:08,560 --> 00:14:12,250
talk after it was written by vladimir

00:14:10,300 --> 00:14:14,200
Kelley Schiffman is kinda cool in the

00:14:12,250 --> 00:14:16,060
way it works now cop takes in a

00:14:14,200 --> 00:14:18,160
documentation first approached writing

00:14:16,060 --> 00:14:19,210
zeroes it just requires a POSIX

00:14:18,160 --> 00:14:21,130
Thermolite Hillston

00:14:19,210 --> 00:14:23,140
as an input from which it'll inverse of

00:14:21,130 --> 00:14:26,140
commands options and arguments on its

00:14:23,140 --> 00:14:27,670
own so this time around we first create

00:14:26,140 --> 00:14:30,970
a head string which shows our seal has

00:14:27,670 --> 00:14:32,410
description and usage and when the Serie

00:14:30,970 --> 00:14:34,330
is invoked we call doc opt

00:14:32,410 --> 00:14:36,250
pass in the head string and abortion in

00:14:34,330 --> 00:14:37,750
detector it returns a dictionary of

00:14:36,250 --> 00:14:39,360
parts command-line options which is

00:14:37,750 --> 00:14:41,530
pretty neat

00:14:39,360 --> 00:14:43,120
we again check the sub command that was

00:14:41,530 --> 00:14:46,810
invoked and dispatched control to the

00:14:43,120 --> 00:14:48,520
delivered good in all examples still now

00:14:46,810 --> 00:14:50,110
we saw that in addition to parsing

00:14:48,520 --> 00:14:52,300
results we had to write some boilerplate

00:14:50,110 --> 00:14:54,610
to dispatch control to the relevant

00:14:52,300 --> 00:14:56,260
install in upgrade code if you had to

00:14:54,610 --> 00:14:57,160
validate the parse command-line options

00:14:56,260 --> 00:14:59,500
we would need to add some more

00:14:57,160 --> 00:15:01,780
boilerplate this boilerplate can grow

00:14:59,500 --> 00:15:03,340
real make for large applications there

00:15:01,780 --> 00:15:04,390
might also be some common features that

00:15:03,340 --> 00:15:07,300
we might want to add for example

00:15:04,390 --> 00:15:09,750
progress bars and colors let's look at a

00:15:07,300 --> 00:15:11,980
package that could help us do that check

00:15:09,750 --> 00:15:13,500
it was written by Arman order how to

00:15:11,980 --> 00:15:15,210
support the flask project

00:15:13,500 --> 00:15:17,340
check is designed to be miserable in

00:15:15,210 --> 00:15:19,080
composable which means that it supports

00:15:17,340 --> 00:15:21,480
arbitrary nesting of commands for

00:15:19,080 --> 00:15:23,640
example pythons set up dot by s this

00:15:21,480 --> 00:15:24,480
Buddhist V with the beautiful sub

00:15:23,640 --> 00:15:26,790
command is called

00:15:24,480 --> 00:15:29,430
after s test kind of like a sub command

00:15:26,790 --> 00:15:31,110
chain click also automatically

00:15:29,430 --> 00:15:32,490
dispatches control to the relevant code

00:15:31,110 --> 00:15:34,860
base from the sub command that was

00:15:32,490 --> 00:15:36,120
invoked it supports callbacks which can

00:15:34,860 --> 00:15:37,380
be used to validate the parsed

00:15:36,120 --> 00:15:39,660
command-line options and its

00:15:37,380 --> 00:15:42,900
posix-compliant let's see what small

00:15:39,660 --> 00:15:45,180
Pepco looks like using click the import

00:15:42,900 --> 00:15:48,720
click had a function coin CLI with the

00:15:45,180 --> 00:15:50,850
dock strip and since click follows a

00:15:48,720 --> 00:15:52,860
decorator based approach to writing CLS

00:15:50,850 --> 00:15:55,230
we had a clicked group decorator to the

00:15:52,860 --> 00:15:57,330
function this makes the CLI function a

00:15:55,230 --> 00:16:00,270
command group to which sub commands can

00:15:57,330 --> 00:16:02,790
be added we also add a version option to

00:16:00,270 --> 00:16:04,440
it we then define a function called

00:16:02,790 --> 00:16:06,990
install with the doc string again and

00:16:04,440 --> 00:16:08,400
this function will basically contain the

00:16:06,990 --> 00:16:11,040
code required to install our breeder

00:16:08,400 --> 00:16:13,050
package we then convert this function

00:16:11,040 --> 00:16:15,210
into a sub come on using the CLI command

00:16:13,050 --> 00:16:16,650
decorator the CLI in single I wrote

00:16:15,210 --> 00:16:20,430
command is the command group that we

00:16:16,650 --> 00:16:21,930
defined earlier then in add an option

00:16:20,430 --> 00:16:23,820
quite upgrade along with the head string

00:16:21,930 --> 00:16:26,310
using that check that option decorator

00:16:23,820 --> 00:16:29,190
the slack is equal to true mix of radom

00:16:26,310 --> 00:16:30,420
boolean flag finally we add a package

00:16:29,190 --> 00:16:33,510
named argument using the click dot

00:16:30,420 --> 00:16:35,010
argument decorator in men the Sigma is

00:16:33,510 --> 00:16:36,450
invoked click will automatically

00:16:35,010 --> 00:16:38,130
dispatch controller to the relevant code

00:16:36,450 --> 00:16:40,980
which in this case is the install

00:16:38,130 --> 00:16:42,570
function we will get the command-line

00:16:40,980 --> 00:16:44,400
arguments and options as keyword

00:16:42,570 --> 00:16:46,080
arguments to the install function which

00:16:44,400 --> 00:16:49,800
we can then use to install our ablator

00:16:46,080 --> 00:16:50,940
package click also auto generates a

00:16:49,800 --> 00:16:52,350
health policy light based on the

00:16:50,940 --> 00:16:55,980
function dock strings then the option

00:16:52,350 --> 00:16:57,839
hits things that we added earlier click

00:16:55,980 --> 00:16:59,580
promises that win multiple apps written

00:16:57,839 --> 00:17:01,290
using click are strung together they

00:16:59,580 --> 00:17:03,210
will work seamlessly which means that

00:17:01,290 --> 00:17:05,220
multiple people can work on small parts

00:17:03,210 --> 00:17:07,560
of a large seal and then stitch them all

00:17:05,220 --> 00:17:09,800
together in the end the click we are

00:17:07,560 --> 00:17:12,660
building a CLI beard we don't have to

00:17:09,800 --> 00:17:14,069
define parcels from the start or focus

00:17:12,660 --> 00:17:16,439
on our head takes from the start is

00:17:14,069 --> 00:17:18,390
great for quick iterations now let's

00:17:16,439 --> 00:17:21,900
look at some common use cases and see

00:17:18,390 --> 00:17:23,760
how we can implement them using click we

00:17:21,900 --> 00:17:24,510
use another small example silicon small

00:17:23,760 --> 00:17:26,789
gate

00:17:24,510 --> 00:17:28,409
small gate as the name suggests is a

00:17:26,789 --> 00:17:31,649
small Egret clone with six good

00:17:28,409 --> 00:17:35,190
subcommands John config log statuses

00:17:31,649 --> 00:17:36,720
commit in push we again start by

00:17:35,190 --> 00:17:39,510
defining a sea life function did object

00:17:36,720 --> 00:17:42,240
or group decorator now let's go through

00:17:39,510 --> 00:17:43,980
the use cases common Theon use cases to

00:17:42,240 --> 00:17:45,299
display progress bars to the user for

00:17:43,980 --> 00:17:47,519
example we should let the user know

00:17:45,299 --> 00:17:48,960
about the progress about of how many

00:17:47,519 --> 00:17:51,360
files have been cloned when they invoke

00:17:48,960 --> 00:17:54,210
the clone sub-command Jake as a progress

00:17:51,360 --> 00:17:55,440
bar utility that can help us do this we

00:17:54,210 --> 00:17:57,720
define the clone sub command with the

00:17:55,440 --> 00:17:59,700
source and destination arguments let's

00:17:57,720 --> 00:18:01,409
say let's say we have a list of files we

00:17:59,700 --> 00:18:03,149
want to prune we pass the list to the

00:18:01,409 --> 00:18:06,000
click dot progress bar context manager

00:18:03,149 --> 00:18:08,070
which returns an iterator as we iterate

00:18:06,000 --> 00:18:09,870
on it in download each file check will

00:18:08,070 --> 00:18:11,539
show the user a progress bar which will

00:18:09,870 --> 00:18:14,190
kind of look like this

00:18:11,539 --> 00:18:16,559
so when we invoke the trone sub command

00:18:14,190 --> 00:18:18,059
with the reopening we get to see a

00:18:16,559 --> 00:18:21,480
progress bar as the files are being

00:18:18,059 --> 00:18:22,950
downloaded one by one another use case

00:18:21,480 --> 00:18:25,139
is to possess user specific

00:18:22,950 --> 00:18:27,299
configuration to a file for example we

00:18:25,139 --> 00:18:29,190
should persist things like user name and

00:18:27,299 --> 00:18:30,809
email in an application folder when the

00:18:29,190 --> 00:18:33,029
user sets them using the convex of

00:18:30,809 --> 00:18:35,639
command click provides a function which

00:18:33,029 --> 00:18:37,139
can help us do this we define a convex

00:18:35,639 --> 00:18:39,510
sub come on with the key and value

00:18:37,139 --> 00:18:41,340
arguments then we get an applications

00:18:39,510 --> 00:18:44,190
folder path for small did you think that

00:18:41,340 --> 00:18:45,960
get up there function we create a trade

00:18:44,190 --> 00:18:47,940
a path if it does not exist in finally

00:18:45,960 --> 00:18:50,190
store user specific convex settings in a

00:18:47,940 --> 00:18:52,350
file called conflict let's make sure

00:18:50,190 --> 00:18:54,659
that I figure they follow the xdg stick

00:18:52,350 --> 00:18:57,000
and since the get update function is

00:18:54,659 --> 00:18:59,130
throught a cross platform it will run

00:18:57,000 --> 00:19:03,720
the most appropriate path on Windows Mac

00:18:59,130 --> 00:19:06,120
OS or Linux and it looks like this I set

00:19:03,720 --> 00:19:07,769
the username to midnight and if I do a

00:19:06,120 --> 00:19:09,960
cat on the config file in the

00:19:07,769 --> 00:19:12,480
application folder for small gate I can

00:19:09,960 --> 00:19:15,480
see that it is set and we can do do use

00:19:12,480 --> 00:19:18,269
this in the future we should also page

00:19:15,480 --> 00:19:19,830
large CLR outputs so so that the user

00:19:18,269 --> 00:19:22,049
can scroll through it instead of pending

00:19:19,830 --> 00:19:23,460
at all at once we can do this for the

00:19:22,049 --> 00:19:25,830
large commit log that the log

00:19:23,460 --> 00:19:27,659
sub-command prints click support spaced

00:19:25,830 --> 00:19:30,659
output by calling a terminal page of

00:19:27,659 --> 00:19:32,700
program so we define a log stop command

00:19:30,659 --> 00:19:33,940
where we can use the click dot echo by a

00:19:32,700 --> 00:19:35,830
pager function to

00:19:33,940 --> 00:19:39,100
play the log string and it looks like

00:19:35,830 --> 00:19:40,750
this when I invoke the knocks up command

00:19:39,100 --> 00:19:43,240
I can scroll through the large commit

00:19:40,750 --> 00:19:47,710
log here it's using the less terminal

00:19:43,240 --> 00:19:49,139
feature program we should also add color

00:19:47,710 --> 00:19:51,370
to filenames that are added or modified

00:19:49,139 --> 00:19:53,559
when they are printed using the status

00:19:51,370 --> 00:19:55,799
sub command click supports adding color

00:19:53,559 --> 00:19:58,870
to text using the Colorama package and

00:19:55,799 --> 00:20:02,440
Colorama dancy escape sequences to text

00:19:58,870 --> 00:20:04,509
to color it and to do this we define a

00:20:02,440 --> 00:20:06,399
state a sub command let's say we have a

00:20:04,509 --> 00:20:07,779
list of files and a status we can use

00:20:06,399 --> 00:20:09,279
the click drag style function to add a

00:20:07,779 --> 00:20:11,710
foreground color and make the string

00:20:09,279 --> 00:20:14,080
would finally output it is in check dot

00:20:11,710 --> 00:20:17,220
echo the nice thing here is a clip will

00:20:14,080 --> 00:20:19,659
auto escape these escape sequences and

00:20:17,220 --> 00:20:23,919
when the output is redirected to a file

00:20:19,659 --> 00:20:25,870
and because like when we do that it it's

00:20:23,919 --> 00:20:27,330
usually a lot file then we would would

00:20:25,870 --> 00:20:30,039
not want to look at incomprehensible

00:20:27,330 --> 00:20:33,220
escape sequences while figuring out what

00:20:30,039 --> 00:20:35,649
went wrong in the log and this is what

00:20:33,220 --> 00:20:37,450
it looks like when we invoke the state a

00:20:35,649 --> 00:20:40,029
sub command we can see the new file that

00:20:37,450 --> 00:20:43,870
has been added a dot txt and it is

00:20:40,029 --> 00:20:45,639
colored green sometimes you might also

00:20:43,870 --> 00:20:47,710
want multi-line input from the user

00:20:45,639 --> 00:20:49,389
for example asking the user for a commit

00:20:47,710 --> 00:20:51,700
message when they move the commit sub

00:20:49,389 --> 00:20:53,620
command click supports launching editors

00:20:51,700 --> 00:20:56,110
for this use case and it automatically

00:20:53,620 --> 00:20:59,590
opens the users defined editor or falls

00:20:56,110 --> 00:21:00,909
back to a sensible default we define a

00:20:59,590 --> 00:21:03,309
commit sub command with the message

00:21:00,909 --> 00:21:05,309
option and if the user doesn't use a

00:21:03,309 --> 00:21:07,600
message option when they invoke the

00:21:05,309 --> 00:21:10,059
commit sub comment be launching editor

00:21:07,600 --> 00:21:12,789
to get that commit message and it looks

00:21:10,059 --> 00:21:15,519
like this in this case it opened rim

00:21:12,789 --> 00:21:17,080
which is my default editor I pass in the

00:21:15,519 --> 00:21:20,710
commit message in it gets commit it to

00:21:17,080 --> 00:21:22,179
the log you can also ask users for mine

00:21:20,710 --> 00:21:24,100
line input using the click drawn

00:21:22,179 --> 00:21:26,289
function this can be useful for the

00:21:24,100 --> 00:21:27,940
posts of command to ask user for

00:21:26,289 --> 00:21:30,850
credentials to push files to a remote

00:21:27,940 --> 00:21:32,980
repo we define a push sub-command

00:21:30,850 --> 00:21:34,840
with two arguments the remote repo we

00:21:32,980 --> 00:21:36,940
want to push to in the local branch we

00:21:34,840 --> 00:21:38,620
want to push and then we use the kick

00:21:36,940 --> 00:21:41,289
dot from function to ask the user for

00:21:38,620 --> 00:21:42,850
the username and password the return

00:21:41,289 --> 00:21:45,519
values will be stored in the username

00:21:42,850 --> 00:21:47,200
and password variable 0 once alone is it

00:21:45,519 --> 00:21:49,990
for the password from we've set time

00:21:47,200 --> 00:21:52,000
input is equal to true this won't print

00:21:49,990 --> 00:21:54,429
the password that the user types on the

00:21:52,000 --> 00:21:56,379
terminal internally click uses get pass

00:21:54,429 --> 00:21:56,889
from the standard lip to do this and get

00:21:56,379 --> 00:21:58,450
past

00:21:56,889 --> 00:22:02,019
turns the echo setting off using the

00:21:58,450 --> 00:22:04,480
term I was module and this is what it

00:22:02,019 --> 00:22:07,299
looks like I pass in my username I mean

00:22:04,480 --> 00:22:10,149
Ike and then I type in the password and

00:22:07,299 --> 00:22:13,210
it's not visible and finally the files

00:22:10,149 --> 00:22:15,159
get pushed to the river and we

00:22:13,210 --> 00:22:18,460
are done maybe small gets Eli with the

00:22:15,159 --> 00:22:21,639
hip auto-generated check also letters

00:22:18,460 --> 00:22:23,590
Alexis tests the CLS a period you can

00:22:21,639 --> 00:22:25,570
use the CLI donor class to invoke each

00:22:23,590 --> 00:22:28,470
sub command in a CLI and check the

00:22:25,570 --> 00:22:30,759
result against their expected output and

00:22:28,470 --> 00:22:32,289
these are only a subset of the feature

00:22:30,759 --> 00:22:34,090
set check has to offer you should

00:22:32,289 --> 00:22:35,980
totally check out the click docs at this

00:22:34,090 --> 00:22:39,190
link and to look at more awesome things

00:22:35,980 --> 00:22:41,740
that you can do with check finally let's

00:22:39,190 --> 00:22:43,360
package small get to do this we just

00:22:41,740 --> 00:22:45,909
feed a set of dot PI outside the small

00:22:43,360 --> 00:22:48,480
gate module and other console strips

00:22:45,909 --> 00:22:50,980
entry point to it console scripts allows

00:22:48,480 --> 00:22:53,470
Python functions to be registered it's

00:22:50,980 --> 00:22:56,500
come online programs you can check check

00:22:53,470 --> 00:22:59,350
out other things in the set dot pi in

00:22:56,500 --> 00:23:02,769
the github link at the end of this

00:22:59,350 --> 00:23:04,389
presentation in once we've packages the

00:23:02,769 --> 00:23:06,299
array we can also push it to pi pair so

00:23:04,389 --> 00:23:08,289
that other people can install and use it

00:23:06,299 --> 00:23:09,940
to do this we create a source

00:23:08,289 --> 00:23:11,710
distribution and a meal using set of dot

00:23:09,940 --> 00:23:15,399
pi and then upload them to pi player

00:23:11,710 --> 00:23:17,350
using twine now that we know how to

00:23:15,399 --> 00:23:19,210
write CLS in python let's briefly talk

00:23:17,350 --> 00:23:21,700
about the sealer in user experience as

00:23:19,210 --> 00:23:23,289
mentioned earlier we are operating in a

00:23:21,700 --> 00:23:24,909
very constrained design space as

00:23:23,289 --> 00:23:27,250
compared to graphical user interfaces

00:23:24,909 --> 00:23:29,409
which offer a lot more visual cues and

00:23:27,250 --> 00:23:31,269
guidance to the user there are some

00:23:29,409 --> 00:23:33,100
principles that can help us create a

00:23:31,269 --> 00:23:35,320
nice you explore the Cygnus that we

00:23:33,100 --> 00:23:38,440
write the first is to keep things simple

00:23:35,320 --> 00:23:40,869
and follow the UNIX philosophy of doing

00:23:38,440 --> 00:23:42,100
one thing and doing it real even writing

00:23:40,869 --> 00:23:44,200
programs so that they can work together

00:23:42,100 --> 00:23:46,840
using the redirection operators in

00:23:44,200 --> 00:23:48,490
handling tech streams one on the UNIX

00:23:46,840 --> 00:23:50,169
philosophy make sure that there are no

00:23:48,490 --> 00:23:50,830
surprises when the users interact with

00:23:50,169 --> 00:23:53,649
the zlx

00:23:50,830 --> 00:23:55,510
in the second is by making features

00:23:53,649 --> 00:23:56,190
discoverable by being forced coming

00:23:55,510 --> 00:23:57,990
about them

00:23:56,190 --> 00:24:00,360
kind of similar to the cues that the

00:23:57,990 --> 00:24:02,850
graphical interfaces offer some things

00:24:00,360 --> 00:24:04,470
that can let us do that are storing a

00:24:02,850 --> 00:24:06,390
user's command-line history and letting

00:24:04,470 --> 00:24:07,860
them search through it and maybe giving

00:24:06,390 --> 00:24:10,110
them suggestions for auto-completion

00:24:07,860 --> 00:24:13,020
based on the safety in the features that

00:24:10,110 --> 00:24:14,700
our CLI supports um J's Ramanujam talks

00:24:13,020 --> 00:24:16,530
about the same detail in his bike on

00:24:14,700 --> 00:24:19,830
2017 talk which you can find in the

00:24:16,530 --> 00:24:22,110
resources he also talks about prom

00:24:19,830 --> 00:24:24,180
toolkit a Python package by Johnson's

00:24:22,110 --> 00:24:25,170
lenders from toolkit can help you

00:24:24,180 --> 00:24:26,820
implement some of the history and

00:24:25,170 --> 00:24:29,640
auto-completion features we just talked

00:24:26,820 --> 00:24:33,050
about and make yourself fancy it's used

00:24:29,640 --> 00:24:35,130
by ipython in all the DB CLI tools

00:24:33,050 --> 00:24:37,200
finally you get at the end of a CL

00:24:35,130 --> 00:24:38,880
journey I hope you got a lot of touch

00:24:37,200 --> 00:24:41,430
points through the CLI ecosystem which

00:24:38,880 --> 00:24:42,870
you can now explore further I hope you

00:24:41,430 --> 00:24:45,330
also got an understanding of how

00:24:42,870 --> 00:24:47,880
terminals in CLS book in how to write

00:24:45,330 --> 00:24:49,860
feel as using Python this slide contains

00:24:47,880 --> 00:24:52,050
links for some of the resources that I

00:24:49,860 --> 00:24:53,400
mentioned throughout the talk the slides

00:24:52,050 --> 00:24:56,220
are themselves available on the first

00:24:53,400 --> 00:24:57,570
link if you have any questions you can

00:24:56,220 --> 00:24:59,460
reach out to me on Twitter vortex

00:24:57,570 --> 00:25:01,650
underscore ape or using the contact

00:24:59,460 --> 00:25:05,690
information on the website thanks for

00:25:01,650 --> 00:25:05,690

YouTube URL: https://www.youtube.com/watch?v=Hn-syMunNy8


