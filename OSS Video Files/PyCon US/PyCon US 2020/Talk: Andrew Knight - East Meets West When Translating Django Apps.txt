Title: Talk: Andrew Knight - East Meets West When Translating Django Apps
Publication date: 2021-05-05
Playlist: PyCon US 2020
Description: 
	Presented by:
Andrew Knight

你好！我是软件工程师。

Please, someone translate! Thankfully, it’s easy to do in Django for both new apps and existing ones. We’ll cover language detection, URL routing, translation files, and marking strings to translate (particularly overlooked areas). As a bonus, we’ll also look at translating the Django admin site! We’ll use Mandarin for examples, but the techniques will work for any language.
Captions: 
	00:00:07,059 --> 00:00:16,250
Nihao watch our andy washer dear now

00:00:12,170 --> 00:00:19,789
home are washing Megara done what a

00:00:16,250 --> 00:00:24,260
cheater should dongle in Tahoe Dada mama

00:00:19,789 --> 00:00:26,110
tongue shandola woman Jules I beg her

00:00:24,260 --> 00:00:29,600
Elena

00:00:26,110 --> 00:00:32,289
Timbo Dom did you understand what I just

00:00:29,600 --> 00:00:34,610
said Oh a speaking Mandarin Chinese

00:00:32,289 --> 00:00:36,320
isn't it frustrating when you can't

00:00:34,610 --> 00:00:38,120
understand what someone's telling you

00:00:36,320 --> 00:00:41,120
because you don't understand the

00:00:38,120 --> 00:00:42,039
language that language barrier shouldn't

00:00:41,120 --> 00:00:44,569
be a problem

00:00:42,039 --> 00:00:47,239
today I'm gonna tell you a story about

00:00:44,569 --> 00:00:49,429
how my family overcame that language

00:00:47,239 --> 00:00:53,089
barrier when I developed a django app

00:00:49,429 --> 00:00:56,809
for our small business so let's try that

00:00:53,089 --> 00:00:59,989
introduction again hello everyone my

00:00:56,809 --> 00:01:02,870
name is Annie night but Pandey for short

00:00:59,989 --> 00:01:05,239
I'm the automation Panda I'm a software

00:01:02,870 --> 00:01:09,380
engineer and test who develops solutions

00:01:05,239 --> 00:01:11,840
to testing problems you can follow me on

00:01:09,380 --> 00:01:17,660
twitter at automation panda or you can

00:01:11,840 --> 00:01:20,630
read my blog at automation Panda calm as

00:01:17,660 --> 00:01:29,510
you can see I'm American but my wife

00:01:20,630 --> 00:01:31,720
Jessica and her mama are from China our

00:01:29,510 --> 00:01:34,580
family runs a small sales business

00:01:31,720 --> 00:01:37,610
Jessica used to track all orders and

00:01:34,580 --> 00:01:40,910
these big scary spreadsheets which took

00:01:37,610 --> 00:01:43,400
a lot of time so I developed a better

00:01:40,910 --> 00:01:46,550
solution using the Django web framework

00:01:43,400 --> 00:01:49,100
I created data models using the Django

00:01:46,550 --> 00:01:52,190
ORM for all the orders and customers

00:01:49,100 --> 00:01:55,670
I used the admin site as a front end for

00:01:52,190 --> 00:01:57,050
us to track the orders and I uploaded

00:01:55,670 --> 00:02:02,270
the whole thing to Heroku

00:01:57,050 --> 00:02:03,500
I even stored images in Amazon s3 now

00:02:02,270 --> 00:02:07,100
there's just one problem with this

00:02:03,500 --> 00:02:09,170
application you see Jessica is the only

00:02:07,100 --> 00:02:12,290
bilingual person in our household I

00:02:09,170 --> 00:02:15,680
don't speak Chinese and mama doesn't

00:02:12,290 --> 00:02:18,860
really speak English day-to-day our most

00:02:15,680 --> 00:02:20,990
common language is Chinglish so

00:02:18,860 --> 00:02:23,630
for all of us to use this application I

00:02:20,990 --> 00:02:27,620
had to translate it from English to

00:02:23,630 --> 00:02:30,130
Mandarin Chinese today I'll demo the app

00:02:27,620 --> 00:02:33,200
for you briefly and then I'll show you

00:02:30,130 --> 00:02:35,650
how I did the translations with Django's

00:02:33,200 --> 00:02:35,650
framework

00:02:36,330 --> 00:02:41,850
here's the Django application I created

00:02:39,030 --> 00:02:44,730
for our small business what's displayed

00:02:41,850 --> 00:02:47,730
here is the admin site which I used as

00:02:44,730 --> 00:02:50,760
the de-facto front-end for myself my

00:02:47,730 --> 00:02:53,100
wife and her mom you can see we have

00:02:50,760 --> 00:02:56,300
data models for customers as well as

00:02:53,100 --> 00:02:59,150
orders let's take a look at the orders

00:02:56,300 --> 00:03:01,920
again nothing out of the ordinary here

00:02:59,150 --> 00:03:05,630
just the standard view for Django

00:03:01,920 --> 00:03:10,530
records we have all the fields we have

00:03:05,630 --> 00:03:13,980
actions filters titles breadcrumbs all

00:03:10,530 --> 00:03:15,600
the standard stuff Weber I want to draw

00:03:13,980 --> 00:03:19,160
your attention to the upper right corner

00:03:15,600 --> 00:03:23,430
here you can see I've added flag widgets

00:03:19,160 --> 00:03:25,080
if I click on the Chinese flag you'll

00:03:23,430 --> 00:03:28,400
notice that the entire page is

00:03:25,080 --> 00:03:34,160
translated into Mandarin Chinese titles

00:03:28,400 --> 00:03:37,470
actions data labels even the filters if

00:03:34,160 --> 00:03:40,020
I open up one of the orders you'll see

00:03:37,470 --> 00:03:44,760
even the record form has been completely

00:03:40,020 --> 00:03:46,320
translated down to its buttons not even

00:03:44,760 --> 00:03:48,959
I can read this because I can't read

00:03:46,320 --> 00:03:51,989
Chinese if I want to change it back to

00:03:48,959 --> 00:03:58,050
english I'll hit the American flag

00:03:51,989 --> 00:04:00,260
widget and everything's back it's pretty

00:03:58,050 --> 00:04:00,260
nifty

00:04:02,680 --> 00:04:09,370
so how was I able to translate my app

00:04:05,530 --> 00:04:11,500
between English and Chinese thankfully

00:04:09,370 --> 00:04:13,510
Django makes it pretty easy with their

00:04:11,500 --> 00:04:16,810
out-of-the-box batteries included

00:04:13,510 --> 00:04:19,320
translation framework let's learn how to

00:04:16,810 --> 00:04:19,320
use it

00:04:20,560 --> 00:04:27,620
the workflow for making translations and

00:04:24,200 --> 00:04:29,180
Jago apps is a four-step process so the

00:04:27,620 --> 00:04:31,300
steps take a little bit more time than

00:04:29,180 --> 00:04:31,300
others

00:04:31,560 --> 00:04:37,050
first to a pretty simple first we need

00:04:34,470 --> 00:04:39,599
to add specific application settings to

00:04:37,050 --> 00:04:42,809
enable translations

00:04:39,599 --> 00:04:45,360
second we need to add proper routing so

00:04:42,809 --> 00:04:49,469
that URLs will load pages with the

00:04:45,360 --> 00:04:51,629
appropriate locale the third step is

00:04:49,469 --> 00:04:54,509
probably the most work intensive and

00:04:51,629 --> 00:04:58,379
that's marking all the visible strings

00:04:54,509 --> 00:05:00,809
in the application for translation and I

00:04:58,379 --> 00:05:05,399
mean every single string that appears to

00:05:00,809 --> 00:05:08,999
the user fourth and finally we need to

00:05:05,399 --> 00:05:12,589
provide the translations themselves and

00:05:08,999 --> 00:05:12,589
compile them into language files

00:05:12,980 --> 00:05:18,950
everything I'll talk about today is

00:05:15,260 --> 00:05:20,780
documented on the Django docs page so if

00:05:18,950 --> 00:05:23,150
you get stuck with translations on your

00:05:20,780 --> 00:05:25,220
own strongly recommend you do a quick

00:05:23,150 --> 00:05:28,210
search on the official Docs because

00:05:25,220 --> 00:05:28,210
they're very helpful

00:05:29,849 --> 00:05:34,740
before we dig deep into each of those

00:05:31,860 --> 00:05:36,860
four steps let's define our terms so

00:05:34,740 --> 00:05:41,129
that we know what we're talking about

00:05:36,860 --> 00:05:43,830
the term token or string refers to a

00:05:41,129 --> 00:05:47,399
string of text to be translated in the

00:05:43,830 --> 00:05:50,399
application it can be located either in

00:05:47,399 --> 00:05:52,879
the Python app code or in the Django

00:05:50,399 --> 00:05:52,879
templates

00:05:53,960 --> 00:06:00,380
the term translation refers to a mapping

00:05:57,770 --> 00:06:03,320
of those strings from one language to

00:06:00,380 --> 00:06:06,530
another in the case of my Django

00:06:03,320 --> 00:06:09,229
application I wrote all of my strings in

00:06:06,530 --> 00:06:11,449
English as my primary language and then

00:06:09,229 --> 00:06:14,620
I provided translations from English

00:06:11,449 --> 00:06:14,620
into Mandarin Chinese

00:06:15,680 --> 00:06:23,460
the term localization which is also

00:06:19,440 --> 00:06:27,810
abbreviated to l10n for first two

00:06:23,460 --> 00:06:31,950
adapting an application for a locale now

00:06:27,810 --> 00:06:34,440
a locale is a target region and it

00:06:31,950 --> 00:06:37,380
includes not only language but also

00:06:34,440 --> 00:06:39,990
other considerations such as date

00:06:37,380 --> 00:06:42,320
formatting and even cultural

00:06:39,990 --> 00:06:42,320
considerations

00:06:44,570 --> 00:06:49,230
internationalisation or abbreviated as

00:06:48,060 --> 00:06:52,650
IAT

00:06:49,230 --> 00:06:56,230
n refers to the development work and

00:06:52,650 --> 00:07:00,220
tools that enable localization

00:06:56,230 --> 00:07:02,790
so internationalization could refer to

00:07:00,220 --> 00:07:06,520
say Jaguars translation framework

00:07:02,790 --> 00:07:08,800
whereas localization would refer to the

00:07:06,520 --> 00:07:14,730
artifacts of that process such as the

00:07:08,800 --> 00:07:16,230
language files for Chinese sometimes

00:07:14,730 --> 00:07:19,780
localization and internationalization

00:07:16,230 --> 00:07:22,330
are used interchangeably but there is a

00:07:19,780 --> 00:07:25,510
nuance there the difference between the

00:07:22,330 --> 00:07:27,760
framework and the artifacts so I just

00:07:25,510 --> 00:07:29,680
want to make that clear before we

00:07:27,760 --> 00:07:31,740
continue

00:07:29,680 --> 00:07:31,740
you

00:07:31,940 --> 00:07:38,000
if we were to look at how our workflow

00:07:35,500 --> 00:07:40,970
separates between internationalization

00:07:38,000 --> 00:07:44,360
and localization you could think of it

00:07:40,970 --> 00:07:47,390
this way the first three steps the app

00:07:44,360 --> 00:07:49,570
settings the URL routing and marking the

00:07:47,390 --> 00:07:51,980
strings would all fall under

00:07:49,570 --> 00:07:54,170
internationalization because those are

00:07:51,980 --> 00:07:58,390
things that the Django framework takes

00:07:54,170 --> 00:08:01,820
care of for you as tools and as process

00:07:58,390 --> 00:08:04,910
step for the compiling of language files

00:08:01,820 --> 00:08:07,760
themselves with their translations what

00:08:04,910 --> 00:08:10,010
can would be considered localization

00:08:07,760 --> 00:08:12,710
because they are targeting for that

00:08:10,010 --> 00:08:15,830
specific locale whether that's American

00:08:12,710 --> 00:08:20,510
English or Mandarin Chinese or any other

00:08:15,830 --> 00:08:22,550
language now let's go through the four

00:08:20,510 --> 00:08:25,760
steps of our workflow starting with

00:08:22,550 --> 00:08:28,010
application settings all of the settings

00:08:25,760 --> 00:08:32,320
I'm about to show you will go into the

00:08:28,010 --> 00:08:34,380
Django projects settings dot py file

00:08:32,320 --> 00:08:34,380
you

00:08:34,560 --> 00:08:40,490
first I recommend adding the low-cal

00:08:37,620 --> 00:08:44,159
middleware to the list of middlewares

00:08:40,490 --> 00:08:46,860
locale a middleware is not required but

00:08:44,159 --> 00:08:50,029
it's very very useful because it enables

00:08:46,860 --> 00:08:54,809
Django to automatically detect language

00:08:50,029 --> 00:08:57,209
preferences if you add locale middleware

00:08:54,809 --> 00:09:01,470
Django will then check for preference in

00:08:57,209 --> 00:09:05,009
this order first it'll check for URL

00:09:01,470 --> 00:09:08,519
language prefix if that's not found then

00:09:05,009 --> 00:09:11,069
it will check for a language cookie if

00:09:08,519 --> 00:09:14,399
there's no language cookie third it will

00:09:11,069 --> 00:09:18,420
look for the accept language HTTP header

00:09:14,399 --> 00:09:20,879
in the request and finally if none of

00:09:18,420 --> 00:09:23,189
those three are found then it will fall

00:09:20,879 --> 00:09:26,790
back on the default language set by

00:09:23,189 --> 00:09:28,860
language code and ascetics file the

00:09:26,790 --> 00:09:31,259
order of locale middleware is important

00:09:28,860 --> 00:09:33,230
it needs to come after the session

00:09:31,259 --> 00:09:36,300
middleware because it uses the session

00:09:33,230 --> 00:09:39,149
but it also needs to go before the

00:09:36,300 --> 00:09:41,930
common middleware because it uses URL

00:09:39,149 --> 00:09:41,930
prefixes

00:09:42,309 --> 00:09:48,829
the next most important setting is the

00:09:45,110 --> 00:09:52,009
language code language code sets the

00:09:48,829 --> 00:09:54,049
default language for you Janko app in my

00:09:52,009 --> 00:09:58,129
case the default language was American

00:09:54,049 --> 00:10:01,299
English the format of language code must

00:09:58,129 --> 00:10:03,799
be an except language HTTP header code

00:10:01,299 --> 00:10:06,720
if you're not sure what those are you

00:10:03,799 --> 00:10:09,759
can easily look them up online

00:10:06,720 --> 00:10:13,899
the next settings enable translations

00:10:09,759 --> 00:10:18,819
and date formatting for locales you want

00:10:13,899 --> 00:10:20,769
to set both use I 18 n and use L 10 end

00:10:18,819 --> 00:10:23,220
to be true

00:10:20,769 --> 00:10:26,860
know if you know that your application

00:10:23,220 --> 00:10:29,050
won't do any translations you could set

00:10:26,860 --> 00:10:31,860
both of these to false for a small

00:10:29,050 --> 00:10:31,860
performance boost

00:10:32,610 --> 00:10:39,189
next I strongly recommend setting the

00:10:35,649 --> 00:10:41,559
languages setting the list of language

00:10:39,189 --> 00:10:44,129
is given by this setting limits the

00:10:41,559 --> 00:10:47,559
available languages for translation if

00:10:44,129 --> 00:10:50,529
you do not provide a list of languages

00:10:47,559 --> 00:10:53,230
here then django will potentially

00:10:50,529 --> 00:10:57,220
translate a rather attempt to translate

00:10:53,230 --> 00:10:59,649
any languages passed in by the user so

00:10:57,220 --> 00:11:02,759
for example in my application I only

00:10:59,649 --> 00:11:06,069
have languages for English and Chinese

00:11:02,759 --> 00:11:09,160
if a user or to try to translate my

00:11:06,069 --> 00:11:11,439
application into French because I've set

00:11:09,160 --> 00:11:16,869
my languages here they would receive an

00:11:11,439 --> 00:11:19,540
error if I didn't set languages here the

00:11:16,869 --> 00:11:22,899
app would attempt to translate the

00:11:19,540 --> 00:11:24,519
application into French and most likely

00:11:22,899 --> 00:11:26,739
it would just display everything in

00:11:24,519 --> 00:11:30,339
English because there are no French

00:11:26,739 --> 00:11:33,040
locale files to be had that would make

00:11:30,339 --> 00:11:36,309
the application look really bad and be a

00:11:33,040 --> 00:11:39,369
bit misleading so it's always best to

00:11:36,309 --> 00:11:41,470
set the languages list so that only

00:11:39,369 --> 00:11:43,980
available languages can be done for

00:11:41,470 --> 00:11:43,980
translation

00:11:45,009 --> 00:11:51,829
finally the last setting I recommend you

00:11:47,839 --> 00:11:53,779
set is the locale pads locale paths

00:11:51,829 --> 00:11:57,529
provides a list of directories for

00:11:53,779 --> 00:12:00,019
language files if this is not specified

00:11:57,529 --> 00:12:02,930
Django will look for a directory named

00:12:00,019 --> 00:12:07,670
quote/unquote locale in each application

00:12:02,930 --> 00:12:10,420
folder however in my experience I find

00:12:07,670 --> 00:12:12,620
that I like to share my language

00:12:10,420 --> 00:12:17,089
translations across the entire

00:12:12,620 --> 00:12:18,680
application and so for simplicity I will

00:12:17,089 --> 00:12:22,189
create a directory named locale

00:12:18,680 --> 00:12:27,459
underneath my project based directory

00:12:22,189 --> 00:12:27,459
and put all of my locale files in there

00:12:27,960 --> 00:12:33,600
and that's it for Django translation

00:12:29,910 --> 00:12:37,220
settings it's pretty easy let's look at

00:12:33,600 --> 00:12:37,220
step two URLs

00:12:37,670 --> 00:12:42,800
language prefixes can indicate the

00:12:40,340 --> 00:12:45,550
desired language to load a page it

00:12:42,800 --> 00:12:50,360
directly in the URL

00:12:45,550 --> 00:12:53,380
notice the three URLs I have here first

00:12:50,360 --> 00:12:56,090
one has the language code for English

00:12:53,380 --> 00:12:59,380
prefixed on to the resource path for the

00:12:56,090 --> 00:13:03,560
page this will load the page in English

00:12:59,380 --> 00:13:06,050
my second one has Z h - hans as the

00:13:03,560 --> 00:13:09,020
language code that's the language code

00:13:06,050 --> 00:13:13,100
for simplified chinese that should load

00:13:09,020 --> 00:13:15,200
the page and simplified chinese the

00:13:13,100 --> 00:13:18,620
third URL doesn't have a language prefix

00:13:15,200 --> 00:13:23,020
and by default that should load my

00:13:18,620 --> 00:13:23,020
default language for my cases english

00:13:23,830 --> 00:13:27,670
configuring URL language prefix routing

00:13:26,500 --> 00:13:31,900
is pretty straightforward

00:13:27,670 --> 00:13:34,720
in your URLs dot py file import the hi

00:13:31,900 --> 00:13:40,210
18 n patterns function from Django Kampf

00:13:34,720 --> 00:13:43,120
URLs IAT net in your list of hats simply

00:13:40,210 --> 00:13:45,610
wrap those paths with the i18n patterns

00:13:43,120 --> 00:13:47,560
function you'll specify the list of

00:13:45,610 --> 00:13:51,130
paths and the same way you would

00:13:47,560 --> 00:13:54,550
otherwise finally we'll need to add one

00:13:51,130 --> 00:13:56,980
more setting at the bottom so that the

00:13:54,550 --> 00:14:00,520
default language will be used whenever

00:13:56,980 --> 00:14:04,710
no prefix is specified so we'll set

00:14:00,520 --> 00:14:04,710
prefix default language equals false

00:14:05,900 --> 00:14:11,320
with first two steps of our workflow

00:14:07,730 --> 00:14:14,210
done let's move on to the third strings

00:14:11,320 --> 00:14:16,960
this will be probably the most work

00:14:14,210 --> 00:14:16,960
intensive one

00:14:16,990 --> 00:14:21,730
as I mentioned before every publicly

00:14:19,839 --> 00:14:24,220
visible string will need to be marked

00:14:21,730 --> 00:14:28,600
for translation whether that's in Python

00:14:24,220 --> 00:14:30,820
code or in Django templates to mark

00:14:28,600 --> 00:14:33,070
strings for translation in Python code

00:14:30,820 --> 00:14:36,480
we will need to use the get text

00:14:33,070 --> 00:14:40,240
function from Django utils translation

00:14:36,480 --> 00:14:40,899
here I've shown the import and as common

00:14:40,240 --> 00:14:43,510
practice

00:14:40,899 --> 00:14:45,640
I have aliased it as a single underscore

00:14:43,510 --> 00:14:47,980
character you'll see that pretty

00:14:45,640 --> 00:14:50,140
frequently because it's much shorter to

00:14:47,980 --> 00:14:52,540
type a single underscore than to type

00:14:50,140 --> 00:14:57,070
out the get text function every single

00:14:52,540 --> 00:15:00,820
time here I also have an example view

00:14:57,070 --> 00:15:03,310
where I'm returning some output and I've

00:15:00,820 --> 00:15:07,600
wrapped that output with my get text

00:15:03,310 --> 00:15:10,200
function this will immediately translate

00:15:07,600 --> 00:15:13,360
this string from the primary language

00:15:10,200 --> 00:15:18,029
into whatever appropriate secondary

00:15:13,360 --> 00:15:18,029
language whenever it's executed

00:15:18,750 --> 00:15:23,810
there is also a second translation

00:15:20,370 --> 00:15:28,280
function called get text underscore lazy

00:15:23,810 --> 00:15:30,750
this function does lazy translations

00:15:28,280 --> 00:15:33,240
lazy translations are done when the

00:15:30,750 --> 00:15:36,360
string is accessed in context such as

00:15:33,240 --> 00:15:37,800
when it is displayed or viewed not when

00:15:36,360 --> 00:15:42,030
the translation function is called

00:15:37,800 --> 00:15:45,420
within the Python code lazy translations

00:15:42,030 --> 00:15:48,000
are needed for cases like models so

00:15:45,420 --> 00:15:51,750
here's an example of a model called my

00:15:48,000 --> 00:15:54,330
thing and I've lazily translated things

00:15:51,750 --> 00:15:57,150
like the name field the help text and

00:15:54,330 --> 00:15:59,280
some of the metadata if you attempt to

00:15:57,150 --> 00:16:01,560
use the get text function instead of the

00:15:59,280 --> 00:16:04,100
get text glazy function for these

00:16:01,560 --> 00:16:07,260
translations it won't work and you'll

00:16:04,100 --> 00:16:09,120
end up making the mistake I did pulling

00:16:07,260 --> 00:16:11,160
my hair out for about an hour trying to

00:16:09,120 --> 00:16:12,990
figure out why the translations aren't

00:16:11,160 --> 00:16:17,010
working don't do that

00:16:12,990 --> 00:16:19,710
use lazy translations for models just

00:16:17,010 --> 00:16:22,020
like for the get text function get text

00:16:19,710 --> 00:16:24,440
underscore lazy is often aliased with an

00:16:22,020 --> 00:16:24,440
underscore

00:16:24,710 --> 00:16:31,220
to translate strings in Django templates

00:16:27,350 --> 00:16:33,589
use the trans tag you can translate

00:16:31,220 --> 00:16:36,290
either string literals or variable

00:16:33,589 --> 00:16:38,870
expressions just be careful with

00:16:36,290 --> 00:16:41,330
variable expressions because they might

00:16:38,870 --> 00:16:43,430
not get picked up when trying to compile

00:16:41,330 --> 00:16:46,340
message files

00:16:43,430 --> 00:16:48,260
if you want to prepare translations for

00:16:46,340 --> 00:16:53,180
the future but skip them in the present

00:16:48,260 --> 00:16:55,790
you can tack on the no op word that way

00:16:53,180 --> 00:16:59,120
the strings will be left in the original

00:16:55,790 --> 00:17:01,340
language no matter what you can also do

00:16:59,120 --> 00:17:03,830
block translations in Django templates

00:17:01,340 --> 00:17:06,080
and block translations can even have

00:17:03,830 --> 00:17:10,089
placeholders such as trying to

00:17:06,080 --> 00:17:10,089
substitute a value in for the string

00:17:10,790 --> 00:17:24,080
you can also translate the

00:17:12,380 --> 00:17:26,960
Adminsitration x' for all strings using

00:17:24,080 --> 00:17:28,390
lazy translations doesn't hurt and it

00:17:26,960 --> 00:17:31,630
can protect you from making mistakes

00:17:28,390 --> 00:17:34,809
especially with models

00:17:31,630 --> 00:17:37,390
second note that admin templates already

00:17:34,809 --> 00:17:40,240
have translations for several languages

00:17:37,390 --> 00:17:42,280
I think I was reading the release notes

00:17:40,240 --> 00:17:46,230
recently that they just added the use

00:17:42,280 --> 00:17:46,230
BEC language which is pretty cool

00:17:46,870 --> 00:17:52,360
third when trying to translate fields

00:17:49,539 --> 00:17:54,789
for apps and models make sure to provide

00:17:52,360 --> 00:17:57,820
translations for the verbose name field

00:17:54,789 --> 00:17:59,770
and not the named field trying to

00:17:57,820 --> 00:18:04,690
translate the name field can cause some

00:17:59,770 --> 00:18:06,250
unexpected behavior and errors fourth to

00:18:04,690 --> 00:18:08,919
keep your site looking pristine and

00:18:06,250 --> 00:18:11,980
clean make sure to provide translations

00:18:08,919 --> 00:18:16,360
for titles such as admin site index

00:18:11,980 --> 00:18:18,090
title site header and site title if you

00:18:16,360 --> 00:18:21,279
want to learn more specifically about

00:18:18,090 --> 00:18:23,440
translating the Django admin check out

00:18:21,279 --> 00:18:27,330
my blog post at automation Panda com

00:18:23,440 --> 00:18:27,330
there's a bitly link here

00:18:28,470 --> 00:18:34,260
before the final step to our translation

00:18:31,000 --> 00:18:36,669
workflow is compilation' meaning

00:18:34,260 --> 00:18:39,130
providing the translations for all those

00:18:36,669 --> 00:18:42,809
strings and compiling them into message

00:18:39,130 --> 00:18:42,809
files that Django can use

00:18:44,080 --> 00:18:49,000
the first step is to make the message

00:18:45,730 --> 00:18:51,010
files message files will hold the

00:18:49,000 --> 00:18:55,090
translations for all the strings in the

00:18:51,010 --> 00:18:56,790
application to create message files run

00:18:55,090 --> 00:19:01,210
this command from the command line

00:18:56,790 --> 00:19:05,110
Python manage fuck-you I make messages

00:19:01,210 --> 00:19:08,020
and then with the - L option provide the

00:19:05,110 --> 00:19:12,070
locale code for your target translation

00:19:08,020 --> 00:19:14,020
language this command searches for all

00:19:12,070 --> 00:19:16,690
translatable strings in the Django

00:19:14,020 --> 00:19:21,550
application in both the Python code and

00:19:16,690 --> 00:19:22,240
the Django templates then it'll do one

00:19:21,550 --> 00:19:25,600
of two things

00:19:22,240 --> 00:19:28,960
it will either create a new language

00:19:25,600 --> 00:19:33,070
file under the locale paths directory if

00:19:28,960 --> 00:19:36,120
no language file already exists or it

00:19:33,070 --> 00:19:39,550
will add all the new tokens if found to

00:19:36,120 --> 00:19:45,100
the existing language file under locale

00:19:39,550 --> 00:19:48,850
paths as a warning this command needs a

00:19:45,100 --> 00:19:50,740
locale name not a language code locale

00:19:48,850 --> 00:19:51,540
names and language codes are two

00:19:50,740 --> 00:19:55,120
different things

00:19:51,540 --> 00:19:58,960
so whereas the language code for

00:19:55,120 --> 00:20:04,620
simplified chinese is lowercase Z H -

00:19:58,960 --> 00:20:10,300
Hans the locale code is lowercase e h

00:20:04,620 --> 00:20:12,400
underscore capital h hot don't make that

00:20:10,300 --> 00:20:14,560
mistake because I lost about an hour on

00:20:12,400 --> 00:20:16,900
that one

00:20:14,560 --> 00:20:19,810
the main messages command will generate

00:20:16,900 --> 00:20:22,150
doppio files that are the message files

00:20:19,810 --> 00:20:25,480
or the language files for the target

00:20:22,150 --> 00:20:28,090
locale an example of a message file is

00:20:25,480 --> 00:20:30,880
here on the right you'll see that the

00:20:28,090 --> 00:20:33,730
first line for each string is a comment

00:20:30,880 --> 00:20:38,440
indicating where in the code that string

00:20:33,730 --> 00:20:41,170
came from the message ID field is that

00:20:38,440 --> 00:20:43,360
target string and the message string

00:20:41,170 --> 00:20:49,180
field is the translation for that string

00:20:43,360 --> 00:20:50,920
for the given locale now someone will

00:20:49,180 --> 00:20:52,900
need to provide the correct translations

00:20:50,920 --> 00:20:54,910
Jiang who is not smart enough to

00:20:52,900 --> 00:20:58,000
automatically translate arbitrary

00:20:54,910 --> 00:21:00,160
strings into your desired language so

00:20:58,000 --> 00:21:04,270
when I was developing my application I

00:21:00,160 --> 00:21:07,150
would write some code I would regenerate

00:21:04,270 --> 00:21:09,220
my message files and then I would ask my

00:21:07,150 --> 00:21:14,890
wife to provide translations for the new

00:21:09,220 --> 00:21:17,880
strings it is possible to have some of

00:21:14,890 --> 00:21:19,120
these strings ignored when translating

00:21:17,880 --> 00:21:22,000
when

00:21:19,120 --> 00:21:25,600
a string is marked with hashtag for the

00:21:22,000 --> 00:21:28,750
comment , fuzzy that means that Django

00:21:25,600 --> 00:21:31,480
may have known what the translation

00:21:28,750 --> 00:21:34,990
might be based on some similar phrasing

00:21:31,480 --> 00:21:38,010
but it wasn't positive and so you won't

00:21:34,990 --> 00:21:40,960
need to manually go in there and inspect

00:21:38,010 --> 00:21:44,559
Django will also ignore translations for

00:21:40,960 --> 00:21:46,480
any empty message string values if you

00:21:44,559 --> 00:21:48,510
fail to provide an explicit translation

00:21:46,480 --> 00:21:52,720
Django will simply leave the string

00:21:48,510 --> 00:21:55,600
untranslated and finally if there are

00:21:52,720 --> 00:21:58,390
any missing translations such as a

00:21:55,600 --> 00:22:01,960
string that was marked using a get text

00:21:58,390 --> 00:22:04,780
but no entry was found and messages file

00:22:01,960 --> 00:22:09,429
that string will be left in its original

00:22:04,780 --> 00:22:11,830
language once translations are provided

00:22:09,429 --> 00:22:14,950
in those doppio files it's time to

00:22:11,830 --> 00:22:16,870
compile them so Django can use them to

00:22:14,950 --> 00:22:20,580
compile the message files from the

00:22:16,870 --> 00:22:24,100
following command Python managed py

00:22:20,580 --> 00:22:26,920
compiled messages this command converts

00:22:24,100 --> 00:22:30,460
all of the dot Pio files in all of the

00:22:26,920 --> 00:22:34,059
local directories into dot mo files the

00:22:30,460 --> 00:22:36,550
Django can use the demo language files

00:22:34,059 --> 00:22:41,410
must be treated like any other static

00:22:36,550 --> 00:22:43,650
assets just like HTML CSS JavaScript and

00:22:41,410 --> 00:22:43,650
image files

00:22:44,960 --> 00:22:50,230
and that four-step process is how we

00:22:47,149 --> 00:22:50,230
translate django apps

00:22:50,470 --> 00:22:56,020
it's not too difficult it's just a bit

00:22:52,900 --> 00:22:59,140
of crying so now let's look at the big

00:22:56,020 --> 00:23:01,450
picture why is it important to translate

00:22:59,140 --> 00:23:05,860
apps there are some big points to be

00:23:01,450 --> 00:23:08,380
made here first translations should

00:23:05,860 --> 00:23:11,770
bring people together I know this

00:23:08,380 --> 00:23:14,590
firsthand very well growing up my father

00:23:11,770 --> 00:23:17,190
was a world language teacher he taught

00:23:14,590 --> 00:23:22,000
Spanish and German in Baltimore County

00:23:17,190 --> 00:23:25,559
as an adult I live in a family where we

00:23:22,000 --> 00:23:28,659
speak English Chinese and Chinglish and

00:23:25,559 --> 00:23:30,730
so translations and understanding of

00:23:28,659 --> 00:23:33,640
language is very very important for us

00:23:30,730 --> 00:23:35,080
to stay connected as a family and it's

00:23:33,640 --> 00:23:38,230
also important in the software world

00:23:35,080 --> 00:23:41,049
because not all of our users may be

00:23:38,230 --> 00:23:44,679
using English as their first or any

00:23:41,049 --> 00:23:47,590
language so we need translations to help

00:23:44,679 --> 00:23:49,860
bridge those gaps and bring people

00:23:47,590 --> 00:23:49,860
together

00:23:49,970 --> 00:23:53,860
you

00:23:51,490 --> 00:23:56,409
second I hope you can see with our

00:23:53,860 --> 00:23:59,110
four-step workflow the translations are

00:23:56,409 --> 00:24:01,360
fairly easy to implement they're just

00:23:59,110 --> 00:24:04,659
tedious you've got to put in the

00:24:01,360 --> 00:24:06,789
settings and the URL prefixes and then

00:24:04,659 --> 00:24:09,490
you have to grind through marking and

00:24:06,789 --> 00:24:11,649
translating every string but there's

00:24:09,490 --> 00:24:13,450
nothing terribly challenging about it

00:24:11,649 --> 00:24:15,580
especially when you have a good

00:24:13,450 --> 00:24:19,390
internationalization framework like

00:24:15,580 --> 00:24:22,710
Django does furthermore I hope it's

00:24:19,390 --> 00:24:25,270
evident that it would be easier to start

00:24:22,710 --> 00:24:27,100
translating applications from the

00:24:25,270 --> 00:24:28,450
beginning of their development rather

00:24:27,100 --> 00:24:31,220
than after they've been in development

00:24:28,450 --> 00:24:33,440
for a while

00:24:31,220 --> 00:24:35,830
third you might be wondering how a I

00:24:33,440 --> 00:24:39,500
could help with translations and

00:24:35,830 --> 00:24:41,270
certainly it could a I and machine

00:24:39,500 --> 00:24:44,650
learning might be able to help provide

00:24:41,270 --> 00:24:47,360
translations for message files however

00:24:44,650 --> 00:24:49,160
we would still want a human to kind of

00:24:47,360 --> 00:24:52,130
crew free to make sure that the

00:24:49,160 --> 00:24:54,290
translations make sense I would guess

00:24:52,130 --> 00:24:57,680
that AI and machine learning could

00:24:54,290 --> 00:24:59,870
probably get it right about 80 90 95

00:24:57,680 --> 00:25:02,330
percent of the time and there may be

00:24:59,870 --> 00:25:05,150
just a few cases for things like slang

00:25:02,330 --> 00:25:07,340
or things that need greater context for

00:25:05,150 --> 00:25:09,700
human to come in and kind of smooth out

00:25:07,340 --> 00:25:09,700
the edges

00:25:10,920 --> 00:25:16,500
fourth you may be wondering about

00:25:12,780 --> 00:25:18,360
just-in-time translations for example if

00:25:16,500 --> 00:25:21,510
you use Google Chrome as your web

00:25:18,360 --> 00:25:25,440
browser and you navigate to a page from

00:25:21,510 --> 00:25:27,750
a different country most likely chrome

00:25:25,440 --> 00:25:30,110
will ask you if you want to translate

00:25:27,750 --> 00:25:33,870
the page into your native language and

00:25:30,110 --> 00:25:37,290
it will do a just-in-time translation of

00:25:33,870 --> 00:25:38,760
all the text that you see that will get

00:25:37,290 --> 00:25:41,490
you most of the way but you've probably

00:25:38,760 --> 00:25:44,160
noticed that not every word or phrase is

00:25:41,490 --> 00:25:46,560
perfectly translated you can figure it

00:25:44,160 --> 00:25:50,580
out but you know it's not entirely

00:25:46,560 --> 00:25:53,370
smooth so that's why I would say not all

00:25:50,580 --> 00:25:55,950
apps ten or should use just-in-time

00:25:53,370 --> 00:25:58,170
translations like that there are

00:25:55,950 --> 00:26:02,130
certainly cases that will always be true

00:25:58,170 --> 00:26:05,070
in which you want an application to have

00:26:02,130 --> 00:26:07,440
preset translations such as the ones

00:26:05,070 --> 00:26:09,900
that django provides so that you can

00:26:07,440 --> 00:26:13,680
always have an accurate translation

00:26:09,900 --> 00:26:17,360
displayed furthermore just-in-time

00:26:13,680 --> 00:26:21,000
translations do take extra time and

00:26:17,360 --> 00:26:23,520
execution to do because it needs to call

00:26:21,000 --> 00:26:25,730
some other service on the fly and cram

00:26:23,520 --> 00:26:28,590
through a bunch of arbitrary strings

00:26:25,730 --> 00:26:30,860
whereas the pattern we see in the Django

00:26:28,590 --> 00:26:34,080
framework using static translation files

00:26:30,860 --> 00:26:36,870
even though there is a bit of a time hit

00:26:34,080 --> 00:26:40,670
to load that new translation it's still

00:26:36,870 --> 00:26:40,670
right there it's already been decided

00:26:42,730 --> 00:26:48,540
on a more serious note translators have

00:26:46,000 --> 00:26:53,860
an ethical duty to make correct accurate

00:26:48,540 --> 00:26:57,250
translations people need translations to

00:26:53,860 --> 00:26:59,860
access information and other languages

00:26:57,250 --> 00:27:04,120
that they would otherwise have no access

00:26:59,860 --> 00:27:06,820
to and it is absolutely important that

00:27:04,120 --> 00:27:10,710
translators are truthful and correct

00:27:06,820 --> 00:27:10,710
when they do translations

00:27:11,219 --> 00:27:15,779
here is an unfortunate example of

00:27:13,899 --> 00:27:19,449
mistranslation regarding the current

00:27:15,779 --> 00:27:21,879
coronavirus pandemic this image went

00:27:19,449 --> 00:27:24,639
viral on Chinese social media back in

00:27:21,879 --> 00:27:28,029
February of this year along with several

00:27:24,639 --> 00:27:30,339
others like it the image shows a CNN

00:27:28,029 --> 00:27:32,409
headline about the first coronavirus

00:27:30,339 --> 00:27:35,679
case in the United States that did not

00:27:32,409 --> 00:27:38,649
have a traceable point of origin to be

00:27:35,679 --> 00:27:40,719
known as community spread the headline

00:27:38,649 --> 00:27:44,229
is clear and straightforward for anyone

00:27:40,719 --> 00:27:46,059
who knows English however this image was

00:27:44,229 --> 00:27:50,739
circulated but the Chinese translation

00:27:46,059 --> 00:27:53,889
in yellow at the top the Chinese

00:27:50,739 --> 00:27:56,909
translation reads CDC of the USA

00:27:53,889 --> 00:28:01,059
admitted the first case of coronavirus

00:27:56,909 --> 00:28:05,379
originated in the United States that is

00:28:01,059 --> 00:28:07,959
an obvious mistranslation unfortunately

00:28:05,379 --> 00:28:10,269
the vast majority of people in China who

00:28:07,959 --> 00:28:12,849
saw this image probably didn't know

00:28:10,269 --> 00:28:17,079
English and were likely fooled by the

00:28:12,849 --> 00:28:19,359
mistranslation even more sadly this is

00:28:17,079 --> 00:28:21,609
just one example of a massive

00:28:19,359 --> 00:28:25,859
misinformation campaign about the

00:28:21,609 --> 00:28:29,049
coronavirus happening in China right now

00:28:25,859 --> 00:28:33,149
this mistranslation was almost assuredly

00:28:29,049 --> 00:28:33,149
deliberate not accidental

00:28:33,760 --> 00:28:40,210
all that to say is pythonista we bear a

00:28:37,510 --> 00:28:43,420
moral responsibility to use all

00:28:40,210 --> 00:28:46,240
technology ethically even something as

00:28:43,420 --> 00:28:49,230
seemingly mundane or innocuous as

00:28:46,240 --> 00:28:49,230
translations

00:28:50,520 --> 00:28:55,860
and that's my talk about Django

00:28:53,250 --> 00:28:59,040
translations I hope y'all have gotten a

00:28:55,860 --> 00:29:00,990
lot of value out of it so feel free to

00:28:59,040 --> 00:29:03,360
follow me on twitter at automation panda

00:29:00,990 --> 00:29:06,170
or read my blog on automation panda comm

00:29:03,360 --> 00:29:09,320
and have fun doing those translations

00:29:06,170 --> 00:29:09,320

YouTube URL: https://www.youtube.com/watch?v=OUkzFbzkXy4


