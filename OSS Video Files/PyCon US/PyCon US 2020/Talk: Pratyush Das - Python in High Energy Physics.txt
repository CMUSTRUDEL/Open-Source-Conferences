Title: Talk: Pratyush Das - Python in High Energy Physics
Publication date: 2021-05-05
Playlist: PyCon US 2020
Description: 
	Presented by:
Pratyush Das

High Energy Physics is the study of the most fundamental constituents of matter and how these elementary particles interact. Often synonymous to Particle Physics, High Energy Physics seeks to find the secrets of the Universe, one of the recent major discoveries being that of the Higgs Boson that confirmed the Standard Model that dictates how all the forces in the Universe interact with each other. High Energy Physics is probably the physics sub-field that has adopted Python most rapidly, only second to Astrophysics.

The talk starts with a look at how computing has looked like in the field of High Energy Physics in the past and how a lot of physicists played major roles in the development of Computer Science. It then explores the emergence of Python as the language of choice for several physicists and two of the major libraries that have been vital to the adoption of Python in the High Energy Physics community - cppyy and uproot. These are especially important since they demonstrate the different ways one could approach shifting the High Energy Physics community from C++ to Python successfully. The talk will focus on a review of where and how Python is used in the High Energy Physics community and how it is slated to look like in the future.

High Energy Physics has its own python toolkit, scikit-hep which comes with a set of python libraries for use by physicists. The Scikit-HEP project is a community-driven and community-oriented project with the aim of providing Particle Physics at large with an ecosystem for data analysis in Python. It is also about improving the interoperability between High Energy Physics tools and the scientific ecosystem in Python.

This year is ideal for this particular talk, being the year when according to some available data, Python usage trumps C++ usage in several High Energy Physics experiments at CERN - as some physicists have dubbed it, this is the year of Python in High Energy Physics.
Captions: 
	00:00:11,810 --> 00:00:17,050
hi and produced us from the institute of

00:00:15,320 --> 00:00:19,820
engineering and management in india

00:00:17,050 --> 00:00:22,160
before i begin my talk i would like to

00:00:19,820 --> 00:00:24,440
give a small disclaimer that i am a CS

00:00:22,160 --> 00:00:26,420
undergrad and not a physicist so this

00:00:24,440 --> 00:00:28,700
talk is a completely personal account

00:00:26,420 --> 00:00:31,279
from my own experience of writing

00:00:28,700 --> 00:00:32,599
software for high energy physics what is

00:00:31,279 --> 00:00:34,820
high energy physics

00:00:32,599 --> 00:00:37,100
perhaps you will be more familiar if I

00:00:34,820 --> 00:00:38,750
said particle physics high energy

00:00:37,100 --> 00:00:40,610
physics explores the fundamental

00:00:38,750 --> 00:00:42,710
particles that the world is made of and

00:00:40,610 --> 00:00:45,110
their interactions high-energy

00:00:42,710 --> 00:00:47,000
physicists try to answer the big

00:00:45,110 --> 00:00:49,540
questions like what is the universe made

00:00:47,000 --> 00:00:51,710
us what are the forces that govern it

00:00:49,540 --> 00:00:54,050
something that might be surprising to

00:00:51,710 --> 00:00:55,310
the audience is that high energy physics

00:00:54,050 --> 00:00:56,900
has some of the largest scientific

00:00:55,310 --> 00:00:59,570
collaborations in the world

00:00:56,900 --> 00:01:01,340
for example the CMS and the Atlas

00:00:59,570 --> 00:01:04,250
experiments that are located at CERN

00:01:01,340 --> 00:01:06,799
have around 3,000 people affiliated to

00:01:04,250 --> 00:01:08,900
them just imagine 3,000 people working

00:01:06,799 --> 00:01:11,770
on solving the same problem and will

00:01:08,900 --> 00:01:11,770
have reading with each other

00:01:12,500 --> 00:01:17,490
something most people probably do not

00:01:15,090 --> 00:01:21,000
know is that the first computers were

00:01:17,490 --> 00:01:22,710
built for music physics research when I

00:01:21,000 --> 00:01:25,080
say this I am not really talking about

00:01:22,710 --> 00:01:28,110
the secret computers that were used for

00:01:25,080 --> 00:01:29,399
breaking secret codes and used in the

00:01:28,110 --> 00:01:32,250
Morris

00:01:29,399 --> 00:01:34,590
so John Vincent Atanasoff and his then

00:01:32,250 --> 00:01:36,659
graduate student Whitford Perry created

00:01:34,590 --> 00:01:38,490
the first electronic and non

00:01:36,659 --> 00:01:40,619
programmable digital computing device

00:01:38,490 --> 00:01:43,950
that they call the Atanasoff very

00:01:40,619 --> 00:01:46,140
computer they created this in 1937 and

00:01:43,950 --> 00:01:49,799
it was quite popular with the considered

00:01:46,140 --> 00:01:53,459
the only computing device till 1942 this

00:01:49,799 --> 00:01:56,069
was then replaced by ENIAC which was

00:01:53,459 --> 00:01:58,500
inspired by it ENIAC was initially

00:01:56,069 --> 00:02:00,569
developed for use in ballistics and it

00:01:58,500 --> 00:02:01,140
was developed by another physicist John

00:02:00,569 --> 00:02:04,470
Mauchly

00:02:01,140 --> 00:02:05,970
and Jerry presper eckert this is

00:02:04,470 --> 00:02:08,220
something that the audience might be

00:02:05,970 --> 00:02:09,690
more familiar with I would ask for a

00:02:08,220 --> 00:02:11,790
raise of hands if this was a light

00:02:09,690 --> 00:02:14,040
presentation but I assume a lot of

00:02:11,790 --> 00:02:16,739
people in the audience have heard of

00:02:14,040 --> 00:02:19,470
Monte Carlo techniques this was invented

00:02:16,739 --> 00:02:21,540
by Nicholas metropolises prepare Los

00:02:19,470 --> 00:02:24,299
Alamos National Laboratory for physics

00:02:21,540 --> 00:02:25,739
problems most computer science people

00:02:24,299 --> 00:02:27,870
would have heard of the one human

00:02:25,739 --> 00:02:30,030
architecture that forms the basis of

00:02:27,870 --> 00:02:32,280
most computers today it was never that

00:02:30,030 --> 00:02:33,989
because john von neumann someone who

00:02:32,280 --> 00:02:37,590
played a major role in physics research

00:02:33,989 --> 00:02:40,260
his internal memo about using the ENIAC

00:02:37,590 --> 00:02:42,060
for nuclear simulations and then

00:02:40,260 --> 00:02:45,060
something that is more close to my heart

00:02:42,060 --> 00:02:51,299
in 1991 Tim berners-lee invented the

00:02:45,060 --> 00:02:53,579
world wide web at CERN before I go into

00:02:51,299 --> 00:02:55,799
how we use Python in high-energy physics

00:02:53,579 --> 00:02:57,450
I would like to talk about what is the

00:02:55,799 --> 00:02:59,670
biggest computing challenges in high

00:02:57,450 --> 00:03:01,790
energy physics high energy physics

00:02:59,670 --> 00:03:04,109
research generates a lot of data

00:03:01,790 --> 00:03:07,620
elementary particles travel extremely

00:03:04,109 --> 00:03:10,560
fast like I mean I guess we are taught

00:03:07,620 --> 00:03:13,400
in our physics and chemistry courses in

00:03:10,560 --> 00:03:16,859
high school about how fast an electron

00:03:13,400 --> 00:03:19,709
moves around the nucleus and you try to

00:03:16,859 --> 00:03:20,880
imagine about how many interactions

00:03:19,709 --> 00:03:23,639
there would be between different

00:03:20,880 --> 00:03:25,180
electrons and each of these interactions

00:03:23,639 --> 00:03:27,069
need to be stored

00:03:25,180 --> 00:03:28,930
but it's not just the size it is also

00:03:27,069 --> 00:03:31,390
the complexity of the data that needs to

00:03:28,930 --> 00:03:33,489
be stored the representation of the

00:03:31,390 --> 00:03:36,010
particles and the trajectories and also

00:03:33,489 --> 00:03:39,370
their provisions and that that is not

00:03:36,010 --> 00:03:42,790
very easy when I said that we need to

00:03:39,370 --> 00:03:46,299
store this much data we actually do not

00:03:42,790 --> 00:03:49,329
store all of the data these experiments

00:03:46,299 --> 00:03:51,940
have a trigger system built-in that

00:03:49,329 --> 00:03:53,709
rejects some of the data outright but

00:03:51,940 --> 00:03:59,379
even then it's petabytes and petabytes

00:03:53,709 --> 00:04:01,239
of data here I have a screenshot of a

00:03:59,379 --> 00:04:04,150
certain web page announcing to the Sun

00:04:01,239 --> 00:04:07,569
datacenter class the 200 petabyte

00:04:04,150 --> 00:04:09,069
milestone and this was back in 2017 it

00:04:07,569 --> 00:04:12,040
has been three whole years since this

00:04:09,069 --> 00:04:13,870
has happened but even this is not really

00:04:12,040 --> 00:04:16,329
the limit of the data that we need to

00:04:13,870 --> 00:04:19,000
store this data storage is going to

00:04:16,329 --> 00:04:21,430
increase exponentially when the Large

00:04:19,000 --> 00:04:24,400
Hadron Collider is upgraded to the high

00:04:21,430 --> 00:04:27,160
luminosity light what is more commonly

00:04:24,400 --> 00:04:29,500
called the H elements and this is going

00:04:27,160 --> 00:04:32,680
to happen in less than a decade so we

00:04:29,500 --> 00:04:34,720
really need to be there for this the

00:04:32,680 --> 00:04:36,460
high-energy physics community has built

00:04:34,720 --> 00:04:38,680
something that I think is unique to the

00:04:36,460 --> 00:04:41,500
high-energy physics research field the

00:04:38,680 --> 00:04:43,120
worldwide LHC computing grid it is a

00:04:41,500 --> 00:04:44,680
network of computers that are

00:04:43,120 --> 00:04:46,500
distributed all over the world at

00:04:44,680 --> 00:04:48,910
research institutes and universities

00:04:46,500 --> 00:04:51,160
where high energy physics research is

00:04:48,910 --> 00:04:53,770
conducted this is used to distribute the

00:04:51,160 --> 00:04:55,570
data storage and computation this solves

00:04:53,770 --> 00:04:57,580
some of the problems because the burden

00:04:55,570 --> 00:04:59,979
of storing the data or computation is

00:04:57,580 --> 00:05:03,250
not on one particular Research Institute

00:04:59,979 --> 00:05:04,900
then again the WLC G is not enough to

00:05:03,250 --> 00:05:08,199
solve all of the high energy physics

00:05:04,900 --> 00:05:10,900
computing requirements si0 six r-spec in

00:05:08,199 --> 00:05:13,080
2006 is an industry standard benchmark

00:05:10,900 --> 00:05:16,300
with a wide variety of codes represented

00:05:13,080 --> 00:05:18,370
HS zero six or eight spec zero six is

00:05:16,300 --> 00:05:21,460
the high energy physics variant of it it

00:05:18,370 --> 00:05:23,320
uses only the C++ base codes from SI

00:05:21,460 --> 00:05:25,990
zero six that match high energy physics

00:05:23,320 --> 00:05:27,970
use cases if you follow the plot on the

00:05:25,990 --> 00:05:30,130
slide you will notice that there is

00:05:27,970 --> 00:05:32,830
almost a factor of five increase for SI

00:05:30,130 --> 00:05:34,030
0 6 whereas just a factor of 2 increase

00:05:32,830 --> 00:05:36,430
for HL 0 6

00:05:34,030 --> 00:05:38,940
this shows that for high energy physics

00:05:36,430 --> 00:05:42,690
use cases especially CPUs are getting

00:05:38,940 --> 00:05:46,320
much faster so what do we do if we can't

00:05:42,690 --> 00:05:48,180
use CPUs let's use GPUs a lot of the

00:05:46,320 --> 00:05:50,400
high energy physics computations are

00:05:48,180 --> 00:05:53,550
embarrassingly parallel which makes it

00:05:50,400 --> 00:05:55,320
ideal for using GPUs science extensive

00:05:53,550 --> 00:05:57,810
use of GPUs for high energy physics

00:05:55,320 --> 00:06:00,450
research also found a spot on the Nvidia

00:05:57,810 --> 00:06:02,550
website at the lower half of the slide

00:06:00,450 --> 00:06:05,520
there is an excerpt from Adrian of

00:06:02,550 --> 00:06:08,400
ticker stop title GPU resources for the

00:06:05,520 --> 00:06:10,080
CNF HPC cluster that shows that using

00:06:08,400 --> 00:06:12,030
GPUs could drastically improve

00:06:10,080 --> 00:06:15,000
performance for high energy physics

00:06:12,030 --> 00:06:16,710
problems The awkward array library

00:06:15,000 --> 00:06:18,240
attempts to solve some of the problems

00:06:16,710 --> 00:06:20,610
that I discussed in the earlier slides

00:06:18,240 --> 00:06:22,710
it was built with the need to perform

00:06:20,610 --> 00:06:24,690
computations on the complex high energy

00:06:22,710 --> 00:06:26,400
physics data that I mentioned and was

00:06:24,690 --> 00:06:27,810
also recently redesigned to have

00:06:26,400 --> 00:06:29,880
different levels of abstraction that

00:06:27,810 --> 00:06:31,290
allowed multiple things like possibly

00:06:29,880 --> 00:06:33,600
having a cheap you back-end in the

00:06:31,290 --> 00:06:35,280
future and to allow someone who wants to

00:06:33,600 --> 00:06:38,130
play with the source code to have access

00:06:35,280 --> 00:06:40,230
to the underlying C++ layer and most

00:06:38,130 --> 00:06:42,360
important to this talk it is meant to be

00:06:40,230 --> 00:06:44,220
used by its Python interface that is

00:06:42,360 --> 00:06:47,250
located at the top of the design tree to

00:06:44,220 --> 00:06:49,320
the right of the slide so what makes a

00:06:47,250 --> 00:06:51,650
language ideal for use in high energy

00:06:49,320 --> 00:06:54,360
physics it has to be easy

00:06:51,650 --> 00:06:56,010
physics physicists don't really want to

00:06:54,360 --> 00:06:58,200
spend a lot of time learning a new

00:06:56,010 --> 00:06:59,669
language you have to remember they are

00:06:58,200 --> 00:07:01,830
not software engineering or computer

00:06:59,669 --> 00:07:04,620
science people and are usually not

00:07:01,830 --> 00:07:06,330
interested in the code itself Python is

00:07:04,620 --> 00:07:08,910
easier to use and learn than most other

00:07:06,330 --> 00:07:10,680
languages okay there are some purists

00:07:08,910 --> 00:07:12,930
who would probably say that Python is

00:07:10,680 --> 00:07:14,550
not necessarily easy if you want to use

00:07:12,930 --> 00:07:17,520
it properly and not be really really

00:07:14,550 --> 00:07:19,950
slow but let's ignore that for now the

00:07:17,520 --> 00:07:21,930
language has to be fast as mentioned in

00:07:19,950 --> 00:07:23,910
an earlier slide high energy physics has

00:07:21,930 --> 00:07:26,100
a lot of data and to perform

00:07:23,910 --> 00:07:28,590
computations on that data you need the

00:07:26,100 --> 00:07:30,330
language to be fast Python is not

00:07:28,590 --> 00:07:32,640
necessarily slow when used with

00:07:30,330 --> 00:07:35,490
libraries like numpy and number it can

00:07:32,640 --> 00:07:38,310
be quite fast so that would have to be

00:07:35,490 --> 00:07:40,470
mainstream if a language is popular it

00:07:38,310 --> 00:07:42,660
is easy to find resources to learn the

00:07:40,470 --> 00:07:45,450
language itself and find support if

00:07:42,660 --> 00:07:47,760
required and according to the screenshot

00:07:45,450 --> 00:07:51,450
of the TI OB language index that is

00:07:47,760 --> 00:07:52,180
definitely true for Python so although

00:07:51,450 --> 00:07:53,710
python

00:07:52,180 --> 00:07:55,900
was not the main language used in

00:07:53,710 --> 00:07:58,120
high-energy physics physicists started

00:07:55,900 --> 00:08:01,240
using Python soon after it was developed

00:07:58,120 --> 00:08:03,669
in 1994 a handful of physicists like

00:08:01,240 --> 00:08:05,710
Jeff Templar started using Python

00:08:03,669 --> 00:08:07,539
these were just small scripts for their

00:08:05,710 --> 00:08:09,729
own type projects were not really used

00:08:07,539 --> 00:08:11,860
on a large scale after three years

00:08:09,729 --> 00:08:13,870
Formula one of the largest national

00:08:11,860 --> 00:08:16,060
laboratories in the u.s. published a

00:08:13,870 --> 00:08:18,490
paper about using Python as an extension

00:08:16,060 --> 00:08:20,139
language for the d0 experiment they

00:08:18,490 --> 00:08:21,850
published the set chip which is the

00:08:20,139 --> 00:08:23,979
flagship conference for computing in

00:08:21,850 --> 00:08:26,949
high-energy physics so it was kind of a

00:08:23,979 --> 00:08:29,440
big deal after a year in 1998

00:08:26,949 --> 00:08:31,900
Jeff Templin published a paper titled

00:08:29,440 --> 00:08:33,789
Python as an integration language at the

00:08:31,900 --> 00:08:37,510
physics department of the University of

00:08:33,789 --> 00:08:39,789
Georgia in 2000 by Thunder Lee started

00:08:37,510 --> 00:08:41,680
been adopted on a larger scale there

00:08:39,789 --> 00:08:44,050
were two talks presented at chirp about

00:08:41,680 --> 00:08:46,750
Python titled dynamic graphical user

00:08:44,050 --> 00:08:49,870
interfaces using XML and J PI thumb from

00:08:46,750 --> 00:08:53,470
formula and either a late c++ user

00:08:49,870 --> 00:08:55,779
interface in python from CERN in 2001

00:08:53,470 --> 00:08:57,940
Philip Canal who is one of the code

00:08:55,779 --> 00:09:00,610
developers of one of the most widely

00:08:57,940 --> 00:09:02,709
used software libraries today give a

00:09:00,610 --> 00:09:04,750
talk summarizing the data analysis and

00:09:02,709 --> 00:09:06,730
visualization trotted chair where he

00:09:04,750 --> 00:09:09,880
emphasizes emphasized the usage of

00:09:06,730 --> 00:09:12,130
Python in high energy physics by 2003

00:09:09,880 --> 00:09:13,870
experiments had started putting Python

00:09:12,130 --> 00:09:16,540
in some of the analysis frameworks and

00:09:13,870 --> 00:09:18,339
once it is in an analysis framework most

00:09:16,540 --> 00:09:21,339
of the people in that experiment start

00:09:18,339 --> 00:09:23,410
using it so let's say by 2003 physicists

00:09:21,339 --> 00:09:26,589
had started seriously using Python

00:09:23,410 --> 00:09:31,510
further analysis but even so C++ was

00:09:26,589 --> 00:09:33,640
still the main language being used so

00:09:31,510 --> 00:09:36,120
this is a plot created by Jim fever ski

00:09:33,640 --> 00:09:40,810
who find that turned year of Python as

00:09:36,120 --> 00:09:43,510
according to this plot in 2019 a Python

00:09:40,810 --> 00:09:47,100
usage with high-energy physics trumped

00:09:43,510 --> 00:09:51,670
the usage of C++ for the first time and

00:09:47,100 --> 00:09:54,339
ok so this plot is should not be relied

00:09:51,670 --> 00:09:57,640
on solely because this is based on the

00:09:54,339 --> 00:09:59,350
github repositories of users therefore a

00:09:57,640 --> 00:10:01,690
well-known high-energy physics

00:09:59,350 --> 00:10:04,499
depository on it apart CMS's table view

00:10:01,690 --> 00:10:07,079
but this disc does give us an

00:10:04,499 --> 00:10:08,849
indication of where things are headed in

00:10:07,079 --> 00:10:10,619
the past that have been mainly two

00:10:08,849 --> 00:10:13,099
languages that have dominated in the

00:10:10,619 --> 00:10:17,729
fluid of high-energy physics there was

00:10:13,099 --> 00:10:21,899
Fortran up to early 1990s there was this

00:10:17,729 --> 00:10:26,069
whole ecosystem built in Fortran with

00:10:21,899 --> 00:10:30,299
far H book and zebra and then in the

00:10:26,069 --> 00:10:31,669
early 1990s route was created which was

00:10:30,299 --> 00:10:33,959
written in C++ and

00:10:31,669 --> 00:10:36,359
route is still being used to this day

00:10:33,959 --> 00:10:39,349
extensively and we do talk about more

00:10:36,359 --> 00:10:43,439
about good in the next few slides but

00:10:39,349 --> 00:10:45,629
let me complete by saying that I am

00:10:43,439 --> 00:10:50,069
optimistic that Python is the language

00:10:45,629 --> 00:10:54,319
of the future so how do highly physics

00:10:50,069 --> 00:10:57,629
people work with data every ing physics

00:10:54,319 --> 00:10:59,579
researcher uses route so route is a body

00:10:57,629 --> 00:11:01,409
where scientific software toolkit it

00:10:59,579 --> 00:11:03,199
provides all the functionalities needed

00:11:01,409 --> 00:11:06,299
to deal with big data processing

00:11:03,199 --> 00:11:09,379
statistical analysis visualization and

00:11:06,299 --> 00:11:12,209
students it is mainly written in C++ and

00:11:09,379 --> 00:11:14,399
when I say that it provides all of the

00:11:12,209 --> 00:11:16,979
functionalities it really does provide

00:11:14,399 --> 00:11:18,569
all of the functionalities it provides

00:11:16,979 --> 00:11:21,149
everything from plotting graphs to

00:11:18,569 --> 00:11:22,979
machine learning libraries and data

00:11:21,149 --> 00:11:25,319
frames for storing for all of that data

00:11:22,979 --> 00:11:27,899
all in this one monolithic package file

00:11:25,319 --> 00:11:30,449
- and notice probably the primary reason

00:11:27,899 --> 00:11:36,329
for the dominance of C++ in high energy

00:11:30,449 --> 00:11:38,789
physics so root was built in the

00:11:36,329 --> 00:11:41,069
mid-1990s by radium prune and ferns

00:11:38,789 --> 00:11:43,409
radicals it convincingly quite

00:11:41,069 --> 00:11:45,419
convincingly with this for the Fortran

00:11:43,409 --> 00:11:48,149
ecosystem in high energy physics I don't

00:11:45,419 --> 00:11:52,319
think any people use for each proofer

00:11:48,149 --> 00:11:53,909
zebra today or I mean even if they do it

00:11:52,319 --> 00:11:55,829
is probably to maintain some sort of

00:11:53,909 --> 00:11:59,879
backward compatibility with data that

00:11:55,829 --> 00:12:03,179
was recorded back in the 1980s so root

00:11:59,879 --> 00:12:05,129
is probably the file format but to be

00:12:03,179 --> 00:12:08,399
more accurate the largest open source

00:12:05,129 --> 00:12:11,579
file format studying the largest amount

00:12:08,399 --> 00:12:14,729
of data load is developed by a small

00:12:11,579 --> 00:12:17,240
team directly meant by axel Norman and

00:12:14,729 --> 00:12:21,440
son who were quite actively

00:12:17,240 --> 00:12:24,050
maintaining and developing it I think to

00:12:21,440 --> 00:12:26,779
this day computing in metaphysics is

00:12:24,050 --> 00:12:29,720
quite synonymous with it it's hard to

00:12:26,779 --> 00:12:31,640
imagine both of them being said I think

00:12:29,720 --> 00:12:34,820
you might have heard of the discovery of

00:12:31,640 --> 00:12:37,490
the Higgs boson at CERN in 2012 if you

00:12:34,820 --> 00:12:39,440
look at the slide at the bottom it is

00:12:37,490 --> 00:12:41,089
the official atlas plot created by a

00:12:39,440 --> 00:12:42,529
hood that was used to represent the

00:12:41,089 --> 00:12:45,020
existence of the Higgs boson

00:12:42,529 --> 00:12:50,540
so root is quite important in

00:12:45,020 --> 00:12:52,850
high-energy physics research but many

00:12:50,540 --> 00:12:55,070
people asked for a Python interface I'm

00:12:52,850 --> 00:12:57,140
not surprised

00:12:55,070 --> 00:13:00,220
so root has Python wrappers around it

00:12:57,140 --> 00:13:02,899
sequence was good and they qualified but

00:13:00,220 --> 00:13:05,420
the root code base is actually quite

00:13:02,899 --> 00:13:07,100
large I think it consists of millions

00:13:05,420 --> 00:13:09,560
and millions of kinds of code if we look

00:13:07,100 --> 00:13:11,660
at the contribution statistics to the

00:13:09,560 --> 00:13:15,670
right of the slide you will notice that

00:13:11,660 --> 00:13:18,320
each of these developers themselves have

00:13:15,670 --> 00:13:21,589
more than a million lines of code added

00:13:18,320 --> 00:13:26,230
to the code base and this doesn't even

00:13:21,589 --> 00:13:30,170
count people who contributed before 2000

00:13:26,230 --> 00:13:32,870
so how does one handle this if you don't

00:13:30,170 --> 00:13:35,779
really expect people to add Python

00:13:32,870 --> 00:13:38,360
bindings around each class for millions

00:13:35,779 --> 00:13:42,410
of Mexico so route came up with

00:13:38,360 --> 00:13:44,360
something for its CPP like I so slave iy

00:13:42,410 --> 00:13:46,760
creates dynamic binding and this was

00:13:44,360 --> 00:13:49,820
initially developed by will love it son

00:13:46,760 --> 00:13:54,730
and fight it deeply integrated with even

00:13:49,820 --> 00:13:59,089
though it does exist in a separate life

00:13:54,730 --> 00:14:01,339
so CPP Wi-Fi is quite an interesting

00:13:59,089 --> 00:14:04,520
thing which I think is quite unique to

00:14:01,339 --> 00:14:06,649
the high energy physics world you might

00:14:04,520 --> 00:14:08,600
be surprised to know that root X we just

00:14:06,649 --> 00:14:10,490
some radius of three main files for

00:14:08,600 --> 00:14:12,680
generating the Python bindings it's

00:14:10,490 --> 00:14:15,200
through dot pi CT v divided by n

00:14:12,680 --> 00:14:17,270
vitalization Baelfire root doesn't have

00:14:15,200 --> 00:14:20,029
separate files for each c++ class to the

00:14:17,270 --> 00:14:23,829
akin to python so this is quite

00:14:20,029 --> 00:14:26,420
convenient if you think about it and

00:14:23,829 --> 00:14:28,920
although it is deeply integrated with

00:14:26,420 --> 00:14:33,029
the world the author may elaborate

00:14:28,920 --> 00:14:35,609
is currently trying to develop it to be

00:14:33,029 --> 00:14:37,319
standalone library and I think that once

00:14:35,609 --> 00:14:39,569
it is fully developed it might be quite

00:14:37,319 --> 00:14:44,730
revolutionary for fields other than high

00:14:39,569 --> 00:14:48,059
energy physics so there is another way

00:14:44,730 --> 00:14:50,819
to read and write to the files it is

00:14:48,059 --> 00:14:53,720
part up so upload is an alternate

00:14:50,819 --> 00:14:57,389
implementation of route IO in Python

00:14:53,720 --> 00:14:59,790
even though my route is improving day by

00:14:57,389 --> 00:15:01,859
day and the route developers are working

00:14:59,790 --> 00:15:05,309
on something but experimental my route

00:15:01,859 --> 00:15:08,069
to solve some of these issues but there

00:15:05,309 --> 00:15:10,579
are still some issues that users would

00:15:08,069 --> 00:15:12,749
run into if they tried using pirated

00:15:10,579 --> 00:15:14,869
there are object ownership issues

00:15:12,749 --> 00:15:17,699
between the C++ and Python route for

00:15:14,869 --> 00:15:20,549
pirate is not really completely pythonic

00:15:17,699 --> 00:15:22,829
like you would expect it to me and it is

00:15:20,549 --> 00:15:25,859
kind of slow to deal with certain types

00:15:22,829 --> 00:15:27,439
of data and here we not really talking

00:15:25,859 --> 00:15:30,749
about my function we are talking about

00:15:27,439 --> 00:15:35,279
slowest and slower than even naive

00:15:30,749 --> 00:15:36,660
Python so that is why up fruit was

00:15:35,279 --> 00:15:39,149
written to solve some of these issues

00:15:36,660 --> 00:15:41,069
and since it is written completely in

00:15:39,149 --> 00:15:43,040
Python it implicitly solves the first

00:15:41,069 --> 00:15:45,509
two issues side out of the bat and

00:15:43,040 --> 00:15:48,059
although that we writing something in

00:15:45,509 --> 00:15:50,519
Python might be quite difficult it is

00:15:48,059 --> 00:15:52,529
not impossible up truth was actually

00:15:50,519 --> 00:15:56,309
created by a single full-time employees

00:15:52,529 --> 00:15:59,009
in favor ski and his student me and also

00:15:56,309 --> 00:16:02,069
of course helped by many volunteers who

00:15:59,009 --> 00:16:04,259
still push comments and send pull

00:16:02,069 --> 00:16:07,110
requests to help in maintaining and

00:16:04,259 --> 00:16:09,029
developing approved is one of the most

00:16:07,110 --> 00:16:09,779
widely used Python packages in high

00:16:09,029 --> 00:16:12,419
energy physics

00:16:09,779 --> 00:16:14,519
although it is relatively quite new okay

00:16:12,419 --> 00:16:19,799
when I say relatively it started being

00:16:14,519 --> 00:16:22,789
written by Jim in late 2017 but when you

00:16:19,799 --> 00:16:26,519
think about it the other library that

00:16:22,789 --> 00:16:27,989
came before it or rather the levy that

00:16:26,519 --> 00:16:32,309
is still being you sort of mean library

00:16:27,989 --> 00:16:34,049
route was developed in mid 1990s that so

00:16:32,309 --> 00:16:37,919
compared to that up route is really

00:16:34,049 --> 00:16:40,319
quite and it is very just Python if you

00:16:37,919 --> 00:16:42,750
look at the graph or rather the bar at

00:16:40,319 --> 00:16:44,610
the top you will notice that

00:16:42,750 --> 00:16:48,360
all of it is just fight for than Jupiter

00:16:44,610 --> 00:16:51,390
notice the 1.5% C that is present is a

00:16:48,360 --> 00:16:55,050
developer tool that I wrote that is just

00:16:51,390 --> 00:16:58,740
to be useful and by developers and users

00:16:55,050 --> 00:17:02,000
don't interact with it and if you look

00:16:58,740 --> 00:17:05,070
at the graph you will realize that

00:17:02,000 --> 00:17:08,250
uproot is used equally up there with the

00:17:05,070 --> 00:17:13,410
other industry two tools for scientific

00:17:08,250 --> 00:17:17,780
computing like numpy inside by so it is

00:17:13,410 --> 00:17:20,220
quite popular and this graph was plotted

00:17:17,780 --> 00:17:24,090
from scientific Linux usage only

00:17:20,220 --> 00:17:26,970
scientific Linux was created in formula

00:17:24,090 --> 00:17:28,860
for use by thesis and we rejected the

00:17:26,970 --> 00:17:32,190
other operating systems because those

00:17:28,860 --> 00:17:35,730
contain some noise with data from bad

00:17:32,190 --> 00:17:42,000
jobs and such so this is quite more

00:17:35,730 --> 00:17:43,740
accurate than other voices so Python is

00:17:42,000 --> 00:17:47,130
not so slow

00:17:43,740 --> 00:17:49,050
contrary to popular but that is only

00:17:47,130 --> 00:17:52,230
when used with libraries like vampire

00:17:49,050 --> 00:17:54,210
number other libraries I am sure there

00:17:52,230 --> 00:17:56,130
are bunch of them out there that improve

00:17:54,210 --> 00:17:59,850
performance or I release the air or

00:17:56,130 --> 00:18:03,000
something and okay so in this thing in

00:17:59,850 --> 00:18:07,140
this benchmark with the time and the

00:18:03,000 --> 00:18:10,470
speed up it is performed on a pod

00:18:07,140 --> 00:18:12,660
computing a fractal if you want to look

00:18:10,470 --> 00:18:15,750
at the code there is linked to the

00:18:12,660 --> 00:18:17,910
notebook at the bottom if you look at

00:18:15,750 --> 00:18:20,970
this closely you will notice that the

00:18:17,910 --> 00:18:23,310
vectorized number I where I found almost

00:18:20,970 --> 00:18:27,180
as fast as C++ root with vector is known

00:18:23,310 --> 00:18:31,200
by at times the speed of 95 on and the

00:18:27,180 --> 00:18:33,780
root at 32 times and if you use

00:18:31,200 --> 00:18:37,700
something like Namba then it is much

00:18:33,780 --> 00:18:42,420
faster than c plus root with the

00:18:37,700 --> 00:18:44,640
compiled by numba numba then so on at 90

00:18:42,420 --> 00:18:47,250
time speed up with root just at 32 times

00:18:44,640 --> 00:18:50,790
but this is to be taken with a pinch of

00:18:47,250 --> 00:18:53,370
salt because this again this is for just

00:18:50,790 --> 00:18:55,620
one piece of code that we chose

00:18:53,370 --> 00:18:57,899
especially to show that

00:18:55,620 --> 00:19:02,039
Python doesn't mean that it is slow and

00:18:57,899 --> 00:19:06,620
I'm sure that for no general uses it

00:19:02,039 --> 00:19:13,259
would be at pad or C++ root would be

00:19:06,620 --> 00:19:15,000
faster than approved so this is a tool

00:19:13,259 --> 00:19:16,710
that was developed outside of high

00:19:15,000 --> 00:19:18,710
energy physics unlike a lot of the

00:19:16,710 --> 00:19:21,570
things that I've been talking about and

00:19:18,710 --> 00:19:24,990
I think most of you might have heard of

00:19:21,570 --> 00:19:27,990
this already my mind 11 is a very

00:19:24,990 --> 00:19:32,970
popular tool that is used in industry

00:19:27,990 --> 00:19:36,179
and even by obvious I would say if you

00:19:32,970 --> 00:19:38,009
look at the github stars there are seven

00:19:36,179 --> 00:19:40,139
thousand stars that reminds me I should

00:19:38,009 --> 00:19:44,129
probably go and study it myself since I

00:19:40,139 --> 00:19:45,929
started using it um and if the stars are

00:19:44,129 --> 00:19:48,289
seven thousand I'm sure that an actual

00:19:45,929 --> 00:19:52,129
number of people that are using it are

00:19:48,289 --> 00:19:57,809
bunch more by bunch I mean like

00:19:52,129 --> 00:20:00,179
exponentially and so my point of this

00:19:57,809 --> 00:20:03,450
slide is not to talk about five and

00:20:00,179 --> 00:20:06,779
eleven itself but how we can use five

00:20:03,450 --> 00:20:10,649
and eleven for high energy physics

00:20:06,779 --> 00:20:14,039
software so why would a high energy

00:20:10,649 --> 00:20:16,740
physics researcher use PI by 2 then it

00:20:14,039 --> 00:20:18,809
is easy to their existing C++ code in

00:20:16,740 --> 00:20:20,909
five and eleven and it is not always

00:20:18,809 --> 00:20:22,740
easy to vectorize all operations

00:20:20,909 --> 00:20:27,330
implemented in Python even if you are

00:20:22,740 --> 00:20:29,730
using a library link also be showed that

00:20:27,330 --> 00:20:32,970
Python does not necessarily mean false

00:20:29,730 --> 00:20:36,870
it was for a particular process like I

00:20:32,970 --> 00:20:39,450
said in general I guess naive C++ code

00:20:36,870 --> 00:20:42,620
will always be faster than ninth Python

00:20:39,450 --> 00:20:43,889
code there might be a few exceptions but

00:20:42,620 --> 00:20:49,110
yeah

00:20:43,889 --> 00:20:52,350
C++ first within Python and I am going

00:20:49,110 --> 00:20:54,629
to again talk about awkward array the

00:20:52,350 --> 00:20:58,700
Navy that I mentioned at the start of

00:20:54,629 --> 00:21:02,250
this file so awkwardly but it was

00:20:58,700 --> 00:21:03,960
initially written solely in Python but

00:21:02,250 --> 00:21:04,530
it was recently implemented in C++ and

00:21:03,960 --> 00:21:07,800
pi

00:21:04,530 --> 00:21:10,050
a lot of success even though it's still

00:21:07,800 --> 00:21:12,990
in development a lot of phases already

00:21:10,050 --> 00:21:16,680
started using it so there are multiple

00:21:12,990 --> 00:21:18,960
reasons why the author decided to

00:21:16,680 --> 00:21:21,900
rewrite it in C++ by binding that one

00:21:18,960 --> 00:21:25,230
the origin of my interface was hard to

00:21:21,900 --> 00:21:28,410
extend and maintain and also the author

00:21:25,230 --> 00:21:30,240
conducted a survey where he asked

00:21:28,410 --> 00:21:32,130
physicists what they required at they

00:21:30,240 --> 00:21:34,860
said that although they appreciate an

00:21:32,130 --> 00:21:37,680
umpire like in this case and they like

00:21:34,860 --> 00:21:41,130
to use it but they still sometimes would

00:21:37,680 --> 00:21:42,870
need an interface for imperative so

00:21:41,130 --> 00:21:45,270
there are other Scientifics like we'd

00:21:42,870 --> 00:21:48,630
let me accept offer today that are using

00:21:45,270 --> 00:21:53,670
already for example the post histogram

00:21:48,630 --> 00:21:57,390
library by a fancy and goofy this brings

00:21:53,670 --> 00:21:59,340
me to the psyche tooth project so the

00:21:57,390 --> 00:22:01,230
cycle type project is meant to contain

00:21:59,340 --> 00:22:03,140
all Python tools that might be required

00:22:01,230 --> 00:22:05,760
for research in high-energy physics

00:22:03,140 --> 00:22:09,060
there are a lot of active developers

00:22:05,760 --> 00:22:11,610
building tools in Python for use in high

00:22:09,060 --> 00:22:14,190
energy physics that a house under this

00:22:11,610 --> 00:22:17,070
project and since all of the tools are

00:22:14,190 --> 00:22:20,570
in Python one can actually consider it

00:22:17,070 --> 00:22:22,770
to be a modified ice tool set and

00:22:20,570 --> 00:22:25,110
physicists can pick and choose the

00:22:22,770 --> 00:22:26,880
library that they need for the current

00:22:25,110 --> 00:22:28,770
use case at that point of time and then

00:22:26,880 --> 00:22:30,090
once they're done with that and they

00:22:28,770 --> 00:22:33,750
need to do something else they can just

00:22:30,090 --> 00:22:35,700
move over to another library and also

00:22:33,750 --> 00:22:39,270
some of the libraries under cycle head

00:22:35,700 --> 00:22:43,110
and extensions to industry develop

00:22:39,270 --> 00:22:45,720
language and this means that it does not

00:22:43,110 --> 00:22:48,810
require a lot of reinventing the wheel

00:22:45,720 --> 00:22:50,940
for high energy physics uses and thus I

00:22:48,810 --> 00:22:53,790
protect also has an actively monitored

00:22:50,940 --> 00:22:56,850
theater channel so if you want to reach

00:22:53,790 --> 00:22:58,290
out to people in this community I have

00:22:56,850 --> 00:23:00,660
the name of the channel with the slide

00:22:58,290 --> 00:23:02,220
so please go ahead and I'm sure you'll

00:23:00,660 --> 00:23:05,100
find a lot of people willing to talk to

00:23:02,220 --> 00:23:06,900
you so this is a list of currently

00:23:05,100 --> 00:23:09,510
active packages under the psyche type

00:23:06,900 --> 00:23:13,170
project this slide was presented by

00:23:09,510 --> 00:23:14,790
Eduardo Rodriguez at chef 2019 if you

00:23:13,170 --> 00:23:16,170
look at the slide closely you will see

00:23:14,790 --> 00:23:17,850
that there are tools for everything

00:23:16,170 --> 00:23:18,509
there are tools for tracking particles

00:23:17,850 --> 00:23:20,669
and decay

00:23:18,509 --> 00:23:23,549
but histogram even pricing fitting

00:23:20,669 --> 00:23:25,080
simulation everything the sagatep

00:23:23,549 --> 00:23:27,330
project is growing with many new

00:23:25,080 --> 00:23:29,340
packages still coming up this is not

00:23:27,330 --> 00:23:31,619
very surprising as it mirrors the Python

00:23:29,340 --> 00:23:34,289
growth plot that are shown in an earlier

00:23:31,619 --> 00:23:35,909
slide this has made more evident by the

00:23:34,289 --> 00:23:37,679
fact that if you look at the slide you

00:23:35,909 --> 00:23:39,929
will notice that some packages are

00:23:37,679 --> 00:23:42,480
attacked as new packages these were

00:23:39,929 --> 00:23:45,629
developed after chap 2019 so they are

00:23:42,480 --> 00:23:47,309
quite new I think the recent advances in

00:23:45,629 --> 00:23:49,859
the fields of machine learning and deep

00:23:47,309 --> 00:23:52,710
learning have played a major role in the

00:23:49,859 --> 00:23:55,499
shift from route and C++ to Python in

00:23:52,710 --> 00:23:57,570
the form of PI root and uproot root has

00:23:55,499 --> 00:23:59,909
its own machine learning library T MVA

00:23:57,570 --> 00:24:01,830
but in my personal opinion I think it

00:23:59,909 --> 00:24:03,749
cannot really measure up to industry

00:24:01,830 --> 00:24:06,269
standard libraries such as pi torch and

00:24:03,749 --> 00:24:08,039
pencil flow but high-energy physicists

00:24:06,269 --> 00:24:09,840
are open to change and invite people

00:24:08,039 --> 00:24:12,509
from industry to speak at their

00:24:09,840 --> 00:24:14,940
conferences for example so much in Tala

00:24:12,509 --> 00:24:17,940
one of the creators of Pi torch was

00:24:14,940 --> 00:24:20,100
invited to speak at a cat 2019 about how

00:24:17,940 --> 00:24:23,129
physicists can use PI torch for their

00:24:20,100 --> 00:24:24,899
research so far this has all been from

00:24:23,129 --> 00:24:25,739
the perspective of a computer science

00:24:24,899 --> 00:24:27,419
student me

00:24:25,739 --> 00:24:29,999
but let's see what high-energy

00:24:27,419 --> 00:24:32,129
physicists have to say this is a slide

00:24:29,999 --> 00:24:36,210
by Chris bird that he presented at PI

00:24:32,129 --> 00:24:37,919
hem 2018 he says that 90% or more of the

00:24:36,210 --> 00:24:40,919
code that he writes will probably never

00:24:37,919 --> 00:24:42,929
be used again the time it takes to write

00:24:40,919 --> 00:24:45,840
and execute his code is important to him

00:24:42,929 --> 00:24:48,090
ok C++ is fast but it probably takes

00:24:45,840 --> 00:24:50,519
longer to write C++ port than Python

00:24:48,090 --> 00:24:53,070
code so in certain cases the benefit of

00:24:50,519 --> 00:24:54,809
performance in C++ might actually be

00:24:53,070 --> 00:24:57,629
costing him time over writing something

00:24:54,809 --> 00:24:59,700
in Python Python is designed to be

00:24:57,629 --> 00:25:02,929
readable it is quite easy to read when

00:24:59,700 --> 00:25:05,700
compared to other languages like say C++

00:25:02,929 --> 00:25:07,499
his last point elaborates on what I have

00:25:05,700 --> 00:25:09,779
already discussed in some earlier slides

00:25:07,499 --> 00:25:12,119
so we can see that there are compelling

00:25:09,779 --> 00:25:15,539
arguments that make some physicists want

00:25:12,119 --> 00:25:17,700
to switch over to Python from C++ so far

00:25:15,539 --> 00:25:19,889
I have been talking about Python usage

00:25:17,700 --> 00:25:22,049
in high-energy physics but I would like

00:25:19,889 --> 00:25:24,539
to briefly talk about Python usage in

00:25:22,049 --> 00:25:26,700
other physics fields so I think the

00:25:24,539 --> 00:25:28,800
physics field having the most usage of

00:25:26,700 --> 00:25:30,660
Python is astronomy

00:25:28,800 --> 00:25:33,060
a stripper is a really well-known

00:25:30,660 --> 00:25:35,160
library it is a little similar to

00:25:33,060 --> 00:25:37,920
psychic that although I would say that

00:25:35,160 --> 00:25:40,380
it has more adoption than psych it have

00:25:37,920 --> 00:25:42,330
at least at this current stage and if

00:25:40,380 --> 00:25:43,980
you look at the plot on the slide you

00:25:42,330 --> 00:25:46,380
will notice that when software is

00:25:43,980 --> 00:25:48,450
mentioned in astronomical equations the

00:25:46,380 --> 00:25:50,130
tendency for it to be written in python

00:25:48,450 --> 00:25:52,710
has exponentially grown over the years

00:25:50,130 --> 00:25:54,510
and completely dominates over other

00:25:52,710 --> 00:25:57,000
languages used for writing software

00:25:54,510 --> 00:26:02,670
that's to me like ideal MATLAB or

00:25:57,000 --> 00:26:05,040
Fortran so in my mind there are three

00:26:02,670 --> 00:26:07,590
main ways to push Python adoption in

00:26:05,040 --> 00:26:09,900
high-energy physics so this light

00:26:07,590 --> 00:26:14,160
describes what I think should be the way

00:26:09,900 --> 00:26:17,160
to promote Python for libraries that

00:26:14,160 --> 00:26:19,500
already exist so one could use CP B by Y

00:26:17,160 --> 00:26:21,060
to create Python bindings and this is

00:26:19,500 --> 00:26:23,220
definitely the easiest way to do it

00:26:21,060 --> 00:26:25,940
because like I said you just need a few

00:26:23,220 --> 00:26:29,610
Python files to do all of the binding

00:26:25,940 --> 00:26:35,970
but this may not be ready for generalize

00:26:29,610 --> 00:26:38,280
to the more common option as in used

00:26:35,970 --> 00:26:41,790
outside of high energy physics is using

00:26:38,280 --> 00:26:44,970
my mind 11 but again it's tedious to

00:26:41,790 --> 00:26:47,160
that entire code bases in my mind 11 but

00:26:44,970 --> 00:26:49,830
then again it's easier than me writing

00:26:47,160 --> 00:26:52,770
that I could use in Python and since it

00:26:49,830 --> 00:26:54,450
is used outside of energy physics you

00:26:52,770 --> 00:26:57,960
will find people that have faced the

00:26:54,450 --> 00:26:59,610
problems that you faced by trying to use

00:26:57,960 --> 00:27:02,330
finite equipment to wrap on the filter

00:26:59,610 --> 00:27:05,130
so help might be void is V available and

00:27:02,330 --> 00:27:08,100
the third option is rewriting it all in

00:27:05,130 --> 00:27:10,800
Python and this might be a little more

00:27:08,100 --> 00:27:12,900
difficult than the other two options but

00:27:10,800 --> 00:27:15,870
this can be done as demonstrated in

00:27:12,900 --> 00:27:18,690
octave but then again it's impossible to

00:27:15,870 --> 00:27:21,450
rewrite all of the C++ physics libraries

00:27:18,690 --> 00:27:23,880
in fight for energy physics libraries

00:27:21,450 --> 00:27:25,710
that have not yet being written all are

00:27:23,880 --> 00:27:26,550
being planned to be written in the next

00:27:25,710 --> 00:27:29,520
few days

00:27:26,550 --> 00:27:31,260
this is what I becomes so one thing you

00:27:29,520 --> 00:27:35,970
see BBY by fat accountants

00:27:31,260 --> 00:27:37,920
not really ready for children if you try

00:27:35,970 --> 00:27:41,310
using it you might run into some

00:27:37,920 --> 00:27:45,810
unsurmountable problems the other option

00:27:41,310 --> 00:27:48,720
is using 5 and 11 and using the involves

00:27:45,810 --> 00:27:51,870
writing a lot of additional board in

00:27:48,720 --> 00:27:53,550
addition to your C++ but then again it

00:27:51,870 --> 00:27:55,740
is not very difficult to do this and

00:27:53,550 --> 00:27:58,650
this is definitely the go-to strategy

00:27:55,740 --> 00:28:00,810
C++ feed is required and the third

00:27:58,650 --> 00:28:03,780
option is rewriting the entire thing in

00:28:00,810 --> 00:28:06,630
Python and for a new library this might

00:28:03,780 --> 00:28:09,540
be preferred because for a physicist who

00:28:06,630 --> 00:28:11,640
does not know C++ or Python or any

00:28:09,540 --> 00:28:14,370
language for that matter using Python

00:28:11,640 --> 00:28:16,530
might be easier because it is easier to

00:28:14,370 --> 00:28:19,290
learn than other languages but then

00:28:16,530 --> 00:28:21,210
again if performance is critical then it

00:28:19,290 --> 00:28:23,870
is recommended that you only write it in

00:28:21,210 --> 00:28:26,070
Python this you are familiar with the

00:28:23,870 --> 00:28:27,990
ecosystem and libraries such as not by a

00:28:26,070 --> 00:28:31,470
number that would if you get the

00:28:27,990 --> 00:28:33,690
performance that you desire to conclude

00:28:31,470 --> 00:28:35,610
I would like to say that it is evident

00:28:33,690 --> 00:28:37,890
from my top that Python is a popular

00:28:35,610 --> 00:28:39,570
language even in Sciences like high

00:28:37,890 --> 00:28:43,500
energy physics where performance is

00:28:39,570 --> 00:28:46,110
critical - is quite readable compared to

00:28:43,500 --> 00:28:47,850
other languages like C++ and this is

00:28:46,110 --> 00:28:49,830
something that people whose primary

00:28:47,850 --> 00:28:52,310
interest is not learning a new

00:28:49,830 --> 00:28:54,810
programming language would desired and

00:28:52,310 --> 00:28:57,390
according to me Python is most

00:28:54,810 --> 00:28:58,860
definitely the natural bridge to machine

00:28:57,390 --> 00:29:00,810
learning another statistical software

00:28:58,860 --> 00:29:02,670
outside of high energy physics

00:29:00,810 --> 00:29:04,980
although there are some alternatives in

00:29:02,670 --> 00:29:08,540
other languages the most popularly known

00:29:04,980 --> 00:29:11,220
and used ones are definitely in Python

00:29:08,540 --> 00:29:13,500
newcomers to high-energy physics you

00:29:11,220 --> 00:29:15,600
probably know about industry standard

00:29:13,500 --> 00:29:17,670
tools like finders intensive flow as

00:29:15,600 --> 00:29:21,600
compared to the route alternatives like

00:29:17,670 --> 00:29:24,570
art it FA might be a v8 so in my firm

00:29:21,600 --> 00:29:25,950
opinion I believe that Python is here to

00:29:24,570 --> 00:29:28,520
stay in the high energy physics

00:29:25,950 --> 00:29:31,530
community for the foreseeable future

00:29:28,520 --> 00:29:33,990
so if several people have helped me with

00:29:31,530 --> 00:29:36,390
my talk it will really like to

00:29:33,990 --> 00:29:39,660
acknowledge their health Chimpy Barsky

00:29:36,390 --> 00:29:43,200
Jeff Teflon Henry Steiner and what about

00:29:39,660 --> 00:29:47,010
Regas and many others were motivated me

00:29:43,200 --> 00:29:48,020
and helped me write my slides so here

00:29:47,010 --> 00:29:50,660
are some links

00:29:48,020 --> 00:29:52,790
mostly talks but you might want to look

00:29:50,660 --> 00:29:54,710
at if you want to know more about how we

00:29:52,790 --> 00:29:59,810
use Python for high energy physics

00:29:54,710 --> 00:30:01,760
research now this slide I have the links

00:29:59,810 --> 00:30:04,340
to the projects that I mentioned in my

00:30:01,760 --> 00:30:05,840
slides if we want to go and look at the

00:30:04,340 --> 00:30:08,900
source code that maybe will contribute

00:30:05,840 --> 00:30:11,390
to some of them that brings me to the

00:30:08,900 --> 00:30:14,720
end of my talk if you want to contact me

00:30:11,390 --> 00:30:16,940
you might do so with us at gmail.com and

00:30:14,720 --> 00:30:19,220
if you want to view my work you can do

00:30:16,940 --> 00:30:23,200
that at github under the name ring-toss

00:30:19,220 --> 00:30:23,200

YouTube URL: https://www.youtube.com/watch?v=jClVsR6XfdI


