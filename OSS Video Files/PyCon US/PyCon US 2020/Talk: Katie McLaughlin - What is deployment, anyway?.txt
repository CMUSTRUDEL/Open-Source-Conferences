Title: Talk: Katie McLaughlin - What is deployment, anyway?
Publication date: 2021-05-05
Playlist: PyCon US 2020
Description: 
	Presented by:
Katie McLaughlin

So you’ve finished the DjangoGirls tutorial, but now you want to share it with the outside world, but how do you go about that?

What even is production? What is the deal with web servers versus web service gateway interfaces? And static, what’s that, then? What is involved in choosing a platform or infrastructure as a service? What even are databases?

In this presentation, we will discuss the basics beyond running a Django project locally, and discuss the concepts and strategies around how to deploy your project, ultimately answering the question, “What is deployment, anyway?”




Talk slides: https://glasnt.com/talks/2020_04_PyCon_Talk.podium
Talk resources: https://github.com/glasnt/talks/blob/gh-pages/2020_04_PyCon_Talk.podium/README.md
Captions: 
	00:00:04,540 --> 00:00:10,540
hi I'm Katie and this is what is

00:00:07,479 --> 00:00:12,820
deployment anyway this isn't a talk

00:00:10,540 --> 00:00:14,740
about the one true way to deploy your

00:00:12,820 --> 00:00:16,810
application this talk is full of

00:00:14,740 --> 00:00:18,849
opinions but mostly it's a review of the

00:00:16,810 --> 00:00:21,369
world of deployment as it is in the year

00:00:18,849 --> 00:00:23,680
2020 this talk is going to dive into the

00:00:21,369 --> 00:00:25,660
complexities of deployment in essence

00:00:23,680 --> 00:00:28,689
answering the question well what is

00:00:25,660 --> 00:00:31,329
deployment anyway well specifically what

00:00:28,689 --> 00:00:32,860
is Jango deployment anyway I'm choosing

00:00:31,329 --> 00:00:35,230
Jango here for a reason that will become

00:00:32,860 --> 00:00:37,000
apparent later some of the points of

00:00:35,230 --> 00:00:38,890
interest along our journey today we'll

00:00:37,000 --> 00:00:40,510
start by looking exactly what comes out

00:00:38,890 --> 00:00:42,370
of the box with Jango and then we'll

00:00:40,510 --> 00:00:44,020
discuss some of the complexities Jango

00:00:42,370 --> 00:00:46,270
has compared to other web frameworks

00:00:44,020 --> 00:00:48,100
when it comes to deployment we'll also

00:00:46,270 --> 00:00:51,370
discuss some of the helpers that Jango

00:00:48,100 --> 00:00:53,350
has to assist us along the way this talk

00:00:51,370 --> 00:00:56,530
and the code examples are specifically

00:00:53,350 --> 00:00:58,540
for Jango 30.5 and Python three point

00:00:56,530 --> 00:01:00,940
eight point two if you're joining me on

00:00:58,540 --> 00:01:02,920
YouTube from the year 2028 I'm sorry

00:01:00,940 --> 00:01:04,750
this talk might be a little bit out of

00:01:02,920 --> 00:01:07,509
date but hopefully you'll still learn

00:01:04,750 --> 00:01:09,490
something we're also just going to stick

00:01:07,509 --> 00:01:11,500
to the base Jango today no additional

00:01:09,490 --> 00:01:13,300
features nothing asynchronous no task

00:01:11,500 --> 00:01:14,979
management no other helpers just

00:01:13,300 --> 00:01:16,960
whatever comes out of the box and stock

00:01:14,979 --> 00:01:18,430
standard Jango this talk should be

00:01:16,960 --> 00:01:20,170
useful if you're anywhere from looking

00:01:18,430 --> 00:01:21,880
at Jango to the first time to working

00:01:20,170 --> 00:01:24,790
out how to deploy your Jango girls

00:01:21,880 --> 00:01:26,950
tutorial project or if you want to just

00:01:24,790 --> 00:01:29,770
give a refresher about what Jango is all

00:01:26,950 --> 00:01:33,250
about so let's have a look at Jango as

00:01:29,770 --> 00:01:35,799
it comes out of the box so let's open up

00:01:33,250 --> 00:01:38,140
a new terminal and pip install Jango now

00:01:35,799 --> 00:01:41,260
I have Jango installed but I can't do a

00:01:38,140 --> 00:01:43,090
lot yet what I need is a Django project

00:01:41,260 --> 00:01:46,119
I can create a template Django project

00:01:43,090 --> 00:01:48,130
by running Django admin start project my

00:01:46,119 --> 00:01:49,299
template I'll call it my project and I'm

00:01:48,130 --> 00:01:51,610
going to install it to the current

00:01:49,299 --> 00:01:54,880
directory now I get a whole bunch of

00:01:51,610 --> 00:01:56,830
template files especially the managed up

00:01:54,880 --> 00:01:59,650
PI file is going to be super useful and

00:01:56,830 --> 00:02:01,540
we'll be using this file a lot from here

00:01:59,650 --> 00:02:04,150
to run a local web server I need to run

00:02:01,540 --> 00:02:06,580
Python managed to PI run server which

00:02:04,150 --> 00:02:08,649
will start a local web server for me but

00:02:06,580 --> 00:02:10,689
there's this great big honking read

00:02:08,649 --> 00:02:13,180
error message talking about unapplied

00:02:10,689 --> 00:02:14,919
migrations there is a helpful suggestion

00:02:13,180 --> 00:02:17,169
than what I should run to fix this

00:02:14,919 --> 00:02:18,400
though so let's stop our web server and

00:02:17,169 --> 00:02:20,830
run Python

00:02:18,400 --> 00:02:22,150
I migrated hey a whole bunch of

00:02:20,830 --> 00:02:23,530
successful outlet

00:02:22,150 --> 00:02:25,659
it looks like it's running all the

00:02:23,530 --> 00:02:28,180
migrations for me has it done anything

00:02:25,659 --> 00:02:30,430
to change my local file system let's

00:02:28,180 --> 00:02:32,379
have a look hey there's a database file

00:02:30,430 --> 00:02:35,110
there now this should be useful so let's

00:02:32,379 --> 00:02:37,299
try running run server again and I no

00:02:35,110 --> 00:02:39,280
longer get a great big red error message

00:02:37,299 --> 00:02:42,459
I do get suggested that I should go to

00:02:39,280 --> 00:02:44,290
this URL and hey the install worked

00:02:42,459 --> 00:02:46,720
successfully congratulations

00:02:44,290 --> 00:02:48,819
I now have Gengo running locally in a

00:02:46,720 --> 00:02:50,950
template project and I can navigate to

00:02:48,819 --> 00:02:53,500
the admin and I can start developing my

00:02:50,950 --> 00:02:55,329
django application it is really simple

00:02:53,500 --> 00:02:57,099
for us to get our application working

00:02:55,329 --> 00:02:59,920
locally and that's down to Django's

00:02:57,099 --> 00:03:02,079
local development story Python managed

00:02:59,920 --> 00:03:03,879
app I run seven times everything we need

00:03:02,079 --> 00:03:06,280
to to get django running locally it

00:03:03,879 --> 00:03:08,920
serves as a local webserver primarily

00:03:06,280 --> 00:03:11,200
which is extraordinarily useful for

00:03:08,920 --> 00:03:13,659
local development the documentation

00:03:11,200 --> 00:03:15,609
describes what run server does as starts

00:03:13,659 --> 00:03:18,579
a lightweight development web server on

00:03:15,609 --> 00:03:21,099
the local machine sure but a couple of

00:03:18,579 --> 00:03:23,680
paragraphs down in big capital letters

00:03:21,099 --> 00:03:27,160
do not use this server in a production

00:03:23,680 --> 00:03:28,510
setting don't I can't tell you how many

00:03:27,160 --> 00:03:31,030
times I've seen this run in production

00:03:28,510 --> 00:03:34,299
but the documentation says right there

00:03:31,030 --> 00:03:37,060
don't it has not got undergone any

00:03:34,299 --> 00:03:39,459
security audits or performance tests and

00:03:37,060 --> 00:03:41,379
that's how it's going to stay we are in

00:03:39,459 --> 00:03:44,410
the business of making web frameworks

00:03:41,379 --> 00:03:46,750
not web servers Django is in the

00:03:44,410 --> 00:03:49,750
business of making web frameworks not

00:03:46,750 --> 00:03:52,299
web servers Django is an extremely

00:03:49,750 --> 00:03:54,720
stable production ready web framework it

00:03:52,299 --> 00:03:57,430
is very good at being a web framework

00:03:54,720 --> 00:03:59,400
the fact that it provides any local web

00:03:57,430 --> 00:04:02,410
server functionality at all is amazing

00:03:59,400 --> 00:04:05,049
but it calls it out explicitly that you

00:04:02,410 --> 00:04:06,730
do not use it for production we will

00:04:05,049 --> 00:04:10,329
need to replace the local web server

00:04:06,730 --> 00:04:12,040
with something else the documentation

00:04:10,329 --> 00:04:15,310
has brought up a couple of terms that we

00:04:12,040 --> 00:04:18,190
really should describe particularly what

00:04:15,310 --> 00:04:21,910
is production anyway well production is

00:04:18,190 --> 00:04:24,550
a live environment but why is it called

00:04:21,910 --> 00:04:26,469
production I've asked this question of a

00:04:24,550 --> 00:04:27,789
couple of Python practitioners many of

00:04:26,469 --> 00:04:29,740
whom have more than a decade of

00:04:27,789 --> 00:04:31,960
experience in the question released and

00:04:29,740 --> 00:04:34,600
thinking the best I can find

00:04:31,960 --> 00:04:37,900
is a paper from the 1950s which compares

00:04:34,600 --> 00:04:40,509
from producing computers and computer

00:04:37,900 --> 00:04:42,280
software to a production line in the

00:04:40,509 --> 00:04:45,069
local websites however think of it as

00:04:42,280 --> 00:04:47,289
more of a theatrical production you have

00:04:45,069 --> 00:04:48,819
all the backend stuff working with the

00:04:47,289 --> 00:04:52,479
lighting of the sound to put on a

00:04:48,819 --> 00:04:55,509
performance that your user sees but what

00:04:52,479 --> 00:04:57,520
is a web server anyway thankfully that

00:04:55,509 --> 00:04:59,830
one is a little bit more aptly named a

00:04:57,520 --> 00:05:01,690
web server serves websites there are

00:04:59,830 --> 00:05:03,250
local web servers like run server but

00:05:01,690 --> 00:05:06,550
there are also production-grade web

00:05:03,250 --> 00:05:08,590
servers a web server is the service that

00:05:06,550 --> 00:05:10,509
responds when you enter a website URL

00:05:08,590 --> 00:05:13,389
into your browser and deals with things

00:05:10,509 --> 00:05:15,940
like HTTP protocol handshakes content

00:05:13,389 --> 00:05:18,310
types and whatever run server is our

00:05:15,940 --> 00:05:20,979
local web server so it serves our local

00:05:18,310 --> 00:05:24,310
website but it also acts as a static

00:05:20,979 --> 00:05:27,250
server what is static then static static

00:05:24,310 --> 00:05:29,169
assets media this refers to the unmoving

00:05:27,250 --> 00:05:31,930
parts of our web site relative to the

00:05:29,169 --> 00:05:35,050
dynamic parts assets might be pictures

00:05:31,930 --> 00:05:36,639
videos user uploaded content it's the

00:05:35,050 --> 00:05:39,280
stuff that we can still locally on disk

00:05:36,639 --> 00:05:41,770
and serve as needed as we look at the

00:05:39,280 --> 00:05:43,659
documentation we can see that serving

00:05:41,770 --> 00:05:46,330
static files in development happens if

00:05:43,659 --> 00:05:48,940
we have debug enabled and if we've got

00:05:46,330 --> 00:05:51,789
contrib static files in our settings

00:05:48,940 --> 00:05:53,860
sure but also the documentation has

00:05:51,789 --> 00:05:56,979
static files also says that it is not

00:05:53,860 --> 00:05:59,080
suitable for production use this is yet

00:05:56,979 --> 00:06:00,849
another local development helper so we

00:05:59,080 --> 00:06:04,000
will need to find something else to

00:06:00,849 --> 00:06:05,949
serve our static later on our third

00:06:04,000 --> 00:06:08,320
major elements that we have is data

00:06:05,949 --> 00:06:09,460
bases now we saw this earlier where

00:06:08,320 --> 00:06:12,219
there was this file that was

00:06:09,460 --> 00:06:14,469
automatically generated for us that file

00:06:12,219 --> 00:06:17,620
was created because we had a default

00:06:14,469 --> 00:06:20,469
configuration in our settings file which

00:06:17,620 --> 00:06:22,810
defines that SQLite 3 will be our

00:06:20,469 --> 00:06:26,740
default database engine this means that

00:06:22,810 --> 00:06:28,240
we will use SQLite SQLite according to

00:06:26,740 --> 00:06:31,360
the documentation is an excellent

00:06:28,240 --> 00:06:34,060
development alternative SQLite happens

00:06:31,360 --> 00:06:36,729
to work as a local file to store the

00:06:34,060 --> 00:06:39,419
database but again we are going to need

00:06:36,729 --> 00:06:42,159
to find something else for production

00:06:39,419 --> 00:06:44,529
Django's ease of use in development

00:06:42,159 --> 00:06:46,009
makes it extraordinarily easy to get

00:06:44,529 --> 00:06:48,650
started and get to vel

00:06:46,009 --> 00:06:50,500
but for all these helpers none of them

00:06:48,650 --> 00:06:54,520
can be used in a production setting

00:06:50,500 --> 00:06:58,789
which makes Django complex not

00:06:54,520 --> 00:07:00,530
complicated just complex Django doesn't

00:06:58,789 --> 00:07:02,210
provide you with a web server or a

00:07:00,530 --> 00:07:04,940
database that's production ready it

00:07:02,210 --> 00:07:06,710
doesn't do anything about static files

00:07:04,940 --> 00:07:08,570
so you're gonna have to provide your own

00:07:06,710 --> 00:07:09,949
and if you aren't familiar with the

00:07:08,570 --> 00:07:12,039
production grade offerings out there

00:07:09,949 --> 00:07:14,930
you'll end up getting confused or worse

00:07:12,039 --> 00:07:18,280
leaning on using the development systems

00:07:14,930 --> 00:07:21,560
in production which you should not do

00:07:18,280 --> 00:07:24,620
however now is an important time to

00:07:21,560 --> 00:07:26,389
mention something else here compared the

00:07:24,620 --> 00:07:28,280
out-of-the-box functionality of Django

00:07:26,389 --> 00:07:30,470
to something like flask a lot of

00:07:28,280 --> 00:07:32,449
tutorials you'll find online say here's

00:07:30,470 --> 00:07:36,320
how to deploy Python to production and

00:07:32,449 --> 00:07:39,289
just give you one app PI file with a

00:07:36,320 --> 00:07:41,870
hello world no database no static no

00:07:39,289 --> 00:07:44,300
complexities and this makes it really

00:07:41,870 --> 00:07:46,880
easy for them to say just copy this code

00:07:44,300 --> 00:07:49,750
some iron it'll run it's easy but this

00:07:46,880 --> 00:07:52,970
is because of one simple fact state

00:07:49,750 --> 00:07:55,400
Django is a stateful application it has

00:07:52,970 --> 00:07:57,020
a database requirement and static assets

00:07:55,400 --> 00:08:00,199
requirements out of the box

00:07:57,020 --> 00:08:02,750
flask by default does not a sample

00:08:00,199 --> 00:08:05,750
HelloWorld and flux doesn't require a

00:08:02,750 --> 00:08:09,229
database or images so it's so much easy

00:08:05,750 --> 00:08:11,210
to deploy yes you can connect a flask

00:08:09,229 --> 00:08:13,550
application to a myriad of other backing

00:08:11,210 --> 00:08:16,720
services but by default you do not have

00:08:13,550 --> 00:08:18,949
to so the simple hello world works

00:08:16,720 --> 00:08:21,949
stateful applications however are

00:08:18,949 --> 00:08:24,080
complex and this is why I chose Django

00:08:21,949 --> 00:08:26,260
for my context today if I chose an flask

00:08:24,080 --> 00:08:29,630
this would have been a lightning talk

00:08:26,260 --> 00:08:30,949
but it's not just Django anytime you

00:08:29,630 --> 00:08:32,900
care about persistence you add

00:08:30,949 --> 00:08:34,880
complexity to your deployments and

00:08:32,900 --> 00:08:37,400
funnily enough this is also mentioned in

00:08:34,880 --> 00:08:39,289
the documentation back on the page about

00:08:37,400 --> 00:08:42,140
serving static files in production it

00:08:39,289 --> 00:08:43,969
mentions this wonderful little gem every

00:08:42,140 --> 00:08:47,120
production setup will be a little bit

00:08:43,969 --> 00:08:48,980
different every production setup will be

00:08:47,120 --> 00:08:50,750
a little bit different I don't know who

00:08:48,980 --> 00:08:52,550
added this to the documentation but it's

00:08:50,750 --> 00:08:54,860
been there for about a decade at this

00:08:52,550 --> 00:08:57,840
point and this is such an important

00:08:54,860 --> 00:09:00,480
point it depend

00:08:57,840 --> 00:09:02,820
is the line that I hear in nearly every

00:09:00,480 --> 00:09:04,710
other deployment talk I've seen when

00:09:02,820 --> 00:09:07,770
trying to tell you the one true way to

00:09:04,710 --> 00:09:10,770
do deployment it depends and that's

00:09:07,770 --> 00:09:13,140
correct but I'm not gonna use that line

00:09:10,770 --> 00:09:16,220
instead I'm gonna use this tape I'm

00:09:13,140 --> 00:09:19,170
assisted min I am NOT your sucide min I

00:09:16,220 --> 00:09:21,270
am a sis administrator I'm an Operations

00:09:19,170 --> 00:09:23,580
engineer I've been SRA up in an

00:09:21,270 --> 00:09:25,350
automation engineer I've been doing this

00:09:23,580 --> 00:09:27,570
for nearly a decade at this point I've

00:09:25,350 --> 00:09:29,310
worked for web hosting providers for

00:09:27,570 --> 00:09:31,590
platforms as a service and now for an

00:09:29,310 --> 00:09:33,570
infrastructure as a service each and

00:09:31,590 --> 00:09:39,120
every deployment is different and unique

00:09:33,570 --> 00:09:40,860
and beautiful and complex to deploy any

00:09:39,120 --> 00:09:42,660
stateful application you're going to

00:09:40,860 --> 00:09:44,550
need three things you're going to need

00:09:42,660 --> 00:09:45,900
somewhere to run your web framework and

00:09:44,550 --> 00:09:48,090
then you're going to need to think about

00:09:45,900 --> 00:09:50,100
your state you need to connect to your

00:09:48,090 --> 00:09:52,530
database and you probably need to serve

00:09:50,100 --> 00:09:54,540
static buzz this is the same trifecta

00:09:52,530 --> 00:09:56,340
for Django to deploy a Django

00:09:54,540 --> 00:09:58,140
application you're going to need to run

00:09:56,340 --> 00:10:00,600
a web framework connect to a database

00:09:58,140 --> 00:10:03,480
instead of static files these

00:10:00,600 --> 00:10:06,300
requirements require you to connect to

00:10:03,480 --> 00:10:08,910
state it also requires that you need

00:10:06,300 --> 00:10:11,940
somewhere to run your web server Django

00:10:08,910 --> 00:10:14,760
has helpers for this in order they are

00:10:11,940 --> 00:10:16,800
whiskey compatibility the my Greek mud

00:10:14,760 --> 00:10:18,360
and the collects data command the rest

00:10:16,800 --> 00:10:21,480
of this talk will be describing how

00:10:18,360 --> 00:10:24,500
these helpers work and how they can help

00:10:21,480 --> 00:10:27,180
us when deploying our application so

00:10:24,500 --> 00:10:29,730
step one we need to be able to run

00:10:27,180 --> 00:10:32,760
Django as I mentioned Django is whiskey

00:10:29,730 --> 00:10:34,770
compatible whiskey stands for web server

00:10:32,760 --> 00:10:36,540
gateway interface and it's a Python

00:10:34,770 --> 00:10:40,560
standard for web servers but like what

00:10:36,540 --> 00:10:42,390
is whiskey anyway whiskey is a standard

00:10:40,560 --> 00:10:45,120
interface for Python applications to

00:10:42,390 --> 00:10:47,070
talk to a web server it's a web server

00:10:45,120 --> 00:10:51,000
gateway interface it was a standard

00:10:47,070 --> 00:10:52,410
proposed back in 2003 as pepp 333 as a

00:10:51,000 --> 00:10:54,150
prompt to standardize seen to face

00:10:52,410 --> 00:10:56,550
between web servers and Python web

00:10:54,150 --> 00:10:58,560
frameworks it allows us to choose any

00:10:56,550 --> 00:11:00,090
web server we want that understands

00:10:58,560 --> 00:11:02,400
whiskey and use it with our django

00:11:00,090 --> 00:11:05,040
application as per the documentation

00:11:02,400 --> 00:11:07,530
start project itself does do a minimal

00:11:05,040 --> 00:11:10,020
whiskey configuration for you and that

00:11:07,530 --> 00:11:11,640
was that whiskey pie file this file

00:11:10,020 --> 00:11:13,650
includes all the information

00:11:11,640 --> 00:11:16,140
that whiskey needs to be able to get a

00:11:13,650 --> 00:11:16,950
collar ball that can run your Python

00:11:16,140 --> 00:11:19,830
application

00:11:16,950 --> 00:11:22,680
Carlton Gibson did an entire talk about

00:11:19,830 --> 00:11:24,300
these four lines to deploy a django app

00:11:22,680 --> 00:11:26,760
with a whiskey web server you're going

00:11:24,300 --> 00:11:28,530
to need a whiskey web server two of the

00:11:26,760 --> 00:11:30,990
most common whiskey web servers are

00:11:28,530 --> 00:11:32,400
micro whiskey and G unicorn each of

00:11:30,990 --> 00:11:36,450
these web servers have their own

00:11:32,400 --> 00:11:38,790
dedicated talk so how do you deploy a

00:11:36,450 --> 00:11:40,410
whiskey web server well there are going

00:11:38,790 --> 00:11:42,840
to be many options to choose from in

00:11:40,410 --> 00:11:45,630
many ways that you can go about this but

00:11:42,840 --> 00:11:48,270
I have a better question how much custom

00:11:45,630 --> 00:11:50,130
infrastructure do you want because as we

00:11:48,270 --> 00:11:52,140
saw before every single production setup

00:11:50,130 --> 00:11:53,940
is a little bit different but there are

00:11:52,140 --> 00:11:57,390
many choices out there that will work

00:11:53,940 --> 00:11:59,280
for 80% of cases if you have a standard

00:11:57,390 --> 00:12:01,290
Django application and if you don't have

00:11:59,280 --> 00:12:04,770
any strong opinions about added

00:12:01,290 --> 00:12:06,930
complexities or special assistance 80%

00:12:04,770 --> 00:12:09,930
of the time these systems will work for

00:12:06,930 --> 00:12:11,850
you more importantly how much

00:12:09,930 --> 00:12:14,520
infrastructure management do you want to

00:12:11,850 --> 00:12:16,080
do yourself if you're a django developer

00:12:14,520 --> 00:12:17,910
you probably want to develop in django

00:12:16,080 --> 00:12:20,400
you don't want to be spending your time

00:12:17,910 --> 00:12:22,710
managing your infrastructure and I mean

00:12:20,400 --> 00:12:24,630
sure it is super interesting to be able

00:12:22,710 --> 00:12:26,520
to set up your own physical server your

00:12:24,630 --> 00:12:28,980
own network your own web server your own

00:12:26,520 --> 00:12:30,180
redundant power your own everything but

00:12:28,980 --> 00:12:32,280
when you just want to get your

00:12:30,180 --> 00:12:35,010
application online why not pay somebody

00:12:32,280 --> 00:12:36,630
else to do that for you and again we

00:12:35,010 --> 00:12:38,610
don't have anything custom in our setup

00:12:36,630 --> 00:12:40,740
and we don't have any strong opinions

00:12:38,610 --> 00:12:44,040
about anything so why not just let

00:12:40,740 --> 00:12:47,100
somebody manage that for us what do you

00:12:44,040 --> 00:12:48,840
want to worry about as a sysadmin I used

00:12:47,100 --> 00:12:51,210
to get paid to worry you're a developer

00:12:48,840 --> 00:12:52,590
a little worried is good but thankfully

00:12:51,210 --> 00:12:54,960
you can pay someone to take that away

00:12:52,590 --> 00:12:57,330
this is what we know is managed hosting

00:12:54,960 --> 00:13:00,060
because you pay for your hosting to be

00:12:57,330 --> 00:13:02,160
managed for you there are two main types

00:13:00,060 --> 00:13:04,230
of managed hosting providers they'll be

00:13:02,160 --> 00:13:06,810
the platforms as a service or

00:13:04,230 --> 00:13:08,970
infrastructure as a service these are

00:13:06,810 --> 00:13:11,040
normally shortened down to pass and I

00:13:08,970 --> 00:13:12,960
ask because words are long and terrible

00:13:11,040 --> 00:13:15,150
and we're technologists that need to

00:13:12,960 --> 00:13:17,760
save letters everywhere and yes this is

00:13:15,150 --> 00:13:19,470
a non exhaustive list within the scope

00:13:17,760 --> 00:13:21,450
of deploying a django application these

00:13:19,470 --> 00:13:24,180
are the two main options there are

00:13:21,450 --> 00:13:25,420
others you could go as detailed as

00:13:24,180 --> 00:13:27,670
running your application

00:13:25,420 --> 00:13:29,500
a server that you have compiled yourself

00:13:27,670 --> 00:13:32,470
on your own custom hardware then

00:13:29,500 --> 00:13:34,750
scenario I mentioned earlier or you

00:13:32,470 --> 00:13:36,940
could try to squeeze Django into a tiny

00:13:34,750 --> 00:13:39,490
little square and put it as a function

00:13:36,940 --> 00:13:41,860
as a service but these are the two

00:13:39,490 --> 00:13:43,810
extremes these are not standard cases

00:13:41,860 --> 00:13:46,150
they are absolutely valid if you want to

00:13:43,810 --> 00:13:48,760
do that but I'm talking about the 80%

00:13:46,150 --> 00:13:50,380
cases the two options that I mentioned

00:13:48,760 --> 00:13:52,090
are platforms of service and

00:13:50,380 --> 00:13:54,430
infrastructure as a service with

00:13:52,090 --> 00:13:57,250
platforms as a service these are your

00:13:54,430 --> 00:14:00,880
general hosting platforms that sort of

00:13:57,250 --> 00:14:01,570
handle Django and major web things these

00:14:00,880 --> 00:14:03,610
systems

00:14:01,570 --> 00:14:06,070
you worry about your Django application

00:14:03,610 --> 00:14:08,230
and your data and they will worry about

00:14:06,070 --> 00:14:09,970
the web server the operating system the

00:14:08,230 --> 00:14:12,670
hardware the storage their networking

00:14:09,970 --> 00:14:14,500
and everything else normally you do not

00:14:12,670 --> 00:14:16,660
get a choice of any of the things that

00:14:14,500 --> 00:14:19,120
are managed for you if you need a choice

00:14:16,660 --> 00:14:21,370
you often have to drop down a level of

00:14:19,120 --> 00:14:24,370
complexity and use infrastructure as a

00:14:21,370 --> 00:14:25,810
service these systems you worry about

00:14:24,370 --> 00:14:27,580
which web server you want to use which

00:14:25,810 --> 00:14:29,230
operating system you want to use often

00:14:27,580 --> 00:14:31,800
you have to think about it in terms of

00:14:29,230 --> 00:14:35,200
the container or a virtual machine but

00:14:31,800 --> 00:14:37,810
the provider manages the hardware the

00:14:35,200 --> 00:14:40,060
storage the networking etc for you now

00:14:37,810 --> 00:14:42,070
this is very much a generalization and

00:14:40,060 --> 00:14:44,050
there's an entire other talk about this

00:14:42,070 --> 00:14:46,360
I'm sure there is a reason that I

00:14:44,050 --> 00:14:48,580
mentioned this what do you want to worry

00:14:46,360 --> 00:14:50,560
about if you don't have an opinion

00:14:48,580 --> 00:14:52,210
choose a platform as a service if you

00:14:50,560 --> 00:14:55,600
have a little bit of opinions choose

00:14:52,210 --> 00:14:58,210
infrastructure as a service so that's

00:14:55,600 --> 00:15:01,000
how to run a django now what about that

00:14:58,210 --> 00:15:03,010
database django provides us with two

00:15:01,000 --> 00:15:04,930
management command helpers which in my

00:15:03,010 --> 00:15:07,450
personal opinion are two of the greatest

00:15:04,930 --> 00:15:09,430
features of django oh sure are having a

00:15:07,450 --> 00:15:11,350
dynamic web administration portal is

00:15:09,430 --> 00:15:14,650
pretty cool too but these commands are

00:15:11,350 --> 00:15:16,810
just choice Python managed up I make

00:15:14,650 --> 00:15:19,600
migrations and Python managed up I

00:15:16,810 --> 00:15:22,120
migrate have been explicitly created to

00:15:19,600 --> 00:15:25,510
reduce developer toil they automate the

00:15:22,120 --> 00:15:28,990
entire system of migrating your django

00:15:25,510 --> 00:15:31,030
models into SQL for whichever database

00:15:28,990 --> 00:15:33,310
you want these are the commands that we

00:15:31,030 --> 00:15:35,560
had to run earlier in order to create

00:15:33,310 --> 00:15:37,900
our major database structures in the

00:15:35,560 --> 00:15:38,990
beginning they deal with things like the

00:15:37,900 --> 00:15:41,210
admins

00:15:38,990 --> 00:15:43,340
content types or thent occation and

00:15:41,210 --> 00:15:46,490
these are the things that the admin

00:15:43,340 --> 00:15:48,740
needs in order to be able to work so

00:15:46,490 --> 00:15:50,960
which database do you choose I mean

00:15:48,740 --> 00:15:53,360
django lists a whole bunch of databases

00:15:50,960 --> 00:15:56,060
that are compatible and a whole bunch of

00:15:53,360 --> 00:16:00,200
third parties that are also useful but

00:15:56,060 --> 00:16:02,600
not all databases are created alike what

00:16:00,200 --> 00:16:04,520
do you want to worry about if you

00:16:02,600 --> 00:16:06,770
already have a database expert in your

00:16:04,520 --> 00:16:08,870
company use the one that they know if

00:16:06,770 --> 00:16:11,930
you have a preferred database just use

00:16:08,870 --> 00:16:14,030
that otherwise just use Postgres I know

00:16:11,930 --> 00:16:16,970
right I'm actually telling you a solid

00:16:14,030 --> 00:16:19,580
opinion but it's not without reason the

00:16:16,970 --> 00:16:23,020
documentation backs me up here Django is

00:16:19,580 --> 00:16:25,280
a database agnostic web framework but

00:16:23,020 --> 00:16:27,860
Postgres has a number of features which

00:16:25,280 --> 00:16:30,530
are not shared by other databases django

00:16:27,860 --> 00:16:32,510
supports the ability for other databases

00:16:30,530 --> 00:16:34,070
to have as much breadth of functionality

00:16:32,510 --> 00:16:35,570
is limited only by community

00:16:34,070 --> 00:16:37,250
contribution and at the time of

00:16:35,570 --> 00:16:39,620
recording Postgres has the most

00:16:37,250 --> 00:16:41,360
community contribution if you want your

00:16:39,620 --> 00:16:43,850
preferred database to have more support

00:16:41,360 --> 00:16:46,580
help out by supporting its functionality

00:16:43,850 --> 00:16:48,740
in django or in the case of Postgres and

00:16:46,580 --> 00:16:50,840
maria DB contribute to the database

00:16:48,740 --> 00:16:52,220
themselves they are open source projects

00:16:50,840 --> 00:16:55,820
and they're only as strong as their

00:16:52,220 --> 00:16:57,470
contributions so now that you've chosen

00:16:55,820 --> 00:16:59,540
the database that I told you to choose

00:16:57,470 --> 00:17:01,490
now you've got to host it there are a

00:16:59,540 --> 00:17:02,990
few options here you could set up your

00:17:01,490 --> 00:17:06,650
own containers or your own virtual

00:17:02,990 --> 00:17:08,569
machines and configure a system package

00:17:06,650 --> 00:17:10,220
install from a bunty that installs

00:17:08,569 --> 00:17:12,260
Postgres and have to deal with your

00:17:10,220 --> 00:17:15,860
caching and your replicas and all that

00:17:12,260 --> 00:17:18,140
or what do you want to worry about

00:17:15,860 --> 00:17:21,199
are you a Python developer or are you a

00:17:18,140 --> 00:17:23,630
database administrator managed databases

00:17:21,199 --> 00:17:27,439
are specialized as a service offering

00:17:23,630 --> 00:17:31,760
that a lot of cloud places have and they

00:17:27,439 --> 00:17:33,530
are managed databases databases are I

00:17:31,760 --> 00:17:35,660
think that many programming web

00:17:33,530 --> 00:17:38,330
frameworks and web languages and formats

00:17:35,660 --> 00:17:41,810
web mobile or other myriad of things

00:17:38,330 --> 00:17:44,750
need databases are a shared commodity

00:17:41,810 --> 00:17:48,140
that means that there is a stable robust

00:17:44,750 --> 00:17:50,450
generic solution that will suit you in a

00:17:48,140 --> 00:17:52,370
managed database world you have to worry

00:17:50,450 --> 00:17:54,350
about your django models

00:17:52,370 --> 00:17:56,750
worries about the generation and

00:17:54,350 --> 00:17:58,820
application of these migrations and then

00:17:56,750 --> 00:18:00,860
your managed hosting provider will deal

00:17:58,820 --> 00:18:03,650
with storage backups persistence and

00:18:00,860 --> 00:18:05,270
maintenance it's a very good idea that

00:18:03,650 --> 00:18:07,550
your web server in your database are

00:18:05,270 --> 00:18:09,020
located closest to each other so they

00:18:07,550 --> 00:18:10,760
can talk to each other over the network

00:18:09,020 --> 00:18:13,570
as quickly as possible because you know

00:18:10,760 --> 00:18:17,420
light only travels so fast

00:18:13,570 --> 00:18:20,270
but honestly managed databases are a

00:18:17,420 --> 00:18:22,280
really good idea even if they are the

00:18:20,270 --> 00:18:24,559
only thing that ends up costing you

00:18:22,280 --> 00:18:26,270
money because at the end of the day your

00:18:24,559 --> 00:18:28,640
website code is going to have a copy on

00:18:26,270 --> 00:18:30,470
your laptop and github on your source

00:18:28,640 --> 00:18:33,559
control system wherever but your user

00:18:30,470 --> 00:18:35,809
data that may be your only copy in

00:18:33,559 --> 00:18:37,880
production so it's a good idea to make

00:18:35,809 --> 00:18:39,830
sure that it's stored properly and that

00:18:37,880 --> 00:18:42,110
it's backed up and your database has

00:18:39,830 --> 00:18:43,970
maintenance and that your managed

00:18:42,110 --> 00:18:46,820
hosting provider gets to deal with the

00:18:43,970 --> 00:18:48,320
things like zero downtime disk expanding

00:18:46,820 --> 00:18:50,750
and all the rest of that because as

00:18:48,320 --> 00:18:53,960
somebody who used to get paid to have to

00:18:50,750 --> 00:18:55,820
do this manually out of hours I am so

00:18:53,960 --> 00:18:58,850
thankful that I can pay someone else to

00:18:55,820 --> 00:19:00,860
have to worry about that for me and for

00:18:58,850 --> 00:19:03,020
a Gengo application hosted on say Google

00:19:00,860 --> 00:19:05,059
cloud or another cloud provider your

00:19:03,020 --> 00:19:08,059
managed database may end up being your

00:19:05,059 --> 00:19:10,429
only cost what would the three tiers for

00:19:08,059 --> 00:19:14,210
compute and storage and the like your

00:19:10,429 --> 00:19:17,050
managed database has costs involved but

00:19:14,210 --> 00:19:19,400
it's worth paying for that peace of mind

00:19:17,050 --> 00:19:21,170
okay it may not be your only cost you

00:19:19,400 --> 00:19:23,450
may have to pay for their custom domain

00:19:21,170 --> 00:19:25,280
and other non free things but we're not

00:19:23,450 --> 00:19:28,010
going to explore that kind of complexity

00:19:25,280 --> 00:19:30,890
today so that's databases covered and

00:19:28,010 --> 00:19:32,720
now finally static files the helper here

00:19:30,890 --> 00:19:34,700
is managed to apply collect static and

00:19:32,720 --> 00:19:37,040
thankfully in a previous PyCon there's

00:19:34,700 --> 00:19:39,260
been entire talk dedicated purely on

00:19:37,040 --> 00:19:41,990
that static asset management in Jango

00:19:39,260 --> 00:19:44,420
the four main options you have here are

00:19:41,990 --> 00:19:46,370
simple assets cloud storage media

00:19:44,420 --> 00:19:49,100
uploads and the more complex asset

00:19:46,370 --> 00:19:51,500
compilation if you happen to have chosen

00:19:49,100 --> 00:19:54,260
a infrastructure as a service provider

00:19:51,500 --> 00:19:57,290
earlier they often have some sort of

00:19:54,260 --> 00:19:58,580
cloud storage that is super useful again

00:19:57,290 --> 00:20:00,679
if you want to have everything

00:19:58,580 --> 00:20:03,260
physically close if you went for a

00:20:00,679 --> 00:20:04,820
platform as a service perhaps you want

00:20:03,260 --> 00:20:05,640
to use the simple asset management

00:20:04,820 --> 00:20:07,140
instead

00:20:05,640 --> 00:20:08,429
if you're going to be using cloud

00:20:07,140 --> 00:20:10,530
storage you're probably going to be

00:20:08,429 --> 00:20:13,049
wanting to use the Django storages

00:20:10,530 --> 00:20:15,960
package which allows you to integrate

00:20:13,049 --> 00:20:19,020
with most every cloud provider natively

00:20:15,960 --> 00:20:22,910
in your Django application cloud storage

00:20:19,020 --> 00:20:27,960
in the world of cloud computing is hold

00:20:22,910 --> 00:20:30,780
AWS s3 launched in 2006 that's 14 years

00:20:27,960 --> 00:20:32,910
ago storing media objects is a

00:20:30,780 --> 00:20:35,309
foundational service provided by most

00:20:32,910 --> 00:20:36,840
cloud providers and like databases

00:20:35,309 --> 00:20:38,880
object storage is one of those

00:20:36,840 --> 00:20:40,620
foundational infrastructure services

00:20:38,880 --> 00:20:42,840
shared by many languages and frameworks

00:20:40,620 --> 00:20:46,350
so robust generic solutions already

00:20:42,840 --> 00:20:50,820
exist leverage these where you can do

00:20:46,350 --> 00:20:52,350
not create your own so that's it we know

00:20:50,820 --> 00:20:53,549
how to run django we know how to connect

00:20:52,350 --> 00:20:56,309
to a database we know how to serve

00:20:53,549 --> 00:20:58,380
static files so finally to answer our

00:20:56,309 --> 00:21:01,919
question what is django deployment

00:20:58,380 --> 00:21:03,480
anyway well django deployment is copying

00:21:01,919 --> 00:21:05,190
your code somewhere updating the

00:21:03,480 --> 00:21:06,870
database if you need to obtain the

00:21:05,190 --> 00:21:09,630
static if you need to and then running

00:21:06,870 --> 00:21:11,490
the web server i know this doesn't seem

00:21:09,630 --> 00:21:13,350
like a lot but given the just spent the

00:21:11,490 --> 00:21:15,150
last how many minutes describing all

00:21:13,350 --> 00:21:16,950
this in detail hopefully you now have a

00:21:15,150 --> 00:21:19,500
greater understanding of the complexity

00:21:16,950 --> 00:21:22,890
but not exactly how to do it because

00:21:19,500 --> 00:21:24,600
there is no one answer here even though

00:21:22,890 --> 00:21:25,950
i've described the sort of things you

00:21:24,600 --> 00:21:29,160
have to think about i haven't told you

00:21:25,950 --> 00:21:31,410
how to do it because the way that you do

00:21:29,160 --> 00:21:33,690
your deployments the way you said our

00:21:31,410 --> 00:21:36,600
production has to work for you because

00:21:33,690 --> 00:21:38,340
you have to maintain it if i were to

00:21:36,600 --> 00:21:40,350
tell you a solution you may not like it

00:21:38,340 --> 00:21:42,059
or heaven forbid you may not understand

00:21:40,350 --> 00:21:44,700
it which means you're not going to be

00:21:42,059 --> 00:21:47,790
able to maintain it I can't do that for

00:21:44,700 --> 00:21:49,620
you there is so much more to this topic

00:21:47,790 --> 00:21:52,290
that I can't even hope to cover today

00:21:49,620 --> 00:21:55,020
each one of these things listed here

00:21:52,290 --> 00:21:57,900
they're their own conference worth of

00:21:55,020 --> 00:21:59,549
material but hopefully I've been able to

00:21:57,900 --> 00:22:01,080
help you see just a bit behind the

00:21:59,549 --> 00:22:03,929
curtain of deployment and to show you

00:22:01,080 --> 00:22:06,000
that yes it is complex but it's not as

00:22:03,929 --> 00:22:07,679
complicated as you think this talk has

00:22:06,000 --> 00:22:09,380
been full of my own opinions but I'm

00:22:07,679 --> 00:22:12,390
sure you all have opinions on your own

00:22:09,380 --> 00:22:14,910
saddling this event has no real hallway

00:22:12,390 --> 00:22:16,500
track but my email and my twitter handle

00:22:14,910 --> 00:22:18,390
are listed on this slide

00:22:16,500 --> 00:22:19,470
and I would love to chat to you about

00:22:18,390 --> 00:22:21,690
these things and

00:22:19,470 --> 00:22:24,260
hopefully I will see you at a Python

00:22:21,690 --> 00:22:24,260

YouTube URL: https://www.youtube.com/watch?v=8vstov3Y7uE


