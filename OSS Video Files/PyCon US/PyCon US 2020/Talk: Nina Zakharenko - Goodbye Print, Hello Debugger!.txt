Title: Talk: Nina Zakharenko - Goodbye Print, Hello Debugger!
Publication date: 2021-05-05
Playlist: PyCon US 2020
Description: 
	Presented by:
Nina Zakharenko

Still debugging your code with print? Learn how to level up your ability to troubleshoot complex code situations by using the power of a fully-featured debugger in this talk aimed at all levels of programming ability.

Debuggers allow you to examine your program state, watch as the values of important variables change, and even modify the content of variables on the fly. Once I gave up using print to debug, my productivity as a programmer increased, and yours can too!

I’ll showcase the variety of debugger tools available - from pdb, the simplest command line debugger that’s part of the standard library, to fancy graphical debuggers available in Python IDEs. Join me as we walk through real code together using debugger tools in a hands-on way to help us diagnose problems and bugs. The skills you’ll learn in this talk will allow you to quickly use these tools in your own code bases for fun, school, or work.

Slides:  https://nina.to/pycon2020
Captions: 
	00:00:11,950 --> 00:00:17,210
hello virtual PyCon my name is Nina and

00:00:15,530 --> 00:00:21,020
I'm going to talk about debugging in

00:00:17,210 --> 00:00:23,360
Python whether you use print PDB or the

00:00:21,020 --> 00:00:25,130
debugger in your IDE you're going to

00:00:23,360 --> 00:00:26,599
learn something new from this talk I'm

00:00:25,130 --> 00:00:28,880
going to cover the benefits of using

00:00:26,599 --> 00:00:31,219
debuggers and python show you a few

00:00:28,880 --> 00:00:33,680
different types and even share some of

00:00:31,219 --> 00:00:36,020
my own tips and tricks with you the

00:00:33,680 --> 00:00:38,570
slides are available for this talk there

00:00:36,020 --> 00:00:40,579
are plenty of resources throughout so

00:00:38,570 --> 00:00:42,770
feel free to download the slides to

00:00:40,579 --> 00:00:46,429
follow the links they're available at

00:00:42,770 --> 00:00:48,649
Nino dot 2 slash PyCon 2020 my name is

00:00:46,429 --> 00:00:51,109
Nina Zack Renko and I work at Microsoft

00:00:48,649 --> 00:00:53,030
as a Python developer advocate focusing

00:00:51,109 --> 00:00:55,579
on making Azure and BS code better to

00:00:53,030 --> 00:00:57,289
use for Python developers everywhere I'm

00:00:55,579 --> 00:00:59,929
writing software for over a decade now

00:00:57,289 --> 00:01:02,510
at companies like Meetup Reddit and HBO

00:00:59,929 --> 00:01:04,970
I've worked on projects big and small in

00:01:02,510 --> 00:01:06,830
a wide variety of organizations if you'd

00:01:04,970 --> 00:01:09,710
like to stay in touch please follow me

00:01:06,830 --> 00:01:11,540
on Twitter at N and J a and lately I've

00:01:09,710 --> 00:01:14,900
also been live coding on Twitch twice a

00:01:11,540 --> 00:01:17,540
week and my twitch username is nnj a io

00:01:14,900 --> 00:01:19,579
a brief overview of what we're going to

00:01:17,540 --> 00:01:21,619
learn today I'm going to cover why you

00:01:19,579 --> 00:01:23,420
should use the buggers breakpoints and

00:01:21,619 --> 00:01:26,450
other debugger fundamentals I'm going to

00:01:23,420 --> 00:01:29,600
talk about my workflow tools like PD bi

00:01:26,450 --> 00:01:32,689
PDP and I des of the new birth point

00:01:29,600 --> 00:01:34,880
built in in Python 3 7 and then demos

00:01:32,689 --> 00:01:38,299
tips tricks and a little bit of guidance

00:01:34,880 --> 00:01:41,299
on when to use what a quick disclaimer

00:01:38,299 --> 00:01:42,680
that this is my way there are lots of

00:01:41,299 --> 00:01:44,000
tools and workflows available for

00:01:42,680 --> 00:01:45,619
debugging I'm going to show you the

00:01:44,000 --> 00:01:47,030
workflow that I use and that doesn't

00:01:45,619 --> 00:01:50,180
mean it's the right one for you so

00:01:47,030 --> 00:01:53,140
choose what works best for you I'm going

00:01:50,180 --> 00:01:56,119
to show you a little demo application

00:01:53,140 --> 00:01:58,640
it's a very simple flask app there's no

00:01:56,119 --> 00:02:00,859
data store and it uses the github Search

00:01:58,640 --> 00:02:03,920
API to look for popular libraries by

00:02:00,859 --> 00:02:07,039
stars based on language and the API data

00:02:03,920 --> 00:02:10,100
that comes back is JSON which is pretty

00:02:07,039 --> 00:02:12,980
standard stuff now this is the meat of

00:02:10,100 --> 00:02:15,530
the code for this application we call

00:02:12,980 --> 00:02:17,870
into the github API we get a response

00:02:15,530 --> 00:02:19,690
back and that response is JSON and then

00:02:17,870 --> 00:02:25,190
we do something with it

00:02:19,690 --> 00:02:27,260
let's say we had a bug in our code how

00:02:25,190 --> 00:02:29,480
Rico about debugging this with print

00:02:27,260 --> 00:02:34,550
maybe the data isn't looking like we

00:02:29,480 --> 00:02:38,360
would expect it to so we would go into

00:02:34,550 --> 00:02:41,510
our repos with most stars method here

00:02:38,360 --> 00:02:44,990
and maybe we would just kind of start by

00:02:41,510 --> 00:02:52,180
printing out the items from our response

00:02:44,990 --> 00:02:56,360
JSON and let's submit something here and

00:02:52,180 --> 00:02:58,430
go to our running server and we'll see

00:02:56,360 --> 00:03:00,710
that it printed all this stuff out okay

00:02:58,430 --> 00:03:02,480
so now if I wanted to derive something

00:03:00,710 --> 00:03:04,550
more useful from this I might take a

00:03:02,480 --> 00:03:06,560
look at the API keys returned and keep

00:03:04,550 --> 00:03:09,020
modifying my print statement until I've

00:03:06,560 --> 00:03:11,810
returned something useful I'm just

00:03:09,020 --> 00:03:13,130
pretty tedious if you're already using

00:03:11,810 --> 00:03:14,570
prints though you might be wondering

00:03:13,130 --> 00:03:17,450
well what's the point of using a

00:03:14,570 --> 00:03:19,340
debugger at all um well the problem with

00:03:17,450 --> 00:03:21,650
print is print doesn't give us a lot of

00:03:19,340 --> 00:03:22,790
context if you're accusing prints in

00:03:21,650 --> 00:03:24,200
your code you're familiar with the

00:03:22,790 --> 00:03:26,570
process of tweaking what you're printing

00:03:24,200 --> 00:03:28,370
out because you got it wrong yeah maybe

00:03:26,570 --> 00:03:30,440
you're working with large nested data

00:03:28,370 --> 00:03:32,180
structures here tweaking or rerunning

00:03:30,440 --> 00:03:35,470
your code you're tweaking the formatting

00:03:32,180 --> 00:03:38,060
running it again it's tedious and

00:03:35,470 --> 00:03:42,470
sometimes the bug is in your print

00:03:38,060 --> 00:03:46,670
statement so let's take a look at what

00:03:42,470 --> 00:03:51,410
debugging might look like going back to

00:03:46,670 --> 00:03:54,980
our code I'm going to remove this print

00:03:51,410 --> 00:03:57,890
and because I'm using Python 37 I can

00:03:54,980 --> 00:04:02,810
just add a breakpoint method here and

00:03:57,890 --> 00:04:05,060
save we can just confirm that our server

00:04:02,810 --> 00:04:07,880
has reloaded the new code and then

00:04:05,060 --> 00:04:11,330
instead of constantly going back to our

00:04:07,880 --> 00:04:12,950
website and hitting it to get data back

00:04:11,330 --> 00:04:15,019
I'm just going to curl it in the

00:04:12,950 --> 00:04:18,049
background here which is basically the

00:04:15,019 --> 00:04:22,190
same thing as hitting the page now we'll

00:04:18,049 --> 00:04:24,530
see that we are at an active prompt we

00:04:22,190 --> 00:04:26,480
see an arrow here of what line of code

00:04:24,530 --> 00:04:31,790
we're on and then we can start typing in

00:04:26,480 --> 00:04:34,010
here now I can interact with my code

00:04:31,790 --> 00:04:39,020
here so I can take a look at the items

00:04:34,010 --> 00:04:42,050
that were returned from the API

00:04:39,020 --> 00:04:43,340
I can go ahead and just get one if I

00:04:42,050 --> 00:04:45,080
wanted to work with that you know I

00:04:43,340 --> 00:04:53,780
could get the keys from that for example

00:04:45,080 --> 00:04:56,479
I could print or pretty print here which

00:04:53,780 --> 00:05:00,610
is already a lot nicer to look at than

00:04:56,479 --> 00:05:03,110
our whole long print out statement and

00:05:00,610 --> 00:05:05,330
something that's really useful is the

00:05:03,110 --> 00:05:08,240
interact command so this is kind of just

00:05:05,330 --> 00:05:10,460
a one-line prompt you'll notice when I

00:05:08,240 --> 00:05:11,810
press ENTER just continues if you want

00:05:10,460 --> 00:05:13,880
something that looks closer to the

00:05:11,810 --> 00:05:16,669
Python prompt you can type interact here

00:05:13,880 --> 00:05:19,430
and go into interactive mode and then we

00:05:16,669 --> 00:05:20,870
can start writing multi-line code so

00:05:19,430 --> 00:05:23,060
let's say I wanted to get a

00:05:20,870 --> 00:05:25,069
representative sample of our items I

00:05:23,060 --> 00:05:26,930
don't want to work with all 30 of them

00:05:25,069 --> 00:05:31,219
because that's kind of a largest data

00:05:26,930 --> 00:05:34,340
set so I can say for item in let's take

00:05:31,219 --> 00:05:44,000
a look at three items and then I can

00:05:34,340 --> 00:05:46,430
print out the item URL cool so that's

00:05:44,000 --> 00:05:49,009
pretty easy once I'm done with

00:05:46,430 --> 00:05:51,199
interactive mode I can press control D

00:05:49,009 --> 00:05:53,659
to exit out of it we'll see we're back

00:05:51,199 --> 00:05:56,210
in our PD B console and then I can start

00:05:53,659 --> 00:05:59,539
typing commands like next which will go

00:05:56,210 --> 00:06:01,699
ahead and step and step over the next

00:05:59,539 --> 00:06:04,039
line of the code once I'm done with my

00:06:01,699 --> 00:06:06,440
debugger I can press C and it will

00:06:04,039 --> 00:06:08,719
continue on until the next breakpoint is

00:06:06,440 --> 00:06:10,699
hit that's a little bit better than

00:06:08,719 --> 00:06:12,349
print right and adding a debugger

00:06:10,699 --> 00:06:15,110
statement wasn't that hard

00:06:12,349 --> 00:06:18,229
notice in Python 3 7 you can simply use

00:06:15,110 --> 00:06:19,580
break point I'll cover how you might be

00:06:18,229 --> 00:06:22,219
able to use debugging for earlier

00:06:19,580 --> 00:06:24,259
versions of Python but debugging allows

00:06:22,219 --> 00:06:26,060
us to easily explore the state of a

00:06:24,259 --> 00:06:28,039
running program we can write new

00:06:26,060 --> 00:06:30,050
snippets of code we can experiment to

00:06:28,039 --> 00:06:31,940
our hearts content you can even save

00:06:30,050 --> 00:06:34,490
those snippets and add them back to your

00:06:31,940 --> 00:06:36,770
code base which is a workflow that I use

00:06:34,490 --> 00:06:38,779
all the time I feel like folks who are

00:06:36,770 --> 00:06:40,430
starting in Python are afraid of using

00:06:38,779 --> 00:06:42,110
debuggers because it seems like there's

00:06:40,430 --> 00:06:44,150
just too much overhead and using print

00:06:42,110 --> 00:06:45,800
is so familiar but I really want to show

00:06:44,150 --> 00:06:47,990
you that there's nothing to be afraid of

00:06:45,800 --> 00:06:49,430
you can get started with debuggers in no

00:06:47,990 --> 00:06:51,080
time at all and it's really going to

00:06:49,430 --> 00:06:51,340
supercharge the way that you write code

00:06:51,080 --> 00:06:52,870
and

00:06:51,340 --> 00:06:54,430
I'm bugs you're not going to have to

00:06:52,870 --> 00:06:56,470
clean up print statements littered all

00:06:54,430 --> 00:07:00,639
over your code to examine the state of

00:06:56,470 --> 00:07:02,949
multiple objects with a debugger you're

00:07:00,639 --> 00:07:04,870
really using a tool that's made for the

00:07:02,949 --> 00:07:06,639
job a debugger is gonna drop you into

00:07:04,870 --> 00:07:08,260
the point of execution and it's going to

00:07:06,639 --> 00:07:09,699
allow you not just to see the string

00:07:08,260 --> 00:07:11,590
representation of what you're trying to

00:07:09,699 --> 00:07:13,389
examine but actually allow you to call

00:07:11,590 --> 00:07:15,460
it examine the arguments given to a

00:07:13,389 --> 00:07:17,520
function examine other values and

00:07:15,460 --> 00:07:20,260
variables and the scope and a lot more

00:07:17,520 --> 00:07:22,000
once I gave up using print to debug my

00:07:20,260 --> 00:07:26,229
productivity as a programmer increased

00:07:22,000 --> 00:07:28,960
and yours can too let's cover a little

00:07:26,229 --> 00:07:31,870
bit about debugger fundamentals the most

00:07:28,960 --> 00:07:33,490
important one is the break point the

00:07:31,870 --> 00:07:35,710
break point is the foundation of

00:07:33,490 --> 00:07:37,840
debugging and you can kind of consider a

00:07:35,710 --> 00:07:39,100
break point like a trap so imagine

00:07:37,840 --> 00:07:41,740
you're walking along and you're

00:07:39,100 --> 00:07:43,620
executing code line by line and then you

00:07:41,740 --> 00:07:46,389
trip on something and you need to stop

00:07:43,620 --> 00:07:49,960
that's a break point it stops the flow

00:07:46,389 --> 00:07:52,750
of execution in your program now there

00:07:49,960 --> 00:07:54,160
are different types of debuggers you saw

00:07:52,750 --> 00:07:56,530
a quick demo earlier of command-line

00:07:54,160 --> 00:07:57,880
debugging ptb is included in the

00:07:56,530 --> 00:08:00,070
standard library it's a great option

00:07:57,880 --> 00:08:02,229
it's portable you don't need to install

00:08:00,070 --> 00:08:04,930
anything else or configure anything else

00:08:02,229 --> 00:08:07,720
but I tend to use IPD beam which is

00:08:04,930 --> 00:08:10,270
installable via pip and it offers syntax

00:08:07,720 --> 00:08:12,370
highlighting and nicer tab complete and

00:08:10,270 --> 00:08:14,530
some of the other nice features of the

00:08:12,370 --> 00:08:16,900
ipython package and that's what I'm

00:08:14,530 --> 00:08:19,570
going to be demoing in a few minutes but

00:08:16,900 --> 00:08:21,639
there are a lot more options so if

00:08:19,570 --> 00:08:23,139
you're using Python 3 7 you can just use

00:08:21,639 --> 00:08:25,900
break point and there are some

00:08:23,139 --> 00:08:30,789
advantages to this like I said I prefer

00:08:25,900 --> 00:08:33,479
IP IP DB and using Python 37's break

00:08:30,789 --> 00:08:37,120
point I can set an environment variable

00:08:33,479 --> 00:08:39,789
to tell the great point method which

00:08:37,120 --> 00:08:43,360
debugger I want to use so in this case I

00:08:39,789 --> 00:08:45,490
want to use IP DB and it's it's super

00:08:43,360 --> 00:08:47,140
easy to swap it out I can change it

00:08:45,490 --> 00:08:49,600
later if I feel like it I can switch it

00:08:47,140 --> 00:08:51,850
in the future and I think this in itself

00:08:49,600 --> 00:08:54,279
is a great reason for upgrading now

00:08:51,850 --> 00:08:56,440
another really nice advantage is you can

00:08:54,279 --> 00:08:58,779
set Python break point to zero and

00:08:56,440 --> 00:09:01,150
that's going to allow you to easily skip

00:08:58,779 --> 00:09:03,730
over any breakpoints at execution for

00:09:01,150 --> 00:09:04,620
example probably want to do that in

00:09:03,730 --> 00:09:06,810
production

00:09:04,620 --> 00:09:09,660
and I'll talk about why that's important

00:09:06,810 --> 00:09:11,730
a little bit later on now if you're

00:09:09,660 --> 00:09:13,950
using a version of Python less than 37

00:09:11,730 --> 00:09:15,570
there are other ways to at breakpoints

00:09:13,950 --> 00:09:19,440
you can add them directly into your code

00:09:15,570 --> 00:09:21,990
so you import PDB and then PDB dot set

00:09:19,440 --> 00:09:23,690
underscore trace on the line of code

00:09:21,990 --> 00:09:26,730
where you'd like to set your breakpoint

00:09:23,690 --> 00:09:28,440
you can also set them interactively so

00:09:26,730 --> 00:09:31,410
you can run PDB as a module with the

00:09:28,440 --> 00:09:33,480
dash M flag type in where you want your

00:09:31,410 --> 00:09:35,340
breakpoints to be I'm not going to cover

00:09:33,480 --> 00:09:37,800
that approach because I don't really use

00:09:35,340 --> 00:09:39,750
it but with option 1 your breakpoints

00:09:37,800 --> 00:09:41,400
are a little bit harder to disable with

00:09:39,750 --> 00:09:44,730
option 2 if your code moves around your

00:09:41,400 --> 00:09:47,250
breakpoint line numbers might change so

00:09:44,730 --> 00:09:50,670
yeah I prefer the first approach but to

00:09:47,250 --> 00:09:52,980
each their own you have options and I

00:09:50,670 --> 00:09:55,050
really think that you should learn more

00:09:52,980 --> 00:09:56,670
about the tool as you use it but there

00:09:55,050 --> 00:09:58,260
are only a handful of commands that you

00:09:56,670 --> 00:10:01,950
need to learn to be productive

00:09:58,260 --> 00:10:03,450
there is l4 list or ll for a long list

00:10:01,950 --> 00:10:05,730
it's going to print out the code around

00:10:03,450 --> 00:10:08,430
the breakpoint that was hit there's n to

00:10:05,730 --> 00:10:10,230
go to next line s to step into for

00:10:08,430 --> 00:10:12,570
example if there's a method being called

00:10:10,230 --> 00:10:14,940
you can enter into it otherwise it's

00:10:12,570 --> 00:10:16,920
just going to go to the next line C for

00:10:14,940 --> 00:10:19,200
continue until the next breakpoint or

00:10:16,920 --> 00:10:24,000
until the program completes and then

00:10:19,200 --> 00:10:26,430
lastly H for help you can also provide

00:10:24,000 --> 00:10:27,930
an optional command which is kind of

00:10:26,430 --> 00:10:30,870
really easy if you forget how the

00:10:27,930 --> 00:10:34,190
debugger works all right let's take a

00:10:30,870 --> 00:10:36,330
look at debugging with IP DB this time

00:10:34,190 --> 00:10:39,510
the first thing that I'm going to need

00:10:36,330 --> 00:10:41,370
to do is set my Python breakpoint

00:10:39,510 --> 00:10:44,600
environment variable to IP d-beam and

00:10:41,370 --> 00:10:47,400
I've already installed it what by a pip

00:10:44,600 --> 00:10:50,790
now I'm gonna modify my code a little

00:10:47,400 --> 00:10:53,820
bit and move my breakpoint from here to

00:10:50,790 --> 00:10:56,490
right before we create the queries at

00:10:53,820 --> 00:11:01,470
the top of this method let's go ahead

00:10:56,490 --> 00:11:04,440
and run our server and then I'm gonna

00:11:01,470 --> 00:11:08,160
hit my server with curl to trigger the

00:11:04,440 --> 00:11:09,780
debugger now there are long form

00:11:08,160 --> 00:11:11,490
versions of all of these debugger

00:11:09,780 --> 00:11:13,350
commands but I'm going to be using the

00:11:11,490 --> 00:11:14,850
short ones don't worry don't have to

00:11:13,350 --> 00:11:18,330
memorize them I'm gonna provide a useful

00:11:14,850 --> 00:11:20,130
cheat sheet so s means step in

00:11:18,330 --> 00:11:22,980
- so I'm going to step into the create

00:11:20,130 --> 00:11:25,320
query method and this is gonna allow me

00:11:22,980 --> 00:11:27,870
to use a to look at the args that were

00:11:25,320 --> 00:11:30,180
passed into this method and then I can

00:11:27,870 --> 00:11:32,880
use n for next to start stepping through

00:11:30,180 --> 00:11:35,220
line by line now a gotcha that you want

00:11:32,880 --> 00:11:37,740
to keep in mind is we're currently on

00:11:35,220 --> 00:11:40,500
line 18 do you think that query is

00:11:37,740 --> 00:11:43,500
defined at this step so if I try to

00:11:40,500 --> 00:11:44,820
examine query will it work I still do

00:11:43,500 --> 00:11:47,400
this all the time but the short answer

00:11:44,820 --> 00:11:50,970
is no that's because query is not

00:11:47,400 --> 00:11:53,640
defined until line 19 so we need to wait

00:11:50,970 --> 00:11:55,620
until line 18 is executed and step over

00:11:53,640 --> 00:11:58,830
that line and now we'll be able to take

00:11:55,620 --> 00:12:00,840
a look at query I can use our to jump to

00:11:58,830 --> 00:12:03,180
the return of this method which isn't

00:12:00,840 --> 00:12:04,800
particularly useful for a short method

00:12:03,180 --> 00:12:07,110
like this but is useful when you have

00:12:04,800 --> 00:12:10,560
complex code and lots of points of

00:12:07,110 --> 00:12:13,650
return and then I'm just gonna go ahead

00:12:10,560 --> 00:12:15,360
and hit end and because we returned from

00:12:13,650 --> 00:12:18,570
the create query method we're gonna jump

00:12:15,360 --> 00:12:22,230
it back up to our repos with mostar's

00:12:18,570 --> 00:12:25,100
method so now I can just hit n to go to

00:12:22,230 --> 00:12:27,240
the next line or enter to continue and

00:12:25,100 --> 00:12:30,990
let me show you another really nice

00:12:27,240 --> 00:12:33,900
feature of IPTV let's say I grabbed one

00:12:30,990 --> 00:12:38,100
of my items and I didn't remember which

00:12:33,900 --> 00:12:41,820
API key necessarily had the number of

00:12:38,100 --> 00:12:46,230
stars I'm sorry I let's say I didn't

00:12:41,820 --> 00:12:48,420
remember which which key in the JSON

00:12:46,230 --> 00:12:52,620
contained the number of stars for the

00:12:48,420 --> 00:12:54,630
repository so with IPD beam I can start

00:12:52,620 --> 00:12:57,090
typing here because I know the key has

00:12:54,630 --> 00:12:59,970
the word star in it and then I can press

00:12:57,090 --> 00:13:01,830
tab here and it's going to go through

00:12:59,970 --> 00:13:05,960
all of the keys in that dictionary and

00:13:01,830 --> 00:13:09,270
allow me to tab complete in this case

00:13:05,960 --> 00:13:11,100
the number of stars or people who have

00:13:09,270 --> 00:13:13,230
started the repository is called the

00:13:11,100 --> 00:13:16,140
star gazers count I'm gonna guess that's

00:13:13,230 --> 00:13:17,940
some weird artifact from the github API

00:13:16,140 --> 00:13:20,490
it may be they used to be called star

00:13:17,940 --> 00:13:25,740
gazers a long time ago but now I've

00:13:20,490 --> 00:13:29,040
saved myself a lot of time alright IP DB

00:13:25,740 --> 00:13:31,170
is pretty awesome I'm a fan and if you

00:13:29,040 --> 00:13:32,190
need some guidelines for command-line

00:13:31,170 --> 00:13:34,830
debugging I

00:13:32,190 --> 00:13:37,260
have a cheat sheet that is available at

00:13:34,830 --> 00:13:39,720
Nina dot - slash pike on 20/20 with the

00:13:37,260 --> 00:13:42,900
other slides there are other useful

00:13:39,720 --> 00:13:44,700
commands for example until which will

00:13:42,900 --> 00:13:46,590
allow you to run until the current line

00:13:44,700 --> 00:13:48,900
of code is greater than the next which

00:13:46,590 --> 00:13:51,180
is really helpful to allow you to break

00:13:48,900 --> 00:13:52,950
out of a loop but really you can be

00:13:51,180 --> 00:13:54,630
fully productive by starting with the

00:13:52,950 --> 00:13:58,050
basic commands that I showed you and

00:13:54,630 --> 00:13:59,730
then add on others as you need them and

00:13:58,050 --> 00:14:02,520
for those of you who are paying

00:13:59,730 --> 00:14:06,690
attention yes my cheat sheets do match

00:14:02,520 --> 00:14:08,640
my hair now if you're not comfortable on

00:14:06,690 --> 00:14:11,370
the CLI or you prefer graphical tools

00:14:08,640 --> 00:14:13,290
there are plenty available I'm gonna be

00:14:11,370 --> 00:14:14,940
showing you V s code today because

00:14:13,290 --> 00:14:17,190
that's what I use for my daily editor

00:14:14,940 --> 00:14:20,000
but there's also a PUD B which is a

00:14:17,190 --> 00:14:23,520
graphical CLI debugger there are lots of

00:14:20,000 --> 00:14:26,790
IDE is available and a lot of other

00:14:23,520 --> 00:14:28,590
options now I prefer v-ups code it's

00:14:26,790 --> 00:14:29,910
what I use for my daily editors that's

00:14:28,590 --> 00:14:31,890
what I'm gonna be showing you today

00:14:29,910 --> 00:14:34,560
there are just a few setup steps that

00:14:31,890 --> 00:14:37,050
you have to take just download vs code

00:14:34,560 --> 00:14:37,740
and then the S code comes really

00:14:37,050 --> 00:14:39,810
bare-bones

00:14:37,740 --> 00:14:41,820
which I like and the power is in

00:14:39,810 --> 00:14:44,160
customizations so you're gonna need to

00:14:41,820 --> 00:14:46,860
install the Python extension for vs code

00:14:44,160 --> 00:14:50,250
for the best experience and then create

00:14:46,860 --> 00:14:52,740
a debugger configuration note that these

00:14:50,250 --> 00:14:55,740
are all links in the slides if you need

00:14:52,740 --> 00:14:57,420
a little bit more guidance now visual

00:14:55,740 --> 00:14:58,830
breakpoints kind of match a lot of the

00:14:57,420 --> 00:15:01,200
concepts that we were talking about

00:14:58,830 --> 00:15:04,350
earlier this is what the icons look like

00:15:01,200 --> 00:15:08,490
the little play is continue the arrow

00:15:04,350 --> 00:15:11,820
that jumps over is next the down arrow

00:15:08,490 --> 00:15:14,520
is step up the up arrow is go up and

00:15:11,820 --> 00:15:16,500
that's within the stack of execution we

00:15:14,520 --> 00:15:20,880
have an option to reset and then

00:15:16,500 --> 00:15:25,520
stopping the debugger so let's take a

00:15:20,880 --> 00:15:25,520
look at debugging with the ID

00:15:30,700 --> 00:15:37,340
so I'm gonna go ahead and remove that

00:15:34,400 --> 00:15:41,210
break point and instead I'm going to

00:15:37,340 --> 00:15:42,830
click to the left of the line number

00:15:41,210 --> 00:15:45,050
that I'm interested in and we'll see a

00:15:42,830 --> 00:15:47,090
little red dot up here here as soon as I

00:15:45,050 --> 00:15:52,820
click it it's set that's my break point

00:15:47,090 --> 00:15:54,530
this is called the gutter now when I go

00:15:52,820 --> 00:15:57,290
to the debug tab it's got a little

00:15:54,530 --> 00:16:01,340
helpful bug here I've already gone and

00:15:57,290 --> 00:16:03,020
set up a debugger profile but if you're

00:16:01,340 --> 00:16:04,730
running the extension for the first time

00:16:03,020 --> 00:16:06,590
you'll have to do that and there's

00:16:04,730 --> 00:16:08,900
already pre-configured ones for flask

00:16:06,590 --> 00:16:10,940
and Jango and any other setup that you

00:16:08,900 --> 00:16:13,490
might need all right so I'm gonna go

00:16:10,940 --> 00:16:16,630
ahead and hit this Run button and it's

00:16:13,490 --> 00:16:16,630
gonna start our server in the background

00:16:17,200 --> 00:16:21,650
now you'll notice as soon as the

00:16:19,610 --> 00:16:23,180
debugger is running the bar here has

00:16:21,650 --> 00:16:25,490
changed to a different color it's now

00:16:23,180 --> 00:16:29,960
red to indicate that the debugger is

00:16:25,490 --> 00:16:36,200
active there are quite a few nice things

00:16:29,960 --> 00:16:38,900
in this - bug erm but let's go ahead and

00:16:36,200 --> 00:16:40,970
kick off our break point by visiting our

00:16:38,900 --> 00:16:42,770
website one of the nice features of yes

00:16:40,970 --> 00:16:45,140
code is you can just command click here

00:16:42,770 --> 00:16:47,450
and there we go

00:16:45,140 --> 00:16:50,000
now our breakpoint is hit we'll see this

00:16:47,450 --> 00:16:52,550
yellow arrow indicating what line it's

00:16:50,000 --> 00:16:55,400
on one of the great features of

00:16:52,550 --> 00:17:03,740
debugging in an IDE is that you can just

00:16:55,400 --> 00:17:05,839
mouse over you just mouse over these

00:17:03,740 --> 00:17:09,560
variables here and it'll show you what

00:17:05,839 --> 00:17:12,260
the value is so really simple you can

00:17:09,560 --> 00:17:14,180
examine your variables in more detail

00:17:12,260 --> 00:17:17,360
and this pin on the left you can also

00:17:14,180 --> 00:17:21,350
add watches so that's just an expression

00:17:17,360 --> 00:17:24,350
to watch that will always be visible and

00:17:21,350 --> 00:17:28,400
if I step over here we'll see that the

00:17:24,350 --> 00:17:32,560
length of my items is now 30 I can also

00:17:28,400 --> 00:17:32,560
see the breakpoints that are set

00:17:35,990 --> 00:17:41,730
right here and check and uncheck them

00:17:39,110 --> 00:17:44,130
one of the really nice options for

00:17:41,730 --> 00:17:46,110
debugging NBS code is something called a

00:17:44,130 --> 00:17:48,200
conditional breakpoint so you can right

00:17:46,110 --> 00:17:51,240
click on this breakpoint and edit it and

00:17:48,200 --> 00:17:53,610
you can say you you can enter an

00:17:51,240 --> 00:17:55,140
expression here so the expression the

00:17:53,610 --> 00:17:57,090
breakpoint will only be hit when the

00:17:55,140 --> 00:18:00,210
breakpoint when the expression evaluates

00:17:57,090 --> 00:18:02,010
to true in this case let's say I only

00:18:00,210 --> 00:18:06,059
care about hitting the break point when

00:18:02,010 --> 00:18:08,669
the languages only Python is selected as

00:18:06,059 --> 00:18:17,809
a language so I'm just gonna hit enter

00:18:08,669 --> 00:18:20,730
there and let's try this out if I select

00:18:17,809 --> 00:18:24,419
JavaScript and submit we should see our

00:18:20,730 --> 00:18:27,570
server return and if I select just

00:18:24,419 --> 00:18:30,679
Python will see that our break point was

00:18:27,570 --> 00:18:33,360
now hit so this is very very useful

00:18:30,679 --> 00:18:37,290
another useful vs code trick is

00:18:33,360 --> 00:18:40,320
something called jump to cursor so let's

00:18:37,290 --> 00:18:43,650
say that I didn't want to I wanted to

00:18:40,320 --> 00:18:45,480
hit my github API with a different set

00:18:43,650 --> 00:18:47,520
of languages than what the web server

00:18:45,480 --> 00:18:49,620
returned maybe there's a bug and I don't

00:18:47,520 --> 00:18:51,419
necessarily want to work through the

00:18:49,620 --> 00:18:53,460
scenario that would allow me to hit this

00:18:51,419 --> 00:18:57,080
breakpoint again I can go to the line

00:18:53,460 --> 00:19:00,059
that I'm interested in and I can go to

00:18:57,080 --> 00:19:02,549
jump to cursor and this works both

00:19:00,059 --> 00:19:05,190
forwards and backwards so when I jump to

00:19:02,549 --> 00:19:08,190
cursor here my code is now you can think

00:19:05,190 --> 00:19:11,429
of it as rewinding and I can open up the

00:19:08,190 --> 00:19:13,530
debug console which you should see if

00:19:11,429 --> 00:19:16,140
your font isn't super huge like mine is

00:19:13,530 --> 00:19:20,220
and then let's take a look at our

00:19:16,140 --> 00:19:21,720
languages right now it's just Python but

00:19:20,220 --> 00:19:30,720
let's say that I wanted to change that

00:19:21,720 --> 00:19:32,880
to both Python and Ruby I've now changed

00:19:30,720 --> 00:19:36,240
this variable before the method was

00:19:32,880 --> 00:19:39,330
called and when I jump over and take a

00:19:36,240 --> 00:19:41,580
look at my parameters we'll see that the

00:19:39,330 --> 00:19:44,040
language has now changed and I can go

00:19:41,580 --> 00:19:46,400
ahead and keep running my code so super

00:19:44,040 --> 00:19:46,400
super useful

00:19:47,720 --> 00:19:55,080
one more thing that I wanted to show you

00:19:50,100 --> 00:20:01,020
about debugging with flask is let's go

00:19:55,080 --> 00:20:03,090
to our template for those of you who

00:20:01,020 --> 00:20:06,060
have worked with templates you know how

00:20:03,090 --> 00:20:09,930
difficult and can be we can add

00:20:06,060 --> 00:20:12,150
breakpoints right in our template let's

00:20:09,930 --> 00:20:16,050
go back here and uncheck the breakpoint

00:20:12,150 --> 00:20:21,090
in API UI and then go ahead and submit

00:20:16,050 --> 00:20:26,850
our form now just like before I can

00:20:21,090 --> 00:20:28,440
hover over these these variables and it

00:20:26,850 --> 00:20:31,860
will the debugger is gonna show me what

00:20:28,440 --> 00:20:36,390
values they contain so this is very very

00:20:31,860 --> 00:20:38,160
very useful okay so there are lots of

00:20:36,390 --> 00:20:40,410
options available how do you know when

00:20:38,160 --> 00:20:42,660
you want to use what tool well to be

00:20:40,410 --> 00:20:44,940
clear I rarely use PDB from the standard

00:20:42,660 --> 00:20:47,220
library I think the functionality is too

00:20:44,940 --> 00:20:48,510
limited but it's good to know about if

00:20:47,220 --> 00:20:49,860
you're working on a machine where you

00:20:48,510 --> 00:20:52,080
can't install additional dependencies

00:20:49,860 --> 00:20:54,570
for example it's a great tool to have in

00:20:52,080 --> 00:20:57,090
your toolbox but my personal preference

00:20:54,570 --> 00:20:59,970
is I use CLI debugging for small

00:20:57,090 --> 00:21:01,230
programs and scripts and sometimes I

00:20:59,970 --> 00:21:02,940
just want to work from the command line

00:21:01,230 --> 00:21:05,610
I don't necessarily want to do a lot of

00:21:02,940 --> 00:21:07,290
clicking around I reach for I DB

00:21:05,610 --> 00:21:10,470
debugging when I'm working with complex

00:21:07,290 --> 00:21:12,750
code or large code bases so once my code

00:21:10,470 --> 00:21:15,480
gets really complicated or if I need to

00:21:12,750 --> 00:21:17,460
dive in and debug templates that's a

00:21:15,480 --> 00:21:20,760
great tool but choose the strategy that

00:21:17,460 --> 00:21:22,110
works best for you there are a few tips

00:21:20,760 --> 00:21:24,660
and tricks that I wanted to share with

00:21:22,110 --> 00:21:27,740
you a really simple one and this took me

00:21:24,660 --> 00:21:30,960
a long time to figure out you can just

00:21:27,740 --> 00:21:32,580
press ENTER to rerun the next command

00:21:30,960 --> 00:21:35,730
and the debugger I've spent a lot of

00:21:32,580 --> 00:21:37,950
time typing n unnecessarily if your

00:21:35,730 --> 00:21:41,730
debugger is stuck in a loop you can use

00:21:37,950 --> 00:21:44,520
the until command to keep running the

00:21:41,730 --> 00:21:45,540
debugger until the line exceeds the

00:21:44,520 --> 00:21:48,220
current line

00:21:45,540 --> 00:21:51,019
[Music]

00:21:48,220 --> 00:21:52,460
we all know how important tests are if

00:21:51,019 --> 00:21:54,860
you ever get stuck figuring out why a

00:21:52,460 --> 00:21:57,740
test is failing you can go ahead and

00:21:54,860 --> 00:21:59,929
throw a breakpoint in that unit test so

00:21:57,740 --> 00:22:02,299
that's I do that all the time it's it's

00:21:59,929 --> 00:22:04,429
really handy but one of my favorite

00:22:02,299 --> 00:22:08,899
tricks my favorite hacks I showed you

00:22:04,429 --> 00:22:11,720
interact earlier and that allowed me to

00:22:08,899 --> 00:22:14,240
jump into an app I thought interpreter

00:22:11,720 --> 00:22:16,880
but all of the stack all of the context

00:22:14,240 --> 00:22:19,970
that was available at my breakpoint was

00:22:16,880 --> 00:22:22,669
available in that interpreter now this

00:22:19,970 --> 00:22:25,549
is a trick allowing you to use ipython

00:22:22,669 --> 00:22:28,309
as your interactive mode repple by

00:22:25,549 --> 00:22:31,100
creating a file called a PDB RC file

00:22:28,309 --> 00:22:36,100
which is a doc configuration file and

00:22:31,100 --> 00:22:39,049
you can download mine at 9:02 / PDB RC

00:22:36,100 --> 00:22:40,789
so not only do you get that nice ipython

00:22:39,049 --> 00:22:42,950
shell with syntax highlighting a tab

00:22:40,789 --> 00:22:45,710
completion if you do this but you also

00:22:42,950 --> 00:22:48,080
get the fancy stuff like using magic

00:22:45,710 --> 00:22:49,429
methods in ipython for multi-line paste

00:22:48,080 --> 00:22:51,080
I'm not going to cover

00:22:49,429 --> 00:22:54,019
I'll show you a quick demo but I'm not

00:22:51,080 --> 00:22:56,179
going to cover too much of this but you

00:22:54,019 --> 00:22:59,330
can get really fancy with your PDB RC

00:22:56,179 --> 00:23:01,669
Ned Batchelder has posted his online he

00:22:59,330 --> 00:23:03,500
has some really useful aliases like NL

00:23:01,669 --> 00:23:06,230
to go to the next line and to print in

00:23:03,500 --> 00:23:08,620
your nearby lines for context but let me

00:23:06,230 --> 00:23:11,149
show you quickly how this looks

00:23:08,620 --> 00:23:19,519
let's go ahead and kickstart our server

00:23:11,149 --> 00:23:23,570
again and then hit it with curl now

00:23:19,519 --> 00:23:26,059
we're back at our IPTV prompt you saw

00:23:23,570 --> 00:23:27,649
earlier that there's a built-in interact

00:23:26,059 --> 00:23:35,149
command that will drop me into an

00:23:27,649 --> 00:23:39,500
interactive Python terminal but this is

00:23:35,149 --> 00:23:41,830
kind of a standard terminal here little

00:23:39,500 --> 00:23:41,830
bit clunky

00:23:44,980 --> 00:23:53,060
now if we hit control D to exit out of

00:23:47,810 --> 00:23:54,710
this and we use our new interact Iolaus

00:23:53,060 --> 00:23:57,770
that's gonna dump me into a

00:23:54,710 --> 00:23:59,690
fully-featured ipython debugger which is

00:23:57,770 --> 00:24:04,130
much much nicer but I still have access

00:23:59,690 --> 00:24:07,040
to all of my same variables so looking

00:24:04,130 --> 00:24:09,410
over three items we'll see that we have

00:24:07,040 --> 00:24:12,070
syntax highlighting and it's a lot

00:24:09,410 --> 00:24:12,070
easier to navigate

00:24:15,160 --> 00:24:20,870
we even have parenthesis matching which

00:24:17,720 --> 00:24:23,650
you know super useful so this is

00:24:20,870 --> 00:24:26,300
probably one of my favorite hacks and

00:24:23,650 --> 00:24:28,910
then you can just press control D to

00:24:26,300 --> 00:24:30,350
exit out of interact I mode something

00:24:28,910 --> 00:24:34,160
else I wanted to show you that is

00:24:30,350 --> 00:24:36,080
awesome is a feature of es code which is

00:24:34,160 --> 00:24:37,700
debugging in Jupiter notebooks

00:24:36,080 --> 00:24:39,860
it was officially released in the fall

00:24:37,700 --> 00:24:42,590
of last year and now it's part of the

00:24:39,860 --> 00:24:44,840
suite of Jupiter notebook support this

00:24:42,590 --> 00:24:46,850
is I think extra exciting for the data

00:24:44,840 --> 00:24:48,640
scientists and the audience so let's

00:24:46,850 --> 00:24:55,700
take a look at what that looks like

00:24:48,640 --> 00:24:58,190
let's open up a notebook here and go

00:24:55,700 --> 00:25:00,470
ahead and run it it's just um it's gonna

00:24:58,190 --> 00:25:03,020
start the Jupiter server and display a

00:25:00,470 --> 00:25:05,810
pretty simple graph here all right here

00:25:03,020 --> 00:25:08,150
we go now if I wanted to debug this I

00:25:05,810 --> 00:25:14,300
can just set a breakpoint here and click

00:25:08,150 --> 00:25:16,370
on debug cell and we'll see just like

00:25:14,300 --> 00:25:20,840
earlier there's our line of execution we

00:25:16,370 --> 00:25:22,880
can go ahead and step over and just like

00:25:20,840 --> 00:25:25,250
before I can mouse over these variables

00:25:22,880 --> 00:25:27,470
to take a look at them so I think this

00:25:25,250 --> 00:25:31,490
will make working with Jupiter notebooks

00:25:27,470 --> 00:25:33,260
so much much easier now there are a few

00:25:31,490 --> 00:25:35,360
gacho's that you need to be mindful of

00:25:33,260 --> 00:25:37,160
you really don't want to leave

00:25:35,360 --> 00:25:38,750
breakpoints in your production code that

00:25:37,160 --> 00:25:40,580
could halt your whole running program

00:25:38,750 --> 00:25:42,590
and make your Boston very angry with you

00:25:40,580 --> 00:25:45,410
and you don't want to be responsible for

00:25:42,590 --> 00:25:46,880
that so if you use Python 37 and break

00:25:45,410 --> 00:25:48,710
point I like I showed you earlier

00:25:46,880 --> 00:25:50,660
there's an environment variable that you

00:25:48,710 --> 00:25:52,940
can use to prevent that but really it's

00:25:50,660 --> 00:25:56,330
best practice not to commit code with

00:25:52,940 --> 00:25:56,780
breakpoints in it at all a tip here is

00:25:56,330 --> 00:25:58,730
you

00:25:56,780 --> 00:26:01,180
and take care of that really easily with

00:25:58,730 --> 00:26:03,920
get pre-commit hooks pre-commit hooks

00:26:01,180 --> 00:26:07,420
prevent commits and to get that match

00:26:03,920 --> 00:26:09,740
certain conditions which sounds hard but

00:26:07,420 --> 00:26:13,130
thankfully there's a library that does

00:26:09,740 --> 00:26:15,710
that for you it's at pre - commit calm

00:26:13,130 --> 00:26:18,410
it's written in Python you can just pip

00:26:15,710 --> 00:26:21,080
install pre - commit and it comes with a

00:26:18,410 --> 00:26:23,630
debug statements pre-commit hook that

00:26:21,080 --> 00:26:25,730
you can enable and it does the smart

00:26:23,630 --> 00:26:27,680
thing so instead of just checking for

00:26:25,730 --> 00:26:30,140
keywords in a file it actually uses the

00:26:27,680 --> 00:26:32,060
ast module to check for imports check

00:26:30,140 --> 00:26:34,610
for debug statements and also check for

00:26:32,060 --> 00:26:36,320
the new Python 37 breakpoint method call

00:26:34,610 --> 00:26:36,890
and that'll be a lot easier to

00:26:36,320 --> 00:26:38,810
future-proof

00:26:36,890 --> 00:26:40,820
as the python language grows and evolves

00:26:38,810 --> 00:26:44,000
because you can set up other pre-commit

00:26:40,820 --> 00:26:46,100
hooks for example to run a linter check

00:26:44,000 --> 00:26:48,710
for trailing whitespace check for unused

00:26:46,100 --> 00:26:52,430
imports etc so all around a very useful

00:26:48,710 --> 00:26:53,600
tool alright wrapping up by now you

00:26:52,430 --> 00:26:55,730
should have a pretty basic understanding

00:26:53,600 --> 00:26:57,080
of how to bugging works in Python as

00:26:55,730 --> 00:26:59,030
well as all of the tools that are

00:26:57,080 --> 00:27:01,130
available from PD bead in the standard

00:26:59,030 --> 00:27:05,270
library it's a graphical debugging in

00:27:01,130 --> 00:27:06,860
IDE is and remember that using a

00:27:05,270 --> 00:27:08,660
debugger in your own software is a way

00:27:06,860 --> 00:27:11,090
of supercharging your productivity

00:27:08,660 --> 00:27:13,010
because fixing bugs is a process of

00:27:11,090 --> 00:27:14,780
confirming one by one that the things

00:27:13,010 --> 00:27:17,270
that you believe to be true about the

00:27:14,780 --> 00:27:19,280
code are actually true and when you find

00:27:17,270 --> 00:27:22,460
an assumption that isn't you've found a

00:27:19,280 --> 00:27:24,980
clue and a debugger is a really great

00:27:22,460 --> 00:27:26,510
tool to allow you to do that so I've

00:27:24,980 --> 00:27:28,820
hope that I've given you the confidence

00:27:26,510 --> 00:27:31,370
to allow you to say goodbye to print and

00:27:28,820 --> 00:27:34,070
hello to the debugger and thank you all

00:27:31,370 --> 00:27:36,140
so much please go ahead and download the

00:27:34,070 --> 00:27:39,170
slides that Nina dot - slash pike on

00:27:36,140 --> 00:27:41,660
20/20 i've linked to a few additional

00:27:39,170 --> 00:27:45,080
resources at the end you can follow me

00:27:41,660 --> 00:27:48,050
on twitter at nnj a or on twitch @ n and

00:27:45,080 --> 00:27:52,010
j AI oh and please check out Python at

00:27:48,050 --> 00:27:55,690
Microsoft at Nina dot - /ms - Pike on

00:27:52,010 --> 00:27:55,690

YouTube URL: https://www.youtube.com/watch?v=5AYIe-3cD-s


