Title: Talk: Terri Oda - Using Python to Detect Vulnerabilities in Binaries
Publication date: 2021-05-05
Playlist: PyCon US 2020
Description: 
	Presented by:
Terri Oda

Detecting known software vulnerabilities is hard to do perfectly, but itâ€™s easy to get part way there. The CVE Binary Tool is a tool that detects issues in a few components but has grand ambitions. Learn how it works, how to use it & how to improve it so together we can help everyone be more secure.




Talk slides: https://docs.google.com/presentation/d/1ceHAXQ3qeTowpoCyOWAtDvhmLbxVddbCEllac4EJIkY/edit?usp=sharing

Github: https://github.com/intel/cve-bin-tool
Captions: 
	00:00:12,540 --> 00:00:16,890
welcome to using Python to detect

00:00:14,670 --> 00:00:20,990
vulnerabilities and binaries I'm Terry

00:00:16,890 --> 00:00:23,790
Oda I have a PhD in computer security

00:00:20,990 --> 00:00:26,100
but the real reason you should value my

00:00:23,790 --> 00:00:28,349
opinion here is less about my academic

00:00:26,100 --> 00:00:30,720
credentials and more about my experience

00:00:28,349 --> 00:00:32,369
I've been working in open-source for

00:00:30,720 --> 00:00:34,650
over 20 years and I currently work at

00:00:32,369 --> 00:00:36,480
Intel and open source security so that

00:00:34,650 --> 00:00:38,640
means that I helped many of Intel's open

00:00:36,480 --> 00:00:40,680
source projects find and fix issues

00:00:38,640 --> 00:00:42,780
before they go out the door and also

00:00:40,680 --> 00:00:44,430
I've evaluated a lot of external open

00:00:42,780 --> 00:00:47,970
source libraries to see how they handle

00:00:44,430 --> 00:00:49,530
security within Python you're most

00:00:47,970 --> 00:00:51,390
likely to know me from my work on good

00:00:49,530 --> 00:00:52,920
new mailman or the fact that I

00:00:51,390 --> 00:00:54,510
coordinate student mentoring for the

00:00:52,920 --> 00:00:56,460
Python Software Foundation as part of

00:00:54,510 --> 00:00:58,680
Google Summer of Code and both of those

00:00:56,460 --> 00:01:02,140
give me a lot of time working directly

00:00:58,680 --> 00:01:03,930
with different developer communities

00:01:02,140 --> 00:01:06,700
so let's talk about this problem

00:01:03,930 --> 00:01:08,530
hopefully if you're listening to this

00:01:06,700 --> 00:01:10,270
talk you care a little bit about finding

00:01:08,530 --> 00:01:13,869
security vulnerabilities and software

00:01:10,270 --> 00:01:16,400
but why binary files and why is this an

00:01:13,869 --> 00:01:19,220
interesting problem

00:01:16,400 --> 00:01:21,110
let's imagine a scenario you've been

00:01:19,220 --> 00:01:22,910
given a piece of software and told to

00:01:21,110 --> 00:01:25,630
run it how do you know if that's the

00:01:22,910 --> 00:01:25,630
safe thing to do

00:01:25,979 --> 00:01:30,420
if you've ever downloaded an executable

00:01:27,689 --> 00:01:32,189
off a website you've probably done one

00:01:30,420 --> 00:01:33,689
or more of the following things you

00:01:32,189 --> 00:01:35,640
might have run a virus scanner on the

00:01:33,689 --> 00:01:37,469
file that you downloaded you might have

00:01:35,640 --> 00:01:40,500
verified the signatures to see whether

00:01:37,469 --> 00:01:42,689
you have exactly the right file and

00:01:40,500 --> 00:01:44,610
maybe whether it's downloaded completely

00:01:42,689 --> 00:01:46,649
you might have checked for updates made

00:01:44,610 --> 00:01:48,119
sure you got the latest version and if

00:01:46,649 --> 00:01:49,319
you had some concerns about security you

00:01:48,119 --> 00:01:50,759
might have even read the security

00:01:49,319 --> 00:01:53,280
advisories that went along with that

00:01:50,759 --> 00:01:55,590
piece of software if you were getting

00:01:53,280 --> 00:01:57,810
something from an app store

00:01:55,590 --> 00:02:01,890
another managed interface you might have

00:01:57,810 --> 00:02:03,869
assumed that your whoever's managing

00:02:01,890 --> 00:02:05,520
that it has done some of these steps for

00:02:03,869 --> 00:02:07,140
you maybe that you assume that they get

00:02:05,520 --> 00:02:09,720
the latest update so you assume they run

00:02:07,140 --> 00:02:13,060
a virus scanner that's not always true

00:02:09,720 --> 00:02:15,580
but we like to believe

00:02:13,060 --> 00:02:16,060
but what if you are the responsible

00:02:15,580 --> 00:02:17,980
adult

00:02:16,060 --> 00:02:19,959
you are the person who's managing the

00:02:17,980 --> 00:02:22,680
AppStore you're the person who's

00:02:19,959 --> 00:02:25,569
shipping software what do you do that

00:02:22,680 --> 00:02:28,120
before we go any further let's just

00:02:25,569 --> 00:02:30,670
acknowledge that safe or secure is a

00:02:28,120 --> 00:02:33,459
really big and sometimes nebulous

00:02:30,670 --> 00:02:35,110
problem space I have huge development

00:02:33,459 --> 00:02:37,239
checklists for what we think makes

00:02:35,110 --> 00:02:40,120
software more secure or more private or

00:02:37,239 --> 00:02:41,560
robust and what exactly you should be

00:02:40,120 --> 00:02:43,900
doing is a developer's often still a

00:02:41,560 --> 00:02:46,180
matter of cutting-edge research so as

00:02:43,900 --> 00:02:48,070
you probably guess from the title we're

00:02:46,180 --> 00:02:50,560
focusing on one piece and that one piece

00:02:48,070 --> 00:02:52,209
is known vulnerabilities that should be

00:02:50,560 --> 00:02:53,860
the easiest piece to do right

00:02:52,209 --> 00:02:56,709
they're known we should be able to find

00:02:53,860 --> 00:02:58,660
out whether we have them or not so then

00:02:56,709 --> 00:03:00,100
we have a slightly longer list instead

00:02:58,660 --> 00:03:02,019
of just caring about the imageable

00:03:00,100 --> 00:03:03,730
packages we're gonna have to care about

00:03:02,019 --> 00:03:05,800
all the things that they depend on if we

00:03:03,730 --> 00:03:07,750
want to say that this piece of software

00:03:05,800 --> 00:03:10,600
doesn't have any known vulnerabilities

00:03:07,750 --> 00:03:12,910
so you get a list all the package of the

00:03:10,600 --> 00:03:15,040
news you do the same thing we did before

00:03:12,910 --> 00:03:16,720
you bet verify some signatures you check

00:03:15,040 --> 00:03:18,790
for updates you read those security

00:03:16,720 --> 00:03:20,829
advisories and if you have anything that

00:03:18,790 --> 00:03:22,950
you found in your own software you may

00:03:20,829 --> 00:03:25,810
be issuing your own security advisories

00:03:22,950 --> 00:03:27,700
sounds not that different still seems

00:03:25,810 --> 00:03:30,190
pretty tractable

00:03:27,700 --> 00:03:32,200
except that in practice a lot of modern

00:03:30,190 --> 00:03:34,000
software has a lot of dependencies so

00:03:32,200 --> 00:03:35,950
you might start with something that

00:03:34,000 --> 00:03:37,900
looks like a fairly short list but then

00:03:35,950 --> 00:03:40,090
each of those packages has their own

00:03:37,900 --> 00:03:43,209
list in each of those packages has their

00:03:40,090 --> 00:03:45,580
own list and it can get out of hand you

00:03:43,209 --> 00:03:47,110
might think I'm exaggerating but when

00:03:45,580 --> 00:03:48,880
one of my colleagues was building test

00:03:47,110 --> 00:03:51,730
cases for a machine learning security

00:03:48,880 --> 00:03:57,580
tool he found a Java Script package that

00:03:51,730 --> 00:04:01,830
had 877,000 dependencies and of course a

00:03:57,580 --> 00:04:01,830
number of them had security issues

00:04:01,870 --> 00:04:06,159
as a pythonista you might be feeling

00:04:04,150 --> 00:04:08,440
kind of smug right now because you know

00:04:06,159 --> 00:04:10,090
you've got a tool that'll help you get

00:04:08,440 --> 00:04:12,459
the list of requirements and all those

00:04:10,090 --> 00:04:13,720
sub dependencies so what you need to do

00:04:12,459 --> 00:04:16,060
is you make a shiny new virtual

00:04:13,720 --> 00:04:18,040
environment you install what you need

00:04:16,060 --> 00:04:20,049
and then you get it to spin at a list of

00:04:18,040 --> 00:04:21,400
requirements if you maintain a Python

00:04:20,049 --> 00:04:23,069
package you may have done this at some

00:04:21,400 --> 00:04:26,379
point

00:04:23,069 --> 00:04:29,770
so let's try this with pythons

00:04:26,379 --> 00:04:32,500
cryptography make my shiny new virtual

00:04:29,770 --> 00:04:34,539
em install cryptography get some

00:04:32,500 --> 00:04:35,949
requirements and they look pretty good

00:04:34,539 --> 00:04:39,509
there's not that much in there this

00:04:35,949 --> 00:04:42,870
doesn't look too scary at all except I

00:04:39,509 --> 00:04:46,810
happen to know that under the hood

00:04:42,870 --> 00:04:48,879
cryptography calls to open SSL and I

00:04:46,810 --> 00:04:50,830
happen to know that python has this

00:04:48,879 --> 00:04:52,780
fancy thing where you can package

00:04:50,830 --> 00:04:54,729
binaries into your pip

00:04:52,780 --> 00:04:57,490
so that it's installed with you you know

00:04:54,729 --> 00:04:59,380
do the whole batteries included thing so

00:04:57,490 --> 00:05:03,639
what version of open SSL that I just

00:04:59,380 --> 00:05:06,220
install yeah I don't really know and if

00:05:03,639 --> 00:05:09,120
I didn't know it was there I don't think

00:05:06,220 --> 00:05:09,120
I'd have any clue

00:05:10,249 --> 00:05:16,779
so even with a language that has good

00:05:13,939 --> 00:05:20,269
tools knowing what's in software is

00:05:16,779 --> 00:05:22,249
surprisingly hard I'm not gonna walk you

00:05:20,269 --> 00:05:23,779
through other languages but I work in

00:05:22,249 --> 00:05:25,639
open source security and review a lot of

00:05:23,779 --> 00:05:28,669
software and I can tell you we bought

00:05:25,639 --> 00:05:30,559
some weird cases and if you don't

00:05:28,669 --> 00:05:32,719
believe me ask the people who

00:05:30,559 --> 00:05:35,689
specialized in licensing because they

00:05:32,719 --> 00:05:37,909
have a lot of the same problems if

00:05:35,689 --> 00:05:40,429
figuring out exactly what's in software

00:05:37,909 --> 00:05:43,639
is important for both licensing

00:05:40,429 --> 00:05:45,589
compliance and for security then why

00:05:43,639 --> 00:05:48,319
don't we have tools to help us do it and

00:05:45,589 --> 00:05:51,319
the answer is of course that we do but

00:05:48,319 --> 00:05:53,929
they're fairly expensive because it

00:05:51,319 --> 00:05:55,849
takes a lot of effort to determine

00:05:53,929 --> 00:05:57,319
exactly what's in software it takes a

00:05:55,849 --> 00:05:59,719
lot of effort to keep it up to date as

00:05:57,319 --> 00:06:02,329
software changes and they tend to be

00:05:59,719 --> 00:06:04,399
slow because they're scanning for well

00:06:02,329 --> 00:06:05,929
maybe not eight hundred and seventy

00:06:04,399 --> 00:06:07,789
seven thousand different types of

00:06:05,929 --> 00:06:09,679
JavaScript packages but a lot of

00:06:07,789 --> 00:06:14,149
different common pieces of software with

00:06:09,679 --> 00:06:15,619
interesting properties for someone who's

00:06:14,149 --> 00:06:17,869
in an organization that cares deeply

00:06:15,619 --> 00:06:19,849
about security having a tool that's

00:06:17,869 --> 00:06:22,339
expensive and slow is a reasonable

00:06:19,849 --> 00:06:24,669
trade-off for it to be accurate and

00:06:22,339 --> 00:06:24,669
comprehensive

00:06:25,520 --> 00:06:31,629
sometimes you don't want the whole cake

00:06:27,860 --> 00:06:36,110
sometimes you just want one piece so

00:06:31,629 --> 00:06:39,979
what if we built a tool that only cared

00:06:36,110 --> 00:06:42,289
about old versions of OpenSSL or maybe

00:06:39,979 --> 00:06:44,150
we could expand it to a few other

00:06:42,289 --> 00:06:46,879
open-source libraries with interesting

00:06:44,150 --> 00:06:48,470
security impacts and then we've got

00:06:46,879 --> 00:06:52,069
something that's no longer that

00:06:48,470 --> 00:06:55,400
expensive to build and doesn't have to

00:06:52,069 --> 00:06:57,379
run very slowly so suddenly we've got

00:06:55,400 --> 00:07:00,229
something that's totally suitable for

00:06:57,379 --> 00:07:03,139
sharing with external partners or open

00:07:00,229 --> 00:07:05,720
source projects and we've got something

00:07:03,139 --> 00:07:07,220
that's maybe fast enough to run as part

00:07:05,720 --> 00:07:08,780
of your continuous integration to give

00:07:07,220 --> 00:07:11,389
you a heads up if there's a new

00:07:08,780 --> 00:07:13,880
vulnerability you should know a bit so

00:07:11,389 --> 00:07:15,470
that's what we did it started with a

00:07:13,880 --> 00:07:18,020
little Python script that detected old

00:07:15,470 --> 00:07:20,539
versions of OpenSSL and we've slowly

00:07:18,020 --> 00:07:23,750
built a larger tool that we now called

00:07:20,539 --> 00:07:25,460
the CV binary tool it's free it's open

00:07:23,750 --> 00:07:26,629
source and it comes with a bunch of

00:07:25,460 --> 00:07:29,690
different checkers to tell you about

00:07:26,629 --> 00:07:32,330
your vulnerabilities so let's take a

00:07:29,690 --> 00:07:35,220
little look under the hood

00:07:32,330 --> 00:07:36,630
if I've got a package and I'm a small

00:07:35,220 --> 00:07:38,490
Python script that doesn't know anything

00:07:36,630 --> 00:07:41,940
about what it's looking at how do I

00:07:38,490 --> 00:07:43,770
guess what's there so we decided to

00:07:41,940 --> 00:07:46,919
think like a hacker or a pen tester and

00:07:43,770 --> 00:07:49,560
go really simple UNIX utilities strings

00:07:46,919 --> 00:07:52,290
you run it on a binary it gives you

00:07:49,560 --> 00:07:54,630
every string that it finds that's larger

00:07:52,290 --> 00:07:57,540
than four characters some of them are

00:07:54,630 --> 00:07:59,820
kind of useless as you can see but some

00:07:57,540 --> 00:08:02,010
of them give you some hints as to what's

00:07:59,820 --> 00:08:05,550
in there and if you take a look at this

00:08:02,010 --> 00:08:08,730
one you can sort of see mmm maybe I have

00:08:05,550 --> 00:08:11,840
a pretty good idea of what might be

00:08:08,730 --> 00:08:11,840
inside this package

00:08:12,020 --> 00:08:17,520
okay so I'm pretty sure this is gonna be

00:08:14,820 --> 00:08:20,760
open s cell but what version of OpenSSL

00:08:17,520 --> 00:08:22,800
do I have well we can use our other

00:08:20,760 --> 00:08:25,620
favorite Linux utility grep which is a

00:08:22,800 --> 00:08:27,270
text search tool to narrow it down so

00:08:25,620 --> 00:08:29,700
I'm looking for everything that includes

00:08:27,270 --> 00:08:32,400
the string open this to sell now and oh

00:08:29,700 --> 00:08:39,240
look there's a nice clear version string

00:08:32,400 --> 00:08:43,500
right there this is open SSL 1.1.1 d

00:08:39,240 --> 00:08:45,540
released in September 2019 if we want to

00:08:43,500 --> 00:08:46,890
go from that to a signature then we need

00:08:45,540 --> 00:08:49,860
to look at a few more versions of

00:08:46,890 --> 00:08:51,450
OpenSSL and start to find a pattern so

00:08:49,860 --> 00:08:53,640
here's part of what our open SSL

00:08:51,450 --> 00:08:58,590
signature looks like it's pretty obvious

00:08:53,640 --> 00:09:00,900
open SSL a number a letter it would be

00:08:58,590 --> 00:09:02,340
pretty brittle if you were trying to

00:09:00,900 --> 00:09:04,440
hide what was in your software for some

00:09:02,340 --> 00:09:06,270
reason but really the purpose of this

00:09:04,440 --> 00:09:08,250
tool is to help you avoid honest

00:09:06,270 --> 00:09:11,040
mistakes and updating and it's good

00:09:08,250 --> 00:09:12,990
enough for that and in case you were

00:09:11,040 --> 00:09:15,000
wondering about the question of what's

00:09:12,990 --> 00:09:19,530
in pythons cryptography package earlier

00:09:15,000 --> 00:09:20,730
it was open SSL 1.1.1 d and when I put

00:09:19,530 --> 00:09:23,910
together my slides that was the latest

00:09:20,730 --> 00:09:25,410
version available so we're good the

00:09:23,910 --> 00:09:27,150
pattern that we see for open SSL is

00:09:25,410 --> 00:09:29,070
something that we see across a lot of

00:09:27,150 --> 00:09:31,080
software you end up with the signature

00:09:29,070 --> 00:09:33,180
that looks sort of like a package name

00:09:31,080 --> 00:09:35,220
maybe some white space a version number

00:09:33,180 --> 00:09:38,640
maybe some more white space and maybe

00:09:35,220 --> 00:09:41,190
some extra information it doesn't work

00:09:38,640 --> 00:09:44,940
for all software one of my favorite

00:09:41,190 --> 00:09:46,890
unusual ones is SQLite where it doesn't

00:09:44,940 --> 00:09:49,710
have a version string that we can parse

00:09:46,890 --> 00:09:52,590
directly but it has this big source ID

00:09:49,710 --> 00:09:55,680
string and that's sufficiently unique

00:09:52,590 --> 00:09:57,480
that we can then take it and verify it

00:09:55,680 --> 00:09:59,490
against their published information so

00:09:57,480 --> 00:10:01,590
when you detect SQLite you look for this

00:09:59,490 --> 00:10:04,140
big hash and then you map that hash back

00:10:01,590 --> 00:10:05,610
to the version but it's definitely true

00:10:04,140 --> 00:10:08,280
that there are libraries that we can't

00:10:05,610 --> 00:10:10,640
detect easily and for now we've just

00:10:08,280 --> 00:10:13,590
been making a note of them and moving on

00:10:10,640 --> 00:10:15,690
once you've got a version number how do

00:10:13,590 --> 00:10:19,770
you go from that to a list of known role

00:10:15,690 --> 00:10:21,720
abilities so we could do fancy web

00:10:19,770 --> 00:10:24,830
scraping for everyone's website and read

00:10:21,720 --> 00:10:26,420
all of their security advisories

00:10:24,830 --> 00:10:28,550
that's a lot of manual work and we don't

00:10:26,420 --> 00:10:31,310
have to because there's this glorious

00:10:28,550 --> 00:10:32,720
pile of JSON that contains all known

00:10:31,310 --> 00:10:35,300
enumerated public software

00:10:32,720 --> 00:10:37,550
vulnerabilities it's called the national

00:10:35,300 --> 00:10:38,810
vulnerability database which is a bit of

00:10:37,550 --> 00:10:40,610
a misnomer it's actually pretty

00:10:38,810 --> 00:10:42,829
international but the important things

00:10:40,610 --> 00:10:45,649
is if it's public domain it's pretty

00:10:42,829 --> 00:10:47,510
easy to get if you take a look inside

00:10:45,649 --> 00:10:49,070
the JSON you can see a bunch of

00:10:47,510 --> 00:10:51,950
information about each vulnerability

00:10:49,070 --> 00:10:53,839
they call each one a CVE or common

00:10:51,950 --> 00:10:56,450
vulnerability and exposure and it's got

00:10:53,839 --> 00:10:59,120
a unique number assigned to it and the

00:10:56,450 --> 00:11:01,310
system allows for ranges so you can see

00:10:59,120 --> 00:11:03,769
here in this C Python issue that this

00:11:01,310 --> 00:11:05,480
description text tells you about three

00:11:03,769 --> 00:11:08,180
different ranges of versions that are a

00:11:05,480 --> 00:11:09,860
boner Bowl and then down below it's got

00:11:08,180 --> 00:11:13,070
an appropriate way to see them in

00:11:09,860 --> 00:11:14,630
machine readable code once you've got

00:11:13,070 --> 00:11:17,029
the range information for finding

00:11:14,630 --> 00:11:20,420
vulnerability then you can use package

00:11:17,029 --> 00:11:22,250
resources persuasion function to figure

00:11:20,420 --> 00:11:24,950
out whether the software you found falls

00:11:22,250 --> 00:11:26,390
within that range and that works pretty

00:11:24,950 --> 00:11:29,390
well but we had an interesting issue

00:11:26,390 --> 00:11:32,779
here because parse version assumes that

00:11:29,390 --> 00:11:36,190
any letter following the numbers is

00:11:32,779 --> 00:11:40,490
something like a release candidate or a

00:11:36,190 --> 00:11:43,970
alpha or beta and that's not how letters

00:11:40,490 --> 00:11:46,490
work in open SSL version numbering so we

00:11:43,970 --> 00:11:48,500
actually had to convert that last letter

00:11:46,490 --> 00:11:51,820
into a number to make parse version

00:11:48,500 --> 00:11:53,620
behave the way we expected it to

00:11:51,820 --> 00:11:55,630
the other thing to note here is that

00:11:53,620 --> 00:11:58,810
well there are these beautiful machine

00:11:55,630 --> 00:12:01,090
possible data ranges our experience has

00:11:58,810 --> 00:12:03,670
definitely been the data isn't perfect

00:12:01,090 --> 00:12:05,590
the most common problem that we've seen

00:12:03,670 --> 00:12:07,750
is sort of off by one type errors where

00:12:05,590 --> 00:12:10,750
the description says that all versions

00:12:07,750 --> 00:12:13,600
before 8.4 are vulnerable and then the

00:12:10,750 --> 00:12:17,020
data says version 8.4 is vulnerable no

00:12:13,600 --> 00:12:19,570
others it's not really hard to report

00:12:17,020 --> 00:12:21,970
these things but you do have to remember

00:12:19,570 --> 00:12:24,370
this is a large database that is filled

00:12:21,970 --> 00:12:28,270
in by humans and sometimes humans make

00:12:24,370 --> 00:12:29,950
mistakes now that you have an idea of

00:12:28,270 --> 00:12:32,200
what's going on under the hood to make

00:12:29,950 --> 00:12:35,110
the detector work let's talk about how

00:12:32,200 --> 00:12:37,000
to actually use the CB binary tool we've

00:12:35,110 --> 00:12:38,950
got an icepick package so you should be

00:12:37,000 --> 00:12:40,900
able to just pip install CV pin tool and

00:12:38,950 --> 00:12:44,710
then run it on any directory or file you

00:12:40,900 --> 00:12:46,780
want you will need Python 3 6 once you

00:12:44,710 --> 00:12:49,030
do that it'll scan through whatever file

00:12:46,780 --> 00:12:50,410
or directory you've given it and if it

00:12:49,030 --> 00:12:52,180
finds something it understands so

00:12:50,410 --> 00:12:54,010
something that has a checker for you'll

00:12:52,180 --> 00:12:55,480
try to find the version if it finds a

00:12:54,010 --> 00:12:57,910
version with any known vulnerabilities

00:12:55,480 --> 00:12:59,620
it'll give you a list of them thanks to

00:12:57,910 --> 00:13:01,210
our students were in the mood middle of

00:12:59,620 --> 00:13:03,130
improving the output for the tool so it

00:13:01,210 --> 00:13:06,340
may look different soon but this is the

00:13:03,130 --> 00:13:08,260
current console output but my experience

00:13:06,340 --> 00:13:09,760
working as a security engineer is that

00:13:08,260 --> 00:13:11,590
often when people get a list of CVS

00:13:09,760 --> 00:13:13,720
they're gonna want to triage them maybe

00:13:11,590 --> 00:13:16,300
track what versions you need to upgrade

00:13:13,720 --> 00:13:18,820
to to fix them put notes if there's any

00:13:16,300 --> 00:13:22,150
mitigations figure out where it came

00:13:18,820 --> 00:13:24,730
from we don't have a triage tool built

00:13:22,150 --> 00:13:26,830
into the CV binary tool but we do

00:13:24,730 --> 00:13:28,270
provide a comma delimited format which

00:13:26,830 --> 00:13:29,740
is suitable for people to import into

00:13:28,270 --> 00:13:33,880
spreadsheet so they can work with the

00:13:29,740 --> 00:13:35,710
data there and finally we have a JSON

00:13:33,880 --> 00:13:39,220
output format which is intended to be

00:13:35,710 --> 00:13:40,660
the machine possible one we're planning

00:13:39,220 --> 00:13:43,600
to use it with the machine learning tool

00:13:40,660 --> 00:13:44,980
diff ml to help us learn about what

00:13:43,600 --> 00:13:48,070
packages should and shouldn't be

00:13:44,980 --> 00:13:50,770
installed from various known software

00:13:48,070 --> 00:13:52,960
repositories but we're hoping that

00:13:50,770 --> 00:13:54,280
people will find other interesting ways

00:13:52,960 --> 00:13:58,400
to use it if they want to integrate

00:13:54,280 --> 00:14:00,740
vulnerability data into their processes

00:13:58,400 --> 00:14:03,830
sometimes it's not obvious to people but

00:14:00,740 --> 00:14:06,800
the BIM part of CV BIM tool refers to

00:14:03,830 --> 00:14:10,310
binaries really only scanning binary

00:14:06,800 --> 00:14:12,590
files and if you recall how simple the

00:14:10,310 --> 00:14:15,170
signatures are you can sort of see where

00:14:12,590 --> 00:14:17,750
why we might have done that if you're

00:14:15,170 --> 00:14:20,210
scanning through all of the texthelp and

00:14:17,750 --> 00:14:21,740
documentation it'd be pretty easy to get

00:14:20,210 --> 00:14:23,570
a false positive off of something that

00:14:21,740 --> 00:14:27,110
says you need at least this version of

00:14:23,570 --> 00:14:30,020
this package the other thing is that if

00:14:27,110 --> 00:14:31,640
you have source code you probably have

00:14:30,020 --> 00:14:33,530
other tools available to help you figure

00:14:31,640 --> 00:14:35,810
out what's in your build or you might

00:14:33,530 --> 00:14:37,430
already know so that you probably

00:14:35,810 --> 00:14:39,260
shouldn't just be using heuristics

00:14:37,430 --> 00:14:40,640
signature detection to figure that out

00:14:39,260 --> 00:14:43,850
you might as well just use the data

00:14:40,640 --> 00:14:46,310
directly but since we have this parse

00:14:43,850 --> 00:14:48,170
database of vulnerabilities already we

00:14:46,310 --> 00:14:51,140
might as well build the tool to help you

00:14:48,170 --> 00:14:53,390
with that when you install the CV binary

00:14:51,140 --> 00:14:54,890
tool you also get a utility called CSV

00:14:53,390 --> 00:14:57,500
to see the e which you can use against a

00:14:54,890 --> 00:14:59,390
list of known components the CSV part

00:14:57,500 --> 00:15:02,780
refers to the comma delimited format

00:14:59,390 --> 00:15:04,490
that they're expected in so that lets

00:15:02,780 --> 00:15:06,440
you skip the more heuristic binary

00:15:04,490 --> 00:15:07,340
matching and potential for error you

00:15:06,440 --> 00:15:08,720
don't have to worry about whether

00:15:07,340 --> 00:15:10,610
checkers been written for something you

00:15:08,720 --> 00:15:11,960
care about you just gives you a list of

00:15:10,610 --> 00:15:14,870
known vulnerabilities out of the same

00:15:11,960 --> 00:15:17,180
database so you could take something

00:15:14,870 --> 00:15:20,120
from something like your requirements

00:15:17,180 --> 00:15:21,890
list or your build scripts and just get

00:15:20,120 --> 00:15:25,520
a list of anything that needs a version

00:15:21,890 --> 00:15:27,440
bump for security reasons and if you

00:15:25,520 --> 00:15:29,510
haven't been responsible for the

00:15:27,440 --> 00:15:32,660
security of software recently you may

00:15:29,510 --> 00:15:35,750
not know but it's surprisingly easy to

00:15:32,660 --> 00:15:36,890
miss this without automation especially

00:15:35,750 --> 00:15:40,880
if you're talking about something that's

00:15:36,890 --> 00:15:42,740
a couple of dependencies levels down so

00:15:40,880 --> 00:15:45,320
this is what the output for that used to

00:15:42,740 --> 00:15:46,970
look like but I literally just merged a

00:15:45,320 --> 00:15:48,740
patch this morning that makes it look

00:15:46,970 --> 00:15:50,540
exactly like the output from the main

00:15:48,740 --> 00:15:52,720
tool so that'll be a little easier to

00:15:50,540 --> 00:15:52,720
work with

00:15:53,119 --> 00:15:56,929
the big limitation on this utility right

00:15:54,889 --> 00:16:00,019
now is that you need to get the list of

00:15:56,929 --> 00:16:02,389
nvd vendor product pairs in your CSV

00:16:00,019 --> 00:16:03,889
file for it to work these aren't really

00:16:02,389 --> 00:16:05,569
hard to find with a quick search of the

00:16:03,889 --> 00:16:07,399
database but they're kind of hard to

00:16:05,569 --> 00:16:09,259
automate because of name duplications

00:16:07,399 --> 00:16:11,329
different packaging decisions and

00:16:09,259 --> 00:16:12,919
sometimes a given package doesn't have a

00:16:11,329 --> 00:16:16,129
vendor product pair yet because it

00:16:12,919 --> 00:16:18,229
hasn't ever had a CBE so if you were

00:16:16,129 --> 00:16:21,049
hoping to just take your requirements

00:16:18,229 --> 00:16:22,729
txt that pip generated for you and get a

00:16:21,049 --> 00:16:25,669
list it's not going to work with it a

00:16:22,729 --> 00:16:27,439
little bit extra help we've got some

00:16:25,669 --> 00:16:31,099
students who puts forth some good ideas

00:16:27,439 --> 00:16:33,169
on how to improve this but basically

00:16:31,099 --> 00:16:35,269
this is one of those cases where we're

00:16:33,169 --> 00:16:36,720
giving you a slice of cake not quite the

00:16:35,269 --> 00:16:39,420
whole thing

00:16:36,720 --> 00:16:48,060
so you've run the tool and it found

00:16:39,420 --> 00:16:50,910
something now what number one learn go

00:16:48,060 --> 00:16:53,189
and look up whatever it is that it seems

00:16:50,910 --> 00:16:55,290
to have detected you can usually just

00:16:53,189 --> 00:16:57,899
put that CBE number into a search engine

00:16:55,290 --> 00:17:00,170
of your choice and it'll come up with

00:16:57,899 --> 00:17:02,550
links to find out what the problem is

00:17:00,170 --> 00:17:05,610
information about how to mitigate it and

00:17:02,550 --> 00:17:07,709
when it was fixed as I said earlier the

00:17:05,610 --> 00:17:10,470
data isn't perfect so sometimes you'll

00:17:07,709 --> 00:17:13,890
find out that it was detected and error

00:17:10,470 --> 00:17:16,079
you can report those to us or to nvd and

00:17:13,890 --> 00:17:18,659
we can get them fixed and every once in

00:17:16,079 --> 00:17:20,880
a while you'll be using something that

00:17:18,659 --> 00:17:22,439
has a back ported patch so the version

00:17:20,880 --> 00:17:25,319
number doesn't line up with when the fix

00:17:22,439 --> 00:17:29,640
happened and then you don't have to

00:17:25,319 --> 00:17:31,049
worry too much about that one but most

00:17:29,640 --> 00:17:35,640
the time you're going to go on to step

00:17:31,049 --> 00:17:37,320
two update so it's usually less work in

00:17:35,640 --> 00:17:40,110
the long run to just update to the

00:17:37,320 --> 00:17:42,270
latest available or a long-term support

00:17:40,110 --> 00:17:43,770
version if one exists if you're the

00:17:42,270 --> 00:17:45,059
responsible adult in the room don't

00:17:43,770 --> 00:17:46,559
forget to release a new version of your

00:17:45,059 --> 00:17:49,169
packages though with updated

00:17:46,559 --> 00:17:52,799
dependencies if you need to that'll help

00:17:49,169 --> 00:17:55,049
a lot of people it's often tempting to

00:17:52,799 --> 00:17:57,570
back port patches I'm not a huge fan of

00:17:55,049 --> 00:18:00,330
that because it can introduce new bugs

00:17:57,570 --> 00:18:02,880
pretty easily but if you do that be

00:18:00,330 --> 00:18:04,530
aware that the CVE binary tool is not

00:18:02,880 --> 00:18:06,750
smart enough to detect it so you will

00:18:04,530 --> 00:18:10,110
continue to detect that one even after

00:18:06,750 --> 00:18:12,120
you've fixed it and finally if upgrade

00:18:10,110 --> 00:18:13,950
isn't possibility mediately or there is

00:18:12,120 --> 00:18:17,309
no fix yet you might want to look at

00:18:13,950 --> 00:18:19,080
step three mitigate so look for things

00:18:17,309 --> 00:18:21,360
you can do to reduce your at risk

00:18:19,080 --> 00:18:23,100
these are usually things like disabling

00:18:21,360 --> 00:18:24,870
the effective code or changing

00:18:23,100 --> 00:18:27,240
configurations to be more secure if

00:18:24,870 --> 00:18:29,730
there are known mitigations they're

00:18:27,240 --> 00:18:31,740
usually included with the CB data that

00:18:29,730 --> 00:18:33,179
you found in the learn step so you

00:18:31,740 --> 00:18:35,610
should be able to just go ahead and do

00:18:33,179 --> 00:18:37,110
those things and if you're the

00:18:35,610 --> 00:18:38,850
responsible adult who is releasing a

00:18:37,110 --> 00:18:40,950
package don't forget to tell your users

00:18:38,850 --> 00:18:43,740
what's best practices should be for your

00:18:40,950 --> 00:18:45,600
code if you know them I've covered what

00:18:43,740 --> 00:18:47,610
we think are the most common usages for

00:18:45,600 --> 00:18:49,649
the CV binary tool but there are a

00:18:47,610 --> 00:18:50,460
number of other options available like

00:18:49,649 --> 00:18:52,170
extract

00:18:50,460 --> 00:18:53,970
spells you can always get a list from

00:18:52,170 --> 00:18:56,550
the manual or running the tool with the

00:18:53,970 --> 00:18:58,530
help option and as I said we've got a

00:18:56,550 --> 00:19:00,120
lot of new development going on right

00:18:58,530 --> 00:19:03,480
now so there should be new stuff

00:19:00,120 --> 00:19:07,500
happening pretty regularly so that's the

00:19:03,480 --> 00:19:08,850
CVD binary tool now you know what it is

00:19:07,500 --> 00:19:11,340
how it works

00:19:08,850 --> 00:19:13,170
you might be wondering how do I use this

00:19:11,340 --> 00:19:17,880
knowledge to help make the world more

00:19:13,170 --> 00:19:19,500
secure number one please use the tool we

00:19:17,880 --> 00:19:22,020
made it for the world we want the world

00:19:19,500 --> 00:19:25,680
to use it if you do one thing after

00:19:22,020 --> 00:19:27,810
you're done watching this talk go pip

00:19:25,680 --> 00:19:30,120
install it or grab the latest from

00:19:27,810 --> 00:19:32,850
github and try running it on something

00:19:30,120 --> 00:19:37,080
my favorite thing to do is to run it on

00:19:32,850 --> 00:19:38,970
slash bin or user lib and just see what

00:19:37,080 --> 00:19:44,360
it finds it's kind of fascinating

00:19:38,970 --> 00:19:47,490
because in any reasonably large

00:19:44,360 --> 00:19:49,860
operating system there are always some

00:19:47,490 --> 00:19:52,110
things that have known vulnerabilities

00:19:49,860 --> 00:19:54,530
in them at any time so it's pretty neat

00:19:52,110 --> 00:19:56,700
to be able to see what they are and

00:19:54,530 --> 00:19:57,810
remember how I said back at the

00:19:56,700 --> 00:19:59,640
beginning that we couldn't really

00:19:57,810 --> 00:20:01,350
justify recommending big expensive

00:19:59,640 --> 00:20:02,820
packages to tiny open-source projects

00:20:01,350 --> 00:20:04,290
well this is it

00:20:02,820 --> 00:20:06,810
we built you in a free open-source

00:20:04,290 --> 00:20:09,120
package to help make this easier please

00:20:06,810 --> 00:20:12,690
use it stick it in your continuous

00:20:09,120 --> 00:20:14,780
integration tell us if it works for you

00:20:12,690 --> 00:20:18,930
tell us if it doesn't work for you I

00:20:14,780 --> 00:20:20,430
really want to know second if you try it

00:20:18,930 --> 00:20:22,890
out and you think it might be useful you

00:20:20,430 --> 00:20:24,330
can contribute to it there's a

00:20:22,890 --> 00:20:26,430
particular checker that you'd like to

00:20:24,330 --> 00:20:28,890
have that's not there yet this is an

00:20:26,430 --> 00:20:31,380
open-source project there's four steps

00:20:28,890 --> 00:20:33,540
to adding a checker you need to choose

00:20:31,380 --> 00:20:35,280
the software that you care about then

00:20:33,540 --> 00:20:38,010
you need to find the vendor product pair

00:20:35,280 --> 00:20:39,390
that matches the product and nvd be

00:20:38,010 --> 00:20:41,310
aware that sometimes there's more than

00:20:39,390 --> 00:20:44,040
one vendor product pair often because

00:20:41,310 --> 00:20:46,860
the product name or owner has changed

00:20:44,040 --> 00:20:49,890
over time don't worry we've got code to

00:20:46,860 --> 00:20:51,120
handle that from there you need to look

00:20:49,890 --> 00:20:53,130
at the strings and find a version

00:20:51,120 --> 00:20:54,750
signature we showed you how to do that

00:20:53,130 --> 00:20:57,300
with open SSL it's going to be pretty

00:20:54,750 --> 00:20:59,280
similar in a lot of cases and finally

00:20:57,300 --> 00:21:01,620
you develop some tests against real

00:20:59,280 --> 00:21:03,630
binaries to show that this checker works

00:21:01,620 --> 00:21:05,220
in the real world

00:21:03,630 --> 00:21:07,350
if you don't have time to do all of

00:21:05,220 --> 00:21:09,600
these steps doing any number of them is

00:21:07,350 --> 00:21:12,930
still really useful especially just

00:21:09,600 --> 00:21:14,640
choosing filing in that issue saying

00:21:12,930 --> 00:21:16,650
this is a checker that I think would be

00:21:14,640 --> 00:21:18,510
interesting is really helpful we have a

00:21:16,650 --> 00:21:20,190
regular stream of new contributors who

00:21:18,510 --> 00:21:22,980
are always looking for new bucks to work

00:21:20,190 --> 00:21:24,660
on and one of the reasons that we have

00:21:22,980 --> 00:21:26,190
regular new contributors is that we've

00:21:24,660 --> 00:21:27,900
been participating in a number of events

00:21:26,190 --> 00:21:30,120
designed to bring new people to open

00:21:27,900 --> 00:21:32,310
source projects the one that's going on

00:21:30,120 --> 00:21:33,810
right now is Google Summer of Code which

00:21:32,310 --> 00:21:35,610
is a neat event where we provide

00:21:33,810 --> 00:21:37,800
mentorship and Google pay students to

00:21:35,610 --> 00:21:39,810
work on open source projects as I

00:21:37,800 --> 00:21:42,000
mentioned at the beginning I coordinate

00:21:39,810 --> 00:21:44,520
this mentoring effort for all of the

00:21:42,000 --> 00:21:46,260
Python Software Foundation but I also

00:21:44,520 --> 00:21:48,840
mentor students directly as part of my

00:21:46,260 --> 00:21:51,240
day job at Intel with the CBE binary

00:21:48,840 --> 00:21:52,380
tool project so the students come in

00:21:51,240 --> 00:21:54,450
they learn a little bit about the

00:21:52,380 --> 00:21:56,370
project to fix some bugs and then they

00:21:54,450 --> 00:22:00,660
propose ideas for three-month-long

00:21:56,370 --> 00:22:03,660
things that they'd like to work on this

00:22:00,660 --> 00:22:04,620
is our second year doing it and what

00:22:03,660 --> 00:22:06,420
I've learned is that a lot of the

00:22:04,620 --> 00:22:07,890
students could use help understanding

00:22:06,420 --> 00:22:09,630
how people would actually use this tool

00:22:07,890 --> 00:22:11,370
what features might be useful and what

00:22:09,630 --> 00:22:16,780
checkers people want most and the like

00:22:11,370 --> 00:22:19,540
so that brings us to number three mentor

00:22:16,780 --> 00:22:22,330
if you're pretty good at code review or

00:22:19,540 --> 00:22:24,610
love hunting down weird bugs or know how

00:22:22,330 --> 00:22:27,790
to help people fix their get trees or

00:22:24,610 --> 00:22:29,560
just like talking about what it's like

00:22:27,790 --> 00:22:31,870
to have a job and software development

00:22:29,560 --> 00:22:36,580
and open source it's a pretty fun thing

00:22:31,870 --> 00:22:38,890
to do because of the pandemic this year

00:22:36,580 --> 00:22:41,350
python has way more student applicants

00:22:38,890 --> 00:22:45,100
who are eager to find a job that doesn't

00:22:41,350 --> 00:22:46,780
involve being on site anywhere and way

00:22:45,100 --> 00:22:48,460
fewer mentors because a lot of our

00:22:46,780 --> 00:22:50,650
mentors are very busy with pandemic

00:22:48,460 --> 00:22:54,250
related things and not having child care

00:22:50,650 --> 00:22:55,780
and the like so if you're one of those

00:22:54,250 --> 00:22:57,580
people feels like they have a little

00:22:55,780 --> 00:22:59,830
extra time the pandemic your help would

00:22:57,580 --> 00:23:01,900
be especially appreciated this year and

00:22:59,830 --> 00:23:03,190
if you're not a person with extra time I

00:23:01,900 --> 00:23:04,660
hope you can at least feel good about

00:23:03,190 --> 00:23:06,820
the fact that Python is doing what we

00:23:04,660 --> 00:23:09,300
can to provide remote jobs and

00:23:06,820 --> 00:23:12,670
mentorship to students this year and

00:23:09,300 --> 00:23:15,370
that's it here's that URL for the CBE

00:23:12,670 --> 00:23:17,380
binary tool again it may be a small

00:23:15,370 --> 00:23:19,870
piece of the whole vulnerability

00:23:17,380 --> 00:23:20,980
detection cake but I hope it's enough to

00:23:19,870 --> 00:23:23,740
be useful in filling

00:23:20,980 --> 00:23:25,750
please go forth and try it out and let

00:23:23,740 --> 00:23:28,230
us know how we can make it better thanks

00:23:25,750 --> 00:23:28,230

YouTube URL: https://www.youtube.com/watch?v=k3fM9KqKfTg


