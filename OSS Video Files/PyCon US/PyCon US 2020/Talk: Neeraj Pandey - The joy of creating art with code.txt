Title: Talk: Neeraj Pandey - The joy of creating art with code
Publication date: 2021-05-05
Playlist: PyCon US 2020
Description: 
	Presented by:
Neeraj Pandey

Art is everywhere and itâ€™s beautiful. Unleash the creative artist inside you with the beauty of Generative Art. Learn how algorithms are used to create these aesthetic art forms, how motion and structures emit sounds and what toolkits are required to do so. The talk will take the audience to a small history of Generative Art and how autonomously these art forms are created using algorithms with various examples using Processing, PyCario and more.




Talk slides: bit.ly/350H8rF
Twitter: twitter.com/neerajp99/
Captions: 
	00:00:12,799 --> 00:00:16,080
hi

00:00:13,200 --> 00:00:18,080
i'm nidh and this is the joy of creating

00:00:16,080 --> 00:00:20,480
art with code

00:00:18,080 --> 00:00:23,039
a little bit about myself i'm currently

00:00:20,480 --> 00:00:26,320
a sophomore student at ashoka university

00:00:23,039 --> 00:00:28,240
when i'm pursuing computer science

00:00:26,320 --> 00:00:30,480
moving forward these are the points for

00:00:28,240 --> 00:00:32,719
discussion the generative art

00:00:30,480 --> 00:00:34,079
its principle and elements the history

00:00:32,719 --> 00:00:36,640
behind generative art

00:00:34,079 --> 00:00:38,399
the geometry algorithms and randomness

00:00:36,640 --> 00:00:40,399
that flames are generative art

00:00:38,399 --> 00:00:42,079
we'll be seeing a lot of examples using

00:00:40,399 --> 00:00:43,760
processing and python

00:00:42,079 --> 00:00:47,039
and will be ending the talk using

00:00:43,760 --> 00:00:49,600
genetic algorithm and gans

00:00:47,039 --> 00:00:51,280
so what exactly is generative art an art

00:00:49,600 --> 00:00:51,760
created through the use of an autonomous

00:00:51,280 --> 00:00:54,559
system

00:00:51,760 --> 00:00:56,239
is simply generative art generative art

00:00:54,559 --> 00:00:58,160
uses iterative commands to draw

00:00:56,239 --> 00:00:59,520
vector-based shapes to the screen

00:00:58,160 --> 00:01:01,280
most of the articulated draws

00:00:59,520 --> 00:01:03,280
inspiration from the modern art

00:01:01,280 --> 00:01:04,720
especially pop art that makes heavy use

00:01:03,280 --> 00:01:06,799
of geometric patterns

00:01:04,720 --> 00:01:08,960
an autonomous system is always required

00:01:06,799 --> 00:01:10,880
otherwise it's more of a digital art

00:01:08,960 --> 00:01:13,520
and randomness is one type of autonomous

00:01:10,880 --> 00:01:14,320
system so the design created is unique

00:01:13,520 --> 00:01:16,240
each time

00:01:14,320 --> 00:01:17,920
here the role of an artist is to design

00:01:16,240 --> 00:01:18,799
the process that includes some sort of

00:01:17,920 --> 00:01:20,720
autonomy

00:01:18,799 --> 00:01:22,000
like the artist controls the randomness

00:01:20,720 --> 00:01:23,680
and the order in the art

00:01:22,000 --> 00:01:25,520
so we can say that the elements of the

00:01:23,680 --> 00:01:27,040
art are provided by the system

00:01:25,520 --> 00:01:30,640
and the principles on which the art will

00:01:27,040 --> 00:01:32,400
be created is provided by the artist

00:01:30,640 --> 00:01:34,159
while creating an art piece one must

00:01:32,400 --> 00:01:34,400
understand and apply the building blocks

00:01:34,159 --> 00:01:36,240
of

00:01:34,400 --> 00:01:38,640
art and these are the elements and

00:01:36,240 --> 00:01:39,520
principles when we talk about elements

00:01:38,640 --> 00:01:41,360
of an art

00:01:39,520 --> 00:01:42,720
these are the things that are used to

00:01:41,360 --> 00:01:44,640
create an art piece

00:01:42,720 --> 00:01:46,960
and these can be used either

00:01:44,640 --> 00:01:48,560
individually or in combination for any

00:01:46,960 --> 00:01:50,799
art making endeavor

00:01:48,560 --> 00:01:52,320
in an art piece visual elements would be

00:01:50,799 --> 00:01:55,280
color form

00:01:52,320 --> 00:01:56,399
line shape space the randomness and the

00:01:55,280 --> 00:01:58,640
texture

00:01:56,399 --> 00:02:00,719
color is basically the hue the value

00:01:58,640 --> 00:02:03,360
which is the lightness or the darkness

00:02:00,719 --> 00:02:05,920
the intensity of the color used form is

00:02:03,360 --> 00:02:08,640
the element of art that renders a 3d

00:02:05,920 --> 00:02:10,640
art form into 2d and has some volume and

00:02:08,640 --> 00:02:12,640
could be geometric or organic

00:02:10,640 --> 00:02:14,080
the textures can be perceived as surface

00:02:12,640 --> 00:02:16,319
quality of a work

00:02:14,080 --> 00:02:17,760
of art and it defines the way an art

00:02:16,319 --> 00:02:21,120
object feels

00:02:17,760 --> 00:02:25,040
the principle is the rhythm the contrast

00:02:21,120 --> 00:02:27,120
movement proportion and harmony

00:02:25,040 --> 00:02:28,319
so the rhythm is the movement of an

00:02:27,120 --> 00:02:30,160
artwork

00:02:28,319 --> 00:02:31,680
contrast means the difference between

00:02:30,160 --> 00:02:35,360
the elements like color

00:02:31,680 --> 00:02:37,680
value texture size movement is all about

00:02:35,360 --> 00:02:40,480
how our eyes moves through the art piece

00:02:37,680 --> 00:02:41,680
and proportion means that some objects

00:02:40,480 --> 00:02:43,599
can be smaller and

00:02:41,680 --> 00:02:45,040
small objects can be bigger in an art

00:02:43,599 --> 00:02:47,040
piece

00:02:45,040 --> 00:02:48,560
and all of these together creates an art

00:02:47,040 --> 00:02:50,560
piece

00:02:48,560 --> 00:02:53,519
so in the previous slide we saw an art

00:02:50,560 --> 00:02:55,280
piece named substrate by jada tatbill

00:02:53,519 --> 00:02:56,959
and if we use all the principle that we

00:02:55,280 --> 00:02:58,480
discussed in the previous slide

00:02:56,959 --> 00:03:00,159
and put together we can also create

00:02:58,480 --> 00:03:02,080
something like this art piece

00:03:00,159 --> 00:03:03,440
that you can see here the idea behind

00:03:02,080 --> 00:03:05,120
this is pretty simple

00:03:03,440 --> 00:03:07,920
we will start with some random parts on

00:03:05,120 --> 00:03:10,239
the canvas then we start drawing lines

00:03:07,920 --> 00:03:11,599
to some random directions but as soon as

00:03:10,239 --> 00:03:13,280
we uh

00:03:11,599 --> 00:03:15,120
as soon as these lines collide with each

00:03:13,280 --> 00:03:17,920
other it starts creating new lines

00:03:15,120 --> 00:03:20,000
at an angle of 90 degree so the exciting

00:03:17,920 --> 00:03:21,440
thing about this is the emergence of art

00:03:20,000 --> 00:03:24,239
comes to be really different

00:03:21,440 --> 00:03:25,360
each time the program is done and this

00:03:24,239 --> 00:03:29,519
piece that you can see

00:03:25,360 --> 00:03:29,519
is created using python in processing

00:03:30,239 --> 00:03:33,440
so let's talk about the history of

00:03:32,080 --> 00:03:35,599
generative art

00:03:33,440 --> 00:03:37,200
in analog art which is the art

00:03:35,599 --> 00:03:38,879
manipulated by hand

00:03:37,200 --> 00:03:40,959
complexity and scale requires

00:03:38,879 --> 00:03:43,360
exponentially more effort and time

00:03:40,959 --> 00:03:45,440
computer excels at repeating processes

00:03:43,360 --> 00:03:47,040
near endlessly without exhaustion

00:03:45,440 --> 00:03:49,200
as you will see the ease at which

00:03:47,040 --> 00:03:51,040
computers can generate complex images

00:03:49,200 --> 00:03:52,799
contributes greatly to the aesthetic of

00:03:51,040 --> 00:03:55,360
generative art

00:03:52,799 --> 00:03:57,439
one major challenge faced by the early

00:03:55,360 --> 00:03:59,840
generative artists was the limitation of

00:03:57,439 --> 00:04:00,640
output devices so the primary source at

00:03:59,840 --> 00:04:02,879
those time

00:04:00,640 --> 00:04:03,920
was a plotter a mechanical device

00:04:02,879 --> 00:04:07,280
holding a pin

00:04:03,920 --> 00:04:08,959
host movement were controlled by the um

00:04:07,280 --> 00:04:10,720
controlled by the instructions that were

00:04:08,959 --> 00:04:12,720
programmed in the computer

00:04:10,720 --> 00:04:14,480
plotter drawings were typically black

00:04:12,720 --> 00:04:16,479
and white on paper

00:04:14,480 --> 00:04:18,160
and as such most of the early works

00:04:16,479 --> 00:04:20,560
produced was black and white

00:04:18,160 --> 00:04:22,320
even after the printers began to be used

00:04:20,560 --> 00:04:24,000
one of the first artists to produce

00:04:22,320 --> 00:04:24,639
plotter drawings in color was friday

00:04:24,000 --> 00:04:26,479
nick

00:04:24,639 --> 00:04:28,880
and whose art piece can be seen here

00:04:26,479 --> 00:04:32,320
which is known as home chip block

00:04:28,880 --> 00:04:34,479
partly in 1965

00:04:32,320 --> 00:04:35,919
so this piece of art named homage is

00:04:34,479 --> 00:04:38,880
typically based on a

00:04:35,919 --> 00:04:39,919
painting by paulie entitled high roads

00:04:38,880 --> 00:04:42,639
and by roads

00:04:39,919 --> 00:04:43,440
frederick took exp exploration to

00:04:42,639 --> 00:04:45,120
proportion

00:04:43,440 --> 00:04:46,800
and the relationship between the

00:04:45,120 --> 00:04:48,560
horizontal and vertical lines

00:04:46,800 --> 00:04:51,120
and ellipses as the backbone of the

00:04:48,560 --> 00:04:51,600
piece he has a lot of randomness on the

00:04:51,120 --> 00:04:54,080
size

00:04:51,600 --> 00:04:55,199
scale and proportion of lines and

00:04:54,080 --> 00:04:57,520
ellipses uh

00:04:55,199 --> 00:04:59,199
on a pen plotter and if we make such

00:04:57,520 --> 00:05:00,240
similar decision and put the commands

00:04:59,199 --> 00:05:02,240
into the system

00:05:00,240 --> 00:05:04,000
we'll get something similar outputs that

00:05:02,240 --> 00:05:07,680
you can see on the screen

00:05:04,000 --> 00:05:10,960
uh these are the replicas of homage

00:05:07,680 --> 00:05:12,560
created in processing in python one of

00:05:10,960 --> 00:05:14,160
the earliest and best known pieces of

00:05:12,560 --> 00:05:17,840
generative art is scotter

00:05:14,160 --> 00:05:19,759
by george nice in 1968. scatter starts

00:05:17,840 --> 00:05:22,000
with a standard row of 12 square

00:05:19,759 --> 00:05:22,960
and gradually increases the magnitude of

00:05:22,000 --> 00:05:24,880
randomness

00:05:22,960 --> 00:05:26,560
in both rotation and location of the

00:05:24,880 --> 00:05:29,039
sequence as we move down

00:05:26,560 --> 00:05:31,360
to those generative art is one of the

00:05:29,039 --> 00:05:32,240
best option to create such art pieces

00:05:31,360 --> 00:05:34,560
because

00:05:32,240 --> 00:05:36,160
imagine for the second that you draw the

00:05:34,560 --> 00:05:38,000
image above yourself

00:05:36,160 --> 00:05:39,600
using a pen and a piece of paper it

00:05:38,000 --> 00:05:41,360
might take you an hour

00:05:39,600 --> 00:05:42,960
on the other hand providing some simple

00:05:41,360 --> 00:05:44,800
commands to the computer

00:05:42,960 --> 00:05:46,560
we can create thousands of such pieces

00:05:44,800 --> 00:05:48,800
in a couple of minutes and with a unique

00:05:46,560 --> 00:05:50,880
touch each time

00:05:48,800 --> 00:05:52,880
these two art pieces are created by

00:05:50,880 --> 00:05:53,520
weather malnour who's a french media

00:05:52,880 --> 00:05:55,680
artist

00:05:53,520 --> 00:05:57,120
she is one of the women pioneers in the

00:05:55,680 --> 00:05:58,800
field of generative art

00:05:57,120 --> 00:06:00,400
the majority of people in those early

00:05:58,800 --> 00:06:03,199
decades of computing

00:06:00,400 --> 00:06:05,199
had little to no contact with computers

00:06:03,199 --> 00:06:06,160
or frame of reference outside of science

00:06:05,199 --> 00:06:09,199
fiction

00:06:06,160 --> 00:06:11,120
against this backdrop a large number of

00:06:09,199 --> 00:06:13,039
female genitive artists emerged

00:06:11,120 --> 00:06:15,919
and making key contributions to the

00:06:13,039 --> 00:06:18,160
craft and the community

00:06:15,919 --> 00:06:21,280
this art piece is called florida and

00:06:18,160 --> 00:06:23,360
it's created by john maida in 1990s

00:06:21,280 --> 00:06:25,280
john mita is another famous personality

00:06:23,360 --> 00:06:27,039
in the field of generative art

00:06:25,280 --> 00:06:28,880
he was the president of rhode island

00:06:27,039 --> 00:06:30,000
school of design and professor at mit

00:06:28,880 --> 00:06:32,160
media labs

00:06:30,000 --> 00:06:33,680
he's created a lot of awesome artworks

00:06:32,160 --> 00:06:34,160
and i've worked with people like ben

00:06:33,680 --> 00:06:37,600
cray

00:06:34,160 --> 00:06:38,240
ben fry and casey these and fry and

00:06:37,600 --> 00:06:42,000
these took

00:06:38,240 --> 00:06:44,160
medas uh design by number and eventually

00:06:42,000 --> 00:06:45,840
build their own free platform that could

00:06:44,160 --> 00:06:48,400
be shared outside of universities

00:06:45,840 --> 00:06:51,280
and used by anyone with an interest of

00:06:48,400 --> 00:06:53,840
learning to sketch with code

00:06:51,280 --> 00:06:55,599
and this turned out to be the birth of

00:06:53,840 --> 00:06:57,680
processing language

00:06:55,599 --> 00:06:59,440
ben fry and k series are the founder and

00:06:57,680 --> 00:07:01,199
who have been working on processing over

00:06:59,440 --> 00:07:03,520
the last 19 years

00:07:01,199 --> 00:07:06,080
and it has been the preferred platform

00:07:03,520 --> 00:07:08,639
for the best known generative artist

00:07:06,080 --> 00:07:10,400
processing is basically a programming

00:07:08,639 --> 00:07:11,440
language an environment built for the

00:07:10,400 --> 00:07:13,680
media arts

00:07:11,440 --> 00:07:15,360
communities it is created to teach

00:07:13,680 --> 00:07:17,440
fundamentals of computer programming

00:07:15,360 --> 00:07:20,560
within the media arts context

00:07:17,440 --> 00:07:22,560
and to serve as a software sketchbook

00:07:20,560 --> 00:07:24,000
and it's been used by majority of

00:07:22,560 --> 00:07:26,479
students artists

00:07:24,000 --> 00:07:28,800
designers programmers architects and a

00:07:26,479 --> 00:07:31,199
lot of professionals for production

00:07:28,800 --> 00:07:32,080
currently processing is available in

00:07:31,199 --> 00:07:34,800
java mode

00:07:32,080 --> 00:07:36,639
javascript python raspberry pi and

00:07:34,800 --> 00:07:39,039
android mode

00:07:36,639 --> 00:07:40,319
and in this tutorial we'll be seeing a

00:07:39,039 --> 00:07:44,720
lot of examples

00:07:40,319 --> 00:07:47,440
using processing and pi kaido so let's

00:07:44,720 --> 00:07:49,680
start by checking out examples that are

00:07:47,440 --> 00:07:52,080
using mathematics and algorithms

00:07:49,680 --> 00:07:54,319
we'll see how we can create art pieces

00:07:52,080 --> 00:07:58,160
using simple mathematical functions like

00:07:54,319 --> 00:08:00,080
noise trigonometry we can use randomness

00:07:58,160 --> 00:08:03,759
then we'll be using a lot of colors

00:08:00,080 --> 00:08:03,759
filter methods and shadows

00:08:04,000 --> 00:08:07,120
so for any art piece in generative art

00:08:06,240 --> 00:08:10,479
randomness

00:08:07,120 --> 00:08:12,800
is a major factor and we need some

00:08:10,479 --> 00:08:14,240
method that provides us with a floating

00:08:12,800 --> 00:08:14,720
point number floating random point

00:08:14,240 --> 00:08:16,400
number

00:08:14,720 --> 00:08:18,240
so random method differs in different

00:08:16,400 --> 00:08:18,879
programming languages but the main

00:08:18,240 --> 00:08:21,039
objective

00:08:18,879 --> 00:08:22,879
is to provide us a random floating point

00:08:21,039 --> 00:08:25,440
number between zero and one

00:08:22,879 --> 00:08:27,120
and if we plot uh various random numbers

00:08:25,440 --> 00:08:30,080
generated over a period of time

00:08:27,120 --> 00:08:31,520
and plotted a graph we'll see some

00:08:30,080 --> 00:08:34,240
something similar like this

00:08:31,520 --> 00:08:35,120
where each random number has no

00:08:34,240 --> 00:08:36,880
relationship

00:08:35,120 --> 00:08:39,039
with the previously randomly generated

00:08:36,880 --> 00:08:41,440
number so if you want to generate

00:08:39,039 --> 00:08:42,719
random numbers in processing we can

00:08:41,440 --> 00:08:45,360
simply call the function

00:08:42,719 --> 00:08:47,279
random and which will be returning the

00:08:45,360 --> 00:08:49,120
value the floating value between

00:08:47,279 --> 00:08:51,519
the floating random value between zero

00:08:49,120 --> 00:08:54,000
and one which excludes one

00:08:51,519 --> 00:08:55,200
and we can also provide a minimum and

00:08:54,000 --> 00:08:58,480
maximum

00:08:55,200 --> 00:09:00,240
so by providing a minimum maximum as a

00:08:58,480 --> 00:09:02,959
parameter will be

00:09:00,240 --> 00:09:03,839
getting a value between the minimum and

00:09:02,959 --> 00:09:06,240
the maximum which

00:09:03,839 --> 00:09:07,360
excludes a maximum value and simply

00:09:06,240 --> 00:09:09,360
providing a single

00:09:07,360 --> 00:09:10,560
value in the random function will be

00:09:09,360 --> 00:09:12,560
returning a value

00:09:10,560 --> 00:09:14,000
random value between zero and one and if

00:09:12,560 --> 00:09:16,720
you're not using processing

00:09:14,000 --> 00:09:18,720
you can simply use a random module in

00:09:16,720 --> 00:09:20,399
python

00:09:18,720 --> 00:09:22,720
before we move forward and start

00:09:20,399 --> 00:09:23,760
exploring art pieces that uses vector

00:09:22,720 --> 00:09:26,320
operations

00:09:23,760 --> 00:09:28,480
shapes and other examples we need to

00:09:26,320 --> 00:09:30,160
understand how exactly a canvas looks

00:09:28,480 --> 00:09:31,200
like when we are working on a generative

00:09:30,160 --> 00:09:33,519
art piece

00:09:31,200 --> 00:09:35,760
so the canvas it's like a 2d cartesian

00:09:33,519 --> 00:09:36,880
plane but each point can be considered

00:09:35,760 --> 00:09:38,640
as a vector

00:09:36,880 --> 00:09:40,640
here we are talking about a vector in a

00:09:38,640 --> 00:09:42,080
2d cartesian plane which is the distance

00:09:40,640 --> 00:09:43,920
between two points

00:09:42,080 --> 00:09:45,600
as you see on the right hand side we

00:09:43,920 --> 00:09:48,959
have a cartesian plane

00:09:45,600 --> 00:09:52,320
and the point is denoted by x comma y

00:09:48,959 --> 00:09:54,720
where x comma y stores instructions

00:09:52,320 --> 00:09:56,240
basically on how to get there from the

00:09:54,720 --> 00:09:58,000
origin to that point

00:09:56,240 --> 00:09:59,519
we can further use linear algebra

00:09:58,000 --> 00:10:01,600
operations to perform

00:09:59,519 --> 00:10:03,360
actions like scaling linear

00:10:01,600 --> 00:10:05,200
transformations notations

00:10:03,360 --> 00:10:08,800
similarly we can create a line from a

00:10:05,200 --> 00:10:10,399
point to the other on our canvas

00:10:08,800 --> 00:10:12,480
and if you want to create a point in

00:10:10,399 --> 00:10:13,680
line in processing it's pretty simple

00:10:12,480 --> 00:10:15,839
and straightforward

00:10:13,680 --> 00:10:16,720
we just use the function inbuilt

00:10:15,839 --> 00:10:19,040
function point

00:10:16,720 --> 00:10:20,720
providing two parameters x and y which

00:10:19,040 --> 00:10:21,920
are the x and y coordinates from the

00:10:20,720 --> 00:10:24,959
origin

00:10:21,920 --> 00:10:26,160
and if you're using the 3d canvas we can

00:10:24,959 --> 00:10:28,240
provide x y z

00:10:26,160 --> 00:10:29,440
coordinates if you want to find a

00:10:28,240 --> 00:10:32,560
distance between

00:10:29,440 --> 00:10:34,959
two points we'll be simply using dist

00:10:32,560 --> 00:10:36,640
and providing four parameters x one

00:10:34,959 --> 00:10:38,320
comma y one which is the

00:10:36,640 --> 00:10:39,839
coordinates of the first point and x two

00:10:38,320 --> 00:10:41,200
comma y two which is the coordinates for

00:10:39,839 --> 00:10:43,440
the second part

00:10:41,200 --> 00:10:44,560
similarly we can create a line between

00:10:43,440 --> 00:10:48,000
those two points

00:10:44,560 --> 00:10:50,240
by using line and providing the

00:10:48,000 --> 00:10:52,800
two points coordinates x1 comma y1 and

00:10:50,240 --> 00:10:55,120
x2 comma y2

00:10:52,800 --> 00:10:56,880
this will create a line but to show the

00:10:55,120 --> 00:10:57,680
line on this canvas we need to have a

00:10:56,880 --> 00:11:00,640
stroke

00:10:57,680 --> 00:11:01,200
and a color so we'll be using the stroke

00:11:00,640 --> 00:11:03,680
function

00:11:01,200 --> 00:11:05,760
which will which takes a color parameter

00:11:03,680 --> 00:11:09,040
and the color can be a hex value

00:11:05,760 --> 00:11:09,519
or rgb value or an hsb value and we can

00:11:09,040 --> 00:11:11,760
also

00:11:09,519 --> 00:11:13,519
manipulate the width of the thickness of

00:11:11,760 --> 00:11:15,360
the stroke of the line

00:11:13,519 --> 00:11:16,800
by using stroke weight and probably by

00:11:15,360 --> 00:11:19,360
providing a parameter

00:11:16,800 --> 00:11:20,240
similarly we can use pi kaido to draw

00:11:19,360 --> 00:11:22,079
lines

00:11:20,240 --> 00:11:24,480
by using context which is basically a

00:11:22,079 --> 00:11:26,000
canvas so context that set underscore

00:11:24,480 --> 00:11:27,920
line underscore width

00:11:26,000 --> 00:11:29,120
and providing the width of the line

00:11:27,920 --> 00:11:32,480
which is the thickness

00:11:29,120 --> 00:11:34,079
and then in in picado it works in this

00:11:32,480 --> 00:11:36,800
way like we just first tell

00:11:34,079 --> 00:11:37,839
the canvas to move to this point and

00:11:36,800 --> 00:11:40,160
from that point

00:11:37,839 --> 00:11:42,079
we can create a line to the other point

00:11:40,160 --> 00:11:44,480
so we can simply use move underscore two

00:11:42,079 --> 00:11:46,320
to the first point uh coordinates and

00:11:44,480 --> 00:11:47,040
from there we can use line underscore

00:11:46,320 --> 00:11:50,560
two

00:11:47,040 --> 00:11:52,480
to move to the second uh the second

00:11:50,560 --> 00:11:55,200
point and create a line in between them

00:11:52,480 --> 00:11:56,240
and even and in the last we can just use

00:11:55,200 --> 00:11:59,120
context at stroke

00:11:56,240 --> 00:12:01,440
to create a line in between those two

00:11:59,120 --> 00:12:04,560
points

00:12:01,440 --> 00:12:07,519
so these art pieces have been using

00:12:04,560 --> 00:12:09,120
by simple lines and dots of different

00:12:07,519 --> 00:12:11,519
thickness and intensity

00:12:09,120 --> 00:12:13,279
on the left hand side i have placed

00:12:11,519 --> 00:12:14,639
vertical lines of different lengths and

00:12:13,279 --> 00:12:17,440
different opacity

00:12:14,639 --> 00:12:18,399
along with dots at random positions to

00:12:17,440 --> 00:12:21,920
give it a nice

00:12:18,399 --> 00:12:24,160
noisy background on the right hand side

00:12:21,920 --> 00:12:27,360
in a single vertical column there are

00:12:24,160 --> 00:12:27,360
number of small lines

00:12:27,440 --> 00:12:31,920
uh which uses a large set of color

00:12:30,240 --> 00:12:35,040
palettes and have randomly used the

00:12:31,920 --> 00:12:35,040
colors to fill the stroke

00:12:35,839 --> 00:12:40,800
instead of using simple straight lines

00:12:38,399 --> 00:12:42,639
we can also use vector operations

00:12:40,800 --> 00:12:44,320
on the left hand side it consists of

00:12:42,639 --> 00:12:46,560
dots on the horizontal line

00:12:44,320 --> 00:12:47,839
and the dots move to and fro as if the

00:12:46,560 --> 00:12:49,600
wind is blowing

00:12:47,839 --> 00:12:52,000
this could be achieved by placing dots

00:12:49,600 --> 00:12:53,920
on a straight horizontal path

00:12:52,000 --> 00:12:55,839
we continue this from top to bottom for

00:12:53,920 --> 00:12:58,959
a number of times

00:12:55,839 --> 00:13:01,200
uh then instead of adding the points as

00:12:58,959 --> 00:13:02,880
a variable position we can create a p

00:13:01,200 --> 00:13:04,639
vector which is an inbuilt function in

00:13:02,880 --> 00:13:06,079
processing which is a collection of

00:13:04,639 --> 00:13:08,079
values that describe the relative

00:13:06,079 --> 00:13:10,560
position in space so we can change its

00:13:08,079 --> 00:13:12,160
position at any moment of time

00:13:10,560 --> 00:13:14,480
so we can have other vectors like

00:13:12,160 --> 00:13:16,720
velocity and acceleration vector

00:13:14,480 --> 00:13:17,920
as we know velocity depends on

00:13:16,720 --> 00:13:20,560
acceleration and the

00:13:17,920 --> 00:13:22,320
position depends on velocity a change in

00:13:20,560 --> 00:13:23,920
these vectors would eventually bring a

00:13:22,320 --> 00:13:26,399
change in the position vector

00:13:23,920 --> 00:13:27,040
so by doing these vector operations by

00:13:26,399 --> 00:13:28,880
changing the

00:13:27,040 --> 00:13:30,720
changing the value of changing the small

00:13:28,880 --> 00:13:33,279
value and acceleration

00:13:30,720 --> 00:13:34,639
and velocity we can create a virtual

00:13:33,279 --> 00:13:36,399
wind effect and

00:13:34,639 --> 00:13:38,160
the points move in the direction of the

00:13:36,399 --> 00:13:40,880
wind on the right hand side

00:13:38,160 --> 00:13:42,560
instead of using the above mentioned

00:13:40,880 --> 00:13:44,639
operations on the which we are using on

00:13:42,560 --> 00:13:46,560
the left hand side image

00:13:44,639 --> 00:13:48,240
we can simply use the curve vertex which

00:13:46,560 --> 00:13:50,480
is an inbuilt function processing

00:13:48,240 --> 00:13:51,839
that creates a curve between two line

00:13:50,480 --> 00:13:55,360
and we can

00:13:51,839 --> 00:13:57,760
use two points and create a curve

00:13:55,360 --> 00:13:58,639
so curve vertex is an implementation of

00:13:57,760 --> 00:14:00,880
a cadmium

00:13:58,639 --> 00:14:02,399
rom spline algorithm which is a type of

00:14:00,880 --> 00:14:04,720
interpolating spline

00:14:02,399 --> 00:14:05,920
that is a curve base that basically goes

00:14:04,720 --> 00:14:08,079
to its point

00:14:05,920 --> 00:14:09,519
in processing it specifies the vertex

00:14:08,079 --> 00:14:11,199
coordinates for curves

00:14:09,519 --> 00:14:12,720
so this function can only be used in

00:14:11,199 --> 00:14:16,880
between begin shape

00:14:12,720 --> 00:14:18,800
with no more parameters in in in shape

00:14:16,880 --> 00:14:21,040
so these function the begin shape in the

00:14:18,800 --> 00:14:23,760
n shape basically allows creating

00:14:21,040 --> 00:14:25,680
complex form on a cartesian plane

00:14:23,760 --> 00:14:27,839
the second we have bezier curves which

00:14:25,680 --> 00:14:29,760
is a versatile mathematical curve in our

00:14:27,839 --> 00:14:31,600
vector graphics

00:14:29,760 --> 00:14:33,360
this is similar to what we use in our

00:14:31,600 --> 00:14:35,199
vector graphics tool like illustrator

00:14:33,360 --> 00:14:36,720
which are defined by a series of anchor

00:14:35,199 --> 00:14:39,360
and control points

00:14:36,720 --> 00:14:42,399
if we use the curve vertex and v0 curves

00:14:39,360 --> 00:14:44,079
at a single point or two points

00:14:42,399 --> 00:14:45,519
over a period of time we can get a

00:14:44,079 --> 00:14:46,720
similar scribble like effect on the

00:14:45,519 --> 00:14:49,360
canvas that we can see

00:14:46,720 --> 00:14:49,360
in our piece

00:14:50,000 --> 00:14:53,120
so let's see how we can create some

00:14:51,600 --> 00:14:54,800
basic shapes and we'll see

00:14:53,120 --> 00:14:56,480
how we can use this basic shapes to

00:14:54,800 --> 00:14:58,160
create generative art

00:14:56,480 --> 00:15:00,079
so if you want to create an ellipse we

00:14:58,160 --> 00:15:02,079
can simply use the ellipse function by

00:15:00,079 --> 00:15:05,279
providing four parameters a b

00:15:02,079 --> 00:15:08,240
c and d but a and b are the uh

00:15:05,279 --> 00:15:08,560
point coordinates on the canvas and c

00:15:08,240 --> 00:15:10,720
and d

00:15:08,560 --> 00:15:12,320
are the width and the height and if you

00:15:10,720 --> 00:15:15,600
want to create a rectangle

00:15:12,320 --> 00:15:17,920
we can provide uh eight values or

00:15:15,600 --> 00:15:19,120
on which four are the compulsive value

00:15:17,920 --> 00:15:21,120
which are like a and b

00:15:19,120 --> 00:15:22,880
are the coordinates of the points a

00:15:21,120 --> 00:15:25,040
comma b and c and d

00:15:22,880 --> 00:15:26,880
are the width and the height and if you

00:15:25,040 --> 00:15:29,920
want to add vdi to the

00:15:26,880 --> 00:15:30,560
radius for the corners we can either if

00:15:29,920 --> 00:15:32,399
you want

00:15:30,560 --> 00:15:33,839
the same radii on all four corners we

00:15:32,399 --> 00:15:37,120
can simply provide a value

00:15:33,839 --> 00:15:37,920
c radius vdi and if you want different

00:15:37,120 --> 00:15:41,199
values

00:15:37,920 --> 00:15:43,440
at different uh of different radius and

00:15:41,199 --> 00:15:44,480
each corner we can either provide the

00:15:43,440 --> 00:15:47,600
value of

00:15:44,480 --> 00:15:50,079
tl tr br and

00:15:47,600 --> 00:15:51,040
b l which is the top left top right

00:15:50,079 --> 00:15:53,519
bottom right and

00:15:51,040 --> 00:15:55,920
bottom left and if we want to create a

00:15:53,519 --> 00:15:58,079
square we can simply use x and y

00:15:55,920 --> 00:15:59,519
uh like we can provide three parameters

00:15:58,079 --> 00:16:01,839
x y are the

00:15:59,519 --> 00:16:03,040
coordinates of x comma y from where

00:16:01,839 --> 00:16:04,720
we'll start the square

00:16:03,040 --> 00:16:06,800
and c is the length of the side of a

00:16:04,720 --> 00:16:09,279
square similarly we can

00:16:06,800 --> 00:16:12,320
i use pi chiral to create shapes that we

00:16:09,279 --> 00:16:12,320
can see on the bottom

00:16:12,560 --> 00:16:15,680
line interpolation is a very important

00:16:14,399 --> 00:16:17,680
function when we are working with

00:16:15,680 --> 00:16:19,440
creative coding or generative art

00:16:17,680 --> 00:16:20,880
it calculates a distance between two

00:16:19,440 --> 00:16:23,600
numbers at a specific

00:16:20,880 --> 00:16:25,600
increment and the amount is the amount

00:16:23,600 --> 00:16:26,240
to interpolate between the two points

00:16:25,600 --> 00:16:28,079
say

00:16:26,240 --> 00:16:30,480
if we want to interpolate between 0 and

00:16:28,079 --> 00:16:32,720
1 0 is equal to the first point 0.1 is

00:16:30,480 --> 00:16:34,000
very near to the first point 0.5 is the

00:16:32,720 --> 00:16:36,959
half in between

00:16:34,000 --> 00:16:37,839
it moves on so the love function is a

00:16:36,959 --> 00:16:39,279
inbuilt function

00:16:37,839 --> 00:16:41,680
processing which is convenient for

00:16:39,279 --> 00:16:43,920
creating motion along a straight path

00:16:41,680 --> 00:16:46,160
and for drawing dotted lines

00:16:43,920 --> 00:16:47,360
and if you don't want to use processing

00:16:46,160 --> 00:16:49,040
and you don't want to use an inbuilt

00:16:47,360 --> 00:16:50,880
function you can also

00:16:49,040 --> 00:16:52,720
create your own function as love which

00:16:50,880 --> 00:16:53,519
will take three parameters start stop

00:16:52,720 --> 00:16:56,320
and amount

00:16:53,519 --> 00:16:58,240
and will return something like start

00:16:56,320 --> 00:17:01,440
multiplied by one minus amount

00:16:58,240 --> 00:17:03,600
plus n into amount

00:17:01,440 --> 00:17:05,520
so we can use those simple shapes that

00:17:03,600 --> 00:17:07,520
we discussed in the previous slides

00:17:05,520 --> 00:17:08,959
here in these art pieces i'm using

00:17:07,520 --> 00:17:12,079
simple rectangles

00:17:08,959 --> 00:17:14,559
with various uh random widths

00:17:12,079 --> 00:17:16,480
and using a large color palette and

00:17:14,559 --> 00:17:18,400
randomly using those colors and filling

00:17:16,480 --> 00:17:20,079
those rectangles and

00:17:18,400 --> 00:17:22,799
eventually we get something like this

00:17:20,079 --> 00:17:24,959
and as these pieces are using randomly

00:17:22,799 --> 00:17:26,000
random width so each time you run the

00:17:24,959 --> 00:17:28,160
program

00:17:26,000 --> 00:17:30,000
you'll get completely different art

00:17:28,160 --> 00:17:33,679
pieces

00:17:30,000 --> 00:17:36,320
you can also uh get inspiration from the

00:17:33,679 --> 00:17:37,120
another artist's paintings like this on

00:17:36,320 --> 00:17:40,400
the left hand side

00:17:37,120 --> 00:17:42,320
is an art piece by piet mondrian

00:17:40,400 --> 00:17:43,600
it's named composition two in the red

00:17:42,320 --> 00:17:46,320
blue and yellow

00:17:43,600 --> 00:17:48,320
and it's just using random shapes like

00:17:46,320 --> 00:17:50,480
rectangles and squares and lines

00:17:48,320 --> 00:17:51,919
and on the right hand side i've used a

00:17:50,480 --> 00:17:54,640
similar procedure of

00:17:51,919 --> 00:17:56,400
using shapes like rectangles and squares

00:17:54,640 --> 00:17:56,960
and created a similar art piece which

00:17:56,400 --> 00:18:00,640
uses

00:17:56,960 --> 00:18:02,880
randomly aligned lines

00:18:00,640 --> 00:18:04,320
rectangles and using a large color

00:18:02,880 --> 00:18:06,720
palette

00:18:04,320 --> 00:18:07,760
and filling the rectangles and squares

00:18:06,720 --> 00:18:09,919
and also using

00:18:07,760 --> 00:18:11,039
a noisy background using the polynomials

00:18:09,919 --> 00:18:12,880
function which you'll see in the next

00:18:11,039 --> 00:18:14,640
slide

00:18:12,880 --> 00:18:16,400
so ken pollin developed the noise

00:18:14,640 --> 00:18:18,720
function while working on the original

00:18:16,400 --> 00:18:20,960
tron movie in the 1980s

00:18:18,720 --> 00:18:22,799
he used to create procedural text of a

00:18:20,960 --> 00:18:24,559
computer-generated effects

00:18:22,799 --> 00:18:26,320
unlike a random number generator that

00:18:24,559 --> 00:18:27,120
generates a random number between two

00:18:26,320 --> 00:18:28,720
numbers

00:18:27,120 --> 00:18:30,400
and there's no relationship between the

00:18:28,720 --> 00:18:32,080
last number produced and shown no

00:18:30,400 --> 00:18:34,000
discernible pattern

00:18:32,080 --> 00:18:35,919
on the other hand pulling noise the

00:18:34,000 --> 00:18:36,799
number generated has a relationship

00:18:35,919 --> 00:18:38,559
between

00:18:36,799 --> 00:18:41,200
the last number generated and is more

00:18:38,559 --> 00:18:42,640
organic in appearance because

00:18:41,200 --> 00:18:44,480
the numbers which are generated using

00:18:42,640 --> 00:18:45,520
perlin noise are naturally ordered

00:18:44,480 --> 00:18:48,720
sequences

00:18:45,520 --> 00:18:52,320
of pseudo random numbers that if you

00:18:48,720 --> 00:18:55,200
generate a lot of polynomials

00:18:52,320 --> 00:18:56,960
numbers and plot a graph you will see

00:18:55,200 --> 00:18:59,440
that the graph is more smooth and

00:18:56,960 --> 00:18:59,440
organic

00:18:59,840 --> 00:19:03,919
in processing using uh generating volume

00:19:02,559 --> 00:19:06,640
noise

00:19:03,919 --> 00:19:08,000
is pretty simple you can simply call the

00:19:06,640 --> 00:19:09,600
noise function which returns the

00:19:08,000 --> 00:19:10,559
polynomial's value at specified

00:19:09,600 --> 00:19:13,120
coordinates

00:19:10,559 --> 00:19:14,720
it can compute 1d 2d and 3d noise

00:19:13,120 --> 00:19:17,039
depending on the number of coordinates

00:19:14,720 --> 00:19:18,400
given the resulting value will always be

00:19:17,039 --> 00:19:20,720
between 0 and 1

00:19:18,400 --> 00:19:22,960
where xyz are the number in those

00:19:20,720 --> 00:19:24,640
coordinates in noise space

00:19:22,960 --> 00:19:26,400
another function another important

00:19:24,640 --> 00:19:27,760
function while working with perlin noise

00:19:26,400 --> 00:19:29,760
is the nice seed

00:19:27,760 --> 00:19:31,679
so it sets the seed value for the noise

00:19:29,760 --> 00:19:33,280
function because by default

00:19:31,679 --> 00:19:35,200
noise function produces different

00:19:33,280 --> 00:19:37,760
results on each time the program is

00:19:35,200 --> 00:19:39,200
searched so it sets it to a constant

00:19:37,760 --> 00:19:40,960
single value

00:19:39,200 --> 00:19:43,120
and the third important function in

00:19:40,960 --> 00:19:44,720
processing is the noise detail which

00:19:43,120 --> 00:19:46,880
takes two parameters

00:19:44,720 --> 00:19:48,320
the first being the number of octaves to

00:19:46,880 --> 00:19:50,480
be used by the noise

00:19:48,320 --> 00:19:51,520
and the second follow factor for each

00:19:50,480 --> 00:19:53,679
octave

00:19:51,520 --> 00:19:55,440
basically it adjusts the level of

00:19:53,679 --> 00:19:56,240
details produced by the polynomials

00:19:55,440 --> 00:19:58,559
function

00:19:56,240 --> 00:20:02,400
like the intensity the fineness or maybe

00:19:58,559 --> 00:20:04,559
if you want to add a granular effect

00:20:02,400 --> 00:20:05,760
using those pauline and sim supporting

00:20:04,559 --> 00:20:08,320
or simplex noise

00:20:05,760 --> 00:20:10,159
we can create 2d field of vectors each

00:20:08,320 --> 00:20:11,520
with each pointing in a similar but

00:20:10,159 --> 00:20:13,360
different direction as its

00:20:11,520 --> 00:20:15,600
neighboring vectors and have their

00:20:13,360 --> 00:20:17,280
velocities affected by the vectors that

00:20:15,600 --> 00:20:19,039
we discussed previously

00:20:17,280 --> 00:20:20,640
depending on how we draw the particles

00:20:19,039 --> 00:20:23,520
using animation we can generate some

00:20:20,640 --> 00:20:25,440
pretty cool stuff that we can see here

00:20:23,520 --> 00:20:27,679
instead of just using purlin noise we

00:20:25,440 --> 00:20:29,919
can also use pulling uh

00:20:27,679 --> 00:20:31,440
for instead of just creating polynomials

00:20:29,919 --> 00:20:33,520
waves we can also create

00:20:31,440 --> 00:20:35,520
some noisy background not the granular

00:20:33,520 --> 00:20:36,080
effect using purlin nice as we can see

00:20:35,520 --> 00:20:39,200
here

00:20:36,080 --> 00:20:39,919
so in this art piece um i have created a

00:20:39,200 --> 00:20:43,039
noise feel

00:20:39,919 --> 00:20:45,919
and on the front uh we have a grid

00:20:43,039 --> 00:20:47,120
with a background and a noise a noisy

00:20:45,919 --> 00:20:49,360
background basically

00:20:47,120 --> 00:20:50,320
which is using the polynomiated random

00:20:49,360 --> 00:20:52,720
noise

00:20:50,320 --> 00:20:55,840
and which is eventually giving a

00:20:52,720 --> 00:20:55,840
granular effect

00:20:56,240 --> 00:21:00,799
let's see how geometry fractals and

00:20:58,000 --> 00:21:02,320
chaos and how we can use the geometrical

00:21:00,799 --> 00:21:04,640
patterns the factors

00:21:02,320 --> 00:21:06,159
in simple chaos theory to generate

00:21:04,640 --> 00:21:08,159
aesthetic art pieces

00:21:06,159 --> 00:21:09,360
on the right hand side it's a geometric

00:21:08,159 --> 00:21:12,320
pattern which looks

00:21:09,360 --> 00:21:14,320
uh pretty complex at first but if it

00:21:12,320 --> 00:21:17,760
looks closely it's just using

00:21:14,320 --> 00:21:20,400
circles of random uh radius

00:21:17,760 --> 00:21:21,440
and with no fail and just stroke over

00:21:20,400 --> 00:21:26,559
the period of time

00:21:21,440 --> 00:21:26,559
and up to some length of diameter

00:21:26,640 --> 00:21:31,760
so the very basic and famous example

00:21:30,000 --> 00:21:33,120
of geometric pattern could be the cl

00:21:31,760 --> 00:21:36,159
pencil gasket

00:21:33,120 --> 00:21:38,559
where we are recursively uh dividing the

00:21:36,159 --> 00:21:41,679
triangle and creating smaller triangles

00:21:38,559 --> 00:21:43,360
inside it so which this is basically a

00:21:41,679 --> 00:21:45,120
equilateral triangle subdivided

00:21:43,360 --> 00:21:45,760
recursively into smaller equilateral

00:21:45,120 --> 00:21:48,720
triangle

00:21:45,760 --> 00:21:49,520
with one because they call it each time

00:21:48,720 --> 00:21:52,320
this example

00:21:49,520 --> 00:21:53,280
is pretty simple which is not using any

00:21:52,320 --> 00:21:55,679
kind of fill

00:21:53,280 --> 00:21:56,880
and just we are just filling the stroke

00:21:55,679 --> 00:22:00,400
with a

00:21:56,880 --> 00:22:02,559
black color and we can like

00:22:00,400 --> 00:22:04,080
uh do small transformation in the

00:22:02,559 --> 00:22:06,480
initial state

00:22:04,080 --> 00:22:07,120
and we can modify it into something like

00:22:06,480 --> 00:22:09,440
this

00:22:07,120 --> 00:22:11,280
where we are not just filling the stroke

00:22:09,440 --> 00:22:14,480
we are filling the

00:22:11,280 --> 00:22:17,200
triangle and we are also using

00:22:14,480 --> 00:22:19,120
random values and rotating it the

00:22:17,200 --> 00:22:21,520
location we are rotating the

00:22:19,120 --> 00:22:23,200
triangles we are changing its location

00:22:21,520 --> 00:22:25,039
and instead of just using triangle we

00:22:23,200 --> 00:22:27,280
are using the curve vertex to

00:22:25,039 --> 00:22:29,679
add some sketchy effect on the outer

00:22:27,280 --> 00:22:33,039
surface

00:22:29,679 --> 00:22:35,280
this is a example of a fractal uh

00:22:33,039 --> 00:22:36,080
which looks like a flower so it's using

00:22:35,280 --> 00:22:37,520
fourth and

00:22:36,080 --> 00:22:40,240
different four different types of

00:22:37,520 --> 00:22:42,080
fractal and put together at a

00:22:40,240 --> 00:22:43,840
360 degree and together it's giving

00:22:42,080 --> 00:22:48,240
something like this effect which

00:22:43,840 --> 00:22:50,400
looks like a factor basically a flower

00:22:48,240 --> 00:22:52,080
when we talk about fractal mandible set

00:22:50,400 --> 00:22:54,559
is one of the most famous one

00:22:52,080 --> 00:22:56,240
in mandalore fractal or the mandelbrot

00:22:54,559 --> 00:22:58,400
set the more you zoom

00:22:56,240 --> 00:23:00,400
uh the more similar patterns you see and

00:22:58,400 --> 00:23:01,520
the then that makes fractals so

00:23:00,400 --> 00:23:03,600
fascinating

00:23:01,520 --> 00:23:05,679
so it is represented on a complex plane

00:23:03,600 --> 00:23:08,799
where there is a coordinate system

00:23:05,679 --> 00:23:10,400
uh and as complex number uh you can see

00:23:08,799 --> 00:23:13,280
the equation here

00:23:10,400 --> 00:23:14,320
like z equals for x plus y i where i is

00:23:13,280 --> 00:23:17,120
the complex number

00:23:14,320 --> 00:23:17,919
the i the x y axis represents the real

00:23:17,120 --> 00:23:20,159
and the z

00:23:17,919 --> 00:23:22,000
axis represents the imaginary part so we

00:23:20,159 --> 00:23:24,320
pick a point in the coordinate plane

00:23:22,000 --> 00:23:25,280
and pass it to the equation and iterate

00:23:24,320 --> 00:23:27,039
it through uh

00:23:25,280 --> 00:23:29,039
some n number of times and eventually we

00:23:27,039 --> 00:23:31,200
get the mandatory set

00:23:29,039 --> 00:23:32,960
we can use different parameters like if

00:23:31,200 --> 00:23:35,280
we touch infinity we can

00:23:32,960 --> 00:23:37,039
change the color of the set otherwise it

00:23:35,280 --> 00:23:41,039
should be black

00:23:37,039 --> 00:23:41,840
and most of the fractals are similar in

00:23:41,039 --> 00:23:45,279
nature

00:23:41,840 --> 00:23:48,799
we can also create a julia set which

00:23:45,279 --> 00:23:51,200
in some manner is pretty sim similar to

00:23:48,799 --> 00:23:54,480
the manufacturing is using them see

00:23:51,200 --> 00:23:56,320
almost similar mathematical equation

00:23:54,480 --> 00:23:58,559
if we go deeper into the manual dot set

00:23:56,320 --> 00:24:00,960
we will see the mandelbrot set is

00:23:58,559 --> 00:24:03,679
extending outwards and is creating the

00:24:00,960 --> 00:24:05,120
this bifurcation diagram this logistic

00:24:03,679 --> 00:24:07,600
map or the bifurcation diagram is

00:24:05,120 --> 00:24:10,400
basically a part of the mandelbrot set

00:24:07,600 --> 00:24:12,400
and this diagram only exists on the real

00:24:10,400 --> 00:24:13,679
line because we put only real numbers

00:24:12,400 --> 00:24:15,440
into our equation

00:24:13,679 --> 00:24:18,240
this method was the first method to

00:24:15,440 --> 00:24:20,159
generate random numbers of computers and

00:24:18,240 --> 00:24:23,360
give rise to a very famous topic called

00:24:20,159 --> 00:24:25,039
chaotic behavior and

00:24:23,360 --> 00:24:27,120
to understand this chaotic behavior is

00:24:25,039 --> 00:24:29,679
pretty simple the chaos theory means

00:24:27,120 --> 00:24:31,039
like a simple change a very small change

00:24:29,679 --> 00:24:32,799
in the initial state

00:24:31,039 --> 00:24:34,799
will result in very large difference in

00:24:32,799 --> 00:24:36,799
the final outcome see on the right hand

00:24:34,799 --> 00:24:39,120
side we are creating a fractal

00:24:36,799 --> 00:24:39,919
on the bottom left we initially created

00:24:39,120 --> 00:24:42,799
this factor

00:24:39,919 --> 00:24:46,080
with some simple parameters and changing

00:24:42,799 --> 00:24:49,360
uh the initial parameters

00:24:46,080 --> 00:24:49,919
has given the outputs which are totally

00:24:49,360 --> 00:24:53,039
different

00:24:49,919 --> 00:24:53,039
in shapes and sizes

00:24:53,360 --> 00:24:57,760
when you're talking about chaos theory

00:24:55,520 --> 00:24:59,279
attractors are the perfect example

00:24:57,760 --> 00:25:01,039
these attractors are basically

00:24:59,279 --> 00:25:02,320
mathematical functions that tend to

00:25:01,039 --> 00:25:04,080
evolve over time

00:25:02,320 --> 00:25:06,559
and are represented by coordinates in

00:25:04,080 --> 00:25:08,799
space each coordinate dependent

00:25:06,559 --> 00:25:10,720
upon the previous coordinate the change

00:25:08,799 --> 00:25:11,919
between the two coordinates are based

00:25:10,720 --> 00:25:14,159
upon

00:25:11,919 --> 00:25:15,840
mathematical equations per dimension on

00:25:14,159 --> 00:25:17,440
the left hand sides we have a long

00:25:15,840 --> 00:25:19,200
attractor in the right hand side we have

00:25:17,440 --> 00:25:21,840
a deung attractor

00:25:19,200 --> 00:25:22,799
again a small change in the initial uh

00:25:21,840 --> 00:25:24,960
state will

00:25:22,799 --> 00:25:26,320
bring a large change in the final

00:25:24,960 --> 00:25:30,080
outcome so

00:25:26,320 --> 00:25:32,159
if we change the abcd parameters

00:25:30,080 --> 00:25:33,760
uh in the initial state of the young

00:25:32,159 --> 00:25:37,120
attractor the output will be really

00:25:33,760 --> 00:25:37,120
different from what we see here

00:25:38,240 --> 00:25:42,400
let's see how we can simulate paint and

00:25:40,640 --> 00:25:44,640
how we can add some

00:25:42,400 --> 00:25:46,159
uh oil paint or the water paint effect

00:25:44,640 --> 00:25:48,320
on our canvas

00:25:46,159 --> 00:25:50,320
so to add such effects i've created

00:25:48,320 --> 00:25:53,279
three different paintings

00:25:50,320 --> 00:25:55,200
and to do this i got the inspiration

00:25:53,279 --> 00:25:56,720
from an artist named tyler hop

00:25:55,200 --> 00:25:58,640
he has a blog post where he has

00:25:56,720 --> 00:26:00,320
explained in detail how we can use a

00:25:58,640 --> 00:26:01,120
deformation technique to add such

00:26:00,320 --> 00:26:04,400
effects

00:26:01,120 --> 00:26:06,480
i've given the link on the below

00:26:04,400 --> 00:26:07,679
and to give you an overview i basically

00:26:06,480 --> 00:26:09,919
created shapes

00:26:07,679 --> 00:26:10,799
first like a polygon then started

00:26:09,919 --> 00:26:13,039
extending it

00:26:10,799 --> 00:26:15,039
edges outwards to do this recursively by

00:26:13,039 --> 00:26:17,200
passing it to a deformation

00:26:15,039 --> 00:26:18,159
function and eventually we get a very

00:26:17,200 --> 00:26:20,240
fine detail

00:26:18,159 --> 00:26:22,080
on the outer part which can be seen on

00:26:20,240 --> 00:26:24,400
the third image

00:26:22,080 --> 00:26:26,720
you can also add blur effects work with

00:26:24,400 --> 00:26:29,039
the pixels add overlay effects

00:26:26,720 --> 00:26:30,559
um maybe use pixel salting that i'm

00:26:29,039 --> 00:26:33,600
using on the first image

00:26:30,559 --> 00:26:34,400
and you will get something similar let's

00:26:33,600 --> 00:26:37,360
talk

00:26:34,400 --> 00:26:38,080
how pixel sorting works so pixel sorting

00:26:37,360 --> 00:26:40,960
is a famous

00:26:38,080 --> 00:26:42,000
uh process of isolating a horizontal or

00:26:40,960 --> 00:26:44,000
the vertical

00:26:42,000 --> 00:26:46,880
pixel in any image and sorting their

00:26:44,000 --> 00:26:49,360
position based on any number of criteria

00:26:46,880 --> 00:26:50,559
so we take an image we take its pixel we

00:26:49,360 --> 00:26:52,240
load the pixels

00:26:50,559 --> 00:26:54,000
and then we pick the original pixel

00:26:52,240 --> 00:26:54,400
position with the accessor function that

00:26:54,000 --> 00:26:56,559
we

00:26:54,400 --> 00:26:57,440
create then you pick the next pixel

00:26:56,559 --> 00:26:59,520
position

00:26:57,440 --> 00:27:01,360
change the number of signs and you will

00:26:59,520 --> 00:27:03,520
see a change in the direction

00:27:01,360 --> 00:27:05,200
then we compare it and swap the pixels

00:27:03,520 --> 00:27:08,480
according to the brightness

00:27:05,200 --> 00:27:09,200
so eventually by sorting the pixels we

00:27:08,480 --> 00:27:11,840
get something

00:27:09,200 --> 00:27:13,440
similar to these and these are created

00:27:11,840 --> 00:27:14,320
using in the artworks i've created in

00:27:13,440 --> 00:27:16,559
the past

00:27:14,320 --> 00:27:21,120
and these are another set of examples

00:27:16,559 --> 00:27:23,039
just using pixel sorting

00:27:21,120 --> 00:27:24,559
so now we can talk about genetic

00:27:23,039 --> 00:27:25,520
algorithms which is a part of

00:27:24,559 --> 00:27:28,159
evolutionary

00:27:25,520 --> 00:27:30,000
algorithms so all aspects of our life

00:27:28,159 --> 00:27:32,960
are driven by computation

00:27:30,000 --> 00:27:35,440
and algorithms how we learn play work

00:27:32,960 --> 00:27:37,520
etc given the situation we can see

00:27:35,440 --> 00:27:39,039
that generative art best reflects our

00:27:37,520 --> 00:27:40,559
time to reflect this

00:27:39,039 --> 00:27:42,640
artists have been using a technique

00:27:40,559 --> 00:27:43,840
called genetic algorithm to replicate

00:27:42,640 --> 00:27:45,440
images

00:27:43,840 --> 00:27:47,520
this is basically an optimization

00:27:45,440 --> 00:27:48,880
technique that mimics the darwinian law

00:27:47,520 --> 00:27:51,120
of natural selection

00:27:48,880 --> 00:27:52,960
and the survival of the fittest so

00:27:51,120 --> 00:27:53,679
depending on what type of problem we are

00:27:52,960 --> 00:27:55,679
working with

00:27:53,679 --> 00:27:56,960
we can we have to tailor the algorithm

00:27:55,679 --> 00:27:59,200
accordingly

00:27:56,960 --> 00:28:00,240
here it's a given example we are

00:27:59,200 --> 00:28:03,279
initially uh

00:28:00,240 --> 00:28:05,679
sitting a population with randomly

00:28:03,279 --> 00:28:07,360
random ellipses with random colors and

00:28:05,679 --> 00:28:08,240
over generation and generation it's

00:28:07,360 --> 00:28:11,279
learning

00:28:08,240 --> 00:28:13,520
uh to replicate the additional image the

00:28:11,279 --> 00:28:15,039
steps includes are the making the

00:28:13,520 --> 00:28:17,520
initial population

00:28:15,039 --> 00:28:19,840
then finding the fitness function or by

00:28:17,520 --> 00:28:22,000
assigning a fitness value for selection

00:28:19,840 --> 00:28:24,000
doing a crossover between the parents

00:28:22,000 --> 00:28:26,480
and mutating the genes

00:28:24,000 --> 00:28:28,399
even uh unless we just iteratively do

00:28:26,480 --> 00:28:29,200
this process unless we get the optimized

00:28:28,399 --> 00:28:32,159
solution

00:28:29,200 --> 00:28:34,240
here we are finding the optimized pixel

00:28:32,159 --> 00:28:37,120
value

00:28:34,240 --> 00:28:38,159
so to know generative genetic algorithms

00:28:37,120 --> 00:28:40,000
in depth

00:28:38,159 --> 00:28:43,120
uh we basically start with the initial

00:28:40,000 --> 00:28:45,360
population so that we can have our

00:28:43,120 --> 00:28:47,600
initial generation and then we can

00:28:45,360 --> 00:28:49,200
generate our further generations

00:28:47,600 --> 00:28:51,440
after that we have a termination

00:28:49,200 --> 00:28:53,760
condition which checks if the individual

00:28:51,440 --> 00:28:55,840
is the best optimal solution or not

00:28:53,760 --> 00:28:57,440
if it is not the best optimal solution

00:28:55,840 --> 00:29:00,240
for then we

00:28:57,440 --> 00:29:01,360
proceeded to the mating process as there

00:29:00,240 --> 00:29:03,600
is a large

00:29:01,360 --> 00:29:05,520
initial population we can't select all

00:29:03,600 --> 00:29:06,720
the individuals so we assign them with a

00:29:05,520 --> 00:29:08,480
fitness value

00:29:06,720 --> 00:29:11,600
such that the individuals below a

00:29:08,480 --> 00:29:13,679
specific level would be rejected

00:29:11,600 --> 00:29:15,919
here we are working with the images so

00:29:13,679 --> 00:29:17,679
we have to calculate the fitness via how

00:29:15,919 --> 00:29:20,399
different each pixel's color

00:29:17,679 --> 00:29:22,960
is its pixel value is basically we can

00:29:20,399 --> 00:29:25,360
use tournament selection method for this

00:29:22,960 --> 00:29:26,480
once we have our fit parents we do a

00:29:25,360 --> 00:29:29,520
crossover

00:29:26,480 --> 00:29:31,919
and once we have a new generation we can

00:29:29,520 --> 00:29:34,240
also check for some mutation by altering

00:29:31,919 --> 00:29:35,360
the genes of the newly created

00:29:34,240 --> 00:29:37,120
offsprings

00:29:35,360 --> 00:29:38,720
this way we get the best optimal

00:29:37,120 --> 00:29:42,000
solution over

00:29:38,720 --> 00:29:44,240
some x n number of generations and in

00:29:42,000 --> 00:29:46,799
that case the initial set of uh

00:29:44,240 --> 00:29:48,960
shapes say polygon can replicate the

00:29:46,799 --> 00:29:50,880
original image

00:29:48,960 --> 00:29:52,880
here is an example that i've created

00:29:50,880 --> 00:29:56,240
using pi game

00:29:52,880 --> 00:29:58,320
processing and python which is

00:29:56,240 --> 00:29:59,360
replicating the image on the left hand

00:29:58,320 --> 00:30:01,919
side

00:29:59,360 --> 00:30:03,120
and it's using genetic algorithms and

00:30:01,919 --> 00:30:06,399
the program was done

00:30:03,120 --> 00:30:07,200
for 500 generations and if you run the

00:30:06,399 --> 00:30:08,799
program for

00:30:07,200 --> 00:30:10,399
more than that you will get a more

00:30:08,799 --> 00:30:12,159
concise and uh

00:30:10,399 --> 00:30:14,799
proper image which looks exactly like

00:30:12,159 --> 00:30:14,799
the left one

00:30:15,279 --> 00:30:20,960
so these days artists are also using

00:30:19,120 --> 00:30:23,440
gans which is generative adversarial

00:30:20,960 --> 00:30:24,080
networks are to create new forms of art

00:30:23,440 --> 00:30:26,080
to mix

00:30:24,080 --> 00:30:27,919
different arts and create new one

00:30:26,080 --> 00:30:30,799
artists like anna ridler

00:30:27,919 --> 00:30:32,960
helena sarin robbie barrett whose art

00:30:30,799 --> 00:30:37,120
piece can be seen on the slide

00:30:32,960 --> 00:30:39,360
which is called ai fashion and

00:30:37,120 --> 00:30:40,559
they're using a gans to create new art

00:30:39,360 --> 00:30:42,799
forms these days

00:30:40,559 --> 00:30:44,960
uh it uses two neural networks which are

00:30:42,799 --> 00:30:47,120
designed to think like a human being

00:30:44,960 --> 00:30:49,039
uh the first being generator the

00:30:47,120 --> 00:30:50,399
generator that generate pictures of

00:30:49,039 --> 00:30:52,640
abstract paintings

00:30:50,399 --> 00:30:54,640
it looks at a large number of data sets

00:30:52,640 --> 00:30:55,279
of training data and tries to produce

00:30:54,640 --> 00:30:58,640
something

00:30:55,279 --> 00:31:00,240
that resembles a data but taking

00:30:58,640 --> 00:31:01,679
into account that the discriminator

00:31:00,240 --> 00:31:04,320
cannot tell it

00:31:01,679 --> 00:31:06,480
if it was produced by another network

00:31:04,320 --> 00:31:08,720
and second is the discriminator

00:31:06,480 --> 00:31:10,240
uh and discriminator is something that

00:31:08,720 --> 00:31:12,720
cannot tell the difference between the

00:31:10,240 --> 00:31:15,760
real and the fake abstract paintings

00:31:12,720 --> 00:31:19,440
uh very um simple and very concise

00:31:15,760 --> 00:31:21,200
example can be we take two pieces of art

00:31:19,440 --> 00:31:23,360
say one is a painting of horse and the

00:31:21,200 --> 00:31:26,480
second is the painting of zebra

00:31:23,360 --> 00:31:30,000
and we try to swap the faces and of

00:31:26,480 --> 00:31:34,640
each of the animal in the painting

00:31:30,000 --> 00:31:36,640
and create a new piece with a swap faces

00:31:34,640 --> 00:31:40,080
and yeah this is it thank you so much

00:31:36,640 --> 00:31:40,080
for watching the talk

00:31:47,440 --> 00:31:49,519

YouTube URL: https://www.youtube.com/watch?v=Xjv1G0suPF8


