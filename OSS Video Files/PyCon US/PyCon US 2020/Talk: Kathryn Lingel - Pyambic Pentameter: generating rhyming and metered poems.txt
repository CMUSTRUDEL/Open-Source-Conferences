Title: Talk: Kathryn Lingel - Pyambic Pentameter: generating rhyming and metered poems
Publication date: 2021-05-05
Playlist: PyCon US 2020
Description: 
	Presented by:
Kathryn Lingel

a strategy to generate a rhyme / without a human spending any time

Computers may not yet be able to write poetry with soul, but we can teach them to write poetry with style! By combining Markov chain random text generation with a pronunciation dictionary in Pythonâ€™s Natural Language ToolKit (NLTK), we can generate a poem that has both rhyme and meter.

Random text generation is a fun, beginner-friendly project with a lot of potential depth for the curious and creative. This talk will cover how to generate random writing based on a source text, as well as how to use NLTK to enhance the output, and conclude with a brand new Shakespearean sonnet!

Talk slides and code: https://github.com/katlings/pyambic-pentameter/
Captions: 
	00:00:12,469 --> 00:00:19,680
hello from Seattle PyCon I miss you but

00:00:17,490 --> 00:00:21,660
I'm also really excited to be here

00:00:19,680 --> 00:00:24,419
anyway talking to you about Thai Ambika

00:00:21,660 --> 00:00:26,369
pentameter or how to generate rhyming

00:00:24,419 --> 00:00:28,890
and metered poems with Markov chains and

00:00:26,369 --> 00:00:30,599
NLT kay and I promise we're gonna unpack

00:00:28,890 --> 00:00:33,330
that title but really what it means is

00:00:30,599 --> 00:00:36,750
that we are gonna do poetry 101 for

00:00:33,330 --> 00:00:40,290
computers so we are going to teach

00:00:36,750 --> 00:00:43,110
computers how to write a poem what kind

00:00:40,290 --> 00:00:45,660
of poem perhaps you might ask or what is

00:00:43,110 --> 00:00:48,570
a poem let's talk about that first with

00:00:45,660 --> 00:00:51,000
poetry 101 for humans so poetry

00:00:48,570 --> 00:00:54,180
encapsulates a lot of things but mostly

00:00:51,000 --> 00:00:55,530
it's about using words to create art and

00:00:54,180 --> 00:00:57,989
it moves more than just using the

00:00:55,530 --> 00:01:00,030
meanings of words to evoke beauty and

00:00:57,989 --> 00:01:01,350
emotion it's about using the properties

00:01:00,030 --> 00:01:03,210
of those words it's about using how

00:01:01,350 --> 00:01:05,250
those words sound and feel or maybe even

00:01:03,210 --> 00:01:07,590
look on the page we're gonna run through

00:01:05,250 --> 00:01:09,360
some pretty simple example poems to try

00:01:07,590 --> 00:01:13,410
to figure out what properties a computer

00:01:09,360 --> 00:01:16,259
might be able to handle here's one there

00:01:13,410 --> 00:01:19,349
was a child had a hood he liked it so

00:01:16,259 --> 00:01:21,750
much it was good this is labeled it's

00:01:19,349 --> 00:01:25,770
the first poem I ever wrote shoutout to

00:01:21,750 --> 00:01:29,340
my parents for keeping this what makes

00:01:25,770 --> 00:01:32,069
this a poem well it's got a rhythm there

00:01:29,340 --> 00:01:37,440
was a child had a hood and it rhymes

00:01:32,069 --> 00:01:41,250
hood good it started let's look at

00:01:37,440 --> 00:01:44,130
something else we all love the goose in

00:01:41,250 --> 00:01:47,580
the game who's recently wild to fame a

00:01:44,130 --> 00:01:50,550
nihilist force devoid of remorse a bird

00:01:47,580 --> 00:01:54,539
without pity or shame shoutout to the

00:01:50,550 --> 00:01:56,429
untitled goose game so this is a common

00:01:54,539 --> 00:01:59,129
form of poetry and it's a limerick and

00:01:56,429 --> 00:02:01,319
the properties of a limerick include two

00:01:59,129 --> 00:02:04,289
rhyming lines at the start that are

00:02:01,319 --> 00:02:06,599
longer two shorter lines that rhyme with

00:02:04,289 --> 00:02:09,709
each other and then one line that wraps

00:02:06,599 --> 00:02:12,239
it up and rhymes with the first lines

00:02:09,709 --> 00:02:13,739
it's got a rhythm to it we all love the

00:02:12,239 --> 00:02:16,560
goose in the game it's kind of

00:02:13,739 --> 00:02:18,540
rollicking and this form of poetry is

00:02:16,560 --> 00:02:21,450
really commonly used for humorous poems

00:02:18,540 --> 00:02:23,250
can I like this one here's another

00:02:21,450 --> 00:02:24,250
traditional form of poetry that you

00:02:23,250 --> 00:02:26,860
might recognize

00:02:24,250 --> 00:02:29,430
shall I compare thee to a summers day

00:02:26,860 --> 00:02:32,080
thou art more lovely and more temperate

00:02:29,430 --> 00:02:34,000
rough winds do shake the Darling Buds of

00:02:32,080 --> 00:02:37,140
May and summers lease hath all too short

00:02:34,000 --> 00:02:39,520
a date so this is one of Shakespeare's

00:02:37,140 --> 00:02:43,060
154 sonnets that got published as a

00:02:39,520 --> 00:02:44,860
collection and what's remarkable about

00:02:43,060 --> 00:02:47,440
every single one of these sonnets is

00:02:44,860 --> 00:02:50,320
that they all have the same format they

00:02:47,440 --> 00:02:52,870
are all fourteen lines every other line

00:02:50,320 --> 00:02:54,670
rhymes with each other and in stanzas of

00:02:52,870 --> 00:02:57,550
four lines until you get to the last two

00:02:54,670 --> 00:02:59,410
and those make a rhyming couplet every

00:02:57,550 --> 00:03:01,030
line and every poem has the same number

00:02:59,410 --> 00:03:02,830
of syllables and more than that every

00:03:01,030 --> 00:03:03,610
line in every poem has the same pattern

00:03:02,830 --> 00:03:05,890
of syllables

00:03:03,610 --> 00:03:07,690
all of them are ten syllables long and

00:03:05,890 --> 00:03:09,520
all of them are made of IMS which means

00:03:07,690 --> 00:03:11,290
that the syllable pattern goes

00:03:09,520 --> 00:03:15,070
unstressed stressed unstressed stressed

00:03:11,290 --> 00:03:17,320
shall I compare thee to a summers day so

00:03:15,070 --> 00:03:20,050
all of these one thing all of these had

00:03:17,320 --> 00:03:22,030
in common is a rhyme scheme all of these

00:03:20,050 --> 00:03:25,120
poems have multiple lines that end in

00:03:22,030 --> 00:03:27,070
the same sound and meter there's a

00:03:25,120 --> 00:03:29,320
pattern of stressed and unstressed

00:03:27,070 --> 00:03:31,450
syllables and that's consistent across

00:03:29,320 --> 00:03:34,450
the poem or at least across certain

00:03:31,450 --> 00:03:36,459
lines in the poem and this is a good

00:03:34,450 --> 00:03:38,560
sign because computers are really good

00:03:36,459 --> 00:03:40,720
at patterns and we're gonna be able to

00:03:38,560 --> 00:03:43,000
use that to teach computers to make

00:03:40,720 --> 00:03:45,720
poetry before we get there we're gonna

00:03:43,000 --> 00:03:48,370
need to teach the computer to make words

00:03:45,720 --> 00:03:50,170
so there's a lot of ways to generate

00:03:48,370 --> 00:03:52,330
random text with computers you can do

00:03:50,170 --> 00:03:53,620
anything from pick random words out of a

00:03:52,330 --> 00:03:55,330
dictionary and string them all together

00:03:53,620 --> 00:03:58,030
and hope that you get something sensible

00:03:55,330 --> 00:03:59,620
to use AI or neural-net

00:03:58,030 --> 00:04:01,209
or machine learning techniques to read

00:03:59,620 --> 00:04:03,400
thousands of pages of texts that are

00:04:01,209 --> 00:04:05,110
written by humans and generate text that

00:04:03,400 --> 00:04:08,350
looks like it based on features that the

00:04:05,110 --> 00:04:09,610
the AI identifies and we are gonna split

00:04:08,350 --> 00:04:12,400
the difference we're gonna take the

00:04:09,610 --> 00:04:14,110
Goldilocks baby bear approach and use a

00:04:12,400 --> 00:04:16,060
technique that is really easy to

00:04:14,110 --> 00:04:18,190
understand but also give some really

00:04:16,060 --> 00:04:21,609
good output and this technique is called

00:04:18,190 --> 00:04:23,830
Markov chain generation so Markov chains

00:04:21,609 --> 00:04:25,690
are based on the idea that the word

00:04:23,830 --> 00:04:28,419
order matters or at least it doesn't

00:04:25,690 --> 00:04:30,610
English the cat sat on the wall is a

00:04:28,419 --> 00:04:33,160
sentence that means something but the

00:04:30,610 --> 00:04:34,960
Sat wall on the cat might not mean the

00:04:33,160 --> 00:04:37,180
same thing and it might not even mean

00:04:34,960 --> 00:04:38,349
anything even though the words are all

00:04:37,180 --> 00:04:40,840
the same it's just the order that

00:04:38,349 --> 00:04:42,729
they're in that's different so the idea

00:04:40,840 --> 00:04:45,669
behind Markov chain text generation is

00:04:42,729 --> 00:04:49,330
that you use a source text to determine

00:04:45,669 --> 00:04:51,700
a valid word order and then you utilize

00:04:49,330 --> 00:04:55,240
that to pick words in a certain order

00:04:51,700 --> 00:04:56,740
that might make sense so I have chosen a

00:04:55,240 --> 00:04:58,360
source text in honor of the newly

00:04:56,740 --> 00:05:01,090
introduced walrus operator and this is

00:04:58,360 --> 00:05:04,270
the chorus of I am The Walrus thank you

00:05:01,090 --> 00:05:08,520
john lennon i am the eggman they are the

00:05:04,270 --> 00:05:11,620
eggmen i am the walrus goo goo goo joob

00:05:08,520 --> 00:05:14,110
so the way we're gonna use this to

00:05:11,620 --> 00:05:16,150
generate text the first thing we do is

00:05:14,110 --> 00:05:20,560
we randomly pick one of these words i've

00:05:16,150 --> 00:05:22,870
picked i then we take a look at every

00:05:20,560 --> 00:05:25,060
word that occurs in the text in this

00:05:22,870 --> 00:05:26,800
case it occurs twice in our source text

00:05:25,060 --> 00:05:31,060
and every time it's followed by the word

00:05:26,800 --> 00:05:33,810
I am so when we pick what word might

00:05:31,060 --> 00:05:37,030
come next after I it's going to be am

00:05:33,810 --> 00:05:38,800
after am we again look back to the

00:05:37,030 --> 00:05:40,539
source text every time we see the word

00:05:38,800 --> 00:05:44,500
am it's followed by the word this or a

00:05:40,539 --> 00:05:46,720
next word is the and now we take a look

00:05:44,500 --> 00:05:49,150
at where that is in the source text and

00:05:46,720 --> 00:05:50,890
we see that it occurs three times twice

00:05:49,150 --> 00:05:54,130
it's followed by the word egg and once

00:05:50,890 --> 00:05:56,050
it's followed by the word walrus so we

00:05:54,130 --> 00:05:58,000
are going to pick between egg and walrus

00:05:56,050 --> 00:05:59,330
with a 2/3 probability that the next

00:05:58,000 --> 00:06:00,800
word is going to be egg

00:05:59,330 --> 00:06:02,349
and a one-third probability that the

00:06:00,800 --> 00:06:06,050
next word is going to be walrus

00:06:02,349 --> 00:06:07,909
statistically we get egg and now when we

00:06:06,050 --> 00:06:10,310
look at egg we've got a 50-50 chance of

00:06:07,909 --> 00:06:13,520
picking man or men and in this case

00:06:10,310 --> 00:06:15,409
we've picked men so here's our new

00:06:13,520 --> 00:06:17,509
sentence I am the eggman that we

00:06:15,409 --> 00:06:20,539
generated randomly based on this source

00:06:17,509 --> 00:06:25,210
text so note that any adjacent pair of

00:06:20,539 --> 00:06:28,189
words and the egg man egg men I am

00:06:25,210 --> 00:06:30,590
they're all in the original text but the

00:06:28,189 --> 00:06:34,300
output sentence is not found there i am

00:06:30,590 --> 00:06:37,009
the eggman does not occur brand new text

00:06:34,300 --> 00:06:40,280
so we've done this in the abstract let's

00:06:37,009 --> 00:06:42,169
do this in Python we're gonna start by

00:06:40,280 --> 00:06:43,969
building a model and if you're a

00:06:42,169 --> 00:06:45,830
beginner don't be put off by this this

00:06:43,969 --> 00:06:47,210
is a really abstract concept but all it

00:06:45,830 --> 00:06:49,789
means is that we're gonna go through our

00:06:47,210 --> 00:06:51,830
text and organize the information that

00:06:49,789 --> 00:06:53,120
we find there in such a way that we're

00:06:51,830 --> 00:06:55,539
going to be able to use that information

00:06:53,120 --> 00:06:58,550
later in a way that makes it easy so

00:06:55,539 --> 00:06:59,719
what we're gonna do is we're gonna go

00:06:58,550 --> 00:07:02,719
through every word in the source text

00:06:59,719 --> 00:07:05,110
and record which words come after it so

00:07:02,719 --> 00:07:07,580
that when we're picking words randomly

00:07:05,110 --> 00:07:08,680
we are going to be able to access what

00:07:07,580 --> 00:07:14,870
comes next

00:07:08,680 --> 00:07:16,339
easily so the first thing we do is we

00:07:14,870 --> 00:07:17,810
take our source text which is just a

00:07:16,339 --> 00:07:20,029
long string of words and we split it

00:07:17,810 --> 00:07:23,029
into words by whitespace thank you

00:07:20,029 --> 00:07:24,560
Python for making this super easy we're

00:07:23,029 --> 00:07:27,440
gonna initialize our model to an empty

00:07:24,560 --> 00:07:29,839
dictionary and then for every word in

00:07:27,440 --> 00:07:32,900
our source text text except for the last

00:07:29,839 --> 00:07:34,759
word if that words not already in our

00:07:32,900 --> 00:07:36,560
model as a key we're going to edit and

00:07:34,759 --> 00:07:39,349
we're going to initialize the value to

00:07:36,560 --> 00:07:41,360
an empty array then we're going to take

00:07:39,349 --> 00:07:44,180
a look at the word that comes after this

00:07:41,360 --> 00:07:45,589
word in our list and that's why we can't

00:07:44,180 --> 00:07:46,729
use the last word because we don't know

00:07:45,589 --> 00:07:48,740
what comes after that we don't want to

00:07:46,729 --> 00:07:52,250
run off the end of the list and we're

00:07:48,740 --> 00:07:54,409
going to add that word to our model in

00:07:52,250 --> 00:07:56,389
the list then we're just gonna return it

00:07:54,409 --> 00:08:00,319
so what this looks like when we run it

00:07:56,389 --> 00:08:03,770
on our chorus of I am The Walrus is this

00:08:00,319 --> 00:08:05,750
and the information in here should look

00:08:03,770 --> 00:08:08,330
pretty familiar when you see the word I

00:08:05,750 --> 00:08:10,279
it's followed by the word am twice when

00:08:08,330 --> 00:08:11,009
you see the word that it's followed by

00:08:10,279 --> 00:08:13,619
the word egg

00:08:11,009 --> 00:08:15,479
the word egg and the word walrus and the

00:08:13,619 --> 00:08:18,449
reason we don't you Nika fie any of this

00:08:15,479 --> 00:08:20,759
is because if we just add every word as

00:08:18,449 --> 00:08:22,110
we see it then when we're randomly

00:08:20,759 --> 00:08:25,229
picking a word that comes after that

00:08:22,110 --> 00:08:27,330
we're going to kind of get for free the

00:08:25,229 --> 00:08:29,219
idea that egg occurs twice as often as

00:08:27,330 --> 00:08:32,610
walrus after the word though and that's

00:08:29,219 --> 00:08:38,550
convenient so the next step is to use

00:08:32,610 --> 00:08:39,959
this to actually generate text and we're

00:08:38,550 --> 00:08:41,370
going to start with the source text and

00:08:39,959 --> 00:08:43,380
also the number of words we need to

00:08:41,370 --> 00:08:45,990
generate in spoilers we're going to use

00:08:43,380 --> 00:08:47,670
the random module so the first thing we

00:08:45,990 --> 00:08:50,610
do is we build that model that was just

00:08:47,670 --> 00:08:53,010
in the last slide and then we randomly

00:08:50,610 --> 00:08:56,660
choose one of the words in that model or

00:08:53,010 --> 00:08:59,389
one of the keys in that dictionary and

00:08:56,660 --> 00:09:01,980
use that to initialize our output list

00:08:59,389 --> 00:09:04,350
for the number of words we want to

00:09:01,980 --> 00:09:06,089
generate we're gonna look at the last

00:09:04,350 --> 00:09:09,319
word that we generated and this is why

00:09:06,089 --> 00:09:13,529
we start with a seed word in our output

00:09:09,319 --> 00:09:16,500
we're going to randomly choose from the

00:09:13,529 --> 00:09:20,010
list of words associated with the last

00:09:16,500 --> 00:09:22,470
word in our model the next word and add

00:09:20,010 --> 00:09:25,199
that to our output and then just keep

00:09:22,470 --> 00:09:28,110
going through that until we hit

00:09:25,199 --> 00:09:29,399
something that's not in the model which

00:09:28,110 --> 00:09:30,600
means we've hit the last word and we

00:09:29,399 --> 00:09:31,589
don't know what can come after that so

00:09:30,600 --> 00:09:34,230
in that case we're just gonna break

00:09:31,589 --> 00:09:36,149
early or until we exit the loop and

00:09:34,230 --> 00:09:37,560
we've generated the number of words that

00:09:36,149 --> 00:09:41,490
we want to generate and then we return

00:09:37,560 --> 00:09:43,980
our output joined as a string so when we

00:09:41,490 --> 00:09:47,190
run this on our chorus text here's one

00:09:43,980 --> 00:09:49,709
thing we might get the eggman i am the

00:09:47,190 --> 00:09:52,050
eggman they are the walrus goo goo goo

00:09:49,709 --> 00:09:53,790
goo joob and this should look pretty

00:09:52,050 --> 00:09:56,250
familiar because it's really close to

00:09:53,790 --> 00:09:58,529
the original text it's got the same

00:09:56,250 --> 00:10:00,360
concept like Eggman Eggman walrus but

00:09:58,529 --> 00:10:03,000
it's got some unique turns a phrase they

00:10:00,360 --> 00:10:07,260
are the walrus is not it's new that's

00:10:03,000 --> 00:10:08,670
awesome so this is not the only thing

00:10:07,260 --> 00:10:11,370
you might get because we're using random

00:10:08,670 --> 00:10:13,500
because we're using random picking so

00:10:11,370 --> 00:10:16,380
something else you might get men I am

00:10:13,500 --> 00:10:19,439
the walrus goo joob or my personal

00:10:16,380 --> 00:10:23,160
favorite goo goo goo goo goo goo goo goo

00:10:19,439 --> 00:10:24,750
goo joob so this is

00:10:23,160 --> 00:10:27,000
awesome rain I can write something

00:10:24,750 --> 00:10:29,459
entirely new using the words of my

00:10:27,000 --> 00:10:31,680
favorite song or play or documentation

00:10:29,459 --> 00:10:34,230
or Twitter feed if I use a book I can

00:10:31,680 --> 00:10:36,029
get some fanfiction out of this if you

00:10:34,230 --> 00:10:37,290
combine two very different sources then

00:10:36,029 --> 00:10:39,000
you can get some really entertaining

00:10:37,290 --> 00:10:42,120
results and I would love to see what you

00:10:39,000 --> 00:10:45,449
come up with and here's where I took

00:10:42,120 --> 00:10:47,790
this I turned to my favorite natural

00:10:45,449 --> 00:10:51,540
language tool the pythons natural

00:10:47,790 --> 00:10:55,290
language toolkit or NL TK so this

00:10:51,540 --> 00:10:57,110
contains this this library contains a

00:10:55,290 --> 00:11:01,019
whole bunch of tools that are really

00:10:57,110 --> 00:11:03,089
incredibly powerful it can it has

00:11:01,019 --> 00:11:06,389
corpuses of related words like place

00:11:03,089 --> 00:11:07,769
names it has tools to help you diagram a

00:11:06,389 --> 00:11:09,420
sentence and determine what part of

00:11:07,769 --> 00:11:11,550
speech every word in a sentence is it

00:11:09,420 --> 00:11:13,230
has tools to take a sentence and help

00:11:11,550 --> 00:11:15,720
you analyze whether it's full of happy

00:11:13,230 --> 00:11:18,509
words or angry words or sad words called

00:11:15,720 --> 00:11:20,430
sentiment analysis but what I was

00:11:18,509 --> 00:11:22,860
looking for here is the Carnegie Mellon

00:11:20,430 --> 00:11:26,009
pronouncing dictionary or NLT KDOT

00:11:22,860 --> 00:11:28,439
corpus sent to CMU dict and this is a

00:11:26,009 --> 00:11:31,709
dictionary like literally in both senses

00:11:28,439 --> 00:11:32,759
of the court and that it's a list of a

00:11:31,709 --> 00:11:35,250
lot of words in the English language

00:11:32,759 --> 00:11:37,290
including like some place names brand

00:11:35,250 --> 00:11:40,560
names people names that you might not

00:11:37,290 --> 00:11:43,620
find in a formal dictionary and it's a

00:11:40,560 --> 00:11:44,459
dictionary in the Python sense so what

00:11:43,620 --> 00:11:46,980
this looks like

00:11:44,459 --> 00:11:49,110
once we import and load the dictionary

00:11:46,980 --> 00:11:51,240
and then we're gonna look up a word in

00:11:49,110 --> 00:11:52,620
it I've chosen like one of the most

00:11:51,240 --> 00:11:55,680
fabulous words in the English language

00:11:52,620 --> 00:11:57,350
Python and here's what its gonna give us

00:11:55,680 --> 00:12:00,389
it's gonna give us a list of

00:11:57,350 --> 00:12:02,880
pronunciations of that word where a

00:12:00,389 --> 00:12:06,779
pronunciation is a list of sounds in the

00:12:02,880 --> 00:12:09,149
word so when we enter Python it's going

00:12:06,779 --> 00:12:12,630
to give us the sound a representation of

00:12:09,149 --> 00:12:16,290
the sound puh followed by I hmm and

00:12:12,630 --> 00:12:20,699
that's a standardized breakdown of how

00:12:16,290 --> 00:12:23,550
to pronounce the word Python so the

00:12:20,699 --> 00:12:24,540
reason it's a list of Lists is because

00:12:23,550 --> 00:12:27,360
there might be a word that has multiple

00:12:24,540 --> 00:12:30,209
pronunciations like this one if you use

00:12:27,360 --> 00:12:31,529
this as a verb as in I need to separate

00:12:30,209 --> 00:12:33,300
you two you're going to pronounce it

00:12:31,529 --> 00:12:34,350
differently from if you use it as an

00:12:33,300 --> 00:12:36,660
adjective

00:12:34,350 --> 00:12:39,970
these two were separate thing

00:12:36,660 --> 00:12:41,590
so the way our pronunciation dictionary

00:12:39,970 --> 00:12:43,930
handles this is it gives us all of the

00:12:41,590 --> 00:12:45,910
different pronunciations so in this case

00:12:43,930 --> 00:12:51,250
the valid pronunciations of this word

00:12:45,910 --> 00:12:52,570
are separate separate or separate so

00:12:51,250 --> 00:12:56,530
most of the information in these

00:12:52,570 --> 00:12:59,470
pronunciations is the sound a et cetera

00:12:56,530 --> 00:13:01,030
but you'll also notice that some of the

00:12:59,470 --> 00:13:02,800
some of those sounds have numbers next

00:13:01,030 --> 00:13:05,380
to them and this is how the dictionary

00:13:02,800 --> 00:13:07,870
designates syllables a one means an

00:13:05,380 --> 00:13:09,910
emphasized syllable a zero means an

00:13:07,870 --> 00:13:11,650
unopposed syllable and a two means a

00:13:09,910 --> 00:13:13,690
syllable with secondary emphasis which

00:13:11,650 --> 00:13:15,490
means you kind of can emphasize it or uh

00:13:13,690 --> 00:13:18,040
mnemba size it depending on how you like

00:13:15,490 --> 00:13:21,400
and and both of them will sound okay so

00:13:18,040 --> 00:13:23,590
the first entry here separate you can

00:13:21,400 --> 00:13:26,170
say it's separate where you can say it's

00:13:23,590 --> 00:13:29,200
separate and both of those will be fine

00:13:26,170 --> 00:13:31,480
but if you try to say separate it's

00:13:29,200 --> 00:13:33,100
gonna sound different it's it's

00:13:31,480 --> 00:13:37,210
interesting to know that not every

00:13:33,100 --> 00:13:39,340
language has this concept of emphasizing

00:13:37,210 --> 00:13:43,240
and it's emphasized syllables per word

00:13:39,340 --> 00:13:45,010
like in French a word is a word and what

00:13:43,240 --> 00:13:47,530
gets emphasised depend on what depends

00:13:45,010 --> 00:13:51,070
on where in the sentence it is but in

00:13:47,530 --> 00:13:54,220
English a words syllable emphasis is

00:13:51,070 --> 00:13:55,540
part of how you pronounce it so now we

00:13:54,220 --> 00:13:56,950
have all the tools we need because we

00:13:55,540 --> 00:13:58,300
know how to generate words and we know

00:13:56,950 --> 00:14:03,250
how to pronounce those words with a

00:13:58,300 --> 00:14:04,900
computer so back to poetry so the parts

00:14:03,250 --> 00:14:07,330
from earlier that we wanted to replicate

00:14:04,900 --> 00:14:09,460
with computers or rhyme and meter and

00:14:07,330 --> 00:14:12,250
we're gonna tackle them separately let's

00:14:09,460 --> 00:14:14,800
start with rhyme so I'm not gonna lie

00:14:12,250 --> 00:14:16,690
this feels like a total attack like one

00:14:14,800 --> 00:14:18,100
of those interview questions is really

00:14:16,690 --> 00:14:19,570
horrible ones were either you see the

00:14:18,100 --> 00:14:22,750
trick immediately or you never get there

00:14:19,570 --> 00:14:24,010
so it's hard to control where you're

00:14:22,750 --> 00:14:27,280
gonna end up when you're generating

00:14:24,010 --> 00:14:28,810
words with Markov so if you want to end

00:14:27,280 --> 00:14:30,910
up on if you want to generate two

00:14:28,810 --> 00:14:32,470
separate paths and end on words that

00:14:30,910 --> 00:14:35,350
rhyme with each other you're just gonna

00:14:32,470 --> 00:14:38,680
have to get lucky at some point however

00:14:35,350 --> 00:14:40,540
it's easy to control where you start

00:14:38,680 --> 00:14:42,640
remember when we picked our first word

00:14:40,540 --> 00:14:44,890
randomly what if we didn't pick it

00:14:42,640 --> 00:14:46,720
randomly what if we picked two words

00:14:44,890 --> 00:14:48,189
that rhyme with each other and then go

00:14:46,720 --> 00:14:51,439
backwards

00:14:48,189 --> 00:14:52,790
so we are gonna make a list of all the

00:14:51,439 --> 00:14:55,490
words in this source text that rhyme

00:14:52,790 --> 00:14:57,589
start with one of those and generate

00:14:55,490 --> 00:15:00,069
backwards this involves modifying our

00:14:57,589 --> 00:15:02,319
earlier text generation algorithm to

00:15:00,069 --> 00:15:04,189
instead of building a model going

00:15:02,319 --> 00:15:05,540
forwards through the text we're just

00:15:04,189 --> 00:15:07,129
gonna go backwards through the text the

00:15:05,540 --> 00:15:09,079
computer can do it just as easily either

00:15:07,129 --> 00:15:12,439
way even if it's harder for us to reason

00:15:09,079 --> 00:15:14,899
about so in order to make this easy for

00:15:12,439 --> 00:15:17,209
ourselves we're gonna create a new data

00:15:14,899 --> 00:15:19,579
structure we're going to go through

00:15:17,209 --> 00:15:21,350
every word in the source text of the

00:15:19,579 --> 00:15:23,839
unique ones look up how they're

00:15:21,350 --> 00:15:25,759
pronounced cut off that pronunciation at

00:15:23,839 --> 00:15:27,170
the last and emphasized syllable because

00:15:25,759 --> 00:15:29,720
that's how we as English speakers

00:15:27,170 --> 00:15:31,790
determine whether something rhymes then

00:15:29,720 --> 00:15:34,009
we'll pick two words that we know have

00:15:31,790 --> 00:15:36,920
the same sound and generate backwards

00:15:34,009 --> 00:15:39,019
from there so here's what this data

00:15:36,920 --> 00:15:40,790
structure might look like so I made a

00:15:39,019 --> 00:15:43,550
set of all the distinct words in the

00:15:40,790 --> 00:15:46,550
song I am The Walrus I looked them up by

00:15:43,550 --> 00:15:47,930
pronunciation in the dictionary I sliced

00:15:46,550 --> 00:15:50,569
the pronunciation off at the last

00:15:47,930 --> 00:15:53,329
emphasized syllable designated by a-1 in

00:15:50,569 --> 00:15:56,569
the pronunciation dictionary to find the

00:15:53,329 --> 00:15:59,000
rhyme sound and then I collected them

00:15:56,569 --> 00:16:00,230
all by that rhyme sound I discarded all

00:15:59,000 --> 00:16:02,779
of the ones that didn't have at least

00:16:00,230 --> 00:16:04,850
two words that rhymed and this is what I

00:16:02,779 --> 00:16:08,750
ended up with so for example this first

00:16:04,850 --> 00:16:11,600
line is grouped by the sound oh and in

00:16:08,750 --> 00:16:13,490
here we have grow row Po and ho so when

00:16:11,600 --> 00:16:16,759
I want to generate a rhyming couplet I

00:16:13,490 --> 00:16:19,639
randomly pick one of the sounds and in

00:16:16,759 --> 00:16:22,730
this case I picked the sound I then I

00:16:19,639 --> 00:16:24,110
take the value of that I randomly picked

00:16:22,730 --> 00:16:28,519
two of the words out of there

00:16:24,110 --> 00:16:30,589
sky and sty and I use those as seeds to

00:16:28,519 --> 00:16:32,629
generate using my backwards Markov model

00:16:30,589 --> 00:16:35,059
and then reverse the output so what we

00:16:32,629 --> 00:16:37,519
get for example might be cornflake

00:16:35,059 --> 00:16:40,819
waiting for the sky and Eggman you've

00:16:37,519 --> 00:16:42,649
been a sty so this is great it

00:16:40,819 --> 00:16:44,389
definitely rhymes but it doesn't sound

00:16:42,649 --> 00:16:45,920
like poetry it doesn't really roll off

00:16:44,389 --> 00:16:47,509
the tongue even though these have the

00:16:45,920 --> 00:16:49,610
same number of words they have different

00:16:47,509 --> 00:16:51,129
numbers of syllables and that's where

00:16:49,610 --> 00:16:54,290
the meter comes in

00:16:51,129 --> 00:16:56,389
so generating with meter is a little

00:16:54,290 --> 00:16:57,800
more complicated but what we're going to

00:16:56,389 --> 00:17:00,379
do is we're going to start with the

00:16:57,800 --> 00:17:01,880
meter we want and as we generate text

00:17:00,379 --> 00:17:03,800
we're going to check each

00:17:01,880 --> 00:17:05,600
word against that meter to see if what

00:17:03,800 --> 00:17:07,850
we've generated so far fits what we're

00:17:05,600 --> 00:17:09,260
looking for if a word that we've picked

00:17:07,850 --> 00:17:11,510
it doesn't fit we'll throw it out and

00:17:09,260 --> 00:17:13,430
try a different option if none of the

00:17:11,510 --> 00:17:15,319
options if we if we hit a dead end and

00:17:13,430 --> 00:17:19,250
if none of the options fit the meter

00:17:15,319 --> 00:17:21,530
then we have to backtrack we have to

00:17:19,250 --> 00:17:23,660
discard the word that led us there and

00:17:21,530 --> 00:17:24,470
see if we can find a different branch

00:17:23,660 --> 00:17:26,690
anywhere else

00:17:24,470 --> 00:17:29,510
so this technique is called backtracking

00:17:26,690 --> 00:17:31,670
and here's how it works we're going to

00:17:29,510 --> 00:17:33,800
start with a meter we want I've picked

00:17:31,670 --> 00:17:35,960
iambic pentameter here that's the set of

00:17:33,800 --> 00:17:38,060
10 syllables where every other syllable

00:17:35,960 --> 00:17:40,760
is emphasized starting with an emphasis

00:17:38,060 --> 00:17:44,000
syllable and I've chosen to represent it

00:17:40,760 --> 00:17:45,890
as a string of ones and zeros where 0 is

00:17:44,000 --> 00:17:47,450
an unofficial syllable and a 1 as an

00:17:45,890 --> 00:17:49,430
emphasized syllable just like it is in

00:17:47,450 --> 00:17:50,930
the pronunciation dictionary so we're

00:17:49,430 --> 00:17:53,510
going to keep track of what we've found

00:17:50,930 --> 00:17:55,640
so far as we generate text just like in

00:17:53,510 --> 00:17:57,950
vanilla Markov generation we're going to

00:17:55,640 --> 00:17:59,660
start by picking a word any word and in

00:17:57,950 --> 00:18:01,790
this case I picked a little so what

00:17:59,660 --> 00:18:03,710
happens when we look up little in our

00:18:01,790 --> 00:18:08,450
pronunciation dictionary is that it

00:18:03,710 --> 00:18:10,490
gives us this set of sounds well it but

00:18:08,450 --> 00:18:14,180
importantly for right now it gives us

00:18:10,490 --> 00:18:17,060
the emphasis and that is little not

00:18:14,180 --> 00:18:21,020
little the the first syllable is

00:18:17,060 --> 00:18:22,400
stressed so we can take the emphasize in

00:18:21,020 --> 00:18:25,280
that an emphasis syllable that it's

00:18:22,400 --> 00:18:27,860
given us as pronunciation and check that

00:18:25,280 --> 00:18:29,360
against the pronunciation that we're

00:18:27,860 --> 00:18:32,300
looking for that the syllable stress

00:18:29,360 --> 00:18:33,380
were looking for but what we noticed

00:18:32,300 --> 00:18:36,260
here is that it doesn't match and that

00:18:33,380 --> 00:18:38,630
means little can't be our first word in

00:18:36,260 --> 00:18:41,390
a set of iambic pentameter so we're

00:18:38,630 --> 00:18:43,000
gonna try something else I'm sure that

00:18:41,390 --> 00:18:45,950
can be unstressed let's see what's next

00:18:43,000 --> 00:18:49,250
I'm crying so far so good

00:18:45,950 --> 00:18:50,780
crying is an emphasized syllable

00:18:49,250 --> 00:18:52,670
followed by an emphasized syllable

00:18:50,780 --> 00:18:55,010
because Arsene starts with an emphasis

00:18:52,670 --> 00:18:57,550
syllable we're doing we're matching the

00:18:55,010 --> 00:19:01,670
pattern so far let's keep going I'm

00:18:57,550 --> 00:19:02,780
crying yellow matter custard and we're

00:19:01,670 --> 00:19:05,870
almost there look we've only got one

00:19:02,780 --> 00:19:07,940
syllable to go unfortunately if you know

00:19:05,870 --> 00:19:09,650
the song I am the Horace you might know

00:19:07,940 --> 00:19:12,100
that yellow matter custard the phrase

00:19:09,650 --> 00:19:14,390
only appears once in the entire song

00:19:12,100 --> 00:19:14,990
specifically custard only appears once

00:19:14,390 --> 00:19:16,580
in the it

00:19:14,990 --> 00:19:19,130
and that means there's only one word

00:19:16,580 --> 00:19:23,750
that can come next and that word is

00:19:19,130 --> 00:19:24,860
dripping so we found 11 syllables but

00:19:23,750 --> 00:19:27,800
that doesn't match what we're going for

00:19:24,860 --> 00:19:30,710
we're going for 10 and that means we

00:19:27,800 --> 00:19:33,140
can't use the word drip but that means

00:19:30,710 --> 00:19:35,330
because there are no other options to

00:19:33,140 --> 00:19:37,400
come after custard we can't use custard

00:19:35,330 --> 00:19:40,670
either and that's true for both yet

00:19:37,400 --> 00:19:41,780
matter and yellow so now we're almost

00:19:40,670 --> 00:19:44,210
back to square one

00:19:41,780 --> 00:19:45,950
but we've still got to start let's see

00:19:44,210 --> 00:19:49,670
what other options we might have after

00:19:45,950 --> 00:19:53,929
the word crying here's one sitting I'm

00:19:49,670 --> 00:19:56,660
crying sitting I'm crying sitting in the

00:19:53,929 --> 00:19:59,360
sky so far so good we were at 8 out of

00:19:56,660 --> 00:20:02,990
10 and so far we all match but what

00:19:59,360 --> 00:20:05,120
comes next is C and the pronounciation

00:20:02,990 --> 00:20:06,950
dictionary is generous about the

00:20:05,120 --> 00:20:10,330
pronunciation of some one syllable words

00:20:06,950 --> 00:20:14,200
the common ones like that or in or I'm

00:20:10,330 --> 00:20:16,490
but if it's a word that has meaning

00:20:14,200 --> 00:20:17,960
then the pronunciation dictionary is

00:20:16,490 --> 00:20:20,300
going to tell us know this one syllable

00:20:17,960 --> 00:20:23,000
word needs to have emphasis and that

00:20:20,300 --> 00:20:24,290
means we can't use sky and C together

00:20:23,000 --> 00:20:30,710
when we're looking for iambic pentameter

00:20:24,290 --> 00:20:32,090
so we have to back up and it turns out

00:20:30,710 --> 00:20:34,160
there's nothing that comes after sky

00:20:32,090 --> 00:20:37,280
except for C so we have to delete that

00:20:34,160 --> 00:20:46,420
word too but now we've still got options

00:20:37,280 --> 00:20:48,290
I'm crying sitting in the walrus goo yay

00:20:46,420 --> 00:20:49,970
so now we've talked about how to

00:20:48,290 --> 00:20:51,410
generate lines that rhyme and we've

00:20:49,970 --> 00:20:53,360
talked about how to generate lines that

00:20:51,410 --> 00:20:55,220
have meter so we're gonna put them

00:20:53,360 --> 00:20:58,309
together and we're gonna put them

00:20:55,220 --> 00:21:00,350
together with Python so in order to

00:20:58,309 --> 00:21:04,040
generate a simple poem the inputs we

00:21:00,350 --> 00:21:06,470
need are a source text which is just one

00:21:04,040 --> 00:21:08,420
long string the meter that we're looking

00:21:06,470 --> 00:21:11,390
for in this case I am back pentameter

00:21:08,420 --> 00:21:12,890
the zero one unit times five and the

00:21:11,390 --> 00:21:14,900
number of lines that we're going to

00:21:12,890 --> 00:21:16,250
generate that rhyme with each other in

00:21:14,900 --> 00:21:19,730
this case I've just picked two or a

00:21:16,250 --> 00:21:21,230
couplet two lines that rhyme so what

00:21:19,730 --> 00:21:22,790
we're gonna do with these first we're

00:21:21,230 --> 00:21:25,970
going to build our backwards Markov

00:21:22,790 --> 00:21:28,310
model using the source text and this is

00:21:25,970 --> 00:21:30,500
a list of words that come

00:21:28,310 --> 00:21:32,270
for other words then we're going to

00:21:30,500 --> 00:21:35,540
build our list of what rhymes with each

00:21:32,270 --> 00:21:37,280
other and we're using the K input here

00:21:35,540 --> 00:21:40,310
so that we can throw out every word that

00:21:37,280 --> 00:21:41,630
doesn't have at least K rhymes so if

00:21:40,310 --> 00:21:43,670
we're looking for three lines that rhyme

00:21:41,630 --> 00:21:46,070
rhyme with each other like we might if

00:21:43,670 --> 00:21:49,790
we're generating a limerick then we'll

00:21:46,070 --> 00:21:51,590
need to know that any rhymes we find are

00:21:49,790 --> 00:21:53,900
going to have at least two other options

00:21:51,590 --> 00:21:56,120
out of all of our rhyme options we're

00:21:53,900 --> 00:21:57,440
going to choose one of those sounds that

00:21:56,120 --> 00:21:59,960
we found that has at least that number

00:21:57,440 --> 00:22:02,150
of rhymes out of all of the words that

00:21:59,960 --> 00:22:04,610
rhyme with each other we're going to

00:22:02,150 --> 00:22:08,330
choose K of them to act as our seeds and

00:22:04,610 --> 00:22:11,380
then for each of those seeds we're going

00:22:08,330 --> 00:22:14,960
to generate one line following the meter

00:22:11,380 --> 00:22:17,200
and append that to our output and then

00:22:14,960 --> 00:22:19,340
string all our output together

00:22:17,200 --> 00:22:20,690
so I'm not actually going to show you

00:22:19,340 --> 00:22:22,280
the output of this program because I

00:22:20,690 --> 00:22:24,380
promise it's not that interesting when

00:22:22,280 --> 00:22:26,330
you just run it on the lyrics of I am

00:22:24,380 --> 00:22:29,140
The Walrus there's not enough words to

00:22:26,330 --> 00:22:33,080
create I am but pentameter rhyming

00:22:29,140 --> 00:22:35,390
couplets that aren't already in this

00:22:33,080 --> 00:22:36,770
song so instead let's look at what

00:22:35,390 --> 00:22:42,830
happens when you give this the power of

00:22:36,770 --> 00:22:47,120
all the Beatles lyrics my live demo do

00:22:42,830 --> 00:22:48,980
it live so I've wrapped this code in a

00:22:47,120 --> 00:22:54,020
flask app and I've deployed it to my

00:22:48,980 --> 00:22:57,500
personal website and I'm gonna tell it

00:22:54,020 --> 00:22:58,910
that I want a sonnet in the style of the

00:22:57,500 --> 00:23:00,800
Beatles which means that behind the hood

00:22:58,910 --> 00:23:05,300
it's using every lyric the Beatles ever

00:23:00,800 --> 00:23:08,480
wrote all put together let's go and what

00:23:05,300 --> 00:23:11,270
it gives us believe in me we'll ask a

00:23:08,480 --> 00:23:14,060
wooden cup her on and rocky said it gets

00:23:11,270 --> 00:23:17,120
annoyed it over honey tasting much it up

00:23:14,060 --> 00:23:19,400
and roll a banker never have enjoyed was

00:23:17,120 --> 00:23:22,070
of allusion never heard the book a home

00:23:19,400 --> 00:23:24,590
with eyes the writer if the park can do

00:23:22,070 --> 00:23:28,310
will I was wrong location took return it

00:23:24,590 --> 00:23:30,740
over me can feel a lark Somalian

00:23:28,310 --> 00:23:33,290
pilchards climbing up his hands years

00:23:30,740 --> 00:23:35,120
since it's up for everyone can learn to

00:23:33,290 --> 00:23:37,370
hold her own it's far behind the bands

00:23:35,120 --> 00:23:40,220
the first and I'd been nothing else can

00:23:37,370 --> 00:23:40,940
turn the plane into a banker never shows

00:23:40,220 --> 00:23:48,470
that

00:23:40,940 --> 00:23:50,090
everybody everybody knows thank you

00:23:48,470 --> 00:23:52,430
thank you for watching thank you for

00:23:50,090 --> 00:23:53,960
watching who remotely I miss you PyCon

00:23:52,430 --> 00:23:56,660
please come talk to me on Twitter this

00:23:53,960 --> 00:23:58,820
is my handle about text generation or

00:23:56,660 --> 00:24:02,000
linguistics or poetry or anything you

00:23:58,820 --> 00:24:05,120
want this coat is all deployed at this

00:24:02,000 --> 00:24:07,100
website and all of my source code and

00:24:05,120 --> 00:24:08,900
slides are online at this github repo I

00:24:07,100 --> 00:24:10,490
hope you're all staying safe and

00:24:08,900 --> 00:24:13,690
creative and I can't wait to see you

00:24:10,490 --> 00:24:13,690

YouTube URL: https://www.youtube.com/watch?v=2ymZVpuqvSc


