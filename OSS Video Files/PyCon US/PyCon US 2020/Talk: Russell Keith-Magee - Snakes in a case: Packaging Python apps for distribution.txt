Title: Talk: Russell Keith-Magee - Snakes in a case: Packaging Python apps for distribution
Publication date: 2021-05-05
Playlist: PyCon US 2020
Description: 
	Presented by:
Russell Keith-Magee

So you’ve written a Python program - a game, a new social media app, or a system administration utility. You think it’s great, and you want to share it with the world. But how do you do that? How do you distribute your code to others without needing to document how to set up Python, install dependencies, and run your application?

In this talk, you’ll learn about Briefcase, a tool that can convert a Python project into platform-native installers on macOS, Windows and Linux - and can also target iOS and Android. You’ll learn how to use Briefcase to start a new project, or convert an existing project for distribution. You’ll also see how Briefcase (and some other recent developments in the Python ecosystem) can assist you during application development.
Captions: 
	00:00:05,420 --> 00:00:09,600
hi there my name is Russell Keith McKeon

00:00:08,430 --> 00:00:11,940
I'm here today to talk to you about

00:00:09,600 --> 00:00:15,059
putting your snakes into a briefcase for

00:00:11,940 --> 00:00:16,500
easy transportation I am speaking to you

00:00:15,059 --> 00:00:18,000
today from wide opening a butcher

00:00:16,500 --> 00:00:20,039
otherwise known as Perth Western

00:00:18,000 --> 00:00:22,140
Australia and I would like to recognize

00:00:20,039 --> 00:00:23,970
their job as the traditional owners of

00:00:22,140 --> 00:00:25,499
the land where I'm recording to

00:00:23,970 --> 00:00:27,509
recognize their continuing connection to

00:00:25,499 --> 00:00:29,369
their land waters and culture and to pay

00:00:27,509 --> 00:00:33,600
my respects to their elders past present

00:00:29,369 --> 00:00:35,820
and emerging so last year at PyCon us in

00:00:33,600 --> 00:00:37,590
Cleveland I had the very distinct honor

00:00:35,820 --> 00:00:39,090
of being the opening keynote and in that

00:00:37,590 --> 00:00:41,130
talk I spoke about the challenges facing

00:00:39,090 --> 00:00:43,890
Python as a language and the gaps that

00:00:41,130 --> 00:00:45,660
exist in our communities tools one of

00:00:43,890 --> 00:00:47,460
those gaps relates to something that

00:00:45,660 --> 00:00:49,950
seems like it should have an obvious

00:00:47,460 --> 00:00:51,450
solution if you're an old water of some

00:00:49,950 --> 00:00:52,830
Python code and the time comes to give

00:00:51,450 --> 00:00:55,380
that code to somebody else so that they

00:00:52,830 --> 00:00:57,390
can run it how do you do that there

00:00:55,380 --> 00:00:59,370
isn't a single simple answer to this

00:00:57,390 --> 00:01:01,170
problem and part of the reason is the

00:00:59,370 --> 00:01:04,110
distribution means different things to

00:01:01,170 --> 00:01:05,939
different people if you are an author of

00:01:04,110 --> 00:01:07,439
a library of code that is a collection

00:01:05,939 --> 00:01:09,570
of Python code that has a well-defined

00:01:07,439 --> 00:01:11,850
API that you want other people to embed

00:01:09,570 --> 00:01:13,560
into their own projects Python does have

00:01:11,850 --> 00:01:15,960
a reasonably good answer for you and

00:01:13,560 --> 00:01:17,820
it's built in a project like requests

00:01:15,960 --> 00:01:19,920
for example has a clear distribution

00:01:17,820 --> 00:01:22,350
story the project is configured with a

00:01:19,920 --> 00:01:23,579
set up top I and a set up CFG file and

00:01:22,350 --> 00:01:25,380
when the maintainer is want to publish a

00:01:23,579 --> 00:01:26,909
new version they build a wheel for that

00:01:25,380 --> 00:01:29,789
new version and upload the wheel to pi

00:01:26,909 --> 00:01:31,439
pi and as an end user you can then keep

00:01:29,789 --> 00:01:33,450
install requests and then import

00:01:31,439 --> 00:01:36,060
requests in your code and then start

00:01:33,450 --> 00:01:37,829
making requests and okay pythons

00:01:36,060 --> 00:01:39,869
packaging ecosystem occasionally has

00:01:37,829 --> 00:01:41,310
some rough edges but for the most but

00:01:39,869 --> 00:01:42,960
for the most part for most use cases

00:01:41,310 --> 00:01:45,240
thanks to the amazing efforts of the

00:01:42,960 --> 00:01:47,189
Python packaging Authority tools like pi

00:01:45,240 --> 00:01:50,100
PI and pip and twine work really

00:01:47,189 --> 00:01:52,409
reliably a second use case for

00:01:50,100 --> 00:01:54,600
distribution is a Python project a

00:01:52,409 --> 00:01:56,280
project might have a version control

00:01:54,600 --> 00:01:57,719
repository or it might just be a

00:01:56,280 --> 00:01:59,939
collection of code in a directory

00:01:57,719 --> 00:02:02,639
somewhere but it won't be uploaded to pi

00:01:59,939 --> 00:02:03,779
pi you get the code from the repository

00:02:02,639 --> 00:02:06,209
where you get a copy of the directory

00:02:03,779 --> 00:02:08,880
and you effectively run the repository

00:02:06,209 --> 00:02:10,200
or the directory a website like the

00:02:08,880 --> 00:02:11,730
plaque on us website would be the

00:02:10,200 --> 00:02:14,340
classic example here but it's not a

00:02:11,730 --> 00:02:16,260
website specific phenomenon other

00:02:14,340 --> 00:02:17,970
software can be distributed as a project

00:02:16,260 --> 00:02:19,680
a lot of jupiter notebooks

00:02:17,970 --> 00:02:21,540
projects in this sense they are

00:02:19,680 --> 00:02:23,670
collections of code that aren't designed

00:02:21,540 --> 00:02:26,160
for commodified reuse they serve a

00:02:23,670 --> 00:02:28,320
single purpose these projects are

00:02:26,160 --> 00:02:30,090
distributed by copying and then deployed

00:02:28,320 --> 00:02:32,610
in some way though the project is an

00:02:30,090 --> 00:02:34,890
install in any conventional sense they

00:02:32,610 --> 00:02:37,710
don't have a single Python mandated

00:02:34,890 --> 00:02:39,720
configuration either they may have some

00:02:37,710 --> 00:02:42,000
configuration in a requirements file but

00:02:39,720 --> 00:02:44,100
even that name is a little bit more than

00:02:42,000 --> 00:02:46,110
a convention and the problem of how you

00:02:44,100 --> 00:02:48,060
setup your execution environment is left

00:02:46,110 --> 00:02:50,100
as a documentation issue and usually

00:02:48,060 --> 00:02:53,400
presumes some degree of familiarity with

00:02:50,100 --> 00:02:54,840
the Python development ecosystem another

00:02:53,400 --> 00:02:57,300
use case for developer tools in the

00:02:54,840 --> 00:02:58,920
Python ecosystems tools like pi thick

00:02:57,300 --> 00:03:01,650
protest PI test for example is

00:02:58,920 --> 00:03:03,840
distributed as on pi PI as well just

00:03:01,650 --> 00:03:05,070
like a library you can pip install PI

00:03:03,840 --> 00:03:07,590
test into your development environment

00:03:05,070 --> 00:03:09,540
and you can import PI test to add

00:03:07,590 --> 00:03:12,690
fixtures or parameterize test cases to

00:03:09,540 --> 00:03:15,270
your codebase but because of metadata in

00:03:12,690 --> 00:03:16,950
the deploy test wheel pip will also

00:03:15,270 --> 00:03:19,430
install an entry point that will let you

00:03:16,950 --> 00:03:21,810
in for a PI test from the command line

00:03:19,430 --> 00:03:24,120
however it's not always as

00:03:21,810 --> 00:03:25,650
straightforward as this if you've used

00:03:24,120 --> 00:03:27,540
github pages you might have come across

00:03:25,650 --> 00:03:29,670
a static site generator called Jekyll

00:03:27,540 --> 00:03:31,200
Jekyll is written in Ruby and the

00:03:29,670 --> 00:03:32,790
QuickStart engine instructions on the

00:03:31,200 --> 00:03:36,600
Jekyll home page say that you should run

00:03:32,790 --> 00:03:38,910
gem install bundler Jekyll now I'm not a

00:03:36,600 --> 00:03:41,280
ruby developer so what does that mean

00:03:38,910 --> 00:03:44,100
and when I find another ruby tool that

00:03:41,280 --> 00:03:46,170
tells me to bundle other tool have I

00:03:44,100 --> 00:03:48,060
already installed bundle will the

00:03:46,170 --> 00:03:50,280
version that I have will be compatible

00:03:48,060 --> 00:03:52,620
with this new tool tells me that I need

00:03:50,280 --> 00:03:55,050
to update my Ruby interpreter is Jekyll

00:03:52,620 --> 00:03:56,850
gonna keep working Jekyll is written in

00:03:55,050 --> 00:03:58,320
Ruby but this isn't a problem about Ruby

00:03:56,850 --> 00:04:00,750
Python tools have exactly the same

00:03:58,320 --> 00:04:02,880
problem it's a distribution problem the

00:04:00,750 --> 00:04:04,860
language of implementation is of almost

00:04:02,880 --> 00:04:07,530
no significance to the end user the

00:04:04,860 --> 00:04:09,239
authors of protests can be reasonably

00:04:07,530 --> 00:04:11,280
sure that you know something about the

00:04:09,239 --> 00:04:12,870
Python ecosystem because PI test users

00:04:11,280 --> 00:04:15,209
are pretty much all going to be Python

00:04:12,870 --> 00:04:17,880
developers but what if your users aren't

00:04:15,209 --> 00:04:19,230
Python developers saying oh create a

00:04:17,880 --> 00:04:21,870
virtual environment and run tick install

00:04:19,230 --> 00:04:23,970
my tool that makes no sense to anybody

00:04:21,870 --> 00:04:25,860
who isn't already an experienced Python

00:04:23,970 --> 00:04:27,960
developer and to someone who is just

00:04:25,860 --> 00:04:31,050
starting with Python it's a consistent

00:04:27,960 --> 00:04:31,830
source of confusion and frankly it's not

00:04:31,050 --> 00:04:33,810
even a good user

00:04:31,830 --> 00:04:35,910
experience if your users are planned

00:04:33,810 --> 00:04:37,860
developers take a tool like black for

00:04:35,910 --> 00:04:39,450
example with some exceptions you

00:04:37,860 --> 00:04:41,940
probably just need one copy on your

00:04:39,450 --> 00:04:43,380
computer when an update comes out you

00:04:41,940 --> 00:04:45,840
probably want to use that update

00:04:43,380 --> 00:04:49,050
everywhere but how do you install the

00:04:45,840 --> 00:04:50,790
Python tool like black globally if you

00:04:49,050 --> 00:04:52,290
install it in your system Python then it

00:04:50,790 --> 00:04:53,610
won't be available it won't be reliable

00:04:52,290 --> 00:04:56,400
if you ever activate a virtual

00:04:53,610 --> 00:04:58,680
environment and what about graphical

00:04:56,400 --> 00:05:00,630
applications pick a random user space

00:04:58,680 --> 00:05:04,170
application on your laptop say slack

00:05:00,630 --> 00:05:06,270
what language is it written in who cares

00:05:04,170 --> 00:05:07,890
I'm not looking to engage with slack as

00:05:06,270 --> 00:05:10,440
a library I'm not looking to import

00:05:07,890 --> 00:05:12,360
slack I just want to use it I want to

00:05:10,440 --> 00:05:14,010
install it in a familiar way click on an

00:05:12,360 --> 00:05:16,590
icon and have the application start

00:05:14,010 --> 00:05:20,190
reliably every time and if I update

00:05:16,590 --> 00:05:21,540
another application say Firefox I don't

00:05:20,190 --> 00:05:23,660
want my slack installed to break because

00:05:21,540 --> 00:05:26,250
Firefox updated a shared interpreter

00:05:23,660 --> 00:05:28,530
what an end user of these application

00:05:26,250 --> 00:05:30,720
these apps does care about is ease of

00:05:28,530 --> 00:05:32,580
installation ease of our installation

00:05:30,720 --> 00:05:34,650
having the app appear in the Start menu

00:05:32,580 --> 00:05:36,750
with launchpad and potentially having

00:05:34,650 --> 00:05:38,010
that app appear and be downloadable via

00:05:36,750 --> 00:05:41,250
an app store and having a brand new

00:05:38,010 --> 00:05:44,000
regularly updated via that channel each

00:05:41,250 --> 00:05:46,020
of these types of tools has a different

00:05:44,000 --> 00:05:48,180
distribution requirement they all need

00:05:46,020 --> 00:05:49,980
Python as at runtime but the only the

00:05:48,180 --> 00:05:52,710
first of these use cases really has a

00:05:49,980 --> 00:05:54,600
good answer for the Python ecosystem and

00:05:52,710 --> 00:05:56,640
even then that development story

00:05:54,600 --> 00:05:58,890
essentially presumes you're a Python

00:05:56,640 --> 00:06:00,300
developer who has a Python development

00:05:58,890 --> 00:06:02,790
environment and that you're comfortable

00:06:00,300 --> 00:06:04,920
manipulating it the question of how you

00:06:02,790 --> 00:06:06,960
give Python code to an end user when

00:06:04,920 --> 00:06:08,880
that end user doesn't care about Python

00:06:06,960 --> 00:06:10,080
or when they're not experts in setting

00:06:08,880 --> 00:06:12,090
up and configuring applies an

00:06:10,080 --> 00:06:14,460
environment that's a bit of an open

00:06:12,090 --> 00:06:17,010
question but it's a really important

00:06:14,460 --> 00:06:19,020
question it affects how users experience

00:06:17,010 --> 00:06:20,580
our code and it's great that we have a

00:06:19,020 --> 00:06:22,500
solution for the first user case but we

00:06:20,580 --> 00:06:25,170
need reliable solutions for the other

00:06:22,500 --> 00:06:27,240
three personally I'm especially

00:06:25,170 --> 00:06:29,550
interested in the last one to a lesser

00:06:27,240 --> 00:06:30,990
extent the third I'm the founder of the

00:06:29,550 --> 00:06:32,760
B web project which is an attempt to

00:06:30,990 --> 00:06:34,080
make sure that Python remains relevant

00:06:32,760 --> 00:06:36,720
in a computing world that is

00:06:34,080 --> 00:06:38,640
increasingly mobile focused if you are

00:06:36,720 --> 00:06:41,310
building applications for iPhone and

00:06:38,640 --> 00:06:44,880
Android the only Unity distribution is

00:06:41,310 --> 00:06:45,600
the app you can't pip install on an

00:06:44,880 --> 00:06:47,850
iPhone

00:06:45,600 --> 00:06:49,800
you can't install a system copy of

00:06:47,850 --> 00:06:51,540
Python on your Android device and tell

00:06:49,800 --> 00:06:54,150
users to create a virtual environment

00:06:51,540 --> 00:06:56,610
if Python wants to remain relevant in a

00:06:54,150 --> 00:06:59,420
mobile world we need a story that

00:06:56,610 --> 00:07:01,920
encompasses the distribution of apps and

00:06:59,420 --> 00:07:03,570
increasingly while my primary interest

00:07:01,920 --> 00:07:05,760
is mobile platforms the same story

00:07:03,570 --> 00:07:07,860
actually applies to desktop platforms to

00:07:05,760 --> 00:07:09,630
Mac OS and Windows have always had

00:07:07,860 --> 00:07:11,970
applications but those platforms are

00:07:09,630 --> 00:07:15,240
increasingly encouraging distribution of

00:07:11,970 --> 00:07:17,910
apps as standalone sandbox bundles by

00:07:15,240 --> 00:07:19,950
App Store's what I'm going to do today

00:07:17,910 --> 00:07:21,840
is introduce you to the beware project

00:07:19,950 --> 00:07:24,420
solution for this problem and that

00:07:21,840 --> 00:07:26,910
solution is briefcase briefcase is a

00:07:24,420 --> 00:07:28,980
tool for packaging Python applications

00:07:26,910 --> 00:07:30,960
it takes your Python code wraps it up as

00:07:28,980 --> 00:07:33,240
a standalone unit that can be given to

00:07:30,960 --> 00:07:34,530
an end user with no Python experience so

00:07:33,240 --> 00:07:36,150
that they can install it on their

00:07:34,530 --> 00:07:37,610
platform of choice whether ever knowing

00:07:36,150 --> 00:07:40,830
that they're running Python code

00:07:37,610 --> 00:07:42,570
briefcase is a pet 518 complied bill

00:07:40,830 --> 00:07:43,710
tool you don't know what that means I

00:07:42,570 --> 00:07:45,300
recommend checking out this blog post

00:07:43,710 --> 00:07:47,160
from Brett cannon but the short version

00:07:45,300 --> 00:07:49,170
is that it means that it is a build tool

00:07:47,160 --> 00:07:52,200
that uses PI project Ahnold for

00:07:49,170 --> 00:07:54,180
configuration it produces MSI installers

00:07:52,200 --> 00:07:56,550
for windows dmg or raw app bundles

00:07:54,180 --> 00:07:58,770
format costs and images on linux and it

00:07:56,550 --> 00:08:00,090
produces iOS and Android projects that

00:07:58,770 --> 00:08:02,370
can be uploaded to the Apple App Store

00:08:00,090 --> 00:08:04,560
or the Google Play Store it's also

00:08:02,370 --> 00:08:06,780
highly extensible if you wanted to add a

00:08:04,560 --> 00:08:08,340
flat-pack or snap back in for Linux you

00:08:06,780 --> 00:08:10,200
could or if you wanted to support an

00:08:08,340 --> 00:08:13,350
entirely new platform like a set-top box

00:08:10,200 --> 00:08:15,090
or watches you could do that too now

00:08:13,350 --> 00:08:17,460
while it pairs well with be where's

00:08:15,090 --> 00:08:21,000
Dewey framework toga it doesn't require

00:08:17,460 --> 00:08:23,310
it you can wrap Pi side or TK into apps

00:08:21,000 --> 00:08:25,290
with briefcase the caveat on that claim

00:08:23,310 --> 00:08:27,000
is that briefcases capabilities are only

00:08:25,290 --> 00:08:29,820
as good as the frameworks themselves

00:08:27,000 --> 00:08:31,950
briefcase is a packaging tool it won't

00:08:29,820 --> 00:08:35,000
make your TK inter app work on mobile

00:08:31,950 --> 00:08:37,169
because TK hasn't been ported to mobile

00:08:35,000 --> 00:08:40,080
briefcase also isn't a good match for

00:08:37,169 --> 00:08:42,210
command-line tools at least not yet

00:08:40,080 --> 00:08:43,830
it could potentially be adapted for

00:08:42,210 --> 00:08:45,090
command-line use and I'm personally very

00:08:43,830 --> 00:08:47,160
interested in seeing that use case

00:08:45,090 --> 00:08:48,630
supported but it's not obvious to me at

00:08:47,160 --> 00:08:50,700
the moment exactly what that support

00:08:48,630 --> 00:08:52,530
would look like and this is mostly a

00:08:50,700 --> 00:08:55,620
function of how briefcase works under

00:08:52,530 --> 00:08:58,080
the hood the approach is by briefcase is

00:08:55,620 --> 00:08:59,100
essentially the dumbest thing that could

00:08:58,080 --> 00:09:00,650
possibly work

00:08:59,100 --> 00:09:03,570
for the problem of app distribution a

00:09:00,650 --> 00:09:05,880
briefcase application is a full copy of

00:09:03,570 --> 00:09:08,160
your Python code a full copy of all your

00:09:05,880 --> 00:09:10,530
codes dependencies and a full copy of a

00:09:08,160 --> 00:09:11,940
full Python interpreter bundle in a way

00:09:10,530 --> 00:09:14,040
that makes sense for the platform you

00:09:11,940 --> 00:09:16,950
are supporting and that's it

00:09:14,040 --> 00:09:18,930
briefcase is mostly a templating tool

00:09:16,950 --> 00:09:20,340
combined with wrappers around pip to

00:09:18,930 --> 00:09:22,140
install your Python dependencies and

00:09:20,340 --> 00:09:24,720
wrappers around whatever native platform

00:09:22,140 --> 00:09:26,190
tools are necessary to build dmg or msi

00:09:24,720 --> 00:09:27,930
files of sign applications for

00:09:26,190 --> 00:09:29,580
distribution now

00:09:27,930 --> 00:09:31,440
briefcase isn't the only application

00:09:29,580 --> 00:09:33,810
packaging tool that exists in Python so

00:09:31,440 --> 00:09:36,210
why should you use briefcase and not one

00:09:33,810 --> 00:09:38,670
of the other options well firstly it

00:09:36,210 --> 00:09:40,140
doesn't try to be clever some

00:09:38,670 --> 00:09:42,090
alternatives to briefcase like PI

00:09:40,140 --> 00:09:44,670
oxidizer apply installer and some modes

00:09:42,090 --> 00:09:48,480
of operation convolve getting a working

00:09:44,670 --> 00:09:50,700
app with making an executable and if the

00:09:48,480 --> 00:09:52,290
support the aim of making the executable

00:09:50,700 --> 00:09:53,880
they play all sorts of trip trips with

00:09:52,290 --> 00:09:55,830
your code bundling it into a zip archive

00:09:53,880 --> 00:09:57,300
it's embedded into the data block and

00:09:55,830 --> 00:09:59,790
then executable it's unpacking the

00:09:57,300 --> 00:10:02,370
memory at runtime and when that works

00:09:59,790 --> 00:10:05,310
it's great but it doesn't always work

00:10:02,370 --> 00:10:06,990
because fundamentally Python code is

00:10:05,310 --> 00:10:10,470
designed to be run by parsing an

00:10:06,990 --> 00:10:12,570
interpreter over a directory of code ok

00:10:10,470 --> 00:10:14,040
if you know enough about pythons import

00:10:12,570 --> 00:10:16,140
system or you know you know that that's

00:10:14,040 --> 00:10:17,700
not strictly true but if you've got

00:10:16,140 --> 00:10:19,530
enough practical experience with Python

00:10:17,700 --> 00:10:20,880
in the real world you know that it is

00:10:19,530 --> 00:10:23,220
close enough to being true in practice

00:10:20,880 --> 00:10:25,440
as makes no difference if you don't

00:10:23,220 --> 00:10:28,710
believe me all I have to say is zip say

00:10:25,440 --> 00:10:30,690
thanks and on the other hand briefcase

00:10:28,710 --> 00:10:32,550
runs Python the way Python was designed

00:10:30,690 --> 00:10:33,870
to be run and interpreter running over a

00:10:32,550 --> 00:10:35,580
directory of source code

00:10:33,870 --> 00:10:37,140
the only thing briefcase does is

00:10:35,580 --> 00:10:39,090
automate the process of getting them

00:10:37,140 --> 00:10:40,590
working interpreter to an end user in a

00:10:39,090 --> 00:10:43,410
way that doesn't require them to know

00:10:40,590 --> 00:10:44,910
anything about Python briefcase is also

00:10:43,410 --> 00:10:46,560
cross-platform which means that you have

00:10:44,910 --> 00:10:48,420
a single configuration file that

00:10:46,560 --> 00:10:51,240
produces installs for Mac OS Windows

00:10:48,420 --> 00:10:52,980
Linux iOS and Android and that means you

00:10:51,240 --> 00:10:54,270
don't have duplicated configurations for

00:10:52,980 --> 00:10:58,680
distributing your app removing a

00:10:54,270 --> 00:11:00,270
potential source of error okay so enough

00:10:58,680 --> 00:11:02,460
yak shaving show me the code what I'm

00:11:00,270 --> 00:11:04,410
gonna do today will do now is walk you

00:11:02,460 --> 00:11:06,450
through the life cycle of packaging a

00:11:04,410 --> 00:11:07,890
project with briefcase if you wonder

00:11:06,450 --> 00:11:09,510
what detailed walkthrough there be where

00:11:07,890 --> 00:11:12,030
tutorial at dock stop being weird org

00:11:09,510 --> 00:11:12,450
has a fully web demo that gives a lot

00:11:12,030 --> 00:11:14,370
more XP

00:11:12,450 --> 00:11:17,100
I'm going to be able to give you in 25

00:11:14,370 --> 00:11:18,900
minutes so let's start a new project

00:11:17,100 --> 00:11:20,820
create a new virtual environment and we

00:11:18,900 --> 00:11:22,320
install briefcase I am giving the

00:11:20,820 --> 00:11:24,030
instructions here with unit conventions

00:11:22,320 --> 00:11:25,590
but briefcase does also work on Windows

00:11:24,030 --> 00:11:27,980
the beware tutorial gives the commands

00:11:25,590 --> 00:11:30,540
for both if you've done how to convert

00:11:27,980 --> 00:11:32,400
if you want to start a completely new

00:11:30,540 --> 00:11:34,800
project briefcase has a wizard to help

00:11:32,400 --> 00:11:36,090
you run briefcase new and you'll be

00:11:34,800 --> 00:11:37,860
presented with lists of questions with

00:11:36,090 --> 00:11:39,360
some explanatory text and you'll be

00:11:37,860 --> 00:11:40,920
prompted for a bunch of details you'll

00:11:39,360 --> 00:11:42,750
be prompted for a formal name that's the

00:11:40,920 --> 00:11:44,730
name that you show to humans as the name

00:11:42,750 --> 00:11:46,050
of your app and an app name which is the

00:11:44,730 --> 00:11:48,420
Python eyes version of your name

00:11:46,050 --> 00:11:50,190
something you would pip install you'll

00:11:48,420 --> 00:11:52,140
be asked for a bundle that's used for

00:11:50,190 --> 00:11:55,380
name spacing to separate my hello world

00:11:52,140 --> 00:11:57,450
from your hello world bundle ID is a

00:11:55,380 --> 00:11:59,400
common format used by app stores it's

00:11:57,450 --> 00:12:01,620
usually a reversed ordering of a domain

00:11:59,400 --> 00:12:03,270
name that you control that bundle is

00:12:01,620 --> 00:12:06,150
then combined with an app name to make a

00:12:03,270 --> 00:12:08,940
full bundle ID for your app so don't be

00:12:06,150 --> 00:12:10,530
weird dot hello world example you'll be

00:12:08,940 --> 00:12:12,660
asked for a project name a briefcase

00:12:10,530 --> 00:12:14,190
project can include multiple distributed

00:12:12,660 --> 00:12:16,110
apps so you can build multiple app

00:12:14,190 --> 00:12:17,610
bundles from a single code repository

00:12:16,110 --> 00:12:18,990
but if you're only gonna have one app

00:12:17,610 --> 00:12:20,970
you can use the full name as your

00:12:18,990 --> 00:12:22,260
project though you'll be asked for a

00:12:20,970 --> 00:12:24,540
one-line description of the project

00:12:22,260 --> 00:12:26,220
you'll be asked for the author's name

00:12:24,540 --> 00:12:28,980
and emails is used in help texts and

00:12:26,220 --> 00:12:30,330
copyright labels a URL for the project a

00:12:28,980 --> 00:12:32,820
license because it was driven in code

00:12:30,330 --> 00:12:34,740
you need a license and lastly a GUI

00:12:32,820 --> 00:12:36,540
framework a briefcase provides a

00:12:34,740 --> 00:12:37,950
template for toga beware zone GUI

00:12:36,540 --> 00:12:39,930
framework but there's also a PI site

00:12:37,950 --> 00:12:41,430
template as well as an empty app that

00:12:39,930 --> 00:12:43,530
you can fill with whatever framework you

00:12:41,430 --> 00:12:45,150
happen to want to use and what you'll

00:12:43,530 --> 00:12:48,000
get at the end of the day is a complete

00:12:45,150 --> 00:12:49,800
stub project including enough code to

00:12:48,000 --> 00:12:51,450
start an app application icons in a

00:12:49,800 --> 00:12:53,670
variety of formats and some project

00:12:51,450 --> 00:12:55,500
metadata you also notice that the dap

00:12:53,670 --> 00:12:56,970
the dash and the application name here

00:12:55,500 --> 00:12:59,340
has been normalized an underscore so the

00:12:56,970 --> 00:13:01,530
app name hello - well has been converted

00:12:59,340 --> 00:13:03,060
into hello underscore world when it

00:13:01,530 --> 00:13:06,480
becomes a source code source code

00:13:03,060 --> 00:13:08,070
directory you also get the same files

00:13:06,480 --> 00:13:09,210
regardless of what GUI framework you

00:13:08,070 --> 00:13:11,430
pick the only difference with the

00:13:09,210 --> 00:13:13,440
contents of the app dot pi the main dot

00:13:11,430 --> 00:13:16,050
pi and some of the values in the PI

00:13:13,440 --> 00:13:17,970
project on all the metadata that is

00:13:16,050 --> 00:13:19,320
particular interest here is in pi

00:13:17,970 --> 00:13:21,410
project octonal that's the file that

00:13:19,320 --> 00:13:23,940
contains all the details about your app

00:13:21,410 --> 00:13:25,550
the contents of this file will match the

00:13:23,940 --> 00:13:27,230
answers that you gave in the wizard

00:13:25,550 --> 00:13:28,760
there's a build system section which is

00:13:27,230 --> 00:13:29,990
a requirement of pet 5 a team that

00:13:28,760 --> 00:13:32,570
declares that this is a briefcase

00:13:29,990 --> 00:13:34,430
project and all the briefcase options

00:13:32,570 --> 00:13:36,890
are then defined in a tool briefcase

00:13:34,430 --> 00:13:38,390
section the taller the project level

00:13:36,890 --> 00:13:42,200
options are defined in that root level

00:13:38,390 --> 00:13:44,300
tool briefcase individual applications

00:13:42,200 --> 00:13:47,300
then have their own sections so this

00:13:44,300 --> 00:13:49,940
configuration file defines hello - world

00:13:47,300 --> 00:13:52,640
as an app that's the app name with a

00:13:49,940 --> 00:13:54,620
formal name of hello world and so on the

00:13:52,640 --> 00:13:56,990
configuration for the hello world app is

00:13:54,620 --> 00:13:58,970
comprised or is composed out of the

00:13:56,990 --> 00:14:01,490
project settings overridden by the

00:13:58,970 --> 00:14:03,620
application settings so the hello world

00:14:01,490 --> 00:14:05,870
app will inherit the project level

00:14:03,620 --> 00:14:07,610
version definition and if you wanted to

00:14:05,870 --> 00:14:09,380
have a different author name for this

00:14:07,610 --> 00:14:11,209
application you could do so by adding an

00:14:09,380 --> 00:14:13,010
author name into the apps configuration

00:14:11,209 --> 00:14:14,540
block and to be clear this is a

00:14:13,010 --> 00:14:15,649
briefcase specific behavior not

00:14:14,540 --> 00:14:19,519
something you'll see in necessarily

00:14:15,649 --> 00:14:21,110
another file 18 tools there are two

00:14:19,519 --> 00:14:23,470
exceptions the exceptions to this

00:14:21,110 --> 00:14:26,600
overriding behavior source and requires

00:14:23,470 --> 00:14:28,640
sources defines the list of directories

00:14:26,600 --> 00:14:30,620
of source code that you want to include

00:14:28,640 --> 00:14:32,690
in your application so here we're saying

00:14:30,620 --> 00:14:34,610
that the source hello world directory is

00:14:32,690 --> 00:14:36,860
part of this application that entire

00:14:34,610 --> 00:14:39,290
folder will be copied recursively into

00:14:36,860 --> 00:14:40,700
our packaged application the only

00:14:39,290 --> 00:14:42,320
requirement on this is that one of your

00:14:40,700 --> 00:14:45,110
source directories needs to match the

00:14:42,320 --> 00:14:47,360
name of your application itself requires

00:14:45,110 --> 00:14:49,070
defines the Python requirements for your

00:14:47,360 --> 00:14:50,570
application again this is just as a list

00:14:49,070 --> 00:14:53,079
using the same are same format that

00:14:50,570 --> 00:14:55,579
you'd use as an argument cribbage door

00:14:53,079 --> 00:14:57,829
sources and requires are cumulative

00:14:55,579 --> 00:14:59,180
settings so if you specify a sources

00:14:57,829 --> 00:15:01,130
definition at the project level

00:14:59,180 --> 00:15:03,140
any application level sources will be

00:15:01,130 --> 00:15:04,180
appended to that list to find out the

00:15:03,140 --> 00:15:06,649
project

00:15:04,180 --> 00:15:08,390
icons also deserve a special mention

00:15:06,649 --> 00:15:11,120
here you'll notice that the icon setting

00:15:08,390 --> 00:15:12,680
doesn't include a file format extension

00:15:11,120 --> 00:15:14,690
that's because briefcase uses the

00:15:12,680 --> 00:15:16,880
provided value as a base name and

00:15:14,690 --> 00:15:19,699
appends the format depending upon the

00:15:16,880 --> 00:15:22,100
platform so I see over windows PNG for

00:15:19,699 --> 00:15:23,810
Linux so on some platforms you have to

00:15:22,100 --> 00:15:25,970
provide multiple icons in multiple

00:15:23,810 --> 00:15:27,529
resolutions and those size modifiers

00:15:25,970 --> 00:15:31,010
will be appended to the filename as well

00:15:27,529 --> 00:15:33,649
as the extension you can also specify

00:15:31,010 --> 00:15:35,720
options that are platform specific by

00:15:33,649 --> 00:15:37,640
adding a configuration section for that

00:15:35,720 --> 00:15:39,370
platform the generated pipe project

00:15:37,640 --> 00:15:41,290
optimal will include a section for

00:15:39,370 --> 00:15:44,529
all of the supported platforms mac OS

00:15:41,290 --> 00:15:46,720
linux windows by OS and android so here

00:15:44,529 --> 00:15:48,790
we've specified a PI tool dock briefcase

00:15:46,720 --> 00:15:50,980
tapped on HelloWorld dot macaws

00:15:48,790 --> 00:15:54,070
sectioning those options will only apply

00:15:50,980 --> 00:15:56,290
to macaws builds of this app now again

00:15:54,070 --> 00:15:58,540
sources and requires a cumulative all

00:15:56,290 --> 00:16:01,060
other settings will override apt level

00:15:58,540 --> 00:16:02,440
or project level that values the content

00:16:01,060 --> 00:16:03,640
here is what you get if you picked ogre

00:16:02,440 --> 00:16:05,260
and in the wizard but you'll get

00:16:03,640 --> 00:16:07,420
different content if you pick PI site or

00:16:05,260 --> 00:16:09,040
no fur you can actually even go a layer

00:16:07,420 --> 00:16:12,930
deeper still if you define a tool

00:16:09,040 --> 00:16:15,820
briefcase app dot hello world macaw BMG

00:16:12,930 --> 00:16:18,700
those settings will only apply to dmg

00:16:15,820 --> 00:16:20,680
builds on MacOS you might do this to

00:16:18,700 --> 00:16:23,050
specify an icon for the dmg installer

00:16:20,680 --> 00:16:24,640
for example and if you wanted to add a

00:16:23,050 --> 00:16:27,130
second app to your project definition

00:16:24,640 --> 00:16:29,140
you can define a tool briefcase tap got

00:16:27,130 --> 00:16:34,660
second app section and then so on

00:16:29,140 --> 00:16:36,760
platform and so on now this stub pipe

00:16:34,660 --> 00:16:38,380
project optimal file has been generated

00:16:36,760 --> 00:16:40,240
for you by briefcase new but you don't

00:16:38,380 --> 00:16:41,589
have to use that wizard if you've got an

00:16:40,240 --> 00:16:44,410
existing project you can roll your own

00:16:41,589 --> 00:16:46,120
pipe project AMA from scratch so however

00:16:44,410 --> 00:16:48,339
you've created it you've now got a

00:16:46,120 --> 00:16:50,260
briefcase configuration file how do we

00:16:48,339 --> 00:16:52,650
use it well the first thing you probably

00:16:50,260 --> 00:16:54,970
ought to do is just see if your app runs

00:16:52,650 --> 00:16:56,920
briefcase includes a developer mode

00:16:54,970 --> 00:16:59,620
which lets you rapidly iterate on your

00:16:56,920 --> 00:17:01,930
configuration if you run briefcase devs

00:16:59,620 --> 00:17:04,030
briefcase will use your PI project Ammal

00:17:01,930 --> 00:17:05,679
to work out how to run your project and

00:17:04,030 --> 00:17:07,329
then run it in your local virtual

00:17:05,679 --> 00:17:09,309
environment the first time you do this

00:17:07,329 --> 00:17:10,720
it will look at your configuration file

00:17:09,309 --> 00:17:12,760
install all of your declared

00:17:10,720 --> 00:17:15,220
requirements and then it will install

00:17:12,760 --> 00:17:16,720
your app now keep in mind the design

00:17:15,220 --> 00:17:19,240
notification motivation for briefcase

00:17:16,720 --> 00:17:21,100
the dumbest thing that can possibly work

00:17:19,240 --> 00:17:23,050
briefcase dev is nothing more than

00:17:21,100 --> 00:17:24,220
shorthand for a pip install for a list

00:17:23,050 --> 00:17:27,160
of requirements for your current

00:17:24,220 --> 00:17:29,350
platform followed by Python - M hello

00:17:27,160 --> 00:17:31,059
world running your application on

00:17:29,350 --> 00:17:33,309
subsequent runs the dependency step

00:17:31,059 --> 00:17:35,200
won't be executed by default briefcase

00:17:33,309 --> 00:17:36,970
will only start the project just by

00:17:35,200 --> 00:17:38,710
itself if you add or modify dependency

00:17:36,970 --> 00:17:41,410
you'll need to add a - D flag to force

00:17:38,710 --> 00:17:43,090
an update of dependencies and if you've

00:17:41,410 --> 00:17:44,620
used the wizard what you'll get is a

00:17:43,090 --> 00:17:46,090
working application it will be an empty

00:17:44,620 --> 00:17:48,190
window but it'll be a working

00:17:46,090 --> 00:17:49,570
application and you can now iterate on

00:17:48,190 --> 00:17:51,240
the code in your app adding features

00:17:49,570 --> 00:17:52,770
fixing bugs whatever you need to do

00:17:51,240 --> 00:17:53,970
eventually though the

00:17:52,770 --> 00:17:56,610
we'll come when you're ready to package

00:17:53,970 --> 00:17:58,950
your app for distribution the first step

00:17:56,610 --> 00:18:00,630
will be to create your app to do this

00:17:58,950 --> 00:18:03,059
you need to invoke a briefcase create

00:18:00,630 --> 00:18:03,929
this will do a bunch of things first it

00:18:03,059 --> 00:18:05,040
will look at the platform you're

00:18:03,929 --> 00:18:07,650
currently on and get an application

00:18:05,040 --> 00:18:09,270
template for that platform so I'm

00:18:07,650 --> 00:18:11,940
running on Mac OS so it will use the

00:18:09,270 --> 00:18:13,800
MCOs dmg template secondly it will

00:18:11,940 --> 00:18:15,809
obtain obtain a support package a

00:18:13,800 --> 00:18:18,210
support package is a version of Python

00:18:15,809 --> 00:18:19,800
that can be embedded into your app for

00:18:18,210 --> 00:18:21,840
Windows we use the officially

00:18:19,800 --> 00:18:23,820
distributed Python embedded package for

00:18:21,840 --> 00:18:26,100
every other platform be where maintains

00:18:23,820 --> 00:18:27,540
a support package whatever your platform

00:18:26,100 --> 00:18:29,250
briefcase will download the support

00:18:27,540 --> 00:18:32,610
package unpack it into the application

00:18:29,250 --> 00:18:34,290
template that was just created briefcase

00:18:32,610 --> 00:18:36,390
then downloads and installs your apps

00:18:34,290 --> 00:18:38,160
dependencies but it doesn't install them

00:18:36,390 --> 00:18:40,140
into your local virtual environment

00:18:38,160 --> 00:18:43,470
installs them into the application

00:18:40,140 --> 00:18:45,090
template briefcase then installs the

00:18:43,470 --> 00:18:46,290
application specific bits or the source

00:18:45,090 --> 00:18:48,720
code for your app and all the

00:18:46,290 --> 00:18:50,460
application resources like icons then

00:18:48,720 --> 00:18:52,140
it's done you've now got a complete

00:18:50,460 --> 00:18:53,910
application template your project

00:18:52,140 --> 00:18:55,950
directory will now contain a platform

00:18:53,910 --> 00:18:58,140
folder so a folder called MacOS in this

00:18:55,950 --> 00:19:00,630
case inside that folder will be a folder

00:18:58,140 --> 00:19:03,510
for every app in your project the next

00:19:00,630 --> 00:19:04,650
step is to build that app and I'm sure

00:19:03,510 --> 00:19:07,170
you'll be shocked to hear the command to

00:19:04,650 --> 00:19:08,460
do this is briefcase build now on

00:19:07,170 --> 00:19:10,020
backups this actually does nothing

00:19:08,460 --> 00:19:11,490
because an application or the

00:19:10,020 --> 00:19:14,250
application template that was generated

00:19:11,490 --> 00:19:16,140
is actually executable as it's a macros

00:19:14,250 --> 00:19:18,000
app is nothing more than a directory in

00:19:16,140 --> 00:19:20,040
a particular format with some metadata

00:19:18,000 --> 00:19:21,570
in a known location on other platforms

00:19:20,040 --> 00:19:23,280
there may be some compilation that needs

00:19:21,570 --> 00:19:26,520
to be done here and brief case managers

00:19:23,280 --> 00:19:27,600
invoking the compiler and at this point

00:19:26,520 --> 00:19:29,640
there will be a folder in your project

00:19:27,600 --> 00:19:31,290
matching your platform and that folder

00:19:29,640 --> 00:19:32,880
will be an application along with any

00:19:31,290 --> 00:19:35,040
files created as part of that dual

00:19:32,880 --> 00:19:36,630
process in this case it's about course

00:19:35,040 --> 00:19:39,900
app if you were to click on that icon an

00:19:36,630 --> 00:19:41,070
application would start or you could

00:19:39,900 --> 00:19:43,080
keep it or console-based and use

00:19:41,070 --> 00:19:46,170
briefcase you can run your app with mr.

00:19:43,080 --> 00:19:48,780
gates run and what you should see is a

00:19:46,170 --> 00:19:50,100
running application now it is not a very

00:19:48,780 --> 00:19:51,510
interesting application but it is a

00:19:50,100 --> 00:19:53,190
running application whatever that means

00:19:51,510 --> 00:19:55,020
on your platform of choice on Mac OS

00:19:53,190 --> 00:19:56,250
that means an icon in your taskbar an

00:19:55,020 --> 00:19:59,820
application menu matching your

00:19:56,250 --> 00:20:01,679
application name the last step is to

00:19:59,820 --> 00:20:03,660
package your app with briefcase package

00:20:01,679 --> 00:20:05,070
this does any final packaging that has

00:20:03,660 --> 00:20:05,860
to be done before distribution so

00:20:05,070 --> 00:20:08,320
creating an

00:20:05,860 --> 00:20:09,490
doing code signing and so on code

00:20:08,320 --> 00:20:11,529
signing support is currently in the

00:20:09,490 --> 00:20:13,149
early stages of development only MacOS

00:20:11,529 --> 00:20:14,890
apps are currently signed and they're

00:20:13,149 --> 00:20:16,600
currently only signed not notarized if

00:20:14,890 --> 00:20:17,950
you know what that means this is an area

00:20:16,600 --> 00:20:19,090
where more work is needed but the pieces

00:20:17,950 --> 00:20:21,970
are all in place

00:20:19,090 --> 00:20:23,679
but after packaging the platform folder

00:20:21,970 --> 00:20:25,149
in your project will contain an artifact

00:20:23,679 --> 00:20:27,549
that could be uploaded for distribution

00:20:25,149 --> 00:20:28,659
a dmg file and MSI whatever is

00:20:27,549 --> 00:20:32,590
appropriate for the platform of choice

00:20:28,659 --> 00:20:33,880
so we have packaged their app then we

00:20:32,590 --> 00:20:35,230
discover a problem we need to update our

00:20:33,880 --> 00:20:38,169
code do we need to go through this whole

00:20:35,230 --> 00:20:40,179
process again no for that there is brief

00:20:38,169 --> 00:20:42,490
case update by default this will

00:20:40,179 --> 00:20:44,019
reinstall just the code for the app if

00:20:42,490 --> 00:20:45,730
you want to update the dependencies well

00:20:44,019 --> 00:20:47,470
you can specify - D if you want to

00:20:45,730 --> 00:20:50,799
update the application resources like

00:20:47,470 --> 00:20:52,480
icons you can specify - are some other

00:20:50,799 --> 00:20:54,940
features of briefcase that are worthy of

00:20:52,480 --> 00:20:57,100
note briefcase create is a shorthand

00:20:54,940 --> 00:20:58,360
your platform is implied from the

00:20:57,100 --> 00:20:59,799
platform where you are currently running

00:20:58,360 --> 00:21:01,510
the code in the output format is the

00:20:59,799 --> 00:21:04,360
default output format for that platform

00:21:01,510 --> 00:21:06,429
if you're on a Mac briefcase create is

00:21:04,360 --> 00:21:08,500
shorthand for briefcase create macros

00:21:06,429 --> 00:21:10,000
dmg now if you wanted to create a

00:21:08,500 --> 00:21:12,100
different output format say you wanted a

00:21:10,000 --> 00:21:15,220
raw rap not a dmg file you can invoke

00:21:12,100 --> 00:21:16,179
briefcase create that cost app and if

00:21:15,220 --> 00:21:17,620
you wanted to target a completely

00:21:16,179 --> 00:21:20,169
different platform briefcase create

00:21:17,620 --> 00:21:21,429
platform now in practice that's not

00:21:20,169 --> 00:21:23,320
especially useful because you can't

00:21:21,429 --> 00:21:25,120
create a Mac cause dmg on Windows or

00:21:23,320 --> 00:21:27,880
Windows MSI on Mac because the tools

00:21:25,120 --> 00:21:29,889
required are platform specific but there

00:21:27,880 --> 00:21:31,029
is one important use case for it and

00:21:29,889 --> 00:21:33,730
we'll come to that in a moment a

00:21:31,029 --> 00:21:35,620
briefcase will also imply early steps if

00:21:33,730 --> 00:21:37,360
they are needed if you have a completely

00:21:35,620 --> 00:21:39,669
fresh project straight out of briefcase

00:21:37,360 --> 00:21:41,799
new and you run briefcase in a briefcase

00:21:39,669 --> 00:21:43,510
run briefcase will detect it there isn't

00:21:41,799 --> 00:21:46,419
a template and create it and then build

00:21:43,510 --> 00:21:48,309
it and then run it briefcase run also

00:21:46,419 --> 00:21:50,169
allows for a - new option that updates

00:21:48,309 --> 00:21:52,059
the app before execution so your

00:21:50,169 --> 00:21:56,529
development cycle could be as short as

00:21:52,059 --> 00:21:58,149
briefcase run - you briefcase also

00:21:56,529 --> 00:22:00,460
checks whether you've got the necessary

00:21:58,149 --> 00:22:01,840
tools to compile and if possible manages

00:22:00,460 --> 00:22:03,700
downloading those tools for you

00:22:01,840 --> 00:22:04,570
accepting and you accepting any licenses

00:22:03,700 --> 00:22:06,909
and so on

00:22:04,570 --> 00:22:08,860
if they can't install the tools for you

00:22:06,909 --> 00:22:10,539
like a card on MacOS you've got to get

00:22:08,860 --> 00:22:12,279
Xcode through the App Store it will at

00:22:10,539 --> 00:22:13,630
least tell you explicitly which tools

00:22:12,279 --> 00:22:15,880
you need to get and where you go to get

00:22:13,630 --> 00:22:18,250
them and if you're ever unsure what your

00:22:15,880 --> 00:22:19,450
options are you can add - - help and get

00:22:18,250 --> 00:22:21,430
a full rundown

00:22:19,450 --> 00:22:22,330
now the other thing that briefcase does

00:22:21,430 --> 00:22:24,850
that I haven't mentioned so far

00:22:22,330 --> 00:22:26,170
deploying to mobile platforms this is

00:22:24,850 --> 00:22:27,550
the one place where specifying a

00:22:26,170 --> 00:22:29,230
platform it does work and he is

00:22:27,550 --> 00:22:31,270
necessary if you want to create an iOS

00:22:29,230 --> 00:22:33,070
app the steps are exactly the same as

00:22:31,270 --> 00:22:34,570
creating any other app you just add iOS

00:22:33,070 --> 00:22:37,270
to all the commands to specify a

00:22:34,570 --> 00:22:40,420
different platform briefcase create iOS

00:22:37,270 --> 00:22:43,300
briefcase build iOS and so on similarly

00:22:40,420 --> 00:22:45,160
for android briefcase create Android iOS

00:22:43,300 --> 00:22:46,600
builds only work on Mac OS because of

00:22:45,160 --> 00:22:48,220
the underlying tooling requirements but

00:22:46,600 --> 00:22:50,380
Android builds will work on Mac most

00:22:48,220 --> 00:22:52,450
Linux all windows the build and run

00:22:50,380 --> 00:22:54,520
steps are also slightly different when

00:22:52,450 --> 00:22:56,890
you compile an application you need to

00:22:54,520 --> 00:22:59,680
target a specific device if you run

00:22:56,890 --> 00:23:01,240
briefcase run iOS briefcase will inspect

00:22:59,680 --> 00:23:02,590
your system find out what devices are

00:23:01,240 --> 00:23:04,810
available to ask you what device you

00:23:02,590 --> 00:23:06,010
want to target if you shortcut back you

00:23:04,810 --> 00:23:08,500
want a shortcut that question you can

00:23:06,010 --> 00:23:10,480
specify - D to give a device ID or a

00:23:08,500 --> 00:23:12,520
device description like an iPhone 11

00:23:10,480 --> 00:23:14,650
iPhone 11 running iOS eleven point three

00:23:12,520 --> 00:23:16,720
there's any ambiguity so if you've got

00:23:14,650 --> 00:23:18,190
multiple iPhone 11 simulators running

00:23:16,720 --> 00:23:20,740
you'll be asked to resolve the

00:23:18,190 --> 00:23:23,110
discrepancy Android does the same thing

00:23:20,740 --> 00:23:24,490
creating Android simulators for you or

00:23:23,110 --> 00:23:28,240
emulators for you starting those

00:23:24,490 --> 00:23:30,340
emulators if necessary once your app is

00:23:28,240 --> 00:23:31,870
running it is running as normal Python

00:23:30,340 --> 00:23:33,850
code running in the normal Python way

00:23:31,870 --> 00:23:35,290
but it might be useful to get access to

00:23:33,850 --> 00:23:36,970
some of this packaging metadata at

00:23:35,290 --> 00:23:39,820
runtime and to support this briefcase

00:23:36,970 --> 00:23:42,250
generates pep 566 compliant packaging

00:23:39,820 --> 00:23:44,380
metadata if you've got a hello world app

00:23:42,250 --> 00:23:47,440
you can use import live metadata to

00:23:44,380 --> 00:23:49,060
access your briefcase metadata import

00:23:47,440 --> 00:23:50,350
live dock metadata is added in Python 3

00:23:49,060 --> 00:23:52,240
point 8 but there is a backwards

00:23:50,350 --> 00:23:54,640
compatibility shim that you can use for

00:23:52,240 --> 00:23:56,290
older python versions the keys aren't

00:23:54,640 --> 00:23:58,270
exactly the same as they are a briefcase

00:23:56,290 --> 00:24:01,060
of specification or app name for example

00:23:58,270 --> 00:24:03,970
is named with capital n that's done for

00:24:01,060 --> 00:24:06,040
pet five six six compatibility all right

00:24:03,970 --> 00:24:08,800
so briefcase sounds awesome awesome

00:24:06,040 --> 00:24:10,480
what's the catch well there are plenty

00:24:08,800 --> 00:24:11,620
plenty of aspects of the individual

00:24:10,480 --> 00:24:13,720
platforms that could definitely be

00:24:11,620 --> 00:24:15,280
improved Linux app images don't

00:24:13,720 --> 00:24:17,170
currently support desktop entries at

00:24:15,280 --> 00:24:18,850
present Windows apps aren't currently

00:24:17,170 --> 00:24:20,610
code signed and they currently reported

00:24:18,850 --> 00:24:23,230
the system inspector as placton dot exe

00:24:20,610 --> 00:24:25,330
iOS can't currently deployed physical

00:24:23,230 --> 00:24:28,420
devices Android support doesn't do

00:24:25,330 --> 00:24:30,550
code-signing mac OS doesn't do note at

00:24:28,420 --> 00:24:33,100
notarization these are all solvable

00:24:30,550 --> 00:24:34,750
problems like they need time attention

00:24:33,100 --> 00:24:36,280
a little bit of expertise or at least a

00:24:34,750 --> 00:24:37,750
little bit of research to work out what

00:24:36,280 --> 00:24:38,650
extra options we need to pass into a

00:24:37,750 --> 00:24:41,380
compiled command

00:24:38,650 --> 00:24:43,900
the biggest downside no pun intended is

00:24:41,380 --> 00:24:45,309
the size of the support package the

00:24:43,900 --> 00:24:47,590
default briefcase support package

00:24:45,309 --> 00:24:49,600
includes a full Python the install which

00:24:47,590 --> 00:24:51,789
means the briefcase app format cost is

00:24:49,600 --> 00:24:53,140
about two hundred megabytes now that's

00:24:51,789 --> 00:24:55,480
not unheard of when it comes to

00:24:53,140 --> 00:24:57,760
applications in the wild slack is 174

00:24:55,480 --> 00:25:00,070
megabytes but they're doing it to isn't

00:24:57,760 --> 00:25:01,900
really a good excuse the good news

00:25:00,070 --> 00:25:05,049
though is that this can also be fixed

00:25:01,900 --> 00:25:07,630
this hello world app contains an entire

00:25:05,049 --> 00:25:10,750
Python standard library it includes bz2

00:25:07,630 --> 00:25:13,720
and HTTP lip and all of dis to tools and

00:25:10,750 --> 00:25:16,750
much more and then never used in many

00:25:13,720 --> 00:25:18,309
most apps so there is a lot that can be

00:25:16,750 --> 00:25:19,900
optimized here the immediate workaround

00:25:18,309 --> 00:25:22,480
is the briefcase will allow you to

00:25:19,900 --> 00:25:24,220
specify your own support package so once

00:25:22,480 --> 00:25:26,289
you know that your app only needs a

00:25:24,220 --> 00:25:28,270
specific subset on the standard library

00:25:26,289 --> 00:25:31,150
you can build a hand-tuned version of a

00:25:28,270 --> 00:25:33,429
support package and use that and with

00:25:31,150 --> 00:25:36,010
that approach hello world easily reduces

00:25:33,429 --> 00:25:38,679
to around 30 megabytes as little as 15

00:25:36,010 --> 00:25:40,179
if you try really hard that does require

00:25:38,679 --> 00:25:42,400
hand tuning though and the hand tuning

00:25:40,179 --> 00:25:43,929
process that isn't very user friendly at

00:25:42,400 --> 00:25:45,580
present there is a lot that could be

00:25:43,929 --> 00:25:47,679
done to improve that user experience

00:25:45,580 --> 00:25:49,299
there is also an intermittent discussion

00:25:47,679 --> 00:25:51,130
on the Python core team about a kernel

00:25:49,299 --> 00:25:52,659
Titan the idea of an official Titan

00:25:51,130 --> 00:25:54,520
distribution that is the minimum viable

00:25:52,659 --> 00:25:56,830
Tyson with the rest of the standard

00:25:54,520 --> 00:26:00,000
library being imported as needed that

00:25:56,830 --> 00:26:02,710
would be absolute gold for briefcase

00:26:00,000 --> 00:26:04,330
briefcase isn't future complete by any

00:26:02,710 --> 00:26:05,500
stretch it works well but there are lots

00:26:04,330 --> 00:26:07,150
of ways that it could be improved or

00:26:05,500 --> 00:26:08,530
enhanced I've already flagged some of

00:26:07,150 --> 00:26:10,390
the obvious potential improvements for

00:26:08,530 --> 00:26:12,220
existing platforms but we could also add

00:26:10,390 --> 00:26:14,140
support for new platforms like set-top

00:26:12,220 --> 00:26:15,760
boxes and smartwatches or add support

00:26:14,140 --> 00:26:17,980
for other packaging formats like flat

00:26:15,760 --> 00:26:19,750
tag or snap on Linux having these

00:26:17,980 --> 00:26:21,820
backends actually isn't that much work

00:26:19,750 --> 00:26:23,590
it mostly requires a little expertise or

00:26:21,820 --> 00:26:26,380
research on how to drive the packaging

00:26:23,590 --> 00:26:27,429
tools for those platforms I'd also like

00:26:26,380 --> 00:26:29,710
to be able to provide an answer the

00:26:27,429 --> 00:26:30,970
command-line apps that's mostly a design

00:26:29,710 --> 00:26:32,919
question at this point rather than a

00:26:30,970 --> 00:26:35,260
technical limitation what does the

00:26:32,919 --> 00:26:38,980
briefcase model of app distribution mean

00:26:35,260 --> 00:26:40,480
for command line apps most of my testing

00:26:38,980 --> 00:26:41,799
has also been based on Tiger but one of

00:26:40,480 --> 00:26:43,450
the biggest areas of potential

00:26:41,799 --> 00:26:45,179
improvement is testing that the support

00:26:43,450 --> 00:26:46,990
works for other GUI frameworks

00:26:45,179 --> 00:26:48,880
personally I am a spare

00:26:46,990 --> 00:26:50,830
interested in seeing tests of gaming

00:26:48,880 --> 00:26:53,170
libraries like pi game or pursued by

00:26:50,830 --> 00:26:54,490
their because I think Python gaming is

00:26:53,170 --> 00:26:55,900
one of the biggest areas where briefcase

00:26:54,490 --> 00:26:57,850
has potential making it easy to

00:26:55,900 --> 00:27:00,160
distribute games to gamers not to

00:26:57,850 --> 00:27:03,100
developers and potentially to mobile app

00:27:00,160 --> 00:27:04,450
stores as well lastly at publication

00:27:03,100 --> 00:27:06,640
briefcase currently stops with the

00:27:04,450 --> 00:27:08,950
process of packaging your app however

00:27:06,640 --> 00:27:10,990
app stores all have api's to support

00:27:08,950 --> 00:27:13,179
what about a publication so potentially

00:27:10,990 --> 00:27:15,820
briefcase could manage that process too

00:27:13,179 --> 00:27:17,950
does a one command publication process

00:27:15,820 --> 00:27:20,530
pushing to steam sound interesting to

00:27:17,950 --> 00:27:22,240
anyone adding all those features though

00:27:20,530 --> 00:27:24,190
that's dependent upon someone having the

00:27:22,240 --> 00:27:25,300
time to implement them I would like to

00:27:24,190 --> 00:27:27,280
be able to spend a whole lot more time

00:27:25,300 --> 00:27:28,480
working on briefcase and be where as a

00:27:27,280 --> 00:27:29,890
whole but at the moment this is

00:27:28,480 --> 00:27:32,230
something I do mostly in my spare time

00:27:29,890 --> 00:27:33,670
if you'd like to support my work on the

00:27:32,230 --> 00:27:35,650
briefcase on briefcase and the beware

00:27:33,670 --> 00:27:37,360
project you can join the project as a

00:27:35,650 --> 00:27:39,670
financial member you can also back me on

00:27:37,360 --> 00:27:41,200
github sponsors that income is currently

00:27:39,670 --> 00:27:42,610
enough to cover stickers hosting and

00:27:41,200 --> 00:27:44,020
things like that but it's nowhere near

00:27:42,610 --> 00:27:44,380
near enough to make this of all time

00:27:44,020 --> 00:27:46,750
geek

00:27:44,380 --> 00:27:48,550
if you've got ideas or experience that

00:27:46,750 --> 00:27:49,960
might might help an open source project

00:27:48,550 --> 00:27:51,490
funders development or you'd like to

00:27:49,960 --> 00:27:54,010
know more about the project or kidding

00:27:51,490 --> 00:27:56,770
I'd like to get involved please get in

00:27:54,010 --> 00:27:58,780
touch thank you all very much and I hope

00:27:56,770 --> 00:28:01,530
I'll see you online and hopefully in

00:27:58,780 --> 00:28:01,530

YouTube URL: https://www.youtube.com/watch?v=WjMDXDHBn1I


