Title: Talk: Emmanuelle Gouillart - Building interactive applications for image data
Publication date: 2021-05-05
Playlist: PyCon US 2020
Description: 
	Presented by:
Emmanuelle Gouillart

Images are an important class of data in science or business. Tasks such as quantification of organ geometry in medical imaging, or construction of training sets and pipelines for machine learning models, typically rely on a combination of interactive user annotations and image processing algorithms. In this talk I will present several open-source Python packages for interactive image processing, and how to combine them for advanced applications.

Dash is an open-source framework for building interactive analytical web applications in pure Python (or R). It comes with a set of interactive components which are the bricks from which to build easily custom analytical applications, such as figures using the plotly visualization library, interactive data tables, dropdowns, sliders, etc. These components interact together thanks to callbacks fired when a component is modified. After a demo of how to build an application with Dash, I will show how to interact with image data within Dash for exploring image characteristics or annotating images with various kinds of shapes (from rectangular bounding-box selection to freehand-brush painting of objects).

In addition, Dash applications can make use of Python data-science packages in order to use advanced algorithms to process user-provided annotations. I will focus mostly on scikit-image, and briefly mention machine learning / deep learning tools as well. scikit-image is a popular library for processing 2D and 3D images as Numpy numerical arrays, with a focus on scientific imaging and pedagogical example-based documentation. I will show how to use scikit-image for various image processing tasks, from basic preprocessing (e.g. normalizing image geometry or exposure) to advanced object segmentation tasks. I will finally show how combining scikit-image and Dash can result in advanced image processing applications, which can be written quickly thanks to simple APIs and thorough documentation.
Captions: 
	00:00:13,619 --> 00:00:22,300
hi everyone my name is in managua I'm a

00:00:18,660 --> 00:00:26,189
Python developer at roughly in Montreal

00:00:22,300 --> 00:00:30,189
and also a member of the psychic image

00:00:26,189 --> 00:00:34,600
development team so it's my first spoken

00:00:30,189 --> 00:00:38,260
and I'm very excited to talk about

00:00:34,600 --> 00:00:42,399
interactive image processing with two

00:00:38,260 --> 00:00:46,750
packages to which I contribute to - and

00:00:42,399 --> 00:00:50,530
sighted image and the walk I'm going to

00:00:46,750 --> 00:00:54,910
present today is funded by the Chan

00:00:50,530 --> 00:00:58,350
Zuckerberg initiative CCI and I would

00:00:54,910 --> 00:01:07,960
like to thank CGI for their support to

00:00:58,350 --> 00:01:11,409
scientific open source software so in in

00:01:07,960 --> 00:01:16,329
science and in business images are very

00:01:11,409 --> 00:01:21,520
widespread source of data in science you

00:01:16,329 --> 00:01:24,579
have images and you make accurate

00:01:21,520 --> 00:01:26,649
measurements on this images and you want

00:01:24,579 --> 00:01:30,130
to transform these measurements into

00:01:26,649 --> 00:01:33,369
numbers in scientific knowledge for

00:01:30,130 --> 00:01:37,479
autonomous cars you want to be able to

00:01:33,369 --> 00:01:41,079
detect objects and distances in real

00:01:37,479 --> 00:01:45,399
time and with very good reliability you

00:01:41,079 --> 00:01:49,779
have other kinds of image applications

00:01:45,399 --> 00:01:52,749
such as remote sensing satellite imaging

00:01:49,779 --> 00:01:55,539
for example and in all these

00:01:52,749 --> 00:02:00,340
applications you need to extract some

00:01:55,539 --> 00:02:02,740
information from your images nowadays a

00:02:00,340 --> 00:02:05,889
lot of the image processing is done

00:02:02,740 --> 00:02:09,869
through machine learning and especially

00:02:05,889 --> 00:02:15,630
deep learning neural nets algorithms and

00:02:09,869 --> 00:02:19,330
this figure summarizes different tasks

00:02:15,630 --> 00:02:22,900
typical of image processing that is

00:02:19,330 --> 00:02:25,300
from image classification where you want

00:02:22,900 --> 00:02:27,670
to attribute the label to the whole

00:02:25,300 --> 00:02:31,090
image that is you have some balloons in

00:02:27,670 --> 00:02:33,940
this image to the more complex instant

00:02:31,090 --> 00:02:37,260
segmentation where this time you want to

00:02:33,940 --> 00:02:40,840
label all the pixels corresponding to

00:02:37,260 --> 00:02:44,230
all the different kinds of objects so

00:02:40,840 --> 00:02:47,110
here all the different balloons and for

00:02:44,230 --> 00:02:51,040
all this machine learning and image

00:02:47,110 --> 00:02:54,520
processing tasks you need to train your

00:02:51,040 --> 00:02:57,580
neural net with what's called a training

00:02:54,520 --> 00:03:02,440
set that is you need to have a ground

00:02:57,580 --> 00:03:08,430
truth for your images and for this you

00:03:02,440 --> 00:03:14,020
need to build yourself this training set

00:03:08,430 --> 00:03:17,350
thanks to your image annotations so what

00:03:14,020 --> 00:03:20,800
I made annotations is some kind of user

00:03:17,350 --> 00:03:23,680
interaction with images for example it

00:03:20,800 --> 00:03:30,340
can be drawing bounding boxes about

00:03:23,680 --> 00:03:35,140
objects when you want to train your

00:03:30,340 --> 00:03:38,640
algorithm for object detection but it

00:03:35,140 --> 00:03:42,820
can be also annotations for more

00:03:38,640 --> 00:03:47,709
classical image processing algorithms

00:03:42,820 --> 00:03:51,010
that is if you want to seed region

00:03:47,709 --> 00:03:54,400
growing algorithm with a few pixels

00:03:51,010 --> 00:04:01,840
belonging to a given object or if you

00:03:54,400 --> 00:04:05,410
want to measure lengths on some medical

00:04:01,840 --> 00:04:08,560
image for example or in some

00:04:05,410 --> 00:04:10,570
applications rough boundaries like

00:04:08,560 --> 00:04:14,160
bounding boxes are not enough you need

00:04:10,570 --> 00:04:19,680
to make a very accurate training set by

00:04:14,160 --> 00:04:24,550
delineating very precisely accurately

00:04:19,680 --> 00:04:27,690
all the pixels of all objects here the

00:04:24,550 --> 00:04:30,360
words on this remote sensing image so

00:04:27,690 --> 00:04:35,120
how can we build a

00:04:30,360 --> 00:04:38,219
image annotation framework with personal

00:04:35,120 --> 00:04:42,120
this is basically the subject of my talk

00:04:38,219 --> 00:04:48,680
and for this let me first introduce you

00:04:42,120 --> 00:04:53,990
- so what is - it is a web framework

00:04:48,680 --> 00:04:57,659
developed by plotly in order to write

00:04:53,990 --> 00:04:59,389
web-based analytical applications in

00:04:57,659 --> 00:05:06,870
pure Python

00:04:59,389 --> 00:05:11,909
so it's Titan package but based on web

00:05:06,870 --> 00:05:16,439
technologies and it's open source MIT

00:05:11,909 --> 00:05:19,680
licensed and the promise of - is that as

00:05:16,439 --> 00:05:22,590
a developer you write only code in

00:05:19,680 --> 00:05:25,319
Thyssen you don't need to know any

00:05:22,590 --> 00:05:28,830
JavaScript of course there is a lot of

00:05:25,319 --> 00:05:31,590
JavaScript running behind the scenes in

00:05:28,830 --> 00:05:35,039
- code but it's not you as a developer

00:05:31,590 --> 00:05:38,129
who will write the JavaScript so here

00:05:35,039 --> 00:05:40,199
you have a code snippet which is like a

00:05:38,129 --> 00:05:44,400
hello world

00:05:40,199 --> 00:05:47,669
web application with - so as you see

00:05:44,400 --> 00:05:51,409
it's your pison you defined your app and

00:05:47,669 --> 00:05:53,719
you define the layout with the different

00:05:51,409 --> 00:05:59,129
components which will appear in your app

00:05:53,719 --> 00:06:01,529
here you have a text input which is a

00:05:59,129 --> 00:06:05,639
reactive component into which you can

00:06:01,529 --> 00:06:08,879
add text and a div paragraph so that's

00:06:05,639 --> 00:06:11,550
for defining a layout and after you

00:06:08,879 --> 00:06:14,610
define the callbacks a callback is a

00:06:11,550 --> 00:06:18,659
function which is executed when one of

00:06:14,610 --> 00:06:21,029
the input is modified and in this case

00:06:18,659 --> 00:06:24,360
when you modify the text input it will

00:06:21,029 --> 00:06:27,990
modify so deep so as you see it's your

00:06:24,360 --> 00:06:32,279
bison so this code is of course really

00:06:27,990 --> 00:06:36,689
hello world a small application but with

00:06:32,279 --> 00:06:37,889
- you can build really more advanced and

00:06:36,689 --> 00:06:44,400
styled up

00:06:37,889 --> 00:06:46,229
if you go to the - gallery of examples

00:06:44,400 --> 00:06:49,650
you will see a lot of this different app

00:06:46,229 --> 00:06:53,419
so here is an example app made with -

00:06:49,650 --> 00:06:56,599
and you can see that you have several

00:06:53,419 --> 00:06:58,979
reactive components such as sliders here

00:06:56,599 --> 00:07:03,900
when you change the slider to update

00:06:58,979 --> 00:07:08,659
your graphs drop down and one

00:07:03,900 --> 00:07:13,740
first-class component of - apps are this

00:07:08,659 --> 00:07:16,199
reactive graph so this graphs made here

00:07:13,740 --> 00:07:19,469
with a plotly graphing like movie and

00:07:16,199 --> 00:07:21,979
you have seen that when we modify the

00:07:19,469 --> 00:07:24,599
components we can modify the graphs but

00:07:21,979 --> 00:07:28,050
graphs are also interactive in the sense

00:07:24,599 --> 00:07:31,560
that they are able to emit events like

00:07:28,050 --> 00:07:36,120
here when I select these counties this

00:07:31,560 --> 00:07:42,409
will trigger a callback updating this

00:07:36,120 --> 00:07:49,919
autograph so here is another example of

00:07:42,409 --> 00:07:52,409
quite styled - app and so this app is

00:07:49,919 --> 00:07:57,120
actually made with - but with the our

00:07:52,409 --> 00:08:00,719
language because the largest number of

00:07:57,120 --> 00:08:05,039
users of - program with bison but there

00:08:00,719 --> 00:08:11,039
is also community of - users programming

00:08:05,039 --> 00:08:15,360
in our and now in Julia so to say a

00:08:11,039 --> 00:08:18,089
little bit more about - and which kind

00:08:15,360 --> 00:08:21,000
of app you can build with - what kind of

00:08:18,089 --> 00:08:25,560
available confidence do you have you

00:08:21,000 --> 00:08:30,210
have the - HTML components - package

00:08:25,560 --> 00:08:34,320
which provides you all the usual HTML

00:08:30,210 --> 00:08:38,419
elements which are used to and in the -

00:08:34,320 --> 00:08:38,419
core components package you have

00:08:38,599 --> 00:08:45,209
interactive components reactive

00:08:41,339 --> 00:08:48,950
components that is the user can interact

00:08:45,209 --> 00:08:53,420
with this confidence for example

00:08:48,950 --> 00:08:57,050
drop downs radio buttons I've shown you

00:08:53,420 --> 00:09:00,140
in the app that reactive charts are a

00:08:57,050 --> 00:09:01,580
very important part of - apps and we'll

00:09:00,140 --> 00:09:04,600
talk more about it later

00:09:01,580 --> 00:09:09,770
you also have an interactive data table

00:09:04,600 --> 00:09:15,140
library more specialized library for bio

00:09:09,770 --> 00:09:19,120
for example and for - components the

00:09:15,140 --> 00:09:23,630
components Factory which is used by - is

00:09:19,120 --> 00:09:27,740
react.js framework meaning that if you

00:09:23,630 --> 00:09:31,100
have react JavaScript library and you

00:09:27,740 --> 00:09:35,090
have thousands of them on NPM the

00:09:31,100 --> 00:09:39,710
equivalent for JavaScript of pi PI then

00:09:35,090 --> 00:09:42,770
you can very easily bundle it into - and

00:09:39,710 --> 00:09:45,880
that's something that's used a lot by -

00:09:42,770 --> 00:09:50,720
developers who want to develop quickly

00:09:45,880 --> 00:09:53,660
some specialized components so in order

00:09:50,720 --> 00:09:57,860
to build an image annotation component

00:09:53,660 --> 00:10:03,560
for - we used this idea of reusing

00:09:57,860 --> 00:10:07,280
existing react JavaScript code and to

00:10:03,560 --> 00:10:12,100
make a quick proof of concept for image

00:10:07,280 --> 00:10:15,050
annotation so we used the react sketch

00:10:12,100 --> 00:10:18,770
JavaScript library which itself is based

00:10:15,050 --> 00:10:23,450
on the fabric Jaya's library and we

00:10:18,770 --> 00:10:26,600
built this image annotation component

00:10:23,450 --> 00:10:36,190
I'm showing you here a video so it gives

00:10:26,600 --> 00:10:40,430
you like an a window on which you can

00:10:36,190 --> 00:10:44,540
twelve you can draw squiggles like here

00:10:40,430 --> 00:10:49,760
rectangles and so on and I here when you

00:10:44,540 --> 00:10:52,460
press the segmentation button there is a

00:10:49,760 --> 00:10:55,160
callback reading a JSON string with your

00:10:52,460 --> 00:10:56,520
annotations and you can use this

00:10:55,160 --> 00:11:02,580
geometry of

00:10:56,520 --> 00:11:06,240
patience in your call box so we wrote

00:11:02,580 --> 00:11:08,850
this - canvas package which is also a

00:11:06,240 --> 00:11:12,930
mighty license then you can install it

00:11:08,850 --> 00:11:17,220
from pi PI and it has quite a simple API

00:11:12,930 --> 00:11:19,950
as you can see here it takes either a

00:11:17,220 --> 00:11:22,560
fine name or an image swing for the

00:11:19,950 --> 00:11:25,140
background image and then you have some

00:11:22,560 --> 00:11:28,520
controls for the kind of buttons which

00:11:25,140 --> 00:11:31,200
you want to have as drawing tools and

00:11:28,520 --> 00:11:35,520
also how you would like the annotations

00:11:31,200 --> 00:11:39,090
to look like so here you can see lines

00:11:35,520 --> 00:11:42,990
and rectangles and also freehand paths

00:11:39,090 --> 00:11:46,470
and inside the - canvas package you also

00:11:42,990 --> 00:11:50,730
have some utility functions in order to

00:11:46,470 --> 00:11:53,760
be able to process your annotations in

00:11:50,730 --> 00:11:55,350
an easy way thanks to the psychie

00:11:53,760 --> 00:11:59,970
teammates package which I will be

00:11:55,350 --> 00:12:04,050
talking about just after so after we had

00:11:59,970 --> 00:12:06,840
written this proof-of-concept package of

00:12:04,050 --> 00:12:10,760
- canvas for annotating images we

00:12:06,840 --> 00:12:13,200
thought can we put this image annotation

00:12:10,760 --> 00:12:16,710
functionalities to the plot key graphing

00:12:13,200 --> 00:12:19,260
libraries since there were already very

00:12:16,710 --> 00:12:25,340
large number of users using

00:12:19,260 --> 00:12:27,950
plotly so plot is in fact the web-based

00:12:25,340 --> 00:12:34,710
Python library which has the highest

00:12:27,950 --> 00:12:38,790
number of downloads and so Claude Lee is

00:12:34,710 --> 00:12:44,250
already quite interactive like I have a

00:12:38,790 --> 00:12:46,680
small example here of a plot where you

00:12:44,250 --> 00:12:50,060
are introspecting a set of data along

00:12:46,680 --> 00:12:52,920
different dimensions and you can select

00:12:50,060 --> 00:12:54,930
some part of the data and you see that

00:12:52,920 --> 00:12:58,170
it's also selected in the other so plots

00:12:54,930 --> 00:13:00,950
you can take a look

00:12:58,170 --> 00:13:07,250
at your data thanks to advanced hover

00:13:00,950 --> 00:13:09,000
information but we didn't use to have

00:13:07,250 --> 00:13:14,970
annotation tools

00:13:09,000 --> 00:13:20,460
what we had was layout shape objects for

00:13:14,970 --> 00:13:25,860
example lines or rectangles so this is a

00:13:20,460 --> 00:13:29,640
demo of shapes with blood Li so here you

00:13:25,860 --> 00:13:33,180
have a line shape overlaid over an image

00:13:29,640 --> 00:13:36,180
and it's possible to move the shape it's

00:13:33,180 --> 00:13:40,140
editable and when you do it you will

00:13:36,180 --> 00:13:45,290
have the intensity profile of the image

00:13:40,140 --> 00:13:48,270
which updates so this is a way to

00:13:45,290 --> 00:13:51,750
annotate images but and this is already

00:13:48,270 --> 00:13:55,170
available with the current version the

00:13:51,750 --> 00:13:58,170
current release of plotly but you cannot

00:13:55,170 --> 00:14:03,600
with this UI add a new shape

00:13:58,170 --> 00:14:08,160
however this is coming with the next

00:14:03,600 --> 00:14:12,770
version of plotly which will give you a

00:14:08,160 --> 00:14:16,790
mode bomb with all this drawing tools

00:14:12,770 --> 00:14:19,320
like open and closed paths rectangles

00:14:16,790 --> 00:14:26,400
circles and so on

00:14:19,320 --> 00:14:30,270
and so this when you draw the shapes it

00:14:26,400 --> 00:14:32,370
will also emit we layout data events for

00:14:30,270 --> 00:14:36,240
- apps and you will be able to capture

00:14:32,370 --> 00:14:39,990
the geometry of annotations so it should

00:14:36,240 --> 00:14:46,410
be released in one or two weeks but I

00:14:39,990 --> 00:14:56,910
cannot resist just showing you a little

00:14:46,410 --> 00:14:58,529
demo so let me start a rectangle I want

00:14:56,910 --> 00:15:05,989
to

00:14:58,529 --> 00:15:17,279
two on the track and building okay I

00:15:05,989 --> 00:15:20,789
switch to another image etc and if I go

00:15:17,279 --> 00:15:24,179
back to my image the annotations have

00:15:20,789 --> 00:15:26,369
been saved because a callback has

00:15:24,179 --> 00:15:30,449
captured them and stored them in the

00:15:26,369 --> 00:15:33,959
store so this is what is coming in one

00:15:30,449 --> 00:15:38,399
or two weeks and we will have all this

00:15:33,959 --> 00:15:44,969
drawing tools available in the plotter

00:15:38,399 --> 00:15:48,689
graphing library that so now that we

00:15:44,969 --> 00:15:51,869
will have this geometry of annotations

00:15:48,689 --> 00:15:54,659
what will we do with the annotation so

00:15:51,869 --> 00:15:57,629
in a few cases you can just dump all

00:15:54,659 --> 00:16:03,059
these annotations into your machine

00:15:57,629 --> 00:16:05,220
learning model and don't care more about

00:16:03,059 --> 00:16:08,339
the annotations but in a lot of cases

00:16:05,220 --> 00:16:11,939
you need to do some pre-processing or

00:16:08,339 --> 00:16:14,909
some processing of some form and for

00:16:11,939 --> 00:16:19,709
this we are lucky that - is written in

00:16:14,909 --> 00:16:25,229
bison and with - you get also all the

00:16:19,709 --> 00:16:27,599
fight and scientific stack because this

00:16:25,229 --> 00:16:31,019
scientific stack is really batteries

00:16:27,599 --> 00:16:34,409
included here I've just put a screenshot

00:16:31,019 --> 00:16:37,769
of a - application using scikit-learn to

00:16:34,409 --> 00:16:41,309
visualize results of data classification

00:16:37,769 --> 00:16:43,499
in low dimension so this was an example

00:16:41,309 --> 00:16:46,679
with scikit-learn

00:16:43,499 --> 00:16:49,499
but here in order to process image

00:16:46,679 --> 00:16:53,359
annotations we will be using a socket

00:16:49,499 --> 00:16:56,099
image which is like a system package of

00:16:53,359 --> 00:17:00,719
scikit-learn but for image processing

00:16:56,099 --> 00:17:06,230
and all this circuit package packages

00:17:00,719 --> 00:17:08,610
manipulate numpy array objects the

00:17:06,230 --> 00:17:10,670
numerical data array is really the

00:17:08,610 --> 00:17:14,690
common object of all

00:17:10,670 --> 00:17:17,330
this scientific packages so what is

00:17:14,690 --> 00:17:19,810
psychic image it's a tool box for

00:17:17,330 --> 00:17:24,680
scientific image processing in Payson

00:17:19,810 --> 00:17:27,340
it's open to us it's a library meaning

00:17:24,680 --> 00:17:30,350
that it's not an end-user application

00:17:27,340 --> 00:17:36,260
it's meant to be used in your own

00:17:30,350 --> 00:17:39,440
packages or in other image processing

00:17:36,260 --> 00:17:44,600
applications or in your scripts and it

00:17:39,440 --> 00:17:51,340
focuses more on scientific images than

00:17:44,600 --> 00:17:54,350
for example advertising or other kind of

00:17:51,340 --> 00:17:58,790
images we don't have Instagram filters

00:17:54,350 --> 00:18:03,680
for example and it's able to process

00:17:58,790 --> 00:18:06,890
post 2d and 3d images because in science

00:18:03,680 --> 00:18:10,700
like in MLA or CT you have a lot of 3d

00:18:06,890 --> 00:18:12,710
image modalities a question which is

00:18:10,700 --> 00:18:18,760
often asked is what's the difference

00:18:12,710 --> 00:18:25,420
between a psychic image and OpenCV so

00:18:18,760 --> 00:18:30,190
psychic image is war for science and

00:18:25,420 --> 00:18:33,610
it's also focuses well maybe on

00:18:30,190 --> 00:18:37,490
documentation it has a quite progressive

00:18:33,610 --> 00:18:41,360
documentation on the website with a

00:18:37,490 --> 00:18:46,730
gallery of example which is quite

00:18:41,360 --> 00:18:50,990
extensive and also some tutorials for

00:18:46,730 --> 00:18:54,110
beginners it's a queue it's packed in

00:18:50,990 --> 00:18:56,630
native also library so the API with

00:18:54,110 --> 00:18:58,820
symbols very much the API of other

00:18:56,630 --> 00:19:01,780
Python packages so if you're a Python

00:18:58,820 --> 00:19:05,540
user you might feel more comfortable

00:19:01,780 --> 00:19:09,500
starting with Sackett image rather than

00:19:05,540 --> 00:19:13,700
all of the libraries like open CD which

00:19:09,500 --> 00:19:18,980
is which has patent bindings but is

00:19:13,700 --> 00:19:23,600
written in C++ or C on the other hands

00:19:18,980 --> 00:19:27,730
over TV is most of the time faster than

00:19:23,600 --> 00:19:33,250
psychic image thanks to very optimized

00:19:27,730 --> 00:19:36,350
C++ code but we are working hard to

00:19:33,250 --> 00:19:40,960
bridge this gap and to make a psychic

00:19:36,350 --> 00:19:43,940
image faster and faster so in terms of

00:19:40,960 --> 00:19:47,420
contributors we are lucky to have a

00:19:43,940 --> 00:19:50,780
large group of contributors so many

00:19:47,420 --> 00:19:54,380
thanks to all of them and the number of

00:19:50,780 --> 00:19:57,230
core maintenance is much smaller but if

00:19:54,380 --> 00:19:59,360
you are interested in contributing you

00:19:57,230 --> 00:20:05,510
will be very welcome and we're actively

00:19:59,360 --> 00:20:13,360
looking for a range of people as diverse

00:20:05,510 --> 00:20:17,060
as possible so here is a small code

00:20:13,360 --> 00:20:18,860
showing you some first steps another

00:20:17,060 --> 00:20:24,110
hello world but this time with socket

00:20:18,860 --> 00:20:28,460
image and you see that you import sub

00:20:24,110 --> 00:20:31,730
modules and then that you read an image

00:20:28,460 --> 00:20:34,850
file and you open it as an empire way

00:20:31,730 --> 00:20:38,060
and then once you have your numerical

00:20:34,850 --> 00:20:41,630
array object in then you will call a

00:20:38,060 --> 00:20:44,420
function from socket image on the image

00:20:41,630 --> 00:20:47,030
away it will return you an image away

00:20:44,420 --> 00:20:52,190
and then you will call another function

00:20:47,030 --> 00:20:54,830
on this new way you will get another way

00:20:52,190 --> 00:21:00,290
and so on and so forth to build your

00:20:54,830 --> 00:21:03,470
image processing pipeline so how can you

00:21:00,290 --> 00:21:06,680
use this circuit image functions for

00:21:03,470 --> 00:21:09,530
image annotations actually a lot of

00:21:06,680 --> 00:21:13,640
people often use circuit image only for

00:21:09,530 --> 00:21:17,240
a handful of functions which are useful

00:21:13,640 --> 00:21:19,670
to the application unsurprisingly the

00:21:17,240 --> 00:21:22,160
most widely used function of psychic

00:21:19,670 --> 00:21:23,840
image is this ayah that in reads

00:21:22,160 --> 00:21:27,559
function to read

00:21:23,840 --> 00:21:30,830
empire-waist from file names but you

00:21:27,559 --> 00:21:36,440
also have a wide variety of functions

00:21:30,830 --> 00:21:39,440
for manipulating color and exposure also

00:21:36,440 --> 00:21:44,559
germ a trickle transforms like let's say

00:21:39,440 --> 00:21:49,059
you're annotating your image to correct

00:21:44,559 --> 00:21:52,309
for slanted horizon from the annotation

00:21:49,059 --> 00:21:55,789
inside a callback in a - app it will be

00:21:52,309 --> 00:21:57,919
calling one single Sackett image

00:21:55,789 --> 00:22:00,890
function which would be the transform

00:21:57,919 --> 00:22:05,870
that rotate function to to correct for

00:22:00,890 --> 00:22:10,159
this horizon and last example in this

00:22:05,870 --> 00:22:13,669
slide is drawing and measure tools where

00:22:10,159 --> 00:22:17,870
you want to measure some quantities from

00:22:13,669 --> 00:22:20,600
your image and here is a portion of the

00:22:17,870 --> 00:22:25,100
code of the app I showed just before

00:22:20,600 --> 00:22:29,409
where you want to measure the intensity

00:22:25,100 --> 00:22:31,820
profile from a line so in the dash app

00:22:29,409 --> 00:22:35,510
when you get the geometry of the line

00:22:31,820 --> 00:22:37,940
what you get is the end points and you

00:22:35,510 --> 00:22:41,029
want the whole profile then you can call

00:22:37,940 --> 00:22:46,549
this skin age the toilet line function

00:22:41,029 --> 00:22:50,779
which will give you all the coordinates

00:22:46,549 --> 00:22:54,500
of the pixels on the line so this is the

00:22:50,779 --> 00:22:59,080
kind of utility functions which the -

00:22:54,500 --> 00:23:04,340
canvas package relies a lot upon so

00:22:59,080 --> 00:23:06,260
thanks to all this algorithms the -

00:23:04,340 --> 00:23:09,730
canvas code is actually quite small

00:23:06,260 --> 00:23:15,370
since it uses cycle image for

00:23:09,730 --> 00:23:19,370
manipulating images and the geometry of

00:23:15,370 --> 00:23:22,190
objects in images but besides this

00:23:19,370 --> 00:23:26,120
utility functions you also have quite

00:23:22,190 --> 00:23:30,980
advanced algorithms inside image I've

00:23:26,120 --> 00:23:33,049
put here some examples for example we

00:23:30,980 --> 00:23:36,130
servation in filtering if you want to

00:23:33,049 --> 00:23:40,480
remove some noise from ages

00:23:36,130 --> 00:23:43,510
extraction segmentation that is labeling

00:23:40,480 --> 00:23:46,380
the pixels of objects or some advanced

00:23:43,510 --> 00:23:49,060
measures and images and

00:23:46,380 --> 00:23:51,670
siked image itself is not a deep

00:23:49,060 --> 00:23:55,330
learning package mostly because of

00:23:51,670 --> 00:23:57,990
active architecture constraints but it's

00:23:55,330 --> 00:24:03,280
a great tool both for pre-processing

00:23:57,990 --> 00:24:08,050
your image before launching a deep

00:24:03,280 --> 00:24:10,390
neural net algorithm or also for doing a

00:24:08,050 --> 00:24:15,430
lot of the post-processing why you want

00:24:10,390 --> 00:24:20,170
to compute measurements and objects for

00:24:15,430 --> 00:24:22,150
example and psyche teammates for example

00:24:20,170 --> 00:24:25,600
is used quite a lot in the data

00:24:22,150 --> 00:24:31,110
documentation library is once again for

00:24:25,600 --> 00:24:38,260
for deep learning for more traditional

00:24:31,110 --> 00:24:40,690
machine learning algorithms there is a

00:24:38,260 --> 00:24:45,310
possibility in circuit image to extract

00:24:40,690 --> 00:24:50,590
features and this feature extractors can

00:24:45,310 --> 00:24:53,980
be both based on points of interest such

00:24:50,590 --> 00:24:56,440
as corners of you image or it can be

00:24:53,980 --> 00:25:03,790
features of little patches in the image

00:24:56,440 --> 00:25:08,830
and I have one demo to show you which is

00:25:03,790 --> 00:25:15,040
here where there is this image so here

00:25:08,830 --> 00:25:20,800
it's again this - canvas annotation tool

00:25:15,040 --> 00:25:28,860
where I want to extract this lady and to

00:25:20,800 --> 00:25:34,740
remove the background and so I'm drawing

00:25:28,860 --> 00:25:38,290
and after I will call remove background

00:25:34,740 --> 00:25:40,450
and you see that it has removed the

00:25:38,290 --> 00:25:45,250
background quite nicely and the way it

00:25:40,450 --> 00:25:49,080
works is that Sagat image computes a

00:25:45,250 --> 00:25:52,220
super pixel segmentation

00:25:49,080 --> 00:25:56,640
of the image into little patches and

00:25:52,220 --> 00:26:00,300
then it compute features from the

00:25:56,640 --> 00:26:02,550
patches under the annotations and

00:26:00,300 --> 00:26:05,130
patches far from the annotations and it

00:26:02,550 --> 00:26:08,190
calls a random forest classifier from

00:26:05,130 --> 00:26:11,610
scikit-learn in order to learn how to

00:26:08,190 --> 00:26:14,010
classify object and background patches

00:26:11,610 --> 00:26:19,290
and this is how this segmentation is

00:26:14,010 --> 00:26:25,110
made so I want to show you maybe a last

00:26:19,290 --> 00:26:29,220
demo showing you this image annotation

00:26:25,110 --> 00:26:32,130
tools that we are developing with this

00:26:29,220 --> 00:26:35,730
time the plotly graphing library so here

00:26:32,130 --> 00:26:38,190
you have a plot key but it's a def

00:26:35,730 --> 00:26:42,470
version and so you have here this

00:26:38,190 --> 00:26:48,120
drawing button which allows you to draw

00:26:42,470 --> 00:26:52,050
like here open pass and so here I'm

00:26:48,120 --> 00:26:56,400
tracing a very rough outline of this

00:26:52,050 --> 00:27:00,120
organ in a medical image what geography

00:26:56,400 --> 00:27:02,310
I think and when I press this magic

00:27:00,120 --> 00:27:07,470
scissors button I call

00:27:02,310 --> 00:27:12,870
- callback which cause socket image

00:27:07,470 --> 00:27:17,850
ActiveX control algorithm and then

00:27:12,870 --> 00:27:24,000
you have this site outline corresponding

00:27:17,850 --> 00:27:26,250
to the segmentation so in order to close

00:27:24,000 --> 00:27:32,490
this presentation I would like to say

00:27:26,250 --> 00:27:36,540
that Bo's proudly - and Psyche it image

00:27:32,490 --> 00:27:41,070
have a strong effort on documentation

00:27:36,540 --> 00:27:44,580
they are all based on examples here is a

00:27:41,070 --> 00:27:47,700
snapshot of the Sackett image gallery

00:27:44,580 --> 00:27:50,460
where you have all this sand nails and

00:27:47,700 --> 00:27:55,650
you can click on once M nails and you

00:27:50,460 --> 00:28:00,150
have an example about one specific image

00:27:55,650 --> 00:28:02,360
processing application and the the code

00:28:00,150 --> 00:28:05,790
and the result and you have the same

00:28:02,360 --> 00:28:12,290
with property and with - a lot of

00:28:05,790 --> 00:28:18,770
examples to get started so I hope that

00:28:12,290 --> 00:28:22,530
you now wish to try these tools and

00:28:18,770 --> 00:28:26,280
maybe I see you on the community forums

00:28:22,530 --> 00:28:31,500
we have one for plucky and - and another

00:28:26,280 --> 00:28:36,120
one on for cycle image and I would love

00:28:31,500 --> 00:28:44,130
to be in touch so if you want to be in

00:28:36,120 --> 00:28:48,830
touch I'm on Twitter and here is again

00:28:44,130 --> 00:28:48,830

YouTube URL: https://www.youtube.com/watch?v=fnNUMKH6TWI


