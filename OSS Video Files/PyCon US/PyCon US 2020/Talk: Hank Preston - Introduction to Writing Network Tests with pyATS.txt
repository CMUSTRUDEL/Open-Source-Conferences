Title: Talk: Hank Preston - Introduction to Writing Network Tests with pyATS
Publication date: 2021-05-05
Playlist: PyCon US 2020
Description: 
	Presented by:
Hank Preston

How do you test that your network is healthy? You probably ping a few things, run some show commands, and watch for open trouble tickets. I don’t think I’ll stir up a ton of controversy by saying that’s a really bad method. With the move towards network automation, NetDevOps, and Network Reliability Engineering (NRE), we need to have robust, repeatable tests to check the state of the network from Layer 1 to 7.

pyATS is an open source network test framework that was built by software developers for network developers. It provides all the tools automation engineers need to describe test cases, run jobs, gather reports, and make the entire process part of your network automation pipeline. In this talk, we’ll look at everything you need to write your first few test cases, and discuss strategies for what you should test, and when.




Talk slides: https://www.slideshare.net/HankPreston1/introduction-to-writing-network-tests-with-pyats 

Talk resources:

- Code and Demo: https://github.com/hpreston/intro-network-tests
- Twitter: https://twitter.com/hfpreston
Captions: 
	00:00:12,420 --> 00:00:16,990
hi there pike on 20/20 thank you for

00:00:15,370 --> 00:00:19,930
joining me for this talk introduction to

00:00:16,990 --> 00:00:21,189
writing Network tests with PI ATS my

00:00:19,930 --> 00:00:23,710
name is Hank Preston and I'm a network

00:00:21,189 --> 00:00:26,020
automation engineer and developer with

00:00:23,710 --> 00:00:28,570
Cisco dev net and I'm also a net DevOps

00:00:26,020 --> 00:00:30,399
enthusiast excited about any opportunity

00:00:28,570 --> 00:00:32,710
to talk about modernizing network

00:00:30,399 --> 00:00:35,290
engineering and automation using Python

00:00:32,710 --> 00:00:37,090
and other tools in today's talk we're

00:00:35,290 --> 00:00:39,250
gonna kind of tackle ourselves through a

00:00:37,090 --> 00:00:40,750
handful of agenda points we're gonna

00:00:39,250 --> 00:00:42,820
start out with an understanding of

00:00:40,750 --> 00:00:44,920
exactly what is PI ATS and what is the

00:00:42,820 --> 00:00:46,780
problem it's trying to solve we're then

00:00:44,920 --> 00:00:49,809
going to kind of dissect what goes into

00:00:46,780 --> 00:00:51,609
a network test project specifically how

00:00:49,809 --> 00:00:54,010
do we develop a network testbed and

00:00:51,609 --> 00:00:55,359
describe our device connections we're

00:00:54,010 --> 00:00:57,550
then going to look at the anatomy of a

00:00:55,359 --> 00:00:59,800
test case and then how we can combine

00:00:57,550 --> 00:01:02,019
multiple test cases into an individual

00:00:59,800 --> 00:01:03,850
test job and then finally we're going to

00:01:02,019 --> 00:01:06,430
end with a demonstration of how we can

00:01:03,850 --> 00:01:08,460
use PI ATS to test whether our network

00:01:06,430 --> 00:01:12,820
is working as expected

00:01:08,460 --> 00:01:14,800
so first what exactly is PI ATS now

00:01:12,820 --> 00:01:19,600
before we answer that let's pose the

00:01:14,800 --> 00:01:21,310
age-old question is the network down now

00:01:19,600 --> 00:01:23,380
whether you're a network engineer or

00:01:21,310 --> 00:01:25,360
network automation engineer or just a

00:01:23,380 --> 00:01:27,159
software developer that leverages the

00:01:25,360 --> 00:01:28,750
network that your network engineers go

00:01:27,159 --> 00:01:30,939
through you've probably found yourself

00:01:28,750 --> 00:01:32,590
in this space something just doesn't

00:01:30,939 --> 00:01:35,229
seem right and you're trying to figure

00:01:32,590 --> 00:01:36,939
out is it the network and you might go

00:01:35,229 --> 00:01:39,430
up to your network engineering folks and

00:01:36,939 --> 00:01:41,380
say hey is that network down and you get

00:01:39,430 --> 00:01:43,450
these these blank stares and they're not

00:01:41,380 --> 00:01:45,609
sure exactly how to answer that because

00:01:43,450 --> 00:01:47,020
the network has got all of these pieces

00:01:45,609 --> 00:01:49,659
that are there and how do you

00:01:47,020 --> 00:01:51,549
troubleshoot it and so the thought

00:01:49,659 --> 00:01:55,030
process often comes in to something like

00:01:51,549 --> 00:01:58,000
this so what exactly do we check

00:01:55,030 --> 00:02:00,670
nobody sure and then oftentimes we come

00:01:58,000 --> 00:02:02,979
back to the age-old kind of main network

00:02:00,670 --> 00:02:05,409
test functionality tooling that we have

00:02:02,979 --> 00:02:08,979
today which is ping right so somebody

00:02:05,409 --> 00:02:11,980
suggests can you ping it and we have to

00:02:08,979 --> 00:02:13,690
wonder is there a better way because

00:02:11,980 --> 00:02:15,970
paying while important right to

00:02:13,690 --> 00:02:17,470
establish connectivity doesn't answer

00:02:15,970 --> 00:02:20,730
questions about whether you're having

00:02:17,470 --> 00:02:23,530
latency traffic selection problems

00:02:20,730 --> 00:02:25,690
whether there's actually congestion on

00:02:23,530 --> 00:02:28,210
links where the traffic is following

00:02:25,690 --> 00:02:30,070
the flow that you expected to write ping

00:02:28,210 --> 00:02:31,630
is just one small part of whether the

00:02:30,070 --> 00:02:34,840
network is actually functioning as

00:02:31,630 --> 00:02:37,420
expected and this is where PI 80s and

00:02:34,840 --> 00:02:39,880
the PI 80s library come in along with

00:02:37,420 --> 00:02:42,250
the ecosystem that comes around it now

00:02:39,880 --> 00:02:44,620
the idea here is to build a modernized

00:02:42,250 --> 00:02:47,410
platform and framework where we can

00:02:44,620 --> 00:02:49,930
actually write good solid network test

00:02:47,410 --> 00:02:52,870
cases to see is the network functioning

00:02:49,930 --> 00:02:55,840
as we wanted to as expected now the PI

00:02:52,870 --> 00:02:58,060
80s ecosystem and systems that are the

00:02:55,840 --> 00:02:59,800
portions of the paiace 80s ecosystem

00:02:58,060 --> 00:03:01,480
that are out there are released and

00:02:59,800 --> 00:03:04,060
available under the Apache License

00:03:01,480 --> 00:03:06,160
version 2.0 so you can get access to the

00:03:04,060 --> 00:03:08,200
source code contribute back to many

00:03:06,160 --> 00:03:10,390
elements of the ecosystem we're going to

00:03:08,200 --> 00:03:13,690
talk about so that everybody can kind of

00:03:10,390 --> 00:03:15,910
help all across them our fellow users

00:03:13,690 --> 00:03:18,130
tackle the network test problems that

00:03:15,910 --> 00:03:20,260
are there now let's let's dive into

00:03:18,130 --> 00:03:23,500
exactly what makes up the PI ATS

00:03:20,260 --> 00:03:25,540
ecosystem now at its base we have what

00:03:23,500 --> 00:03:27,820
we call the PI ATS core test

00:03:25,540 --> 00:03:30,160
infrastructure this is actually what is

00:03:27,820 --> 00:03:32,350
often meant by the PI 80s library

00:03:30,160 --> 00:03:35,260
components themselves these are how we

00:03:32,350 --> 00:03:37,810
describe topologies the test definitions

00:03:35,260 --> 00:03:41,050
how we track the execution of tests

00:03:37,810 --> 00:03:43,630
gather results develop logs and report

00:03:41,050 --> 00:03:45,580
back on those pieces even send out email

00:03:43,630 --> 00:03:48,670
notifications if we configure that as

00:03:45,580 --> 00:03:50,680
part of our core test pieces the PI ETS

00:03:48,670 --> 00:03:51,850
core test for infrastructure actually

00:03:50,680 --> 00:03:54,310
doesn't have a lot of direct

00:03:51,850 --> 00:03:55,930
connectivity into the specific things

00:03:54,310 --> 00:03:58,540
you want to test in your network it's

00:03:55,930 --> 00:04:01,150
kind of the framework necessary to run

00:03:58,540 --> 00:04:03,100
these tests as they go through on top of

00:04:01,150 --> 00:04:06,220
that core test infrastructure we get the

00:04:03,100 --> 00:04:08,680
SDK in the library the PI 80s library

00:04:06,220 --> 00:04:10,720
that was often previously referred to as

00:04:08,680 --> 00:04:12,370
the geni libraries that were in there

00:04:10,720 --> 00:04:14,950
which and you'll see this name pop up in

00:04:12,370 --> 00:04:17,440
different places and what the library

00:04:14,950 --> 00:04:19,840
offers is a kind of reusable components

00:04:17,440 --> 00:04:23,020
that can be plugged in and run against

00:04:19,840 --> 00:04:24,640
your network to go through this gives us

00:04:23,020 --> 00:04:26,740
the way to say ok I'm interested in the

00:04:24,640 --> 00:04:30,160
state of let's say a routing protocol

00:04:26,740 --> 00:04:32,650
like BGP or OSPF by using the PI ETS

00:04:30,160 --> 00:04:36,100
library capabilities we can very easily

00:04:32,650 --> 00:04:37,990
in Python ask the network will ask the

00:04:36,100 --> 00:04:39,310
network and network devices what's the

00:04:37,990 --> 00:04:40,690
operation or config

00:04:39,310 --> 00:04:43,030
creation state of these different

00:04:40,690 --> 00:04:44,020
portions of the network we can and we

00:04:43,030 --> 00:04:45,730
don't have to worry about kind of

00:04:44,020 --> 00:04:48,370
parsing through clear text information

00:04:45,730 --> 00:04:50,500
or trying to normalize data between

00:04:48,370 --> 00:04:53,500
platforms all of that is handled by the

00:04:50,500 --> 00:04:55,570
PI 80s library itself in addition to

00:04:53,500 --> 00:04:57,220
that we get kind of a building blocks of

00:04:55,570 --> 00:04:59,050
different testing components and

00:04:57,220 --> 00:05:01,090
triggers and validations that are

00:04:59,050 --> 00:05:03,640
included with the framework itself and

00:05:01,090 --> 00:05:05,620
then on top of the SDK and libraries

00:05:03,640 --> 00:05:07,810
where business logic and integrations

00:05:05,620 --> 00:05:09,850
can be plugged in many teams are looking

00:05:07,810 --> 00:05:12,010
at how we can tie Network testing into

00:05:09,850 --> 00:05:14,290
larger test frameworks and see ICD

00:05:12,010 --> 00:05:16,750
pipelines and so there's areas where we

00:05:14,290 --> 00:05:20,170
can use PI ATS ecosystem to plug into

00:05:16,750 --> 00:05:23,380
Jenkins tool assess tool systems other

00:05:20,170 --> 00:05:24,580
CLI examples frameworks like robot or

00:05:23,380 --> 00:05:26,860
tie into infrastructure as code

00:05:24,580 --> 00:05:29,470
solutions from ansible in other areas

00:05:26,860 --> 00:05:31,990
and so the PI ETS ecosystem is this

00:05:29,470 --> 00:05:34,510
entire kind of combination as it goes in

00:05:31,990 --> 00:05:36,940
and today's talk we're gonna focus kind

00:05:34,510 --> 00:05:38,770
of in that core test infrastructure how

00:05:36,940 --> 00:05:40,660
do we connect to our network and how do

00:05:38,770 --> 00:05:43,870
we write in articulate our test cases

00:05:40,660 --> 00:05:46,120
themselves now where do you get PI ATS

00:05:43,870 --> 00:05:48,460
from like any good Python program it's

00:05:46,120 --> 00:05:51,310
available up on pi PI so you can pip

00:05:48,460 --> 00:05:53,740
install PI ATS to pull down all of the

00:05:51,310 --> 00:05:56,680
bits from pi PI now it does require

00:05:53,740 --> 00:05:58,270
links or Mac OS to function but if

00:05:56,680 --> 00:06:00,310
you're a Windows user we can support it

00:05:58,270 --> 00:06:02,350
inside of docker or virtual machines as

00:06:00,310 --> 00:06:04,030
they go through so you can actually pull

00:06:02,350 --> 00:06:06,400
from the Cisco test automation an

00:06:04,030 --> 00:06:08,410
available latest docker container that

00:06:06,400 --> 00:06:11,470
has everything necessary to run your PI

00:06:08,410 --> 00:06:13,390
ATS use cases inside of there now as of

00:06:11,470 --> 00:06:15,790
a few versions we have upped and removed

00:06:13,390 --> 00:06:19,570
kind of Python to support and we do

00:06:15,790 --> 00:06:21,910
recommend Python 3.5 or ahead or greater

00:06:19,570 --> 00:06:23,860
to leverage all of the Python pieces

00:06:21,910 --> 00:06:25,920
that are to leverage the PI 80s

00:06:23,860 --> 00:06:28,900
ecosystem and framework that's in place

00:06:25,920 --> 00:06:30,970
now a couple of reference pieces even in

00:06:28,900 --> 00:06:32,170
this display that we see on this area we

00:06:30,970 --> 00:06:34,360
can see that we've got version

00:06:32,170 --> 00:06:36,790
information libraries called Genie PI

00:06:34,360 --> 00:06:38,890
80s and eunuch on and these kind of

00:06:36,790 --> 00:06:41,980
correlate back to that pyramid that we

00:06:38,890 --> 00:06:44,500
saw a few slides ago the PI ETS PI

00:06:41,980 --> 00:06:46,570
Python libraries tie back to that core

00:06:44,500 --> 00:06:49,180
test infrastructure this is for

00:06:46,570 --> 00:06:51,640
connecting to connecting and running

00:06:49,180 --> 00:06:53,260
those tests as they go through the genie

00:06:51,640 --> 00:06:55,240
these are the libraries of the

00:06:53,260 --> 00:06:58,290
high 80s library and it's composed of

00:06:55,240 --> 00:07:01,030
reusable models triggers parsers

00:06:58,290 --> 00:07:02,920
verifications a whole suite of API is

00:07:01,030 --> 00:07:04,840
that you can use to talk to and

00:07:02,920 --> 00:07:07,300
manipulate your network devices that are

00:07:04,840 --> 00:07:09,550
out there and then finally we have the

00:07:07,300 --> 00:07:12,130
eunuch on or the universal connector

00:07:09,550 --> 00:07:15,130
libraries these are kind of rarely

00:07:12,130 --> 00:07:17,140
called explicitly in your code but

00:07:15,130 --> 00:07:19,780
rather get leveraged by the PI 80s

00:07:17,140 --> 00:07:21,300
library or the PI 80s core and this is

00:07:19,780 --> 00:07:23,530
how we actually handle the the

00:07:21,300 --> 00:07:25,660
independent connection or consistent

00:07:23,530 --> 00:07:28,600
connection to devices whether we're

00:07:25,660 --> 00:07:31,360
connecting over telnet SSH through

00:07:28,600 --> 00:07:36,070
terminal servers or proxies or using

00:07:31,360 --> 00:07:37,570
protocols like HTTP or Netcom area and

00:07:36,070 --> 00:07:39,940
so as you see those imports in the

00:07:37,570 --> 00:07:42,670
libraries again eunuch on universal

00:07:39,940 --> 00:07:44,890
connector kind of under the hood PI ATS

00:07:42,670 --> 00:07:47,140
or kind of the core test framework areas

00:07:44,890 --> 00:07:49,060
and then the genie is that PI ATS

00:07:47,140 --> 00:07:50,910
library full of all the the good

00:07:49,060 --> 00:07:53,350
components that we can use in our code

00:07:50,910 --> 00:07:55,180
now with that out of the way let's talk

00:07:53,350 --> 00:07:58,330
about what goes into an actual network

00:07:55,180 --> 00:08:00,610
test project now a lot can go into it

00:07:58,330 --> 00:08:02,590
from a but from a bare minimum we were

00:08:00,610 --> 00:08:05,050
really only needs three different

00:08:02,590 --> 00:08:06,520
components first we need a description

00:08:05,050 --> 00:08:08,560
of what is the network that we're

00:08:06,520 --> 00:08:11,650
talking to and this is referred to as

00:08:08,560 --> 00:08:13,960
the testbed file or testbed yamo though

00:08:11,650 --> 00:08:15,640
you can name it anything you want often

00:08:13,960 --> 00:08:17,830
they're just referred to as testbed and

00:08:15,640 --> 00:08:20,320
inside of that yamo file this is what

00:08:17,830 --> 00:08:22,540
describes our network topology what are

00:08:20,320 --> 00:08:24,040
the devices that we want to talk to what

00:08:22,540 --> 00:08:27,100
are their platforms what are the

00:08:24,040 --> 00:08:30,310
connection details is what are the

00:08:27,100 --> 00:08:31,810
port's is that telnet is that SSH what

00:08:30,310 --> 00:08:33,910
are the credentials that we use we'll go

00:08:31,810 --> 00:08:37,270
through all of that is handled as part

00:08:33,910 --> 00:08:40,870
of the testbed yamo file next we have

00:08:37,270 --> 00:08:43,900
the AE test scripts or the automation ez

00:08:40,870 --> 00:08:46,120
testing test scripts and these are I'm

00:08:43,900 --> 00:08:49,030
going to be one or more Python files

00:08:46,120 --> 00:08:50,890
that describe the setup execution and

00:08:49,030 --> 00:08:53,050
cleanup of individual tests that you

00:08:50,890 --> 00:08:54,610
want to run and you can have multiple of

00:08:53,050 --> 00:08:57,340
these that go that you would execute

00:08:54,610 --> 00:09:00,370
against your network tackling different

00:08:57,340 --> 00:09:02,290
pieces maybe you have a an AE test

00:09:00,370 --> 00:09:04,390
script that goes and checks that devices

00:09:02,290 --> 00:09:05,740
are just up and functioning and then you

00:09:04,390 --> 00:09:07,059
have another one that tackles things

00:09:05,740 --> 00:09:09,429
like layer two Connacht

00:09:07,059 --> 00:09:11,139
to each X and layer to configuration and

00:09:09,429 --> 00:09:13,659
then we move up to layer three and

00:09:11,139 --> 00:09:15,009
routing protocol verifications each one

00:09:13,659 --> 00:09:18,339
of those may be broken off into a

00:09:15,009 --> 00:09:21,819
separate AE test script and then finally

00:09:18,339 --> 00:09:23,859
we have the easy PI job files it's in

00:09:21,819 --> 00:09:26,259
the job file where we actually combined

00:09:23,859 --> 00:09:28,599
together the testbed that describes the

00:09:26,259 --> 00:09:30,189
network we want to verify with the test

00:09:28,599 --> 00:09:32,619
scripts that we want to run against

00:09:30,189 --> 00:09:34,959
those two go in and the test job kind of

00:09:32,619 --> 00:09:36,999
handles running all of those kind of as

00:09:34,959 --> 00:09:39,369
an instance and then reporting back the

00:09:36,999 --> 00:09:41,889
results in consumable fashions as they

00:09:39,369 --> 00:09:43,599
go through now to help with the

00:09:41,889 --> 00:09:45,429
configuration and setup of all of these

00:09:43,599 --> 00:09:48,249
components that are convenience commands

00:09:45,429 --> 00:09:52,299
built into the PI ETS CLI that comes

00:09:48,249 --> 00:09:55,209
when you pip install PI ATS pip PI ATS

00:09:52,299 --> 00:09:57,369
create testbed will help you frame up

00:09:55,209 --> 00:09:59,379
your testbed file you can build this

00:09:57,369 --> 00:10:01,809
either by hand and yeah mo you can

00:09:59,379 --> 00:10:04,329
import and kind of convert from a CSV or

00:10:01,809 --> 00:10:06,039
Excel spreadsheet or you can just answer

00:10:04,329 --> 00:10:08,139
questions at the command line and it

00:10:06,039 --> 00:10:10,899
will construct the yamo file for you as

00:10:08,139 --> 00:10:13,029
a starting point and then PI ATS to

00:10:10,899 --> 00:10:14,919
create project will kind of give you

00:10:13,029 --> 00:10:17,409
templates and cookie cutter places to

00:10:14,919 --> 00:10:19,689
start related to your job files as well

00:10:17,409 --> 00:10:21,129
as your test scripts as they go in now

00:10:19,689 --> 00:10:23,139
let's jump through each one of these

00:10:21,129 --> 00:10:26,289
three components to see take a look

00:10:23,139 --> 00:10:28,569
deeper now first we have our PI ATS

00:10:26,289 --> 00:10:30,399
testbed as I mentioned this is going to

00:10:28,569 --> 00:10:32,949
define all of the devices in the network

00:10:30,399 --> 00:10:35,229
now we have a variety of types that you

00:10:32,949 --> 00:10:38,289
may have inside of your testbed you'll

00:10:35,229 --> 00:10:40,479
have switches routers firewalls but you

00:10:38,289 --> 00:10:42,009
may also have kind of Linux end hosts

00:10:40,479 --> 00:10:44,649
that you could use as part of your test

00:10:42,009 --> 00:10:46,149
execution for traffic generation or just

00:10:44,649 --> 00:10:47,519
verifying that the network is

00:10:46,149 --> 00:10:49,779
functioning as expected

00:10:47,519 --> 00:10:52,869
now the each device will also have to be

00:10:49,779 --> 00:10:55,059
tied to platform an operating system now

00:10:52,869 --> 00:10:56,649
clearly the PI 80s platform will support

00:10:55,059 --> 00:10:59,319
the operating systems from the different

00:10:56,649 --> 00:11:00,789
Cisco Networking platform such as iOS XE

00:10:59,319 --> 00:11:03,219
NEX nx-os

00:11:00,789 --> 00:11:05,469
a sa but we also support operating

00:11:03,219 --> 00:11:08,619
systems like Linux for those hosts or

00:11:05,469 --> 00:11:10,299
even other vendors such as Juno's and f5

00:11:08,619 --> 00:11:13,209
these are all operating systems

00:11:10,299 --> 00:11:15,970
supported by the PI 80s framework an

00:11:13,209 --> 00:11:17,679
ecosystem that's in there now in

00:11:15,970 --> 00:11:19,149
addition to the devices themselves we

00:11:17,679 --> 00:11:20,680
have to know how are we going to connect

00:11:19,149 --> 00:11:23,080
to the devices

00:11:20,680 --> 00:11:25,360
you nakhon supports connections over SSH

00:11:23,080 --> 00:11:27,790
or telnet Netcom different capabilities

00:11:25,360 --> 00:11:29,350
that go through as well as support

00:11:27,790 --> 00:11:31,360
requirements if we have to go through a

00:11:29,350 --> 00:11:33,490
terminal server or proxy server as well

00:11:31,360 --> 00:11:36,250
that can all be described inside of the

00:11:33,490 --> 00:11:38,140
testbed now and you also have the option

00:11:36,250 --> 00:11:40,060
inside of your testbed to describe links

00:11:38,140 --> 00:11:41,529
how are the interfaces connected between

00:11:40,060 --> 00:11:43,390
all of these devices

00:11:41,529 --> 00:11:44,950
that's not mandatory but for more

00:11:43,390 --> 00:11:47,380
advanced testing you can actually

00:11:44,950 --> 00:11:48,970
describe kind of the intended source of

00:11:47,380 --> 00:11:51,279
truth for how the network is supposed to

00:11:48,970 --> 00:11:54,580
be set up and then verify operational

00:11:51,279 --> 00:11:56,649
State against those as they go in now as

00:11:54,580 --> 00:12:00,010
mentioned the next piece is our the AE

00:11:56,649 --> 00:12:02,410
test scripts now up test script is a

00:12:00,010 --> 00:12:04,149
Python file and if you've written test

00:12:02,410 --> 00:12:05,709
scripts using PI test or other test

00:12:04,149 --> 00:12:07,930
libraries there's going to be some

00:12:05,709 --> 00:12:10,750
similarities here we're gonna have three

00:12:07,930 --> 00:12:13,810
phases to every test script phase one

00:12:10,750 --> 00:12:15,580
common set up everything necessary to do

00:12:13,810 --> 00:12:17,890
before you begin running your actual

00:12:15,580 --> 00:12:19,300
tests that are there this is a common

00:12:17,890 --> 00:12:21,010
place where we would use our test bed

00:12:19,300 --> 00:12:23,560
and actually go out and connect to each

00:12:21,010 --> 00:12:25,360
of the devices that are there then we

00:12:23,560 --> 00:12:28,720
have our phase two which are the test

00:12:25,360 --> 00:12:30,880
case or cases any a test script could

00:12:28,720 --> 00:12:32,529
have one or more tests that are going to

00:12:30,880 --> 00:12:34,900
go ahead and get run as they go through

00:12:32,529 --> 00:12:37,209
and then finally we have phase three

00:12:34,900 --> 00:12:39,190
which is the common clean up now you'll

00:12:37,209 --> 00:12:40,959
notice the way we describe which what

00:12:39,190 --> 00:12:44,650
these components are which phase they go

00:12:40,959 --> 00:12:46,600
into is by extending out AE test common

00:12:44,650 --> 00:12:49,540
set up for the common set up component a

00:12:46,600 --> 00:12:52,000
test test case for a class that's going

00:12:49,540 --> 00:12:54,130
to be an actual test case and then AE

00:12:52,000 --> 00:12:57,250
test common clean up will describe where

00:12:54,130 --> 00:12:59,650
is your clean up step to go through now

00:12:57,250 --> 00:13:01,959
inside of a test you may have subset up

00:12:59,650 --> 00:13:04,120
and clean up steps as well depending on

00:13:01,959 --> 00:13:06,730
the requirements for those tests but as

00:13:04,120 --> 00:13:09,310
you can see here test case one does not

00:13:06,730 --> 00:13:11,500
have the set up and clean up phases put

00:13:09,310 --> 00:13:14,560
in while eight or the test case o two

00:13:11,500 --> 00:13:17,350
does have a set up and clean up and then

00:13:14,560 --> 00:13:20,050
inside of each test case class we can

00:13:17,350 --> 00:13:22,480
have any number of decorated AE test

00:13:20,050 --> 00:13:24,910
tests to indicate how we're gonna pass

00:13:22,480 --> 00:13:26,380
through as they go in now in this slide

00:13:24,910 --> 00:13:28,060
example we can see that we're just

00:13:26,380 --> 00:13:30,070
passing on each one of these tests to

00:13:28,060 --> 00:13:31,570
show the framework we'll see examples of

00:13:30,070 --> 00:13:33,490
that as we get into the demonstration of

00:13:31,570 --> 00:13:34,180
what a test may actually look like as

00:13:33,490 --> 00:13:36,880
they go in

00:13:34,180 --> 00:13:39,130
but because it's Python anything you can

00:13:36,880 --> 00:13:43,050
do in Python can be done inside your

00:13:39,130 --> 00:13:45,670
test script then we come to the job file

00:13:43,050 --> 00:13:47,320
remember we can setup any number of test

00:13:45,670 --> 00:13:49,990
scripts that we want to run as part of

00:13:47,320 --> 00:13:52,150
our actual network validation and inside

00:13:49,990 --> 00:13:54,490
of the job file is another Python file

00:13:52,150 --> 00:13:56,080
that just brings together all of the

00:13:54,490 --> 00:13:58,510
test scripts that we want to run as part

00:13:56,080 --> 00:14:00,880
of an individual job and so we could

00:13:58,510 --> 00:14:02,980
have test scripts written for multiple

00:14:00,880 --> 00:14:04,720
projects and then pull together into

00:14:02,980 --> 00:14:06,070
single job files to run against

00:14:04,720 --> 00:14:08,770
different network components that are

00:14:06,070 --> 00:14:10,480
there we can see here these Python

00:14:08,770 --> 00:14:12,820
scripts are often quite simple and short

00:14:10,480 --> 00:14:15,400
we simply go through and we execute the

00:14:12,820 --> 00:14:16,960
run from the easy PI library against

00:14:15,400 --> 00:14:19,840
each of the test scripts that we want

00:14:16,960 --> 00:14:22,510
now the task ID here that I've specified

00:14:19,840 --> 00:14:24,460
on the slide is used as part of the

00:14:22,510 --> 00:14:26,560
logging and notification pieces as they

00:14:24,460 --> 00:14:29,890
go in if you don't provide a specific

00:14:26,560 --> 00:14:31,720
task ID the PI ETS libraries under the

00:14:29,890 --> 00:14:33,790
hood will just kind of indicate the TAT

00:14:31,720 --> 00:14:35,980
tasks and then a number as they go in

00:14:33,790 --> 00:14:37,450
but for complicated test jobs you

00:14:35,980 --> 00:14:39,340
probably want to give a name so that you

00:14:37,450 --> 00:14:41,290
understand what each one of these test

00:14:39,340 --> 00:14:43,810
scripts was trying to accomplish as they

00:14:41,290 --> 00:14:45,670
go through now with those three

00:14:43,810 --> 00:14:49,360
components in place then we can go ahead

00:14:45,670 --> 00:14:51,910
and run our job by using PI ATS run job

00:14:49,360 --> 00:14:52,990
and then you give it the job file on the

00:14:51,910 --> 00:14:54,400
testbed that you want to combine

00:14:52,990 --> 00:14:57,760
together that you want to pull together

00:14:54,400 --> 00:14:59,620
to run for this execution and then

00:14:57,760 --> 00:15:01,120
you'll see in the display it comes

00:14:59,620 --> 00:15:03,550
through and says ok for each one of the

00:15:01,120 --> 00:15:05,890
tasks and each one of the tests did we

00:15:03,550 --> 00:15:08,650
pass or other options might be skipped

00:15:05,890 --> 00:15:10,450
failed or erred now here we've just got

00:15:08,650 --> 00:15:12,400
a basic bootstrapped piece so there

00:15:10,450 --> 00:15:14,650
wasn't a lot that went through but your

00:15:12,400 --> 00:15:17,310
actual tests can have lots of detail and

00:15:14,650 --> 00:15:19,570
data lots of output displayed at the CLI

00:15:17,310 --> 00:15:21,610
now you'll notice down here at the

00:15:19,570 --> 00:15:25,270
bottom there's this little pro tip that

00:15:21,610 --> 00:15:27,100
pops up for even for small simplified

00:15:25,270 --> 00:15:28,720
network tests that you may run there's a

00:15:27,100 --> 00:15:31,000
lot of data that can come out at you at

00:15:28,720 --> 00:15:32,500
standard out and just kind of parsing

00:15:31,000 --> 00:15:34,870
through that looking through that in one

00:15:32,500 --> 00:15:37,330
large blob can be difficult to kind of

00:15:34,870 --> 00:15:39,850
figure out what worked what didn't work

00:15:37,330 --> 00:15:42,460
or find issues that are there but with

00:15:39,850 --> 00:15:44,260
the PI ETS logs view what we end up

00:15:42,460 --> 00:15:47,410
doing is automatically kind of showing

00:15:44,260 --> 00:15:47,950
you an HTML view over the logs from this

00:15:47,410 --> 00:15:50,140
job

00:15:47,950 --> 00:15:52,390
that you can kind of drill into as it

00:15:50,140 --> 00:15:53,950
goes in now here we can see a kind of

00:15:52,390 --> 00:15:56,440
the main dashboard that gives you the

00:15:53,950 --> 00:15:59,500
bar chart key details around this this

00:15:56,440 --> 00:16:01,720
last job run and then we can jump into

00:15:59,500 --> 00:16:04,270
the individual tasks that were run as

00:16:01,720 --> 00:16:06,430
part of the job here we can see task 1

00:16:04,270 --> 00:16:08,710
if I go ahead and click on that it'll

00:16:06,430 --> 00:16:11,020
bring up the actual task detail and we

00:16:08,710 --> 00:16:13,900
would see each test across that task and

00:16:11,020 --> 00:16:16,810
whether it was it succeeded past failed

00:16:13,900 --> 00:16:18,880
all of the status now suppose we wanted

00:16:16,810 --> 00:16:21,760
to see the detail for a particular step

00:16:18,880 --> 00:16:24,400
out of the task well we can simply click

00:16:21,760 --> 00:16:27,220
on that step and see all of the actual

00:16:24,400 --> 00:16:28,660
output that was gathered by PI ATS when

00:16:27,220 --> 00:16:30,850
it ran these tests as they went through

00:16:28,660 --> 00:16:33,940
and so here we can see the kind of the

00:16:30,850 --> 00:16:35,290
standardout output that's captured now

00:16:33,940 --> 00:16:37,330
this outputs the same as what we would

00:16:35,290 --> 00:16:39,520
see kind of at the CLI terminal when we

00:16:37,330 --> 00:16:42,580
execute it this is just a much nicer way

00:16:39,520 --> 00:16:44,320
to kind of view and look at it now with

00:16:42,580 --> 00:16:46,480
the basics underway let's actually see

00:16:44,320 --> 00:16:49,150
this in action in a real live network

00:16:46,480 --> 00:16:50,500
test demonstration now for our

00:16:49,150 --> 00:16:52,450
demonstration here we're going to be

00:16:50,500 --> 00:16:54,040
running against a network that looks

00:16:52,450 --> 00:16:56,680
like what we have up here on the drawing

00:16:54,040 --> 00:16:59,410
so we have a fairly common three-tier

00:16:56,680 --> 00:17:01,480
type of a network with a access

00:16:59,410 --> 00:17:04,000
distribution layer a distribution router

00:17:01,480 --> 00:17:05,860
a couple of core routers and then off to

00:17:04,000 --> 00:17:07,810
an Internet through a firewall as it

00:17:05,860 --> 00:17:09,940
went in we've got some basic routing

00:17:07,810 --> 00:17:12,220
protocols configured interfaces and

00:17:09,940 --> 00:17:14,260
traffic flow as it goes in and this is a

00:17:12,220 --> 00:17:16,329
sample network that's provided by dev

00:17:14,260 --> 00:17:18,130
net sandbox and so here's that one of

00:17:16,329 --> 00:17:20,230
the best parts of this demonstration is

00:17:18,130 --> 00:17:22,030
if you want to try it yourself all the

00:17:20,230 --> 00:17:23,860
code for this demonstration as well as

00:17:22,030 --> 00:17:26,380
the environment necessary to run this

00:17:23,860 --> 00:17:29,110
test are all available up on github and

00:17:26,380 --> 00:17:31,180
then provided by definite sandbox links

00:17:29,110 --> 00:17:33,160
available here in these slides we've got

00:17:31,180 --> 00:17:36,460
a QR code at the end so you can find the

00:17:33,160 --> 00:17:39,100
slides themselves now our goals for our

00:17:36,460 --> 00:17:41,290
test job that we're gonna run step one

00:17:39,100 --> 00:17:43,240
we want to verify that each and every

00:17:41,290 --> 00:17:45,430
device inside of this test bed is

00:17:43,240 --> 00:17:46,870
reachable that's our first test can we

00:17:45,430 --> 00:17:49,930
talk to all of our switches routers

00:17:46,870 --> 00:17:51,940
firewalls and other devices our second

00:17:49,930 --> 00:17:53,740
test I want to verify that there's no

00:17:51,940 --> 00:17:56,050
interface errors on any of these

00:17:53,740 --> 00:17:58,030
connected interfaces now what do I mean

00:17:56,050 --> 00:18:00,400
by that one of the most troublesome

00:17:58,030 --> 00:18:00,900
things to troubleshoot inside of any

00:18:00,400 --> 00:18:03,210
network

00:18:00,900 --> 00:18:04,290
Engineers kind of day is if somebody

00:18:03,210 --> 00:18:07,050
comes through and says I'm having

00:18:04,290 --> 00:18:08,490
performance issues on the network it's

00:18:07,050 --> 00:18:10,770
not that the network hosts are down

00:18:08,490 --> 00:18:13,290
those are frankly fairly easy to figure

00:18:10,770 --> 00:18:14,820
out and fix but no the host just kind of

00:18:13,290 --> 00:18:17,190
they're performing slower than expected

00:18:14,820 --> 00:18:19,680
or maybe some of the applications are

00:18:17,190 --> 00:18:21,660
going up and down now there's lots of

00:18:19,680 --> 00:18:23,460
things that could potentially cause that

00:18:21,660 --> 00:18:25,920
but one of the things we often look for

00:18:23,460 --> 00:18:27,750
is every hop along the way or every

00:18:25,920 --> 00:18:30,210
portion of the network that's relevant

00:18:27,750 --> 00:18:32,910
are we reporting any errors are we

00:18:30,210 --> 00:18:35,220
reporting CRC errors are we reporting on

00:18:32,910 --> 00:18:38,190
jumbo frames that are getting dropped or

00:18:35,220 --> 00:18:40,320
we're 40 malformed packets input output

00:18:38,190 --> 00:18:42,720
errors and it can be very time consuming

00:18:40,320 --> 00:18:44,850
to gather all of that detail from across

00:18:42,720 --> 00:18:46,320
the entire environment and so what I

00:18:44,850 --> 00:18:48,600
want to do in our tests here is to

00:18:46,320 --> 00:18:50,880
actually verify across my entire network

00:18:48,600 --> 00:18:53,130
that we don't have interface errors

00:18:50,880 --> 00:18:54,780
being reported because in general and a

00:18:53,130 --> 00:18:56,820
healthy network we shouldn't see

00:18:54,780 --> 00:18:59,250
interface errors all right so I want a

00:18:56,820 --> 00:19:00,780
very quick way can we go and look do we

00:18:59,250 --> 00:19:03,660
have any interface errors that are out

00:19:00,780 --> 00:19:05,640
there okay with that we're gonna jump

00:19:03,660 --> 00:19:08,760
into the live demonstration and see this

00:19:05,640 --> 00:19:10,410
in action for our demonstration here's

00:19:08,760 --> 00:19:12,030
the network that we're gonna be using as

00:19:10,410 --> 00:19:13,860
mentioned this is being provided by a

00:19:12,030 --> 00:19:16,080
definite sandbox that you could reserve

00:19:13,860 --> 00:19:17,700
of your own to give it a try but what we

00:19:16,080 --> 00:19:19,470
have here is our network display that's

00:19:17,700 --> 00:19:21,690
in place and so for example I've got my

00:19:19,470 --> 00:19:24,210
routing tiers here and we can do like a

00:19:21,690 --> 00:19:26,400
show IP route and see that we've got

00:19:24,210 --> 00:19:28,560
routing the traffic that's been learned

00:19:26,400 --> 00:19:30,420
as it goes through and inside of our

00:19:28,560 --> 00:19:33,180
network we have some Linux hosts so down

00:19:30,420 --> 00:19:35,790
here I have inside hosts o1 and then

00:19:33,180 --> 00:19:37,380
outside I've got an Internet hosts o1 so

00:19:35,790 --> 00:19:39,120
let's see if the network traffic is

00:19:37,380 --> 00:19:41,220
functioning across the network as it

00:19:39,120 --> 00:19:44,100
goes through so is this network does it

00:19:41,220 --> 00:19:45,510
seem to be operating so if I do an SSH

00:19:44,100 --> 00:19:46,920
and I try to just connect from the

00:19:45,510 --> 00:19:53,400
inside host to the Internet

00:19:46,920 --> 00:19:56,010
Cisco at 172 31 0 11 we can see that

00:19:53,400 --> 00:19:57,780
indeed I was able to SSH and connect to

00:19:56,010 --> 00:19:59,700
the internet host and so this shows us

00:19:57,780 --> 00:20:01,830
that the network is at least functioning

00:19:59,700 --> 00:20:04,200
to some level I'm able to get from the

00:20:01,830 --> 00:20:06,300
inside host through the switching layer

00:20:04,200 --> 00:20:08,550
the routing layer the core routing layer

00:20:06,300 --> 00:20:10,860
through an edge switch out through the

00:20:08,550 --> 00:20:12,540
firewall through the internet router and

00:20:10,860 --> 00:20:14,390
then finally to the Internet host so

00:20:12,540 --> 00:20:16,160
traffic paths are functioning

00:20:14,390 --> 00:20:17,960
but let's actually run our network

00:20:16,160 --> 00:20:19,640
verification to see if there's any

00:20:17,960 --> 00:20:23,420
problems at our network as it goes

00:20:19,640 --> 00:20:25,700
through and we start out with that

00:20:23,420 --> 00:20:27,710
testbed file so this is a testbed that

00:20:25,700 --> 00:20:29,840
describes our network that's out there

00:20:27,710 --> 00:20:32,780
and so we can see our Internet routers

00:20:29,840 --> 00:20:34,970
here it's an iOS XE device we can see

00:20:32,780 --> 00:20:37,520
the internet hosts this is a Linux piece

00:20:34,970 --> 00:20:39,380
and then up at the top if you'll notice

00:20:37,520 --> 00:20:41,510
that we have shared kind of default

00:20:39,380 --> 00:20:44,300
credentials to use across the board and

00:20:41,510 --> 00:20:45,680
our testbed supports inside a PI TS the

00:20:44,300 --> 00:20:48,020
ability to pull credentials from

00:20:45,680 --> 00:20:50,150
multiple locations you could put them in

00:20:48,020 --> 00:20:52,190
clear-text in your test bed not

00:20:50,150 --> 00:20:53,930
recommended you can do what I've got

00:20:52,190 --> 00:20:55,730
done here which is where we're pulling

00:20:53,930 --> 00:20:57,200
them out of environment variables a

00:20:55,730 --> 00:20:59,660
little bit better from a security

00:20:57,200 --> 00:21:00,950
perspective but we also have plugins for

00:20:59,660 --> 00:21:02,720
encryption and then to pull this

00:21:00,950 --> 00:21:05,660
information out of solutions like a

00:21:02,720 --> 00:21:07,820
vault solution as well in this case I'm

00:21:05,660 --> 00:21:09,560
using environment variables and then I

00:21:07,820 --> 00:21:11,300
have an environment file here where I

00:21:09,560 --> 00:21:13,520
just kind of set them to the default

00:21:11,300 --> 00:21:15,250
Cisco Cisco username and password that

00:21:13,520 --> 00:21:17,660
we're using in the environment and so

00:21:15,250 --> 00:21:19,250
for that I'm gonna jump here down to the

00:21:17,660 --> 00:21:23,420
terminal and I'm gonna go ahead and just

00:21:19,250 --> 00:21:25,400
source out PI ETS e and V to set those

00:21:23,420 --> 00:21:27,740
environment variables and then we're

00:21:25,400 --> 00:21:31,370
gonna go ahead and we will run our test

00:21:27,740 --> 00:21:33,230
job so PI ATS run job and then we're

00:21:31,370 --> 00:21:35,360
gonna run Network test project Network

00:21:33,230 --> 00:21:38,090
test job and then we're gonna target at

00:21:35,360 --> 00:21:39,290
that test bed that we went through so

00:21:38,090 --> 00:21:42,010
we'll go ahead and we'll run this and

00:21:39,290 --> 00:21:42,010
see what happens

00:21:42,280 --> 00:21:47,420
now during this execution kind of as

00:21:44,930 --> 00:21:49,190
this flies by what we're seeing is we're

00:21:47,420 --> 00:21:51,110
seeing kind of right now eunuch on

00:21:49,190 --> 00:21:53,900
connecting to every single one of the

00:21:51,110 --> 00:21:55,280
devices and establishing and very very

00:21:53,900 --> 00:21:57,110
fine that it can actually talk to them

00:21:55,280 --> 00:21:59,540
and execute commands and gather

00:21:57,110 --> 00:22:01,730
information and then it's going to the

00:21:59,540 --> 00:22:03,710
PI 80s test scripts will run to actually

00:22:01,730 --> 00:22:05,600
verify all of the test cases that we

00:22:03,710 --> 00:22:08,090
that I've described that I want to kind

00:22:05,600 --> 00:22:09,950
of run through and get and see if things

00:22:08,090 --> 00:22:11,480
are healthy part of that includes

00:22:09,950 --> 00:22:13,520
actually gathering information about

00:22:11,480 --> 00:22:15,500
every interface on the entire network

00:22:13,520 --> 00:22:17,740
and so what we're seeing here and

00:22:15,500 --> 00:22:20,450
standardout is kind of all of the log

00:22:17,740 --> 00:22:23,180
information that's being captured by PI

00:22:20,450 --> 00:22:25,160
ETS using the different elements of the

00:22:23,180 --> 00:22:27,620
library components and the logging

00:22:25,160 --> 00:22:28,320
components to gather and process all

00:22:27,620 --> 00:22:30,179
that data

00:22:28,320 --> 00:22:32,100
and then it runs through the test

00:22:30,179 --> 00:22:34,019
scripts to see kind of what passed what

00:22:32,100 --> 00:22:36,029
failed and there'll be kind of summary

00:22:34,019 --> 00:22:37,679
information once this fully completes

00:22:36,029 --> 00:22:45,899
down here at the bottom we should be

00:22:37,679 --> 00:22:48,029
coming up here in just a second I saw

00:22:45,899 --> 00:22:49,980
some red text fly past me which tells me

00:22:48,029 --> 00:22:51,450
that something must have gone all right

00:22:49,980 --> 00:22:53,789
so here we've gotten to the end and

00:22:51,450 --> 00:22:55,830
we're gonna do this PI test logs view in

00:22:53,789 --> 00:22:58,830
just a second but what do we see kind of

00:22:55,830 --> 00:23:00,570
in the CLI now from our test case we saw

00:22:58,830 --> 00:23:02,610
the network that was there and I'm

00:23:00,570 --> 00:23:04,500
checking every interface that's in place

00:23:02,610 --> 00:23:06,539
and so we can see these steps that go

00:23:04,500 --> 00:23:08,970
through for each interface that's being

00:23:06,539 --> 00:23:11,429
veil verified in this case the one I

00:23:08,970 --> 00:23:13,259
highlighted this one past but down here

00:23:11,429 --> 00:23:15,269
step eight where it looked at four

00:23:13,259 --> 00:23:18,210
interface errors on edge switch oh one

00:23:15,269 --> 00:23:20,159
well that's that overall step failed and

00:23:18,210 --> 00:23:22,259
I can look kind of by the interface

00:23:20,159 --> 00:23:25,049
levels and see I got lots of failures in

00:23:22,259 --> 00:23:26,820
place here if I were to scroll up I'd be

00:23:25,049 --> 00:23:29,009
able to see kind of the points in time

00:23:26,820 --> 00:23:31,110
during the test when those interfaces

00:23:29,009 --> 00:23:32,789
were checked but that's a lot to do kind

00:23:31,110 --> 00:23:35,549
of at the terminal so let's go ahead and

00:23:32,789 --> 00:23:40,710
use the HTML log viewer built in so PI

00:23:35,549 --> 00:23:42,809
ATS logs view this will start a Python

00:23:40,710 --> 00:23:44,820
kind of web server and then a host off

00:23:42,809 --> 00:23:49,740
the actual log files for us to take a

00:23:44,820 --> 00:23:51,720
look at so the PI ETS logs view opens up

00:23:49,740 --> 00:23:53,519
my HTML piece here and I get some

00:23:51,720 --> 00:23:55,139
statistics and information we can see

00:23:53,519 --> 00:23:57,750
that there were a total of six tests

00:23:55,139 --> 00:24:00,509
five of them passed one of them failed

00:23:57,750 --> 00:24:02,159
and I can go through and see details up

00:24:00,509 --> 00:24:03,899
here at the top we can see I ran two

00:24:02,159 --> 00:24:06,419
test scripts the first one was device

00:24:03,899 --> 00:24:09,090
connections if I look at this everything

00:24:06,419 --> 00:24:10,980
shows past so this tells me I was able

00:24:09,090 --> 00:24:13,379
to connect successfully to every single

00:24:10,980 --> 00:24:15,120
one of the devices now if I wanted to

00:24:13,379 --> 00:24:16,500
see kind of what happened during each of

00:24:15,120 --> 00:24:18,840
these phases let's say one of the

00:24:16,500 --> 00:24:21,090
devices couldn't be connected I could

00:24:18,840 --> 00:24:22,799
click on one of these tests and get all

00:24:21,090 --> 00:24:24,779
of that standard output all of the

00:24:22,799 --> 00:24:27,720
information that was logged kind of at

00:24:24,779 --> 00:24:29,429
my fingertips and ready to use but in

00:24:27,720 --> 00:24:31,799
this case device connections didn't have

00:24:29,429 --> 00:24:34,200
any issues but interface errors here's

00:24:31,799 --> 00:24:36,600
where we saw some problems and so we can

00:24:34,200 --> 00:24:38,370
see the common set up that past loading

00:24:36,600 --> 00:24:40,649
the test bed was fine connecting the

00:24:38,370 --> 00:24:42,210
devices that was all fine but the

00:24:40,649 --> 00:24:44,759
overall interface

00:24:42,210 --> 00:24:47,490
test-case did have some issues we can

00:24:44,759 --> 00:24:49,409
see here the test itself failed for each

00:24:47,490 --> 00:24:50,820
one of the devices in each interface on

00:24:49,409 --> 00:24:53,250
a device kind of gets reported

00:24:50,820 --> 00:24:54,870
independently as they go through and

00:24:53,250 --> 00:24:56,070
it's up to your test script definition

00:24:54,870 --> 00:24:58,559
to figure out kind of where the

00:24:56,070 --> 00:25:00,360
inheritance of failures happen but in

00:24:58,559 --> 00:25:01,590
this case if any interface fails we

00:25:00,360 --> 00:25:04,200
would have kind of marked the entire

00:25:01,590 --> 00:25:05,399
test is failed now rather than kind of

00:25:04,200 --> 00:25:07,620
scroll through I'm going to go ahead and

00:25:05,399 --> 00:25:09,960
sort this by the results to bring the

00:25:07,620 --> 00:25:11,700
failed all up to the top and we can see

00:25:09,960 --> 00:25:14,009
here edge switch oh one each of the

00:25:11,700 --> 00:25:15,870
interfaces failed if I click on one of

00:25:14,009 --> 00:25:17,940
these we can say okay Gigabit Ethernet -

00:25:15,870 --> 00:25:20,070
and we can see okay checking the

00:25:17,940 --> 00:25:23,220
interface checking status of Internet

00:25:20,070 --> 00:25:24,600
Gigabit Ethernet 0 - is failed and if I

00:25:23,220 --> 00:25:26,340
look at the line above it we can see I

00:25:24,600 --> 00:25:28,500
get a fail the reason that gets noted

00:25:26,340 --> 00:25:31,559
and it's because Gigabit Ethernet 0 -

00:25:28,500 --> 00:25:34,289
has a count of 3/4 in errors which is

00:25:31,559 --> 00:25:35,429
one of the counters if I go back and I

00:25:34,289 --> 00:25:37,440
say ok well what about some of these

00:25:35,429 --> 00:25:39,870
other interfaces Gigabit Ethernet oh one

00:25:37,440 --> 00:25:42,269
we can see it also failed it also had a

00:25:39,870 --> 00:25:44,399
count of 3 4 in errors as they went in

00:25:42,269 --> 00:25:46,289
and so now I can see ok there's some

00:25:44,399 --> 00:25:48,330
problems or it looks like there might be

00:25:46,289 --> 00:25:50,580
some problems on this particular edge

00:25:48,330 --> 00:25:52,110
switch in these interfaces I'm in

00:25:50,580 --> 00:25:54,750
general again we don't want to see

00:25:52,110 --> 00:25:56,850
interface errors but as I'm looking at

00:25:54,750 --> 00:25:59,220
this and trying to debug it as a network

00:25:56,850 --> 00:26:00,809
testing developer right I realize what

00:25:59,220 --> 00:26:02,669
are the other counters on this interface

00:26:00,809 --> 00:26:04,620
it'd be it'd be nice to kind of

00:26:02,669 --> 00:26:06,690
understand some more context in this log

00:26:04,620 --> 00:26:08,549
to help troubleshoot it so let's update

00:26:06,690 --> 00:26:10,320
our test cases and see if we can make

00:26:08,549 --> 00:26:14,039
some changes to learn about the full

00:26:10,320 --> 00:26:15,929
status of the counters that are there so

00:26:14,039 --> 00:26:17,100
I'm going to flip back over here and so

00:26:15,929 --> 00:26:20,429
now we're gonna look at the actual

00:26:17,100 --> 00:26:22,110
interface errors py test case and the

00:26:20,429 --> 00:26:24,059
part I want to point out here is is

00:26:22,110 --> 00:26:26,190
we're gonna look at this portion of the

00:26:24,059 --> 00:26:28,230
test so here we've got our definition of

00:26:26,190 --> 00:26:29,759
the test and we're gonna go through and

00:26:28,230 --> 00:26:31,679
we're gonna talk a bit about kind of the

00:26:29,759 --> 00:26:33,600
layout here but it's just basic Python

00:26:31,679 --> 00:26:36,240
we've got some for loops we've got some

00:26:33,600 --> 00:26:38,639
context handlers in place but because

00:26:36,240 --> 00:26:40,409
it's just Python I'm gonna go ahead and

00:26:38,639 --> 00:26:42,450
uncomment out this line that I put in

00:26:40,409 --> 00:26:44,429
for the demonstration to show that in

00:26:42,450 --> 00:26:46,769
addition to just logging kind of the the

00:26:44,429 --> 00:26:49,559
status whether we passed or failed I

00:26:46,769 --> 00:26:51,809
want to do a log of an info and actually

00:26:49,559 --> 00:26:54,840
log out the full information about all

00:26:51,809 --> 00:26:55,590
of the counters for an interface so that

00:26:54,840 --> 00:26:57,330
I can see that

00:26:55,590 --> 00:26:59,460
inside of my log information that's

00:26:57,330 --> 00:27:01,679
there so simply I'm just uncommenting

00:26:59,460 --> 00:27:04,020
this new logger dot info line will go

00:27:01,679 --> 00:27:05,460
ahead and save that update and then I'm

00:27:04,020 --> 00:27:07,500
going to go ahead and rerun my test

00:27:05,460 --> 00:27:11,240
cases so that we can kind of see if we

00:27:07,500 --> 00:27:14,190
get more information inside of the run

00:27:11,240 --> 00:27:16,169
I'm rerunning the exact same job file

00:27:14,190 --> 00:27:18,650
it's now just gonna connect back out and

00:27:16,169 --> 00:27:20,789
run using the updated script that I

00:27:18,650 --> 00:27:22,799
processed so this will take I don't know

00:27:20,789 --> 00:27:25,460
ninety seconds here to run against the

00:27:22,799 --> 00:27:25,460
entire network

00:27:34,950 --> 00:27:37,010
you

00:27:45,710 --> 00:27:50,730
all right the job the job finished and

00:27:48,840 --> 00:27:52,500
if as you were watching to go through

00:27:50,730 --> 00:27:54,690
you may have noticed kind of additional

00:27:52,500 --> 00:27:56,430
data kind of in JSON format flowing

00:27:54,690 --> 00:27:58,350
through but rather than try to look at

00:27:56,430 --> 00:28:00,540
that in the CLI output let's actually

00:27:58,350 --> 00:28:04,350
take a look and rerun that HTML logs

00:28:00,540 --> 00:28:06,150
viewer for us alright so here we're back

00:28:04,350 --> 00:28:08,400
we're looking at the latest logs we'll

00:28:06,150 --> 00:28:10,560
jump back into interface errors will

00:28:08,400 --> 00:28:13,110
restart by result and now we'll look at

00:28:10,560 --> 00:28:14,160
one of our interfaces and now we can see

00:28:13,110 --> 00:28:16,350
what we saw before

00:28:14,160 --> 00:28:19,050
step eight - we can see it failed we can

00:28:16,350 --> 00:28:20,790
see count of three four in errors but

00:28:19,050 --> 00:28:22,530
now we have this new line also logged

00:28:20,790 --> 00:28:24,540
for each interface shows us well how

00:28:22,530 --> 00:28:26,820
many packets did we have we'd had nine

00:28:24,540 --> 00:28:28,410
hundred and ninety packets came in we've

00:28:26,820 --> 00:28:30,900
had so many hoc tests we can see the

00:28:28,410 --> 00:28:32,790
broadcast counts and so now as we're

00:28:30,900 --> 00:28:34,380
troubleshooting this network issue I've

00:28:32,790 --> 00:28:36,930
got more context I know what's the

00:28:34,380 --> 00:28:39,300
overall kind of counter status and

00:28:36,930 --> 00:28:40,860
usability of this interface is and so I

00:28:39,300 --> 00:28:42,240
can use that to make a judgment call

00:28:40,860 --> 00:28:44,640
about what I do next

00:28:42,240 --> 00:28:46,200
all right with that that's kind of

00:28:44,640 --> 00:28:47,670
finishes the live demo let's jump back

00:28:46,200 --> 00:28:49,290
to the slides and kind of talk a bit

00:28:47,670 --> 00:28:51,300
more about some of the code pieces that

00:28:49,290 --> 00:28:53,010
were used to you know more I don't want

00:28:51,300 --> 00:28:54,570
to do a full code walk you can take a

00:28:53,010 --> 00:28:56,370
look at the Python code from up on

00:28:54,570 --> 00:28:57,870
github with the link that's there but I

00:28:56,370 --> 00:28:59,640
would do want to highlight a few key

00:28:57,870 --> 00:29:01,650
elements that are part of writing the

00:28:59,640 --> 00:29:03,860
tests and so here we're gonna start with

00:29:01,650 --> 00:29:06,480
the the connection verification test

00:29:03,860 --> 00:29:09,270
some keys that we see in here is that we

00:29:06,480 --> 00:29:11,460
have the ability to kind of use steps as

00:29:09,270 --> 00:29:13,530
part of an overall test and we saw that

00:29:11,460 --> 00:29:15,720
in the demonstration with step one two

00:29:13,530 --> 00:29:19,260
three four each one of the devices and

00:29:15,720 --> 00:29:22,170
then step 1.1 1.2 for kind of sub steps

00:29:19,260 --> 00:29:24,270
for individual interfaces and so PI ATS

00:29:22,170 --> 00:29:26,700
the core infrastructure as part of the

00:29:24,270 --> 00:29:28,710
testing gives us this concept of steps

00:29:26,700 --> 00:29:31,890
that can be used inside of a context

00:29:28,710 --> 00:29:34,200
handler and so here we go here we've got

00:29:31,890 --> 00:29:35,640
with steps dot start and then we can

00:29:34,200 --> 00:29:37,710
give it kind of some details about the

00:29:35,640 --> 00:29:40,200
name of this step and then we can kind

00:29:37,710 --> 00:29:42,600
of process some some bits and pieces

00:29:40,200 --> 00:29:44,190
inside and then at the end of this step

00:29:42,600 --> 00:29:46,380
we can determine whether we want to fail

00:29:44,190 --> 00:29:48,060
based on some condition here we're

00:29:46,380 --> 00:29:50,460
checking to see if the device is

00:29:48,060 --> 00:29:53,280
connected so device connected true

00:29:50,460 --> 00:29:54,700
faults if it's true the default status

00:29:53,280 --> 00:29:56,769
of a step will be passed

00:29:54,700 --> 00:29:58,269
but if it's anything other than true we

00:29:56,769 --> 00:30:00,730
want to go ahead and mark this step as

00:29:58,269 --> 00:30:03,460
failed and it's that simple to indicate

00:30:00,730 --> 00:30:06,369
whether a test element of your tests

00:30:03,460 --> 00:30:09,190
fails or passes in addition to failed

00:30:06,369 --> 00:30:10,179
status there's also erred pass X if

00:30:09,190 --> 00:30:12,100
we're just going to kind of pass

00:30:10,179 --> 00:30:13,749
something but there's some exception we

00:30:12,100 --> 00:30:15,009
were running through on it or maybe

00:30:13,749 --> 00:30:16,659
you're gonna skip something for a

00:30:15,009 --> 00:30:19,419
particular reason all these options

00:30:16,659 --> 00:30:21,340
exist and then if we look at the

00:30:19,419 --> 00:30:23,710
interface errors we can see here where

00:30:21,340 --> 00:30:25,389
we've got where I'm using the setup step

00:30:23,710 --> 00:30:28,090
to actually go ahead and kind of learn

00:30:25,389 --> 00:30:30,340
details about the interface now remember

00:30:28,090 --> 00:30:33,820
in the PI 80s ecosystem we've got the PI

00:30:30,340 --> 00:30:36,429
80s core libraries are the core PI 80s

00:30:33,820 --> 00:30:38,470
then we have the genie library or PI 80s

00:30:36,429 --> 00:30:40,869
library that comes with all the models

00:30:38,470 --> 00:30:43,600
and parsers and here's where we can see

00:30:40,869 --> 00:30:45,999
what we're leveraging that device learn

00:30:43,600 --> 00:30:48,220
learn is a function from the PI 80s

00:30:45,999 --> 00:30:50,889
library where we're saying just go learn

00:30:48,220 --> 00:30:52,989
about the interfaces for a device no

00:30:50,889 --> 00:30:56,019
matter what type of device it is this

00:30:52,989 --> 00:30:58,899
model that PI 80s library model about

00:30:56,019 --> 00:31:01,269
interface concepts knows what commands

00:30:58,899 --> 00:31:03,669
to run knows how to parse that data back

00:31:01,269 --> 00:31:05,590
into a Python dictionary that can be

00:31:03,669 --> 00:31:07,989
used for very easily understanding the

00:31:05,590 --> 00:31:10,119
health of particular network pieces and

00:31:07,989 --> 00:31:12,009
that's the magic behind the PI 80s

00:31:10,119 --> 00:31:14,799
library component of the overall

00:31:12,009 --> 00:31:17,080
ecosystem is it removes that necessity

00:31:14,799 --> 00:31:19,059
for the individual developers to write

00:31:17,080 --> 00:31:21,249
the regex or learn how to kind of parse

00:31:19,059 --> 00:31:24,039
that clear text data that comes in in as

00:31:21,249 --> 00:31:25,929
it goes through now still on the

00:31:24,039 --> 00:31:28,570
interface error test here we can see an

00:31:25,929 --> 00:31:31,869
example where we've got nested loops so

00:31:28,570 --> 00:31:34,269
we start off with we start off here with

00:31:31,869 --> 00:31:36,730
the blue for each device so for every

00:31:34,269 --> 00:31:37,929
device in the kind of the the testbed as

00:31:36,730 --> 00:31:39,789
it goes in we're gonna go ahead and

00:31:37,929 --> 00:31:41,350
we're gonna loop over the interfaces

00:31:39,789 --> 00:31:43,450
each one of the interfaces that are

00:31:41,350 --> 00:31:45,639
inside of those devices here in the

00:31:43,450 --> 00:31:48,070
green and then finally there are several

00:31:45,639 --> 00:31:49,690
counters that an interface might have we

00:31:48,070 --> 00:31:51,609
saw on the in the demonstration that

00:31:49,690 --> 00:31:54,070
there's there's encounters and out

00:31:51,609 --> 00:31:56,139
counters and errors well we set inside

00:31:54,070 --> 00:31:58,090
of our code a particular set of counters

00:31:56,139 --> 00:31:59,379
that were interested in checking and so

00:31:58,090 --> 00:32:01,749
we're gonna go ahead and say okay let's

00:31:59,379 --> 00:32:03,429
go ahead and look for every counter that

00:32:01,749 --> 00:32:05,619
we've indicated is an error counter

00:32:03,429 --> 00:32:06,290
we're interested in and then go see is

00:32:05,619 --> 00:32:09,140
that in

00:32:06,290 --> 00:32:11,870
is the the length of the um the counter

00:32:09,140 --> 00:32:14,420
greater than 0 is the count greater than

00:32:11,870 --> 00:32:17,120
0 if so we're gonna go ahead and mark

00:32:14,420 --> 00:32:18,830
that step is failed if there aren't

00:32:17,120 --> 00:32:21,290
counters at all we're gonna go ahead and

00:32:18,830 --> 00:32:21,620
mark that step is skipped where is it

00:32:21,290 --> 00:32:23,540
here

00:32:21,620 --> 00:32:25,550
if there are no counters on an interface

00:32:23,540 --> 00:32:27,560
we're gonna skip this step because there

00:32:25,550 --> 00:32:30,260
are some network devices and interfaces

00:32:27,560 --> 00:32:32,180
such as loop backs or VLAN interfaces

00:32:30,260 --> 00:32:34,340
that may not have counters attached to

00:32:32,180 --> 00:32:36,380
them we don't want to fail a test just

00:32:34,340 --> 00:32:38,090
because there were no counters so we'll

00:32:36,380 --> 00:32:40,190
mark that as skipped and kind of give

00:32:38,090 --> 00:32:41,690
the information that's there so that's

00:32:40,190 --> 00:32:43,520
just a quick look at kind of some of the

00:32:41,690 --> 00:32:45,470
pieces that we can do inside of the

00:32:43,520 --> 00:32:47,270
Python as we write these tests but

00:32:45,470 --> 00:32:51,320
reminder all this code is available up

00:32:47,270 --> 00:32:53,570
on github to look at now in summary kind

00:32:51,320 --> 00:32:55,670
of where can we go from here now

00:32:53,570 --> 00:32:57,770
I've only been able to kind of scratch

00:32:55,670 --> 00:33:00,380
the surface of what's possible with PI

00:32:57,770 --> 00:33:01,940
ATS ecosystem there's so much more

00:33:00,380 --> 00:33:03,950
that's out there for you and we've

00:33:01,940 --> 00:33:05,750
gathered up a lot of resources that you

00:33:03,950 --> 00:33:07,850
can take advantage of to dive deeper

00:33:05,750 --> 00:33:10,550
into network validation testing with PI

00:33:07,850 --> 00:33:12,140
ETS you can look at the PI ETS homepage

00:33:10,550 --> 00:33:14,930
you can read the getting started guide

00:33:12,140 --> 00:33:17,480
you can explore the code on github or pi

00:33:14,930 --> 00:33:20,240
PI you can also kind of join the

00:33:17,480 --> 00:33:22,460
community inside of WebEx teams which is

00:33:20,240 --> 00:33:25,220
a chat program similar to slack but it's

00:33:22,460 --> 00:33:27,290
a Cisco kind of collaboration platform

00:33:25,220 --> 00:33:29,750
where the community as well as the the

00:33:27,290 --> 00:33:31,580
developers of Pi ETS and the libraries

00:33:29,750 --> 00:33:33,830
and all of the integrations are helping

00:33:31,580 --> 00:33:35,420
users with both getting started level

00:33:33,830 --> 00:33:37,460
questions as well as advanced

00:33:35,420 --> 00:33:38,990
integration questions it's an excellent

00:33:37,460 --> 00:33:41,720
place if you're interested in network

00:33:38,990 --> 00:33:43,520
validation also on this slide you can

00:33:41,720 --> 00:33:45,860
see a QR code for where you can download

00:33:43,520 --> 00:33:47,630
these slides as well if you want to kind

00:33:45,860 --> 00:33:49,100
of dive deeper into them and get access

00:33:47,630 --> 00:33:52,250
to some of these links themselves as

00:33:49,100 --> 00:33:53,990
they go through now one final closing if

00:33:52,250 --> 00:33:55,640
you're interested in network automation

00:33:53,990 --> 00:33:58,010
I encourage you to stay in touch with me

00:33:55,640 --> 00:34:00,170
as well as the rest of our team at Cisco

00:33:58,010 --> 00:34:02,690
dev net you can follow me on twitter at

00:34:00,170 --> 00:34:05,300
hf Preston or reach man email or WebEx

00:34:02,690 --> 00:34:07,100
teams at H a presto at Cisco comm and

00:34:05,300 --> 00:34:08,629
then be sure to follow cisco dev net

00:34:07,100 --> 00:34:11,720
everywhere that you can follow anybody

00:34:08,629 --> 00:34:13,399
these days on social media with that

00:34:11,720 --> 00:34:15,620
thank you so much for joining me today

00:34:13,399 --> 00:34:17,389
for this PyCon talk I hope you've

00:34:15,620 --> 00:34:19,750
enjoyed it and I'll see you next year

00:34:17,389 --> 00:34:19,750

YouTube URL: https://www.youtube.com/watch?v=tFeVdazq0O0


