Title: OSMC 2017 | Next Generation Config Mgmt: Monitoring by James Shubin
Publication date: 2017-12-05
Playlist: OSMC 2017 | Open Source Monitoring Conference
Description: 
	Mgmt is a next gen config management tool that takes a fresh look at existing automation problems.
Three of the main design features of the tool include:
* Parallel execution
* Event driven mechanism
* Distributed architecture
The tool has two main parts: the engine, and the language.
This presentation will demo both and include many examples showing how monitoring is built-in to each resource, and how events can cause the system to react and fix a problem before your pager even goes off.
Finally we’ll talk about some of the future designs we’re planning and make it easy for new users to get involved and help shape the project.
A number of blog posts on the subject are available. https://ttboj.wordpress.com/?s=mgmtconfig Attendees are encouraged to read some before the talk if they want a preview!
Captions: 
	00:00:09,760 --> 00:00:12,360
all right

00:00:17,260 --> 00:00:23,910
welcome to the first talk for today and

00:00:19,359 --> 00:00:26,680
our next speaker started his own

00:00:23,910 --> 00:00:27,910
configuration management software

00:00:26,680 --> 00:00:31,509
Schroder

00:00:27,910 --> 00:00:35,230
he works at red head and he does a lots

00:00:31,509 --> 00:00:38,390
of fire shows I guess so please welcome

00:00:35,230 --> 00:00:44,250
James Shubin thank you

00:00:38,390 --> 00:00:46,420
[Music]

00:00:44,250 --> 00:00:47,680
we're gonna kill it for now cuz I got a

00:00:46,420 --> 00:00:49,420
lot of material to show you and I'm

00:00:47,680 --> 00:00:50,740
gonna go really fast who does not speak

00:00:49,420 --> 00:00:54,460
English just raise your hand so I know

00:00:50,740 --> 00:00:56,440
you are that's good you're all awake or

00:00:54,460 --> 00:00:58,180
or you all speak English I'm sorry I

00:00:56,440 --> 00:00:59,890
talk very quickly if you really lost or

00:00:58,180 --> 00:01:01,239
something don't be shy just tell me and

00:00:59,890 --> 00:01:06,580
I'll try and repeat something we have

00:01:01,239 --> 00:01:09,010
basically a full hour and I'm the guy

00:01:06,580 --> 00:01:12,370
who throws fire so you maybe want to be

00:01:09,010 --> 00:01:15,840
careful so I mean just get some stuff

00:01:12,370 --> 00:01:20,500
ready for you all right

00:01:15,840 --> 00:01:22,570
so you're here for this talk right so

00:01:20,500 --> 00:01:24,009
reactive systems monitoring we're going

00:01:22,570 --> 00:01:25,240
to talk about that a little bit she

00:01:24,009 --> 00:01:27,070
can't get started I'm gonna be sitting

00:01:25,240 --> 00:01:29,680
down a little bit so if you can't see me

00:01:27,070 --> 00:01:31,570
don't worry I'm here you'll hear me the

00:01:29,680 --> 00:01:32,680
slides or the stuff that I do in my

00:01:31,570 --> 00:01:33,850
terminals that's what you're really

00:01:32,680 --> 00:01:34,560
gonna want to see so have a look over

00:01:33,850 --> 00:01:37,330
there

00:01:34,560 --> 00:01:39,190
so I really want to talk about my

00:01:37,330 --> 00:01:40,840
software about what is actually possible

00:01:39,190 --> 00:01:42,430
today I don't know if I got the German

00:01:40,840 --> 00:01:44,320
right I just want to show you a quick

00:01:42,430 --> 00:01:47,560
video of what I expected Germany to be

00:01:44,320 --> 00:01:50,040
like I want to see this and waste some

00:01:47,560 --> 00:01:50,040
time on this

00:01:58,540 --> 00:02:05,610
okay OOP do you all know the video okay

00:02:06,300 --> 00:02:12,000
I found this really funny this is what I

00:02:13,230 --> 00:02:57,220
don't know what they're saying

00:02:14,890 --> 00:02:57,580
you know I think it's so I couldn't help

00:02:57,220 --> 00:02:59,590
it

00:02:57,580 --> 00:03:01,060
I got all waste I got to waste time

00:02:59,590 --> 00:03:02,590
really quickly I really sorry but I have

00:03:01,060 --> 00:03:04,360
to show you I'm from Canada not the

00:03:02,590 --> 00:03:07,150
United States and this is actually a

00:03:04,360 --> 00:03:10,209
video from my city in Montreal and then

00:03:07,150 --> 00:03:12,040
it's done with the videos basically we

00:03:10,209 --> 00:03:13,690
had some some snow and some ice and the

00:03:12,040 --> 00:03:17,730
hill is a little steep and this is what

00:03:13,690 --> 00:03:17,730
happened sorry for the VHS recording

00:03:21,440 --> 00:03:24,440
so

00:03:24,520 --> 00:03:28,840
I would have shown this in the pre-show

00:03:26,740 --> 00:03:30,460
but burn took a little bit more time

00:03:28,840 --> 00:03:31,540
than you're supposed to so I'm going

00:03:30,460 --> 00:03:36,580
five minutes over to show you these

00:03:31,540 --> 00:03:38,020
videos so this is our city bus which you

00:03:36,580 --> 00:03:42,210
know the drivers think they can just

00:03:38,020 --> 00:03:42,210
drive anywhere and he is wrong

00:03:44,460 --> 00:03:50,100
you don't have much snow in Nuremberg

00:03:46,200 --> 00:03:52,010
right so we're pretty good we actually

00:03:50,100 --> 00:03:57,020
can get this much snow in much all but

00:03:52,010 --> 00:03:57,020
everyone was just unexpected boom

00:04:06,140 --> 00:04:10,430
obviously the police have come to save

00:04:08,280 --> 00:04:10,430
the day

00:04:24,150 --> 00:04:30,860
but it's not over that's the salt truck

00:04:43,010 --> 00:04:48,890
boom okay so now now we really have to

00:04:46,550 --> 00:04:50,900
get going so Who am I I'm a hacker I

00:04:48,890 --> 00:04:52,970
work on config management things I work

00:04:50,900 --> 00:04:54,530
for this hat company I write a technical

00:04:52,970 --> 00:04:56,180
blog called the technical blog of James

00:04:54,530 --> 00:04:58,280
who's seen my blog just raise your hand

00:04:56,180 --> 00:04:59,660
if you haven't seen my blog raise your

00:04:58,280 --> 00:05:02,270
hand anyway so I seem really popular

00:04:59,660 --> 00:05:04,190
everyone thank you you know about it now

00:05:02,270 --> 00:05:05,660
I'm actually a physiologist by training

00:05:04,190 --> 00:05:07,400
so if you want to talk about cardiology

00:05:05,660 --> 00:05:09,560
I'm there and I'm really into DevOps

00:05:07,400 --> 00:05:11,900
stuff and I work on sort of DevOps tools

00:05:09,560 --> 00:05:14,660
or so I like to work on here's some

00:05:11,900 --> 00:05:15,980
background this is a beaker kind of

00:05:14,660 --> 00:05:17,960
screaming because everything is on fire

00:05:15,980 --> 00:05:19,730
and everything is bad with the sort of

00:05:17,960 --> 00:05:21,350
state of the art I did a lot of puppet

00:05:19,730 --> 00:05:24,200
historically and a lot of things about

00:05:21,350 --> 00:05:26,810
puppet that I found could it be improved

00:05:24,200 --> 00:05:28,190
let's say and and so I thought about

00:05:26,810 --> 00:05:29,810
what to do and people are like don't

00:05:28,190 --> 00:05:30,470
reinvent the wheel I saw this on the

00:05:29,810 --> 00:05:32,690
internet recently

00:05:30,470 --> 00:05:34,310
do we want to reinvent the wheel I think

00:05:32,690 --> 00:05:36,500
so so like you want the like nice

00:05:34,310 --> 00:05:39,770
awesome wheel that doesn't have as many

00:05:36,500 --> 00:05:41,540
problems as the first wheel so I really

00:05:39,770 --> 00:05:43,940
sat down and I said to myself is there

00:05:41,540 --> 00:05:45,740
an existing tool out there that is good

00:05:43,940 --> 00:05:49,310
enough that does what I mean and does

00:05:45,740 --> 00:05:52,490
what I want what do you guys think wake

00:05:49,310 --> 00:05:55,190
up wait okay so let's see this is my guy

00:05:52,490 --> 00:05:58,060
who's gonna answer this question I bring

00:05:55,190 --> 00:05:58,060
him to all my conferences

00:05:58,380 --> 00:06:02,280
pretty for we're pretty good friends for

00:06:00,420 --> 00:06:09,030
a guy doesn't have a name but he's mine

00:06:02,280 --> 00:06:10,740
oppa guy so so I couldn't find something

00:06:09,030 --> 00:06:12,420
that had everything I wanted and I want

00:06:10,740 --> 00:06:14,460
to prove to you that what I really

00:06:12,420 --> 00:06:15,960
wanted has some certain features and I'm

00:06:14,460 --> 00:06:17,700
gonna show you some of these things so I

00:06:15,960 --> 00:06:19,860
have this tool called MGMT I've got a

00:06:17,700 --> 00:06:20,910
nice logo I have like maybe 40 stickers

00:06:19,860 --> 00:06:25,140
left so if you really want a sticker

00:06:20,910 --> 00:06:27,750
I'll give you some it has two main parts

00:06:25,140 --> 00:06:29,520
it has an engine and a language and I'm

00:06:27,750 --> 00:06:30,570
gonna show you a little bit of both

00:06:29,520 --> 00:06:33,240
today and try and give you a big

00:06:30,570 --> 00:06:35,430
overview of the tool so the tool itself

00:06:33,240 --> 00:06:37,230
has three main points so if you're all

00:06:35,430 --> 00:06:41,130
familiar with config management a little

00:06:37,230 --> 00:06:42,450
bit who's not just raise your hand who's

00:06:41,130 --> 00:06:43,740
really shy and hates putting up their

00:06:42,450 --> 00:06:46,590
hand at conferences just let me know

00:06:43,740 --> 00:06:48,390
where you're sitting okay good so don't

00:06:46,590 --> 00:06:50,040
be shy if you have really stuck let me

00:06:48,390 --> 00:06:51,480
know but in config management we based

00:06:50,040 --> 00:06:52,920
have these graphs which I'm going to

00:06:51,480 --> 00:06:54,450
show you in a minute and one thing that

00:06:52,920 --> 00:06:56,280
we can do is we can run in parallel run

00:06:54,450 --> 00:06:57,180
the whole graph in parallel which I'm

00:06:56,280 --> 00:06:59,160
going to show you we're event-driven

00:06:57,180 --> 00:07:00,630
which I can also demo and we work as a

00:06:59,160 --> 00:07:02,280
distributed system which has some cool

00:07:00,630 --> 00:07:04,320
advantages so I'm going to go through

00:07:02,280 --> 00:07:06,960
these three things to start so here's a

00:07:04,320 --> 00:07:09,240
graph of a typical system in puppet or

00:07:06,960 --> 00:07:11,040
something like that the blue block boxes

00:07:09,240 --> 00:07:12,930
in my diagram represent resources so

00:07:11,040 --> 00:07:13,290
individual things units have work to do

00:07:12,930 --> 00:07:15,600
so

00:07:13,290 --> 00:07:20,280
install a package create a file start a

00:07:15,600 --> 00:07:21,690
service and so on excuse me and the red

00:07:20,280 --> 00:07:22,950
arrow if you look at the black arrows

00:07:21,690 --> 00:07:24,780
they actually represent the dependencies

00:07:22,950 --> 00:07:25,980
and current tools what they actually do

00:07:24,780 --> 00:07:28,020
is they do something called a

00:07:25,980 --> 00:07:29,850
topological sort so they go through they

00:07:28,020 --> 00:07:32,790
basically do this red line one two three

00:07:29,850 --> 00:07:34,200
four five six and then seven but if you

00:07:32,790 --> 00:07:37,050
have a parallel tool you can actually

00:07:34,200 --> 00:07:38,640
run this graph so you can run all on the

00:07:37,050 --> 00:07:41,070
left at the same time it's everything on

00:07:38,640 --> 00:07:43,020
the right and once you've done one a 2a

00:07:41,070 --> 00:07:47,550
and 2b can both be run in parallel so

00:07:43,020 --> 00:07:49,140
that make sense yes good good okay so

00:07:47,550 --> 00:07:50,430
I'm gonna show you actually a graph I'm

00:07:49,140 --> 00:07:53,910
gonna show you this graph I'm gonna run

00:07:50,430 --> 00:07:55,200
this graph and I'm just gonna make this

00:07:53,910 --> 00:07:57,790
a little bit more fun so we've just

00:07:55,200 --> 00:08:02,440
built a new copy for you

00:07:57,790 --> 00:08:04,200
it should be building so on the Left I'm

00:08:02,440 --> 00:08:08,080
actually going to run this graph in

00:08:04,200 --> 00:08:11,350
puppet so this is a puppet script I

00:08:08,080 --> 00:08:14,250
wrote which is just literally can you

00:08:11,350 --> 00:08:14,250
see that okay is it big enough

00:08:15,820 --> 00:08:20,260
so that's puppet and they're gonna run

00:08:17,650 --> 00:08:21,580
the same code basically in MGMT so I'm

00:08:20,260 --> 00:08:23,080
just gonna run puppet here on the left

00:08:21,580 --> 00:08:24,970
this is all running on my crappy laptop

00:08:23,080 --> 00:08:27,940
I'm gonna let puppet have a chance to

00:08:24,970 --> 00:08:30,490
start and now I'm gonna run MGMT on the

00:08:27,940 --> 00:08:31,780
right and it's off to the races already

00:08:30,490 --> 00:08:33,580
going it's already doing the first

00:08:31,780 --> 00:08:35,830
resource the resources are just a little

00:08:33,580 --> 00:08:37,510
bit arbitrary puppet is still loading

00:08:35,830 --> 00:08:39,220
its fact so it just finished its facts I

00:08:37,510 --> 00:08:41,320
think I think any seconds it's gonna

00:08:39,220 --> 00:08:42,669
start running come on puppet you can do

00:08:41,320 --> 00:08:44,620
it got puppet on the left

00:08:42,669 --> 00:08:46,840
MGMT with lots of debug output on the

00:08:44,620 --> 00:08:50,260
right Oh puppet is running its first

00:08:46,840 --> 00:08:54,690
resource finally MGMT's going along and

00:08:50,260 --> 00:08:54,690
we started later right just to be clear

00:08:56,230 --> 00:08:59,709
it's a little boring watching terminals

00:08:58,000 --> 00:09:01,779
but you get the idea who's done watching

00:08:59,709 --> 00:09:04,810
terminals you all do this right all

00:09:01,779 --> 00:09:06,100
right so you're my people and MGMT we

00:09:04,810 --> 00:09:08,350
ask you to shut down when it's done

00:09:06,100 --> 00:09:10,420
doing all the work normally it can run

00:09:08,350 --> 00:09:13,180
continuously try and show you so it's

00:09:10,420 --> 00:09:14,649
done and puppet is still going and

00:09:13,180 --> 00:09:16,300
that's really one of the points so

00:09:14,649 --> 00:09:18,430
because we're much fast we're actually

00:09:16,300 --> 00:09:19,930
much faster software as well but because

00:09:18,430 --> 00:09:21,850
we can run the graph in parallel we can

00:09:19,930 --> 00:09:23,019
do a lot of things to make things more

00:09:21,850 --> 00:09:24,100
efficient so the things that really

00:09:23,019 --> 00:09:25,449
don't depend on each other

00:09:24,100 --> 00:09:28,720
you're not spent wasting your time

00:09:25,449 --> 00:09:30,550
waiting for that make sense yes don't be

00:09:28,720 --> 00:09:32,050
shy yes okay good

00:09:30,550 --> 00:09:34,180
so puppets finally finished so that's

00:09:32,050 --> 00:09:35,889
good so I want to show you the event

00:09:34,180 --> 00:09:37,540
stuff because it's kind of cool so I'm

00:09:35,889 --> 00:09:40,449
gonna go back into the terminal I'm

00:09:37,540 --> 00:09:43,949
gonna just kill this window and I have a

00:09:40,449 --> 00:09:43,949
special little demo for you

00:09:45,970 --> 00:09:53,399
so on the right I've got nothing in this

00:09:47,909 --> 00:09:55,809
file and I'm gonna just run this hello

00:09:53,399 --> 00:09:57,059
so on the left I'm just gonna run this

00:09:55,809 --> 00:10:01,569
very simple

00:09:57,059 --> 00:10:02,769
MGMT sort of graph and all MGMT has been

00:10:01,569 --> 00:10:05,499
asked to do is create a single file

00:10:02,769 --> 00:10:09,359
called hello right very simple I can

00:10:05,499 --> 00:10:09,359
show you the code actually just for fun

00:10:10,169 --> 00:10:17,340
hello where's the file called

00:10:15,170 --> 00:10:18,930
all right

00:10:17,340 --> 00:10:20,790
apples

00:10:18,930 --> 00:10:22,050
so this is very simple thing if you're

00:10:20,790 --> 00:10:24,209
familiar with puppet this will probably

00:10:22,050 --> 00:10:26,309
look pretty familiar and and here's the

00:10:24,209 --> 00:10:27,959
cool thing though once this is running

00:10:26,309 --> 00:10:29,819
which it is on the Left the file is

00:10:27,959 --> 00:10:31,499
there it has the contents we expect but

00:10:29,819 --> 00:10:32,759
it's running continuously so the cool

00:10:31,499 --> 00:10:35,639
thing is if I actually just remove it

00:10:32,759 --> 00:10:37,439
you can see it comes right back I can

00:10:35,639 --> 00:10:39,809
remove the file and it comes right back

00:10:37,439 --> 00:10:41,879
because MGMT is ensuring the state in

00:10:39,809 --> 00:10:43,709
real time in fact it's so quick you can

00:10:41,879 --> 00:10:46,110
even remove the file and tap the file

00:10:43,709 --> 00:10:48,629
and even before bash has a chance to run

00:10:46,110 --> 00:10:51,089
part two it comes right back okay and

00:10:48,629 --> 00:10:52,709
and just to be a little bit crazy I can

00:10:51,089 --> 00:10:55,800
actually run watch do you know the watch

00:10:52,709 --> 00:11:00,749
command so watch we'll just run over and

00:10:55,800 --> 00:11:02,699
over as fast as you can oops watch can

00:11:00,749 --> 00:11:05,129
run as fast as you can and you can see

00:11:02,699 --> 00:11:07,139
as fast as I run watch it's gonna get

00:11:05,129 --> 00:11:09,860
MGMT to go and fix the file continuously

00:11:07,139 --> 00:11:12,300
you get it so this is just one example

00:11:09,860 --> 00:11:14,429
I'm just gonna kill this now this is

00:11:12,300 --> 00:11:15,929
just one example of doing events per

00:11:14,429 --> 00:11:17,970
resource we do something like this for

00:11:15,929 --> 00:11:20,100
every single resource for files we use

00:11:17,970 --> 00:11:22,439
inotify to do this for services we use

00:11:20,100 --> 00:11:23,610
system the events and all sorts of

00:11:22,439 --> 00:11:25,559
different things for whatever resource

00:11:23,610 --> 00:11:28,980
we even have a lip vert event so we can

00:11:25,559 --> 00:11:30,839
actually declare in our code the number

00:11:28,980 --> 00:11:33,059
of libvirt machines or virtual machines

00:11:30,839 --> 00:11:35,009
that you want and MGMT will ensure that

00:11:33,059 --> 00:11:37,379
state is correct and I'm gonna show you

00:11:35,009 --> 00:11:39,720
more about that later so I think this is

00:11:37,379 --> 00:11:41,459
what I would call config management but

00:11:39,720 --> 00:11:43,110
doing this per resource I think it's

00:11:41,459 --> 00:11:47,429
another technology as well what do you

00:11:43,110 --> 00:11:49,439
think it is screaming out anybody okay

00:11:47,429 --> 00:11:51,420
yes where's the monitoring conference

00:11:49,439 --> 00:11:53,639
this is monitoring so does that make

00:11:51,420 --> 00:11:55,350
sense to you umm it's not a full

00:11:53,639 --> 00:11:56,850
monitoring solution we're not trying to

00:11:55,350 --> 00:11:58,889
replace icing or any of these things

00:11:56,850 --> 00:12:01,350
like that but just thinking about um

00:11:58,889 --> 00:12:03,240
having the job as a system in to put

00:12:01,350 --> 00:12:04,949
everything in production to set up

00:12:03,240 --> 00:12:06,480
configure engine to automate it but

00:12:04,949 --> 00:12:08,120
you're not done if it's automated you

00:12:06,480 --> 00:12:09,420
have to also set up monitoring right

00:12:08,120 --> 00:12:11,160
yeah

00:12:09,420 --> 00:12:13,709
these are all good system ins we do this

00:12:11,160 --> 00:12:16,110
right yes good good at monitoring

00:12:13,709 --> 00:12:17,549
conference everyone says yes and that's

00:12:16,110 --> 00:12:19,290
really the point so if we can actually

00:12:17,549 --> 00:12:20,129
build some of this into the resource

00:12:19,290 --> 00:12:21,809
level when you're doing your

00:12:20,129 --> 00:12:22,649
configuration management hopefully it'll

00:12:21,809 --> 00:12:26,009
make your lives a little bit easier

00:12:22,649 --> 00:12:27,990
alright there are quiet audience don't

00:12:26,009 --> 00:12:30,060
be shy I won't bite you or set you on

00:12:27,990 --> 00:12:31,560
fire so

00:12:30,060 --> 00:12:34,200
I just want to talk a little bit about

00:12:31,560 --> 00:12:35,790
topologies so this is a sort of well

00:12:34,200 --> 00:12:37,260
known topology where you have a whole

00:12:35,790 --> 00:12:37,890
bunch of clients that go off and connect

00:12:37,260 --> 00:12:40,620
to a server

00:12:37,890 --> 00:12:46,080
what kind of topology is this scream it

00:12:40,620 --> 00:12:48,870
out don't be shy what's it called let's

00:12:46,080 --> 00:12:50,670
call it client-server all right so

00:12:48,870 --> 00:12:55,140
everyone knows this topology what's the

00:12:50,670 --> 00:12:56,280
problem with this kind of topology if

00:12:55,140 --> 00:12:59,190
there's a central server what's the

00:12:56,280 --> 00:13:00,360
problem with that it's a single point of

00:12:59,190 --> 00:13:04,530
failure what's another problem with this

00:13:00,360 --> 00:13:05,640
kind of topology scalability right so

00:13:04,530 --> 00:13:07,260
performance if you have many many

00:13:05,640 --> 00:13:08,550
clients this can be an issue this is a

00:13:07,260 --> 00:13:10,350
good topology it's a very well-known

00:13:08,550 --> 00:13:12,090
topology lots of useful things are built

00:13:10,350 --> 00:13:13,470
this way but I just want you to

00:13:12,090 --> 00:13:15,210
understand it here's a slightly

00:13:13,470 --> 00:13:17,040
different topology where in this case

00:13:15,210 --> 00:13:18,450
you have a single thing this is called

00:13:17,040 --> 00:13:20,340
the central Orchestrator or just an

00:13:18,450 --> 00:13:21,540
Orchestrator and the orchestrator goes

00:13:20,340 --> 00:13:23,130
off and connects to a whole bunch of

00:13:21,540 --> 00:13:28,830
machines what's the problem with this

00:13:23,130 --> 00:13:30,690
kind of topology what I can't hear so

00:13:28,830 --> 00:13:33,630
well but so someone else or go ahead a

00:13:30,690 --> 00:13:35,730
lot all right I'll give you a hint it's

00:13:33,630 --> 00:13:37,940
same as before right you still have a

00:13:35,730 --> 00:13:40,050
single point of failure am i right and

00:13:37,940 --> 00:13:42,810
also you still have some performance

00:13:40,050 --> 00:13:44,520
problems potentially so an MGMT what we

00:13:42,810 --> 00:13:46,110
do is this is actually a graph of

00:13:44,520 --> 00:13:47,280
everyone connected to everyone else we

00:13:46,110 --> 00:13:51,180
don't do this and what's the problem

00:13:47,280 --> 00:13:52,820
with this topology synchronization is

00:13:51,180 --> 00:13:54,840
actually not the problem

00:13:52,820 --> 00:13:56,010
scalability so if you have a very large

00:13:54,840 --> 00:13:57,570
number of peers and everyone's

00:13:56,010 --> 00:13:59,700
connecting to everyone else there would

00:13:57,570 --> 00:14:01,230
just be too many connections so here's

00:13:59,700 --> 00:14:03,480
what we actually do what we actually do

00:14:01,230 --> 00:14:07,530
is we have as many you know peers as you

00:14:03,480 --> 00:14:08,790
want and everyone a few sort of random

00:14:07,530 --> 00:14:10,770
ones that are selected with a

00:14:08,790 --> 00:14:12,690
distributer algorithm call draft in our

00:14:10,770 --> 00:14:14,190
case become a sort of tight cluster

00:14:12,690 --> 00:14:16,530
where they all connect to each other and

00:14:14,190 --> 00:14:18,600
everyone else connects to any one of

00:14:16,530 --> 00:14:20,340
those and the cool thing is of one of

00:14:18,600 --> 00:14:21,930
these central machines dyes you can

00:14:20,340 --> 00:14:24,690
automatically reelect another one to

00:14:21,930 --> 00:14:28,110
take over and this central core we use

00:14:24,690 --> 00:14:29,850
for doing some fancy logic stuff use RAF

00:14:28,110 --> 00:14:31,710
to elect and make cluster wide decisions

00:14:29,850 --> 00:14:33,750
without a single person making the

00:14:31,710 --> 00:14:35,160
decision or single host so that's sort

00:14:33,750 --> 00:14:36,480
of what I'm going to show you today so

00:14:35,160 --> 00:14:39,060
you wanna see a demo or are you sick of

00:14:36,480 --> 00:14:40,810
demos yeah this guy's like yeah ok cool

00:14:39,060 --> 00:14:43,960
he's excited

00:14:40,810 --> 00:14:46,900
so I'm gonna go over here I'm gonna do a

00:14:43,960 --> 00:14:50,050
kind of you know if I have a I don't

00:14:46,900 --> 00:14:51,400
have this I'm gonna run a whole bunch of

00:14:50,050 --> 00:14:52,570
machines but I'm gonna run them all

00:14:51,400 --> 00:14:55,060
locally and just pretend they're

00:14:52,570 --> 00:14:59,520
different machines on my laptop so just

00:14:55,060 --> 00:14:59,520
- oops

00:15:05,630 --> 00:15:07,660
Oh

00:15:13,970 --> 00:15:17,269
there we go so what I'm going to do is

00:15:15,949 --> 00:15:18,889
I'm just watching these four files

00:15:17,269 --> 00:15:21,079
because I'm going to have each machine

00:15:18,889 --> 00:15:22,310
put some data in this file and that's

00:15:21,079 --> 00:15:24,139
just going to show you in real time what

00:15:22,310 --> 00:15:26,480
it looks like and what I'm gonna do is

00:15:24,139 --> 00:15:27,920
I'm gonna have each machine start up I'm

00:15:26,480 --> 00:15:29,990
gonna start them up one at a time just

00:15:27,920 --> 00:15:32,389
so you can see what's happening and each

00:15:29,990 --> 00:15:34,519
machine is actually going to create a

00:15:32,389 --> 00:15:35,990
random string and it's going to put it

00:15:34,519 --> 00:15:37,670
into this distributor database and

00:15:35,990 --> 00:15:39,110
everyone else is gonna see what strings

00:15:37,670 --> 00:15:40,970
are in that database and pull them down

00:15:39,110 --> 00:15:42,709
this is basically kind of like a service

00:15:40,970 --> 00:15:43,970
discovery kind of pattern so I'm gonna

00:15:42,709 --> 00:15:47,329
run the first one let's see what happens

00:15:43,970 --> 00:15:48,500
if we run it so you can see the first

00:15:47,329 --> 00:15:50,360
one is the only one running at the

00:15:48,500 --> 00:15:52,639
moment and you can see it shows that its

00:15:50,360 --> 00:15:54,709
hostname 1 and that's the random string

00:15:52,639 --> 00:15:57,170
that it happened to generate so it sees

00:15:54,709 --> 00:15:59,810
its own string um that's what happens

00:15:57,170 --> 00:16:01,550
when I start up a second machine so they

00:15:59,810 --> 00:16:03,019
automatically cluster together all you

00:16:01,550 --> 00:16:04,579
do is you point the new machine at any

00:16:03,019 --> 00:16:06,290
one in the old cluster and they'll do

00:16:04,579 --> 00:16:08,240
this clustering you'll see there's a few

00:16:06,290 --> 00:16:11,060
other commands I've added here these are

00:16:08,240 --> 00:16:12,680
just extra ports because I'm running

00:16:11,060 --> 00:16:13,850
everything locally on localhost so I

00:16:12,680 --> 00:16:15,649
have to pick different ports so the

00:16:13,850 --> 00:16:18,170
server's don't collide but other than

00:16:15,649 --> 00:16:20,509
that you just run this and very quickly

00:16:18,170 --> 00:16:23,720
you see the first one actually wakes up

00:16:20,509 --> 00:16:26,959
and notices that it has data from both

00:16:23,720 --> 00:16:30,050
of them so now the first one has H 1 and

00:16:26,959 --> 00:16:33,170
H 2 s data okay does that fall a little

00:16:30,050 --> 00:16:35,120
bit let's see a third example yes all

00:16:33,170 --> 00:16:36,930
right you're waking up that's good let's

00:16:35,120 --> 00:16:40,319
just start a third one

00:16:36,930 --> 00:16:42,149
start up here it's running and you know

00:16:40,319 --> 00:16:43,889
under a second basically it's running so

00:16:42,149 --> 00:16:45,899
what's actually happening here this is a

00:16:43,889 --> 00:16:47,100
very useful pattern this one of these

00:16:45,899 --> 00:16:48,809
machines for example could be a load

00:16:47,100 --> 00:16:50,819
balancer and everyone else could be a

00:16:48,809 --> 00:16:53,730
webserver and you want to actually have

00:16:50,819 --> 00:16:56,279
that data monitoring data if you want

00:16:53,730 --> 00:16:58,350
about when that machine comes up you say

00:16:56,279 --> 00:16:59,730
hey I'm here here's my IP address here's

00:16:58,350 --> 00:17:01,529
some password you need or some other

00:16:59,730 --> 00:17:03,959
thing and that other machine will see it

00:17:01,529 --> 00:17:06,179
and automatically very quickly use that

00:17:03,959 --> 00:17:08,490
to you know edit the load balancer or

00:17:06,179 --> 00:17:10,380
some other pattern this is actually kind

00:17:08,490 --> 00:17:11,970
of like similar to what you might have

00:17:10,380 --> 00:17:13,559
in a conference room so everyone goes

00:17:11,970 --> 00:17:15,209
into a conference room you say hi my

00:17:13,559 --> 00:17:16,770
name is James and everyone else says

00:17:15,209 --> 00:17:18,240
their name as well and that sort of

00:17:16,770 --> 00:17:20,760
pattern and we can do this actually in

00:17:18,240 --> 00:17:22,169
milliseconds and this is very similar to

00:17:20,760 --> 00:17:25,110
what puppet might call exported

00:17:22,169 --> 00:17:27,480
resources except exported resources take

00:17:25,110 --> 00:17:29,850
like hours to run or hours to exchange

00:17:27,480 --> 00:17:32,299
in a whole cluster whereas this is under

00:17:29,850 --> 00:17:34,380
a second has anyone lost about this I

00:17:32,299 --> 00:17:36,600
was told to go really hard on you guys

00:17:34,380 --> 00:17:37,919
and make it really more in-depth so if

00:17:36,600 --> 00:17:41,760
that's what Byrne said so if you're

00:17:37,919 --> 00:17:43,230
unhappy have to tell me good okay don't

00:17:41,760 --> 00:17:44,880
be shy um if you've missed something

00:17:43,230 --> 00:17:46,860
I've have some of this material recorded

00:17:44,880 --> 00:17:50,549
as well and there's some blog post so

00:17:46,860 --> 00:17:52,260
you can also check on stuff after and

00:17:50,549 --> 00:17:54,480
you know we can open up a fourth one if

00:17:52,260 --> 00:17:56,220
we really want the same sort of things

00:17:54,480 --> 00:17:58,490
didn't happen you can see now everyone

00:17:56,220 --> 00:18:00,630
is looking at everyone else's machines

00:17:58,490 --> 00:18:04,799
I'm just gonna kill all these things

00:18:00,630 --> 00:18:07,110
shut them down quickly so I can show you

00:18:04,799 --> 00:18:11,850
some more demos if you'd like to see

00:18:07,110 --> 00:18:12,990
more demos yes all right cool so I've

00:18:11,850 --> 00:18:15,090
showed you the engine and the engine

00:18:12,990 --> 00:18:18,210
basically takes this graph of resources

00:18:15,090 --> 00:18:20,370
and it runs it and the the engine can

00:18:18,210 --> 00:18:21,870
actually send different graphs excuse me

00:18:20,370 --> 00:18:23,789
there's a front-end that can send

00:18:21,870 --> 00:18:25,380
different graphs to the engine as often

00:18:23,789 --> 00:18:26,970
as they want so you can actually change

00:18:25,380 --> 00:18:29,460
you're basically you're running puppet

00:18:26,970 --> 00:18:31,350
catalog you know ten times a second or

00:18:29,460 --> 00:18:34,049
once an hour or as often as you like and

00:18:31,350 --> 00:18:35,250
the way we send new graphs to MGMT is we

00:18:34,049 --> 00:18:36,990
have a language which we're building

00:18:35,250 --> 00:18:37,830
kind of like the puppet DSL but it has

00:18:36,990 --> 00:18:39,870
some interesting properties

00:18:37,830 --> 00:18:42,210
um this is basically the quote of what I

00:18:39,870 --> 00:18:44,010
was trying to get at when we designed

00:18:42,210 --> 00:18:45,730
the language I don't know this person

00:18:44,010 --> 00:18:47,889
but

00:18:45,730 --> 00:18:49,600
they're some sort of computer scientists

00:18:47,889 --> 00:18:51,669
or sorts so I really want to have a

00:18:49,600 --> 00:18:53,409
language which makes it very easy to do

00:18:51,669 --> 00:18:55,630
what you want but also very difficult to

00:18:53,409 --> 00:18:57,490
do bad or dangerous things right because

00:18:55,630 --> 00:18:59,230
if you are coding in your infrastructure

00:18:57,490 --> 00:19:00,460
and you make it off by one error you

00:18:59,230 --> 00:19:01,269
don't want to blow away a data center

00:19:00,460 --> 00:19:04,539
all right

00:19:01,269 --> 00:19:06,070
make sense some guy like raised his

00:19:04,539 --> 00:19:08,169
eyebrows he's like yes I do not want to

00:19:06,070 --> 00:19:09,549
blow away a data center so um I'm gonna

00:19:08,169 --> 00:19:10,779
show you the language but I just want to

00:19:09,549 --> 00:19:12,850
show you some of the properties that we

00:19:10,779 --> 00:19:15,250
wanted the general language I'm one

00:19:12,850 --> 00:19:18,429
language which is safe powerful and

00:19:15,250 --> 00:19:20,529
something you can reason about in our

00:19:18,429 --> 00:19:23,169
case we have a declarative language so

00:19:20,529 --> 00:19:24,399
it's immutable I think is how the common

00:19:23,169 --> 00:19:26,320
computer science people talk about

00:19:24,399 --> 00:19:28,450
things and it's going to be probably a

00:19:26,320 --> 00:19:30,490
functional language with strong types

00:19:28,450 --> 00:19:32,529
the language and the engine is actually

00:19:30,490 --> 00:19:34,960
implemented in a memory safe language so

00:19:32,529 --> 00:19:37,539
it's all written in going so you won't

00:19:34,960 --> 00:19:39,909
have like random C overflow bugs

00:19:37,539 --> 00:19:41,460
hopefully and it's reactive which I'm

00:19:39,909 --> 00:19:44,169
going to show you in a second and

00:19:41,460 --> 00:19:47,590
there's a few other properties which not

00:19:44,169 --> 00:19:49,169
talking about too much today so here's a

00:19:47,590 --> 00:19:51,630
demo can you see this is it big enough

00:19:49,169 --> 00:19:54,669
I'm gonna actually running this demo

00:19:51,630 --> 00:19:58,019
take a look at the code I'm just gonna

00:19:54,669 --> 00:19:58,019
get this running

00:19:58,430 --> 00:20:04,030
so so I'm gonna run MGMT on the left and

00:20:06,590 --> 00:20:16,539
I'm just going to we've asked MGMT to

00:20:12,549 --> 00:20:19,940
need to fix one small thing okay

00:20:16,539 --> 00:20:22,039
so we've asked MGMT to run this code and

00:20:19,940 --> 00:20:23,720
that code is going to put some stuff out

00:20:22,039 --> 00:20:27,260
into a file so I just want to show you

00:20:23,720 --> 00:20:30,350
the code first so up at the top we have

00:20:27,260 --> 00:20:34,309
some date time function which is going

00:20:30,350 --> 00:20:37,309
to add this variable a year and put it

00:20:34,309 --> 00:20:39,049
in y1 and that's weird because a year

00:20:37,309 --> 00:20:41,029
seems to be defined below underneath

00:20:39,049 --> 00:20:42,799
here which is just the multiple of a

00:20:41,029 --> 00:20:45,610
bunch of integers so that's actually the

00:20:42,799 --> 00:20:48,260
number of seconds near following so far

00:20:45,610 --> 00:20:49,399
here is just actually the syntax might

00:20:48,260 --> 00:20:51,470
change in the language by the way but

00:20:49,399 --> 00:20:54,140
this is a big map which takes a bunch of

00:20:51,470 --> 00:20:56,750
variables over here we have some other

00:20:54,140 --> 00:20:59,960
load function which is getting stored in

00:20:56,750 --> 00:21:02,870
a variable and this vu variable which

00:20:59,960 --> 00:21:04,520
also run some function and then we have

00:21:02,870 --> 00:21:07,990
this big string which we print out and

00:21:04,520 --> 00:21:11,570
we store it as the contents of this file

00:21:07,990 --> 00:21:13,520
now that would might seem a little weird

00:21:11,570 --> 00:21:15,620
but here's what's actually happening let

00:21:13,520 --> 00:21:16,700
me show you what's actually happening if

00:21:15,620 --> 00:21:18,470
you look here

00:21:16,700 --> 00:21:20,210
I'll just MGMT's running I'll hide it in

00:21:18,470 --> 00:21:21,980
the background this is actually what the

00:21:20,210 --> 00:21:24,140
contents of this file are and you can

00:21:21,980 --> 00:21:25,370
notice a few things I'm pulling the file

00:21:24,140 --> 00:21:27,230
just so you can see what's happening in

00:21:25,370 --> 00:21:28,760
real-time to this file but you can see

00:21:27,230 --> 00:21:31,159
you have the number of seconds which is

00:21:28,760 --> 00:21:33,649
ticking along you have the current load

00:21:31,159 --> 00:21:35,450
average on my machine which is changing

00:21:33,649 --> 00:21:37,190
about every 5 seconds and you have this

00:21:35,450 --> 00:21:39,230
other thing and here's what's actually

00:21:37,190 --> 00:21:41,390
happening in our language it's a

00:21:39,230 --> 00:21:44,029
reactive language so all those functions

00:21:41,390 --> 00:21:48,110
actually return a sequence of variables

00:21:44,029 --> 00:21:49,460
and every time the net graph that comes

00:21:48,110 --> 00:21:51,500
out of all these different variables and

00:21:49,460 --> 00:21:53,899
functions changes we push it to the

00:21:51,500 --> 00:21:55,279
engine and the thing we're pushing to

00:21:53,899 --> 00:21:58,070
the engine in this case is a single

00:21:55,279 --> 00:22:01,299
graph with a file resource that has some

00:21:58,070 --> 00:22:03,260
contents which we change very often and

00:22:01,299 --> 00:22:05,210
that's kind of cool because we can

00:22:03,260 --> 00:22:07,460
actually think about variables over time

00:22:05,210 --> 00:22:10,370
and do clever things this is just

00:22:07,460 --> 00:22:11,960
illustrative and so load average we can

00:22:10,370 --> 00:22:13,700
make decisions and change our

00:22:11,960 --> 00:22:15,950
infrastructure based on a changing load

00:22:13,700 --> 00:22:19,190
average or some monitoring metric and

00:22:15,950 --> 00:22:20,190
just for fun I actually made a custom

00:22:19,190 --> 00:22:21,990
function

00:22:20,190 --> 00:22:23,490
vu meter you know those like things that

00:22:21,990 --> 00:22:25,680
go up when you hear the music

00:22:23,490 --> 00:22:28,110
so this vu meter is actually running on

00:22:25,680 --> 00:22:33,450
my microphone right now and if we're

00:22:28,110 --> 00:22:35,370
quiet listen drops down but if we if we

00:22:33,450 --> 00:22:39,410
make some noise you can see it goes up

00:22:35,370 --> 00:22:43,410
so I think do you like that is that cool

00:22:39,410 --> 00:22:45,390
so wait I really flattered that you're

00:22:43,410 --> 00:22:47,310
clapping but we're gonna make this more

00:22:45,390 --> 00:22:49,500
fun I'm gonna see I'm gonna be quiet and

00:22:47,310 --> 00:22:51,210
when I point at the thing we're gonna

00:22:49,500 --> 00:22:52,740
see if you guys can clap loud enough to

00:22:51,210 --> 00:23:01,620
make it go up is that cool

00:22:52,740 --> 00:23:03,420
are you ready okay good job so that's

00:23:01,620 --> 00:23:05,460
just a sort of a fun example just to

00:23:03,420 --> 00:23:07,080
show you what's possible what could you

00:23:05,460 --> 00:23:08,520
do with this I mean this is kind of just

00:23:07,080 --> 00:23:10,680
a silly example but think about it this

00:23:08,520 --> 00:23:11,910
way maybe in your infrastructure you

00:23:10,680 --> 00:23:14,100
have some office where you have lots of

00:23:11,910 --> 00:23:16,380
fights so you could have a vu meter in

00:23:14,100 --> 00:23:18,120
your office and if it's really loud for

00:23:16,380 --> 00:23:19,680
more than you know a minute you know

00:23:18,120 --> 00:23:20,820
automatically set all the repos to

00:23:19,680 --> 00:23:22,830
read-only because someone's having a

00:23:20,820 --> 00:23:24,840
fight you know you could do sort of

00:23:22,830 --> 00:23:26,400
silly things because infrastructures are

00:23:24,840 --> 00:23:28,350
not static they change over time and

00:23:26,400 --> 00:23:30,360
whatever inputs you want that's up to

00:23:28,350 --> 00:23:32,610
you here's just one silly example you

00:23:30,360 --> 00:23:35,460
like that cool you want to see more

00:23:32,610 --> 00:23:39,150
demos where you fed up I guess I'll go

00:23:35,460 --> 00:23:42,770
one more yeah come on you're allowed

00:23:39,150 --> 00:23:45,660
before all right good good all right so

00:23:42,770 --> 00:23:47,370
so I showed you that she's gonna kill

00:23:45,660 --> 00:23:49,290
this and and you'll notice this is very

00:23:47,370 --> 00:23:51,180
efficient right this is not like hosing

00:23:49,290 --> 00:23:53,130
my old CPU if you're in front you can

00:23:51,180 --> 00:23:54,900
see that my laptop is pretty garbage so

00:23:53,130 --> 00:23:56,610
it's very very efficient software I mean

00:23:54,900 --> 00:23:59,070
doesn't waste lots of resources doing

00:23:56,610 --> 00:24:00,840
these things obviously sending the new

00:23:59,070 --> 00:24:02,460
number of seconds to a text file every

00:24:00,840 --> 00:24:03,780
second is kind of silly you probably

00:24:02,460 --> 00:24:05,400
wouldn't really need to do this in real

00:24:03,780 --> 00:24:11,070
life but there are other things that you

00:24:05,400 --> 00:24:13,460
could possibly choose to do so so I'm

00:24:11,070 --> 00:24:13,460
going to show you

00:24:13,580 --> 00:24:20,180
sorry about that oh it's actually uh

00:24:17,890 --> 00:24:23,030
there we go so I'm gonna show you this

00:24:20,180 --> 00:24:25,720
example here so here we have let me just

00:24:23,030 --> 00:24:25,720
actually run this

00:24:28,770 --> 00:24:35,680
so I'm just running this over here on

00:24:30,990 --> 00:24:38,290
the left and we're gonna watch

00:24:35,680 --> 00:24:39,970
cool so what we have here is we have

00:24:38,290 --> 00:24:42,130
this date time function again now you

00:24:39,970 --> 00:24:43,870
know about this function it just release

00:24:42,130 --> 00:24:47,260
with that it just puts out a new number

00:24:43,870 --> 00:24:48,730
of seconds since 1970 every second so

00:24:47,260 --> 00:24:50,620
it's constantly changing since the date

00:24:48,730 --> 00:24:54,160
and time is changing we put this in this

00:24:50,620 --> 00:24:56,470
DT variable and down here we have these

00:24:54,160 --> 00:24:59,380
four other variables that is like DT and

00:24:56,470 --> 00:25:00,880
some sort of index operator 0 1 2 3 4

00:24:59,380 --> 00:25:02,680
and so on and then we're just gonna

00:25:00,880 --> 00:25:04,840
actually tap all of those together into

00:25:02,680 --> 00:25:06,670
a big string and put it into the file

00:25:04,840 --> 00:25:08,980
contents so this parameter of this

00:25:06,670 --> 00:25:10,300
resource that's a big long thing and

00:25:08,980 --> 00:25:12,760
this is what it actually looks like on

00:25:10,300 --> 00:25:15,010
the Left MGMT's running and on the right

00:25:12,760 --> 00:25:17,470
you can actually see the top value is

00:25:15,010 --> 00:25:20,140
the current date and time in seconds I

00:25:17,470 --> 00:25:23,320
also printed it out as a real time and

00:25:20,140 --> 00:25:24,670
you can see the previous values so now

00:25:23,320 --> 00:25:26,500
that we have this reactive language in

00:25:24,670 --> 00:25:28,060
addition to getting values that changes

00:25:26,500 --> 00:25:30,970
over time we can actually look into the

00:25:28,060 --> 00:25:32,530
history and see what values were so that

00:25:30,970 --> 00:25:34,690
means we can make decisions based on if

00:25:32,530 --> 00:25:36,130
the load is going up over the last 30

00:25:34,690 --> 00:25:39,340
seconds we might want to do something

00:25:36,130 --> 00:25:41,260
versus something else okay so just a

00:25:39,340 --> 00:25:42,790
different thing you can model and all of

00:25:41,260 --> 00:25:44,620
this is modeled in a very safe language

00:25:42,790 --> 00:25:44,980
so that's kind of key as well is that

00:25:44,620 --> 00:25:47,470
cool

00:25:44,980 --> 00:25:50,740
all right let's build on that that just

00:25:47,470 --> 00:25:52,300
to warm you up to the concept so what is

00:25:50,740 --> 00:25:54,310
this does anyone know what this is it's

00:25:52,300 --> 00:25:56,410
a bad photo this is actually taken at my

00:25:54,310 --> 00:25:58,060
parents house I just want you to note

00:25:56,410 --> 00:26:01,120
I'm from Canada it's in Celsius the

00:25:58,060 --> 00:26:02,650
correct units but the photo was very bad

00:26:01,120 --> 00:26:04,690
so I found on the internet a slightly

00:26:02,650 --> 00:26:07,270
better photo which is unfortunately in

00:26:04,690 --> 00:26:08,820
the strange units what is this does

00:26:07,270 --> 00:26:10,990
anyone know what this actually is

00:26:08,820 --> 00:26:14,140
it's a thermostat right remember these

00:26:10,990 --> 00:26:16,210
old thermostats this is one thermostats

00:26:14,140 --> 00:26:18,130
have a very interesting property does

00:26:16,210 --> 00:26:19,090
anyone know what that property is apart

00:26:18,130 --> 00:26:21,330
from controlling the temperature in your

00:26:19,090 --> 00:26:21,330
house

00:26:23,010 --> 00:26:26,910
that's true but what's the what's the

00:26:25,169 --> 00:26:29,250
property that's not what I'm looking for

00:26:26,910 --> 00:26:31,080
though it's a good answer

00:26:29,250 --> 00:26:32,100
it is reactive that's not the property

00:26:31,080 --> 00:26:33,929
I'm looking for either has another

00:26:32,100 --> 00:26:37,429
property it's kind of cool anyone don't

00:26:33,929 --> 00:26:39,750
be shy Oh what did that say it louder

00:26:37,429 --> 00:26:42,240
hysteresis that's right what is this in

00:26:39,750 --> 00:26:44,490
German as anyone know it's the same

00:26:42,240 --> 00:26:47,970
thing okay good that's what I thought of

00:26:44,490 --> 00:26:50,370
course I speak fluent German so um so

00:26:47,970 --> 00:26:52,320
what is hysteresis I'll explain to you

00:26:50,370 --> 00:26:55,110
hysteresis kind of in an in a silly way

00:26:52,320 --> 00:26:56,460
so imagine you'll tell them later I'm

00:26:55,110 --> 00:26:57,510
gonna explain hysteresis this guy is

00:26:56,460 --> 00:26:58,950
explaining histories like you know

00:26:57,510 --> 00:27:02,820
remember Electrical Engineering class

00:26:58,950 --> 00:27:06,770
hysteresis No so hysteresis shh-shh

00:27:02,820 --> 00:27:09,540
you're in the fire zone be careful okay

00:27:06,770 --> 00:27:13,340
hysteresis imagine we have a super

00:27:09,540 --> 00:27:15,929
efficient heating in this room so the

00:27:13,340 --> 00:27:17,669
heater is very very efficient and if

00:27:15,929 --> 00:27:19,650
it's cold it'll flip on right away and

00:27:17,669 --> 00:27:22,679
make the room hot but imagine it's also

00:27:19,650 --> 00:27:26,700
super efficient cold outside and as soon

00:27:22,679 --> 00:27:28,500
as the room as soon as the room is here

00:27:26,700 --> 00:27:30,660
in existence it gets colder from the

00:27:28,500 --> 00:27:32,700
cold winter outside so if you had your

00:27:30,660 --> 00:27:34,970
heater and a thermostat sent to say 20

00:27:32,700 --> 00:27:37,320
degrees Celsius the heater would flip on

00:27:34,970 --> 00:27:38,880
till you're at 20 but then it would flip

00:27:37,320 --> 00:27:40,470
off and then the room would sort of

00:27:38,880 --> 00:27:42,330
instantly get cold because it's so cold

00:27:40,470 --> 00:27:44,010
outside so the heater would flip back on

00:27:42,330 --> 00:27:46,350
instantly and it was sort of flat back

00:27:44,010 --> 00:27:49,110
and forth very very quickly but in fact

00:27:46,350 --> 00:27:50,610
this would break the heaters and this is

00:27:49,110 --> 00:27:52,440
actually not what happens if you're in

00:27:50,610 --> 00:27:55,350
your hotel room or in your house it

00:27:52,440 --> 00:27:56,850
actually goes on and then once it's at

00:27:55,350 --> 00:27:59,040
that setpoint it turns off and it waits

00:27:56,850 --> 00:28:00,390
until you're below some other setpoint

00:27:59,040 --> 00:28:01,950
and then it will turn back again

00:28:00,390 --> 00:28:04,260
that's hysteresis and that's just to

00:28:01,950 --> 00:28:07,400
prevent this flapping and I want to show

00:28:04,260 --> 00:28:10,590
you an example of this yes okay cool

00:28:07,400 --> 00:28:12,400
little example so why do you need to

00:28:10,590 --> 00:28:20,740
know about hysteresis

00:28:12,400 --> 00:28:23,170
oh so I'm just going to hysteresis just

00:28:20,740 --> 00:28:24,670
gonna run MGMT on the left here and

00:28:23,170 --> 00:28:30,820
again this is all running on my crappy

00:28:24,670 --> 00:28:33,840
laptop and on the right this is a little

00:28:30,820 --> 00:28:35,530
bit testing code so just yeah it's uh

00:28:33,840 --> 00:28:38,860
something I'm working on there's

00:28:35,530 --> 00:28:42,340
actually a bug in the library I'm hoping

00:28:38,860 --> 00:28:43,570
we don't hit it today I'm optimistic so

00:28:42,340 --> 00:28:49,330
you can see there's no virtual machines

00:28:43,570 --> 00:28:52,030
running on my laptop okay and you can

00:28:49,330 --> 00:28:53,080
see to have started up and in addition

00:28:52,030 --> 00:28:55,720
I'm just gonna run this big watch

00:28:53,080 --> 00:28:57,820
command which is going to cat the

00:28:55,720 --> 00:29:00,400
contents of this text file and then it's

00:28:57,820 --> 00:29:02,350
gonna run verse list so what's actually

00:29:00,400 --> 00:29:04,270
happening right now is I'm showing you

00:29:02,350 --> 00:29:05,800
the basically the state of some

00:29:04,270 --> 00:29:08,130
properties on machine machine in real

00:29:05,800 --> 00:29:10,090
time and MGMT is running continuously

00:29:08,130 --> 00:29:12,100
now what I've done is I built a

00:29:10,090 --> 00:29:12,780
hysteresis system which is an auto

00:29:12,100 --> 00:29:16,840
scaler

00:29:12,780 --> 00:29:19,780
so if the load on my machine goes excuse

00:29:16,840 --> 00:29:22,270
me above 1.5 it's gonna shut down one of

00:29:19,780 --> 00:29:24,100
the machines right so that means there's

00:29:22,270 --> 00:29:25,780
too many VMs running on this machine

00:29:24,100 --> 00:29:27,100
we're gonna push that load elsewhere so

00:29:25,780 --> 00:29:31,780
we're gonna monitor that load and push

00:29:27,100 --> 00:29:33,310
it elsewhere however we want to have

00:29:31,780 --> 00:29:35,320
some hysteresis so if that goes up too

00:29:33,310 --> 00:29:36,940
high I mean if the load drops too low

00:29:35,320 --> 00:29:38,830
we're gonna want to actually spin those

00:29:36,940 --> 00:29:39,940
VMs back up but not on and off every

00:29:38,830 --> 00:29:40,810
second because that would be kind of a

00:29:39,940 --> 00:29:43,690
waste of resources

00:29:40,810 --> 00:29:46,150
so just to fake this I'm gonna actually

00:29:43,690 --> 00:29:48,780
just make the load go up on my system

00:29:46,150 --> 00:29:48,780
artificially

00:29:49,700 --> 00:29:55,370
all right so I'm just gonna run a tree

00:29:52,519 --> 00:29:57,799
command then we can run yes and just

00:29:55,370 --> 00:30:00,049
watch this is the real system load they

00:29:57,799 --> 00:30:01,880
actually even prove it okay

00:30:00,049 --> 00:30:05,480
by showing you the real load on my

00:30:01,880 --> 00:30:07,429
system so it's going up let's see what

00:30:05,480 --> 00:30:08,950
happens when it hits 1.5 hopefully one

00:30:07,429 --> 00:30:10,600
of those two VMs are gonna shut down

00:30:08,950 --> 00:30:15,289
already

00:30:10,600 --> 00:30:18,289
any second now there we go 1.6 you can

00:30:15,289 --> 00:30:20,029
see it shut down and this is MGMT

00:30:18,289 --> 00:30:23,510
declaratively managing the state of that

00:30:20,029 --> 00:30:24,830
VM so we've turned off the fake load and

00:30:23,510 --> 00:30:27,559
watch what happens when it eventually

00:30:24,830 --> 00:30:29,659
settles down below 1.5 it's not gonna

00:30:27,559 --> 00:30:31,820
turn on the VM right because we built in

00:30:29,659 --> 00:30:34,340
this hysteresis so I set it to make sure

00:30:31,820 --> 00:30:36,649
that you're below 1.5 for ten seconds

00:30:34,340 --> 00:30:37,909
and then you could actually turn back on

00:30:36,649 --> 00:30:41,600
you might pick a longer delay or

00:30:37,909 --> 00:30:47,690
something so we dropped below 5 seconds

00:30:41,600 --> 00:30:50,450
went by almost 10 seconds 1.5 and boom

00:30:47,690 --> 00:30:53,740
and then it started back up is that cool

00:30:50,450 --> 00:30:58,279
do you like that yeah you can applause

00:30:53,740 --> 00:31:00,019
thank you so here's the here's the

00:30:58,279 --> 00:31:02,240
important thing so we can actually

00:31:00,019 --> 00:31:04,700
declare all sorts of complicated

00:31:02,240 --> 00:31:07,279
resources we just say I want some number

00:31:04,700 --> 00:31:09,740
of VMs or the state to be so-and-so or

00:31:07,279 --> 00:31:12,169
even to AWS instances and it will

00:31:09,740 --> 00:31:14,929
actually ensure that that is existing in

00:31:12,169 --> 00:31:17,450
the world but if you want to set up

00:31:14,929 --> 00:31:19,370
something like auto scaling that takes

00:31:17,450 --> 00:31:20,870
in monitoring data you don't have to

00:31:19,370 --> 00:31:22,610
build some complicated thing with three

00:31:20,870 --> 00:31:24,350
different tools and shell scripts you

00:31:22,610 --> 00:31:26,570
can take the load average on your

00:31:24,350 --> 00:31:28,549
machine or some data from a single or

00:31:26,570 --> 00:31:29,600
any other thing like that and glue it

00:31:28,549 --> 00:31:31,370
all together and build a simple

00:31:29,600 --> 00:31:33,320
autoscaler in just a few lines of code

00:31:31,370 --> 00:31:34,909
and this is possible because we have

00:31:33,320 --> 00:31:37,630
this reactive language that lets you

00:31:34,909 --> 00:31:40,220
model these things very safely like that

00:31:37,630 --> 00:31:41,630
cool so hopefully this is all open

00:31:40,220 --> 00:31:42,769
source and free software and all that

00:31:41,630 --> 00:31:46,309
cool stuff so hopefully you like this

00:31:42,769 --> 00:31:47,450
new you'll get involved so I'm gonna go

00:31:46,309 --> 00:31:50,870
in a little bit you want to see more

00:31:47,450 --> 00:31:51,399
demos are you fed up yes are you having

00:31:50,870 --> 00:31:54,440
fun

00:31:51,399 --> 00:31:56,090
ok you gotta tell burn after so I'm just

00:31:54,440 --> 00:32:01,299
gonna shut this down

00:31:56,090 --> 00:32:01,299
can we kill this fash just gonna

00:32:02,040 --> 00:32:06,990
I don't have a lot of RAM so I'm gonna

00:32:03,870 --> 00:32:08,370
just delete these VMs all right so

00:32:06,990 --> 00:32:10,290
that's hysteresis so the language

00:32:08,370 --> 00:32:11,670
actually I'm gonna bore you with a few

00:32:10,290 --> 00:32:16,620
interesting properties of the language

00:32:11,670 --> 00:32:18,810
first so the language actually runs and

00:32:16,620 --> 00:32:20,520
then it pushes graphs to the engine now

00:32:18,810 --> 00:32:22,410
the language hopefully is a very safe

00:32:20,520 --> 00:32:24,510
language which doesn't crash and we

00:32:22,410 --> 00:32:26,310
eliminates compile excuse-me runtime

00:32:24,510 --> 00:32:28,800
errors and things like that but if it

00:32:26,310 --> 00:32:30,360
did crash hopefully it wouldn't be a

00:32:28,800 --> 00:32:32,880
major problem because it just wouldn't

00:32:30,360 --> 00:32:34,860
push a graph to the engine so it should

00:32:32,880 --> 00:32:36,450
hopefully be even safer than that so we

00:32:34,860 --> 00:32:38,520
hopefully will not have any runtime

00:32:36,450 --> 00:32:40,530
errors but even if we did hopefully it

00:32:38,520 --> 00:32:44,360
won't be something disastrous it should

00:32:40,530 --> 00:32:46,320
just die and not like wreck your system

00:32:44,360 --> 00:32:48,260
remember I showed you that earlier

00:32:46,320 --> 00:32:51,270
example where things were out of order

00:32:48,260 --> 00:32:52,740
so because variables are immutable you

00:32:51,270 --> 00:32:53,970
can actually have statements and

00:32:52,740 --> 00:32:55,590
variables and things like that out of

00:32:53,970 --> 00:32:57,090
order they don't have to be in the

00:32:55,590 --> 00:32:59,100
correct order that they run in because

00:32:57,090 --> 00:33:00,510
it's just a graph of code now if you

00:32:59,100 --> 00:33:02,580
were to write code in this weird out of

00:33:00,510 --> 00:33:04,800
order way you should probably be not a

00:33:02,580 --> 00:33:06,210
system in you should not do this but at

00:33:04,800 --> 00:33:07,590
least for now the language allows this

00:33:06,210 --> 00:33:09,840
and we'll see in the future if we

00:33:07,590 --> 00:33:11,640
actually enforce ordering of code or not

00:33:09,840 --> 00:33:12,990
but just an interesting side property

00:33:11,640 --> 00:33:15,270
because if you have a very safe language

00:33:12,990 --> 00:33:17,280
you can do these weird things because

00:33:15,270 --> 00:33:18,870
the compiler is quite smart about that

00:33:17,280 --> 00:33:21,420
it just knows what needs to be updated

00:33:18,870 --> 00:33:23,130
when and figures the rest out so please

00:33:21,420 --> 00:33:27,090
don't write out of order code that would

00:33:23,130 --> 00:33:28,830
be insane variables are actually mutable

00:33:27,090 --> 00:33:30,840
so if you did something like x equals

00:33:28,830 --> 00:33:33,090
five and then x equals six that would

00:33:30,840 --> 00:33:34,380
actually be a compile error so it checks

00:33:33,090 --> 00:33:37,200
to make sure you don't read eclair

00:33:34,380 --> 00:33:38,340
variables and this just prevents subtle

00:33:37,200 --> 00:33:40,500
programming errors and off-by-one errors

00:33:38,340 --> 00:33:41,940
that can happen my accident and things

00:33:40,500 --> 00:33:43,680
like that right in python you're like

00:33:41,940 --> 00:33:45,780
how come my variable is seven you have

00:33:43,680 --> 00:33:48,180
this line you didn't see so these whole

00:33:45,780 --> 00:33:49,170
class of bugs can be eliminated which is

00:33:48,180 --> 00:33:52,410
important because you want your

00:33:49,170 --> 00:33:54,900
infrastructure to be safe right I think

00:33:52,410 --> 00:33:57,360
so I talked to you about hysteresis

00:33:54,900 --> 00:33:58,950
which can be used for all sorts of

00:33:57,360 --> 00:34:01,140
interesting things I've only thought of

00:33:58,950 --> 00:34:03,000
a few use cases like auto scaling and a

00:34:01,140 --> 00:34:05,100
few other things but hopefully you and

00:34:03,000 --> 00:34:06,090
your infrastructures will think of magic

00:34:05,100 --> 00:34:08,460
things that you can do that will help

00:34:06,090 --> 00:34:11,400
you much better like I said you know

00:34:08,460 --> 00:34:14,010
with the volume meter if the sound is

00:34:11,400 --> 00:34:15,960
over a certain level for more than two

00:34:14,010 --> 00:34:17,909
minutes people must be shouting so

00:34:15,960 --> 00:34:19,589
set the repos read-only or whatever

00:34:17,909 --> 00:34:21,869
thing you want so that decision-making

00:34:19,589 --> 00:34:23,129
stuff is going to be up to you there's

00:34:21,869 --> 00:34:24,810
different kinds of hysteresis we can

00:34:23,129 --> 00:34:26,940
build this is still very early so I've

00:34:24,810 --> 00:34:28,710
only implemented one kind where we look

00:34:26,940 --> 00:34:30,060
at the last ten seconds but you might

00:34:28,710 --> 00:34:32,099
look at a sequence of values and do

00:34:30,060 --> 00:34:33,530
something else instead so lots of things

00:34:32,099 --> 00:34:35,760
are possible

00:34:33,530 --> 00:34:37,530
and as I've said these reactive

00:34:35,760 --> 00:34:40,710
variables in a reactive language lets us

00:34:37,530 --> 00:34:42,839
build and model all these systems so we

00:34:40,710 --> 00:34:44,669
can even this is not fully implemented

00:34:42,839 --> 00:34:47,339
yet but even implement error scenarios

00:34:44,669 --> 00:34:51,599
so what to do when you have failures if

00:34:47,339 --> 00:34:54,780
things crash or if inputs to MGMT could

00:34:51,599 --> 00:34:56,040
be from one of your monitoring tools

00:34:54,780 --> 00:34:58,020
that are gathering data from all the

00:34:56,040 --> 00:34:59,580
clusters so if you see error rates that

00:34:58,020 --> 00:35:02,160
go up in a certain thing one of the

00:34:59,580 --> 00:35:04,320
actions you can take is to you know spin

00:35:02,160 --> 00:35:06,240
up new clusters to handle that higher

00:35:04,320 --> 00:35:09,660
volume air of errors or something like

00:35:06,240 --> 00:35:10,920
that so that's really up to you there's

00:35:09,660 --> 00:35:13,560
quite a lot of future work to do

00:35:10,920 --> 00:35:15,690
um how can you help this is about all of

00:35:13,560 --> 00:35:17,970
you folks you can use this you can test

00:35:15,690 --> 00:35:20,280
it patch it share it documented star it

00:35:17,970 --> 00:35:23,880
blog it tweet about it if you have

00:35:20,280 --> 00:35:25,260
tweeter discuss it hack it and just hack

00:35:23,880 --> 00:35:26,880
on this stuff right this is all free

00:35:25,260 --> 00:35:28,740
software the only thing that I'm a

00:35:26,880 --> 00:35:30,660
little shamed about is the language

00:35:28,740 --> 00:35:32,820
stuff which is still quite brand new is

00:35:30,660 --> 00:35:35,220
not indeed master yet but hopefully by

00:35:32,820 --> 00:35:37,050
config management camp in February it

00:35:35,220 --> 00:35:38,940
will all be in get master so there's

00:35:37,050 --> 00:35:40,500
still lots of stuff to play with but the

00:35:38,940 --> 00:35:41,849
language is still kind of brand new it's

00:35:40,500 --> 00:35:43,640
hard to build a language so sorry for

00:35:41,849 --> 00:35:46,619
that

00:35:43,640 --> 00:35:48,180
another sad thing is so I work at Red

00:35:46,619 --> 00:35:49,859
Hat and they've been actually really

00:35:48,180 --> 00:35:53,790
nice and that they've been sponsoring my

00:35:49,859 --> 00:35:55,770
research work on this for excuse me

00:35:53,790 --> 00:35:57,839
about a year and a half or two years now

00:35:55,770 --> 00:35:59,849
but unfortunately it's been a little

00:35:57,839 --> 00:36:02,310
politically difficult because of ansible

00:35:59,849 --> 00:36:04,020
so they've actually completely cut off

00:36:02,310 --> 00:36:06,089
my funding to work on this so I'm doing

00:36:04,020 --> 00:36:08,430
this all entirely in my spare time so

00:36:06,089 --> 00:36:11,010
MGMT needs a home so if you'd like to

00:36:08,430 --> 00:36:13,650
work on this or send patches or you want

00:36:11,010 --> 00:36:15,060
to help grow MGMT or fund the project or

00:36:13,650 --> 00:36:17,130
something like that please reach out to

00:36:15,060 --> 00:36:18,930
me because it's hard building a whole

00:36:17,130 --> 00:36:21,089
thing from scratch and I think we're

00:36:18,930 --> 00:36:22,800
this close to getting it to be something

00:36:21,089 --> 00:36:24,440
we can really use in production so

00:36:22,800 --> 00:36:27,150
that's my cheap plug

00:36:24,440 --> 00:36:31,170
let's just recap what we've talked about

00:36:27,150 --> 00:36:32,730
today answer now let me recap this is a

00:36:31,170 --> 00:36:35,099
bad joke of Arthur bending and putting

00:36:32,730 --> 00:36:37,369
the cap back on his hand it's a bad joke

00:36:35,099 --> 00:36:39,450
so I first want to give you a few links

00:36:37,369 --> 00:36:42,180
there's a technical blog of James you

00:36:39,450 --> 00:36:46,980
all know about this now right come on

00:36:42,180 --> 00:36:48,930
yes all right good the product project

00:36:46,980 --> 00:36:51,660
page on github purple idea that's me

00:36:48,930 --> 00:36:54,059
slash MGMT you can find all this code

00:36:51,660 --> 00:36:56,999
actually burned was super awesome and

00:36:54,059 --> 00:36:58,529
had me at the OS DC conference that net

00:36:56,999 --> 00:37:00,420
Waze had very recently and that was

00:36:58,529 --> 00:37:02,160
awesome so I gave a full talk just about

00:37:00,420 --> 00:37:03,900
engine features so all this language

00:37:02,160 --> 00:37:05,220
stuff wasn't in there but if you want to

00:37:03,900 --> 00:37:08,489
see all the different things the engine

00:37:05,220 --> 00:37:10,319
can do that video is super well recorded

00:37:08,489 --> 00:37:11,700
by their team and there's a whole bunch

00:37:10,319 --> 00:37:15,480
of articles also on my blog which you

00:37:11,700 --> 00:37:16,980
can check out so have a look at that at

00:37:15,480 --> 00:37:20,009
the bottom you can see I'm purple idea

00:37:16,980 --> 00:37:23,130
on freenode IRC Twitter github at

00:37:20,009 --> 00:37:26,579
gmail.com at Red Hat calm so if you want

00:37:23,130 --> 00:37:29,190
to bother me that's how to do it here's

00:37:26,579 --> 00:37:32,249
a dumb slide because I like doing magic

00:37:29,190 --> 00:37:34,440
e things I need to help need your help

00:37:32,249 --> 00:37:35,940
for one second I'm gonna show you an

00:37:34,440 --> 00:37:38,160
extra demo because I think we have a bit

00:37:35,940 --> 00:37:40,980
of extra time we do have a bit more time

00:37:38,160 --> 00:37:45,869
but I need you to help me in a DDoS of

00:37:40,980 --> 00:37:47,730
burned this is burned if you like this

00:37:45,869 --> 00:37:49,920
talk I need you to go over to burn today

00:37:47,730 --> 00:37:51,930
at some point today just go up to them

00:37:49,920 --> 00:37:54,839
for like no three seconds and like hey

00:37:51,930 --> 00:37:56,460
burned I really like James talk we

00:37:54,839 --> 00:37:59,160
should do more of that stuff and if you

00:37:56,460 --> 00:38:00,660
like and if if all you know 200 of you

00:37:59,160 --> 00:38:04,680
or how many of you all go up to them all

00:38:00,660 --> 00:38:07,710
day it'll be hilarious right so all day

00:38:04,680 --> 00:38:11,369
just think about it DDoS burned just

00:38:07,710 --> 00:38:12,869
don't say it came from me okay I don't

00:38:11,369 --> 00:38:15,839
think he likes this picture so hopefully

00:38:12,869 --> 00:38:17,400
doesn't see the recording so just to

00:38:15,839 --> 00:38:19,259
show you we have an IRC channel on

00:38:17,400 --> 00:38:22,349
freenode or about 50 or so people

00:38:19,259 --> 00:38:24,089
hackers people just hanging out in MGMT

00:38:22,349 --> 00:38:26,910
config you can hang out we have a

00:38:24,089 --> 00:38:28,499
Twitter account and hashtags if you like

00:38:26,910 --> 00:38:31,710
and react to have a mailing list which

00:38:28,499 --> 00:38:34,019
is pretty low volume and I send out

00:38:31,710 --> 00:38:35,489
announcements about new releases and

00:38:34,019 --> 00:38:38,240
things like that so you can subscribe I

00:38:35,489 --> 00:38:40,070
won't send you marketing

00:38:38,240 --> 00:38:42,110
I'm going to take questions and answers

00:38:40,070 --> 00:38:44,150
and I have one extra demo which I'm

00:38:42,110 --> 00:38:46,100
going to show you it depends on the

00:38:44,150 --> 00:38:47,480
internet so if there's a maybe I'll take

00:38:46,100 --> 00:38:48,880
one question then I'll show you the demo

00:38:47,480 --> 00:38:53,600
is that cool

00:38:48,880 --> 00:38:57,340
I'm just get the dem already so anyone

00:38:53,600 --> 00:38:57,340
have any questions don't be shy

00:38:57,940 --> 00:39:01,589
well I got this demo right here

00:39:04,900 --> 00:39:10,390
so my question would be you using the

00:39:07,539 --> 00:39:12,400
ref' protocol which can have state reads

00:39:10,390 --> 00:39:17,650
if you don't read every read request

00:39:12,400 --> 00:39:21,099
from either master so stale reads of old

00:39:17,650 --> 00:39:23,680
data dangerous push such a reactive

00:39:21,099 --> 00:39:25,420
system or do you read only from the raft

00:39:23,680 --> 00:39:27,880
master that's a great question

00:39:25,420 --> 00:39:30,789
so the snail read question is something

00:39:27,880 --> 00:39:31,990
actually I think originally so we we

00:39:30,789 --> 00:39:33,460
didn't actually implement our own raft

00:39:31,990 --> 00:39:35,230
protocol because that would take forever

00:39:33,460 --> 00:39:37,599
so we actually build on top of

00:39:35,230 --> 00:39:39,400
SCD which has its own raft protocol and

00:39:37,599 --> 00:39:41,470
that code is actually compiled into

00:39:39,400 --> 00:39:43,480
going in into our binary so that's why

00:39:41,470 --> 00:39:45,759
another reason we use going because it

00:39:43,480 --> 00:39:48,759
had a great distributed databases which

00:39:45,759 --> 00:39:51,369
is what we built on and raft and I think

00:39:48,759 --> 00:39:52,809
initially Etsy did not have this feature

00:39:51,369 --> 00:39:55,180
done correctly but now it actually

00:39:52,809 --> 00:39:59,619
supports ensuring that your reads are

00:39:55,180 --> 00:40:01,509
also not stale and we have not actually

00:39:59,619 --> 00:40:03,640
you can actually there's a super

00:40:01,509 --> 00:40:05,589
paranoid mode you can turn on to enforce

00:40:03,640 --> 00:40:07,960
that this always happens I believe this

00:40:05,589 --> 00:40:09,519
is currently not turned on because you

00:40:07,960 --> 00:40:12,609
usually are okay with the eventually

00:40:09,519 --> 00:40:13,779
consistent data but if you find a use

00:40:12,609 --> 00:40:15,970
case where you think it's absolutely

00:40:13,779 --> 00:40:19,210
necessary then will either make a option

00:40:15,970 --> 00:40:20,769
in MGMT to do that or patch it someway

00:40:19,210 --> 00:40:22,839
but I don't think it's going to be a

00:40:20,769 --> 00:40:23,890
problem that answer question is there

00:40:22,839 --> 00:40:25,749
really it's a really really good

00:40:23,890 --> 00:40:26,890
question but it's very subtle and I'm

00:40:25,749 --> 00:40:31,539
not sure that it will really matter

00:40:26,890 --> 00:40:33,640
because you might just since we're

00:40:31,539 --> 00:40:34,869
always declaring the state the worst

00:40:33,640 --> 00:40:36,880
case scenario would probably be that you

00:40:34,869 --> 00:40:38,890
declare an earlier state which is now

00:40:36,880 --> 00:40:40,119
out of date so eventually when you get

00:40:38,890 --> 00:40:43,059
that new data

00:40:40,119 --> 00:40:43,329
it'll get refreshed so you know what I

00:40:43,059 --> 00:40:45,400
mean

00:40:43,329 --> 00:40:48,519
so you might go from instead of going

00:40:45,400 --> 00:40:50,559
from A to B to C instead of excuse me

00:40:48,519 --> 00:40:52,210
instead of going from A to C you might

00:40:50,559 --> 00:40:54,069
go from A to B to C but you'll

00:40:52,210 --> 00:40:56,410
eventually get there so it probably

00:40:54,069 --> 00:40:58,150
shouldn't be a problem but again if you

00:40:56,410 --> 00:40:59,650
really find something that you hit where

00:40:58,150 --> 00:41:02,680
it's a problem we can very easily just

00:40:59,650 --> 00:41:04,539
turn that flag on so great question I'll

00:41:02,680 --> 00:41:07,059
show this one demo first and then we'll

00:41:04,539 --> 00:41:09,220
take more questions that cool okay

00:41:07,059 --> 00:41:10,390
so don't use the BitTorrent for just the

00:41:09,220 --> 00:41:15,059
moment because the Internet's kind of

00:41:10,390 --> 00:41:18,309
crappy so what I've done over here is I

00:41:15,059 --> 00:41:18,640
have two windows these are both on a

00:41:18,309 --> 00:41:21,250
remote

00:41:18,640 --> 00:41:22,870
crappy server that I have I needed a

00:41:21,250 --> 00:41:25,510
different machine that was bigger than

00:41:22,870 --> 00:41:26,770
my laptop and MGMT is running this is

00:41:25,510 --> 00:41:31,900
just a screen session so you can see

00:41:26,770 --> 00:41:34,440
both and what I've done here is I've

00:41:31,900 --> 00:41:38,100
actually declared the state of this

00:41:34,440 --> 00:41:41,560
server to run one virtual machine for me

00:41:38,100 --> 00:41:44,320
okay so if I actually go here you can

00:41:41,560 --> 00:41:46,690
see on that machine we have one VM

00:41:44,320 --> 00:41:49,630
that's running MGMT started up that

00:41:46,690 --> 00:41:50,710
machine it booted and so on now I'm

00:41:49,630 --> 00:41:53,080
going to do now is I'm going to log into

00:41:50,710 --> 00:41:55,780
the console of that virtual machine on

00:41:53,080 --> 00:41:58,240
the right and on the left you can see

00:41:55,780 --> 00:42:00,760
that's still that first machine so it's

00:41:58,240 --> 00:42:05,830
a machine it's got a really boring

00:42:00,760 --> 00:42:07,600
hostname it's you know one virtual

00:42:05,830 --> 00:42:12,520
machine with you can see it's got one

00:42:07,600 --> 00:42:13,690
qmu virtual CPU and just for fun I can

00:42:12,520 --> 00:42:18,520
run this watch command

00:42:13,690 --> 00:42:21,100
- and 0.5 LS CPU and just grab out that

00:42:18,520 --> 00:42:24,660
command so we're actually now running in

00:42:21,100 --> 00:42:27,520
the VM here a continuous stream of

00:42:24,660 --> 00:42:31,210
listing how many CPUs are on the VM and

00:42:27,520 --> 00:42:34,420
on the left here we have basically a

00:42:31,210 --> 00:42:36,970
front-end to MGMT which can change the

00:42:34,420 --> 00:42:39,850
parameters that we declare in our code

00:42:36,970 --> 00:42:44,230
and just to make this just to make this

00:42:39,850 --> 00:42:45,910
slightly more theatrical I've made a

00:42:44,230 --> 00:42:48,760
little bash script which pushes a new

00:42:45,910 --> 00:42:52,140
value to MGMT when I change it and watch

00:42:48,760 --> 00:42:52,140
what happens when I press the plus key

00:42:52,229 --> 00:42:56,559
so what I'm doing all I'm doing is the

00:42:54,819 --> 00:43:00,539
VM resource has a parameter which is

00:42:56,559 --> 00:43:03,369
number of CPUs and when I go up or down

00:43:00,539 --> 00:43:06,700
it actually just changes that CPU count

00:43:03,369 --> 00:43:08,650
and you can see that it changes on the

00:43:06,700 --> 00:43:10,150
machine in real-time in under a second

00:43:08,650 --> 00:43:13,119
so what's actually happening every time

00:43:10,150 --> 00:43:15,430
I press plus MGMT it's reactive so it

00:43:13,119 --> 00:43:17,529
says oh you said you wanted a VM with

00:43:15,430 --> 00:43:21,309
one CPU now you're asking for a VM with

00:43:17,529 --> 00:43:23,890
three CPUs so the engine reloads itself

00:43:21,309 --> 00:43:25,900
and it quickly says oh the VM running

00:43:23,890 --> 00:43:28,979
has one CPU but you wanted three

00:43:25,900 --> 00:43:31,599
therefore I need two hot plug two CPUs

00:43:28,979 --> 00:43:33,880
so to actually hot plug those things in

00:43:31,599 --> 00:43:35,920
real time running the there's Verte hot

00:43:33,880 --> 00:43:38,729
plug commands and you can see that that

00:43:35,920 --> 00:43:44,799
count goes up is that cool

00:43:38,729 --> 00:43:49,420
thank you thank you and you can see it's

00:43:44,799 --> 00:43:51,219
pretty fast so imagine you had reactive

00:43:49,420 --> 00:43:53,289
real time load variables and scale

00:43:51,219 --> 00:43:55,630
variables that are now actually just

00:43:53,289 --> 00:43:57,969
even changing number of CPUs so now you

00:43:55,630 --> 00:44:00,880
can auto scale your clusters and your

00:43:57,969 --> 00:44:04,119
loads in you know milliseconds right

00:44:00,880 --> 00:44:07,059
Michael Jackson dies you notice quickly

00:44:04,119 --> 00:44:08,430
auto scale this and you're done so again

00:44:07,059 --> 00:44:10,660
just all the different possibilities

00:44:08,430 --> 00:44:12,489
there's all sorts of new resources and

00:44:10,660 --> 00:44:14,589
MGMT you could run to do this and you

00:44:12,489 --> 00:44:16,359
can use all of that monitoring data from

00:44:14,589 --> 00:44:17,619
external sources and other things to

00:44:16,359 --> 00:44:21,489
make clever decisions about your

00:44:17,619 --> 00:44:23,440
infrastructure so yeah that's my last

00:44:21,489 --> 00:44:26,289
demo so yes I'm definitely gonna go if

00:44:23,440 --> 00:44:30,069
there are more questions I'm happy to

00:44:26,289 --> 00:44:32,410
take them yes okay one of the things

00:44:30,069 --> 00:44:33,789
about we like about config management we

00:44:32,410 --> 00:44:35,469
can be accountable for our changes you

00:44:33,789 --> 00:44:37,089
know we can define how the state is and

00:44:35,469 --> 00:44:38,680
keep it in revision control and say well

00:44:37,089 --> 00:44:39,670
this dude made a mistake and messed it

00:44:38,680 --> 00:44:41,589
up and here you go

00:44:39,670 --> 00:44:43,390
one of the things that seems to worry me

00:44:41,589 --> 00:44:44,349
about the cool stuff that you've got is

00:44:43,390 --> 00:44:47,469
that you're blurring the lines between

00:44:44,349 --> 00:44:49,029
you know accountable changes and

00:44:47,469 --> 00:44:50,380
unaccountable changes you know you can

00:44:49,029 --> 00:44:52,959
have something that reacts it ends up in

00:44:50,380 --> 00:44:54,759
a state that you might not expect or you

00:44:52,959 --> 00:44:56,619
have something that reacts in a way that

00:44:54,759 --> 00:44:58,020
you like and you want to save that state

00:44:56,619 --> 00:44:59,430
back into the

00:44:58,020 --> 00:45:01,110
configuration workflow is there a way

00:44:59,430 --> 00:45:03,360
you can kind of save the state you

00:45:01,110 --> 00:45:05,430
reached after you figure out we should

00:45:03,360 --> 00:45:08,070
be it's a really good question so I

00:45:05,430 --> 00:45:09,720
think maybe if I simplify it like are

00:45:08,070 --> 00:45:11,340
the states deterministic and can you

00:45:09,720 --> 00:45:15,270
ensure that they're repeatable and

00:45:11,340 --> 00:45:17,550
deterministic that close enough so the

00:45:15,270 --> 00:45:21,300
truth is it's not a completely trivial

00:45:17,550 --> 00:45:23,130
problem because systems and complex

00:45:21,300 --> 00:45:26,070
systems are not very trivial there they

00:45:23,130 --> 00:45:27,540
can get quite complicated so for all the

00:45:26,070 --> 00:45:29,490
basic things that were able to do with

00:45:27,540 --> 00:45:31,080
sort of puppet level things now I think

00:45:29,490 --> 00:45:33,030
this is basically 100 percent guaranteed

00:45:31,080 --> 00:45:34,980
if you declare a state and you don't do

00:45:33,030 --> 00:45:37,830
anything fancy then you will get to that

00:45:34,980 --> 00:45:40,380
state and that you know probably about

00:45:37,830 --> 00:45:41,820
the same level of quality minus the

00:45:40,380 --> 00:45:43,680
speed and stuff you can get with puppet

00:45:41,820 --> 00:45:46,440
you can do with him GMT but in addition

00:45:43,680 --> 00:45:46,860
to that if you do want to do these fancy

00:45:46,440 --> 00:45:49,020
things

00:45:46,860 --> 00:45:50,880
the thing that is dangerous and not

00:45:49,020 --> 00:45:53,100
repeatable is when you have one tool

00:45:50,880 --> 00:45:54,570
that calls out to another tool that then

00:45:53,100 --> 00:45:56,760
runs a bash script that does another

00:45:54,570 --> 00:45:59,370
thing those are the dangerous things and

00:45:56,760 --> 00:46:01,140
if you can model all of that in a single

00:45:59,370 --> 00:46:03,060
language and have that language have

00:46:01,140 --> 00:46:04,410
extremely safe properties you're gonna

00:46:03,060 --> 00:46:06,660
get much closer to getting that

00:46:04,410 --> 00:46:08,460
repeatable design and infrastructure

00:46:06,660 --> 00:46:09,750
that you want it does not mean there's

00:46:08,460 --> 00:46:11,130
no way to blow away your infrastructure

00:46:09,750 --> 00:46:12,780
it does not mean that your

00:46:11,130 --> 00:46:15,690
infrastructure won't have bugs but I

00:46:12,780 --> 00:46:18,350
think we're gonna get much closer to the

00:46:15,690 --> 00:46:20,550
most possible solution for these things

00:46:18,350 --> 00:46:22,140
it's a really good question I hope that

00:46:20,550 --> 00:46:25,080
answers it and if not I'll be around

00:46:22,140 --> 00:46:27,150
today and at the hackathon to hack on

00:46:25,080 --> 00:46:28,070
this with you guys and girls and answer

00:46:27,150 --> 00:46:32,370
more questions

00:46:28,070 --> 00:46:37,290
cool any other questions yeah in the

00:46:32,370 --> 00:46:41,100
back sorry Walter you have to wait

00:46:37,290 --> 00:46:43,710
just give me a sec contact there's a

00:46:41,100 --> 00:46:48,230
microphone coming then everyone will

00:46:43,710 --> 00:46:51,060
hear you io is there some plans to

00:46:48,230 --> 00:46:57,260
implement some of this inaudible from

00:46:51,060 --> 00:47:00,470
reddit sites so that is a great question

00:46:57,260 --> 00:47:03,390
there are lots of possibilities that

00:47:00,470 --> 00:47:07,770
ansible and MGMT could cooperate

00:47:03,390 --> 00:47:09,870
for example ansible could ask MGM TV to

00:47:07,770 --> 00:47:11,460
run as a sort of random service to do

00:47:09,870 --> 00:47:14,790
some of the hard work and you can keep

00:47:11,460 --> 00:47:16,350
using ansible for the broad-strokes all

00:47:14,790 --> 00:47:17,640
of these things are possible at the

00:47:16,350 --> 00:47:19,920
moment I don't think redhead is

00:47:17,640 --> 00:47:22,680
interested so it's just a political

00:47:19,920 --> 00:47:25,260
thing I'm a hacker I've completely

00:47:22,680 --> 00:47:27,150
failed politically at convincing them

00:47:25,260 --> 00:47:28,620
I've convinced lots of individual

00:47:27,150 --> 00:47:30,330
engineers and hopefully lots of hackers

00:47:28,620 --> 00:47:32,400
in the audience but I just can't win

00:47:30,330 --> 00:47:35,340
that game so if you can win that game

00:47:32,400 --> 00:47:37,380
you're more than welcome to try I will

00:47:35,340 --> 00:47:38,510
happily accept patches upstream that

00:47:37,380 --> 00:47:42,660
makes sense for the project and

00:47:38,510 --> 00:47:44,820
hopefully that's helpful for you I'm

00:47:42,660 --> 00:47:48,960
sorry about that but good question

00:47:44,820 --> 00:47:50,970
thanks any other questions preferably

00:47:48,960 --> 00:47:56,730
more technical rather than political yes

00:47:50,970 --> 00:47:58,950
Walter so did the real-time aspect seem

00:47:56,730 --> 00:48:00,510
quite interesting could you give us an

00:47:58,950 --> 00:48:02,400
example of how you would see this in a

00:48:00,510 --> 00:48:04,490
development workflow and an actual like

00:48:02,400 --> 00:48:07,380
larger environment with multiple people

00:48:04,490 --> 00:48:10,260
adding stuff dev workflow that's a great

00:48:07,380 --> 00:48:12,270
question what you can do I didn't demo

00:48:10,260 --> 00:48:14,490
this today but I did actually demo this

00:48:12,270 --> 00:48:16,170
at OSD see which is recorded quite well

00:48:14,490 --> 00:48:18,600
so you can check that out um what you

00:48:16,170 --> 00:48:20,970
could do for just a single developer for

00:48:18,600 --> 00:48:23,040
example MGMT runs in real time in its

00:48:20,970 --> 00:48:24,300
live so every time you rerun puppet for

00:48:23,040 --> 00:48:27,330
example you wait a whole lot of time

00:48:24,300 --> 00:48:29,540
whereas MGMT can just apply the delta of

00:48:27,330 --> 00:48:31,650
what it needs to do so if you actually

00:48:29,540 --> 00:48:34,260
preferably on a dev a machine just

00:48:31,650 --> 00:48:36,240
edited your code in real time MGMT can

00:48:34,260 --> 00:48:37,530
continuously push this so you can

00:48:36,240 --> 00:48:39,720
actually kind of live hack on your

00:48:37,530 --> 00:48:41,610
infrastructure and see it update until

00:48:39,720 --> 00:48:42,690
it's exactly what you want you probably

00:48:41,610 --> 00:48:44,730
don't want to do this for production

00:48:42,690 --> 00:48:47,520
stuff because that would be super brave

00:48:44,730 --> 00:48:50,610
but it is possible and it it definitely

00:48:47,520 --> 00:48:52,320
made my dev hacking really really fun

00:48:50,610 --> 00:48:55,890
I'm and check out the video it's super

00:48:52,320 --> 00:48:57,420
cool for multiple people ultimately I

00:48:55,890 --> 00:49:00,060
think there's really only one way

00:48:57,420 --> 00:49:02,130
whether a puppet or MGMT really should

00:49:00,060 --> 00:49:06,170
do this which is have all of this config

00:49:02,130 --> 00:49:08,700
management code in git and everyone have

00:49:06,170 --> 00:49:10,350
you know push to that repo to make

00:49:08,700 --> 00:49:11,880
changes and hopefully have some tests

00:49:10,350 --> 00:49:13,680
run first and so on

00:49:11,880 --> 00:49:16,170
there is a deploys feature and MGMT

00:49:13,680 --> 00:49:19,020
which is not get master yet but i

00:49:16,170 --> 00:49:21,590
hopefully will present that in ghent at

00:49:19,020 --> 00:49:24,510
config management cap so good question

00:49:21,590 --> 00:49:26,310
bigger answer but hopefully that will

00:49:24,510 --> 00:49:28,080
get you thinking more about this and

00:49:26,310 --> 00:49:30,060
just to be clear this is not a solved

00:49:28,080 --> 00:49:32,460
problem so if there's ways you think you

00:49:30,060 --> 00:49:34,380
can make this much better patches are

00:49:32,460 --> 00:49:36,810
definitely welcome yes the line in the

00:49:34,380 --> 00:49:38,910
fridge um I have some kind of political

00:49:36,810 --> 00:49:40,800
and technical questions and sorry for

00:49:38,910 --> 00:49:42,470
the conferral question any hacker

00:49:40,800 --> 00:49:45,780
questions first

00:49:42,470 --> 00:49:47,250
go ahead the one the one thing is we

00:49:45,780 --> 00:49:48,990
actually emigrated all our stuff on

00:49:47,250 --> 00:49:51,840
puppet it's pretty it's pretty annoying

00:49:48,990 --> 00:49:54,240
for me for people who are in charge of

00:49:51,840 --> 00:49:56,250
this to get old people into the boat and

00:49:54,240 --> 00:49:58,950
tell them eh yeah we would not no want

00:49:56,250 --> 00:50:01,170
to use puppet yeah yeah there comes

00:49:58,950 --> 00:50:03,000
redhead that hauls a okay puppet is nice

00:50:01,170 --> 00:50:04,740
but we now have ansible use ansible i

00:50:03,000 --> 00:50:07,830
have to change the whole thing

00:50:04,740 --> 00:50:11,370
okay I get your question so I'll tell

00:50:07,830 --> 00:50:14,310
you a few things so it's a good question

00:50:11,370 --> 00:50:17,460
as I said I'm not here representing Red

00:50:14,310 --> 00:50:19,230
Hat I'm just here representing my

00:50:17,460 --> 00:50:21,750
project which I'm doing in my personal

00:50:19,230 --> 00:50:24,450
time now it is a good question a lot of

00:50:21,750 --> 00:50:25,590
companies invest in different things and

00:50:24,450 --> 00:50:27,300
that's just something that happens over

00:50:25,590 --> 00:50:29,370
time because things change I think it

00:50:27,300 --> 00:50:31,350
would be worse if red hat said we're

00:50:29,370 --> 00:50:32,100
gonna pick puppet and never change no

00:50:31,350 --> 00:50:35,490
matter what happened

00:50:32,100 --> 00:50:38,070
so that's unavoidable as for the puppet

00:50:35,490 --> 00:50:39,720
migration one thing that MGMT can do

00:50:38,070 --> 00:50:41,040
which is super awesome and I also didn't

00:50:39,720 --> 00:50:43,230
talk about but that's in the engine talk

00:50:41,040 --> 00:50:45,420
you can actually take existing puppet

00:50:43,230 --> 00:50:48,300
code that you've written and it compile

00:50:45,420 --> 00:50:50,070
it and run it on our engine so all of

00:50:48,300 --> 00:50:53,880
your old puppet code can now run way way

00:50:50,070 --> 00:50:55,800
faster there's a few caveats not every

00:50:53,880 --> 00:50:58,080
single resource that exists in puppet

00:50:55,800 --> 00:51:00,210
has a mapping that implements that

00:50:58,080 --> 00:51:03,520
feature so for example the file resource

00:51:00,210 --> 00:51:05,710
in MGMT currently has no SELinux

00:51:03,520 --> 00:51:08,380
parameter so that would just not program

00:51:05,710 --> 00:51:10,660
no one uses well fair enough so it is

00:51:08,380 --> 00:51:14,310
not a perfect mapping but it is oh hi

00:51:10,660 --> 00:51:17,770
come on in there's a small child here

00:51:14,310 --> 00:51:19,750
it's Walters child so that is possible

00:51:17,770 --> 00:51:22,960
and you can actually add more mappings

00:51:19,750 --> 00:51:24,940
for things like that to migrate that's

00:51:22,960 --> 00:51:26,140
probably your best bet but I am NOT

00:51:24,940 --> 00:51:28,330
going to not build something that I

00:51:26,140 --> 00:51:31,060
think is useful just because there's old

00:51:28,330 --> 00:51:32,740
tech that still exists so port the hard

00:51:31,060 --> 00:51:34,690
things to MGMT and then maybe over time

00:51:32,740 --> 00:51:36,070
you can start putting other things then

00:51:34,690 --> 00:51:37,150
there are other part of the question the

00:51:36,070 --> 00:51:40,120
technical one Oh

00:51:37,150 --> 00:51:42,670
isn't there a possibility just to use

00:51:40,120 --> 00:51:44,950
MGMT to speed up the development of

00:51:42,670 --> 00:51:46,690
puppet models for example I don't know

00:51:44,950 --> 00:51:48,700
if you want to send a patch and discuss

00:51:46,690 --> 00:51:51,190
how this would work let me know ok yeah

00:51:48,700 --> 00:51:54,550
thank you any other technicians I think

00:51:51,190 --> 00:51:58,630
we got yeah we got I'm going into your

00:51:54,550 --> 00:52:00,700
break now so yeah oh it's okay

00:51:58,630 --> 00:52:03,280
oh I have five minutes more so that's

00:52:00,700 --> 00:52:06,190
okay I'm wrong so Julia I know James

00:52:03,280 --> 00:52:08,770
Julia is a MGMT contributor number two

00:52:06,190 --> 00:52:10,780
in terms of patches so it is the

00:52:08,770 --> 00:52:12,460
language beauties as well or do you need

00:52:10,780 --> 00:52:13,960
to mine it on every machine and what a

00:52:12,460 --> 00:52:16,420
mess with the grafton if you push

00:52:13,960 --> 00:52:18,760
different values and different machines

00:52:16,420 --> 00:52:22,540
and you break the distributing we're of

00:52:18,760 --> 00:52:23,920
MGMT so I didn't hear the first word is

00:52:22,540 --> 00:52:25,300
the language something but I understood

00:52:23,920 --> 00:52:28,870
the rest of your question what was the

00:52:25,300 --> 00:52:30,910
verb see so is the language distributed

00:52:28,870 --> 00:52:33,010
distributed yes okay great question so I

00:52:30,910 --> 00:52:35,650
did not explain this at all this is

00:52:33,010 --> 00:52:36,820
actually not in get master but I will be

00:52:35,650 --> 00:52:38,350
demoing this probably a config

00:52:36,820 --> 00:52:40,270
management camp because it's not quite

00:52:38,350 --> 00:52:42,490
ready but basically here's how it works

00:52:40,270 --> 00:52:44,530
the machine clusters itself together and

00:52:42,490 --> 00:52:46,600
then you have this concept of deploys

00:52:44,530 --> 00:52:48,880
and what happens is you actually sign

00:52:46,600 --> 00:52:50,560
the code with your key that ensures it

00:52:48,880 --> 00:52:52,750
came from assisted min this is done with

00:52:50,560 --> 00:52:55,450
GPG and you push it to any machine in

00:52:52,750 --> 00:52:56,920
the cluster and the cluster will ensure

00:52:55,450 --> 00:52:58,690
that everyone has that version of the

00:52:56,920 --> 00:53:00,610
code and then that code will run

00:52:58,690 --> 00:53:02,380
everywhere and the way you can do this

00:53:00,610 --> 00:53:03,940
there's different deploys so you can

00:53:02,380 --> 00:53:05,590
either have it run as soon as it gets

00:53:03,940 --> 00:53:07,330
the code so each machine whenever it

00:53:05,590 --> 00:53:10,300
gets the code start running it or you

00:53:07,330 --> 00:53:12,220
can synchronize once everyone has the

00:53:10,300 --> 00:53:13,360
code then you all run together so

00:53:12,220 --> 00:53:14,530
there's different ways to do that but

00:53:13,360 --> 00:53:15,820
that's basically how it will work

00:53:14,530 --> 00:53:17,019
so yes the language is definitely

00:53:15,820 --> 00:53:18,819
distributed

00:53:17,019 --> 00:53:21,219
across the cluster really great question

00:53:18,819 --> 00:53:22,630
cheater cuz you use the project and you

00:53:21,219 --> 00:53:25,239
know how it works so he's asking harder

00:53:22,630 --> 00:53:27,819
questions but that's okay gentlemen here

00:53:25,239 --> 00:53:30,749
yeah not that I have an ulterior motive

00:53:27,819 --> 00:53:33,279
but if you use management to

00:53:30,749 --> 00:53:35,319
cross-compile puppet yeah how the error

00:53:33,279 --> 00:53:38,829
message is better than the regular power

00:53:35,319 --> 00:53:41,409
ones that is a good question that's very

00:53:38,829 --> 00:53:47,799
good are the error messages better

00:53:41,409 --> 00:53:49,179
currently no and and we actually cheat a

00:53:47,799 --> 00:53:50,829
little bit doing the cross compilation

00:53:49,179 --> 00:53:52,569
there's a gentleman named Felix who

00:53:50,829 --> 00:53:54,579
actually wrote this when I first gave

00:53:52,569 --> 00:53:56,499
the talk the first first pocket config

00:53:54,579 --> 00:53:59,289
management camp I think almost two years

00:53:56,499 --> 00:54:01,149
ago I suggested or I pointed out that

00:53:59,289 --> 00:54:03,130
someone could write a cross compiler and

00:54:01,149 --> 00:54:05,289
this Felix chap thought this was a cool

00:54:03,130 --> 00:54:07,719
idea and did it and the way he did it is

00:54:05,289 --> 00:54:08,619
he actually uses I think it's called

00:54:07,719 --> 00:54:10,239
puppet phases

00:54:08,619 --> 00:54:13,390
so it's this internal thing inside a

00:54:10,239 --> 00:54:16,479
puppet that's actually used to partially

00:54:13,390 --> 00:54:18,399
compile into this weird Yama format and

00:54:16,479 --> 00:54:21,130
then we have a second stage which

00:54:18,399 --> 00:54:23,559
transforms that and that first stage

00:54:21,130 --> 00:54:26,529
will basically be puppet so if your code

00:54:23,559 --> 00:54:28,059
doesn't compile with regular puppet on

00:54:26,529 --> 00:54:32,439
the master you're gonna get the same

00:54:28,059 --> 00:54:35,649
error message initially so yeah make

00:54:32,439 --> 00:54:37,149
your code compile I can't help ya if you

00:54:35,649 --> 00:54:38,709
wrote puppet code in the first place

00:54:37,149 --> 00:54:39,149
it's your own technical debt so sorry

00:54:38,709 --> 00:54:42,130
about that

00:54:39,149 --> 00:54:43,269
any other questions I'm glad you guys

00:54:42,130 --> 00:54:46,380
are smart audience a lot of good

00:54:43,269 --> 00:54:46,380
questions a gentleman over here

00:54:48,109 --> 00:54:54,830
well I would be interested in if we have

00:54:51,840 --> 00:54:57,720
a quite complicated complex

00:54:54,830 --> 00:55:00,770
configuration is there some kind of

00:54:57,720 --> 00:55:03,930
costs on the system which means load

00:55:00,770 --> 00:55:05,910
which is causing by this real-time yeah

00:55:03,930 --> 00:55:07,109
great question so I tried to address

00:55:05,910 --> 00:55:09,060
this a little bit in the presentation

00:55:07,109 --> 00:55:11,550
but I'll just repeat a little bit more

00:55:09,060 --> 00:55:13,200
in detail so the project itself is

00:55:11,550 --> 00:55:15,210
written in going and it's a single

00:55:13,200 --> 00:55:17,970
binary that runs on each machine the

00:55:15,210 --> 00:55:20,010
load is extremely extremely low so

00:55:17,970 --> 00:55:21,720
obviously if you're making hundreds or

00:55:20,010 --> 00:55:23,730
thousands of changes per millisecond

00:55:21,720 --> 00:55:26,310
you're gonna have way more load than if

00:55:23,730 --> 00:55:29,099
you're doing more reasonable things so

00:55:26,310 --> 00:55:31,440
it turns out in my tests everything has

00:55:29,099 --> 00:55:34,260
taken much less RAM and lluch much less

00:55:31,440 --> 00:55:36,030
CPU than the equivalents in puppet but

00:55:34,260 --> 00:55:37,230
if you were really really crazy and you

00:55:36,030 --> 00:55:38,700
didn't want to make these changes

00:55:37,230 --> 00:55:40,380
I didn't mean crazy in a bad way but if

00:55:38,700 --> 00:55:42,570
you really really like determined to

00:55:40,380 --> 00:55:45,090
keep things the way puppet is you could

00:55:42,570 --> 00:55:47,040
have MGMT run every 30 minutes shut down

00:55:45,090 --> 00:55:48,900
when the graph is can converge and then

00:55:47,040 --> 00:55:50,400
run it in cron again so if you really

00:55:48,900 --> 00:55:52,050
wanted to run kind of the way puppet

00:55:50,400 --> 00:55:54,030
does you can actually emulate that and

00:55:52,050 --> 00:55:55,740
then you'll have basically a guaranteed

00:55:54,030 --> 00:55:58,710
performance hit which is always less

00:55:55,740 --> 00:56:00,810
than puppet you can even actually turn

00:55:58,710 --> 00:56:02,310
off the parallelism so you have a max of

00:56:00,810 --> 00:56:03,900
one thing run at a time so if you have a

00:56:02,310 --> 00:56:06,030
really slow machine that doesn't do well

00:56:03,900 --> 00:56:08,460
with like multiple resources running at

00:56:06,030 --> 00:56:10,349
the same time that can be limited too so

00:56:08,460 --> 00:56:11,460
there's lots of ways and I think overall

00:56:10,349 --> 00:56:15,170
it'll be very happy

00:56:11,460 --> 00:56:15,170
so is that a good enough answer

00:56:16,200 --> 00:56:19,829
partially um I can elaborate a little

00:56:18,599 --> 00:56:22,410
bit more on the language the language

00:56:19,829 --> 00:56:24,900
itself the grep the language is actually

00:56:22,410 --> 00:56:26,730
kind of a graph so it knows what

00:56:24,900 --> 00:56:28,829
branches of the language need to be

00:56:26,730 --> 00:56:30,300
refreshed and don't so it's actually

00:56:28,829 --> 00:56:31,980
very efficient in running it doesn't

00:56:30,300 --> 00:56:34,589
rerun the whole program over and over

00:56:31,980 --> 00:56:36,119
again and you can look into functional

00:56:34,589 --> 00:56:37,140
reactive programming and you'll see that

00:56:36,119 --> 00:56:39,390
these languages are actually very

00:56:37,140 --> 00:56:41,940
efficient overall my implementation is

00:56:39,390 --> 00:56:44,520
not in efficient at all it's garbage

00:56:41,940 --> 00:56:46,260
but it's getting better and even with my

00:56:44,520 --> 00:56:48,359
like unoptimized implementation it's

00:56:46,260 --> 00:56:51,599
super fast so I was changing a text file

00:56:48,359 --> 00:56:54,540
every second you know so the load on my

00:56:51,599 --> 00:56:56,250
machine was super low so yeah

00:56:54,540 --> 00:56:58,079
gentleman over here question Oh in the

00:56:56,250 --> 00:56:59,970
back sorry yeah how does these work in

00:56:58,079 --> 00:57:03,540
their farm old environment how would

00:56:59,970 --> 00:57:09,089
this work in a firewall environment more

00:57:03,540 --> 00:57:11,730
specifically basically if you have some

00:57:09,089 --> 00:57:13,230
preferred notes of others so if for

00:57:11,730 --> 00:57:15,030
example can control who is actually

00:57:13,230 --> 00:57:17,849
going to be the master yes so you can

00:57:15,030 --> 00:57:19,440
definitely decide things like that I

00:57:17,849 --> 00:57:20,849
have some fun surprises about this

00:57:19,440 --> 00:57:22,530
conversation which I'm going to talk

00:57:20,849 --> 00:57:25,470
about probably in ghent if they give me

00:57:22,530 --> 00:57:27,329
a spot so it's a great question but I'm

00:57:25,470 --> 00:57:28,410
gonna hold off answering for now there

00:57:27,329 --> 00:57:30,450
is definitely a way to do it and I'm

00:57:28,410 --> 00:57:32,250
gonna have some special demos planned

00:57:30,450 --> 00:57:34,260
with this sort of networking and stuff

00:57:32,250 --> 00:57:36,329
like that for then so sorry about that

00:57:34,260 --> 00:57:39,869
you have to wait yes I would say the

00:57:36,329 --> 00:57:41,640
last question sure that's okay yep a

00:57:39,869 --> 00:57:47,140
nice dog by the way thank you I have

00:57:41,640 --> 00:57:50,759
tell Bernd everyone Aleksey

00:57:47,140 --> 00:57:50,759
Furnas like what what's going on

00:57:51,839 --> 00:57:56,859
actually I'm going to abuse the time so

00:57:54,910 --> 00:57:59,589
I have two questions first one are you

00:57:56,859 --> 00:58:04,390
going to do another magic trick do you

00:57:59,589 --> 00:58:09,460
want one yeah there you go

00:58:04,390 --> 00:58:12,339
so then the real question as every agent

00:58:09,460 --> 00:58:14,499
can talk to each other how do you do the

00:58:12,339 --> 00:58:17,710
authentication and authorization that is

00:58:14,499 --> 00:58:19,599
a great question as well that is a more

00:58:17,710 --> 00:58:22,480
complex topic which probably deserves

00:58:19,599 --> 00:58:24,249
its own talk so um two answers are one

00:58:22,480 --> 00:58:26,319
we have a design partially implemented

00:58:24,249 --> 00:58:27,940
it's not finished and two I'm not going

00:58:26,319 --> 00:58:29,289
to talk about today it's really a whole

00:58:27,940 --> 00:58:31,029
other talk and I can't answer in one

00:58:29,289 --> 00:58:32,589
minute satisfactorily we have a really

00:58:31,029 --> 00:58:34,779
cool way of doing this in a distributed

00:58:32,589 --> 00:58:36,640
way I think you'll like it but if you

00:58:34,779 --> 00:58:38,319
want to get involved join the project

00:58:36,640 --> 00:58:40,720
we'll give you the design you can help

00:58:38,319 --> 00:58:43,960
write it or you can wait and see so

00:58:40,720 --> 00:58:46,660
sorry but the part of me I'm not saying

00:58:43,960 --> 00:58:49,239
if it's a blockchain so thank you very

00:58:46,660 --> 00:58:50,130
much and happy hacking thank you very

00:58:49,239 --> 00:58:56,359
much Jiggs

00:58:50,130 --> 00:58:56,359

YouTube URL: https://www.youtube.com/watch?v=hSVadQLeplU


