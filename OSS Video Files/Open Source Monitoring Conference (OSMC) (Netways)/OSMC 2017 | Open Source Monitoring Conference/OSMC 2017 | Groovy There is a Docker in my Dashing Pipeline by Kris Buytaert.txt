Title: OSMC 2017 | Groovy There is a Docker in my Dashing Pipeline by Kris Buytaert
Publication date: 2017-12-05
Playlist: OSMC 2017 | Open Source Monitoring Conference
Description: 
	Dashing or rather Smashing is an awesome Monitoring Dashboard, but itâ€™s a pita to deploy. This talk will document the efforts we went trough to make the deployment of both dashing and the dashboards fully automated. It also will show how we test these dashboards using docker and how we build these pipelines with the JenkinsDSL.
Captions: 
	00:00:10,360 --> 00:00:19,840
all right welcome cone and good morning

00:00:14,530 --> 00:00:23,050
to everybody the first talk or the first

00:00:19,840 --> 00:00:27,189
speaker here is a longtime Linux and

00:00:23,050 --> 00:00:29,470
open source consultant and he is giving

00:00:27,189 --> 00:00:33,309
several tasks at international

00:00:29,470 --> 00:00:37,510
conferences written papers and written a

00:00:33,309 --> 00:00:40,030
lot of articles and one one thing he's

00:00:37,510 --> 00:00:41,860
also known for is for his blog

00:00:40,030 --> 00:00:45,900
everything is a freaking meanness

00:00:41,860 --> 00:00:58,869
problem I would like to welcome Chris

00:00:45,900 --> 00:01:02,080
Burrtec good morning am i waking anybody

00:00:58,869 --> 00:01:04,449
up in the back I see you made a stupid

00:01:02,080 --> 00:01:06,640
choice you're coming here for the talk

00:01:04,449 --> 00:01:08,170
with the most chaos in there if you

00:01:06,640 --> 00:01:10,420
wanted to see fireworks you should have

00:01:08,170 --> 00:01:14,650
been in the other room because James is

00:01:10,420 --> 00:01:17,500
actually putting on a firework show you

00:01:14,650 --> 00:01:21,040
saw me update the slides of this the

00:01:17,500 --> 00:01:23,890
title slide it initially was a general

00:01:21,040 --> 00:01:27,660
talk about how to do application

00:01:23,890 --> 00:01:29,920
delivery then it became one about how we

00:01:27,660 --> 00:01:31,810
frustrated did this with dashing which

00:01:29,920 --> 00:01:33,970
is an open source monitoring tool which

00:01:31,810 --> 00:01:35,650
is why Michael Friedrich wanted me to

00:01:33,970 --> 00:01:37,390
come and talk about it here because it's

00:01:35,650 --> 00:01:39,010
about a monitoring tool and then you

00:01:37,390 --> 00:01:43,980
also saw me updated from dashing to

00:01:39,010 --> 00:01:47,590
Smashing because they rebranded Who am I

00:01:43,980 --> 00:01:55,540
who doesn't know me for is this is first

00:01:47,590 --> 00:01:57,570
OMC who see me two weeks ago in drug say

00:01:55,540 --> 00:02:01,960
my name is Chris better I'm from Belgium

00:01:57,570 --> 00:02:05,080
about 20 years ago I started in IT I've

00:02:01,960 --> 00:02:07,240
been doing open-source since then and

00:02:05,080 --> 00:02:11,140
all kinds of different roles today my

00:02:07,240 --> 00:02:13,870
role as mostly helping organizations to

00:02:11,140 --> 00:02:15,909
deliver software somewhere about eight

00:02:13,870 --> 00:02:17,409
nine years ago we started joining a

00:02:15,909 --> 00:02:19,450
conference about that we call the DevOps

00:02:17,409 --> 00:02:23,350
days and since then everybody thinks

00:02:19,450 --> 00:02:24,160
that a DevOps engineer is a junior or a

00:02:23,350 --> 00:02:27,870
senior Linux

00:02:24,160 --> 00:02:31,770
expert who has been paid Junior rates

00:02:27,870 --> 00:02:34,720
and a lot of her things went wrong but

00:02:31,770 --> 00:02:36,160
pretty much I help people using

00:02:34,720 --> 00:02:37,870
open-source I'm part of the traveling

00:02:36,160 --> 00:02:41,020
geek circus which includes burn to touch

00:02:37,870 --> 00:02:43,000
on voltage a couple of other people who

00:02:41,020 --> 00:02:47,860
are here will use videos DC will you see

00:02:43,000 --> 00:02:50,200
a different other conferences so DevOps

00:02:47,860 --> 00:02:52,690
because this talk is about delivering

00:02:50,200 --> 00:03:00,190
software what can we explain we will

00:02:52,690 --> 00:03:02,590
DevOps is never nobody nobody ever even

00:03:00,190 --> 00:03:05,080
people who REM the DevOps tracker than

00:03:02,590 --> 00:03:09,940
other conference cannot explain me yeah

00:03:05,080 --> 00:03:12,550
y'all can I see you hiding you won't

00:03:09,940 --> 00:03:16,960
fall into the trap these guys did

00:03:12,550 --> 00:03:18,490
Damon Edwards and John Willis they ran

00:03:16,960 --> 00:03:20,950
apart cough they still run it called

00:03:18,490 --> 00:03:23,350
DevOps cafe and what they do is they

00:03:20,950 --> 00:03:24,880
interview people who are dealing with

00:03:23,350 --> 00:03:28,600
this topic and they figured out it's

00:03:24,880 --> 00:03:30,400
typically about four key components and

00:03:28,600 --> 00:03:32,350
that's how we end up having the cams

00:03:30,400 --> 00:03:33,910
keywords it's about culture culture is

00:03:32,350 --> 00:03:36,490
how organizations or groups of people

00:03:33,910 --> 00:03:38,470
behave similarly how they interact how

00:03:36,490 --> 00:03:39,910
they work together how they blame or

00:03:38,470 --> 00:03:41,320
don't blame each other how their

00:03:39,910 --> 00:03:43,470
management structures are completely

00:03:41,320 --> 00:03:46,360
 up or brilliant it's about

00:03:43,470 --> 00:03:48,820
automation and and that's mostly what

00:03:46,360 --> 00:03:50,260
this talk is about when we talk about

00:03:48,820 --> 00:03:51,370
automation is build automation test

00:03:50,260 --> 00:03:54,070
automation infrastructure as code

00:03:51,370 --> 00:03:56,230
pipeline as code all these things

00:03:54,070 --> 00:03:58,450
because we we have computers to do the

00:03:56,230 --> 00:04:01,750
work for us we talk about monitoring and

00:03:58,450 --> 00:04:03,970
metrics that's what the rest of this

00:04:01,750 --> 00:04:06,610
conference is about and we talk about

00:04:03,970 --> 00:04:09,100
sharing we talk about open source we

00:04:06,610 --> 00:04:10,989
talk about sharing responsibility we

00:04:09,100 --> 00:04:13,810
talk about sharing experiences and

00:04:10,989 --> 00:04:18,700
that's how we ended up with the cams

00:04:13,810 --> 00:04:21,910
keyword and a lot of people think that

00:04:18,700 --> 00:04:23,830
if you want to do DevOps that there's

00:04:21,910 --> 00:04:26,400
the ultimate way of doing DevOps is

00:04:23,830 --> 00:04:29,550
basically the backflip of what some

00:04:26,400 --> 00:04:33,490
James just humbles book which is the

00:04:29,550 --> 00:04:36,310
ultimate continuous delivery the idea

00:04:33,490 --> 00:04:37,790
that you can take a piece of software

00:04:36,310 --> 00:04:40,870
write the code

00:04:37,790 --> 00:04:44,240
commit and it's gonna be in production

00:04:40,870 --> 00:04:45,800
minutes later and you do that through

00:04:44,240 --> 00:04:47,030
automation through collaboration you

00:04:45,800 --> 00:04:50,480
have developers and operations people

00:04:47,030 --> 00:04:51,890
work together and for a lot of people

00:04:50,480 --> 00:04:57,020
that's what they really want to achieve

00:04:51,890 --> 00:05:00,080
when they they do DevOps so back to this

00:04:57,020 --> 00:05:04,580
talk basically this is an experience

00:05:00,080 --> 00:05:06,080
story of a customer I was at and I'll be

00:05:04,580 --> 00:05:07,880
honest I mean the first time I submitted

00:05:06,080 --> 00:05:10,490
this talk was Rossum see last year I

00:05:07,880 --> 00:05:12,320
didn't make it and Michael said yeah you

00:05:10,490 --> 00:05:16,670
can come over and still do it so it is

00:05:12,320 --> 00:05:19,190
about a year and a half old but it was a

00:05:16,670 --> 00:05:22,730
team that had infrastructure in place

00:05:19,190 --> 00:05:24,350
they had pipelines in place manual

00:05:22,730 --> 00:05:27,290
pipelines back then manually build

00:05:24,350 --> 00:05:29,630
pipelines had puppet to spin up Tomcat

00:05:27,290 --> 00:05:31,100
stack jebal stacking like 5 to 10

00:05:29,630 --> 00:05:32,720
minutes they could reproduce full

00:05:31,100 --> 00:05:35,980
development acceptance production and

00:05:32,720 --> 00:05:39,230
they were pretty happy doing there and

00:05:35,980 --> 00:05:41,720
there were slowly looking into adopting

00:05:39,230 --> 00:05:43,400
new technologies and one of the topics

00:05:41,720 --> 00:05:45,800
we had there was the problem where we

00:05:43,400 --> 00:05:47,510
were building dashboards for the

00:05:45,800 --> 00:05:49,070
monitoring and metrics and we were

00:05:47,510 --> 00:05:50,300
trying to understand how do we do this

00:05:49,070 --> 00:05:53,180
and how do we actually automate that

00:05:50,300 --> 00:05:55,700
part also so we were trying to build a

00:05:53,180 --> 00:05:57,560
pipeline for dashing I'll come back to

00:05:55,700 --> 00:05:59,390
dashing later but if we build a pipeline

00:05:57,560 --> 00:06:01,910
and realize I'm kind of standing in

00:05:59,390 --> 00:06:03,650
front of the screen what we should be

00:06:01,910 --> 00:06:06,740
doing is take a piece of source code

00:06:03,650 --> 00:06:09,440
check it in get some feedback test if it

00:06:06,740 --> 00:06:11,750
fails we start over again and we keep

00:06:09,440 --> 00:06:13,730
doing that until we actually have a

00:06:11,750 --> 00:06:15,170
release until it actually is in

00:06:13,730 --> 00:06:16,880
production lots of environments lots of

00:06:15,170 --> 00:06:19,160
organization fail make a mistake here

00:06:16,880 --> 00:06:20,810
and they go further and they don't

00:06:19,160 --> 00:06:23,860
really test anything but that basically

00:06:20,810 --> 00:06:26,570
is the idea of a pipeline if you look at

00:06:23,860 --> 00:06:31,810
screenshot this is a pipeline of our

00:06:26,570 --> 00:06:31,810
puppet codes ages ago September 2012

00:06:33,180 --> 00:06:39,550
that was our puppet pipeline back in

00:06:35,740 --> 00:06:41,320
those days and people start building

00:06:39,550 --> 00:06:46,630
these things for all kinds of

00:06:41,320 --> 00:06:48,730
applications and we do that because we

00:06:46,630 --> 00:06:52,200
want to be able to constantly be able to

00:06:48,730 --> 00:06:55,090
deliver software the idea about

00:06:52,200 --> 00:06:56,620
delivering software is not that we do it

00:06:55,090 --> 00:06:58,240
five times a day we do it ten times a

00:06:56,620 --> 00:07:01,090
day we keep doing and no it it is that

00:06:58,240 --> 00:07:03,310
at any point in time I want to have a

00:07:01,090 --> 00:07:04,900
piece of software I know that if I need

00:07:03,310 --> 00:07:06,520
to do something now if there's an

00:07:04,900 --> 00:07:08,830
upgrade if there is something if there

00:07:06,520 --> 00:07:09,940
is security fix I know that I can do it

00:07:08,830 --> 00:07:12,480
now and I don't care if it's a Friday

00:07:09,940 --> 00:07:14,860
afternoon at 5:00 or a Sunday morning or

00:07:12,480 --> 00:07:16,300
Wednesday may tweak because it's gonna

00:07:14,860 --> 00:07:17,920
be easy it's gonna be transparent it's

00:07:16,300 --> 00:07:22,450
gonna be trivial and it's not going to

00:07:17,920 --> 00:07:25,210
be painful so people will still say

00:07:22,450 --> 00:07:27,010
don't deploy on a Friday yeah I get that

00:07:25,210 --> 00:07:33,190
pain I didn't want to deploy in a Friday

00:07:27,010 --> 00:07:36,250
but it shouldn't be a problem so it's

00:07:33,190 --> 00:07:38,440
basically snippet from the release notes

00:07:36,250 --> 00:07:41,110
from deploy inator and when I was giving

00:07:38,440 --> 00:07:42,940
a similar talk but I'm mostly about how

00:07:41,110 --> 00:07:44,830
we do the same with infrastructure in in

00:07:42,940 --> 00:07:46,690
Park a month ago

00:07:44,830 --> 00:07:48,400
somebody from Etsy was actually in the

00:07:46,690 --> 00:07:51,280
room they're still using this noise tree

00:07:48,400 --> 00:07:52,690
tool well maybe it's a toy because I

00:07:51,280 --> 00:07:54,820
don't see any other adoption for it but

00:07:52,690 --> 00:07:57,040
for them that patterning is also still

00:07:54,820 --> 00:07:59,500
earlier the fact that we can do it it

00:07:57,040 --> 00:08:01,630
the fact that we constantly have the

00:07:59,500 --> 00:08:02,710
power to release quality software that's

00:08:01,630 --> 00:08:06,480
something they don't want to negotiate

00:08:02,710 --> 00:08:09,040
about so what do we need we need to have

00:08:06,480 --> 00:08:10,900
an artifact something that we know that

00:08:09,040 --> 00:08:12,250
that artifact is something we can deploy

00:08:10,900 --> 00:08:14,530
that it hasn't been changed and it

00:08:12,250 --> 00:08:16,300
hasn't been modified and we know that we

00:08:14,530 --> 00:08:17,830
can use that same part in development

00:08:16,300 --> 00:08:21,550
and acceptance in different environment

00:08:17,830 --> 00:08:25,540
and this disaster recovery anyhow so we

00:08:21,550 --> 00:08:27,310
typically package and a gif a bunch of

00:08:25,540 --> 00:08:29,470
these things to give you a background on

00:08:27,310 --> 00:08:33,310
how we build the infrastructure to do

00:08:29,470 --> 00:08:35,770
this so from an ops point of view we

00:08:33,310 --> 00:08:37,960
want a packaged software because I don't

00:08:35,770 --> 00:08:40,090
want devs to log on a machine modify

00:08:37,960 --> 00:08:42,070
files and I wouldn't be able to see if

00:08:40,090 --> 00:08:43,810
they modified them I want to use the

00:08:42,070 --> 00:08:45,410
checksums I want to make sure that the

00:08:43,810 --> 00:08:47,630
package is still

00:08:45,410 --> 00:08:50,540
I sometimes need to deploy packages in

00:08:47,630 --> 00:08:53,840
all kinds of weird locations behind the

00:08:50,540 --> 00:08:55,910
firewall over a satellite link and I

00:08:53,840 --> 00:08:58,310
know that packages are gonna be

00:08:55,910 --> 00:09:00,200
something that I can deploy all over the

00:08:58,310 --> 00:09:02,900
place then I can ship with a little

00:09:00,200 --> 00:09:04,880
overhead it's also the moment when I

00:09:02,900 --> 00:09:06,340
start doing packaging it's also when I

00:09:04,880 --> 00:09:08,390
sit down with a developer and say hey

00:09:06,340 --> 00:09:09,650
what do you want in a package what do

00:09:08,390 --> 00:09:11,660
you need what actually does your

00:09:09,650 --> 00:09:14,420
software depend on where are you going

00:09:11,660 --> 00:09:16,910
to store files are you gonna try to log

00:09:14,420 --> 00:09:18,830
files do you need something on a desk

00:09:16,910 --> 00:09:20,810
you know what you need it's where's your

00:09:18,830 --> 00:09:22,220
configuration and then we have the

00:09:20,810 --> 00:09:23,570
discussion like the configuration really

00:09:22,220 --> 00:09:26,390
shouldn't be in a package you need to

00:09:23,570 --> 00:09:27,770
externalize the configuration so I have

00:09:26,390 --> 00:09:34,390
a conflict management system that can do

00:09:27,770 --> 00:09:36,740
this welcome back to the config later so

00:09:34,390 --> 00:09:38,330
the application we were dealing with was

00:09:36,740 --> 00:09:41,300
at that point

00:09:38,330 --> 00:09:43,910
dashing it's been rebranded to Smashing

00:09:41,300 --> 00:09:45,440
now but this is what a dashboard could

00:09:43,910 --> 00:09:49,070
look like it's a tool that allows you to

00:09:45,440 --> 00:09:50,990
basically bundle together a lot of

00:09:49,070 --> 00:09:53,060
upstream tools I mean this one is an

00:09:50,990 --> 00:09:55,130
example of a bunch of a king of stacks

00:09:53,060 --> 00:09:57,980
different once we figure out who's on

00:09:55,130 --> 00:09:59,600
call we have number of jenkins bill that

00:09:57,980 --> 00:10:00,920
are successful we have different foreman

00:09:59,600 --> 00:10:02,840
instances and we actually have metrics

00:10:00,920 --> 00:10:04,820
of applications in that and you can

00:10:02,840 --> 00:10:07,040
build and do these things together with

00:10:04,820 --> 00:10:11,390
different teams actually building

00:10:07,040 --> 00:10:14,030
different dashboards and it was a

00:10:11,390 --> 00:10:15,380
challenge because we wanted to have

00:10:14,030 --> 00:10:17,900
those deployed and we didn't want the

00:10:15,380 --> 00:10:20,210
dashboard to break and sometimes people

00:10:17,900 --> 00:10:22,550
actually logged on to its machine

00:10:20,210 --> 00:10:24,710
running the dashboards day slightly

00:10:22,550 --> 00:10:28,130
modified some HTML or some child

00:10:24,710 --> 00:10:33,440
somewhere and dashboard was broken it's

00:10:28,130 --> 00:10:34,850
not something you want so yeah for those

00:10:33,440 --> 00:10:37,730
who think dashing is dead it's not

00:10:34,850 --> 00:10:44,240
actually they forked they rebranded it's

00:10:37,730 --> 00:10:47,720
now much more active than before so but

00:10:44,240 --> 00:10:49,640
it's not the perfect tool it's really

00:10:47,720 --> 00:10:52,310
awesome because you can have a lot of

00:10:49,640 --> 00:10:53,750
upstream people who have like hey I

00:10:52,310 --> 00:10:57,170
already build a widget for this you can

00:10:53,750 --> 00:10:59,180
reuse this and it's really easy to start

00:10:57,170 --> 00:11:01,640
I mean I'm not a rugby

00:10:59,180 --> 00:11:02,330
but I can write scripts for dashing that

00:11:01,640 --> 00:11:04,250
actually work

00:11:02,330 --> 00:11:05,870
quit E fast and they're the fun part

00:11:04,250 --> 00:11:08,660
what events dream if you won't have

00:11:05,870 --> 00:11:12,440
debugging now it's also really ugly

00:11:08,660 --> 00:11:19,520
I mean who likes deploying ruby

00:11:12,440 --> 00:11:21,520
applications we used to laugh with a

00:11:19,520 --> 00:11:23,000
little bit of Java community if he said

00:11:21,520 --> 00:11:26,240
maven build

00:11:23,000 --> 00:11:30,380
downloads the Internet's yeah Ruby just

00:11:26,240 --> 00:11:33,500
pretty much the same only it's much more

00:11:30,380 --> 00:11:37,100
mess and then there's the alerting with

00:11:33,500 --> 00:11:39,140
a lot of those upstream widgets the

00:11:37,100 --> 00:11:40,910
default way that the dashing community

00:11:39,140 --> 00:11:42,860
says you have four installs basically

00:11:40,910 --> 00:11:45,770
you get to clone a guest from github

00:11:42,860 --> 00:11:48,230
that's like a snippet how did you

00:11:45,770 --> 00:11:52,270
release management on that and it

00:11:48,230 --> 00:11:54,770
actually gets even worse by any chance

00:11:52,270 --> 00:11:59,390
who wrote the a king of plug-in for

00:11:54,770 --> 00:12:02,600
dashing is he in the room okay it's fine

00:11:59,390 --> 00:12:04,580
it you're hiding because I don't know if

00:12:02,600 --> 00:12:06,920
he's in the room or she's in room but

00:12:04,580 --> 00:12:09,170
it's horrible the config is inside the

00:12:06,920 --> 00:12:11,180
code like the first couple of lines is

00:12:09,170 --> 00:12:14,000
basically you need to talk to this King

00:12:11,180 --> 00:12:15,890
instance or this Nigel's instance so

00:12:14,000 --> 00:12:18,230
parameter writing that outside it's it's

00:12:15,890 --> 00:12:22,120
horrible we needed if you have multiple

00:12:18,230 --> 00:12:24,260
multiple instances like this stack here

00:12:22,120 --> 00:12:28,490
there's different customers different

00:12:24,260 --> 00:12:30,200
environments the initial attempt to do

00:12:28,490 --> 00:12:32,630
that was literally like run different

00:12:30,200 --> 00:12:36,710
copies of the script rename it before we

00:12:32,630 --> 00:12:39,740
started taking out a convict so it

00:12:36,710 --> 00:12:43,850
wasn't really was easy to do but it

00:12:39,740 --> 00:12:45,770
wasn't really manageable so we wanted to

00:12:43,850 --> 00:12:47,330
come to a point where we could just pin

00:12:45,770 --> 00:12:50,180
up a dashing stack have a developer play

00:12:47,330 --> 00:12:54,310
with it committees changes to get in

00:12:50,180 --> 00:12:58,670
them promoted and movie to production so

00:12:54,310 --> 00:13:01,640
how do we do this well gem install

00:12:58,670 --> 00:13:06,590
dashing and then Jim pulls in the

00:13:01,640 --> 00:13:07,700
Internet's and we do two days later you

00:13:06,590 --> 00:13:10,640
get a different version with different

00:13:07,700 --> 00:13:12,560
dependencies and when you do it a month

00:13:10,640 --> 00:13:14,000
later it doesn't

00:13:12,560 --> 00:13:19,180
because the ruby version needs to be

00:13:14,000 --> 00:13:24,100
updated did I say I don't like Ruby

00:13:19,180 --> 00:13:24,100
so reproducibility was really a problem

00:13:24,310 --> 00:13:27,740
specifically we're developers taking

00:13:26,270 --> 00:13:29,300
random new versions from the internet

00:13:27,740 --> 00:13:32,150
and trying to get them to work it was

00:13:29,300 --> 00:13:35,180
really fun and that exactly is what we

00:13:32,150 --> 00:13:37,660
tried to fix with all the other

00:13:35,180 --> 00:13:41,350
deployments we did we are typical Deval

00:13:37,660 --> 00:13:45,980
typical stacks like mostly send us

00:13:41,350 --> 00:13:47,930
packages are being built with fpm we

00:13:45,980 --> 00:13:50,480
build them in jenkins we upload them to

00:13:47,930 --> 00:13:52,790
pulp we have repositories we download I

00:13:50,480 --> 00:13:54,350
think I gave talks about how we use pulp

00:13:52,790 --> 00:13:57,680
as repository management and stuff and

00:13:54,350 --> 00:13:59,720
in previous conferences and that's how

00:13:57,680 --> 00:14:01,480
we package software how we ship it then

00:13:59,720 --> 00:14:03,140
the config is managed in puppet and

00:14:01,480 --> 00:14:05,779
depending on the environment there's

00:14:03,140 --> 00:14:07,850
different variables so I can configure

00:14:05,779 --> 00:14:09,950
which a king my ancestors and the

00:14:07,850 --> 00:14:14,600
services also so this is a typical pcs

00:14:09,950 --> 00:14:16,520
pattern package service comfy the

00:14:14,600 --> 00:14:19,130
building the package was paying how do

00:14:16,520 --> 00:14:21,170
we build a package with all those Ruby

00:14:19,130 --> 00:14:23,630
dependencies in there I mean you could

00:14:21,170 --> 00:14:25,850
individually try to package all the ruby

00:14:23,630 --> 00:14:28,810
gems and then have dependencies manage

00:14:25,850 --> 00:14:31,880
that but that was really not gonna work

00:14:28,810 --> 00:14:34,630
there's tools that try to do that for

00:14:31,880 --> 00:14:37,280
you but what we really wanted was like a

00:14:34,630 --> 00:14:39,380
pattern that would work for not only

00:14:37,280 --> 00:14:42,589
Ruby but also for Python for node for

00:14:39,380 --> 00:14:45,050
all the other things and we needed to

00:14:42,589 --> 00:14:47,839
have a schrute with the Wrights version

00:14:45,050 --> 00:14:51,230
in there python is virtual and ruby has

00:14:47,839 --> 00:14:52,670
RBF and basically have a completely

00:14:51,230 --> 00:14:54,530
self-contained package that we could

00:14:52,670 --> 00:14:57,320
ship to any platform and say hey in this

00:14:54,530 --> 00:15:01,550
directory this application is deployed

00:14:57,320 --> 00:15:03,830
with all of these dependencies back then

00:15:01,550 --> 00:15:06,560
it was Ruby true one we needed and we're

00:15:03,830 --> 00:15:12,860
like what if we try to build this in

00:15:06,560 --> 00:15:15,110
this new hype get back to docker the

00:15:12,860 --> 00:15:18,980
Karaka later but it's like we've been

00:15:15,110 --> 00:15:21,800
using containers for for ages and what

00:15:18,980 --> 00:15:24,860
if we try to just use this container as

00:15:21,800 --> 00:15:26,030
a build environment where we spin up a

00:15:24,860 --> 00:15:29,060
container

00:15:26,030 --> 00:15:31,820
built everything package it and then

00:15:29,060 --> 00:15:32,990
throw away the container it would give

00:15:31,820 --> 00:15:34,670
us a couple of things it would actually

00:15:32,990 --> 00:15:35,360
give us the experience and was two and a

00:15:34,670 --> 00:15:39,110
half years ago

00:15:35,360 --> 00:15:41,690
um how to build and how to manage

00:15:39,110 --> 00:15:46,340
containers while ducking docker back in

00:15:41,690 --> 00:15:46,900
those days so that was a plan let's do

00:15:46,340 --> 00:15:48,890
this

00:15:46,900 --> 00:15:52,040
so we started building a couple of

00:15:48,890 --> 00:15:55,940
pipelines one to basically build a clean

00:15:52,040 --> 00:15:58,250
package but dashing and just dashing was

00:15:55,940 --> 00:16:01,040
the initial plan and then another one

00:15:58,250 --> 00:16:03,230
with all of our local code in there so

00:16:01,040 --> 00:16:05,150
the idea was that we could deploy our

00:16:03,230 --> 00:16:07,130
dashboards and all the scripts we needed

00:16:05,150 --> 00:16:10,040
on top of the already existing clean

00:16:07,130 --> 00:16:12,740
nashing package we later moved away from

00:16:10,040 --> 00:16:15,230
that now it's one package because we

00:16:12,740 --> 00:16:18,470
never actually had the isolation between

00:16:15,230 --> 00:16:22,460
the releases so now it's one big package

00:16:18,470 --> 00:16:24,620
and the goal was that ops folks and

00:16:22,460 --> 00:16:26,270
developers would not just log on to the

00:16:24,620 --> 00:16:29,060
dashing machine modify some small

00:16:26,270 --> 00:16:31,400
templates and things in their accounting

00:16:29,060 --> 00:16:33,170
and break the dashboard while everybody

00:16:31,400 --> 00:16:35,990
was looking at it but we actually had

00:16:33,170 --> 00:16:38,750
the same development acceptance

00:16:35,990 --> 00:16:43,460
production staging environment as we had

00:16:38,750 --> 00:16:47,390
for all the other platforms so we used

00:16:43,460 --> 00:16:49,880
Jenkins and we figured out let's make it

00:16:47,390 --> 00:16:53,290
more complex because the other problem

00:16:49,880 --> 00:16:58,310
we have with a lot of the stacks is that

00:16:53,290 --> 00:17:01,190
well pool runs Jenkins who runs Jenkins

00:16:58,310 --> 00:17:04,360
for more than ten jobs for more than

00:17:01,190 --> 00:17:09,950
hundred jobs for around thousand jobs

00:17:04,360 --> 00:17:11,630
who does that manually we were and all

00:17:09,950 --> 00:17:13,760
the developers were maining maintaining

00:17:11,630 --> 00:17:15,890
their own jobs and they were clicking

00:17:13,760 --> 00:17:19,070
and cloning and none of the jobs were in

00:17:15,890 --> 00:17:20,870
sync and we at that customer actually

00:17:19,070 --> 00:17:25,460
that there was a bunch of Jenkins

00:17:20,870 --> 00:17:26,960
masters hidden under desks and we needed

00:17:25,460 --> 00:17:29,690
to figure out a way to centralize those

00:17:26,960 --> 00:17:32,510
we need to figure out a way to make that

00:17:29,690 --> 00:17:36,710
maintainable so our stack was we scratch

00:17:32,510 --> 00:17:38,810
everything we start with the same

00:17:36,710 --> 00:17:39,650
pattern again the a Jenkins development

00:17:38,810 --> 00:17:44,840
box for everybody

00:17:39,650 --> 00:17:46,700
can play and create his jobs and then we

00:17:44,840 --> 00:17:47,750
have the jobs being promoted to

00:17:46,700 --> 00:17:53,540
production Jenkins

00:17:47,750 --> 00:17:55,760
we're only automated jobs can run one

00:17:53,540 --> 00:18:00,080
central master a bunch of slaves on

00:17:55,760 --> 00:18:01,970
demand as much as we need and we wanted

00:18:00,080 --> 00:18:05,390
to have it reproducible so we also set

00:18:01,970 --> 00:18:09,170
forward the idea that you do not use the

00:18:05,390 --> 00:18:12,280
UI anymore to create jobs I'll come back

00:18:09,170 --> 00:18:14,480
later on how we do that

00:18:12,280 --> 00:18:16,340
so it was like we're gonna learn

00:18:14,480 --> 00:18:21,500
containers we're gonna do pipeline is

00:18:16,340 --> 00:18:23,540
code we're gonna fight with Ruby solve

00:18:21,500 --> 00:18:31,430
this long little thingy like we want to

00:18:23,540 --> 00:18:34,370
have a stable dashboard so setting up

00:18:31,430 --> 00:18:37,610
the build environment we need to have a

00:18:34,370 --> 00:18:39,560
container step zero which was the one

00:18:37,610 --> 00:18:41,810
that was reflecting what production was

00:18:39,560 --> 00:18:44,630
going to look like which we could use to

00:18:41,810 --> 00:18:49,010
build the application so whole stack is

00:18:44,630 --> 00:18:50,840
sent us recent CentOS version we need to

00:18:49,010 --> 00:18:53,120
be able to pull in the dependencies that

00:18:50,840 --> 00:18:57,860
looked like the platform and we need to

00:18:53,120 --> 00:18:59,120
be able to build so how do we integrate

00:18:57,860 --> 00:19:02,000
our dank Jenkins

00:18:59,120 --> 00:19:04,120
back then it was trivial we figured

00:19:02,000 --> 00:19:07,820
there's plugins for doctor in Jenkins

00:19:04,120 --> 00:19:10,210
except none of them worked except all of

00:19:07,820 --> 00:19:12,440
them kind of expected you to have

00:19:10,210 --> 00:19:15,380
Jenkins running his route stuff like

00:19:12,440 --> 00:19:16,880
that like crazy crazy to only

00:19:15,380 --> 00:19:20,450
developers came up with which have no

00:19:16,880 --> 00:19:22,360
production experience or well it was was

00:19:20,450 --> 00:19:24,920
a pretty corporate environment I

00:19:22,360 --> 00:19:26,690
couldn't just W get stuff from the

00:19:24,920 --> 00:19:29,660
internet I need to have an export set

00:19:26,690 --> 00:19:31,670
what an HSB proxy Booker didn't really

00:19:29,660 --> 00:19:34,970
get that so docker pull stuff like that

00:19:31,670 --> 00:19:36,620
starts failing so we need to work around

00:19:34,970 --> 00:19:40,040
that and none of the plugins we worked

00:19:36,620 --> 00:19:41,990
so we did what every ops guy back in

00:19:40,040 --> 00:19:43,280
those days did how do you manage an or

00:19:41,990 --> 00:19:44,570
how do you orchestrate your whole docker

00:19:43,280 --> 00:19:46,580
infrastructure and how do you do that

00:19:44,570 --> 00:19:49,340
these days with cube you write shell

00:19:46,580 --> 00:19:51,700
scripts and you basically talk to

00:19:49,340 --> 00:19:51,700
localhost

00:19:52,379 --> 00:19:58,509
setting up Locker was pretty trivial

00:19:55,119 --> 00:20:00,700
I mean Garrett has a really good module

00:19:58,509 --> 00:20:02,799
there it's been evolving but we needed

00:20:00,700 --> 00:20:06,960
to have stuff like we want to have a

00:20:02,799 --> 00:20:09,159
local registry to push our images to

00:20:06,960 --> 00:20:11,229
might be running ahead on the slide but

00:20:09,159 --> 00:20:13,089
if you have one Jenkins incident you

00:20:11,229 --> 00:20:14,799
build something locally the images

00:20:13,089 --> 00:20:18,940
locally but once you have more slaves

00:20:14,799 --> 00:20:21,129
and you are using same image you need to

00:20:18,940 --> 00:20:23,169
have something centrally that you know

00:20:21,129 --> 00:20:24,580
I'm always gonna be building from the

00:20:23,169 --> 00:20:27,190
same image so you need an image reveals

00:20:24,580 --> 00:20:30,249
three and is this where we first started

00:20:27,190 --> 00:20:33,749
getting frustrated with the upstream

00:20:30,249 --> 00:20:38,349
docker community because this parameters

00:20:33,749 --> 00:20:41,320
those they still support but I want to

00:20:38,349 --> 00:20:43,450
have this host by default and not even

00:20:41,320 --> 00:20:44,799
go to docker hub and Solomon kind of

00:20:43,450 --> 00:20:46,839
says no I don't want you because I want

00:20:44,799 --> 00:20:49,690
to be rich and famous and get a lot of

00:20:46,839 --> 00:20:51,820
money from you using my publicly hosted

00:20:49,690 --> 00:20:53,289
repository and whereas all the Corp said

00:20:51,820 --> 00:20:55,269
we want to have our internal repository

00:20:53,289 --> 00:20:57,519
so he didn't even want to have a config

00:20:55,269 --> 00:21:00,249
in there that allowed you to directly go

00:20:57,519 --> 00:21:03,759
to your repository so we needed to move

00:21:00,249 --> 00:21:07,029
to the Red Hat fork which had different

00:21:03,759 --> 00:21:13,080
features different documentation it's a

00:21:07,029 --> 00:21:18,999
fun ecosystem there so empty container

00:21:13,080 --> 00:21:19,389
Locker installed Jenkins and salt next

00:21:18,999 --> 00:21:21,639
step

00:21:19,389 --> 00:21:24,039
oh we want to have an isolated

00:21:21,639 --> 00:21:28,059
environment how do I install RV and

00:21:24,039 --> 00:21:33,639
start looking to find a package for our

00:21:28,059 --> 00:21:36,369
VM hmm I didn't find the package for our

00:21:33,639 --> 00:21:43,570
VM the documentation to actually install

00:21:36,369 --> 00:21:47,830
our VM is basically curl pipe whatever I

00:21:43,570 --> 00:21:49,929
think James Turnbull called that a

00:21:47,830 --> 00:21:50,919
couple of years ago at convent camp in

00:21:49,929 --> 00:21:54,359
his keynote he called it having

00:21:50,919 --> 00:21:54,359
unprotected sex with the Internet's

00:21:56,129 --> 00:21:59,679
sorry like how we're doing this in a

00:21:58,570 --> 00:22:01,239
container I'm gonna throw it away

00:21:59,679 --> 00:22:01,749
container anyhow it's not gonna run in

00:22:01,239 --> 00:22:04,659
production

00:22:01,749 --> 00:22:05,260
I'll do it it's I'll package up the

00:22:04,659 --> 00:22:08,200
whole tree

00:22:05,260 --> 00:22:10,630
I got our VM installed I got a container

00:22:08,200 --> 00:22:13,809
with our VM I take the next step and say

00:22:10,630 --> 00:22:16,750
huh gotta install Ruby and they're gonna

00:22:13,809 --> 00:22:19,380
package it now I got containers I got

00:22:16,750 --> 00:22:24,220
packages with clean Ruby instant since

00:22:19,380 --> 00:22:26,799
you start shaving that yak let's install

00:22:24,220 --> 00:22:31,419
dashing oh this is how you install

00:22:26,799 --> 00:22:34,299
dashing a lot of dependencies basically

00:22:31,419 --> 00:22:37,120
fills your whole isolated part with all

00:22:34,299 --> 00:22:39,790
the gems you need and then you do it

00:22:37,120 --> 00:22:41,020
again to get like the tree where you

00:22:39,790 --> 00:22:45,370
actually have the dashboard so now we

00:22:41,020 --> 00:22:48,700
have a container with an empty dashboard

00:22:45,370 --> 00:22:51,760
and some dependencies on Twitter

00:22:48,700 --> 00:22:53,049
libraries which you don't want but you

00:22:51,760 --> 00:22:57,520
have a container with an empty dashboard

00:22:53,049 --> 00:22:59,049
which you can deploy initially you start

00:22:57,520 --> 00:23:01,679
building up all those darker layers and

00:22:59,049 --> 00:23:05,080
then you learn I don't always need them

00:23:01,679 --> 00:23:06,640
they use disk space compress them

00:23:05,080 --> 00:23:09,630
afterwards and basically lose all the

00:23:06,640 --> 00:23:13,980
layers the road in one big dogger file

00:23:09,630 --> 00:23:13,980
so now it was time to get the

00:23:14,070 --> 00:23:18,610
reproducible way of getting the

00:23:16,840 --> 00:23:23,799
dashboards in there and all the widgets

00:23:18,610 --> 00:23:28,350
and all the codes yeah I don't want to

00:23:23,799 --> 00:23:31,120
have my built go to some random person's

00:23:28,350 --> 00:23:34,419
gist's on github which he might update

00:23:31,120 --> 00:23:37,330
or remove tomorrow or when he's drunk

00:23:34,419 --> 00:23:42,250
tonight after the party and like does

00:23:37,330 --> 00:23:44,740
something wrong on git that's not how we

00:23:42,250 --> 00:23:46,990
want to do stuff so we needed to have a

00:23:44,740 --> 00:23:48,880
local git repository with all the

00:23:46,990 --> 00:23:49,960
mirrors of all the codes we were going

00:23:48,880 --> 00:23:52,210
to use and we basically grade a

00:23:49,960 --> 00:23:53,919
repository where all of the widgets are

00:23:52,210 --> 00:23:56,320
in there and there were not gonna be sub

00:23:53,919 --> 00:23:58,870
modules there were not gonna be things

00:23:56,320 --> 00:24:00,429
we could package so we basically the

00:23:58,870 --> 00:24:03,490
only option with this kind of approach

00:24:00,429 --> 00:24:04,900
was to fork everything locally and start

00:24:03,490 --> 00:24:07,809
not maintaining them anymore because it

00:24:04,900 --> 00:24:10,450
was doing that with gist is pretty much

00:24:07,809 --> 00:24:12,309
to contribute all those things back and

00:24:10,450 --> 00:24:13,750
keep those in sync specifically because

00:24:12,309 --> 00:24:15,100
we need that the modified binders

00:24:13,750 --> 00:24:16,990
created because the conflict was inside

00:24:15,100 --> 00:24:19,780
the scripts and things other there's a

00:24:16,990 --> 00:24:29,060
couple of patches we brought back

00:24:19,780 --> 00:24:30,890
mostly it was examples we used so we

00:24:29,060 --> 00:24:34,100
take that we deploy that from the

00:24:30,890 --> 00:24:35,480
dashing container we bundle install with

00:24:34,100 --> 00:24:38,480
all the dependencies and we now have a

00:24:35,480 --> 00:24:40,340
working package and we could basically

00:24:38,480 --> 00:24:44,150
take that package the artifact uploaded

00:24:40,340 --> 00:24:48,650
to our repositories deploy it and be

00:24:44,150 --> 00:24:50,780
running and I would that was basically

00:24:48,650 --> 00:24:53,300
our minimal Viable Product like we have

00:24:50,780 --> 00:24:55,030
a lot of efforts done to create a

00:24:53,300 --> 00:24:57,560
package which was completely isolated

00:24:55,030 --> 00:25:02,510
which we could put on to pretty much any

00:24:57,560 --> 00:25:03,640
role based platform and run it but we

00:25:02,510 --> 00:25:13,220
forgot something

00:25:03,640 --> 00:25:16,070
what did we forget I know it's early but

00:25:13,220 --> 00:25:19,000
it's not the second day you guys are you

00:25:16,070 --> 00:25:21,290
still should have some brain cells away

00:25:19,000 --> 00:25:26,590
and I know the German audience is

00:25:21,290 --> 00:25:30,680
typically not really interactive but I

00:25:26,590 --> 00:25:32,480
was in the Warsaw on Monday and there I

00:25:30,680 --> 00:25:33,950
had to ask are you human beings and a

00:25:32,480 --> 00:25:36,370
half of the audience didn't raise their

00:25:33,950 --> 00:25:41,270
hand so it was kind of weird

00:25:36,370 --> 00:25:47,210
so we forgot to test we didn't test our

00:25:41,270 --> 00:25:50,420
package so we figured out hey we've got

00:25:47,210 --> 00:25:52,550
a container that is used to build a

00:25:50,420 --> 00:25:55,670
package we have a package what if we

00:25:52,550 --> 00:25:58,370
spin up a new container actually install

00:25:55,670 --> 00:26:03,680
the package in there launch it and start

00:25:58,370 --> 00:26:04,880
testing if the dashboard still works and

00:26:03,680 --> 00:26:06,110
we figured out that we didn't really

00:26:04,880 --> 00:26:09,650
package everything there were still

00:26:06,110 --> 00:26:11,870
files being outside of that package that

00:26:09,650 --> 00:26:14,060
were deployed by the whole thing so we

00:26:11,870 --> 00:26:16,610
we spent a lot of time actually figuring

00:26:14,060 --> 00:26:17,860
out why we failed to isolate a bunch of

00:26:16,610 --> 00:26:23,030
those packages

00:26:17,860 --> 00:26:25,580
rubygems and we didn't see at first

00:26:23,030 --> 00:26:27,740
because those files were left over from

00:26:25,580 --> 00:26:30,170
the initial install on the VM where we

00:26:27,740 --> 00:26:32,510
were doing this but after a while we we

00:26:30,170 --> 00:26:33,059
figured out like hey we've run this in

00:26:32,510 --> 00:26:36,419
our pipeline

00:26:33,059 --> 00:26:37,740
and then we do a double you get to

00:26:36,419 --> 00:26:42,529
figure out if that container actually

00:26:37,740 --> 00:26:45,480
serves the page we want and it works and

00:26:42,529 --> 00:26:47,490
then the next step was ok now let's use

00:26:45,480 --> 00:26:49,230
them collective to actually on the

00:26:47,490 --> 00:26:53,220
platform's where we need to have the

00:26:49,230 --> 00:26:56,100
update after promotes update dashing

00:26:53,220 --> 00:26:57,720
gems update dashing dashboard on all the

00:26:56,100 --> 00:27:00,749
nodes with profile dashing and this is

00:26:57,720 --> 00:27:08,460
pretty much what we use in that stack so

00:27:00,749 --> 00:27:11,460
that was fully automated way to make

00:27:08,460 --> 00:27:14,340
sure that we didn't break dashing when

00:27:11,460 --> 00:27:16,169
people were hacking around we have now

00:27:14,340 --> 00:27:19,950
gets repositories where we could rebuild

00:27:16,169 --> 00:27:25,980
those whole stack from was pretty much

00:27:19,950 --> 00:27:28,830
the goal we wanted to achieve I already

00:27:25,980 --> 00:27:32,869
mentioned this first we had a single

00:27:28,830 --> 00:27:35,429
Jenkins instance docker pull docker push

00:27:32,869 --> 00:27:36,629
builds and they add a second note like

00:27:35,429 --> 00:27:38,669
mm-hmm

00:27:36,629 --> 00:27:43,649
I need something to do this I need to

00:27:38,669 --> 00:27:45,240
have a repository I need to have a way

00:27:43,649 --> 00:27:47,279
to centralized management for my

00:27:45,240 --> 00:27:51,450
container images so that my bills are

00:27:47,279 --> 00:27:56,299
going to be identical and actually this

00:27:51,450 --> 00:27:58,470
slide is our dated back in August 2016

00:27:56,299 --> 00:28:00,090
pulp was read-only it was really good

00:27:58,470 --> 00:28:01,889
from yours I have no clue if they've

00:28:00,090 --> 00:28:03,119
updated functionality because I stopped

00:28:01,889 --> 00:28:05,309
looking

00:28:03,119 --> 00:28:07,440
there was next season artifactory which

00:28:05,309 --> 00:28:10,619
were really big a new Java ecosystem to

00:28:07,440 --> 00:28:13,499
be used there was the upstream docker

00:28:10,619 --> 00:28:16,409
registry which was typically only to be

00:28:13,499 --> 00:28:17,999
used in a container which was really not

00:28:16,409 --> 00:28:19,529
how we wanted to move forward because we

00:28:17,999 --> 00:28:21,149
were learning and we were trying to

00:28:19,529 --> 00:28:22,470
understand how containers work and then

00:28:21,149 --> 00:28:24,570
the first thing you don't want to do is

00:28:22,470 --> 00:28:26,309
actually put a critical part of the

00:28:24,570 --> 00:28:28,110
ecosystem inside the technology you're

00:28:26,309 --> 00:28:31,070
trying to understand because if it

00:28:28,110 --> 00:28:34,320
breaks you have two problems to solve

00:28:31,070 --> 00:28:37,289
but luckily they had also the new docker

00:28:34,320 --> 00:28:39,119
distribution there which had well

00:28:37,289 --> 00:28:41,250
packages which we could deploy and we

00:28:39,119 --> 00:28:43,379
install them eventually we moved away

00:28:41,250 --> 00:28:46,260
from docker distribution we are now

00:28:43,379 --> 00:28:48,810
running mostly Nexus

00:28:46,260 --> 00:28:50,160
for doctored images because it's

00:28:48,810 --> 00:28:52,140
typically in an environment where you

00:28:50,160 --> 00:28:55,010
also use Nexus to middle rubygems where

00:28:52,140 --> 00:28:59,030
he also used Nexus to mirror no GS and

00:28:55,010 --> 00:28:59,030
basically world the rest of the internet

00:29:00,410 --> 00:29:09,840
we had our fair share of docker vs

00:29:05,280 --> 00:29:12,300
docker well the Red Hat community versus

00:29:09,840 --> 00:29:16,650
the docker community well is there such

00:29:12,300 --> 00:29:18,950
thing as a docker community I mean do

00:29:16,650 --> 00:29:21,600
they listen to what your community says

00:29:18,950 --> 00:29:24,750
or do they just blindly start hacking on

00:29:21,600 --> 00:29:29,190
stuff and don't understand your feedback

00:29:24,750 --> 00:29:31,940
loop there was a bunch of changes there

00:29:29,190 --> 00:29:36,390
and then I haven't even talked about

00:29:31,940 --> 00:29:39,000
stability issues because there were

00:29:36,390 --> 00:29:41,790
stability issues the number of file

00:29:39,000 --> 00:29:45,330
system issues we had the number of hey

00:29:41,790 --> 00:29:46,980
why does this disk suddenly full hmm

00:29:45,330 --> 00:29:50,520
there is a sparse Lubeck file which

00:29:46,980 --> 00:29:53,190
nobody mentioned oh it's full let's move

00:29:50,520 --> 00:29:56,430
this to device mapper hmm this is a 10

00:29:53,190 --> 00:29:59,970
parsed provision it's in provisioned LVM

00:29:56,430 --> 00:30:02,280
back-end it's growing like hell I need

00:29:59,970 --> 00:30:03,810
to clean this up every five minutes not

00:30:02,280 --> 00:30:07,350
every day like the documentation says

00:30:03,810 --> 00:30:10,020
and yes it was about a terabyte so it

00:30:07,350 --> 00:30:11,610
was a pretty big one and then still

00:30:10,020 --> 00:30:13,770
containers not starting containers

00:30:11,610 --> 00:30:18,450
crashing containers being in responsible

00:30:13,770 --> 00:30:20,580
and irresponsive it learned us that at

00:30:18,450 --> 00:30:22,950
that moment the technology was

00:30:20,580 --> 00:30:25,980
absolutely not ready to be used in

00:30:22,950 --> 00:30:31,500
production things have evolved it's

00:30:25,980 --> 00:30:33,780
getting slowly better but back then nope

00:30:31,500 --> 00:30:37,950
I think we're slowly getting to a point

00:30:33,780 --> 00:30:40,920
where you can start using it I mean the

00:30:37,950 --> 00:30:44,850
number of times we kill Jenkins slaves

00:30:40,920 --> 00:30:46,940
today is thinking in April we were still

00:30:44,850 --> 00:30:49,500
on a farm with about 20 Jenkins notes

00:30:46,940 --> 00:30:53,160
Jenkins slaves all running docker we

00:30:49,500 --> 00:30:55,470
were pretty much killing the notes at a

00:30:53,160 --> 00:30:57,210
rate of two three per week and killing

00:30:55,470 --> 00:30:59,490
the notes basically it's the cattle

00:30:57,210 --> 00:30:59,789
versus cow effect we just we we stopped

00:30:59,490 --> 00:31:01,559
care

00:30:59,789 --> 00:31:06,809
about debugging it and fixing it we just

00:31:01,559 --> 00:31:08,909
killed a notary professional one but

00:31:06,809 --> 00:31:11,129
it's evolving in their solar container

00:31:08,909 --> 00:31:15,330
solutions popping out there so we solve

00:31:11,129 --> 00:31:17,789
these kind of problems we a built

00:31:15,330 --> 00:31:19,889
environment no complex built know

00:31:17,789 --> 00:31:22,440
writing spec files we have internal

00:31:19,889 --> 00:31:24,659
repositories kind of a Jenkins and

00:31:22,440 --> 00:31:28,350
docker in the gradient and we could do

00:31:24,659 --> 00:31:29,850
this for different other patterns we do

00:31:28,350 --> 00:31:31,190
this for Python we do is actually we do

00:31:29,850 --> 00:31:35,070
this for puppets we do this for

00:31:31,190 --> 00:31:40,349
currently applied in Java PHP no GS and

00:31:35,070 --> 00:31:42,840
a lot of other stacks and we for a

00:31:40,349 --> 00:31:45,720
puppet pipelines for example we now test

00:31:42,840 --> 00:31:47,849
our codes different public versions we

00:31:45,720 --> 00:31:49,470
do the same for PHP we have an isolated

00:31:47,849 --> 00:31:51,509
environment we package the software and

00:31:49,470 --> 00:31:54,509
then we actually run the tests on both

00:31:51,509 --> 00:31:56,460
PHP 5.4 latest and seven and whatever

00:31:54,509 --> 00:31:57,869
the developers want our puppet code or

00:31:56,460 --> 00:32:00,119
our migration strategy for our public

00:31:57,869 --> 00:32:01,499
infrastructure is we like majority of

00:32:00,119 --> 00:32:04,379
people are still in three seven three

00:32:01,499 --> 00:32:07,379
eight we run our test them for we run

00:32:04,379 --> 00:32:09,720
our tests on five and we start working

00:32:07,379 --> 00:32:11,009
towards getting them green but we don't

00:32:09,720 --> 00:32:13,499
use them in production yet then we do

00:32:11,009 --> 00:32:17,309
that for a lot of things but then we end

00:32:13,499 --> 00:32:19,379
up to the next problem how do you build

00:32:17,309 --> 00:32:23,429
the pipeline how do you scale a pipeline

00:32:19,379 --> 00:32:25,049
as a second part of the talk we're doing

00:32:23,429 --> 00:32:31,710
this using pipeline as code we're doing

00:32:25,049 --> 00:32:35,599
this using the Jenkins job diesel and it

00:32:31,710 --> 00:32:38,460
has given us a lot of flexibility

00:32:35,599 --> 00:32:39,299
what we did is set up a development

00:32:38,460 --> 00:32:43,409
jenkins

00:32:39,299 --> 00:32:46,080
that's where people are allowed to just

00:32:43,409 --> 00:32:50,700
hack around they can create manual seed

00:32:46,080 --> 00:32:53,749
jobs they can create manual jobs but

00:32:50,700 --> 00:32:57,889
that's nowhere or code is going to run

00:32:53,749 --> 00:33:00,899
we use the Jenkins job diesel plugin

00:32:57,889 --> 00:33:02,580
because it's for us still the most

00:33:00,899 --> 00:33:04,559
flexible one around we had a couple of

00:33:02,580 --> 00:33:06,840
iterations before we looked at the Jiang

00:33:04,559 --> 00:33:08,820
his job builder from the OpenStack

00:33:06,840 --> 00:33:10,379
community that was a really good story

00:33:08,820 --> 00:33:13,740
but it was really limited to

00:33:10,379 --> 00:33:15,179
functionality you couldn't really well

00:33:13,740 --> 00:33:16,800
you have to ride a lot of the Python

00:33:15,179 --> 00:33:18,929
code yourself to support a bunch of the

00:33:16,800 --> 00:33:21,000
new models the OpenStack community kind

00:33:18,929 --> 00:33:23,190
of abandoned the existing themselves

00:33:21,000 --> 00:33:24,480
before that we I think should Yankee

00:33:23,190 --> 00:33:28,620
ever talk about it like two years ago

00:33:24,480 --> 00:33:31,410
when I was DC or three years ago we

00:33:28,620 --> 00:33:33,390
actually even once template at the XML

00:33:31,410 --> 00:33:36,179
from the Jenkins using pup of the RV's

00:33:33,390 --> 00:33:38,160
and then we started evaluating a number

00:33:36,179 --> 00:33:39,929
of new popping up there's the pipeline

00:33:38,160 --> 00:33:42,929
plug-in were you dropping in Jenkins

00:33:39,929 --> 00:33:46,080
filing the repository and it's groovy

00:33:42,929 --> 00:33:47,700
and you just let a pipeline being

00:33:46,080 --> 00:33:51,690
generate from that but we felt that that

00:33:47,700 --> 00:33:53,490
tool was really too limited for us it is

00:33:51,690 --> 00:33:54,750
it still is what one of the first

00:33:53,490 --> 00:33:56,730
problems we had with it was the

00:33:54,750 --> 00:33:58,920
limitations it had when you started

00:33:56,730 --> 00:34:01,500
using it with multiple stages and you

00:33:58,920 --> 00:34:04,950
had a pulse in a pipeline somewhere that

00:34:01,500 --> 00:34:06,900
pause actually was a running resource so

00:34:04,950 --> 00:34:09,780
if you had a node which could execute a

00:34:06,900 --> 00:34:12,000
jobs and you had seven pipelines in wait

00:34:09,780 --> 00:34:13,619
the eight pipeline in Wade was going to

00:34:12,000 --> 00:34:15,330
basically block your Jenkins even though

00:34:13,619 --> 00:34:18,139
it was doing nothing I mean they fix

00:34:15,330 --> 00:34:22,100
that back then but there was like really

00:34:18,139 --> 00:34:24,330
not the kind of things we wanted to use

00:34:22,100 --> 00:34:26,480
the other thing with the pipeline plugin

00:34:24,330 --> 00:34:29,490
it's really container focused and it

00:34:26,480 --> 00:34:31,169
takes the ID that you always have a

00:34:29,490 --> 00:34:34,440
straight pipeline you go from Def to

00:34:31,169 --> 00:34:37,470
acceptance to production and a lot of

00:34:34,440 --> 00:34:41,100
the use cases we have is I go from Def

00:34:37,470 --> 00:34:44,129
to acceptance and then sadly I live in

00:34:41,100 --> 00:34:45,780
Europe so I have my own software as a

00:34:44,129 --> 00:34:48,179
service platform where I go and that's

00:34:45,780 --> 00:34:50,100
one straight line but I also have for

00:34:48,179 --> 00:34:52,919
on-prem customers who want exactly the

00:34:50,100 --> 00:34:54,510
same codebase but they don't believe in

00:34:52,919 --> 00:34:57,840
continuous delivery yet they want it on

00:34:54,510 --> 00:34:58,950
Prem and I need to take a slight way and

00:34:57,840 --> 00:35:01,530
I'm going to do that at a lower

00:34:58,950 --> 00:35:04,109
frequency or I need that one day one so

00:35:01,530 --> 00:35:06,480
I have pretty much a fork structure

00:35:04,109 --> 00:35:09,030
where my pipeline goes straight and then

00:35:06,480 --> 00:35:11,210
the other ones are lagging behind I've

00:35:09,030 --> 00:35:13,770
gotten all talk about building your

00:35:11,210 --> 00:35:18,600
software as a service tack on trim the

00:35:13,770 --> 00:35:20,190
short summary for that is don't accept

00:35:18,600 --> 00:35:21,990
if you can convince your customer to pay

00:35:20,190 --> 00:35:26,700
ten times the actual charge because then

00:35:21,990 --> 00:35:27,630
you might actually be doing things so we

00:35:26,700 --> 00:35:30,560
ended up

00:35:27,630 --> 00:35:33,050
using the job diesel plug-in which is

00:35:30,560 --> 00:35:34,860
groovy

00:35:33,050 --> 00:35:38,460
I'll come back with some code examples

00:35:34,860 --> 00:35:41,700
later we version all the jobs we put

00:35:38,460 --> 00:35:44,820
them in yet and this is basically a

00:35:41,700 --> 00:35:49,740
pipeline see job that generates the jobs

00:35:44,820 --> 00:35:51,420
you need Jenkins sees a changing it like

00:35:49,740 --> 00:35:53,760
any other package like any other piece

00:35:51,420 --> 00:35:56,970
of software triggers that job that is a

00:35:53,760 --> 00:36:01,320
seed job that see job generates all

00:35:56,970 --> 00:36:03,540
these little jobs in a dashing project

00:36:01,320 --> 00:36:05,220
in a subfolder it actually creates

00:36:03,540 --> 00:36:07,140
dashboard deployed that word test that

00:36:05,220 --> 00:36:09,600
word built the Lord deployed to

00:36:07,140 --> 00:36:10,830
production and all of those things and

00:36:09,600 --> 00:36:12,410
we can do it on different Jenkins

00:36:10,830 --> 00:36:16,650
environments and we can actually say hey

00:36:12,410 --> 00:36:18,300
this now is a stable pipeline I'm gonna

00:36:16,650 --> 00:36:20,040
promote this pipeline I'm gonna use this

00:36:18,300 --> 00:36:23,070
one in production and then people can

00:36:20,040 --> 00:36:24,960
still work on the pipeline but it's not

00:36:23,070 --> 00:36:26,340
gonna break the production built which

00:36:24,960 --> 00:36:29,070
was something we were struggling with

00:36:26,340 --> 00:36:31,470
typically like you got a Jenkins we want

00:36:29,070 --> 00:36:33,720
to change a little part somebody goes to

00:36:31,470 --> 00:36:35,850
you I changed it now the pipeline is

00:36:33,720 --> 00:36:38,450
broken not because of a software but

00:36:35,850 --> 00:36:40,740
because the pipeline has changed we've

00:36:38,450 --> 00:36:44,820
isolated actually the building of the

00:36:40,740 --> 00:36:47,130
pipeline's from using the pipeline's so

00:36:44,820 --> 00:36:49,890
this is what a typical diesel project

00:36:47,130 --> 00:36:53,430
looks like I define a project create a

00:36:49,890 --> 00:36:57,530
folder create a bunch of jobs get a

00:36:53,430 --> 00:37:00,210
build pipeline view then create this I

00:36:57,530 --> 00:37:03,300
fill that up there is typically a bunch

00:37:00,210 --> 00:37:06,210
of parts in there like drop rotation

00:37:03,300 --> 00:37:08,090
source control when you want to build it

00:37:06,210 --> 00:37:10,710
have a label if I want to have it on a

00:37:08,090 --> 00:37:14,220
specific machine with specific specific

00:37:10,710 --> 00:37:16,740
restrictions the actual hard work like

00:37:14,220 --> 00:37:19,170
docker run docker built typically in

00:37:16,740 --> 00:37:21,900
shell files there versioned

00:37:19,170 --> 00:37:24,090
and how we publish them publisher builds

00:37:21,900 --> 00:37:29,010
ri5 the artifact of these kind of things

00:37:24,090 --> 00:37:34,350
so this is an example of a really small

00:37:29,010 --> 00:37:36,810
job keep five builds get no keep five

00:37:34,350 --> 00:37:39,540
builds there this is my source control I

00:37:36,810 --> 00:37:41,130
pull every five minutes needs to run out

00:37:39,540 --> 00:37:44,250
of docker box

00:37:41,130 --> 00:37:47,010
this is the script and then I published

00:37:44,250 --> 00:37:48,890
the build I clone the workspace to the

00:37:47,010 --> 00:37:51,960
next one and I pass on that workspace

00:37:48,890 --> 00:37:54,420
tune the job that as a test if

00:37:51,960 --> 00:37:59,400
successful and I pause on a couple of

00:37:54,420 --> 00:38:04,369
parameters so this is pretty easy code

00:37:59,400 --> 00:38:06,920
right this is if you preferred this

00:38:04,369 --> 00:38:09,390
compared to digging into an XML file or

00:38:06,920 --> 00:38:18,119
actually going to a user interface and

00:38:09,390 --> 00:38:21,000
clicking around I don't ever want to see

00:38:18,119 --> 00:38:25,800
the Jenkins user interface used anymore

00:38:21,000 --> 00:38:30,270
I will the frustration I had with

00:38:25,800 --> 00:38:31,950
Jenkins was a user interface by moving

00:38:30,270 --> 00:38:34,410
to pipeline as code I basically made it

00:38:31,950 --> 00:38:37,410
headless and now really does the work I

00:38:34,410 --> 00:38:39,150
want I see the pipeline output but it's

00:38:37,410 --> 00:38:44,910
reporting it's not actually configuring

00:38:39,150 --> 00:38:48,480
stuff so what we solved was a bunch of

00:38:44,910 --> 00:38:50,220
those things no more I mean in the

00:38:48,480 --> 00:38:51,750
Drupal ecosystem we call those people

00:38:50,220 --> 00:38:57,359
the dirty clickers no more dirty

00:38:51,750 --> 00:38:59,430
clicking actually writing codes problems

00:38:57,359 --> 00:39:01,470
we had before was that we have one job

00:38:59,430 --> 00:39:05,450
that was being reused with different

00:39:01,470 --> 00:39:07,559
parameters like if you have one job

00:39:05,450 --> 00:39:09,750
packaged is and it takes ten different

00:39:07,559 --> 00:39:11,130
inputs and ten different outputs because

00:39:09,750 --> 00:39:14,520
it's really parameter eyes which was

00:39:11,130 --> 00:39:18,059
back then a good ID you run that job ten

00:39:14,520 --> 00:39:19,710
times and the eleventh run basically

00:39:18,059 --> 00:39:22,680
overrides the first one you don't have

00:39:19,710 --> 00:39:24,510
history anymore and the developers were

00:39:22,680 --> 00:39:26,430
like but there's so much stuff going on

00:39:24,510 --> 00:39:28,109
and it's five minutes and all my builds

00:39:26,430 --> 00:39:31,710
are gone because there's ten other jobs

00:39:28,109 --> 00:39:34,799
now we have jobs which are dedicated for

00:39:31,710 --> 00:39:37,170
one project but the content of the job

00:39:34,799 --> 00:39:39,869
was identical and they're centrally

00:39:37,170 --> 00:39:42,660
managed and by using containers we

00:39:39,869 --> 00:39:44,369
solved a lot of these topics like we can

00:39:42,660 --> 00:39:47,790
now have multiple versions we can have

00:39:44,369 --> 00:39:49,559
really reproducible environments we

00:39:47,790 --> 00:39:51,869
don't have to manage the dependencies of

00:39:49,559 --> 00:39:54,540
all those different builds on the file

00:39:51,869 --> 00:39:58,710
system like ages ago we had five

00:39:54,540 --> 00:40:02,160
Jenkins slaves over PHP 504 p2 p1 for

00:39:58,710 --> 00:40:05,670
Python this and we use the nodes tags to

00:40:02,160 --> 00:40:07,050
actually spin up the tests on the rise

00:40:05,670 --> 00:40:11,580
versions now we just do that in

00:40:07,050 --> 00:40:14,990
container and we learned a lot on how to

00:40:11,580 --> 00:40:17,540
manage and how not to manage containers

00:40:14,990 --> 00:40:21,330
and that was for a lot of people

00:40:17,540 --> 00:40:24,690
actually the best part of that project

00:40:21,330 --> 00:40:27,270
because we figured out that at that

00:40:24,690 --> 00:40:30,710
point containers were well containers

00:40:27,270 --> 00:40:32,460
docker was not ready for primetime

00:40:30,710 --> 00:40:34,230
containers with a different story

00:40:32,460 --> 00:40:39,030
because we were using LXE already for a

00:40:34,230 --> 00:40:41,730
couple of our topics so what initially

00:40:39,030 --> 00:40:43,200
was like we need to make dashing

00:40:41,730 --> 00:40:46,080
reproducible and we need to be able to

00:40:43,200 --> 00:40:48,420
build a dashboard that we know that we

00:40:46,080 --> 00:40:50,150
can deploy all the time and where we

00:40:48,420 --> 00:40:52,430
know that developers won't break it

00:40:50,150 --> 00:40:54,930
actually became a real experience on

00:40:52,430 --> 00:40:58,200
teaching operations people how to build

00:40:54,930 --> 00:41:00,810
pipelines with a tool they knew and give

00:40:58,200 --> 00:41:04,950
them experience on how to manage a

00:41:00,810 --> 00:41:08,910
couple of those things so that basically

00:41:04,950 --> 00:41:15,990
was three months well spent over summer

00:41:08,910 --> 00:41:18,200
two years ago any questions are you all

00:41:15,990 --> 00:41:18,200
awake

00:41:20,250 --> 00:41:27,210
[Applause]

00:41:29,660 --> 00:41:36,359
if you have some questions handing the

00:41:34,410 --> 00:41:46,410
microphone to you in the back

00:41:36,359 --> 00:41:48,749
all right hi so today I understand

00:41:46,410 --> 00:41:51,719
correctly you are using pipeline and

00:41:48,749 --> 00:41:58,709
talker but you're not using any of the

00:41:51,719 --> 00:42:00,420
plugins but using a shell code yeah so

00:41:58,709 --> 00:42:08,249
you have to put this experience

00:42:00,420 --> 00:42:10,529
somewhere about 18 to 24 months ago like

00:42:08,249 --> 00:42:15,719
I said most of the plugins for Jenkins

00:42:10,529 --> 00:42:18,539
at that time well they didn't work first

00:42:15,719 --> 00:42:20,489
example was they expected Jenkins to run

00:42:18,539 --> 00:42:22,680
his route because they were talking to

00:42:20,489 --> 00:42:24,410
the docker sockets they didn't have

00:42:22,680 --> 00:42:28,709
support to talk to docker / localhost

00:42:24,410 --> 00:42:30,449
they didn't support the fact that I

00:42:28,709 --> 00:42:33,029
needed to set an environment variable to

00:42:30,449 --> 00:42:35,430
get my docker pull images pulled in so

00:42:33,029 --> 00:42:37,519
the only way back then for us was to use

00:42:35,430 --> 00:42:43,829
a shell script and actually do that I

00:42:37,519 --> 00:42:45,449
mean I things have evolved but I think

00:42:43,829 --> 00:42:48,719
most of the people at that time frame

00:42:45,449 --> 00:42:51,089
were like how do we run anything with

00:42:48,719 --> 00:42:55,019
docker we write a shell script to spin

00:42:51,089 --> 00:42:58,400
it up kind of the same today.when how do

00:42:55,019 --> 00:43:00,900
you tell Jenkins to deploy on cube well

00:42:58,400 --> 00:43:05,219
you write a shell script to import your

00:43:00,900 --> 00:43:07,289
stuff it's kind of the same I wouldn't

00:43:05,219 --> 00:43:09,479
do it today today it would be different

00:43:07,289 --> 00:43:14,269
but back then that was pretty much the

00:43:09,479 --> 00:43:14,269
only solution we had okay thank you

00:43:19,549 --> 00:43:27,119
any other questions in the audience are

00:43:25,349 --> 00:43:29,490
there more things that you would do

00:43:27,119 --> 00:43:35,700
differently to the to this approach

00:43:29,490 --> 00:43:39,839
because it looks like like how you how

00:43:35,700 --> 00:43:42,539
you do it initially but things have

00:43:39,839 --> 00:43:44,099
evolved a bit I think one of the things

00:43:42,539 --> 00:43:45,690
I said we used to have different layers

00:43:44,099 --> 00:43:47,369
on containers like we built one with the

00:43:45,690 --> 00:43:48,960
CentOS image then we built one with Ruby

00:43:47,369 --> 00:43:52,130
then we built on with our VM then we

00:43:48,960 --> 00:43:55,170
built one with dashing and then one with

00:43:52,130 --> 00:43:57,720
the actual application right now it's

00:43:55,170 --> 00:43:58,890
just one small blocker file and we build

00:43:57,720 --> 00:44:03,869
it from there so that's kind of the

00:43:58,890 --> 00:44:06,630
things we learned what we didn't have

00:44:03,869 --> 00:44:08,089
then was we were still pulling in Ruby

00:44:06,630 --> 00:44:11,190
gems from Ruby gems udalryk

00:44:08,089 --> 00:44:12,779
which was some one of the things I

00:44:11,190 --> 00:44:14,759
wanted to fix because I knew that we had

00:44:12,779 --> 00:44:17,069
lightly but we had we had another

00:44:14,759 --> 00:44:18,869
pipeline which was basically packaging

00:44:17,069 --> 00:44:21,779
Ruby gems for us of gems that we were

00:44:18,869 --> 00:44:24,750
depending on in other parts and we

00:44:21,779 --> 00:44:27,150
frequently solved them failing typically

00:44:24,750 --> 00:44:29,940
like the Sunday night when rubygems.org

00:44:27,150 --> 00:44:31,910
was having issues but you know so things

00:44:29,940 --> 00:44:34,650
we added in the meanwhile was having

00:44:31,910 --> 00:44:37,619
Nexus to have our own local ruby gem

00:44:34,650 --> 00:44:39,930
repository we built from that we still

00:44:37,619 --> 00:44:41,220
haven't figured out how to get our VM

00:44:39,930 --> 00:44:44,789
solved because that's still having

00:44:41,220 --> 00:44:47,880
unprotected sex with the Internet we've

00:44:44,789 --> 00:44:49,890
been experimenting with not having a

00:44:47,880 --> 00:44:52,650
Jenkins slave and luck around there but

00:44:49,890 --> 00:44:55,619
trying to leather orchestration

00:44:52,650 --> 00:44:57,029
framework basically say hey build this

00:44:55,619 --> 00:44:59,250
container run and build it somewhere and

00:44:57,029 --> 00:45:01,319
I don't care how but we're still

00:44:59,250 --> 00:45:02,670
struggling between you need to manage

00:45:01,319 --> 00:45:05,910
something you need to imagine manage

00:45:02,670 --> 00:45:08,759
either a swarm of Jenkins slaves or a

00:45:05,910 --> 00:45:10,829
cluster of docker containers and it's

00:45:08,759 --> 00:45:13,589
like which one is gonna be the most

00:45:10,829 --> 00:45:16,740
healthy one people come up and say yeah

00:45:13,589 --> 00:45:17,759
but if you have if you're in resource

00:45:16,740 --> 00:45:20,160
needs you can speed up more docker

00:45:17,759 --> 00:45:21,960
containers it's like yeah but I still

00:45:20,160 --> 00:45:23,670
need to manage the VMS on which the

00:45:21,960 --> 00:45:26,579
containers run so I still need to

00:45:23,670 --> 00:45:28,920
provision a VM with the container except

00:45:26,579 --> 00:45:30,930
of course if you are on Google compute

00:45:28,920 --> 00:45:32,390
or whatever and just you don't care

00:45:30,930 --> 00:45:34,670
about the containers which

00:45:32,390 --> 00:45:36,109
in this corporate environment and in a

00:45:34,670 --> 00:45:39,940
lot of our corporate environments where

00:45:36,109 --> 00:45:49,839
I have to work it's not an option so

00:45:39,940 --> 00:45:52,809
those are things we're evaluating this

00:45:49,839 --> 00:45:55,549
is basically a pattern we abandoned we

00:45:52,809 --> 00:45:58,099
now don't write this specific code

00:45:55,549 --> 00:46:00,650
anymore we don't write the specific jobs

00:45:58,099 --> 00:46:05,180
anymore we build a library where now

00:46:00,650 --> 00:46:08,119
every job is using our library to

00:46:05,180 --> 00:46:10,339
package thing and we this used to be

00:46:08,119 --> 00:46:12,200
spaghetti this used to be the typical

00:46:10,339 --> 00:46:14,480
thing which happens when you start

00:46:12,200 --> 00:46:17,119
writing code like I need to write a

00:46:14,480 --> 00:46:18,680
class that does this and then the guy

00:46:17,119 --> 00:46:21,289
next to you figures that I need to write

00:46:18,680 --> 00:46:22,549
a class does exactly that and at first

00:46:21,289 --> 00:46:24,309
you're experimenting and if you start

00:46:22,549 --> 00:46:28,579
designing this upfront you're like

00:46:24,309 --> 00:46:30,739
you're gonna over design and we took the

00:46:28,579 --> 00:46:32,359
approach I said let's do it hard-coded

00:46:30,739 --> 00:46:34,519
the first time and then figure out which

00:46:32,359 --> 00:46:38,869
patterns we actually have so now we

00:46:34,519 --> 00:46:41,900
basically have a library yeah we have a

00:46:38,869 --> 00:46:45,950
library that the kind of does all of

00:46:41,900 --> 00:46:47,569
these and then the difference so there's

00:46:45,950 --> 00:46:49,549
no dashing anymore there's no specific

00:46:47,569 --> 00:46:52,339
dashing jobs we write anymore but there

00:46:49,549 --> 00:46:55,400
are there are build jobs there upload

00:46:52,339 --> 00:46:57,650
show up there deploy jobs there they're

00:46:55,400 --> 00:47:00,230
there and then the specific dashing one

00:46:57,650 --> 00:47:02,420
it's like the package shop which only

00:47:00,230 --> 00:47:07,940
does that but all the other ones are

00:47:02,420 --> 00:47:09,440
generic so that stuff we improved there

00:47:07,940 --> 00:47:11,890
are other things which we would do

00:47:09,440 --> 00:47:11,890
different

00:47:12,020 --> 00:47:16,670
maybe I'll come up to put some later but

00:47:14,860 --> 00:47:19,580
that's a couple of the things we

00:47:16,670 --> 00:47:21,020
improved in between and well if I'm

00:47:19,580 --> 00:47:22,880
gonna have to start from scratch today I

00:47:21,020 --> 00:47:34,000
probably would not use docker but cRIO

00:47:22,880 --> 00:47:34,000
just to play with it yes more questions

00:47:37,450 --> 00:47:44,480
all right if not then we end the talk

00:47:40,250 --> 00:47:48,520
thank you very much please give a great

00:47:44,480 --> 00:47:48,520

YouTube URL: https://www.youtube.com/watch?v=Y3MFeI84ETU


