Title: OSMC 2018 | Introduction to OpenTracing by Carlos Alberto Cortez
Publication date: 2018-11-19
Playlist: OSMC 2018 | Open Source Monitoring Conference
Description: 
	OpenTracing is an effort to provide a vendor neutral API for distributed tracing, which can be used to trace both applications and OSS packages. Behind it stands the concept of distributed tracing: to measure the performance of application requests spanning many micro services. Using the OpenTracing API, developers can instrument their code without binding to any particular vendor (Jaeger, ZipKin, LightStep, etc). The API supports Span (request) management, inter-process propagation, active Span management, to name a few. Moreover, the specification works on a cross-language basis. This presentation is intended mostly for engineers working on distributed systems, and besides a full introduction to OpenTracing and its architecture, attendants will understand the elements that make up a successful tracing implementation. Finally, a small demo will be shown using to showcase OpenTracing at work using Jaeger, an Open Source tracing system released by Uber.

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

www.musicfox.com
Captions: 
	00:00:01,940 --> 00:00:14,809
[Music]

00:00:12,390 --> 00:00:16,230
[Applause]

00:00:14,809 --> 00:00:18,570
very good

00:00:16,230 --> 00:00:20,130
thank you for coming first of all let me

00:00:18,570 --> 00:00:23,189
tell you that I'm very happy about being

00:00:20,130 --> 00:00:28,170
here I used to study German when I was

00:00:23,189 --> 00:00:30,000
younger so have good memories and this

00:00:28,170 --> 00:00:31,740
time it's double special for me because

00:00:30,000 --> 00:00:33,600
I will be talking about open tracing

00:00:31,740 --> 00:00:35,309
which I have been working on no part of

00:00:33,600 --> 00:00:36,989
the community for a little while and

00:00:35,309 --> 00:00:39,510
this is something I really I really love

00:00:36,989 --> 00:00:43,469
it's close to my heart so I hope I can

00:00:39,510 --> 00:00:46,190
share some of that feeling so the first

00:00:43,469 --> 00:00:50,340
thing is well is distributed tracing

00:00:46,190 --> 00:00:52,710
right because that's the thing so and

00:00:50,340 --> 00:00:54,539
even before that let's talk about

00:00:52,710 --> 00:00:56,309
monitoring you know salvation is

00:00:54,539 --> 00:01:00,239
something very basic that we need to do

00:00:56,309 --> 00:01:03,960
systems we have services computers do

00:01:00,239 --> 00:01:05,489
stuff for us sometimes they have

00:01:03,960 --> 00:01:07,380
problems sometimes they just go too slow

00:01:05,489 --> 00:01:09,450
we want to know you know we always need

00:01:07,380 --> 00:01:12,540
to know everything needs to be working

00:01:09,450 --> 00:01:15,180
fine all the time and in order to be

00:01:12,540 --> 00:01:17,729
able to face these problems with

00:01:15,180 --> 00:01:19,950
computers or services we have a few

00:01:17,729 --> 00:01:21,810
concepts one of them is alerts you know

00:01:19,950 --> 00:01:23,850
which is like you get a notification

00:01:21,810 --> 00:01:26,220
when something stopped working

00:01:23,850 --> 00:01:29,520
you have metrics when you try to get you

00:01:26,220 --> 00:01:32,579
know an aggregated vision of what's

00:01:29,520 --> 00:01:34,560
happening and finally what used to be

00:01:32,579 --> 00:01:37,380
logs right like do what you're trying to

00:01:34,560 --> 00:01:38,880
understand how calls are being made and

00:01:37,380 --> 00:01:42,860
how operations are moving through your

00:01:38,880 --> 00:01:45,689
system however now logs is something

00:01:42,860 --> 00:01:47,159
becoming part of the past because you

00:01:45,689 --> 00:01:49,979
know some time is too hard to

00:01:47,159 --> 00:01:54,540
interpreter to interpret logs and you

00:01:49,979 --> 00:01:57,329
know distort all of them too much

00:01:54,540 --> 00:01:58,619
now it's especially important you know

00:01:57,329 --> 00:02:01,380
to be able to measure what's happening

00:01:58,619 --> 00:02:03,329
in your system because as we are moving

00:02:01,380 --> 00:02:05,880
from monolithic systems to micro

00:02:03,329 --> 00:02:08,849
services you need something much better

00:02:05,880 --> 00:02:12,209
right you need to get a full correct

00:02:08,849 --> 00:02:13,770
view of your of every transaction not

00:02:12,209 --> 00:02:16,920
see every system in the pen

00:02:13,770 --> 00:02:19,170
but you know if your call is touching

00:02:16,920 --> 00:02:22,230
different micro-services you need to see

00:02:19,170 --> 00:02:23,790
how this xpick call you know it's

00:02:22,230 --> 00:02:26,130
aspiring different of them you know

00:02:23,790 --> 00:02:29,430
different micro-services but you know

00:02:26,130 --> 00:02:32,130
how much took for every one of them so

00:02:29,430 --> 00:02:33,810
once you start gluing you know and

00:02:32,130 --> 00:02:35,040
moving stuff around to make sure that

00:02:33,810 --> 00:02:38,340
you get information for the same trace

00:02:35,040 --> 00:02:40,890
you are you know twin tracing and this

00:02:38,340 --> 00:02:42,960
is how it could visually look

00:02:40,890 --> 00:02:44,700
essentially you halocline you have a

00:02:42,960 --> 00:02:46,920
world server and in turn the web server

00:02:44,700 --> 00:02:48,930
is touching a lot of you know what a few

00:02:46,920 --> 00:02:51,210
services here authorization billing

00:02:48,930 --> 00:02:53,400
Access database and this is how it would

00:02:51,210 --> 00:02:55,380
look you have the main you know client

00:02:53,400 --> 00:02:58,260
call which is the top-level operation

00:02:55,380 --> 00:03:00,180
and then in turn this is making a call a

00:02:58,260 --> 00:03:02,280
web server the world server in turn is

00:03:00,180 --> 00:03:04,980
doing other calls and this is how it

00:03:02,280 --> 00:03:08,070
will be able to see that that's the veer

00:03:04,980 --> 00:03:10,920
right in that way you can try to

00:03:08,070 --> 00:03:15,000
understand you know what operations are

00:03:10,920 --> 00:03:18,600
taking you know what part of the entire

00:03:15,000 --> 00:03:21,930
request so that's about it a distributed

00:03:18,600 --> 00:03:24,660
tracing and this is an architectural

00:03:21,930 --> 00:03:27,390
model so you can imagine that you have

00:03:24,660 --> 00:03:29,850
your own service you know whatever your

00:03:27,390 --> 00:03:31,590
call is and then you have a tracing API

00:03:29,850 --> 00:03:33,690
that lets you report you know how

00:03:31,590 --> 00:03:35,070
operations are happening and moving and

00:03:33,690 --> 00:03:38,070
then of course you have your own share

00:03:35,070 --> 00:03:39,900
libraries like spring or flask or you

00:03:38,070 --> 00:03:43,140
know any stuff that you might be using

00:03:39,900 --> 00:03:44,550
most of its time open source and then of

00:03:43,140 --> 00:03:46,800
course you are doing probably some

00:03:44,550 --> 00:03:48,930
remote called most likely you know as

00:03:46,800 --> 00:03:50,490
part of these to not do some service

00:03:48,930 --> 00:03:53,280
that is not yours

00:03:50,490 --> 00:03:54,720
that you don't control and it might even

00:03:53,280 --> 00:03:56,580
be hitting you know what different

00:03:54,720 --> 00:03:59,880
analysis systems before hitting your

00:03:56,580 --> 00:04:02,430
final you know this is like intimate

00:03:59,880 --> 00:04:06,360
intermediate system and then it needs to

00:04:02,430 --> 00:04:07,770
reach your final system one interesting

00:04:06,360 --> 00:04:12,570
well two interesting things about this

00:04:07,770 --> 00:04:14,280
model is that when you are doing calls

00:04:12,570 --> 00:04:16,170
you know from your service to any other

00:04:14,280 --> 00:04:18,870
service units as much as I mentioned to

00:04:16,170 --> 00:04:20,489
propagate the context of the call so

00:04:18,870 --> 00:04:22,530
that's one interesting thing and the

00:04:20,489 --> 00:04:26,030
other one is how do you actually like a

00:04:22,530 --> 00:04:28,040
condense what you have you know after

00:04:26,030 --> 00:04:30,120
four four

00:04:28,040 --> 00:04:32,730
when something has been already

00:04:30,120 --> 00:04:38,040
interpreted you know how to move it to

00:04:32,730 --> 00:04:40,890
your final system so the three big

00:04:38,040 --> 00:04:42,330
pieces are your own application you know

00:04:40,890 --> 00:04:44,700
and your business logic which is

00:04:42,330 --> 00:04:46,550
whatever you control then you have the

00:04:44,700 --> 00:04:51,830
shared libraries loss dimension is like

00:04:46,550 --> 00:04:55,380
spring or Reddy's client or any SQL

00:04:51,830 --> 00:04:57,030
library and then they share services you

00:04:55,380 --> 00:04:59,340
know that you consume you cannot control

00:04:57,030 --> 00:05:03,150
you just are buying time you know to use

00:04:59,340 --> 00:05:05,700
them so that's like how modern systems

00:05:03,150 --> 00:05:07,470
work and now we have let's go back to

00:05:05,700 --> 00:05:11,010
distributed tracing you have four big

00:05:07,470 --> 00:05:12,960
pieces so the dressing API is how can

00:05:11,010 --> 00:05:15,000
you report to any system you don't want

00:05:12,960 --> 00:05:18,270
to get married to any system right but

00:05:15,000 --> 00:05:19,740
you need an API that you can use just to

00:05:18,270 --> 00:05:21,570
say hey I want to make sure this and

00:05:19,740 --> 00:05:23,250
make sure that so that's one of the

00:05:21,570 --> 00:05:24,900
things the second thing is a web

00:05:23,250 --> 00:05:28,440
protocol and this is what I have

00:05:24,900 --> 00:05:30,960
mentioned before how do you try to to

00:05:28,440 --> 00:05:33,840
propagate the context of a very specific

00:05:30,960 --> 00:05:37,020
transaction so that's the web protocol

00:05:33,840 --> 00:05:39,600
and they change format or data exchange

00:05:37,020 --> 00:05:41,730
format it's how do you move all this

00:05:39,600 --> 00:05:43,980
representation the Telegraph of you know

00:05:41,730 --> 00:05:46,710
of every transaction how do you move it

00:05:43,980 --> 00:05:48,810
to your final analysis system and the

00:05:46,710 --> 00:05:50,700
analysis system itself you know which is

00:05:48,810 --> 00:05:53,910
mostly a database that it will be saving

00:05:50,700 --> 00:05:55,350
all your request information and it's

00:05:53,910 --> 00:05:57,840
going to show you most likely and UI

00:05:55,350 --> 00:06:00,060
where you can see you know the traces

00:05:57,840 --> 00:06:01,650
the operations are probably this UI is

00:06:00,060 --> 00:06:05,310
going to try to make some analysis for

00:06:01,650 --> 00:06:06,990
you all right so now that this is this

00:06:05,310 --> 00:06:09,390
was the previous slide was kind of

00:06:06,990 --> 00:06:12,000
abstract now let's go let's talk about

00:06:09,390 --> 00:06:13,500
real stuff so the tracing API this is

00:06:12,000 --> 00:06:15,480
why we're trying to do with open tracing

00:06:13,500 --> 00:06:17,370
we are trying to provide this API that

00:06:15,480 --> 00:06:18,800
is not married to an implementation you

00:06:17,370 --> 00:06:21,920
know you may use different

00:06:18,800 --> 00:06:24,090
implementations and you just you just

00:06:21,920 --> 00:06:26,010
initialize that at the starting time and

00:06:24,090 --> 00:06:28,410
then you stop forgetting about if well

00:06:26,010 --> 00:06:30,990
we are using jagger or sip Keene or any

00:06:28,410 --> 00:06:33,450
other system then the word protocol as I

00:06:30,990 --> 00:06:37,169
mention is how you propagate the

00:06:33,450 --> 00:06:40,320
transaction context so at this moment

00:06:37,169 --> 00:06:41,550
every when every of the analysis systems

00:06:40,320 --> 00:06:43,560
is providing there are

00:06:41,550 --> 00:06:46,290
stuff but there's a Korean therefore by

00:06:43,560 --> 00:06:47,820
the w3c group to standardize this you

00:06:46,290 --> 00:06:51,750
know which could be really nice because

00:06:47,820 --> 00:06:52,320
of course then you get a life is easier

00:06:51,750 --> 00:06:55,560
for everybody

00:06:52,320 --> 00:06:58,740
and it's especially helpful when you are

00:06:55,560 --> 00:07:00,300
trying to sell you know to make when

00:06:58,740 --> 00:07:01,890
you're doing remote calls to systems

00:07:00,300 --> 00:07:05,100
that you don't control especially when

00:07:01,890 --> 00:07:07,590
there are black boxes and then the data

00:07:05,100 --> 00:07:11,010
the data change format doesn't exist yet

00:07:07,590 --> 00:07:13,710
well there's an effort from the w3c

00:07:11,010 --> 00:07:15,660
group but still in the works let's see

00:07:13,710 --> 00:07:17,550
how it goes and then finally at the

00:07:15,660 --> 00:07:20,820
analysis systems I will be talking a

00:07:17,550 --> 00:07:23,040
little bit more about death so this is

00:07:20,820 --> 00:07:23,730
how it good look now I talk more about

00:07:23,040 --> 00:07:25,410
death

00:07:23,730 --> 00:07:27,330
so you have your service the open

00:07:25,410 --> 00:07:29,220
tracing is only the API then you can

00:07:27,330 --> 00:07:31,800
share libraries the good thing about

00:07:29,220 --> 00:07:33,770
share libraries is that since you know

00:07:31,800 --> 00:07:37,050
there just is basically the same code

00:07:33,770 --> 00:07:38,430
sometimes people write instrumentation

00:07:37,050 --> 00:07:41,070
for these libraries so you don't need to

00:07:38,430 --> 00:07:43,680
be writing or connecting hooks you know

00:07:41,070 --> 00:07:46,080
12 ends just go and say hey I want to

00:07:43,680 --> 00:07:48,720
get instrumentation for open tracing for

00:07:46,080 --> 00:07:51,710
for yanghwa or for spring and then it

00:07:48,720 --> 00:07:54,570
will you know will start creating a

00:07:51,710 --> 00:07:56,700
traces out of it and then you of course

00:07:54,570 --> 00:07:59,640
you do have the w3c trace context effort

00:07:56,700 --> 00:08:01,740
then you have some you know you're

00:07:59,640 --> 00:08:03,750
calling some service like spanner s3 and

00:08:01,740 --> 00:08:05,940
then it might be hitting some

00:08:03,750 --> 00:08:07,710
intermediate analysis system like such

00:08:05,940 --> 00:08:10,380
driver with the trace data you know and

00:08:07,710 --> 00:08:12,780
then finally hitting the the final

00:08:10,380 --> 00:08:18,330
analysis system Jagger and like step are

00:08:12,780 --> 00:08:20,970
two of the examples about that okay so

00:08:18,330 --> 00:08:23,100
as I as you saw the earth I like a few

00:08:20,970 --> 00:08:25,560
components of the half I will talk you

00:08:23,100 --> 00:08:27,840
know the core about this is therefore

00:08:25,560 --> 00:08:30,000
that we're trying to to do with open

00:08:27,840 --> 00:08:33,300
tracing the idea is to have an API that

00:08:30,000 --> 00:08:37,320
is not married to any system and the

00:08:33,300 --> 00:08:39,570
idea also is to provide a good

00:08:37,320 --> 00:08:41,970
abstraction so one of the challenges is

00:08:39,570 --> 00:08:44,490
that a lot of systems are using you know

00:08:41,970 --> 00:08:46,920
of this analysis system they have their

00:08:44,490 --> 00:08:50,640
own IP ID our own stuff and the idea is

00:08:46,920 --> 00:08:54,300
how can we provide an API that tries you

00:08:50,640 --> 00:08:55,560
know to get the best you know and do a

00:08:54,300 --> 00:08:58,710
good trade off you know

00:08:55,560 --> 00:09:02,400
the story about that is actually one of

00:08:58,710 --> 00:09:06,360
the founders of the open tracing project

00:09:02,400 --> 00:09:09,180
is he said they one of the creators of

00:09:06,360 --> 00:09:12,900
this Google dapper you know his project

00:09:09,180 --> 00:09:14,910
to try to do tracing and then of course

00:09:12,900 --> 00:09:16,290
after a lot of iterations you know and a

00:09:14,910 --> 00:09:18,360
lot of projects that have been happening

00:09:16,290 --> 00:09:22,980
during all this time open tracing was

00:09:18,360 --> 00:09:24,240
created two years ago and finally one of

00:09:22,980 --> 00:09:25,710
the important things that we are trying

00:09:24,240 --> 00:09:28,710
to do is that we're trying to also

00:09:25,710 --> 00:09:30,420
support different languages you know so

00:09:28,710 --> 00:09:33,660
at the time there's very good support

00:09:30,420 --> 00:09:35,460
for java for go and for python and there

00:09:33,660 --> 00:09:39,960
are efforts like ongoing efforts from

00:09:35,460 --> 00:09:44,040
true v4 for javascript and for c++ so

00:09:39,960 --> 00:09:46,440
that's more or less idea and going back

00:09:44,040 --> 00:09:49,140
to instrument to the instrumentation for

00:09:46,440 --> 00:09:50,850
share libraries as I mentioned the code

00:09:49,140 --> 00:09:52,170
is that code most of the time you can

00:09:50,850 --> 00:09:55,500
just grab an internet you can just go to

00:09:52,170 --> 00:09:58,770
github you know and because of these you

00:09:55,500 --> 00:10:00,720
know it's very easy that people and you

00:09:58,770 --> 00:10:02,100
can just go grab the code and great

00:10:00,720 --> 00:10:03,900
instrumentation you know you can imagine

00:10:02,100 --> 00:10:07,560
that there's a system like SQL alchemy

00:10:03,900 --> 00:10:10,080
you know there's a Oram system for for

00:10:07,560 --> 00:10:11,990
titan so they provide home-cooked when

00:10:10,080 --> 00:10:15,300
you are starting and finishing you know

00:10:11,990 --> 00:10:17,760
at the trisko so you can somebody might

00:10:15,300 --> 00:10:19,770
go there just cried say ok every time an

00:10:17,760 --> 00:10:22,200
operation happens I'm gonna use you know

00:10:19,770 --> 00:10:24,600
be creating this concept about the

00:10:22,200 --> 00:10:28,650
transaction so you just get this part

00:10:24,600 --> 00:10:31,920
and you just it would just works yeah

00:10:28,650 --> 00:10:35,640
that's that's about it for now so the

00:10:31,920 --> 00:10:38,220
great thing about these and is that more

00:10:35,640 --> 00:10:40,350
and more OSS vendors are jumping in you

00:10:38,220 --> 00:10:42,209
know like from different languages to

00:10:40,350 --> 00:10:46,110
different frameworks you can see like

00:10:42,209 --> 00:10:49,110
flask express the angle spring Objective

00:10:46,110 --> 00:10:53,700
C you know and also like bed actual

00:10:49,110 --> 00:10:54,930
vendors like red card or it's done one

00:10:53,700 --> 00:10:57,630
of the interesting things of course is

00:10:54,930 --> 00:10:59,940
as we try we want to try you know to

00:10:57,630 --> 00:11:02,550
make all this instrumentation for

00:10:59,940 --> 00:11:05,580
existing libraries like you know to

00:11:02,550 --> 00:11:08,400
unify a play you know a place to unify

00:11:05,580 --> 00:11:08,600
so you can not go only to Google and try

00:11:08,400 --> 00:11:10,040
to

00:11:08,600 --> 00:11:12,350
you're out like he is in my is my

00:11:10,040 --> 00:11:15,170
framework my library instrumental we're

00:11:12,350 --> 00:11:18,230
just trying to offer this one this is a

00:11:15,170 --> 00:11:20,029
new effort so the idea is that you just

00:11:18,230 --> 00:11:22,660
go there just check the language of your

00:11:20,029 --> 00:11:25,100
choice and your library and try to see

00:11:22,660 --> 00:11:29,449
if there's something already written for

00:11:25,100 --> 00:11:31,579
that so you don't end up regretting it

00:11:29,449 --> 00:11:34,550
finally there's a lot of companies that

00:11:31,579 --> 00:11:37,550
are finding it very useful in production

00:11:34,550 --> 00:11:41,600
these are some of the examples docker

00:11:37,550 --> 00:11:42,889
leaved github samsung and more and more

00:11:41,600 --> 00:11:45,380
you know because of course a lot of

00:11:42,889 --> 00:11:47,269
companies you know micro services like

00:11:45,380 --> 00:11:50,750
what's happening today so it's pretty

00:11:47,269 --> 00:11:54,529
important to know what's happening now

00:11:50,750 --> 00:11:56,720
let's go let's go down to the specific

00:11:54,529 --> 00:11:58,130
how it good Lucas you know the tracing

00:11:56,720 --> 00:12:00,170
because I have I think I have been

00:11:58,130 --> 00:12:02,269
talking a lot about the tracing API but

00:12:00,170 --> 00:12:05,750
now I also would like to talk about how

00:12:02,269 --> 00:12:08,779
it looks you know I mean a conceptual as

00:12:05,750 --> 00:12:10,519
a conceptual thing so essentially you

00:12:08,779 --> 00:12:12,019
have one service which is calling

00:12:10,519 --> 00:12:14,209
another service and maybe that service

00:12:12,019 --> 00:12:16,009
is going another service right so the

00:12:14,209 --> 00:12:18,589
idea is that we have this concept called

00:12:16,009 --> 00:12:21,230
span which represents an operation like

00:12:18,589 --> 00:12:24,649
an HTTP call or a database call or

00:12:21,230 --> 00:12:27,199
anoint no SQL call whatever so and this

00:12:24,649 --> 00:12:29,300
operation is represented by a span then

00:12:27,199 --> 00:12:31,069
this span is going to have a child a

00:12:29,300 --> 00:12:33,649
parent child relationship with the next

00:12:31,069 --> 00:12:35,899
operation that we will have and usually

00:12:33,649 --> 00:12:38,149
when you are doing a network all the way

00:12:35,899 --> 00:12:40,670
to represent the current transaction is

00:12:38,149 --> 00:12:43,430
to respond context which will have the

00:12:40,670 --> 00:12:46,220
the ID of the trace and additional

00:12:43,430 --> 00:12:48,199
information one of the interesting thing

00:12:46,220 --> 00:12:50,389
is that when you have a span you can add

00:12:48,199 --> 00:12:52,490
extra information to every operation you

00:12:50,389 --> 00:12:58,000
know like you can have what we call tags

00:12:52,490 --> 00:13:01,279
which is key key value pairs you will

00:12:58,000 --> 00:13:03,139
see an actual exam point of it and look

00:13:01,279 --> 00:13:06,410
you know when you want to not only

00:13:03,139 --> 00:13:09,110
include a key value pairs but also you

00:13:06,410 --> 00:13:14,300
want to to have timestamp you know so

00:13:09,110 --> 00:13:16,639
you know when exactly they happened this

00:13:14,300 --> 00:13:18,050
is an actual example yet so you see so

00:13:16,639 --> 00:13:19,279
it is a like a span you know in this

00:13:18,050 --> 00:13:21,949
case and operation it would be like

00:13:19,279 --> 00:13:22,460
database query you have so every span a

00:13:21,949 --> 00:13:25,220
semester

00:13:22,460 --> 00:13:27,620
represents one operation that is part of

00:13:25,220 --> 00:13:29,810
an entire transaction so you have a

00:13:27,620 --> 00:13:32,150
start time you have a finish time the

00:13:29,810 --> 00:13:33,800
name is the operation name is going to

00:13:32,150 --> 00:13:36,590
be useful when you do search in order

00:13:33,800 --> 00:13:39,110
try to see what was you know what was

00:13:36,590 --> 00:13:41,180
happening at this time and this is an

00:13:39,110 --> 00:13:44,210
example the tax like for example if you

00:13:41,180 --> 00:13:46,160
are doing a database query Jukka you

00:13:44,210 --> 00:13:49,070
might check you know like what was the

00:13:46,160 --> 00:13:52,220
actual the instance and the statement

00:13:49,070 --> 00:13:54,200
and logs is usually for problems or

00:13:52,220 --> 00:13:56,150
stuff that may have happened and that is

00:13:54,200 --> 00:13:58,340
important not only as a value pair as a

00:13:56,150 --> 00:14:02,450
key value pair sorry but also you want

00:13:58,340 --> 00:14:06,080
to see what time it happened so this can

00:14:02,450 --> 00:14:09,020
be really really useful and now I will

00:14:06,080 --> 00:14:10,760
show you a small well this is basically

00:14:09,020 --> 00:14:12,080
a demo so you don't have to go through

00:14:10,760 --> 00:14:16,480
these things well idea was to represent

00:14:12,080 --> 00:14:19,970
or simulate how it would work a small

00:14:16,480 --> 00:14:22,100
application that is I will show you it's

00:14:19,970 --> 00:14:23,690
probably more interesting if I show you

00:14:22,100 --> 00:14:25,580
what basically does like this we have a

00:14:23,690 --> 00:14:27,380
web client then we have a web server

00:14:25,580 --> 00:14:29,870
which is the backend and then in turn

00:14:27,380 --> 00:14:39,470
this is using other micro services all

00:14:29,870 --> 00:14:42,470
right okay not yet this one second seems

00:14:39,470 --> 00:14:46,550
it kind of froze order you are back to

00:14:42,470 --> 00:14:50,270
life all right so so for this demo I

00:14:46,550 --> 00:14:52,340
will be using this small application you

00:14:50,270 --> 00:14:55,190
can actually grab these I can show the

00:14:52,340 --> 00:14:56,930
URL later that police have walked

00:14:55,190 --> 00:15:00,530
through for the open tracing for the

00:14:56,930 --> 00:15:02,060
Java language so I'm going to start

00:15:00,530 --> 00:15:05,180
running it and I will be using Jagger

00:15:02,060 --> 00:15:07,760
Jagger is an analysis system created at

00:15:05,180 --> 00:15:12,920
over and they are they open sourced it

00:15:07,760 --> 00:15:16,000
some time ago okay so let's wait for it

00:15:12,920 --> 00:15:16,000
to get started

00:15:19,940 --> 00:15:25,790
there you are okay so this is you can

00:15:23,990 --> 00:15:28,910
see like this is a service let me try to

00:15:25,790 --> 00:15:31,640
tell you are perfect alright so you can

00:15:28,910 --> 00:15:34,730
see this is like you know don't need

00:15:31,640 --> 00:15:36,980
service right so in this case this is

00:15:34,730 --> 00:15:38,720
only the the UI and then you have the

00:15:36,980 --> 00:15:43,520
back end and every time you add a donut

00:15:38,720 --> 00:15:45,140
it's another it's a post operation so

00:15:43,520 --> 00:15:47,600
this is like a post operation then

00:15:45,140 --> 00:15:50,690
another one so let's add a few donuts

00:15:47,600 --> 00:15:52,310
and then when you click order it's going

00:15:50,690 --> 00:15:54,410
to make a request with the you know with

00:15:52,310 --> 00:15:57,350
the current cart you know in this case

00:15:54,410 --> 00:15:59,840
like your order and it will be waiting

00:15:57,350 --> 00:16:02,630
you know for for the final fry your

00:15:59,840 --> 00:16:04,340
service to have them ready so you can

00:16:02,630 --> 00:16:06,710
see it is changing the order well it's

00:16:04,340 --> 00:16:08,990
kind of small there but it's like frying

00:16:06,710 --> 00:16:12,440
so it takes a little while now it's done

00:16:08,990 --> 00:16:15,980
and now let's go - lets go - Jagger you

00:16:12,440 --> 00:16:18,020
know this is the UI then of course as

00:16:15,980 --> 00:16:21,200
you can see I here's like the micro

00:16:18,020 --> 00:16:22,640
service called micro donut you know in

00:16:21,200 --> 00:16:24,950
this idea you can have different

00:16:22,640 --> 00:16:26,480
services you know you can check you know

00:16:24,950 --> 00:16:28,280
you know you don't have to see the

00:16:26,480 --> 00:16:33,470
traces for for the entire system you can

00:16:28,280 --> 00:16:35,990
check a subsystem and then ok so we have

00:16:33,470 --> 00:16:37,250
a few prescience here so order span I'm

00:16:35,990 --> 00:16:39,230
going to choose it because that's the

00:16:37,250 --> 00:16:42,230
top-level operation for you know for

00:16:39,230 --> 00:16:43,790
when you are like that represents the

00:16:42,230 --> 00:16:46,160
start when we started choosing some

00:16:43,790 --> 00:16:50,120
donuts - till the end when the order was

00:16:46,160 --> 00:16:53,120
completed so it found one because that

00:16:50,120 --> 00:16:54,170
there was only one order by us and you

00:16:53,120 --> 00:16:55,670
can see this is more or less the

00:16:54,170 --> 00:16:58,130
representation I think it's kind of

00:16:55,670 --> 00:17:00,710
small but essentially they you know the

00:16:58,130 --> 00:17:03,920
one at the top that what represents the

00:17:00,710 --> 00:17:07,400
entire operation then you have one two

00:17:03,920 --> 00:17:09,500
three four five six five five post calls

00:17:07,400 --> 00:17:11,120
you know each one represents you know

00:17:09,500 --> 00:17:13,270
the colony you were at the what's

00:17:11,120 --> 00:17:15,800
happening we are adding the donut and

00:17:13,270 --> 00:17:18,620
finally here is the gate you know when

00:17:15,800 --> 00:17:22,790
it should which happens when we finally

00:17:18,620 --> 00:17:26,480
got the donuts back so interesting thing

00:17:22,790 --> 00:17:28,130
of course is that you can go out here

00:17:26,480 --> 00:17:31,280
and see you know there was additional

00:17:28,130 --> 00:17:33,260
tax of what was happening like what was

00:17:31,280 --> 00:17:35,150
the status code component

00:17:33,260 --> 00:17:37,420
what kind of spine what kind of his

00:17:35,150 --> 00:17:42,250
planet is which can be server or client

00:17:37,420 --> 00:17:46,070
the hostname the port and so on and

00:17:42,250 --> 00:17:47,480
queued the same for example right and of

00:17:46,070 --> 00:17:48,860
course you can also see the you know of

00:17:47,480 --> 00:17:50,840
course you can see the duration or the

00:17:48,860 --> 00:17:52,760
conceptual your you know duration

00:17:50,840 --> 00:17:54,320
because of you know the UI but you can

00:17:52,760 --> 00:17:57,680
see the actual duration here as well the

00:17:54,320 --> 00:17:59,330
start time and so on and that's why it's

00:17:57,680 --> 00:18:01,310
so interesting you know because now in

00:17:59,330 --> 00:18:03,530
the idea is that you are able to see a

00:18:01,310 --> 00:18:05,990
lot of stuff happening you know under

00:18:03,530 --> 00:18:08,630
the hood and the idea of course is and

00:18:05,990 --> 00:18:11,030
in this case I'm doing the demo using

00:18:08,630 --> 00:18:13,490
Jaeger but you don't have to get married

00:18:11,030 --> 00:18:16,670
to any analysis system you can just go

00:18:13,490 --> 00:18:19,310
and use 15 you know that we very well

00:18:16,670 --> 00:18:21,950
known in the observability community or

00:18:19,310 --> 00:18:24,740
light step you know like which is the

00:18:21,950 --> 00:18:27,560
company query work or any and like in

00:18:24,740 --> 00:18:30,080
Stan a data log talk to you because it's

00:18:27,560 --> 00:18:32,600
the same API it's most of the time the

00:18:30,080 --> 00:18:36,080
same instrument if libraries you know so

00:18:32,600 --> 00:18:38,540
that's all it yes so I would say that's

00:18:36,080 --> 00:18:42,020
that's that's about it if somebody's

00:18:38,540 --> 00:18:45,110
interested just let me know after the

00:18:42,020 --> 00:18:47,330
talk I will be happy to to talk more and

00:18:45,110 --> 00:18:51,290
yes so that's it I'm conservative or

00:18:47,330 --> 00:18:53,450
this again and yes just check out if you

00:18:51,290 --> 00:18:55,910
if you're curious about it the open

00:18:53,450 --> 00:18:57,680
tracing dot IO that's the website we

00:18:55,910 --> 00:18:59,600
have some documentation it's an ongoing

00:18:57,680 --> 00:19:02,600
effort the things going well but you

00:18:59,600 --> 00:19:04,490
might be curious about it and if not you

00:19:02,600 --> 00:19:06,800
can just go or also you can go together

00:19:04,490 --> 00:19:08,960
you know we have discussion you have any

00:19:06,800 --> 00:19:11,780
question on beginner intermediate level

00:19:08,960 --> 00:19:13,930
whatever so you'd say that that's about

00:19:11,780 --> 00:19:13,930
it

00:19:17,500 --> 00:19:31,750
thanks Carlos we have any questions no

00:19:25,299 --> 00:19:39,279
questions at the last talk yeah big tank

00:19:31,750 --> 00:19:42,399
idea when you send traces to a a

00:19:39,279 --> 00:19:46,330
receiver is there any concept of

00:19:42,399 --> 00:19:49,029
clustering or a fail-safe receiver so

00:19:46,330 --> 00:19:51,220
that traces won't get lost how do you

00:19:49,029 --> 00:19:54,039
guarantee Oh actually that's an

00:19:51,220 --> 00:19:58,000
interesting thing because every system

00:19:54,039 --> 00:20:03,399
has their fallback idea or approach so

00:19:58,000 --> 00:20:06,490
one of the things is that so what I have

00:20:03,399 --> 00:20:08,950
seen and most recent is that they have a

00:20:06,490 --> 00:20:11,139
very specific I mean I'm one answer what

00:20:08,950 --> 00:20:13,629
I think it is if not you can tell me but

00:20:11,139 --> 00:20:16,840
with specifically the problem is you

00:20:13,629 --> 00:20:19,450
usually are trying to keep a buffer you

00:20:16,840 --> 00:20:21,820
know if you sponge and when there's too

00:20:19,450 --> 00:20:25,179
much you have to get rid of some of them

00:20:21,820 --> 00:20:26,590
so yeah there's no guarantee sadly there

00:20:25,179 --> 00:20:29,740
are some ways that you can work around

00:20:26,590 --> 00:20:32,769
that situation the other one I don't

00:20:29,740 --> 00:20:38,519
know if this is still related it's when

00:20:32,769 --> 00:20:38,519
you have problems with how to call it

00:20:39,450 --> 00:20:50,139
well one of the other situations is that

00:20:43,169 --> 00:20:55,480
we're trying to I'm trying sorry I'm

00:20:50,139 --> 00:20:57,009
trying to sew that and anyway this may

00:20:55,480 --> 00:20:59,769
not be related the other thing is that

00:20:57,009 --> 00:21:01,629
people are trying to sometimes when you

00:20:59,769 --> 00:21:03,549
are when you have too much data to

00:21:01,629 --> 00:21:05,440
sample the calls no actually I think

00:21:03,549 --> 00:21:08,200
that's not related to that now that I

00:21:05,440 --> 00:21:10,450
think of it so anyway so there's no

00:21:08,200 --> 00:21:11,889
failsafe like SuperSave approach we are

00:21:10,450 --> 00:21:16,360
just trying to make your best do not

00:21:11,889 --> 00:21:20,320
lose its balance but it's interesting

00:21:16,360 --> 00:21:22,179
because as I mentioned at the same time

00:21:20,320 --> 00:21:24,100
especially for example Jagger is like

00:21:22,179 --> 00:21:26,200
that they don't take for granted that

00:21:24,100 --> 00:21:28,480
you will get all the traces they are

00:21:26,200 --> 00:21:31,090
just hopeful hoping that you will get

00:21:28,480 --> 00:21:32,410
most of them and that's impart

00:21:31,090 --> 00:21:35,560
that is that they are doing sampling

00:21:32,410 --> 00:21:38,350
because you cannot store sometimes

00:21:35,560 --> 00:21:40,450
everything so sadly there's no guarantee

00:21:38,350 --> 00:21:41,860
for some system so for example in the

00:21:40,450 --> 00:21:44,380
company who like work we don't do

00:21:41,860 --> 00:21:46,840
sampling and where we are like taking

00:21:44,380 --> 00:21:49,980
for granted that all the traces will be

00:21:46,840 --> 00:21:52,540
coming and we have a lot of failsafe or

00:21:49,980 --> 00:21:54,010
trying you know to make sure as much as

00:21:52,540 --> 00:21:55,780
possible that we will not anything we

00:21:54,010 --> 00:21:57,580
will not lose anything but for other

00:21:55,780 --> 00:22:01,180
system like checker or sipping that's

00:21:57,580 --> 00:22:09,970
not even xx I don't know if that's more

00:22:01,180 --> 00:22:15,250
or less what you were asking maybe we

00:22:09,970 --> 00:22:18,940
have another question no okay

00:22:15,250 --> 00:22:24,119
Thank You Carlos thank you

00:22:18,940 --> 00:22:24,119
[Applause]

00:22:25,660 --> 00:22:35,529

YouTube URL: https://www.youtube.com/watch?v=l_C2L1SAWjo


