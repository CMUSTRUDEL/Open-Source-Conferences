Title: OSMC 2018 | Monitor your application performances using InspectIT APM by Alain Lompo
Publication date: 2018-11-19
Playlist: OSMC 2018 | Open Source Monitoring Conference
Description: 
	In correlation with the fast paced technological evolution, software applications have also evolved to become more complex, more distributed and more dynamic. Cloud computing has pushed this evolution a step further. Therefore it is now more difficult to properly monitor application performances and ensure the end user that he will get the high-quality experience he is expecting. Luckily great tools such as InspectIT APM are taking care of the problem efficiently. In this presentation I will introduce you to inspectIt APM and then I will show you how to integrate it to your Spring boot application and how to diagnose, analyse and monitor your application. You will become familiar with the use of inspectIt three main components: the agent, the server and the user interface. You will also learn how to analyse user request from the invocation sequence and detect the root causes of potential problems. You will finally see how easy it is to perform real user monitoring with inspectIt in a production like environment.10

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

www.musicfox.com
Captions: 
	00:00:01,940 --> 00:00:15,949
[Music]

00:00:12,830 --> 00:00:18,930
[Applause]

00:00:15,949 --> 00:00:23,670
thank you very much good morning and

00:00:18,930 --> 00:00:25,710
welcome again very pleased and honored

00:00:23,670 --> 00:00:27,390
to be here today to present this talk

00:00:25,710 --> 00:00:30,929
monitoring your application performance

00:00:27,390 --> 00:00:32,969
using inspected IPM before starting I

00:00:30,929 --> 00:00:35,280
would like to briefly introduce myself

00:00:32,969 --> 00:00:39,120
I'm Allen Poe I'm a software developer

00:00:35,280 --> 00:00:42,239
at silicon technologies AG I develop

00:00:39,120 --> 00:00:44,280
software usually with GE or spring and

00:00:42,239 --> 00:00:46,260
spring boot frameworks on the on the

00:00:44,280 --> 00:00:47,969
backhand side and depending on the

00:00:46,260 --> 00:00:51,000
project on the front-end side we use

00:00:47,969 --> 00:00:52,800
react or angular apps I have also huge

00:00:51,000 --> 00:00:55,289
interest in graphics programming

00:00:52,800 --> 00:00:57,239
I love reading and I love also fishing

00:00:55,289 --> 00:01:00,449
but I don't have my license yet in

00:00:57,239 --> 00:01:02,129
richland so to start with I would like

00:01:00,449 --> 00:01:05,700
to talk about my motivation for this

00:01:02,129 --> 00:01:08,010
talk what bring me to the idea of making

00:01:05,700 --> 00:01:13,740
a talk on application performance

00:01:08,010 --> 00:01:18,720
monitoring with inspected APM in the

00:01:13,740 --> 00:01:22,909
beginning computers were really big and

00:01:18,720 --> 00:01:26,180
software were simple to develop but now

00:01:22,909 --> 00:01:29,340
distance has been inverted and

00:01:26,180 --> 00:01:32,040
software's tend to be bigger and bigger

00:01:29,340 --> 00:01:37,290
while computers are getting smaller and

00:01:32,040 --> 00:01:40,170
smaller and it seems like monitoring

00:01:37,290 --> 00:01:41,579
seems to follow the same trend and the

00:01:40,170 --> 00:01:45,000
question I'm asking myself is it's

00:01:41,579 --> 00:01:48,329
possible to continue to do simple

00:01:45,000 --> 00:01:50,310
monitoring it's really seems like the

00:01:48,329 --> 00:01:53,720
creative spark is racing very very

00:01:50,310 --> 00:01:56,790
rapidly and in all directions so

00:01:53,720 --> 00:01:57,149
monitoring software seems to follow the

00:01:56,790 --> 00:02:03,329
trend

00:01:57,149 --> 00:02:08,369
therefore I looked into inspected APM as

00:02:03,329 --> 00:02:12,180
a rescue option so before diving deeper

00:02:08,369 --> 00:02:13,390
into inspected APM let quickly see what

00:02:12,180 --> 00:02:16,480
we can do with

00:02:13,390 --> 00:02:26,590
a PM with a quick demonstration of how

00:02:16,480 --> 00:02:35,020
it works so the first thing that that I

00:02:26,590 --> 00:02:47,070
will do is I will run the expected a

00:02:35,020 --> 00:02:53,350
p.m. central monitoring repository and

00:02:47,070 --> 00:02:58,500
it's is running in the in the second

00:02:53,350 --> 00:02:58,500
place I will run the user interface and

00:03:01,200 --> 00:03:12,510
in the third place I will be run an

00:03:05,830 --> 00:03:20,290
expected agent along with my application

00:03:12,510 --> 00:03:27,070
to monitor so for that I will go to my

00:03:20,290 --> 00:03:32,950
inspect my application folder and I will

00:03:27,070 --> 00:03:38,769
execute a give a command giving the

00:03:32,950 --> 00:03:46,329
agent as the complete path to the

00:03:38,769 --> 00:03:53,320
inspected agent and then specifying two

00:03:46,329 --> 00:03:56,010
properties the first one give the

00:03:53,320 --> 00:03:56,010
repository

00:03:58,000 --> 00:04:07,000
and the port it's listening on default

00:04:01,870 --> 00:04:13,510
is 90 70 the second will be a suitable

00:04:07,000 --> 00:04:16,680
name for my comp my application under

00:04:13,510 --> 00:04:23,470
monitoring in inspected user interface

00:04:16,680 --> 00:04:29,050
then I use Minister jar and I give the

00:04:23,470 --> 00:04:34,870
name of my application package jar so we

00:04:29,050 --> 00:04:38,169
can see that here the expected agent

00:04:34,870 --> 00:04:41,919
starts to to run we see its main it's

00:04:38,169 --> 00:04:48,370
pre main method starting and running

00:04:41,919 --> 00:04:51,280
completely and then after the agent has

00:04:48,370 --> 00:05:00,490
run we see our pet clinic sample

00:04:51,280 --> 00:05:02,860
application starts - - to run also here

00:05:00,490 --> 00:05:06,220
we are using an embedded Tomcat and it

00:05:02,860 --> 00:05:07,900
will run on the default port the the log

00:05:06,220 --> 00:05:10,300
trace will show it we can see here that

00:05:07,900 --> 00:05:18,250
the applicant application started on

00:05:10,300 --> 00:05:28,330
Tomcat port 8080 so now I can go and

00:05:18,250 --> 00:05:30,160
perform some additional actions - on the

00:05:28,330 --> 00:05:34,060
application in order to provide

00:05:30,160 --> 00:05:38,710
inspected APM with some data on which to

00:05:34,060 --> 00:05:42,130
feed and make the de monitoring so this

00:05:38,710 --> 00:05:44,320
is a classic application used for

00:05:42,130 --> 00:05:45,370
demonstration we have some owners with

00:05:44,320 --> 00:05:47,830
their engine Arians

00:05:45,370 --> 00:05:51,130
I can browse through the list of the

00:05:47,830 --> 00:05:56,320
owners make a few actions maybe edit an

00:05:51,130 --> 00:06:00,460
owner change a name here update the

00:05:56,320 --> 00:06:07,330
informations maybe add a pet for example

00:06:00,460 --> 00:06:11,490
Garfield give a date information make it

00:06:07,330 --> 00:06:17,130
may be wrong to get an error correct

00:06:11,490 --> 00:06:19,710
then and save it

00:06:17,130 --> 00:06:23,280
I can also browse the list of the

00:06:19,710 --> 00:06:25,259
Turanian and we have also error page

00:06:23,280 --> 00:06:29,550
that simulate what happens when we have

00:06:25,259 --> 00:06:31,919
an error so I think we have already

00:06:29,550 --> 00:06:35,280
enough information for a first

00:06:31,919 --> 00:06:39,389
monitoring session I come back to my

00:06:35,280 --> 00:06:42,870
inspected user interface refresh it this

00:06:39,389 --> 00:06:45,539
is my simmer node and look for the pet

00:06:42,870 --> 00:06:50,400
clinic name that I gave in the beginning

00:06:45,539 --> 00:06:53,550
and I can ask inspect it to display the

00:06:50,400 --> 00:06:56,699
list of trace so I can see here the

00:06:53,550 --> 00:07:04,830
traces I will maybe make this a little

00:06:56,699 --> 00:07:12,449
bit bigger and of course I can also

00:07:04,830 --> 00:07:16,349
refresh this list and we can see easily

00:07:12,449 --> 00:07:19,440
by looking at the informations of these

00:07:16,349 --> 00:07:21,990
various traces that we are getting the

00:07:19,440 --> 00:07:24,570
data directly from our application under

00:07:21,990 --> 00:07:28,620
monitoring of course I can go further

00:07:24,570 --> 00:07:34,139
and see more details see exactly where

00:07:28,620 --> 00:07:38,340
the the request is coming from the

00:07:34,139 --> 00:07:42,000
method that have been called and every

00:07:38,340 --> 00:07:45,750
information related to execution time

00:07:42,000 --> 00:07:50,159
and all other type of details and we can

00:07:45,750 --> 00:07:54,389
see on the left on the left panel in the

00:07:50,159 --> 00:07:57,530
data Explorer that we have a list of

00:07:54,389 --> 00:08:00,719
default pre pre configured inspected

00:07:57,530 --> 00:08:03,120
sensors that collects gathered data for

00:08:00,719 --> 00:08:05,759
different types of information that may

00:08:03,120 --> 00:08:10,889
be useful for us for example sequel

00:08:05,759 --> 00:08:16,969
statements or also timing timing data

00:08:10,889 --> 00:08:20,010
Jaime status etc so that was the first

00:08:16,969 --> 00:08:22,940
quick demonstration and I really find it

00:08:20,010 --> 00:08:24,770
interesting that we've expected we can

00:08:22,940 --> 00:08:27,590
quite

00:08:24,770 --> 00:08:29,930
easily and quickly bootstrap an

00:08:27,590 --> 00:08:33,050
application to monitor it with inspected

00:08:29,930 --> 00:08:34,719
ATM and get by default already some

00:08:33,050 --> 00:08:38,570
significant significant and interesting

00:08:34,719 --> 00:08:44,089
data all right then

00:08:38,570 --> 00:08:49,070
now let's let's dive deeper into how to

00:08:44,089 --> 00:08:51,950
set up expected APM before doing that of

00:08:49,070 --> 00:08:55,190
course we just need to talk a little bit

00:08:51,950 --> 00:08:58,130
about the approach using expected ATM

00:08:55,190 --> 00:09:00,170
the in order to monitor our application

00:08:58,130 --> 00:09:02,390
we kind of turn on the light under the

00:09:00,170 --> 00:09:06,890
hood of our application that means we

00:09:02,390 --> 00:09:08,810
use this expected APM agents to to bring

00:09:06,890 --> 00:09:12,730
light to the part of our application

00:09:08,810 --> 00:09:16,190
that as users we don't see directly and

00:09:12,730 --> 00:09:18,140
we use the analysis of the reports as

00:09:16,190 --> 00:09:20,660
well as the automatic problem detection

00:09:18,140 --> 00:09:26,980
possibilities to fingerprint the problem

00:09:20,660 --> 00:09:30,110
and then to get rid of them in this

00:09:26,980 --> 00:09:33,680
slide I'm representing the three main

00:09:30,110 --> 00:09:39,440
components of inspected APM the first

00:09:33,680 --> 00:09:42,410
part is the agent and speaking here

00:09:39,440 --> 00:09:46,399
about agents we are speaking about Java

00:09:42,410 --> 00:09:48,470
agents that we can use inspected as well

00:09:46,399 --> 00:09:51,890
as the browser agents mobile agent

00:09:48,470 --> 00:09:55,850
botnet agent etc and integration that

00:09:51,890 --> 00:09:58,970
aspect it can provide with collect D a

00:09:55,850 --> 00:10:02,510
Java agent like what we have seen in the

00:09:58,970 --> 00:10:04,940
in the example is a special type of java

00:10:02,510 --> 00:10:07,010
application that use the pre main entry

00:10:04,940 --> 00:10:08,959
point instead of a classic Java main and

00:10:07,010 --> 00:10:11,810
three points and it's used to

00:10:08,959 --> 00:10:15,170
instrumentalize our java application by

00:10:11,810 --> 00:10:18,850
by being able to set up some hooks

00:10:15,170 --> 00:10:21,740
directly in the application bytecode and

00:10:18,850 --> 00:10:25,390
provide us with significant and useful

00:10:21,740 --> 00:10:28,640
information the second part is here the

00:10:25,390 --> 00:10:33,079
central server and we can see that it's

00:10:28,640 --> 00:10:35,120
made mainly of two storage component the

00:10:33,079 --> 00:10:38,060
analysis data storage as well as the

00:10:35,120 --> 00:10:38,860
long-term monitoring data base the

00:10:38,060 --> 00:10:41,860
analyst

00:10:38,860 --> 00:10:45,070
data storage is the one used to provide

00:10:41,860 --> 00:10:46,990
information to the analyzes user

00:10:45,070 --> 00:10:49,150
interface that we have been seeing and

00:10:46,990 --> 00:10:53,440
used in the first demonstration rich

00:10:49,150 --> 00:10:57,460
client but an expected APM also provide

00:10:53,440 --> 00:10:59,830
restful services and this data storage

00:10:57,460 --> 00:11:02,550
feed the restful services with the data

00:10:59,830 --> 00:11:04,600
and we can query these informations

00:11:02,550 --> 00:11:08,340
especially when we want to make some

00:11:04,600 --> 00:11:12,990
custom custom tools to make some

00:11:08,340 --> 00:11:12,990
customized monitoring

00:11:13,530 --> 00:11:24,070
display the third part is the user

00:11:20,560 --> 00:11:25,630
interfaces we have we have already seen

00:11:24,070 --> 00:11:28,360
the analyzes user interface the rich

00:11:25,630 --> 00:11:30,160
client but we have also the possibility

00:11:28,360 --> 00:11:32,860
when we are using the long term

00:11:30,160 --> 00:11:36,370
monitoring database to be able also to

00:11:32,860 --> 00:11:39,730
to connect in the inspected APM with

00:11:36,370 --> 00:11:43,090
other monitoring dashboard such as graph

00:11:39,730 --> 00:11:48,370
enough for example if it happens that in

00:11:43,090 --> 00:11:52,300
our in our company we need to use some

00:11:48,370 --> 00:11:55,360
more custom display maybe in our

00:11:52,300 --> 00:11:58,180
intranet we need to displace the reports

00:11:55,360 --> 00:12:00,880
in a specific way we have also the

00:11:58,180 --> 00:12:03,610
possibility using the restful services

00:12:00,880 --> 00:12:05,920
that are exposed to build something a

00:12:03,610 --> 00:12:09,640
custom user interface a custom tool to

00:12:05,920 --> 00:12:14,950
to display this monitoring report in our

00:12:09,640 --> 00:12:20,350
intranet so after that now we can talk

00:12:14,950 --> 00:12:25,690
about how to practically get the

00:12:20,350 --> 00:12:27,910
inspected ATM and install it and run our

00:12:25,690 --> 00:12:29,950
monitoring sessions the first thing of

00:12:27,910 --> 00:12:32,680
course will be to be able to download

00:12:29,950 --> 00:12:35,560
the inspected package we can do that

00:12:32,680 --> 00:12:38,470
directly on the official website from

00:12:35,560 --> 00:12:40,810
from inspected and they also provide a

00:12:38,470 --> 00:12:43,960
github repository where we can download

00:12:40,810 --> 00:12:48,370
the different package for the agent for

00:12:43,960 --> 00:12:50,860
the user interface and and for the CMR

00:12:48,370 --> 00:12:51,970
as a zip package on the github

00:12:50,860 --> 00:12:55,130
repository

00:12:51,970 --> 00:12:57,800
to run the central monitoring repository

00:12:55,130 --> 00:13:00,709
we can do it using a simple java command

00:12:57,800 --> 00:13:04,190
for example Java means job and we run

00:13:00,709 --> 00:13:07,880
the job but in that case there's a small

00:13:04,190 --> 00:13:10,100
risk that our local JV our local JVM may

00:13:07,880 --> 00:13:13,940
not be compatible with the JVM that

00:13:10,100 --> 00:13:18,350
aspect it is using so it's better to use

00:13:13,940 --> 00:13:21,709
the startup script that comes with the

00:13:18,350 --> 00:13:25,130
inspected package to run the the central

00:13:21,709 --> 00:13:27,320
monitoring repository once we have done

00:13:25,130 --> 00:13:30,320
that we can simply run our user

00:13:27,320 --> 00:13:34,820
interface like I have done from my

00:13:30,320 --> 00:13:38,540
desktop and then we need to run our

00:13:34,820 --> 00:13:41,810
application and at the same time inject

00:13:38,540 --> 00:13:43,370
the agent into the application that

00:13:41,810 --> 00:13:46,519
we'll be running so that we do if the

00:13:43,370 --> 00:13:50,329
minos Java agent we give it the path to

00:13:46,519 --> 00:13:53,089
the expected agent and as I've said

00:13:50,329 --> 00:13:56,209
before these two properties are useful

00:13:53,089 --> 00:13:59,360
the first one to to locate the the

00:13:56,209 --> 00:14:03,350
repository and the second one to give a

00:13:59,360 --> 00:14:05,630
suitable name to our application under

00:14:03,350 --> 00:14:07,070
monitoring because we may be in a

00:14:05,630 --> 00:14:08,930
context where maybe we are monitoring

00:14:07,070 --> 00:14:10,490
different application and to be

00:14:08,930 --> 00:14:14,209
interesting to be able to distinguish

00:14:10,490 --> 00:14:20,630
them easily from the the CMR node in the

00:14:14,209 --> 00:14:23,360
data Explorer alright going deeper in

00:14:20,630 --> 00:14:26,149
how inspect it works expected to use

00:14:23,360 --> 00:14:29,750
some sensors to gather the data and

00:14:26,149 --> 00:14:33,020
distance of our instances of agents that

00:14:29,750 --> 00:14:35,449
collects the data in a specific way and

00:14:33,020 --> 00:14:38,390
as we can see here inspect it provides a

00:14:35,449 --> 00:14:40,279
rich variety of sensors such as the

00:14:38,390 --> 00:14:42,440
database and sauce exception sensors

00:14:40,279 --> 00:14:44,600
hearty TPS and sauce and the names are

00:14:42,440 --> 00:14:47,420
are quite explicit we understand from

00:14:44,600 --> 00:14:49,399
the names directly what they are doing

00:14:47,420 --> 00:14:53,720
the invocation sequence is a special

00:14:49,399 --> 00:14:56,839
type of sensor that does not itself do

00:14:53,720 --> 00:14:59,269
directly any action but it gathers the

00:14:56,839 --> 00:15:02,029
other invocations from the other sensors

00:14:59,269 --> 00:15:03,980
in a timely way so that we can at any

00:15:02,029 --> 00:15:05,390
time have a timely sequence of

00:15:03,980 --> 00:15:08,120
invocations that

00:15:05,390 --> 00:15:12,200
been performed in our monitoring session

00:15:08,120 --> 00:15:15,800
and so again talking about these sensors

00:15:12,200 --> 00:15:18,170
we can also categorize them in two to

00:15:15,800 --> 00:15:19,730
two big categories I would say the type

00:15:18,170 --> 00:15:22,340
of sensors that are interested in

00:15:19,730 --> 00:15:25,970
platform events what happens on the

00:15:22,340 --> 00:15:28,520
platform sites such as CPU events or

00:15:25,970 --> 00:15:31,430
memory or maybe hard drive everything

00:15:28,520 --> 00:15:33,650
that is related to our platform and that

00:15:31,430 --> 00:15:36,050
is not directly an event from our

00:15:33,650 --> 00:15:39,050
application and the method sensors are

00:15:36,050 --> 00:15:42,410
sensors that are interested in events

00:15:39,050 --> 00:15:45,740
that takes place in our application that

00:15:42,410 --> 00:15:47,720
is under monitoring and this type of

00:15:45,740 --> 00:15:51,230
sensors creates some some set up some

00:15:47,720 --> 00:15:56,020
hooks on the on lifecycle events from

00:15:51,230 --> 00:15:56,020
our our application under monitoring

00:15:56,290 --> 00:16:01,570
yeah

00:15:58,390 --> 00:16:04,340
another interesting feature that comes

00:16:01,570 --> 00:16:08,780
relatively recently we've inspected APM

00:16:04,340 --> 00:16:13,970
is the ability to to realize some end

00:16:08,780 --> 00:16:16,420
user monitoring that means here that we

00:16:13,970 --> 00:16:19,370
would like to be able to also get

00:16:16,420 --> 00:16:21,410
informations from the client side of the

00:16:19,370 --> 00:16:24,110
web application not only from the

00:16:21,410 --> 00:16:29,170
service side or the backend side that

00:16:24,110 --> 00:16:34,760
way we can we can add in our monitoring

00:16:29,170 --> 00:16:37,250
data significant traces that are related

00:16:34,760 --> 00:16:41,180
to what the end user of the application

00:16:37,250 --> 00:16:43,370
is really experiencing and that gives us

00:16:41,180 --> 00:16:46,820
such information as rendering time in

00:16:43,370 --> 00:16:51,170
the browser loaded resources JavaScript

00:16:46,820 --> 00:16:54,320
execution time attacks method calls etc

00:16:51,170 --> 00:16:56,990
anything that's taking place on the on

00:16:54,320 --> 00:16:59,480
the browser side of course this

00:16:56,990 --> 00:17:01,850
information will be complementary to the

00:16:59,480 --> 00:17:03,770
others information that are coming from

00:17:01,850 --> 00:17:06,199
the server side and this is made

00:17:03,770 --> 00:17:09,110
possible by some extensive extensions of

00:17:06,199 --> 00:17:12,890
the inspected agent to be able to inject

00:17:09,110 --> 00:17:18,470
some required JavaScript code into the

00:17:12,890 --> 00:17:19,010
server's response and for that there are

00:17:18,470 --> 00:17:23,030
mainly

00:17:19,010 --> 00:17:24,890
to api's that provided the matrix these

00:17:23,030 --> 00:17:28,459
are the performance timing API and the

00:17:24,890 --> 00:17:30,890
resource API and they can be available

00:17:28,459 --> 00:17:33,170
via properties values in the browser and

00:17:30,890 --> 00:17:34,700
they should be of course included in the

00:17:33,170 --> 00:17:38,480
instrumentation in order to be able to

00:17:34,700 --> 00:17:40,160
do that and at that moment JavaScript

00:17:38,480 --> 00:17:46,250
functionalities and Ajax calls should

00:17:40,160 --> 00:17:49,100
also be included so then the information

00:17:46,250 --> 00:17:55,940
that are gathered are combined to get a

00:17:49,100 --> 00:18:00,740
more realistic monitoring actions now

00:17:55,940 --> 00:18:08,390
let's see again a little bit deeper how

00:18:00,740 --> 00:18:10,520
to work with inspected APM we analyzed

00:18:08,390 --> 00:18:12,950
the different reports that inspected a

00:18:10,520 --> 00:18:18,380
p.m. provide us and we can also of

00:18:12,950 --> 00:18:23,140
course conduct some automatic problem

00:18:18,380 --> 00:18:27,980
detection so now I will again make I

00:18:23,140 --> 00:18:32,600
will again run a new monitoring session

00:18:27,980 --> 00:18:35,750
I will use another application to to

00:18:32,600 --> 00:18:37,640
make the illustration I need I want to

00:18:35,750 --> 00:18:40,520
be sure that I stopped my previous

00:18:37,640 --> 00:18:45,020
application because I'm using by default

00:18:40,520 --> 00:18:55,670
the same hot ETP port 8080 and I will go

00:18:45,020 --> 00:19:07,100
now to a lab folder here I need to be

00:18:55,670 --> 00:19:09,340
sure that my simmer is running so I run

00:19:07,100 --> 00:19:09,340
it again

00:19:21,550 --> 00:19:30,680
and then here I can use the same comment

00:19:26,390 --> 00:19:39,010
that I used before with the change to

00:19:30,680 --> 00:19:39,010
the name the agent name this name is

00:19:39,460 --> 00:19:49,250
what I see in the data Explorer let me

00:19:43,820 --> 00:19:57,320
call it for example lab 2 and of course

00:19:49,250 --> 00:19:59,030
this application is also different so

00:19:57,320 --> 00:20:02,530
now I'm using an admin starter

00:19:59,030 --> 00:20:06,140
application and it's packaged as a war

00:20:02,530 --> 00:20:09,290
so we can see again that the agent is

00:20:06,140 --> 00:20:11,150
running first we see the traces of what

00:20:09,290 --> 00:20:14,990
happened in the pre men and in the

00:20:11,150 --> 00:20:18,320
female entry points and once the agent

00:20:14,990 --> 00:20:20,150
has finished running it will bootstrap

00:20:18,320 --> 00:20:22,730
the application and the application will

00:20:20,150 --> 00:20:33,010
start to run as a spring spring

00:20:22,730 --> 00:20:37,490
application so yeah we have default

00:20:33,010 --> 00:20:39,680
logging with a lot of information that

00:20:37,490 --> 00:20:46,130
are not maybe very relevant to us right

00:20:39,680 --> 00:20:52,130
now and so this application is also

00:20:46,130 --> 00:20:56,540
accessed directly on port 8080 and here

00:20:52,130 --> 00:21:02,960
I have something with first I need to

00:20:56,540 --> 00:21:07,520
login and then yeah I have an

00:21:02,960 --> 00:21:12,170
application that looks more like cars

00:21:07,520 --> 00:21:15,200
retailer or in a car business I have

00:21:12,170 --> 00:21:17,980
here and it's interesting the table

00:21:15,200 --> 00:21:23,450
that's paginate it so I can just

00:21:17,980 --> 00:21:26,630
generate a few datas by browsing through

00:21:23,450 --> 00:21:32,690
the different page maybe change the size

00:21:26,630 --> 00:21:34,510
of the page I can also maybe update one

00:21:32,690 --> 00:21:38,440
of the model

00:21:34,510 --> 00:21:45,140
test model for example save the action

00:21:38,440 --> 00:21:46,880
go back delete a few more this of course

00:21:45,140 --> 00:21:49,370
I'm doing just to get some data that

00:21:46,880 --> 00:21:54,820
inspected can feed on to generate the

00:21:49,370 --> 00:21:59,120
monitoring actions come back to the home

00:21:54,820 --> 00:22:06,909
go to the layout maybe change something

00:21:59,120 --> 00:22:06,909
in the settings display the list again

00:22:07,120 --> 00:22:15,860
change maybe the team take something

00:22:10,340 --> 00:22:20,210
green here and I think I have already a

00:22:15,860 --> 00:22:25,669
certain amount of datas so now let's go

00:22:20,210 --> 00:22:28,549
back to our inspected user interface the

00:22:25,669 --> 00:22:33,020
rich client I'll refresh the data

00:22:28,549 --> 00:22:37,340
Explorer in the list here I will see the

00:22:33,020 --> 00:22:41,570
new node for lab lab 0 to I will ask

00:22:37,340 --> 00:22:43,460
inspected to display the trace and I

00:22:41,570 --> 00:22:48,970
will replay I will refresh this view and

00:22:43,460 --> 00:22:51,860
as you can see now we have the actual

00:22:48,970 --> 00:22:55,490
information that have been displayed by

00:22:51,860 --> 00:22:57,860
inspected a p.m. so it's quite

00:22:55,490 --> 00:23:03,260
interesting to see how how fast we can

00:22:57,860 --> 00:23:05,960
do that and how relevant the predefined

00:23:03,260 --> 00:23:07,940
configurations are we can here take a

00:23:05,960 --> 00:23:12,289
look for example at the invocation

00:23:07,940 --> 00:23:17,210
sequence I was speaking about and this

00:23:12,289 --> 00:23:19,610
will give you exactly the timely

00:23:17,210 --> 00:23:23,270
sequence in which I have performed the

00:23:19,610 --> 00:23:25,580
different actions on on the application

00:23:23,270 --> 00:23:29,049
of course we can always get to more

00:23:25,580 --> 00:23:32,419
details and in these details we can also

00:23:29,049 --> 00:23:34,669
see in the call hierarchy whether we

00:23:32,419 --> 00:23:37,480
have some sequel instruction that have

00:23:34,669 --> 00:23:39,770
been run which methods were called

00:23:37,480 --> 00:23:43,580
whether we have exception that are

00:23:39,770 --> 00:23:47,260
generated etc etc the possibilities are

00:23:43,580 --> 00:23:47,260
really very interesting

00:23:54,100 --> 00:24:03,080
another interesting feature with

00:23:56,770 --> 00:24:05,900
inspected APM is the use of diagnose it

00:24:03,080 --> 00:24:11,120
for the automatic detection of problem

00:24:05,900 --> 00:24:13,460
and here what we have is a problem

00:24:11,120 --> 00:24:18,740
knowledge database or called here

00:24:13,460 --> 00:24:20,810
problem instance repository where we we

00:24:18,740 --> 00:24:23,300
store the different problems that are

00:24:20,810 --> 00:24:26,810
are known and the new problem that will

00:24:23,300 --> 00:24:29,210
be found when we conduct a monitoring

00:24:26,810 --> 00:24:32,240
session expected ATM generates the

00:24:29,210 --> 00:24:35,030
traces for us and these traces are

00:24:32,240 --> 00:24:37,280
validated against a set of rules that

00:24:35,030 --> 00:24:39,710
are aware of these problems and of

00:24:37,280 --> 00:24:43,940
course when the patterns showed in the

00:24:39,710 --> 00:24:45,680
trace is much the rules the the problem

00:24:43,940 --> 00:24:47,870
will be detected so that's what's going

00:24:45,680 --> 00:24:55,190
on in the in the bra in the background

00:24:47,870 --> 00:24:57,590
of this problem detects automatic

00:24:55,190 --> 00:25:00,260
problem diagnosis the interesting thing

00:24:57,590 --> 00:25:03,050
also is that since inspected one point

00:25:00,260 --> 00:25:05,150
eight the diagnosis services have been

00:25:03,050 --> 00:25:07,520
directly integrated in aspect inspected

00:25:05,150 --> 00:25:16,130
and we can perform automatic performance

00:25:07,520 --> 00:25:18,590
problem detection another interesting

00:25:16,130 --> 00:25:20,210
aspect is the possibility to be able to

00:25:18,590 --> 00:25:22,520
set up some notifications with

00:25:20,210 --> 00:25:24,590
thresholds and that means simply we

00:25:22,520 --> 00:25:29,450
define some thresholds on specific

00:25:24,590 --> 00:25:32,120
measures with on specific fields and of

00:25:29,450 --> 00:25:35,300
course when this measure exceeds the

00:25:32,120 --> 00:25:37,310
value of the threshold the notice the

00:25:35,300 --> 00:25:39,920
notification will be will be triggered

00:25:37,310 --> 00:25:42,380
and that works with the long term data

00:25:39,920 --> 00:25:47,020
persistence and expected alerting

00:25:42,380 --> 00:25:49,220
capacities and I have mentions in a

00:25:47,020 --> 00:25:51,500
formal slide we have also the

00:25:49,220 --> 00:25:54,290
possibility to connect inspected APM

00:25:51,500 --> 00:25:57,140
with other dashboard monitoring user

00:25:54,290 --> 00:25:59,270
interface such as graph on R and that we

00:25:57,140 --> 00:26:00,260
do when we are also using it in

00:25:59,270 --> 00:26:03,200
combination with

00:26:00,260 --> 00:26:07,220
term persistence database to set up the

00:26:03,200 --> 00:26:12,760
web-based user interface and that's what

00:26:07,220 --> 00:26:15,380
we have seen before on this this slide

00:26:12,760 --> 00:26:17,480
the connection between the long-term

00:26:15,380 --> 00:26:19,760
monitoring database and monitoring user

00:26:17,480 --> 00:26:26,690
interface that our web-based user

00:26:19,760 --> 00:26:30,830
interfaces alright and that was a quite

00:26:26,690 --> 00:26:33,350
an interesting tour of inspected APM I

00:26:30,830 --> 00:26:36,290
find it really really interesting that

00:26:33,350 --> 00:26:37,610
we can use it very simply and in an

00:26:36,290 --> 00:26:39,680
efficient way

00:26:37,610 --> 00:26:45,160
even with the default configuration and

00:26:39,680 --> 00:26:49,450
of course we can always go deeper

00:26:45,160 --> 00:26:52,700
customize sensors create new sensors etc

00:26:49,450 --> 00:27:01,250
thank you for your attention and is

00:26:52,700 --> 00:27:03,850
there any question have you inspected

00:27:01,250 --> 00:27:08,540
running in production and how great or

00:27:03,850 --> 00:27:13,630
how big is this environment how how big

00:27:08,540 --> 00:27:19,940
is the production environment Bank farms

00:27:13,630 --> 00:27:27,170
as big as you can imagine I mean NASA

00:27:19,940 --> 00:27:30,710
VMs just like ten fifty hundred yeah I

00:27:27,170 --> 00:27:32,330
would say in in in banking in core

00:27:30,710 --> 00:27:35,510
banking environment

00:27:32,330 --> 00:27:39,200
yeah with with lots of JVM lots of

00:27:35,510 --> 00:27:42,530
traffic's lot lots of database

00:27:39,200 --> 00:27:46,780
activities yeah yeah yeah it's working

00:27:42,530 --> 00:27:46,780
pretty good yeah yeah

00:27:49,130 --> 00:27:55,549
so if you integrate the h and into your

00:27:52,070 --> 00:27:58,669
application how big is the impact on the

00:27:55,549 --> 00:28:03,230
performance of this application does it

00:27:58,669 --> 00:28:10,970
increase the load or yard the behavior

00:28:03,230 --> 00:28:13,820
of the application so it's it's really a

00:28:10,970 --> 00:28:16,250
lightweight fingerprint the fingerprint

00:28:13,820 --> 00:28:22,130
is really light because the way it works

00:28:16,250 --> 00:28:26,390
it's this agent set set up some hooks on

00:28:22,130 --> 00:28:31,789
some on some methods for example you

00:28:26,390 --> 00:28:33,230
have a hook that runs before an

00:28:31,789 --> 00:28:34,760
execution of the method and you have

00:28:33,230 --> 00:28:37,280
other hooks that run after the execution

00:28:34,760 --> 00:28:39,650
of the method so basically the trace is

00:28:37,280 --> 00:28:42,919
really lightweight it's not that that

00:28:39,650 --> 00:28:44,390
heavy because it's what it won't be it

00:28:42,919 --> 00:28:47,179
won't be running in the background all

00:28:44,390 --> 00:28:49,100
the time but it will be listening to the

00:28:47,179 --> 00:28:51,020
to this to the events that happen on

00:28:49,100 --> 00:28:54,650
these methods so only when the method is

00:28:51,020 --> 00:28:55,039
is used is that executed and it's really

00:28:54,650 --> 00:28:59,390
fast

00:28:55,039 --> 00:29:01,820
yeah it's using the basic the it's using

00:28:59,390 --> 00:29:04,700
the java technology for java agent

00:29:01,820 --> 00:29:06,799
development and these data agents have

00:29:04,700 --> 00:29:08,750
been built that way

00:29:06,799 --> 00:29:11,809
so yeah it's using something that's

00:29:08,750 --> 00:29:13,789
standard from Java that's well known and

00:29:11,809 --> 00:29:15,820
has been using being used around for a

00:29:13,789 --> 00:29:19,270
long time and working really good yeah

00:29:15,820 --> 00:29:19,270
thank you you're welcome

00:29:25,669 --> 00:29:33,720
all right okay no more questions okay

00:29:31,620 --> 00:29:35,370
Ben thank you very much for your time

00:29:33,720 --> 00:29:36,910
thank you for listening and I was

00:29:35,370 --> 00:29:40,770
pleased to be here with you

00:29:36,910 --> 00:29:50,640
[Applause]

00:29:40,770 --> 00:29:50,640

YouTube URL: https://www.youtube.com/watch?v=xR1NRqOBovw


