Title: OSMC 2018 | Why we recommend PMM to our clients by Matthias Crauwels
Publication date: 2018-11-20
Playlist: OSMC 2018 | Open Source Monitoring Conference
Description: 
	As service providers, one of our responsibilities is helping clients understand what causes contributed to a production downtime incident, and how to avoid (as much as possible) them from happening again. We do this with Incident Reports, and one common recommendation we make is to have a historical monitoring system in place. All our clients have point-in-time monitoring solutions in place, solutions that can alert them when a system is down or behaving in unacceptable ways. But historical monitoring is still not common, and we believe a lot of companies can benefit from deploying one of them. In most cases, we have recommended Percona Monitoring and Management (PMM), as a good and Open Source solution for this problem. In this session, we will talk about the reasons why we recommend PMM as a way to prevent incidents, and also to investigate their possible causes when one has happened.


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

www.musicfox.com
Captions: 
	00:00:11,130 --> 00:00:21,810
it's it's pity in butts so yeah welcome

00:00:16,779 --> 00:00:21,810
to why we recommend pmm to our clients

00:00:22,000 --> 00:00:29,140
Who am I I am as said before i'm mateus

00:00:25,419 --> 00:00:30,310
growls I live in Ghent in Belgium I have

00:00:29,140 --> 00:00:31,869
a bachelor's degree in computer science

00:00:30,310 --> 00:00:35,350
and I've been a Linux user and

00:00:31,869 --> 00:00:36,970
administrator for about 20 years in my

00:00:35,350 --> 00:00:39,610
professional career I started as a PHP

00:00:36,970 --> 00:00:43,269
developer at the University where I

00:00:39,610 --> 00:00:44,920
studied and from there on I was the

00:00:43,269 --> 00:00:47,320
back-end developer and the one

00:00:44,920 --> 00:00:51,699
responsible for the databases and became

00:00:47,320 --> 00:00:54,190
the MySQL DBA there about a little over

00:00:51,699 --> 00:00:56,229
a year ago I joined Pythian as a MySQL

00:00:54,190 --> 00:00:57,909
database consultant and currently I am

00:00:56,229 --> 00:01:01,089
the lead database consultant on my team

00:00:57,909 --> 00:01:03,549
so I'm responsible for a team of eight

00:01:01,089 --> 00:01:05,920
to ten database consultants giving them

00:01:03,549 --> 00:01:09,010
a technical escalation part and helping

00:01:05,920 --> 00:01:10,990
them with their network I have a boy

00:01:09,010 --> 00:01:14,710
who's five you can see him on the

00:01:10,990 --> 00:01:17,230
picture there one little disclaimer I am

00:01:14,710 --> 00:01:20,710
another regular operations guy I am a

00:01:17,230 --> 00:01:23,610
DBA I'm currently working as a

00:01:20,710 --> 00:01:26,620
consultant but I'm strong believer in

00:01:23,610 --> 00:01:28,840
observability monitoring and knowing

00:01:26,620 --> 00:01:34,150
what's going on in your database in

00:01:28,840 --> 00:01:36,490
order to troubleshoot issues and improve

00:01:34,150 --> 00:01:39,400
performance and so that's why we are

00:01:36,490 --> 00:01:41,140
using PMM and I will tell you a bit

00:01:39,400 --> 00:01:45,400
about it but first a little but our

00:01:41,140 --> 00:01:49,090
company Pythian so we are a data

00:01:45,400 --> 00:01:51,880
oriented company or our logo says love

00:01:49,090 --> 00:01:53,500
your data so we started off about 20

00:01:51,880 --> 00:01:56,670
years ago as an Oracle consulting

00:01:53,500 --> 00:02:00,490
company and then we had a sequel server

00:01:56,670 --> 00:02:04,150
and recently also MySQL other open

00:02:00,490 --> 00:02:06,640
source technologies we do we are working

00:02:04,150 --> 00:02:08,920
in differences of different environments

00:02:06,640 --> 00:02:11,709
so we do operational data assistance

00:02:08,920 --> 00:02:13,840
with analytics we do cloud migration

00:02:11,709 --> 00:02:17,590
operations we have partnerships with all

00:02:13,840 --> 00:02:18,970
the major cloud vendors so yeah so

00:02:17,590 --> 00:02:21,900
agenda for today

00:02:18,970 --> 00:02:25,810
introduction doing that right now

00:02:21,900 --> 00:02:27,370
then first what is P mm what are the

00:02:25,810 --> 00:02:28,930
components and how which architectures

00:02:27,370 --> 00:02:32,050
how do you install it and how do you

00:02:28,930 --> 00:02:34,840
tune it and then why do we recommend

00:02:32,050 --> 00:02:38,980
this why do we use it so let's get

00:02:34,840 --> 00:02:40,540
started so P mm is an acronym for

00:02:38,980 --> 00:02:43,090
pre-owned and monitoring and management

00:02:40,540 --> 00:02:45,220
it's an open-source platform for

00:02:43,090 --> 00:02:49,480
managing and monitoring might as mysql

00:02:45,220 --> 00:02:52,300
and MongoDB performance it's developed

00:02:49,480 --> 00:02:53,830
with by Percona but it's using a lot of

00:02:52,300 --> 00:02:57,480
open source technologies the current

00:02:53,830 --> 00:02:59,770
version when I made these slides is 1.15

00:02:57,480 --> 00:03:01,390
maybe they've released one of 16

00:02:59,770 --> 00:03:06,760
recently they have a conference going on

00:03:01,390 --> 00:03:12,120
right now and in Frankfurt also but yeah

00:03:06,760 --> 00:03:16,270
so the core component for PMM are

00:03:12,120 --> 00:03:17,950
Prometheus and Ravana so they they use

00:03:16,270 --> 00:03:20,470
from issues as their primary data store

00:03:17,950 --> 00:03:23,050
for older times two years data and they

00:03:20,470 --> 00:03:25,270
use Griffin ax for visualization and

00:03:23,050 --> 00:03:28,270
it's also the primary web interface when

00:03:25,270 --> 00:03:30,970
you browse to your pmm installation then

00:03:28,270 --> 00:03:33,400
they have developed their own query

00:03:30,970 --> 00:03:36,640
analytics system call a code quan query

00:03:33,400 --> 00:03:39,370
analytics they collect metrics to

00:03:36,640 --> 00:03:41,380
analyze query performance over time they

00:03:39,370 --> 00:03:44,350
introduced console for service discovery

00:03:41,380 --> 00:03:46,360
and then they have Orchestrator for

00:03:44,350 --> 00:03:50,760
topology management and visualization

00:03:46,360 --> 00:03:53,920
although it's not enabled by default in

00:03:50,760 --> 00:03:56,700
PMM but it's a very useful tool that we

00:03:53,920 --> 00:04:00,640
use very often but usually we use it

00:03:56,700 --> 00:04:05,290
separate from p mm to have more control

00:04:00,640 --> 00:04:07,140
over what it does and how it works then

00:04:05,290 --> 00:04:10,000
you have on the client side and

00:04:07,140 --> 00:04:12,370
obviously the client side is is your

00:04:10,000 --> 00:04:14,580
database server for from a pmm

00:04:12,370 --> 00:04:17,140
perspective that is that is the client

00:04:14,580 --> 00:04:20,500
sending metrics or for which you're

00:04:17,140 --> 00:04:24,310
collecting metrics so you have two two

00:04:20,500 --> 00:04:26,500
types of of exporters currently you have

00:04:24,310 --> 00:04:29,770
po based which is the default I think

00:04:26,500 --> 00:04:32,440
for Prometheus where you have the

00:04:29,770 --> 00:04:34,910
default node exporter that collects

00:04:32,440 --> 00:04:37,250
Linux system metrics and pushes the gate

00:04:34,910 --> 00:04:42,310
they get pulled by the PMM server then

00:04:37,250 --> 00:04:46,310
Percona has updated the mysqld exporter

00:04:42,310 --> 00:04:47,870
for mysql and i know you be metrics this

00:04:46,310 --> 00:04:49,880
is also based on the community edition

00:04:47,870 --> 00:04:53,450
but I think they've they've just forked

00:04:49,880 --> 00:04:55,400
that and added some features I'm not

00:04:53,450 --> 00:04:59,450
sure if they're gonna contribute that

00:04:55,400 --> 00:05:01,400
back but III believe they will they have

00:04:59,450 --> 00:05:03,710
a similar thing for MongoDB so MongoDB

00:05:01,400 --> 00:05:06,230
metrics and they added he created a

00:05:03,710 --> 00:05:09,860
proxy SQL exporter for proxy SQL metrics

00:05:06,230 --> 00:05:11,930
which is very popular MySQL proxy in the

00:05:09,860 --> 00:05:14,860
in the MySQL community these days and

00:05:11,930 --> 00:05:17,990
then you have a number of push based

00:05:14,860 --> 00:05:23,510
metrics especially related to qualm

00:05:17,990 --> 00:05:27,010
where your your agent pushes metrics for

00:05:23,510 --> 00:05:29,960
the statistics to the coin engine so

00:05:27,010 --> 00:05:33,350
this is the the architecture overview

00:05:29,960 --> 00:05:35,060
for pmm so you have the biggest part is

00:05:33,350 --> 00:05:37,790
the metrics monitor where you have

00:05:35,060 --> 00:05:42,050
permission grow fauna which is your your

00:05:37,790 --> 00:05:45,080
primary purpose for for installing pmm

00:05:42,050 --> 00:05:49,100
and parameters just pulls metrics from

00:05:45,080 --> 00:05:51,020
all these exporters and here you have

00:05:49,100 --> 00:05:53,000
the the push exporters for the query

00:05:51,020 --> 00:05:55,360
metrics who push to the Quon database

00:05:53,000 --> 00:05:58,220
and then you still have the kwan

00:05:55,360 --> 00:06:00,410
endpoint in the web interface but in

00:05:58,220 --> 00:06:02,360
recent versions they haven't integrated

00:06:00,410 --> 00:06:02,900
the the dashboard for that integral

00:06:02,360 --> 00:06:06,710
fauna

00:06:02,900 --> 00:06:09,470
and then you have Orchestrator standing

00:06:06,710 --> 00:06:11,990
next to it but as I said that's being

00:06:09,470 --> 00:06:13,640
the disabled by default and then they

00:06:11,990 --> 00:06:18,310
have created a little grow tool called

00:06:13,640 --> 00:06:24,850
pmm admin they use for administrating

00:06:18,310 --> 00:06:24,850
the services monitored by by PMM and so

00:06:25,390 --> 00:06:32,150
this tool will eventually update their

00:06:29,180 --> 00:06:35,870
console service discovery data where you

00:06:32,150 --> 00:06:40,150
can easily the tool provides a useful

00:06:35,870 --> 00:06:43,160
interface for adding new metrics or for

00:06:40,150 --> 00:06:45,800
verifying that everything works and a

00:06:43,160 --> 00:06:48,569
little note here the console endpoint is

00:06:45,800 --> 00:06:51,960
available but it's not recommended

00:06:48,569 --> 00:06:54,689
by the documentation to use that

00:06:51,960 --> 00:06:57,089
directly without the PMMA admin tool

00:06:54,689 --> 00:06:57,619
because they do some other stuff with

00:06:57,089 --> 00:07:03,719
that

00:06:57,619 --> 00:07:05,939
so pmm admin a little sample here a very

00:07:03,719 --> 00:07:07,169
easy command is pmm list where it lists

00:07:05,939 --> 00:07:10,349
all the services that are currently

00:07:07,169 --> 00:07:12,089
monitored so first you can see which the

00:07:10,349 --> 00:07:15,449
addresses for your pmm server how your

00:07:12,089 --> 00:07:17,129
client is cold and how the services are

00:07:15,449 --> 00:07:20,069
managed locally and then you have a list

00:07:17,129 --> 00:07:22,349
of services that are currently active on

00:07:20,069 --> 00:07:24,539
this on this machine so obviously this

00:07:22,349 --> 00:07:26,610
is a MongoDB server so you have the the

00:07:24,539 --> 00:07:29,459
Linux metrics and the MongoDB metrics

00:07:26,610 --> 00:07:32,009
enabled you can see the reports locally

00:07:29,459 --> 00:07:35,309
where they connect from and then you can

00:07:32,009 --> 00:07:38,039
see the data source the default is

00:07:35,309 --> 00:07:40,800
localhost for on the default

00:07:38,039 --> 00:07:44,189
port but for the system metrics it just

00:07:40,800 --> 00:07:47,189
collects metrics on the local system so

00:07:44,189 --> 00:07:50,429
there's no specific data source connect

00:07:47,189 --> 00:07:52,319
it there then a very important check

00:07:50,429 --> 00:07:54,300
here is the check network connectivity

00:07:52,319 --> 00:07:56,459
obviously your PLM server will be

00:07:54,300 --> 00:08:01,139
somewhere on your network and you want

00:07:56,459 --> 00:08:02,849
to know if everything is ok so again

00:08:01,139 --> 00:08:06,329
here it's reports client server client

00:08:02,849 --> 00:08:09,809
the server address and then you have a

00:08:06,329 --> 00:08:11,669
very important thing is called the time

00:08:09,809 --> 00:08:14,369
there because we're collecting

00:08:11,669 --> 00:08:17,430
time-series metrics most likely from

00:08:14,369 --> 00:08:21,419
different systems you would want to have

00:08:17,430 --> 00:08:23,339
your time set properly so the the

00:08:21,419 --> 00:08:26,009
metrics in the graph show up the right

00:08:23,339 --> 00:08:27,629
data at the right time it's not

00:08:26,009 --> 00:08:28,909
important that that everything is

00:08:27,629 --> 00:08:31,579
configured in the same time zone

00:08:28,909 --> 00:08:33,750
that will be taken care of by the server

00:08:31,579 --> 00:08:37,800
but it's important that there's no

00:08:33,750 --> 00:08:39,659
drifts in actual time so there's a check

00:08:37,800 --> 00:08:41,039
here if the server has time dresses the

00:08:39,659 --> 00:08:44,459
client this time drift and if the

00:08:41,039 --> 00:08:46,230
difference is too big so the most common

00:08:44,459 --> 00:08:49,470
example is this view if you're pushing

00:08:46,230 --> 00:08:51,149
metrics and nothing shows up in a graph

00:08:49,470 --> 00:08:52,380
on a dashboard this is what you will

00:08:51,149 --> 00:08:54,779
probably want to look at there's

00:08:52,380 --> 00:09:00,630
probably some time drift causing the

00:08:54,779 --> 00:09:02,460
data to be dropped by the server then

00:09:00,630 --> 00:09:05,820
the next part of the

00:09:02,460 --> 00:09:08,250
network output is connectivity from your

00:09:05,820 --> 00:09:11,550
client to the PMM server so the client

00:09:08,250 --> 00:09:15,120
still is your database server here so

00:09:11,550 --> 00:09:17,670
this pushes this is the ability to push

00:09:15,120 --> 00:09:19,770
data to the server so it checks

00:09:17,670 --> 00:09:22,230
connectivity the console API promises

00:09:19,770 --> 00:09:28,170
API and the Kuan API and it gives you

00:09:22,230 --> 00:09:30,780
some time consuming data to see how good

00:09:28,170 --> 00:09:33,930
your network connectivity is to the to

00:09:30,780 --> 00:09:37,080
the server and then the last part of the

00:09:33,930 --> 00:09:42,030
check network is if the server can

00:09:37,080 --> 00:09:43,500
connect back to your client so you have

00:09:42,030 --> 00:09:45,750
for the Linux metrics you have a port

00:09:43,500 --> 00:09:46,920
open and it needs to be able to the

00:09:45,750 --> 00:09:49,650
servants should be able to connect to

00:09:46,920 --> 00:09:52,710
that port it's using HTTP and TLS by

00:09:49,650 --> 00:09:54,750
default and there's usually a password

00:09:52,710 --> 00:09:57,480
configured in this case there isn't this

00:09:54,750 --> 00:09:59,790
was just a test machine and a test

00:09:57,480 --> 00:10:03,240
output but usually you will have a

00:09:59,790 --> 00:10:05,280
password configured and the MongoDB

00:10:03,240 --> 00:10:08,490
metrics here shows the problem so

00:10:05,280 --> 00:10:11,220
probably the collector cannot connect to

00:10:08,490 --> 00:10:12,330
the server for some reason so this

00:10:11,220 --> 00:10:16,830
is something that will need to be

00:10:12,330 --> 00:10:19,950
troubleshooted then we move to

00:10:16,830 --> 00:10:22,830
installing PRM server there's three

00:10:19,950 --> 00:10:25,500
major distribution methods available so

00:10:22,830 --> 00:10:27,480
there's a docker image there's a OVA

00:10:25,500 --> 00:10:29,130
package which virtual appliance if you

00:10:27,480 --> 00:10:31,980
have a virtualization environment you

00:10:29,130 --> 00:10:35,490
can just run that one and then there's

00:10:31,980 --> 00:10:36,330
an ad about marketplace there's an image

00:10:35,490 --> 00:10:39,930
available name

00:10:36,330 --> 00:10:42,030
ami available where you can if you every

00:10:39,930 --> 00:10:43,920
obviously if you're running in AWS

00:10:42,030 --> 00:10:47,310
that's that's where you want to go it

00:10:43,920 --> 00:10:48,990
just sets up everything for you in my

00:10:47,310 --> 00:10:51,630
experience the docker approach is the

00:10:48,990 --> 00:10:54,240
most popular approach especially with

00:10:51,630 --> 00:10:56,490
our clients usually they want to have

00:10:54,240 --> 00:10:58,440
PMM on Prem on their own data center

00:10:56,490 --> 00:11:00,210
because they have to expose some ports

00:10:58,440 --> 00:11:01,740
to their database server and they

00:11:00,210 --> 00:11:08,550
usually want don't want that over the

00:11:01,740 --> 00:11:11,220
internet so they they they just provide

00:11:08,550 --> 00:11:14,620
provision us with a docker server and we

00:11:11,220 --> 00:11:16,810
can install pmf server there

00:11:14,620 --> 00:11:18,940
for installing PRM server it's

00:11:16,810 --> 00:11:20,560
recommended to have four different data

00:11:18,940 --> 00:11:22,600
volumes so you have your permissions

00:11:20,560 --> 00:11:24,850
data which is obviously your the biggest

00:11:22,600 --> 00:11:27,910
one so that's where all the time series

00:11:24,850 --> 00:11:30,490
will be stored you have the console data

00:11:27,910 --> 00:11:34,870
for your service discovery that's a very

00:11:30,490 --> 00:11:36,970
very small data store but for backup

00:11:34,870 --> 00:11:39,790
purposes it's it's useful it's useful to

00:11:36,970 --> 00:11:43,300
have a different volume for there then

00:11:39,790 --> 00:11:45,910
there's a small MySQL instance included

00:11:43,300 --> 00:11:48,760
in pmm so there's a data directory

00:11:45,910 --> 00:11:50,050
obviously and then for graphing are you

00:11:48,760 --> 00:11:51,820
also have a data directory where the

00:11:50,050 --> 00:11:54,970
dashboards and everything for Griffin

00:11:51,820 --> 00:11:57,340
will be stored at the first run of the

00:11:54,970 --> 00:11:58,480
docker container pmm will initialize all

00:11:57,340 --> 00:12:01,390
the data directories and set the

00:11:58,480 --> 00:12:05,740
privileges right at this time so if

00:12:01,390 --> 00:12:09,190
you're trying to create the volume

00:12:05,740 --> 00:12:11,770
mappings at the first run probably your

00:12:09,190 --> 00:12:13,300
your installation will fail so it's

00:12:11,770 --> 00:12:16,150
recommended to run the first time

00:12:13,300 --> 00:12:17,590
without the volume mappings then stop

00:12:16,150 --> 00:12:19,300
the container and move the data into the

00:12:17,590 --> 00:12:20,340
appropriate volumes and then start the

00:12:19,300 --> 00:12:22,780
container again

00:12:20,340 --> 00:12:24,970
that's the little workaround that we've

00:12:22,780 --> 00:12:27,130
been using I know that someone is

00:12:24,970 --> 00:12:30,250
working on getting that fixed but I'm

00:12:27,130 --> 00:12:33,700
not sure how far along they are with

00:12:30,250 --> 00:12:37,360
that so then obviously you might want to

00:12:33,700 --> 00:12:39,460
tune your pmm server because docker by

00:12:37,360 --> 00:12:42,640
default allows you to access as much

00:12:39,460 --> 00:12:45,220
memory as there is available and if you

00:12:42,640 --> 00:12:47,680
run multiple containers on the same

00:12:45,220 --> 00:12:49,710
docker server that's not always what you

00:12:47,680 --> 00:12:49,710
want

00:12:50,550 --> 00:12:58,360
so for docker you can at the - - memory

00:12:54,310 --> 00:13:00,670
and then a number of gigabytes parameter

00:12:58,360 --> 00:13:02,620
so then the container will only use that

00:13:00,670 --> 00:13:04,840
much memory and also by default

00:13:02,620 --> 00:13:08,080
permissions will allocate all the memory

00:13:04,840 --> 00:13:13,270
available which is also not the best

00:13:08,080 --> 00:13:16,630
idea ever so you can also limit this by

00:13:13,270 --> 00:13:21,190
setting the matrix memory this doesn't

00:13:16,630 --> 00:13:23,710
allow specifying the doogee notation so

00:13:21,190 --> 00:13:26,530
you have to calculate I believe this

00:13:23,710 --> 00:13:28,110
that will be megabytes how much memory

00:13:26,530 --> 00:13:31,960
you want for that

00:13:28,110 --> 00:13:33,760
then by default permission storage the

00:13:31,960 --> 00:13:35,830
time series data for 30 days and Quan

00:13:33,760 --> 00:13:40,570
for 8 days if you want to change that

00:13:35,830 --> 00:13:43,450
you have to give an environment variable

00:13:40,570 --> 00:13:46,720
in the number of hours you want to read

00:13:43,450 --> 00:13:49,420
half retention for your data and then

00:13:46,720 --> 00:13:54,100
the default is also to have one second

00:13:49,420 --> 00:13:55,990
sample rate for your metrics you can

00:13:54,100 --> 00:13:58,210
change that by setting to five seconds

00:13:55,990 --> 00:14:00,760
in this case that will significantly

00:13:58,210 --> 00:14:03,840
reduce your storage footprint but that

00:14:00,760 --> 00:14:07,000
will also reduce the observability and

00:14:03,840 --> 00:14:09,550
it will flatten out a lot of the of the

00:14:07,000 --> 00:14:14,080
issues that that you will be a

00:14:09,550 --> 00:14:15,970
troubleshooting using PMM so I would I

00:14:14,080 --> 00:14:20,410
would not recommend doing this I would

00:14:15,970 --> 00:14:23,920
keep that at one second and maybe lower

00:14:20,410 --> 00:14:28,540
the retention value or expand the value

00:14:23,920 --> 00:14:33,610
the volume but one second sample rate is

00:14:28,540 --> 00:14:42,490
a very useful so this brings us to why

00:14:33,610 --> 00:14:44,380
PMM in a lot of cases we get called in

00:14:42,490 --> 00:14:48,100
by our clients like we have a problem

00:14:44,380 --> 00:14:53,500
right now and we don't know how to solve

00:14:48,100 --> 00:14:55,270
it so if we have visualization of the

00:14:53,500 --> 00:14:57,670
metrics what's going on inside today

00:14:55,270 --> 00:15:00,670
that's a database we will be able to

00:14:57,670 --> 00:15:02,350
respond much better because they say we

00:15:00,670 --> 00:15:03,910
have rolled right now but right now it's

00:15:02,350 --> 00:15:06,880
usually five minutes ago

00:15:03,910 --> 00:15:12,400
and so yeah what was going on what was

00:15:06,880 --> 00:15:14,580
running how do we figure out where we

00:15:12,400 --> 00:15:17,190
need to start looking so having

00:15:14,580 --> 00:15:22,350
visualization and historical monitoring

00:15:17,190 --> 00:15:24,930
it's very useful so pmm has a lot of

00:15:22,350 --> 00:15:28,120
built-in dashboard from MySQL a MongoDB

00:15:24,930 --> 00:15:30,970
where they have collected all the

00:15:28,120 --> 00:15:33,760
metrics for I know DB and for MySQL for

00:15:30,970 --> 00:15:36,850
MongoDB they graph them out they put

00:15:33,760 --> 00:15:40,570
them together so they're useful and so

00:15:36,850 --> 00:15:41,950
we can easily identify issues that

00:15:40,570 --> 00:15:49,060
that's where have

00:15:41,950 --> 00:15:51,970
inside the the MySQL server then another

00:15:49,060 --> 00:15:53,320
thing it's open source there's a lot of

00:15:51,970 --> 00:15:55,480
commercial tools available that can

00:15:53,320 --> 00:15:57,310
offer similar kinds of monitoring

00:15:55,480 --> 00:15:57,880
solutions usually that software

00:15:57,310 --> 00:16:00,970
as-a-service

00:15:57,880 --> 00:16:03,250
the previous speakers this they talked

00:16:00,970 --> 00:16:06,340
about data doc New Relic has some

00:16:03,250 --> 00:16:08,500
database plugins

00:16:06,340 --> 00:16:11,890
there's fifth cortex there's a lot of

00:16:08,500 --> 00:16:14,230
great tools but in a lot of cases they

00:16:11,890 --> 00:16:16,930
are pretty expensive they are mostly

00:16:14,230 --> 00:16:19,000
paper server solutions and so you have

00:16:16,930 --> 00:16:23,050
if you have 500 servers that bill can be

00:16:19,000 --> 00:16:26,830
quite high so in the in this case you

00:16:23,050 --> 00:16:30,190
just need a big server for monitoring

00:16:26,830 --> 00:16:33,310
500 service but in the end that will be

00:16:30,190 --> 00:16:36,520
cheaper than buying you a subscription

00:16:33,310 --> 00:16:37,960
to one of those vendors in a lot of

00:16:36,520 --> 00:16:40,690
those cases your data is shipped

00:16:37,960 --> 00:16:42,250
off-site and a lot of people and

00:16:40,690 --> 00:16:44,860
companies don't want that they want

00:16:42,250 --> 00:16:47,620
their data on-premise so pmm supports

00:16:44,860 --> 00:16:48,910
that and it's also depending on your

00:16:47,620 --> 00:16:53,020
internet uplink from your back-end

00:16:48,910 --> 00:16:55,900
servers since were monitoring database

00:16:53,020 --> 00:16:57,250
servers they are usually not so exposed

00:16:55,900 --> 00:17:00,010
to the internet or not have the best

00:16:57,250 --> 00:17:01,960
internet connectivity because obviously

00:17:00,010 --> 00:17:03,270
your web servers will be have a good

00:17:01,960 --> 00:17:06,040
connectivity because they serve your

00:17:03,270 --> 00:17:07,750
website traffic but the database servers

00:17:06,040 --> 00:17:09,550
will be on the back end and will most

00:17:07,750 --> 00:17:12,339
likely not be exposed to the Internet

00:17:09,550 --> 00:17:15,280
so if you have commercial software as a

00:17:12,339 --> 00:17:16,690
service solution you will have need to

00:17:15,280 --> 00:17:18,640
have an uplink from your back-end

00:17:16,690 --> 00:17:22,690
servers that is strong enough to support

00:17:18,640 --> 00:17:25,089
all those metrics being sent out and in

00:17:22,690 --> 00:17:28,240
the end those solutions are usually not

00:17:25,089 --> 00:17:31,300
so customizable all those things can be

00:17:28,240 --> 00:17:34,030
resolved by pmm because pmm runs inside

00:17:31,300 --> 00:17:36,910
your own datacenter and so it has your

00:17:34,030 --> 00:17:39,850
your local backbone as the the link to

00:17:36,910 --> 00:17:41,620
it you can easily customize that it's a

00:17:39,850 --> 00:17:44,200
group I might see from easiest all the

00:17:41,620 --> 00:17:47,860
components that these these tools offer

00:17:44,200 --> 00:17:52,890
are there so you can use them and you

00:17:47,860 --> 00:17:55,690
can customize them then again security

00:17:52,890 --> 00:17:59,590
pmm runs inside our network

00:17:55,690 --> 00:18:02,110
so that's a big advantage there's a cell

00:17:59,590 --> 00:18:04,660
communication by default between the

00:18:02,110 --> 00:18:09,700
client and the server it's a doctor or

00:18:04,660 --> 00:18:11,890
an appliance so you can easily set it up

00:18:09,700 --> 00:18:15,580
using existing infrastructure if the

00:18:11,890 --> 00:18:17,380
client has a virtualization environment

00:18:15,580 --> 00:18:19,150
you can just drop in the appliance if

00:18:17,380 --> 00:18:20,920
they want to supply you with the darker

00:18:19,150 --> 00:18:23,910
server you can just run the docker

00:18:20,920 --> 00:18:28,560
container there's HTTP authentication

00:18:23,910 --> 00:18:31,140
included by default obviously the the

00:18:28,560 --> 00:18:33,160
examples I showed before did not

00:18:31,140 --> 00:18:36,460
authenticate but that was just a test

00:18:33,160 --> 00:18:40,710
server on my local laptop and you can do

00:18:36,460 --> 00:18:45,340
a completely custom setup to your needs

00:18:40,710 --> 00:18:50,500
it's flexible there's multiple options

00:18:45,340 --> 00:18:54,790
available you can you can set you can

00:18:50,500 --> 00:18:58,270
choose local appliance docker the PMM

00:18:54,790 --> 00:19:02,620
client packages are available as for

00:18:58,270 --> 00:19:04,540
each major operating system distribution

00:19:02,620 --> 00:19:07,390
so there's Depok adjusted RPM packages

00:19:04,540 --> 00:19:09,970
you can download the source code you can

00:19:07,390 --> 00:19:11,440
add custom - watch if you want so

00:19:09,970 --> 00:19:14,230
there's a number of predefined

00:19:11,440 --> 00:19:16,690
dashboards that will allow you to

00:19:14,230 --> 00:19:18,220
troubleshoot but if you say like we have

00:19:16,690 --> 00:19:21,250
some extra metrics that we want to push

00:19:18,220 --> 00:19:25,840
- to do Prometheus there you can easily

00:19:21,250 --> 00:19:27,760
create an extra dashboard or we realign

00:19:25,840 --> 00:19:30,040
some some graphs so you can you can

00:19:27,760 --> 00:19:32,200
troubleshoot more easily and you can

00:19:30,040 --> 00:19:34,300
also monitor other services because it's

00:19:32,200 --> 00:19:36,760
just a promise that it's running there

00:19:34,300 --> 00:19:38,920
with the graph on line in front so if

00:19:36,760 --> 00:19:40,780
you if you say like hey I have this

00:19:38,920 --> 00:19:46,060
application and I want to push a metric

00:19:40,780 --> 00:19:48,400
there it's all possible next reason why

00:19:46,060 --> 00:19:52,090
we recommend it it's extremely easy to

00:19:48,400 --> 00:19:53,800
setup I think within 10 to 15 minutes

00:19:52,090 --> 00:19:58,090
you can have here for me your pmm

00:19:53,800 --> 00:19:59,860
running everything is pre-configured the

00:19:58,090 --> 00:20:03,370
griffon i will automatically connect to

00:19:59,860 --> 00:20:06,400
prometheus if you use a check network

00:20:03,370 --> 00:20:08,680
command you will directly see if all the

00:20:06,400 --> 00:20:09,460
communication is working so you just set

00:20:08,680 --> 00:20:13,299
up your

00:20:09,460 --> 00:20:18,460
your collectors and your your starlets

00:20:13,299 --> 00:20:19,120
and then since Griffin at four there's

00:20:18,460 --> 00:20:22,260
alerting

00:20:19,120 --> 00:20:25,149
so since Griffin is a core component and

00:20:22,260 --> 00:20:27,100
pmn has all the metrics you want you

00:20:25,149 --> 00:20:28,630
just define your thresholds and you push

00:20:27,100 --> 00:20:32,380
out the alerts from Griffin you don't

00:20:28,630 --> 00:20:35,649
need any other alerting tool no more so

00:20:32,380 --> 00:20:37,450
that's also a big advantage for us where

00:20:35,649 --> 00:20:38,950
some of our clients did not have

00:20:37,450 --> 00:20:42,549
monitoring to the database at all before

00:20:38,950 --> 00:20:44,830
so we just add one pmm container it

00:20:42,549 --> 00:20:46,870
provides observability to the database

00:20:44,830 --> 00:20:49,510
and you can push out all the alerts that

00:20:46,870 --> 00:20:53,110
are required to just put a paging

00:20:49,510 --> 00:21:04,899
service behind it and you're off of the

00:20:53,110 --> 00:21:07,840
go so any questions how about when it's

00:21:04,899 --> 00:21:12,210
going to high ability or scalability

00:21:07,840 --> 00:21:16,390
how's it done is it possible with PMM at

00:21:12,210 --> 00:21:20,190
yes you can we set it up for a client

00:21:16,390 --> 00:21:22,510
using kubernetes so we have multiple

00:21:20,190 --> 00:21:24,580
multiple servers available in our

00:21:22,510 --> 00:21:26,980
kubernetes cluster and so the path just

00:21:24,580 --> 00:21:28,360
moves to the other nodes with the

00:21:26,980 --> 00:21:32,340
network file system attached for the

00:21:28,360 --> 00:21:36,039
data like all the other talker

00:21:32,340 --> 00:21:38,260
orientated yep all the sucker high

00:21:36,039 --> 00:21:43,140
availability stacks can work here right

00:21:38,260 --> 00:21:48,419
good and a second one is their license

00:21:43,140 --> 00:21:52,360
policy as far as I know which all GPL

00:21:48,419 --> 00:21:54,970
it's all CP also I can use it as often

00:21:52,360 --> 00:21:57,250
as I want yeah yeah there's no nothing

00:21:54,970 --> 00:21:59,740
like the Maria DB business license there

00:21:57,250 --> 00:22:02,470
it's just open source you can just

00:21:59,740 --> 00:22:05,440
download it every it all or you can just

00:22:02,470 --> 00:22:10,440
download the packages for the OVA or the

00:22:05,440 --> 00:22:10,440
docker image so I will thanks a lot

00:22:14,770 --> 00:22:22,000
since time is quiet small was one two

00:22:19,419 --> 00:22:22,510
five second how you have two storage two

00:22:22,000 --> 00:22:25,440
hours

00:22:22,510 --> 00:22:27,640
attention time was only 1 to 4 days and

00:22:25,440 --> 00:22:30,040
long terms there was attached to how do

00:22:27,640 --> 00:22:32,830
you solve this issue I didn't catch it

00:22:30,040 --> 00:22:34,390
all this is a square intervals where

00:22:32,830 --> 00:22:36,370
small was one second and if we have

00:22:34,390 --> 00:22:39,570
heard of data was one second you one and

00:22:36,370 --> 00:22:42,070
two gigabytes yes yes and if we have a

00:22:39,570 --> 00:22:44,559
retention time for the TS DB he was

00:22:42,070 --> 00:22:46,780
about 30 days or so that can get quite

00:22:44,559 --> 00:22:48,580
huge the data you collected mm-hmm do

00:22:46,780 --> 00:22:53,260
you have a small retention time locally

00:22:48,580 --> 00:22:55,780
and some Wiimote right storage or you

00:22:53,260 --> 00:22:59,530
only keeps short-term data or how do you

00:22:55,780 --> 00:23:02,679
solve this issue in our experience we

00:22:59,530 --> 00:23:06,190
just lower the retention time to fit

00:23:02,679 --> 00:23:09,040
within the data the data volume so you

00:23:06,190 --> 00:23:11,260
usually ask the client to expand the

00:23:09,040 --> 00:23:13,000
volume if possible and if not possible

00:23:11,260 --> 00:23:17,169
then we will lower the retention time so

00:23:13,000 --> 00:23:19,690
we keep what we can I'm not sure if free

00:23:17,169 --> 00:23:23,669
media supports that maybe anyone else

00:23:19,690 --> 00:23:23,669
knows I'm not the Prometheus expert here

00:23:25,200 --> 00:23:31,299
remotely wide storage so we then have

00:23:27,820 --> 00:23:33,429
some other database features like down

00:23:31,299 --> 00:23:35,049
sampling for we ordered I mean you don't

00:23:33,429 --> 00:23:38,770
need a one-second resolution for the

00:23:35,049 --> 00:23:40,720
last year yeah so if if promises

00:23:38,770 --> 00:23:43,390
supports that I'm sure they you can

00:23:40,720 --> 00:23:45,250
implement that in PMM also so because

00:23:43,390 --> 00:23:46,600
there's just a premises there you can

00:23:45,250 --> 00:23:48,910
just use all the features that are

00:23:46,600 --> 00:23:51,460
available so basically when you set it

00:23:48,910 --> 00:23:52,990
up you get an admin account to graph an

00:23:51,460 --> 00:23:56,950
ax and an admin account for your

00:23:52,990 --> 00:23:58,870
premises you specify your own roles that

00:23:56,950 --> 00:24:00,610
you can that you can use within those

00:23:58,870 --> 00:24:02,410
tools so you can specify everything

00:24:00,610 --> 00:24:05,410
there that's available within those

00:24:02,410 --> 00:24:07,150
tools and if you can do that in premises

00:24:05,410 --> 00:24:09,600
then you will probably be able to do it

00:24:07,150 --> 00:24:09,600
impairment

00:24:14,820 --> 00:24:21,190
one question about alerting yes

00:24:18,200 --> 00:24:23,800
[Music]

00:24:21,190 --> 00:24:26,740
there's nothing predefined right as of

00:24:23,800 --> 00:24:29,980
this version I know that there's a

00:24:26,740 --> 00:24:32,140
ticket open for that within pmm so

00:24:29,980 --> 00:24:34,690
there's some requests from the community

00:24:32,140 --> 00:24:43,420
to to add some predefined alerts but

00:24:34,690 --> 00:24:46,840
currently there is no there's nothing

00:24:43,420 --> 00:24:49,030
there currently implemented so it's it's

00:24:46,840 --> 00:24:50,230
possible to do that but you have to do

00:24:49,030 --> 00:24:53,110
it in configure it yourself

00:24:50,230 --> 00:24:58,050
it's most likely because it's hard to

00:24:53,110 --> 00:25:00,610
define a threshold for a

00:24:58,050 --> 00:25:02,680
one-size-fits-all solution the previous

00:25:00,610 --> 00:25:05,140
guys also said it it's not always the

00:25:02,680 --> 00:25:07,390
best option so that's why I think proper

00:25:05,140 --> 00:25:09,670
Korra right now chooses to not have

00:25:07,390 --> 00:25:11,980
alerting enabled by default but you

00:25:09,670 --> 00:25:22,540
obviously can by setting your own

00:25:11,980 --> 00:25:25,690
threshold question does the EMM also

00:25:22,540 --> 00:25:28,480
support the folks of MySQL like the OTP

00:25:25,690 --> 00:25:30,520
bottom so their full support Maria DB

00:25:28,480 --> 00:25:33,010
perkiness server mysql community edition

00:25:30,520 --> 00:25:36,730
and the recent versions they also added

00:25:33,010 --> 00:25:38,560
support for Pocius SQL so if you're

00:25:36,730 --> 00:25:40,900
using that you can also start using it

00:25:38,560 --> 00:25:43,090
but that's still very very basic so

00:25:40,900 --> 00:25:46,840
they're building that up as they go

00:25:43,090 --> 00:25:49,750
recognize is just entered the poorest

00:25:46,840 --> 00:25:52,540
landscape so they are adding features

00:25:49,750 --> 00:25:54,700
each new release for progress but

00:25:52,540 --> 00:25:57,850
currently they primarily focus on

00:25:54,700 --> 00:25:59,860
MongoDB and MySQL all the versions and

00:25:57,850 --> 00:26:03,280
this time special support for the color

00:25:59,860 --> 00:26:05,290
clustering of Maria TP there is Solaris

00:26:03,280 --> 00:26:05,560
for you Haitian issues and things like

00:26:05,290 --> 00:26:07,600
that

00:26:05,560 --> 00:26:11,800
yeah Galera there's some girl error

00:26:07,600 --> 00:26:14,640
metrics there okay cool thank you and

00:26:11,800 --> 00:26:14,640
then

00:26:18,740 --> 00:26:30,159
I have some trivia so I have some

00:26:26,840 --> 00:26:34,460
dashboards I collected so here on top

00:26:30,159 --> 00:26:42,220
you have the I know dB

00:26:34,460 --> 00:26:48,110
I can't read that nad B transactions and

00:26:42,220 --> 00:26:51,350
here you have my SQL questions the

00:26:48,110 --> 00:26:53,779
number of queries only be buffer pool

00:26:51,350 --> 00:26:56,870
requests and I already Bieber for polio

00:26:53,779 --> 00:27:00,980
obviously I did something here that's

00:26:56,870 --> 00:27:04,909
the same time so what do I have changed

00:27:00,980 --> 00:27:07,570
so you see that my transactions and my

00:27:04,909 --> 00:27:11,539
number of queries is about the same size

00:27:07,570 --> 00:27:14,240
my buffer pool this the first one is the

00:27:11,539 --> 00:27:16,659
page is read and the second one is the

00:27:14,240 --> 00:27:19,010
page is written the page is written

00:27:16,659 --> 00:27:21,799
sometimes spikes but the page read has

00:27:19,010 --> 00:27:24,020
dropped to zero the buffer pool read

00:27:21,799 --> 00:27:27,289
requests before any reach request was a

00:27:24,020 --> 00:27:29,120
discrete and now the discrete spike here

00:27:27,289 --> 00:27:33,409
a bit and then they drop to zero and

00:27:29,120 --> 00:27:35,450
then here you have the OS weights so

00:27:33,409 --> 00:27:37,490
before there was a lot of waiting for

00:27:35,450 --> 00:27:41,270
the operating system now this has also

00:27:37,490 --> 00:27:44,809
dropped to particularly numb so what

00:27:41,270 --> 00:27:48,679
would I have changed here buffer pool

00:27:44,809 --> 00:27:50,659
size so I started this MySQL server with

00:27:48,679 --> 00:27:53,330
default buff full size of 128 megabytes

00:27:50,659 --> 00:27:56,500
I increased it a little bit to 3

00:27:53,330 --> 00:27:59,270
gigabytes on a 4 gigabyte machine so

00:27:56,500 --> 00:28:04,370
that's the the kind of things that you

00:27:59,270 --> 00:28:07,940
can see from pmm then another one here

00:28:04,370 --> 00:28:15,590
so you have performance schema file i/o

00:28:07,940 --> 00:28:21,620
and you have the i/o DB buffer activity

00:28:15,590 --> 00:28:24,590
and the buffer finally be i/o so my not

00:28:21,620 --> 00:28:28,730
only my reach have dropped but my writes

00:28:24,590 --> 00:28:30,470
have also significantly dropped this

00:28:28,730 --> 00:28:31,830
requires a little bit of insight in I

00:28:30,470 --> 00:28:34,320
ODB

00:28:31,830 --> 00:28:38,280
I changed my only be log file redo lock

00:28:34,320 --> 00:28:42,510
file size it was also 64 megabytes to

00:28:38,280 --> 00:28:43,920
two instances so 128 megabytes every 128

00:28:42,510 --> 00:28:46,710
megabytes it had to write to the data

00:28:43,920 --> 00:28:49,320
files I increased my log files to one

00:28:46,710 --> 00:28:52,260
gigabyte each so my my write traffic now

00:28:49,320 --> 00:28:55,590
dropped to almost nothing just every few

00:28:52,260 --> 00:29:00,740
seconds it needs to flush when the one

00:28:55,590 --> 00:29:03,450
gigabyte gets filled so yeah thank you

00:29:00,740 --> 00:29:04,800
these are my contacts we are hiring if

00:29:03,450 --> 00:29:09,210
you're interested in working with us as

00:29:04,800 --> 00:29:12,050
a DBA please contact us otherwise you

00:29:09,210 --> 00:29:12,050
can contact me directly

00:29:13,820 --> 00:29:17,210
thank you very much

00:29:15,630 --> 00:29:20,370
[Music]

00:29:17,210 --> 00:29:22,890
are there like one or more questions

00:29:20,370 --> 00:29:25,500
because oh I need to ask if there are

00:29:22,890 --> 00:29:32,100
some questions because I have a question

00:29:25,500 --> 00:29:34,650
yeah I didn't get like did you work with

00:29:32,100 --> 00:29:37,370
like the graph on alerts I didn't had

00:29:34,650 --> 00:29:40,020
the time to that you can like have

00:29:37,370 --> 00:29:43,470
something which prevents you from like

00:29:40,020 --> 00:29:45,390
annoying if the the graph is going over

00:29:43,470 --> 00:29:47,820
the threshold and then goes under and

00:29:45,390 --> 00:29:51,720
over and under like some flapping

00:29:47,820 --> 00:29:54,690
flapping I I haven't played it with that

00:29:51,720 --> 00:29:57,930
it would it that much I have my

00:29:54,690 --> 00:29:59,430
colleague mostly to work with that he

00:29:57,930 --> 00:30:01,350
sees more experience with grief on that

00:29:59,430 --> 00:30:05,300
so I would I would have to ask him

00:30:01,350 --> 00:30:05,300
alright thanks

00:30:14,400 --> 00:30:16,430

YouTube URL: https://www.youtube.com/watch?v=vy8lv2SUTvk


