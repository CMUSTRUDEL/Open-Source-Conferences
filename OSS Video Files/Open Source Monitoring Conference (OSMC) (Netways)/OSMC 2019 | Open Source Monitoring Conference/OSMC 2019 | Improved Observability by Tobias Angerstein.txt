Title: OSMC 2019 | Improved Observability by Tobias Angerstein
Publication date: 2019-11-18
Playlist: OSMC 2019 | Open Source Monitoring Conference
Description: 
	Using Automated, OpenCensus-based Application Monitoring Solutions by Tobias Angerstein

Today’s complexity of enterprise software systems increases the importance of observability and monitoring solutions. DevOps teams or the developers and operators in the “classical world”, respectively, need clear transparency about the performance, availability and reliability behavior of their software-systems to be able to manage an appropriate level of service quality. Besides the big, commercial Application Performance Management (APM) solutions the open-source market provides a huge variety of different tools targeting different aspects of APM. Combining these tools opens great potential for building flexible, tailored APM solutions. Open standards, such as OpenTracing, OpenCensus or OpenMetrics are supporting the vendor-independent collection of data. However, most of the open tools that are based on these standards still require manual adoption of code to instrument applications for data collection. Often, such code changes are not desired or simply just not possible. In this talk, we will present an open, OpenCensus-based approach that provides a simple, yet flexible, configuration-based way of collecting monitoring and business data. Data can be collected without the need for manual code changes. As OpenCensus is used under the hood, this approach allows creating tailored APM solutions, as monitoring backends can be exchanged without any additional overhead. In this talk, we give insights into the OpenCensus standard and show how OpenCensus instrumentation can be automated. Through practical examples using different open tools, we demonstrate the flexibility of the presented approach.



NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Musik: FRAMETRAXX
Captions: 
	00:00:10,810 --> 00:00:16,189
[Applause]

00:00:12,759 --> 00:00:19,160
so thank you for introduction tumors and

00:00:16,189 --> 00:00:20,930
hello and welcome to this talk I want to

00:00:19,160 --> 00:00:22,880
show you in this talk a new agent base

00:00:20,930 --> 00:00:24,800
approach on how to monitor and

00:00:22,880 --> 00:00:27,919
instrumented your java application

00:00:24,800 --> 00:00:31,540
without changing your code but before I

00:00:27,919 --> 00:00:35,890
start just a few words about myself so

00:00:31,540 --> 00:00:35,890
so let's see how this works

00:00:40,750 --> 00:00:55,430
will you just use my keyboard which also

00:00:44,570 --> 00:00:58,600
doesn't work so let's try it again no it

00:00:55,430 --> 00:00:58,600
works great

00:01:04,949 --> 00:01:10,890
so just a few words about myself hi I'm

00:01:08,189 --> 00:01:13,020
Tory and I'm working as a consulting at

00:01:10,890 --> 00:01:15,360
neurotic and I'm supporting several

00:01:13,020 --> 00:01:18,270
customers in doing EPM and improving

00:01:15,360 --> 00:01:20,189
their observability I am an open source

00:01:18,270 --> 00:01:22,049
lover especially open source if young

00:01:20,189 --> 00:01:24,899
lover I like the community and I'm

00:01:22,049 --> 00:01:28,470
really curious about new tools which are

00:01:24,899 --> 00:01:30,750
are in this in this area and yeah I hope

00:01:28,470 --> 00:01:33,899
you enjoyed the presentation and that

00:01:30,750 --> 00:01:38,610
one has it a - to give me feedback or or

00:01:33,899 --> 00:01:40,940
um yes raise any questions so first of

00:01:38,610 --> 00:01:44,759
all I brought you this picture a

00:01:40,940 --> 00:01:46,830
telephone pole because why did I bring

00:01:44,759 --> 00:01:48,659
this picture to you because I've found

00:01:46,830 --> 00:01:50,670
it somehow fascinating how all those

00:01:48,659 --> 00:01:52,979
different fires are chaotically

00:01:50,670 --> 00:01:55,670
connected together by all a part of a

00:01:52,979 --> 00:01:59,369
bigger system and they somehow work so

00:01:55,670 --> 00:02:01,909
and this in my opinion really presents

00:01:59,369 --> 00:02:04,709
the current landscape of open source ABM

00:02:01,909 --> 00:02:07,170
solutions and the Krone complex ability

00:02:04,709 --> 00:02:11,850
on how to put all those tools together

00:02:07,170 --> 00:02:13,260
is really really interesting and since

00:02:11,850 --> 00:02:16,079
there are so many possibilities of

00:02:13,260 --> 00:02:20,190
interoperability it can quickly get a

00:02:16,079 --> 00:02:22,170
mess so and we as no attack as our

00:02:20,190 --> 00:02:23,820
company we try to all the sue of

00:02:22,170 --> 00:02:26,220
different tools by providing a simple

00:02:23,820 --> 00:02:29,220
website showing the current landscape it

00:02:26,220 --> 00:02:31,560
is called open APM so just out of

00:02:29,220 --> 00:02:35,370
curiosity who has ever heard from open

00:02:31,560 --> 00:02:37,739
APM dot IO a cool a few ones so those

00:02:35,370 --> 00:02:40,970
who do not know this page I will just

00:02:37,739 --> 00:02:44,010
give you a short overview about the page

00:02:40,970 --> 00:02:45,810
so maybe can also do this afterwards in

00:02:44,010 --> 00:02:47,250
the Deemer I just tell it to you so this

00:02:45,810 --> 00:02:49,200
is basically a page where you can just

00:02:47,250 --> 00:02:52,530
you can also just go to this page where

00:02:49,200 --> 00:02:55,350
you can have the inside on all not all

00:02:52,530 --> 00:02:57,150
but most of the existing APM tools and

00:02:55,350 --> 00:02:59,400
it just can put them together and see

00:02:57,150 --> 00:03:02,790
which tools are comfortable to work

00:02:59,400 --> 00:03:04,650
together and which are which don't work

00:03:02,790 --> 00:03:06,720
together so this is a quite opportunity

00:03:04,650 --> 00:03:10,230
if we want to yes just have and all of

00:03:06,720 --> 00:03:11,940
you about all existing tools and I would

00:03:10,230 --> 00:03:13,799
also appreciate if you have a new tool

00:03:11,940 --> 00:03:18,390
but you do not found it on on this

00:03:13,799 --> 00:03:21,780
webpage just just edit so you

00:03:18,390 --> 00:03:24,120
just simply do a pull request on our

00:03:21,780 --> 00:03:30,840
existing landscape model and then we can

00:03:24,120 --> 00:03:33,060
simply add this tool so to be honest we

00:03:30,840 --> 00:03:37,890
are not only observers of the yokomen

00:03:33,060 --> 00:03:41,160
p.m. landscape we am we are also part of

00:03:37,890 --> 00:03:45,209
it because since over 10 years now we

00:03:41,160 --> 00:03:47,190
are developing inspected and inspected

00:03:45,209 --> 00:03:48,600
is an open-source application

00:03:47,190 --> 00:03:52,230
performance managed to also an

00:03:48,600 --> 00:03:53,670
agent-based tool and so we felt the new

00:03:52,230 --> 00:03:56,790
wives and orphans in the community

00:03:53,670 --> 00:04:00,870
ourselves since we develop develop it so

00:03:56,790 --> 00:04:03,350
on so long time and let me quickly take

00:04:00,870 --> 00:04:07,860
you on our journey of our last ten years

00:04:03,350 --> 00:04:12,540
so um the whole story started back then

00:04:07,860 --> 00:04:15,420
in 2005 so the no attacks started there

00:04:12,540 --> 00:04:16,950
to develop nova spire but no aspire back

00:04:15,420 --> 00:04:19,019
then wasn't really up application

00:04:16,950 --> 00:04:21,900
performance managed to tool it was more

00:04:19,019 --> 00:04:24,000
alternative to profiler so also an

00:04:21,900 --> 00:04:26,640
agent-based solution but more less for

00:04:24,000 --> 00:04:29,120
developers to just identify performance

00:04:26,640 --> 00:04:32,400
issues during the development process

00:04:29,120 --> 00:04:34,200
then in 2008 the word there was the

00:04:32,400 --> 00:04:36,390
first version of inspected and the the

00:04:34,200 --> 00:04:38,910
purpose in the scope somehow changed a

00:04:36,390 --> 00:04:41,669
bit so it became more and more ap I'm

00:04:38,910 --> 00:04:45,530
tool which you can also use during

00:04:41,669 --> 00:04:50,669
during the the runtime and so on

00:04:45,530 --> 00:04:53,160
then in 2010 there was the first really

00:04:50,669 --> 00:04:56,760
release of inspected with with a great

00:04:53,160 --> 00:04:58,650
functionality back then and back then it

00:04:56,760 --> 00:05:00,840
still was just freeware so it was closed

00:04:58,650 --> 00:05:02,880
source but it was free to use and we

00:05:00,840 --> 00:05:04,760
just used it for our customers Jeff it's

00:05:02,880 --> 00:05:07,470
just a free tool which you can just use

00:05:04,760 --> 00:05:12,330
so compared to some commercial tools

00:05:07,470 --> 00:05:15,390
back then it wasn't maybe that that good

00:05:12,330 --> 00:05:18,650
so let's say but it was sufficient for

00:05:15,390 --> 00:05:21,419
most of the use cases and in 2015

00:05:18,650 --> 00:05:23,400
inspect it goes open-source so we

00:05:21,419 --> 00:05:25,140
realized that it's very important to

00:05:23,400 --> 00:05:27,690
also have a community which is part of

00:05:25,140 --> 00:05:28,360
the idea which we have so that's why we

00:05:27,690 --> 00:05:33,099
we

00:05:28,360 --> 00:05:39,069
we open sourced it and then 2018 we

00:05:33,099 --> 00:05:40,689
stopped the project we stopped it why in

00:05:39,069 --> 00:05:42,460
order to answer this question properly

00:05:40,689 --> 00:05:43,780
and let me quickly give you an overview

00:05:42,460 --> 00:05:47,379
about the old inspected and the

00:05:43,780 --> 00:05:51,120
functionalities so just that you get a

00:05:47,379 --> 00:05:55,960
grasp how the it all inspected and what

00:05:51,120 --> 00:05:58,150
was in his in its concept so first we

00:05:55,960 --> 00:06:00,520
have the agent the agent consists of

00:05:58,150 --> 00:06:02,349
multiple different features of there

00:06:00,520 --> 00:06:04,180
were dynamic on instrumentation so you

00:06:02,349 --> 00:06:06,240
could just change the instrumentation

00:06:04,180 --> 00:06:09,610
during runtime which is very cool and

00:06:06,240 --> 00:06:11,830
for sure we support a tracing also some

00:06:09,610 --> 00:06:14,529
some some JV a matrix which you probably

00:06:11,830 --> 00:06:17,409
might know so sub utilization and also

00:06:14,529 --> 00:06:18,879
the states of the different heaps in

00:06:17,409 --> 00:06:21,159
addition to that we had a central

00:06:18,879 --> 00:06:23,500
management repository which can be

00:06:21,159 --> 00:06:27,219
compared to some zip king collectors and

00:06:23,500 --> 00:06:29,199
so on so it's some some some component

00:06:27,219 --> 00:06:31,419
which is responsible for free agent

00:06:29,199 --> 00:06:34,659
management for aggregation for storage

00:06:31,419 --> 00:06:37,150
and also for for for traces API and so

00:06:34,659 --> 00:06:38,680
on and for sure alerting is also a big

00:06:37,150 --> 00:06:40,449
issue in application performance

00:06:38,680 --> 00:06:43,539
management so you were also capable of

00:06:40,449 --> 00:06:45,520
doing alerting and last but not least we

00:06:43,539 --> 00:06:50,969
had enrich blind which is really cool

00:06:45,520 --> 00:06:53,469
rich client and there you could just

00:06:50,969 --> 00:06:55,210
configure the central management

00:06:53,469 --> 00:06:57,430
repository you could do some analysis

00:06:55,210 --> 00:07:00,400
and for sure there is there was also

00:06:57,430 --> 00:07:02,979
some visualization and then we realized

00:07:00,400 --> 00:07:04,839
okay there is some some common features

00:07:02,979 --> 00:07:07,060
missing compared to other open source

00:07:04,839 --> 00:07:09,550
tools so we added additional one so we

00:07:07,060 --> 00:07:11,979
added an um agent we attend a dotnet

00:07:09,550 --> 00:07:14,259
agent we added and Android agent and iOS

00:07:11,979 --> 00:07:16,509
agent and for sure we also supported

00:07:14,259 --> 00:07:18,930
open tracing so I hope that the peoples

00:07:16,509 --> 00:07:22,150
back in the room can also see this and

00:07:18,930 --> 00:07:24,939
in addition to that um we also a

00:07:22,150 --> 00:07:27,580
collected data in the influx DP in order

00:07:24,939 --> 00:07:29,259
to to support a visualization in

00:07:27,580 --> 00:07:31,120
krishana because the chrono

00:07:29,259 --> 00:07:33,729
visualization Ashima is much prettier

00:07:31,120 --> 00:07:40,570
much more dynamic than in this old

00:07:33,729 --> 00:07:42,820
inspected rich client so Oh

00:07:40,570 --> 00:07:45,930
though we try to go with the trends we

00:07:42,820 --> 00:07:48,580
could really face some challenges so

00:07:45,930 --> 00:07:50,230
there were flaws which are filled

00:07:48,580 --> 00:07:51,790
whether you're already existing to love

00:07:50,230 --> 00:07:53,530
it which really tended us to stop the

00:07:51,790 --> 00:07:55,450
project so why investing time in a

00:07:53,530 --> 00:07:57,190
solution which is always some steps

00:07:55,450 --> 00:08:00,280
behind already existing open source

00:07:57,190 --> 00:08:01,780
tools and it's simply too much effort to

00:08:00,280 --> 00:08:04,660
invest in all of those different

00:08:01,780 --> 00:08:06,640
components and we just had a few persons

00:08:04,660 --> 00:08:09,700
which which worked on this project so

00:08:06,640 --> 00:08:12,730
the the biggest in my point of view the

00:08:09,700 --> 00:08:14,860
biggest disadvantage of or of this

00:08:12,730 --> 00:08:17,140
approach was that we didn't had any open

00:08:14,860 --> 00:08:19,240
standard so it wasn't possible to use

00:08:17,140 --> 00:08:21,460
our JV agent in combination with other

00:08:19,240 --> 00:08:23,340
collectors or something like that it

00:08:21,460 --> 00:08:26,110
wasn't possible in addition to that

00:08:23,340 --> 00:08:30,370
there was Suqian which did a way better

00:08:26,110 --> 00:08:32,530
job in this case and and in addition to

00:08:30,370 --> 00:08:34,510
that and in times of micro services and

00:08:32,530 --> 00:08:37,240
so all in times of thousands of

00:08:34,510 --> 00:08:42,580
different services it is essential that

00:08:37,240 --> 00:08:44,530
this component can be scaled up and it

00:08:42,580 --> 00:08:47,080
wasn't possible with this approach so we

00:08:44,530 --> 00:08:49,480
had a really bad scalability and there

00:08:47,080 --> 00:08:52,890
were primitives and again SIPC in which

00:08:49,480 --> 00:08:56,020
did a way better job in this case and

00:08:52,890 --> 00:08:59,230
yeah a rich client is not up to date

00:08:56,020 --> 00:09:01,240
anymore it's a very really oldest oldest

00:08:59,230 --> 00:09:03,610
concept it's not performant and it's

00:09:01,240 --> 00:09:06,010
inflexible the reason why we had a rich

00:09:03,610 --> 00:09:07,990
client was simply because back then the

00:09:06,010 --> 00:09:10,060
the browser didn't work or that might

00:09:07,990 --> 00:09:11,830
lead to in order to to build all those

00:09:10,060 --> 00:09:19,930
those tools which you are need in order

00:09:11,830 --> 00:09:22,240
to to visualize this data so what's the

00:09:19,930 --> 00:09:28,120
reason why all those tools are becoming

00:09:22,240 --> 00:09:30,010
so successful it's because open

00:09:28,120 --> 00:09:30,520
standards so there are different open

00:09:30,010 --> 00:09:32,470
standards

00:09:30,520 --> 00:09:34,660
so yesterday whatever was already a

00:09:32,470 --> 00:09:36,910
presentation about open sensors open

00:09:34,660 --> 00:09:39,490
telemetry and so on so there's first

00:09:36,910 --> 00:09:41,950
metrics which is a standard mainly used

00:09:39,490 --> 00:09:46,060
by Prometheus or micrometer in order to

00:09:41,950 --> 00:09:50,170
exchange a metrics and so it's quite yes

00:09:46,060 --> 00:09:54,480
quite well known and in addition to net

00:09:50,170 --> 00:09:58,180
I was tracing on tracing is also

00:09:54,480 --> 00:10:00,819
yeah an approach to heaven standardized

00:09:58,180 --> 00:10:04,959
format on how to exchange traces and

00:10:00,819 --> 00:10:07,629
span specifically and there is a new one

00:10:04,959 --> 00:10:12,069
open census which was pushed by Google

00:10:07,629 --> 00:10:14,920
which somehow is a standard for for

00:10:12,069 --> 00:10:19,199
metrics and for traces so they both

00:10:14,920 --> 00:10:23,050
support Sanders for both of them and

00:10:19,199 --> 00:10:25,029
since this really looks a bit weird

00:10:23,050 --> 00:10:26,980
because you want to have a standard and

00:10:25,029 --> 00:10:31,230
they have three different icons desin

00:10:26,980 --> 00:10:33,759
yeah there is no new yes a new community

00:10:31,230 --> 00:10:36,999
which is called open telemetry so the

00:10:33,759 --> 00:10:39,519
idea is to somehow yes join join the

00:10:36,999 --> 00:10:42,430
forces and to somehow find one solution

00:10:39,519 --> 00:10:44,319
for this problem because this is this is

00:10:42,430 --> 00:10:45,579
a really this is a real problem which

00:10:44,319 --> 00:10:47,620
has to be addressed so that you have

00:10:45,579 --> 00:10:50,350
this an interoperability between

00:10:47,620 --> 00:10:55,089
different monitoring tools so with those

00:10:50,350 --> 00:10:56,709
guards they can be for sure a team which

00:10:55,089 --> 00:10:59,050
is using yeah there is another team

00:10:56,709 --> 00:11:01,990
which may be using inspected sold

00:10:59,050 --> 00:11:03,490
inspected an influx data and there is

00:11:01,990 --> 00:11:05,199
another macro service team which is

00:11:03,490 --> 00:11:07,809
using Prometheus and SIPC in for

00:11:05,199 --> 00:11:10,540
instance and with this standards it is

00:11:07,809 --> 00:11:12,189
possible that we have a few about a

00:11:10,540 --> 00:11:13,809
whole application and see all

00:11:12,189 --> 00:11:16,300
transactions between the different

00:11:13,809 --> 00:11:18,339
different micro services and this is

00:11:16,300 --> 00:11:20,309
really great yeah this is really an

00:11:18,339 --> 00:11:24,189
advantage of this new open source

00:11:20,309 --> 00:11:26,199
projects so with this standards

00:11:24,189 --> 00:11:28,209
different team skin and tools can

00:11:26,199 --> 00:11:30,249
operate together this is just awesome

00:11:28,209 --> 00:11:33,009
and this is this is really fitting with

00:11:30,249 --> 00:11:35,110
this new micro service develops idea so

00:11:33,009 --> 00:11:37,920
this light sounds like a paradise

00:11:35,110 --> 00:11:40,600
setting isn't it but hold

00:11:37,920 --> 00:11:44,439
what about increasing maintenance or

00:11:40,600 --> 00:11:45,939
effort of monitoring code so don't

00:11:44,439 --> 00:11:47,769
nobody if you have already used some

00:11:45,939 --> 00:11:50,290
some tracing frameworks such as the

00:11:47,769 --> 00:11:52,300
Zipkin SDK or something like that you

00:11:50,290 --> 00:11:54,429
have to you usually have to define the

00:11:52,300 --> 00:11:56,980
tag context and then you have to put

00:11:54,429 --> 00:11:59,050
some tags and then you have to create a

00:11:56,980 --> 00:12:02,559
tag value and if your tak values may be

00:11:59,050 --> 00:12:05,019
conditional you have to have if case and

00:12:02,559 --> 00:12:06,970
if define ok in this case I want to use

00:12:05,019 --> 00:12:08,200
this value and Dad and then there is a

00:12:06,970 --> 00:12:10,240
scope

00:12:08,200 --> 00:12:12,160
if you start the scope then there it

00:12:10,240 --> 00:12:15,580
comes your ex Google application logic

00:12:12,160 --> 00:12:17,560
so this is a huge effort of course this

00:12:15,580 --> 00:12:19,150
is a very bad example so there are also

00:12:17,560 --> 00:12:20,890
frameworks where you can just annotate

00:12:19,150 --> 00:12:22,780
you and I said I know this but

00:12:20,890 --> 00:12:27,550
nevertheless you have maintenance effort

00:12:22,780 --> 00:12:29,170
so if you if you are using a very cool

00:12:27,550 --> 00:12:34,780
framework you have maintenance effort in

00:12:29,170 --> 00:12:37,060
your source code and this is in my

00:12:34,780 --> 00:12:38,980
opinion doing the most important thing

00:12:37,060 --> 00:12:41,110
what about about if you if you have a

00:12:38,980 --> 00:12:43,690
application with which is a black box so

00:12:41,110 --> 00:12:45,730
we do not have the chance to change your

00:12:43,690 --> 00:12:49,780
code way you do not have the chance to

00:12:45,730 --> 00:12:51,580
to to update the source maybe it's also

00:12:49,780 --> 00:12:54,070
a legacy application we do not have to

00:12:51,580 --> 00:12:56,800
school spring frameworks and so on so

00:12:54,070 --> 00:12:58,780
and even if you have a micro service

00:12:56,800 --> 00:13:01,510
landscape there is often one service one

00:12:58,780 --> 00:13:03,790
one old component which which is somehow

00:13:01,510 --> 00:13:06,790
involved in the process of transaction

00:13:03,790 --> 00:13:10,120
so some old don't know a service which

00:13:06,790 --> 00:13:12,400
is yes we're just sending some data back

00:13:10,120 --> 00:13:14,410
and so on and in this case it's quite

00:13:12,400 --> 00:13:16,990
hard to do this with these new

00:13:14,410 --> 00:13:19,800
approaches so there is no second age and

00:13:16,990 --> 00:13:24,040
we can simply block in and then it works

00:13:19,800 --> 00:13:27,520
and what about the typical IBM features

00:13:24,040 --> 00:13:29,890
so what about something like that so if

00:13:27,520 --> 00:13:32,290
you are using commercial tools who are

00:13:29,890 --> 00:13:35,020
you today I'll ever use a dynamic sonnet

00:13:32,290 --> 00:13:37,210
or something like that so you probably

00:13:35,020 --> 00:13:39,220
might know this service map so which is

00:13:37,210 --> 00:13:41,080
really great because I think there are

00:13:39,220 --> 00:13:43,570
many other developers which do not

00:13:41,080 --> 00:13:45,220
really know how to the dependencies

00:13:43,570 --> 00:13:46,870
between the different services are

00:13:45,220 --> 00:13:49,660
because this is really complex you

00:13:46,870 --> 00:13:52,060
cannot solve this PI by a PI by hand so

00:13:49,660 --> 00:13:54,280
this is not possible so you have to have

00:13:52,060 --> 00:13:56,950
such a tool which somehow helps you to

00:13:54,280 --> 00:13:59,620
do this and by now there is nothing

00:13:56,950 --> 00:14:01,480
really sufficient on the open source

00:13:59,620 --> 00:14:04,180
market for course there might be this

00:14:01,480 --> 00:14:05,800
yeah your eye map but it's not there is

00:14:04,180 --> 00:14:12,340
not too much data and it's also not that

00:14:05,800 --> 00:14:15,070
it dynamically adaptable so so what

00:14:12,340 --> 00:14:16,360
about anomaly detection yeah so it would

00:14:15,070 --> 00:14:18,820
be also interesting to not just have

00:14:16,360 --> 00:14:20,980
metrics but do something with this

00:14:18,820 --> 00:14:21,800
matrix with intelligent methods with

00:14:20,980 --> 00:14:23,420
Intel

00:14:21,800 --> 00:14:25,700
and approaches such as okay Dubai's

00:14:23,420 --> 00:14:28,339
lining and so on so and what about

00:14:25,700 --> 00:14:32,510
business objects transactions so in

00:14:28,339 --> 00:14:34,850
today's APM context is very important to

00:14:32,510 --> 00:14:37,279
also have this business view so just

00:14:34,850 --> 00:14:39,230
tagging certain requests that is somehow

00:14:37,279 --> 00:14:41,600
belong to the same business transaction

00:14:39,230 --> 00:14:43,459
so a business transaction would be for

00:14:41,600 --> 00:14:45,260
example I check out or something like

00:14:43,459 --> 00:14:47,149
that and so that you have some some

00:14:45,260 --> 00:14:49,250
grouping based on requests which would

00:14:47,149 --> 00:14:51,079
be also very interesting so that you can

00:14:49,250 --> 00:14:53,060
also aggregate different metrics and see

00:14:51,079 --> 00:14:56,450
okay there is the the average response

00:14:53,060 --> 00:15:00,290
time over certain business business

00:14:56,450 --> 00:15:01,820
transaction is very bad so that's why

00:15:00,290 --> 00:15:05,600
because there are still some some

00:15:01,820 --> 00:15:09,550
missing things we we said okay we we

00:15:05,600 --> 00:15:11,779
want to we want to fill this gap by

00:15:09,550 --> 00:15:14,899
introducing inspected ocelot which is

00:15:11,779 --> 00:15:17,600
our next project so it is not based on

00:15:14,899 --> 00:15:20,149
the old source code of our old inspected

00:15:17,600 --> 00:15:22,850
this it is written completely new and it

00:15:20,149 --> 00:15:24,589
is only the agent because we thought

00:15:22,850 --> 00:15:27,160
there is still missing this agent which

00:15:24,589 --> 00:15:30,560
is capable of doing those things and

00:15:27,160 --> 00:15:32,600
there is so so many different collectors

00:15:30,560 --> 00:15:34,640
great collectors on a market which you

00:15:32,600 --> 00:15:36,050
can simply use so we do not have to do

00:15:34,640 --> 00:15:39,110
this by our own we can simply use that

00:15:36,050 --> 00:15:40,940
and it is maybe also the the cool idea

00:15:39,110 --> 00:15:43,520
of the open source a monitoring

00:15:40,940 --> 00:15:45,770
community just to use existing ones and

00:15:43,520 --> 00:15:49,190
not to build something for your own and

00:15:45,770 --> 00:15:52,160
so at least this is my point of view so

00:15:49,190 --> 00:15:55,040
the basic idea is just to simply find

00:15:52,160 --> 00:15:57,790
automate data collection we can do this

00:15:55,040 --> 00:16:01,430
by enable distribute iterations for sure

00:15:57,790 --> 00:16:04,459
we do this by context sensitive metrics

00:16:01,430 --> 00:16:06,890
by or by supporting them in addition to

00:16:04,459 --> 00:16:08,690
that supporting some dependencies

00:16:06,890 --> 00:16:10,970
discovery as you have seen before such a

00:16:08,690 --> 00:16:13,490
crap and of course supporting

00:16:10,970 --> 00:16:16,190
interoperability so not to force the

00:16:13,490 --> 00:16:18,079
customer to to only use those tools so

00:16:16,190 --> 00:16:20,959
that is just free to use anything which

00:16:18,079 --> 00:16:22,760
he wants and for sure dynamic

00:16:20,959 --> 00:16:24,890
instrumentation so this is was also

00:16:22,760 --> 00:16:26,810
feature which you already had in the in

00:16:24,890 --> 00:16:28,880
the wall tool is a very important thing

00:16:26,810 --> 00:16:31,040
because if you once have deployed your

00:16:28,880 --> 00:16:33,230
application it's very useful to just

00:16:31,040 --> 00:16:35,390
change your change your instrumentation

00:16:33,230 --> 00:16:37,520
may be based on location

00:16:35,390 --> 00:16:39,530
so if something happens in your source

00:16:37,520 --> 00:16:41,180
code you want to increase the sampling

00:16:39,530 --> 00:16:42,590
rate of the tracing did that would be

00:16:41,180 --> 00:16:43,070
awesome if you could do something like

00:16:42,590 --> 00:16:45,830
that

00:16:43,070 --> 00:16:49,000
and for sure a runtime attention would

00:16:45,830 --> 00:16:51,500
be also very nice so just saying okay

00:16:49,000 --> 00:16:53,360
let's attach it doing runtime so there's

00:16:51,500 --> 00:16:55,490
already running from some some JVM

00:16:53,360 --> 00:17:02,630
processes so let's just switch on our

00:16:55,490 --> 00:17:05,540
monitoring so with this tool we we hope

00:17:02,630 --> 00:17:07,970
to solve the problem of black boxes and

00:17:05,540 --> 00:17:10,940
can can open this black box and for sure

00:17:07,970 --> 00:17:13,040
do not yeah that we do not have the

00:17:10,940 --> 00:17:17,660
effort of of writing monitoring code

00:17:13,040 --> 00:17:19,730
because we have inspected also a lot so

00:17:17,660 --> 00:17:22,070
coming to distribute tracing since we

00:17:19,730 --> 00:17:24,699
are using open sensors as library which

00:17:22,070 --> 00:17:29,360
I've presented before we are capable of

00:17:24,699 --> 00:17:32,900
of of exposing our metrics to several

00:17:29,360 --> 00:17:37,540
different different tools so it is

00:17:32,900 --> 00:17:41,240
possible through by using different

00:17:37,540 --> 00:17:43,940
trace properties to to propagate the

00:17:41,240 --> 00:17:46,070
trace context to the next service by

00:17:43,940 --> 00:17:47,870
using headers so that the basic approach

00:17:46,070 --> 00:17:49,280
is to just use headers so there's the

00:17:47,870 --> 00:17:51,920
trace idea which is upon there's the

00:17:49,280 --> 00:17:53,750
span ID which is important and for sure

00:17:51,920 --> 00:17:55,610
you have a start and stop time which is

00:17:53,750 --> 00:17:57,950
also relevant in order to compute the

00:17:55,610 --> 00:18:02,180
response time and in addition to that

00:17:57,950 --> 00:18:03,950
you can just um M you can just add or

00:18:02,180 --> 00:18:06,680
some additional attributes in order to

00:18:03,950 --> 00:18:09,130
to give some context with it so it could

00:18:06,680 --> 00:18:11,660
be a method name or something like that

00:18:09,130 --> 00:18:14,090
and for sure there's a span kind which

00:18:11,660 --> 00:18:16,160
is also some some places and for su in

00:18:14,090 --> 00:18:19,160
order to to propagate a span ID just

00:18:16,160 --> 00:18:22,820
simply set those different headers so in

00:18:19,160 --> 00:18:24,620
order to support this you have to maybe

00:18:22,820 --> 00:18:27,080
you can just write an interceptor for

00:18:24,620 --> 00:18:31,550
your HTTP client which just sets these

00:18:27,080 --> 00:18:35,720
headers so context sensitive metrics is

00:18:31,550 --> 00:18:37,130
just I'm adding some additional context

00:18:35,720 --> 00:18:39,470
which can be also business from where

00:18:37,130 --> 00:18:43,910
context so you could also add to your

00:18:39,470 --> 00:18:48,670
metric the current value of your webshop

00:18:43,910 --> 00:18:50,799
so the the current in your

00:18:48,670 --> 00:18:53,460
oh is it called a new card so that the

00:18:50,799 --> 00:18:55,870
current value in your card

00:18:53,460 --> 00:18:56,950
so when it comes to independence I dis

00:18:55,870 --> 00:19:00,429
carry something like that would be very

00:18:56,950 --> 00:19:02,470
helpful so see the the different

00:19:00,429 --> 00:19:03,910
services and not only see the

00:19:02,470 --> 00:19:07,150
dependencies but also see our

00:19:03,910 --> 00:19:08,920
quantitative dependencies such as the

00:19:07,150 --> 00:19:11,920
number of requests the number of errors

00:19:08,920 --> 00:19:14,320
the number the response time between the

00:19:11,920 --> 00:19:17,920
different services so this is very um

00:19:14,320 --> 00:19:19,960
very importantly when you want to

00:19:17,920 --> 00:19:21,820
explore so when you want to see on one

00:19:19,960 --> 00:19:25,210
view okay where it might be a problem in

00:19:21,820 --> 00:19:26,919
which service might be a problem in

00:19:25,210 --> 00:19:28,570
addition to that interoperability is as

00:19:26,919 --> 00:19:30,780
possible since we are simply using open

00:19:28,570 --> 00:19:34,570
sensors and without sensors you can

00:19:30,780 --> 00:19:38,590
really use a several arbitrary exporters

00:19:34,570 --> 00:19:41,200
and send the data to sicken to haystack

00:19:38,590 --> 00:19:44,830
for sure so this is a project of Expedia

00:19:41,200 --> 00:19:47,770
and also Yaga is possible and for sure

00:19:44,830 --> 00:19:52,510
proof this is also for metrics the way

00:19:47,770 --> 00:19:54,760
to go I would say and dynamic

00:19:52,510 --> 00:19:57,580
instrumentation is also possible so we

00:19:54,760 --> 00:20:00,220
do that an instrumentation completely a

00:19:57,580 --> 00:20:03,330
synchronous this means and there is a

00:20:00,220 --> 00:20:05,410
addition of that which is just doing the

00:20:03,330 --> 00:20:07,450
instrumentation stuff so we just

00:20:05,410 --> 00:20:09,610
retransform the the bytecode of the

00:20:07,450 --> 00:20:11,740
application so the overhead is also

00:20:09,610 --> 00:20:13,660
configurable so it is clear if you do

00:20:11,740 --> 00:20:15,970
something like that there is overhead so

00:20:13,660 --> 00:20:19,299
you will you always have overhead this

00:20:15,970 --> 00:20:21,309
is clear but you can configure it so the

00:20:19,299 --> 00:20:23,080
instrumentation can also be dynamically

00:20:21,309 --> 00:20:24,850
changed so you can just change the

00:20:23,080 --> 00:20:28,600
configuration file and then it will be

00:20:24,850 --> 00:20:30,790
applied soon so how you can do this I

00:20:28,600 --> 00:20:32,559
just brought a snippet of the

00:20:30,790 --> 00:20:34,480
configuration just one question for you

00:20:32,559 --> 00:20:39,400
guys in the back can you see this or is

00:20:34,480 --> 00:20:42,460
this too small no it's not possible okay

00:20:39,400 --> 00:20:46,270
okay I'm I'm so sorry so maybe I can can

00:20:42,460 --> 00:20:52,500
manage too soon no I can't okay

00:20:46,270 --> 00:20:52,500
I just try it again no it isn't possible

00:20:53,010 --> 00:20:58,390
okay but never denied just explained it

00:20:55,809 --> 00:21:01,929
to you so I think that should be also

00:20:58,390 --> 00:21:03,909
sufficient and so

00:21:01,929 --> 00:21:06,820
can define inter-pass delay which says

00:21:03,909 --> 00:21:08,919
okay which times should be between such

00:21:06,820 --> 00:21:12,070
a bet so the the implementation will be

00:21:08,919 --> 00:21:13,570
done in batches so you can just define

00:21:12,070 --> 00:21:15,730
the number of classes which will be

00:21:13,570 --> 00:21:18,940
which will be transformed power batch

00:21:15,730 --> 00:21:20,320
and also the the into bachelors so the

00:21:18,940 --> 00:21:21,820
with those two whatever so you can

00:21:20,320 --> 00:21:23,289
simply define the overhead because if

00:21:21,820 --> 00:21:26,320
you just increase in the batch delay

00:21:23,289 --> 00:21:27,789
there will be less overhead for sure so

00:21:26,320 --> 00:21:31,869
that's that's basically the idea of

00:21:27,789 --> 00:21:33,519
configuring the overhead and last but

00:21:31,869 --> 00:21:37,570
not least runtime attachment so you

00:21:33,519 --> 00:21:43,869
probably might know this construct so

00:21:37,570 --> 00:21:46,629
just using this Chara acient API so just

00:21:43,869 --> 00:21:48,700
reference your char and then in addition

00:21:46,629 --> 00:21:51,399
to that you just reference your main

00:21:48,700 --> 00:21:55,149
mean char so that's basically how you

00:21:51,399 --> 00:21:57,249
can you can just start our agent with

00:21:55,149 --> 00:21:59,619
your Java program but there is an

00:21:57,249 --> 00:22:01,720
additional possibility you can just use

00:21:59,619 --> 00:22:04,269
the script so this is working so you can

00:22:01,720 --> 00:22:06,340
just type this in and a reference which

00:22:04,269 --> 00:22:08,559
a vamp process ID and then it will work

00:22:06,340 --> 00:22:11,799
out of the box and then there will be an

00:22:08,559 --> 00:22:14,019
additional port expose under 8888 and

00:22:11,799 --> 00:22:16,269
there you will find your parameters my

00:22:14,019 --> 00:22:21,070
matrix which speak can then be scraped

00:22:16,269 --> 00:22:23,919
so that's the basic idea so you can just

00:22:21,070 --> 00:22:29,619
try it out afterwards so this should

00:22:23,919 --> 00:22:32,379
work so in addition to that so by now we

00:22:29,619 --> 00:22:34,929
only had to focus on on the java

00:22:32,379 --> 00:22:36,879
application itself but we want to have

00:22:34,929 --> 00:22:38,679
an to end monitoring for sure so we want

00:22:36,879 --> 00:22:41,139
to also want to see what like what a

00:22:38,679 --> 00:22:43,659
client is experiencing and for that end

00:22:41,139 --> 00:22:45,789
user monitoring is very essential so

00:22:43,659 --> 00:22:47,379
let's imagine we have the typical setups

00:22:45,789 --> 00:22:50,379
Superleague monitoring setup we have a

00:22:47,379 --> 00:22:52,600
web server and we have inspected also

00:22:50,379 --> 00:22:55,210
also lot as an agent which is sending

00:22:52,600 --> 00:22:59,100
data to some monitoring services which

00:22:55,210 --> 00:23:02,080
some works but you do not have to the

00:22:59,100 --> 00:23:05,110
observability concerning the data which

00:23:02,080 --> 00:23:07,360
is on the client so we have a client

00:23:05,110 --> 00:23:09,999
side so this can be some some webpage or

00:23:07,360 --> 00:23:14,610
something like that and on the client

00:23:09,999 --> 00:23:18,809
when your we are using boring which is a

00:23:14,610 --> 00:23:20,640
yes now a bit old JavaScript agent but

00:23:18,809 --> 00:23:23,190
is it is very mighty so there are a lot

00:23:20,640 --> 00:23:29,549
of different plugins which can which

00:23:23,190 --> 00:23:31,950
provide you different metrics and since

00:23:29,549 --> 00:23:35,549
we are using this but this is too old to

00:23:31,950 --> 00:23:38,269
to know the new concepts of open sensors

00:23:35,549 --> 00:23:40,830
of matrix and so on we just had

00:23:38,269 --> 00:23:43,169
introduced a new year M server and he

00:23:40,830 --> 00:23:45,630
simply just accepts the beacons which

00:23:43,169 --> 00:23:49,679
are sent from this JavaScript agent and

00:23:45,630 --> 00:23:51,480
transforms the two to Prometheus so this

00:23:49,679 --> 00:23:53,669
is basically the idea how we can then

00:23:51,480 --> 00:23:56,460
correlate the data in our monitoring

00:23:53,669 --> 00:24:00,480
services so with this approach we can

00:23:56,460 --> 00:24:03,200
have this end to end you by now it is

00:24:00,480 --> 00:24:06,059
only working for matrix but we are

00:24:03,200 --> 00:24:09,090
contingently working on also supporting

00:24:06,059 --> 00:24:14,669
tracing on this side so that's the basic

00:24:09,090 --> 00:24:17,580
idea so the configuration is the most

00:24:14,669 --> 00:24:19,380
important in the most exciting part I

00:24:17,580 --> 00:24:20,730
would say so there's a default

00:24:19,380 --> 00:24:22,620
configuration for su so if you are

00:24:20,730 --> 00:24:26,490
downloading our agent it is possible to

00:24:22,620 --> 00:24:28,529
just start it and it should provide some

00:24:26,490 --> 00:24:30,870
some some basic metrics which might be

00:24:28,529 --> 00:24:32,429
already some interesting and there is a

00:24:30,870 --> 00:24:34,110
file based version and all the server

00:24:32,429 --> 00:24:36,929
based version so we also introduced

00:24:34,110 --> 00:24:39,929
configuration server which just provides

00:24:36,929 --> 00:24:41,370
the configuration for all the agents and

00:24:39,929 --> 00:24:44,010
for sure has already said there's some

00:24:41,370 --> 00:24:46,200
enemy configuration so all of the of the

00:24:44,010 --> 00:24:49,830
configuration properties are dynamically

00:24:46,200 --> 00:24:53,970
set so this is very cool so everything

00:24:49,830 --> 00:24:57,000
can be P changed a lot and there are

00:24:53,970 --> 00:24:58,529
three key concepts in the configuration

00:24:57,000 --> 00:25:00,480
so there are scopes which define

00:24:58,529 --> 00:25:02,760
basically the scope of the

00:25:00,480 --> 00:25:06,960
instrumentation which means okay a scone

00:25:02,760 --> 00:25:10,500
could be all all inherited methods of a

00:25:06,960 --> 00:25:12,120
certain class or all inherited classes

00:25:10,500 --> 00:25:14,880
of a superclass so this would be define

00:25:12,120 --> 00:25:16,610
a scope in our Java world and in

00:25:14,880 --> 00:25:19,950
addition to that there are rules and

00:25:16,610 --> 00:25:22,320
rules somehow combine scopes and actions

00:25:19,950 --> 00:25:24,510
so the rule is some are responsible that

00:25:22,320 --> 00:25:26,940
we that we measure a metric or that we

00:25:24,510 --> 00:25:29,760
that we measure a trace and act

00:25:26,940 --> 00:25:31,740
are really just actions so Java actions

00:25:29,760 --> 00:25:34,260
so you can really write Java code in our

00:25:31,740 --> 00:25:36,480
configuration which then returns a value

00:25:34,260 --> 00:25:45,000
and this value will be then used in the

00:25:36,480 --> 00:25:46,530
rule and processed so since I've already

00:25:45,000 --> 00:25:49,100
explained that we have a configuration

00:25:46,530 --> 00:25:51,600
server just a brief overview about

00:25:49,100 --> 00:25:53,850
existing about the current state so we

00:25:51,600 --> 00:25:57,240
have for example we have two different

00:25:53,850 --> 00:26:01,080
services which are monitoring by by our

00:25:57,240 --> 00:26:04,050
agent it would be very difficult to to

00:26:01,080 --> 00:26:06,270
deploy the same configuration for the

00:26:04,050 --> 00:26:08,010
different agents or even we would have

00:26:06,270 --> 00:26:09,840
different configurations for those two

00:26:08,010 --> 00:26:11,910
agents in that that's why we have a

00:26:09,840 --> 00:26:15,120
additional component which is called

00:26:11,910 --> 00:26:18,920
configuration server and with this

00:26:15,120 --> 00:26:18,920
configuration server you are capable of

00:26:19,130 --> 00:26:24,240
configuring them the mapping of the

00:26:21,870 --> 00:26:28,680
different configurations and just yes

00:26:24,240 --> 00:26:31,320
deploy to there's several agents and for

00:26:28,680 --> 00:26:33,960
sure since you all also want to do this

00:26:31,320 --> 00:26:36,570
not only based on API there's also

00:26:33,960 --> 00:26:39,630
configuration to your I which and I

00:26:36,570 --> 00:26:41,310
support this process here also some

00:26:39,630 --> 00:26:43,860
screenshots of the configuration as a

00:26:41,310 --> 00:26:48,630
rely so everything is firebase you just

00:26:43,860 --> 00:26:52,440
can edit this yum all files and then you

00:26:48,630 --> 00:26:54,960
can just define agent mapping so you can

00:26:52,440 --> 00:26:59,700
just say ok an agent which has this

00:26:54,960 --> 00:27:02,010
certain text will be will get this in

00:26:59,700 --> 00:27:05,090
that configuration so you can do very

00:27:02,010 --> 00:27:07,290
complex stuff with this and also reuse

00:27:05,090 --> 00:27:08,850
configuration maybe you have a base

00:27:07,290 --> 00:27:11,520
configuration and then you have some

00:27:08,850 --> 00:27:14,550
some most specific agents with this HTML

00:27:11,520 --> 00:27:21,260
you can really specifically define which

00:27:14,550 --> 00:27:25,020
agent once yes gets which configuration

00:27:21,260 --> 00:27:28,890
so first let let me show you how you can

00:27:25,020 --> 00:27:32,010
configure the instrumentation of metrics

00:27:28,890 --> 00:27:34,380
so there are some basic metrics which

00:27:32,010 --> 00:27:37,260
which you get by default shows such as

00:27:34,380 --> 00:27:38,759
CPU usage and the number of cores disk

00:27:37,260 --> 00:27:42,269
space for sure

00:27:38,759 --> 00:27:44,609
memory the number of threats and the

00:27:42,269 --> 00:27:46,529
current states all of the threads and

00:27:44,609 --> 00:27:47,909
for sure garbage collection is also very

00:27:46,529 --> 00:27:51,269
important in the context of Java

00:27:47,909 --> 00:27:53,820
development so you will also get you

00:27:51,269 --> 00:27:56,729
will also get some data concerning the

00:27:53,820 --> 00:27:58,259
garbage collection and for true class

00:27:56,729 --> 00:28:00,329
logon is quite interesting for us since

00:27:58,259 --> 00:28:03,749
we are also working with these classes

00:28:00,329 --> 00:28:06,359
when we returns form them so that's

00:28:03,749 --> 00:28:11,759
that's it that's the basic metrics so

00:28:06,359 --> 00:28:13,979
now I'm focusing on scopes again I will

00:28:11,759 --> 00:28:16,739
just describe it to you to the people on

00:28:13,979 --> 00:28:21,989
in the back since you are not capable of

00:28:16,739 --> 00:28:23,819
of reading this so let's go a scope is

00:28:21,989 --> 00:28:25,769
defined by a name so in order to

00:28:23,819 --> 00:28:27,809
reference the scope it's very important

00:28:25,769 --> 00:28:29,940
you have the name and in addition to

00:28:27,809 --> 00:28:31,199
that you can define some additional

00:28:29,940 --> 00:28:35,609
attributes and attribute can be

00:28:31,199 --> 00:28:37,079
interface class or method and inside of

00:28:35,609 --> 00:28:39,119
such an attribute you can just simply

00:28:37,079 --> 00:28:41,940
define amateur in this case it would be

00:28:39,119 --> 00:28:43,469
Java util list so we will match on Java

00:28:41,940 --> 00:28:45,659
util list and then there's also the

00:28:43,469 --> 00:28:51,479
matching mode okay there could you could

00:28:45,659 --> 00:28:53,249
also equals equals yeah in this case

00:28:51,479 --> 00:28:55,379
it's just equal to I so there's a fully

00:28:53,249 --> 00:28:58,889
match so that's quite quite clear how

00:28:55,379 --> 00:29:00,509
this works and of course there's an

00:28:58,889 --> 00:29:03,029
additional annotation mentioned so we

00:29:00,509 --> 00:29:06,989
can also match on annotations new Java

00:29:03,029 --> 00:29:09,119
code so now focusing on action so as I

00:29:06,989 --> 00:29:11,369
already said actions are simply Chavez

00:29:09,119 --> 00:29:15,809
snippet which will be executed they

00:29:11,369 --> 00:29:19,679
owned by a rule and this is in this case

00:29:15,809 --> 00:29:23,909
we have three different actions and for

00:29:19,679 --> 00:29:25,619
sure each action is defined by a name so

00:29:23,909 --> 00:29:28,499
that we can reference this action again

00:29:25,619 --> 00:29:33,239
and in addition to that you can define

00:29:28,499 --> 00:29:36,409
an input so like normal Java method this

00:29:33,239 --> 00:29:38,909
action can also just have an input and

00:29:36,409 --> 00:29:41,309
in addition to that you have a Java code

00:29:38,909 --> 00:29:46,049
and this Java code will be then executed

00:29:41,309 --> 00:29:47,909
if reaction will be invoked so this case

00:29:46,049 --> 00:29:49,979
we have a very simple method which which

00:29:47,909 --> 00:29:51,930
is just calling you long so simple nano

00:29:49,979 --> 00:29:54,390
time so it will just

00:29:51,930 --> 00:29:58,110
return the current timestamp of your

00:29:54,390 --> 00:30:00,900
system and this elapsed Milly's method

00:29:58,110 --> 00:30:02,070
will get to the world you may be this

00:30:00,900 --> 00:30:06,840
one yeah

00:30:02,070 --> 00:30:09,120
as an input and we'll we'll compute the

00:30:06,840 --> 00:30:11,730
time between the current time and the

00:30:09,120 --> 00:30:14,340
time which was given so that's basically

00:30:11,730 --> 00:30:15,990
how you could calculate the response

00:30:14,340 --> 00:30:17,790
time and that's also the way we did it

00:30:15,990 --> 00:30:21,720
so this is basically the idea how you

00:30:17,790 --> 00:30:23,430
how you calculate the response time but

00:30:21,720 --> 00:30:25,800
this is already a default configuration

00:30:23,430 --> 00:30:27,740
for sure until today there is another

00:30:25,800 --> 00:30:31,370
one string replace all you can also

00:30:27,740 --> 00:30:34,230
define some help for actions so just say

00:30:31,370 --> 00:30:36,690
so now this is the most important part

00:30:34,230 --> 00:30:39,090
so this is the rule and in the rule you

00:30:36,690 --> 00:30:41,130
are capable of of put the things

00:30:39,090 --> 00:30:44,490
together so you can put the scopes and

00:30:41,130 --> 00:30:46,530
the actions together so rule again has

00:30:44,490 --> 00:30:50,850
some action indications as our reset so

00:30:46,530 --> 00:30:53,600
you can invoke this action when a

00:30:50,850 --> 00:30:57,840
certain scope is reached so you first

00:30:53,600 --> 00:31:00,030
reference your scope and then you can

00:30:57,840 --> 00:31:01,680
also reference an action and you have

00:31:00,030 --> 00:31:06,270
two different paths you have entry and

00:31:01,680 --> 00:31:08,640
exit and entry will be will be executed

00:31:06,270 --> 00:31:11,490
before you are entering your scope and

00:31:08,640 --> 00:31:14,040
exit will be executed afterwards your in

00:31:11,490 --> 00:31:16,290
afterwards yeah after you're leaving

00:31:14,040 --> 00:31:17,880
your scope or just right before you are

00:31:16,290 --> 00:31:21,870
leaving the scope that's that's more

00:31:17,880 --> 00:31:23,940
precise and in this case we also can

00:31:21,870 --> 00:31:29,730
define a variable name where we just

00:31:23,940 --> 00:31:31,860
store the the input not the store where

00:31:29,730 --> 00:31:39,150
we store the return value of our action

00:31:31,860 --> 00:31:41,460
and we can now yes so so that's

00:31:39,150 --> 00:31:45,840
basically the idea and we can just refer

00:31:41,460 --> 00:31:47,460
to already existing return values of our

00:31:45,840 --> 00:31:52,370
action and based on that we can just

00:31:47,460 --> 00:31:54,750
simply calculate our method duration and

00:31:52,370 --> 00:31:58,320
since we are using this since nanos

00:31:54,750 --> 00:32:01,380
method and now we can simply just expose

00:31:58,320 --> 00:32:04,230
or define this metric as matter /

00:32:01,380 --> 00:32:05,950
duration and assign it with this value

00:32:04,230 --> 00:32:08,140
so that's basically the idea

00:32:05,950 --> 00:32:09,490
you can can can work with this

00:32:08,140 --> 00:32:13,200
configuration so it's very mighty

00:32:09,490 --> 00:32:16,450
because you can do nearly any everything

00:32:13,200 --> 00:32:18,280
so by now we just have to find there is

00:32:16,450 --> 00:32:20,770
a metric now you have to expose this

00:32:18,280 --> 00:32:22,810
metric to your for example Prometheus

00:32:20,770 --> 00:32:28,350
exporter or something like that and you

00:32:22,810 --> 00:32:31,060
can do this by simply define metric

00:32:28,350 --> 00:32:32,890
specifically define the unit description

00:32:31,060 --> 00:32:35,890
and so on so you probably might notice

00:32:32,890 --> 00:32:40,510
if you have seen the plane

00:32:35,890 --> 00:32:43,450
Prometheus scrape input so there is also

00:32:40,510 --> 00:32:44,560
a description which you can set and in

00:32:43,450 --> 00:32:47,920
addition to that you can define some

00:32:44,560 --> 00:32:50,380
fuse and the fuse in digital I have also

00:32:47,920 --> 00:32:54,300
some aggregation so you can can choose

00:32:50,380 --> 00:32:59,170
between some count last well you and

00:32:54,300 --> 00:33:01,660
yeah so in addition to that you can also

00:32:59,170 --> 00:33:04,330
at the at some some text so that would

00:33:01,660 --> 00:33:07,810
be the the configuration snippet which

00:33:04,330 --> 00:33:12,040
you would have to use in order to to add

00:33:07,810 --> 00:33:15,820
some additional business contacts to

00:33:12,040 --> 00:33:24,840
your metrics and with this the metric

00:33:15,820 --> 00:33:26,550
will be exposed so can you can skip this

00:33:24,840 --> 00:33:29,290
[Music]

00:33:26,550 --> 00:33:32,980
so this is this is about racing now we

00:33:29,290 --> 00:33:36,010
just heard about about what metrics how

00:33:32,980 --> 00:33:38,620
you you can get metrics but for sure it

00:33:36,010 --> 00:33:41,710
is also very very important to to define

00:33:38,620 --> 00:33:43,540
how you how your phrasing strategy is

00:33:41,710 --> 00:33:46,000
and you can do this also in a rule like

00:33:43,540 --> 00:33:49,390
M and there is a tracing part in this

00:33:46,000 --> 00:33:51,940
tracing part you can simply set starts

00:33:49,390 --> 00:33:53,890
panda true which says okay if I am in

00:33:51,940 --> 00:33:55,360
this curve in this go in this method or

00:33:53,890 --> 00:34:00,030
something like that then I will start

00:33:55,360 --> 00:34:04,510
tracing and you can also define a

00:34:00,030 --> 00:34:07,240
condition this means you can maybe

00:34:04,510 --> 00:34:09,820
compute with an action a very complex

00:34:07,240 --> 00:34:12,340
condition which says if user X is

00:34:09,820 --> 00:34:16,150
logging in and the weather is rainy then

00:34:12,340 --> 00:34:18,370
I want to start the span so this would

00:34:16,150 --> 00:34:19,490
be possible so you could do this don't

00:34:18,370 --> 00:34:23,659
know whether this is meaning

00:34:19,490 --> 00:34:25,310
but in you can at least do this and for

00:34:23,659 --> 00:34:27,440
sure you can also set a sample

00:34:25,310 --> 00:34:30,379
probability so we heard yesterday that

00:34:27,440 --> 00:34:32,659
it is possible to to just enable

00:34:30,379 --> 00:34:34,909
sampling so such that not each trace

00:34:32,659 --> 00:34:37,220
will be collected which is also very

00:34:34,909 --> 00:34:39,409
useful if you have a very huge setup and

00:34:37,220 --> 00:34:41,270
there are a lot of traces in your system

00:34:39,409 --> 00:34:44,649
this really can slow your system down

00:34:41,270 --> 00:34:47,710
and for sure you can also set this

00:34:44,649 --> 00:34:50,149
conditionally so you can also use

00:34:47,710 --> 00:34:54,679
additional input so that you just

00:34:50,149 --> 00:35:01,490
reference to you the return value of an

00:34:54,679 --> 00:35:03,200
action so this is also possible so this

00:35:01,490 --> 00:35:08,480
is a tracing flag and a sampling rate so

00:35:03,200 --> 00:35:12,589
I already set this so for sure I will

00:35:08,480 --> 00:35:13,849
already mentioned some exporters so for

00:35:12,589 --> 00:35:15,500
sure you have to define which is

00:35:13,849 --> 00:35:17,119
proudest you want to use there are

00:35:15,500 --> 00:35:19,580
several different exposes which are

00:35:17,119 --> 00:35:22,720
supported by Oh consensus and some of

00:35:19,580 --> 00:35:28,040
them not all of them we have implemented

00:35:22,720 --> 00:35:31,640
so as a small reminder so we are with

00:35:28,040 --> 00:35:34,670
open census we are able to expose the

00:35:31,640 --> 00:35:36,170
well use to different different tools

00:35:34,670 --> 00:35:40,339
and for each of this tool you need an

00:35:36,170 --> 00:35:42,440
export list and you can also define this

00:35:40,339 --> 00:35:44,750
in your configuration so it is possible

00:35:42,440 --> 00:35:47,540
to just reference under exporters

00:35:44,750 --> 00:35:50,470
metrics parameters and just yeah just

00:35:47,540 --> 00:35:53,210
define okay it should be enabled and

00:35:50,470 --> 00:35:55,820
this is the host and the port and then

00:35:53,210 --> 00:35:58,670
it will be exposed under this this under

00:35:55,820 --> 00:36:00,890
the defined port this is also

00:35:58,670 --> 00:36:03,349
dynamically changeable so it is also

00:36:00,890 --> 00:36:05,810
possible just just just deactivate and

00:36:03,349 --> 00:36:07,670
activate takes for us which is also

00:36:05,810 --> 00:36:10,550
really really nice there might be some

00:36:07,670 --> 00:36:15,530
use cases where you will need this just

00:36:10,550 --> 00:36:19,550
as smaller mutations they are exporters

00:36:15,530 --> 00:36:23,180
which have a yes where this isn't

00:36:19,550 --> 00:36:25,160
possible but for promises is possible so

00:36:23,180 --> 00:36:27,050
and in general it is possible and for

00:36:25,160 --> 00:36:31,060
most of the exporters it is possible but

00:36:27,050 --> 00:36:31,060
there are some where this is not working

00:36:37,780 --> 00:36:43,460
so and the same is also stated for it

00:36:40,880 --> 00:36:46,040
first for tracing for sure so we also

00:36:43,460 --> 00:36:47,690
have to configure exporters for your

00:36:46,040 --> 00:36:51,590
tracing in this case you can simply

00:36:47,690 --> 00:36:54,440
define the kind which will be which will

00:36:51,590 --> 00:36:56,420
be also Silk'n and you can just simply

00:36:54,440 --> 00:36:59,630
enable your exporters as you can also

00:36:56,420 --> 00:37:03,860
you could also just activate second

00:36:59,630 --> 00:37:05,570
anti-ager would be possible yes don't

00:37:03,860 --> 00:37:07,070
know whether this is a meaningful use

00:37:05,570 --> 00:37:08,780
case but it would be at least possible

00:37:07,070 --> 00:37:13,580
and for sure there is also an open

00:37:08,780 --> 00:37:16,660
sensors HN which you can also add so

00:37:13,580 --> 00:37:20,260
this agent can be done process the data

00:37:16,660 --> 00:37:29,900
and maybe forward again to some other

00:37:20,260 --> 00:37:33,140
collectors and so on so that's that

00:37:29,900 --> 00:37:36,230
that's it's so far from now and I would

00:37:33,140 --> 00:37:39,620
just jump right into the demo so in the

00:37:36,230 --> 00:37:43,070
meantime while I am preparing here you

00:37:39,620 --> 00:37:44,510
can just ask some questions so if you

00:37:43,070 --> 00:37:47,420
have some questions maybe I can also

00:37:44,510 --> 00:37:51,650
answer it during the demo so maybe then

00:37:47,420 --> 00:38:04,190
some things get more clear just have to

00:37:51,650 --> 00:38:11,750
switch my screens so okay maybe it works

00:38:04,190 --> 00:38:16,550
maybe not let's see okay you can see

00:38:11,750 --> 00:38:18,500
something that's quite cool okay so um

00:38:16,550 --> 00:38:23,540
let's continue I hope everything is

00:38:18,500 --> 00:38:26,030
working now yeah it works

00:38:23,540 --> 00:38:27,830
so we I've prepared a demo setup so we

00:38:26,030 --> 00:38:30,170
have some some symptom of the occasion

00:38:27,830 --> 00:38:33,230
which is called pet link you might

00:38:30,170 --> 00:38:35,630
probably know this this this this demo

00:38:33,230 --> 00:38:39,410
it's it's it's just it's a very simple

00:38:35,630 --> 00:38:40,760
micro service application and all these

00:38:39,410 --> 00:38:43,250
different services are written in Java

00:38:40,760 --> 00:38:45,280
so it's very it's perfect to use in our

00:38:43,250 --> 00:38:46,540
case to just show you the more

00:38:45,280 --> 00:38:47,950
and in in the background there's

00:38:46,540 --> 00:38:51,430
currently running a low test which is

00:38:47,950 --> 00:38:54,520
continuously executing some some

00:38:51,430 --> 00:38:58,210
requests on the system yeah so it's very

00:38:54,520 --> 00:39:00,130
very simple you can yes you can have a

00:38:58,210 --> 00:39:02,950
look on the owners and so on so it's not

00:39:00,130 --> 00:39:05,200
too interesting for us but what is more

00:39:02,950 --> 00:39:08,470
interesting for us I want you to just

00:39:05,200 --> 00:39:11,950
wanted to show you one output of one of

00:39:08,470 --> 00:39:15,490
these agents which are currently running

00:39:11,950 --> 00:39:18,420
on one of this service and you to see

00:39:15,490 --> 00:39:20,950
this the output of the of the of the the

00:39:18,420 --> 00:39:23,080
parameters exporter which we can which

00:39:20,950 --> 00:39:25,510
can be then scraped so in this case we

00:39:23,080 --> 00:39:28,270
would be have would have the HTTP out

00:39:25,510 --> 00:39:30,880
response time of the the certain

00:39:28,270 --> 00:39:32,770
application and yes you have some some

00:39:30,880 --> 00:39:36,720
additional tags which somehow define the

00:39:32,770 --> 00:39:39,220
context of this metric so let's continue

00:39:36,720 --> 00:39:42,580
in addition to that we have a Prometheus

00:39:39,220 --> 00:39:44,260
running and yes you will see that there

00:39:42,580 --> 00:39:46,750
are average of different metrics which

00:39:44,260 --> 00:39:48,610
we can have a look on so there's also

00:39:46,750 --> 00:39:50,860
some there are also some self metrics so

00:39:48,610 --> 00:39:54,580
we also a monitoring ourselves in order

00:39:50,860 --> 00:39:59,470
to get a feeling how how is the overhead

00:39:54,580 --> 00:40:04,570
how is our agent performing and so on so

00:39:59,470 --> 00:40:07,690
I'm just will and in addition to that

00:40:04,570 --> 00:40:19,210
I'm for sure providing some default for

00:40:07,690 --> 00:40:20,440
fana dashboards which P so so let's have

00:40:19,210 --> 00:40:23,590
a look on there with you about the

00:40:20,440 --> 00:40:26,530
different dashboards with here maybe I

00:40:23,590 --> 00:40:28,750
can just zoom up it out because

00:40:26,530 --> 00:40:32,530
otherwise I'm not capable of showing you

00:40:28,750 --> 00:40:34,570
anything so there is some some basic

00:40:32,530 --> 00:40:35,770
dashboards as such as a system metrics

00:40:34,570 --> 00:40:37,540
so we can just have a look on this

00:40:35,770 --> 00:40:40,150
metric so all these metrics are

00:40:37,540 --> 00:40:42,160
currently centered by our different our

00:40:40,150 --> 00:40:43,750
different services so this idea is just

00:40:42,160 --> 00:40:46,660
the talk of container ID that's why it

00:40:43,750 --> 00:40:49,990
is set like this we can just also adapt

00:40:46,660 --> 00:40:51,880
this you see the number of CPUs you see

00:40:49,990 --> 00:40:54,550
the current CPU utilization the load

00:40:51,880 --> 00:40:56,830
average CPU usage and so on and also

00:40:54,550 --> 00:40:58,650
some disk metrics which we can also then

00:40:56,830 --> 00:41:00,420
use to do some alerting later so

00:40:58,650 --> 00:41:02,670
it would be also possible as you can

00:41:00,420 --> 00:41:04,140
also simply use just profounder as a

00:41:02,670 --> 00:41:06,270
learning tool

00:41:04,140 --> 00:41:10,500
although I am wouldn't recommend this

00:41:06,270 --> 00:41:12,030
but it would be possible and so this is

00:41:10,500 --> 00:41:13,740
basically what you can see you can also

00:41:12,030 --> 00:41:17,970
filter by pipe at the different house

00:41:13,740 --> 00:41:21,270
for sure in addition to that when you

00:41:17,970 --> 00:41:22,530
also have some some more aggregated

00:41:21,270 --> 00:41:25,230
dashboard

00:41:22,530 --> 00:41:26,940
such as the HTTP overview which is

00:41:25,230 --> 00:41:30,240
really interesting because you just now

00:41:26,940 --> 00:41:33,360
have an overview about all existing HTTP

00:41:30,240 --> 00:41:35,490
calls and the average response time so

00:41:33,360 --> 00:41:38,340
I'm sorry for the design hour for the

00:41:35,490 --> 00:41:41,300
footer because if I assume in in this

00:41:38,340 --> 00:41:43,620
this way it will not be too pretty but

00:41:41,300 --> 00:41:46,080
what you can see is here the average

00:41:43,620 --> 00:41:52,460
response time of certain HTTP calls and

00:41:46,080 --> 00:41:57,300
also the just the response time in in

00:41:52,460 --> 00:41:59,550
per time interval and what what's also

00:41:57,300 --> 00:42:01,890
interesting what might be also

00:41:59,550 --> 00:42:04,290
interesting is the the outcoming request

00:42:01,890 --> 00:42:06,060
for sure and you can see this for all of

00:42:04,290 --> 00:42:09,090
the different services in this case okay

00:42:06,060 --> 00:42:11,970
this is also working more pretty way so

00:42:09,090 --> 00:42:16,440
yeah our API gateway customer service

00:42:11,970 --> 00:42:18,410
wet service and so on and you will get

00:42:16,440 --> 00:42:22,950
this for free so this is already working

00:42:18,410 --> 00:42:28,130
without any dynamic or any additional

00:42:22,950 --> 00:42:32,610
effort on on changing the configuration

00:42:28,130 --> 00:42:34,860
as I already said um there is also self

00:42:32,610 --> 00:42:39,780
monitoring which is also quite

00:42:34,860 --> 00:42:42,030
interesting so what we did here we tried

00:42:39,780 --> 00:42:46,620
to visualize the instrumentation scope

00:42:42,030 --> 00:42:49,170
and also yes the instrumentation scale

00:42:46,620 --> 00:42:51,390
stayed so you see the class is loaded by

00:42:49,170 --> 00:42:53,610
JVM the instrumented classes and are

00:42:51,390 --> 00:42:56,340
there any classes pending for analysis

00:42:53,610 --> 00:42:58,950
so is there a bad job which is currently

00:42:56,340 --> 00:43:03,000
in Pro press returns forming the

00:42:58,950 --> 00:43:05,550
bytecode and for sure you see sudden

00:43:03,000 --> 00:43:10,410
such a progress bar which just realises

00:43:05,550 --> 00:43:12,480
the instrumentation progress and for

00:43:10,410 --> 00:43:14,190
sure again you will see this for all of

00:43:12,480 --> 00:43:18,420
different services what we recently

00:43:14,190 --> 00:43:20,340
added this also the number of errors the

00:43:18,420 --> 00:43:24,240
number of errors and warnings and other

00:43:20,340 --> 00:43:26,280
things in the in the log file of our of

00:43:24,240 --> 00:43:27,810
our ancient so you will also see here

00:43:26,280 --> 00:43:30,300
okay there might be an error now our

00:43:27,810 --> 00:43:32,640
agent and then you can do the deep dive

00:43:30,300 --> 00:43:34,560
so that's an added feature which we have

00:43:32,640 --> 00:43:40,950
recently added in order to have a

00:43:34,560 --> 00:43:42,930
feeling how healthy is our agent so and

00:43:40,950 --> 00:43:44,700
if you're concerned about the concept

00:43:42,930 --> 00:43:45,869
that you can do such a mighty stuff

00:43:44,700 --> 00:43:47,040
about the configuration if you do

00:43:45,869 --> 00:43:49,140
something wrong so if there is a

00:43:47,040 --> 00:43:53,220
compiler error an error in your action

00:43:49,140 --> 00:43:55,680
so the the agent will then just disable

00:43:53,220 --> 00:43:59,520
this this this rule so it cannot heart

00:43:55,680 --> 00:44:08,609
heard your or cannot harm your your main

00:43:59,520 --> 00:44:10,080
application saying the most brief thing

00:44:08,609 --> 00:44:12,930
I would say is the service craft for

00:44:10,080 --> 00:44:15,300
sure so what we are supporting is such a

00:44:12,930 --> 00:44:19,619
service craft which is also fancy

00:44:15,300 --> 00:44:21,240
animates for sure so there is also a

00:44:19,619 --> 00:44:24,030
correlation between the number of

00:44:21,240 --> 00:44:27,540
different bullets here and the Greek

00:44:24,030 --> 00:44:30,600
rest but it's not exactly the same for

00:44:27,540 --> 00:44:33,240
sure so what you can see here is simply

00:44:30,600 --> 00:44:35,070
okay there's there's some some user or

00:44:33,240 --> 00:44:37,680
in this case this would be a low test

00:44:35,070 --> 00:44:39,810
which is doing some requests against our

00:44:37,680 --> 00:44:41,550
system there's first Evi gateway and

00:44:39,810 --> 00:44:43,200
then there are requests to the visit

00:44:41,550 --> 00:44:45,180
service and there is a database for sure

00:44:43,200 --> 00:44:48,960
and there's a discovery service which

00:44:45,180 --> 00:44:50,790
isn't monitored maybe but we also see

00:44:48,960 --> 00:44:53,100
there is traffic in this direction so we

00:44:50,790 --> 00:44:55,020
can also visualize it and the most

00:44:53,100 --> 00:44:57,300
important thing on this this realization

00:44:55,020 --> 00:44:59,369
is this is only done by by using metrics

00:44:57,300 --> 00:45:01,740
so usually the tools which are

00:44:59,369 --> 00:45:03,660
supporting this are do this by based on

00:45:01,740 --> 00:45:07,050
tracing and even if you and if you have

00:45:03,660 --> 00:45:09,420
sampled traces this picture might not be

00:45:07,050 --> 00:45:11,790
as representative as you want to have it

00:45:09,420 --> 00:45:15,210
but if you do this on aggregate metrics

00:45:11,790 --> 00:45:20,180
is it is as as precise as it can be and

00:45:15,210 --> 00:45:24,240
it is also mmm you do not have to the

00:45:20,180 --> 00:45:25,980
overhead then using tracing for doing

00:45:24,240 --> 00:45:28,230
this stuff and this is

00:45:25,980 --> 00:45:30,119
is somehow part of our project but this

00:45:28,230 --> 00:45:32,100
can also be used with other tools so if

00:45:30,119 --> 00:45:33,570
you are interested in - in the service

00:45:32,100 --> 00:45:35,310
craft this is also open source you can

00:45:33,570 --> 00:45:38,550
simply use it and you just have to

00:45:35,310 --> 00:45:41,970
provide the data in the proper format

00:45:38,550 --> 00:45:45,810
such that this this panel can can be can

00:45:41,970 --> 00:45:47,820
be used so this is just a Crafar panel

00:45:45,810 --> 00:45:53,340
which we just added and you can just

00:45:47,820 --> 00:45:55,770
also find it on github last but not

00:45:53,340 --> 00:45:57,930
least I want to show you a dashboard of

00:45:55,770 --> 00:45:59,550
the end user monitoring therefore I just

00:45:57,930 --> 00:46:17,970
have to prepare something which

00:45:59,550 --> 00:46:22,140
hopefully then works now let's see what

00:46:17,970 --> 00:46:24,480
happens so there is there is this UN

00:46:22,140 --> 00:46:27,540
summary dashboard which I will show it

00:46:24,480 --> 00:46:30,500
to you now and this somehow summarizes

00:46:27,540 --> 00:46:33,900
all the metrics which we are currently

00:46:30,500 --> 00:46:37,530
sending from our JavaScript outline to

00:46:33,900 --> 00:46:40,050
our collector and since our Lotus's does

00:46:37,530 --> 00:46:43,260
not execute JavaScript I just have to do

00:46:40,050 --> 00:46:47,910
some requests on my own so I just will

00:46:43,260 --> 00:46:52,350
click on the application register some

00:46:47,910 --> 00:46:55,590
thing let's see it work yes there were

00:46:52,350 --> 00:46:58,560
some requests and what we seen here now

00:46:55,590 --> 00:47:02,640
okay there was a request from Germany

00:46:58,560 --> 00:47:04,320
and there were some some requests on

00:47:02,640 --> 00:47:08,580
some different pages you can also now

00:47:04,320 --> 00:47:12,030
filter based based on the UL I just have

00:47:08,580 --> 00:47:16,040
to refresh maybe I just should work

00:47:12,030 --> 00:47:19,680
sometimes there's it is a bit patchy and

00:47:16,040 --> 00:47:22,350
you can also fill the fisher pie by by

00:47:19,680 --> 00:47:24,350
country so let's just refresh now it

00:47:22,350 --> 00:47:29,130
works yeah

00:47:24,350 --> 00:47:33,359
so you see here for example an average

00:47:29,130 --> 00:47:35,550
speed index of all clients which are

00:47:33,359 --> 00:47:37,770
currently connected so the speediness is

00:47:35,550 --> 00:47:39,130
basically does anyone of you know the

00:47:37,770 --> 00:47:41,290
speed index on

00:47:39,130 --> 00:47:45,820
client-side JavaScript side so it's

00:47:41,290 --> 00:47:49,480
somehow an algorithmic idea to identify

00:47:45,820 --> 00:47:53,950
whether webpages is is fast and it they

00:47:49,480 --> 00:47:58,510
used the rendering of the prowess in

00:47:53,950 --> 00:48:00,340
order to to compute this number for

00:47:58,510 --> 00:48:02,200
certain two basica and avocation timings

00:48:00,340 --> 00:48:04,990
are quite interesting such as the load

00:48:02,200 --> 00:48:06,400
time the end the page ready time and for

00:48:04,990 --> 00:48:08,500
sure there's also visual ready time

00:48:06,400 --> 00:48:12,400
which is a more abstract metric which

00:48:08,500 --> 00:48:14,910
somehow wants to express M until when

00:48:12,400 --> 00:48:17,440
the webpage is really ready to use so

00:48:14,910 --> 00:48:19,990
you probably might notice the webpage

00:48:17,440 --> 00:48:21,940
doesn't have has loaded in completely

00:48:19,990 --> 00:48:23,770
but you can already use some kind of

00:48:21,940 --> 00:48:28,420
icons and click on it and this is also

00:48:23,770 --> 00:48:30,580
very interesting metric so what I want

00:48:28,420 --> 00:48:35,650
to show you now I hope this works I just

00:48:30,580 --> 00:48:40,840
will say I will just do ah yes I will do

00:48:35,650 --> 00:48:44,830
a request from Russia so we just have to

00:48:40,840 --> 00:48:48,370
connect and now which is shifted to some

00:48:44,830 --> 00:48:51,940
some requests maybe a woman just

00:48:48,370 --> 00:48:54,100
introduced and dad and let's see ah

00:48:51,940 --> 00:48:55,750
there's someone which is which is

00:48:54,100 --> 00:48:59,830
currently using our application from

00:48:55,750 --> 00:49:03,010
Russia so now you can also filter again

00:48:59,830 --> 00:49:05,050
I have to refresh I'm sorry for that now

00:49:03,010 --> 00:49:06,700
you can fill the base based on the

00:49:05,050 --> 00:49:08,650
country codes and this is quite quite

00:49:06,700 --> 00:49:12,370
cool feature I mean the dish that you

00:49:08,650 --> 00:49:13,900
can also define some arbitrary country

00:49:12,370 --> 00:49:15,550
codes not really country codes but

00:49:13,900 --> 00:49:17,940
additional textually which we want to

00:49:15,550 --> 00:49:19,740
add so it could also be that you want to

00:49:17,940 --> 00:49:23,800
distinguish between different

00:49:19,740 --> 00:49:26,500
departments in your in your company and

00:49:23,800 --> 00:49:28,360
then you just use this based on IP so

00:49:26,500 --> 00:49:31,900
you can just define some up here ranges

00:49:28,360 --> 00:49:34,690
and say ok this IP range should be

00:49:31,900 --> 00:49:36,220
mapped to Department a and this IP one

00:49:34,690 --> 00:49:37,630
showed me about 2 with Department P and

00:49:36,220 --> 00:49:39,400
then you can see all the public B is

00:49:37,630 --> 00:49:42,070
always doing some really weird stuff

00:49:39,400 --> 00:49:46,570
with our application and yes this can be

00:49:42,070 --> 00:49:50,140
visible here so the last thing which I

00:49:46,570 --> 00:49:51,920
want to show it to you is changing the

00:49:50,140 --> 00:49:55,280
instrumentation

00:49:51,920 --> 00:49:57,950
and so let's have a look on the traces

00:49:55,280 --> 00:49:59,840
which I've never okay this is I forgot

00:49:57,950 --> 00:50:03,350
so let's have a look on the traces and

00:49:59,840 --> 00:50:06,700
there's this this is this request which

00:50:03,350 --> 00:50:11,360
which gets the details of the owner and

00:50:06,700 --> 00:50:13,490
I want I now want to know how is the

00:50:11,360 --> 00:50:16,310
name of this owner so how is the name of

00:50:13,490 --> 00:50:18,200
the owner eight I just want to notice so

00:50:16,310 --> 00:50:22,190
what can I do now

00:50:18,200 --> 00:50:27,190
I just just log into our configuration

00:50:22,190 --> 00:50:30,860
UI with hopefully the right password

00:50:27,190 --> 00:50:33,230
hey so when there you see the overview

00:50:30,860 --> 00:50:35,840
about the current current configuration

00:50:33,230 --> 00:50:38,420
and we will simply add an additional

00:50:35,840 --> 00:50:40,670
configuration which does something fancy

00:50:38,420 --> 00:50:42,980
so we just say okay there is a new

00:50:40,670 --> 00:50:46,580
configuration file in and I mean I would

00:50:42,980 --> 00:50:56,780
say we just call it with some C fancy

00:50:46,580 --> 00:51:00,680
stuff fancy stuff so ok I've added it

00:50:56,780 --> 00:51:07,840
here and it doesn't matter so now I have

00:51:00,680 --> 00:51:07,840
to just copy it from my clean desktop

00:51:17,530 --> 00:51:34,760
prepared better just to many files okay

00:51:31,370 --> 00:51:38,240
was just curious okay that's it's

00:51:34,760 --> 00:51:41,540
embarrassing mmm I also love Damon is

00:51:38,240 --> 00:51:44,950
okay I find it so since we have only a

00:51:41,540 --> 00:51:44,950
few minutes left I have to hurry a bit

00:51:46,450 --> 00:51:52,280
so so I mean I would simply add this

00:51:50,000 --> 00:51:55,100
configuration so I already have prepared

00:51:52,280 --> 00:51:57,920
it just for you to understand there's a

00:51:55,100 --> 00:52:00,380
scope defined which exactly references a

00:51:57,920 --> 00:52:03,590
certain method which which says get all

00:52:00,380 --> 00:52:05,400
details in interaction I I will use the

00:52:03,590 --> 00:52:08,370
return value of this method as

00:52:05,400 --> 00:52:11,550
put and return then an Oscar return

00:52:08,370 --> 00:52:12,780
value dot get first name so my

00:52:11,550 --> 00:52:15,960
assumption would be now this action

00:52:12,780 --> 00:52:20,730
would return the first name of this

00:52:15,960 --> 00:52:22,380
owner and in the rule we just put the

00:52:20,730 --> 00:52:24,870
things together and say ok there is an

00:52:22,380 --> 00:52:26,400
owner name and we just add the owner

00:52:24,870 --> 00:52:28,310
name as an additional attribute to

00:52:26,400 --> 00:52:32,160
outrace so this would be the other year

00:52:28,310 --> 00:52:34,590
so I will just save it now and now it

00:52:32,160 --> 00:52:37,710
should be just let let me quickly show

00:52:34,590 --> 00:52:39,480
it to you so now my assumption would be

00:52:37,710 --> 00:52:41,730
a key there is implementation focus

00:52:39,480 --> 00:52:44,910
because we now have updated our

00:52:41,730 --> 00:52:49,650
instrumentation now we can just step

00:52:44,910 --> 00:52:54,510
back or yeah go UI and find out whether

00:52:49,650 --> 00:52:57,330
our changes worked so let me go back to

00:52:54,510 --> 00:53:00,390
the research so they're still coming

00:52:57,330 --> 00:53:04,140
some old traces since it is buffering a

00:53:00,390 --> 00:53:10,800
bit bad maybe we go catch some traces

00:53:04,140 --> 00:53:13,920
which might be interesting sometimes you

00:53:10,800 --> 00:53:18,680
have to wait a bit and so we see the new

00:53:13,920 --> 00:53:20,790
trace so i okay there's only 9 spans I

00:53:18,680 --> 00:53:23,430
attend spans ok we have one additional

00:53:20,790 --> 00:53:27,410
one which sounds already promising and

00:53:23,430 --> 00:53:30,990
now we see there is an additional span

00:53:27,410 --> 00:53:32,760
which is called get own details ok great

00:53:30,990 --> 00:53:35,430
so if we have a look on this or we say

00:53:32,760 --> 00:53:38,970
oh that it was Betty it was Betty

00:53:35,430 --> 00:53:42,900
it was Betty's which which was requested

00:53:38,970 --> 00:53:45,930
so this it would be the yeah at the use

00:53:42,900 --> 00:53:49,620
case which we can which we can support

00:53:45,930 --> 00:53:52,080
that you can just add arbitrary tags and

00:53:49,620 --> 00:53:57,600
this isn't this this example is just a

00:53:52,080 --> 00:54:00,240
very easy one for sure yes yeah it's

00:53:57,600 --> 00:54:01,800
yeah we can just also start questioning

00:54:00,240 --> 00:54:05,010
its ok

00:54:01,800 --> 00:54:08,850
I'm wondering the you have the UI for

00:54:05,010 --> 00:54:11,580
your llamo do you have to use the UI or

00:54:08,850 --> 00:54:14,640
is it possible to use config management

00:54:11,580 --> 00:54:16,620
to like puppet or yet for sure you can

00:54:14,640 --> 00:54:18,840
also use some some arbitrary tool since

00:54:16,620 --> 00:54:20,460
there is there are 2 different

00:54:18,840 --> 00:54:23,400
abilities you can it use firebase

00:54:20,460 --> 00:54:26,460
configuration or or using our server but

00:54:23,400 --> 00:54:29,400
also our server is capable of just doing

00:54:26,460 --> 00:54:31,830
it why API requests so maybe you can use

00:54:29,400 --> 00:54:34,230
the configuration server and do some

00:54:31,830 --> 00:54:35,820
some automated request against the

00:54:34,230 --> 00:54:38,100
configuration server but it should be

00:54:35,820 --> 00:54:40,290
also possible to just provision the

00:54:38,100 --> 00:54:43,080
configuration with puppet on your

00:54:40,290 --> 00:54:49,050
different host so this is possible all

00:54:43,080 --> 00:54:51,000
right thanks so maybe this was a good

00:54:49,050 --> 00:54:52,380
starting point to to start the

00:54:51,000 --> 00:54:54,900
questioning so if there are any other

00:54:52,380 --> 00:54:58,440
questions I'm really happy and also if

00:54:54,900 --> 00:55:03,960
there are just comments or or objections

00:54:58,440 --> 00:55:07,980
I also I'm also very happy you are only

00:55:03,960 --> 00:55:11,610
focused on Java or also possible to have

00:55:07,980 --> 00:55:16,080
seen some SQL information yes so it's in

00:55:11,610 --> 00:55:17,730
or PHP yes so um SQL is so for sure we

00:55:16,080 --> 00:55:21,600
want to support it it is possible to

00:55:17,730 --> 00:55:23,880
have a inside on the SQL query but we do

00:55:21,600 --> 00:55:25,560
not monitor the database itself in a

00:55:23,880 --> 00:55:28,140
specific manner so there might be some

00:55:25,560 --> 00:55:30,840
some additional exporters which can be

00:55:28,140 --> 00:55:35,330
used and our main focuses on Java

00:55:30,840 --> 00:55:38,040
since our customers just now only or

00:55:35,330 --> 00:55:40,350
just interested in in a Java context oh

00:55:38,040 --> 00:55:41,690
yeah and also we have the experience in

00:55:40,350 --> 00:55:45,840
doing it in Java since we have this

00:55:41,690 --> 00:55:48,980
history yeah so but for sure you are

00:55:45,840 --> 00:55:51,630
able to communicate with other

00:55:48,980 --> 00:55:56,120
technologies but we do not support the

00:55:51,630 --> 00:55:56,120
instrumentation for them thank you

00:56:08,830 --> 00:56:17,750
hi I've seen the roadmap slide I think

00:56:13,460 --> 00:56:20,270
yes and then I saw kubernetes on there

00:56:17,750 --> 00:56:21,290
yeah yeah I forgot because because of

00:56:20,270 --> 00:56:24,950
the demo yes

00:56:21,290 --> 00:56:27,440
so we want to also support kubernetes

00:56:24,950 --> 00:56:31,130
what would be in a crate at it would be

00:56:27,440 --> 00:56:33,710
to to support our agent as a daemon set

00:56:31,130 --> 00:56:36,100
so that you can simply deploy - to all

00:56:33,710 --> 00:56:40,550
existing nodes and that there is a

00:56:36,100 --> 00:56:42,530
automated detection of JVM processes

00:56:40,550 --> 00:56:44,660
which will be then automatically

00:56:42,530 --> 00:56:48,470
attached so this this attachment already

00:56:44,660 --> 00:56:50,180
is working so you just have to yes at

00:56:48,470 --> 00:56:53,510
this additional functionality that it

00:56:50,180 --> 00:56:55,160
works also in the kubernetes world but

00:56:53,510 --> 00:56:57,410
we have this on the roadmap and this is

00:56:55,160 --> 00:57:01,550
also a part which we want to where we

00:56:57,410 --> 00:57:03,320
want to invest okay thank you another

00:57:01,550 --> 00:57:06,140
question is like everything that you

00:57:03,320 --> 00:57:08,780
showed us today is production ready

00:57:06,140 --> 00:57:10,400
customers are already using it yes

00:57:08,780 --> 00:57:15,020
there's there's one customer which is

00:57:10,400 --> 00:57:17,440
currently using it so yeah so it is it

00:57:15,020 --> 00:57:23,450
is production when you for sure yeah

00:57:17,440 --> 00:57:25,040
yeah thank you for sure it is or it is

00:57:23,450 --> 00:57:27,140
open source and there might be is also

00:57:25,040 --> 00:57:28,490
some some missing features or something

00:57:27,140 --> 00:57:32,960
like that but it really depends on your

00:57:28,490 --> 00:57:34,310
needs I would say can you show us the

00:57:32,960 --> 00:57:36,550
roadmap yes

00:57:34,310 --> 00:57:36,550
sure

00:57:39,280 --> 00:57:42,369
[Music]

00:57:50,970 --> 00:57:54,619
and we internet connection but

00:58:04,300 --> 00:58:10,690
so it's more Rick fast recap so what we

00:58:09,010 --> 00:58:12,850
also want to do is anomaly detection

00:58:10,690 --> 00:58:15,370
that is currently in progress on support

00:58:12,850 --> 00:58:19,840
kubernetes has already told and since

00:58:15,370 --> 00:58:22,210
there is this change of open sensors to

00:58:19,840 --> 00:58:25,360
towards open telemetry we want also in

00:58:22,210 --> 00:58:28,780
support of telemetry for sure so there's

00:58:25,360 --> 00:58:34,840
this combat combat David so they are

00:58:28,780 --> 00:58:42,160
compatible yes yes that that's why it

00:58:34,840 --> 00:58:44,710
won't be too hard to do this and also as

00:58:42,160 --> 00:58:47,860
already told we won't also want to

00:58:44,710 --> 00:58:50,700
support tracing for the end user

00:58:47,860 --> 00:58:50,700
monitoring part

00:58:59,450 --> 00:59:03,470
okay thank you very much

00:59:04,270 --> 00:59:18,940
[Applause]

00:59:08,790 --> 00:59:18,940
[Music]

00:59:22,540 --> 00:59:25,320

YouTube URL: https://www.youtube.com/watch?v=SmafGFUu5_M


