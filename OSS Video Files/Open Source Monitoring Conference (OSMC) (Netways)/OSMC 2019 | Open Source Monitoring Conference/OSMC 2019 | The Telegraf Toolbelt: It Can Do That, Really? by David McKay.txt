Title: OSMC 2019 | The Telegraf Toolbelt: It Can Do That, Really? by David McKay
Publication date: 2019-11-18
Playlist: OSMC 2019 | Open Source Monitoring Conference
Description: 
	Telegraf is an agent for collecting, processing, aggregating, and writing metrics.

With over 200 plugins, Telegraf can fetch metrics from a variety of sources, allowing you to build aggregations and write those metrics to InfluxDB, Prometheus, Kafka, and more.

In this talk, we will take a look at some of the lesser known, but awesome, plugins that are often overlooked; as well as how to use Telegraf for monitoring of Cloud Native systems.


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Musik: FRAMETRAXX
Captions: 
	00:00:13,790 --> 00:00:19,770
me everyone

00:00:16,640 --> 00:00:23,130
so first a little bit about myself I'm

00:00:19,770 --> 00:00:24,720
from Scotland I have nine pets if you

00:00:23,130 --> 00:00:26,730
don't know what a chinchilla is or a

00:00:24,720 --> 00:00:29,430
dagger I've got loads of photos come and

00:00:26,730 --> 00:00:31,680
speak to me I'm a lover of esoteric

00:00:29,430 --> 00:00:36,540
programming languages has anyone heard

00:00:31,680 --> 00:00:36,930
of Pony Lang no alright one person okay

00:00:36,540 --> 00:00:38,760
cool

00:00:36,930 --> 00:00:40,260
and so yeah I like to play with random

00:00:38,760 --> 00:00:42,090
programming languages currently my

00:00:40,260 --> 00:00:43,200
favorite language is rust it seems like

00:00:42,090 --> 00:00:45,600
the whole world seems to be going that

00:00:43,200 --> 00:00:47,280
way so if anyone wants to talk about

00:00:45,600 --> 00:00:49,680
weird and random program and I would use

00:00:47,280 --> 00:00:52,290
again come and speak to me I'm on the

00:00:49,680 --> 00:00:53,550
kubernetes release team so I like to do

00:00:52,290 --> 00:00:55,140
a lot of things with kubernetes if

00:00:53,550 --> 00:00:55,980
anyone wants to talk kubernetes again

00:00:55,140 --> 00:00:59,969
I'm oli

00:00:55,980 --> 00:01:01,739
I'm here oh dear animus to ik um so I

00:00:59,969 --> 00:01:04,379
know I take things to come I thank too

00:01:01,739 --> 00:01:05,929
much and I do a lot of meditations I

00:01:04,379 --> 00:01:09,959
consider myself quite a pragmatic person

00:01:05,929 --> 00:01:12,179
quite a patient person so as far as my

00:01:09,959 --> 00:01:14,939
job I'm a developer advocate for a

00:01:12,179 --> 00:01:20,310
company code and flux data as anyone

00:01:14,939 --> 00:01:23,189
heard of them cool so if we're gonna do

00:01:20,310 --> 00:01:28,590
it's a boring show of hands but who's

00:01:23,189 --> 00:01:32,999
using em flux DB suite who's using

00:01:28,590 --> 00:01:35,999
Telegraph alright okay so but half the

00:01:32,999 --> 00:01:37,590
room maybe so for those that aren't

00:01:35,999 --> 00:01:41,399
familiar with Telegraph we're gonna take

00:01:37,590 --> 00:01:42,689
a quick look at it just now cuz I always

00:01:41,399 --> 00:01:48,810
like to start my talk with the demo

00:01:42,689 --> 00:01:52,590
let's just create a temp directory is so

00:01:48,810 --> 00:01:54,479
telegraph is an agent it collects

00:01:52,590 --> 00:01:56,279
metrics from a variety of sources and

00:01:54,479 --> 00:01:58,619
stores them and your time series

00:01:56,279 --> 00:02:01,319
database of choice now what's really

00:01:58,619 --> 00:02:03,119
nice about influx data is that

00:02:01,319 --> 00:02:05,880
everything the company does is open

00:02:03,119 --> 00:02:08,220
source you don't have to use em plucks

00:02:05,880 --> 00:02:09,810
DB to use todra if you want to use

00:02:08,220 --> 00:02:13,019
Prometheus that's fine

00:02:09,810 --> 00:02:14,280
if you're using now give us the same you

00:02:13,019 --> 00:02:15,410
know Cassandra it doesn't really matter

00:02:14,280 --> 00:02:17,240
what the backend is

00:02:15,410 --> 00:02:19,280
Telegraph probably supports a plugin

00:02:17,240 --> 00:02:20,660
that allows you to write to it so we we

00:02:19,280 --> 00:02:22,760
like to thank to be a part of a very

00:02:20,660 --> 00:02:24,440
inclusive and open monitor and landscape

00:02:22,760 --> 00:02:26,360
and we don't necessarily want to force

00:02:24,440 --> 00:02:29,030
you to use n plucks DB if you don't want

00:02:26,360 --> 00:02:30,200
to so Telegraph is really cool and

00:02:29,030 --> 00:02:33,530
that's what I want you to walk away from

00:02:30,200 --> 00:02:36,140
this talk with so it uses Tamil for its

00:02:33,530 --> 00:02:40,220
configuration that's gonna be part this

00:02:36,140 --> 00:02:44,470
mall right okay some of the back thumbs

00:02:40,220 --> 00:02:44,470
up not the front come on

00:02:46,300 --> 00:02:51,200
so there are a whole bunch of plugins

00:02:48,620 --> 00:02:53,360
there over 200 I'll kind of cover some

00:02:51,200 --> 00:02:55,010
of them today but essentially you rate

00:02:53,360 --> 00:02:56,690
something like this so this is Tamil

00:02:55,010 --> 00:02:59,780
that says activate the memory mfit

00:02:56,690 --> 00:03:08,810
plugin I can also use the disk IO

00:02:59,780 --> 00:03:09,800
plug-in we see if that fail we point it

00:03:08,810 --> 00:03:14,600
to our account

00:03:09,800 --> 00:03:22,580
oh so I'm just gonna write all my

00:03:14,600 --> 00:03:24,200
metrics to standard out like so that

00:03:22,580 --> 00:03:26,750
loads of config you can see that it's

00:03:24,200 --> 00:03:28,550
enabling my empat plugins here so I've

00:03:26,750 --> 00:03:30,230
got memory in disk i/o we're not using

00:03:28,550 --> 00:03:31,310
any aggregators of processors I'm not

00:03:30,230 --> 00:03:33,890
even going to speak about them the

00:03:31,310 --> 00:03:36,290
majority of this talk and we're using an

00:03:33,890 --> 00:03:37,880
output of fail now we have a flush

00:03:36,290 --> 00:03:40,040
interval here of 10 seconds which means

00:03:37,880 --> 00:03:42,320
it's going to rate the metrics to

00:03:40,040 --> 00:03:45,470
standard out no there we go perfect

00:03:42,320 --> 00:03:47,630
Damon so this is what we call Lane

00:03:45,470 --> 00:03:50,239
protocol it's just a language for

00:03:47,630 --> 00:03:52,400
describing metrics it's not similar but

00:03:50,239 --> 00:03:54,560
close enough to the open metrics

00:03:52,400 --> 00:03:57,320
exposition format and that we have the

00:03:54,560 --> 00:03:59,120
same concept of tags there's what's

00:03:57,320 --> 00:04:01,430
different from Lane protocol is that

00:03:59,120 --> 00:04:03,410
every point in a multiple fields so

00:04:01,430 --> 00:04:06,020
where with open metrics exposition

00:04:03,410 --> 00:04:07,370
format there's only one value parametric

00:04:06,020 --> 00:04:09,140
things are a little bit different and

00:04:07,370 --> 00:04:11,090
unplugs dB but we do have first-class

00:04:09,140 --> 00:04:12,860
support for that format as well so even

00:04:11,090 --> 00:04:15,830
if you are using Prometheus telegraph

00:04:12,860 --> 00:04:18,830
works very nicely and that's it it's a

00:04:15,830 --> 00:04:20,180
single binary Pesci's metrics and it

00:04:18,830 --> 00:04:21,709
puts them somewhere this is the most

00:04:20,180 --> 00:04:23,930
simplest example we can do because a

00:04:21,709 --> 00:04:25,700
range of standard Oh so hopefully now

00:04:23,930 --> 00:04:27,289
we're all on the same page with regards

00:04:25,700 --> 00:04:28,770
to what Telegraph is and the problem is

00:04:27,289 --> 00:04:29,849
trying to solve

00:04:28,770 --> 00:04:32,190
what I want to do is take you on a

00:04:29,849 --> 00:04:38,009
journey and kind of show you why it's

00:04:32,190 --> 00:04:40,050
very very cool so Telegraph is plug-in

00:04:38,009 --> 00:04:43,199
based so there are plugins for

00:04:40,050 --> 00:04:45,270
everything at the moment there are over

00:04:43,199 --> 00:04:48,330
200 plugins and that's glued pretty much

00:04:45,270 --> 00:04:49,979
weekly with regards to the end puts so

00:04:48,330 --> 00:04:51,840
an input plug and the Telegraph it's

00:04:49,979 --> 00:04:54,000
something that Telegraph can go and

00:04:51,840 --> 00:04:56,610
speak to to fetch metrics we have

00:04:54,000 --> 00:04:57,720
currently over 160 million of them so it

00:04:56,610 --> 00:04:59,430
doesn't really matter what you're

00:04:57,720 --> 00:05:02,250
running and your infrastructure where it

00:04:59,430 --> 00:05:04,830
be HBase Cassandra MongoDB postgrads

00:05:02,250 --> 00:05:06,870
rather anything the chances are there is

00:05:04,830 --> 00:05:10,860
a plugin that can get the metrics out of

00:05:06,870 --> 00:05:13,289
that system we support over 35 plugins

00:05:10,860 --> 00:05:15,270
so again it doesn't matter if you're not

00:05:13,289 --> 00:05:17,039
using unplugs DB you can write to

00:05:15,270 --> 00:05:18,419
whatever data store you want to use that

00:05:17,039 --> 00:05:19,500
you can write to multiple which is

00:05:18,419 --> 00:05:22,650
something we're going to focus on in

00:05:19,500 --> 00:05:24,210
this talk as well Telegraph has a

00:05:22,650 --> 00:05:26,159
concept of a processor power or

00:05:24,210 --> 00:05:28,409
serializer an aggregator these allow you

00:05:26,159 --> 00:05:29,940
to do end memory transformations and

00:05:28,409 --> 00:05:31,710
aggregations of your metrics as the

00:05:29,940 --> 00:05:33,479
commend so that you can reduce the

00:05:31,710 --> 00:05:36,990
cardinality or even just for just

00:05:33,479 --> 00:05:38,340
retention or the you know if your

00:05:36,990 --> 00:05:39,449
description at ten seconds maybe you

00:05:38,340 --> 00:05:40,860
want to aggregate that to one minute

00:05:39,449 --> 00:05:42,659
before you ship it to your database to

00:05:40,860 --> 00:05:44,820
adjust it cost all of this can be done

00:05:42,659 --> 00:05:49,099
and memory web Telegraph with a few

00:05:44,820 --> 00:05:51,360
lanes of tamil very very powerful tool

00:05:49,099 --> 00:05:52,830
it's a very fast movement project as

00:05:51,360 --> 00:05:56,130
well so I'm going to take a look at the

00:05:52,830 --> 00:05:58,740
last three releases we had one point 10

00:05:56,130 --> 00:06:02,069
and May and you can see that we add and

00:05:58,740 --> 00:06:04,289
put pretty frequently so over half a

00:06:02,069 --> 00:06:05,909
dozen templates being added here there

00:06:04,289 --> 00:06:07,139
was a big push from the Google team to

00:06:05,909 --> 00:06:10,110
make sure telegraph was the first-class

00:06:07,139 --> 00:06:11,520
citizen and GCP which is why there pops

00:06:10,110 --> 00:06:14,580
up and the stack driver stuff this year

00:06:11,520 --> 00:06:16,650
as well it puts again we can write to

00:06:14,580 --> 00:06:17,940
anywhere Kafka's are really popular one

00:06:16,650 --> 00:06:19,440
we're going to talk about that today I'm

00:06:17,940 --> 00:06:21,030
assuming most people here have some sort

00:06:19,440 --> 00:06:22,710
of chakra cluster are moving towards

00:06:21,030 --> 00:06:24,389
using cap in their infrastructure so

00:06:22,710 --> 00:06:27,900
Telegraph has really good integrations

00:06:24,389 --> 00:06:30,180
there couple of months later we released

00:06:27,900 --> 00:06:32,460
1.11 again you're going to see a theme

00:06:30,180 --> 00:06:34,319
here that we're always adding new inputs

00:06:32,460 --> 00:06:36,210
right we always want to make sure the

00:06:34,319 --> 00:06:38,669
Telegraph supports whatever software you

00:06:36,210 --> 00:06:41,580
are using and we can get useful metrics

00:06:38,669 --> 00:06:42,780
of that system a couple new outputs

00:06:41,580 --> 00:06:45,750
serializers

00:06:42,780 --> 00:06:47,070
the steam here is very simple every time

00:06:45,750 --> 00:06:49,830
we give you a new version we're always

00:06:47,070 --> 00:06:52,139
adding new stuff what's really cool is a

00:06:49,830 --> 00:06:54,750
lot of this isn't done by people that

00:06:52,139 --> 00:06:58,139
work at influx data and so Telegraph is

00:06:54,750 --> 00:07:00,150
our most most successful project I mean

00:06:58,139 --> 00:07:02,010
I define successful I mean that has more

00:07:00,150 --> 00:07:04,440
open source contributors than any other

00:07:02,010 --> 00:07:06,960
product and plucks data that's because

00:07:04,440 --> 00:07:09,270
it is really really easy to contribute

00:07:06,960 --> 00:07:10,500
to Telegraph so if you are curious of

00:07:09,270 --> 00:07:11,700
how you can do that please find some

00:07:10,500 --> 00:07:14,460
time and we can speak about that later

00:07:11,700 --> 00:07:16,169
today as well but you can write under 50

00:07:14,460 --> 00:07:21,600
lines of code for an MPEG plugin and

00:07:16,169 --> 00:07:23,460
start scraping metrics immediately so

00:07:21,600 --> 00:07:25,980
there is a problem with being an open

00:07:23,460 --> 00:07:27,960
source company right we're now that we

00:07:25,980 --> 00:07:30,120
have 200 plugins as part of the

00:07:27,960 --> 00:07:32,340
Telegraph ecosystem that's 200 plugins

00:07:30,120 --> 00:07:34,500
that we have to maintain and the

00:07:32,340 --> 00:07:37,050
challenge there is we don't know who's

00:07:34,500 --> 00:07:39,120
using which plugin look at all

00:07:37,050 --> 00:07:41,430
there is no telemetry in Telegraph

00:07:39,120 --> 00:07:43,770
whatsoever so there's no way for us to

00:07:41,430 --> 00:07:45,510
know if we're wasting a lot of time and

00:07:43,770 --> 00:07:48,840
effort maintaining older plugins that

00:07:45,510 --> 00:07:50,910
nobody is actually using so this got me

00:07:48,840 --> 00:07:52,500
thinking is there something here I can

00:07:50,910 --> 00:07:56,280
do is there anything I can scrape from

00:07:52,500 --> 00:07:57,930
the web to try and work at least and by

00:07:56,280 --> 00:08:00,600
an indication of what plugins are being

00:07:57,930 --> 00:08:03,289
consumed so I had an idea I went onto

00:08:00,600 --> 00:08:06,630
github I did a fail search and I found

00:08:03,289 --> 00:08:08,580
3249 Telegraph comments so that was a

00:08:06,630 --> 00:08:12,710
starting point now I had a bit of a

00:08:08,580 --> 00:08:15,270
problem the github API is frustrating

00:08:12,710 --> 00:08:18,240
and you can actually only get 1,000

00:08:15,270 --> 00:08:19,890
results back pair requests and because

00:08:18,240 --> 00:08:21,240
of the nature of my search I was trying

00:08:19,890 --> 00:08:23,490
to unload everything there was no way

00:08:21,240 --> 00:08:26,039
for me to configure offsets or pages or

00:08:23,490 --> 00:08:27,360
anything like that to get more but I

00:08:26,039 --> 00:08:29,520
worked for a time-series companies I'm

00:08:27,360 --> 00:08:31,500
just gonna call it a sample so I grabbed

00:08:29,520 --> 00:08:33,210
1,000 telegraphic comps and I began to

00:08:31,500 --> 00:08:34,919
analyze them to try and get an

00:08:33,210 --> 00:08:37,380
understanding of what plugins people are

00:08:34,919 --> 00:08:39,390
using now there are a few things to note

00:08:37,380 --> 00:08:41,880
here obviously a lot of people commit

00:08:39,390 --> 00:08:44,099
the default configuration and so that's

00:08:41,880 --> 00:08:45,900
not very useful these are only open

00:08:44,099 --> 00:08:47,820
source Telegraph comps so they're not

00:08:45,900 --> 00:08:50,790
probably truly representative of what

00:08:47,820 --> 00:08:53,150
people are actually doing but it's the

00:08:50,790 --> 00:08:53,150
best I've got

00:08:54,850 --> 00:09:00,160
so people are using Telegraph to write

00:08:57,410 --> 00:09:03,410
to n flux DB over 72 percent that

00:09:00,160 --> 00:09:04,730
expected imagine five percent arranger

00:09:03,410 --> 00:09:07,130
fails two percent of written to

00:09:04,730 --> 00:09:09,380
Prometheus and then really a nominal

00:09:07,130 --> 00:09:11,270
access to anything else after that and

00:09:09,380 --> 00:09:13,510
this was kind of shocking I expected the

00:09:11,270 --> 00:09:15,100
Kafka number to be a lot higher and

00:09:13,510 --> 00:09:17,660
that's fine

00:09:15,100 --> 00:09:21,440
there was no surprising things here with

00:09:17,660 --> 00:09:24,110
the opening so I want you to try and

00:09:21,440 --> 00:09:26,060
understand how many of the Telegraph the

00:09:24,110 --> 00:09:27,230
comps were the default sentence so I

00:09:26,060 --> 00:09:28,340
started to look at some of the

00:09:27,230 --> 00:09:30,080
configuration options that are available

00:09:28,340 --> 00:09:32,870
to us within Telegraph know the first

00:09:30,080 --> 00:09:35,840
one is interval how often do we want to

00:09:32,870 --> 00:09:38,930
go and scrape the metrics 10 seconds as

00:09:35,840 --> 00:09:40,040
the default this number correlates back

00:09:38,930 --> 00:09:42,650
to n flux tb's

00:09:40,040 --> 00:09:44,720
output of 72 percent so there is a high

00:09:42,650 --> 00:09:46,460
chance there is some default

00:09:44,720 --> 00:09:49,070
configuration fails or at least people

00:09:46,460 --> 00:09:50,810
aren't tweaking them too much a few

00:09:49,070 --> 00:09:52,640
people are using 1 seconds and then so

00:09:50,810 --> 00:09:54,350
far if you can see that's very limited

00:09:52,640 --> 00:09:57,770
distribution of the collection interval

00:09:54,350 --> 00:10:00,230
here what was surprising to me was

00:09:57,770 --> 00:10:02,510
people who generally adopt and flux DB

00:10:00,230 --> 00:10:04,040
when they want high resolution data like

00:10:02,510 --> 00:10:05,930
andfox DB is the only time series

00:10:04,040 --> 00:10:08,450
database I believe this supports

00:10:05,930 --> 00:10:11,870
nanosecond resolution and but there is

00:10:08,450 --> 00:10:13,370
nothing even less than a second a I'm

00:10:11,870 --> 00:10:19,600
doing high resolution scraping of

00:10:13,370 --> 00:10:21,620
metrics no financial traders no alright

00:10:19,600 --> 00:10:24,410
there's another option a telegraph

00:10:21,620 --> 00:10:25,820
called the round interval she's probably

00:10:24,410 --> 00:10:26,900
the question I get the most when people

00:10:25,820 --> 00:10:28,640
find out I'm talking about Telegraph

00:10:26,900 --> 00:10:30,080
like what is it and it's really really

00:10:28,640 --> 00:10:32,810
simple so I'm just going to take five

00:10:30,080 --> 00:10:34,460
seconds to explain it but when you run

00:10:32,810 --> 00:10:35,120
Telegraph of a scrape interval of ten

00:10:34,460 --> 00:10:37,610
seconds

00:10:35,120 --> 00:10:39,320
it doesn't necessarily collect or scrape

00:10:37,610 --> 00:10:41,150
any metrics within the first ten seconds

00:10:39,320 --> 00:10:42,890
it may actually wait the ten seconds

00:10:41,150 --> 00:10:45,260
what a lot of people like to do is

00:10:42,890 --> 00:10:47,030
actually collect on the clock so at ten

00:10:45,260 --> 00:10:48,950
seconds past twenty seconds past thirty

00:10:47,030 --> 00:10:50,330
seconds passed rather than it being ten

00:10:48,950 --> 00:10:52,220
seconds from the time to start the demon

00:10:50,330 --> 00:10:54,860
that's all the rendered interval does

00:10:52,220 --> 00:10:57,890
have you set it to run on the other or

00:10:54,860 --> 00:10:59,900
have a 60 minute rend interval it will

00:10:57,890 --> 00:11:01,190
run on the hour every hour

00:10:59,900 --> 00:11:03,650
so the wreden triple is useful if you

00:11:01,190 --> 00:11:05,480
just wanna you know can a group metrics

00:11:03,650 --> 00:11:07,269
together or make the windows protectable

00:11:05,480 --> 00:11:10,519
for query time

00:11:07,269 --> 00:11:12,889
the gesture again 90% of people aren't

00:11:10,519 --> 00:11:14,990
using this option if you have a high

00:11:12,889 --> 00:11:16,670
number of inputs and your collection of

00:11:14,990 --> 00:11:18,889
metrics in memory or you want to write

00:11:16,670 --> 00:11:20,300
to multiple databases the gesture just

00:11:18,889 --> 00:11:22,129
means it's going to add on an arbitrary

00:11:20,300 --> 00:11:23,839
number to that interval so that you're

00:11:22,129 --> 00:11:25,160
not having a database or all the same

00:11:23,839 --> 00:11:29,240
systems the exact same time

00:11:25,160 --> 00:11:30,980
most people aren't using that know about

00:11:29,240 --> 00:11:33,199
hostname is an interesting one for me

00:11:30,980 --> 00:11:35,480
because I'm a kubernetes person and I

00:11:33,199 --> 00:11:36,980
container person so the fact that anyone

00:11:35,480 --> 00:11:39,290
would ever write a metric with a host

00:11:36,980 --> 00:11:41,029
name on it confuses me like it's really

00:11:39,290 --> 00:11:43,670
not that important bare-metal salps of

00:11:41,029 --> 00:11:45,559
course but as the industry moves towards

00:11:43,670 --> 00:11:47,899
containers I expected this to be a lot

00:11:45,559 --> 00:11:49,370
higher and but ninety percent of people

00:11:47,899 --> 00:11:50,569
are not turning this on which means

00:11:49,370 --> 00:11:52,279
ninety percent of people are writing

00:11:50,569 --> 00:11:54,559
their metric was a hostname in it if

00:11:52,279 --> 00:11:56,689
that's a container ID you're cardinality

00:11:54,559 --> 00:11:57,980
is going to explode and so it's

00:11:56,689 --> 00:12:00,740
definitely something to be mindful there

00:11:57,980 --> 00:12:05,959
if you are at a container or kubernetes

00:12:00,740 --> 00:12:08,240
environment definitely use that zone so

00:12:05,959 --> 00:12:10,309
of the output plugins most people are

00:12:08,240 --> 00:12:12,980
just right into a single source probably

00:12:10,309 --> 00:12:14,360
in flux DB based on what we've seen five

00:12:12,980 --> 00:12:16,040
percent are right into multiples that's

00:12:14,360 --> 00:12:18,050
good right into multiple outputs as

00:12:16,040 --> 00:12:20,329
important for metric collection you want

00:12:18,050 --> 00:12:22,339
a pipeline you can trust the only way to

00:12:20,329 --> 00:12:23,779
build trust is to correlate the numbers

00:12:22,339 --> 00:12:25,879
from one output at another output and

00:12:23,779 --> 00:12:28,399
check otherwise you have no idea if

00:12:25,879 --> 00:12:29,629
you're messing metrics and so if you

00:12:28,399 --> 00:12:31,550
aren't right into multiple sources

00:12:29,629 --> 00:12:33,230
that's a really good take-home here

00:12:31,550 --> 00:12:35,420
today rate your metrics to more than one

00:12:33,230 --> 00:12:36,889
place there is a cost but you don't need

00:12:35,420 --> 00:12:38,269
to keep the metrics for long even if you

00:12:36,889 --> 00:12:40,550
only store them in the second data store

00:12:38,269 --> 00:12:41,899
forever or sex errors it still gives you

00:12:40,550 --> 00:12:46,129
enough of a window to make sure you're

00:12:41,899 --> 00:12:47,379
metric collection is correct Nessie's

00:12:46,129 --> 00:12:50,809
where things got a little bit more

00:12:47,379 --> 00:12:53,120
distributed so a lot of people are using

00:12:50,809 --> 00:12:56,629
and any arbitrary number of mfit plugins

00:12:53,120 --> 00:12:59,259
but the one person with 56 and plugins I

00:12:56,629 --> 00:13:02,629
had no idea what the hell they were then

00:12:59,259 --> 00:13:04,970
I'm not even sure tell-tell Telegraph

00:13:02,629 --> 00:13:06,410
would perform well at 56 mph that's

00:13:04,970 --> 00:13:08,300
probably going to be quite intensive

00:13:06,410 --> 00:13:11,660
depending on what the inputs are if

00:13:08,300 --> 00:13:14,110
there are 56 HTTP metric based systems

00:13:11,660 --> 00:13:16,939
yeah that's not gonna work

00:13:14,110 --> 00:13:18,769
all the empik plug-ins are being used

00:13:16,939 --> 00:13:19,880
they were absolutely no surprises here

00:13:18,769 --> 00:13:21,740
whatsoever people

00:13:19,880 --> 00:13:23,960
are doing system lineups based

00:13:21,740 --> 00:13:26,840
monitoring they want to know the CPU man

00:13:23,960 --> 00:13:28,370
my desk etc etc etc this is the easiest

00:13:26,840 --> 00:13:30,140
way to get started with Telegraph so of

00:13:28,370 --> 00:13:33,080
course the distribution here was never

00:13:30,140 --> 00:13:35,150
quite high now we do have 20% of the

00:13:33,080 --> 00:13:36,950
people are using the darker ampere but

00:13:35,150 --> 00:13:38,540
90% of the people that are not in the

00:13:36,950 --> 00:13:39,800
hostname so there are a lot of people

00:13:38,540 --> 00:13:42,970
out there that are gonna have very high

00:13:39,800 --> 00:13:42,970
cardinality and they're tsdp

00:13:44,590 --> 00:13:49,340
so kind of hammer just home twice now

00:13:47,660 --> 00:13:51,350
hopefully right but really seriously

00:13:49,340 --> 00:13:54,950
right to multiple outputs and I want to

00:13:51,350 --> 00:13:57,080
show you how easy that is this is the

00:13:54,950 --> 00:13:58,310
normal configuration again where I was

00:13:57,080 --> 00:14:00,080
best to find out I want to write to n

00:13:58,310 --> 00:14:03,380
flux DB 1 and I want to write to end

00:14:00,080 --> 00:14:07,940
plugs DB to who's brave and running an

00:14:03,380 --> 00:14:09,170
alpha of n flux DB - all right

00:14:07,940 --> 00:14:11,180
I can be your support channel for the

00:14:09,170 --> 00:14:16,550
next 24 hours if you one have you had

00:14:11,180 --> 00:14:19,190
any problems with it so NF ox db2 is

00:14:16,550 --> 00:14:20,750
currently in alpha 19 it will be

00:14:19,190 --> 00:14:21,890
approaching beta very soon and we're

00:14:20,750 --> 00:14:24,530
trying to encourage as many people to

00:14:21,890 --> 00:14:26,720
try that as possible and I'll talk about

00:14:24,530 --> 00:14:28,580
that later but you can read some else

00:14:26,720 --> 00:14:31,010
about this right so all it takes is four

00:14:28,580 --> 00:14:32,540
lanes of Tamil and I can rape my metrics

00:14:31,010 --> 00:14:34,580
to multiple places again this doesn't

00:14:32,540 --> 00:14:36,590
have to be in flux DB it can be

00:14:34,580 --> 00:14:38,570
Prometheus it can be Cassandra it can be

00:14:36,590 --> 00:14:44,210
elastic search it can be Kafka that's up

00:14:38,570 --> 00:14:46,450
to you of course copper can we get there

00:14:44,210 --> 00:14:46,450
and make

00:14:47,960 --> 00:14:53,260
feel free to interrupt me as we go I'm

00:14:50,660 --> 00:14:53,260
happy to take questions

00:14:57,320 --> 00:15:06,860
okay so way to low pollens the output

00:15:02,300 --> 00:15:13,819
from a single output to multiple input

00:15:06,860 --> 00:15:18,440
provider so I have the diem set and one

00:15:13,819 --> 00:15:23,000
Gateway host and for low and high

00:15:18,440 --> 00:15:26,810
availability I have two gateways so I

00:15:23,000 --> 00:15:32,750
want to load balance between both it's a

00:15:26,810 --> 00:15:34,940
way yes I mean if you really like an

00:15:32,750 --> 00:15:37,639
HTTP or something that or most some of

00:15:34,940 --> 00:15:39,769
the outfits will support multiple your

00:15:37,639 --> 00:15:41,180
our eyes or IP addresses which well we

00:15:39,769 --> 00:15:45,019
look balanced but there are caveats

00:15:41,180 --> 00:15:46,550
there and as we are sometimes that they

00:15:45,019 --> 00:15:47,509
can be long-running connections like a

00:15:46,550 --> 00:15:48,889
service output

00:15:47,509 --> 00:15:51,170
in which case there's other things you

00:15:48,889 --> 00:15:53,120
have to do to make that work and it gets

00:15:51,170 --> 00:15:55,009
a little bit complicated but I'll speak

00:15:53,120 --> 00:15:56,870
to you after the talk and and you can

00:15:55,009 --> 00:16:01,819
tell me what I picture using there are

00:15:56,870 --> 00:16:04,399
ways to do it right thanks so very any

00:16:01,819 --> 00:16:06,500
more questions on that cool right

00:16:04,399 --> 00:16:07,910
so telegraph as of recently added a

00:16:06,500 --> 00:16:10,399
really cool feature for remote

00:16:07,910 --> 00:16:11,990
configuration that means that you don't

00:16:10,399 --> 00:16:14,779
actually need to distribute telegraphed

00:16:11,990 --> 00:16:19,060
everywhere anymore I can load it from

00:16:14,779 --> 00:16:21,980
any HTTP path or a fail system path

00:16:19,060 --> 00:16:24,050
really simple thing is right it's exact

00:16:21,980 --> 00:16:27,800
same config parameter only we're going

00:16:24,050 --> 00:16:30,380
to pass on some sort of HTTP URI what I

00:16:27,800 --> 00:16:32,420
do now it's you know I'm trying to make

00:16:30,380 --> 00:16:35,209
sure everything I do is no concern is no

00:16:32,420 --> 00:16:36,139
committee to get so I'm using the github

00:16:35,209 --> 00:16:38,480
User Content

00:16:36,139 --> 00:16:41,930
I kind of you know that way of getting

00:16:38,480 --> 00:16:44,630
the raw data over the HTTP is API and I

00:16:41,930 --> 00:16:45,980
keep everything and set up good so you

00:16:44,630 --> 00:16:52,430
can just tell Telegraph to go fetch that

00:16:45,980 --> 00:16:54,410
fail parser config and run yes and but

00:16:52,430 --> 00:16:55,880
you can configure it to reload that and

00:16:54,410 --> 00:16:57,290
telegraph has a really cool feature

00:16:55,880 --> 00:16:58,579
where you send a sec up and it will

00:16:57,290 --> 00:17:00,279
reload the contact and that will include

00:16:58,579 --> 00:17:02,360
prefetching it from a remote location

00:17:00,279 --> 00:17:04,939
and not a lot of people know that but

00:17:02,360 --> 00:17:06,709
it's a really cool feature so yeah so

00:17:04,939 --> 00:17:08,120
you're baked so first make sure your

00:17:06,709 --> 00:17:10,159
telegraphed I'll come visit get right

00:17:08,120 --> 00:17:11,089
hopefully everyone's doing that and the

00:17:10,159 --> 00:17:12,919
only change to your

00:17:11,089 --> 00:17:15,350
here's if you're using Papa or Shafter

00:17:12,919 --> 00:17:16,549
then put that onto machines you then

00:17:15,350 --> 00:17:18,409
every time you change it you have to

00:17:16,549 --> 00:17:19,819
retry that manifest or cookbook or

00:17:18,409 --> 00:17:21,439
whatever and this is actually a lot

00:17:19,819 --> 00:17:27,140
easier and you can use the stack up to

00:17:21,439 --> 00:17:28,970
the ports to reload what I would say is

00:17:27,140 --> 00:17:30,620
just and hopefully nobody is doing this

00:17:28,970 --> 00:17:32,779
is obviously don't commit secrets

00:17:30,620 --> 00:17:35,029
Telegraph Holmes does have access to

00:17:32,779 --> 00:17:36,279
passwords and usernames and remote your

00:17:35,029 --> 00:17:39,559
eyes for their outputs

00:17:36,279 --> 00:17:42,020
so Telegraph does support bash tale

00:17:39,559 --> 00:17:43,250
interpolation of the config so all you

00:17:42,020 --> 00:17:45,080
need to do is make sure the environment

00:17:43,250 --> 00:17:46,159
variable exists when you run the

00:17:45,080 --> 00:17:51,529
Telegraph command and it will

00:17:46,159 --> 00:17:53,360
interpolate down to the fail you can

00:17:51,529 --> 00:17:55,220
also use it for non secret stuff so I

00:17:53,360 --> 00:17:56,870
like to keep my Telegraph comms pretty

00:17:55,220 --> 00:17:59,480
generic so that I can tweak them at

00:17:56,870 --> 00:18:01,840
runtime you know things like it's really

00:17:59,480 --> 00:18:03,710
good being able to use your interval as

00:18:01,840 --> 00:18:05,779
interpreted variable because it means

00:18:03,710 --> 00:18:07,760
that something is going wrong and I

00:18:05,779 --> 00:18:09,440
don't need to do an entire share for

00:18:07,760 --> 00:18:11,750
puppet thing I can just go onto the

00:18:09,440 --> 00:18:13,850
machine and then restart it passing in a

00:18:11,750 --> 00:18:18,679
different interval collection there are

00:18:13,850 --> 00:18:20,510
lots of cool perks to use than that now

00:18:18,679 --> 00:18:22,460
I always talk about monitoring pipelines

00:18:20,510 --> 00:18:23,450
and making sure that they're correct and

00:18:22,460 --> 00:18:26,960
one of the things I want to talk about

00:18:23,450 --> 00:18:28,820
is just resiliency so again when I was

00:18:26,960 --> 00:18:30,890
looking at all these telegraph coms on

00:18:28,820 --> 00:18:34,000
github I realized a lot of people are

00:18:30,890 --> 00:18:37,899
tweaking or even using the metric buffer

00:18:34,000 --> 00:18:42,350
does anyone know the metric buffer is

00:18:37,899 --> 00:18:44,690
sea hands so the metric buffer is a

00:18:42,350 --> 00:18:47,419
really cool way and the telegraph if it

00:18:44,690 --> 00:18:50,809
cannot reach your output it will keep

00:18:47,419 --> 00:18:54,440
those metrics and memory so the size of

00:18:50,809 --> 00:18:56,330
your buffer limit so let's assume we

00:18:54,440 --> 00:18:59,330
have Telegraph rate into n flux DB one

00:18:56,330 --> 00:19:00,649
andfox DB to your n fox db2 is down

00:18:59,330 --> 00:19:02,149
because you're restarting it you're

00:19:00,649 --> 00:19:03,950
deploying a new update whatever that is

00:19:02,149 --> 00:19:06,080
there's going to be two or three minutes

00:19:03,950 --> 00:19:07,789
where it's unavailable Telegraph cache

00:19:06,080 --> 00:19:10,070
all of those metrics and it's pair

00:19:07,789 --> 00:19:11,840
output so we'll keep that in mind it'll

00:19:10,070 --> 00:19:13,370
keep all of those and memory until it

00:19:11,840 --> 00:19:15,679
comes back online and then flush them

00:19:13,370 --> 00:19:18,770
all back down the paper so the plan

00:19:15,679 --> 00:19:20,000
being you should never lose a metric you

00:19:18,770 --> 00:19:21,559
can set the buffer limit to whatever you

00:19:20,000 --> 00:19:25,130
want is default

00:19:21,559 --> 00:19:27,500
is 10,000 I sink so that means 10 times

00:19:25,130 --> 00:19:29,570
metric spare will be held and memory if

00:19:27,500 --> 00:19:31,250
you have a large map a large amount of

00:19:29,570 --> 00:19:33,950
RAM in your system you can almost

00:19:31,250 --> 00:19:35,840
increase that it really depends on what

00:19:33,950 --> 00:19:39,100
kind of resiliency and what failure

00:19:35,840 --> 00:19:39,100
scenario is you want to kind of support

00:19:39,310 --> 00:19:43,880
so let's take a look at kind of the this

00:19:42,080 --> 00:19:46,040
is the telegraph architecture of v1

00:19:43,880 --> 00:19:49,070
right this is what most people start off

00:19:46,040 --> 00:19:50,510
with they have telegraph running its

00:19:49,070 --> 00:19:52,220
fetchin metrics from the network from

00:19:50,510 --> 00:19:55,400
bear mail or from bm's and any software

00:19:52,220 --> 00:19:56,870
dependencies like Kafka etc we can use

00:19:55,400 --> 00:19:59,240
the buffer but if we've just talked

00:19:56,870 --> 00:20:02,480
about another really cool thing that

00:19:59,240 --> 00:20:03,920
offers is the ability to batch right no

00:20:02,480 --> 00:20:06,290
that means that if you're collecting a

00:20:03,920 --> 00:20:08,480
high velocity of metrics 10,000 20,000

00:20:06,290 --> 00:20:10,100
100,000 per second you can batch them up

00:20:08,480 --> 00:20:12,170
into groups of 50 thousand two hundred

00:20:10,100 --> 00:20:17,030
thousand cetera so you're reducing the

00:20:12,170 --> 00:20:19,340
amount of requests over the network that

00:20:17,030 --> 00:20:21,980
raise to n flux DB but what everyone

00:20:19,340 --> 00:20:23,930
does initially is has their application

00:20:21,980 --> 00:20:26,900
of its instrumented with n flux right

00:20:23,930 --> 00:20:29,030
directly to n flux and that's usually a

00:20:26,900 --> 00:20:30,890
problem again event flux becomes

00:20:29,030 --> 00:20:32,660
unavailable those metrics you're

00:20:30,890 --> 00:20:34,300
efficient and Fox DB over the wire are

00:20:32,660 --> 00:20:37,210
gonna get lost

00:20:34,300 --> 00:20:40,430
Santos TV goes away metric go bye-bye

00:20:37,210 --> 00:20:42,770
this is what you actually want to do the

00:20:40,430 --> 00:20:44,540
Telegraph has this buffer and batching

00:20:42,770 --> 00:20:46,670
ability so we should use that all the

00:20:44,540 --> 00:20:50,500
time and the best way to do that is

00:20:46,670 --> 00:20:53,300
through one of our NP plugins so

00:20:50,500 --> 00:20:57,080
Telegraph has an N Fox DB lesner plugin

00:20:53,300 --> 00:20:59,000
and an HTTP listener plugin which just

00:20:57,080 --> 00:21:00,950
means that you can use the same and flux

00:20:59,000 --> 00:21:02,690
DB client libraries that you're already

00:21:00,950 --> 00:21:04,850
using but have them rates to something

00:21:02,690 --> 00:21:10,040
on localhost to them proxies patched and

00:21:04,850 --> 00:21:11,450
buffered before has the TS d be the

00:21:10,040 --> 00:21:13,160
thing to know what if it's M clocks DB

00:21:11,450 --> 00:21:15,770
listener as it only supports the right

00:21:13,160 --> 00:21:17,290
endpoint so depending on the usage of

00:21:15,770 --> 00:21:19,700
your instrumentation if you're creating

00:21:17,290 --> 00:21:21,380
buckets databases anything like that

00:21:19,700 --> 00:21:23,240
they won't be supported the commands

00:21:21,380 --> 00:21:24,560
will just return over 200 ok so you

00:21:23,240 --> 00:21:26,120
won't even know anything is wrong which

00:21:24,560 --> 00:21:27,680
is good but you won't actually be

00:21:26,120 --> 00:21:29,480
executing those commands so just keep

00:21:27,680 --> 00:21:31,940
that in mind and but if you're just

00:21:29,480 --> 00:21:34,540
sending points over the wire really

00:21:31,940 --> 00:21:34,540
really good pocket

00:21:35,210 --> 00:21:39,950
Telegraph always tries to keep things

00:21:37,330 --> 00:21:41,629
context-free as often as possible the

00:21:39,950 --> 00:21:43,940
only thing you need to specify here is

00:21:41,629 --> 00:21:45,469
the device that you want a lesson over

00:21:43,940 --> 00:21:47,570
and the port number so here I'm just

00:21:45,469 --> 00:21:49,999
saying lesson on all all devices on port

00:21:47,570 --> 00:21:51,440
it six that means my application could

00:21:49,999 --> 00:21:53,839
never a to localhost on that port is

00:21:51,440 --> 00:21:57,559
that it was in flux DB even though it's

00:21:53,839 --> 00:22:00,619
getting proxy for Telegraph there was a

00:21:57,559 --> 00:22:03,259
really cool happy side of it from this

00:22:00,619 --> 00:22:05,210
plugin as I said at the start we're

00:22:03,259 --> 00:22:08,749
currently in a very large migration of M

00:22:05,210 --> 00:22:10,429
flux DB 1 to n flux DB to used in the n°

00:22:08,749 --> 00:22:11,899
flux to be less Knar you can continue to

00:22:10,429 --> 00:22:15,289
use the instrumentation you've already

00:22:11,899 --> 00:22:19,369
built for n clocks DB 1 well testing and

00:22:15,289 --> 00:22:20,899
flux D reader that is pretty cool what I

00:22:19,369 --> 00:22:22,279
would add on client libraries is that

00:22:20,899 --> 00:22:24,679
we're starting to take them a bit more

00:22:22,279 --> 00:22:26,089
seriously now we've in flux db2 and that

00:22:24,679 --> 00:22:28,489
we're going to start support and most of

00:22:26,089 --> 00:22:31,419
the popular languages within the company

00:22:28,489 --> 00:22:33,109
rather than relying on external support

00:22:31,419 --> 00:22:34,519
so if you're looking for a client

00:22:33,109 --> 00:22:35,719
library for B to come and speak to me

00:22:34,519 --> 00:22:39,649
it's good to get an idea of what

00:22:35,719 --> 00:22:42,589
languages people are working on there's

00:22:39,649 --> 00:22:45,169
a slightly more generic HTTP listener

00:22:42,589 --> 00:22:47,629
which I'll allow you to take any metric

00:22:45,169 --> 00:22:50,450
over any HTTP client so even if you're

00:22:47,629 --> 00:22:52,940
don't have a client library for v1 for

00:22:50,450 --> 00:22:54,859
your esoteric language then you can just

00:22:52,940 --> 00:22:58,759
use any HTTP client to write metrics

00:22:54,859 --> 00:23:01,309
through Telegraph very simple

00:22:58,759 --> 00:23:03,139
configuration again we pick a port we

00:23:01,309 --> 00:23:06,139
tell it what to use their data format

00:23:03,139 --> 00:23:10,159
Telegraph supports open metrics supports

00:23:06,139 --> 00:23:12,679
JSON CSB Lane protocol graph a stats the

00:23:10,159 --> 00:23:17,899
again we support as many things as we

00:23:12,679 --> 00:23:19,489
can know because n folks DB has a

00:23:17,899 --> 00:23:22,249
concept of tags you have to be able to

00:23:19,489 --> 00:23:24,139
just specify the the the fields in the

00:23:22,249 --> 00:23:26,690
JSON payload that you wish to be indexed

00:23:24,139 --> 00:23:27,950
so it's just a tags key array and we

00:23:26,690 --> 00:23:29,899
just specify anything that should be a

00:23:27,950 --> 00:23:31,039
tag rather than a field that's pretty

00:23:29,899 --> 00:23:32,719
much the only configuration you need to

00:23:31,039 --> 00:23:34,489
do there's going to be a demo if that's

00:23:32,719 --> 00:23:36,109
towards the end where I kind of cover a

00:23:34,489 --> 00:23:37,339
lot of that so hopefully when you see it

00:23:36,109 --> 00:23:39,339
in action or make a bit more sense as

00:23:37,339 --> 00:23:42,339
well

00:23:39,339 --> 00:23:44,239
no IP MFN flux data for 11 months now

00:23:42,339 --> 00:23:46,159
and I come from a Cabernet Lee's

00:23:44,239 --> 00:23:48,890
background and every time I looked at

00:23:46,159 --> 00:23:51,280
the Telegraph binary size I kind of

00:23:48,890 --> 00:23:53,450
a little bit and it grows every release

00:23:51,280 --> 00:23:57,049
usually Kray substantially the problem

00:23:53,450 --> 00:23:58,910
is the more and put plugins we rate the

00:23:57,049 --> 00:24:00,740
more systems we support they all come

00:23:58,910 --> 00:24:02,890
with their own dependencies of how we

00:24:00,740 --> 00:24:05,510
interact with them

00:24:02,890 --> 00:24:07,700
so this plugin architecture comes to

00:24:05,510 --> 00:24:09,559
quite I have to cost especially with it

00:24:07,700 --> 00:24:12,970
being a go program because we're

00:24:09,559 --> 00:24:15,860
compiling every Fernandez single binary

00:24:12,970 --> 00:24:18,860
so the darker image for Telegraph has

00:24:15,860 --> 00:24:21,049
currently sitting at 254 Meg it's not

00:24:18,860 --> 00:24:23,660
huge but it's bigger than I would be

00:24:21,049 --> 00:24:25,130
willing to accept and especially if you

00:24:23,660 --> 00:24:26,840
have a large fleet and you're shipping

00:24:25,130 --> 00:24:28,640
us across many nodes you know it's just

00:24:26,840 --> 00:24:30,320
a lot of network bandwidth especially if

00:24:28,640 --> 00:24:33,140
you're an AWS really paper bandwidth and

00:24:30,320 --> 00:24:35,540
in it I started a project called bring

00:24:33,140 --> 00:24:37,010
your own Telegraph and the entire

00:24:35,540 --> 00:24:39,650
concept of the project was to give

00:24:37,010 --> 00:24:41,150
people a some tooling that they can

00:24:39,650 --> 00:24:43,940
build their own Telegraph docker image

00:24:41,150 --> 00:24:45,860
with only the plugins that they need so

00:24:43,940 --> 00:24:49,549
the first build I did I manage to get my

00:24:45,860 --> 00:24:52,970
Telegraph under 16 Meg quite a large

00:24:49,549 --> 00:24:56,720
difference so what does it look like

00:24:52,970 --> 00:24:58,910
well it's a talker fail and I use these

00:24:56,720 --> 00:25:00,350
the on both instructions a lot to defer

00:24:58,910 --> 00:25:01,100
all the logic so that you don't have to

00:25:00,350 --> 00:25:04,100
worry about it

00:25:01,100 --> 00:25:05,809
so all you have to do is first say use a

00:25:04,100 --> 00:25:07,309
rocket Telegraph BYO

00:25:05,809 --> 00:25:10,070
which is just my image it's on github

00:25:07,309 --> 00:25:12,470
you don't need any more instructions

00:25:10,070 --> 00:25:13,850
than that the Peled all happens behind

00:25:12,470 --> 00:25:15,230
the scenes it clones the telegraph

00:25:13,850 --> 00:25:17,929
repository at the version that you want

00:25:15,230 --> 00:25:19,820
it scans your Telegraph that conf works

00:25:17,929 --> 00:25:23,090
at which plugins are being used and then

00:25:19,820 --> 00:25:24,650
compares a custom binary we need a

00:25:23,090 --> 00:25:25,970
second layer so that sees multi stage

00:25:24,650 --> 00:25:28,190
bells if you're not familiar but you can

00:25:25,970 --> 00:25:30,290
have multiple problems where then use

00:25:28,190 --> 00:25:32,120
the now paint base layer we're pooling

00:25:30,290 --> 00:25:33,380
and the configuration from the belt and

00:25:32,120 --> 00:25:35,540
Emma pill and under binary that was

00:25:33,380 --> 00:25:37,160
custom-built for us as well we just said

00:25:35,540 --> 00:25:38,570
the entry point to be been telegraph and

00:25:37,160 --> 00:25:42,470
we now have an image there's custom

00:25:38,570 --> 00:25:45,520
built with one of the plugins we need so

00:25:42,470 --> 00:25:45,520
I'm going to click on a few things

00:25:50,950 --> 00:25:56,690
so this is the unbelt instruction this

00:25:53,510 --> 00:25:58,730
is the base layer I just pulls down debt

00:25:56,690 --> 00:26:00,230
and make we are in the process of

00:25:58,730 --> 00:26:01,550
switching to go modules and telegraph

00:26:00,230 --> 00:26:04,040
it's been a little bit painful but

00:26:01,550 --> 00:26:06,110
support for that should land soon we

00:26:04,040 --> 00:26:07,430
copy on my agenda she's just some go

00:26:06,110 --> 00:26:09,920
code I wrote two parts of Telegraph

00:26:07,430 --> 00:26:11,780
Confederation we make sure that someone

00:26:09,920 --> 00:26:13,880
specifies is the Telegraph version we

00:26:11,780 --> 00:26:15,170
clone the repository we use a depth of

00:26:13,880 --> 00:26:25,910
one to try and minimize the network

00:26:15,170 --> 00:26:27,440
traffic and then we build the project so

00:26:25,910 --> 00:26:29,090
this is the exact same docker file that

00:26:27,440 --> 00:26:31,610
I just showed you and but what I want to

00:26:29,090 --> 00:26:32,900
stay here in this example repository is

00:26:31,610 --> 00:26:35,180
that we are trying to make sure you can

00:26:32,900 --> 00:26:36,950
map into get so you just have this

00:26:35,180 --> 00:26:39,470
Telegraph directory instead of get where

00:26:36,950 --> 00:26:41,720
your conf and that's it that's all you

00:26:39,470 --> 00:26:44,240
need to provide so this will build it

00:26:41,720 --> 00:26:46,280
with the amp it's CPU memory system and

00:26:44,240 --> 00:26:47,660
the ability to write to the influx DB

00:26:46,280 --> 00:26:49,850
obviously everything here is hard-coded

00:26:47,660 --> 00:26:53,780
I could use interpolation but the

00:26:49,850 --> 00:26:58,660
example didn't really need it one more

00:26:53,780 --> 00:26:58,660
thing to share some in the Wi-Fi hotel

00:27:04,640 --> 00:27:09,620
so I got very curious were there any

00:27:07,730 --> 00:27:11,690
other benefits to use in the BYU

00:27:09,620 --> 00:27:16,730
Telegraph over the standard Telegraph

00:27:11,690 --> 00:27:17,929
no what we have here I can't really zoom

00:27:16,730 --> 00:27:20,960
in on this but hopefully it's kind of

00:27:17,929 --> 00:27:23,600
understandable the blue line is the

00:27:20,960 --> 00:27:26,299
original Telegraph and as a number of

00:27:23,600 --> 00:27:28,280
Bates allocated on the heap the purple

00:27:26,299 --> 00:27:31,220
one has to be Y all so it's

00:27:28,280 --> 00:27:34,010
substantially less memory intensive in

00:27:31,220 --> 00:27:37,460
fact the normal Telegraph has eight

00:27:34,010 --> 00:27:40,190
million bytes allocated the BYO has two

00:27:37,460 --> 00:27:42,500
million bits allocated so it's a quarter

00:27:40,190 --> 00:27:45,770
of the size memory consumption just very

00:27:42,500 --> 00:27:49,130
cool this one's a little harder to

00:27:45,770 --> 00:27:51,410
explain this is the gather time for each

00:27:49,130 --> 00:27:53,150
of the end posts now what we can see

00:27:51,410 --> 00:27:55,640
with the blue line here is the standard

00:27:53,150 --> 00:27:58,250
Telegraph has spikes where the gather

00:27:55,640 --> 00:28:01,610
time takes an anomaly it takes too far

00:27:58,250 --> 00:28:04,460
too long the consistency on the BYO is

00:28:01,610 --> 00:28:07,040
greatly improved so not only are we

00:28:04,460 --> 00:28:08,840
allocating less base on the heap but a

00:28:07,040 --> 00:28:11,330
gather time for each of our plugins is

00:28:08,840 --> 00:28:12,710
drastically faster as well now saying

00:28:11,330 --> 00:28:14,990
drastically you know we're still in the

00:28:12,710 --> 00:28:18,610
realm of milliseconds but the

00:28:14,990 --> 00:28:21,559
consistency is better over the long term

00:28:18,610 --> 00:28:23,210
and these ones aren't working but these

00:28:21,559 --> 00:28:25,340
are pretty much the same the BYO

00:28:23,210 --> 00:28:29,510
is better across the board performance

00:28:25,340 --> 00:28:32,440
memory consumption and speed hopefully

00:28:29,510 --> 00:28:32,440
that's picture interest

00:28:40,510 --> 00:28:45,010
you saw let's go back to our

00:28:42,280 --> 00:28:47,049
architecture diagram now that we have

00:28:45,010 --> 00:28:49,120
the ability to build this custom

00:28:47,049 --> 00:28:51,250
slimline Telegraph that is super

00:28:49,120 --> 00:28:54,880
performant we actually want to evolve

00:28:51,250 --> 00:28:56,410
this architecture slightly and what I'm

00:28:54,880 --> 00:28:58,030
trying to get people to do is instead of

00:28:56,410 --> 00:29:01,299
running a single Telegraph and all their

00:28:58,030 --> 00:29:03,100
nodes it's actually run 100 Telegraph's

00:29:01,299 --> 00:29:05,440
or a thousand different just keep

00:29:03,100 --> 00:29:06,970
spinning them up and that's because we

00:29:05,440 --> 00:29:08,260
get a lot of flexibility with this

00:29:06,970 --> 00:29:10,210
approach and that know that we're

00:29:08,260 --> 00:29:12,970
running Telegraph you could consider

00:29:10,210 --> 00:29:15,970
this state cars and kubernetes what if

00:29:12,970 --> 00:29:17,830
every poet had its own Telegraph now

00:29:15,970 --> 00:29:19,540
every application has the ability to

00:29:17,830 --> 00:29:22,299
determine is one metric buffer batch

00:29:19,540 --> 00:29:25,030
size the resolution of the metrics and

00:29:22,299 --> 00:29:27,850
the resiliency that I want now if I have

00:29:25,030 --> 00:29:30,429
a very old piece of software running

00:29:27,850 --> 00:29:31,929
that is only used by two customers the

00:29:30,429 --> 00:29:33,190
chances are I can have the metric buffer

00:29:31,929 --> 00:29:35,290
really low because we don't care about

00:29:33,190 --> 00:29:36,970
dropping metrics from it we're stuff

00:29:35,290 --> 00:29:38,290
that is new and we're working on

00:29:36,970 --> 00:29:40,780
actively we're going to want better

00:29:38,290 --> 00:29:43,000
metric buffer higher resolution data so

00:29:40,780 --> 00:29:45,220
now that Telegraph is a sage car running

00:29:43,000 --> 00:29:47,410
nested each of these applications we get

00:29:45,220 --> 00:29:48,340
to prioritize and decide which metrics

00:29:47,410 --> 00:29:54,070
are important to us

00:29:48,340 --> 00:29:56,080
and how those are captured but of course

00:29:54,070 --> 00:29:59,410
if I'm going to stand here and that a

00:29:56,080 --> 00:30:01,450
question know if I'm going to stand here

00:29:59,410 --> 00:30:03,190
and advocate for you to take your

00:30:01,450 --> 00:30:04,750
infrastructure of 10 nodes with 10

00:30:03,190 --> 00:30:07,059
Telegraph's and run a hundred of them

00:30:04,750 --> 00:30:09,280
then you're gonna have to get really

00:30:07,059 --> 00:30:10,630
good at monitoring Telegraph - right you

00:30:09,280 --> 00:30:12,960
have to know when things aren't quite

00:30:10,630 --> 00:30:16,540
working as expected

00:30:12,960 --> 00:30:18,790
so Telegraph has an internal and plugin

00:30:16,540 --> 00:30:22,059
which will expose all of its own metrics

00:30:18,790 --> 00:30:24,400
and store them in your TS BTS DB of

00:30:22,059 --> 00:30:27,910
choice the ones you have to keep an eye

00:30:24,400 --> 00:30:29,470
on here are the buffer size though that

00:30:27,910 --> 00:30:31,240
is how many metrics are stored in memory

00:30:29,470 --> 00:30:33,130
because I want to know when that's gonna

00:30:31,240 --> 00:30:35,169
hit a limit and try and protect that and

00:30:33,130 --> 00:30:36,400
then fix it before it happens and you

00:30:35,169 --> 00:30:37,750
also want to make sure you keep an eye

00:30:36,400 --> 00:30:39,400
on the metrics dropped if you're

00:30:37,750 --> 00:30:41,740
Telegraph is dropping metrics something

00:30:39,400 --> 00:30:43,929
has gone wrong and you need to fix it so

00:30:41,740 --> 00:30:46,150
I generally suggest that you keep an eye

00:30:43,929 --> 00:30:48,040
on buffer size but I'll layer on drop

00:30:46,150 --> 00:30:50,940
metrics and we'll take a look at that

00:30:48,040 --> 00:30:50,940
and the demo as well

00:30:51,859 --> 00:30:57,690
no this is slightly off-topic but it's

00:30:55,259 --> 00:30:59,249
one of my favorite plugins and also when

00:30:57,690 --> 00:31:00,330
I speak to developers this is one of the

00:30:59,249 --> 00:31:03,659
areas that they're struggling to

00:31:00,330 --> 00:31:06,899
understand who's a developer in the room

00:31:03,659 --> 00:31:10,039
rather than operations all right cool

00:31:06,899 --> 00:31:10,039
use of the people I'll be yelling at

00:31:10,549 --> 00:31:14,820
developers I speak to when they're

00:31:13,289 --> 00:31:16,109
instrument in their application you know

00:31:14,820 --> 00:31:17,129
they're moving to Cooper Nettie's and

00:31:16,109 --> 00:31:20,359
they understand they have to have these

00:31:17,129 --> 00:31:22,769
probes live this probes readiness probes

00:31:20,359 --> 00:31:26,669
nine times out of ten that's what they

00:31:22,769 --> 00:31:27,889
call a health check flash health it

00:31:26,669 --> 00:31:29,970
doesn't understand the application

00:31:27,889 --> 00:31:31,559
whatsoever it has no idea of the

00:31:29,970 --> 00:31:33,929
application that's healthy it's just a

00:31:31,559 --> 00:31:36,659
Viking kind of respond to this my aunt

00:31:33,929 --> 00:31:38,729
may be working all right this is not a

00:31:36,659 --> 00:31:45,029
health check people this is not

00:31:38,729 --> 00:31:47,249
acceptable fortunately we have our

00:31:45,029 --> 00:31:48,749
custom small Telegraph running as a safe

00:31:47,249 --> 00:31:50,759
car next to applications who can

00:31:48,749 --> 00:31:53,369
telegraph help us here and the answer is

00:31:50,759 --> 00:31:56,960
yes Telegraph has this concept of a

00:31:53,369 --> 00:31:59,099
health output that will create an HTTP

00:31:56,960 --> 00:32:00,239
lesner for your liveness prove our

00:31:59,099 --> 00:32:01,529
readiness prove our whatever other

00:32:00,239 --> 00:32:05,940
checks you have running on your machine

00:32:01,529 --> 00:32:07,529
and it is metric driven so here I'm

00:32:05,940 --> 00:32:09,710
having a health for my application

00:32:07,529 --> 00:32:12,690
running on port five five five nine and

00:32:09,710 --> 00:32:15,629
you can also specify TLS if you really

00:32:12,690 --> 00:32:17,849
wanted to security we specify the name

00:32:15,629 --> 00:32:19,679
pass which just means watch this metric

00:32:17,849 --> 00:32:22,769
so here I'm monitoring the web metric

00:32:19,679 --> 00:32:26,279
measurement and I'm going to analyze the

00:32:22,769 --> 00:32:27,570
response time so what's a really good

00:32:26,279 --> 00:32:29,849
way to understand if an application is

00:32:27,570 --> 00:32:32,220
behaving well if the response time is

00:32:29,849 --> 00:32:34,499
under 300 milliseconds we may consider

00:32:32,220 --> 00:32:36,899
that healthy now this is a contrived

00:32:34,499 --> 00:32:38,519
example of a simple check these can be

00:32:36,899 --> 00:32:39,989
more complicated you can check multiple

00:32:38,519 --> 00:32:42,419
things you can check multiple endpoints

00:32:39,989 --> 00:32:44,039
you can check multiple metrics so it's

00:32:42,419 --> 00:32:45,749
up to you to understand and my

00:32:44,039 --> 00:32:47,489
application that will turn into hundreds

00:32:45,749 --> 00:32:50,909
and understanded milliseconds it's

00:32:47,489 --> 00:32:52,200
healthy F is returning to hundreds HTTP

00:32:50,909 --> 00:32:54,119
to hundreds and over 300 milliseconds

00:32:52,200 --> 00:32:55,769
maybe a warning and ever should have

00:32:54,119 --> 00:32:56,460
turned in to many 500s within a five

00:32:55,769 --> 00:32:58,979
minute window

00:32:56,460 --> 00:33:00,419
someone's broke that's up to you but

00:32:58,979 --> 00:33:02,339
this plugin will allow you to analyze

00:33:00,419 --> 00:33:04,200
those metrics before it leaves Telegraph

00:33:02,339 --> 00:33:04,830
so this all happens and memory next year

00:33:04,200 --> 00:33:06,660
application

00:33:04,830 --> 00:33:12,890
and you don't even need to rent a tsdp

00:33:06,660 --> 00:33:15,630
if you don't want really cool plugin and

00:33:12,890 --> 00:33:17,150
it gets to a point where scaling and

00:33:15,630 --> 00:33:19,830
flux DB can be a little bit challenging

00:33:17,150 --> 00:33:21,510
and we often recommend people use caf-co

00:33:19,830 --> 00:33:23,130
the reason we suggest this is because

00:33:21,510 --> 00:33:25,110
more and more organizations are adopting

00:33:23,130 --> 00:33:26,820
Kafka anyway so hopefully your

00:33:25,110 --> 00:33:28,260
operations team has the ability to

00:33:26,820 --> 00:33:30,570
operate and manage caprica

00:33:28,260 --> 00:33:34,140
but also allows you to just you know

00:33:30,570 --> 00:33:36,210
fana those delivery pipelines so this is

00:33:34,140 --> 00:33:38,040
the b3 architecture I think that's these

00:33:36,210 --> 00:33:39,510
were well that's definitely where we're

00:33:38,040 --> 00:33:40,890
going internally and it's where a lot of

00:33:39,510 --> 00:33:43,890
our larger customers are going though as

00:33:40,890 --> 00:33:45,960
well so we say Kafka in the middle of

00:33:43,890 --> 00:33:48,000
everything we have Telegraph's as many

00:33:45,960 --> 00:33:50,960
edge locations as possible using the

00:33:48,000 --> 00:33:54,210
buffer and the batching right into Kafka

00:33:50,960 --> 00:33:57,110
we then can have a telegraph consuming

00:33:54,210 --> 00:34:01,140
Kafka and rate into one or more opus of

00:33:57,110 --> 00:34:03,000
one or more outputs WR what's

00:34:01,140 --> 00:34:04,890
really cool about this is that the katka

00:34:03,000 --> 00:34:07,290
plugin for telegraph also supports

00:34:04,890 --> 00:34:09,720
consumer groups we can actually scale

00:34:07,290 --> 00:34:10,860
out the consumption side of our

00:34:09,720 --> 00:34:12,600
Telegraph's depending on how many

00:34:10,860 --> 00:34:14,820
metrics per second we need to handle a

00:34:12,600 --> 00:34:16,950
good thing of a Kafka is it doesn't Lee

00:34:14,820 --> 00:34:18,929
but the skills pretty well horizontally

00:34:16,950 --> 00:34:20,600
so we can rate 1 million points per

00:34:18,929 --> 00:34:22,740
second but on a reasonable size cluster

00:34:20,600 --> 00:34:24,870
doesn't mean Telegraph can consume them

00:34:22,740 --> 00:34:26,730
that way so maybe we need to or maybe

00:34:24,870 --> 00:34:28,740
we'll need three and that becomes a

00:34:26,730 --> 00:34:30,870
choice that you can make again using the

00:34:28,740 --> 00:34:34,500
internal metric plugin to analyze how

00:34:30,870 --> 00:34:36,150
your Telegraph is performing and I'm

00:34:34,500 --> 00:34:39,179
going to come back to this because the

00:34:36,150 --> 00:34:40,980
demo I've set up as this architecture

00:34:39,179 --> 00:34:42,210
and it's going to be a little bit

00:34:40,980 --> 00:34:43,410
confusing as I work through the demo

00:34:42,210 --> 00:34:44,910
because there are a lot of moving parts

00:34:43,410 --> 00:34:48,360
but I'm going to try and explain it as

00:34:44,910 --> 00:34:51,300
well as it can and serverless

00:34:48,360 --> 00:34:52,830
right that's another trending topic at

00:34:51,300 --> 00:34:55,860
the moment people wanted to server this

00:34:52,830 --> 00:34:58,590
stuff and to dates Telegraph has not

00:34:55,860 --> 00:35:01,320
been possible of doing this but

00:34:58,590 --> 00:35:04,140
fortunately I failed a PR two weeks ago

00:35:01,320 --> 00:35:07,170
the adds its ability so you can now use

00:35:04,140 --> 00:35:09,420
any serverless framework to run

00:35:07,170 --> 00:35:12,150
Telegraph configurations that run once

00:35:09,420 --> 00:35:13,830
and exit if that's something you're

00:35:12,150 --> 00:35:16,950
interested in I really really would like

00:35:13,830 --> 00:35:19,090
to speak to you before I leave here

00:35:16,950 --> 00:35:22,080
so cool I'm now we're going to take a

00:35:19,090 --> 00:35:22,080
look at the demo setup

00:35:30,740 --> 00:35:36,220
okay

00:35:32,660 --> 00:35:36,220
let me close some stuff down

00:35:43,190 --> 00:35:48,930
so we'll look at the docker compose fail

00:35:46,260 --> 00:35:50,400
first if anyone wants to hear my rant on

00:35:48,930 --> 00:35:51,990
why you shouldn't use various docker

00:35:50,400 --> 00:35:54,869
compose version 3 come and speak to me

00:35:51,990 --> 00:35:56,520
afterwards - so this is the same

00:35:54,869 --> 00:36:01,260
architecture and I'm gonna pull this

00:35:56,520 --> 00:36:04,349
back up that we have here so we have

00:36:01,260 --> 00:36:06,329
Telegraph edge so that's going to run as

00:36:04,349 --> 00:36:08,190
a sidecar of OS it docker compose just

00:36:06,329 --> 00:36:10,950
kind of think of the concept of the safe

00:36:08,190 --> 00:36:15,180
car and we have a special Telegraph

00:36:10,950 --> 00:36:17,460
configuration which has a metric buffer

00:36:15,180 --> 00:36:19,470
of 50 now kept that low so that we can

00:36:17,460 --> 00:36:21,900
see it on the graph when it comes up is

00:36:19,470 --> 00:36:23,369
running an influx DB listener to support

00:36:21,900 --> 00:36:25,950
the v1 client library which we are using

00:36:23,369 --> 00:36:28,230
in our pipe and application we also

00:36:25,950 --> 00:36:29,849
support we're also running the HTTP

00:36:28,230 --> 00:36:36,630
listener so that I can actually Carl

00:36:29,849 --> 00:36:37,859
metrics to Telegraph and one of the

00:36:36,630 --> 00:36:40,349
things that people always talk to me

00:36:37,859 --> 00:36:42,119
about conferences is yeah there isn't a

00:36:40,349 --> 00:36:44,010
plug-in for Telegraph to skip this thing

00:36:42,119 --> 00:36:46,079
and what I also want to show you here is

00:36:44,010 --> 00:36:47,670
that that shouldn't be a barrier for

00:36:46,079 --> 00:36:49,800
getting metrics from whatever archaic

00:36:47,670 --> 00:36:51,630
systems that you're working with we also

00:36:49,800 --> 00:36:53,790
have a socket listener which creates a

00:36:51,630 --> 00:36:56,280
Linux or UNIX socket that you can just

00:36:53,790 --> 00:36:58,500
cat metrics to literally using the

00:36:56,280 --> 00:37:01,020
capital or NC so let me show you that

00:36:58,500 --> 00:37:03,770
working we then have the health output

00:37:01,020 --> 00:37:05,579
it's pretty much the exact same example

00:37:03,770 --> 00:37:07,200
from the course that I showed earlier

00:37:05,579 --> 00:37:08,819
only I've got a response time of five

00:37:07,200 --> 00:37:12,270
there's a reason for that and I'm going

00:37:08,819 --> 00:37:13,500
to show you it we're doing internal

00:37:12,270 --> 00:37:15,329
metrics so we're gonna keep an eye on

00:37:13,500 --> 00:37:16,800
the buffer we're right into standard a

00:37:15,329 --> 00:37:18,119
and I'm only doing this so I can show

00:37:16,800 --> 00:37:19,710
you the multiple outputs we're also

00:37:18,119 --> 00:37:21,540
exposing all these metrics for

00:37:19,710 --> 00:37:24,000
Prometheus descriptor so we're eight

00:37:21,540 --> 00:37:29,210
into multiples and we also have a cat

00:37:24,000 --> 00:37:29,210
code everyone still with me

00:37:30,740 --> 00:37:37,820
so the edge Telegraph is right under

00:37:33,950 --> 00:37:39,470
Kafka Prometheus and a file once it's in

00:37:37,820 --> 00:37:42,530
Kafka we don't have the Telegraph

00:37:39,470 --> 00:37:44,000
consumer which is using the Kafka

00:37:42,530 --> 00:37:46,160
consumer plugin to read from the same

00:37:44,000 --> 00:37:50,530
topic that we're writing to and it's

00:37:46,160 --> 00:37:50,530
rates into n flux DB 1 and n fox db2

00:37:54,160 --> 00:38:03,490
let's actually just pull up those

00:37:56,480 --> 00:38:03,490
metrics make sure it's healthy good

00:38:05,220 --> 00:38:11,640
so first we'll take a look in flux db1

00:38:08,960 --> 00:38:13,260
come into the metric exploder take a

00:38:11,640 --> 00:38:19,710
look at Telegraph and there my web

00:38:13,260 --> 00:38:22,369
metrics here and let's change the window

00:38:19,710 --> 00:38:25,050
oneness to be five minutes

00:38:22,369 --> 00:38:26,670
this is metrics going all the way

00:38:25,050 --> 00:38:29,160
through our pipeline and heading and

00:38:26,670 --> 00:38:30,569
flux DB one I'm just showing you that so

00:38:29,160 --> 00:38:35,940
you know it's not big and then we're

00:38:30,569 --> 00:38:37,349
going to focus on fox db2 now and we're

00:38:35,940 --> 00:38:41,250
going to look at the exact same metric

00:38:37,349 --> 00:38:46,470
so we're gonna go to web metrics look at

00:38:41,250 --> 00:38:48,869
the response time and look at five

00:38:46,470 --> 00:38:51,420
minutes so you can see that we cannot

00:38:48,869 --> 00:38:53,369
have this mailed oscillation of metrics

00:38:51,420 --> 00:38:55,470
and that's me using the hell folk

00:38:53,369 --> 00:38:59,280
plug-in to kill my Python application

00:38:55,470 --> 00:39:01,170
every time it is bad what does that mean

00:38:59,280 --> 00:39:06,089
well I'm not a very good Python

00:39:01,170 --> 00:39:09,060
developer so somehow through a very pure

00:39:06,089 --> 00:39:12,210
code review process we managed to inject

00:39:09,060 --> 00:39:14,819
the sleep command so every time someone

00:39:12,210 --> 00:39:16,589
has says Python application is sleeping

00:39:14,819 --> 00:39:18,089
for one second the second request is

00:39:16,589 --> 00:39:19,800
these for two seconds the third request

00:39:18,089 --> 00:39:21,900
is sit for 3 seconds and taller has five

00:39:19,800 --> 00:39:24,180
seconds or Telegraph notices the

00:39:21,900 --> 00:39:27,569
response time has gone to high marks is

00:39:24,180 --> 00:39:28,800
unhealthy and docker restarts it and

00:39:27,569 --> 00:39:31,680
that's the power of the health plug-in

00:39:28,800 --> 00:39:33,450
here so we're using real metrics from

00:39:31,680 --> 00:39:35,520
the application to determine if it's

00:39:33,450 --> 00:39:37,740
healthy or unhealthy and have in our

00:39:35,520 --> 00:39:39,720
orchestration dark opposed or docker

00:39:37,740 --> 00:39:42,210
kubernetes restart it when we feel that

00:39:39,720 --> 00:39:44,819
it's not behaving properly the other

00:39:42,210 --> 00:39:46,290
really cool thing about this demo well I

00:39:44,819 --> 00:39:49,200
think though is that this is an N flex

00:39:46,290 --> 00:39:51,540
TB one client library and we're also

00:39:49,200 --> 00:39:55,710
writing to influx db2 again it's really

00:39:51,540 --> 00:40:03,119
easy to move our metrics around now I

00:39:55,710 --> 00:40:04,619
also want to show off the random ways in

00:40:03,119 --> 00:40:08,700
which we can also get metrics into an

00:40:04,619 --> 00:40:11,540
application so first I have a script on

00:40:08,700 --> 00:40:11,540
here called T curl

00:40:14,020 --> 00:40:22,869
tape and failure all right so this is

00:40:20,200 --> 00:40:26,730
using a Carroll command to local host

00:40:22,869 --> 00:40:28,300
and port 8080 and stand on a JSON blob

00:40:26,730 --> 00:40:30,970
and that's it

00:40:28,300 --> 00:40:33,790
that's me racing matrix just with a

00:40:30,970 --> 00:40:37,450
terminal and curl we also have another

00:40:33,790 --> 00:40:44,800
script on here which is see if I can

00:40:37,450 --> 00:40:47,680
remember the name T echo which uses echo

00:40:44,800 --> 00:40:49,720
512 paper knit through netcat to write

00:40:47,680 --> 00:40:51,040
to UNIX socket on this machine and again

00:40:49,720 --> 00:40:52,720
these metrics are going through that

00:40:51,040 --> 00:40:55,150
entire symmetric pipeline and everything

00:40:52,720 --> 00:40:56,500
else's so there's a really cool

00:40:55,150 --> 00:40:58,390
advantage to having these Telegraph's

00:40:56,500 --> 00:41:00,040
everywhere it doesn't matter what

00:40:58,390 --> 00:41:02,140
software you have there's always a way

00:41:00,040 --> 00:41:05,589
to get metrics through Telegraph to your

00:41:02,140 --> 00:41:12,520
tsdp something else I want to show would

00:41:05,589 --> 00:41:18,330
be is it to prom this one I just cooked

00:41:12,520 --> 00:41:18,330
prom okay which from

00:41:23,319 --> 00:41:28,280
there we go so this Telegraph is also

00:41:26,660 --> 00:41:30,589
exposing all of my metrics and

00:41:28,280 --> 00:41:32,210
Prometheus exposition format so if you

00:41:30,589 --> 00:41:34,099
want to run Prometheus there - that

00:41:32,210 --> 00:41:36,050
could be scraping all this as well as it

00:41:34,099 --> 00:41:37,550
going through the standard pay plane and

00:41:36,050 --> 00:41:39,530
that allows me to do the correlations to

00:41:37,550 --> 00:41:41,059
understand that I'm watching the

00:41:39,530 --> 00:41:43,750
Watchmen and that my system is actually

00:41:41,059 --> 00:41:43,750
working correctly

00:41:50,420 --> 00:41:53,500
I'll have Africa

00:41:57,940 --> 00:42:04,780
I think that's my demo yes so we're

00:42:01,839 --> 00:42:06,430
using the Hellfire using live matrix the

00:42:04,780 --> 00:42:08,710
determinant application is healthy it's

00:42:06,430 --> 00:42:11,289
been restarted when it fails we're using

00:42:08,710 --> 00:42:13,930
Karl we're using netcat and we're gonna

00:42:11,289 --> 00:42:17,400
Prometheus client exposition so

00:42:13,930 --> 00:42:20,950
Telegraph is a really powerful tool Oh

00:42:17,400 --> 00:42:26,020
No aah I did forget something something

00:42:20,950 --> 00:42:27,789
let's kill Kafka so I talked about

00:42:26,020 --> 00:42:29,349
resiliency yeah right I want to

00:42:27,789 --> 00:42:30,760
understand that my pipeline is always

00:42:29,349 --> 00:42:34,210
gonna work even when I take away the

00:42:30,760 --> 00:42:35,770
core component in the middle so we're

00:42:34,210 --> 00:42:38,289
gonna give that a few seconds

00:42:35,770 --> 00:42:39,579
um but I have to give it 10 seconds we

00:42:38,289 --> 00:42:41,289
actually want to see some metrics get

00:42:39,579 --> 00:42:43,599
dropped here because I have a very small

00:42:41,289 --> 00:42:48,190
metric buffer of 50 and I'm writing more

00:42:43,599 --> 00:42:50,020
matches than that every 10 seconds so

00:42:48,190 --> 00:42:55,500
what we should see here is we have some

00:42:50,020 --> 00:42:59,380
Messing metrics so I'm going to use the

00:42:55,500 --> 00:43:01,000
internal rate so these are metrics

00:42:59,380 --> 00:43:03,430
exposed by the internal plugin from

00:43:01,000 --> 00:43:05,619
Telegraph we have access to the metric

00:43:03,430 --> 00:43:10,420
buffer limit the metric buffer size and

00:43:05,619 --> 00:43:13,119
metrics dropped so things are pretty

00:43:10,420 --> 00:43:14,619
stable until I killed Kafka if we leave

00:43:13,119 --> 00:43:16,900
that longer we'd start to see mess in

00:43:14,619 --> 00:43:18,940
points but I don't want to leave it too

00:43:16,900 --> 00:43:20,829
long so when I bring Kafka back up now

00:43:18,940 --> 00:43:22,599
and what we should see is all those

00:43:20,829 --> 00:43:24,160
metrics be backfilled we should see the

00:43:22,599 --> 00:43:26,049
metric buffer rise as they're being

00:43:24,160 --> 00:43:29,049
stored in memory and then drop back then

00:43:26,049 --> 00:43:30,279
as Khafre came back only an unflushed we

00:43:29,049 --> 00:43:32,079
will see a small amount of metrics

00:43:30,279 --> 00:43:34,089
dropped just because I have it so low as

00:43:32,079 --> 00:43:36,190
a fresh hold but you can imagine instead

00:43:34,089 --> 00:43:38,289
of 50 metric buffer limit having 10,000

00:43:36,190 --> 00:43:39,640
100,000 throw a million it all comes

00:43:38,289 --> 00:43:43,539
down to your usage and what you're using

00:43:39,640 --> 00:43:45,220
it for I'll turn on the auto refresh

00:43:43,539 --> 00:43:49,990
we'll give this five seconds and

00:43:45,220 --> 00:43:51,490
hopefully kicks in there we go so we

00:43:49,990 --> 00:43:53,740
have a blue line here this is the buffer

00:43:51,490 --> 00:43:57,059
size metric as calf code was unavailable

00:43:53,740 --> 00:43:59,319
the buffer stuff increases and

00:43:57,059 --> 00:44:01,319
eventually that will drop back down as

00:43:59,319 --> 00:44:04,089
the metrics come back through the screen

00:44:01,319 --> 00:44:06,720
I'll leave that there just now and we'll

00:44:04,089 --> 00:44:06,720
move forward

00:44:11,440 --> 00:44:19,930
let's cool into here so this is my

00:44:18,220 --> 00:44:23,260
custom branch of Telegraph with the run

00:44:19,930 --> 00:44:25,420
one slag you can see here exits when it

00:44:23,260 --> 00:44:27,070
finishes theses are long one of our

00:44:25,420 --> 00:44:30,100
oldest feature requests on the github

00:44:27,070 --> 00:44:31,900
repository it was lodged in 2016 we're

00:44:30,100 --> 00:44:35,160
never gonna run to it I wanted to and

00:44:31,900 --> 00:44:38,080
exists though it's a really cool flag

00:44:35,160 --> 00:44:40,570
and we've done the demo so what I would

00:44:38,080 --> 00:44:42,790
iterate here Telegraph is extremely

00:44:40,570 --> 00:44:44,890
powerful to I can collect metrics and

00:44:42,790 --> 00:44:47,410
give you a whole bunch of flexibility

00:44:44,890 --> 00:44:49,300
with buffering batching and resiliency

00:44:47,410 --> 00:44:51,880
and we've only touched on tan of the

00:44:49,300 --> 00:44:53,410
plugins here so there are over 200 you

00:44:51,880 --> 00:44:55,390
can imagine the amount of capabilities

00:44:53,410 --> 00:44:56,770
that we have in this tool so hopefully

00:44:55,390 --> 00:44:59,470
you can all go play with it and let me

00:44:56,770 --> 00:45:01,720
know what you enjoy my slides are on

00:44:59,470 --> 00:45:03,580
lane I speaker deck all the code from as

00:45:01,720 --> 00:45:06,580
demo it's on my github so the lengths

00:45:03,580 --> 00:45:08,320
are here I'm on Twitter if you ever have

00:45:06,580 --> 00:45:10,240
any problems with any product from

00:45:08,320 --> 00:45:11,920
influx data it's my job to answer those

00:45:10,240 --> 00:45:14,160
questions so feel free to tweet me at

00:45:11,920 --> 00:45:17,700
Rockwood and I'll come and help you out

00:45:14,160 --> 00:45:17,700
are there any questions

00:45:25,300 --> 00:45:32,680
one okay can you go back to the picture

00:45:28,970 --> 00:45:32,680
with Kafka yeah of course

00:45:32,770 --> 00:45:36,859
okay I don't understand this

00:45:34,910 --> 00:45:38,260
architecture so all of this is very new

00:45:36,859 --> 00:45:42,800
to me so it could be a stupid question

00:45:38,260 --> 00:45:45,200
anyway if I well understood that we can

00:45:42,800 --> 00:45:47,570
have a lot of messages from the various

00:45:45,200 --> 00:45:48,200
Telegraph instances let's say 10

00:45:47,570 --> 00:45:50,330
Millions

00:45:48,200 --> 00:45:53,119
so we handle all of them with one

00:45:50,330 --> 00:45:55,310
cluster of Kafka what I don't understand

00:45:53,119 --> 00:45:58,340
is what happens after the cluster of

00:45:55,310 --> 00:46:00,560
Kafka because I guess if it receives 10

00:45:58,340 --> 00:46:02,960
minutes messages it publishes 10

00:46:00,560 --> 00:46:07,910
millions messages so you can enter them

00:46:02,960 --> 00:46:10,190
is there a way to reduce the sides yes

00:46:07,910 --> 00:46:11,570
so what I would suggest if you're

00:46:10,190 --> 00:46:14,060
publishing to Kafka need to have high

00:46:11,570 --> 00:46:17,420
velocity of metrics you're probably want

00:46:14,060 --> 00:46:19,190
your your compaction on that topic to be

00:46:17,420 --> 00:46:20,480
everywhere SEC servers that's obscure a

00:46:19,190 --> 00:46:22,910
so the Kafka says it's just their

00:46:20,480 --> 00:46:25,250
television distribution Telegraph's on

00:46:22,910 --> 00:46:26,900
the consumer side once the metrics had

00:46:25,250 --> 00:46:29,210
the consumer side of Telegraph which is

00:46:26,900 --> 00:46:31,609
the to the top left those couldn't do

00:46:29,210 --> 00:46:33,680
all of the same and memory aggregations

00:46:31,609 --> 00:46:35,630
processing and serializing that are

00:46:33,680 --> 00:46:36,680
available and all the Telegraph's so

00:46:35,630 --> 00:46:38,450
even though you're right in 10 million

00:46:36,680 --> 00:46:40,550
messages you can definitely rate all

00:46:38,450 --> 00:46:42,260
terminal all 10 million of those points

00:46:40,550 --> 00:46:44,330
to andfox DB or Prometheus or something

00:46:42,260 --> 00:46:46,430
but if you want to work out aggregates

00:46:44,330 --> 00:46:48,830
over five-minute windows Telegraph can

00:46:46,430 --> 00:46:50,000
do that before right into your TS DB so

00:46:48,830 --> 00:46:51,650
it's just it making sure that you have

00:46:50,000 --> 00:46:54,050
Kafka as their tell you to fan out

00:46:51,650 --> 00:46:55,820
that's consumption side do the in memory

00:46:54,050 --> 00:46:57,440
aggregations if you want them or just

00:46:55,820 --> 00:47:00,230
control the ingestion right to your tsdp

00:46:57,440 --> 00:47:02,750
the thing is GSD peas are purpose-built

00:47:00,230 --> 00:47:04,010
to handle high velocity and Sarah's but

00:47:02,750 --> 00:47:06,140
people are doing some really crazy stuff

00:47:04,010 --> 00:47:07,160
with metrics so bringing in Kafka just

00:47:06,140 --> 00:47:08,900
others just have a little bit of

00:47:07,160 --> 00:47:10,220
protection and it means if something

00:47:08,900 --> 00:47:12,710
does go wrong you can go back within

00:47:10,220 --> 00:47:14,030
your retention policy on Kafka andrey

00:47:12,710 --> 00:47:16,130
consume those metrics or you can write

00:47:14,030 --> 00:47:17,599
into another data store that's up to you

00:47:16,130 --> 00:47:19,550
so it's just there as an ability to

00:47:17,599 --> 00:47:28,339
offer up Telegraph from both sides of

00:47:19,550 --> 00:47:31,820
the pipeline ok so you said that

00:47:28,339 --> 00:47:33,290
Telegraph is resilient if you have to

00:47:31,820 --> 00:47:35,089
write to somewhere which is not

00:47:33,290 --> 00:47:36,420
available choose a buffer but what

00:47:35,089 --> 00:47:38,400
happens if it's Telegraph

00:47:36,420 --> 00:47:40,350
self that goes down is this buffer

00:47:38,400 --> 00:47:42,630
persistent is there a way to persist it

00:47:40,350 --> 00:47:44,280
no thanks

00:47:42,630 --> 00:47:46,770
I've Telegraph crashes you will lose

00:47:44,280 --> 00:47:48,690
whatever isn't memory okay and what a

00:47:46,770 --> 00:47:51,600
lot of people do or what some people do

00:47:48,690 --> 00:47:53,700
as the right to fail locally as well and

00:47:51,600 --> 00:47:55,860
then that could be parched every ten

00:47:53,700 --> 00:47:58,200
minutes and it's just like a really

00:47:55,860 --> 00:47:59,790
pseudo rate ahead log that's there is an

00:47:58,200 --> 00:48:01,260
option not something I would encourage

00:47:59,790 --> 00:48:06,360
but if you really need the guarantee

00:48:01,260 --> 00:48:23,550
metrics aren't lost okay thank you yeah

00:48:06,360 --> 00:48:26,550
you just throw that over yes okay so if

00:48:23,550 --> 00:48:31,830
we pull up the code here on the edge

00:48:26,550 --> 00:48:33,330
site we have output Kafka here so that's

00:48:31,830 --> 00:48:37,950
gonna rate all of our metrics to cap go

00:48:33,330 --> 00:48:41,610
from Telegraph only notice rabbitmq is

00:48:37,950 --> 00:48:46,850
MQTT radius Redis is one year you can

00:48:41,610 --> 00:48:46,850
use this okay there are a lot of plugins

00:48:47,420 --> 00:48:54,810
any more questions all right well thank

00:48:53,640 --> 00:48:56,670
you very much your time I hope you find

00:48:54,810 --> 00:48:58,410
us interest and please do come and speak

00:48:56,670 --> 00:48:59,070
to me any point for the day I'd love to

00:48:58,410 --> 00:49:03,340
talk to you

00:48:59,070 --> 00:49:14,130
[Applause]

00:49:03,340 --> 00:49:14,130
[Music]

00:49:17,720 --> 00:49:20,489

YouTube URL: https://www.youtube.com/watch?v=eRdg37wmZeo


