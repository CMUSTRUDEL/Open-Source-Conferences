Title: OSMC 2019 | Monitoring Nomad with Prometheus and Icinga by Bram Vogelaar
Publication date: 2019-11-18
Playlist: OSMC 2019 | Open Source Monitoring Conference
Description: 
	Things like Infrastructure as Code, Service Discovery and Config Management can and have helped us to quickly build and rebuild infrastructure but we haven’t nearly spend enough time to train our self to review, monitor and respond to outages. Does our platform degrade in a graceful way or what does a high cpu load really mean? What can we learn from level 1 outages to be able to run our platforms more reliably. We all love infrastructure as code, we automate everything ™. However making sure all of our infrastructure assets are monitored effectively can be slow and resource intensive multi stage process. During this talk we will investigate how we can setup and monitor a cloud native container platform that scales using hashicorp’s consul and nomad service discovery and container scheduling tools and Traefik a edge router. This talk will focus on making sure we can have alerts and metrics in this quickly changing infrastructure landscape. We’re going to show how to integrate icinga2 with consul and nomad. To finish off we´ll show how to visualize the prometheus data in a way that resembles netflix’s vizceral using freely available grafana dashboards and plugins.


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Musik: FRAMETRAXX
Captions: 
	00:00:05,120 --> 00:00:08,719
[Music]

00:00:16,550 --> 00:00:25,289
and welcome so who was at the ignite

00:00:19,650 --> 00:00:27,300
yesterday then I propose a new title for

00:00:25,289 --> 00:00:30,779
the talk date containers friends don't

00:00:27,300 --> 00:00:32,520
let friends use kubernetes edition so

00:00:30,779 --> 00:00:34,620
today we're talking about gnome and the

00:00:32,520 --> 00:00:37,110
way we monitor it domain we get metrics

00:00:34,620 --> 00:00:39,300
and norm and I'll introduce later but

00:00:37,110 --> 00:00:41,579
it's another schedule scheduler engine

00:00:39,300 --> 00:00:44,969
in my opinion is a lot easier to use

00:00:41,579 --> 00:00:48,420
than kubernetes first of all let's

00:00:44,969 --> 00:00:49,920
introduce myself back in the day I used

00:00:48,420 --> 00:00:54,149
to go to university to become a

00:00:49,920 --> 00:00:57,870
molecular biologist I spend some of my

00:00:54,149 --> 00:01:02,969
time in Big Pharma so I sold my soul to

00:00:57,870 --> 00:01:05,580
the the corporate world then Big Data

00:01:02,969 --> 00:01:08,299
became a thing in molecular biology so I

00:01:05,580 --> 00:01:11,790
became a developer I used to do stats on

00:01:08,299 --> 00:01:13,530
my data so I sold my soul according to

00:01:11,790 --> 00:01:16,369
my colleagues I sold my soul to the dark

00:01:13,530 --> 00:01:19,890
side and became a developer in academic

00:01:16,369 --> 00:01:23,520
environments the developer guy also is

00:01:19,890 --> 00:01:25,979
the operations guy now I'm employed any

00:01:23,520 --> 00:01:27,750
weeds as the operations guy so I sold

00:01:25,979 --> 00:01:30,840
according to my colleagues I sold my

00:01:27,750 --> 00:01:33,420
soul to the dark side again and at the

00:01:30,840 --> 00:01:35,400
moment I'm an open-source consultant any

00:01:33,420 --> 00:01:39,329
means that probably means I run I'm

00:01:35,400 --> 00:01:43,619
going to on my laptop now I do but

00:01:39,329 --> 00:01:45,750
that's and that's what we're gonna

00:01:43,619 --> 00:01:47,159
that's what I am that's what we're doing

00:01:45,750 --> 00:01:51,899
and this is pretty much what we're going

00:01:47,159 --> 00:01:53,250
to discuss today a lot of lines but but

00:01:51,899 --> 00:01:54,780
to go through it there's people on the

00:01:53,250 --> 00:01:57,390
internet they want to go to your website

00:01:54,780 --> 00:02:00,119
and they need to end up on your normal

00:01:57,390 --> 00:02:02,399
cluster your scheduling engine and this

00:02:00,119 --> 00:02:04,680
is as well the simplest drawing I could

00:02:02,399 --> 00:02:06,930
come up with that has some form of

00:02:04,680 --> 00:02:10,619
service discovery and it had an ingress

00:02:06,930 --> 00:02:12,810
controller I'm looking at at console

00:02:10,619 --> 00:02:15,140
which is not our Hoshi Corp tool

00:02:12,810 --> 00:02:18,900
and traffic which has integrations with

00:02:15,140 --> 00:02:22,350
console but also kubernetes asset CD and

00:02:18,900 --> 00:02:25,770
other stuff introducing traffic as I

00:02:22,350 --> 00:02:28,350
said it's an open source added the open

00:02:25,770 --> 00:02:29,819
source router which means it serve stuff

00:02:28,350 --> 00:02:32,400
that comes of all people requests

00:02:29,819 --> 00:02:35,550
stuffing it basically route stuff to

00:02:32,400 --> 00:02:37,560
where it needs to go you can have static

00:02:35,550 --> 00:02:38,700
routes but at the moment at today we're

00:02:37,560 --> 00:02:42,959
going to be more interested in the

00:02:38,700 --> 00:02:45,000
dynamic routes because your scheduler

00:02:42,959 --> 00:02:47,489
will stack it on a node where you have

00:02:45,000 --> 00:02:49,800
no idea where it's going to end up that

00:02:47,489 --> 00:02:52,890
has Lotus loads of native integrations

00:02:49,800 --> 00:02:55,140
kubernetes Rancher at CD console as I

00:02:52,890 --> 00:02:57,030
said a couple of weeks back they

00:02:55,140 --> 00:03:02,130
released 2.0 which has none of these

00:02:57,030 --> 00:03:03,900
integrations they release it as a 2.0

00:03:02,130 --> 00:03:06,180
but it's actually in alpha so I want the

00:03:03,900 --> 00:03:07,739
2.0 only has kubernetes integration

00:03:06,180 --> 00:03:10,290
right now unless they really something

00:03:07,739 --> 00:03:12,810
this week if you want console what we're

00:03:10,290 --> 00:03:16,050
going to discuss about I am assuming who

00:03:12,810 --> 00:03:20,190
you are also using the 1.7 branch or 1.7

00:03:16,050 --> 00:03:22,079
releases it has native less encrypting

00:03:20,190 --> 00:03:24,720
integration so for us people that are

00:03:22,079 --> 00:03:26,280
lazy you can basically automatically get

00:03:24,720 --> 00:03:30,600
your certificates without having to set

00:03:26,280 --> 00:03:32,760
up the let's encrypt client what does it

00:03:30,600 --> 00:03:36,590
look like it's fairly simple it's tamil

00:03:32,760 --> 00:03:40,769
it's somewhere between ini files and

00:03:36,590 --> 00:03:42,450
llamo it's fairly simple to set up we

00:03:40,769 --> 00:03:47,220
have two entry points one called ETA

00:03:42,450 --> 00:03:48,930
HTTP which lessens a port 80 and because

00:03:47,220 --> 00:03:51,720
we're not caveman we basically forward

00:03:48,930 --> 00:03:56,250
HTTP on to the next entry point which is

00:03:51,720 --> 00:03:58,799
HTTP which lessens on 4th or 3 for which

00:03:56,250 --> 00:04:03,329
we're gonna set up some let's encrypt

00:03:58,799 --> 00:04:06,079
certificates so we want SSL there's a

00:04:03,329 --> 00:04:09,060
section called Acme with the entry point

00:04:06,079 --> 00:04:11,730
specified as HTTPS that's where you need

00:04:09,060 --> 00:04:13,829
to serve those the asterisk is about the

00:04:11,730 --> 00:04:15,630
following setting the on on host rule

00:04:13,829 --> 00:04:17,820
which basically you can request

00:04:15,630 --> 00:04:19,769
certificates in advance or you can

00:04:17,820 --> 00:04:23,750
request certificates at the moment

00:04:19,769 --> 00:04:26,790
traffic works out you need a certificate

00:04:23,750 --> 00:04:28,230
normally that's fine but when you have

00:04:26,790 --> 00:04:31,320
traffic coming in already that first

00:04:28,230 --> 00:04:32,730
connection is gonna destroy well no it's

00:04:31,320 --> 00:04:34,740
not gonna be destroyed it's basically

00:04:32,730 --> 00:04:37,380
it's gonna have quite a bit of latency

00:04:34,740 --> 00:04:40,950
because before first bite it's actually

00:04:37,380 --> 00:04:42,510
going to request a certificate most of

00:04:40,950 --> 00:04:45,470
the time we help in a moment we'll see

00:04:42,510 --> 00:04:47,880
we'll add automatic monitoring so

00:04:45,470 --> 00:04:49,500
monitoring will be your first visitor so

00:04:47,880 --> 00:04:53,580
you shouldn't have this problem but keep

00:04:49,500 --> 00:04:57,390
in mind it's requests the certificates

00:04:53,580 --> 00:04:59,490
get requests on the live connection the

00:04:57,390 --> 00:05:02,310
challenge needs to be on the HTTP

00:04:59,490 --> 00:05:04,710
endpoint then then the last line is

00:05:02,310 --> 00:05:06,810
actually how we turn it on and now for

00:05:04,710 --> 00:05:07,310
the dynamic bit it's actually fairly

00:05:06,810 --> 00:05:10,140
simple

00:05:07,310 --> 00:05:12,720
it's another section called console

00:05:10,140 --> 00:05:15,990
catalog we have a domain you specified

00:05:12,720 --> 00:05:20,000
domain in my case it's the attachment

00:05:15,990 --> 00:05:23,550
Unicom domain which is my private domain

00:05:20,000 --> 00:05:26,610
and we point it to our local console

00:05:23,550 --> 00:05:29,910
cluster console has a nice setup where

00:05:26,610 --> 00:05:32,220
it's basically there's the agent every

00:05:29,910 --> 00:05:34,110
note and you can ask the local agent

00:05:32,220 --> 00:05:35,640
question and it goes out into the

00:05:34,110 --> 00:05:37,920
network who actually thinks the network

00:05:35,640 --> 00:05:41,280
locally to be able to serve the the

00:05:37,920 --> 00:05:44,730
answer and then the last one is the

00:05:41,280 --> 00:05:47,270
security feature which is true by by

00:05:44,730 --> 00:05:49,950
default so that's anti-pattern but

00:05:47,270 --> 00:05:53,160
exposed by default so at the moment when

00:05:49,950 --> 00:05:54,600
we turn on console support in traffic

00:05:53,160 --> 00:05:57,240
what it actually does it will serve

00:05:54,600 --> 00:05:59,880
anything it will expose all the services

00:05:57,240 --> 00:06:02,070
so bikes by turning off exposed by

00:05:59,880 --> 00:06:04,020
default that actually you have to make a

00:06:02,070 --> 00:06:06,780
conscious decision to actually serve

00:06:04,020 --> 00:06:08,490
something to the general public if

00:06:06,780 --> 00:06:10,350
traffic's on your local network you're

00:06:08,490 --> 00:06:13,950
probably fine but in my case it's

00:06:10,350 --> 00:06:20,580
actually serving stuff to do the

00:06:13,950 --> 00:06:22,350
internet so next one is how do we turn

00:06:20,580 --> 00:06:22,860
on metrics because that's what we're all

00:06:22,350 --> 00:06:24,690
about

00:06:22,860 --> 00:06:27,480
we want to know what's happening we want

00:06:24,690 --> 00:06:29,250
to see our visitors come in for the

00:06:27,480 --> 00:06:31,710
people that like dashboards there's a

00:06:29,250 --> 00:06:33,620
simple flag and the other one is metrics

00:06:31,710 --> 00:06:36,930
Prometheus that's what we're after

00:06:33,620 --> 00:06:39,180
then it gets on an special end point and

00:06:36,930 --> 00:06:40,650
on a special port that's only available

00:06:39,180 --> 00:06:42,870
well you have to make it

00:06:40,650 --> 00:06:45,389
available locally and then that's there

00:06:42,870 --> 00:06:48,630
that's where is a built-in primitives

00:06:45,389 --> 00:06:53,070
exporter and ping is what we'll gonna

00:06:48,630 --> 00:06:55,289
use in the console check when you go out

00:06:53,070 --> 00:06:57,840
to the graph on a dashboard website you

00:06:55,289 --> 00:07:02,759
can actually have lots and lots of nice

00:06:57,840 --> 00:07:04,560
pre-built dashboards already wanna show

00:07:02,759 --> 00:07:07,500
dashboards I also showed the number of

00:07:04,560 --> 00:07:10,620
the D ID for the graph on a dashboard

00:07:07,500 --> 00:07:12,090
website most of them is really

00:07:10,620 --> 00:07:15,090
interesting is that they actually split

00:07:12,090 --> 00:07:19,199
out Walda traffic based on the HTTP code

00:07:15,090 --> 00:07:21,449
which then we can do nice calculations

00:07:19,199 --> 00:07:25,979
based on the ratio between two hundred

00:07:21,449 --> 00:07:31,550
four hundred five hundreds of which then

00:07:25,979 --> 00:07:36,690
we we have nice Prometheus alert manager

00:07:31,550 --> 00:07:40,199
request the alert manager alerts that

00:07:36,690 --> 00:07:42,479
tell me if my ratio is off and that

00:07:40,199 --> 00:07:48,150
probably should should start looking at

00:07:42,479 --> 00:07:51,479
what's going on next one console of we

00:07:48,150 --> 00:07:53,849
pretty much alluded to it already but on

00:07:51,479 --> 00:07:57,840
a console is an open source service

00:07:53,849 --> 00:08:01,110
discovery tool that most of the time

00:07:57,840 --> 00:08:03,780
will serve information as SRV records

00:08:01,110 --> 00:08:06,900
from DNS so you can you can bind it into

00:08:03,780 --> 00:08:11,250
your favorite DNS server and then based

00:08:06,900 --> 00:08:13,139
on known domains that are probably not

00:08:11,250 --> 00:08:15,240
routable in your system I mean in your

00:08:13,139 --> 00:08:19,099
environment you can actually find

00:08:15,240 --> 00:08:21,659
services so my case I take my local

00:08:19,099 --> 00:08:24,720
console cluster for the service puppet

00:08:21,659 --> 00:08:29,099
master it also has a built in key value

00:08:24,720 --> 00:08:31,289
store which is very nice to use because

00:08:29,099 --> 00:08:33,779
it actually knows what location so

00:08:31,289 --> 00:08:36,270
there's the notion of data person the

00:08:33,779 --> 00:08:38,520
information will know the key value

00:08:36,270 --> 00:08:41,969
information will know what data center

00:08:38,520 --> 00:08:44,159
you're in and it recently gained the the

00:08:41,969 --> 00:08:46,830
possibility to have a full sir a CL

00:08:44,159 --> 00:08:48,089
service match so you can actually block

00:08:46,830 --> 00:08:49,890
other service so you have to

00:08:48,089 --> 00:08:52,820
specifically tell other services that

00:08:49,890 --> 00:08:52,820
are allowed to use it

00:08:55,450 --> 00:09:01,970
little puppet example of how to build it

00:08:58,930 --> 00:09:04,670
so in my case the traffic UI I want to

00:09:01,970 --> 00:09:07,970
expose it because who has the time for

00:09:04,670 --> 00:09:11,089
command line so in my case I want to

00:09:07,970 --> 00:09:12,529
traffic UI that's listening on port 80 I

00:09:11,089 --> 00:09:14,930
want to have make sure that it is

00:09:12,529 --> 00:09:19,880
available in console because then I can

00:09:14,930 --> 00:09:21,470
make it available in in traffic console

00:09:19,880 --> 00:09:24,440
uses the notion of service but it also

00:09:21,470 --> 00:09:26,390
needs checks so every server a service

00:09:24,440 --> 00:09:29,899
needs at least one check to make sure

00:09:26,390 --> 00:09:33,020
that the service is is active is live is

00:09:29,899 --> 00:09:35,870
available so it's fairly simple to setup

00:09:33,020 --> 00:09:38,360
it's a control check with a name I want

00:09:35,870 --> 00:09:41,660
to check it every 60 seconds and it

00:09:38,360 --> 00:09:44,930
needs to go out to a certain URL in my

00:09:41,660 --> 00:09:49,520
case just localhost 8080 and it's linked

00:09:44,930 --> 00:09:52,520
to the service traffic UI and the nice

00:09:49,520 --> 00:09:55,490
thing for us if you are interested in

00:09:52,520 --> 00:09:58,700
using console is basically the fact I am

00:09:55,490 --> 00:10:01,910
eval valid using a check is a valid

00:09:58,700 --> 00:10:03,770
console check they were clever enough or

00:10:01,910 --> 00:10:06,050
they were honest enough to basically

00:10:03,770 --> 00:10:09,770
steal the idea from me singer and they

00:10:06,050 --> 00:10:13,160
use the same exit code so in my case I

00:10:09,770 --> 00:10:14,870
can actually we have I wrote a Nagios

00:10:13,160 --> 00:10:16,279
plugins or any singer plugin that's

00:10:14,870 --> 00:10:21,770
called traffic status and I can

00:10:16,279 --> 00:10:24,529
basically replace the script or the HTTP

00:10:21,770 --> 00:10:26,450
endpoint and I can do all my magic in

00:10:24,529 --> 00:10:32,680
that's good and it's still linked to the

00:10:26,450 --> 00:10:35,180
to the traffic UI telemetry or metrics

00:10:32,680 --> 00:10:37,279
telemetry as they call it the metrics as

00:10:35,180 --> 00:10:39,440
far as normal people that's how we they

00:10:37,279 --> 00:10:42,620
call it it's fairly simple to turn on

00:10:39,440 --> 00:10:47,990
this is it's a to about two three lines

00:10:42,620 --> 00:10:49,070
it will tell you is how long the data

00:10:47,990 --> 00:10:51,440
needs to be in the system

00:10:49,070 --> 00:10:55,430
so in my case is 30 seconds otherwise it

00:10:51,440 --> 00:10:58,910
gets flushed and disabled hostname which

00:10:55,430 --> 00:11:01,180
doesn't prefix your information but uses

00:10:58,910 --> 00:11:01,180
tags

00:11:04,030 --> 00:11:11,720
also nice dashboards again directly off

00:11:07,670 --> 00:11:12,830
of a graph on our dashboard site tells

00:11:11,720 --> 00:11:16,730
you how many node you have in the

00:11:12,830 --> 00:11:20,150
cluster it tells you what what the lack

00:11:16,730 --> 00:11:21,770
is or the between the members it will

00:11:20,150 --> 00:11:25,790
show you once how much traffic is going

00:11:21,770 --> 00:11:27,230
around and most first enforcement well

00:11:25,790 --> 00:11:30,590
it will show you basic numbers about

00:11:27,230 --> 00:11:32,210
load CPU and that kind of stuff and

00:11:30,590 --> 00:11:35,030
Nomad this is what we're after this is

00:11:32,210 --> 00:11:38,210
the scheduler and again it's a to open

00:11:35,030 --> 00:11:42,110
source tool by Hoshi Corp is to do

00:11:38,210 --> 00:11:45,070
dynamic workloads or it actually can do

00:11:42,110 --> 00:11:48,130
batches most of the time you'll use

00:11:45,070 --> 00:11:54,800
containers but you can also use directly

00:11:48,130 --> 00:11:57,830
use Java and it has native integration

00:11:54,800 --> 00:12:00,290
with consul unfold similar to turning on

00:11:57,830 --> 00:12:03,410
telemetry for lines is turning on vault

00:12:00,290 --> 00:12:05,930
vault and while fault is a bit more work

00:12:03,410 --> 00:12:08,120
but console is definitely three four

00:12:05,930 --> 00:12:10,460
lines really basically point it to a

00:12:08,120 --> 00:12:13,760
cluster member and that's that's it

00:12:10,460 --> 00:12:19,880
Nomad will start announcing itself and

00:12:13,760 --> 00:12:21,370
its services into console and then

00:12:19,880 --> 00:12:23,870
you're good to go

00:12:21,370 --> 00:12:27,170
whereas I still haven't worked out how I

00:12:23,870 --> 00:12:31,550
can do it in kubernetes turning on

00:12:27,170 --> 00:12:33,350
metrics or telemetry in Nomad is you

00:12:31,550 --> 00:12:36,200
need to add answer a couple more

00:12:33,350 --> 00:12:39,830
questions but it's mostly interval again

00:12:36,200 --> 00:12:41,600
disable hostname and specifically need

00:12:39,830 --> 00:12:45,380
to ask for Prometheus metrics in this

00:12:41,600 --> 00:12:51,190
case a nice little dashboards the one I

00:12:45,380 --> 00:12:54,880
use most is is this one which is the 7/8

00:12:51,190 --> 00:13:01,100
6278 what it tells me the allocations

00:12:54,880 --> 00:13:06,110
Nomad is a system why you have to

00:13:01,100 --> 00:13:09,170
pre-announce the allocation system for

00:13:06,110 --> 00:13:11,290
people using VMs that's something new

00:13:09,170 --> 00:13:13,640
especially us that enemies

00:13:11,290 --> 00:13:15,260
professionally we do over commit our

00:13:13,640 --> 00:13:17,750
hardware

00:13:15,260 --> 00:13:21,170
but that's normally fine but in nomads

00:13:17,750 --> 00:13:24,920
you cannot overcome it because you

00:13:21,170 --> 00:13:26,930
announce your your allocations that's

00:13:24,920 --> 00:13:30,950
why you need to look at stuff like CPU

00:13:26,930 --> 00:13:34,400
memory and then it also tells you what

00:13:30,950 --> 00:13:38,510
what jobs are running which one jobs are

00:13:34,400 --> 00:13:40,160
trying to be scheduled so then you ask

00:13:38,510 --> 00:13:41,900
of course we've been talking about a lot

00:13:40,160 --> 00:13:45,620
about it but what does it look like a

00:13:41,900 --> 00:13:48,050
job in nomad is basically it needs to

00:13:45,620 --> 00:13:51,740
have three things it the name it's a job

00:13:48,050 --> 00:13:54,230
of ty blog it needs to land in a data

00:13:51,740 --> 00:13:57,080
center and my case it's a type service

00:13:54,230 --> 00:14:00,170
so it only need only one or two running

00:13:57,080 --> 00:14:03,050
instances and then there's a group the

00:14:00,170 --> 00:14:07,220
group is actually what defines the the

00:14:03,050 --> 00:14:09,020
meat of the of your job in my case I

00:14:07,220 --> 00:14:11,840
want to run a task called

00:14:09,020 --> 00:14:15,200
nginx that's my container my container

00:14:11,840 --> 00:14:17,810
has my my simple block in there and the

00:14:15,200 --> 00:14:21,110
nginx to serve it so the image in itself

00:14:17,810 --> 00:14:23,390
is about four or five mb/s at night that

00:14:21,110 --> 00:14:29,630
is biggest and I want to serve it from

00:14:23,390 --> 00:14:31,940
my AWS container registry and it needs

00:14:29,630 --> 00:14:35,710
to needs to listen at port 80 or

00:14:31,940 --> 00:14:35,710
something will be listening at port 80

00:14:36,250 --> 00:14:43,100
then I define the service because that's

00:14:40,190 --> 00:14:44,540
this check so we're the only way for

00:14:43,100 --> 00:14:46,640
nomads to announce it into console is

00:14:44,540 --> 00:14:49,370
having a check console needs to be able

00:14:46,640 --> 00:14:52,100
to check if the thing you're announcing

00:14:49,370 --> 00:14:53,600
actually will work so similar to the

00:14:52,100 --> 00:14:56,450
puppet code a show before we need to

00:14:53,600 --> 00:14:58,850
define a service my case service blog it

00:14:56,450 --> 00:15:01,100
will have the tag so a special tag

00:14:58,850 --> 00:15:02,650
traffic enable is true this this is the

00:15:01,100 --> 00:15:05,120
tag that I need to pass to actually

00:15:02,650 --> 00:15:08,540
provide something today

00:15:05,120 --> 00:15:11,350
big big angry world so my block is

00:15:08,540 --> 00:15:14,210
allowed to go to the internet worse

00:15:11,350 --> 00:15:15,710
other services that are using currently

00:15:14,210 --> 00:15:20,150
I'm not allowing it to go to the

00:15:15,710 --> 00:15:22,340
Internet it listens to port to the port

00:15:20,150 --> 00:15:25,190
HTTP which before we define this port 80

00:15:22,340 --> 00:15:26,750
and in that case it what I tell it is I

00:15:25,190 --> 00:15:28,240
need to check it every 10 seconds to see

00:15:26,750 --> 00:15:33,430
if something is listening on this age

00:15:28,240 --> 00:15:37,899
TP port and I define a timeout timeouts

00:15:33,430 --> 00:15:39,730
are required or very well you should you

00:15:37,899 --> 00:15:42,730
should do it because otherwise the

00:15:39,730 --> 00:15:45,279
console will kill your whatever is

00:15:42,730 --> 00:15:46,620
running because if it doesn't timeout it

00:15:45,279 --> 00:15:49,120
will just keep going

00:15:46,620 --> 00:15:50,560
and at that point this is the one I

00:15:49,120 --> 00:15:54,130
didn't show yesterday but this is my

00:15:50,560 --> 00:15:57,459
overly overly website it does nothing it

00:15:54,130 --> 00:16:00,700
has links to to my github my Twitter and

00:15:57,459 --> 00:16:02,140
not even my LinkedIn so this is what

00:16:00,700 --> 00:16:05,770
actually now landed on the system we

00:16:02,140 --> 00:16:09,459
have a running nor might we have a we

00:16:05,770 --> 00:16:11,290
have a service in in console mature you

00:16:09,459 --> 00:16:13,690
guys know console but it's the website

00:16:11,290 --> 00:16:18,060
it has a list so my blog actually has

00:16:13,690 --> 00:16:20,649
two healthy checks and because Nomad has

00:16:18,060 --> 00:16:22,420
announced it it actually has metadata so

00:16:20,649 --> 00:16:25,209
there's a nice little logo that

00:16:22,420 --> 00:16:29,290
basically announces it you this service

00:16:25,209 --> 00:16:32,890
is running a nomad it's not easy to

00:16:29,290 --> 00:16:35,920
query afterwards I'll go into it a

00:16:32,890 --> 00:16:38,350
little bit later but you can also see it

00:16:35,920 --> 00:16:42,370
in Nomad this is what the Nomad UI looks

00:16:38,350 --> 00:16:43,779
like my case is the the job blog which

00:16:42,370 --> 00:16:46,209
failed a couple of times because the

00:16:43,779 --> 00:16:47,920
cluster wasn't wasn't healthy and now

00:16:46,209 --> 00:16:49,420
it's actually running so we'll recent

00:16:47,920 --> 00:16:54,970
allocations the tasks

00:16:49,420 --> 00:16:56,620
Hugo is running since September you can

00:16:54,970 --> 00:16:59,320
drill down and it will actually tell you

00:16:56,620 --> 00:17:02,320
it runs on a certain node on a on port

00:16:59,320 --> 00:17:04,199
twenty three twenty three thousand seven

00:17:02,320 --> 00:17:07,030
hundred and six which is a random port

00:17:04,199 --> 00:17:10,209
Nomad will normally schedule your

00:17:07,030 --> 00:17:12,550
service somewhere on a port somewhere

00:17:10,209 --> 00:17:14,589
between twenty thousand thirty two

00:17:12,550 --> 00:17:17,260
thousand which actually actually

00:17:14,589 --> 00:17:21,040
introduces the nice little problem we

00:17:17,260 --> 00:17:25,679
have now is the scheduling is very

00:17:21,040 --> 00:17:27,850
dynamic so we can actually draw a line

00:17:25,679 --> 00:17:30,130
sort of drew the line already on the

00:17:27,850 --> 00:17:32,290
screen but to the left is pretty static

00:17:30,130 --> 00:17:36,490
on the right is going to be very very

00:17:32,290 --> 00:17:37,870
dynamic if you run while you're more

00:17:36,490 --> 00:17:41,429
likely than not are gonna run these

00:17:37,870 --> 00:17:44,289
nomads clusters in an auto scaling group

00:17:41,429 --> 00:17:49,350
because that's that's the easy part if

00:17:44,289 --> 00:17:52,029
your math your monitoring is gonna see

00:17:49,350 --> 00:17:53,859
you're running out of resources it's the

00:17:52,029 --> 00:17:56,769
easiest thing to do is just stick it in

00:17:53,859 --> 00:17:59,529
a hostel loading group credit card

00:17:56,769 --> 00:18:02,499
limits provided five credit card limits

00:17:59,529 --> 00:18:04,629
keep in mind those but otherwise stick

00:18:02,499 --> 00:18:07,029
it in an Auto loading group and it's

00:18:04,629 --> 00:18:09,009
gonna be also landing on dynamic ports

00:18:07,029 --> 00:18:11,190
so that's a problem you need to solve or

00:18:09,009 --> 00:18:14,470
we need to solve

00:18:11,190 --> 00:18:17,039
normally the systems were using it's

00:18:14,470 --> 00:18:20,769
definitely static they get set up and

00:18:17,039 --> 00:18:22,629
they're pretty much static non changing

00:18:20,769 --> 00:18:25,450
the rest of their life sometimes we add

00:18:22,629 --> 00:18:27,580
a new node but we're fine with that node

00:18:25,450 --> 00:18:30,820
not showing up and monitoring in the

00:18:27,580 --> 00:18:34,629
next ten minutes twenty minutes no math

00:18:30,820 --> 00:18:36,549
scheduling can happen at any point so

00:18:34,629 --> 00:18:39,940
there's there's mechanisms to reschedule

00:18:36,549 --> 00:18:43,239
stuff to move workloads around to create

00:18:39,940 --> 00:18:45,899
space to empty node and that's where our

00:18:43,239 --> 00:18:48,700
monitoring is gonna gonna suffer because

00:18:45,899 --> 00:18:51,970
the standard ways of doing stuff is not

00:18:48,700 --> 00:18:57,429
gonna catch up quick enough and so I

00:18:51,970 --> 00:19:02,139
wrote is a singer director plug-in that

00:18:57,429 --> 00:19:05,590
actually queries console this is well it

00:19:02,139 --> 00:19:08,590
does more but this is the meat of the of

00:19:05,590 --> 00:19:11,379
the module basically I stole some code

00:19:08,590 --> 00:19:12,749
for stole I used a module from someone

00:19:11,379 --> 00:19:15,369
else

00:19:12,749 --> 00:19:17,799
basically God creates this Factory and

00:19:15,369 --> 00:19:19,989
goes to console request the catalog

00:19:17,799 --> 00:19:22,539
which is one of the functions and then

00:19:19,989 --> 00:19:23,739
it asked can I get all the nodes that

00:19:22,539 --> 00:19:26,799
are currently in the catalog so the

00:19:23,739 --> 00:19:28,509
catalog is where console does its

00:19:26,799 --> 00:19:30,039
administration that's why it knows we're

00:19:28,509 --> 00:19:31,570
there the services are that's where it

00:19:30,039 --> 00:19:34,269
knows what the nodes are that's why I'd

00:19:31,570 --> 00:19:36,639
know so the checks are so I just ask

00:19:34,269 --> 00:19:39,700
where all the nodes and then it gets

00:19:36,639 --> 00:19:42,039
passed into director director is fairly

00:19:39,700 --> 00:19:45,039
easy to set up we have a new import

00:19:42,039 --> 00:19:46,929
source called console which feeds of the

00:19:45,039 --> 00:19:51,869
module our road and then I just need to

00:19:46,929 --> 00:19:51,869
point it to the local console cluster

00:19:52,259 --> 00:19:57,809
and now I see I used the wrong

00:19:55,350 --> 00:20:01,290
but basically they have a sink rule

00:19:57,809 --> 00:20:04,110
where I import hosts of type hosts I

00:20:01,290 --> 00:20:05,550
want to replace and I want to purge and

00:20:04,110 --> 00:20:08,840
then I actually have a filter expression

00:20:05,550 --> 00:20:13,920
to only import my my know Matt nodes

00:20:08,840 --> 00:20:15,330
with this with this sink rule because

00:20:13,920 --> 00:20:17,100
everything else is pretty much static

00:20:15,330 --> 00:20:21,360
for me so this is the only stuff I would

00:20:17,100 --> 00:20:23,880
really want to use dynamically then I

00:20:21,360 --> 00:20:25,740
need to sing some properties or map some

00:20:23,880 --> 00:20:30,929
stuff from console from the content

00:20:25,740 --> 00:20:33,450
information onto onto a singer so making

00:20:30,929 --> 00:20:36,059
it useful in your singer I need to map

00:20:33,450 --> 00:20:37,470
the address form from console onto the

00:20:36,059 --> 00:20:41,850
address and any singing I need to apply

00:20:37,470 --> 00:20:48,900
a basic template which my imagination

00:20:41,850 --> 00:20:52,500
went to dummy dummy does does CPU does

00:20:48,900 --> 00:20:54,600
memory that's all the standard self and

00:20:52,500 --> 00:20:56,490
in my case dummy actually that is the no

00:20:54,600 --> 00:21:00,420
matter also I used it's a it's a

00:20:56,490 --> 00:21:04,080
terrible terrible name but it when it

00:21:00,420 --> 00:21:06,750
does it checks the if no much is is life

00:21:04,080 --> 00:21:08,610
it will check if there are services if

00:21:06,750 --> 00:21:10,860
all the service of all the jobs sorry I

00:21:08,610 --> 00:21:14,820
should check should say all the jobs are

00:21:10,860 --> 00:21:18,660
actually running and then will it will

00:21:14,820 --> 00:21:24,510
alert me if there's failures not sure

00:21:18,660 --> 00:21:27,210
how many how familiar you are with with

00:21:24,510 --> 00:21:31,890
director director and also needs jobs

00:21:27,210 --> 00:21:33,420
which are easy to set up and now in the

00:21:31,890 --> 00:21:36,720
newest he singer there's actually is a

00:21:33,420 --> 00:21:39,059
service and that now runs the jobs for

00:21:36,720 --> 00:21:42,600
you otherwise I had some some console

00:21:39,059 --> 00:21:45,929
Watchers to actually check if it was

00:21:42,600 --> 00:21:49,020
going speaking about console Watchers

00:21:45,929 --> 00:21:51,450
console watches are well it's actually

00:21:49,020 --> 00:21:53,820
pretty much self-explanatory console

00:21:51,450 --> 00:21:57,809
watch is something for you and then her

00:21:53,820 --> 00:22:00,870
act on either the service changing the

00:21:57,809 --> 00:22:04,260
events firing nodes appearing nose

00:22:00,870 --> 00:22:08,610
changing node and in my case I'm

00:22:04,260 --> 00:22:13,820
actually also a big fan of the process

00:22:08,610 --> 00:22:13,820
I keep forgetting the process

00:22:14,029 --> 00:22:19,260
it's basically squares why it's it's

00:22:17,820 --> 00:22:21,480
partly management porn whether it's also

00:22:19,260 --> 00:22:23,490
it's a it's a summary of basically the

00:22:21,480 --> 00:22:25,320
underlying services I don't know I don't

00:22:23,490 --> 00:22:27,360
need to show a big matrix of all the

00:22:25,320 --> 00:22:33,029
nodes and now after all green I just

00:22:27,360 --> 00:22:36,690
want to know is my service up or not the

00:22:33,029 --> 00:22:37,049
business business process I get there in

00:22:36,690 --> 00:22:39,570
the end

00:22:37,049 --> 00:22:41,669
business process definitions are it's

00:22:39,570 --> 00:22:43,139
actually fairly simple DSL and it gets

00:22:41,669 --> 00:22:44,789
rid it doesn't get written into the

00:22:43,139 --> 00:22:50,220
database it gets written to a file on

00:22:44,789 --> 00:22:52,830
disk so actually created no it doesn't

00:22:50,220 --> 00:22:54,389
so I founded the file on disk and I've

00:22:52,830 --> 00:22:57,529
worked out what the t cell was which is

00:22:54,389 --> 00:23:00,090
pretty simple there's a name there's a

00:22:57,529 --> 00:23:03,419
separator and then lists the service

00:23:00,090 --> 00:23:06,899
names so I know in this case I set up

00:23:03,419 --> 00:23:09,480
for what sure that looks for new Nomad

00:23:06,899 --> 00:23:13,110
client so it needs new whenever a new

00:23:09,480 --> 00:23:14,549
nomad back-end shows up or a nomad

00:23:13,110 --> 00:23:16,980
normally sure it's called a client

00:23:14,549 --> 00:23:19,260
something that can serve services if I

00:23:16,980 --> 00:23:22,529
see one of those show up I need to

00:23:19,260 --> 00:23:26,880
rebuild the business profile business

00:23:22,529 --> 00:23:29,070
process UI so what it does when it

00:23:26,880 --> 00:23:33,510
notices it and this is sub-second

00:23:29,070 --> 00:23:36,299
changes so when it notices the something

00:23:33,510 --> 00:23:38,100
happening in the service it rebuilds it

00:23:36,299 --> 00:23:40,200
goes out to console gets the information

00:23:38,100 --> 00:23:41,850
I need so in this case is the service

00:23:40,200 --> 00:23:48,200
names and the nodes where it runs and

00:23:41,850 --> 00:23:48,200
then rebuilt this file on disk and then

00:23:48,350 --> 00:23:53,690
because you see it's also Auto loading

00:23:51,299 --> 00:23:56,909
it's basically next time you see a

00:23:53,690 --> 00:24:02,490
reloaded page you have your new nice new

00:23:56,909 --> 00:24:09,750
view with your new nodes in place and

00:24:02,490 --> 00:24:13,320
that was it for today my name email yell

00:24:09,750 --> 00:24:15,980
at me on Twitter do we have any

00:24:13,320 --> 00:24:15,980
questions today

00:24:21,830 --> 00:24:28,080
thanks a lot yeah excellent introduction

00:24:25,350 --> 00:24:35,309
for my question session are there any

00:24:28,080 --> 00:24:37,620
questions come on I already showed off

00:24:35,309 --> 00:24:43,620
by throwing it into the break I want to

00:24:37,620 --> 00:24:45,960
do it again no questions at all I guess

00:24:43,620 --> 00:24:47,880
we are already a little bit behind our

00:24:45,960 --> 00:24:51,240
schedule so I guess we will just no

00:24:47,880 --> 00:24:55,380
close yet you can get in touch with Rahm

00:24:51,240 --> 00:24:55,860
I guess all the day happy 5:00 o'clock

00:24:55,380 --> 00:24:59,700
train

00:24:55,860 --> 00:25:01,360
okay so just get over the food thank you

00:24:59,700 --> 00:25:03,420
again

00:25:01,360 --> 00:25:14,240
[Applause]

00:25:03,420 --> 00:25:14,240
[Music]

00:25:17,820 --> 00:25:20,599

YouTube URL: https://www.youtube.com/watch?v=PQXFZ8_uUqI


