Title: OSMC 2019 | Open Source distributed Tracing Tools by Jonas Verhofsté
Publication date: 2019-11-18
Playlist: OSMC 2019 | Open Source Monitoring Conference
Description: 
	on an Angular/Symfony (JavaScript/PHP) stack by Jonas Verhofsté

Research done at Inuits towards the distributed tracing possibilities for a JavaScript/PHP-stack, more specifically the Angular and Symfony frameworks. Manual implementation were too time consuming, so research towards auto instrumentation through dependency injection on both frameworks was done. Tools researched include Zipkin, OpenTracing (Jaeger), OpenCensus and we also had a quick look at Elastic APM.


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Musik: FRAMETRAXX
Captions: 
	00:00:13,450 --> 00:00:23,060
so welcome my talk would immunise work

00:00:19,880 --> 00:00:26,020
attenuates and during the first half of

00:00:23,060 --> 00:00:28,009
this year I did research towards

00:00:26,020 --> 00:00:32,000
automating automated automated

00:00:28,009 --> 00:00:34,160
instrumentation for JavaScript and PHP

00:00:32,000 --> 00:00:35,000
would specifically angle angular and

00:00:34,160 --> 00:00:39,710
symphony

00:00:35,000 --> 00:00:43,520
we're who here doesn't know tracing all

00:00:39,710 --> 00:00:46,730
right then I can probably skip the first

00:00:43,520 --> 00:00:52,270
parts and there when my screen great

00:00:46,730 --> 00:00:52,270
give me something died

00:00:54,280 --> 00:01:14,260
beautiful beautiful beautiful

00:00:57,800 --> 00:01:14,260
oh don't tell me God why

00:01:16,689 --> 00:01:24,630
then the left straight is again if the

00:01:21,490 --> 00:01:24,630
Beemer picks up

00:01:29,640 --> 00:01:44,890
yeah it should be a second yes there it

00:01:41,590 --> 00:01:47,290
is let's start over so I can probably

00:01:44,890 --> 00:01:49,000
skip the first steps because you guys

00:01:47,290 --> 00:01:52,770
already know it's based on the upper

00:01:49,000 --> 00:01:55,960
from the Google paper it

00:01:52,770 --> 00:02:00,220
do I need to further explain this or not

00:01:55,960 --> 00:02:06,700
who likes we will like a refresher yeah

00:02:00,220 --> 00:02:10,539
all right so tracing was invented for

00:02:06,700 --> 00:02:14,890
distributed systems to be able to

00:02:10,539 --> 00:02:16,660
discern where your requests goes through

00:02:14,890 --> 00:02:21,580
your stack because if you have like

00:02:16,660 --> 00:02:25,300
different services ABCD tracing make

00:02:21,580 --> 00:02:28,900
enables you to see where the request has

00:02:25,300 --> 00:02:31,900
passed and how long to which service it

00:02:28,900 --> 00:02:36,220
went and went back and and so forth

00:02:31,900 --> 00:02:40,060
this is then translated into spans so

00:02:36,220 --> 00:02:45,130
the whole of this those blocks is the

00:02:40,060 --> 00:02:51,640
trace but disbands specific are the the

00:02:45,130 --> 00:02:55,239
time the request was at a certain part

00:02:51,640 --> 00:02:59,470
in your system and yeah it propagates

00:02:55,239 --> 00:03:01,570
through your stack so common components

00:02:59,470 --> 00:03:04,989
of a distributed tracing system so the

00:03:01,570 --> 00:03:07,150
back ends is you have an instrument

00:03:04,989 --> 00:03:09,250
application it can do requests to an on

00:03:07,150 --> 00:03:11,230
instrument application or to another

00:03:09,250 --> 00:03:14,620
instrument instrument application it

00:03:11,230 --> 00:03:18,720
will send headers with your requests so

00:03:14,620 --> 00:03:21,100
there's correlation between the spans

00:03:18,720 --> 00:03:26,850
these spans then gets sent to a

00:03:21,100 --> 00:03:26,850
collector and that collector will will

00:03:27,930 --> 00:03:33,489
make the different spans will correlate

00:03:31,359 --> 00:03:37,930
correlate them and then store them in a

00:03:33,489 --> 00:03:41,590
storage part you can then visualize your

00:03:37,930 --> 00:03:44,830
data with a UI that will query do

00:03:41,590 --> 00:03:47,950
database your storage back-end of course

00:03:44,830 --> 00:03:51,670
it doesn't a request remand application

00:03:47,950 --> 00:03:53,319
doesn't mean it can't talk to an honest

00:03:51,670 --> 00:03:55,330
rent instrument application that still

00:03:53,319 --> 00:03:58,450
works you just won't have data of that

00:03:55,330 --> 00:04:02,310
non-instrumental application we add any

00:03:58,450 --> 00:04:04,690
weights were mostly interested in the

00:04:02,310 --> 00:04:07,360
evilness of pinpointing performance

00:04:04,690 --> 00:04:12,360
issues and debugging hard-to-find

00:04:07,360 --> 00:04:15,940
problems that own that don't often occur

00:04:12,360 --> 00:04:19,919
for example at the end of this stage we

00:04:15,940 --> 00:04:23,530
noticed a login' button making thousands

00:04:19,919 --> 00:04:29,650
thousand database queries - per login

00:04:23,530 --> 00:04:33,190
which was very much yeah the reason we

00:04:29,650 --> 00:04:35,229
we didn't want to manually implement our

00:04:33,190 --> 00:04:37,210
spans so normally you have your code and

00:04:35,229 --> 00:04:39,520
you say this is one span this is a

00:04:37,210 --> 00:04:43,419
second this is a child of the former and

00:04:39,520 --> 00:04:45,460
so forth our projects are quite big and

00:04:43,419 --> 00:04:47,890
we don't have time to do that manually

00:04:45,460 --> 00:04:50,410
so we looked at dependency injection for

00:04:47,890 --> 00:04:53,260
symphony and angular that means in less

00:04:50,410 --> 00:04:55,210
manual labor but we did one and two n

00:04:53,260 --> 00:04:56,590
tracing so the trace starts in the front

00:04:55,210 --> 00:04:59,410
end goes to the back end awesome stuff

00:04:56,590 --> 00:05:03,990
and goes back so we wanted correlation

00:04:59,410 --> 00:05:08,140
between the two so I did some research

00:05:03,990 --> 00:05:11,800
stumbled down upon the most frequented

00:05:08,140 --> 00:05:15,520
tools like Zipkin which was started in

00:05:11,800 --> 00:05:19,300
to open-source in 2012 uses its own

00:05:15,520 --> 00:05:21,910
formats which is relevant next because

00:05:19,300 --> 00:05:24,970
then you have open tracing and most node

00:05:21,910 --> 00:05:29,680
notable and open tracing is Jaeger buy

00:05:24,970 --> 00:05:33,070
you were Zipkin in the beginning was

00:05:29,680 --> 00:05:34,810
part of open tracing but bailed out they

00:05:33,070 --> 00:05:38,110
didn't agree with some of the choices

00:05:34,810 --> 00:05:40,479
open tracing was MIT I was making so

00:05:38,110 --> 00:05:45,580
they they just went on with our own

00:05:40,479 --> 00:05:50,070
stuff and then there's also open census

00:05:45,580 --> 00:05:50,070
which is Google's answer to open tracing

00:05:50,220 --> 00:05:55,210
the difference between what the former -

00:05:53,140 --> 00:05:57,580
is that open census doesn't have it so

00:05:55,210 --> 00:06:00,100
collector or its own back-end so it just

00:05:57,580 --> 00:06:02,590
it is an instrumentation library and it

00:06:00,100 --> 00:06:08,650
then expects you to choose Zipkin Jaeger

00:06:02,590 --> 00:06:11,710
or any other supported backends - yeah

00:06:08,650 --> 00:06:14,319
visualize your data there's also a

00:06:11,710 --> 00:06:16,660
lastic APM it's part of the elastic

00:06:14,319 --> 00:06:19,990
stack has an open tracing hoping tracing

00:06:16,660 --> 00:06:23,979
bridge but elastic to get the full

00:06:19,990 --> 00:06:26,289
elastic experience you need your you

00:06:23,979 --> 00:06:29,349
need to use the elastic tooling and not

00:06:26,289 --> 00:06:32,919
the open tracing one because they don't

00:06:29,349 --> 00:06:35,759
have all the open tracing rich doesn't

00:06:32,919 --> 00:06:40,419
have all the features the elastic APM

00:06:35,759 --> 00:06:42,460
implementations have so then we looked

00:06:40,419 --> 00:06:45,639
at the implementational possibilities

00:06:42,460 --> 00:06:49,780
for a dependency injection for PHP and

00:06:45,639 --> 00:06:51,909
symphony that was open side Zipkin Jager

00:06:49,780 --> 00:06:56,500
and or open tracing for that matter

00:06:51,909 --> 00:06:58,270
didn't have any real PHP support let

00:06:56,500 --> 00:07:01,419
alone automate an instrumentation for

00:06:58,270 --> 00:07:04,960
symphony open census actually has it all

00:07:01,419 --> 00:07:06,970
in one it has PHP as a library and then

00:07:04,960 --> 00:07:09,389
as a symphony and latter oval as

00:07:06,970 --> 00:07:14,139
frameworks integrate an integration

00:07:09,389 --> 00:07:16,990
Zipkin is the library itself but there

00:07:14,139 --> 00:07:19,750
is a community project which enables you

00:07:16,990 --> 00:07:22,090
to do automated instrumentation but the

00:07:19,750 --> 00:07:24,639
community project is written by the core

00:07:22,090 --> 00:07:27,219
maintainer of the PHP implementation of

00:07:24,639 --> 00:07:28,659
Zipkin so it's a community project in

00:07:27,219 --> 00:07:31,659
the sense that it's not under the second

00:07:28,659 --> 00:07:35,159
namespace but it is written by the same

00:07:31,659 --> 00:07:37,330
guy so there's there's heavy supports

00:07:35,159 --> 00:07:38,580
javascript is a completely different

00:07:37,330 --> 00:07:42,370
story

00:07:38,580 --> 00:07:45,389
there's many implementations for no GS

00:07:42,370 --> 00:07:48,250
but only a few for browser-based racing

00:07:45,389 --> 00:07:50,320
and Zipkin is the actual one with a

00:07:48,250 --> 00:07:53,699
working library all the other ones are

00:07:50,320 --> 00:07:56,460
so a working library that I mean you can

00:07:53,699 --> 00:08:00,699
make your spans yourself in your code

00:07:56,460 --> 00:08:05,039
all the others like elastic APM and I

00:08:00,699 --> 00:08:08,020
saw recently open census too they have

00:08:05,039 --> 00:08:08,409
JavaScript files which you just include

00:08:08,020 --> 00:08:11,619
at

00:08:08,409 --> 00:08:15,219
end of your HTML file and then it'll do

00:08:11,619 --> 00:08:18,099
some magic to chant to create some some

00:08:15,219 --> 00:08:18,580
data but you don't really have any say

00:08:18,099 --> 00:08:23,199
in the matter

00:08:18,580 --> 00:08:26,649
what data it will create so for angular

00:08:23,199 --> 00:08:30,189
I looked at angular tracing from Evie

00:08:26,649 --> 00:08:33,339
Houser he aims to be vendor-neutral but

00:08:30,189 --> 00:08:38,889
because of the state of the packages

00:08:33,339 --> 00:08:42,339
currently only zip Cana supports so yeah

00:08:38,889 --> 00:08:43,990
he has a core in his library buddy

00:08:42,339 --> 00:08:46,899
he can do anything with it except

00:08:43,990 --> 00:08:52,149
implements it again and then at the end

00:08:46,899 --> 00:08:54,629
of my of my course was around May my

00:08:52,149 --> 00:08:57,279
whole research actually became obsolete

00:08:54,629 --> 00:09:00,310
because open census and open tracing

00:08:57,279 --> 00:09:03,879
went together in open telemetry they do

00:09:00,310 --> 00:09:08,980
provide backward supports for two years

00:09:03,879 --> 00:09:12,850
if I recall correctly but yeah they

00:09:08,980 --> 00:09:13,990
stopped doing a heavy lifting on open

00:09:12,850 --> 00:09:17,439
source and open tracing and are now

00:09:13,990 --> 00:09:20,350
doing mm much work towards open

00:09:17,439 --> 00:09:21,880
telemetry I didn't have the time to

00:09:20,350 --> 00:09:23,880
research over the lemon tree yet it's

00:09:21,880 --> 00:09:26,319
also still in alpha stage the

00:09:23,880 --> 00:09:29,800
specification was announced in September

00:09:26,319 --> 00:09:35,079
I guess if I recall correctly so yeah

00:09:29,800 --> 00:09:36,880
it's it's not my research is kind of

00:09:35,079 --> 00:09:38,519
outdated because it's the first half of

00:09:36,880 --> 00:09:41,110
this year

00:09:38,519 --> 00:09:45,819
but there's more to come when open

00:09:41,110 --> 00:09:48,910
telemetry matures and of course I needed

00:09:45,819 --> 00:09:52,449
to test my stuff so I made some demo

00:09:48,910 --> 00:09:54,180
stores those are on github you can look

00:09:52,449 --> 00:09:57,550
at you can look down look look them up

00:09:54,180 --> 00:10:02,500
do try them yourselves

00:09:57,550 --> 00:10:04,600
I specifically went for Zipkin as a

00:10:02,500 --> 00:10:07,480
back-end cause that was the one that was

00:10:04,600 --> 00:10:14,439
supported by all but you can use Jager

00:10:07,480 --> 00:10:16,689
or any other Zipkin supporting back-end

00:10:14,439 --> 00:10:20,160
or you can change it demos if you like

00:10:16,689 --> 00:10:31,329
there's some documentation

00:10:20,160 --> 00:10:34,870
included yeah so maybe I can yeah

00:10:31,329 --> 00:10:38,170
there's a difference in resolution the

00:10:34,870 --> 00:10:41,410
so I have three demos the first one is

00:10:38,170 --> 00:10:43,779
angular implemented of instrument with

00:10:41,410 --> 00:10:46,360
Zipkin with the angular tracing project

00:10:43,779 --> 00:10:49,029
then we have a symphony the same

00:10:46,360 --> 00:10:55,240
official symphony dam demo instrumented

00:10:49,029 --> 00:10:57,040
with open census and there's a small or

00:10:55,240 --> 00:10:58,959
an interesting thing about the open

00:10:57,040 --> 00:11:03,040
census instrumentation because it also

00:10:58,959 --> 00:11:07,449
includes a PHP extension which enables

00:11:03,040 --> 00:11:09,310
you to go to get more finer details more

00:11:07,449 --> 00:11:11,440
about that in a second

00:11:09,310 --> 00:11:14,290
and then yeah we I also have the same

00:11:11,440 --> 00:11:18,610
demo Symphony demo but with its rounded

00:11:14,290 --> 00:11:24,040
with Zipkin let's first start discipline

00:11:18,610 --> 00:11:28,740
back-end that's running let's start with

00:11:24,040 --> 00:11:35,470
the angular 1 you don't start

00:11:28,740 --> 00:11:38,380
let's give it a moment to compile so the

00:11:35,470 --> 00:11:41,350
main reason we wanted to implement

00:11:38,380 --> 00:11:44,889
tracing was because we noticed when

00:11:41,350 --> 00:11:49,540
heavy usage we noticed some some

00:11:44,889 --> 00:11:53,170
tardiness which eventually was the the

00:11:49,540 --> 00:11:56,620
login button so we have the now we

00:11:53,170 --> 00:12:03,730
there's nothing yet here now if I click

00:11:56,620 --> 00:12:07,750
around and make some changes safe you

00:12:03,730 --> 00:12:09,459
can actually see the angular demo you

00:12:07,750 --> 00:12:12,579
set find traces and then you see a

00:12:09,459 --> 00:12:14,019
beautiful overview of your trace this is

00:12:12,579 --> 00:12:15,430
my first click there were some seconds

00:12:14,019 --> 00:12:19,660
between there then I did another click

00:12:15,430 --> 00:12:22,959
the put is the change of the name you

00:12:19,660 --> 00:12:25,740
see you got some data around it and

00:12:22,959 --> 00:12:27,790
that's all automated tune that's me

00:12:25,740 --> 00:12:30,100
small too

00:12:27,790 --> 00:12:32,670
this is yeah the only thing I did was

00:12:30,100 --> 00:12:38,710
include the library and

00:12:32,670 --> 00:12:41,650
add some code the code itself is added

00:12:38,710 --> 00:12:43,150
in a different commit so it's two

00:12:41,650 --> 00:12:46,090
commits yam yam T demo and the

00:12:43,150 --> 00:12:49,210
implementation there was a yarn add or

00:12:46,090 --> 00:12:55,510
yarn something something and then some

00:12:49,210 --> 00:12:56,950
code so yeah you see the empty tomb at

00:12:55,510 --> 00:13:02,530
the empty module because that's actually

00:12:56,950 --> 00:13:08,130
an interesting one because the tracing

00:13:02,530 --> 00:13:10,990
the Zipkin tracing is meant for no GS

00:13:08,130 --> 00:13:14,230
but you can compile it for browser-based

00:13:10,990 --> 00:13:17,470
tracing but then you need a certain path

00:13:14,230 --> 00:13:19,240
path that needs to get an empty mod

00:13:17,470 --> 00:13:21,040
empty module because it doesn't get used

00:13:19,240 --> 00:13:24,010
but it needs to come it needs to have

00:13:21,040 --> 00:13:30,220
something to be able to compile the

00:13:24,010 --> 00:13:34,960
actual code is just this it sits in your

00:13:30,220 --> 00:13:37,000
car in your app app dot es you give it a

00:13:34,960 --> 00:13:38,410
name you give it some you give it a base

00:13:37,000 --> 00:13:42,040
URL where it goes do you give it a

00:13:38,410 --> 00:13:45,670
sampler sampling is I forgot to mention

00:13:42,040 --> 00:13:48,250
is when your system is generating so

00:13:45,670 --> 00:13:50,860
much traces and that it's actually

00:13:48,250 --> 00:13:53,800
slowing down your application and so you

00:13:50,860 --> 00:13:57,550
can then sample only a small part of

00:13:53,800 --> 00:13:59,470
those traces so you can throw away all

00:13:57,550 --> 00:14:05,110
the others and don't slow down your

00:13:59,470 --> 00:14:08,190
system yeah it's it's all on get up you

00:14:05,110 --> 00:14:12,910
can you can look it up the rest this

00:14:08,190 --> 00:14:14,440
code now if we go looking at this thing

00:14:12,910 --> 00:14:18,720
I will start with the second one because

00:14:14,440 --> 00:14:18,720
that's the least impressive one

00:14:25,450 --> 00:14:30,970
so I click click around it's it's just

00:14:28,120 --> 00:14:36,100
as the basic Symphony demo but then

00:14:30,970 --> 00:14:39,190
again now we build the terribly - and

00:14:36,100 --> 00:14:43,510
you see that that generates a bit more

00:14:39,190 --> 00:14:44,950
data and now here you see more correlate

00:14:43,510 --> 00:14:48,970
correlation because you have your roots

00:14:44,950 --> 00:14:53,800
pan that was pressing me pressing the

00:14:48,970 --> 00:14:55,990
lorem ipsum blog posts but then you have

00:14:53,800 --> 00:14:59,310
it uses SQL I didn't and in the backend

00:14:55,990 --> 00:15:02,920
so you don't see the actual query it did

00:14:59,310 --> 00:15:05,740
and how long that that query took and

00:15:02,920 --> 00:15:07,980
and so forth and so forth until I got

00:15:05,740 --> 00:15:15,420
the page back that's the end of this man

00:15:07,980 --> 00:15:24,400
and then you have the same demo but with

00:15:15,420 --> 00:15:26,530
open census and I'll have a so I

00:15:24,400 --> 00:15:32,740
commented out this part this part

00:15:26,530 --> 00:15:36,520
enables the PHP extension so without the

00:15:32,740 --> 00:15:44,560
PHP extension it just it generates about

00:15:36,520 --> 00:15:49,000
the same level of code the I hope I give

00:15:44,560 --> 00:15:50,680
it a different name I did it generates

00:15:49,000 --> 00:15:53,470
about the same amount of data it

00:15:50,680 --> 00:15:56,410
actually it's less which is interesting

00:15:53,470 --> 00:16:02,680
it shouldn't click around some more

00:15:56,410 --> 00:16:04,420
generate some more data so it generates

00:16:02,680 --> 00:16:08,460
not that much data but when you enable

00:16:04,420 --> 00:16:08,460
the module

00:16:17,209 --> 00:16:33,499
there we go you actually get it get a

00:16:27,149 --> 00:16:37,499
lot more data even it even traces the

00:16:33,499 --> 00:16:39,809
symphony kernel itself I hope it shows

00:16:37,499 --> 00:16:43,499
more yeah there we go so unless you can

00:16:39,809 --> 00:16:48,629
see that it's a lot more actually show

00:16:43,499 --> 00:16:51,959
it also has doctrine additions and so

00:16:48,629 --> 00:16:54,449
forth yeah this open census library

00:16:51,959 --> 00:16:56,759
although it is officially an alpha

00:16:54,449 --> 00:17:00,990
actually does the gives the most

00:16:56,759 --> 00:17:03,860
interesting data and then you have the

00:17:00,990 --> 00:17:07,110
kernel itself it's the stuff itself it

00:17:03,860 --> 00:17:08,760
enables you the the symphony kernel

00:17:07,110 --> 00:17:10,289
tracing isn't maybe isn't that

00:17:08,760 --> 00:17:13,760
interesting but it also enables you to

00:17:10,289 --> 00:17:16,439
it enables symphony that's maybe to

00:17:13,760 --> 00:17:18,899
debug the kernel itself because when

00:17:16,439 --> 00:17:20,760
when a debug statement takes one

00:17:18,899 --> 00:17:24,319
millisecond instead of 17 microseconds

00:17:20,760 --> 00:17:24,319
that's that's a huge difference

00:17:24,620 --> 00:17:30,419
but yeah the data is a lot but that's

00:17:27,809 --> 00:17:36,899
that's a just a PHP extension and when

00:17:30,419 --> 00:17:39,860
you look at it code so it again it's

00:17:36,899 --> 00:17:48,899
just a composer require with some

00:17:39,860 --> 00:17:53,580
dependencies and then you just include

00:17:48,899 --> 00:17:55,740
the bundle and you create a file open

00:17:53,580 --> 00:17:58,860
senses bundle of P dot PHP you include

00:17:55,740 --> 00:18:02,309
it and that's about that's the only bit

00:17:58,860 --> 00:18:04,169
of code you need whereas if you wanted

00:18:02,309 --> 00:18:06,029
to manually implement all of this you

00:18:04,169 --> 00:18:09,179
would have to start start root

00:18:06,029 --> 00:18:11,850
start trace span span span it would

00:18:09,179 --> 00:18:15,029
require a knowledge of the of the code

00:18:11,850 --> 00:18:17,100
base and an understanding of the of the

00:18:15,029 --> 00:18:20,640
application and whereas with this you

00:18:17,100 --> 00:18:22,679
just I don't know how the symphony demo

00:18:20,640 --> 00:18:25,850
works but I just included is and I get

00:18:22,679 --> 00:18:25,850
useful useful later

00:18:25,910 --> 00:18:33,660
so yeah that's about it

00:18:28,770 --> 00:18:40,920
guess I'm a bit ahead of schedule thank

00:18:33,660 --> 00:18:43,460
you for listening are there questions

00:18:40,920 --> 00:18:43,460
actually

00:18:55,330 --> 00:19:05,800
you have made nest testers yes you have

00:18:59,860 --> 00:19:09,820
made out instrumentation with PHP did UF

00:19:05,800 --> 00:19:11,770
test was other languages yeah I didn't

00:19:09,820 --> 00:19:13,540
test other languages because we only

00:19:11,770 --> 00:19:20,080
have the symphony framework or what but

00:19:13,540 --> 00:19:22,060
for example the zip in has broad let me

00:19:20,080 --> 00:19:24,850
have a look has a broad sub because it

00:19:22,060 --> 00:19:27,880
exists so I turn off Wi-Fi to not be

00:19:24,850 --> 00:19:34,180
bothered by friends let's take the

00:19:27,880 --> 00:19:37,360
gamble should work

00:19:34,180 --> 00:19:41,590
gossip Caen has existed the longest they

00:19:37,360 --> 00:19:43,690
also have a shiny new logo because they

00:19:41,590 --> 00:19:46,480
have there they exist the longest they

00:19:43,690 --> 00:19:50,230
actually have the most community

00:19:46,480 --> 00:19:51,940
projects and there's I told there was

00:19:50,230 --> 00:19:56,740
Lara Lara ho-oh

00:19:51,940 --> 00:19:58,870
apparently there isn't the guy who

00:19:56,740 --> 00:20:00,930
created he should have a lot of all I

00:19:58,870 --> 00:20:00,930
remember

00:20:02,820 --> 00:20:11,980
so SQL he's the guy who made the open 3d

00:20:09,580 --> 00:20:14,740
audio interface in PHP discipline PHP

00:20:11,980 --> 00:20:17,410
library and he has some stuff under his

00:20:14,740 --> 00:20:21,810
personal namespace I guess because he

00:20:17,410 --> 00:20:23,880
doesn't want I'm not sure why I

00:20:21,810 --> 00:20:26,260
specifically didn't look at other

00:20:23,880 --> 00:20:27,550
frameworks because they didn't interest

00:20:26,260 --> 00:20:32,860
us

00:20:27,550 --> 00:20:34,450
but in my experience Zipkin if you want

00:20:32,860 --> 00:20:36,940
to look at tracing and you have a

00:20:34,450 --> 00:20:40,710
special framework Zipkin will probably

00:20:36,940 --> 00:20:40,710
have a community project for it

00:20:40,910 --> 00:20:53,450
[Music]

00:20:46,790 --> 00:20:55,430
oh it's it's it's mostly are on

00:20:53,450 --> 00:20:58,580
all-or-nothing because you have the EDL

00:20:55,430 --> 00:21:00,950
diets it's Korea it uses dependency

00:20:58,580 --> 00:21:02,900
injection I guess you could limit it to

00:21:00,950 --> 00:21:04,820
certain files

00:21:02,900 --> 00:21:08,690
I didn't that's that because we we

00:21:04,820 --> 00:21:10,430
wanted all of it and if you yeah it's

00:21:08,690 --> 00:21:12,740
it's it's because it's automated you

00:21:10,430 --> 00:21:14,540
don't have that much control over it but

00:21:12,740 --> 00:21:17,960
then again you don't need to put much

00:21:14,540 --> 00:21:19,340
effort in it disgusts it costs me 50

00:21:17,960 --> 00:21:24,550
minutes of work and that's mostly

00:21:19,340 --> 00:21:24,550
waiting for a composer to finish so yeah

00:21:25,120 --> 00:21:53,210
other questions yeah I'll repeat the

00:21:38,330 --> 00:21:56,000
question so the question for the people

00:21:53,210 --> 00:21:58,550
at home I guess the question was does

00:21:56,000 --> 00:22:01,190
the open census library also expose

00:21:58,550 --> 00:22:04,730
metrics if I recall correctly it

00:22:01,190 --> 00:22:08,620
actually does but it heavily depends on

00:22:04,730 --> 00:22:11,840
the on which and the wife I died again

00:22:08,620 --> 00:22:16,360
on which implementation you're looking

00:22:11,840 --> 00:22:21,680
at because PHP and is a very under

00:22:16,360 --> 00:22:24,230
implemented language so Java and go lang

00:22:21,680 --> 00:22:27,680
peyten or the most support it's

00:22:24,230 --> 00:22:36,490
languages but the open census library

00:22:27,680 --> 00:22:43,000
actually has I thought support for

00:22:36,490 --> 00:22:43,000
metrics out of the box but I'm not sure

00:22:43,540 --> 00:22:54,800
her somewhere I guess it doesn't then no

00:22:51,020 --> 00:22:57,740
I think the now it comes back the back

00:22:54,800 --> 00:22:58,980
ends like Zipkin or Jaeger has metrics

00:22:57,740 --> 00:23:00,779
but the

00:22:58,980 --> 00:23:03,749
language did the instrumentation

00:23:00,779 --> 00:23:22,230
language itself it that doesn't but I

00:23:03,749 --> 00:23:24,570
could be wrong yes so the question was

00:23:22,230 --> 00:23:29,249
how was my experience with the tool and

00:23:24,570 --> 00:23:31,590
how did I go around it I guess the first

00:23:29,249 --> 00:23:35,480
hurdle actually was getting the most of

00:23:31,590 --> 00:23:37,649
the tools to work yeah cuz it's it's

00:23:35,480 --> 00:23:41,059
most of the tools actually have

00:23:37,649 --> 00:23:43,590
officially an alpha state or pre alpha

00:23:41,059 --> 00:23:49,200
so getting them to work

00:23:43,590 --> 00:23:51,809
I also this is small bit of well the for

00:23:49,200 --> 00:23:55,859
example the open the open census

00:23:51,809 --> 00:23:57,929
extension had because they changed their

00:23:55,859 --> 00:24:01,049
documentation had apical installation

00:23:57,929 --> 00:24:04,379
but I wasn't working but I needed to

00:24:01,049 --> 00:24:06,269
debug that and then eventually I built

00:24:04,379 --> 00:24:12,179
it from source and then it then it gave

00:24:06,269 --> 00:24:14,340
me so much more information and most of

00:24:12,179 --> 00:24:17,210
my my attempts were just clicking around

00:24:14,340 --> 00:24:21,509
in our application and trying to get

00:24:17,210 --> 00:24:24,830
data out of it and when it did the data

00:24:21,509 --> 00:24:28,159
was huge the thousand database queries

00:24:24,830 --> 00:24:30,899
but most of it was was looking through

00:24:28,159 --> 00:24:33,659
obsolete or all documentation trying to

00:24:30,899 --> 00:24:36,359
get it to work because the the open

00:24:33,659 --> 00:24:39,059
census documentation like for example is

00:24:36,359 --> 00:24:46,320
on a part of their old website let me

00:24:39,059 --> 00:24:48,960
see if I can find it back there it is so

00:24:46,320 --> 00:24:51,450
that looks slightly different from their

00:24:48,960 --> 00:24:54,710
official website it was things like DS

00:24:51,450 --> 00:24:58,109
that that took me some time to find

00:24:54,710 --> 00:25:00,659
because there are they're hidden and PHP

00:24:58,109 --> 00:25:04,070
is an underappreciated language language

00:25:00,659 --> 00:25:04,070
on the tracing part

00:25:19,810 --> 00:25:24,440
how do you interpret the data ad that's

00:25:22,820 --> 00:25:28,310
that's what you mean

00:25:24,440 --> 00:25:30,620
yeah it's just correlation so this is my

00:25:28,310 --> 00:25:32,930
actual click on the data for me it's

00:25:30,620 --> 00:25:36,110
it's if you don't understand the

00:25:32,930 --> 00:25:39,050
concepts I would advise you to look up

00:25:36,110 --> 00:25:41,630
the the paper tapper it's it's public

00:25:39,050 --> 00:25:46,250
and it explains a lot of the base

00:25:41,630 --> 00:25:49,550
concepts for me III newer our

00:25:46,250 --> 00:25:52,370
application kinda and when I when I

00:25:49,550 --> 00:25:54,770
clicked around I understood what

00:25:52,370 --> 00:25:56,450
happened so you just you need to kind of

00:25:54,770 --> 00:26:00,230
understand your your application in this

00:25:56,450 --> 00:26:02,120
case the only visual thing I did was the

00:26:00,230 --> 00:26:07,790
click that's the root span that's the

00:26:02,120 --> 00:26:11,240
the whole request that took yeah 203

00:26:07,790 --> 00:26:13,660
milliseconds all the rest is this is the

00:26:11,240 --> 00:26:17,950
kernel handling stuff it's the command

00:26:13,660 --> 00:26:21,580
underlying and you just need to kind of

00:26:17,950 --> 00:26:25,100
merge sure the the visualization with

00:26:21,580 --> 00:26:30,310
your knowledge of your application like

00:26:25,100 --> 00:26:33,020
for example with the the angular demo

00:26:30,310 --> 00:26:36,770
yeah there's not much there you just see

00:26:33,020 --> 00:26:39,800
my get requests my first off slash

00:26:36,770 --> 00:26:42,170
heroes took 504 milliseconds to load

00:26:39,800 --> 00:26:45,020
because that that's all browser-based

00:26:42,170 --> 00:26:47,810
the PHP is all back and based we

00:26:45,020 --> 00:26:52,040
eventually got correlation between the

00:26:47,810 --> 00:26:54,410
two so the angular front-end sense sense

00:26:52,040 --> 00:26:58,910
a unique ID with your request and then

00:26:54,410 --> 00:27:01,780
the collector can DD sorry the backends

00:26:58,910 --> 00:27:04,550
the symphony back and then gets that

00:27:01,780 --> 00:27:06,710
string it says this is my parent and

00:27:04,550 --> 00:27:08,300
then says 2d backends this is my parents

00:27:06,710 --> 00:27:10,460
this is my ID and then the collector

00:27:08,300 --> 00:27:14,960
will put them together that's what

00:27:10,460 --> 00:27:16,430
happens here to with the symphony with

00:27:14,960 --> 00:27:19,420
the open tracing demo

00:27:16,430 --> 00:27:19,420
oh that's one spoon

00:27:19,640 --> 00:27:25,079
[Music]

00:27:21,229 --> 00:27:26,820
every child has a parent and that's it

00:27:25,079 --> 00:27:28,769
just sends that to the collector and the

00:27:26,820 --> 00:27:39,059
collector will merge those before

00:27:28,769 --> 00:27:40,769
dumping it them to the database yeah

00:27:39,059 --> 00:27:43,499
it's just just clicking around and then

00:27:40,769 --> 00:27:45,899
I then I knew I most of the time I just

00:27:43,499 --> 00:27:52,909
left for example this page open and I

00:27:45,899 --> 00:27:52,909
just did f5 I great I closed the backend

00:27:52,940 --> 00:27:59,339
so I just pressed a five to have the

00:27:56,759 --> 00:28:03,029
same span all over again and if you now

00:27:59,339 --> 00:28:05,159
look at you see you'll see it should but

00:28:03,029 --> 00:28:09,989
it does and then you see a less than a

00:28:05,159 --> 00:28:13,079
minute ago I I sorted on newest first

00:28:09,989 --> 00:28:14,369
and then then you automatically new this

00:28:13,079 --> 00:28:16,499
is this is the thing I the thing I

00:28:14,369 --> 00:28:18,269
pressed and then you had to call a

00:28:16,499 --> 00:28:21,269
correlation between what you did and

00:28:18,269 --> 00:28:25,619
what you'll do most of the time you give

00:28:21,269 --> 00:28:29,639
your spans meaningful names because you

00:28:25,619 --> 00:28:32,249
can I did this because that's just PHP

00:28:29,639 --> 00:28:34,349
configuration and then when you go

00:28:32,249 --> 00:28:38,999
looking without because this is usually

00:28:34,349 --> 00:28:43,259
user generated data you ingest it

00:28:38,999 --> 00:28:46,229
and when you go looking at it you give

00:28:43,259 --> 00:28:47,609
it a meaningful name this is kind of

00:28:46,229 --> 00:28:49,379
meaningful you know they surfed through

00:28:47,609 --> 00:28:57,749
this page and then you know this happens

00:28:49,379 --> 00:29:00,399
a lot questions tonight

00:28:57,749 --> 00:29:05,259
thank you oh yeah

00:29:00,399 --> 00:29:06,619
yeah yeah yeah yeah PHP and

00:29:05,259 --> 00:29:10,999
browser-based

00:29:06,619 --> 00:29:13,749
JavaScript no because all you could do

00:29:10,999 --> 00:29:16,519
it in production but the the actual

00:29:13,749 --> 00:29:19,389
implementers say don't do this we're not

00:29:16,519 --> 00:29:25,100
yet ready for this we don't advise it

00:29:19,389 --> 00:29:28,970
like if you go looking at where or the

00:29:25,100 --> 00:29:32,570
language were there is or there wasn't

00:29:28,970 --> 00:29:35,539
any feature matrix sorry most like Java

00:29:32,570 --> 00:29:38,600
go it's meant to used in production PHP

00:29:35,539 --> 00:29:42,259
not so much most of them are just an

00:29:38,600 --> 00:29:44,960
alpha or not even developed anymore

00:29:42,259 --> 00:29:46,580
especially with open telemetry around

00:29:44,960 --> 00:29:50,029
the corner

00:29:46,580 --> 00:29:53,470
I hope PHP gets a bit more attention for

00:29:50,029 --> 00:29:57,860
open slam with open telemetry I know

00:29:53,470 --> 00:30:01,129
that Java scripts that they not only

00:29:57,860 --> 00:30:03,529
will support no GS but they specifically

00:30:01,129 --> 00:30:07,850
will support both browsers browser-based

00:30:03,529 --> 00:30:11,149
and no GS and yeah I hope it'll them

00:30:07,850 --> 00:30:15,590
proof because now two forces have joined

00:30:11,149 --> 00:30:19,879
powers but we'll see with the DD

00:30:15,590 --> 00:30:21,980
backends themself Zipkin Jaeger ok p.m.

00:30:19,879 --> 00:30:33,759
those are all months to be used in

00:30:21,980 --> 00:30:33,759
production thank you

00:30:34,970 --> 00:30:45,780
[Music]

00:30:49,370 --> 00:30:52,120

YouTube URL: https://www.youtube.com/watch?v=zwFUctQafPI


