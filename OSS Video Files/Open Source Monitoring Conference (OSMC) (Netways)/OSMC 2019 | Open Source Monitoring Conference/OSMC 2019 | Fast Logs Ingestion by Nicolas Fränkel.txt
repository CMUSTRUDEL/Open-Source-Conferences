Title: OSMC 2019 | Fast Logs Ingestion by Nicolas FrÃ¤nkel
Publication date: 2019-11-18
Playlist: OSMC 2019 | Open Source Monitoring Conference
Description: 
	NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Musik: FRAMETRAXX
Captions: 
	00:00:13,360 --> 00:00:21,290
thanks to beer for this talk about like

00:00:16,490 --> 00:00:23,870
first logs I might talk very fast that's

00:00:21,290 --> 00:00:25,400
because I'm very stressed I just arrived

00:00:23,870 --> 00:00:26,270
no they missed my connecting flight in

00:00:25,400 --> 00:00:28,970
Frankfurt

00:00:26,270 --> 00:00:30,230
anybody knows people like people in the

00:00:28,970 --> 00:00:33,020
airport in Frankfurt

00:00:30,230 --> 00:00:35,750
it's every time I go through front foot

00:00:33,020 --> 00:00:38,150
it's a mess so if you know anybody

00:00:35,750 --> 00:00:40,880
please just tell them it's the the

00:00:38,150 --> 00:00:42,980
shooting truth anyway so I'm Nicola

00:00:40,880 --> 00:00:45,290
Frankel yes I have a German last name

00:00:42,980 --> 00:00:47,540
but I'm French so you might also notice

00:00:45,290 --> 00:00:50,540
a slight accent especially when I'm

00:00:47,540 --> 00:00:53,809
getting a bit tired for a long time

00:00:50,540 --> 00:00:55,970
during my career I was like a consultant

00:00:53,809 --> 00:00:56,829
like doing development architecture or

00:00:55,970 --> 00:01:00,020
what have you

00:00:56,829 --> 00:01:04,399
and last year I switched my career and

00:01:00,020 --> 00:01:06,650
to do developer advocacy and what is

00:01:04,399 --> 00:01:08,780
developer advocacy well before I was

00:01:06,650 --> 00:01:10,640
joking telling people a and paid to go

00:01:08,780 --> 00:01:12,140
to conference and drink beers but I

00:01:10,640 --> 00:01:13,520
stopped because I thought that people

00:01:12,140 --> 00:01:15,890
were taking me seriously

00:01:13,520 --> 00:01:18,229
so developer advocacy is more like

00:01:15,890 --> 00:01:21,380
trying to build a community and to let

00:01:18,229 --> 00:01:23,570
people know about it and currently I'm

00:01:21,380 --> 00:01:26,180
working for a company called hassle cost

00:01:23,570 --> 00:01:28,820
who knows about hassle cost a couple of

00:01:26,180 --> 00:01:31,220
hands good so if you have any questions

00:01:28,820 --> 00:01:33,080
problem issues improvements idea or

00:01:31,220 --> 00:01:36,260
whatever just come to me afterwards we

00:01:33,080 --> 00:01:38,150
have we have two products one is MIG so

00:01:36,260 --> 00:01:40,630
the in-memory data grater the product

00:01:38,150 --> 00:01:43,549
that in general people people know about

00:01:40,630 --> 00:01:46,490
so for caching and a lot of different in

00:01:43,549 --> 00:01:48,860
history in use case and recently we

00:01:46,490 --> 00:01:50,900
delivered a new product called jet that

00:01:48,860 --> 00:01:55,040
builds upon AMD G and basically it's all

00:01:50,900 --> 00:01:59,860
about stream processes okay now the

00:01:55,040 --> 00:02:02,810
questions how many of you are developers

00:01:59,860 --> 00:02:05,990
couple of hands how many of you can

00:02:02,810 --> 00:02:09,860
understand this line of code okay that's

00:02:05,990 --> 00:02:12,530
much better but not everybody okay so

00:02:09,860 --> 00:02:14,959
basically this is Java code so sorry

00:02:12,530 --> 00:02:15,500
I've been a Java developer so basically

00:02:14,959 --> 00:02:17,690
this is

00:02:15,500 --> 00:02:20,060
logger this is an object and there is

00:02:17,690 --> 00:02:23,570
this method called debug and then there

00:02:20,060 --> 00:02:27,680
is this like string and here you execute

00:02:23,570 --> 00:02:30,560
a method and most they are like couple

00:02:27,680 --> 00:02:33,140
of logging frameworks in Java but

00:02:30,560 --> 00:02:35,330
basically most of them work like you

00:02:33,140 --> 00:02:38,660
define the level and then you define

00:02:35,330 --> 00:02:42,380
what you want to log and if you are

00:02:38,660 --> 00:02:44,300
configured like above this level then of

00:02:42,380 --> 00:02:46,989
course you you log it you write it down

00:02:44,300 --> 00:02:50,420
and if it's below you don't do nothing

00:02:46,989 --> 00:02:53,300
so imagine that's Here I am at the bug

00:02:50,420 --> 00:02:53,660
so if my level is info nothing will

00:02:53,300 --> 00:02:56,420
happen

00:02:53,660 --> 00:02:59,410
and if my level is debug then it will be

00:02:56,420 --> 00:03:01,970
written down to the log so far so good

00:02:59,410 --> 00:03:07,610
now I noticed that I thought since it's

00:03:01,970 --> 00:03:11,300
Java I forgot the syntax um yeah that's

00:03:07,610 --> 00:03:19,670
not that great okay who can tell me the

00:03:11,300 --> 00:03:22,190
problem with this line of code yeah

00:03:19,670 --> 00:03:24,350
exactly though what the gentleman said

00:03:22,190 --> 00:03:28,239
is basically caught that get price is

00:03:24,350 --> 00:03:28,239
computed whether you log it or not

00:03:28,480 --> 00:03:38,690
whether you log it or not so here I have

00:03:32,120 --> 00:03:44,600
a I always have little demos so I have a

00:03:38,690 --> 00:03:47,060
court basically of course I have a long

00:03:44,600 --> 00:03:51,760
computation and it's like a random

00:03:47,060 --> 00:03:51,760
number every time and if I log it

00:04:02,310 --> 00:04:07,660
done

00:04:04,390 --> 00:04:10,120
so basically what happens here is

00:04:07,660 --> 00:04:13,030
whatever happens whether I'm in the blog

00:04:10,120 --> 00:04:16,090
or not then it takes time I might change

00:04:13,030 --> 00:04:19,299
the log level it wants it won't change

00:04:16,090 --> 00:04:28,800
anything I will still need to wait and

00:04:19,299 --> 00:04:32,170
and that's a real issue so in order to

00:04:28,800 --> 00:04:34,420
correct this we we might have words

00:04:32,170 --> 00:04:38,520
around it so basically what we are

00:04:34,420 --> 00:04:44,140
saying is only call this code get price

00:04:38,520 --> 00:04:46,240
only if it's debug enabled so you

00:04:44,140 --> 00:04:49,350
evaluate first is debug in a ball then

00:04:46,240 --> 00:04:52,800
logger dot debug will evaluate it again

00:04:49,350 --> 00:04:55,150
that's pretty stupid but that's works

00:04:52,800 --> 00:04:58,690
the problem with with this approach is

00:04:55,150 --> 00:05:02,590
that you need well every developer needs

00:04:58,690 --> 00:05:07,380
to do it it's must be a discipline and I

00:05:02,590 --> 00:05:12,120
can like I can bet that at some point

00:05:07,380 --> 00:05:12,120
something very stupid is going to happen

00:05:12,360 --> 00:05:17,830
this is bound to happen because I mean

00:05:15,520 --> 00:05:19,240
developers we are I am developer some of

00:05:17,830 --> 00:05:23,440
you are developers this is bound to

00:05:19,240 --> 00:05:26,310
happen could be also reverse them so

00:05:23,440 --> 00:05:28,120
basically you will notice and not

00:05:26,310 --> 00:05:33,070
synchronization between the Gord

00:05:28,120 --> 00:05:35,140
condition and the statement a way to

00:05:33,070 --> 00:05:37,810
approach that would be to use like some

00:05:35,140 --> 00:05:39,850
black magic like some object

00:05:37,810 --> 00:05:44,020
aspect-oriented programming that will

00:05:39,850 --> 00:05:47,260
like like tweak the byte codes it will

00:05:44,020 --> 00:05:49,419
work it will be automated but then at

00:05:47,260 --> 00:05:55,990
some point perhaps you don't want to do

00:05:49,419 --> 00:06:03,120
that so what's the problem how can we

00:05:55,990 --> 00:06:03,120
can we correct that sorry

00:06:06,270 --> 00:06:13,259
what we can do is instead of like

00:06:09,479 --> 00:06:17,280
sending a computation sending the result

00:06:13,259 --> 00:06:20,520
of the computation we can send the

00:06:17,280 --> 00:06:25,229
computer the computation itself so

00:06:20,520 --> 00:06:31,280
basically instead of sending the result

00:06:25,229 --> 00:06:36,750
of cord get rice we send the function

00:06:31,280 --> 00:06:38,639
and at that point we can check whether

00:06:36,750 --> 00:06:40,110
it's debit enabled and only if it's

00:06:38,639 --> 00:06:45,330
doubly enabled when we call the method

00:06:40,110 --> 00:06:50,039
and we execute the function it's called

00:06:45,330 --> 00:06:57,900
like lazy and here if I'm doing this

00:06:50,039 --> 00:07:00,810
call it's much faster here nothing

00:06:57,900 --> 00:07:02,849
happened because I'm in debug and

00:07:00,810 --> 00:07:08,520
probably I have a level I have a level

00:07:02,849 --> 00:07:14,009
of info so everything is fine but it's a

00:07:08,520 --> 00:07:16,289
bit slower then if I add the gourd but

00:07:14,009 --> 00:07:18,919
it's still much better than waiting for

00:07:16,289 --> 00:07:18,919
five seconds

00:07:26,439 --> 00:07:29,550
this is next

00:07:32,890 --> 00:07:37,870
also you if there are not many

00:07:35,980 --> 00:07:40,000
developers probably I assume they are

00:07:37,870 --> 00:07:42,420
like DevOps people or seasoned in people

00:07:40,000 --> 00:07:45,160
and you probably know about it right

00:07:42,420 --> 00:07:46,960
developers they don't know I don't know

00:07:45,160 --> 00:07:48,910
that much I mean I write a log and

00:07:46,960 --> 00:07:51,520
everything will be fine afterwards but

00:07:48,910 --> 00:07:53,230
the people who like operates our system

00:07:51,520 --> 00:07:54,670
they know about it like yeah we are

00:07:53,230 --> 00:07:57,010
bound to the physical world and

00:07:54,670 --> 00:07:59,500
basically depending on the media that

00:07:57,010 --> 00:08:02,470
you are using under that disk type that

00:07:59,500 --> 00:08:06,790
you are using you might get like better

00:08:02,470 --> 00:08:13,260
or worse results and in fact you might

00:08:06,790 --> 00:08:18,730
want to log on the fastest possible like

00:08:13,260 --> 00:08:21,790
perhaps SSD will be better also when you

00:08:18,730 --> 00:08:22,780
think about like writing and when you

00:08:21,790 --> 00:08:26,230
write your file

00:08:22,780 --> 00:08:29,530
you open the stream the file you write

00:08:26,230 --> 00:08:32,140
down then you close the stream in

00:08:29,530 --> 00:08:34,900
general logs you always always write to

00:08:32,140 --> 00:08:37,360
the same file so you always open the

00:08:34,900 --> 00:08:39,700
stream right close the stream open the

00:08:37,360 --> 00:08:42,010
stream right close the stream it's super

00:08:39,700 --> 00:08:47,440
redundant in general is just for one

00:08:42,010 --> 00:08:52,360
line so the problem with this approach

00:08:47,440 --> 00:08:53,830
is yeah you open the stream right down

00:08:52,360 --> 00:08:56,260
close the stream meanwhile your

00:08:53,830 --> 00:08:59,100
application is not doing anything it's

00:08:56,260 --> 00:09:02,410
blocking the log statement is blocking

00:08:59,100 --> 00:09:06,100
what if we could write the log statement

00:09:02,410 --> 00:09:11,740
as synchronously would be a much better

00:09:06,100 --> 00:09:13,750
improvement so this is possible in most

00:09:11,740 --> 00:09:16,180
frameworks again in Java but you can

00:09:13,750 --> 00:09:19,270
probably have it in your company's

00:09:16,180 --> 00:09:21,400
language this is how you can do it with

00:09:19,270 --> 00:09:25,630
log back you just create something

00:09:21,400 --> 00:09:28,570
called lost it again like an icing a

00:09:25,630 --> 00:09:31,960
pender and it wraps the file that you

00:09:28,570 --> 00:09:34,240
want to write into and basically what

00:09:31,960 --> 00:09:36,850
you are doing is you are opening the

00:09:34,240 --> 00:09:39,310
string once and then you buffer it into

00:09:36,850 --> 00:09:41,770
the memory and when the queue is full

00:09:39,310 --> 00:09:44,020
when the buffer is true then you write

00:09:41,770 --> 00:09:45,730
everything down at once and then you

00:09:44,020 --> 00:09:46,480
close the string so instead of opening

00:09:45,730 --> 00:09:50,199
right

00:09:46,480 --> 00:09:51,610
in closing then you open right right

00:09:50,199 --> 00:09:56,010
right right right right right

00:09:51,610 --> 00:09:57,760
close which is much faster of course

00:09:56,010 --> 00:10:00,699
it's not magic

00:09:57,760 --> 00:10:01,990
there is always a treat of involved so

00:10:00,699 --> 00:10:03,880
first you must think about your true

00:10:01,990 --> 00:10:05,980
size so the longer the queue

00:10:03,880 --> 00:10:08,980
the bigger the queue the more memory it

00:10:05,980 --> 00:10:11,620
will take so if you have a lot of like

00:10:08,980 --> 00:10:18,250
lagers then probably your memory will

00:10:11,620 --> 00:10:21,269
get like full faster and then what is is

00:10:18,250 --> 00:10:25,630
it better like to keep all the logs and

00:10:21,269 --> 00:10:29,769
to at some point you need to block all

00:10:25,630 --> 00:10:31,360
to just discard to be faster let's think

00:10:29,769 --> 00:10:35,800
also about that again there is a

00:10:31,360 --> 00:10:40,050
trade-off and finally you should say I I

00:10:35,800 --> 00:10:43,510
never block and then I drop the message

00:10:40,050 --> 00:10:45,760
thinking about like logging probably the

00:10:43,510 --> 00:10:48,339
log message is not the most important I

00:10:45,760 --> 00:10:50,800
mean it's important but you probably

00:10:48,339 --> 00:10:54,850
have metadata that is associated with

00:10:50,800 --> 00:10:57,339
every log message like the first one is

00:10:54,850 --> 00:10:59,589
probably the timestamp so just log lines

00:10:57,339 --> 00:11:01,329
of what happens or not that interesting

00:10:59,589 --> 00:11:03,899
but the fact that there is a timestamp

00:11:01,329 --> 00:11:06,490
and then they can be order or whatever

00:11:03,899 --> 00:11:08,680
the name of thread probably right now

00:11:06,490 --> 00:11:10,959
you are using multi-threading

00:11:08,680 --> 00:11:15,130
applications unless you are doing no GS

00:11:10,959 --> 00:11:16,899
but I mean it's not trolling I'm not

00:11:15,130 --> 00:11:20,470
rolling it's true if you are using it

00:11:16,899 --> 00:11:22,510
yes it's single thread but most most of

00:11:20,470 --> 00:11:24,430
companies they are not using no GS or

00:11:22,510 --> 00:11:26,290
perhaps they are using Java C sharp or

00:11:24,430 --> 00:11:29,980
whatever but so there is a thread name

00:11:26,290 --> 00:11:31,930
involved also just a log message not

00:11:29,980 --> 00:11:34,000
that interesting where does it comes

00:11:31,930 --> 00:11:36,149
from so probably you have like the cross

00:11:34,000 --> 00:11:38,800
name or at least a function name

00:11:36,149 --> 00:11:41,589
sometimes you might even have the line

00:11:38,800 --> 00:11:45,910
number in the file that that's great for

00:11:41,589 --> 00:11:48,100
the bad purpose well the problem with

00:11:45,910 --> 00:11:51,490
that approach is that some meta data is

00:11:48,100 --> 00:11:54,819
required some meta data is just like for

00:11:51,490 --> 00:11:57,220
conforte and some meta data is easy to

00:11:54,819 --> 00:12:00,640
get some meta data is expensive to get

00:11:57,220 --> 00:12:04,090
so if you're doing development for

00:12:00,640 --> 00:12:06,130
if you are inside your I don't know your

00:12:04,090 --> 00:12:07,210
development environment so you are

00:12:06,130 --> 00:12:09,130
deploying your application you are

00:12:07,210 --> 00:12:11,050
working in development you want to have

00:12:09,130 --> 00:12:14,380
like the comfort of being able to debunk

00:12:11,050 --> 00:12:17,760
but getting the line number of the log

00:12:14,380 --> 00:12:20,830
in the file is really really expensive

00:12:17,760 --> 00:12:24,760
so in that case it's fine for

00:12:20,830 --> 00:12:26,440
development staging whatever but then in

00:12:24,760 --> 00:12:31,780
production you probably want to remove

00:12:26,440 --> 00:12:33,820
that the alternative is you ask your

00:12:31,780 --> 00:12:36,640
developer to write the line number well

00:12:33,820 --> 00:12:39,730
that would be a bit of far-fetched but

00:12:36,640 --> 00:12:42,970
the function name function M you ask

00:12:39,730 --> 00:12:44,830
your developer to prefix every log by

00:12:42,970 --> 00:12:46,240
the function name so you don't compute

00:12:44,830 --> 00:12:47,530
it but you write it down then because

00:12:46,240 --> 00:12:50,110
composite of the long it's less

00:12:47,530 --> 00:12:52,600
expensive it's faster but again you get

00:12:50,110 --> 00:12:58,510
back to the problem that they might get

00:12:52,600 --> 00:13:00,730
it wrong because it's not automated log

00:12:58,510 --> 00:13:02,650
segregation yeah in general you don't

00:13:00,730 --> 00:13:05,620
have one single server you probably have

00:13:02,650 --> 00:13:08,620
like many different server and everybody

00:13:05,620 --> 00:13:11,260
runs their servers into the clouds so

00:13:08,620 --> 00:13:13,240
you need a way to aggregate all your

00:13:11,260 --> 00:13:15,040
logs of all your server at some point

00:13:13,240 --> 00:13:16,840
because especially if you are doing

00:13:15,040 --> 00:13:19,630
micro services you might want to check

00:13:16,840 --> 00:13:21,700
that yeah here what happens on this

00:13:19,630 --> 00:13:23,890
server and what happens on these servers

00:13:21,700 --> 00:13:26,320
they are correlated so you put all your

00:13:23,890 --> 00:13:28,720
logs into the same place there are a lot

00:13:26,320 --> 00:13:31,690
of products available like elasticsearch

00:13:28,720 --> 00:13:33,130
plum Grail or whatever probably you

00:13:31,690 --> 00:13:37,930
forgot a few of them you know better

00:13:33,130 --> 00:13:40,120
than me and in that case when you try to

00:13:37,930 --> 00:13:42,960
think about like crystallization and

00:13:40,120 --> 00:13:46,090
stuff then you've got additional

00:13:42,960 --> 00:13:47,800
metadata because now you don't have one

00:13:46,090 --> 00:13:50,200
single app with one single file

00:13:47,800 --> 00:13:54,250
you've got multi-level apps with

00:13:50,200 --> 00:13:57,400
multiple files with multiple nodes with

00:13:54,250 --> 00:13:59,860
multiple environments with multiple

00:13:57,400 --> 00:14:03,160
regions if you are using really using

00:13:59,860 --> 00:14:05,170
the cloud and so you probably well when

00:14:03,160 --> 00:14:09,280
you say probably you want to have those

00:14:05,170 --> 00:14:12,810
also in your logs so you can like search

00:14:09,280 --> 00:14:17,560
and exploit them correctly

00:14:12,810 --> 00:14:20,860
think about it if you just want to have

00:14:17,560 --> 00:14:22,900
logs that are very very fast yet you

00:14:20,860 --> 00:14:25,470
just dump them somewhere but the problem

00:14:22,900 --> 00:14:28,210
is you don't want to have just two logs

00:14:25,470 --> 00:14:30,880
you want to be able to read them to get

00:14:28,210 --> 00:14:33,460
them out of the storage you want to

00:14:30,880 --> 00:14:37,600
surge the logs hey find me all the logs

00:14:33,460 --> 00:14:41,460
that are like related to the production

00:14:37,600 --> 00:14:43,930
environment that we're produce yesterday

00:14:41,460 --> 00:14:48,250
that's probably what you want to do I'm

00:14:43,930 --> 00:14:49,840
not talking about tags and labels so so

00:14:48,250 --> 00:14:51,640
they are two ways to approach that if

00:14:49,840 --> 00:14:55,450
you only think about having very very

00:14:51,640 --> 00:14:59,620
fast logs then you just then done there

00:14:55,450 --> 00:15:02,410
somewhere and structure and then the

00:14:59,620 --> 00:15:07,510
problem becomes the time when you need

00:15:02,410 --> 00:15:09,880
to query them so the schema there is

00:15:07,510 --> 00:15:13,000
always a schema but then the schema you

00:15:09,880 --> 00:15:18,190
need to like create it when you do the

00:15:13,000 --> 00:15:21,010
queries or you have the schema when you

00:15:18,190 --> 00:15:23,740
write it down and it's slower but then

00:15:21,010 --> 00:15:25,630
it becomes faster to query if you really

00:15:23,740 --> 00:15:31,270
thought well about your indeed in this

00:15:25,630 --> 00:15:33,940
is I will take an example architecture

00:15:31,270 --> 00:15:35,860
because yeah the elastic stack is what

00:15:33,940 --> 00:15:38,980
I've been using in the past so you might

00:15:35,860 --> 00:15:40,600
know about elastic search the

00:15:38,980 --> 00:15:42,880
architecture so you have elastic search

00:15:40,600 --> 00:15:45,700
which is basically your storage engine

00:15:42,880 --> 00:15:48,790
you have file bits that basically scrap

00:15:45,700 --> 00:15:52,090
the files on the edge and send them to

00:15:48,790 --> 00:15:54,790
elastic search but if you want to do

00:15:52,090 --> 00:15:57,280
like some transformation in between then

00:15:54,790 --> 00:16:00,610
five bits then the messages to logstash

00:15:57,280 --> 00:16:04,180
logstash does the transformation and

00:16:00,610 --> 00:16:05,830
then send them to elastic search you are

00:16:04,180 --> 00:16:10,510
familiar with that set up probably even

00:16:05,830 --> 00:16:12,640
if you own architecture so because I've

00:16:10,510 --> 00:16:18,100
been an architect I I know how to draw

00:16:12,640 --> 00:16:21,370
UML diagrams so basically at some points

00:16:18,100 --> 00:16:23,890
you write the logs on the file and then

00:16:21,370 --> 00:16:26,529
afterwards file bit will like read the

00:16:23,890 --> 00:16:29,800
logs and then send the logs to lock

00:16:26,529 --> 00:16:32,649
- which will transform the log and send

00:16:29,800 --> 00:16:36,600
it back to senate's - elasticsearch in

00:16:32,649 --> 00:16:40,600
JSON format familiar to you right so

00:16:36,600 --> 00:16:43,120
this is very hard for me but imagine

00:16:40,600 --> 00:16:47,800
this is a single line of course it's not

00:16:43,120 --> 00:16:51,569
but and and think about it this is what

00:16:47,800 --> 00:16:56,620
you send to locks - and this is what

00:16:51,569 --> 00:17:00,399
locks - does so basically you send a

00:16:56,620 --> 00:17:05,010
line and through the grokking pattern

00:17:00,399 --> 00:17:07,600
that you defined then locks - will like

00:17:05,010 --> 00:17:09,610
structure the log saying eh this is a

00:17:07,600 --> 00:17:12,370
tungsten here this is a line at the log

00:17:09,610 --> 00:17:19,289
level hey this is the log message this

00:17:12,370 --> 00:17:19,289
kind of stuff this is pretty stupid guys

00:17:19,829 --> 00:17:24,579
everybody I mean I do it all so I did it

00:17:22,630 --> 00:17:27,010
this is completely stupid we are

00:17:24,579 --> 00:17:29,230
producing unstructured log to structure

00:17:27,010 --> 00:17:31,419
them through locks - so that can be like

00:17:29,230 --> 00:17:35,289
directly into elasticsearch in a

00:17:31,419 --> 00:17:37,570
structured way what if we could just

00:17:35,289 --> 00:17:41,440
like produce directly this kind of stuff

00:17:37,570 --> 00:17:43,090
I put in much simpler that would be much

00:17:41,440 --> 00:17:45,250
simpler than you can we could have this

00:17:43,090 --> 00:17:47,320
kind of architecture no log stash

00:17:45,250 --> 00:17:49,990
anymore and I don't I don't know if you

00:17:47,320 --> 00:17:53,080
know about it but like it's Ruby

00:17:49,990 --> 00:17:56,700
log stash is Ruby so yes it's JRuby now

00:17:53,080 --> 00:18:00,159
but might be not the fastest beast alive

00:17:56,700 --> 00:18:03,250
so now we can get rid of loss - that's

00:18:00,159 --> 00:18:05,909
great and how hard it is to produce

00:18:03,250 --> 00:18:05,909
Jason actually

00:18:13,830 --> 00:18:21,570
well it's not hard at all just requires

00:18:17,249 --> 00:18:26,940
a bit of configuration so here is my

00:18:21,570 --> 00:18:29,580
pattern I mean I just puts like

00:18:26,940 --> 00:18:33,480
formatted the pattern using JSON and

00:18:29,580 --> 00:18:48,149
that's done imagine you can read get rid

00:18:33,480 --> 00:18:51,389
of locks - crazy right it just it's just

00:18:48,149 --> 00:18:54,210
a tweak of configuration file from your

00:18:51,389 --> 00:18:56,119
developer with your help and then you're

00:18:54,210 --> 00:18:58,499
done

00:18:56,119 --> 00:19:00,749
also you might think about other stuff

00:18:58,499 --> 00:19:04,169
if you really really want to be fast why

00:19:00,749 --> 00:19:05,809
write to disk and scrap it again that's

00:19:04,169 --> 00:19:08,159
pretty stupid

00:19:05,809 --> 00:19:10,139
that's pretty stupid if you if you are

00:19:08,159 --> 00:19:13,499
just focused on speed that's stupid what

00:19:10,139 --> 00:19:16,019
you want and what again 5-bit allows you

00:19:13,499 --> 00:19:19,049
to is all locks - allows you to sorry is

00:19:16,019 --> 00:19:21,330
to send events so you can send events

00:19:19,049 --> 00:19:23,700
instead of writing to disk now the

00:19:21,330 --> 00:19:27,960
trade-off becomes a what if I really

00:19:23,700 --> 00:19:32,239
really need the logs and something that

00:19:27,960 --> 00:19:37,259
happens then you've lost so depending on

00:19:32,239 --> 00:19:39,739
how much worth the logs out to you you

00:19:37,259 --> 00:19:45,869
you might not be interested in that

00:19:39,739 --> 00:19:48,090
something else to consider the log level

00:19:45,869 --> 00:19:52,139
is very important because the higher it

00:19:48,090 --> 00:19:54,179
is the less information you have so the

00:19:52,139 --> 00:19:56,429
day's logs you produce so the faster

00:19:54,179 --> 00:20:00,059
your system is but then what happens if

00:19:56,429 --> 00:20:03,059
yeah you like set the log level to very

00:20:00,059 --> 00:20:05,129
high like like error but then at some

00:20:03,059 --> 00:20:10,379
point something happens and you need to

00:20:05,129 --> 00:20:12,720
dig deeper what happens if you didn't

00:20:10,379 --> 00:20:14,639
think about it then you like stop your

00:20:12,720 --> 00:20:17,249
application you start it again with a

00:20:14,639 --> 00:20:20,789
lower log level which might not be

00:20:17,249 --> 00:20:23,820
really great for your customers so you

00:20:20,789 --> 00:20:28,309
might also think that perhaps you should

00:20:23,820 --> 00:20:31,740
or you could have out reloads

00:20:28,309 --> 00:20:34,500
so there is like a little demon that

00:20:31,740 --> 00:20:38,250
takes a bit of like CPU time but which

00:20:34,500 --> 00:20:41,730
constantly like reads your log

00:20:38,250 --> 00:20:44,850
configuration and then adjust it

00:20:41,730 --> 00:20:47,490
dynamically and then you can you can

00:20:44,850 --> 00:20:49,890
have like a very high level when you

00:20:47,490 --> 00:20:52,680
don't need it and then like with just a

00:20:49,890 --> 00:20:57,140
change in the configuration change it

00:20:52,680 --> 00:20:57,140
down so that could be quite good

00:20:57,200 --> 00:21:01,380
all that I've showed you so far you

00:20:59,670 --> 00:21:03,270
might say but this is not

00:21:01,380 --> 00:21:06,780
business-related we don't have money to

00:21:03,270 --> 00:21:10,170
change that that's where I actually can

00:21:06,780 --> 00:21:12,179
object just like metrics logs are not

00:21:10,170 --> 00:21:14,700
only technical so I know how it works in

00:21:12,179 --> 00:21:16,710
company if you have a very good idea but

00:21:14,700 --> 00:21:24,150
the business doesn't benefit for it that

00:21:16,710 --> 00:21:28,290
means no budget right yeah so unless you

00:21:24,150 --> 00:21:30,720
you you work for like like technically

00:21:28,290 --> 00:21:32,190
minded company companies that understand

00:21:30,720 --> 00:21:34,710
the value is behind it then you have no

00:21:32,190 --> 00:21:38,700
budget you cannot do anything the logs

00:21:34,710 --> 00:21:40,830
they are not only technical the logs

00:21:38,700 --> 00:21:43,230
might be for example once I work for a

00:21:40,830 --> 00:21:47,790
cloud company and the logs where the way

00:21:43,230 --> 00:21:49,710
we build our users so here we didn't

00:21:47,790 --> 00:21:53,610
send events because we wanted to keep

00:21:49,710 --> 00:21:57,540
like the proof and then we did like logs

00:21:53,610 --> 00:22:00,390
wrapping also what you must consider is

00:21:57,540 --> 00:22:01,860
I mean the the the the diagram that I

00:22:00,390 --> 00:22:04,290
showed you is just one simple

00:22:01,860 --> 00:22:06,870
architecture you could have multiple one

00:22:04,290 --> 00:22:08,580
you have a lot of options again in my

00:22:06,870 --> 00:22:10,170
previous company we we didn't choose

00:22:08,580 --> 00:22:12,120
file bit because the people were not

00:22:10,170 --> 00:22:15,540
used to file bit they use this log NJ

00:22:12,120 --> 00:22:19,860
and to ensure durability then we send

00:22:15,540 --> 00:22:23,040
our stuff to Kafka and then in Kafka we

00:22:19,860 --> 00:22:24,590
could process every business event and

00:22:23,040 --> 00:22:27,660
build the people accordingly

00:22:24,590 --> 00:22:32,300
so here it's also something that that

00:22:27,660 --> 00:22:34,340
that could work for you it's just an

00:22:32,300 --> 00:22:37,800
example this is just an option

00:22:34,340 --> 00:22:39,990
everything is possible I sell in a lot

00:22:37,800 --> 00:22:41,520
of my talks I say a lot it depends and

00:22:39,990 --> 00:22:45,840
people think that I'm making fun of

00:22:41,520 --> 00:22:46,710
them but actually it really depends so

00:22:45,840 --> 00:22:49,590
summary

00:22:46,710 --> 00:22:51,330
instead of like passing the result of

00:22:49,590 --> 00:22:54,150
the long computation like execute

00:22:51,330 --> 00:22:58,050
directed like pass the computation

00:22:54,150 --> 00:23:04,160
itself consider the file system you want

00:22:58,050 --> 00:23:07,020
to write to if you value speed more than

00:23:04,160 --> 00:23:11,160
resiliency then probably you should go

00:23:07,020 --> 00:23:13,230
as synchronous also check the metadata

00:23:11,160 --> 00:23:15,510
some developers they want to write down

00:23:13,230 --> 00:23:18,570
everything and some of the metadata this

00:23:15,510 --> 00:23:22,140
is associated with those things can be

00:23:18,570 --> 00:23:24,420
like very very time-consuming of course

00:23:22,140 --> 00:23:26,430
schema on right is slower but as the

00:23:24,420 --> 00:23:28,410
alternative is you cannot search in a

00:23:26,430 --> 00:23:32,370
real good way so you should do it

00:23:28,410 --> 00:23:38,400
and yes and JSON and just get rid of

00:23:32,370 --> 00:23:40,290
every transformation I believe that it's

00:23:38,400 --> 00:23:43,020
a responsibility of everyone to have

00:23:40,290 --> 00:23:44,850
fast logs that I I've shown you is that

00:23:43,020 --> 00:23:47,040
basically it starts with the developer

00:23:44,850 --> 00:23:49,650
then you've got the guy who like things

00:23:47,040 --> 00:23:52,530
about the hardware and then your

00:23:49,650 --> 00:23:56,340
architecture also is important and how

00:23:52,530 --> 00:23:59,280
you handle the streams so everybody

00:23:56,340 --> 00:24:01,050
should be aware of that problem it must

00:23:59,280 --> 00:24:03,450
be a jointly force so if you really

00:24:01,050 --> 00:24:05,070
really want to add the fastest logs

00:24:03,450 --> 00:24:10,190
possible then you should involve

00:24:05,070 --> 00:24:13,920
everybody and yeah that's very important

00:24:10,190 --> 00:24:16,260
speed you can get very fast but then it

00:24:13,920 --> 00:24:18,720
won't be super reliable or you will get

00:24:16,260 --> 00:24:21,000
very fast but then it will be very slow

00:24:18,720 --> 00:24:23,940
to search so it's always about the

00:24:21,000 --> 00:24:25,290
trade-off that you want and yeah that

00:24:23,940 --> 00:24:29,370
needs to be discussed inside your

00:24:25,290 --> 00:24:31,200
company so thanks for listening to me

00:24:29,370 --> 00:24:32,820
you can read about my blog you can

00:24:31,200 --> 00:24:37,130
follow me on Twitter and now there is

00:24:32,820 --> 00:24:37,130
some like five minutes for questions

00:24:37,210 --> 00:24:45,880
[Applause]

00:24:45,970 --> 00:24:50,330
yes thank you thank you for saving me

00:24:48,500 --> 00:24:54,049
because like the previous speaker if

00:24:50,330 --> 00:25:04,190
there is no question thanks to can be

00:24:54,049 --> 00:25:08,270
either a good sign of that sign oh good

00:25:04,190 --> 00:25:10,760
afternoon good afternoon nice talk you

00:25:08,270 --> 00:25:15,799
talked about the different requirements

00:25:10,760 --> 00:25:18,110
for burritos might have I was wondering

00:25:15,799 --> 00:25:19,970
from your point of view who should make

00:25:18,110 --> 00:25:23,840
those final determinations which

00:25:19,970 --> 00:25:27,410
trade-offs having to be taken for a

00:25:23,840 --> 00:25:29,110
logging system developer who knows how

00:25:27,410 --> 00:25:34,780
the code works

00:25:29,110 --> 00:25:37,910
operator who has to fix things I

00:25:34,780 --> 00:25:40,809
so the question right well you it's

00:25:37,910 --> 00:25:44,240
recorded so basically I think that's I

00:25:40,809 --> 00:25:47,630
mean you probably are in different

00:25:44,240 --> 00:25:49,730
organization every one of you developers

00:25:47,630 --> 00:25:54,740
are only interested in developer stuff

00:25:49,730 --> 00:25:58,460
mainly my ops people they don't care I

00:25:54,740 --> 00:26:00,890
always said that the the bet the best

00:25:58,460 --> 00:26:02,330
production environment is the product is

00:26:00,890 --> 00:26:07,280
an environment where there are no apps

00:26:02,330 --> 00:26:09,890
because it's super stable so the problem

00:26:07,280 --> 00:26:11,870
with saying a it's better to like let

00:26:09,890 --> 00:26:14,799
the developers take the decision or it's

00:26:11,870 --> 00:26:18,130
better to let up stack the decision is

00:26:14,799 --> 00:26:20,750
you always add this wall of shame of

00:26:18,130 --> 00:26:23,540
miscommunication between dev and ops so

00:26:20,750 --> 00:26:26,090
unless you are in an environment which

00:26:23,540 --> 00:26:30,380
has like transparent communication like

00:26:26,090 --> 00:26:35,590
DevOps it should be very hard and it

00:26:30,380 --> 00:26:39,950
will be skewed in one way or another so

00:26:35,590 --> 00:26:41,870
depends on your organization and to be

00:26:39,950 --> 00:26:44,390
honest I'm removing this wall is the

00:26:41,870 --> 00:26:47,990
hardest you can you can achieve in any

00:26:44,390 --> 00:26:51,590
any organization because that's how how

00:26:47,990 --> 00:26:54,250
how traditional like culture has been

00:26:51,590 --> 00:26:56,480
built developers on ones

00:26:54,250 --> 00:27:00,010
production on the other side and because

00:26:56,480 --> 00:27:03,530
of course like if you create a local

00:27:00,010 --> 00:27:08,180
local optimum and another local optimum

00:27:03,530 --> 00:27:10,100
then you bought the like optimum global

00:27:08,180 --> 00:27:12,440
which is completely crap

00:27:10,100 --> 00:27:17,410
but again that's how our organization

00:27:12,440 --> 00:27:17,410
are built upon thank you

00:27:22,830 --> 00:27:28,140
it doesn't mean that actually you can

00:27:25,050 --> 00:27:29,700
you cannot like take it on your side

00:27:28,140 --> 00:27:32,970
like for example if you are developer

00:27:29,700 --> 00:27:36,000
you can already try to do a synchronous

00:27:32,970 --> 00:27:37,770
logging for example or that even might

00:27:36,000 --> 00:27:40,200
be already a trade off because you might

00:27:37,770 --> 00:27:42,270
do some stuff but passing like

00:27:40,200 --> 00:27:44,430
computation instead of the result of

00:27:42,270 --> 00:27:48,000
computation it's completely side-effect

00:27:44,430 --> 00:27:56,930
free and that is like very very easy and

00:27:48,000 --> 00:27:56,930
fast improvement some more questions

00:27:59,210 --> 00:28:04,470
somebody wants just to not to have a

00:28:02,400 --> 00:28:06,860
question but just because you want that

00:28:04,470 --> 00:28:12,300
you throw them but the cube at him yeah

00:28:06,860 --> 00:28:14,970
yeah I knew it I felt it I don't have a

00:28:12,300 --> 00:28:20,070
question that's right but thanks for the

00:28:14,970 --> 00:28:23,210
nice talk and I think in addition the

00:28:20,070 --> 00:28:26,880
developer if you like chase indirectly

00:28:23,210 --> 00:28:32,880
has an advantage because he can have a

00:28:26,880 --> 00:28:35,240
look at like a graphical GUI where you

00:28:32,880 --> 00:28:39,570
can see like changes in his looks or

00:28:35,240 --> 00:28:43,470
something else so it might be good for

00:28:39,570 --> 00:28:46,910
the developers to I guess when they have

00:28:43,470 --> 00:28:52,490
like instant feedback from their

00:28:46,910 --> 00:28:56,040
application ok so your assumption is

00:28:52,490 --> 00:29:01,950
developers have access to these GUI

00:28:56,040 --> 00:29:04,470
tools yes and and you now you understand

00:29:01,950 --> 00:29:06,090
where I'm heading to like because I

00:29:04,470 --> 00:29:09,650
remember like it was like eight years

00:29:06,090 --> 00:29:12,930
ago I had to us for the production logs

00:29:09,650 --> 00:29:16,280
and of course you might understand that

00:29:12,930 --> 00:29:19,260
it was like in a public administration

00:29:16,280 --> 00:29:22,830
between the time where I needed them and

00:29:19,260 --> 00:29:27,960
the time where I asked them and the time

00:29:22,830 --> 00:29:29,790
I got them so yes it would be great if

00:29:27,960 --> 00:29:32,190
all developers had access to those

00:29:29,790 --> 00:29:34,500
dashboards and metrics and again it's a

00:29:32,190 --> 00:29:36,429
lot it's a lot about collaborating like

00:29:34,500 --> 00:29:38,980
removing stupid permission

00:29:36,429 --> 00:29:42,129
where you it's not necessary okay you

00:29:38,980 --> 00:29:45,369
agree yes and you can remove the backlog

00:29:42,129 --> 00:29:47,919
from like if the lock measure message

00:29:45,369 --> 00:29:52,119
has changed and then like someone need

00:29:47,919 --> 00:29:55,119
to rework the whole grog pattern that

00:29:52,119 --> 00:29:57,340
the message is meshed again and if you

00:29:55,119 --> 00:30:01,840
sent Jason directly you have the instant

00:29:57,340 --> 00:30:12,850
result so you reduce overheat work it's

00:30:01,840 --> 00:30:15,600
pretty good nollie so Thanks other

00:30:12,850 --> 00:30:15,600
questions okay

00:30:17,619 --> 00:30:21,010
thank you very much have a good day

00:30:19,470 --> 00:30:31,980
[Applause]

00:30:21,010 --> 00:30:31,980
[Music]

00:30:35,550 --> 00:30:38,319

YouTube URL: https://www.youtube.com/watch?v=DK9FM34YvXM


