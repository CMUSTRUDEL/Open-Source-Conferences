Title: OSMC 2019 |  Automating the Configuration of Monitoring on large Infrastructures by João Cavalheiro
Publication date: 2019-11-18
Playlist: OSMC 2019 | Open Source Monitoring Conference
Description: 
	Setting up monitoring on dynamic, large environments can be challenging. This session will cover how to provision a monitoring infrastructure with Prometheus and Grafana the easy way using Salt states (https://github.com/saltstack/salt) and Uyuni (https://github.com/uyuni-project/uyuni), and how these tools can help with:

– Automating the installation of exporters on monitored systems
– Prometheus configuration and service discovery mechanisms
– Grafana provisioning and sample dashboards

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Musik: FRAMETRAXX
Captions: 
	00:00:11,840 --> 00:00:18,689
all right hi everyone it's very nice to

00:00:16,529 --> 00:00:22,350
be here in this beautiful city and for

00:00:18,689 --> 00:00:25,140
the first time at osm sea today I'm here

00:00:22,350 --> 00:00:27,900
with Johannes we are both engineering

00:00:25,140 --> 00:00:31,800
managers at Sousa and apart from that we

00:00:27,900 --> 00:00:33,930
are also developers and we are leading

00:00:31,800 --> 00:00:37,649
the development of monitoring features

00:00:33,930 --> 00:00:40,890
at Sousa and today we are going to talk

00:00:37,649 --> 00:00:42,810
you about how you can automate the

00:00:40,890 --> 00:00:45,600
configuration of monitoring on large

00:00:42,810 --> 00:00:50,760
infrastructures in an easier way with

00:00:45,600 --> 00:00:53,969
who Unni and I'll start by Framing the

00:00:50,760 --> 00:00:56,730
problem so as most of you probably know

00:00:53,969 --> 00:01:00,510
managing infrastructures is never easy

00:00:56,730 --> 00:01:03,180
especially on large data centers you

00:01:00,510 --> 00:01:05,579
have a lot of machines to deal with

00:01:03,180 --> 00:01:08,789
different operating systems different

00:01:05,579 --> 00:01:10,680
stacks you have many times nexus of

00:01:08,789 --> 00:01:13,830
on-premise infrastructure and cloud

00:01:10,680 --> 00:01:15,840
infrastructure and in most enterprise

00:01:13,830 --> 00:01:19,080
environments you also have requirements

00:01:15,840 --> 00:01:24,000
about security and compliance that are

00:01:19,080 --> 00:01:27,420
not always easy to deal with and this is

00:01:24,000 --> 00:01:30,060
where uni can help so uni is not only a

00:01:27,420 --> 00:01:32,070
monitoring tool it does more than that

00:01:30,060 --> 00:01:34,830
although today our focus is going to be

00:01:32,070 --> 00:01:37,020
around the monitoring parts but as an

00:01:34,830 --> 00:01:39,180
introduction it also allows you to do

00:01:37,020 --> 00:01:42,030
things like patch management package

00:01:39,180 --> 00:01:45,299
management you can do math deployments

00:01:42,030 --> 00:01:47,400
of patches and packages you can do this

00:01:45,299 --> 00:01:49,979
in a consistent and repeatable way so

00:01:47,400 --> 00:01:53,400
you can manage your wall infrastructure

00:01:49,979 --> 00:01:56,430
inside this tool and before we move

00:01:53,400 --> 00:01:59,939
forward I want to you to know a bit of

00:01:56,430 --> 00:02:02,759
history about how it all started so you

00:01:59,939 --> 00:02:06,149
okay yeah yeah that would that's my turn

00:02:02,759 --> 00:02:08,009
so as Joe mentioned the both of us we

00:02:06,149 --> 00:02:12,780
are working at was on open source

00:02:08,009 --> 00:02:14,609
projects one of them is Uni and I'm now

00:02:12,780 --> 00:02:19,200
here to tell you a little bit how it

00:02:14,609 --> 00:02:21,330
came to uni so the origins of who you

00:02:19,200 --> 00:02:24,450
n'yar in a project that's called

00:02:21,330 --> 00:02:27,660
spacewalk spacewalk was developed by Red

00:02:24,450 --> 00:02:30,420
Hat and published around 2008 so it's

00:02:27,660 --> 00:02:33,019
quite old stuff they used it as an

00:02:30,420 --> 00:02:36,239
upstream community project for their

00:02:33,019 --> 00:02:38,099
satellite products so up until satellite

00:02:36,239 --> 00:02:40,170
five at least so it's an open-source

00:02:38,099 --> 00:02:42,300
systems measurement solution with all

00:02:40,170 --> 00:02:44,690
the features like inventory patch

00:02:42,300 --> 00:02:48,470
installations

00:02:44,690 --> 00:02:50,819
it has a UI and also it has an API so

00:02:48,470 --> 00:02:54,420
basically it's a web interface for your

00:02:50,819 --> 00:02:57,170
for managing your data center and back

00:02:54,420 --> 00:03:00,329
then when they published it it supported

00:02:57,170 --> 00:03:06,030
those distributions like Fedora CentOS

00:03:00,329 --> 00:03:08,670
and Debian so in 2011 when I joined

00:03:06,030 --> 00:03:10,620
zuzibe they were about to make a product

00:03:08,670 --> 00:03:13,200
based on this open-source project based

00:03:10,620 --> 00:03:16,200
on space book that product is called

00:03:13,200 --> 00:03:18,299
through the manager and it was adopted

00:03:16,200 --> 00:03:21,329
spacewalk to make a product out of it so

00:03:18,299 --> 00:03:22,799
that we can have so that there's a an

00:03:21,329 --> 00:03:24,959
open-source community that we can

00:03:22,799 --> 00:03:29,100
contribute back to when making a product

00:03:24,959 --> 00:03:31,680
so first work that was done of course

00:03:29,100 --> 00:03:36,660
was to make spacewalk work with all this

00:03:31,680 --> 00:03:39,299
wizard distributions as well which is

00:03:36,660 --> 00:03:42,989
not too difficult because it's also RPM

00:03:39,299 --> 00:03:46,019
based of course so at some point couple

00:03:42,989 --> 00:03:47,970
of years later redhead decided to go a

00:03:46,019 --> 00:03:50,700
different way when they made satellite

00:03:47,970 --> 00:03:54,450
six so satellite six was supposed to be

00:03:50,700 --> 00:03:57,269
built on different technologies and we

00:03:54,450 --> 00:03:59,519
didn't really want to follow that road

00:03:57,269 --> 00:04:02,430
so we believe that the the spacewalk

00:03:59,519 --> 00:04:04,709
codebase is not a bad one yes we wanted

00:04:02,430 --> 00:04:06,870
modernization but we we wanted to

00:04:04,709 --> 00:04:10,579
modernize the existing code base because

00:04:06,870 --> 00:04:12,959
we believed in it so and we still do so

00:04:10,579 --> 00:04:15,480
space work at some point entered some

00:04:12,959 --> 00:04:19,919
kind of maintenance mode where less

00:04:15,480 --> 00:04:22,229
developers were working on it so while

00:04:19,919 --> 00:04:24,770
we were doing modernizations with a team

00:04:22,229 --> 00:04:27,840
of more than ten developers at that time

00:04:24,770 --> 00:04:29,909
we it was not really easy to contribute

00:04:27,840 --> 00:04:31,770
back to the project because they were

00:04:29,909 --> 00:04:32,970
lacking the manpower to accept our

00:04:31,770 --> 00:04:35,340
patches

00:04:32,970 --> 00:04:41,610
more modern libraries also needs more

00:04:35,340 --> 00:04:43,979
packaging etc etc so in the end this was

00:04:41,610 --> 00:04:46,139
leading to a decision on our side to

00:04:43,979 --> 00:04:50,940
fork the project like to fork spacewalk

00:04:46,139 --> 00:04:54,960
and do our own thing so why you uni so

00:04:50,940 --> 00:04:59,520
uni is the name of our own Fork of space

00:04:54,960 --> 00:05:01,349
walk so why uni who would come up with

00:04:59,520 --> 00:05:05,310
such a name I mean it's a cool name but

00:05:01,349 --> 00:05:07,590
who uni is the name of salt desert like

00:05:05,310 --> 00:05:12,599
a salt flat world's largest salt flat

00:05:07,590 --> 00:05:15,330
it's in Bolivia looks like this and why

00:05:12,599 --> 00:05:18,030
would we name our project like this is

00:05:15,330 --> 00:05:21,090
because meanwhile it's based on salt so

00:05:18,030 --> 00:05:23,819
as I mentioned we wanted to do a lot of

00:05:21,090 --> 00:05:26,009
modernizations to the codebase and one

00:05:23,819 --> 00:05:27,930
of them was basically to replace the

00:05:26,009 --> 00:05:28,440
backend with something better than it

00:05:27,930 --> 00:05:31,319
was before

00:05:28,440 --> 00:05:35,610
in order to allow better configuration

00:05:31,319 --> 00:05:39,030
management and our decision was to do

00:05:35,610 --> 00:05:40,919
that with salt so what is salt maybe you

00:05:39,030 --> 00:05:44,400
might know salt but salt is a no it's an

00:05:40,919 --> 00:05:47,340
open-source software of course and it is

00:05:44,400 --> 00:05:49,770
there to help you with configuration

00:05:47,340 --> 00:05:52,460
management and also with remote task

00:05:49,770 --> 00:05:55,440
execution I mentioned those different

00:05:52,460 --> 00:05:57,360
approaches because that is one of the

00:05:55,440 --> 00:06:01,229
reasons why it was so good for us to be

00:05:57,360 --> 00:06:04,800
used in uni because on the one hand we

00:06:01,229 --> 00:06:06,750
want to have allow users to tell what

00:06:04,800 --> 00:06:08,909
you need to okay just install me this

00:06:06,750 --> 00:06:11,250
software right now on that server and

00:06:08,909 --> 00:06:13,919
execute it immediately but on the other

00:06:11,250 --> 00:06:16,740
hand we wanted to sub P Polly

00:06:13,919 --> 00:06:20,669
do more advanced descriptive

00:06:16,740 --> 00:06:23,039
configuration management by in a way

00:06:20,669 --> 00:06:25,440
like okay I want to describe the state

00:06:23,039 --> 00:06:29,789
of my system and then I apply the state

00:06:25,440 --> 00:06:32,909
and who unis makes sure that system is

00:06:29,789 --> 00:06:35,490
compliant to the defined state so

00:06:32,909 --> 00:06:37,409
basically salt allows us both of this so

00:06:35,490 --> 00:06:40,199
you can run a remote command you can run

00:06:37,409 --> 00:06:42,180
a script on ten systems at the same time

00:06:40,199 --> 00:06:44,219
or you can describe the state of your

00:06:42,180 --> 00:06:47,080
systems and just apply this every night

00:06:44,219 --> 00:06:50,180
to make sure the systems are compliant

00:06:47,080 --> 00:06:54,860
yeah apart from that it's python-based

00:06:50,180 --> 00:06:57,760
so where you manage systems only need

00:06:54,860 --> 00:07:02,479
Python basically in order to run salt

00:06:57,760 --> 00:07:04,669
typically salt works in a minyan master

00:07:02,479 --> 00:07:06,530
way that means there's one thought

00:07:04,669 --> 00:07:10,190
master and all the managed systems are

00:07:06,530 --> 00:07:11,630
the minions those typically require to

00:07:10,190 --> 00:07:14,630
run an agent in Python

00:07:11,630 --> 00:07:17,780
I say typically because in salt you have

00:07:14,630 --> 00:07:19,100
also the option to use SSH to connect to

00:07:17,780 --> 00:07:22,729
those minions from the master it's

00:07:19,100 --> 00:07:26,930
called salt SSH so in uni we support

00:07:22,729 --> 00:07:29,720
both of these transport mechanisms so to

00:07:26,930 --> 00:07:31,250
speak but the advantage of the minion

00:07:29,720 --> 00:07:33,260
master approach is that the connection

00:07:31,250 --> 00:07:35,960
is initiated by the minions so the

00:07:33,260 --> 00:07:37,639
master does not need to open network

00:07:35,960 --> 00:07:39,770
connections to all the systems at the

00:07:37,639 --> 00:07:43,190
same time while rather the minions

00:07:39,770 --> 00:07:45,020
connect back to the master so 0 mq is

00:07:43,190 --> 00:07:46,789
used as the default transport mechanism

00:07:45,020 --> 00:07:49,370
but also SSH is possible

00:07:46,789 --> 00:07:51,800
as mentioned apart from that there's

00:07:49,370 --> 00:07:54,169
it's it's based on an event-driven

00:07:51,800 --> 00:07:56,479
architecture so that supports automation

00:07:54,169 --> 00:07:58,220
means ok whenever the reside comes back

00:07:56,479 --> 00:07:59,750
from one of the systems like we

00:07:58,220 --> 00:08:02,270
installed a package we want to know did

00:07:59,750 --> 00:08:05,990
it work or not we can automatically

00:08:02,270 --> 00:08:09,289
react to that so in the end salt seemed

00:08:05,990 --> 00:08:10,840
to be scalable enough for our use cases

00:08:09,289 --> 00:08:14,510
because we also have customers

00:08:10,840 --> 00:08:16,520
requesting things like ok will it work

00:08:14,510 --> 00:08:19,910
with large environments can I manage

00:08:16,520 --> 00:08:21,950
10,000 systems maybe so we believed in

00:08:19,910 --> 00:08:24,260
that so it is extensible and

00:08:21,950 --> 00:08:27,349
customizable I mean that we can easily

00:08:24,260 --> 00:08:29,330
write our own stuff in Python there's a

00:08:27,349 --> 00:08:31,340
whole lot of available modules for all

00:08:29,330 --> 00:08:33,890
kinds of things already from the

00:08:31,340 --> 00:08:36,260
community but in the end you also want

00:08:33,890 --> 00:08:38,150
to do your own stuff so it's easily

00:08:36,260 --> 00:08:39,950
customizable and that's why it was a

00:08:38,150 --> 00:08:43,120
good decision for us to replace existing

00:08:39,950 --> 00:08:46,730
space walk back and space work back end

00:08:43,120 --> 00:08:49,550
so here you can see again those two

00:08:46,730 --> 00:08:52,190
concepts that I mentioned so this is

00:08:49,550 --> 00:08:54,620
just a very this is a minion master

00:08:52,190 --> 00:08:56,800
setup how it would look like so sort in

00:08:54,620 --> 00:08:58,790
general supports not only Linux but also

00:08:56,800 --> 00:09:00,770
anything else you can even manage

00:08:58,790 --> 00:09:03,050
windows or

00:09:00,770 --> 00:09:05,150
with it but our focus is on Linux of

00:09:03,050 --> 00:09:09,020
course because we're open source company

00:09:05,150 --> 00:09:11,300
and Enterprise Linux company so our

00:09:09,020 --> 00:09:13,490
focus is on Linux of course but here on

00:09:11,300 --> 00:09:16,040
the left hand you could easily run this

00:09:13,490 --> 00:09:18,440
command on your master and it would give

00:09:16,040 --> 00:09:20,810
you disk usage from all the connected

00:09:18,440 --> 00:09:23,570
minions while you could of course change

00:09:20,810 --> 00:09:27,740
this expression to something more to

00:09:23,570 --> 00:09:29,930
match only a set of your systems while

00:09:27,740 --> 00:09:31,850
on the right hand side you see the more

00:09:29,930 --> 00:09:35,150
descriptive approach that I described

00:09:31,850 --> 00:09:37,730
before so called salt States you can

00:09:35,150 --> 00:09:42,590
define the state of your systems as salt

00:09:37,730 --> 00:09:45,680
States which is usually an SLS file so a

00:09:42,590 --> 00:09:48,320
simple stage would state would basic

00:09:45,680 --> 00:09:51,620
would for example say okay will be

00:09:48,320 --> 00:09:54,070
installed or Apache should be installed

00:09:51,620 --> 00:09:56,540
and the service should be running

00:09:54,070 --> 00:10:00,460
index.html should be deployed to some

00:09:56,540 --> 00:10:03,170
place on the file system and so on so

00:10:00,460 --> 00:10:06,020
this is all very customizable to your

00:10:03,170 --> 00:10:10,580
needs so you can just write the states

00:10:06,020 --> 00:10:13,220
that you want for your systems but on

00:10:10,580 --> 00:10:16,070
the other hand on top of this concept of

00:10:13,220 --> 00:10:18,530
states there is also so-called formulas

00:10:16,070 --> 00:10:20,270
which means predefined states that can

00:10:18,530 --> 00:10:23,570
be shipped as packages so you could

00:10:20,270 --> 00:10:25,460
imagine that someone could prepare a

00:10:23,570 --> 00:10:27,980
state to set up a monitoring environment

00:10:25,460 --> 00:10:30,770
package it and ship it to you and you

00:10:27,980 --> 00:10:34,310
can just install it and run it for

00:10:30,770 --> 00:10:36,500
example from uni so in uyuni we have a

00:10:34,310 --> 00:10:37,880
nice framework on top of these formulas

00:10:36,500 --> 00:10:39,860
because those states are also

00:10:37,880 --> 00:10:43,700
configurable with data so you might want

00:10:39,860 --> 00:10:48,530
to configure those states with with data

00:10:43,700 --> 00:10:50,150
and in uni we have you eyes to do

00:10:48,530 --> 00:10:57,560
exactly that and that we will show you

00:10:50,150 --> 00:11:00,740
later ok so I'm summarizing what do we

00:10:57,560 --> 00:11:03,140
have uni is a fork of space walk we have

00:11:00,740 --> 00:11:04,790
a new back-end that's based on salt we

00:11:03,140 --> 00:11:07,430
also modernize code base in other

00:11:04,790 --> 00:11:09,740
aspects for example on the front and

00:11:07,430 --> 00:11:13,910
side but also meanwhile of course

00:11:09,740 --> 00:11:14,279
there's Python 3 recent JDK version we

00:11:13,910 --> 00:11:16,439
entry

00:11:14,279 --> 00:11:18,420
use new features that was not possible

00:11:16,439 --> 00:11:20,459
before working with the upstream

00:11:18,420 --> 00:11:22,009
community of space walk like content

00:11:20,459 --> 00:11:25,079
lifecycle management that means you can

00:11:22,009 --> 00:11:28,790
your vendor channels can be staged you

00:11:25,079 --> 00:11:31,319
can create stages as you want them like

00:11:28,790 --> 00:11:32,449
def test production and assign your

00:11:31,319 --> 00:11:34,889
systems accordingly

00:11:32,449 --> 00:11:36,540
there's features to build container

00:11:34,889 --> 00:11:40,019
images and to track them in your

00:11:36,540 --> 00:11:41,999
communities cluster so for instance who

00:11:40,019 --> 00:11:44,220
unique could tell you okay you have a

00:11:41,999 --> 00:11:46,860
container image here but there's a

00:11:44,220 --> 00:11:50,670
security patch available it is time to

00:11:46,860 --> 00:11:52,230
rebuild your image and redeploy it

00:11:50,670 --> 00:11:54,059
there's improved virtualization

00:11:52,230 --> 00:11:56,749
management meanwhile so that's also

00:11:54,059 --> 00:11:59,579
based on salt meanwhile so you can see

00:11:56,749 --> 00:12:02,100
for virtualization host you can see what

00:11:59,579 --> 00:12:05,899
VMs are running there you can restart

00:12:02,100 --> 00:12:08,550
them you can create new VMs and so on

00:12:05,899 --> 00:12:11,399
yeah and last but not least we also

00:12:08,550 --> 00:12:13,079
meanwhile provides automation for

00:12:11,399 --> 00:12:16,860
monitoring based on primitives and graph

00:12:13,079 --> 00:12:18,569
fauna and the the history of that is

00:12:16,860 --> 00:12:20,790
that a spacewalk originally contained

00:12:18,569 --> 00:12:23,009
some custom monitoring code that was

00:12:20,790 --> 00:12:25,980
based on probes that could be executed

00:12:23,009 --> 00:12:27,809
on the systems but it was not very those

00:12:25,980 --> 00:12:30,449
features were not very nice not many of

00:12:27,809 --> 00:12:33,540
our customers were using them even in

00:12:30,449 --> 00:12:35,399
the community they the monitoring in

00:12:33,540 --> 00:12:37,199
space book was not very popular so at

00:12:35,399 --> 00:12:40,649
some point in agreement with the space

00:12:37,199 --> 00:12:43,579
work upstream I think in 2015 we decided

00:12:40,649 --> 00:12:47,579
to throw this away from the codebase and

00:12:43,579 --> 00:12:50,730
instead to do some more lightweight

00:12:47,579 --> 00:12:54,269
integration with an existing monitoring

00:12:50,730 --> 00:12:56,430
software and now finally with this

00:12:54,269 --> 00:12:59,279
formulas framework and all the salt

00:12:56,430 --> 00:13:02,790
back-end we believe that uni is the

00:12:59,279 --> 00:13:04,230
perfect platform to provision monitoring

00:13:02,790 --> 00:13:06,449
in your environment because that's

00:13:04,230 --> 00:13:09,389
exactly what salt states and those

00:13:06,449 --> 00:13:12,959
formulas are good for and yeah

00:13:09,389 --> 00:13:16,470
from here Joe will tell you more about

00:13:12,959 --> 00:13:20,269
why promise is a good choice okay so a

00:13:16,470 --> 00:13:22,949
quick introduction about the matrix

00:13:20,269 --> 00:13:25,709
ecosystem and Prometheus and Griffin off

00:13:22,949 --> 00:13:28,080
or who might not be aware of this just a

00:13:25,709 --> 00:13:32,100
basic introduction on those concepts so

00:13:28,080 --> 00:13:34,230
got started with metrics because there

00:13:32,100 --> 00:13:36,750
are the most important source of

00:13:34,230 --> 00:13:39,270
information for finding problems for

00:13:36,750 --> 00:13:42,180
understanding how your infrastructure is

00:13:39,270 --> 00:13:44,310
behaving so apart from logs and from

00:13:42,180 --> 00:13:47,070
distributed tracing it's one of the

00:13:44,310 --> 00:13:50,310
pillars of observability and we picked

00:13:47,070 --> 00:13:52,770
as the first part to work on monitoring

00:13:50,310 --> 00:13:55,020
because of that so it can be used to

00:13:52,770 --> 00:13:57,000
tell you how look good you look to your

00:13:55,020 --> 00:13:58,620
customers or to your internal customers

00:13:57,000 --> 00:14:01,560
in case you are not software as a

00:13:58,620 --> 00:14:03,690
service company it can help you find the

00:14:01,560 --> 00:14:06,720
right place to look into the logs

00:14:03,690 --> 00:14:10,110
it can give you insights on all things

00:14:06,720 --> 00:14:12,960
and how they are behaving well

00:14:10,110 --> 00:14:15,570
primitives it's a quite popular tool

00:14:12,960 --> 00:14:19,470
nowadays but it started small originally

00:14:15,570 --> 00:14:21,360
at Sound Cloud as opposed to a singer it

00:14:19,470 --> 00:14:23,790
does the data collection via a pull

00:14:21,360 --> 00:14:27,540
model this has upsides and downsides the

00:14:23,790 --> 00:14:29,820
most known good side is scalability it

00:14:27,540 --> 00:14:32,880
tends to perform very well on large

00:14:29,820 --> 00:14:35,580
infrastructures you can also configure

00:14:32,880 --> 00:14:37,860
parameters to use service discovery this

00:14:35,580 --> 00:14:40,770
is something we are going to show on our

00:14:37,860 --> 00:14:44,010
demo later how this can be used to to

00:14:40,770 --> 00:14:46,140
automate your configuration and the

00:14:44,010 --> 00:14:48,420
matrix in primitives are very simple as

00:14:46,140 --> 00:14:51,060
you can see here there is name labels

00:14:48,420 --> 00:14:53,010
which you can customize the timestamp

00:14:51,060 --> 00:14:55,620
and the value which is always a float

00:14:53,010 --> 00:14:58,650
number so a metric is always a

00:14:55,620 --> 00:15:02,070
measurement of something exposing

00:14:58,650 --> 00:15:03,900
metrics in Prometheus in the ideal way

00:15:02,070 --> 00:15:06,000
should be done via instrumentation on

00:15:03,900 --> 00:15:08,970
your own applications this is not always

00:15:06,000 --> 00:15:11,550
possible so many times you have to use

00:15:08,970 --> 00:15:13,560
what we call the exporters which are

00:15:11,550 --> 00:15:16,170
tools that you install on your systems

00:15:13,560 --> 00:15:17,850
and that connect you your running

00:15:16,170 --> 00:15:19,530
services they give you insights about

00:15:17,850 --> 00:15:22,230
your hardware about your operating

00:15:19,530 --> 00:15:24,780
system and about your application stack

00:15:22,230 --> 00:15:27,180
there are dozens of exporters available

00:15:24,780 --> 00:15:29,190
upstream you probably you you'll find

00:15:27,180 --> 00:15:31,260
the exporter you need there if you don't

00:15:29,190 --> 00:15:33,840
it's also quite easy to build your own

00:15:31,260 --> 00:15:35,850
exporter you can do that on almost any

00:15:33,840 --> 00:15:38,400
language even a batch script can be used

00:15:35,850 --> 00:15:40,380
to build a simple exporter you just need

00:15:38,400 --> 00:15:41,990
to use that metric format and expose

00:15:40,380 --> 00:15:45,920
that on an HTTP endpoint

00:15:41,990 --> 00:15:48,170
and that's it Korean matrix is also one

00:15:45,920 --> 00:15:50,630
of the powerful aspects of perimeters

00:15:48,170 --> 00:15:52,970
mainly due to this query language from

00:15:50,630 --> 00:15:55,760
QL which is a functional language it's

00:15:52,970 --> 00:15:58,940
quite powerful to work with time series

00:15:55,760 --> 00:16:00,890
data bases it provides you building

00:15:58,940 --> 00:16:01,400
blocks for doing almost anything you can

00:16:00,890 --> 00:16:03,680
imagine

00:16:01,400 --> 00:16:06,320
obviously you reg X matching it allows

00:16:03,680 --> 00:16:08,720
you to do things like once we see here

00:16:06,320 --> 00:16:10,910
understand how matrix behave over time

00:16:08,720 --> 00:16:13,430
and it's used everywhere on all the

00:16:10,910 --> 00:16:15,410
interactions with parameters so if you

00:16:13,430 --> 00:16:17,120
design some panels in Griffin ax you'll

00:16:15,410 --> 00:16:20,240
use it if you define alerts you'll use

00:16:17,120 --> 00:16:23,990
it so it's one of the fundamental blocks

00:16:20,240 --> 00:16:26,240
of pre medias alerts are also built-in

00:16:23,990 --> 00:16:28,430
primitives via alert manager this is

00:16:26,240 --> 00:16:32,810
usually shipped as a separate package

00:16:28,430 --> 00:16:35,390
but it's part of the primitives offer it

00:16:32,810 --> 00:16:38,000
does everything you need about alerting

00:16:35,390 --> 00:16:42,170
routine duplication grouping etc it

00:16:38,000 --> 00:16:45,860
integrates with quite a few known ops

00:16:42,170 --> 00:16:47,570
tools and it has this client tool that

00:16:45,860 --> 00:16:50,120
you can use in case you want to

00:16:47,570 --> 00:16:53,630
customize how to handle your alerts so

00:16:50,120 --> 00:16:56,090
it's quite flexible and graph on ax it's

00:16:53,630 --> 00:16:57,830
super popular nowadays it's going to be

00:16:56,090 --> 00:17:00,530
even more popular since they recently

00:16:57,830 --> 00:17:02,660
got very nice funding round and

00:17:00,530 --> 00:17:04,520
hopefully they will increase their

00:17:02,660 --> 00:17:07,790
investment on the open source product

00:17:04,520 --> 00:17:11,630
let's hope that happens so it's used

00:17:07,790 --> 00:17:13,970
many many places as front-end for matrix

00:17:11,630 --> 00:17:16,190
it works with primitives but also with

00:17:13,970 --> 00:17:19,310
many other backends you can connect it

00:17:16,190 --> 00:17:21,110
to sequel databases you can connect it

00:17:19,310 --> 00:17:24,830
to influx DB which is also a popular

00:17:21,110 --> 00:17:27,380
option so it's really flexible and fully

00:17:24,830 --> 00:17:30,170
customizable so you already have a lot

00:17:27,380 --> 00:17:31,640
of options on the pre shaped panels you

00:17:30,170 --> 00:17:34,790
can build your own and you have a

00:17:31,640 --> 00:17:39,680
collection of dashboards upstream that

00:17:34,790 --> 00:17:41,720
serve a lot of use cases already then

00:17:39,680 --> 00:17:43,910
comes the question how to get started

00:17:41,720 --> 00:17:45,860
you know if you are new to all this

00:17:43,910 --> 00:17:48,020
you might ask which components do you

00:17:45,860 --> 00:17:50,450
need how do you configure primitives and

00:17:48,020 --> 00:17:52,640
refine it to work together how do you

00:17:50,450 --> 00:17:54,830
expose metrics on your systems how do

00:17:52,640 --> 00:17:55,580
you configure things how do you get

00:17:54,830 --> 00:17:56,990
started with

00:17:55,580 --> 00:18:02,510
building dashboards what should you put

00:17:56,990 --> 00:18:05,240
there and especially when it's at scale

00:18:02,510 --> 00:18:07,730
it becomes particularly challenged so on

00:18:05,240 --> 00:18:10,790
a data center with thousands of machines

00:18:07,730 --> 00:18:11,930
different operating systems VMs mixed

00:18:10,790 --> 00:18:14,570
with containers

00:18:11,930 --> 00:18:16,100
you know thousands sometimes hundreds of

00:18:14,570 --> 00:18:18,770
thousands of metrics coming from

00:18:16,100 --> 00:18:20,900
different sources you'll definitely want

00:18:18,770 --> 00:18:23,150
to automate this you don't want to be

00:18:20,900 --> 00:18:25,490
tweaking configuration manually every

00:18:23,150 --> 00:18:27,590
time you want to add a new group of

00:18:25,490 --> 00:18:32,090
machines or change your application

00:18:27,590 --> 00:18:36,310
stack on that group and that's where

00:18:32,090 --> 00:18:40,070
unique can help right you honest yes so

00:18:36,310 --> 00:18:41,510
here we can see a very simple example so

00:18:40,070 --> 00:18:43,190
yeah of course you can do all that

00:18:41,510 --> 00:18:47,180
manually like setting up Prometheus in

00:18:43,190 --> 00:18:48,860
kevanna and run the node exporter but in

00:18:47,180 --> 00:18:51,800
this picture you see basically very

00:18:48,860 --> 00:18:57,200
simple how it looks like so down here is

00:18:51,800 --> 00:19:00,260
base is the oud server and by applying

00:18:57,200 --> 00:19:02,390
salt States via formulas we can on on

00:19:00,260 --> 00:19:04,190
the right hand side for so those are two

00:19:02,390 --> 00:19:05,840
managed systems so we have all the

00:19:04,190 --> 00:19:07,580
information about the managed systems we

00:19:05,840 --> 00:19:09,200
can access them from uni we can run

00:19:07,580 --> 00:19:11,000
anything there we want we can install

00:19:09,200 --> 00:19:13,940
software and configure software

00:19:11,000 --> 00:19:16,360
especially so why not just let we uni

00:19:13,940 --> 00:19:18,320
set up a pro meteor server running

00:19:16,360 --> 00:19:20,990
Prometheus and graph on ax on one

00:19:18,320 --> 00:19:22,040
machine and the node exporter on the

00:19:20,990 --> 00:19:25,220
other machine

00:19:22,040 --> 00:19:29,780
so because oops this is the machine that

00:19:25,220 --> 00:19:32,750
we want to have monitored so from here

00:19:29,780 --> 00:19:35,920
we can just run a formula configure the

00:19:32,750 --> 00:19:38,860
port that metrics should be exposed and

00:19:35,920 --> 00:19:41,690
on top of that we have implemented some

00:19:38,860 --> 00:19:43,850
custom service discovery to basically

00:19:41,690 --> 00:19:47,390
discover the monitored systems from

00:19:43,850 --> 00:19:49,730
uyuni so while this is still a work in

00:19:47,390 --> 00:19:52,730
progress we have a working patch and we

00:19:49,730 --> 00:19:54,500
already shipping it but we are still

00:19:52,730 --> 00:19:57,320
pending to upstream it to prometheus

00:19:54,500 --> 00:19:59,870
community but that's on our to-do list

00:19:57,320 --> 00:20:01,220
at the moment so it's just not ready yet

00:19:59,870 --> 00:20:05,320
but in the end

00:20:01,220 --> 00:20:08,090
Prometheus by itself will find out the

00:20:05,320 --> 00:20:09,799
configuration of the monitored systems

00:20:08,090 --> 00:20:11,509
and will configure itself by

00:20:09,799 --> 00:20:15,499
the information it gets from the unis

00:20:11,509 --> 00:20:17,450
server via the API so how are we going

00:20:15,499 --> 00:20:20,059
to set up the monitoring environment

00:20:17,450 --> 00:20:22,249
also in the upcoming demo so we will

00:20:20,059 --> 00:20:23,720
provision and configure parameters and

00:20:22,249 --> 00:20:26,539
graph on on one of the managed systems

00:20:23,720 --> 00:20:28,249
there is also pre build dashboards for

00:20:26,539 --> 00:20:30,679
guevara that can be deployed together

00:20:28,249 --> 00:20:34,090
with the provisioning but of course you

00:20:30,679 --> 00:20:37,850
can customize those as much as you want

00:20:34,090 --> 00:20:40,700
exporters on manage clients are enabled

00:20:37,850 --> 00:20:45,649
also by a separate formula we will show

00:20:40,700 --> 00:20:47,779
you and for supporting large scales it's

00:20:45,649 --> 00:20:49,519
possible to group systems together and

00:20:47,779 --> 00:20:52,220
create common monitoring configurations

00:20:49,519 --> 00:20:55,309
so you can have a group of let's say web

00:20:52,220 --> 00:20:57,259
servers or databases and they might want

00:20:55,309 --> 00:20:58,940
to run different exporters you might

00:20:57,259 --> 00:21:01,159
want to have a patchy exporter on one

00:20:58,940 --> 00:21:05,320
group Postgres exporter on the other

00:21:01,159 --> 00:21:08,149
group and all that is supported by uni

00:21:05,320 --> 00:21:09,559
service discovery as mentioned before so

00:21:08,149 --> 00:21:11,389
there's no need to manually configure

00:21:09,559 --> 00:21:13,429
the primitive server in this scenario

00:21:11,389 --> 00:21:17,299
because there's service discovery that

00:21:13,429 --> 00:21:19,039
will figure it out by itself and last

00:21:17,299 --> 00:21:21,859
but not least it's reproducible so in

00:21:19,039 --> 00:21:23,989
case you just want another monitoring

00:21:21,859 --> 00:21:26,899
server you can just apply your state's

00:21:23,989 --> 00:21:31,190
to another managed system and reproduce

00:21:26,899 --> 00:21:35,059
your environment okay and from here we

00:21:31,190 --> 00:21:36,730
would now try to demo this so let's see

00:21:35,059 --> 00:21:42,009
how it goes

00:21:36,730 --> 00:21:45,710
yeah let's just go and see how it goes

00:21:42,009 --> 00:21:47,600
ok so we have a unique year that's the

00:21:45,710 --> 00:21:49,249
I'm just going to show you some of the

00:21:47,600 --> 00:21:52,369
basic features and then pass it or pass

00:21:49,249 --> 00:21:56,239
it back to Joe for the monitoring setup

00:21:52,369 --> 00:22:01,359
so this is basically how the login page

00:21:56,239 --> 00:22:03,799
looks like so as we mentioned before

00:22:01,359 --> 00:22:06,679
there's a lot of features in uni

00:22:03,799 --> 00:22:09,080
monitoring is not our main business you

00:22:06,679 --> 00:22:12,109
know so we do data center management and

00:22:09,080 --> 00:22:14,779
monitoring is of course an important

00:22:12,109 --> 00:22:16,309
part of it and that's also why we are

00:22:14,779 --> 00:22:19,429
working on monitoring but we have a lot

00:22:16,309 --> 00:22:21,440
of other things here in uyuni as well

00:22:19,429 --> 00:22:23,360
and we cannot go through all the through

00:22:21,440 --> 00:22:25,520
all of the features right now

00:22:23,360 --> 00:22:28,460
so I will just show you some of the

00:22:25,520 --> 00:22:31,610
basic things and those that we need for

00:22:28,460 --> 00:22:34,580
the monitoring setup so for this

00:22:31,610 --> 00:22:36,970
environment it's not a large large scale

00:22:34,580 --> 00:22:39,890
but it's the largest scale that we could

00:22:36,970 --> 00:22:41,900
come up with at the moment so I think we

00:22:39,890 --> 00:22:46,760
have at least if we look at the list of

00:22:41,900 --> 00:22:50,230
systems we have 136 systems registered

00:22:46,760 --> 00:22:52,090
at the moment so those have different

00:22:50,230 --> 00:22:54,830
those are running different

00:22:52,090 --> 00:22:57,650
distributions like we have openSUSE we

00:22:54,830 --> 00:22:59,840
have a lot of 10 2's here but I think we

00:22:57,650 --> 00:23:05,030
also have a boon to somewhere down in

00:22:59,840 --> 00:23:08,000
the list so just to show you that

00:23:05,030 --> 00:23:09,830
there's different good 218 you know we

00:23:08,000 --> 00:23:13,490
have a couple of Ubuntu 18 systems here

00:23:09,830 --> 00:23:16,280
so let's go back to the dashboard so

00:23:13,490 --> 00:23:20,270
let's look at one of the critical

00:23:16,280 --> 00:23:22,429
systems so our server for this demo has

00:23:20,270 --> 00:23:24,559
limited capacity so we could not really

00:23:22,429 --> 00:23:26,299
zinc all the contents so only open zoo

00:23:24,559 --> 00:23:28,370
the systems at the moment have real

00:23:26,299 --> 00:23:30,620
patches available so looking at this

00:23:28,370 --> 00:23:33,230
machine for example you can see that for

00:23:30,620 --> 00:23:35,030
this system there's a 38 critical

00:23:33,230 --> 00:23:36,230
patches available a couple of

00:23:35,030 --> 00:23:38,210
non-critical ones

00:23:36,230 --> 00:23:40,700
package updates you see some basic

00:23:38,210 --> 00:23:44,960
information here but also we have all

00:23:40,700 --> 00:23:47,840
the hardware information for this VM all

00:23:44,960 --> 00:23:50,299
is gathered via salt on the registration

00:23:47,840 --> 00:23:52,130
and all the and all the software as well

00:23:50,299 --> 00:23:54,200
so if you go here you can see all the

00:23:52,130 --> 00:23:59,770
installed software but also you can

00:23:54,200 --> 00:24:02,990
upgrade packages install new packages

00:23:59,770 --> 00:24:06,200
and those kind of things so how would I

00:24:02,990 --> 00:24:08,570
get how would I put my system into uni

00:24:06,200 --> 00:24:11,570
so there's different ways to do that but

00:24:08,570 --> 00:24:14,030
most easy way probably is to use the UI

00:24:11,570 --> 00:24:15,620
for that so there's a bootstrapping UI

00:24:14,030 --> 00:24:17,840
that you can use to boost wrap your

00:24:15,620 --> 00:24:19,490
systems to connect them with uni it's

00:24:17,840 --> 00:24:23,419
basically in the background what will

00:24:19,490 --> 00:24:25,610
happen who uni will login by us all SSH

00:24:23,419 --> 00:24:27,620
and we'll set up the minion to connect

00:24:25,610 --> 00:24:29,240
back to the master so basically your uni

00:24:27,620 --> 00:24:30,950
server is running this old master and

00:24:29,240 --> 00:24:33,080
every managed system is running the

00:24:30,950 --> 00:24:34,910
minion and all the actions that who uni

00:24:33,080 --> 00:24:37,250
is doing in the background are

00:24:34,910 --> 00:24:39,440
implemented with salt States

00:24:37,250 --> 00:24:42,710
so here it would be enough to put your

00:24:39,440 --> 00:24:46,010
hostname SSH port use a password and

00:24:42,710 --> 00:24:47,900
that would do all the trick if that is

00:24:46,010 --> 00:24:50,809
not good for you you can also just go to

00:24:47,900 --> 00:24:54,049
that system and run the minion manually

00:24:50,809 --> 00:24:56,419
and then accept the key on the server

00:24:54,049 --> 00:24:58,190
side with this Keys UI so there's a this

00:24:56,419 --> 00:25:01,100
is the front end to the salt key command

00:24:58,190 --> 00:25:04,580
so you can deny keys accept keys and so

00:25:01,100 --> 00:25:07,490
on what else can you do from this UI is

00:25:04,580 --> 00:25:09,500
for example running remote commands on

00:25:07,490 --> 00:25:14,140
couple of systems so I think there were

00:25:09,500 --> 00:25:20,049
some Metallica systems here so let's see

00:25:14,140 --> 00:25:25,970
if we can actually find find those sorry

00:25:20,049 --> 00:25:30,669
yeah that should be fine actually no or

00:25:25,970 --> 00:25:34,580
don't we have Metallica systems we just

00:25:30,669 --> 00:25:39,409
just remove the star because there is

00:25:34,580 --> 00:25:41,169
nothing before that okay I don't know

00:25:39,409 --> 00:25:57,320
why it's not working maybe you can try

00:25:41,169 --> 00:26:02,030
try with ac/dc okay so we have some

00:25:57,320 --> 00:26:05,120
ac/dc systems 48 ac/dc systems if we run

00:26:02,030 --> 00:26:07,309
this LS command on those it might take a

00:26:05,120 --> 00:26:11,840
while but as you can see responses are

00:26:07,309 --> 00:26:15,950
coming and that's how it looks like okay

00:26:11,840 --> 00:26:24,020
this is just an example I want to go

00:26:15,950 --> 00:26:26,450
back to this Metallica system sorry and

00:26:24,020 --> 00:26:31,190
you know just to quickly show you the

00:26:26,450 --> 00:26:32,870
states there is a States top here and it

00:26:31,190 --> 00:26:35,000
will calculate the high state for this

00:26:32,870 --> 00:26:37,760
system basically this the high state is

00:26:35,000 --> 00:26:39,500
what is the combined state of all the

00:26:37,760 --> 00:26:42,950
states assigned to a single system and

00:26:39,500 --> 00:26:47,090
here you will see what is the state in

00:26:42,950 --> 00:26:48,740
in a yummy format right so it's not it's

00:26:47,090 --> 00:26:51,260
it's it's readable but it's not super

00:26:48,740 --> 00:26:54,680
nice to read in this format

00:26:51,260 --> 00:26:56,750
what is included here is especially the

00:26:54,680 --> 00:26:59,360
custom configuration that you might want

00:26:56,750 --> 00:27:01,550
to create for your systems so if we go

00:26:59,360 --> 00:27:03,770
to the catalog on this machine we have

00:27:01,550 --> 00:27:06,110
prepared states for setting up Apache

00:27:03,770 --> 00:27:09,110
and Postgres databases so how does it

00:27:06,110 --> 00:27:11,240
look like for Apache for example so this

00:27:09,110 --> 00:27:14,930
is a simply state to set up Apache on

00:27:11,240 --> 00:27:17,150
one of the machines so ya package needs

00:27:14,930 --> 00:27:22,640
to be installed the service should be

00:27:17,150 --> 00:27:25,910
running and that's it mostly and similar

00:27:22,640 --> 00:27:27,650
it looks for PostgreSQL where it is a

00:27:25,910 --> 00:27:31,100
bit more complex because you also want

00:27:27,650 --> 00:27:35,840
to create a database and some

00:27:31,100 --> 00:27:38,210
configuration okay and if I want this to

00:27:35,840 --> 00:27:40,100
be applied to be included in the state

00:27:38,210 --> 00:27:44,840
of this system I would just assign it

00:27:40,100 --> 00:27:46,700
with this check box we are there is also

00:27:44,840 --> 00:27:49,280
the formulas that I mentioned before so

00:27:46,700 --> 00:27:52,780
those are basically configurable states

00:27:49,280 --> 00:27:56,090
that we are shipping as packages and

00:27:52,780 --> 00:27:57,559
there's also UI support so this is the

00:27:56,090 --> 00:27:59,840
current list of formulas that we are

00:27:57,559 --> 00:28:02,929
shipping and as you can see here below

00:27:59,840 --> 00:28:05,630
especially there is a monitoring stack

00:28:02,929 --> 00:28:08,000
of formulas to set up all the things we

00:28:05,630 --> 00:28:12,740
need and Joe will now show you how it

00:28:08,000 --> 00:28:16,240
looks like how it works thanks Yanis so

00:28:12,740 --> 00:28:19,130
the first thing we usually want to do is

00:28:16,240 --> 00:28:21,620
say setting up our monitoring server if

00:28:19,130 --> 00:28:24,320
we are starting from scratch I'll pick

00:28:21,620 --> 00:28:30,679
this guy here which has a fancy name for

00:28:24,320 --> 00:28:37,790
surveillance and I'll set up Prometheus

00:28:30,679 --> 00:28:41,690
and Griffin are there ready checked ok

00:28:37,790 --> 00:28:43,490
so what things do I want to do if you're

00:28:41,690 --> 00:28:45,440
familiar with primitives configuration

00:28:43,490 --> 00:28:49,010
you might know some of the fields here

00:28:45,440 --> 00:28:53,179
except this one this is actually the

00:28:49,010 --> 00:28:55,790
configuration for the Uni server API so

00:28:53,179 --> 00:28:58,640
we have the credentials just double

00:28:55,790 --> 00:29:01,070
checking if the password is ok we have

00:28:58,640 --> 00:29:04,370
the option to enable alert manager

00:29:01,070 --> 00:29:08,480
service we can deploy some alert

00:29:04,370 --> 00:29:10,670
rules here although on the UI you can't

00:29:08,480 --> 00:29:12,020
enter the alert rules directly here they

00:29:10,670 --> 00:29:13,970
have to be deployed by a configuration

00:29:12,020 --> 00:29:15,440
management this is something we are

00:29:13,970 --> 00:29:17,570
working on at the moment to have the

00:29:15,440 --> 00:29:19,730
rules directly here so you can configure

00:29:17,570 --> 00:29:22,280
it all together you can also add some

00:29:19,730 --> 00:29:25,670
extra script configurations for file

00:29:22,280 --> 00:29:28,220
based discovery in case you want for now

00:29:25,670 --> 00:29:32,809
we'll just deploy a simple configuration

00:29:28,220 --> 00:29:36,230
with Prometheus we also want a refiner

00:29:32,809 --> 00:29:38,090
there in case of Griffon I'll just use

00:29:36,230 --> 00:29:40,580
default settings since Prometheus is

00:29:38,090 --> 00:29:42,410
running on the same host we have the

00:29:40,580 --> 00:29:44,510
sample dashboards here that we'll want

00:29:42,410 --> 00:29:46,850
to deploy so the server monitoring

00:29:44,510 --> 00:29:50,270
itself we have the Uyuni server monitor

00:29:46,850 --> 00:29:53,120
it a dashboard for clients and one for

00:29:50,270 --> 00:29:54,800
Postgres sequel there is another one for

00:29:53,120 --> 00:29:56,750
Apache that you'll see der which is

00:29:54,800 --> 00:29:59,870
still not included here on the UI

00:29:56,750 --> 00:30:02,990
whether that is going to be deployed on

00:29:59,870 --> 00:30:05,809
that server as well and we also want to

00:30:02,990 --> 00:30:07,940
have the monitoring server itself

00:30:05,809 --> 00:30:09,350
monitor it so we want to run nor

00:30:07,940 --> 00:30:11,690
exporter there with the default

00:30:09,350 --> 00:30:13,700
configuration here you can change the

00:30:11,690 --> 00:30:17,660
ports in case you need this might be

00:30:13,700 --> 00:30:23,559
relevant on some infrastructures so

00:30:17,660 --> 00:30:23,559
let's save this let's apply the hi state

00:30:28,420 --> 00:30:36,190
and hopefully soon we will have our

00:30:32,500 --> 00:30:36,190
monitoring server running

00:30:54,650 --> 00:31:05,010
still in progress all this okay in the

00:31:01,200 --> 00:31:09,150
meantime I will show you a bit more

00:31:05,010 --> 00:31:11,640
about the configuration and what we will

00:31:09,150 --> 00:31:14,520
do next which will be creating a group

00:31:11,640 --> 00:31:19,550
of Apache servers and Postgres servers

00:31:14,520 --> 00:31:22,680
and also enable the monitoring on those

00:31:19,550 --> 00:31:28,980
so you can see here on this post gray

00:31:22,680 --> 00:31:31,830
one that we have basic settings and a

00:31:28,980 --> 00:31:33,690
database that will be created so I can

00:31:31,830 --> 00:31:35,010
run a load test on this database and you

00:31:33,690 --> 00:31:38,540
can see what is happening on the

00:31:35,010 --> 00:31:38,540
Postgres server in real-time so

00:31:39,290 --> 00:31:47,730
hopefully you know our Prometheus is

00:31:43,140 --> 00:31:52,290
already running yes it's up let's see

00:31:47,730 --> 00:31:54,030
what we have here okay so it's all up

00:31:52,290 --> 00:31:57,330
and running we have the monitoring

00:31:54,030 --> 00:31:59,520
server itself we have the Uni server you

00:31:57,330 --> 00:32:01,800
can notice here we added some custom

00:31:59,520 --> 00:32:04,440
labels since the ports are configurable

00:32:01,800 --> 00:32:06,810
you might have situations where you want

00:32:04,440 --> 00:32:08,370
to use a different port for your node

00:32:06,810 --> 00:32:11,490
exporter or for any of the other

00:32:08,370 --> 00:32:14,430
exporters and on most dashboards the

00:32:11,490 --> 00:32:17,480
filtering is done by port so dashboards

00:32:14,430 --> 00:32:20,280
assume that your exporter is on port

00:32:17,480 --> 00:32:22,710
9/100 since that might not be the case

00:32:20,280 --> 00:32:25,200
we added a label here called exporter

00:32:22,710 --> 00:32:27,510
which identifies which exporter this

00:32:25,200 --> 00:32:29,130
belongs to in case you have different

00:32:27,510 --> 00:32:31,770
exporters with the same metric names

00:32:29,130 --> 00:32:34,050
this will allow for filtering you also

00:32:31,770 --> 00:32:36,960
have a label for the group this system

00:32:34,050 --> 00:32:39,450
belongs to inside uyuni so you can then

00:32:36,960 --> 00:32:41,940
in grow fauna define your dashboards

00:32:39,450 --> 00:32:44,220
based on the same grouping structure you

00:32:41,940 --> 00:32:46,800
have a host name since we are doing this

00:32:44,220 --> 00:32:49,800
great by IP address and you have the

00:32:46,800 --> 00:32:53,700
default parameters fields the job and

00:32:49,800 --> 00:32:57,150
instance here we also have the server

00:32:53,700 --> 00:33:00,260
endpoints now let's see if graph on ax

00:32:57,150 --> 00:33:00,260
is also okay

00:33:05,350 --> 00:33:21,170
okay

00:33:06,590 --> 00:33:23,330
it starts quick look on the server so we

00:33:21,170 --> 00:33:27,140
just started collecting metrics so there

00:33:23,330 --> 00:33:29,840
is no history here this is some basic

00:33:27,140 --> 00:33:34,340
information about what is running on the

00:33:29,840 --> 00:33:37,000
server and we can already see what is

00:33:34,340 --> 00:33:39,500
happening on one of our client systems

00:33:37,000 --> 00:33:42,380
which is the monitoring server only at

00:33:39,500 --> 00:33:44,390
this moment so we have a basic dashboard

00:33:42,380 --> 00:33:46,520
here this is the sample dashboard we

00:33:44,390 --> 00:33:50,260
deploy you can customize it for for your

00:33:46,520 --> 00:33:52,600
needs and now what we want to do next is

00:33:50,260 --> 00:33:59,810
monitor more systems right

00:33:52,600 --> 00:34:02,030
so to avoid monitoring to a system you

00:33:59,810 --> 00:34:07,340
just need to go to that system I'll go

00:34:02,030 --> 00:34:13,700
to the CDC one and I will enable the

00:34:07,340 --> 00:34:15,860
node exporter there so I want to keep

00:34:13,700 --> 00:34:27,590
the default port nothing to be changed

00:34:15,860 --> 00:34:30,470
here so I'll just apply ok and I will

00:34:27,590 --> 00:34:31,970
apply the hi state this guy should show

00:34:30,470 --> 00:34:34,910
up here soon

00:34:31,970 --> 00:34:37,340
our current service discovery is

00:34:34,910 --> 00:34:39,740
configured to Paul the server every 30

00:34:37,340 --> 00:34:44,090
seconds maybe in production you want to

00:34:39,740 --> 00:34:47,810
use a larger interval so it shows up as

00:34:44,090 --> 00:34:50,950
unknown ok it's already up so we have

00:34:47,810 --> 00:34:50,950
this system here

00:34:55,320 --> 00:35:01,640
and it's also in gravina now let's do

00:34:58,860 --> 00:35:07,320
something a bit more fancy let's enable

00:35:01,640 --> 00:35:10,710
monitoring on a big group so we have our

00:35:07,320 --> 00:35:13,050
test hosts group with which has 125

00:35:10,710 --> 00:35:25,740
systems let's see what happens when we

00:35:13,050 --> 00:35:28,080
enable monitoring on all of them few

00:35:25,740 --> 00:35:40,080
more seconds it's figuring the formulas

00:35:28,080 --> 00:35:42,600
on all the systems so that formula

00:35:40,080 --> 00:35:46,140
supports only three exporters at the

00:35:42,600 --> 00:35:47,940
moment as you can see but it's we are

00:35:46,140 --> 00:35:50,580
working on extending this list and it's

00:35:47,940 --> 00:35:52,800
also easy to extend it because you only

00:35:50,580 --> 00:35:55,320
need to write some more salt states and

00:35:52,800 --> 00:35:58,050
we're also looking for contributions in

00:35:55,320 --> 00:35:59,730
this regard so if anyone needs a certain

00:35:58,050 --> 00:36:01,440
exporter there we have a public

00:35:59,730 --> 00:36:07,530
repository where we would accept to

00:36:01,440 --> 00:36:09,780
request on that ok and now we just need

00:36:07,530 --> 00:36:16,770
to apply the hi state on all those

00:36:09,780 --> 00:36:20,070
systems ok the high state has been

00:36:16,770 --> 00:36:23,100
scheduled so they should start showing

00:36:20,070 --> 00:36:24,270
up in prometheus the total list appears

00:36:23,100 --> 00:36:26,370
immediately because the service

00:36:24,270 --> 00:36:28,140
discovery identifies those systems are

00:36:26,370 --> 00:36:30,600
now monetary then they will slowly start

00:36:28,140 --> 00:36:34,340
showing as up as the node exporter gets

00:36:30,600 --> 00:36:41,300
installed and enabled on those systems

00:36:34,340 --> 00:36:50,670
ok this was fast they are all up 126 and

00:36:41,300 --> 00:36:52,650
now if we refresh it here we see all our

00:36:50,670 --> 00:36:54,840
systems in graph Anna in this case this

00:36:52,650 --> 00:36:56,580
is a very large group you might want to

00:36:54,840 --> 00:36:58,470
have smaller groups for easier

00:36:56,580 --> 00:37:01,050
navigation in Griffin but you can see

00:36:58,470 --> 00:37:05,120
that instantly all the systems now show

00:37:01,050 --> 00:37:05,120
up here you can pick any of them

00:37:06,220 --> 00:37:09,940
and see what is happening there so we

00:37:08,320 --> 00:37:12,130
just started collecting insights there

00:37:09,940 --> 00:37:14,080
is no history still you can see some

00:37:12,130 --> 00:37:16,720
basic information about what is going on

00:37:14,080 --> 00:37:19,990
there now the next thing I would like to

00:37:16,720 --> 00:37:23,220
show you is how to monitor an

00:37:19,990 --> 00:37:27,370
application stack and for that purpose

00:37:23,220 --> 00:37:32,350
I'll use a system that I group of

00:37:27,370 --> 00:37:35,560
systems that I have here and I call them

00:37:32,350 --> 00:37:37,780
database servers and I want this set of

00:37:35,560 --> 00:37:40,600
systems to run post gray and to have

00:37:37,780 --> 00:37:43,270
post gray monitor it so what I'll do

00:37:40,600 --> 00:37:45,550
first is to assign a configuration

00:37:43,270 --> 00:37:54,840
channel to this systems so that they get

00:37:45,550 --> 00:37:59,550
configured to run post grim okay and I

00:37:54,840 --> 00:38:04,750
want them monitor it so I want to enable

00:37:59,550 --> 00:38:07,800
from ETS exporters and I want in this

00:38:04,750 --> 00:38:11,830
case you have no exporter personally and

00:38:07,800 --> 00:38:14,980
also post gray exporter the test that

00:38:11,830 --> 00:38:17,020
database I have created on the

00:38:14,980 --> 00:38:20,710
configuration state is called Red Queen

00:38:17,020 --> 00:38:23,320
so I configure the post gray exporters

00:38:20,710 --> 00:38:26,680
to access that database also the

00:38:23,320 --> 00:38:28,360
configuration was set to use password

00:38:26,680 --> 00:38:31,870
authentication instead of Eden so I need

00:38:28,360 --> 00:38:37,480
to put the IP address here for the local

00:38:31,870 --> 00:38:41,280
hosts the database is also called Red

00:38:37,480 --> 00:38:44,470
Queen I will use the default listen port

00:38:41,280 --> 00:38:46,960
I'll save the formula and hopefully when

00:38:44,470 --> 00:38:50,200
I apply the hi state this machines will

00:38:46,960 --> 00:38:51,820
be running Postgres equal and we'll have

00:38:50,200 --> 00:38:54,750
monitoring there as well you can show

00:38:51,820 --> 00:38:54,750
how it looks like in the state

00:39:07,480 --> 00:39:12,680
okay so we are requesting a post gray

00:39:10,880 --> 00:39:14,480
and post-classical server to be

00:39:12,680 --> 00:39:17,180
installed like the packages to be

00:39:14,480 --> 00:39:19,760
installed the Postgres equals server to

00:39:17,180 --> 00:39:23,450
be running those are the custom files we

00:39:19,760 --> 00:39:25,700
are deploying to allow post-career to

00:39:23,450 --> 00:39:27,920
receive connections from the outside we

00:39:25,700 --> 00:39:30,560
are also setting up the data directory

00:39:27,920 --> 00:39:33,830
it is standard procedure a new post gray

00:39:30,560 --> 00:39:38,450
installation and we are setting up user

00:39:33,830 --> 00:39:39,110
and database okay let's see how this

00:39:38,450 --> 00:39:44,540
goes

00:39:39,110 --> 00:39:47,180
I'll apply the hi state now this should

00:39:44,540 --> 00:39:51,380
be installing things on those machines

00:39:47,180 --> 00:39:53,300
and soon those show should show up here

00:39:51,380 --> 00:39:57,190
in the list of targets okay we have more

00:39:53,300 --> 00:39:59,690
targets now and as the hi state

00:39:57,190 --> 00:40:03,820
application completes we should not only

00:39:59,690 --> 00:40:09,290
have post-classical running but also

00:40:03,820 --> 00:40:10,940
having it monitor it and for that in

00:40:09,290 --> 00:40:13,640
Griffin oh we also have this dashboard

00:40:10,940 --> 00:40:19,580
that we deploy together with tigre final

00:40:13,640 --> 00:40:23,840
configuration okay we are ready see our

00:40:19,580 --> 00:40:26,860
servers here still no insights this is

00:40:23,840 --> 00:40:26,860
still running

00:40:38,220 --> 00:40:43,560
no it's finished okay it's not finished

00:40:44,490 --> 00:40:50,380
okay and it seems we start to have some

00:40:47,770 --> 00:40:52,600
insights here nothing is happening on

00:40:50,380 --> 00:40:54,090
this database so let's put in some load

00:40:52,600 --> 00:40:57,340
to see what happens

00:40:54,090 --> 00:41:06,460
have a load generation script here

00:40:57,340 --> 00:41:10,150
somewhere this will just generate random

00:41:06,460 --> 00:41:13,600
insert update and delete statements so

00:41:10,150 --> 00:41:14,910
that we can see here in a couple of

00:41:13,600 --> 00:41:17,260
seconds okay

00:41:14,910 --> 00:41:19,270
we have a spike here I'll leave this

00:41:17,260 --> 00:41:21,880
running so we can see the graphs with

00:41:19,270 --> 00:41:24,010
more composed a bit later so this has

00:41:21,880 --> 00:41:25,600
only some basic information about what

00:41:24,010 --> 00:41:28,690
is happening on post grades something

00:41:25,600 --> 00:41:30,970
you can customize to your needs and the

00:41:28,690 --> 00:41:35,170
second example I want to quickly show

00:41:30,970 --> 00:41:38,230
you is about Apache so we might also

00:41:35,170 --> 00:41:47,770
want to set up an Apache cluster so I

00:41:38,230 --> 00:41:51,100
have this other group here hold our web

00:41:47,770 --> 00:41:54,040
servers and the procedure is going to be

00:41:51,100 --> 00:41:57,100
similar so in this case I want to assign

00:41:54,040 --> 00:41:59,170
the Apache configuration channel to this

00:41:57,100 --> 00:42:08,980
guy's okay

00:41:59,170 --> 00:42:16,080
Apache - I want to enable the monitoring

00:42:08,980 --> 00:42:19,390
formula so again we want in or exporter

00:42:16,080 --> 00:42:21,370
and we also want the Apache exporter

00:42:19,390 --> 00:42:23,950
here with the default settings it will

00:42:21,370 --> 00:42:25,780
just connect to Apache Apache needs to

00:42:23,950 --> 00:42:27,700
have mod status running for this

00:42:25,780 --> 00:42:33,540
exporter to work which is already part

00:42:27,700 --> 00:42:37,900
of our configuration safety formula and

00:42:33,540 --> 00:42:39,790
okay apply the high state again okay

00:42:37,900 --> 00:42:43,570
I'll show you what this high state will

00:42:39,790 --> 00:42:47,550
do here this one is a bit simpler than

00:42:43,570 --> 00:42:50,440
the post gray ones so it requires that

00:42:47,550 --> 00:42:51,520
Apache - and the example pages are

00:42:50,440 --> 00:42:53,590
installed the example

00:42:51,520 --> 00:42:56,230
pages here is just so that if we want we

00:42:53,590 --> 00:42:58,930
can do a coral to the Apache host and

00:42:56,230 --> 00:43:02,590
see that is actually replying to to our

00:42:58,930 --> 00:43:05,470
requests we have mod status installs so

00:43:02,590 --> 00:43:08,350
salt supports managing Apache components

00:43:05,470 --> 00:43:11,410
directly you don't need to call commands

00:43:08,350 --> 00:43:13,510
or edit configuration files can just do

00:43:11,410 --> 00:43:15,820
it all through salt and we want the

00:43:13,510 --> 00:43:18,160
service to be running everything seems

00:43:15,820 --> 00:43:22,690
to be ok here so I'll apply the high

00:43:18,160 --> 00:43:26,770
state and again how our targets should

00:43:22,690 --> 00:43:30,670
show up soon here in prometheus okay

00:43:26,770 --> 00:43:32,260
they are already here and okay

00:43:30,670 --> 00:43:36,010
as you can see we have some stuff

00:43:32,260 --> 00:43:46,330
happening on both Graham let's see about

00:43:36,010 --> 00:43:49,350
Apache okay still no data points it

00:43:46,330 --> 00:43:49,350
seems to be running

00:43:50,970 --> 00:43:59,080
let's give it a minute so that we get

00:43:54,190 --> 00:44:01,420
some data there some other thing you

00:43:59,080 --> 00:44:04,000
might ask is what if I want to have my

00:44:01,420 --> 00:44:06,040
systems automatically monitored

00:44:04,000 --> 00:44:08,110
when I own Borden that is that is also

00:44:06,040 --> 00:44:11,140
possible so whenever you want a new

00:44:08,110 --> 00:44:14,680
system here you can have it configured

00:44:11,140 --> 00:44:20,590
to automatically get monitoring so let's

00:44:14,680 --> 00:44:23,680
do that I'll go here to one of my

00:44:20,590 --> 00:44:26,280
activation keys activation keys is a

00:44:23,680 --> 00:44:28,660
simple concept that defines which

00:44:26,280 --> 00:44:30,910
repositories and configuration the

00:44:28,660 --> 00:44:35,950
system should get when when it is on

00:44:30,910 --> 00:44:38,920
board so I'll just go here to my centers

00:44:35,950 --> 00:44:42,130
key and I'll say that okay it's already

00:44:38,920 --> 00:44:45,100
enabled so this means that all the

00:44:42,130 --> 00:44:49,570
systems that I onboard from now on we'll

00:44:45,100 --> 00:44:52,210
get monitoring automatically the basic

00:44:49,570 --> 00:44:56,410
default configuration for monitoring

00:44:52,210 --> 00:44:59,470
which includes node exporter ok so let's

00:44:56,410 --> 00:45:04,560
see what happens I'll try to create and

00:44:59,470 --> 00:45:04,560
onboards a new CentOS minion

00:45:10,490 --> 00:45:17,010
this is a simple script that will create

00:45:13,700 --> 00:45:21,120
KVM virtual machine and we'll call you

00:45:17,010 --> 00:45:24,120
uni API to onboard the system so it has

00:45:21,120 --> 00:45:28,370
the key ID here it has the server

00:45:24,120 --> 00:45:34,350
address it has the image we want to use

00:45:28,370 --> 00:45:36,030
okay usually if you already have a

00:45:34,350 --> 00:45:38,220
machine you don't need such a script you

00:45:36,030 --> 00:45:41,880
can just run sword minion or use the UI

00:45:38,220 --> 00:45:43,860
that I was showing before exactly this

00:45:41,880 --> 00:45:50,460
is just for automating things on the

00:45:43,860 --> 00:45:54,270
demo okay it's creating the VM in the

00:45:50,460 --> 00:45:56,250
meantime let's see okay we already have

00:45:54,270 --> 00:45:57,210
something happening here on our Apache

00:45:56,250 --> 00:45:59,940
servers

00:45:57,210 --> 00:46:02,610
I have no load a generation script for

00:45:59,940 --> 00:46:04,590
this one so there will be nothing fancy

00:46:02,610 --> 00:46:07,320
fancy happening on the graphs but still

00:46:04,590 --> 00:46:15,680
you can see some basic insights on what

00:46:07,320 --> 00:46:19,320
your Apache 2 servers are doing ok and

00:46:15,680 --> 00:46:21,330
now we just need to wait for this

00:46:19,320 --> 00:46:22,890
machine to complete it on boarding the

00:46:21,330 --> 00:46:26,340
VM is created so it's now being

00:46:22,890 --> 00:46:29,400
processed in the background and soon we

00:46:26,340 --> 00:46:40,830
will have on the UI in the meantime are

00:46:29,400 --> 00:46:44,670
there any questions you have so far well

00:46:40,830 --> 00:46:47,970
there are some reasons for that but it's

00:46:44,670 --> 00:46:50,250
mainly because of the way it works so as

00:46:47,970 --> 00:46:52,740
it all works via SSH

00:46:50,250 --> 00:46:54,960
so opens all the connections from the

00:46:52,740 --> 00:46:58,940
server which in terms of scalability

00:46:54,960 --> 00:47:02,670
might have a disadvantage over salt and

00:46:58,940 --> 00:47:04,710
salt also supports access via SSH in

00:47:02,670 --> 00:47:06,660
case you want to work the other way

00:47:04,710 --> 00:47:10,110
around so in that regard it is more

00:47:06,660 --> 00:47:13,340
flexible and one other reason it's the

00:47:10,110 --> 00:47:16,620
way the states are defined the syntax of

00:47:13,340 --> 00:47:18,010
salt configuration itself which we find

00:47:16,620 --> 00:47:20,560
to be a bit more

00:47:18,010 --> 00:47:22,750
appealing to use and if you already have

00:47:20,560 --> 00:47:26,800
an answerable environment so even

00:47:22,750 --> 00:47:29,980
supports to run and play books via salt

00:47:26,800 --> 00:47:34,680
so you could reuse your playbooks while

00:47:29,980 --> 00:47:37,360
migrating to a salt environment the SSH

00:47:34,680 --> 00:47:38,680
protocol for us for our customers is

00:47:37,360 --> 00:47:41,020
important when you want to manage

00:47:38,680 --> 00:47:43,750
systems that cannot connect to the

00:47:41,020 --> 00:47:46,570
server because they are inside @dm set

00:47:43,750 --> 00:47:48,700
or something so it's also it's important

00:47:46,570 --> 00:47:52,240
for us to support SSH as a transport as

00:47:48,700 --> 00:47:54,010
well but as drawl mentioned the better

00:47:52,240 --> 00:47:56,710
way is to have the minions connecting to

00:47:54,010 --> 00:48:00,630
the master okay in the meantime we have

00:47:56,710 --> 00:48:03,130
our new system already onboard here

00:48:00,630 --> 00:48:04,450
still doing some things in the

00:48:03,130 --> 00:48:07,750
background okay but it's already

00:48:04,450 --> 00:48:10,930
available and we can see here that it

00:48:07,750 --> 00:48:17,560
already has the formula enabled so let's

00:48:10,930 --> 00:48:20,230
just add it to a group okay just can go

00:48:17,560 --> 00:48:25,210
into this NS a group where our

00:48:20,230 --> 00:48:29,580
monitoring server is and hopefully now

00:48:25,210 --> 00:48:38,230
in graph owner if we go to the system's

00:48:29,580 --> 00:48:40,330
it should show up there okay we need to

00:48:38,230 --> 00:48:42,910
wait a few more seconds for the service

00:48:40,330 --> 00:48:45,430
discovery to run in the meantime you can

00:48:42,910 --> 00:48:47,980
see that the web servers that we have

00:48:45,430 --> 00:48:49,690
added there are also monitored via

00:48:47,980 --> 00:48:52,090
dinner exporter so they automatically

00:48:49,690 --> 00:48:55,870
show show up on this dashboard as well

00:48:52,090 --> 00:48:58,390
as the database servers so we have both

00:48:55,870 --> 00:49:00,040
in the case of Apache Apache exporter a

00:48:58,390 --> 00:49:02,020
node exporter and in the case of post

00:49:00,040 --> 00:49:07,270
gray post gray exporter and node

00:49:02,020 --> 00:49:12,160
exporter as well okay we see our new

00:49:07,270 --> 00:49:14,260
system is already here okay and it has

00:49:12,160 --> 00:49:18,040
metrics so we just on-boarded the system

00:49:14,260 --> 00:49:21,190
and got it automatically monitor it if

00:49:18,040 --> 00:49:23,260
you don't like graphical UI so much all

00:49:21,190 --> 00:49:25,570
that you have seen on this demo can be

00:49:23,260 --> 00:49:28,150
done on the command line via de Uyuni

00:49:25,570 --> 00:49:30,309
api so we have an API that supports all

00:49:28,150 --> 00:49:34,989
the operations that

00:49:30,309 --> 00:49:38,979
you do on user interface so it seems all

00:49:34,989 --> 00:49:48,249
is working back to the slides for a wrap

00:49:38,979 --> 00:49:49,329
up yeah so some things that will be

00:49:48,249 --> 00:49:51,579
coming next

00:49:49,329 --> 00:49:53,709
support for Prometheus Federation this

00:49:51,579 --> 00:49:56,469
comes in line with a component that we

00:49:53,709 --> 00:49:58,539
have as part of uni which is do you need

00:49:56,469 --> 00:50:00,489
proxy we recommend this to be used on

00:49:58,539 --> 00:50:03,339
very large infrastructures beyond

00:50:00,489 --> 00:50:06,999
thousands of machines each proxy can

00:50:03,339 --> 00:50:09,549
handle up to 2,000 systems and our plan

00:50:06,999 --> 00:50:12,819
here is to have a Prometheus server

00:50:09,549 --> 00:50:14,799
running per proxy in a federation set

00:50:12,819 --> 00:50:18,219
ups and then a central server that

00:50:14,799 --> 00:50:21,219
collects the metrics from those proxy

00:50:18,219 --> 00:50:23,380
premedia servers we also want to improve

00:50:21,219 --> 00:50:26,229
the existing automation mainly adding

00:50:23,380 --> 00:50:29,650
more exporters and adding exporter

00:50:26,229 --> 00:50:32,439
specific for things around containers

00:50:29,650 --> 00:50:34,779
and virtualization so see advisor for

00:50:32,439 --> 00:50:37,420
for docker you might be familiar with it

00:50:34,779 --> 00:50:39,759
with if you monitor containers libvirt

00:50:37,420 --> 00:50:41,319
exporter which can give you insights on

00:50:39,759 --> 00:50:44,499
what is happening on your KVM hypervisor

00:50:41,319 --> 00:50:46,299
even if you do not run node exporter on

00:50:44,499 --> 00:50:48,670
the systems that you have their

00:50:46,299 --> 00:50:50,380
kubernetes already exposed as matrix so

00:50:48,670 --> 00:50:52,059
we just need to have primitives

00:50:50,380 --> 00:50:53,199
configured to scrape it and the black

00:50:52,059 --> 00:50:54,849
box exporter

00:50:53,199 --> 00:50:57,279
if you are not familiar with it it

00:50:54,849 --> 00:51:00,519
allows you to monitor systems from the

00:50:57,279 --> 00:51:02,229
outside in terms of responsiveness so

00:51:00,519 --> 00:51:05,769
you can see if your services are up or

00:51:02,229 --> 00:51:07,869
down if they are responding within your

00:51:05,769 --> 00:51:10,959
SLA is without installing anything on

00:51:07,869 --> 00:51:12,880
those systems alerting templates as I

00:51:10,959 --> 00:51:15,489
mentioned we want to have those directly

00:51:12,880 --> 00:51:18,400
on the formulas authentication and TLS

00:51:15,489 --> 00:51:22,239
encryption which was already mentioned

00:51:18,400 --> 00:51:25,479
in the talk from theme about doing all

00:51:22,239 --> 00:51:27,449
this roll out with puppets it's

00:51:25,479 --> 00:51:29,799
something we also want to add here and

00:51:27,449 --> 00:51:31,539
automated firewall configuration so that

00:51:29,799 --> 00:51:34,390
if your systems have a firewall you

00:51:31,539 --> 00:51:38,170
deploy the exporters there and it gets

00:51:34,390 --> 00:51:40,439
automatically configured and we are also

00:51:38,170 --> 00:51:43,520
looking forward to having some

00:51:40,439 --> 00:51:46,940
contributions so you are all welcome to

00:51:43,520 --> 00:51:49,420
take a look at the project and now it's

00:51:46,940 --> 00:51:49,420
time for questions

00:52:03,730 --> 00:52:10,280
one question regarding the formulas can

00:52:08,150 --> 00:52:16,550
you also default formulas to the

00:52:10,280 --> 00:52:19,339
channels you can add it to the

00:52:16,550 --> 00:52:22,369
activation keys so an activation key

00:52:19,339 --> 00:52:25,490
assigns set of channels to a system and

00:52:22,369 --> 00:52:28,040
you can also assign in this case

00:52:25,490 --> 00:52:30,349
entitlements for a system to be more an

00:52:28,040 --> 00:52:33,050
interest not the whole list of formulas

00:52:30,349 --> 00:52:36,530
but you can assign the basic monitoring

00:52:33,050 --> 00:52:38,240
to a system and that will take care of

00:52:36,530 --> 00:52:51,410
assigning the formula to the system with

00:52:38,240 --> 00:52:53,450
the default configuration so I think you

00:52:51,410 --> 00:52:55,400
can assign configuration channels via

00:52:53,450 --> 00:52:57,140
activation keys as well so you can come

00:52:55,400 --> 00:52:59,540
come up with your own states that you

00:52:57,140 --> 00:53:02,630
want so your custom States we currently

00:52:59,540 --> 00:53:05,660
don't yet support to assign the packaged

00:53:02,630 --> 00:53:07,670
formulas I guess on that UI and for the

00:53:05,660 --> 00:53:09,950
activation keys but that's something we

00:53:07,670 --> 00:53:12,109
should probably do but you can already

00:53:09,950 --> 00:53:14,450
create your custom States and assign

00:53:12,109 --> 00:53:16,820
them during the registration of the

00:53:14,450 --> 00:53:19,490
system and that can include deployment

00:53:16,820 --> 00:53:33,140
of any exporters that you want like

00:53:19,490 --> 00:53:35,560
monitoring exporters sorry can you

00:53:33,140 --> 00:53:35,560
repeat the question

00:53:37,089 --> 00:53:43,099
so the Prometheus configuration it it

00:53:41,089 --> 00:53:46,400
mainly uses a custom service discovery

00:53:43,099 --> 00:53:48,560
components that would be in a way

00:53:46,400 --> 00:53:50,390
similar to how the file-based service

00:53:48,560 --> 00:53:52,520
discovery component works for example

00:53:50,390 --> 00:53:55,520
but it's instead of looking for JSON or

00:53:52,520 --> 00:53:59,150
EML files in a directory it connects to

00:53:55,520 --> 00:54:01,790
the Uyuni api by the XML RPC API that we

00:53:59,150 --> 00:54:04,160
have and get the list of monitored

00:54:01,790 --> 00:54:06,380
systems from there and via the

00:54:04,160 --> 00:54:07,910
parameters service discovery mechanism

00:54:06,380 --> 00:54:09,950
that it's already shipped with

00:54:07,910 --> 00:54:11,990
primitives it just adds those systems

00:54:09,950 --> 00:54:14,480
there with the configuration that was

00:54:11,990 --> 00:54:15,869
set on the formulas so it's it's an

00:54:14,480 --> 00:54:17,339
extension to

00:54:15,869 --> 00:54:19,170
meatus itself you don't need any extra

00:54:17,339 --> 00:54:22,349
package we just need dispatched

00:54:19,170 --> 00:54:24,749
prometheus to do it and as your honors

00:54:22,349 --> 00:54:27,660
mentioned earlier it's something we are

00:54:24,749 --> 00:54:30,420
working on to upstream so that you get

00:54:27,660 --> 00:54:32,220
this on all Prometheus systems and you

00:54:30,420 --> 00:54:34,799
just need to add the settings to the

00:54:32,220 --> 00:54:39,349
primitive CML file and you'll get the

00:54:34,799 --> 00:54:39,349
configuration up and running thank you

00:54:39,890 --> 00:54:44,690
are there any other questions

00:54:52,450 --> 00:55:01,650
if there are none I believe you're at

00:54:56,420 --> 00:55:05,920
the end of your talk like its usual

00:55:01,650 --> 00:55:06,770
[Applause]

00:55:05,920 --> 00:55:08,880
[Music]

00:55:06,770 --> 00:55:19,710
[Applause]

00:55:08,880 --> 00:55:19,710
[Music]

00:55:23,300 --> 00:55:26,050

YouTube URL: https://www.youtube.com/watch?v=4x6gg9IjNAc


