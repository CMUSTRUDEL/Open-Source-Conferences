Title: OSMC 2019 | Naemon and Friends by Sven Nierlein
Publication date: 2019-11-18
Playlist: OSMC 2019 | Open Source Monitoring Conference
Description: 
	Naemon is the engine of several opensource monitoring solutions. This talk will take a look at whatâ€™s new in and around Naemon. I will try to answer questions like, what is a NEB module and what can it do for me? What are common addons and tools used together with Naemon. While investigating some interesing scenarios i will share some best practices, for example the LMD livestatus proxy or the new Mod-Gearman worker.


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Musik: FRAMETRAXX
Captions: 
	00:00:10,270 --> 00:00:15,480
[Applause]

00:00:13,970 --> 00:00:17,880
thank you very much

00:00:15,480 --> 00:00:22,380
yeah today we will talk about Niemann

00:00:17,880 --> 00:00:26,759
and friends since Neiman is pretty small

00:00:22,380 --> 00:00:30,359
to will engine usually behind the scenes

00:00:26,759 --> 00:00:32,449
or under the hood we will also have a

00:00:30,359 --> 00:00:36,540
look at things that are built on top of

00:00:32,449 --> 00:00:39,570
Neiman to make it maybe give you a few

00:00:36,540 --> 00:00:43,469
ideas on what you could do or wave you

00:00:39,570 --> 00:00:46,469
have a look my name is Sven Nealon I'm

00:00:43,469 --> 00:00:48,780
working at console and I'm at least

00:00:46,469 --> 00:00:52,440
partly involved in a few of those

00:00:48,780 --> 00:00:55,350
projects you will see later on and let's

00:00:52,440 --> 00:01:00,840
start with no surprise we start with me

00:00:55,350 --> 00:01:05,550
min quick recap on what Neiman is doing

00:01:00,840 --> 00:01:08,520
actually we are Neiman's processing

00:01:05,550 --> 00:01:10,350
events somehow we have on the left hand

00:01:08,520 --> 00:01:11,910
side we have active checks and passive

00:01:10,350 --> 00:01:16,530
checks they are coming into Neiman

00:01:11,910 --> 00:01:20,220
somehow and Neiman then processes these

00:01:16,530 --> 00:01:24,119
events and produces alerts metrics event

00:01:20,220 --> 00:01:28,590
handlers and or status data in general

00:01:24,119 --> 00:01:30,479
and that's about it that's Neiman that's

00:01:28,590 --> 00:01:32,729
why the stock is Neiman and friends

00:01:30,479 --> 00:01:35,490
because Neiman is really is doing really

00:01:32,729 --> 00:01:38,640
a little or a small job and important

00:01:35,490 --> 00:01:41,009
job because but it's it's not much more

00:01:38,640 --> 00:01:47,420
than that it really processes events

00:01:41,009 --> 00:01:50,909
into into different into also queues so

00:01:47,420 --> 00:01:52,799
we try to focus on two things with

00:01:50,909 --> 00:01:55,290
movements that's like I said we are

00:01:52,799 --> 00:01:58,680
following the the UNIX philosophy and do

00:01:55,290 --> 00:02:02,670
one thing and do that one right and this

00:01:58,680 --> 00:02:06,840
also means we can do that as fast or as

00:02:02,670 --> 00:02:09,060
good as possible of course and in our

00:02:06,840 --> 00:02:11,570
case it's yeah we are running check

00:02:09,060 --> 00:02:16,290
plugins and on the other hand we are

00:02:11,570 --> 00:02:19,709
providing data and metrics to further to

00:02:16,290 --> 00:02:23,390
us and that's the second thing we try to

00:02:19,709 --> 00:02:24,600
provide api's so other people can do

00:02:23,390 --> 00:02:27,800
stuff

00:02:24,600 --> 00:02:31,290
top of Nieman no that's why you probably

00:02:27,800 --> 00:02:33,480
don't hear the near headed word Neiman

00:02:31,290 --> 00:02:35,880
that often because it's usually working

00:02:33,480 --> 00:02:38,450
under the hood and there are things on

00:02:35,880 --> 00:02:41,640
on top like I'll show you later

00:02:38,450 --> 00:02:43,890
so yeah but they're the main task for us

00:02:41,640 --> 00:02:46,980
is to provide AP eyes which are useful

00:02:43,890 --> 00:02:52,020
have full fast and reliable so others

00:02:46,980 --> 00:02:54,540
can create awesome stuff on it and this

00:02:52,020 --> 00:02:57,330
also gives you that ya freedom of choice

00:02:54,540 --> 00:02:59,730
to maybe replace different things that

00:02:57,330 --> 00:03:01,770
are working on top of Neiman so we are

00:02:59,730 --> 00:03:04,290
not forcing you to to a single full

00:03:01,770 --> 00:03:09,510
stack you can choose the tools by

00:03:04,290 --> 00:03:11,160
yourself so let's start with the api's

00:03:09,510 --> 00:03:14,310
and we start with the non-programmable

00:03:11,160 --> 00:03:18,840
ap ice you probably have seen those

00:03:14,310 --> 00:03:20,910
before starting with event handlers so

00:03:18,840 --> 00:03:22,890
whenever something happens you can run

00:03:20,910 --> 00:03:25,560
event handles for four people used to

00:03:22,890 --> 00:03:28,380
not use using a Neiman that's that's not

00:03:25,560 --> 00:03:31,890
a new thing but it's still somehow an

00:03:28,380 --> 00:03:34,500
API where you can process things there

00:03:31,890 --> 00:03:37,500
are a lot of tools based on event

00:03:34,500 --> 00:03:40,560
handler so they are really run after

00:03:37,500 --> 00:03:43,770
each host and service check and you can

00:03:40,560 --> 00:03:48,060
process the data into something into

00:03:43,770 --> 00:03:50,580
something else this is possible as

00:03:48,060 --> 00:03:53,160
global hosting service event and also

00:03:50,580 --> 00:03:56,910
you can have specific host and service

00:03:53,160 --> 00:03:59,130
event handlers then we can process

00:03:56,910 --> 00:04:01,950
performance data in several ways are

00:03:59,130 --> 00:04:03,750
really many ways to do so like TD

00:04:01,950 --> 00:04:07,020
performance data command you can write

00:04:03,750 --> 00:04:09,780
once again to a file you can then run

00:04:07,020 --> 00:04:13,500
this command to process those files but

00:04:09,780 --> 00:04:16,230
there are more ways to do it for example

00:04:13,500 --> 00:04:17,720
if the net modules what we talked about

00:04:16,230 --> 00:04:23,430
that later

00:04:17,720 --> 00:04:26,520
and finally the another non-programmable

00:04:23,430 --> 00:04:30,810
api are this obsess over host and

00:04:26,520 --> 00:04:35,880
services of these osep and o chp

00:04:30,810 --> 00:04:38,150
commands also they do what what you

00:04:35,880 --> 00:04:39,949
would expect them to do but of course

00:04:38,150 --> 00:04:42,110
and this this has some kind of

00:04:39,949 --> 00:04:44,360
performance overhead because for each

00:04:42,110 --> 00:04:48,080
host and service result you will end up

00:04:44,360 --> 00:04:50,270
with at least one one another fork and a

00:04:48,080 --> 00:04:53,330
script that's running and demon has to

00:04:50,270 --> 00:04:56,470
wait until that's in finishes so that's

00:04:53,330 --> 00:04:59,510
that's okay for simple things but

00:04:56,470 --> 00:05:02,270
usually want to get in a little bit

00:04:59,510 --> 00:05:07,310
deeper into it and that brings us to the

00:05:02,270 --> 00:05:10,970
next common api's like life status the

00:05:07,310 --> 00:05:13,039
query Handler and or not yields in

00:05:10,970 --> 00:05:15,889
general like life status is a net module

00:05:13,039 --> 00:05:20,539
as well starting with that life status

00:05:15,889 --> 00:05:23,030
is a super cool API which provides data

00:05:20,539 --> 00:05:26,479
from Niemann of course but also allows

00:05:23,030 --> 00:05:28,699
you to send commands back to to Niemann

00:05:26,479 --> 00:05:32,389
and it supports multiple formats like

00:05:28,699 --> 00:05:34,190
chasing or native Titan and CSV format

00:05:32,389 --> 00:05:38,720
we'll have a look at life status in

00:05:34,190 --> 00:05:42,080
detail later the query handler itself is

00:05:38,720 --> 00:05:44,960
it's used for the worker processes which

00:05:42,080 --> 00:05:46,940
Nemo is using to run those checks so the

00:05:44,960 --> 00:05:49,700
communication between the Niemen core

00:05:46,940 --> 00:05:53,479
and third workers done over this query

00:05:49,700 --> 00:05:55,280
handler but you can also do several

00:05:53,479 --> 00:05:56,900
other things with this query handler so

00:05:55,280 --> 00:05:59,960
you can for example set internal

00:05:56,900 --> 00:06:02,030
variables you can fetch statistics about

00:05:59,960 --> 00:06:05,180
the worker processes of Niemann itself

00:06:02,030 --> 00:06:08,120
and you can also run commands through

00:06:05,180 --> 00:06:10,490
that query handler with the advantage

00:06:08,120 --> 00:06:11,690
that you will get an actual return value

00:06:10,490 --> 00:06:15,410
from the command it's not a

00:06:11,690 --> 00:06:18,590
fire-and-forget you get an answer so you

00:06:15,410 --> 00:06:21,410
can see that t if the command actually

00:06:18,590 --> 00:06:26,860
worked or if there are some some errors

00:06:21,410 --> 00:06:29,630
through processing that that thing we

00:06:26,860 --> 00:06:31,940
added this functionality to life status

00:06:29,630 --> 00:06:33,770
as well meanwhile so if you send

00:06:31,940 --> 00:06:36,889
commands by where life status you will

00:06:33,770 --> 00:06:40,340
also get a result and see if that

00:06:36,889 --> 00:06:43,010
actually worked or not and finally we

00:06:40,340 --> 00:06:46,909
have those named modules these are

00:06:43,010 --> 00:06:50,000
smallest generic api or actually

00:06:46,909 --> 00:06:52,050
loadable c libraries which have direct

00:06:50,000 --> 00:06:55,650
access to the Niemen memories of

00:06:52,050 --> 00:06:57,629
I can do whatever I want but yeah of

00:06:55,650 --> 00:06:58,710
course with great power comes great

00:06:57,629 --> 00:07:00,960
responsibility

00:06:58,710 --> 00:07:03,960
you can do a lot of things wrong

00:07:00,960 --> 00:07:07,379
obviously here and fiddling in the

00:07:03,960 --> 00:07:10,919
memory of him in itself let's have a

00:07:07,379 --> 00:07:16,979
quick look at common nap modules like

00:07:10,919 --> 00:07:19,409
said already life status is the yellow

00:07:16,979 --> 00:07:21,599
parts are actually sings from the Niemen

00:07:19,409 --> 00:07:24,930
project itself so we provide the neumann

00:07:21,599 --> 00:07:28,139
core and the nap modules are some kind

00:07:24,930 --> 00:07:31,590
of layer and we provide the Niemen live

00:07:28,139 --> 00:07:34,259
status as a monument that's what the

00:07:31,590 --> 00:07:35,669
Nemean project itself provides and then

00:07:34,259 --> 00:07:38,490
like I said there are several things

00:07:35,669 --> 00:07:40,620
built on top of that like for example

00:07:38,490 --> 00:07:43,620
there are several live status consumers

00:07:40,620 --> 00:07:46,440
like your eyes like track like this

00:07:43,620 --> 00:07:49,830
Oh p5 monitor and probably a lot of

00:07:46,440 --> 00:07:52,919
others I don't know about and there are

00:07:49,830 --> 00:07:56,400
some other name modules like mod given

00:07:52,919 --> 00:07:59,250
for example this offloads checks on two

00:07:56,400 --> 00:08:02,090
different machines so it's kind of load

00:07:59,250 --> 00:08:07,469
balancing but you can also use it to

00:08:02,090 --> 00:08:12,389
expose metrics for example in tunak flux

00:08:07,469 --> 00:08:15,870
and in flux TB and ravana then there's

00:08:12,389 --> 00:08:17,599
merlin which is kind of an okay you can

00:08:15,870 --> 00:08:22,050
build redundancy and high availability

00:08:17,599 --> 00:08:24,719
setups for Nieman with Marilyn and then

00:08:22,050 --> 00:08:26,759
there's status engine which also exports

00:08:24,719 --> 00:08:29,909
data into a database and it comes with

00:08:26,759 --> 00:08:33,209
enjoy we will have a look at those later

00:08:29,909 --> 00:08:36,449
I've prepared some slides having those

00:08:33,209 --> 00:08:39,000
things and finally of course when when

00:08:36,449 --> 00:08:41,940
doing checks you always lose a lot of

00:08:39,000 --> 00:08:45,180
metrics and we want to somehow and

00:08:41,940 --> 00:08:48,480
process them in further and we have one

00:08:45,180 --> 00:08:51,480
example here the MPCV demon from from

00:08:48,480 --> 00:08:55,649
the PMP project which is also a and nab

00:08:51,480 --> 00:08:59,279
module so let's have a quick look at eff

00:08:55,649 --> 00:09:03,450
life status which is for funnyman the

00:08:59,279 --> 00:09:07,230
the most common way to access data and

00:09:03,450 --> 00:09:10,080
it's yeah like a wrote there it's fast

00:09:07,230 --> 00:09:14,990
life and it produces Jason so that's

00:09:10,080 --> 00:09:17,190
usually everything you want and next to

00:09:14,990 --> 00:09:18,500
this little example where you just

00:09:17,190 --> 00:09:22,230
search host names

00:09:18,500 --> 00:09:25,350
it has also very powerful statistics so

00:09:22,230 --> 00:09:28,590
you can run several statistics in one

00:09:25,350 --> 00:09:32,640
query show you that on the next slide if

00:09:28,590 --> 00:09:34,830
Neiman be a obv put live service a

00:09:32,640 --> 00:09:37,170
little bit for zone we added another

00:09:34,830 --> 00:09:41,000
output format like this rap Jason I will

00:09:37,170 --> 00:09:43,440
show an example on the next slide we

00:09:41,000 --> 00:09:44,730
next to a limit we also had an offset

00:09:43,440 --> 00:09:48,530
because it usually it doesn't make sense

00:09:44,730 --> 00:09:52,430
to have a limit but no offset so you can

00:09:48,530 --> 00:09:56,730
fetch a very specific area of the data

00:09:52,430 --> 00:09:58,500
and we added sorting because otherwise

00:09:56,730 --> 00:10:01,470
you would have to fetch everything if

00:09:58,500 --> 00:10:03,690
you if you have to sort locally then you

00:10:01,470 --> 00:10:05,670
have to fetch every data so that locally

00:10:03,690 --> 00:10:09,090
it's row away about ninety percent of

00:10:05,670 --> 00:10:12,030
that data and shall display just display

00:10:09,090 --> 00:10:15,210
that so that's why we implemented the

00:10:12,030 --> 00:10:17,790
offset and sorting yeah there you can

00:10:15,210 --> 00:10:21,510
see a small example of lobsters query it

00:10:17,790 --> 00:10:25,050
simply fetches hosts like only one

00:10:21,510 --> 00:10:27,300
single column like the name and we set

00:10:25,050 --> 00:10:31,920
the output format to Jason and limit

00:10:27,300 --> 00:10:33,420
that to just to house because ya don't

00:10:31,920 --> 00:10:36,390
want to fill the screen with useless

00:10:33,420 --> 00:10:41,490
data it's as simple as that and there

00:10:36,390 --> 00:10:43,890
are many modules that somehow handle the

00:10:41,490 --> 00:10:45,990
data query format for you so there are

00:10:43,890 --> 00:10:49,890
four modules pipe modules and etcetera

00:10:45,990 --> 00:10:53,370
so you don't have to create that for you

00:10:49,890 --> 00:10:58,680
by hand usually it's just to give you an

00:10:53,370 --> 00:11:03,060
idea how it looks this one is to wrap

00:10:58,680 --> 00:11:08,040
Chasen format it puts the actual data in

00:11:03,060 --> 00:11:10,770
another hash array and gives you the an

00:11:08,040 --> 00:11:13,590
additional total count so this is quite

00:11:10,770 --> 00:11:16,610
useful for example if you have paging on

00:11:13,590 --> 00:11:19,980
your web page so you

00:11:16,610 --> 00:11:23,040
fetch host say I'm only interested in

00:11:19,980 --> 00:11:24,420
the first two or in the first hundreds

00:11:23,040 --> 00:11:28,140
because that's how much I want to

00:11:24,420 --> 00:11:30,450
display on the on on my website but I

00:11:28,140 --> 00:11:33,240
also want to know how many it would have

00:11:30,450 --> 00:11:35,400
been so I can print a page in bars or

00:11:33,240 --> 00:11:37,650
people can page through the data usually

00:11:35,400 --> 00:11:41,310
this would end up in two queries like

00:11:37,650 --> 00:11:43,620
you have one query with limits and doing

00:11:41,310 --> 00:11:46,950
that same query again with with a

00:11:43,620 --> 00:11:49,860
counter so you can fetch how many items

00:11:46,950 --> 00:11:52,050
you would have gotten and it's yeah the

00:11:49,860 --> 00:11:55,680
idea is to have a single query per page

00:11:52,050 --> 00:11:57,900
so this one puts everything into want

00:11:55,680 --> 00:12:04,380
one query and you get everything you

00:11:57,900 --> 00:12:05,910
need into into one query and the last

00:12:04,380 --> 00:12:08,730
thing I want to share with Lycidas is

00:12:05,910 --> 00:12:12,330
the power of the statistics it's still a

00:12:08,730 --> 00:12:15,300
very simple example but here we fetch

00:12:12,330 --> 00:12:17,550
all hosts with have to want to count

00:12:15,300 --> 00:12:19,110
things that have to state zero at a

00:12:17,550 --> 00:12:23,430
state one and then you get a simple

00:12:19,110 --> 00:12:25,050
array with those numbers and that's

00:12:23,430 --> 00:12:26,700
really quite powerful because for

00:12:25,050 --> 00:12:29,580
example if you imagine the technical

00:12:26,700 --> 00:12:31,890
overview page where you have maybe 20

00:12:29,580 --> 00:12:33,660
certain different numbers like how many

00:12:31,890 --> 00:12:36,600
okay is do I have how many mornings do I

00:12:33,660 --> 00:12:38,520
have how many criticals do I have how

00:12:36,600 --> 00:12:41,160
many criticals in down times do I have

00:12:38,520 --> 00:12:43,680
how many criticals and technology do I

00:12:41,160 --> 00:12:45,900
have how many I mean you see there a lot

00:12:43,680 --> 00:12:47,880
of counters and it's you can do it with

00:12:45,900 --> 00:12:51,930
a single Korean law status so that's

00:12:47,880 --> 00:12:53,850
that's really quite powerful so like I

00:12:51,930 --> 00:12:56,010
said Niemann corn in los talas is

00:12:53,850 --> 00:13:00,150
basically what's what's Nieman is about

00:12:56,010 --> 00:13:02,040
so which brings us to friends and have a

00:13:00,150 --> 00:13:03,560
look what what is build on on top of

00:13:02,040 --> 00:13:07,230
that

00:13:03,560 --> 00:13:09,810
starting with Merlin that's net module

00:13:07,230 --> 00:13:12,209
from Opie five is the module for

00:13:09,810 --> 00:13:16,100
effortless redundancy and load balancing

00:13:12,209 --> 00:13:21,060
in Niemann and that's what it does you

00:13:16,100 --> 00:13:25,050
load this Merlin NAB module into Nieman

00:13:21,060 --> 00:13:28,170
and Merlin then writes the configure the

00:13:25,050 --> 00:13:30,450
status data into our database and if you

00:13:28,170 --> 00:13:34,140
want to have redundant setup you

00:13:30,450 --> 00:13:39,480
just do the same thing again and connect

00:13:34,140 --> 00:13:43,940
Blarney Minh Mullen demons so they can

00:13:39,480 --> 00:13:47,150
communicate and do the high availability

00:13:43,940 --> 00:13:47,150
for you

00:13:47,720 --> 00:13:54,720
next thing is status engine this is

00:13:51,870 --> 00:13:58,020
another nap module which exports the

00:13:54,720 --> 00:14:02,100
Niemen data in JSON format which is then

00:13:58,020 --> 00:14:04,950
put into a database and it also comes

00:14:02,100 --> 00:14:08,910
with an web UI so you can easily display

00:14:04,950 --> 00:14:11,160
the data if you're interested in starts

00:14:08,910 --> 00:14:12,360
engine the guy Daniel is here if you

00:14:11,160 --> 00:14:14,820
have questions about that

00:14:12,360 --> 00:14:18,840
just ask him he will happily answer your

00:14:14,820 --> 00:14:21,350
questions address mobile and big screen

00:14:18,840 --> 00:14:25,680
friendly that it's routine yeah it's

00:14:21,350 --> 00:14:30,450
shiny and nice and you can have a look

00:14:25,680 --> 00:14:34,770
at your issues in a nice way another net

00:14:30,450 --> 00:14:37,040
module is for a lower term this is not

00:14:34,770 --> 00:14:41,520
really connected to Nieman but it's a

00:14:37,040 --> 00:14:43,200
third party tool processing alerts but

00:14:41,520 --> 00:14:45,630
it comes with it comes with an app

00:14:43,200 --> 00:14:48,270
module so you can extract the

00:14:45,630 --> 00:14:55,320
notifications from Niemann and put them

00:14:48,270 --> 00:14:59,220
into the dashboard and finally another

00:14:55,320 --> 00:15:01,980
module so if your favorite language

00:14:59,220 --> 00:15:07,050
school then writing that more

00:15:01,980 --> 00:15:10,860
uselessness of a medium so we just put

00:15:07,050 --> 00:15:13,320
together a nap wrapper for golang so you

00:15:10,860 --> 00:15:15,900
don't have to write your name or you see

00:15:13,320 --> 00:15:19,650
any more you can still do that but you

00:15:15,900 --> 00:15:21,960
are also able to write your nap mode you

00:15:19,650 --> 00:15:26,310
think oh now here's a very simple

00:15:21,960 --> 00:15:29,640
example basically you import the library

00:15:26,310 --> 00:15:33,360
is set a few initial things like title

00:15:29,640 --> 00:15:36,840
name and and so on and that models

00:15:33,360 --> 00:15:39,840
usually worked like you gesture call

00:15:36,840 --> 00:15:42,920
backs and then the Niemen core whenever

00:15:39,840 --> 00:15:45,319
it hits

00:15:42,920 --> 00:15:47,600
to record back with it we'll call you

00:15:45,319 --> 00:15:50,299
net module and you can can do whatever

00:15:47,600 --> 00:15:53,269
you want we always remember your

00:15:50,299 --> 00:15:55,639
callback is run synchronized with the

00:15:53,269 --> 00:15:58,779
course or even waits until your callback

00:15:55,639 --> 00:16:01,699
is finished so if you're doing fancy

00:15:58,779 --> 00:16:03,980
queries which large timeouts that

00:16:01,699 --> 00:16:07,609
doesn't work so really make sure you

00:16:03,980 --> 00:16:12,589
usually immediately return your call

00:16:07,609 --> 00:16:15,619
back and then that's fine so yeah if

00:16:12,589 --> 00:16:21,069
that'll try if you want to write net

00:16:15,619 --> 00:16:26,239
modules and go which brings us to

00:16:21,069 --> 00:16:28,669
metrics the next level is it's quite

00:16:26,239 --> 00:16:30,679
hard to to put those things into boxes

00:16:28,669 --> 00:16:33,470
because like Stella's engines is an app

00:16:30,679 --> 00:16:36,529
module and the web UI so it's maybe a

00:16:33,470 --> 00:16:39,889
little bit mixed up TP is still alive

00:16:36,529 --> 00:16:44,899
it's like I've heard that there's a

00:16:39,889 --> 00:16:46,759
parks implant so maybe we will see

00:16:44,899 --> 00:16:50,929
something new from that project in the

00:16:46,759 --> 00:16:52,850
future so far so long it actually does

00:16:50,929 --> 00:16:55,669
what it it's used to it writes

00:16:52,850 --> 00:16:59,589
performance data into our detours and

00:16:55,669 --> 00:17:03,350
also comes along with a website to

00:16:59,589 --> 00:17:05,419
display that data again and the reason

00:17:03,350 --> 00:17:07,730
why I mentioned here is because it also

00:17:05,419 --> 00:17:11,149
comes with the npc de module which is an

00:17:07,730 --> 00:17:16,100
ab module for a very fast processing of

00:17:11,149 --> 00:17:19,459
the metrics another way of handling

00:17:16,100 --> 00:17:22,689
metrics is this combination of knock

00:17:19,459 --> 00:17:26,870
flux and flux to be his to and ravana a

00:17:22,689 --> 00:17:28,909
lot more tools than one but in the end

00:17:26,870 --> 00:17:32,059
you will you will get shiny crap on our

00:17:28,909 --> 00:17:35,480
dashboards straight out of Niemann

00:17:32,059 --> 00:17:38,210
metric and it works like that the black

00:17:35,480 --> 00:17:40,220
flux is the connection between the

00:17:38,210 --> 00:17:43,279
Niemen core and the influx to be so nak

00:17:40,220 --> 00:17:46,309
flux has sup of several ways of

00:17:43,279 --> 00:17:48,620
communication so as you can read the

00:17:46,309 --> 00:17:51,740
spool files for a matrix are just

00:17:48,620 --> 00:17:55,700
written into plain text files but it's

00:17:51,740 --> 00:17:56,510
also able to consume metrics over human

00:17:55,700 --> 00:17:59,330
cues for example

00:17:56,510 --> 00:18:03,320
so it can be offloaded on different

00:17:59,330 --> 00:18:06,020
machines like that with that then it

00:18:03,320 --> 00:18:08,120
writes there's metrics into the influx

00:18:06,020 --> 00:18:10,160
to be but it also enriches the data with

00:18:08,120 --> 00:18:13,910
some with the comments and the down

00:18:10,160 --> 00:18:17,150
times so it's not only metrics but it

00:18:13,910 --> 00:18:20,030
also adds metrics and sometimes and

00:18:17,150 --> 00:18:24,110
comments so in your graph on a dashboard

00:18:20,030 --> 00:18:27,440
you can have the comments and down times

00:18:24,110 --> 00:18:30,440
as annotations which is quite helpful

00:18:27,440 --> 00:18:34,040
and you couldn't put a lot of stuff in

00:18:30,440 --> 00:18:36,230
it you can even put in screenshots into

00:18:34,040 --> 00:18:39,020
those annotations so you can for example

00:18:36,230 --> 00:18:41,900
for end-to-end tests you can see actual

00:18:39,020 --> 00:18:45,140
screenshots along with the graph forever

00:18:41,900 --> 00:18:49,250
for when the problem happened that's

00:18:45,140 --> 00:18:52,549
quite powerful and to create those

00:18:49,250 --> 00:18:54,950
dashboards I mean like Ravana is not

00:18:52,549 --> 00:18:57,590
somehow in any way connected to Tunis

00:18:54,950 --> 00:19:00,770
men so you need a way to put this house

00:18:57,590 --> 00:19:02,299
and service philosophy into a crow fauna

00:19:00,770 --> 00:19:05,299
or and you don't want to create

00:19:02,299 --> 00:19:07,160
thousands of dashboards and just in

00:19:05,299 --> 00:19:09,230
order to a viewer see yeah yeah it's a

00:19:07,160 --> 00:19:11,150
few you data and that's where history

00:19:09,230 --> 00:19:14,440
comes into play

00:19:11,150 --> 00:19:17,780
history is a small PHP project with

00:19:14,440 --> 00:19:19,910
creates dynamically dashboards a dynamic

00:19:17,780 --> 00:19:22,910
dashboards for Accra fauna based on life

00:19:19,910 --> 00:19:26,630
status data so on the back end that

00:19:22,910 --> 00:19:29,270
connects to to live status and sees are

00:19:26,630 --> 00:19:31,910
what what kind of performance data does

00:19:29,270 --> 00:19:35,900
this host and service have and do I have

00:19:31,910 --> 00:19:37,850
some templates which then creates the

00:19:35,900 --> 00:19:41,600
chronograph it it works a little bit

00:19:37,850 --> 00:19:44,780
what the idea we put a lot of ideas from

00:19:41,600 --> 00:19:48,230
kinky into that because a lot of good

00:19:44,780 --> 00:19:51,730
ideas in PMP actually like the the

00:19:48,230 --> 00:19:54,490
template is defined by the actual body

00:19:51,730 --> 00:19:57,530
available metrics so if you are checking

00:19:54,490 --> 00:20:00,110
no matter how it how it is named returns

00:19:57,530 --> 00:20:03,110
roundtrip and packet loss then use that

00:20:00,110 --> 00:20:05,059
template because then it's a pain

00:20:03,110 --> 00:20:06,620
usually orden if it's not a ping it

00:20:05,059 --> 00:20:08,750
still has round-trip time and packet

00:20:06,620 --> 00:20:11,090
loss and this - what

00:20:08,750 --> 00:20:16,610
would fit very well but you can also

00:20:11,090 --> 00:20:19,970
have some some other filters to apply

00:20:16,610 --> 00:20:22,549
dashboards and to your hosts and in

00:20:19,970 --> 00:20:25,280
service you can also use the host and

00:20:22,549 --> 00:20:27,669
service name to really add some specific

00:20:25,280 --> 00:20:31,460
dashboard for for this specific host and

00:20:27,669 --> 00:20:33,350
service but usually it works best if you

00:20:31,460 --> 00:20:35,539
just stick to to the metric names

00:20:33,350 --> 00:20:37,220
because that's what defines your

00:20:35,539 --> 00:20:40,909
dashboard anyway that's that's what the

00:20:37,220 --> 00:20:43,940
things you use later on and here just

00:20:40,909 --> 00:20:49,600
brought an example with from Apache

00:20:43,940 --> 00:20:52,760
check it checks the Apache and all those

00:20:49,600 --> 00:20:55,549
patchy processes are plotted here so

00:20:52,760 --> 00:21:00,919
this this again it's already a more a

00:20:55,549 --> 00:21:08,390
fancy dashboard compared to the default

00:21:00,919 --> 00:21:10,370
one we saw some UI's before like I said

00:21:08,390 --> 00:21:12,919
it's it's a little bit hard to put those

00:21:10,370 --> 00:21:16,039
things into boxes so on there's one

00:21:12,919 --> 00:21:19,280
project I'm usually busy with that's the

00:21:16,039 --> 00:21:21,980
truck rep UI it comes with Status pages

00:21:19,280 --> 00:21:23,659
reporting everything you want in your

00:21:21,980 --> 00:21:26,120
monitoring like dashboards business

00:21:23,659 --> 00:21:30,110
processes and also a configuration idiot

00:21:26,120 --> 00:21:32,809
or for funnyman itself so next to

00:21:30,110 --> 00:21:37,070
editing the text files you can use a

00:21:32,809 --> 00:21:39,470
fancy web editor and create and change

00:21:37,070 --> 00:21:42,530
your hosts and services there this is an

00:21:39,470 --> 00:21:44,799
example from the dashboard from the it

00:21:42,530 --> 00:21:54,799
has OpenStreetMap support and you can

00:21:44,799 --> 00:21:57,909
put you things onto those maps then some

00:21:54,799 --> 00:22:02,450
random tools which can be used with

00:21:57,909 --> 00:22:06,070
Niemann another project I'm involved

00:22:02,450 --> 00:22:10,850
it's lmd not to mix it up if only LMD is

00:22:06,070 --> 00:22:14,809
for live status only it's a tool which

00:22:10,850 --> 00:22:18,080
consumes live status and and on the

00:22:14,809 --> 00:22:20,690
client side it has life status API as

00:22:18,080 --> 00:22:22,640
well so basically it just consumes live

00:22:20,690 --> 00:22:26,570
status from multiple sources and

00:22:22,640 --> 00:22:33,980
provides a single life status socket or

00:22:26,570 --> 00:22:36,309
a TCP to the front so I mean the the

00:22:33,980 --> 00:22:39,559
reason for this project was we started

00:22:36,309 --> 00:22:43,070
someone with AI we want to connect like

00:22:39,559 --> 00:22:44,650
five sites into our into truck anthem no

00:22:43,070 --> 00:22:48,260
problem five sites is okay just

00:22:44,650 --> 00:22:51,710
connected it's that's easy then we were

00:22:48,260 --> 00:22:52,730
like 20 different locations connected to

00:22:51,710 --> 00:22:55,640
tracking mmm

00:22:52,730 --> 00:22:58,880
could be a little slow still somehow

00:22:55,640 --> 00:23:01,480
worked but a couple of years later we

00:22:58,880 --> 00:23:04,010
ended up with right now using 250

00:23:01,480 --> 00:23:06,530
different Niemann course connected into

00:23:04,010 --> 00:23:09,350
a single truck instance and that's not

00:23:06,530 --> 00:23:13,490
the end so I think by the end of next

00:23:09,350 --> 00:23:16,190
year we are at 300 different locations

00:23:13,490 --> 00:23:18,740
put into a single view and I mean you

00:23:16,190 --> 00:23:20,809
can imagine usually you wouldn't create

00:23:18,740 --> 00:23:24,230
a website connecting to 300 databases

00:23:20,809 --> 00:23:27,230
and then separate this reunit databases

00:23:24,230 --> 00:23:33,220
across the globe that doesn't make sense

00:23:27,230 --> 00:23:37,790
it's obviously pretty slow and LMD just

00:23:33,220 --> 00:23:40,610
comes in between and removes the latency

00:23:37,790 --> 00:23:43,700
more or less completely because it's it

00:23:40,610 --> 00:23:45,919
works across a synchronous and fetches

00:23:43,700 --> 00:23:48,620
the air for you and has everything in

00:23:45,919 --> 00:23:50,450
memory so truck can or basically every

00:23:48,620 --> 00:23:55,250
live service consumer can fetch data

00:23:50,450 --> 00:23:58,190
from from lmd and display the results

00:23:55,250 --> 00:24:01,400
more or less immediately of course maybe

00:23:58,190 --> 00:24:05,000
you have three or five seconds you are

00:24:01,400 --> 00:24:07,210
behind the real world because lmde has

00:24:05,000 --> 00:24:10,120
to fetch the direct data all the time

00:24:07,210 --> 00:24:13,130
but I think it's worth it because

00:24:10,120 --> 00:24:16,160
otherwise you would have to wait maybe

00:24:13,130 --> 00:24:18,620
30 seconds 60 seconds to lepage loaches

00:24:16,160 --> 00:24:21,110
aloneness and nobody wants that and with

00:24:18,620 --> 00:24:23,929
lmd a page can load immediately because

00:24:21,110 --> 00:24:30,410
there's no latency to remote sites at

00:24:23,929 --> 00:24:32,809
all then other people use it - for

00:24:30,410 --> 00:24:36,260
example - to leverage core reloads so

00:24:32,809 --> 00:24:38,360
imagine you have a really huge

00:24:36,260 --> 00:24:40,790
Nieman instance with hundred thousands

00:24:38,360 --> 00:24:42,770
of services and it maybe takes 30

00:24:40,790 --> 00:24:44,780
seconds to reload usually the life

00:24:42,770 --> 00:24:46,970
status connection will go down

00:24:44,780 --> 00:24:48,800
you pay web pages empty because it

00:24:46,970 --> 00:24:51,200
doesn't have any data anymore it doesn't

00:24:48,800 --> 00:24:55,640
it couldn't connect to the database well

00:24:51,200 --> 00:24:59,150
I suppose in this case and we'll just

00:24:55,640 --> 00:25:01,640
show me maybe an error or nothing at all

00:24:59,150 --> 00:25:03,440
and after 30 seconds when the Corps has

00:25:01,640 --> 00:25:06,470
reloaded then everything is fine again

00:25:03,440 --> 00:25:10,180
and you maybe don't want and this is

00:25:06,470 --> 00:25:14,780
something lmd can can remedy as well

00:25:10,180 --> 00:25:18,050
because LMD notices that the core itself

00:25:14,780 --> 00:25:21,440
has reloaded but will continue to to

00:25:18,050 --> 00:25:24,350
serve the old data for configure amount

00:25:21,440 --> 00:25:26,240
of seconds and after the core has

00:25:24,350 --> 00:25:29,660
reloaded it will fetch an update all

00:25:26,240 --> 00:25:34,820
those data and just continue fetching

00:25:29,660 --> 00:25:37,480
things from LMD and also if you have

00:25:34,820 --> 00:25:40,970
multiple sites they they can be reloaded

00:25:37,480 --> 00:25:42,380
separately of course so if one side just

00:25:40,970 --> 00:25:44,960
reloads you don't want to display an

00:25:42,380 --> 00:25:48,740
error just because the site is reloaded

00:25:44,960 --> 00:25:52,130
right now yeah that's what what lmde

00:25:48,740 --> 00:25:55,250
does and as a little side project that

00:25:52,130 --> 00:25:58,910
also comes with an REST API and exports

00:25:55,250 --> 00:26:02,660
prometheus metrics so gives you a little

00:25:58,910 --> 00:26:04,700
bit of bonus here another project I'm

00:26:02,660 --> 00:26:07,810
involved and it's not German

00:26:04,700 --> 00:26:12,590
it's like a celery it's a tool to

00:26:07,810 --> 00:26:15,470
offload running running check plugins

00:26:12,590 --> 00:26:19,310
but also notifications and event

00:26:15,470 --> 00:26:21,830
handlers for example I mean usually to

00:26:19,310 --> 00:26:23,660
use cases here and there's the one use

00:26:21,830 --> 00:26:25,160
case you just have too many hosts in

00:26:23,660 --> 00:26:29,030
service checks for singing machine then

00:26:25,160 --> 00:26:33,980
you can just upload them to machines

00:26:29,030 --> 00:26:36,530
next to your monitoring host and the

00:26:33,980 --> 00:26:39,800
other use case is you have separated

00:26:36,530 --> 00:26:42,860
somehow network segment or a data center

00:26:39,800 --> 00:26:45,200
and you want money you don't want to cut

00:26:42,860 --> 00:26:48,290
thousands of holes in your firewall and

00:26:45,200 --> 00:26:49,560
you set up a Nieman work mode command

00:26:48,290 --> 00:26:52,170
worker there and

00:26:49,560 --> 00:26:56,130
maybe a specific host group on that

00:26:52,170 --> 00:26:59,570
worker and everything is processed with

00:26:56,130 --> 00:27:01,890
a single TCP connections read worker

00:26:59,570 --> 00:27:05,490
actually not a new project it also

00:27:01,890 --> 00:27:09,030
exists for several years now but there's

00:27:05,490 --> 00:27:12,240
one thing new this year we rewrote the

00:27:09,030 --> 00:27:13,470
de Vaca in goal actually and this has a

00:27:12,240 --> 00:27:16,550
lot of advantages

00:27:13,470 --> 00:27:20,580
so the previous mod Keemun worker was

00:27:16,550 --> 00:27:22,650
kind of a pre fork model so for it

00:27:20,580 --> 00:27:25,980
started maybe a hundred hundred and

00:27:22,650 --> 00:27:29,040
fifty workers and then they waited to do

00:27:25,980 --> 00:27:30,180
the actual checks and we don't have to

00:27:29,040 --> 00:27:32,640
do it with go anymore

00:27:30,180 --> 00:27:35,670
you it's more or less event based so

00:27:32,640 --> 00:27:37,740
it's a single process it forks all those

00:27:35,670 --> 00:27:41,880
checks and returns them to the Niemen

00:27:37,740 --> 00:27:44,880
cords has two advantages it uses way

00:27:41,880 --> 00:27:46,860
less memory for example I mean even if a

00:27:44,880 --> 00:27:48,830
single worker only uses five megabyte of

00:27:46,860 --> 00:27:52,590
memory if you have hundred of them it

00:27:48,830 --> 00:27:55,530
already takes a specific amount and this

00:27:52,590 --> 00:28:00,720
process more or less uses no memory at

00:27:55,530 --> 00:28:03,240
all another thing that came more as with

00:28:00,720 --> 00:28:05,460
goal is you can easily compile this

00:28:03,240 --> 00:28:08,820
thing for four different platforms like

00:28:05,460 --> 00:28:11,160
for Windows for example so if somebody

00:28:08,820 --> 00:28:13,650
wants it there is a Windows worker now I

00:28:11,160 --> 00:28:17,160
don't know if that makes sense

00:28:13,650 --> 00:28:19,500
maybe not the worker but there are other

00:28:17,160 --> 00:28:21,450
tools coming with not given like descent

00:28:19,500 --> 00:28:23,790
Yemen for example this is quite helpful

00:28:21,450 --> 00:28:25,880
actually on Windows so you can send

00:28:23,790 --> 00:28:28,710
passive checks from your Windows machine

00:28:25,880 --> 00:28:31,650
over gehrman and that's something that

00:28:28,710 --> 00:28:33,570
often came up I mean there was a sent

00:28:31,650 --> 00:28:36,090
Yemen except previously but it was

00:28:33,570 --> 00:28:41,010
really kind of a hassle to compile that

00:28:36,090 --> 00:28:43,350
sing and now it's super easy and like

00:28:41,010 --> 00:28:48,530
it's going easily export some metrics

00:28:43,350 --> 00:28:52,680
like I show you in this example so this

00:28:48,530 --> 00:28:54,720
worker just yeah it creates metrics for

00:28:52,680 --> 00:28:57,780
your checks like how long did you check

00:28:54,720 --> 00:29:00,450
take to finish or how long how much CPU

00:28:57,780 --> 00:29:03,330
did you check consume and so you can

00:29:00,450 --> 00:29:05,960
create a nice dashboard and

00:29:03,330 --> 00:29:09,690
see for example your top plugins like

00:29:05,960 --> 00:29:14,810
how many in this case check HTTP is the

00:29:09,690 --> 00:29:16,980
most common one in this example but also

00:29:14,810 --> 00:29:19,320
usually it's not a big problem - or

00:29:16,980 --> 00:29:21,180
hundreds of check plugins so you are

00:29:19,320 --> 00:29:24,480
interested in the ones who consume and

00:29:21,180 --> 00:29:26,100
the most memory and and CPU and if you

00:29:24,480 --> 00:29:28,800
scroll down you will see the same graph

00:29:26,100 --> 00:29:32,310
but but sorted by CPU time and so you

00:29:28,800 --> 00:29:34,830
can easily identify maybe plugins which

00:29:32,310 --> 00:29:41,640
check plugins which could be improved in

00:29:34,830 --> 00:29:43,610
terms of CPU usage yeah that's so far

00:29:41,640 --> 00:29:47,280
for the tools let's have a look at

00:29:43,610 --> 00:29:50,220
complete suite of for monitoring

00:29:47,280 --> 00:29:53,730
starting with the OB 5 monitor it's

00:29:50,220 --> 00:29:56,370
based on Nieman as well and yeah it

00:29:53,730 --> 00:29:59,210
probably brings everything you need for

00:29:56,370 --> 00:30:02,160
monitoring with it like SNMP traps and

00:29:59,210 --> 00:30:05,780
it has a configuration tool and lock

00:30:02,160 --> 00:30:09,420
server if you have questions about that

00:30:05,780 --> 00:30:12,710
jack up is here and it's probably happy

00:30:09,420 --> 00:30:16,290
to answer questions about that thing

00:30:12,710 --> 00:30:18,540
next thing based on numinous I hope

00:30:16,290 --> 00:30:21,780
mighty cockpit the people are sitting

00:30:18,540 --> 00:30:25,950
here and will answer questions about

00:30:21,780 --> 00:30:27,930
that it's it's again a tool based on

00:30:25,950 --> 00:30:31,190
human runs your check Springs everything

00:30:27,930 --> 00:30:33,060
you want into a new monitoring light

00:30:31,190 --> 00:30:36,930
event correlations

00:30:33,060 --> 00:30:38,850
it comes with an report maybe each of

00:30:36,930 --> 00:30:47,070
those things are probably is this person

00:30:38,850 --> 00:30:50,580
separates talk about yeah and finally on

00:30:47,070 --> 00:30:53,460
D which is a more or less a tool box

00:30:50,580 --> 00:30:56,460
containing Niemann and many other useful

00:30:53,460 --> 00:30:58,560
things we use a lot for example like

00:30:56,460 --> 00:31:02,450
Ravana attract Gaiman and all those

00:30:58,560 --> 00:31:06,060
stuff I showed earlier

00:31:02,450 --> 00:31:08,490
how to create a screenshot of MD because

00:31:06,060 --> 00:31:13,230
it's not really a specific tool that's

00:31:08,490 --> 00:31:17,070
more or less an idea of monitoring and a

00:31:13,230 --> 00:31:20,039
Python script and so this is

00:31:17,070 --> 00:31:22,169
how it looks in production you just have

00:31:20,039 --> 00:31:25,080
several processes working together and

00:31:22,169 --> 00:31:26,700
it's a single rpm and Debian package so

00:31:25,080 --> 00:31:28,740
it makes installation easier but it

00:31:26,700 --> 00:31:31,889
doesn't force you to to use a specific

00:31:28,740 --> 00:31:35,399
tool set so it's like I said it's a

00:31:31,889 --> 00:31:37,590
toolbox bringing all the stuff with it

00:31:35,399 --> 00:31:43,320
and then you can choose two things you

00:31:37,590 --> 00:31:47,610
like finally some words about where's

00:31:43,320 --> 00:31:51,899
Nieman heading and there are at least

00:31:47,610 --> 00:31:55,200
two things which are more or less fixed

00:31:51,899 --> 00:31:59,580
already we will report the status table

00:31:55,200 --> 00:32:01,529
to live status and Niemann it comes up

00:31:59,580 --> 00:32:05,309
every now and then people are asking for

00:32:01,529 --> 00:32:07,320
it for it and yeah that will come we

00:32:05,309 --> 00:32:10,649
will add more dependency options to

00:32:07,320 --> 00:32:12,809
Niemann like we already added

00:32:10,649 --> 00:32:15,389
dependencies and into life status

00:32:12,809 --> 00:32:18,059
earlier this year dependencies were

00:32:15,389 --> 00:32:21,419
always kind of not really transparent

00:32:18,059 --> 00:32:22,980
because they were not exposed with large

00:32:21,419 --> 00:32:24,960
data so you couldn't see it in the UI

00:32:22,980 --> 00:32:27,330
and you sometimes you were wondering why

00:32:24,960 --> 00:32:30,450
isn't that check running now and it was

00:32:27,330 --> 00:32:33,299
because some dependencies for this check

00:32:30,450 --> 00:32:36,299
failed we added that this year and now

00:32:33,299 --> 00:32:40,590
you can see and fetch dependencies wire

00:32:36,299 --> 00:32:46,919
life service as well and another thing I

00:32:40,590 --> 00:32:48,870
want to end with is singly added to to

00:32:46,919 --> 00:32:56,179
live status or it's maybe more or less

00:32:48,870 --> 00:32:56,179
than an idea of what to do we integrated

00:32:57,200 --> 00:33:03,080
the query handler into Nieman live

00:33:00,690 --> 00:33:03,080
status

00:33:13,409 --> 00:33:23,019
okay um simple example here I just

00:33:18,570 --> 00:33:27,580
echoed the actual query into my life

00:33:23,019 --> 00:33:30,009
socket and get the result from the query

00:33:27,580 --> 00:33:32,259
hand line it's really just passed

00:33:30,009 --> 00:33:35,139
through there's no magic involved here

00:33:32,259 --> 00:33:39,700
we do that already for commands to get

00:33:35,139 --> 00:33:42,009
the result both sly status but it also

00:33:39,700 --> 00:33:44,710
offers so many possibilities because

00:33:42,009 --> 00:33:47,589
they the query handlers like maybe they

00:33:44,710 --> 00:33:49,539
the most underrated sing in any man

00:33:47,589 --> 00:33:51,820
that's quite powerful but nobody really

00:33:49,539 --> 00:33:53,919
use it is because I mean you get almost

00:33:51,820 --> 00:33:56,409
everything about out of life status

00:33:53,919 --> 00:33:58,629
already so you don't want to have to

00:33:56,409 --> 00:34:01,979
connections to maybe do the same thing

00:33:58,629 --> 00:34:05,529
so the idea was to just pass through the

00:34:01,979 --> 00:34:09,849
career and like varies but be able to

00:34:05,529 --> 00:34:16,179
access it with life status and another

00:34:09,849 --> 00:34:22,359
idea when basically idea was to can

00:34:16,179 --> 00:34:28,529
easily get your help

00:34:22,359 --> 00:34:28,529
like VP stats let's see

00:34:31,280 --> 00:34:35,210
like some statistics out of the Niemen

00:34:33,350 --> 00:34:37,100
car like how many workers are they

00:34:35,210 --> 00:34:41,330
running how many chops did they do what

00:34:37,100 --> 00:34:43,970
PIDs do they have that's one maybe use

00:34:41,330 --> 00:34:46,040
case but you can also subscribe to

00:34:43,970 --> 00:34:51,010
events and that's more or less the thing

00:34:46,040 --> 00:34:54,050
why we will do that so you can subscribe

00:34:51,010 --> 00:34:57,230
via life status to your service and host

00:34:54,050 --> 00:35:00,860
checks results and we are planning to

00:34:57,230 --> 00:35:03,200
use that to synchronize for example like

00:35:00,860 --> 00:35:08,030
LMDE and so Adam D doesn't have to fetch

00:35:03,200 --> 00:35:10,820
periodically every few seconds the host

00:35:08,030 --> 00:35:12,860
and service resource from from the

00:35:10,820 --> 00:35:16,300
Nieman Corps but instead just subscribe

00:35:12,860 --> 00:35:20,900
on on hosting service check results and

00:35:16,300 --> 00:35:23,600
you have instant results done and still

00:35:20,900 --> 00:35:25,270
only have a single connection to 20

00:35:23,600 --> 00:35:30,430
minutes you don't have to create

00:35:25,270 --> 00:35:30,430
connections to two different sockets

00:35:44,120 --> 00:35:49,760
yeah that's what what you just saw we

00:35:47,900 --> 00:35:53,000
probably will change the format from

00:35:49,760 --> 00:35:56,000
this unformatted text to something

00:35:53,000 --> 00:35:58,610
useful like Jason for example the idea

00:35:56,000 --> 00:36:02,570
is really to just provide another API

00:35:58,610 --> 00:36:05,360
which can be consumed by by third-party

00:36:02,570 --> 00:36:08,930
tools and process those things further

00:36:05,360 --> 00:36:12,170
so that was just an example this there

00:36:08,930 --> 00:36:17,150
will be a way to to export it as JSON

00:36:12,170 --> 00:36:20,690
format so besides that I think Newman

00:36:17,150 --> 00:36:23,420
will just continue the way it is we try

00:36:20,690 --> 00:36:27,260
to provide a stable saying which doesn't

00:36:23,420 --> 00:36:30,110
change every two weeks but if we need

00:36:27,260 --> 00:36:35,000
that we will provide valid api's and

00:36:30,110 --> 00:36:38,660
fast API so people can build things on

00:36:35,000 --> 00:36:53,320
top of it yeah that's about it thank you

00:36:38,660 --> 00:36:53,320
very much or any questions

00:37:00,260 --> 00:37:09,930
hi you talk about dependency options

00:37:03,990 --> 00:37:12,420
several way to define parent groups so I

00:37:09,930 --> 00:37:15,300
have a network parent I have ins and

00:37:12,420 --> 00:37:18,960
parent and I have a logical application

00:37:15,300 --> 00:37:20,369
parent and so on that so P possible

00:37:18,960 --> 00:37:24,559
already you can define multiple

00:37:20,369 --> 00:37:26,970
dependencies and parents yes okay so

00:37:24,559 --> 00:37:29,369
actually I was talking about visualizing

00:37:26,970 --> 00:37:30,960
those existing dependencies that what

00:37:29,369 --> 00:37:32,550
are you talking about this is already

00:37:30,960 --> 00:37:40,099
possible you can have multiple parents

00:37:32,550 --> 00:37:44,849
and you have parents but if I have to

00:37:40,099 --> 00:37:47,790
land parents that's okay but what if I

00:37:44,849 --> 00:37:50,400
have to land parents and twos on parents

00:37:47,790 --> 00:37:53,700
and tool and parents are down the

00:37:50,400 --> 00:37:57,359
machine is back but the check says

00:37:53,700 --> 00:38:03,390
machine is up because there are two Jean

00:37:57,359 --> 00:38:06,839
parents my problem is I need grouping in

00:38:03,390 --> 00:38:08,940
parents yeah maybe that's something that

00:38:06,839 --> 00:38:12,270
should be more or less modeled with

00:38:08,940 --> 00:38:14,309
business processes or put I mean a host

00:38:12,270 --> 00:38:17,549
doesn't have to be a physical host of

00:38:14,309 --> 00:38:21,150
house can be anything it can be an idea

00:38:17,549 --> 00:38:24,589
of if this parent for example so maybe I

00:38:21,150 --> 00:38:24,589
would do it like that okay

00:38:32,060 --> 00:38:38,060
with maintaining life status I know it's

00:38:35,600 --> 00:38:42,800
also in check m'kay

00:38:38,060 --> 00:38:43,250
and so is you work of it the other way

00:38:42,800 --> 00:38:46,580
around

00:38:43,250 --> 00:38:48,950
are you synchronizing with each other

00:38:46,580 --> 00:38:51,500
yeah life service itself was invented by

00:38:48,950 --> 00:38:53,510
the checking car guys and we forked it

00:38:51,500 --> 00:38:55,850
in to Neiman because it's really quite

00:38:53,510 --> 00:38:57,170
powerful and useful and so they are

00:38:55,850 --> 00:39:03,940
maintaining theirs and we are

00:38:57,170 --> 00:39:03,940
maintaining ours is us better into E of

00:39:04,180 --> 00:39:16,480
course not in general but in doing some

00:39:08,450 --> 00:39:20,840
kind of event pastes wait trigger

00:39:16,480 --> 00:39:23,150
statement in the language and I was

00:39:20,840 --> 00:39:25,670
hoping to be able to do some kind of

00:39:23,150 --> 00:39:28,010
pops up pattern with it but it's not

00:39:25,670 --> 00:39:29,810
really possible reliably and I talked

00:39:28,010 --> 00:39:36,050
with them once and they said no that's

00:39:29,810 --> 00:39:40,370
not what I priority for us I'm not

00:39:36,050 --> 00:39:41,540
really into they are checking K life so

00:39:40,370 --> 00:39:44,270
I don't know what's possible yeah but

00:39:41,540 --> 00:39:46,880
wait trigger possible life source as

00:39:44,270 --> 00:39:48,710
well so but if that didn't solve you

00:39:46,880 --> 00:39:50,930
problem anyway it doesn't have maybe

00:39:48,710 --> 00:39:53,990
then this this subscribe mechanism is

00:39:50,930 --> 00:40:02,290
more useful for you yes it's in

00:39:53,990 --> 00:40:02,290
Christina okay thanks anyone else

00:40:07,250 --> 00:40:13,460
if not then that probably concludes your

00:40:10,070 --> 00:40:16,760
talk and you have another present to put

00:40:13,460 --> 00:40:19,690
on your shelf thank you very much thank

00:40:16,760 --> 00:40:19,690
you okay

00:40:23,430 --> 00:40:33,080
[Music]

00:40:36,670 --> 00:40:39,420

YouTube URL: https://www.youtube.com/watch?v=i4iuHN_ATwk


