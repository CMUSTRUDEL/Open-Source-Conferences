Title: OSMC 2019 | Buzzword Bingo with NSClient++ by Michael Medin
Publication date: 2019-11-18
Playlist: OSMC 2019 | Open Source Monitoring Conference
Description: 
	In a world of Cloud, Containers and Micro Services are the classic model of monitoring hosts still relevant?
In this talk I will share my view on how to make sense of moniroting in a world of metrics and lets see how we can bridge the two models with a little help from NSClient++ up-coming support for Cloud, Containers, and some other buzwords.


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Musik: FRAMETRAXX
Captions: 
	00:00:11,840 --> 00:00:17,160
this working yeah hopefully awesome

00:00:14,840 --> 00:00:18,570
right so I'm gonna talk a little bit

00:00:17,160 --> 00:00:19,859
about passwords and mainly that's

00:00:18,570 --> 00:00:21,599
because I've been talking about NS

00:00:19,859 --> 00:00:24,029
client which has been like the windows

00:00:21,599 --> 00:00:26,009
saying throughout the ages and and

00:00:24,029 --> 00:00:27,599
that's kind of boring and then you have

00:00:26,009 --> 00:00:29,449
all the hipsters who's doing like docker

00:00:27,599 --> 00:00:33,510
and kubernetes and you know I go like

00:00:29,449 --> 00:00:36,720
one of those but my name is Michael

00:00:33,510 --> 00:00:38,160
neden and I've been doing NS line for

00:00:36,720 --> 00:00:40,650
way longer than I would love to you I

00:00:38,160 --> 00:00:42,210
usually titled myself as some sort of or

00:00:40,650 --> 00:00:44,850
if you take this or architect a tour or

00:00:42,210 --> 00:00:46,710
key take whatever but you know I'm I'm a

00:00:44,850 --> 00:00:49,110
developer and I love to build things and

00:00:46,710 --> 00:00:51,840
there is something magical going from

00:00:49,110 --> 00:00:53,610
nothing to something you know the the

00:00:51,840 --> 00:00:54,480
feeling of just sitting there with a

00:00:53,610 --> 00:00:57,030
grand idea

00:00:54,480 --> 00:00:58,470
and then somehow later on you have built

00:00:57,030 --> 00:01:02,640
something that actually you can touch

00:00:58,470 --> 00:01:04,170
and you know feel but somewhere along

00:01:02,640 --> 00:01:06,179
this journey of building you know

00:01:04,170 --> 00:01:08,280
everything from plastic pieces to wooden

00:01:06,179 --> 00:01:10,200
pieces to you know electronics and

00:01:08,280 --> 00:01:12,600
whatnot you realize that it's not

00:01:10,200 --> 00:01:15,299
building you love so much as the fact

00:01:12,600 --> 00:01:17,789
that you have a grand idea and then you

00:01:15,299 --> 00:01:19,829
have built something but in between the

00:01:17,789 --> 00:01:21,749
grand ID and having built something

00:01:19,829 --> 00:01:25,530
there's a lot of grunt work that is

00:01:21,749 --> 00:01:27,960
actually boring right and and I I

00:01:25,530 --> 00:01:30,179
realized this when I was little because

00:01:27,960 --> 00:01:32,069
I went skiing for the first time my life

00:01:30,179 --> 00:01:36,299
in Norway where they have like you know

00:01:32,069 --> 00:01:37,799
snow really snow off like in Sweden and

00:01:36,299 --> 00:01:39,509
and you know you go there and you sit in

00:01:37,799 --> 00:01:41,340
the cabin II look out say wow I'm gonna

00:01:39,509 --> 00:01:44,280
build the greatest snow castle in the

00:01:41,340 --> 00:01:46,859
world right and you run out and you

00:01:44,280 --> 00:01:49,950
realize that you just fall down into the

00:01:46,859 --> 00:01:51,780
snow and then it goes to here and and

00:01:49,950 --> 00:01:53,369
the snow is not wet so you can't build

00:01:51,780 --> 00:01:55,560
anything with it right it's just cold

00:01:53,369 --> 00:01:57,840
and it's inside your shirt and inside

00:01:55,560 --> 00:02:01,109
your shoes and and and you're miserable

00:01:57,840 --> 00:02:04,079
and and I never skied since by the way

00:02:01,109 --> 00:02:05,609
so yeah traumatic experience so you know

00:02:04,079 --> 00:02:07,229
when I'm sitting there on the porch and

00:02:05,609 --> 00:02:09,479
I say like it would be awesome to you

00:02:07,229 --> 00:02:10,739
know build this and do that and then I

00:02:09,479 --> 00:02:13,890
realized that it's gonna be a lot of

00:02:10,739 --> 00:02:15,360
work so their natural progression is of

00:02:13,890 --> 00:02:17,430
course to get someone else to

00:02:15,360 --> 00:02:19,080
that work for you right so I got myself

00:02:17,430 --> 00:02:20,790
a couple of kids and figured if they'll

00:02:19,080 --> 00:02:22,830
be gonna do everything I'll just do the

00:02:20,790 --> 00:02:25,530
planning and then I'll sit on the porch

00:02:22,830 --> 00:02:27,630
and enjoy their results fortunately that

00:02:25,530 --> 00:02:29,400
didn't really pan out because thus were

00:02:27,630 --> 00:02:31,530
they have committed zero lines of code

00:02:29,400 --> 00:02:34,410
to Anna's client they don't even have

00:02:31,530 --> 00:02:35,310
github accounts I have failed as a

00:02:34,410 --> 00:02:38,010
parent

00:02:35,310 --> 00:02:39,900
I have bought every single stem toy

00:02:38,010 --> 00:02:42,390
there is right you know I have robots I

00:02:39,900 --> 00:02:45,300
have electronic kits I have everything

00:02:42,390 --> 00:02:48,060
and they like nothing

00:02:45,300 --> 00:02:50,250
so something something has has failed

00:02:48,060 --> 00:02:51,270
there right but then you know a couple

00:02:50,250 --> 00:02:53,760
of weeks ago I was sitting there

00:02:51,270 --> 00:02:55,350
building some Halloween decorations of

00:02:53,760 --> 00:02:57,570
course electronic lights and that kind

00:02:55,350 --> 00:02:58,980
of stuff Raspberry Pi and and my

00:02:57,570 --> 00:03:00,510
daughter comes in and she's like oh what

00:02:58,980 --> 00:03:03,209
are you doing and starts tinkering

00:03:00,510 --> 00:03:05,850
winning I go like wow finally after nine

00:03:03,209 --> 00:03:07,560
years and then you realize that now is

00:03:05,850 --> 00:03:09,930
this really precious moment where either

00:03:07,560 --> 00:03:12,510
I start you know to push her and she'll

00:03:09,930 --> 00:03:13,230
think it's boring and dad stuff and she

00:03:12,510 --> 00:03:15,180
won't do it anymore

00:03:13,230 --> 00:03:17,100
or I'll do nothing and hopefully she'll

00:03:15,180 --> 00:03:20,340
forget about it so I don't really know

00:03:17,100 --> 00:03:22,590
what to do but you're thinking why is he

00:03:20,340 --> 00:03:24,000
talking about this right because we were

00:03:22,590 --> 00:03:25,590
supposed to talk about and his client or

00:03:24,000 --> 00:03:27,900
more importantly we're supposed to talk

00:03:25,590 --> 00:03:30,600
about passwords but I'm not gonna do

00:03:27,900 --> 00:03:32,970
that instead I'm gonna talk about what

00:03:30,600 --> 00:03:35,970
Anna's client is and in a slide is a

00:03:32,970 --> 00:03:38,010
general-purpose agent what that means is

00:03:35,970 --> 00:03:40,890
that it's supports various protocols

00:03:38,010 --> 00:03:43,019
it supports checks it supports metrics

00:03:40,890 --> 00:03:45,540
it supports events and it supports

00:03:43,019 --> 00:03:48,150
scripts and and these are kind of LEGO

00:03:45,540 --> 00:03:50,220
pieces which you can put together and

00:03:48,150 --> 00:03:52,739
build some sort of monitoring solution

00:03:50,220 --> 00:03:54,780
on top of this I usually say that it's

00:03:52,739 --> 00:03:57,330
modular by design and highly extensible

00:03:54,780 --> 00:04:00,360
other people tend to say that it's very

00:03:57,330 --> 00:04:03,180
complicated and there is some truth to

00:04:00,360 --> 00:04:04,950
both of these sides and I've sort of

00:04:03,180 --> 00:04:07,410
gradually tried to make things simpler

00:04:04,950 --> 00:04:09,420
and sort of say this is the way it

00:04:07,410 --> 00:04:11,239
should be done instead of saying here a

00:04:09,420 --> 00:04:14,250
bunch of Legos to build something cool

00:04:11,239 --> 00:04:16,890
oh - which was a couple years ago

00:04:14,250 --> 00:04:19,320
had a you know restful api documentation

00:04:16,890 --> 00:04:22,979
improvements if modules will be five

00:04:19,320 --> 00:04:24,840
client if you're using up a five but you

00:04:22,979 --> 00:04:27,210
know fairly boring stuff you know

00:04:24,840 --> 00:04:28,699
nothing busts wordy right nothing cool

00:04:27,210 --> 00:04:31,759
hipster

00:04:28,699 --> 00:04:34,939
then no 5/3 was out and that's one of

00:04:31,759 --> 00:04:36,710
those unreleased versions you can

00:04:34,939 --> 00:04:39,039
download it you can use it it works fine

00:04:36,710 --> 00:04:41,659
but the web interface is kind of broken

00:04:39,039 --> 00:04:44,479
because I thought angular 2 was gonna be

00:04:41,659 --> 00:04:47,120
the future and I spent month trying to

00:04:44,479 --> 00:04:48,979
build a web interface in angular 2 and

00:04:47,120 --> 00:04:50,960
then I built something in Express send

00:04:48,979 --> 00:04:54,139
it to the weekends so um that's how

00:04:50,960 --> 00:04:56,090
wonderful angular 2 is that introduced

00:04:54,139 --> 00:04:57,849
an elastic client the singer client you

00:04:56,090 --> 00:05:00,889
know remove modulus documentation again

00:04:57,849 --> 00:05:02,840
boring stuff right but then we have oh

00:05:00,889 --> 00:05:05,840
six zero which is really the next

00:05:02,840 --> 00:05:07,520
version that's gonna come out as a beta

00:05:05,840 --> 00:05:09,710
version in like one or two weeks and

00:05:07,520 --> 00:05:12,409
hopefully released before the end of the

00:05:09,710 --> 00:05:14,689
year and I honestly think that's gonna

00:05:12,409 --> 00:05:16,879
happen but we'll see what happens I've

00:05:14,689 --> 00:05:18,710
spent a lot of time updating all of the

00:05:16,879 --> 00:05:19,939
dependencies and internal libraries and

00:05:18,710 --> 00:05:23,270
all that kind of stuff which is again

00:05:19,939 --> 00:05:24,889
rather boring but what is less less

00:05:23,270 --> 00:05:26,599
boring and slightly more interesting is

00:05:24,889 --> 00:05:28,400
open metric supports and that's

00:05:26,599 --> 00:05:29,810
essentially the Prometheus metric stuff

00:05:28,400 --> 00:05:32,569
which you can start scraping through any

00:05:29,810 --> 00:05:33,620
clients as well as darker support which

00:05:32,569 --> 00:05:35,259
means that you can start monitoring

00:05:33,620 --> 00:05:38,659
containers and things like that

00:05:35,259 --> 00:05:40,189
AWS didn't really pan out unfortunately

00:05:38,659 --> 00:05:42,050
it's gonna happen in the next version

00:05:40,189 --> 00:05:43,969
but I figured it's better to release

00:05:42,050 --> 00:05:45,550
this as is and then come with a later

00:05:43,969 --> 00:05:48,080
version we haven't had time to do that

00:05:45,550 --> 00:05:51,740
there's also a new web interface that's

00:05:48,080 --> 00:05:53,360
actually working that said general

00:05:51,740 --> 00:05:55,159
purpose agent right so we said we

00:05:53,360 --> 00:05:57,409
supported protocols and what do you

00:05:55,159 --> 00:05:59,509
actually mean by that with protocols we

00:05:57,409 --> 00:06:01,219
have different ways of talking to the

00:05:59,509 --> 00:06:03,110
outside world we can talk to the lastik

00:06:01,219 --> 00:06:04,819
we can talk to graphite we can talk to

00:06:03,110 --> 00:06:07,069
our singing to Nagios we can't obey our

00:06:04,819 --> 00:06:10,639
n RPE there's a whole bunch of these

00:06:07,069 --> 00:06:12,110
protocols that we support and you know

00:06:10,639 --> 00:06:14,210
depending on how your monitoring

00:06:12,110 --> 00:06:16,430
situation looks you will need different

00:06:14,210 --> 00:06:18,229
protocols but they all kind of work the

00:06:16,430 --> 00:06:19,339
same they all kind of do the same it's

00:06:18,229 --> 00:06:22,189
just a different way of communicating

00:06:19,339 --> 00:06:23,870
right and so the end result will be

00:06:22,189 --> 00:06:26,960
something along the lines of you loading

00:06:23,870 --> 00:06:28,789
the module that's provides protocol and

00:06:26,960 --> 00:06:30,289
then you specify you know where you're

00:06:28,789 --> 00:06:32,629
gonna send the data or from whom you're

00:06:30,289 --> 00:06:34,789
gonna receive requests from then we

00:06:32,629 --> 00:06:36,229
support checks and when we say check

00:06:34,789 --> 00:06:38,300
what we mean is you know some sort of

00:06:36,229 --> 00:06:40,969
code that's running to decide whether

00:06:38,300 --> 00:06:42,590
something is good or bad it's a biased

00:06:40,969 --> 00:06:44,330
value you might say

00:06:42,590 --> 00:06:46,220
so essentially we're using this for

00:06:44,330 --> 00:06:47,450
alerting when something goes down or

00:06:46,220 --> 00:06:49,490
when something is broken or when

00:06:47,450 --> 00:06:51,500
something is wrong but we can also use

00:06:49,490 --> 00:06:53,450
this for automated recovery so if

00:06:51,500 --> 00:06:55,700
service is stopped we can start it again

00:06:53,450 --> 00:06:58,070
if the disk is full we can delete some

00:06:55,700 --> 00:07:00,950
random files or something along those

00:06:58,070 --> 00:07:02,840
lines right the way this usually looks

00:07:00,950 --> 00:07:04,430
is that you enable a module that provide

00:07:02,840 --> 00:07:06,470
the various checks command you need and

00:07:04,430 --> 00:07:08,930
then you can use those check commands to

00:07:06,470 --> 00:07:11,420
check something then we have something

00:07:08,930 --> 00:07:14,360
slightly more modern if you will metrics

00:07:11,420 --> 00:07:16,040
this was introduced in the 70s or 80s or

00:07:14,360 --> 00:07:19,790
something along those lines

00:07:16,040 --> 00:07:21,830
but it's become really hipster again the

00:07:19,790 --> 00:07:24,350
difference between a metric and a check

00:07:21,830 --> 00:07:26,990
is essentially that it's unbiased we say

00:07:24,350 --> 00:07:28,340
the value is 45 and then someone else

00:07:26,990 --> 00:07:31,580
will have to decide whether that is good

00:07:28,340 --> 00:07:33,380
or that is bad the way that works is

00:07:31,580 --> 00:07:34,970
usually you load the module that provide

00:07:33,380 --> 00:07:36,500
the matrix and the matrix is just there

00:07:34,970 --> 00:07:38,810
and then you can ship them off to your

00:07:36,500 --> 00:07:40,190
lastik or you can shift into graphite or

00:07:38,810 --> 00:07:41,570
you can do some processing with them to

00:07:40,190 --> 00:07:44,510
figure out where you want to go from

00:07:41,570 --> 00:07:46,280
there we can also take this performance

00:07:44,510 --> 00:07:49,520
data from worriers check commands that

00:07:46,280 --> 00:07:51,440
we you know install or download then the

00:07:49,520 --> 00:07:52,970
way to do that is slightly more involved

00:07:51,440 --> 00:07:55,160
because then we need to have someone who

00:07:52,970 --> 00:07:57,200
runs that check command and you know

00:07:55,160 --> 00:07:58,910
every five minutes or five seconds or

00:07:57,200 --> 00:08:00,980
whatever and then we can take the metric

00:07:58,910 --> 00:08:01,880
part of that shechem and and send that

00:08:00,980 --> 00:08:04,010
to somewhere

00:08:01,880 --> 00:08:06,080
for instance graphite or elastic and

00:08:04,010 --> 00:08:08,060
then we have events and that's

00:08:06,080 --> 00:08:10,250
essentially when something happens like

00:08:08,060 --> 00:08:11,870
civilization ending or a process is

00:08:10,250 --> 00:08:15,890
stopped or something along those lines

00:08:11,870 --> 00:08:17,780
right and this is a good way to enforce

00:08:15,890 --> 00:08:19,490
States because if a process is stopped

00:08:17,780 --> 00:08:22,100
that shouldn't be we can again start it

00:08:19,490 --> 00:08:23,990
but this is more coarse grained than for

00:08:22,100 --> 00:08:27,790
instance jackman or something like that

00:08:23,990 --> 00:08:30,500
so we can do a lot more things with it

00:08:27,790 --> 00:08:32,870
this usually looks to a bit like this we

00:08:30,500 --> 00:08:34,940
enable the module that supports you know

00:08:32,870 --> 00:08:36,590
the thing we mean we want to monitor and

00:08:34,940 --> 00:08:39,320
then we create some sort of filter

00:08:36,590 --> 00:08:41,120
saying that hey notepad is started let's

00:08:39,320 --> 00:08:43,070
do something we can send that to the

00:08:41,120 --> 00:08:45,080
notification somewhere or we can you

00:08:43,070 --> 00:08:47,210
know inject logic that will do something

00:08:45,080 --> 00:08:50,210
like start something stop something or

00:08:47,210 --> 00:08:51,710
change something right we also support

00:08:50,210 --> 00:08:53,330
logs but it's important to understand

00:08:51,710 --> 00:08:56,090
that we don't actually support logging

00:08:53,330 --> 00:08:58,280
as in shipping logs back and forth

00:08:56,090 --> 00:09:00,500
so this is not a replacement for you

00:08:58,280 --> 00:09:02,450
know Splunk or elastic logging or

00:09:00,500 --> 00:09:04,400
something like that but what we can do

00:09:02,450 --> 00:09:08,000
is we can read logs and we can interpret

00:09:04,400 --> 00:09:09,260
logs and we can find things in laws the

00:09:08,000 --> 00:09:10,820
way this usually works is that you

00:09:09,260 --> 00:09:13,370
enable the log and then you run the

00:09:10,820 --> 00:09:15,110
command with yay many parameters because

00:09:13,370 --> 00:09:17,060
you need to specify the format you know

00:09:15,110 --> 00:09:19,700
the file how we're going to parse it

00:09:17,060 --> 00:09:21,740
what we're looking for this is also

00:09:19,700 --> 00:09:23,060
highly inefficient because every time we

00:09:21,740 --> 00:09:24,650
run this command we usually have to

00:09:23,060 --> 00:09:27,080
start at the top of the log and go all

00:09:24,650 --> 00:09:29,060
the way down right much more efficient

00:09:27,080 --> 00:09:30,260
way is to listen for events which means

00:09:29,060 --> 00:09:31,910
that we are looking at a stream of

00:09:30,260 --> 00:09:32,960
events and we are processing one them

00:09:31,910 --> 00:09:35,750
one by one

00:09:32,960 --> 00:09:37,310
this is less overhead and you know they

00:09:35,750 --> 00:09:39,230
will just be processing they're the new

00:09:37,310 --> 00:09:40,940
events that's written we can do this for

00:09:39,230 --> 00:09:44,900
logs so for event logs or things like

00:09:40,940 --> 00:09:47,360
that right then we have scripts for

00:09:44,900 --> 00:09:48,980
essentially everything else and this is

00:09:47,360 --> 00:09:51,500
kind of where you know in his client

00:09:48,980 --> 00:09:53,360
shines because with these scripts we can

00:09:51,500 --> 00:09:54,890
do anything really we can you know write

00:09:53,360 --> 00:09:57,080
our own protocols we can write our own

00:09:54,890 --> 00:09:59,600
check commands we can process metrics

00:09:57,080 --> 00:10:01,880
and we can did change and combine things

00:09:59,600 --> 00:10:03,440
so this is very good for adding custom

00:10:01,880 --> 00:10:05,120
behavior but it's also very good for

00:10:03,440 --> 00:10:07,280
modifying behavior you know if you don't

00:10:05,120 --> 00:10:10,400
like how something works we can change

00:10:07,280 --> 00:10:12,230
that the way this usually looks is that

00:10:10,400 --> 00:10:13,610
we enable the module that provides the

00:10:12,230 --> 00:10:14,780
scripting support and then we load our

00:10:13,610 --> 00:10:16,730
scripts and that's pretty much it

00:10:14,780 --> 00:10:21,770
obviously we need to write them as well

00:10:16,730 --> 00:10:25,339
right and these are sort of the tools

00:10:21,770 --> 00:10:26,900
that are in the toolbox to actually

00:10:25,339 --> 00:10:28,430
start using them the first thing we need

00:10:26,900 --> 00:10:30,680
to figure out is which protocol are we

00:10:28,430 --> 00:10:33,470
going to use because if using a singer

00:10:30,680 --> 00:10:35,600
or some other monetary tool have a whole

00:10:33,470 --> 00:10:39,080
floor of protocols that you can use to

00:10:35,600 --> 00:10:41,300
talk to any clients I personally tend to

00:10:39,080 --> 00:10:42,710
sort of favor rest based communication

00:10:41,300 --> 00:10:44,870
because it's easy to firewall and is

00:10:42,710 --> 00:10:46,820
easy to manage and then you can use

00:10:44,870 --> 00:10:50,180
check NSEP web which will you know

00:10:46,820 --> 00:10:52,460
invoked rest rest api but i think most

00:10:50,180 --> 00:10:53,839
people probably use an RPE or an or DP

00:10:52,460 --> 00:10:56,150
depending on where they're coming from

00:10:53,839 --> 00:10:58,280
and of course graphite is my go-to

00:10:56,150 --> 00:11:01,010
system for metrics but you can also go

00:10:58,280 --> 00:11:02,450
elastic in other solution as well the

00:11:01,010 --> 00:11:04,430
other thing you need to figure out is

00:11:02,450 --> 00:11:06,560
which check paradigm you have because

00:11:04,430 --> 00:11:09,020
again given the nagas inheritance there

00:11:06,560 --> 00:11:09,870
is different ways to do monitoring we

00:11:09,020 --> 00:11:11,640
can either do it

00:11:09,870 --> 00:11:14,490
Dibley which means that the central

00:11:11,640 --> 00:11:17,310
server goes out every five minutes and

00:11:14,490 --> 00:11:20,370
say hey are you doing fine hey are you

00:11:17,310 --> 00:11:22,950
doing fine still fine and it does that

00:11:20,370 --> 00:11:24,570
every five minutes but then we have the

00:11:22,950 --> 00:11:26,580
other so-called paradigm which is

00:11:24,570 --> 00:11:28,050
passive monitoring and essentially what

00:11:26,580 --> 00:11:30,990
we're saying here is the opposite so

00:11:28,050 --> 00:11:32,550
that the server is going a sort of a the

00:11:30,990 --> 00:11:34,560
monitored host is going to the server

00:11:32,550 --> 00:11:37,920
saying I'm still feeling fine don't

00:11:34,560 --> 00:11:40,320
worry it's always been kind of weird to

00:11:37,920 --> 00:11:42,540
me why we have this because essentially

00:11:40,320 --> 00:11:45,330
it's a firewall paradigm right why do I

00:11:42,540 --> 00:11:47,400
have to change the tool sets because my

00:11:45,330 --> 00:11:49,020
firewall goes in a different way or my

00:11:47,400 --> 00:11:51,690
network is set up differently or

00:11:49,020 --> 00:11:52,910
something along those lines it's weird

00:11:51,690 --> 00:11:55,950
but you know

00:11:52,910 --> 00:11:57,660
Nagios is an old product and you know

00:11:55,950 --> 00:11:59,460
all of the product is sort of build on

00:11:57,660 --> 00:12:01,410
top of Nagas has inherited a lot of

00:11:59,460 --> 00:12:03,600
their good and bad things from Nadia's

00:12:01,410 --> 00:12:05,660
right so maybe this is just something

00:12:03,600 --> 00:12:08,100
that comes from that sort of ballpark

00:12:05,660 --> 00:12:10,050
but then we have the whole metrics world

00:12:08,100 --> 00:12:11,940
right and and again we have different

00:12:10,050 --> 00:12:14,580
paradigms because in the metrics world

00:12:11,940 --> 00:12:16,110
we can either pull or metrics which

00:12:14,580 --> 00:12:18,209
means that you know Prometheus or

00:12:16,110 --> 00:12:21,750
whatever goes out to all your hosts and

00:12:18,209 --> 00:12:23,670
fetches these metrics every five seconds

00:12:21,750 --> 00:12:26,820
or thirty seconds or whatever you like

00:12:23,670 --> 00:12:29,010
but we can also push metrics which is

00:12:26,820 --> 00:12:30,540
obviously the opposite right so all your

00:12:29,010 --> 00:12:32,430
monitor costs will take their metrics

00:12:30,540 --> 00:12:35,550
push them to central repository

00:12:32,430 --> 00:12:37,770
somewhere and then you go like really we

00:12:35,550 --> 00:12:39,900
didn't change anything we just changed

00:12:37,770 --> 00:12:41,790
the format's we still have different

00:12:39,900 --> 00:12:42,959
solutions and what's even worse in this

00:12:41,790 --> 00:12:44,959
case is that there is a lot of

00:12:42,959 --> 00:12:47,820
proprietary solution which means that

00:12:44,959 --> 00:12:49,170
it's not just changing the protocol we

00:12:47,820 --> 00:12:50,880
also need to change the entire tool

00:12:49,170 --> 00:12:52,860
stock when we need to change our

00:12:50,880 --> 00:12:54,480
firewall paradigms I mean if you're

00:12:52,860 --> 00:12:56,160
using Prometheus and you want to change

00:12:54,480 --> 00:13:00,390
from push or pull to pull base model

00:12:56,160 --> 00:13:01,920
it's gonna be a lot more work so

00:13:00,390 --> 00:13:03,959
hopefully at some point someone will

00:13:01,920 --> 00:13:05,520
come up with a standard that can do both

00:13:03,959 --> 00:13:07,080
of these without having to change

00:13:05,520 --> 00:13:09,240
everything right so that we can just

00:13:07,080 --> 00:13:12,839
have a monitoring protocol that supports

00:13:09,240 --> 00:13:14,250
all of this now you're probably sitting

00:13:12,839 --> 00:13:16,730
there angrily saying you know hey

00:13:14,250 --> 00:13:20,040
passwords right Kuban eat a stalker

00:13:16,730 --> 00:13:23,120
where is it I want it and you're not

00:13:20,040 --> 00:13:23,120
gonna get it sorry

00:13:23,520 --> 00:13:27,240
this is something I've been pondering

00:13:25,230 --> 00:13:30,120
for for the last year you know should

00:13:27,240 --> 00:13:31,920
you do checks or metrics because I come

00:13:30,120 --> 00:13:33,660
from a Nagios background so from each

00:13:31,920 --> 00:13:35,730
acts has always been the go-to thing and

00:13:33,660 --> 00:13:38,490
nowadays a lot of the hipster guys are

00:13:35,730 --> 00:13:40,140
doing mark metrics and you know should

00:13:38,490 --> 00:13:42,360
you just abandon checks and go with

00:13:40,140 --> 00:13:43,830
metrics or not and I think last year

00:13:42,360 --> 00:13:45,840
when I talked about this I said that you

00:13:43,830 --> 00:13:47,580
need both at some point you need graphs

00:13:45,840 --> 00:13:51,060
to look at things but you also need

00:13:47,580 --> 00:13:52,800
alerting but you also needed other

00:13:51,060 --> 00:13:53,910
things as well because you need logs to

00:13:52,800 --> 00:13:56,070
be able to get visibility into your

00:13:53,910 --> 00:13:57,570
system and you need to capture events to

00:13:56,070 --> 00:13:59,730
be able to overlay them on your graphs

00:13:57,570 --> 00:14:01,680
right so to have some sort of

00:13:59,730 --> 00:14:03,330
observability setup you need to have all

00:14:01,680 --> 00:14:05,700
of these you can't just have one or two

00:14:03,330 --> 00:14:07,830
or anything like that now for the astute

00:14:05,700 --> 00:14:10,110
reader you probably notice that if we

00:14:07,830 --> 00:14:13,170
have a check we can turn that into a

00:14:10,110 --> 00:14:14,700
metric by using the performance data so

00:14:13,170 --> 00:14:16,410
arguably as long as you have a check

00:14:14,700 --> 00:14:18,270
based solution you can just take all the

00:14:16,410 --> 00:14:19,680
performance data send that to your data

00:14:18,270 --> 00:14:22,470
warehouse somewhere and then you have a

00:14:19,680 --> 00:14:24,780
metric solution right we showcase this a

00:14:22,470 --> 00:14:26,520
couple of slides ago and for all of the

00:14:24,780 --> 00:14:28,470
primitives people in the audience you

00:14:26,520 --> 00:14:30,660
know that's what Prometheus does right

00:14:28,470 --> 00:14:33,690
it takes a metric and it turns into

00:14:30,660 --> 00:14:37,020
alert or a check if you will telling you

00:14:33,690 --> 00:14:38,610
whether this value is good or bad so it

00:14:37,020 --> 00:14:40,650
could be argued that if we have one of

00:14:38,610 --> 00:14:43,470
these we can sort of transform it into

00:14:40,650 --> 00:14:45,120
the other and again then the question

00:14:43,470 --> 00:14:47,640
becomes kind of valid you know should

00:14:45,120 --> 00:14:49,980
you just have metrics or should you have

00:14:47,640 --> 00:14:51,540
checks right should we abandon the whole

00:14:49,980 --> 00:14:53,490
concept of checks and just start going

00:14:51,540 --> 00:14:56,520
with you know the metrics way because

00:14:53,490 --> 00:14:58,290
that's what's a lot of the like the big

00:14:56,520 --> 00:15:02,010
companies like uber and Google and those

00:14:58,290 --> 00:15:03,810
are doing right and I've sort of been

00:15:02,010 --> 00:15:06,090
pondering this I I worked for for a

00:15:03,810 --> 00:15:08,430
large one who stored up anymore but

00:15:06,090 --> 00:15:10,740
large FinTech companies Sweden and they

00:15:08,430 --> 00:15:12,870
were going you know all metrics and we

00:15:10,740 --> 00:15:14,430
had a lot of issues there and currently

00:15:12,870 --> 00:15:16,650
I'm working for really small company and

00:15:14,430 --> 00:15:20,310
you go like so should we go metrics or

00:15:16,650 --> 00:15:21,690
should we go checks and this is

00:15:20,310 --> 00:15:23,340
something which I've sort of looked at

00:15:21,690 --> 00:15:24,840
from different dimensions in different

00:15:23,340 --> 00:15:26,730
directions and what I'm going to try to

00:15:24,840 --> 00:15:29,040
sort of I'm not going to answer which

00:15:26,730 --> 00:15:30,330
one is better but I'm gonna try to shed

00:15:29,040 --> 00:15:32,430
some light on the differences between

00:15:30,330 --> 00:15:34,200
them and and just sort of to clarify

00:15:32,430 --> 00:15:36,819
when I say check what I mean is that

00:15:34,200 --> 00:15:38,679
we're running some code on the nodes

00:15:36,819 --> 00:15:40,989
we are monitoring to figure out whether

00:15:38,679 --> 00:15:42,519
something is good or bad and when I talk

00:15:40,989 --> 00:15:44,139
about a metric we're essentially just

00:15:42,519 --> 00:15:46,779
fetching values and we are processing

00:15:44,139 --> 00:15:51,669
all of those centrally in our monitoring

00:15:46,779 --> 00:15:53,789
solution and we're going to look at this

00:15:51,669 --> 00:15:56,619
first from a technological perspective

00:15:53,789 --> 00:15:58,569
if we look look at checks from the

00:15:56,619 --> 00:16:00,669
purely technological perspective gives

00:15:58,569 --> 00:16:02,859
us a lot control because we're executing

00:16:00,669 --> 00:16:04,749
code it means we can do things right we

00:16:02,859 --> 00:16:07,169
can say first we do this then we do this

00:16:04,749 --> 00:16:09,549
and then we evaluate something right

00:16:07,169 --> 00:16:11,829
it's also easier to reason about this

00:16:09,549 --> 00:16:14,079
because it's a number that's going to

00:16:11,829 --> 00:16:16,329
specific costs so if you're looking at

00:16:14,079 --> 00:16:18,519
that machine we can see how that number

00:16:16,329 --> 00:16:20,739
affects things by looking at logs or

00:16:18,519 --> 00:16:23,019
stocks or something like that right so

00:16:20,739 --> 00:16:24,459
it's easier to reason about it when

00:16:23,019 --> 00:16:26,169
you're going with checks it's also a lot

00:16:24,459 --> 00:16:26,769
more extensible if the value doesn't

00:16:26,169 --> 00:16:29,079
exist

00:16:26,769 --> 00:16:31,149
you can add that value by you know doing

00:16:29,079 --> 00:16:34,119
some sort of logic or by executing code

00:16:31,149 --> 00:16:35,679
right now on the other hand the problem

00:16:34,119 --> 00:16:38,139
with checks is that they tend to be

00:16:35,679 --> 00:16:40,209
rather simple and stupid I mean if you

00:16:38,139 --> 00:16:42,639
look at most of the Czech based

00:16:40,209 --> 00:16:44,709
monitoring solutions 90% of it will be

00:16:42,639 --> 00:16:48,039
you know Czech CPU check memory check

00:16:44,709 --> 00:16:50,019
disk it's not very helpful right and you

00:16:48,039 --> 00:16:52,059
end up with having you know 25 different

00:16:50,019 --> 00:16:53,799
checks for checking your sequel server

00:16:52,059 --> 00:16:55,629
or something like that which is not very

00:16:53,799 --> 00:16:57,220
helpful either and it's quite hard to

00:16:55,629 --> 00:16:58,779
manage because you need to write all of

00:16:57,220 --> 00:16:59,649
these scripts you need to transport all

00:16:58,779 --> 00:17:02,259
of these scripts and you need to

00:16:59,649 --> 00:17:04,870
maintain them right then it requires a

00:17:02,259 --> 00:17:06,220
lot of upfront configuration you need to

00:17:04,870 --> 00:17:07,539
figure out what do I actually need to

00:17:06,220 --> 00:17:09,159
monitor here you know which scripts do I

00:17:07,539 --> 00:17:12,279
have you need to research them figure

00:17:09,159 --> 00:17:14,110
out now if you look at metrics instead

00:17:12,279 --> 00:17:16,149
we have this magical time dimension

00:17:14,110 --> 00:17:19,209
right I mean we can see how things

00:17:16,149 --> 00:17:21,939
change throughout history and that is

00:17:19,209 --> 00:17:24,250
really really powerful and it is really

00:17:21,939 --> 00:17:26,259
really magical because it means that if

00:17:24,250 --> 00:17:27,990
I am tuning and tweaking my monitoring I

00:17:26,259 --> 00:17:30,399
can see how that would have happened

00:17:27,990 --> 00:17:30,970
previously right if I change the

00:17:30,399 --> 00:17:32,559
treshold

00:17:30,970 --> 00:17:34,210
I can look at the data I had for the

00:17:32,559 --> 00:17:36,309
previous week or the previous month and

00:17:34,210 --> 00:17:38,169
I can replay that stream of events and I

00:17:36,309 --> 00:17:40,149
can see how that would have impacted the

00:17:38,169 --> 00:17:42,610
decisions the monitoring system would

00:17:40,149 --> 00:17:44,710
have taken it's easier for me to

00:17:42,610 --> 00:17:46,389
actually see what my changes will do

00:17:44,710 --> 00:17:48,909
without having to wait for the next

00:17:46,389 --> 00:17:50,530
thing to break right or having to fake

00:17:48,909 --> 00:17:52,150
something breaking

00:17:50,530 --> 00:17:53,860
and you can also take all of these

00:17:52,150 --> 00:17:55,660
numbers and just shoehorn them into some

00:17:53,860 --> 00:17:57,340
awesome machine learning algorithm and

00:17:55,660 --> 00:17:59,230
Ops forms you know millions of false

00:17:57,340 --> 00:18:00,580
positives that's just awesome because

00:17:59,230 --> 00:18:02,490
then you'll be woken up for no apparent

00:18:00,580 --> 00:18:06,550
reason whatsoever

00:18:02,490 --> 00:18:09,970
now the drawback to metrics it's

00:18:06,550 --> 00:18:12,790
actually dimensions because it's really

00:18:09,970 --> 00:18:15,630
difficult to see something when you have

00:18:12,790 --> 00:18:18,220
this huge sea of data I mean if you have

00:18:15,630 --> 00:18:20,200
accidentally grouped ten servers

00:18:18,220 --> 00:18:22,360
together you can't really tell that from

00:18:20,200 --> 00:18:24,070
a graph right because the graph is just

00:18:22,360 --> 00:18:25,840
showcasing all the numbers if you have

00:18:24,070 --> 00:18:28,090
two servers five servers or ten servers

00:18:25,840 --> 00:18:29,920
you're not gonna see that so unless you

00:18:28,090 --> 00:18:31,690
have a very good dimensional strategy

00:18:29,920 --> 00:18:34,300
it's very easy to get lost and get the

00:18:31,690 --> 00:18:36,250
wrong metrics it's also that you you get

00:18:34,300 --> 00:18:38,530
a lot of metrics just out of the box

00:18:36,250 --> 00:18:40,330
which means that you have you know 10 20

00:18:38,530 --> 00:18:41,770
different metrics for response time and

00:18:40,330 --> 00:18:43,180
it can be kind of difficult to

00:18:41,770 --> 00:18:45,520
understand what the difference is

00:18:43,180 --> 00:18:47,620
between mix metrics and I mean one thing

00:18:45,520 --> 00:18:48,790
that really we had an issue with was

00:18:47,620 --> 00:18:51,460
that we had like an admin interface

00:18:48,790 --> 00:18:52,780
where we do you know keep lives and then

00:18:51,460 --> 00:18:54,520
we had a service interface and we

00:18:52,780 --> 00:18:56,200
accidentally took the response time from

00:18:54,520 --> 00:18:57,670
both of these because we didn't

00:18:56,200 --> 00:19:00,010
differentiate between the two interfaces

00:18:57,670 --> 00:19:01,810
in our dimensions which meant that we

00:19:00,010 --> 00:19:03,640
didn't really detect that we had bad

00:19:01,810 --> 00:19:06,010
response times on the service interface

00:19:03,640 --> 00:19:08,290
because the average values coming from

00:19:06,010 --> 00:19:10,420
the admin interface and the load

00:19:08,290 --> 00:19:12,700
balancer poling every 10 seconds sort of

00:19:10,420 --> 00:19:14,410
made everything look good right it's

00:19:12,700 --> 00:19:16,150
also difficult to reason about this

00:19:14,410 --> 00:19:17,920
because it's all functional so you take

00:19:16,150 --> 00:19:19,510
all these values and then you transform

00:19:17,920 --> 00:19:21,790
them into other values and into other

00:19:19,510 --> 00:19:23,920
values and you add all these functions

00:19:21,790 --> 00:19:25,240
on top of it and out comes something

00:19:23,920 --> 00:19:27,600
that looks really nice but you don't

00:19:25,240 --> 00:19:30,070
really know what it is right and

00:19:27,600 --> 00:19:31,450
unfortunately a lot of these tools we

00:19:30,070 --> 00:19:34,120
have on top of these they don't really

00:19:31,450 --> 00:19:35,830
help you with this they just say yeah

00:19:34,120 --> 00:19:37,480
you know let's do a derivative here you

00:19:35,830 --> 00:19:39,730
know let's add something and then we do

00:19:37,480 --> 00:19:42,730
a you know integration or something and

00:19:39,730 --> 00:19:45,030
and from a mathematical perspective this

00:19:42,730 --> 00:19:46,870
has absolutely no meaning whatsoever

00:19:45,030 --> 00:19:48,640
something that's quite common is people

00:19:46,870 --> 00:19:50,140
who are doing averages of averages of

00:19:48,640 --> 00:19:52,870
averages which mathematically means

00:19:50,140 --> 00:19:55,150
absolutely nothing and it's very easy to

00:19:52,870 --> 00:19:57,550
get lost in all of these functions that

00:19:55,150 --> 00:19:59,650
you need to add because there is no one

00:19:57,550 --> 00:20:01,830
who's dictating how this actually works

00:19:59,650 --> 00:20:04,120
from a mathematical perspective and

00:20:01,830 --> 00:20:07,270
mathematic math is really really hot

00:20:04,120 --> 00:20:08,650
it's difficult to get this right so I

00:20:07,270 --> 00:20:10,600
think if we look at this from a

00:20:08,650 --> 00:20:12,970
technological perspective I'm not so

00:20:10,600 --> 00:20:15,360
sure that metrics is actually a benefit

00:20:12,970 --> 00:20:18,040
I mean the time thing is quite magical

00:20:15,360 --> 00:20:19,930
but the drawback is that the tools we

00:20:18,040 --> 00:20:22,120
have currently are very limiting they

00:20:19,930 --> 00:20:24,730
don't really help you to understand the

00:20:22,120 --> 00:20:26,860
data they give you really nice graphs

00:20:24,730 --> 00:20:28,720
they look good but they don't really

00:20:26,860 --> 00:20:30,790
ensure that those graphs reflects the

00:20:28,720 --> 00:20:32,560
truth and they don't really ensure that

00:20:30,790 --> 00:20:34,330
the thing you're looking at is actually

00:20:32,560 --> 00:20:35,950
the thing you want to look at and I mean

00:20:34,330 --> 00:20:38,800
how many people have testing for their

00:20:35,950 --> 00:20:42,970
graphs it can't be done right so you're

00:20:38,800 --> 00:20:44,350
just hoping that it's working and but

00:20:42,970 --> 00:20:45,910
but it that said you know the time

00:20:44,350 --> 00:20:48,400
dimension is interesting and that gives

00:20:45,910 --> 00:20:50,290
us a lot of power so if you look at this

00:20:48,400 --> 00:20:52,150
you know for legacy versus Greenfield

00:20:50,290 --> 00:20:54,520
right I mean if you have an old legacy

00:20:52,150 --> 00:20:56,290
infrastructure that's already running

00:20:54,520 --> 00:20:57,970
you're monitoring it's established you

00:20:56,290 --> 00:20:59,950
know what you're doing you can always

00:20:57,970 --> 00:21:02,530
add metrics on the side and do pretty

00:20:59,950 --> 00:21:04,480
graphs right it's gonna be easy if

00:21:02,530 --> 00:21:05,860
you're gonna change all of this over to

00:21:04,480 --> 00:21:08,530
a metric space solution it's gonna be

00:21:05,860 --> 00:21:11,050
really expensive it might be better we

00:21:08,530 --> 00:21:13,210
don't know but you're gonna have to

00:21:11,050 --> 00:21:14,500
relearn everything right so for a legacy

00:21:13,210 --> 00:21:16,780
case it's probably not going to be

00:21:14,500 --> 00:21:17,710
beneficial to move matrix but what if

00:21:16,780 --> 00:21:19,240
you have this you know you're gonna

00:21:17,710 --> 00:21:20,560
build a brand new Ferrari you get to

00:21:19,240 --> 00:21:22,600
pick your frameworks you get to pick

00:21:20,560 --> 00:21:27,010
your infrastructure libraries everything

00:21:22,600 --> 00:21:28,810
right you can do whatever you want now

00:21:27,010 --> 00:21:31,120
if you do this with checks it's easy to

00:21:28,810 --> 00:21:32,470
prototype these because you can say that

00:21:31,120 --> 00:21:34,390
we're gonna run this and this and this

00:21:32,470 --> 00:21:37,360
check on this system to make sure that

00:21:34,390 --> 00:21:39,460
it's running it's gonna be a it's much

00:21:37,360 --> 00:21:41,080
better learning curve because you don't

00:21:39,460 --> 00:21:43,480
need to figure out how about all these

00:21:41,080 --> 00:21:45,010
metrics do I mean the way at least I

00:21:43,480 --> 00:21:46,570
usually a protest in a metric space

00:21:45,010 --> 00:21:48,220
solution is that I sit for three weeks

00:21:46,570 --> 00:21:49,570
and I look at the graphs and I try

00:21:48,220 --> 00:21:51,760
figure out which ones are actually

00:21:49,570 --> 00:21:53,380
useful to me right and and it's

00:21:51,760 --> 00:21:55,270
difficult to do that up front you

00:21:53,380 --> 00:21:56,860
usually end up doing that down the line

00:21:55,270 --> 00:21:58,570
when something is broken and I said oh

00:21:56,860 --> 00:22:00,010
so this was the graph I should have been

00:21:58,570 --> 00:22:01,300
looking at and then the next week

00:22:00,010 --> 00:22:03,160
something else breaks and then you look

00:22:01,300 --> 00:22:05,410
oh so this one which was this week I

00:22:03,160 --> 00:22:07,750
should have been looking at right and

00:22:05,410 --> 00:22:09,280
you know with checks we can still graph

00:22:07,750 --> 00:22:11,800
performance data so we can still have

00:22:09,280 --> 00:22:14,050
all of these metrics but if we do the

00:22:11,800 --> 00:22:17,470
bias thing with something we understand

00:22:14,050 --> 00:22:17,980
it's going to be easier now if we do

00:22:17,470 --> 00:22:20,019
this with

00:22:17,980 --> 00:22:22,240
tricks instead we probably will get a

00:22:20,019 --> 00:22:25,120
huge uptake in developer involvements

00:22:22,240 --> 00:22:27,010
and that is a key factor because if the

00:22:25,120 --> 00:22:29,950
developers are helping you to build your

00:22:27,010 --> 00:22:31,870
monitoring it's gonna be way better than

00:22:29,950 --> 00:22:34,149
you building your monitoring on top of

00:22:31,870 --> 00:22:36,010
whatever they have developed but this

00:22:34,149 --> 00:22:37,600
sort of assumes that your developers are

00:22:36,010 --> 00:22:38,830
you know friendly and will help you with

00:22:37,600 --> 00:22:41,409
this and that's not always the case

00:22:38,830 --> 00:22:43,750
right so in a situation where the

00:22:41,409 --> 00:22:45,909
developers have the potential that

00:22:43,750 --> 00:22:48,730
they're gonna run this system this is

00:22:45,909 --> 00:22:50,440
gonna fly really well but in a situation

00:22:48,730 --> 00:22:51,789
where you know they think that yeah

00:22:50,440 --> 00:22:54,519
those guys are gonna run it I don't

00:22:51,789 --> 00:22:57,070
really care it's might not fly quite so

00:22:54,519 --> 00:22:59,230
well what we will get though is a much

00:22:57,070 --> 00:23:00,639
more modern architecture I mean the

00:22:59,230 --> 00:23:02,950
metrics base tools they're built to

00:23:00,639 --> 00:23:04,779
scale most of the check based tools are

00:23:02,950 --> 00:23:07,200
quite frankly not built to scale and

00:23:04,779 --> 00:23:09,700
they're difficult to scale that said

00:23:07,200 --> 00:23:12,580
Prometheus enterprise scale is not easy

00:23:09,700 --> 00:23:14,440
either because of security issues and

00:23:12,580 --> 00:23:17,500
things like that and and scaling huge

00:23:14,440 --> 00:23:19,510
data sets it's not easy as well but what

00:23:17,500 --> 00:23:21,940
they do have is there's a lot of good

00:23:19,510 --> 00:23:24,279
use cases and what I mean by that is you

00:23:21,940 --> 00:23:26,139
know if you have a service people at

00:23:24,279 --> 00:23:28,149
Google and you BRR and things like that

00:23:26,139 --> 00:23:29,919
they've written long articles about how

00:23:28,149 --> 00:23:32,200
they do monitoring you know which

00:23:29,919 --> 00:23:34,870
metrics do they look for how do they

00:23:32,200 --> 00:23:36,460
interpret these metrics and that is

00:23:34,870 --> 00:23:39,700
really really powerful because it means

00:23:36,460 --> 00:23:41,200
that you can know how to do this maybe

00:23:39,700 --> 00:23:43,269
not the right way but at least the right

00:23:41,200 --> 00:23:44,860
way according to someone else if you

00:23:43,269 --> 00:23:46,480
look at the check based monitoring you

00:23:44,860 --> 00:23:48,340
know a best-case scenario is someone who

00:23:46,480 --> 00:23:51,309
wrote a PDF about monitoring you know

00:23:48,340 --> 00:23:53,830
sequel server 15 years ago that's not

00:23:51,309 --> 00:23:55,149
gonna be very helpful right and so I

00:23:53,830 --> 00:23:56,620
think if we look at this from a legacy

00:23:55,149 --> 00:23:59,500
spective it's probably not gonna be

00:23:56,620 --> 00:24:02,230
beneficial to new tracks and you know in

00:23:59,500 --> 00:24:03,940
this Greenfield scenario maybe but I'm

00:24:02,230 --> 00:24:05,679
not convinced that it's a clear case I'm

00:24:03,940 --> 00:24:07,929
not saying that you know metrics is

00:24:05,679 --> 00:24:10,899
worse I'm not saying checks is worse it

00:24:07,929 --> 00:24:12,130
depends you know so lastly we're gonna

00:24:10,899 --> 00:24:14,769
look at this from a historical

00:24:12,130 --> 00:24:16,539
perspective and you know the whole

00:24:14,769 --> 00:24:19,840
monitoring thing really started off with

00:24:16,539 --> 00:24:24,669
SNMP back in the eighties and you have

00:24:19,840 --> 00:24:27,669
all of these dots and numbers and I mean

00:24:24,669 --> 00:24:31,840
this this is still the thing today you

00:24:27,669 --> 00:24:35,590
know 20 30 years later so this was this

00:24:31,840 --> 00:24:37,480
not bad right but the reason why this

00:24:35,590 --> 00:24:39,640
worked was because it was standard

00:24:37,480 --> 00:24:41,650
hardware you know you had 25 different

00:24:39,640 --> 00:24:43,240
routers and that was it's right you know

00:24:41,650 --> 00:24:44,470
if you had a Cisco right or he swapped

00:24:43,240 --> 00:24:46,240
it out for some other router you're

00:24:44,470 --> 00:24:48,940
monitoring stay the same because they

00:24:46,240 --> 00:24:50,830
adhere to the same standard but the

00:24:48,940 --> 00:24:52,720
scope was very limited right we only

00:24:50,830 --> 00:24:55,240
have you know a number of devices that

00:24:52,720 --> 00:24:56,679
we could monitor and the reason why we

00:24:55,240 --> 00:24:59,080
had the dots was because of low

00:24:56,679 --> 00:25:00,669
bandwidth restrictions right but we

00:24:59,080 --> 00:25:04,330
could always explain the dots with you

00:25:00,669 --> 00:25:06,460
know various tables and along comes

00:25:04,330 --> 00:25:08,020
Nagios right the open source world and

00:25:06,460 --> 00:25:10,929
all of a sudden we have to monitor

00:25:08,020 --> 00:25:12,520
everything right it wasn't 25 boxes

00:25:10,929 --> 00:25:14,590
anymore it was hundreds of different

00:25:12,520 --> 00:25:16,059
software the people you know built in

00:25:14,590 --> 00:25:19,029
their basement that didn't have any

00:25:16,059 --> 00:25:21,279
monitoring whatsoever so the only way we

00:25:19,029 --> 00:25:23,049
could monitor these black boxes was by

00:25:21,279 --> 00:25:25,419
writing scripts that looked at various

00:25:23,049 --> 00:25:28,360
aspect of them right and and everything

00:25:25,419 --> 00:25:30,100
had to be free I've seen beer you said

00:25:28,360 --> 00:25:31,270
sat at the sales meeting you know and

00:25:30,100 --> 00:25:33,789
people were like what we're gonna pay

00:25:31,270 --> 00:25:35,590
for monitoring no no no no no let's go

00:25:33,789 --> 00:25:37,179
with something that's free and then we

00:25:35,590 --> 00:25:40,090
spent you know hundreds of hours

00:25:37,179 --> 00:25:41,500
configuring it which costs way more than

00:25:40,090 --> 00:25:44,830
having bought something but that's

00:25:41,500 --> 00:25:47,350
another story and this was kind of you

00:25:44,830 --> 00:25:49,090
know why nagas looks the way it looks

00:25:47,350 --> 00:25:50,980
right and in comes the Prometheus

00:25:49,090 --> 00:25:52,059
generation and I know that there is

00:25:50,980 --> 00:25:54,539
sense too and a whole bunch of other

00:25:52,059 --> 00:25:57,299
tools that kind of do the same thing and

00:25:54,539 --> 00:26:00,010
these are sort of built on top of

00:25:57,299 --> 00:26:01,899
custom-built solutions right I mean we

00:26:00,010 --> 00:26:04,360
have developers who are building a

00:26:01,899 --> 00:26:06,460
solution which should be monitored they

00:26:04,360 --> 00:26:08,799
are adding the metrics that they need to

00:26:06,460 --> 00:26:11,200
monitor their own solutions right it's

00:26:08,799 --> 00:26:13,720
extremely flexible because you can do

00:26:11,200 --> 00:26:15,669
whatever you want and if you're gonna

00:26:13,720 --> 00:26:17,649
monitor something you're building you're

00:26:15,669 --> 00:26:20,140
gonna be very prone to sort of expose

00:26:17,649 --> 00:26:21,789
the right metrics and how to scale it

00:26:20,140 --> 00:26:24,370
linearly which means that it should be

00:26:21,789 --> 00:26:25,899
really cheap when you start out and it

00:26:24,370 --> 00:26:28,000
could become really expensive down the

00:26:25,899 --> 00:26:30,279
line because once you are down the line

00:26:28,000 --> 00:26:32,620
you either have a load of seed

00:26:30,279 --> 00:26:34,179
money and then you know money is no

00:26:32,620 --> 00:26:35,940
effort or you have a lot of user and

00:26:34,179 --> 00:26:38,289
then you know money is no problem either

00:26:35,940 --> 00:26:41,649
but it has to be cheap when you start

00:26:38,289 --> 00:26:44,020
out right and this I think is really why

00:26:41,649 --> 00:26:45,639
we have a lot of traction in the metric

00:26:44,020 --> 00:26:48,429
space world because if you

00:26:45,639 --> 00:26:50,829
build it and you run it metrics makes a

00:26:48,429 --> 00:26:53,259
lot of sense because you can build in

00:26:50,829 --> 00:26:55,659
the metrics that you need to monitor the

00:26:53,259 --> 00:26:58,029
system on the other hand I usually end

00:26:55,659 --> 00:26:59,379
up in this scenario and then it's not

00:26:58,029 --> 00:27:01,029
clear case anymore because the

00:26:59,379 --> 00:27:02,950
developers is not gonna expose the

00:27:01,029 --> 00:27:05,049
metrics I need they're gonna you know

00:27:02,950 --> 00:27:06,969
shoehorn in some metrics library that

00:27:05,049 --> 00:27:08,739
just spews out millions of metrics that

00:27:06,969 --> 00:27:11,039
has no meaning whatsoever and they're

00:27:08,739 --> 00:27:14,049
gonna see monitoring done and move on

00:27:11,039 --> 00:27:15,849
and and somehow I need to interpret

00:27:14,049 --> 00:27:17,229
these and I need to figure out how I'm

00:27:15,849 --> 00:27:19,269
actually gonna work with all these

00:27:17,229 --> 00:27:22,179
metrics or you know whatever we have and

00:27:19,269 --> 00:27:24,070
in this scenario a check based solution

00:27:22,179 --> 00:27:26,229
is gonna allow you to actually take

00:27:24,070 --> 00:27:28,029
these values and make sense of them in a

00:27:26,229 --> 00:27:30,339
much more structured fashion than you

00:27:28,029 --> 00:27:32,679
will from a metric space solution so I

00:27:30,339 --> 00:27:34,029
think at some point you know when in the

00:27:32,679 --> 00:27:36,940
nagas day when we have to choose between

00:27:34,029 --> 00:27:38,829
passive or active monitoring we usually

00:27:36,940 --> 00:27:41,499
ended up having to use both right and

00:27:38,829 --> 00:27:43,479
you know when we come to metrics we

00:27:41,499 --> 00:27:45,070
needed push and pull because we had

00:27:43,479 --> 00:27:47,259
different firewall paradigms we had

00:27:45,070 --> 00:27:49,419
different ways of doing this monitoring

00:27:47,259 --> 00:27:50,909
and maybe it's the same you know maybe

00:27:49,419 --> 00:27:53,139
it's metrics and checks

00:27:50,909 --> 00:27:55,809
maybe the monitoring toolbox should be a

00:27:53,139 --> 00:27:58,629
singer and Prometheus not icinga or

00:27:55,809 --> 00:28:00,579
Prometheus and maybe we need to sort of

00:27:58,629 --> 00:28:02,649
realize that this is just the way things

00:28:00,579 --> 00:28:04,149
are now that we need a lot of tools in

00:28:02,649 --> 00:28:07,269
the toolbox and we need to use all of

00:28:04,149 --> 00:28:09,700
them but what we do need to do is make

00:28:07,269 --> 00:28:13,059
smart checks because regardless of if

00:28:09,700 --> 00:28:15,519
you are monitoring with metrics in

00:28:13,059 --> 00:28:16,690
Prometheus or if you are monitoring with

00:28:15,519 --> 00:28:19,599
Jackson icinga

00:28:16,690 --> 00:28:22,179
you know 80% CPU it's not gonna be

00:28:19,599 --> 00:28:24,219
helpful to you and the sad thing is you

00:28:22,179 --> 00:28:26,799
know when I was working at this large

00:28:24,219 --> 00:28:28,749
FinTech thing with you know several

00:28:26,799 --> 00:28:31,029
hundred different teams doing you know

00:28:28,749 --> 00:28:33,669
you build it you run it ninety percent

00:28:31,029 --> 00:28:37,389
of them was doing this I said what you

00:28:33,669 --> 00:28:39,099
don't have auto scale yeah so so when is

00:28:37,389 --> 00:28:41,369
this gonna be triggered I don't know but

00:28:39,099 --> 00:28:44,799
you know it's good to have monitoring

00:28:41,369 --> 00:28:46,509
yeah really good and you know the java

00:28:44,799 --> 00:28:47,799
application that you monitor memory on

00:28:46,509 --> 00:28:49,929
it's a bit like the memory line is

00:28:47,799 --> 00:28:52,839
completely flat because you configure

00:28:49,929 --> 00:28:54,519
java how much memory should have yeah it

00:28:52,839 --> 00:28:56,139
could be a bog in java that is sometimes

00:28:54,519 --> 00:28:57,429
takes more memory but you know probably

00:28:56,139 --> 00:28:59,559
nothing something you need to monitor

00:28:57,429 --> 00:29:01,809
for and same thing with disk space

00:28:59,559 --> 00:29:03,870
I mean all of these are just stupid to

00:29:01,809 --> 00:29:06,249
monitor they will not give you any help

00:29:03,870 --> 00:29:08,320
that said I would like to say that for

00:29:06,249 --> 00:29:09,779
the last two months I've had a lot of

00:29:08,320 --> 00:29:12,100
problems with disks running outs and

00:29:09,779 --> 00:29:13,840
even though we have auto scale but

00:29:12,100 --> 00:29:16,629
apparently they we haven't really

00:29:13,840 --> 00:29:20,320
configured doctor thing correctly or so

00:29:16,629 --> 00:29:22,210
they tell me anyway we need to do smart

00:29:20,320 --> 00:29:25,210
checks you know we need to do smart

00:29:22,210 --> 00:29:26,470
monitoring and we need to take this you

00:29:25,210 --> 00:29:29,080
know where we have a turnkey solution

00:29:26,470 --> 00:29:31,509
that just that doesn't just work for

00:29:29,080 --> 00:29:33,190
monitoring our services we need to be

00:29:31,509 --> 00:29:35,860
able to monitor our databases our

00:29:33,190 --> 00:29:38,110
storage our network and all of these

00:29:35,860 --> 00:29:39,669
infrastructure with the same ease and

00:29:38,110 --> 00:29:42,159
with the same best practices and with

00:29:39,669 --> 00:29:45,039
the same standard as we have for a lot

00:29:42,159 --> 00:29:47,440
of the services that we monitor today

00:29:45,039 --> 00:29:50,139
and and I know that you're all sitting

00:29:47,440 --> 00:29:52,480
there passwords right where is

00:29:50,139 --> 00:29:57,119
kubernetes where is it I want to have it

00:29:52,480 --> 00:29:57,119
right and we're not gonna get it sorry

00:29:59,100 --> 00:30:04,990
so in ennis client we have scripts that

00:30:02,200 --> 00:30:06,490
can actually do magical stuff right we

00:30:04,990 --> 00:30:08,799
can write them in Lua and Python and

00:30:06,490 --> 00:30:10,350
soon in rest hopefully but it's been

00:30:08,799 --> 00:30:12,879
saying that for quite awhile now and

00:30:10,350 --> 00:30:15,340
sort of their the concept here this is a

00:30:12,879 --> 00:30:16,779
Python script we are import some

00:30:15,340 --> 00:30:19,149
functions and then we have an init and a

00:30:16,779 --> 00:30:21,249
shutdown function init function runs

00:30:19,149 --> 00:30:23,259
when NS line starts shutdown function

00:30:21,249 --> 00:30:24,879
runs when NS line stops so in between

00:30:23,259 --> 00:30:27,580
you can do whatever you want right so

00:30:24,879 --> 00:30:29,080
this is a simple hello world and of

00:30:27,580 --> 00:30:30,820
course we can provide checks in these

00:30:29,080 --> 00:30:33,249
scripts if we want to have you know

00:30:30,820 --> 00:30:35,289
someone running checks on them the way

00:30:33,249 --> 00:30:37,480
we do that is by writing a function that

00:30:35,289 --> 00:30:40,509
implements the check and then we bind

00:30:37,480 --> 00:30:42,309
that to a command we can of course do

00:30:40,509 --> 00:30:44,379
metrics as well because you know we are

00:30:42,309 --> 00:30:45,999
fancy and modern right and the way that

00:30:44,379 --> 00:30:48,190
works is again we have a function that

00:30:45,999 --> 00:30:50,139
consumed the matrix we have a function

00:30:48,190 --> 00:30:52,179
that provides the matrix and we bind

00:30:50,139 --> 00:30:54,399
those and the cool thing here is that we

00:30:52,179 --> 00:30:56,409
can both read other metrics and we can

00:30:54,399 --> 00:30:58,990
produce our own matrix so we have the

00:30:56,409 --> 00:31:01,749
ability to take some matrix do some math

00:30:58,990 --> 00:31:04,149
on that and turn it hand it on to you

00:31:01,749 --> 00:31:05,649
know to another matrix somewhere and the

00:31:04,149 --> 00:31:08,559
interesting bit here is that we will be

00:31:05,649 --> 00:31:10,659
doing this on the machine so we don't

00:31:08,559 --> 00:31:12,000
need to care about dimensions we don't

00:31:10,659 --> 00:31:13,419
need to care about all of these

00:31:12,000 --> 00:31:15,899
difficult stuff

00:31:13,419 --> 00:31:18,519
because we are taking a value and

00:31:15,899 --> 00:31:20,769
transforming that into another value and

00:31:18,519 --> 00:31:22,539
then later down the stream we can do

00:31:20,769 --> 00:31:25,299
some you know fancy stuff across the

00:31:22,539 --> 00:31:27,609
whole set of data but that makes it

00:31:25,299 --> 00:31:29,169
easier to actually manage metrics then

00:31:27,609 --> 00:31:33,219
it would have been if we are doing all

00:31:29,169 --> 00:31:35,409
of this centrally of course events you

00:31:33,219 --> 00:31:36,999
know if the world were to end we can

00:31:35,409 --> 00:31:38,950
take care of that as well in this case

00:31:36,999 --> 00:31:40,899
we say that you know if you have a event

00:31:38,950 --> 00:31:43,119
coming from check system send that to my

00:31:40,899 --> 00:31:44,589
script and then I can do something so

00:31:43,119 --> 00:31:46,179
for instance is someone is starting a

00:31:44,589 --> 00:31:48,579
process or if someone is stopping a

00:31:46,179 --> 00:31:50,529
process we can do something figure out

00:31:48,579 --> 00:31:52,690
why it was started why it was stopped

00:31:50,529 --> 00:31:54,459
and then we can either kill it or start

00:31:52,690 --> 00:31:58,959
it or you know take some action or do

00:31:54,459 --> 00:32:01,089
something useful we can get a glimpse of

00:31:58,959 --> 00:32:02,679
this magical time dimension because we

00:32:01,089 --> 00:32:05,109
have a stateful script right so we can

00:32:02,679 --> 00:32:06,879
look at the past values we can look at

00:32:05,109 --> 00:32:09,279
well not future values but we can

00:32:06,879 --> 00:32:12,519
somehow impact future values by looking

00:32:09,279 --> 00:32:14,309
at the values we have currently and of

00:32:12,519 --> 00:32:17,859
course because we have you know

00:32:14,309 --> 00:32:20,529
configuration we can do that as well and

00:32:17,859 --> 00:32:22,959
then the interesting bit here is that if

00:32:20,529 --> 00:32:24,399
we do this through a standard interface

00:32:22,959 --> 00:32:25,839
it means that we can configure them

00:32:24,399 --> 00:32:28,629
through the registry if we're on Windows

00:32:25,839 --> 00:32:31,029
or a file or a remote storage or we can

00:32:28,629 --> 00:32:33,009
use the REST API to update this so we

00:32:31,029 --> 00:32:34,899
get all of these super powers just

00:32:33,009 --> 00:32:36,849
because we have scripts that are running

00:32:34,899 --> 00:32:38,859
in a framework that provides us with

00:32:36,849 --> 00:32:40,629
things we can do and of course you know

00:32:38,859 --> 00:32:43,779
we get the web interface for doing our

00:32:40,629 --> 00:32:45,729
configuration as well and then we talked

00:32:43,779 --> 00:32:48,039
about this briefly before we can't talk

00:32:45,729 --> 00:32:49,959
between our check commands so if you

00:32:48,039 --> 00:32:52,899
don't like the way a command is working

00:32:49,959 --> 00:32:55,389
or you want to change some tiny aspect

00:32:52,899 --> 00:32:57,129
of that command we can you know run that

00:32:55,389 --> 00:32:58,659
command and then we can modify it either

00:32:57,129 --> 00:33:00,969
on the request pipeline or on the

00:32:58,659 --> 00:33:03,070
response pipeline and this gives us the

00:33:00,969 --> 00:33:04,899
you know ability to fix something that's

00:33:03,070 --> 00:33:06,759
slightly broken or change something

00:33:04,899 --> 00:33:09,820
that's not suited to our environment

00:33:06,759 --> 00:33:12,039
then we can package these into zip

00:33:09,820 --> 00:33:13,570
modules which is essentially a way of

00:33:12,039 --> 00:33:15,070
you know take all your scripts put them

00:33:13,570 --> 00:33:16,179
in anything bundle and say hey there's

00:33:15,070 --> 00:33:18,429
the one artifact that we are

00:33:16,179 --> 00:33:20,859
distributing so we have a manifest that

00:33:18,429 --> 00:33:22,690
describes how this what this zip file

00:33:20,859 --> 00:33:26,619
contains and then we can just enable

00:33:22,690 --> 00:33:27,220
everything with one line and of course

00:33:26,619 --> 00:33:28,929
infrastruc

00:33:27,220 --> 00:33:31,299
code is really you know the thing

00:33:28,929 --> 00:33:32,950
nowadays but instead of having to

00:33:31,299 --> 00:33:35,140
generate you know all of these templates

00:33:32,950 --> 00:33:37,390
and and all of this configuration and

00:33:35,140 --> 00:33:39,220
all of these stuff we can do better we

00:33:37,390 --> 00:33:42,039
can auto detect you know if someone

00:33:39,220 --> 00:33:44,110
starts sequel server we probably want to

00:33:42,039 --> 00:33:46,419
have sequel server monitored if someone

00:33:44,110 --> 00:33:49,390
starts engine X we probably want to have

00:33:46,419 --> 00:33:51,190
that monitored right so somehow we can

00:33:49,390 --> 00:33:53,080
figure out what's running on this system

00:33:51,190 --> 00:33:54,760
and then we can take actions and enable

00:33:53,080 --> 00:33:57,190
the monitoring that is required by this

00:33:54,760 --> 00:33:59,650
system so we don't need to generate any

00:33:57,190 --> 00:34:01,960
configuration at all and we can package

00:33:59,650 --> 00:34:03,370
this in our neat elite little bundle and

00:34:01,960 --> 00:34:05,200
you know something doesn't really work

00:34:03,370 --> 00:34:07,870
for this server we can customize it on a

00:34:05,200 --> 00:34:11,050
per server basis instead of having to do

00:34:07,870 --> 00:34:13,000
that centrally and I know I know how I'm

00:34:11,050 --> 00:34:14,770
stalling right because we want to have

00:34:13,000 --> 00:34:16,510
some kubernetes stuff and some darker

00:34:14,770 --> 00:34:19,570
things and all that kind of nifty cool

00:34:16,510 --> 00:34:21,190
stuff and we're actually getting that as

00:34:19,570 --> 00:34:23,409
I said before in the O six version

00:34:21,190 --> 00:34:24,340
they'll be out in a week or two LAN was

00:34:23,409 --> 00:34:28,510
to have it out now but unfortunately

00:34:24,340 --> 00:34:30,099
Halloween came in between so what we

00:34:28,510 --> 00:34:31,599
will get then is you know the ability to

00:34:30,099 --> 00:34:32,740
check if a container is running and you

00:34:31,599 --> 00:34:35,409
go like oh really

00:34:32,740 --> 00:34:37,270
that's it I mean all of this time and

00:34:35,409 --> 00:34:38,980
that's it and it will get some other

00:34:37,270 --> 00:34:40,030
things as well because we'll be able to

00:34:38,980 --> 00:34:43,330
take the metrics

00:34:40,030 --> 00:34:45,460
from our darker containers and use them

00:34:43,330 --> 00:34:47,530
in our scripts or we can ship them off

00:34:45,460 --> 00:34:49,240
to our metric store where we can

00:34:47,530 --> 00:34:52,030
actually do them to do checks and things

00:34:49,240 --> 00:34:53,440
like that on it and we will have event

00:34:52,030 --> 00:34:56,320
so whenever a docker in container is

00:34:53,440 --> 00:34:58,150
started we will be notified we can take

00:34:56,320 --> 00:35:00,190
action if someone is starting a docker

00:34:58,150 --> 00:35:02,140
container that has a certain name or has

00:35:00,190 --> 00:35:04,150
a certain base image or has a certain

00:35:02,140 --> 00:35:06,310
time or something along those lines and

00:35:04,150 --> 00:35:08,290
this gives us a lot of interesting

00:35:06,310 --> 00:35:10,420
superpowers because this means that if

00:35:08,290 --> 00:35:11,950
we have a service contract where we say

00:35:10,420 --> 00:35:13,480
that you know our containers have an

00:35:11,950 --> 00:35:15,280
environment variable that says this is

00:35:13,480 --> 00:35:17,530
the check command to check well these

00:35:15,280 --> 00:35:18,880
are the check commands to check what we

00:35:17,530 --> 00:35:21,250
can do is actually you know whenever

00:35:18,880 --> 00:35:22,990
that container is started we can or

00:35:21,250 --> 00:35:24,700
whenever a container is started we can

00:35:22,990 --> 00:35:27,220
see I mean has it set the environment

00:35:24,700 --> 00:35:28,780
variable has it's at a tag we can take

00:35:27,220 --> 00:35:30,670
that tag and say okay so these are the

00:35:28,780 --> 00:35:33,190
check command you want me to run inside

00:35:30,670 --> 00:35:35,170
your container so I can run those for

00:35:33,190 --> 00:35:37,060
you and the only thing you need to do is

00:35:35,170 --> 00:35:38,980
deploy and it's client somewhere in your

00:35:37,060 --> 00:35:40,150
dock or infrastructure and it will just

00:35:38,980 --> 00:35:41,000
pick up all the other containers

00:35:40,150 --> 00:35:43,820
automatically

00:35:41,000 --> 00:35:45,470
and with some scripting we can then make

00:35:43,820 --> 00:35:47,930
sure that it runs all of your check

00:35:45,470 --> 00:35:49,790
commands which are provided by for

00:35:47,930 --> 00:35:51,950
instance your developers inside their

00:35:49,790 --> 00:35:53,660
containers to you know figure out what

00:35:51,950 --> 00:35:55,340
they want to do we can generate metrics

00:35:53,660 --> 00:35:59,420
and we can do all of these magical stuff

00:35:55,340 --> 00:36:01,520
right and then we have the check open

00:35:59,420 --> 00:36:03,770
metrics module which allows us to scrape

00:36:01,520 --> 00:36:06,500
you know stops endpoints and metrics

00:36:03,770 --> 00:36:09,680
endpoints and things like that and that

00:36:06,500 --> 00:36:11,869
in itself is yeah maybe but again if we

00:36:09,680 --> 00:36:13,430
take this together with the fact that

00:36:11,869 --> 00:36:16,790
whenever a docker container is started

00:36:13,430 --> 00:36:18,740
we can see do we have stats endpoint

00:36:16,790 --> 00:36:20,390
defined as an environment variable or a

00:36:18,740 --> 00:36:22,070
tag or something along those lines then

00:36:20,390 --> 00:36:24,109
we can automatically start scraping that

00:36:22,070 --> 00:36:26,510
which again means that we can deploy and

00:36:24,109 --> 00:36:27,680
his client in our cluster and it will

00:36:26,510 --> 00:36:29,180
just magically pick up all the

00:36:27,680 --> 00:36:31,070
containers and start monitoring them

00:36:29,180 --> 00:36:33,140
without you having to configure anything

00:36:31,070 --> 00:36:34,130
you don't need to have side cards you

00:36:33,140 --> 00:36:35,990
don't need to have all that kind stuff

00:36:34,130 --> 00:36:38,390
it just magically picks up everything

00:36:35,990 --> 00:36:39,920
and starts monitoring it but interesting

00:36:38,390 --> 00:36:41,720
bit here is that this is all through

00:36:39,920 --> 00:36:44,119
scripting it's not all through

00:36:41,720 --> 00:36:47,240
configuration or all through some tool

00:36:44,119 --> 00:36:49,490
or someone builds so we can adapt this

00:36:47,240 --> 00:36:51,650
and we can change it and we can do a lot

00:36:49,490 --> 00:36:54,500
of the stuff that we need to get this

00:36:51,650 --> 00:36:56,270
running and if we're looking forward in

00:36:54,500 --> 00:36:58,280
the next version we will have a

00:36:56,270 --> 00:37:00,440
kubernetes supports hyper-v support and

00:36:58,280 --> 00:37:02,599
AW support as well which means that if

00:37:00,440 --> 00:37:04,700
you're running a large AWS cluster and

00:37:02,599 --> 00:37:06,950
ECS cluster you can just you know drop

00:37:04,700 --> 00:37:09,080
in and its client into that ecs cluster

00:37:06,950 --> 00:37:11,030
it will pick up all your containers and

00:37:09,080 --> 00:37:14,920
start monitoring them automatically

00:37:11,030 --> 00:37:17,000
which i think is quite neat hopefully

00:37:14,920 --> 00:37:19,760
we'll see how this sort of turns out

00:37:17,000 --> 00:37:21,230
this has said things that are coming the

00:37:19,760 --> 00:37:23,810
doctor stuff and the open matrix stuff

00:37:21,230 --> 00:37:25,010
is finished so I just essentially need

00:37:23,810 --> 00:37:26,690
to package that get it out

00:37:25,010 --> 00:37:29,750
aw stuff is kind of finished but not

00:37:26,690 --> 00:37:31,790
really but all of this is coming quite

00:37:29,750 --> 00:37:34,310
soon and I think with this we can you

00:37:31,790 --> 00:37:36,530
know do both metrics and checks and when

00:37:34,310 --> 00:37:38,540
it makes sense we can use metrics and

00:37:36,530 --> 00:37:42,410
when it makes sense we can use scripts

00:37:38,540 --> 00:37:44,119
and checks both to generate metrics for

00:37:42,410 --> 00:37:46,790
the ones we need and to you know change

00:37:44,119 --> 00:37:48,349
and mutate metrics but also to do you

00:37:46,790 --> 00:37:50,089
know classical checks you know to figure

00:37:48,349 --> 00:37:52,880
stuff out and find information from our

00:37:50,089 --> 00:37:54,680
containers and we can do this in the

00:37:52,880 --> 00:37:56,120
cloud we can do this in our cabinet

00:37:54,680 --> 00:37:58,550
fosters and we can do these pretty much

00:37:56,120 --> 00:38:00,080
everywhere automatically without having

00:37:58,550 --> 00:38:02,360
a lot of configuration we can be

00:38:00,080 --> 00:38:05,810
adaptive right so with that I want to

00:38:02,360 --> 00:38:08,950
say thank you for listening and there

00:38:05,810 --> 00:38:08,950
were a few buzz words at the end

00:38:09,600 --> 00:38:25,580
[Applause]

00:38:14,750 --> 00:38:25,580
[Music]

00:38:28,810 --> 00:38:31,920
you

00:38:29,170 --> 00:38:31,920

YouTube URL: https://www.youtube.com/watch?v=yKPb_JTzENc


