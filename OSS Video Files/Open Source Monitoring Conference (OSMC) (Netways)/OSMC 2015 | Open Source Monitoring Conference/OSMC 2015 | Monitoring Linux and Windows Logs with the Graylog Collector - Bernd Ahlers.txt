Title: OSMC 2015 | Monitoring Linux and Windows Logs with the Graylog Collector - Bernd Ahlers
Publication date: 2015-11-26
Playlist: OSMC 2015 | Open Source Monitoring Conference
Description: 
	Until recently, sending logs to Graylog without using Syslog or any third party program was a bit cumbersome. This has changed since version 1.1. Graylog now has its own log collector which is tightly integrated with the Graylog server and web interface to simplify the management of log shippers.
The Graylog collector runs on several operating systems including Linux, Windows, Mac OS and AIX. It makes it easy to send data like Apache access logs or Windows event logs to Graylog without the need of any third party tools.
In this talk I will introduce the Graylog collector and show how to install and configure it on Linux and Windows. I will also show how to extract structured data from those logs and an example integration with the Icinga monitoring system to alert on critical events.
Captions: 
	00:00:08,599 --> 00:00:18,380
so welcome to the last Trek for today or

00:00:13,700 --> 00:00:21,470
for the OSM see right now

00:00:18,380 --> 00:00:23,960
next will be band Alice it will tell us

00:00:21,470 --> 00:00:25,910
something about Linux monitoring and

00:00:23,960 --> 00:00:30,970
windows locks with gray low collector

00:00:25,910 --> 00:00:38,269
but before you start I want to say that

00:00:30,970 --> 00:00:40,850
we meet at the hotel entrance at 1834

00:00:38,269 --> 00:00:47,030
the guys who attend to the hackathon

00:00:40,850 --> 00:00:51,199
tomorrow so yeah be there we will go to

00:00:47,030 --> 00:00:56,149
lunch a dinner afterwards yes

00:00:51,199 --> 00:00:57,739
and now Evan hello welcome I have a

00:00:56,149 --> 00:01:01,760
funny voice today so I hope that works

00:00:57,739 --> 00:01:06,170
out it's not due to alcohol by the way

00:01:01,760 --> 00:01:08,570
so I wanted to talk about monitoring

00:01:06,170 --> 00:01:11,560
Linux and windows locks the Greylock

00:01:08,570 --> 00:01:15,320
collector I slightly changed the title

00:01:11,560 --> 00:01:17,630
because of reasons which I explain later

00:01:15,320 --> 00:01:19,549
my name is bounds I'm from Hamburg in

00:01:17,630 --> 00:01:25,460
Germany and I'm working for

00:01:19,549 --> 00:01:29,390
Greylock as a developer and yeah let's

00:01:25,460 --> 00:01:32,720
get started so um how many of you know

00:01:29,390 --> 00:01:44,060
Greylock keep your hands up if you use

00:01:32,720 --> 00:01:45,590
it ok cool it's great um for those who

00:01:44,060 --> 00:01:47,840
don't know them I'm going to introduce

00:01:45,590 --> 00:01:51,500
it really quick Greylock is an open

00:01:47,840 --> 00:01:53,710
source lock management platform with it

00:01:51,500 --> 00:01:57,880
you can collect index and analyze

00:01:53,710 --> 00:01:57,880
structured and unstructured block data

00:01:58,119 --> 00:02:05,630
so we can set all your syslog there on

00:02:01,759 --> 00:02:08,090
your application logs um sometimes even

00:02:05,630 --> 00:02:12,380
some metrics or SNMP traps something

00:02:08,090 --> 00:02:15,860
like that you can also alert based on

00:02:12,380 --> 00:02:19,310
this lock data so when you you can

00:02:15,860 --> 00:02:21,730
defined thresholds on certain metrics or

00:02:19,310 --> 00:02:26,590
blogs or the number of logs that come in

00:02:21,730 --> 00:02:28,390
and we have different yeah a lot

00:02:26,590 --> 00:02:31,930
mechanisms so we can set emails

00:02:28,390 --> 00:02:33,730
HTTP requests there are post something

00:02:31,930 --> 00:02:37,000
into your chat room something like that

00:02:33,730 --> 00:02:40,120
and it's also quite extensible via

00:02:37,000 --> 00:02:43,150
custom plugins that you can write um

00:02:40,120 --> 00:02:47,260
Greylock is written in Java so you

00:02:43,150 --> 00:02:52,890
basically write Java plugins but that

00:02:47,260 --> 00:02:55,269
with that it's very quite extensible arm

00:02:52,890 --> 00:02:58,390
this is amazing the main screen of

00:02:55,269 --> 00:03:01,900
Greylock arm at the top you have a

00:02:58,390 --> 00:03:04,650
search bar some type selector that you

00:03:01,900 --> 00:03:07,599
can search for certain messages like

00:03:04,650 --> 00:03:11,109
filtering sources or just look for free

00:03:07,599 --> 00:03:15,849
text and you get back a list of messages

00:03:11,109 --> 00:03:22,900
that match your query a histogram of

00:03:15,849 --> 00:03:24,879
message counts over time and yeah you

00:03:22,900 --> 00:03:26,470
have message fields you see the messages

00:03:24,879 --> 00:03:29,829
here's a bit hard to see I guess that's

00:03:26,470 --> 00:03:31,090
quite small um but that's basically the

00:03:29,829 --> 00:03:36,630
main screen of Greylock where you

00:03:31,090 --> 00:03:39,970
operate most of the time um we also have

00:03:36,630 --> 00:03:41,590
we also support dashboards so as you can

00:03:39,970 --> 00:03:44,019
see here we have these kind of widgets

00:03:41,590 --> 00:03:45,430
and the top you probably cannot see it

00:03:44,019 --> 00:03:47,200
we also if like how many messages

00:03:45,430 --> 00:03:50,709
matches your query you can put those

00:03:47,200 --> 00:03:53,169
little widgets on dashboards this is for

00:03:50,709 --> 00:03:55,269
example a test dashboard of solar

00:03:53,169 --> 00:03:57,030
activity that we somehow have not work

00:03:55,269 --> 00:04:03,519
right or instance not sure why but

00:03:57,030 --> 00:04:04,950
someone created that um right so this is

00:04:03,519 --> 00:04:07,389
quite useful if you want to have

00:04:04,950 --> 00:04:11,620
dashboard zones on screens in your

00:04:07,389 --> 00:04:12,010
office or if you show that to other

00:04:11,620 --> 00:04:15,190
people

00:04:12,010 --> 00:04:19,930
the domes necessarily have to search

00:04:15,190 --> 00:04:22,300
through the locks um great acrosses has

00:04:19,930 --> 00:04:23,860
this notion of streams that means you

00:04:22,300 --> 00:04:25,479
can categorize your messages that come

00:04:23,860 --> 00:04:28,530
in so for example you can have a stream

00:04:25,479 --> 00:04:33,370
for login failures or you can have a

00:04:28,530 --> 00:04:35,199
stream for um for special applications

00:04:33,370 --> 00:04:39,189
or something like that so

00:04:35,199 --> 00:04:40,870
basically basically can all messages

00:04:39,189 --> 00:04:41,979
that come in you can apply routes to and

00:04:40,870 --> 00:04:44,590
then you can sort into different

00:04:41,979 --> 00:04:49,830
categories this this that's that's the

00:04:44,590 --> 00:04:52,300
streams basically everything that you

00:04:49,830 --> 00:04:54,400
all the configuration of greater can be

00:04:52,300 --> 00:04:57,789
done via the web interface so you can

00:04:54,400 --> 00:05:01,120
create streams here you can edit the

00:04:57,789 --> 00:05:02,800
rules in the interface streams can also

00:05:01,120 --> 00:05:05,349
have outputs so if you want for example

00:05:02,800 --> 00:05:07,779
if you want logon failures forwarded to

00:05:05,349 --> 00:05:09,939
another system you can do that and

00:05:07,779 --> 00:05:12,879
that's pretty easy and you can also

00:05:09,939 --> 00:05:16,810
manage the alerts for the streams you

00:05:12,879 --> 00:05:19,029
have so for example if you have like we

00:05:16,810 --> 00:05:21,189
have we have chef events here as an

00:05:19,029 --> 00:05:24,460
example if you have lots of failed chef

00:05:21,189 --> 00:05:33,339
runs um you can alert on that and send

00:05:24,460 --> 00:05:35,110
an email or something different you can

00:05:33,339 --> 00:05:37,389
also kind of manage all the notes you

00:05:35,110 --> 00:05:40,300
have in your Gradle cluster for each

00:05:37,389 --> 00:05:43,509
node you get some basic operational

00:05:40,300 --> 00:05:46,060
steps like memory usage of the JVM

00:05:43,509 --> 00:05:49,870
current message rate that's processed by

00:05:46,060 --> 00:05:51,399
the server and you can also kind of stop

00:05:49,870 --> 00:05:53,379
message processing these are view the

00:05:51,399 --> 00:05:56,680
metrics of the server and something like

00:05:53,379 --> 00:06:04,300
that so if you have more than one server

00:05:56,680 --> 00:06:08,469
there they will all show up you same

00:06:04,300 --> 00:06:09,729
goes for all the inputs when you want to

00:06:08,469 --> 00:06:12,279
send something to Greylock you have to

00:06:09,729 --> 00:06:14,830
create an input for example syslog here

00:06:12,279 --> 00:06:17,919
we have three configured inputs um we

00:06:14,830 --> 00:06:20,020
have galv tcp Gelf HTTP GET UDP will

00:06:17,919 --> 00:06:21,370
tell you later what Galvis but

00:06:20,020 --> 00:06:24,810
everything can be managed to the web

00:06:21,370 --> 00:06:28,360
interface you can create new inputs here

00:06:24,810 --> 00:06:33,099
we could stop them see metrics all this

00:06:28,360 --> 00:06:38,050
kind of stuff we also support user

00:06:33,099 --> 00:06:40,449
accounts that means you can for example

00:06:38,050 --> 00:06:41,469
connect to existing L lab and that you

00:06:40,449 --> 00:06:43,330
don't have to create all the user

00:06:41,469 --> 00:06:47,169
accounts and Greylock server but you can

00:06:43,330 --> 00:06:48,610
reach out to elder for that and you

00:06:47,169 --> 00:06:52,419
cannot we can also we also

00:06:48,610 --> 00:06:54,550
provides a method to set permissions for

00:06:52,419 --> 00:06:57,340
certain users so we can say okay this

00:06:54,550 --> 00:06:59,650
user is allowed to search through this

00:06:57,340 --> 00:07:04,900
stream or this user can see this

00:06:59,650 --> 00:07:07,150
dashboard internally we can even we can

00:07:04,900 --> 00:07:09,159
even set permissions for individual

00:07:07,150 --> 00:07:10,509
messages but we don't expose that kind

00:07:09,159 --> 00:07:12,639
of detail to the web interface so that's

00:07:10,509 --> 00:07:14,469
pretty flexible flexible but the main

00:07:12,639 --> 00:07:16,840
thing but we you can do currently from

00:07:14,469 --> 00:07:21,129
the web interfaces set permissions for

00:07:16,840 --> 00:07:23,560
streams and dashboards because this the

00:07:21,129 --> 00:07:25,029
first screenshot I showed the general

00:07:23,560 --> 00:07:26,949
research is only available to admin

00:07:25,029 --> 00:07:28,629
users because they can search through

00:07:26,949 --> 00:07:31,569
all the lot messages that are in

00:07:28,629 --> 00:07:34,150
Greylock and when you give permissions

00:07:31,569 --> 00:07:36,400
to individual users you do that on

00:07:34,150 --> 00:07:38,650
stream basis so you can say okay user a

00:07:36,400 --> 00:07:40,150
can search this stream you could do

00:07:38,650 --> 00:07:42,279
everything in there but you cannot see

00:07:40,150 --> 00:07:47,379
any other messages any other messages

00:07:42,279 --> 00:07:50,349
that don't belong to that stream and we

00:07:47,379 --> 00:07:52,419
also support asset we super add up we

00:07:50,349 --> 00:07:55,060
also support LDAP groups so you can do

00:07:52,419 --> 00:07:56,169
role mappings roll group mappings so we

00:07:55,060 --> 00:08:02,139
don't have to create all of that

00:07:56,169 --> 00:08:04,870
yourself this is a basic architecture

00:08:02,139 --> 00:08:09,250
arm just really quick your data sources

00:08:04,870 --> 00:08:12,279
that send lot messages via inputs into

00:08:09,250 --> 00:08:15,009
Greylock the server can process these

00:08:12,279 --> 00:08:17,860
messages do the categorization like

00:08:15,009 --> 00:08:19,680
streams then it stores it into

00:08:17,860 --> 00:08:23,229
elasticsearch we're using that as a

00:08:19,680 --> 00:08:27,339
primary data store for full-text

00:08:23,229 --> 00:08:29,860
indexing and filtering configurations

00:08:27,339 --> 00:08:32,409
currently stored in MongoDB it's not

00:08:29,860 --> 00:08:33,789
much of not much data it's just few

00:08:32,409 --> 00:08:37,560
configuration so if we want to get rid

00:08:33,789 --> 00:08:41,529
of that eventually but yeah

00:08:37,560 --> 00:08:44,500
currently it's in the server can also

00:08:41,529 --> 00:08:47,829
assets send lock messages to other

00:08:44,500 --> 00:08:50,110
systems by outputs for example you want

00:08:47,829 --> 00:08:52,390
to send it to another Greylock server or

00:08:50,110 --> 00:08:57,430
something else that speaks syslog or

00:08:52,390 --> 00:08:59,770
Gelf the server also has a REST API and

00:08:57,430 --> 00:09:01,569
the web interface we have communicates

00:08:59,770 --> 00:09:02,380
over the REST API with a server so

00:09:01,569 --> 00:09:04,450
everything that's

00:09:02,380 --> 00:09:09,640
ordered by the web interface can also be

00:09:04,450 --> 00:09:12,540
scripted with the REST API and then we

00:09:09,640 --> 00:09:15,520
have can also connect other integrations

00:09:12,540 --> 00:09:24,630
wire scripts that talk to the API for

00:09:15,520 --> 00:09:27,850
example for all the extensions we

00:09:24,630 --> 00:09:30,130
created marketplace a few months or

00:09:27,850 --> 00:09:33,160
weeks ago that's the central place for

00:09:30,130 --> 00:09:36,100
plugins content packs Gelf libraries and

00:09:33,160 --> 00:09:38,650
other solutions Gelf I will expand it

00:09:36,100 --> 00:09:40,420
later in a bit more detail but a Galvis

00:09:38,650 --> 00:09:43,840
basically the Greylock extended lock

00:09:40,420 --> 00:09:46,360
format which is a kind of lock format we

00:09:43,840 --> 00:09:47,770
invented structured log format so we

00:09:46,360 --> 00:09:49,720
give libraries for that in the

00:09:47,770 --> 00:09:51,370
marketplace so we can directly send

00:09:49,720 --> 00:09:54,760
messages to get to a great lock server

00:09:51,370 --> 00:09:56,740
for me applications plugins are

00:09:54,760 --> 00:09:58,030
basically inputs so you can write

00:09:56,740 --> 00:09:59,860
special input plugins you can write

00:09:58,030 --> 00:10:03,450
output plugins to forward to other

00:09:59,860 --> 00:10:06,940
systems you can write alarm callbacks to

00:10:03,450 --> 00:10:08,590
send alarms to different systems and we

00:10:06,940 --> 00:10:12,310
also have content packs which are

00:10:08,590 --> 00:10:14,740
basically pre-configured inputs streams

00:10:12,310 --> 00:10:16,870
and dashboards for certain software

00:10:14,740 --> 00:10:19,600
products for example we ever we have an

00:10:16,870 --> 00:10:21,460
engine X content pack so just load that

00:10:19,600 --> 00:10:23,080
install it and then you basically get

00:10:21,460 --> 00:10:26,080
everything you need to start collecting

00:10:23,080 --> 00:10:29,100
engine X data as an example and we have

00:10:26,080 --> 00:10:29,100
lots of other stuff in there

00:10:30,040 --> 00:10:35,230
Babak Greylock you can find on the

00:10:32,140 --> 00:10:37,840
internet on our home page in the

00:10:35,230 --> 00:10:39,760
marketplace documentation and the source

00:10:37,840 --> 00:10:48,370
code is of all the source code is on

00:10:39,760 --> 00:10:50,140
github in the grey dog - organization so

00:10:48,370 --> 00:10:55,720
why are we writing locks in the first

00:10:50,140 --> 00:10:58,510
place first getting insight into our

00:10:55,720 --> 00:11:02,740
applications collecting business metrics

00:10:58,510 --> 00:11:04,600
for example also for debugging problems

00:11:02,740 --> 00:11:07,150
if you run into issues your monitoring

00:11:04,600 --> 00:11:10,600
alerts you something is wrong you want

00:11:07,150 --> 00:11:12,520
to be able to dig in and find the cause

00:11:10,600 --> 00:11:14,500
for certain problems what's going on the

00:11:12,520 --> 00:11:15,830
system that's why we write locks for

00:11:14,500 --> 00:11:17,930
example

00:11:15,830 --> 00:11:22,180
you write locks to build an audit trail

00:11:17,930 --> 00:11:24,410
for example if you have some certain

00:11:22,180 --> 00:11:26,330
requirements security requirements you

00:11:24,410 --> 00:11:28,790
can do that that's why you write logs

00:11:26,330 --> 00:11:36,980
and of course you can do monitoring

00:11:28,790 --> 00:11:41,000
based on locks as well so how do we

00:11:36,980 --> 00:11:44,380
access our locks most of the time the

00:11:41,000 --> 00:11:44,380
applications write your local log files

00:11:45,100 --> 00:11:52,490
some time ago we are SSH into machines

00:11:48,620 --> 00:11:54,590
and use basic UNIX tools to analyze the

00:11:52,490 --> 00:11:58,700
stuff that's on there such for problems

00:11:54,590 --> 00:12:00,020
maybe extract metrics and if you're

00:11:58,700 --> 00:12:01,970
lucky you already have a central lock

00:12:00,020 --> 00:12:04,340
management and don't have to ssh into

00:12:01,970 --> 00:12:06,620
machines and can use a central search

00:12:04,340 --> 00:12:12,290
and to look through all of that and

00:12:06,620 --> 00:12:16,670
analyze it what kind of locks do we have

00:12:12,290 --> 00:12:19,670
arm I guess most of the data is just

00:12:16,670 --> 00:12:25,390
lock arm the two standards this is first

00:12:19,670 --> 00:12:28,960
two bsd syslog which is an RFC 3-1 64

00:12:25,390 --> 00:12:32,870
that's probably but most of you know arm

00:12:28,960 --> 00:12:34,820
it start with the timestamp the hope the

00:12:32,870 --> 00:12:38,120
source of the of the message so the host

00:12:34,820 --> 00:12:42,400
the process name the process ID and then

00:12:38,120 --> 00:12:42,400
we have some kind of free text message

00:12:42,640 --> 00:12:47,720
the problem here for example is the

00:12:45,140 --> 00:12:48,350
timestamp because you look at it there's

00:12:47,720 --> 00:12:51,050
no year

00:12:48,350 --> 00:12:53,900
there's no time zone so it's kind of

00:12:51,050 --> 00:12:55,040
hard when you run your infrastructure in

00:12:53,900 --> 00:12:58,970
different time zones or they're

00:12:55,040 --> 00:13:03,080
configured differently that's not really

00:12:58,970 --> 00:13:07,130
nice just successor to the BST syslog

00:13:03,080 --> 00:13:08,450
which is in RFC five four to four when

00:13:07,130 --> 00:13:11,150
you look at the time stamp it's a bit

00:13:08,450 --> 00:13:14,000
better actually it has the year in it

00:13:11,150 --> 00:13:18,890
and it also has the time zone it is that

00:13:14,000 --> 00:13:21,500
at the end it's an ISO 8601 format we

00:13:18,890 --> 00:13:26,090
also have the source machine the program

00:13:21,500 --> 00:13:29,240
a PID in this case there's none unique

00:13:26,090 --> 00:13:32,060
message ID and you also have

00:13:29,240 --> 00:13:33,980
some kind of structured data in there so

00:13:32,060 --> 00:13:36,110
you see here this is these are key value

00:13:33,980 --> 00:13:39,410
pairs like event source application even

00:13:36,110 --> 00:13:45,490
dodgy yada yada and then you also have

00:13:39,410 --> 00:13:45,490
an pretext lock message after that

00:13:46,060 --> 00:13:55,760
another example Apache arm probably most

00:13:50,720 --> 00:13:58,760
of you know that again the time stem

00:13:55,760 --> 00:14:01,190
actually has a year and the time zone

00:13:58,760 --> 00:14:03,370
but it's a kind of weird format so you

00:14:01,190 --> 00:14:09,200
need some special powder for that again

00:14:03,370 --> 00:14:11,870
um postfix another example looks almost

00:14:09,200 --> 00:14:15,500
like syslog same timestamp host name

00:14:11,870 --> 00:14:19,010
process process ID and then there's this

00:14:15,500 --> 00:14:21,529
transaction ID and then you have some

00:14:19,010 --> 00:14:25,370
key value pairs which actually looks

00:14:21,529 --> 00:14:28,339
like structured data already not like

00:14:25,370 --> 00:14:31,089
sample squid same thing lots of data and

00:14:28,339 --> 00:14:33,050
there doesn't look restructured

00:14:31,089 --> 00:14:37,760
timestamps a bit better has a year but

00:14:33,050 --> 00:14:40,160
no time zone um now the example is log4j

00:14:37,760 --> 00:14:42,170
for example you can configure log4j to

00:14:40,160 --> 00:14:43,820
produce something better than this but

00:14:42,170 --> 00:14:46,550
this is actually the example a show in

00:14:43,820 --> 00:14:48,200
their tutorial so when you actually see

00:14:46,550 --> 00:14:48,589
this in the wild so this is kind of

00:14:48,200 --> 00:14:51,320
useless

00:14:48,589 --> 00:14:54,260
there's no time stamp on it and so you

00:14:51,320 --> 00:14:55,610
yeah that's maybe something for the

00:14:54,260 --> 00:14:59,930
console but it's nothing that you want

00:14:55,610 --> 00:15:02,810
to collect and the last example is the

00:14:59,930 --> 00:15:05,290
Ruby logger Ruby has a standard lock

00:15:02,810 --> 00:15:08,870
library and the standard library and

00:15:05,290 --> 00:15:10,640
also time time stamp no time zone again

00:15:08,870 --> 00:15:12,560
they have this eye which is probably

00:15:10,640 --> 00:15:18,529
stands for info which is also over here

00:15:12,560 --> 00:15:21,380
and again plain freeform text as a

00:15:18,529 --> 00:15:23,089
message so as we saw the number one

00:15:21,380 --> 00:15:27,980
problem is time stamps actually so

00:15:23,089 --> 00:15:30,410
either they miss the time zone or the

00:15:27,980 --> 00:15:34,959
year and everyone likes to invent them

00:15:30,410 --> 00:15:34,959
on their own touch them

00:15:35,440 --> 00:15:40,110
so how do we get value out of

00:15:36,970 --> 00:15:43,560
unstructured locks so we can use rack X

00:15:40,110 --> 00:15:45,819
more reg X and even more reg X for that

00:15:43,560 --> 00:15:49,149
which might look something like

00:15:45,819 --> 00:15:52,920
something like this which is reg X to

00:15:49,149 --> 00:16:01,899
extract to match a and extract the ipv6

00:15:52,920 --> 00:16:03,459
address if you're lucky and use

00:16:01,899 --> 00:16:05,860
something like lock stash or gray lock

00:16:03,459 --> 00:16:08,439
you can use grok which is an abstraction

00:16:05,860 --> 00:16:12,009
over regular expressions you basically

00:16:08,439 --> 00:16:14,829
give names to regular expressions short

00:16:12,009 --> 00:16:16,449
at that here lower like this you have an

00:16:14,829 --> 00:16:19,240
you say this is a username then you

00:16:16,449 --> 00:16:21,810
provide the pattern for that and then

00:16:19,240 --> 00:16:24,300
you can basically construct more

00:16:21,810 --> 00:16:28,420
combinations with the patterns you have

00:16:24,300 --> 00:16:30,550
you can also say okay this string should

00:16:28,420 --> 00:16:32,350
be extracted in some insert in a certain

00:16:30,550 --> 00:16:35,019
field for this is for example the

00:16:32,350 --> 00:16:37,209
opechee combined lock which has which

00:16:35,019 --> 00:16:39,009
uses a command Apache log pattern then

00:16:37,209 --> 00:16:42,040
adds the refer and the agent which is in

00:16:39,009 --> 00:16:44,350
the combined log so if you have this is

00:16:42,040 --> 00:16:48,279
actually a bit better than pure regular

00:16:44,350 --> 00:16:50,079
expressions but this can also get can

00:16:48,279 --> 00:16:54,699
become hard to manage if you have lots

00:16:50,079 --> 00:16:58,600
of them and references dependencies so

00:16:54,699 --> 00:17:02,920
that's you might want to use unit tests

00:16:58,600 --> 00:17:06,339
to actually test those I'm Greylock we

00:17:02,920 --> 00:17:10,240
also can use a set we can use clock

00:17:06,339 --> 00:17:14,140
patterns but we also have feature is

00:17:10,240 --> 00:17:16,990
called extractors where you provide

00:17:14,140 --> 00:17:20,559
regular expect which is based on regular

00:17:16,990 --> 00:17:23,549
expressions and extracts data from

00:17:20,559 --> 00:17:26,909
unstructured data into message fields

00:17:23,549 --> 00:17:29,289
looks like this also bit small I guess

00:17:26,909 --> 00:17:30,789
we have an example message you can enter

00:17:29,289 --> 00:17:32,350
your regular expression that you want to

00:17:30,789 --> 00:17:35,080
use to extract data with the capture

00:17:32,350 --> 00:17:37,600
groups then you can hit try then you can

00:17:35,080 --> 00:17:40,210
even see if it matches and then you can

00:17:37,600 --> 00:17:41,590
say okay this view this number here

00:17:40,210 --> 00:17:44,020
should be extracted into the view

00:17:41,590 --> 00:17:46,270
duration duration field because that's

00:17:44,020 --> 00:17:48,250
the view duration of the of the home of

00:17:46,270 --> 00:17:52,360
the website that has been displayed

00:17:48,250 --> 00:18:00,700
and that's basically one way to extract

00:17:52,360 --> 00:18:03,340
data out of unstructured messages so how

00:18:00,700 --> 00:18:06,669
can we fix this

00:18:03,340 --> 00:18:08,110
first do central log collection is good

00:18:06,669 --> 00:18:10,360
so that you don't have to go to every

00:18:08,110 --> 00:18:13,030
machine and collect all the locks that

00:18:10,360 --> 00:18:16,150
that you produce if you have an

00:18:13,030 --> 00:18:19,000
essential place it's way nicer to search

00:18:16,150 --> 00:18:20,470
through it and analyze it so I can use

00:18:19,000 --> 00:18:22,000
greater for that or Elgg or there are

00:18:20,470 --> 00:18:28,270
other commercial open source products

00:18:22,000 --> 00:18:30,039
with it and of course one thing would be

00:18:28,270 --> 00:18:33,400
to use structured lock formats in the

00:18:30,039 --> 00:18:35,220
first place so we don't have to go

00:18:33,400 --> 00:18:37,750
through all of our plain text data and

00:18:35,220 --> 00:18:40,360
extract it with regular expressions or

00:18:37,750 --> 00:18:44,830
patterns or something like that so if

00:18:40,360 --> 00:18:46,270
your applications can a bit structured

00:18:44,830 --> 00:18:48,010
lock in the first place you don't need

00:18:46,270 --> 00:18:49,630
that you don't you save resources

00:18:48,010 --> 00:18:52,480
because you don't because you don't have

00:18:49,630 --> 00:18:59,500
to process that much and it's way easier

00:18:52,480 --> 00:19:01,900
to handle as I showed this already this

00:18:59,500 --> 00:19:03,190
is a structured syslog so it can

00:19:01,900 --> 00:19:08,530
actually use this to send structured

00:19:03,190 --> 00:19:09,820
data as a show before you can instruct

00:19:08,530 --> 00:19:13,539
your application to write this kind of

00:19:09,820 --> 00:19:18,700
format it's a bit yeah not so nice but

00:19:13,539 --> 00:19:21,250
works you might have seen CF the comedy

00:19:18,700 --> 00:19:26,020
event format just been invented by arc

00:19:21,250 --> 00:19:29,320
side / HP this format is used in certain

00:19:26,020 --> 00:19:33,159
networked devices could also use that

00:19:29,320 --> 00:19:34,570
for your own applications it uses suits

00:19:33,159 --> 00:19:37,030
look at the transport so we have the

00:19:34,570 --> 00:19:40,179
time stamp problem again but otherwise

00:19:37,030 --> 00:19:43,929
it's kind of structured you have the CF

00:19:40,179 --> 00:19:47,620
versions device vendors device name the

00:19:43,929 --> 00:19:52,240
device version arm a unique message ID a

00:19:47,620 --> 00:19:57,240
plain text message the severity then you

00:19:52,240 --> 00:19:57,240
have key value pairs as structured data

00:19:59,230 --> 00:20:05,120
as I mentioned before there's Gelf the

00:20:02,419 --> 00:20:08,200
gray log extended log format this is

00:20:05,120 --> 00:20:11,030
basically just Jason with some

00:20:08,200 --> 00:20:12,890
conventions so we have some required

00:20:11,030 --> 00:20:14,600
fields like the version which is a gale

00:20:12,890 --> 00:20:16,370
version so it's not nothing to do with

00:20:14,600 --> 00:20:19,910
the application then we have a time

00:20:16,370 --> 00:20:23,510
stamp which is which is a UNIX timestamp

00:20:19,910 --> 00:20:27,740
with milliseconds after the decimal

00:20:23,510 --> 00:20:30,530
point you have a lock source example log

00:20:27,740 --> 00:20:32,150
for example for example and you have a

00:20:30,530 --> 00:20:34,570
short message which is which is the

00:20:32,150 --> 00:20:36,830
actual log message then you have some

00:20:34,570 --> 00:20:38,870
optional fields like full mesh message

00:20:36,830 --> 00:20:43,730
where you for example where you can put

00:20:38,870 --> 00:20:45,919
back traces so larger stuff something

00:20:43,730 --> 00:20:48,320
o'clock level the most important thing

00:20:45,919 --> 00:20:50,210
is you can actually define custom fields

00:20:48,320 --> 00:20:54,260
there you have to prefix them with the

00:20:50,210 --> 00:20:56,600
underscore and then it will end up in

00:20:54,260 --> 00:20:59,510
the these fields will end up in your

00:20:56,600 --> 00:21:02,030
message that underscores removed the

00:20:59,510 --> 00:21:04,400
font but it's it's kind of similar to

00:21:02,030 --> 00:21:08,030
the locks - Jason format but it has a

00:21:04,400 --> 00:21:10,659
bit some different conventions but sure

00:21:08,030 --> 00:21:12,740
which one was there first but yeah

00:21:10,659 --> 00:21:15,860
doesn't really matter or you can just

00:21:12,740 --> 00:21:17,929
use also can just use Jason and send

00:21:15,860 --> 00:21:19,220
structured stuff the important thing is

00:21:17,929 --> 00:21:22,760
that you have a time stamp and the

00:21:19,220 --> 00:21:25,510
message in some fields yes oh sorry

00:21:22,760 --> 00:21:25,510
didn't see that

00:21:33,070 --> 00:21:38,300
McGrail up you cannot currently you can

00:21:35,840 --> 00:21:41,870
do that in lakhs - for example they

00:21:38,300 --> 00:21:43,700
support arbitrary nesting of objects

00:21:41,870 --> 00:21:44,450
like you can have list of the objects

00:21:43,700 --> 00:21:46,190
and stuff like that

00:21:44,450 --> 00:21:48,920
I think relic we don't support that

00:21:46,190 --> 00:21:51,370
right now so you can only do key value

00:21:48,920 --> 00:21:51,370
pairs right now

00:21:51,430 --> 00:22:00,620
yeah sorry so the question was if we can

00:21:55,970 --> 00:22:03,980
do nested javascript objects and Jason

00:22:00,620 --> 00:22:05,870
basically so a said you can also just

00:22:03,980 --> 00:22:07,940
use Jason if you don't want to use any

00:22:05,870 --> 00:22:12,350
of the existing ones and that can also

00:22:07,940 --> 00:22:18,500
be parsed way easier than any plain text

00:22:12,350 --> 00:22:21,940
stuff so how we as great up try to

00:22:18,500 --> 00:22:24,500
improve the echo system for example we

00:22:21,940 --> 00:22:27,740
contributed miguel output for a singer

00:22:24,500 --> 00:22:30,470
tube that means you can configure a

00:22:27,740 --> 00:22:33,170
singer to to send all internal events to

00:22:30,470 --> 00:22:36,320
greg and then can analyze them and look

00:22:33,170 --> 00:22:39,650
what happens that's in gray log any

00:22:36,320 --> 00:22:44,140
singer - I think since 2.1 or to the -

00:22:39,650 --> 00:22:47,360
not sure last year or was MC basically

00:22:44,140 --> 00:22:49,610
we also contributed a gyal flooring

00:22:47,360 --> 00:22:53,570
driver to docker so this is in docker

00:22:49,610 --> 00:22:55,460
since 1 or 8 that means you can start

00:22:53,570 --> 00:22:58,910
containers with a Gelf driver as an

00:22:55,460 --> 00:23:02,150
output they introduced several lock

00:22:58,910 --> 00:23:04,760
drivers in one seven i think so it

00:23:02,150 --> 00:23:05,870
basically sends some structured data to

00:23:04,760 --> 00:23:07,850
grey lock automatically when you

00:23:05,870 --> 00:23:09,770
configure it and it includes container

00:23:07,850 --> 00:23:13,690
ID container image and some other

00:23:09,770 --> 00:23:13,690
metadata about the containers as well

00:23:13,990 --> 00:23:19,490
recently we introduced Apache mod lock

00:23:17,150 --> 00:23:22,460
elf which is better right now

00:23:19,490 --> 00:23:24,830
this is an Apache module that's the same

00:23:22,460 --> 00:23:28,280
thing you can configure it to directly

00:23:24,830 --> 00:23:31,100
sense all the access locks you get from

00:23:28,280 --> 00:23:33,140
Apache and arrow locks to gray lock in a

00:23:31,100 --> 00:23:35,930
structured format so you automatically

00:23:33,140 --> 00:23:38,180
gets the past the HTTP verb the return

00:23:35,930 --> 00:23:40,580
code the bytes the runtime you get

00:23:38,180 --> 00:23:42,980
everything automatically expanded into a

00:23:40,580 --> 00:23:47,019
structured data so don't have to

00:23:42,980 --> 00:23:47,019
apply in extractors and stuff like that

00:23:47,109 --> 00:23:54,499
we also have a login develop for j2 girl

00:23:51,409 --> 00:23:56,509
every few into Java and use log4j - we

00:23:54,499 --> 00:23:58,609
can use that to directly send Scalf out

00:23:56,509 --> 00:24:02,929
of your applications there are several

00:23:58,609 --> 00:24:05,389
others - like for Ruby and PHP in Python

00:24:02,929 --> 00:24:08,179
it but those are mostly maintained by

00:24:05,389 --> 00:24:11,960
the community we also wrote a generic

00:24:08,179 --> 00:24:14,659
Gelf client a Java library so this can

00:24:11,960 --> 00:24:18,289
be used by other lockup Enders for lock

00:24:14,659 --> 00:24:20,950
bag or whatever to avoid implementing

00:24:18,289 --> 00:24:26,090
all the gift stuff over and over again

00:24:20,950 --> 00:24:27,649
and the latest one is something for

00:24:26,090 --> 00:24:29,509
runners if you use chef you probably

00:24:27,649 --> 00:24:31,850
know run its kind of supervisor that

00:24:29,509 --> 00:24:33,590
start takes care of processes and that

00:24:31,850 --> 00:24:36,619
also has some kind of weird logging

00:24:33,590 --> 00:24:40,129
thing and we wrote some small process

00:24:36,619 --> 00:24:43,850
that also takes these logs and puts the

00:24:40,129 --> 00:24:45,440
output directly into Grandal so yeah we

00:24:43,850 --> 00:24:47,450
had great log love real love structured

00:24:45,440 --> 00:24:47,889
logging a structured data and you should

00:24:47,450 --> 00:24:56,869
too

00:24:47,889 --> 00:24:58,369
cause it's way easier this is the second

00:24:56,869 --> 00:25:02,480
part of the presentation about the

00:24:58,369 --> 00:25:04,639
greater collector arm the greater

00:25:02,480 --> 00:25:06,470
collector reads slope your local log

00:25:04,639 --> 00:25:08,600
files and ships them to gray log so if

00:25:06,470 --> 00:25:11,269
you have applications that cannot write

00:25:08,600 --> 00:25:13,609
to Greylock or log stash directly you

00:25:11,269 --> 00:25:15,109
can run this thing on your machine and

00:25:13,609 --> 00:25:18,799
it reads log files and ships integrate

00:25:15,109 --> 00:25:20,600
up simple as that we also have Windows

00:25:18,799 --> 00:25:25,539
Event log support just got limited for

00:25:20,600 --> 00:25:28,249
now I'll come to that later

00:25:25,539 --> 00:25:31,850
we support transport encryption by TLS

00:25:28,249 --> 00:25:34,429
so stuff is encrypted if you want and we

00:25:31,850 --> 00:25:38,269
will also support certificate based

00:25:34,429 --> 00:25:40,269
authentication in the future and it runs

00:25:38,269 --> 00:25:46,669
on Linux Windows Mac OS and

00:25:40,269 --> 00:25:48,889
ax as well to some certain degree arm so

00:25:46,669 --> 00:25:49,999
why do we write another collector so

00:25:48,889 --> 00:25:52,129
there are lots of others out there

00:25:49,999 --> 00:25:54,619
already there's an X lock some of you

00:25:52,129 --> 00:25:55,299
probably know this runs on Windows and

00:25:54,619 --> 00:25:57,820
Linux

00:25:55,299 --> 00:26:01,029
well as fluent D this Mozilla hey car

00:25:57,820 --> 00:26:03,429
there's file beat the new should lock

00:26:01,029 --> 00:26:06,519
shape or form elastic and you can also

00:26:03,429 --> 00:26:07,899
use RSS logo syslog and G as a lock

00:26:06,519 --> 00:26:09,249
shipper basically to read local log

00:26:07,899 --> 00:26:12,700
files and send them to Greylock it's

00:26:09,249 --> 00:26:14,529
also works what we want isn't why we

00:26:12,700 --> 00:26:15,940
actually started this is we want

00:26:14,529 --> 00:26:18,100
integration and centralized management

00:26:15,940 --> 00:26:18,639
of these collectors because with the

00:26:18,100 --> 00:26:20,739
others

00:26:18,639 --> 00:26:22,210
for now you can only we have to

00:26:20,739 --> 00:26:23,739
basically configure that on every

00:26:22,210 --> 00:26:26,080
machine if you install it you have to

00:26:23,739 --> 00:26:28,600
configure it in every machine which kind

00:26:26,080 --> 00:26:30,669
of is okay when you use conflict

00:26:28,600 --> 00:26:34,029
management but we wanted to have its

00:26:30,669 --> 00:26:36,999
integrated in gray logins so that you

00:26:34,029 --> 00:26:41,679
can manage it actually that's the reason

00:26:36,999 --> 00:26:46,720
why we actually started this the current

00:26:41,679 --> 00:26:48,489
version there's a little bit of that

00:26:46,720 --> 00:26:50,379
already you can see the existing

00:26:48,489 --> 00:26:54,070
collector sort of running and sending

00:26:50,379 --> 00:26:56,019
heartbeats to Greg because you can see

00:26:54,070 --> 00:26:58,509
the version of the collect ID and which

00:26:56,019 --> 00:27:02,200
on which us it runs and you can also

00:26:58,509 --> 00:27:03,639
just filter on can say okay just show me

00:27:02,200 --> 00:27:08,049
lot messages that came from this

00:27:03,639 --> 00:27:10,830
collector that currently works there

00:27:08,049 --> 00:27:10,830
will be more in the future

00:27:11,190 --> 00:27:15,690
installation is pretty simple we have

00:27:13,059 --> 00:27:19,109
operating system packages for Linux

00:27:15,690 --> 00:27:21,070
CentOS Debian Ubuntu basically on

00:27:19,109 --> 00:27:23,799
Windows you currently have to install it

00:27:21,070 --> 00:27:25,989
manually we try to provide an MSI later

00:27:23,799 --> 00:27:29,710
that you can use to use scripted

00:27:25,989 --> 00:27:32,139
installs and make it a bit easier and it

00:27:29,710 --> 00:27:33,730
also runs as a Windows service so you

00:27:32,139 --> 00:27:36,399
can insert as a service and it starts up

00:27:33,730 --> 00:27:42,070
when you boot your windows so let's see

00:27:36,399 --> 00:27:46,090
Liam that's the current configuration of

00:27:42,070 --> 00:27:47,769
the collector the main thing is you have

00:27:46,090 --> 00:27:50,379
to provide an URL to your grade up

00:27:47,769 --> 00:27:53,049
server to the API so it can contact the

00:27:50,379 --> 00:27:58,149
grey doc server and send the heartbeat

00:27:53,049 --> 00:28:00,369
and then we have inputs and outputs if

00:27:58,149 --> 00:28:02,139
set we have currently with two input

00:28:00,369 --> 00:28:04,779
types we have files to read from files

00:28:02,139 --> 00:28:07,210
and we have Windows Event log which can

00:28:04,779 --> 00:28:08,530
read from the event log cap you can

00:28:07,210 --> 00:28:10,360
provide the event

00:28:08,530 --> 00:28:13,930
source of the the event look source you

00:28:10,360 --> 00:28:19,120
want to read from and outputs we

00:28:13,930 --> 00:28:20,560
currently have GAF output so you can you

00:28:19,120 --> 00:28:22,780
have to provide the IP address of your

00:28:20,560 --> 00:28:25,570
EXO about the hostname and the port of

00:28:22,780 --> 00:28:28,090
the input and then it just that's all

00:28:25,570 --> 00:28:32,560
you need basically to send file so we

00:28:28,090 --> 00:28:34,030
know the event log to it the main idea

00:28:32,560 --> 00:28:36,130
is to get rid of everything below the

00:28:34,030 --> 00:28:38,590
server URL so in the future when we

00:28:36,130 --> 00:28:40,450
implemented the arm central management

00:28:38,590 --> 00:28:42,190
the ideas that you just have to provide

00:28:40,450 --> 00:28:44,530
the server URL and maybe some access to

00:28:42,190 --> 00:28:47,520
open or certificate everything else will

00:28:44,530 --> 00:28:47,520
be managed the Greylock one

00:28:50,700 --> 00:28:57,310
yeah the current state of the collectors

00:28:52,930 --> 00:29:00,640
a bit sad because change priority is a

00:28:57,310 --> 00:29:02,830
bid and didn't work on that for quite

00:29:00,640 --> 00:29:04,600
some time so the Windows Event log

00:29:02,830 --> 00:29:08,080
support needs update to support new

00:29:04,600 --> 00:29:09,700
windows API so since Vista and 2008

00:29:08,080 --> 00:29:11,530
because I changed and the library we

00:29:09,700 --> 00:29:15,700
were using it's currently not supporting

00:29:11,530 --> 00:29:17,230
that so that's a bit sad also fire

00:29:15,700 --> 00:29:20,020
reading it needs improvement to track

00:29:17,230 --> 00:29:21,370
state for example and of course the

00:29:20,020 --> 00:29:23,020
central management so the reason why we

00:29:21,370 --> 00:29:26,550
actually doing this needs to be

00:29:23,020 --> 00:29:28,600
implemented so that's why I actually

00:29:26,550 --> 00:29:29,830
talked a bit more about structured

00:29:28,600 --> 00:29:32,140
logging than the collector and hole

00:29:29,830 --> 00:29:40,980
because it's not the nice state right

00:29:32,140 --> 00:29:43,600
now um yeah I think that was it already

00:29:40,980 --> 00:29:45,100
tomorrow there's the hackathon and I

00:29:43,600 --> 00:29:47,560
will be there so if you want if you're

00:29:45,100 --> 00:29:50,620
interested in Greylock or anything else

00:29:47,560 --> 00:29:52,990
regarding logging just contact me I will

00:29:50,620 --> 00:29:56,460
be there I will show you great logger if

00:29:52,990 --> 00:29:59,880
you want or any other thing you have and

00:29:56,460 --> 00:29:59,880
thank you for time

00:30:02,860 --> 00:30:04,920
you

00:30:06,200 --> 00:30:16,710
have any questions the back yeah hi how

00:30:14,640 --> 00:30:20,250
do you handle multi-line locked formats

00:30:16,710 --> 00:30:22,620
in the collector you mean and now like

00:30:20,250 --> 00:30:25,050
from PHP when you get stacktrace with

00:30:22,620 --> 00:30:29,130
multi lines or Java or something else ah

00:30:25,050 --> 00:30:30,540
we don't really do at them all okay so I

00:30:29,130 --> 00:30:34,260
basically have to send it the whole

00:30:30,540 --> 00:30:40,250
message currently okay thank you

00:30:34,260 --> 00:30:44,250
yeah welcome any other questions

00:30:40,250 --> 00:30:50,400
is there a timeline when the Windows

00:30:44,250 --> 00:30:52,440
Event API will be fixed not really yet

00:30:50,400 --> 00:31:00,900
but we plan to work on that next year

00:30:52,440 --> 00:31:03,080
the beginning of next year some more

00:31:00,900 --> 00:31:03,080
questions

00:31:07,980 --> 00:31:14,179
okay thank you

00:31:10,950 --> 00:31:14,179

YouTube URL: https://www.youtube.com/watch?v=bHNDS6Z_Ma0


