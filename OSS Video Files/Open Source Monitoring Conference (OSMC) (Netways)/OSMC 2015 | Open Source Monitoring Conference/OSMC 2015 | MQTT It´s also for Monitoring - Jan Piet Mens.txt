Title: OSMC 2015 | MQTT ItÂ´s also for Monitoring - Jan Piet Mens
Publication date: 2015-11-27
Playlist: OSMC 2015 | Open Source Monitoring Conference
Description: 
	Elastic virtualization using the popular OpenStack platform is for real. While Sysadmins and DevOps professionals fully embrace these new developments, managing them is still a challenge. Adding layers of abstraction for compute, network and storage resources further increases complexity. Resource sharing, the fully dynamic creation of networks, virtual machines and recently Linux containers inside the framework also increases the challenge of managing these already complex systems.

This presentation will provide insights on how to optimize the monitoring and management of OpenStack "from the bottom up", and from front to back to efficiently manage and troubleshoot OpenStack environments using API monitoring techniques and best of breed OpenSource tools such as Icinga 2.4, OpenStack API, Fuel, BoxSpy, OpenTSDB and others.
Captions: 
	00:00:08,860 --> 00:00:15,760
also a very warm welcome this room today

00:00:11,860 --> 00:00:18,760
I'm our first talk I

00:00:15,760 --> 00:00:23,050
I'm i get a little short about a time

00:00:18,760 --> 00:00:26,020
our first talk in English today is from

00:00:23,050 --> 00:00:31,180
young piedmont and he tells us something

00:00:26,020 --> 00:00:34,780
about MQTT and why it is also used or

00:00:31,180 --> 00:00:37,989
able to monitor things or use to

00:00:34,780 --> 00:00:42,010
monitoring thank you very much good

00:00:37,989 --> 00:00:44,170
morning can you hear me properly yep um

00:00:42,010 --> 00:00:47,470
my name is Ian Pete or many people call

00:00:44,170 --> 00:00:51,040
me JP I am a freelancer I'm a consultant

00:00:47,470 --> 00:00:54,850
and I do also the things in Unix Linux I

00:00:51,040 --> 00:00:58,629
do a lot of DNS domain name system but I

00:00:54,850 --> 00:01:03,909
also do some MQTT and MQTT is a very

00:00:58,629 --> 00:01:05,530
interesting I have to move you're good

00:01:03,909 --> 00:01:08,380
you're going to have to remind remind me

00:01:05,530 --> 00:01:10,420
several times MQTT is as far as I'm

00:01:08,380 --> 00:01:14,020
concerned very interesting a protocol

00:01:10,420 --> 00:01:17,890
for a number of things in in particular

00:01:14,020 --> 00:01:19,890
also for may be astonishingly for system

00:01:17,890 --> 00:01:22,270
administration tasks and I would like to

00:01:19,890 --> 00:01:24,300
give you a small demonstration of its

00:01:22,270 --> 00:01:27,190
capabilities or some of its capabilities

00:01:24,300 --> 00:01:29,200
let's start off MQTT is a standard it's

00:01:27,190 --> 00:01:35,250
been was standardized a couple years ago

00:01:29,200 --> 00:01:38,260
it's an oasis standard excuse me please

00:01:35,250 --> 00:01:41,170
it's a transport protocol it's a pub sub

00:01:38,260 --> 00:01:42,460
publish-subscribe messaging protocol we

00:01:41,170 --> 00:01:44,800
have a number of clients who just

00:01:42,460 --> 00:01:47,080
publish information and on the other

00:01:44,800 --> 00:01:48,970
side a number of so-called subscribers

00:01:47,080 --> 00:01:51,730
who subscribe to particular messages

00:01:48,970 --> 00:01:54,670
they are interested in we'll see how a

00:01:51,730 --> 00:01:57,610
client can subscribe and what it what it

00:01:54,670 --> 00:01:59,440
can subscribe with MQTT was originally

00:01:57,610 --> 00:02:01,570
designed for unreliable networks or

00:01:59,440 --> 00:02:04,180
anything that is mobile networks for

00:02:01,570 --> 00:02:06,220
example which as you know or probably no

00:02:04,180 --> 00:02:08,560
mobile networks are extremely unreliable

00:02:06,220 --> 00:02:10,599
these devices that most of us carry in

00:02:08,560 --> 00:02:13,230
our pockets are sometimes connected to

00:02:10,599 --> 00:02:17,650
Wi-Fi sometimes connected to 3g or 2g or

00:02:13,230 --> 00:02:23,859
LTE or 4g or whatever gee I need new

00:02:17,650 --> 00:02:26,210
ears them and so MQTT is ideally suited

00:02:23,859 --> 00:02:28,520
for these unreliable networks

00:02:26,210 --> 00:02:31,430
this bottle of chocolate sauce here

00:02:28,520 --> 00:02:33,860
white chocolates also apparently some

00:02:31,430 --> 00:02:38,840
dessert I put here because it's called

00:02:33,860 --> 00:02:44,990
1883 and 1883 one or 1883 is the

00:02:38,840 --> 00:02:48,920
assigned TCP port number four and qtt M

00:02:44,990 --> 00:02:50,960
so this transport protocol is binary

00:02:48,920 --> 00:02:56,180
safe it can transport payloads of up to

00:02:50,960 --> 00:02:57,980
260 56 megabytes oftentimes only in

00:02:56,180 --> 00:02:59,360
theory if you have a very small

00:02:57,980 --> 00:03:01,670
microcontroller with just a few

00:02:59,360 --> 00:03:03,740
kilobytes of storage and of course it

00:03:01,670 --> 00:03:06,260
will never be able to process or

00:03:03,740 --> 00:03:10,660
probably not be able to process 256

00:03:06,260 --> 00:03:14,450
megabytes but in theory it is possible

00:03:10,660 --> 00:03:16,790
it's very fast it's lightweight and it's

00:03:14,450 --> 00:03:22,940
as I really mentioned very good for

00:03:16,790 --> 00:03:25,760
low-latency unreliable networks in terms

00:03:22,940 --> 00:03:28,040
of security MQTT offers in most

00:03:25,760 --> 00:03:33,020
implementations anyway transport layer

00:03:28,040 --> 00:03:36,290
security TLS offers authentication in

00:03:33,020 --> 00:03:38,770
the form of username password so the

00:03:36,290 --> 00:03:40,460
client connects to the server and

00:03:38,770 --> 00:03:42,590
authenticates for the username and

00:03:40,460 --> 00:03:44,870
password to be able to do something to

00:03:42,590 --> 00:03:51,050
be able to publish messages or to

00:03:44,870 --> 00:03:53,540
subscribe to messages very often servers

00:03:51,050 --> 00:03:55,910
MQTT servers which by the way are called

00:03:53,540 --> 00:04:01,750
brokers will offer some sort of access

00:03:55,910 --> 00:04:04,880
control lists acls Oracle's to allow or

00:04:01,750 --> 00:04:08,150
to permit or deny particular trends from

00:04:04,880 --> 00:04:10,370
doing particular operations and if

00:04:08,150 --> 00:04:12,860
you're lucky your implementation also

00:04:10,370 --> 00:04:16,250
supports TLS psk which is preciate key

00:04:12,860 --> 00:04:19,609
over TLS in other words the that is also

00:04:16,250 --> 00:04:22,310
a form of authentication and of course

00:04:19,609 --> 00:04:24,520
at any given time you are obviously

00:04:22,310 --> 00:04:27,080
permitted since payload is binary safe

00:04:24,520 --> 00:04:29,180
256 megabytes you are permitted

00:04:27,080 --> 00:04:32,930
obviously to encrypt the payload in any

00:04:29,180 --> 00:04:36,440
form that you wish to very often though

00:04:32,930 --> 00:04:39,260
payload or payloads are not encrypted

00:04:36,440 --> 00:04:40,129
very often we see MQTT used in local

00:04:39,260 --> 00:04:42,889
networks or in

00:04:40,129 --> 00:04:45,709
if networks but if you are using MQTT

00:04:42,889 --> 00:04:47,239
over the internet as many people do and

00:04:45,709 --> 00:04:48,979
I'll show you some examples then of

00:04:47,239 --> 00:04:51,769
course it can become very interesting to

00:04:48,979 --> 00:04:55,459
ensure that your payloads are encrypted

00:04:51,769 --> 00:04:57,889
that your data is not readable MQTT

00:04:55,459 --> 00:05:00,409
supports so-called qualities of service

00:04:57,889 --> 00:05:03,709
or qos on these qualities of service to

00:05:00,409 --> 00:05:06,979
define first of all how reliable the

00:05:03,709 --> 00:05:11,629
transport will be and second of all also

00:05:06,979 --> 00:05:13,219
define how how much interaction between

00:05:11,629 --> 00:05:16,459
client and server or there will be

00:05:13,219 --> 00:05:20,389
between MQTT client and MQTT broker

00:05:16,459 --> 00:05:24,019
which is the server the three q sr 0 1

00:05:20,389 --> 00:05:26,689
and 2 they are numbered 0 specifies that

00:05:24,019 --> 00:05:30,080
the message will be transported at most

00:05:26,689 --> 00:05:34,249
ones so this is like in UDP sort of a

00:05:30,080 --> 00:05:38,629
fire-and-forget MQTT client publishes a

00:05:34,249 --> 00:05:39,949
message and it's yeah sort of more or

00:05:38,629 --> 00:05:42,019
less tough luck whether it gets or

00:05:39,949 --> 00:05:44,539
doesn't get there it will very often get

00:05:42,019 --> 00:05:48,499
there but on an extremely unreliable

00:05:44,539 --> 00:05:50,360
network it might not get there at all so

00:05:48,499 --> 00:05:52,999
in this case the client just sends off

00:05:50,360 --> 00:05:55,579
of what is called a publish and hopes

00:05:52,999 --> 00:05:59,419
that the broker receives it there is no

00:05:55,579 --> 00:06:02,089
interaction whatsoever a short delivery

00:05:59,419 --> 00:06:05,899
queue is one means that the message will

00:06:02,089 --> 00:06:08,360
get there at least once in other words

00:06:05,899 --> 00:06:10,969
it could arrive multiple times which for

00:06:08,360 --> 00:06:13,539
example in the case of telemetry data if

00:06:10,969 --> 00:06:16,759
you think of a temperature sensor which

00:06:13,539 --> 00:06:18,979
collects information how hot your server

00:06:16,759 --> 00:06:21,469
room is or how cold your server room is

00:06:18,979 --> 00:06:25,579
if this information about the

00:06:21,469 --> 00:06:29,059
temperature arrives more than once it's

00:06:25,579 --> 00:06:30,439
now whatever 19 degrees that doesn't

00:06:29,059 --> 00:06:33,469
really matter so depending on the

00:06:30,439 --> 00:06:36,499
application q is one is fine because it

00:06:33,469 --> 00:06:38,360
guarantees delivery but the it is

00:06:36,499 --> 00:06:43,309
important to know that a message could

00:06:38,360 --> 00:06:45,009
arrive more than once and qs2 is once

00:06:43,309 --> 00:06:47,329
only and we see here already we have

00:06:45,009 --> 00:06:50,629
four interactions that go up and down

00:06:47,329 --> 00:06:52,459
and a short delivery means that the

00:06:50,629 --> 00:06:53,910
protocol guarantees that message will

00:06:52,459 --> 00:07:00,480
get there exactly

00:06:53,910 --> 00:07:03,720
once and once only more features of MQTT

00:07:00,480 --> 00:07:07,620
are something there is called keep alive

00:07:03,720 --> 00:07:09,810
and keep alive the client above TCP keep

00:07:07,620 --> 00:07:13,140
alive the client and the server the

00:07:09,810 --> 00:07:15,390
broker will ping each other and QT

00:07:13,140 --> 00:07:17,730
keeping each other every few seconds

00:07:15,390 --> 00:07:21,300
every define to keep a live number of

00:07:17,730 --> 00:07:23,460
seconds to ensure that the partner is

00:07:21,300 --> 00:07:26,070
still online now this is important

00:07:23,460 --> 00:07:29,600
because MQTT supports something that is

00:07:26,070 --> 00:07:32,520
called LWT or last will and testament

00:07:29,600 --> 00:07:35,310
last will and testament is as follows a

00:07:32,520 --> 00:07:43,140
client connects to a server to a broker

00:07:35,310 --> 00:07:46,740
and says to it I am client JP and in the

00:07:43,140 --> 00:07:48,870
event of my death should I completely go

00:07:46,740 --> 00:07:50,550
away for whatever reason for example

00:07:48,870 --> 00:07:53,730
Network disconnect power outage whatever

00:07:50,550 --> 00:07:57,060
should I completely disappear would you

00:07:53,730 --> 00:07:59,510
please publish this information on my

00:07:57,060 --> 00:08:02,010
behalf to all clients who are listening

00:07:59,510 --> 00:08:04,020
for monitoring very interesting so we

00:08:02,010 --> 00:08:05,670
have an application that is connected to

00:08:04,020 --> 00:08:08,370
typically connected to a broker the

00:08:05,670 --> 00:08:10,590
first thing it does is say if I die if

00:08:08,370 --> 00:08:13,230
my process goes away if power fails

00:08:10,590 --> 00:08:15,450
whatever if I die would you please

00:08:13,230 --> 00:08:17,970
publish this information on this

00:08:15,450 --> 00:08:20,640
so-called topic on this address to all

00:08:17,970 --> 00:08:23,850
clients who are listening to inform them

00:08:20,640 --> 00:08:25,970
of my death now this information inform

00:08:23,850 --> 00:08:27,990
them of my death could be something like

00:08:25,970 --> 00:08:31,050
publish an alert on your monitoring

00:08:27,990 --> 00:08:32,400
system or could be restarts on process

00:08:31,050 --> 00:08:36,000
or launch another time could be anything

00:08:32,400 --> 00:08:37,020
whatever you like yeah so last will and

00:08:36,000 --> 00:08:40,110
testament and I'll show you an example

00:08:37,020 --> 00:08:43,050
live later on with MQTT we have

00:08:40,110 --> 00:08:45,720
decoupled senders and I really need new

00:08:43,050 --> 00:08:49,260
years senders and or publishers and

00:08:45,720 --> 00:08:52,080
subscribers we have the server and we

00:08:49,260 --> 00:08:54,500
have a number of publishers and one or

00:08:52,080 --> 00:08:57,800
more subscribers and at any time

00:08:54,500 --> 00:09:00,930
subscribers can just join the party and

00:08:57,800 --> 00:09:03,140
subscribe to particular topics subscribe

00:09:00,930 --> 00:09:06,060
to particular message classes and

00:09:03,140 --> 00:09:08,680
process these messages and they can come

00:09:06,060 --> 00:09:12,440
and go as you

00:09:08,680 --> 00:09:16,310
and we have what are called durable or

00:09:12,440 --> 00:09:18,560
retained messages and that is when a

00:09:16,310 --> 00:09:21,890
client publishes a message it can

00:09:18,560 --> 00:09:24,290
specify please retain this the broker

00:09:21,890 --> 00:09:28,430
will retain will keep all store this

00:09:24,290 --> 00:09:30,380
last message for this guide and any

00:09:28,430 --> 00:09:33,530
subscriber who then subsequently

00:09:30,380 --> 00:09:36,680
subscribes to this broker will then

00:09:33,530 --> 00:09:39,200
first of all receive this last retained

00:09:36,680 --> 00:09:42,800
message I'll show you an example and why

00:09:39,200 --> 00:09:45,200
we do that later on we publish messages

00:09:42,800 --> 00:09:48,380
and we subscribe to messages on topic

00:09:45,200 --> 00:09:53,530
names topic names are hierarchical they

00:09:48,380 --> 00:09:56,120
are utf-8 topic name length is I think

00:09:53,530 --> 00:10:00,260
I'm sorry I've forgotten 64 kilobytes

00:09:56,120 --> 00:10:03,710
which should be enough maximum and the

00:10:00,260 --> 00:10:05,480
topics contain or may contain wild cards

00:10:03,710 --> 00:10:08,240
on subscription and they are two

00:10:05,480 --> 00:10:10,940
different wild cards as a plus sign or

00:10:08,240 --> 00:10:13,520
plus symbol and a hash or octal for some

00:10:10,940 --> 00:10:15,950
symbol now these are examples of topics

00:10:13,520 --> 00:10:18,920
here we have a topic temperature / room

00:10:15,950 --> 00:10:20,510
/ living topics are the topic

00:10:18,920 --> 00:10:23,720
hierarchies are separated from each

00:10:20,510 --> 00:10:28,700
other with by slashes here's another

00:10:23,720 --> 00:10:35,270
topic devices / hash or finance / + /

00:10:28,700 --> 00:10:39,010
euro rate em topic names with wildcards

00:10:35,270 --> 00:10:43,430
in them are used for subscription so a

00:10:39,010 --> 00:10:46,850
client who subscribes to finance + euro

00:10:43,430 --> 00:10:50,470
rate would get all information all

00:10:46,850 --> 00:10:53,600
messages that are published to finance

00:10:50,470 --> 00:10:56,120
Netherlands euro rate Belgium euro rate

00:10:53,600 --> 00:11:00,050
Germany euro rate Spain you were et

00:10:56,120 --> 00:11:04,880
cetera yeah any single level topic that

00:11:00,050 --> 00:11:08,420
is inserted there whereas a hash means

00:11:04,880 --> 00:11:10,970
any that level and any levels below it

00:11:08,420 --> 00:11:13,310
so a client subscribe to this topic

00:11:10,970 --> 00:11:17,060
would get for example a message

00:11:13,310 --> 00:11:22,070
published two devices /

00:11:17,060 --> 00:11:28,019
help me please o sm c / microphone /

00:11:22,070 --> 00:11:31,550
speaker 1 yep any questions / please

00:11:28,019 --> 00:11:31,550
feel free to interrupt whatever you like

00:11:33,199 --> 00:11:39,180
now MQTT I see it a little bit like like

00:11:36,480 --> 00:11:43,649
a huge boiling pot or cauldron we have

00:11:39,180 --> 00:11:45,420
messages coming in and anybody can take

00:11:43,649 --> 00:11:47,850
a small spoon and anybody who's

00:11:45,420 --> 00:11:50,220
permitted to buy access control can take

00:11:47,850 --> 00:11:53,209
a small spoon and scrub something out

00:11:50,220 --> 00:11:56,600
again yeah so we have this large pot and

00:11:53,209 --> 00:11:59,250
messages go in and messages come out and

00:11:56,600 --> 00:12:02,910
anybody any client who is permitted to

00:11:59,250 --> 00:12:06,779
do so can subscribe to a message read it

00:12:02,910 --> 00:12:09,300
it is not removed MQTT is not a queue so

00:12:06,779 --> 00:12:12,089
if we have two clients subscribe to the

00:12:09,300 --> 00:12:16,560
same topic both clients will get all

00:12:12,089 --> 00:12:17,940
messages okay it's not like like a cube

00:12:16,560 --> 00:12:19,639
what sort of first in first out or

00:12:17,940 --> 00:12:23,819
something or last in first out any

00:12:19,639 --> 00:12:29,850
subscribed clients obtain or have access

00:12:23,819 --> 00:12:34,709
to all published messages the server

00:12:29,850 --> 00:12:37,760
side of MQTT is called a broker is just

00:12:34,709 --> 00:12:42,569
a name and there are a number of brokers

00:12:37,760 --> 00:12:44,760
available and one of the more popular

00:12:42,569 --> 00:12:48,089
brokers is an open source project called

00:12:44,760 --> 00:12:53,310
mosquito careful with TT the reason it's

00:12:48,089 --> 00:12:57,709
called as m q TT it's a very fast very

00:12:53,310 --> 00:13:00,389
lightweight broker available in all

00:12:57,709 --> 00:13:04,079
linux distributions as a normal package

00:13:00,389 --> 00:13:07,290
it's written in c it supports eccles

00:13:04,079 --> 00:13:09,779
access control list it supports access

00:13:07,290 --> 00:13:11,610
control is via plugins we've written one

00:13:09,779 --> 00:13:14,970
which is rather popular which allows

00:13:11,610 --> 00:13:18,720
access control via held up and my sequel

00:13:14,970 --> 00:13:21,329
and radius and whatever mosquito

00:13:18,720 --> 00:13:24,060
supports TLS TLS with preciate keys it

00:13:21,329 --> 00:13:26,939
allows bridging I'll explain that in a

00:13:24,060 --> 00:13:28,850
moment now has support for web sockets

00:13:26,939 --> 00:13:31,970
which I'll also explain in a moment

00:13:28,850 --> 00:13:34,310
and excuse me can log via a special

00:13:31,970 --> 00:13:37,850
topic called dollar sis which is a

00:13:34,310 --> 00:13:40,459
built-in topic used for informational

00:13:37,850 --> 00:13:42,130
purposes you can authorize the parties

00:13:40,459 --> 00:13:44,420
can subscribe to dollar insist and

00:13:42,130 --> 00:13:46,069
obtain information about what the broker

00:13:44,420 --> 00:13:47,750
is currently doing how many messages per

00:13:46,069 --> 00:13:53,230
second I'm going to ram it's consuming

00:13:47,750 --> 00:13:59,720
etc etc etc so mosquito very popular a

00:13:53,230 --> 00:14:01,250
newcomer is called Varun mq their slogan

00:13:59,720 --> 00:14:03,980
is a little bit sort of direct towards

00:14:01,250 --> 00:14:06,889
you there and it's written in arilinn

00:14:03,980 --> 00:14:11,149
it's very fast it supports clustering

00:14:06,889 --> 00:14:12,560
it's also open source it's also open

00:14:11,149 --> 00:14:15,529
source it supports modules you can

00:14:12,560 --> 00:14:17,569
create few if you can write airline you

00:14:15,529 --> 00:14:20,209
can create modules which interact with

00:14:17,569 --> 00:14:23,089
this broker for example extract data

00:14:20,209 --> 00:14:25,370
modify data on the fly or whatever it

00:14:23,089 --> 00:14:28,730
supports authentication obviously access

00:14:25,370 --> 00:14:30,920
control very very interesting quite

00:14:28,730 --> 00:14:34,850
young open source project but very very

00:14:30,920 --> 00:14:38,180
promising another broker and this will

00:14:34,850 --> 00:14:42,860
be the last now hive mq is a commercial

00:14:38,180 --> 00:14:45,589
product it's written in java there they

00:14:42,860 --> 00:14:47,800
do have a license though sort of sun so

00:14:45,589 --> 00:14:50,120
many clients you can use it for free I

00:14:47,800 --> 00:14:53,689
forget exactly how many clients I think

00:14:50,120 --> 00:14:56,569
a 10 or 20 as I said written in Java

00:14:53,689 --> 00:15:00,620
also supports plugins web sockets it

00:14:56,569 --> 00:15:02,600
supports clustering modules so depending

00:15:00,620 --> 00:15:04,100
on your infrastructure depending on

00:15:02,600 --> 00:15:07,100
whether you're happy with Java or with

00:15:04,100 --> 00:15:09,709
air long oversee whatever you have a

00:15:07,100 --> 00:15:12,889
number of MQTT brokers from which to

00:15:09,709 --> 00:15:15,709
choose you can also buy from IBM and

00:15:12,889 --> 00:15:18,139
appliance which costs a lot of money

00:15:15,709 --> 00:15:19,730
which does 15 million messages per

00:15:18,139 --> 00:15:22,370
second if you like so I mean this

00:15:19,730 --> 00:15:25,790
there's a large scale in in brokering

00:15:22,370 --> 00:15:29,259
yes please excuse me let me come closer

00:15:25,790 --> 00:15:29,259
because I'm a little hard of hearing

00:15:30,750 --> 00:15:38,649
it doesn't amqp is also a messaging

00:15:35,260 --> 00:15:43,120
protocol but has is very much more

00:15:38,649 --> 00:15:47,470
heavyweight you'll be extremely hard

00:15:43,120 --> 00:15:48,850
pressed to find an amqp client for

00:15:47,470 --> 00:15:52,990
example for a microcontroller but this

00:15:48,850 --> 00:15:55,300
is just too heavy weight mqp supports

00:15:52,990 --> 00:15:57,160
the notion of cues for example you can

00:15:55,300 --> 00:15:59,470
publish to a particular queue in other

00:15:57,160 --> 00:16:02,560
words by doing so you can direct

00:15:59,470 --> 00:16:10,450
messages into a certain application has

00:16:02,560 --> 00:16:13,720
a very very much richer a very much

00:16:10,450 --> 00:16:16,060
richer protocol they are though a number

00:16:13,720 --> 00:16:18,250
of mqp brokers for example RabbitMQ

00:16:16,060 --> 00:16:20,350
which is also written in ireland which

00:16:18,250 --> 00:16:22,990
have an MQTT connector so you can

00:16:20,350 --> 00:16:26,470
actually speak MQTT on one side and do

00:16:22,990 --> 00:16:28,029
mqp on the other side mqp was originally

00:16:26,470 --> 00:16:30,790
designed if I recall correctly for

00:16:28,029 --> 00:16:38,290
banking transactions yeah so much much

00:16:30,790 --> 00:16:46,180
richer speaking of comparable protocols

00:16:38,290 --> 00:16:48,089
how about XMPP XMPP is jabber xmpp is I

00:16:46,180 --> 00:16:52,240
don't even know if I can compare it is

00:16:48,089 --> 00:16:55,720
tremendously verbose as a is a textual

00:16:52,240 --> 00:17:00,730
protocol has a number of features with

00:16:55,720 --> 00:17:03,010
which may be comparable but is for for

00:17:00,730 --> 00:17:04,959
things for small let's say

00:17:03,010 --> 00:17:09,309
microcontroller driven applications much

00:17:04,959 --> 00:17:12,689
more also much more verbose much more

00:17:09,309 --> 00:17:14,679
much more feature-rich Jabbar or XMPP

00:17:12,689 --> 00:17:16,510
supports the notion of presence

00:17:14,679 --> 00:17:19,870
detection and things like that that

00:17:16,510 --> 00:17:22,569
doesn't exist in MQTT MQTT is really

00:17:19,870 --> 00:17:26,589
very very bare-bones take a message push

00:17:22,569 --> 00:17:29,980
it on and hope for the best yeah a big

00:17:26,589 --> 00:17:32,290
event yes basic pops up if you know

00:17:29,980 --> 00:17:34,830
Redis register up this is very similar

00:17:32,290 --> 00:17:34,830
ok

00:17:36,040 --> 00:17:42,850
so the dollar sis topic here's an

00:17:39,490 --> 00:17:46,210
example which I took a while back here

00:17:42,850 --> 00:17:48,250
we have top the the the what you'll see

00:17:46,210 --> 00:17:51,190
here always is a topic name followed by

00:17:48,250 --> 00:17:53,530
a space and then a value okay so have

00:17:51,190 --> 00:17:55,150
here Dallas's broker clients total at

00:17:53,530 --> 00:17:57,490
the moment I took this snapshot there

00:17:55,150 --> 00:18:00,670
were seventeen hundred clients connected

00:17:57,490 --> 00:18:03,370
to this broker or bytes received order

00:18:00,670 --> 00:18:06,310
visitors to two gig two point eight gig

00:18:03,370 --> 00:18:08,170
yeah bite sent mosquito version 1.4 is a

00:18:06,310 --> 00:18:10,990
little older it bites receive bite

00:18:08,170 --> 00:18:14,560
centers and and brokers will typically

00:18:10,990 --> 00:18:17,410
update this on a integral whatever one

00:18:14,560 --> 00:18:19,810
second five seconds and you we can use

00:18:17,410 --> 00:18:22,630
this for monitoring the broker

00:18:19,810 --> 00:18:26,110
internally other than that it's probably

00:18:22,630 --> 00:18:28,150
not really very interesting so I

00:18:26,110 --> 00:18:30,280
mentioned earlier that brokers can

00:18:28,150 --> 00:18:32,680
bridge and mosquito this bridging venom

00:18:30,280 --> 00:18:35,350
does bridging hive mq does bridging

00:18:32,680 --> 00:18:39,550
bridging means we connect to brokers to

00:18:35,350 --> 00:18:41,830
each other via the MQTT protocol so this

00:18:39,550 --> 00:18:44,470
broker and this broker below here in our

00:18:41,830 --> 00:18:46,470
second data center speak MQTT to each

00:18:44,470 --> 00:18:50,050
other but over a so called bridge and

00:18:46,470 --> 00:18:52,930
this bridge means that we can ensure

00:18:50,050 --> 00:18:55,960
that particular messages for example

00:18:52,930 --> 00:18:57,760
messages which have been published to a

00:18:55,960 --> 00:19:01,030
particular topic or particular set of

00:18:57,760 --> 00:19:03,460
topics can be bridged over onto another

00:19:01,030 --> 00:19:07,260
on to a different broker bridging can

00:19:03,460 --> 00:19:11,710
also be used for remapping or renaming

00:19:07,260 --> 00:19:13,720
topics so we have here in this data

00:19:11,710 --> 00:19:15,520
center on this environment we have a

00:19:13,720 --> 00:19:17,440
broker and we have local clients

00:19:15,520 --> 00:19:19,060
connected to it and these these clients

00:19:17,440 --> 00:19:21,040
do something they'd publish messages

00:19:19,060 --> 00:19:23,350
they subscribe to messages they process

00:19:21,040 --> 00:19:24,910
these messages and we have one client

00:19:23,350 --> 00:19:26,500
who is interested in speaking to the

00:19:24,910 --> 00:19:30,460
client below in the second data center

00:19:26,500 --> 00:19:32,740
we can set up a bridge and we define by

00:19:30,460 --> 00:19:34,930
configuration and that I think is quite

00:19:32,740 --> 00:19:36,820
interesting also from a firewall point

00:19:34,930 --> 00:19:40,000
of view we define which of the two

00:19:36,820 --> 00:19:41,740
brokers does the initial TCP connect so

00:19:40,000 --> 00:19:45,390
whether we can have outgoing or incoming

00:19:41,740 --> 00:19:48,390
and I'm sorry I'm very unhappy with my

00:19:45,390 --> 00:19:48,390
ears

00:19:49,409 --> 00:19:58,720
and by explicitly configuring particular

00:19:56,230 --> 00:20:00,669
topics we can ensure that this client

00:19:58,720 --> 00:20:03,269
can actually publish a message to this

00:20:00,669 --> 00:20:06,250
subscriber below here so bridging is

00:20:03,269 --> 00:20:08,080
very often used breaching is also used

00:20:06,250 --> 00:20:10,240
for example if you have clients who are

00:20:08,080 --> 00:20:13,330
not able to because they're just too too

00:20:10,240 --> 00:20:15,700
simple when not able to do TLS transport

00:20:13,330 --> 00:20:17,500
layer security you can have a bridge

00:20:15,700 --> 00:20:21,519
which is very very local to these

00:20:17,500 --> 00:20:24,490
clients and then via TLS and encryption

00:20:21,519 --> 00:20:27,820
and so on transport all the payloads on

00:20:24,490 --> 00:20:36,580
to to a broker which will actually then

00:20:27,820 --> 00:20:42,220
handle those those messages yes yes sir

00:20:36,580 --> 00:20:44,320
if if we configure if we define that our

00:20:42,220 --> 00:20:47,019
client will publish in queue is to

00:20:44,320 --> 00:20:49,480
assure delivery to this broker and we

00:20:47,019 --> 00:20:51,639
assure that this broker are we ensure

00:20:49,480 --> 00:20:53,980
that this broker is configured to do

00:20:51,639 --> 00:20:56,200
bridging in quality of service to and

00:20:53,980 --> 00:21:00,220
the subscriber just curious too then

00:20:56,200 --> 00:21:04,779
that applies we can go mix quality of

00:21:00,220 --> 00:21:06,309
services we can also say Q is 0 here for

00:21:04,779 --> 00:21:09,159
example because our device doesn't speak

00:21:06,309 --> 00:21:13,269
us too because Q is just more code

00:21:09,159 --> 00:21:15,639
basically and then do quality of service

00:21:13,269 --> 00:21:18,340
to hear that though mean would mean that

00:21:15,639 --> 00:21:19,779
in theory a message could get lost here

00:21:18,340 --> 00:21:34,090
so of course then there's no guarantee

00:21:19,779 --> 00:21:36,669
yep yes no okay other information about

00:21:34,090 --> 00:21:40,389
the different if there are different

00:21:36,669 --> 00:21:43,600
qualities of service on on the way from

00:21:40,389 --> 00:21:46,179
the top line to the bottom line a client

00:21:43,600 --> 00:21:48,610
is the information in the system if the

00:21:46,179 --> 00:21:51,639
quality of service is changing oh no no

00:21:48,610 --> 00:21:54,399
well there's information in in logs but

00:21:51,639 --> 00:21:57,940
not such that the client can actually

00:21:54,399 --> 00:22:01,370
use that okay ya know for example it is

00:21:57,940 --> 00:22:03,800
also not known this client below here

00:22:01,370 --> 00:22:06,380
we'll never the ACE absque reiber never

00:22:03,800 --> 00:22:10,070
knows who the publisher was so if you

00:22:06,380 --> 00:22:12,230
want for example to to carry along an IP

00:22:10,070 --> 00:22:15,380
address or hostname or client identifier

00:22:12,230 --> 00:22:17,809
and so that the client can sort of speak

00:22:15,380 --> 00:22:19,610
back on a different channel you want the

00:22:17,809 --> 00:22:22,700
client to know who the sender was then

00:22:19,610 --> 00:22:30,200
you must encode that in tour or can add

00:22:22,700 --> 00:22:32,210
that to the payload okay and let's have

00:22:30,200 --> 00:22:34,160
a quick look at some of the command line

00:22:32,210 --> 00:22:35,780
utilities these are command line

00:22:34,160 --> 00:22:38,230
utilities provided by the mosquito

00:22:35,780 --> 00:22:43,700
packager the most well-known and

00:22:38,230 --> 00:22:45,620
probably actually the only ones we have

00:22:43,700 --> 00:22:49,100
mosquitoes up oh these the command line

00:22:45,620 --> 00:22:51,290
utilities have a plethora of options i'm

00:22:49,100 --> 00:22:53,030
only showing you a few here please look

00:22:51,290 --> 00:22:54,110
at the manual for some of them more for

00:22:53,030 --> 00:22:58,000
some of the others are interesting

00:22:54,110 --> 00:23:00,020
basically it's mosquitoes sub- v is

00:22:58,000 --> 00:23:02,870
interesting let me just go back here

00:23:00,020 --> 00:23:06,170
minus v will show you lines like these

00:23:02,870 --> 00:23:09,080
so the the topic name space and then the

00:23:06,170 --> 00:23:10,460
actual payload if you omit minus V then

00:23:09,080 --> 00:23:14,030
you're not showing the topic you just

00:23:10,460 --> 00:23:16,250
shown the payload okay then you specify

00:23:14,030 --> 00:23:19,520
the hostname the port number you specify

00:23:16,250 --> 00:23:22,250
the TLS parameters CA certificate file

00:23:19,520 --> 00:23:24,520
you can specify TLS private key for

00:23:22,250 --> 00:23:27,590
connection for connecting to a broker

00:23:24,520 --> 00:23:30,500
etc username password TLS version and

00:23:27,590 --> 00:23:33,170
but what interests us here is the minus

00:23:30,500 --> 00:23:35,809
T switch for the topic now these we

00:23:33,170 --> 00:23:38,210
specify with any amount of minus three

00:23:35,809 --> 00:23:40,730
switches the topics we are interested in

00:23:38,210 --> 00:23:43,250
and mosquito sub is a command-line

00:23:40,730 --> 00:23:44,750
utility it will subscribe to the broker

00:23:43,250 --> 00:23:47,059
or attempt to subscribe to the broker

00:23:44,750 --> 00:23:48,860
and as soon as a message arrives on a

00:23:47,059 --> 00:23:51,860
particular topic that we've subscribed

00:23:48,860 --> 00:23:54,530
to it will print that topic name thanks

00:23:51,860 --> 00:23:56,059
to the minus V and the payload that it

00:23:54,530 --> 00:24:00,550
has received just on the command and

00:23:56,059 --> 00:24:03,800
I'll show you in a moment life and the

00:24:00,550 --> 00:24:07,190
counterpart is to publish a message

00:24:03,800 --> 00:24:10,400
mosquito pub mosquito pub takes a topic

00:24:07,190 --> 00:24:12,620
name and a payload and of course all

00:24:10,400 --> 00:24:13,940
these options as well username and

00:24:12,620 --> 00:24:17,029
posting them etc

00:24:13,940 --> 00:24:20,240
etc and in addition to that mosquito pub

00:24:17,029 --> 00:24:22,970
has a switch r which stands for retained

00:24:20,240 --> 00:24:32,419
please retain this message please make

00:24:22,970 --> 00:24:34,460
it durable MQTT is embedded into all

00:24:32,419 --> 00:24:39,370
languages that i can think of c sharp

00:24:34,460 --> 00:24:43,250
java javascript see of course C++ Python

00:24:39,370 --> 00:24:46,269
anything and I'll show you a little bit

00:24:43,250 --> 00:24:52,059
of Python because it I think it's quite

00:24:46,269 --> 00:24:52,059
quite readable here we have a a

00:24:52,299 --> 00:25:01,220
publisher and we use the PAS hope our

00:24:58,580 --> 00:25:05,539
with an eclipse project under which a

00:25:01,220 --> 00:25:09,169
number of MQTT products have been sort

00:25:05,539 --> 00:25:12,080
of yeah based and we input so we import

00:25:09,169 --> 00:25:15,100
the power MQTT module and then we just

00:25:12,080 --> 00:25:19,820
publish off a single message topic

00:25:15,100 --> 00:25:22,009
payload an appropriate subscribe at the

00:25:19,820 --> 00:25:27,409
same time simultaneous abbr scribe on

00:25:22,009 --> 00:25:30,049
the topic conf / hash will receive on

00:25:27,409 --> 00:25:33,289
the topic con fellow which is the topic

00:25:30,049 --> 00:25:38,419
we publish to it will receive our

00:25:33,289 --> 00:25:43,009
payload okay so this is a full Python

00:25:38,419 --> 00:25:44,809
program just as freelance the subscriber

00:25:43,009 --> 00:25:46,460
is a little bit more complicated or a

00:25:44,809 --> 00:25:49,309
little bit more involved because

00:25:46,460 --> 00:25:51,200
messages arrive asynchronously so what

00:25:49,309 --> 00:25:53,450
we're going to do is set up in Python

00:25:51,200 --> 00:25:55,279
we're to set up a callback which is

00:25:53,450 --> 00:25:59,750
invoked for us as soon as the message

00:25:55,279 --> 00:26:03,139
arrives on the queue and we do this also

00:25:59,750 --> 00:26:05,450
by importing the power module and we

00:26:03,139 --> 00:26:07,399
define two callbacks and unconnect

00:26:05,450 --> 00:26:11,990
callback and an on message callback

00:26:07,399 --> 00:26:14,720
which we define here set up here so

00:26:11,990 --> 00:26:17,299
after we connect or the first thing that

00:26:14,720 --> 00:26:19,639
will fire is the on connect call back as

00:26:17,299 --> 00:26:22,279
soon as the connection is successful and

00:26:19,639 --> 00:26:26,419
when that connection is successful what

00:26:22,279 --> 00:26:29,419
we do is run the subscription

00:26:26,419 --> 00:26:32,899
and this 0 is the qsr is the quality of

00:26:29,419 --> 00:26:35,739
service so we subscribe to conf / + just

00:26:32,899 --> 00:26:38,419
that one level of hierarchy level and

00:26:35,739 --> 00:26:40,669
the program then goes into an endless

00:26:38,419 --> 00:26:44,450
loop loop forever and keeps it heated

00:26:40,669 --> 00:26:47,330
loop forever and will invoke our on

00:26:44,450 --> 00:26:49,309
message call back as soon as a message

00:26:47,330 --> 00:26:51,799
arrives and when that message arrives

00:26:49,309 --> 00:26:54,230
our function on message is invoked and

00:26:51,799 --> 00:26:57,289
the only thing we do is print out the

00:26:54,230 --> 00:27:01,009
message topic the payload and the user

00:26:57,289 --> 00:27:03,980
data user data isn't is a user-defined

00:27:01,009 --> 00:27:07,039
blob that we can pass on to our

00:27:03,980 --> 00:27:11,059
functions an optional user-defined blob

00:27:07,039 --> 00:27:16,509
that we can pass on to our functions so

00:27:11,059 --> 00:27:18,919
if we look at this while it's running we

00:27:16,509 --> 00:27:22,100
launch our subscriber in one terminal

00:27:18,919 --> 00:27:24,559
and we publish to conf less thirsty

00:27:22,100 --> 00:27:28,190
remember please we are subscribing in

00:27:24,559 --> 00:27:32,029
our program 2.com / + Kong / thirsty

00:27:28,190 --> 00:27:34,460
beer time ? and we get exactly this and

00:27:32,029 --> 00:27:36,950
if we then publish to confluence

00:27:34,460 --> 00:27:42,100
catering with payload coffee is ready

00:27:36,950 --> 00:27:44,809
then our clients obtain that message

00:27:42,100 --> 00:27:47,299
okay so relatively little code is

00:27:44,809 --> 00:27:50,149
necessary to embed that into an

00:27:47,299 --> 00:27:52,970
application the reason I'm showing you

00:27:50,149 --> 00:28:01,039
this is because a it's very small and B

00:27:52,970 --> 00:28:07,730
to whet your appetite in using MQTT so

00:28:01,039 --> 00:28:10,159
MQTT is used for a whole bunch of real

00:28:07,730 --> 00:28:12,379
time sorry not rhythm of real

00:28:10,159 --> 00:28:16,999
applications practical solutions where

00:28:12,379 --> 00:28:19,159
did you have a question ok a lot is used

00:28:16,999 --> 00:28:21,139
for alerting alerting monitoring

00:28:19,159 --> 00:28:24,200
metering measuring things measuring

00:28:21,139 --> 00:28:28,960
temperatures telemetry data of almost

00:28:24,200 --> 00:28:31,609
any any kind there are they've been

00:28:28,960 --> 00:28:34,399
things done like IBM together with i

00:28:31,609 --> 00:28:38,059
think it was chrysler / invented the the

00:28:34,399 --> 00:28:42,960
the connected car which uses MQTT

00:28:38,059 --> 00:28:46,260
in a rather how shall i phrase is

00:28:42,960 --> 00:28:47,700
politically correctly peculiar way you

00:28:46,260 --> 00:28:50,340
can switch on the windshield wipers from

00:28:47,700 --> 00:28:53,130
outside by publishing an qtt message and

00:28:50,340 --> 00:28:56,390
still after two years trying to find out

00:28:53,130 --> 00:28:59,669
what that's good for but it's possible

00:28:56,390 --> 00:29:02,279
MQTT is used for logging for location

00:28:59,669 --> 00:29:05,100
awareness for example this comes from

00:29:02,279 --> 00:29:08,490
our very own own tracks open source

00:29:05,100 --> 00:29:10,529
application which is a an application

00:29:08,490 --> 00:29:15,000
that runs on on mobile devices Android

00:29:10,529 --> 00:29:16,429
and and iOS which uses MQTT to publish

00:29:15,000 --> 00:29:19,049
your current location when you

00:29:16,429 --> 00:29:23,490
significantly move and this was my last

00:29:19,049 --> 00:29:25,559
approach to Brighton yeah tracking as I

00:29:23,490 --> 00:29:28,559
said automation controlling host

00:29:25,559 --> 00:29:31,140
monitoring very easy to embed in your

00:29:28,559 --> 00:29:33,990
long running script just once in a while

00:29:31,140 --> 00:29:35,370
and mosquito pub published I'm still

00:29:33,990 --> 00:29:36,840
here I'm still alive I'm still doing

00:29:35,370 --> 00:29:39,240
something I'm not doing this I'm not

00:29:36,840 --> 00:29:41,520
doing that and since a broker

00:29:39,240 --> 00:29:43,049
particularly something like the mosquito

00:29:41,520 --> 00:29:45,419
broker is so lightweight you can just

00:29:43,049 --> 00:29:47,730
yeah drop it on my laptop on your on

00:29:45,419 --> 00:29:48,990
your server and use it connect to it and

00:29:47,730 --> 00:29:56,909
see what your applications are doing

00:29:48,990 --> 00:29:58,710
yeah really really nice um let me yep

00:29:56,909 --> 00:30:01,470
they just want one more thing MQTT

00:29:58,710 --> 00:30:03,750
warned i mentioned earlier we saw this

00:30:01,470 --> 00:30:06,360
quarter in this big boiling pot web the

00:30:03,750 --> 00:30:08,490
messages are pumped in and people can

00:30:06,360 --> 00:30:12,419
take them out we've written an

00:30:08,490 --> 00:30:16,350
application called MQTT warren which is

00:30:12,419 --> 00:30:18,960
a subscriber so you have an qtd broker

00:30:16,350 --> 00:30:21,210
and you have MQTT warren and MQTT one

00:30:18,960 --> 00:30:24,510
you configure it to subscribe to

00:30:21,210 --> 00:30:27,450
particular topics and using a number of

00:30:24,510 --> 00:30:30,809
plugins sir what we call services I

00:30:27,450 --> 00:30:34,320
think they're 40 45 or 50 is something

00:30:30,809 --> 00:30:39,270
by now you can take individual messages

00:30:34,320 --> 00:30:40,860
and route them for example if you some

00:30:39,270 --> 00:30:43,350
alerting system you can root them to

00:30:40,860 --> 00:30:46,169
push over and to XBMC they will be

00:30:43,350 --> 00:30:47,909
showing on your own you're on your video

00:30:46,169 --> 00:30:49,980
player on your TV while you're watching

00:30:47,909 --> 00:30:54,120
a film something happened

00:30:49,980 --> 00:30:56,669
or monitoring would be you could direct

00:30:54,120 --> 00:30:58,980
that to Twitter and perhaps to smtp send

00:30:56,669 --> 00:31:01,980
often alert mail and so on so MQTT

00:30:58,980 --> 00:31:05,669
warren is a generalized MQTT subscriber

00:31:01,980 --> 00:31:07,890
which can with a whole number of

00:31:05,669 --> 00:31:09,990
configurable topics take the payloads

00:31:07,890 --> 00:31:12,059
reformat them to your heart's content

00:31:09,990 --> 00:31:15,090
and then push them out onto a different

00:31:12,059 --> 00:31:18,000
service if you have a look at that if

00:31:15,090 --> 00:31:19,890
you like now I would like to show you a

00:31:18,000 --> 00:31:24,090
little bit of something and I've brought

00:31:19,890 --> 00:31:28,470
along this this is so small I took it I

00:31:24,090 --> 00:31:30,720
took a photo of it and so what we have

00:31:28,470 --> 00:31:32,910
here is a small Arduino board just a

00:31:30,720 --> 00:31:36,210
little very inexpensive microcontroller

00:31:32,910 --> 00:31:37,350
which has an MQTT client on it and a

00:31:36,210 --> 00:31:42,360
small application I wrote a little

00:31:37,350 --> 00:31:44,400
little C program and so the bits that

00:31:42,360 --> 00:31:46,500
are lying on my desk are this this

00:31:44,400 --> 00:31:47,910
Arduino this thing on the top is nothing

00:31:46,500 --> 00:31:51,390
else but the power supply I burnt the

00:31:47,910 --> 00:31:54,179
power here and forgot to replace it we

00:31:51,390 --> 00:31:57,630
have here an LED a green LED we have a

00:31:54,179 --> 00:31:59,790
buzzer and we have a temperature sensor

00:31:57,630 --> 00:32:01,740
now this is of course not a temperature

00:31:59,790 --> 00:32:03,360
sensor it's a potential meter the reason

00:32:01,740 --> 00:32:04,500
it's not a temperature sensor is it's

00:32:03,360 --> 00:32:06,390
going to be very it would be very

00:32:04,500 --> 00:32:07,799
difficult for me here to increase the

00:32:06,390 --> 00:32:11,130
temperature from 10 to 20 degrees

00:32:07,799 --> 00:32:13,650
without causing a lot of flames so I'm

00:32:11,130 --> 00:32:17,010
using I'm going to use a potential meter

00:32:13,650 --> 00:32:22,169
to simulate temperature rising and

00:32:17,010 --> 00:32:25,470
falling okay so what I'm going to do now

00:32:22,169 --> 00:32:29,720
is to subscribe I've got just this alias

00:32:25,470 --> 00:32:34,470
and mosquito sub and subscribe to the

00:32:29,720 --> 00:32:38,540
topic clients arduino and then the IP

00:32:34,470 --> 00:32:42,360
address of that arduino 10-0 69 105

00:32:38,540 --> 00:32:48,030
excuse me and we see something happening

00:32:42,360 --> 00:32:51,830
first of all we see that we see that the

00:32:48,030 --> 00:32:55,919
laser pointer emits escape sequences

00:32:51,830 --> 00:32:58,980
right first of all we see that when we

00:32:55,919 --> 00:33:01,500
start it off we got we got these three

00:32:58,980 --> 00:33:02,490
messages here on top let me do that

00:33:01,500 --> 00:33:07,830
again

00:33:02,490 --> 00:33:09,840
I run it again and please look there

00:33:07,830 --> 00:33:12,480
will be three subscription three

00:33:09,840 --> 00:33:17,460
messages that we immediately get press

00:33:12,480 --> 00:33:19,350
ENTER now now that's strange because we

00:33:17,460 --> 00:33:21,270
started the client we started a

00:33:19,350 --> 00:33:24,660
subscriber where did these messages

00:33:21,270 --> 00:33:27,330
suddenly come from they were retained

00:33:24,660 --> 00:33:31,230
they had been retained and these

00:33:27,330 --> 00:33:34,050
messages indicate first of all that this

00:33:31,230 --> 00:33:36,900
client is online that the last read

00:33:34,050 --> 00:33:40,440
temperature is six degrees Celsius

00:33:36,900 --> 00:33:43,020
apparently and that the LED is off okay

00:33:40,440 --> 00:33:49,710
these were retained messages so the

00:33:43,020 --> 00:33:51,900
client the Arduino client used upon

00:33:49,710 --> 00:33:54,540
publishing used retained value so the

00:33:51,900 --> 00:33:56,940
last person if we if we disconnect the

00:33:54,540 --> 00:34:00,090
Arduino and somebody subscribes to this

00:33:56,940 --> 00:34:02,760
topic it will realize the last measured

00:34:00,090 --> 00:34:07,890
temperature was six degrees okay that's

00:34:02,760 --> 00:34:15,960
why it was retained now let me twirl the

00:34:07,890 --> 00:34:19,230
temperature and as you see I'm trying to

00:34:15,960 --> 00:34:20,850
do it as fast as I can as you see the

00:34:19,230 --> 00:34:22,710
Arduino the little micro controller is

00:34:20,850 --> 00:34:25,679
publishing the appropriate temperature

00:34:22,710 --> 00:34:32,240
now you hopefully saw or maybe saw that

00:34:25,679 --> 00:34:36,090
on the left there's a the other left

00:34:32,240 --> 00:34:38,720
this left there's a digital something or

00:34:36,090 --> 00:34:44,490
other a temperature what you call it a

00:34:38,720 --> 00:34:49,050
gauge which is also showing that now

00:34:44,490 --> 00:34:51,810
this is also a and MQTT client but this

00:34:49,050 --> 00:34:54,030
MQTT client is running in a browser and

00:34:51,810 --> 00:34:58,020
it's actually speaking over the

00:34:54,030 --> 00:35:00,960
WebSocket protocol is speaking MQTT over

00:34:58,020 --> 00:35:02,670
WebSocket protocol to our broker and the

00:35:00,960 --> 00:35:08,119
broker is a small mosquito broker which

00:35:02,670 --> 00:35:12,109
is running on a laptop so simultaneously

00:35:08,119 --> 00:35:12,109
let me switch back to the terminal

00:35:12,310 --> 00:35:19,340
keep an eye on on the right and on the

00:35:15,680 --> 00:35:22,610
left simultaneously the publish from the

00:35:19,340 --> 00:35:27,700
microcontroller is read by our

00:35:22,610 --> 00:35:30,530
subscriber on the right and also by our

00:35:27,700 --> 00:35:32,870
web socket subscriber running on the

00:35:30,530 --> 00:35:34,400
browser and this web socket subscriber

00:35:32,870 --> 00:35:36,440
running on the browser can do all sort

00:35:34,400 --> 00:35:38,120
of nice things this I've stolen I've old

00:35:36,440 --> 00:35:39,890
stolen these widgets because I don't do

00:35:38,120 --> 00:35:42,620
this myself I'm not a JavaScript person

00:35:39,890 --> 00:35:44,900
let alone CSS so we have this little

00:35:42,620 --> 00:35:46,310
graph the bottom we have the digital

00:35:44,900 --> 00:35:50,090
temperature on the top we have the gauge

00:35:46,310 --> 00:35:52,430
on the left and so on now that and we

00:35:50,090 --> 00:35:54,050
also have a green IP address on the top

00:35:52,430 --> 00:35:56,150
and we have this red button in the

00:35:54,050 --> 00:36:05,990
center now I'm going to press this red

00:35:56,150 --> 00:36:10,220
button did you hear that and the LED

00:36:05,990 --> 00:36:12,650
went on ok so the pressing of that

00:36:10,220 --> 00:36:17,020
button which it used to be red did the

00:36:12,650 --> 00:36:20,650
following it published a command which

00:36:17,020 --> 00:36:23,600
with a payload please switch LED on the

00:36:20,650 --> 00:36:27,200
Arduino microcontroller is subscribed to

00:36:23,600 --> 00:36:29,660
that topic and it says ok i will switch

00:36:27,200 --> 00:36:30,980
the lid on and then it publishes back

00:36:29,660 --> 00:36:34,430
i'll show you in a second then it

00:36:30,980 --> 00:36:36,710
publishes back LED is on and this

00:36:34,430 --> 00:36:39,380
publishing back that the lead is on or

00:36:36,710 --> 00:36:41,720
the LED is on then causes the browser to

00:36:39,380 --> 00:36:44,120
actually switch it on so we get a

00:36:41,720 --> 00:36:46,850
feedback from a client we can say do

00:36:44,120 --> 00:36:48,860
something and after it's done it it can

00:36:46,850 --> 00:36:54,790
publish back on a different topic ok

00:36:48,860 --> 00:36:54,790
I've done it if I move

00:37:04,040 --> 00:37:10,620
the battery pack in my Mac exploded and

00:37:07,380 --> 00:37:20,910
my mouse my most wrecked my mouse pad is

00:37:10,620 --> 00:37:23,010
oh my god now let me click that and

00:37:20,910 --> 00:37:25,080
let's see what happened he can you see

00:37:23,010 --> 00:37:27,780
that is so far down so there was the

00:37:25,080 --> 00:37:32,250
last temperature reading then we

00:37:27,780 --> 00:37:36,960
published lead command 0 and the Arduino

00:37:32,250 --> 00:37:44,820
published back okay lead is now 0 if we

00:37:36,960 --> 00:37:47,820
publish lead command on command one and

00:37:44,820 --> 00:37:49,800
the Arduino it goes back after is I

00:37:47,820 --> 00:37:57,140
switched on the actual lamp it goes back

00:37:49,800 --> 00:38:00,300
lead is one ok now let's do following

00:37:57,140 --> 00:38:06,180
let me kill this client I will just pull

00:38:00,300 --> 00:38:10,110
the plug pull the power plug and I said

00:38:06,180 --> 00:38:12,810
to you or I explained a little earlier

00:38:10,110 --> 00:38:16,590
that we have last will and testament

00:38:12,810 --> 00:38:18,240
last will and testament means the client

00:38:16,590 --> 00:38:20,430
who sets up a last will and testament

00:38:18,240 --> 00:38:22,740
indicates to the broker please in the

00:38:20,430 --> 00:38:26,070
case of my death and the hopefully

00:38:22,740 --> 00:38:28,470
unlikely event of my death when you when

00:38:26,070 --> 00:38:31,260
you haven't seen me for a while this

00:38:28,470 --> 00:38:34,920
Wireless configurable by keep alive then

00:38:31,260 --> 00:38:36,540
please publish to all subscribers of

00:38:34,920 --> 00:38:39,390
this particular topic publish this

00:38:36,540 --> 00:38:43,490
information now while I've been speaking

00:38:39,390 --> 00:38:43,490
yes happened while I've been speaking

00:38:43,520 --> 00:38:48,030
remember I pulled the plug I hit enter a

00:38:45,870 --> 00:38:51,090
few times to make some space and now

00:38:48,030 --> 00:38:54,030
suddenly a publish has or a message has

00:38:51,090 --> 00:38:59,010
arrived here on this same topic clients

00:38:54,030 --> 00:39:00,690
arduino with a 0 and that has not been

00:38:59,010 --> 00:39:02,160
published by the adrenal because I

00:39:00,690 --> 00:39:04,500
pulled a plower I pulled the plug it has

00:39:02,160 --> 00:39:08,010
no battery backup ok that was published

00:39:04,500 --> 00:39:11,730
by the broker and this information is

00:39:08,010 --> 00:39:13,080
sent to all clients to all subscribers

00:39:11,730 --> 00:39:16,890
I don't know whether you notice but on

00:39:13,080 --> 00:39:20,580
the in the web browser the thing that

00:39:16,890 --> 00:39:24,000
was green now turned red yes so all

00:39:20,580 --> 00:39:25,590
clients can react to this last will and

00:39:24,000 --> 00:39:28,020
testament and do something in this

00:39:25,590 --> 00:39:30,810
particular case this client which is the

00:39:28,020 --> 00:39:33,600
browser gimmick thing has switched the

00:39:30,810 --> 00:39:36,300
address of this Arduino microcontroller

00:39:33,600 --> 00:39:38,490
from green to red yeah but we could have

00:39:36,300 --> 00:39:40,140
alerted somebody via email over ever

00:39:38,490 --> 00:39:46,340
could have done something something

00:39:40,140 --> 00:39:48,540
special I'm now going to power up the

00:39:46,340 --> 00:39:50,369
Arduino again hit enter a couple times

00:39:48,540 --> 00:39:52,980
so you see that something's going to

00:39:50,369 --> 00:39:55,500
happen now this takes a few seconds just

00:39:52,980 --> 00:40:00,210
plug in the I'll plug it in for better

00:39:55,500 --> 00:40:02,160
use the first thing it does after

00:40:00,210 --> 00:40:05,220
indicating last will and testament

00:40:02,160 --> 00:40:07,740
please publish this on my demise it

00:40:05,220 --> 00:40:10,619
turns itself on it says okay I am now on

00:40:07,740 --> 00:40:13,470
so any client or queries this will see

00:40:10,619 --> 00:40:15,690
the Arduino is actually on and now

00:40:13,470 --> 00:40:17,070
another thing has happened you you

00:40:15,690 --> 00:40:18,150
haven't seen that of course but another

00:40:17,070 --> 00:40:20,880
thing has happened when the

00:40:18,150 --> 00:40:23,609
microcontroller came back up even though

00:40:20,880 --> 00:40:32,970
the power had been off the green LED is

00:40:23,609 --> 00:40:34,680
now on why it would be I think it should

00:40:32,970 --> 00:40:36,210
be expected that if we power up a

00:40:34,680 --> 00:40:44,520
microcontroller it starts off refresh

00:40:36,210 --> 00:40:47,820
why is the green LED on exactly because

00:40:44,520 --> 00:40:52,500
also the Arduino upon startup subscribes

00:40:47,820 --> 00:40:55,920
to the broker and subscribe to the

00:40:52,500 --> 00:40:59,700
information should my LED be on or not

00:40:55,920 --> 00:41:03,690
and the last command was a retained one

00:40:59,700 --> 00:41:05,340
so this next subscription is the

00:41:03,690 --> 00:41:07,050
retained one in other words the

00:41:05,340 --> 00:41:11,180
microcontroller knows okay I have to be

00:41:07,050 --> 00:41:13,800
on yep exactly let's see the power of

00:41:11,180 --> 00:41:18,950
retained messages they're very simple

00:41:13,800 --> 00:41:18,950
technology but works quite nicely

00:41:19,130 --> 00:41:29,660
okay any questions so far to this right

00:41:27,740 --> 00:41:33,350
so that's the setup that we were seeing

00:41:29,660 --> 00:41:36,230
here and that's what you saw and then we

00:41:33,350 --> 00:41:38,390
can do things like yeah I singer or

00:41:36,230 --> 00:41:41,330
whatever monitoring system you use but

00:41:38,390 --> 00:41:43,670
I'm sure use a single and I think I

00:41:41,330 --> 00:41:49,580
alerts for example on mobile phones this

00:41:43,670 --> 00:41:52,970
here is via pushover and so there are a

00:41:49,580 --> 00:41:56,980
number of very nice things now there are

00:41:52,970 --> 00:42:00,590
also a number of real real world

00:41:56,980 --> 00:42:05,000
programs for anybody now collect d on

00:42:00,590 --> 00:42:10,630
linux unix systems yep collect d has

00:42:05,000 --> 00:42:13,610
recently acquired an MQTT transport and

00:42:10,630 --> 00:42:17,030
so this is this is a plug-in

00:42:13,610 --> 00:42:19,130
configuration and so we specify the host

00:42:17,030 --> 00:42:25,460
port and so on the client ID the quality

00:42:19,130 --> 00:42:27,140
of service of the of the broker that we

00:42:25,460 --> 00:42:29,570
specify whether we want to retain all

00:42:27,140 --> 00:42:31,040
messages or not and then this is what it

00:42:29,570 --> 00:42:33,380
looks like when colleagues collect d

00:42:31,040 --> 00:42:35,890
starts up for example collect d

00:42:33,380 --> 00:42:38,780
localhost that's the host name here

00:42:35,890 --> 00:42:41,090
memory memory free so in so many updates

00:42:38,780 --> 00:42:44,630
on the zones and many buyers etc in the

00:42:41,090 --> 00:42:48,050
typical collecti format and collecti can

00:42:44,630 --> 00:42:54,680
both publish over MQTT and can also

00:42:48,050 --> 00:42:58,100
subscribe over MQTT and i have promised

00:42:54,680 --> 00:43:05,180
that by early next week this will also

00:42:58,100 --> 00:43:07,610
be TLS capable so stay tuned yeah MQTT

00:43:05,180 --> 00:43:11,360
in the wild gray log the logging system

00:43:07,610 --> 00:43:15,430
speaks MQTT there's a plug-in for that

00:43:11,360 --> 00:43:18,440
so can directly read messages over MQTT

00:43:15,430 --> 00:43:20,540
beaver ansible the configuration

00:43:18,440 --> 00:43:22,940
management system has MQTT from for

00:43:20,540 --> 00:43:24,620
notifications for example quite

00:43:22,940 --> 00:43:27,080
interesting rabbitmq we mentioned

00:43:24,620 --> 00:43:29,570
earlier there are a number of other q

00:43:27,080 --> 00:43:32,710
broker queuing systems RabbitMQ as an

00:43:29,570 --> 00:43:36,580
amqp broker has an n QT

00:43:32,710 --> 00:43:40,619
the connector collecti I just mentioned

00:43:36,580 --> 00:43:45,130
out map the open home automation broker

00:43:40,619 --> 00:43:47,950
speaks MQTT a number of things github

00:43:45,130 --> 00:43:51,640
when you when you do a commit of a

00:43:47,950 --> 00:43:53,740
github you can set up a a already called

00:43:51,640 --> 00:43:56,589
commit notification comment to trigger

00:43:53,740 --> 00:43:59,260
commit to what are they called github

00:43:56,589 --> 00:44:01,270
has a whole bunch of predefined triggers

00:43:59,260 --> 00:44:02,770
that you can set when when a new comment

00:44:01,270 --> 00:44:05,170
is called and these things have a

00:44:02,770 --> 00:44:08,440
particular name it's in settings you can

00:44:05,170 --> 00:44:11,910
set up I think it's called notification

00:44:08,440 --> 00:44:14,950
something similar you can set up MQTT

00:44:11,910 --> 00:44:17,859
yeah not not i don't mean the get hooks

00:44:14,950 --> 00:44:22,440
but it's github answer to a good hook

00:44:17,859 --> 00:44:22,440
here I forget exactly what it's called

00:44:22,560 --> 00:44:30,400
Wireshark speaks MQTT flux oh and we

00:44:26,140 --> 00:44:35,250
make electric make electricity meters a

00:44:30,400 --> 00:44:35,250
metering systems which talk and qtt yes

00:44:38,190 --> 00:44:41,520
yes of course

00:44:41,660 --> 00:44:51,559
I haven't looked at I have IFTTT if this

00:44:47,270 --> 00:44:53,180
then that for a long time I honestly

00:44:51,559 --> 00:44:55,760
don't know interesting i'll check later

00:44:53,180 --> 00:45:08,780
on yeah yeah very interesting very

00:44:55,760 --> 00:45:11,990
interesting yeah so if if this webpage

00:45:08,780 --> 00:45:16,640
has changed sent me an email or if this

00:45:11,990 --> 00:45:18,890
file in dropbox has been modified show

00:45:16,640 --> 00:45:24,289
me the weather report a whole bunch of

00:45:18,890 --> 00:45:26,809
different combinations yeah IFTTT this

00:45:24,289 --> 00:45:29,000
is off topic is very nice that what I

00:45:26,809 --> 00:45:31,369
don't like of order would I let the

00:45:29,000 --> 00:45:33,109
dislike about it it's sort of it's in

00:45:31,369 --> 00:45:34,839
the cloud and you have to give them your

00:45:33,109 --> 00:45:38,059
credentials to access your services

00:45:34,839 --> 00:45:40,250
using something like maybe a little bit

00:45:38,059 --> 00:45:42,170
of work but using something like your

00:45:40,250 --> 00:45:44,270
own local mosquito broker bit of a bit

00:45:42,170 --> 00:45:47,450
of MQTT you could set up something quite

00:45:44,270 --> 00:45:51,140
similar yourself relatively easy jenkins

00:45:47,450 --> 00:45:54,039
for example does notifications change

00:45:51,140 --> 00:45:57,349
modifications over MQTT dymond the

00:45:54,039 --> 00:45:59,480
statistics collector the pricing is

00:45:57,349 --> 00:46:02,450
probe python-based statistics collector

00:45:59,480 --> 00:46:04,819
does MQTT they saw their number of of

00:46:02,450 --> 00:46:07,640
different things let me show you i have

00:46:04,819 --> 00:46:10,220
i have minus two minutes so let me just

00:46:07,640 --> 00:46:12,799
show you one more thing please and and

00:46:10,220 --> 00:46:15,950
that let me just try and show you one

00:46:12,799 --> 00:46:18,049
more thing we have our little

00:46:15,950 --> 00:46:22,849
microcontroller and i'm going to launch

00:46:18,049 --> 00:46:28,609
a tiny little program which is going to

00:46:22,849 --> 00:46:30,650
read the these temperature readings now

00:46:28,609 --> 00:46:35,260
so something something happens to you

00:46:30,650 --> 00:46:35,260
something changes and let's see

00:46:39,160 --> 00:46:53,960
the inner cabana and elasticsearch okay

00:46:46,240 --> 00:46:55,610
arduino so this little program what did

00:46:53,960 --> 00:46:58,450
it do it just dipped into the cauldron

00:46:55,610 --> 00:47:02,510
into our large MQTT quadrant pulled out

00:46:58,450 --> 00:47:04,790
messages for a particular topic knows

00:47:02,510 --> 00:47:06,740
that it's supposed to contain a celsius

00:47:04,790 --> 00:47:09,310
temperature converts it to Fahrenheit

00:47:06,740 --> 00:47:11,780
and shoves it into elasticsearch and

00:47:09,310 --> 00:47:14,840
this has happened just now no nevermind

00:47:11,780 --> 00:47:18,410
1710 1814 isn't just just exactly now

00:47:14,840 --> 00:47:22,160
and we see here in the in this period we

00:47:18,410 --> 00:47:26,240
had 60 messages okay and here are here

00:47:22,160 --> 00:47:28,280
we can now well you probably can I can't

00:47:26,240 --> 00:47:31,490
you could now with this draw nice

00:47:28,280 --> 00:47:33,320
temperature graphs and so on so what

00:47:31,490 --> 00:47:35,720
does this message look like if we have a

00:47:33,320 --> 00:47:37,730
topic and our time stamp and ourselves

00:47:35,720 --> 00:47:40,340
this temperature which was transmitted

00:47:37,730 --> 00:47:44,990
by the microcontroller and the

00:47:40,340 --> 00:47:49,250
Fahrenheit equivalent of it okay and we

00:47:44,990 --> 00:47:51,470
see that this is let me try and get this

00:47:49,250 --> 00:47:58,190
as fast as I can I'll just I'm just

00:47:51,470 --> 00:48:02,780
twirling my a potentiometer this is

00:47:58,190 --> 00:48:08,120
something that is quite fastener with

00:48:02,780 --> 00:48:11,390
doing four hundred messages here okay so

00:48:08,120 --> 00:48:12,920
an example of an existing application or

00:48:11,390 --> 00:48:14,240
a little micro controller that publishes

00:48:12,920 --> 00:48:16,610
temperature readings and Celsius

00:48:14,240 --> 00:48:20,060
somebody says we can't do anything with

00:48:16,610 --> 00:48:21,200
cells for example Americans yeah we

00:48:20,060 --> 00:48:23,440
can't do anything with salsas we need

00:48:21,200 --> 00:48:25,700
Fahrenheit and we want it stored

00:48:23,440 --> 00:48:27,140
launched a tiny needle programs there's

00:48:25,700 --> 00:48:28,850
nothing else but subscribe to that one

00:48:27,140 --> 00:48:31,100
topic convert celsius or fahrenheit

00:48:28,850 --> 00:48:33,890
shoves it into somewhere somewhere else

00:48:31,100 --> 00:48:37,130
what you want to go this way right sorry

00:48:33,890 --> 00:48:39,050
and shoves it somewhere else and we can

00:48:37,130 --> 00:48:41,090
have umpteen of those if we wanted

00:48:39,050 --> 00:48:43,490
kelvin we could either modify or

00:48:41,090 --> 00:48:46,550
application or create a new one which

00:48:43,490 --> 00:48:48,890
converts into kelvin okay so that's

00:48:46,550 --> 00:48:51,900
something that to my mind is highly

00:48:48,890 --> 00:48:54,000
interesting about MTG MQTT to

00:48:51,900 --> 00:48:55,859
possibility of grabbing data that is

00:48:54,000 --> 00:48:57,329
coming in anyway modifying and changing

00:48:55,859 --> 00:49:05,270
storing and putting it there putting it

00:48:57,329 --> 00:49:13,260
there putting it there ok any questions

00:49:05,270 --> 00:49:16,910
yes the first fifth by myself the MQTT

00:49:13,260 --> 00:49:22,170
broker knows the last state of the

00:49:16,910 --> 00:49:26,369
publisher if I'm right or the last

00:49:22,170 --> 00:49:29,400
informations from the publisher the an

00:49:26,369 --> 00:49:33,450
MQTT broker knows well several things it

00:49:29,400 --> 00:49:36,500
knows which client published last will

00:49:33,450 --> 00:49:39,180
with which value and also which

00:49:36,500 --> 00:49:41,940
subscribers it has already transmitted a

00:49:39,180 --> 00:49:45,539
particular message to ok yeah is it also

00:49:41,940 --> 00:49:49,020
possible to do a kind of history so if

00:49:45,539 --> 00:49:52,319
I'm a new subscriber that I'm getting

00:49:49,020 --> 00:49:54,420
the last messages of the last hour for

00:49:52,319 --> 00:49:58,190
example not the last hour but yes that

00:49:54,420 --> 00:50:00,510
is possible what I haven't gone into is

00:49:58,190 --> 00:50:03,510
when a client connects it specifies a

00:50:00,510 --> 00:50:05,819
client ID now this client ID can be null

00:50:03,510 --> 00:50:07,770
0 nothing in which case the broker

00:50:05,819 --> 00:50:10,950
assigned to the client ID but I can also

00:50:07,770 --> 00:50:14,819
specify i am JP men's yeah that's my

00:50:10,950 --> 00:50:17,910
client ID if I do that nobody else may

00:50:14,819 --> 00:50:19,980
connect with that client ID them there

00:50:17,910 --> 00:50:21,990
cannot there may not be to clients

00:50:19,980 --> 00:50:24,480
connected with the same ID should that

00:50:21,990 --> 00:50:25,650
happen the broker will arbitrarily kick

00:50:24,480 --> 00:50:28,470
one of them all away will just

00:50:25,650 --> 00:50:31,500
disconnect ok so I connect with with a

00:50:28,470 --> 00:50:33,799
predefined client ID and I connect with

00:50:31,500 --> 00:50:38,279
a quality of service of at least one

00:50:33,799 --> 00:50:40,140
then I will obtain from the broker the

00:50:38,279 --> 00:50:46,190
broker will send me all messages that

00:50:40,140 --> 00:50:46,190
have arrived since I was last connected

00:50:47,089 --> 00:50:52,740
to which I have previously subscribed

00:50:49,770 --> 00:50:56,250
yeah so that is possible yep thank you

00:50:52,740 --> 00:50:58,589
and we have any further questions please

00:50:56,250 --> 00:51:02,069
give me a second to reach you of the

00:50:58,589 --> 00:51:05,900
Russian your microphone um yeah I got a

00:51:02,069 --> 00:51:10,170
question SEO talk also had the topic

00:51:05,900 --> 00:51:13,369
IOT in the description you've been

00:51:10,170 --> 00:51:16,470
working here with an Arduino yes um and

00:51:13,369 --> 00:51:18,750
Prague in programming all of it by

00:51:16,470 --> 00:51:20,940
yourself do you know if any products for

00:51:18,750 --> 00:51:25,800
example like a universal power supply

00:51:20,940 --> 00:51:29,010
that already ships with MQTT yes there

00:51:25,800 --> 00:51:32,000
is a chip called although i'm not sure

00:51:29,010 --> 00:51:37,010
if it ships with MQTT but i know that it

00:51:32,000 --> 00:51:40,440
is MQTT capable it's called an ESP Oh

00:51:37,010 --> 00:51:43,589
somebody happen my memory ESP 12 i think

00:51:40,440 --> 00:51:45,960
is called it's a thumbnail size chip

00:51:43,589 --> 00:51:51,589
which has a Wi-Fi control on board and

00:51:45,960 --> 00:51:54,930
speaks in qtt there are / products like

00:51:51,589 --> 00:52:00,480
electricity meters look so ray make

00:51:54,930 --> 00:52:07,140
electric that speak MQTT you mean

00:52:00,480 --> 00:52:10,400
ready-made off-the-shelf products there

00:52:07,140 --> 00:52:15,829
there there are a couple but i don't

00:52:10,400 --> 00:52:21,680
know i can't tell you any offhand but

00:52:15,829 --> 00:52:24,930
but if you would please go to MQTT org

00:52:21,680 --> 00:52:26,069
there's a page that that sort of lists

00:52:24,930 --> 00:52:28,710
clients I haven't been there in a long

00:52:26,069 --> 00:52:30,990
time they might there may now be

00:52:28,710 --> 00:52:36,329
actually a number of additional products

00:52:30,990 --> 00:52:41,299
but i think if we check now we would

00:52:36,329 --> 00:52:41,299
probably be slightly disappointed yeah

00:52:45,680 --> 00:52:49,700
Oh indeed yes absolutely absolutely SNMP

00:52:48,080 --> 00:52:52,400
is quite heavy weight and MKT is

00:52:49,700 --> 00:52:54,320
terribly light and I think I think many

00:52:52,400 --> 00:52:55,730
people just haven't even though MQTT is

00:52:54,320 --> 00:52:57,950
now 20 years old many people just

00:52:55,730 --> 00:53:01,010
haven't sort of realized it yet there

00:52:57,950 --> 00:53:02,960
has been a gigantic interest in MKT tea

00:53:01,010 --> 00:53:08,300
only recently the last three weeks

00:53:02,960 --> 00:53:10,910
because Amazon AWS has opened up in sort

00:53:08,300 --> 00:53:13,760
of an IOT portal which pigs MQTT so the

00:53:10,910 --> 00:53:16,400
massive amount of interest but

00:53:13,760 --> 00:53:19,340
ready-made products of the shelf no I'm

00:53:16,400 --> 00:53:22,190
sorry other than electric electricity

00:53:19,340 --> 00:53:34,220
meters I can't think of anything off

00:53:22,190 --> 00:53:38,300
hand any other questions right that's it

00:53:34,220 --> 00:53:40,420
thank you very much I'm on time thank

00:53:38,300 --> 00:53:40,420

YouTube URL: https://www.youtube.com/watch?v=D6Jkh81dL0w


