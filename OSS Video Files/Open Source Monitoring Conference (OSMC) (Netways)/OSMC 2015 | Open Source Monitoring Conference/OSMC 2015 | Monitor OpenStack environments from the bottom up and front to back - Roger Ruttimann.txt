Title: OSMC 2015 | Monitor OpenStack environments from the bottom up and front to back - Roger Ruttimann
Publication date: 2015-11-26
Playlist: OSMC 2015 | Open Source Monitoring Conference
Description: 
	Elastic virtualization using the popular OpenStack platform is for real. While Sysadmins and DevOps professionals fully embrace these new developments, managing them is still a challenge. Adding layers of abstraction for compute, network and storage resources further increases complexity. Resource sharing, the fully dynamic creation of networks, virtual machines and recently Linux containers inside the framework also increases the challenge of managing these already complex systems.

This presentation will provide insights on how to optimize the monitoring and management of OpenStack "from the bottom up", and from front to back to efficiently manage and troubleshoot OpenStack environments using API monitoring techniques and best of breed OpenSource tools such as Icinga 2.4, OpenStack API, Fuel, BoxSpy, OpenTSDB and others.
Captions: 
	00:00:08,860 --> 00:00:14,860
hi welcome back to our final talk in

00:00:11,780 --> 00:00:14,860
this room for today and

00:00:15,570 --> 00:00:23,430
was a greedy man mmm correct Thanks and

00:00:20,240 --> 00:00:26,580
he will tell us something about we

00:00:23,430 --> 00:00:30,289
should monitoring hope azteca

00:00:26,580 --> 00:00:32,850
environments how hard it is yeah okay

00:00:30,289 --> 00:00:35,220
thanks everybody coming for the last

00:00:32,850 --> 00:00:38,760
talk of the day I know that I'm standing

00:00:35,220 --> 00:00:42,420
between now and the party that starts in

00:00:38,760 --> 00:00:44,400
an hour and a half but I want to talk

00:00:42,420 --> 00:00:46,019
about OpenStack and really passionate

00:00:44,400 --> 00:00:47,910
about OpenStack because we use it over

00:00:46,019 --> 00:00:49,829
the last couple of years and we are

00:00:47,910 --> 00:00:53,010
involved in the open source product as

00:00:49,829 --> 00:00:56,100
well and we learned a lot so I want to

00:00:53,010 --> 00:00:58,079
share what I learned over the years so

00:00:56,100 --> 00:01:00,660
i'm the vp of engineering a groundwork

00:00:58,079 --> 00:01:03,420
open source a company based in San

00:01:00,660 --> 00:01:06,509
Francisco that specializes on

00:01:03,420 --> 00:01:09,960
integrating of open source tools into a

00:01:06,509 --> 00:01:13,110
comprehensive solution and as I said

00:01:09,960 --> 00:01:16,039
today's talk will cover how to topic of

00:01:13,110 --> 00:01:20,070
monitoring mutual environments with

00:01:16,039 --> 00:01:22,790
specific for an OpenStack here's the

00:01:20,070 --> 00:01:25,680
agenda that i will cover so it's a

00:01:22,790 --> 00:01:28,110
virtualization has an impact of IT

00:01:25,680 --> 00:01:31,680
administrators and DevOps and in general

00:01:28,110 --> 00:01:33,720
how you manage your monitoring how does

00:01:31,680 --> 00:01:37,350
OpenStack fit into the visualization of

00:01:33,720 --> 00:01:40,320
today the monitoring definitely has

00:01:37,350 --> 00:01:41,970
changed the landscape of IT managers

00:01:40,320 --> 00:01:44,040
it's all different than it was ten years

00:01:41,970 --> 00:01:46,740
ago and i will give an overview what has

00:01:44,040 --> 00:01:49,890
changed over the years new monitoring

00:01:46,740 --> 00:01:52,649
concepts are necessary to really answer

00:01:49,890 --> 00:01:55,020
the challenges and of course there are

00:01:52,649 --> 00:01:57,479
many many many tools out there to really

00:01:55,020 --> 00:01:58,829
cover everything and the conclusion it's

00:01:57,479 --> 00:02:02,969
more what we have learned over the last

00:01:58,829 --> 00:02:06,180
couple of years so but let's start with

00:02:02,969 --> 00:02:08,880
the facts so OpenStack it's real even

00:02:06,180 --> 00:02:10,619
some people say oh it's a little thing

00:02:08,880 --> 00:02:13,350
on the side and people are using it it's

00:02:10,619 --> 00:02:15,480
complicated nobody will using it but not

00:02:13,350 --> 00:02:19,650
true OpenStack it's real it's widely

00:02:15,480 --> 00:02:23,790
used it's not just an ID that somewhere

00:02:19,650 --> 00:02:26,130
happens it's a challenge for i.t i.t s

00:02:23,790 --> 00:02:28,680
retool it because it changes the

00:02:26,130 --> 00:02:29,460
virtualization there are serious

00:02:28,680 --> 00:02:31,110
deployments

00:02:29,460 --> 00:02:34,080
out there and not just in Silicon Valley

00:02:31,110 --> 00:02:35,750
ask the telecoms in Europe because there

00:02:34,080 --> 00:02:38,190
are many customers they're using

00:02:35,750 --> 00:02:41,400
OpenStack to provision their environment

00:02:38,190 --> 00:02:43,590
for telecom switching and routing so a

00:02:41,400 --> 00:02:45,840
lot of things are going on in addition

00:02:43,590 --> 00:02:48,060
the open source product project it's

00:02:45,840 --> 00:02:50,640
very popular the open source conference

00:02:48,060 --> 00:02:53,490
it's twice a year and has like up to

00:02:50,640 --> 00:02:55,890
10,000 people the last conference was in

00:02:53,490 --> 00:02:57,630
Tokyo like three weeks ago and in

00:02:55,890 --> 00:03:01,710
somewhere it was in Vancouver the open

00:02:57,630 --> 00:03:04,230
sex on it so it's a big conference a lot

00:03:01,710 --> 00:03:05,730
of corporate sponsors are there so a lot

00:03:04,230 --> 00:03:09,740
of people are jumping on the bandwagon

00:03:05,730 --> 00:03:13,800
to adapt OpenStack in their environment

00:03:09,740 --> 00:03:16,500
but the challenge is again a lot of

00:03:13,800 --> 00:03:19,230
tools can be used to manage a monitoring

00:03:16,500 --> 00:03:20,670
OpenStack it's not just one tool just be

00:03:19,230 --> 00:03:23,280
clear there's no one tool they can

00:03:20,670 --> 00:03:25,680
monitor OpenStack and OpenStack itself

00:03:23,280 --> 00:03:27,360
they don't have a tool to monitor the

00:03:25,680 --> 00:03:29,430
stack so you need all these other tools

00:03:27,360 --> 00:03:32,670
and here it's a combination of tools

00:03:29,430 --> 00:03:34,530
that we used in the field to monitor and

00:03:32,670 --> 00:03:36,990
manage open second vironment and that

00:03:34,530 --> 00:03:40,470
will go into the details for all these

00:03:36,990 --> 00:03:42,270
tools so let's start with reviewing what

00:03:40,470 --> 00:03:47,850
has changed over the last couple of

00:03:42,270 --> 00:03:50,070
years we started like this was the good

00:03:47,850 --> 00:03:52,230
old way to provision machine you bought

00:03:50,070 --> 00:03:54,450
a server you put it in Iraq you

00:03:52,230 --> 00:03:57,300
installed an application you decided how

00:03:54,450 --> 00:03:59,970
to monitor it you define the monitoring

00:03:57,300 --> 00:04:02,070
the trash holds and tell me you were

00:03:59,970 --> 00:04:03,930
done and then you repeat that that

00:04:02,070 --> 00:04:06,900
process and lets you send up in a whole

00:04:03,930 --> 00:04:08,670
environment and it was static if a

00:04:06,900 --> 00:04:11,520
server disappeared you know it crashed

00:04:08,670 --> 00:04:14,960
your provision the new server insult

00:04:11,520 --> 00:04:18,720
application etc that was the way how

00:04:14,960 --> 00:04:20,130
monitoring why I was provisioned and of

00:04:18,720 --> 00:04:22,890
course then you at the dashboard and

00:04:20,130 --> 00:04:25,710
then if an alert comes out you get an

00:04:22,890 --> 00:04:29,070
email that says service service or so

00:04:25,710 --> 00:04:31,980
and so it's not working or a service

00:04:29,070 --> 00:04:34,470
checked failed and so on it worked for a

00:04:31,980 --> 00:04:37,500
long way this was the way of monitoring

00:04:34,470 --> 00:04:41,180
and early money open source tools that

00:04:37,500 --> 00:04:43,390
came out worked with these concepts of

00:04:41,180 --> 00:04:46,000
SNMP checks as I say

00:04:43,390 --> 00:04:47,470
check for checks etc to get the

00:04:46,000 --> 00:04:51,460
monitoring information back into the

00:04:47,470 --> 00:04:54,370
system then the first wave of

00:04:51,460 --> 00:04:57,190
virtualization came in but all that did

00:04:54,370 --> 00:04:59,170
was what was virtualized where the

00:04:57,190 --> 00:05:02,230
servers the servers the physical servers

00:04:59,170 --> 00:05:04,090
became VMs but nothing else changed

00:05:02,230 --> 00:05:06,160
because you could provision the same way

00:05:04,090 --> 00:05:08,110
instead of a server you got a vm you can

00:05:06,160 --> 00:05:09,850
set it installed application on top of

00:05:08,110 --> 00:05:11,950
the application you define the

00:05:09,850 --> 00:05:14,200
monitoring and you could use it the same

00:05:11,950 --> 00:05:15,790
way I think that's one of the reasons

00:05:14,200 --> 00:05:18,370
because it was the same way as before

00:05:15,790 --> 00:05:20,470
that VMware became very popular because

00:05:18,370 --> 00:05:22,240
you had nothing to change it's just like

00:05:20,470 --> 00:05:26,470
now you get the vm instead of a physical

00:05:22,240 --> 00:05:31,360
server and you are ready to go the only

00:05:26,470 --> 00:05:33,580
thing that came in is we got an API rest

00:05:31,360 --> 00:05:35,560
api for the virtualization layer so that

00:05:33,580 --> 00:05:38,050
the virtualization environment could

00:05:35,560 --> 00:05:41,020
give you more information about insights

00:05:38,050 --> 00:05:43,270
about the VMS and how the VMS are

00:05:41,020 --> 00:05:45,490
connected and some of the dependencies

00:05:43,270 --> 00:05:48,610
so an API came in so there was really

00:05:45,490 --> 00:05:50,560
the first API that came in which was the

00:05:48,610 --> 00:05:52,030
soap api and at the REST API that came

00:05:50,560 --> 00:05:55,540
in to give you information about the

00:05:52,030 --> 00:05:59,440
virtualization platform what as we know

00:05:55,540 --> 00:06:03,010
it didn't stop there software-defined

00:05:59,440 --> 00:06:05,080
everything was the next compute

00:06:03,010 --> 00:06:08,980
hypervisors that was VMware it's famous

00:06:05,080 --> 00:06:10,930
for storage and network virtualization

00:06:08,980 --> 00:06:14,320
came in and suddenly we had much more

00:06:10,930 --> 00:06:17,500
tools right OpenStack came reffin netapp

00:06:14,320 --> 00:06:21,940
at an API open daylight and so on so the

00:06:17,500 --> 00:06:24,310
virtualization software came in for for

00:06:21,940 --> 00:06:26,470
managing this net the IT infrastructure

00:06:24,310 --> 00:06:29,110
so the traditional IT infrastructure

00:06:26,470 --> 00:06:32,140
suddenly starts to change slowly because

00:06:29,110 --> 00:06:34,780
you can do it virtual faster and all to

00:06:32,140 --> 00:06:37,930
AP is and of course then the public

00:06:34,780 --> 00:06:41,410
clouds are there too so you have Amazon

00:06:37,930 --> 00:06:43,510
Rackspace assure all that it's now

00:06:41,410 --> 00:06:45,280
everything is visualized you get a

00:06:43,510 --> 00:06:48,130
virtual network you get a virtual

00:06:45,280 --> 00:06:49,840
compute node and as well storage you

00:06:48,130 --> 00:06:52,930
don't manage it the same way as you did

00:06:49,840 --> 00:06:55,830
before and that's what happens now

00:06:52,930 --> 00:06:57,070
everything gets virtualized and suddenly

00:06:55,830 --> 00:06:58,770
the

00:06:57,070 --> 00:07:01,630
that you had before don't work anymore

00:06:58,770 --> 00:07:03,850
right so SNMP doesn't work in a

00:07:01,630 --> 00:07:06,550
virtualized storage because it's all

00:07:03,850 --> 00:07:08,890
managed inside so to get information you

00:07:06,550 --> 00:07:10,990
have to go to the rest api to get the

00:07:08,890 --> 00:07:13,750
information out of the system same thing

00:07:10,990 --> 00:07:16,780
for the network and then virtualization

00:07:13,750 --> 00:07:18,490
to compute as well so it really changed

00:07:16,780 --> 00:07:20,440
from what it was there before that

00:07:18,490 --> 00:07:22,420
suddenly it's all dynamic it's all true

00:07:20,440 --> 00:07:24,700
api's and the traditional methods don't

00:07:22,420 --> 00:07:26,470
work and suddenly you have some blind

00:07:24,700 --> 00:07:28,450
spots you can still do it at that level

00:07:26,470 --> 00:07:30,490
the switches because that didn't change

00:07:28,450 --> 00:07:33,370
you still need that but everything else

00:07:30,490 --> 00:07:35,170
was virtualized so what we end up with

00:07:33,370 --> 00:07:37,320
the landscape that changes that's

00:07:35,170 --> 00:07:39,550
suddenly everything it's connected but

00:07:37,320 --> 00:07:43,750
most important here in the middle we

00:07:39,550 --> 00:07:46,360
have a shared io fog that means even if

00:07:43,750 --> 00:07:48,400
you store a file it goes to a network to

00:07:46,360 --> 00:07:50,950
the file server or if you go to a

00:07:48,400 --> 00:07:54,910
network probably goes to multiple layers

00:07:50,950 --> 00:07:56,860
of devices before it hits the other

00:07:54,910 --> 00:07:59,740
machine so it's no longer one to one

00:07:56,860 --> 00:08:03,460
that you easily can follow but by

00:07:59,740 --> 00:08:07,510
looking at the switches and SNMP and so

00:08:03,460 --> 00:08:09,970
on so it got much more complex so that's

00:08:07,510 --> 00:08:13,630
a really big change that happened in the

00:08:09,970 --> 00:08:15,370
last couple of years but then we think

00:08:13,630 --> 00:08:17,530
we have seen it all they say okay now

00:08:15,370 --> 00:08:20,200
you can concentrate on managing what we

00:08:17,530 --> 00:08:22,660
have now that's the new reality with

00:08:20,200 --> 00:08:25,000
virtualized everything but in the DevOps

00:08:22,660 --> 00:08:28,060
weren't happy with that approach what

00:08:25,000 --> 00:08:30,940
they came in and says we need containers

00:08:28,060 --> 00:08:32,830
and then docker it's a very popular

00:08:30,940 --> 00:08:35,440
containers assist so they replaced

00:08:32,830 --> 00:08:38,640
applications as well so applications are

00:08:35,440 --> 00:08:42,820
now getting more and more deployed into

00:08:38,640 --> 00:08:45,940
Linux containers or doctor or rocket but

00:08:42,820 --> 00:08:48,010
what it is really is its application

00:08:45,940 --> 00:08:51,370
isolation suddenly they're really sealed

00:08:48,010 --> 00:08:53,920
off you cannot just get easily from the

00:08:51,370 --> 00:08:55,450
operating system from here operating

00:08:53,920 --> 00:08:56,860
system you can no longer go to the

00:08:55,450 --> 00:08:58,990
application it's impossible because

00:08:56,860 --> 00:09:03,040
that's part of the Linux container that

00:08:58,990 --> 00:09:06,190
it's really isolating the applications

00:09:03,040 --> 00:09:08,020
from from traditional monitoring so if

00:09:06,190 --> 00:09:10,050
you want to look at the process table if

00:09:08,020 --> 00:09:12,340
you want to look at all

00:09:10,050 --> 00:09:13,960
resources on the server for the

00:09:12,340 --> 00:09:15,880
applications running you don't see it

00:09:13,960 --> 00:09:17,740
anymore because the container now stays

00:09:15,880 --> 00:09:20,650
in the middle there so again that

00:09:17,740 --> 00:09:23,440
changed and of course since containers

00:09:20,650 --> 00:09:26,140
are now small applications there are one

00:09:23,440 --> 00:09:28,060
processor run something then suddenly

00:09:26,140 --> 00:09:30,400
your application that was before one big

00:09:28,060 --> 00:09:34,780
server it's like now five content a

00:09:30,400 --> 00:09:36,370
stink on 10 containers or UF tree or web

00:09:34,780 --> 00:09:38,260
servers in containers and your

00:09:36,370 --> 00:09:40,360
applications in other content so you can

00:09:38,260 --> 00:09:42,580
have all these combinations but it

00:09:40,360 --> 00:09:46,390
really makes that you can then really

00:09:42,580 --> 00:09:48,100
deploy applications rapidly and scale

00:09:46,390 --> 00:09:49,540
applications you say I need an

00:09:48,100 --> 00:09:51,370
additional web server because there's

00:09:49,540 --> 00:09:52,750
more and more load coming you just

00:09:51,370 --> 00:09:54,520
provision it and it shows up as a

00:09:52,750 --> 00:09:57,040
container it's one content and not an

00:09:54,520 --> 00:09:59,470
entire application so that really

00:09:57,040 --> 00:10:02,680
changed but the problem is that the

00:09:59,470 --> 00:10:05,020
visibility into the containers how to

00:10:02,680 --> 00:10:07,570
monetary containers you don't see it

00:10:05,020 --> 00:10:10,240
anymore it's all hidden from the

00:10:07,570 --> 00:10:12,190
operating systems again the checks that

00:10:10,240 --> 00:10:15,190
you doing on the operating systems don't

00:10:12,190 --> 00:10:16,839
longer apply to containers so in fact it

00:10:15,190 --> 00:10:19,770
or you are completely blind into the

00:10:16,839 --> 00:10:22,510
system if it's completely virtualized

00:10:19,770 --> 00:10:25,120
traditional monitoring with plugins

00:10:22,510 --> 00:10:30,610
doesn't work anymore so that it's a

00:10:25,120 --> 00:10:32,710
reality but the thing it's darker for

00:10:30,610 --> 00:10:34,870
example they are very concentrated on

00:10:32,710 --> 00:10:37,450
how to deploy a fast deploy our adoption

00:10:34,870 --> 00:10:39,550
nobody thinks about monitoring they

00:10:37,450 --> 00:10:42,250
don't even have a monitoring API docker

00:10:39,550 --> 00:10:43,780
has only a provisioning API that's

00:10:42,250 --> 00:10:45,700
nothing about monitoring how well the

00:10:43,780 --> 00:10:48,370
containers are doing and what resources

00:10:45,700 --> 00:10:50,080
are using nothing it just says they are

00:10:48,370 --> 00:10:51,640
deployed or not deployed and since how

00:10:50,080 --> 00:10:54,640
long that's what you get out of the

00:10:51,640 --> 00:10:57,160
docker host but nothing about monitoring

00:10:54,640 --> 00:10:59,050
if you want to know the process the

00:10:57,160 --> 00:11:01,870
memory and so on there's nothing that

00:10:59,050 --> 00:11:03,580
comes out of the darker so that makes it

00:11:01,870 --> 00:11:09,280
even more you're more blind in the whole

00:11:03,580 --> 00:11:10,750
system so and it really breaks down now

00:11:09,280 --> 00:11:13,620
and that's what I'm saying it's

00:11:10,750 --> 00:11:16,690
disruptive and you need new tools to

00:11:13,620 --> 00:11:19,980
manage the new reality about the

00:11:16,690 --> 00:11:22,810
actualization and of course in reality

00:11:19,980 --> 00:11:23,900
not everything is completely visualized

00:11:22,810 --> 00:11:26,870
and I will get

00:11:23,900 --> 00:11:28,760
but in a highly virtualized environment

00:11:26,870 --> 00:11:31,100
that you sort knew it looks more like

00:11:28,760 --> 00:11:33,820
that than what we had before with

00:11:31,100 --> 00:11:38,420
switches and routers and servers and

00:11:33,820 --> 00:11:40,070
applications and so on so just to

00:11:38,420 --> 00:11:44,000
summarize so what happened in the last

00:11:40,070 --> 00:11:45,680
five years mutual eyes everything that's

00:11:44,000 --> 00:11:47,720
a big theme right it started with

00:11:45,680 --> 00:11:51,320
compute followed by network and now

00:11:47,720 --> 00:11:53,660
bye-bye storage different the

00:11:51,320 --> 00:11:57,470
visualization stack started to appear so

00:11:53,660 --> 00:12:01,640
we have like VMware we have OpenStack we

00:11:57,470 --> 00:12:04,250
have Amazon and we have a kvm and she's

00:12:01,640 --> 00:12:06,590
down down here so that's the new thing

00:12:04,250 --> 00:12:08,930
for private and public cloud so it's a

00:12:06,590 --> 00:12:13,700
reality the stacks are there and they

00:12:08,930 --> 00:12:16,010
get heavenly used but the nice thing is

00:12:13,700 --> 00:12:18,290
every of these tags that have an API

00:12:16,010 --> 00:12:20,720
mostly they're our REST API señores of

00:12:18,290 --> 00:12:23,210
have rest api so or soap api stoom

00:12:20,720 --> 00:12:25,340
energy so to configure it to get

00:12:23,210 --> 00:12:30,290
information out which is for monitoring

00:12:25,340 --> 00:12:32,360
and so for the whole management I have

00:12:30,290 --> 00:12:35,540
an API so that's the fundamental change

00:12:32,360 --> 00:12:38,450
it's like now everything is an API every

00:12:35,540 --> 00:12:40,820
new application has an API and the rest

00:12:38,450 --> 00:12:43,780
api is a standard now rest api is really

00:12:40,820 --> 00:12:47,120
lightweight it's fast it works well

00:12:43,780 --> 00:12:49,220
Jason it's jason or xml but everybody

00:12:47,120 --> 00:12:51,980
almost everybody is using a chase on

00:12:49,220 --> 00:12:53,840
because it's easier so it's so easy to

00:12:51,980 --> 00:12:57,170
use that you're almost forgot that the

00:12:53,840 --> 00:13:00,170
soap or korba who remembers korba

00:12:57,170 --> 00:13:03,650
existed for doing the same thing at the

00:13:00,170 --> 00:13:05,570
proprietary api's they go away because

00:13:03,650 --> 00:13:07,820
they are complicated nobody understands

00:13:05,570 --> 00:13:10,790
your no open source tools and libraries

00:13:07,820 --> 00:13:13,130
to talk to this api's while for rest in

00:13:10,790 --> 00:13:14,660
every language programming language in

00:13:13,130 --> 00:13:17,090
scripting language you have a binding

00:13:14,660 --> 00:13:20,000
for rest api that you can really get

00:13:17,090 --> 00:13:26,030
against api so that's the new reality

00:13:20,000 --> 00:13:28,250
its API driven and its rest and then of

00:13:26,030 --> 00:13:31,370
course what you don't have thick clients

00:13:28,250 --> 00:13:33,680
it's as well as thing of the past now

00:13:31,370 --> 00:13:35,510
it's everything in a browser obviously

00:13:33,680 --> 00:13:37,910
you have tablet of laptop seeing of

00:13:35,510 --> 00:13:41,240
desktops and your phones

00:13:37,910 --> 00:13:42,830
so having a browser-based you I it's

00:13:41,240 --> 00:13:45,920
almost mandatory if you want to have

00:13:42,830 --> 00:13:48,470
adoption so thick clients are gone as

00:13:45,920 --> 00:13:49,880
well everything it's JavaScript because

00:13:48,470 --> 00:13:51,440
all the tools we are seeing and all the

00:13:49,880 --> 00:13:54,560
presentations we have seen here so far

00:13:51,440 --> 00:13:56,630
it's all about JavaScript you eyes there

00:13:54,560 --> 00:13:59,300
is no longer the clients and all this

00:13:56,630 --> 00:14:01,910
server side rendering and so on it's all

00:13:59,300 --> 00:14:05,570
in the browser so again that chief to

00:14:01,910 --> 00:14:10,420
this valley away from from what what

00:14:05,570 --> 00:14:14,390
happened a couple of years ago to now so

00:14:10,420 --> 00:14:17,540
what's the lesson of that it's all the

00:14:14,390 --> 00:14:18,920
JavaScript rest and chase on if you talk

00:14:17,540 --> 00:14:20,590
that then you can talk to all this

00:14:18,920 --> 00:14:27,170
system and get this information and

00:14:20,590 --> 00:14:28,940
again you can see how you can start

00:14:27,170 --> 00:14:30,980
again monitoring the systems because you

00:14:28,940 --> 00:14:32,840
can talk to this system so that's the

00:14:30,980 --> 00:14:36,170
tool set has to be adapted to have

00:14:32,840 --> 00:14:38,060
something to talk rest and bring this

00:14:36,170 --> 00:14:39,890
information back that you can then again

00:14:38,060 --> 00:14:44,000
look into your system what happens for

00:14:39,890 --> 00:14:46,400
monitoring so that's the general trend

00:14:44,000 --> 00:14:50,300
so the next thing it's like so how does

00:14:46,400 --> 00:14:53,150
OpenStack fitting so OpenStack project

00:14:50,300 --> 00:14:55,850
started like nine years ago it was about

00:14:53,150 --> 00:14:57,920
virtualization and answer it such as an

00:14:55,850 --> 00:14:59,840
answer to vm there because became too

00:14:57,920 --> 00:15:02,660
commercial for some of the people for

00:14:59,840 --> 00:15:03,980
some of the purists and they came up

00:15:02,660 --> 00:15:06,350
with a new architecture how to do

00:15:03,980 --> 00:15:08,300
virtualization it's open it's a

00:15:06,350 --> 00:15:11,690
service-oriented architecture so they

00:15:08,300 --> 00:15:14,530
really split compute Network and storage

00:15:11,690 --> 00:15:18,260
and authentication and visualization in

00:15:14,530 --> 00:15:20,810
services everything it's pluggable so

00:15:18,260 --> 00:15:23,480
you hypervisors or network adapter or

00:15:20,810 --> 00:15:26,720
storage adapter it's pluggable so in

00:15:23,480 --> 00:15:29,390
OpenStack Yukon can run kvm which is a

00:15:26,720 --> 00:15:32,780
default but you can run as well vmware

00:15:29,390 --> 00:15:35,210
ESX or you can hyper v and so on so

00:15:32,780 --> 00:15:39,050
there they want to be open and not be by

00:15:35,210 --> 00:15:41,240
locking for any vendors so it supports a

00:15:39,050 --> 00:15:43,400
wide range of technologies and it's

00:15:41,240 --> 00:15:45,830
especially important for a network

00:15:43,400 --> 00:15:51,200
because there are a lot of controllers

00:15:45,830 --> 00:15:53,510
network controllers sdn network controls

00:15:51,200 --> 00:15:56,770
the work well in OpenStack so that's a

00:15:53,510 --> 00:16:01,160
big market in OpenStack to have a

00:15:56,770 --> 00:16:05,360
network devices and the other thing it's

00:16:01,160 --> 00:16:08,270
about elastic compute units so in vmware

00:16:05,360 --> 00:16:11,630
you could define your image your size

00:16:08,270 --> 00:16:14,450
and you just created it and it didn't

00:16:11,630 --> 00:16:15,890
have to fit into a memory range or a

00:16:14,450 --> 00:16:17,870
disk range you could create whatever you

00:16:15,890 --> 00:16:20,570
want and the alignment wasn't done by

00:16:17,870 --> 00:16:22,910
vmware mile elastic compute it's a

00:16:20,570 --> 00:16:25,490
multiplier of a small image so you have

00:16:22,910 --> 00:16:28,100
small midsize large images because it

00:16:25,490 --> 00:16:29,840
fits into how it gets computed and

00:16:28,100 --> 00:16:32,900
optimized so it's really for

00:16:29,840 --> 00:16:35,120
optimization of compute resources that's

00:16:32,900 --> 00:16:38,600
then what the means elastic compute

00:16:35,120 --> 00:16:39,980
units and that's really important as

00:16:38,600 --> 00:16:41,420
well if you have content of deployments

00:16:39,980 --> 00:16:43,580
because you have a lot of small things

00:16:41,420 --> 00:16:46,460
that you can really well align your

00:16:43,580 --> 00:16:51,320
memory usage and storage use it usage

00:16:46,460 --> 00:16:55,550
across the whole system and this started

00:16:51,320 --> 00:16:58,970
early to have AP is for all services so

00:16:55,550 --> 00:17:01,280
this is open sec the project the mission

00:16:58,970 --> 00:17:03,050
and everything sounds really good

00:17:01,280 --> 00:17:04,820
because that's what everybody asks for

00:17:03,050 --> 00:17:07,550
it's like we need an open system that's

00:17:04,820 --> 00:17:09,320
pluggable that has api's it's easy to

00:17:07,550 --> 00:17:12,829
manage you can do whatever you need it's

00:17:09,320 --> 00:17:16,490
a competitor to vmware it's cheap it's a

00:17:12,829 --> 00:17:19,820
great system but what's the reality

00:17:16,490 --> 00:17:21,829
right so why is the open circuit ruling

00:17:19,820 --> 00:17:23,750
the world today maybe in a couple of

00:17:21,829 --> 00:17:26,449
years but not today there are some

00:17:23,750 --> 00:17:30,110
issues we've opened second general let's

00:17:26,449 --> 00:17:32,720
talk about that that's OpenStack

00:17:30,110 --> 00:17:35,630
architecture so it's people say it has

00:17:32,720 --> 00:17:37,340
been simplified you can argue if it's

00:17:35,630 --> 00:17:41,570
simpler than before but these are all

00:17:37,340 --> 00:17:44,180
the services so compute services has

00:17:41,570 --> 00:17:45,590
always a multiple component so the

00:17:44,180 --> 00:17:48,760
service-oriented architecture you see

00:17:45,590 --> 00:17:50,840
here for storage for compute and

00:17:48,760 --> 00:17:53,720
authentication and dashboard so it's a

00:17:50,840 --> 00:17:56,990
whole assembly of services which are

00:17:53,720 --> 00:18:00,260
really complex and it's a lot going on

00:17:56,990 --> 00:18:02,150
there so here of course this box it's

00:18:00,260 --> 00:18:03,650
one service but you have a lot of micro

00:18:02,150 --> 00:18:04,740
services in there that you have to make

00:18:03,650 --> 00:18:06,540
sure they run

00:18:04,740 --> 00:18:08,040
that this whole box runs so the

00:18:06,540 --> 00:18:09,809
complexity of the system didn't get

00:18:08,040 --> 00:18:12,210
simpler even the mission was like to

00:18:09,809 --> 00:18:13,980
make it simpler they wanted to abstract

00:18:12,210 --> 00:18:16,110
it to the user when they install

00:18:13,980 --> 00:18:18,300
OpenStack it's all simple and lead runs

00:18:16,110 --> 00:18:20,190
easily and you don't have any problems

00:18:18,300 --> 00:18:22,559
but that you can see with this

00:18:20,190 --> 00:18:26,220
complexity it's not easy to maintain a

00:18:22,559 --> 00:18:28,110
manager system of that but as I

00:18:26,220 --> 00:18:31,140
mentioned before every component as an

00:18:28,110 --> 00:18:33,330
API it's great but instead of having one

00:18:31,140 --> 00:18:35,850
API for OpenStack we end up with seven

00:18:33,330 --> 00:18:38,520
api's for OpenStack so we didn't really

00:18:35,850 --> 00:18:40,980
win at that point so what's really

00:18:38,520 --> 00:18:43,920
necessary and that's my company are

00:18:40,980 --> 00:18:45,840
involved to create a unified API for

00:18:43,920 --> 00:18:47,309
OpenStack and give you back to the open

00:18:45,840 --> 00:18:50,490
source community have it in there

00:18:47,309 --> 00:18:53,010
because each of these api have some

00:18:50,490 --> 00:18:55,650
metric counters about each of this

00:18:53,010 --> 00:18:57,300
system but the majority of the api's it

00:18:55,650 --> 00:18:59,610
it's about provisioning it's about

00:18:57,300 --> 00:19:02,550
setting up it's about configuring users

00:18:59,610 --> 00:19:05,130
and and so on and the small small

00:19:02,550 --> 00:19:06,690
fraction is about monitoring again when

00:19:05,130 --> 00:19:08,880
you talk to people in opens like to say

00:19:06,690 --> 00:19:11,040
we have to address first a big problem

00:19:08,880 --> 00:19:13,980
about configuring and managing the whole

00:19:11,040 --> 00:19:15,840
stack and then we do monitoring that

00:19:13,980 --> 00:19:18,330
said that three years ago to set the two

00:19:15,840 --> 00:19:20,190
years ago decided this year it hasn't

00:19:18,330 --> 00:19:22,980
really changed so the thing it's the

00:19:20,190 --> 00:19:25,710
need to having a unified monitoring an

00:19:22,980 --> 00:19:28,890
API just for monitoring it's necessary

00:19:25,710 --> 00:19:30,300
for these admins and DevOps because you

00:19:28,890 --> 00:19:33,870
need to monitoring a system like that

00:19:30,300 --> 00:19:36,900
there's no question about that so we

00:19:33,870 --> 00:19:41,190
started to create this data API and put

00:19:36,900 --> 00:19:43,230
it on github to do have a start in the

00:19:41,190 --> 00:19:45,090
in the whole community process open sec

00:19:43,230 --> 00:19:48,360
it's a community driven process you have

00:19:45,090 --> 00:19:50,220
to propose what you have you have to go

00:19:48,360 --> 00:19:52,890
in front of a committee presented and

00:19:50,220 --> 00:19:54,630
then it gets in an incubator and then it

00:19:52,890 --> 00:19:56,640
gets all the way up until it gets and

00:19:54,630 --> 00:19:59,700
delivered as the final product so we are

00:19:56,640 --> 00:20:01,800
still in the free incubator thing

00:19:59,700 --> 00:20:04,380
because we try to get a lot of the

00:20:01,800 --> 00:20:06,420
project owners to help us for the

00:20:04,380 --> 00:20:08,309
monitoring as well but of course they

00:20:06,420 --> 00:20:10,559
are preoccupied with other things it's

00:20:08,309 --> 00:20:12,840
really hard to get traction but we're

00:20:10,559 --> 00:20:15,500
working on that but that's the

00:20:12,840 --> 00:20:17,700
open-source way as well to get an API in

00:20:15,500 --> 00:20:20,340
into the product

00:20:17,700 --> 00:20:21,750
and what you get like counters you see

00:20:20,340 --> 00:20:26,010
here for the hypervisor you get a few

00:20:21,750 --> 00:20:29,850
counters about how much disk its use how

00:20:26,010 --> 00:20:32,580
much memory and how many VMS are running

00:20:29,850 --> 00:20:35,250
so it's really minimal and the same

00:20:32,580 --> 00:20:37,710
thing on another service cecilio meter

00:20:35,250 --> 00:20:39,179
which is a metering service but it has

00:20:37,710 --> 00:20:41,940
the monitoring information in there as

00:20:39,179 --> 00:20:43,710
well so there's only a few information

00:20:41,940 --> 00:20:45,809
there but if you go for the virtual

00:20:43,710 --> 00:20:47,789
machine that's a lot of information

00:20:45,809 --> 00:20:50,309
already in there so that's that's a good

00:20:47,789 --> 00:20:52,860
thing so the team that work on the VMS

00:20:50,309 --> 00:20:54,779
the really paid attention to the

00:20:52,860 --> 00:20:57,539
monitoring because what you can see us

00:20:54,779 --> 00:20:59,820
all they have regex expression to define

00:20:57,539 --> 00:21:02,760
about network monitoring this monitoring

00:20:59,820 --> 00:21:05,120
CPU and memory and so on of the VMS

00:21:02,760 --> 00:21:08,090
which is really important to have still

00:21:05,120 --> 00:21:10,620
improvements necessary here but at least

00:21:08,090 --> 00:21:14,100
they understand what's necessary what

00:21:10,620 --> 00:21:16,500
you are necessary for a sysadmin what's

00:21:14,100 --> 00:21:20,580
necessary to really manage virtual

00:21:16,500 --> 00:21:23,029
resources on top of your system well now

00:21:20,580 --> 00:21:27,899
I step back again so okay we have this

00:21:23,029 --> 00:21:29,850
even if you achieve the perfect API for

00:21:27,899 --> 00:21:31,500
the open sec we get all information out

00:21:29,850 --> 00:21:35,669
of OpenStack we get it out of the

00:21:31,500 --> 00:21:38,370
hypervisor to storage the network how

00:21:35,669 --> 00:21:40,019
they are aligned and everything it's not

00:21:38,370 --> 00:21:42,440
the whole picture right because in

00:21:40,019 --> 00:21:44,549
reality you still have a legacy network

00:21:42,440 --> 00:21:45,899
you haven't have to have a network

00:21:44,549 --> 00:21:47,789
there's no question that you have a

00:21:45,899 --> 00:21:49,980
router somewhere here you have an ISP

00:21:47,789 --> 00:21:52,200
you have some connections you have

00:21:49,980 --> 00:21:53,760
servers out there you have file servers

00:21:52,200 --> 00:21:56,429
that sit somewhere on your system that

00:21:53,760 --> 00:21:59,519
you use for legacy applications nobody

00:21:56,429 --> 00:22:01,409
just runs OpenStack or maybe a few

00:21:59,519 --> 00:22:04,049
companies just run OpenStack but the

00:22:01,409 --> 00:22:06,179
maturity they have something like that

00:22:04,049 --> 00:22:08,039
and much more and open circuits Morris I

00:22:06,179 --> 00:22:11,639
project that just want to prove that it

00:22:08,039 --> 00:22:15,330
works but they have the whole legacy so

00:22:11,639 --> 00:22:17,250
maybe these grey boxes they are much

00:22:15,330 --> 00:22:19,620
more in reality so you still need the

00:22:17,250 --> 00:22:21,620
monitoring tool for that you still need

00:22:19,620 --> 00:22:24,059
an application and infrastructure

00:22:21,620 --> 00:22:26,220
monitoring for the servers and storage

00:22:24,059 --> 00:22:29,399
and network that you have with the

00:22:26,220 --> 00:22:31,630
traditional plugins SNMP and so on but

00:22:29,399 --> 00:22:34,690
what's more important even

00:22:31,630 --> 00:22:36,670
openstack all the services here you want

00:22:34,690 --> 00:22:38,680
a monitoring on the hypervisors for

00:22:36,670 --> 00:22:41,680
example is to my sequel server running

00:22:38,680 --> 00:22:44,950
for the identity manager is that all the

00:22:41,680 --> 00:22:47,380
processes running for the hypervisor

00:22:44,950 --> 00:22:50,530
management so you still need some inside

00:22:47,380 --> 00:22:55,510
information of a system to really make

00:22:50,530 --> 00:22:58,420
sure that the low level infrastructure

00:22:55,510 --> 00:23:00,430
is running which are these jacks and

00:22:58,420 --> 00:23:03,670
then you have the API to see if the

00:23:00,430 --> 00:23:05,650
management functionality and the

00:23:03,670 --> 00:23:08,560
provisioning if that's working so you

00:23:05,650 --> 00:23:10,390
need both so just having an API it's not

00:23:08,560 --> 00:23:12,420
all what you need you need the

00:23:10,390 --> 00:23:15,400
traditional plug in monitoring as well

00:23:12,420 --> 00:23:17,980
but of course in reality what we said

00:23:15,400 --> 00:23:21,780
with fast deployments new resources and

00:23:17,980 --> 00:23:23,830
so on you need the whole provisioning

00:23:21,780 --> 00:23:26,350
infrastructure which runs on a separate

00:23:23,830 --> 00:23:29,530
servers or on separate multiple servers

00:23:26,350 --> 00:23:32,050
to create the provisioning creating the

00:23:29,530 --> 00:23:33,490
virtual machines and all that you need

00:23:32,050 --> 00:23:36,160
that infrastructure as well and of

00:23:33,490 --> 00:23:38,230
course you need to monitor again outside

00:23:36,160 --> 00:23:42,610
of OpenStack this whole provisioning

00:23:38,230 --> 00:23:44,410
stack and to have a complete coverage

00:23:42,610 --> 00:23:46,960
about only touring and management of

00:23:44,410 --> 00:23:49,000
your thing you need of course you have

00:23:46,960 --> 00:23:51,070
containers because now everybody tries

00:23:49,000 --> 00:23:52,780
darker and Linux containers or you have

00:23:51,070 --> 00:23:54,430
to monitor that as well which would be

00:23:52,780 --> 00:23:56,890
another tool which is a part of

00:23:54,430 --> 00:23:59,670
OpenStack and of course for everything

00:23:56,890 --> 00:24:02,140
you want to have performance data so

00:23:59,670 --> 00:24:06,190
even individualized world you end up

00:24:02,140 --> 00:24:08,740
with five different tools so we didn't

00:24:06,190 --> 00:24:11,290
win much over the last ten years because

00:24:08,740 --> 00:24:12,850
it's it just got more complicated it's

00:24:11,290 --> 00:24:15,910
still the old story but it got more

00:24:12,850 --> 00:24:17,980
complicated so what they're really what

00:24:15,910 --> 00:24:20,260
we need it's a unified view right we

00:24:17,980 --> 00:24:23,350
need to combine all the data from all

00:24:20,260 --> 00:24:25,840
the systems to show them in one UI

00:24:23,350 --> 00:24:28,690
that's really the goal but we should

00:24:25,840 --> 00:24:30,100
work to but to get a unified view with

00:24:28,690 --> 00:24:32,770
all the data we need the standardized

00:24:30,100 --> 00:24:35,260
data collection we need to get all the

00:24:32,770 --> 00:24:36,910
data from the different tools not just

00:24:35,260 --> 00:24:39,000
from one tool not just from OpenStack

00:24:36,910 --> 00:24:41,470
not just from the application

00:24:39,000 --> 00:24:44,200
infrastructure monitoring tool not just

00:24:41,470 --> 00:24:45,400
from this side we need all the data then

00:24:44,200 --> 00:24:48,130
we can get

00:24:45,400 --> 00:24:51,990
and standardize it and then we can

00:24:48,130 --> 00:24:55,630
create the dashboards that we need to do

00:24:51,990 --> 00:24:57,580
again so what's the unified view if you

00:24:55,630 --> 00:25:00,910
have silo tools it's really hard to

00:24:57,580 --> 00:25:02,590
correlate three hard to figuring out is

00:25:00,910 --> 00:25:04,090
it a network problem or a storage

00:25:02,590 --> 00:25:06,910
problem will compute problem on a

00:25:04,090 --> 00:25:09,430
configuration problem because says it

00:25:06,910 --> 00:25:12,280
doesn't line up right every tool tells

00:25:09,430 --> 00:25:13,510
you it's perfect so that's the third one

00:25:12,280 --> 00:25:15,400
it's it's not my problem it's your

00:25:13,510 --> 00:25:16,870
problem right how many times have you

00:25:15,400 --> 00:25:18,940
heard it's a network problem that's

00:25:16,870 --> 00:25:20,860
nothing to do with the compute how many

00:25:18,940 --> 00:25:23,560
times you know the storage it's fine it

00:25:20,860 --> 00:25:25,330
must be something else so if you have

00:25:23,560 --> 00:25:27,340
multiple tools and they are not unified

00:25:25,330 --> 00:25:29,140
it's really hard to find the root cause

00:25:27,340 --> 00:25:30,970
especially now we have these multiple

00:25:29,140 --> 00:25:33,940
layers we have network and storage and

00:25:30,970 --> 00:25:35,880
and virtualization and API it's like

00:25:33,940 --> 00:25:39,670
where's the problem because it's really

00:25:35,880 --> 00:25:42,220
it's aligned and then you tend to have

00:25:39,670 --> 00:25:43,690
over monitoring because you say we

00:25:42,220 --> 00:25:46,450
really have to cover everything you

00:25:43,690 --> 00:25:48,130
provision more checks but you don't

00:25:46,450 --> 00:25:50,050
really monitor your monitor around a

00:25:48,130 --> 00:25:53,230
real problem because you cannot get to

00:25:50,050 --> 00:25:54,850
the virtualized router you try to

00:25:53,230 --> 00:25:56,980
monitor everything around it but you

00:25:54,850 --> 00:25:59,200
don't really pinpoint the problem that

00:25:56,980 --> 00:26:03,720
you have in the middle that you need to

00:25:59,200 --> 00:26:06,040
do with an API monitoring so what it is

00:26:03,720 --> 00:26:08,860
what I call what we call the stack

00:26:06,040 --> 00:26:11,470
monitoring what it means to you get all

00:26:08,860 --> 00:26:13,210
the counters in all the metrics in you

00:26:11,470 --> 00:26:16,960
put it together and you show it under

00:26:13,210 --> 00:26:18,790
one device everything that's involved if

00:26:16,960 --> 00:26:21,040
it's a network the storage to compute

00:26:18,790 --> 00:26:22,930
the container the application that you

00:26:21,040 --> 00:26:25,570
see it in one and if you have all

00:26:22,930 --> 00:26:27,130
bundled together then you can decide

00:26:25,570 --> 00:26:29,620
where is the problem because you see the

00:26:27,130 --> 00:26:32,500
mismatch in the checks if the vm says

00:26:29,620 --> 00:26:35,650
you shouldn't I have four gigs of memory

00:26:32,500 --> 00:26:37,780
provisioned but an operating system says

00:26:35,650 --> 00:26:39,010
I have eight gigs of memory provision

00:26:37,780 --> 00:26:41,320
then you know there's a mismatch there

00:26:39,010 --> 00:26:42,970
but if you have two separate tools you

00:26:41,320 --> 00:26:45,340
will never find that because every

00:26:42,970 --> 00:26:47,290
operating system says it's fine right

00:26:45,340 --> 00:26:49,570
but they don't say but the interaction

00:26:47,290 --> 00:26:51,670
doesn't work and you can work well if

00:26:49,570 --> 00:26:53,380
the hypervisor over provision but as

00:26:51,670 --> 00:26:55,870
soon as you have more and more resources

00:26:53,380 --> 00:26:58,000
the hypervisor gets busy start swapping

00:26:55,870 --> 00:26:59,260
and says I cannot provide you all the

00:26:58,000 --> 00:27:01,300
memory that you asked

00:26:59,260 --> 00:27:03,370
for and then you get a mismatch and then

00:27:01,300 --> 00:27:07,300
you get some alarms on some of the

00:27:03,370 --> 00:27:09,240
checks but then you see it in a in a

00:27:07,300 --> 00:27:12,670
group then you see where the problem is

00:27:09,240 --> 00:27:14,380
so that's it's a really important thing

00:27:12,670 --> 00:27:17,650
and the second important thing it's

00:27:14,380 --> 00:27:21,240
aliasing of names because as you can see

00:27:17,650 --> 00:27:23,710
for each tool has their own naming and

00:27:21,240 --> 00:27:25,630
its first of the tool how your name is

00:27:23,710 --> 00:27:27,370
in the operating system of the dns name

00:27:25,630 --> 00:27:29,740
which is our lower case and has no

00:27:27,370 --> 00:27:34,150
special characters you go in a container

00:27:29,740 --> 00:27:35,860
which is just a long hex number so how

00:27:34,150 --> 00:27:37,900
do you l is do you have to a less

00:27:35,860 --> 00:27:39,220
together says this continent is vm it's

00:27:37,900 --> 00:27:41,560
the same saying because they're running

00:27:39,220 --> 00:27:44,350
together so you have to do that the

00:27:41,560 --> 00:27:47,590
checks and line up and the same it's for

00:27:44,350 --> 00:27:49,690
storage if you have a like a filer that

00:27:47,590 --> 00:27:51,790
has a volume somewhere you name it a and

00:27:49,690 --> 00:27:53,470
then in your virtualization environment

00:27:51,790 --> 00:27:55,570
you create a storage device and you can

00:27:53,470 --> 00:27:57,370
name it be you would never know that

00:27:55,570 --> 00:28:00,520
they are the same devices so you have to

00:27:57,370 --> 00:28:03,070
a list together sizes the storage device

00:28:00,520 --> 00:28:04,660
and the file ID volume are the same and

00:28:03,070 --> 00:28:07,390
then you will you get the values

00:28:04,660 --> 00:28:09,100
together so that's really important that

00:28:07,390 --> 00:28:12,010
the aliasing that you can alias it

00:28:09,100 --> 00:28:13,600
because even people can never agree on

00:28:12,010 --> 00:28:15,910
names that's the other thing how you

00:28:13,600 --> 00:28:18,580
name devices have you named services and

00:28:15,910 --> 00:28:20,530
how you name if you use the IP address

00:28:18,580 --> 00:28:22,360
or the name the fully qualified name or

00:28:20,530 --> 00:28:26,470
the short name everybody is different

00:28:22,360 --> 00:28:29,560
and then containers they don't even use

00:28:26,470 --> 00:28:31,260
any of that and controllers and routers

00:28:29,560 --> 00:28:34,180
that we differently the software-defined

00:28:31,260 --> 00:28:37,360
Network they use another scheme for

00:28:34,180 --> 00:28:40,540
names so it's really hard automatically

00:28:37,360 --> 00:28:42,850
discovery and alignment of names doesn't

00:28:40,540 --> 00:28:45,490
exist what you have to do it you need an

00:28:42,850 --> 00:28:47,710
a lacing tool or a way to alias names

00:28:45,490 --> 00:28:51,010
together when you know they are alike

00:28:47,710 --> 00:28:53,980
and again you need the information from

00:28:51,010 --> 00:28:55,300
all the tools so you need collect the

00:28:53,980 --> 00:29:00,880
information from whatever it's available

00:28:55,300 --> 00:29:02,770
which is the best tool for the job so

00:29:00,880 --> 00:29:04,300
that's really important because i

00:29:02,770 --> 00:29:05,950
thought one tool that can do everything

00:29:04,300 --> 00:29:08,350
it's like you really select a tool

00:29:05,950 --> 00:29:11,410
that's best for it and then bring the

00:29:08,350 --> 00:29:12,490
information into a master system and

00:29:11,410 --> 00:29:19,059
from there you

00:29:12,490 --> 00:29:21,790
can use it for troubleshooting so here's

00:29:19,059 --> 00:29:24,550
just an example how in reality that

00:29:21,790 --> 00:29:26,590
works so the hypervisor here of course

00:29:24,550 --> 00:29:28,330
it sits on the network and storage it

00:29:26,590 --> 00:29:31,059
has the hardware identity server

00:29:28,330 --> 00:29:32,830
operating system and then the OpenStack

00:29:31,059 --> 00:29:36,130
API for managing that's the whole

00:29:32,830 --> 00:29:38,559
hypervisor stack what i have here with

00:29:36,130 --> 00:29:40,300
the host name of course you have ipmi

00:29:38,559 --> 00:29:42,600
you have a different IP address with a

00:29:40,300 --> 00:29:45,730
different name than the actual server

00:29:42,600 --> 00:29:47,620
which I have here right a server one but

00:29:45,730 --> 00:29:49,540
here you named it drags a robe on

00:29:47,620 --> 00:29:51,790
because it's a different IP address it

00:29:49,540 --> 00:29:54,160
has a different name but of course you

00:29:51,790 --> 00:29:56,050
do the the monitoring it's the same

00:29:54,160 --> 00:29:58,450
hypervisor right you do hardware

00:29:56,050 --> 00:29:59,980
monitoring and you do the operating

00:29:58,450 --> 00:30:02,650
system monitoring it's the same device

00:29:59,980 --> 00:30:03,940
and of course the open sec identity

00:30:02,650 --> 00:30:06,130
server it's in my sequel database

00:30:03,940 --> 00:30:07,870
running there and then you have the

00:30:06,130 --> 00:30:09,910
server name and port that comes back so

00:30:07,870 --> 00:30:12,970
it's not that obvious that this all

00:30:09,910 --> 00:30:15,190
together should be one server as I have

00:30:12,970 --> 00:30:17,650
here that you have the hypervisor so you

00:30:15,190 --> 00:30:19,240
a listen together to one name so what

00:30:17,650 --> 00:30:20,860
you want to have it's a whole list that

00:30:19,240 --> 00:30:22,660
shows you the whole stack what I have

00:30:20,860 --> 00:30:24,700
here ipmi checks and then he arrived

00:30:22,660 --> 00:30:27,550
from the virtual environment that checks

00:30:24,700 --> 00:30:30,880
the Joe agent in here I co the power

00:30:27,550 --> 00:30:33,790
supply it's failing so of course at that

00:30:30,880 --> 00:30:35,559
level you never you don't get an alarm

00:30:33,790 --> 00:30:38,080
at that point because this is failing

00:30:35,559 --> 00:30:40,150
but you know that that can cause a

00:30:38,080 --> 00:30:42,040
problem in the future and in the future

00:30:40,150 --> 00:30:44,290
if that happens if the ipmi then gives

00:30:42,040 --> 00:30:45,910
you a check a failure and then your

00:30:44,290 --> 00:30:48,340
hypervisor goes down because the whole

00:30:45,910 --> 00:30:50,520
power goes down it takes you a while

00:30:48,340 --> 00:30:52,809
until you find that but as soon as you

00:30:50,520 --> 00:30:54,730
start building the whole stack and have

00:30:52,809 --> 00:30:57,340
all the checks in you can then as well

00:30:54,730 --> 00:31:01,330
predict failures or see your mismatches

00:30:57,340 --> 00:31:03,070
or even order a Miss configuration you

00:31:01,330 --> 00:31:05,740
find it there and you can address it

00:31:03,070 --> 00:31:06,910
before it's too late so it's as well you

00:31:05,740 --> 00:31:09,040
don't want to get called in the middle

00:31:06,910 --> 00:31:12,070
of the night of something that you could

00:31:09,040 --> 00:31:14,800
have seen before because it's coming

00:31:12,070 --> 00:31:17,620
same thing goes on the vm of course you

00:31:14,800 --> 00:31:20,320
have the operating system here i have a

00:31:17,620 --> 00:31:23,020
darker host and then have a content on

00:31:20,320 --> 00:31:24,970
top of it so you see again the names are

00:31:23,020 --> 00:31:26,410
all different but of course you want to

00:31:24,970 --> 00:31:28,360
combine it together and have

00:31:26,410 --> 00:31:30,700
view that shows your doctor checks and

00:31:28,360 --> 00:31:33,100
for the virtualization checks to see

00:31:30,700 --> 00:31:34,810
especially you want to see the docker

00:31:33,100 --> 00:31:36,280
container memory and process

00:31:34,810 --> 00:31:38,140
configuration does it matter if what I

00:31:36,280 --> 00:31:39,520
have for me in there it's really

00:31:38,140 --> 00:31:43,930
important because if there's a mismatch

00:31:39,520 --> 00:31:45,580
there it might run well now but then

00:31:43,930 --> 00:31:48,370
suddenly the machine gets really busy

00:31:45,580 --> 00:31:50,980
and the balloon memory and everything

00:31:48,370 --> 00:31:53,110
doesn't align that dwell anymore and it

00:31:50,980 --> 00:31:55,060
starts failing it's because of a

00:31:53,110 --> 00:31:57,700
configuration mismatch and again if you

00:31:55,060 --> 00:32:01,960
don't have it aligned and seeding one

00:31:57,700 --> 00:32:06,450
view it's it's almost impossible to reap

00:32:01,960 --> 00:32:06,450
robably able to troubleshoot the issue

00:32:07,170 --> 00:32:11,590
so that's the one thing that's why you

00:32:09,160 --> 00:32:13,300
want to have a collecting data a leasing

00:32:11,590 --> 00:32:15,460
data this is the case why you need a

00:32:13,300 --> 00:32:17,680
leasing data that you have one name that

00:32:15,460 --> 00:32:21,670
you see everything under the one

00:32:17,680 --> 00:32:24,100
structure the next thing it's we have

00:32:21,670 --> 00:32:27,670
that hurts before in the talk automation

00:32:24,100 --> 00:32:30,010
it's really really important you can no

00:32:27,670 --> 00:32:31,450
longer do it by hand manual

00:32:30,010 --> 00:32:34,630
configuration of monitoring it's

00:32:31,450 --> 00:32:36,880
impossible especially with the

00:32:34,630 --> 00:32:39,550
virtualization with containers they get

00:32:36,880 --> 00:32:41,620
started stopped started stopped you have

00:32:39,550 --> 00:32:44,290
no time to configuring anything by hand

00:32:41,620 --> 00:32:47,800
it has to be automated has me an

00:32:44,290 --> 00:32:51,010
automation API so since it's all

00:32:47,800 --> 00:32:53,020
automated and changes all the time the

00:32:51,010 --> 00:32:54,610
monitoring has to be the same way what's

00:32:53,020 --> 00:32:56,620
really necessary it's at the monitoring

00:32:54,610 --> 00:32:58,930
system where you collect the

00:32:56,620 --> 00:33:01,260
configuration where you have plugins

00:32:58,930 --> 00:33:04,150
that do checks and then you collect data

00:33:01,260 --> 00:33:07,830
that gets reconfigured automatically

00:33:04,150 --> 00:33:10,510
dynamically it's like a flight recorder

00:33:07,830 --> 00:33:12,690
when the container starts when a vm

00:33:10,510 --> 00:33:16,390
starts you want to start collecting

00:33:12,690 --> 00:33:18,400
graphs metrics all the data that you can

00:33:16,390 --> 00:33:20,110
in your dashboard to show up

00:33:18,400 --> 00:33:22,990
automatically a dashboard without doing

00:33:20,110 --> 00:33:26,350
anything that's your goal and the way or

00:33:22,990 --> 00:33:27,880
you can do that it's like you

00:33:26,350 --> 00:33:29,380
synchronize the configuration you talk

00:33:27,880 --> 00:33:31,930
to the API of your virtualization

00:33:29,380 --> 00:33:34,810
manager that's what it is here and he

00:33:31,930 --> 00:33:37,560
says haters in you vm you go in and

00:33:34,810 --> 00:33:37,560
configure the plug-in

00:33:38,750 --> 00:33:43,350
you configure the plug-in that does a

00:33:41,010 --> 00:33:45,179
check for this new VM you say I want to

00:33:43,350 --> 00:33:47,970
have a check a hardware check for this

00:33:45,179 --> 00:33:49,710
new plug-in and then it starts

00:33:47,970 --> 00:33:52,500
configuring automatically and starts

00:33:49,710 --> 00:33:54,809
collecting data and then of course since

00:33:52,500 --> 00:33:56,159
you have to connect we asked API as

00:33:54,809 --> 00:33:58,770
valances give me all the information

00:33:56,159 --> 00:34:00,480
about this new VM give me all the

00:33:58,770 --> 00:34:03,059
details what you have for this new vm i

00:34:00,480 --> 00:34:04,950
collect it i integrate it and it shows

00:34:03,059 --> 00:34:06,960
up in the dashboard says here's a new vm

00:34:04,950 --> 00:34:10,139
here you have the performance data and

00:34:06,960 --> 00:34:12,869
you are happy then you see it's there so

00:34:10,139 --> 00:34:15,750
it's really important that you that it's

00:34:12,869 --> 00:34:17,429
all automated because there's no way

00:34:15,750 --> 00:34:20,460
that you can do it manually because you

00:34:17,429 --> 00:34:22,290
would not see it and as well then if it

00:34:20,460 --> 00:34:23,820
gets on provisioned it goes away you

00:34:22,290 --> 00:34:27,000
remove it from your dashboard it's all

00:34:23,820 --> 00:34:29,280
gone you don't care because it will not

00:34:27,000 --> 00:34:31,560
cause any problems but as soon as you

00:34:29,280 --> 00:34:33,840
add more and more resources and you see

00:34:31,560 --> 00:34:37,109
that in your dashboard gets more and

00:34:33,840 --> 00:34:40,379
more data in then you see hey I overload

00:34:37,109 --> 00:34:42,240
my my my hypervisor or my storage is

00:34:40,379 --> 00:34:45,359
misconfigured and then you can go in and

00:34:42,240 --> 00:34:47,909
change your configuration of this system

00:34:45,359 --> 00:34:49,950
and then the configuration picks it up

00:34:47,909 --> 00:34:52,070
and adjust everything and then it gets

00:34:49,950 --> 00:34:54,389
balanced so that's why I'm saying it's

00:34:52,070 --> 00:34:57,810
the dashboard is really important for

00:34:54,389 --> 00:34:59,400
the DevOps and manage the virtual

00:34:57,810 --> 00:35:02,099
environments because they have to watch

00:34:59,400 --> 00:35:04,320
what's going they're doing configuration

00:35:02,099 --> 00:35:05,910
changes provisioning changes but the

00:35:04,320 --> 00:35:08,490
monitoring system has to pick it up

00:35:05,910 --> 00:35:10,890
because nobody manually will change the

00:35:08,490 --> 00:35:12,930
configuration system if you say I move

00:35:10,890 --> 00:35:15,750
this vm from one I hypervisor to the

00:35:12,930 --> 00:35:17,400
other it gets picked up here this gets

00:35:15,750 --> 00:35:20,300
reconfigured and the data collection

00:35:17,400 --> 00:35:23,369
works you don't get an alarm because the

00:35:20,300 --> 00:35:24,720
vm disappeared from one hypervisor to

00:35:23,369 --> 00:35:25,830
another you should never get an alarm

00:35:24,720 --> 00:35:27,390
it's still there it has been

00:35:25,830 --> 00:35:31,589
repositioned so it should be all

00:35:27,390 --> 00:35:33,869
automatic so that's the reality today

00:35:31,589 --> 00:35:35,970
that you have to have the a negative

00:35:33,869 --> 00:35:37,530
feedback loop that you if you do

00:35:35,970 --> 00:35:39,869
provisioning changes the monitoring

00:35:37,530 --> 00:35:41,460
picks it up without any manual

00:35:39,869 --> 00:35:44,070
intervention so that's what we call the

00:35:41,460 --> 00:35:46,710
automation to continues configuration

00:35:44,070 --> 00:35:48,570
discovery you have to ask through the

00:35:46,710 --> 00:35:51,260
API what's going on in the system and

00:35:48,570 --> 00:35:51,260
adjust it

00:35:53,039 --> 00:36:01,470
so now what kind of monitoring tools are

00:35:56,319 --> 00:36:05,740
available for openstack monitoring so

00:36:01,470 --> 00:36:07,779
what I have here it's the hardware that

00:36:05,740 --> 00:36:09,339
you say I wanna install OpenStack what

00:36:07,779 --> 00:36:12,460
stock this is about the deployment

00:36:09,339 --> 00:36:14,589
process right to set it up and then this

00:36:12,460 --> 00:36:17,049
is open source tool fuel it's very

00:36:14,589 --> 00:36:22,359
popular for OpenStack provisioning and

00:36:17,049 --> 00:36:25,539
set up it's a there are many out there

00:36:22,359 --> 00:36:28,420
but this one it's one of the better ones

00:36:25,539 --> 00:36:31,660
because it has a nice UI browser-based

00:36:28,420 --> 00:36:34,900
you I that you can configure you entire

00:36:31,660 --> 00:36:37,869
OpenStack through the UI before you even

00:36:34,900 --> 00:36:40,420
start deploying it and what it does it

00:36:37,869 --> 00:36:41,980
verifies as well that you network it's

00:36:40,420 --> 00:36:43,809
okay because that's the biggest problem

00:36:41,980 --> 00:36:47,019
deploying open circuits like your

00:36:43,809 --> 00:36:48,910
network and your switches that you

00:36:47,019 --> 00:36:51,099
deploy the whole thing has to be set up

00:36:48,910 --> 00:36:53,200
correctly you need public and private

00:36:51,099 --> 00:36:57,009
addresses needs to be set up correctly

00:36:53,200 --> 00:36:59,920
you have to tag the vlans correctly fuel

00:36:57,009 --> 00:37:03,130
checks all that and if it says it's okay

00:36:59,920 --> 00:37:06,700
you can press a button and it deploys

00:37:03,130 --> 00:37:08,650
the hypervisors the storage and all

00:37:06,700 --> 00:37:10,960
thats of what you have configured it

00:37:08,650 --> 00:37:12,430
just deploys in one button which is a

00:37:10,960 --> 00:37:14,650
really great tool until half an hour

00:37:12,430 --> 00:37:16,869
later if you have done it all right you

00:37:14,650 --> 00:37:19,539
have an open stack up and running and

00:37:16,869 --> 00:37:22,150
it's working it's guaranteed working and

00:37:19,539 --> 00:37:24,519
I think that's part of the success of

00:37:22,150 --> 00:37:26,710
fuel and the thing is then you decide

00:37:24,519 --> 00:37:28,180
hey I have another server you bring it

00:37:26,710 --> 00:37:31,390
in you go to fuel and says here's

00:37:28,180 --> 00:37:33,970
another compute node another hypervisor

00:37:31,390 --> 00:37:35,950
if you'll does the verification added to

00:37:33,970 --> 00:37:38,259
the network and you just deploy it so

00:37:35,950 --> 00:37:41,319
it's really easy it's really a great

00:37:38,259 --> 00:37:43,930
tool to do that but that means then you

00:37:41,319 --> 00:37:45,400
have the OpenStack running there so you

00:37:43,930 --> 00:37:48,130
have the environment you have to virtual

00:37:45,400 --> 00:37:50,559
environment up and running but then

00:37:48,130 --> 00:37:52,119
there's another tool the Moran open

00:37:50,559 --> 00:37:57,299
source tool murano application

00:37:52,119 --> 00:38:02,109
repository what it is it's a catalog of

00:37:57,299 --> 00:38:03,339
of applications there are VMs that they

00:38:02,109 --> 00:38:05,530
are in the catalog and then you can

00:38:03,339 --> 00:38:08,740
decide where they should be deployed

00:38:05,530 --> 00:38:12,340
and then you can decide okay I need all

00:38:08,740 --> 00:38:15,690
the monitoring and I I bring in my eye

00:38:12,340 --> 00:38:18,250
singer too I bring in my open TS DB and

00:38:15,690 --> 00:38:20,800
then I have some dr. environments which

00:38:18,250 --> 00:38:23,860
has already box by which is another open

00:38:20,800 --> 00:38:26,500
source container monitoring tool which

00:38:23,860 --> 00:38:29,980
is some provision there and here I just

00:38:26,500 --> 00:38:32,320
this could be inside the open psyche as

00:38:29,980 --> 00:38:34,900
well but I just draw it here to say it's

00:38:32,320 --> 00:38:36,850
our unification layer that you need the

00:38:34,900 --> 00:38:38,950
unified monitoring view the data

00:38:36,850 --> 00:38:41,560
management and all the collectors so you

00:38:38,950 --> 00:38:43,990
can deploy that true marana because they

00:38:41,560 --> 00:38:46,930
are in an application catalog and again

00:38:43,990 --> 00:38:48,790
if you go in and deploy if you want to

00:38:46,930 --> 00:38:51,340
add some other instances and all that

00:38:48,790 --> 00:38:54,430
stuff you can do it to the catalog so we

00:38:51,340 --> 00:38:56,470
run on fuel or to OpenStack projects

00:38:54,430 --> 00:38:59,470
they're part of OpenStack but really

00:38:56,470 --> 00:39:03,970
helpful deployment and provisioning

00:38:59,470 --> 00:39:06,190
resources in OpenStack so this is great

00:39:03,970 --> 00:39:08,530
but the problem is it's all sitting

00:39:06,190 --> 00:39:12,040
there and doing nothing right because

00:39:08,530 --> 00:39:16,120
it's not configured so the other next

00:39:12,040 --> 00:39:18,340
big innovation its fuel plugins because

00:39:16,120 --> 00:39:22,510
when you provision fuel when it installs

00:39:18,340 --> 00:39:24,970
it it creates as well SSH keys he knows

00:39:22,510 --> 00:39:26,140
where the api's are where the API where

00:39:24,970 --> 00:39:28,830
the password the credential and

00:39:26,140 --> 00:39:32,340
everything gets generated in fuel and

00:39:28,830 --> 00:39:35,200
the plugins can then use that to

00:39:32,340 --> 00:39:40,170
configure software so you can configure

00:39:35,200 --> 00:39:42,520
icinga with ssh key as a sage check for

00:39:40,170 --> 00:39:44,410
for the operating system and the

00:39:42,520 --> 00:39:47,710
hypervisor and storage you can configure

00:39:44,410 --> 00:39:50,140
it directly with the ssh key it's all

00:39:47,710 --> 00:39:53,080
there and then as well where the data

00:39:50,140 --> 00:39:55,750
should be sent to for collection you can

00:39:53,080 --> 00:39:59,400
then provision as well this tool and

00:39:55,750 --> 00:40:03,160
says well opens open tht beans which are

00:39:59,400 --> 00:40:04,240
vm resource it is etc so you with the

00:40:03,160 --> 00:40:07,620
plug-in you have all the information

00:40:04,240 --> 00:40:10,480
that you can then deploy a configure

00:40:07,620 --> 00:40:13,960
your OpenStack the application

00:40:10,480 --> 00:40:16,120
deployment once you have done that it's

00:40:13,960 --> 00:40:18,220
running it's configured all the api's

00:40:16,120 --> 00:40:19,230
are configured and it starts monitoring

00:40:18,220 --> 00:40:21,810
and send it back in

00:40:19,230 --> 00:40:24,300
mation and collecting information so

00:40:21,810 --> 00:40:26,880
it's really the plug-in there's a large

00:40:24,300 --> 00:40:30,359
repository that the application

00:40:26,880 --> 00:40:33,210
developers start putting in instructions

00:40:30,359 --> 00:40:40,920
how to configure tools so that's the one

00:40:33,210 --> 00:40:42,570
way then to get all the connections what

00:40:40,920 --> 00:40:44,340
I put here as well so that's in the

00:40:42,570 --> 00:40:46,260
deployment that you want to have then

00:40:44,340 --> 00:40:48,900
it's up and running in your OpenStack

00:40:46,260 --> 00:40:52,550
and your monetary OpenStack and of

00:40:48,900 --> 00:40:55,170
course if you add any new VMs in here

00:40:52,550 --> 00:40:58,560
because the monitoring tool it's going

00:40:55,170 --> 00:41:01,410
for the the controller which really

00:40:58,560 --> 00:41:03,420
manages the older resources since it's

00:41:01,410 --> 00:41:05,910
now connected here its automated if you

00:41:03,420 --> 00:41:08,010
have a new vm it gets here it gets the

00:41:05,910 --> 00:41:09,450
feedback here and then it starts

00:41:08,010 --> 00:41:12,869
collecting information because it gets

00:41:09,450 --> 00:41:15,030
reprovision but as well from here it can

00:41:12,869 --> 00:41:17,700
then be pushed down to icing on says add

00:41:15,030 --> 00:41:20,040
this new host for some checking you can

00:41:17,700 --> 00:41:23,280
do that as well so that's a two-way

00:41:20,040 --> 00:41:27,060
between from here back to icing of our

00:41:23,280 --> 00:41:30,420
exam so here we are after whole

00:41:27,060 --> 00:41:32,010
monitoring but another thing it's like

00:41:30,420 --> 00:41:34,619
the performance data you want to bring

00:41:32,010 --> 00:41:36,630
in the performance data again from all

00:41:34,619 --> 00:41:39,119
the resources that you have you want to

00:41:36,630 --> 00:41:42,420
the API you want to send it to open TSD

00:41:39,119 --> 00:41:44,520
be all the metrics that you have again

00:41:42,420 --> 00:41:46,619
here's an API and each of this one

00:41:44,520 --> 00:41:50,310
couldn't send it to open TST be the

00:41:46,619 --> 00:41:53,700
metrics you just send them in as a raw

00:41:50,310 --> 00:41:57,510
metrics that's an important thing and it

00:41:53,700 --> 00:42:00,060
has a centralized API of course open TST

00:41:57,510 --> 00:42:01,680
be it's an expandable storage so if you

00:42:00,060 --> 00:42:04,970
need more you can add more you can

00:42:01,680 --> 00:42:08,850
cluster it and so on it's a really great

00:42:04,970 --> 00:42:10,800
performance data database and then on

00:42:08,850 --> 00:42:14,850
the top what you want to have the UI its

00:42:10,800 --> 00:42:17,390
graph owner which comes open TS TV has

00:42:14,850 --> 00:42:21,660
graph on as the default now which is a

00:42:17,390 --> 00:42:24,210
great improvement I have done and what

00:42:21,660 --> 00:42:26,580
it helps to really to look at historic

00:42:24,210 --> 00:42:29,760
performance data which is the raw data

00:42:26,580 --> 00:42:31,200
you can search but what's more important

00:42:29,760 --> 00:42:33,920
and we saw that this morning in a call

00:42:31,200 --> 00:42:37,170
that you can do

00:42:33,920 --> 00:42:39,270
searches for metrics you can say give me

00:42:37,170 --> 00:42:42,630
all the CPU memory across all the

00:42:39,270 --> 00:42:45,480
hypervisors with wildcards and then you

00:42:42,630 --> 00:42:47,700
get a graph that you see all lines and

00:42:45,480 --> 00:42:49,470
the but you see Dan outliers because one

00:42:47,700 --> 00:42:51,420
hypervisors doesn't behave well it's

00:42:49,470 --> 00:42:54,119
over provisional around the provision or

00:42:51,420 --> 00:42:56,220
you see spikes there and he says oh yeah

00:42:54,119 --> 00:42:58,319
we had to spike Anthony reprovision it

00:42:56,220 --> 00:43:02,089
and they came back and that helped so

00:42:58,319 --> 00:43:02,089
performance data it's really like your

00:43:02,210 --> 00:43:07,619
your view of the system that you can

00:43:05,520 --> 00:43:09,510
then react when you see it gets

00:43:07,619 --> 00:43:11,010
overloaded or under loaded as well

00:43:09,510 --> 00:43:13,200
because you have some system they are

00:43:11,010 --> 00:43:17,220
really highly loaded in some def almost

00:43:13,200 --> 00:43:19,290
no data then you start moving VMs on the

00:43:17,220 --> 00:43:22,099
other hypervisor and you should see that

00:43:19,290 --> 00:43:25,609
immediately in the performance database

00:43:22,099 --> 00:43:28,589
so that's really so the combination of

00:43:25,609 --> 00:43:30,450
the performance data and all the other

00:43:28,589 --> 00:43:32,490
metrics for availability and event

00:43:30,450 --> 00:43:34,290
management you need to collect all this

00:43:32,490 --> 00:43:36,329
data from different sources again

00:43:34,290 --> 00:43:38,609
there's not one tool that tells you

00:43:36,329 --> 00:43:43,799
everything you need multiple tools to

00:43:38,609 --> 00:43:45,240
get it reported back that brings me so

00:43:43,799 --> 00:43:47,880
to the reference architecture for

00:43:45,240 --> 00:43:49,440
monitoring what's really remember the

00:43:47,880 --> 00:43:51,540
first slide where it was like you at one

00:43:49,440 --> 00:43:54,180
tool that was good for monitoring your

00:43:51,540 --> 00:43:56,700
entire network now we change you will

00:43:54,180 --> 00:44:00,720
need multiple tools and they need to

00:43:56,700 --> 00:44:03,000
have api's because what it is the

00:44:00,720 --> 00:44:06,660
collector needs to talk to the different

00:44:03,000 --> 00:44:08,520
API spring the data in you need a hub a

00:44:06,660 --> 00:44:12,780
collector help to get all this

00:44:08,520 --> 00:44:15,569
information in that to get the data from

00:44:12,780 --> 00:44:17,220
the different systems and afterwards you

00:44:15,569 --> 00:44:20,160
do the integration and that's the hard

00:44:17,220 --> 00:44:22,440
part and that's like quite some

00:44:20,160 --> 00:44:26,130
companies are now moving into this part

00:44:22,440 --> 00:44:28,619
2 to the data integration where to an

00:44:26,130 --> 00:44:30,690
API you bring the database data in you

00:44:28,619 --> 00:44:33,480
normalize the data and especially you

00:44:30,690 --> 00:44:35,790
the aliasing because the next step you

00:44:33,480 --> 00:44:38,099
want to visualize and again you want to

00:44:35,790 --> 00:44:40,710
have the data thats related on the other

00:44:38,099 --> 00:44:43,170
side but you don't care who collected

00:44:40,710 --> 00:44:45,390
the data that's an important thing you

00:44:43,170 --> 00:44:46,650
you just want to see the data here

00:44:45,390 --> 00:44:49,170
that's important

00:44:46,650 --> 00:44:51,750
if you have some missing metrics or some

00:44:49,170 --> 00:44:53,520
miss encounters you go on the other tool

00:44:51,750 --> 00:44:57,300
and edit their you add it to the tool

00:44:53,520 --> 00:45:00,060
that's best to do this check it's a

00:44:57,300 --> 00:45:01,860
hardware check you would use icinga you

00:45:00,060 --> 00:45:05,100
know you have a counter missing in the

00:45:01,860 --> 00:45:07,200
vm air you go to OpenStack etc so that's

00:45:05,100 --> 00:45:10,170
how you are trusted but then it comes

00:45:07,200 --> 00:45:12,900
flows through the system gets integrated

00:45:10,170 --> 00:45:14,550
here and the performance data and then

00:45:12,900 --> 00:45:17,840
the dashboard that you can really use

00:45:14,550 --> 00:45:22,040
this view to do the provisioning and

00:45:17,840 --> 00:45:22,040
adjustment of your virtual environment

00:45:23,840 --> 00:45:30,360
so everything its API that has changed

00:45:28,020 --> 00:45:32,970
there's not just not one that can do

00:45:30,360 --> 00:45:35,430
everything so you need multiple tools so

00:45:32,970 --> 00:45:38,700
that's important thing so what's the

00:45:35,430 --> 00:45:40,410
benefit of dis approaches so automation

00:45:38,700 --> 00:45:42,140
automation automation right there I

00:45:40,410 --> 00:45:45,960
think that's the only thing I can say so

00:45:42,140 --> 00:45:47,760
because configuration are dynamic you

00:45:45,960 --> 00:45:50,580
have to automate it you have to have API

00:45:47,760 --> 00:45:53,250
calls you have some glue scripts or

00:45:50,580 --> 00:45:55,650
logic to bring it in but it helps as

00:45:53,250 --> 00:45:58,680
well to streamline streamlined

00:45:55,650 --> 00:46:00,210
operations because you have to

00:45:58,680 --> 00:46:04,530
understand that how you get the data in

00:46:00,210 --> 00:46:05,790
what you do with it so again it's not

00:46:04,530 --> 00:46:09,150
the manual process there is no

00:46:05,790 --> 00:46:11,940
intervention from people who can miss

00:46:09,150 --> 00:46:16,620
configure something you'll have to use

00:46:11,940 --> 00:46:18,210
that hardware again OpenStack your

00:46:16,620 --> 00:46:19,860
specific open sector is no vendor

00:46:18,210 --> 00:46:22,890
lock-in that's one of their mission that

00:46:19,860 --> 00:46:26,880
OpenStack has it runs on everything but

00:46:22,890 --> 00:46:30,060
you get the benefit of a less elastic

00:46:26,880 --> 00:46:31,620
compute flexible architecture pluggable

00:46:30,060 --> 00:46:34,920
architecture so there's no vendor

00:46:31,620 --> 00:46:37,080
locking and the API three transparencies

00:46:34,920 --> 00:46:38,970
through the API because everything talks

00:46:37,080 --> 00:46:42,090
API and you get a lot of information out

00:46:38,970 --> 00:46:46,140
of the API for configuration and at the

00:46:42,090 --> 00:46:49,710
wrong time we talked about capacity and

00:46:46,140 --> 00:46:51,570
resource planning so you since you have

00:46:49,710 --> 00:46:53,360
a view from from the bottom from the

00:46:51,570 --> 00:46:55,590
network to the top to the application

00:46:53,360 --> 00:46:57,210
you can now see where are the

00:46:55,590 --> 00:46:59,760
bottlenecks because you see the whole

00:46:57,210 --> 00:47:00,590
stack in front of you is saying saying

00:46:59,760 --> 00:47:04,340
it's like I know

00:47:00,590 --> 00:47:08,480
it's a problem in the network or in the

00:47:04,340 --> 00:47:11,150
storage or the compute the cpu Enzo or

00:47:08,480 --> 00:47:13,250
die aline that's what where the problem

00:47:11,150 --> 00:47:14,810
lies and then you cannot just it and

00:47:13,250 --> 00:47:18,050
then allocate the resources very

00:47:14,810 --> 00:47:21,140
necessary so and as well you know that

00:47:18,050 --> 00:47:22,910
even you talk about storage latency it

00:47:21,140 --> 00:47:24,590
slow maybe it's a network problem

00:47:22,910 --> 00:47:28,190
because the true put to going to the

00:47:24,590 --> 00:47:29,540
storage you would have it if you run it

00:47:28,190 --> 00:47:31,750
isolated but since you have the

00:47:29,540 --> 00:47:34,070
application goes to the same network as

00:47:31,750 --> 00:47:35,960
the storage goes to the same network

00:47:34,070 --> 00:47:37,850
then you say we have made the latency

00:47:35,960 --> 00:47:39,950
problem there but then you say we just

00:47:37,850 --> 00:47:42,110
distribute across two virtual networks

00:47:39,950 --> 00:47:43,610
and then suddenly see okay the

00:47:42,110 --> 00:47:46,310
application uses a different network

00:47:43,610 --> 00:47:48,320
then the storage and suddenly probably

00:47:46,310 --> 00:47:50,300
your bottle neck goes away but before

00:47:48,320 --> 00:47:53,690
you see that who has problem with the

00:47:50,300 --> 00:47:56,420
network latency you cannot make these

00:47:53,690 --> 00:47:58,580
kind of decisions so instead of buying

00:47:56,420 --> 00:48:00,620
an more storage because the storage is

00:47:58,580 --> 00:48:02,750
slow you just create a new where a

00:48:00,620 --> 00:48:04,490
virtual network and then it's all good

00:48:02,750 --> 00:48:07,850
because that's the problem and not the

00:48:04,490 --> 00:48:09,920
story and not the filer so that's one of

00:48:07,850 --> 00:48:11,630
the common problems that it's like

00:48:09,920 --> 00:48:13,310
because you don't know you try

00:48:11,630 --> 00:48:14,750
everything and then if it works you say

00:48:13,310 --> 00:48:17,750
we figured out the problem what it is

00:48:14,750 --> 00:48:19,580
but it wasn't and then it comes back and

00:48:17,750 --> 00:48:22,010
before you have really detail about the

00:48:19,580 --> 00:48:24,950
whole stack it's really hard to really

00:48:22,010 --> 00:48:27,260
find the root cause of slow down or

00:48:24,950 --> 00:48:31,310
latency problems or of general slowness

00:48:27,260 --> 00:48:33,920
of applications and I think what the

00:48:31,310 --> 00:48:36,220
other thing big change is this is admin

00:48:33,920 --> 00:48:38,090
and the DevOps functions start to merge

00:48:36,220 --> 00:48:40,190
before it was really a system

00:48:38,090 --> 00:48:41,810
administrator was there for that I key

00:48:40,190 --> 00:48:43,520
infrastructure for the servers and

00:48:41,810 --> 00:48:46,370
operating systems and the DevOps were

00:48:43,520 --> 00:48:49,000
just applications but now it goes all

00:48:46,370 --> 00:48:53,510
together because virtualization and

00:48:49,000 --> 00:48:56,810
containerization becomes a part of IT so

00:48:53,510 --> 00:49:00,380
seaside mins and DevOps almost the same

00:48:56,810 --> 00:49:02,660
function you manage it to management

00:49:00,380 --> 00:49:04,760
tools for the virtualization and so on

00:49:02,660 --> 00:49:07,010
so there's so much overlap that I think

00:49:04,760 --> 00:49:10,280
that the function will merge so you will

00:49:07,010 --> 00:49:12,680
have more specialized DevOps this admin

00:49:10,280 --> 00:49:14,559
or whatever maybe they come up with a

00:49:12,680 --> 00:49:17,299
new name it one day

00:49:14,559 --> 00:49:19,130
so I think that I'll really then the

00:49:17,299 --> 00:49:21,589
benefits for virtualization platforms

00:49:19,130 --> 00:49:23,779
for OpenStack but in general if you do

00:49:21,589 --> 00:49:30,979
the monitoring right with the right tool

00:49:23,779 --> 00:49:32,599
that's all the benefits you get so so

00:49:30,979 --> 00:49:35,509
working with virtualization and this

00:49:32,599 --> 00:49:38,359
different virtualization environment so

00:49:35,509 --> 00:49:40,670
just open sec what VMware and Amazon and

00:49:38,359 --> 00:49:43,699
Azure and so on so what what are some

00:49:40,670 --> 00:49:45,140
lessons learned one thing it's

00:49:43,699 --> 00:49:47,029
definitely that virtualization is a

00:49:45,140 --> 00:49:49,430
reality right it will not change nobody

00:49:47,029 --> 00:49:53,690
will move back and say oh we go back to

00:49:49,430 --> 00:49:56,979
the server model a shocking thing it's

00:49:53,690 --> 00:49:59,719
like with for virtualization the

00:49:56,979 --> 00:50:02,180
hardware utilization was about fifteen

00:49:59,719 --> 00:50:04,609
percent when the VMware virtualization

00:50:02,180 --> 00:50:07,190
came in it went up to thirty five

00:50:04,609 --> 00:50:09,319
percent you think that's not a lot but

00:50:07,190 --> 00:50:13,099
it was twenty percent better utilization

00:50:09,319 --> 00:50:15,289
since the elastic compute comes in it's

00:50:13,099 --> 00:50:17,329
closer to sixty percent so the

00:50:15,289 --> 00:50:19,759
utilization gets better more benefits

00:50:17,329 --> 00:50:22,670
are there so it's a reality will not go

00:50:19,759 --> 00:50:24,170
away but what what does it go away it's

00:50:22,670 --> 00:50:27,109
as well the legacy hardware and software

00:50:24,170 --> 00:50:28,430
will be around nobody turns out all

00:50:27,109 --> 00:50:30,829
their system and brings in just a

00:50:28,430 --> 00:50:33,019
virtualization platform so you need the

00:50:30,829 --> 00:50:35,779
old tools as well you just need to

00:50:33,019 --> 00:50:38,180
integrate the tools that you have one

00:50:35,779 --> 00:50:40,519
tool to manage everything so API it's

00:50:38,180 --> 00:50:43,009
important more and more tools and

00:50:40,519 --> 00:50:45,140
software come out with API said you can

00:50:43,009 --> 00:50:49,489
use so you have to retool how you manage

00:50:45,140 --> 00:50:52,880
and the monitor and and of course it's

00:50:49,489 --> 00:50:54,829
true API is more and more anything it's

00:50:52,880 --> 00:50:58,400
really hard because it causes a lot of

00:50:54,829 --> 00:51:01,910
problems when you start renaming devices

00:50:58,400 --> 00:51:05,239
but it's still simpler then try to agree

00:51:01,910 --> 00:51:07,999
all the department in a company about

00:51:05,239 --> 00:51:09,410
naming and process and workflow so you

00:51:07,999 --> 00:51:11,989
rather spend it in software development

00:51:09,410 --> 00:51:14,420
and trying to change the process in a

00:51:11,989 --> 00:51:16,039
company but still it's absolutely

00:51:14,420 --> 00:51:18,019
necessary to get a listing and the best

00:51:16,039 --> 00:51:19,940
thing is like you have posed you have a

00:51:18,019 --> 00:51:23,359
standard but there are some exception

00:51:19,940 --> 00:51:25,160
you manage it with aliasing use the best

00:51:23,359 --> 00:51:26,690
tool for the task as I said it's like

00:51:25,160 --> 00:51:27,380
you're really to select what's the best

00:51:26,690 --> 00:51:29,869
tool

00:51:27,380 --> 00:51:31,730
an API goes under the cover it's

00:51:29,869 --> 00:51:34,339
specialized for containers its

00:51:31,730 --> 00:51:35,900
specialized for software-defined Network

00:51:34,339 --> 00:51:39,140
and so on that's what you have to take

00:51:35,900 --> 00:51:40,519
and integrate don't over money toward to

00:51:39,140 --> 00:51:42,259
cover the gap that's the other thing

00:51:40,519 --> 00:51:45,589
it's like I can do it with my tool I

00:51:42,259 --> 00:51:47,299
have done it for the last 10 years don't

00:51:45,589 --> 00:51:49,640
do that because you don't want it you

00:51:47,299 --> 00:51:51,170
look at the not at the right spot

00:51:49,640 --> 00:51:52,940
because you just try to have a lot of

00:51:51,170 --> 00:51:55,369
coverage a lot of counters a lot of

00:51:52,940 --> 00:51:57,140
performance data but you never analyzed

00:51:55,369 --> 00:52:04,640
the real problem because you just try to

00:51:57,140 --> 00:52:08,750
cover the shortcomings so here's a last

00:52:04,640 --> 00:52:10,190
slide the conclusion slide so really

00:52:08,750 --> 00:52:12,170
important it's that open source tools

00:52:10,190 --> 00:52:13,519
are the driving force of innovation all

00:52:12,170 --> 00:52:15,380
the things that we saw a neutralization

00:52:13,519 --> 00:52:17,180
a lot of things came to open source

00:52:15,380 --> 00:52:19,819
tools to open source initiatives

00:52:17,180 --> 00:52:21,349
OpenStack it's a big one a lot of the

00:52:19,819 --> 00:52:24,940
software-defined Network and

00:52:21,349 --> 00:52:27,559
software-defined storage came through

00:52:24,940 --> 00:52:32,450
OpenStack projects and it's now really

00:52:27,559 --> 00:52:34,309
to the driving force DevOps just select

00:52:32,450 --> 00:52:36,759
the best tool to do the job so it's more

00:52:34,309 --> 00:52:40,490
the pragmatism of DevOps that's now the

00:52:36,759 --> 00:52:45,410
mode of operation in data centers and in

00:52:40,490 --> 00:52:47,480
IT departments again a single tool to

00:52:45,410 --> 00:52:49,400
rule them all doesn't exist so

00:52:47,480 --> 00:52:52,190
monitoring you need multiple monitoring

00:52:49,400 --> 00:52:56,329
tools and combine their results and then

00:52:52,190 --> 00:53:00,680
and visualize it integration it's a

00:52:56,329 --> 00:53:02,539
complex task again teams will never

00:53:00,680 --> 00:53:06,710
agree on naming and processing work flow

00:53:02,539 --> 00:53:09,529
and so on so this is part makes

00:53:06,710 --> 00:53:12,880
integration harder but with api's and

00:53:09,529 --> 00:53:17,839
tool sets in or around it it's doable

00:53:12,880 --> 00:53:21,109
and again automation automation there's

00:53:17,839 --> 00:53:24,859
nothing else to say there visualize

00:53:21,109 --> 00:53:26,480
everything will continue so we see more

00:53:24,859 --> 00:53:28,250
movements as well if you look at the

00:53:26,480 --> 00:53:30,259
virtualization of containers and VMS

00:53:28,250 --> 00:53:32,630
inside OpenStack it seems to merge

00:53:30,259 --> 00:53:34,519
together that in the in the future you

00:53:32,630 --> 00:53:36,920
don't have a vm and the container you

00:53:34,519 --> 00:53:40,670
have something like a mutual container

00:53:36,920 --> 00:53:43,900
or something like that because to just

00:53:40,670 --> 00:53:48,049
a smaller footprint of your compute

00:53:43,900 --> 00:53:49,970
element it's really important automation

00:53:48,049 --> 00:53:51,710
and continuous discovery it's necessary

00:53:49,970 --> 00:53:56,030
no question because you cannot do it by

00:53:51,710 --> 00:53:57,859
hand then open sec it's the open source

00:53:56,030 --> 00:54:02,240
virtualization platform it's really

00:53:57,859 --> 00:54:06,170
popular it's growing it's great but the

00:54:02,240 --> 00:54:09,559
monitoring still needs major improvement

00:54:06,170 --> 00:54:12,950
major input and contributions from all

00:54:09,559 --> 00:54:14,690
IT administrators and people that go to

00:54:12,950 --> 00:54:16,970
open source conference like that it's

00:54:14,690 --> 00:54:19,190
the need more contribution to that

00:54:16,970 --> 00:54:21,829
regard and to make it more important

00:54:19,190 --> 00:54:24,049
that it becomes them more important task

00:54:21,829 --> 00:54:25,790
that monitoring needs to be added to

00:54:24,049 --> 00:54:29,030
OpenStack monitoring needs to be all

00:54:25,790 --> 00:54:31,910
added to to the API so you can be really

00:54:29,030 --> 00:54:33,799
be used as a next step so what they're

00:54:31,910 --> 00:54:37,130
saying it's open sec it's the open

00:54:33,799 --> 00:54:39,650
source platform and the project that

00:54:37,130 --> 00:54:43,609
it's growing gets more popular so we

00:54:39,650 --> 00:54:53,660
just need more contribution to it thank

00:54:43,609 --> 00:55:00,770
you well thanks to Rho Rho G so we have

00:54:53,660 --> 00:55:04,630
a few minutes to some questions no coach

00:55:00,770 --> 00:55:09,670
where's a question I don't have t-shirts

00:55:04,630 --> 00:55:13,099
hahaha maybe that's the reason what's

00:55:09,670 --> 00:55:15,890
the role of groundworks open source do

00:55:13,099 --> 00:55:18,619
you have all this stuff integrated in

00:55:15,890 --> 00:55:21,020
your product or is it just an experiment

00:55:18,619 --> 00:55:22,910
what you know those us about so what we

00:55:21,020 --> 00:55:25,910
have written we have written a connector

00:55:22,910 --> 00:55:28,940
the hop that talks to all these api is

00:55:25,910 --> 00:55:31,730
to integrate it this is insulting yeah

00:55:28,940 --> 00:55:34,130
the Greek temple the Greek temple is our

00:55:31,730 --> 00:55:35,900
contribution to the open source to do in

00:55:34,130 --> 00:55:38,599
an open set to be the involvement in the

00:55:35,900 --> 00:55:40,819
OpenStack organization but as well in

00:55:38,599 --> 00:55:42,349
our product as a commercial offering we

00:55:40,819 --> 00:55:44,299
have to clot up in there which is the

00:55:42,349 --> 00:55:46,640
API collector in there that brings in

00:55:44,299 --> 00:55:49,309
all the talks with all the API said you

00:55:46,640 --> 00:55:50,960
have and bring it in and does the

00:55:49,309 --> 00:55:52,400
aliasing so that's why I know about the

00:55:50,960 --> 00:55:53,260
aliasing because we spend quite some

00:55:52,400 --> 00:55:56,140
time to get

00:55:53,260 --> 00:55:58,510
anything right so that's part that we

00:55:56,140 --> 00:56:01,510
try to do to see or we doing this

00:55:58,510 --> 00:56:04,240
integration of this multiple metrics in

00:56:01,510 --> 00:56:06,630
a unified you I that's really where we

00:56:04,240 --> 00:56:17,920
going at because we see that's a big

00:56:06,630 --> 00:56:20,730
demand on IT administrators thanks okay

00:56:17,920 --> 00:56:20,730

YouTube URL: https://www.youtube.com/watch?v=hHoiZOs3T6Q


