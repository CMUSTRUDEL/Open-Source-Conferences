Title: OSMC 2015 | Linux Performance Profiling and Monitoring - Werner Fischer
Publication date: 2015-11-27
Playlist: OSMC 2015 | Open Source Monitoring Conference
Description: 
	Nowadays system administrators have great choices when it comes down to Linux performance profiling and monitoring. The challenge is to pick the appropriate tools and interpret their results correctly.
This talk is a chance to take a tour through various performance profiling and benchmarking tools, focusing on their benefit for every sysadmin.
More than 25 different tools are presented. Ranging from well known tools like strace, iostat, tcpdump or vmstat to new features like Linux tracepoints or perf_events. You will also learn which tools can be monitored by Icinga and which monitoring plugins are already available for that.
At the end the goal is to gather reference points to look at, whenever you are faced with performance problems.
Take the chance to close your knowledge gaps and learn how to get the most out of your system.
Captions: 
	00:00:09,060 --> 00:00:16,300
so hello will come to work tonight

00:00:13,380 --> 00:00:19,490
acoustic clay and

00:00:16,300 --> 00:00:22,220
tacos on a man thong Foong Thomas came

00:00:19,490 --> 00:00:24,080
from the unofficial king burger hutton

00:00:22,220 --> 00:00:28,130
we're in the Vienna feature personally

00:00:24,080 --> 00:00:30,560
fizzbuzz yeah thank you fitting in film

00:00:28,130 --> 00:00:33,710
thank you for the introduction as far as

00:00:30,560 --> 00:00:38,269
I know unexpected to talk in English I

00:00:33,710 --> 00:00:40,879
hope this is correct so yeah hopefully I

00:00:38,269 --> 00:00:43,100
didn't I didn't miss it yeah thank you

00:00:40,879 --> 00:00:45,710
and welcome i hope everybody enjoyed

00:00:43,100 --> 00:00:48,140
lunch thank you for joining this talk

00:00:45,710 --> 00:00:51,350
about linux performance profiling and

00:00:48,140 --> 00:00:53,900
monitoring and i will guide you within

00:00:51,350 --> 00:00:56,330
the next 40 to 45 minutes through

00:00:53,900 --> 00:00:59,600
various topics regarding linux

00:00:56,330 --> 00:01:02,540
performance topics before start right

00:00:59,600 --> 00:01:05,150
now a short introduction i'm working at

00:01:02,540 --> 00:01:10,610
Thomas crane by now for over 10 years

00:01:05,150 --> 00:01:12,320
and so I I see not only the monitoring

00:01:10,610 --> 00:01:14,840
conference is a ten years anniversary

00:01:12,320 --> 00:01:17,240
also I Thomas Coyne but unfortunately a

00:01:14,840 --> 00:01:19,250
mr. fourth are they at the four first

00:01:17,240 --> 00:01:24,350
conferences so I don't effing all the

00:01:19,250 --> 00:01:27,230
stars here but I'll work on that I'm

00:01:24,350 --> 00:01:29,530
within the knowledge transfer team at

00:01:27,230 --> 00:01:34,840
Thomas Quinn are working in various

00:01:29,530 --> 00:01:37,910
different technical topics and I'm also

00:01:34,840 --> 00:01:41,570
together with two colleagues responsible

00:01:37,910 --> 00:01:44,330
for the Thomas Crown wiki so I hope more

00:01:41,570 --> 00:01:46,300
most of you already know the wiki maybe

00:01:44,330 --> 00:01:52,490
a short hands and who knows to wiki oh

00:01:46,300 --> 00:01:54,230
wow yeah fine so I'm thank you so I'm

00:01:52,490 --> 00:01:55,700
happy that do not have the Countess of

00:01:54,230 --> 00:01:59,150
the slides on a week because otherwise I

00:01:55,700 --> 00:02:04,880
maybe I could go in go in and keep

00:01:59,150 --> 00:02:06,920
drinking coffee so what's the gander for

00:02:04,880 --> 00:02:10,580
this afternoon for the next 40 minutes

00:02:06,920 --> 00:02:13,340
I've three main topics we will start

00:02:10,580 --> 00:02:16,670
with collecting statistics with words

00:02:13,340 --> 00:02:18,680
tools some of the tools already on

00:02:16,670 --> 00:02:21,319
nearly our Linux box some of them have

00:02:18,680 --> 00:02:23,900
to be installed the first I'll show to

00:02:21,319 --> 00:02:26,270
your from the sister package going away

00:02:23,900 --> 00:02:29,030
and peace that yams that pits that you

00:02:26,270 --> 00:02:30,170
start tools which are around for many

00:02:29,030 --> 00:02:33,780
many years

00:02:30,170 --> 00:02:38,400
but when they aren't used on a daily

00:02:33,780 --> 00:02:41,010
basis yeah you you somehow lose how to

00:02:38,400 --> 00:02:42,930
how to use them in the right way so it's

00:02:41,010 --> 00:02:45,840
a good chance to finish up this

00:02:42,930 --> 00:02:48,630
knowledge then I'll show also some other

00:02:45,840 --> 00:02:52,680
tools like these that nyx that the

00:02:48,630 --> 00:02:55,890
system activity reporter I'll show some

00:02:52,680 --> 00:02:57,900
templates for khaki and also some

00:02:55,890 --> 00:03:00,980
monitoring plugins we have the chance to

00:02:57,900 --> 00:03:05,010
take these numbers into your singer

00:03:00,980 --> 00:03:07,319
monitoring and the second part we will

00:03:05,010 --> 00:03:10,890
watch some things online using

00:03:07,319 --> 00:03:16,049
well-known tools like top io top and if

00:03:10,890 --> 00:03:18,030
top and the third part is about tracing

00:03:16,049 --> 00:03:20,700
about performance I've creates the

00:03:18,030 --> 00:03:23,579
purpose and about flame grafts and this

00:03:20,700 --> 00:03:27,480
is especially a part where you have the

00:03:23,579 --> 00:03:29,370
chance to analyze the genomes the

00:03:27,480 --> 00:03:31,620
software using in more detail and

00:03:29,370 --> 00:03:35,609
whenever you hit some really weird

00:03:31,620 --> 00:03:41,670
performance issue this might be good a

00:03:35,609 --> 00:03:44,340
place to step to step in okay so let's

00:03:41,670 --> 00:03:48,660
start with finding some information

00:03:44,340 --> 00:03:51,780
about different statistic tools we will

00:03:48,660 --> 00:03:54,720
watch out and go on a slide which I

00:03:51,780 --> 00:03:57,120
about from when quack I went and Greg is

00:03:54,720 --> 00:03:59,910
a performance analyst currently working

00:03:57,120 --> 00:04:03,209
at Netflix and it's really a lot to do

00:03:59,910 --> 00:04:06,180
to keep optimizing all the linux stuff

00:04:03,209 --> 00:04:08,489
so that everybody can watch the videos

00:04:06,180 --> 00:04:11,639
and and and and the movies and they're

00:04:08,489 --> 00:04:13,079
good performance whether or not is at

00:04:11,639 --> 00:04:14,849
home always had the conference and

00:04:13,079 --> 00:04:17,970
listening to a boring talk which I hope

00:04:14,849 --> 00:04:23,430
you you don't need them to watch them

00:04:17,970 --> 00:04:27,419
now the tools which will add deep deeper

00:04:23,430 --> 00:04:31,650
dive into a market here so when we go a

00:04:27,419 --> 00:04:34,919
little bit further the next slide a good

00:04:31,650 --> 00:04:36,570
indicator for this talk and although you

00:04:34,919 --> 00:04:38,250
might expect this could be the number of

00:04:36,570 --> 00:04:40,229
minutes I will over on this talk this is

00:04:38,250 --> 00:04:42,450
not the number i Vil of minutes alors on

00:04:40,229 --> 00:04:43,080
this talk but this is the number of

00:04:42,450 --> 00:04:46,409
tools

00:04:43,080 --> 00:04:50,220
we will cover in this talk so we'll see

00:04:46,409 --> 00:04:54,300
we learn about or at least a see 20

00:04:50,220 --> 00:04:57,840
different tools and yeah I can recommend

00:04:54,300 --> 00:04:59,759
that you take a look at the tools that

00:04:57,840 --> 00:05:04,889
you think that are interesting for you

00:04:59,759 --> 00:05:07,229
and then type deep dive deeper and and

00:05:04,889 --> 00:05:09,960
try them out on a daily basis because

00:05:07,229 --> 00:05:11,580
this is the most important thing to

00:05:09,960 --> 00:05:14,699
really get the routine with the tools

00:05:11,580 --> 00:05:16,620
and to have the editing routine when

00:05:14,699 --> 00:05:18,599
their performance issues so that we can

00:05:16,620 --> 00:05:24,000
use them in your ID and pass the way

00:05:18,599 --> 00:05:25,680
whenever you hit a critical situation so

00:05:24,000 --> 00:05:28,229
let's take a deep breath and start the

00:05:25,680 --> 00:05:31,080
first one first one is a tool of

00:05:28,229 --> 00:05:34,279
assisted package so who of you has

00:05:31,080 --> 00:05:37,469
sister package installed on the server

00:05:34,279 --> 00:05:39,599
okay about forty percent I I would say

00:05:37,469 --> 00:05:41,370
so i can recommend to install this

00:05:39,599 --> 00:05:43,500
package on on your server because you

00:05:41,370 --> 00:05:45,990
have a lot of tools there you can can

00:05:43,500 --> 00:05:49,129
use in a good way and at first as

00:05:45,990 --> 00:05:54,000
mentioned is the mps that tool which is

00:05:49,129 --> 00:05:56,460
simply a tool to report CPU related

00:05:54,000 --> 00:05:59,389
statistics taking most of the

00:05:56,460 --> 00:06:02,159
information from the POC file system so

00:05:59,389 --> 00:06:06,539
most of the tools we will see in this

00:06:02,159 --> 00:06:08,370
first part of the talk in fact take the

00:06:06,539 --> 00:06:10,710
knowledge from the proc file system so

00:06:08,370 --> 00:06:13,190
you could also use the progress file

00:06:10,710 --> 00:06:16,529
system directly to get this information

00:06:13,190 --> 00:06:19,620
also some plugins are using the proc

00:06:16,529 --> 00:06:21,509
file system directly but these tools in

00:06:19,620 --> 00:06:23,400
fact just take this information on the

00:06:21,509 --> 00:06:25,199
proc file system and point the

00:06:23,400 --> 00:06:29,159
information to you in a and in good ways

00:06:25,199 --> 00:06:33,629
that you can easily get the important

00:06:29,159 --> 00:06:37,110
stuff out there so what is MP start

00:06:33,629 --> 00:06:39,469
doing when you call and peace that

00:06:37,110 --> 00:06:43,289
without any further arguments you get

00:06:39,469 --> 00:06:45,629
the numbers from the last system startup

00:06:43,289 --> 00:06:48,690
so for my system it's up and running for

00:06:45,629 --> 00:06:50,330
about 30 minutes because i'll i start

00:06:48,690 --> 00:06:53,580
the linux system a little bit advanced

00:06:50,330 --> 00:06:56,790
the demon you don't know will work out

00:06:53,580 --> 00:06:58,680
and not so if i would

00:06:56,790 --> 00:07:01,500
execute and piston out get the number

00:06:58,680 --> 00:07:04,260
for the last 30 minutes and you can also

00:07:01,500 --> 00:07:08,160
get updated numbers or on the current

00:07:04,260 --> 00:07:11,750
usage so for example on this system we

00:07:08,160 --> 00:07:15,590
have two cores with two hyperthreaded

00:07:11,750 --> 00:07:20,660
course within so we'll see here four

00:07:15,590 --> 00:07:24,420
cpus mentioned and you get numbers from

00:07:20,660 --> 00:07:30,450
percentage for for user CPU time system

00:07:24,420 --> 00:07:33,420
CPU time I awaits an idle time and you

00:07:30,450 --> 00:07:35,430
get all the information with more recent

00:07:33,420 --> 00:07:38,520
version for guest operating system many

00:07:35,430 --> 00:07:44,280
of example 1 in kv Emma the like on your

00:07:38,520 --> 00:07:48,030
linux server so we have the current

00:07:44,280 --> 00:07:54,750
situation here we see of our for cpu

00:07:48,030 --> 00:07:58,530
course one is doing the most a thing we

00:07:54,750 --> 00:08:01,020
see that is got some system time he's

00:07:58,530 --> 00:08:04,260
got some user time but it also has some

00:08:01,020 --> 00:08:06,450
i oh wait time and he will see that in

00:08:04,260 --> 00:08:09,510
fact a few tests is running so doing

00:08:06,450 --> 00:08:13,910
some io stuff which leads to the i await

00:08:09,510 --> 00:08:16,740
time here and we'll get some more

00:08:13,910 --> 00:08:19,950
information about I wait and idle time

00:08:16,740 --> 00:08:23,100
within the next slides we will see that

00:08:19,950 --> 00:08:26,430
I await this some kind of of idle time

00:08:23,100 --> 00:08:27,870
here so whenever you want to see ok how

00:08:26,430 --> 00:08:30,420
balance is my system with the course

00:08:27,870 --> 00:08:32,849
just one and peace that and undefined

00:08:30,420 --> 00:08:35,880
and also recommend this for example if

00:08:32,849 --> 00:08:38,070
you're running a database system just to

00:08:35,880 --> 00:08:40,140
ensure that your database is configured

00:08:38,070 --> 00:08:42,870
in the right way to really take

00:08:40,140 --> 00:08:45,210
advantage of old cpu cores just one and

00:08:42,870 --> 00:08:47,310
piece that can see ok are all cpu costs

00:08:45,210 --> 00:08:49,230
doing something or is only i want go

00:08:47,310 --> 00:08:54,180
doing something then you have to take a

00:08:49,230 --> 00:08:56,880
deeper look into your configuration the

00:08:54,180 --> 00:08:58,710
next tool is the vmstat tool it collects

00:08:56,880 --> 00:09:01,560
high level statistics about virtual

00:08:58,710 --> 00:09:03,720
memory shop and paging and also I all

00:09:01,560 --> 00:09:06,300
statistics and as a addition you also

00:09:03,720 --> 00:09:09,930
get information about system interrupt

00:09:06,300 --> 00:09:10,649
context switches and also a cpu

00:09:09,930 --> 00:09:12,930
statistics

00:09:10,649 --> 00:09:16,649
where you get the the default

00:09:12,930 --> 00:09:21,050
configuration the CPU values just as an

00:09:16,649 --> 00:09:24,480
average value overall your cpu cores so

00:09:21,050 --> 00:09:27,480
yeah what do we see do we see here let's

00:09:24,480 --> 00:09:29,879
go down to the next slide we see that we

00:09:27,480 --> 00:09:34,019
have here some information about the

00:09:29,879 --> 00:09:37,769
memo in the memory statistics regarding

00:09:34,019 --> 00:09:40,110
the page cache we see columns for path

00:09:37,769 --> 00:09:42,809
and cash and if you compare these values

00:09:40,110 --> 00:09:47,100
with a free tool we see that ok they

00:09:42,809 --> 00:09:49,350
really are are the same so you get the

00:09:47,100 --> 00:09:51,720
information with VMs that when you call

00:09:49,350 --> 00:09:54,899
it with a parameter 1 just every second

00:09:51,720 --> 00:09:57,929
and and in that case it's good to know

00:09:54,899 --> 00:10:01,379
that the amount that you have here

00:09:57,929 --> 00:10:03,689
reported as free isn't the really free

00:10:01,379 --> 00:10:06,029
memory because this is the output of the

00:10:03,689 --> 00:10:07,740
first line of the food command you have

00:10:06,029 --> 00:10:10,499
to take into account that you are using

00:10:07,740 --> 00:10:13,709
the page cache here which is a good

00:10:10,499 --> 00:10:15,540
thing so we I all requests you are doing

00:10:13,709 --> 00:10:18,480
for example if you're reading data for

00:10:15,540 --> 00:10:23,420
writing log files I like and you have

00:10:18,480 --> 00:10:27,809
free memory linux uses the page cache

00:10:23,420 --> 00:10:31,110
which is a combination of the buffers

00:10:27,809 --> 00:10:33,899
and cash columns here so the buffer

00:10:31,110 --> 00:10:37,709
column you have some files the meta data

00:10:33,899 --> 00:10:40,850
and data like that and the cached column

00:10:37,709 --> 00:10:44,970
you really have the amount of data that

00:10:40,850 --> 00:10:47,370
is being cached for the i/o so for

00:10:44,970 --> 00:10:51,240
example if you read an ISO image and you

00:10:47,370 --> 00:10:53,970
eat it again it should go into the page

00:10:51,240 --> 00:10:56,459
cache so you can do it a second weight

00:10:53,970 --> 00:10:59,220
fast and this is also good indicator

00:10:56,459 --> 00:11:02,429
when you see ok yeah my page cache is

00:10:59,220 --> 00:11:04,399
usually being used so when you take a

00:11:02,429 --> 00:11:07,170
look at your Linux system and I see ya

00:11:04,399 --> 00:11:10,189
fine-ass enough memory but it's the only

00:11:07,170 --> 00:11:13,170
a small amount of cached data here

00:11:10,189 --> 00:11:14,879
because yeah I don't have enough more

00:11:13,170 --> 00:11:16,980
memory it might be an idea to put in

00:11:14,879 --> 00:11:20,629
some memory to just take advantage of

00:11:16,980 --> 00:11:20,629
the page cache here

00:11:25,380 --> 00:11:31,360
what does memes that show us to you have

00:11:28,720 --> 00:11:34,750
in the first two columns the our column

00:11:31,360 --> 00:11:36,970
and the B column the arc column is the

00:11:34,750 --> 00:11:39,670
number of runnable processes the

00:11:36,970 --> 00:11:41,110
processes which are whining or which are

00:11:39,670 --> 00:11:43,690
waiting for a long time and if you have

00:11:41,110 --> 00:11:46,600
a high number here this might be an

00:11:43,690 --> 00:11:49,750
indicator for a CPU situation so you

00:11:46,600 --> 00:11:52,390
need more coarse to you have to enhance

00:11:49,750 --> 00:11:54,430
your performance while the second column

00:11:52,390 --> 00:11:57,460
the B column is the number of processes

00:11:54,430 --> 00:12:00,100
which are in an uninterruptible sleep so

00:11:57,460 --> 00:12:01,930
these processes are mostly waiting for

00:12:00,100 --> 00:12:07,240
i/o soon you might take a look at your

00:12:01,930 --> 00:12:10,000
i/o subsystem here and yeah in fact in

00:12:07,240 --> 00:12:11,710
this case if you want to dig a little

00:12:10,000 --> 00:12:17,770
bit deeper and to see ok what kernel

00:12:11,710 --> 00:12:21,100
functions are using these these problems

00:12:17,770 --> 00:12:24,580
I check can use the PS come come on with

00:12:21,100 --> 00:12:27,910
it wo Chen parameter which will show you

00:12:24,580 --> 00:12:30,400
the kernel functions of the processes it

00:12:27,910 --> 00:12:33,280
is sleeping on so you see ok it's really

00:12:30,400 --> 00:12:37,210
going on the VIII o file white so my

00:12:33,280 --> 00:12:42,520
oath system might not be the best here

00:12:37,210 --> 00:12:45,250
in that case numbers are the one thing

00:12:42,520 --> 00:12:47,800
the other thing is as we know often how

00:12:45,250 --> 00:12:50,440
to to show them in a good way so using

00:12:47,800 --> 00:12:53,530
diagrams is often a good idea you can

00:12:50,440 --> 00:12:57,130
take the numbers to get diagrams example

00:12:53,530 --> 00:12:59,680
using new blood in this example we see

00:12:57,130 --> 00:13:01,450
that we have drawn a diagram with a

00:12:59,680 --> 00:13:04,840
number of interrupts per second and

00:13:01,450 --> 00:13:07,180
context switches so if you want to get

00:13:04,840 --> 00:13:12,910
more information just use some of the

00:13:07,180 --> 00:13:16,440
diagram possibilities here so these are

00:13:12,910 --> 00:13:19,540
some summer isn't over views but

00:13:16,440 --> 00:13:21,340
whenever you hit some performance issues

00:13:19,540 --> 00:13:23,830
you want to dig a little bit deeper and

00:13:21,340 --> 00:13:27,520
see ok for example what is the process

00:13:23,830 --> 00:13:29,260
with the ID 1959 doing in detail and for

00:13:27,520 --> 00:13:32,020
that purpose as you might imagine

00:13:29,260 --> 00:13:33,270
there's a tool you could use pit start

00:13:32,020 --> 00:13:36,150
for that

00:13:33,270 --> 00:13:38,700
it's that report statistics for tasks

00:13:36,150 --> 00:13:41,940
that are being managed by the colonel in

00:13:38,700 --> 00:13:48,270
that case we first use the top commenter

00:13:41,940 --> 00:13:50,730
COK my my cpu is used by process and

00:13:48,270 --> 00:13:53,400
Missy okay it's used by cosplay Peyton

00:13:50,730 --> 00:13:55,260
but I do not have further details about

00:13:53,400 --> 00:13:58,020
the detailed comment so in that case we

00:13:55,260 --> 00:14:00,480
could use pits that give pits that the

00:13:58,020 --> 00:14:03,270
idea of the process and set the

00:14:00,480 --> 00:14:06,690
corresponding arguments to get for

00:14:03,270 --> 00:14:08,820
example with the else which are the

00:14:06,690 --> 00:14:12,000
command line arguments and the C okay in

00:14:08,820 --> 00:14:17,940
fact there's some matrix multiplication

00:14:12,000 --> 00:14:23,520
going on here in addition to this report

00:14:17,940 --> 00:14:26,700
pits that has also device report which

00:14:23,520 --> 00:14:29,580
is executed with a minus D switch so in

00:14:26,700 --> 00:14:31,950
that case you see for example okay I'm

00:14:29,580 --> 00:14:33,840
having here these number of I always and

00:14:31,950 --> 00:14:38,040
I want to you get to know okay which

00:14:33,840 --> 00:14:39,780
process ID is causing this I oh wait so

00:14:38,040 --> 00:14:42,840
it's a good idea to use pit start with a

00:14:39,780 --> 00:14:46,440
minus T switch and then get information

00:14:42,840 --> 00:14:52,820
okay in that case again the field file

00:14:46,440 --> 00:14:52,820
Vesta is causing these I or weights here

00:14:53,329 --> 00:15:00,589
so that is some information around the

00:14:57,350 --> 00:15:02,660
aero-sub system what is about the memory

00:15:00,589 --> 00:15:07,489
also with the memory you get information

00:15:02,660 --> 00:15:10,579
with pit start again you could see

00:15:07,489 --> 00:15:14,540
information not only about the memory

00:15:10,579 --> 00:15:18,579
being used but also about memories being

00:15:14,540 --> 00:15:21,999
accessed so depending on how many

00:15:18,579 --> 00:15:25,189
processes are running on your system and

00:15:21,999 --> 00:15:28,249
how your schedule is working it might

00:15:25,189 --> 00:15:30,999
happen that a process would like to

00:15:28,249 --> 00:15:33,799
access data which is not currently

00:15:30,999 --> 00:15:35,749
addressable in the memory so it might be

00:15:33,799 --> 00:15:38,119
the case that you enter my inner page

00:15:35,749 --> 00:15:41,420
fault on major page faults and this

00:15:38,119 --> 00:15:47,449
information can also be cured with pits

00:15:41,420 --> 00:15:49,100
that yeah most of the problems here

00:15:47,449 --> 00:15:52,999
caused by major page faults because

00:15:49,100 --> 00:15:58,339
major page faults means that the process

00:15:52,999 --> 00:16:00,649
really accesses the i/o subsystem

00:15:58,339 --> 00:16:11,360
because yeah the data is being swapped

00:16:00,649 --> 00:16:14,269
out from the main memory next tool again

00:16:11,360 --> 00:16:17,809
from the sister package is iostat it

00:16:14,269 --> 00:16:20,589
shows io substance autistics and gives

00:16:17,809 --> 00:16:23,540
us a CPU or device utilization report

00:16:20,589 --> 00:16:25,779
again without any argument it gives us

00:16:23,540 --> 00:16:28,009
the number since the last system startup

00:16:25,779 --> 00:16:30,919
if you're using a newer version you can

00:16:28,009 --> 00:16:34,610
skip that with you why option and there

00:16:30,919 --> 00:16:36,850
you will see that you are willing only

00:16:34,610 --> 00:16:39,829
accounting the current values here and

00:16:36,850 --> 00:16:44,029
for that I've prepared the first demo

00:16:39,829 --> 00:16:52,459
here so I'll exit my presentation going

00:16:44,029 --> 00:16:54,169
on to the live demo okay this works as

00:16:52,459 --> 00:16:57,709
you can see I've prepared for demos is

00:16:54,169 --> 00:17:00,350
the first one that I'll show to you so I

00:16:57,709 --> 00:17:03,220
find I hasta team on well yeah start

00:17:00,350 --> 00:17:05,709
iostat white after introduced to demo

00:17:03,220 --> 00:17:10,630
what we'll do to is

00:17:05,709 --> 00:17:15,970
I'll start a few tests running on CP

00:17:10,630 --> 00:17:17,500
yuko here and what we will also see as

00:17:15,970 --> 00:17:21,939
mentioned in the beginning and peace

00:17:17,500 --> 00:17:26,020
that and then a nice thing which I'll

00:17:21,939 --> 00:17:29,559
show to you later how the numbers of the

00:17:26,020 --> 00:17:32,740
tools can be influenced on another

00:17:29,559 --> 00:17:38,039
process is running here so we will see

00:17:32,740 --> 00:17:38,039
on the same co I'll do yes I'm cpu-bound

00:17:38,970 --> 00:17:47,710
some cpu-bound work here which it

00:17:44,980 --> 00:17:53,679
doesn't make too much sense but it works

00:17:47,710 --> 00:17:56,950
out quite well for the demo so demo one

00:17:53,679 --> 00:18:02,039
I have stood one just accounting number

00:17:56,950 --> 00:18:05,110
are we second four times we don't see

00:18:02,039 --> 00:18:10,330
many things here only idle time so I'll

00:18:05,110 --> 00:18:14,320
start in the second window the field

00:18:10,330 --> 00:18:17,169
test I'm going to do it again we see

00:18:14,320 --> 00:18:20,830
okay the system is doing something we

00:18:17,169 --> 00:18:24,610
see some I always hear seven percent

00:18:20,830 --> 00:18:28,390
learn percent going up here so we also

00:18:24,610 --> 00:18:31,179
see that this is not the number for a

00:18:28,390 --> 00:18:38,580
single CPU co about the average overall

00:18:31,179 --> 00:18:46,000
course to get more details I will use

00:18:38,580 --> 00:18:52,570
the MPS that command here so this is

00:18:46,000 --> 00:18:59,679
somehow nicer here we see one core is

00:18:52,570 --> 00:19:01,919
really having I awaits here ok this is

00:18:59,679 --> 00:19:01,919
fine

00:19:02,380 --> 00:19:12,640
so let's stop it again I can't have to

00:19:09,550 --> 00:19:15,670
look in our top command okay yeah that's

00:19:12,640 --> 00:19:19,450
been some tool running to hear k your

00:19:15,670 --> 00:19:21,190
car which is just a influencing my my

00:19:19,450 --> 00:19:24,670
demo here because I didn't want to have

00:19:21,190 --> 00:19:28,630
the the idle time with super sense here

00:19:24,670 --> 00:19:30,880
just check that out that's the the risk

00:19:28,630 --> 00:19:34,090
would be live demos so I expected that I

00:19:30,880 --> 00:19:37,950
have still some idle time here on the

00:19:34,090 --> 00:19:37,950
core but this doesn't work out right now

00:19:39,360 --> 00:19:46,570
okay no problem nevertheless i'll go

00:19:44,680 --> 00:19:51,690
back to the slides because i have the

00:19:46,570 --> 00:19:51,690
number here and in the right way so it's

00:19:54,600 --> 00:20:00,610
nice to see that Murphy's Law is also

00:19:57,040 --> 00:20:03,220
are working what I wanted to show is

00:20:00,610 --> 00:20:06,000
that they are all weight is some kind of

00:20:03,220 --> 00:20:08,610
idle time so we are seeing some I oh

00:20:06,000 --> 00:20:11,980
wait time it in the first place and

00:20:08,610 --> 00:20:14,620
having some idle time here and when I

00:20:11,980 --> 00:20:17,560
have the same test running on the same

00:20:14,620 --> 00:20:20,820
call we see that I 08 is going down to

00:20:17,560 --> 00:20:24,220
serious with a very same situation here

00:20:20,820 --> 00:20:29,470
the first place we only have the task

00:20:24,220 --> 00:20:33,490
doing the i/o work here we have oh wait

00:20:29,470 --> 00:20:35,950
and I'll time and we add another process

00:20:33,490 --> 00:20:39,040
doing some cpu pound work and we see

00:20:35,950 --> 00:20:41,860
that yeah we don't have any wait time

00:20:39,040 --> 00:20:44,560
anymore so although the other process is

00:20:41,860 --> 00:20:48,640
still doing the work normally and has

00:20:44,560 --> 00:20:53,080
it's a wait time this cpu core hasn't

00:20:48,640 --> 00:21:01,260
the the idle time here because yeah it's

00:20:53,080 --> 00:21:01,260
doing the B cpu-bound work here

00:21:08,120 --> 00:21:13,919
another thing is with our study of the

00:21:10,799 --> 00:21:17,279
possibility to use an expanded device

00:21:13,919 --> 00:21:20,519
utilization report then you'll take a

00:21:17,279 --> 00:21:23,009
look in the man page you see that for

00:21:20,519 --> 00:21:27,269
parallel processing I all subsystems

00:21:23,009 --> 00:21:30,690
like waiter ways and SSDs the number

00:21:27,269 --> 00:21:33,179
that you get off of the utilization from

00:21:30,690 --> 00:21:35,279
iostat might not reflect their

00:21:33,179 --> 00:21:37,169
performance limits so when you take the

00:21:35,279 --> 00:21:39,210
utilization numbers you get with the

00:21:37,169 --> 00:21:43,080
stool and here for example the case that

00:21:39,210 --> 00:21:46,110
we are seeing okay 94 dot four percent

00:21:43,080 --> 00:21:48,570
utilization to see we're getting 23,000

00:21:46,110 --> 00:21:52,080
apps in that case if I do a calculation

00:21:48,570 --> 00:21:54,330
and say okay I'll do a little bit more

00:21:52,080 --> 00:21:58,320
utilization four percent more I would

00:21:54,330 --> 00:22:00,749
expect to get 24,000 I ups here it's

00:21:58,320 --> 00:22:03,720
important to know to eat these numbers

00:22:00,749 --> 00:22:07,679
from iostat whenever you are using SSDs

00:22:03,720 --> 00:22:10,590
away the ways that this will not be the

00:22:07,679 --> 00:22:13,830
case because these devices are doing the

00:22:10,590 --> 00:22:19,379
i/o in parallel so when you have a

00:22:13,830 --> 00:22:22,139
higher utilization here going from 94 to

00:22:19,379 --> 00:22:25,559
99 percent you seen that case that we

00:22:22,139 --> 00:22:27,389
nearly doubled the I ops here so this is

00:22:25,559 --> 00:22:30,509
not a very good way to really get the

00:22:27,389 --> 00:22:37,320
utilization here because with the

00:22:30,509 --> 00:22:39,299
introduction of i/o things like SSDs and

00:22:37,320 --> 00:22:41,600
radio is which are doing the iom

00:22:39,299 --> 00:22:44,279
parallel you don't get the detailed

00:22:41,600 --> 00:22:47,159
numbers were the utilization here so

00:22:44,279 --> 00:22:49,049
this is not a very good indicator let's

00:22:47,159 --> 00:22:54,779
take a look what is a good indicator

00:22:49,049 --> 00:22:59,460
here for that we take a closer look at

00:22:54,779 --> 00:23:03,869
the i/o subsystem and looking on the

00:22:59,460 --> 00:23:08,279
linux storage stack diagram maybe who

00:23:03,869 --> 00:23:10,259
knows this diagram okay only one that's

00:23:08,279 --> 00:23:16,649
not too okay that's not the highest

00:23:10,259 --> 00:23:18,340
number here in this diagram we show how

00:23:16,649 --> 00:23:19,960
I owe access

00:23:18,340 --> 00:23:23,980
goes through the Linux kernel so going

00:23:19,960 --> 00:23:27,520
up from user processes into the block

00:23:23,980 --> 00:23:31,779
layer with block iOS and through steak

00:23:27,520 --> 00:23:34,090
able block clear targets like the apt

00:23:31,779 --> 00:23:36,190
and then you ate and the like and then

00:23:34,090 --> 00:23:39,130
going deeper down into the block layer

00:23:36,190 --> 00:23:42,730
with a all conventional I all schedules

00:23:39,130 --> 00:23:44,679
or nowadays also through the block and Q

00:23:42,730 --> 00:23:50,529
layer going down to the device driver

00:23:44,679 --> 00:23:54,090
and in the next step we'll take a closer

00:23:50,529 --> 00:24:00,210
look at these queues here and how we can

00:23:54,090 --> 00:24:04,179
monitor the numbers of iOS going through

00:24:00,210 --> 00:24:08,200
again we can use IO start here with

00:24:04,179 --> 00:24:11,399
different switches getting the average

00:24:08,200 --> 00:24:15,549
queue length and getting the average

00:24:11,399 --> 00:24:18,460
time for the woods being served so with

00:24:15,549 --> 00:24:22,649
these two numbers we get a good feeling

00:24:18,460 --> 00:24:26,309
how well our iOS system is performing so

00:24:22,649 --> 00:24:34,419
it's always good for for sure when you

00:24:26,309 --> 00:24:39,179
have more ayos in a queue while the time

00:24:34,419 --> 00:24:42,760
you need to to send the data doesn't

00:24:39,179 --> 00:24:44,500
increase very much so the good thing for

00:24:42,760 --> 00:24:47,230
all stood here is that you can take

00:24:44,500 --> 00:24:50,169
these columns I'll go to slides back

00:24:47,230 --> 00:24:53,110
here and we see in this report the

00:24:50,169 --> 00:24:56,049
average queue length and the average

00:24:53,110 --> 00:24:59,980
waiting time although in this case the

00:24:56,049 --> 00:25:04,450
average waiting time is nearly yeah 30

00:24:59,980 --> 00:25:09,370
times that we had before we see the

00:25:04,450 --> 00:25:11,440
queue length is about 40 to 50 times so

00:25:09,370 --> 00:25:15,070
we have a better performance here as we

00:25:11,440 --> 00:25:18,840
also see in the i opes but we have to

00:25:15,070 --> 00:25:22,320
take into account that in the first case

00:25:18,840 --> 00:25:26,500
the individual I ops have been served

00:25:22,320 --> 00:25:29,830
very much faster than we have them being

00:25:26,500 --> 00:25:31,910
served here so the latency was really

00:25:29,830 --> 00:25:35,180
not so much as in the second

00:25:31,910 --> 00:25:38,980
to always have to do French between okay

00:25:35,180 --> 00:25:41,990
how many i also want to make but how

00:25:38,980 --> 00:25:44,660
small should my latency p so it might be

00:25:41,990 --> 00:25:47,720
better depending on your application to

00:25:44,660 --> 00:25:51,800
choose not that much I ops but to have a

00:25:47,720 --> 00:25:53,780
lower latency here so this is always a

00:25:51,800 --> 00:25:58,060
thing which you have to balance and you

00:25:53,780 --> 00:26:01,160
have to to tune your i/o schedulers

00:25:58,060 --> 00:26:04,610
maybe the traditional io scheduler or

00:26:01,160 --> 00:26:07,340
maybe block mq work and also tune these

00:26:04,610 --> 00:26:16,430
parameters to influence your performance

00:26:07,340 --> 00:26:18,830
here so we are have covered for tools

00:26:16,430 --> 00:26:23,870
but the next tools won't take that much

00:26:18,830 --> 00:26:25,640
long so i'm still in time yet as we've

00:26:23,870 --> 00:26:27,860
seen there are many tools from assisted

00:26:25,640 --> 00:26:32,000
package which are used in the command

00:26:27,860 --> 00:26:35,000
line but depending on your preferences

00:26:32,000 --> 00:26:37,430
they aren't that easy to use every time

00:26:35,000 --> 00:26:39,500
so for everybody who likes colors and

00:26:37,430 --> 00:26:42,650
wants to use one single tool i can

00:26:39,500 --> 00:26:45,110
really recommend this that these that is

00:26:42,650 --> 00:26:48,020
a replacement for VMS that I all start

00:26:45,110 --> 00:26:51,740
is that and it combines these several

00:26:48,020 --> 00:26:54,140
classic tools it prints the matrix using

00:26:51,740 --> 00:26:56,360
colors and it also has a blog in concept

00:26:54,140 --> 00:27:01,550
so there are lots of plugins for

00:26:56,360 --> 00:27:04,610
different purposes these go from memory

00:27:01,550 --> 00:27:06,920
plugins up to for example different

00:27:04,610 --> 00:27:09,950
plugins for even mysql databases or the

00:27:06,920 --> 00:27:11,990
like so if you want to use one single

00:27:09,950 --> 00:27:14,690
tool take a look at these that try it

00:27:11,990 --> 00:27:18,350
out and if you happy with it insulin all

00:27:14,690 --> 00:27:21,730
your machines to really get the working

00:27:18,350 --> 00:27:21,730
out on a daily usage

00:27:23,079 --> 00:27:27,769
looking on the network interface mix it

00:27:25,759 --> 00:27:31,579
is a tool to to give your device

00:27:27,769 --> 00:27:35,629
logistics here it depends on your own

00:27:31,579 --> 00:27:37,849
the service how of newell run into

00:27:35,629 --> 00:27:41,269
networking problems are not for normal

00:27:37,849 --> 00:27:43,579
web services normally the network isn't

00:27:41,269 --> 00:27:47,059
the bottleneck but for storage systems

00:27:43,579 --> 00:27:49,009
it might be really a topic so take a

00:27:47,059 --> 00:27:51,709
look at you the utilization and the

00:27:49,009 --> 00:27:54,649
situation and also the drops here and if

00:27:51,709 --> 00:27:57,319
you are seeing numbers here take the

00:27:54,649 --> 00:28:02,179
next step and look into there are the

00:27:57,319 --> 00:28:09,229
processes so there's been the first

00:28:02,179 --> 00:28:12,019
round of tools regarding the thing do

00:28:09,229 --> 00:28:14,779
you collect history of your system

00:28:12,019 --> 00:28:17,659
performance data also a short question

00:28:14,779 --> 00:28:21,769
who collects data historical data of the

00:28:17,659 --> 00:28:24,259
system performance okay about sixty

00:28:21,769 --> 00:28:32,419
percent of expect which tools are you

00:28:24,259 --> 00:28:35,779
using for that ate up a tub moomin call

00:28:32,419 --> 00:28:38,029
it dear i want to tell you that cancer

00:28:35,779 --> 00:28:44,509
death in the collective talked just

00:28:38,029 --> 00:28:52,129
before okay a single chicks are that's

00:28:44,509 --> 00:28:57,229
good good idea to you shakti yeah yeah

00:28:52,129 --> 00:29:01,459
graphite is very good so we see many

00:28:57,229 --> 00:29:04,089
different tools and we all have the

00:29:01,459 --> 00:29:07,099
individual advantages and disadvantages

00:29:04,089 --> 00:29:09,469
i'm also happy to the third checks are

00:29:07,099 --> 00:29:11,089
because this is a thing who isn't known

00:29:09,469 --> 00:29:14,389
that everybody and this really a nice

00:29:11,089 --> 00:29:16,639
tool because it's set up in an easy way

00:29:14,389 --> 00:29:20,059
just depending on your distribution

00:29:16,639 --> 00:29:25,549
apt-get install sister and activate the

00:29:20,059 --> 00:29:28,969
cron job or yum install and if you do

00:29:25,549 --> 00:29:31,069
not want to dig somehow deeper you just

00:29:28,969 --> 00:29:33,139
install it and it collects the data for

00:29:31,069 --> 00:29:36,320
you every 10 minutes by default if you

00:29:33,139 --> 00:29:40,269
activate the cron job again the power

00:29:36,320 --> 00:29:43,279
from Brandon Greg and we see okay the

00:29:40,269 --> 00:29:48,529
system activity report as we see ya

00:29:43,279 --> 00:29:50,179
really collects lots of data here when

00:29:48,529 --> 00:29:51,950
you get this this data which is mainly

00:29:50,179 --> 00:29:54,230
the data we've also seen that we can

00:29:51,950 --> 00:29:58,429
view with the MS that I all start and

00:29:54,230 --> 00:30:04,130
the like we can query it later on and we

00:29:58,429 --> 00:30:06,110
can also view it graphically I ideally

00:30:04,130 --> 00:30:08,090
if you're having a senior and on the

00:30:06,110 --> 00:30:10,490
plug-in and if set up everything fine

00:30:08,090 --> 00:30:12,019
and they're using some some tool for

00:30:10,490 --> 00:30:14,659
your graphing you have this all in your

00:30:12,019 --> 00:30:17,299
single environment if you just want to

00:30:14,659 --> 00:30:21,159
take a short test you could also just

00:30:17,299 --> 00:30:24,710
use a tool like Casa which is java based

00:30:21,159 --> 00:30:27,860
and input the data here so for a first

00:30:24,710 --> 00:30:30,860
short test just install Sister Sister

00:30:27,860 --> 00:30:33,220
package and activate assa and collect

00:30:30,860 --> 00:30:36,379
the data here and if you like it I

00:30:33,220 --> 00:30:40,340
really recommend also tool to use the

00:30:36,379 --> 00:30:43,039
chicks are plugging them other

00:30:40,340 --> 00:30:46,039
possibilities as we also also hurt Cathy

00:30:43,039 --> 00:30:50,570
templates there for example some nice

00:30:46,039 --> 00:30:52,730
templates from from percona and here you

00:30:50,570 --> 00:30:55,190
can also use of a monitoring these

00:30:52,730 --> 00:30:57,529
things some plugins I've tested

00:30:55,190 --> 00:31:01,639
something for a cpu data for example

00:30:57,529 --> 00:31:05,470
here which is a little bit hard to do

00:31:01,639 --> 00:31:14,360
for every to also this our way um is

00:31:05,470 --> 00:31:18,110
good a good way to choose okay so that's

00:31:14,360 --> 00:31:21,279
it for the first round of the 30 minutes

00:31:18,110 --> 00:31:25,519
we'll have to give a little bit power to

00:31:21,279 --> 00:31:29,240
be in time we'll cover next tools for

00:31:25,519 --> 00:31:34,490
watching online top help everybody knows

00:31:29,240 --> 00:31:37,899
top nice tool it's on a Linux system and

00:31:34,490 --> 00:31:42,080
use new right way it's really nice thing

00:31:37,899 --> 00:31:44,590
you can use top in different variations

00:31:42,080 --> 00:31:48,320
as an online tool or in batch mode and

00:31:44,590 --> 00:31:49,610
by default you you have some overview at

00:31:48,320 --> 00:31:50,119
the top and then the detailed

00:31:49,610 --> 00:31:54,049
information

00:31:50,119 --> 00:31:55,279
asian then burn down what will you can

00:31:54,049 --> 00:31:58,939
recommend when you're encountering

00:31:55,279 --> 00:32:01,789
performance issues just on top life and

00:31:58,939 --> 00:32:03,889
try it out using the H button to get the

00:32:01,789 --> 00:32:07,009
detailed help for the individual things

00:32:03,889 --> 00:32:10,189
you can configure because yeah it really

00:32:07,009 --> 00:32:12,109
has the possibility to to show all the

00:32:10,189 --> 00:32:16,369
things which we've also seen with the

00:32:12,109 --> 00:32:22,059
other tools before so um just right out

00:32:16,369 --> 00:32:24,949
when you're listening to to a talk where

00:32:22,059 --> 00:32:27,379
maybe I'm here and you'll say ok it's

00:32:24,949 --> 00:32:29,989
not that fine it just everybody has the

00:32:27,379 --> 00:32:32,239
laptop open execute top press the H

00:32:29,989 --> 00:32:36,319
button and and just see what you can do

00:32:32,239 --> 00:32:38,569
here one thing is as also possible with

00:32:36,319 --> 00:32:40,909
the other tools the memory usage again

00:32:38,569 --> 00:32:46,699
here with a virtual memory for the

00:32:40,909 --> 00:32:50,989
process the reserved space and the

00:32:46,699 --> 00:32:52,339
shared memory it's always important to

00:32:50,989 --> 00:32:54,979
remember that this is not really the

00:32:52,339 --> 00:32:56,899
physical amount of data on not a single

00:32:54,979 --> 00:32:59,629
number of this is really the physical

00:32:56,899 --> 00:33:03,349
amount of data processes using because

00:32:59,629 --> 00:33:05,899
the first column the word column shows

00:33:03,349 --> 00:33:08,899
the total size which can be addressed

00:33:05,899 --> 00:33:13,009
which includes all of the things that

00:33:08,899 --> 00:33:18,529
are for example in a shape library or

00:33:13,009 --> 00:33:20,509
not already mapped data the resident

00:33:18,529 --> 00:33:23,739
memo is how many blocks are Willie

00:33:20,509 --> 00:33:26,869
allocated and mapped to address space

00:33:23,739 --> 00:33:28,879
but if you want to get the wheel number

00:33:26,869 --> 00:33:31,099
of space you have to somehow substrate

00:33:28,879 --> 00:33:33,079
the thing from the shared memory for

00:33:31,099 --> 00:33:37,459
shared libraries which are also used by

00:33:33,079 --> 00:33:40,999
other processes so yeah when you want to

00:33:37,459 --> 00:33:45,979
dig deeper in there just take it deeper

00:33:40,999 --> 00:33:49,939
view I already mentioned there they each

00:33:45,979 --> 00:33:54,589
key to get the help what is important is

00:33:49,939 --> 00:33:59,689
the the F key you can toggle which fills

00:33:54,589 --> 00:34:02,929
you will see also change the sorting you

00:33:59,689 --> 00:34:04,270
can use you to see process for a

00:34:02,929 --> 00:34:07,810
different user

00:34:04,270 --> 00:34:11,660
que toca lipids are doing as a patent

00:34:07,810 --> 00:34:13,310
especially these two also very helpful

00:34:11,660 --> 00:34:15,320
menya encountering some issues with the

00:34:13,310 --> 00:34:18,710
process and a live system and say okay I

00:34:15,320 --> 00:34:20,630
want to to change the priority of the

00:34:18,710 --> 00:34:24,200
process just weaned acid and then you

00:34:20,630 --> 00:34:27,590
have more time to internalize this in

00:34:24,200 --> 00:34:29,480
detail but keep in mind our top can miss

00:34:27,590 --> 00:34:31,970
short living processes it's updated

00:34:29,480 --> 00:34:34,850
every second and if you're unlucky you

00:34:31,970 --> 00:34:37,640
might not catch a process and the next

00:34:34,850 --> 00:34:41,179
thing is okay when I have a high cpu

00:34:37,640 --> 00:34:43,429
usage what can I do about that and this

00:34:41,179 --> 00:34:49,190
this is the point where the choice in

00:34:43,429 --> 00:34:53,240
part starts also here is a tool for

00:34:49,190 --> 00:34:55,370
everybody who loves colors H top nearly

00:34:53,240 --> 00:35:03,080
the same information here but

00:34:55,370 --> 00:35:07,280
highlighted with colors io top also from

00:35:03,080 --> 00:35:13,430
the assisted packages is a simple top

00:35:07,280 --> 00:35:16,540
like IO monitor and can be used to see

00:35:13,430 --> 00:35:22,160
ok with which process is causing I oh

00:35:16,540 --> 00:35:23,690
and for bandwidth life usage I've also

00:35:22,160 --> 00:35:25,520
some tools here network second week

00:35:23,690 --> 00:35:29,990
command where you can see ok which

00:35:25,520 --> 00:35:33,140
processes are using my network here so

00:35:29,990 --> 00:35:36,850
we've been a little bit fast and now are

00:35:33,140 --> 00:35:36,850
with 13 of 20 tools here

00:35:40,770 --> 00:35:45,750
so the bell says it's time for the third

00:35:43,560 --> 00:35:49,110
part of the talk about tracing and this

00:35:45,750 --> 00:35:53,250
is the pointer we can we take a deeper

00:35:49,110 --> 00:35:56,400
look at similar processes so what is

00:35:53,250 --> 00:35:59,430
tracing what is what is it about how can

00:35:56,400 --> 00:36:03,540
i use tracing and profiling it's mainly

00:35:59,430 --> 00:36:06,180
to get a view about usage

00:36:03,540 --> 00:36:12,360
characteristics and count specific

00:36:06,180 --> 00:36:14,010
samples and events and count objects the

00:36:12,360 --> 00:36:16,230
colonel is involved here so you have to

00:36:14,010 --> 00:36:18,030
activate it to use it and on the next

00:36:16,230 --> 00:36:23,370
slides we will focus on FDA's

00:36:18,030 --> 00:36:26,730
performance on the perf tool f twist is

00:36:23,370 --> 00:36:29,490
part of the Linux kernel since 2008 so

00:36:26,730 --> 00:36:31,710
for quite some years it helps you to see

00:36:29,490 --> 00:36:34,920
what's going on inside the colonel and

00:36:31,710 --> 00:36:37,620
it allows you to you have to trace

00:36:34,920 --> 00:36:41,190
events the only thing that you need is

00:36:37,620 --> 00:36:47,670
that you have the debug FS activated

00:36:41,190 --> 00:36:55,160
here so this is the time for a second

00:36:47,670 --> 00:36:55,160
tema so I'll have to switch you again

00:37:09,079 --> 00:37:15,270
surf created a short script here what we

00:37:12,450 --> 00:37:18,089
are doing here you ever see okay with a

00:37:15,270 --> 00:37:23,520
bash script we'll look where the debug

00:37:18,089 --> 00:37:26,220
file system is located and then we echo

00:37:23,520 --> 00:37:28,349
our pit to develop file system to

00:37:26,220 --> 00:37:30,660
tracing to set the pit that we want to

00:37:28,349 --> 00:37:32,520
trace so that we say oh CLE want to

00:37:30,660 --> 00:37:36,240
trace our script a'dreea running right

00:37:32,520 --> 00:37:38,160
now we are looking for the functions so

00:37:36,240 --> 00:37:39,480
the current ways I should monitor the

00:37:38,160 --> 00:37:42,559
functions the kernel functions were

00:37:39,480 --> 00:37:45,059
using and then we execute the script

00:37:42,559 --> 00:37:47,369
normally to trace me script with allowed

00:37:45,059 --> 00:37:49,549
to specify the command in that case I

00:37:47,369 --> 00:38:02,160
just want to run the date command and

00:37:49,549 --> 00:38:04,230
yeah we'll just do that right now okay

00:38:02,160 --> 00:38:06,359
we see the date command worked so we're

00:38:04,230 --> 00:38:13,589
you seeing date and time we're still in

00:38:06,359 --> 00:38:17,040
time in the top and now we want to take

00:38:13,589 --> 00:38:19,589
a look at the trace so my question to

00:38:17,040 --> 00:38:21,869
you what's your expectation how many

00:38:19,589 --> 00:38:24,900
function calls will be fine with no

00:38:21,869 --> 00:38:35,270
choice how many lines any ideas date

00:38:24,900 --> 00:38:41,790
command simple command any ideas pardon

00:38:35,270 --> 00:38:44,010
loads a lot of hello a lot of is a good

00:38:41,790 --> 00:38:47,400
idea year a lot of is a good idea so

00:38:44,010 --> 00:38:52,369
let's ok let's open it with COK lines 1

00:38:47,400 --> 00:38:55,740
to 28 it I've called les minus capital M

00:38:52,369 --> 00:39:00,690
so if i'll go down it takes some time

00:38:55,740 --> 00:39:02,250
and we see ok 21,000 choices here so for

00:39:00,690 --> 00:39:06,569
everybody who expected it's an easy

00:39:02,250 --> 00:39:11,190
thing to get with tracing of a thing

00:39:06,569 --> 00:39:13,770
like and web server so yeah it's really

00:39:11,190 --> 00:39:20,220
a topic where you can start to work on

00:39:13,770 --> 00:39:23,430
and then so we dive some healthy / but

00:39:20,220 --> 00:39:26,220
the good thing is when you have all when

00:39:23,430 --> 00:39:28,170
you want more information on that just

00:39:26,220 --> 00:39:30,799
watch out for the murders presentations

00:39:28,170 --> 00:39:33,900
by Brent and Craig nearly has great

00:39:30,799 --> 00:39:36,619
starting points for you when you want to

00:39:33,900 --> 00:39:36,619
get deeper here

00:39:43,720 --> 00:39:56,390
okay so as you've seen you have the

00:39:53,410 --> 00:39:59,540
sample here so we find it in the slides

00:39:56,390 --> 00:40:01,370
later on there too and we can show the

00:39:59,540 --> 00:40:05,270
trace as you've seen the less command

00:40:01,370 --> 00:40:08,000
you can also use the trace command to

00:40:05,270 --> 00:40:12,310
nearly the same thing so watch out on

00:40:08,000 --> 00:40:14,870
this if you want to see details on here

00:40:12,310 --> 00:40:17,870
at the end of the talk will see flame

00:40:14,870 --> 00:40:20,570
graphs we have the possibility to see ya

00:40:17,870 --> 00:40:27,260
the information in more readable way for

00:40:20,570 --> 00:40:33,970
human beings the next thing that you can

00:40:27,260 --> 00:40:38,800
use performance and the prof tool it's a

00:40:33,970 --> 00:40:41,510
tool or a set of tools to collect

00:40:38,800 --> 00:40:43,550
performance counters for linux they've

00:40:41,510 --> 00:40:46,160
seen a lot of updates with Colonel for

00:40:43,550 --> 00:40:48,890
but dot one and it allows you to monitor

00:40:46,160 --> 00:40:51,290
a cpu performance counters 28 points and

00:40:48,890 --> 00:40:54,860
some different props that like k probes

00:40:51,290 --> 00:40:56,750
and you probes for debian and ubuntu

00:40:54,860 --> 00:41:02,800
you'll find the tools in the linux tools

00:40:56,750 --> 00:41:06,860
common takoj going to take a look here

00:41:02,800 --> 00:41:11,030
the possible list of counters we can

00:41:06,860 --> 00:41:13,250
monitor is about two thousand with a lot

00:41:11,030 --> 00:41:15,380
of twists points and a lot of variables

00:41:13,250 --> 00:41:18,620
we can monitor here and the nice thing

00:41:15,380 --> 00:41:21,710
is that not only these generic counters

00:41:18,620 --> 00:41:26,000
can be used you also can take advantage

00:41:21,710 --> 00:41:29,330
of a highly dependent numbers here so

00:41:26,000 --> 00:41:32,090
for example if you're using a special

00:41:29,330 --> 00:41:37,760
cpu architecture there's most of the

00:41:32,090 --> 00:41:40,130
time i set of counters for a cpu

00:41:37,760 --> 00:41:43,910
architecture for example intel has

00:41:40,130 --> 00:41:46,900
documentation for all their wore masks

00:41:43,910 --> 00:41:50,210
and for example if you want to collect

00:41:46,900 --> 00:41:52,370
the last level cache misses for this

00:41:50,210 --> 00:41:55,740
Intel Architecture you can do that right

00:41:52,370 --> 00:42:00,050
here so for everybody who is doing

00:41:55,740 --> 00:42:03,660
things like super computing and want to

00:42:00,050 --> 00:42:06,810
wants to to get the last hit of

00:42:03,660 --> 00:42:13,140
performance you can use these counters

00:42:06,810 --> 00:42:15,810
here so for that we can use the trace

00:42:13,140 --> 00:42:18,590
functionality of perf and I've here an

00:42:15,810 --> 00:42:21,360
example where a hello welcome and

00:42:18,590 --> 00:42:25,950
collects the number of Cisco's it it

00:42:21,360 --> 00:42:29,670
executes when it's one to get the summer

00:42:25,950 --> 00:42:32,250
week you can use perf start command when

00:42:29,670 --> 00:42:33,660
you have a trace here now when you're

00:42:32,250 --> 00:42:35,430
tracing a comment here you see the

00:42:33,660 --> 00:42:38,670
number for example of context switches

00:42:35,430 --> 00:42:41,130
instructions instructions per cycle so

00:42:38,670 --> 00:42:43,830
whenever you want to compare algorithms

00:42:41,130 --> 00:42:54,270
and your environment you can use these

00:42:43,830 --> 00:42:55,680
tools here using perv while executing a

00:42:54,270 --> 00:43:00,900
process the one thing the other thing is

00:42:55,680 --> 00:43:03,150
to record the data when you execute the

00:43:00,900 --> 00:43:07,200
process and then have the possibility to

00:43:03,150 --> 00:43:08,910
really set filters on the things that

00:43:07,200 --> 00:43:12,050
you want to see so you can use the perf

00:43:08,910 --> 00:43:15,869
tool the record option with minus a two

00:43:12,050 --> 00:43:18,450
hour workout all CPUs and the minus

00:43:15,869 --> 00:43:23,280
three options to enable call graphs

00:43:18,450 --> 00:43:25,320
which we'll see later on yeah and and

00:43:23,280 --> 00:43:27,500
then you can display the reported perv

00:43:25,320 --> 00:43:31,380
we cut and here we see again an example

00:43:27,500 --> 00:43:33,270
while doing some white test with the D

00:43:31,380 --> 00:43:35,580
on an encrypted file system and here we

00:43:33,270 --> 00:43:37,830
see ok when we showed them afterwards

00:43:35,580 --> 00:43:40,200
the whip what we see that we amount of

00:43:37,830 --> 00:43:44,760
CPU time has been spent for encrypting

00:43:40,200 --> 00:43:48,150
the data so we can expect I really hope

00:43:44,760 --> 00:43:52,200
that the encryption with us something at

00:43:48,150 --> 00:43:54,600
least need some cpu time so yeah it

00:43:52,200 --> 00:43:58,020
seems that encrypting is working here

00:43:54,600 --> 00:44:00,060
and in that case we have a DD for one

00:43:58,020 --> 00:44:02,700
megabyte from the facility of block

00:44:00,060 --> 00:44:05,930
device and the time spending and Cisco's

00:44:02,700 --> 00:44:05,930
and kernel functions

00:44:07,589 --> 00:44:13,569
yet perf tools again there by Brendan

00:44:10,749 --> 00:44:18,730
quack and they are really nice and

00:44:13,569 --> 00:44:20,740
simple bash script he mentions that are

00:44:18,730 --> 00:44:24,329
mostly quick hack sweetie warnings for

00:44:20,740 --> 00:44:28,240
every tool you are using but to get a

00:44:24,329 --> 00:44:30,430
some idea how this tool work i'll show

00:44:28,240 --> 00:44:34,269
you a demo with cash start where we see

00:44:30,430 --> 00:44:39,249
ok linux page get cash hits and missed

00:44:34,269 --> 00:44:51,420
statistics so that will be demo number

00:44:39,249 --> 00:44:51,420
three key demo sweetness

00:45:04,030 --> 00:45:11,870
okay so we see when this demo I'll just

00:45:07,220 --> 00:45:17,140
execute a cash stat and I can take a

00:45:11,870 --> 00:45:19,670
look also in cash at cash that Thun FS

00:45:17,140 --> 00:45:25,900
okay so we see okay the colors are not

00:45:19,670 --> 00:45:28,640
the best that it's a bash script and

00:45:25,900 --> 00:45:37,420
that it's giving us different number C

00:45:28,640 --> 00:45:37,420
but we'll just execute then we see it so

00:45:39,040 --> 00:45:45,980
okay it out put it every second so we

00:45:43,280 --> 00:45:48,680
still take a little bit up here we see

00:45:45,980 --> 00:45:50,090
okay we have only a few cash hits so I'm

00:45:48,680 --> 00:45:53,950
running the demo I'm wearing the

00:45:50,090 --> 00:46:02,810
presentation here so not much to do here

00:45:53,950 --> 00:46:07,730
I'll go to the second window and now I

00:46:02,810 --> 00:46:13,730
you have the D and iso image and y de to

00:46:07,730 --> 00:46:16,580
death knell take some time we see ok

00:46:13,730 --> 00:46:19,940
I've having 218 megabits here two

00:46:16,580 --> 00:46:22,370
seconds and okay yeah as tool is

00:46:19,940 --> 00:46:29,930
continuing to run we see okay we have

00:46:22,370 --> 00:46:32,030
here education mrs. when I out put the

00:46:29,930 --> 00:46:35,420
Freak come on in the sea ok I've here

00:46:32,030 --> 00:46:37,820
more cash being used and when I do the

00:46:35,420 --> 00:46:45,500
same thing again what is your

00:46:37,820 --> 00:46:47,600
expectation here for the cash mrs. 0

00:46:45,500 --> 00:46:52,570
yeah 0 hopefully hopefully this thing

00:46:47,600 --> 00:46:55,250
will work ok it's fast that we have ok a

00:46:52,570 --> 00:46:58,700
good performance for an SSD for consumer

00:46:55,250 --> 00:47:02,570
SSD but we will see ok we have only

00:46:58,700 --> 00:47:05,570
within one secondary port and not with

00:47:02,570 --> 00:47:10,430
cash mrs. we have see rakesh mrs. pot we

00:47:05,570 --> 00:47:13,640
have on the same time ok we have 148,000

00:47:10,430 --> 00:47:17,410
cash hits so we see ok

00:47:13,640 --> 00:47:23,690
hopefully this demo at least worked and

00:47:17,410 --> 00:47:25,789
yeah I'll try some different thing here

00:47:23,690 --> 00:47:29,480
too so it apart you have the possibility

00:47:25,789 --> 00:47:33,619
to to drop the caches so using the proc

00:47:29,480 --> 00:47:39,640
file system when we take a look okay we

00:47:33,619 --> 00:47:54,920
have here again the cash being used and

00:47:39,640 --> 00:47:58,539
now I just remove that by by using echo

00:47:54,920 --> 00:48:00,890
three to proxies vm drop caches and

00:47:58,539 --> 00:48:02,779
execute three minutes I'm again okay we

00:48:00,890 --> 00:48:04,970
see I've only my presentation the stuff

00:48:02,779 --> 00:48:08,119
i will need in medication gala things

00:48:04,970 --> 00:48:16,039
are gone again so if i do the reading

00:48:08,119 --> 00:48:28,309
again here we will see that we have then

00:48:16,039 --> 00:48:32,569
hopefully again the cache misses oh ok

00:48:28,309 --> 00:48:35,299
ok ok thank you that's that's a bad

00:48:32,569 --> 00:48:39,109
thing that i don't have the the same me

00:48:35,299 --> 00:48:40,849
return for the presentation are using to

00:48:39,109 --> 00:48:47,509
present the council from Libya office

00:48:40,849 --> 00:48:55,789
and this is fine and okay that's okay so

00:48:47,509 --> 00:48:58,640
right now again who ok so Damon number

00:48:55,789 --> 00:49:01,599
three with a little help by my friends

00:48:58,640 --> 00:49:01,599
it worked out thank you

00:49:04,780 --> 00:49:13,460
so we've covered 19 tools after 15

00:49:09,500 --> 00:49:18,730
minutes that's good so last tool flame

00:49:13,460 --> 00:49:22,400
graphs who knows flame graphs okay three

00:49:18,730 --> 00:49:23,630
good okay am I can can can show

00:49:22,400 --> 00:49:25,430
something interesting for most of you

00:49:23,630 --> 00:49:27,380
but through the three of you I think

00:49:25,430 --> 00:49:30,020
most of the things have been already

00:49:27,380 --> 00:49:34,670
known to you i hope you didn't try to

00:49:30,020 --> 00:49:37,460
talk to okay so what what I've willing

00:49:34,670 --> 00:49:39,400
girls about playing us a simple

00:49:37,460 --> 00:49:43,910
visualization on how is justice at least

00:49:39,400 --> 00:49:46,550
imputed among the code and if I take an

00:49:43,910 --> 00:49:48,980
example of my day I am processing some

00:49:46,550 --> 00:49:51,109
emails i'm doing some back fixing on a

00:49:48,980 --> 00:49:55,220
COK somebody has reported a buck I'll

00:49:51,109 --> 00:49:57,290
just fix it I'll do some verification of

00:49:55,220 --> 00:50:00,560
issues I do hacking from new features

00:49:57,290 --> 00:50:02,660
with testing and every time I'm not here

00:50:00,560 --> 00:50:05,390
the conference when i'm having dinner i

00:50:02,660 --> 00:50:11,950
also have to took some cooking but this

00:50:05,390 --> 00:50:14,890
won't be true today so how can we use

00:50:11,950 --> 00:50:18,130
fingers here again a nice demo how this

00:50:14,890 --> 00:50:18,130
works out

00:50:29,180 --> 00:50:39,810
yeah it's only one one thing here we

00:50:36,510 --> 00:50:42,840
seem how to use the tools at the portal

00:50:39,810 --> 00:50:46,110
will record when we do a DD of one

00:50:42,840 --> 00:50:50,130
megabyte just from left 02 to test

00:50:46,110 --> 00:50:52,650
punked data will move then the file and

00:50:50,130 --> 00:50:55,200
using perl script to calculate the flame

00:50:52,650 --> 00:50:58,140
graph here and then generate an SVG

00:50:55,200 --> 00:51:06,480
image here so I'll execute this thing

00:50:58,140 --> 00:51:10,190
here okay it should have worked so we're

00:51:06,480 --> 00:51:16,080
singing having an SVG image and

00:51:10,190 --> 00:51:19,710
executing Firefox ok it show is shown

00:51:16,080 --> 00:51:23,250
anyone wind of course but i hope to fix

00:51:19,710 --> 00:51:26,460
that yeah fine ok and the nice thing

00:51:23,250 --> 00:51:28,230
that we're seeing here with all the big

00:51:26,460 --> 00:51:30,990
amount of trace information we've seen

00:51:28,230 --> 00:51:33,300
with the 21 or 24,000 lines of

00:51:30,990 --> 00:51:36,630
information here we'll see ok when we

00:51:33,300 --> 00:51:39,810
are doing this command we see how our

00:51:36,630 --> 00:51:44,490
resources how our CPU time has been

00:51:39,810 --> 00:51:47,540
spent for that and he see ok 44 the dt

00:51:44,490 --> 00:51:50,400
which is going over this whole thing

00:51:47,540 --> 00:51:53,610
we'll see ok we have the encrypted I

00:51:50,400 --> 00:51:56,280
system function here for a encrypted

00:51:53,610 --> 00:52:00,270
file system and ok they seem ok where

00:51:56,280 --> 00:52:01,710
the data bytes 4x4 file system has been

00:52:00,270 --> 00:52:04,650
down here and the nice thing here is

00:52:01,710 --> 00:52:08,130
that you really can click on the things

00:52:04,650 --> 00:52:10,410
and get some deeper knowledge you see

00:52:08,130 --> 00:52:13,320
also this number of sample the

00:52:10,410 --> 00:52:17,790
percentage information here so this SVG

00:52:13,320 --> 00:52:20,700
image is really nice thing to get yes

00:52:17,790 --> 00:52:22,170
somehow readable information here so

00:52:20,700 --> 00:52:25,110
whenever you have some processes which

00:52:22,170 --> 00:52:29,190
you want to analyze don't take the whole

00:52:25,110 --> 00:52:33,860
trace take the flame graph and this is

00:52:29,190 --> 00:52:33,860
for sure a good idea

00:52:34,080 --> 00:52:45,010
yeah the script most of the scripts are

00:52:40,420 --> 00:52:48,040
by Brent and Craig so yeah you will find

00:52:45,010 --> 00:52:49,720
the links in the slides like for example

00:52:48,040 --> 00:52:51,550
the thing with the cache misses and

00:52:49,720 --> 00:52:54,550
stuff like that the perf tough tools and

00:52:51,550 --> 00:53:04,050
all the things yeah flame graph is also

00:52:54,550 --> 00:53:04,050
by friends Gary Greg ok so any questions

00:53:11,260 --> 00:53:27,770
okay one question I already answered

00:53:13,460 --> 00:53:33,920
right now okay yeah hi I was wondering

00:53:27,770 --> 00:53:36,619
um some time ago i've i've seen a new

00:53:33,920 --> 00:53:41,930
tool that's came up on on twitter or elk

00:53:36,619 --> 00:53:45,410
not really a lot of buzz cystic which is

00:53:41,930 --> 00:53:48,589
suppose it's also a similar tool but

00:53:45,410 --> 00:53:51,589
which hooks up in the linux kernel and

00:53:48,589 --> 00:53:55,339
also it's more or less i think an

00:53:51,589 --> 00:53:58,430
all-in-one kind of tool so also does

00:53:55,339 --> 00:53:59,720
things like else off as trace and all

00:53:58,430 --> 00:54:02,660
these things i was wondering if you've

00:53:59,720 --> 00:54:06,079
looked into that and what your thoughts

00:54:02,660 --> 00:54:08,930
were about unfortunately up to now not

00:54:06,079 --> 00:54:11,599
but if you have some minutes left I'd

00:54:08,930 --> 00:54:14,299
like to talk about that and to take a

00:54:11,599 --> 00:54:16,460
look into that because mirar so much

00:54:14,299 --> 00:54:18,500
tools around and every to elicit

00:54:16,460 --> 00:54:21,260
advantage and disadvantage always good

00:54:18,500 --> 00:54:23,900
to get an idea about mutual so if have

00:54:21,260 --> 00:54:26,000
some time because all the all the all

00:54:23,900 --> 00:54:28,880
the other tools are pretty much followed

00:54:26,000 --> 00:54:31,220
a the UNIX philosophy of concentrate do

00:54:28,880 --> 00:54:34,270
one thing well and have different

00:54:31,220 --> 00:54:37,730
toolings for ya the appropriate job but

00:54:34,270 --> 00:54:39,980
this one seems to be interesting yes and

00:54:37,730 --> 00:54:45,859
it's called sisters they cure cystic

00:54:39,980 --> 00:54:49,690
okay thank you okay if there are any

00:54:45,859 --> 00:54:52,970
more questions later on you can find me

00:54:49,690 --> 00:54:55,640
up to the evening in the coffee breaks

00:54:52,970 --> 00:55:00,260
and also at the Thomas Coyne post right

00:54:55,640 --> 00:55:02,470
here so yeah thank you for listening to

00:55:00,260 --> 00:55:02,470
the talk

00:55:04,030 --> 00:55:06,090

YouTube URL: https://www.youtube.com/watch?v=VYkkPGKvTjg


