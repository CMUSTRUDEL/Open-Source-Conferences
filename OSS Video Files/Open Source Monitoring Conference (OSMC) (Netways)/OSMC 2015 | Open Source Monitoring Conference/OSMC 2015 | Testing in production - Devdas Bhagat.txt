Title: OSMC 2015 | Testing in production - Devdas Bhagat
Publication date: 2015-11-26
Playlist: OSMC 2015 | Open Source Monitoring Conference
Description: 
	For most ecommerce companies, software is not the final deliverable product. It is a research tool, to determine what customers will pay for. To be able to get good data from software, monitoring and analytics must be built into the system. Alerting must come from business requirements and be based on application generated data.
In the traditional operations world, we monitor what is easy, and avoid monitoring that which is difficult. This talk is an attempt to show people that monitoring must be driven by metrics from the CxO office, and then potentially involve technical metrics if needed.
This talk explains why functional and business level monitoring is crucial. We also cover the tradeoffs from a DTAP model to continuous deployment. There will be a brief introduction to a couple of useful monitoring tools for functional monitoring. No special technical skills are expected of the audience, but having a general overview of the monitoring world is a good thing. This talk is not limited to ecommerce companies, but is most applicable to that environment.
Captions: 
	00:00:09,040 --> 00:00:14,650
all right welcome everyone back from

00:00:13,610 --> 00:00:16,320
lunch

00:00:14,650 --> 00:00:22,110
the

00:00:16,320 --> 00:00:25,619
stalk is from Devdas baggert but before

00:00:22,110 --> 00:00:29,700
he start I will have to inform you about

00:00:25,619 --> 00:00:35,360
the Thomas crane competition or yeah

00:00:29,700 --> 00:00:42,030
the SSDs or you can still attend to the

00:00:35,360 --> 00:00:47,250
SSDs winning situation till sixteen

00:00:42,030 --> 00:00:51,450
thirty so yeah if someone wants to win a

00:00:47,250 --> 00:00:57,180
SSD he had to still have the chance to

00:00:51,450 --> 00:01:01,620
so yeah that's all the information let's

00:00:57,180 --> 00:01:04,050
Hank's all right so this nice little

00:01:01,620 --> 00:01:06,450
quote I have a test network came up at

00:01:04,050 --> 00:01:08,640
DevOps today's Amsterdam while me and

00:01:06,450 --> 00:01:11,430
Andres who were we were working together

00:01:08,640 --> 00:01:12,810
booking at that time and we ended up

00:01:11,430 --> 00:01:15,000
going and saying whoa

00:01:12,810 --> 00:01:17,100
we were joking around at the back of a

00:01:15,000 --> 00:01:19,110
room in it because it was a testing talk

00:01:17,100 --> 00:01:21,479
and people who are speaking about oh you

00:01:19,110 --> 00:01:23,100
need to have all this stuff unit tests

00:01:21,479 --> 00:01:25,640
and production and pre-production and

00:01:23,100 --> 00:01:28,320
we're like we don't do any of that and

00:01:25,640 --> 00:01:33,000
it turns out we have better obtained and

00:01:28,320 --> 00:01:34,799
this other company does so let's me this

00:01:33,000 --> 00:01:35,310
the whole thing came from and we like

00:01:34,799 --> 00:01:38,880
him

00:01:35,310 --> 00:01:41,970
there must be something so the hard part

00:01:38,880 --> 00:01:43,619
in any business is all big data brings

00:01:41,970 --> 00:01:45,420
it really to the fore and as you

00:01:43,619 --> 00:01:47,759
mentioned earlier if you have a lot of

00:01:45,420 --> 00:01:50,820
metrics you need to figure out what the

00:01:47,759 --> 00:01:52,680
right questions to ask are if because

00:01:50,820 --> 00:01:54,090
you can you have all the data now you

00:01:52,680 --> 00:01:57,149
need to figure out what to do with it

00:01:54,090 --> 00:01:58,710
well what's you have correlations what

00:01:57,149 --> 00:02:00,600
can you do do you have is this an animal

00:01:58,710 --> 00:02:02,880
is this normal is this dependent

00:02:00,600 --> 00:02:07,320
behavior who the hell knows right

00:02:02,880 --> 00:02:08,729
this simply too much data to ask so hard

00:02:07,320 --> 00:02:12,209
questions in business what do you know

00:02:08,729 --> 00:02:13,980
do I know why customers are buying do I

00:02:12,209 --> 00:02:16,260
know that something is being sold or do

00:02:13,980 --> 00:02:18,570
I not know that is being sold how much

00:02:16,260 --> 00:02:21,060
visibility do I have in my into my

00:02:18,570 --> 00:02:23,130
production environment especially in

00:02:21,060 --> 00:02:25,889
terms of if you think what does the

00:02:23,130 --> 00:02:27,930
business care about what does your CFO

00:02:25,889 --> 00:02:30,180
care about what does your CEO care about

00:02:27,930 --> 00:02:32,790
nobody cares about metrics like

00:02:30,180 --> 00:02:35,430
CPU load disk usage they do care if

00:02:32,790 --> 00:02:37,620
things go down but as long as those

00:02:35,430 --> 00:02:40,439
things are up and in budget it doesn't

00:02:37,620 --> 00:02:43,469
matter you write software to deliver a

00:02:40,439 --> 00:02:44,939
service it is not you're nobody's

00:02:43,469 --> 00:02:47,400
writing software just for the sake of

00:02:44,939 --> 00:02:49,040
writing software right well unless you

00:02:47,400 --> 00:02:52,170
are doing it as a hobby

00:02:49,040 --> 00:02:55,409
in which case more power to you then the

00:02:52,170 --> 00:02:57,870
harder one is what do you not know so

00:02:55,409 --> 00:03:00,000
well everybody has blind spots you don't

00:02:57,870 --> 00:03:01,739
know why people are doing stuff you

00:03:00,000 --> 00:03:03,780
don't know if you change something what

00:03:01,739 --> 00:03:06,540
will happen we know that we have a

00:03:03,780 --> 00:03:09,780
system that kind of is lurching along

00:03:06,540 --> 00:03:11,970
but hey who the hell knows what is a

00:03:09,780 --> 00:03:14,760
white is lurching along can we make it

00:03:11,970 --> 00:03:17,189
better can we make it worse and then the

00:03:14,760 --> 00:03:21,959
National seal is what do you not know

00:03:17,189 --> 00:03:24,060
that you don't know you because this is

00:03:21,959 --> 00:03:27,659
going to come and kill you and you have

00:03:24,060 --> 00:03:29,969
no clue what it was at one point hosting

00:03:27,659 --> 00:03:31,709
companies were big then there was this

00:03:29,969 --> 00:03:34,099
little company called Amazon which

00:03:31,709 --> 00:03:37,370
started its virtualization thing and

00:03:34,099 --> 00:03:40,319
everybody laughed at it and today

00:03:37,370 --> 00:03:42,599
hardware vendors are crying because

00:03:40,319 --> 00:03:44,129
nobody there then nobody's really buying

00:03:42,599 --> 00:03:46,560
the hardware any longer everybody's

00:03:44,129 --> 00:03:48,120
running on Amazon except some companies

00:03:46,560 --> 00:03:50,790
like booking and Spotify which still buy

00:03:48,120 --> 00:03:54,810
a lot of hardware but in terms of sheer

00:03:50,790 --> 00:03:57,840
numbers Amazon dominates the book market

00:03:54,810 --> 00:03:59,970
Amazon Facebook Google and those are

00:03:57,840 --> 00:04:01,379
simply too big numbers to ignore and

00:03:59,970 --> 00:04:05,099
they are big enough to order their own

00:04:01,379 --> 00:04:06,930
out custom hardware there you go

00:04:05,099 --> 00:04:09,620
suddenly in the environment has changed

00:04:06,930 --> 00:04:12,870
and you don't know what hit you

00:04:09,620 --> 00:04:14,489
OpenStack same issue I think lots of

00:04:12,870 --> 00:04:16,320
people are still saying they'll use

00:04:14,489 --> 00:04:19,500
OpenStack but it's still being driven by

00:04:16,320 --> 00:04:23,340
vendors not so much by community users

00:04:19,500 --> 00:04:25,050
are voting with their feet another

00:04:23,340 --> 00:04:27,810
favorite topic for any dev of today

00:04:25,050 --> 00:04:30,659
string feedback loops how fast can you

00:04:27,810 --> 00:04:34,380
learn and how quickly can you learn

00:04:30,659 --> 00:04:36,539
before things blow up I assume everybody

00:04:34,380 --> 00:04:39,750
knows that picture if you don't that

00:04:36,539 --> 00:04:41,700
from the Tacoma Narrows Bridge that was

00:04:39,750 --> 00:04:44,050
that's the classical example I pull out

00:04:41,700 --> 00:04:46,030
whenever any one says why can't

00:04:44,050 --> 00:04:48,340
build software like we build buildings

00:04:46,030 --> 00:04:51,789
or like we build bridges well that's

00:04:48,340 --> 00:04:53,250
what happens when you try to do a new

00:04:51,789 --> 00:04:56,440
kind of bridge

00:04:53,250 --> 00:05:00,610
it feels apically and that was a failure

00:04:56,440 --> 00:05:04,180
in production fast feedback loops give

00:05:00,610 --> 00:05:07,659
you this nice little thing of being able

00:05:04,180 --> 00:05:09,190
to test business ideas out it isn't

00:05:07,659 --> 00:05:11,229
necessarily limited to saying my

00:05:09,190 --> 00:05:14,879
development is faster my operations are

00:05:11,229 --> 00:05:18,250
better he'll test out a business idea

00:05:14,879 --> 00:05:20,650
you can say well let's see if I put up a

00:05:18,250 --> 00:05:24,669
thing here that I changed the color of

00:05:20,650 --> 00:05:26,979
my font on my web page does it help does

00:05:24,669 --> 00:05:30,520
it convert better do I put up a

00:05:26,979 --> 00:05:32,050
Christmas theme for December when do I

00:05:30,520 --> 00:05:34,900
put it up when will it convert better

00:05:32,050 --> 00:05:37,810
and in what markets because if you are

00:05:34,900 --> 00:05:40,150
an international company well it

00:05:37,810 --> 00:05:42,520
happened and international has not just

00:05:40,150 --> 00:05:44,259
localized to Europe suddenly Christmas

00:05:42,520 --> 00:05:46,590
may not be an important festival in some

00:05:44,259 --> 00:05:46,590
regions

00:05:46,949 --> 00:05:51,370
it's like test-driven design or

00:05:49,659 --> 00:05:53,650
test-driven development or whatever you

00:05:51,370 --> 00:05:57,099
want to call it roll out an idea check

00:05:53,650 --> 00:05:59,080
see what users say come back how do you

00:05:57,099 --> 00:06:00,330
know what users are saying well they

00:05:59,080 --> 00:06:02,919
give you money

00:06:00,330 --> 00:06:05,469
it's the biggest water fits the biggest

00:06:02,919 --> 00:06:08,349
final test right it doesn't matter how

00:06:05,469 --> 00:06:12,490
good your software is if nobody wants to

00:06:08,349 --> 00:06:14,319
use it it's dead in the water if you

00:06:12,490 --> 00:06:15,969
people are used if people are willing to

00:06:14,319 --> 00:06:18,279
use the software regardless of how

00:06:15,969 --> 00:06:21,400
horrible it looks and how horribly it

00:06:18,279 --> 00:06:23,199
works well there's a market and you can

00:06:21,400 --> 00:06:27,699
then start focusing on what will make

00:06:23,199 --> 00:06:30,610
things better it enables IT to speak the

00:06:27,699 --> 00:06:32,800
language of business you can then go and

00:06:30,610 --> 00:06:35,469
speak in terms of ROI and financial

00:06:32,800 --> 00:06:37,840
stuff and monetary metrics instead of

00:06:35,469 --> 00:06:39,849
saying oh code quality or this will

00:06:37,840 --> 00:06:43,599
improve that will improve why do you

00:06:39,849 --> 00:06:44,889
need high availability well if you're if

00:06:43,599 --> 00:06:47,440
you lose your data center and your

00:06:44,889 --> 00:06:49,690
business goes down what happens you're

00:06:47,440 --> 00:06:52,029
not necessarily a software company or in

00:06:49,690 --> 00:06:54,250
in the business of doing something else

00:06:52,029 --> 00:06:56,620
and you need the IT infrastructure to be

00:06:54,250 --> 00:06:57,970
up and running what happens if your

00:06:56,620 --> 00:07:00,310
production database goes down

00:06:57,970 --> 00:07:00,940
the factory shuts down that's a bad

00:07:00,310 --> 00:07:03,820
thing

00:07:00,940 --> 00:07:07,240
and you can translate that into dollar

00:07:03,820 --> 00:07:09,850
numbers translating money translating IT

00:07:07,240 --> 00:07:12,370
terms into money suddenly makes things

00:07:09,850 --> 00:07:17,350
very simple because most people get an

00:07:12,370 --> 00:07:20,860
idea of what money is and then you can

00:07:17,350 --> 00:07:23,290
just say show me the data I think this

00:07:20,860 --> 00:07:27,790
idea is stupid and now let's test it and

00:07:23,290 --> 00:07:29,500
see maybe people like it there's a

00:07:27,790 --> 00:07:32,850
popular acronym for this called the

00:07:29,500 --> 00:07:35,590
hippo the highest paid person's opinion

00:07:32,850 --> 00:07:38,770
you do not want this sort of you do not

00:07:35,590 --> 00:07:40,780
want a hippo pinyin going around because

00:07:38,770 --> 00:07:44,020
it boils down to the manager going whoa

00:07:40,780 --> 00:07:47,140
I know better than you of what the users

00:07:44,020 --> 00:07:49,480
want or what your customers want which

00:07:47,140 --> 00:07:51,670
is not not that he knows anything or she

00:07:49,480 --> 00:07:53,920
knows anything just means that they have

00:07:51,670 --> 00:07:56,320
an opinion and they have the authority

00:07:53,920 --> 00:07:58,030
to force you to follow it so as a

00:07:56,320 --> 00:08:00,940
culture you can just say we do not want

00:07:58,030 --> 00:08:03,880
to follow this everybody brings along

00:08:00,940 --> 00:08:05,850
data how do you bring along data well

00:08:03,880 --> 00:08:08,590
let's run a test let's run an experiment

00:08:05,850 --> 00:08:11,500
it shouldn't take very long to set up a

00:08:08,590 --> 00:08:14,800
small experiment that says well we asked

00:08:11,500 --> 00:08:17,440
we got 1% of our customers to look at

00:08:14,800 --> 00:08:19,320
this and half of them were responded

00:08:17,440 --> 00:08:22,360
positively and the other half ignored it

00:08:19,320 --> 00:08:25,169
that's a very good that's a 50% success

00:08:22,360 --> 00:08:27,730
rate on your tests extremely good or

00:08:25,169 --> 00:08:29,400
well we tried we tried this out and

00:08:27,730 --> 00:08:32,020
sales dropped through the floor

00:08:29,400 --> 00:08:37,570
bad idea regardless of who put it up

00:08:32,020 --> 00:08:41,620
right so here's another nice troll ish

00:08:37,570 --> 00:08:45,640
question what makes software good anyone

00:08:41,620 --> 00:08:48,630
with opinions so developers have their

00:08:45,640 --> 00:08:50,920
own metrics religious ones

00:08:48,630 --> 00:08:54,120
object-oriented functional procedural

00:08:50,920 --> 00:08:56,620
whatever it is testable follows dry

00:08:54,120 --> 00:08:58,780
there's a whole bunch of opinions is

00:08:56,620 --> 00:09:03,040
maintainable you everybody can read it

00:08:58,780 --> 00:09:04,900
whatever no obvious the Ops guys they'll

00:09:03,040 --> 00:09:07,240
tell you it should be bug free scalable

00:09:04,900 --> 00:09:09,640
it should be monetary but I don't want

00:09:07,240 --> 00:09:11,410
to hear about this software and

00:09:09,640 --> 00:09:11,740
especially do not want it waking me up

00:09:11,410 --> 00:09:16,300
at

00:09:11,740 --> 00:09:18,400
right right should be secure because

00:09:16,300 --> 00:09:21,910
security is one of those things that

00:09:18,400 --> 00:09:23,770
everybody claims to care about and the

00:09:21,910 --> 00:09:27,610
business guys go well does it make me

00:09:23,770 --> 00:09:31,900
money does it save me money do questions

00:09:27,610 --> 00:09:33,910
does it generate value basically if you

00:09:31,900 --> 00:09:34,390
can't if your software isn't making you

00:09:33,910 --> 00:09:36,370
money

00:09:34,390 --> 00:09:42,190
it isn't saving you money well then why

00:09:36,370 --> 00:09:44,760
are you running it I have no idea oh yes

00:09:42,190 --> 00:09:47,500
classical software development lifecycle

00:09:44,760 --> 00:09:50,140
it regardless of how many test stages

00:09:47,500 --> 00:09:53,110
you have if you are doing a web shop

00:09:50,140 --> 00:09:58,180
thing or equivalent this is what it

00:09:53,110 --> 00:10:00,340
looks like all the time you can have a

00:09:58,180 --> 00:10:02,290
test environment except well you do

00:10:00,340 --> 00:10:04,030
stuff and dev then you test rate you do

00:10:02,290 --> 00:10:07,770
performance testing you do acceptance

00:10:04,030 --> 00:10:10,390
its production real-world software fails

00:10:07,770 --> 00:10:12,700
why because no one ever thinks about a

00:10:10,390 --> 00:10:15,490
few things you know like there are

00:10:12,700 --> 00:10:18,280
humans doing or things on the other side

00:10:15,490 --> 00:10:19,090
of your system test environment very

00:10:18,280 --> 00:10:21,910
well-controlled

00:10:19,090 --> 00:10:25,480
yep yours all a repeatable performance

00:10:21,910 --> 00:10:28,260
tests out here in meatspace have as

00:10:25,480 --> 00:10:30,520
anybody managed to do a repeatable test

00:10:28,260 --> 00:10:36,130
you can't even cross the same river

00:10:30,520 --> 00:10:38,590
twice opps problem now or how that

00:10:36,130 --> 00:10:40,330
becomes a business problem because you

00:10:38,590 --> 00:10:42,550
can you may be able to say well there's

00:10:40,330 --> 00:10:46,630
no big thing but sales are dropping 1%

00:10:42,550 --> 00:10:48,460
that's a fair steep drop how fast is

00:10:46,630 --> 00:10:51,150
your feedback loop for this and this is

00:10:48,460 --> 00:10:54,520
the a child feedback loop right not even

00:10:51,150 --> 00:11:00,010
the whole let's do the waterfall model

00:10:54,520 --> 00:11:02,200
stuff your final production release bit

00:11:00,010 --> 00:11:05,890
involves a release meeting to get

00:11:02,200 --> 00:11:08,980
feedback from your customers daily

00:11:05,890 --> 00:11:11,830
stand-ups so if you're deploying to

00:11:08,980 --> 00:11:13,840
production every two weeks that is at

00:11:11,830 --> 00:11:16,660
least two weeks between someone having

00:11:13,840 --> 00:11:19,300
an idea being able to test it for two

00:11:16,660 --> 00:11:21,390
weeks and then making conclusion it's

00:11:19,300 --> 00:11:24,040
taking you a month to test an idea

00:11:21,390 --> 00:11:26,230
that's a very long time

00:11:24,040 --> 00:11:28,390
and so if you say oh I want to optimize

00:11:26,230 --> 00:11:32,560
for maybe I should change the theme of

00:11:28,390 --> 00:11:34,600
our website for Christmas yep sounds

00:11:32,560 --> 00:11:38,320
nice when do you need to start working

00:11:34,600 --> 00:11:39,310
on this September if you have this idea

00:11:38,320 --> 00:11:41,950
in December

00:11:39,310 --> 00:11:45,640
well you'll deliver it right in time for

00:11:41,950 --> 00:11:50,770
the new year yep well Christmas was

00:11:45,640 --> 00:11:52,690
slightly delayed this year folks plans

00:11:50,770 --> 00:11:55,300
versus reality Oh another one

00:11:52,690 --> 00:11:59,320
because planning is essential but plans

00:11:55,300 --> 00:12:02,350
never survive contact testing in a dev

00:11:59,320 --> 00:12:05,560
environment is kind of like planning

00:12:02,350 --> 00:12:08,290
works on my laptop works when there are

00:12:05,560 --> 00:12:11,290
no humans involved and then suddenly

00:12:08,290 --> 00:12:13,750
what happened well the Germans just came

00:12:11,290 --> 00:12:16,780
around my defense line we had no clue

00:12:13,750 --> 00:12:21,820
what happened no that's the Maginot Line

00:12:16,780 --> 00:12:24,220
from World War two Germans don't really

00:12:21,820 --> 00:12:26,680
go through well and a few things changed

00:12:24,220 --> 00:12:29,470
in meatspace you know everybody for all

00:12:26,680 --> 00:12:31,930
armies fight the last for all managers

00:12:29,470 --> 00:12:35,590
plan for the last business business

00:12:31,930 --> 00:12:37,150
scatter stroke not the next downtime not

00:12:35,590 --> 00:12:40,590
why you're going to have problems next

00:12:37,150 --> 00:12:42,820
time why you had problems the last time

00:12:40,590 --> 00:12:46,630
just a known thing because that's what

00:12:42,820 --> 00:12:48,790
you learned from so well somebody comes

00:12:46,630 --> 00:12:51,120
around out of left field and you're

00:12:48,790 --> 00:12:54,310
suddenly left with not know where to go

00:12:51,120 --> 00:12:57,280
car manufacturing well welcome to

00:12:54,310 --> 00:13:00,580
electric cars that learn or even better

00:12:57,280 --> 00:13:03,180
self-driving cars well I don't need to

00:13:00,580 --> 00:13:05,530
buy a car if I can just rent one and

00:13:03,180 --> 00:13:06,790
self-driving car means I don't even have

00:13:05,530 --> 00:13:10,720
to need it I don't need a driving

00:13:06,790 --> 00:13:12,490
license so much easier right and so the

00:13:10,720 --> 00:13:18,930
roads become so much safer if everything

00:13:12,490 --> 00:13:22,120
is automated hopefully but in general

00:13:18,930 --> 00:13:27,820
less problems until somebody decides to

00:13:22,120 --> 00:13:31,090
cheat Volkswagen and then again

00:13:27,820 --> 00:13:33,850
Darwin works you come around and you go

00:13:31,090 --> 00:13:37,360
everybody goes well who's who's going to

00:13:33,850 --> 00:13:39,790
survive IBM HP Apple how

00:13:37,360 --> 00:13:41,200
the big companies right and then you can

00:13:39,790 --> 00:13:43,149
say well probably they'll be dead in the

00:13:41,200 --> 00:13:45,820
next 10 years 15 years because they

00:13:43,149 --> 00:13:49,029
can't adapt fast enough who's responding

00:13:45,820 --> 00:13:49,950
first startups because they don't have a

00:13:49,029 --> 00:13:53,140
choice

00:13:49,950 --> 00:13:56,230
Amazon Google Facebook all response

00:13:53,140 --> 00:13:58,420
really really fast how long did it take

00:13:56,230 --> 00:14:00,579
for Facebook to say well let's put up

00:13:58,420 --> 00:14:03,880
let people put up an image of the flag

00:14:00,579 --> 00:14:04,720
of France on their face but because they

00:14:03,880 --> 00:14:06,880
have done this before

00:14:04,720 --> 00:14:08,529
and they did the first time that did

00:14:06,880 --> 00:14:10,029
this probably took them time but it can

00:14:08,529 --> 00:14:12,579
always be done again and again with a

00:14:10,029 --> 00:14:15,730
different image but you have to be able

00:14:12,579 --> 00:14:19,060
to adapt really fast what happens if you

00:14:15,730 --> 00:14:21,610
decide to go to a tomorrow but a large

00:14:19,060 --> 00:14:23,680
market like say India or China and then

00:14:21,610 --> 00:14:26,500
it turns out that the people they don't

00:14:23,680 --> 00:14:29,920
have fast connectivity and your homepage

00:14:26,500 --> 00:14:31,779
is all of nine Meg's or like some

00:14:29,920 --> 00:14:36,640
magazines 80 megabits

00:14:31,779 --> 00:14:41,860
80 megabytes 80 megabytes I don't know

00:14:36,640 --> 00:14:45,130
who likes that for a mobile webpage not

00:14:41,860 --> 00:14:48,760
even the desktop mobile 70 megabytes of

00:14:45,130 --> 00:14:50,800
that is advertising I don't want it I

00:14:48,760 --> 00:14:54,220
have to pay for that data and never go

00:14:50,800 --> 00:14:57,100
in there but if you can't respond fast

00:14:54,220 --> 00:14:59,079
you're dead in the water how do you

00:14:57,100 --> 00:15:01,810
respond fast you have to be able to say

00:14:59,079 --> 00:15:04,449
I am going to be doing I need production

00:15:01,810 --> 00:15:08,529
matrix for this doesn't matter where

00:15:04,449 --> 00:15:11,800
else your metrics come from oh right

00:15:08,529 --> 00:15:14,589
testing versus reality a nice stable

00:15:11,800 --> 00:15:17,290
environment in test in dev well dev less

00:15:14,589 --> 00:15:19,329
so but people say well we need testing

00:15:17,290 --> 00:15:22,990
so that we can do a stable integration

00:15:19,329 --> 00:15:24,850
build and all that yeah also I'm not a

00:15:22,990 --> 00:15:27,490
big fan of compiled languages for this

00:15:24,850 --> 00:15:29,890
they generally do not work very well in

00:15:27,490 --> 00:15:33,220
a very dynamic environment you want to

00:15:29,890 --> 00:15:35,170
be able to optimize for change and

00:15:33,220 --> 00:15:37,690
compiled and compiled applications just

00:15:35,170 --> 00:15:41,260
take too long to be able to deploy to

00:15:37,690 --> 00:15:43,060
production you can make it work but not

00:15:41,260 --> 00:15:45,190
so well and at some point you say well

00:15:43,060 --> 00:15:47,680
the added performance benefits are worth

00:15:45,190 --> 00:15:50,770
it but there's quite a bit of time

00:15:47,680 --> 00:15:51,250
between where people are and where the

00:15:50,770 --> 00:15:54,160
perform

00:15:51,250 --> 00:15:57,910
benefits are premature optimization is

00:15:54,160 --> 00:15:59,620
the root of all evil and that is again a

00:15:57,910 --> 00:16:02,620
thing that you can choose to distinguish

00:15:59,620 --> 00:16:05,530
between production and well it's ready

00:16:02,620 --> 00:16:10,420
we can probably go it's going to cost me

00:16:05,530 --> 00:16:12,190
more to rewrite my application or not if

00:16:10,420 --> 00:16:13,960
you're artists if you're doing testing

00:16:12,190 --> 00:16:16,290
in production rewriting an application

00:16:13,960 --> 00:16:19,420
is perfectly normal

00:16:16,290 --> 00:16:21,670
there are no humans in testing well or

00:16:19,420 --> 00:16:23,650
no mostly not just some involvement but

00:16:21,670 --> 00:16:25,690
well it's all automated here is a bunch

00:16:23,650 --> 00:16:27,520
of scripts that you throw and you say

00:16:25,690 --> 00:16:29,170
well all my requests work my database

00:16:27,520 --> 00:16:33,160
queries work I'm getting expected

00:16:29,170 --> 00:16:37,600
responses and then somebody puts in bad

00:16:33,160 --> 00:16:39,190
data and everything blows up oh but then

00:16:37,600 --> 00:16:42,280
again that's not checked in testing

00:16:39,190 --> 00:16:44,050
usually because that's the problem of

00:16:42,280 --> 00:16:47,260
some other subsystem right

00:16:44,050 --> 00:16:50,770
if you nobody can put in bad data for

00:16:47,260 --> 00:16:53,230
mostly but sometimes requirements change

00:16:50,770 --> 00:16:59,080
they are communicated to one team not

00:16:53,230 --> 00:17:01,180
the other large teams a painful low

00:16:59,080 --> 00:17:03,940
latency potentially high latency this is

00:17:01,180 --> 00:17:05,439
a fun one because I don't know if

00:17:03,940 --> 00:17:10,180
anybody who's been able to change the

00:17:05,439 --> 00:17:13,689
speed of light yet so I hear there was a

00:17:10,180 --> 00:17:16,030
startup back somewhere in the 99 whose

00:17:13,689 --> 00:17:17,890
entire business model was predicated on

00:17:16,030 --> 00:17:21,490
being able to deliver data faster than

00:17:17,890 --> 00:17:29,980
the speed of light allowed and they got

00:17:21,490 --> 00:17:32,290
funding so people here may not notice so

00:17:29,980 --> 00:17:34,360
much but you go outside you're up to

00:17:32,290 --> 00:17:39,160
someplace with poor connectivity and I

00:17:34,360 --> 00:17:43,150
can't read my mail why because the path

00:17:39,160 --> 00:17:46,510
it's not the have 3G connectivity I just

00:17:43,150 --> 00:17:49,180
have no bandwidth pass that its latency

00:17:46,510 --> 00:17:54,970
well one satellite hop will kill you

00:17:49,180 --> 00:17:56,620
on a very large TCP transaction and the

00:17:54,970 --> 00:17:58,750
other thing we're testing people tend to

00:17:56,620 --> 00:18:01,450
just take oh here's my production data

00:17:58,750 --> 00:18:04,090
set and then I'm going to replicate that

00:18:01,450 --> 00:18:05,409
into testing or dev or other

00:18:04,090 --> 00:18:11,269
environments

00:18:05,409 --> 00:18:12,710
and shrink it down so we don't have to

00:18:11,269 --> 00:18:15,559
waste so much space it's shared

00:18:12,710 --> 00:18:19,429
databases we don't want to keep all that

00:18:15,559 --> 00:18:22,759
data there sequel does not behave the

00:18:19,429 --> 00:18:26,389
same way if you had if your data sights

00:18:22,759 --> 00:18:30,440
changes query plants will change

00:18:26,389 --> 00:18:32,899
depending on the size of data so what

00:18:30,440 --> 00:18:33,620
are you developing what are you testing

00:18:32,899 --> 00:18:36,200
again strong

00:18:33,620 --> 00:18:39,230
who the hell knows your entire test is

00:18:36,200 --> 00:18:41,629
meaningless if you want more fun rants

00:18:39,230 --> 00:18:43,279
about that this guy toast not snag I

00:18:41,629 --> 00:18:46,700
love sir CONUS has a few blog posts

00:18:43,279 --> 00:18:50,299
about it about how people end up with

00:18:46,700 --> 00:18:55,309
meaningless maths especially about

00:18:50,299 --> 00:18:56,809
averages and percentiles that's a

00:18:55,309 --> 00:18:59,289
different talk and I will let him in

00:18:56,809 --> 00:19:02,059
it's an it's a fairly entertaining read

00:18:59,289 --> 00:19:04,009
people why do people do this oh wait

00:19:02,059 --> 00:19:08,600
it's a nice number but it doesn't mean

00:19:04,009 --> 00:19:11,210
anything sort of thing Oh users this I

00:19:08,600 --> 00:19:14,419
love because as a friend of mine put it

00:19:11,210 --> 00:19:17,779
users will user in response to someone

00:19:14,419 --> 00:19:19,820
asking for something very dump and say I

00:19:17,779 --> 00:19:23,499
want to delete this box but I still want

00:19:19,820 --> 00:19:27,259
to have it available in the CMDB what

00:19:23,499 --> 00:19:29,289
yes or they make mistakes how many

00:19:27,259 --> 00:19:34,610
people have never broken production

00:19:29,289 --> 00:19:38,450
anyone no good they come up with

00:19:34,610 --> 00:19:39,980
different requirements or as the

00:19:38,450 --> 00:19:43,909
software development world calls it

00:19:39,980 --> 00:19:46,369
scope creep I know we have a system that

00:19:43,909 --> 00:19:51,799
does this can I get this one additional

00:19:46,369 --> 00:19:53,149
checkbox no well maybe or they just

00:19:51,799 --> 00:19:56,529
change the world your system is working

00:19:53,149 --> 00:20:00,019
in sure we were deploying this tool

00:19:56,529 --> 00:20:03,100
Intel boxes but tomorrow we are going

00:20:00,019 --> 00:20:07,220
going to be deploying the Sun good luck

00:20:03,100 --> 00:20:10,129
or OPM our own Oracle but we need to

00:20:07,220 --> 00:20:12,769
move to both grass well it changes its

00:20:10,129 --> 00:20:16,480
form we used to have to support only ie6

00:20:12,769 --> 00:20:18,560
but my e6 is no longer supported have

00:20:16,480 --> 00:20:23,650
enterprise software

00:20:18,560 --> 00:20:28,040
we hate it risk management Oh fun

00:20:23,650 --> 00:20:29,570
approach one you basically waterfall or

00:20:28,040 --> 00:20:31,910
pretty much anybody who solved a

00:20:29,570 --> 00:20:34,820
technical problem this is a fixed size

00:20:31,910 --> 00:20:36,500
of problem we can test a lot with the

00:20:34,820 --> 00:20:38,630
lace table code and we know that because

00:20:36,500 --> 00:20:42,800
we have sufficient tests and everything

00:20:38,630 --> 00:20:44,300
this will work and then you avoid

00:20:42,800 --> 00:20:46,100
changing a working system it's being

00:20:44,300 --> 00:20:48,680
deployed to production it works it's

00:20:46,100 --> 00:20:52,640
stable let's try and avoid making

00:20:48,680 --> 00:20:54,340
changes that's pretty much enterprise

00:20:52,640 --> 00:20:56,900
software right

00:20:54,340 --> 00:21:00,080
and then you have this other crazy

00:20:56,900 --> 00:21:02,480
option which is we accept that you have

00:21:00,080 --> 00:21:05,290
an ill-defined problem you don't know

00:21:02,480 --> 00:21:08,360
what the hell is going on because well

00:21:05,290 --> 00:21:10,640
nobody knows why people buy stuff other

00:21:08,360 --> 00:21:12,320
than the fact that they need it but if

00:21:10,640 --> 00:21:15,050
you ask someone why did they choose to

00:21:12,320 --> 00:21:18,500
buy this product or that product well

00:21:15,050 --> 00:21:21,950
one looked better to me or I had heard

00:21:18,500 --> 00:21:24,590
of the brand name or something you don't

00:21:21,950 --> 00:21:26,690
know well it's one of those things that

00:21:24,590 --> 00:21:30,050
is actively researched and we still

00:21:26,690 --> 00:21:33,650
don't know so you have to eye trait

00:21:30,050 --> 00:21:37,640
rapidly you have to figure out a lot of

00:21:33,650 --> 00:21:40,550
a/b testing lots of small tests so at

00:21:37,640 --> 00:21:43,700
booking we were running about 200 to 300

00:21:40,550 --> 00:21:45,830
tests concurrently and with overlap so

00:21:43,700 --> 00:21:48,080
you could have you could end up being in

00:21:45,830 --> 00:21:50,960
a single set of maybe eight or ten

00:21:48,080 --> 00:21:52,730
experiments at any given time and each

00:21:50,960 --> 00:21:54,920
of those eight experiments would impact

00:21:52,730 --> 00:21:58,730
something different or overlapping and

00:21:54,920 --> 00:22:00,080
you could measure the impact of each so

00:21:58,730 --> 00:22:02,210
you can make a large number of small

00:22:00,080 --> 00:22:04,910
changes deploy each change individually

00:22:02,210 --> 00:22:07,280
and test and then you have to say well

00:22:04,910 --> 00:22:10,490
how the hell do I know what each change

00:22:07,280 --> 00:22:13,220
is doing so you you basically have to

00:22:10,490 --> 00:22:15,500
start tracking metrics from within your

00:22:13,220 --> 00:22:18,560
application you have to instrument your

00:22:15,500 --> 00:22:21,230
application it has to be not only be

00:22:18,560 --> 00:22:24,590
debuggable everything monitor it must

00:22:21,230 --> 00:22:26,450
generate its own metrics you do not want

00:22:24,590 --> 00:22:27,590
to pull metrics from applications

00:22:26,450 --> 00:22:30,680
because you don't know what you are

00:22:27,590 --> 00:22:32,450
going to pull you ideally want the

00:22:30,680 --> 00:22:35,419
application to generate an

00:22:32,450 --> 00:22:37,669
dire event object that says I got a

00:22:35,419 --> 00:22:42,440
request at this time I got with this

00:22:37,669 --> 00:22:44,389
data from this IP or whatever else and a

00:22:42,440 --> 00:22:47,179
single session ID that is trackable

00:22:44,389 --> 00:22:49,249
throughout your entire infrastructure so

00:22:47,179 --> 00:22:52,039
tomorrow if someone says what did this

00:22:49,249 --> 00:22:55,759
particular user do yeah was the session

00:22:52,039 --> 00:22:59,419
ID there are all their sessions around

00:22:55,759 --> 00:23:01,580
that time easy enough to track and you

00:22:59,419 --> 00:23:03,830
can then say well this is what we know

00:23:01,580 --> 00:23:06,379
about this particular user session at

00:23:03,830 --> 00:23:08,720
this time you know what they did you

00:23:06,379 --> 00:23:10,580
know which pages they hit you know how

00:23:08,720 --> 00:23:13,369
big the request was you know how big the

00:23:10,580 --> 00:23:15,799
response size was I have seen we have

00:23:13,369 --> 00:23:18,139
seen fun rollouts well your response I

00:23:15,799 --> 00:23:19,789
certainly bloats up and then you go what

00:23:18,139 --> 00:23:22,340
the why are we running out of

00:23:19,789 --> 00:23:25,580
bandwidth oh crap somebody broke the

00:23:22,340 --> 00:23:30,679
compression so we are not serving

00:23:25,580 --> 00:23:32,779
minified j/s any longer problems or oh

00:23:30,679 --> 00:23:36,019
we changed the default size of the image

00:23:32,779 --> 00:23:38,720
to be shown from whatever 320 in -

00:23:36,019 --> 00:23:40,669
whatever - doubling is that and the

00:23:38,720 --> 00:23:45,019
image certainly became a lot bigger or

00:23:40,669 --> 00:23:47,359
we change default image formats and you

00:23:45,019 --> 00:23:48,159
test all these changes see what people

00:23:47,359 --> 00:23:50,600
respond to

00:23:48,159 --> 00:23:53,119
how many people think your boss would be

00:23:50,600 --> 00:23:56,480
happy if you were to say we want to make

00:23:53,119 --> 00:23:57,850
I want to buy twice the hardware next

00:23:56,480 --> 00:24:01,129
year

00:23:57,850 --> 00:24:02,929
well maybe they will be happy maybe not

00:24:01,129 --> 00:24:04,279
but most of them are going to go her why

00:24:02,929 --> 00:24:06,559
the hell do you want to do that

00:24:04,279 --> 00:24:09,379
well we deployed the system it's a bit

00:24:06,559 --> 00:24:11,809
slow it's unoptimized but it has driven

00:24:09,379 --> 00:24:14,330
up profits ten times and they'll go oh

00:24:11,809 --> 00:24:16,669
you only want to double my cost fixed

00:24:14,330 --> 00:24:21,139
costs and you want to give me ten times

00:24:16,669 --> 00:24:23,059
the profit sure have the money and we

00:24:21,139 --> 00:24:25,570
can spend the next year optimizing that

00:24:23,059 --> 00:24:28,639
so the year after that you don't have to

00:24:25,570 --> 00:24:30,440
but this sort of trade-off is something

00:24:28,639 --> 00:24:33,799
that we have to figure out before we ask

00:24:30,440 --> 00:24:35,960
for more hardware and how do you are you

00:24:33,799 --> 00:24:37,179
how do you know this well you have to

00:24:35,960 --> 00:24:39,889
follow the money

00:24:37,179 --> 00:24:41,720
this is this Hardware if I'm putting

00:24:39,889 --> 00:24:44,059
money into a system is it going to give

00:24:41,720 --> 00:24:46,490
me more money is it going to save me

00:24:44,059 --> 00:24:49,610
money buying to smaller

00:24:46,490 --> 00:24:52,610
versus one using MongoDB instead of a

00:24:49,610 --> 00:24:57,110
relational database well okay but still

00:24:52,610 --> 00:25:01,429
 Yolo there is no what if for

00:24:57,110 --> 00:25:03,260
software breaks or as we put it hardware

00:25:01,429 --> 00:25:08,510
it will eventually fail software will

00:25:03,260 --> 00:25:10,790
eventually work you fix fast but maybe

00:25:08,510 --> 00:25:13,850
there are some people whose love to say

00:25:10,790 --> 00:25:16,700
well this site is broken me off by one

00:25:13,850 --> 00:25:20,570
pixel has it affected my grout has it

00:25:16,700 --> 00:25:23,300
affected anything hmm no pageviews are

00:25:20,570 --> 00:25:25,580
consistent people are still buying we

00:25:23,300 --> 00:25:29,150
don't care it doesn't look perfect to

00:25:25,580 --> 00:25:31,670
the designer on the other hand maybe you

00:25:29,150 --> 00:25:33,980
want to really fix this because somebody

00:25:31,670 --> 00:25:36,080
ran an experiment that said well we'll

00:25:33,980 --> 00:25:38,030
have light text on a dark background and

00:25:36,080 --> 00:25:40,370
someone said well we'll have a light

00:25:38,030 --> 00:25:41,960
background and then suddenly people are

00:25:40,370 --> 00:25:45,710
not able to buy because they can't read

00:25:41,960 --> 00:25:47,540
anything white text white background I'm

00:25:45,710 --> 00:25:52,400
not sure that works out well for people

00:25:47,540 --> 00:25:54,920
but hey errors happen quick fix because

00:25:52,400 --> 00:25:56,510
it scoped to an experiment when you're

00:25:54,920 --> 00:25:58,880
doing the testing in production you do

00:25:56,510 --> 00:26:02,480
not redo a wholesale forklift update

00:25:58,880 --> 00:26:04,730
ever you update software but you say I'm

00:26:02,480 --> 00:26:08,090
rolling this change out as an experiment

00:26:04,730 --> 00:26:10,790
to a certain set of people you can do

00:26:08,090 --> 00:26:12,440
this by rolling out a cannery deploy you

00:26:10,790 --> 00:26:15,890
can do this by rolling it out within

00:26:12,440 --> 00:26:20,860
your a B framework or within your multi

00:26:15,890 --> 00:26:23,000
arm bandwidth test framework helps and

00:26:20,860 --> 00:26:25,370
then you say well I'm going to give this

00:26:23,000 --> 00:26:28,309
to only 1% or half a percent of whatever

00:26:25,370 --> 00:26:30,170
of my users grow up slowly which means

00:26:28,309 --> 00:26:34,330
that you have even if you have a problem

00:26:30,170 --> 00:26:38,030
it doesn't kill the rest of your systems

00:26:34,330 --> 00:26:40,070
well if you are lucky it doesn't I have

00:26:38,030 --> 00:26:42,530
seen one particular fun bug which was in

00:26:40,070 --> 00:26:45,470
very well tested old code that was

00:26:42,530 --> 00:26:47,030
triggered by a code change that made a

00:26:45,470 --> 00:26:51,800
difference that broke a set of

00:26:47,030 --> 00:26:55,610
assumptions it expanded network IP

00:26:51,800 --> 00:26:59,150
addresses into from the block to each

00:26:55,610 --> 00:27:00,320
every IP in the block and well stored

00:26:59,150 --> 00:27:03,559
that in memcached

00:27:00,320 --> 00:27:09,580
unhappily the production network had a

00:27:03,559 --> 00:27:09,580
slash eight netmask out of memory

00:27:09,669 --> 00:27:13,610
there's only so much memory you can

00:27:11,929 --> 00:27:17,659
there's only so much you can show into a

00:27:13,610 --> 00:27:19,100
cache that was a hard one to debug and

00:27:17,659 --> 00:27:20,630
you know if you're going to have you

00:27:19,100 --> 00:27:21,380
don't care about doing it right the

00:27:20,630 --> 00:27:23,330
first time

00:27:21,380 --> 00:27:24,980
you don't care about duplicating code

00:27:23,330 --> 00:27:29,029
you don't necessarily care about saying

00:27:24,980 --> 00:27:31,789
do don't repeat yourself it's cheaper to

00:27:29,029 --> 00:27:34,820
copy paste code edit it to do what you

00:27:31,789 --> 00:27:35,240
want roll it into production does it

00:27:34,820 --> 00:27:38,860
work

00:27:35,240 --> 00:27:41,659
yep let's fix this if not doesn't matter

00:27:38,860 --> 00:27:45,590
you're the standard rules for software

00:27:41,659 --> 00:27:48,080
development do not apply your business

00:27:45,590 --> 00:27:49,850
process for handling failure most

00:27:48,080 --> 00:27:51,500
businesses will already have those your

00:27:49,850 --> 00:27:53,539
boss is not going to be unhappy if

00:27:51,500 --> 00:27:55,970
things break and they know that this

00:27:53,539 --> 00:27:57,379
sort of break is a possibility because

00:27:55,970 --> 00:28:00,769
then they can have a process that will

00:27:57,379 --> 00:28:03,769
fix it for them your car order didn't

00:28:00,769 --> 00:28:05,600
come through your hell look at cafes

00:28:03,769 --> 00:28:07,580
right there often enough their

00:28:05,600 --> 00:28:10,100
point-of-sale systems break down and

00:28:07,580 --> 00:28:17,539
they go ok let's just do it on pen and

00:28:10,100 --> 00:28:19,669
paper that is fairly reliable but you

00:28:17,539 --> 00:28:20,629
have a process that works if you didn't

00:28:19,669 --> 00:28:24,769
have that you would be dead

00:28:20,629 --> 00:28:27,200
oops today no right so the lifetime of

00:28:24,769 --> 00:28:29,299
code that's another metric that people

00:28:27,200 --> 00:28:32,620
love because when they're engineering

00:28:29,299 --> 00:28:35,059
code they tend to over engineer it and

00:28:32,620 --> 00:28:36,679
if you're testing in production well

00:28:35,059 --> 00:28:39,320
let's take this code

00:28:36,679 --> 00:28:41,059
throw it into production works no no

00:28:39,320 --> 00:28:44,149
that doesn't work it made no change it

00:28:41,059 --> 00:28:48,950
cost us losing us money let's get rid of

00:28:44,149 --> 00:28:50,809
it deleting code is not a problem it's

00:28:48,950 --> 00:28:53,720
always a nice thing to do cleaning up

00:28:50,809 --> 00:28:55,549
but you can just delete code and if you

00:28:53,720 --> 00:28:57,409
are using a version control system you

00:28:55,549 --> 00:29:00,350
don't worry about losing anything useful

00:28:57,409 --> 00:29:02,899
oh that was important well let's reverse

00:29:00,350 --> 00:29:05,509
let's just revert the commits how fast

00:29:02,899 --> 00:29:06,669
can you do that well get revert is

00:29:05,509 --> 00:29:09,529
pretty quick

00:29:06,669 --> 00:29:14,190
moose code front-end code particularly

00:29:09,529 --> 00:29:16,379
ours days booking had a one gig code

00:29:14,190 --> 00:29:20,100
and the average lifetime of new code was

00:29:16,379 --> 00:29:24,059
three days in three days a lot of your

00:29:20,100 --> 00:29:28,220
code which is go away if not the next

00:29:24,059 --> 00:29:32,129
big thing was where am I

00:29:28,220 --> 00:29:33,870
fifteen days worth of code because that

00:29:32,129 --> 00:29:38,190
was usually how long an experiment would

00:29:33,870 --> 00:29:39,480
run some code would run for months after

00:29:38,190 --> 00:29:41,039
which the application would have to be

00:29:39,480 --> 00:29:44,340
rewritten and thrown away because

00:29:41,039 --> 00:29:47,820
scaling and if you're doubling in size

00:29:44,340 --> 00:29:51,330
you are always solving new problems if

00:29:47,820 --> 00:29:53,700
you're going at 40 50 % even it's you

00:29:51,330 --> 00:29:55,350
basically have to throw away all your

00:29:53,700 --> 00:29:58,740
old code because the algorithms no

00:29:55,350 --> 00:30:01,259
longer work if you are lucky they do but

00:29:58,740 --> 00:30:03,059
sometimes it just because well where we

00:30:01,259 --> 00:30:05,250
have an O n square algorithm and it

00:30:03,059 --> 00:30:07,889
doesn't work or we need to char data we

00:30:05,250 --> 00:30:09,750
need to rewrite the application because

00:30:07,889 --> 00:30:11,399
now we need the raw performance and now

00:30:09,750 --> 00:30:16,110
it's a well-defined operations problem

00:30:11,399 --> 00:30:18,840
or a def problem and then you have core

00:30:16,110 --> 00:30:21,230
libraries or really core services like

00:30:18,840 --> 00:30:24,169
authentication and database interfaces

00:30:21,230 --> 00:30:27,120
those things tend to stay around for

00:30:24,169 --> 00:30:29,940
years and years on end those need to be

00:30:27,120 --> 00:30:31,649
very well written very well tested but

00:30:29,940 --> 00:30:34,379
if you don't know what your code is

00:30:31,649 --> 00:30:37,649
going to do I would put it in the first

00:30:34,379 --> 00:30:40,500
category most of the time push your code

00:30:37,649 --> 00:30:43,940
out see what your users say about it if

00:30:40,500 --> 00:30:46,889
they don't like it Roback doesn't hurt

00:30:43,940 --> 00:30:50,039
it is safe let me reiterate this because

00:30:46,889 --> 00:30:52,289
I have heard a lot of people crib it is

00:30:50,039 --> 00:30:55,169
safe to delete code if you're using

00:30:52,289 --> 00:31:01,169
version control doesn't matter what if

00:30:55,169 --> 00:31:03,029
you aren't well you should be event

00:31:01,169 --> 00:31:05,159
processing well he's already described

00:31:03,029 --> 00:31:07,080
event so I will not explain in great

00:31:05,159 --> 00:31:10,230
detail what the event ends up looking

00:31:07,080 --> 00:31:12,299
like but it is basically a track of what

00:31:10,230 --> 00:31:16,049
happened on the system somebody comes

00:31:12,299 --> 00:31:18,090
hits a webpage an event is generated you

00:31:16,049 --> 00:31:19,980
add in what methods were called all the

00:31:18,090 --> 00:31:22,259
information that you got from the client

00:31:19,980 --> 00:31:25,740
browser how long each method took

00:31:22,259 --> 00:31:28,220
whatever else some sequel query that was

00:31:25,740 --> 00:31:30,510
triggered what parameters were passed to

00:31:28,220 --> 00:31:33,150
what if you'll somebody it's a search

00:31:30,510 --> 00:31:34,980
page what searches were triggered do not

00:31:33,150 --> 00:31:37,500
rely on web logs this comes from the

00:31:34,980 --> 00:31:39,870
application and then your business

00:31:37,500 --> 00:31:41,940
analyst guy can go and say oh we have so

00:31:39,870 --> 00:31:44,370
much information about what people are

00:31:41,940 --> 00:31:46,340
doing in production they have their own

00:31:44,370 --> 00:31:49,740
tools they generate their own metrics

00:31:46,340 --> 00:31:51,660
you can grab metrics from those things

00:31:49,740 --> 00:31:55,860
and say here's a bunch of graphs with

00:31:51,660 --> 00:31:57,480
what we are doing in real time and then

00:31:55,860 --> 00:32:00,540
suddenly your feedback loop goes from

00:31:57,480 --> 00:32:02,850
well we get a mail once a day about how

00:32:00,540 --> 00:32:04,490
we are doing well or we know about how

00:32:02,850 --> 00:32:06,900
well we had our the software is doing

00:32:04,490 --> 00:32:10,230
because we hear a quarterly business

00:32:06,900 --> 00:32:13,920
update for the stock market yeah not so

00:32:10,230 --> 00:32:16,800
much if you can detect there your bad

00:32:13,920 --> 00:32:19,830
code rollouts really fast you can pretty

00:32:16,800 --> 00:32:23,250
much revert them as well really fast so

00:32:19,830 --> 00:32:25,220
your downtime blip goes and it just

00:32:23,250 --> 00:32:29,550
works well there was just a slight blip

00:32:25,220 --> 00:32:32,840
or well it was down and we didn't know

00:32:29,550 --> 00:32:36,720
until users started complaining about it

00:32:32,840 --> 00:32:39,750
you want to know well before the users

00:32:36,720 --> 00:32:41,400
do that there is a problem because

00:32:39,750 --> 00:32:44,220
people will detect there is a problem

00:32:41,400 --> 00:32:47,040
hit refresh oh it doesn't work well I'm

00:32:44,220 --> 00:32:50,610
going to a competitor Spotify is lucky

00:32:47,040 --> 00:32:54,090
that way not enough competitors but if

00:32:50,610 --> 00:32:55,800
you're not in that category if you have

00:32:54,090 --> 00:32:57,750
internal users well they can't go

00:32:55,800 --> 00:32:59,400
anywhere else either but then your

00:32:57,750 --> 00:33:04,950
helpdesk is going to come bitching at

00:32:59,400 --> 00:33:06,990
you yeah okay so I was going to put up a

00:33:04,950 --> 00:33:08,850
couple of slides about this but these

00:33:06,990 --> 00:33:11,850
two pages have way too much information

00:33:08,850 --> 00:33:14,310
to digest into one or two slides that

00:33:11,850 --> 00:33:15,390
would be at least a decent day's worth

00:33:14,310 --> 00:33:21,170
of talk on that

00:33:15,390 --> 00:33:21,170
so EMI you'll have to read this

00:33:22,450 --> 00:33:28,010
monitoring alerting process your invents

00:33:24,919 --> 00:33:30,200
to generate graphs events feed into bi

00:33:28,010 --> 00:33:32,960
feeds into monitoring feeds into dev

00:33:30,200 --> 00:33:35,929
feedback feeds and proof for everyone

00:33:32,960 --> 00:33:38,779
you events are what you are your

00:33:35,929 --> 00:33:42,890
feedback make a stream and then you have

00:33:38,779 --> 00:33:48,200
to drink from the fire hose dreamin

00:33:42,890 --> 00:33:53,110
again a shout out it works I have had

00:33:48,200 --> 00:33:56,750
the same issues with as Spotify did

00:33:53,110 --> 00:33:57,740
people don't like writing lisp I don't

00:33:56,750 --> 00:34:03,140
know why I do

00:33:57,740 --> 00:34:07,100
it's easy hey I like I like weird

00:34:03,140 --> 00:34:10,580
languages I like Perl but unless and

00:34:07,100 --> 00:34:11,810
sequence sequence easy but then again I

00:34:10,580 --> 00:34:16,970
am also one of those people who hates

00:34:11,810 --> 00:34:20,119
writing Java so we generate graphs as

00:34:16,970 --> 00:34:23,030
close to real time you know what is

00:34:20,119 --> 00:34:25,550
happening now not five minutes later not

00:34:23,030 --> 00:34:27,440
10 minutes if your graphs are lagging by

00:34:25,550 --> 00:34:28,119
10 minutes you are flying blind for 10

00:34:27,440 --> 00:34:30,950
minutes

00:34:28,119 --> 00:34:33,859
metrics are your wisk are your stream of

00:34:30,950 --> 00:34:36,290
visibility if you don't have metrics

00:34:33,859 --> 00:34:37,399
visible when you're flying blind don't

00:34:36,290 --> 00:34:39,679
do anything at that point

00:34:37,399 --> 00:34:43,190
wait for that system to come become

00:34:39,679 --> 00:34:44,510
stable because if you can't see what is

00:34:43,190 --> 00:34:46,030
happening you do not know whether you're

00:34:44,510 --> 00:34:50,349
doing a good thing or a bad thing

00:34:46,030 --> 00:34:53,780
doing nothing is usually the safe option

00:34:50,349 --> 00:34:57,830
in an image oh and if you can isolate

00:34:53,780 --> 00:35:00,710
each change and wrap every experiment in

00:34:57,830 --> 00:35:03,760
a flag feature flag you can turn it on

00:35:00,710 --> 00:35:07,099
turn it off your metrics about that

00:35:03,760 --> 00:35:09,170
it tests then get flagged come along

00:35:07,099 --> 00:35:12,680
with a flag that says it was part of

00:35:09,170 --> 00:35:15,320
this experiment so even if you have 200

00:35:12,680 --> 00:35:17,599
experiments running you can analyze them

00:35:15,320 --> 00:35:20,930
each separately independently or as a

00:35:17,599 --> 00:35:23,570
combination we had a we have so you can

00:35:20,930 --> 00:35:25,580
just say oh if we have this experiment

00:35:23,570 --> 00:35:27,830
and this experiment working it works out

00:35:25,580 --> 00:35:29,570
I don't know if you've seen one of these

00:35:27,830 --> 00:35:32,150
if you have booked a hotel with that

00:35:29,570 --> 00:35:33,920
booking that allows you to do pay later

00:35:32,150 --> 00:35:36,170
instead of the advance payment stuff but

00:35:33,920 --> 00:35:38,450
if you have they put up a flag there

00:35:36,170 --> 00:35:40,760
says I want to be able to manage my own

00:35:38,450 --> 00:35:43,010
booking and I am I'm willing to receive

00:35:40,760 --> 00:35:46,280
free refunds if I cancel later blah

00:35:43,010 --> 00:35:47,960
something that flying is documented in

00:35:46,280 --> 00:35:50,000
the write on the description of the room

00:35:47,960 --> 00:35:52,490
and there's also a check box that

00:35:50,000 --> 00:35:55,220
appears on top adding that check box

00:35:52,490 --> 00:35:57,980
took was just a random developer idea

00:35:55,220 --> 00:36:02,030
and it reduced customer calls by about

00:35:57,980 --> 00:36:04,069
25 percent massive must have changed

00:36:02,030 --> 00:36:06,049
because people were calling in to get

00:36:04,069 --> 00:36:08,480
people to get bookings modified and they

00:36:06,049 --> 00:36:09,710
went oh I can manage my own booking now

00:36:08,480 --> 00:36:14,240
excellent

00:36:09,710 --> 00:36:16,819
this quote they just didn't know it so

00:36:14,240 --> 00:36:19,880
small change 30 minutes of work 25

00:36:16,819 --> 00:36:21,230
minutes cut in customer calls customer

00:36:19,880 --> 00:36:22,520
service is certainly happier and

00:36:21,230 --> 00:36:25,280
everybody is happier because you're

00:36:22,520 --> 00:36:30,400
waiting calls are gone down how can you

00:36:25,280 --> 00:36:30,400
win big win production test Oh questions

00:36:31,720 --> 00:36:40,339
anyone oh there we go so what you're

00:36:37,339 --> 00:36:42,650
describing is the the agile approach to

00:36:40,339 --> 00:36:46,339
software development as far as I can see

00:36:42,650 --> 00:36:50,109
no this is a child approach to business

00:36:46,339 --> 00:36:52,970
not just software development okay so

00:36:50,109 --> 00:36:54,710
because even when you people speak about

00:36:52,970 --> 00:36:56,059
agile software development they expect

00:36:54,710 --> 00:36:59,210
to say well we have all these user

00:36:56,059 --> 00:37:00,920
stories and stuff it is this is not

00:36:59,210 --> 00:37:02,480
quite software development this is more

00:37:00,920 --> 00:37:05,630
server ver development whether you are

00:37:02,480 --> 00:37:08,359
doing micro services or not you I don't

00:37:05,630 --> 00:37:09,920
spend time in testing and I a lot of

00:37:08,359 --> 00:37:12,099
people say you should do a lot of unit

00:37:09,920 --> 00:37:15,799
testing and validation before you deploy

00:37:12,099 --> 00:37:19,040
I'm saying minimal testing in dev push

00:37:15,799 --> 00:37:22,549
it out to prod and see what happens yeah

00:37:19,040 --> 00:37:24,109
so it is data-driven basically yeah we

00:37:22,549 --> 00:37:26,119
have fun found out in the different

00:37:24,109 --> 00:37:29,210
context it's probably something

00:37:26,119 --> 00:37:32,839
everybody knows is that correlation does

00:37:29,210 --> 00:37:36,200
not imply causality yes so you can have

00:37:32,839 --> 00:37:38,150
data supporting your case but caused by

00:37:36,200 --> 00:37:41,720
something completely different so the

00:37:38,150 --> 00:37:44,809
question is how long do you need to test

00:37:41,720 --> 00:37:47,630
and before before actually your case is

00:37:44,809 --> 00:37:50,030
supported so you need to get a

00:37:47,630 --> 00:37:53,720
statistically significant number

00:37:50,030 --> 00:37:56,120
of reports and if your explore and that

00:37:53,720 --> 00:37:59,150
depends on how often your experiment is

00:37:56,120 --> 00:38:01,760
actually seen I would go ask the

00:37:59,150 --> 00:38:03,560
statistician for the details based on

00:38:01,760 --> 00:38:05,960
your specific question I know enough

00:38:03,560 --> 00:38:07,100
statistics to be dangerous but not

00:38:05,960 --> 00:38:11,030
enough to give you an authoritative

00:38:07,100 --> 00:38:13,880
answer okay but if you get a few percent

00:38:11,030 --> 00:38:17,300
of your viewers to say well it a

00:38:13,880 --> 00:38:19,010
positive or a negative response it helps

00:38:17,300 --> 00:38:21,470
on the other hand if you're going

00:38:19,010 --> 00:38:24,740
through to be a good scientist you're

00:38:21,470 --> 00:38:26,960
only running one experiment at once and

00:38:24,740 --> 00:38:29,600
looking at the changes which of course

00:38:26,960 --> 00:38:32,030
extremely limits your ability to ship

00:38:29,600 --> 00:38:33,800
new features right well no you can you

00:38:32,030 --> 00:38:35,570
can have one expert if you are doing an

00:38:33,800 --> 00:38:37,280
experiment on a webpage you can have one

00:38:35,570 --> 00:38:39,470
experiment that changes something on the

00:38:37,280 --> 00:38:42,020
top something that changes something in

00:38:39,470 --> 00:38:43,760
the middle and a combination of each so

00:38:42,020 --> 00:38:45,590
you can have stuff where you run only

00:38:43,760 --> 00:38:48,380
one experiment show it to a certain

00:38:45,590 --> 00:38:49,580
number of customers another experiment

00:38:48,380 --> 00:38:51,320
only goes to a certain number of

00:38:49,580 --> 00:38:53,990
customers and then some people get the

00:38:51,320 --> 00:38:56,600
combination some people get the base but

00:38:53,990 --> 00:38:58,820
then you have to be sufficiently

00:38:56,600 --> 00:39:01,700
confident that they do not influence

00:38:58,820 --> 00:39:04,310
each other yes yes and that is something

00:39:01,700 --> 00:39:06,940
that you have to validate by making sure

00:39:04,310 --> 00:39:10,730
that those experiments do not actually

00:39:06,940 --> 00:39:12,470
collide or actually half the time you

00:39:10,730 --> 00:39:15,920
don't care about the specific cause of

00:39:12,470 --> 00:39:20,570
it if it works it's good enough right

00:39:15,920 --> 00:39:24,110
and 1% or 2% increase in sales good

00:39:20,570 --> 00:39:26,510
enough or if we are booking you

00:39:24,110 --> 00:39:28,610
basically go and say well 1% not good

00:39:26,510 --> 00:39:33,350
enough you need to be doing about 10 or

00:39:28,610 --> 00:39:35,150
15% okay thanks yeah basically you have

00:39:33,350 --> 00:39:38,210
to go ask your data scientist this

00:39:35,150 --> 00:39:43,660
question I am NOT good enough to answer

00:39:38,210 --> 00:39:43,660
this one yet anybody else

00:39:44,560 --> 00:39:52,490
no one given a trollish topic like this

00:39:47,600 --> 00:39:54,890
yeah yeah hey how do you keep your

00:39:52,490 --> 00:39:56,690
feedback loops short because when

00:39:54,890 --> 00:39:59,420
something breaks they first go to

00:39:56,690 --> 00:40:03,320
support support and has a something like

00:39:59,420 --> 00:40:03,859
I can't pay on your site then they go to

00:40:03,320 --> 00:40:07,819
infer

00:40:03,859 --> 00:40:10,039
structure us is to serve a town and then

00:40:07,819 --> 00:40:17,119
the end it turns out user does not have

00:40:10,039 --> 00:40:19,039
a keyboard attached well yeah but half

00:40:17,119 --> 00:40:21,559
the time the if you're in production you

00:40:19,039 --> 00:40:23,809
are looking at matrix so you you can

00:40:21,559 --> 00:40:26,029
just go and say well we are missing out

00:40:23,809 --> 00:40:29,150
on people we see people coming to this

00:40:26,029 --> 00:40:31,519
page and then dropping out so a payment

00:40:29,150 --> 00:40:33,319
system glitch even if it you're not

00:40:31,519 --> 00:40:35,960
getting so you're not seeing 500 errors

00:40:33,319 --> 00:40:37,880
or errors spike you can just go and say

00:40:35,960 --> 00:40:39,440
well we are seeing the normal number of

00:40:37,880 --> 00:40:41,150
people coming in but the number of

00:40:39,440 --> 00:40:45,980
people actually making a payment has

00:40:41,150 --> 00:40:47,809
dropped something is wrong you can and

00:40:45,980 --> 00:40:50,450
pretty much you define a few business

00:40:47,809 --> 00:40:53,359
critical business metrics that you say

00:40:50,450 --> 00:40:54,890
well sales numbers pageviews and you

00:40:53,359 --> 00:40:58,039
don't have to have a dollar value or

00:40:54,890 --> 00:41:00,499
they just say we have we have one sale

00:40:58,039 --> 00:41:02,690
per second the ones 10 sales per second

00:41:00,499 --> 00:41:05,690
or whatever or one cent per minute and

00:41:02,690 --> 00:41:09,710
then you track those things religiously

00:41:05,690 --> 00:41:11,630
all the time the whole put up a big TV

00:41:09,710 --> 00:41:14,150
screen on the wall and keep seeing you

00:41:11,630 --> 00:41:17,509
rotating through those graphs eight or

00:41:14,150 --> 00:41:20,329
ten KPIs max I prefer maybe three or

00:41:17,509 --> 00:41:21,019
four and see if these metrics are in

00:41:20,329 --> 00:41:23,480
good shape

00:41:21,019 --> 00:41:26,569
the overall operation is in good shape

00:41:23,480 --> 00:41:29,210
we don't have to worry if one of if

00:41:26,569 --> 00:41:33,499
those metrics start going wrong but

00:41:29,210 --> 00:41:36,619
all-hands-on-deck ship is shrinking so

00:41:33,499 --> 00:41:38,690
your metrics if you know what your KPIs

00:41:36,619 --> 00:41:39,980
are and those you can define right from

00:41:38,690 --> 00:41:44,119
the top of the business level saying

00:41:39,980 --> 00:41:46,430
this is what we want to track it gives

00:41:44,119 --> 00:41:48,079
you extremely useful information in

00:41:46,430 --> 00:41:50,059
terms of saying oh here's my feedback

00:41:48,079 --> 00:41:52,640
loop but before the customer is calling

00:41:50,059 --> 00:41:54,650
it before before help desk calls you you

00:41:52,640 --> 00:41:58,069
can go and say up something is going

00:41:54,650 --> 00:42:00,980
wrong here you can also have your it

00:41:58,069 --> 00:42:03,049
helps if you have say a an internal IRC

00:42:00,980 --> 00:42:05,450
I am jabber server whatever that a lot

00:42:03,049 --> 00:42:07,519
of people are allowed access to because

00:42:05,450 --> 00:42:09,890
then a user can simply just go and

00:42:07,519 --> 00:42:10,789
complain in the helpdesk room and oh I

00:42:09,890 --> 00:42:13,999
have a problem

00:42:10,789 --> 00:42:17,089
bla watching a ticket let the helpdesk

00:42:13,999 --> 00:42:17,780
do that and then you go home okay that's

00:42:17,089 --> 00:42:19,820
odd

00:42:17,780 --> 00:42:21,500
or customer service hops into our jabber

00:42:19,820 --> 00:42:23,240
channel and says we have a lot of

00:42:21,500 --> 00:42:27,350
customers complaining that we cannot

00:42:23,240 --> 00:42:29,690
that they cannot book rooms this was New

00:42:27,350 --> 00:42:32,390
Year's Eve well this was actually no

00:42:29,690 --> 00:42:34,730
this was New Year's Day and the bug was

00:42:32,390 --> 00:42:38,360
that someone had fixed the time date

00:42:34,730 --> 00:42:39,770
time routines and the clocks were in a

00:42:38,360 --> 00:42:41,930
different time zone so when the clock

00:42:39,770 --> 00:42:43,850
switched to the New Year all have

00:42:41,930 --> 00:42:46,550
availability for the older was basically

00:42:43,850 --> 00:42:50,090
zero and the u.s. is later in the day so

00:42:46,550 --> 00:42:53,270
us customers couldn't do bookings for in

00:42:50,090 --> 00:42:54,770
a very big sales day so customer service

00:42:53,270 --> 00:42:58,010
calls us and goes yep we have a problem

00:42:54,770 --> 00:43:00,770
look at it oh crap here's the graph

00:42:58,010 --> 00:43:04,160
difference growl of developers roller

00:43:00,770 --> 00:43:08,360
fix into production around got a call at

00:43:04,160 --> 00:43:10,220
12:30 production was fixed at 1 so

00:43:08,360 --> 00:43:12,520
that's how fast you can do it if you

00:43:10,220 --> 00:43:15,560
have a system that is set up for

00:43:12,520 --> 00:43:18,320
production deployments all the time or

00:43:15,560 --> 00:43:20,090
on the other hand you can my plate my

00:43:18,320 --> 00:43:22,160
current place had a complaint last year

00:43:20,090 --> 00:43:25,430
where they found a bug in a Apache a

00:43:22,160 --> 00:43:29,600
rewrite rule the bug fix from detection

00:43:25,430 --> 00:43:34,190
to actual fix one are getting it into

00:43:29,600 --> 00:43:36,020
production six weeks why because it

00:43:34,190 --> 00:43:37,940
spend time and test it spend time in

00:43:36,020 --> 00:43:40,160
acceptance it spend time in performance

00:43:37,940 --> 00:43:42,290
testing and then finally after going

00:43:40,160 --> 00:43:44,600
through all those validation stages it

00:43:42,290 --> 00:43:47,140
went into production because no one

00:43:44,600 --> 00:43:49,790
wants to do an emergency rollout right

00:43:47,140 --> 00:43:52,850
so you make sure that no rollout is ever

00:43:49,790 --> 00:43:55,130
an emergency rollout if even if you do

00:43:52,850 --> 00:43:57,620
it at four o'clock in the morning with

00:43:55,130 --> 00:44:00,470
no one else around please to our

00:43:57,620 --> 00:44:02,540
developer who did that for at four

00:44:00,470 --> 00:44:04,400
o'clock in the morning ever I just

00:44:02,540 --> 00:44:07,540
finished writing code let me push this

00:44:04,400 --> 00:44:09,800
into production before I go to bed

00:44:07,540 --> 00:44:11,420
you push it into production you make

00:44:09,800 --> 00:44:13,670
sure that there are no errors being

00:44:11,420 --> 00:44:15,110
generated nothing is broken if

00:44:13,670 --> 00:44:20,990
everything is good for half an hour

00:44:15,110 --> 00:44:23,210
you're probably good to go to bed you

00:44:20,990 --> 00:44:25,190
know that was the thing it wasn't his

00:44:23,210 --> 00:44:27,950
usual problems for that he would make a

00:44:25,190 --> 00:44:29,750
database level code change and then that

00:44:27,950 --> 00:44:31,370
would show up in a bug somewhere three

00:44:29,750 --> 00:44:31,579
weeks down the line in another develop

00:44:31,370 --> 00:44:34,609
my

00:44:31,579 --> 00:44:36,979
team and they'll go with what what

00:44:34,609 --> 00:44:38,150
changed here oh I fixed this routine so

00:44:36,979 --> 00:44:40,640
that it would actually do the right

00:44:38,150 --> 00:44:43,369
thing and you no longer need to fix

00:44:40,640 --> 00:44:47,509
stuff in your on your side or we can get

00:44:43,369 --> 00:44:50,269
rid of some more code easy fixes but no

00:44:47,509 --> 00:45:01,989
complexity at all and worst case

00:44:50,269 --> 00:45:04,819
scenario just roll back so what kind of

00:45:01,989 --> 00:45:07,309
organizational requirements do you see

00:45:04,819 --> 00:45:11,719
necessary for having an organization

00:45:07,309 --> 00:45:14,150
we're failing is part of business well I

00:45:11,719 --> 00:45:15,890
mean I would just say that people who

00:45:14,150 --> 00:45:17,299
are willing to accept that they're doing

00:45:15,890 --> 00:45:21,680
product development and not

00:45:17,299 --> 00:45:24,229
manufacturing it's which is why that

00:45:21,680 --> 00:45:27,079
book out there is I put that book image

00:45:24,229 --> 00:45:28,700
there it if people have read the goal

00:45:27,079 --> 00:45:30,279
that the principles of product

00:45:28,700 --> 00:45:33,069
development flow is roughly the

00:45:30,279 --> 00:45:37,309
analogous thing for product development

00:45:33,069 --> 00:45:39,170
it's mostly research your you need to

00:45:37,309 --> 00:45:41,900
run enough experiments to be learning

00:45:39,170 --> 00:45:44,390
something and you need to be able to say

00:45:41,900 --> 00:45:47,719
well not all experiments are going to be

00:45:44,390 --> 00:45:49,910
successful if you are doing R&D not

00:45:47,719 --> 00:45:51,380
everything works but then you find that

00:45:49,910 --> 00:45:53,799
one thing that works and then you

00:45:51,380 --> 00:45:58,910
certainly have a whole new industry

00:45:53,799 --> 00:46:00,969
light bulbs ten thousand tests one of

00:45:58,910 --> 00:46:03,680
them succeeded and that was good enough

00:46:00,969 --> 00:46:06,079
right at least that's the way the story

00:46:03,680 --> 00:46:08,809
goes so people have to realize that

00:46:06,079 --> 00:46:11,410
they're in a software at least they are

00:46:08,809 --> 00:46:13,910
not doing manufacturing the analogy is

00:46:11,410 --> 00:46:16,369
software product development or its

00:46:13,910 --> 00:46:19,640
product development so you have to go

00:46:16,369 --> 00:46:22,699
and test I think I have a link there

00:46:19,640 --> 00:46:24,529
oops okay fine so there's a different so

00:46:22,699 --> 00:46:26,359
there is a kpn paper out there where

00:46:24,529 --> 00:46:28,369
they ended up saying we have an

00:46:26,359 --> 00:46:30,920
application we ended up having to test

00:46:28,369 --> 00:46:32,569
an application in production because we

00:46:30,920 --> 00:46:35,269
didn't know what our customers wanted

00:46:32,569 --> 00:46:37,880
and this is a MOOC this is a mobile

00:46:35,269 --> 00:46:41,209
company with a which is writing a custom

00:46:37,880 --> 00:46:43,219
application and then they found out a

00:46:41,209 --> 00:46:45,580
whole bunch of interesting bugs that

00:46:43,219 --> 00:46:48,530
though you would never think about

00:46:45,580 --> 00:46:50,420
like Oh people are trying to log in and

00:46:48,530 --> 00:46:52,190
it doesn't work oh because they're using

00:46:50,420 --> 00:46:54,680
the site password instead of a special

00:46:52,190 --> 00:46:58,340
key maybe we should have that word

00:46:54,680 --> 00:47:01,820
better that sort of thing so you if you

00:46:58,340 --> 00:47:05,690
have that mindset throughout the

00:47:01,820 --> 00:47:08,840
organization it works it helps to be I

00:47:05,690 --> 00:47:11,390
have blameless culture well that's

00:47:08,840 --> 00:47:13,010
pretty much a necessity because is

00:47:11,390 --> 00:47:15,350
going to happen and if you start cursing

00:47:13,010 --> 00:47:17,720
out people instead of saying okay

00:47:15,350 --> 00:47:19,910
what can we learn from this you are dead

00:47:17,720 --> 00:47:23,270
in the water because nobody is going to

00:47:19,910 --> 00:47:25,580
be willing to accept blame for because

00:47:23,270 --> 00:47:28,400
then they go and say you have a lot of

00:47:25,580 --> 00:47:29,810
testing and you want to be have a bunch

00:47:28,400 --> 00:47:33,200
of people who are willing to take

00:47:29,810 --> 00:47:35,780
smaller risks rather than saying let's

00:47:33,200 --> 00:47:38,930
deliver perfect software let's deliver

00:47:35,780 --> 00:47:41,210
something that is good enough is a

00:47:38,930 --> 00:47:44,810
mindset that has to purr way through the

00:47:41,210 --> 00:47:47,660
to the entire organization it's not just

00:47:44,810 --> 00:47:50,630
limited to development and IT has to be

00:47:47,660 --> 00:47:53,600
threw out because if you cannot convince

00:47:50,630 --> 00:47:55,960
your managers that this is a better

00:47:53,600 --> 00:47:59,450
option of better way of doing things

00:47:55,960 --> 00:48:02,030
it's not going to fly at all because

00:47:59,450 --> 00:48:05,210
then any bug is going to be you are

00:48:02,030 --> 00:48:08,060
doing things wrong roll it back this is

00:48:05,210 --> 00:48:09,710
an organizational process change you

00:48:08,060 --> 00:48:12,230
have to build your organization from the

00:48:09,710 --> 00:48:14,000
ground up or make sure that people do

00:48:12,230 --> 00:48:17,030
know are willing to say let's try this

00:48:14,000 --> 00:48:18,440
and see at least for long enough until

00:48:17,030 --> 00:48:19,780
you can prove that it works or doesn't

00:48:18,440 --> 00:48:22,580
work

00:48:19,780 --> 00:48:26,540
stevia had an excellent post about this

00:48:22,580 --> 00:48:28,010
from back in anything 2003 2004 if you

00:48:26,540 --> 00:48:29,480
want to search for it the terms

00:48:28,010 --> 00:48:32,890
serveware which he was trying to

00:48:29,480 --> 00:48:36,400
popularize it's a very long read though

00:48:32,890 --> 00:48:38,780
but again it's a Steve Yeager blog post

00:48:36,400 --> 00:48:41,930
for those of you don't know him he likes

00:48:38,780 --> 00:48:44,510
to write really long rants as a

00:48:41,930 --> 00:48:47,060
follow-up to martin farms question about

00:48:44,510 --> 00:48:50,300
the corporate culture don't you also

00:48:47,060 --> 00:48:52,250
have to have people knowing what they're

00:48:50,300 --> 00:48:54,860
doing all the way through which is

00:48:52,250 --> 00:48:58,100
strong requirement in my opinion because

00:48:54,860 --> 00:48:59,020
you need to know what you are going to

00:48:58,100 --> 00:49:03,580
influence by every

00:48:59,020 --> 00:49:05,440
single line of code of change well so

00:49:03,580 --> 00:49:07,990
you have so you know what you're

00:49:05,440 --> 00:49:10,030
monitoring right but at that point you

00:49:07,990 --> 00:49:12,250
also say if you don't have people who

00:49:10,030 --> 00:49:14,260
know what they're doing then you had

00:49:12,250 --> 00:49:19,120
better envy investing time and training

00:49:14,260 --> 00:49:22,960
them it's not like any one of us knows

00:49:19,120 --> 00:49:25,870
everything so you have to be willing to

00:49:22,960 --> 00:49:28,420
train people and help them adjust into a

00:49:25,870 --> 00:49:33,070
culture where they can take these risks

00:49:28,420 --> 00:49:34,750
and learn and but if you have people who

00:49:33,070 --> 00:49:36,900
don't know what they're doing and you

00:49:34,750 --> 00:49:42,940
let let them lose on production well

00:49:36,900 --> 00:49:44,980
it's a risk but usually you start off by

00:49:42,940 --> 00:49:47,500
saying having people make really small

00:49:44,980 --> 00:49:50,560
changes and then they can grow into

00:49:47,500 --> 00:49:53,080
making bigger changes so you change one

00:49:50,560 --> 00:49:55,930
line of code oh here this fixed file

00:49:53,080 --> 00:49:58,690
change this to this this is what we

00:49:55,930 --> 00:50:00,490
expect it to change pair you can pair

00:49:58,690 --> 00:50:02,470
pair program initially with someone

00:50:00,490 --> 00:50:03,610
senior but that's again how you

00:50:02,470 --> 00:50:08,200
introduce people into the organization

00:50:03,610 --> 00:50:10,120
as well so you will say oh these are the

00:50:08,200 --> 00:50:12,840
corporate standards here this is how we

00:50:10,120 --> 00:50:16,720
do testing this is what we expect to see

00:50:12,840 --> 00:50:18,400
good enough well it is harder to train

00:50:16,720 --> 00:50:20,830
people to write good commit messages

00:50:18,400 --> 00:50:23,440
than to write code that works if you are

00:50:20,830 --> 00:50:24,730
a semi competent software developer you

00:50:23,440 --> 00:50:26,890
will be able to write code that works

00:50:24,730 --> 00:50:29,830
you might not be the fastest person in

00:50:26,890 --> 00:50:32,800
the block but that's fine no one says

00:50:29,830 --> 00:50:36,270
you have to write code faster as long as

00:50:32,800 --> 00:50:36,270
it gets the production fast enough

00:50:36,330 --> 00:50:41,740
perfection is not a requirement it has

00:50:39,100 --> 00:50:44,830
to be good enough you have duplicated

00:50:41,740 --> 00:50:49,240
code fine because you are going to end

00:50:44,830 --> 00:50:50,800
up rewriting this code you can duplicate

00:50:49,240 --> 00:50:54,400
code you can it doesn't you don't have

00:50:50,800 --> 00:50:56,320
to be perfect that's what I'm saying you

00:50:54,400 --> 00:50:58,900
don't need to know all the details of

00:50:56,320 --> 00:51:02,170
what will be impacted it is a risk the

00:50:58,900 --> 00:51:03,850
organization is willing to take and you

00:51:02,170 --> 00:51:05,560
can then say well we do not want a

00:51:03,850 --> 00:51:08,470
monolithic app how do you reduce risk

00:51:05,560 --> 00:51:10,240
well let's make it a micro Service split

00:51:08,470 --> 00:51:12,020
into services make it a micro service

00:51:10,240 --> 00:51:14,960
whatever

00:51:12,020 --> 00:51:17,770
or the best part of it is well why are

00:51:14,960 --> 00:51:20,450
we writing code to do this let's not

00:51:17,770 --> 00:51:22,280
because you know you don't have to not

00:51:20,450 --> 00:51:25,550
all problems necessarily need a code

00:51:22,280 --> 00:51:28,220
solution you can always find an

00:51:25,550 --> 00:51:30,140
alternative way of doing things and if

00:51:28,220 --> 00:51:32,750
you can find a way that doesn't need

00:51:30,140 --> 00:51:34,640
code to run on production well there's

00:51:32,750 --> 00:51:41,660
nothing as fast as code that doesn't

00:51:34,640 --> 00:51:44,030
exist I mean I have literally seen new

00:51:41,660 --> 00:51:46,340
juniors coming into an organization and

00:51:44,030 --> 00:51:50,390
doing a code deploy in like day three or

00:51:46,340 --> 00:51:52,010
day four and we go over that's normal so

00:51:50,390 --> 00:51:54,619
this is a new person

00:51:52,010 --> 00:51:56,570
what does they want yeah why the hell

00:51:54,619 --> 00:51:58,580
and then there we got this new guy at

00:51:56,570 --> 00:52:00,890
booking who goes getting root access to

00:51:58,580 --> 00:52:04,400
a bunch of systems and you're like hang

00:52:00,890 --> 00:52:06,730
on this is not acceptable why is this

00:52:04,400 --> 00:52:09,740
guy hitting you root when he's new

00:52:06,730 --> 00:52:12,520
otherwise culture is oh you need access

00:52:09,740 --> 00:52:17,900
to a box here have access to production

00:52:12,520 --> 00:52:20,119
accept a certain set of boxes you want

00:52:17,900 --> 00:52:28,250
to debug in production go for it just a

00:52:20,119 --> 00:52:31,010
testing Network anyway anyone else I

00:52:28,250 --> 00:52:37,220
think we have time yeah we have 10

00:52:31,010 --> 00:52:41,420
minutes left so otherwise this coffee

00:52:37,220 --> 00:52:45,280
coffee break and yeah thank you left us

00:52:41,420 --> 00:52:45,280

YouTube URL: https://www.youtube.com/watch?v=7Hzhtpl1_JU


