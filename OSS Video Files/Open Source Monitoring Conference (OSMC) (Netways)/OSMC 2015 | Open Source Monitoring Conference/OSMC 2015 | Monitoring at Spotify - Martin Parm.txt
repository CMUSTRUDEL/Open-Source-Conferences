Title: OSMC 2015 | Monitoring at Spotify - Martin Parm
Publication date: 2015-11-27
Playlist: OSMC 2015 | Open Source Monitoring Conference
Description: 
	When Spotify started in 2006, with just 20 people, they were more worried about selling the idea of music streaming than of setting up monitoring systems. Fast forward to 2015 and

more than 400 engineers are collecting more than 30 million time series from more than 10000 hosts; so how did we get here? The journey has been a long one, with plenty of false starts and growing pains, from scaling systems to scaling teams to scaling the business itself; challenging what we thought we knew about operational monitoring at every step.

This talk is about some of the more interesting challenges we've faced along the way, and about what we've learned so far; covering some of the technical details but primarily focusing on the human aspects, and how our monitoring solutions have both shaped and been shaped by organizational structures and changing engineering practices.
Captions: 
	00:00:09,310 --> 00:00:15,820
okay I think we're ready we continue

00:00:12,430 --> 00:00:19,029
with the next talk our speaker is Martin

00:00:15,820 --> 00:00:26,910
parm and he's talking about monitoring

00:00:19,029 --> 00:00:26,910
at spotify have fun good morning and

00:00:27,450 --> 00:00:36,430
welcome after last night hope you enjoy

00:00:31,390 --> 00:00:40,290
it as much as me how many none german

00:00:36,430 --> 00:00:40,290
speakers are in the room show of hands i

00:00:40,620 --> 00:00:49,980
enjoyed the music as well but had you

00:00:42,970 --> 00:00:52,120
any idea what he was talking about so um

00:00:49,980 --> 00:00:54,610
i'm gonna try something i haven't tried

00:00:52,120 --> 00:01:00,520
in a while i'm going to give a

00:00:54,610 --> 00:01:02,080
non-technical talk there's going to be

00:01:00,520 --> 00:01:06,040
probably the least technical talk you're

00:01:02,080 --> 00:01:07,360
here today probably also yesterday it's

00:01:06,040 --> 00:01:10,450
going to be probably one of the most

00:01:07,360 --> 00:01:14,920
boring slight sets because i want you to

00:01:10,450 --> 00:01:16,920
pay attention to what i have to say i'm

00:01:14,920 --> 00:01:19,539
not going to show you a lot of

00:01:16,920 --> 00:01:21,159
screenshots not going to show you a lot

00:01:19,539 --> 00:01:24,429
of demos not actually you going to show

00:01:21,159 --> 00:01:25,899
you anything most i'm not actually going

00:01:24,429 --> 00:01:30,729
to talk all that much about technology

00:01:25,899 --> 00:01:33,100
i'm going to talk about people and i'm

00:01:30,729 --> 00:01:35,049
going to talk about the story of how

00:01:33,100 --> 00:01:39,429
monitoring a spot if i came to be what

00:01:35,049 --> 00:01:41,499
it is today because we felt we learned a

00:01:39,429 --> 00:01:43,389
lot on the way and hopefully someone

00:01:41,499 --> 00:01:48,219
else will learn something too and the

00:01:43,389 --> 00:01:50,889
people part is interesting because when

00:01:48,219 --> 00:01:54,009
we go to these talks we hear about new

00:01:50,889 --> 00:01:57,189
systems new solutions thing that's

00:01:54,009 --> 00:01:59,139
things that scale that's fantastic and

00:01:57,189 --> 00:02:02,649
you go in the corridors and you hear

00:01:59,139 --> 00:02:04,749
people talking about people the same old

00:02:02,649 --> 00:02:06,639
conversations with management they won't

00:02:04,749 --> 00:02:08,860
allow you to install the new shiny

00:02:06,639 --> 00:02:11,319
monitoring system your developers that

00:02:08,860 --> 00:02:16,510
don't understand why mantra is in it is

00:02:11,319 --> 00:02:20,920
important and the thing is monitoring is

00:02:16,510 --> 00:02:22,300
a tool it's not a goal it's not a thing

00:02:20,920 --> 00:02:24,880
in itself

00:02:22,300 --> 00:02:26,980
and it's through and by people and no

00:02:24,880 --> 00:02:29,230
solution is really better than the

00:02:26,980 --> 00:02:35,140
people serving so let's talk about the

00:02:29,230 --> 00:02:38,350
people so a little bit about myself um

00:02:35,140 --> 00:02:43,780
I'm living in Sweden but I'm actually

00:02:38,350 --> 00:02:48,040
Danish I'm 36 I'm not as old as some of

00:02:43,780 --> 00:02:50,650
the old-timers I've met I'm not the

00:02:48,040 --> 00:02:54,670
youngest one either i'm in this width in

00:02:50,650 --> 00:02:57,700
the middle I have a degree in computer

00:02:54,670 --> 00:03:01,120
science from Quebec university where i

00:02:57,700 --> 00:03:04,420
also had my first operation job it's

00:03:01,120 --> 00:03:07,810
probably story you heard before managing

00:03:04,420 --> 00:03:11,430
the university network i joined spotify

00:03:07,810 --> 00:03:16,060
in 2012 working with the infrastructure

00:03:11,430 --> 00:03:18,030
i joined monitoring in 2014 and for

00:03:16,060 --> 00:03:21,460
about a year i've actually been the

00:03:18,030 --> 00:03:28,950
product owner for monitoring up until

00:03:21,460 --> 00:03:31,600
then I was an engineer so let's see here

00:03:28,950 --> 00:03:33,250
so first the disclaimer I'm gonna

00:03:31,600 --> 00:03:37,510
mention a bunch of software because

00:03:33,250 --> 00:03:38,920
software is part of the story I'm gonna

00:03:37,510 --> 00:03:41,670
say positive things and negative things

00:03:38,920 --> 00:03:46,480
this is all in the context of our

00:03:41,670 --> 00:03:48,370
journey our story our needs so I'm not

00:03:46,480 --> 00:03:50,440
gonna have advertised for any piece of

00:03:48,370 --> 00:03:53,410
software and I'm not anything I'm saying

00:03:50,440 --> 00:03:58,330
bad is not necessarily dismissing any pc

00:03:53,410 --> 00:04:00,970
software um but it's easier to say

00:03:58,330 --> 00:04:03,310
something sucks then saying this

00:04:00,970 --> 00:04:05,470
particular version of this software did

00:04:03,310 --> 00:04:07,420
not scale for our particular use case in

00:04:05,470 --> 00:04:09,190
this part in this point of history where

00:04:07,420 --> 00:04:17,260
we had these problems because there

00:04:09,190 --> 00:04:20,320
would be a very long talk and also

00:04:17,260 --> 00:04:22,030
another thing in I'm going to talk about

00:04:20,320 --> 00:04:23,710
what we're doing is not a sales pitch

00:04:22,030 --> 00:04:26,950
for our solution keep in mind that our

00:04:23,710 --> 00:04:28,419
solution is built for our needs we share

00:04:26,950 --> 00:04:30,789
it with you because someone might find

00:04:28,419 --> 00:04:33,360
it useful but don't take it as well this

00:04:30,789 --> 00:04:33,360
is the way you do it

00:04:34,689 --> 00:04:41,610
so I'm Spotify let's talk about who we

00:04:37,389 --> 00:04:44,949
actually are on what we do so we're

00:04:41,610 --> 00:04:47,949
music streaming service um you all know

00:04:44,949 --> 00:04:50,519
that hopefully but more importantly

00:04:47,949 --> 00:04:53,979
we're actually music discovery as well

00:04:50,519 --> 00:04:55,239
we it's very little part of our

00:04:53,979 --> 00:04:57,399
infrastructure that has to do when I

00:04:55,239 --> 00:04:59,799
keep serving you the music most of it

00:04:57,399 --> 00:05:02,319
has to do with telling you which music

00:04:59,799 --> 00:05:09,519
that you actually like before you know

00:05:02,319 --> 00:05:12,009
it we have a number of clients we have a

00:05:09,519 --> 00:05:18,039
number of partner integrations all these

00:05:12,009 --> 00:05:21,189
nice numbers 20 million paid users 75

00:05:18,039 --> 00:05:22,389
million daily active users given back so

00:05:21,189 --> 00:05:24,039
it's as much money these are these are

00:05:22,389 --> 00:05:27,309
numbers official numbers they are from

00:05:24,039 --> 00:05:30,489
doom and the point of this is just to

00:05:27,309 --> 00:05:32,889
say that we serve a lot of uses all the

00:05:30,489 --> 00:05:37,959
time we can write a lot of traffic we

00:05:32,889 --> 00:05:42,699
have a huge system that's it we are

00:05:37,959 --> 00:05:44,319
organized in four major tech officers we

00:05:42,699 --> 00:05:46,089
also have small sales offices around the

00:05:44,319 --> 00:05:52,479
world but technology is physically

00:05:46,089 --> 00:05:55,839
actually in in in in tech officers we

00:05:52,479 --> 00:05:58,899
have around 1500 people worldwide around

00:05:55,839 --> 00:06:00,339
half of them work in technology 100 of

00:05:58,899 --> 00:06:03,309
those people around hundreds these

00:06:00,339 --> 00:06:06,939
people work in infrastructure building

00:06:03,309 --> 00:06:08,499
infrastructure so little bit of math at

00:06:06,939 --> 00:06:11,429
the roughly 100 people building

00:06:08,499 --> 00:06:14,739
infrastructure alone and then another

00:06:11,429 --> 00:06:17,499
six seven eight hundred building the

00:06:14,739 --> 00:06:19,449
rest of the technology and six of those

00:06:17,499 --> 00:06:24,399
engineers are building monitoring and

00:06:19,449 --> 00:06:25,929
just monitoring we have four physical

00:06:24,399 --> 00:06:31,949
data centers in the world we have around

00:06:25,929 --> 00:06:35,349
10,000 servers those 10,000 service is

00:06:31,949 --> 00:06:39,009
built is serving the music service it's

00:06:35,349 --> 00:06:42,119
a micro service in structure meaning

00:06:39,009 --> 00:06:46,659
that we have a large number of tiny

00:06:42,119 --> 00:06:47,560
services that does one thing very well

00:06:46,659 --> 00:06:49,210
and these

00:06:47,560 --> 00:06:52,090
services should hopefully be able to

00:06:49,210 --> 00:06:54,970
fail independently so if the say the

00:06:52,090 --> 00:06:57,280
place the the playlist service fails

00:06:54,970 --> 00:06:59,860
then sure you can't browse your playlist

00:06:57,280 --> 00:07:02,889
but you can still streaming music if the

00:06:59,860 --> 00:07:04,600
metadata service fails well maybe you

00:07:02,889 --> 00:07:05,830
don't get the album cover for the song

00:07:04,600 --> 00:07:09,820
you're listening to but you can still

00:07:05,830 --> 00:07:11,950
hear it or add it to your playlist this

00:07:09,820 --> 00:07:14,770
is simple consequence when you have

00:07:11,950 --> 00:07:16,810
something is rather complex and rather

00:07:14,770 --> 00:07:20,229
big then statistically some part of it

00:07:16,810 --> 00:07:22,600
will always be broken so need to manage

00:07:20,229 --> 00:07:25,620
dependent ace but it also means that

00:07:22,600 --> 00:07:29,410
yeah we have more than a thousand

00:07:25,620 --> 00:07:33,310
different types of machines in this data

00:07:29,410 --> 00:07:37,450
center um every one of them doing

00:07:33,310 --> 00:07:44,470
something unique and mostly running

00:07:37,450 --> 00:07:45,760
ubuntu linux just for reference we're

00:07:44,470 --> 00:07:46,960
running with a model called ups and

00:07:45,760 --> 00:07:48,850
squats and going to talk a lot more

00:07:46,960 --> 00:07:50,710
about that which basically means that

00:07:48,850 --> 00:07:53,380
the feature team that developed these

00:07:50,710 --> 00:07:56,020
micro services are responsible for

00:07:53,380 --> 00:07:57,750
operating them as well so you have a

00:07:56,020 --> 00:08:00,640
team developers they develop something

00:07:57,750 --> 00:08:02,680
they are in charge of installing it

00:08:00,640 --> 00:08:03,789
figure out what they need capacity wise

00:08:02,680 --> 00:08:06,970
they are in charge of their own

00:08:03,789 --> 00:08:07,990
monitoring they're in charge of being

00:08:06,970 --> 00:08:13,169
walking off in the middle of the night

00:08:07,990 --> 00:08:16,479
when something is broken and fix it and

00:08:13,169 --> 00:08:18,010
so monitoring is not monitoring team

00:08:16,479 --> 00:08:19,720
monitoring everything it's monitoring

00:08:18,010 --> 00:08:23,919
providing monitoring as the self-service

00:08:19,720 --> 00:08:27,580
product for these teams we currently

00:08:23,919 --> 00:08:29,020
have two monitoring systems and the most

00:08:27,580 --> 00:08:31,150
interesting one of these monitoring

00:08:29,020 --> 00:08:34,240
systems is the time series database that

00:08:31,150 --> 00:08:40,419
currently has 100 million times errors

00:08:34,240 --> 00:08:44,730
in it which is some a big number other

00:08:40,419 --> 00:08:47,020
companies have more data than us but

00:08:44,730 --> 00:08:49,930
more interesting is how did we get to

00:08:47,020 --> 00:08:51,610
you so it started back in 2006 I'm gonna

00:08:49,930 --> 00:08:53,170
go briefly over the first bit of the

00:08:51,610 --> 00:08:54,550
history both because it's not so

00:08:53,170 --> 00:08:57,250
interesting but also because I wasn't

00:08:54,550 --> 00:08:59,620
actually there to experience it so this

00:08:57,250 --> 00:09:02,130
is a me having talked with all timers in

00:08:59,620 --> 00:09:02,130
the company

00:09:02,190 --> 00:09:09,040
so just remind you that this is a

00:09:04,570 --> 00:09:14,019
different time no cloud computing are no

00:09:09,040 --> 00:09:16,480
smartphones and cloud apps was only

00:09:14,019 --> 00:09:20,079
really starting to come out so it was

00:09:16,480 --> 00:09:22,060
mostly like ez's and laptops the

00:09:20,079 --> 00:09:29,529
internet was the thing the rest of it

00:09:22,060 --> 00:09:31,660
came later back then some are india news

00:09:29,529 --> 00:09:36,910
got the idea to start a music streaming

00:09:31,660 --> 00:09:40,449
service so they got together and exactly

00:09:36,910 --> 00:09:42,040
been too quick that one that one got

00:09:40,449 --> 00:09:44,350
together and started building this

00:09:42,040 --> 00:09:49,110
service and of course these people were

00:09:44,350 --> 00:09:52,209
trying to build everything at once and

00:09:49,110 --> 00:09:56,370
so monitoring actually came pretty early

00:09:52,209 --> 00:09:59,320
in the process but what's interesting is

00:09:56,370 --> 00:10:01,630
how the awareness in the company came to

00:09:59,320 --> 00:10:06,160
be because the company at the time weird

00:10:01,630 --> 00:10:08,500
like talking 20 people so it wasn't like

00:10:06,160 --> 00:10:09,970
teams having meetings it was the company

00:10:08,500 --> 00:10:11,350
having a meeting the whole company could

00:10:09,970 --> 00:10:15,029
sit together I have a meeting about the

00:10:11,350 --> 00:10:17,769
whole company which is ridiculous today

00:10:15,029 --> 00:10:19,329
and so back then they were actually very

00:10:17,769 --> 00:10:20,709
good meeting notes of those meetings

00:10:19,329 --> 00:10:22,630
what people were interested in and

00:10:20,709 --> 00:10:24,160
interesting is that the first mention of

00:10:22,630 --> 00:10:25,680
monitoring system was not when someone

00:10:24,160 --> 00:10:28,630
said oh we should probably monitor this

00:10:25,680 --> 00:10:30,459
it was not when someone say oh so what

00:10:28,630 --> 00:10:32,800
it would solution should we pick someone

00:10:30,459 --> 00:10:34,870
just picked it in solar the first time

00:10:32,800 --> 00:10:36,610
that the company outside a person

00:10:34,870 --> 00:10:38,889
starting the monitoring system got

00:10:36,610 --> 00:10:42,760
awareness of monitoring was monitoring

00:10:38,889 --> 00:10:44,740
fatigue you'll did care about monitoring

00:10:42,760 --> 00:10:50,920
until I started spamming them you

00:10:44,740 --> 00:10:52,720
probably heard this before anyway um so

00:10:50,920 --> 00:10:54,970
the first graphing system we had was

00:10:52,720 --> 00:10:57,100
something called citement it was a in

00:10:54,970 --> 00:11:04,110
house built system it was basically

00:10:57,100 --> 00:11:07,779
muninn but with a custom front end so um

00:11:04,110 --> 00:11:12,519
nonin you probably know muninn well

00:11:07,779 --> 00:11:14,050
enough um pull based solution writing to

00:11:12,519 --> 00:11:16,990
our d files

00:11:14,050 --> 00:11:19,390
multiple resolution is created by

00:11:16,990 --> 00:11:24,370
writing to multiple our d files and so

00:11:19,390 --> 00:11:27,180
on so forth the nature of the system was

00:11:24,370 --> 00:11:29,470
that it generate a lot of static graphs

00:11:27,180 --> 00:11:31,360
the resolution wasn't that high in about

00:11:29,470 --> 00:11:32,980
five minutes and it was one dashboard

00:11:31,360 --> 00:11:36,220
for the whole company to look at so

00:11:32,980 --> 00:11:38,170
everyone working on on on on the back

00:11:36,220 --> 00:11:40,930
end will look at the same graphs and the

00:11:38,170 --> 00:11:43,390
most interesting metric there was beggin

00:11:40,930 --> 00:11:46,149
request failures so we have a micro

00:11:43,390 --> 00:11:48,730
service infrastructure where your client

00:11:46,149 --> 00:11:50,079
talks to to something called an access

00:11:48,730 --> 00:11:51,640
point and the access point will then

00:11:50,079 --> 00:11:53,140
talk to all these services and one of

00:11:51,640 --> 00:11:55,000
these fit when these services start to

00:11:53,140 --> 00:11:57,579
fail that would generate a back-end

00:11:55,000 --> 00:11:59,140
request failure and we count those and

00:11:57,579 --> 00:12:01,570
when those starts going up boom

00:11:59,140 --> 00:12:06,519
something's robin but everyone was

00:12:01,570 --> 00:12:12,370
looking at the same grass what about a

00:12:06,519 --> 00:12:14,950
loading though I talked to Emel was it

00:12:12,370 --> 00:12:17,260
like the third person in the company and

00:12:14,950 --> 00:12:18,700
this is what he said the very first

00:12:17,260 --> 00:12:20,740
loading system we had was literally a

00:12:18,700 --> 00:12:22,480
guy sitting looking at graphs not

00:12:20,740 --> 00:12:24,220
because someone had told him to or paid

00:12:22,480 --> 00:12:25,450
him to but because he had a view was

00:12:24,220 --> 00:12:27,570
very interested in making sure that

00:12:25,450 --> 00:12:29,350
everything worked and he apparently

00:12:27,570 --> 00:12:31,089
spend a lot of time in front of his

00:12:29,350 --> 00:12:32,410
computer so he was looking at graphs all

00:12:31,089 --> 00:12:37,110
the time and when something else wrong

00:12:32,410 --> 00:12:41,709
he would call you this is how it worked

00:12:37,110 --> 00:12:47,890
not very scalable of course but hey we

00:12:41,709 --> 00:12:49,360
still here so the first steps with a

00:12:47,890 --> 00:12:51,399
loading actually happened after our

00:12:49,360 --> 00:12:54,130
launch we launched in in Sweden and UK

00:12:51,399 --> 00:12:57,220
first the first time was was scared

00:12:54,130 --> 00:12:59,410
because it was it was all new but some

00:12:57,220 --> 00:13:02,410
things were easier to control because um

00:12:59,410 --> 00:13:05,890
the service actually launched as an

00:13:02,410 --> 00:13:08,829
invite-only service so we could scale up

00:13:05,890 --> 00:13:10,870
our traffic when we had the capacity so

00:13:08,829 --> 00:13:13,660
we had capacity for more users we send

00:13:10,870 --> 00:13:18,459
out more invites a luxury that you don't

00:13:13,660 --> 00:13:20,260
have once you go live but of course this

00:13:18,459 --> 00:13:24,820
looking at graphs doesn't didn't work so

00:13:20,260 --> 00:13:26,949
we installed some pics um a lot was sent

00:13:24,820 --> 00:13:27,760
we had a classical division we have some

00:13:26,949 --> 00:13:30,010
people who were

00:13:27,760 --> 00:13:33,370
who were mostly operations and some were

00:13:30,010 --> 00:13:34,840
mostly developers there was a strong

00:13:33,370 --> 00:13:38,080
DevOps call to everyone who helped

00:13:34,840 --> 00:13:40,240
everyone else so so it worked but the

00:13:38,080 --> 00:13:41,710
chains of command was alerts went to

00:13:40,240 --> 00:13:44,320
operations operations will figure out

00:13:41,710 --> 00:13:50,230
which developer to involve and then the

00:13:44,320 --> 00:13:52,570
deeper he would start the alerting rules

00:13:50,230 --> 00:13:56,050
were not very good for various reasons

00:13:52,570 --> 00:13:58,330
so other common sources of other lights

00:13:56,050 --> 00:14:02,920
were actually users users complaining

00:13:58,330 --> 00:14:05,350
about something not working and they're

00:14:02,920 --> 00:14:07,030
actually let of operations to at some

00:14:05,350 --> 00:14:10,540
point set up a permanent Twitter search

00:14:07,030 --> 00:14:13,990
for Spotify is down which is

00:14:10,540 --> 00:14:16,900
surprisingly effective so effective that

00:14:13,990 --> 00:14:19,090
our customer service have actually like

00:14:16,900 --> 00:14:22,060
run with that idea and our customer

00:14:19,090 --> 00:14:24,550
service department actually have several

00:14:22,060 --> 00:14:26,440
really clever system building 21 as a

00:14:24,550 --> 00:14:30,190
social meter for people complaining

00:14:26,440 --> 00:14:31,360
about Spotify it really works and when

00:14:30,190 --> 00:14:33,310
you think about it's actually really

00:14:31,360 --> 00:14:35,590
good data because you can measure all

00:14:33,310 --> 00:14:37,240
sorts of things in your system but the

00:14:35,590 --> 00:14:39,520
source of truth is that if your

00:14:37,240 --> 00:14:41,920
customers are having problems then you

00:14:39,520 --> 00:14:44,290
have a problem it's some of the best

00:14:41,920 --> 00:14:46,360
data you can have but most of the time

00:14:44,290 --> 00:14:53,580
you want that data before it hits your

00:14:46,360 --> 00:14:58,170
users because well users get angry so

00:14:53,580 --> 00:15:01,600
fast forward a little bit 2011-2012

00:14:58,170 --> 00:15:04,330
where we start using ups and squats so

00:15:01,600 --> 00:15:09,040
what happens is that around to them are

00:15:04,330 --> 00:15:12,850
11 2012 arm we start being successful we

00:15:09,040 --> 00:15:15,340
launched in the US um we have the money

00:15:12,850 --> 00:15:18,180
we have the power we we want to go

00:15:15,340 --> 00:15:22,450
places so the company scales up

00:15:18,180 --> 00:15:26,050
massively we hire in hundreds of

00:15:22,450 --> 00:15:27,670
developers in a few months if you have

00:15:26,050 --> 00:15:30,370
ever tried that kind of scaling

00:15:27,670 --> 00:15:33,070
organization it is it is scary and it is

00:15:30,370 --> 00:15:35,950
rather painful because it has a real

00:15:33,070 --> 00:15:37,600
effect on your culture when you hire one

00:15:35,950 --> 00:15:39,310
or two people you can tell them how you

00:15:37,600 --> 00:15:40,780
how you work and they will be influenced

00:15:39,310 --> 00:15:42,730
by your team

00:15:40,780 --> 00:15:45,670
when all of a sudden you hiring

00:15:42,730 --> 00:15:47,290
brand-new teams whole new teams that

00:15:45,670 --> 00:15:50,140
have not been in touch with your old

00:15:47,290 --> 00:15:52,600
teams they bring a new culture and one

00:15:50,140 --> 00:15:54,730
of the things that we had was um we

00:15:52,600 --> 00:15:56,830
actually had a pretty good DevOps

00:15:54,730 --> 00:15:58,210
mindset beforehand but we started hiring

00:15:56,830 --> 00:16:02,020
a lot of developers who didn't have the

00:15:58,210 --> 00:16:03,880
operational experience who had not been

00:16:02,020 --> 00:16:05,800
operating their own servers who were

00:16:03,880 --> 00:16:08,620
brilliant developers but they hadn't

00:16:05,800 --> 00:16:10,240
seen that side of the business and we

00:16:08,620 --> 00:16:11,800
became more focused developers with

00:16:10,240 --> 00:16:16,350
doing development operations for keeping

00:16:11,800 --> 00:16:18,460
things alive and a rift between

00:16:16,350 --> 00:16:21,880
developers and operations people

00:16:18,460 --> 00:16:25,450
starting to emerge um pretty bad

00:16:21,880 --> 00:16:27,700
situation actually so um developments

00:16:25,450 --> 00:16:30,970
fed up we had lots of new teams all

00:16:27,700 --> 00:16:33,480
these two new teams was like spitting

00:16:30,970 --> 00:16:37,450
out new Micra services left and right

00:16:33,480 --> 00:16:39,880
the the product as a as it was grew when

00:16:37,450 --> 00:16:41,680
we could do a whole lot of things but of

00:16:39,880 --> 00:16:44,530
course when you develop this fast that

00:16:41,680 --> 00:16:46,930
not everything is I necessarily high

00:16:44,530 --> 00:16:50,890
quality and even if it is high quality

00:16:46,930 --> 00:16:53,740
is not without problems so stability

00:16:50,890 --> 00:16:56,320
became a problem and who was dealing

00:16:53,740 --> 00:16:58,350
with stability the operations team who

00:16:56,320 --> 00:17:01,000
had not been part of the development and

00:16:58,350 --> 00:17:02,200
when you're keeping up with just a few

00:17:01,000 --> 00:17:04,150
teams who are doing development that's

00:17:02,200 --> 00:17:05,920
fine but when you have brand-new teams

00:17:04,150 --> 00:17:07,540
that you didn't even exist all of a

00:17:05,920 --> 00:17:10,180
sudden spin up a service that you have

00:17:07,540 --> 00:17:12,730
no idea what it's doing until it wakes

00:17:10,180 --> 00:17:17,500
up in the middle of the night these are

00:17:12,730 --> 00:17:19,740
getting angry operations people service

00:17:17,500 --> 00:17:22,060
ownership was often unclear figuring out

00:17:19,740 --> 00:17:24,160
well you found this machine you had no

00:17:22,060 --> 00:17:27,580
idea existed so who owns it who should I

00:17:24,160 --> 00:17:29,350
wake up that's a problem and yeah

00:17:27,580 --> 00:17:32,020
basically we at some point we realized

00:17:29,350 --> 00:17:35,320
that having a classic essary team did

00:17:32,020 --> 00:17:37,060
not scale it simply didn't work not just

00:17:35,320 --> 00:17:39,070
because of the size but also the curve

00:17:37,060 --> 00:17:40,960
because of the complexity if you have a

00:17:39,070 --> 00:17:43,450
big company that does one thing that's

00:17:40,960 --> 00:17:45,910
probably works just fine but we had a we

00:17:43,450 --> 00:17:49,840
had a midsize company that thousands of

00:17:45,910 --> 00:17:52,540
the things so the situation was we had

00:17:49,840 --> 00:17:54,330
big incidents almost every week so the

00:17:52,540 --> 00:17:56,679
business was pretty unhappy

00:17:54,330 --> 00:17:59,619
we had constant panic and firefighting

00:17:56,679 --> 00:18:04,450
so the teams were happy and unhappy and

00:17:59,619 --> 00:18:06,519
and rather tired and so to sort of stop

00:18:04,450 --> 00:18:08,619
that we had all sorts of little policies

00:18:06,519 --> 00:18:12,820
and tech boxes and things we try to

00:18:08,619 --> 00:18:16,299
improve one thing for instance don't

00:18:12,820 --> 00:18:22,239
deploy on Fridays you heard that one

00:18:16,299 --> 00:18:24,759
before it's actually really good for

00:18:22,239 --> 00:18:27,389
keeping your service stable but

00:18:24,759 --> 00:18:30,070
developers who all of a sudden have a

00:18:27,389 --> 00:18:31,779
four day week for deployment instead of

00:18:30,070 --> 00:18:34,359
five they get angry because they want to

00:18:31,779 --> 00:18:37,299
move fast so everyone was unhappy and

00:18:34,359 --> 00:18:45,159
angry at everyone else we need to do

00:18:37,299 --> 00:18:47,619
something about that so we came up with

00:18:45,159 --> 00:18:49,989
ups and squats it has been topped a few

00:18:47,619 --> 00:18:55,779
things off some squats it's basically

00:18:49,989 --> 00:18:58,389
DevOps mentality boiled down to to to to

00:18:55,779 --> 00:19:00,639
the way we run teams and the idea was

00:18:58,389 --> 00:19:03,519
okay stop it we can't have an Operations

00:19:00,639 --> 00:19:06,519
team let's spread out aberrations in the

00:19:03,519 --> 00:19:08,469
teams that actually build services so we

00:19:06,519 --> 00:19:10,570
put them in charge of their own capacity

00:19:08,469 --> 00:19:13,049
planning we put them in charge of their

00:19:10,570 --> 00:19:16,809
own configuration management deployment

00:19:13,049 --> 00:19:19,239
monitoring alerting defining SL ace I

00:19:16,809 --> 00:19:21,669
mean when you don't know what a system

00:19:19,239 --> 00:19:25,029
is doing is very difficult to know if

00:19:21,669 --> 00:19:26,679
it's critical art so let the teams do

00:19:25,029 --> 00:19:31,389
that themselves and managing their own

00:19:26,679 --> 00:19:33,159
incidents that was the idea of course

00:19:31,389 --> 00:19:35,169
when you go out to developer teams and

00:19:33,159 --> 00:19:37,960
say by the way we want you to do

00:19:35,169 --> 00:19:41,259
everything you do already but also be

00:19:37,960 --> 00:19:43,089
operation in the years they're not we

00:19:41,259 --> 00:19:46,570
needed to to to to frame that slightly

00:19:43,089 --> 00:19:48,159
different but one of the benefits of

00:19:46,570 --> 00:19:50,799
this all of a sudden when you do this

00:19:48,159 --> 00:19:52,929
you have a scalable organization because

00:19:50,799 --> 00:19:56,499
every team start operating independently

00:19:52,929 --> 00:20:01,509
and making local decisions that make

00:19:56,499 --> 00:20:02,859
sense for them basically every part of

00:20:01,509 --> 00:20:08,050
the organization started operating as a

00:20:02,859 --> 00:20:10,640
start up again faster incident solving

00:20:08,050 --> 00:20:12,470
most times when something break you need

00:20:10,640 --> 00:20:14,480
to talk to someone who knows what the

00:20:12,470 --> 00:20:16,430
system is doing sometimes you're lucky

00:20:14,480 --> 00:20:17,990
you can just restart it but a lot of the

00:20:16,430 --> 00:20:19,820
times you need inside knowledge so

00:20:17,990 --> 00:20:21,440
getting the person the right person in

00:20:19,820 --> 00:20:25,660
front of the computer faster makes

00:20:21,440 --> 00:20:28,190
incidence go away faster accountability

00:20:25,660 --> 00:20:29,390
if you make something that breaks in the

00:20:28,190 --> 00:20:32,360
middle of the night you're the one

00:20:29,390 --> 00:20:37,400
waking up that gives people a strong in

00:20:32,360 --> 00:20:40,190
sentiment for fixing it this this sounds

00:20:37,400 --> 00:20:44,420
like like torturing developers but it

00:20:40,190 --> 00:20:46,220
goes beyond that because if your team

00:20:44,420 --> 00:20:48,830
builds something that breaks in middle

00:20:46,220 --> 00:20:51,070
night so your team members gets woken up

00:20:48,830 --> 00:20:55,850
in the middle of the night so they are

00:20:51,070 --> 00:20:57,950
demotivated tired and not performing

00:20:55,850 --> 00:21:00,170
then your product owner all of a sudden

00:20:57,950 --> 00:21:06,530
have a strong in sentiment for giving

00:21:00,170 --> 00:21:11,480
you time to fix it so this actually

00:21:06,530 --> 00:21:14,060
works an autonomy all of a sudden we

00:21:11,480 --> 00:21:15,860
could remove this rule why not the plan

00:21:14,060 --> 00:21:19,550
deploy on Fridays you can deploy in

00:21:15,860 --> 00:21:23,090
Friday's if it doesn't work then it hurt

00:21:19,550 --> 00:21:24,590
you so make your own decisions talk

00:21:23,090 --> 00:21:27,320
about in your team is this a good idea

00:21:24,590 --> 00:21:30,440
but there's no like top level it says

00:21:27,320 --> 00:21:31,640
you cannot do this just know that we

00:21:30,440 --> 00:21:37,100
help you we hope we hold you responsible

00:21:31,640 --> 00:21:40,610
for what happens but this comes with

00:21:37,100 --> 00:21:44,410
some human trait calendars because that

00:21:40,610 --> 00:21:48,050
means a lot of engineers neat training

00:21:44,410 --> 00:21:50,240
but they don't need a full set of like a

00:21:48,050 --> 00:21:52,550
whole new education they don't need to

00:21:50,240 --> 00:21:55,190
be complete operation people they don't

00:21:52,550 --> 00:21:56,840
need to know all the details so finding

00:21:55,190 --> 00:21:59,060
out exactly how much they need to be

00:21:56,840 --> 00:22:05,630
able to do that job is a challenge and

00:21:59,060 --> 00:22:09,500
then you package the rest developers

00:22:05,630 --> 00:22:10,790
need autonomy so we want to give power

00:22:09,500 --> 00:22:14,030
back to developers they make their own

00:22:10,790 --> 00:22:19,280
decisions well even the best developers

00:22:14,030 --> 00:22:21,530
make mistakes so make sure that we know

00:22:19,280 --> 00:22:23,450
that these mistakes will happen and

00:22:21,530 --> 00:22:24,740
and how to deal with them and so one of

00:22:23,450 --> 00:22:29,030
the things we do there is trying to

00:22:24,740 --> 00:22:31,670
limit impact and so in the context of

00:22:29,030 --> 00:22:34,010
monitoring which is why we're here that

00:22:31,670 --> 00:22:36,080
means that you developers needs to

00:22:34,010 --> 00:22:38,480
understand enough about monitoring to be

00:22:36,080 --> 00:22:41,360
able to do their own monitoring but they

00:22:38,480 --> 00:22:43,700
don't actually need to learn about the

00:22:41,360 --> 00:22:46,070
Munchkin pipeline they don't need to

00:22:43,700 --> 00:22:47,930
know about how you scale monitoring they

00:22:46,070 --> 00:22:51,680
don't need to know about all the

00:22:47,930 --> 00:22:53,950
nitty-gritty details behind the scene

00:22:51,680 --> 00:23:01,490
they but they do no need to know about

00:22:53,950 --> 00:23:03,920
good monitoring mentality and so we

00:23:01,490 --> 00:23:07,100
needed to start providing infrastructure

00:23:03,920 --> 00:23:11,830
as a service to our developers giving

00:23:07,100 --> 00:23:15,440
them enough tools to be able to be

00:23:11,830 --> 00:23:17,780
self-sustaining so the classic operation

00:23:15,440 --> 00:23:19,700
team was actually to spend and hour

00:23:17,780 --> 00:23:21,800
operations in years and different tools

00:23:19,700 --> 00:23:26,660
teams because we also spawned a few of

00:23:21,800 --> 00:23:30,410
these all became what we have today was

00:23:26,660 --> 00:23:31,880
his I owe our infrastructure team or

00:23:30,410 --> 00:23:35,380
infrastructure organization actually

00:23:31,880 --> 00:23:37,850
it's multiple teams hundred people and

00:23:35,380 --> 00:23:40,100
we went from solving people's problems

00:23:37,850 --> 00:23:42,440
to give it to making tools as solve

00:23:40,100 --> 00:23:49,910
problems so teaching and self-service

00:23:42,440 --> 00:23:55,310
became the main focus and my old boss

00:23:49,910 --> 00:23:56,540
the guy whose job I now have said that

00:23:55,310 --> 00:23:58,940
it's probably the smartest move that

00:23:56,540 --> 00:24:02,380
we've done probably one of the smartest

00:23:58,940 --> 00:24:06,110
moves we have done at least within

00:24:02,380 --> 00:24:08,480
operations in Spotify because it meant

00:24:06,110 --> 00:24:10,610
that we could get ourselves out of this

00:24:08,480 --> 00:24:16,610
this place where everyone was unhappy

00:24:10,610 --> 00:24:19,430
and everything was breaking so I'm gonna

00:24:16,610 --> 00:24:22,580
tell three tales of failure from this

00:24:19,430 --> 00:24:25,370
time because not everything was was rosy

00:24:22,580 --> 00:24:27,110
red but after talking with you you

00:24:25,370 --> 00:24:31,160
yesterday I think I need to clarify

00:24:27,110 --> 00:24:33,860
something um I also say in the botany

00:24:31,160 --> 00:24:36,049
says read learning opportunities

00:24:33,860 --> 00:24:38,299
this actually has to do with Spotify

00:24:36,049 --> 00:24:43,400
culture in Spotify we actually talked a

00:24:38,299 --> 00:24:45,530
lot about failure as a good thing so you

00:24:43,400 --> 00:24:46,880
visit a Spotify of you hear people

00:24:45,530 --> 00:24:48,110
talking about all this failed that

00:24:46,880 --> 00:24:49,460
failed and we learn this and we learn

00:24:48,110 --> 00:24:52,820
that that's because we actually

00:24:49,460 --> 00:24:55,460
encourage failure not as in oh go and

00:24:52,820 --> 00:24:58,670
break something just because but move

00:24:55,460 --> 00:25:02,299
fast fail fast learn from it and then

00:24:58,670 --> 00:25:05,570
move on so we talk very positively about

00:25:02,299 --> 00:25:07,910
failure but I realized if I just love

00:25:05,570 --> 00:25:10,700
till these doors us oh yes we fail

00:25:07,910 --> 00:25:12,049
horrible this then we might miss a point

00:25:10,700 --> 00:25:15,290
the point was that we learned something

00:25:12,049 --> 00:25:20,020
useful from these experiences so the

00:25:15,290 --> 00:25:25,270
first one was site 12 okay so site 11

00:25:20,020 --> 00:25:27,620
obviously didn't scale moon didn't scale

00:25:25,270 --> 00:25:29,960
and looking at the same dashboard

00:25:27,620 --> 00:25:32,030
everyone looking at the same few numbers

00:25:29,960 --> 00:25:35,030
didn't scale when the service became

00:25:32,030 --> 00:25:36,530
very complex because we wanted teams to

00:25:35,030 --> 00:25:42,220
worry about their part of the service

00:25:36,530 --> 00:25:44,840
not the entire thing so um the first

00:25:42,220 --> 00:25:46,790
actually we have this team back in the

00:25:44,840 --> 00:25:49,160
infrastructure team has formed before

00:25:46,790 --> 00:25:51,130
the whole ups and squats and they're

00:25:49,160 --> 00:25:53,960
actively the first infrastructure team

00:25:51,130 --> 00:25:56,840
and they were tasked with solving three

00:25:53,960 --> 00:25:59,030
problems lock delivery and monitoring

00:25:56,840 --> 00:26:00,620
and alerting and those three things were

00:25:59,030 --> 00:26:03,140
put together because well lock delivery

00:26:00,620 --> 00:26:05,090
and and and monitoring well but it

00:26:03,140 --> 00:26:06,950
sounds similar if something fails you go

00:26:05,090 --> 00:26:09,410
look at locks and you probably can do

00:26:06,950 --> 00:26:11,540
monitoring base unlocks and sort of fit

00:26:09,410 --> 00:26:14,660
together problem is that we also look

00:26:11,540 --> 00:26:17,510
use knocks for a business critical data

00:26:14,660 --> 00:26:19,549
so what we do is we gather all the locks

00:26:17,510 --> 00:26:21,740
from all the access points process all

00:26:19,549 --> 00:26:23,900
the all the things that we have

00:26:21,740 --> 00:26:26,090
collected about how people are you are

00:26:23,900 --> 00:26:29,390
behaving and we use this both to

00:26:26,090 --> 00:26:32,120
generate reports to the music business

00:26:29,390 --> 00:26:34,040
about how much we owe them but also to

00:26:32,120 --> 00:26:35,540
figure out so what should we suggest all

00:26:34,040 --> 00:26:39,860
our business critical data is coming

00:26:35,540 --> 00:26:43,040
from rock as well anyway um we develop

00:26:39,860 --> 00:26:45,740
start developing site 12 um we didn't

00:26:43,040 --> 00:26:47,660
really think about doing anything else

00:26:45,740 --> 00:26:49,940
but make it scalable so it was

00:26:47,660 --> 00:26:52,070
meant to replace that one the first

00:26:49,940 --> 00:26:53,960
sight one it was based on moon and still

00:26:52,070 --> 00:26:56,510
because we didn't really want to do all

00:26:53,960 --> 00:26:58,220
the migration but we tried to put in a

00:26:56,510 --> 00:27:04,840
centre back end and be much more

00:26:58,220 --> 00:27:07,190
powerful front end this did not go well

00:27:04,840 --> 00:27:09,620
not because the Prague didn't work

00:27:07,190 --> 00:27:13,310
actively it sort of did the problem was

00:27:09,620 --> 00:27:16,330
that site 12 and this team or developing

00:27:13,310 --> 00:27:18,440
this in isolation they weren't actually

00:27:16,330 --> 00:27:22,010
working together with the operations

00:27:18,440 --> 00:27:23,780
team that that was still in place they

00:27:22,010 --> 00:27:26,290
were not really talking with it within

00:27:23,780 --> 00:27:29,780
years they were building something for a

00:27:26,290 --> 00:27:32,300
monitoring team so they end up building

00:27:29,780 --> 00:27:34,130
a feature set that worked but wasn't

00:27:32,300 --> 00:27:40,640
really what people need it do the job

00:27:34,130 --> 00:27:42,410
and a priority collision because when

00:27:40,640 --> 00:27:45,170
the team have multiple priorities and

00:27:42,410 --> 00:27:48,260
one of them is breaking for different

00:27:45,170 --> 00:27:50,630
reasons and it's you can when we will

00:27:48,260 --> 00:27:53,540
now lock delivery failed we could

00:27:50,630 --> 00:27:56,480
measure and reason about a business

00:27:53,540 --> 00:28:01,580
value when we cannot generate reports to

00:27:56,480 --> 00:28:04,730
the record labels when we cannot fuel

00:28:01,580 --> 00:28:08,570
our suggestion back and then we are

00:28:04,730 --> 00:28:14,110
hurting financially if the monitoring

00:28:08,570 --> 00:28:16,970
system isn't working well we may be fine

00:28:14,110 --> 00:28:21,170
it's much more difficult to reason about

00:28:16,970 --> 00:28:24,020
the financial side of of that so luckily

00:28:21,170 --> 00:28:26,690
we was always more critical so most of

00:28:24,020 --> 00:28:27,950
the time went into do not delivery so

00:28:26,690 --> 00:28:29,510
what we learned from this were basically

00:28:27,950 --> 00:28:33,550
yeah you really need to talk to your

00:28:29,510 --> 00:28:37,160
users but if you want something done you

00:28:33,550 --> 00:28:41,780
also need to make sure that the team has

00:28:37,160 --> 00:28:44,870
to do it don't have this priority

00:28:41,780 --> 00:28:46,520
conflict you want something to succeed

00:28:44,870 --> 00:28:48,440
you build a team around it and has that

00:28:46,520 --> 00:28:49,730
as the main priority this is not the

00:28:48,440 --> 00:28:51,260
only place in the company we've seen

00:28:49,730 --> 00:28:53,360
this by the way we've seen this many

00:28:51,260 --> 00:28:58,730
times we we're still making this mistake

00:28:53,360 --> 00:29:01,190
every once in a while the next thing is

00:28:58,730 --> 00:29:04,880
we try to build on your loading system

00:29:01,190 --> 00:29:08,750
OMG oh my god this time we thought we

00:29:04,880 --> 00:29:09,830
aligned okay so um it was a new team we

00:29:08,750 --> 00:29:12,620
learned that we need to talk to

00:29:09,830 --> 00:29:15,560
operations we need to include our users

00:29:12,620 --> 00:29:20,060
so an operations engineer was was

00:29:15,560 --> 00:29:22,310
assigned and and the guy who built this

00:29:20,060 --> 00:29:25,670
well the guys who built this are a very

00:29:22,310 --> 00:29:27,410
um technically skilled especially the

00:29:25,670 --> 00:29:30,980
guy who spearheaded the development is

00:29:27,410 --> 00:29:33,350
it has an analytic mind like no one I've

00:29:30,980 --> 00:29:37,760
ever met and the operations engineer

00:29:33,350 --> 00:29:40,760
that was assigned was was a superstar as

00:29:37,760 --> 00:29:44,900
well so how will this fail and actually

00:29:40,760 --> 00:29:47,540
he it really went really well they built

00:29:44,900 --> 00:29:49,040
this home teasing it was a streaming

00:29:47,540 --> 00:29:52,910
event process similar to Riemann if

00:29:49,040 --> 00:29:54,830
anyone knows that um you send a bunch of

00:29:52,910 --> 00:29:58,100
event to it and you write rules and now

00:29:54,830 --> 00:30:00,530
comes alerts the initial development

00:29:58,100 --> 00:30:02,150
weren't super fast they got something up

00:30:00,530 --> 00:30:04,250
and running they send in production they

00:30:02,150 --> 00:30:08,440
started talking to teams everything was

00:30:04,250 --> 00:30:08,440
fine few teams thought about adopting it

00:30:09,160 --> 00:30:13,330
this was what a rule looked like

00:30:14,669 --> 00:30:24,700
I try to reformat that bit it doesn't

00:30:19,690 --> 00:30:27,370
get much prettier the problem here was

00:30:24,700 --> 00:30:30,399
that they decided to go with a language

00:30:27,370 --> 00:30:33,490
called Esper if you haven't heard about

00:30:30,399 --> 00:30:36,580
this then I'm not surprised I hadn't

00:30:33,490 --> 00:30:38,740
either it's a very small language it's

00:30:36,580 --> 00:30:42,210
built for stream processing and on a

00:30:38,740 --> 00:30:45,820
technical side it's really good um

00:30:42,210 --> 00:30:48,129
intact years um Rama is that it's very

00:30:45,820 --> 00:30:49,809
difficult to read and reason about and

00:30:48,129 --> 00:30:52,570
for develop most most people it's very

00:30:49,809 --> 00:30:54,669
difficult to to learn the learning curve

00:30:52,570 --> 00:30:56,500
was very steep and why was this not

00:30:54,669 --> 00:30:58,690
caught wasn't the guy we were designed

00:30:56,500 --> 00:31:01,720
to help out the abrasions guy he had the

00:30:58,690 --> 00:31:06,669
same analytical mind he loved Esper and

00:31:01,720 --> 00:31:10,629
has saw nothing wrong with it but of

00:31:06,669 --> 00:31:12,610
course people refused to adopt this and

00:31:10,629 --> 00:31:17,379
the third one monster I'm gonna speed up

00:31:12,610 --> 00:31:21,389
a little bit and so um sign one didn't

00:31:17,379 --> 00:31:28,389
work on de wizzen will work one of our

00:31:21,389 --> 00:31:30,399
architects decided that oh how difficult

00:31:28,389 --> 00:31:32,169
she actually used the moon in data but

00:31:30,399 --> 00:31:36,700
then he built an in-memory time series

00:31:32,169 --> 00:31:38,710
data base oh and he made actually

00:31:36,700 --> 00:31:41,019
managed to build a prototype in two

00:31:38,710 --> 00:31:45,340
weeks and and it worked right it was

00:31:41,019 --> 00:31:51,970
blazing fast and he talked with

00:31:45,340 --> 00:31:54,340
operations so people loved it so yeah he

00:31:51,970 --> 00:31:55,870
turned them mooney model around he was

00:31:54,340 --> 00:32:01,090
now pushing data from the individual

00:31:55,870 --> 00:32:03,909
hosts and so psych 12 was holded Simon

00:32:01,090 --> 00:32:06,190
one still existed but this actually

00:32:03,909 --> 00:32:10,570
seemed like a good success I'll get back

00:32:06,190 --> 00:32:12,039
to why that was actually failure because

00:32:10,570 --> 00:32:14,740
that came later on started out looking

00:32:12,039 --> 00:32:16,870
like a success so we now had learned our

00:32:14,740 --> 00:32:20,080
mistakes we need if we need monitoring

00:32:16,870 --> 00:32:21,730
to be good enough to these teams that we

00:32:20,080 --> 00:32:24,399
expect to run their own services we

00:32:21,730 --> 00:32:26,440
actually need to dedicate monton team so

00:32:24,399 --> 00:32:27,280
we put a team together and they were

00:32:26,440 --> 00:32:29,880
tasked with

00:32:27,280 --> 00:32:33,970
providing monitoring as a self service

00:32:29,880 --> 00:32:36,190
rather than just solutions we inherited

00:32:33,970 --> 00:32:40,870
monster this new system that will build

00:32:36,190 --> 00:32:42,250
sabich's and OMG and the product on at

00:32:40,870 --> 00:32:43,780
the time was very clever he realized

00:32:42,250 --> 00:32:45,130
that we had too few people to tag all

00:32:43,780 --> 00:32:46,780
the problems at the same time so he

00:32:45,130 --> 00:32:49,180
makes him killed quick calculations

00:32:46,780 --> 00:32:52,510
obviously this thing with an in-memory

00:32:49,180 --> 00:32:55,690
database does not scale because you run

00:32:52,510 --> 00:32:58,330
out of memory but it was good enough for

00:32:55,690 --> 00:32:59,830
now he conveyed that Martha would

00:32:58,330 --> 00:33:01,330
probably be able to survive around a

00:32:59,830 --> 00:33:06,330
year until we have found something

00:33:01,330 --> 00:33:09,280
better so let's tackle um loading first

00:33:06,330 --> 00:33:13,750
we replaced some pics and OMG with

00:33:09,280 --> 00:33:17,680
Riemann it's an another event dreaming

00:33:13,750 --> 00:33:20,130
processor but and it's written in

00:33:17,680 --> 00:33:23,170
closure and has closures as his language

00:33:20,130 --> 00:33:25,990
a little better than a spurt but most

00:33:23,170 --> 00:33:30,880
importantly it actually have a community

00:33:25,990 --> 00:33:33,460
around it so a lot of tools exist and so

00:33:30,880 --> 00:33:35,850
um we built some libraries with helper

00:33:33,460 --> 00:33:39,610
function we have namespace support and

00:33:35,850 --> 00:33:41,410
we made unit tests so not only could you

00:33:39,610 --> 00:33:42,880
write rules for your loading but you

00:33:41,410 --> 00:33:44,350
could also write a unit says to prove

00:33:42,880 --> 00:33:46,930
that you rule do this does the right

00:33:44,350 --> 00:33:49,030
thing and we Randall's unit test every

00:33:46,930 --> 00:33:53,320
time we change something which meant

00:33:49,030 --> 00:33:56,290
that way we build a web funding as well

00:33:53,320 --> 00:33:57,610
as less interesting actually that we

00:33:56,290 --> 00:34:00,250
could now write rules that look

00:33:57,610 --> 00:34:02,290
something like this if you don't like

00:34:00,250 --> 00:34:10,690
the Lisp like languages is still be I

00:34:02,290 --> 00:34:12,130
play but Elise is readable and it was

00:34:10,690 --> 00:34:15,550
widely adopted or even was actually

00:34:12,130 --> 00:34:18,720
success teams started writing a lot of

00:34:15,550 --> 00:34:21,429
rules start getting their own lurtz

00:34:18,720 --> 00:34:23,800
Rieman was actually a true is a true

00:34:21,429 --> 00:34:25,120
self service system as the rules live in

00:34:23,800 --> 00:34:29,470
git repo that everyone has write access

00:34:25,120 --> 00:34:32,020
to now having 400 developers engineers

00:34:29,470 --> 00:34:35,200
messing around in your monitoring system

00:34:32,020 --> 00:34:37,330
if it's been billed for it sounds scary

00:34:35,200 --> 00:34:38,770
but this system was actually built for

00:34:37,330 --> 00:34:41,139
that that was exactly why we made

00:34:38,770 --> 00:34:42,789
namespacing support so every team

00:34:41,139 --> 00:34:45,549
has its own namespace and they only mess

00:34:42,789 --> 00:34:48,639
around with their own rules and we don't

00:34:45,549 --> 00:34:50,440
like do code reviews on these rules we

00:34:48,639 --> 00:34:53,440
rely on the unit tests that the same

00:34:50,440 --> 00:34:56,940
developers are writing to ensure that

00:34:53,440 --> 00:34:56,940
they don't break things for each other

00:34:58,380 --> 00:35:03,730
it's still kind of a failure because um

00:35:01,470 --> 00:35:05,349
many engineers don't really like to

00:35:03,730 --> 00:35:10,450
write things enclosure especially not

00:35:05,349 --> 00:35:14,170
your developers so that actually became

00:35:10,450 --> 00:35:15,880
a complaint but we consider it a success

00:35:14,170 --> 00:35:18,609
because we actually have something at

00:35:15,880 --> 00:35:19,900
work so we went on to pretty graphs now

00:35:18,609 --> 00:35:25,210
that's where the things became a little

00:35:19,900 --> 00:35:27,670
bit more muddy so um we started looking

00:35:25,210 --> 00:35:30,640
at collecti and graphite and at the time

00:35:27,670 --> 00:35:32,470
with the size of the company the size of

00:35:30,640 --> 00:35:35,619
the complexity of the things and the way

00:35:32,470 --> 00:35:40,000
we wanted to to operate a monitoring

00:35:35,619 --> 00:35:43,539
system yeah shouting and rebalancing was

00:35:40,000 --> 00:35:45,010
an issue um we know that the cyanide

00:35:43,539 --> 00:35:47,170
back-end has probably sold him these I

00:35:45,010 --> 00:35:49,450
haven't actually tested it but at the

00:35:47,170 --> 00:35:51,759
time when we looked at it this was not a

00:35:49,450 --> 00:35:52,930
good solution for us and we started

00:35:51,759 --> 00:35:56,200
looking around because there wasn't

00:35:52,930 --> 00:35:59,859
actually any really good solutions not

00:35:56,200 --> 00:36:04,210
really um now one of the problems was

00:35:59,859 --> 00:36:05,589
that graphite and other solutions were

00:36:04,210 --> 00:36:09,339
still using these hierarchical

00:36:05,589 --> 00:36:14,529
namespaces so you have you defined your

00:36:09,339 --> 00:36:16,420
metric descriptively with like a very

00:36:14,529 --> 00:36:18,549
long key name that that contains all the

00:36:16,420 --> 00:36:21,880
data but when you want to start slicing

00:36:18,549 --> 00:36:26,680
nice those those those metrics it

00:36:21,880 --> 00:36:28,779
actually becomes kind of difficult again

00:36:26,680 --> 00:36:30,009
probably not a surprise to those of you

00:36:28,779 --> 00:36:34,839
who have been following the latest

00:36:30,009 --> 00:36:38,349
development of other tools so the

00:36:34,839 --> 00:36:40,210
solution was metric to point oh you've

00:36:38,349 --> 00:36:43,289
probably all heard this have anyone here

00:36:40,210 --> 00:36:49,180
not heard about metric to point oh

00:36:43,289 --> 00:36:51,430
really okay brief slide on the idea of

00:36:49,180 --> 00:36:53,319
metric two point oh the idea is taking

00:36:51,430 --> 00:36:55,350
these very long names and breaking them

00:36:53,319 --> 00:36:58,060
down into tax

00:36:55,350 --> 00:36:59,380
so rather than having a long name that

00:36:58,060 --> 00:37:02,530
contains the hostname you actually have

00:36:59,380 --> 00:37:04,330
a taxing host is this but you can also

00:37:02,530 --> 00:37:05,980
have all sorts of other things like what

00:37:04,330 --> 00:37:07,930
this is machine do what are you

00:37:05,980 --> 00:37:11,220
measuring which network is a part of

00:37:07,930 --> 00:37:13,930
yadda yadda yadda and the point is that

00:37:11,220 --> 00:37:15,910
selecting the right metrics for

00:37:13,930 --> 00:37:18,640
aggregations when you have broken your

00:37:15,910 --> 00:37:23,680
de metrics down like this is a lot

00:37:18,640 --> 00:37:24,730
easier so a bunch of the the bigger time

00:37:23,680 --> 00:37:27,010
series database is actually moving

00:37:24,730 --> 00:37:29,500
towards this kind of idea rather than

00:37:27,010 --> 00:37:32,020
the long oracle name this becomes

00:37:29,500 --> 00:37:34,120
especially important when you stop wanna

00:37:32,020 --> 00:37:35,380
caring about single machines but

00:37:34,120 --> 00:37:37,690
actually want to start selecting

00:37:35,380 --> 00:37:40,030
machines across other dimensions like

00:37:37,690 --> 00:37:43,770
what's which are they connected to and

00:37:40,030 --> 00:37:49,240
and and and what shows are they running

00:37:43,770 --> 00:37:54,520
um so we knew that this was a muddy

00:37:49,240 --> 00:37:56,890
right we need it um we needed to have

00:37:54,520 --> 00:37:59,860
quick adoption because we really needed

00:37:56,890 --> 00:38:01,900
to have people only own service but we

00:37:59,860 --> 00:38:05,590
also need to have the flexibility of

00:38:01,900 --> 00:38:07,210
trying things and throwing them out so

00:38:05,590 --> 00:38:09,730
that was actually a problem and we can't

00:38:07,210 --> 00:38:12,910
ask our our engineers to migrate every

00:38:09,730 --> 00:38:14,350
time we get a new idea then your team

00:38:12,910 --> 00:38:16,420
starts slowing down because they spend

00:38:14,350 --> 00:38:21,010
all the time migrating and they become

00:38:16,420 --> 00:38:26,080
pissed so we came with the idea of

00:38:21,010 --> 00:38:28,060
having a small API we wrote fast forward

00:38:26,080 --> 00:38:30,340
if I forward a simple idea you have a

00:38:28,060 --> 00:38:31,810
small demon running on your machine and

00:38:30,340 --> 00:38:33,430
you tell people this is where your

00:38:31,810 --> 00:38:36,010
metrics go this is where your monitoring

00:38:33,430 --> 00:38:38,500
data go and they can throw metrics and

00:38:36,010 --> 00:38:40,690
events at fast forward and then

00:38:38,500 --> 00:38:43,000
something magical happen and it comes

00:38:40,690 --> 00:38:46,210
out as alerts and and and graphs in the

00:38:43,000 --> 00:38:47,860
other end and where metrics and events

00:38:46,210 --> 00:38:49,330
actually go is something that you have

00:38:47,860 --> 00:38:50,920
control over and configure and fast

00:38:49,330 --> 00:38:52,840
forward but you developers and your

00:38:50,920 --> 00:38:55,060
teams that are using this do not have to

00:38:52,840 --> 00:38:58,630
worry this is your contract with your

00:38:55,060 --> 00:39:01,979
team we can change everything else but

00:38:58,630 --> 00:39:06,219
your things still go to fast forward

00:39:01,979 --> 00:39:10,059
and so we know what it looks like this

00:39:06,219 --> 00:39:12,009
and we get the flexibility to play

00:39:10,059 --> 00:39:14,979
around and change things in this

00:39:12,009 --> 00:39:20,109
pipeline without forcing our users to

00:39:14,979 --> 00:39:21,579
migrate all the time yeah so we looked

00:39:20,109 --> 00:39:23,229
at a bunch of solutions I'm not gonna

00:39:21,579 --> 00:39:26,199
mention them they are the links to them

00:39:23,229 --> 00:39:28,180
in in the bottom point was some of these

00:39:26,199 --> 00:39:31,269
solutions that are good contestants they

00:39:28,180 --> 00:39:34,059
simply didn't exist all of them were not

00:39:31,269 --> 00:39:37,719
good fits at the time so we were kind of

00:39:34,059 --> 00:39:42,969
at a loss we came across kairos TV it

00:39:37,719 --> 00:39:44,170
looked promising we installed it it sort

00:39:42,969 --> 00:39:46,390
of seemed to work it had promised with

00:39:44,170 --> 00:39:49,059
queries but we thought hey we can work

00:39:46,390 --> 00:39:50,709
with the community except timing when we

00:39:49,059 --> 00:39:53,199
started using it the two main developers

00:39:50,709 --> 00:39:55,059
got snatched by datastax the company

00:39:53,199 --> 00:39:56,739
behind Cassandra and all of a sudden

00:39:55,059 --> 00:40:01,390
they were working on Cassandra and not

00:39:56,739 --> 00:40:04,900
this so the open hold it but we needed a

00:40:01,390 --> 00:40:07,779
solution so we started building heroic

00:40:04,900 --> 00:40:09,299
actually we didn't we never a set out to

00:40:07,779 --> 00:40:12,249
build our own time savings database

00:40:09,299 --> 00:40:14,589
heroic started as an alternative query

00:40:12,249 --> 00:40:17,739
engine for Cassandra basically because

00:40:14,589 --> 00:40:20,319
we need a coring didn't I didn't fail

00:40:17,739 --> 00:40:23,140
all the time and we couldn't get in

00:40:20,319 --> 00:40:27,640
touch with a Cara Stevie developers so

00:40:23,140 --> 00:40:30,420
um so we start out building this core

00:40:27,640 --> 00:40:32,799
Union and at some point we realized well

00:40:30,420 --> 00:40:36,009
this is going nowhere we might as well

00:40:32,799 --> 00:40:40,809
finish the job so we switched to own

00:40:36,009 --> 00:40:42,789
schema and replaced all bits of Coyote

00:40:40,809 --> 00:40:45,209
be and now we have the right time to

00:40:42,789 --> 00:40:48,309
this database built on top of Cassandra

00:40:45,209 --> 00:40:51,670
we also started having a lot of metrics

00:40:48,309 --> 00:40:53,739
so we needed to have more than just the

00:40:51,670 --> 00:40:55,359
in-memory model that carries the behance

00:40:53,739 --> 00:40:57,039
so we started using elastic search for

00:40:55,359 --> 00:41:01,509
indexing the time series just so we can

00:40:57,039 --> 00:41:02,920
find them so back to the monster failure

00:41:01,509 --> 00:41:05,079
now we had a solution we had a time

00:41:02,920 --> 00:41:07,269
series data base the problem was that

00:41:05,079 --> 00:41:10,179
anything you built that has a proper bag

00:41:07,269 --> 00:41:12,219
and will be at least to some degree

00:41:10,179 --> 00:41:15,730
slower than something that runs just in

00:41:12,219 --> 00:41:18,850
memory so from our users point of view

00:41:15,730 --> 00:41:21,820
monster was the it was blazing fast

00:41:18,850 --> 00:41:23,980
it worked and whenever it didn't work

00:41:21,820 --> 00:41:27,670
whenever it broke it broke heart it

00:41:23,980 --> 00:41:30,880
crashed and who got walked up us not our

00:41:27,670 --> 00:41:33,790
users so our users got the glory we got

00:41:30,880 --> 00:41:35,140
the pain and so convincing our users

00:41:33,790 --> 00:41:40,030
that we wanted to switch to something

00:41:35,140 --> 00:41:42,130
else was actually very difficult so you

00:41:40,030 --> 00:41:43,960
can actually have a product that is even

00:41:42,130 --> 00:41:46,630
even if it doesn't scale even if you can

00:41:43,960 --> 00:41:48,550
explain that it doesn't work but when it

00:41:46,630 --> 00:41:51,760
does work you use as love it is very

00:41:48,550 --> 00:41:58,230
difficult to migrate away from it's a

00:41:51,760 --> 00:42:02,440
human problem not a technical one so

00:41:58,230 --> 00:42:04,240
yeah it actually lasted until few months

00:42:02,440 --> 00:42:05,890
back when we finally said to the last

00:42:04,240 --> 00:42:09,250
users that we don't care we shut it down

00:42:05,890 --> 00:42:10,750
now and to give you some idea about how

00:42:09,250 --> 00:42:14,170
painful it was running monster in the

00:42:10,750 --> 00:42:17,560
end in the last six weeks of a lifetime

00:42:14,170 --> 00:42:18,640
it eluded us as in woke someone up in

00:42:17,560 --> 00:42:30,600
the middle of the night to be restarted

00:42:18,640 --> 00:42:30,600
51 times that's horrible sorry

00:42:32,030 --> 00:42:43,710
um i have no idea we have that we there

00:42:38,550 --> 00:42:49,230
is this has crashed a lot so um final

00:42:43,710 --> 00:42:52,320
story and then i'll go to questions now

00:42:49,230 --> 00:42:55,020
we had pretty graphs we had our alerting

00:42:52,320 --> 00:42:58,980
system but we also needed to graph based

00:42:55,020 --> 00:43:00,090
alerting what problem was that axial

00:42:58,980 --> 00:43:02,280
loading start to become a problem again

00:43:00,090 --> 00:43:03,750
once we have sold graphing learning we

00:43:02,280 --> 00:43:06,480
saw we thought we assault became a

00:43:03,750 --> 00:43:08,910
problem again Riemann became diff more

00:43:06,480 --> 00:43:11,070
difficult to scale you probably can but

00:43:08,910 --> 00:43:12,900
in our case it was difficult but more

00:43:11,070 --> 00:43:14,820
importantly complaining about closure

00:43:12,900 --> 00:43:18,000
become one of the number one complaint

00:43:14,820 --> 00:43:20,460
that we heard engineers did not want to

00:43:18,000 --> 00:43:22,800
write complex rules they kept saying oh

00:43:20,460 --> 00:43:24,840
we want something simple and at one

00:43:22,800 --> 00:43:26,280
point actually won our teams dropped our

00:43:24,840 --> 00:43:30,120
monitoring stack and went with an

00:43:26,280 --> 00:43:32,130
external vendor and rather than shouted

00:43:30,120 --> 00:43:33,990
them we went to them and said okay so

00:43:32,130 --> 00:43:36,840
you try this is external vendor and you

00:43:33,990 --> 00:43:39,000
tell us what you think please let us

00:43:36,840 --> 00:43:41,340
learn from this what is that you like

00:43:39,000 --> 00:43:43,260
and what turns out was that what they

00:43:41,340 --> 00:43:45,870
really liked about this was apart from

00:43:43,260 --> 00:43:47,850
having easy metric collection was also

00:43:45,870 --> 00:43:50,280
that a lot of their use cases were

00:43:47,850 --> 00:43:51,870
actually oh we have a graph and we set a

00:43:50,280 --> 00:43:53,940
threshold and when it goes above we want

00:43:51,870 --> 00:43:55,710
to know it and we don't want to write

00:43:53,940 --> 00:43:59,010
any code for it we just want to have the

00:43:55,710 --> 00:44:01,530
line so we said okay we can do that so

00:43:59,010 --> 00:44:05,490
we built web-based are loading into our

00:44:01,530 --> 00:44:06,990
own system simple / holding you had this

00:44:05,490 --> 00:44:08,850
very same graph that you were looking at

00:44:06,990 --> 00:44:11,880
you could go you could have alert the

00:44:08,850 --> 00:44:15,900
Coast other above or below or missing if

00:44:11,880 --> 00:44:17,910
the data wasn't there and we did the

00:44:15,900 --> 00:44:20,370
echo the we integrate directly in the

00:44:17,910 --> 00:44:24,720
fondant so there was no code it was just

00:44:20,370 --> 00:44:26,460
you making configuration that kind of

00:44:24,720 --> 00:44:28,110
look like this so you have the very same

00:44:26,460 --> 00:44:29,520
graph you had but now you could make it

00:44:28,110 --> 00:44:32,790
a lot of definition and say if it goes

00:44:29,520 --> 00:44:37,350
above this line alert me or above this

00:44:32,790 --> 00:44:39,660
line for so and so long and we thought

00:44:37,350 --> 00:44:41,490
clearly does use cases for this but not

00:44:39,660 --> 00:44:43,890
a lot but the result was that our

00:44:41,490 --> 00:44:45,460
engineers when we have when we make this

00:44:43,890 --> 00:44:48,640
they started mass

00:44:45,460 --> 00:44:50,349
Gration people moved out a reminisce as

00:44:48,640 --> 00:44:54,270
faster they could we didn't ask him to

00:44:50,349 --> 00:44:56,500
latest did they came in and deleted 100

00:44:54,270 --> 00:44:58,290
sometimes thousands of lines of Riemann

00:44:56,500 --> 00:45:01,240
code that they have written themselves

00:44:58,290 --> 00:45:03,070
because they didn't need them anymore so

00:45:01,240 --> 00:45:04,800
it doesn't matter that we said oh we

00:45:03,070 --> 00:45:07,089
probably want something more clever than

00:45:04,800 --> 00:45:09,730
just a threshold the reality was that

00:45:07,089 --> 00:45:12,510
our engineers who were running this one

00:45:09,730 --> 00:45:18,119
the threshold and this gave adoption and

00:45:12,510 --> 00:45:24,910
so this was actually fueling adoption

00:45:18,119 --> 00:45:26,170
quite a bit because what many mounting

00:45:24,910 --> 00:45:28,359
problems can indeed be expressed a

00:45:26,170 --> 00:45:30,580
simple threshold if you have a powerful

00:45:28,359 --> 00:45:33,060
enough core engine and you collect the

00:45:30,580 --> 00:45:38,109
right things so what we saw was a

00:45:33,060 --> 00:45:39,490
lifetime of heroic the number of time

00:45:38,109 --> 00:45:41,560
series that we were collecting the

00:45:39,490 --> 00:45:47,619
number amount of data were collecting

00:45:41,560 --> 00:45:49,240
exploded Mallis overnight because people

00:45:47,619 --> 00:45:54,130
all of a sudden had value and it was

00:45:49,240 --> 00:45:56,740
easy to use and we're currently

00:45:54,130 --> 00:46:01,119
collecting around 10 terabytes of metric

00:45:56,740 --> 00:46:04,000
data worldwide every month and this is

00:46:01,119 --> 00:46:05,580
with our current rate but the one of the

00:46:04,000 --> 00:46:08,560
reasons that we have had from this is

00:46:05,580 --> 00:46:11,589
every time we make something easier and

00:46:08,560 --> 00:46:20,740
better more people will start using it

00:46:11,589 --> 00:46:22,089
so scaling is not over and so our

00:46:20,740 --> 00:46:24,190
current pipeline actually looks like

00:46:22,089 --> 00:46:25,540
this this is what our magic cloud looks

00:46:24,190 --> 00:46:27,540
like right now I still fast-forward

00:46:25,540 --> 00:46:30,670
because this was a very good investment

00:46:27,540 --> 00:46:34,030
so people send stuff in too fast Ford it

00:46:30,670 --> 00:46:35,380
goes into Riemann and heroic and we get

00:46:34,030 --> 00:46:36,849
alerts and pretty graphs we have both

00:46:35,380 --> 00:46:39,190
systems running and this is what it

00:46:36,849 --> 00:46:42,880
looks like right now but the system that

00:46:39,190 --> 00:46:48,599
people use the most love the most is

00:46:42,880 --> 00:46:50,770
acting our time series database and

00:46:48,599 --> 00:46:52,420
we've actually open source it just

00:46:50,770 --> 00:46:54,700
yesterday we were working for a while

00:46:52,420 --> 00:46:56,200
for because as that fast forward it was

00:46:54,700 --> 00:46:58,420
it was meant as a good idea so that was

00:46:56,200 --> 00:46:59,020
devolved in the open from the get-go but

00:46:58,420 --> 00:47:01,360
heroic was

00:46:59,020 --> 00:47:03,160
never meant to be its own product it was

00:47:01,360 --> 00:47:06,670
a pat solution for something that we

00:47:03,160 --> 00:47:07,780
hope someone else would fix and so by

00:47:06,670 --> 00:47:08,860
the time we had a free nice prank and

00:47:07,780 --> 00:47:10,360
said well we went to open source it then

00:47:08,860 --> 00:47:12,070
we had all the extra work it comes with

00:47:10,360 --> 00:47:14,320
that so it only happened just yesterday

00:47:12,070 --> 00:47:16,930
we have more components they're probably

00:47:14,320 --> 00:47:18,790
coming out soon but this is the one that

00:47:16,930 --> 00:47:22,030
I can tell it's actually out there

00:47:18,790 --> 00:47:23,500
already now I have most nights about

00:47:22,030 --> 00:47:25,570
what we learned so far but I would

00:47:23,500 --> 00:47:28,650
rather take questions so we direct it to

00:47:25,570 --> 00:47:32,980
what you're interested in hearing about

00:47:28,650 --> 00:47:43,420
so listen no question then I just

00:47:32,980 --> 00:47:46,090
continue yeah yeah in the beginning you

00:47:43,420 --> 00:47:49,240
mentioned you have 10,000 physical

00:47:46,090 --> 00:47:51,310
servers yes what kind of as a custom

00:47:49,240 --> 00:47:57,010
build or something standard hardware or

00:47:51,310 --> 00:48:00,700
whatever its a mix um today we have

00:47:57,010 --> 00:48:06,040
aligned our our our our server

00:48:00,700 --> 00:48:08,710
infrastructure of as much as we can so

00:48:06,040 --> 00:48:11,500
we are can't remember what brand were

00:48:08,710 --> 00:48:14,080
running but we have rather than trying

00:48:11,500 --> 00:48:16,900
to have to to to build say for instance

00:48:14,080 --> 00:48:20,230
deployment systems that can deploy

00:48:16,900 --> 00:48:22,960
everything we have a limited number of

00:48:20,230 --> 00:48:25,270
types of machines and so when you're

00:48:22,960 --> 00:48:28,090
developing and you want to you want to

00:48:25,270 --> 00:48:33,730
plug it service you've deployed say a

00:48:28,090 --> 00:48:36,670
high CPU machine or a high io io ops

00:48:33,730 --> 00:48:38,860
machine if you know that you're doing

00:48:36,670 --> 00:48:41,700
something with a database so that's what

00:48:38,860 --> 00:48:49,240
we're doing this was not always the case

00:48:41,700 --> 00:48:51,820
I say around 2010 one of the major

00:48:49,240 --> 00:48:54,310
complaints were that we were switching

00:48:51,820 --> 00:48:56,290
vendors left and right and so at one

00:48:54,310 --> 00:48:59,280
point we probably have more or less

00:48:56,290 --> 00:49:01,540
every vendor in our server room and

00:48:59,280 --> 00:49:04,200
that's not a good idea when you want to

00:49:01,540 --> 00:49:04,200
manage a lot of machines

00:49:07,700 --> 00:49:13,970
um how did you make sure that you learn

00:49:11,579 --> 00:49:17,369
from your colleagues in our different

00:49:13,970 --> 00:49:20,759
departments about things they won't do

00:49:17,369 --> 00:49:24,960
we have some kind of communication what

00:49:20,759 --> 00:49:28,410
to use how do you make it mm-hmm good

00:49:24,960 --> 00:49:30,329
question um the general answer to that

00:49:28,410 --> 00:49:33,839
question is of course that you make sure

00:49:30,329 --> 00:49:36,809
to pick up the learnings when they

00:49:33,839 --> 00:49:38,819
happen this is general pattern that we

00:49:36,809 --> 00:49:41,480
have all of us Spotify not just with

00:49:38,819 --> 00:49:44,009
monitoring operations when we have a

00:49:41,480 --> 00:49:46,410
major event or failure of something we

00:49:44,009 --> 00:49:47,910
do something called post-mortem it's

00:49:46,410 --> 00:49:50,309
basically a big meeting where where

00:49:47,910 --> 00:49:52,440
anyone who had a stake in it or were

00:49:50,309 --> 00:49:54,299
involved with it will sit down and go

00:49:52,440 --> 00:49:56,849
through ok so what exactly happened and

00:49:54,299 --> 00:49:57,930
how do we what was the learn from it and

00:49:56,849 --> 00:50:00,089
how to make sure that doesn't happen

00:49:57,930 --> 00:50:02,849
again this is actually how we handle

00:50:00,089 --> 00:50:04,410
most of our back-end incidents whenever

00:50:02,849 --> 00:50:05,940
you have an incident the way where you

00:50:04,410 --> 00:50:08,400
actually have down time you have a

00:50:05,940 --> 00:50:10,739
post-mortem in your team the idea being

00:50:08,400 --> 00:50:13,230
there that having a failure is not a

00:50:10,739 --> 00:50:14,400
problem things fail things break things

00:50:13,230 --> 00:50:17,190
you didn't know about maybe you have a

00:50:14,400 --> 00:50:20,329
bug having the same failure twice as

00:50:17,190 --> 00:50:22,710
stupid so figure out what went wrong

00:50:20,329 --> 00:50:24,720
afterwards and that happens on bigger

00:50:22,710 --> 00:50:26,700
things as well like when we do a big

00:50:24,720 --> 00:50:29,700
lunch and after after the big launch we

00:50:26,700 --> 00:50:32,339
realized that we this was horrible

00:50:29,700 --> 00:50:34,470
experience for the developers or we

00:50:32,339 --> 00:50:37,829
missed the deadline or this was totally

00:50:34,470 --> 00:50:39,239
not what our customers wondered what did

00:50:37,829 --> 00:50:42,779
we miss we have post-mortem count that

00:50:39,239 --> 00:50:45,059
as well a second thing when it comes to

00:50:42,779 --> 00:50:47,940
building infrastructure is once you know

00:50:45,059 --> 00:50:50,150
what is the right thing to do you can

00:50:47,940 --> 00:50:53,220
both teach it but you can also build

00:50:50,150 --> 00:50:55,890
tools and golden pass to sort of push

00:50:53,220 --> 00:50:57,630
your users to the right things otherwise

00:50:55,890 --> 00:51:00,180
they will be clever and do all the wrong

00:50:57,630 --> 00:51:02,749
things that you yourself already did but

00:51:00,180 --> 00:51:02,749
now know better

00:51:05,509 --> 00:51:10,609
it seemed to do a lot of coding for your

00:51:08,509 --> 00:51:13,309
monitoring solutions is this something

00:51:10,609 --> 00:51:15,229
that your core monitoring team of six is

00:51:13,309 --> 00:51:19,839
doing or are you just smacking it and

00:51:15,229 --> 00:51:21,799
passing it out to the dev teams the

00:51:19,839 --> 00:51:25,099
infrastructure involved in the

00:51:21,799 --> 00:51:27,079
monitoring system so Riemann and all the

00:51:25,099 --> 00:51:29,509
library to build their heroic all think

00:51:27,079 --> 00:51:31,069
we built there all the all the things

00:51:29,509 --> 00:51:33,469
that we don't want our future to use to

00:51:31,069 --> 00:51:35,329
be aware of they shouldn't care about as

00:51:33,469 --> 00:51:39,319
something that that we in the team of

00:51:35,329 --> 00:51:42,229
six are building when it comes to 22

00:51:39,319 --> 00:51:44,419
defining alerting rules or setting up

00:51:42,229 --> 00:51:46,880
dashboards and all these things that's

00:51:44,419 --> 00:51:49,009
what the individual theta teams are

00:51:46,880 --> 00:51:50,929
doing and what we're seeing now is also

00:51:49,009 --> 00:51:54,169
that when they want to move faster than

00:51:50,929 --> 00:51:57,679
we a team of six people are are capable

00:51:54,169 --> 00:52:01,069
of they're asking us to actually make

00:51:57,679 --> 00:52:02,209
our monitoring solution add api's to a

00:52:01,069 --> 00:52:03,949
monitoring solution so they can start

00:52:02,209 --> 00:52:05,539
building the tools themselves that they

00:52:03,949 --> 00:52:09,049
want us to build but we don't have time

00:52:05,539 --> 00:52:12,469
for we don't have for instance dashboard

00:52:09,049 --> 00:52:14,539
templating yes yet and and and so so

00:52:12,469 --> 00:52:17,199
everyone is building their own dashboard

00:52:14,539 --> 00:52:20,329
from scratch so one of the number one

00:52:17,199 --> 00:52:22,549
feature request from a bunch of teams is

00:52:20,329 --> 00:52:23,809
oh but just give us an API so we can

00:52:22,549 --> 00:52:24,979
inject our own dashboards and we'll

00:52:23,809 --> 00:52:26,749
build the templating system for

00:52:24,979 --> 00:52:29,659
ourselves well you get to the point

00:52:26,749 --> 00:52:31,249
where your customers are building doing

00:52:29,659 --> 00:52:40,399
your job in building your own things you

00:52:31,249 --> 00:52:42,199
know you're on the right path I'm just a

00:52:40,399 --> 00:52:44,299
quick question I've been looking on your

00:52:42,199 --> 00:52:49,699
blog posted on the website for heroic

00:52:44,299 --> 00:52:51,349
what is the license uh I think it's

00:52:49,699 --> 00:52:52,729
apache license or something but the

00:52:51,349 --> 00:52:55,849
reason i ask is i work on a project

00:52:52,729 --> 00:52:57,409
called opennms yes and we have a time

00:52:55,849 --> 00:52:58,999
series database called newts that's

00:52:57,409 --> 00:53:01,159
built on top of Cassandra yes and

00:52:58,999 --> 00:53:03,349
because I'm all about the open source

00:53:01,159 --> 00:53:06,319
I'm looking to see if there's some way

00:53:03,349 --> 00:53:09,199
that maybe we can work together between

00:53:06,319 --> 00:53:11,029
newts and heroic and so we're Apache on

00:53:09,199 --> 00:53:12,409
myspace as well so if it's Apache I

00:53:11,029 --> 00:53:14,179
think there might be some good synergies

00:53:12,409 --> 00:53:16,789
there well the easiest way to find out

00:53:14,179 --> 00:53:18,890
is actually to just look at a sing one

00:53:16,789 --> 00:53:21,500
of our source files because one

00:53:18,890 --> 00:53:24,170
the four developer painful things but

00:53:21,500 --> 00:53:25,849
for company same things we have is that

00:53:24,170 --> 00:53:28,190
whenever we open saw something we

00:53:25,849 --> 00:53:32,240
require that the license is as a header

00:53:28,190 --> 00:53:33,470
in type of every single source file so

00:53:32,240 --> 00:53:47,720
open it up source file and we'll be

00:53:33,470 --> 00:53:51,170
right there it's an Apache nice okay and

00:53:47,720 --> 00:53:54,170
so storing 10 10 terabytes of matrix

00:53:51,170 --> 00:53:56,269
data is a very impressive number what

00:53:54,170 --> 00:53:58,819
kind of storage I using to store that

00:53:56,269 --> 00:54:02,119
data do you need SSDs so that it's fast

00:53:58,819 --> 00:54:04,519
enough or using internal disks or is a

00:54:02,119 --> 00:54:06,769
network attached storage enough for

00:54:04,519 --> 00:54:09,470
storing that amount that's where it

00:54:06,769 --> 00:54:15,529
becomes a little bit interesting we have

00:54:09,470 --> 00:54:17,180
grown beyond SSDs the Cassandra

00:54:15,529 --> 00:54:20,769
processor we're running right now is

00:54:17,180 --> 00:54:23,269
running with a particular type of

00:54:20,769 --> 00:54:25,579
storage that's called fusion io if

00:54:23,269 --> 00:54:31,299
anyone had heard about that basically

00:54:25,579 --> 00:54:35,109
fusion-io is a gigantic flash drive and

00:54:31,299 --> 00:54:35,109
it's super expensive

00:54:36,720 --> 00:54:41,340
this is also one of the reasons why wait

00:54:39,310 --> 00:54:43,840
we don't think we're done developing

00:54:41,340 --> 00:54:45,850
because in the beginning when we wanted

00:54:43,840 --> 00:54:48,730
to build monitoring and just need to

00:54:45,850 --> 00:54:52,210
work it was important for the company

00:54:48,730 --> 00:54:53,410
that we that we moved fast so obviously

00:54:52,210 --> 00:54:57,640
yes through hardware at the problem

00:54:53,410 --> 00:55:00,430
until it works so we did and it does

00:54:57,640 --> 00:55:02,710
work and and and it in in and and the

00:55:00,430 --> 00:55:04,600
value we get out of it don't don't get

00:55:02,710 --> 00:55:07,180
me wrong the value we get out of having

00:55:04,600 --> 00:55:11,350
the solution at our scale far outnumbers

00:55:07,180 --> 00:55:14,470
the cost of the hardware but there is a

00:55:11,350 --> 00:55:16,690
threshold because we currently have

00:55:14,470 --> 00:55:18,970
unlimited history so we keep scaling our

00:55:16,690 --> 00:55:23,670
extender clusters and last time I asked

00:55:18,970 --> 00:55:27,990
for 444 doubling our London cluster our

00:55:23,670 --> 00:55:27,990
chief operations you look kind of funny

00:55:29,940 --> 00:55:37,330
but monitoring is a difficult thing

00:55:32,530 --> 00:55:39,550
because metric day metrics that you're

00:55:37,330 --> 00:55:42,430
collecting they have values two times

00:55:39,550 --> 00:55:44,620
they have value when you collect them

00:55:42,430 --> 00:55:46,090
when they're true and you have alerting

00:55:44,620 --> 00:55:50,110
rules that look at them then they're

00:55:46,090 --> 00:55:52,330
valuable for you but anything you

00:55:50,110 --> 00:55:53,860
collect it might also be valuable when

00:55:52,330 --> 00:55:56,620
you want to go back and see what the

00:55:53,860 --> 00:55:58,570
 happened but it might not be and

00:55:56,620 --> 00:56:00,100
when you're collecting tons and tons of

00:55:58,570 --> 00:56:03,070
data there's a lot of spam that you will

00:56:00,100 --> 00:56:06,810
never use you have no idea what it is

00:56:03,070 --> 00:56:10,090
that you don't want to use and our

00:56:06,810 --> 00:56:14,650
experience right now for our situation

00:56:10,090 --> 00:56:16,870
is that is actually better to just give

00:56:14,650 --> 00:56:19,750
developers the ability to collect a

00:56:16,870 --> 00:56:22,300
ton of data and and sort it out and deal

00:56:19,750 --> 00:56:30,210
with it rather than trying to optimize

00:56:22,300 --> 00:56:30,210
for cost early on thanks

00:56:34,320 --> 00:56:44,470
more questions do you guys have a kind

00:56:39,910 --> 00:56:47,620
of fixed pattern charting your Cassandra

00:56:44,470 --> 00:56:51,010
classes so do you yeah I don't know do

00:56:47,620 --> 00:56:53,260
try to generate the data locally and

00:56:51,010 --> 00:57:00,430
just collect them for the dashboards

00:56:53,260 --> 00:57:02,800
from the locations or no the system is

00:57:00,430 --> 00:57:04,390
built around the idea that we want the

00:57:02,800 --> 00:57:06,880
monitoring system needs to be extremely

00:57:04,390 --> 00:57:08,470
robust when everything is on is on fire

00:57:06,880 --> 00:57:11,470
the monitoring system should still be

00:57:08,470 --> 00:57:15,820
alive otherwise it doesn't really tell

00:57:11,470 --> 00:57:17,710
you much and so we tried to get the

00:57:15,820 --> 00:57:23,440
monitoring of the host as quickly as

00:57:17,710 --> 00:57:26,200
possible because the host might die we

00:57:23,440 --> 00:57:28,390
run with a replication factor of three

00:57:26,200 --> 00:57:34,120
in our Cassandra cluster right now so we

00:57:28,390 --> 00:57:36,520
can lose note and we run with the

00:57:34,120 --> 00:57:39,730
Cassandra cluster / actually we run with

00:57:36,520 --> 00:57:41,680
like a copy of the infrastructure / data

00:57:39,730 --> 00:57:43,390
center because the idea is that we

00:57:41,680 --> 00:57:45,370
should be able to lose anyone data

00:57:43,390 --> 00:57:49,360
center and the rest of the monitoring

00:57:45,370 --> 00:57:51,850
she's just keep working and if it's just

00:57:49,360 --> 00:57:53,890
network that goes out even if you count

00:57:51,850 --> 00:57:55,030
access and nothing goes and you don't

00:57:53,890 --> 00:57:57,040
know what's going on inside your data

00:57:55,030 --> 00:57:58,870
and the one network comes back we want

00:57:57,040 --> 00:58:00,400
all the data to be present so you can

00:57:58,870 --> 00:58:03,060
inspect what happened while you did

00:58:00,400 --> 00:58:05,110
couldn't access your data center so

00:58:03,060 --> 00:58:08,980
local Cassandra clusters in our data

00:58:05,110 --> 00:58:10,900
center high replication oh and and

00:58:08,980 --> 00:58:13,510
basically anything we do is about

00:58:10,900 --> 00:58:16,420
scaling horizontally and and and having

00:58:13,510 --> 00:58:18,250
high replication both to be able to

00:58:16,420 --> 00:58:20,950
handle the amount of data and and and

00:58:18,250 --> 00:58:24,250
and and the amount a request but also

00:58:20,950 --> 00:58:25,180
just to be able to lose any one bit we

00:58:24,250 --> 00:58:27,840
don't want to have single point of

00:58:25,180 --> 00:58:27,840
failure anywhere

00:58:34,430 --> 00:58:40,710
hey and I although using the same system

00:58:38,700 --> 00:58:43,140
for monitoring of your network for

00:58:40,710 --> 00:58:47,310
example I'm not just pinging also for

00:58:43,140 --> 00:58:48,510
deeper layer 2 layer 3 monitoring the

00:58:47,310 --> 00:58:53,070
monitoring Susan I've been talking about

00:58:48,510 --> 00:58:55,830
here is mostly focused on back end oh we

00:58:53,070 --> 00:58:59,280
have a different we have different

00:58:55,830 --> 00:59:01,130
monitoring solutions for our fondant the

00:58:59,280 --> 00:59:04,310
one of the people who run our website Oh

00:59:01,130 --> 00:59:08,150
have gone with a commercial solution

00:59:04,310 --> 00:59:10,560
which is good because it's focused on on

00:59:08,150 --> 00:59:13,470
ours is generic solution there is a

00:59:10,560 --> 00:59:16,380
solution focused on good monitoring and

00:59:13,470 --> 00:59:18,120
good debugging for specifically websites

00:59:16,380 --> 00:59:21,060
so so it's a much better solution for

00:59:18,120 --> 00:59:22,230
them network have their own issues they

00:59:21,060 --> 00:59:24,360
are actually building some monitoring

00:59:22,230 --> 00:59:27,480
solution right now we are assisting them

00:59:24,360 --> 00:59:29,690
with our knowledge but their data model

00:59:27,480 --> 00:59:32,610
doesn't really fit into what we're doing

00:59:29,690 --> 00:59:35,850
and we actually have a similar situation

00:59:32,610 --> 00:59:37,410
with our analytics pipeline again we are

00:59:35,850 --> 00:59:38,940
helping them with best practices we're

00:59:37,410 --> 00:59:40,800
helping them building that but the data

00:59:38,940 --> 00:59:43,950
model looks different our system is

00:59:40,800 --> 00:59:46,220
tuned for massive amounts of very simple

00:59:43,950 --> 00:59:51,690
data you measure things but you measure

00:59:46,220 --> 00:59:53,880
millions of it data pipelines you have

00:59:51,690 --> 00:59:55,410
very few data points but you want to

00:59:53,880 --> 00:59:57,450
know about dependencies so if the data

00:59:55,410 --> 00:59:58,950
pipeline breaks you want to know so did

00:59:57,450 --> 01:00:00,750
it break because something else broke

00:59:58,950 --> 01:00:02,460
and who else is affected and where

01:00:00,750 --> 01:00:04,380
deadlines and all these things don't

01:00:02,460 --> 01:00:06,120
really map into a time save database and

01:00:04,380 --> 01:00:07,590
rather than trying to match everything

01:00:06,120 --> 01:00:16,020
together we try to share knowledge

01:00:07,590 --> 01:00:18,260
rather than technology okay one last

01:00:16,020 --> 01:00:18,260
question

01:00:19,369 --> 01:00:24,019
I just a short question so with the

01:00:22,069 --> 01:00:26,119
current solution running on heroic you

01:00:24,019 --> 01:00:29,180
kind of lost the ability to run unit

01:00:26,119 --> 01:00:30,440
tests against the the the assertion

01:00:29,180 --> 01:00:32,299
assertions which you have this has

01:00:30,440 --> 01:00:34,039
something with you which you plan to

01:00:32,299 --> 01:00:38,749
bring in orbit you even have to do that

01:00:34,039 --> 01:00:41,690
auto expanded not really unit tests made

01:00:38,749 --> 01:00:45,009
a lot of sense when you write your rules

01:00:41,690 --> 01:00:47,869
as a piece of code and you're loading on

01:00:45,009 --> 01:00:50,119
an incoming stream of events also

01:00:47,869 --> 01:00:53,329
metrics but you have a piece of code

01:00:50,119 --> 01:00:54,559
you're testing because the piece of code

01:00:53,329 --> 01:00:56,749
you're doing depending on what you're

01:00:54,559 --> 01:00:59,809
looking at might be simple but most

01:00:56,749 --> 01:01:02,569
might be complex what graph-based

01:00:59,809 --> 01:01:04,519
loading is doing is moving that

01:01:02,569 --> 01:01:07,039
complexity and saying we want to try to

01:01:04,519 --> 01:01:09,019
reduce our problem to something you can

01:01:07,039 --> 01:01:11,779
reason about with the threshold so

01:01:09,019 --> 01:01:14,089
rather than having a complex rule you

01:01:11,779 --> 01:01:17,299
have a powerful query language so you

01:01:14,089 --> 01:01:19,700
and you have powerful collection so you

01:01:17,299 --> 01:01:22,220
make sure that you have you you

01:01:19,700 --> 01:01:25,880
transform your data into something you

01:01:22,220 --> 01:01:27,859
can reason about on a graph and no real

01:01:25,880 --> 01:01:28,970
need for unit testing there as long as

01:01:27,859 --> 01:01:30,680
you have unit testing of your quarry

01:01:28,970 --> 01:01:37,660
language but you probably have that

01:01:30,680 --> 01:01:43,549
anyway ok I think we're at the end no

01:01:37,660 --> 01:01:46,970
can I say one more thing as I am

01:01:43,549 --> 01:01:49,279
long-winded I know but this was actually

01:01:46,970 --> 01:01:52,220
I had a bunch of learnings of things

01:01:49,279 --> 01:01:54,079
we've picked up along the way but the

01:01:52,220 --> 01:01:56,119
most important thing actually have to

01:01:54,079 --> 01:01:58,579
say is the one that we haven't solved

01:01:56,119 --> 01:02:02,749
and to invest my knowledge is not really

01:01:58,579 --> 01:02:05,210
solved yet a lot of us are still talking

01:02:02,749 --> 01:02:09,289
about scaling monitoring as in scaling

01:02:05,210 --> 01:02:10,759
collection and scaling graphing I want

01:02:09,289 --> 01:02:14,029
to give you an idea of what comes after

01:02:10,759 --> 01:02:15,769
that because it's not over after a

01:02:14,029 --> 01:02:18,680
hundred million time series the next

01:02:15,769 --> 01:02:22,460
problem that comes is a human one not a

01:02:18,680 --> 01:02:24,589
machine one its discovery your machine

01:02:22,460 --> 01:02:25,910
has no problem reasoning about hundred

01:02:24,589 --> 01:02:28,249
million time series you can remember

01:02:25,910 --> 01:02:29,480
though them all but as a human trying to

01:02:28,249 --> 01:02:31,099
find out what you have in your

01:02:29,480 --> 01:02:32,200
monitoring system and what to drill down

01:02:31,099 --> 01:02:35,440
in as if we

01:02:32,200 --> 01:02:36,849
difficult building a UI that can give

01:02:35,440 --> 01:02:39,339
you an overview of they submit this much

01:02:36,849 --> 01:02:41,410
data is really difficult not because the

01:02:39,339 --> 01:02:43,270
machine can't handle it but because your

01:02:41,410 --> 01:02:45,670
users the ones are you consuming it

01:02:43,270 --> 01:02:48,300
capped and this is to the best of my

01:02:45,670 --> 01:02:51,930
knowledge a somewhat on soul problem

01:02:48,300 --> 01:02:54,670
there are some promising solutions of

01:02:51,930 --> 01:02:56,200
upcoming companies bringing anomaly

01:02:54,670 --> 01:02:58,050
detection I don't know if this anomaly

01:02:56,200 --> 01:03:00,550
detection in the open source world yet

01:02:58,050 --> 01:03:03,160
and it looks promising but machine

01:03:00,550 --> 01:03:06,010
learning and and and normal detection

01:03:03,160 --> 01:03:09,369
can help us focus in on this huge amount

01:03:06,010 --> 01:03:14,140
of data but the people I talked to so

01:03:09,369 --> 01:03:16,960
far this is this is what comes next this

01:03:14,140 --> 01:03:19,720
is the next scaling problem for us

01:03:16,960 --> 01:03:23,200
searching this data finding what is it

01:03:19,720 --> 01:03:27,480
what is interesting we'll see what's the

01:03:23,200 --> 01:03:27,480

YouTube URL: https://www.youtube.com/watch?v=j70WnyD9CJo


