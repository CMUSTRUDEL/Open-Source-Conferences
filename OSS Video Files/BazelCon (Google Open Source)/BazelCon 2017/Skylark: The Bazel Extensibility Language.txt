Title: Skylark: The Bazel Extensibility Language
Publication date: 2017-12-08
Playlist: BazelCon 2017
Description: 
	by Laurent Le Brun (Bazel team)
Captions: 
	00:00:00,240 --> 00:00:07,109
good morning everyone I am Luhan I am in

00:00:04,380 --> 00:00:08,309
the better team so and I work mostly on

00:00:07,109 --> 00:00:13,110
Scylla

00:00:08,309 --> 00:00:16,710
so I will give some overview of what are

00:00:13,110 --> 00:00:19,650
the features in science gala and what we

00:00:16,710 --> 00:00:23,900
are going to include to do next so the

00:00:19,650 --> 00:00:26,970
new features so when we are so Scylla is

00:00:23,900 --> 00:00:30,300
designed to be just a simple language to

00:00:26,970 --> 00:00:35,219
extend payroll so to engage youth in

00:00:30,300 --> 00:00:39,930
both big files and visual files the

00:00:35,219 --> 00:00:42,360
syntax is a subset of of Python so it

00:00:39,930 --> 00:00:44,219
should be familiar to most people in

00:00:42,360 --> 00:00:45,809
general in general with people like to

00:00:44,219 --> 00:00:50,520
do it with Python code and find it with

00:00:45,809 --> 00:00:55,350
Abel and if it is a sweat safe by design

00:00:50,520 --> 00:01:00,210
to it unlike many languages so so we are

00:00:55,350 --> 00:01:03,960
say it is feature by whenever a data

00:01:00,210 --> 00:01:07,770
structure is shared it gets frozen it

00:01:03,960 --> 00:01:10,650
becomes immutable this enables us to if

00:01:07,770 --> 00:01:13,650
I get a lot of code in parallel in many

00:01:10,650 --> 00:01:15,900
different threads and to adjust the

00:01:13,650 --> 00:01:18,390
results when a digital file is loaded

00:01:15,900 --> 00:01:20,460
first with just a wizard and we can

00:01:18,390 --> 00:01:24,030
reuse it many times because we know to

00:01:20,460 --> 00:01:28,200
never change its schematic by design so

00:01:24,030 --> 00:01:30,600
you cannot access scene from the one for

00:01:28,200 --> 00:01:33,450
from the operating systems so for the

00:01:30,600 --> 00:01:36,479
files network and so on and it's

00:01:33,450 --> 00:01:38,189
deterministic by design so whenever you

00:01:36,479 --> 00:01:40,860
evaluate a code it will always be under

00:01:38,189 --> 00:01:44,640
the same same result so this is

00:01:40,860 --> 00:01:46,710
guaranteed and all these properties are

00:01:44,640 --> 00:01:48,960
they were important to us because we

00:01:46,710 --> 00:01:51,180
want to have reproducible builds so

00:01:48,960 --> 00:01:53,189
whenever you build your your code you

00:01:51,180 --> 00:01:57,270
want to get the exact same result at the

00:01:53,189 --> 00:01:59,969
end so with basil but not everything is

00:01:57,270 --> 00:02:03,630
fully reproducible all the time because

00:01:59,969 --> 00:02:05,670
of the execution phase but at least in

00:02:03,630 --> 00:02:09,840
the evaluation phase we we had this

00:02:05,670 --> 00:02:11,790
quality so we have built files built

00:02:09,840 --> 00:02:13,709
files intended to be simple and

00:02:11,790 --> 00:02:17,010
descriptive it's

00:02:13,709 --> 00:02:19,859
it's a high-level representation of your

00:02:17,010 --> 00:02:22,290
project so what are the targets what has

00:02:19,859 --> 00:02:25,319
a binder is what I saliva is what depend

00:02:22,290 --> 00:02:28,769
on what so it's very high level and it's

00:02:25,319 --> 00:02:30,299
tend to be readable by both humans and

00:02:28,769 --> 00:02:32,159
tools too

00:02:30,299 --> 00:02:34,469
normally when you look at a bin file you

00:02:32,159 --> 00:02:37,200
have an idea of what's going on and how

00:02:34,469 --> 00:02:39,180
the project is structured it's also

00:02:37,200 --> 00:02:42,150
important for tools because we want

00:02:39,180 --> 00:02:45,750
tools to be able to read and understand

00:02:42,150 --> 00:02:49,230
the build file as well as a human this

00:02:45,750 --> 00:02:53,129
is super important to enable earth quake

00:02:49,230 --> 00:02:55,970
tools on top of basil and the build file

00:02:53,129 --> 00:02:59,010
should also be avoidable by tools

00:02:55,970 --> 00:03:01,500
ideally tools would take care of your

00:02:59,010 --> 00:03:03,750
build like there was a presentation

00:03:01,500 --> 00:03:05,129
yesterday but together you're just one

00:03:03,750 --> 00:03:07,349
guess all it will generate your build

00:03:05,129 --> 00:03:09,840
file you never have to look at it and it

00:03:07,349 --> 00:03:11,669
just works so it's not that wait for

00:03:09,840 --> 00:03:15,200
every language but such a goal

00:03:11,669 --> 00:03:18,989
so ideally we should be able to generate

00:03:15,200 --> 00:03:21,690
build files automatically or if we have

00:03:18,989 --> 00:03:24,120
some ID integration in the future ideas

00:03:21,690 --> 00:03:27,859
should be able to update the build files

00:03:24,120 --> 00:03:31,290
whenever you either are filing a project

00:03:27,859 --> 00:03:33,540
and so before I just high level

00:03:31,290 --> 00:03:36,389
description so just some example from

00:03:33,540 --> 00:03:38,669
Scala even if most of you haven't used

00:03:36,389 --> 00:03:40,590
to scale I in Basel you can understand

00:03:38,669 --> 00:03:43,650
what's going on because it's consistent

00:03:40,590 --> 00:03:45,329
with the rest of other walls you could

00:03:43,650 --> 00:03:49,439
have Java library instead it would just

00:03:45,329 --> 00:03:53,579
be the same and in digital files we have

00:03:49,439 --> 00:03:57,419
the actual logic so busy fast describes

00:03:53,579 --> 00:04:00,720
the walls and to make holes and so it

00:03:57,419 --> 00:04:02,459
just how yes it is the explanations or

00:04:00,720 --> 00:04:06,060
the details of where the build file

00:04:02,459 --> 00:04:08,120
actually works and so works as a way to

00:04:06,060 --> 00:04:10,859
support new languages and new tools and

00:04:08,120 --> 00:04:14,400
when I mean languages so it's not just

00:04:10,859 --> 00:04:17,639
computer languages just like C++ or Java

00:04:14,400 --> 00:04:23,210
but you can imagine lots of other tools

00:04:17,639 --> 00:04:26,340
like if you if you want to generate a

00:04:23,210 --> 00:04:27,210
latex document you could just put your

00:04:26,340 --> 00:04:28,889
your

00:04:27,210 --> 00:04:31,050
files there and it will generate you

00:04:28,889 --> 00:04:35,759
know as a document or you could have

00:04:31,050 --> 00:04:37,770
some words - to whom - quite a data like

00:04:35,759 --> 00:04:39,330
if you have a video game and you want to

00:04:37,770 --> 00:04:41,130
generate some of the images in different

00:04:39,330 --> 00:04:48,199
sizes or if you want to generate

00:04:41,130 --> 00:04:50,550
anything it just triangles for that and

00:04:48,199 --> 00:04:52,500
and some echoes are just a lightweight

00:04:50,550 --> 00:04:54,750
mechanism - I set and kept you late

00:04:52,500 --> 00:04:56,669
existing holes so normally if you want

00:04:54,750 --> 00:05:00,210
to do anything complicated don't use

00:04:56,669 --> 00:05:03,389
Michaels so my quasi just it just

00:05:00,210 --> 00:05:05,910
convenient but just be careful because

00:05:03,389 --> 00:05:08,130
it doesn't scale well and you do that

00:05:05,910 --> 00:05:11,880
often tempted to quite lots of macros to

00:05:08,130 --> 00:05:13,289
simplify the build files but it's often

00:05:11,880 --> 00:05:14,270
more difficult to maintain the files

00:05:13,289 --> 00:05:16,680
after that

00:05:14,270 --> 00:05:18,750
so actually you just keep your built

00:05:16,680 --> 00:05:21,630
five simple and even if you have

00:05:18,750 --> 00:05:22,770
repetitive it's fine because you when

00:05:21,630 --> 00:05:25,319
you look at the bill five screen just

00:05:22,770 --> 00:05:27,389
isn't instantly understand it if you try

00:05:25,319 --> 00:05:29,940
to factor everything and remove every

00:05:27,389 --> 00:05:31,409
duplication then the business suddenly

00:05:29,940 --> 00:05:33,270
become more complicated to maintain

00:05:31,409 --> 00:05:36,930
arguments and especially by tools

00:05:33,270 --> 00:05:38,849
because tools would have to evaluate you

00:05:36,930 --> 00:05:41,940
your functions and see understand

00:05:38,849 --> 00:05:44,190
everything and so in general just keep

00:05:41,940 --> 00:05:48,000
your build files simple and avoid too

00:05:44,190 --> 00:05:54,240
much abstraction so yeah just an example

00:05:48,000 --> 00:05:58,710
from aho yeah documentation so so what's

00:05:54,240 --> 00:06:01,469
going by so here we have the simple a

00:05:58,710 --> 00:06:03,090
bill filed so just imagine that the

00:06:01,469 --> 00:06:06,690
library and I know we have some sources

00:06:03,090 --> 00:06:12,360
and some other attributes and so the

00:06:06,690 --> 00:06:14,310
basil will generate an action graph so

00:06:12,360 --> 00:06:20,039
this is the expansion of the city

00:06:14,310 --> 00:06:22,229
library it will one two - comment - its

00:06:20,039 --> 00:06:25,080
culture C++ compiler this will generate

00:06:22,229 --> 00:06:27,169
- that all files and then it will link

00:06:25,080 --> 00:06:32,310
in the libraries that you can use and

00:06:27,169 --> 00:06:33,599
when we evaluate CC by now-ish so city

00:06:32,310 --> 00:06:37,289
by now it will also have some

00:06:33,599 --> 00:06:40,530
contemplation step and linking but you

00:06:37,289 --> 00:06:43,620
noticed zero where between the two

00:06:40,530 --> 00:06:46,740
because City Libraries sends information

00:06:43,620 --> 00:06:49,590
to the city by knowledge it see it tells

00:06:46,740 --> 00:06:51,870
that it will generate to live you killed

00:06:49,590 --> 00:06:55,530
at age and $2.00 there's communication

00:06:51,870 --> 00:07:00,030
between the two so for communication you

00:06:55,530 --> 00:07:02,150
you we use providers so so their words

00:07:00,030 --> 00:07:04,560
define an interface for the user so

00:07:02,150 --> 00:07:06,600
here's the interface is just to save the

00:07:04,560 --> 00:07:08,970
whole as to attribute those hidden

00:07:06,600 --> 00:07:13,320
depths this source is injured the list

00:07:08,970 --> 00:07:16,950
of not by files and the depths some

00:07:13,320 --> 00:07:21,570
targets that will provide a Python info

00:07:16,950 --> 00:07:24,990
provider so this is really the interface

00:07:21,570 --> 00:07:28,580
of the wall well what do you like that

00:07:24,990 --> 00:07:31,020
and then once you have your interface

00:07:28,580 --> 00:07:33,630
your will can provide information to

00:07:31,020 --> 00:07:38,310
other walls just like in the city

00:07:33,630 --> 00:07:41,610
library example so to provide

00:07:38,310 --> 00:07:44,520
information we we use the provider we

00:07:41,610 --> 00:07:46,590
wait to buy some info and so that every

00:07:44,520 --> 00:07:47,960
by some info as one face transit

00:07:46,590 --> 00:07:50,700
associates you could have more

00:07:47,960 --> 00:07:52,560
attributes there and you could also

00:07:50,700 --> 00:07:55,440
document them so instead of the list you

00:07:52,560 --> 00:07:59,250
could have a dictionary and and each

00:07:55,440 --> 00:08:02,910
attribute has some documentation it's a

00:07:59,250 --> 00:08:04,560
50 tweets and implementation function

00:08:02,910 --> 00:08:06,680
you would just wait on the list of

00:08:04,560 --> 00:08:10,530
everything that your function provides

00:08:06,680 --> 00:08:14,850
and once you have your interface and

00:08:10,530 --> 00:08:19,470
your providers you can generate actions

00:08:14,850 --> 00:08:23,400
so here in this example we just when a

00:08:19,470 --> 00:08:26,070
shell command yes just put on what you

00:08:23,400 --> 00:08:28,650
need here but that's well is what whole

00:08:26,070 --> 00:08:35,010
has to do it's communication with other

00:08:28,650 --> 00:08:37,860
holes and generating actions and then we

00:08:35,010 --> 00:08:40,440
can look at the whole performance so the

00:08:37,860 --> 00:08:49,650
idea is that availability conclusions

00:08:40,440 --> 00:08:51,839
should be fast so typically in a you

00:08:49,650 --> 00:08:54,920
know dependency graph you have many many

00:08:51,839 --> 00:08:58,200
targets each target should be

00:08:54,920 --> 00:09:04,310
analyzed very fast and and we analyzed

00:08:58,200 --> 00:09:04,310
if we did I get in parallel and to keep

00:09:04,760 --> 00:09:11,250
the implementation function fast the

00:09:09,120 --> 00:09:12,750
goal is to what sir

00:09:11,250 --> 00:09:14,340
so the function can can look at the list

00:09:12,750 --> 00:09:15,440
of attributes and three what as a list

00:09:14,340 --> 00:09:18,450
of associated or whatever depending

00:09:15,440 --> 00:09:22,110
dependencies because that's two direct

00:09:18,450 --> 00:09:25,770
inputs but it should not look at entire

00:09:22,110 --> 00:09:27,540
weight or transitive inputs like for

00:09:25,770 --> 00:09:29,190
example if we have as I saw some lab

00:09:27,540 --> 00:09:31,590
where we said get out all the

00:09:29,190 --> 00:09:34,860
quantitative dependencies from all its

00:09:31,590 --> 00:09:36,690
dependent is yeah you end up with a huge

00:09:34,860 --> 00:09:38,520
set of dependencies and you don't want

00:09:36,690 --> 00:09:41,040
to iterate over this set of dependencies

00:09:38,520 --> 00:09:44,550
because it would get slow you don't want

00:09:41,040 --> 00:09:46,980
to expand it to a list so the idea is

00:09:44,550 --> 00:09:49,500
that we have a data file called Deb set

00:09:46,980 --> 00:09:53,900
which which is optimized just for

00:09:49,500 --> 00:09:56,910
merging things together it's just a one

00:09:53,900 --> 00:09:58,680
operation to merge all the dependency

00:09:56,910 --> 00:10:01,170
together and you don't have to iterate

00:09:58,680 --> 00:10:04,250
over it so use that set instead of list

00:10:01,170 --> 00:10:09,510
if you want to get your dependencies and

00:10:04,250 --> 00:10:14,970
then you have other tips like we

00:10:09,510 --> 00:10:18,390
recently I did so some some functions

00:10:14,970 --> 00:10:21,330
were to generate the command line so

00:10:18,390 --> 00:10:23,490
because when you you get all your

00:10:21,330 --> 00:10:25,650
dependencies in the Deb set you don't

00:10:23,490 --> 00:10:28,200
want to expand the dataset or you don't

00:10:25,650 --> 00:10:30,720
want to iterate over it internally space

00:10:28,200 --> 00:10:35,640
but you still need to generate your

00:10:30,720 --> 00:10:38,010
command line and so if you use associate

00:10:35,640 --> 00:10:39,810
that actions that ask it's just a lazy

00:10:38,010 --> 00:10:43,200
that in data structure that will get

00:10:39,810 --> 00:10:45,930
expanded in the education phase so sorry

00:10:43,200 --> 00:10:48,540
so you you don't expanded the dead set

00:10:45,930 --> 00:10:50,310
during the analysis just unleash a

00:10:48,540 --> 00:10:51,240
execution if you really need to attach

00:10:50,310 --> 00:10:54,630
choose action

00:10:51,240 --> 00:10:59,850
and yeah if you care about performance

00:10:54,630 --> 00:11:01,740
just use a profiler and so I've put an

00:10:59,850 --> 00:11:07,110
early in here I will check this for few

00:11:01,740 --> 00:11:07,920
examples to to profile because so if you

00:11:07,110 --> 00:11:10,079
wanted to

00:11:07,920 --> 00:11:12,440
come on Lance you will get some

00:11:10,079 --> 00:11:16,560
information about the scalar code and

00:11:12,440 --> 00:11:19,470
which functions that take time so he'll

00:11:16,560 --> 00:11:20,820
just assume away to see if your bill

00:11:19,470 --> 00:11:23,490
takes more time in the loading phase

00:11:20,820 --> 00:11:26,010
analysis phase or execution phase so

00:11:23,490 --> 00:11:29,760
here you see that the loading phase is

00:11:26,010 --> 00:11:32,040
quite fast so it's probably not the part

00:11:29,760 --> 00:11:33,600
you want to optimize but you might want

00:11:32,040 --> 00:11:39,389
to look at the analysis phase and

00:11:33,600 --> 00:11:41,399
obviously execution phase and so if you

00:11:39,389 --> 00:11:44,100
generate if you want this command it

00:11:41,399 --> 00:11:47,940
will generate a huge HTML file which

00:11:44,100 --> 00:11:54,839
contains useful information on top of

00:11:47,940 --> 00:11:58,350
that we recently added comments so here

00:11:54,839 --> 00:12:00,810
we use a startup flight and I could just

00:11:58,350 --> 00:12:05,040
look at the documentation to see how to

00:12:00,810 --> 00:12:08,339
say this but basically you can get

00:12:05,040 --> 00:12:10,860
memory usage of your build so you

00:12:08,339 --> 00:12:13,890
analyze your targets and then you see

00:12:10,860 --> 00:12:17,670
how much memory yeah it way if you think

00:12:13,890 --> 00:12:19,560
of course this number is useful but you

00:12:17,670 --> 00:12:23,459
you want more fine-grained information

00:12:19,560 --> 00:12:27,600
so you can use this government wisdom

00:12:23,459 --> 00:12:32,540
the thresholds and you see a how many

00:12:27,600 --> 00:12:36,269
holes are you in your build

00:12:32,540 --> 00:12:38,820
so finally you can see that 33,000

00:12:36,269 --> 00:12:40,529
generals in this example and you can

00:12:38,820 --> 00:12:43,560
also see the number of actions because

00:12:40,529 --> 00:12:47,610
some the most general connection or many

00:12:43,560 --> 00:12:49,350
actions or sometimes 0 so here you can

00:12:47,610 --> 00:12:56,370
see that photo library is you know I

00:12:49,350 --> 00:13:03,079
think a big number of actions and you

00:12:56,370 --> 00:13:03,079
can also have more penguin information

00:13:03,170 --> 00:13:09,649
so here's the choosing your people tool

00:13:06,209 --> 00:13:16,019
and and then you can see in which lines

00:13:09,649 --> 00:13:17,760
is the digester generated so if some

00:13:16,019 --> 00:13:19,410
something is using a lot of memory you

00:13:17,760 --> 00:13:23,300
can just look at the vigil file and fish

00:13:19,410 --> 00:13:23,300
in which page is called

00:13:24,900 --> 00:13:31,090
so I tell you about the providers and

00:13:28,000 --> 00:13:33,190
everything was wait if you use only the

00:13:31,090 --> 00:13:35,740
scalar force unfortunately for

00:13:33,190 --> 00:13:39,790
historical reasons we have lots of force

00:13:35,740 --> 00:13:43,090
implemented directly in Basel we tell

00:13:39,790 --> 00:13:45,940
them the native words and the native

00:13:43,090 --> 00:13:52,750
words don't always provide a good

00:13:45,940 --> 00:13:56,830
interface so the goal for finite a

00:13:52,750 --> 00:13:58,990
native words is to point to to enable

00:13:56,830 --> 00:14:01,660
this scenario for example you have a

00:13:58,990 --> 00:14:03,400
java language and you want it to depend

00:14:01,660 --> 00:14:06,070
on a scale of library that you're white

00:14:03,400 --> 00:14:09,880
so instead of scaler like we can imagine

00:14:06,070 --> 00:14:11,650
any JVM based language and then your

00:14:09,880 --> 00:14:14,500
skelux lab where we should be able to

00:14:11,650 --> 00:14:16,810
depend on the Java library so to

00:14:14,500 --> 00:14:20,410
implement this skeleton library with you

00:14:16,810 --> 00:14:23,680
need to access to providers from the top

00:14:20,410 --> 00:14:26,310
library and then you need to pass

00:14:23,680 --> 00:14:30,400
information to the bottom line library

00:14:26,310 --> 00:14:34,510
and so this works in Java and there's a

00:14:30,400 --> 00:14:38,080
nice blog post by Annina it will tell

00:14:34,510 --> 00:14:42,310
you and tell you how to interact with

00:14:38,080 --> 00:14:45,490
the Java rules and the goal is later to

00:14:42,310 --> 00:14:47,740
enable the temple with languages so it's

00:14:45,490 --> 00:14:52,930
not perfect everywhere but we are

00:14:47,740 --> 00:14:55,510
working on it on top of that we we have

00:14:52,930 --> 00:14:59,080
aspects so I think they meet we will

00:14:55,510 --> 00:15:02,380
tell more about it or or if you have any

00:14:59,080 --> 00:15:03,730
yeah if you have any interesting

00:15:02,380 --> 00:15:08,470
question just as Dmitrich

00:15:03,730 --> 00:15:11,320
he loves to talk about it but the main

00:15:08,470 --> 00:15:14,350
idea is to be able to augment the

00:15:11,320 --> 00:15:18,190
dependency graph with additional

00:15:14,350 --> 00:15:20,980
information to providers or generate

00:15:18,190 --> 00:15:25,450
more actions so if you have a dependency

00:15:20,980 --> 00:15:28,930
graph like this so you have to take

00:15:25,450 --> 00:15:31,900
attacks with multiple attributes and so

00:15:28,930 --> 00:15:35,529
if you go so if you were to if you work

00:15:31,900 --> 00:15:38,529
the depths you can generate a new one

00:15:35,529 --> 00:15:42,550
by taking a function on every node that

00:15:38,529 --> 00:15:45,639
is in the depths and so this is very

00:15:42,550 --> 00:15:49,449
useful to get some information about the

00:15:45,639 --> 00:15:51,850
graph point for example to to enable ID

00:15:49,449 --> 00:15:53,829
integration you might want to work with

00:15:51,850 --> 00:15:56,829
as a GUI the graph get all the

00:15:53,829 --> 00:16:00,759
information about your build and pass

00:15:56,829 --> 00:16:02,529
pass information to to see IDs or you

00:16:00,759 --> 00:16:07,379
can also do decide to attune to when

00:16:02,529 --> 00:16:11,290
some actions into internment agates and

00:16:07,379 --> 00:16:14,259
that the fusing of what we're doing how

00:16:11,290 --> 00:16:18,699
what we want to do today is a scale in

00:16:14,259 --> 00:16:20,769
which we open two percent leash just a

00:16:18,699 --> 00:16:22,689
collection of useful functions because

00:16:20,769 --> 00:16:24,970
we notice that many people need the same

00:16:22,689 --> 00:16:27,490
functions so we should just put them in

00:16:24,970 --> 00:16:31,209
a library so here you can see some

00:16:27,490 --> 00:16:34,439
functions with best manipulation of

00:16:31,209 --> 00:16:40,720
quitting sham quoting from swine

00:16:34,439 --> 00:16:43,689
capacitor to a shell so so yeah yeah if

00:16:40,720 --> 00:16:46,449
you white complex close you you probably

00:16:43,689 --> 00:16:52,029
want to take a look at SK Lib it's still

00:16:46,449 --> 00:16:54,850
very new so please ask for more

00:16:52,029 --> 00:17:01,089
functions oh yes just a sudden request

00:16:54,850 --> 00:17:03,069
it's still quite small as you notice

00:17:01,089 --> 00:17:04,990
we're doing a lot of changes in Basel

00:17:03,069 --> 00:17:08,020
and I know that some people complain

00:17:04,990 --> 00:17:12,909
about it yesterday so when we added a

00:17:08,020 --> 00:17:14,770
flag def - all incompatible changes so

00:17:12,909 --> 00:17:17,470
the idea is that when we do some

00:17:14,770 --> 00:17:19,689
backward incompatible change we first

00:17:17,470 --> 00:17:24,520
put it behind the flag so that it's not

00:17:19,689 --> 00:17:28,750
enabled but it allows you to try it so

00:17:24,520 --> 00:17:31,780
if you build your code with this fly it

00:17:28,750 --> 00:17:34,929
will fight with you with a new width of

00:17:31,780 --> 00:17:36,909
children future changes and it will

00:17:34,929 --> 00:17:40,110
allow you to make your cut compatible

00:17:36,909 --> 00:17:42,909
with in with a future beta version and

00:17:40,110 --> 00:17:44,500
then in the in the future we wish when

00:17:42,909 --> 00:17:46,419
we swap to defer to the default of the

00:17:44,500 --> 00:17:48,190
Flies so if you did that update the

00:17:46,419 --> 00:17:48,860
ninja code and you get a new basel

00:17:48,190 --> 00:17:51,740
version you can

00:17:48,860 --> 00:17:54,700
still yet I'll give you for some time

00:17:51,740 --> 00:17:59,929
until you let me definitely remove it

00:17:54,700 --> 00:18:01,820
and so yeah the goal for us to is to to

00:17:59,929 --> 00:18:04,640
put all backward incompatible changes

00:18:01,820 --> 00:18:06,530
behind this dislike in fact if we don't

00:18:04,640 --> 00:18:12,200
always do but with why so just tell us

00:18:06,530 --> 00:18:14,690
if we if we don't do it correctly we

00:18:12,200 --> 00:18:16,100
also want to provide more guidelines we

00:18:14,690 --> 00:18:18,950
know that fighting words can be a bit

00:18:16,100 --> 00:18:20,000
complicated or confusing and so we we

00:18:18,950 --> 00:18:23,120
want her to give you more information

00:18:20,000 --> 00:18:26,059
about it so we have two style guides in

00:18:23,120 --> 00:18:30,320
the documentation this is something that

00:18:26,059 --> 00:18:32,179
we want to improve and and extend so if

00:18:30,320 --> 00:18:35,030
you have any questions about the style

00:18:32,179 --> 00:18:38,630
just ask us probably on Stack Overflow

00:18:35,030 --> 00:18:41,150
or now on the mailing list and this

00:18:38,630 --> 00:18:44,870
feedback is very useful for us to to

00:18:41,150 --> 00:18:46,400
improve the documentation there was a

00:18:44,870 --> 00:18:49,750
presentation yesterday about the linter

00:18:46,400 --> 00:18:53,210
so this is something we recently

00:18:49,750 --> 00:18:58,070
published and and the goal is to add

00:18:53,210 --> 00:18:59,480
more more checks into linter and for

00:18:58,070 --> 00:19:03,290
testing we also want to produce more

00:18:59,480 --> 00:19:06,080
guidelines we know that testing the

00:19:03,290 --> 00:19:08,870
scanner horse is not always easy or as

00:19:06,080 --> 00:19:10,669
good as you would like but so we're

00:19:08,870 --> 00:19:16,400
going to work on it and produce more

00:19:10,669 --> 00:19:19,340
guidelines lots of horse so if you check

00:19:16,400 --> 00:19:21,950
and get up with just this research

00:19:19,340 --> 00:19:24,980
request you will find like a hundred and

00:19:21,950 --> 00:19:27,679
twenty scale apples and if yes and

00:19:24,980 --> 00:19:29,960
people fight a new scale at force all

00:19:27,679 --> 00:19:33,590
the time so if you know increasing

00:19:29,960 --> 00:19:40,010
quickly and so ideally we would provide

00:19:33,590 --> 00:19:45,169
a way to well to highlight which better

00:19:40,010 --> 00:19:48,429
words well written or assess it's not

00:19:45,169 --> 00:19:52,280
completely clear but we would like to

00:19:48,429 --> 00:19:56,020
yes just to to to show which rules

00:19:52,280 --> 00:20:00,400
we are reliable updating maintain and

00:19:56,020 --> 00:20:00,400
comply with with the guidelines

00:20:01,549 --> 00:20:08,999
some so when you modify to the scalar

00:20:06,209 --> 00:20:12,839
code many people use a person mode in

00:20:08,999 --> 00:20:14,909
the editor but ideally we would have

00:20:12,839 --> 00:20:19,259
better support for modifying a scalar

00:20:14,909 --> 00:20:21,419
file and so one solution to do that is

00:20:19,259 --> 00:20:24,749
to who implement the language the

00:20:21,419 --> 00:20:28,849
protocol from Microsoft it's something

00:20:24,749 --> 00:20:34,070
that many ideas implement so if you

00:20:28,849 --> 00:20:37,559
implement support for scalar it will

00:20:34,070 --> 00:20:39,989
it will be useful for many ideas well

00:20:37,559 --> 00:20:43,289
for Apple a visual studio code and stuff

00:20:39,989 --> 00:20:46,099
like that and so with the language cell

00:20:43,289 --> 00:20:50,070
phone protocol we can have many ID

00:20:46,099 --> 00:20:52,289
features like good compression or go to

00:20:50,070 --> 00:20:53,879
definition and all these kind of things

00:20:52,289 --> 00:20:56,579
and the tooltips and see the

00:20:53,879 --> 00:20:59,279
documentation and so on so this is some

00:20:56,579 --> 00:21:01,019
things that we would like to do but

00:20:59,279 --> 00:21:07,079
we're not working on it yet so if anyone

00:21:01,019 --> 00:21:09,149
is interested just let me know for I

00:21:07,079 --> 00:21:12,749
think a question we also want to have a

00:21:09,149 --> 00:21:15,659
debugger to get way to debug this case

00:21:12,749 --> 00:21:18,989
collect on so slowly someone made this

00:21:15,659 --> 00:21:20,639
prototype and I think it looks it

00:21:18,989 --> 00:21:23,999
totally looks really great

00:21:20,639 --> 00:21:26,759
so if you so you have the skeleton under

00:21:23,999 --> 00:21:31,229
white and you can put white boy on your

00:21:26,759 --> 00:21:33,539
God and you know Anthony as you can see

00:21:31,229 --> 00:21:35,539
there's a list of all the local

00:21:33,539 --> 00:21:37,649
variables or all the definitions and

00:21:35,539 --> 00:21:39,539
unexplained everything so here you have

00:21:37,649 --> 00:21:43,229
a depth set and you can see every

00:21:39,539 --> 00:21:45,059
element in the depth set so this is

00:21:43,229 --> 00:21:48,419
something that I did not published yet

00:21:45,059 --> 00:21:54,059
it's a work in progress it should be

00:21:48,419 --> 00:21:57,869
available soon and so this is intuition

00:21:54,059 --> 00:22:04,979
in vs code ideally we would use the same

00:21:57,869 --> 00:22:07,979
protocol to do expert in other ideas and

00:22:04,979 --> 00:22:09,839
yeah more potential tools that we would

00:22:07,979 --> 00:22:13,169
like to have before an apple bill file

00:22:09,839 --> 00:22:13,430
generation so there were to talk about

00:22:13,169 --> 00:22:15,740
case

00:22:13,430 --> 00:22:17,420
yesterday so ideally we would have this

00:22:15,740 --> 00:22:20,450
kind of tool for every language on

00:22:17,420 --> 00:22:21,710
everything you want just tools that that

00:22:20,450 --> 00:22:23,150
would update and maintain your build

00:22:21,710 --> 00:22:29,240
files so that you never have to look at

00:22:23,150 --> 00:22:31,850
them again and what it is it's a bit

00:22:29,240 --> 00:22:33,290
quality but it would be nice also to

00:22:31,850 --> 00:22:35,690
have a stroke dependency for all

00:22:33,290 --> 00:22:40,010
languages so someone I mentioned

00:22:35,690 --> 00:22:41,780
yesterday that users will always at the

00:22:40,010 --> 00:22:43,250
dependencies when they when they need

00:22:41,780 --> 00:22:45,350
them because otherwise it doesn't build

00:22:43,250 --> 00:22:48,050
but they always forget to remove them

00:22:45,350 --> 00:22:50,540
because well is still built so today

00:22:48,050 --> 00:22:51,980
they don't if it can be difficult to

00:22:50,540 --> 00:22:53,750
know which dependencies are not truth

00:22:51,980 --> 00:22:57,050
when you just look at at the build file

00:22:53,750 --> 00:22:59,870
so ideally that's that it's a job for

00:22:57,050 --> 00:23:02,630
tools to detect what you know what is

00:22:59,870 --> 00:23:04,610
needed and what is not and if you remove

00:23:02,630 --> 00:23:10,430
all these only the dependencies if you

00:23:04,610 --> 00:23:12,350
can speed up your build a lot when I

00:23:10,430 --> 00:23:15,350
mentioned this to this bill defy your

00:23:12,350 --> 00:23:17,900
that formats is a bin files ideally we

00:23:15,350 --> 00:23:20,600
would have the same for visual files you

00:23:17,900 --> 00:23:22,760
just type in your code you you want a

00:23:20,600 --> 00:23:24,200
tool it will format it nicely and you

00:23:22,760 --> 00:23:27,050
don't have to care about indentation or

00:23:24,200 --> 00:23:29,270
spaces or these kind of things and once

00:23:27,050 --> 00:23:31,580
you have this code formatter you can

00:23:29,270 --> 00:23:33,860
build a lot of what I cling to its on

00:23:31,580 --> 00:23:35,780
top of it just like I mentioned build it

00:23:33,860 --> 00:23:38,030
I yesterday for build files you could

00:23:35,780 --> 00:23:40,700
imagine without doing tools for bgl

00:23:38,030 --> 00:23:46,190
files so if you rename a Fermi function

00:23:40,700 --> 00:23:47,630
or the kind of things yesterday someone

00:23:46,190 --> 00:23:49,190
told me that they would like to have

00:23:47,630 --> 00:23:51,710
some kind of type checking for scalar

00:23:49,190 --> 00:23:55,120
code I think that's something that could

00:23:51,710 --> 00:23:58,580
be financially integrated in the linter

00:23:55,120 --> 00:24:02,330
so we're not going to have static typing

00:23:58,580 --> 00:24:04,130
but in some cases you just can analyze

00:24:02,330 --> 00:24:06,410
the code and when you have type

00:24:04,130 --> 00:24:10,490
information you can put I get it and see

00:24:06,410 --> 00:24:13,160
if there's a type error so it will never

00:24:10,490 --> 00:24:18,260
catch everything but maybe it can be

00:24:13,160 --> 00:24:21,350
good enough to be useful for users and

00:24:18,260 --> 00:24:27,470
so yes I think there's a goal is to

00:24:21,350 --> 00:24:31,250
build an ecosystem on basil so for this

00:24:27,470 --> 00:24:33,259
really two girls first is to enable you

00:24:31,250 --> 00:24:36,409
quite high quality of words for every

00:24:33,259 --> 00:24:40,220
language you care about and the second

00:24:36,409 --> 00:24:43,580
part is high quality tools so we want

00:24:40,220 --> 00:24:45,980
tools to manipulate to build files we

00:24:43,580 --> 00:24:47,929
want tools to analyze there's a big

00:24:45,980 --> 00:24:50,269
laugh by that but you can use basic

00:24:47,929 --> 00:24:55,279
query to have some information about the

00:24:50,269 --> 00:24:57,470
graph or you can use aspects to get also

00:24:55,279 --> 00:25:00,529
some information about the graph and you

00:24:57,470 --> 00:25:02,299
can since here we provide you a lot of

00:25:00,529 --> 00:25:05,120
information you can easily build tools

00:25:02,299 --> 00:25:07,090
on top of that that will analyze the

00:25:05,120 --> 00:25:09,320
graph and maybe suggest some

00:25:07,090 --> 00:25:13,220
transformation in the build files like

00:25:09,320 --> 00:25:15,019
this I get to discrete because it

00:25:13,220 --> 00:25:17,539
depends on a lot of things and it will

00:25:15,019 --> 00:25:19,340
make us a bit faster Oh lots of things

00:25:17,539 --> 00:25:21,769
we can do what you have access to the

00:25:19,340 --> 00:25:23,750
pill graph we also want to enter those

00:25:21,769 --> 00:25:26,570
conventions and I think that's something

00:25:23,750 --> 00:25:30,590
you're doing important when you have a

00:25:26,570 --> 00:25:32,480
large code base if you have conventions

00:25:30,590 --> 00:25:35,809
for every languages it makes everything

00:25:32,480 --> 00:25:39,379
much simpler so so yeah the goal is to

00:25:35,809 --> 00:25:42,289
make your current a scale so yeah that's

00:25:39,379 --> 00:25:45,230
really the two important thing for this

00:25:42,289 --> 00:25:49,299
case collecting enable you fight good

00:25:45,230 --> 00:25:52,450
holes and enables you avoid good tools

00:25:49,299 --> 00:25:52,450

YouTube URL: https://www.youtube.com/watch?v=xLgIKcbF6SA


