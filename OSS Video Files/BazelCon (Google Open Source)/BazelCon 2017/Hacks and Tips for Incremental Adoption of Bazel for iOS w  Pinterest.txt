Title: Hacks and Tips for Incremental Adoption of Bazel for iOS w  Pinterest
Publication date: 2017-12-08
Playlist: BazelCon 2017
Description: 
	by Rahul Malik, Brandon Kase, and Jerry Marino (Pinterest)
Captions: 
	00:00:00,000 --> 00:00:05,940
hi I'm Rahul Malik I'm an iOS engineer

00:00:02,700 --> 00:00:08,940
on the core experience team and what our

00:00:05,940 --> 00:00:10,860
team focuses on is building tools and

00:00:08,940 --> 00:00:13,620
infrastructure and frameworks to make

00:00:10,860 --> 00:00:19,760
the rest of Pinterest go faster now the

00:00:13,620 --> 00:00:24,269
iOS team at Pinterest is right on good

00:00:19,760 --> 00:00:27,000
cool I asked unit Pinterest is a little

00:00:24,269 --> 00:00:28,650
bit over 50 engineers right now over

00:00:27,000 --> 00:00:30,720
time we've added about 700 thousand

00:00:28,650 --> 00:00:32,730
lines of code into the codebase and

00:00:30,720 --> 00:00:35,850
during business hours commit lands

00:00:32,730 --> 00:00:37,710
around every 7 minutes so a core big

00:00:35,850 --> 00:00:39,780
challenge we have is how can we enable

00:00:37,710 --> 00:00:41,399
our team to move fast with quality and

00:00:39,780 --> 00:00:43,649
there's a lot of ways you can accomplish

00:00:41,399 --> 00:00:45,300
this but the most fundamental way of

00:00:43,649 --> 00:00:47,550
which that we've approached it is the

00:00:45,300 --> 00:00:49,680
bill so today we're here to talk to you

00:00:47,550 --> 00:00:51,660
about the hacks and tips and more or

00:00:49,680 --> 00:00:54,510
less our year-long exploration in 45

00:00:51,660 --> 00:00:58,260
minutes of putting of putting the iOS

00:00:54,510 --> 00:01:00,750
app on basil so our iOS app has a lot of

00:00:58,260 --> 00:01:01,829
similarities as other apps we have we

00:01:00,750 --> 00:01:04,199
have our application which has a

00:01:01,829 --> 00:01:05,850
production in beta version we have a

00:01:04,199 --> 00:01:07,920
series of extensions we have a share

00:01:05,850 --> 00:01:10,380
extension a Syria extension and some

00:01:07,920 --> 00:01:11,040
extensions for notifications we use

00:01:10,380 --> 00:01:13,650
cocoapods

00:01:11,040 --> 00:01:15,840
like a lot of other people so and in

00:01:13,650 --> 00:01:17,159
fact we have about 50 plus third-party

00:01:15,840 --> 00:01:19,650
dependencies

00:01:17,159 --> 00:01:21,930
unlike other apps though we also have

00:01:19,650 --> 00:01:23,520
our own custom clang tool chain which we

00:01:21,930 --> 00:01:25,020
use to support things like custom static

00:01:23,520 --> 00:01:27,960
analysis to enforce our own best

00:01:25,020 --> 00:01:29,939
practices and we also have cogeneration

00:01:27,960 --> 00:01:32,159
through thrift and also through our own

00:01:29,939 --> 00:01:36,240
in-house in-house generation tools like

00:01:32,159 --> 00:01:37,439
Planck but as the organization has grown

00:01:36,240 --> 00:01:41,009
we've certainly had our scaling

00:01:37,439 --> 00:01:43,320
challenges and and I sure everyone can

00:01:41,009 --> 00:01:45,119
understand this one I add more

00:01:43,320 --> 00:01:48,390
developers more code keeps going in

00:01:45,119 --> 00:01:50,310
build times start to increase the CI is

00:01:48,390 --> 00:01:52,710
also struggling to keep up with it and

00:01:50,310 --> 00:01:57,090
the needs of our CI have also grown over

00:01:52,710 --> 00:01:59,700
time and last not least we have a lot of

00:01:57,090 --> 00:02:02,250
like it works on my machine issues where

00:01:59,700 --> 00:02:04,409
like I'm sure everyone here understands

00:02:02,250 --> 00:02:06,930
I want so basically where you're like oh

00:02:04,409 --> 00:02:08,849
CI failed but it's passing locally let

00:02:06,930 --> 00:02:11,430
me just dig into that one log on the CI

00:02:08,849 --> 00:02:13,620
build machine and figure out what

00:02:11,430 --> 00:02:14,610
happened and at the same time

00:02:13,620 --> 00:02:16,680
we're also trying to hear how to scale

00:02:14,610 --> 00:02:17,909
our architecture and we had this

00:02:16,680 --> 00:02:20,400
initiative we started beginning the year

00:02:17,909 --> 00:02:22,739
called pin core and what pin core is

00:02:20,400 --> 00:02:25,049
it's the transition for us into a

00:02:22,739 --> 00:02:27,569
modular architecture it's us actually

00:02:25,049 --> 00:02:28,980
taking one single monolithic app and

00:02:27,569 --> 00:02:30,540
breaking it up into a series of

00:02:28,980 --> 00:02:32,879
frameworks that represent things like

00:02:30,540 --> 00:02:36,060
logging or networking or just coming

00:02:32,879 --> 00:02:37,290
core functionality and so what this does

00:02:36,060 --> 00:02:38,819
is it allows us to create a set of

00:02:37,290 --> 00:02:40,980
well-defined documented and tested

00:02:38,819 --> 00:02:43,049
modules in our app and for other apps we

00:02:40,980 --> 00:02:45,030
might create and it also allows us to

00:02:43,049 --> 00:02:47,040
encourage reusability so it allows us to

00:02:45,030 --> 00:02:48,750
actually dictate clean interfaces and

00:02:47,040 --> 00:02:50,430
and actually have like good

00:02:48,750 --> 00:02:52,950
conversations around does something

00:02:50,430 --> 00:02:54,269
belong in a certain module or not now

00:02:52,950 --> 00:02:55,620
given that we were having these scaling

00:02:54,269 --> 00:02:57,030
challenges and we were trying to take

00:02:55,620 --> 00:02:59,129
our architecture to this modular

00:02:57,030 --> 00:03:00,299
architecture world we had a set of goals

00:02:59,129 --> 00:03:03,120
that we came up with for our build

00:03:00,299 --> 00:03:06,840
system first this is why we roll here

00:03:03,120 --> 00:03:08,909
fast and reproducible builds I second we

00:03:06,840 --> 00:03:10,709
wanted to take out the it works on my

00:03:08,909 --> 00:03:12,120
machine problems so we really wanted to

00:03:10,709 --> 00:03:14,700
focus on sandbox in our developer

00:03:12,120 --> 00:03:16,829
environment and the needs of our

00:03:14,700 --> 00:03:18,660
application are changing every day we

00:03:16,829 --> 00:03:20,700
use code generation with drift right now

00:03:18,660 --> 00:03:24,109
maybe we're using G RPC and a couple

00:03:20,700 --> 00:03:26,160
years as a plug for you guys and I and

00:03:24,109 --> 00:03:27,359
you know it's like it's like you don't

00:03:26,160 --> 00:03:30,299
know what's coming next and we need a

00:03:27,359 --> 00:03:31,530
system that can adapt with us we ideally

00:03:30,299 --> 00:03:32,609
want to save our developers time we

00:03:31,530 --> 00:03:35,459
don't want to rebuild things that you

00:03:32,609 --> 00:03:36,959
that you already have built and we and

00:03:35,459 --> 00:03:38,549
this is kind of one of more important

00:03:36,959 --> 00:03:40,109
parts is we need something we can

00:03:38,549 --> 00:03:41,340
actually kind of dip our toes and we

00:03:40,109 --> 00:03:43,919
need something that we can incrementally

00:03:41,340 --> 00:03:45,510
adopt because it's a large investment

00:03:43,919 --> 00:03:47,790
especially for a team like ours to say

00:03:45,510 --> 00:03:50,080
that we're gonna spend the entire year

00:03:47,790 --> 00:03:52,780
even though that's what we

00:03:50,080 --> 00:03:54,760
and take the entire year and change the

00:03:52,780 --> 00:03:56,230
entire build system before we start to

00:03:54,760 --> 00:03:58,870
understand the benefits before I start

00:03:56,230 --> 00:04:01,450
to understand how this all works but how

00:03:58,870 --> 00:04:02,980
do we actually build modular components

00:04:01,450 --> 00:04:05,080
in our build system and how do we

00:04:02,980 --> 00:04:08,290
actually improve the reproducibility of

00:04:05,080 --> 00:04:09,640
that system when we first started to set

00:04:08,290 --> 00:04:11,230
out when we first tried to build

00:04:09,640 --> 00:04:12,850
different frameworks one thing we

00:04:11,230 --> 00:04:15,450
started to do was look at our existing

00:04:12,850 --> 00:04:18,340
tools and if you're familiar with iOS

00:04:15,450 --> 00:04:20,140
Xcode is like the de-facto build system

00:04:18,340 --> 00:04:22,450
editor and configuration management

00:04:20,140 --> 00:04:25,000
system so we started by seeing what

00:04:22,450 --> 00:04:26,770
would it take to do this but we already

00:04:25,000 --> 00:04:29,590
had some issues with Xcode first office

00:04:26,770 --> 00:04:31,840
reproducibility on our CI machines we

00:04:29,590 --> 00:04:33,970
had to clean before every job because

00:04:31,840 --> 00:04:37,030
like we couldn't actually use the build

00:04:33,970 --> 00:04:39,430
artifacts from before if you've tried to

00:04:37,030 --> 00:04:41,350
maintain more than one target and Xcode

00:04:39,430 --> 00:04:43,120
you've had to you've had to change like

00:04:41,350 --> 00:04:44,770
configurations and manually propagate

00:04:43,120 --> 00:04:47,170
them and try to figure out if everything

00:04:44,770 --> 00:04:50,440
is reflected correctly and you can't

00:04:47,170 --> 00:04:52,000
script that at all and then it's also

00:04:50,440 --> 00:04:53,890
lacking extensibility you can't have

00:04:52,000 --> 00:04:55,660
like code generation tasks that yield

00:04:53,890 --> 00:04:58,000
new files you can't it's hard to

00:04:55,660 --> 00:05:00,970
integrate other tool chains into your

00:04:58,000 --> 00:05:03,310
build system then the next thing we said

00:05:00,970 --> 00:05:04,870
is so our third parties are management

00:05:03,310 --> 00:05:06,360
cocoa pods so let's see if we can start

00:05:04,870 --> 00:05:08,830
to make our favorites of cocoa pods

00:05:06,360 --> 00:05:10,210
which has better configuration

00:05:08,830 --> 00:05:12,910
management you can scripts all the

00:05:10,210 --> 00:05:14,350
configuration changes with Ruby but it

00:05:12,910 --> 00:05:15,610
generates an Xcode project we've had the

00:05:14,350 --> 00:05:17,340
same reproducibility issues so we

00:05:15,610 --> 00:05:19,750
wouldn't get any other wins on CI and

00:05:17,340 --> 00:05:22,990
furthermore we encountered modularity

00:05:19,750 --> 00:05:24,700
issues really quickly because we set we

00:05:22,990 --> 00:05:26,860
set a goal early on that we wanted to

00:05:24,700 --> 00:05:28,450
maintain sort of like a mono repo for

00:05:26,860 --> 00:05:30,430
our iOS code so even as we broke apart

00:05:28,450 --> 00:05:31,900
different modules that they still

00:05:30,430 --> 00:05:33,430
existed within the same repo so we

00:05:31,900 --> 00:05:35,020
weren't doing things like committing to

00:05:33,430 --> 00:05:37,060
one repo and then bumping a version and

00:05:35,020 --> 00:05:40,150
another one and trying to trying to

00:05:37,060 --> 00:05:41,980
manage sort of dependency health so but

00:05:40,150 --> 00:05:43,690
when we tried to make local dependencies

00:05:41,980 --> 00:05:47,380
depend on each other in cocoa pods we

00:05:43,690 --> 00:05:48,490
quickly hit a wall then we went to the

00:05:47,380 --> 00:05:52,660
one our friends down the street Airbnb

00:05:48,490 --> 00:05:54,550
we're using buck-buck you know sure many

00:05:52,660 --> 00:05:56,530
you're familiar with it has the promise

00:05:54,550 --> 00:06:00,280
of sandbox and reproducible builds and I

00:05:56,530 --> 00:06:02,200
believe it delivers on that and but for

00:06:00,280 --> 00:06:03,400
us there was really not a great path to

00:06:02,200 --> 00:06:04,960
incremental adoption

00:06:03,400 --> 00:06:07,240
we were trying to build a subset of our

00:06:04,960 --> 00:06:09,550
application using book but building

00:06:07,240 --> 00:06:11,110
multiple architectures involved actually

00:06:09,550 --> 00:06:14,560
like hacking within bug producing our

00:06:11,110 --> 00:06:16,120
own custom fork and we decided at the

00:06:14,560 --> 00:06:19,030
same time that we came across basil and

00:06:16,120 --> 00:06:21,729
we don't want to do that and it is

00:06:19,030 --> 00:06:23,949
extensible which is great but there

00:06:21,729 --> 00:06:25,240
isn't an equivalent like skylark so that

00:06:23,949 --> 00:06:26,800
you get things like macros but if we

00:06:25,240 --> 00:06:27,910
want to have custom rules and in our

00:06:26,800 --> 00:06:30,759
tool chain

00:06:27,910 --> 00:06:34,330
it wasn't exactly as easy so this got us

00:06:30,759 --> 00:06:35,620
to basil and basil was really appealing

00:06:34,330 --> 00:06:37,630
us because it had this incremental

00:06:35,620 --> 00:06:39,430
adoption story we were able to use like

00:06:37,630 --> 00:06:41,110
existing rules like Apple static library

00:06:39,430 --> 00:06:42,940
to build these fad architecture binaries

00:06:41,110 --> 00:06:44,080
that we could use to release our app and

00:06:42,940 --> 00:06:46,479
we could and we actually started to do

00:06:44,080 --> 00:06:48,520
that really early on in the year it

00:06:46,479 --> 00:06:50,530
allows us to define all of our

00:06:48,520 --> 00:06:53,860
dependencies their versions and exactly

00:06:50,530 --> 00:06:55,330
what what commit they're at in our build

00:06:53,860 --> 00:06:56,680
system so that it's so that we have

00:06:55,330 --> 00:06:58,840
completely reproducible environments

00:06:56,680 --> 00:07:00,370
between CI and local builds and and also

00:06:58,840 --> 00:07:03,699
between developers machines which can

00:07:00,370 --> 00:07:05,320
vary and it's extensible for the future

00:07:03,699 --> 00:07:07,599
we take advantage of things like custom

00:07:05,320 --> 00:07:09,699
tool chance with clang we do our own

00:07:07,599 --> 00:07:10,840
cogeneration so being able to actually

00:07:09,699 --> 00:07:13,180
have those as part of the build is

00:07:10,840 --> 00:07:15,340
really powerful for us and we're excited

00:07:13,180 --> 00:07:17,110
about the future of basil we're excited

00:07:15,340 --> 00:07:19,539
about remote execution we're excited

00:07:17,110 --> 00:07:21,280
about caching you can't cache an iOS app

00:07:19,539 --> 00:07:23,860
completely yet but we're working on it

00:07:21,280 --> 00:07:25,599
and and to tell you a little bit more

00:07:23,860 --> 00:07:27,340
about how we started with this I want to

00:07:25,599 --> 00:07:36,300
bring Brandon case up here to talk about

00:07:27,340 --> 00:07:39,690
incremental adoption the basil hello

00:07:36,300 --> 00:07:43,030
humans hear me all right cool so

00:07:39,690 --> 00:07:47,080
incremental adoption yeah so as we're

00:07:43,030 --> 00:07:49,180
who was saying we we wanted to sort of

00:07:47,080 --> 00:07:52,690
move slowly into basil and and we had

00:07:49,180 --> 00:07:54,220
this nice set of of libraries that we

00:07:52,690 --> 00:07:57,340
were making with pin core so we're like

00:07:54,220 --> 00:08:00,190
alright let's let's build pink or into

00:07:57,340 --> 00:08:02,080
one big static library and then we can

00:08:00,190 --> 00:08:04,530
take that and sort of stuff it inside

00:08:02,080 --> 00:08:08,289
Xcode and just let Xcode do its thing

00:08:04,530 --> 00:08:09,729
off of there right so so that's pretty

00:08:08,289 --> 00:08:11,800
easy right we we all know how to do that

00:08:09,729 --> 00:08:13,810
we just do basil builds and we point it

00:08:11,800 --> 00:08:15,219
to a target that can build a static

00:08:13,810 --> 00:08:16,680
library like a fat Sonic library and

00:08:15,219 --> 00:08:19,560
then

00:08:16,680 --> 00:08:21,630
we're done right and you know we even

00:08:19,560 --> 00:08:24,240
get like the IDE experience from Xcode

00:08:21,630 --> 00:08:25,620
sort of for free because of tulsi which

00:08:24,240 --> 00:08:28,650
is a project another project by Google

00:08:25,620 --> 00:08:30,600
where tulsi can take your build

00:08:28,650 --> 00:08:33,510
configuration and basil and produce an

00:08:30,600 --> 00:08:35,010
Xcode project so so that's nice so

00:08:33,510 --> 00:08:37,260
really the only thing we need to do is

00:08:35,010 --> 00:08:43,380
sort of right it turns out not but like

00:08:37,260 --> 00:08:45,779
I'm trying to do a story here is teach

00:08:43,380 --> 00:08:49,680
Xcode about the the artifact the static

00:08:45,779 --> 00:08:52,080
library and and this I'm gonna say this

00:08:49,680 --> 00:08:53,760
is before the - - experimental - OH -

00:08:52,080 --> 00:08:55,320
artifacts flag for those that know about

00:08:53,760 --> 00:08:58,860
that or at least before we discovered it

00:08:55,320 --> 00:09:00,660
so check this out so this is snippet

00:08:58,860 --> 00:09:03,930
from a shell script look at that second

00:09:00,660 --> 00:09:06,149
line there so all right we need to get

00:09:03,930 --> 00:09:08,310
the static library okay so when you do a

00:09:06,149 --> 00:09:10,170
build with basil there's a basil - out

00:09:08,310 --> 00:09:11,430
folder at the top of your workspace and

00:09:10,170 --> 00:09:13,200
then under that is a bunch of sub

00:09:11,430 --> 00:09:14,339
directories and they're kind of there's

00:09:13,200 --> 00:09:17,790
like a lot of them and you know the

00:09:14,339 --> 00:09:19,769
names are weird so let's just revert

00:09:17,790 --> 00:09:21,690
sorted by reverse timestamp and take the

00:09:19,769 --> 00:09:23,490
first one and that almost worked sort of

00:09:21,690 --> 00:09:24,540
but like we have some other greps you

00:09:23,490 --> 00:09:27,449
know because like it wasn't good enough

00:09:24,540 --> 00:09:30,899
uh so obviously this is like really

00:09:27,449 --> 00:09:32,370
terrible but it works it yeah so and

00:09:30,899 --> 00:09:34,079
then at this point like it should work

00:09:32,370 --> 00:09:35,970
right all we had to do is find the

00:09:34,079 --> 00:09:37,589
static library sure we have like one

00:09:35,970 --> 00:09:39,930
hacky thing but then you know it's all

00:09:37,589 --> 00:09:41,519
gonna work so it doesn't matter but then

00:09:39,930 --> 00:09:43,560
you know we forgot about headers right

00:09:41,519 --> 00:09:45,660
or we were thinking about them the whole

00:09:43,560 --> 00:09:48,240
time but in this story we forgot about

00:09:45,660 --> 00:09:49,649
them so right so it doesn't compile

00:09:48,240 --> 00:09:50,910
because we didn't do anything about the

00:09:49,649 --> 00:09:53,790
headers there's all these headers in our

00:09:50,910 --> 00:09:56,490
in our libraries right and unfortunately

00:09:53,790 --> 00:09:58,820
on iOS there's this convention this very

00:09:56,490 --> 00:10:02,010
unfortunate convention where all

00:09:58,820 --> 00:10:05,070
external and internal dependencies on

00:10:02,010 --> 00:10:07,709
libraries are imported with the you know

00:10:05,070 --> 00:10:09,329
angle bracket style system includes

00:10:07,709 --> 00:10:12,000
where it's it's the name of your

00:10:09,329 --> 00:10:14,760
framework or library or whatever slash

00:10:12,000 --> 00:10:17,160
your header okay and even if the header

00:10:14,760 --> 00:10:19,139
is nested deeply in sub directories it

00:10:17,160 --> 00:10:20,279
needs to be accessible like that and it

00:10:19,139 --> 00:10:22,319
needs to be accessible like that because

00:10:20,279 --> 00:10:23,220
all of our developers rely on that

00:10:22,319 --> 00:10:26,010
depend on that are familiar with that

00:10:23,220 --> 00:10:28,019
and all developers of third-party

00:10:26,010 --> 00:10:29,550
dependencies do that and we as we roll

00:10:28,019 --> 00:10:32,430
the saying we had like 50 with more than

00:10:29,550 --> 00:10:34,709
50 of those so so so this was super

00:10:32,430 --> 00:10:35,940
important and there's like a lot of

00:10:34,709 --> 00:10:38,819
different ways that you can you can

00:10:35,940 --> 00:10:40,529
handle this you know and I think Jerry's

00:10:38,819 --> 00:10:42,839
gonna talk about some of the better ways

00:10:40,529 --> 00:10:44,430
to do it but at first you know the sort

00:10:42,839 --> 00:10:46,050
of easiest way right or the most trivial

00:10:44,430 --> 00:10:47,970
way is to just put the headers in the

00:10:46,050 --> 00:10:50,269
right spot alright so we have some more

00:10:47,970 --> 00:10:53,779
nasty disgusting shell screwed of stuff

00:10:50,269 --> 00:10:56,069
where the header depth variable is like

00:10:53,779 --> 00:10:58,230
computed from basil queries so like that

00:10:56,069 --> 00:11:01,949
part's great and then we like Ock and

00:10:58,230 --> 00:11:03,839
stuff and we make a directory under this

00:11:01,949 --> 00:11:05,069
platform include and and then we can

00:11:03,839 --> 00:11:06,510
just sort of like go over all the

00:11:05,069 --> 00:11:07,709
headers and move them into the right

00:11:06,510 --> 00:11:09,600
place but we actually want to swim like

00:11:07,709 --> 00:11:11,880
them not move them because we want to be

00:11:09,600 --> 00:11:13,470
able to edit you know at anywhere and

00:11:11,880 --> 00:11:15,839
they actually edits propagate whatever

00:11:13,470 --> 00:11:20,170
it's like all shell all disgusting all

00:11:15,839 --> 00:11:24,490
bad but it builds right so

00:11:20,170 --> 00:11:26,500
so whatever and then and then and then

00:11:24,490 --> 00:11:29,710
we're like okay so we're done but we're

00:11:26,500 --> 00:11:32,890
not done because this happened in Xcode

00:11:29,710 --> 00:11:35,350
so so what you're seeing is a snippet of

00:11:32,890 --> 00:11:36,910
the the sidebar in Xcode and this the

00:11:35,350 --> 00:11:38,080
when when the files are read it means

00:11:36,910 --> 00:11:41,530
that they're missing on the file system

00:11:38,080 --> 00:11:43,750
okay so so what's going on here so so

00:11:41,530 --> 00:11:45,070
tulsi remember takes our basil build

00:11:43,750 --> 00:11:46,540
configuration and generates an extra

00:11:45,070 --> 00:11:49,600
project for us so we didn't have to do

00:11:46,540 --> 00:11:51,130
anything right but for all the generated

00:11:49,600 --> 00:11:52,690
code in our build like Rahul was saying

00:11:51,130 --> 00:11:54,820
we depend on some generated code

00:11:52,690 --> 00:11:57,730
well Tulsi is says okay well generated

00:11:54,820 --> 00:12:00,580
code appears in the basil - Jen files

00:11:57,730 --> 00:12:03,420
top-level directory so why is it missing

00:12:00,580 --> 00:12:07,330
why is our all of our generated code

00:12:03,420 --> 00:12:09,670
missing right and it's because the in

00:12:07,330 --> 00:12:13,330
basil right now when you do a build and

00:12:09,670 --> 00:12:15,640
and you feed it a label right if that

00:12:13,330 --> 00:12:17,200
specific rule doesn't generate files

00:12:15,640 --> 00:12:18,010
then they will be missing from the

00:12:17,200 --> 00:12:19,240
top-level directory

00:12:18,010 --> 00:12:22,180
even if transitive dependencies are

00:12:19,240 --> 00:12:23,950
generating those files so right let's

00:12:22,180 --> 00:12:25,990
just everywhere we invoke basil pellets

00:12:23,950 --> 00:12:27,760
include all of our rules that generate

00:12:25,990 --> 00:12:29,560
files everywhere and never miss one

00:12:27,760 --> 00:12:31,930
because if we miss one then our

00:12:29,560 --> 00:12:33,490
developers will be sad because read

00:12:31,930 --> 00:12:36,010
files will appear and Xcode sort of

00:12:33,490 --> 00:12:37,960
freaks out but if we do that then we're

00:12:36,010 --> 00:12:39,520
it's already done right because now the

00:12:37,960 --> 00:12:41,710
files are there people can edit and it

00:12:39,520 --> 00:12:43,300
builds but then it's not really there

00:12:41,710 --> 00:12:45,910
you know it's only there after we do a

00:12:43,300 --> 00:12:49,090
successful build of our framework or all

00:12:45,910 --> 00:12:50,440
of our libraries right but but but we

00:12:49,090 --> 00:12:52,030
don't want to wait for our entire build

00:12:50,440 --> 00:12:54,100
to finish before people can see our code

00:12:52,030 --> 00:12:55,960
so you know let's make like a make

00:12:54,100 --> 00:12:58,290
target that just as basil build on the

00:12:55,960 --> 00:13:02,260
generated all the generated kind of

00:12:58,290 --> 00:13:04,720
labels and then you know whatever right

00:13:02,260 --> 00:13:06,760
so you can see like what was going on

00:13:04,720 --> 00:13:10,750
here okay so so we're trying to

00:13:06,760 --> 00:13:13,470
incrementally adopt basil and we we

00:13:10,750 --> 00:13:16,510
built on top of these like what was

00:13:13,470 --> 00:13:19,060
supposed to be one line of shell became

00:13:16,510 --> 00:13:21,550
many lines and shell scripts that called

00:13:19,060 --> 00:13:23,680
shell scripts and there's this sort of

00:13:21,550 --> 00:13:29,560
meme of like build pink or dot SH is

00:13:23,680 --> 00:13:30,550
this nightmare so you know if if other

00:13:29,560 --> 00:13:32,470
people are interested in this

00:13:30,550 --> 00:13:34,160
incremental adoption which i think is

00:13:32,470 --> 00:13:37,310
sort of useful

00:13:34,160 --> 00:13:39,050
if if the basel team or all of us

00:13:37,310 --> 00:13:41,030
open-source contributors could do some

00:13:39,050 --> 00:13:43,910
things it would be a little bit easier I

00:13:41,030 --> 00:13:46,760
think so first of all the - -

00:13:43,910 --> 00:13:48,500
experimental - OH - artifacts what that

00:13:46,760 --> 00:13:50,870
does is it dumps all the artifacts that

00:13:48,500 --> 00:13:52,400
are produced or the path - all the

00:13:50,870 --> 00:13:54,350
artifacts that are produced so you can

00:13:52,400 --> 00:13:56,930
easily extract those so that's super

00:13:54,350 --> 00:14:00,200
good we're happy that that exists now if

00:13:56,930 --> 00:14:02,600
there were a way to say like hey I'm

00:14:00,200 --> 00:14:04,880
doing this build but like don't hide all

00:14:02,600 --> 00:14:06,490
of the generated code please because you

00:14:04,880 --> 00:14:10,010
know some people want to look at that

00:14:06,490 --> 00:14:12,260
that would be cool and then a lot of

00:14:10,010 --> 00:14:14,900
examples would be really really great I

00:14:12,260 --> 00:14:16,850
think we struggled a lot because of

00:14:14,900 --> 00:14:19,910
things we just didn't know really

00:14:16,850 --> 00:14:22,250
existed in the beginning and we we hit

00:14:19,910 --> 00:14:25,700
these roadblocks that we kind of you

00:14:22,250 --> 00:14:28,190
know obviously had a Cobra so right so

00:14:25,700 --> 00:14:30,910
so we did this and like this sort of

00:14:28,190 --> 00:14:35,450
like was okay for a few months honestly

00:14:30,910 --> 00:14:38,570
but you know there were problems as you

00:14:35,450 --> 00:14:41,960
could probably imagine so we decided we

00:14:38,570 --> 00:14:43,280
should just go full Basel and and you

00:14:41,960 --> 00:14:45,980
know things hopefully will be better

00:14:43,280 --> 00:14:47,720
right because everything is all together

00:14:45,980 --> 00:14:50,920
you know we're not kind of like having

00:14:47,720 --> 00:14:53,600
this thing out of out of Basel right so

00:14:50,920 --> 00:14:57,920
let's talk about going big and to do

00:14:53,600 --> 00:15:05,330
that I'm gonna invite Jerry Moreno to

00:14:57,920 --> 00:15:07,940
talk about that stuff all right Thank

00:15:05,330 --> 00:15:09,020
You Brandon that was awesome cool so

00:15:07,940 --> 00:15:11,540
yeah I'm gonna tell you a little bit

00:15:09,020 --> 00:15:13,250
about going full Basel but first I want

00:15:11,540 --> 00:15:15,410
to I want to give you a little bit of

00:15:13,250 --> 00:15:17,780
background on the Pinterest iOS app and

00:15:15,410 --> 00:15:19,460
so we currently have about 50 external

00:15:17,780 --> 00:15:22,460
dependencies in the Pinterest iOS app

00:15:19,460 --> 00:15:23,870
and so in order to build virtually like

00:15:22,460 --> 00:15:26,000
any of our source code we need we need

00:15:23,870 --> 00:15:28,550
to build a very deep dependency graph

00:15:26,000 --> 00:15:30,200
and so you know bringing all these

00:15:28,550 --> 00:15:31,700
dependencies into basil was affect

00:15:30,200 --> 00:15:33,580
effectively a dependency of even

00:15:31,700 --> 00:15:37,880
building the iOS app and basil at all

00:15:33,580 --> 00:15:39,320
and so so as Raul mentioned we were

00:15:37,880 --> 00:15:41,330
previously using cocoapods

00:15:39,320 --> 00:15:44,210
which basically is the canonical way to

00:15:41,330 --> 00:15:47,420
manage a package in basil all right

00:15:44,210 --> 00:15:47,820
Xcode rather so that cocoa pods for

00:15:47,420 --> 00:15:49,500
those of you

00:15:47,820 --> 00:15:53,130
you aren't familiar with iOS development

00:15:49,500 --> 00:15:55,320
or our Apple based stuff it's it

00:15:53,130 --> 00:15:57,390
basically downloads the repository from

00:15:55,320 --> 00:15:59,010
github or wherever and then it

00:15:57,390 --> 00:16:02,310
integrates it into Xcode which is the

00:15:59,010 --> 00:16:05,970
build system so in order to get these

00:16:02,310 --> 00:16:07,860
dependencies up and running we were like

00:16:05,970 --> 00:16:10,020
okay let's let's go ahead and take a

00:16:07,860 --> 00:16:13,260
look at what basil is doing we found we

00:16:10,020 --> 00:16:15,120
found new new HTTP archive we found git

00:16:13,260 --> 00:16:17,580
repository repository rules this and

00:16:15,120 --> 00:16:22,230
that and we we started out by writing

00:16:17,580 --> 00:16:24,120
build files by hand and quickly we

00:16:22,230 --> 00:16:26,210
realized that this was not going to be

00:16:24,120 --> 00:16:28,560
feasible for 50 external dependencies

00:16:26,210 --> 00:16:30,660
and even if we weren't able to actually

00:16:28,560 --> 00:16:32,730
implement all this built file code

00:16:30,660 --> 00:16:35,370
ourselves it's the last thing that we

00:16:32,730 --> 00:16:38,690
ever want to maintain in the world and

00:16:35,370 --> 00:16:42,000
so yeah going back to cocoa pods again

00:16:38,690 --> 00:16:43,920
cocoa pods is effectively there's

00:16:42,000 --> 00:16:47,190
effectively two bits to cocoa pods the

00:16:43,920 --> 00:16:48,480
first is the actual system that that

00:16:47,190 --> 00:16:50,160
downloads and integrates your

00:16:48,480 --> 00:16:52,140
dependencies that's like one bit that I

00:16:50,160 --> 00:16:54,390
that I think about cocoa pods and then

00:16:52,140 --> 00:16:57,540
the other part is the actual pod spec so

00:16:54,390 --> 00:16:59,850
in cocoa pods there's this notion of a

00:16:57,540 --> 00:17:02,580
configuration descriptor which includes

00:16:59,850 --> 00:17:05,070
all the source files headed a header

00:17:02,580 --> 00:17:07,110
files compiler flags and it even tells

00:17:05,070 --> 00:17:11,280
you what are the dependencies on other

00:17:07,110 --> 00:17:13,620
cocoa pods so given that what we realize

00:17:11,280 --> 00:17:15,990
is that we could take this this pod spec

00:17:13,620 --> 00:17:18,150
this cocoa pod file that was previously

00:17:15,990 --> 00:17:21,930
used to generate the Xcode based

00:17:18,150 --> 00:17:23,250
projects and we could actually we could

00:17:21,930 --> 00:17:25,170
actually write out build files and

00:17:23,250 --> 00:17:28,170
integrate all these dependencies with

00:17:25,170 --> 00:17:30,750
basil and so what what started out to be

00:17:28,170 --> 00:17:33,180
a very trivial Python script that I

00:17:30,750 --> 00:17:36,060
wrote in like a day ended up being a

00:17:33,180 --> 00:17:37,320
massive Swift program over the course of

00:17:36,060 --> 00:17:39,870
a few months

00:17:37,320 --> 00:17:43,590
and we ended up implementing cocoa pods

00:17:39,870 --> 00:17:45,060
for basil and so uh so yeah cocoa pods

00:17:43,590 --> 00:17:46,740
for basil what does that mean the name

00:17:45,060 --> 00:17:49,260
of the program is called pod to build

00:17:46,740 --> 00:17:51,960
the user actually describes the

00:17:49,260 --> 00:17:54,240
dependency with a very simple macro and

00:17:51,960 --> 00:17:57,360
then we compile a build file based on

00:17:54,240 --> 00:18:00,150
the pod spec and this this macro was

00:17:57,360 --> 00:18:01,250
originally designed to be a repository

00:18:00,150 --> 00:18:03,740
rule

00:18:01,250 --> 00:18:06,500
so we first we first implemented this as

00:18:03,740 --> 00:18:08,380
a repository rule this would go right in

00:18:06,500 --> 00:18:11,150
your workspace file around all the other

00:18:08,380 --> 00:18:13,280
dependencies and it looked just like

00:18:11,150 --> 00:18:16,039
this it's still it still has the same

00:18:13,280 --> 00:18:19,549
syntax today we ran into a ton of

00:18:16,039 --> 00:18:20,960
complications with using external first

00:18:19,549 --> 00:18:23,570
of all as as you heard from the other

00:18:20,960 --> 00:18:26,750
folks here today adding several

00:18:23,570 --> 00:18:29,539
different services whether that's github

00:18:26,750 --> 00:18:31,909
whether that's Google com fabric food

00:18:29,539 --> 00:18:34,340
bar or whatever you have you don't want

00:18:31,909 --> 00:18:36,860
your CI or your build system going out

00:18:34,340 --> 00:18:39,770
to all these external services that you

00:18:36,860 --> 00:18:41,510
don't control and that introduced a ton

00:18:39,770 --> 00:18:43,309
of reliability and actual build

00:18:41,510 --> 00:18:45,500
performance problems developers were

00:18:43,309 --> 00:18:46,700
like hey just build slow and I was like

00:18:45,500 --> 00:18:48,940
well you know it looks like you're

00:18:46,700 --> 00:18:51,830
you're making requests to foo and bar

00:18:48,940 --> 00:18:54,860
whatever and so that was that was a huge

00:18:51,830 --> 00:18:56,659
problem with this and then Oh in in our

00:18:54,860 --> 00:18:59,169
actual dependency management system we

00:18:56,659 --> 00:19:01,669
actually we actually like found a way to

00:18:59,169 --> 00:19:03,559
cache those outside of basil so that

00:19:01,669 --> 00:19:06,590
repository rule wasn't redownload Inge

00:19:03,559 --> 00:19:09,110
and on top of that we had a lot of

00:19:06,590 --> 00:19:12,919
problems with Xcode and IDE integration

00:19:09,110 --> 00:19:14,990
using this xx code just like if you have

00:19:12,919 --> 00:19:16,610
files in Xcode and you're taking them

00:19:14,990 --> 00:19:19,220
away from Xcode it's basically going to

00:19:16,610 --> 00:19:23,030
re-indexed all those files in every

00:19:19,220 --> 00:19:27,230
other file so anyways so back to Bob to

00:19:23,030 --> 00:19:29,510
build like like like every other

00:19:27,230 --> 00:19:32,150
dependency in basil like you do in a

00:19:29,510 --> 00:19:34,070
workspace you have to flatten your

00:19:32,150 --> 00:19:36,710
dependency graph into the workspace file

00:19:34,070 --> 00:19:38,570
and so you you have multiple pods that

00:19:36,710 --> 00:19:40,730
depend on pods on in this in this

00:19:38,570 --> 00:19:43,700
example pin cache depends on pin

00:19:40,730 --> 00:19:47,299
operation so we have both of these new

00:19:43,700 --> 00:19:50,419
pod repositories declared in the

00:19:47,299 --> 00:19:52,250
workspace file and so yeah so this

00:19:50,419 --> 00:19:53,120
program it was a pretty large

00:19:52,250 --> 00:19:55,280
undertaking

00:19:53,120 --> 00:19:57,679
we ended up implementing the full

00:19:55,280 --> 00:20:00,140
skylark syntax and a pretty functional

00:19:57,679 --> 00:20:01,970
Swift DSL and we have our own

00:20:00,140 --> 00:20:06,530
downloading infrastructure to actually

00:20:01,970 --> 00:20:08,270
like download archives unzip them and it

00:20:06,530 --> 00:20:12,890
doesn't depend on workspace or

00:20:08,270 --> 00:20:15,080
repository rule and so as of as of

00:20:12,890 --> 00:20:20,450
within the last like 30min

00:20:15,080 --> 00:20:23,809
it's now open source so you can go so

00:20:20,450 --> 00:20:25,730
yeah you can you can go on go on get up

00:20:23,809 --> 00:20:27,980
right now and you can see all of our

00:20:25,730 --> 00:20:29,720
commits from the very first one and this

00:20:27,980 --> 00:20:31,700
contains all the logic that we're using

00:20:29,720 --> 00:20:36,559
to integrate over 50 dependencies in the

00:20:31,700 --> 00:20:39,980
Pinterest right now yeah so as the

00:20:36,559 --> 00:20:42,679
rocket scientist earlier mentioned they

00:20:39,980 --> 00:20:44,659
they did validation of their build we're

00:20:42,679 --> 00:20:46,820
not we're not building rocket ships at

00:20:44,659 --> 00:20:49,100
Pinterest but I can tell you what we're

00:20:46,820 --> 00:20:50,539
doing is incredibly important and we

00:20:49,100 --> 00:20:52,549
needed to make sure the builds were

00:20:50,539 --> 00:20:54,409
going to be the same with all the 50

00:20:52,549 --> 00:20:57,559
dependencies we actually we actually

00:20:54,409 --> 00:20:59,509
wanted to make sure that we were we were

00:20:57,559 --> 00:21:02,269
you know building these dependencies the

00:20:59,509 --> 00:21:03,559
exact same way and so it was it was

00:21:02,269 --> 00:21:05,629
pretty it was pretty simple to achieve

00:21:03,559 --> 00:21:07,850
this if you look at a build system as a

00:21:05,629 --> 00:21:09,980
set of inputs and outputs you can reduce

00:21:07,850 --> 00:21:12,710
any build system to that basic

00:21:09,980 --> 00:21:15,859
fundamentals and so we did this and uh

00:21:12,710 --> 00:21:17,779
you know we used we used Xcode before

00:21:15,859 --> 00:21:19,940
and so we're like based on like a lot of

00:21:17,779 --> 00:21:22,100
private frameworks we were able to

00:21:19,940 --> 00:21:24,590
expose all the inputs and outputs of

00:21:22,100 --> 00:21:29,600
Xcode and in in Basel we use the extra

00:21:24,590 --> 00:21:31,519
action API and so yeah after after that

00:21:29,600 --> 00:21:32,899
level of level of rigor we were certain

00:21:31,519 --> 00:21:34,580
that we had the right linked frameworks

00:21:32,899 --> 00:21:38,149
we had the right files with the right

00:21:34,580 --> 00:21:41,149
flags we went through more rounds of

00:21:38,149 --> 00:21:43,159
validation so all of our unit tests all

00:21:41,149 --> 00:21:44,690
of our automation testing we ran through

00:21:43,159 --> 00:21:47,629
we ran we ran the app through our

00:21:44,690 --> 00:21:50,299
internal dog food group we actually sent

00:21:47,629 --> 00:21:53,419
the app out to our QA folks we sent we

00:21:50,299 --> 00:21:56,239
send it out to the lodestone and after

00:21:53,419 --> 00:21:58,879
all that rigor for our program we we

00:21:56,239 --> 00:22:01,369
were able to ship a fully built app

00:21:58,879 --> 00:22:05,749
under Basel without impacting the users

00:22:01,369 --> 00:22:15,470
and so we were super proud of that so

00:22:05,749 --> 00:22:17,119
yeah so okay right so Basil's Basil's

00:22:15,470 --> 00:22:19,129
supposed to be fast and reproducible

00:22:17,119 --> 00:22:22,249
choose two well we at least got half of

00:22:19,129 --> 00:22:24,139
it right that the app was reproducible

00:22:22,249 --> 00:22:25,700
our builds were awesome it worked the

00:22:24,139 --> 00:22:28,550
users loved it but it was actually

00:22:25,700 --> 00:22:30,380
reproducibly 2.5 slower than what we had

00:22:28,550 --> 00:22:32,030
so that was that was a blocker like we

00:22:30,380 --> 00:22:34,040
have this we had this great system this

00:22:32,030 --> 00:22:35,570
great infrastructure but we couldn't

00:22:34,040 --> 00:22:37,429
even give it to our developers because

00:22:35,570 --> 00:22:39,610
it was it was unacceptably slow like it

00:22:37,429 --> 00:22:43,850
was yeah it was it was a total blocker

00:22:39,610 --> 00:22:45,200
and so I started looking at I started

00:22:43,850 --> 00:22:46,910
looking at this problem and our team was

00:22:45,200 --> 00:22:49,190
looking at it and you know exa codes

00:22:46,910 --> 00:22:51,740
been around for for for 20 years it's

00:22:49,190 --> 00:22:53,150
been it's older than that actually and

00:22:51,740 --> 00:22:56,360
so the fact that the fact that we were

00:22:53,150 --> 00:22:57,980
gonna make basil as fast as Xcode just

00:22:56,360 --> 00:23:00,290
seemed like a total pipe dream to me I

00:22:57,980 --> 00:23:02,960
was I was really doubting doubting that

00:23:00,290 --> 00:23:05,510
we could achieve this at first but we we

00:23:02,960 --> 00:23:07,460
went back to the fundamentals and and

00:23:05,510 --> 00:23:10,390
basically profiled at a system level to

00:23:07,460 --> 00:23:15,890
understand what basil actually was doing

00:23:10,390 --> 00:23:18,620
to the system holistically and so we got

00:23:15,890 --> 00:23:20,780
it we got a quick idea of you know what

00:23:18,620 --> 00:23:22,220
what was taking the time and on top of

00:23:20,780 --> 00:23:24,140
that we actually added a lot of

00:23:22,220 --> 00:23:25,580
profiling and logging to basil and

00:23:24,140 --> 00:23:27,890
whether whether that was in the java

00:23:25,580 --> 00:23:29,809
code or the actual shell script rule

00:23:27,890 --> 00:23:32,240
implementations to find the hot spots

00:23:29,809 --> 00:23:34,220
and as you all probably could guess

00:23:32,240 --> 00:23:36,380
compiling our object files was the

00:23:34,220 --> 00:23:38,480
hottest most expensive code path the

00:23:36,380 --> 00:23:42,050
actual compiler invocations of clang to

00:23:38,480 --> 00:23:44,450
produce the object files so I'm gonna

00:23:42,050 --> 00:23:48,800
give you a quick summary of how how we

00:23:44,450 --> 00:23:51,170
spent this up and it was it was it was

00:23:48,800 --> 00:23:53,420
it was a great success but I'll I'm

00:23:51,170 --> 00:23:56,510
gonna get into the the tricks that we

00:23:53,420 --> 00:23:58,040
did first so um in in basil for those of

00:23:56,510 --> 00:24:00,860
you who who are familiar with the

00:23:58,040 --> 00:24:02,690
execution system basically at the end of

00:24:00,860 --> 00:24:04,520
the day the spawn the spawn strategy is

00:24:02,690 --> 00:24:06,650
is going to execute a bunch of shell

00:24:04,520 --> 00:24:09,080
scripts which which does some stuff and

00:24:06,650 --> 00:24:11,360
then that's gonna execute clang so there

00:24:09,080 --> 00:24:13,040
are several layers in basil that

00:24:11,360 --> 00:24:17,090
actually are involved in running clang

00:24:13,040 --> 00:24:19,640
and so at like at the edge of this the

00:24:17,090 --> 00:24:23,480
the cross tool is invoking the EXCI run

00:24:19,640 --> 00:24:25,640
wrapper and so in this in this script

00:24:23,480 --> 00:24:28,100
there's actually a loop over over a

00:24:25,640 --> 00:24:30,380
massive over a massive input and it's

00:24:28,100 --> 00:24:31,880
doing like string processing in bash and

00:24:30,380 --> 00:24:34,670
not to mention that it's several shell

00:24:31,880 --> 00:24:35,990
scripts launching shell scripts you have

00:24:34,670 --> 00:24:38,440
like wrap clang you have this amount

00:24:35,990 --> 00:24:41,870
running all these shell scripts and

00:24:38,440 --> 00:24:42,100
basically by replacing by replacing all

00:24:41,870 --> 00:24:44,860
the

00:24:42,100 --> 00:24:47,650
shell scripts with with a custom binary

00:24:44,860 --> 00:24:49,120
that was precompiled that same three

00:24:47,650 --> 00:24:50,980
minutes off the entire build time and

00:24:49,120 --> 00:24:52,480
that was that was going from like nine

00:24:50,980 --> 00:24:56,620
minutes to six minutes or something like

00:24:52,480 --> 00:24:59,380
that so that was that's a fundamental

00:24:56,620 --> 00:25:02,919
change when we're talking about nine

00:24:59,380 --> 00:25:05,590
minutes so the other the other the other

00:25:02,919 --> 00:25:08,679
main thing that that we've we've heard

00:25:05,590 --> 00:25:10,809
before is that iOS uses a bit different

00:25:08,679 --> 00:25:13,450
of import semantics than other types of

00:25:10,809 --> 00:25:15,850
developers out there you know the C++

00:25:13,450 --> 00:25:17,610
folks and the C developers this is

00:25:15,850 --> 00:25:20,470
totally different so in iOS development

00:25:17,610 --> 00:25:21,159
within the same package when you import

00:25:20,470 --> 00:25:23,169
a header file

00:25:21,159 --> 00:25:25,840
you typically import it as import header

00:25:23,169 --> 00:25:27,909
h regardless of the filesystem location

00:25:25,840 --> 00:25:29,830
of the header and when you import from

00:25:27,909 --> 00:25:31,600
another package whether that's a

00:25:29,830 --> 00:25:34,330
framework a static library a foo or a

00:25:31,600 --> 00:25:36,580
bar you imported as namespace slash

00:25:34,330 --> 00:25:38,110
header h and so to actually implement

00:25:36,580 --> 00:25:39,789
this in Basel

00:25:38,110 --> 00:25:44,559
we're passing we were passing in

00:25:39,789 --> 00:25:46,710
hundreds of directories to clang so

00:25:44,559 --> 00:25:49,419
clang is like getting hundreds of

00:25:46,710 --> 00:25:51,220
directories that had to do a linear

00:25:49,419 --> 00:25:53,140
search across all these directories

00:25:51,220 --> 00:25:58,150
every time you know every time it sees

00:25:53,140 --> 00:26:01,210
it's this these imports and so it's it's

00:25:58,150 --> 00:26:03,190
a pretty it's a pretty silly trick to to

00:26:01,210 --> 00:26:05,470
fix this problem instead of instead of

00:26:03,190 --> 00:26:07,419
querying the filesystem for headers

00:26:05,470 --> 00:26:10,630
every time doing this like ridiculously

00:26:07,419 --> 00:26:14,080
slow linear search we we put all the

00:26:10,630 --> 00:26:16,120
paths into a hash table and so we we

00:26:14,080 --> 00:26:18,220
basically dynamically generate these

00:26:16,120 --> 00:26:20,740
hash tables and then clang memory naps

00:26:18,220 --> 00:26:22,419
the hash table into its process and it

00:26:20,740 --> 00:26:25,120
has constant time lookup Saur what used

00:26:22,419 --> 00:26:27,970
to be incredibly slow and this actually

00:26:25,120 --> 00:26:30,780
caught our build time up in half so yeah

00:26:27,970 --> 00:26:36,610
I'm incredibly proud of this of this

00:26:30,780 --> 00:26:39,220
optimization and yeah so back to like

00:26:36,610 --> 00:26:40,929
the original story our our original

00:26:39,220 --> 00:26:43,419
build time with basil was nine and a

00:26:40,929 --> 00:26:44,799
half minutes which was unacceptable for

00:26:43,419 --> 00:26:46,000
our developers I know some people out

00:26:44,799 --> 00:26:47,650
there are like nine and a half minutes

00:26:46,000 --> 00:26:50,860
that's and that's unbelievable like ours

00:26:47,650 --> 00:26:52,450
is like eight hours or whatever but when

00:26:50,860 --> 00:26:55,630
when you have a great system that's been

00:26:52,450 --> 00:26:55,900
optimized for so many years you you have

00:26:55,630 --> 00:26:57,280
to

00:26:55,900 --> 00:26:59,590
you have to execute and you have to get

00:26:57,280 --> 00:27:01,210
it to the same level of speed and

00:26:59,590 --> 00:27:04,330
performance that that the developers

00:27:01,210 --> 00:27:06,070
were used to and so yeah in addition to

00:27:04,330 --> 00:27:08,980
in addition to what what I what I

00:27:06,070 --> 00:27:11,020
previously mentioned you know we have

00:27:08,980 --> 00:27:13,090
like all these extensions we have Syria

00:27:11,020 --> 00:27:14,440
we have notifications we have this and

00:27:13,090 --> 00:27:16,540
that all these different types of

00:27:14,440 --> 00:27:18,520
extensions that we're building so we

00:27:16,540 --> 00:27:20,380
actually created a program that doesn't

00:27:18,520 --> 00:27:23,320
have any extensions and now is this is a

00:27:20,380 --> 00:27:27,100
very simple optimization removed almost

00:27:23,320 --> 00:27:29,140
like - it cuts the amount of actions in

00:27:27,100 --> 00:27:31,090
half we were out like we're at like

00:27:29,140 --> 00:27:34,300
6,000 actions and we're we're down to

00:27:31,090 --> 00:27:36,790
3,000 actions by doing this removal of a

00:27:34,300 --> 00:27:39,250
decent generation and patching that we

00:27:36,790 --> 00:27:40,840
originally we were using DSM to do

00:27:39,250 --> 00:27:44,860
debugging but we're actually like

00:27:40,840 --> 00:27:46,870
remapping debug paths in clang now and

00:27:44,860 --> 00:27:48,490
I'm using client modules so yeah that's

00:27:46,870 --> 00:27:50,440
that's another like non basally thing

00:27:48,490 --> 00:27:54,310
but because of basil we were able to use

00:27:50,440 --> 00:27:56,470
clang modules pretty easily and so I

00:27:54,310 --> 00:27:58,330
mention that there's still some stuff on

00:27:56,470 --> 00:28:00,970
the table right now if you go on github

00:27:58,330 --> 00:28:03,160
I proposed I propose that we add header

00:28:00,970 --> 00:28:04,840
maps into basil because it cut our build

00:28:03,160 --> 00:28:07,300
time in half and that's that's a huge

00:28:04,840 --> 00:28:09,160
win people that are using iOS

00:28:07,300 --> 00:28:11,620
development are going to have massive

00:28:09,160 --> 00:28:14,680
wins just by that patch and also it's it

00:28:11,620 --> 00:28:18,400
it also translates over to the C++ unto

00:28:14,680 --> 00:28:20,950
things as well and yeah the the overall

00:28:18,400 --> 00:28:24,700
cross tool and spawn strategy there's

00:28:20,950 --> 00:28:26,890
still about maybe like a minute or so of

00:28:24,700 --> 00:28:27,610
optimizations left in there that that

00:28:26,890 --> 00:28:30,790
we're working on

00:28:27,610 --> 00:28:34,990
so yeah that's uh that's how we went

00:28:30,790 --> 00:28:45,150
full basil in a nutshell and Raul is up

00:28:34,990 --> 00:28:50,980
next to talk about developer adoption so

00:28:45,150 --> 00:28:52,090
after a lot of work we had we we had

00:28:50,980 --> 00:28:54,880
something that built we had something

00:28:52,090 --> 00:28:56,470
that matched our current bill before we

00:28:54,880 --> 00:29:01,180
got the performance from two and a half

00:28:56,470 --> 00:29:02,830
back to one and and you know the next

00:29:01,180 --> 00:29:03,820
step is let's take this exciting thing

00:29:02,830 --> 00:29:07,390
we've been working on and gives you

00:29:03,820 --> 00:29:09,340
developers and so when we start to roll

00:29:07,390 --> 00:29:12,280
this out we noticed some early

00:29:09,340 --> 00:29:15,010
winds are really promising and I don't

00:29:12,280 --> 00:29:17,410
share something with you first is our

00:29:15,010 --> 00:29:19,540
build speed and reliability dramatically

00:29:17,410 --> 00:29:22,360
increased clean builds were decreased by

00:29:19,540 --> 00:29:24,580
11% we started using basal tests to run

00:29:22,360 --> 00:29:28,410
all of our unit tests someone please

00:29:24,580 --> 00:29:30,970
work on the integration test runner and

00:29:28,410 --> 00:29:32,710
alright we no longer have it works on my

00:29:30,970 --> 00:29:34,480
machine issues developers have been able

00:29:32,710 --> 00:29:36,340
to there hasn't we haven't had a

00:29:34,480 --> 00:29:38,560
scenario where someone had a failure

00:29:36,340 --> 00:29:40,810
locally that didn't also occur on CI and

00:29:38,560 --> 00:29:42,430
vice versa and a lot of our code

00:29:40,810 --> 00:29:45,250
generation tasks were automated as part

00:29:42,430 --> 00:29:47,020
of the build and then for our CI system

00:29:45,250 --> 00:29:50,680
which was struggling as I mentioned

00:29:47,020 --> 00:29:53,320
before our PR builds are 27% faster

00:29:50,680 --> 00:29:55,360
producing our build artifact for the

00:29:53,320 --> 00:29:57,490
beta audience is about 45% faster and

00:29:55,360 --> 00:30:00,010
our success rate improved from about

00:29:57,490 --> 00:30:01,200
eighty percent on our CI s-- set up to

00:30:00,010 --> 00:30:03,400
about ninety seven to a hundred percent

00:30:01,200 --> 00:30:06,610
and this is an example sort of

00:30:03,400 --> 00:30:08,470
screenshot of our of our beta build and

00:30:06,610 --> 00:30:10,420
this is a screenshot from built kite and

00:30:08,470 --> 00:30:13,540
basically you can see it's a hundred

00:30:10,420 --> 00:30:15,520
sent reliability and another thing if

00:30:13,540 --> 00:30:16,930
you're using basil and other thing to

00:30:15,520 --> 00:30:19,360
sort of throw out there is like she also

00:30:16,930 --> 00:30:21,160
check out Nix Nix is kind of fun too

00:30:19,360 --> 00:30:23,680
because like basil can declare your

00:30:21,160 --> 00:30:24,670
entire build whereas I know some people

00:30:23,680 --> 00:30:25,930
are using like kubernetes and things

00:30:24,670 --> 00:30:27,610
like that to manage kind of a container

00:30:25,930 --> 00:30:30,400
environment around it but if you're an

00:30:27,610 --> 00:30:31,540
iOS developer you don't get that so and

00:30:30,400 --> 00:30:33,280
you cuz you have to compile on Mac

00:30:31,540 --> 00:30:35,200
hardware so Nix actually allows you to

00:30:33,280 --> 00:30:36,850
sort of declare everything around the

00:30:35,200 --> 00:30:40,870
build and all the dependencies around

00:30:36,850 --> 00:30:43,330
that but I have kind of a thing that I

00:30:40,870 --> 00:30:45,130
hate to break to you but uhm fast

00:30:43,330 --> 00:30:47,670
reproducible is unfortunately not enough

00:30:45,130 --> 00:30:49,870
when you're giving it to developers and

00:30:47,670 --> 00:30:52,690
and the issues are really in the

00:30:49,870 --> 00:30:55,780
developer workflow and we thought this

00:30:52,690 --> 00:30:57,880
problem was solved we you know we we put

00:30:55,780 --> 00:30:59,800
a lot of we put a lot of work we have

00:30:57,880 --> 00:31:01,180
our own custom fork of tulsi we've tried

00:30:59,800 --> 00:31:04,630
to maintain patches we try to upstream a

00:31:01,180 --> 00:31:06,040
lot of things but I think like one of

00:31:04,630 --> 00:31:07,180
the pains that we face I don't and

00:31:06,040 --> 00:31:08,710
pretty sure it's pretty common is

00:31:07,180 --> 00:31:10,060
sometimes some of the best practices

00:31:08,710 --> 00:31:12,940
around these things and around these

00:31:10,060 --> 00:31:14,320
tools are not really well known so for

00:31:12,940 --> 00:31:16,090
instance we start getting questions like

00:31:14,320 --> 00:31:18,190
this like coughing am i generating this

00:31:16,090 --> 00:31:20,890
project why aren't we checking in the

00:31:18,190 --> 00:31:22,360
project and what are these what are

00:31:20,890 --> 00:31:23,200
these like like the number of targets I

00:31:22,360 --> 00:31:24,910
can pick from an Xcode

00:31:23,200 --> 00:31:27,040
have doubled now I have all these ideas

00:31:24,910 --> 00:31:28,840
targets I'm not really quite sure what

00:31:27,040 --> 00:31:31,510
these are which boxes which boxes should

00:31:28,840 --> 00:31:32,970
I check if I'm adding files and then

00:31:31,510 --> 00:31:36,760
once you get past the education piece

00:31:32,970 --> 00:31:38,920
then you actually have other issues we

00:31:36,760 --> 00:31:40,990
we noticed especially with Xcode 9

00:31:38,920 --> 00:31:43,690
coming out indexing for us was

00:31:40,990 --> 00:31:45,760
noticeably slower our autocomplete

00:31:43,690 --> 00:31:47,080
behavior it's like it worked sometimes

00:31:45,760 --> 00:31:48,580
like it's like it like it might have

00:31:47,080 --> 00:31:50,170
worked on the main app code but then for

00:31:48,580 --> 00:31:52,540
like gen files it was like inconsistent

00:31:50,170 --> 00:31:54,130
so there's like some parts of Basel that

00:31:52,540 --> 00:31:56,860
are like not really playing well with

00:31:54,130 --> 00:31:58,000
Xcode and there's also like certain

00:31:56,860 --> 00:31:59,440
features that were missing that we've

00:31:58,000 --> 00:32:00,850
actually implemented like be implemented

00:31:59,440 --> 00:32:04,660
like the static analyzer using the extra

00:32:00,850 --> 00:32:07,150
actions API and and our developers

00:32:04,660 --> 00:32:08,740
really miss the progress bar we're like

00:32:07,150 --> 00:32:10,960
just go in the build log just look at

00:32:08,740 --> 00:32:13,420
the log it's outputting it will say it's

00:32:10,960 --> 00:32:15,970
like 5 out of 300 actions and then when

00:32:13,420 --> 00:32:20,380
it gets to 299 it'll go to like 6 out of

00:32:15,970 --> 00:32:21,490
2,000 actions and and I'm like I promise

00:32:20,380 --> 00:32:24,610
you there's an upper bound it will

00:32:21,490 --> 00:32:26,140
eventually reach its limit but and I

00:32:24,610 --> 00:32:27,730
tell them why and they're like I was

00:32:26,140 --> 00:32:30,220
like it's like it's like it's learning

00:32:27,730 --> 00:32:31,440
about the build as it goes but but you

00:32:30,220 --> 00:32:35,440
know it's kind of a hard thing to convey

00:32:31,440 --> 00:32:37,720
and you know I don't want a rag on tulsi

00:32:35,440 --> 00:32:40,060
too much because the reality is that

00:32:37,720 --> 00:32:41,470
Xcode is designed with the assumption

00:32:40,060 --> 00:32:43,300
that it's your configuration editor and

00:32:41,470 --> 00:32:45,010
build system it's designed around these

00:32:43,300 --> 00:32:49,060
assumptions and that's how those

00:32:45,010 --> 00:32:52,300
features work so like at best what we're

00:32:49,060 --> 00:32:54,460
gonna get is parody and and like and I

00:32:52,300 --> 00:32:56,620
think the problem right now is like

00:32:54,460 --> 00:32:58,750
we're missing that last kind of

00:32:56,620 --> 00:33:01,390
compelling bit on the iOS integration

00:32:58,750 --> 00:33:03,400
experience like things like things like

00:33:01,390 --> 00:33:06,010
like having remote caching fully working

00:33:03,400 --> 00:33:08,290
that make it like the obvious choice to

00:33:06,010 --> 00:33:09,370
why you would actually take maybe some

00:33:08,290 --> 00:33:13,680
of these issues or some of this

00:33:09,370 --> 00:33:17,350
instability for build speed wins so I

00:33:13,680 --> 00:33:20,560
this is kind of new in the last week and

00:33:17,350 --> 00:33:22,810
a half we've embarked on a project that

00:33:20,560 --> 00:33:23,830
is codenamed Baja blast if you're not

00:33:22,810 --> 00:33:25,810
familiar with Baja blast it was

00:33:23,830 --> 00:33:26,680
discontinued in 2013 and it was only

00:33:25,810 --> 00:33:31,000
available at Taco Bell

00:33:26,680 --> 00:33:31,930
and I we only called it this because the

00:33:31,000 --> 00:33:33,520
rest of our team was working on a

00:33:31,930 --> 00:33:36,270
project called Code Red and we just made

00:33:33,520 --> 00:33:36,270
from them about Mountain Dew

00:33:36,390 --> 00:33:42,100
and so baja blast it's a refreshing take

00:33:39,940 --> 00:33:46,470
back to a pure xcode experience derived

00:33:42,100 --> 00:33:49,420
from basil and and the idea is that like

00:33:46,470 --> 00:33:51,340
we we love the winds we got on CI and we

00:33:49,420 --> 00:33:53,620
think we can continue to improve them

00:33:51,340 --> 00:33:55,060
we like the stability we like having all

00:33:53,620 --> 00:33:58,360
of our configurations explicitly defined

00:33:55,060 --> 00:33:59,860
through build files and PCL files but we

00:33:58,360 --> 00:34:01,090
need to figure out the local developer

00:33:59,860 --> 00:34:03,430
workflow we need to actually improve

00:34:01,090 --> 00:34:07,540
that experience before like subjecting

00:34:03,430 --> 00:34:09,340
our developers to it and so so yeah so

00:34:07,540 --> 00:34:10,140
this project allows us to maintain the

00:34:09,340 --> 00:34:14,590
winds on CI

00:34:10,140 --> 00:34:16,950
the editor experience is is consistent

00:34:14,590 --> 00:34:19,300
with what people were used to before and

00:34:16,950 --> 00:34:20,980
as soon as we get things like remote

00:34:19,300 --> 00:34:22,450
cashing remote execution I think we'll

00:34:20,980 --> 00:34:24,490
kind of go back on this and maybe see

00:34:22,450 --> 00:34:26,140
where tal sees that and see how we can

00:34:24,490 --> 00:34:29,950
actually make them how we make the

00:34:26,140 --> 00:34:30,520
integration more compelling but but how

00:34:29,950 --> 00:34:32,530
does this work

00:34:30,520 --> 00:34:33,910
how are we doing this we're actually

00:34:32,530 --> 00:34:36,070
taking some inspiration phone tulsi

00:34:33,910 --> 00:34:38,320
which is to use the aspects api if

00:34:36,070 --> 00:34:39,730
you're not familiar with aspects is our

00:34:38,320 --> 00:34:43,900
very familiar with aspects pretty much

00:34:39,730 --> 00:34:46,929
mostly maybe ok so aspects allow you to

00:34:43,900 --> 00:34:48,250
basically create a create a shadow build

00:34:46,929 --> 00:34:49,780
graph so you can say for any sort of

00:34:48,250 --> 00:34:52,030
build action you can create a shadow

00:34:49,780 --> 00:34:55,060
setup action so in this case you can use

00:34:52,030 --> 00:34:56,919
the aspects API to extract all the build

00:34:55,060 --> 00:34:58,780
information so all the targets all of

00:34:56,919 --> 00:35:01,030
your compiler flags whatever you need

00:34:58,780 --> 00:35:02,380
and we load this up into a program

00:35:01,030 --> 00:35:05,920
written in Swift because we'd write

00:35:02,380 --> 00:35:09,850
everything in Swift and I accept our app

00:35:05,920 --> 00:35:13,030
but I and then we translate it to the

00:35:09,850 --> 00:35:14,800
specification that is that's defined in

00:35:13,030 --> 00:35:17,980
Xcode gen which mirrors Xcode pretty

00:35:14,800 --> 00:35:19,600
pretty well and then we actually link in

00:35:17,980 --> 00:35:23,140
the SEO Jun framework to generate a pure

00:35:19,600 --> 00:35:24,820
Xcode project and and we're still

00:35:23,140 --> 00:35:27,250
playing around with this we have some of

00:35:24,820 --> 00:35:29,280
this working and we're hoping to open

00:35:27,250 --> 00:35:34,660
source this probably in the near future

00:35:29,280 --> 00:35:36,730
but in conclusion incremental adoption

00:35:34,660 --> 00:35:38,950
is definitely possible on iOS if you're

00:35:36,730 --> 00:35:42,120
willing to maintain the glue layer and

00:35:38,950 --> 00:35:44,170
the shell scripts and copy patters

00:35:42,120 --> 00:35:47,100
reliability is free but performance

00:35:44,170 --> 00:35:49,750
isn't modularity still matters I think

00:35:47,100 --> 00:35:51,790
like a distinct focus on

00:35:49,750 --> 00:35:53,170
unlike the performance especially I

00:35:51,790 --> 00:35:55,180
think will be greatest actually have

00:35:53,170 --> 00:35:57,520
maybe analysis of the same project in

00:35:55,180 --> 00:35:59,380
Xcode and Basel and like assert a larger

00:35:57,520 --> 00:36:02,460
project and kind of make sure that as we

00:35:59,380 --> 00:36:05,200
do releases that they're a parody

00:36:02,460 --> 00:36:07,390
migration tools are essential they're

00:36:05,200 --> 00:36:09,730
essential like I can't stress this one

00:36:07,390 --> 00:36:11,320
enough like it's I mean we're lucky

00:36:09,730 --> 00:36:14,440
enough we had three engineers that could

00:36:11,320 --> 00:36:16,570
write two transpilers that and a

00:36:14,440 --> 00:36:19,150
validation system to ensure that we were

00:36:16,570 --> 00:36:20,320
actually shipping the same thing so if

00:36:19,150 --> 00:36:21,610
you're starting up a new app it's

00:36:20,320 --> 00:36:23,620
probably not too hard you're probably

00:36:21,610 --> 00:36:26,530
like a glob everything and name it app

00:36:23,620 --> 00:36:28,210
and you know you can build it but for

00:36:26,530 --> 00:36:29,470
for us for any existing app or any

00:36:28,210 --> 00:36:32,350
mature app that's looking to get these

00:36:29,470 --> 00:36:36,640
wins it's really essential to have these

00:36:32,350 --> 00:36:38,370
tools available and to recap fast and

00:36:36,640 --> 00:36:41,890
reliable isn't enough workflows matter

00:36:38,370 --> 00:36:43,990
think about ways that developers outside

00:36:41,890 --> 00:36:45,790
of Google actually like develop like

00:36:43,990 --> 00:36:47,110
they have external dependencies they

00:36:45,790 --> 00:36:48,400
have certain workflows or tools they're

00:36:47,110 --> 00:36:50,800
used to and we need to figure out how to

00:36:48,400 --> 00:36:54,640
migrate them from those to a pure Basel

00:36:50,800 --> 00:36:56,230
environment and and optionally like I

00:36:54,640 --> 00:36:59,260
know I talked about the expert

00:36:56,230 --> 00:37:00,160
integration a bit but but you know I

00:36:59,260 --> 00:37:02,050
think we should also look at other

00:37:00,160 --> 00:37:03,400
editors we should look at like how can

00:37:02,050 --> 00:37:04,810
we integrate into things like nuclide

00:37:03,400 --> 00:37:07,090
how we can integrate into things like

00:37:04,810 --> 00:37:09,100
app code or other systems how can we

00:37:07,090 --> 00:37:10,840
make Basel the de-facto build system and

00:37:09,100 --> 00:37:15,430
D couple it from the editor experience

00:37:10,840 --> 00:37:16,510
on iOS and this slide came too late

00:37:15,430 --> 00:37:18,160
but that's where I was gonna say that

00:37:16,510 --> 00:37:21,940
the Baja blast is gonna be open source

00:37:18,160 --> 00:37:22,870
soon but thank you so much to Google for

00:37:21,940 --> 00:37:24,420
having us

00:37:22,870 --> 00:37:32,499
we're happy to be here

00:37:24,420 --> 00:37:32,499

YouTube URL: https://www.youtube.com/watch?v=wewAVF-DVhs


