Title: Building Kubernetes [a Go binary] with Bazel
Publication date: 2017-12-08
Playlist: BazelCon 2017
Description: 
	by Jeff Grafton (Google Kubernetes)
Captions: 
	00:00:00,000 --> 00:00:08,700
all right thank you yeah just brief

00:00:03,629 --> 00:00:09,870
introductions as said I am a soft

00:00:08,700 --> 00:00:12,019
engineer and tools an infrastructure

00:00:09,870 --> 00:00:14,580
here at Google working with kubernetes

00:00:12,019 --> 00:00:16,770
and lately I've been with kubernetes for

00:00:14,580 --> 00:00:18,449
about almost three years now last year

00:00:16,770 --> 00:00:20,880
so I've been working focusing on build

00:00:18,449 --> 00:00:22,020
and also the whole time to be working on

00:00:20,880 --> 00:00:23,519
mic build and test stuff that's been

00:00:22,020 --> 00:00:25,920
last year so I've been specifically

00:00:23,519 --> 00:00:28,740
working on our build system improving

00:00:25,920 --> 00:00:30,179
our build system and trying to use basil

00:00:28,740 --> 00:00:32,850
for everything so trying to get away

00:00:30,179 --> 00:00:35,130
from the legacy system I have we have

00:00:32,850 --> 00:00:37,290
which I'll get to you shortly so you

00:00:35,130 --> 00:00:39,840
know title my talk here is building

00:00:37,290 --> 00:00:41,160
kubernetes a go binary with basil and as

00:00:39,840 --> 00:00:42,510
Jay talked about yesterday in his

00:00:41,160 --> 00:00:43,829
lightning talk all you need to do is

00:00:42,510 --> 00:00:45,960
just run ghazal and you're done

00:00:43,829 --> 00:00:47,430
you know just import rules go you run

00:00:45,960 --> 00:00:49,410
gazelle generates all your build files

00:00:47,430 --> 00:00:51,390
and everything is fantastic it all works

00:00:49,410 --> 00:00:53,850
perfectly you're done you go home it was

00:00:51,390 --> 00:00:54,329
easy obviously that's not the whole

00:00:53,850 --> 00:00:56,789
story

00:00:54,329 --> 00:00:58,829
so all you know kind of expand and

00:00:56,789 --> 00:01:00,270
kubernetes in ticular is more than just

00:00:58,829 --> 00:01:02,190
to go binary and s'more it isn't just

00:01:00,270 --> 00:01:04,080
you go binaries it's a whole their whole

00:01:02,190 --> 00:01:06,330
distributed system and so you know sort

00:01:04,080 --> 00:01:09,240
of the process I've been working on is

00:01:06,330 --> 00:01:11,159
been making the whole build process and

00:01:09,240 --> 00:01:13,320
our whole set of artifacts that we need

00:01:11,159 --> 00:01:16,610
to build and produce and maintain and

00:01:13,320 --> 00:01:18,689
test using basil for all of those pieces

00:01:16,610 --> 00:01:20,549
so sort of the overview of kind of what

00:01:18,689 --> 00:01:22,619
I'm trying to go through today I will

00:01:20,549 --> 00:01:24,210
quickly go over kubernetes I think seems

00:01:22,619 --> 00:01:25,350
like based on talks I've heard most

00:01:24,210 --> 00:01:27,270
people here are pretty familiar with

00:01:25,350 --> 00:01:28,590
kubernetes and containers but if not

00:01:27,270 --> 00:01:30,689
I'll just kind of quickly give just a

00:01:28,590 --> 00:01:32,250
little overview of what those are just

00:01:30,689 --> 00:01:34,439
because that kind of sets up some of the

00:01:32,250 --> 00:01:35,640
ways we've approached problems

00:01:34,439 --> 00:01:37,710
the team has approached problems in the

00:01:35,640 --> 00:01:39,479
past I'll go over kind of how we

00:01:37,710 --> 00:01:40,680
currently do our bills our official

00:01:39,479 --> 00:01:43,439
build and how we have been doing builds

00:01:40,680 --> 00:01:45,390
for the last few years sort of a little

00:01:43,439 --> 00:01:47,310
story time of sort of being able to

00:01:45,390 --> 00:01:49,770
adapt those kind of weird idiosyncrasies

00:01:47,310 --> 00:01:51,570
in idiosyncrasies I can't say the word

00:01:49,770 --> 00:01:52,680
but you know what I mean adapting all

00:01:51,570 --> 00:01:55,259
the weird things that we're doing for

00:01:52,680 --> 00:01:57,360
our build into basil and the kind of

00:01:55,259 --> 00:01:58,469
what's currently working and then kind

00:01:57,360 --> 00:01:59,939
of some things that aren't working so

00:01:58,469 --> 00:02:03,329
well kind of problems we're still trying

00:01:59,939 --> 00:02:05,310
to face so just quick overview of

00:02:03,329 --> 00:02:07,489
Crimmins detainers so commodities is an

00:02:05,310 --> 00:02:10,170
open source container Orchestrator so

00:02:07,489 --> 00:02:11,580
basically if you have a cluster of nodes

00:02:10,170 --> 00:02:12,660
and you have a bunch of containers you

00:02:11,580 --> 00:02:14,700
want to run your micro service

00:02:12,660 --> 00:02:16,380
is kubernetes handles all the stuff for

00:02:14,700 --> 00:02:18,030
you it schedules or containers it does

00:02:16,380 --> 00:02:19,170
health checking there's a whole suite of

00:02:18,030 --> 00:02:20,550
things I'm not gonna really get into

00:02:19,170 --> 00:02:22,950
exactly what committees does because

00:02:20,550 --> 00:02:24,720
that can be its own hours long talk

00:02:22,950 --> 00:02:27,630
going into all sorts of details but

00:02:24,720 --> 00:02:28,830
what's relevant to this talk is you know

00:02:27,630 --> 00:02:31,890
it's basically it's like I said it's

00:02:28,830 --> 00:02:33,210
largely a go project but we have in just

00:02:31,890 --> 00:02:35,280
the core Koopmans repository there's a

00:02:33,210 --> 00:02:37,260
lot of shell for like well both the

00:02:35,280 --> 00:02:39,930
build as well as actually starting

00:02:37,260 --> 00:02:41,520
clusters and kind of all those things

00:02:39,930 --> 00:02:43,500
there's docker files to build all the

00:02:41,520 --> 00:02:45,240
things there's make files which we use

00:02:43,500 --> 00:02:46,680
for building a lot of components there's

00:02:45,240 --> 00:02:48,240
the ammo and JSON which we use to

00:02:46,680 --> 00:02:48,800
configure the containers that run on

00:02:48,240 --> 00:02:50,970
kubernetes

00:02:48,800 --> 00:02:54,840
and then if you start to look in some of

00:02:50,970 --> 00:02:56,310
the sibling repositories that kubernetes

00:02:54,840 --> 00:02:58,500
relies on as part of its components

00:02:56,310 --> 00:03:00,570
there's some JavaScript for like the

00:02:58,500 --> 00:03:02,790
dashboard in HTML there's salt from your

00:03:00,570 --> 00:03:04,590
dragon clusters there's Python for some

00:03:02,790 --> 00:03:06,090
of our infrastructure test

00:03:04,590 --> 00:03:07,680
infrastructure in particular so kind of

00:03:06,090 --> 00:03:09,060
there's a lot of different languages but

00:03:07,680 --> 00:03:11,730
it's largely you know at least the core

00:03:09,060 --> 00:03:13,710
parts or go it's on github

00:03:11,730 --> 00:03:15,210
I say it's mono Rico ish because

00:03:13,710 --> 00:03:18,209
currently there's the the core

00:03:15,210 --> 00:03:19,410
kubernetes repository is a mono repo but

00:03:18,209 --> 00:03:22,080
there are these kind of additional

00:03:19,410 --> 00:03:23,820
things additional components that are in

00:03:22,080 --> 00:03:25,980
separate repositories and our github

00:03:23,820 --> 00:03:27,360
organization and there is an effort

00:03:25,980 --> 00:03:28,560
underway to kind of start to split up

00:03:27,360 --> 00:03:29,790
the repository because we're running

00:03:28,560 --> 00:03:31,680
into all sorts of issues with

00:03:29,790 --> 00:03:33,570
development velocity having one single

00:03:31,680 --> 00:03:37,980
repository all this is causing its own

00:03:33,570 --> 00:03:39,300
challenges we have I'm actually wrote 25

00:03:37,980 --> 00:03:41,160
PRS per day that's only in the core

00:03:39,300 --> 00:03:43,890
repository we look across all of them

00:03:41,160 --> 00:03:45,270
it's much larger we have 500 org members

00:03:43,890 --> 00:03:47,340
which are people who are committed to

00:03:45,270 --> 00:03:48,840
that I've been committing to the project

00:03:47,340 --> 00:03:51,180
and actively engaged there's even more

00:03:48,840 --> 00:03:54,300
people who are you know still smithing

00:03:51,180 --> 00:03:56,790
pr's kind of getting used to it we have

00:03:54,300 --> 00:03:59,610
you know over 100 unique PR authors it

00:03:56,790 --> 00:04:01,020
per week in our budget or ease and on

00:03:59,610 --> 00:04:03,420
our slack channels I think the main

00:04:01,020 --> 00:04:05,610
community users channel has like 24,000

00:04:03,420 --> 00:04:06,959
people on it I don't think most of them

00:04:05,610 --> 00:04:08,700
talked that much because it would be

00:04:06,959 --> 00:04:09,900
impossible but there's a lot of people

00:04:08,700 --> 00:04:11,640
really engaged in this and really

00:04:09,900 --> 00:04:14,190
interested in kubernetes and seeing

00:04:11,640 --> 00:04:15,450
succeed and kind of come with with that

00:04:14,190 --> 00:04:17,669
we kind of have a bunch of people that

00:04:15,450 --> 00:04:20,910
are developing communities in very

00:04:17,669 --> 00:04:22,289
diverse environments so you know have a

00:04:20,910 --> 00:04:23,789
bunch of different Linux environments

00:04:22,289 --> 00:04:26,220
not just Ubuntu which is what basil

00:04:23,789 --> 00:04:28,110
likes a lot of people develop on

00:04:26,220 --> 00:04:30,480
Mac OS a lot of people use Mac OS but

00:04:28,110 --> 00:04:31,680
they'll actually build on a machine in

00:04:30,480 --> 00:04:33,780
the cloud or they'll do all sorts of

00:04:31,680 --> 00:04:35,940
other weird things and I'll get into

00:04:33,780 --> 00:04:36,960
more of that so kind of have people

00:04:35,940 --> 00:04:38,430
working on a lot of different things

00:04:36,960 --> 00:04:40,740
thankfully I'm not aware of a lot of

00:04:38,430 --> 00:04:41,730
people developing on Windows yet but I'm

00:04:40,740 --> 00:04:45,030
sure that's only a matter of time before

00:04:41,730 --> 00:04:46,770
that happens so just kind of a little

00:04:45,030 --> 00:04:48,900
overview of the idea behind containers

00:04:46,770 --> 00:04:50,520
if you're familiar with kind of the old

00:04:48,900 --> 00:04:53,700
way of handling things was that you sort

00:04:50,520 --> 00:04:55,830
of used VMs to segment applications and

00:04:53,700 --> 00:04:57,210
say you've created VM and you would kind

00:04:55,830 --> 00:04:59,310
of setup the OS as you need to put

00:04:57,210 --> 00:05:00,420
libraries in that VM and then all your

00:04:59,310 --> 00:05:02,130
apps we basically run in the same

00:05:00,420 --> 00:05:03,390
namespace and so sort of you kind of

00:05:02,130 --> 00:05:05,550
were stuck with the same libraries for

00:05:03,390 --> 00:05:08,190
all of those maintaining this was kind

00:05:05,550 --> 00:05:09,810
of difficult and upgrades were difficult

00:05:08,190 --> 00:05:11,100
it was just kind of very heavyweight and

00:05:09,810 --> 00:05:13,650
if you wanted separation you kind of had

00:05:11,100 --> 00:05:16,320
to create yams yams are slow to create

00:05:13,650 --> 00:05:17,790
and teardown is there's kind of a clunky

00:05:16,320 --> 00:05:20,550
way of handling things so containers are

00:05:17,790 --> 00:05:21,990
kind of this new idea where you you

00:05:20,550 --> 00:05:24,000
basically just package up your

00:05:21,990 --> 00:05:25,440
application libraries you need only for

00:05:24,000 --> 00:05:26,910
that and so you have an idea of these

00:05:25,440 --> 00:05:28,470
like lightweight containers that have

00:05:26,910 --> 00:05:30,540
only the things that your app needs and

00:05:28,470 --> 00:05:31,620
so kind of what I've sort of implied

00:05:30,540 --> 00:05:33,390
with some of the colors here is that

00:05:31,620 --> 00:05:35,370
like you have different containers with

00:05:33,390 --> 00:05:38,820
different dependencies in them and so

00:05:35,370 --> 00:05:40,680
that you know that lets you basically

00:05:38,820 --> 00:05:42,390
you can replace things easily and then

00:05:40,680 --> 00:05:47,370
you've got isolation between containers

00:05:42,390 --> 00:05:49,080
so you don't have to just do you get

00:05:47,370 --> 00:05:50,729
isolation so it kind of makes management

00:05:49,080 --> 00:05:53,280
a lot easier and so Cooper names kind of

00:05:50,729 --> 00:05:55,919
builds on these concepts and so you know

00:05:53,280 --> 00:05:57,169
kind of it's still pretty simplified but

00:05:55,919 --> 00:05:59,040
you can you know start to think okay now

00:05:57,169 --> 00:06:00,750
approaching more like renée's cluster

00:05:59,040 --> 00:06:02,130
you know you have multiple hosts you can

00:06:00,750 --> 00:06:04,700
create networks between the various

00:06:02,130 --> 00:06:08,010
hosts you can create networks inside

00:06:04,700 --> 00:06:09,750
inside a single host you have volumes

00:06:08,010 --> 00:06:12,330
you can attach to these if you need like

00:06:09,750 --> 00:06:14,010
forces and storage and other things and

00:06:12,330 --> 00:06:15,479
so kind of this gets much much more

00:06:14,010 --> 00:06:17,160
complicated and so kubernetes kind of

00:06:15,479 --> 00:06:18,320
handles all these things for you but

00:06:17,160 --> 00:06:20,960
that's kind of like where you know

00:06:18,320 --> 00:06:23,400
kubernetes approaches sorts of things so

00:06:20,960 --> 00:06:24,270
various components this is only a subset

00:06:23,400 --> 00:06:25,979
of some of the things some of the

00:06:24,270 --> 00:06:30,840
outputs that we build from a core

00:06:25,979 --> 00:06:31,979
kubernetes cluster excuse me um so we

00:06:30,840 --> 00:06:33,840
have like in committees master which

00:06:31,979 --> 00:06:38,340
sort of manage the cluster and so

00:06:33,840 --> 00:06:40,260
there's basically the

00:06:38,340 --> 00:06:41,730
what I'm showing here in this picture

00:06:40,260 --> 00:06:43,080
basically is things that are like kind

00:06:41,730 --> 00:06:46,080
of the double circles or the double

00:06:43,080 --> 00:06:47,220
double oval squares here that's kind of

00:06:46,080 --> 00:06:49,770
indicating something that's docker iced

00:06:47,220 --> 00:06:52,020
whereas other things run just directly

00:06:49,770 --> 00:06:54,120
on the host so for example cubelet and

00:06:52,020 --> 00:06:56,479
docker run on all the machines cubelet

00:06:54,120 --> 00:06:58,760
is kind of the thing that manages docker

00:06:56,479 --> 00:07:00,510
containers running on those machines

00:06:58,760 --> 00:07:01,770
doctors would actually enter than

00:07:00,510 --> 00:07:03,210
panners itself some kind of cubelet

00:07:01,770 --> 00:07:05,970
talks to the api server to figure out

00:07:03,210 --> 00:07:07,500
what needs to be run and so then the

00:07:05,970 --> 00:07:09,150
rest Kahuna's components actually run

00:07:07,500 --> 00:07:09,960
inside the kubernetes cluster itself so

00:07:09,150 --> 00:07:11,130
there's kind of this bootstrapping

00:07:09,960 --> 00:07:12,479
process but like a lot of these

00:07:11,130 --> 00:07:14,520
components are basically all running

00:07:12,479 --> 00:07:16,350
inside the kubernetes cluster so you

00:07:14,520 --> 00:07:17,760
know we're very heavily everything is

00:07:16,350 --> 00:07:21,150
containerize except for like the very

00:07:17,760 --> 00:07:23,520
bare metal or base stuff that can't run

00:07:21,150 --> 00:07:24,750
inside that and so like you know some of

00:07:23,520 --> 00:07:28,350
the things in dark green are kind of

00:07:24,750 --> 00:07:29,639
part of the core kubernetes distribution

00:07:28,350 --> 00:07:31,560
but then there's like other things like

00:07:29,639 --> 00:07:34,200
cube addon manager is kind of in a

00:07:31,560 --> 00:07:35,610
separate build process the cube dns

00:07:34,200 --> 00:07:37,560
isn't a completely separate repository

00:07:35,610 --> 00:07:38,940
and so it has its own build process at

00:07:37,560 --> 00:07:41,070
CD is something we depend on is a

00:07:38,940 --> 00:07:42,570
third-party dependency we work with them

00:07:41,070 --> 00:07:45,479
it's produced by core OS but it's not

00:07:42,570 --> 00:07:46,710
part of our build process simply

00:07:45,479 --> 00:07:48,539
crudités dashboard is another thing

00:07:46,710 --> 00:07:49,770
that's another kind of accessory

00:07:48,539 --> 00:07:51,630
components these are kind of all things

00:07:49,770 --> 00:07:53,400
that run on Cabrini's clusters but

00:07:51,630 --> 00:07:55,349
they're all kind of in separate build

00:07:53,400 --> 00:07:57,930
systems Enterprise Ataris in different

00:07:55,349 --> 00:07:59,340
ways and then on the bottom there I have

00:07:57,930 --> 00:08:02,880
kind of some client binaries so these

00:07:59,340 --> 00:08:04,139
are the ways that users of cumin A's

00:08:02,880 --> 00:08:06,270
might interact with their clusters so

00:08:04,139 --> 00:08:07,860
you have queue beat'em I have a funny

00:08:06,270 --> 00:08:09,270
pronunciation which is a tool you can

00:08:07,860 --> 00:08:11,729
use to start up clusters or queue

00:08:09,270 --> 00:08:14,280
Bechdel how you basically create jobs

00:08:11,729 --> 00:08:15,810
manage jobs and then like we have a we

00:08:14,280 --> 00:08:17,550
test binaries that we run against

00:08:15,810 --> 00:08:20,940
clusters developers run to make sure

00:08:17,550 --> 00:08:23,039
that committees clusters are working so

00:08:20,940 --> 00:08:25,229
how we got a handle list with the non

00:08:23,039 --> 00:08:26,700
basil process so more background for

00:08:25,229 --> 00:08:29,760
those of you not familiar with go build

00:08:26,700 --> 00:08:31,710
system basically go bill our go was

00:08:29,760 --> 00:08:34,110
created I don't know ten years ago or so

00:08:31,710 --> 00:08:36,539
and I suspect it kind of you know used a

00:08:34,110 --> 00:08:39,000
lot of the concepts that had been kind

00:08:36,539 --> 00:08:40,440
of thought about inside Google with ways

00:08:39,000 --> 00:08:42,180
and some of the build systems there and

00:08:40,440 --> 00:08:43,740
so they tried I've tried plus other

00:08:42,180 --> 00:08:45,839
other technologies and other things that

00:08:43,740 --> 00:08:49,170
kind of come about since the days of C

00:08:45,839 --> 00:08:52,230
and C++ and so I have a pretty

00:08:49,170 --> 00:08:54,000
sophisticated build system or

00:08:52,230 --> 00:08:55,800
it's fairly sophisticated obviously not

00:08:54,000 --> 00:08:58,380
you know this kid is basil but at least

00:08:55,800 --> 00:09:00,149
for a go native go code it's has a lot

00:08:58,380 --> 00:09:02,040
of stuff that comes with it so basically

00:09:00,149 --> 00:09:03,240
you can just say go build and inside the

00:09:02,040 --> 00:09:05,399
go files you have all your dependencies

00:09:03,240 --> 00:09:06,300
you need and so it basically knows how

00:09:05,399 --> 00:09:07,860
to build that you know how to really

00:09:06,300 --> 00:09:09,470
tell anything more it just knows how to

00:09:07,860 --> 00:09:12,300
build it knows what it needs to build

00:09:09,470 --> 00:09:13,940
and then go install basically well not

00:09:12,300 --> 00:09:16,050
only compiled things but also will

00:09:13,940 --> 00:09:19,529
install them to your go path bin

00:09:16,050 --> 00:09:20,970
directory you have a tool called go get

00:09:19,529 --> 00:09:23,430
where you can say something like go get

00:09:20,970 --> 00:09:25,589
it hub comm /xd slash blah blah blah

00:09:23,430 --> 00:09:27,930
it'll basically go and download that

00:09:25,589 --> 00:09:29,970
package build it install it so this is a

00:09:27,930 --> 00:09:31,740
way you can very easily download tools

00:09:29,970 --> 00:09:33,839
and things like that

00:09:31,740 --> 00:09:36,149
go test runs test it's very

00:09:33,839 --> 00:09:38,220
straightforward go format will format

00:09:36,149 --> 00:09:41,790
codes so there's a basically an opinion

00:09:38,220 --> 00:09:43,560
formatting built in to go you up go run

00:09:41,790 --> 00:09:45,139
which is a lot like basil run will build

00:09:43,560 --> 00:09:48,540
it and then run whatever that command is

00:09:45,139 --> 00:09:50,430
and then go generate which is a way of

00:09:48,540 --> 00:09:52,560
being able to generate code with go

00:09:50,430 --> 00:09:55,320
where you sort of in your comments and

00:09:52,560 --> 00:09:57,149
go files indicate some shell commands or

00:09:55,320 --> 00:09:59,970
something you would run so here on Joe

00:09:57,149 --> 00:10:01,170
generate and some source file would

00:09:59,970 --> 00:10:02,100
actually look at that source file figure

00:10:01,170 --> 00:10:05,190
out what it needs to do and then

00:10:02,100 --> 00:10:06,839
generate that code unfortunately go

00:10:05,190 --> 00:10:09,000
generates not kind of chained as part of

00:10:06,839 --> 00:10:10,079
something so if you have a go dependency

00:10:09,000 --> 00:10:11,550
that depends on something that's go

00:10:10,079 --> 00:10:13,350
dinner eight you have to generate it

00:10:11,550 --> 00:10:14,490
first and then go build there's not kind

00:10:13,350 --> 00:10:17,070
of any sort of chaining there and that's

00:10:14,490 --> 00:10:18,600
one difficulty with that

00:10:17,070 --> 00:10:19,980
another thing is go has a very

00:10:18,600 --> 00:10:22,019
opinionated way you're supposed to

00:10:19,980 --> 00:10:23,339
structure your directory treat so you

00:10:22,019 --> 00:10:24,420
create a go path you can put the go path

00:10:23,339 --> 00:10:25,949
wherever you want and then you set an

00:10:24,420 --> 00:10:28,199
environment variable called go path and

00:10:25,949 --> 00:10:29,760
so inside there there is a go pass slash

00:10:28,199 --> 00:10:31,260
bin which is where all your dependents

00:10:29,760 --> 00:10:33,540
are everything you've built all your

00:10:31,260 --> 00:10:35,220
binaries will get put in there you have

00:10:33,540 --> 00:10:37,319
package which is where sort of the

00:10:35,220 --> 00:10:39,209
intermediate libraries that are built

00:10:37,319 --> 00:10:41,490
and object code go and then go past

00:10:39,209 --> 00:10:43,220
source and that's where all your source

00:10:41,490 --> 00:10:46,290
goes and it's kind of organized in this

00:10:43,220 --> 00:10:48,000
URL format so like you know github.com

00:10:46,290 --> 00:10:50,040
slash project one so basically if you

00:10:48,000 --> 00:10:51,839
have a git repository that's in github

00:10:50,040 --> 00:10:54,000
project one you would live under go past

00:10:51,839 --> 00:10:55,889
source that some of you have like hits

00:10:54,000 --> 00:10:58,680
do kubernetes testing for other things

00:10:55,889 --> 00:11:00,120
under there and so basically you put all

00:10:58,680 --> 00:11:01,819
your code inside the go path and then

00:11:00,120 --> 00:11:04,019
you can basically refer to it you'd

00:11:01,819 --> 00:11:05,960
import these like I would import case

00:11:04,019 --> 00:11:07,760
Tadeo slash kubernetes slash

00:11:05,960 --> 00:11:09,320
some package whatever and go would know

00:11:07,760 --> 00:11:13,940
to look in the go path on right place to

00:11:09,320 --> 00:11:16,310
pick up that dependency so around the go

00:11:13,940 --> 00:11:18,830
I think it was one five or one six or so

00:11:16,310 --> 00:11:22,370
they introduced a formal way of vendor

00:11:18,830 --> 00:11:23,540
encode native to go previously I'll get

00:11:22,370 --> 00:11:25,280
to in a minute there was a previous

00:11:23,540 --> 00:11:27,890
previous to vendor there are other ways

00:11:25,280 --> 00:11:30,140
of handling this but basically in your

00:11:27,890 --> 00:11:32,480
basic workspace so like in case audio /

00:11:30,140 --> 00:11:34,580
kubernetes I have a vendor directory and

00:11:32,480 --> 00:11:36,440
inside there I basically put all the

00:11:34,580 --> 00:11:38,900
sources I need that I depend on that

00:11:36,440 --> 00:11:40,190
third-party dependencies and so I kind

00:11:38,900 --> 00:11:44,080
of had an example here like some things

00:11:40,190 --> 00:11:44,080
that might exist in the communities one

00:11:44,200 --> 00:11:48,850
so managing this vendor directory there

00:11:47,240 --> 00:11:52,280
are many different ways of doing that

00:11:48,850 --> 00:11:54,440
very first one I list here go DEP which

00:11:52,280 --> 00:11:55,940
is one word is not an official go

00:11:54,440 --> 00:11:58,910
project it's I think it's a project from

00:11:55,940 --> 00:12:00,860
github and this used to be before vendor

00:11:58,910 --> 00:12:02,600
was a thing there was a tool called

00:12:00,860 --> 00:12:04,430
there was go dap and it would create a

00:12:02,600 --> 00:12:06,560
go depths directory in your workspace

00:12:04,430 --> 00:12:08,690
and basically when you built you either

00:12:06,560 --> 00:12:11,390
wrapped a go build or a go test or

00:12:08,690 --> 00:12:13,250
whatever with go depth-first and we

00:12:11,390 --> 00:12:15,200
basically would munch your go path

00:12:13,250 --> 00:12:16,610
environment variable to point to

00:12:15,200 --> 00:12:18,440
everything that's in the go depths you

00:12:16,610 --> 00:12:20,330
could also extract or copy everything

00:12:18,440 --> 00:12:21,950
that was from your go depths into your

00:12:20,330 --> 00:12:25,070
actual go path it was kind of a huge

00:12:21,950 --> 00:12:26,960
pain to maintain this so sort of been

00:12:25,070 --> 00:12:28,670
during kind of at least solidified or at

00:12:26,960 --> 00:12:29,780
least formalize the way that go could

00:12:28,670 --> 00:12:31,760
natively handled these splintering

00:12:29,780 --> 00:12:34,610
things there other tools there's glide

00:12:31,760 --> 00:12:36,560
there's a go depth which is from the go

00:12:34,610 --> 00:12:38,600
team does a newer thing

00:12:36,560 --> 00:12:40,790
currently Kerber Nettie's uses go dap

00:12:38,600 --> 00:12:42,350
the first one our test in for repository

00:12:40,790 --> 00:12:44,150
we recently switched to go dap the

00:12:42,350 --> 00:12:45,740
second one there are other ways of doing

00:12:44,150 --> 00:12:46,940
it in some cases these can be super

00:12:45,740 --> 00:12:49,280
frustrating people just kind of like

00:12:46,940 --> 00:12:50,450
manually manage all of them and just

00:12:49,280 --> 00:12:53,630
copy files directly into the fender

00:12:50,450 --> 00:12:55,910
directory it's not a great story but

00:12:53,630 --> 00:12:57,650
that's kind of how it is it's still kind

00:12:55,910 --> 00:13:00,650
of evolving like I said go when five was

00:12:57,650 --> 00:13:01,880
a year or two ago and so I think it was

00:13:00,650 --> 00:13:08,030
turned out my default in one seven one

00:13:01,880 --> 00:13:09,590
six one seven I can't know exactly so

00:13:08,030 --> 00:13:12,440
some other things the go build system

00:13:09,590 --> 00:13:14,650
you can kind of control various ways go

00:13:12,440 --> 00:13:16,550
operates and the outputs you get by

00:13:14,650 --> 00:13:19,520
specifying environment valuables when

00:13:16,550 --> 00:13:22,730
you run the various go tools so Cu and

00:13:19,520 --> 00:13:24,650
so Sego is a way that you can link go

00:13:22,730 --> 00:13:27,410
code against see libraries and see code

00:13:24,650 --> 00:13:29,150
and so there's like a way basically in

00:13:27,410 --> 00:13:30,710
your go program your ghost sources you

00:13:29,150 --> 00:13:32,300
if you like have a certain way of

00:13:30,710 --> 00:13:34,400
writing your code you're now depending

00:13:32,300 --> 00:13:36,530
on some C code and you would link

00:13:34,400 --> 00:13:38,120
against that if you want to sort of a

00:13:36,530 --> 00:13:39,830
lot of libraries a lot like for example

00:13:38,120 --> 00:13:41,720
the ego standard library has some Seco

00:13:39,830 --> 00:13:43,670
dependencies but there are ways you can

00:13:41,720 --> 00:13:45,170
sort of get back to a pure go mode and

00:13:43,670 --> 00:13:47,180
so you specify this environment variable

00:13:45,170 --> 00:13:49,430
C you enable to go zero what will force

00:13:47,180 --> 00:13:50,960
you to the pure go mode similar if you

00:13:49,430 --> 00:13:53,300
want to well not similarly but if you

00:13:50,960 --> 00:13:55,400
wish to cross build there's goose and

00:13:53,300 --> 00:13:57,920
Gorch which you can specify to basically

00:13:55,400 --> 00:14:00,620
specify the the OS or the architecture

00:13:57,920 --> 00:14:01,880
that your you're targeting and similarly

00:14:00,620 --> 00:14:03,110
like if you want to do some weird things

00:14:01,880 --> 00:14:04,280
like you have a separate go route but

00:14:03,110 --> 00:14:06,080
like you have a separate go installation

00:14:04,280 --> 00:14:07,850
somewhere you can change your go route

00:14:06,080 --> 00:14:09,050
which will basically point where the

00:14:07,850 --> 00:14:14,810
standard library and other things you

00:14:09,050 --> 00:14:17,300
need to use are and so so far so that's

00:14:14,810 --> 00:14:18,830
kind of background roughly of sort of at

00:14:17,300 --> 00:14:20,450
least kind of kubernetes containers and

00:14:18,830 --> 00:14:22,280
overall this kind of how go builds work

00:14:20,450 --> 00:14:25,130
just as a little bit of background that

00:14:22,280 --> 00:14:26,630
I've used up like half my time so so

00:14:25,130 --> 00:14:28,250
basically so the built in puts for

00:14:26,630 --> 00:14:30,740
kubernetes obviously have ghost sources

00:14:28,250 --> 00:14:32,300
we have like the data files I mentioned

00:14:30,740 --> 00:14:35,630
so like the salt scripts and gamma files

00:14:32,300 --> 00:14:37,040
and JSON things those kind of all are

00:14:35,630 --> 00:14:39,020
kind of inputs to our build they're all

00:14:37,040 --> 00:14:41,440
in our repository we have various docker

00:14:39,020 --> 00:14:44,510
base images so we have like the upstream

00:14:41,440 --> 00:14:46,610
docker hub busybox we use for some of

00:14:44,510 --> 00:14:48,530
our images mostly use busybox just for

00:14:46,610 --> 00:14:49,850
debugging it's nicer if you can actually

00:14:48,530 --> 00:14:53,720
connect into a container to look and see

00:14:49,850 --> 00:14:55,390
what's going on we also have the cube

00:14:53,720 --> 00:14:58,940
proxy one of our components requires

00:14:55,390 --> 00:15:00,500
modifying IP tables on the hosts and so

00:14:58,940 --> 00:15:02,510
basically we need a container that has

00:15:00,500 --> 00:15:04,340
IP tables in it and the easiest way to

00:15:02,510 --> 00:15:05,960
get IP tables is based on debian so we

00:15:04,340 --> 00:15:08,300
have a Debian based image that has IP

00:15:05,960 --> 00:15:10,910
tables installed it already we create

00:15:08,300 --> 00:15:12,470
these base images mostly for efficiency

00:15:10,910 --> 00:15:14,750
when building all of our containers

00:15:12,470 --> 00:15:16,370
because if you have to download and then

00:15:14,750 --> 00:15:18,800
app get install IP tables that this is

00:15:16,370 --> 00:15:21,110
very slow so kind of having these just

00:15:18,800 --> 00:15:22,490
statically helps a lot and then we also

00:15:21,110 --> 00:15:24,410
have this cross build image which I'll

00:15:22,490 --> 00:15:26,510
get to in a minute basically is kind of

00:15:24,410 --> 00:15:28,370
based on the going image but involves a

00:15:26,510 --> 00:15:30,230
lot of extra cross tools that we need be

00:15:28,370 --> 00:15:32,720
able to cross build a bunch of different

00:15:30,230 --> 00:15:33,190
targets and then kind of the other input

00:15:32,720 --> 00:15:36,240
is like what

00:15:33,190 --> 00:15:39,460
actually on a build or test and what I

00:15:36,240 --> 00:15:42,040
saw was you should target so the outputs

00:15:39,460 --> 00:15:43,720
so you know very basic part which you

00:15:42,040 --> 00:15:45,220
know is really for this talk is go

00:15:43,720 --> 00:15:46,630
binaries it's a little more complicated

00:15:45,220 --> 00:15:48,640
though because we basically want to

00:15:46,630 --> 00:15:51,070
target almost every single platform that

00:15:48,640 --> 00:15:52,120
go supports so we support you probably

00:15:51,070 --> 00:15:53,110
can't even read that but it's like a

00:15:52,120 --> 00:15:55,420
whole bunch of different Linux

00:15:53,110 --> 00:15:58,600
architectures we also support Darwin we

00:15:55,420 --> 00:16:00,610
also support Windows some of these we

00:15:58,600 --> 00:16:01,750
use in peer go mode not all of them so

00:16:00,610 --> 00:16:03,460
some of them dynamically linked to be

00:16:01,750 --> 00:16:07,270
paroled in C code some of them we don't

00:16:03,460 --> 00:16:09,340
kind of a mix we also then build docker

00:16:07,270 --> 00:16:10,840
images for all of these well not all of

00:16:09,340 --> 00:16:12,070
these images but docker images for a lot

00:16:10,840 --> 00:16:14,380
of these images or for a lot of these

00:16:12,070 --> 00:16:16,210
binaries along the server binaries and

00:16:14,380 --> 00:16:18,580
then we basically have docker images for

00:16:16,210 --> 00:16:21,790
each architecture of those binaries and

00:16:18,580 --> 00:16:23,320
we save those as docker tar files as

00:16:21,790 --> 00:16:26,890
well that we can side load in addition

00:16:23,320 --> 00:16:28,240
to pushing them to a docker registry and

00:16:26,890 --> 00:16:30,220
then we basically take all these outputs

00:16:28,240 --> 00:16:32,500
and a lot of these configuration files

00:16:30,220 --> 00:16:34,360
and other things and we compile them

00:16:32,500 --> 00:16:37,180
into Tarbell's that we then upload to

00:16:34,360 --> 00:16:39,340
Google Cloud storage and some of these

00:16:37,180 --> 00:16:40,690
are at our platform agnostic where

00:16:39,340 --> 00:16:42,730
they're just like shell scripts or the

00:16:40,690 --> 00:16:44,710
tests which are strangely all our

00:16:42,730 --> 00:16:46,510
pictures in one but a lot of them we've

00:16:44,710 --> 00:16:48,760
basically separated out into separate

00:16:46,510 --> 00:16:51,130
platforms it's like we have a goober

00:16:48,760 --> 00:16:53,740
native server table all for Linux arm

00:16:51,130 --> 00:16:56,920
for Linux amd64 from the next to be 64

00:16:53,740 --> 00:16:59,950
le etc and so kind of we have all those

00:16:56,920 --> 00:17:02,170
we initially then also build our PMS and

00:16:59,950 --> 00:17:04,030
Debbie and it's one of these components

00:17:02,170 --> 00:17:05,980
these are not currently actually part of

00:17:04,030 --> 00:17:07,839
our core build system but it's something

00:17:05,980 --> 00:17:12,220
we'd like to be able to do as part of

00:17:07,839 --> 00:17:13,569
our core build so kind of you know it

00:17:12,220 --> 00:17:15,189
may be obvious just from a list of

00:17:13,569 --> 00:17:17,020
outputs but kind of they go tools by

00:17:15,189 --> 00:17:19,540
themselves are really not giving us

00:17:17,020 --> 00:17:22,630
everything we need one problem is that

00:17:19,540 --> 00:17:24,610
as we go versions are constantly

00:17:22,630 --> 00:17:26,620
updating the burdens of go that people

00:17:24,610 --> 00:17:27,880
have on their workstations may not

00:17:26,620 --> 00:17:30,250
necessarily be the same may not be

00:17:27,880 --> 00:17:31,840
correct so if we want to be able to sort

00:17:30,250 --> 00:17:33,580
of always be using the same go version

00:17:31,840 --> 00:17:35,650
which have different features I'm a

00:17:33,580 --> 00:17:36,850
security fixes and so forth we need to

00:17:35,650 --> 00:17:39,490
be able to kind of ensure their ones

00:17:36,850 --> 00:17:40,960
using the same version of go and you

00:17:39,490 --> 00:17:42,910
know similarly like we need to be able

00:17:40,960 --> 00:17:44,950
to we want to make sure you know that's

00:17:42,910 --> 00:17:46,060
you know we're all diesel equal here we

00:17:44,950 --> 00:17:46,700
know you want to have hermetic and

00:17:46,060 --> 00:17:47,960
Rudi's a little bit

00:17:46,700 --> 00:17:50,030
andgo doesn't really give you that by

00:17:47,960 --> 00:17:52,760
default especially another thing is like

00:17:50,030 --> 00:17:54,290
go paths can leak and so depending what

00:17:52,760 --> 00:17:55,970
you have in your go path you may be

00:17:54,290 --> 00:17:57,500
pulling in extra dependencies you don't

00:17:55,970 --> 00:17:59,540
know about or the wrong version

00:17:57,500 --> 00:18:01,370
dependencies vendor has helped a bit

00:17:59,540 --> 00:18:03,260
with this but if you forget to put

00:18:01,370 --> 00:18:05,630
something in vendor you have in your go

00:18:03,260 --> 00:18:07,430
path it'll build fine now if you upload

00:18:05,630 --> 00:18:09,050
it up and you submit a patch and it goes

00:18:07,430 --> 00:18:10,700
in we don't have an or vendor now the

00:18:09,050 --> 00:18:12,740
builds gonna break because you have that

00:18:10,700 --> 00:18:15,650
fancy locally but we don't have it so

00:18:12,740 --> 00:18:20,330
you know we kind of need to be able to

00:18:15,650 --> 00:18:22,190
wrap that and our meta size that another

00:18:20,330 --> 00:18:24,470
thing is basically for a lot of our CI

00:18:22,190 --> 00:18:25,970
the go tools are kind of great for

00:18:24,470 --> 00:18:27,950
humans but if you want to be able to

00:18:25,970 --> 00:18:29,600
machine parse or kind of get test

00:18:27,950 --> 00:18:32,270
results trending for example you want to

00:18:29,600 --> 00:18:34,220
see like you know know exactly which

00:18:32,270 --> 00:18:35,990
tests failed and be able to like create

00:18:34,220 --> 00:18:38,480
pretty graphs on Jenkins or other CI

00:18:35,990 --> 00:18:40,310
systems like that it's not you have to

00:18:38,480 --> 00:18:41,860
like parse the machine output which is

00:18:40,310 --> 00:18:43,820
constantly changing which is not great

00:18:41,860 --> 00:18:47,450
so we're basically using we actually

00:18:43,820 --> 00:18:49,820
have a tool which we're using a tool

00:18:47,450 --> 00:18:51,440
somebody wrote which well read that

00:18:49,820 --> 00:18:52,820
output and kind of create a JUnit file

00:18:51,440 --> 00:18:54,860
we can use and so we have scripts that

00:18:52,820 --> 00:18:56,060
kind of do all that and do in a parallel

00:18:54,860 --> 00:18:57,170
way and support code coverage and all

00:18:56,060 --> 00:18:59,240
sorts of other things and it's kind of

00:18:57,170 --> 00:19:01,400
this huge hairy mess of stuff that wraps

00:18:59,240 --> 00:19:03,800
around it and I already touched on as

00:19:01,400 --> 00:19:05,780
well but generating code is also you

00:19:03,800 --> 00:19:07,100
know not really built into the go build

00:19:05,780 --> 00:19:09,560
process and something you have to handle

00:19:07,100 --> 00:19:17,150
outside of that and so that's you know

00:19:09,560 --> 00:19:19,400
runs into problems so you know kind of I

00:19:17,150 --> 00:19:21,950
guess because we have some old C C++

00:19:19,400 --> 00:19:24,290
programmers on the team the overall

00:19:21,950 --> 00:19:25,880
basically interface that everyone uses

00:19:24,290 --> 00:19:28,280
or at least that the main interface is

00:19:25,880 --> 00:19:30,980
to make there's actually a lot of shell

00:19:28,280 --> 00:19:32,300
in behind the make I wrote here you know

00:19:30,980 --> 00:19:34,310
seventeen thousand lines of code it's

00:19:32,300 --> 00:19:36,860
not all part of the make process but for

00:19:34,310 --> 00:19:37,820
a lot of other various things there's

00:19:36,860 --> 00:19:39,710
just a lot of shell in our repository

00:19:37,820 --> 00:19:41,210
and so you know it's kind of a nice

00:19:39,710 --> 00:19:42,430
interface you can say if you just do

00:19:41,210 --> 00:19:45,410
make it was basically build everything

00:19:42,430 --> 00:19:47,110
can you make what equals command Q

00:19:45,410 --> 00:19:49,850
Bechdel it'll just build that component

00:19:47,110 --> 00:19:52,670
make test will you know run those tests

00:19:49,850 --> 00:19:54,740
that's in that package verify runs a

00:19:52,670 --> 00:19:56,810
whole bunch of verify checks and lit

00:19:54,740 --> 00:19:58,280
checks which I'll get to in a minute and

00:19:56,810 --> 00:20:00,710
then there's make release and make

00:19:58,280 --> 00:20:03,409
release which are base

00:20:00,710 --> 00:20:05,029
eclis are ways of building the whole

00:20:03,409 --> 00:20:06,380
release and so is post just building one

00:20:05,029 --> 00:20:09,679
more component it builds it in a

00:20:06,380 --> 00:20:11,240
hermetic fashion quick release is like

00:20:09,679 --> 00:20:13,250
maker least accepted only targets linux

00:20:11,240 --> 00:20:15,409
aim be 64 because building all those are

00:20:13,250 --> 00:20:19,100
all those platforms is very slow and the

00:20:15,409 --> 00:20:20,630
mclean is hopefully obvious so what does

00:20:19,100 --> 00:20:23,299
make release actually do how do we sort

00:20:20,630 --> 00:20:28,010
of achieve this chromatic ish build

00:20:23,299 --> 00:20:31,070
without basel so first well it's all

00:20:28,010 --> 00:20:32,539
driven by shell scripts of course so

00:20:31,070 --> 00:20:33,830
first we set up the build container so

00:20:32,539 --> 00:20:35,390
basically you know again getting back to

00:20:33,830 --> 00:20:36,470
this everything in kubernetes we think

00:20:35,390 --> 00:20:39,890
containers so we set up a build

00:20:36,470 --> 00:20:42,649
container using our cross bolt image we

00:20:39,890 --> 00:20:43,850
then we are sync all of our sources into

00:20:42,649 --> 00:20:49,669
this and get everything into the right

00:20:43,850 --> 00:20:51,110
go path and then we basically have a

00:20:49,669 --> 00:20:52,549
list of things we want to build so we go

00:20:51,110 --> 00:20:54,080
install which is faster or we'll build

00:20:52,549 --> 00:20:56,779
which is slower depending on sort of

00:20:54,080 --> 00:20:57,399
whether you know the environment is

00:20:56,779 --> 00:21:00,049
correct

00:20:57,399 --> 00:21:00,980
we then arcing everything back out of

00:21:00,049 --> 00:21:03,140
the build container after we've done

00:21:00,980 --> 00:21:05,360
these builds which takes you know 10

00:21:03,140 --> 00:21:07,429
minutes at least per architecture and

00:21:05,360 --> 00:21:09,470
then then we go when you build all of

00:21:07,429 --> 00:21:11,510
our docker images and save and then we

00:21:09,470 --> 00:21:14,779
go and we create our tarballs so super

00:21:11,510 --> 00:21:16,340
easy and great so yeah i was just

00:21:14,779 --> 00:21:17,510
mentioning the the cross hold image so

00:21:16,340 --> 00:21:19,039
basically we version this with

00:21:17,510 --> 00:21:21,500
kubernetes release because of its

00:21:19,039 --> 00:21:24,649
certain criminal lease was usually built

00:21:21,500 --> 00:21:26,059
with a particular version of go and so

00:21:24,649 --> 00:21:28,730
we basically take the building image we

00:21:26,059 --> 00:21:30,200
pre compiled the go standard lid for all

00:21:28,730 --> 00:21:30,940
the various architectures without when

00:21:30,200 --> 00:21:33,770
pure godmode

00:21:30,940 --> 00:21:36,289
we had in the protocol buffer compiler

00:21:33,770 --> 00:21:38,360
we create cross build tools we have to

00:21:36,289 --> 00:21:39,500
install those and like oh there's some

00:21:38,360 --> 00:21:41,809
other various things that we use in some

00:21:39,500 --> 00:21:43,460
of our unit tests and so basically this

00:21:41,809 --> 00:21:44,960
is a way without this you'd sort of have

00:21:43,460 --> 00:21:46,549
to be building a little stuff every time

00:21:44,960 --> 00:21:49,610
you build or something that's just ends

00:21:46,549 --> 00:21:51,830
up being very slow um so obviously this

00:21:49,610 --> 00:21:54,200
is kind of a little of a mess make files

00:21:51,830 --> 00:21:55,460
there you know i didn't even really get

00:21:54,200 --> 00:21:56,720
into the make files but there's make

00:21:55,460 --> 00:21:59,600
files for generating code that are

00:21:56,720 --> 00:22:00,890
hundreds or a thousand one long there's

00:21:59,600 --> 00:22:03,559
even more shell scripts to do all sorts

00:22:00,890 --> 00:22:05,360
of terrifying things it's you know

00:22:03,559 --> 00:22:07,039
incremental builds are really slow

00:22:05,360 --> 00:22:09,770
i think you know if we just do a make

00:22:07,039 --> 00:22:12,110
what equals blah outside without using

00:22:09,770 --> 00:22:13,549
the cross build container it's fairly

00:22:12,110 --> 00:22:14,360
fast and fairly uncommon tool but if

00:22:13,549 --> 00:22:16,520
you're trying to do

00:22:14,360 --> 00:22:19,490
a release what you need basically in

00:22:16,520 --> 00:22:21,080
order to build a cluster this takes even

00:22:19,490 --> 00:22:23,110
a no op will take like five minutes to

00:22:21,080 --> 00:22:26,450
do nothing basically so that's not great

00:22:23,110 --> 00:22:28,940
build the Mac OS kind of work the are

00:22:26,450 --> 00:22:30,890
sinking bit here that I mentioned was at

00:22:28,940 --> 00:22:33,530
least partially for supporting Mac OS

00:22:30,890 --> 00:22:35,450
because apparently at least at one point

00:22:33,530 --> 00:22:37,130
in time the volume driver on Mac was

00:22:35,450 --> 00:22:40,160
kind of slow and additionally some

00:22:37,130 --> 00:22:41,600
developers would have a docker instance

00:22:40,160 --> 00:22:43,100
that was in a BM in a cloud or something

00:22:41,600 --> 00:22:44,270
and so they basically wanted to use this

00:22:43,100 --> 00:22:45,830
are sinking to get their code up there

00:22:44,270 --> 00:22:48,950
to build their because their Mac was

00:22:45,830 --> 00:22:50,270
slower or something but you end up with

00:22:48,950 --> 00:22:53,390
all this extra complexity that becomes

00:22:50,270 --> 00:22:54,470
super difficult to debug another thing

00:22:53,390 --> 00:22:56,770
is that we wanted to issues they're all

00:22:54,470 --> 00:22:59,270
bunch of shell scripts and a lot of the

00:22:56,770 --> 00:23:00,950
POSIX tools on Mac OS are different in

00:22:59,270 --> 00:23:02,990
subtle ways said has slightly different

00:23:00,950 --> 00:23:05,360
flags grep has different flag stars has

00:23:02,990 --> 00:23:07,280
different flags and we don't really have

00:23:05,360 --> 00:23:09,170
CI on Mac and so people will check in

00:23:07,280 --> 00:23:10,670
things will fix things they seem they

00:23:09,170 --> 00:23:12,050
seem fine they passed our CI and then we

00:23:10,670 --> 00:23:14,360
find out later that we completely broke

00:23:12,050 --> 00:23:17,150
the Mac build and developers get unhappy

00:23:14,360 --> 00:23:18,590
so it's not great as I also mentioned we

00:23:17,150 --> 00:23:20,930
don't really have this currently doesn't

00:23:18,590 --> 00:23:22,940
have a way of building rpms or Deb's

00:23:20,930 --> 00:23:24,890
that's all handled out-of-band

00:23:22,940 --> 00:23:26,360
which is not great we pretty much every

00:23:24,890 --> 00:23:28,550
time you cut a release usually somebody

00:23:26,360 --> 00:23:29,840
comes back a day later so this is hey

00:23:28,550 --> 00:23:32,150
where are the RPMs we have to go and

00:23:29,840 --> 00:23:33,200
build them which is not great and the

00:23:32,150 --> 00:23:36,220
generate code I'm just going to keep

00:23:33,200 --> 00:23:38,780
refraining generate code is a big pain

00:23:36,220 --> 00:23:41,420
so well yeah Derek Coates when we talk

00:23:38,780 --> 00:23:42,290
about so we have this make file that

00:23:41,420 --> 00:23:44,510
basically there's a whole bunch of

00:23:42,290 --> 00:23:45,860
utilities this is only a subset of the

00:23:44,510 --> 00:23:47,960
stuff that we kind of build basically

00:23:45,860 --> 00:23:51,020
there's a bunch of things that for

00:23:47,960 --> 00:23:52,910
performance reasons or other reasons we

00:23:51,020 --> 00:23:55,670
port a bunch have to generate code in

00:23:52,910 --> 00:23:57,470
order to do everything we need so the

00:23:55,670 --> 00:23:58,640
company's client library is generated

00:23:57,470 --> 00:24:00,740
because there's like basically a lot of

00:23:58,640 --> 00:24:02,030
repeated code and things like that or we

00:24:00,740 --> 00:24:03,740
sort of have a specification of how

00:24:02,030 --> 00:24:05,000
things build and then we have to

00:24:03,740 --> 00:24:07,730
generate all of the go code that

00:24:05,000 --> 00:24:09,110
actually that implements that there's

00:24:07,730 --> 00:24:11,030
things for API conversion the idea

00:24:09,110 --> 00:24:14,110
behind this is that as the kubernetes

00:24:11,030 --> 00:24:15,980
api that clients used to interact with

00:24:14,110 --> 00:24:17,300
changes we want to basically have some

00:24:15,980 --> 00:24:18,890
code that'll automatically translate

00:24:17,300 --> 00:24:20,180
things such that we have some backward

00:24:18,890 --> 00:24:22,130
compatibility

00:24:20,180 --> 00:24:23,750
deep copies of things there is a way you

00:24:22,130 --> 00:24:25,700
can do deep copy to the reflection it's

00:24:23,750 --> 00:24:26,930
really slow so you basically have some

00:24:25,700 --> 00:24:27,980
complete generate code that makes that

00:24:26,930 --> 00:24:30,129
faster

00:24:27,980 --> 00:24:32,360
open API definitions is another thing

00:24:30,129 --> 00:24:33,139
generate like you know I'm not gonna

00:24:32,360 --> 00:24:34,190
read everything here but there's

00:24:33,139 --> 00:24:36,620
basically a whole bunch of stuff that we

00:24:34,190 --> 00:24:38,059
have to generate and we basically all

00:24:36,620 --> 00:24:40,009
check it in because it can be kind of

00:24:38,059 --> 00:24:43,129
slow to generate this and there's at

00:24:40,009 --> 00:24:44,600
least some desire to be able to I think

00:24:43,129 --> 00:24:46,279
still I don't know effect she still

00:24:44,600 --> 00:24:48,980
works but this at one point you could

00:24:46,279 --> 00:24:50,899
sort of go build without using our build

00:24:48,980 --> 00:24:54,129
system but the only way to do that would

00:24:50,899 --> 00:24:56,419
be to have generating code checked in I

00:24:54,129 --> 00:24:58,309
think that's all I want to say that so

00:24:56,419 --> 00:25:00,169
um and yeah so one of the patterns we

00:24:58,309 --> 00:25:02,029
often use so so I guess when the issues

00:25:00,169 --> 00:25:03,679
with this is that this generate code

00:25:02,029 --> 00:25:05,029
often causes merge conflicts which will

00:25:03,679 --> 00:25:07,039
basically cause developers from their

00:25:05,029 --> 00:25:08,929
PRL be all ready to merge they have to

00:25:07,039 --> 00:25:10,210
go rebase we generate everything this

00:25:08,929 --> 00:25:12,139
can cause a huge amount of pain

00:25:10,210 --> 00:25:14,629
particularly for newer developers but

00:25:12,139 --> 00:25:15,830
for everyone it's just a pain and kind

00:25:14,629 --> 00:25:18,590
of one of the patterns we use it'll get

00:25:15,830 --> 00:25:19,669
to later or you'll kind of see is that I

00:25:18,590 --> 00:25:21,200
didn't actually mention this but one of

00:25:19,669 --> 00:25:23,509
the things that go does is you can have

00:25:21,200 --> 00:25:25,070
comments at the top your file that would

00:25:23,509 --> 00:25:27,139
kind of like with a plus or minus and

00:25:25,070 --> 00:25:29,360
these are build tags and so go build you

00:25:27,139 --> 00:25:31,539
can basically say you can give go to

00:25:29,360 --> 00:25:34,250
build tags which will include or exclude

00:25:31,539 --> 00:25:37,269
certain source files and so we use these

00:25:34,250 --> 00:25:39,769
these kate's : build tags to basically

00:25:37,269 --> 00:25:41,779
for generate codes we have these various

00:25:39,769 --> 00:25:44,600
code runners will basically go scanner

00:25:41,779 --> 00:25:46,909
tree look for this kate's open EIP ijen

00:25:44,600 --> 00:25:47,870
tag and then use that when generating

00:25:46,909 --> 00:25:51,350
the open api

00:25:47,870 --> 00:25:53,509
specs so because we have all this

00:25:51,350 --> 00:25:55,070
generate code and other things we end up

00:25:53,509 --> 00:25:57,320
having this hack directory which has all

00:25:55,070 --> 00:25:58,669
these update files and verify files and

00:25:57,320 --> 00:26:00,200
there's so many the verify ones they go

00:25:58,669 --> 00:26:02,629
off the bottom the screen which was

00:26:00,200 --> 00:26:04,840
intentional but so there's like you know

00:26:02,629 --> 00:26:07,129
updating all these various things and

00:26:04,840 --> 00:26:09,250
basically we have this update all and

00:26:07,129 --> 00:26:11,179
these verify all scripts and so

00:26:09,250 --> 00:26:12,710
generally if you're doing any sort of

00:26:11,179 --> 00:26:14,539
non-trivial chaining kubernetes you just

00:26:12,710 --> 00:26:16,399
run the update all script and just like

00:26:14,539 --> 00:26:18,919
whatever it changes you check in you

00:26:16,399 --> 00:26:20,720
upload and then in CI when you create a

00:26:18,919 --> 00:26:22,490
PR we're on this verify all check and

00:26:20,720 --> 00:26:24,440
hopefully everything's fine if not it'll

00:26:22,490 --> 00:26:25,940
tell you what failed some of them are

00:26:24,440 --> 00:26:28,340
more reasonable like we have some that

00:26:25,940 --> 00:26:30,049
are there's like a go format and a goal

00:26:28,340 --> 00:26:31,789
in check and a go vet check and these

00:26:30,049 --> 00:26:33,649
are kind of reasonable they'll you know

00:26:31,789 --> 00:26:35,450
do reasonable things and people are fine

00:26:33,649 --> 00:26:38,330
to fix those where are something l ones

00:26:35,450 --> 00:26:39,889
and we're frustrating I just go deps in

00:26:38,330 --> 00:26:41,070
here what's another one which we used to

00:26:39,889 --> 00:26:43,139
manage some of our go dependencies

00:26:41,070 --> 00:26:44,039
stuff which is another thing and you'll

00:26:43,139 --> 00:26:45,210
notice that you're looking carefully

00:26:44,039 --> 00:26:46,409
you'll see there's an update basal and

00:26:45,210 --> 00:26:49,529
verified basal which I'll get to in a

00:26:46,409 --> 00:26:52,380
bit so yeah so about a year ago I

00:26:49,529 --> 00:26:55,679
started well I should say I we started

00:26:52,380 --> 00:26:58,350
working on trying to get Cooper days to

00:26:55,679 --> 00:27:00,059
build with basal um and so you know kind

00:26:58,350 --> 00:27:02,340
of the initial focus and I say still the

00:27:00,059 --> 00:27:04,590
focus is try to get full parity with

00:27:02,340 --> 00:27:05,610
everything that we've built you know we

00:27:04,590 --> 00:27:07,799
want to make sure the developer

00:27:05,610 --> 00:27:09,750
experience was no worse you know as much

00:27:07,799 --> 00:27:11,490
as paint as I indicated that was it

00:27:09,750 --> 00:27:13,500
still works it's kind of slow it's kind

00:27:11,490 --> 00:27:14,789
of painful for people maintaining the

00:27:13,500 --> 00:27:16,919
build to figure out but for most

00:27:14,789 --> 00:27:17,909
developers it mostly just works and so

00:27:16,919 --> 00:27:21,179
we don't wanna make it any more painful

00:27:17,909 --> 00:27:22,679
um and another thing is we didn't really

00:27:21,179 --> 00:27:24,480
want it to be seen that like you know

00:27:22,679 --> 00:27:25,919
basil basil is a Google project

00:27:24,480 --> 00:27:27,210
kubernetes was originally a Google

00:27:25,919 --> 00:27:30,299
project we don't want to be seen as like

00:27:27,210 --> 00:27:33,000
forcing this kind of new untested

00:27:30,299 --> 00:27:34,649
project on the kubernetes project which

00:27:33,000 --> 00:27:37,350
you know potentially cause a lot of

00:27:34,649 --> 00:27:39,029
problems there's at least at the time

00:27:37,350 --> 00:27:40,440
and possibly still where I think we

00:27:39,029 --> 00:27:42,720
might be the largest go project trying

00:27:40,440 --> 00:27:44,009
to use this or at least publicly node so

00:27:42,720 --> 00:27:45,990
it was kind of some people were

00:27:44,009 --> 00:27:47,730
initially worried that like you know

00:27:45,990 --> 00:27:49,769
we're kind of the guinea pig for this

00:27:47,730 --> 00:27:51,870
thing that nobody else is using you know

00:27:49,769 --> 00:27:53,070
why are we doing this so trying to you

00:27:51,870 --> 00:27:54,840
know make sure that everything still

00:27:53,070 --> 00:27:56,220
works not getting anyone's way but

00:27:54,840 --> 00:28:02,429
hopefully improve things and demonstrate

00:27:56,220 --> 00:28:04,470
that basil was really helpful so before

00:28:02,429 --> 00:28:06,899
well gazelle existed about a year ago

00:28:04,470 --> 00:28:08,639
but at the time it did not support the

00:28:06,899 --> 00:28:11,970
way did not support native Cove

00:28:08,639 --> 00:28:14,639
hindering it only supported the the

00:28:11,970 --> 00:28:16,350
basil then during I believe and so Mike

00:28:14,639 --> 00:28:18,120
Deniz who's somebody on the kubernetes

00:28:16,350 --> 00:28:21,299
team up in Seattle worked on this tool

00:28:18,120 --> 00:28:23,340
called basil which basically does much

00:28:21,299 --> 00:28:25,139
the same thing as gazelle does except

00:28:23,340 --> 00:28:32,220
that it at the time supported the

00:28:25,139 --> 00:28:33,570
blender directory the real and like one

00:28:32,220 --> 00:28:35,279
of the you know key things we had with

00:28:33,570 --> 00:28:36,840
that was that we had this idea we added

00:28:35,279 --> 00:28:38,700
an I'm a managed tag all the rules that

00:28:36,840 --> 00:28:40,350
generated such that like if you need to

00:28:38,700 --> 00:28:42,299
override things in certain cases you can

00:28:40,350 --> 00:28:45,240
remove this tag and gazel would no

00:28:42,299 --> 00:28:47,100
longer touch it ran pretty quickly which

00:28:45,240 --> 00:28:49,470
was important so we were able to add it

00:28:47,100 --> 00:28:52,049
to the update verify scripts basically

00:28:49,470 --> 00:28:53,399
what that end up becoming is that you

00:28:52,049 --> 00:28:54,600
know it just became part of the thing

00:28:53,399 --> 00:28:56,640
that every developer runs they run

00:28:54,600 --> 00:28:57,809
they doll they run verify all and you

00:28:56,640 --> 00:28:59,429
know it's a quick script so I didn't

00:28:57,809 --> 00:29:00,630
really add a whole lot of pain it

00:28:59,429 --> 00:29:01,650
generates and build piles did some

00:29:00,630 --> 00:29:03,120
things people really didn't know about

00:29:01,650 --> 00:29:04,830
didn't really care about hopefully and

00:29:03,120 --> 00:29:07,669
people just got on their way it was just

00:29:04,830 --> 00:29:09,990
another generated thing so that's fine

00:29:07,669 --> 00:29:11,520
and another you know advantage of that

00:29:09,990 --> 00:29:13,049
is that we also got build on formatting

00:29:11,520 --> 00:29:13,860
because you know we're running this all

00:29:13,049 --> 00:29:15,630
the time

00:29:13,860 --> 00:29:17,250
and then there was configuration file

00:29:15,630 --> 00:29:21,570
which most people rarely ever need to

00:29:17,250 --> 00:29:23,190
touch but just lived with the repository

00:29:21,570 --> 00:29:28,110
so we'd have different settings on

00:29:23,190 --> 00:29:29,970
different repositories and so as of like

00:29:28,110 --> 00:29:31,260
last December or so we actually had

00:29:29,970 --> 00:29:32,940
build files all throughout the

00:29:31,260 --> 00:29:35,039
kubernetes tree we were able to build

00:29:32,940 --> 00:29:36,780
all the binaries wherever run unit tests

00:29:35,039 --> 00:29:38,010
we couldn't build the docker images we

00:29:36,780 --> 00:29:40,110
didn't really have the ability to start

00:29:38,010 --> 00:29:41,250
a cluster but we had the beginnings of

00:29:40,110 --> 00:29:44,640
you know we could actually do some basil

00:29:41,250 --> 00:29:47,220
builds and starting to see some stuff we

00:29:44,640 --> 00:29:49,409
also basil if I'd our test in Pro repo

00:29:47,220 --> 00:29:50,669
which was much simpler but was also kind

00:29:49,409 --> 00:29:53,210
of a great place for us to kind of test

00:29:50,669 --> 00:29:59,220
out things that were in a more simpler

00:29:53,210 --> 00:30:01,890
set up there was a fun incident at first

00:29:59,220 --> 00:30:03,539
we're in the coronaries core core

00:30:01,890 --> 00:30:05,429
repository we have a build slash

00:30:03,539 --> 00:30:07,440
directory and so we created a build file

00:30:05,429 --> 00:30:09,600
in the root and discovered at some point

00:30:07,440 --> 00:30:10,950
again our poor mac OS users we're having

00:30:09,600 --> 00:30:12,870
issues checking out the guy repository

00:30:10,950 --> 00:30:15,120
so for a short period of time we renamed

00:30:12,870 --> 00:30:17,130
build I think build tools or something

00:30:15,120 --> 00:30:19,380
until we got build-up basil and then we

00:30:17,130 --> 00:30:20,940
flip back and now we have a build up

00:30:19,380 --> 00:30:24,120
basil file in our root which solved that

00:30:20,940 --> 00:30:27,570
problem so kind of the next thing I

00:30:24,120 --> 00:30:30,480
started working on early 2017 was trying

00:30:27,570 --> 00:30:32,580
to convert all of our trying to build

00:30:30,480 --> 00:30:34,200
all the released tar balls using basil

00:30:32,580 --> 00:30:37,200
which is kind of a core thing to be able

00:30:34,200 --> 00:30:38,270
to start up a crudities cluster and so

00:30:37,200 --> 00:30:40,770
we kind of have a bunch of different

00:30:38,270 --> 00:30:43,049
outputs here so we have this manifest

00:30:40,770 --> 00:30:45,450
Haribo which is just sort of all of the

00:30:43,049 --> 00:30:47,970
you know text files and configuration

00:30:45,450 --> 00:30:49,640
things salt which is more configuration

00:30:47,970 --> 00:30:52,110
files than any particular tree structure

00:30:49,640 --> 00:30:53,549
the source which was basically our

00:30:52,110 --> 00:30:56,159
entire source tree which we needed to

00:30:53,549 --> 00:30:59,280
include for various reasons we have a

00:30:56,159 --> 00:31:01,409
test turbo which was all the the go test

00:30:59,280 --> 00:31:03,480
binary to be test binaries so it wasn't

00:31:01,409 --> 00:31:05,549
all of the unit test integration tests

00:31:03,480 --> 00:31:08,220
that like our e to e tests are built as

00:31:05,549 --> 00:31:09,570
a single

00:31:08,220 --> 00:31:11,280
binary artifact and you can just run

00:31:09,570 --> 00:31:16,260
that and it'll basically brought all the

00:31:11,280 --> 00:31:18,990
key to vests against a cluster and then

00:31:16,260 --> 00:31:20,850
we had server node and client tarballs

00:31:18,990 --> 00:31:22,860
that were basically per OS and per

00:31:20,850 --> 00:31:23,940
architecture and so these had all the

00:31:22,860 --> 00:31:25,770
binaries built for that particular

00:31:23,940 --> 00:31:27,990
architecture and then there was a

00:31:25,770 --> 00:31:29,429
overarching sort of kubernetes of Tartu

00:31:27,990 --> 00:31:32,159
GZ which missus II just had a few extra

00:31:29,429 --> 00:31:33,630
scripts some read knees basically you

00:31:32,159 --> 00:31:34,799
could download this and then there was a

00:31:33,630 --> 00:31:36,150
script inside that which would download

00:31:34,799 --> 00:31:38,429
everything else you needed for the the

00:31:36,150 --> 00:31:40,320
architecture you were targeting and also

00:31:38,429 --> 00:31:43,980
had some version information in it so it

00:31:40,320 --> 00:31:45,179
had some get stamping so sort of one of

00:31:43,980 --> 00:31:47,610
the first challenges was a source

00:31:45,179 --> 00:31:50,700
tarball I wanted to be able to be able

00:31:47,610 --> 00:31:54,179
to include all of our sources in

00:31:50,700 --> 00:31:55,620
something in a basal roll but basil

00:31:54,179 --> 00:31:58,409
isn't really like you're doing this for

00:31:55,620 --> 00:31:59,429
obvious reasons and so I kind of was

00:31:58,409 --> 00:32:01,950
looking around trying to figure out the

00:31:59,429 --> 00:32:03,210
best way to do this well and the reason

00:32:01,950 --> 00:32:05,490
I didn't just try to do this outside of

00:32:03,210 --> 00:32:07,890
basil is because for various reasons we

00:32:05,490 --> 00:32:10,440
need to include this inside our server

00:32:07,890 --> 00:32:12,000
and node turtles and so unless I you

00:32:10,440 --> 00:32:13,200
like did that first and then ran basil

00:32:12,000 --> 00:32:14,700
it was kind of weird and like well I

00:32:13,200 --> 00:32:16,020
lose that then I lose being able to pull

00:32:14,700 --> 00:32:17,580
all these tar balls inside basil and

00:32:16,020 --> 00:32:19,289
that was I wanted to be able to do as

00:32:17,580 --> 00:32:21,000
much in basil as I could so I kind of

00:32:19,289 --> 00:32:23,190
started looking at other options or

00:32:21,000 --> 00:32:24,570
seeing what other people did and so like

00:32:23,190 --> 00:32:27,210
I looked at the basil project I noticed

00:32:24,570 --> 00:32:28,080
they had like some sources file groups

00:32:27,210 --> 00:32:30,000
it looked like they were manually

00:32:28,080 --> 00:32:31,350
curated and I was kind of worried about

00:32:30,000 --> 00:32:33,030
that because we had a lot of build files

00:32:31,350 --> 00:32:34,169
and I was worried that people were not

00:32:33,030 --> 00:32:35,820
gonna want to maintain these things

00:32:34,169 --> 00:32:37,650
they're gonna get out of date so I

00:32:35,820 --> 00:32:39,570
wasn't gonna work but since we are using

00:32:37,650 --> 00:32:40,590
gazel it was just easy just to write a

00:32:39,570 --> 00:32:43,140
little thing that basically added

00:32:40,590 --> 00:32:44,669
additional rules so we have these maybe

00:32:43,140 --> 00:32:46,140
you can read them there's a package

00:32:44,669 --> 00:32:47,640
sources and all sources rule that

00:32:46,140 --> 00:32:49,950
basically exists in every single build

00:32:47,640 --> 00:32:52,340
file in our tree the packet stores is

00:32:49,950 --> 00:32:54,480
just a glob for that package and

00:32:52,340 --> 00:32:56,370
explicitly and then all sources

00:32:54,480 --> 00:32:57,780
basically is recursive including this

00:32:56,370 --> 00:32:59,669
package plus everything below a I

00:32:57,780 --> 00:33:01,380
separated those basically because I

00:32:59,669 --> 00:33:03,030
figured package sources might want to be

00:33:01,380 --> 00:33:05,340
manually managed if you needed to

00:33:03,030 --> 00:33:07,020
exclude things like in our route we had

00:33:05,340 --> 00:33:09,570
some weird files we need to exclude

00:33:07,020 --> 00:33:11,400
whereas all sources when intended to

00:33:09,570 --> 00:33:12,679
just be Auto managed completely and

00:33:11,400 --> 00:33:14,370
never touched

00:33:12,679 --> 00:33:20,160
that's actually worked pretty well

00:33:14,370 --> 00:33:21,630
surprisingly so another pain which

00:33:20,160 --> 00:33:23,520
I really should've used larger fonts but

00:33:21,630 --> 00:33:25,680
these are kinda just some real rules

00:33:23,520 --> 00:33:27,570
actually from our tree but again we had

00:33:25,680 --> 00:33:29,970
sort of a very particular structure of

00:33:27,570 --> 00:33:31,470
how we needed to organize binaries

00:33:29,970 --> 00:33:33,060
inside our tarballs so like you know

00:33:31,470 --> 00:33:34,740
everything expected there was a

00:33:33,060 --> 00:33:38,070
kubernetes directory inside Freddie's

00:33:34,740 --> 00:33:39,840
was criminais slash server slash like

00:33:38,070 --> 00:33:41,820
architecture slash bin or something like

00:33:39,840 --> 00:33:42,870
that and so we kind of needed to get all

00:33:41,820 --> 00:33:45,000
these things in the right place but he

00:33:42,870 --> 00:33:46,620
also had a community server add-ons

00:33:45,000 --> 00:33:48,480
directory and other things and so we

00:33:46,620 --> 00:33:52,380
kind of had to sort of I built all these

00:33:48,480 --> 00:33:53,400
intermediary tar rules to basically be

00:33:52,380 --> 00:33:55,500
able to get everything into the right

00:33:53,400 --> 00:33:57,150
structure so this is one example but I

00:33:55,500 --> 00:33:58,830
have others I've done I think some of

00:33:57,150 --> 00:34:01,110
this may have been fixed possibly I

00:33:58,830 --> 00:34:03,870
haven't managed to apply it yet but um

00:34:01,110 --> 00:34:05,880
that's kind of one little hack and kind

00:34:03,870 --> 00:34:07,200
of had to do is this was the easiest way

00:34:05,880 --> 00:34:08,160
to basically be able to put everything

00:34:07,200 --> 00:34:09,900
into the right place

00:34:08,160 --> 00:34:12,240
but ended up meaning that we had a lot

00:34:09,900 --> 00:34:15,390
of numeri intermediary tars which was

00:34:12,240 --> 00:34:17,100
not great other problems this is when I

00:34:15,390 --> 00:34:20,010
kind of reference the end of yesterday

00:34:17,100 --> 00:34:22,169
with my question at the end of the ask

00:34:20,010 --> 00:34:24,600
me anything was that they were the

00:34:22,169 --> 00:34:26,640
official package tar rule or at least

00:34:24,600 --> 00:34:29,640
the actual archiver that implements this

00:34:26,640 --> 00:34:31,050
prepends everything with dot slash and

00:34:29,640 --> 00:34:32,940
so our tar balls were just kubernetes

00:34:31,050 --> 00:34:34,620
slash blah blah blah the one produced by

00:34:32,940 --> 00:34:36,480
Basel where dot slash Cabernets slash

00:34:34,620 --> 00:34:38,460
blah blah blah blah blah this is mostly

00:34:36,480 --> 00:34:41,160
fine except that Basel set the

00:34:38,460 --> 00:34:43,230
Commission's on dot to like you know

00:34:41,160 --> 00:34:44,490
read-only or something and so if you'd

00:34:43,230 --> 00:34:46,890
extract this tar in a place that you

00:34:44,490 --> 00:34:48,360
were privileged or like if I tried to

00:34:46,890 --> 00:34:49,740
extract this in temp for example I

00:34:48,360 --> 00:34:51,360
couldn't set permissions on the temp

00:34:49,740 --> 00:34:52,800
directory and it would fail this was

00:34:51,360 --> 00:34:54,780
kind of not the matching parody it was

00:34:52,800 --> 00:34:56,070
kind of painful and I was like well it

00:34:54,780 --> 00:34:57,840
seems like this should be fine I can

00:34:56,070 --> 00:35:01,320
just change this which of course was it

00:34:57,840 --> 00:35:02,970
was a joke or at least it was it was it

00:35:01,320 --> 00:35:04,170
was a lot less trivial than I expected

00:35:02,970 --> 00:35:05,520
so I was able to you know change this

00:35:04,170 --> 00:35:06,900
pretty easily I was able to change the

00:35:05,520 --> 00:35:08,940
local test pretty easily that was fine

00:35:06,900 --> 00:35:10,470
and then I went and it kind of started

00:35:08,940 --> 00:35:12,240
to break more things and more things and

00:35:10,470 --> 00:35:14,970
eventually I kind of gave up so we're

00:35:12,240 --> 00:35:16,920
currently still using a fork of this in

00:35:14,970 --> 00:35:18,530
my repository which kind of removes that

00:35:16,920 --> 00:35:20,640
I might maybe check in something that

00:35:18,530 --> 00:35:22,170
lets you give an option I just haven't

00:35:20,640 --> 00:35:23,700
had a chance to go back I've been so

00:35:22,170 --> 00:35:26,190
dejected the last few months with that

00:35:23,700 --> 00:35:28,680
getting reverted several times the other

00:35:26,190 --> 00:35:31,710
thing is that actually the the script

00:35:28,680 --> 00:35:33,210
itself is extremely slow especially with

00:35:31,710 --> 00:35:33,960
the koobideh source tarball we pretty

00:35:33,210 --> 00:35:35,220
much all of them

00:35:33,960 --> 00:35:36,780
because it's a I guess because it's a

00:35:35,220 --> 00:35:38,910
Python program and it's single spreaded

00:35:36,780 --> 00:35:40,170
creating these tar balls which are some

00:35:38,910 --> 00:35:42,720
of them are several hundred Meg's in

00:35:40,170 --> 00:35:44,339
size is taking many many seconds four

00:35:42,720 --> 00:35:46,710
minutes and it's actually one of the

00:35:44,339 --> 00:35:48,780
slowest parts of our build right now and

00:35:46,710 --> 00:35:51,000
so Mike Denise again actually has a PR

00:35:48,780 --> 00:35:52,530
where he basically wrote a go program

00:35:51,000 --> 00:35:55,470
which implements the archiver program

00:35:52,530 --> 00:35:57,060
all the things we need and because of

00:35:55,470 --> 00:35:58,440
leg sleep because of some flexibility in

00:35:57,060 --> 00:35:59,760
the package tarvold we can actually just

00:35:58,440 --> 00:36:02,099
point to that and say this is the

00:35:59,760 --> 00:36:04,200
archive tool and i think it cuts our

00:36:02,099 --> 00:36:06,180
build down to like 35 seconds from 5

00:36:04,200 --> 00:36:10,080
minutes or something so it's a huge

00:36:06,180 --> 00:36:11,130
improvement so I don't know how well

00:36:10,080 --> 00:36:12,150
there's something can upstream because I

00:36:11,130 --> 00:36:14,520
don't we want to have additional

00:36:12,150 --> 00:36:19,560
dependencies on go but at least for us

00:36:14,520 --> 00:36:20,790
it's potentially a huge win and before

00:36:19,560 --> 00:36:23,490
that worked there was kind of another

00:36:20,790 --> 00:36:25,440
hack I you know found conflict settings

00:36:23,490 --> 00:36:26,910
and so I realized that for most yeah

00:36:25,440 --> 00:36:28,170
built so for an official release we

00:36:26,910 --> 00:36:31,710
would need to include all of the sources

00:36:28,170 --> 00:36:33,119
but for a for a CI builder developer

00:36:31,710 --> 00:36:35,160
build we don't really care about the

00:36:33,119 --> 00:36:36,359
source tarball so all just like have a

00:36:35,160 --> 00:36:38,369
little flag that it can you know specify

00:36:36,359 --> 00:36:39,869
configuration and in some cases I just

00:36:38,369 --> 00:36:41,010
have a readme it says well if we didn't

00:36:39,869 --> 00:36:42,890
include this in other cases you can

00:36:41,010 --> 00:36:45,359
flood the real thing this helped a lot

00:36:42,890 --> 00:36:46,589
creating that and then then we weren't

00:36:45,359 --> 00:36:48,450
recreating the source tarball

00:36:46,589 --> 00:36:49,619
every time we touched any file we

00:36:48,450 --> 00:36:51,089
weren't recruiting all the additional

00:36:49,619 --> 00:36:54,180
Tarbell's every time we created change

00:36:51,089 --> 00:36:57,720
one files so another thing was you know

00:36:54,180 --> 00:37:00,780
like I said we had we distribute our e2e

00:36:57,720 --> 00:37:01,950
tests as a test binary and at least at

00:37:00,780 --> 00:37:04,170
the time and possibly still there's no

00:37:01,950 --> 00:37:06,480
way to like exactly get at that test

00:37:04,170 --> 00:37:08,190
output or at least not have it named the

00:37:06,480 --> 00:37:09,900
right thing so you know this is just a

00:37:08,190 --> 00:37:11,730
simple little rename general where

00:37:09,900 --> 00:37:13,770
basically we depend on the go test we

00:37:11,730 --> 00:37:15,720
set the flag or a tag on the goat on the

00:37:13,770 --> 00:37:17,790
test so we don't run it all the time we

00:37:15,720 --> 00:37:20,490
have some filters so we skipped e to e

00:37:17,790 --> 00:37:21,900
but we basically you know can depend on

00:37:20,490 --> 00:37:24,240
e to e dot test which is what we need

00:37:21,900 --> 00:37:26,220
it'll build the go test it'll then run

00:37:24,240 --> 00:37:28,170
the general which we names it super easy

00:37:26,220 --> 00:37:30,710
although you know maybe there's a better

00:37:28,170 --> 00:37:30,710
way to do this

00:37:30,890 --> 00:37:35,910
another thing is early on the gazel tool

00:37:33,930 --> 00:37:37,440
we decided that we would just basically

00:37:35,910 --> 00:37:39,690
have a single build file for the entire

00:37:37,440 --> 00:37:41,700
vendor directory I believe this was done

00:37:39,690 --> 00:37:44,010
mostly because it was simpler to reason

00:37:41,700 --> 00:37:45,869
about and made more sense possibly to

00:37:44,010 --> 00:37:46,800
not litter build files throughout vendor

00:37:45,869 --> 00:37:47,760
you know they weren't really supposed to

00:37:46,800 --> 00:37:49,680
be touching things in there

00:37:47,760 --> 00:37:52,050
just we were just copying files in and

00:37:49,680 --> 00:37:53,970
then generating stuff we discovered this

00:37:52,050 --> 00:37:56,400
had a huge problem because again with

00:37:53,970 --> 00:37:58,770
mas contributors constantly updating

00:37:56,400 --> 00:38:01,290
things this would cause rebase conflicts

00:37:58,770 --> 00:38:02,520
constantly this is a huge sense of huge

00:38:01,290 --> 00:38:04,080
source of pain some people were like

00:38:02,520 --> 00:38:06,710
threatening to completely remove the

00:38:04,080 --> 00:38:08,910
basil stuff at some point and so we

00:38:06,710 --> 00:38:12,030
rewrote gazel so basically we'd use

00:38:08,910 --> 00:38:13,980
multi build files so we had build file

00:38:12,030 --> 00:38:15,690
in each package and this is multiple

00:38:13,980 --> 00:38:17,490
files build files is what gazelle does

00:38:15,690 --> 00:38:18,720
and so I was kind of a interesting

00:38:17,490 --> 00:38:22,350
lesson that's kind of what we ended up

00:38:18,720 --> 00:38:24,540
doing in the end there so sort of some

00:38:22,350 --> 00:38:27,480
we managed to get some of our generated

00:38:24,540 --> 00:38:30,870
code into basil so one of the easier

00:38:27,480 --> 00:38:32,340
ones is built-in data which I think

00:38:30,870 --> 00:38:35,010
there's actually a cleaner example and

00:38:32,340 --> 00:38:37,440
the go rules repository but this was

00:38:35,010 --> 00:38:39,150
kind of before that we just we had we

00:38:37,440 --> 00:38:42,270
already had go pin data inside our

00:38:39,150 --> 00:38:43,950
vendor directory because we were using

00:38:42,270 --> 00:38:45,420
it for some reason we basically are on

00:38:43,950 --> 00:38:47,190
it I already wanted it hermetic so I

00:38:45,420 --> 00:38:48,870
already had it so it's just easy just

00:38:47,190 --> 00:38:50,670
you know have depend on that tool and

00:38:48,870 --> 00:38:52,200
then just run it like a standard general

00:38:50,670 --> 00:38:53,610
so you name and read it through there's

00:38:52,200 --> 00:38:55,620
just really really straightforward

00:38:53,610 --> 00:38:57,870
pretty easy you just get the sources you

00:38:55,620 --> 00:39:01,200
need and it just runs and generates the

00:38:57,870 --> 00:39:04,470
thing you need and it's amazing some of

00:39:01,200 --> 00:39:06,720
our tools require a valid go path and a

00:39:04,470 --> 00:39:10,460
go standard library and go ruin all

00:39:06,720 --> 00:39:13,620
these things and so we wrote a custom

00:39:10,460 --> 00:39:16,230
rule in skylark which Combe go general

00:39:13,620 --> 00:39:19,440
which basically wraps general with the

00:39:16,230 --> 00:39:21,060
creating a a valid go path and go route

00:39:19,440 --> 00:39:23,340
first and so it basically creates a temp

00:39:21,060 --> 00:39:24,540
directory copies some things in some

00:39:23,340 --> 00:39:25,980
links um I think it actually simply it's

00:39:24,540 --> 00:39:27,630
not copies but sim like some things send

00:39:25,980 --> 00:39:31,140
some environment variables and then you

00:39:27,630 --> 00:39:33,450
can use that to to run these these code

00:39:31,140 --> 00:39:35,340
gems that need that unfortunately this

00:39:33,450 --> 00:39:37,200
has been kind of broken a fair bit by

00:39:35,340 --> 00:39:38,880
rules go I think it's slowing down a

00:39:37,200 --> 00:39:40,140
little bit but a lot of the tool phase

00:39:38,880 --> 00:39:42,180
changes and other things have been

00:39:40,140 --> 00:39:44,970
making it so like every time we update

00:39:42,180 --> 00:39:47,250
our Gobles things break but that's you

00:39:44,970 --> 00:39:52,290
know part of the joy of being an early

00:39:47,250 --> 00:39:53,520
adopter I guess so yeah so as explaining

00:39:52,290 --> 00:39:55,320
kind of earlier one of the generate

00:39:53,520 --> 00:39:58,980
things example here is the open API

00:39:55,320 --> 00:40:00,960
library rules so basically in go files

00:39:58,980 --> 00:40:01,650
in the files that need open API

00:40:00,960 --> 00:40:02,849
definition

00:40:01,650 --> 00:40:06,900
they have this comment that basically

00:40:02,849 --> 00:40:08,670
enables that and then but the problem of

00:40:06,900 --> 00:40:10,289
that is that there's you know no great

00:40:08,670 --> 00:40:11,789
way to say like hey basil I want to

00:40:10,289 --> 00:40:15,960
depend on all the things that have this

00:40:11,789 --> 00:40:18,059
tag in a pile so the corner of the way

00:40:15,960 --> 00:40:19,980
we fix this at least for now is well we

00:40:18,059 --> 00:40:21,319
just added another thing to gazel and so

00:40:19,980 --> 00:40:23,430
we'd really

00:40:21,319 --> 00:40:24,930
we're already walking the tree so we can

00:40:23,430 --> 00:40:27,029
walk the tree and look for that and we

00:40:24,930 --> 00:40:28,829
created an open API a library macro

00:40:27,029 --> 00:40:32,730
which wraps go general which I just

00:40:28,829 --> 00:40:36,510
mentioned and basically gazel will fill

00:40:32,730 --> 00:40:38,670
in a list of sources that have this tag

00:40:36,510 --> 00:40:43,020
that get passed and creates an open API

00:40:38,670 --> 00:40:44,400
library rule our instance using that so

00:40:43,020 --> 00:40:45,960
oops so that's all I have so basically

00:40:44,400 --> 00:40:47,369
just so you know has open API library

00:40:45,960 --> 00:40:49,529
and it lists all of the things that have

00:40:47,369 --> 00:40:51,240
this particular tag so sort of we are

00:40:49,529 --> 00:40:53,160
able to build this list out of band out

00:40:51,240 --> 00:40:54,450
of basil it'd be nice if you could

00:40:53,160 --> 00:40:56,579
figure out some way of doing this more

00:40:54,450 --> 00:40:57,869
and inside basil but this is kind of

00:40:56,579 --> 00:40:59,520
what we have for now there's a whole

00:40:57,869 --> 00:41:00,690
bunch of other examples of things like

00:40:59,520 --> 00:41:01,920
that basically all these cases where we

00:41:00,690 --> 00:41:04,020
have these build tags we want to be able

00:41:01,920 --> 00:41:05,250
to sort of select only on those files

00:41:04,020 --> 00:41:08,130
I'm not sure how we would do that

00:41:05,250 --> 00:41:10,829
without walking the whole tree possibly

00:41:08,130 --> 00:41:12,839
we could revert the way we do this and

00:41:10,829 --> 00:41:15,390
instead of having the tag in the file

00:41:12,839 --> 00:41:16,920
itself we maintain a list but that's

00:41:15,390 --> 00:41:18,869
kind of not the way you currently do it

00:41:16,920 --> 00:41:20,309
and so would probably have some friction

00:41:18,869 --> 00:41:23,579
converting developers to go to that sort

00:41:20,309 --> 00:41:30,779
of model how much time do I have

00:41:23,579 --> 00:41:32,400
I'm already past my time okay got it

00:41:30,779 --> 00:41:35,880
yeah sorry I totally am not paying

00:41:32,400 --> 00:41:37,319
attention um yeah so this quickly skim

00:41:35,880 --> 00:41:39,119
through this I had way too much stuff I

00:41:37,319 --> 00:41:41,369
guess so

00:41:39,119 --> 00:41:43,260
stamping was important we implemented

00:41:41,369 --> 00:41:45,299
some various ways of so another thing we

00:41:43,260 --> 00:41:48,319
needed basically was be able to include

00:41:45,299 --> 00:41:50,400
all of the get information all of these

00:41:48,319 --> 00:41:53,549
binaries and so basically implemented

00:41:50,400 --> 00:41:56,279
rules in we created a workspace status

00:41:53,549 --> 00:41:57,660
command um which basically was able to

00:41:56,279 --> 00:41:59,940
create a map hold stuff in the basil

00:41:57,660 --> 00:42:02,579
which created these static workspace

00:41:59,940 --> 00:42:04,740
status files then updated the docker

00:42:02,579 --> 00:42:07,470
rules and go rules are worked with Matt

00:42:04,740 --> 00:42:08,730
and NJ and email the people to update

00:42:07,470 --> 00:42:11,309
all these rules such that basically we

00:42:08,730 --> 00:42:13,559
could use well so this is just using it

00:42:11,309 --> 00:42:15,180
general with that basically a modal

00:42:13,559 --> 00:42:15,510
stamp of docker tags so getting a doctor

00:42:15,180 --> 00:42:18,740
tie

00:42:15,510 --> 00:42:21,990
that has that particular version in it

00:42:18,740 --> 00:42:24,540
being able to link go binaries with that

00:42:21,990 --> 00:42:25,920
so basically we have kind of sleeping

00:42:24,540 --> 00:42:27,960
well here so basically just specifying

00:42:25,920 --> 00:42:30,660
some linker flags which include those

00:42:27,960 --> 00:42:32,250
files one if she was stamping is that

00:42:30,660 --> 00:42:33,720
it's not really standardized like kind

00:42:32,250 --> 00:42:36,540
of there's a sort of standard way we do

00:42:33,720 --> 00:42:38,190
it with that similar for go and for

00:42:36,540 --> 00:42:39,540
docker but other rules it's kind of

00:42:38,190 --> 00:42:42,390
everyone's on their own it's not really

00:42:39,540 --> 00:42:44,390
well documented either so it seems like

00:42:42,390 --> 00:42:46,500
it's kind of a place for improvements

00:42:44,390 --> 00:42:49,610
you know currently things are working

00:42:46,500 --> 00:42:55,920
you know there's still things to improve

00:42:49,610 --> 00:42:57,150
that and you know other people in the

00:42:55,920 --> 00:42:58,590
community are actually starting to adopt

00:42:57,150 --> 00:42:59,730
it which is pretty exciting so some of

00:42:58,590 --> 00:43:01,590
the other projects are starting to look

00:42:59,730 --> 00:43:04,020
into it and they're kind of enthusiastic

00:43:01,590 --> 00:43:07,620
about using it a few things you know

00:43:04,020 --> 00:43:11,280
generated code is still not not a great

00:43:07,620 --> 00:43:12,660
story as I mentioned sometimes you know

00:43:11,280 --> 00:43:14,670
the documentation the proven but it can

00:43:12,660 --> 00:43:15,900
be somewhat lacking sometimes we get

00:43:14,670 --> 00:43:17,930
some really weird error messages people

00:43:15,900 --> 00:43:19,770
run into you they can be you altering

00:43:17,930 --> 00:43:20,760
you know again I think there's

00:43:19,770 --> 00:43:22,020
improvements it looks like the

00:43:20,760 --> 00:43:23,910
documentation is improving for other

00:43:22,020 --> 00:43:26,190
distributions but kind of Ubuntu is

00:43:23,910 --> 00:43:28,080
still sort of the main one things are

00:43:26,190 --> 00:43:30,030
constantly moving so one of the ways you

00:43:28,080 --> 00:43:31,920
kind of helped with that is we basically

00:43:30,030 --> 00:43:33,480
made so we have many different versions

00:43:31,920 --> 00:43:35,220
of kubernetes that go back like nine

00:43:33,480 --> 00:43:36,720
months so we have to maintain so we end

00:43:35,220 --> 00:43:38,670
up creating a container called planter

00:43:36,720 --> 00:43:40,590
because it's a little container that

00:43:38,670 --> 00:43:42,030
basically lets us wrap up basil inside a

00:43:40,590 --> 00:43:43,110
container and you can just run the

00:43:42,030 --> 00:43:45,180
script and basically it'll map

00:43:43,110 --> 00:43:47,610
everything for you what's it run basil

00:43:45,180 --> 00:43:48,960
as if you're running it locally it's a

00:43:47,610 --> 00:43:50,040
little slower but basically it does all

00:43:48,960 --> 00:43:54,780
the things for you and so you can very

00:43:50,040 --> 00:43:56,430
easily switch basil versions and to do

00:43:54,780 --> 00:43:58,950
another thing is like just sort of being

00:43:56,430 --> 00:44:00,540
able to add dependencies W dependencies

00:43:58,950 --> 00:44:01,950
to an image can be really frustrating

00:44:00,540 --> 00:44:03,720
especially because the years will often

00:44:01,950 --> 00:44:05,400
drop those dependencies so this is why

00:44:03,720 --> 00:44:07,100
we're still sort of using base images we

00:44:05,400 --> 00:44:09,270
build outside basil with docker files

00:44:07,100 --> 00:44:10,710
would love to improve that but it's kind

00:44:09,270 --> 00:44:12,510
of pain

00:44:10,710 --> 00:44:14,610
this whole go been during where's basil

00:44:12,510 --> 00:44:16,470
ven during it's kind of difficult

00:44:14,610 --> 00:44:18,960
and also the way of dropping your

00:44:16,470 --> 00:44:22,050
dependencies into a vendor directory if

00:44:18,960 --> 00:44:23,490
you drop in a native basil project now

00:44:22,050 --> 00:44:25,560
all your paths inside your build puffles

00:44:23,490 --> 00:44:26,820
is wrong how do you fix that I don't

00:44:25,560 --> 00:44:28,550
know there's DNA can use billdozer

00:44:26,820 --> 00:44:31,310
possibly but

00:44:28,550 --> 00:44:33,110
it's frustrating another thing as we

00:44:31,310 --> 00:44:34,460
tried to write some wit checks using

00:44:33,110 --> 00:44:35,810
these all sources rules they don't work

00:44:34,460 --> 00:44:37,550
great I don't know if it's something

00:44:35,810 --> 00:44:38,810
that people want to do or if this is

00:44:37,550 --> 00:44:41,450
something it's a good idea or not but

00:44:38,810 --> 00:44:45,100
kind of been a little issue another

00:44:41,450 --> 00:44:47,740
thing is yeah we have on our CI we are

00:44:45,100 --> 00:44:52,220
trying to improve things we have a SSD

00:44:47,740 --> 00:44:53,300
participant disk but we have had some

00:44:52,220 --> 00:44:54,560
issues and there's not really an

00:44:53,300 --> 00:44:56,240
official way to do this we're kind of

00:44:54,560 --> 00:44:58,420
abusing the test tempter t able to use

00:44:56,240 --> 00:45:00,800
this but maybe there's a better way and

00:44:58,420 --> 00:45:02,180
then of course cross builds support and

00:45:00,800 --> 00:45:03,260
you know not everything is cross build

00:45:02,180 --> 00:45:05,180
for everything so we have to figure out

00:45:03,260 --> 00:45:06,290
like you know these Tarbell's we wanna

00:45:05,180 --> 00:45:10,520
include some things we want include

00:45:06,290 --> 00:45:12,260
something star bozeman or all of them so

00:45:10,520 --> 00:45:13,700
I'll leave those as one parting response

00:45:12,260 --> 00:45:15,290
which was an unprompted comment from

00:45:13,700 --> 00:45:17,840
somebody on slack which was you know by

00:45:15,290 --> 00:45:19,340
the way XD FML been the older basil is

00:45:17,840 --> 00:45:21,170
bloody amazing basil dmoz made my life

00:45:19,340 --> 00:45:22,970
so much more productive cops test took 6

00:45:21,170 --> 00:45:24,980
minutes when cashier at 30 seconds I

00:45:22,970 --> 00:45:28,160
don't cost open channels stunt free

00:45:24,980 --> 00:45:30,500
antics so that was quick speed through

00:45:28,160 --> 00:45:32,480
the end of my presentation you can find

00:45:30,500 --> 00:45:34,430
me on github and slack and XD or Twitter

00:45:32,480 --> 00:45:36,890
Jake Grafton we have a pretty active

00:45:34,430 --> 00:45:38,900
channel on the committee slack at basil

00:45:36,890 --> 00:45:41,000
and then there's also a fairly new basil

00:45:38,900 --> 00:45:44,300
go discuss mailing list set up by the

00:45:41,000 --> 00:45:48,429
rules go team so thank you everyone

00:45:44,300 --> 00:45:48,429

YouTube URL: https://www.youtube.com/watch?v=j6ZVaJlokhM


