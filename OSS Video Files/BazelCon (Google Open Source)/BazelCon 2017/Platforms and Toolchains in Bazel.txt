Title: Platforms and Toolchains in Bazel
Publication date: 2017-12-08
Playlist: BazelCon 2017
Description: 
	by John Cater (Bazel team)
Captions: 
	00:00:00,030 --> 00:00:04,650
so this is the talk on platforms and

00:00:02,340 --> 00:00:08,220
tool trains which is kind of the Basel

00:00:04,650 --> 00:00:10,559
teams attempt to move from the past of

00:00:08,220 --> 00:00:12,000
blaze where everything was developer

00:00:10,559 --> 00:00:14,219
workstation when she was a Linux machine

00:00:12,000 --> 00:00:16,830
running a very controlled set of tools

00:00:14,219 --> 00:00:18,960
and a production data center which is a

00:00:16,830 --> 00:00:21,420
Linux machine running a very controlled

00:00:18,960 --> 00:00:23,789
set of libraries and eventually a remote

00:00:21,420 --> 00:00:25,289
distribution engine which was a Linux

00:00:23,789 --> 00:00:26,609
machine running a very controlled set of

00:00:25,289 --> 00:00:29,789
tools and libraries so this was really

00:00:26,609 --> 00:00:31,619
easy the modern world is not so easy

00:00:29,789 --> 00:00:34,950
so platforms and tool chains is how we

00:00:31,619 --> 00:00:37,110
are trying to bridge that gap so just

00:00:34,950 --> 00:00:38,489
first of all some some some notes some

00:00:37,110 --> 00:00:40,050
Oh some warnings

00:00:38,489 --> 00:00:41,700
most of what I'm going to talk about is

00:00:40,050 --> 00:00:43,920
actually employees in some of this stuff

00:00:41,700 --> 00:00:45,719
is still future work I'm gonna try to be

00:00:43,920 --> 00:00:47,969
clear about what is what but if it's not

00:00:45,719 --> 00:00:50,430
clear then let me know and I'll clarify

00:00:47,969 --> 00:00:52,350
on the documentation is actually live

00:00:50,430 --> 00:00:53,850
today I just thought this morning so

00:00:52,350 --> 00:00:57,300
there's now you platforms and a tool

00:00:53,850 --> 00:00:59,190
change section at Doc's basel build so

00:00:57,300 --> 00:01:00,809
you can take a look at that and again if

00:00:59,190 --> 00:01:02,460
that's not clear file bug because we'll

00:01:00,809 --> 00:01:05,519
fix it because this stuff you see on

00:01:02,460 --> 00:01:06,840
there is time for Q&A at the end I do

00:01:05,519 --> 00:01:08,130
try to go through like a pretty strict

00:01:06,840 --> 00:01:09,299
progression here and last time I gave

00:01:08,130 --> 00:01:10,950
this talk a lot of the answers to

00:01:09,299 --> 00:01:11,310
questions were yeah that's in the next

00:01:10,950 --> 00:01:13,619
slide

00:01:11,310 --> 00:01:15,750
so I'm hold on to your questions we both

00:01:13,619 --> 00:01:20,340
have time for them and let's go ahead

00:01:15,750 --> 00:01:24,930
and so it is a platform a platform is

00:01:20,340 --> 00:01:27,900
attempts to introduce in basil a native

00:01:24,930 --> 00:01:30,030
idea like an internal idea of a system

00:01:27,900 --> 00:01:31,530
that can execute code and we tend to

00:01:30,030 --> 00:01:33,540
talk about there being three different

00:01:31,530 --> 00:01:35,189
types of platforms on the host platform

00:01:33,540 --> 00:01:36,509
is where basil itself is running it's

00:01:35,189 --> 00:01:37,530
the platform they can execute the code

00:01:36,509 --> 00:01:40,409
that is basil

00:01:37,530 --> 00:01:42,060
there's the execution platform which is

00:01:40,409 --> 00:01:44,850
where the various tools are running the

00:01:42,060 --> 00:01:47,070
compilers the linkers the parser

00:01:44,850 --> 00:01:48,810
generators the whatever it is that that

00:01:47,070 --> 00:01:51,119
you guys are doing with generals that's

00:01:48,810 --> 00:01:53,220
the execution platform and the target

00:01:51,119 --> 00:01:56,040
platform is where the final thing you're

00:01:53,220 --> 00:01:56,790
building is going to run so these could

00:01:56,040 --> 00:01:59,100
be all of sudden it could be all

00:01:56,790 --> 00:02:00,329
different in like the the you know the

00:01:59,100 --> 00:02:02,369
prehistory case like I mentioned these

00:02:00,329 --> 00:02:04,020
were all exactly the same even

00:02:02,369 --> 00:02:05,790
frequently say I was building on my

00:02:04,020 --> 00:02:07,229
laptop earlier and I was running the

00:02:05,790 --> 00:02:08,670
binary I was building on my laptop so

00:02:07,229 --> 00:02:10,020
they're all the same on the other hand

00:02:08,670 --> 00:02:11,489
with remote execution the execution

00:02:10,020 --> 00:02:12,720
platform could be you know theoretically

00:02:11,489 --> 00:02:13,860
something different from your local

00:02:12,720 --> 00:02:15,870
machine you

00:02:13,860 --> 00:02:17,460
be building an Android binary that's

00:02:15,870 --> 00:02:18,960
going to run on a mobile device but

00:02:17,460 --> 00:02:20,400
you're running the compilers on your

00:02:18,960 --> 00:02:21,840
local machine there's a bunch of

00:02:20,400 --> 00:02:24,450
different possible permutations here and

00:02:21,840 --> 00:02:25,830
splitting up these ideas lets us cry and

00:02:24,450 --> 00:02:28,260
talk about those and think about those

00:02:25,830 --> 00:02:31,460
in a way that makes sense and not get

00:02:28,260 --> 00:02:34,050
confused about what we're referring to

00:02:31,460 --> 00:02:36,810
so we're talking about platforms again

00:02:34,050 --> 00:02:38,370
we have some terminology the way that we

00:02:36,810 --> 00:02:40,770
think about platform is it's a bunch of

00:02:38,370 --> 00:02:42,240
constraints it describes what the extra

00:02:40,770 --> 00:02:45,120
platform is there's constraint settings

00:02:42,240 --> 00:02:46,560
which is a property it could have there

00:02:45,120 --> 00:02:48,240
are a couple of available values but

00:02:46,560 --> 00:02:50,100
every platform has one single value for

00:02:48,240 --> 00:02:52,110
that there are the values which are the

00:02:50,100 --> 00:02:54,420
various options and the platform is the

00:02:52,110 --> 00:02:56,580
complete set of them so here's an

00:02:54,420 --> 00:02:59,790
example we could have a constraint

00:02:56,580 --> 00:03:03,209
setting named CPU may be one of the CPUs

00:02:59,790 --> 00:03:05,880
is a 64-bit x86 processor may be another

00:03:03,209 --> 00:03:08,040
one's an army may there's another

00:03:05,880 --> 00:03:09,750
constraint called has FPU so it doesn't

00:03:08,040 --> 00:03:11,239
have a floating-point um there's no and

00:03:09,750 --> 00:03:13,020
there's yes that's actually pretty basic

00:03:11,239 --> 00:03:16,230
there's a couple things about these

00:03:13,020 --> 00:03:17,910
these are basal rules so you can define

00:03:16,230 --> 00:03:20,130
your own constraint settings you could

00:03:17,910 --> 00:03:21,570
define your own constraint values you

00:03:20,130 --> 00:03:23,250
could define your own constraint values

00:03:21,570 --> 00:03:25,830
in a different package than the setting

00:03:23,250 --> 00:03:28,860
so if you are working on a new

00:03:25,830 --> 00:03:30,870
development board and it has a PPC you

00:03:28,860 --> 00:03:32,880
know next generation chip you do your

00:03:30,870 --> 00:03:34,890
own constraint value name equals next

00:03:32,880 --> 00:03:38,100
generation PPC setting is you know

00:03:34,890 --> 00:03:40,620
whatever the path is to the CPU there

00:03:38,100 --> 00:03:42,600
basil rules so visibility rules apply if

00:03:40,620 --> 00:03:44,400
you're working on some kind of a new

00:03:42,600 --> 00:03:45,660
constraint setting and you don't want

00:03:44,400 --> 00:03:46,709
your co-workers to play with it yet

00:03:45,660 --> 00:03:49,380
because maybe it's still in development

00:03:46,709 --> 00:03:51,840
you put the privacy visibility on there

00:03:49,380 --> 00:03:53,250
and they don't have visibility there you

00:03:51,840 --> 00:03:55,320
can there's a bunch of different things

00:03:53,250 --> 00:03:57,330
there so and this is what I'm saying

00:03:55,320 --> 00:03:59,400
when I'm saying we're getting directly

00:03:57,330 --> 00:04:00,840
into basil we're making this in instead

00:03:59,400 --> 00:04:02,610
of having some kind of idea that we're

00:04:00,840 --> 00:04:06,989
college together out of other parts like

00:04:02,610 --> 00:04:07,890
this is native to the actual code so

00:04:06,989 --> 00:04:08,850
here's an example of two different

00:04:07,890 --> 00:04:11,400
platforms

00:04:08,850 --> 00:04:13,380
maybe my desktop is you know a 64-bit

00:04:11,400 --> 00:04:14,760
x86 of course it's got fully point units

00:04:13,380 --> 00:04:16,109
like that's a patek got like a bunch of

00:04:14,760 --> 00:04:18,750
different CPUs in it but they're all the

00:04:16,109 --> 00:04:19,799
same so we can pretend I'm a I've got a

00:04:18,750 --> 00:04:21,239
dev board that I'm going to be

00:04:19,799 --> 00:04:22,979
installing something on the Raspberry Pi

00:04:21,239 --> 00:04:24,210
or whatever and it's running an arm and

00:04:22,979 --> 00:04:26,099
there's no floating point on there so

00:04:24,210 --> 00:04:29,330
the compiler needs to know that there's

00:04:26,099 --> 00:04:29,330
no floating point when it's doing code

00:04:31,580 --> 00:04:36,210
so for the host platform basil's

00:04:34,740 --> 00:04:38,460
actually running there so it depth-x are

00:04:36,210 --> 00:04:39,960
pretty simple it can auto detect some

00:04:38,460 --> 00:04:42,660
feature so good auto detect to the OS

00:04:39,960 --> 00:04:44,070
and the CPU and actually um it does this

00:04:42,660 --> 00:04:46,740
for the host in the target so the

00:04:44,070 --> 00:04:48,480
default values for the host platform and

00:04:46,740 --> 00:04:50,310
the target platform and the execution

00:04:48,480 --> 00:04:51,870
platform is that simple case I mentioned

00:04:50,310 --> 00:04:54,480
earlier where everything is on the same

00:04:51,870 --> 00:04:56,820
platform and there are special like

00:04:54,480 --> 00:04:58,380
magic platform values which will alter

00:04:56,820 --> 00:05:00,150
this at the OS and the CPU and set those

00:04:58,380 --> 00:05:01,890
for you so you don't have to auto define

00:05:00,150 --> 00:05:04,740
those and that's what you get so by

00:05:01,890 --> 00:05:06,120
default there is a platform set and it's

00:05:04,740 --> 00:05:07,710
got whatever your operating system or

00:05:06,120 --> 00:05:10,290
whatever your CPU is and this is based

00:05:07,710 --> 00:05:11,910
on this is based on base ability auto

00:05:10,290 --> 00:05:14,280
detect that there's a bunch of like I'm

00:05:11,910 --> 00:05:16,320
actual Java code that does that there's

00:05:14,280 --> 00:05:18,180
an enum in there it matches that will

00:05:16,320 --> 00:05:20,070
add new stuff as things get ported but

00:05:18,180 --> 00:05:24,180
that's kind of that that's the default

00:05:20,070 --> 00:05:25,860
right there so platform is great we can

00:05:24,180 --> 00:05:28,230
describe a platform that's awesome what

00:05:25,860 --> 00:05:29,520
do we do with it I don't know let's

00:05:28,230 --> 00:05:31,140
figure that out

00:05:29,520 --> 00:05:32,580
one example actually those of you who

00:05:31,140 --> 00:05:33,750
are the lightning talks yesterday would

00:05:32,580 --> 00:05:36,780
have seen Julie's presentation about

00:05:33,750 --> 00:05:38,190
using platforms with selects so with the

00:05:36,780 --> 00:05:40,110
work that she's done you can now put

00:05:38,190 --> 00:05:42,420
constraint values into a config setting

00:05:40,110 --> 00:05:44,400
use that in a select statement and if

00:05:42,420 --> 00:05:46,530
those constraint values match the

00:05:44,400 --> 00:05:48,360
current target platform that value get

00:05:46,530 --> 00:05:50,520
selected will have you chosen to select

00:05:48,360 --> 00:05:51,990
so that's one place Reena the other big

00:05:50,520 --> 00:05:56,370
thing that we're working on is tool

00:05:51,990 --> 00:05:59,010
chains conceptually a tool chain is just

00:05:56,370 --> 00:06:00,570
a bunch of like binaries scripts

00:05:59,010 --> 00:06:01,950
whatever it is and configuration always

00:06:00,570 --> 00:06:04,410
whatever you need to actually start

00:06:01,950 --> 00:06:06,930
running actions so maybe if it's you

00:06:04,410 --> 00:06:09,480
know your C++ compilers GCC and it needs

00:06:06,930 --> 00:06:11,700
to have this flag here to access system

00:06:09,480 --> 00:06:13,500
binary system libraries and it needs to

00:06:11,700 --> 00:06:14,610
have this leg here because you want all

00:06:13,500 --> 00:06:15,600
the warnings to show of course you want

00:06:14,610 --> 00:06:18,420
all the prongs to show

00:06:15,600 --> 00:06:20,880
maybe another tool chain is a JVM

00:06:18,420 --> 00:06:22,530
compiler so your JDK installed here and

00:06:20,880 --> 00:06:24,660
you've got some auxilary tools you know

00:06:22,530 --> 00:06:25,710
basically uses a jar and single jar for

00:06:24,660 --> 00:06:27,900
bunch of stuff so it needs to know where

00:06:25,710 --> 00:06:29,160
those are located you've got a flag

00:06:27,900 --> 00:06:31,380
there that says that you know I'm using

00:06:29,160 --> 00:06:32,810
source Vout source level 1.9 because

00:06:31,380 --> 00:06:36,420
you're on the cutting edge

00:06:32,810 --> 00:06:37,860
maybe another tool chain is for go you

00:06:36,420 --> 00:06:39,930
know you want to say this is where my go

00:06:37,860 --> 00:06:41,009
binder is installed I'm studying the go

00:06:39,930 --> 00:06:43,589
OS and go Arch

00:06:41,009 --> 00:06:45,210
to support where I'm compiling and what

00:06:43,589 --> 00:06:47,219
my target is so these are all different

00:06:45,210 --> 00:06:48,719
examples of tool chains that you could

00:06:47,219 --> 00:06:53,669
be defining and you could be using in

00:06:48,719 --> 00:06:55,589
your voice can read the slide we have

00:06:53,669 --> 00:06:56,909
this we have CC tool chain we have Java

00:06:55,589 --> 00:07:00,509
tool chain I'm a lot of these things

00:06:56,909 --> 00:07:01,680
exist but they're not unified CC tool

00:07:00,509 --> 00:07:04,889
changes using an entirely different

00:07:01,680 --> 00:07:07,439
mechanism than Java tool chain there's

00:07:04,889 --> 00:07:09,599
no there's no similarity between them

00:07:07,439 --> 00:07:11,279
you know CC tool chain is sitting on top

00:07:09,599 --> 00:07:12,539
of cross tool which everybody who's

00:07:11,279 --> 00:07:16,620
tried to do cross compilation just

00:07:12,539 --> 00:07:18,270
winced Java tool chain is a little bit

00:07:16,620 --> 00:07:20,039
simpler in the it just points to a Java

00:07:18,270 --> 00:07:21,149
base and you know it assumes that

00:07:20,039 --> 00:07:24,180
everything is installed there and ready

00:07:21,149 --> 00:07:26,069
to go but there's no you know the way

00:07:24,180 --> 00:07:28,199
you select one you set cross tool top

00:07:26,069 --> 00:07:30,539
for to select your cross tool for C+

00:07:28,199 --> 00:07:32,339
unless you're doing iOS development in

00:07:30,539 --> 00:07:34,199
which you need I Oh s cross tool top or

00:07:32,339 --> 00:07:35,939
maybe you're doing an Android binary you

00:07:34,199 --> 00:07:37,709
need a completely different flat or

00:07:35,939 --> 00:07:38,969
maybe you're building for Java and you

00:07:37,709 --> 00:07:41,069
want to use that like you know latest

00:07:38,969 --> 00:07:43,349
jdk so you're passing in java base and

00:07:41,069 --> 00:07:46,709
host java base and this is a lot of

00:07:43,349 --> 00:07:48,779
flags right so let's try to simplify

00:07:46,709 --> 00:07:50,309
things let's try to get a unified system

00:07:48,779 --> 00:07:53,639
and let's try to make it a little bit

00:07:50,309 --> 00:07:57,479
easier configuration so here's an

00:07:53,639 --> 00:07:59,729
example this is so I've actually I've

00:07:57,479 --> 00:08:01,589
landed tool trans support in the rust

00:07:59,729 --> 00:08:03,209
repository so if you're using rules for

00:08:01,589 --> 00:08:04,889
us you can use tool trains today this

00:08:03,209 --> 00:08:06,360
example is not 100% what's there it's

00:08:04,889 --> 00:08:08,729
kind of simplified for clarity but you

00:08:06,360 --> 00:08:11,479
can't see the point um so it's tool

00:08:08,729 --> 00:08:13,949
chain has a name obviously it's a basil

00:08:11,479 --> 00:08:16,860
it's got some compatible with these are

00:08:13,949 --> 00:08:18,479
constraints it describes where that tool

00:08:16,860 --> 00:08:20,819
chain can execute what the execution

00:08:18,479 --> 00:08:22,889
platform looks like and it ascribes what

00:08:20,819 --> 00:08:25,740
the target platform looks like it's this

00:08:22,889 --> 00:08:28,379
one you know running on x86 64 it's

00:08:25,740 --> 00:08:29,669
targeting x86 64 if you have a cross

00:08:28,379 --> 00:08:30,809
compiler you might have this be

00:08:29,669 --> 00:08:32,789
different maybe you know you have a

00:08:30,809 --> 00:08:36,180
cross compilation tool chain that runs

00:08:32,789 --> 00:08:38,219
on x86 64 and generates arm if you're

00:08:36,180 --> 00:08:39,779
running an arm cross compile um and then

00:08:38,219 --> 00:08:41,519
it's got a bunch of other properties and

00:08:39,779 --> 00:08:43,740
that's up to the person who's writing

00:08:41,519 --> 00:08:45,930
the ruleset so maybe you know for rust

00:08:43,740 --> 00:08:47,910
we have a compiler and I added this os

00:08:45,930 --> 00:08:49,740
target and variable and maybe there's

00:08:47,910 --> 00:08:51,149
another property there that describes

00:08:49,740 --> 00:08:53,130
like where the system libraries are

00:08:51,149 --> 00:08:54,420
installed or where the documentation

00:08:53,130 --> 00:08:56,550
generator is installed

00:08:54,420 --> 00:08:58,110
things like that it's up to whoever's

00:08:56,550 --> 00:09:00,120
writing the rules to figure out what

00:08:58,110 --> 00:09:02,630
configuration is necessary from my

00:09:00,120 --> 00:09:04,709
library for my rules for this language

00:09:02,630 --> 00:09:06,180
and here we have two different examples

00:09:04,709 --> 00:09:09,560
you know so here's the cross compile

00:09:06,180 --> 00:09:09,560
compilation example on the right there

00:09:09,980 --> 00:09:15,800
so there's a bunch of tool trains that

00:09:13,139 --> 00:09:18,209
you've defined in your build files

00:09:15,800 --> 00:09:20,040
you've got a library that's coming in

00:09:18,209 --> 00:09:21,269
this using it like a rust library a rust

00:09:20,040 --> 00:09:22,279
binary that needs to pick the tool

00:09:21,269 --> 00:09:24,300
saying how does that happen

00:09:22,279 --> 00:09:26,040
so there's a tool chain resolution

00:09:24,300 --> 00:09:28,320
process and this is employing in Basel

00:09:26,040 --> 00:09:30,899
the code is not super complicated

00:09:28,320 --> 00:09:33,000
although it's getting pretty sky framing

00:09:30,899 --> 00:09:34,199
so we could we could probably use some

00:09:33,000 --> 00:09:36,570
discussion sky frame about that but

00:09:34,199 --> 00:09:37,620
essentially there are three different

00:09:36,570 --> 00:09:39,930
inputs to the process

00:09:37,620 --> 00:09:42,690
there's the execution platform where is

00:09:39,930 --> 00:09:44,040
this tool chain going to run there's the

00:09:42,690 --> 00:09:45,990
target platform what am I trying to

00:09:44,040 --> 00:09:48,480
generate and there's the tool chain type

00:09:45,990 --> 00:09:50,610
well is this a rust tool chain a C++

00:09:48,480 --> 00:09:51,750
tool chain a go tool chain something

00:09:50,610 --> 00:09:52,800
else that what if you guys is going to

00:09:51,750 --> 00:09:55,019
write next week that I don't even know

00:09:52,800 --> 00:09:59,910
about so we need to have that content of

00:09:55,019 --> 00:10:01,680
each tool chain type so when you're

00:09:59,910 --> 00:10:03,839
doing your build you need to pass in

00:10:01,680 --> 00:10:05,490
some flags to describe your platforms

00:10:03,839 --> 00:10:08,339
this is telling basil what I'm building

00:10:05,490 --> 00:10:09,990
for um there's the host platform flag

00:10:08,339 --> 00:10:11,550
that describes your host platform you

00:10:09,990 --> 00:10:13,350
can use the default the default actually

00:10:11,550 --> 00:10:15,269
pretty good but if you have like some

00:10:13,350 --> 00:10:17,190
other kind of you know constraint you

00:10:15,269 --> 00:10:19,800
need your host platform to have you can

00:10:17,190 --> 00:10:21,120
set it there and describe it there's the

00:10:19,800 --> 00:10:22,560
experimental platform flag that

00:10:21,120 --> 00:10:24,449
describes what you're targeting again it

00:10:22,560 --> 00:10:26,670
defaults to the same machine that you're

00:10:24,449 --> 00:10:28,380
running baseline maybe that's fine or

00:10:26,670 --> 00:10:30,120
maybe your cross compiling so then you

00:10:28,380 --> 00:10:32,100
do need to say platforms equals and then

00:10:30,120 --> 00:10:34,740
a platform that describes your arm dev

00:10:32,100 --> 00:10:36,390
board that has no FPU and again these

00:10:34,740 --> 00:10:38,459
are rules that you're writing in your

00:10:36,390 --> 00:10:40,589
build file so it's very easy to just

00:10:38,459 --> 00:10:42,209
pass in the path there we will be taking

00:10:40,589 --> 00:10:43,470
these out of experimental shortly these

00:10:42,209 --> 00:10:45,540
are actually probably pretty stable at

00:10:43,470 --> 00:10:47,130
this point but I want to shake it down

00:10:45,540 --> 00:10:48,269
with a couple more a little bit longer

00:10:47,130 --> 00:10:49,589
just to make sure we don't need to

00:10:48,269 --> 00:10:51,000
change the semantics on them too much

00:10:49,589 --> 00:10:52,889
but they should be pretty stable at this

00:10:51,000 --> 00:10:57,329
point and we will be doing release notes

00:10:52,889 --> 00:10:59,839
if we do any changes right now the

00:10:57,329 --> 00:11:02,250
execution platform is the host platform

00:10:59,839 --> 00:11:04,260
basil is always running complet

00:11:02,250 --> 00:11:05,940
compilers other tools on the host

00:11:04,260 --> 00:11:07,769
platform you're in basil unless you're

00:11:05,940 --> 00:11:08,370
using remote execution there's a later

00:11:07,769 --> 00:11:10,560
slide about

00:11:08,370 --> 00:11:11,370
but obviously that kind of conceptually

00:11:10,560 --> 00:11:12,779
makes sense that we're going to

00:11:11,370 --> 00:11:15,089
eventually need a way to describe what

00:11:12,779 --> 00:11:22,860
the excuse environment looks like as a

00:11:15,089 --> 00:11:24,890
platform so we can select tool chains so

00:11:22,860 --> 00:11:27,750
the resolution process is pretty simple

00:11:24,890 --> 00:11:30,120
first we find all the tool chains that

00:11:27,750 --> 00:11:31,980
match the requested type I know we go

00:11:30,120 --> 00:11:33,990
through them and we check to see if the

00:11:31,980 --> 00:11:35,880
constraints that exact compatible with

00:11:33,990 --> 00:11:37,260
and targeting pedal with match the

00:11:35,880 --> 00:11:39,450
current either execution or target

00:11:37,260 --> 00:11:41,370
platform if they don't match we discard

00:11:39,450 --> 00:11:42,750
that and we don't consider it as soon as

00:11:41,370 --> 00:11:43,320
we find a tool chain that works we take

00:11:42,750 --> 00:11:45,990
that off

00:11:43,320 --> 00:11:47,820
so on there is a priority order and it's

00:11:45,990 --> 00:11:50,160
a deterministic process we said that a

00:11:47,820 --> 00:11:52,620
lot like during this conference we love

00:11:50,160 --> 00:11:53,760
deterministic processes in Basel because

00:11:52,620 --> 00:11:55,500
we want to make sure that we get the

00:11:53,760 --> 00:11:57,029
same results from these same inputs

00:11:55,500 --> 00:11:59,250
every time you run a build so it's very

00:11:57,029 --> 00:12:01,620
important for reproducibility that you

00:11:59,250 --> 00:12:04,170
always get the same tool chain so two

00:12:01,620 --> 00:12:06,300
different ways to register it tool chain

00:12:04,170 --> 00:12:07,800
there's a flag extra tool chains you

00:12:06,300 --> 00:12:09,750
just give it a list of labels of your

00:12:07,800 --> 00:12:10,890
tool chains and they get added in and

00:12:09,750 --> 00:12:13,230
then you add in at the front of the list

00:12:10,890 --> 00:12:14,730
so you can override and then there's a

00:12:13,230 --> 00:12:17,520
register tool chains function that you

00:12:14,730 --> 00:12:19,020
put in your workspace and base what this

00:12:17,520 --> 00:12:20,610
does is this tells basil hey this is a

00:12:19,020 --> 00:12:24,240
tool chain that I want you to consider

00:12:20,610 --> 00:12:26,850
using and that's the priority order is

00:12:24,240 --> 00:12:28,650
basically first the flag then what's the

00:12:26,850 --> 00:12:30,450
rest routines so if you need something

00:12:28,650 --> 00:12:31,950
to know if you want to temporarily test

00:12:30,450 --> 00:12:33,779
hey what if I use this you use extra

00:12:31,950 --> 00:12:40,470
tool chains it has higher priority than

00:12:33,779 --> 00:12:43,350
what's in your workspace so where are we

00:12:40,470 --> 00:12:45,000
right now the platforms are constraint

00:12:43,350 --> 00:12:47,310
constraint rules are in you can define

00:12:45,000 --> 00:12:48,690
platforms you can use them in selects

00:12:47,310 --> 00:12:52,980
you can use them a couple different

00:12:48,690 --> 00:12:54,839
places the tool chain definitions are in

00:12:52,980 --> 00:12:56,190
like that the fundamental providers and

00:12:54,839 --> 00:12:58,430
the all the stuff and they're the

00:12:56,190 --> 00:13:00,420
resolution process I mentioned is in um

00:12:58,430 --> 00:13:02,339
scarlett based tool chains are actually

00:13:00,420 --> 00:13:04,890
totally functional right now on the goat

00:13:02,339 --> 00:13:07,410
the rules go team has updated theirs to

00:13:04,890 --> 00:13:08,520
their system to use that and they

00:13:07,410 --> 00:13:11,220
haven't come complaining to me recently

00:13:08,520 --> 00:13:13,200
they seem pretty happy with it rust has

00:13:11,220 --> 00:13:14,880
been updated as well so that that's also

00:13:13,200 --> 00:13:17,430
an example of using tool chains there

00:13:14,880 --> 00:13:18,900
and anybody else here who is maintaining

00:13:17,430 --> 00:13:20,670
rules please talk to me cuz I'd like to

00:13:18,900 --> 00:13:21,960
get you onto tool chain so you can get

00:13:20,670 --> 00:13:23,550
the benefits from that you're you

00:13:21,960 --> 00:13:26,610
you get the benefits from that and it's

00:13:23,550 --> 00:13:28,200
not a huge amount of work if you have

00:13:26,610 --> 00:13:30,660
based on whatever your current rules are

00:13:28,200 --> 00:13:32,190
it's actually pretty simple we also have

00:13:30,660 --> 00:13:33,630
as just mentioned using platforms

00:13:32,190 --> 00:13:33,900
constraints and select is in there right

00:13:33,630 --> 00:13:36,960
now

00:13:33,900 --> 00:13:38,040
um now obviously if the Skyler stuff is

00:13:36,960 --> 00:13:39,360
working the questions what about the

00:13:38,040 --> 00:13:41,850
native rules and that's the part we

00:13:39,360 --> 00:13:44,220
don't have yet we are making progress on

00:13:41,850 --> 00:13:46,380
getting C++ rules converted to use tool

00:13:44,220 --> 00:13:47,760
chains and tool chain resolution it's a

00:13:46,380 --> 00:13:50,460
lot of work there's a lot of places

00:13:47,760 --> 00:13:52,260
where we have confused the tool trained

00:13:50,460 --> 00:13:54,180
part with the configuration part and

00:13:52,260 --> 00:13:55,830
reading constraints places there's a lot

00:13:54,180 --> 00:13:57,690
of people doing some great work to

00:13:55,830 --> 00:13:59,340
disentangle those to make that a little

00:13:57,690 --> 00:14:00,810
bit more straightforward so hopefully

00:13:59,340 --> 00:14:02,820
pretty soon we'll have that rolled out

00:14:00,810 --> 00:14:05,430
be able to use this same process to

00:14:02,820 --> 00:14:07,650
select a C++ tool Jake this will still

00:14:05,430 --> 00:14:09,240
be on top of crosstalk we are not we're

00:14:07,650 --> 00:14:12,930
not getting rid of cross tool at this

00:14:09,240 --> 00:14:14,580
point but it will mean that you can set

00:14:12,930 --> 00:14:16,350
up to your tool chains point into your

00:14:14,580 --> 00:14:17,850
different cross tool files and use

00:14:16,350 --> 00:14:18,930
platforms to select the proper one

00:14:17,850 --> 00:14:20,670
instead of having to figure out the

00:14:18,930 --> 00:14:24,270
right value passed across tool top and

00:14:20,670 --> 00:14:27,930
to CPU and to host CPU and to whatever

00:14:24,270 --> 00:14:29,790
the other flag is that I forgotten we've

00:14:27,930 --> 00:14:30,810
started looking into I've started

00:14:29,790 --> 00:14:32,700
looking into what's need to be done for

00:14:30,810 --> 00:14:34,680
Java so that's not as far along as C++

00:14:32,700 --> 00:14:36,540
it's also probably not as complicated

00:14:34,680 --> 00:14:38,910
I'm hoping we'll have to see how that

00:14:36,540 --> 00:14:40,110
goes but that should be the next event

00:14:38,910 --> 00:14:41,730
and after that we just need to keep

00:14:40,110 --> 00:14:43,590
going through like the native rules to

00:14:41,730 --> 00:14:45,510
get them all converted over on the goal

00:14:43,590 --> 00:14:47,310
is that all the native rules will be

00:14:45,510 --> 00:14:48,810
using tool chains all the skylark rules

00:14:47,310 --> 00:14:50,850
we using tool trains it'll be a unified

00:14:48,810 --> 00:14:55,530
ecosystem through the whole of basil

00:14:50,850 --> 00:14:57,300
process and that's actually I said so

00:14:55,530 --> 00:14:59,370
we're gonna update the native rules I

00:14:57,300 --> 00:15:00,870
don't know how many of you are using the

00:14:59,370 --> 00:15:02,550
environment group and the constraint

00:15:00,870 --> 00:15:04,830
that constraint system be compatible

00:15:02,550 --> 00:15:06,780
with we eventually want to replace that

00:15:04,830 --> 00:15:08,490
with platforms just so we again so we're

00:15:06,780 --> 00:15:10,230
using a unified system to describe that

00:15:08,490 --> 00:15:11,670
we need to do some more thinking about

00:15:10,230 --> 00:15:14,240
how that's going to work so that's going

00:15:11,670 --> 00:15:17,100
to happen but we're not in hi Austria um

00:15:14,240 --> 00:15:19,890
one thing that people always always

00:15:17,100 --> 00:15:21,600
always ask about well why do I need to

00:15:19,890 --> 00:15:23,070
pass platformers of flag I mean I knew

00:15:21,600 --> 00:15:26,010
that this pioneer I'm building is

00:15:23,070 --> 00:15:27,750
firmware for my board that goes into

00:15:26,010 --> 00:15:29,220
something here why can't I just say in

00:15:27,750 --> 00:15:31,470
the rule definition that that's the

00:15:29,220 --> 00:15:33,030
platform we would love to do that we

00:15:31,470 --> 00:15:35,130
want to do that that is on the roadmap

00:15:33,030 --> 00:15:35,820
but it's not in the short term because

00:15:35,130 --> 00:15:38,580
it requires

00:15:35,820 --> 00:15:40,110
everything that depends on everything

00:15:38,580 --> 00:15:41,820
that that top-level target depends on

00:15:40,110 --> 00:15:44,520
has to be aware of toolchains to make

00:15:41,820 --> 00:15:46,520
that work so we we definitely want to

00:15:44,520 --> 00:15:49,140
get there we don't know exactly where

00:15:46,520 --> 00:15:54,750
and the next slide is going to need the

00:15:49,140 --> 00:15:57,750
remote execution part so remote

00:15:54,750 --> 00:15:59,340
execution you got some kind of a server

00:15:57,750 --> 00:16:01,260
as we heard during the bill farm

00:15:59,340 --> 00:16:02,970
escutcheon there's some kind of a main

00:16:01,260 --> 00:16:04,350
service endpoint that you're talking to

00:16:02,970 --> 00:16:06,270
to say I want to do remote execution

00:16:04,350 --> 00:16:08,700
that probably has a couple of different

00:16:06,270 --> 00:16:10,560
workers attached to it each one of those

00:16:08,700 --> 00:16:12,630
will need a platform description that

00:16:10,560 --> 00:16:13,800
describes the various parts meal what's

00:16:12,630 --> 00:16:14,940
the operating system what's the

00:16:13,800 --> 00:16:17,070
architecture um

00:16:14,940 --> 00:16:20,100
what version of go is installed what

00:16:17,070 --> 00:16:21,480
version of Java is installed on each

00:16:20,100 --> 00:16:23,520
platform is going to need to have tool

00:16:21,480 --> 00:16:24,990
trains defined that works that matches

00:16:23,520 --> 00:16:28,200
with constraints that match that

00:16:24,990 --> 00:16:31,860
platform so you know on a worker that

00:16:28,200 --> 00:16:33,750
has you know in x86 CPU the clang

00:16:31,860 --> 00:16:37,050
compilers installed in this location the

00:16:33,750 --> 00:16:39,450
system libraries are here and then once

00:16:37,050 --> 00:16:40,620
that's working there and once we get all

00:16:39,450 --> 00:16:42,150
the plumbing in place which I'm actually

00:16:40,620 --> 00:16:44,160
doing some of those that work in like

00:16:42,150 --> 00:16:47,130
the next month or two you'll be able to

00:16:44,160 --> 00:16:49,860
do a remote build tell it these are my

00:16:47,130 --> 00:16:51,510
execution platforms and have basil

00:16:49,860 --> 00:16:53,610
figure okay well this is gonna run on

00:16:51,510 --> 00:16:54,810
one of those workers I've got a tool

00:16:53,610 --> 00:16:56,400
chain that describes where everything's

00:16:54,810 --> 00:16:58,170
installed on there let's generate

00:16:56,400 --> 00:17:00,450
actions that call the right compiler

00:16:58,170 --> 00:17:01,950
that pass in the right flags start up to

00:17:00,450 --> 00:17:02,970
the worker and they're like okay yeah

00:17:01,950 --> 00:17:04,950
I've got to bind you there I can run

00:17:02,970 --> 00:17:06,900
that for you sure and get the results

00:17:04,950 --> 00:17:09,240
back so there's going to be

00:17:06,900 --> 00:17:11,010
configuration involved that's kind of a

00:17:09,240 --> 00:17:12,810
given with from execution but the idea

00:17:11,010 --> 00:17:16,530
is that you can describe your workers

00:17:12,810 --> 00:17:18,300
and get out you know even with a

00:17:16,530 --> 00:17:19,920
heterogeneous environment that does not

00:17:18,300 --> 00:17:22,350
exactly match your local development

00:17:19,920 --> 00:17:25,530
system still get working actions

00:17:22,350 --> 00:17:28,440
cashable actions and get the remote

00:17:25,530 --> 00:17:30,810
execution to work properly this is going

00:17:28,440 --> 00:17:33,200
to be a long journey but I think we can

00:17:30,810 --> 00:17:33,200

YouTube URL: https://www.youtube.com/watch?v=TXwmwPB0i_Y


