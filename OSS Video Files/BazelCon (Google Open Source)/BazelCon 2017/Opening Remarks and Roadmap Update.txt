Title: Opening Remarks and Roadmap Update
Publication date: 2017-12-08
Playlist: BazelCon 2017
Description: 
	by Helen Altshuler, David Stanke, John Field and Ulf Adams (Bazel team)
Captions: 
	00:00:00,030 --> 00:00:05,370
welcome everyone welcome to our Basel

00:00:02,639 --> 00:00:08,700
conference focused on our users and

00:00:05,370 --> 00:00:10,740
contributors and we called it first

00:00:08,700 --> 00:00:12,809
annual Basel conference because we'd

00:00:10,740 --> 00:00:14,519
like to do it again and we'd like to do

00:00:12,809 --> 00:00:17,430
it again next year maybe in a bigger

00:00:14,519 --> 00:00:20,310
space this time we had to say no to

00:00:17,430 --> 00:00:22,890
quite a few registrants but really

00:00:20,310 --> 00:00:24,930
excited to see you all here and to see

00:00:22,890 --> 00:00:27,060
how much interest we got from our

00:00:24,930 --> 00:00:29,720
community and I'll take you through a

00:00:27,060 --> 00:00:32,489
little bit more about who we've got here

00:00:29,720 --> 00:00:35,610
my name is helen Altschuler and i am

00:00:32,489 --> 00:00:38,190
responsible for execution of engineering

00:00:35,610 --> 00:00:40,770
delivery for basel and also leading

00:00:38,190 --> 00:00:43,170
several other programs within the build

00:00:40,770 --> 00:00:46,530
and test part of the developer product

00:00:43,170 --> 00:00:47,309
groups of Google and I'd like to tell

00:00:46,530 --> 00:00:49,020
you a little bit more about this

00:00:47,309 --> 00:00:51,719
conference we started planning it

00:00:49,020 --> 00:00:55,230
sometime in May which is when sarin sent

00:00:51,719 --> 00:00:57,870
out a survey and got about 70 responses

00:00:55,230 --> 00:00:59,760
and it's at that time that you told us

00:00:57,870 --> 00:01:01,170
that you were less interested in hearing

00:00:59,760 --> 00:01:02,579
from our senior leaders and more

00:01:01,170 --> 00:01:04,830
interested in hearing from each other

00:01:02,579 --> 00:01:07,260
which is why this conference is packed

00:01:04,830 --> 00:01:08,640
with all of these talks but that said we

00:01:07,260 --> 00:01:10,260
do have my senior leaders and I'd like

00:01:08,640 --> 00:01:12,330
to introduce them and point out so that

00:01:10,260 --> 00:01:15,000
should you have broader questions you

00:01:12,330 --> 00:01:18,840
can you can speak with them melody mech

00:01:15,000 --> 00:01:22,280
fossils developer develop developer

00:01:18,840 --> 00:01:25,020
tools and signals director and Jeff Cox

00:01:22,280 --> 00:01:27,659
engineering director for build test and

00:01:25,020 --> 00:01:29,610
deploy tools here at Google and you'll

00:01:27,659 --> 00:01:33,299
hear more from my colleagues directly

00:01:29,610 --> 00:01:38,340
involved in this talk as well so with

00:01:33,299 --> 00:01:39,960
that let's see who we are but I really

00:01:38,340 --> 00:01:42,659
feel like basil is for everyone and

00:01:39,960 --> 00:01:46,860
we're well represented by many many

00:01:42,659 --> 00:01:48,750
industries here FinTech and atomic

00:01:46,860 --> 00:01:51,540
autonomous vehicles from startups to

00:01:48,750 --> 00:01:54,689
large enterprises we've got a number of

00:01:51,540 --> 00:01:56,820
AI companies and Internet companies

00:01:54,689 --> 00:01:59,399
software development companies media and

00:01:56,820 --> 00:02:01,770
so on and I really feel like this

00:01:59,399 --> 00:02:03,840
demonstrates that basil is for everyone

00:02:01,770 --> 00:02:05,729
because it's a it's a growing platform

00:02:03,840 --> 00:02:09,090
it's an open source platform where you

00:02:05,729 --> 00:02:12,390
can make it better with us I started my

00:02:09,090 --> 00:02:13,440
career developing in C++ with an make

00:02:12,390 --> 00:02:15,600
fall and trying to

00:02:13,440 --> 00:02:18,170
make sense of the clear make process and

00:02:15,600 --> 00:02:20,520
a really am big believer of basel

00:02:18,170 --> 00:02:22,950
especially given that experience and

00:02:20,520 --> 00:02:26,580
I've noticed how much how easy it is to

00:02:22,950 --> 00:02:31,290
adapt especially within the main

00:02:26,580 --> 00:02:32,730
language environments so here's a small

00:02:31,290 --> 00:02:34,650
listing of companies this is not

00:02:32,730 --> 00:02:36,240
everyone some of you didn't tell us that

00:02:34,650 --> 00:02:39,060
it's okay to put your company name on

00:02:36,240 --> 00:02:42,170
our list but we do ask you to help us

00:02:39,060 --> 00:02:45,480
grow user community and update your

00:02:42,170 --> 00:02:49,170
company name in our wiki and basil built

00:02:45,480 --> 00:02:50,550
and let us know and also let the

00:02:49,170 --> 00:02:54,690
community know that you're using basil

00:02:50,550 --> 00:02:58,200
and of course contribute and now basil

00:02:54,690 --> 00:03:00,180
count by the numbers we've got 240 plus

00:02:58,200 --> 00:03:01,800
attendees there will be more coming I

00:03:00,180 --> 00:03:06,750
think tomorrow and also throughout the

00:03:01,800 --> 00:03:10,770
day and from 65 organizations and that's

00:03:06,750 --> 00:03:12,360
about 60 companies and more open-source

00:03:10,770 --> 00:03:16,350
teams as well we've got kubernetes and

00:03:12,360 --> 00:03:20,250
tensorflow abseil and a whole bunch of

00:03:16,350 --> 00:03:24,000
others 30 presenters schedule is listed

00:03:20,250 --> 00:03:27,030
and Dave will cover that in a bit and 20

00:03:24,000 --> 00:03:29,640
talks so we're very excited to see you

00:03:27,030 --> 00:03:33,810
all here and to spend time talking about

00:03:29,640 --> 00:03:35,730
this so now oh and also what was really

00:03:33,810 --> 00:03:37,530
important to us was to make sure that

00:03:35,730 --> 00:03:40,260
our first user conference is really

00:03:37,530 --> 00:03:43,260
focused on people that use basil and

00:03:40,260 --> 00:03:46,860
care about basil and as a result we've

00:03:43,260 --> 00:03:50,940
got 60% of you actually using basil who

00:03:46,860 --> 00:03:52,590
we've got about 30% of you evaluating

00:03:50,940 --> 00:03:54,180
which is great we hope you will learn

00:03:52,590 --> 00:03:56,670
from each other and in this conference

00:03:54,180 --> 00:03:59,100
will help address some of the issues we

00:03:56,670 --> 00:04:01,200
also have office hours and schedule is

00:03:59,100 --> 00:04:04,170
posted outside as well as on our website

00:04:01,200 --> 00:04:07,620
and we welcome you to come this is where

00:04:04,170 --> 00:04:09,090
basil engineers will be able to answer

00:04:07,620 --> 00:04:10,830
your questions maybe even do some

00:04:09,090 --> 00:04:12,390
debugging on a fly so bring a laptop

00:04:10,830 --> 00:04:14,910
bring your questions and problems

00:04:12,390 --> 00:04:16,560
throughout the day today in tomorrow and

00:04:14,910 --> 00:04:20,430
check the schedule bye expertise on our

00:04:16,560 --> 00:04:22,020
website and those of you nine point one

00:04:20,430 --> 00:04:24,479
percent of you who are curious about

00:04:22,020 --> 00:04:27,210
basil we sure hope that there will be

00:04:24,479 --> 00:04:29,630
more follow ups from this conference

00:04:27,210 --> 00:04:33,060
as well and we'll probably need a bigger

00:04:29,630 --> 00:04:35,940
conference and the very biggest face

00:04:33,060 --> 00:04:39,539
next time so now tell us how you use

00:04:35,940 --> 00:04:42,150
basil so as I mentioned Basil's for

00:04:39,539 --> 00:04:45,180
everyone and it's also also they're very

00:04:42,150 --> 00:04:46,889
flexible and extensible with our skylark

00:04:45,180 --> 00:04:49,199
language which means you can use it on

00:04:46,889 --> 00:04:51,030
variety platforms and with variety of

00:04:49,199 --> 00:04:52,919
programming languages so last time for

00:04:51,030 --> 00:04:55,139
the main ones maybe it's just gonna wake

00:04:52,919 --> 00:04:59,509
up morning routine how many of you are

00:04:55,139 --> 00:05:06,229
using C++ alright that's a big group

00:04:59,509 --> 00:05:09,660
Java about the same interesting Scala

00:05:06,229 --> 00:05:12,270
smaller but yeah good friends we've got

00:05:09,660 --> 00:05:14,280
a lot of community contribution on Scala

00:05:12,270 --> 00:05:18,599
and you'll hear more from them and what

00:05:14,280 --> 00:05:20,039
about JavaScript all right and there's a

00:05:18,599 --> 00:05:25,680
talk on that as well

00:05:20,039 --> 00:05:27,389
and how about the Python yeah yeah we

00:05:25,680 --> 00:05:33,599
know there's a lot of you and we work in

00:05:27,389 --> 00:05:35,250
our Python story for sure alright and

00:05:33,599 --> 00:05:39,509
then what about language what about

00:05:35,250 --> 00:05:41,639
platforms so Linux obviously is one of

00:05:39,509 --> 00:05:44,490
the primary systems that many of our

00:05:41,639 --> 00:05:50,520
customers use so yeah that's so many of

00:05:44,490 --> 00:05:53,900
you but yes Apple okay Mac and anybody

00:05:50,520 --> 00:06:00,270
in any flavors all right and what about

00:05:53,900 --> 00:06:02,280
Android okay and Windows alright so

00:06:00,270 --> 00:06:03,930
Windows also is representing our office

00:06:02,280 --> 00:06:06,180
hours come by if you have questions it's

00:06:03,930 --> 00:06:10,400
no longer experimental it's just as beta

00:06:06,180 --> 00:06:13,080
as everything else in basil welcome and

00:06:10,400 --> 00:06:16,020
to tell you more about basil I'd like to

00:06:13,080 --> 00:06:18,000
invite John and all our engineering

00:06:16,020 --> 00:06:19,930
managers and they will tell you how it

00:06:18,000 --> 00:06:23,790
all began and where we are

00:06:19,930 --> 00:06:25,540
[Applause]

00:06:23,790 --> 00:06:29,570
[Music]

00:06:25,540 --> 00:06:33,260
mic drop yeah okay I can't possibly

00:06:29,570 --> 00:06:35,000
follow that all right so it's great to

00:06:33,260 --> 00:06:36,890
be her i'm john field I'm an engineering

00:06:35,000 --> 00:06:39,320
manager in New York I manage the blaze

00:06:36,890 --> 00:06:42,170
and basil team in New York somewhat

00:06:39,320 --> 00:06:43,760
unusually for Google we have very little

00:06:42,170 --> 00:06:47,740
presence in the Bay Area so we're all

00:06:43,760 --> 00:06:50,150
kind of visiting today the the German

00:06:47,740 --> 00:06:52,190
part of our team focuses on matters of

00:06:50,150 --> 00:06:56,360
efficiency and the New York part of the

00:06:52,190 --> 00:06:58,130
team focuses on matters of style no not

00:06:56,360 --> 00:07:03,010
really but we all we all do a little bit

00:06:58,130 --> 00:07:04,940
of everything actually so I wanted to

00:07:03,010 --> 00:07:07,280
let's see if this works

00:07:04,940 --> 00:07:09,230
yes so I want to tell you a little bit

00:07:07,280 --> 00:07:11,270
of about the back story behind Basel

00:07:09,230 --> 00:07:13,970
because I think it informs how we got

00:07:11,270 --> 00:07:15,890
where we are now some of the struggles

00:07:13,970 --> 00:07:18,170
we went through to get things to to work

00:07:15,890 --> 00:07:21,470
the way they do now and they may this

00:07:18,170 --> 00:07:24,980
this struggle may also inform how you

00:07:21,470 --> 00:07:26,620
are using and reacting to Basel so why

00:07:24,980 --> 00:07:29,450
you know why does history matter well

00:07:26,620 --> 00:07:30,920
Basil's design evolved in response to

00:07:29,450 --> 00:07:32,540
actual problems that were encountered

00:07:30,920 --> 00:07:34,850
people didn't just do this for the heck

00:07:32,540 --> 00:07:36,920
of it certainly one of those problems

00:07:34,850 --> 00:07:39,580
with Google's growth in terms of code

00:07:36,920 --> 00:07:42,290
and engineers but also this set of

00:07:39,580 --> 00:07:44,270
platforms tools and languages that basil

00:07:42,290 --> 00:07:50,390
supports has continued to evolve over

00:07:44,270 --> 00:07:52,220
time and and so Basil's design grew to

00:07:50,390 --> 00:07:53,630
accommodate that so we believe that your

00:07:52,220 --> 00:07:55,190
evolution of your requirements it's

00:07:53,630 --> 00:07:57,560
likely to be similar so hopefully this

00:07:55,190 --> 00:08:00,620
story will be resonate with you to some

00:07:57,560 --> 00:08:02,510
degree so a couple disclaimers up front

00:08:00,620 --> 00:08:04,220
I'm alighting a lot a lot a lot of

00:08:02,510 --> 00:08:07,010
details I will tell a variety of

00:08:04,220 --> 00:08:09,710
smallish lies hopefully most of them are

00:08:07,010 --> 00:08:11,690
on purpose a few I may have accidentally

00:08:09,710 --> 00:08:13,610
messed up something and hopefully the

00:08:11,690 --> 00:08:15,830
rest of the great team here will correct

00:08:13,610 --> 00:08:17,750
me I also won't unfortunately be able to

00:08:15,830 --> 00:08:19,880
single out all the awesome engineers who

00:08:17,750 --> 00:08:23,810
contributed both to the origins of basil

00:08:19,880 --> 00:08:26,090
and to its current set of functions so

00:08:23,810 --> 00:08:27,890
in addition to this being a history it's

00:08:26,090 --> 00:08:30,560
also a little bit of a love story I

00:08:27,890 --> 00:08:32,090
joined Google about six years ago I was

00:08:30,560 --> 00:08:35,659
working at the time on JavaScript tools

00:08:32,090 --> 00:08:38,419
not on on basil and if you would ask me

00:08:35,659 --> 00:08:40,519
I was thinking of joining Google about

00:08:38,419 --> 00:08:43,279
working on a build system I would have

00:08:40,519 --> 00:08:45,259
said well it's a solve problem it's

00:08:43,279 --> 00:08:47,690
really boring and besides everybody

00:08:45,259 --> 00:08:49,190
hates it because they never work so you

00:08:47,690 --> 00:08:53,660
know why would I want to work on such a

00:08:49,190 --> 00:08:55,279
thing but after using Basil's internal

00:08:53,660 --> 00:08:57,259
variant blaze which was hear from in a

00:08:55,279 --> 00:08:58,879
second I fell in love with it and I

00:08:57,259 --> 00:09:00,709
thought it I realized it was an awesome

00:08:58,879 --> 00:09:02,779
system and I'm really proud to have

00:09:00,709 --> 00:09:05,779
ended up on the team and I'm managing

00:09:02,779 --> 00:09:08,930
part of it okay so let's go back a

00:09:05,779 --> 00:09:12,170
little bit in time so back around the

00:09:08,930 --> 00:09:14,300
early days of Google Google had multiple

00:09:12,170 --> 00:09:15,920
projects from the beginning but it was

00:09:14,300 --> 00:09:18,259
all of the code for those projects was

00:09:15,920 --> 00:09:20,149
in a single repo what we now call a mono

00:09:18,259 --> 00:09:21,980
repo and there were no development

00:09:20,149 --> 00:09:24,920
branches the code was built at the time

00:09:21,980 --> 00:09:25,550
from head the the language world was

00:09:24,920 --> 00:09:29,060
pretty simple

00:09:25,550 --> 00:09:32,329
mostly C++ Python and bash and to build

00:09:29,060 --> 00:09:34,250
it all there was a single make file and

00:09:32,329 --> 00:09:35,750
this actually worked pretty well up to

00:09:34,250 --> 00:09:40,459
the point where Google had a couple of

00:09:35,750 --> 00:09:43,399
hundred engineers and then problems

00:09:40,459 --> 00:09:45,589
arose so about five years after Google's

00:09:43,399 --> 00:09:47,540
founding we realized that a single make

00:09:45,589 --> 00:09:48,620
file just doesn't scale as the company

00:09:47,540 --> 00:09:51,050
was scaling that's kind of obvious

00:09:48,620 --> 00:09:53,589
however there is a strong desire to

00:09:51,050 --> 00:09:56,149
maintain the ability to reference

00:09:53,589 --> 00:09:58,610
arbitrarily reference other projects

00:09:56,149 --> 00:10:00,290
code from within your project however

00:09:58,610 --> 00:10:01,910
due to the scaling issues we also wanted

00:10:00,290 --> 00:10:03,139
to hide certain amount of information so

00:10:01,910 --> 00:10:03,589
things don't get completely out of

00:10:03,139 --> 00:10:05,899
control

00:10:03,589 --> 00:10:08,269
so the solution at the time was to

00:10:05,899 --> 00:10:10,939
divide up the mono repo into what we now

00:10:08,269 --> 00:10:12,620
call packages build packages and the

00:10:10,939 --> 00:10:14,180
idea was pretty simple but I think it's

00:10:12,620 --> 00:10:15,680
one of these things in retrospect you

00:10:14,180 --> 00:10:19,309
you don't realize how powerful it is and

00:10:15,680 --> 00:10:21,259
until much later so this simple idea of

00:10:19,309 --> 00:10:23,589
having a build file demarcating the root

00:10:21,259 --> 00:10:26,930
of a package sort of tiling the depot

00:10:23,589 --> 00:10:28,550
and then the build file point contains a

00:10:26,930 --> 00:10:29,720
collection of targets that is a set of

00:10:28,550 --> 00:10:32,480
things that can be built and this is

00:10:29,720 --> 00:10:35,870
sort of the essential abstraction around

00:10:32,480 --> 00:10:37,100
which basil has evolved so most of you

00:10:35,870 --> 00:10:38,629
have seen this already I'm not going to

00:10:37,100 --> 00:10:39,800
dwell too much on the details but I

00:10:38,629 --> 00:10:43,040
think it's important just to remind

00:10:39,800 --> 00:10:46,160
everyone just sort of the ingredients of

00:10:43,040 --> 00:10:48,660
a build rule so as you know so consider

00:10:46,160 --> 00:10:50,520
a package

00:10:48,660 --> 00:10:51,900
directory and the repo calls full COO

00:10:50,520 --> 00:10:54,780
with a build file and let's say that

00:10:51,900 --> 00:10:57,510
build file contains a job a binary rule

00:10:54,780 --> 00:11:00,720
like the one you see up here so rules

00:10:57,510 --> 00:11:02,700
are targets or instances of these rules

00:11:00,720 --> 00:11:04,440
these rules are predefined abstractions

00:11:02,700 --> 00:11:06,960
and they define how something is built

00:11:04,440 --> 00:11:10,140
and then the name defines what is

00:11:06,960 --> 00:11:12,750
visible so in particular other build

00:11:10,140 --> 00:11:15,000
files can only reference from this

00:11:12,750 --> 00:11:18,060
particular package in this particular

00:11:15,000 --> 00:11:19,560
build rule foo which is this binary

00:11:18,060 --> 00:11:21,810
that's Java bionaire which is built

00:11:19,560 --> 00:11:23,670
which happens to also be in the food

00:11:21,810 --> 00:11:26,040
directory but it doesn't have to be and

00:11:23,670 --> 00:11:28,680
then an implicitly defined output of the

00:11:26,040 --> 00:11:30,810
bill called foo deploy jar so that's all

00:11:28,680 --> 00:11:33,870
that can happen so in this little bit of

00:11:30,810 --> 00:11:36,600
code here we have abstraction we have

00:11:33,870 --> 00:11:38,610
information hiding sort of the elements

00:11:36,600 --> 00:11:40,740
of a proper programming language if you

00:11:38,610 --> 00:11:42,270
will but it's embedded in the in the

00:11:40,740 --> 00:11:44,640
repo with everything else and it happens

00:11:42,270 --> 00:11:45,930
to use Python syntax but that is

00:11:44,640 --> 00:11:49,080
actually turned out to work pretty well

00:11:45,930 --> 00:11:51,000
but over time so rules are this critical

00:11:49,080 --> 00:11:54,600
abstraction this critical declarative

00:11:51,000 --> 00:11:58,050
thing and it's important this like like

00:11:54,600 --> 00:12:00,300
all good abstractions it hides that just

00:11:58,050 --> 00:12:03,240
enough but it reveals just enough so a

00:12:00,300 --> 00:12:04,950
rule defines what is built rather than

00:12:03,240 --> 00:12:06,690
the details of how it's using so that

00:12:04,950 --> 00:12:09,000
allows the implementation details of a

00:12:06,690 --> 00:12:12,030
rule to evolve independently of some

00:12:09,000 --> 00:12:13,770
uses of that rule it was a way of

00:12:12,030 --> 00:12:15,570
encapsulating best practices for

00:12:13,770 --> 00:12:18,090
generating code so there may be certain

00:12:15,570 --> 00:12:19,230
obscure command-line options or compiler

00:12:18,090 --> 00:12:20,460
needs well you don't need to worry about

00:12:19,230 --> 00:12:22,560
those if you're an ordinary user

00:12:20,460 --> 00:12:23,400
somebody else who defines that rule is

00:12:22,560 --> 00:12:26,610
going to tell you what those

00:12:23,400 --> 00:12:28,680
abstractions are it hides the details of

00:12:26,610 --> 00:12:30,660
build tools so maybe you realize that

00:12:28,680 --> 00:12:33,030
GCC is involved but there may be other

00:12:30,660 --> 00:12:34,650
tools and in certain complicated build

00:12:33,030 --> 00:12:36,930
processes that you really don't want to

00:12:34,650 --> 00:12:38,220
know about if you don't have to and it's

00:12:36,930 --> 00:12:40,530
a way of hiding those certainly the

00:12:38,220 --> 00:12:42,600
details of how they work a bill rule

00:12:40,530 --> 00:12:44,220
also allows validation of the parameters

00:12:42,600 --> 00:12:45,810
before the build even starts so there

00:12:44,220 --> 00:12:48,390
may be certain stupid things that the

00:12:45,810 --> 00:12:49,860
build system can call out and prevent

00:12:48,390 --> 00:12:52,050
you from hurting yourself before it

00:12:49,860 --> 00:12:54,960
actually starts invoking a whole bunch

00:12:52,050 --> 00:12:56,880
of tools and finally and probably most

00:12:54,960 --> 00:12:59,100
importantly it's a uniform mechanism for

00:12:56,880 --> 00:13:01,680
precisely defining dependencies and I'll

00:12:59,100 --> 00:13:04,350
get back to that in a second so

00:13:01,680 --> 00:13:06,930
we as this concept of the bill rule

00:13:04,350 --> 00:13:08,430
evolved in google it became a single

00:13:06,930 --> 00:13:11,550
source of truth for software

00:13:08,430 --> 00:13:13,079
construction across across Google's mono

00:13:11,550 --> 00:13:15,930
repo now that turned out to be pretty

00:13:13,079 --> 00:13:18,929
critical so there a couple of certain

00:13:15,930 --> 00:13:20,399
smaller observations that I think the

00:13:18,929 --> 00:13:22,889
people working on this realize a long

00:13:20,399 --> 00:13:24,240
the way one is it build tools or also

00:13:22,889 --> 00:13:27,329
build artifacts

00:13:24,240 --> 00:13:29,759
okay so tools can themselves be built so

00:13:27,329 --> 00:13:31,740
things like compilers linkers packages

00:13:29,759 --> 00:13:34,079
and so on they can be referenced as

00:13:31,740 --> 00:13:36,209
buying areas they could be version with

00:13:34,079 --> 00:13:38,129
the repo or they can be built from

00:13:36,209 --> 00:13:40,100
source as part of the build process and

00:13:38,129 --> 00:13:42,119
at Google we have traditionally done

00:13:40,100 --> 00:13:44,819
combinations of both building the tools

00:13:42,119 --> 00:13:46,559
from source from head especially if

00:13:44,819 --> 00:13:48,809
they're evolving rapidly or releasing

00:13:46,559 --> 00:13:50,670
them as binaries in the repo and then

00:13:48,809 --> 00:13:53,129
the lonely latest version is available

00:13:50,670 --> 00:13:55,589
so making build tools a first-class

00:13:53,129 --> 00:13:57,809
build artifact as was a key observation

00:13:55,589 --> 00:13:59,610
was made earlier in particular that

00:13:57,809 --> 00:14:01,559
means you treat tools like any other

00:13:59,610 --> 00:14:03,749
dependency and that's critical for

00:14:01,559 --> 00:14:07,800
correctness another key observation that

00:14:03,749 --> 00:14:10,470
the the the the wise founders of the pre

00:14:07,800 --> 00:14:12,389
prehistory of Basel came up with it was

00:14:10,470 --> 00:14:14,610
the notion that a unit test is really

00:14:12,389 --> 00:14:16,139
just a form of tool so what happens when

00:14:14,610 --> 00:14:18,509
you run a unit test well you build the

00:14:16,139 --> 00:14:20,399
system under test you build the suite of

00:14:18,509 --> 00:14:23,370
tests the code for the test stage a unit

00:14:20,399 --> 00:14:26,129
test you build a test Runner maybe or

00:14:23,370 --> 00:14:28,110
maybe it's pre-built but you you it's a

00:14:26,129 --> 00:14:30,120
build artifact itself and then that test

00:14:28,110 --> 00:14:31,980
slender runner loads and runs the test

00:14:30,120 --> 00:14:34,079
suite the system under under tests and

00:14:31,980 --> 00:14:36,059
generates a long right so this is really

00:14:34,079 --> 00:14:37,589
you know abstractly a test is really no

00:14:36,059 --> 00:14:39,410
different from anything else that is

00:14:37,589 --> 00:14:41,490
built in particular test outputs

00:14:39,410 --> 00:14:43,559
particularly form unit tests which are

00:14:41,490 --> 00:14:45,059
usually repeatable is just another build

00:14:43,559 --> 00:14:46,829
output and therefore it can be cached

00:14:45,059 --> 00:14:49,309
and that gives you a lot of power in

00:14:46,829 --> 00:14:52,259
building CI around the system like this

00:14:49,309 --> 00:14:53,370
so I want to get back again let me just

00:14:52,259 --> 00:14:55,170
stop for a second and point out I

00:14:53,370 --> 00:14:56,490
haven't talked about basil at all yet in

00:14:55,170 --> 00:14:59,939
fact what I'm talking about

00:14:56,490 --> 00:15:01,290
predates the existence of basil it was a

00:14:59,939 --> 00:15:03,929
set of concepts that was developed

00:15:01,290 --> 00:15:05,519
independently in predated basil so that

00:15:03,929 --> 00:15:07,170
that's why this concept of a build file

00:15:05,519 --> 00:15:10,829
and build rule and target and so on is

00:15:07,170 --> 00:15:12,720
so important so by adding this extra

00:15:10,829 --> 00:15:15,240
level of abstraction build rules this

00:15:12,720 --> 00:15:15,840
was a key this gives us a the ability to

00:15:15,240 --> 00:15:18,600
define

00:15:15,840 --> 00:15:20,310
Dependencies precisely right so that's a

00:15:18,600 --> 00:15:22,680
key for correctness of bills you have no

00:15:20,310 --> 00:15:24,180
implicit flow of information that that

00:15:22,680 --> 00:15:26,310
the system that's doing the build is

00:15:24,180 --> 00:15:28,470
unaware of or it just happens to work on

00:15:26,310 --> 00:15:30,930
some platforms because the information

00:15:28,470 --> 00:15:32,550
is represented dependency information is

00:15:30,930 --> 00:15:34,800
represented precisely and build rules

00:15:32,550 --> 00:15:36,300
it's a key to performance because if you

00:15:34,800 --> 00:15:38,190
know where all the information needs to

00:15:36,300 --> 00:15:40,290
flow and know accurately where it's

00:15:38,190 --> 00:15:41,880
flowing you can paralyze things better

00:15:40,290 --> 00:15:45,870
and you can increment lies these better

00:15:41,880 --> 00:15:47,580
so correctness and performance is really

00:15:45,870 --> 00:15:49,440
go hand in hand it goes hand in hand

00:15:47,580 --> 00:15:52,140
because it's built on the foundation of

00:15:49,440 --> 00:15:53,610
precise dependency information precise

00:15:52,140 --> 00:15:56,100
dependencies they allow you to trigger

00:15:53,610 --> 00:15:58,470
tests optimally only when dependent code

00:15:56,100 --> 00:15:59,820
is committed it allows it has other

00:15:58,470 --> 00:16:01,920
interesting side effects like allowing

00:15:59,820 --> 00:16:03,779
minimal release branches so think of as

00:16:01,920 --> 00:16:05,940
Google is growing and has this big mono

00:16:03,779 --> 00:16:08,190
repo you want to do a release you want

00:16:05,940 --> 00:16:10,260
to branch the code bet it and then push

00:16:08,190 --> 00:16:11,730
a binary out well if you would have to

00:16:10,260 --> 00:16:14,130
clone the whole repo that's pretty

00:16:11,730 --> 00:16:16,470
expensive operation but if you know what

00:16:14,130 --> 00:16:18,330
all the sources your binary depends on

00:16:16,470 --> 00:16:20,310
accurately you can immediately generate

00:16:18,330 --> 00:16:23,630
a minimal release branch so there are

00:16:20,310 --> 00:16:26,280
lots of nice side effects and and happy

00:16:23,630 --> 00:16:29,510
consequences of precise dependency

00:16:26,280 --> 00:16:31,589
information also things like repo right

00:16:29,510 --> 00:16:33,480
refactoring tools are possible when you

00:16:31,589 --> 00:16:34,950
can track down all the dependencies that

00:16:33,480 --> 00:16:37,410
are affected by some code you're

00:16:34,950 --> 00:16:39,839
changing it's possible built analysis

00:16:37,410 --> 00:16:42,089
tools for code reviews that basically

00:16:39,839 --> 00:16:44,310
piggyback on top of the build system so

00:16:42,089 --> 00:16:46,680
Google as it has evolved now does all

00:16:44,310 --> 00:16:48,210
these things but it took a long time to

00:16:46,680 --> 00:16:50,100
get there it wasn't overnight it wasn't

00:16:48,210 --> 00:16:52,140
like but all of these things popped into

00:16:50,100 --> 00:16:56,460
somebody's head this is this evolved in

00:16:52,140 --> 00:16:57,870
response to particular needs so let's go

00:16:56,460 --> 00:16:59,760
back to that single make file what

00:16:57,870 --> 00:17:02,160
happened to that well what it got

00:16:59,760 --> 00:17:05,010
replaced by is a is a total called G

00:17:02,160 --> 00:17:07,679
config and this was a shared script that

00:17:05,010 --> 00:17:10,079
generated make files from Bill files and

00:17:07,679 --> 00:17:12,110
the logic for each build rule was

00:17:10,079 --> 00:17:15,300
implemented directly in Python and

00:17:12,110 --> 00:17:17,550
generated make files from Python users

00:17:15,300 --> 00:17:20,520
could also write macros again in actual

00:17:17,550 --> 00:17:23,069
Python which expanded to rules so the

00:17:20,520 --> 00:17:25,620
simple idea but again scalability

00:17:23,069 --> 00:17:28,919
problems start to arise by around 200

00:17:25,620 --> 00:17:30,879
2006 so

00:17:28,919 --> 00:17:33,129
instead of having single make file

00:17:30,879 --> 00:17:35,590
you're generating a make file on demand

00:17:33,129 --> 00:17:37,480
for each build package the problem with

00:17:35,590 --> 00:17:39,879
that approach is the some of those make

00:17:37,480 --> 00:17:42,429
files becomes quadratic in the size of

00:17:39,879 --> 00:17:44,559
the repo and even in 2006 over ten years

00:17:42,429 --> 00:17:47,259
ago very large make files were not

00:17:44,559 --> 00:17:49,210
uncommon the Python code that was used

00:17:47,259 --> 00:17:50,980
to generate these make files was slow it

00:17:49,210 --> 00:17:52,629
was single threaded Python is

00:17:50,980 --> 00:17:54,789
notoriously hard to paralyze in any

00:17:52,629 --> 00:17:56,859
reasonable way and then since it

00:17:54,789 --> 00:17:59,109
generated make files there the usual

00:17:56,859 --> 00:18:00,700
well-known problems with make like not

00:17:59,109 --> 00:18:02,679
knowing to rebuild when a tool is

00:18:00,700 --> 00:18:04,480
updated it didn't make make doesn't know

00:18:02,679 --> 00:18:08,169
that have a distinction between tools

00:18:04,480 --> 00:18:11,470
and regular build artifacts stale output

00:18:08,169 --> 00:18:13,090
files could that are no longer produced

00:18:11,470 --> 00:18:14,739
by rule could still be consumed by a

00:18:13,090 --> 00:18:16,269
downstream artifact and so on and so

00:18:14,739 --> 00:18:18,789
forth so although the usual pathologies

00:18:16,269 --> 00:18:20,649
were made with make occurred and then

00:18:18,789 --> 00:18:24,249
layered onto that were scalability

00:18:20,649 --> 00:18:26,590
problems with G config o then there are

00:18:24,249 --> 00:18:28,029
other complications so I gave painted

00:18:26,590 --> 00:18:29,619
this really nice picture of precise

00:18:28,029 --> 00:18:31,389
dependencies all the benefits that come

00:18:29,619 --> 00:18:33,309
from that sounds really good well it

00:18:31,389 --> 00:18:35,409
turns out when you're generating make

00:18:33,309 --> 00:18:37,269
files people make short cuts and people

00:18:35,409 --> 00:18:38,879
make mistakes so they're generated make

00:18:37,269 --> 00:18:42,730
files often contain hidden dependencies

00:18:38,879 --> 00:18:45,369
make semantics for scheduling actions is

00:18:42,730 --> 00:18:47,139
very conservative because it needs to

00:18:45,369 --> 00:18:48,429
worry about these implicit dependencies

00:18:47,139 --> 00:18:52,659
or people often took advantage of

00:18:48,429 --> 00:18:54,399
implicit dependencies to in order to

00:18:52,659 --> 00:18:55,869
ensure correctness so even though we

00:18:54,399 --> 00:18:57,850
added this level of abstraction it's

00:18:55,869 --> 00:18:59,830
promised in terms of bil father's

00:18:57,850 --> 00:19:01,480
promise wasn't was was not fully

00:18:59,830 --> 00:19:03,369
realized due to the way it was

00:19:01,480 --> 00:19:05,049
implemented by G config she can take

00:19:03,369 --> 00:19:06,759
itself as you can imagine as Google it's

00:19:05,049 --> 00:19:08,649
growing also becomes a hairball of code

00:19:06,759 --> 00:19:11,169
we need to support languages other than

00:19:08,649 --> 00:19:13,419
C++ and Python and stuff multiple

00:19:11,169 --> 00:19:15,129
hardware platforms arise like think

00:19:13,419 --> 00:19:17,499
mobile devices and the complications

00:19:15,129 --> 00:19:18,489
therein people start using IDE s and

00:19:17,499 --> 00:19:20,590
more and more particularly Java

00:19:18,489 --> 00:19:22,419
developers those it didn't play well

00:19:20,590 --> 00:19:26,200
with all the machinery we built around G

00:19:22,419 --> 00:19:28,269
config so around 2007 now we're

00:19:26,200 --> 00:19:31,179
approaching going from prehistory to

00:19:28,269 --> 00:19:33,429
history a thing called blaze is launched

00:19:31,179 --> 00:19:36,340
and for those of you don't who know

00:19:33,429 --> 00:19:38,019
blaze is still the internal name of the

00:19:36,340 --> 00:19:41,109
tool that is externally known as basil

00:19:38,019 --> 00:19:41,830
in 2007 somebody had this fabulous sort

00:19:41,109 --> 00:19:44,409
of 19

00:19:41,830 --> 00:19:47,440
nice font this was the act and actual

00:19:44,409 --> 00:19:49,749
logo there sadly we decided not to

00:19:47,440 --> 00:19:51,759
retain it for Basel but I think it's

00:19:49,749 --> 00:19:54,340
it's still pretty cool it's sort of like

00:19:51,759 --> 00:19:57,070
a maybe an 80s video game font or

00:19:54,340 --> 00:19:59,019
something so at the time there are lots

00:19:57,070 --> 00:20:01,440
of people around Google trying to fix

00:19:59,019 --> 00:20:03,639
this build problem thing that I've been

00:20:01,440 --> 00:20:06,269
mentioning earlier so there are many

00:20:03,639 --> 00:20:08,799
competing tools lots of interesting

00:20:06,269 --> 00:20:10,600
synergy between engineers working on

00:20:08,799 --> 00:20:12,879
competing technologies I wish I could go

00:20:10,600 --> 00:20:15,159
into it maybe when we write the book or

00:20:12,879 --> 00:20:18,070
something will we'll go into the details

00:20:15,159 --> 00:20:19,960
but blaze immerse is the winner from a

00:20:18,070 --> 00:20:22,299
bunch of competing Google technologies

00:20:19,960 --> 00:20:23,980
and they were all intended to address

00:20:22,299 --> 00:20:25,720
this G config scalability correctness

00:20:23,980 --> 00:20:28,539
problems but none of them proposed to

00:20:25,720 --> 00:20:30,369
get rid of the basic concept of build

00:20:28,539 --> 00:20:32,529
files bill rules and so on that was a

00:20:30,369 --> 00:20:35,830
successful concept it was just the

00:20:32,529 --> 00:20:37,769
implementation was was lacking so what

00:20:35,830 --> 00:20:40,029
was blaze well it was a native

00:20:37,769 --> 00:20:41,289
implementation of G config build rules

00:20:40,029 --> 00:20:43,509
made it in the sense that it wasn't

00:20:41,289 --> 00:20:45,220
actually Python code anymore even though

00:20:43,509 --> 00:20:47,499
the syntax of build rules was still

00:20:45,220 --> 00:20:49,749
Python the implementation was now in

00:20:47,499 --> 00:20:51,850
Java Python was actually still retained

00:20:49,749 --> 00:20:54,970
until very very recently in Google like

00:20:51,850 --> 00:20:57,580
six months ago to generate whatever

00:20:54,970 --> 00:20:58,929
user-defined build macros so Python was

00:20:57,580 --> 00:21:03,369
only retired from our build system

00:20:58,929 --> 00:21:04,779
altogether quite recently so you've

00:21:03,369 --> 00:21:06,879
probably seen elements of this I won't

00:21:04,779 --> 00:21:08,320
go into a ton of detail here but it's

00:21:06,879 --> 00:21:10,330
important to mention that a key

00:21:08,320 --> 00:21:13,480
architectural decision the early blaze

00:21:10,330 --> 00:21:15,999
developers made was to treat blaze as a

00:21:13,480 --> 00:21:18,940
kind of compiler but takes build files

00:21:15,999 --> 00:21:21,190
and generates three logical grass

00:21:18,940 --> 00:21:22,720
internally that the details are a little

00:21:21,190 --> 00:21:25,119
more complicated but not much more

00:21:22,720 --> 00:21:27,909
complicated so they're key three key

00:21:25,119 --> 00:21:29,710
abstractions here one is the notion of a

00:21:27,909 --> 00:21:31,570
target graph which is basically just the

00:21:29,710 --> 00:21:33,820
obvious graph of build targets derived

00:21:31,570 --> 00:21:38,200
from build files so that's that was made

00:21:33,820 --> 00:21:40,330
explicit in the implementation there is

00:21:38,200 --> 00:21:43,049
also the notion of a configured target

00:21:40,330 --> 00:21:44,739
graph so that was the realization that

00:21:43,049 --> 00:21:46,210
targeting different plat

00:21:44,739 --> 00:21:48,220
you might want to have the same code but

00:21:46,210 --> 00:21:50,710
target different platforms or execute on

00:21:48,220 --> 00:21:52,779
different platforms so the commotions of

00:21:50,710 --> 00:21:55,539
a configuration is some contextual

00:21:52,779 --> 00:21:56,080
information that's added to the target

00:21:55,539 --> 00:21:57,850
graph

00:21:56,080 --> 00:21:59,200
augmented the target graph and then

00:21:57,850 --> 00:22:01,510
Able's that graph to have additional

00:21:59,200 --> 00:22:03,280
information about where the code or how

00:22:01,510 --> 00:22:05,350
the code is going to be used and finally

00:22:03,280 --> 00:22:07,000
all of this is converted under the

00:22:05,350 --> 00:22:08,350
covers by build rules and no so-called

00:22:07,000 --> 00:22:10,870
action graph and the action graph

00:22:08,350 --> 00:22:13,600
structure can look quite different from

00:22:10,870 --> 00:22:15,070
the actual the card graph the configured

00:22:13,600 --> 00:22:16,990
target ref but these these three

00:22:15,070 --> 00:22:17,320
concepts while they've evolved quite a

00:22:16,990 --> 00:22:19,540
lot

00:22:17,320 --> 00:22:22,320
under the cover I think helped the

00:22:19,540 --> 00:22:25,000
architecture of blaze scale and

00:22:22,320 --> 00:22:29,230
kept-kept the sort of users conceptually

00:22:25,000 --> 00:22:31,480
honest in the process so once this

00:22:29,230 --> 00:22:33,540
oblate remember blaze at this stage was

00:22:31,480 --> 00:22:35,800
basically a compiler build files in

00:22:33,540 --> 00:22:37,930
action grass out and once you have this

00:22:35,800 --> 00:22:39,940
action graph abstraction thing you can

00:22:37,930 --> 00:22:41,710
execute code locally which was

00:22:39,940 --> 00:22:45,460
originally the way blaze was used or

00:22:41,710 --> 00:22:47,290
later remotely so these cores here could

00:22:45,460 --> 00:22:49,180
be local cores on your local machine

00:22:47,290 --> 00:22:50,830
they could be remote cause because the

00:22:49,180 --> 00:22:53,590
abstractions were sufficiently strong

00:22:50,830 --> 00:22:55,300
that that kind of it was easy to move

00:22:53,590 --> 00:22:57,040
from local remote and I think that that

00:22:55,300 --> 00:22:58,570
that design decision has scaled pretty

00:22:57,040 --> 00:23:00,640
well a few other key design decisions

00:22:58,570 --> 00:23:03,670
the rule implementations could only

00:23:00,640 --> 00:23:06,310
access information via a constrained API

00:23:03,670 --> 00:23:07,840
I talked too early about configurations

00:23:06,310 --> 00:23:10,930
it's a context in which the target is

00:23:07,840 --> 00:23:14,050
built caching is based on file digests

00:23:10,930 --> 00:23:15,910
and there since there was a well-defined

00:23:14,050 --> 00:23:17,950
notion of dependency there is a tool

00:23:15,910 --> 00:23:20,200
called blaze query which is basil query

00:23:17,950 --> 00:23:23,530
down which allows a user to get insight

00:23:20,200 --> 00:23:25,210
into the target graph so just a couple

00:23:23,530 --> 00:23:28,360
other problems and then I'll close my

00:23:25,210 --> 00:23:30,910
segment of the discussion so blaze has

00:23:28,360 --> 00:23:32,770
continued to evolve since 2007 over the

00:23:30,910 --> 00:23:34,870
past 10 years and I would just give you

00:23:32,770 --> 00:23:36,400
a few small examples of how it's evolved

00:23:34,870 --> 00:23:38,860
in response to problems we've

00:23:36,400 --> 00:23:40,780
encountered so blazes original internal

00:23:38,860 --> 00:23:42,340
architecture the actual details of the

00:23:40,780 --> 00:23:44,470
code not those nice abstractions that

00:23:42,340 --> 00:23:46,270
gave it really was quite complex and it

00:23:44,470 --> 00:23:49,140
artificially limited opportunities for

00:23:46,270 --> 00:23:51,700
parallelism so three or four years ago

00:23:49,140 --> 00:23:54,670
major effort was undertaken to

00:23:51,700 --> 00:23:57,660
completely refactor the internal code to

00:23:54,670 --> 00:24:00,160
use what is basically a fancy functional

00:23:57,660 --> 00:24:01,990
programming execution engine which is

00:24:00,160 --> 00:24:04,090
parallel and increment incremental

00:24:01,990 --> 00:24:05,890
called sky frame if you look in the guts

00:24:04,090 --> 00:24:07,720
of the current basil code you'll see

00:24:05,890 --> 00:24:09,580
lots of instances of sky frame and it's

00:24:07,720 --> 00:24:12,370
a very nice abstraction that's

00:24:09,580 --> 00:24:13,690
in its value over time another problem

00:24:12,370 --> 00:24:15,520
we encountered was that Python

00:24:13,690 --> 00:24:17,610
pre-processing which as I said until six

00:24:15,520 --> 00:24:20,500
months or so was still part of Blaise

00:24:17,610 --> 00:24:23,230
became a bottleneck and builds and

00:24:20,500 --> 00:24:26,380
adding new build rules required

00:24:23,230 --> 00:24:28,030
recompiling blaze from Java source so

00:24:26,380 --> 00:24:29,740
that was a problem as we wanted more and

00:24:28,030 --> 00:24:32,200
more users to contribute to the system

00:24:29,740 --> 00:24:33,430
so we developed a dialect of sky Lord

00:24:32,200 --> 00:24:35,620
which was deterministic and

00:24:33,430 --> 00:24:37,960
parallelizable sorry a dialect of Python

00:24:35,620 --> 00:24:39,700
called sky alert which solved these

00:24:37,960 --> 00:24:41,710
problems and it replaces Python for

00:24:39,700 --> 00:24:45,700
macros and Java for rules and you hear

00:24:41,710 --> 00:24:48,370
more about this tomorrow I believe some

00:24:45,700 --> 00:24:51,220
other problems I des and certain classes

00:24:48,370 --> 00:24:54,280
of rules like proto rules needed access

00:24:51,220 --> 00:24:57,550
to information from an entire target sub

00:24:54,280 --> 00:24:59,380
graph so it's it's basically augmented

00:24:57,550 --> 00:25:01,270
information in the rest of the sub graph

00:24:59,380 --> 00:25:04,240
there is no good way to write such rules

00:25:01,270 --> 00:25:06,400
in the past so we invented a mechanism

00:25:04,240 --> 00:25:08,170
called aspects aspects allow defining

00:25:06,400 --> 00:25:10,450
rules that recursively introspect other

00:25:08,170 --> 00:25:13,480
rules and allow users to extract

00:25:10,450 --> 00:25:14,980
metadata from the bill graph for use and

00:25:13,480 --> 00:25:17,140
things like IDE integration and that's

00:25:14,980 --> 00:25:19,050
our main IDE integration mechanism now

00:25:17,140 --> 00:25:21,250
that's proven to be quite extensible

00:25:19,050 --> 00:25:22,840
finally there is a need to car get

00:25:21,250 --> 00:25:24,280
multiple platforms again for things like

00:25:22,840 --> 00:25:27,790
mobile

00:25:24,280 --> 00:25:30,010
readily however such code needs to have

00:25:27,790 --> 00:25:32,110
platform specific dependencies so we

00:25:30,010 --> 00:25:34,030
added a feature to basil and blaze that

00:25:32,110 --> 00:25:36,130
enables platform specific dependencies

00:25:34,030 --> 00:25:37,720
to be defined based on the value of the

00:25:36,130 --> 00:25:40,090
configuration so this is just a random

00:25:37,720 --> 00:25:43,390
example of the way basil has evolved

00:25:40,090 --> 00:25:48,250
from its early days in 2007 to the to

00:25:43,390 --> 00:25:50,680
the present so where are we by 2015 well

00:25:48,250 --> 00:25:51,790
we have a lot of code you can read the

00:25:50,680 --> 00:25:55,780
numbers here I'm not going to go over

00:25:51,790 --> 00:25:57,610
them and blaze the original which is the

00:25:55,780 --> 00:25:59,620
code of which is now in basil was

00:25:57,610 --> 00:26:03,220
working pretty well and it scaled pretty

00:25:59,620 --> 00:26:04,570
well to 30k engineers so in 2015 we

00:26:03,220 --> 00:26:05,830
decided to hey we have something pretty

00:26:04,570 --> 00:26:07,630
good here it stood the test of time

00:26:05,830 --> 00:26:09,280
we're going to open-source it and we're

00:26:07,630 --> 00:26:13,960
gonna call it basil just for to be

00:26:09,280 --> 00:26:16,480
perverse so so why don't we open source

00:26:13,960 --> 00:26:18,490
basil well we wanted we really really I

00:26:16,480 --> 00:26:22,520
told you I was a convert to this whole

00:26:18,490 --> 00:26:24,230
build thing and as a convert you want it

00:26:22,520 --> 00:26:26,210
and lots of the team wanted to

00:26:24,230 --> 00:26:27,620
evangelize so we wanted to tell the

00:26:26,210 --> 00:26:30,290
world about what we thought was a really

00:26:27,620 --> 00:26:32,210
cruel system we wanted to benefit

00:26:30,290 --> 00:26:34,040
benefit from insights of non Google

00:26:32,210 --> 00:26:35,630
users and experience and platforms that

00:26:34,040 --> 00:26:37,670
Google doesn't know about but might want

00:26:35,630 --> 00:26:39,470
to use in the future like Scala someday

00:26:37,670 --> 00:26:41,330
Google may use skål extensively we don't

00:26:39,470 --> 00:26:43,930
know but if we do will benefit from

00:26:41,330 --> 00:26:46,010
people who've contributed Scala rules

00:26:43,930 --> 00:26:47,840
there are increasing number of open

00:26:46,010 --> 00:26:50,450
source projects in Google that wanted to

00:26:47,840 --> 00:26:52,400
use and the Google wanted to use we're

00:26:50,450 --> 00:26:54,170
having a the same build system work

00:26:52,400 --> 00:26:56,840
internally and externally more-or-less

00:26:54,170 --> 00:26:58,610
was a big advantage and finally we

00:26:56,840 --> 00:27:00,830
wanted to foster an ecosystem with

00:26:58,610 --> 00:27:02,600
allied tools like execution services CI

00:27:00,830 --> 00:27:05,330
services now list of tools and so on

00:27:02,600 --> 00:27:08,060
around the notion of a bill graph so now

00:27:05,330 --> 00:27:10,370
blaze and basil evolved together most of

00:27:08,060 --> 00:27:12,770
the code is shared and features design

00:27:10,370 --> 00:27:14,930
for basil benefit Google and vice-versa

00:27:12,770 --> 00:27:18,560
so for example the windows port which

00:27:14,930 --> 00:27:20,840
was basically requested by our users is

00:27:18,560 --> 00:27:23,840
now used inside Google the same with a

00:27:20,840 --> 00:27:25,040
Mac and there I can mention any number

00:27:23,840 --> 00:27:27,890
of other features which external

00:27:25,040 --> 00:27:30,230
developers pushed us to add which are

00:27:27,890 --> 00:27:33,370
now widely used in Google so with that I

00:27:30,230 --> 00:27:33,370
will turn over the baton

00:27:37,410 --> 00:27:44,380
[Applause]

00:27:44,590 --> 00:27:51,110
hi everyone my name is I'm the tech lead

00:27:48,290 --> 00:27:52,730
and manager for the lace and basil team

00:27:51,110 --> 00:27:56,150
that is the part of the team that's

00:27:52,730 --> 00:27:57,980
based in Munich I joined the team eight

00:27:56,150 --> 00:27:59,960
and a half years ago I joined Google I

00:27:57,980 --> 00:28:02,510
didn't half years ago and for my first

00:27:59,960 --> 00:28:05,270
day there were two teams at Google who

00:28:02,510 --> 00:28:06,710
wanted to have me as an engineer and so

00:28:05,270 --> 00:28:09,500
I went to the manager of the first team

00:28:06,710 --> 00:28:12,590
and he was sitting his computer yeah you

00:28:09,500 --> 00:28:16,010
want to join my project oh it's really

00:28:12,590 --> 00:28:17,390
cool but you have to like it and then I

00:28:16,010 --> 00:28:19,610
went with the other manager into a

00:28:17,390 --> 00:28:21,890
meeting room and he said ok I'm gonna

00:28:19,610 --> 00:28:23,660
show you how Google does software and on

00:28:21,890 --> 00:28:25,490
his laptop he started to build of one of

00:28:23,660 --> 00:28:26,900
the Google services and then he went to

00:28:25,490 --> 00:28:28,700
the whiteboard and said you know what

00:28:26,900 --> 00:28:30,590
I'm building this let me show what's

00:28:28,700 --> 00:28:33,170
actually happening underneath and he

00:28:30,590 --> 00:28:36,020
drew up this fairly large distributed

00:28:33,170 --> 00:28:39,440
system we were already doing distributed

00:28:36,020 --> 00:28:43,160
at the time and I said boy that's cool

00:28:39,440 --> 00:28:45,050
that's what I've got to work on and I

00:28:43,160 --> 00:28:48,050
love it you know I've been here for all

00:28:45,050 --> 00:28:50,870
that time and I'm I really like my work

00:28:48,050 --> 00:28:56,570
so there we go

00:28:50,870 --> 00:29:00,110
I want to talk about sort of the the

00:28:56,570 --> 00:29:02,990
largest topic sort of the most important

00:29:00,110 --> 00:29:06,500
topics I've tried to narrowed it down to

00:29:02,990 --> 00:29:08,990
a couple of topics only and sort of

00:29:06,500 --> 00:29:11,800
where are we right now what's happened

00:29:08,990 --> 00:29:15,050
recently you know that sort of thing

00:29:11,800 --> 00:29:16,580
Skylark is John mentioned that already

00:29:15,050 --> 00:29:20,750
it's kind of is really a full

00:29:16,580 --> 00:29:22,550
programming language and we are in the

00:29:20,750 --> 00:29:25,160
process of cleaning that up and making

00:29:22,550 --> 00:29:26,809
it a really well specified language we

00:29:25,160 --> 00:29:28,460
are starting to see adoption of skylark

00:29:26,809 --> 00:29:30,710
outside of Basel

00:29:28,460 --> 00:29:33,380
for example buck is experimenting but

00:29:30,710 --> 00:29:37,160
there's a good system but they are

00:29:33,380 --> 00:29:40,280
experimenting with skylark one of the

00:29:37,160 --> 00:29:41,540
opportunities here is that if box

00:29:40,280 --> 00:29:43,550
implementation is sufficiently

00:29:41,540 --> 00:29:44,840
compatible with phases then some of the

00:29:43,550 --> 00:29:50,059
rules that are currently writing for

00:29:44,840 --> 00:29:52,640
basel may also be used for book another

00:29:50,059 --> 00:29:54,620
project is capybara which is an

00:29:52,640 --> 00:29:57,640
open-source tool built by google and

00:29:54,620 --> 00:30:00,590
they're using it to configure how to

00:29:57,640 --> 00:30:02,179
move code between internal and external

00:30:00,590 --> 00:30:04,250
right we have a lot of open source

00:30:02,179 --> 00:30:05,750
projects at Google and sometimes they

00:30:04,250 --> 00:30:07,670
need to have slightly different code

00:30:05,750 --> 00:30:11,510
internally then externally and so they

00:30:07,670 --> 00:30:13,540
use capybara to sort of push changes in

00:30:11,510 --> 00:30:16,880
and up both directions

00:30:13,540 --> 00:30:20,300
so if you are interested in skylark as a

00:30:16,880 --> 00:30:22,370
language and also in what you can do

00:30:20,300 --> 00:30:27,679
with it in basel check out the last talk

00:30:22,370 --> 00:30:29,270
tomorrow at 9:30 remote execution we

00:30:27,679 --> 00:30:32,059
believe remote execution is one of the

00:30:29,270 --> 00:30:37,340
biggest immediate benefits of using

00:30:32,059 --> 00:30:39,650
basil it works on Linux today it we

00:30:37,340 --> 00:30:41,660
believe it should be easy to run a

00:30:39,650 --> 00:30:44,690
distributed execution and caching system

00:30:41,660 --> 00:30:48,080
in the cloud or on-premise with a

00:30:44,690 --> 00:30:49,740
standardized API we've recently invested

00:30:48,080 --> 00:30:52,320
some time and unfortunately that was

00:30:49,740 --> 00:30:54,240
basically just before the the conference

00:30:52,320 --> 00:30:55,860
so we aren't able to talk about you know

00:30:54,240 --> 00:31:00,240
we didn't manage to put in and talk

00:30:55,860 --> 00:31:02,580
about it but we've been working on some

00:31:00,240 --> 00:31:05,100
prototypes and models to improve the

00:31:02,580 --> 00:31:08,640
current protocol and some just very

00:31:05,100 --> 00:31:11,220
briefly in order to do remote execution

00:31:08,640 --> 00:31:14,549
you meet both high bandwidth and low

00:31:11,220 --> 00:31:16,500
latency to get good performance you need

00:31:14,549 --> 00:31:19,320
to reduce round chips and chattiness

00:31:16,500 --> 00:31:21,299
where possible because it basil can't

00:31:19,320 --> 00:31:24,090
fire a lot of data over the pipe right

00:31:21,299 --> 00:31:26,520
it can really put a lot of pressure on

00:31:24,090 --> 00:31:28,679
your network and basil should avoid

00:31:26,520 --> 00:31:30,029
downloading output size as possible for

00:31:28,679 --> 00:31:31,919
example by only downloading them on

00:31:30,029 --> 00:31:33,750
demand or by only downloading that you

00:31:31,919 --> 00:31:35,130
know that the results of whatever you

00:31:33,750 --> 00:31:36,840
want to do if you run tests and maybe

00:31:35,130 --> 00:31:41,880
it's enough to just download the test

00:31:36,840 --> 00:31:44,039
log and the result beyond that we're

00:31:41,880 --> 00:31:45,360
also going to work on remote execute for

00:31:44,039 --> 00:31:47,549
Windows and Mac we want that for

00:31:45,360 --> 00:31:49,049
ourselves if nothing else but I'm sure

00:31:47,549 --> 00:31:50,640
there are people here who would also

00:31:49,049 --> 00:31:52,830
like to have that including

00:31:50,640 --> 00:31:55,470
cross-platform remote execution which

00:31:52,830 --> 00:31:57,510
means basil run say on Linux but can run

00:31:55,470 --> 00:31:59,970
a build on Windows I really want that

00:31:57,510 --> 00:32:01,440
for my daily work or make a change and I

00:31:59,970 --> 00:32:03,360
want to test you know check that the

00:32:01,440 --> 00:32:06,210
tests I write process on all three

00:32:03,360 --> 00:32:08,429
platforms if you want to know more about

00:32:06,210 --> 00:32:10,740
the upcoming API change our experiments

00:32:08,429 --> 00:32:16,740
talk to Jacob and Philip we're sitting

00:32:10,740 --> 00:32:18,390
here in the front row alright so in

00:32:16,740 --> 00:32:20,220
order to use remote execution you also

00:32:18,390 --> 00:32:22,710
need a service that offers remote

00:32:20,220 --> 00:32:26,610
execution there are currently two

00:32:22,710 --> 00:32:28,710
implementations that we know of there is

00:32:26,610 --> 00:32:30,029
a build farm project which is an

00:32:28,710 --> 00:32:32,820
open-source project

00:32:30,029 --> 00:32:35,510
contributors include uber Twitter -

00:32:32,820 --> 00:32:37,590
Sigma and some support from us of course

00:32:35,510 --> 00:32:43,740
George has been writing a lot of the

00:32:37,590 --> 00:32:46,409
code George is in the back there and of

00:32:43,740 --> 00:32:49,490
course he and I have a share talk about

00:32:46,409 --> 00:32:52,440
remote executing service at 9:45 today

00:32:49,490 --> 00:32:55,350
there is also an experimental Google

00:32:52,440 --> 00:32:57,020
hosted service that is already in use by

00:32:55,350 --> 00:32:59,870
some of Google's open source projects

00:32:57,020 --> 00:33:04,309
and we're exploring offering that

00:32:59,870 --> 00:33:04,309
externally as part of Google Cloud

00:33:05,090 --> 00:33:11,520
all right federated repository so while

00:33:09,060 --> 00:33:14,400
while I believes very strongly that

00:33:11,520 --> 00:33:17,220
omona repo is the right way to develop

00:33:14,400 --> 00:33:20,880
code not everyone shares that belief and

00:33:17,220 --> 00:33:23,040
I'm fine with that and that's one of the

00:33:20,880 --> 00:33:25,230
reasons why we added these workspace

00:33:23,040 --> 00:33:28,170
files which allow you to to configure

00:33:25,230 --> 00:33:29,880
your repository and download code you

00:33:28,170 --> 00:33:34,770
know dependencies that are necessary to

00:33:29,880 --> 00:33:36,290
build your code and I think we're going

00:33:34,770 --> 00:33:38,790
to call this federated repositories

00:33:36,290 --> 00:33:39,930
maybe not so far we've been calling an

00:33:38,790 --> 00:33:41,580
external repositories even though

00:33:39,930 --> 00:33:45,090
sometimes they aren't really external

00:33:41,580 --> 00:33:48,330
you can actually point you know to code

00:33:45,090 --> 00:33:50,280
in your own tree and anyway there are a

00:33:48,330 --> 00:33:51,720
couple of problems with workspace files

00:33:50,280 --> 00:33:54,060
and I wanted to give a heads up to

00:33:51,720 --> 00:33:58,680
everyone that we're looking into

00:33:54,060 --> 00:34:01,260
changing them how exactly is still TBD

00:33:58,680 --> 00:34:04,250
but if you have any questions concerns

00:34:01,260 --> 00:34:09,000
you know wish list please do let us know

00:34:04,250 --> 00:34:11,879
so what are the problems Automation is

00:34:09,000 --> 00:34:14,550
problematic if the the workspace file is

00:34:11,879 --> 00:34:16,470
skylark so it's like a program and

00:34:14,550 --> 00:34:18,510
automatically modifying a program to do

00:34:16,470 --> 00:34:21,750
something different turns out to be not

00:34:18,510 --> 00:34:23,730
so easy but that's something that the CI

00:34:21,750 --> 00:34:25,139
system may have to do right you might in

00:34:23,730 --> 00:34:27,270
your CI system you might want to run

00:34:25,139 --> 00:34:28,770
want to run against head of your

00:34:27,270 --> 00:34:32,070
dependency or against the specific

00:34:28,770 --> 00:34:34,290
version of your dependency and so your

00:34:32,070 --> 00:34:35,970
CI system needs to be able to move your

00:34:34,290 --> 00:34:39,240
dependencies around between different

00:34:35,970 --> 00:34:40,860
versions you know how do we handle

00:34:39,240 --> 00:34:42,540
floating dependencies for the slock

00:34:40,860 --> 00:34:43,710
dependencies right now we sort of

00:34:42,540 --> 00:34:45,510
encourage people to use lock

00:34:43,710 --> 00:34:46,950
dependencies to specific versions but

00:34:45,510 --> 00:34:48,210
that means that every time the

00:34:46,950 --> 00:34:51,149
dependency changes you need to update

00:34:48,210 --> 00:34:54,090
and so on and we're still figuring out

00:34:51,149 --> 00:34:56,630
we think we can do better we need to

00:34:54,090 --> 00:34:59,280
figure out how to do that there is also

00:34:56,630 --> 00:35:01,890
workspace files are sort of tightly

00:34:59,280 --> 00:35:03,150
integrated with Auto configuration and

00:35:01,890 --> 00:35:04,650
auto collaboration is something that we

00:35:03,150 --> 00:35:06,750
absolutely want to have but if you

00:35:04,650 --> 00:35:07,950
combine it with remote execution you

00:35:06,750 --> 00:35:10,350
need to configure not for your local

00:35:07,950 --> 00:35:13,530
machine but for the remote machine and

00:35:10,350 --> 00:35:16,550
that's not easily possible today and so

00:35:13,530 --> 00:35:18,110
that's not something want to fix

00:35:16,550 --> 00:35:20,030
you know a couple smaller things

00:35:18,110 --> 00:35:21,650
integration with third-party managers

00:35:20,030 --> 00:35:23,690
what about transitive closure

00:35:21,650 --> 00:35:26,120
dependencies you know if your dependency

00:35:23,690 --> 00:35:28,180
adds another dependency you tap to your

00:35:26,120 --> 00:35:32,240
workspace file or not hopefully not all

00:35:28,180 --> 00:35:33,770
right platforms into chains I was told

00:35:32,240 --> 00:35:35,510
this morning that the documentation on

00:35:33,770 --> 00:35:38,180
this has actually got life last Friday

00:35:35,510 --> 00:35:41,360
so feel free to look at the

00:35:38,180 --> 00:35:44,180
documentation platform is sort of a

00:35:41,360 --> 00:35:47,780
description of where is the code where

00:35:44,180 --> 00:35:50,450
code is running platform could be a Mac

00:35:47,780 --> 00:35:52,520
OS machine with a specific version of

00:35:50,450 --> 00:35:55,970
Mac OS and sort of a set of standard

00:35:52,520 --> 00:35:59,180
libraries on an x86 64 machine for

00:35:55,970 --> 00:36:02,180
example a to a chain is a set of tools

00:35:59,180 --> 00:36:04,580
and configuration that are used to

00:36:02,180 --> 00:36:06,170
perform us a tough related operations in

00:36:04,580 --> 00:36:09,920
a boat sorry for being a little bit

00:36:06,170 --> 00:36:14,090
vague here but one example is in C++

00:36:09,920 --> 00:36:17,900
compiler and linker for say x86 or for

00:36:14,090 --> 00:36:21,410
PowerPC and so we want to make it easy

00:36:17,900 --> 00:36:23,990
to add new to chains to the process so

00:36:21,410 --> 00:36:31,550
that you can target a wide variety of

00:36:23,990 --> 00:36:33,740
platforms and also you know make it easy

00:36:31,550 --> 00:36:36,050
to add additional platforms that you

00:36:33,740 --> 00:36:38,030
want to target right and in many cases

00:36:36,050 --> 00:36:40,280
hopefully they'll already be a to chain

00:36:38,030 --> 00:36:42,140
that you can just use off the shelf

00:36:40,280 --> 00:36:46,310
and we have actually have people working

00:36:42,140 --> 00:36:47,870
on that um but in general you know you

00:36:46,310 --> 00:36:50,720
should be able to say I want to build

00:36:47,870 --> 00:36:52,580
for Mac Windows and Linux for this you

00:36:50,720 --> 00:36:54,830
know conversion and this Windows version

00:36:52,580 --> 00:36:58,910
and then your remote execution should be

00:36:54,830 --> 00:37:00,320
able to figure out that up and basil all

00:36:58,910 --> 00:37:02,720
the rules would have to be updated to

00:37:00,320 --> 00:37:04,190
support platforms and to chains if

00:37:02,720 --> 00:37:07,760
you're interested in this check out john

00:37:04,190 --> 00:37:13,610
katehis talk at 11:30 John that are

00:37:07,760 --> 00:37:16,270
sitting over there the build event

00:37:13,610 --> 00:37:21,590
protocol please please please do not

00:37:16,270 --> 00:37:23,690
parts STD out or STD are we now have a

00:37:21,590 --> 00:37:24,740
protocol that gives you all of it it

00:37:23,690 --> 00:37:26,480
should give you all of the information

00:37:24,740 --> 00:37:28,480
that is currently printed to your

00:37:26,480 --> 00:37:30,990
terminal and

00:37:28,480 --> 00:37:37,390
a structured machine readable format

00:37:30,990 --> 00:37:39,040
please use that if you if you want to do

00:37:37,390 --> 00:37:41,890
if you want to work on CI system

00:37:39,040 --> 00:37:46,480
integration with Jenkins or whatnot on

00:37:41,890 --> 00:37:49,090
IDE integration or if you want to share

00:37:46,480 --> 00:37:51,130
both results between developers for

00:37:49,090 --> 00:37:53,830
example to recruit someone else's Bell

00:37:51,130 --> 00:37:55,930
for debugging or analysis that turns out

00:37:53,830 --> 00:37:59,500
to be a surprisingly useful thing to be

00:37:55,930 --> 00:38:02,020
able to do please do use the build event

00:37:59,500 --> 00:38:04,240
protocol we previously had in place we

00:38:02,020 --> 00:38:06,250
had four different protocols that we

00:38:04,240 --> 00:38:07,630
were using they're all not open-source

00:38:06,250 --> 00:38:09,430
but there are still some works in the

00:38:07,630 --> 00:38:11,170
code place so if you see code that is

00:38:09,430 --> 00:38:13,090
unused please ask us first anyway

00:38:11,170 --> 00:38:15,609
because it may still be used for that we

00:38:13,090 --> 00:38:18,010
hope to delete all of that code as soon

00:38:15,609 --> 00:38:19,869
as we can as soon as we have moved our

00:38:18,010 --> 00:38:21,340
offer our internal services to use the

00:38:19,869 --> 00:38:23,290
new building ID protocol we're going to

00:38:21,340 --> 00:38:24,930
delete all of that code we're very much

00:38:23,290 --> 00:38:28,590
looking forward to that

00:38:24,930 --> 00:38:37,210
and with that I'm heading over to David

00:38:28,590 --> 00:38:39,730
thank you oh hello hi my name is Jamie

00:38:37,210 --> 00:38:41,619
stinky I'm product manager for basil and

00:38:39,730 --> 00:38:44,650
very excited to see everyone out here

00:38:41,619 --> 00:38:47,530
today hello community here speak briefly

00:38:44,650 --> 00:38:49,690
about what's next what's coming up so

00:38:47,530 --> 00:38:51,910
first of all we recently made a change

00:38:49,690 --> 00:38:54,130
the release process we're now doing a

00:38:51,910 --> 00:38:56,859
monthly release train and as opposed to

00:38:54,130 --> 00:38:57,880
dating versions on features so this

00:38:56,859 --> 00:38:59,560
should be pretty familiar from other

00:38:57,880 --> 00:39:02,230
projects that you've worked with but

00:38:59,560 --> 00:39:04,980
basically at or about the first business

00:39:02,230 --> 00:39:07,869
day of the month we cut a new candidate

00:39:04,980 --> 00:39:09,310
and at that point we are frozen in terms

00:39:07,869 --> 00:39:11,890
of features no new features for two

00:39:09,310 --> 00:39:13,840
weeks plus when we hit two weeks and

00:39:11,890 --> 00:39:17,109
have two days within that with no

00:39:13,840 --> 00:39:19,270
regressions we release and you will find

00:39:17,109 --> 00:39:21,520
the releases on github under other

00:39:19,270 --> 00:39:24,520
releases pages with copious release

00:39:21,520 --> 00:39:26,020
notes and then we've got a little wiggle

00:39:24,520 --> 00:39:29,830
room in there before the next cycle

00:39:26,020 --> 00:39:31,270
starts again if needed we hope not we

00:39:29,830 --> 00:39:33,340
can do patch releases towards the end of

00:39:31,270 --> 00:39:34,780
the month again no cherry-picks for

00:39:33,340 --> 00:39:36,430
features we're going to be pretty strict

00:39:34,780 --> 00:39:38,050
about that because we want to really

00:39:36,430 --> 00:39:40,540
have stability and we want to move on to

00:39:38,050 --> 00:39:42,050
the next version you might notice that

00:39:40,540 --> 00:39:43,970
it's right

00:39:42,050 --> 00:39:46,820
not the first business day of the month

00:39:43,970 --> 00:39:49,310
and what you'll find is that version 0.8

00:39:46,820 --> 00:39:51,020
has just been cut and has some cool

00:39:49,310 --> 00:39:55,310
stuff in it that I will talk about in a

00:39:51,020 --> 00:39:58,580
moment um if you do want to run the very

00:39:55,310 --> 00:40:00,710
latest cut bugs and all you can find

00:39:58,580 --> 00:40:02,690
those nightly builds at CI basil that

00:40:00,710 --> 00:40:04,520
build if you want to be running from the

00:40:02,690 --> 00:40:07,790
release candidates look for those on the

00:40:04,520 --> 00:40:11,540
basil discuss mailing list or stay on

00:40:07,790 --> 00:40:13,370
github on the latest stable version so

00:40:11,540 --> 00:40:15,440
some of the recent things that have

00:40:13,370 --> 00:40:17,540
happened as we mentioned Windows is out

00:40:15,440 --> 00:40:20,000
of experimental and I know some people

00:40:17,540 --> 00:40:24,080
here are using it heavily thank you if

00:40:20,000 --> 00:40:25,220
you are a Windows user and have requests

00:40:24,080 --> 00:40:26,660
for us we want to engage with us our

00:40:25,220 --> 00:40:28,490
team would love to talk to you about and

00:40:26,660 --> 00:40:30,050
understand your needs we want to make

00:40:28,490 --> 00:40:31,250
sure that we keep advancing Windows in

00:40:30,050 --> 00:40:31,930
feature parity with the rest of the

00:40:31,250 --> 00:40:34,490
platforms

00:40:31,930 --> 00:40:37,040
speaking of platforms from a different

00:40:34,490 --> 00:40:38,390
angle the platform's descriptors

00:40:37,040 --> 00:40:40,910
platforms and tool chains that Wolfe

00:40:38,390 --> 00:40:42,500
described is now incorporated into the

00:40:40,910 --> 00:40:45,650
release version of basil as of version

00:40:42,500 --> 00:40:48,770
0.8 you can start updating your skylark

00:40:45,650 --> 00:40:50,300
rules and the documentation is live this

00:40:48,770 --> 00:40:52,220
is gonna be an evolving topic over the

00:40:50,300 --> 00:40:55,210
next few releases so please read it

00:40:52,220 --> 00:40:58,130
please give us feedback and again at the

00:40:55,210 --> 00:41:00,590
mailing list and please check out John

00:40:58,130 --> 00:41:04,040
Katers talk tomorrow on platforms about

00:41:00,590 --> 00:41:06,080
11:30 I think it was and will be

00:41:04,040 --> 00:41:09,140
continuing to dive into that a lot of

00:41:06,080 --> 00:41:11,270
Skylar cleanups and I'm sure everyone

00:41:09,140 --> 00:41:13,280
has their favorite skylark bug or is

00:41:11,270 --> 00:41:14,870
interested in the skylark sandwich for

00:41:13,280 --> 00:41:17,180
your various languages if you don't know

00:41:14,870 --> 00:41:19,310
what that is it means the ability to

00:41:17,180 --> 00:41:22,340
call native rules from within a Skylark

00:41:19,310 --> 00:41:25,640
rule has unlocked a lot of things cool

00:41:22,340 --> 00:41:28,880
new CLI which is called experimental but

00:41:25,640 --> 00:41:30,110
is now on by default and has

00:41:28,880 --> 00:41:31,280
improvements I actually don't know much

00:41:30,110 --> 00:41:34,370
about it so I'm eager to learn more

00:41:31,280 --> 00:41:36,500
about that one and then skylark skylarks

00:41:34,370 --> 00:41:38,120
garlic as you see so we've added the

00:41:36,500 --> 00:41:40,310
ability to do coverage within skylark

00:41:38,120 --> 00:41:42,650
rules that are targeting the JVM and

00:41:40,310 --> 00:41:45,230
other Skylar tools like there's a linter

00:41:42,650 --> 00:41:47,810
memory profiler and a debugger all in

00:41:45,230 --> 00:41:49,400
flight on I think not quite released on

00:41:47,810 --> 00:41:50,840
all of those but we're really looking to

00:41:49,400 --> 00:41:55,970
mature skylark and the tooling around

00:41:50,840 --> 00:41:57,500
skylark going forward

00:41:55,970 --> 00:41:59,330
big thing on our mind is migration tools

00:41:57,500 --> 00:42:01,849
for various language obviously this is

00:41:59,330 --> 00:42:03,530
all very language specific something

00:42:01,849 --> 00:42:05,510
we'd like to do is mature that to have

00:42:03,530 --> 00:42:08,119
general principles around migration that

00:42:05,510 --> 00:42:09,410
are applied to the languages and some of

00:42:08,119 --> 00:42:11,720
these are a little messy right now some

00:42:09,410 --> 00:42:13,700
different tools that overlap we want to

00:42:11,720 --> 00:42:15,650
bring that together to help migrate both

00:42:13,700 --> 00:42:17,660
your third party dependencies as well as

00:42:15,650 --> 00:42:20,570
your first party code make it easier to

00:42:17,660 --> 00:42:22,970
get your team on to basal recursive

00:42:20,570 --> 00:42:25,340
workspaces has been a long-desired topic

00:42:22,970 --> 00:42:28,670
and that means the ability to have a

00:42:25,340 --> 00:42:31,609
workspace that inherits the workspace of

00:42:28,670 --> 00:42:34,130
its dependencies and that's something

00:42:31,609 --> 00:42:36,740
that we're picking up and hoping to get

00:42:34,130 --> 00:42:38,300
into Basel soon I don't know the status

00:42:36,740 --> 00:42:39,730
on that one so please let us know if

00:42:38,300 --> 00:42:43,130
you're interested in collaborating on it

00:42:39,730 --> 00:42:47,540
again more about skylark including a

00:42:43,130 --> 00:42:49,190
testing framework for skylark android we

00:42:47,540 --> 00:42:51,020
are on the cusp of releasing the

00:42:49,190 --> 00:42:54,200
integration and robolectric tests

00:42:51,020 --> 00:42:56,630
frameworks for Android to make sure that

00:42:54,200 --> 00:42:59,780
you can do you know deep Android

00:42:56,630 --> 00:43:01,310
integration with basil iOS testing as

00:42:59,780 --> 00:43:02,960
well which not currently you can build

00:43:01,310 --> 00:43:04,640
but can't test today but it's coming out

00:43:02,960 --> 00:43:06,500
and then there's some cool improvements

00:43:04,640 --> 00:43:09,349
on caching especially including caching

00:43:06,500 --> 00:43:11,570
of your third party external repos can

00:43:09,349 --> 00:43:15,680
use the local cache so oh we're all

00:43:11,570 --> 00:43:18,470
about fast and correct and fast so now

00:43:15,680 --> 00:43:20,690
as the road to 1.0 1.0 means more than

00:43:18,470 --> 00:43:21,859
just a grab bag of features right we

00:43:20,690 --> 00:43:24,380
believe it means a certain level of

00:43:21,859 --> 00:43:26,660
maturity so one thing that's a high

00:43:24,380 --> 00:43:30,050
focus is stabilizing all of the api's

00:43:26,660 --> 00:43:32,330
and versioning them a lot of features

00:43:30,050 --> 00:43:33,619
that are being deprecated you'll see

00:43:32,330 --> 00:43:36,200
with every release a list of

00:43:33,619 --> 00:43:37,750
incompatible changes and this is things

00:43:36,200 --> 00:43:40,700
that seemed like a good idea at the time

00:43:37,750 --> 00:43:41,330
with basically every cases I've ever

00:43:40,700 --> 00:43:43,580
seen

00:43:41,330 --> 00:43:45,650
it was replaced by something cooler and

00:43:43,580 --> 00:43:46,520
better but please give us feedback if

00:43:45,650 --> 00:43:48,380
you think that we're taking away

00:43:46,520 --> 00:43:50,480
something that you depend on but we're

00:43:48,380 --> 00:43:52,190
looking to rapidly mature and deprecated

00:43:50,480 --> 00:43:55,849
the things they're no longer in use so

00:43:52,190 --> 00:43:57,530
that 1.0 can be a stable API when we hit

00:43:55,849 --> 00:44:00,260
1.0 we're going to introduce semantic

00:43:57,530 --> 00:44:01,640
versioning so that the only a major

00:44:00,260 --> 00:44:04,190
release is something that will change an

00:44:01,640 --> 00:44:06,410
API and then moving beyond that we want

00:44:04,190 --> 00:44:09,440
to be able to create a long-term support

00:44:06,410 --> 00:44:11,210
version at 1.1 maybe

00:44:09,440 --> 00:44:12,800
I haven't defined that whole story yet

00:44:11,210 --> 00:44:14,960
but of course at that point we really

00:44:12,800 --> 00:44:18,650
have something you can depend on bundle

00:44:14,960 --> 00:44:19,910
into other software etc and please let

00:44:18,650 --> 00:44:22,540
us know if you'd like to participate in

00:44:19,910 --> 00:44:25,400
defining that long term support policy

00:44:22,540 --> 00:44:27,560
some resources for the community if you

00:44:25,400 --> 00:44:29,990
need help using basil start a Stack

00:44:27,560 --> 00:44:31,910
Overflow please I submit your question

00:44:29,990 --> 00:44:33,710
there thank you a huge thank you to

00:44:31,910 --> 00:44:35,589
everyone here who contributes to

00:44:33,710 --> 00:44:38,210
answering questions on Stack Overflow

00:44:35,589 --> 00:44:40,099
you guys are a big part of making that

00:44:38,210 --> 00:44:42,470
the best resource and if you have a

00:44:40,099 --> 00:44:44,349
question start there we also have our

00:44:42,470 --> 00:44:47,000
discussion group which you can get to at

00:44:44,349 --> 00:44:49,609
geospatial disgusts and that's a place

00:44:47,000 --> 00:44:51,859
to post topics ideas hey wouldn't it be

00:44:49,609 --> 00:44:55,030
cool if basil did such and such and have

00:44:51,859 --> 00:44:55,030

YouTube URL: https://www.youtube.com/watch?v=3eFllvz8_0k


