Title: Using Bazel for Fast, Correct Docker Deployments w  Databricks
Publication date: 2017-12-08
Playlist: BazelCon 2017
Description: 
	by Miles Yucht (Databricks) and Matthew Moore (Google)
Captions: 
	00:00:00,060 --> 00:00:04,640
this is using basil for fast correct

00:00:02,879 --> 00:00:10,110
docker deployments

00:00:04,640 --> 00:00:12,750
I'm Matt Moore I am the uber uber TL for

00:00:10,110 --> 00:00:14,630
container development at Google and do

00:00:12,750 --> 00:00:17,100
the things I'm passionate about are

00:00:14,630 --> 00:00:19,080
really tight development cycle and

00:00:17,100 --> 00:00:22,340
better ways about building container

00:00:19,080 --> 00:00:24,720
images and hopefully you walk away today

00:00:22,340 --> 00:00:28,439
understanding how those two things are

00:00:24,720 --> 00:00:30,810
very related and both hi everyone my

00:00:28,439 --> 00:00:35,219
name is Miles yet I'm a software

00:00:30,810 --> 00:00:36,750
engineer at dated bricks and I feel a

00:00:35,219 --> 00:00:39,000
little bit out of my league around all

00:00:36,750 --> 00:00:41,399
of these like build people basil people

00:00:39,000 --> 00:00:43,829
but hopefully I can tell you a little

00:00:41,399 --> 00:00:45,960
bit about how I am as just a software

00:00:43,829 --> 00:00:48,270
engineer have been able to use basil to

00:00:45,960 --> 00:00:52,710
be really successful with deployment at

00:00:48,270 --> 00:00:56,280
data brakes all right so before we dive

00:00:52,710 --> 00:00:59,219
in just a quick outline I am going to

00:00:56,280 --> 00:01:01,739
start off and talk about the evolution

00:00:59,219 --> 00:01:06,770
of building docker images with basil and

00:01:01,739 --> 00:01:09,990
how that has more recently evolved into

00:01:06,770 --> 00:01:11,340
deploying images with basil and give a

00:01:09,990 --> 00:01:13,920
quick demo and then hand things over to

00:01:11,340 --> 00:01:15,930
Miles mm-hmm and I'll talk about a rule

00:01:13,920 --> 00:01:18,840
that I've written data breaks to help

00:01:15,930 --> 00:01:21,780
automate the deployment of many of our

00:01:18,840 --> 00:01:27,000
services that that we run now open

00:01:21,780 --> 00:01:31,680
things up for Q&A so the origin story

00:01:27,000 --> 00:01:35,220
where did it all begin so building

00:01:31,680 --> 00:01:38,130
docker images with basil started two and

00:01:35,220 --> 00:01:41,640
a half years ago and it started as a

00:01:38,130 --> 00:01:44,040
tool to enable Googlers who were

00:01:41,640 --> 00:01:47,759
targeting cloud to build docker images

00:01:44,040 --> 00:01:49,380
and in a way that sort of integrated

00:01:47,759 --> 00:01:53,159
naturally with our internal tool chain

00:01:49,380 --> 00:01:55,320
which can be opinionated and as very

00:01:53,159 --> 00:01:58,950
principled the biggest constraint we

00:01:55,320 --> 00:02:01,439
faced was that you know some of our

00:01:58,950 --> 00:02:03,780
opinionation and whatnot all of this

00:02:01,439 --> 00:02:06,240
stuff runs on top of our internal

00:02:03,780 --> 00:02:08,879
production infrastructure we don't let

00:02:06,240 --> 00:02:10,110
people run root so we couldn't run the

00:02:08,879 --> 00:02:12,660
docker daemon

00:02:10,110 --> 00:02:18,180
and so this ruled out every tradish

00:02:12,660 --> 00:02:21,410
method for building docker images so the

00:02:18,180 --> 00:02:23,400
solution we built adheres to our sort of

00:02:21,410 --> 00:02:24,930
principles as principled approach of

00:02:23,400 --> 00:02:29,600
reproducibility as well as some of our

00:02:24,930 --> 00:02:32,510
internal principles and these rules were

00:02:29,600 --> 00:02:36,260
pretty quickly actually open sourced by

00:02:32,510 --> 00:02:40,980
the at the time very relatively new

00:02:36,260 --> 00:02:43,680
basel team but the rules that were open

00:02:40,980 --> 00:02:45,270
sourced at the time had a problem here

00:02:43,680 --> 00:02:47,690
we can complete you couldn't pull down a

00:02:45,270 --> 00:02:51,300
base image or publish the result without

00:02:47,690 --> 00:02:54,210
having a docker daemon so we actually

00:02:51,300 --> 00:02:55,710
had push support internally as well but

00:02:54,210 --> 00:02:59,850
it was using a library we had an open

00:02:55,710 --> 00:03:01,950
source yet and so we hadn't quite open

00:02:59,850 --> 00:03:03,900
source that rule we because of some of

00:03:01,950 --> 00:03:07,020
those you know principles around

00:03:03,900 --> 00:03:09,090
hermeticity we couldn't have poll

00:03:07,020 --> 00:03:12,300
because we don't have network access so

00:03:09,090 --> 00:03:14,670
earlier this year as I sort of turned my

00:03:12,300 --> 00:03:17,100
focus towards what it looks like to use

00:03:14,670 --> 00:03:18,350
these rules in the open we wanted to

00:03:17,100 --> 00:03:21,720
complete this cycle and so we

00:03:18,350 --> 00:03:23,580
implemented pull I'm using that now open

00:03:21,720 --> 00:03:27,000
source library and we open sourced push

00:03:23,580 --> 00:03:30,450
support as well and then with this sort

00:03:27,000 --> 00:03:32,310
of more complete and end you know the

00:03:30,450 --> 00:03:34,290
focus turns towards making that easier

00:03:32,310 --> 00:03:37,620
to use and making that faster and we've

00:03:34,290 --> 00:03:39,840
already made a number of significant

00:03:37,620 --> 00:03:42,650
improvements just under the hood in

00:03:39,840 --> 00:03:50,160
terms of how these work to make it

00:03:42,650 --> 00:03:52,140
faster but you know in the pursuit of

00:03:50,160 --> 00:03:55,920
perfection like it's never fast enough

00:03:52,140 --> 00:03:59,730
for me or easy enough right we

00:03:55,920 --> 00:04:02,790
introduced these Lang image rules the

00:03:59,730 --> 00:04:06,600
idea behind these the the aspiration was

00:04:02,790 --> 00:04:07,980
to make container izing an application

00:04:06,600 --> 00:04:10,770
once you've reached the level of

00:04:07,980 --> 00:04:13,560
expressing it as Lang binary right to

00:04:10,770 --> 00:04:16,560
have a binary go binary whatever as easy

00:04:13,560 --> 00:04:19,650
as replacing the word binary with the

00:04:16,560 --> 00:04:24,180
word image right it's the dream right

00:04:19,650 --> 00:04:26,419
and you know the idea is that you've

00:04:24,180 --> 00:04:28,909
already told basil all this information

00:04:26,419 --> 00:04:30,680
about your dependencies and the

00:04:28,909 --> 00:04:38,060
environment the platform you are

00:04:30,680 --> 00:04:40,909
targeting and so for at least I would

00:04:38,060 --> 00:04:43,029
say a majority of simple cases we should

00:04:40,909 --> 00:04:45,050
just be able to do the right thing

00:04:43,029 --> 00:04:49,430
without you needing to tweak a whole

00:04:45,050 --> 00:04:51,349
bunch of knobs and so my personal goal

00:04:49,430 --> 00:04:54,050
is to get containers back into the sort

00:04:51,349 --> 00:04:55,759
of place of being an implementation

00:04:54,050 --> 00:04:59,449
detail and you know there's been a ton

00:04:55,759 --> 00:05:00,860
of hype it's since the rise of talker if

00:04:59,449 --> 00:05:02,779
you you know if we were to do this

00:05:00,860 --> 00:05:04,969
family feud style and you know Google is

00:05:02,779 --> 00:05:06,560
using containers knowing it or not for a

00:05:04,969 --> 00:05:08,270
really long time if a couple years ago

00:05:06,560 --> 00:05:11,060
before all the hype around containers

00:05:08,270 --> 00:05:13,669
you would ask them you know how we ran

00:05:11,060 --> 00:05:15,680
things in production you know survey

00:05:13,669 --> 00:05:19,189
would probably say things like deploy

00:05:15,680 --> 00:05:21,110
jar and par files and whatnot I don't

00:05:19,189 --> 00:05:24,740
know that most Googlers would have

00:05:21,110 --> 00:05:26,870
jumped right to containers and so really

00:05:24,740 --> 00:05:28,759
they're learn implementation detail they

00:05:26,870 --> 00:05:30,620
should get out of your way and enable

00:05:28,759 --> 00:05:37,089
you to do well you're really after which

00:05:30,620 --> 00:05:40,849
is just running your app so easy it was

00:05:37,089 --> 00:05:43,129
not me sorry I advanced before he said

00:05:40,849 --> 00:05:46,699
going so easy wasn't making it easier to

00:05:43,129 --> 00:05:50,750
use wasn't the only reason that I wanted

00:05:46,699 --> 00:05:53,029
to be a sleighing image it was also to

00:05:50,750 --> 00:05:55,009
enable us to take over the

00:05:53,029 --> 00:05:56,870
containerization process right so you

00:05:55,009 --> 00:05:58,460
can see in the example on the Left we've

00:05:56,870 --> 00:06:00,169
deleted this sort of knocker build that

00:05:58,460 --> 00:06:04,520
just there is the binary and a docker

00:06:00,169 --> 00:06:07,159
image and sets the entry point we can do

00:06:04,520 --> 00:06:09,289
more sophisticated things if we are in

00:06:07,159 --> 00:06:12,949
control of it leveraging the deep

00:06:09,289 --> 00:06:14,300
knowledge of the build graph and the

00:06:12,949 --> 00:06:15,919
aspects sound really cool I haven't

00:06:14,300 --> 00:06:21,560
played with them yet but I kind of want

00:06:15,919 --> 00:06:24,050
to for this but so ultimately for those

00:06:21,560 --> 00:06:26,509
of you who have used docker before right

00:06:24,050 --> 00:06:28,669
when you push an image or you pull an

00:06:26,509 --> 00:06:32,469
image you'll see messages like layer

00:06:28,669 --> 00:06:34,669
already exists this means that docker is

00:06:32,469 --> 00:06:36,979
has checked for the existence of a layer

00:06:34,669 --> 00:06:40,070
on the remote registry or in its local

00:06:36,979 --> 00:06:43,190
layer cache and it is

00:06:40,070 --> 00:06:47,300
we didn't work because you know it's

00:06:43,190 --> 00:06:50,000
already done so if you think about it

00:06:47,300 --> 00:06:51,770
within the docker distribution protocol

00:06:50,000 --> 00:06:54,620
layers or the unit of incrementality

00:06:51,770 --> 00:06:56,120
right and the way this is typically

00:06:54,620 --> 00:06:58,070
leveraged is you have a common base

00:06:56,120 --> 00:07:00,770
image and two sibling containers can

00:06:58,070 --> 00:07:02,360
rely on that fact to get better if

00:07:00,770 --> 00:07:04,940
they're running on the same pod you know

00:07:02,360 --> 00:07:07,370
not whole things like dead Ian and the

00:07:04,940 --> 00:07:10,100
JRE twice right you you share a common

00:07:07,370 --> 00:07:15,620
base and you get the benefit of that the

00:07:10,100 --> 00:07:17,720
way I started to look at it was if you

00:07:15,620 --> 00:07:20,210
looked at an application over time as

00:07:17,720 --> 00:07:23,090
you change it as siblings right how do I

00:07:20,210 --> 00:07:25,280
minimize the Delta between my app now my

00:07:23,090 --> 00:07:27,380
app in five minutes might happen ten

00:07:25,280 --> 00:07:30,410
minutes right ultimately we want to

00:07:27,380 --> 00:07:32,330
minimize that change so that you know

00:07:30,410 --> 00:07:34,820
pushes and poles are really really

00:07:32,330 --> 00:07:37,640
really fast and so there's a duality

00:07:34,820 --> 00:07:39,860
here to build incrementality right

00:07:37,640 --> 00:07:42,680
building incremental builds are a very

00:07:39,860 --> 00:07:47,900
well studied problem you know John might

00:07:42,680 --> 00:07:50,200
argue it's solved right so we wanted to

00:07:47,900 --> 00:07:52,400
take you know all of the fine-grained

00:07:50,200 --> 00:07:54,710
information that exists in the action

00:07:52,400 --> 00:07:56,780
graph and effectively project it into

00:07:54,710 --> 00:07:58,850
the layering of your docker image to

00:07:56,780 --> 00:08:03,860
turn the build systems incrementality

00:07:58,850 --> 00:08:05,720
into deployment incrementality so if you

00:08:03,860 --> 00:08:12,200
look at this example that's up on you

00:08:05,720 --> 00:08:14,690
know the left you know you can have a

00:08:12,200 --> 00:08:17,120
relatively small application that builds

00:08:14,690 --> 00:08:19,310
on top of really big libraries right so

00:08:17,120 --> 00:08:22,370
in this example this is a from the rules

00:08:19,310 --> 00:08:25,640
kubernetes repo it's a sample G RPC

00:08:22,370 --> 00:08:29,450
service it uses the GRP cio requirement

00:08:25,640 --> 00:08:31,760
which is like 40 max the app itself

00:08:29,450 --> 00:08:36,229
including a bunch of generated code is

00:08:31,760 --> 00:08:37,910
less than 400 K so by moving some of

00:08:36,229 --> 00:08:40,700
these big dependencies into their own

00:08:37,910 --> 00:08:42,560
layers because they aren't changing you

00:08:40,700 --> 00:08:46,490
reduce what you push by about two orders

00:08:42,560 --> 00:08:49,040
of magnitude so the intent is to

00:08:46,490 --> 00:08:50,450
ultimately reduce what it is you are

00:08:49,040 --> 00:08:52,460
paying for it when you push and pull

00:08:50,450 --> 00:08:53,270
during your development cycle to exactly

00:08:52,460 --> 00:08:55,610
what you change

00:08:53,270 --> 00:08:58,790
all right which is again a lot of

00:08:55,610 --> 00:09:00,970
similarities to build incrementally

00:08:58,790 --> 00:09:02,090
right minimizing what you rebuild -

00:09:00,970 --> 00:09:05,380
exactly

00:09:02,090 --> 00:09:08,000
those things affected by your changes

00:09:05,380 --> 00:09:11,390
I've been talking a lot about push and

00:09:08,000 --> 00:09:14,270
pull ultimately you know while pull

00:09:11,390 --> 00:09:17,450
build pushes sort of an end to end your

00:09:14,270 --> 00:09:19,910
cycle really doesn't stop until you

00:09:17,450 --> 00:09:22,430
reach the point of running it on a node

00:09:19,910 --> 00:09:24,080
and getting the feedback of playing with

00:09:22,430 --> 00:09:27,050
your app poking at it running some sort

00:09:24,080 --> 00:09:29,840
of tests against it and so we haven't

00:09:27,050 --> 00:09:31,730
connected the dots between publishing

00:09:29,840 --> 00:09:33,950
your image and pulling it on to some

00:09:31,730 --> 00:09:37,280
sort of runtime system and that's where

00:09:33,950 --> 00:09:38,990
the next rule comes in kubernetes

00:09:37,280 --> 00:09:41,990
objects so pure minetti's object allows

00:09:38,990 --> 00:09:45,260
you to reason about kubernetes resources

00:09:41,990 --> 00:09:47,090
within your build graph there's sort of

00:09:45,260 --> 00:09:49,430
two classes of kubernetes object there's

00:09:47,090 --> 00:09:53,300
your pure config like config Maps

00:09:49,430 --> 00:09:57,200
ingress and so on and so forth services

00:09:53,300 --> 00:09:59,210
and then there's objects that reference

00:09:57,200 --> 00:10:03,860
container images such as deployments

00:09:59,210 --> 00:10:05,270
pods etc the ones that reference so all

00:10:03,860 --> 00:10:09,520
of these are typically expressed in some

00:10:05,270 --> 00:10:13,780
sort of Amalur json config and the rule

00:10:09,520 --> 00:10:16,460
takes a pointer to that template and

00:10:13,780 --> 00:10:19,160
optionally you can augment that with a

00:10:16,460 --> 00:10:22,130
mapping from the image references that

00:10:19,160 --> 00:10:23,990
it might exist within the template to

00:10:22,130 --> 00:10:26,600
build targets that can produce them and

00:10:23,990 --> 00:10:28,730
this effectively connects your

00:10:26,600 --> 00:10:31,430
kubernetes resources into the build

00:10:28,730 --> 00:10:33,500
graph in ways that enable you to reason

00:10:31,430 --> 00:10:35,540
about what kubernetes resources are

00:10:33,500 --> 00:10:36,640
affected when you touch a source file

00:10:35,540 --> 00:10:40,220
right

00:10:36,640 --> 00:10:43,850
you can now we then leverage this to on

00:10:40,220 --> 00:10:45,830
these communities object rules export

00:10:43,850 --> 00:10:48,770
actions that allow you to interact with

00:10:45,830 --> 00:10:52,060
these resources in a single command that

00:10:48,770 --> 00:10:55,660
again my goal is very very very fast so

00:10:52,060 --> 00:11:00,310
these actions look like def not create

00:10:55,660 --> 00:11:03,290
which will build all of the images and

00:11:00,310 --> 00:11:06,980
again this is run not build it will

00:11:03,290 --> 00:11:10,630
publish them and it will coop cuddle

00:11:06,980 --> 00:11:14,780
create the resource template after

00:11:10,630 --> 00:11:19,760
inlining the digest into the template if

00:11:14,780 --> 00:11:20,510
I now want to make a change and see that

00:11:19,760 --> 00:11:23,780
in action

00:11:20,510 --> 00:11:26,960
I can run Basel run devvra place and it

00:11:23,780 --> 00:11:32,420
will rebuild repo and redeploy my

00:11:26,960 --> 00:11:34,100
changes as quickly as you were built but

00:11:32,420 --> 00:11:36,860
for those of you who are of the coud

00:11:34,100 --> 00:11:40,700
cuddle apply religion you can use apply

00:11:36,860 --> 00:11:41,810
as well I have no skin in that game and

00:11:40,700 --> 00:11:44,990
then when you're done at the end of the

00:11:41,810 --> 00:11:46,610
day you can run Basel run dev delete and

00:11:44,990 --> 00:11:48,190
to tear down so two more things before

00:11:46,610 --> 00:11:50,840
you move on that I just want to touch on

00:11:48,190 --> 00:11:52,220
but I'm not going to get into in any

00:11:50,840 --> 00:11:55,910
more detail see me afterwards if you

00:11:52,220 --> 00:11:59,240
want to talk about these there are a

00:11:55,910 --> 00:12:02,300
number of features of these rules that

00:11:59,240 --> 00:12:03,770
enable you to have different development

00:12:02,300 --> 00:12:05,150
environments for different developers on

00:12:03,770 --> 00:12:06,860
your team so you're not stomping on each

00:12:05,150 --> 00:12:11,440
other we'll touch on one of these during

00:12:06,860 --> 00:12:13,610
the demo and the other piece is that the

00:12:11,440 --> 00:12:16,490
resource template does not have to be

00:12:13,610 --> 00:12:18,470
static right these rules are intended to

00:12:16,490 --> 00:12:22,390
be able to compose with other rules the

00:12:18,470 --> 00:12:25,630
support templating like rules JSON it

00:12:22,390 --> 00:12:29,480
okay so one last thing before the demo

00:12:25,630 --> 00:12:34,970
which is looks very similar but it's

00:12:29,480 --> 00:12:37,190
plural so once you start can you with

00:12:34,970 --> 00:12:40,040
non-trivial kubernetes applications you

00:12:37,190 --> 00:12:43,670
start to deal with multiple objects and

00:12:40,040 --> 00:12:46,580
so the way some people do this in

00:12:43,670 --> 00:12:49,250
kubernetes land is you have a single by

00:12:46,580 --> 00:12:51,680
yam ohio that conjoins together a whole

00:12:49,250 --> 00:12:53,630
bunch of llamó objects with you know

00:12:51,680 --> 00:12:56,540
multi document llamó file separated with

00:12:53,630 --> 00:12:57,950
- - - this can be really nice for

00:12:56,540 --> 00:13:00,530
installing someone else's application

00:12:57,950 --> 00:13:04,940
like sto or something onto your cluster

00:13:00,530 --> 00:13:06,740
but if you are doing development it's

00:13:04,940 --> 00:13:08,480
really inconvenient to then go in and

00:13:06,740 --> 00:13:09,890
try and replace one of those objects

00:13:08,480 --> 00:13:15,520
when they change because you have to

00:13:09,890 --> 00:13:18,740
separate it out so I wanted to deal with

00:13:15,520 --> 00:13:21,529
sort of that problem and so we

00:13:18,740 --> 00:13:26,720
the chaos objects rule to deal with that

00:13:21,529 --> 00:13:31,040
and so in order to deal with objects at

00:13:26,720 --> 00:13:33,890
multiple levels we have the individual

00:13:31,040 --> 00:13:35,779
resource rules but the objects rule

00:13:33,890 --> 00:13:38,360
enables you to start grouping these

00:13:35,779 --> 00:13:39,709
things to reason about them in larger

00:13:38,360 --> 00:13:41,330
and larger groupings so you can group

00:13:39,709 --> 00:13:43,220
together all of your deployments all of

00:13:41,330 --> 00:13:48,170
your config maps you can group together

00:13:43,220 --> 00:13:50,390
everything and so these this pluralized

00:13:48,170 --> 00:13:51,980
object allows you to act on that group

00:13:50,390 --> 00:13:54,800
of objects with the same set of commands

00:13:51,980 --> 00:13:57,529
so I can say basal run everything dot

00:13:54,800 --> 00:13:58,550
create and stand up an application of

00:13:57,529 --> 00:14:00,470
the beginning of the day at the end of

00:13:58,550 --> 00:14:02,870
the day I can say dot delete it'll clean

00:14:00,470 --> 00:14:05,990
everything up and you know go home start

00:14:02,870 --> 00:14:07,610
again in the morning and during the day

00:14:05,990 --> 00:14:08,959
I can say replace I'm one of the

00:14:07,610 --> 00:14:12,680
individual objects and it will do the

00:14:08,959 --> 00:14:21,399
right thing so hopefully I'm doing all

00:14:12,680 --> 00:14:23,839
right on time okay okay so for the demo

00:14:21,399 --> 00:14:27,200
we are going to you okay

00:14:23,839 --> 00:14:31,100
everyone see this we are going to be

00:14:27,200 --> 00:14:33,110
using a an application called proud this

00:14:31,100 --> 00:14:38,270
is maintained by the kubernetes sync

00:14:33,110 --> 00:14:40,490
testing community and it is used to help

00:14:38,270 --> 00:14:43,459
manage open source contributions to

00:14:40,490 --> 00:14:46,430
kubernetes they were starting to adopt

00:14:43,459 --> 00:14:49,550
basil and real soccer and so I wanted to

00:14:46,430 --> 00:14:52,250
see this also runs on communities by the

00:14:49,550 --> 00:14:54,050
way I wanted to see this in action with

00:14:52,250 --> 00:14:57,680
a non-trivial kubernetes application and

00:14:54,050 --> 00:14:59,540
this was a nice application for me to

00:14:57,680 --> 00:15:01,970
kick the tires with so you can see it's

00:14:59,540 --> 00:15:04,779
a github bot it's it's running as matt

00:15:01,970 --> 00:15:04,779
moore sockpuppet

00:15:04,940 --> 00:15:11,390
it's labeled my PR here as extra small

00:15:07,690 --> 00:15:16,540
and it is running some simple tests so

00:15:11,390 --> 00:15:21,890
this also sports in basic chat ups and

00:15:16,540 --> 00:15:26,149
this is sorry I'm not Oscar so this is

00:15:21,890 --> 00:15:28,220
this is me trying to you know add some

00:15:26,149 --> 00:15:30,260
humor to this did you hear about the

00:15:28,220 --> 00:15:31,880
scientist who was lab partners with a

00:15:30,260 --> 00:15:32,550
pot of boiling water he had a very

00:15:31,880 --> 00:15:36,149
esteemed

00:15:32,550 --> 00:15:39,140
colleague okay so this I stood up this

00:15:36,149 --> 00:15:42,959
deployment with everything that create

00:15:39,140 --> 00:15:45,690
its new every time I had no idea what I

00:15:42,959 --> 00:15:47,310
was getting myself into so I set up this

00:15:45,690 --> 00:15:49,680
prowl application with everything not

00:15:47,310 --> 00:15:51,300
create but I really wanted to see what

00:15:49,680 --> 00:15:53,550
it was like to you know build a feature

00:15:51,300 --> 00:15:58,950
with it and so since I'm constantly

00:15:53,550 --> 00:16:00,839
checking in build afire errors I wanted

00:15:58,950 --> 00:16:02,810
to add a build a fire plug into prowl so

00:16:00,839 --> 00:16:07,890
that when you ran slash build if I it

00:16:02,810 --> 00:16:09,570
would run build a fire it's a little

00:16:07,890 --> 00:16:11,670
slow because excluding the repo for the

00:16:09,570 --> 00:16:13,649
first time it has a cache but and you

00:16:11,670 --> 00:16:16,620
can see here this basil file needs

00:16:13,649 --> 00:16:20,399
formatting please run okay I'm not that

00:16:16,620 --> 00:16:23,310
played I guess run this command okay so

00:16:20,399 --> 00:16:25,079
if we switch over to the VM you can see

00:16:23,310 --> 00:16:27,839
hopefully you can see this because this

00:16:25,079 --> 00:16:29,670
is on the largest font there are five

00:16:27,839 --> 00:16:33,779
pods running the different components of

00:16:29,670 --> 00:16:36,600
prowl on my kubernetes cluster these

00:16:33,779 --> 00:16:39,240
represent the five deployments let me

00:16:36,600 --> 00:16:41,279
just go through my list here okay

00:16:39,240 --> 00:16:42,990
so you can see all of the components in

00:16:41,279 --> 00:16:46,110
this starter cluster directory there are

00:16:42,990 --> 00:16:47,940
actually a whole bunch more pieces of

00:16:46,110 --> 00:16:50,579
configuration and whatnot these actually

00:16:47,940 --> 00:16:52,470
exist that so there's a couple objects

00:16:50,579 --> 00:16:53,640
for secrets that exist outside the repo

00:16:52,470 --> 00:16:56,399
that we're pulling in through a local

00:16:53,640 --> 00:16:57,209
repository this is the part of the demo

00:16:56,399 --> 00:16:59,700
where I have to ask

00:16:57,209 --> 00:17:04,500
Laurent to cover his eyes because if I'm

00:16:59,700 --> 00:17:06,780
gonna show you my messy build file so so

00:17:04,500 --> 00:17:09,030
I'm jump down to the end you can see I'm

00:17:06,780 --> 00:17:10,829
using very similar groupings here to

00:17:09,030 --> 00:17:12,300
what was in the slide there's an

00:17:10,829 --> 00:17:14,400
everything group that I used to stand it

00:17:12,300 --> 00:17:15,980
up there's also a secrets group a

00:17:14,400 --> 00:17:18,510
deployments group a config Maps group

00:17:15,980 --> 00:17:22,050
and then because there's some key

00:17:18,510 --> 00:17:25,620
objects I used some for loops sorry

00:17:22,050 --> 00:17:28,350
Laura you can see the secrets coming in

00:17:25,620 --> 00:17:30,750
from the external repo and then most of

00:17:28,350 --> 00:17:34,429
these are pure config the exception for

00:17:30,750 --> 00:17:37,919
that is the deployment object here which

00:17:34,429 --> 00:17:38,850
for each of decora luteum I think I'm

00:17:37,919 --> 00:17:42,660
pronouncing that correct

00:17:38,850 --> 00:17:45,050
plank and sinker we have I didn't name

00:17:42,660 --> 00:17:45,050
them I swear

00:17:45,970 --> 00:17:52,000
we also have this images attribute which

00:17:49,030 --> 00:17:56,410
is using this dictionary up here to say

00:17:52,000 --> 00:17:59,440
hey in the cook deployment ya mole

00:17:56,410 --> 00:18:01,240
template and the image reference is

00:17:59,440 --> 00:18:05,050
something like GCRA okay that's brow

00:18:01,240 --> 00:18:14,500
hook and then attack and we point that

00:18:05,050 --> 00:18:16,030
at prowl CMD hook okay so let's see one

00:18:14,500 --> 00:18:19,030
more thing before we see it in action I

00:18:16,030 --> 00:18:22,000
wanted to show you what it looks like if

00:18:19,030 --> 00:18:25,030
I just run the target this wasn't an

00:18:22,000 --> 00:18:28,870
action I specifically talked about but

00:18:25,030 --> 00:18:30,880
it's worth mentioning so now when I run

00:18:28,870 --> 00:18:32,740
the target this this is the template

00:18:30,880 --> 00:18:37,600
that will feed into all of those actions

00:18:32,740 --> 00:18:41,400
this built the component published it to

00:18:37,600 --> 00:18:44,080
the registry and then embedded the the

00:18:41,400 --> 00:18:46,270
reference to the exact image we pushed

00:18:44,080 --> 00:18:49,720
into the template in place of that tag

00:18:46,270 --> 00:18:52,480
and so the reference was GCRA okay des

00:18:49,720 --> 00:18:54,280
prowl hook some tag there's now a digest

00:18:52,480 --> 00:18:57,040
reference in there that makes sure we

00:18:54,280 --> 00:18:59,410
have a very strong sense for exactly

00:18:57,040 --> 00:19:02,590
what we just pushed but we have also

00:18:59,410 --> 00:19:05,770
pushed it somewhere else completely so I

00:19:02,590 --> 00:19:09,310
actually don't have access to this repo

00:19:05,770 --> 00:19:11,200
um and this may be this may reflect the

00:19:09,310 --> 00:19:12,940
sort of developer environment sort of

00:19:11,200 --> 00:19:14,560
feature because I may not want my

00:19:12,940 --> 00:19:16,840
developers to fat-finger pushes to

00:19:14,560 --> 00:19:19,570
prague right and so this enables

00:19:16,840 --> 00:19:21,580
developers to push to a repo or

00:19:19,570 --> 00:19:23,680
contributors to push to a repo to which

00:19:21,580 --> 00:19:25,930
they have access and to which their

00:19:23,680 --> 00:19:29,050
cluster has access during development

00:19:25,930 --> 00:19:31,480
that and then use those same or similar

00:19:29,050 --> 00:19:34,510
templates to run that in production

00:19:31,480 --> 00:19:40,540
against official released images so

00:19:34,510 --> 00:19:43,090
let's make a change I'm going to apply

00:19:40,540 --> 00:19:45,640
this so we're gonna make the bait the

00:19:43,090 --> 00:19:47,440
little basil bot or sorry the prowl bot

00:19:45,640 --> 00:19:52,870
that runs build a fire

00:19:47,440 --> 00:19:56,750
add a little hi basil con shout out in

00:19:52,870 --> 00:20:01,490
the comments it leaves and

00:19:56,750 --> 00:20:02,780
let's see hook deployment okay so now

00:20:01,490 --> 00:20:04,640
I'm gonna try and talk through what this

00:20:02,780 --> 00:20:05,960
is doing and I'm gonna probably alt-tab

00:20:04,640 --> 00:20:10,059
a whole bunch just to show you I'm not

00:20:05,960 --> 00:20:12,559
talking over it being really really slow

00:20:10,059 --> 00:20:16,370
and then I'll go back through and I'll

00:20:12,559 --> 00:20:18,770
explain oh so this is building the go

00:20:16,370 --> 00:20:20,419
binary sticking it into a docker layer

00:20:18,770 --> 00:20:24,039
publishing it to the registry so I came

00:20:20,419 --> 00:20:25,159
out into the yellow template and it is

00:20:24,039 --> 00:20:29,169
sorry

00:20:25,159 --> 00:20:31,970
then redeploying it to build if

00:20:29,169 --> 00:20:34,610
redeploying it to the kubernetes cluster

00:20:31,970 --> 00:20:35,299
and as you can see I tend to get pods as

00:20:34,610 --> 00:20:38,780
quickly as I could

00:20:35,299 --> 00:20:44,780
it is already up and running four

00:20:38,780 --> 00:20:47,890
seconds three seconds in basil and if we

00:20:44,780 --> 00:20:52,580
switch over here hi basil cut right so

00:20:47,890 --> 00:20:54,350
fast is my goal and so it was actually

00:20:52,580 --> 00:20:56,929
really fun I I now use these every

00:20:54,350 --> 00:20:59,510
opportunity I get because it's so much

00:20:56,929 --> 00:21:03,289
fun that just you know throw things over

00:20:59,510 --> 00:21:05,440
the wall that fast so um one more thing

00:21:03,289 --> 00:21:08,980
I wanted to show before handing it over

00:21:05,440 --> 00:21:11,720
so that took four seconds

00:21:08,980 --> 00:21:17,120
how long do you guys think it would take

00:21:11,720 --> 00:21:19,309
to replace all five deployments okay

00:21:17,120 --> 00:21:21,409
four seconds I was gonna I was hoping

00:21:19,309 --> 00:21:24,740
you guys would go 20 in our forties fine

00:21:21,409 --> 00:21:26,830
okay 30 seconds a poor second second I

00:21:24,740 --> 00:21:29,409
don't think it's quite that good so this

00:21:26,830 --> 00:21:33,140
[Music]

00:21:29,409 --> 00:21:35,299
four and a half okay so a lot less time

00:21:33,140 --> 00:21:36,679
is spent in basil this time but you know

00:21:35,299 --> 00:21:37,850
basically what this was doing is

00:21:36,679 --> 00:21:40,100
pointing it

00:21:37,850 --> 00:21:45,130
Basil's reproducibility and the benefits

00:21:40,100 --> 00:21:45,130
of reproducibility to doing this fast

00:21:45,820 --> 00:21:53,270
if I get pods only one of them changed

00:21:50,960 --> 00:21:56,809
because the image reference has only

00:21:53,270 --> 00:21:59,030
changed well 26 days ago right I've been

00:21:56,809 --> 00:22:02,030
practicing quite a bit right the image

00:21:59,030 --> 00:22:03,770
reference is you know aren't changing

00:22:02,030 --> 00:22:05,690
because you know it's broken it's not

00:22:03,770 --> 00:22:07,610
changing because every time I rebuild is

00:22:05,690 --> 00:22:10,859
producing the same digest for the docker

00:22:07,610 --> 00:22:15,489
image and so

00:22:10,859 --> 00:22:17,349
basically mm-hmm that four and a half

00:22:15,489 --> 00:22:19,539
seconds was making sure the registry had

00:22:17,349 --> 00:22:21,609
all five images running coop Connell

00:22:19,539 --> 00:22:23,319
replaced but four four of the five it

00:22:21,609 --> 00:22:24,549
was like well that's exactly the

00:22:23,319 --> 00:22:26,949
template I have I'm not going to do

00:22:24,549 --> 00:22:28,629
anything and then for that last one it

00:22:26,949 --> 00:22:30,909
moved the tag back to what it you know

00:22:28,629 --> 00:22:33,069
it was producing in a pointing to what

00:22:30,909 --> 00:22:37,299
ten minutes ago and then basically

00:22:33,069 --> 00:22:41,379
rolling back out the change to return it

00:22:37,299 --> 00:22:45,389
to the earlier version so with that I am

00:22:41,379 --> 00:22:45,389
going to hand things over to Myles and

00:22:45,659 --> 00:22:58,029
all right awesome yeah thank you so much

00:22:56,379 --> 00:23:00,219
Matt that's like such a cool demo and

00:22:58,029 --> 00:23:01,689
I'm like really really excited to start

00:23:00,219 --> 00:23:04,859
to play around with some of these new

00:23:01,689 --> 00:23:10,479
kubernetes objects rules as data breaks

00:23:04,859 --> 00:23:11,829
okay cool so a nice little segue I dated

00:23:10,479 --> 00:23:15,099
breaks everything that we do is on

00:23:11,829 --> 00:23:16,719
kubernetes so just to introduce a little

00:23:15,099 --> 00:23:18,789
bit like we have a bunch of kubernetes

00:23:16,719 --> 00:23:21,339
clusters running several terabytes of

00:23:18,789 --> 00:23:23,289
memory and hundreds of cores we use it

00:23:21,339 --> 00:23:25,929
for all of our production services as

00:23:23,289 --> 00:23:28,929
well as basically all of our development

00:23:25,929 --> 00:23:31,179
services as well and like Matt pointed

00:23:28,929 --> 00:23:33,639
out in his presentation we also leverage

00:23:31,179 --> 00:23:35,379
JSON it really really heavily we have a

00:23:33,639 --> 00:23:40,049
blog post about this on our blog you can

00:23:35,379 --> 00:23:44,679
go take a look at it if you want to but

00:23:40,049 --> 00:23:46,629
we also really love basil the card came

00:23:44,679 --> 00:23:48,879
out a little bit interesting but yeah

00:23:46,629 --> 00:23:51,009
anyways i if you were here yesterday you

00:23:48,879 --> 00:23:53,919
heard of here's talk about how we used

00:23:51,009 --> 00:23:56,289
to use SBT at data bricks to build scala

00:23:53,919 --> 00:23:59,769
java javascript and it was really sad

00:23:56,289 --> 00:24:02,649
face times like it was so miserable and

00:23:59,769 --> 00:24:05,619
over the course of last year we switched

00:24:02,649 --> 00:24:08,139
over to two basil and which meant from

00:24:05,619 --> 00:24:10,149
we went from you know only two people

00:24:08,139 --> 00:24:11,589
being able to make any kind of

00:24:10,149 --> 00:24:14,349
meaningful change to the build to

00:24:11,589 --> 00:24:16,089
basically anyone can you know add new

00:24:14,349 --> 00:24:17,979
build targets it's very flexible like

00:24:16,089 --> 00:24:20,499
every team is empowered to to do

00:24:17,979 --> 00:24:22,779
something new with the basil builds and

00:24:20,499 --> 00:24:24,080
we've kind of coined this or we call it

00:24:22,779 --> 00:24:25,160
internally to democratize

00:24:24,080 --> 00:24:27,980
the bill I'm sure I think I've heard

00:24:25,160 --> 00:24:29,480
this term also out here too that that is

00:24:27,980 --> 00:24:32,210
like so important at data breaks that

00:24:29,480 --> 00:24:35,090
any change to the bills now is not gated

00:24:32,210 --> 00:24:36,920
on you know the build experts anyone can

00:24:35,090 --> 00:24:38,420
really come in and say like oh I'd like

00:24:36,920 --> 00:24:40,280
to add a new target to build my new

00:24:38,420 --> 00:24:42,830
Scala stuff like great that's like

00:24:40,280 --> 00:24:45,320
really super easy or I want to build a

00:24:42,830 --> 00:24:47,330
new rule for instance to deploy my new

00:24:45,320 --> 00:24:48,530
infrastructure in this cool way which is

00:24:47,330 --> 00:24:51,260
what I'm going to talk to you about

00:24:48,530 --> 00:24:52,820
today and I'm not a build engineer I'm

00:24:51,260 --> 00:24:54,530
just like a normal software engineer I

00:24:52,820 --> 00:24:56,990
like looked at the Basel documentation

00:24:54,530 --> 00:24:58,880
talked to I hear a lot and kind of

00:24:56,990 --> 00:25:00,850
figured out like how you know if this

00:24:58,880 --> 00:25:04,940
was like kind of a feasible thing and I

00:25:00,850 --> 00:25:06,950
got to you know put together this rule

00:25:04,940 --> 00:25:09,770
that I'll tell you about and it's been

00:25:06,950 --> 00:25:11,600
really awesome so hopefully that's like

00:25:09,770 --> 00:25:13,940
inspiration to all of you and also not

00:25:11,600 --> 00:25:17,030
build engineers out there who are

00:25:13,940 --> 00:25:21,560
inspired by to use Basel to do some kind

00:25:17,030 --> 00:25:24,380
of cool deployment stuff so yeah just to

00:25:21,560 --> 00:25:28,310
kind of touch on the issues that we've

00:25:24,380 --> 00:25:30,280
that we face at data bricks so deploying

00:25:28,310 --> 00:25:32,600
can be like a lot of manual work and

00:25:30,280 --> 00:25:34,910
manual work for things that touch

00:25:32,600 --> 00:25:39,110
production is like really not pretty not

00:25:34,910 --> 00:25:40,790
pleasant at all especially one thing

00:25:39,110 --> 00:25:42,350
that we've observed is that a lot of our

00:25:40,790 --> 00:25:44,420
services we're trying to scale out over

00:25:42,350 --> 00:25:47,000
many different regions over different

00:25:44,420 --> 00:25:48,830
clouds you know you have dev staging

00:25:47,000 --> 00:25:49,700
production that are all separate you

00:25:48,830 --> 00:25:52,220
have different things for different

00:25:49,700 --> 00:25:54,020
users that are separate and it just is

00:25:52,220 --> 00:25:56,990
really cumbersome there's a lot of like

00:25:54,020 --> 00:25:58,400
manual typing out or you can kind of put

00:25:56,990 --> 00:25:59,600
things together into shell scripts but

00:25:58,400 --> 00:26:03,290
those are also really hard to maintain

00:25:59,600 --> 00:26:05,510
and it turns into that basically the

00:26:03,290 --> 00:26:07,610
operator has to do a lot of like kind of

00:26:05,510 --> 00:26:10,040
manual work we have like big wiki pages

00:26:07,610 --> 00:26:12,590
internally of like how somebody went to

00:26:10,040 --> 00:26:14,630
update something at data bricks and it

00:26:12,590 --> 00:26:15,650
was really kind of unpleasant to go

00:26:14,630 --> 00:26:17,900
through and make sure that those are

00:26:15,650 --> 00:26:19,400
up-to-date and you know every time there

00:26:17,900 --> 00:26:21,380
was a change we have to like go back and

00:26:19,400 --> 00:26:22,760
fix those wiki pages and sometimes do

00:26:21,380 --> 00:26:25,030
would forget and you know new people

00:26:22,760 --> 00:26:29,000
coming on like learn old doc easily mess

00:26:25,030 --> 00:26:31,130
and not only that but it's also we found

00:26:29,000 --> 00:26:33,200
really nice to have kind of in

00:26:31,130 --> 00:26:35,270
internally like have some things that

00:26:33,200 --> 00:26:36,650
run kind of on master all the time that

00:26:35,270 --> 00:26:37,820
way you can get a good sense of like

00:26:36,650 --> 00:26:39,830
what's the current current

00:26:37,820 --> 00:26:42,679
like you know like fresh off the press

00:26:39,830 --> 00:26:44,149
version of your services are but if you

00:26:42,679 --> 00:26:45,619
don't have any kind of process or

00:26:44,149 --> 00:26:47,149
practice to make sure the vets of today

00:26:45,619 --> 00:26:48,889
then that can be really old and we've

00:26:47,149 --> 00:26:50,929
also had problems where we didn't know

00:26:48,889 --> 00:26:53,779
you know this thing the service is like

00:26:50,929 --> 00:26:56,479
a month two months olds and can't use it

00:26:53,779 --> 00:26:57,649
for any kind of reliable like testing or

00:26:56,479 --> 00:27:01,070
figuring out like what the current state

00:26:57,649 --> 00:27:02,509
of affairs is so yeah that's one half

00:27:01,070 --> 00:27:04,429
the other half two is like when you're

00:27:02,509 --> 00:27:06,350
pushing to production you care about

00:27:04,429 --> 00:27:08,509
like auditing you want to see you know

00:27:06,350 --> 00:27:10,309
who's done what you know what what

00:27:08,509 --> 00:27:13,249
version is a thing running when was the

00:27:10,309 --> 00:27:14,389
last updated you know like who was the

00:27:13,249 --> 00:27:15,649
person that updated it is there an

00:27:14,389 --> 00:27:16,669
update happening right now you know

00:27:15,649 --> 00:27:19,759
there's a lot of kind of visibility

00:27:16,669 --> 00:27:21,080
stuff that you don't really get just

00:27:19,759 --> 00:27:22,369
from like you know running thing on the

00:27:21,080 --> 00:27:24,019
command line and you have to maybe that

00:27:22,369 --> 00:27:25,460
go to slack and say like oh guys by the

00:27:24,019 --> 00:27:29,119
way I'm updating our production web app

00:27:25,460 --> 00:27:30,679
like just so you know so but also that

00:27:29,119 --> 00:27:33,279
doesn't scale and like you know mint

00:27:30,679 --> 00:27:35,570
easy we forget that step two so

00:27:33,279 --> 00:27:37,519
basically what we wanted to do was like

00:27:35,570 --> 00:27:40,220
make this a whole lot easier and make it

00:27:37,519 --> 00:27:41,809
scale really easily so just we wanted

00:27:40,220 --> 00:27:44,090
something that was really automatic you

00:27:41,809 --> 00:27:46,789
know one button push and you could just

00:27:44,090 --> 00:27:48,619
kind of accept that the update was going

00:27:46,789 --> 00:27:49,849
to like work properly or if it didn't

00:27:48,619 --> 00:27:51,369
you would find out about it and have a

00:27:49,849 --> 00:27:53,840
way of kind of addressing that problem

00:27:51,369 --> 00:27:56,299
it should be also really easy to setup

00:27:53,840 --> 00:27:58,609
and use so we really wanted to make it

00:27:56,299 --> 00:28:00,889
possible for other people I've dated

00:27:58,609 --> 00:28:02,299
bricks to kind of leverage this you know

00:28:00,889 --> 00:28:04,639
infrastructure to deploy their own

00:28:02,299 --> 00:28:07,039
services okay yeah one note that I

00:28:04,639 --> 00:28:08,559
didn't touch on exactly earlier but I

00:28:07,039 --> 00:28:11,440
think is important to mention is that

00:28:08,559 --> 00:28:13,909
for many of the teams that data bricks I

00:28:11,440 --> 00:28:15,889
team is responsible for their own

00:28:13,909 --> 00:28:17,599
rollouts like my team not only do we

00:28:15,889 --> 00:28:19,669
develop our services but we also deploy

00:28:17,599 --> 00:28:21,349
them and monitor them and kind of are

00:28:19,669 --> 00:28:24,379
responsible for the whole life cycle of

00:28:21,349 --> 00:28:26,359
this applications so for us it's really

00:28:24,379 --> 00:28:29,570
important to make sure that each team is

00:28:26,359 --> 00:28:30,979
like has the ability to leverage this

00:28:29,570 --> 00:28:33,169
kind of deployment infrastructure with

00:28:30,979 --> 00:28:34,460
the least amount of friction possible so

00:28:33,169 --> 00:28:36,349
I was hoping to build something that was

00:28:34,460 --> 00:28:38,989
like easy to use this way that anyone

00:28:36,349 --> 00:28:40,960
could kind of like figure out and and

00:28:38,989 --> 00:28:43,369
and get working in their environment

00:28:40,960 --> 00:28:44,840
really quickly and we'd like it to be

00:28:43,369 --> 00:28:46,220
integrated with basil because there's a

00:28:44,840 --> 00:28:48,919
lot of you know cool things that Bale

00:28:46,220 --> 00:28:50,749
does and like I thought that would be it

00:28:48,919 --> 00:28:51,500
really fun and also give us like you

00:28:50,749 --> 00:28:53,330
know

00:28:51,500 --> 00:28:55,160
kind of a kind of full circle

00:28:53,330 --> 00:28:56,930
integration like the thing that can be

00:28:55,160 --> 00:28:59,600
tested and I think that we can rely on

00:28:56,930 --> 00:29:02,990
to like you know produce the right kind

00:28:59,600 --> 00:29:06,760
of infrastructure for us so what we came

00:29:02,990 --> 00:29:09,650
up with was this application rule and

00:29:06,760 --> 00:29:11,660
basically this is a build rule that has

00:29:09,650 --> 00:29:12,890
a special guest star of Jenkins if you

00:29:11,660 --> 00:29:14,330
guys are you know deploying things

00:29:12,890 --> 00:29:15,860
basically you probably you might be

00:29:14,330 --> 00:29:19,490
using Jenkins so this is a pretty common

00:29:15,860 --> 00:29:21,050
setup and yeah so on the left side

00:29:19,490 --> 00:29:23,300
you'll see kind of what it looks like to

00:29:21,050 --> 00:29:25,160
use this rule it's actually really dead

00:29:23,300 --> 00:29:26,720
simple it has a very limited number of

00:29:25,160 --> 00:29:28,610
parameters it's like five lines in your

00:29:26,720 --> 00:29:30,740
build file and it does all these things

00:29:28,610 --> 00:29:32,540
that you want so you pick a name for

00:29:30,740 --> 00:29:34,100
your service or in this case I said my

00:29:32,540 --> 00:29:35,810
service you pick a slack channel that

00:29:34,100 --> 00:29:38,210
you'd like to you know let you know

00:29:35,810 --> 00:29:39,770
about things that are going on we also

00:29:38,210 --> 00:29:41,990
support kind of this interesting feature

00:29:39,770 --> 00:29:43,870
of like production like canary group so

00:29:41,990 --> 00:29:46,790
you roll out something to one production

00:29:43,870 --> 00:29:49,040
like like you like location first before

00:29:46,790 --> 00:29:50,720
other places and then maybe if you would

00:29:49,040 --> 00:29:52,340
like you can opt in to like periodically

00:29:50,720 --> 00:29:54,530
updating your service and development

00:29:52,340 --> 00:29:56,960
every morning which is what we have here

00:29:54,530 --> 00:30:00,200
and that's it and with this you kind of

00:29:56,960 --> 00:30:01,580
get easy to use Jenkins job to update

00:30:00,200 --> 00:30:06,800
your services across all of your

00:30:01,580 --> 00:30:08,090
environments and with no hassle so we're

00:30:06,800 --> 00:30:09,440
running a little bit short on time so

00:30:08,090 --> 00:30:11,120
I'm gonna try and go through this sort

00:30:09,440 --> 00:30:14,000
of quickly but basically there's like

00:30:11,120 --> 00:30:16,040
four simple steps to using this thing

00:30:14,000 --> 00:30:17,660
the first is we compile what I call a

00:30:16,040 --> 00:30:20,180
list of update groups this is

00:30:17,660 --> 00:30:22,940
essentially kind of a mapping of you

00:30:20,180 --> 00:30:25,250
know like the regime of deployments to

00:30:22,940 --> 00:30:27,620
the specific environments that are

00:30:25,250 --> 00:30:28,520
deploying into so for in in our case

00:30:27,620 --> 00:30:31,490
because we're doing everything on

00:30:28,520 --> 00:30:33,470
kubernetes this turns into like the set

00:30:31,490 --> 00:30:36,200
of kubernetes clusters that I'd like to

00:30:33,470 --> 00:30:37,490
learn my application on so maybe you

00:30:36,200 --> 00:30:39,740
want to kind of have some moniker like

00:30:37,490 --> 00:30:40,940
dev that means to apply something to all

00:30:39,740 --> 00:30:43,400
of your development clusters across

00:30:40,940 --> 00:30:45,500
everywhere or you want to deploy just

00:30:43,400 --> 00:30:47,660
your staging AWS clusters or something

00:30:45,500 --> 00:30:49,910
like this and so we have these kind of

00:30:47,660 --> 00:30:51,980
abbreviated list of groups that we're

00:30:49,910 --> 00:30:55,730
deploying to that's step one step two is

00:30:51,980 --> 00:30:57,710
to produce and check in a XML file that

00:30:55,730 --> 00:30:59,660
describes the Jenkins job this is like

00:30:57,710 --> 00:31:01,190
kind of a standard in the Jenkins world

00:30:59,660 --> 00:31:04,190
that you can define you describe your

00:31:01,190 --> 00:31:05,309
Jenkins infrastructure using XML and

00:31:04,190 --> 00:31:08,149
then upload it stinkin

00:31:05,309 --> 00:31:11,820
and then everything's magical happiness

00:31:08,149 --> 00:31:13,499
so yeah let me just really quickly go

00:31:11,820 --> 00:31:16,230
through so what it looks like it dated

00:31:13,499 --> 00:31:17,820
Rick's is we use JSON it and so all of

00:31:16,230 --> 00:31:19,019
our deployment templates are JSON it and

00:31:17,820 --> 00:31:21,480
they're laid out in this kind of

00:31:19,019 --> 00:31:23,159
interesting way where we're able to kind

00:31:21,480 --> 00:31:24,509
of separate kind of if they cloud that

00:31:23,159 --> 00:31:26,249
we're deploying onto the environment

00:31:24,509 --> 00:31:28,200
that we're in region that we're in by

00:31:26,249 --> 00:31:29,909
different directories and what this

00:31:28,200 --> 00:31:31,980
allows us to do is to kind of can

00:31:29,909 --> 00:31:34,889
programmatically construct the

00:31:31,980 --> 00:31:35,970
kubernetes context or cluster that we're

00:31:34,889 --> 00:31:37,919
going to be launching something into

00:31:35,970 --> 00:31:41,159
just by looking at its path inside of

00:31:37,919 --> 00:31:42,269
this inside of this directory and as a

00:31:41,159 --> 00:31:44,940
result it becomes really easy to

00:31:42,269 --> 00:31:47,519
construct this kind of set of contexts

00:31:44,940 --> 00:31:50,009
that we'll be deploying things into with

00:31:47,519 --> 00:31:51,659
this infrastructure and so here this is

00:31:50,009 --> 00:31:53,369
like you know you have dev staging prod

00:31:51,659 --> 00:31:55,110
and maybe you have like a group 1 and

00:31:53,369 --> 00:31:57,539
group 2 for production and that's kind

00:31:55,110 --> 00:31:59,190
of illustrated here in this JSON file so

00:31:57,539 --> 00:32:01,580
this is one action in kubernetes

00:31:59,190 --> 00:32:04,919
produces this erin basil produces this

00:32:01,580 --> 00:32:07,080
JSON file the next thing is to kind of

00:32:04,919 --> 00:32:09,570
convert this into XML file for Jenkins

00:32:07,080 --> 00:32:11,220
this is you know basically a really

00:32:09,570 --> 00:32:13,679
simple uses this thing called Jenkins

00:32:11,220 --> 00:32:15,749
job builder this is open source tool I

00:32:13,679 --> 00:32:18,149
have a link to it in the in the on the

00:32:15,749 --> 00:32:21,059
last slide and then the last thing oh

00:32:18,149 --> 00:32:22,259
yes so they say this XML file one

00:32:21,059 --> 00:32:24,149
important part is that this is actually

00:32:22,259 --> 00:32:26,490
checked in and there's a test that makes

00:32:24,149 --> 00:32:28,619
sure that this XML file is generated in

00:32:26,490 --> 00:32:30,629
the same way from what's checked in to

00:32:28,619 --> 00:32:33,059
our repository and that makes it really

00:32:30,629 --> 00:32:34,860
easy to enforce that the Jenkins job

00:32:33,059 --> 00:32:36,600
that is running on Jenkins is actually

00:32:34,860 --> 00:32:38,730
able to deploy the infrastructure that's

00:32:36,600 --> 00:32:40,110
checked in because like you know if you

00:32:38,730 --> 00:32:41,519
add a new cloud you want to make sure

00:32:40,110 --> 00:32:43,019
that you have the option to deploy to

00:32:41,519 --> 00:32:45,690
that new cloud if you add a new region

00:32:43,019 --> 00:32:46,919
you know our new really kind of kind of

00:32:45,690 --> 00:32:49,259
grouping you want to make sure that you

00:32:46,919 --> 00:32:51,240
can deploy that grouping so having this

00:32:49,259 --> 00:32:53,340
checked in is makes it really easy to

00:32:51,240 --> 00:32:54,749
ensure that somebody you know when they

00:32:53,340 --> 00:32:56,759
make a change that affects this job

00:32:54,749 --> 00:33:00,869
they'll make also check it in and upload

00:32:56,759 --> 00:33:03,090
it to Jenkins so yeah and then the last

00:33:00,869 --> 00:33:04,679
step is to upload its Jenkins and we

00:33:03,090 --> 00:33:07,019
we've kind of made this convenient by

00:33:04,679 --> 00:33:08,669
adding like a simple basil run command

00:33:07,019 --> 00:33:10,710
that just kind of makes the writing API

00:33:08,669 --> 00:33:12,509
calls to Jenkins and puts up there and

00:33:10,710 --> 00:33:16,289
you get a little Jenkins job that allows

00:33:12,509 --> 00:33:18,600
you to deploy your thing so yeah

00:33:16,289 --> 00:33:19,290
basically why is this awesome one thing

00:33:18,600 --> 00:33:21,270
is

00:33:19,290 --> 00:33:23,750
we've discovered is like as we add more

00:33:21,270 --> 00:33:26,250
and more regions it was originally like

00:33:23,750 --> 00:33:27,750
you know more and more work for a

00:33:26,250 --> 00:33:29,340
deployment operator but now it's

00:33:27,750 --> 00:33:30,690
automatically picked up by the Jenkins

00:33:29,340 --> 00:33:32,970
job the job doesn't change if you add a

00:33:30,690 --> 00:33:34,500
new region as long as it's deploying

00:33:32,970 --> 00:33:37,380
within the same kind of in like you know

00:33:34,500 --> 00:33:39,000
staging or Staden in the cloud so you

00:33:37,380 --> 00:33:40,800
this job doesn't change that much but it

00:33:39,000 --> 00:33:42,150
automatically can deploy to like and if

00:33:40,800 --> 00:33:45,900
all the different regions that you

00:33:42,150 --> 00:33:50,670
support if you add a new like scope dev

00:33:45,900 --> 00:33:52,110
skiing prod or cloud like I said will

00:33:50,670 --> 00:33:54,000
automatically generate like a new kind

00:33:52,110 --> 00:33:56,940
of input in Jenkins will make sure that

00:33:54,000 --> 00:33:59,070
it's that new in that new job is tested

00:33:56,940 --> 00:34:01,350
properly and will generate the script to

00:33:59,070 --> 00:34:03,000
upload it really easily and then we can

00:34:01,350 --> 00:34:04,650
also like automatically update dev so

00:34:03,000 --> 00:34:06,630
there's no code rot that's like a kind

00:34:04,650 --> 00:34:09,659
of a little thing but it kind of adds up

00:34:06,630 --> 00:34:11,940
in the long run I guess it's audited

00:34:09,659 --> 00:34:13,530
which is really cool so you can see like

00:34:11,940 --> 00:34:15,990
historical or current runs in the

00:34:13,530 --> 00:34:17,669
Jenkins job UI and with the slack

00:34:15,990 --> 00:34:19,409
integration it also kind of pushes out

00:34:17,669 --> 00:34:21,480
notifications to our team so that

00:34:19,409 --> 00:34:23,550
everyone on the team finds out about if

00:34:21,480 --> 00:34:24,960
there's an update that's happening and

00:34:23,550 --> 00:34:26,280
so this is kind of an example of what it

00:34:24,960 --> 00:34:27,840
looks like yet data bricks this is one

00:34:26,280 --> 00:34:29,790
of our Jenkins jobs that we use to

00:34:27,840 --> 00:34:31,710
update a service that we'd called the

00:34:29,790 --> 00:34:34,250
central service which is a stupid name

00:34:31,710 --> 00:34:37,020
for service but that's beside the point

00:34:34,250 --> 00:34:38,520
but anyways you can kind of see like you

00:34:37,020 --> 00:34:41,970
have even statistics about like how long

00:34:38,520 --> 00:34:43,679
it takes to do different parts of the

00:34:41,970 --> 00:34:45,030
update on the kind of bottom right-hand

00:34:43,679 --> 00:34:46,740
side you on the left side you can see

00:34:45,030 --> 00:34:48,720
kind of historical runs and you can see

00:34:46,740 --> 00:34:51,179
who's triggered them and the outputs of

00:34:48,720 --> 00:34:52,830
each of the ghost job runs so that's

00:34:51,179 --> 00:34:54,600
really nice and then we get kind of

00:34:52,830 --> 00:34:56,159
these slack messages that say like you

00:34:54,600 --> 00:34:57,960
know so-and-so in this case this is like

00:34:56,159 --> 00:34:59,940
our automatic updater Jenkins it's

00:34:57,960 --> 00:35:03,060
updating you know a service central in

00:34:59,940 --> 00:35:05,640
our development IDs like contexts and

00:35:03,060 --> 00:35:09,510
then it tells me what image I'm using to

00:35:05,640 --> 00:35:11,640
when I'm deploying the service here and

00:35:09,510 --> 00:35:14,370
then also it's really easy you only need

00:35:11,640 --> 00:35:16,110
to add a one basil target so anyone can

00:35:14,370 --> 00:35:17,190
do this they basically take you know two

00:35:16,110 --> 00:35:19,230
minutes of their life to learn how to

00:35:17,190 --> 00:35:21,150
use this rule pop it into their build

00:35:19,230 --> 00:35:22,860
file somewhere and then it can

00:35:21,150 --> 00:35:26,370
automatically start leveraging this cool

00:35:22,860 --> 00:35:29,790
deployment stuff so yeah that's all that

00:35:26,370 --> 00:35:32,670
I got I want to just really thank you to

00:35:29,790 --> 00:35:32,970
the cloud team the growth team and build

00:35:32,670 --> 00:35:35,220
team

00:35:32,970 --> 00:35:38,250
data breaks and especially here who's

00:35:35,220 --> 00:35:40,800
here presenting and Aaron Davidson and

00:35:38,250 --> 00:35:43,680
also for Jules Damji for helping review

00:35:40,800 --> 00:35:46,140
this presentation for me hi and I wanted

00:35:43,680 --> 00:35:47,760
to make sure to thank Dan Lawrence and

00:35:46,140 --> 00:35:50,010
Matt Rickman who have been contributing

00:35:47,760 --> 00:35:51,840
to the Basel rules as well as filling

00:35:50,010 --> 00:36:02,520
out some of the distro with stuff as

00:35:51,840 --> 00:36:03,990
well as yummy in from the basel team so

00:36:02,520 --> 00:36:06,210
we're open things up for questions and

00:36:03,990 --> 00:36:10,280
we have a wall of links that will just

00:36:06,210 --> 00:36:10,280

YouTube URL: https://www.youtube.com/watch?v=RS1aiQqgUTA


