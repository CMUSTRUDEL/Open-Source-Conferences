Title: Tensorflow with Bazel â€” Lessons Learned
Publication date: 2017-12-08
Playlist: BazelCon 2017
Description: 
	by Gunhan Gulsoy (Google TensorFlow team)
Captions: 
	00:00:00,030 --> 00:00:05,339
hello everyone I'm gonna hug you soya I

00:00:03,170 --> 00:00:10,200
am a software engineering tools

00:00:05,339 --> 00:00:13,769
infrastructure at Google I lead testing

00:00:10,200 --> 00:00:14,490
and development infrastructure team in

00:00:13,769 --> 00:00:17,070
tensorflow

00:00:14,490 --> 00:00:18,779
and I'm usually better with these kind

00:00:17,070 --> 00:00:21,960
of setting up presentations things but

00:00:18,779 --> 00:00:24,750
sorry for taking so long so today I'll

00:00:21,960 --> 00:00:30,560
talk to you a little bit about our story

00:00:24,750 --> 00:00:35,940
with Basel so first I'll start with

00:00:30,560 --> 00:00:38,579
talking about how we use basil how we

00:00:35,940 --> 00:00:41,760
used to use basil and after open

00:00:38,579 --> 00:00:43,800
sourcing our youth spacer and then I'll

00:00:41,760 --> 00:00:50,780
go into some details about our builds

00:00:43,800 --> 00:00:53,160
and our going over examples how we just

00:00:50,780 --> 00:00:57,000
overcome various problems we run into

00:00:53,160 --> 00:00:59,969
using basil and finally I'll talk about

00:00:57,000 --> 00:01:02,160
just a few open problems like things

00:00:59,969 --> 00:01:06,119
that could happen that would make our

00:01:02,160 --> 00:01:09,840
basil experience much better so first

00:01:06,119 --> 00:01:14,360
how do we use basil before open sourcing

00:01:09,840 --> 00:01:18,600
as you have already heard about

00:01:14,360 --> 00:01:21,509
internally there's place we build only

00:01:18,600 --> 00:01:24,380
for Google using Blaise and people only

00:01:21,509 --> 00:01:27,960
need to use transform Linux systems

00:01:24,380 --> 00:01:30,810
internally we have multiple languages if

00:01:27,960 --> 00:01:34,220
you have seen our repository we have C++

00:01:30,810 --> 00:01:36,600
Python sweet wrappers and between

00:01:34,220 --> 00:01:38,490
nowadays people are adding all kinds of

00:01:36,600 --> 00:01:44,729
wrappers I think we now even have

00:01:38,490 --> 00:01:47,070
Haskell support but that's internally

00:01:44,729 --> 00:01:49,049
that used to be not the case but we

00:01:47,070 --> 00:01:51,390
support multiple languages however

00:01:49,049 --> 00:01:53,040
internally there's only a single tool

00:01:51,390 --> 00:01:55,560
chain and compiler we need to worry

00:01:53,040 --> 00:01:57,719
about all code is local everything is in

00:01:55,560 --> 00:02:00,329
a single repository so when we need to

00:01:57,719 --> 00:02:04,560
build we just go to that repository and

00:02:00,329 --> 00:02:07,680
that's it and one of the best parts has

00:02:04,560 --> 00:02:10,289
been since place has been used for a

00:02:07,680 --> 00:02:11,730
while internally for whatever you want

00:02:10,289 --> 00:02:13,590
to do there are solutions that people

00:02:11,730 --> 00:02:16,050
have already implemented for us so

00:02:13,590 --> 00:02:20,370
we just search for things copy/paste and

00:02:16,050 --> 00:02:23,150
it works and distributed bills I can go

00:02:20,370 --> 00:02:26,130
on and on about distributed bills but

00:02:23,150 --> 00:02:28,410
it's just you don't need to worry about

00:02:26,130 --> 00:02:31,349
not being able to use your computer

00:02:28,410 --> 00:02:34,349
while you are building or just build

00:02:31,349 --> 00:02:36,330
however large but back in searching for

00:02:34,349 --> 00:02:39,140
views to build all of search within five

00:02:36,330 --> 00:02:42,269
minutes and it's just great

00:02:39,140 --> 00:02:45,030
so when we decided to open source

00:02:42,269 --> 00:02:47,819
I think basil was open sourced before

00:02:45,030 --> 00:02:49,890
tensorflow and realize oh basically is

00:02:47,819 --> 00:02:56,400
also open source so one less thing to

00:02:49,890 --> 00:02:58,319
worry about right there were quite a few

00:02:56,400 --> 00:03:02,610
things to worry about so everything

00:02:58,319 --> 00:03:05,220
every item almost I covered has posed

00:03:02,610 --> 00:03:08,040
problems for us so before we were

00:03:05,220 --> 00:03:11,130
building for only for Google not even or

00:03:08,040 --> 00:03:16,260
not now we are building for any computer

00:03:11,130 --> 00:03:19,620
that runs really we still have multiple

00:03:16,260 --> 00:03:22,799
languages but for do for all of these

00:03:19,620 --> 00:03:26,190
languages people can use any compiler

00:03:22,799 --> 00:03:28,380
like we have users who use Centaurus

00:03:26,190 --> 00:03:30,690
systems that were last in Seoul 15 years

00:03:28,380 --> 00:03:38,609
ago and they want to compile tester for

00:03:30,690 --> 00:03:41,190
all these and we cannot use our one big

00:03:38,609 --> 00:03:43,170
great repository now so we just need to

00:03:41,190 --> 00:03:46,859
depend on the internet to let us

00:03:43,170 --> 00:03:50,609
download things and I think one of the

00:03:46,859 --> 00:03:52,709
most painful things as being we just had

00:03:50,609 --> 00:03:54,420
to part from all of that accumulated

00:03:52,709 --> 00:03:58,049
knowledge about blaze and the build

00:03:54,420 --> 00:04:01,859
system so I think we are we were one of

00:03:58,049 --> 00:04:03,900
the first teams to open-source using

00:04:01,859 --> 00:04:11,340
basil at the scale tensorflow head was

00:04:03,900 --> 00:04:17,070
using I might be wrong but it felt that

00:04:11,340 --> 00:04:23,000
way but we had a lot of help from basil

00:04:17,070 --> 00:04:25,860
team so I'll get to that and one of the

00:04:23,000 --> 00:04:27,360
difficult transitions has been you know

00:04:25,860 --> 00:04:29,189
parting from our grain

00:04:27,360 --> 00:04:32,039
distributed build system into this

00:04:29,189 --> 00:04:34,110
mostly local builds where everyone wants

00:04:32,039 --> 00:04:37,500
to build them on their laptop and just

00:04:34,110 --> 00:04:41,879
comes to the painful realization that it

00:04:37,500 --> 00:04:45,180
takes ages to really build anything so

00:04:41,879 --> 00:04:48,030
really when doing these at times think

00:04:45,180 --> 00:04:50,849
things really looked impossible but then

00:04:48,030 --> 00:04:53,580
we just realized using skylark and

00:04:50,849 --> 00:04:56,879
different approaches how flexible a

00:04:53,580 --> 00:05:00,360
basil has been and I think even in some

00:04:56,879 --> 00:05:02,340
cases basil team were also thinking Oh

00:05:00,360 --> 00:05:04,680
to do that we need to add this support

00:05:02,340 --> 00:05:06,509
and then one week later we were able to

00:05:04,680 --> 00:05:08,219
implement the solution using sky lock so

00:05:06,509 --> 00:05:12,750
that was a neat trick those are

00:05:08,219 --> 00:05:18,090
interesting cases so with that let me

00:05:12,750 --> 00:05:21,779
move into some details about how we use

00:05:18,090 --> 00:05:26,129
basil from our repository from our code

00:05:21,779 --> 00:05:28,650
itself I have to warn you these are not

00:05:26,129 --> 00:05:33,330
all great solutions some of them are

00:05:28,650 --> 00:05:34,580
really really ugly don't take us as the

00:05:33,330 --> 00:05:39,810
gold standard

00:05:34,580 --> 00:05:42,120
however they work they work they people

00:05:39,810 --> 00:05:48,389
use tensorflow they seem to be happy in

00:05:42,120 --> 00:05:50,479
it so we would like to ditch these

00:05:48,389 --> 00:05:55,069
solutions for better ones eventually

00:05:50,479 --> 00:05:58,080
so let me talk about how we set up our

00:05:55,069 --> 00:06:02,000
dependencies so first obviously be it

00:05:58,080 --> 00:06:04,560
had a single repository now we have a

00:06:02,000 --> 00:06:06,419
model where we download tensor flow and

00:06:04,560 --> 00:06:08,339
tensor flow depends on a lot of external

00:06:06,419 --> 00:06:10,860
things so when we are building we have

00:06:08,339 --> 00:06:13,770
to depend on many other things so how do

00:06:10,860 --> 00:06:18,330
we do this simply using the workspace

00:06:13,770 --> 00:06:19,949
file so you can see entries like this in

00:06:18,330 --> 00:06:21,779
our workspace bounty if you go to

00:06:19,949 --> 00:06:24,779
tensorflow repository that's the file

00:06:21,779 --> 00:06:28,050
I'm taking this example from and once we

00:06:24,779 --> 00:06:30,860
define this dependency you just refer to

00:06:28,050 --> 00:06:33,900
this as an icon archive and then

00:06:30,860 --> 00:06:36,180
everything is available just like it's

00:06:33,900 --> 00:06:40,430
in the same repository no not really

00:06:36,180 --> 00:06:42,950
but sort of so it works

00:06:40,430 --> 00:06:47,900
now we can use multiple repositories in

00:06:42,950 --> 00:06:49,670
our builds then the next problem we have

00:06:47,900 --> 00:06:53,240
to look into monthly key dependencies it

00:06:49,670 --> 00:06:56,090
turns out downloading things is really

00:06:53,240 --> 00:06:57,680
flaky apparently it was not just

00:06:56,090 --> 00:07:01,310
internet explorer that was flaky

00:06:57,680 --> 00:07:03,410
downloading things but the problem we

00:07:01,310 --> 00:07:06,410
saw was most of our dependencies have

00:07:03,410 --> 00:07:10,190
been in github and last year github

00:07:06,410 --> 00:07:12,010
availability was around 98% and in the

00:07:10,190 --> 00:07:14,630
last slide I didn't talk about it but

00:07:12,010 --> 00:07:17,600
there was a note that said we have more

00:07:14,630 --> 00:07:21,260
than 20 external dependencies when you

00:07:17,600 --> 00:07:24,140
add all these numbers up you can go to a

00:07:21,260 --> 00:07:26,900
number like less than 60 70 percent

00:07:24,140 --> 00:07:31,040
availability for downloads it's

00:07:26,900 --> 00:07:34,940
unacceptable simply so Justine from our

00:07:31,040 --> 00:07:38,930
team has designed and contributed basil

00:07:34,940 --> 00:07:40,310
downloader to basil itself so basil

00:07:38,930 --> 00:07:43,910
downloader simply lets us define

00:07:40,310 --> 00:07:46,190
multiple mirrors for everything and it

00:07:43,910 --> 00:07:49,940
also adds exponential back-off retrying

00:07:46,190 --> 00:07:52,220
and other measures for giving us poor

00:07:49,940 --> 00:07:54,980
stability so with that we are able to

00:07:52,220 --> 00:07:58,550
get to more than 99% reliability for

00:07:54,980 --> 00:07:59,900
downloading our dependencies so now we

00:07:58,550 --> 00:08:02,740
are back in business

00:07:59,900 --> 00:08:02,740
it's great

00:08:04,040 --> 00:08:11,630
another problem was basil since we were

00:08:09,230 --> 00:08:15,230
one of the first projects open sourcing

00:08:11,630 --> 00:08:17,300
with basil and we have still this

00:08:15,230 --> 00:08:22,280
problem persists basil has not used that

00:08:17,300 --> 00:08:24,470
finely yet so there are many build files

00:08:22,280 --> 00:08:28,280
for projects we download them but what

00:08:24,470 --> 00:08:30,380
do we do with that code so for those we

00:08:28,280 --> 00:08:32,510
write our own build files we maintain

00:08:30,380 --> 00:08:36,290
many many build files for different

00:08:32,510 --> 00:08:39,260
projects ourselves it's not ideal but we

00:08:36,290 --> 00:08:41,660
are it's the situation just keeps

00:08:39,260 --> 00:08:45,590
improving as more projects add just

00:08:41,660 --> 00:08:47,810
build files and what happens here is

00:08:45,590 --> 00:08:52,190
basil downloads the dependency checks

00:08:47,810 --> 00:08:53,840
the checksum adjust the director names

00:08:52,190 --> 00:08:57,590
based on strip prefix

00:08:53,840 --> 00:08:59,750
there and then finally that built file

00:08:57,590 --> 00:09:01,880
we defined there is copied into the

00:08:59,750 --> 00:09:03,980
repository route so that once we refer

00:09:01,880 --> 00:09:05,390
to this repository there's a build file

00:09:03,980 --> 00:09:10,850
and basil don't ought to do with the

00:09:05,390 --> 00:09:16,400
code another problem we have is system

00:09:10,850 --> 00:09:19,940
packages one example I'd like to give

00:09:16,400 --> 00:09:23,450
here is CUDA the reason I want to

00:09:19,940 --> 00:09:25,340
mention that depend that is not

00:09:23,450 --> 00:09:28,550
everything is as simple as that we

00:09:25,340 --> 00:09:30,580
download it then we build it from

00:09:28,550 --> 00:09:34,220
sources or we download it and we use it

00:09:30,580 --> 00:09:35,840
know some of the things are like CUDA

00:09:34,220 --> 00:09:38,090
for example is you need to go to an

00:09:35,840 --> 00:09:38,870
media page read all their Terms of

00:09:38,090 --> 00:09:41,450
Service

00:09:38,870 --> 00:09:43,580
accepted after reading it and download

00:09:41,450 --> 00:09:45,590
it and when installing it go through the

00:09:43,580 --> 00:09:47,590
same process read it read the Terms of

00:09:45,590 --> 00:09:50,000
Service accepted and install it

00:09:47,590 --> 00:09:52,760
obviously we cannot eat duties for you

00:09:50,000 --> 00:09:56,180
so what we do instead and this was

00:09:52,760 --> 00:09:58,490
contributed we had some hacks in place

00:09:56,180 --> 00:10:04,090
and a better solution was contributed to

00:09:58,490 --> 00:10:07,220
us by basil team and David Chen as we

00:10:04,090 --> 00:10:10,670
village we asked you to install CUDA on

00:10:07,220 --> 00:10:15,440
your system first then in our repository

00:10:10,670 --> 00:10:18,590
we have some not really dummy but fake

00:10:15,440 --> 00:10:21,650
report fake repositories fake

00:10:18,590 --> 00:10:24,320
dependencies we create using skylark

00:10:21,650 --> 00:10:25,460
that are just symbols to the actual

00:10:24,320 --> 00:10:31,520
files on your system you installed

00:10:25,460 --> 00:10:34,490
yourself so this way you only you will

00:10:31,520 --> 00:10:36,890
be responsible of responsible with

00:10:34,490 --> 00:10:40,400
getting these repositories getting these

00:10:36,890 --> 00:10:42,140
dependencies on your system but we will

00:10:40,400 --> 00:10:49,760
be they will be made available to our

00:10:42,140 --> 00:10:53,870
bills and another thing is swag and

00:10:49,760 --> 00:10:56,630
cliff are some dependencies that are not

00:10:53,870 --> 00:11:00,050
just simply we download we build or we

00:10:56,630 --> 00:11:02,990
link to our files and that's it some

00:11:00,050 --> 00:11:05,900
dependencies are like swig we download

00:11:02,990 --> 00:11:10,010
it we build it

00:11:05,900 --> 00:11:14,420
sorry we build it then we use tweak to

00:11:10,010 --> 00:11:18,830
build our swing files then those outputs

00:11:14,420 --> 00:11:22,610
are built linked into our build so these

00:11:18,830 --> 00:11:25,790
have been difficult to handle but we

00:11:22,610 --> 00:11:29,030
were able to write our own files write

00:11:25,790 --> 00:11:32,470
our own skylark rules that are that are

00:11:29,030 --> 00:11:35,480
able to just download and build swag and

00:11:32,470 --> 00:11:39,140
based on your operating system or your

00:11:35,480 --> 00:11:43,100
sees other constraints just decide on

00:11:39,140 --> 00:11:46,820
what arguments to feed build the other

00:11:43,100 --> 00:11:49,610
dependencies your swig swig rapid

00:11:46,820 --> 00:11:52,550
rappings might need then actually run

00:11:49,610 --> 00:11:54,710
the swig command to just three grab your

00:11:52,550 --> 00:11:56,990
files and make all the things available

00:11:54,710 --> 00:11:58,820
we just write this rule ones and use it

00:11:56,990 --> 00:12:04,700
multiple times all over our repository

00:11:58,820 --> 00:12:09,080
and the however difficult the writing

00:12:04,700 --> 00:12:11,450
part has been it now works but not

00:12:09,080 --> 00:12:14,210
everything is a sad story like that so

00:12:11,450 --> 00:12:17,510
protobuf is something similar protocol

00:12:14,210 --> 00:12:20,150
buffers are just like swig or cliff we

00:12:17,510 --> 00:12:22,760
need to download protocol buffers we

00:12:20,150 --> 00:12:25,550
need to build the proto C compiler then

00:12:22,760 --> 00:12:28,880
we need to use that to build our

00:12:25,550 --> 00:12:32,120
protocol buffer libraries while we

00:12:28,880 --> 00:12:36,080
started with our own rules for protocol

00:12:32,120 --> 00:12:38,600
buffers once protocol buffers maintainer

00:12:36,080 --> 00:12:41,300
decided oh hey basil is also open source

00:12:38,600 --> 00:12:42,890
that's also open source our Basil's once

00:12:41,300 --> 00:12:45,860
they did that we were able to just

00:12:42,890 --> 00:12:53,360
switch to the rules they maintain and

00:12:45,860 --> 00:12:56,030
now it's much cleaner so there's hope so

00:12:53,360 --> 00:12:59,750
that's all I want to talk about today

00:12:56,030 --> 00:13:01,730
about our verse space and our

00:12:59,750 --> 00:13:04,280
dependencies then I would like to go

00:13:01,730 --> 00:13:11,420
talk a little bit about our build and

00:13:04,280 --> 00:13:14,540
packaging and so open source tensorflow

00:13:11,420 --> 00:13:16,340
you may or may not know has support for

00:13:14,540 --> 00:13:18,500
different operating systems different

00:13:16,340 --> 00:13:19,760
Python versions you can run tensorflow

00:13:18,500 --> 00:13:22,280
on your CPU or

00:13:19,760 --> 00:13:24,650
your GPU you need we support different

00:13:22,280 --> 00:13:27,560
compilers its support different CUDA

00:13:24,650 --> 00:13:29,390
versions you can even compile tensorflow

00:13:27,560 --> 00:13:32,420
for different instruction set

00:13:29,390 --> 00:13:35,060
architectures on your cpu IBM is

00:13:32,420 --> 00:13:39,740
compiling tensorflow for their big

00:13:35,060 --> 00:13:40,460
endian beginning cpus or on their power

00:13:39,740 --> 00:13:46,160
systems

00:13:40,460 --> 00:13:50,150
i can go on but this many knobs just

00:13:46,160 --> 00:13:53,150
makes your built commands kinda ugly

00:13:50,150 --> 00:13:55,340
we cannot just ask people to write that

00:13:53,150 --> 00:13:58,280
every time they want to test our built

00:13:55,340 --> 00:14:00,320
answer flow thankfully there are basal

00:13:58,280 --> 00:14:03,020
RCS so we just tried our configure

00:14:00,320 --> 00:14:06,260
script which asks a bunch of questions

00:14:03,020 --> 00:14:08,810
to users and then once the basil RC is

00:14:06,260 --> 00:14:16,940
written out user just needs to run basil

00:14:08,810 --> 00:14:23,560
build transfer flow so that command is

00:14:16,940 --> 00:14:23,560
bad but it could have been worse because

00:14:24,610 --> 00:14:30,320
because of all the things tensorflow

00:14:27,020 --> 00:14:35,090
supports for example we didn't include a

00:14:30,320 --> 00:14:36,890
lot of the c compiler options there GCC

00:14:35,090 --> 00:14:39,770
and clang share many compiler options

00:14:36,890 --> 00:14:42,980
but Visual Studio does not and guess

00:14:39,770 --> 00:14:46,010
what people use visual C to build tensor

00:14:42,980 --> 00:14:50,120
flow sometimes we don't really need to

00:14:46,010 --> 00:14:52,580
ask user questions about what to use but

00:14:50,120 --> 00:14:55,370
what to do when writing our basil our C

00:14:52,580 --> 00:14:59,870
or compiler options for example can be

00:14:55,370 --> 00:15:02,740
just decided on Oh are we on a Windows

00:14:59,870 --> 00:15:06,830
system so that's just at these options

00:15:02,740 --> 00:15:09,290
so we can use select statements to just

00:15:06,830 --> 00:15:12,830
decide on these in our skylark trials

00:15:09,290 --> 00:15:16,430
and let the user not worry about

00:15:12,830 --> 00:15:18,170
anything so this is an abusive select

00:15:16,430 --> 00:15:20,330
statements we are sorry about that

00:15:18,170 --> 00:15:23,510
we started with just a select part of

00:15:20,330 --> 00:15:26,870
this but the other part just evolved but

00:15:23,510 --> 00:15:29,690
this is just an example of how many

00:15:26,870 --> 00:15:33,100
different ways you can just add

00:15:29,690 --> 00:15:33,100
different flags to your build

00:15:36,120 --> 00:15:42,759
then there is an interesting problem of

00:15:38,620 --> 00:15:45,670
dynamic linking if you just the best

00:15:42,759 --> 00:15:49,360
case using basil is really you have a

00:15:45,670 --> 00:15:52,779
statically linked C++ program it just

00:15:49,360 --> 00:15:55,690
works but what if we want to use dynamic

00:15:52,779 --> 00:15:58,209
linking since tensorflow is becoming

00:15:55,690 --> 00:16:02,230
larger and larger we have a lot of

00:15:58,209 --> 00:16:03,730
dependencies and for a lot of these it

00:16:02,230 --> 00:16:06,310
would have been just better if we could

00:16:03,730 --> 00:16:10,389
just dynamically link these but have to

00:16:06,310 --> 00:16:11,380
build them into our binaries turns out

00:16:10,389 --> 00:16:16,949
it's not that easy

00:16:11,380 --> 00:16:21,190
it's possible but it's unintuitive

00:16:16,949 --> 00:16:24,540
so for building the Esso files or dll

00:16:21,190 --> 00:16:28,690
files we need to use a cc library rule

00:16:24,540 --> 00:16:32,589
market link shared and on Mac OS we need

00:16:28,690 --> 00:16:34,420
some more work because stars suck there

00:16:32,589 --> 00:16:38,649
are some bugs around this which I

00:16:34,420 --> 00:16:43,360
believe was fixed at 0.7 release Marcel

00:16:38,649 --> 00:16:45,610
might know better but this is just a

00:16:43,360 --> 00:16:50,110
rule we use to build our dynamic

00:16:45,610 --> 00:16:52,149
dependencies this is not just the name

00:16:50,110 --> 00:16:54,220
being CC binary is not the only reason

00:16:52,149 --> 00:16:57,639
we are using our own rules to build our

00:16:54,220 --> 00:17:02,069
dynamic libraries basil does not allow

00:16:57,639 --> 00:17:06,030
us to include dependencies transitively

00:17:02,069 --> 00:17:11,709
when we are using dynamically linked

00:17:06,030 --> 00:17:15,819
libraries so our workarounds on this has

00:17:11,709 --> 00:17:19,299
been implemented recently by ellen from

00:17:15,819 --> 00:17:21,790
our team but let me just explain what's

00:17:19,299 --> 00:17:24,640
happening here a little so if you have a

00:17:21,790 --> 00:17:27,429
static CC binary and you depend on

00:17:24,640 --> 00:17:31,260
multiple foo and bar libraries and then

00:17:27,429 --> 00:17:33,280
those in turn depend on another library

00:17:31,260 --> 00:17:35,260
basil can't figure out all these

00:17:33,280 --> 00:17:37,450
dependencies build everything once link

00:17:35,260 --> 00:17:39,640
everything once and once you build CC

00:17:37,450 --> 00:17:43,320
binary everything is built and linked

00:17:39,640 --> 00:17:45,820
and it's great in case of dynamic

00:17:43,320 --> 00:17:47,710
dependencies when you try to

00:17:45,820 --> 00:17:49,540
your binary which depends on food at

00:17:47,710 --> 00:17:52,770
Esso which is a dynamically linked

00:17:49,540 --> 00:17:55,750
library then internet depends on another

00:17:52,770 --> 00:17:59,640
library bar that is so when you try to

00:17:55,750 --> 00:18:05,920
build binary bar that ISO is not built

00:17:59,640 --> 00:18:08,740
I'll skip the details for now it for why

00:18:05,920 --> 00:18:11,530
this is not being built but as a

00:18:08,740 --> 00:18:13,900
workaround to this we just include all

00:18:11,530 --> 00:18:17,130
of our dynamic dependencies using our

00:18:13,900 --> 00:18:20,110
rule our specific shared library rules

00:18:17,130 --> 00:18:23,980
in all of our binaries so that's the

00:18:20,110 --> 00:18:27,040
workaround we were able to find for this

00:18:23,980 --> 00:18:30,570
but basil team as far as I know is

00:18:27,040 --> 00:18:34,390
working to resolve this issue so

00:18:30,570 --> 00:18:36,340
dynamically shared dynamic shared

00:18:34,390 --> 00:18:40,440
dependent shared libraries just work as

00:18:36,340 --> 00:18:40,440
well as statically linked libraries

00:18:40,530 --> 00:18:46,540
another thing when open sourcing tensor

00:18:43,360 --> 00:18:48,850
for that came up is when you have a

00:18:46,540 --> 00:18:51,870
single repository people just depend on

00:18:48,850 --> 00:18:54,520
your code build their own thing and

00:18:51,870 --> 00:18:56,140
there it is we I don't need to worry

00:18:54,520 --> 00:18:59,950
about anything else I just need to worry

00:18:56,140 --> 00:19:03,730
about my libraries working however in

00:18:59,950 --> 00:19:10,180
open source land we have to build and

00:19:03,730 --> 00:19:12,910
deliver our binaries to users so for

00:19:10,180 --> 00:19:16,210
this we just created a bunch of scripts

00:19:12,910 --> 00:19:18,610
around what we have around our basil

00:19:16,210 --> 00:19:20,710
builds so first we need to run the basil

00:19:18,610 --> 00:19:25,270
built just to be able to sweet grab

00:19:20,710 --> 00:19:28,000
everything build our libraries build all

00:19:25,270 --> 00:19:33,400
the objects we need and then we need to

00:19:28,000 --> 00:19:36,430
run a batch script to adjust all the

00:19:33,400 --> 00:19:39,730
file structure in for example in this

00:19:36,430 --> 00:19:43,300
case we are building a Python package so

00:19:39,730 --> 00:19:44,790
in the end is you run a Python command

00:19:43,300 --> 00:19:46,900
to actually build this package but

00:19:44,790 --> 00:19:49,420
everything needs to be where Python

00:19:46,900 --> 00:19:54,100
expects them to be so we move things

00:19:49,420 --> 00:19:56,260
around based on different basil versions

00:19:54,100 --> 00:19:58,210
used there may be some different things

00:19:56,260 --> 00:19:59,690
they are becoming stable but it's

00:19:58,210 --> 00:20:01,340
possible like if you are

00:19:59,690 --> 00:20:02,960
using an old version of basil there are

00:20:01,340 --> 00:20:05,659
different things that can happen and we

00:20:02,960 --> 00:20:07,190
handle those in our script but this

00:20:05,659 --> 00:20:09,320
maybe we're able to find a workaround

00:20:07,190 --> 00:20:15,110
for pack our packaging issues

00:20:09,320 --> 00:20:16,789
bend me over the source so that's about

00:20:15,110 --> 00:20:20,899
all the detail I would like to talk

00:20:16,789 --> 00:20:23,720
about in my talk today I'd like to talk

00:20:20,899 --> 00:20:26,809
about a few open problems that can make

00:20:23,720 --> 00:20:33,590
the basil experience better in my in our

00:20:26,809 --> 00:20:36,710
opinion first adoption as I mentioned in

00:20:33,590 --> 00:20:39,919
my talk earlier we maintain a lot of

00:20:36,710 --> 00:20:42,110
build files we don't want to we really

00:20:39,919 --> 00:20:45,639
don't want to maintain and fix build

00:20:42,110 --> 00:20:50,960
files for trying more than 20 projects

00:20:45,639 --> 00:20:53,840
so it's more people use basil it will be

00:20:50,960 --> 00:20:58,100
easier and in time this is only going to

00:20:53,840 --> 00:21:00,740
get better but just as a warning this is

00:20:58,100 --> 00:21:03,320
something you might also face this is

00:21:00,740 --> 00:21:05,870
something you should be prepared even

00:21:03,320 --> 00:21:09,860
some Google products do not have basil

00:21:05,870 --> 00:21:13,870
build files open sourced it's sad to see

00:21:09,860 --> 00:21:13,870
but I think this is getting better

00:21:14,350 --> 00:21:21,559
dynamic linking it's just not everything

00:21:19,669 --> 00:21:24,289
works with dynamic linking with basil

00:21:21,559 --> 00:21:26,509
right now but it is getting better it is

00:21:24,289 --> 00:21:30,049
in the roadmap we are working with basil

00:21:26,509 --> 00:21:33,039
team to go over our use cases they are

00:21:30,049 --> 00:21:37,669
helping us get them to get them to work

00:21:33,039 --> 00:21:41,210
so this is also being worked on and

00:21:37,669 --> 00:21:43,669
finally distributed builds or right now

00:21:41,210 --> 00:21:47,690
we are using the Google solution for

00:21:43,669 --> 00:21:52,279
distributed build on Linux that Linux

00:21:47,690 --> 00:21:56,179
builds that use CPUs because GPU tool

00:21:52,279 --> 00:21:59,269
chains are difficult it is working great

00:21:56,179 --> 00:22:02,809
I have to say it's been refreshing to

00:21:59,269 --> 00:22:06,220
just going from 40 50 minute builds on

00:22:02,809 --> 00:22:08,779
your laptop to just send ship everything

00:22:06,220 --> 00:22:11,990
everything is built in 5-10 minutes and

00:22:08,779 --> 00:22:14,220
go back to work just after grabbing a

00:22:11,990 --> 00:22:18,000
bottle of water

00:22:14,220 --> 00:22:20,340
more is on the way but I have to say

00:22:18,000 --> 00:22:22,830
this is a dangerous thing

00:22:20,340 --> 00:22:25,260
once you're you get dependent on

00:22:22,830 --> 00:22:28,620
distributed builds your build becomes

00:22:25,260 --> 00:22:31,410
big and on a local machine on a machine

00:22:28,620 --> 00:22:34,830
on a laptop like this it becomes

00:22:31,410 --> 00:22:41,310
unbuildable it's dangerous but like god

00:22:34,830 --> 00:22:44,910
it's good so it led with that I'd like

00:22:41,310 --> 00:22:47,040
to wrap up my talk here I talked about a

00:22:44,910 --> 00:22:50,160
lot of problems but one thing I'd like

00:22:47,040 --> 00:22:53,400
to leave you all with today is at times

00:22:50,160 --> 00:22:56,210
using basil may be difficult but it's

00:22:53,400 --> 00:22:59,310
the examples I've shown you here I hope

00:22:56,210 --> 00:23:04,500
Express how powerful and flexible basil

00:22:59,310 --> 00:23:06,210
release and it in reality it really

00:23:04,500 --> 00:23:10,500
helped us quickly open-source tensorflow

00:23:06,210 --> 00:23:13,110
because however many problems there were

00:23:10,500 --> 00:23:14,820
we didn't have to write it whole new

00:23:13,110 --> 00:23:18,120
build system from scratch and open

00:23:14,820 --> 00:23:21,600
sourcing it so I'd like to thank you

00:23:18,120 --> 00:23:23,790
very much for listening to me ramble on

00:23:21,600 --> 00:23:25,970
all about all the problems we had with

00:23:23,790 --> 00:23:28,980
basil and tensorflow

00:23:25,970 --> 00:23:31,610
and I'd be happy to answer any questions

00:23:28,980 --> 00:23:31,610
you might have

00:23:32,130 --> 00:23:39,989

YouTube URL: https://www.youtube.com/watch?v=Rw-KrbfyABQ


