Title: Migrating Twitter's monorepo from Pants to Bazel
Publication date: 2020-11-10
Playlist: BazelCon 2020
Description: 
	"Source", Twitter's monorepo, spans almost 20 million lines of hand-crafted code and ten times as much of generated code. Most of it is Scala, but we also support Java, Python, and to a lesser extent NodeJS, Go and C/C++. Up until now, we have been using the Pants build tool to build, test and deploy services in Source. However, we are now moving to Bazel to fulfill those tasks. We explore how we approach this migration, where we are now, and how we're tackling some of the unique challenges that migrating from Pants entails.

Speaker: Borja Lorente

Watch more:
BazelCon 2020 playlist → http://goo.gle/BazelCon2020

Subscribe to Google Open Source → http://goo.gle/GOpenSource

#bazelcon #bazel event: Bazelcon 2020; re_ty: Publish; product: Open Source - General; fullname: Borja Lorente;
Captions: 
	00:00:01,040 --> 00:00:06,960
[Music]

00:00:06,080 --> 00:00:09,360
hello everyone

00:00:06,960 --> 00:00:11,599
thank you for coming my name is brooke

00:00:09,360 --> 00:00:13,440
and i'm a build engineer twitter

00:00:11,599 --> 00:00:14,799
we don't have a lot of time so i'll just

00:00:13,440 --> 00:00:16,960
dive right in

00:00:14,799 --> 00:00:18,000
i twitter most of our code lives in a

00:00:16,960 --> 00:00:20,320
big monorepo

00:00:18,000 --> 00:00:22,240
and many years ago we decided to unify

00:00:20,320 --> 00:00:23,279
the code for all of our services and

00:00:22,240 --> 00:00:25,760
infrastructure

00:00:23,279 --> 00:00:26,560
to a single repo called source we

00:00:25,760 --> 00:00:29,840
haven't looked back

00:00:26,560 --> 00:00:31,920
more than a few times since up until now

00:00:29,840 --> 00:00:34,079
we've been using a fairly in-house tool

00:00:31,920 --> 00:00:35,440
called pants to build and test all of

00:00:34,079 --> 00:00:37,760
that code

00:00:35,440 --> 00:00:40,000
however as of earlier this year we are

00:00:37,760 --> 00:00:41,840
migrating to bazel as our tool of choice

00:00:40,000 --> 00:00:43,440
for that task

00:00:41,840 --> 00:00:44,879
we believe that this particular

00:00:43,440 --> 00:00:46,480
migration implies

00:00:44,879 --> 00:00:48,239
interesting challenges that the

00:00:46,480 --> 00:00:50,320
community could learn from

00:00:48,239 --> 00:00:54,000
and i hope by the end of this

00:00:50,320 --> 00:00:55,199
presentation you'll think that as well

00:00:54,000 --> 00:00:57,600
there are two main reasons for this

00:00:55,199 --> 00:00:59,840
migration first and foremost

00:00:57,600 --> 00:01:00,640
there's the user experience bazel

00:00:59,840 --> 00:01:02,719
promises

00:01:00,640 --> 00:01:04,159
speed and reliability and our

00:01:02,719 --> 00:01:07,200
experiments and personal

00:01:04,159 --> 00:01:07,760
experience confirm that by migrating to

00:01:07,200 --> 00:01:10,320
bazel

00:01:07,760 --> 00:01:12,080
our users will be able to tap into all

00:01:10,320 --> 00:01:13,840
of that effort that the basal team and

00:01:12,080 --> 00:01:15,840
rule writing community have put into

00:01:13,840 --> 00:01:17,840
making it rock solid

00:01:15,840 --> 00:01:20,640
that leads me to the second reason that

00:01:17,840 --> 00:01:22,880
we want to migrate which is a community

00:01:20,640 --> 00:01:24,479
our users face problems that are common

00:01:22,880 --> 00:01:26,960
to a lot of organizations

00:01:24,479 --> 00:01:27,520
in the base of the ecosystem and by

00:01:26,960 --> 00:01:30,000
becoming

00:01:27,520 --> 00:01:32,079
active members of the community we will

00:01:30,000 --> 00:01:33,920
enable our users to take advantage of

00:01:32,079 --> 00:01:36,400
that infrastructure and effort

00:01:33,920 --> 00:01:38,560
as well as help the community push

00:01:36,400 --> 00:01:39,040
forward on problems that matter to all

00:01:38,560 --> 00:01:42,399
of us

00:01:39,040 --> 00:01:45,360
like remote execution so

00:01:42,399 --> 00:01:46,880
as we started our migration what do we

00:01:45,360 --> 00:01:49,600
have to work with

00:01:46,880 --> 00:01:51,200
well source twitter's monorepo has grown

00:01:49,600 --> 00:01:52,640
pretty big over the years

00:01:51,200 --> 00:01:54,640
and it's not showing any signs of

00:01:52,640 --> 00:01:57,759
slowing down it has

00:01:54,640 --> 00:02:00,000
20 million lines of handwritten code

00:01:57,759 --> 00:02:00,799
and roughly 10 times that in generated

00:02:00,000 --> 00:02:02,719
code

00:02:00,799 --> 00:02:05,360
so it's definitely not something you

00:02:02,719 --> 00:02:07,119
want to compile on your laptop

00:02:05,360 --> 00:02:09,599
most of that code are back in

00:02:07,119 --> 00:02:11,599
microservices written in scala

00:02:09,599 --> 00:02:13,120
but we also have a firmament of python

00:02:11,599 --> 00:02:16,560
and java with some

00:02:13,120 --> 00:02:18,560
c c plus plus go and node.js sprinkled

00:02:16,560 --> 00:02:20,640
in for garnish

00:02:18,560 --> 00:02:22,080
almost two thousand engineers work in

00:02:20,640 --> 00:02:24,640
source daily that's

00:02:22,080 --> 00:02:26,239
spread across back end the front end and

00:02:24,640 --> 00:02:28,000
some machine learning

00:02:26,239 --> 00:02:29,440
and those are our customers and the

00:02:28,000 --> 00:02:32,959
people who want

00:02:29,440 --> 00:02:35,200
who we want to make their lives easier

00:02:32,959 --> 00:02:36,640
up until now we've used pants to build

00:02:35,200 --> 00:02:39,040
and test

00:02:36,640 --> 00:02:40,560
coding source pants is very similar to

00:02:39,040 --> 00:02:42,400
basil in many regards

00:02:40,560 --> 00:02:44,080
including using build files to define

00:02:42,400 --> 00:02:46,319
your build configuration

00:02:44,080 --> 00:02:48,400
it's a tool built for big multi-language

00:02:46,319 --> 00:02:50,160
mono repos

00:02:48,400 --> 00:02:52,400
and it has currently about 20 active

00:02:50,160 --> 00:02:53,840
contributors

00:02:52,400 --> 00:02:56,239
let's see a brief introduction to the

00:02:53,840 --> 00:02:58,159
pants model and just to see how similar

00:02:56,239 --> 00:03:00,000
it is to bazel

00:02:58,159 --> 00:03:01,440
here we have the same target declared in

00:03:00,000 --> 00:03:03,840
pants and bazel

00:03:01,440 --> 00:03:05,840
the syntax looks very similar with the

00:03:03,840 --> 00:03:08,000
exception of some load statements

00:03:05,840 --> 00:03:10,800
and the name of some attributes like

00:03:08,000 --> 00:03:12,720
sources and depths

00:03:10,800 --> 00:03:14,480
that seems pretty easy to migrate from

00:03:12,720 --> 00:03:16,879
one to the other right

00:03:14,480 --> 00:03:18,080
however hidden in there there are

00:03:16,879 --> 00:03:20,159
substantial differences

00:03:18,080 --> 00:03:21,360
between how pants and basal see the

00:03:20,159 --> 00:03:23,840
world

00:03:21,360 --> 00:03:24,720
for instance in panz a target will

00:03:23,840 --> 00:03:26,560
implicitly

00:03:24,720 --> 00:03:28,319
have all of its transitive dependencies

00:03:26,560 --> 00:03:31,120
when being compiled

00:03:28,319 --> 00:03:32,959
this means in the jvm world that it will

00:03:31,120 --> 00:03:34,799
have in its compiled class path

00:03:32,959 --> 00:03:36,159
the charts for all of its strategic

00:03:34,799 --> 00:03:38,319
dependencies

00:03:36,159 --> 00:03:39,840
based on contrast will not make those

00:03:38,319 --> 00:03:43,040
dependencies available

00:03:39,840 --> 00:03:45,280
unless they are explicitly exported

00:03:43,040 --> 00:03:46,080
even though we actively encourage users

00:03:45,280 --> 00:03:48,159
to

00:03:46,080 --> 00:03:50,640
explicitly export their dependencies

00:03:48,159 --> 00:03:53,280
without them for enforcement

00:03:50,640 --> 00:03:55,040
for third party dependencies hans

00:03:53,280 --> 00:03:56,400
decides the exact versions of each

00:03:55,040 --> 00:03:58,560
dependency depending

00:03:56,400 --> 00:04:01,280
on the target being built in the command

00:03:58,560 --> 00:04:03,360
line in jvm parlance this means that it

00:04:01,280 --> 00:04:05,120
will resolve the transitive closure of

00:04:03,360 --> 00:04:05,840
the targets being built in the command

00:04:05,120 --> 00:04:07,920
line

00:04:05,840 --> 00:04:09,840
whereas bazel really wants to do a

00:04:07,920 --> 00:04:12,400
transitive

00:04:09,840 --> 00:04:14,159
closure resolve of the whole repo before

00:04:12,400 --> 00:04:16,000
even running

00:04:14,159 --> 00:04:18,799
this leads to very interesting design

00:04:16,000 --> 00:04:20,880
tradeoffs that we'll explore later

00:04:18,799 --> 00:04:22,240
finally the last example is that pants

00:04:20,880 --> 00:04:24,479
build files are just

00:04:22,240 --> 00:04:26,720
python which means that they have

00:04:24,479 --> 00:04:28,240
unfettered access to the file system

00:04:26,720 --> 00:04:30,000
the python standard library and the

00:04:28,240 --> 00:04:32,560
network and even though

00:04:30,000 --> 00:04:34,639
using this is actively discouraged we

00:04:32,560 --> 00:04:36,479
find that users tend to use features

00:04:34,639 --> 00:04:37,120
that we allow them to use whether we

00:04:36,479 --> 00:04:40,160
intend

00:04:37,120 --> 00:04:40,160
to put them there or not

00:04:40,320 --> 00:04:43,759
it also allows users to declare

00:04:41,919 --> 00:04:45,199
functions inside build files

00:04:43,759 --> 00:04:46,960
which is another point of friction with

00:04:45,199 --> 00:04:48,320
bazel

00:04:46,960 --> 00:04:49,840
these are just some of the model

00:04:48,320 --> 00:04:51,199
differences that we need to solve for

00:04:49,840 --> 00:04:53,120
this migration

00:04:51,199 --> 00:04:54,720
we will see how we have designed the

00:04:53,120 --> 00:04:56,800
process itself

00:04:54,720 --> 00:05:01,040
to breach these differences in a way

00:04:56,800 --> 00:05:01,040
that serves our users the best we can

00:05:01,600 --> 00:05:06,320
from the very beginning we have aimed to

00:05:03,840 --> 00:05:08,479
minimize friction for users

00:05:06,320 --> 00:05:09,600
even at the expense of extra complexity

00:05:08,479 --> 00:05:11,919
for our team

00:05:09,600 --> 00:05:13,600
or extra time for the migration this

00:05:11,919 --> 00:05:16,240
means the migration will be long

00:05:13,600 --> 00:05:17,280
but hopefully our users shouldn't suffer

00:05:16,240 --> 00:05:20,800
from it

00:05:17,280 --> 00:05:22,639
at all for a repo the site of

00:05:20,800 --> 00:05:25,280
the size of source this immediately

00:05:22,639 --> 00:05:26,560
discards any big bang style approaches

00:05:25,280 --> 00:05:28,000
where we suddenly change

00:05:26,560 --> 00:05:29,600
all the build files to be basal

00:05:28,000 --> 00:05:31,120
compatible

00:05:29,600 --> 00:05:33,759
even if we were able to pull off the

00:05:31,120 --> 00:05:35,600
rewrite of such massive amount of bill

00:05:33,759 --> 00:05:38,880
files on the first try

00:05:35,600 --> 00:05:40,639
the burden of 2 000 users

00:05:38,880 --> 00:05:43,039
asking questions about bazel and

00:05:40,639 --> 00:05:45,520
learning to use it at the same time

00:05:43,039 --> 00:05:47,199
would definitely collapse our ability to

00:05:45,520 --> 00:05:49,120
give them the support they need

00:05:47,199 --> 00:05:51,360
and it would lead to a supper experience

00:05:49,120 --> 00:05:54,400
both for them and for us

00:05:51,360 --> 00:05:55,360
which is not desirable so after some

00:05:54,400 --> 00:05:57,280
consideration

00:05:55,360 --> 00:06:00,080
we decided to adopt a more gradual

00:05:57,280 --> 00:06:00,720
approach that allows us to progressively

00:06:00,080 --> 00:06:03,280
increase

00:06:00,720 --> 00:06:05,440
compatibility with bazel in the repo

00:06:03,280 --> 00:06:07,680
whilst maintaining punch compatibility

00:06:05,440 --> 00:06:10,240
so that a user will always have pants to

00:06:07,680 --> 00:06:13,600
fall back on

00:06:10,240 --> 00:06:15,919
how do we do that well we use some

00:06:13,600 --> 00:06:17,680
something called the translation layer

00:06:15,919 --> 00:06:18,160
the main idea behind the translation

00:06:17,680 --> 00:06:21,600
layer

00:06:18,160 --> 00:06:23,759
is that for each pants target type

00:06:21,600 --> 00:06:24,639
we create a basal macro with the same

00:06:23,759 --> 00:06:26,880
name

00:06:24,639 --> 00:06:29,199
that translates the attributes to have

00:06:26,880 --> 00:06:30,880
the namespace and expects

00:06:29,199 --> 00:06:33,199
here for instance we translate the

00:06:30,880 --> 00:06:36,240
sources attribute to srcs

00:06:33,199 --> 00:06:39,440
and translate the pants scala library

00:06:36,240 --> 00:06:42,160
into a scalar library from rule scala

00:06:39,440 --> 00:06:43,600
the rule scholar which is

00:06:42,160 --> 00:06:46,639
imported from outside

00:06:43,600 --> 00:06:48,319
in the workspace we then

00:06:46,639 --> 00:06:49,759
take those macros and load them in

00:06:48,319 --> 00:06:52,160
prelude bazel

00:06:49,759 --> 00:06:53,199
that will make them available to bazel

00:06:52,160 --> 00:06:55,440
at first time

00:06:53,199 --> 00:06:56,720
so that bazel is able to understand any

00:06:55,440 --> 00:06:59,520
pants build file

00:06:56,720 --> 00:07:00,560
without having to modify the build file

00:06:59,520 --> 00:07:02,400
taking a step back

00:07:00,560 --> 00:07:04,000
here is the flow a user will follow when

00:07:02,400 --> 00:07:05,599
running basal in source and during the

00:07:04,000 --> 00:07:07,919
migration

00:07:05,599 --> 00:07:09,759
a user will tell bazel to build a target

00:07:07,919 --> 00:07:11,039
upon target that they're comfortable and

00:07:09,759 --> 00:07:12,880
used to

00:07:11,039 --> 00:07:15,199
bazel will import the translation layer

00:07:12,880 --> 00:07:17,120
at load time it will translate the pan

00:07:15,199 --> 00:07:18,560
target into base rules using a

00:07:17,120 --> 00:07:21,520
combination of native

00:07:18,560 --> 00:07:22,400
native rules external rule sets and our

00:07:21,520 --> 00:07:26,080
sum of our own

00:07:22,400 --> 00:07:27,840
internal rules it will return

00:07:26,080 --> 00:07:29,680
the build graph in terms of

00:07:27,840 --> 00:07:31,680
understandable basal targets

00:07:29,680 --> 00:07:33,919
and it will run it just as if we're as

00:07:31,680 --> 00:07:36,639
if it were any other basal run

00:07:33,919 --> 00:07:38,319
this way we can keep source compatible

00:07:36,639 --> 00:07:39,520
with both pants and basil at the same

00:07:38,319 --> 00:07:42,400
time

00:07:39,520 --> 00:07:44,000
and when we achieve that we introduced

00:07:42,400 --> 00:07:45,919
we can introduce teams to bazel

00:07:44,000 --> 00:07:47,680
on a p small basis as we get the

00:07:45,919 --> 00:07:48,479
capacity to give them the support they

00:07:47,680 --> 00:07:49,680
need

00:07:48,479 --> 00:07:52,000
that way we can ensure a great

00:07:49,680 --> 00:07:54,720
experience for them when

00:07:52,000 --> 00:07:55,759
every team is migrated to using bazel in

00:07:54,720 --> 00:07:57,280
their day to day

00:07:55,759 --> 00:07:58,960
and they don't need to fall back on

00:07:57,280 --> 00:08:01,120
pants anymore

00:07:58,960 --> 00:08:02,720
we can make progressive passes to remove

00:08:01,120 --> 00:08:05,360
the translation layer

00:08:02,720 --> 00:08:05,840
until eventually we are left with a pure

00:08:05,360 --> 00:08:09,520
basic

00:08:05,840 --> 00:08:12,000
experience that sounds great right

00:08:09,520 --> 00:08:13,039
well it works really well for simple

00:08:12,000 --> 00:08:15,759
transformations

00:08:13,039 --> 00:08:16,800
as we've seen however where things get

00:08:15,759 --> 00:08:19,919
complicated

00:08:16,800 --> 00:08:21,039
is here in the ellipses the translation

00:08:19,919 --> 00:08:23,120
layer is not

00:08:21,039 --> 00:08:24,800
just a syntactic layer it needs to

00:08:23,120 --> 00:08:26,720
bridge the fundamental models between

00:08:24,800 --> 00:08:29,280
the two tools

00:08:26,720 --> 00:08:30,879
here in the ellipsis is where we find

00:08:29,280 --> 00:08:32,640
solutions to all those footnotes

00:08:30,879 --> 00:08:34,000
and it's here where most of the

00:08:32,640 --> 00:08:36,320
complexity of the layer

00:08:34,000 --> 00:08:38,880
lives here is also where we'll learn

00:08:36,320 --> 00:08:40,560
most of our lessons

00:08:38,880 --> 00:08:42,479
we will see one example of such

00:08:40,560 --> 00:08:44,320
complexity later

00:08:42,479 --> 00:08:46,720
but for now this is the state of the

00:08:44,320 --> 00:08:49,040
migration we are compatible with

00:08:46,720 --> 00:08:51,040
many many targets in source we are

00:08:49,040 --> 00:08:52,880
rapidly expanding to cover the remaining

00:08:51,040 --> 00:08:55,760
workflows and targets

00:08:52,880 --> 00:08:56,959
and we have just completed successfully

00:08:55,760 --> 00:08:59,760
our fest pilot

00:08:56,959 --> 00:09:01,360
resulting in some users using bazel in

00:08:59,760 --> 00:09:02,959
their day-to-day lives and being very

00:09:01,360 --> 00:09:06,320
happy with it

00:09:02,959 --> 00:09:07,440
so where do we go from here regarding

00:09:06,320 --> 00:09:09,760
the bazel community

00:09:07,440 --> 00:09:11,519
we are currently consuming a lot more

00:09:09,760 --> 00:09:13,440
than we are contributing back

00:09:11,519 --> 00:09:14,800
our interactions are mostly finding a

00:09:13,440 --> 00:09:17,279
rule set that

00:09:14,800 --> 00:09:19,440
does what we needed to do the that

00:09:17,279 --> 00:09:21,600
replicates the fans functionality

00:09:19,440 --> 00:09:22,560
and then using that to build the

00:09:21,600 --> 00:09:25,680
translational

00:09:22,560 --> 00:09:27,519
layer around it however we hope that the

00:09:25,680 --> 00:09:28,560
lessons learned in this migration will

00:09:27,519 --> 00:09:30,240
help

00:09:28,560 --> 00:09:32,800
contribute back to the community as a

00:09:30,240 --> 00:09:35,040
whole and that we can contribute to

00:09:32,800 --> 00:09:36,959
ongoing wide reaching efforts such as

00:09:35,040 --> 00:09:40,240
remote execution and outlining

00:09:36,959 --> 00:09:41,279
when we are done with migration however

00:09:40,240 --> 00:09:43,200
even during it

00:09:41,279 --> 00:09:44,720
sometimes we need to slightly adjust

00:09:43,200 --> 00:09:45,760
some external rules that to fit our

00:09:44,720 --> 00:09:47,360
needs

00:09:45,760 --> 00:09:49,440
and this times we are adopting a

00:09:47,360 --> 00:09:50,399
strategy to upstream these changes by

00:09:49,440 --> 00:09:52,240
default

00:09:50,399 --> 00:09:54,000
this means collaborating with the basal

00:09:52,240 --> 00:09:54,880
ecosystem to find a solution that fits

00:09:54,000 --> 00:09:56,480
everyone

00:09:54,880 --> 00:09:58,720
and investing people's time and

00:09:56,480 --> 00:10:00,720
resources to make it happen

00:09:58,720 --> 00:10:02,640
we've already contributed a few changes

00:10:00,720 --> 00:10:03,360
but we hope to grow this relationship in

00:10:02,640 --> 00:10:05,360
the future

00:10:03,360 --> 00:10:09,120
as the migration finishes and we get

00:10:05,360 --> 00:10:09,120
more bandwidth to work on these problems

00:10:09,279 --> 00:10:13,839
regarding the rest of the migration our

00:10:11,440 --> 00:10:15,760
plan is to keep working out the model

00:10:13,839 --> 00:10:18,160
differences between pants and bazel

00:10:15,760 --> 00:10:20,640
expanding the translation layer until we

00:10:18,160 --> 00:10:22,480
can start migrating teams to baseball to

00:10:20,640 --> 00:10:24,160
use bazel every day

00:10:22,480 --> 00:10:25,760
they will always have plans to pull back

00:10:24,160 --> 00:10:28,640
on

00:10:25,760 --> 00:10:30,880
for the end of this talk i want to go

00:10:28,640 --> 00:10:33,279
through one such model difference

00:10:30,880 --> 00:10:35,839
and finally give you a taste of the sort

00:10:33,279 --> 00:10:38,079
of problems we're solving

00:10:35,839 --> 00:10:40,560
so let's talk about how we approach

00:10:38,079 --> 00:10:42,240
those design decisions

00:10:40,560 --> 00:10:43,920
whenever we're faced with model

00:10:42,240 --> 00:10:45,440
difference between the two tools

00:10:43,920 --> 00:10:48,480
we introduce some design tensions

00:10:45,440 --> 00:10:50,320
inevitably we can try to replicate the

00:10:48,480 --> 00:10:52,399
pants mode with bazel

00:10:50,320 --> 00:10:54,720
or we can plant the flag on the ground

00:10:52,399 --> 00:10:56,640
and move users to the basal way

00:10:54,720 --> 00:10:58,000
and every decision has its trade-offs

00:10:56,640 --> 00:11:00,399
and we need to consider them on a

00:10:58,000 --> 00:11:02,000
case-by-case basis

00:11:00,399 --> 00:11:03,920
replicating the pantsway is very

00:11:02,000 --> 00:11:07,120
comfortable for users

00:11:03,920 --> 00:11:09,360
it means that they can treat basil

00:11:07,120 --> 00:11:10,560
roughly as a faster and more reliable

00:11:09,360 --> 00:11:12,640
pants

00:11:10,560 --> 00:11:13,760
but it places a heavier burden on the

00:11:12,640 --> 00:11:16,480
translation layer

00:11:13,760 --> 00:11:18,320
and on our team which is something we're

00:11:16,480 --> 00:11:20,480
usually okay with but we need to take

00:11:18,320 --> 00:11:22,480
consider all the options

00:11:20,480 --> 00:11:23,680
moving users to the basal way however

00:11:22,480 --> 00:11:24,480
brings with it all of business

00:11:23,680 --> 00:11:27,120
guarantees

00:11:24,480 --> 00:11:27,760
and keeps the translation layer thin but

00:11:27,120 --> 00:11:30,480
it means

00:11:27,760 --> 00:11:32,240
the users have a higher barrier to entry

00:11:30,480 --> 00:11:34,000
and they have to learn new concepts in

00:11:32,240 --> 00:11:35,680
order to use a tool

00:11:34,000 --> 00:11:37,760
we need to evaluate each of these cases

00:11:35,680 --> 00:11:39,920
separately consider the trade-offs and

00:11:37,760 --> 00:11:40,959
decide where in the spectrum we want to

00:11:39,920 --> 00:11:42,640
land

00:11:40,959 --> 00:11:45,120
our first pilot users have been

00:11:42,640 --> 00:11:48,079
invaluable in helping us navigate them

00:11:45,120 --> 00:11:49,839
these decisions because ultimately we

00:11:48,079 --> 00:11:51,200
want to make the best decisions for our

00:11:49,839 --> 00:11:54,639
users so asking them

00:11:51,200 --> 00:11:58,000
is a very good idea so let's take a look

00:11:54,639 --> 00:12:00,079
at one such problem in source

00:11:58,000 --> 00:12:02,800
some of our third-party jvm dependencies

00:12:00,079 --> 00:12:04,480
bring with them transitive dependencies

00:12:02,800 --> 00:12:06,079
some of those transitive dependencies

00:12:04,480 --> 00:12:07,440
overlap and sometimes they are

00:12:06,079 --> 00:12:09,120
incompatible

00:12:07,440 --> 00:12:10,959
at some point we need to figure out

00:12:09,120 --> 00:12:12,800
which exact versions of transitive

00:12:10,959 --> 00:12:15,040
dependencies we need to include

00:12:12,800 --> 00:12:18,639
in our compilation this which is also

00:12:15,040 --> 00:12:20,639
called resolving the dependencies

00:12:18,639 --> 00:12:22,399
in puns the exact versions of

00:12:20,639 --> 00:12:24,320
dependencies will depend

00:12:22,399 --> 00:12:25,839
on the set of targets you're building in

00:12:24,320 --> 00:12:27,760
a single command line

00:12:25,839 --> 00:12:29,040
this means that you can technically have

00:12:27,760 --> 00:12:30,800
different versions

00:12:29,040 --> 00:12:32,079
of the same dependency even if they

00:12:30,800 --> 00:12:34,880
complete conflict

00:12:32,079 --> 00:12:38,160
living in your repository however you

00:12:34,880 --> 00:12:40,800
can never build them together

00:12:38,160 --> 00:12:42,000
however expects to know every version of

00:12:40,800 --> 00:12:44,720
every dependency

00:12:42,000 --> 00:12:45,760
before even executing for many reasons

00:12:44,720 --> 00:12:48,959
including hashing

00:12:45,760 --> 00:12:50,639
security and speed this means that it

00:12:48,959 --> 00:12:53,200
really wants only one version of every

00:12:50,639 --> 00:12:55,760
dependency in a repository

00:12:53,200 --> 00:12:56,399
they cannot coexist so looking at this

00:12:55,760 --> 00:12:59,440
example

00:12:56,399 --> 00:13:01,600
we see that both a and b transitively

00:12:59,440 --> 00:13:03,920
and invisibly depend on incompatible

00:13:01,600 --> 00:13:06,240
versions of transitive depth

00:13:03,920 --> 00:13:07,440
in puns this would be fine as long as

00:13:06,240 --> 00:13:09,279
you never try to build a

00:13:07,440 --> 00:13:11,279
and b together in the same command line

00:13:09,279 --> 00:13:14,240
which is often the case because

00:13:11,279 --> 00:13:16,800
often a and b are microservices that get

00:13:14,240 --> 00:13:18,560
built and deployed separately

00:13:16,800 --> 00:13:20,000
in bazel however this is a version

00:13:18,560 --> 00:13:21,680
conflict and it's one

00:13:20,000 --> 00:13:24,480
that we need to solve before even trying

00:13:21,680 --> 00:13:26,639
to build a and b

00:13:24,480 --> 00:13:27,760
in this example whatever solution we end

00:13:26,639 --> 00:13:30,000
up settling in

00:13:27,760 --> 00:13:32,480
it will implicitly affect a lot of other

00:13:30,000 --> 00:13:35,600
aspects of the development workflow

00:13:32,480 --> 00:13:38,320
it will pose questions like how hard it

00:13:35,600 --> 00:13:40,639
is for a team to upgrade a dependency

00:13:38,320 --> 00:13:42,240
or introduce a new dependency is it the

00:13:40,639 --> 00:13:44,959
responsibility to upgrade the

00:13:42,240 --> 00:13:46,720
upgrade the entire company how do they

00:13:44,959 --> 00:13:48,720
handle version conflicts how do they

00:13:46,720 --> 00:13:52,480
experience version conflicts

00:13:48,720 --> 00:13:55,120
where in the workflow does that fit

00:13:52,480 --> 00:13:56,480
as we explore this problem it became

00:13:55,120 --> 00:13:58,560
pretty clear

00:13:56,480 --> 00:14:00,240
that we needed to support multiple

00:13:58,560 --> 00:14:01,760
incompatible versions of different

00:14:00,240 --> 00:14:03,760
dependencies in source

00:14:01,760 --> 00:14:05,519
there was no way around that there were

00:14:03,760 --> 00:14:06,160
two ingrained in source and there was no

00:14:05,519 --> 00:14:08,399
way we could

00:14:06,160 --> 00:14:10,399
settle on just one version of everything

00:14:08,399 --> 00:14:12,639
so we landed

00:14:10,399 --> 00:14:13,680
pretty far into the plant spectrum

00:14:12,639 --> 00:14:15,760
therefore

00:14:13,680 --> 00:14:16,800
we are exploring different designs for

00:14:15,760 --> 00:14:19,519
allowing to

00:14:16,800 --> 00:14:20,160
that to exist in bazel with as little

00:14:19,519 --> 00:14:23,279
friction

00:14:20,160 --> 00:14:25,440
for the users as possible

00:14:23,279 --> 00:14:27,760
we haven't really settled in a final

00:14:25,440 --> 00:14:29,600
design yet but if anyone's interested

00:14:27,760 --> 00:14:32,160
i'm more than happy to talk about these

00:14:29,600 --> 00:14:34,880
experiments after the talk

00:14:32,160 --> 00:14:36,399
whatever the final form of these

00:14:34,880 --> 00:14:38,480
experiments is

00:14:36,399 --> 00:14:40,399
the things that we learn will benefit

00:14:38,480 --> 00:14:42,480
the entire community

00:14:40,399 --> 00:14:44,160
as far as we know this is a really tough

00:14:42,480 --> 00:14:45,760
problem that doesn't have a lot of prior

00:14:44,160 --> 00:14:47,839
art

00:14:45,760 --> 00:14:49,519
we hope that we'll exit this migration

00:14:47,839 --> 00:14:53,120
with many more interesting

00:14:49,519 --> 00:14:54,880
things like this one to contribute back

00:14:53,120 --> 00:14:57,199
that's it for the technical part of the

00:14:54,880 --> 00:14:58,720
talk again if you have any questions or

00:14:57,199 --> 00:15:00,720
thoughts i would love to hear them in

00:14:58,720 --> 00:15:02,560
the slack dream sidebars

00:15:00,720 --> 00:15:04,320
before finishing this talk i would like

00:15:02,560 --> 00:15:05,279
to acknowledge the effort of daniel

00:15:04,320 --> 00:15:07,440
wagner-hall

00:15:05,279 --> 00:15:09,360
eddie cole and stu hood for conducting

00:15:07,440 --> 00:15:12,399
the initial experiments and settling the

00:15:09,360 --> 00:15:14,320
foundation for this migration

00:15:12,399 --> 00:15:15,680
i would also like to thank you chain for

00:15:14,320 --> 00:15:17,600
his amazing contributions

00:15:15,680 --> 00:15:19,440
which culminated in that amazing first

00:15:17,600 --> 00:15:21,680
pilot with very happy users that i've

00:15:19,440 --> 00:15:23,440
talked about before

00:15:21,680 --> 00:15:25,440
lastly i would also like to mention

00:15:23,440 --> 00:15:27,920
everyone in engineering effectiveness

00:15:25,440 --> 00:15:29,680
that has contributed to this migration

00:15:27,920 --> 00:15:32,000
there are too many names to mention but

00:15:29,680 --> 00:15:33,360
they all deserve praise

00:15:32,000 --> 00:15:35,279
if any of these challenges sound

00:15:33,360 --> 00:15:36,720
interesting please let us know

00:15:35,279 --> 00:15:39,360
we are definitely looking for great

00:15:36,720 --> 00:15:53,440
people to join us in this effort

00:15:39,360 --> 00:15:53,440

YouTube URL: https://www.youtube.com/watch?v=0l9u-FIaGrQ


