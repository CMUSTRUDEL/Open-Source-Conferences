Title: Keynote - State of Bazel and Announcements
Publication date: 2020-11-10
Playlist: BazelCon 2020
Description: 
	Jeff Cox, Engineering Director of all of Google’s software Build (including Bazel), Test, and Release functions, opens up BazelCon 2020 with the “State of Bazel”, Announcements, high level Bazel roadmap, and more. This keynote discussion about Bazel’s strategic direction is one that can’t be missed.

Resources:
Software Engineering at Google: https://goo.gle/36quhQD
Bazel 4.0: https://goo.gle/3noAqUH
Long Term Support release: https://goo.gle/3eQ2c9h

Speaker: Jeff Cox

Watch more:
BazelCon 2020 playlist → http://goo.gle/BazelCon2020

Subscribe to Google Open Source → http://goo.gle/GOpenSource

#bazelcon #bazel event: Bazelcon 2020; re_ty: Publish; product: Open Source - General; fullname: Jeff Cox;
Captions: 
	00:00:01,040 --> 00:00:07,600
[Music]

00:00:05,759 --> 00:00:08,559
hi folks my name is jeff cox and i'm an

00:00:07,600 --> 00:00:10,240
engineering director

00:00:08,559 --> 00:00:12,000
at google in charge of the build test

00:00:10,240 --> 00:00:14,240
release organization and i'm here to

00:00:12,000 --> 00:00:16,240
talk to you about the state of bazel

00:00:14,240 --> 00:00:17,520
first i want to welcome you to bazelcon

00:00:16,240 --> 00:00:19,520
00:00:17,520 --> 00:00:20,560
uh acknowledging that we are definitely

00:00:19,520 --> 00:00:23,920
in a unique

00:00:20,560 --> 00:00:25,840
time in the world and uh

00:00:23,920 --> 00:00:27,199
we've obviously had to conduct a virtual

00:00:25,840 --> 00:00:28,880
conference

00:00:27,199 --> 00:00:31,279
uh as opposed to a physical conference

00:00:28,880 --> 00:00:32,640
this time i'm still really excited about

00:00:31,279 --> 00:00:33,680
the amount of material we have

00:00:32,640 --> 00:00:36,000
and the interactive sessions we're going

00:00:33,680 --> 00:00:37,600
to have and i'm really happy that you

00:00:36,000 --> 00:00:38,480
are all participating

00:00:37,600 --> 00:00:40,879
and i think it will be a great

00:00:38,480 --> 00:00:42,320
conference i want to remind you that

00:00:40,879 --> 00:00:44,079
like every single past

00:00:42,320 --> 00:00:45,680
bazel con conference we have a code of

00:00:44,079 --> 00:00:49,520
conduct that's published on our

00:00:45,680 --> 00:00:52,559
bazalcon website for social media posts

00:00:49,520 --> 00:00:54,559
please use the hashtag or the bazelcon

00:00:52,559 --> 00:00:56,800
hashtag on twitter

00:00:54,559 --> 00:00:59,760
and for attending networking please join

00:00:56,800 --> 00:01:02,160
join the hashtag bazelcon 2020 channel

00:00:59,760 --> 00:01:03,520
on the bazel slack site to chat with

00:01:02,160 --> 00:01:06,119
other attendees

00:01:03,520 --> 00:01:07,920
and use the hashtag bazelcon

00:01:06,119 --> 00:01:11,280
2020-announcements

00:01:07,920 --> 00:01:11,280
for official announcements

00:01:11,760 --> 00:01:15,520
so i want to start off this talk by

00:01:14,560 --> 00:01:19,200
giving you a bit

00:01:15,520 --> 00:01:21,280
of bazel history i've been a part of the

00:01:19,200 --> 00:01:23,200
bazel journey since its start i actually

00:01:21,280 --> 00:01:27,280
started managing the build tools team at

00:01:23,200 --> 00:01:28,960
google back in 2010 and it was in 2014

00:01:27,280 --> 00:01:30,479
that we as an organization decide that

00:01:28,960 --> 00:01:34,320
we were going to open source

00:01:30,479 --> 00:01:35,040
bazel and to really give context for

00:01:34,320 --> 00:01:38,320
bazel

00:01:35,040 --> 00:01:39,600
and its path it's important to go back

00:01:38,320 --> 00:01:41,360
and understand

00:01:39,600 --> 00:01:42,960
some of google's key development

00:01:41,360 --> 00:01:45,520
principles which have been around since

00:01:42,960 --> 00:01:46,880
the start of the business

00:01:45,520 --> 00:01:49,360
so these aren't all of them but there's

00:01:46,880 --> 00:01:49,640
some ones that are particularly relevant

00:01:49,360 --> 00:01:50,880
to

00:01:49,640 --> 00:01:53,040
[Music]

00:01:50,880 --> 00:01:54,000
building and testing software so first

00:01:53,040 --> 00:01:56,240
as many of you already

00:01:54,000 --> 00:01:58,880
know google uses what we call a mono

00:01:56,240 --> 00:02:00,960
repo or a single code repository for all

00:01:58,880 --> 00:02:04,320
of its code

00:02:00,960 --> 00:02:05,600
google practices building all of its

00:02:04,320 --> 00:02:08,640
applications from source

00:02:05,600 --> 00:02:10,800
so we never use checked in binaries or

00:02:08,640 --> 00:02:13,360
libraries

00:02:10,800 --> 00:02:14,879
for a variety of reasons mostly around

00:02:13,360 --> 00:02:16,879
compatibility

00:02:14,879 --> 00:02:18,319
we practice continuous integration so

00:02:16,879 --> 00:02:19,760
rather than having long-lived feature

00:02:18,319 --> 00:02:21,680
branches

00:02:19,760 --> 00:02:23,520
all developers are continuously vetting

00:02:21,680 --> 00:02:25,360
their code and checking it into head so

00:02:23,520 --> 00:02:28,560
we're all working at the same

00:02:25,360 --> 00:02:30,000
cut of the repository i think perhaps

00:02:28,560 --> 00:02:32,800
most significantly

00:02:30,000 --> 00:02:35,040
is that in this environment everybody

00:02:32,800 --> 00:02:38,319
should be able to edit build and test

00:02:35,040 --> 00:02:41,040
just about everything and the result

00:02:38,319 --> 00:02:42,400
in our view is improved productivity

00:02:41,040 --> 00:02:44,959
across the business

00:02:42,400 --> 00:02:46,959
so much so that we wrote a book about it

00:02:44,959 --> 00:02:48,400
the software engineering book which has

00:02:46,959 --> 00:02:50,239
chapters both on our continuous

00:02:48,400 --> 00:02:51,519
integration approach and on our build

00:02:50,239 --> 00:02:53,040
approach

00:02:51,519 --> 00:02:55,280
so those are just the principles but we

00:02:53,040 --> 00:02:58,000
need tooling to support those principles

00:02:55,280 --> 00:03:00,640
one key tool that google developed

00:02:58,000 --> 00:03:03,120
starting back in 2005 or 2006

00:03:00,640 --> 00:03:05,760
was an application called blaze which is

00:03:03,120 --> 00:03:08,080
a single build system for this entire

00:03:05,760 --> 00:03:09,680
massive code repository that is polyglot

00:03:08,080 --> 00:03:10,400
it can be used to build arbitrary

00:03:09,680 --> 00:03:15,360
languages

00:03:10,400 --> 00:03:19,840
python go java javascript typescript

00:03:15,360 --> 00:03:19,840
android apps ios apps

00:03:20,000 --> 00:03:23,840
it is designed to be correct so that

00:03:22,319 --> 00:03:26,400
when you give it the same inputs it

00:03:23,840 --> 00:03:28,720
generates the same outputs

00:03:26,400 --> 00:03:29,920
and these two characteristics make it

00:03:28,720 --> 00:03:31,440
it's very straightforward for a

00:03:29,920 --> 00:03:33,760
developer in the business to

00:03:31,440 --> 00:03:36,159
easily take a dependency on a shared

00:03:33,760 --> 00:03:38,239
library to make code sharing easy

00:03:36,159 --> 00:03:40,319
and it also means that as we're all

00:03:38,239 --> 00:03:41,360
building and testing common code and

00:03:40,319 --> 00:03:43,200
applications

00:03:41,360 --> 00:03:44,480
we get the same results with the same

00:03:43,200 --> 00:03:48,239
code and there's no

00:03:44,480 --> 00:03:51,200
it worked on my machine phenomenon

00:03:48,239 --> 00:03:53,040
with a huge repo all built from source

00:03:51,200 --> 00:03:54,640
with practicing ci

00:03:53,040 --> 00:03:56,879
builds get big and there are a lot of

00:03:54,640 --> 00:03:59,439
them so we want a system

00:03:56,879 --> 00:04:00,319
that can do these builds as quickly as

00:03:59,439 --> 00:04:01,840
possible

00:04:00,319 --> 00:04:04,000
and reuse the results as much as

00:04:01,840 --> 00:04:04,879
possible which is why blaze is built to

00:04:04,000 --> 00:04:09,920
be fast

00:04:04,879 --> 00:04:09,920
through both caching and parallelism

00:04:11,680 --> 00:04:17,040
so that's blaze and

00:04:14,720 --> 00:04:18,239
bazel is based on blaze so then the

00:04:17,040 --> 00:04:20,479
question is if we have this great

00:04:18,239 --> 00:04:23,440
internal tool that googlers are using

00:04:20,479 --> 00:04:25,759
why do we decide to create bazel and

00:04:23,440 --> 00:04:27,759
that question has multiple answers

00:04:25,759 --> 00:04:29,600
one of which is why do we pick the name

00:04:27,759 --> 00:04:31,280
and there's a whole backstory on the

00:04:29,600 --> 00:04:34,400
bazel name

00:04:31,280 --> 00:04:37,360
it took us months to come up with a name

00:04:34,400 --> 00:04:38,720
for blaze externally blaze itself was

00:04:37,360 --> 00:04:41,120
rejected pretty early

00:04:38,720 --> 00:04:43,280
for non-technical reasons believe around

00:04:41,120 --> 00:04:45,440
reuse and so the team went through

00:04:43,280 --> 00:04:46,320
a long and arduous exercise to

00:04:45,440 --> 00:04:48,160
brainstorm

00:04:46,320 --> 00:04:50,320
propose and have rejected countless

00:04:48,160 --> 00:04:52,240
suggestions for the name

00:04:50,320 --> 00:04:54,160
one engineer one engineer on the team

00:04:52,240 --> 00:04:55,440
became so frustrated with the process

00:04:54,160 --> 00:04:58,240
that he just suggested

00:04:55,440 --> 00:04:59,680
the name potato thinking that well at

00:04:58,240 --> 00:05:01,360
least it's a noun

00:04:59,680 --> 00:05:03,360
and probably wouldn't be taken by some

00:05:01,360 --> 00:05:04,880
other project

00:05:03,360 --> 00:05:06,720
fortunately we decided that having to

00:05:04,880 --> 00:05:08,240
type potato build

00:05:06,720 --> 00:05:10,560
every single time a developer wanted to

00:05:08,240 --> 00:05:12,800
run a build was not really a good option

00:05:10,560 --> 00:05:15,199
and we ended up on a name that was a

00:05:12,800 --> 00:05:16,560
rearrangement of the letters of blaze

00:05:15,199 --> 00:05:18,400
but the question i think has a more

00:05:16,560 --> 00:05:21,600
significant answer as well

00:05:18,400 --> 00:05:23,360
like why did google decide to share this

00:05:21,600 --> 00:05:25,039
proprietary implementation that it was

00:05:23,360 --> 00:05:28,000
using for itself

00:05:25,039 --> 00:05:30,479
for its own success and that question

00:05:28,000 --> 00:05:32,880
has a number of different answers

00:05:30,479 --> 00:05:35,280
one is that google is increasingly

00:05:32,880 --> 00:05:37,120
investing in open source software

00:05:35,280 --> 00:05:38,479
so we're not just developing all of our

00:05:37,120 --> 00:05:40,479
software in-house

00:05:38,479 --> 00:05:41,680
we also have major projects like

00:05:40,479 --> 00:05:45,039
tensorflow

00:05:41,680 --> 00:05:46,880
or envoy or grpc where

00:05:45,039 --> 00:05:49,520
the internal development stack we have

00:05:46,880 --> 00:05:52,000
including blaze aren't available

00:05:49,520 --> 00:05:53,120
and so externalizing blaze as bazel

00:05:52,000 --> 00:05:55,120
allows

00:05:53,120 --> 00:05:56,160
our build stack to be used by these open

00:05:55,120 --> 00:05:58,560
source projects

00:05:56,160 --> 00:05:59,919
and by third party contributors to those

00:05:58,560 --> 00:06:01,840
projects

00:05:59,919 --> 00:06:03,680
another important point is by

00:06:01,840 --> 00:06:05,440
externalizing blaze's bazel

00:06:03,680 --> 00:06:08,400
we're validating in the market so to

00:06:05,440 --> 00:06:10,240
speak the value of our tool

00:06:08,400 --> 00:06:12,479
inside of google where there is one

00:06:10,240 --> 00:06:13,759
build tool or one ci solution or one

00:06:12,479 --> 00:06:15,199
code review solution

00:06:13,759 --> 00:06:17,120
we can make these tools work great

00:06:15,199 --> 00:06:18,560
together and really advance them

00:06:17,120 --> 00:06:20,479
but developers inside don't really have

00:06:18,560 --> 00:06:22,960
a choice like they have to use these

00:06:20,479 --> 00:06:24,639
tools and so it's harder for us to know

00:06:22,960 --> 00:06:26,880
through developer choice how great they

00:06:24,639 --> 00:06:28,479
are and by externalizing our technology

00:06:26,880 --> 00:06:30,319
we're able to get a better signal as to

00:06:28,479 --> 00:06:32,639
whether there's actual value

00:06:30,319 --> 00:06:35,520
because outside of google developers can

00:06:32,639 --> 00:06:37,600
make choices about what tools they use

00:06:35,520 --> 00:06:39,759
and finally equally significantly by

00:06:37,600 --> 00:06:41,360
open sourcing blaze's babel we're making

00:06:39,759 --> 00:06:42,800
bazel we're making an important

00:06:41,360 --> 00:06:45,120
contribution to the

00:06:42,800 --> 00:06:46,800
software developer community and also

00:06:45,120 --> 00:06:49,199
enabling the community to contribute

00:06:46,800 --> 00:06:50,240
back to google so that we can all

00:06:49,199 --> 00:06:54,400
benefit

00:06:50,240 --> 00:06:55,680
in a in a symbiotic way

00:06:54,400 --> 00:06:58,080
whether that's through the community

00:06:55,680 --> 00:07:00,960
contributing directly to bazel itself

00:06:58,080 --> 00:07:02,400
or to the increasing ecosystem that

00:07:00,960 --> 00:07:04,000
grows around bazel

00:07:02,400 --> 00:07:06,000
in terms of rules and plugins

00:07:04,000 --> 00:07:08,560
documentation best practices

00:07:06,000 --> 00:07:08,560
etc

00:07:10,160 --> 00:07:13,759
so what's a really powerful metaphor i

00:07:13,039 --> 00:07:16,720
think is

00:07:13,759 --> 00:07:18,319
is to think of google as a technology

00:07:16,720 --> 00:07:20,639
island

00:07:18,319 --> 00:07:22,400
where what's important is that we built

00:07:20,639 --> 00:07:24,880
we can innovate on this island but we

00:07:22,400 --> 00:07:27,280
need to build bridges to other islands

00:07:24,880 --> 00:07:28,720
where we can then use those bridges to

00:07:27,280 --> 00:07:31,440
bring technology out

00:07:28,720 --> 00:07:32,240
to the benefit of others but also bring

00:07:31,440 --> 00:07:37,039
innovations

00:07:32,240 --> 00:07:37,039
outside into google as well

00:07:38,080 --> 00:07:41,280
of course we couldn't just take blaze

00:07:39,680 --> 00:07:44,639
and then just copy paste it

00:07:41,280 --> 00:07:46,960
outside as bazel we've had to adapt

00:07:44,639 --> 00:07:48,240
blaze to the open world and we've done

00:07:46,960 --> 00:07:50,160
that through a number of important

00:07:48,240 --> 00:07:53,280
innovations in the product

00:07:50,160 --> 00:07:55,039
one through starlark our rule

00:07:53,280 --> 00:07:57,039
extension or our extension mechanism for

00:07:55,039 --> 00:07:59,440
both rules and macros

00:07:57,039 --> 00:08:00,800
two is by allowing unlike google where

00:07:59,440 --> 00:08:03,360
we don't

00:08:00,800 --> 00:08:05,039
use external dependency support we offer

00:08:03,360 --> 00:08:07,280
the support

00:08:05,039 --> 00:08:08,400
for teams and companies outside that

00:08:07,280 --> 00:08:10,080
want to be able to

00:08:08,400 --> 00:08:12,720
pull in external artifacts into their

00:08:10,080 --> 00:08:14,720
build and finally

00:08:12,720 --> 00:08:16,639
we've invested heavily in support for an

00:08:14,720 --> 00:08:19,440
open remote execution protocol

00:08:16,639 --> 00:08:20,080
that allows outside developers to plug

00:08:19,440 --> 00:08:22,080
in

00:08:20,080 --> 00:08:23,280
any number of any of the increasing

00:08:22,080 --> 00:08:25,599
number of

00:08:23,280 --> 00:08:27,360
open source and proprietary remote

00:08:25,599 --> 00:08:29,440
execution solutions

00:08:27,360 --> 00:08:31,360
crucially however though bazel is very

00:08:29,440 --> 00:08:33,039
much not a fork of blaze

00:08:31,360 --> 00:08:34,880
the two implementations continue to

00:08:33,039 --> 00:08:38,479
co-evolve and

00:08:34,880 --> 00:08:38,479
share the large majority of their

00:08:38,839 --> 00:08:42,320
implementation

00:08:40,159 --> 00:08:44,320
today bazel is used by a growing number

00:08:42,320 --> 00:08:45,600
of open source projects by enterprises

00:08:44,320 --> 00:08:47,279
that really depend on

00:08:45,600 --> 00:08:49,839
bazel for the success of their business

00:08:47,279 --> 00:08:52,880
just as google does

00:08:49,839 --> 00:08:53,360
we continue to invest significant amount

00:08:52,880 --> 00:08:55,440
of

00:08:53,360 --> 00:08:56,399
engineering effort in the product from

00:08:55,440 --> 00:08:57,760
google

00:08:56,399 --> 00:08:59,839
and really want to reaffirm our

00:08:57,760 --> 00:09:02,480
commitment to user success

00:08:59,839 --> 00:09:03,760
of bazel itself we have a lot of work

00:09:02,480 --> 00:09:05,519
that we're proud of that we've done over

00:09:03,760 --> 00:09:09,120
the past year

00:09:05,519 --> 00:09:11,760
especially given the complexity of 2020

00:09:09,120 --> 00:09:13,120
one is that we have successfully enabled

00:09:11,760 --> 00:09:16,240
community rule ownership

00:09:13,120 --> 00:09:19,200
of both the python rules and

00:09:16,240 --> 00:09:19,680
rules apple we've delivered an arm 64

00:09:19,200 --> 00:09:22,720
port

00:09:19,680 --> 00:09:26,080
of bazel for use on arm platforms we've

00:09:22,720 --> 00:09:27,200
made some pretty major improvements to

00:09:26,080 --> 00:09:28,560
technical debt

00:09:27,200 --> 00:09:30,320
through code cleanups such as the

00:09:28,560 --> 00:09:32,560
separation of the java starlarknet

00:09:30,320 --> 00:09:34,880
library we have significantly improved

00:09:32,560 --> 00:09:36,399
tools for starlark development and

00:09:34,880 --> 00:09:37,920
remote execution

00:09:36,399 --> 00:09:39,440
starlight rules development and remote

00:09:37,920 --> 00:09:41,120
execution profiling

00:09:39,440 --> 00:09:43,680
and we've invested heavily in improved

00:09:41,120 --> 00:09:46,640
performance of bazel itself

00:09:43,680 --> 00:09:47,920
for example query support we also have

00:09:46,640 --> 00:09:49,200
to acknowledge that there's some things

00:09:47,920 --> 00:09:50,399
that we didn't do as well as we would

00:09:49,200 --> 00:09:53,519
have liked

00:09:50,399 --> 00:09:55,200
as the project has grown and

00:09:53,519 --> 00:09:57,519
more and more users use it we've

00:09:55,200 --> 00:10:00,720
accumulated a backlog of pull requests

00:09:57,519 --> 00:10:02,000
and github issues and this is something

00:10:00,720 --> 00:10:04,000
that really want to do a better job in

00:10:02,000 --> 00:10:06,160
addressing next year

00:10:04,000 --> 00:10:07,680
similarly we have to acknowledge that

00:10:06,160 --> 00:10:11,040
our roadmap

00:10:07,680 --> 00:10:12,880
has not been as up to date

00:10:11,040 --> 00:10:14,640
and real as we would have liked so it's

00:10:12,880 --> 00:10:17,440
been harder for our external

00:10:14,640 --> 00:10:19,440
community to know where bazel is headed

00:10:17,440 --> 00:10:22,720
and we're really doubling down on this

00:10:19,440 --> 00:10:24,480
for next year as well and finally

00:10:22,720 --> 00:10:26,640
though we were very aspirational in

00:10:24,480 --> 00:10:28,240
terms of the basal federation

00:10:26,640 --> 00:10:30,000
this also didn't go as well as we would

00:10:28,240 --> 00:10:32,000
have liked and we're going to

00:10:30,000 --> 00:10:33,040
reboot this going into next year as well

00:10:32,000 --> 00:10:35,519
and there'll be more information

00:10:33,040 --> 00:10:36,800
shared about this and during the

00:10:35,519 --> 00:10:38,240
conference

00:10:36,800 --> 00:10:39,680
so i also want to spend some time during

00:10:38,240 --> 00:10:41,440
this keynote talking to you about where

00:10:39,680 --> 00:10:43,760
bazel is going

00:10:41,440 --> 00:10:45,120
it's roadmap and to do that i want to

00:10:43,760 --> 00:10:48,160
anchor back to

00:10:45,120 --> 00:10:49,440
the vision of bazel our vision for bazel

00:10:48,160 --> 00:10:50,880
has been very stable throughout the

00:10:49,440 --> 00:10:52,560
lifetime of the project this has been

00:10:50,880 --> 00:10:54,320
text that's been on our website for

00:10:52,560 --> 00:10:55,760
years

00:10:54,320 --> 00:10:57,680
and a core part of the vision is that

00:10:55,760 --> 00:10:59,120
any software developer can efficiently

00:10:57,680 --> 00:11:01,440
build test and package

00:10:59,120 --> 00:11:03,360
any project of any size or complexity

00:11:01,440 --> 00:11:05,120
with tooling that's easy to adopt and

00:11:03,360 --> 00:11:06,480
extend i really want to emphasize the

00:11:05,120 --> 00:11:07,920
extend point

00:11:06,480 --> 00:11:10,320
because i firmly believe that the

00:11:07,920 --> 00:11:10,800
success of bazel in the future and its

00:11:10,320 --> 00:11:13,519
growth

00:11:10,800 --> 00:11:14,000
is going to hinge on our ability to

00:11:13,519 --> 00:11:17,440
evolve

00:11:14,000 --> 00:11:19,600
bazel into a platform and so

00:11:17,440 --> 00:11:21,200
the bazel team at google is really going

00:11:19,600 --> 00:11:23,360
to be focusing on the future

00:11:21,200 --> 00:11:25,040
of making bazel a great platform and a

00:11:23,360 --> 00:11:25,920
great development experience for rule

00:11:25,040 --> 00:11:29,279
owners

00:11:25,920 --> 00:11:30,560
and developers that will be accomplished

00:11:29,279 --> 00:11:33,839
through

00:11:30,560 --> 00:11:37,519
a number of improvements to bazel

00:11:33,839 --> 00:11:39,839
and its ecosystem for one we really want

00:11:37,519 --> 00:11:42,640
to improve the starlight rules api

00:11:39,839 --> 00:11:43,600
develop best practices for rural authors

00:11:42,640 --> 00:11:45,040
revamp our

00:11:43,600 --> 00:11:48,000
external depth support to make it a lot

00:11:45,040 --> 00:11:50,079
more usable for developers

00:11:48,000 --> 00:11:52,480
we want to star larkify if i can use

00:11:50,079 --> 00:11:56,560
that word all the native rules

00:11:52,480 --> 00:11:57,920
which ensure that starlark is a fully

00:11:56,560 --> 00:12:01,680
capable mechanism for

00:11:57,920 --> 00:12:03,760
arbitrary uh rule extensions

00:12:01,680 --> 00:12:05,680
and we aren't kind of cheating by

00:12:03,760 --> 00:12:07,200
programming against native java apis

00:12:05,680 --> 00:12:10,480
inside of bazel

00:12:07,200 --> 00:12:12,160
and finally we we are

00:12:10,480 --> 00:12:13,600
investing a lot more in improved remote

00:12:12,160 --> 00:12:15,360
execution support

00:12:13,600 --> 00:12:17,920
which is a we've identified as a

00:12:15,360 --> 00:12:19,360
critical need for bazel customers

00:12:17,920 --> 00:12:21,120
beyond that we have a lot of other

00:12:19,360 --> 00:12:23,440
exciting things that we're delivering

00:12:21,120 --> 00:12:25,200
for our our customer base based on

00:12:23,440 --> 00:12:26,720
customer feedback

00:12:25,200 --> 00:12:28,480
one really important thing to highlight

00:12:26,720 --> 00:12:31,120
is that we are developing

00:12:28,480 --> 00:12:32,720
a long-term support model for bazel and

00:12:31,120 --> 00:12:34,399
bazel releases

00:12:32,720 --> 00:12:35,920
so we've gotten feedback from customers

00:12:34,399 --> 00:12:39,279
that even with a three-month

00:12:35,920 --> 00:12:41,200
window support window for releases

00:12:39,279 --> 00:12:43,920
it's been difficult for for major

00:12:41,200 --> 00:12:47,120
projects and enterprises to keep up with

00:12:43,920 --> 00:12:48,160
our rate of release delivery

00:12:47,120 --> 00:12:50,000
it's also been hard for us to

00:12:48,160 --> 00:12:52,560
communicate the value of new releases by

00:12:50,000 --> 00:12:55,519
the version number itself

00:12:52,560 --> 00:12:57,200
so going forward and there will be a

00:12:55,519 --> 00:13:01,279
blog post about this soon in our blog

00:12:57,200 --> 00:13:03,600
we're going to start releasing

00:13:01,279 --> 00:13:05,120
lts releases with longer support windows

00:13:03,600 --> 00:13:07,279
starting in december

00:13:05,120 --> 00:13:09,440
and we will also maintain continuous

00:13:07,279 --> 00:13:10,880
rolling releases that are built against

00:13:09,440 --> 00:13:13,760
the most current version of the bazel

00:13:10,880 --> 00:13:16,399
code base for users that want to stay

00:13:13,760 --> 00:13:18,839
closer to the to the front and make use

00:13:16,399 --> 00:13:20,240
of features as they become available

00:13:18,839 --> 00:13:21,760
soon

00:13:20,240 --> 00:13:23,279
another thing i'm really excited to talk

00:13:21,760 --> 00:13:24,639
about and share with all of you

00:13:23,279 --> 00:13:26,480
and this is something we've spent a lot

00:13:24,639 --> 00:13:26,959
of time working on over the past few

00:13:26,480 --> 00:13:29,920
years

00:13:26,959 --> 00:13:30,880
is that we are now implementing support

00:13:29,920 --> 00:13:32,399
for

00:13:30,880 --> 00:13:34,000
building the android open source

00:13:32,399 --> 00:13:37,360
platform with

00:13:34,000 --> 00:13:39,279
bazel working in collaboration with the

00:13:37,360 --> 00:13:42,079
android organization inside google

00:13:39,279 --> 00:13:43,519
as well as key android partners this

00:13:42,079 --> 00:13:45,279
will bring all the benefits of both

00:13:43,519 --> 00:13:48,160
bazel as a build tool

00:13:45,279 --> 00:13:49,360
correct fast as well as the growing

00:13:48,160 --> 00:13:52,320
ecosystem

00:13:49,360 --> 00:13:53,360
of bazel technologies plug-ins

00:13:52,320 --> 00:13:56,720
documentation

00:13:53,360 --> 00:14:00,079
to developers of the android platform

00:13:56,720 --> 00:14:02,480
this i think also helps to communicate

00:14:00,079 --> 00:14:03,600
to all of you how much google really

00:14:02,480 --> 00:14:05,760
continues to invest

00:14:03,600 --> 00:14:07,839
in bazel amazon's success and is

00:14:05,760 --> 00:14:09,760
increasingly depending on bazel for

00:14:07,839 --> 00:14:13,279
for its own development success not just

00:14:09,760 --> 00:14:13,279
inside google but also outside

00:14:14,320 --> 00:14:19,279
we also are really excited to be able to

00:14:17,519 --> 00:14:22,399
pre-announce the eventual availability

00:14:19,279 --> 00:14:24,639
of a debian package for bazel

00:14:22,399 --> 00:14:25,440
this was actually rooted in the covet

00:14:24,639 --> 00:14:28,399
pandemic

00:14:25,440 --> 00:14:29,120
which created demand for tensorflow to

00:14:28,399 --> 00:14:30,800
be able to

00:14:29,120 --> 00:14:32,240
be natively available in debian to

00:14:30,800 --> 00:14:33,519
support scientists working on the

00:14:32,240 --> 00:14:35,120
problem

00:14:33,519 --> 00:14:36,800
and therefore we want to get enough of

00:14:35,120 --> 00:14:39,760
bazel bootstrapped into

00:14:36,800 --> 00:14:40,079
debian so that you can build tensorflow

00:14:39,760 --> 00:14:42,000
so

00:14:40,079 --> 00:14:43,360
it'll solve the tensorflow knee but also

00:14:42,000 --> 00:14:46,079
then be directly available

00:14:43,360 --> 00:14:48,240
in debian for debian users so i want to

00:14:46,079 --> 00:14:49,760
close with some logistical bits about

00:14:48,240 --> 00:14:52,560
the conference

00:14:49,760 --> 00:14:54,160
so we're going to have both a live q a

00:14:52,560 --> 00:14:56,079
and a bird of a feather

00:14:54,160 --> 00:14:57,360
set of sessions and for both of these if

00:14:56,079 --> 00:14:58,079
you've expressed interest during the

00:14:57,360 --> 00:14:59,839
registration

00:14:58,079 --> 00:15:01,440
and were among the first 100 attendees

00:14:59,839 --> 00:15:02,800
to express interest

00:15:01,440 --> 00:15:04,720
you should be in possession of a

00:15:02,800 --> 00:15:06,639
calendar invite with a google meet code

00:15:04,720 --> 00:15:09,519
to join that particular session

00:15:06,639 --> 00:15:11,680
each moderated by bazel team members

00:15:09,519 --> 00:15:14,399
please join in at the time specified on

00:15:11,680 --> 00:15:16,240
the calendar invite to participate

00:15:14,399 --> 00:15:17,680
you will also be receiving a feedback

00:15:16,240 --> 00:15:19,760
form after the events

00:15:17,680 --> 00:15:21,040
your feedback is very important to us

00:15:19,760 --> 00:15:22,800
and will help shape

00:15:21,040 --> 00:15:24,399
both the format and content of future

00:15:22,800 --> 00:15:26,160
iterations of bazelcon

00:15:24,399 --> 00:15:28,320
if you have a moment to leave feedback

00:15:26,160 --> 00:15:30,240
we would greatly appreciate it

00:15:28,320 --> 00:15:31,440
i know for a fact the feedback we've

00:15:30,240 --> 00:15:32,240
received previously in previous

00:15:31,440 --> 00:15:35,040
conferences

00:15:32,240 --> 00:15:36,800
has heavily influenced how we've set up

00:15:35,040 --> 00:15:38,800
and run

00:15:36,800 --> 00:15:40,079
past sessions or past conferences as

00:15:38,800 --> 00:15:43,839
well as bazel con

00:15:40,079 --> 00:15:46,000
2020 so i want to close by

00:15:43,839 --> 00:15:47,839
thanking all of you for for being here

00:15:46,000 --> 00:15:50,800
for participating for being

00:15:47,839 --> 00:15:52,720
a part of our our growing community uh

00:15:50,800 --> 00:15:53,120
into making bazalcon a success i want to

00:15:52,720 --> 00:15:55,279
thank

00:15:53,120 --> 00:15:56,639
especially our presenters who i believe

00:15:55,279 --> 00:15:59,920
went above and beyond

00:15:56,639 --> 00:16:02,560
to make this virtual conference setting

00:15:59,920 --> 00:16:03,680
effective and work and and we'll be

00:16:02,560 --> 00:16:04,959
delivering a lot of both

00:16:03,680 --> 00:16:07,120
very interesting and informative

00:16:04,959 --> 00:16:09,360
material to all of you so thanks

00:16:07,120 --> 00:16:21,839
enjoy bazelcon 2020 and i will see you

00:16:09,360 --> 00:16:21,839

YouTube URL: https://www.youtube.com/watch?v=Bmn5Ugp4r2I


