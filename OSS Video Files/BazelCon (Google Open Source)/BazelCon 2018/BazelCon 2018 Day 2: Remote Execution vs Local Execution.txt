Title: BazelCon 2018 Day 2: Remote Execution vs Local Execution
Publication date: 2018-11-02
Playlist: BazelCon 2018
Description: 
	Challenges and issues
Nick Lopez (Google) event: Bazelcon 2018; re_ty: Publish; product: Open Source - General; fullname: Nick Lopez;
Captions: 
	00:00:03,990 --> 00:00:10,680
hi everybody I'm Nick I work with a

00:00:07,230 --> 00:00:12,660
remote execution team in Waterloo I work

00:00:10,680 --> 00:00:16,320
on two chains for the remote execution

00:00:12,660 --> 00:00:18,660
team we're also the owners of rules

00:00:16,320 --> 00:00:20,099
docker and rules kubernetes we build

00:00:18,660 --> 00:00:22,650
containers we build the container that

00:00:20,099 --> 00:00:24,539
we use for our remote execution builds

00:00:22,650 --> 00:00:29,960
and we're also the owners of the basal

00:00:24,539 --> 00:00:33,000
container now so this talk is just about

00:00:29,960 --> 00:00:34,710
focusing on what is different between

00:00:33,000 --> 00:00:36,480
remote execution and local execution

00:00:34,710 --> 00:00:38,640
we're going to be going over some of the

00:00:36,480 --> 00:00:40,070
main challenges that we have faced

00:00:38,640 --> 00:00:42,750
ourselves that we see our customers

00:00:40,070 --> 00:00:44,340
currently face when they're trying to

00:00:42,750 --> 00:00:48,680
get their local Bell to work with

00:00:44,340 --> 00:00:51,120
execution okay before we dive into the

00:00:48,680 --> 00:00:53,310
main topics I want to get some

00:00:51,120 --> 00:00:55,470
terminology out of the way first of all

00:00:53,310 --> 00:00:56,820
the host environment is the machine were

00:00:55,470 --> 00:00:58,830
baseless running the machine were

00:00:56,820 --> 00:01:00,810
baseless installed it can be a Mac or a

00:00:58,830 --> 00:01:02,640
Windows or a Linux machine and the

00:01:00,810 --> 00:01:04,710
execution environment is the machine

00:01:02,640 --> 00:01:06,540
where the commands that basil spawns

00:01:04,710 --> 00:01:09,329
will be running now with remote

00:01:06,540 --> 00:01:12,600
execution these two machines are likely

00:01:09,329 --> 00:01:14,460
to be different and currently with our

00:01:12,600 --> 00:01:16,200
implementation of remote execution the

00:01:14,460 --> 00:01:18,420
execution environment typically it's a

00:01:16,200 --> 00:01:20,219
Linux system whereas the host

00:01:18,420 --> 00:01:22,170
environment we would like to be anything

00:01:20,219 --> 00:01:23,880
right we would like it to not be

00:01:22,170 --> 00:01:24,929
restricted to you having to build from a

00:01:23,880 --> 00:01:26,939
Linux machine you should be able to

00:01:24,929 --> 00:01:28,560
build from a Mac machine or from a

00:01:26,939 --> 00:01:29,939
Windows machine and then the target

00:01:28,560 --> 00:01:31,320
environment I just mentioned here for

00:01:29,939 --> 00:01:34,350
completeness I'm not going to talk too

00:01:31,320 --> 00:01:36,659
much about that in my my slides is just

00:01:34,350 --> 00:01:41,819
where the bynars that you're building

00:01:36,659 --> 00:01:43,079
with basil will finally run ok the first

00:01:41,819 --> 00:01:45,450
thing that we should ask ourselves is

00:01:43,079 --> 00:01:47,280
why is it not just trivial to do remote

00:01:45,450 --> 00:01:51,420
execution and and we had a couple of

00:01:47,280 --> 00:01:54,780
talks during during this conference that

00:01:51,420 --> 00:01:58,319
have touched in some of these topics my

00:01:54,780 --> 00:02:00,509
take on it is that be so allows you and

00:01:58,319 --> 00:02:03,889
empowers you to to create a bill that is

00:02:00,509 --> 00:02:06,719
fully er Matic fully her American fully

00:02:03,889 --> 00:02:08,819
reproducible and fully replicable but it

00:02:06,719 --> 00:02:10,470
doesn't actually and force you to do it

00:02:08,819 --> 00:02:12,180
you can build things in base with are

00:02:10,470 --> 00:02:15,690
not hermetic and not reproducible and

00:02:12,180 --> 00:02:17,040
and these just happen to work by

00:02:15,690 --> 00:02:19,420
accident when you do a little

00:02:17,040 --> 00:02:23,080
but when you start moving to our remote

00:02:19,420 --> 00:02:26,050
execution environments these typically

00:02:23,080 --> 00:02:29,170
result in heart failures and even though

00:02:26,050 --> 00:02:31,240
these things work locally my main

00:02:29,170 --> 00:02:33,010
takeaway that I like you guys to take is

00:02:31,240 --> 00:02:34,810
that all of these things that we're

00:02:33,010 --> 00:02:37,630
gonna go over in this presentation they

00:02:34,810 --> 00:02:39,910
can also impact your local bills so if

00:02:37,630 --> 00:02:42,700
you often find yourself having to do

00:02:39,910 --> 00:02:45,160
basel clean because you don't know why

00:02:42,700 --> 00:02:47,350
you're probably doing one of these

00:02:45,160 --> 00:02:49,840
things you're probably have in your

00:02:47,350 --> 00:02:52,180
build a problem related to this so this

00:02:49,840 --> 00:02:54,010
this some of these topics are very

00:02:52,180 --> 00:02:56,470
related to the talk about my Matthew

00:02:54,010 --> 00:02:57,970
gave yesterday about hermeticity so

00:02:56,470 --> 00:03:01,540
we'll talk about each one of these in

00:02:57,970 --> 00:03:02,950
detail before that the key difference

00:03:01,540 --> 00:03:05,350
about remote execution and local

00:03:02,950 --> 00:03:07,300
execution Stephan also touched upon this

00:03:05,350 --> 00:03:10,630
topic on his presentation yesterday is

00:03:07,300 --> 00:03:13,090
that actions are isolated fully from one

00:03:10,630 --> 00:03:15,000
another there is no way that anything

00:03:13,090 --> 00:03:16,990
can leak from one action to the other

00:03:15,000 --> 00:03:19,630
anything that happens with the build

00:03:16,990 --> 00:03:23,500
tools is just destroyed after the action

00:03:19,630 --> 00:03:25,270
is executed and only then split the

00:03:23,500 --> 00:03:27,430
explicit inputs that you declare for a

00:03:25,270 --> 00:03:28,930
rule will be actually present at the

00:03:27,430 --> 00:03:31,030
moment in which the command that basil

00:03:28,930 --> 00:03:32,710
spawns will be wrong so anything that

00:03:31,030 --> 00:03:35,290
you have not declared as an explicit

00:03:32,710 --> 00:03:37,120
input will not be there and then as I

00:03:35,290 --> 00:03:39,040
was mentioning we want to be able to

00:03:37,120 --> 00:03:41,350
build on diverse execution environments

00:03:39,040 --> 00:03:44,200
we would like to be able to have a bill

00:03:41,350 --> 00:03:46,330
that can run from a Mac on a remote

00:03:44,200 --> 00:03:47,890
Linux environment or from a Linux on a

00:03:46,330 --> 00:03:49,990
remote Mac environment that's gonna be

00:03:47,890 --> 00:03:52,660
much much harder but we would like to at

00:03:49,990 --> 00:03:53,950
least keep this option open by trying to

00:03:52,660 --> 00:03:57,210
understand all of the issues that we

00:03:53,950 --> 00:04:00,940
currently have to make this happen

00:03:57,210 --> 00:04:03,070
ok so who should care about this

00:04:00,940 --> 00:04:05,110
obviously if you want to do remote

00:04:03,070 --> 00:04:06,610
execution you should be looking at each

00:04:05,110 --> 00:04:09,430
of this issues and seeing how you can

00:04:06,610 --> 00:04:11,110
fix them but I also think it's very very

00:04:09,430 --> 00:04:13,720
important for anybody who's a rule owner

00:04:11,110 --> 00:04:17,830
to take good and close attention to each

00:04:13,720 --> 00:04:19,630
of these things we have found that every

00:04:17,830 --> 00:04:23,360
user that wants to onboard into remote

00:04:19,630 --> 00:04:25,219
execution depends on third-party rules

00:04:23,360 --> 00:04:27,800
that are being developed by a diversity

00:04:25,219 --> 00:04:29,840
of teams and a lot of the problems are

00:04:27,800 --> 00:04:31,400
in those rules so we need help from the

00:04:29,840 --> 00:04:31,849
rule owners to get this working for

00:04:31,400 --> 00:04:34,699
everybody

00:04:31,849 --> 00:04:36,590
and in general if you just want to have

00:04:34,699 --> 00:04:38,599
your builds be more hermetic and more

00:04:36,590 --> 00:04:40,699
reproducible you should also be caring

00:04:38,599 --> 00:04:42,490
about this right we also had a question

00:04:40,699 --> 00:04:45,289
during Stephens talks yesterday about

00:04:42,490 --> 00:04:46,849
how to avoid poisoning your cash you

00:04:45,289 --> 00:04:49,280
make your bills more thematic if your

00:04:46,849 --> 00:04:52,180
bills are fully chromatic and fully

00:04:49,280 --> 00:04:54,770
reproducible you have no possibility of

00:04:52,180 --> 00:04:57,110
poisoning the cash now that is not

00:04:54,770 --> 00:04:59,629
always possible but the more that we

00:04:57,110 --> 00:05:00,620
move the arrow towards more chromatic

00:04:59,629 --> 00:05:05,080
and more reproducible they're more

00:05:00,620 --> 00:05:05,080
likely we are to never poison our cash

00:05:05,289 --> 00:05:10,719
okay so I don't know which was fine so

00:05:11,139 --> 00:05:15,529
this is just a list of this issues that

00:05:14,060 --> 00:05:17,900
I showed you a couple of slides ago we

00:05:15,529 --> 00:05:21,379
call them anti patterns and we're going

00:05:17,900 --> 00:05:24,460
to go through each one of these and in

00:05:21,379 --> 00:05:26,449
the upcoming slides so the first one is

00:05:24,460 --> 00:05:29,000
missing on implicit dependencies this

00:05:26,449 --> 00:05:31,819
one is the easiest issue that we have

00:05:29,000 --> 00:05:33,650
seen that basically every project that

00:05:31,819 --> 00:05:36,259
we try to on go to remote execution has

00:05:33,650 --> 00:05:39,379
one or another action that is doing this

00:05:36,259 --> 00:05:41,839
and the issues that with local execution

00:05:39,379 --> 00:05:43,729
if you writing a general or you're

00:05:41,839 --> 00:05:45,949
writing a shell test or you're writing

00:05:43,729 --> 00:05:47,839
something like that it's really easy to

00:05:45,949 --> 00:05:49,610
just use a file that happens to be on

00:05:47,839 --> 00:05:52,400
the relative path for your wrongful

00:05:49,610 --> 00:05:57,580
street and not declare it on your actual

00:05:52,400 --> 00:06:01,099
rule declaration and that will work but

00:05:57,580 --> 00:06:04,039
it'll be non hermetic right so if the

00:06:01,099 --> 00:06:07,159
father you're using is regenerated

00:06:04,039 --> 00:06:08,930
you're your general or yours Sh

00:06:07,159 --> 00:06:10,759
test or whatever will not know that it

00:06:08,930 --> 00:06:12,409
needs to rerun so what do you do

00:06:10,759 --> 00:06:15,589
basil clean because you got a weird

00:06:12,409 --> 00:06:17,599
error right sandboxing can help if

00:06:15,589 --> 00:06:19,430
you're not using sandbox it use it it

00:06:17,599 --> 00:06:21,289
can catch a lot of these implicit

00:06:19,430 --> 00:06:23,629
dependencies it can help you get your

00:06:21,289 --> 00:06:25,520
build cleaner the big problem that we

00:06:23,629 --> 00:06:27,319
have and we Stephen also mentioned this

00:06:25,520 --> 00:06:29,599
yesterday is that even with sandboxing

00:06:27,319 --> 00:06:30,889
tools are hard tools are really really

00:06:29,599 --> 00:06:32,990
hard to understand and tools can do

00:06:30,889 --> 00:06:36,580
whatever they want to do so the C

00:06:32,990 --> 00:06:39,159
compiler has 20 or 30 years of back

00:06:36,580 --> 00:06:41,169
where they decided that they will just

00:06:39,159 --> 00:06:43,389
find the files in your predefined

00:06:41,169 --> 00:06:44,919
directories and there is nothing that we

00:06:43,389 --> 00:06:47,379
can do to change how these compilers

00:06:44,919 --> 00:06:49,210
work and there are many other compilers

00:06:47,379 --> 00:06:50,650
that keep some state I've had that I've

00:06:49,210 --> 00:06:52,389
heard that the Scala compiler is

00:06:50,650 --> 00:06:55,090
stateful I have no idea what sort of

00:06:52,389 --> 00:06:57,759
state it keeps but whatever city keeps

00:06:55,090 --> 00:06:59,530
will be available to the next section

00:06:57,759 --> 00:07:02,680
that runs since this is even with

00:06:59,530 --> 00:07:05,289
sandbox so we have we have been working

00:07:02,680 --> 00:07:09,370
with the basil team for a long time to

00:07:05,289 --> 00:07:12,400
try to get stricter form of sandboxing

00:07:09,370 --> 00:07:14,259
and this is the local docker sandbox the

00:07:12,400 --> 00:07:16,449
way it works is that every single action

00:07:14,259 --> 00:07:19,990
that basil spawns creates a new

00:07:16,449 --> 00:07:22,180
container mounts the inputs runs the

00:07:19,990 --> 00:07:24,460
action gets the outputs and kills the

00:07:22,180 --> 00:07:29,370
container as you can imagine this makes

00:07:24,460 --> 00:07:31,719
the build much much much slower so I

00:07:29,370 --> 00:07:33,759
don't think it's viable with the current

00:07:31,719 --> 00:07:36,099
performance to have your belts or your

00:07:33,759 --> 00:07:37,360
CI to use local darker sandbox but if

00:07:36,099 --> 00:07:39,819
you're thinking of a remote execution

00:07:37,360 --> 00:07:41,560
try to run a single build with local

00:07:39,819 --> 00:07:43,319
donger sandbox live your build running

00:07:41,560 --> 00:07:47,529
and come back in a couple of hours and

00:07:43,319 --> 00:07:50,469
then see if your build is really it's

00:07:47,529 --> 00:07:52,560
really it does all the dependencies for

00:07:50,469 --> 00:07:54,879
all the actions are explicitly declared

00:07:52,560 --> 00:07:57,099
with remote execution you'll just get an

00:07:54,879 --> 00:07:58,509
error write any anything that you

00:07:57,099 --> 00:08:01,210
haven't declared you'll just get an

00:07:58,509 --> 00:08:03,129
error so if you're trying to do your be

00:08:01,210 --> 00:08:04,509
why you'll be a bring your own build if

00:08:03,129 --> 00:08:06,490
you're coming to this session or if

00:08:04,509 --> 00:08:09,099
you're thinking about onboarding anyer

00:08:06,490 --> 00:08:10,719
that you get that a file is missing it's

00:08:09,099 --> 00:08:13,060
probably because you didn't clear it has

00:08:10,719 --> 00:08:20,949
a that's an explicit dependency of the

00:08:13,060 --> 00:08:22,719
rule okay second ought to parent that I

00:08:20,949 --> 00:08:25,690
wanted to talk to you guys about this is

00:08:22,719 --> 00:08:31,199
very and it's a simple one using

00:08:25,690 --> 00:08:33,399
platform-specific binaries so when you

00:08:31,199 --> 00:08:34,570
when you start a local build the

00:08:33,399 --> 00:08:37,690
assumption is that the hosts in the

00:08:34,570 --> 00:08:41,399
execution platform is the same so it is

00:08:37,690 --> 00:08:44,199
very easy to just assume that you can

00:08:41,399 --> 00:08:45,910
have some binaries that are in your

00:08:44,199 --> 00:08:47,800
source tree or some binaries that are

00:08:45,910 --> 00:08:49,779
installing your machine and that you can

00:08:47,800 --> 00:08:51,519
just use those for remote execution

00:08:49,779 --> 00:08:53,410
but that will not work if you want your

00:08:51,519 --> 00:08:55,300
bill to start from a Mac and be running

00:08:53,410 --> 00:08:58,149
on Windows and the specific example that

00:08:55,300 --> 00:09:00,519
we have here is single jar up until

00:08:58,149 --> 00:09:02,800
about a year ago

00:09:00,519 --> 00:09:06,550
still single jar the single jar binary

00:09:02,800 --> 00:09:07,959
it's a C binary when you do when the

00:09:06,550 --> 00:09:09,129
first time you do a basil build after

00:09:07,959 --> 00:09:11,079
you install basically you see this

00:09:09,129 --> 00:09:12,759
little instructing base a little that's

00:09:11,079 --> 00:09:15,610
part of what it's doing it's it's some

00:09:12,759 --> 00:09:17,559
packing the single jar version that

00:09:15,610 --> 00:09:19,389
works with your host and the reason it's

00:09:17,559 --> 00:09:20,949
doing it is because this tool single jar

00:09:19,389 --> 00:09:23,290
is going to be used by a lot of projects

00:09:20,949 --> 00:09:25,899
in a lower builts basically anything

00:09:23,290 --> 00:09:27,370
that uses java rules and it would be too

00:09:25,899 --> 00:09:29,079
expensive to rebuild it for every

00:09:27,370 --> 00:09:30,610
project so why not build it when you

00:09:29,079 --> 00:09:33,399
install baseline used for every one of

00:09:30,610 --> 00:09:34,899
your bills that works as long as you're

00:09:33,399 --> 00:09:36,610
not doing remote execution the moment

00:09:34,899 --> 00:09:38,379
that you have a single jar binary that

00:09:36,610 --> 00:09:39,939
was built for mac and you try to move

00:09:38,379 --> 00:09:41,860
that to the Linux remote execution

00:09:39,939 --> 00:09:43,300
environment you're gonna get some exact

00:09:41,860 --> 00:09:47,649
error I don't know what the hell you

00:09:43,300 --> 00:09:50,470
asked me to execute so the sure that the

00:09:47,649 --> 00:09:52,509
shirt shorted by for this is don't ship

00:09:50,470 --> 00:09:54,040
any build binaries or build tools that

00:09:52,509 --> 00:09:56,769
are required by your build with your

00:09:54,040 --> 00:09:59,589
source code prefer shipping sources or

00:09:56,769 --> 00:10:02,949
if you must make sure that your users

00:09:59,589 --> 00:10:04,660
can select which hosts which execution

00:10:02,949 --> 00:10:08,110
platform they're gonna be running on

00:10:04,660 --> 00:10:10,720
when they get this pre ship pre-built

00:10:08,110 --> 00:10:12,550
virus so you would need to ship - for

00:10:10,720 --> 00:10:15,699
Mac or for Linux or for any platform

00:10:12,550 --> 00:10:17,800
that you expect your users to be using

00:10:15,699 --> 00:10:19,860
us execution platform and make sure that

00:10:17,800 --> 00:10:25,990
you enable your users to pick this this

00:10:19,860 --> 00:10:28,029
this platform for your binary ok tools

00:10:25,990 --> 00:10:32,800
invoked incorrectly this one is the one

00:10:28,029 --> 00:10:36,069
that most effects rule owners rule

00:10:32,800 --> 00:10:38,559
owners build rules and those rules need

00:10:36,069 --> 00:10:39,699
to use tools or resources we are also

00:10:38,559 --> 00:10:41,679
rule owners as I told you in the

00:10:39,699 --> 00:10:43,720
beginning we are now the owners of rules

00:10:41,679 --> 00:10:45,579
doc ground rules kubernetes and as part

00:10:43,720 --> 00:10:48,670
of a rules we use obviously docker and

00:10:45,579 --> 00:10:51,639
we use cubes cube City are supposed to

00:10:48,670 --> 00:10:56,379
be set so we use these tools and curly

00:10:51,639 --> 00:10:58,029
our rules if you look at the batch code

00:10:56,379 --> 00:11:01,209
that we have to execute these rules it

00:10:58,029 --> 00:11:03,260
actually says docker run whatever we

00:11:01,209 --> 00:11:04,550
need to do this is wrong

00:11:03,260 --> 00:11:06,380
this is not the way that you should be

00:11:04,550 --> 00:11:08,150
doing it this is the naive approach to

00:11:06,380 --> 00:11:11,240
executing these tools but it's not

00:11:08,150 --> 00:11:13,880
hermetic what happens if I run rules

00:11:11,240 --> 00:11:16,010
docker right now I built some targets I

00:11:13,880 --> 00:11:17,480
then changed my version of the docker

00:11:16,010 --> 00:11:19,640
binary that I haven't saw in my machine

00:11:17,480 --> 00:11:21,350
and then I continued doing my build and

00:11:19,640 --> 00:11:22,880
it turns out that there's some

00:11:21,350 --> 00:11:24,050
incompatibility to between the version

00:11:22,880 --> 00:11:26,000
that I had two minutes ago and the

00:11:24,050 --> 00:11:28,070
version that I have right now if my

00:11:26,000 --> 00:11:30,590
rules are just saying docker run or

00:11:28,070 --> 00:11:32,630
darker pool or darker push base it will

00:11:30,590 --> 00:11:34,550
never know that that tool changed it

00:11:32,630 --> 00:11:36,790
will not rebuild so I will start getting

00:11:34,550 --> 00:11:40,400
these weird errors and I do basically

00:11:36,790 --> 00:11:42,290
productivity is kill right so this is

00:11:40,400 --> 00:11:44,180
not hermetic and it's not platform

00:11:42,290 --> 00:11:47,360
compatible the correct approach which

00:11:44,180 --> 00:11:49,100
now exists the problem is that it does

00:11:47,360 --> 00:11:51,830
require additional effort is to be using

00:11:49,100 --> 00:11:53,540
two channels so a basal tool chain is a

00:11:51,830 --> 00:11:55,820
configuration provider that tells a bill

00:11:53,540 --> 00:11:57,920
rule what built tools to use and how to

00:11:55,820 --> 00:12:02,930
configure them this is from the tool

00:11:57,920 --> 00:12:05,840
chains documentation so instead of us

00:12:02,930 --> 00:12:07,460
writing docker run in our rules what we

00:12:05,840 --> 00:12:09,950
should have is a - chain rule that says

00:12:07,460 --> 00:12:11,660
I am the darker tool chain I can specify

00:12:09,950 --> 00:12:13,190
in the darker Church in the location of

00:12:11,660 --> 00:12:15,260
the darker binary maybe I can specify

00:12:13,190 --> 00:12:17,570
the version of the darker binary that

00:12:15,260 --> 00:12:20,560
I'm using and I can also specify some

00:12:17,570 --> 00:12:22,400
configuration file for the docker

00:12:20,560 --> 00:12:25,670
repositories or for the darker

00:12:22,400 --> 00:12:27,470
registries and then in my rule I just

00:12:25,670 --> 00:12:30,140
declare that I will be using that tool

00:12:27,470 --> 00:12:32,690
chain I empower my user to specify which

00:12:30,140 --> 00:12:34,130
person a darker they're using and then I

00:12:32,690 --> 00:12:36,680
just pass this as arguments into my

00:12:34,130 --> 00:12:38,660
rules and and I am now able to invoke

00:12:36,680 --> 00:12:40,490
docker in a way that if the user decides

00:12:38,660 --> 00:12:43,460
I am no longer using docker version X

00:12:40,490 --> 00:12:46,460
and using X plus one it's a new tool

00:12:43,460 --> 00:12:48,440
chain my build that any action that

00:12:46,460 --> 00:12:50,630
required using that tool will be re

00:12:48,440 --> 00:12:56,870
executed and will catch the new version

00:12:50,630 --> 00:12:58,280
of the tool being used okay we have

00:12:56,870 --> 00:13:01,490
another slide for tools invoked

00:12:58,280 --> 00:13:06,530
incorrectly just for one special tool

00:13:01,490 --> 00:13:09,650
that we all love to use the local JDK so

00:13:06,530 --> 00:13:11,720
the the local JDK has been a big problem

00:13:09,650 --> 00:13:16,460
for remote execution up until a month

00:13:11,720 --> 00:13:17,120
ago thank God that with basil 16 a lot

00:13:16,460 --> 00:13:21,770
of use cases

00:13:17,120 --> 00:13:23,870
broke with local JDK we we we had we had

00:13:21,770 --> 00:13:25,670
foreseen that this would happen the

00:13:23,870 --> 00:13:27,529
local JDK is a repository that is

00:13:25,670 --> 00:13:31,720
created automatically for every basil

00:13:27,529 --> 00:13:33,589
project and this this is this a legacy

00:13:31,720 --> 00:13:35,660
repository it's not created with a

00:13:33,589 --> 00:13:38,750
repository rule it's created with code

00:13:35,660 --> 00:13:41,930
hidden somewhere in the basil binary and

00:13:38,750 --> 00:13:45,880
what this local repository has are a

00:13:41,930 --> 00:13:48,200
bunch of siblings so this this this

00:13:45,880 --> 00:13:50,600
logic to create this local JDK it

00:13:48,200 --> 00:13:52,310
actually looks at whatever JDK you have

00:13:50,600 --> 00:13:54,230
installed on your machine and then

00:13:52,310 --> 00:13:56,540
creates a symlink from the run fast tree

00:13:54,230 --> 00:13:59,510
to the jar tool or a sibling from the

00:13:56,540 --> 00:14:02,990
rumpus tree to the java c tool and then

00:13:59,510 --> 00:14:06,080
it makes it available for any other part

00:14:02,990 --> 00:14:08,570
of your build to be used to use it the

00:14:06,080 --> 00:14:12,200
local JDK results in those that are not

00:14:08,570 --> 00:14:14,210
hermetic so if I run my build from this

00:14:12,200 --> 00:14:16,010
machine that has a version of Java and

00:14:14,210 --> 00:14:17,450
then I run a remote build from that

00:14:16,010 --> 00:14:19,970
machine that has a different version of

00:14:17,450 --> 00:14:21,890
Java we will not be getting any caches

00:14:19,970 --> 00:14:24,290
we will have to rebuild everything twice

00:14:21,890 --> 00:14:26,750
because my JDK that was part of the

00:14:24,290 --> 00:14:30,680
action key will be different to the JDK

00:14:26,750 --> 00:14:32,209
that they sent in Direction key the same

00:14:30,680 --> 00:14:34,040
occurs if you're just using remote

00:14:32,209 --> 00:14:36,020
caching if you're usually remote caching

00:14:34,040 --> 00:14:38,209
at any of your rules uses the local JDK

00:14:36,020 --> 00:14:40,459
you will not be getting any cache gets

00:14:38,209 --> 00:14:42,140
across different machines unless you

00:14:40,459 --> 00:14:44,150
convince your developers to all of them

00:14:42,140 --> 00:14:47,420
install the exact same version of Java

00:14:44,150 --> 00:14:49,520
has to be exactly identical the good

00:14:47,420 --> 00:14:51,440
thing is that it's easy to solve this

00:14:49,520 --> 00:14:54,050
one is really really easy to solve just

00:14:51,440 --> 00:14:55,910
don't use the local JDK the local JDK

00:14:54,050 --> 00:14:58,160
should be just an implementation detail

00:14:55,910 --> 00:15:00,320
hidden somewhere under covers of basil

00:14:58,160 --> 00:15:01,880
the right things to use or the current

00:15:00,320 --> 00:15:04,910
Java Runtime and the current you have a

00:15:01,880 --> 00:15:06,560
to chain we've been working with some

00:15:04,910 --> 00:15:07,970
rule owners to try to fix this because

00:15:06,560 --> 00:15:11,029
this was one of the biggest problems

00:15:07,970 --> 00:15:13,070
that we that we had here the bottom of

00:15:11,029 --> 00:15:14,690
the slides we have a pointer to the work

00:15:13,070 --> 00:15:15,380
that we did for rules groovy and rule

00:15:14,690 --> 00:15:16,940
scotland's

00:15:15,380 --> 00:15:19,130
so if you have any rules that need to

00:15:16,940 --> 00:15:21,140
interact with any Java tools please

00:15:19,130 --> 00:15:23,540
check the this examples out it's not

00:15:21,140 --> 00:15:25,430
easy to fix them and the sooner you do

00:15:23,540 --> 00:15:28,870
it the better the more prepared your

00:15:25,430 --> 00:15:28,870
rules will be for remote execution

00:15:29,740 --> 00:15:36,100
cool okay let's take a break because

00:15:33,800 --> 00:15:40,550
this one's a tough one

00:15:36,100 --> 00:15:43,300
okay comfier style workspace rules have

00:15:40,550 --> 00:15:47,690
been my nightmare for the last two years

00:15:43,300 --> 00:15:50,330
because I have no way I have no generic

00:15:47,690 --> 00:15:52,100
solution yet for this problem configure

00:15:50,330 --> 00:15:55,100
style workspace rules are used for

00:15:52,100 --> 00:15:57,590
programming host platform so rules for

00:15:55,100 --> 00:15:59,030
NCC use us to find out which if you're

00:15:57,590 --> 00:16:02,030
running on a Mac or if you're running on

00:15:59,030 --> 00:16:03,710
Linux tensorflow CUDA configure uses

00:16:02,030 --> 00:16:09,110
them to find out which version of CUDA

00:16:03,710 --> 00:16:13,480
you have installed pip Python packages

00:16:09,110 --> 00:16:15,380
uses to install the pip packages right

00:16:13,480 --> 00:16:17,720
all of these things are incompatible

00:16:15,380 --> 00:16:19,280
with remote execution and the big

00:16:17,720 --> 00:16:21,800
problem is that I don't have solutions

00:16:19,280 --> 00:16:23,630
for all but I have a incomplete list of

00:16:21,800 --> 00:16:25,850
things that you shouldn't be doing in

00:16:23,630 --> 00:16:27,890
your repository rules if you want them

00:16:25,850 --> 00:16:29,660
to work with more execution you should

00:16:27,890 --> 00:16:31,760
never be building any binaries any

00:16:29,660 --> 00:16:34,250
binary is that you run that you build on

00:16:31,760 --> 00:16:36,020
workspace rules will be built for the

00:16:34,250 --> 00:16:38,900
host machine where you're running your

00:16:36,020 --> 00:16:40,400
bill for the host machine were baseless

00:16:38,900 --> 00:16:41,720
running not for the execution

00:16:40,400 --> 00:16:43,760
environment where the rest through your

00:16:41,720 --> 00:16:45,620
bill that's gotta be running installing

00:16:43,760 --> 00:16:47,090
pip packages the same thing you will be

00:16:45,620 --> 00:16:48,500
installing the packages for the machine

00:16:47,090 --> 00:16:50,540
we're basically running not for the

00:16:48,500 --> 00:16:53,180
execution environment where things gonna

00:16:50,540 --> 00:16:55,250
be running sim linking to local tools or

00:16:53,180 --> 00:17:00,260
muting the host platform it will just

00:16:55,250 --> 00:17:03,110
not work if anything of this nature is

00:17:00,260 --> 00:17:05,600
is happening you should try to not do it

00:17:03,110 --> 00:17:08,390
and you should try to split it up so

00:17:05,600 --> 00:17:11,270
that's the non hermetic bits of your

00:17:08,390 --> 00:17:13,130
rule occur in the workspace rule but

00:17:11,270 --> 00:17:15,890
anything related to building things

00:17:13,130 --> 00:17:18,320
occur in regular build rules the problem

00:17:15,890 --> 00:17:20,660
is that this is not possible I have here

00:17:18,320 --> 00:17:22,580
an example of how it should happen with

00:17:20,660 --> 00:17:23,990
bit packages the problem is that the PIP

00:17:22,580 --> 00:17:26,750
tool does not allow you to do this

00:17:23,990 --> 00:17:27,709
ideally you and without get you can do

00:17:26,750 --> 00:17:29,840
see this sort of thing you can do

00:17:27,709 --> 00:17:32,270
apt-get poor that's what you were doing

00:17:29,840 --> 00:17:34,340
the workspace repository rule and in the

00:17:32,270 --> 00:17:35,600
build rule you would do up get install

00:17:34,340 --> 00:17:38,510
that thing which should pull before

00:17:35,600 --> 00:17:40,190
right with PIP you can do that but

00:17:38,510 --> 00:17:40,730
that's what should be happening

00:17:40,190 --> 00:17:43,340
the

00:17:40,730 --> 00:17:44,990
packages should be pulled and the worst

00:17:43,340 --> 00:17:46,520
fears repository rule which is not her

00:17:44,990 --> 00:17:48,500
Medicaid it's allowed to reach up to the

00:17:46,520 --> 00:17:50,840
Internet and pull all these things but

00:17:48,500 --> 00:17:52,850
the installation of this packages should

00:17:50,840 --> 00:17:55,880
only be happening on a regular build

00:17:52,850 --> 00:17:59,600
rule unfortunately this is not possible

00:17:55,880 --> 00:18:01,010
for for pip at least and I'm sure that

00:17:59,600 --> 00:18:04,220
there's many many different things that

00:18:01,010 --> 00:18:07,700
it is not possible to break down the non

00:18:04,220 --> 00:18:13,400
hermetic bits of the tool with actual

00:18:07,700 --> 00:18:15,500
building and executing things okay so if

00:18:13,400 --> 00:18:18,080
you happen to find a rule that works

00:18:15,500 --> 00:18:20,120
like this the only solution that we have

00:18:18,080 --> 00:18:22,730
for you today for doing remote execution

00:18:20,120 --> 00:18:24,410
is that you need to run your build from

00:18:22,730 --> 00:18:26,450
an executor from a host environment that

00:18:24,410 --> 00:18:28,010
is exactly identical or that looks

00:18:26,450 --> 00:18:30,200
sufficiently the same as your remote

00:18:28,010 --> 00:18:31,700
execution environment typically what

00:18:30,200 --> 00:18:33,169
this means is that you will be running

00:18:31,700 --> 00:18:35,960
your build from inside a docker

00:18:33,169 --> 00:18:38,570
container and and that is the advice

00:18:35,960 --> 00:18:40,490
that we give to users that are looking

00:18:38,570 --> 00:18:42,200
to unburden remote execution and that

00:18:40,490 --> 00:18:45,500
they know they have this sort of rules

00:18:42,200 --> 00:18:46,970
for now that is all that we can do now

00:18:45,500 --> 00:18:49,160
this this effectively becomes

00:18:46,970 --> 00:18:53,750
problematic when you want to do build

00:18:49,160 --> 00:18:56,510
from other os's obviously you cannot do

00:18:53,750 --> 00:18:58,220
this from windows but from Mac you can

00:18:56,510 --> 00:19:00,410
do it you can actually bring up in Mac a

00:18:58,220 --> 00:19:01,970
docker container if you do well the

00:19:00,410 --> 00:19:03,140
mapping of the files are you going to be

00:19:01,970 --> 00:19:05,720
sharing between the host and the

00:19:03,140 --> 00:19:09,260
document döner it should work and we I

00:19:05,720 --> 00:19:10,700
think we have at least couple of remote

00:19:09,260 --> 00:19:13,700
execution users that are currently doing

00:19:10,700 --> 00:19:15,080
that just running everything from a dark

00:19:13,700 --> 00:19:16,309
container that looks exactly like the

00:19:15,080 --> 00:19:19,730
one are going to be using on a remote

00:19:16,309 --> 00:19:22,850
execution now mind you just doing that

00:19:19,730 --> 00:19:25,130
does not only guarantees that you won't

00:19:22,850 --> 00:19:27,140
be having problems related to this

00:19:25,130 --> 00:19:29,299
anti-pattern but the ones that we saw

00:19:27,140 --> 00:19:30,950
before they're still valid so even if

00:19:29,299 --> 00:19:32,809
you run from the dark interior that's

00:19:30,950 --> 00:19:35,330
identical to your execution environment

00:19:32,809 --> 00:19:43,640
you can still have missing dependencies

00:19:35,330 --> 00:19:46,670
and they can still result in errors okay

00:19:43,640 --> 00:19:49,100
okay this last anti parent that we have

00:19:46,670 --> 00:19:54,650
here it's about mixing execution

00:19:49,100 --> 00:19:56,600
strategies so for those of you who are

00:19:54,650 --> 00:19:58,070
not familiar basal offers a bunch of

00:19:56,600 --> 00:20:00,920
their first occasion strategies it

00:19:58,070 --> 00:20:02,120
offers local execution sandbox execution

00:20:00,920 --> 00:20:05,480
I think there's two versions of Linux

00:20:02,120 --> 00:20:07,760
sandbox there's the local doctor sandbox

00:20:05,480 --> 00:20:09,370
as well there's the worker strategy and

00:20:07,760 --> 00:20:12,650
then there's remote execution

00:20:09,370 --> 00:20:15,410
unfortunately as far as I know they're

00:20:12,650 --> 00:20:20,540
exclusive you cannot do and we had this

00:20:15,410 --> 00:20:23,419
question commonly asked by folks who

00:20:20,540 --> 00:20:26,559
have scallop projects that are wanting

00:20:23,419 --> 00:20:30,890
to migrate to use remote execution

00:20:26,559 --> 00:20:32,419
workers strategy does not at all it's

00:20:30,890 --> 00:20:33,710
not at all compatible with remote

00:20:32,419 --> 00:20:35,840
execution strategy working strategy

00:20:33,710 --> 00:20:38,299
expects there to be long live workers

00:20:35,840 --> 00:20:39,770
and remote execution expects every

00:20:38,299 --> 00:20:42,320
action to be executed on a different

00:20:39,770 --> 00:20:43,760
environment so there's no way that we

00:20:42,320 --> 00:20:47,299
can currently make these two work

00:20:43,760 --> 00:20:49,490
together however it is currently

00:20:47,299 --> 00:20:51,200
possible to provide some strategies as

00:20:49,490 --> 00:20:53,330
far back to say this section in

00:20:51,200 --> 00:20:54,950
particular my whole build will run

00:20:53,330 --> 00:20:58,190
remotely but this one action you

00:20:54,950 --> 00:21:00,020
shouldn't run that remotely the problem

00:20:58,190 --> 00:21:01,910
is that it's really hard to do it right

00:21:00,020 --> 00:21:04,370
it's really easy to do something that

00:21:01,910 --> 00:21:08,179
works today but tomorrow it will not

00:21:04,370 --> 00:21:09,679
work and the key the key limitation that

00:21:08,179 --> 00:21:12,200
we currently have today is that with

00:21:09,679 --> 00:21:14,900
right now and basically you can only

00:21:12,200 --> 00:21:18,020
define one host and one target platform

00:21:14,900 --> 00:21:20,480
and that means that if you're having to

00:21:18,020 --> 00:21:22,040
do local fallback that same platform

00:21:20,480 --> 00:21:24,280
should be valid for your remote

00:21:22,040 --> 00:21:27,530
execution environment and for your local

00:21:24,280 --> 00:21:29,480
host environments so the only way that I

00:21:27,530 --> 00:21:31,970
know of that you can really do this

00:21:29,480 --> 00:21:34,429
right is by falling back from remote

00:21:31,970 --> 00:21:36,830
execution on to local darker sandbox

00:21:34,429 --> 00:21:38,600
execution and by specifying that the

00:21:36,830 --> 00:21:40,549
remote stalker

00:21:38,600 --> 00:21:41,660
execution environment is the same one

00:21:40,549 --> 00:21:44,330
that it's going to be using for the

00:21:41,660 --> 00:21:47,360
local fallback or local daugher sandbox

00:21:44,330 --> 00:21:48,470
in that way you can 100% guarantee that

00:21:47,360 --> 00:21:54,650
the platform is going to be identical

00:21:48,470 --> 00:21:57,059
and you should have no issues at all but

00:21:54,650 --> 00:21:59,129
in most of the cases I would not

00:21:57,059 --> 00:22:02,600
recommend falling back to local in

00:21:59,129 --> 00:22:05,129
general now it's true that you can

00:22:02,600 --> 00:22:07,820
assume that it's gonna be safe to fall

00:22:05,129 --> 00:22:09,299
back to local particularly for

00:22:07,820 --> 00:22:11,159
platform-agnostic

00:22:09,299 --> 00:22:13,669
rules so if you have a rule that creates

00:22:11,159 --> 00:22:17,159
a tar file you have a rule that creates

00:22:13,669 --> 00:22:19,169
maybe a jar file you might think that

00:22:17,159 --> 00:22:21,840
those are relatively platform-agnostic

00:22:19,169 --> 00:22:23,100
so you can maybe create one jar in the

00:22:21,840 --> 00:22:25,799
remote execution environment and create

00:22:23,100 --> 00:22:28,139
another jar locally this will only work

00:22:25,799 --> 00:22:29,309
if the tool chains are identical and

00:22:28,139 --> 00:22:30,480
they're a modern local execution

00:22:29,309 --> 00:22:32,490
environment that means you need to have

00:22:30,480 --> 00:22:34,860
Java installing the exact same location

00:22:32,490 --> 00:22:36,960
remotely and locally that's why doing

00:22:34,860 --> 00:22:40,230
the local the fallback locally onto the

00:22:36,960 --> 00:22:42,899
docker sandbox will work but any other

00:22:40,230 --> 00:22:45,149
form of local fallback is very

00:22:42,899 --> 00:22:46,950
problematic and the worst situation that

00:22:45,149 --> 00:22:49,350
we want to be in is something that works

00:22:46,950 --> 00:22:51,389
today just because my CI happens to have

00:22:49,350 --> 00:22:53,369
have Java installed in the same location

00:22:51,389 --> 00:22:54,570
as my docker container but that's six

00:22:53,369 --> 00:22:56,129
months from now you decide to change

00:22:54,570 --> 00:22:58,559
your CI or I decide to change the

00:22:56,129 --> 00:23:02,999
container and your bells break that is

00:22:58,559 --> 00:23:04,919
that is what we want to avoid okay so as

00:23:02,999 --> 00:23:05,940
I was saying this really will only work

00:23:04,919 --> 00:23:08,669
if you have the same tool chain

00:23:05,940 --> 00:23:10,830
available locally and remotely hopefully

00:23:08,669 --> 00:23:12,779
once platform allows us to do more

00:23:10,830 --> 00:23:14,759
custom selection of what their remote

00:23:12,779 --> 00:23:16,529
platform is and what the local platform

00:23:14,759 --> 00:23:19,679
is we should be able to see things such

00:23:16,529 --> 00:23:21,119
as for Java this platform that works

00:23:19,679 --> 00:23:23,610
remotely and this local platform their

00:23:21,119 --> 00:23:26,090
equivalent so any artifacts that were

00:23:23,610 --> 00:23:29,369
produced locally or remotely should be

00:23:26,090 --> 00:23:30,779
safe to pass around these rules I'm not

00:23:29,369 --> 00:23:32,129
sure exactly how that will work but I

00:23:30,779 --> 00:23:35,490
know that with platforms it should at

00:23:32,129 --> 00:23:38,639
least be possible to do this one thing

00:23:35,490 --> 00:23:41,039
is that's for sure is that even when we

00:23:38,639 --> 00:23:43,440
have these platforms this will only be

00:23:41,039 --> 00:23:45,360
feasible for rules that the outputs are

00:23:43,440 --> 00:23:48,840
platform-agnostic so if you expect this

00:23:45,360 --> 00:23:51,389
to ever work for C++ I don't think it

00:23:48,840 --> 00:23:54,749
will I don't think it's ever possible to

00:23:51,389 --> 00:23:57,330
get a binary built on Ubuntu 1604 and to

00:23:54,749 --> 00:24:00,179
get that binary transferred to Debian 8

00:23:57,330 --> 00:24:01,830
and to have that just work I tried a lot

00:24:00,179 --> 00:24:04,440
and I couldn't get it to work ever if

00:24:01,830 --> 00:24:09,050
anybody has got it to work I'd be happy

00:24:04,440 --> 00:24:11,520
to know what you guys did okay

00:24:09,050 --> 00:24:14,970
so that's it for the anti panis I just

00:24:11,520 --> 00:24:17,430
want to go ahead and recap that a lot of

00:24:14,970 --> 00:24:18,720
things just work locally by accident

00:24:17,430 --> 00:24:22,530
because we're running in the same

00:24:18,720 --> 00:24:24,810
environment in both cases but but in

00:24:22,530 --> 00:24:27,720
general if you're doing basil clean this

00:24:24,810 --> 00:24:30,420
this is just a symptom of having

00:24:27,720 --> 00:24:32,220
problems that you could you you should

00:24:30,420 --> 00:24:34,650
be solving and if you're just looking at

00:24:32,220 --> 00:24:37,890
remote caching this is also gonna be a

00:24:34,650 --> 00:24:39,840
problem to you I just spoke earlier

00:24:37,890 --> 00:24:42,420
today with somebody who's got a poison

00:24:39,840 --> 00:24:45,090
remote cache because of some symlinks

00:24:42,420 --> 00:24:47,730
that tensorflow is building I'm not

00:24:45,090 --> 00:24:50,070
surprised at all with remote execution

00:24:47,730 --> 00:24:56,370
all of these problems will become hard

00:24:50,070 --> 00:24:58,560
failures and yes let's fix them all so

00:24:56,370 --> 00:25:00,540
yes using remote execution requires your

00:24:58,560 --> 00:25:03,060
bills to be a schematic as they can be

00:25:00,540 --> 00:25:05,970
and also this this does take some effort

00:25:03,060 --> 00:25:07,800
to get it working it's good your build

00:25:05,970 --> 00:25:09,690
will be better in the end right you will

00:25:07,800 --> 00:25:13,470
be having less developers complaining

00:25:09,690 --> 00:25:15,060
about having to do basically ok so

00:25:13,470 --> 00:25:17,040
before we go to questions I have a

00:25:15,060 --> 00:25:19,440
couple of links here to point you guys

00:25:17,040 --> 00:25:22,350
to the first one remote execution rules

00:25:19,440 --> 00:25:24,450
is a summary of some of these centric

00:25:22,350 --> 00:25:26,670
patterns that we talked about the second

00:25:24,450 --> 00:25:28,800
one is about remote execution about

00:25:26,670 --> 00:25:30,480
using the local darker sandbox to verify

00:25:28,800 --> 00:25:33,270
if your build will work with remote

00:25:30,480 --> 00:25:36,900
execution and if you're a rule owner we

00:25:33,270 --> 00:25:39,390
just published yesterday in basil Docs a

00:25:36,900 --> 00:25:42,180
new document so that you can set up your

00:25:39,390 --> 00:25:45,300
CI if you're on github and you're a part

00:25:42,180 --> 00:25:47,550
of the basal Oregon github you should be

00:25:45,300 --> 00:25:50,100
very it should be very simple to just

00:25:47,550 --> 00:25:52,350
set up your CI with Belle kite to run

00:25:50,100 --> 00:25:54,930
some targets with the more execution so

00:25:52,350 --> 00:25:56,310
that you can start progressively making

00:25:54,930 --> 00:25:58,290
your rules work better with more

00:25:56,310 --> 00:26:00,600
execution if you're a rule nerd please

00:25:58,290 --> 00:26:03,120
check this out come talk to me I am

00:26:00,600 --> 00:26:04,440
happy to help you get your rules working

00:26:03,120 --> 00:26:06,510
with the mod execution I think we have

00:26:04,440 --> 00:26:09,060
around eight or nine rules that are

00:26:06,510 --> 00:26:12,000
currently running with build Khaitan

00:26:09,060 --> 00:26:13,650
remote execution on every on every PR so

00:26:12,000 --> 00:26:15,240
we're really happy that these rules are

00:26:13,650 --> 00:26:18,260
now fully compatible with more execution

00:26:15,240 --> 00:26:20,730
and we want every single rule to work

00:26:18,260 --> 00:26:22,790
cool

00:26:20,730 --> 00:26:22,790

YouTube URL: https://www.youtube.com/watch?v=C8wHmIln--g


