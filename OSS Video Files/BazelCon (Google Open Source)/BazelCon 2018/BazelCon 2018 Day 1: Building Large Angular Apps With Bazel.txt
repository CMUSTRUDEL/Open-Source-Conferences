Title: BazelCon 2018 Day 1: Building Large Angular Apps With Bazel
Publication date: 2018-11-01
Playlist: BazelCon 2018
Description: 
	Alex Eagle (Angular) event: Bazelcon 2018; re_ty: Publish; product: Open Source - General; fullname: Alex Eagle;
Captions: 
	00:00:02,580 --> 00:00:06,509
hi so yeah my name is Alex Eagle I work

00:00:05,340 --> 00:00:09,930
on the angular team I worked there for

00:00:06,509 --> 00:00:11,400
about four years I'm the lead of what we

00:00:09,930 --> 00:00:13,380
call the angular tooling team so we've

00:00:11,400 --> 00:00:15,210
split the angular up into one group

00:00:13,380 --> 00:00:16,740
works on the framework itself one group

00:00:15,210 --> 00:00:18,660
actually supports typescript internally

00:00:16,740 --> 00:00:19,980
at Google one group works on our

00:00:18,660 --> 00:00:21,900
material design components and then the

00:00:19,980 --> 00:00:23,939
tooling team owns things like angular

00:00:21,900 --> 00:00:25,800
CLI the command-line interface this is

00:00:23,939 --> 00:00:27,779
the tool that most angular developers

00:00:25,800 --> 00:00:29,369
out in the wild used to both create and

00:00:27,779 --> 00:00:32,160
then build and serve their angular apps

00:00:29,369 --> 00:00:33,420
and our team also owns the Google

00:00:32,160 --> 00:00:35,970
internal tool chain for building angular

00:00:33,420 --> 00:00:36,989
apps and my mission in life for the last

00:00:35,970 --> 00:00:38,790
couple of years has been to try to

00:00:36,989 --> 00:00:40,879
converge these two things and obviously

00:00:38,790 --> 00:00:43,339
basil is right at the center of that so

00:00:40,879 --> 00:00:45,809
prior to working on angular actually

00:00:43,339 --> 00:00:48,059
worked on Google's continuous build and

00:00:45,809 --> 00:00:51,180
testing systems and was one of the first

00:00:48,059 --> 00:00:54,720
people together with with Peter Epstein

00:00:51,180 --> 00:00:57,449
we wrote the first build event protocol

00:00:54,720 --> 00:00:59,339
in basil so I've had some history with

00:00:57,449 --> 00:01:00,900
the project too and so I'm really glad

00:00:59,339 --> 00:01:03,360
to be able to do basil stuff and angular

00:01:00,900 --> 00:01:05,519
stuff at the same time so I have been

00:01:03,360 --> 00:01:08,370
Posture syndrome hopefully a lot of you

00:01:05,519 --> 00:01:09,330
do too and so I'm never I'm not sure

00:01:08,370 --> 00:01:10,860
what like why I belong at this

00:01:09,330 --> 00:01:14,930
conference like web development that

00:01:10,860 --> 00:01:17,160
doesn't even seem very hard right and

00:01:14,930 --> 00:01:18,510
it's true that you can learn HTML in

00:01:17,160 --> 00:01:19,920
five minutes this is a YouTube video I

00:01:18,510 --> 00:01:21,000
won't play it because I don't have the

00:01:19,920 --> 00:01:23,670
extra five minutes but you could learn

00:01:21,000 --> 00:01:25,200
HTML in this talk and then and then

00:01:23,670 --> 00:01:27,120
after you've learned HTML you get win

00:01:25,200 --> 00:01:28,560
FTP I don't know how many of you did

00:01:27,120 --> 00:01:31,140
this I did this when I started doing

00:01:28,560 --> 00:01:32,700
development a long time ago so you just

00:01:31,140 --> 00:01:35,490
edit the files and then the website is

00:01:32,700 --> 00:01:37,770
updated and it sounds like a joke but

00:01:35,490 --> 00:01:39,800
what front-end developers are more

00:01:37,770 --> 00:01:41,280
junior on average than other developers

00:01:39,800 --> 00:01:43,650
they're paid less

00:01:41,280 --> 00:01:44,909
according to Stack Overflow so you might

00:01:43,650 --> 00:01:46,440
be forgiven for thinking well web

00:01:44,909 --> 00:01:48,030
development sounds kind of easy the more

00:01:46,440 --> 00:01:50,540
junior people work on it I don't need to

00:01:48,030 --> 00:01:54,060
work on this as a more senior developer

00:01:50,540 --> 00:01:56,400
so it just looks easy and of course it's

00:01:54,060 --> 00:01:58,470
not true so then when you peel back the

00:01:56,400 --> 00:02:00,030
covers a little bit I love this so I

00:01:58,470 --> 00:02:01,170
read the book on the left I have the

00:02:00,030 --> 00:02:03,450
book on the right I would never bother

00:02:01,170 --> 00:02:04,830
reading that so it makes you wonder how

00:02:03,450 --> 00:02:08,700
many like the bad parts seem like it's

00:02:04,830 --> 00:02:12,540
80% of JavaScript and that you know

00:02:08,700 --> 00:02:14,190
that's the perception for sure so

00:02:12,540 --> 00:02:15,450
javascript has a lot of super weird

00:02:14,190 --> 00:02:15,870
semantics and you can go through a whole

00:02:15,450 --> 00:02:18,510
list

00:02:15,870 --> 00:02:20,310
this is WTF J s seem like a nice

00:02:18,510 --> 00:02:23,129
synopsis of some of them for example not

00:02:20,310 --> 00:02:23,940
a number is not not a number they're not

00:02:23,129 --> 00:02:25,080
equal

00:02:23,940 --> 00:02:26,129
and of course triple equals are

00:02:25,080 --> 00:02:27,629
different from double equals in

00:02:26,129 --> 00:02:28,890
JavaScript in a lot of tricky cases so

00:02:27,629 --> 00:02:31,379
like all this stuff it just sounds crazy

00:02:28,890 --> 00:02:33,540
and then you look at the fragmentation

00:02:31,379 --> 00:02:35,180
of the front-end ecosystem so web

00:02:33,540 --> 00:02:38,280
developers you know you learn HTML CSS

00:02:35,180 --> 00:02:39,690
JavaScript you're on your way but then

00:02:38,280 --> 00:02:42,360
there's this much longer path it doesn't

00:02:39,690 --> 00:02:44,670
fit on one slide so this is the second

00:02:42,360 --> 00:02:46,230
half of it and angular is just one box

00:02:44,670 --> 00:02:48,720
in here and angular is you know by

00:02:46,230 --> 00:02:50,549
itself a quite a large thing to learn so

00:02:48,720 --> 00:02:52,980
I don't I think nobody learns all of the

00:02:50,549 --> 00:02:55,379
things on this chart so web development

00:02:52,980 --> 00:02:57,060
is this big crazy world it also has some

00:02:55,379 --> 00:02:59,970
questionable engineering practices so

00:02:57,060 --> 00:03:02,129
there was the left pad disaster of 2017

00:02:59,970 --> 00:03:03,870
left pad is is literally this is the

00:03:02,129 --> 00:03:05,940
file okay this is the code it's a little

00:03:03,870 --> 00:03:06,989
utility function that takes a string and

00:03:05,940 --> 00:03:08,250
gives you back something of a fixed

00:03:06,989 --> 00:03:10,109
width by padding some things on the left

00:03:08,250 --> 00:03:12,629
side this is how you'd use it you would

00:03:10,109 --> 00:03:14,549
require left pad the require here is the

00:03:12,629 --> 00:03:15,659
tray is the problem because you're not

00:03:14,549 --> 00:03:16,680
going to copy this code into your

00:03:15,659 --> 00:03:19,170
project you're gonna have it be an

00:03:16,680 --> 00:03:20,819
external dependency just to get this

00:03:19,170 --> 00:03:22,739
function and then what happened was

00:03:20,819 --> 00:03:24,419
somebody unpublished left pad from NPM

00:03:22,739 --> 00:03:26,730
which is the package repository that

00:03:24,419 --> 00:03:28,220
everybody uses for that for both front

00:03:26,730 --> 00:03:30,630
and end back end JavaScript development

00:03:28,220 --> 00:03:31,829
and it made it you know it was a news

00:03:30,630 --> 00:03:33,480
story of the day because basically

00:03:31,829 --> 00:03:34,980
nobody's JavaScript builds would work

00:03:33,480 --> 00:03:36,269
because it's a transitive dependency

00:03:34,980 --> 00:03:38,040
it's not that everybody was using this

00:03:36,269 --> 00:03:39,599
little library function but it was

00:03:38,040 --> 00:03:43,079
dependent on by enough of the tooling

00:03:39,599 --> 00:03:45,060
that everybody uses so now it just looks

00:03:43,079 --> 00:03:46,560
unappealing and now you just want to

00:03:45,060 --> 00:03:47,819
turn your heads and not and not look at

00:03:46,560 --> 00:03:50,340
what the front-end developers are doing

00:03:47,819 --> 00:03:52,829
on your team I should I should ask how

00:03:50,340 --> 00:03:55,199
many people do web development here just

00:03:52,829 --> 00:03:59,010
ok that's what I was hoping so for most

00:03:55,199 --> 00:04:02,209
of you this is you you don't know any

00:03:59,010 --> 00:04:02,209
better so what I'm saying sounds true

00:04:03,450 --> 00:04:09,190
so so let me let me run through the ways

00:04:06,250 --> 00:04:11,140
in which it's actually hard so there are

00:04:09,190 --> 00:04:12,340
a lot of limitations because we're

00:04:11,140 --> 00:04:14,610
targeting browsers we're targeting a lot

00:04:12,340 --> 00:04:16,989
of different runtimes actually so

00:04:14,610 --> 00:04:18,790
browsers can natively load JavaScript

00:04:16,989 --> 00:04:20,560
modules which is to say individual files

00:04:18,790 --> 00:04:22,660
but not that many of them before it

00:04:20,560 --> 00:04:24,190
becomes a performance problem and even

00:04:22,660 --> 00:04:25,450
before browsers had native support for

00:04:24,190 --> 00:04:27,250
this there are a lot of client slide

00:04:25,450 --> 00:04:29,110
libraries like System j/s that can load

00:04:27,250 --> 00:04:30,970
javascript dynamically but again you

00:04:29,110 --> 00:04:31,720
can't you can't ship thousands of files

00:04:30,970 --> 00:04:33,460
to the browser

00:04:31,720 --> 00:04:34,810
which means you could develop your whole

00:04:33,460 --> 00:04:36,820
app is one javascript file a lot of

00:04:34,810 --> 00:04:38,050
people do that and then you break it up

00:04:36,820 --> 00:04:40,030
into a few files and you get to a point

00:04:38,050 --> 00:04:42,340
where it doesn't perform so now you now

00:04:40,030 --> 00:04:43,840
you need a build system in order to

00:04:42,340 --> 00:04:47,680
bundle together all of your sources to

00:04:43,840 --> 00:04:49,540
be in one script now what users actually

00:04:47,680 --> 00:04:50,650
one on the web is we don't want to

00:04:49,540 --> 00:04:51,790
download all that JavaScript at the

00:04:50,650 --> 00:04:53,830
beginning they want to download it as

00:04:51,790 --> 00:04:55,180
they navigate the application and so you

00:04:53,830 --> 00:04:56,290
need a build system again because what

00:04:55,180 --> 00:04:58,480
you want to do is take that big bundle

00:04:56,290 --> 00:05:00,160
split it into chunks and then you want

00:04:58,480 --> 00:05:01,510
to be really sophisticated you want to

00:05:00,160 --> 00:05:02,860
avoid downloading code that you don't

00:05:01,510 --> 00:05:05,440
need but you also don't want to download

00:05:02,860 --> 00:05:07,360
code twice and so finding an optimal

00:05:05,440 --> 00:05:13,870
partitioning of the code is a tricky

00:05:07,360 --> 00:05:15,220
problem this is this is fake but this is

00:05:13,870 --> 00:05:17,560
I'm just trying to demonstrate here that

00:05:15,220 --> 00:05:19,330
like what what web developers are trying

00:05:17,560 --> 00:05:21,040
to do is actually pretty novel which is

00:05:19,330 --> 00:05:22,750
like I want I want my application just

00:05:21,040 --> 00:05:24,250
pop up I never downloaded anything I

00:05:22,750 --> 00:05:25,300
want to be super fast but then as I

00:05:24,250 --> 00:05:26,890
start navigating through it it should

00:05:25,300 --> 00:05:28,690
feel like a real desktop application so

00:05:26,890 --> 00:05:30,760
it's it's like legitimately hard problem

00:05:28,690 --> 00:05:32,620
I don't know how many of you did like

00:05:30,760 --> 00:05:34,660
Java back when OSGi was trying to do

00:05:32,620 --> 00:05:35,950
like dynamic shipping modules like you

00:05:34,660 --> 00:05:37,810
know bringing up new jars in the in the

00:05:35,950 --> 00:05:39,100
class loader never never seem to work

00:05:37,810 --> 00:05:40,780
very well in Java I know at Google we

00:05:39,100 --> 00:05:45,490
just shipped three gigabyte binaries

00:05:40,780 --> 00:05:47,950
always to our servers because we can so

00:05:45,490 --> 00:05:49,660
so users are on slow connections we're

00:05:47,950 --> 00:05:53,050
trying to target low-end devices in

00:05:49,660 --> 00:05:54,310
emerging markets like India so we need

00:05:53,050 --> 00:05:55,570
to be able to make our binaries really

00:05:54,310 --> 00:05:58,020
small so we run pretty sophisticated

00:05:55,570 --> 00:06:00,400
minifiers

00:05:58,020 --> 00:06:02,020
the closure compiler which is the one we

00:06:00,400 --> 00:06:03,640
use at Google is very sophisticated and

00:06:02,020 --> 00:06:06,400
can rename properties and then like

00:06:03,640 --> 00:06:07,600
update that all the references and this

00:06:06,400 --> 00:06:08,740
is so this can interact with your code

00:06:07,600 --> 00:06:10,120
splitter because you have to rename a

00:06:08,740 --> 00:06:11,440
property the same way in the code that

00:06:10,120 --> 00:06:14,800
you load on at the beginning of that you

00:06:11,440 --> 00:06:16,000
do as the user starts to navigate you

00:06:14,800 --> 00:06:17,410
probably want to type safety

00:06:16,000 --> 00:06:18,580
Syrio basil comment I talked about type

00:06:17,410 --> 00:06:21,490
scripts I won't talk about it much today

00:06:18,580 --> 00:06:23,140
but it gives you the the type safety

00:06:21,490 --> 00:06:25,390
that you would expect as a if you came

00:06:23,140 --> 00:06:26,860
from a language that has that obviously

00:06:25,390 --> 00:06:28,300
helps you find bugs and helps you write

00:06:26,860 --> 00:06:29,560
tooling and it makes your editor just

00:06:28,300 --> 00:06:31,150
amazing because it always knows what

00:06:29,560 --> 00:06:32,680
you're doing so this means now we need

00:06:31,150 --> 00:06:35,890
the build system to do another job which

00:06:32,680 --> 00:06:38,440
is to run the types of compiler same

00:06:35,890 --> 00:06:40,600
thing happens for CSS CSS is pretty

00:06:38,440 --> 00:06:42,130
verbose it's not very ergonomic to write

00:06:40,600 --> 00:06:43,840
that tends to be very repetitive so

00:06:42,130 --> 00:06:46,720
developers like to use a preprocessor

00:06:43,840 --> 00:06:49,360
like sass so the build system needs to

00:06:46,720 --> 00:06:51,070
run that to derive CSS files angular

00:06:49,360 --> 00:06:52,840
itself has a compiler so we have this

00:06:51,070 --> 00:06:54,640
inside of your HTML you can write

00:06:52,840 --> 00:06:56,260
expressions that are evaluated to do

00:06:54,640 --> 00:06:59,110
data binding and event handling and make

00:06:56,260 --> 00:07:01,570
your page live so the build system needs

00:06:59,110 --> 00:07:03,730
to run that compiler to produce this

00:07:01,570 --> 00:07:07,770
really it's fancy form of JavaScript

00:07:03,730 --> 00:07:10,390
that the angular compiler produces so

00:07:07,770 --> 00:07:12,190
it's this is those were the easy things

00:07:10,390 --> 00:07:14,350
that most web developers know how to do

00:07:12,190 --> 00:07:16,240
today I think and are using tooling to

00:07:14,350 --> 00:07:17,290
do those things but it's getting more

00:07:16,240 --> 00:07:19,030
and more challenging because we're

00:07:17,290 --> 00:07:21,100
pushing the limits of of what we can do

00:07:19,030 --> 00:07:23,470
on the web and the capabilities of

00:07:21,100 --> 00:07:24,850
browsers are increasing a lot so here's

00:07:23,470 --> 00:07:26,800
some new things that are coming so

00:07:24,850 --> 00:07:29,620
custom elements is a way to have a tag

00:07:26,800 --> 00:07:31,450
in HTML that you can teach the browser

00:07:29,620 --> 00:07:32,800
like what to do and you just like this

00:07:31,450 --> 00:07:35,110
tag would come along with a small bit of

00:07:32,800 --> 00:07:36,100
custom JavaScript that custom JavaScript

00:07:35,110 --> 00:07:39,010
in order to interact with the browser

00:07:36,100 --> 00:07:40,750
really needs to be using the es2015

00:07:39,010 --> 00:07:42,490
syntax I'm not going to go into the

00:07:40,750 --> 00:07:43,630
difference but basically in JavaScript

00:07:42,490 --> 00:07:45,580
you now have a class keyword that we

00:07:43,630 --> 00:07:47,470
didn't used to have and custom elements

00:07:45,580 --> 00:07:48,790
relies on that so the build system if

00:07:47,470 --> 00:07:50,140
you want to use these custom elements

00:07:48,790 --> 00:07:51,669
you you first of all need to take the

00:07:50,140 --> 00:07:53,140
code that backs this date picker and

00:07:51,669 --> 00:07:54,250
bundle it into a separate JavaScript

00:07:53,140 --> 00:07:56,470
bundle from the rest of your application

00:07:54,250 --> 00:07:57,430
and it should use this different syntax

00:07:56,470 --> 00:08:01,540
and so now you might have two different

00:07:57,430 --> 00:08:03,280
flavors of output from your build UIs

00:08:01,540 --> 00:08:04,540
can be multi-threaded I remember trying

00:08:03,280 --> 00:08:07,870
to figure out swing worker a long time

00:08:04,540 --> 00:08:09,310
ago in Java most web developers are not

00:08:07,870 --> 00:08:10,479
doing multi-threaded UI's today but they

00:08:09,310 --> 00:08:11,860
certainly could be and there's a lot of

00:08:10,479 --> 00:08:14,590
places where you have like an expensive

00:08:11,860 --> 00:08:16,030
service call or you have like image

00:08:14,590 --> 00:08:18,010
manipulation there's a lot of use cases

00:08:16,030 --> 00:08:19,240
where where more threads are helpful and

00:08:18,010 --> 00:08:21,850
of course all of our devices are

00:08:19,240 --> 00:08:23,919
becoming multi-core JavaScript by

00:08:21,850 --> 00:08:27,010
default as probably some of you know is

00:08:23,919 --> 00:08:29,140
single threaded it's horrifying

00:08:27,010 --> 00:08:29,920
so browsers have have this API where you

00:08:29,140 --> 00:08:31,810
say a new

00:08:29,920 --> 00:08:33,670
worker and you handed a JavaScript URI

00:08:31,810 --> 00:08:35,110
and it's gonna go fetch that so in order

00:08:33,670 --> 00:08:36,880
for that to work at runtime your build

00:08:35,110 --> 00:08:38,260
system again needs to figure out okay

00:08:36,880 --> 00:08:39,370
which which of the API calls that I'm

00:08:38,260 --> 00:08:41,020
making can be on a separate thread

00:08:39,370 --> 00:08:42,790
whichever way the developer expresses

00:08:41,020 --> 00:08:44,170
that intent and then that needs to get

00:08:42,790 --> 00:08:47,620
packaged up into a separate script and

00:08:44,170 --> 00:08:49,390
be and be available at runtime offline

00:08:47,620 --> 00:08:50,950
support and push notifications this is

00:08:49,390 --> 00:08:53,620
all sort of bundled under the

00:08:50,950 --> 00:08:55,540
progressive web application umbrella

00:08:53,620 --> 00:08:57,550
which the Google Chrome team is doing a

00:08:55,540 --> 00:09:00,340
good job of evangelizing so a

00:08:57,550 --> 00:09:01,810
serviceworker is this thing that it runs

00:09:00,340 --> 00:09:04,270
in the browser even if your page isn't

00:09:01,810 --> 00:09:05,470
there and it can intercept network

00:09:04,270 --> 00:09:06,970
requests which means that it can make

00:09:05,470 --> 00:09:09,010
your page be offline so if you want to

00:09:06,970 --> 00:09:10,570
have offline support it can also notify

00:09:09,010 --> 00:09:11,710
the user about something that happened

00:09:10,570 --> 00:09:12,850
in your application even if they don't

00:09:11,710 --> 00:09:15,970
have your webpage loaded in the browser

00:09:12,850 --> 00:09:17,290
at the time so again the build system is

00:09:15,970 --> 00:09:18,610
involved we need to create a separate JS

00:09:17,290 --> 00:09:20,530
bundle for this and it also requires

00:09:18,610 --> 00:09:21,220
this descriptor that that tells the

00:09:20,530 --> 00:09:24,190
serviceworker

00:09:21,220 --> 00:09:26,170
what URI is to intercept and also you

00:09:24,190 --> 00:09:28,960
can you can ship some resources into the

00:09:26,170 --> 00:09:31,420
serviceworker and an example of this of

00:09:28,960 --> 00:09:34,750
one of those is an application style so

00:09:31,420 --> 00:09:35,920
if you install a serviceworker you now

00:09:34,750 --> 00:09:37,330
have a little daemon running on the

00:09:35,920 --> 00:09:38,770
person's machine and so you can store

00:09:37,330 --> 00:09:41,110
things there even when they're offline

00:09:38,770 --> 00:09:42,850
and so one of the things you store is

00:09:41,110 --> 00:09:45,100
the what the what your UI will look like

00:09:42,850 --> 00:09:47,560
without the actual content in it so just

00:09:45,100 --> 00:09:49,990
like the the nav and the the chrome

00:09:47,560 --> 00:09:52,450
around the app so if you go back to this

00:09:49,990 --> 00:09:54,430
site that immediately shows up an

00:09:52,450 --> 00:09:56,440
angular Daioh if you're curious how this

00:09:54,430 --> 00:09:57,850
looks is actually using most of these

00:09:56,440 --> 00:09:59,530
techniques so if you look at angular do

00:09:57,850 --> 00:10:00,580
on your phone and then your offline in

00:09:59,530 --> 00:10:03,940
the subway like you can still navigate

00:10:00,580 --> 00:10:07,480
the docs it's pretty cool but yeah built

00:10:03,940 --> 00:10:09,970
system required in particular with the

00:10:07,480 --> 00:10:11,290
build system has to do here is it like

00:10:09,970 --> 00:10:12,460
there will be a section in your HTML

00:10:11,290 --> 00:10:13,930
where you just say loading because the

00:10:12,460 --> 00:10:17,320
JavaScript is supposed to take over and

00:10:13,930 --> 00:10:18,430
render your page and so what the what

00:10:17,320 --> 00:10:19,990
you need to do in the build system is

00:10:18,430 --> 00:10:22,450
actually boot up the web framework

00:10:19,990 --> 00:10:24,280
whatever it is do that initial rendering

00:10:22,450 --> 00:10:25,720
dump out the HTML and CSS that it

00:10:24,280 --> 00:10:28,180
created and then replace that into the

00:10:25,720 --> 00:10:30,190
index.html that you end up shipping in

00:10:28,180 --> 00:10:31,060
your app so that's pretty complicated

00:10:30,190 --> 00:10:34,480
now you have to run a web framework

00:10:31,060 --> 00:10:36,610
inside of your build system and then of

00:10:34,480 --> 00:10:39,940
course the full stack story is a place

00:10:36,610 --> 00:10:41,260
where basil is super useful most web

00:10:39,940 --> 00:10:43,290
apps as far as I can tell from talking

00:10:41,260 --> 00:10:45,329
to some of our users they just assume

00:10:43,290 --> 00:10:47,100
when they make an API call the JSON that

00:10:45,329 --> 00:10:48,480
comes back they can just dot off of it

00:10:47,100 --> 00:10:50,490
with the following properties and it's

00:10:48,480 --> 00:10:52,620
all hard-coded which makes it really

00:10:50,490 --> 00:10:55,949
hard to change that API that Google were

00:10:52,620 --> 00:10:57,480
obsessed with with changing things so we

00:10:55,949 --> 00:10:58,889
make we make a lot of use of the fact

00:10:57,480 --> 00:11:00,420
that if you if you if you change a

00:10:58,889 --> 00:11:01,860
protocol buffer you find out that some

00:11:00,420 --> 00:11:03,930
front-end code needs to change along

00:11:01,860 --> 00:11:05,699
with it you find that out very quickly

00:11:03,930 --> 00:11:07,139
so it allows us to and we can also do

00:11:05,699 --> 00:11:09,029
the sort of integration testing so that

00:11:07,139 --> 00:11:10,319
we can bring up the web app with its

00:11:09,029 --> 00:11:12,269
server and see that the two things are

00:11:10,319 --> 00:11:13,440
able to communicate so now we want the

00:11:12,269 --> 00:11:14,639
build system to help us with the front

00:11:13,440 --> 00:11:18,480
end and the back end sharing the type

00:11:14,639 --> 00:11:21,480
information so I think there are more of

00:11:18,480 --> 00:11:23,459
these but that's enough time for that

00:11:21,480 --> 00:11:24,540
so web development is hard we have to

00:11:23,459 --> 00:11:27,449
run all of these things in the build

00:11:24,540 --> 00:11:32,610
system and it's getting harder so what

00:11:27,449 --> 00:11:35,130
do people do the tools today are solving

00:11:32,610 --> 00:11:37,860
a lot of these problems but I think it's

00:11:35,130 --> 00:11:39,750
not layered correctly so what happens is

00:11:37,860 --> 00:11:40,889
users will solve that first problem I

00:11:39,750 --> 00:11:43,470
mentioned where they have a bunch of

00:11:40,889 --> 00:11:44,759
JavaScript files and it's too slow to

00:11:43,470 --> 00:11:47,370
run it in the browser and so somebody

00:11:44,759 --> 00:11:51,089
says hey your website would be faster if

00:11:47,370 --> 00:11:53,370
you ran this tool on your website using

00:11:51,089 --> 00:11:54,750
very vague terms like that so browserify

00:11:53,370 --> 00:11:56,790
web pack and roll-up are the three most

00:11:54,750 --> 00:11:58,260
popular tools that do this

00:11:56,790 --> 00:11:59,310
it could be just squashing all your

00:11:58,260 --> 00:12:00,480
JavaScript together but they may

00:11:59,310 --> 00:12:02,519
actually have a harder job if you're

00:12:00,480 --> 00:12:04,649
using module syntax inside of the

00:12:02,519 --> 00:12:05,699
JavaScript files then the those files

00:12:04,649 --> 00:12:07,019
are aware that they're meant to be

00:12:05,699 --> 00:12:08,069
separate entities when you squash them

00:12:07,019 --> 00:12:09,720
all together you may have to rewrite

00:12:08,069 --> 00:12:14,459
some of the module syntax so if they

00:12:09,720 --> 00:12:16,050
appear to be a single module so then

00:12:14,459 --> 00:12:17,370
what happens when you want to add let's

00:12:16,050 --> 00:12:19,139
say you want to start writing your code

00:12:17,370 --> 00:12:22,260
in typescript instead so the natural

00:12:19,139 --> 00:12:24,630
thing the evolution was so each of those

00:12:22,260 --> 00:12:26,550
three tools has plugins and so for each

00:12:24,630 --> 00:12:29,100
of the popular bundlers for each of the

00:12:26,550 --> 00:12:30,750
languages somebody says oh I can become

00:12:29,100 --> 00:12:32,550
mildly famous on github so I can write

00:12:30,750 --> 00:12:34,589
this plug-in for this thing so that now

00:12:32,550 --> 00:12:36,000
that and for some languages like type

00:12:34,589 --> 00:12:38,699
suit there are several different plugins

00:12:36,000 --> 00:12:40,079
to choose from and so that that just

00:12:38,699 --> 00:12:41,310
plugs into the bundler and so when it's

00:12:40,079 --> 00:12:42,600
when it's doing its job it just runs

00:12:41,310 --> 00:12:44,069
this extra step along the way and of

00:12:42,600 --> 00:12:47,310
course this is accidentally becoming a

00:12:44,069 --> 00:12:48,660
built system but it's not it doesn't

00:12:47,310 --> 00:12:51,930
have the properties that you're familiar

00:12:48,660 --> 00:12:54,300
with in basil for example the plugins

00:12:51,930 --> 00:12:55,889
are basically the plug-in API is not

00:12:54,300 --> 00:12:57,209
that sophisticated and so plugins can

00:12:55,889 --> 00:12:58,980
interact with each other in a weird way

00:12:57,209 --> 00:13:00,300
you run the CSS one first and then you

00:12:58,980 --> 00:13:01,649
run the the one that's supposed to

00:13:00,300 --> 00:13:02,429
produce the app shell and it turns out

00:13:01,649 --> 00:13:04,410
you're supposed to do them in the other

00:13:02,429 --> 00:13:07,110
order and then they step on each other

00:13:04,410 --> 00:13:08,579
and so it's if this is really tough and

00:13:07,110 --> 00:13:11,519
this is basically the way that angler

00:13:08,579 --> 00:13:13,699
development is done today so what we

00:13:11,519 --> 00:13:16,050
think we can we think we could do better

00:13:13,699 --> 00:13:18,689
the build tool as I as I think I've

00:13:16,050 --> 00:13:21,059
argued is really core to being able to

00:13:18,689 --> 00:13:22,410
do these hard things to deliver the kind

00:13:21,059 --> 00:13:25,410
of user experiences that we want from

00:13:22,410 --> 00:13:28,290
web apps and so since most of you are

00:13:25,410 --> 00:13:31,259
not web developers one takeaway I'd like

00:13:28,290 --> 00:13:32,699
you to have is that this please please

00:13:31,259 --> 00:13:34,050
don't just turn your turn away and say

00:13:32,699 --> 00:13:35,730
javascript looks gross the front end

00:13:34,050 --> 00:13:37,860
people on my company you're doing

00:13:35,730 --> 00:13:38,970
something and and it's not the same

00:13:37,860 --> 00:13:40,649
thing I would do but I don't want to

00:13:38,970 --> 00:13:42,809
want to get involved because then you

00:13:40,649 --> 00:13:46,679
know then I'll be involved so I'm hoping

00:13:42,809 --> 00:13:48,149
that you'll get involved and and and

00:13:46,679 --> 00:13:50,089
that having your front-end team use

00:13:48,149 --> 00:13:52,619
basil is a great way to start you know

00:13:50,089 --> 00:13:56,129
start start bringing them into into all

00:13:52,619 --> 00:14:01,290
of you the practices that you do so I'm

00:13:56,129 --> 00:14:02,459
gonna spend some time just sort of what

00:14:01,290 --> 00:14:04,019
are some of the building blocks

00:14:02,459 --> 00:14:06,569
basically introduce the rule steps that

00:14:04,019 --> 00:14:08,309
are involved this is this is pretty

00:14:06,569 --> 00:14:09,899
basil specific hopefully it's

00:14:08,309 --> 00:14:11,639
interesting a little bit of design

00:14:09,899 --> 00:14:13,470
because we've just finished a redesign

00:14:11,639 --> 00:14:16,019
of this which I'm kind of happy about so

00:14:13,470 --> 00:14:17,610
rules nodejs so does everybody know what

00:14:16,019 --> 00:14:20,279
node is this is a way to run JavaScript

00:14:17,610 --> 00:14:21,660
on the server but since all of the build

00:14:20,279 --> 00:14:23,309
tooling in front-end is written in

00:14:21,660 --> 00:14:24,899
JavaScript or typescript and transpile

00:14:23,309 --> 00:14:26,660
the JavaScript that means that we need

00:14:24,899 --> 00:14:29,399
to run javascript in the build system so

00:14:26,660 --> 00:14:33,240
no js' is the host is the runtime that

00:14:29,399 --> 00:14:34,529
allows us to do that so i'm gonna talk

00:14:33,240 --> 00:14:37,230
about a few different ways to wire this

00:14:34,529 --> 00:14:38,399
up the one I think for this audience

00:14:37,230 --> 00:14:40,040
that makes the most sense is you would

00:14:38,399 --> 00:14:43,799
install basil on your machine already

00:14:40,040 --> 00:14:44,970
and but you don't you work maybe across

00:14:43,799 --> 00:14:46,559
the full stack and you don't want to

00:14:44,970 --> 00:14:47,910
have to go go through a long readme and

00:14:46,559 --> 00:14:49,529
get your computer in a special state

00:14:47,910 --> 00:14:50,730
where it can build the front-end also so

00:14:49,529 --> 00:14:53,610
of course the whole tool chain should

00:14:50,730 --> 00:14:55,980
come down through basil so I have a I

00:14:53,610 --> 00:14:58,110
made a very short example here it's

00:14:55,980 --> 00:15:00,449
actually almost identical to what you

00:14:58,110 --> 00:15:02,879
will do if you take the bootcamp this

00:15:00,449 --> 00:15:04,499
afternoon or tomorrow which is just

00:15:02,879 --> 00:15:06,299
starting for basil I just need to fetch

00:15:04,499 --> 00:15:08,389
the typescript tool chain and I'll sort

00:15:06,299 --> 00:15:10,379
of show this over the next few slides

00:15:08,389 --> 00:15:11,010
you don't need to read all of this this

00:15:10,379 --> 00:15:14,520
is obviously

00:15:11,010 --> 00:15:15,810
chunk of workspace file we've tried to

00:15:14,520 --> 00:15:17,130
make this pretty short so in this case

00:15:15,810 --> 00:15:19,020
you're getting both the runtime and the

00:15:17,130 --> 00:15:22,860
types your compiler because I didn't

00:15:19,020 --> 00:15:24,300
feel like picking it apart so you just

00:15:22,860 --> 00:15:26,490
download your HTTP archive and then the

00:15:24,300 --> 00:15:28,440
rest of it is calling some star lark

00:15:26,490 --> 00:15:33,320
functions I have to remember to say it

00:15:28,440 --> 00:15:35,310
that way if I say sky thinks star I

00:15:33,320 --> 00:15:43,160
assume that's going to be a common thing

00:15:35,310 --> 00:15:45,360
today so right so so one of those steps

00:15:43,160 --> 00:15:47,730
one of the steps here was to quiz to

00:15:45,360 --> 00:15:50,850
call a helper that sets up the external

00:15:47,730 --> 00:15:53,220
repository called nodejs so this gives

00:15:50,850 --> 00:15:55,170
you just the the runtime and also the

00:15:53,220 --> 00:15:56,670
package managers so you get these labels

00:15:55,170 --> 00:15:59,130
that you can run so there's no js' yarn

00:15:56,670 --> 00:16:00,480
is is one package manager that we think

00:15:59,130 --> 00:16:02,310
is the best for downloading stuff it

00:16:00,480 --> 00:16:04,890
turns out the other package manager NPM

00:16:02,310 --> 00:16:05,970
is better for uploading stuff in the

00:16:04,890 --> 00:16:10,680
front of the ecosystem there's a lot of

00:16:05,970 --> 00:16:12,620
search this yeah it's it's pretty pretty

00:16:10,680 --> 00:16:14,880
diverse

00:16:12,620 --> 00:16:17,640
sorry we're supposed to use diverse for

00:16:14,880 --> 00:16:19,290
for a more important purpose today you

00:16:17,640 --> 00:16:21,000
can also you can also just run the

00:16:19,290 --> 00:16:23,640
package manager so this the second line

00:16:21,000 --> 00:16:25,020
is would let you do like basil run the

00:16:23,640 --> 00:16:26,730
package manager so that's important to

00:16:25,020 --> 00:16:29,070
add new dependencies and then you can

00:16:26,730 --> 00:16:30,510
access the node runtime users typically

00:16:29,070 --> 00:16:33,720
wouldn't wouldn't access these this is

00:16:30,510 --> 00:16:34,740
just part of the tool chain so and I use

00:16:33,720 --> 00:16:36,060
the word tool chain we're not actually

00:16:34,740 --> 00:16:38,220
using Basil's tool chain support this is

00:16:36,060 --> 00:16:39,990
just a regular repository rule that just

00:16:38,220 --> 00:16:42,450
downloads HTTP archive based on your

00:16:39,990 --> 00:16:45,450
platform there may still be needs to be

00:16:42,450 --> 00:16:47,280
some work there so now that we have the

00:16:45,450 --> 00:16:50,190
run time we need to fetch all of your

00:16:47,280 --> 00:16:52,850
dependencies like left pad so it's

00:16:50,190 --> 00:16:55,370
published again so you can do that again

00:16:52,850 --> 00:16:58,260
so there's this directory structure

00:16:55,370 --> 00:17:00,150
which is always called node underscore

00:16:58,260 --> 00:17:02,160
modules and the directory structure has

00:17:00,150 --> 00:17:06,470
to be in your project in order for most

00:17:02,160 --> 00:17:09,360
of the existing web tooling to work and

00:17:06,470 --> 00:17:11,880
the package the the runtime the node.js

00:17:09,360 --> 00:17:13,709
runtime when you when you load a module

00:17:11,880 --> 00:17:15,810
it actually looks at where it's being

00:17:13,709 --> 00:17:17,310
loaded from and based on where it being

00:17:15,810 --> 00:17:18,930
weird alerts loaded from it will give

00:17:17,310 --> 00:17:20,610
you the right version of that dependency

00:17:18,930 --> 00:17:21,750
for that load location which means you

00:17:20,610 --> 00:17:23,520
could have two different versions of the

00:17:21,750 --> 00:17:24,419
same library present and when one guy

00:17:23,520 --> 00:17:26,189
loads it he gets the one

00:17:24,419 --> 00:17:28,439
when this one loads it's the one that

00:17:26,189 --> 00:17:30,179
one needs so that's kind of complicated

00:17:28,439 --> 00:17:32,279
we can't actually model that with with

00:17:30,179 --> 00:17:35,100
with work space rules in Basel because

00:17:32,279 --> 00:17:36,840
they all have to have unique names so

00:17:35,100 --> 00:17:38,100
our solution and and also the the layout

00:17:36,840 --> 00:17:39,299
of this directory is very particular

00:17:38,100 --> 00:17:40,619
it's not worth trying to reproduce those

00:17:39,299 --> 00:17:42,629
semantics so what we do is we run the

00:17:40,619 --> 00:17:46,169
native package manager

00:17:42,629 --> 00:17:48,539
NPM our yarn are both both options and

00:17:46,169 --> 00:17:50,340
then we're gonna need a build rule so

00:17:48,539 --> 00:17:53,070
that when the build runs basil knows how

00:17:50,340 --> 00:17:54,149
to go find those files so that's the

00:17:53,070 --> 00:17:55,649
next step there are a couple of options

00:17:54,149 --> 00:17:58,289
one is that the user can manage the

00:17:55,649 --> 00:17:59,820
dependencies themselves and this is

00:17:58,289 --> 00:18:01,590
where we started because this is most

00:17:59,820 --> 00:18:02,609
typical to what web developers do today

00:18:01,590 --> 00:18:04,440
so they would run the package manager

00:18:02,609 --> 00:18:06,659
themself the special directory gets laid

00:18:04,440 --> 00:18:08,429
out in their workspace

00:18:06,659 --> 00:18:09,960
they use a dot git ignore and tell their

00:18:08,429 --> 00:18:12,840
editor to ignore it and if you know

00:18:09,960 --> 00:18:14,820
usual problems and then you could use

00:18:12,840 --> 00:18:15,960
just a file group rule in basil to grab

00:18:14,820 --> 00:18:18,690
up all the all the whole folder

00:18:15,960 --> 00:18:20,009
structure and typically the label you

00:18:18,690 --> 00:18:21,749
would use a slash slash colon node

00:18:20,009 --> 00:18:23,970
modules which is the default in some of

00:18:21,749 --> 00:18:25,259
the later rules will look for that so

00:18:23,970 --> 00:18:26,820
the advantage of doing it this way is

00:18:25,259 --> 00:18:28,679
that all of the existing tooling is

00:18:26,820 --> 00:18:30,359
looking for this special directory so

00:18:28,679 --> 00:18:31,830
for example your editor wants to show

00:18:30,359 --> 00:18:32,909
you red squigglies in your typescript

00:18:31,830 --> 00:18:33,989
code it needs to know which version of

00:18:32,909 --> 00:18:34,950
typescript you're using because the red

00:18:33,989 --> 00:18:37,139
squigglies changed a little bit over

00:18:34,950 --> 00:18:40,649
time and so it needs it looks in this

00:18:37,139 --> 00:18:42,179
location for it but of course having the

00:18:40,649 --> 00:18:43,830
developer manage this file group is a

00:18:42,179 --> 00:18:45,299
nightmare because spaces aren't legal in

00:18:43,830 --> 00:18:48,179
labels I think they may be becoming

00:18:45,299 --> 00:18:49,139
legal but like unicode characters are

00:18:48,179 --> 00:18:50,820
still not and so if you download

00:18:49,139 --> 00:18:52,139
packages from npm you'll find all this

00:18:50,820 --> 00:18:54,590
crazy stuff that you can't even make a

00:18:52,139 --> 00:18:58,470
label and basil or reference these files

00:18:54,590 --> 00:19:02,249
so the second option is to use the yarn

00:18:58,470 --> 00:19:04,019
install rule and so the name NPM here is

00:19:02,249 --> 00:19:06,629
gonna be the name of the repository for

00:19:04,019 --> 00:19:09,109
this crates and then we handed this

00:19:06,629 --> 00:19:13,259
package JSON file which is just the

00:19:09,109 --> 00:19:15,359
typical representation of what all of

00:19:13,259 --> 00:19:16,830
your dependencies are and then there's

00:19:15,359 --> 00:19:18,359
also this lock file that comes with yarn

00:19:16,830 --> 00:19:19,470
which pins you're transitive

00:19:18,359 --> 00:19:23,129
dependencies so we can try to make

00:19:19,470 --> 00:19:24,720
things for medic and then we using this

00:19:23,129 --> 00:19:26,129
rule that yarn install real basil will

00:19:24,720 --> 00:19:29,159
manage the dependencies for you so now

00:19:26,129 --> 00:19:30,269
it will install into the directory I

00:19:29,159 --> 00:19:31,499
don't know how many of you work on rule

00:19:30,269 --> 00:19:33,389
sets but you get really good at typing

00:19:31,499 --> 00:19:36,389
basil info output base lash external

00:19:33,389 --> 00:19:37,799
because you need that all the time and

00:19:36,389 --> 00:19:38,279
and what you get from the yarn install

00:19:37,799 --> 00:19:40,349
rule is fine

00:19:38,279 --> 00:19:43,200
Grainne dependencies this is really cool

00:19:40,349 --> 00:19:45,269
Paul Johnson here actually worked on a

00:19:43,200 --> 00:19:46,859
different set of rules for nodejs and

00:19:45,269 --> 00:19:48,509
because as melody said earlier we have

00:19:46,859 --> 00:19:50,460
this awesome open source ecosystem

00:19:48,509 --> 00:19:51,509
developing around Basel haven't looked

00:19:50,460 --> 00:19:53,879
at what he did and said oh my gosh

00:19:51,509 --> 00:19:55,379
that's way better what we really want is

00:19:53,879 --> 00:19:57,269
when we instead of a giant phyla group

00:19:55,379 --> 00:19:58,739
we want lots of small file groups so

00:19:57,269 --> 00:20:00,239
that we can have a smaller number of

00:19:58,739 --> 00:20:01,499
action inputs so that when we start

00:20:00,239 --> 00:20:02,940
doing remote build execution we don't

00:20:01,499 --> 00:20:04,139
have to upload the entire node modules

00:20:02,940 --> 00:20:05,940
directory to every one of our actions

00:20:04,139 --> 00:20:09,389
even though the vast majority of those

00:20:05,940 --> 00:20:11,309
dependencies aren't needed there so what

00:20:09,389 --> 00:20:12,869
happens is during the repository rule

00:20:11,309 --> 00:20:14,369
execution right after we call the

00:20:12,869 --> 00:20:16,919
package manager to install the packages

00:20:14,369 --> 00:20:18,809
we generate a bunch of build files we

00:20:16,919 --> 00:20:20,429
follow the dependency graph that the

00:20:18,809 --> 00:20:21,960
package manager had laid out and we just

00:20:20,429 --> 00:20:23,070
mirror it into build files that have the

00:20:21,960 --> 00:20:25,979
right dependencies on each other and

00:20:23,070 --> 00:20:27,539
then it also creates binary targets for

00:20:25,979 --> 00:20:31,409
anything that's labeled in the in that

00:20:27,539 --> 00:20:32,700
package is being executable so this this

00:20:31,409 --> 00:20:34,710
does have the downside that users have

00:20:32,700 --> 00:20:36,599
to put dependencies into their build

00:20:34,710 --> 00:20:38,849
files so I mentioned TS Auto depth later

00:20:36,599 --> 00:20:40,609
which is one solution for this all we

00:20:38,849 --> 00:20:42,599
all want build file generation to happen

00:20:40,609 --> 00:20:43,619
and then you can opt out of this

00:20:42,599 --> 00:20:46,379
fine-grained thing you can use a

00:20:43,619 --> 00:20:48,119
catch-all target so just give you the

00:20:46,379 --> 00:20:49,679
old behavior of everything so now it's

00:20:48,119 --> 00:20:50,580
faster action setup scalable and your

00:20:49,679 --> 00:20:51,809
dependencies are always up-to-date you

00:20:50,580 --> 00:20:54,690
don't remember to run the package

00:20:51,809 --> 00:20:56,669
manager first so like I said you get a

00:20:54,690 --> 00:20:59,009
ten pm and it has the package it has a

00:20:56,669 --> 00:21:00,029
binary label you can use and it has the

00:20:59,009 --> 00:21:03,989
catch-all target that gives you

00:21:00,029 --> 00:21:05,249
everything so just some examples of how

00:21:03,989 --> 00:21:06,479
it would look to use it so if you wanted

00:21:05,249 --> 00:21:08,129
to install the type strip support you

00:21:06,479 --> 00:21:09,599
could do basil run then we're gonna run

00:21:08,129 --> 00:21:10,919
the package manager which is yarn and

00:21:09,599 --> 00:21:12,299
we're gonna tell it the command is add

00:21:10,919 --> 00:21:14,369
and then we tell it to add typescript

00:21:12,299 --> 00:21:16,320
and at basil slash typescript which I'll

00:21:14,369 --> 00:21:17,849
talk about this is the the JavaScript

00:21:16,320 --> 00:21:19,559
code needed to run the compilation under

00:21:17,849 --> 00:21:21,179
basil and then we can run the typescript

00:21:19,559 --> 00:21:23,190
compiler the vanilla upstream one just

00:21:21,179 --> 00:21:24,719
by referencing it npm type script slash

00:21:23,190 --> 00:21:29,369
bin colon CSC which is the name of the

00:21:24,719 --> 00:21:32,239
program oh I did say star Alaric oh I

00:21:29,369 --> 00:21:35,009
updated the slide I'm so proud of myself

00:21:32,239 --> 00:21:38,639
so I'm won't spend too much time on this

00:21:35,009 --> 00:21:39,830
we we tried a few ways we actually

00:21:38,639 --> 00:21:43,320
rolled them all out to production of

00:21:39,830 --> 00:21:44,849
making JavaScript and bizzle files work

00:21:43,320 --> 00:21:46,739
together so the problem was number one

00:21:44,849 --> 00:21:48,599
we tried putting bizzle files into the

00:21:46,739 --> 00:21:50,039
NPM package that you fetch and the

00:21:48,599 --> 00:21:52,109
problem there is that there's a

00:21:50,039 --> 00:21:52,559
bootstrap condition where you can't run

00:21:52,109 --> 00:21:54,360
basil

00:21:52,559 --> 00:21:56,519
because the workspace file does a load

00:21:54,360 --> 00:21:57,629
from a node modules directory that you

00:21:56,519 --> 00:21:58,950
don't have until you've run the package

00:21:57,629 --> 00:22:00,779
manager so you can't use basil to run

00:21:58,950 --> 00:22:03,090
the package manager so that was no good

00:22:00,779 --> 00:22:05,009
the temptu was we try putting the

00:22:03,090 --> 00:22:08,460
JavaScript files or typescript files

00:22:05,009 --> 00:22:09,870
into the Starlog package but now they

00:22:08,460 --> 00:22:11,850
don't live inside of that node modules

00:22:09,870 --> 00:22:13,200
directory anymore and so if if the rules

00:22:11,850 --> 00:22:14,759
typescript depends on a certain version

00:22:13,200 --> 00:22:17,580
of protobuf j/s which it does for the

00:22:14,759 --> 00:22:18,840
worker communication with basil and the

00:22:17,580 --> 00:22:20,669
user is installed a different version of

00:22:18,840 --> 00:22:21,629
protobuf just in their own dependencies

00:22:20,669 --> 00:22:24,330
then we don't get our right version

00:22:21,629 --> 00:22:25,950
anymore so the answer we've come up with

00:22:24,330 --> 00:22:27,809
is what we're calling idiomatic install

00:22:25,950 --> 00:22:30,210
which is we just give up we're gonna

00:22:27,809 --> 00:22:31,590
have two packages so the the Starlog

00:22:30,210 --> 00:22:33,269
package is downloaded according to the

00:22:31,590 --> 00:22:34,529
idiom that basil has and the JavaScript

00:22:33,269 --> 00:22:36,779
code is downloaded according to the

00:22:34,529 --> 00:22:38,029
idiom of NPM and then at runtime we just

00:22:36,779 --> 00:22:39,899
have to check that the versions match

00:22:38,029 --> 00:22:42,450
because we weren't able to ship it as

00:22:39,899 --> 00:22:43,710
one package so for example karma is a

00:22:42,450 --> 00:22:47,039
test runner that was developed by the

00:22:43,710 --> 00:22:48,649
Ingo team so if we have that NPM package

00:22:47,039 --> 00:22:50,759
and we need to add some JavaScript code

00:22:48,649 --> 00:22:53,279
typically run files as the reason we

00:22:50,759 --> 00:22:54,990
need this then we can we can make a

00:22:53,279 --> 00:22:58,769
package at basil slash karma the at

00:22:54,990 --> 00:22:59,999
basil here is a scoped package on NPM

00:22:58,769 --> 00:23:02,999
which just means that we can put

00:22:59,999 --> 00:23:04,950
everything under this directory and it

00:23:02,999 --> 00:23:06,299
also gives users an easy way to know if

00:23:04,950 --> 00:23:07,710
I use it if I get packaged ex then I

00:23:06,299 --> 00:23:09,570
might need to add basil slash X to go

00:23:07,710 --> 00:23:10,740
with it we only have a few of these so

00:23:09,570 --> 00:23:13,529
far but this seems like the pattern we

00:23:10,740 --> 00:23:14,820
want to follow I'll briefly mention when

00:23:13,529 --> 00:23:15,840
I talked to the angler developers I

00:23:14,820 --> 00:23:17,549
don't tell them any of what I just told

00:23:15,840 --> 00:23:18,690
you because that's all scary for them so

00:23:17,549 --> 00:23:20,100
what I tell them is okay you already

00:23:18,690 --> 00:23:21,600
have knowed NPM and yarn on your machine

00:23:20,100 --> 00:23:23,129
because your web developer you're never

00:23:21,600 --> 00:23:26,610
gonna install basil I'm not gonna tell

00:23:23,129 --> 00:23:28,049
you what basil is and you can see this

00:23:26,610 --> 00:23:29,669
repo to see how this works but what

00:23:28,049 --> 00:23:32,159
we're what we've done is published the

00:23:29,669 --> 00:23:34,860
basil binary is just the bare exe and

00:23:32,159 --> 00:23:36,869
you know the binary files to NPM as

00:23:34,860 --> 00:23:38,669
dependencies so you can make an NPM

00:23:36,869 --> 00:23:41,759
dependency on at basil slash basil and

00:23:38,669 --> 00:23:44,399
now the basil tool just looks like one

00:23:41,759 --> 00:23:45,779
other process that your JavaScript build

00:23:44,399 --> 00:23:49,019
system knows how to spin up and so we're

00:23:45,779 --> 00:23:49,950
trying to layer it in between so I'm not

00:23:49,019 --> 00:23:51,269
gonna talk about the rest of the rules

00:23:49,950 --> 00:23:53,690
there's a bunch of things you can do we

00:23:51,269 --> 00:23:55,860
do have our star dock documentation site

00:23:53,690 --> 00:23:57,210
that's here and it's linked from basil

00:23:55,860 --> 00:23:59,340
dot build if you click on Docs and go

00:23:57,210 --> 00:24:01,379
through to JavaScript

00:23:59,340 --> 00:24:03,210
rules typescript I'm mostly skip over

00:24:01,379 --> 00:24:05,669
but it does kind of illustrate this idea

00:24:03,210 --> 00:24:06,190
of you need JavaScript code which is at

00:24:05,669 --> 00:24:07,929
basil

00:24:06,190 --> 00:24:09,340
typescript which goes along with the

00:24:07,929 --> 00:24:10,929
typescript package that's stripped by

00:24:09,340 --> 00:24:12,759
the team of Microsoft and then

00:24:10,929 --> 00:24:14,590
separately you have the HTTP archive to

00:24:12,759 --> 00:24:16,809
get the the rules typescript where the

00:24:14,590 --> 00:24:18,639
bizzle code lives and so this gives you

00:24:16,809 --> 00:24:20,049
the TS library rule it's gonna be good

00:24:18,639 --> 00:24:21,610
example because it uses a lot of basil

00:24:20,049 --> 00:24:23,110
features actually it has it uses the

00:24:21,610 --> 00:24:25,120
workers so that the compiler can stay

00:24:23,110 --> 00:24:26,529
running it has providers to give you the

00:24:25,120 --> 00:24:28,059
different flavors of JavaScript like I

00:24:26,529 --> 00:24:29,710
said earlier for custom elements you

00:24:28,059 --> 00:24:31,299
want one flavor for a bundler or an

00:24:29,710 --> 00:24:33,100
optimizer you might need one flavor for

00:24:31,299 --> 00:24:36,190
working with an older browser you need a

00:24:33,100 --> 00:24:38,559
different flavor it also illustrates the

00:24:36,190 --> 00:24:40,179
multi language thing because the the dev

00:24:38,559 --> 00:24:44,529
server here is written in go for

00:24:40,179 --> 00:24:46,090
performance and then also from the

00:24:44,529 --> 00:24:47,769
typescript layer we are working on this

00:24:46,090 --> 00:24:49,570
tool that writes the build files for you

00:24:47,769 --> 00:24:54,009
so internally at Google we are already

00:24:49,570 --> 00:24:55,570
using this the the external version is

00:24:54,009 --> 00:24:57,159
called TS Auto depp's it doesn't work

00:24:55,570 --> 00:24:58,690
that much yet it's kind of an avid zero

00:24:57,159 --> 00:24:59,950
right now but the idea is that you could

00:24:58,690 --> 00:25:04,360
you could do mango development I never

00:24:59,950 --> 00:25:06,850
look at build files and again there's

00:25:04,360 --> 00:25:09,129
the star doc documentation for the

00:25:06,850 --> 00:25:10,210
typescript rules ok so this talk was

00:25:09,129 --> 00:25:12,820
supposed to at angular have 5 minutes

00:25:10,210 --> 00:25:14,080
left so I better talk about angular so

00:25:12,820 --> 00:25:15,429
we did write angular rules they run the

00:25:14,080 --> 00:25:17,350
angular compiler you can use them to

00:25:15,429 --> 00:25:18,549
package up libraries in the angular

00:25:17,350 --> 00:25:19,509
ecosystem there's a lot of front-end

00:25:18,549 --> 00:25:20,919
widgets and you want to be able to

00:25:19,509 --> 00:25:22,419
display in fact there are companies

00:25:20,919 --> 00:25:24,100
whose business model is to make widgets

00:25:22,419 --> 00:25:26,169
make components and sell them and you

00:25:24,100 --> 00:25:29,980
can get a license to use their component

00:25:26,169 --> 00:25:32,440
in your app so there are a few rules in

00:25:29,980 --> 00:25:41,230
here to give you the whole end-to-end

00:25:32,440 --> 00:25:43,840
experience so this is this is somewhat

00:25:41,230 --> 00:25:45,009
new so my friend sue lucidchart have

00:25:43,840 --> 00:25:47,409
been using this is one of several

00:25:45,009 --> 00:25:49,269
companies rolling out using angular

00:25:47,409 --> 00:25:50,019
using basil to build angular at Google

00:25:49,269 --> 00:25:51,970
we've been doing this for a long time

00:25:50,019 --> 00:25:53,559
analytics Shopping Express cloud console

00:25:51,970 --> 00:25:55,389
we have a number of pretty large apps

00:25:53,559 --> 00:25:57,549
sorry I'm doing the slide backwards and

00:25:55,389 --> 00:26:00,070
then we're dogfooding at angular itself

00:25:57,549 --> 00:26:01,509
is now using basil for building tests

00:26:00,070 --> 00:26:03,549
and we're still I'm still trying to get

00:26:01,509 --> 00:26:06,370
the team to remove some of the vestigial

00:26:03,549 --> 00:26:09,070
bits from the old build system build

00:26:06,370 --> 00:26:10,629
system migrations are hard it's hard to

00:26:09,070 --> 00:26:13,500
prioritize we could do I'm sure hopes

00:26:10,629 --> 00:26:15,460
that they hope there's a talk about that

00:26:13,500 --> 00:26:17,310
just the emotional support you need to

00:26:15,460 --> 00:26:19,980
keep going

00:26:17,310 --> 00:26:20,970
so so of course Dave gave this awesome

00:26:19,980 --> 00:26:23,070
talk which you should watch if you

00:26:20,970 --> 00:26:24,840
haven't sort of introducing to the world

00:26:23,070 --> 00:26:27,900
the remote build execution service that

00:26:24,840 --> 00:26:29,820
the Google cloud runs and so the next

00:26:27,900 --> 00:26:31,800
question is well you know we said that

00:26:29,820 --> 00:26:35,030
good rule sets should be remote

00:26:31,800 --> 00:26:36,870
execution capable so we do have that and

00:26:35,030 --> 00:26:38,880
so when we turned on the remote

00:26:36,870 --> 00:26:40,230
execution actually it was way from the

00:26:38,880 --> 00:26:41,880
RBE team who helped us set this up so

00:26:40,230 --> 00:26:44,610
thank you very much

00:26:41,880 --> 00:26:46,680
the this is in second sorry I didn't

00:26:44,610 --> 00:26:49,080
label the axis I know that's a way to

00:26:46,680 --> 00:26:51,660
lie with statistics so we got faster

00:26:49,080 --> 00:26:53,040
blue bar smaller is good and then when

00:26:51,660 --> 00:26:54,360
we went from the coarse grain dependency

00:26:53,040 --> 00:26:55,440
on the olive node modules and we're

00:26:54,360 --> 00:26:56,940
uploading the whole node modules to

00:26:55,440 --> 00:26:59,340
every action to the fine-grained one

00:26:56,940 --> 00:27:00,900
where we only have the the individual

00:26:59,340 --> 00:27:02,430
packages that we need got a little bit

00:27:00,900 --> 00:27:03,840
faster I think that that didn't make a

00:27:02,430 --> 00:27:06,780
big difference because of the caching

00:27:03,840 --> 00:27:07,860
that the build execution has that

00:27:06,780 --> 00:27:10,230
probably reduced the sizes of the

00:27:07,860 --> 00:27:12,750
uploads so oh sorry I was going to show

00:27:10,230 --> 00:27:21,930
you in the three minutes I have left a

00:27:12,750 --> 00:27:23,040
quick demo so while I'm waiting for my

00:27:21,930 --> 00:27:24,330
machine to come out of hibernate I'll

00:27:23,040 --> 00:27:25,920
tell you a story which is that I'm using

00:27:24,330 --> 00:27:29,820
Windows even though I work at Google

00:27:25,920 --> 00:27:30,900
because I'm different and because I had

00:27:29,820 --> 00:27:34,500
to make all of this stuff work on

00:27:30,900 --> 00:27:37,830
Windows so the cool thing is I'm gonna

00:27:34,500 --> 00:27:39,120
do a demo on Windows ok this is Windows

00:27:37,830 --> 00:27:40,890
I don't know how I prove that what do I

00:27:39,120 --> 00:27:49,530
tell does anybody know Windows so I type

00:27:40,890 --> 00:27:51,150
like you name oh okay that works so so

00:27:49,530 --> 00:27:52,650
this demo is not going to show you basil

00:27:51,150 --> 00:27:54,120
at all this is actually what angular

00:27:52,650 --> 00:27:56,130
developers would like to see which is

00:27:54,120 --> 00:27:58,200
they all run a tool called ng and this

00:27:56,130 --> 00:28:00,150
is this is the angular CLI this is

00:27:58,200 --> 00:28:01,590
devote this is this is distributed as an

00:28:00,150 --> 00:28:03,150
NPM package and it's installed globally

00:28:01,590 --> 00:28:05,010
on your machine which is another fishy

00:28:03,150 --> 00:28:06,180
practice we have in front-end we're just

00:28:05,010 --> 00:28:08,970
the ng command to some version of

00:28:06,180 --> 00:28:10,650
angular CLI and then it has some

00:28:08,970 --> 00:28:12,480
commands I'm gonna do serve and then it

00:28:10,650 --> 00:28:14,370
can do a production mode build which is

00:28:12,480 --> 00:28:17,310
gonna run extra build steps to make the

00:28:14,370 --> 00:28:22,680
thing extra small and then let's see how

00:28:17,310 --> 00:28:24,240
how the demos are going today so this

00:28:22,680 --> 00:28:25,350
isn't going to show much output and in

00:28:24,240 --> 00:28:27,690
fact we might want to use the build

00:28:25,350 --> 00:28:28,950
event protocol to show even less of what

00:28:27,690 --> 00:28:30,730
basil is doing so there's a target

00:28:28,950 --> 00:28:33,040
source slash prod server

00:28:30,730 --> 00:28:34,870
the basilar see file change is confusing

00:28:33,040 --> 00:28:36,430
to me but hopefully that'll be finished

00:28:34,870 --> 00:28:38,080
before 1.0 okay

00:28:36,430 --> 00:28:39,910
so you there's some basil output that's

00:28:38,080 --> 00:28:42,550
familiar so it built something and now

00:28:39,910 --> 00:28:43,780
we're running this production server and

00:28:42,550 --> 00:28:45,400
so it does some of these cool things

00:28:43,780 --> 00:28:46,630
that Anglo developers would expect I

00:28:45,400 --> 00:28:48,430
don't know how interesting this is for

00:28:46,630 --> 00:28:50,500
everybody so I'll breeze through it but

00:28:48,430 --> 00:28:52,750
the important bit is that when I go to

00:28:50,500 --> 00:28:55,470
the network tab and load this app I

00:28:52,750 --> 00:29:00,100
downloaded a bunch of these chunks

00:28:55,470 --> 00:29:03,250
should learn how to use this better it

00:29:00,100 --> 00:29:05,440
should use ibid so let me answer that

00:29:03,250 --> 00:29:07,000
let me answer that in one minute so now

00:29:05,440 --> 00:29:08,410
when like when they click let me scroll

00:29:07,000 --> 00:29:10,030
down over here so when I click this -

00:29:08,410 --> 00:29:13,120
duze i just fetched another chunk so

00:29:10,030 --> 00:29:14,170
this is doing the lazy loading thing and

00:29:13,120 --> 00:29:15,220
then yeah I could make a change in the

00:29:14,170 --> 00:29:21,100
source code and it would turn around

00:29:15,220 --> 00:29:22,300
pretty quickly yeah let me just live

00:29:21,100 --> 00:29:25,600
I'll just answer the I basil real quick

00:29:22,300 --> 00:29:31,180
because I have enough time so we can

00:29:25,600 --> 00:29:34,410
switch back to slides so basil by

00:29:31,180 --> 00:29:36,310
default doesn't have a watch mode which

00:29:34,410 --> 00:29:38,680
it's been a feature request for a long

00:29:36,310 --> 00:29:40,420
time internally at Google also some my

00:29:38,680 --> 00:29:42,190
coworker who actually led the effort to

00:29:40,420 --> 00:29:44,410
get typescript as a language at Google

00:29:42,190 --> 00:29:46,630
also wrote this thing I blaze or I basil

00:29:44,410 --> 00:29:48,910
which is actually simple it just does a

00:29:46,630 --> 00:29:50,140
basil query to find out which although

00:29:48,910 --> 00:29:51,250
we don't do that part anymore internally

00:29:50,140 --> 00:29:52,630
because we have a different file system

00:29:51,250 --> 00:29:54,130
but you imagine does a query it finds

00:29:52,630 --> 00:29:55,360
out what files in your in your app might

00:29:54,130 --> 00:29:56,950
affect the targets that you've asked to

00:29:55,360 --> 00:29:58,510
run build or test and then whenever

00:29:56,950 --> 00:30:00,460
those files changed just redoes the run

00:29:58,510 --> 00:30:01,990
builder test so simple you just have a

00:30:00,460 --> 00:30:04,720
it's a pretty sort go program and it

00:30:01,990 --> 00:30:06,880
gives you a watch mode for basil so yeah

00:30:04,720 --> 00:30:09,100
most most web developers expect watch

00:30:06,880 --> 00:30:10,390
mode in their tooling and so I basil as

00:30:09,100 --> 00:30:11,620
part of that I didn't do that in this

00:30:10,390 --> 00:30:14,890
demo because I basil doesn't work on

00:30:11,620 --> 00:30:18,340
windows along with a few other things so

00:30:14,890 --> 00:30:19,690
that's something to fix right so

00:30:18,340 --> 00:30:21,220
tomorrow there's going to be at 5

00:30:19,690 --> 00:30:23,590
o'clock well you can you can talk

00:30:21,220 --> 00:30:24,700
javascript generally doesn't have to be

00:30:23,590 --> 00:30:28,150
about angular we support other web

00:30:24,700 --> 00:30:29,710
frameworks too and this is my my short

00:30:28,150 --> 00:30:32,440
link for all of the things related to

00:30:29,710 --> 00:30:34,330
converging the build tooling and using

00:30:32,440 --> 00:30:35,370
basil under angular so I link to the

00:30:34,330 --> 00:30:38,340
slides off there already

00:30:35,370 --> 00:30:40,400
so that's it

00:30:38,340 --> 00:30:40,400
you

00:30:45,980 --> 00:30:48,040
you

00:35:46,150 --> 00:35:49,450
I do remember we had an issue filed on

00:35:47,859 --> 00:35:50,740
one of the repos for something to do

00:35:49,450 --> 00:35:52,750
with native and I'm not sure what it was

00:35:50,740 --> 00:35:54,430
but in theory yes we should support

00:35:52,750 --> 00:35:55,450
whatever and whatever your front-end

00:35:54,430 --> 00:35:59,730
developing is now which is still work

00:35:55,450 --> 00:35:59,730

YouTube URL: https://www.youtube.com/watch?v=yBg9zG6ZGb4


