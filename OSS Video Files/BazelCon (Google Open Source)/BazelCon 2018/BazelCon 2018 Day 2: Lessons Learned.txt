Title: BazelCon 2018 Day 2: Lessons Learned
Publication date: 2018-11-02
Playlist: BazelCon 2018
Description: 
	Ulf Adams (Google) event: Bazelcon 2018; re_ty: Publish; product: Open Source - General; fullname: Ulf Adams;
Captions: 
	00:00:05,649 --> 00:00:11,300
all right it's it's great to see so many

00:00:09,049 --> 00:00:13,660
people and also so many new faces I

00:00:11,300 --> 00:00:17,900
recognize a lot of you from last year

00:00:13,660 --> 00:00:19,369
but a lot of you new as well so before I

00:00:17,900 --> 00:00:21,500
get to the talk let me first introduce

00:00:19,369 --> 00:00:22,970
myself my name is of Adam's I've been on

00:00:21,500 --> 00:00:25,400
the basil team for nine and a half years

00:00:22,970 --> 00:00:29,029
and one of the longest members of the

00:00:25,400 --> 00:00:31,970
team I'm now here is the professional

00:00:29,029 --> 00:00:33,620
apologizer I will say things like with

00:00:31,970 --> 00:00:38,270
I'm sorry we thought it was a good idea

00:00:33,620 --> 00:00:41,360
at the time and I'm sorry we didn't have

00:00:38,270 --> 00:00:44,360
the time to do the right solution I'm a

00:00:41,360 --> 00:00:48,079
contributor comp contributor to a large

00:00:44,360 --> 00:00:50,989
part of Basil's current design and time

00:00:48,079 --> 00:00:53,059
and again we have learned how basil

00:00:50,989 --> 00:00:56,480
works or more importantly how it fails

00:00:53,059 --> 00:00:59,360
and so we have made changes to the

00:00:56,480 --> 00:01:01,760
architecture to improve its correctness

00:00:59,360 --> 00:01:05,080
and to improve its performance to make

00:01:01,760 --> 00:01:08,150
it more correct and more performant and

00:01:05,080 --> 00:01:11,240
that isn't to say that it's completely

00:01:08,150 --> 00:01:13,900
correct and completely performant but I

00:01:11,240 --> 00:01:17,930
believe the underlying architecture

00:01:13,900 --> 00:01:19,580
supports us in achieving goals you know

00:01:17,930 --> 00:01:21,740
our goals around correctness and

00:01:19,580 --> 00:01:23,869
performance and for everyone these goals

00:01:21,740 --> 00:01:25,729
may look different for Google we have

00:01:23,869 --> 00:01:27,229
very high expectations of correctness

00:01:25,729 --> 00:01:29,090
and performance and so we have a mono

00:01:27,229 --> 00:01:32,540
repo and we check literally everything

00:01:29,090 --> 00:01:35,720
in I you know except for bash but

00:01:32,540 --> 00:01:36,920
everything else is checked in I'm a

00:01:35,720 --> 00:01:38,450
contributed to a large number of pace-it

00:01:36,920 --> 00:01:40,369
source files so it looks through basis

00:01:38,450 --> 00:01:43,400
history you will see my name pop up

00:01:40,369 --> 00:01:45,079
again and again and so I you know answer

00:01:43,400 --> 00:01:46,759
questions on a lot of things and the

00:01:45,079 --> 00:01:48,409
former manager of the Munich part of the

00:01:46,759 --> 00:01:52,970
team I am handing off that

00:01:48,409 --> 00:01:58,490
responsibility to Dmitri who had had

00:01:52,970 --> 00:02:00,619
yesterday's talk I'm moving on I'm told

00:01:58,490 --> 00:02:04,460
that this is the euphemism for getting

00:02:00,619 --> 00:02:07,250
fired I'm not getting fired I have

00:02:04,460 --> 00:02:09,500
decided to look at other projects within

00:02:07,250 --> 00:02:12,410
Google in this space so I will continue

00:02:09,500 --> 00:02:14,510
to contribute to Basel as a part-time

00:02:12,410 --> 00:02:17,320
contributor but no longer as a full-time

00:02:14,510 --> 00:02:20,420
contributor and not as a manager

00:02:17,320 --> 00:02:22,520
but you know anytime you you need help

00:02:20,420 --> 00:02:26,360
with something I you know I'm I'm still

00:02:22,520 --> 00:02:28,730
available all right I would like all the

00:02:26,360 --> 00:02:31,070
Googlers who have been who have working

00:02:28,730 --> 00:02:33,500
full-time on place and basil to raise

00:02:31,070 --> 00:02:39,710
their hand now just certainly get an

00:02:33,500 --> 00:02:43,580
idea of the numbers so it's thanks it's

00:02:39,710 --> 00:02:50,960
over 40 people now and please give them

00:02:43,580 --> 00:02:53,630
a big round of applause for it for all

00:02:50,960 --> 00:02:57,620
the hard work they have put into fixing

00:02:53,630 --> 00:02:59,840
my design mistakes also the contributors

00:02:57,620 --> 00:03:01,310
everyone who has contributed to basil

00:02:59,840 --> 00:03:03,950
please raise your hand if you're not a

00:03:01,310 --> 00:03:05,870
Googler so then we get it idea of the

00:03:03,950 --> 00:03:09,080
numbers that's I think that's so fewer

00:03:05,870 --> 00:03:14,600
then then team members but hopefully

00:03:09,080 --> 00:03:22,940
that will change over time all right yes

00:03:14,600 --> 00:03:25,820
thank you great all right so this talk

00:03:22,940 --> 00:03:27,980
is about lessons learned and the way

00:03:25,820 --> 00:03:29,959
this talk came together was that someone

00:03:27,980 --> 00:03:32,720
proposed the topic and then someone

00:03:29,959 --> 00:03:34,520
nominated me as a speaker and then

00:03:32,720 --> 00:03:37,490
everyone contributed notes on what I

00:03:34,520 --> 00:03:39,440
should talk about the last changes were

00:03:37,490 --> 00:03:41,990
just made two minutes ago before the

00:03:39,440 --> 00:03:44,180
talk started so hopefully it'll work

00:03:41,990 --> 00:03:46,970
okay it's it's going to be about a

00:03:44,180 --> 00:03:49,250
variety of technical and slightly less

00:03:46,970 --> 00:03:52,430
technical topics I'm more of an engineer

00:03:49,250 --> 00:03:54,680
type so you know there's gonna be some

00:03:52,430 --> 00:03:57,050
actual technical stuff in there but I'm

00:03:54,680 --> 00:03:59,240
also going to talk about no not checking

00:03:57,050 --> 00:04:02,000
this thing all right it's a little bit

00:03:59,240 --> 00:04:03,560
of a mixed bag I don't have an overview

00:04:02,000 --> 00:04:04,700
because you would just be confused by

00:04:03,560 --> 00:04:08,240
how many different things I'm going to

00:04:04,700 --> 00:04:11,600
talk about but let's start by talking

00:04:08,240 --> 00:04:15,400
about Windows so one of the things that

00:04:11,600 --> 00:04:18,709
we've learned is Windows is not Unix

00:04:15,400 --> 00:04:20,480
surprisingly so there are like three

00:04:18,709 --> 00:04:23,060
types of differences that we've been

00:04:20,480 --> 00:04:24,650
struggling with so file system

00:04:23,060 --> 00:04:26,210
differences the past form it is

00:04:24,650 --> 00:04:28,190
completely different from UNIX based

00:04:26,210 --> 00:04:30,380
operating systems there is no single

00:04:28,190 --> 00:04:32,510
root it's case insensitive

00:04:30,380 --> 00:04:35,150
they're not just you know absolute and

00:04:32,510 --> 00:04:36,890
relative paths but there are absolute

00:04:35,150 --> 00:04:39,080
paths absolute on the current drive

00:04:36,890 --> 00:04:42,200
relative on the current drive relative

00:04:39,080 --> 00:04:46,250
to some other drive extended lengths UNC

00:04:42,200 --> 00:04:47,960
remote and doesn't even it isn't even a

00:04:46,250 --> 00:04:50,120
complete list all right and of course

00:04:47,960 --> 00:04:52,760
Windows has this funny dust heritage

00:04:50,120 --> 00:04:55,130
where it does path shortening except if

00:04:52,760 --> 00:04:58,940
you store it that a shortened path and

00:04:55,130 --> 00:05:00,290
someone you know removes that directory

00:04:58,940 --> 00:05:01,760
and creates a new one with a different

00:05:00,290 --> 00:05:03,950
name it may end up with the same

00:05:01,760 --> 00:05:05,090
shortened path and so the thing that you

00:05:03,950 --> 00:05:06,620
thought it was referring to isn't

00:05:05,090 --> 00:05:11,900
actually the thing it's referring to

00:05:06,620 --> 00:05:13,160
anymore fun times but the one of the

00:05:11,900 --> 00:05:15,740
bigger problems that we have with

00:05:13,160 --> 00:05:17,690
Windows is the path length limit now

00:05:15,740 --> 00:05:20,720
Windows technically supports long path

00:05:17,690 --> 00:05:23,330
except a lot of tools are still compiled

00:05:20,720 --> 00:05:26,030
against the short API and so they have a

00:05:23,330 --> 00:05:27,740
limit of 260 characters now it wouldn't

00:05:26,030 --> 00:05:30,020
be so bad if all the developer tools

00:05:27,740 --> 00:05:34,420
were compiled against the long IPA

00:05:30,020 --> 00:05:34,420
except the visual c++ compiler isn't

00:05:35,440 --> 00:05:41,050
okay we can work with that

00:05:39,360 --> 00:05:45,800
[Music]

00:05:41,050 --> 00:05:49,970
so yeah let's let's keep going swimming

00:05:45,800 --> 00:05:52,490
support used to be well it was there

00:05:49,970 --> 00:05:54,170
except we couldn't use it because it

00:05:52,490 --> 00:05:57,890
required administrator rights

00:05:54,170 --> 00:05:59,570
ah but we can use junctions at least so

00:05:57,890 --> 00:06:02,180
we can create something like directory

00:05:59,570 --> 00:06:04,610
symlinks and those work reasonably well

00:06:02,180 --> 00:06:06,680
except for like the occasional bug that

00:06:04,610 --> 00:06:10,610
we had with them but I think they are

00:06:06,680 --> 00:06:12,110
all ironed out now and of course then

00:06:10,610 --> 00:06:14,810
there are the performance differences

00:06:12,110 --> 00:06:16,370
and so one of the big things that we've

00:06:14,810 --> 00:06:19,160
discovered is you know creating a

00:06:16,370 --> 00:06:20,890
process on Windows with create process

00:06:19,160 --> 00:06:23,900
and wait for things object takes about

00:06:20,890 --> 00:06:25,280
25,000 microseconds a Linux a fork and

00:06:23,900 --> 00:06:27,410
wait it takes about two and a half

00:06:25,280 --> 00:06:28,940
thousand microseconds which is about a

00:06:27,410 --> 00:06:32,720
factor of ten for those who are

00:06:28,940 --> 00:06:33,680
mathematically challenged and this is

00:06:32,720 --> 00:06:37,040
this is tough

00:06:33,680 --> 00:06:39,350
basil relied on best scripts on you know

00:06:37,040 --> 00:06:41,270
tiny snippets of batch code in order to

00:06:39,350 --> 00:06:43,010
plug some things together and now if you

00:06:41,270 --> 00:06:44,120
do that on Windows you have to start the

00:06:43,010 --> 00:06:46,220
batch process you have to

00:06:44,120 --> 00:06:48,260
the cat process you have to start you

00:06:46,220 --> 00:06:50,770
know a pipe and whatnot and you're

00:06:48,260 --> 00:06:53,510
ending up with like a dozen processes

00:06:50,770 --> 00:06:55,190
which is fine on Linux but not on

00:06:53,510 --> 00:06:57,650
Windows and so what we're doing about

00:06:55,190 --> 00:06:59,630
this is we are working to remove Bash

00:06:57,650 --> 00:07:01,970
from all the critical functions so that

00:06:59,630 --> 00:07:04,490
you can do Windows builds or builds on

00:07:01,970 --> 00:07:07,190
Windows without requiring bash now if

00:07:04,490 --> 00:07:08,930
you want to use bash because you know

00:07:07,190 --> 00:07:11,780
for whatever reason then you can still

00:07:08,930 --> 00:07:13,370
do it but you should be able to to

00:07:11,780 --> 00:07:16,789
organize your source because you don't

00:07:13,370 --> 00:07:20,150
have to and this also applies to the

00:07:16,789 --> 00:07:21,650
test wrapper script that we're using to

00:07:20,150 --> 00:07:23,240
run tests which is doing some you know

00:07:21,650 --> 00:07:25,520
test set up like environment variables

00:07:23,240 --> 00:07:27,590
and so forth and we're rewriting that as

00:07:25,520 --> 00:07:33,710
a native executable making it a lot

00:07:27,590 --> 00:07:36,949
faster cool but now for the the Linux

00:07:33,710 --> 00:07:39,669
and Mac fanboys it's not like these

00:07:36,949 --> 00:07:44,600
operating systems don't have problems

00:07:39,669 --> 00:07:46,550
all right ah too early crap sorry forget

00:07:44,600 --> 00:07:50,120
that I'll say that again at the end of

00:07:46,550 --> 00:07:52,789
the slide there are also two chain

00:07:50,120 --> 00:07:54,889
differences so GCC isn't the standard

00:07:52,789 --> 00:07:56,539
playing isn't the standard there is MSB

00:07:54,889 --> 00:07:58,760
see it's fairly established everyone's

00:07:56,539 --> 00:08:01,070
using it and so we had to add support

00:07:58,760 --> 00:08:04,130
for that which we did it seems to be

00:08:01,070 --> 00:08:05,450
working pretty well now there is no

00:08:04,130 --> 00:08:07,280
standard location for tools also

00:08:05,450 --> 00:08:12,560
admittedly and Linux there's also no

00:08:07,280 --> 00:08:13,789
standard location for tools then we have

00:08:12,560 --> 00:08:17,599
the best removal which I already

00:08:13,789 --> 00:08:19,849
mentioned passing arguments to it

00:08:17,599 --> 00:08:23,270
sub-process turns out to be a little bit

00:08:19,849 --> 00:08:25,910
difficult because the API takes a single

00:08:23,270 --> 00:08:28,880
string and there is no standard

00:08:25,910 --> 00:08:32,120
conversion API and the everyone's doing

00:08:28,880 --> 00:08:34,339
it wrong and even even different

00:08:32,120 --> 00:08:36,770
versions of Lipsy shipped with an

00:08:34,339 --> 00:08:39,469
microsoft visual studio do it

00:08:36,770 --> 00:08:41,120
differently so depending on the version

00:08:39,469 --> 00:08:42,589
of mes we see that your binary was

00:08:41,120 --> 00:08:43,219
compiled with you may have to use

00:08:42,589 --> 00:08:47,660
different

00:08:43,219 --> 00:08:49,700
quoting routes sorry we can't we can't

00:08:47,660 --> 00:08:52,779
pass an empty string to a binary on

00:08:49,700 --> 00:08:52,779
Windows it's not possible

00:08:54,490 --> 00:08:59,480
all right so now for the Linux a

00:08:58,010 --> 00:09:03,019
necklace fanboy it's not everything is

00:08:59,480 --> 00:09:05,029
rosy on these platforms either so I have

00:09:03,019 --> 00:09:07,310
some some funny examples that I want to

00:09:05,029 --> 00:09:10,579
briefly talk about so on Linux

00:09:07,310 --> 00:09:12,470
multi-threading is awesome we had a bug

00:09:10,579 --> 00:09:14,839
in Basel where we accidentally created

00:09:12,470 --> 00:09:20,389
like 70,000 threads in a couple of

00:09:14,839 --> 00:09:22,730
seconds and it worked just tried until

00:09:20,389 --> 00:09:24,670
we ran on a machine that had a limit of

00:09:22,730 --> 00:09:27,980
a couple of hundred thousand threads

00:09:24,670 --> 00:09:30,110
machine wide limit and when we run like

00:09:27,980 --> 00:09:32,110
a couple Basel instances in parallel

00:09:30,110 --> 00:09:36,170
suddenly things start breaking because

00:09:32,110 --> 00:09:38,510
well not every tool is prepared for not

00:09:36,170 --> 00:09:41,750
being able to create a new thread or

00:09:38,510 --> 00:09:43,519
let's say no one is including basil and

00:09:41,750 --> 00:09:45,949
so things start crashing on this machine

00:09:43,519 --> 00:09:47,360
and we had to go and fix it so scale

00:09:45,949 --> 00:09:49,130
performance is really good there are a

00:09:47,360 --> 00:09:50,750
lot of people contributing to Linux a

00:09:49,130 --> 00:09:53,300
lot of large companies country into

00:09:50,750 --> 00:09:57,769
Linux including Google and so the

00:09:53,300 --> 00:10:00,170
performance is really really good the

00:09:57,769 --> 00:10:04,970
bad on Linux file names are arbitrary

00:10:00,170 --> 00:10:11,260
8-bit strings this you know utf-8 maybe

00:10:04,970 --> 00:10:11,260
maybe not we don't know okay

00:10:12,199 --> 00:10:16,819
and the worst part about Linux is fork

00:10:14,209 --> 00:10:18,920
xx is inherently racy so when you fork

00:10:16,819 --> 00:10:21,589
you create a copy of the file descriptor

00:10:18,920 --> 00:10:24,199
table and then you try to close the file

00:10:21,589 --> 00:10:25,699
descriptors as fast as you can and then

00:10:24,199 --> 00:10:29,209
you expect to the sub process now the

00:10:25,699 --> 00:10:30,769
problem is if you happen to copy it all

00:10:29,209 --> 00:10:33,970
right now it's getting complicated sorry

00:10:30,769 --> 00:10:36,380
about that one process one once read

00:10:33,970 --> 00:10:38,269
writes a file to disk and marks it as

00:10:36,380 --> 00:10:40,639
executable and then goes to execute it

00:10:38,269 --> 00:10:42,829
another process comes in Forks just

00:10:40,639 --> 00:10:44,779
before the before the execution and

00:10:42,829 --> 00:10:46,880
still has an open file handle to the

00:10:44,779 --> 00:10:48,889
executable then the first thread strives

00:10:46,880 --> 00:10:50,630
to execute it and fails because there is

00:10:48,889 --> 00:10:52,250
the open file handle to an executable

00:10:50,630 --> 00:10:56,209
file and that's not allowed for security

00:10:52,250 --> 00:10:58,899
reasons okay so you you know add a loop

00:10:56,209 --> 00:10:58,899
and try again

00:10:59,870 --> 00:11:05,399
Mac OS multi-threading is terrible and

00:11:03,600 --> 00:11:07,290
one of the things that we've been doing

00:11:05,399 --> 00:11:10,589
is try to reduce the number of threads

00:11:07,290 --> 00:11:14,160
as much as possible and you know in the

00:11:10,589 --> 00:11:15,600
future we will have to have stronger in

00:11:14,160 --> 00:11:17,250
Basel overall we'll have to have

00:11:15,600 --> 00:11:19,829
stronger caps on how many threads we're

00:11:17,250 --> 00:11:21,690
creating we're not there yet but you

00:11:19,829 --> 00:11:24,570
know if you look at the commit history

00:11:21,690 --> 00:11:27,690
you will see changes happening and Mac

00:11:24,570 --> 00:11:32,970
OS finally also ships a lot of very old

00:11:27,690 --> 00:11:34,500
new tools so you often have to look at

00:11:32,970 --> 00:11:38,639
the Mac OS documentation to get the

00:11:34,500 --> 00:11:41,310
flags right the ugly part about Mac OS

00:11:38,639 --> 00:11:43,500
is fine names or normalized utf-8 well

00:11:41,310 --> 00:11:46,170
now that they're shipping a new version

00:11:43,500 --> 00:11:48,750
of Mac OS and you Apple file system

00:11:46,170 --> 00:11:50,550
doesn't do this anymore but the old Mac

00:11:48,750 --> 00:11:52,560
OS was still doing it so they were

00:11:50,550 --> 00:11:54,540
normalizing the file names as you wrote

00:11:52,560 --> 00:11:56,850
the files so it could happen that you'd

00:11:54,540 --> 00:11:58,320
write a file and you tried to open it

00:11:56,850 --> 00:12:00,600
with the same name it doesn't work

00:11:58,320 --> 00:12:04,949
because the file system normalize the

00:12:00,600 --> 00:12:06,810
name yeah the other fun part is I well

00:12:04,949 --> 00:12:09,360
you can't run to iOS simulators in

00:12:06,810 --> 00:12:18,810
parallel on the same machine except if

00:12:09,360 --> 00:12:20,430
you using games yeah alright windows I

00:12:18,810 --> 00:12:21,870
already covered the quite pros process

00:12:20,430 --> 00:12:24,329
create process API is actually pretty

00:12:21,870 --> 00:12:28,980
decent arena so I you know chocolate up

00:12:24,329 --> 00:12:30,870
as a as a win for Windows alright let's

00:12:28,980 --> 00:12:33,240
talk about external dev complete

00:12:30,870 --> 00:12:34,890
turnaround on topic this is completely

00:12:33,240 --> 00:12:39,810
different nothing to do with Windows I

00:12:34,890 --> 00:12:43,769
mean not specifically alright so history

00:12:39,810 --> 00:12:45,089
you know when we made it before the open

00:12:43,769 --> 00:12:47,730
source release let's go back a little

00:12:45,089 --> 00:12:49,110
bit more in time we don't have any

00:12:47,730 --> 00:12:51,000
external dependencies we have a mono

00:12:49,110 --> 00:12:53,940
repo everything's checked in so we

00:12:51,000 --> 00:12:55,649
release basil and you know we knew this

00:12:53,940 --> 00:12:57,449
was going to be a problem we didn't know

00:12:55,649 --> 00:13:00,060
how much of a problem but it quickly

00:12:57,449 --> 00:13:00,329
turned out it was a big problem all

00:13:00,060 --> 00:13:03,089
right

00:13:00,329 --> 00:13:04,920
and so we started adding at some api's

00:13:03,089 --> 00:13:07,589
and some mechanisms to fix the worst

00:13:04,920 --> 00:13:10,589
problems except that you know it wasn't

00:13:07,589 --> 00:13:12,029
really thought through and you can all

00:13:10,589 --> 00:13:12,840
you can't blame that on me

00:13:12,029 --> 00:13:15,060
it's my

00:13:12,840 --> 00:13:19,260
I didn't I didn't do proper you know

00:13:15,060 --> 00:13:22,320
design reviews and of course you know

00:13:19,260 --> 00:13:25,260
adding like local discovery adds a big

00:13:22,320 --> 00:13:27,870
hermiticity loophole which is now

00:13:25,260 --> 00:13:29,730
turning around to bite us when you try

00:13:27,870 --> 00:13:33,240
to do remote execution you first have to

00:13:29,730 --> 00:13:35,670
make every singer medic so that makes it

00:13:33,240 --> 00:13:38,790
harder for people to move to to remote

00:13:35,670 --> 00:13:41,190
execution what are we doing about it at

00:13:38,790 --> 00:13:43,200
basic on last year we started to have a

00:13:41,190 --> 00:13:46,530
lot of discussions around this we've

00:13:43,200 --> 00:13:48,300
basically do a reboot trying to find

00:13:46,530 --> 00:13:50,640
principled solutions to the underlying

00:13:48,300 --> 00:13:52,200
problems that we've identified like you

00:13:50,640 --> 00:13:54,630
know file system layout Diamont

00:13:52,200 --> 00:13:56,790
dependencies we are deprecating the

00:13:54,630 --> 00:13:58,200
built in workspace routes please look at

00:13:56,790 --> 00:13:59,460
the documentation it's linked from here

00:13:58,200 --> 00:14:01,800
if you're using the built in workspace

00:13:59,460 --> 00:14:05,310
routes please migrate to the new ones

00:14:01,800 --> 00:14:07,380
not all of them are deprecated and some

00:14:05,310 --> 00:14:12,600
of them are going to stick around but

00:14:07,380 --> 00:14:14,880
some of them are deprecated cool all

00:14:12,600 --> 00:14:17,520
right next topic again completely

00:14:14,880 --> 00:14:20,360
different automated dependency

00:14:17,520 --> 00:14:22,560
management and what I mean with that is

00:14:20,360 --> 00:14:24,860
you have your source files and your

00:14:22,560 --> 00:14:30,060
source files you have imports in Java or

00:14:24,860 --> 00:14:32,700
imports and pison or and go and now

00:14:30,060 --> 00:14:34,500
basil is forcing you to repeat those

00:14:32,700 --> 00:14:39,540
import tech relation declarations in

00:14:34,500 --> 00:14:42,240
your boat files yes I hear you

00:14:39,540 --> 00:14:45,750
we hear you it's a problem there are

00:14:42,240 --> 00:14:47,910
multiple more or less working tools for

00:14:45,750 --> 00:14:49,980
this for depths management there are

00:14:47,910 --> 00:14:53,220
literally dozens of different tools at

00:14:49,980 --> 00:14:55,380
Google for some languages there are even

00:14:53,220 --> 00:14:57,540
multiple tools for the same language

00:14:55,380 --> 00:15:00,470
none have really achieved critical mass

00:14:57,540 --> 00:15:03,510
except for go and maybe check script

00:15:00,470 --> 00:15:06,990
none are completely correct except for

00:15:03,510 --> 00:15:09,030
go at least used to be correct go is now

00:15:06,990 --> 00:15:11,340
introducing changes to the language or

00:15:09,030 --> 00:15:13,620
to the you know the way they handle

00:15:11,340 --> 00:15:15,270
third-party dependencies that may make

00:15:13,620 --> 00:15:16,800
it more difficult to write correct tools

00:15:15,270 --> 00:15:19,710
for automatically generating the

00:15:16,800 --> 00:15:21,600
websites but there is go experts here

00:15:19,710 --> 00:15:24,630
and so they may be Oh tense all the

00:15:21,600 --> 00:15:25,580
questionable but and and this is how

00:15:24,630 --> 00:15:27,530
build a fire and

00:15:25,580 --> 00:15:29,450
came into existence so the go team at

00:15:27,530 --> 00:15:32,240
Google decided they wanted to do this

00:15:29,450 --> 00:15:33,980
and they wanted to automatically modify

00:15:32,240 --> 00:15:36,500
build fights now when you do that and

00:15:33,980 --> 00:15:39,260
you have like completely haphazard like

00:15:36,500 --> 00:15:41,030
syntax and you know some people do the

00:15:39,260 --> 00:15:43,400
newline here and some people here and

00:15:41,030 --> 00:15:45,290
it's all mixed up then if you if you put

00:15:43,400 --> 00:15:46,640
the tool there that automobiles and

00:15:45,290 --> 00:15:49,100
tries to fix up the build file how

00:15:46,640 --> 00:15:51,650
should it format it should try to follow

00:15:49,100 --> 00:15:54,440
the formatting and or it should it you

00:15:51,650 --> 00:15:56,510
know anyway they decided to to write

00:15:54,440 --> 00:15:59,480
build a fire and write a library true to

00:15:56,510 --> 00:16:03,890
parse build files and do other

00:15:59,480 --> 00:16:06,230
formatting and so we have basically

00:16:03,890 --> 00:16:07,880
taken that over at least the you know

00:16:06,230 --> 00:16:09,860
the basic library and that's the basis

00:16:07,880 --> 00:16:11,690
for a number of these tools that do that

00:16:09,860 --> 00:16:20,840
do devs management all right now what

00:16:11,690 --> 00:16:23,120
are we doing about it not much yet so we

00:16:20,840 --> 00:16:24,950
know it's a problem we will work on it

00:16:23,120 --> 00:16:26,990
we commit to work on it we know it's a

00:16:24,950 --> 00:16:30,770
big problem for a lot of you or your

00:16:26,990 --> 00:16:35,090
users but it's also a difficult problem

00:16:30,770 --> 00:16:38,050
and there are like a number of competing

00:16:35,090 --> 00:16:41,090
things right you know you want it to be

00:16:38,050 --> 00:16:43,790
good enough so people can use it but

00:16:41,090 --> 00:16:46,430
making it completely correct is really

00:16:43,790 --> 00:16:48,140
hard so for Java for example you know

00:16:46,430 --> 00:16:50,090
your your classes can be anywhere in

00:16:48,140 --> 00:16:52,220
your sorcery and they don't even have to

00:16:50,090 --> 00:16:55,010
have the name that the class is having

00:16:52,220 --> 00:16:56,840
at the end so you can't just look at the

00:16:55,010 --> 00:16:59,150
file names you actually have to parse

00:16:56,840 --> 00:17:01,100
the source files and then you may have

00:16:59,150 --> 00:17:03,830
multiple classes with the same name on

00:17:01,100 --> 00:17:06,459
your class path which you shouldn't but

00:17:03,830 --> 00:17:06,459
you have anyway

00:17:06,550 --> 00:17:10,610
so you know and this is also up to you

00:17:09,110 --> 00:17:12,290
you know how can we help with

00:17:10,610 --> 00:17:16,400
experimentation in this space without

00:17:12,290 --> 00:17:18,650
too much disruption and ideally without

00:17:16,400 --> 00:17:26,209
adding ap I said then turn out to be

00:17:18,650 --> 00:17:29,000
design flaws all right completely

00:17:26,209 --> 00:17:31,340
different topic let's talk about blaze

00:17:29,000 --> 00:17:33,140
and basil and I you know at last

00:17:31,340 --> 00:17:34,520
basil Connor was asked a lot of times

00:17:33,140 --> 00:17:36,680
you know what's the difference between

00:17:34,520 --> 00:17:39,710
blaze and basil and here I'm using the

00:17:36,680 --> 00:17:41,659
word fork to exaggerate the difference

00:17:39,710 --> 00:17:44,840
I don't actually think the differences

00:17:41,659 --> 00:17:47,080
are all that big I haven't you know

00:17:44,840 --> 00:17:49,929
we've been alright

00:17:47,080 --> 00:17:52,789
history let's go through history first

00:17:49,929 --> 00:17:54,289
I'll work slow to this day and you know

00:17:52,789 --> 00:17:56,419
starting from the initial release and to

00:17:54,289 --> 00:17:58,100
the stay is that the source of truth is

00:17:56,419 --> 00:18:00,740
our internal repository which is called

00:17:58,100 --> 00:18:02,659
Google 3 and we copied to github if you

00:18:00,740 --> 00:18:03,980
actually manage to like for submit

00:18:02,659 --> 00:18:07,909
something to github it would be

00:18:03,980 --> 00:18:10,220
overwritten by the next export which is

00:18:07,909 --> 00:18:13,519
also why we can't just merge changes on

00:18:10,220 --> 00:18:16,309
github unfortunately we also when we

00:18:13,519 --> 00:18:22,000
open source basil or blaze at the time

00:18:16,309 --> 00:18:25,850
we open source a clean that place yeah I

00:18:22,000 --> 00:18:28,190
know when we did it and I I'm not sure

00:18:25,850 --> 00:18:32,179
we made a mistake there but it's also

00:18:28,190 --> 00:18:34,730
caused problems and it has introduced

00:18:32,179 --> 00:18:37,190
like gratuitous incompatibilities that

00:18:34,730 --> 00:18:39,769
make it makes it actually harder for

00:18:37,190 --> 00:18:43,480
Google itself to use basil and for

00:18:39,769 --> 00:18:47,120
Googlers to to open source code or to

00:18:43,480 --> 00:18:51,590
pull code back into Google that has been

00:18:47,120 --> 00:18:54,500
open sourced so that's not idea

00:18:51,590 --> 00:18:56,659
we've also not really completely cleaned

00:18:54,500 --> 00:18:59,000
up the interfaces between what's

00:18:56,659 --> 00:19:01,490
external and internal and we've actually

00:18:59,000 --> 00:19:04,490
run an experiment for awhile where we

00:19:01,490 --> 00:19:06,980
sort of had a check on every submit

00:19:04,490 --> 00:19:08,659
whether it was touching only open source

00:19:06,980 --> 00:19:10,149
files or open source in closed source

00:19:08,659 --> 00:19:13,399
files

00:19:10,149 --> 00:19:16,279
yeah almost all the commits touch both

00:19:13,399 --> 00:19:19,340
at the time I think things have improved

00:19:16,279 --> 00:19:20,720
since then but I don't have data to

00:19:19,340 --> 00:19:23,600
prove that

00:19:20,720 --> 00:19:25,309
and then we also didn't open source all

00:19:23,600 --> 00:19:27,519
of the tests and sorry I'm sorry I'm

00:19:25,309 --> 00:19:29,720
sorry I'm sorry

00:19:27,519 --> 00:19:31,039
ok what are we doing about it we are

00:19:29,720 --> 00:19:33,080
removing differences we're actively

00:19:31,039 --> 00:19:35,990
removing differences this is a this is

00:19:33,080 --> 00:19:39,679
difficult I you know if you if you

00:19:35,990 --> 00:19:44,330
consider load files a client of an API

00:19:39,679 --> 00:19:48,440
we have literally hundreds of thousands

00:19:44,330 --> 00:19:51,230
of clients and so anytime we want to

00:19:48,440 --> 00:19:52,600
make a change to the build file API we

00:19:51,230 --> 00:19:55,920
have to go in and

00:19:52,600 --> 00:19:59,340
they'd hundreds of thousands of clients

00:19:55,920 --> 00:20:20,760
and of course we can't just break it

00:19:59,340 --> 00:20:25,150
because if problem with the mic ha

00:20:20,760 --> 00:20:27,130
we removed cpp semantics the external

00:20:25,150 --> 00:20:32,040
parts the CPP semantics is still in use

00:20:27,130 --> 00:20:34,900
for Objective C but the the most

00:20:32,040 --> 00:20:36,820
egregious parts of it are removed and

00:20:34,900 --> 00:20:41,350
the the parts that are left are all open

00:20:36,820 --> 00:20:43,150
source so yes we just open-source the

00:20:41,350 --> 00:20:45,760
code for includes canning it's not in

00:20:43,150 --> 00:20:48,690
use yet but I you know push to change

00:20:45,760 --> 00:20:52,030
last week that made it all open source

00:20:48,690 --> 00:20:53,980
we are removing we when we open sourced

00:20:52,030 --> 00:20:56,650
it we forked all the built files so we

00:20:53,980 --> 00:20:58,630
have a build and a build at OSS file and

00:20:56,650 --> 00:21:00,550
unfortunately that means any time we

00:20:58,630 --> 00:21:02,980
accept the patch that modifies a build

00:21:00,550 --> 00:21:06,070
file we have to copy that modification

00:21:02,980 --> 00:21:08,350
to our internal build file and now the

00:21:06,070 --> 00:21:13,600
other fun part is that of course these

00:21:08,350 --> 00:21:15,370
build files have diverged so they are no

00:21:13,600 --> 00:21:17,170
longer incomplete saying so you can't

00:21:15,370 --> 00:21:19,990
just copy the page to the other build

00:21:17,170 --> 00:21:21,490
file and then again we have put a

00:21:19,990 --> 00:21:26,080
process in place that allows us to

00:21:21,490 --> 00:21:28,000
remove the internal note finally you

00:21:26,080 --> 00:21:30,430
know to merge the to build files into

00:21:28,000 --> 00:21:32,110
one so that there is only a single build

00:21:30,430 --> 00:21:35,770
fire and so we can just cleanly apply a

00:21:32,110 --> 00:21:38,020
patch we haven't moved all build files

00:21:35,770 --> 00:21:40,660
to this new mechanism yet but I hope the

00:21:38,020 --> 00:21:47,080
basil team is listening and will do some

00:21:40,660 --> 00:21:48,460
work everyone I see you we've also

00:21:47,080 --> 00:21:52,740
introduced the build event protocol

00:21:48,460 --> 00:21:58,030
which is replacing like a multitude of

00:21:52,740 --> 00:22:00,100
internal mechanisms to communicate

00:21:58,030 --> 00:22:02,350
machine readable data to other processes

00:22:00,100 --> 00:22:05,590
that want to use and work with place and

00:22:02,350 --> 00:22:06,340
basil and this is completely open-source

00:22:05,590 --> 00:22:09,130
there

00:22:06,340 --> 00:22:12,909
no hidden parts it's all there for

00:22:09,130 --> 00:22:16,450
everyone to use and enjoy we are

00:22:12,909 --> 00:22:18,190
removing code we are going through the

00:22:16,450 --> 00:22:20,590
skylark migration of all the built-in

00:22:18,190 --> 00:22:22,630
rules and some of them have already been

00:22:20,590 --> 00:22:24,700
migrated and you may not see that

00:22:22,630 --> 00:22:26,470
because some of the rules are internal

00:22:24,700 --> 00:22:28,750
and so we've migrated internally from

00:22:26,470 --> 00:22:31,570
building code to Skylark

00:22:28,750 --> 00:22:33,100
there are deprecation you know we have

00:22:31,570 --> 00:22:34,270
gone through a deprecation we're going

00:22:33,100 --> 00:22:35,529
through an active deprecation of google

00:22:34,270 --> 00:22:37,480
only features we're going to dedicate

00:22:35,529 --> 00:22:39,220
what we call the master lock if you

00:22:37,480 --> 00:22:41,409
don't know what that is it's great you

00:22:39,220 --> 00:22:42,460
don't have to we're deprecating place

00:22:41,409 --> 00:22:44,799
analyze

00:22:42,460 --> 00:22:47,230
sorry typescript team they're using it

00:22:44,799 --> 00:22:49,870
internally they're currently migrating

00:22:47,230 --> 00:22:54,850
to use query directly which is like a

00:22:49,870 --> 00:23:00,130
lower-level API and also quit rules quit

00:22:54,850 --> 00:23:02,440
is anyway we're also we're also getting

00:23:00,130 --> 00:23:04,450
better at publishing our design Docs if

00:23:02,440 --> 00:23:06,270
we're still not perfect at it please you

00:23:04,450 --> 00:23:09,940
know hold us responsible for doing that

00:23:06,270 --> 00:23:11,590
eventually so we are committing to

00:23:09,940 --> 00:23:16,270
eventually move to an external first

00:23:11,590 --> 00:23:21,250
flow when that's going to happen I don't

00:23:16,270 --> 00:23:26,740
know but you know there are the guys you

00:23:21,250 --> 00:23:28,690
need to complain to stability and I'm

00:23:26,740 --> 00:23:31,630
repeating some of what Dimitri talked

00:23:28,690 --> 00:23:34,029
about yesterday things break too often

00:23:31,630 --> 00:23:35,950
flex change all the time their encounter

00:23:34,029 --> 00:23:38,080
will start lark API changes their build

00:23:35,950 --> 00:23:39,700
event protocol changes their

00:23:38,080 --> 00:23:45,250
incompatible changes to the building

00:23:39,700 --> 00:23:49,059
rules stability is hard and we've been

00:23:45,250 --> 00:23:52,210
discussing this for a long time what is

00:23:49,059 --> 00:23:54,370
actually an incompatible change what

00:23:52,210 --> 00:23:57,070
properties of the API do we guarantee

00:23:54,370 --> 00:24:02,740
and what properties of the API do we not

00:23:57,070 --> 00:24:06,340
guarantee and so this is where something

00:24:02,740 --> 00:24:08,529
comes in that we call Hiram's law with a

00:24:06,340 --> 00:24:09,730
sufficient number of users of an API it

00:24:08,529 --> 00:24:13,059
doesn't matter what you promise in the

00:24:09,730 --> 00:24:14,860
contract all observable behaviors of

00:24:13,059 --> 00:24:17,730
your system will be dependent on by

00:24:14,860 --> 00:24:17,730
somebody

00:24:18,170 --> 00:24:23,280
with other words the more successful we

00:24:21,630 --> 00:24:33,030
are the harder it is to make a change

00:24:23,280 --> 00:24:34,980
without breaking someone somewhere so so

00:24:33,030 --> 00:24:36,480
maybe you remember George asking

00:24:34,980 --> 00:24:38,280
yesterday about action keys

00:24:36,480 --> 00:24:39,750
the problem with action cases we made

00:24:38,280 --> 00:24:41,640
some changes to make them faster to

00:24:39,750 --> 00:24:45,750
compute but change that changed the

00:24:41,640 --> 00:24:48,600
actual value of the key and so for for

00:24:45,750 --> 00:24:50,730
his setup of his remote execution system

00:24:48,600 --> 00:24:53,280
when you do that basically the new

00:24:50,730 --> 00:24:56,360
version comes in and everything gets

00:24:53,280 --> 00:25:00,960
rebuilt because the keys are different

00:24:56,360 --> 00:25:03,900
now you can solve that by creating a

00:25:00,960 --> 00:25:06,840
larger cache except that you know you

00:25:03,900 --> 00:25:09,000
need like twice the amount of storage in

00:25:06,840 --> 00:25:15,090
order to be able to handle that kind of

00:25:09,000 --> 00:25:17,040
change not idea so what are we doing

00:25:15,090 --> 00:25:18,690
well we are doing those things that are

00:25:17,040 --> 00:25:20,220
already mentioned we're reducing the API

00:25:18,690 --> 00:25:21,540
surface as much as possible we're

00:25:20,220 --> 00:25:23,730
migrating the building roads to Starlog

00:25:21,540 --> 00:25:28,260
now that doesn't magically make them

00:25:23,730 --> 00:25:30,660
more stable but we can provide a

00:25:28,260 --> 00:25:32,880
baseline of stability guarantees for the

00:25:30,660 --> 00:25:34,880
base of binaries because we don't have

00:25:32,880 --> 00:25:38,070
to cover such a big API service anymore

00:25:34,880 --> 00:25:39,990
now the question is what happens to you

00:25:38,070 --> 00:25:42,330
right you don't just want to use basic

00:25:39,990 --> 00:25:44,580
or you don't just want to I mean maybe

00:25:42,330 --> 00:25:46,679
you do maybe some of you only use basic

00:25:44,580 --> 00:25:48,870
or and have all their other routes

00:25:46,679 --> 00:25:51,720
written you know home written but most

00:25:48,870 --> 00:25:53,790
of you do want to use existing routes

00:25:51,720 --> 00:25:57,300
that other people are maintaining and so

00:25:53,790 --> 00:26:00,059
you know what's a house the contract

00:25:57,300 --> 00:26:02,850
they're going to look like and we're

00:26:00,059 --> 00:26:05,880
actively deprecating legacy api is and

00:26:02,850 --> 00:26:08,309
going forward we will more aggressively

00:26:05,880 --> 00:26:10,650
use known mechanisms to provide

00:26:08,309 --> 00:26:13,320
backwards compatible api's or to make

00:26:10,650 --> 00:26:15,720
backwards compatible changes we're using

00:26:13,320 --> 00:26:18,780
protobufs extensively protobuf has a

00:26:15,720 --> 00:26:21,390
strong stability well it doesn't

00:26:18,780 --> 00:26:23,760
magically make things table but it

00:26:21,390 --> 00:26:26,250
allows you to establish a process that

00:26:23,760 --> 00:26:27,900
where you know exactly which changes are

00:26:26,250 --> 00:26:30,030
stable changes and which are not

00:26:27,900 --> 00:26:33,000
backwards compatible

00:26:30,030 --> 00:26:35,130
we're going to more aggressively add new

00:26:33,000 --> 00:26:38,340
api's and then deprecated the old api's

00:26:35,130 --> 00:26:42,210
instead of just you know going here's a

00:26:38,340 --> 00:26:45,750
new one sorry the old ones gone and you

00:26:42,210 --> 00:26:47,520
know that sort of thing and to that end

00:26:45,750 --> 00:26:50,580
we're introducing a common process for

00:26:47,520 --> 00:26:53,010
making these incompatible changes we

00:26:50,580 --> 00:26:54,960
want basel 1.0 but we also don't want to

00:26:53,010 --> 00:26:59,310
slow down the development of basel and

00:26:54,960 --> 00:27:01,050
that's a tricky path to walk the intent

00:26:59,310 --> 00:27:02,670
of the new process is to provide a

00:27:01,050 --> 00:27:04,950
migration window for developers and

00:27:02,670 --> 00:27:05,910
users to work with a new behavior and to

00:27:04,950 --> 00:27:08,070
some extent this will have to be

00:27:05,910 --> 00:27:10,140
trickled down kind of thing where we

00:27:08,070 --> 00:27:13,620
start to add the new features and then

00:27:10,140 --> 00:27:15,750
we give the rules owners time to adapt

00:27:13,620 --> 00:27:17,910
the rules to the new changes and then

00:27:15,750 --> 00:27:19,860
the user is you know more time to adapt

00:27:17,910 --> 00:27:23,460
to the rules changes and to the chord

00:27:19,860 --> 00:27:26,570
changes how large is that window going

00:27:23,460 --> 00:27:29,850
to be well

00:27:26,570 --> 00:27:31,740
well we let's start somewhere let's

00:27:29,850 --> 00:27:33,960
start with one release you know one

00:27:31,740 --> 00:27:38,940
release actually means you know at least

00:27:33,960 --> 00:27:41,250
two releases right you can't just you

00:27:38,940 --> 00:27:43,410
need to to start adding it and then you

00:27:41,250 --> 00:27:46,830
need to you know flip the flag that

00:27:43,410 --> 00:27:48,420
enables incompatible behavior service as

00:27:46,830 --> 00:27:50,070
a soft break so that people can still

00:27:48,420 --> 00:27:52,140
flip the flag bag and get the old

00:27:50,070 --> 00:27:55,080
behavior and then have time to adapt to

00:27:52,140 --> 00:27:58,310
that or something along those lines to

00:27:55,080 --> 00:28:01,320
some extent this depends on the exact

00:27:58,310 --> 00:28:03,540
change that we want to make and we have

00:28:01,320 --> 00:28:06,180
to leave some leeway to the author of

00:28:03,540 --> 00:28:08,520
the change to decide how exactly to roll

00:28:06,180 --> 00:28:10,440
out the change to decide exactly what

00:28:08,520 --> 00:28:12,540
constitutes an incompatible change you

00:28:10,440 --> 00:28:14,970
know how large is the impact going to be

00:28:12,540 --> 00:28:18,330
is it we're only like making a small

00:28:14,970 --> 00:28:20,100
change to sandboxing yes there is

00:28:18,330 --> 00:28:23,610
someone who's going to depend on this

00:28:20,100 --> 00:28:28,320
but you know this is just small enough

00:28:23,610 --> 00:28:30,660
that it's okay and to some extent we we

00:28:28,320 --> 00:28:33,080
rely on you to give us a feedback no

00:28:30,660 --> 00:28:35,760
this isn't okay because you know we have

00:28:33,080 --> 00:28:40,020
200,000 projects that that depend on

00:28:35,760 --> 00:28:41,370
this behavior we're also excluding

00:28:40,020 --> 00:28:42,870
features marked as experimental as

00:28:41,370 --> 00:28:43,500
Dimitri said yesterday don't use

00:28:42,870 --> 00:28:45,750
experimental

00:28:43,500 --> 00:28:49,350
features let us know when you I mean try

00:28:45,750 --> 00:28:50,790
them out by all means but avoid them in

00:28:49,350 --> 00:28:53,310
production and let us know if you need

00:28:50,790 --> 00:28:57,960
them so that we can push the process of

00:28:53,310 --> 00:28:59,550
making them not experiment forward now

00:28:57,960 --> 00:29:01,290
what does that mean for you there are

00:28:59,550 --> 00:29:04,950
some implications for you as developers

00:29:01,290 --> 00:29:06,660
and as contributors you need to work

00:29:04,950 --> 00:29:08,760
with us and you need to let us know if

00:29:06,660 --> 00:29:10,890
we make mistakes right we we're not

00:29:08,760 --> 00:29:15,390
perfect you're not perfect well not

00:29:10,890 --> 00:29:17,610
perfect hold us accountable for keeping

00:29:15,390 --> 00:29:21,270
to the process if we make a large change

00:29:17,610 --> 00:29:25,710
and it then work you know you have to

00:29:21,270 --> 00:29:28,050
give us that feedback the process also

00:29:25,710 --> 00:29:30,240
applies to euro Basel contributions so

00:29:28,050 --> 00:29:32,160
if you're making a Basel change you will

00:29:30,240 --> 00:29:34,200
also have to go through the same process

00:29:32,160 --> 00:29:36,330
and that means if you need to make an

00:29:34,200 --> 00:29:41,610
incompatible change it will require a

00:29:36,330 --> 00:29:46,170
sustained multi release effort that's a

00:29:41,610 --> 00:29:50,940
price their contribution process alright

00:29:46,170 --> 00:29:52,130
completely different topic we could be

00:29:50,940 --> 00:29:56,040
better

00:29:52,130 --> 00:29:58,380
we got your feedback we all watched

00:29:56,040 --> 00:30:00,600
George's talk yesterday you're

00:29:58,380 --> 00:30:03,330
absolutely right you're absolutely right

00:30:00,600 --> 00:30:05,640
we have too many delays and reviews we

00:30:03,330 --> 00:30:08,160
have too many delays and back reports we

00:30:05,640 --> 00:30:10,440
have too many delays on discussions we

00:30:08,160 --> 00:30:12,840
have breakages on hidden tests we have

00:30:10,440 --> 00:30:15,060
unclear ownership of components and of

00:30:12,840 --> 00:30:18,900
course there is a specter of it being

00:30:15,060 --> 00:30:20,220
completely Google controlled which I

00:30:18,900 --> 00:30:23,280
don't personally think it's a problem

00:30:20,220 --> 00:30:30,240
but I understand that it's a problem for

00:30:23,280 --> 00:30:31,800
users scaling up is hard and I'm making

00:30:30,240 --> 00:30:34,140
excuses a little bit okay I'm making

00:30:31,800 --> 00:30:35,940
excuses the basel team is over 40

00:30:34,140 --> 00:30:39,030
engineers not all are exclusively

00:30:35,940 --> 00:30:40,590
working on OS open source code we're

00:30:39,030 --> 00:30:42,660
increasing the amount of open source

00:30:40,590 --> 00:30:46,050
code over time but it's not completely

00:30:42,660 --> 00:30:48,060
open source we have recently reorganized

00:30:46,050 --> 00:30:50,700
our efforts around community support and

00:30:48,060 --> 00:30:53,490
CI maintenance hopefully you have

00:30:50,700 --> 00:30:55,670
already seen that get a little bit

00:30:53,490 --> 00:30:55,670
better

00:30:56,000 --> 00:31:01,080
hopefully it will get better over time

00:30:58,610 --> 00:31:03,330
we're looking at coming up with a clear

00:31:01,080 --> 00:31:05,340
component ownership model we were

00:31:03,330 --> 00:31:07,860
thinking about adding owner's files to

00:31:05,340 --> 00:31:14,640
two subtrees so that you know who to

00:31:07,860 --> 00:31:16,350
send a patch to we will open source more

00:31:14,640 --> 00:31:18,420
of our tests we commit to open sourcing

00:31:16,350 --> 00:31:26,280
more for our tests may be in time for

00:31:18,420 --> 00:31:27,900
1.0 what do you think so if you if you

00:31:26,280 --> 00:31:29,220
aren't getting replies if things aren't

00:31:27,900 --> 00:31:33,900
happening if you know if there is

00:31:29,220 --> 00:31:36,960
silence there are specific people on the

00:31:33,900 --> 00:31:39,950
team who are you know the managers of

00:31:36,960 --> 00:31:43,680
the team internally and who are

00:31:39,950 --> 00:31:49,160
committed by Google to making sure that

00:31:43,680 --> 00:31:52,740
this works so Cece Dmitri or John for me

00:31:49,160 --> 00:31:58,170
if you would rather have me how about if

00:31:52,740 --> 00:31:59,230
something is not working for you thank

00:31:58,170 --> 00:32:05,289
you very much

00:31:59,230 --> 00:32:05,289

YouTube URL: https://www.youtube.com/watch?v=QxZ58YW4XYU


