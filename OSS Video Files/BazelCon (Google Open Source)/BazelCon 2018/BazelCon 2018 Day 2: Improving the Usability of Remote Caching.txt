Title: BazelCon 2018 Day 2: Improving the Usability of Remote Caching
Publication date: 2018-11-02
Playlist: BazelCon 2018
Description: 
	Ted Chang & Ton Ngo (IBM) event: Bazelcon 2018; re_ty: Publish; product: Open Source - General; fullname: Ted Chang, Ton Ngo;
Captions: 
	00:00:02,070 --> 00:00:12,799
I good afternoon everyone my name is Ted

00:00:08,340 --> 00:00:15,870
and that's my colleague Tom we are from

00:00:12,799 --> 00:00:20,310
the cognitive open tag group I be in

00:00:15,870 --> 00:00:21,989
Silicon Valley lab what we're doing our

00:00:20,310 --> 00:00:25,380
group is we contribute to open source

00:00:21,989 --> 00:00:29,029
projects and tensorflow is one of the

00:00:25,380 --> 00:00:32,489
project that we are currently working on

00:00:29,029 --> 00:00:35,280
so we are interested in Basel because it

00:00:32,489 --> 00:00:39,060
is the build tool for tensorflow so we

00:00:35,280 --> 00:00:41,640
are looking for ways to improve pezzo so

00:00:39,060 --> 00:00:51,750
today our talk will be about improving

00:00:41,640 --> 00:00:52,140
the usability of remote caching there

00:00:51,750 --> 00:00:57,720
you go

00:00:52,140 --> 00:00:59,520
so in a talk yesterday Stephan already

00:00:57,720 --> 00:01:02,310
talked about what there's no remote

00:00:59,520 --> 00:01:05,690
caching is so we not going to talk more

00:01:02,310 --> 00:01:09,150
detail about it for those who don't know

00:01:05,690 --> 00:01:13,670
it's basically a cache server for basil

00:01:09,150 --> 00:01:17,580
to store or download the build output so

00:01:13,670 --> 00:01:18,960
when other peso user can just who are

00:01:17,580 --> 00:01:21,150
building the same thing can just

00:01:18,960 --> 00:01:24,960
download it without building from

00:01:21,150 --> 00:01:28,830
scratch again so today in our talk we

00:01:24,960 --> 00:01:31,860
will focus more on our use case and also

00:01:28,830 --> 00:01:34,979
the current options for installing a

00:01:31,860 --> 00:01:37,820
basil remote cache and in addition to

00:01:34,979 --> 00:01:40,920
that we will show you two other ways of

00:01:37,820 --> 00:01:44,430
building or implementing your own basil

00:01:40,920 --> 00:01:47,970
remote cache server using node.js and I

00:01:44,430 --> 00:01:51,619
being HTTP server and then finally we

00:01:47,970 --> 00:01:55,130
will talk about cache storage management

00:01:51,619 --> 00:01:57,890
and also potential areas to improve

00:01:55,130 --> 00:02:03,210
pezzo remote cache

00:01:57,890 --> 00:02:10,619
ok let's start so we built the community

00:02:03,210 --> 00:02:12,989
version of tensorflow for IBM power so

00:02:10,619 --> 00:02:15,140
here's how this is our workflow

00:02:12,989 --> 00:02:19,310
basically we have a

00:02:15,140 --> 00:02:22,550
we have drinketh charts running power CI

00:02:19,310 --> 00:02:28,150
the power CI is hosted by Oregon State

00:02:22,550 --> 00:02:30,770
University and the Jenkins monitors the

00:02:28,150 --> 00:02:33,220
fanciful github so whenever there is a

00:02:30,770 --> 00:02:36,050
change it pulls down the new Co and

00:02:33,220 --> 00:02:39,220
speeding up a container following IBM

00:02:36,050 --> 00:02:41,900
power system and build the tensor flow

00:02:39,220 --> 00:02:45,760
and at the same time it's reading and

00:02:41,900 --> 00:02:49,610
writing to a remote cache we set up

00:02:45,760 --> 00:02:52,580
since it's running inside container so

00:02:49,610 --> 00:02:56,240
the tensor flow is build every time from

00:02:52,580 --> 00:02:59,660
scratch before we had the remote cache

00:02:56,240 --> 00:03:02,330
setup it was taken anywhere from 40 45

00:02:59,660 --> 00:03:06,400
minutes to one hour after we set up a

00:03:02,330 --> 00:03:10,660
remote cache it took only five minutes

00:03:06,400 --> 00:03:14,690
so the remote had saved us a lot of time

00:03:10,660 --> 00:03:17,060
here is a typical use case from Jacob

00:03:14,690 --> 00:03:21,980
budget over presentation earlier this

00:03:17,060 --> 00:03:25,690
year first time he mentioned what a

00:03:21,980 --> 00:03:29,269
typical use case of bezel relocation is

00:03:25,690 --> 00:03:32,300
basically you have your CI and then you

00:03:29,269 --> 00:03:35,840
have a bunch of developers who is

00:03:32,300 --> 00:03:40,250
creating PR whatever there's a PR the CI

00:03:35,840 --> 00:03:43,970
system builds the PR and at the same

00:03:40,250 --> 00:03:49,130
time also populating the remote cache in

00:03:43,970 --> 00:03:52,850
his example he says he used nginx the

00:03:49,130 --> 00:03:56,930
developers comes in and downloads the

00:03:52,850 --> 00:04:00,800
new the master and then Bill and their

00:03:56,930 --> 00:04:03,320
local machine can directly download the

00:04:00,800 --> 00:04:05,030
cache and not and they don't need to

00:04:03,320 --> 00:04:12,590
build from scratch so they will save

00:04:05,030 --> 00:04:15,680
time so what are the current options for

00:04:12,590 --> 00:04:17,810
the peso remote cache server on the

00:04:15,680 --> 00:04:21,229
personal side they provide you with

00:04:17,810 --> 00:04:24,530
three options first one is nginx

00:04:21,229 --> 00:04:27,290
it's a popular web server you can enable

00:04:24,530 --> 00:04:30,890
the put and get method you

00:04:27,290 --> 00:04:33,950
using web dev module the second one is

00:04:30,890 --> 00:04:38,330
bezel remote cache this is also returned

00:04:33,950 --> 00:04:41,300
by jakub it's written in gold and you

00:04:38,330 --> 00:04:45,890
can run it with Tucker it provide cash

00:04:41,300 --> 00:04:49,880
management policy using LRU which can

00:04:45,890 --> 00:04:53,840
clean up your old cache based on the

00:04:49,880 --> 00:04:57,470
last accessed a of the file the third

00:04:53,840 --> 00:05:01,340
one is Google Cloud storage obviously if

00:04:57,470 --> 00:05:04,190
you run your CI system and Google Cloud

00:05:01,340 --> 00:05:07,010
this would be a good choice for you

00:05:04,190 --> 00:05:08,960
it also has up your life cycle

00:05:07,010 --> 00:05:15,670
management so for you to clean up your

00:05:08,960 --> 00:05:18,980
old caches so before we show you how to

00:05:15,670 --> 00:05:23,000
implement your own bezel remote cache

00:05:18,980 --> 00:05:28,730
let's talk about web dev so what is web

00:05:23,000 --> 00:05:30,620
dev basically it's a HTTP extension it

00:05:28,730 --> 00:05:33,470
lets client to perform remote web

00:05:30,620 --> 00:05:35,300
content authoring operations basically

00:05:33,470 --> 00:05:39,320
it turns your web server into a file

00:05:35,300 --> 00:05:42,800
server it provides additional verbs

00:05:39,320 --> 00:05:47,060
copied lock/unlock and so on on top of

00:05:42,800 --> 00:05:50,390
the existing HTTP verbs many web server

00:05:47,060 --> 00:05:53,150
already support this extension for

00:05:50,390 --> 00:05:56,540
example in genetics Apache IP HTTP

00:05:53,150 --> 00:06:00,050
microsoft iis and so on so you can

00:05:56,540 --> 00:06:04,520
directly download module and set it up

00:06:00,050 --> 00:06:09,320
we also found no js' also has the web

00:06:04,520 --> 00:06:12,550
dev module so why would you need other

00:06:09,320 --> 00:06:15,680
options for your remote cache server

00:06:12,550 --> 00:06:18,380
obviously if you already have let's say

00:06:15,680 --> 00:06:21,680
in genetics or Apache or something else

00:06:18,380 --> 00:06:24,410
or noches running on your current

00:06:21,680 --> 00:06:27,500
infrastructure you know you can just

00:06:24,410 --> 00:06:31,150
directly reuse them it's always useful

00:06:27,500 --> 00:06:31,150
to have those additional options

00:06:33,400 --> 00:06:38,949
okay so let's first talk about how can

00:06:36,070 --> 00:06:42,610
you implement your own remote cache

00:06:38,949 --> 00:06:47,820
using node.js so we built this image

00:06:42,610 --> 00:06:47,820
from a darker base image no 10.11

00:06:48,540 --> 00:06:58,120
basically you need two modules first one

00:06:52,210 --> 00:07:00,970
is Express second one is JSDF we will

00:06:58,120 --> 00:07:02,560
show you the co a little bit it's in our

00:07:00,970 --> 00:07:06,160
github will show you a link to the

00:07:02,560 --> 00:07:09,669
github later so let me just quickly go

00:07:06,160 --> 00:07:12,430
over the code so the way you do is very

00:07:09,669 --> 00:07:15,280
simple first you need to import the

00:07:12,430 --> 00:07:19,810
Express module and then you're going to

00:07:15,280 --> 00:07:23,440
import the JSF module the JTF is

00:07:19,810 --> 00:07:29,220
actually the web tab and then you will

00:07:23,440 --> 00:07:32,949
create a JSF object called death handler

00:07:29,220 --> 00:07:35,520
inside handler you can set up where you

00:07:32,949 --> 00:07:39,580
will store your cash on the file system

00:07:35,520 --> 00:07:44,639
in this case it is saved under data

00:07:39,580 --> 00:07:51,479
slash cash inside the current J's folder

00:07:44,639 --> 00:07:54,940
project folder the next you can create a

00:07:51,479 --> 00:07:57,669
express middleware using app that use

00:07:54,940 --> 00:08:00,160
and the inside is middleware you set up

00:07:57,669 --> 00:08:02,260
a filter for the requests

00:08:00,160 --> 00:08:05,949
so whenever the requests communing with

00:08:02,260 --> 00:08:09,550
slash cash at well pass to the DEF

00:08:05,949 --> 00:08:15,370
handler and do but the DEF handler will

00:08:09,550 --> 00:08:16,660
process the request for you so if it's

00:08:15,370 --> 00:08:21,400
not cash hello

00:08:16,660 --> 00:08:24,729
you know just continue next and then you

00:08:21,400 --> 00:08:27,520
can also set up other other me know

00:08:24,729 --> 00:08:31,599
where the app get for the route if it's

00:08:27,520 --> 00:08:34,630
you know if it's not cash you know you

00:08:31,599 --> 00:08:37,599
can send okay or something like that for

00:08:34,630 --> 00:08:41,140
example if it's a route and we just said

00:08:37,599 --> 00:08:43,930
okay you can say something else and then

00:08:41,140 --> 00:08:48,510
in the end it's basically we start this

00:08:43,930 --> 00:08:48,510
node.js app in port 3000

00:08:49,589 --> 00:09:00,490
so the second option we tried is using

00:08:55,810 --> 00:09:05,279
IBM HTTP server the IBM HT server is

00:09:00,490 --> 00:09:09,670
basically apache HTTP server underneath

00:09:05,279 --> 00:09:13,930
so the same option can apply to you know

00:09:09,670 --> 00:09:16,360
either apache or IBM GT server so

00:09:13,930 --> 00:09:19,690
basically you need to enable two modules

00:09:16,360 --> 00:09:23,440
first one will be the mud dev and then

00:09:19,690 --> 00:09:27,089
second one is mod f FS module the way

00:09:23,440 --> 00:09:31,120
you enjoy this module should come

00:09:27,089 --> 00:09:35,230
installed with most Apache distribution

00:09:31,120 --> 00:09:39,160
the way you can enable it is go to the

00:09:35,230 --> 00:09:42,930
httpd.conf and then in there you you

00:09:39,160 --> 00:09:46,000
should specify the lock file and also

00:09:42,930 --> 00:09:50,950
you can specify where to store in our

00:09:46,000 --> 00:09:53,529
case it's var - repo W cache to store

00:09:50,950 --> 00:09:56,079
the cache and then you're gonna say def

00:09:53,529 --> 00:09:59,800
on this is how you turn on those two

00:09:56,079 --> 00:10:01,480
modules and then you can if you don't

00:09:59,800 --> 00:10:03,700
want people to browse your cache

00:10:01,480 --> 00:10:07,930
directory you can say directory index

00:10:03,700 --> 00:10:10,620
disabled and then the next basically it

00:10:07,930 --> 00:10:18,550
allow only allowed get put and delete

00:10:10,620 --> 00:10:24,040
verbs for requests for everybody noticed

00:10:18,550 --> 00:10:26,890
in our sample implementation there we

00:10:24,040 --> 00:10:27,880
don't provide any cache management

00:10:26,890 --> 00:10:33,160
capability

00:10:27,880 --> 00:10:40,810
you'd have to implement your own own

00:10:33,160 --> 00:10:46,180
policy to clean up your cache so here is

00:10:40,810 --> 00:10:49,089
the code the github link to the code the

00:10:46,180 --> 00:10:52,300
two additional implement implementation

00:10:49,089 --> 00:10:56,620
we just show you if you want modify or

00:10:52,300 --> 00:10:59,020
extend it you can go to our github or if

00:10:56,620 --> 00:11:01,150
you just want to download

00:10:59,020 --> 00:11:05,070
or run it quickly you can just do that

00:11:01,150 --> 00:11:10,630
cat poo and then dr. wrong this should

00:11:05,070 --> 00:11:13,600
start those servers real quick okay so

00:11:10,630 --> 00:11:16,930
next I'm going to pass to my colleague

00:11:13,600 --> 00:11:19,300
ton for him to talk about potential

00:11:16,930 --> 00:11:23,920
areas to improve basal remote cash

00:11:19,300 --> 00:11:26,140
management Thank You Ted I so so next we

00:11:23,920 --> 00:11:28,930
were sharing a bit about our experience

00:11:26,140 --> 00:11:32,860
with the remote cash in our particular

00:11:28,930 --> 00:11:36,190
case the GI Bill for tensorflow so these

00:11:32,860 --> 00:11:39,010
remote caches especially designed for a

00:11:36,190 --> 00:11:40,390
basal bill so so it's hope to look under

00:11:39,010 --> 00:11:42,760
the hood a little bit and see what's

00:11:40,390 --> 00:11:45,250
going on so you have this action that

00:11:42,760 --> 00:11:47,470
take some source input along with some

00:11:45,250 --> 00:11:49,900
environment bear Bodie command line and

00:11:47,470 --> 00:11:53,140
so on and produce some output right so

00:11:49,900 --> 00:11:54,910
so when we do the action again then

00:11:53,140 --> 00:11:57,010
we'll just look at the you know anything

00:11:54,910 --> 00:11:58,630
change it doesn't changed and we don't

00:11:57,010 --> 00:12:02,590
have to repeat the action you can use

00:11:58,630 --> 00:12:04,780
the output so the way to cache tract is

00:12:02,590 --> 00:12:08,830
changed by is by hashing or all the

00:12:04,780 --> 00:12:11,170
input everything on input and and it

00:12:08,830 --> 00:12:13,140
also has the content of that put so

00:12:11,170 --> 00:12:16,000
that's how we try to change so then the

00:12:13,140 --> 00:12:19,660
implementation for recache basics just

00:12:16,000 --> 00:12:22,300
have to directory 140 action cache here

00:12:19,660 --> 00:12:24,870
called extra cash and a 140 output that

00:12:22,300 --> 00:12:29,350
is called the quality content editable

00:12:24,870 --> 00:12:31,240
store or cast so in the action cache we

00:12:29,350 --> 00:12:34,180
just have a bunch of file that has the

00:12:31,240 --> 00:12:38,380
hash as a name and the content and 5.2

00:12:34,180 --> 00:12:41,260
DTI put for for that action the

00:12:38,380 --> 00:12:43,000
directory for the cast again she have a

00:12:41,260 --> 00:12:46,390
bunch of foul that they basically state

00:12:43,000 --> 00:12:48,960
output of the bill and the name of our

00:12:46,390 --> 00:12:53,200
body a scope of care of the content so

00:12:48,960 --> 00:12:56,310
so would the way we use the hashing as a

00:12:53,200 --> 00:12:59,970
name that when you it allow us to whole

00:12:56,310 --> 00:13:05,680
output from audible in the same cache

00:12:59,970 --> 00:13:07,390
right so for that we have a server

00:13:05,680 --> 00:13:11,260
scenario that could happen so these are

00:13:07,390 --> 00:13:15,460
the series of HTTP message to the

00:13:11,260 --> 00:13:17,470
a remote cassava first scenario is that

00:13:15,460 --> 00:13:20,350
you have a hit on the actions that I

00:13:17,470 --> 00:13:23,080
mean you look up on the action cash we

00:13:20,350 --> 00:13:25,930
found you know a foul there with that

00:13:23,080 --> 00:13:27,670
hash name so I mean that from the last

00:13:25,930 --> 00:13:30,400
movie hasn't changed so then you just

00:13:27,670 --> 00:13:33,940
read out the father file and then you

00:13:30,400 --> 00:13:35,890
can find it or yeah put bill the bill I

00:13:33,940 --> 00:13:37,630
put foam from garnishing just you know

00:13:35,890 --> 00:13:40,030
you just read those and use them so

00:13:37,630 --> 00:13:42,310
that's a good case the second case is

00:13:40,030 --> 00:13:45,160
when you have a Miss on action you try

00:13:42,310 --> 00:13:46,870
to read it and it's not there so it

00:13:45,160 --> 00:13:49,690
could mean that it hasn't something has

00:13:46,870 --> 00:13:52,300
changed since since last bill so between

00:13:49,690 --> 00:13:54,730
that cost the hash namely change or it

00:13:52,300 --> 00:13:56,760
could also be mean that you got delete

00:13:54,730 --> 00:13:59,560
it we keep it clean but the cash is gone

00:13:56,760 --> 00:14:01,210
so in a case you just have to redo

00:13:59,560 --> 00:14:04,420
dashing and then you know here you see

00:14:01,210 --> 00:14:06,330
that the the base of bill server would

00:14:04,420 --> 00:14:11,170
repeat cashing and then put back the

00:14:06,330 --> 00:14:13,360
output w2d cash so the third case is

00:14:11,170 --> 00:14:16,000
when you have a hit on the action and

00:14:13,360 --> 00:14:17,800
it's good so you start reading the ABI

00:14:16,000 --> 00:14:19,510
put me and you find out some are not

00:14:17,800 --> 00:14:21,460
there anymore and again it's probably

00:14:19,510 --> 00:14:23,200
because he got clean up and can delete

00:14:21,460 --> 00:14:25,870
it so then you have no no option but

00:14:23,200 --> 00:14:29,080
just to go back and repeat the the bill

00:14:25,870 --> 00:14:33,070
and put back the the content so those

00:14:29,080 --> 00:14:35,380
are the potential scenario to win get so

00:14:33,070 --> 00:14:37,330
that what what kind of behavior were

00:14:35,380 --> 00:14:41,170
behavior we can expect out of the cash

00:14:37,330 --> 00:14:43,270
so we see that the oughta be oh you know

00:14:41,170 --> 00:14:46,420
keep different version on the output in

00:14:43,270 --> 00:14:49,810
a cash you could have duplicate right to

00:14:46,420 --> 00:14:52,120
the same output but the content never

00:14:49,810 --> 00:14:54,700
change so what it means is that the the

00:14:52,120 --> 00:14:58,720
cash is contra gonna constantly grow in

00:14:54,700 --> 00:15:02,860
size you know without tensorflow Bo we

00:14:58,720 --> 00:15:05,800
see that it can grow from 0 to 137 gay

00:15:02,860 --> 00:15:09,880
in just about 10 bill so it grew pretty

00:15:05,800 --> 00:15:12,130
quickly if the cash is different and

00:15:09,880 --> 00:15:13,900
your problem you just keep filling up

00:15:12,130 --> 00:15:16,300
the cash but of course we don't have

00:15:13,900 --> 00:15:18,160
infinite cache P we have finally cash so

00:15:16,300 --> 00:15:20,500
we'd have to have some kind of policy to

00:15:18,160 --> 00:15:22,900
to manage the space but the good thing

00:15:20,500 --> 00:15:24,320
is that they whatever you decide to do

00:15:22,900 --> 00:15:26,330
is only effective for

00:15:24,320 --> 00:15:29,360
it doesn't affect the correctness of

00:15:26,330 --> 00:15:31,190
your bill so one thing we want to point

00:15:29,360 --> 00:15:33,560
out is that the base oversight to

00:15:31,190 --> 00:15:35,960
mention about garbage collection but in

00:15:33,560 --> 00:15:38,270
everything now opinion is it's not quite

00:15:35,960 --> 00:15:40,130
garbage collection which DC it and

00:15:38,270 --> 00:15:43,340
typically you have a pointer so that you

00:15:40,130 --> 00:15:46,430
can track down and see what objects are

00:15:43,340 --> 00:15:49,610
not reachable anymore then you know is

00:15:46,430 --> 00:15:53,030
safe to read Alito's this object but in

00:15:49,610 --> 00:15:55,250
this case a Buick put even though it

00:15:53,030 --> 00:15:57,170
might be all it's always possible that

00:15:55,250 --> 00:15:59,960
someone can kick off an obeah and try to

00:15:57,170 --> 00:16:02,840
use arable so it's more of a case of a

00:15:59,960 --> 00:16:05,680
deciding what to take out so that it

00:16:02,840 --> 00:16:13,490
minimizes the impact on your performance

00:16:05,680 --> 00:16:16,850
okay right so what we did here is that

00:16:13,490 --> 00:16:20,300
we collect some data from our CI bill so

00:16:16,850 --> 00:16:23,870
in this experiment we did a number of

00:16:20,300 --> 00:16:26,090
consecutive bill over tensorflow seven

00:16:23,870 --> 00:16:27,980
bill all together and they they just one

00:16:26,090 --> 00:16:31,910
photon one after that would kick off the

00:16:27,980 --> 00:16:33,410
bill every six oh six eight hours or so

00:16:31,910 --> 00:16:37,370
is to speak up everything that got

00:16:33,410 --> 00:16:39,980
committed during that time frame the

00:16:37,370 --> 00:16:41,540
bill is done by within a new container

00:16:39,980 --> 00:16:44,540
each time and this is how it ends up

00:16:41,540 --> 00:16:50,780
louis bill and we use the basic remote

00:16:44,540 --> 00:16:54,020
cash from jacob program and we collect

00:16:50,780 --> 00:16:57,290
the build output from the server and we

00:16:54,020 --> 00:17:00,650
also look at the content of the year

00:16:57,290 --> 00:17:02,630
because itself to see what's going on so

00:17:00,650 --> 00:17:07,459
on this chart here I brought we overlay

00:17:02,630 --> 00:17:12,140
to to chart the blue bar is the hit rate

00:17:07,459 --> 00:17:16,030
on the action cache and the orange line

00:17:12,140 --> 00:17:19,699
is the Butte I'm 44 the teaser for Bill

00:17:16,030 --> 00:17:23,060
so we see here we have an inverse

00:17:19,699 --> 00:17:25,760
relationship between the two when hit is

00:17:23,060 --> 00:17:27,770
low and butum is high and versus you

00:17:25,760 --> 00:17:29,960
know one where you hit rate is high then

00:17:27,770 --> 00:17:32,030
blue Thomas low so that's good so that

00:17:29,960 --> 00:17:34,700
it's working you sure that the remote

00:17:32,030 --> 00:17:37,730
cache is working just I suspected so on

00:17:34,700 --> 00:17:39,559
the bottom line I show the

00:17:37,730 --> 00:17:41,600
the number there I'm on on access will

00:17:39,559 --> 00:17:43,789
show the number of father are changed

00:17:41,600 --> 00:17:46,730
between each pew so for instance the

00:17:43,789 --> 00:17:50,029
first first line that means that here 99

00:17:46,730 --> 00:17:52,000
file will change so so this kind of give

00:17:50,029 --> 00:17:55,880
us an observation only you know how

00:17:52,000 --> 00:17:58,000
sensitive the cache is 460 debut in a

00:17:55,880 --> 00:18:02,870
sense of the tensile row has about

00:17:58,000 --> 00:18:07,610
13,000 file so 90195 is about 0.7

00:18:02,870 --> 00:18:09,789
percent of that repo and we saw that you

00:18:07,610 --> 00:18:12,889
know just that small change caused a

00:18:09,789 --> 00:18:16,130
drop of 40 percent of drop in the Africa

00:18:12,889 --> 00:18:18,289
so we're not sure whether this just mean

00:18:16,130 --> 00:18:21,320
that we in a separate test follow the

00:18:18,289 --> 00:18:26,269
script over specifying the dependency or

00:18:21,320 --> 00:18:28,460
not but that could be the case the force

00:18:26,269 --> 00:18:31,880
if we can really clean it up and then

00:18:28,460 --> 00:18:34,190
you should give you more benefit in the

00:18:31,880 --> 00:18:36,799
caching but of course going back to

00:18:34,190 --> 00:18:40,130
analyze the script to to clean up the

00:18:36,799 --> 00:18:42,500
idea - it's not a book I was in the

00:18:40,130 --> 00:18:45,019
forest morning of mention about some

00:18:42,500 --> 00:18:46,610
tool to manage or generate lead wanna

00:18:45,019 --> 00:18:50,450
see so that could be a big help there

00:18:46,610 --> 00:18:54,440
yeah so next we look at the volume of

00:18:50,450 --> 00:18:56,630
the traffic to the euro cache so here we

00:18:54,440 --> 00:19:00,080
delete the y-axis show you know arrange

00:18:56,630 --> 00:19:02,299
from a 15 gig to 70 gig and the volumes

00:19:00,080 --> 00:19:05,570
they pretty much concerned about a 16

00:19:02,299 --> 00:19:07,460
gig and this is the volume that get

00:19:05,570 --> 00:19:09,230
transferred back and forth from the

00:19:07,460 --> 00:19:11,179
cache every time you know it's only

00:19:09,230 --> 00:19:12,769
everything is either read from the cache

00:19:11,179 --> 00:19:16,570
or written to the cache

00:19:12,769 --> 00:19:16,570
so this there show that the

00:19:16,929 --> 00:19:21,919
even if you have a hundred percent hit

00:19:19,250 --> 00:19:23,389
that's in cash the lower bound on boot

00:19:21,919 --> 00:19:27,649
time is still the time would take to

00:19:23,389 --> 00:19:29,690
transfer 16 gig over the network so that

00:19:27,649 --> 00:19:35,149
mean that you want a pretty good network

00:19:29,690 --> 00:19:38,990
for your remote cash okay the so here's

00:19:35,149 --> 00:19:41,720
the count of the message to the tune

00:19:38,990 --> 00:19:44,240
from the remote cache so the blue line

00:19:41,720 --> 00:19:47,010
there slowly total cow and we saw that

00:19:44,240 --> 00:19:49,290
you see in that day sir about 80 90

00:19:47,010 --> 00:19:51,090
thousand message boo-boo so a fair

00:19:49,290 --> 00:19:54,929
amount of a message

00:19:51,090 --> 00:19:57,030
now what's one peculiar behavior we're

00:19:54,929 --> 00:19:59,040
seeing is that it was showing up in the

00:19:57,030 --> 00:20:02,130
orange March August so these are the

00:19:59,040 --> 00:20:05,280
number of message that has a zero

00:20:02,130 --> 00:20:09,030
content so deity and the size they did

00:20:05,280 --> 00:20:11,100
here it was been written to is empty

00:20:09,030 --> 00:20:14,220
they're all written to being right to

00:20:11,100 --> 00:20:17,490
the printer a foul in a cast that has a

00:20:14,220 --> 00:20:19,970
zero sign so we don't know we have to

00:20:17,490 --> 00:20:21,870
look further to see what is coming from

00:20:19,970 --> 00:20:23,419
I'm not sure we're there such as the

00:20:21,870 --> 00:20:27,059
behavior of the way the

00:20:23,419 --> 00:20:29,880
strip is written or what is written is

00:20:27,059 --> 00:20:32,429
intended to work this way but if we can

00:20:29,880 --> 00:20:36,510
avoid this and potentially we can save a

00:20:32,429 --> 00:20:40,320
fair number of a message in too little

00:20:36,510 --> 00:20:46,049
cash about thirty percent okay so this

00:20:40,320 --> 00:20:49,290
show the something else we know is so

00:20:46,049 --> 00:20:52,320
this chart will show the number of write

00:20:49,290 --> 00:20:56,610
to the cast so this means at least are

00:20:52,320 --> 00:20:59,850
already update to the the cast for the

00:20:56,610 --> 00:21:02,040
build of that for the output bill okay

00:20:59,850 --> 00:21:05,309
so the blue chart showed the total

00:21:02,040 --> 00:21:08,690
number of right and the orange line

00:21:05,309 --> 00:21:13,160
showed the unique file being written for

00:21:08,690 --> 00:21:17,880
among this right so remember that the

00:21:13,160 --> 00:21:20,370
the name of the foul in the cast is from

00:21:17,880 --> 00:21:22,380
the hash table content so if you want

00:21:20,370 --> 00:21:24,240
you write to the same power again no

00:21:22,380 --> 00:21:26,130
it's not and it's never necessary and

00:21:24,240 --> 00:21:28,410
the gap between the blue chart and the

00:21:26,130 --> 00:21:31,290
orange show the number of this duplicate

00:21:28,410 --> 00:21:33,179
right so we traced back some of this

00:21:31,290 --> 00:21:35,250
right and they they actually come from

00:21:33,179 --> 00:21:39,660
different action so these are real

00:21:35,250 --> 00:21:42,600
legitimate right but it does show that

00:21:39,660 --> 00:21:44,580
if there's a way to detect us right and

00:21:42,600 --> 00:21:47,490
not repeat them then that could

00:21:44,580 --> 00:21:50,240
potentially be a saving as well and we

00:21:47,490 --> 00:21:53,040
can do this from the side of a basil

00:21:50,240 --> 00:21:55,710
blue server then we can just avoid all

00:21:53,040 --> 00:21:57,470
these right to the cache so that could

00:21:55,710 --> 00:22:04,149
be another potential saving

00:21:57,470 --> 00:22:07,820
right so I talk about how we manage the

00:22:04,149 --> 00:22:09,950
storage we saw that the volume to the

00:22:07,820 --> 00:22:11,259
cache is pretty near constant and the

00:22:09,950 --> 00:22:13,669
trade-off here is basically you know

00:22:11,259 --> 00:22:19,100
between reading from the cache and

00:22:13,669 --> 00:22:24,279
repeating the the action carrying out

00:22:19,100 --> 00:22:27,080
the completion again so you know if you

00:22:24,279 --> 00:22:28,279
design on the policy for evicting

00:22:27,080 --> 00:22:29,899
something in the cache that's something

00:22:28,279 --> 00:22:32,360
you want to think about how much time

00:22:29,899 --> 00:22:35,720
how much effort we would take to repeat

00:22:32,360 --> 00:22:39,500
that action the Mesa remote cache

00:22:35,720 --> 00:22:41,419
implement the listener use policy so one

00:22:39,500 --> 00:22:43,429
you have to delete something you just

00:22:41,419 --> 00:22:44,450
look for foul that hasn't been read for

00:22:43,429 --> 00:22:48,350
a while

00:22:44,450 --> 00:22:50,029
so what pretty well I mean how CIB oh it

00:22:48,350 --> 00:22:52,309
worked quite well in fact because we are

00:22:50,029 --> 00:22:55,850
will constantly move forward so if

00:22:52,309 --> 00:22:57,580
something hasn't been accessed for over

00:22:55,850 --> 00:23:00,350
one build and it's probably has been

00:22:57,580 --> 00:23:04,250
obeyed but with a later version so it's

00:23:00,350 --> 00:23:07,220
pretty safe to just delete it but if we

00:23:04,250 --> 00:23:10,100
are sharing the view output among many

00:23:07,220 --> 00:23:12,230
people then potentially someone could be

00:23:10,100 --> 00:23:15,039
reusing of someone to build all the

00:23:12,230 --> 00:23:21,289
output so in that case maybe we can

00:23:15,039 --> 00:23:24,110
maybe better to a big a file based on

00:23:21,289 --> 00:23:25,789
how frequently is used if we have so we

00:23:24,110 --> 00:23:27,950
need to have a way to account needy and

00:23:25,789 --> 00:23:29,480
the number of access where so so don't

00:23:27,950 --> 00:23:33,789
wanna believe you delete something which

00:23:29,480 --> 00:23:36,500
is a family nuts are not used frequently

00:23:33,789 --> 00:23:38,500
another way to decide is to look at the

00:23:36,500 --> 00:23:41,990
size so so he's a trade-off between

00:23:38,500 --> 00:23:45,549
deleting a few large file versus

00:23:41,990 --> 00:23:49,210
deleting a lot of small file so if we

00:23:45,549 --> 00:23:53,029
deleted him if you got fog and that it

00:23:49,210 --> 00:23:56,320
could shooting to improve the hit rate

00:23:53,029 --> 00:23:56,320
on the cache

00:23:56,590 --> 00:24:02,509
another approach is to look at the

00:23:59,149 --> 00:24:06,019
effort attack to compute to to carry out

00:24:02,509 --> 00:24:07,820
the action so that it might make sense

00:24:06,019 --> 00:24:10,320
to keep around something that takes a

00:24:07,820 --> 00:24:13,259
long time to do compute

00:24:10,320 --> 00:24:16,769
you know kick out something that is easy

00:24:13,259 --> 00:24:20,190
to compute a variation of that is to

00:24:16,769 --> 00:24:22,649
look at the content on file by looking

00:24:20,190 --> 00:24:25,710
at a file extension for sister

00:24:22,649 --> 00:24:28,679
I don't know found a d5 and Java and

00:24:25,710 --> 00:24:31,889
decide based on that so maybe an archive

00:24:28,679 --> 00:24:35,220
is easier to to produce because mostly

00:24:31,889 --> 00:24:38,309
just about second a lot of appetizer

00:24:35,220 --> 00:24:41,629
already been produced so these are

00:24:38,309 --> 00:24:44,639
different parts that we can think about

00:24:41,629 --> 00:24:47,539
now to implement these policies we have

00:24:44,639 --> 00:24:51,179
a couple of options we know that the the

00:24:47,539 --> 00:24:53,309
major remote cache already implemented

00:24:51,179 --> 00:24:55,049
the area code so it should be

00:24:53,309 --> 00:24:57,330
straightforward to go in there and

00:24:55,049 --> 00:25:01,519
extend it to add the other policy and

00:24:57,330 --> 00:25:05,340
give that this option to the to the user

00:25:01,519 --> 00:25:07,470
for the HTTP server they don't have a

00:25:05,340 --> 00:25:09,750
good way to run something in the

00:25:07,470 --> 00:25:12,450
background so it may make more sense to

00:25:09,750 --> 00:25:17,009
have a separate process use you just run

00:25:12,450 --> 00:25:19,529
as a daemon and in your in your cast

00:25:17,009 --> 00:25:21,570
over and it's just monitor the directory

00:25:19,529 --> 00:25:25,379
and then just go in and clean up file

00:25:21,570 --> 00:25:28,230
based on your policy now if we want to

00:25:25,379 --> 00:25:31,129
evaluate the different policy without

00:25:28,230 --> 00:25:36,200
having to implement them and run them on

00:25:31,129 --> 00:25:38,820
different bill then we found that me

00:25:36,200 --> 00:25:41,340
Razor Ramon cash endures put our a nice

00:25:38,820 --> 00:25:45,360
lock of road message so we can use those

00:25:41,340 --> 00:25:47,370
a lot to run trace difference simulation

00:25:45,360 --> 00:25:49,470
just like you know typically done would

00:25:47,370 --> 00:25:53,279
cache so that should give you a pretty

00:25:49,470 --> 00:25:55,620
good SMA for the different policy and if

00:25:53,279 --> 00:25:59,370
you can collect the time for it to lose

00:25:55,620 --> 00:26:03,889
the action then potentially you can

00:25:59,370 --> 00:26:07,289
estimate the bill time as well okay so

00:26:03,889 --> 00:26:11,850
that's our talk to recap we touch

00:26:07,289 --> 00:26:15,210
describe some additional option for

00:26:11,850 --> 00:26:18,990
deploying the remote cache the using the

00:26:15,210 --> 00:26:20,309
nodejs and using the HTTP server this

00:26:18,990 --> 00:26:22,580
code are available if you want to use

00:26:20,309 --> 00:26:25,580
them we did not

00:26:22,580 --> 00:26:26,900
implement a secure access but that's

00:26:25,580 --> 00:26:29,210
something that if just interesting we

00:26:26,900 --> 00:26:33,290
can add as well shouldn't take too much

00:26:29,210 --> 00:26:38,900
work and if I don't like to do a pull

00:26:33,290 --> 00:26:41,650
request we'll welcome as well and in my

00:26:38,900 --> 00:26:44,710
in my part I show some data that that

00:26:41,650 --> 00:26:47,390
potentially could points to some

00:26:44,710 --> 00:26:50,809
technique we can potentially be improved

00:26:47,390 --> 00:26:53,150
the cache performance and we look at

00:26:50,809 --> 00:26:57,260
some of the potential policy for

00:26:53,150 --> 00:27:01,059
managing the resource that's a talk if

00:26:57,260 --> 00:27:01,059
any question would like to

00:27:03,420 --> 00:27:09,640

YouTube URL: https://www.youtube.com/watch?v=u5m7V3ZRHLA


