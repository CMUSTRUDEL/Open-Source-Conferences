Title: BazelCon 2018 Day 1: Lightning Talks
Publication date: 2018-11-01
Playlist: BazelCon 2018
Description: 
	Connecting Applications with Protobuf and Bazel
Jamie Wahlin (TCN)

Android
Jingwen Chen (Google)

CMake in Bazel
Irina Chernushina (Google)

Fast, Correct Kubernetes Deployments with rules_k8s
Gregg Donovan (Etsy)

Starlark something something
Laurent Le Brun (Google)

Starlark code completion in VS Code
Andreea Bican (Google)

Fast continuous integration feedback with Bazel
Jodi Moran (Octogog)

Combining Nix and Bazel for completely hermetic builds
Mathieu Boespflug (Tweag.io)

WORKSPACE
Klaus Aehlig (Google)

Bazel Container
Xin Gao (Google)

Autogazelle: fast and convenient build file generation
Jay Conrod (Google) event: Bazelcon 2018; re_ty: Publish; product: Open Source - General; fullname: Jingwen Chen, Irina Chernushina, Laurent Le Brun, Andreea Bican;
Captions: 
	00:00:03,470 --> 00:00:08,639
my name is Jamie walling I'm a software

00:00:07,260 --> 00:00:10,290
engineer at TCN and today I will be

00:00:08,639 --> 00:00:15,990
speaking about connecting applications

00:00:10,290 --> 00:00:18,150
with protobuf and basil first off I want

00:00:15,990 --> 00:00:19,980
to introduce TC n TC n is a leading

00:00:18,150 --> 00:00:23,070
provider of cloud-based call center

00:00:19,980 --> 00:00:25,710
technology our products include inbound

00:00:23,070 --> 00:00:28,230
outbound speech IVR reporting and

00:00:25,710 --> 00:00:30,630
workforce optimization features we're

00:00:28,230 --> 00:00:32,880
based in the unlikely location of st.

00:00:30,630 --> 00:00:34,860
George Utah it's just an hour away from

00:00:32,880 --> 00:00:37,530
Zion National Park which is pictured

00:00:34,860 --> 00:00:41,300
here and yes I have done that hike it's

00:00:37,530 --> 00:00:44,340
terrifying but I highly recommend it

00:00:41,300 --> 00:00:48,090
TC n started out with a mono repo in

00:00:44,340 --> 00:00:50,160
1999 we had a small team a rapid

00:00:48,090 --> 00:00:53,129
development cycle and the mono repo

00:00:50,160 --> 00:00:57,359
worked wonderfully for us for a few

00:00:53,129 --> 00:00:59,160
years we our code base grew and we

00:00:57,359 --> 00:01:01,199
started facing complicated dependency

00:00:59,160 --> 00:01:03,660
management issues long build times and

00:01:01,199 --> 00:01:07,770
out of memory errors which forced us to

00:01:03,660 --> 00:01:11,100
migrate to multiple repositories in 2016

00:01:07,770 --> 00:01:14,850
we adopted protobuf and gr PC for the

00:01:11,100 --> 00:01:17,040
fourth version of our product as our

00:01:14,850 --> 00:01:19,229
number of repositories has multiplied

00:01:17,040 --> 00:01:21,420
over the past couple of years and our

00:01:19,229 --> 00:01:23,100
number of languages has increased it has

00:01:21,420 --> 00:01:25,740
become increasingly difficult to manage

00:01:23,100 --> 00:01:28,920
our produce these are some of the

00:01:25,740 --> 00:01:30,540
challenges our team has faced we've

00:01:28,920 --> 00:01:32,670
found it difficult to keep applications

00:01:30,540 --> 00:01:34,740
in sync for example if a developer

00:01:32,670 --> 00:01:36,750
updates a proto file on one repository

00:01:34,740 --> 00:01:38,670
and there are 10 others that depend on

00:01:36,750 --> 00:01:41,700
it they have to update those ten other

00:01:38,670 --> 00:01:43,290
repositories and if they forget which

00:01:41,700 --> 00:01:45,810
they would sometimes there would be

00:01:43,290 --> 00:01:47,399
unexpected failures we dealt with

00:01:45,810 --> 00:01:49,200
mismatched proto bindings

00:01:47,399 --> 00:01:51,000
we didn't generate any front-end proto

00:01:49,200 --> 00:01:52,860
bindings we struggled with

00:01:51,000 --> 00:01:55,619
multi-language compatibility issues and

00:01:52,860 --> 00:01:58,079
our proto's and the files were scattered

00:01:55,619 --> 00:02:00,030
across multiple repositories so it was

00:01:58,079 --> 00:02:02,909
time consuming to track down our

00:02:00,030 --> 00:02:04,950
contracts and expectations these

00:02:02,909 --> 00:02:06,570
challenges were negatively impacting our

00:02:04,950 --> 00:02:09,479
development velocity I need it to be

00:02:06,570 --> 00:02:11,670
addressed at the beginning of this year

00:02:09,479 --> 00:02:15,050
a few team members and I investigated

00:02:11,670 --> 00:02:17,790
basil and began to transition to it

00:02:15,050 --> 00:02:20,220
we started off by migrating individual

00:02:17,790 --> 00:02:22,410
repositories to Basel this included

00:02:20,220 --> 00:02:23,610
generating proto bindings with gr PC

00:02:22,410 --> 00:02:25,920
using Basil's

00:02:23,610 --> 00:02:27,150
existing rules and also their custom

00:02:25,920 --> 00:02:30,420
rules which we needed for our two

00:02:27,150 --> 00:02:31,770
in-house proto C plugins just as a side

00:02:30,420 --> 00:02:34,740
note these two plugins are really cool

00:02:31,770 --> 00:02:37,650
one generates a persistence layer for go

00:02:34,740 --> 00:02:38,880
from a proto file this one's open source

00:02:37,650 --> 00:02:41,459
there's a link at the end of the slides

00:02:38,880 --> 00:02:44,100
if you want to check it out and the

00:02:41,459 --> 00:02:46,140
second generates a Redux state from a

00:02:44,100 --> 00:02:48,120
proto file effectively bridging the gap

00:02:46,140 --> 00:02:51,750
between proto's and our application

00:02:48,120 --> 00:02:54,810
state next we consolidated our proto

00:02:51,750 --> 00:02:56,430
files into their own repository this was

00:02:54,810 --> 00:02:58,170
made possible by Basil's ability to

00:02:56,430 --> 00:03:02,150
generate proto bindings from multiple

00:02:58,170 --> 00:03:04,500
languages and by its caching mechanism

00:03:02,150 --> 00:03:06,660
next we ensure that our front and

00:03:04,500 --> 00:03:09,540
Applications remained in sync with our

00:03:06,660 --> 00:03:12,270
proto's in order to do this we adopt a

00:03:09,540 --> 00:03:14,910
typescript and utilized two of

00:03:12,270 --> 00:03:18,270
improbable as open source tools namely

00:03:14,910 --> 00:03:20,489
proto C gen TS and gr pc web we were

00:03:18,270 --> 00:03:22,890
able to reliably generate these proto

00:03:20,489 --> 00:03:26,730
bindings for typescript because of basil

00:03:22,890 --> 00:03:29,730
standardized sandbox environment we now

00:03:26,730 --> 00:03:32,010
benefit from compile time errors if our

00:03:29,730 --> 00:03:37,230
front-end applications are not in sync

00:03:32,010 --> 00:03:39,510
with our proto's next we moved to the

00:03:37,230 --> 00:03:41,549
mono repo went back to our roots this

00:03:39,510 --> 00:03:43,260
was made possible by Basil's fast builds

00:03:41,549 --> 00:03:46,739
remote caching and support for all the

00:03:43,260 --> 00:03:50,459
languages in our stack we faced several

00:03:46,739 --> 00:03:52,640
challenges along the way we discovered

00:03:50,459 --> 00:03:54,810
there was a big learning curve initially

00:03:52,640 --> 00:03:58,130
some rules were not mature at the time

00:03:54,810 --> 00:04:01,709
we needed them and our team had to

00:03:58,130 --> 00:04:04,470
sometimes forcefully adjust to new tools

00:04:01,709 --> 00:04:06,600
and development processes we even had a

00:04:04,470 --> 00:04:09,600
SAS controller that melted that was

00:04:06,600 --> 00:04:12,630
exciting and this was on the machine

00:04:09,600 --> 00:04:14,640
that was running all of our CI builds we

00:04:12,630 --> 00:04:15,930
think it was due to too much i/o so

00:04:14,640 --> 00:04:19,729
we've limited the number of course each

00:04:15,930 --> 00:04:19,729
basil build can use and so far so good

00:04:21,580 --> 00:04:27,200
now we think back to the challenges our

00:04:23,960 --> 00:04:29,630
team faced with proto's Basel helped us

00:04:27,200 --> 00:04:32,330
directly or indirectly tackle all of

00:04:29,630 --> 00:04:33,889
these challenges we now generate proto

00:04:32,330 --> 00:04:36,350
bindings for every language in our stack

00:04:33,889 --> 00:04:38,000
without complicated scripts we've

00:04:36,350 --> 00:04:39,740
consolidated all our proto files into a

00:04:38,000 --> 00:04:41,000
single directory so we know exactly

00:04:39,740 --> 00:04:44,120
where to look for contracts and

00:04:41,000 --> 00:04:45,590
expectations and we've transitioned to a

00:04:44,120 --> 00:04:47,150
mono repo which has synchronizer

00:04:45,590 --> 00:04:50,750
applications and streamlined the

00:04:47,150 --> 00:04:52,760
generation of proto bindings overall

00:04:50,750 --> 00:04:54,680
Basel has made it easier for our team to

00:04:52,760 --> 00:05:11,120
connect applications with protocol

00:04:54,680 --> 00:05:14,150
buffers thank you very much hi everyone

00:05:11,120 --> 00:05:16,669
I'm Jin I worked on Android rules in

00:05:14,150 --> 00:05:21,970
Basel and today I'll be giving a status

00:05:16,669 --> 00:05:21,970
and overview of the intros in Basel

00:05:23,200 --> 00:05:28,760
so what's available now what you can

00:05:26,690 --> 00:05:30,590
actually use now the Android rules to

00:05:28,760 --> 00:05:32,600
integrate the Android SDK indicate the

00:05:30,590 --> 00:05:35,780
repository rules but it is our own

00:05:32,600 --> 00:05:37,340
native it's our basil to build apps you

00:05:35,780 --> 00:05:40,010
have the Android binary and Android

00:05:37,340 --> 00:05:42,860
library rule to import Android ARS you

00:05:40,010 --> 00:05:45,800
have the Android a our import rule to

00:05:42,860 --> 00:05:48,590
run emulator and device tests you have

00:05:45,800 --> 00:05:50,180
the Android instrumentation tests to run

00:05:48,590 --> 00:05:52,850
robolectric tests you have the Android

00:05:50,180 --> 00:05:54,950
local test and then to Butte cache

00:05:52,850 --> 00:05:58,280
emulator images you have the Android

00:05:54,950 --> 00:06:01,010
device room it's fully integrated if

00:05:58,280 --> 00:06:02,900
Android studio the plugin was released

00:06:01,010 --> 00:06:09,260
open-source two years ago and this works

00:06:02,900 --> 00:06:12,080
on Windows Mac and Linux so as a summary

00:06:09,260 --> 00:06:13,910
this is the complete matrix of what we

00:06:12,080 --> 00:06:16,280
support right now and mr. F section

00:06:13,910 --> 00:06:20,080
exception of Android intrument agent has

00:06:16,280 --> 00:06:24,590
device and building apps on RBE

00:06:20,080 --> 00:06:26,300
everything is supported on Audrey OSS so

00:06:24,590 --> 00:06:27,890
performance we have been doing a lot of

00:06:26,300 --> 00:06:30,320
work on performance recently and we

00:06:27,890 --> 00:06:32,990
discovered we have addressed bottlenecks

00:06:30,320 --> 00:06:35,240
and achieve up to like 2.5 times speed

00:06:32,990 --> 00:06:39,530
in Android resource processing pipeline

00:06:35,240 --> 00:06:42,650
using persistent workers we also

00:06:39,530 --> 00:06:45,290
improved things like taxing workers for

00:06:42,650 --> 00:06:47,570
taxiing integrating LPD - and decoupling

00:06:45,290 --> 00:06:52,490
the Android resourcing processing

00:06:47,570 --> 00:06:53,680
pipeline and maybe yeah

00:06:52,490 --> 00:06:56,810
so we achieve got a fair bit of

00:06:53,680 --> 00:06:58,730
improvements here so there's a basic

00:06:56,810 --> 00:07:01,250
common core based on mobile install this

00:06:58,730 --> 00:07:05,300
is an alternative to base of boot and

00:07:01,250 --> 00:07:06,980
then ADB installing your app so this

00:07:05,300 --> 00:07:09,530
gives you this fast iterative

00:07:06,980 --> 00:07:12,170
development workflow and internally we

00:07:09,530 --> 00:07:16,720
have benchmarks and the rate one is for

00:07:12,170 --> 00:07:20,930
install this is a lot faster essentially

00:07:16,720 --> 00:07:23,060
so the introduced feature Java 8 the

00:07:20,930 --> 00:07:26,510
sugaring which allows you to use Java

00:07:23,060 --> 00:07:29,200
language features like lambdas and Java

00:07:26,510 --> 00:07:32,500
libraries like streams on Android

00:07:29,200 --> 00:07:36,310
there's a blog post by Kevin bear HOF

00:07:32,500 --> 00:07:38,600
can check this out for more information

00:07:36,310 --> 00:07:40,970
we have fell a lot about remote

00:07:38,600 --> 00:07:45,580
execution today and I'm happy to share

00:07:40,970 --> 00:07:47,960
that Android views to work on RB as well

00:07:45,580 --> 00:07:51,070
yeah and on the right you can see the

00:07:47,960 --> 00:07:55,960
new JSON profile generator from basil

00:07:51,070 --> 00:07:59,540
created by Tobias and I think yeah and

00:07:55,960 --> 00:08:02,750
this is actually in chrome tracer so you

00:07:59,540 --> 00:08:08,150
can actually see the full trace of your

00:08:02,750 --> 00:08:09,650
build in chrome Cortland Rose the

00:08:08,150 --> 00:08:11,240
community has created rooster Kotlin

00:08:09,650 --> 00:08:13,790
forbidden Colleen and they recently

00:08:11,240 --> 00:08:16,700
added support for bidding Colleen for

00:08:13,790 --> 00:08:18,620
Android using the Katie Android library

00:08:16,700 --> 00:08:21,290
Roo and this is available in the roof

00:08:18,620 --> 00:08:23,840
Scotland repository what we're working

00:08:21,290 --> 00:08:25,430
on right now we are actively migrating

00:08:23,840 --> 00:08:27,950
the routes of the beta server into the

00:08:25,430 --> 00:08:31,870
star lock this week our poster release

00:08:27,950 --> 00:08:36,350
cadence and it reduces the base of size

00:08:31,870 --> 00:08:39,800
it's available in roofs Android install

00:08:36,350 --> 00:08:42,140
v2 we are actively rewriting mobile

00:08:39,800 --> 00:08:43,880
install into Starla this is into a

00:08:42,140 --> 00:08:46,170
faster more incremental version of it

00:08:43,880 --> 00:08:48,720
and it works with apt to

00:08:46,170 --> 00:08:49,890
more work on performance improvements we

00:08:48,720 --> 00:08:51,420
are trying to come up with a

00:08:49,890 --> 00:08:55,190
benchmarking framework for tracking

00:08:51,420 --> 00:08:55,190
Bezos Android B performance over time

00:08:55,880 --> 00:09:00,030
emulator testing on RB this is a big one

00:08:58,380 --> 00:09:01,860
because right now if you want to launch

00:09:00,030 --> 00:09:04,830
nine emulators or in local machine you

00:09:01,860 --> 00:09:06,660
need a very beefy machine if we can do

00:09:04,830 --> 00:09:11,070
that on RBE that would be amazing like

00:09:06,660 --> 00:09:12,870
100 at the same time with minimal

00:09:11,070 --> 00:09:17,970
configuration so no changes to existing

00:09:12,870 --> 00:09:20,220
build future world we want to improve

00:09:17,970 --> 00:09:25,350
our dependency management right now it's

00:09:20,220 --> 00:09:27,990
a bit manual so on that migration

00:09:25,350 --> 00:09:29,370
support we want to create tooling

00:09:27,990 --> 00:09:32,220
guidance and documentation from moving

00:09:29,370 --> 00:09:34,320
Android boots to Basel faster interests

00:09:32,220 --> 00:09:37,140
to do blogging releases we are going to

00:09:34,320 --> 00:09:39,450
refresh our rules into for example we

00:09:37,140 --> 00:09:41,160
hundred support dynamic apps using the

00:09:39,450 --> 00:09:44,460
Android module we want to split up

00:09:41,160 --> 00:09:47,090
building of the logic a bit logic into

00:09:44,460 --> 00:09:49,560
Android application and your library and

00:09:47,090 --> 00:09:52,910
finally we have we want to also

00:09:49,560 --> 00:09:52,910
contribute more to the Colleen Rose

00:09:53,000 --> 00:09:57,630
that's it that's it if you have any

00:09:55,500 --> 00:10:11,850
questions feel free to approach me or my

00:09:57,630 --> 00:10:14,340
tío alex back that's it thank you hello

00:10:11,850 --> 00:10:18,420
everyone my name is Irina and I work in

00:10:14,340 --> 00:10:22,250
Basel team let's speak about C++ project

00:10:18,420 --> 00:10:25,670
which uses puzzle as the build system

00:10:22,250 --> 00:10:27,870
very probably that project will use some

00:10:25,670 --> 00:10:30,570
third-party libraries and very probably

00:10:27,870 --> 00:10:32,910
those third-party libraries will not use

00:10:30,570 --> 00:10:37,250
puzzle but will use some other built

00:10:32,910 --> 00:10:41,010
systems such as C make or configure make

00:10:37,250 --> 00:10:46,440
the question is how can we build such

00:10:41,010 --> 00:10:48,570
project one way would be actually bring

00:10:46,440 --> 00:10:51,780
those third-party libraries to puzzle

00:10:48,570 --> 00:10:54,060
this requires the worst engineering of

00:10:51,780 --> 00:10:57,720
the existing build scripts which is a

00:10:54,060 --> 00:11:00,089
non-trivial task takes time and doesn't

00:10:57,720 --> 00:11:03,730
scale well with many library

00:11:00,089 --> 00:11:06,940
the other way is to actually run the

00:11:03,730 --> 00:11:10,930
builds of those external systems as part

00:11:06,940 --> 00:11:12,699
of our build and bring results puzzle if

00:11:10,930 --> 00:11:16,050
you create a rule for each external

00:11:12,699 --> 00:11:19,389
system then of the complexity of dealing

00:11:16,050 --> 00:11:22,060
visit will be inside the rule and so the

00:11:19,389 --> 00:11:25,149
work for bringing each dependency in our

00:11:22,060 --> 00:11:27,459
project will be minimal this goes well

00:11:25,149 --> 00:11:32,050
and gives user the choice of gradual

00:11:27,459 --> 00:11:34,779
adoption of puzzle this is what puzzle

00:11:32,050 --> 00:11:40,029
team is working on now this is a github

00:11:34,779 --> 00:11:43,300
project of course and start work so

00:11:40,029 --> 00:11:45,279
let's have a look at the example how can

00:11:43,300 --> 00:11:48,579
group in the build file let's say we

00:11:45,279 --> 00:11:50,620
have C make external rule which we

00:11:48,579 --> 00:11:54,160
supply with the sources and dependencies

00:11:50,620 --> 00:11:58,329
and then we can pass that target into

00:11:54,160 --> 00:12:01,029
the city library or CC binary some

00:11:58,329 --> 00:12:03,939
design highlights since there are so

00:12:01,029 --> 00:12:05,769
many other build systems in the world we

00:12:03,939 --> 00:12:07,810
do not want to build individual rules

00:12:05,769 --> 00:12:13,360
but we want to create it as a star-like

00:12:07,810 --> 00:12:20,170
framework easily expandable we model the

00:12:13,360 --> 00:12:23,639
built of the libraries as black box with

00:12:20,170 --> 00:12:28,180
both configure and execute steps inside

00:12:23,639 --> 00:12:30,220
one by selection as it is the normal by

00:12:28,180 --> 00:12:33,459
selection we would benefit from caching

00:12:30,220 --> 00:12:35,949
and since you do not change the versions

00:12:33,459 --> 00:12:39,899
of your libraries that often the cash

00:12:35,949 --> 00:12:42,339
values is going to live relatively long

00:12:39,899 --> 00:12:44,949
we want the user to have the full

00:12:42,339 --> 00:12:47,860
control over the external build that's

00:12:44,949 --> 00:12:50,920
why we provide the possibility to pass

00:12:47,860 --> 00:12:55,809
any options to the external system and

00:12:50,920 --> 00:12:58,899
also add some parts to the underlying

00:12:55,809 --> 00:13:01,750
shell script our rules should

00:12:58,899 --> 00:13:04,660
interoperate with basil read basil

00:13:01,750 --> 00:13:07,329
settings and suppose pass to chain so

00:13:04,660 --> 00:13:12,069
that the user doesn't have to define the

00:13:07,329 --> 00:13:13,270
same things two times and we also need

00:13:12,069 --> 00:13:16,360
to access suppose possible

00:13:13,270 --> 00:13:18,790
nation of our dependencies and provide

00:13:16,360 --> 00:13:22,360
such information the good news is it is

00:13:18,790 --> 00:13:26,880
already available in star lark in Basel

00:13:22,360 --> 00:13:30,520
0:17 we already have seen my cruel

00:13:26,880 --> 00:13:34,030
regime and we are working on how to

00:13:30,520 --> 00:13:37,530
tools and configure make our next plans

00:13:34,030 --> 00:13:42,250
also include remote execution support

00:13:37,530 --> 00:13:44,110
this is our github repository we would

00:13:42,250 --> 00:13:47,220
be happy for your feedback and

00:13:44,110 --> 00:13:54,330
contribution thank you

00:13:47,220 --> 00:13:54,330
[Applause]

00:14:05,050 --> 00:14:16,570
hello I'm gonna be speaking to you about

00:14:14,740 --> 00:14:18,130
why do you use rules kubernetes and

00:14:16,570 --> 00:14:23,140
rules docker to deploy your basil

00:14:18,130 --> 00:14:24,520
applications to kubernetes and how it

00:14:23,140 --> 00:14:26,500
works to give you fast correct deploys

00:14:24,520 --> 00:14:28,600
I'm also going to offer five general

00:14:26,500 --> 00:14:34,060
communities with basil tips all in five

00:14:28,600 --> 00:14:35,710
minutes kubernetes is smart enough to

00:14:34,060 --> 00:14:37,450
deploy only what you change and it does

00:14:35,710 --> 00:14:39,550
so by hashing its inputs just like basil

00:14:37,450 --> 00:14:41,080
these hashes include both the yamo and

00:14:39,550 --> 00:14:44,440
the exact versions of the containers

00:14:41,080 --> 00:14:45,880
that you're running taking advantage of

00:14:44,440 --> 00:14:47,530
incremental deployment in kubernetes

00:14:45,880 --> 00:14:49,330
requires that you can deterministically

00:14:47,530 --> 00:14:51,040
generate all of your inputs including

00:14:49,330 --> 00:14:53,050
your containers rules including your

00:14:51,040 --> 00:14:54,280
containers rules docker provides rules

00:14:53,050 --> 00:14:56,590
for generating container images

00:14:54,280 --> 00:14:58,780
deterministically allow you to build a

00:14:56,590 --> 00:15:01,950
single repeatable package from base

00:14:58,780 --> 00:15:04,660
container to your own application code

00:15:01,950 --> 00:15:07,930
rules kubernetes builds on this it takes

00:15:04,660 --> 00:15:10,210
it as a set of it takes as input a set

00:15:07,930 --> 00:15:11,740
of docker containers and an input

00:15:10,210 --> 00:15:13,360
kubernetes Yamma with container

00:15:11,740 --> 00:15:15,100
reference placeholders builds your

00:15:13,360 --> 00:15:17,800
containers pushes them to the container

00:15:15,100 --> 00:15:19,450
registry gets the shot 256 of each

00:15:17,800 --> 00:15:22,300
container image and then replaces those

00:15:19,450 --> 00:15:25,330
placeholders with the resolved sha-256

00:15:22,300 --> 00:15:27,760
references this approach really shines

00:15:25,330 --> 00:15:29,440
with a multi application mono repo when

00:15:27,760 --> 00:15:30,940
you change shared libraries Debian files

00:15:29,440 --> 00:15:32,740
tooling etc you need to know which

00:15:30,940 --> 00:15:34,090
components need to be deployed in a

00:15:32,740 --> 00:15:35,530
simple application you might be able to

00:15:34,090 --> 00:15:38,800
keep this in your head it's Gale you

00:15:35,530 --> 00:15:40,930
need automation with this approach we

00:15:38,800 --> 00:15:42,550
avoid two problems under deploying not

00:15:40,930 --> 00:15:44,950
deploying change components leaving them

00:15:42,550 --> 00:15:46,120
unvalidated on master and over deploying

00:15:44,950 --> 00:15:49,170
waiting for potentially expensive

00:15:46,120 --> 00:15:52,300
rollouts despite not having made changes

00:15:49,170 --> 00:15:53,800
we can radically simplify our CI CD flow

00:15:52,300 --> 00:15:55,810
we can have a single pipeline for

00:15:53,800 --> 00:15:57,850
building testing and redeploying all of

00:15:55,810 --> 00:15:59,320
our applications relying on basil to

00:15:57,850 --> 00:16:00,970
negotiate what actually needs to be

00:15:59,320 --> 00:16:04,660
deployed with the container registry in

00:16:00,970 --> 00:16:06,160
kubernetes in order to understand how to

00:16:04,660 --> 00:16:08,170
take advantage of what basil gives us

00:16:06,160 --> 00:16:09,730
worth diving into how it works at a low

00:16:08,170 --> 00:16:11,200
level how does basil negotiate this

00:16:09,730 --> 00:16:15,070
reconciliation with the container

00:16:11,200 --> 00:16:16,720
registry in kubernetes so just what is a

00:16:15,070 --> 00:16:17,350
docker container it's an ordered list of

00:16:16,720 --> 00:16:20,440
tarballs

00:16:17,350 --> 00:16:22,630
presenting file system changes additions

00:16:20,440 --> 00:16:24,820
edits and deletions each layer is

00:16:22,630 --> 00:16:26,830
represented as a shot to 56 of the

00:16:24,820 --> 00:16:30,630
uncompressed contents the overall image

00:16:26,830 --> 00:16:33,550
is a 256 of the layers and the metadata

00:16:30,630 --> 00:16:35,560
rules docker builds these layers with

00:16:33,550 --> 00:16:37,750
star Lark and Python not having to run

00:16:35,560 --> 00:16:40,300
the docker client or the daemon

00:16:37,750 --> 00:16:42,400
simplifies build NCI removes the issues

00:16:40,300 --> 00:16:44,170
with building docker images from within

00:16:42,400 --> 00:16:46,030
a container and allows Basil's

00:16:44,170 --> 00:16:49,690
parallelism to speed container layer

00:16:46,030 --> 00:16:52,600
building the standard container registry

00:16:49,690 --> 00:16:54,420
v2 API provides caching from the local

00:16:52,600 --> 00:16:57,790
build to the remote container registry

00:16:54,420 --> 00:17:00,730
rules docker uses HTTP head requests to

00:16:57,790 --> 00:17:03,550
check for existing sha-256 of an already

00:17:00,730 --> 00:17:07,510
cached container image in the sha-256 of

00:17:03,550 --> 00:17:09,970
each container layer finally kubernetes

00:17:07,510 --> 00:17:11,530
deployment hashes the pod template to

00:17:09,970 --> 00:17:13,720
determine if your application needs to

00:17:11,530 --> 00:17:15,250
be redeployed if the pod template hash

00:17:13,720 --> 00:17:17,110
is unchanged there's no need for a

00:17:15,250 --> 00:17:19,240
rollout and with this you have the

00:17:17,110 --> 00:17:22,180
benefits of basil's repeatability from

00:17:19,240 --> 00:17:22,510
source to deployment and now for the

00:17:22,180 --> 00:17:24,790
tips

00:17:22,510 --> 00:17:26,740
many kubernetes applications don't need

00:17:24,790 --> 00:17:28,150
a full operating system and can simply

00:17:26,740 --> 00:17:31,240
package up their direct and runtime

00:17:28,150 --> 00:17:33,340
dependencies for Java that's G Lib C SSL

00:17:31,240 --> 00:17:35,650
in the JVM the distro list project

00:17:33,340 --> 00:17:37,980
provides simple base image and rules

00:17:35,650 --> 00:17:40,030
docker provides rules to utilize them

00:17:37,980 --> 00:17:41,710
but sometimes you do need a full

00:17:40,030 --> 00:17:43,330
operating system and a package manager

00:17:41,710 --> 00:17:45,010
in that case the aggregate Debian

00:17:43,330 --> 00:17:47,320
package rules from basil toolchains

00:17:45,010 --> 00:17:49,390
provides transient transitive debian

00:17:47,320 --> 00:17:52,200
package resolution in a deterministic

00:17:49,390 --> 00:17:52,200
basil friendly way

00:17:54,100 --> 00:17:57,640
there are many kubernetes workflow tools

00:17:55,900 --> 00:17:59,980
besides rules kubernetes which everyone

00:17:57,640 --> 00:18:01,840
do you use for first sha-256 references

00:17:59,980 --> 00:18:04,630
for first party code this is supported

00:18:01,840 --> 00:18:05,740
by default and scaffold for example and

00:18:04,630 --> 00:18:07,300
most of them will still allow you to

00:18:05,740 --> 00:18:11,650
build your docker images via rules

00:18:07,300 --> 00:18:13,960
docker most kubernetes users will

00:18:11,650 --> 00:18:15,670
eventually face the wall of Yama problem

00:18:13,960 --> 00:18:18,220
how to retain thousands of lines of

00:18:15,670 --> 00:18:19,870
configuration instead consider using the

00:18:18,220 --> 00:18:21,940
kubernetes client api rather than the

00:18:19,870 --> 00:18:23,590
amyl for complex applications you get

00:18:21,940 --> 00:18:25,390
intellisense compiler support and other

00:18:23,590 --> 00:18:26,370
first-class language tools lacking in

00:18:25,390 --> 00:18:28,870
llamo

00:18:26,370 --> 00:18:30,610
the plumie project is a bit of an

00:18:28,870 --> 00:18:31,180
inspiration here it allows you to create

00:18:30,610 --> 00:18:32,890
create

00:18:31,180 --> 00:18:35,380
cloud resources projects clusters

00:18:32,890 --> 00:18:37,750
buckets etc and kubernetes objects with

00:18:35,380 --> 00:18:39,850
real programming languages not dsls it's

00:18:37,750 --> 00:18:41,560
a reflection alternative to gamal and

00:18:39,850 --> 00:18:44,440
other configured limited configuration

00:18:41,560 --> 00:18:45,790
languages finally if you're using docker

00:18:44,440 --> 00:18:47,530
and kubernetes you may also be using

00:18:45,790 --> 00:18:49,090
Gravano for graphing my colleague yet

00:18:47,530 --> 00:18:51,130
see Kevin Gessner has written Basel

00:18:49,090 --> 00:18:53,830
rules for creating parameterize Allegra

00:18:51,130 --> 00:18:55,150
fauna dashboards with Python and

00:18:53,830 --> 00:18:57,540
installing them in a docker container

00:18:55,150 --> 00:19:00,250
running a properly configured gravano

00:18:57,540 --> 00:19:01,840
thank you for coming and please contact

00:19:00,250 --> 00:19:03,590
me at the conference if you have any

00:19:01,840 --> 00:19:10,930
questions

00:19:03,590 --> 00:19:10,930
[Applause]

00:19:29,520 --> 00:19:39,850
hi I am local so I have been working on

00:19:35,320 --> 00:19:41,830
a stock so stock is a language show you

00:19:39,850 --> 00:19:44,650
used from whiting built and BTL files

00:19:41,830 --> 00:19:47,530
and I will give you an update so what

00:19:44,650 --> 00:19:57,130
we've been working on about the language

00:19:47,530 --> 00:20:00,669
and mostly about it's a tooling so so if

00:19:57,130 --> 00:20:01,900
you've ever heard the name is Kayla just

00:20:00,669 --> 00:20:07,000
forget about it

00:20:01,900 --> 00:20:11,500
it's called Starla okay so we've been

00:20:07,000 --> 00:20:13,270
working on trying to simplify the build

00:20:11,500 --> 00:20:16,630
a pie so the big focus was on

00:20:13,270 --> 00:20:20,470
simplifying the words and making them

00:20:16,630 --> 00:20:26,559
simpler to to use and and so simplifies

00:20:20,470 --> 00:20:28,600
the API and so we we our goal is to make

00:20:26,559 --> 00:20:30,900
sure that everything is stable so every

00:20:28,600 --> 00:20:37,179
function should be properly documented

00:20:30,900 --> 00:20:39,880
with nice examples easy to use or we

00:20:37,179 --> 00:20:42,870
should remove them and remove it so we

00:20:39,880 --> 00:20:47,140
are not yet but so when working on it

00:20:42,870 --> 00:20:51,460
and so we our focus is to get stability

00:20:47,140 --> 00:20:53,530
before Basel 1.0 so this is just a list

00:20:51,460 --> 00:20:55,480
of things we've been working on for them

00:20:53,530 --> 00:20:58,990
for the first one City detection stud

00:20:55,480 --> 00:21:01,929
arcs so if you white star lock holes you

00:20:58,990 --> 00:21:06,450
might want to use it it will allow you

00:21:01,929 --> 00:21:09,850
to create more efficient comment lines

00:21:06,450 --> 00:21:12,250
data configuration has been removed so

00:21:09,850 --> 00:21:14,500
that also nice simplification if you've

00:21:12,250 --> 00:21:17,320
seen that before and a few other things

00:21:14,500 --> 00:21:20,169
and we've so we have also support

00:21:17,320 --> 00:21:26,110
represent away first a lot with complete

00:21:20,169 --> 00:21:28,570
language specification so we have also

00:21:26,110 --> 00:21:31,350
been working on a lot of photos so when

00:21:28,570 --> 00:21:35,720
one of them is build a fire

00:21:31,350 --> 00:21:39,950
it has been for some time but it can no

00:21:35,720 --> 00:21:42,780
format PCL files so this is a problem

00:21:39,950 --> 00:21:45,630
production-ready we were using it at

00:21:42,780 --> 00:21:49,650
Google before we we we have we formatted

00:21:45,630 --> 00:21:55,380
all our 50,000 vigil files and if you

00:21:49,650 --> 00:21:57,900
deposit a check so it's working on top

00:21:55,380 --> 00:22:01,370
of that we have a builder so they are

00:21:57,900 --> 00:22:05,670
not many news on this front it does that

00:22:01,370 --> 00:22:08,100
so if you want to edit your build files

00:22:05,670 --> 00:22:09,960
automatically so I know you have lots of

00:22:08,100 --> 00:22:11,400
them or you want to do that from the

00:22:09,960 --> 00:22:13,800
script you can add or in with

00:22:11,400 --> 00:22:17,100
dependencies easily with command line

00:22:13,800 --> 00:22:19,350
interface you can also use a good API if

00:22:17,100 --> 00:22:21,600
you want to do more complex code

00:22:19,350 --> 00:22:24,450
transformation like we name a variable

00:22:21,600 --> 00:22:24,900
across the entire code base these kind

00:22:24,450 --> 00:22:28,590
of things

00:22:24,900 --> 00:22:32,070
this is all production ready we have

00:22:28,590 --> 00:22:34,170
been working on a linter so we already

00:22:32,070 --> 00:22:35,810
had a linter so we are working on a

00:22:34,170 --> 00:22:39,150
replacement

00:22:35,810 --> 00:22:43,880
the code has been submitted to this you

00:22:39,150 --> 00:22:43,880
can try it it might work or maybe soon

00:22:45,170 --> 00:22:51,620
and so so having a linter is nice but

00:22:50,280 --> 00:22:55,010
most of the time you don't want to

00:22:51,620 --> 00:22:57,720
manually with all the warnings and

00:22:55,010 --> 00:22:58,850
yourself so we are providing a new

00:22:57,720 --> 00:23:01,380
command

00:22:58,850 --> 00:23:04,830
so with beautify you to automatically

00:23:01,380 --> 00:23:08,990
apply fixes to to your build and vigil

00:23:04,830 --> 00:23:12,000
files and is it important as well making

00:23:08,990 --> 00:23:14,790
changes to basil so incompatible changes

00:23:12,000 --> 00:23:18,180
and you want to keep in your car working

00:23:14,790 --> 00:23:20,640
with basil so the also this has been

00:23:18,180 --> 00:23:21,060
submitted today we are going to work on

00:23:20,640 --> 00:23:23,400
it

00:23:21,060 --> 00:23:27,690
contributions are welcome because we can

00:23:23,400 --> 00:23:30,290
add more automated fixes we have been

00:23:27,690 --> 00:23:34,800
working also on documentation generation

00:23:30,290 --> 00:23:36,480
so there was a tool called ok doc it was

00:23:34,800 --> 00:23:39,660
not working well so there's a way

00:23:36,480 --> 00:23:42,690
basement that is coming soon like in the

00:23:39,660 --> 00:23:45,090
next few months that should make things

00:23:42,690 --> 00:23:47,730
much easier for people who might

00:23:45,090 --> 00:23:53,519
and want to provide documentation for

00:23:47,730 --> 00:23:55,620
your yourself and we have debugger so

00:23:53,519 --> 00:23:59,159
typically when you have complex code you

00:23:55,620 --> 00:24:01,529
want to you might want to debug it and

00:23:59,159 --> 00:24:03,960
have a Boyd point and take you to line

00:24:01,529 --> 00:24:07,259
by in line so when you have complex data

00:24:03,960 --> 00:24:11,129
like code you will be able to use a

00:24:07,259 --> 00:24:12,749
debugger so there's a plugin that will

00:24:11,129 --> 00:24:18,509
be submitted in the next few months as

00:24:12,749 --> 00:24:20,940
well and IntelliJ and finally shin in

00:24:18,509 --> 00:24:25,080
any ideas what you really want is code

00:24:20,940 --> 00:24:27,330
completion like you write in your busy

00:24:25,080 --> 00:24:32,809
file and you want to see what what

00:24:27,330 --> 00:24:32,809
functions are available and completion

00:24:36,260 --> 00:24:42,899
[Applause]

00:24:40,759 --> 00:24:44,220
thanks for running for introducing my

00:24:42,899 --> 00:24:45,509
project I've been working in the

00:24:44,220 --> 00:24:47,909
baseball team for the last four months

00:24:45,509 --> 00:24:49,980
and I've been working around integrating

00:24:47,909 --> 00:24:51,600
style arc in an ID all those nice

00:24:49,980 --> 00:24:54,659
features that can speed up your coding

00:24:51,600 --> 00:24:56,700
process so first and foremost the

00:24:54,659 --> 00:24:58,080
project it's not yet open service the

00:24:56,700 --> 00:25:00,480
plan is to release it at the beginning

00:24:58,080 --> 00:25:01,980
of next year so you can still try out

00:25:00,480 --> 00:25:06,450
and see for yourself how all the

00:25:01,980 --> 00:25:07,830
features work okay so when I say all the

00:25:06,450 --> 00:25:09,830
features I mean the following four I

00:25:07,830 --> 00:25:12,419
mean code completion go to definition

00:25:09,830 --> 00:25:13,860
signature help and Diagnostics all those

00:25:12,419 --> 00:25:16,830
her features are implemented in a

00:25:13,860 --> 00:25:18,840
language server which means that it has

00:25:16,830 --> 00:25:20,789
behind it the language server protocol

00:25:18,840 --> 00:25:22,980
which means that you can plug it in in

00:25:20,789 --> 00:25:25,970
any IDE that supports it so you can have

00:25:22,980 --> 00:25:29,249
same features and same implementation in

00:25:25,970 --> 00:25:33,029
vs code in eclipse in vim in Emacs and a

00:25:29,249 --> 00:25:35,070
few others so first and foremost it's

00:25:33,029 --> 00:25:37,850
code completion so that that was the

00:25:35,070 --> 00:25:40,350
first feature that I implemented and I

00:25:37,850 --> 00:25:41,759
think the coolest thing about it is that

00:25:40,350 --> 00:25:44,820
you know in a language like Star lock

00:25:41,759 --> 00:25:46,980
which is new and not yet widely known I

00:25:44,820 --> 00:25:49,049
think it's way easier to learn it

00:25:46,980 --> 00:25:50,850
because it gives you nice suggestions it

00:25:49,049 --> 00:25:54,119
gives you relevant suggestions it gives

00:25:50,850 --> 00:25:56,369
you context over suggestions and for

00:25:54,119 --> 00:25:58,659
example you have all the loaded symbols

00:25:56,369 --> 00:26:00,429
you have function names

00:25:58,659 --> 00:26:04,149
their names everything that you declare

00:26:00,429 --> 00:26:05,919
inside a file and also all the buildings

00:26:04,149 --> 00:26:07,509
and I think it's pretty nice to have the

00:26:05,919 --> 00:26:09,399
buildings because you know I don't have

00:26:07,509 --> 00:26:12,009
to go back and forth between your IDE

00:26:09,399 --> 00:26:14,019
and the specs and the syntax and the

00:26:12,009 --> 00:26:16,960
documentation you have everything there

00:26:14,019 --> 00:26:18,009
so you have in context actions you don't

00:26:16,960 --> 00:26:21,129
need to know that there are three

00:26:18,009 --> 00:26:23,289
functions you know it because it's there

00:26:21,129 --> 00:26:26,169
so you know the name you know the

00:26:23,289 --> 00:26:29,830
required parameter the return type and

00:26:26,169 --> 00:26:30,970
also the official documentation and then

00:26:29,830 --> 00:26:33,700
what we are doing is that we're trying

00:26:30,970 --> 00:26:36,759
to kind of improve the completion with

00:26:33,700 --> 00:26:40,720
some type inference and we based this on

00:26:36,759 --> 00:26:42,849
some cases and the first one it's we

00:26:40,720 --> 00:26:44,499
look at VAR and by looking at the right

00:26:42,849 --> 00:26:46,899
hand side we know that it's a string and

00:26:44,499 --> 00:26:48,609
then knowing that void string then we

00:26:46,899 --> 00:26:51,340
can understand that greeting it's a

00:26:48,609 --> 00:26:52,899
string to so then knowing that greeting

00:26:51,340 --> 00:26:55,090
is a string then we can actually give

00:26:52,899 --> 00:26:57,940
you suggestions that are relevant so all

00:26:55,090 --> 00:27:01,479
the building functions were string then

00:26:57,940 --> 00:27:03,419
this is a nice fun what we're doing

00:27:01,479 --> 00:27:05,590
we're basing this on the assumption that

00:27:03,419 --> 00:27:09,789
programmers are decent and they follow

00:27:05,590 --> 00:27:12,519
conventions so while we're doing that

00:27:09,789 --> 00:27:13,929
we're looking at the dock strings and in

00:27:12,519 --> 00:27:15,759
this case we can understand that the

00:27:13,929 --> 00:27:16,720
parameter C of G is of type

00:27:15,759 --> 00:27:21,009
configuration

00:27:16,720 --> 00:27:22,509
just because you specify that then we

00:27:21,009 --> 00:27:24,460
have pad completion and I mentioned that

00:27:22,509 --> 00:27:25,749
we have relevant suggestions so when

00:27:24,460 --> 00:27:27,580
you're inside a lot that we actually

00:27:25,749 --> 00:27:29,349
give you suggestions for paths that you

00:27:27,580 --> 00:27:31,389
can load and then once you have the

00:27:29,349 --> 00:27:33,639
loaded path then we give you suggestions

00:27:31,389 --> 00:27:35,979
for symbols that you can load from that

00:27:33,639 --> 00:27:37,869
path and the next one it's go to

00:27:35,979 --> 00:27:39,609
definition and you know it's pretty nice

00:27:37,869 --> 00:27:41,710
to just jump around in a file and see

00:27:39,609 --> 00:27:44,529
you're always like find in the global

00:27:41,710 --> 00:27:46,450
scope or inside a function body but I

00:27:44,529 --> 00:27:48,340
think the nicest keys is when you load

00:27:46,450 --> 00:27:50,590
something and I'm going to use it it

00:27:48,340 --> 00:27:52,659
actually jumps to the definition so

00:27:50,590 --> 00:27:54,909
opens the file and places your cursor

00:27:52,659 --> 00:27:57,220
where it's defined so you know what

00:27:54,909 --> 00:27:59,109
you're using and then it's signature

00:27:57,220 --> 00:28:01,720
help and signature help is this text box

00:27:59,109 --> 00:28:03,429
that you have behind above your cursor

00:28:01,720 --> 00:28:06,460
when you're inside a function call and

00:28:03,429 --> 00:28:08,320
just tells you the many parameters that

00:28:06,460 --> 00:28:11,249
you have to fill in when you call the

00:28:08,320 --> 00:28:12,429
function and the last one it's

00:28:11,249 --> 00:28:15,610
Diagnostics

00:28:12,429 --> 00:28:16,990
and diagnostics are the result of

00:28:15,610 --> 00:28:19,630
calling billdozer

00:28:16,990 --> 00:28:21,610
and what we're doing is just to render

00:28:19,630 --> 00:28:24,539
all the warnings and all the errors in

00:28:21,610 --> 00:28:28,270
the UI so you can just catch them early

00:28:24,539 --> 00:28:30,100
yeah that's been my project oh those are

00:28:28,270 --> 00:28:33,010
all the features that will soon be

00:28:30,100 --> 00:28:54,309
available so just check it out and make

00:28:33,010 --> 00:28:55,049
sure you're trying hi everyone my name

00:28:54,309 --> 00:29:00,159
is Jodi

00:28:55,049 --> 00:29:02,590
so in my experience making developer

00:29:00,159 --> 00:29:04,690
feedback loops shorter is win-win

00:29:02,590 --> 00:29:07,570
it makes your code better and it makes

00:29:04,690 --> 00:29:09,940
you happier so why don't exist in

00:29:07,570 --> 00:29:11,169
commercially available CI tools go

00:29:09,940 --> 00:29:15,190
further to give you high quality

00:29:11,169 --> 00:29:17,980
feedback faster the project I'm going to

00:29:15,190 --> 00:29:22,000
show you today is my sketch of the ideal

00:29:17,980 --> 00:29:23,980
CI I had two goals in mind first of all

00:29:22,000 --> 00:29:26,440
I want to give you feedback as fast as

00:29:23,980 --> 00:29:28,000
possible the feedback should be fast

00:29:26,440 --> 00:29:29,740
enough so that you can stay in flow

00:29:28,000 --> 00:29:33,130
while writing code and not have to do

00:29:29,740 --> 00:29:35,890
any context switching second I want to

00:29:33,130 --> 00:29:37,390
give you better feedback for example I

00:29:35,890 --> 00:29:39,309
could tell you before you push to the

00:29:37,390 --> 00:29:41,799
upstream whether or not your changes

00:29:39,309 --> 00:29:43,960
will integrate with it I could also tell

00:29:41,799 --> 00:29:45,730
you before you push to the upstream how

00:29:43,960 --> 00:29:50,409
much an impact your changes are going to

00:29:45,730 --> 00:29:52,750
have on the system I decided to build a

00:29:50,409 --> 00:29:55,390
CI specific to basil rather than

00:29:52,750 --> 00:29:57,220
supporting many build tools because I

00:29:55,390 --> 00:30:00,640
think it will provide a better developer

00:29:57,220 --> 00:30:02,890
experience basil speed is of course the

00:30:00,640 --> 00:30:05,440
foundation for fast feedback and its

00:30:02,890 --> 00:30:09,070
extensibility makes CI for multi

00:30:05,440 --> 00:30:11,770
language systems simpler but perhaps

00:30:09,070 --> 00:30:13,299
most importantly basil gives me access

00:30:11,770 --> 00:30:15,730
to the abstract graph structure for the

00:30:13,299 --> 00:30:17,289
build which allows me to ride much

00:30:15,730 --> 00:30:23,409
better feedback than would otherwise be

00:30:17,289 --> 00:30:24,760
possible okay enough introduction now

00:30:23,409 --> 00:30:25,840
let's take a look at what the project

00:30:24,760 --> 00:30:28,750
actually does

00:30:25,840 --> 00:30:30,970
it consists of a command-line clients

00:30:28,750 --> 00:30:34,029
that you run locally and a remote server

00:30:30,970 --> 00:30:36,190
that's private to you every few seconds

00:30:34,029 --> 00:30:37,929
the client detects any changes that

00:30:36,190 --> 00:30:39,820
you've made locally that you haven't yet

00:30:37,929 --> 00:30:42,850
pushed to the upstream and it sends

00:30:39,820 --> 00:30:45,039
those to the remote server on receiving

00:30:42,850 --> 00:30:47,320
those changes the remote server first

00:30:45,039 --> 00:30:50,350
pulls from the upstream and builds it if

00:30:47,320 --> 00:30:52,029
the build succeeds your code your local

00:30:50,350 --> 00:30:55,210
changes are integrated into the upstream

00:30:52,029 --> 00:30:59,110
using a rebase and finally a build is

00:30:55,210 --> 00:31:01,419
run on the integrated code feed by

00:30:59,110 --> 00:31:04,179
feedback about the process is

00:31:01,419 --> 00:31:05,710
continuously communicated to you so that

00:31:04,179 --> 00:31:07,690
you'll find out immediately if there's

00:31:05,710 --> 00:31:10,059
any problem like that the upstream

00:31:07,690 --> 00:31:13,600
doesn't build or that there's a merge

00:31:10,059 --> 00:31:15,250
conflict at the end of the loop you'll

00:31:13,600 --> 00:31:19,750
know that your changes are good to push

00:31:15,250 --> 00:31:22,840
to the upstream now let's take a look at

00:31:19,750 --> 00:31:25,710
the UI in a little bit more detail at

00:31:22,840 --> 00:31:28,210
the top I'm showing the current status

00:31:25,710 --> 00:31:31,960
here I show you how many files you've

00:31:28,210 --> 00:31:36,130
changed locally here how many targets

00:31:31,960 --> 00:31:37,929
directly include your changes here I'm

00:31:36,130 --> 00:31:39,640
showing you the number of targets that

00:31:37,929 --> 00:31:42,010
are downstream of the targets that are

00:31:39,640 --> 00:31:43,809
directly including your changes and this

00:31:42,010 --> 00:31:44,980
gives you some idea of how much impact

00:31:43,809 --> 00:31:49,029
the changes are going to have on the

00:31:44,980 --> 00:31:50,590
system here I'm showing you the number

00:31:49,029 --> 00:31:52,360
of targets that our leaf targets that

00:31:50,590 --> 00:31:56,470
are downstream and those are the ones

00:31:52,360 --> 00:31:57,909
that get passed to basal tests below the

00:31:56,470 --> 00:31:59,890
information about the timing of the

00:31:57,909 --> 00:32:02,950
build I'm showing you information about

00:31:59,890 --> 00:32:03,970
the success so far which includes how

00:32:02,950 --> 00:32:06,659
many targets have been built

00:32:03,970 --> 00:32:09,250
successfully and how many tests passed

00:32:06,659 --> 00:32:14,169
at the bottom of the screen we show the

00:32:09,250 --> 00:32:17,289
basal logs now let's look at the project

00:32:14,169 --> 00:32:19,090
in action again again the idea is that

00:32:17,289 --> 00:32:21,610
this tool is running continuously in the

00:32:19,090 --> 00:32:23,679
background automating the process of

00:32:21,610 --> 00:32:26,080
pulling from the upstream integrating

00:32:23,679 --> 00:32:27,429
your changes in building so that as soon

00:32:26,080 --> 00:32:29,350
as you are ready to receive feedback

00:32:27,429 --> 00:32:32,289
about your changes the feedback is

00:32:29,350 --> 00:32:34,419
already ready for you you can stay in

00:32:32,289 --> 00:32:35,710
flow while writing code and still get

00:32:34,419 --> 00:32:38,220
great quality feedback about your

00:32:35,710 --> 00:32:38,220
changes

00:32:38,899 --> 00:32:43,320
right now this is just a small prototype

00:32:41,279 --> 00:32:46,620
but I can think of lots of interesting

00:32:43,320 --> 00:32:48,870
ways it could be extended for example I

00:32:46,620 --> 00:32:50,190
could let you know if someone else is

00:32:48,870 --> 00:32:51,990
editing the same files that you're

00:32:50,190 --> 00:32:55,049
editing before either of you is pushed

00:32:51,990 --> 00:32:56,640
to the upstream if you haven't pushed to

00:32:55,049 --> 00:32:58,200
the upstream for a while I could give

00:32:56,640 --> 00:33:01,350
you a reminder to do that to share your

00:32:58,200 --> 00:33:03,029
changes I can also give you more

00:33:01,350 --> 00:33:04,679
information about the risk of the

00:33:03,029 --> 00:33:06,600
changes that you're making for example

00:33:04,679 --> 00:33:10,380
if a file that you're editing has a

00:33:06,600 --> 00:33:12,409
history of breaking the build I'd also

00:33:10,380 --> 00:33:15,299
like to give you even faster feedback

00:33:12,409 --> 00:33:18,630
for example I could run the tests that

00:33:15,299 --> 00:33:20,460
are most likely to break first I can let

00:33:18,630 --> 00:33:21,870
you know information about which parts

00:33:20,460 --> 00:33:24,960
of the build are running slow so that

00:33:21,870 --> 00:33:26,580
you can optimize them I can also let you

00:33:24,960 --> 00:33:28,470
know even about tests that aren't

00:33:26,580 --> 00:33:33,029
providing any value because historically

00:33:28,470 --> 00:33:34,889
they've never found any bugs that's all

00:33:33,029 --> 00:33:36,269
I have time to talk about right now but

00:33:34,889 --> 00:33:37,740
if any of you are interested in these

00:33:36,269 --> 00:33:39,600
kind of ideas I'd really love to talk

00:33:37,740 --> 00:33:41,460
about it further please find me around

00:33:39,600 --> 00:33:42,320
the conference or drop me a line thank

00:33:41,460 --> 00:33:50,070
you

00:33:42,320 --> 00:33:50,070
[Applause]

00:33:57,710 --> 00:34:04,460
hi again so what I'd like to talk about

00:34:01,790 --> 00:34:09,680
today I'd just done this very short talk

00:34:04,460 --> 00:34:11,930
I'll try to be brief is Basel you've

00:34:09,680 --> 00:34:15,050
heard a lot since this morning it talks

00:34:11,930 --> 00:34:17,300
a lot about fast and correct let's

00:34:15,050 --> 00:34:22,100
accept fast but I want to challenge

00:34:17,300 --> 00:34:26,270
correct first of all I want to challenge

00:34:22,100 --> 00:34:28,820
correct and secondly melody this morning

00:34:26,270 --> 00:34:31,220
talked about the fact that at Google

00:34:28,820 --> 00:34:35,680
there were two billion lines of code in

00:34:31,220 --> 00:34:37,880
this and the main biggest mono repo and

00:34:35,680 --> 00:34:39,560
so something that's really important

00:34:37,880 --> 00:34:41,600
when you have two billion lines of code

00:34:39,560 --> 00:34:43,040
and you know it's important for us to we

00:34:41,600 --> 00:34:47,660
all even though we don't have nearly

00:34:43,040 --> 00:34:50,780
that amount of code is to is to really

00:34:47,660 --> 00:34:57,430
never rebuild the world and so I want to

00:34:50,780 --> 00:35:01,210
talk about how we at tweak use use basil

00:34:57,430 --> 00:35:11,510
and try to achieve full correctness

00:35:01,210 --> 00:35:15,020
without rebuilding the world so how do

00:35:11,510 --> 00:35:16,880
we get correctness that actually a big

00:35:15,020 --> 00:35:19,750
part of correctness is reproducible

00:35:16,880 --> 00:35:22,310
builds and to get reproducible builds

00:35:19,750 --> 00:35:24,560
you basically need to cue really key

00:35:22,310 --> 00:35:27,380
ingredients you need your bills to be

00:35:24,560 --> 00:35:30,160
hermetic and you need your bills to be

00:35:27,380 --> 00:35:34,010
deterministic and so if you have

00:35:30,160 --> 00:35:35,660
hermetic and deterministic you know

00:35:34,010 --> 00:35:39,160
those two properties together then you

00:35:35,660 --> 00:35:43,460
can hope to get reproducible builds a

00:35:39,160 --> 00:35:45,980
problem is that I don't think you really

00:35:43,460 --> 00:35:51,350
quite get reproducible builds with basil

00:35:45,980 --> 00:35:54,140
alone because arguably basil builds are

00:35:51,350 --> 00:35:56,960
not all that hermetic there's plenty of

00:35:54,140 --> 00:35:59,990
hermiticity rolls it holes in in basil

00:35:56,960 --> 00:36:02,150
today at least if you use it out of the

00:35:59,990 --> 00:36:04,180
box in the open source version and I

00:36:02,150 --> 00:36:07,430
don't know how Google uses it internally

00:36:04,180 --> 00:36:10,280
but you know out of the box so for

00:36:07,430 --> 00:36:11,630
example if you're using the C++ rules or

00:36:10,280 --> 00:36:13,490
many of the native

00:36:11,630 --> 00:36:16,370
rules were basically also configuring

00:36:13,490 --> 00:36:18,650
the tool chains for example GCC they

00:36:16,370 --> 00:36:21,890
know that the C compiler from the

00:36:18,650 --> 00:36:25,160
environment and so if from from from the

00:36:21,890 --> 00:36:29,090
host and if the environment changes what

00:36:25,160 --> 00:36:30,650
happens in let you likewise you know

00:36:29,090 --> 00:36:32,660
your build will depend on a bunch of

00:36:30,650 --> 00:36:36,800
system libraries like juleps Ely P

00:36:32,660 --> 00:36:40,610
thread etc etc and also in practice a

00:36:36,800 --> 00:36:42,470
lot of the the rules that are

00:36:40,610 --> 00:36:47,600
implemented star lurk they often use the

00:36:42,470 --> 00:36:50,300
run shell action and the you know

00:36:47,600 --> 00:36:52,040
sometimes they so there's an option that

00:36:50,300 --> 00:36:56,300
you can pass to run shell that basically

00:36:52,040 --> 00:36:58,550
says don't wipe the environment so for

00:36:56,300 --> 00:37:01,430
example I can use base I can call

00:36:58,550 --> 00:37:05,480
basically from that action any binary

00:37:01,430 --> 00:37:09,260
that happens to be on the path and and

00:37:05,480 --> 00:37:11,840
so so that's that's you know hurting

00:37:09,260 --> 00:37:13,010
hermeticity there's a bunch of fork

00:37:11,840 --> 00:37:15,110
space rules that can also hurt

00:37:13,010 --> 00:37:16,670
hermiticity so you know the typical

00:37:15,110 --> 00:37:19,010
solution that people have told this is

00:37:16,670 --> 00:37:22,460
you know does does docker help and the

00:37:19,010 --> 00:37:24,020
problem with docker is that the build

00:37:22,460 --> 00:37:27,650
inputs are still not completely captured

00:37:24,020 --> 00:37:29,720
by the build description you know I

00:37:27,650 --> 00:37:31,970
challenge you in particularly think

00:37:29,720 --> 00:37:34,220
about what happens if you change the the

00:37:31,970 --> 00:37:38,450
docker file that characterizes the image

00:37:34,220 --> 00:37:42,590
that you use to you know builds run all

00:37:38,450 --> 00:37:44,480
your actions in the you know those

00:37:42,590 --> 00:37:46,040
changes that can change completely

00:37:44,480 --> 00:37:49,130
independently basil and basil doesn't

00:37:46,040 --> 00:37:50,630
know when those changes happen so you

00:37:49,130 --> 00:37:52,340
know you can get to reproducibility

00:37:50,630 --> 00:37:54,040
problems there the other problem is the

00:37:52,340 --> 00:37:56,800
docker images are not always

00:37:54,040 --> 00:37:59,180
reproducible and this is a known problem

00:37:56,800 --> 00:38:00,640
from from a docker file and docker

00:37:59,180 --> 00:38:03,020
images don't really compose well

00:38:00,640 --> 00:38:04,910
ultimately there are no fine-grained

00:38:03,020 --> 00:38:08,300
dependencies and docker layer so this

00:38:04,910 --> 00:38:09,440
means that you there as I said in the

00:38:08,300 --> 00:38:12,470
beginning you either have a choice you

00:38:09,440 --> 00:38:14,050
can either somehow track the changes in

00:38:12,470 --> 00:38:16,100
the doctor files but then anytime

00:38:14,050 --> 00:38:18,320
anything changes in docker file you have

00:38:16,100 --> 00:38:20,810
to rebuild the entire world right

00:38:18,320 --> 00:38:22,460
because every anything in basil can

00:38:20,810 --> 00:38:24,230
depend on anything from your environment

00:38:22,460 --> 00:38:25,880
from the environment provided by the

00:38:24,230 --> 00:38:30,080
dockerfile

00:38:25,880 --> 00:38:35,090
or you can just say alright too bad

00:38:30,080 --> 00:38:37,100
forget about hermeticity so I wanna what

00:38:35,090 --> 00:38:39,830
we do at twig is that we actually use

00:38:37,100 --> 00:38:41,840
another system different from docker but

00:38:39,830 --> 00:38:43,610
very similar which has the same ideas

00:38:41,840 --> 00:38:45,620
docker so for example you have a notion

00:38:43,610 --> 00:38:48,620
of derivation which is essentially akin

00:38:45,620 --> 00:38:50,210
to docker layers but the difference is

00:38:48,620 --> 00:38:52,190
that derivations are much more fine

00:38:50,210 --> 00:38:54,920
grained we have a notion of expressions

00:38:52,190 --> 00:38:56,800
which are kind of like darker files but

00:38:54,920 --> 00:38:59,930
what's the key there is determinism and

00:38:56,800 --> 00:39:02,600
reproducibility and so because we have

00:38:59,930 --> 00:39:06,440
fine-grained dependencies you ultimately

00:39:02,600 --> 00:39:10,400
have you can get targets in Basel depend

00:39:06,440 --> 00:39:12,380
on specific layers and then in doctor

00:39:10,400 --> 00:39:16,610
parlance or specific Nixie relations

00:39:12,380 --> 00:39:19,310
rather than just the whole image and so

00:39:16,610 --> 00:39:20,960
what this ultimately means is that your

00:39:19,310 --> 00:39:23,420
rebuilds whenever you change whenever

00:39:20,960 --> 00:39:25,760
you add a derivation for example your

00:39:23,420 --> 00:39:27,970
rebuilds are basically pretty minimal so

00:39:25,760 --> 00:39:30,050
for example a today if I just change

00:39:27,970 --> 00:39:33,350
Zealand than anything that depends on

00:39:30,050 --> 00:39:36,260
Zealand will be built but nothing else

00:39:33,350 --> 00:39:38,030
so Nix is pretty cool and so we added a

00:39:36,260 --> 00:39:41,450
we have an experimental rule set called

00:39:38,030 --> 00:39:44,660
rules nice pkg yes that you guys can use

00:39:41,450 --> 00:39:46,760
we often use when we use basil in

00:39:44,660 --> 00:39:48,440
production we nearly always use it

00:39:46,760 --> 00:39:50,440
together with rules next week edge yes

00:39:48,440 --> 00:39:56,690
thank you very time

00:39:50,440 --> 00:39:56,690
[Applause]

00:40:00,329 --> 00:40:06,910
okay so I'm close Alec and I'm talking

00:40:04,419 --> 00:40:10,239
about basal and external repositories

00:40:06,910 --> 00:40:13,179
and by external repositories the main

00:40:10,239 --> 00:40:16,599
interest is sources of truly third-party

00:40:13,179 --> 00:40:17,619
dependencies and more precisely I'm

00:40:16,599 --> 00:40:19,479
talking about the question which

00:40:17,619 --> 00:40:21,849
versions of these external dependencies

00:40:19,479 --> 00:40:24,789
you get that all started with a

00:40:21,849 --> 00:40:27,549
discussion at last year's basel cone and

00:40:24,789 --> 00:40:28,749
there was kind of in in some well

00:40:27,549 --> 00:40:31,660
discussion on there was a vision that

00:40:28,749 --> 00:40:34,630
roughly looked as follows so imagine you

00:40:31,660 --> 00:40:37,630
take a project do a fresh check out and

00:40:34,630 --> 00:40:40,119
you look at the workspace file and it's

00:40:37,630 --> 00:40:41,829
very declarative it shows you which

00:40:40,119 --> 00:40:44,769
repositories to depend on which are the

00:40:41,829 --> 00:40:46,329
relevant parameters and what

00:40:44,769 --> 00:40:49,869
transformations to do and so on but

00:40:46,329 --> 00:40:51,999
there are no specific versions so it's

00:40:49,869 --> 00:40:55,059
abstract description of what are your

00:40:51,999 --> 00:40:56,679
external source dependencies and that is

00:40:55,059 --> 00:40:58,479
something that has to be changed we're

00:40:56,679 --> 00:41:02,109
really only we're adding new dependency

00:40:58,479 --> 00:41:04,269
or remove on and then you built and you

00:41:02,109 --> 00:41:06,789
built at the latest known good snapshot

00:41:04,269 --> 00:41:09,130
and then you check out node version of

00:41:06,789 --> 00:41:10,539
your project and you build against the

00:41:09,130 --> 00:41:13,539
version of your dependencies that were

00:41:10,539 --> 00:41:16,659
used at that time so how did you imagine

00:41:13,539 --> 00:41:19,179
that even to work we weren't thinking

00:41:16,659 --> 00:41:21,880
about base doing symmetric but basically

00:41:19,179 --> 00:41:24,429
idea was ignore the workspace file and

00:41:21,880 --> 00:41:25,769
use another file and don't worry you

00:41:24,429 --> 00:41:28,299
don't have to write that file by hand

00:41:25,769 --> 00:41:29,799
it's generated from the workspace file

00:41:28,299 --> 00:41:33,390
in a controlled way and it's got

00:41:29,799 --> 00:41:36,069
committed so it contains the precise IDs

00:41:33,390 --> 00:41:38,739
commit ID is the set of branches and for

00:41:36,069 --> 00:41:42,249
a good measure also timestamp so that it

00:41:38,739 --> 00:41:45,089
can shallow cloned and it contains the

00:41:42,249 --> 00:41:47,409
hashes of the sources that you generated

00:41:45,089 --> 00:41:49,179
so even with all your transformations

00:41:47,409 --> 00:41:51,309
and maybe not having the same version of

00:41:49,179 --> 00:41:53,709
these tools doing the transformations

00:41:51,309 --> 00:41:55,839
you know that you have the right code or

00:41:53,709 --> 00:41:58,719
at least you get noticed notified if you

00:41:55,839 --> 00:42:01,359
did something wrong and actually it's

00:41:58,719 --> 00:42:05,359
just a systolic value contained in that

00:42:01,359 --> 00:42:07,969
file so the book can just load that file

00:42:05,359 --> 00:42:11,119
and do whatever it wants with these well

00:42:07,969 --> 00:42:12,349
yes like adding precise snapshots of

00:42:11,119 --> 00:42:16,130
their dependency in the version string

00:42:12,349 --> 00:42:17,869
in a functional way okay so the idea is

00:42:16,130 --> 00:42:19,969
they have a file that contains all the

00:42:17,869 --> 00:42:22,609
relevant information of the versions and

00:42:19,969 --> 00:42:24,640
how would you think of updating that the

00:42:22,609 --> 00:42:27,729
idea is to have a new command basil sink

00:42:24,640 --> 00:42:31,099
and then roof looks roughly like that

00:42:27,729 --> 00:42:33,380
you see some information saying oh I was

00:42:31,099 --> 00:42:34,940
executing the rule Google protobuf and

00:42:33,380 --> 00:42:36,369
this is the commit I get and that was

00:42:34,940 --> 00:42:40,359
the time step and so on

00:42:36,369 --> 00:42:43,700
so it executes the workspace file

00:42:40,359 --> 00:42:45,499
unconditionally fully execute all the

00:42:43,700 --> 00:42:49,549
rules that were in the workspace file

00:42:45,499 --> 00:42:51,229
and sees what comes out and it records

00:42:49,549 --> 00:42:53,299
all the version that the rules returned

00:42:51,229 --> 00:42:55,900
as this is a precise version a Godman

00:42:53,299 --> 00:43:01,339
following the branch master in a file

00:42:55,900 --> 00:43:04,099
and the idea stand to test and commit

00:43:01,339 --> 00:43:06,410
that file to the repository and since

00:43:04,099 --> 00:43:08,390
that file is not just a static value but

00:43:06,410 --> 00:43:10,269
a nicely economically formatted star

00:43:08,390 --> 00:43:12,829
like well you also get meaning for this

00:43:10,269 --> 00:43:15,440
and the good thing is that is reality

00:43:12,829 --> 00:43:18,049
now well as of paisa 0 19 but you can

00:43:15,440 --> 00:43:19,369
already download the first or C but

00:43:18,049 --> 00:43:21,890
don't worry we haven't changed the

00:43:19,369 --> 00:43:25,579
evaluation mechanism of basil completely

00:43:21,890 --> 00:43:30,579
it's fully opt-in controlled by the RC

00:43:25,579 --> 00:43:32,809
file so it just needed some options

00:43:30,579 --> 00:43:35,299
it looks more scary than it actually is

00:43:32,809 --> 00:43:41,150
so there's one options telling basil

00:43:35,299 --> 00:43:44,509
well whenever you execute an external a

00:43:41,150 --> 00:43:46,160
workspace rule record the return value

00:43:44,509 --> 00:43:50,089
and the fact that you executed the rule

00:43:46,160 --> 00:43:53,029
in a file and you name the file so that

00:43:50,089 --> 00:43:54,680
is what you want to do for sync sync by

00:43:53,029 --> 00:43:56,239
its nature execute all the rules and the

00:43:54,680 --> 00:43:58,729
workspace file and then if you write

00:43:56,239 --> 00:44:01,130
that down you got the values and it

00:43:58,729 --> 00:44:03,199
tells you well actually for build you

00:44:01,130 --> 00:44:04,430
have another option we say actually went

00:44:03,199 --> 00:44:06,499
building if you know the workspace file

00:44:04,430 --> 00:44:08,930
use that other file instead to know what

00:44:06,499 --> 00:44:12,199
the rules are and then you can say well

00:44:08,930 --> 00:44:13,759
actually use the hashes verify the

00:44:12,199 --> 00:44:15,650
hashes of the external depositors this

00:44:13,759 --> 00:44:17,630
is a fogger get all the hashes and then

00:44:15,650 --> 00:44:19,099
you list all the rules where you want

00:44:17,630 --> 00:44:21,229
the hashes to be verified

00:44:19,099 --> 00:44:23,539
for example you might not want to verify

00:44:21,229 --> 00:44:26,180
that you get the same CC configure

00:44:23,539 --> 00:44:27,499
output and actually it looks a bit

00:44:26,180 --> 00:44:29,239
redundant to have the same file name

00:44:27,499 --> 00:44:30,920
they are over and over again but that

00:44:29,239 --> 00:44:33,319
can also be a feature remember it's just

00:44:30,920 --> 00:44:35,539
a star-like value on that file they can

00:44:33,319 --> 00:44:37,190
add another file that includes that

00:44:35,539 --> 00:44:39,489
value and that does some transformations

00:44:37,190 --> 00:44:42,259
to the recorded values like if you know

00:44:39,489 --> 00:44:44,539
for my git repository also have a way to

00:44:42,259 --> 00:44:46,309
download our archives for specific

00:44:44,539 --> 00:44:48,309
snapshots so all that transformation

00:44:46,309 --> 00:44:51,559
knowledge can go into a separate file

00:44:48,309 --> 00:44:54,319
okay so that is a present and for the

00:44:51,559 --> 00:44:55,940
future we have some ideas but more

00:44:54,319 --> 00:44:57,769
important we want your feedback what is

00:44:55,940 --> 00:45:00,249
needed and where we should go from there

00:44:57,769 --> 00:45:05,499
so please talk to us either in person

00:45:00,249 --> 00:45:05,499
today or tomorrow or by email thanks

00:45:21,420 --> 00:45:26,490
hello everyone my name is shin I'm from

00:45:24,060 --> 00:45:29,609
the remote execution two teams team from

00:45:26,490 --> 00:45:34,230
Canada and today I'm gonna introduce you

00:45:29,609 --> 00:45:36,510
a basal container so I container image

00:45:34,230 --> 00:45:38,099
is a lightweight stand along executable

00:45:36,510 --> 00:45:39,450
package of software that includes

00:45:38,099 --> 00:45:42,390
everything you need to run an

00:45:39,450 --> 00:45:44,160
application and in this presentation and

00:45:42,390 --> 00:45:45,930
I use the word container and image

00:45:44,160 --> 00:45:49,619
interchangeably but for both I mean a

00:45:45,930 --> 00:45:51,330
container image and so the basic base of

00:45:49,619 --> 00:45:53,400
community has been asked for a basal

00:45:51,330 --> 00:45:55,560
continue for a while and our team builds

00:45:53,400 --> 00:45:58,680
our containers for remote execution and

00:45:55,560 --> 00:46:00,630
we are also the maintainer of Rouge

00:45:58,680 --> 00:46:02,220
stalker and risk for an ADIZ so we found

00:46:00,630 --> 00:46:04,830
ourselves in a position to provide a

00:46:02,220 --> 00:46:06,900
basal container as well so we build it

00:46:04,830 --> 00:46:09,359
so it allows people to try out paints

00:46:06,900 --> 00:46:11,099
are very easy with no configuration or

00:46:09,359 --> 00:46:13,590
installation just in stop just in

00:46:11,099 --> 00:46:17,130
stalker and it's very good for CI as

00:46:13,590 --> 00:46:19,230
well so the basal container is publicly

00:46:17,130 --> 00:46:20,880
available in the Google marketplace and

00:46:19,230 --> 00:46:24,690
you can pull the continue at this

00:46:20,880 --> 00:46:27,140
container registry path so here's what

00:46:24,690 --> 00:46:29,790
the landing page looks like and

00:46:27,140 --> 00:46:31,830
containers with different based versions

00:46:29,790 --> 00:46:34,099
are kept available and pull about from

00:46:31,830 --> 00:46:37,740
these container tax

00:46:34,099 --> 00:46:40,410
so in this container we install a it

00:46:37,740 --> 00:46:43,200
first it's based on a cocoa maintained

00:46:40,410 --> 00:46:45,210
open to 1604 base image and the we

00:46:43,200 --> 00:46:47,790
install a google build and test it can

00:46:45,210 --> 00:46:50,490
with sanitizer support and in addition

00:46:47,790 --> 00:46:52,380
we have open JDK 8 and two versions of

00:46:50,490 --> 00:46:55,320
Python installed to support base of Java

00:46:52,380 --> 00:46:57,089
and Python builds so there are several

00:46:55,320 --> 00:46:59,580
key features of this basal container

00:46:57,089 --> 00:47:01,380
first containers with different based

00:46:59,580 --> 00:47:03,480
versions are kept available and you can

00:47:01,380 --> 00:47:06,240
just put them you can choose which base

00:47:03,480 --> 00:47:08,520
version you want and in addition to make

00:47:06,240 --> 00:47:12,150
building with sanitizers very easy we

00:47:08,520 --> 00:47:14,250
have a default basil RC file in this

00:47:12,150 --> 00:47:16,589
container so if you like to build with a

00:47:14,250 --> 00:47:21,300
scientist I know Amazon you can you just

00:47:16,589 --> 00:47:22,680
need one extra flag so initially we when

00:47:21,300 --> 00:47:25,589
we come to build containers we use

00:47:22,680 --> 00:47:27,570
docker file and we found ourselves copy

00:47:25,589 --> 00:47:31,920
paste too much code so to install the

00:47:27,570 --> 00:47:33,720
same tool or saying compiler in multiple

00:47:31,920 --> 00:47:34,779
containers we just copy paste the same

00:47:33,720 --> 00:47:36,579
code in multiple

00:47:34,779 --> 00:47:40,150
profiles this is very very prominent

00:47:36,579 --> 00:47:43,229
very inefficient so we take advantage of

00:47:40,150 --> 00:47:46,089
Basel and star large so we develop a

00:47:43,229 --> 00:47:48,729
stalked rules to construct darker images

00:47:46,089 --> 00:47:51,069
using basil so instead of specifying the

00:47:48,729 --> 00:47:53,439
fouls to add and the entry point or the

00:47:51,069 --> 00:47:56,109
command of the container in dr. flowers

00:47:53,439 --> 00:47:58,359
you specify them in base of your targets

00:47:56,109 --> 00:48:00,369
and here are the rules and they are in

00:47:58,359 --> 00:48:02,319
basil Trojans repo routing in row

00:48:00,369 --> 00:48:04,959
stalker and also in base image stalkers

00:48:02,319 --> 00:48:10,019
you can go call them afterwards and

00:48:04,959 --> 00:48:14,439
these are all links as well so here are

00:48:10,019 --> 00:48:16,719
two examples so with this ruse it allows

00:48:14,439 --> 00:48:20,619
us to reuse and compose layer targets to

00:48:16,719 --> 00:48:23,079
construct complete images so the tool

00:48:20,619 --> 00:48:25,630
check container rule is you can think of

00:48:23,079 --> 00:48:28,650
that as a like you create a complete

00:48:25,630 --> 00:48:31,329
image and the language to layer is a

00:48:28,650 --> 00:48:33,699
image that represents a very specific

00:48:31,329 --> 00:48:37,150
only contains a specific tool was a

00:48:33,699 --> 00:48:39,880
group of tools so in the language to

00:48:37,150 --> 00:48:41,739
layer rule you specify what packages to

00:48:39,880 --> 00:48:43,959
install and what involve variables to

00:48:41,739 --> 00:48:46,329
set for this layer and some other files

00:48:43,959 --> 00:48:48,640
to had and in the torture can general

00:48:46,329 --> 00:48:50,199
you just specify a list up to language

00:48:48,640 --> 00:48:53,140
to all their targets in the tool to

00:48:50,199 --> 00:48:55,269
continue so these you can easily create

00:48:53,140 --> 00:48:57,699
Fujin can hurt argit's by composing

00:48:55,269 --> 00:48:59,499
existing their targets so the one on the

00:48:57,699 --> 00:49:01,959
left is the basic is a simplified

00:48:59,499 --> 00:49:04,539
version of the basil container towards a

00:49:01,959 --> 00:49:07,239
container targets and the the one right

00:49:04,539 --> 00:49:09,880
is a just like a container food Hargett

00:49:07,239 --> 00:49:12,759
and they share the same clan based class

00:49:09,880 --> 00:49:14,799
or Java and Python layer targets but

00:49:12,759 --> 00:49:17,589
just to note that we are not reusing the

00:49:14,799 --> 00:49:19,390
actual air contents or file yet so if we

00:49:17,589 --> 00:49:21,249
first build a peso container on the left

00:49:19,390 --> 00:49:24,839
then you build a container food on the

00:49:21,249 --> 00:49:27,219
right you build a container from scratch

00:49:24,839 --> 00:49:29,049
so in the coming quarter we are planning

00:49:27,219 --> 00:49:31,329
to work on fully automating the release

00:49:29,049 --> 00:49:32,979
process and integrating it into the base

00:49:31,329 --> 00:49:34,989
of our release process and we are also

00:49:32,979 --> 00:49:37,989
working on making dock in a generation

00:49:34,989 --> 00:49:39,729
fully deterministic and most importantly

00:49:37,989 --> 00:49:41,979
we would like to make the actual their

00:49:39,729 --> 00:49:44,349
contents reusable from cache not just

00:49:41,979 --> 00:49:46,900
the targets so that means you feel build

00:49:44,349 --> 00:49:48,650
a remote sorry the content of food on

00:49:46,900 --> 00:49:50,480
the right in the previous slides

00:49:48,650 --> 00:49:54,680
after you building the basal container

00:49:50,480 --> 00:49:58,040
then you will reuse the Java clan and

00:49:54,680 --> 00:49:59,390
Python layer files and say if you use

00:49:58,040 --> 00:50:02,570
multiple containers that share common

00:49:59,390 --> 00:50:04,490
layers in multiple cloud steps on TCP

00:50:02,570 --> 00:50:06,680
the Google Cloud builder then those

00:50:04,490 --> 00:50:10,880
common layers will just be port ones and

00:50:06,680 --> 00:50:12,910
cached by TCP so stay tuned and join the

00:50:10,880 --> 00:50:15,800
basil discuss group at this link and

00:50:12,910 --> 00:50:17,930
this continuous also documented in the

00:50:15,800 --> 00:50:21,200
bezos website so you can check that out

00:50:17,930 --> 00:50:22,280
later on this link and that's it thank

00:50:21,200 --> 00:50:29,499
you

00:50:22,280 --> 00:50:29,499
[Applause]

00:50:38,010 --> 00:50:44,140
hi everyone my name is Jay I work on the

00:50:41,350 --> 00:50:46,660
go tools language team here in New York

00:50:44,140 --> 00:50:49,450
I'm the maintainer for rules go and

00:50:46,660 --> 00:50:51,580
gazelle and today I'm going to tell you

00:50:49,450 --> 00:50:52,930
about Otto gazelle so so just a quick

00:50:51,580 --> 00:50:57,310
show of hands how many people here use

00:50:52,930 --> 00:51:01,990
go in any capacity cool a lot of hands

00:50:57,310 --> 00:51:04,240
up all right here we go

00:51:01,990 --> 00:51:07,150
so gazelle is the command-line tool that

00:51:04,240 --> 00:51:09,250
generates build files for go projects

00:51:07,150 --> 00:51:12,330
that follow traditional go conventions

00:51:09,250 --> 00:51:14,560
it also works for protocol buffers so

00:51:12,330 --> 00:51:16,530
here's a build file that gazelle

00:51:14,560 --> 00:51:19,300
generated for the kubernetes project

00:51:16,530 --> 00:51:21,600
everything you see here is generated by

00:51:19,300 --> 00:51:24,280
gazelle except for the lines in italics

00:51:21,600 --> 00:51:25,750
because I'll allows you to make manual

00:51:24,280 --> 00:51:27,430
changes to build files and it'll

00:51:25,750 --> 00:51:30,490
preserve them after you run it it'll

00:51:27,430 --> 00:51:32,770
update the files in place you see go

00:51:30,490 --> 00:51:36,150
library go binary here bunch of

00:51:32,770 --> 00:51:36,150
dependencies it works pretty well

00:51:36,160 --> 00:51:42,850
kubernetes uses this to manage over

00:51:38,710 --> 00:51:45,670
2,600 build files so in general it's

00:51:42,850 --> 00:51:47,710
pretty successful but coming from the go

00:51:45,670 --> 00:51:49,540
ecosystem people don't want to write

00:51:47,710 --> 00:51:50,980
build files at all generally you can

00:51:49,540 --> 00:51:52,600
just like go build and go run and it

00:51:50,980 --> 00:51:55,030
works and why do I have to write this

00:51:52,600 --> 00:51:56,980
extra thing and it's especially annoying

00:51:55,030 --> 00:51:59,770
that you have to run this extra command

00:51:56,980 --> 00:52:01,840
you know you do your your editing and

00:51:59,770 --> 00:52:03,400
then you run basil build and it's like

00:52:01,840 --> 00:52:05,530
oh I forgot this dependency it's not

00:52:03,400 --> 00:52:08,130
there so I have to go back and I've run

00:52:05,530 --> 00:52:11,710
gazelle and now my build file works

00:52:08,130 --> 00:52:15,550
so this is where auto gazelle kit takes

00:52:11,710 --> 00:52:17,290
over this removes that extra step so I

00:52:15,550 --> 00:52:20,170
have a quick demo for you this is from

00:52:17,290 --> 00:52:22,930
the kubernetes repository and before I

00:52:20,170 --> 00:52:25,510
started I deleted the go rules out of

00:52:22,930 --> 00:52:27,520
all the build files and I deleted this

00:52:25,510 --> 00:52:31,000
build file entirely from command cubelet

00:52:27,520 --> 00:52:33,700
but we'll run a basil build anyway see

00:52:31,000 --> 00:52:35,140
what happens auto güzel kicks off it

00:52:33,700 --> 00:52:38,980
takes a few seconds to start up the

00:52:35,140 --> 00:52:41,260
first time there it goes it's all done

00:52:38,980 --> 00:52:43,119
and we start a main build it's in the

00:52:41,260 --> 00:52:45,790
cache already so that finishes quickly

00:52:43,119 --> 00:52:46,810
all right now our build succeeded let's

00:52:45,790 --> 00:52:49,830
see what's in the build file that

00:52:46,810 --> 00:52:49,830
gazelle generated for us

00:52:49,949 --> 00:52:54,249
all right so we have Fargo library and

00:52:52,630 --> 00:52:56,199
go binary the this is the same build

00:52:54,249 --> 00:52:58,929
file as before because I deleted it it

00:52:56,199 --> 00:53:02,079
doesn't have a manual changes let's make

00:52:58,929 --> 00:53:04,679
some changes of our own so we'll open up

00:53:02,079 --> 00:53:06,609
couplet go and we'll add a new import

00:53:04,679 --> 00:53:09,209
normally this would be something that

00:53:06,609 --> 00:53:14,049
you have to update the build file for

00:53:09,209 --> 00:53:17,919
we'll save that and while we're at it

00:53:14,049 --> 00:53:19,479
let's rename the file I never could

00:53:17,919 --> 00:53:21,819
figure out how to pronounce it is it

00:53:19,479 --> 00:53:28,059
cubelet or couplet i'll just rename it

00:53:21,819 --> 00:53:28,539
to couplet with two O's we kick off our

00:53:28,059 --> 00:53:31,209
build

00:53:28,539 --> 00:53:36,279
Auto gazelle kicks off again it runs a

00:53:31,209 --> 00:53:38,049
little faster this time and we have to

00:53:36,279 --> 00:53:44,709
recompile and relink this is a big

00:53:38,049 --> 00:53:47,259
binary so it takes a few seconds all

00:53:44,709 --> 00:53:53,439
right there we go let's see what our

00:53:47,259 --> 00:53:54,729
build file looks like now it looks like

00:53:53,439 --> 00:54:07,359
it picked up our new source file name

00:53:54,729 --> 00:54:09,519
and our new import alright my buttons

00:54:07,359 --> 00:54:15,039
not working again can we go to the next

00:54:09,519 --> 00:54:18,609
slide if anyone has manual control I'll

00:54:15,039 --> 00:54:20,769
just proceed so how does that work we

00:54:18,609 --> 00:54:24,249
have we have a bash script and it's

00:54:20,769 --> 00:54:26,559
installed in tool slash basil and thank

00:54:24,249 --> 00:54:28,089
you the basil that's in your path when

00:54:26,559 --> 00:54:29,769
you run a basil command is going to look

00:54:28,089 --> 00:54:31,359
for the script and if it finds it it's

00:54:29,769 --> 00:54:34,179
going to execute it instead of the real

00:54:31,359 --> 00:54:36,519
basil so this script is going to run

00:54:34,179 --> 00:54:38,559
auto gazelle and when it's done it'll

00:54:36,519 --> 00:54:41,229
execute the real basil with your

00:54:38,559 --> 00:54:43,329
original command line arguments so auto

00:54:41,229 --> 00:54:46,569
gazelle is a program with two pieces of

00:54:43,329 --> 00:54:48,519
clients and a server and the client just

00:54:46,569 --> 00:54:50,289
connects to the server over UNIX domain

00:54:48,519 --> 00:54:52,599
socket it uses for synchronization

00:54:50,289 --> 00:54:55,359
doesn't actually exchange any messages

00:54:52,599 --> 00:54:57,279
the server watches your filesystem for

00:54:55,359 --> 00:54:57,939
changes and whenever it accepts a

00:54:57,279 --> 00:54:59,679
connection

00:54:57,939 --> 00:55:02,109
it runs gazelle in those specific

00:54:59,679 --> 00:55:03,370
directories that changed so you get an

00:55:02,109 --> 00:55:05,170
incremental run

00:55:03,370 --> 00:55:07,120
ghazal runs much faster because it only

00:55:05,170 --> 00:55:09,640
runs in specific directories rather than

00:55:07,120 --> 00:55:11,380
the whole repo so for large republic

00:55:09,640 --> 00:55:15,910
kubernetes that can save you several

00:55:11,380 --> 00:55:17,830
seconds if you if you're curious to

00:55:15,910 --> 00:55:19,990
learn more check out that basil gazelle

00:55:17,830 --> 00:55:22,060
repository this is checked into command

00:55:19,990 --> 00:55:24,280
auto gazelle and just a warning this is

00:55:22,060 --> 00:55:26,050
like super new and experimental so maybe

00:55:24,280 --> 00:55:28,270
don't quite use this for production

00:55:26,050 --> 00:55:30,130
projects yet but feel free to try it out

00:55:28,270 --> 00:55:32,250
and file issues and let me know if you

00:55:30,130 --> 00:55:36,309
have any questions thank you

00:55:32,250 --> 00:55:36,309

YouTube URL: https://www.youtube.com/watch?v=7-K_RmDasEg


