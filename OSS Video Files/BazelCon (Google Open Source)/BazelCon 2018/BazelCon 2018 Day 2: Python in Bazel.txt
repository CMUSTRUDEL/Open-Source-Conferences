Title: BazelCon 2018 Day 2: Python in Bazel
Publication date: 2018-11-02
Playlist: BazelCon 2018
Description: 
	Manage your dependencies
Conrado Silva Miranda, Laurie Lauri Peltonen (NVIDIA) event: Bazelcon 2018; re_ty: Publish; product: Open Source - General; fullname: Conrado Silva Miranda, Laurie Lauri Peltonen;
Captions: 
	00:00:04,390 --> 00:00:08,930
hi everybody

00:00:06,590 --> 00:00:11,720
Laurie couldn't come here today with us

00:00:08,930 --> 00:00:15,830
so unfortunately we don't have this

00:00:11,720 --> 00:00:19,610
process but basically how many people

00:00:15,830 --> 00:00:22,789
here use Python oh my god that's way

00:00:19,610 --> 00:00:28,730
more than expected who actually in spite

00:00:22,789 --> 00:00:30,560
in production oh okay you probably like

00:00:28,730 --> 00:00:33,320
have been trained to use beta and Python

00:00:30,560 --> 00:00:35,050
and found a lot of issues a lot of

00:00:33,320 --> 00:00:38,210
problems that you have to deal with and

00:00:35,050 --> 00:00:40,250
most usually like you have some people

00:00:38,210 --> 00:00:41,989
not so engineering centric if you have

00:00:40,250 --> 00:00:44,270
some data scientists and researchers and

00:00:41,989 --> 00:00:46,489
you ask them please use Bayes Oh like I

00:00:44,270 --> 00:00:49,090
need your bill to be reproducible and

00:00:46,489 --> 00:00:51,680
like I don't understand what you mean

00:00:49,090 --> 00:00:54,290
but basically here we're trying to

00:00:51,680 --> 00:00:57,469
improve how we're gonna use Python in

00:00:54,290 --> 00:00:59,600
basil and a big disclaimer like we came

00:00:57,469 --> 00:01:02,629
here like we were like users of Python

00:00:59,600 --> 00:01:04,969
but not advanced users and we're users

00:01:02,629 --> 00:01:06,710
base but not any users we made some

00:01:04,969 --> 00:01:09,020
decisions we made some mistakes we

00:01:06,710 --> 00:01:10,760
learned some lessons and if you guys win

00:01:09,020 --> 00:01:12,890
discuss more about these and other

00:01:10,760 --> 00:01:15,590
Python topics we have this SIG tonight

00:01:12,890 --> 00:01:17,960
please join us like there is a lot of 70

00:01:15,590 --> 00:01:20,390
me to discuss because python is very

00:01:17,960 --> 00:01:23,200
very important and bases a little bit

00:01:20,390 --> 00:01:26,270
tricky to get to work with Python so

00:01:23,200 --> 00:01:28,400
basically my Z is just gonna give you

00:01:26,270 --> 00:01:30,310
some background and then talk a little

00:01:28,400 --> 00:01:33,259
bit how improve the user experience

00:01:30,310 --> 00:01:36,229
handle some details on how Python gets

00:01:33,259 --> 00:01:38,930
to work and some future plans that we

00:01:36,229 --> 00:01:41,299
have and if you don't use Python like at

00:01:38,930 --> 00:01:44,330
least two things that I want you to get

00:01:41,299 --> 00:01:47,840
out of this presentation one if you can

00:01:44,330 --> 00:01:51,530
don't use Python in your systems if like

00:01:47,840 --> 00:01:53,540
you if you're starting like try to use

00:01:51,530 --> 00:01:57,460
like Swift is pretty good go is pretty

00:01:53,540 --> 00:02:00,200
good like try choose something else but

00:01:57,460 --> 00:02:02,140
another things like get a little bit

00:02:00,200 --> 00:02:04,909
more empathy for your Python users

00:02:02,140 --> 00:02:07,159
they're suffering and they don't even

00:02:04,909 --> 00:02:09,289
know most of the time and like just try

00:02:07,159 --> 00:02:11,329
to understand like there's doing an

00:02:09,289 --> 00:02:13,760
illusion the bite is probably the best

00:02:11,329 --> 00:02:15,889
way to solve every problem to be honest

00:02:13,760 --> 00:02:16,760
biting is a very very good way to solve

00:02:15,889 --> 00:02:21,590
some problems

00:02:16,760 --> 00:02:23,750
not all of them so basically we are part

00:02:21,590 --> 00:02:26,000
of a Nvidia and we're a team that's

00:02:23,750 --> 00:02:28,519
called AI infrastructure we are a base

00:02:26,000 --> 00:02:31,580
of shop we use basil for C C++ code the

00:02:28,519 --> 00:02:33,890
goal is Carla docker kubernetes helm

00:02:31,580 --> 00:02:36,500
with basil for everything that we can do

00:02:33,890 --> 00:02:37,879
and we're looking for angle support we

00:02:36,500 --> 00:02:39,799
saw the presentation we're very excited

00:02:37,879 --> 00:02:42,250
about that because that's the less part

00:02:39,799 --> 00:02:45,829
of this stack that's our own basil and

00:02:42,250 --> 00:02:48,500
we also work for Python and basically

00:02:45,829 --> 00:02:50,480
bite on supporting bases weird everybody

00:02:48,500 --> 00:02:52,430
that's tried to use it you get into a

00:02:50,480 --> 00:02:54,200
little bit of a trouble but most of the

00:02:52,430 --> 00:02:55,730
time is actually not because of basil

00:02:54,200 --> 00:02:59,390
it's actually because Python is very

00:02:55,730 --> 00:03:01,069
weird if you have have it like do with

00:02:59,390 --> 00:03:03,410
Python packages and I'm gonna present

00:03:01,069 --> 00:03:05,329
some some major points here you're gonna

00:03:03,410 --> 00:03:08,299
see there is a lot of trouble that you

00:03:05,329 --> 00:03:10,129
have and mainly there are two is that we

00:03:08,299 --> 00:03:13,400
get like Python packages we have wheels

00:03:10,129 --> 00:03:15,049
wheels are great only some details

00:03:13,400 --> 00:03:16,849
wheels are great and there are basic

00:03:15,049 --> 00:03:18,829
like big zip files with everything that

00:03:16,849 --> 00:03:19,129
you're gonna need and sometimes you

00:03:18,829 --> 00:03:21,950
gotta

00:03:19,129 --> 00:03:24,500
tar.gz and Sergey you run through a

00:03:21,950 --> 00:03:27,470
command that's called pip it's a very

00:03:24,500 --> 00:03:29,269
centralized block of codes that's very

00:03:27,470 --> 00:03:32,290
hard to dig but it does everything that

00:03:29,269 --> 00:03:34,910
we need and I'm gonna copy it and

00:03:32,290 --> 00:03:36,650
usually you set up tools behind it and

00:03:34,910 --> 00:03:39,290
all of that but in the end he calls the

00:03:36,650 --> 00:03:42,260
setup the pie in the setup of pie can be

00:03:39,290 --> 00:03:44,870
anything it can delete your home folder

00:03:42,260 --> 00:03:46,639
that's allowed it can flip a coin and

00:03:44,870 --> 00:03:49,220
decide which source files to include or

00:03:46,639 --> 00:03:51,709
not that's allowed so this gets very

00:03:49,220 --> 00:03:53,480
very complicated when we try to build an

00:03:51,709 --> 00:03:56,780
arbitrary piece of code and I'm gonna

00:03:53,480 --> 00:03:58,400
cite some examples of that and another

00:03:56,780 --> 00:04:00,620
chance I have is that when you get

00:03:58,400 --> 00:04:03,349
packages usually they have dependencies

00:04:00,620 --> 00:04:05,389
and have dependents and so on and you

00:04:03,349 --> 00:04:07,220
want like given a set of dependents that

00:04:05,389 --> 00:04:08,690
I have give me all the extra

00:04:07,220 --> 00:04:10,790
dependencies and there is no mechanism

00:04:08,690 --> 00:04:13,160
for this and Python especially because

00:04:10,790 --> 00:04:14,540
the dependence can be dynamic so during

00:04:13,160 --> 00:04:16,489
compile time it can choose which of the

00:04:14,540 --> 00:04:18,970
pendants I want or not so there's no

00:04:16,489 --> 00:04:22,160
clear mechanism for his channel this and

00:04:18,970 --> 00:04:24,080
we have found on ik across basis

00:04:22,160 --> 00:04:27,110
documentation page there is this purple

00:04:24,080 --> 00:04:29,389
bow a plan let's be exclusive I chain CC

00:04:27,110 --> 00:04:30,979
to change let's make everything aromatic

00:04:29,389 --> 00:04:33,110
and I've conduct all our people in the

00:04:30,979 --> 00:04:35,599
conference and not a lot of them know

00:04:33,110 --> 00:04:38,479
about this if you don't the basel team

00:04:35,599 --> 00:04:40,430
so that scares me a little bit but

00:04:38,479 --> 00:04:42,860
basically here we're gonna focus on user

00:04:40,430 --> 00:04:44,960
experience we gave up on be like

00:04:42,860 --> 00:04:46,610
hermetic builds right now we just want

00:04:44,960 --> 00:04:48,439
to make sure our user is in basel and

00:04:46,610 --> 00:04:50,030
then we figure out so we're gonna make

00:04:48,439 --> 00:04:55,250
this her Matic even if you need to

00:04:50,030 --> 00:04:57,229
change some stuff so so some major

00:04:55,250 --> 00:04:58,610
examples there like we need to depend

00:04:57,229 --> 00:05:00,319
like we are supporting deep learning

00:04:58,610 --> 00:05:01,400
deep learning has major like two

00:05:00,319 --> 00:05:04,819
frameworks that people using out

00:05:01,400 --> 00:05:06,349
nowadays this offline pi torch and both

00:05:04,819 --> 00:05:07,909
of them are like pretty big like three

00:05:06,349 --> 00:05:10,639
hundred Meg's the traditional loads and

00:05:07,909 --> 00:05:12,650
we have robots Horovitz an amazing

00:05:10,639 --> 00:05:13,969
library for similar training we've like

00:05:12,650 --> 00:05:16,400
images and stuff like that

00:05:13,969 --> 00:05:18,080
it's from uber but it's one of those

00:05:16,400 --> 00:05:20,120
packages that you get the tar.gz in you

00:05:18,080 --> 00:05:21,529
have to compile and then it depends on

00:05:20,120 --> 00:05:24,650
your taste flow version New York by

00:05:21,529 --> 00:05:27,110
touch version your MPI version and all

00:05:24,650 --> 00:05:29,300
of that and so it's a little bit tricky

00:05:27,110 --> 00:05:32,029
how to handle this and we also have

00:05:29,300 --> 00:05:35,240
Google which for those that don't know

00:05:32,029 --> 00:05:38,060
Google it's actually a package like if

00:05:35,240 --> 00:05:39,889
you get Python and you saw nothing you

00:05:38,060 --> 00:05:42,560
still can import Google we have an empty

00:05:39,889 --> 00:05:44,029
need file but like it's there and the

00:05:42,560 --> 00:05:49,250
Google package causes a little bit of

00:05:44,029 --> 00:05:51,469
trouble so let's get some baseline and

00:05:49,250 --> 00:05:53,539
this is a red phone there is a ruse

00:05:51,469 --> 00:05:55,669
Python they just use everything that we

00:05:53,539 --> 00:05:58,699
have from the original native and it

00:05:55,669 --> 00:06:00,589
also includes pip support basically

00:05:58,699 --> 00:06:02,389
specify where's my requirements I have a

00:06:00,589 --> 00:06:04,789
bunch of lists of everything and then

00:06:02,389 --> 00:06:06,409
you can say we saw this and everything

00:06:04,789 --> 00:06:08,419
just works and we can depend on

00:06:06,409 --> 00:06:11,150
everything every single package that

00:06:08,419 --> 00:06:13,099
since out there the problem here is that

00:06:11,150 --> 00:06:15,349
we need to do a reboot every time you

00:06:13,099 --> 00:06:16,939
change this requirements file and this

00:06:15,349 --> 00:06:17,750
reboot can being like download

00:06:16,939 --> 00:06:20,990
everything again

00:06:17,750 --> 00:06:22,969
or sometimes boot everything again and

00:06:20,990 --> 00:06:25,669
some beauties of this like takes minutes

00:06:22,969 --> 00:06:28,370
to run a single builds of a package and

00:06:25,669 --> 00:06:30,919
that's not very great and you only lock

00:06:28,370 --> 00:06:33,110
the versions of whatever you specify if

00:06:30,919 --> 00:06:34,909
you specify them most users are like oh

00:06:33,110 --> 00:06:35,449
yeah it depends on numpy which version I

00:06:34,909 --> 00:06:37,459
don't care

00:06:35,449 --> 00:06:40,610
give me a version and that's not very

00:06:37,459 --> 00:06:42,590
great so there are packages that try to

00:06:40,610 --> 00:06:43,610
solve the secondary point

00:06:42,590 --> 00:06:46,790
just gives you a text file with

00:06:43,610 --> 00:06:48,410
everything but basically inspirations

00:06:46,790 --> 00:06:51,080
from other packages that have other

00:06:48,410 --> 00:06:54,440
languages have used it like go we decide

00:06:51,080 --> 00:06:57,140
to lock basically it provides a separate

00:06:54,440 --> 00:06:58,310
basel file there if you do missile run

00:06:57,140 --> 00:07:00,050
people depth update

00:06:58,310 --> 00:07:01,190
it's gonna run pip everything the

00:07:00,050 --> 00:07:03,170
backgrounds you're gonna do all the

00:07:01,190 --> 00:07:04,670
black magic that it needs to do and it's

00:07:03,170 --> 00:07:06,470
gonna create one base of fire with all

00:07:04,670 --> 00:07:08,720
versions rocket or the penis locking

00:07:06,470 --> 00:07:09,440
everything solve it for you and now

00:07:08,720 --> 00:07:11,900
you're good to go

00:07:09,440 --> 00:07:13,640
because you have one file defining all

00:07:11,900 --> 00:07:15,260
of the penis all trains in the penises

00:07:13,640 --> 00:07:18,230
everything that you want to do and other

00:07:15,260 --> 00:07:20,720
versions for this talk I'm gonna ignore

00:07:18,230 --> 00:07:22,730
a little bit on Python package there is

00:07:20,720 --> 00:07:24,770
a thing called extras where you can

00:07:22,730 --> 00:07:26,510
define a like import time which actual

00:07:24,770 --> 00:07:28,820
dependents you want let's ignore this

00:07:26,510 --> 00:07:32,000
for now but everything see works is that

00:07:28,820 --> 00:07:33,850
if you care about it so this is the

00:07:32,000 --> 00:07:36,170
minimum baseline that we need to do and

00:07:33,850 --> 00:07:38,480
with this like we get a lot of

00:07:36,170 --> 00:07:40,760
improvements before I had to build and

00:07:38,480 --> 00:07:42,650
load every single thing and all of them

00:07:40,760 --> 00:07:44,360
in the same repository and because

00:07:42,650 --> 00:07:46,280
they're in the same repulsor that's why

00:07:44,360 --> 00:07:48,890
when you change the file base of cleans

00:07:46,280 --> 00:07:51,770
the repository and starts over again now

00:07:48,890 --> 00:07:53,750
I have everything separate and we have

00:07:51,770 --> 00:07:56,600
own repo sir for each wheel we can build

00:07:53,750 --> 00:07:58,520
them in parallel and like if a version

00:07:56,600 --> 00:08:00,140
of one will change we just build that

00:07:58,520 --> 00:08:01,790
wheel if everything else stays the same

00:08:00,140 --> 00:08:04,250
the person doesn't have to depend on

00:08:01,790 --> 00:08:06,350
that if someone depends on one specific

00:08:04,250 --> 00:08:07,760
library they just have to build that

00:08:06,350 --> 00:08:10,300
specific library do not have to build

00:08:07,760 --> 00:08:13,820
everything which is great when you have

00:08:10,300 --> 00:08:15,320
over 100 packages of direct dependencies

00:08:13,820 --> 00:08:18,740
not including transient the business

00:08:15,320 --> 00:08:20,240
dependencies and this is amazing but it

00:08:18,740 --> 00:08:22,310
gets us into a lot of trouble because

00:08:20,240 --> 00:08:24,590
that's not how Python was designed to

00:08:22,310 --> 00:08:26,480
work they're people that develop people

00:08:24,590 --> 00:08:27,350
directly that's not how we're expecting

00:08:26,480 --> 00:08:31,340
you to do things

00:08:27,350 --> 00:08:33,680
so basically set up the PI can import

00:08:31,340 --> 00:08:34,250
any package what this means that for me

00:08:33,680 --> 00:08:36,560
to buttes

00:08:34,250 --> 00:08:39,170
arrival that's called by code I need to

00:08:36,560 --> 00:08:41,120
literally import numpy in my set of the

00:08:39,170 --> 00:08:43,070
body which means I have to have known PI

00:08:41,120 --> 00:08:47,510
already installed and rare which imports

00:08:43,070 --> 00:08:49,820
the way people does it is just you set

00:08:47,510 --> 00:08:51,020
it up and you build a dependency you

00:08:49,820 --> 00:08:53,750
install the dependence in the sitting

00:08:51,020 --> 00:08:55,460
folder and then you move on but because

00:08:53,750 --> 00:08:57,650
base is trying to not corrupt

00:08:55,460 --> 00:08:59,960
this isn't just trying to be everything

00:08:57,650 --> 00:09:02,960
more self-contained we have to do the

00:08:59,960 --> 00:09:04,730
people job here so basically we build a

00:09:02,960 --> 00:09:06,890
dependency we strechted the penis for

00:09:04,730 --> 00:09:09,290
you we put the dependents in the Python

00:09:06,890 --> 00:09:11,060
path so that when they set up top I try

00:09:09,290 --> 00:09:13,220
to pour that the dependence is gonna be

00:09:11,060 --> 00:09:15,920
available and then we build a target of

00:09:13,220 --> 00:09:19,460
PIP and then everybody's happy except

00:09:15,920 --> 00:09:21,980
that if peep is not gonna find the

00:09:19,460 --> 00:09:25,130
dependency in your in your path set up

00:09:21,980 --> 00:09:26,960
to section of pips all this case it's

00:09:25,130 --> 00:09:28,550
going to try to download because by

00:09:26,960 --> 00:09:30,410
default you just trench it all all

00:09:28,550 --> 00:09:32,410
everything that you depend on and if you

00:09:30,410 --> 00:09:34,730
download a runtime boom we don't have

00:09:32,410 --> 00:09:37,640
like this locket versions of everything

00:09:34,730 --> 00:09:40,040
anymore so we disable it if you try to

00:09:37,640 --> 00:09:41,570
build something like we have a bug in

00:09:40,040 --> 00:09:43,850
our codes and we don't get a dependence

00:09:41,570 --> 00:09:46,100
for you it's gonna burn and crash your

00:09:43,850 --> 00:09:48,050
build and that's good because we have a

00:09:46,100 --> 00:09:51,680
bug we should stop the bug as soon as we

00:09:48,050 --> 00:09:53,180
can great now I have all these wheels

00:09:51,680 --> 00:09:56,570
and everything is independence

00:09:53,180 --> 00:10:01,670
everything is isolated and we have

00:09:56,570 --> 00:10:02,480
Petofi for those that don't know about

00:10:01,670 --> 00:10:09,140
this

00:10:02,480 --> 00:10:10,940
I ain't you so much basically at some

00:10:09,140 --> 00:10:11,270
moment in time I don't even remember the

00:10:10,940 --> 00:10:13,640
year

00:10:11,270 --> 00:10:15,610
I don't think him vitally came up and

00:10:13,640 --> 00:10:17,570
like has a lot of improvements and

00:10:15,610 --> 00:10:20,360
basically designed to break a lot of

00:10:17,570 --> 00:10:22,940
stuff in the language and because of

00:10:20,360 --> 00:10:24,800
these we have some code that's cool you

00:10:22,940 --> 00:10:26,510
try to be compatible other codes not

00:10:24,800 --> 00:10:29,750
compatible and then we search you have

00:10:26,510 --> 00:10:31,040
this nightmare of transition and we're

00:10:29,750 --> 00:10:33,200
supposed to have transition to bite off

00:10:31,040 --> 00:10:34,580
free like a few years ago but every time

00:10:33,200 --> 00:10:37,910
we're like no this time it's gonna

00:10:34,580 --> 00:10:39,710
happen we don't do it this time I think

00:10:37,910 --> 00:10:41,960
it's gonna happen because numpy said

00:10:39,710 --> 00:10:43,730
enough I'm not gonna support my new tree

00:10:41,960 --> 00:10:47,690
anymore so hopefully that's gonna push

00:10:43,730 --> 00:10:48,740
people but not only you sometimes have

00:10:47,690 --> 00:10:50,210
like different appendices

00:10:48,740 --> 00:10:52,220
the transient dependence can be

00:10:50,210 --> 00:10:55,460
different as well and that's a problem

00:10:52,220 --> 00:10:57,050
because we search have should resolve

00:10:55,460 --> 00:10:59,290
the two dependencies in the two

00:10:57,050 --> 00:11:02,360
different ecosystems at the same time

00:10:59,290 --> 00:11:04,310
but yeah we can do this we set up one

00:11:02,360 --> 00:11:06,350
point in parts for vitatree one point

00:11:04,310 --> 00:11:08,440
two parts for petal three we actually

00:11:06,350 --> 00:11:10,570
need to make some change so

00:11:08,440 --> 00:11:13,210
we can specify the Python itself because

00:11:10,570 --> 00:11:15,460
if use this setup routes by 2 right now

00:11:13,210 --> 00:11:18,160
because the Python that's available in

00:11:15,460 --> 00:11:19,540
your path and like it doesn't know if

00:11:18,160 --> 00:11:21,880
it's Python shop by the free so we have

00:11:19,540 --> 00:11:23,620
to point you your specific one then we

00:11:21,880 --> 00:11:26,470
set up on the beautifier config saying

00:11:23,620 --> 00:11:28,720
okay do I own a Python 2 or doing 1 PI 2

00:11:26,470 --> 00:11:31,150
free and then in your user application

00:11:28,720 --> 00:11:32,620
you have to load the requirements for pi

00:11:31,150 --> 00:11:34,570
that you load your requirements for

00:11:32,620 --> 00:11:36,580
petal free and then in your binary like

00:11:34,570 --> 00:11:38,530
ok for doing potential I depend on this

00:11:36,580 --> 00:11:42,340
if I'm doing Python 3 I depend on that

00:11:38,530 --> 00:11:43,770
and we present this strike some of our

00:11:42,340 --> 00:11:48,220
researchers and you're like yeah no

00:11:43,770 --> 00:11:50,530
we're not gonna do this like you're like

00:11:48,220 --> 00:11:53,140
what is this relax me like what what are

00:11:50,530 --> 00:11:54,640
you talk about and yeah this is a little

00:11:53,140 --> 00:11:57,550
bit tricky if you have to keep

00:11:54,640 --> 00:12:00,070
maintaining a big codebase and the way

00:11:57,550 --> 00:12:01,120
we do this is like okay most of the

00:12:00,070 --> 00:12:03,160
people are going to depend on some

00:12:01,120 --> 00:12:08,410
packages they're available chewy free

00:12:03,160 --> 00:12:10,570
let's build up proxy basically the proxy

00:12:08,410 --> 00:12:14,860
we just call it there is a Python depth

00:12:10,570 --> 00:12:16,630
and basically on the values if it's by 2

00:12:14,860 --> 00:12:18,430
- I'm going to use the dependence for

00:12:16,630 --> 00:12:21,010
two if I'm using 3 I'm using the depends

00:12:18,430 --> 00:12:23,470
for free and then now I have something

00:12:21,010 --> 00:12:25,050
that's just requirements requiring spite

00:12:23,470 --> 00:12:27,040
on chew and requires Python free

00:12:25,050 --> 00:12:28,270
everything that's a package that's

00:12:27,040 --> 00:12:30,250
available in both of them

00:12:28,270 --> 00:12:32,200
I just say require I don't need you to

00:12:30,250 --> 00:12:34,600
specify for me what it's gonna be or not

00:12:32,200 --> 00:12:36,310
if there's a package that's only a very

00:12:34,600 --> 00:12:38,380
important you you just say it's a

00:12:36,310 --> 00:12:39,550
requirement for a PI to 2 if it's not

00:12:38,380 --> 00:12:41,140
gonna be available if you're running

00:12:39,550 --> 00:12:43,570
Python free we're just gonna silence

00:12:41,140 --> 00:12:45,910
ignore that for you and everything goes

00:12:43,570 --> 00:12:48,190
on you don't know what's going on so

00:12:45,910 --> 00:12:50,140
these are all much much lower overhead

00:12:48,190 --> 00:12:53,020
to keep compatibility of multiple

00:12:50,140 --> 00:12:54,640
versions and our researchers actually

00:12:53,020 --> 00:12:56,500
they understand this they're like ok

00:12:54,640 --> 00:12:57,970
these are general requirements if I'm

00:12:56,500 --> 00:13:00,250
using Python 2 I use these different

00:12:57,970 --> 00:13:02,200
commands if I'm using Python 3 I use the

00:13:00,250 --> 00:13:04,210
other commands and this works actually

00:13:02,200 --> 00:13:10,270
pretty well I was surprised when these

00:13:04,210 --> 00:13:13,690
actually working ok then we have a

00:13:10,270 --> 00:13:17,230
problem we use are not deterministic

00:13:13,690 --> 00:13:18,880
when you build it and first reason why

00:13:17,230 --> 00:13:19,270
we fought was like yeah with our zip

00:13:18,880 --> 00:13:21,260
files

00:13:19,270 --> 00:13:22,820
zip files include timestamp

00:13:21,260 --> 00:13:25,280
let's just fix timestamp of everything

00:13:22,820 --> 00:13:27,710
and it's gonna solve turns out no yeah

00:13:25,280 --> 00:13:30,050
that's not true there's a lot of steps

00:13:27,710 --> 00:13:32,120
on the compilation itself if you have

00:13:30,050 --> 00:13:33,920
like some C dependences that they're

00:13:32,120 --> 00:13:36,650
gonna change how everything is done and

00:13:33,920 --> 00:13:38,330
then you can you end up with a different

00:13:36,650 --> 00:13:40,400
hash if you end up with a different hash

00:13:38,330 --> 00:13:41,720
for your wheel every action that you

00:13:40,400 --> 00:13:44,000
have depend on it's it's gonna have a

00:13:41,720 --> 00:13:46,010
different hash your base location goes

00:13:44,000 --> 00:13:49,880
through space because it's very very

00:13:46,010 --> 00:13:52,400
sane and we need to solve that in order

00:13:49,880 --> 00:13:54,080
like okay we have a basil remote cache

00:13:52,400 --> 00:13:56,120
like it's a rare set up we have already

00:13:54,080 --> 00:13:58,970
use it it's pretty great

00:13:56,120 --> 00:13:59,510
can you support repositories no not at

00:13:58,970 --> 00:14:01,220
the moment

00:13:59,510 --> 00:14:03,380
I believe there are some technical

00:14:01,220 --> 00:14:06,800
limitations that are way out of my scope

00:14:03,380 --> 00:14:09,710
right now but that doesn't work right

00:14:06,800 --> 00:14:12,710
now and we're like okay we're a service

00:14:09,710 --> 00:14:16,040
where we have a C and we have gas

00:14:12,710 --> 00:14:17,900
let's just put ash wheels and we put all

00:14:16,040 --> 00:14:19,160
the wheels there and everybody can just

00:14:17,900 --> 00:14:21,680
fetch wheels and now we're sure

00:14:19,160 --> 00:14:26,120
everything has the same hash this is a

00:14:21,680 --> 00:14:30,350
big hash big hack big big hack don't

00:14:26,120 --> 00:14:32,060
don't do that this is not a like old

00:14:30,350 --> 00:14:34,340
stock that you had before was about like

00:14:32,060 --> 00:14:36,470
how you do things amazing like how basil

00:14:34,340 --> 00:14:39,440
is gonna be amazing this is a talk of

00:14:36,470 --> 00:14:43,790
like yeah we got it to work don't do it

00:14:39,440 --> 00:14:45,800
again but like it works and we all of

00:14:43,790 --> 00:14:47,990
our wheels are gonna be the same and

00:14:45,800 --> 00:14:49,670
fetch them we don't have to reboot the

00:14:47,990 --> 00:14:52,400
problem of packages that take like two

00:14:49,670 --> 00:14:55,550
minutes rebuild goes away and we're done

00:14:52,400 --> 00:14:58,070
and we are actually looking to the local

00:14:55,550 --> 00:14:59,630
reporter cache the basil has for the

00:14:58,070 --> 00:15:00,530
load files we're trying to see if we can

00:14:59,630 --> 00:15:03,440
it sneak peek

00:15:00,530 --> 00:15:07,010
some of the generate files there but no

00:15:03,440 --> 00:15:09,260
success so far and there's like close up

00:15:07,010 --> 00:15:11,180
the parts of we need to make a user

00:15:09,260 --> 00:15:12,920
experience really good and this is

00:15:11,180 --> 00:15:15,110
actually pretty great so our users have

00:15:12,920 --> 00:15:17,270
been using this and I got you my grades

00:15:15,110 --> 00:15:19,850
like over 100 data scientists into basil

00:15:17,270 --> 00:15:21,500
and they're like oh my god basil works

00:15:19,850 --> 00:15:23,840
like I just installed my machine and

00:15:21,500 --> 00:15:25,730
everything works like out of the box all

00:15:23,840 --> 00:15:28,600
right yeah that's why I was strange for

00:15:25,730 --> 00:15:30,920
sutra' coach basil in the beginning

00:15:28,600 --> 00:15:32,570
there's a lot of more than one you

00:15:30,920 --> 00:15:33,250
should do it like the Python is a very

00:15:32,570 --> 00:15:35,830
very

00:15:33,250 --> 00:15:40,980
your language with very very weird serif

00:15:35,830 --> 00:15:42,600
users and true I'm user of Python so

00:15:40,980 --> 00:15:45,280
it's fine

00:15:42,600 --> 00:15:49,750
basically no it's the user experience

00:15:45,280 --> 00:15:53,950
done let's solve by Tom weird stuff

00:15:49,750 --> 00:15:56,290
first thing named collisions remember an

00:15:53,950 --> 00:15:58,390
image like google packages they cause a

00:15:56,290 --> 00:16:00,430
little bit of trouble basically if I

00:15:58,390 --> 00:16:01,780
stop Google Cloud it's actually going to

00:16:00,430 --> 00:16:04,000
saw a bunch of different wheels there is

00:16:01,780 --> 00:16:05,680
a for login DNS every single one of them

00:16:04,000 --> 00:16:07,840
there are different wheels and because

00:16:05,680 --> 00:16:09,940
of how big actually works and Express to

00:16:07,840 --> 00:16:12,190
work it's just going to stall everything

00:16:09,940 --> 00:16:13,570
extracts in the zips into folders and

00:16:12,190 --> 00:16:15,670
that's going to be done and it's fine

00:16:13,570 --> 00:16:17,590
because when you actually work through

00:16:15,670 --> 00:16:19,270
pip all the packages are gonna end up

00:16:17,590 --> 00:16:20,920
colliding paths with each other

00:16:19,270 --> 00:16:23,140
and that's actually the expected way to

00:16:20,920 --> 00:16:25,420
work like there's a pap that's based

00:16:23,140 --> 00:16:27,310
like by two standards there's a pap

00:16:25,420 --> 00:16:30,850
about this and it's fine that's the

00:16:27,310 --> 00:16:33,220
correct behavior but when you go to base

00:16:30,850 --> 00:16:35,020
or base like nope I don't like you to

00:16:33,220 --> 00:16:37,360
collide stuff because that's a bad

00:16:35,020 --> 00:16:38,800
practice so I'm gonna keep each wheel in

00:16:37,360 --> 00:16:41,200
a separate bus or everything is going to

00:16:38,800 --> 00:16:44,230
be isolated and then we try to port

00:16:41,200 --> 00:16:46,390
Google Cloud DNS and depends on which

00:16:44,230 --> 00:16:48,310
other packages we have on our Python

00:16:46,390 --> 00:16:51,010
path where they're gonna hit the first

00:16:48,310 --> 00:16:52,150
repository with the logging and then my

00:16:51,010 --> 00:16:53,560
pythons game black I don't know what

00:16:52,150 --> 00:16:55,630
you're talk about I don't see any DNS

00:16:53,560 --> 00:16:58,480
package here or it's gonna hit the

00:16:55,630 --> 00:17:00,700
second one and then you're gonna be like

00:16:58,480 --> 00:17:04,600
ok great so I can get DNS but then I

00:17:00,700 --> 00:17:07,000
cannot get logging and this is a big big

00:17:04,600 --> 00:17:08,560
problem for us because it's not only

00:17:07,000 --> 00:17:11,560
Google like I like to pick on Google

00:17:08,560 --> 00:17:12,910
because they're here today but like this

00:17:11,560 --> 00:17:15,069
is not only Google that does this

00:17:12,910 --> 00:17:17,860
backports does this a lot

00:17:15,069 --> 00:17:20,860
so this is a real problem of how byte is

00:17:17,860 --> 00:17:23,949
set up because imp it-it's fine it's

00:17:20,860 --> 00:17:26,110
just in basil it isn't the way to

00:17:23,949 --> 00:17:26,949
resolve this one like the first one that

00:17:26,110 --> 00:17:29,020
we fought it's just

00:17:26,949 --> 00:17:30,850
let's see mink all the dependencies

00:17:29,020 --> 00:17:33,130
packaged into the root of their own

00:17:30,850 --> 00:17:36,490
files simulate what people doing and

00:17:33,130 --> 00:17:38,470
they were gonna solve it and then we

00:17:36,490 --> 00:17:41,170
look like basil source codes and it was

00:17:38,470 --> 00:17:43,030
a bunch of Java and I've never coded you

00:17:41,170 --> 00:17:44,460
have in my life roll like a little bit

00:17:43,030 --> 00:17:47,070
of scalos like yeah

00:17:44,460 --> 00:17:49,290
I'm not gonna try to do this and there

00:17:47,070 --> 00:17:51,090
is actually a second reason if you spied

00:17:49,290 --> 00:17:54,120
on big suggestion for everybody

00:17:51,090 --> 00:17:57,330
format your hard drive and install more

00:17:54,120 --> 00:17:59,730
inodes because basil links everything

00:17:57,330 --> 00:18:03,120
for symlinks and we keep running our

00:17:59,730 --> 00:18:05,760
like my disk like 20% full and this just

00:18:03,120 --> 00:18:07,380
gives me an error like your disk so like

00:18:05,760 --> 00:18:08,760
I don't know what you're doing and then

00:18:07,380 --> 00:18:11,160
we check the space it's fine

00:18:08,760 --> 00:18:13,830
it's actually your number of I nodes has

00:18:11,160 --> 00:18:16,920
being like basil just went crazy with

00:18:13,830 --> 00:18:19,590
the bunch of symlinks like I understand

00:18:16,920 --> 00:18:21,750
why it does simulates but big suggestion

00:18:19,590 --> 00:18:24,390
increase by like 10x my number of eye

00:18:21,750 --> 00:18:27,650
notes just works never never had a

00:18:24,390 --> 00:18:30,420
program again but this is not very great

00:18:27,650 --> 00:18:34,440
this other solution we thought about is

00:18:30,420 --> 00:18:36,750
see here that's we actually implemented

00:18:34,440 --> 00:18:38,370
that's basically okay let's create a

00:18:36,750 --> 00:18:40,740
fake repository where we actually

00:18:38,370 --> 00:18:43,350
extract everything so not an extract

00:18:40,740 --> 00:18:45,270
every single package but the package

00:18:43,350 --> 00:18:46,890
that we know that they collide we're

00:18:45,270 --> 00:18:50,040
going to extract them so that we have

00:18:46,890 --> 00:18:52,170
the expected collision and the second

00:18:50,040 --> 00:18:54,450
way is something like we are working

00:18:52,170 --> 00:18:58,010
like actually we were to work these days

00:18:54,450 --> 00:19:01,020
but it's a little bit hacky because

00:18:58,010 --> 00:19:02,970
python is amazing because very flexible

00:19:01,020 --> 00:19:05,280
Python allows you to do anything that

00:19:02,970 --> 00:19:07,680
you want to do and that's why it's such

00:19:05,280 --> 00:19:10,110
a big problem sometimes but here we can

00:19:07,680 --> 00:19:12,570
literally overwrite how biting is going

00:19:10,110 --> 00:19:14,340
to behave when it's rash import stuff we

00:19:12,570 --> 00:19:16,080
can tell Python yeah you know the way

00:19:14,340 --> 00:19:17,340
you try to import the package yeah

00:19:16,080 --> 00:19:19,680
forget about this we're gonna implement

00:19:17,340 --> 00:19:22,920
this different way and then we can have

00:19:19,680 --> 00:19:24,180
when we fail to import we continue we go

00:19:22,920 --> 00:19:26,040
to the next package in goes to next

00:19:24,180 --> 00:19:27,750
package until you get to the end and

00:19:26,040 --> 00:19:29,370
then we regression enter like okay yeah

00:19:27,750 --> 00:19:30,990
there's no possibility that I'm gonna

00:19:29,370 --> 00:19:33,690
find this specific package dynamics

00:19:30,990 --> 00:19:36,390
wrenching port and then I move on but

00:19:33,690 --> 00:19:38,940
it's a pretty big hack that we have to

00:19:36,390 --> 00:19:40,350
do but it's implement like actually

00:19:38,940 --> 00:19:41,790
works pretty well there are some

00:19:40,350 --> 00:19:46,230
educators you're trying to figure out

00:19:41,790 --> 00:19:48,150
but again took like mouths for us to

00:19:46,230 --> 00:19:52,590
figure this out especially because we're

00:19:48,150 --> 00:19:55,200
gonna have like big bite experts yeah

00:19:52,590 --> 00:19:56,670
they're build appendices as I mentioned

00:19:55,200 --> 00:19:57,820
like sometimes when I when install

00:19:56,670 --> 00:20:00,190
package I have

00:19:57,820 --> 00:20:02,590
other packages available for instance if

00:20:00,190 --> 00:20:05,380
I have my soap by CUDA I have to have

00:20:02,590 --> 00:20:06,070
numpy installed and for instance in

00:20:05,380 --> 00:20:08,980
Horvitz

00:20:06,070 --> 00:20:10,840
I need a safe a Phi by C parser and

00:20:08,980 --> 00:20:15,010
thenso flow either GPO version or not

00:20:10,840 --> 00:20:16,870
and for logistical reasons horror what

00:20:15,010 --> 00:20:18,520
doesn't tell you that if you go to the

00:20:16,870 --> 00:20:20,770
documentation it's fine but if you

00:20:18,520 --> 00:20:21,880
actually go and try to stall it it's

00:20:20,770 --> 00:20:24,190
going to complain that these packages

00:20:21,880 --> 00:20:26,200
are not available so in Python you're

00:20:24,190 --> 00:20:28,360
technically allowed to depend on

00:20:26,200 --> 00:20:31,120
packages that you don't tell the package

00:20:28,360 --> 00:20:33,400
manager or depend on you just have to

00:20:31,120 --> 00:20:34,540
follow the install instructions and a

00:20:33,400 --> 00:20:37,000
version that's very very common

00:20:34,540 --> 00:20:39,520
especially when we have some packages

00:20:37,000 --> 00:20:42,310
like dance-off flow that creates two

00:20:39,520 --> 00:20:44,200
different two different wheels tests of

00:20:42,310 --> 00:20:46,660
all there is the GPU version the non GPU

00:20:44,200 --> 00:20:48,460
versions and I understand why but then

00:20:46,660 --> 00:20:50,770
if you depend on tests of all you cannot

00:20:48,460 --> 00:20:51,910
say I depend on tensorflow because then

00:20:50,770 --> 00:20:53,380
you're not allowed to have the GPU

00:20:51,910 --> 00:20:54,990
version and if you depend on the GPU

00:20:53,380 --> 00:20:58,240
version you're not allowed to use this

00:20:54,990 --> 00:21:00,640
sepia version so yeah that's a little

00:20:58,240 --> 00:21:03,010
bit of a trouble and sometimes you want

00:21:00,640 --> 00:21:05,530
to specify environment variables for

00:21:03,010 --> 00:21:08,080
your builds and we need to make it work

00:21:05,530 --> 00:21:10,420
because sometimes you just have a bunch

00:21:08,080 --> 00:21:12,730
of packages this is actually a copy for

00:21:10,420 --> 00:21:14,380
what we have in a repo sorry reduce it

00:21:12,730 --> 00:21:16,240
like this is actually probably 30 lines

00:21:14,380 --> 00:21:18,040
of codes in total of all the crazy

00:21:16,240 --> 00:21:20,800
package that we need to fix every time

00:21:18,040 --> 00:21:22,480
and there is another kind of thing

00:21:20,800 --> 00:21:25,000
that's allowed in Python and I don't

00:21:22,480 --> 00:21:26,830
understand why but it is where I have

00:21:25,000 --> 00:21:29,590
cyclical dependencies so basically

00:21:26,830 --> 00:21:30,910
Kerris depends on Karis applications and

00:21:29,590 --> 00:21:33,490
Karis applications depends on carriers

00:21:30,910 --> 00:21:35,230
and it's fine because pip just tries to

00:21:33,490 --> 00:21:37,420
go through the graph and resolves

00:21:35,230 --> 00:21:39,730
everything and then it's like oh I got

00:21:37,420 --> 00:21:42,040
your cycle it's okay it's already

00:21:39,730 --> 00:21:43,420
installed let me move on because in the

00:21:42,040 --> 00:21:46,000
end everything is gonna get into a

00:21:43,420 --> 00:21:50,520
collision you gotta do sin to beso and

00:21:46,000 --> 00:21:50,520
base is gonna be like no bad built bad

00:21:51,770 --> 00:21:57,150
yeah like you can measure you should not

00:21:55,290 --> 00:22:00,420
have dependents like cyclic dependency

00:21:57,150 --> 00:22:02,190
no Butte so we had to do like even a

00:22:00,420 --> 00:22:04,110
bigger hack to just remove these

00:22:02,190 --> 00:22:06,810
dependencies that are actually on the

00:22:04,110 --> 00:22:09,690
package so we have to interact a lot and

00:22:06,810 --> 00:22:15,240
I fix this craziness of the package by

00:22:09,690 --> 00:22:17,190
the world that's fine and by the way

00:22:15,240 --> 00:22:19,830
wheels when I sell like they're amazing

00:22:17,190 --> 00:22:23,790
their grades their zip files it's

00:22:19,830 --> 00:22:25,230
actually a lie wheels have like it's a

00:22:23,790 --> 00:22:27,330
zip file you can actually just call

00:22:25,230 --> 00:22:29,370
unzip in a wheel but you get some extra

00:22:27,330 --> 00:22:31,320
stuff that you have to fix for instance

00:22:29,370 --> 00:22:33,210
entry points there's a text file there

00:22:31,320 --> 00:22:34,710
there if it's specified you can have

00:22:33,210 --> 00:22:38,370
like a bunch of sections different stuff

00:22:34,710 --> 00:22:40,260
but in this example is basically 10 so

00:22:38,370 --> 00:22:41,580
bored it says there is a console script

00:22:40,260 --> 00:22:43,860
which means I need to create a

00:22:41,580 --> 00:22:45,990
executable that's going to be called 10

00:22:43,860 --> 00:22:48,510
so board and what's gonna call is the

00:22:45,990 --> 00:22:51,060
function rummy in the package 10

00:22:48,510 --> 00:22:52,890
surfboard dot main and then we're like

00:22:51,060 --> 00:22:54,900
okay let's figure out we're going to

00:22:52,890 --> 00:22:57,450
create this page for the binary for you

00:22:54,900 --> 00:23:00,420
we're gonna expose this binary for you

00:22:57,450 --> 00:23:03,150
and then you can just call basil run on

00:23:00,420 --> 00:23:04,590
its directly or in an alias from it so

00:23:03,150 --> 00:23:06,570
we extended the requirement saying I

00:23:04,590 --> 00:23:09,180
required like not in the library itself

00:23:06,570 --> 00:23:11,490
but we require the binary associated

00:23:09,180 --> 00:23:13,200
with the library and this have a lot of

00:23:11,490 --> 00:23:15,360
trouble where people like I don't

00:23:13,200 --> 00:23:17,340
understand how I'm gets my bandage work

00:23:15,360 --> 00:23:21,600
like it wasn't my common line before how

00:23:17,340 --> 00:23:23,970
they fix this and some other the tayo is

00:23:21,600 --> 00:23:26,370
that sometimes your wheels have non

00:23:23,970 --> 00:23:29,040
Python codes for instance again there's

00:23:26,370 --> 00:23:31,110
a flaw but notice of race specific PI

00:23:29,040 --> 00:23:33,450
binds also does this basically libraries

00:23:31,110 --> 00:23:35,280
that if they still allow you

00:23:33,450 --> 00:23:36,840
compatibility of other languages and

00:23:35,280 --> 00:23:39,360
they're gonna provide you some extra

00:23:36,840 --> 00:23:40,620
stuff that's not Python and it doesn't

00:23:39,360 --> 00:23:44,820
know how to handle this because the

00:23:40,620 --> 00:23:47,490
Python sites behaves very well and the

00:23:44,820 --> 00:23:49,440
rest is like just custom so we needed to

00:23:47,490 --> 00:23:51,270
provide some way for each extent so

00:23:49,440 --> 00:23:53,340
basically this we specify an extra

00:23:51,270 --> 00:23:55,290
beautify oh and we append this to the

00:23:53,340 --> 00:23:58,640
real build file so that we can have

00:23:55,290 --> 00:24:01,880
whatever extra dependents you want and

00:23:58,640 --> 00:24:04,590
thanks of furs like we want to push this

00:24:01,880 --> 00:24:06,930
improvement upstream

00:24:04,590 --> 00:24:08,910
they're not perfect so that's why I like

00:24:06,930 --> 00:24:10,890
I don't know if we're gonna question

00:24:08,910 --> 00:24:13,730
supreme or not all of it is actually

00:24:10,890 --> 00:24:16,200
available already if you can find it and

00:24:13,730 --> 00:24:19,020
we have a lot of other improvements that

00:24:16,200 --> 00:24:21,300
we have done like pure libs and some

00:24:19,020 --> 00:24:24,570
extra crazy stuff that Python sometimes

00:24:21,300 --> 00:24:26,400
allows you to do and basically you need

00:24:24,570 --> 00:24:28,680
to prove how we're gonna handle packages

00:24:26,400 --> 00:24:30,510
that have a name collisions we're

00:24:28,680 --> 00:24:32,400
working this like seems pretty we have a

00:24:30,510 --> 00:24:34,080
pretty solid solution too but hopefully

00:24:32,400 --> 00:24:34,710
these parts we can cut out by next week

00:24:34,080 --> 00:24:37,230
or stuff like that

00:24:34,710 --> 00:24:40,740
Auto generation of Python build files

00:24:37,230 --> 00:24:42,390
because like Jay mention on the go

00:24:40,740 --> 00:24:44,400
presentation about gazelle-like go

00:24:42,390 --> 00:24:45,780
people like I don't listen why need

00:24:44,400 --> 00:24:48,180
build files like you just called go

00:24:45,780 --> 00:24:49,350
builds and go run and it works but is

00:24:48,180 --> 00:24:50,550
the same they're like why do you need a

00:24:49,350 --> 00:24:52,620
pile like a good fire

00:24:50,550 --> 00:24:54,300
I just got bite and it works so we're

00:24:52,620 --> 00:24:56,070
gonna try to integrate we have a custom

00:24:54,300 --> 00:24:58,530
way that we have done this but I didn't

00:24:56,070 --> 00:24:59,790
integrate into gazelle and I heard also

00:24:58,530 --> 00:25:01,500
some other people being like oh we're

00:24:59,790 --> 00:25:03,090
gonna do the same in Java and there's a

00:25:01,500 --> 00:25:05,760
lot of other languages where we can

00:25:03,090 --> 00:25:09,420
leverage gets our knowledge to do it and

00:25:05,760 --> 00:25:14,430
our wish list based like don't leak

00:25:09,420 --> 00:25:16,350
system package by default the way it

00:25:14,430 --> 00:25:18,510
does because your Python system package

00:25:16,350 --> 00:25:20,700
and your pythons package you actually

00:25:18,510 --> 00:25:23,280
get has every single thing available so

00:25:20,700 --> 00:25:24,870
you can just call Python and like import

00:25:23,280 --> 00:25:27,300
numpy if you have installed and basil

00:25:24,870 --> 00:25:30,480
has no idea about it so if you uninstall

00:25:27,300 --> 00:25:32,190
numpy base is gonna think oh my gosh is

00:25:30,480 --> 00:25:34,950
good my test good everything's fine

00:25:32,190 --> 00:25:37,680
move on and this is not very great and

00:25:34,950 --> 00:25:39,480
we need hermetic support for wheels all

00:25:37,680 --> 00:25:41,370
of these like I mentioned we're not

00:25:39,480 --> 00:25:42,600
hermetic we just put everybody in doctor

00:25:41,370 --> 00:25:44,880
containers everybody's the same

00:25:42,600 --> 00:25:47,370
container like let's move on let's solve

00:25:44,880 --> 00:25:49,740
hermetic problems later on but this

00:25:47,370 --> 00:25:53,430
doesn't allow us to use for instance the

00:25:49,740 --> 00:25:54,630
remote build and execution which I think

00:25:53,430 --> 00:25:56,670
Nicholas is going to give a talk about

00:25:54,630 --> 00:25:58,020
this later on like there's some

00:25:56,670 --> 00:25:59,730
constraints that you have to pose and

00:25:58,020 --> 00:26:02,160
one of them is like you should be

00:25:59,730 --> 00:26:05,700
aromatic and we're not definitely not

00:26:02,160 --> 00:26:08,370
and ideally we want to move the Python

00:26:05,700 --> 00:26:10,260
supports from like the core java into a

00:26:08,370 --> 00:26:14,490
ruse Python that's already available but

00:26:10,260 --> 00:26:16,980
like not in Java because it's our large

00:26:14,490 --> 00:26:18,240
like Python basically so my two users

00:26:16,980 --> 00:26:21,270
can change its

00:26:18,240 --> 00:26:23,160
very easily and we want to allow our

00:26:21,270 --> 00:26:24,980
users to just go crazy and do whatever

00:26:23,160 --> 00:26:28,010
they need to do to get their job done

00:26:24,980 --> 00:26:36,210
and that's it for me thanks folks

00:26:28,010 --> 00:26:36,210

YouTube URL: https://www.youtube.com/watch?v=9mhmGcR6CPo


