Title: BazelCon 2018 Day 2: BuildGrid
Publication date: 2018-11-02
Playlist: BazelCon 2018
Description: 
	Executing Bazel and BuildStream Remotely
Ed Baunton (Bloomberg L.P.) & Finn Ball (Codethink) event: Bazelcon 2018; re_ty: Publish; product: Open Source - General; fullname: Ed Baunton, Finn Ball;
Captions: 
	00:00:04,420 --> 00:00:09,400
is this working yes hello everyone my

00:00:07,540 --> 00:00:11,170
name is Edie I'm from bimbo and I'm here

00:00:09,400 --> 00:00:13,990
with my colleague Fenn who's from code

00:00:11,170 --> 00:00:15,430
think so I must start with apology all

00:00:13,990 --> 00:00:18,430
fizzy professional apologize there

00:00:15,430 --> 00:00:19,990
behind the native apologizer this is the

00:00:18,430 --> 00:00:21,850
third in a trio as dave said but this is

00:00:19,990 --> 00:00:22,869
going to be the most exciting and you'll

00:00:21,850 --> 00:00:26,350
definitely have something that you want

00:00:22,869 --> 00:00:32,680
to look at later on when you go home so

00:00:26,350 --> 00:00:34,390
it's the big green button alright so a

00:00:32,680 --> 00:00:36,550
little bit about me so I'm a bird grid

00:00:34,390 --> 00:00:38,979
committee I'm also a basal contributing

00:00:36,550 --> 00:00:41,080
might I see my name flyby on some of the

00:00:38,979 --> 00:00:43,089
commits and I'm also the lead of our

00:00:41,080 --> 00:00:44,890
distributed build projects a bloom bear

00:00:43,089 --> 00:00:46,769
which is quite new so we're looking at

00:00:44,890 --> 00:00:52,510
implementing and hosting Byrd grid

00:00:46,769 --> 00:00:54,159
internally hey and I'm Finn and sonic

00:00:52,510 --> 00:00:59,320
polka commit sir and a software engineer

00:00:54,159 --> 00:01:02,080
at code think all right so this little

00:00:59,320 --> 00:01:03,549
quick overview so an issue gonna be

00:01:02,080 --> 00:01:04,869
talking about why we're not immediately

00:01:03,549 --> 00:01:06,760
adopting Bayes at Bloomberg and some of

00:01:04,869 --> 00:01:07,869
the challenges were having we're then

00:01:06,760 --> 00:01:09,130
going to talk about remote execution

00:01:07,869 --> 00:01:11,710
which you probably know a little bit

00:01:09,130 --> 00:01:13,060
about by now and then we'll talk more

00:01:11,710 --> 00:01:14,649
specifically about remote execution with

00:01:13,060 --> 00:01:15,969
build grid which is kind of similar to

00:01:14,649 --> 00:01:18,670
build farm which you've heard about and

00:01:15,969 --> 00:01:20,289
then we'll talk specifically more about

00:01:18,670 --> 00:01:22,960
our build box workers which we use for

00:01:20,289 --> 00:01:24,700
sandbox sake and then Finn has some

00:01:22,960 --> 00:01:26,619
demos and then we'll tell you a little

00:01:24,700 --> 00:01:30,130
bit more about what's coming up for our

00:01:26,619 --> 00:01:31,390
work in progress so working on them so

00:01:30,130 --> 00:01:33,399
in case you're not familiar

00:01:31,390 --> 00:01:36,549
Blumberg was actually founded in the 80s

00:01:33,399 --> 00:01:38,890
and we are a technology company famous

00:01:36,549 --> 00:01:41,079
mostly for maybe the TV channel but

00:01:38,890 --> 00:01:44,799
mostly for the software that we provide

00:01:41,079 --> 00:01:46,899
for financial professionals so traders

00:01:44,799 --> 00:01:49,299
can look at prices stocks options

00:01:46,899 --> 00:01:50,710
futures bonds they can chat with other

00:01:49,299 --> 00:01:52,749
traders they can make trades of a chat

00:01:50,710 --> 00:01:54,369
we have people looking at machine

00:01:52,749 --> 00:01:57,069
learning over news you can get automatic

00:01:54,369 --> 00:01:58,719
automatic trading over news automated

00:01:57,069 --> 00:02:00,759
tweet filtering so you can get latest

00:01:58,719 --> 00:02:03,689
tweets and then trailer games so is for

00:02:00,759 --> 00:02:05,710
example so we have a wide diversity of

00:02:03,689 --> 00:02:07,960
engineers solving lots of different

00:02:05,710 --> 00:02:09,160
problems in what we call apps there's

00:02:07,960 --> 00:02:12,100
lots of hundreds of different apps in

00:02:09,160 --> 00:02:13,959
the Bloomberg terminal so as you might

00:02:12,100 --> 00:02:15,250
understand all those different engineers

00:02:13,959 --> 00:02:17,720
have different requirements as to how

00:02:15,250 --> 00:02:19,910
they want to build their software

00:02:17,720 --> 00:02:21,530
and that's resulted in us having tens of

00:02:19,910 --> 00:02:24,710
thousands of distinct packages each and

00:02:21,530 --> 00:02:26,270
small git repositories and each of those

00:02:24,710 --> 00:02:27,800
is built with our own build system so we

00:02:26,270 --> 00:02:29,750
have tens of different build systems in

00:02:27,800 --> 00:02:31,160
use but we do require that people

00:02:29,750 --> 00:02:33,080
package them generically so that they

00:02:31,160 --> 00:02:35,600
can interact with each other so we have

00:02:33,080 --> 00:02:37,550
a baseline set of build flags that is

00:02:35,600 --> 00:02:40,490
shared around the company and then we

00:02:37,550 --> 00:02:41,900
have this generic packaging system that

00:02:40,490 --> 00:02:44,090
people use to share their headers and

00:02:41,900 --> 00:02:45,730
and libraries with each other so they

00:02:44,090 --> 00:02:48,440
can share share and reuse code obviously

00:02:45,730 --> 00:02:50,420
so team by team varies different

00:02:48,440 --> 00:02:52,220
workflows different build tools they can

00:02:50,420 --> 00:02:56,060
kind of use what they want but still

00:02:52,220 --> 00:02:58,070
sort of share with everyone else and we

00:02:56,060 --> 00:02:59,120
build multiple platforms and that's

00:02:58,070 --> 00:03:00,709
resulted in hundreds of millions of

00:02:59,120 --> 00:03:02,830
lines of C and C++ over the years

00:03:00,709 --> 00:03:04,670
building the Bloomberg terminal and

00:03:02,830 --> 00:03:06,380
currently for our bills were using

00:03:04,670 --> 00:03:08,030
point-to-point remoting so there's not

00:03:06,380 --> 00:03:11,780
really any significant amount of

00:03:08,030 --> 00:03:16,040
distribution going on that ok well why

00:03:11,780 --> 00:03:18,350
not basil so I haven't heard from anyone

00:03:16,040 --> 00:03:20,480
who has migrated millions of lines of

00:03:18,350 --> 00:03:23,660
code that didn't start with basil to use

00:03:20,480 --> 00:03:24,950
basil and I don't think many of our

00:03:23,660 --> 00:03:26,720
engineers would appreciate us diving

00:03:24,950 --> 00:03:29,000
into their code changing auto basil

00:03:26,720 --> 00:03:30,410
overnight whilst we also maintain all

00:03:29,000 --> 00:03:32,570
the third-party code that we import

00:03:30,410 --> 00:03:35,000
building that with basil changing that

00:03:32,570 --> 00:03:37,310
every time someone comes in and patches

00:03:35,000 --> 00:03:38,269
that to basil again so we need to have a

00:03:37,310 --> 00:03:41,930
bit more of an incremental approach

00:03:38,269 --> 00:03:43,790
there so what we're adopting is what's

00:03:41,930 --> 00:03:45,739
called an integration build system or we

00:03:43,790 --> 00:03:47,030
call it integration build system and for

00:03:45,739 --> 00:03:49,250
that we're using what's called build

00:03:47,030 --> 00:03:50,989
stream so that that instead of working

00:03:49,250 --> 00:03:52,549
at the level below the existing build

00:03:50,989 --> 00:03:54,590
system works on top of the existing

00:03:52,549 --> 00:03:56,209
build system so for example you can

00:03:54,590 --> 00:04:00,350
teach build stream how to how to build

00:03:56,209 --> 00:04:03,440
sea make for example so build building

00:04:00,350 --> 00:04:05,600
works for on the basics of what's called

00:04:03,440 --> 00:04:08,180
a BST file use the flat file that

00:04:05,600 --> 00:04:10,670
describes the source for the code the

00:04:08,180 --> 00:04:13,700
way it builds so for example here I have

00:04:10,670 --> 00:04:15,920
my application app BST that roses auto

00:04:13,700 --> 00:04:17,780
tools that can depend on Google tests

00:04:15,920 --> 00:04:19,400
which it builds a see make and it can

00:04:17,780 --> 00:04:21,350
also bit depend on AB cell which builds

00:04:19,400 --> 00:04:23,900
at basil and then they both depend on a

00:04:21,350 --> 00:04:25,970
low level import call here we're using

00:04:23,900 --> 00:04:28,039
Alpine provide the the baseline system

00:04:25,970 --> 00:04:29,090
so everything is totally hermetic and

00:04:28,039 --> 00:04:31,310
reproducible because we're providing

00:04:29,090 --> 00:04:32,840
everything from the base system up

00:04:31,310 --> 00:04:34,580
and then build stream knows how to

00:04:32,840 --> 00:04:36,080
invoke these different tools so I don't

00:04:34,580 --> 00:04:37,760
need to go in and teach Google tests how

00:04:36,080 --> 00:04:40,430
to build as basil actually I think it

00:04:37,760 --> 00:04:42,710
builds with basil as well AB cell builds

00:04:40,430 --> 00:04:44,540
with basil and my app can build with

00:04:42,710 --> 00:04:45,950
auto tools but I don't need to go in and

00:04:44,540 --> 00:04:47,690
change every single one I can just say

00:04:45,950 --> 00:04:49,220
build stream go and build see if this

00:04:47,690 --> 00:04:50,840
thing with sea make and build that thing

00:04:49,220 --> 00:04:52,850
with basil and then give me the results

00:04:50,840 --> 00:04:55,880
and I can compose them together into my

00:04:52,850 --> 00:04:57,500
own application there's a small Asterix

00:04:55,880 --> 00:05:02,330
by the basil plug-in because we're we're

00:04:57,500 --> 00:05:04,340
still working on that okay so a little

00:05:02,330 --> 00:05:06,050
bit about remote execution so that's why

00:05:04,340 --> 00:05:07,970
we're using built room and I'll show you

00:05:06,050 --> 00:05:11,180
in a few seconds how that fits into my

00:05:07,970 --> 00:05:13,430
execution so remote execution is formed

00:05:11,180 --> 00:05:15,620
of three main components the execution

00:05:13,430 --> 00:05:17,750
client the execution service and the

00:05:15,620 --> 00:05:19,220
workers so the execution client the

00:05:17,750 --> 00:05:23,930
execution service communicate with each

00:05:19,220 --> 00:05:26,300
other over G RPC using using a protocol

00:05:23,930 --> 00:05:27,560
remote execution and you might have

00:05:26,300 --> 00:05:30,680
heard the first client which is called

00:05:27,560 --> 00:05:32,720
basil and that has was one of the first

00:05:30,680 --> 00:05:35,690
clients to use the remote execution API

00:05:32,720 --> 00:05:36,890
which we've been developing and then

00:05:35,690 --> 00:05:39,530
there was build file which was the first

00:05:36,890 --> 00:05:41,810
reference implementation of these api's

00:05:39,530 --> 00:05:46,190
and basil was built to use or build farm

00:05:41,810 --> 00:05:47,690
was built to use with basil I guess the

00:05:46,190 --> 00:05:50,330
first thing we did is we built a simple

00:05:47,690 --> 00:05:52,580
kind of disk CCC cash-like rapper called

00:05:50,330 --> 00:05:55,610
rec so this is open source on github and

00:05:52,580 --> 00:05:57,590
what that does is when you wrap it you

00:05:55,610 --> 00:05:59,600
can wrap it around GCC and basically

00:05:57,590 --> 00:06:01,190
we'll upload the dependencies into the

00:05:59,600 --> 00:06:03,410
Cornett investable storage content

00:06:01,190 --> 00:06:05,900
addressable storage run the commands

00:06:03,410 --> 00:06:07,850
remotely and then the results come back

00:06:05,900 --> 00:06:10,040
and it's as if you ran the Builder

00:06:07,850 --> 00:06:12,080
locally but it ran remotely using remote

00:06:10,040 --> 00:06:14,000
execution and you don't really have to

00:06:12,080 --> 00:06:16,190
make any deep change into a code you can

00:06:14,000 --> 00:06:17,630
just use rec to wrap the command so it's

00:06:16,190 --> 00:06:22,580
kind of a simple way of playing with raw

00:06:17,630 --> 00:06:24,230
execution without having to use basil so

00:06:22,580 --> 00:06:26,840
there's also an alternate implementation

00:06:24,230 --> 00:06:27,890
which is by someone called add from the

00:06:26,840 --> 00:06:29,810
Netherlands who's actually not here

00:06:27,890 --> 00:06:31,850
that's called build barn and written and

00:06:29,810 --> 00:06:34,040
go which also implements the remote

00:06:31,850 --> 00:06:39,020
execution API and then is of course RB

00:06:34,040 --> 00:06:41,270
which you you know what about already so

00:06:39,020 --> 00:06:42,530
within the execution service in these

00:06:41,270 --> 00:06:44,540
three instances at the same endpoint

00:06:42,530 --> 00:06:45,050
there is the action cache in the cars

00:06:44,540 --> 00:06:47,240
which

00:06:45,050 --> 00:06:50,449
as in the previous talk they are where

00:06:47,240 --> 00:06:53,060
the contents is stored for mapping

00:06:50,449 --> 00:06:54,830
inputs to outputs and contents of files

00:06:53,060 --> 00:07:02,360
to the hashes of files to the contents

00:06:54,830 --> 00:07:06,650
of the files okay so where does build

00:07:02,360 --> 00:07:08,360
would come into this so there is now a

00:07:06,650 --> 00:07:10,610
second API introducing this slide which

00:07:08,360 --> 00:07:12,530
is the remote worker API so that is a

00:07:10,610 --> 00:07:14,360
standardized API for communicating

00:07:12,530 --> 00:07:16,669
between the workers and the bots

00:07:14,360 --> 00:07:18,740
interface on the execution service so

00:07:16,669 --> 00:07:20,120
that means you can have we have generic

00:07:18,740 --> 00:07:22,310
communication between the workers and

00:07:20,120 --> 00:07:24,379
the execution service as well as between

00:07:22,310 --> 00:07:28,430
the execution client and the execution

00:07:24,379 --> 00:07:29,539
service so then you can plug and play so

00:07:28,430 --> 00:07:31,610
again you can use basil with the

00:07:29,539 --> 00:07:33,379
execution service and remote execution

00:07:31,610 --> 00:07:36,319
cache and compiler with the execution

00:07:33,379 --> 00:07:38,030
service but now you can use build grid

00:07:36,319 --> 00:07:39,560
as your execution service and that is

00:07:38,030 --> 00:07:41,810
more generic because that allows you to

00:07:39,560 --> 00:07:43,389
plug in different workers so for example

00:07:41,810 --> 00:07:46,639
one of our workers is called for example

00:07:43,389 --> 00:07:50,539
the host tools working in in build grid

00:07:46,639 --> 00:07:52,069
and that is used tools from the host we

00:07:50,539 --> 00:07:53,330
can also plug in build stream which is

00:07:52,069 --> 00:07:54,949
going to stream all of the inputs

00:07:53,330 --> 00:07:56,779
required for the building occluding the

00:07:54,949 --> 00:07:59,210
compiler and the base so that will

00:07:56,779 --> 00:08:00,740
upload the base since the casts send the

00:07:59,210 --> 00:08:03,110
command over to the worker the worker

00:08:00,740 --> 00:08:05,319
will and unpack all the images or the

00:08:03,110 --> 00:08:09,289
base into the machine into the

00:08:05,319 --> 00:08:12,650
executions worker and run the build so

00:08:09,289 --> 00:08:14,210
it's all totally hermetic so on the

00:08:12,650 --> 00:08:16,759
worker side we have build wit BOTS as

00:08:14,210 --> 00:08:18,979
well as a simple req worker bot which

00:08:16,759 --> 00:08:20,900
was a the initial one we wrote to

00:08:18,979 --> 00:08:24,680
partner with req that uses hosts tools

00:08:20,900 --> 00:08:26,750
as well so as I mentioned there's these

00:08:24,680 --> 00:08:28,279
two separate services the content

00:08:26,750 --> 00:08:31,099
addressable storage and the action cache

00:08:28,279 --> 00:08:32,899
so in in build grid we actually provide

00:08:31,099 --> 00:08:34,969
the facility for factoring these out

00:08:32,899 --> 00:08:36,169
into separate services so you can scale

00:08:34,969 --> 00:08:38,209
them independently or locate them in

00:08:36,169 --> 00:08:39,680
different places so build stream and and

00:08:38,209 --> 00:08:41,060
in req you can specify different

00:08:39,680 --> 00:08:43,579
endpoints for your content addressable

00:08:41,060 --> 00:08:45,110
storage and your action cache so it's

00:08:43,579 --> 00:08:47,690
kind of it's a lot more flexible in the

00:08:45,110 --> 00:08:49,040
way you can plug and play components and

00:08:47,690 --> 00:08:50,720
scale them independently without having

00:08:49,040 --> 00:08:53,060
to have them all in a single daemon

00:08:50,720 --> 00:08:55,220
running the execution service and the

00:08:53,060 --> 00:08:57,370
workers although you could do that if

00:08:55,220 --> 00:09:01,040
you find that simple

00:08:57,370 --> 00:09:03,800
so I won't rehash all the motivation

00:09:01,040 --> 00:09:05,269
behind remote execution again it's

00:09:03,800 --> 00:09:07,209
faster more cause than just available

00:09:05,269 --> 00:09:10,130
locally we're very interested in using

00:09:07,209 --> 00:09:11,540
cross platform builds so for example we

00:09:10,130 --> 00:09:13,310
might be able to use Basel on platforms

00:09:11,540 --> 00:09:15,410
where Basel isn't supported by running

00:09:13,310 --> 00:09:16,550
on your MacBook and then executing in

00:09:15,410 --> 00:09:19,850
our data center on a different platform

00:09:16,550 --> 00:09:21,500
that's not available normally we can

00:09:19,850 --> 00:09:23,600
also share an enterprise-wide cache so

00:09:21,500 --> 00:09:25,009
you come in on Monday morning you can

00:09:23,600 --> 00:09:26,480
set up a cron job and Sunday evening

00:09:25,009 --> 00:09:28,190
that will build your code populate the

00:09:26,480 --> 00:09:29,329
cache you won't even have time to make

00:09:28,190 --> 00:09:30,740
your coffee on Monday morning because

00:09:29,329 --> 00:09:33,440
your Builder ought to be ready and you

00:09:30,740 --> 00:09:35,060
can start hacking away we can also do

00:09:33,440 --> 00:09:36,829
some central resource scheduling so if

00:09:35,060 --> 00:09:38,899
we're both building the same thing at

00:09:36,829 --> 00:09:40,940
the same time we can centrally look at

00:09:38,899 --> 00:09:42,290
the queue in the inside build grid and G

00:09:40,940 --> 00:09:43,970
duplicate all the jobs that are in there

00:09:42,290 --> 00:09:45,829
so that not doing the same thing twice

00:09:43,970 --> 00:09:48,470
and they just hit the action cache

00:09:45,829 --> 00:09:50,839
window when the job is done and as well

00:09:48,470 --> 00:09:53,360
we can also do system-wide metrics so we

00:09:50,839 --> 00:09:55,250
know who's building what when and how

00:09:53,360 --> 00:09:56,990
often and whether it's a CI job versus

00:09:55,250 --> 00:10:01,819
an interactive build and also that helps

00:09:56,990 --> 00:10:02,990
with prioritization as well so to go

00:10:01,819 --> 00:10:05,120
into a bit more detail on our custom

00:10:02,990 --> 00:10:07,699
workers the idea is there a

00:10:05,120 --> 00:10:08,930
plug-and-play so they're all built using

00:10:07,699 --> 00:10:12,680
the remote worker API which was

00:10:08,930 --> 00:10:15,740
standardized along with Google in our

00:10:12,680 --> 00:10:18,589
monthly meetup and then you pick your

00:10:15,740 --> 00:10:22,399
work using the platform's key in the

00:10:18,589 --> 00:10:23,660
remote execution API so the idea with

00:10:22,399 --> 00:10:27,860
the workers is you can kind of choose

00:10:23,660 --> 00:10:29,389
your own flavor if you like so the

00:10:27,860 --> 00:10:33,410
basics or the host tools one so that

00:10:29,389 --> 00:10:35,510
just is a daemon that runs in a worker

00:10:33,410 --> 00:10:37,339
and it uses the tools available on the

00:10:35,510 --> 00:10:39,589
hosts if GCC is available in the host it

00:10:37,339 --> 00:10:41,990
just runs that whatever tool you need

00:10:39,589 --> 00:10:43,699
then there's also baseline containers so

00:10:41,990 --> 00:10:45,769
you could just run a container similar

00:10:43,699 --> 00:10:47,510
to how RBE works and you can also

00:10:45,769 --> 00:10:49,790
specify a totally empty sandbox as

00:10:47,510 --> 00:10:52,579
building would expect and that provides

00:10:49,790 --> 00:10:58,189
the entire tool chain required for the

00:10:52,579 --> 00:11:00,769
build as part of the input so build box

00:10:58,189 --> 00:11:03,500
is a small application we've been

00:11:00,769 --> 00:11:05,870
working on that we use to transparently

00:11:03,500 --> 00:11:09,079
talk to the casts so if you're running

00:11:05,870 --> 00:11:09,950
inside a sandbox you want to be able to

00:11:09,079 --> 00:11:13,070
talk to

00:11:09,950 --> 00:11:15,350
Cass when the file was accessed so what

00:11:13,070 --> 00:11:16,790
we do is we run build box which

00:11:15,350 --> 00:11:18,830
implements a fuse layer to the content

00:11:16,790 --> 00:11:21,230
addressable storage and then we sandbox

00:11:18,830 --> 00:11:22,730
into the with the fuse layer visible so

00:11:21,230 --> 00:11:25,070
as the file is accessed from the build

00:11:22,730 --> 00:11:27,260
they'll load from the Cass on demand

00:11:25,070 --> 00:11:29,180
there's also a prefetch mode but this

00:11:27,260 --> 00:11:30,920
means that we can load only the files we

00:11:29,180 --> 00:11:33,680
need during the build as are accessed

00:11:30,920 --> 00:11:37,280
from the casts so a nice feature with

00:11:33,680 --> 00:11:38,480
build box is that it has a cache on the

00:11:37,280 --> 00:11:40,640
host so if you're running multiple

00:11:38,480 --> 00:11:42,710
workers on the same host the cache can

00:11:40,640 --> 00:11:44,930
be stored on local disk on the host and

00:11:42,710 --> 00:11:46,910
multiple workers can share the same cat

00:11:44,930 --> 00:11:48,470
cache on the house without having to go

00:11:46,910 --> 00:11:50,870
over the network each time to the

00:11:48,470 --> 00:11:53,720
content addressable storage and inside

00:11:50,870 --> 00:11:55,100
build inside the box we use what's

00:11:53,720 --> 00:11:57,170
called bubble wrap which is an open

00:11:55,100 --> 00:12:01,820
source unboxing tool and that runs in

00:11:57,170 --> 00:12:03,770
user space so no required so now Finn is

00:12:01,820 --> 00:12:05,330
going to provide some examples of broken

00:12:03,770 --> 00:12:07,090
in action and I'll see you in a few

00:12:05,330 --> 00:12:08,960
minutes

00:12:07,090 --> 00:12:10,610
thank you very much head for giving us

00:12:08,960 --> 00:12:14,000
no review of remote execution and the

00:12:10,610 --> 00:12:15,770
reason why we're doing it so I get to

00:12:14,000 --> 00:12:16,730
show you build good in action so first

00:12:15,770 --> 00:12:18,860
of all I'm going to show you an example

00:12:16,730 --> 00:12:20,720
timeline diagram of a remote execution

00:12:18,860 --> 00:12:22,850
so I'm sure you probably all know how it

00:12:20,720 --> 00:12:25,280
works but I've made this slide so you

00:12:22,850 --> 00:12:27,110
can have to see it architecture bill

00:12:25,280 --> 00:12:28,730
grid so I'm gonna reiterate sort of how

00:12:27,110 --> 00:12:29,900
we've separated out all the and all the

00:12:28,730 --> 00:12:30,980
different services and how you can

00:12:29,900 --> 00:12:32,810
potentially make them different

00:12:30,980 --> 00:12:33,470
endpoints if you want and then finally

00:12:32,810 --> 00:12:34,970
I'm going to give you a demonstration

00:12:33,470 --> 00:12:37,190
with three different clients so I'm

00:12:34,970 --> 00:12:39,380
going to show you rec basil and build

00:12:37,190 --> 00:12:41,960
stream and the following screen

00:12:39,380 --> 00:12:43,690
recordings were done ways I never really

00:12:41,960 --> 00:12:45,920
know how to say this so I'm gonna say as

00:12:43,690 --> 00:12:47,210
cinema maybe something like that anyway

00:12:45,920 --> 00:12:49,130
so great notes although I was using a

00:12:47,210 --> 00:12:50,630
little free open-source tool and a link

00:12:49,130 --> 00:12:52,100
of all links only showing a lot of links

00:12:50,630 --> 00:12:54,290
and now we need to be paying attention

00:12:52,100 --> 00:12:56,090
to talk than taking loads of loads of

00:12:54,290 --> 00:12:57,140
photos and stuff so you can actually

00:12:56,090 --> 00:12:58,850
just click on this link here and you'll

00:12:57,140 --> 00:13:02,690
have a list of all the links which is

00:12:58,850 --> 00:13:05,330
quite handy okay so this is an example

00:13:02,690 --> 00:13:07,040
and remote execution timeline so here we

00:13:05,330 --> 00:13:10,070
have the client the server and the

00:13:07,040 --> 00:13:12,470
worker so we first of all ask has this

00:13:10,070 --> 00:13:14,540
action been done before and services no

00:13:12,470 --> 00:13:16,940
so it finds all the missing inputs that

00:13:14,540 --> 00:13:18,980
it needs and uploads them to casts it

00:13:16,940 --> 00:13:20,780
then sends a work request the worker

00:13:18,980 --> 00:13:22,490
then has said is there any work to do

00:13:20,780 --> 00:13:23,450
and it gets a response from the server

00:13:22,490 --> 00:13:25,100
saying do this

00:13:23,450 --> 00:13:26,810
piece of work then it sends like a

00:13:25,100 --> 00:13:28,070
heartbeat so it says executing work and

00:13:26,810 --> 00:13:30,440
the server says you know good to hear

00:13:28,070 --> 00:13:32,210
still alive and then it uploads results

00:13:30,440 --> 00:13:33,980
to cows and influence the server the job

00:13:32,210 --> 00:13:35,540
is finished and then the server informs

00:13:33,980 --> 00:13:38,930
the job is finished and the results are

00:13:35,540 --> 00:13:40,430
ready to download so here's a kind of

00:13:38,930 --> 00:13:42,620
box diagram really sort of high-level

00:13:40,430 --> 00:13:43,820
overview of build grid so you can see

00:13:42,620 --> 00:13:45,830
here that we tried to separate out all

00:13:43,820 --> 00:13:47,240
the different services so we have the

00:13:45,830 --> 00:13:48,800
action cache service the execution

00:13:47,240 --> 00:13:53,060
service spots interface service cows

00:13:48,800 --> 00:13:54,380
service so basically we have in the

00:13:53,060 --> 00:13:56,060
following demonstrations I've wrapped

00:13:54,380 --> 00:13:57,620
together the execution service and BOTS

00:13:56,060 --> 00:13:59,060
interface service into a single instance

00:13:57,620 --> 00:14:00,080
and I've called that the control works

00:13:59,060 --> 00:14:02,330
it kind of makes sense of them see

00:14:00,080 --> 00:14:03,770
things are together at the moment and so

00:14:02,330 --> 00:14:05,480
as I said before the execution client

00:14:03,770 --> 00:14:06,740
consults the action cache and upload

00:14:05,480 --> 00:14:08,390
things to the cast service if it once

00:14:06,740 --> 00:14:10,400
and the bots interface just kind of

00:14:08,390 --> 00:14:11,960
looks after the bots and you know check

00:14:10,400 --> 00:14:12,500
that they're still okay and hands them

00:14:11,960 --> 00:14:14,330
work to do

00:14:12,500 --> 00:14:16,820
and of course the bots the bots are also

00:14:14,330 --> 00:14:20,810
downloading work and files from the cut

00:14:16,820 --> 00:14:22,400
service itself so the first

00:14:20,810 --> 00:14:25,100
demonstration I'm going to show you is

00:14:22,400 --> 00:14:26,810
Lua so I'm just going to go lower so Lua

00:14:25,100 --> 00:14:28,250
is just an open source lightweight

00:14:26,810 --> 00:14:30,500
language written in C which you can find

00:14:28,250 --> 00:14:32,720
the link here the only change we make to

00:14:30,500 --> 00:14:34,550
our make command is that we just add

00:14:32,720 --> 00:14:36,850
this all CC flag - tell it to use rec

00:14:34,550 --> 00:14:38,990
instead of the GCC compiler here and

00:14:36,850 --> 00:14:40,100
instructions on how to set at rec with

00:14:38,990 --> 00:14:44,990
build grid can be found at the following

00:14:40,100 --> 00:14:46,760
link so this so this is kind of how it's

00:14:44,990 --> 00:14:48,680
gonna look obviously without these big

00:14:46,760 --> 00:14:50,060
words on them so we have the client at

00:14:48,680 --> 00:14:51,740
the top of the page then we have to

00:14:50,060 --> 00:14:53,960
control the content addressable storage

00:14:51,740 --> 00:14:55,720
and the three workers I should add here

00:14:53,960 --> 00:14:58,490
that the three workers will be using the

00:14:55,720 --> 00:15:02,990
hosted tools bot and the client that

00:14:58,490 --> 00:15:05,360
were going to be using is rec also this

00:15:02,990 --> 00:15:07,070
is all running on my laptop so each box

00:15:05,360 --> 00:15:11,660
is a separate virtual machine in this

00:15:07,070 --> 00:15:14,500
case okay so the first thing I'm going

00:15:11,660 --> 00:15:16,580
to do is start my controller server and

00:15:14,500 --> 00:15:17,990
no one's stuck the three bots you can

00:15:16,580 --> 00:15:21,760
see the three bots now registering with

00:15:17,990 --> 00:15:25,660
the central controller server and

00:15:21,760 --> 00:15:25,660
finally stop my cut server

00:15:27,290 --> 00:15:31,200
now finally on to the meat command the

00:15:29,820 --> 00:15:33,150
exciting part so here we go I'm running

00:15:31,200 --> 00:15:36,890
make its you can see it's ending all the

00:15:33,150 --> 00:15:38,970
work of the bots and lures now built I

00:15:36,890 --> 00:15:40,530
think I'm saying we were correctly no

00:15:38,970 --> 00:15:41,880
one's correcting me so far so there we

00:15:40,530 --> 00:15:43,290
go I've now launched lure so it's an

00:15:41,880 --> 00:15:45,860
instructive terminal I think it means

00:15:43,290 --> 00:15:48,090
portugee think it's moon in Portuguese

00:15:45,860 --> 00:15:49,980
so just to show that I'm not lying I'm

00:15:48,090 --> 00:15:53,220
now running an instructive salmon lure

00:15:49,980 --> 00:15:55,320
and I printed hello basil con there we

00:15:53,220 --> 00:15:57,390
go so now and I'm do is run make cleaned

00:15:55,320 --> 00:16:00,600
so I'm gonna clear all the binaries out

00:15:57,390 --> 00:16:02,840
there and I'm gonna run make again now

00:16:00,600 --> 00:16:05,160
because all the actions were ready chard

00:16:02,840 --> 00:16:07,140
it's instantly return me the actions

00:16:05,160 --> 00:16:09,690
from the action cache and that build was

00:16:07,140 --> 00:16:11,430
much faster and so the build didn't run

00:16:09,690 --> 00:16:12,660
it's all on the workers so I'm just

00:16:11,430 --> 00:16:18,630
running we were again so you can see

00:16:12,660 --> 00:16:19,890
there higher again perfect okay so the

00:16:18,630 --> 00:16:22,350
second example that I wanted to show you

00:16:19,890 --> 00:16:23,850
is building up sail with basil so as

00:16:22,350 --> 00:16:25,980
many of you probably already know abseil

00:16:23,850 --> 00:16:28,230
is an open-source Google library for C++

00:16:25,980 --> 00:16:31,500
you can find a link here and I'm gonna

00:16:28,230 --> 00:16:33,420
be using basil note point 17.2 and I've

00:16:31,500 --> 00:16:35,400
edited my Buzzle basil configuration

00:16:33,420 --> 00:16:36,600
file so just like quite a few speakers

00:16:35,400 --> 00:16:38,700
spoke about yesterday you can just edit

00:16:36,600 --> 00:16:40,740
your puzzle RC file and the instructions

00:16:38,700 --> 00:16:44,010
again on how to set this up can be found

00:16:40,740 --> 00:16:45,210
at the following link so let's run

00:16:44,010 --> 00:16:47,910
through again so you can see here at the

00:16:45,210 --> 00:16:50,400
top I have my hello worlds file which

00:16:47,910 --> 00:16:51,960
uses an up sale partly up cell library

00:16:50,400 --> 00:16:56,820
search is going to join two strings

00:16:51,960 --> 00:16:58,740
together so it's also play this okay

00:16:56,820 --> 00:17:03,180
first one setting up the controller

00:16:58,740 --> 00:17:05,579
server the server and the three workers

00:17:03,180 --> 00:17:11,070
so again these will be the host host

00:17:05,579 --> 00:17:14,459
toolbox that I'm using okay so that's I

00:17:11,070 --> 00:17:15,540
spilled it so you can see it's so it's

00:17:14,459 --> 00:17:16,650
gone it's gone through the dependency

00:17:15,540 --> 00:17:18,209
tree and it's it's just working out

00:17:16,650 --> 00:17:21,540
there such as building everything from

00:17:18,209 --> 00:17:23,570
there and okay there we go I ran the

00:17:21,540 --> 00:17:25,530
binary and it joins two strings together

00:17:23,570 --> 00:17:27,060
so now I'm gonna run the clean again and

00:17:25,530 --> 00:17:30,650
I'm just gonna show you how we hit the

00:17:27,060 --> 00:17:32,640
action cache on the second time around

00:17:30,650 --> 00:17:34,620
okay there we go so it's return me back

00:17:32,640 --> 00:17:35,970
the result and I can run the same

00:17:34,620 --> 00:17:38,270
command again and okay with the same

00:17:35,970 --> 00:17:38,270
result

00:17:49,270 --> 00:17:55,520
okay wait a second

00:17:51,410 --> 00:17:57,350
not this one again wanna move on to the

00:17:55,520 --> 00:17:59,210
next slide if possible can somebody

00:17:57,350 --> 00:18:02,450
potentially move on select slide from up

00:17:59,210 --> 00:18:04,280
there thank you perfect okay fantastic

00:18:02,450 --> 00:18:06,350
so the final example that I wanted to

00:18:04,280 --> 00:18:08,809
show you is building an also tools

00:18:06,350 --> 00:18:10,130
example with build stream so obviously

00:18:08,809 --> 00:18:12,470
you all know what also tools is I

00:18:10,130 --> 00:18:14,240
provided the link anyway so I'm gonna be

00:18:12,470 --> 00:18:16,429
using build tools from Alpine so alpine

00:18:14,240 --> 00:18:19,070
is just a very lights Linux distribution

00:18:16,429 --> 00:18:20,179
and I'm gonna enable remote execution in

00:18:19,070 --> 00:18:21,980
our build stream project configuration

00:18:20,179 --> 00:18:23,299
files so again the instructions can be

00:18:21,980 --> 00:18:26,720
found at the bottom link this is very

00:18:23,299 --> 00:18:27,860
easy to set up so a little bit about

00:18:26,720 --> 00:18:29,360
builds drinks I know it's a tool that

00:18:27,860 --> 00:18:32,179
many of you aren't completely familiar

00:18:29,360 --> 00:18:35,090
with so it's a reproducible integration

00:18:32,179 --> 00:18:37,910
build system so it's basically sandboxed

00:18:35,090 --> 00:18:38,990
builds so it doesn't use hosts tools so

00:18:37,910 --> 00:18:40,580
what it's going to do is it's gonna

00:18:38,990 --> 00:18:42,140
fetch the sources and dependencies that

00:18:40,580 --> 00:18:44,150
are needed so in this case it is the

00:18:42,140 --> 00:18:46,610
basal image and it's the also tools

00:18:44,150 --> 00:18:48,020
hello world example and it's gonna state

00:18:46,610 --> 00:18:50,480
your sources and dependencies in the

00:18:48,020 --> 00:18:53,150
sandbox and it's gonna build locally or

00:18:50,480 --> 00:18:54,650
for remote execution so it's gonna ruin

00:18:53,150 --> 00:18:56,540
your configure build and install

00:18:54,650 --> 00:19:00,950
commands remotely and then it's gonna

00:18:56,540 --> 00:19:02,299
catch it all basically so here we go so

00:19:00,950 --> 00:19:03,500
I should have edited these bits out

00:19:02,299 --> 00:19:05,419
shouldn't I you know setting up all the

00:19:03,500 --> 00:19:07,220
services again interestingly these bots

00:19:05,419 --> 00:19:08,510
are actually the build box bot so these

00:19:07,220 --> 00:19:10,490
won't be the local tools ones

00:19:08,510 --> 00:19:14,780
so we're demonstrating here a different

00:19:10,490 --> 00:19:16,130
kind of bots and we're gonna build okay

00:19:14,780 --> 00:19:18,980
so it's fetching the various sources

00:19:16,130 --> 00:19:24,070
needed it's staging them in a sandbox

00:19:18,980 --> 00:19:27,140
and it's gonna be cashing them and stuff

00:19:24,070 --> 00:19:31,669
and it will now be running the configure

00:19:27,140 --> 00:19:35,690
commands that are needed and this is

00:19:31,669 --> 00:19:38,150
automatic as word of the day we're also

00:19:35,690 --> 00:19:39,440
a case the next one will be make command

00:19:38,150 --> 00:19:41,740
I believe should be coming to you in a

00:19:39,440 --> 00:19:41,740
second

00:19:45,869 --> 00:19:51,399
okay so we have to make command the

00:19:48,700 --> 00:19:52,779
install command so it's just installing

00:19:51,399 --> 00:19:54,759
in the sandbox now it's stripping out

00:19:52,779 --> 00:19:57,220
the things that we don't need caching it

00:19:54,759 --> 00:19:58,840
and finally it's returned it back to me

00:19:57,220 --> 00:20:01,119
so I'm now going to show you how to

00:19:58,840 --> 00:20:02,499
shell into some books so I've shelled

00:20:01,119 --> 00:20:05,019
into it I'm going to prove to you that

00:20:02,499 --> 00:20:06,369
I'm in Alpine and that's you can just

00:20:05,019 --> 00:20:09,309
trust me that is that's the Alpine layer

00:20:06,369 --> 00:20:10,720
Linux and now shelled into and I've now

00:20:09,309 --> 00:20:12,340
it's actually installed the hello world

00:20:10,720 --> 00:20:14,950
example so I could just run hello it's

00:20:12,340 --> 00:20:17,320
like an install tool it's just it's it's

00:20:14,950 --> 00:20:18,700
displayed there so now what I quickly

00:20:17,320 --> 00:20:19,990
did though is I just delete my local

00:20:18,700 --> 00:20:21,490
cache so we are going to improve that in

00:20:19,990 --> 00:20:22,600
the future but I just wanted to show you

00:20:21,490 --> 00:20:24,309
what it's like if I force the build

00:20:22,600 --> 00:20:26,169
again so obviously the build has been

00:20:24,309 --> 00:20:26,710
cached so it's just gonna fetch it

00:20:26,169 --> 00:20:30,190
straight away

00:20:26,710 --> 00:20:31,559
staged it and I should be able to shell

00:20:30,190 --> 00:20:34,029
into it much quicker than I did before

00:20:31,559 --> 00:20:41,200
so I'm gonna get to the shelling stage

00:20:34,029 --> 00:20:42,159
now and here we go so just run hello and

00:20:41,200 --> 00:20:43,450
you can see there so that was the

00:20:42,159 --> 00:20:47,289
installed command from the hello tools

00:20:43,450 --> 00:20:51,340
example running hello okay the next

00:20:47,289 --> 00:20:53,490
slide okay so I'm gonna press you back

00:20:51,340 --> 00:20:59,799
to it now thank you

00:20:53,490 --> 00:21:02,619
Thanks so one thing I forgot to mention

00:20:59,799 --> 00:21:04,389
earlier is speaking to the Twitter guys

00:21:02,619 --> 00:21:06,970
yesterday I was going to claim that rec

00:21:04,389 --> 00:21:08,710
was the first non basil client of RB but

00:21:06,970 --> 00:21:10,029
I think Twitter Maya beaten us with

00:21:08,710 --> 00:21:13,059
pants but we'll have to check the commit

00:21:10,029 --> 00:21:14,440
history to see who was there first but

00:21:13,059 --> 00:21:18,249
we have tested wrecked with RB and it

00:21:14,440 --> 00:21:20,499
works so as fer mentions the resources

00:21:18,249 --> 00:21:23,649
are all available online so what's next

00:21:20,499 --> 00:21:25,480
for build grid so we want to add it's

00:21:23,649 --> 00:21:27,129
still very much a work in progress we're

00:21:25,480 --> 00:21:30,549
adding support for metrics and the

00:21:27,129 --> 00:21:32,619
ability to store build grids as status

00:21:30,549 --> 00:21:34,119
outside of the service itself so you can

00:21:32,619 --> 00:21:35,619
have multiple instances and restart them

00:21:34,119 --> 00:21:36,999
during the day without killing

00:21:35,619 --> 00:21:39,490
everyone's build and making on everyone

00:21:36,999 --> 00:21:40,840
very upset we also want to add more work

00:21:39,490 --> 00:21:42,309
implementations that's that's where you

00:21:40,840 --> 00:21:44,110
come in so if you'd like to start using

00:21:42,309 --> 00:21:47,740
build grid and have your own use case

00:21:44,110 --> 00:21:49,720
for maybe docker based workers then

00:21:47,740 --> 00:21:51,249
please feel free to reach out to us and

00:21:49,720 --> 00:21:53,080
we'd also let your contributions in to

00:21:51,249 --> 00:21:55,090
build grid itself all of this is totally

00:21:53,080 --> 00:21:56,230
open source except the Basel plugin

00:21:55,090 --> 00:22:00,760
which we haven't finished yet

00:21:56,230 --> 00:22:01,660
and open to contributions so thank you

00:22:00,760 --> 00:22:02,890
to everyone at Bloomberg Keys who

00:22:01,660 --> 00:22:04,900
working on this as well as everyone at

00:22:02,890 --> 00:22:07,330
code think everyone at the monthly

00:22:04,900 --> 00:22:09,190
Google meetings and as obviously George

00:22:07,330 --> 00:22:11,080
as well for his trailblazing work in in

00:22:09,190 --> 00:22:13,240
build farm and the reference

00:22:11,080 --> 00:22:15,220
implementation now and we are still on

00:22:13,240 --> 00:22:16,660
the build team world slack group so

00:22:15,220 --> 00:22:19,580
you'll have to add a new workspace just

00:22:16,660 --> 00:22:26,970
like app thank you much

00:22:19,580 --> 00:22:26,970

YouTube URL: https://www.youtube.com/watch?v=w1ZA4Rrf91I


