Title: BazelCon 2018 Day 1: Faster Builds With Remote Execution and Caching
Publication date: 2018-11-01
Playlist: BazelCon 2018
Description: 
	Steven Bergsieker (Google) event: Bazelcon 2018; re_ty: Publish; product: Open Source - General; fullname: Steven Bergsieker;
Captions: 
	00:00:01,810 --> 00:00:06,639
thank you so my name is Steven I work

00:00:05,200 --> 00:00:08,230
here at Google on remote execution

00:00:06,639 --> 00:00:09,760
specifically on the remote execution

00:00:08,230 --> 00:00:11,620
cloud service that we showed this

00:00:09,760 --> 00:00:14,679
morning but I want to talk to you a

00:00:11,620 --> 00:00:16,180
little bit today about first of all what

00:00:14,679 --> 00:00:18,880
is remote execution and caching how does

00:00:16,180 --> 00:00:20,710
it work why does it give such a great

00:00:18,880 --> 00:00:22,870
performance improvement and what are the

00:00:20,710 --> 00:00:25,540
other benefits of it and then second of

00:00:22,870 --> 00:00:28,000
all the specific Google cloud service

00:00:25,540 --> 00:00:29,950
that that we're offering and some

00:00:28,000 --> 00:00:31,840
general guidelines for how to make your

00:00:29,950 --> 00:00:33,480
build work with remote execution how to

00:00:31,840 --> 00:00:37,300
make your build work with remote cashing

00:00:33,480 --> 00:00:39,160
those largely apply to any remote

00:00:37,300 --> 00:00:40,960
service remote build service although

00:00:39,160 --> 00:00:45,550
there are a few specifics to the Google

00:00:40,960 --> 00:00:47,170
service as well so to start out what are

00:00:45,550 --> 00:00:49,359
remote execution caching

00:00:47,170 --> 00:00:52,480
I can tell you a lot of technical things

00:00:49,359 --> 00:00:54,460
about them but at root this is about a

00:00:52,480 --> 00:00:56,589
tool that allows you to run more tests

00:00:54,460 --> 00:00:59,109
run your tests faster run them more

00:00:56,589 --> 00:01:02,319
often and that leads to improve software

00:00:59,109 --> 00:01:04,510
and improve developer productivity so we

00:01:02,319 --> 00:01:07,360
had a pilot program internally with

00:01:04,510 --> 00:01:09,369
Android studio where they started trying

00:01:07,360 --> 00:01:11,290
out remote builds and just to see what

00:01:09,369 --> 00:01:13,540
effect it had on their their workflow

00:01:11,290 --> 00:01:15,700
and the lead we were working with said

00:01:13,540 --> 00:01:17,439
it improved our overall quality by

00:01:15,700 --> 00:01:20,409
enabling our team to run more pre

00:01:17,439 --> 00:01:23,229
submits and it increased our pre submit

00:01:20,409 --> 00:01:25,600
test coverage by more than 4x that's a

00:01:23,229 --> 00:01:27,520
great benefit it's really helping their

00:01:25,600 --> 00:01:30,850
team they're able to run their pre

00:01:27,520 --> 00:01:32,680
submits on or they're able to run pre

00:01:30,850 --> 00:01:34,060
submits and post omits on every commit

00:01:32,680 --> 00:01:36,430
now whereas before they had to do a

00:01:34,060 --> 00:01:39,039
rolling system and they had to do it on

00:01:36,430 --> 00:01:40,930
these giant 32 core machines that were

00:01:39,039 --> 00:01:42,909
paying to manage and are very expensive

00:01:40,930 --> 00:01:45,189
and it was actually hard to get enough

00:01:42,909 --> 00:01:46,770
of them to to meet their volume so it's

00:01:45,189 --> 00:01:50,560
really worked very well for them

00:01:46,770 --> 00:01:52,689
so technically remote execution and

00:01:50,560 --> 00:01:56,109
remote caching are two different things

00:01:52,689 --> 00:01:57,670
related things but different the remote

00:01:56,109 --> 00:01:59,009
execution allows you to distribute your

00:01:57,670 --> 00:02:01,149
build and test actions across

00:01:59,009 --> 00:02:03,490
potentially hundreds of cores across the

00:02:01,149 --> 00:02:05,350
cloud whereas remote caching allows you

00:02:03,490 --> 00:02:08,530
to avoid doing the same work twice

00:02:05,350 --> 00:02:10,149
whether that's the same developer trying

00:02:08,530 --> 00:02:11,590
to build the same thing twice or your CI

00:02:10,149 --> 00:02:13,150
system that's already built something

00:02:11,590 --> 00:02:14,800
and then you sink that to your local

00:02:13,150 --> 00:02:15,760
tree and you want to build it that all

00:02:14,800 --> 00:02:17,110
exists in this room

00:02:15,760 --> 00:02:19,269
cash in the cloud and you can just pull

00:02:17,110 --> 00:02:21,489
down the results and when you put them

00:02:19,269 --> 00:02:23,819
together they lead to faster build and

00:02:21,489 --> 00:02:26,799
test cycles and overall better software

00:02:23,819 --> 00:02:29,709
so looking at the specifics of how this

00:02:26,799 --> 00:02:30,549
works as I've already said remote builds

00:02:29,709 --> 00:02:33,730
are faster because they're not

00:02:30,549 --> 00:02:35,920
constrained by local resources so if you

00:02:33,730 --> 00:02:38,170
have this typical Basel workflow you

00:02:35,920 --> 00:02:39,879
have your developer there on the left

00:02:38,170 --> 00:02:42,540
this could be an individual developer it

00:02:39,879 --> 00:02:45,359
could be a node in your CI system

00:02:42,540 --> 00:02:48,010
anything really that runs basil command

00:02:45,359 --> 00:02:50,109
you invoke basil builds the action graph

00:02:48,010 --> 00:02:52,810
checks its local cache checks the remote

00:02:50,109 --> 00:02:54,430
cache etc and filters out what it really

00:02:52,810 --> 00:02:56,920
needs to run and then it distributes

00:02:54,430 --> 00:02:59,470
that across all of your local course in

00:02:56,920 --> 00:03:01,720
this case I have 8 here maybe it's 16

00:02:59,470 --> 00:03:04,720
maybe you're really lucky and have 32 or

00:03:01,720 --> 00:03:08,139
64 cores but it's a very finite and

00:03:04,720 --> 00:03:10,930
small number and if you're trying to run

00:03:08,139 --> 00:03:12,579
a lot of things it's slow so when you

00:03:10,930 --> 00:03:14,349
talk about the cloud though as I showed

00:03:12,579 --> 00:03:16,780
this morning you can run on 500 course

00:03:14,349 --> 00:03:19,209
you can run on a thousand course you can

00:03:16,780 --> 00:03:21,879
distribute as much parallelism as your

00:03:19,209 --> 00:03:24,459
build graph can handle and that leads to

00:03:21,879 --> 00:03:25,900
much faster build times second reason

00:03:24,459 --> 00:03:29,349
remote builds are fast

00:03:25,900 --> 00:03:31,840
it's Romo builds are beneficial is

00:03:29,349 --> 00:03:34,090
because it's much more efficient to have

00:03:31,840 --> 00:03:35,379
a shared pool of cloud resources than to

00:03:34,090 --> 00:03:38,560
have a bunch of individual resources

00:03:35,379 --> 00:03:39,760
locked up on individual machines so if

00:03:38,560 --> 00:03:41,859
you look at a picture of your

00:03:39,760 --> 00:03:44,379
organization again these could be

00:03:41,859 --> 00:03:46,389
developers could be CI machines you can

00:03:44,379 --> 00:03:48,660
see that you know everybody here has a

00:03:46,389 --> 00:03:51,370
nice 16 core machine most of the time

00:03:48,660 --> 00:03:52,510
about 15 and 1/2 those cores are sitting

00:03:51,370 --> 00:03:55,090
idle because you're just running your

00:03:52,510 --> 00:03:57,489
editor and maybe some browser tabs

00:03:55,090 --> 00:03:59,409
things like that so your machine is

00:03:57,489 --> 00:04:01,329
really over provisioned for 90% of the

00:03:59,409 --> 00:04:02,859
time except when you want to go do

00:04:01,329 --> 00:04:04,690
actual work when you want to build

00:04:02,859 --> 00:04:06,909
things and test things and then suddenly

00:04:04,690 --> 00:04:09,010
16 cores is not enough your machine is

00:04:06,909 --> 00:04:10,690
under provisioned so you have this

00:04:09,010 --> 00:04:12,159
situation where it's really hard to

00:04:10,690 --> 00:04:14,379
optimize and and it's hard to know what

00:04:12,159 --> 00:04:15,729
the right cost trade-off is for for how

00:04:14,379 --> 00:04:18,970
to distribute these cores across

00:04:15,729 --> 00:04:21,579
developers but again if you have this

00:04:18,970 --> 00:04:23,080
cloud pool of course we have this

00:04:21,579 --> 00:04:24,700
developer who's running basil locally

00:04:23,080 --> 00:04:27,070
all the other developers are running

00:04:24,700 --> 00:04:29,230
basil locally as well your CI system we

00:04:27,070 --> 00:04:31,720
have cloud build there as

00:04:29,230 --> 00:04:35,470
Jenkins could be build kite could be any

00:04:31,720 --> 00:04:37,810
of the normal CI paths all those share

00:04:35,470 --> 00:04:39,910
the same the same pool of cloudcourse

00:04:37,810 --> 00:04:41,530
and that means that because those build

00:04:39,910 --> 00:04:44,050
loads are very spiky most of the time

00:04:41,530 --> 00:04:45,940
your machine is sitting idle you can

00:04:44,050 --> 00:04:47,620
really bin pack very well across those

00:04:45,940 --> 00:04:49,240
this course you can keep all those

00:04:47,620 --> 00:04:51,570
machines busy but you can keep

00:04:49,240 --> 00:04:53,980
everyone's build fast at the same time

00:04:51,570 --> 00:04:55,480
so that looks roughly like this you've

00:04:53,980 --> 00:04:57,280
got developers who now have four core

00:04:55,480 --> 00:05:00,760
machines still more than enough power

00:04:57,280 --> 00:05:02,440
for them to do their coding email etc

00:05:00,760 --> 00:05:04,180
but then when they need the real power

00:05:02,440 --> 00:05:07,870
of the cloud that can tap into that very

00:05:04,180 --> 00:05:10,390
quickly and easily third reason remote

00:05:07,870 --> 00:05:13,390
builds are beneficial they are more

00:05:10,390 --> 00:05:16,360
correct because the sandbox remotely is

00:05:13,390 --> 00:05:18,580
more comprehensive so the basal sandbox

00:05:16,360 --> 00:05:20,170
is a great tool it's a really helpful

00:05:18,580 --> 00:05:22,570
tool I really recommend running with it

00:05:20,170 --> 00:05:23,770
if you're doing your builds locally but

00:05:22,570 --> 00:05:26,710
it's not perfect and it's not foolproof

00:05:23,770 --> 00:05:28,690
a lot of this has to do with the

00:05:26,710 --> 00:05:32,080
underlying tools that basil invokes so

00:05:28,690 --> 00:05:35,830
for example if you build with GCC GCC

00:05:32,080 --> 00:05:37,690
has built into that binary a path

00:05:35,830 --> 00:05:40,570
traversal we look into well-known paths

00:05:37,690 --> 00:05:42,640
for system headers so that local state

00:05:40,570 --> 00:05:45,340
of your system can still leak into your

00:05:42,640 --> 00:05:47,140
build no matter how hard you try and

00:05:45,340 --> 00:05:50,350
Basil's build walks down a ton of things

00:05:47,140 --> 00:05:51,520
but again it's not perfect remote

00:05:50,350 --> 00:05:54,280
execution you're running on a remote

00:05:51,520 --> 00:05:56,740
machine you're running in in our case

00:05:54,280 --> 00:05:59,200
inside a docker container it has a

00:05:56,740 --> 00:06:01,540
well-defined hash everything is is very

00:05:59,200 --> 00:06:03,010
traceable and trackable so it's a very

00:06:01,540 --> 00:06:05,170
tight sandbox it's really hard for

00:06:03,010 --> 00:06:09,490
something in your local machine to leak

00:06:05,170 --> 00:06:10,630
into that remote system and I think this

00:06:09,490 --> 00:06:12,520
is a really interesting topic there are

00:06:10,630 --> 00:06:14,200
a lot of ins and outs Nick Lopez who's

00:06:12,520 --> 00:06:15,940
right over there it's gonna give a whole

00:06:14,200 --> 00:06:17,980
talk about this tomorrow afternoon so I

00:06:15,940 --> 00:06:19,900
highly recommend attending that ways in

00:06:17,980 --> 00:06:21,280
which you can improve the sandboxing of

00:06:19,900 --> 00:06:26,350
your build and you can make your build

00:06:21,280 --> 00:06:27,580
more hermetic finally remote builds are

00:06:26,350 --> 00:06:29,740
beneficial because the remote cache

00:06:27,580 --> 00:06:31,840
makes everyone's build faster not just

00:06:29,740 --> 00:06:33,250
one person's build it's a shared

00:06:31,840 --> 00:06:35,020
resource it's spread across your whole

00:06:33,250 --> 00:06:36,820
company your whole CI system anything

00:06:35,020 --> 00:06:39,880
that that does a build or a test can

00:06:36,820 --> 00:06:41,710
leverage this system so again we go back

00:06:39,880 --> 00:06:43,090
to this this diagram you see the

00:06:41,710 --> 00:06:44,980
individual developer on the right

00:06:43,090 --> 00:06:46,389
or on the left rather the pool

00:06:44,980 --> 00:06:47,980
developers and the pool of cloud cores

00:06:46,389 --> 00:06:50,530
on the right but then you also have this

00:06:47,980 --> 00:06:51,970
cloud cache up on the top and again your

00:06:50,530 --> 00:06:54,340
CI system is accessing this your CI

00:06:51,970 --> 00:06:56,290
system is populating this so you check

00:06:54,340 --> 00:06:58,090
in your code the CI system builds it

00:06:56,290 --> 00:07:00,040
tests it uploads the results to the

00:06:58,090 --> 00:07:01,810
cache next person syncs the code to

00:07:00,040 --> 00:07:03,639
their machine they build and test and

00:07:01,810 --> 00:07:04,660
hey the results are already there so

00:07:03,639 --> 00:07:05,949
they don't actually have to do any

00:07:04,660 --> 00:07:10,690
actual work that's already been done by

00:07:05,949 --> 00:07:12,310
the CI system so in summary just to look

00:07:10,690 --> 00:07:14,139
at the benefits of remote execution

00:07:12,310 --> 00:07:16,150
caching remote execution lets you run

00:07:14,139 --> 00:07:18,310
more things in parallel by using build

00:07:16,150 --> 00:07:20,139
by using machines in the cloud remote

00:07:18,310 --> 00:07:22,150
caching lets you avoid duplicate work

00:07:20,139 --> 00:07:24,220
and altogether that means a build that's

00:07:22,150 --> 00:07:29,169
faster it's more efficient and it's more

00:07:24,220 --> 00:07:32,470
correct so to talk about this specific

00:07:29,169 --> 00:07:35,050
implementation of the the Google cloud

00:07:32,470 --> 00:07:36,970
service I call this we call it remote

00:07:35,050 --> 00:07:39,039
build execution I also use the term

00:07:36,970 --> 00:07:42,400
cloud build for basil we kind of used

00:07:39,039 --> 00:07:44,620
both so looking at this we're built

00:07:42,400 --> 00:07:46,539
around this open source API it's called

00:07:44,620 --> 00:07:48,400
the remotest accuse API hence the name

00:07:46,539 --> 00:07:50,830
remote build execution is our specific

00:07:48,400 --> 00:07:52,389
implementation of it and the way that

00:07:50,830 --> 00:07:53,560
integrates with basil is what we call

00:07:52,389 --> 00:07:55,000
cloud build for basil it's designed to

00:07:53,560 --> 00:07:57,550
be seamless it's designed to fit with

00:07:55,000 --> 00:08:00,370
basil it's designed to fit with Google

00:07:57,550 --> 00:08:02,110
Cloud builder so you can can really use

00:08:00,370 --> 00:08:04,419
basil in the cloud entirely or you can

00:08:02,110 --> 00:08:06,310
use it locally but it is an open source

00:08:04,419 --> 00:08:08,650
API we're not the only implementation

00:08:06,310 --> 00:08:10,000
there are a couple open source self

00:08:08,650 --> 00:08:11,830
hosted implementations that you can

00:08:10,000 --> 00:08:14,349
connect this and set up and run on

00:08:11,830 --> 00:08:17,110
whatever on-prem farm or anywhere you

00:08:14,349 --> 00:08:19,030
want to our particular offering is

00:08:17,110 --> 00:08:20,500
hosted so we remove all the management

00:08:19,030 --> 00:08:22,000
overhead of managing machines and

00:08:20,500 --> 00:08:25,030
spinning them up and down and handling

00:08:22,000 --> 00:08:27,250
them if they get get corrupted and need

00:08:25,030 --> 00:08:30,340
to be quarantined things like that there

00:08:27,250 --> 00:08:33,219
may be more so there's the the build

00:08:30,340 --> 00:08:33,729
farm project that is part of the basil

00:08:33,219 --> 00:08:36,520
build org

00:08:33,729 --> 00:08:38,409
and that Jorge from uber works on a

00:08:36,520 --> 00:08:39,849
couple others build grid build barn

00:08:38,409 --> 00:08:40,560
there may be more that I'm not thinking

00:08:39,849 --> 00:08:42,760
of right now

00:08:40,560 --> 00:08:45,430
and the same thing happens on the client

00:08:42,760 --> 00:08:48,490
side obviously this is basil con we all

00:08:45,430 --> 00:08:49,990
use basil but there are other client

00:08:48,490 --> 00:08:52,990
implementations as well build stream is

00:08:49,990 --> 00:08:54,040
working on one someone from pants got in

00:08:52,990 --> 00:08:56,050
touch with us recently they tried

00:08:54,040 --> 00:08:57,010
running pants against the cloud service

00:08:56,050 --> 00:09:00,190
and said

00:08:57,010 --> 00:09:01,510
this all just works great so there's

00:09:00,190 --> 00:09:02,860
some level of interoperability between

00:09:01,510 --> 00:09:10,480
these and you can can mix and match

00:09:02,860 --> 00:09:12,519
pieces as well in terms of this service

00:09:10,480 --> 00:09:14,260
Google cloud platform remote build

00:09:12,519 --> 00:09:17,019
execution this is an alpha service right

00:09:14,260 --> 00:09:18,790
now it is a fully managed cloud service

00:09:17,019 --> 00:09:20,410
we handle spinning up all the machines

00:09:18,790 --> 00:09:21,760
in the cloud spending them recycling

00:09:20,410 --> 00:09:26,199
them when they need to be all those

00:09:21,760 --> 00:09:27,670
things and if you need more machines you

00:09:26,199 --> 00:09:29,170
can easily scale up if you need fewer

00:09:27,670 --> 00:09:30,880
machines you can easily scale down and

00:09:29,170 --> 00:09:33,790
obviously we have this shared build

00:09:30,880 --> 00:09:36,250
cache as well so the service supports

00:09:33,790 --> 00:09:37,990
use both as a full remote of execution

00:09:36,250 --> 00:09:39,690
and caching service as well as a service

00:09:37,990 --> 00:09:42,970
that you can just use as a remote cache

00:09:39,690 --> 00:09:44,470
some of you may be using Basil's remote

00:09:42,970 --> 00:09:46,269
cache on its own either with something

00:09:44,470 --> 00:09:48,279
that you have on Prem or some other

00:09:46,269 --> 00:09:50,560
technology you can use that use it this

00:09:48,279 --> 00:09:53,800
way with this service as well if you're

00:09:50,560 --> 00:09:55,810
interested we do have documentation as

00:09:53,800 --> 00:09:57,100
well as a survey that that takes some

00:09:55,810 --> 00:09:59,380
basic information about your build

00:09:57,100 --> 00:09:59,769
languages you're using etc things like

00:09:59,380 --> 00:10:01,870
that

00:09:59,769 --> 00:10:02,920
I will make sure that these are publicly

00:10:01,870 --> 00:10:07,690
accessible so you can find that link

00:10:02,920 --> 00:10:09,339
later or you can just come talk to me so

00:10:07,690 --> 00:10:11,079
in terms of the results that we've seen

00:10:09,339 --> 00:10:12,579
we've been working with a number of

00:10:11,079 --> 00:10:15,160
different customers over the past year

00:10:12,579 --> 00:10:18,819
or so tensorflow was one of our first

00:10:15,160 --> 00:10:20,319
customers they it says you know this is

00:10:18,819 --> 00:10:21,850
from a quote from one of the leads as

00:10:20,319 --> 00:10:25,870
we've reduced their average build times

00:10:21,850 --> 00:10:27,339
by 80% it's gone from about 45 or 50

00:10:25,870 --> 00:10:29,620
minutes to about 5 minutes for the

00:10:27,339 --> 00:10:33,940
average build at the same time we've

00:10:29,620 --> 00:10:35,380
also reduced their the dedicated CI

00:10:33,940 --> 00:10:36,699
hardware that they have as I said they

00:10:35,380 --> 00:10:38,260
can run on smaller machines now they

00:10:36,699 --> 00:10:39,760
don't need 32 core machines they just

00:10:38,260 --> 00:10:42,639
use the little four core machines

00:10:39,760 --> 00:10:44,350
running in the cloud so it's it's been a

00:10:42,639 --> 00:10:45,910
win-win you know eighty percent

00:10:44,350 --> 00:10:48,579
reduction in hardware eighty percent

00:10:45,910 --> 00:10:51,250
reduction in time it's been great in

00:10:48,579 --> 00:10:54,399
terms of other results Android studio is

00:10:51,250 --> 00:10:57,880
internally running their CI their basil

00:10:54,399 --> 00:11:00,010
based CI with this RBE service as I said

00:10:57,880 --> 00:11:03,100
it has allowed them to scale up and run

00:11:00,010 --> 00:11:04,690
builds a run tests at every commit run a

00:11:03,100 --> 00:11:06,939
lot more tests and improve their test

00:11:04,690 --> 00:11:10,769
coverage alex talked this morning about

00:11:06,939 --> 00:11:13,019
angular adopting RBE for angular CI

00:11:10,769 --> 00:11:14,910
I guess I maybe even underselling this a

00:11:13,019 --> 00:11:16,529
little bit but I remember looking at was

00:11:14,910 --> 00:11:18,360
that their test times went from an hour

00:11:16,529 --> 00:11:20,369
to 15 minutes it sounds like it may have

00:11:18,360 --> 00:11:22,679
even improved a little further so that's

00:11:20,369 --> 00:11:24,029
great unless you think this is an

00:11:22,679 --> 00:11:25,649
internal thing only where everything

00:11:24,029 --> 00:11:27,209
we're doing is a little bit different we

00:11:25,649 --> 00:11:30,299
have a couple external customers as well

00:11:27,209 --> 00:11:31,769
I can't mention them because well

00:11:30,299 --> 00:11:33,720
they're external customers we don't want

00:11:31,769 --> 00:11:35,459
to mention them but they have seen

00:11:33,720 --> 00:11:37,290
similar results great build speed

00:11:35,459 --> 00:11:39,179
improvements great scalability

00:11:37,290 --> 00:11:43,139
improvements so it's been really

00:11:39,179 --> 00:11:44,579
successful as a pilot program we're also

00:11:43,139 --> 00:11:47,279
starting to take some benchmarks with

00:11:44,579 --> 00:11:51,089
open source projects so the methodology

00:11:47,279 --> 00:11:53,069
we've methodology we've chosen is to try

00:11:51,089 --> 00:11:54,959
to simulate a CI workload so we take a

00:11:53,069 --> 00:11:57,449
range of 50 commits from an open source

00:11:54,959 --> 00:11:58,980
repository and we run them sequentially

00:11:57,449 --> 00:12:00,779
one after another we clear the local

00:11:58,980 --> 00:12:03,779
cache in between so it simulates landing

00:12:00,779 --> 00:12:04,920
on a fresh CI machine and just see what

00:12:03,779 --> 00:12:07,499
happens when we run in different

00:12:04,920 --> 00:12:10,559
configurations first project we picked

00:12:07,499 --> 00:12:13,410
was Google's abseil C++ libraries you

00:12:10,559 --> 00:12:15,660
can see we went from about 88 seconds on

00:12:13,410 --> 00:12:17,730
average per build to 51 seconds using

00:12:15,660 --> 00:12:19,679
just the remote cache and then when we

00:12:17,730 --> 00:12:22,259
added in remote execution we went to 23

00:12:19,679 --> 00:12:24,959
seconds so it's a 40% reduction in

00:12:22,259 --> 00:12:27,420
overall and end time of this 50 commit

00:12:24,959 --> 00:12:29,429
range using the remote cache or about a

00:12:27,420 --> 00:12:33,449
70% reduction yeah using a remote

00:12:29,429 --> 00:12:35,100
execution plus cache so I'm going to

00:12:33,449 --> 00:12:37,350
talk a little bit about the process of

00:12:35,100 --> 00:12:40,860
how you get your builds to work with a

00:12:37,350 --> 00:12:44,129
remote remote build system this is this

00:12:40,860 --> 00:12:46,139
has a few specific things for the remote

00:12:44,129 --> 00:12:47,759
build execution system but it has a lot

00:12:46,139 --> 00:12:49,379
of generic things that apply to any

00:12:47,759 --> 00:12:51,269
system where you're suddenly moving your

00:12:49,379 --> 00:12:54,360
actions off your local machine and onto

00:12:51,269 --> 00:12:56,189
a remote machine so the first decision

00:12:54,360 --> 00:12:57,749
that you need to make upfront is whether

00:12:56,189 --> 00:13:00,089
you're interested in looking just at

00:12:57,749 --> 00:13:02,970
caching or whether you want to do remote

00:13:00,089 --> 00:13:04,230
execution plus caching why would you

00:13:02,970 --> 00:13:06,809
want to do one versus the other so

00:13:04,230 --> 00:13:08,549
caching can provide a pretty substantial

00:13:06,809 --> 00:13:10,410
performance benefit as you saw 40

00:13:08,549 --> 00:13:11,879
percent in the case of abseil maybe a

00:13:10,410 --> 00:13:14,220
little higher or lower depending on the

00:13:11,879 --> 00:13:16,199
project and this works even for a fairly

00:13:14,220 --> 00:13:19,079
small projects absol builds are quite

00:13:16,199 --> 00:13:20,669
small I think they take as I recall less

00:13:19,079 --> 00:13:22,319
than five minutes to do all their their

00:13:20,669 --> 00:13:23,220
builds and tests so even for them we

00:13:22,319 --> 00:13:24,930
were able to provide a substantial

00:13:23,220 --> 00:13:27,090
benefit

00:13:24,930 --> 00:13:29,640
and it's a much faster onboarding

00:13:27,090 --> 00:13:31,530
process because you don't need to change

00:13:29,640 --> 00:13:32,880
your build really at all how you just

00:13:31,530 --> 00:13:36,720
need to kind of capture the state of

00:13:32,880 --> 00:13:38,010
your local system and that's it and we

00:13:36,720 --> 00:13:41,250
can support more languages more

00:13:38,010 --> 00:13:45,030
platforms with just the remote cache so

00:13:41,250 --> 00:13:46,380
the current system is Linux only do we

00:13:45,030 --> 00:13:49,730
have any windows developers out there

00:13:46,380 --> 00:13:53,700
anyone targeting Windows a few handful

00:13:49,730 --> 00:13:54,660
so the API itself is built to

00:13:53,700 --> 00:13:57,300
accommodate Windows

00:13:54,660 --> 00:13:59,040
we've internally we have a prototype

00:13:57,300 --> 00:14:00,450
that works with Windows trying to figure

00:13:59,040 --> 00:14:01,590
out exactly what to do with that there

00:14:00,450 --> 00:14:03,540
are some different constraints on

00:14:01,590 --> 00:14:04,770
licensing and compatibility and things

00:14:03,540 --> 00:14:07,230
like that to make it a little little

00:14:04,770 --> 00:14:10,290
trickier but you can use remote caching

00:14:07,230 --> 00:14:11,760
today and and then if the time comes

00:14:10,290 --> 00:14:15,150
when we do support Windows you can

00:14:11,760 --> 00:14:16,950
upgrade to remote execution remote

00:14:15,150 --> 00:14:18,360
execution plus caching gives you the

00:14:16,950 --> 00:14:19,620
maximum performance benefit for large

00:14:18,360 --> 00:14:20,100
projects that's what you saw with

00:14:19,620 --> 00:14:22,500
tensorflow

00:14:20,100 --> 00:14:24,420
earlier it's a really big project lots

00:14:22,500 --> 00:14:25,920
of tests lots of things to run it also

00:14:24,420 --> 00:14:27,360
gives you the most protection because

00:14:25,920 --> 00:14:29,700
again you're running in this remote

00:14:27,360 --> 00:14:32,240
system well-specified system there's no

00:14:29,700 --> 00:14:35,580
chance of local dependencies leaking in

00:14:32,240 --> 00:14:37,410
but the downside is that what we find

00:14:35,580 --> 00:14:39,180
when you move to that remote system is

00:14:37,410 --> 00:14:40,290
well maybe you were depending on some of

00:14:39,180 --> 00:14:41,460
those things locally you've got to

00:14:40,290 --> 00:14:42,750
change your bills a little bit you've

00:14:41,460 --> 00:14:44,880
got to update some targets things like

00:14:42,750 --> 00:14:48,180
that so it takes a little bit longer it

00:14:44,880 --> 00:14:50,130
takes a little bit more effort so to

00:14:48,180 --> 00:14:52,710
walk through just the the journey of

00:14:50,130 --> 00:14:54,360
onboarding for each of these four if

00:14:52,710 --> 00:14:56,310
you're interested in pursuing just that

00:14:54,360 --> 00:14:58,860
remote cache the first thing you need to

00:14:56,310 --> 00:15:01,230
do is figure out the signature of your

00:14:58,860 --> 00:15:03,510
local system so you're running these

00:15:01,230 --> 00:15:05,400
actions on a bill or on a machine maybe

00:15:03,510 --> 00:15:06,750
it has a particular JDK maybe it has a

00:15:05,400 --> 00:15:11,100
prediction of a particular version of

00:15:06,750 --> 00:15:12,780
clang or GCC maybe it you use sort and

00:15:11,100 --> 00:15:14,760
sort is not necessarily stable across

00:15:12,780 --> 00:15:15,870
all Linux distros so you want to capture

00:15:14,760 --> 00:15:17,910
the version of that that you're using

00:15:15,870 --> 00:15:19,440
things like that so you need to figure

00:15:17,910 --> 00:15:22,860
out what you're using on your local

00:15:19,440 --> 00:15:24,830
system and distill that into some sort

00:15:22,860 --> 00:15:28,680
of cache silo key so this is a way to

00:15:24,830 --> 00:15:31,020
identify your the constraints of your

00:15:28,680 --> 00:15:33,270
particular system second thing you need

00:15:31,020 --> 00:15:34,650
to do is actually obviously set up the

00:15:33,270 --> 00:15:36,600
permissions on this remote cache and

00:15:34,650 --> 00:15:38,400
then finally you need to configure basil

00:15:36,600 --> 00:15:41,130
to use your remote cache

00:15:38,400 --> 00:15:42,600
and the path we recommend is to deploy

00:15:41,130 --> 00:15:43,950
to see I first because that's where you

00:15:42,600 --> 00:15:45,270
get the most value out of these builds

00:15:43,950 --> 00:15:47,580
you're generally landing on a fresh

00:15:45,270 --> 00:15:48,810
machine and pulling all the all the

00:15:47,580 --> 00:15:51,060
artifacts from that remote cache really

00:15:48,810 --> 00:15:52,290
delivers a lot of speed up and then once

00:15:51,060 --> 00:15:55,230
your CI system is running well you can

00:15:52,290 --> 00:15:56,880
roll it out to developers and it's just

00:15:55,230 --> 00:15:58,590
a little bit easier path to work on CI

00:15:56,880 --> 00:16:02,190
where it's a more tightly controlled and

00:15:58,590 --> 00:16:05,160
centralized environment so this cache

00:16:02,190 --> 00:16:07,290
silo key as I mentioned this is all

00:16:05,160 --> 00:16:09,330
about the binaries the system libraries

00:16:07,290 --> 00:16:11,310
things on on your local system that

00:16:09,330 --> 00:16:13,410
you're accessing and again that could be

00:16:11,310 --> 00:16:16,260
your local developer machine it could be

00:16:13,410 --> 00:16:18,570
your CI host the gold standard here is

00:16:16,260 --> 00:16:20,160
really something like a docker image

00:16:18,570 --> 00:16:22,860
hash if you're running inside of a

00:16:20,160 --> 00:16:24,630
docker container but most of the time

00:16:22,860 --> 00:16:26,910
that's not really the case so you want

00:16:24,630 --> 00:16:28,290
to kind of look at what version what

00:16:26,910 --> 00:16:31,020
things are installed on your system and

00:16:28,290 --> 00:16:33,030
what things are used by basil and put

00:16:31,020 --> 00:16:35,250
that into identifiers for starters you

00:16:33,030 --> 00:16:36,630
can't actually just use a number and if

00:16:35,250 --> 00:16:39,360
something breaks then you can increment

00:16:36,630 --> 00:16:41,010
that number and you get a fresh silo as

00:16:39,360 --> 00:16:42,180
you can see from this diagram the way

00:16:41,010 --> 00:16:44,310
this actually works is that it creates

00:16:42,180 --> 00:16:47,400
essentially an entirely separate remote

00:16:44,310 --> 00:16:48,720
cache so systems that use one key write

00:16:47,400 --> 00:16:50,550
to one cache systems that use another

00:16:48,720 --> 00:16:51,150
key write to a different cache and that

00:16:50,550 --> 00:16:53,910
way you don't get any

00:16:51,150 --> 00:16:57,290
cross-contamination or someone polluting

00:16:53,910 --> 00:16:59,940
a cache with with an invalid artifact

00:16:57,290 --> 00:17:02,970
second thing is permissions so what we

00:16:59,940 --> 00:17:04,949
recommend for this is that you set up

00:17:02,970 --> 00:17:07,410
your CI system which again is tightly

00:17:04,949 --> 00:17:09,329
controlled you have centralized image

00:17:07,410 --> 00:17:10,709
management probably you have very few

00:17:09,329 --> 00:17:13,350
people who have access to it who have

00:17:10,709 --> 00:17:15,360
direct access to it etc as both a cache

00:17:13,350 --> 00:17:17,370
reader and writer and then you set up

00:17:15,360 --> 00:17:18,770
individual developers just as readers so

00:17:17,370 --> 00:17:21,390
again you don't get somebody who

00:17:18,770 --> 00:17:24,150
fat-fingers a command and you know

00:17:21,390 --> 00:17:25,170
corrupts your whole cache so you just

00:17:24,150 --> 00:17:27,120
make those individual developers

00:17:25,170 --> 00:17:30,720
read-only or give them read-only

00:17:27,120 --> 00:17:33,270
permissions and then finally configuring

00:17:30,720 --> 00:17:34,470
basil to actually run this basil has a

00:17:33,270 --> 00:17:37,280
number of different flags you have to

00:17:34,470 --> 00:17:39,990
set we do provide a sample basil RC

00:17:37,280 --> 00:17:42,330
another quick show of hands who uses

00:17:39,990 --> 00:17:44,640
basil our C files versus just lots of

00:17:42,330 --> 00:17:48,480
things on the command line oh right

00:17:44,640 --> 00:17:50,370
good so we provide the sample RC you

00:17:48,480 --> 00:17:51,690
have to copy it and merge it into your

00:17:50,370 --> 00:17:54,720
existing basil RC

00:17:51,690 --> 00:17:56,399
put it on your local system but it's

00:17:54,720 --> 00:17:58,440
there and you can see all the all the

00:17:56,399 --> 00:17:59,899
various flags that need to be set at a

00:17:58,440 --> 00:18:02,129
very high level once you've done that

00:17:59,899 --> 00:18:03,600
you can say okay we're gonna specify

00:18:02,129 --> 00:18:06,059
this remote cache configuration that's

00:18:03,600 --> 00:18:08,009
defined in the basilar see you can see

00:18:06,059 --> 00:18:09,960
this host platform remote properties

00:18:08,009 --> 00:18:12,539
override flag that you have to set it's

00:18:09,960 --> 00:18:15,450
very very verbose tag name but describes

00:18:12,539 --> 00:18:17,039
what it does it says well we're

00:18:15,450 --> 00:18:18,389
describing the local system but we want

00:18:17,039 --> 00:18:19,649
you to pretend that it's like the remote

00:18:18,389 --> 00:18:22,740
system so that you can set a remote

00:18:19,649 --> 00:18:24,809
cache value so you put your cache silo

00:18:22,740 --> 00:18:27,000
key in there you can actually do this

00:18:24,809 --> 00:18:30,059
through your workspace through workspace

00:18:27,000 --> 00:18:31,769
platforms but you can also do it on the

00:18:30,059 --> 00:18:33,480
command line like this and then finally

00:18:31,769 --> 00:18:36,330
for our particular system we allow you

00:18:33,480 --> 00:18:38,519
to specify your particular cloud project

00:18:36,330 --> 00:18:40,259
so this goes into your cache it's not

00:18:38,519 --> 00:18:41,850
readable or writable by anyone else it's

00:18:40,259 --> 00:18:46,830
all locked down it's very secure etc

00:18:41,850 --> 00:18:48,809
just just what you'd expect so that's

00:18:46,830 --> 00:18:50,850
remote caching if you want to look at

00:18:48,809 --> 00:18:53,580
remote execution as I said it's a little

00:18:50,850 --> 00:18:55,620
more involved the first step really is

00:18:53,580 --> 00:18:58,620
to get your build working with basil

00:18:55,620 --> 00:19:00,929
locally first you can onboard two basil

00:18:58,620 --> 00:19:04,649
and two remote execution at the same

00:19:00,929 --> 00:19:06,210
time but it's not what we recommend most

00:19:04,649 --> 00:19:07,740
people here probably are already using

00:19:06,210 --> 00:19:09,750
basil so this isn't really a concern

00:19:07,740 --> 00:19:10,889
hopefully your build works otherwise

00:19:09,750 --> 00:19:14,940
maybe you shouldn't be here you should

00:19:10,889 --> 00:19:16,860
be fixing your building so get your

00:19:14,940 --> 00:19:19,470
working locally then choose a part of

00:19:16,860 --> 00:19:22,379
your build to focus on get that working

00:19:19,470 --> 00:19:24,360
remotely get it set up under CI so that

00:19:22,379 --> 00:19:26,129
it continues to work remotely and then

00:19:24,360 --> 00:19:27,240
you can iterate and add more parts of

00:19:26,129 --> 00:19:29,279
your build until the whole thing works

00:19:27,240 --> 00:19:31,379
and you add it as a blocking factor on

00:19:29,279 --> 00:19:35,370
your CI and no one can check in and

00:19:31,379 --> 00:19:38,809
break anything the reason we recommend

00:19:35,370 --> 00:19:41,549
this as I said these this remote sandbox

00:19:38,809 --> 00:19:43,500
idea has stricter constraints than

00:19:41,549 --> 00:19:44,789
running locally people find that well

00:19:43,500 --> 00:19:48,539
that sometimes things break so they've

00:19:44,789 --> 00:19:52,049
got to update things also we recommend

00:19:48,539 --> 00:19:54,269
the CI path first here because it's the

00:19:52,049 --> 00:19:57,929
best way to really keep the system warm

00:19:54,269 --> 00:19:59,490
and and to have warm workers to have

00:19:57,929 --> 00:20:00,690
enough traffic that you're populating

00:19:59,490 --> 00:20:01,980
and pulling from the remote cache if

00:20:00,690 --> 00:20:04,860
you're doing developer builds those

00:20:01,980 --> 00:20:05,520
might be you know it might be just one

00:20:04,860 --> 00:20:06,840
person or two

00:20:05,520 --> 00:20:08,430
people and they're not doing enough

00:20:06,840 --> 00:20:09,870
build to really see benefit from the

00:20:08,430 --> 00:20:13,050
system but with the CI system it's sort

00:20:09,870 --> 00:20:14,610
of priming the pump for everyone and

00:20:13,050 --> 00:20:17,790
we've we've found that this delivers the

00:20:14,610 --> 00:20:22,320
best speed-up and and the most impact if

00:20:17,790 --> 00:20:24,360
you get your CI up and running first so

00:20:22,320 --> 00:20:27,000
in terms of this process you want to

00:20:24,360 --> 00:20:28,560
capture your execution environment in

00:20:27,000 --> 00:20:30,450
what's called a tool chain I'll talk

00:20:28,560 --> 00:20:31,830
about that in just a minute and then

00:20:30,450 --> 00:20:33,210
configuring permissions and configuring

00:20:31,830 --> 00:20:36,510
basil just like you do for the remote

00:20:33,210 --> 00:20:39,840
cache so what is a tool chain tool chain

00:20:36,510 --> 00:20:41,760
is just the encapsulation of the

00:20:39,840 --> 00:20:44,100
execution environment where your builds

00:20:41,760 --> 00:20:46,290
and tests are going to run this defines

00:20:44,100 --> 00:20:49,800
things like the installed software the

00:20:46,290 --> 00:20:52,170
library's header files etc we use a

00:20:49,800 --> 00:20:54,480
docker image to encapsulate this you

00:20:52,170 --> 00:20:56,220
don't have to but for us it seemed like

00:20:54,480 --> 00:20:57,780
a pretty intuitive fit to say this is

00:20:56,220 --> 00:21:00,570
what the remote system should look like

00:20:57,780 --> 00:21:03,180
it's an easy specifier you can specify a

00:21:00,570 --> 00:21:05,970
sha hash and everything again is very

00:21:03,180 --> 00:21:08,280
easy to follow the only problem with

00:21:05,970 --> 00:21:10,230
this is the docker file is kind of

00:21:08,280 --> 00:21:11,820
opaque debatable basil has to be told

00:21:10,230 --> 00:21:13,140
about what that execution environment

00:21:11,820 --> 00:21:14,580
will look like unlike when you're

00:21:13,140 --> 00:21:16,620
running locally where basil can just

00:21:14,580 --> 00:21:19,350
look at your system and say oh I see you

00:21:16,620 --> 00:21:20,520
have this JDK installed and and this

00:21:19,350 --> 00:21:22,980
tool installed and that tool installed

00:21:20,520 --> 00:21:25,620
so you need to specify a cross tool flag

00:21:22,980 --> 00:21:27,120
that says here's how here's some

00:21:25,620 --> 00:21:29,100
information about this remote system and

00:21:27,120 --> 00:21:31,800
where to find specific binaries specific

00:21:29,100 --> 00:21:33,720
things you might need to specify some

00:21:31,800 --> 00:21:35,670
JDK related flags that tell you what's

00:21:33,720 --> 00:21:37,880
in that docker file and how it differs

00:21:35,670 --> 00:21:40,110
from your local system things like that

00:21:37,880 --> 00:21:44,340
the good news is we do provide a

00:21:40,110 --> 00:21:48,060
reference tool chain it supports C++

00:21:44,340 --> 00:21:49,890
Java Galang Python to some extent we

00:21:48,060 --> 00:21:52,470
only support native rules not rules

00:21:49,890 --> 00:21:54,630
Python we're working on that so it's

00:21:52,470 --> 00:21:55,590
pretty wide variety of things a lot of

00:21:54,630 --> 00:21:57,990
people have found it's pretty usable

00:21:55,590 --> 00:22:00,360
just as is and it essentially maintained

00:21:57,990 --> 00:22:02,910
and released by Google so it's really

00:22:00,360 --> 00:22:05,430
the fastest path to onboarding but let's

00:22:02,910 --> 00:22:07,800
say you work in Scala or a Kotlin or

00:22:05,430 --> 00:22:10,200
some other language you can roll your

00:22:07,800 --> 00:22:11,790
own tool chain you can either use our

00:22:10,200 --> 00:22:13,920
provider tool chain as a base or you can

00:22:11,790 --> 00:22:15,660
roll one from scratch we've also seen

00:22:13,920 --> 00:22:17,190
good success with this we've had several

00:22:15,660 --> 00:22:19,170
customers who have come to us and said

00:22:17,190 --> 00:22:21,270
oh I need to use this

00:22:19,170 --> 00:22:22,530
language and we give them the

00:22:21,270 --> 00:22:24,090
instructions and they build a tool chain

00:22:22,530 --> 00:22:27,090
and it just works with the remote system

00:22:24,090 --> 00:22:29,100
so although officially we have that the

00:22:27,090 --> 00:22:33,090
those four languages C++ Java golang and

00:22:29,100 --> 00:22:34,410
Python we've seen pretty good adoption

00:22:33,090 --> 00:22:36,660
across other languages as well and a

00:22:34,410 --> 00:22:38,700
pretty smooth path for that you might

00:22:36,660 --> 00:22:39,750
also need to roll your own people train

00:22:38,700 --> 00:22:42,480
for other things like if you're running

00:22:39,750 --> 00:22:45,480
integration tests and you need some

00:22:42,480 --> 00:22:47,970
specific application or credentials or

00:22:45,480 --> 00:22:51,390
something like that using rules docker

00:22:47,970 --> 00:22:53,060
to create docker images or using

00:22:51,390 --> 00:22:57,270
sanitizers sometimes requires special

00:22:53,060 --> 00:22:59,250
special tool chains again going back to

00:22:57,270 --> 00:23:01,830
permissions this one's a little bit

00:22:59,250 --> 00:23:04,620
different than remote cache so all these

00:23:01,830 --> 00:23:07,020
jobs are run on the on the remote

00:23:04,620 --> 00:23:09,180
workers all the data going in and out of

00:23:07,020 --> 00:23:12,540
that system is content addressed so you

00:23:09,180 --> 00:23:14,700
can't say I'm gonna write this file but

00:23:12,540 --> 00:23:16,350
the contents don't match the system will

00:23:14,700 --> 00:23:17,640
reject that so it's actually pretty safe

00:23:16,350 --> 00:23:20,220
and it's pretty hard to poison the cache

00:23:17,640 --> 00:23:22,950
via this so you should let your CI

00:23:20,220 --> 00:23:24,390
system and your developers send jobs to

00:23:22,950 --> 00:23:26,160
the remote system and then those will

00:23:24,390 --> 00:23:28,790
will be written into the cache and

00:23:26,160 --> 00:23:32,880
everyone can share those cache values

00:23:28,790 --> 00:23:34,740
and finally setting up basil again lots

00:23:32,880 --> 00:23:36,420
of basil flags we provide a sample basil

00:23:34,740 --> 00:23:39,720
RC you can copy that and merge it with

00:23:36,420 --> 00:23:41,340
your own the other wrinkle here is that

00:23:39,720 --> 00:23:43,080
the tool chain you defined you have to

00:23:41,340 --> 00:23:44,250
add to your workspace there's some

00:23:43,080 --> 00:23:46,440
well-defined

00:23:44,250 --> 00:23:48,720
basil rules that you have to have to put

00:23:46,440 --> 00:23:51,030
in there and you have to say okay use

00:23:48,720 --> 00:23:52,470
this this tool chain with this target

00:23:51,030 --> 00:23:54,360
I believe it's actually all the platform

00:23:52,470 --> 00:23:56,910
excuse me okay so you use this platform

00:23:54,360 --> 00:23:59,940
with this target things like that and

00:23:56,910 --> 00:24:02,550
again this the command line is just you

00:23:59,940 --> 00:24:04,260
pass that remote configuration and you

00:24:02,550 --> 00:24:07,590
pass an identifier that tells basil to

00:24:04,260 --> 00:24:11,220
point to your particular your particular

00:24:07,590 --> 00:24:14,580
instance of of remote execution remote

00:24:11,220 --> 00:24:15,900
build execution so that's a pretty high

00:24:14,580 --> 00:24:18,180
level overview tells you some of the

00:24:15,900 --> 00:24:19,680
advantages of remote builds tells you a

00:24:18,180 --> 00:24:21,150
little bit about the specific Google

00:24:19,680 --> 00:24:23,080
service and about remote builds in

00:24:21,150 --> 00:24:25,480
general thank you

00:24:23,080 --> 00:24:25,480

YouTube URL: https://www.youtube.com/watch?v=MyuJRUwT5LI


