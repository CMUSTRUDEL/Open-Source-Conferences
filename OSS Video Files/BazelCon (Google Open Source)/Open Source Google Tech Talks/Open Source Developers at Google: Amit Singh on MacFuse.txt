Title: Open Source Developers at Google: Amit Singh on MacFuse
Publication date: 2010-10-27
Playlist: Open Source Google Tech Talks
Description: 
	File systems provide one of the most familiar interfaces end users know. Since implementing a traditional file system is extremely complex and difficult, presenting information seamlessly through files and folders has typically been limited to a small set of select programmers--often kernel hackers who develop at the lowest layers of a system. The MacFUSE mechanism breaks this barrier on Mac OS X by doing all the in-kernel hard work once and for all and leaving to the developer only the file-system-specific logic, which can be implemented as a regular user-space application. MacFUSE, with its simple programmer-visible API (same as the Linux FUSE API) and multiple language bindings, almost trivializes the process of making anything and everything appear seamlessly as a set of files and folders. You can use it to blur the line between the Macintosh Desktop and the Web. In this talk, you will hear the story of MacFUSE from its creator.
Captions: 
	00:00:00,000 --> 00:00:00,000


00:00:00,000 --> 00:00:02,050
TED: You all to the Google Open Source

00:00:02,050 --> 00:00:04,280
Developers Speaker Series.

00:00:04,280 --> 00:00:06,960
Our speaker tonight is Amit Singh.

00:00:06,960 --> 00:00:10,270
I've been fortunate enough to know Amit Singh for about six

00:00:10,270 --> 00:00:13,990
or seven years now and work with him for most of that time

00:00:13,990 --> 00:00:16,200
and to be around to see all the wonderful

00:00:16,200 --> 00:00:17,290
work that he's done.

00:00:17,290 --> 00:00:20,080
From operating system virtualization work that

00:00:20,080 --> 00:00:23,730
actually we worked on together to his exploration of Mac OS X

00:00:23,730 --> 00:00:25,980
and the stuff that he's been putting out for OS X as well

00:00:25,980 --> 00:00:30,270
as his book Mac OS X Internals.

00:00:30,270 --> 00:00:34,320
And recently, I had the pleasure to watch him work on

00:00:34,320 --> 00:00:36,290
an additional product, which is called MacFUSE.

00:00:36,290 --> 00:00:38,480
which is what he'll be talking about tonight.

00:00:38,480 --> 00:00:42,110
And it's kind of fun to watch him at work, because sometimes

00:00:42,110 --> 00:00:44,280
he goes in this mode where basically he does not need

00:00:44,280 --> 00:00:48,200
sleep and he can just work for weeks and weeks at a time

00:00:48,200 --> 00:00:49,870
without sleeping.

00:00:49,870 --> 00:00:51,720
It's basically very interesting.

00:00:51,720 --> 00:00:54,110
So I'm hoping you get a feel for that tonight as he

00:00:54,110 --> 00:00:56,175
basically tells you in person about MacFUSE.

00:00:56,175 --> 00:01:02,790


00:01:02,790 --> 00:01:03,750
AMIT SINGH: Thank you.

00:01:03,750 --> 00:01:06,640
Ted's very kind.

00:01:06,640 --> 00:01:08,720
And thank you all for being here tonight.

00:01:08,720 --> 00:01:17,590


00:01:17,590 --> 00:01:22,330
This can be a pretty free form talk, which means we can adapt

00:01:22,330 --> 00:01:25,560
pretty dynamically based on what the audience is.

00:01:25,560 --> 00:01:27,720
I'm not very sure what the audience is here, actually.

00:01:27,720 --> 00:01:31,640


00:01:31,640 --> 00:01:34,390
So we will talk about MacFUSE and how it works and how it

00:01:34,390 --> 00:01:36,970
was done in and so on and so forth.

00:01:36,970 --> 00:01:40,590
But how many people don't even know what it is and would like

00:01:40,590 --> 00:01:42,610
me to give a very, very brief elevator pitch

00:01:42,610 --> 00:01:45,570
thing on what it is?

00:01:45,570 --> 00:01:47,400
OK.

00:01:47,400 --> 00:01:50,020
So I'm not sure if it will be helpful.

00:01:50,020 --> 00:01:52,860


00:01:52,860 --> 00:01:55,560
You can think of it as a set of building blocks,

00:01:55,560 --> 00:02:01,970
programming tools, libraries that you, as a developer, as a

00:02:01,970 --> 00:02:07,690
regular OS X developer, can use to take any information,

00:02:07,690 --> 00:02:10,240
whether that information is on your disk--

00:02:10,240 --> 00:02:12,840
whether it's on a remote machine, or whether it's not

00:02:12,840 --> 00:02:15,610
even anywhere, you're cooking it up in your program--

00:02:15,610 --> 00:02:17,680
and put that information in the forms

00:02:17,680 --> 00:02:19,600
of files and folders.

00:02:19,600 --> 00:02:22,340
So make it look like it's a file system.

00:02:22,340 --> 00:02:23,720
And why you would want to do that?

00:02:23,720 --> 00:02:25,140
What are the benefits of it?

00:02:25,140 --> 00:02:29,210
What kind of thing can be done with this technique?

00:02:29,210 --> 00:02:30,580
We'll talk about that.

00:02:30,580 --> 00:02:32,060
But that's the gist of it.

00:02:32,060 --> 00:02:35,590


00:02:35,590 --> 00:02:39,440
Also curious, how many people are here because they think

00:02:39,440 --> 00:02:42,230
they would like to use it or might want to use in their own

00:02:42,230 --> 00:02:45,110
projects or products?

00:02:45,110 --> 00:02:46,940
OK.

00:02:46,940 --> 00:02:52,360
So sounds like it could be a little bit technical here.

00:02:52,360 --> 00:03:00,550


00:03:00,550 --> 00:03:02,810
So I'm sure people would have noticed this scrolling thing

00:03:02,810 --> 00:03:04,200
that was running for a while.

00:03:04,200 --> 00:03:07,240


00:03:07,240 --> 00:03:13,860
That was actually an actual UNIX system

00:03:13,860 --> 00:03:16,300
from the early '70s.

00:03:16,300 --> 00:03:17,950
And it was running on one of these.

00:03:17,950 --> 00:03:20,680


00:03:20,680 --> 00:03:23,530
It's a Nintendo Game Boy.

00:03:23,530 --> 00:03:30,290
So it was running on a PDP-11 emulator, running on a Game

00:03:30,290 --> 00:03:38,630
Boy emulator, running on Mac OS X. It was running like that

00:03:38,630 --> 00:03:42,320
because I can't actually put this there.

00:03:42,320 --> 00:03:45,980
So what's the point of that?

00:03:45,980 --> 00:03:50,360


00:03:50,360 --> 00:03:55,880
I'd like to start with a comparison of what used to be,

00:03:55,880 --> 00:03:59,710
let's say, at the dawn of the modern operating systems age,

00:03:59,710 --> 00:04:02,450
which given how successful UNIX has been.

00:04:02,450 --> 00:04:05,940
Let's say around the time before UNIX was born to what

00:04:05,940 --> 00:04:16,209
we have today in the context being Mac OS X. And I do

00:04:16,209 --> 00:04:20,640
apologize for this, because I personally find it very

00:04:20,640 --> 00:04:22,700
valuable to look back upon things.

00:04:22,700 --> 00:04:25,440
Look at the history of how things are.

00:04:25,440 --> 00:04:27,220
How did they come to be what they are today?

00:04:27,220 --> 00:04:28,250
What path they took?

00:04:28,250 --> 00:04:30,820
How many times they were reinvented?

00:04:30,820 --> 00:04:36,580
So most of my writings and talks do have a reasonable

00:04:36,580 --> 00:04:38,100
dose of history.

00:04:38,100 --> 00:04:42,110
So if that's not your thing, sorry, but I can't help it.

00:04:42,110 --> 00:04:45,300


00:04:45,300 --> 00:04:48,790
So if you look at these aspects of pretty much the

00:04:48,790 --> 00:04:53,220
first version of UNIX and compare it with Mac OS X, so

00:04:53,220 --> 00:04:56,680
you will see that lots of things have blown up a lot.

00:04:56,680 --> 00:04:58,470
And that's to be expected.

00:04:58,470 --> 00:05:01,930
Especially like you write the same one line program, it just

00:05:01,930 --> 00:05:05,900
takes 13 times more space now.

00:05:05,900 --> 00:05:08,640
Another thing is that since we're talking about file

00:05:08,640 --> 00:05:12,400
systems, so UNIX just had one file system and it was fine.

00:05:12,400 --> 00:05:15,020
It was good enough for the people who use it.

00:05:15,020 --> 00:05:19,220
And depending on how you counted, Mac OS X has like 15.

00:05:19,220 --> 00:05:23,280
Certainly more than a dozen, but 15 is a good number.

00:05:23,280 --> 00:05:29,580
So it would be helpful to see how we got from 1 to 15.

00:05:29,580 --> 00:05:31,920
And why 15 are not enough, and why do you want more?

00:05:31,920 --> 00:05:34,780


00:05:34,780 --> 00:05:40,730
So given that, let's go back a little bit.

00:05:40,730 --> 00:05:43,250
Before there was UNIX, actually.

00:05:43,250 --> 00:05:46,200
So there was this operating system called Multics.

00:05:46,200 --> 00:05:48,750
People wanted a decent operating system.

00:05:48,750 --> 00:05:50,705
People wanted computers to be usable by everybody.

00:05:50,705 --> 00:05:54,890


00:05:54,890 --> 00:05:58,190
And many aspects of modern OSs, including OS X, can be

00:05:58,190 --> 00:05:59,970
traced back to this one system.

00:05:59,970 --> 00:06:02,550


00:06:02,550 --> 00:06:05,090
In particular, the file system.

00:06:05,090 --> 00:06:10,360
So in the mid '60s, there was a paper published, and they

00:06:10,360 --> 00:06:12,990
talked about what a file system should be.

00:06:12,990 --> 00:06:16,040
And they talked about a hierarchy of files and folders

00:06:16,040 --> 00:06:19,530
and file permissions and opened files and closed files

00:06:19,530 --> 00:06:24,200
and backup mechanisms and file sharing and this and that.

00:06:24,200 --> 00:06:26,390
So pretty much what we have today, but this

00:06:26,390 --> 00:06:29,350
was back in the '60s.

00:06:29,350 --> 00:06:32,080
And then, as the history is well known,

00:06:32,080 --> 00:06:33,750
Multics led to UNIX.

00:06:33,750 --> 00:06:37,570


00:06:37,570 --> 00:06:39,870
So how did file systems work in UNIX?

00:06:39,870 --> 00:06:42,910
There was one only one file system, so it's very simple.

00:06:42,910 --> 00:06:45,390
The operating system knows this is the file system, that

00:06:45,390 --> 00:06:48,110
knowledge is really hard coded into the operating system.

00:06:48,110 --> 00:06:51,970
So if a program wants to read and write, make system calls

00:06:51,970 --> 00:06:54,570
that go into the kernel, the system calls know about the

00:06:54,570 --> 00:06:57,000
file system and that's what you have. It's pretty simple.

00:06:57,000 --> 00:06:59,900
But this was never going to be enough, because people have

00:06:59,900 --> 00:07:01,260
different needs.

00:07:01,260 --> 00:07:02,690
The internet happened.

00:07:02,690 --> 00:07:05,930
So you need to be able to read from across the network and do

00:07:05,930 --> 00:07:06,570
this and do that.

00:07:06,570 --> 00:07:08,780
So people wanted to add more file systems. So

00:07:08,780 --> 00:07:10,600
how do you do that?

00:07:10,600 --> 00:07:14,830
Well, just make kind of a switch statement and have some

00:07:14,830 --> 00:07:17,930
type identifier and see if it's this one or that one.

00:07:17,930 --> 00:07:21,740
And you can kind of expand the code and accommodate it in the

00:07:21,740 --> 00:07:23,970
same framework.

00:07:23,970 --> 00:07:26,950
Now, what happens if you add more?

00:07:26,950 --> 00:07:28,200
It becomes like this.

00:07:28,200 --> 00:07:31,140


00:07:31,140 --> 00:07:33,410
I shouldn't have to tell you really why this

00:07:33,410 --> 00:07:34,880
picture is not good.

00:07:34,880 --> 00:07:38,670
The things at the bottom are sharing a lot of code.

00:07:38,670 --> 00:07:41,020
The switch thing is really complex.

00:07:41,020 --> 00:07:44,220
And you really need to recompile the kernel,

00:07:44,220 --> 00:07:46,980
recompile the operating system for this to work.

00:07:46,980 --> 00:07:49,880
And so this is before there were kernel modules

00:07:49,880 --> 00:07:51,550
and things like that.

00:07:51,550 --> 00:07:53,530
So this thing is really not maintainable.

00:07:53,530 --> 00:07:56,670
And how far can you go with this?

00:07:56,670 --> 00:08:01,580
So a better way to solve this problem was needed.

00:08:01,580 --> 00:08:05,020
So the solution was something like this, that you don't

00:08:05,020 --> 00:08:07,510
really want the top layers to change, because a lot of

00:08:07,510 --> 00:08:09,570
software has been written already.

00:08:09,570 --> 00:08:11,890
And that's part of the reason why UNIX was successful,

00:08:11,890 --> 00:08:16,320
because it's very easy to use, easy to program for, is

00:08:16,320 --> 00:08:17,910
reasonably standardized--

00:08:17,910 --> 00:08:19,880
not standardized, but reasonably similar.

00:08:19,880 --> 00:08:23,490


00:08:23,490 --> 00:08:24,770
So we have two file systems here.

00:08:24,770 --> 00:08:28,000
Two file systems actually taken from Mac OS X. And when

00:08:28,000 --> 00:08:30,890
I say file system, it's a very vague, overloaded term.

00:08:30,890 --> 00:08:35,530
But for the purposes of this discussion, let's say a file

00:08:35,530 --> 00:08:39,330
system is just a set of operations and some objects.

00:08:39,330 --> 00:08:41,350
So you're creating files and directories, reading them,

00:08:41,350 --> 00:08:42,600
removing them, this and that.

00:08:42,600 --> 00:08:46,170


00:08:46,170 --> 00:08:49,020
So it's better that the top layer is not aware of every

00:08:49,020 --> 00:08:50,480
single type that you introduce.

00:08:50,480 --> 00:08:55,380


00:08:55,380 --> 00:08:58,630
So Sun Microsystems came up with a solution that instead

00:08:58,630 --> 00:09:03,870
of things being specific, the top layer should just deal

00:09:03,870 --> 00:09:06,100
with only one type of thing.

00:09:06,100 --> 00:09:11,780
So instead of these HFS+ files and folders and USF files and

00:09:11,780 --> 00:09:16,780
folders, let their only be one kind of files and folders.

00:09:16,780 --> 00:09:20,210
Let's call them virtual nodes or Vnodes.

00:09:20,210 --> 00:09:23,730
And instead of specific operation types, let's just

00:09:23,730 --> 00:09:25,790
have one kind of operations called Virtual Node

00:09:25,790 --> 00:09:28,210
Operations or VNOPS.

00:09:28,210 --> 00:09:30,620
So this really is saying that-- kind of object

00:09:30,620 --> 00:09:34,560
oriented-- we are saying that we have a concept and then we

00:09:34,560 --> 00:09:36,750
have specific implementations of it.

00:09:36,750 --> 00:09:38,840
So a pretty obvious way to do it.

00:09:38,840 --> 00:09:41,340
And this was known as the Vnode VFS concept.

00:09:41,340 --> 00:09:44,250


00:09:44,250 --> 00:09:47,840
So this thing came out in 1984.

00:09:47,840 --> 00:09:52,430
And it was successful enough that OS X uses it still.

00:09:52,430 --> 00:09:55,200
Pretty much most UNIX like OSs use it.

00:09:55,200 --> 00:09:57,500
It's the same idea.

00:09:57,500 --> 00:09:59,070
So that's good to know.

00:09:59,070 --> 00:10:02,130
But '84 was a long time ago.

00:10:02,130 --> 00:10:03,380
What happened?

00:10:03,380 --> 00:10:05,400


00:10:05,400 --> 00:10:07,510
There were lots of other developments in distributed

00:10:07,510 --> 00:10:11,340
file systems. And even Vnode VFS was not the only thing.

00:10:11,340 --> 00:10:15,760
Companies like AT&T and DEC, they had essentially the same

00:10:15,760 --> 00:10:20,310
ideas and essentially the same solution independently done.

00:10:20,310 --> 00:10:22,840
But for various reasons, we will not and

00:10:22,840 --> 00:10:23,640
shouldn't go into here.

00:10:23,640 --> 00:10:25,230
There's no time.

00:10:25,230 --> 00:10:27,060
We know VFS prevailed.

00:10:27,060 --> 00:10:29,120
And that remains the way of doing things, even now.

00:10:29,120 --> 00:10:35,190


00:10:35,190 --> 00:10:40,280
So let's think of some OS vendors.

00:10:40,280 --> 00:10:44,120
Now, given that we have Vnode VFS and that's the way you

00:10:44,120 --> 00:10:47,940
write new file systems, it's reasonable to expect that OS

00:10:47,940 --> 00:10:51,260
vendors-- let's say a Apple, Microsoft--

00:10:51,260 --> 00:10:54,290
they would use something like this to create new file

00:10:54,290 --> 00:10:55,990
systems. When Apple introduces a new file system,

00:10:55,990 --> 00:10:56,740
that's what they use.

00:10:56,740 --> 00:10:58,060
Pretty reasonable thing, OK.

00:10:58,060 --> 00:11:01,940


00:11:01,940 --> 00:11:05,300
Let us take some common file systems that Apple has and

00:11:05,300 --> 00:11:09,550
let's compare how complex they are relatively.

00:11:09,550 --> 00:11:13,150
Now, complexity is a pretty complex topic.

00:11:13,150 --> 00:11:19,310
And lines of code may not be the best metric, because

00:11:19,310 --> 00:11:21,200
sometimes you remove lines of code and it

00:11:21,200 --> 00:11:23,990
becomes more complex.

00:11:23,990 --> 00:11:26,640
But given that all of these should be using the same

00:11:26,640 --> 00:11:29,300
underlying interface, lines of code is not that bad.

00:11:29,300 --> 00:11:32,300
And it's the best we can do in this talk anyway.

00:11:32,300 --> 00:11:35,790
So as we see, HFS+, which is the primary file system and

00:11:35,790 --> 00:11:38,110
Apple's main thing, is quite complex.

00:11:38,110 --> 00:11:41,060


00:11:41,060 --> 00:11:43,880
It's actually something like 10% of all

00:11:43,880 --> 00:11:46,940
BSD code in the kernel.

00:11:46,940 --> 00:11:49,880
And as we go to the right, we see that WebDAV, which is the

00:11:49,880 --> 00:11:51,480
file system that you use for mounting your

00:11:51,480 --> 00:11:55,070
iDisk, is pretty small.

00:11:55,070 --> 00:11:57,730
And whatever happened to FTP?

00:11:57,730 --> 00:12:01,140
It's actually zero, but I wanted to kind of make it look

00:12:01,140 --> 00:12:02,220
like it's--

00:12:02,220 --> 00:12:05,470
so it's just one pixel wide line, a high line, so

00:12:05,470 --> 00:12:08,370
what's going on?

00:12:08,370 --> 00:12:10,860
Well, what's going on is that this thing said lines of

00:12:10,860 --> 00:12:11,700
kernel code.

00:12:11,700 --> 00:12:14,800
FTP has no lines of kernel code in the Mac OS X kernel.

00:12:14,800 --> 00:12:18,450
So how does the file system work?

00:12:18,450 --> 00:12:19,700
It's something like this.

00:12:19,700 --> 00:12:22,740


00:12:22,740 --> 00:12:26,760
NFS is a pretty old, longstanding protocol.

00:12:26,760 --> 00:12:29,420
Mac OS X supports NFS.

00:12:29,420 --> 00:12:34,740
What if we took code for an NFS server and just ran it

00:12:34,740 --> 00:12:38,680
locally on our machine, and we modified it so that instead of

00:12:38,680 --> 00:12:42,670
serving files that it normally would, it would actually talk

00:12:42,670 --> 00:12:45,970
to an FTP server and it would serve that content instead?

00:12:45,970 --> 00:12:49,340
And then OS X knows how to mount an NFS share.

00:12:49,340 --> 00:12:51,310
So that's essentially what it does.

00:12:51,310 --> 00:12:55,630
So the FTP code for the FTP file system

00:12:55,630 --> 00:12:57,395
actually lives in Userspace.

00:12:57,395 --> 00:12:59,210
So that's how they do it.

00:12:59,210 --> 00:13:02,110
And you also remember that the WebDAV thing was

00:13:02,110 --> 00:13:03,530
pretty small, too.

00:13:03,530 --> 00:13:05,910
So why is that so small?

00:13:05,910 --> 00:13:09,510
Well, the reason for that is that it's somewhat similar

00:13:09,510 --> 00:13:12,500
logic, except they're not using NFS.

00:13:12,500 --> 00:13:15,240
They're using a custom protocol.

00:13:15,240 --> 00:13:18,820
And you put a small in-kernel file system, which is

00:13:18,820 --> 00:13:22,500
essentially a shim that forwards all file system calls

00:13:22,500 --> 00:13:23,780
to Userspace.

00:13:23,780 --> 00:13:26,340
And then you can have an arbitrary complex WebDAV

00:13:26,340 --> 00:13:30,470
daemon the talks HTTP to the server.

00:13:30,470 --> 00:13:31,950
And you can put whatever logic you want.

00:13:31,950 --> 00:13:37,430
You can put UI on top of that and do whatever you feel like.

00:13:37,430 --> 00:13:40,770
But conceptually, it's actually the same

00:13:40,770 --> 00:13:45,230
picture, isn't it?

00:13:45,230 --> 00:13:52,930
Now, let me sort of jump forward to MacFUSE, or

00:13:52,930 --> 00:13:56,240
strictly speaking, the FUSE idea.

00:13:56,240 --> 00:13:58,480
What is FUSE?

00:13:58,480 --> 00:14:00,610
This is FUSE.

00:14:00,610 --> 00:14:03,330
You put something in the kernel.

00:14:03,330 --> 00:14:05,090
You provide a library.

00:14:05,090 --> 00:14:07,760
And then it talks to this thing in the kernel through

00:14:07,760 --> 00:14:10,800
some mechanism here, a device.

00:14:10,800 --> 00:14:14,620
Now again, it is pretty similar to what I showed you

00:14:14,620 --> 00:14:15,880
in the previous two instances.

00:14:15,880 --> 00:14:17,360
So what is the difference?

00:14:17,360 --> 00:14:18,710
And why do we want to do this?

00:14:18,710 --> 00:14:21,980


00:14:21,980 --> 00:14:30,120
One way to think of this is that you can do this.

00:14:30,120 --> 00:14:34,360
So in the WebDAV case, the protocol they were using to

00:14:34,360 --> 00:14:37,280
talk to the kernel is kind of ad hoc.

00:14:37,280 --> 00:14:40,920
It's done only for WebDAV. Now, one could say that we can

00:14:40,920 --> 00:14:42,800
take the WebDAV code and extend it and

00:14:42,800 --> 00:14:44,060
modify it and all.

00:14:44,060 --> 00:14:46,110
But try looking at that code.

00:14:46,110 --> 00:14:48,920
It's not trivial.

00:14:48,920 --> 00:14:51,730
One could keep using NFS, modifying NFS to do that.

00:14:51,730 --> 00:14:54,150
But if you've ever worked with NFS, you will know that that's

00:14:54,150 --> 00:14:56,320
not trivial either.

00:14:56,320 --> 00:15:02,910
So lit FUSE is comparatively much, much easier.

00:15:02,910 --> 00:15:09,300
So what we're doing here is just as Vnode VFS, that

00:15:09,300 --> 00:15:13,040
concept solved the problem of accommodating multiple file

00:15:13,040 --> 00:15:18,100
systems in the kernel, what's semantically happening is that

00:15:18,100 --> 00:15:21,780
we are pushing VFS up into Userspace.

00:15:21,780 --> 00:15:23,820
But there's a critical difference.

00:15:23,820 --> 00:15:26,000
I said that the VFS is very complex.

00:15:26,000 --> 00:15:26,860
Actually, I didn't say that.

00:15:26,860 --> 00:15:28,110
But it is very complex.

00:15:28,110 --> 00:15:30,760


00:15:30,760 --> 00:15:33,270
That's one reason why you don't want to program a file

00:15:33,270 --> 00:15:36,650
system in the kernel, simply because the sheer number of

00:15:36,650 --> 00:15:38,640
things you have to do.

00:15:38,640 --> 00:15:40,970
You have to interact with so many sub-systems. You have to

00:15:40,970 --> 00:15:42,180
interact with virtual memory.

00:15:42,180 --> 00:15:43,750
You have to do buffer caching.

00:15:43,750 --> 00:15:46,440
You have to do all kinds of reference counts and locking

00:15:46,440 --> 00:15:48,010
and this and that.

00:15:48,010 --> 00:15:49,970
It is sheer torture.

00:15:49,970 --> 00:15:54,660
And there's no scope for error.

00:15:54,660 --> 00:15:56,490
So you don't want to do that.

00:15:56,490 --> 00:16:02,760
So logical next step, kind of push it into Userspace.

00:16:02,760 --> 00:16:04,660
And then we all know how to program in Userspace.

00:16:04,660 --> 00:16:05,220
It's much easier.

00:16:05,220 --> 00:16:08,840
There is a vast number of tools available, debuggers

00:16:08,840 --> 00:16:10,470
available, libraries available.

00:16:10,470 --> 00:16:12,490
You can do whatever you want.

00:16:12,490 --> 00:16:15,570
So that is sort of the idea.

00:16:15,570 --> 00:16:18,940
But when I say push VFS into Userspace, I don't mean

00:16:18,940 --> 00:16:21,210
provide the same API.

00:16:21,210 --> 00:16:22,920
You don't want to be using that API.

00:16:22,920 --> 00:16:24,960
The API's very low level.

00:16:24,960 --> 00:16:26,860
So you don't want to be dealing with those virtual

00:16:26,860 --> 00:16:30,240
nodes or Vnodes or Inodes or that rough count and whatever.

00:16:30,240 --> 00:16:32,660
You need to be doing something really, really simple.

00:16:32,660 --> 00:16:33,980
And that is the motivation here.

00:16:33,980 --> 00:16:36,810


00:16:36,810 --> 00:16:38,040
So a good idea.

00:16:38,040 --> 00:16:44,180
The other thing it does that it generalizes

00:16:44,180 --> 00:16:45,890
this thing in Userspace.

00:16:45,890 --> 00:16:48,830
But at the same time, it standardizes.

00:16:48,830 --> 00:16:52,190
Because the other two cases we saw for FTP to use NFS--

00:16:52,190 --> 00:16:55,040
for WebDAV, we use this ad hoc protocol.

00:16:55,040 --> 00:16:57,150
For something else we might use something else.

00:16:57,150 --> 00:16:59,280
But we're solving the same problem again and again.

00:16:59,280 --> 00:17:02,620
And if you want to write 100 file systems, then it's not

00:17:02,620 --> 00:17:03,690
the way to solve it.

00:17:03,690 --> 00:17:06,160
So the other thing this is doing is it's giving you a

00:17:06,160 --> 00:17:07,140
standard API.

00:17:07,140 --> 00:17:09,270
Use this, write your file system, it'll

00:17:09,270 --> 00:17:12,480
work just the same.

00:17:12,480 --> 00:17:15,430
So sounds like an obvious idea.

00:17:15,430 --> 00:17:18,124


00:17:18,124 --> 00:17:20,880
But why are we talking about it now?

00:17:20,880 --> 00:17:24,180
We said the Vnode VFS thing came out in 1984.

00:17:24,180 --> 00:17:25,650
So did nobody do it?

00:17:25,650 --> 00:17:29,030
Did nobody think of it before?

00:17:29,030 --> 00:17:30,100
Well they did.

00:17:30,100 --> 00:17:31,350
Many, many times.

00:17:31,350 --> 00:17:34,830


00:17:34,830 --> 00:17:36,520
I could talk about all of these, but it

00:17:36,520 --> 00:17:38,230
would take a few talks.

00:17:38,230 --> 00:17:41,830
So essentially, the exact same thing.

00:17:41,830 --> 00:17:44,520
And arguably, in some cases, even better ideas have been

00:17:44,520 --> 00:17:47,640
done, implemented before in academia, even as complete

00:17:47,640 --> 00:17:51,560
operating systems. But where are they?

00:17:51,560 --> 00:17:53,290
They didn't succeed for one reason or another.

00:17:53,290 --> 00:17:56,440
We're not using them today.

00:17:56,440 --> 00:17:57,610
But that's another story.

00:17:57,610 --> 00:18:02,530
And one thing is UNIX was just too relentlessly successful.

00:18:02,530 --> 00:18:07,240
So being better is not the problem or doesn't solve

00:18:07,240 --> 00:18:08,790
anything if you're not UNIX.

00:18:08,790 --> 00:18:13,280


00:18:13,280 --> 00:18:17,070
But maybe we need a little more justification as to, OK,

00:18:17,070 --> 00:18:18,450
then why is FUSE better?

00:18:18,450 --> 00:18:21,600
What did FUSE do differently?

00:18:21,600 --> 00:18:24,880
I think several things.

00:18:24,880 --> 00:18:31,180
So FUSE started as a file system shim in 1998.

00:18:31,180 --> 00:18:35,760
And the very first version came out-- actually, it came

00:18:35,760 --> 00:18:40,640
out in '98, but then it was re-christened as FUSE in 2001.

00:18:40,640 --> 00:18:44,050
And it's been developed a lot since then on Linux.

00:18:44,050 --> 00:18:49,090
So I think Linux, historically, has had a very

00:18:49,090 --> 00:18:52,480
active system level programmer and user community.

00:18:52,480 --> 00:18:56,970
So I think Linus was the right system to house it and for it

00:18:56,970 --> 00:18:58,300
to be relieved that way.

00:18:58,300 --> 00:19:00,460
So it got lots of people implemented.

00:19:00,460 --> 00:19:02,830
Another thing that happened was that the author of the

00:19:02,830 --> 00:19:07,630
original FUSE, he implemented what I think was the killer

00:19:07,630 --> 00:19:08,285
app for this.

00:19:08,285 --> 00:19:11,420
He implemented the SSH file system.

00:19:11,420 --> 00:19:14,580
And everybody just wanted it.

00:19:14,580 --> 00:19:15,960
Everybody needed it.

00:19:15,960 --> 00:19:19,630
And so everybody just adopted FUSE.

00:19:19,630 --> 00:19:22,360
And once they had it, they probably thought this is

00:19:22,360 --> 00:19:22,900
pretty easy.

00:19:22,900 --> 00:19:24,870
Let's just develop for it.

00:19:24,870 --> 00:19:28,160
Another thing that happened over time was FUSE is now in

00:19:28,160 --> 00:19:29,710
the official Linux kernel tree.

00:19:29,710 --> 00:19:30,650
It's part of the Linux kernel.

00:19:30,650 --> 00:19:33,040
So it's been like it's official.

00:19:33,040 --> 00:19:34,290
It's been blessed.

00:19:34,290 --> 00:19:37,140


00:19:37,140 --> 00:19:39,930
The other thing that happened was that people added lots of

00:19:39,930 --> 00:19:41,150
language binding.

00:19:41,150 --> 00:19:45,400
So you're not just limited to programming in C or C++.

00:19:45,400 --> 00:19:49,340
If Purl is your thing, or Python, or Java or Ruby, or

00:19:49,340 --> 00:19:52,210
whatever you have, just program in that.

00:19:52,210 --> 00:19:54,530
The point is there's a C library.

00:19:54,530 --> 00:19:56,220
So you can morph the C library.

00:19:56,220 --> 00:19:59,050
You can put any other language binding wrapper on top of it

00:19:59,050 --> 00:20:00,390
just as you can with other things.

00:20:00,390 --> 00:20:04,450
So you can write a file system, for crying out loud,

00:20:04,450 --> 00:20:06,330
in whatever language you want.

00:20:06,330 --> 00:20:09,460
And this was something unimaginable.

00:20:09,460 --> 00:20:12,160
So we have lots of hobbies programmers who are writing

00:20:12,160 --> 00:20:15,290
all kinds of file systems. And just as they would write a web

00:20:15,290 --> 00:20:17,190
page Java script thing.

00:20:17,190 --> 00:20:19,920
So pretty neat, because it's quite resilient.

00:20:19,920 --> 00:20:22,560
If you have a problem, if you make a mistake it's not going

00:20:22,560 --> 00:20:23,510
to take down your system.

00:20:23,510 --> 00:20:24,760
Or at least, that's the idea.

00:20:24,760 --> 00:20:28,660


00:20:28,660 --> 00:20:29,620
So FUSE is successful.

00:20:29,620 --> 00:20:30,470
I told you so.

00:20:30,470 --> 00:20:34,740
But maybe we should visualize it a little bit.

00:20:34,740 --> 00:20:37,240
I say FUSE is successful because it has a lot of file

00:20:37,240 --> 00:20:37,970
systems for it.

00:20:37,970 --> 00:20:39,220
People have written a lot.

00:20:39,220 --> 00:20:42,400


00:20:42,400 --> 00:20:43,650
Here are a few.

00:20:43,650 --> 00:20:46,240


00:20:46,240 --> 00:20:51,890
So at this time, there are at least 110 or 120 file systems

00:20:51,890 --> 00:20:53,500
that people have written for it.

00:20:53,500 --> 00:20:57,860
Now, not all of these might be useful for everybody.

00:20:57,860 --> 00:21:01,930
But I think everyone will find at least a few that they

00:21:01,930 --> 00:21:05,250
fancy, or few that, oh, why didn't I think of this idea?

00:21:05,250 --> 00:21:07,580
This is kind of nice.

00:21:07,580 --> 00:21:12,420
So this kind of is the background.

00:21:12,420 --> 00:21:17,080
Now, what exactly is MacFUSE and how does MacFUSE fit into

00:21:17,080 --> 00:21:18,540
the picture?

00:21:18,540 --> 00:21:22,110
So let me tell you a story.

00:21:22,110 --> 00:21:25,330


00:21:25,330 --> 00:21:28,250
I started using the Mac in 2003.

00:21:28,250 --> 00:21:31,670
And I'd been an OS programmer and had worked on lots of

00:21:31,670 --> 00:21:34,840
other systems, but not the Mac.

00:21:34,840 --> 00:21:37,930
But there's only so much you can do.

00:21:37,930 --> 00:21:39,460
Like I clicked on everything that there was

00:21:39,460 --> 00:21:41,910
to click and, OK.

00:21:41,910 --> 00:21:44,500
There's not really Linux that I can keep recompiling the

00:21:44,500 --> 00:21:46,600
kernel every day and configure the hell out of it.

00:21:46,600 --> 00:21:50,100
So what else is there to do?

00:21:50,100 --> 00:21:54,090
So started looking into how the operating system works and

00:21:54,090 --> 00:21:56,450
how the kernel works.

00:21:56,450 --> 00:21:59,275
And one thing I realized was that they didn't have a proc

00:21:59,275 --> 00:21:59,890
file system.

00:21:59,890 --> 00:22:02,210
They didn't have a process file system.

00:22:02,210 --> 00:22:03,310
It's a very UNIXy thing.

00:22:03,310 --> 00:22:07,480
It's been on most UNIX systems or UNIX-like systems.

00:22:07,480 --> 00:22:11,000
So I thought, OK, maybe this is a good thing.

00:22:11,000 --> 00:22:20,040
Let me write a proc file system for Mac OS X. I don't

00:22:20,040 --> 00:22:21,290
really like programming.

00:22:21,290 --> 00:22:24,020


00:22:24,020 --> 00:22:24,980
No, I really don't.

00:22:24,980 --> 00:22:27,870
I really like the end result.

00:22:27,870 --> 00:22:29,940
And I want the end result to be high quality.

00:22:29,940 --> 00:22:33,890
But I'll do anything to reduce the programming or find the

00:22:33,890 --> 00:22:35,480
fastest or shortest way possible.

00:22:35,480 --> 00:22:37,820
I just don't like programming.

00:22:37,820 --> 00:22:39,600
Don't hold it against me.

00:22:39,600 --> 00:22:40,850
Maybe that's why I'm a manager now.

00:22:40,850 --> 00:22:43,300


00:22:43,300 --> 00:22:48,360
So I looked at some ways of, let's see, what can be done

00:22:48,360 --> 00:22:51,180
here which would be really cheap and wouldn't require a

00:22:51,180 --> 00:22:52,830
lot of programming?

00:22:52,830 --> 00:22:57,420
So lots of people think that OS X is essentially BSD or

00:22:57,420 --> 00:22:58,620
essentially FreeBSD.

00:22:58,620 --> 00:22:59,940
Well, it's not.

00:22:59,940 --> 00:23:02,760
But that's a whole other story.

00:23:02,760 --> 00:23:07,430
So it's not FreeBSD, but it has FreeBSD heritage.

00:23:07,430 --> 00:23:11,870
So at least it's closer to BSD then let's

00:23:11,870 --> 00:23:14,940
say Windows or Linux.

00:23:14,940 --> 00:23:17,300
So BSD has a proc file system.

00:23:17,300 --> 00:23:19,390
So I started looking at the BSD proc file system.

00:23:19,390 --> 00:23:24,240
And a lot of it was generic as in it was dealing with strings

00:23:24,240 --> 00:23:25,190
and strings management.

00:23:25,190 --> 00:23:27,020
Because proc is virtual, right?

00:23:27,020 --> 00:23:29,750
So you're creating a name space, which is just a

00:23:29,750 --> 00:23:31,600
hierarchy of files and folders, which

00:23:31,600 --> 00:23:33,450
are basically strings.

00:23:33,450 --> 00:23:35,720
And then you are cooking up some content.

00:23:35,720 --> 00:23:42,080
So it had a lot of BSD kernel tie ups but still, a lot of it

00:23:42,080 --> 00:23:43,560
was generic.

00:23:43,560 --> 00:23:47,790
So I thought, let me rip it out and provide what's missing

00:23:47,790 --> 00:23:49,680
on the OS X side and we'll have a proc

00:23:49,680 --> 00:23:52,120
FS going in no time.

00:23:52,120 --> 00:23:54,070
So I spent about a couple of weeks on it.

00:23:54,070 --> 00:23:56,670
And it did mount after that.

00:23:56,670 --> 00:23:59,390
But if you're programming the kernel or if you've written

00:23:59,390 --> 00:24:02,160
any file systems, what's the first thing that happens when

00:24:02,160 --> 00:24:05,370
you mount a file system for the first time?

00:24:05,370 --> 00:24:07,670
You have a kernel panic.

00:24:07,670 --> 00:24:09,700
So I had a kernel panic.

00:24:09,700 --> 00:24:14,000
And OS X needs two machines to debug.

00:24:14,000 --> 00:24:17,060
Because there's no built-in debugger that works, like in

00:24:17,060 --> 00:24:20,100
Solaris or some other things.

00:24:20,100 --> 00:24:22,220
So I only had two Macs at that time.

00:24:22,220 --> 00:24:25,170
And around the same hour as I had the kernel panic, one of

00:24:25,170 --> 00:24:27,970
the Macs died.

00:24:27,970 --> 00:24:29,760
So I was new to Apple service.

00:24:29,760 --> 00:24:31,190
I was new to Apple and I was new to have

00:24:31,190 --> 00:24:32,650
Apple handle service.

00:24:32,650 --> 00:24:34,030
So I took it to the Apple store.

00:24:34,030 --> 00:24:36,450
And very, very impatient.

00:24:36,450 --> 00:24:38,060
Hey, I'm in the middle of a kernel panic here.

00:24:38,060 --> 00:24:38,820
I'm writing a file system.

00:24:38,820 --> 00:24:43,520
And I have to get it fixed while I have my interest in

00:24:43,520 --> 00:24:43,830
this thing.

00:24:43,830 --> 00:24:45,760
Otherwise, I'll never do it.

00:24:45,760 --> 00:24:49,360
And the Apple genius is like, yeah, did you try everything,

00:24:49,360 --> 00:24:49,940
reseting the PRAM?

00:24:49,940 --> 00:24:52,800
I'm like dude, the motherboard is fried.

00:24:52,800 --> 00:24:53,310
It's dead.

00:24:53,310 --> 00:24:54,820
You need to fix it.

00:24:54,820 --> 00:24:56,670
So they told me it will be three days.

00:24:56,670 --> 00:24:58,520
OK.

00:24:58,520 --> 00:25:02,310
Little did I know that you need to back your disk up.

00:25:02,310 --> 00:25:04,100
So the motherboard indeed died.

00:25:04,100 --> 00:25:07,030


00:25:07,030 --> 00:25:08,630
Or maybe it was the VGA cable.

00:25:08,630 --> 00:25:10,740
It was one of those two things.

00:25:10,740 --> 00:25:12,740
So they took 10 days, 15 days.

00:25:12,740 --> 00:25:14,740
I kept going to the Apple store every day.

00:25:14,740 --> 00:25:15,850
They must have thought that I really

00:25:15,850 --> 00:25:17,710
like iPods or something.

00:25:17,710 --> 00:25:19,090
They didn't fix it.

00:25:19,090 --> 00:25:20,130
It took a long time.

00:25:20,130 --> 00:25:21,750
Then they gave it back to me.

00:25:21,750 --> 00:25:24,270
And then the hard drive was busted.

00:25:24,270 --> 00:25:25,750
Like not just erased.

00:25:25,750 --> 00:25:26,620
It was busted.

00:25:26,620 --> 00:25:28,740
So they broke it.

00:25:28,740 --> 00:25:31,500
And my code's gone, too.

00:25:31,500 --> 00:25:32,280
So I took it back.

00:25:32,280 --> 00:25:35,740
So it took me like 45 days total to get the machine back.

00:25:35,740 --> 00:25:38,010
And I've never been back to proc FS.

00:25:38,010 --> 00:25:39,780
It was painful enough the first time.

00:25:39,780 --> 00:25:41,525
So yeah, forget it.

00:25:41,525 --> 00:25:44,040


00:25:44,040 --> 00:25:45,330
Why did I tell you that?

00:25:45,330 --> 00:25:47,710
Maybe it has a meaning.

00:25:47,710 --> 00:25:53,000
So one fine day a few months after I joined Google, so I

00:25:53,000 --> 00:25:56,640
was talking to my office mate.

00:25:56,640 --> 00:26:00,290
And WWDC had just ended.

00:26:00,290 --> 00:26:04,230
And we were just talking about, what do we need on OS X

00:26:04,230 --> 00:26:08,370
that it doesn't have that's really nice to have. I had

00:26:08,370 --> 00:26:09,690
thought of two things previously.

00:26:09,690 --> 00:26:13,770
One was DTrace, the tool from Sun for debugging and stuff.

00:26:13,770 --> 00:26:15,940
And the other was something like FUSE.

00:26:15,940 --> 00:26:19,160
Something that makes file system writing easier.

00:26:19,160 --> 00:26:23,470
And at WWDC Apple announced it brought DTrace to Mac OS X. So

00:26:23,470 --> 00:26:25,500
that problem's taken care of.

00:26:25,500 --> 00:26:28,390
And I'd actually asked one of their engineers or there, can

00:26:28,390 --> 00:26:32,680
you tell me, are you working on FUSE or

00:26:32,680 --> 00:26:33,350
something like that?

00:26:33,350 --> 00:26:35,520
Because if you are, please do not make me

00:26:35,520 --> 00:26:38,300
waste my time again.

00:26:38,300 --> 00:26:40,280
I can't tell you why.

00:26:40,280 --> 00:26:43,210
So they said no, we don't think so.

00:26:43,210 --> 00:26:45,470
So it looked like FUSE would be a nice thing to

00:26:45,470 --> 00:26:48,930
bring to the Mac.

00:26:48,930 --> 00:26:51,910
And Google is kind of really nice with the

00:26:51,910 --> 00:26:54,310
20% thing and all.

00:26:54,310 --> 00:26:58,490
So I didn't really know how genuine that thing is, because

00:26:58,490 --> 00:27:00,400
I worked in all kinds of places.

00:27:00,400 --> 00:27:03,390
So I wanted to take up Google on that offer that sure, 20%

00:27:03,390 --> 00:27:04,640
time, why not?

00:27:04,640 --> 00:27:06,930


00:27:06,930 --> 00:27:09,050
So OK, I thought this is a good idea.

00:27:09,050 --> 00:27:10,300
Let's do it.

00:27:10,300 --> 00:27:13,630


00:27:13,630 --> 00:27:15,340
It's always easier in hindsight to

00:27:15,340 --> 00:27:16,490
put down your goals.

00:27:16,490 --> 00:27:17,140
These were the goals.

00:27:17,140 --> 00:27:20,100
So you can't really tell if I actually had these goals.

00:27:20,100 --> 00:27:24,020
But I'm saying I had these goals.

00:27:24,020 --> 00:27:29,410
So the goals were, whether you're a user or a programmer,

00:27:29,410 --> 00:27:31,950
if you want to write a file system or use a file system,

00:27:31,950 --> 00:27:33,370
it should be easy.

00:27:33,370 --> 00:27:35,760
Like in the case of proc FS, I should be able to write a file

00:27:35,760 --> 00:27:37,060
system on impulse.

00:27:37,060 --> 00:27:39,340
If I want to write one, I should be able to write one.

00:27:39,340 --> 00:27:42,510
It shouldn't take like five months of preparatory work

00:27:42,510 --> 00:27:44,340
just to write a file system.

00:27:44,340 --> 00:27:46,050
That's one thing.

00:27:46,050 --> 00:27:49,860
The other thing is there are things missing on Mac OS X

00:27:49,860 --> 00:27:53,270
that would be really nice to have. SSHFS is one thing.

00:27:53,270 --> 00:27:55,240
And DFS that you can write to is one thing.

00:27:55,240 --> 00:27:57,560
FTP that you can write to is one thing.

00:27:57,560 --> 00:28:00,630
For some things like FTP and SSH, sure, you can find

00:28:00,630 --> 00:28:01,910
products that do that.

00:28:01,910 --> 00:28:06,060
But it's not transparent, seamless support, because that

00:28:06,060 --> 00:28:07,650
only happens in the product.

00:28:07,650 --> 00:28:09,690
It's not like any application can make use of it.

00:28:09,690 --> 00:28:12,670
It's not a real file system.

00:28:12,670 --> 00:28:15,480
So it'd be really nice to have a few more file systems on OS

00:28:15,480 --> 00:28:19,610
X, whatever one needs.

00:28:19,610 --> 00:28:21,990
The other thing is I'm quite impressed or have been quite

00:28:21,990 --> 00:28:26,720
impressed with the kind of products the Mac developer

00:28:26,720 --> 00:28:27,610
community creates.

00:28:27,610 --> 00:28:31,160
It's like so much attention to detail and

00:28:31,160 --> 00:28:32,820
very different from--

00:28:32,820 --> 00:28:34,400
so it's good and bad.

00:28:34,400 --> 00:28:35,810
I'll not talk about the bad.

00:28:35,810 --> 00:28:41,440
But the good part is that they're a joy to see and use

00:28:41,440 --> 00:28:43,890
and look forward to new ones.

00:28:43,890 --> 00:28:49,560
So if I did something that gave developers, innovative

00:28:49,560 --> 00:28:54,240
developers, a really powerful tool, it's pretty exciting to

00:28:54,240 --> 00:28:56,000
think, what would they do with it?

00:28:56,000 --> 00:28:58,190
So that was one of the things.

00:28:58,190 --> 00:29:02,370
And I talked about cheapness and not wanting to do

00:29:02,370 --> 00:29:03,480
programming and whatnot.

00:29:03,480 --> 00:29:07,690
So I just showed you that FUSE had a lot of file systems. So

00:29:07,690 --> 00:29:11,310
if we stuck to the same API, or pretty much the same API,

00:29:11,310 --> 00:29:13,760
then we should be able to use most of them.

00:29:13,760 --> 00:29:16,840
So that's another thing.

00:29:16,840 --> 00:29:19,870
Another goal, which is not just for MacFUSE, it's in

00:29:19,870 --> 00:29:26,860
general that I personally have is that if something that

00:29:26,860 --> 00:29:32,360
solves 95% of the problem or 95% of the people's problem,

00:29:32,360 --> 00:29:34,560
worse is something that solves everybody's problem.

00:29:34,560 --> 00:29:37,090
It takes ten times more work.

00:29:37,090 --> 00:29:41,170
So I usually try to draw that line.

00:29:41,170 --> 00:29:44,630
And if there are compromises to be made, that if I did

00:29:44,630 --> 00:29:47,000
that, I'd make that one guy in Iceland happy.

00:29:47,000 --> 00:29:51,380


00:29:51,380 --> 00:29:53,190
If it took me another six months, then I would rather

00:29:53,190 --> 00:29:55,250
release it without making the Icelandic guy happy.

00:29:55,250 --> 00:29:59,270
And just talk to the guy offline and tell him that it's

00:29:59,270 --> 00:30:01,740
not for you.

00:30:01,740 --> 00:30:02,950
I have lots of Icelandic friends.

00:30:02,950 --> 00:30:04,480
That's why it popped up.

00:30:04,480 --> 00:30:07,460


00:30:07,460 --> 00:30:09,780
And the other thing is that when I say that give

00:30:09,780 --> 00:30:11,290
developers powerful tools--

00:30:11,290 --> 00:30:15,330
the other thing is that you shouldn't have to be a

00:30:15,330 --> 00:30:18,310
research scientist. Or you shouldn't have to know like

00:30:18,310 --> 00:30:21,270
file system theory inside out.

00:30:21,270 --> 00:30:23,080
You shouldn't have to recompile your kernel.

00:30:23,080 --> 00:30:26,560
You shouldn't have to replace core system components.

00:30:26,560 --> 00:30:28,380
You shouldn't have to lose your data or

00:30:28,380 --> 00:30:29,690
have a kernel panic.

00:30:29,690 --> 00:30:33,040
So when I say powerful tools, it also means very convenient

00:30:33,040 --> 00:30:36,930
tools that don't do any of that.

00:30:36,930 --> 00:30:39,270
And of course, not limited to any programming language.

00:30:39,270 --> 00:30:42,410
You use whatever you want to use.

00:30:42,410 --> 00:30:43,310
So these were the goals.

00:30:43,310 --> 00:30:46,070
And now that we know what the goals were, so how does one

00:30:46,070 --> 00:30:51,040
start an undertaking like this, because it's quite huge.

00:30:51,040 --> 00:30:52,550
The actual work involved is a lot.

00:30:52,550 --> 00:30:56,220


00:30:56,220 --> 00:30:59,510
So I have a few techniques for doing something like this.

00:30:59,510 --> 00:31:07,650


00:31:07,650 --> 00:31:09,270
So here's an example.

00:31:09,270 --> 00:31:11,180
So I had a project like this--

00:31:11,180 --> 00:31:15,410
well, not exactly like this-- but I had a pretty big project

00:31:15,410 --> 00:31:18,680
for the last couple of years that also needed a lot of

00:31:18,680 --> 00:31:20,850
analysis and work and programming and this and that.

00:31:20,850 --> 00:31:25,334


00:31:25,334 --> 00:31:28,060
So here's a picture, a war picture from the project.

00:31:28,060 --> 00:31:35,000


00:31:35,000 --> 00:31:38,680
So on the right, we have a Power Mac.

00:31:38,680 --> 00:31:44,780
And on the left, we have a stack of papers which contain

00:31:44,780 --> 00:31:49,930
the notes that I made when I wrote the Mac OS X book, and

00:31:49,930 --> 00:31:52,170
also, the papers that are read on the subject.

00:31:52,170 --> 00:31:54,980
So essentially that's the research work.

00:31:54,980 --> 00:32:00,070
And the condensed result of this work is in this tiny

00:32:00,070 --> 00:32:03,870
book, relatively speaking.

00:32:03,870 --> 00:32:09,960
So that's kind of the approach I used that one could say that

00:32:09,960 --> 00:32:14,630
1% inspiration and 60% preparation and 39%

00:32:14,630 --> 00:32:15,660
perspiration.

00:32:15,660 --> 00:32:18,460
But preparation is huge.

00:32:18,460 --> 00:32:20,490
And it especially helps in that short

00:32:20,490 --> 00:32:22,560
circuiting and waiting.

00:32:22,560 --> 00:32:26,160


00:32:26,160 --> 00:32:28,360
So we have lots of these giant plotter

00:32:28,360 --> 00:32:30,440
printers here at Google.

00:32:30,440 --> 00:32:35,300
So I went to one of those and I got a few sheets like these.

00:32:35,300 --> 00:32:39,050
And this is actually the overflow sheet.

00:32:39,050 --> 00:32:41,020
I can't find the original.

00:32:41,020 --> 00:32:44,820
And what I decided was that the obvious thing to do here

00:32:44,820 --> 00:32:49,260
is to take whatever FUSE implementations are out there,

00:32:49,260 --> 00:32:52,310
Linux and FreeBSD, and kind of create a

00:32:52,310 --> 00:32:53,820
software map of the thing.

00:32:53,820 --> 00:32:57,530
Because if you don't even understand what you're trying

00:32:57,530 --> 00:32:59,580
to implement, because it's not a public standard so there's

00:32:59,580 --> 00:33:02,830
no published specification, so it's just some complex piece

00:33:02,830 --> 00:33:04,940
of software, you got to figure it out.

00:33:04,940 --> 00:33:06,730
You have an intuitive idea of how it works.

00:33:06,730 --> 00:33:08,030
But first you need to know how it works.

00:33:08,030 --> 00:33:10,600
And then you need to map it to your platform.

00:33:10,600 --> 00:33:14,430


00:33:14,430 --> 00:33:20,590
With that, so I guess I can talk about like a block

00:33:20,590 --> 00:33:23,540
diagram of what MacFUSE is and then how it went about filling

00:33:23,540 --> 00:33:26,100
those pieces in.

00:33:26,100 --> 00:33:29,640
So here's a very simplified picture of what MacFUSE can be

00:33:29,640 --> 00:33:31,740
thought of as.

00:33:31,740 --> 00:33:37,180
So the simplest delineation is that there's some stuff in

00:33:37,180 --> 00:33:40,790
user space and then there's stuff in the kernel.

00:33:40,790 --> 00:33:43,950
So the stuff in the kernel at the bottom.

00:33:43,950 --> 00:33:47,800
And the stuff in the kernel really is a

00:33:47,800 --> 00:33:50,700
complete file system.

00:33:50,700 --> 00:33:53,060
So when you're writing something like this, well, an

00:33:53,060 --> 00:33:55,770
obvious goal is I really want to have something mounting

00:33:55,770 --> 00:33:58,930
first. Maybe I just want like a trivial hello world kind of

00:33:58,930 --> 00:34:01,590
thing mounting.

00:34:01,590 --> 00:34:05,650
But the catch is that whether you're mounting hello world or

00:34:05,650 --> 00:34:11,469
whether you are actually doing a lot of other stuff, most of

00:34:11,469 --> 00:34:12,980
the requirements are pretty much the same.

00:34:12,980 --> 00:34:16,300
You actually need to have a lot of this stuff in place for

00:34:16,300 --> 00:34:18,460
anything to work, even if it's a hello world thing.

00:34:18,460 --> 00:34:20,360
Because this is not something--

00:34:20,360 --> 00:34:21,219
this is a file system.

00:34:21,219 --> 00:34:24,750
So the kernel doesn't know that your intentions are not

00:34:24,750 --> 00:34:27,070
so evil and all you're trying to do is just

00:34:27,070 --> 00:34:28,110
write a file system.

00:34:28,110 --> 00:34:31,239
So it won't let you get away with anything incomplete.

00:34:31,239 --> 00:34:34,830
You still need to put in a lot of work.

00:34:34,830 --> 00:34:37,710
With that, number one is essentially the file system,

00:34:37,710 --> 00:34:39,280
the operations on this file system--

00:34:39,280 --> 00:34:44,800
deleting, creating, reading a directory, renaming.

00:34:44,800 --> 00:34:46,315
There's actually a lot of these.

00:34:46,315 --> 00:34:48,800
It's like 50 or so.

00:34:48,800 --> 00:34:53,159
So I decided to implement almost all of them.

00:34:53,159 --> 00:34:56,730
Because I knew that whenever I have something more complex

00:34:56,730 --> 00:34:59,150
going on, I will need more of these.

00:34:59,150 --> 00:35:01,240
So it's just better to have a more solid

00:35:01,240 --> 00:35:02,960
foundation to begin with.

00:35:02,960 --> 00:35:07,270
So I just spent some time, probably about 10 days or so,

00:35:07,270 --> 00:35:09,660
just writing the thing at the bottom.

00:35:09,660 --> 00:35:12,550
So that when this was done, what we have is a file system

00:35:12,550 --> 00:35:13,670
that does nothing.

00:35:13,670 --> 00:35:14,655
But it has all the operations.

00:35:14,655 --> 00:35:15,980
They're pretty much stubbed out.

00:35:15,980 --> 00:35:18,970


00:35:18,970 --> 00:35:23,350
Then you need to have this thing talking to Userspace.

00:35:23,350 --> 00:35:25,680
So you need a communication channel.

00:35:25,680 --> 00:35:30,260
So Mac OS X is rich in that you can do this multiple ways.

00:35:30,260 --> 00:35:33,220
You can do this through the I/O kit.

00:35:33,220 --> 00:35:36,070
Or you can do it in a BSD style fashion.

00:35:36,070 --> 00:35:38,690
So one of the code bases I was using for reference, which is

00:35:38,690 --> 00:35:43,350
the FreeBSD implementation of FUSE, it used the UNIX style

00:35:43,350 --> 00:35:46,730
slash DAV device communication.

00:35:46,730 --> 00:35:50,140
Basically, you open a device and you read and write to it.

00:35:50,140 --> 00:35:54,710
So I want to save time so I decided to use this code as a

00:35:54,710 --> 00:35:57,690
guideline and save some time that we.

00:35:57,690 --> 00:36:02,540
Even though, in the case of Mac OS X, there may be cleaner

00:36:02,540 --> 00:36:03,090
ways to do it.

00:36:03,090 --> 00:36:05,160
But hey, that's the tired and trusted way. so.

00:36:05,160 --> 00:36:08,730
the BSD implementation was especially handy.

00:36:08,730 --> 00:36:14,220
And then I started to look at a user level stuff.

00:36:14,220 --> 00:36:16,410
Because once this thing is done.

00:36:16,410 --> 00:36:17,630
so we have a file system.

00:36:17,630 --> 00:36:19,650
It's got everything in there.

00:36:19,650 --> 00:36:20,720
All the operations are there.

00:36:20,720 --> 00:36:22,920
And it knows how to talk to something in user space.

00:36:22,920 --> 00:36:25,690
But we have nothing in user space, yet.

00:36:25,690 --> 00:36:28,650
So libfuse, that's the FUSE library.

00:36:28,650 --> 00:36:31,210
That comes from Linux.

00:36:31,210 --> 00:36:33,500
One would assume that's since it's a user space library,

00:36:33,500 --> 00:36:35,210
it's quite portable.

00:36:35,210 --> 00:36:38,190
It is actually reasonably portable.

00:36:38,190 --> 00:36:39,980
It's one of my pet peeves when people say porting.

00:36:39,980 --> 00:36:43,130


00:36:43,130 --> 00:36:44,470
What do they actually mean?

00:36:44,470 --> 00:36:47,680
So my definition of porting is, you take a code base.

00:36:47,680 --> 00:36:50,510
It's really portable., because it just uses C and the

00:36:50,510 --> 00:36:53,250
standard C headers or something pretty common.

00:36:53,250 --> 00:36:56,280
You take t to some other machine, you compile it.

00:36:56,280 --> 00:36:57,820
Probably it'll just work.

00:36:57,820 --> 00:36:59,740
If it doesn't, oh, this doesn't have this header.

00:36:59,740 --> 00:37:01,850
You make some few changes and it works.

00:37:01,850 --> 00:37:09,010
Now, if you take next step and you change it into Max OS X--

00:37:09,010 --> 00:37:10,250
no, or even worse.

00:37:10,250 --> 00:37:14,230
Is Mac OS X a port BSD?

00:37:14,230 --> 00:37:16,290
No.

00:37:16,290 --> 00:37:19,580
But I wouldn't be surprised if people call it that.

00:37:19,580 --> 00:37:21,800
So the kernel part is not a port.

00:37:21,800 --> 00:37:24,060
It can't be ported There's just too many differences.

00:37:24,060 --> 00:37:27,420
But I really expected the Userspace part to be portable.

00:37:27,420 --> 00:37:29,600
And actually, it was for the most part.

00:37:29,600 --> 00:37:32,490
But Mac OS X can be quite sneaky.

00:37:32,490 --> 00:37:35,920
There are things that work or work a certain, a certain way

00:37:35,920 --> 00:37:38,870
being what's in the POSIX standard on Linux.

00:37:38,870 --> 00:37:43,100
They don't work the same way on Mac OS X. So things like if

00:37:43,100 --> 00:37:45,460
you want POSIX semaphores, they will not

00:37:45,460 --> 00:37:46,400
work the same way.

00:37:46,400 --> 00:37:48,890
Sure you can have mock semaphores instead, but you

00:37:48,890 --> 00:37:50,780
have to change them.

00:37:50,780 --> 00:37:54,470
You have to change the calls and do whatever.

00:37:54,470 --> 00:37:57,120
Pthreads, pretty common programming interface.

00:37:57,120 --> 00:38:00,460
Pthreads may not work exactly the same way on Mac OS X as

00:38:00,460 --> 00:38:01,760
you might expect, especially if you are

00:38:01,760 --> 00:38:04,910
canceling and stuff.

00:38:04,910 --> 00:38:07,620
So there were a few hiccups like this with the library.

00:38:07,620 --> 00:38:12,740
But after changing this, it kind of just worked, meaning I

00:38:12,740 --> 00:38:16,630
could compile it at least. And then mounting works

00:38:16,630 --> 00:38:19,950
differently on OS X. So you can use the mount program,

00:38:19,950 --> 00:38:23,250
which, if you're calling the Finder or something, somebody

00:38:23,250 --> 00:38:25,750
eventually has to call this utility called mount or the

00:38:25,750 --> 00:38:28,310
system called mount to mount a file system.

00:38:28,310 --> 00:38:30,690
Now, that's different on OS X versus Linux.

00:38:30,690 --> 00:38:34,320
And actually, reasonably different from previous SD2.

00:38:34,320 --> 00:38:35,760
So those are a couple of tools.

00:38:35,760 --> 00:38:37,800
Load FUSE FS is going to load the file

00:38:37,800 --> 00:38:39,350
system kernel extension.

00:38:39,350 --> 00:38:41,380
Mount FUSE FS is going to mount it.

00:38:41,380 --> 00:38:45,270
So once I had most of these things done--

00:38:45,270 --> 00:38:47,660
the thing is that there's a 10 day period

00:38:47,660 --> 00:38:49,010
that I don't remember.

00:38:49,010 --> 00:38:50,780
Because that's one of the things that Ted mentioned.

00:38:50,780 --> 00:38:53,990
I think I was in the zombie mode.

00:38:53,990 --> 00:38:55,970
I know I was trying to get it to work.

00:38:55,970 --> 00:38:58,000
I don't really remember the timeline.

00:38:58,000 --> 00:39:02,190
But suffice it to say that it did work after that, like I

00:39:02,190 --> 00:39:03,410
could mount the hello thing.

00:39:03,410 --> 00:39:05,800
And then after a few more days, I could

00:39:05,800 --> 00:39:06,920
mount the SSH thing.

00:39:06,920 --> 00:39:09,400
And I went all right, this is fine, this will work.

00:39:09,400 --> 00:39:13,900


00:39:13,900 --> 00:39:16,340
Then we released the set up.

00:39:16,340 --> 00:39:19,060
Oh yeah, and so once I did this--

00:39:19,060 --> 00:39:21,450
so remember, I'm trying to do this as a 20% thing.

00:39:21,450 --> 00:39:26,100
But then 20% is only so much, so it becomes a lot.

00:39:26,100 --> 00:39:28,700


00:39:28,700 --> 00:39:29,870
But what to do with it?

00:39:29,870 --> 00:39:32,730
So one of my goals I didn't actually say in my goals, but

00:39:32,730 --> 00:39:37,380
I really wanted this thing to be open source.

00:39:37,380 --> 00:39:40,420
Simply because I think that's the right way to do it.

00:39:40,420 --> 00:39:42,170
I'm not saying it as an open source zealot.

00:39:42,170 --> 00:39:44,910


00:39:44,910 --> 00:39:48,700
I looked at lots of the open source stuff while I did this.

00:39:48,700 --> 00:39:50,640
For some of this stuff, I reused some of

00:39:50,640 --> 00:39:52,160
the open source stuff.

00:39:52,160 --> 00:39:55,290
So even if the license permits me not to open source it, I

00:39:55,290 --> 00:39:58,760
personally feel that it's just best to share it.

00:39:58,760 --> 00:40:01,750
And if somebody else wants to go through the pain, at least

00:40:01,750 --> 00:40:04,420
they should either not go through it or they have like a

00:40:04,420 --> 00:40:06,260
guiding thing.

00:40:06,260 --> 00:40:10,360
So it was surprisingly easy at Google to open source it.

00:40:10,360 --> 00:40:15,180
I just asked my boss, hey, so this is the thing we have. And

00:40:15,180 --> 00:40:17,780
I was expecting a very bureaucratic, like some

00:40:17,780 --> 00:40:21,210
meetings will be called and the code will be done and I'll

00:40:21,210 --> 00:40:24,860
be asked how many licenses you have and where did this code

00:40:24,860 --> 00:40:27,360
come from and this and that.

00:40:27,360 --> 00:40:30,330
They said sure.

00:40:30,330 --> 00:40:31,490
Is that it?

00:40:31,490 --> 00:40:32,600
Yeah.

00:40:32,600 --> 00:40:32,910
You're kidding me?

00:40:32,910 --> 00:40:34,690
No.

00:40:34,690 --> 00:40:35,890
OK, so great.

00:40:35,890 --> 00:40:38,240
So Google was very, very helpful and supportive.

00:40:38,240 --> 00:40:40,790
So all it took was just telling my boss that I need to

00:40:40,790 --> 00:40:42,040
open source it.

00:40:42,040 --> 00:40:44,950


00:40:44,950 --> 00:40:47,400
Again, I'll use lines of code as some

00:40:47,400 --> 00:40:49,090
sort of progress indicator.

00:40:49,090 --> 00:40:53,270
Again, it's kind of sometimes progress is when you remove

00:40:53,270 --> 00:40:53,940
lines of code.

00:40:53,940 --> 00:40:56,930
And in fact, often removing is good.

00:40:56,930 --> 00:41:00,050
But this is kind of the timeline.

00:41:00,050 --> 00:41:01,910
Right now, we are at version 0.3.

00:41:01,910 --> 00:41:04,680


00:41:04,680 --> 00:41:09,070
We're seeing another issue, like why 0.3 and why not 1.3.

00:41:09,070 --> 00:41:10,900
There's another thing with open source projects is that

00:41:10,900 --> 00:41:12,750
they remain at like sub-decimal

00:41:12,750 --> 00:41:13,970
versions for the lifetime.

00:41:13,970 --> 00:41:16,690
But let's talk about that some other time.

00:41:16,690 --> 00:41:21,600
So we released it around at Macworld in January.

00:41:21,600 --> 00:41:24,740
And since then, the blue thing is the user space code.

00:41:24,740 --> 00:41:26,820
So you'll see that the user space code hasn't really

00:41:26,820 --> 00:41:27,820
changed much.

00:41:27,820 --> 00:41:30,190
But the kernel space code keeps

00:41:30,190 --> 00:41:32,080
getting bigger and bigger.

00:41:32,080 --> 00:41:39,140
Although, at least the slope, the rate is slowing down at

00:41:39,140 --> 00:41:40,510
least.

00:41:40,510 --> 00:41:43,815
So now let's go back to the other slide we had.

00:41:43,815 --> 00:41:48,280


00:41:48,280 --> 00:41:51,350
So with this, where does MacFUSE fit?

00:41:51,350 --> 00:41:54,660
Like I said, it's a kernel file system.

00:41:54,660 --> 00:41:57,890
Well, it's kind of like this big.

00:41:57,890 --> 00:42:03,920
And since we talked about ancient UNIX in the beginning.

00:42:03,920 --> 00:42:05,450
So these are the file system sizes.

00:42:05,450 --> 00:42:08,056
This is the size of the MacFUSE file system.

00:42:08,056 --> 00:42:14,640
This is the size of the entire UNIX kernel in 1974--

00:42:14,640 --> 00:42:17,356
the whole operating system.

00:42:17,356 --> 00:42:19,570
So times change.

00:42:19,570 --> 00:42:23,360


00:42:23,360 --> 00:42:26,390
OK, so this tells you that the kernel part of this, but what

00:42:26,390 --> 00:42:28,630
does it do for you as a developer?

00:42:28,630 --> 00:42:31,140
So do you save anything?

00:42:31,140 --> 00:42:31,970
Do you save effort?

00:42:31,970 --> 00:42:33,555
I talked about all those goals and promises.

00:42:33,555 --> 00:42:36,150


00:42:36,150 --> 00:42:39,200
OK, let's say if you were to write a file system in the

00:42:39,200 --> 00:42:42,390
kernel, if you did decide to go through all that pain and

00:42:42,390 --> 00:42:47,250
suffering and lose your data possibly and write a file

00:42:47,250 --> 00:42:49,800
system that just did hello world--

00:42:49,800 --> 00:42:53,620
the file system has just one file contains hello world--

00:42:53,620 --> 00:42:56,530
this would be the size of it.

00:42:56,530 --> 00:42:58,530
Well, it has to be relative to something.

00:42:58,530 --> 00:43:00,980
And then you did the same thing in MacFUSE.

00:43:00,980 --> 00:43:02,780
What would be the size of it?

00:43:02,780 --> 00:43:05,600
So here's a comparison.

00:43:05,600 --> 00:43:06,420
So that would be the size of it.

00:43:06,420 --> 00:43:09,360
That looks pretty good, huh?

00:43:09,360 --> 00:43:12,230
But hello world is trivial.

00:43:12,230 --> 00:43:15,530
But like I said, one should be able to write file systems

00:43:15,530 --> 00:43:16,960
impulsively.

00:43:16,960 --> 00:43:20,970
Let's say that you have a product or a project where,

00:43:20,970 --> 00:43:25,370
for what ever reason, you need a 128 terabyte file.

00:43:25,370 --> 00:43:28,020
You're writing a backup software tool or something.

00:43:28,020 --> 00:43:31,400
And you want to see how it behaves if it encountered a

00:43:31,400 --> 00:43:33,250
128 terabyte file.

00:43:33,250 --> 00:43:35,900
Sure, you can try creating one.

00:43:35,900 --> 00:43:39,060
It'll take a long time and a lot of space.

00:43:39,060 --> 00:43:41,280
But with MacFUSE--

00:43:41,280 --> 00:43:44,250


00:43:44,250 --> 00:43:48,300
so what you could do is that you could quickly zip out a

00:43:48,300 --> 00:43:51,320
file system that just has one file.

00:43:51,320 --> 00:43:53,980
And since you are writing the file system, you can just

00:43:53,980 --> 00:43:58,960
claim that the size of the file is 128 terabytes.

00:43:58,960 --> 00:44:01,010
Now, what happens when the backup software or whatever

00:44:01,010 --> 00:44:03,590
you're testing wants to read the file?

00:44:03,590 --> 00:44:05,500
Well, the way operating systems work and the way the

00:44:05,500 --> 00:44:09,470
kernel works is in your read routine implementation and the

00:44:09,470 --> 00:44:12,230
callback that you will get when somebody tries to read

00:44:12,230 --> 00:44:15,930
it, you can just say return zero, which means you have no

00:44:15,930 --> 00:44:17,240
data for this file.

00:44:17,240 --> 00:44:21,250
And what the kernel will then do, or MacFUSE will then do,

00:44:21,250 --> 00:44:26,190
is that it will zero fill the data, because the file system

00:44:26,190 --> 00:44:28,730
failed to provide the data.

00:44:28,730 --> 00:44:30,300
The data has to come from somewhere.

00:44:30,300 --> 00:44:32,760
So you will just get an endless stream of bytes coming

00:44:32,760 --> 00:44:35,060
from the kernel without you doing anything.

00:44:35,060 --> 00:44:39,350
And in fact, the entire code for such a file system can be

00:44:39,350 --> 00:44:41,800
represented on the screen.

00:44:41,800 --> 00:44:42,790
It's kind of small.

00:44:42,790 --> 00:44:44,950
I had to make it fit.

00:44:44,950 --> 00:44:47,050
But that is it.

00:44:47,050 --> 00:44:53,360
You do that and you have a 128 terabyte file.

00:44:53,360 --> 00:44:57,885
Still, there's FUSE, there's FUSE for BSD, there's MacFUSE.

00:44:57,885 --> 00:45:00,820


00:45:00,820 --> 00:45:03,080
So hopefully, it is clear.

00:45:03,080 --> 00:45:08,110
And if it's not, let me spell it out again that there's a

00:45:08,110 --> 00:45:12,130
specification or a protocol or an understanding or an API

00:45:12,130 --> 00:45:16,070
call to FUSE, which is these are the messages or this is

00:45:16,070 --> 00:45:18,710
the communication you will have between user and kernel.

00:45:18,710 --> 00:45:20,290
And each OS is free to implement

00:45:20,290 --> 00:45:22,190
however they want it.

00:45:22,190 --> 00:45:26,190
Now, MacFUSE tried to stay very close to the FUSE API,

00:45:26,190 --> 00:45:28,530
simply because it's good compatibility-wise.

00:45:28,530 --> 00:45:33,920
We want to reuse all file systems. But the platform is

00:45:33,920 --> 00:45:34,820
completely different.

00:45:34,820 --> 00:45:36,810
Mac OS X is not Linux.

00:45:36,810 --> 00:45:42,410
So there's got to be some differences and different

00:45:42,410 --> 00:45:42,870
challenges.

00:45:42,870 --> 00:45:44,660
Like different challenges for me as an

00:45:44,660 --> 00:45:47,240
implementer of this thing.

00:45:47,240 --> 00:45:52,660
So on the good side, we can also have features that are

00:45:52,660 --> 00:45:56,600
specific to OS X and maybe Linux FUSE doesn't have.

00:45:56,600 --> 00:45:58,560
So what are some of those things?

00:45:58,560 --> 00:46:03,100
Let me talk about some of these challenges.

00:46:03,100 --> 00:46:06,930
So one of the big challenges is that OS

00:46:06,930 --> 00:46:10,170
X is a closed system.

00:46:10,170 --> 00:46:12,260
Wait, Darwin is open source.

00:46:12,260 --> 00:46:15,700
Well, I don't really mean that I can see the source.

00:46:15,700 --> 00:46:17,440
Sure, I can see the source.

00:46:17,440 --> 00:46:22,230
But the way the system is set up, the way the user base is,

00:46:22,230 --> 00:46:27,360
the way people's expectations are, let's say that the kernel

00:46:27,360 --> 00:46:28,970
doesn't do something right.

00:46:28,970 --> 00:46:32,880
Or doesn't do something probably that's OK for the

00:46:32,880 --> 00:46:35,830
built-in file systems, but it's not OK for new file

00:46:35,830 --> 00:46:38,170
systems or not OK for MacFUSE.

00:46:38,170 --> 00:46:40,460
And I know that if you change that one line

00:46:40,460 --> 00:46:43,360
there, it's all good.

00:46:43,360 --> 00:46:45,320
It'll work for both.

00:46:45,320 --> 00:46:47,970
But can I change that one line?

00:46:47,970 --> 00:46:49,310
No.

00:46:49,310 --> 00:46:52,190
If I talk to Apple--

00:46:52,190 --> 00:46:55,870
I don't know how, but let's say I send somebody an email.

00:46:55,870 --> 00:46:58,160
Dear Steve, can you please change this?

00:46:58,160 --> 00:46:59,330
You think that's going to happen?

00:46:59,330 --> 00:47:02,010
No.

00:47:02,010 --> 00:47:03,470
Which means I have to figure it out somehow.

00:47:03,470 --> 00:47:05,010
I have to work around it.

00:47:05,010 --> 00:47:08,270
I have to do something.

00:47:08,270 --> 00:47:14,990
A very, very good example of this is that

00:47:14,990 --> 00:47:16,310
when something opens--

00:47:16,310 --> 00:47:19,180
so let's say you wrote a FUSE file system.

00:47:19,180 --> 00:47:20,370
It works with MacFUSE.

00:47:20,370 --> 00:47:22,130
It works with Linux FUSE.

00:47:22,130 --> 00:47:26,660
And in your file systems, you want to be able to receive an

00:47:26,660 --> 00:47:30,850
open callback when anybody opens a file in the kernel.

00:47:30,850 --> 00:47:31,470
So great.

00:47:31,470 --> 00:47:34,060
That's how FUSE works.

00:47:34,060 --> 00:47:38,460
Whenever the open system call is called, FUSE calls out to

00:47:38,460 --> 00:47:41,340
Userspace and tells your file system that hey,

00:47:41,340 --> 00:47:42,060
there's an open call.

00:47:42,060 --> 00:47:44,580
Please handle it.

00:47:44,580 --> 00:47:48,240
Now, the FUSE API also has this thing

00:47:48,240 --> 00:47:50,990
called per open context.

00:47:50,990 --> 00:47:55,450
So every open, you can decide to like stash some context

00:47:55,450 --> 00:47:58,860
information, your own data, somewhere.

00:47:58,860 --> 00:48:03,270
And then in close, you can remove it, deallocate it.

00:48:03,270 --> 00:48:07,400
But for this to work, you must receive all opens and closes.

00:48:07,400 --> 00:48:10,120
Otherwise, there's going to be a mismatch.

00:48:10,120 --> 00:48:14,460
Now, this is fine on Linux because Linux kernel is very

00:48:14,460 --> 00:48:15,680
file-centric.

00:48:15,680 --> 00:48:21,070
The file system in the kernel actually knows that if you're

00:48:21,070 --> 00:48:23,820
opening the same file 10 times, they're receiving these

00:48:23,820 --> 00:48:26,300
open calls and it knows that this is this file descriptor,

00:48:26,300 --> 00:48:29,060
this is this file descriptor.

00:48:29,060 --> 00:48:30,620
The same way on FreeBSD.

00:48:30,620 --> 00:48:34,140
Even though it's Vnode VFS, the file descriptors actually

00:48:34,140 --> 00:48:35,660
pass to the file system.

00:48:35,660 --> 00:48:37,480
So you can use the file descriptor as the

00:48:37,480 --> 00:48:42,130
distinguishing discriminate and figure out what to do.

00:48:42,130 --> 00:48:50,470
In OS X, MacFUSE will receive every open, but you won't know

00:48:50,470 --> 00:48:52,730
which file descriptor it's for.

00:48:52,730 --> 00:48:57,180
So I will receive every open and I'll receive every close.

00:48:57,180 --> 00:49:00,730
But I can't match the closers to the opens, because I was

00:49:00,730 --> 00:49:04,690
not given any further information as to which

00:49:04,690 --> 00:49:07,500
instance of this file open was this.

00:49:07,500 --> 00:49:09,650
Which means you can't do this.

00:49:09,650 --> 00:49:12,270
You can't forward every call to Userspace, because you

00:49:12,270 --> 00:49:14,270
won't know which one to release.

00:49:14,270 --> 00:49:18,630
Now, what is a pragmatic way to solve this?

00:49:18,630 --> 00:49:21,440
Well, a pragmatic way to solve this is that don't send every

00:49:21,440 --> 00:49:25,250
call to Userspace of open, for the same file I mean.

00:49:25,250 --> 00:49:27,080
Of course, for each file, you'll

00:49:27,080 --> 00:49:28,600
send a call to Userspace.

00:49:28,600 --> 00:49:31,410
But let's say you're opening the same file five times.

00:49:31,410 --> 00:49:35,910
So the way it's solved in MacFUSE is that there can be a

00:49:35,910 --> 00:49:37,500
few different types of opens.

00:49:37,500 --> 00:49:39,740
Opening for reading, opening for writing, opening for

00:49:39,740 --> 00:49:41,390
reading and writing.

00:49:41,390 --> 00:49:43,630
So MacFUSE differentiates between these

00:49:43,630 --> 00:49:45,680
three types of opens.

00:49:45,680 --> 00:49:47,680
An open receives these flags so it knows what

00:49:47,680 --> 00:49:49,080
kind of open it is.

00:49:49,080 --> 00:49:51,430
So let's say a file is not open at all.

00:49:51,430 --> 00:49:53,390
I get the first call to open.

00:49:53,390 --> 00:49:55,600
OK, I send it to Userspace.

00:49:55,600 --> 00:49:56,960
I get a handle back.

00:49:56,960 --> 00:49:58,100
I get this pointer.

00:49:58,100 --> 00:49:59,970
I remember this pointer because then I have to give it

00:49:59,970 --> 00:50:03,460
to reads and all the other calls as context.

00:50:03,460 --> 00:50:08,170
Now, another call comes for read for the same file.

00:50:08,170 --> 00:50:09,990
I don't have to send it to Userspace.

00:50:09,990 --> 00:50:13,560
I just reuse the one I have for read.

00:50:13,560 --> 00:50:15,200
So we don't have to go into further details.

00:50:15,200 --> 00:50:16,840
I think this is details enough.

00:50:16,840 --> 00:50:19,280
But things like these.

00:50:19,280 --> 00:50:22,260
So it still works and behaves what you expect.

00:50:22,260 --> 00:50:24,270
But behind the scenes, it's something

00:50:24,270 --> 00:50:25,520
different that's happening.

00:50:25,520 --> 00:50:29,450


00:50:29,450 --> 00:50:32,170
So those are some of the like being the closest. And you

00:50:32,170 --> 00:50:33,170
can't change the system.

00:50:33,170 --> 00:50:35,480
You can't get a change.

00:50:35,480 --> 00:50:38,070
Even if you know that if I had this bit of information in the

00:50:38,070 --> 00:50:41,650
kernel, in my function, I could deal with it.

00:50:41,650 --> 00:50:43,860
You can't, because not everything in

00:50:43,860 --> 00:50:44,680
the kernel is exported.

00:50:44,680 --> 00:50:45,640
It's like all opaque.

00:50:45,640 --> 00:50:49,500
So you only can use published APIs that Apple exports, which

00:50:49,500 --> 00:50:50,810
is a good thing.

00:50:50,810 --> 00:50:53,800
But if you're doing something like this, if you need to do

00:50:53,800 --> 00:50:55,930
something that's not exported, tough luck.

00:50:55,930 --> 00:50:59,020


00:50:59,020 --> 00:51:00,285
A big challenge is the Finder.

00:51:00,285 --> 00:51:03,540


00:51:03,540 --> 00:51:07,240
File systems for many or most Mac users mean the Finder.

00:51:07,240 --> 00:51:10,640
If something doesn't behave nicely with the Finder, it

00:51:10,640 --> 00:51:11,820
doesn't work.

00:51:11,820 --> 00:51:15,110
The Finder can be very finicky, very fastidious.

00:51:15,110 --> 00:51:19,270
And Finder's really honed and whatever for Apple's file

00:51:19,270 --> 00:51:21,550
systems, because that's the only thing that they have and

00:51:21,550 --> 00:51:23,760
it's the only thing they ship.

00:51:23,760 --> 00:51:27,610
So things like you mounted something.

00:51:27,610 --> 00:51:30,265
So the way FUSE works is you have a file

00:51:30,265 --> 00:51:32,150
system server in Userspace.

00:51:32,150 --> 00:51:34,250
You did a mount call.

00:51:34,250 --> 00:51:36,080
Kernel sent a message to the Userspce

00:51:36,080 --> 00:51:38,710
saying hey, please mount.

00:51:38,710 --> 00:51:42,150
And now the guy could say done.

00:51:42,150 --> 00:51:44,560
But should the kernel wait for the guy to say done?

00:51:44,560 --> 00:51:48,290
It could, but what if the guy is single threaded?

00:51:48,290 --> 00:51:50,720
If the guy's single threaded, may be the very next thing

00:51:50,720 --> 00:51:55,010
that somebody wants to do is to call the guy and say, tell

00:51:55,010 --> 00:51:57,810
me how many files you have so I can populate this window and

00:51:57,810 --> 00:51:58,720
do something.

00:51:58,720 --> 00:52:03,750
So the thing is for various reasons, we wait for the

00:52:03,750 --> 00:52:06,070
Userspace file system to finish mounting

00:52:06,070 --> 00:52:07,910
asynchronously.

00:52:07,910 --> 00:52:11,240
So while you're doing that, we actually cannot forward any

00:52:11,240 --> 00:52:15,050
calls to this person, because it may not have initialized.

00:52:15,050 --> 00:52:17,830
So we hold off all the calls in the kernel.

00:52:17,830 --> 00:52:20,470
But the mount system call has returned.

00:52:20,470 --> 00:52:22,980
So as far as the Finder's concerned,

00:52:22,980 --> 00:52:25,090
something has come up.

00:52:25,090 --> 00:52:27,920
But then the Finder wants to go in quickly, look up the

00:52:27,920 --> 00:52:31,400
file system, and figure out how many files it has, how

00:52:31,400 --> 00:52:32,610
much free space and whatnot.

00:52:32,610 --> 00:52:35,620
But remember, we are holding all those calls in the kernel

00:52:35,620 --> 00:52:38,110
until the guy says, I'm done.

00:52:38,110 --> 00:52:41,530
Now, you could hold all the calls, but you can't hold

00:52:41,530 --> 00:52:42,630
really all the calls.

00:52:42,630 --> 00:52:45,050
Because what if you're trying to eject it because you decide

00:52:45,050 --> 00:52:46,790
that something went wrong.

00:52:46,790 --> 00:52:49,030
So ejecting something or unmounting something also

00:52:49,030 --> 00:52:52,290
needs to know what the status of the file system is.

00:52:52,290 --> 00:52:55,340
So you at least have to let stat through.

00:52:55,340 --> 00:52:57,290
But if you let stat through, you don't know what is the

00:52:57,290 --> 00:52:59,160
status because you haven't talked to the file system guy

00:52:59,160 --> 00:53:00,850
yet because he hasn't replied to you.

00:53:00,850 --> 00:53:02,530
So you have to cook up some stat.

00:53:02,530 --> 00:53:05,380
You have to say no files, nothing, no space.

00:53:05,380 --> 00:53:06,880
That's what they are.

00:53:06,880 --> 00:53:09,670
But if you do that, the Finder could make that call.

00:53:09,670 --> 00:53:11,690
And the Finder would say, oh great, empty file system.

00:53:11,690 --> 00:53:13,660
There's nothing yet.

00:53:13,660 --> 00:53:15,890
And the Finder would remember that and to

00:53:15,890 --> 00:53:16,820
stick to that thing.

00:53:16,820 --> 00:53:20,000
And when your file system does come up and when stat actually

00:53:20,000 --> 00:53:22,410
starts replying with some decent data,

00:53:22,410 --> 00:53:24,330
it's already too late.

00:53:24,330 --> 00:53:26,300
So you had to make the Finder happy.

00:53:26,300 --> 00:53:27,170
You had to do something.

00:53:27,170 --> 00:53:28,840
I don't want to tell you what we do.

00:53:28,840 --> 00:53:32,720
It's all good, but details are painful.

00:53:32,720 --> 00:53:35,010
So we make the Finder happy in more ways than one.

00:53:35,010 --> 00:53:37,530


00:53:37,530 --> 00:53:39,460
User expectations, assumptions, presumptions,

00:53:39,460 --> 00:53:40,560
belief systems, convictions.

00:53:40,560 --> 00:53:42,880
It's my favorite topic, but I can't talk about it because

00:53:42,880 --> 00:53:45,770
it's painful for me.

00:53:45,770 --> 00:53:54,150
Point being that like I said, people expect things to be a

00:53:54,150 --> 00:53:56,800
certain way, whether that's correct or not.

00:53:56,800 --> 00:53:59,520
So if you want to be pedantic, if you want to tell people,

00:53:59,520 --> 00:54:01,930
no, that's not the way it should be, because

00:54:01,930 --> 00:54:03,740
that's just not right.

00:54:03,740 --> 00:54:06,700
And yes, you've been conditioned to believe this,

00:54:06,700 --> 00:54:08,140
but this is not right.

00:54:08,140 --> 00:54:09,180
Doesn't work.

00:54:09,180 --> 00:54:12,940
You want people to use your product or project, then just

00:54:12,940 --> 00:54:13,570
put up with it.

00:54:13,570 --> 00:54:16,010
And one has to make the user happy.

00:54:16,010 --> 00:54:18,820
It's a very well known fact.

00:54:18,820 --> 00:54:22,350
But things like people are not happy that why is something

00:54:22,350 --> 00:54:25,170
showing up as a network volume?

00:54:25,170 --> 00:54:27,440
Why are all MacFUSE volumes network volumes?

00:54:27,440 --> 00:54:29,440
They're not network volumes.

00:54:29,440 --> 00:54:31,980
They don't have a local disk assigned to them.

00:54:31,980 --> 00:54:34,770
Because there's only two ways you can do file systems in OS

00:54:34,770 --> 00:54:37,360
X. You can have a real local disk or not have

00:54:37,360 --> 00:54:38,490
a real local disk.

00:54:38,490 --> 00:54:43,290
If you say no real local disk, Finder will show that globe.

00:54:43,290 --> 00:54:45,440
The globe doesn't make it a network volume.

00:54:45,440 --> 00:54:47,860
All that means is it's not local.

00:54:47,860 --> 00:54:50,870
So as far as the kernel is concerned, it is not local,

00:54:50,870 --> 00:54:53,250
because the kernel itself is not reading the disk.

00:54:53,250 --> 00:54:55,020
That is a local file system.

00:54:55,020 --> 00:54:56,910
So there are many misconceptions like this.

00:54:56,910 --> 00:54:59,150
And some of them are very strongly ingrained and people

00:54:59,150 --> 00:55:02,330
feel very strongly about them.

00:55:02,330 --> 00:55:04,960
Finder also had the tendency to, like if the connection

00:55:04,960 --> 00:55:08,230
breaks, then things die.

00:55:08,230 --> 00:55:10,080
Finder locks up the GUI, so what to do?

00:55:10,080 --> 00:55:13,200
The thing is MacFUSE is not the thing that's actually

00:55:13,200 --> 00:55:14,460
communicating with the remote thing.

00:55:14,460 --> 00:55:15,710
It's the file system in Userspace.

00:55:15,710 --> 00:55:18,270


00:55:18,270 --> 00:55:19,550
It could be doing anything it wants.

00:55:19,550 --> 00:55:22,820
It could be doing a wild loop forever, if it wants.

00:55:22,820 --> 00:55:24,220
So what to do?

00:55:24,220 --> 00:55:28,860
So give people tools and means to interrupt that.

00:55:28,860 --> 00:55:31,100
Give people tools and means to eject things if they really

00:55:31,100 --> 00:55:33,670
want to eject things.

00:55:33,670 --> 00:55:36,880
Other things people do is that people expect that let's say

00:55:36,880 --> 00:55:38,380
you're using the SSH file system.

00:55:38,380 --> 00:55:41,030
Your SSH [UNINTELLIGIBLE] to some host. You have some files

00:55:41,030 --> 00:55:42,930
over there.

00:55:42,930 --> 00:55:45,060
They're also logging in through the SSH

00:55:45,060 --> 00:55:47,500
program or AFP or Samba.

00:55:47,500 --> 00:55:50,250
And they're changing the same files like through MacFUSE and

00:55:50,250 --> 00:55:51,760
outside of MacFUSE.

00:55:51,760 --> 00:55:54,290
And they're saying, it's not refreshing.

00:55:54,290 --> 00:55:55,900
So I can understand.

00:55:55,900 --> 00:56:00,470
The difference here is that MacFUSE is not a distributed

00:56:00,470 --> 00:56:01,060
file system.

00:56:01,060 --> 00:56:04,200
It's just a way of building file systems. If you have a

00:56:04,200 --> 00:56:08,730
protocol that knows how to handle concurrent access and

00:56:08,730 --> 00:56:10,630
that's worth talking to MacFUSE, and

00:56:10,630 --> 00:56:11,680
that's a separate issue.

00:56:11,680 --> 00:56:14,580
So MacFUSE itself can't really do much.

00:56:14,580 --> 00:56:17,370
But like I said, I do want to make people happy and want

00:56:17,370 --> 00:56:18,570
them to use the product.

00:56:18,570 --> 00:56:21,970
Let's say somebody really wants the data to be always

00:56:21,970 --> 00:56:22,990
refreshed and up to date.

00:56:22,990 --> 00:56:25,240
Every time you open a file, it should show you

00:56:25,240 --> 00:56:26,660
what's on the server.

00:56:26,660 --> 00:56:31,950
So the way to do that is OS X does many types of caching.

00:56:31,950 --> 00:56:34,060
So the way to do that is to disable that caching

00:56:34,060 --> 00:56:35,120
altogether.

00:56:35,120 --> 00:56:37,730
But the caching was not really meant to be disabled.

00:56:37,730 --> 00:56:40,530
So it's kind of tricky to disable that so that things

00:56:40,530 --> 00:56:41,780
still go through.

00:56:41,780 --> 00:56:45,270


00:56:45,270 --> 00:56:49,630
Another thing is that let's say you're

00:56:49,630 --> 00:56:50,370
implementing a file system.

00:56:50,370 --> 00:56:51,250
You're implementing something that

00:56:51,250 --> 00:56:54,560
streams a file from somewhere.

00:56:54,560 --> 00:56:56,520
If you're streaming, let's say you don't know what the size

00:56:56,520 --> 00:56:58,160
of the file is.

00:56:58,160 --> 00:56:59,380
So what do you do?

00:56:59,380 --> 00:57:02,010
So when you read something, the first thing that happens

00:57:02,010 --> 00:57:05,200
is the kernel will ask you, hey, what's your file size?

00:57:05,200 --> 00:57:06,380
Then you give it a size.

00:57:06,380 --> 00:57:08,220
And say OK, give me the data.

00:57:08,220 --> 00:57:11,210
But if you don't know the size, what will you say?

00:57:11,210 --> 00:57:13,900
You could say my file size is a gigabyte.

00:57:13,900 --> 00:57:15,360
What if it's actually more than a gigabyte.

00:57:15,360 --> 00:57:16,850
Even a gigabyte is not good enough.

00:57:16,850 --> 00:57:18,660
But let's say you did say a gigabyte and the size

00:57:18,660 --> 00:57:20,330
was just ten bytes.

00:57:20,330 --> 00:57:22,250
What will happen is that the kernel will zero fill the

00:57:22,250 --> 00:57:24,910
rest. So you will read a gigabyte.

00:57:24,910 --> 00:57:26,980
That's not what you want.

00:57:26,980 --> 00:57:29,480
What if you just said zero bytes?

00:57:29,480 --> 00:57:32,630
And why does the read not just stop?

00:57:32,630 --> 00:57:36,350
Like start when the provider stops providing the data?

00:57:36,350 --> 00:57:37,370
Why not just say zero bytes?

00:57:37,370 --> 00:57:39,570
Don't look at the size.

00:57:39,570 --> 00:57:42,000
Just read as long as the file system is giving you data.

00:57:42,000 --> 00:57:44,500
Well, that's not how things work, because

00:57:44,500 --> 00:57:46,020
there's buffer caching.

00:57:46,020 --> 00:57:48,750
This really complex beast called buffer caching and it

00:57:48,750 --> 00:57:50,400
really wants to know the size.

00:57:50,400 --> 00:57:54,330
So if we want to implement this that people should be

00:57:54,330 --> 00:57:57,880
able to say zero size and reading stops, writing stops

00:57:57,880 --> 00:58:02,210
when you're done, then we have to bypass the buffer cache.

00:58:02,210 --> 00:58:06,070
So from MacFUSE to your file system, there needs to be an

00:58:06,070 --> 00:58:09,090
entirely different software stack for this to work.

00:58:09,090 --> 00:58:11,280
So we did implement that stack, because like I said,

00:58:11,280 --> 00:58:13,350
people should be able to do that, and this is kind of an

00:58:13,350 --> 00:58:14,600
important thing.

00:58:14,600 --> 00:58:16,950


00:58:16,950 --> 00:58:19,820
So one negative side effect, at least negative in my book,

00:58:19,820 --> 00:58:24,850
of providing so many features is that not every feature

00:58:24,850 --> 00:58:28,160
should be enabled every time, because maybe

00:58:28,160 --> 00:58:28,920
you don't want that.

00:58:28,920 --> 00:58:31,590
Maybe you want the right size to be present, because that's

00:58:31,590 --> 00:58:32,190
what you're doing.

00:58:32,190 --> 00:58:34,320
You're not doing a file system like that.

00:58:34,320 --> 00:58:35,600
So how do you solve that?

00:58:35,600 --> 00:58:37,120
Well, you provide lots of options.

00:58:37,120 --> 00:58:37,760
Turn this on.

00:58:37,760 --> 00:58:38,310
Turn this off.

00:58:38,310 --> 00:58:38,590
Turn this on.

00:58:38,590 --> 00:58:39,830
Turn this off.

00:58:39,830 --> 00:58:45,120
So if you look at the graph of the number of mount time

00:58:45,120 --> 00:58:49,510
options that we have, it goes something like this.

00:58:49,510 --> 00:58:51,800
So in the beginning, there were not many.

00:58:51,800 --> 00:58:55,300
And then it just keeps going up and up and up and up.

00:58:55,300 --> 00:58:58,690
And I call this explosion hell.

00:58:58,690 --> 00:59:03,170
But at least like the previous curve, at least the slope is

00:59:03,170 --> 00:59:03,620
going down.

00:59:03,620 --> 00:59:05,300
So it's not increasing at that rate.

00:59:05,300 --> 00:59:08,340


00:59:08,340 --> 00:59:11,440
So now that we have a reasonable mechanism in

00:59:11,440 --> 00:59:14,800
place-- you know what MacFUSE is, you know what it does,

00:59:14,800 --> 00:59:17,740
what it's features are--

00:59:17,740 --> 00:59:20,960
I could finally go and do a proc file system.

00:59:20,960 --> 00:59:23,500


00:59:23,500 --> 00:59:26,755
And it was much easier than the previous attempt.

00:59:26,755 --> 00:59:29,230
And I'll actually show it to you.

00:59:29,230 --> 00:59:58,690


00:59:58,690 --> 01:00:00,660
Actually, I'll show two demos here.

01:00:00,660 --> 01:00:03,400


01:00:03,400 --> 01:00:05,170
So here I'm on the ProcFS.

01:00:05,170 --> 01:00:06,420
What is ProcFS?

01:00:06,420 --> 01:00:12,000


01:00:12,000 --> 01:00:16,210
So these are all the processes on your system.

01:00:16,210 --> 01:00:18,480
Look like folders here.

01:00:18,480 --> 01:00:19,310
You can go down.

01:00:19,310 --> 01:00:23,810
You can also do by name, and processes that actually have

01:00:23,810 --> 01:00:25,990
names will look like this.

01:00:25,990 --> 01:00:28,820


01:00:28,820 --> 01:00:29,910
Let's choose something.

01:00:29,910 --> 01:00:31,530
Safari.

01:00:31,530 --> 01:00:33,830
Let me actually have a Safari window up.

01:00:33,830 --> 01:00:44,240


01:00:44,240 --> 01:00:46,810
So look at Safari.

01:00:46,810 --> 01:00:51,170
There are things like command line, which contains like the

01:00:51,170 --> 01:00:54,110
exact command line for this program.

01:00:54,110 --> 01:01:01,340
Does things like FDs, which actually contains all the open

01:01:01,340 --> 01:01:09,330
files and sockets and pipes or whatever for this Safari.

01:01:09,330 --> 01:01:12,445
I could go somewhere.

01:01:12,445 --> 01:01:14,980


01:01:14,980 --> 01:01:16,230
Open that file again.

01:01:16,230 --> 01:01:22,410


01:01:22,410 --> 01:01:26,180
Then you go into task.

01:01:26,180 --> 01:01:27,830
You look at threads.

01:01:27,830 --> 01:01:31,220
You'll see that this guy has so many threads.

01:01:31,220 --> 01:01:32,600
You can go to a thread directory.

01:01:32,600 --> 01:01:33,415
You can go to stage.

01:01:33,415 --> 01:01:35,580
So you can go to like stage float.

01:01:35,580 --> 01:01:37,520
Here are all the registers for the threads.

01:01:37,520 --> 01:01:40,190


01:01:40,190 --> 01:01:46,200
Instruction pointer or base pointer.

01:01:46,200 --> 01:01:48,630
Basically, you can look at all the registers.

01:01:48,630 --> 01:01:49,700
This is all in real time.

01:01:49,700 --> 01:01:51,820
So every time you open it, you should get a new value.

01:01:51,820 --> 01:01:54,710


01:01:54,710 --> 01:01:58,390
You can look at things like system time and user time.

01:01:58,390 --> 01:01:59,500
How long this thing has run.

01:01:59,500 --> 01:02:01,410
You can see how much memory it's using.

01:02:01,410 --> 01:02:04,160


01:02:04,160 --> 01:02:05,930
You can look at the VM map of this guy.

01:02:05,930 --> 01:02:08,660
You can see like all the memory that this guy has

01:02:08,660 --> 01:02:11,310
allocated, all the regions, what it's used for.

01:02:11,310 --> 01:02:16,740


01:02:16,740 --> 01:02:18,020
You can look at his mock ports.

01:02:18,020 --> 01:02:19,780
So basically, you can look at a lot of stuff here.

01:02:19,780 --> 01:02:23,310


01:02:23,310 --> 01:02:26,180
And in fact, it's kind of of seamless with respect to the

01:02:26,180 --> 01:02:28,620
kernel that process zero is kernel.

01:02:28,620 --> 01:02:31,470
So if I go and look at this stuff for the kernel for

01:02:31,470 --> 01:02:33,150
process zero, I'm actually looking at the kernel.

01:02:33,150 --> 01:02:36,410


01:02:36,410 --> 01:02:39,520
And many of this thing called system here.

01:02:39,520 --> 01:02:41,520
You can look at system firmware.

01:02:41,520 --> 01:02:42,680
It'll tell you all your firmware variables.

01:02:42,680 --> 01:02:45,490
AUDIENCE: That file system is read-only?

01:02:45,490 --> 01:02:47,390
AMIT SINGH: This file system's read-only, but you can make it

01:02:47,390 --> 01:02:47,790
read-write.

01:02:47,790 --> 01:02:51,320
I just didn't make this one read-write.

01:02:51,320 --> 01:02:52,540
But it can be like Linux.

01:02:52,540 --> 01:02:53,810
There's exactly the same thing.

01:02:53,810 --> 01:02:56,860


01:02:56,860 --> 01:02:59,030
Then you have some hardware here.

01:02:59,030 --> 01:03:00,890
So things like motion sensor readings and

01:03:00,890 --> 01:03:03,990
light sensor readings.

01:03:03,990 --> 01:03:05,490
You just open the file and read it.

01:03:05,490 --> 01:03:09,768
Every time you read, you get a new value.

01:03:09,768 --> 01:03:11,630
There's something called displays here.

01:03:11,630 --> 01:03:14,060
So I have like two displays connected.

01:03:14,060 --> 01:03:17,380
So I'm seeing something for each display.

01:03:17,380 --> 01:03:20,760
I have display info, which tells me like what the

01:03:20,760 --> 01:03:22,760
resolution is and whatever.

01:03:22,760 --> 01:03:26,620


01:03:26,620 --> 01:03:29,130
I can do screenshot.

01:03:29,130 --> 01:03:31,610
Actually, it's giving me a live screenshot of every time

01:03:31,610 --> 01:03:33,180
you open the file, you actually get a screenshot of

01:03:33,180 --> 01:03:34,810
your thing.

01:03:34,810 --> 01:03:36,370
You can actually go and click on it.

01:03:36,370 --> 01:03:38,996


01:03:38,996 --> 01:03:42,330
Well, what do you expect?

01:03:42,330 --> 01:03:44,670
So you can copy the file.

01:03:44,670 --> 01:03:45,820
We could copy it to a desktop.

01:03:45,820 --> 01:03:46,740
That's the screenshot.

01:03:46,740 --> 01:03:47,470
You got a screenshot.

01:03:47,470 --> 01:03:49,410
Copy it again, you got a new screenshot.

01:03:49,410 --> 01:03:52,260
Copy it from the command line or you can set up a cron job

01:03:52,260 --> 01:03:53,510
that does that.

01:03:53,510 --> 01:03:55,770


01:03:55,770 --> 01:03:59,040
And then I guess I could go back here.

01:03:59,040 --> 01:04:02,540


01:04:02,540 --> 01:04:03,500
CPUs.

01:04:03,500 --> 01:04:04,500
We got two CPUs.

01:04:04,500 --> 01:04:06,710
You can look at their data, what they have, how long

01:04:06,710 --> 01:04:07,960
they've been running.

01:04:07,960 --> 01:04:10,600


01:04:10,600 --> 01:04:13,032
Camera.

01:04:13,032 --> 01:04:14,282
Huh?

01:04:14,282 --> 01:04:17,250


01:04:17,250 --> 01:04:18,500
So you know what the deal was with the--.

01:04:18,500 --> 01:04:21,340


01:04:21,340 --> 01:04:25,740
So in fact, I can also do this.

01:04:25,740 --> 01:04:28,330
And it takes a picture.

01:04:28,330 --> 01:04:30,530
And every time you open this file, you get a new picture

01:04:30,530 --> 01:04:31,510
taken from the ISite.

01:04:31,510 --> 01:04:34,192
AUDIENCE: Can you export this file [INAUDIBLE]?

01:04:34,192 --> 01:04:35,090
AMIT SINGH: Sorry?

01:04:35,090 --> 01:04:37,385
AUDIENCE: Export this file system and then you have a

01:04:37,385 --> 01:04:37,844
[INAUDIBLE]?

01:04:37,844 --> 01:04:40,140
AMIT SINGH: Yeah.

01:04:40,140 --> 01:04:42,300
So again, just copy it somewhere and you're

01:04:42,300 --> 01:04:42,990
taking a new file.

01:04:42,990 --> 01:04:45,090
So if want some kind of vigilance thing going on, just

01:04:45,090 --> 01:04:47,430
set up a cron job that copies your file somewhere.

01:04:47,430 --> 01:04:50,120


01:04:50,120 --> 01:04:51,955
Actually, there were a few other things.

01:04:51,955 --> 01:05:00,160


01:05:00,160 --> 01:05:02,590
So let me open a couple of Safari windows.

01:05:02,590 --> 01:05:20,050


01:05:20,050 --> 01:05:24,420
Actually, I should show you that file first. Go back to

01:05:24,420 --> 01:05:27,140
the Finder.

01:05:27,140 --> 01:05:27,870
Sorry.

01:05:27,870 --> 01:05:31,120
because I'm not used to looking back and

01:05:31,120 --> 01:05:32,370
working on a computer.

01:05:32,370 --> 01:05:35,100


01:05:35,100 --> 01:05:41,150
By name, Safari, there's this thing called windows.

01:05:41,150 --> 01:05:43,600
So we have this file called on screen.

01:05:43,600 --> 01:05:47,600


01:05:47,600 --> 01:05:51,160
Basically, it'll show you this, which contains that this

01:05:51,160 --> 01:05:52,410
thing has two windows on screen.

01:05:52,410 --> 01:05:55,310


01:05:55,310 --> 01:05:57,150
This thing is the size of the window here.

01:05:57,150 --> 01:05:59,700


01:05:59,700 --> 01:06:05,070
And these are the coordinates, and that's the X, Y and level.

01:06:05,070 --> 01:06:11,660
So then we also have this thing called identify.

01:06:11,660 --> 01:06:13,075
So see what happens when I identify.

01:06:13,075 --> 01:06:18,600


01:06:18,600 --> 01:06:20,560
So for this, I will need the terminal thing.

01:06:20,560 --> 01:06:23,270


01:06:23,270 --> 01:06:30,200
So I'll say proc by name, Safari, windows, identify.

01:06:30,200 --> 01:06:34,120
So all I'm doing is just opening that file.

01:06:34,120 --> 01:06:36,290
So it identifies the window that-- ah, here they are.

01:06:36,290 --> 01:06:38,270
So if you turn windows, it's going to rotate these like

01:06:38,270 --> 01:06:39,600
this and [UNINTELLIGIBLE].

01:06:39,600 --> 01:06:42,500


01:06:42,500 --> 01:06:44,240
So that's proc file system for you.

01:06:44,240 --> 01:06:50,490


01:06:50,490 --> 01:06:56,350
That said, no discussion of MacFUSE can be complete

01:06:56,350 --> 01:07:01,990
without some of the canonical MacFUSE demos.

01:07:01,990 --> 01:07:07,650
And these are the ones that I had going here.

01:07:07,650 --> 01:07:10,910
So we talked about a few types of things you can do with it.

01:07:10,910 --> 01:07:15,290
So you probably already know that people have written NTFS

01:07:15,290 --> 01:07:17,740
3G ports for this thing.

01:07:17,740 --> 01:07:21,390
So you can read and write to NTFS using MacFUSE.

01:07:21,390 --> 01:07:24,490
People have written SSH GUIs.

01:07:24,490 --> 01:07:27,680
So you can actually use the SSH file system in a much

01:07:27,680 --> 01:07:29,960
easier way.

01:07:29,960 --> 01:07:35,310
I mentioned about using this to bridge the gap between the

01:07:35,310 --> 01:07:38,000
desktop and the web.

01:07:38,000 --> 01:07:40,220
So let's say you have something that talks a web

01:07:40,220 --> 01:07:43,680
service interface to over the web to something else.

01:07:43,680 --> 01:07:46,370
There are lots of things like that today.

01:07:46,370 --> 01:07:50,660
Let's look at this thing called DocsFS.

01:07:50,660 --> 01:07:54,420
So we know Google Docs and Spreadsheets is a Google

01:07:54,420 --> 01:07:59,970
service so you can edit your documents online and

01:07:59,970 --> 01:08:01,960
collaborate and share and so forth.

01:08:01,960 --> 01:08:05,330
But what if you wanted to just look at your Google Docs

01:08:05,330 --> 01:08:06,890
account and you wanted to just look at them

01:08:06,890 --> 01:08:08,550
like this was local?

01:08:08,550 --> 01:08:12,140
So this is your Google Doc account.

01:08:12,140 --> 01:08:13,990
When I clicked on the thing, it actually logged into my

01:08:13,990 --> 01:08:16,340
account, retrieved the information, and made it look

01:08:16,340 --> 01:08:20,220
like there were files on the local volume.

01:08:20,220 --> 01:08:23,040
And what happens when I click on one of these?

01:08:23,040 --> 01:08:26,840
Well, it just opens it up in the browser.

01:08:26,840 --> 01:08:29,620
So there's this thing called converted versions.

01:08:29,620 --> 01:08:30,870
So I can go in there.

01:08:30,870 --> 01:08:34,930


01:08:34,930 --> 01:08:36,180
Finder is waiting.

01:08:36,180 --> 01:08:38,899


01:08:38,899 --> 01:08:42,250
And I'll have an equivalent set of files here.

01:08:42,250 --> 01:08:49,789
And if I open it up, it'll open up in Word.

01:08:49,789 --> 01:08:52,439


01:08:52,439 --> 01:08:53,840
And it looks like a Word document.

01:08:53,840 --> 01:08:58,420


01:08:58,420 --> 01:09:00,240
The usual way of doing this would be the that you will be

01:09:00,240 --> 01:09:02,890
reading and writing or exporting and saying save to

01:09:02,890 --> 01:09:07,840
or downloading or uploading through web forms. And here

01:09:07,840 --> 01:09:09,510
you're just dealing with it like you normally would with

01:09:09,510 --> 01:09:13,840
other stuff that's local.

01:09:13,840 --> 01:09:16,760
So that is one example.

01:09:16,760 --> 01:09:19,560
We have this thing called Picasso file system.

01:09:19,560 --> 01:09:23,550
Picasso web is Google's web interface to--

01:09:23,550 --> 01:09:26,910
like Picasso web hosting, the photo hosting service.

01:09:26,910 --> 01:09:30,200
So the idea is that you put your photos up with Google in

01:09:30,200 --> 01:09:31,600
your Picasso account.

01:09:31,600 --> 01:09:33,870
And then you can view them online in online

01:09:33,870 --> 01:09:37,430
albums and what not.

01:09:37,430 --> 01:09:42,960
Example being I could go to Picasso web and you see your

01:09:42,960 --> 01:09:45,040
albums. I can drill down.

01:09:45,040 --> 01:09:47,029
I see the photos in that album I want to upload.

01:09:47,029 --> 01:09:48,479
I can click on an URL.

01:09:48,479 --> 01:09:51,950
It'll ask me, select a file.

01:09:51,950 --> 01:09:56,670
Another way to do that would be just to open this thing up.

01:09:56,670 --> 01:09:59,460
And these are all my albums. It's just the same

01:09:59,460 --> 01:10:00,890
[UNINTELLIGIBLE].

01:10:00,890 --> 01:10:04,840
I can go in here, and I see the same photos.

01:10:04,840 --> 01:10:06,310
I want to open them.

01:10:06,310 --> 01:10:09,780
I can just double click and it opens up as it would.

01:10:09,780 --> 01:10:12,570
How to download photos so you don't have to do save as or

01:10:12,570 --> 01:10:14,536
fill some forms?

01:10:14,536 --> 01:10:16,550
You just drag it.

01:10:16,550 --> 01:10:19,130
And that's the download.

01:10:19,130 --> 01:10:23,130
Now, other operations.

01:10:23,130 --> 01:10:25,740
Lots of operations can just map to the semantics.

01:10:25,740 --> 01:10:28,160
Like you can say, I want to create a new album.

01:10:28,160 --> 01:10:30,900
So you could just say new folder.

01:10:30,900 --> 01:10:34,720


01:10:34,720 --> 01:10:36,700
And that's a new album.

01:10:36,700 --> 01:10:41,230
I can go back in the web browser and

01:10:41,230 --> 01:10:42,640
I can double check.

01:10:42,640 --> 01:10:43,890
So here's a new album.

01:10:43,890 --> 01:10:47,570


01:10:47,570 --> 01:10:50,410
Then I can go in there.

01:10:50,410 --> 01:10:53,350
That's the upload.

01:10:53,350 --> 01:10:56,540
And I go inside here, and the photo's there.

01:10:56,540 --> 01:10:59,460
So basically, the idea is to let you use these things just

01:10:59,460 --> 01:11:00,880
as you use everything else.

01:11:00,880 --> 01:11:08,680


01:11:08,680 --> 01:11:10,870
Some of these are not our demos.

01:11:10,870 --> 01:11:14,280
Some of these are things that I'm really glad that people

01:11:14,280 --> 01:11:17,160
have started doing with MacFUSE.

01:11:17,160 --> 01:11:19,050
I'm not showing everything here, because you can download

01:11:19,050 --> 01:11:22,240
them and try them yourself.

01:11:22,240 --> 01:11:24,750
Here's essentially a semantic file system.

01:11:24,750 --> 01:11:28,500
So what that means is that--

01:11:28,500 --> 01:11:31,340
you know that Spotlight let's you search and

01:11:31,340 --> 01:11:33,800
so does Google Desktop.

01:11:33,800 --> 01:11:39,910
But one way of looking at these search interface is that

01:11:39,910 --> 01:11:41,800
I go to the folder called smarter folder, which has

01:11:41,800 --> 01:11:42,970
nothing in it.

01:11:42,970 --> 01:11:45,350
And let's say you're looking for all PDFs on your machine.

01:11:45,350 --> 01:11:47,410
So the query for that would be PDF.

01:11:47,410 --> 01:11:50,660
So what if I just tell this guy to go into the folder

01:11:50,660 --> 01:11:52,280
called PDF?

01:11:52,280 --> 01:11:56,960
And it'll do a Spotlight search.

01:11:56,960 --> 01:12:00,280


01:12:00,280 --> 01:12:03,440
And we get a file system.

01:12:03,440 --> 01:12:07,800
And these are the results of the query.

01:12:07,800 --> 01:12:11,840
And I can just click on these.

01:12:11,840 --> 01:12:15,100
If I copy this whole folder, I would essentially be doing a

01:12:15,100 --> 01:12:18,040
semantic copy that copy whatever's the

01:12:18,040 --> 01:12:19,590
result of this query.

01:12:19,590 --> 01:12:22,770
And like in Spotlight, whatever syntax you can use--

01:12:22,770 --> 01:12:26,200
you can do and, or, whatever things you can use, you can

01:12:26,200 --> 01:12:27,410
just use them--

01:12:27,410 --> 01:12:31,590
and that gives you basically an on-the-fly dynamic file

01:12:31,590 --> 01:12:33,940
system that the contents of it are based on what

01:12:33,940 --> 01:12:35,550
you're doing right now.

01:12:35,550 --> 01:12:38,830
But for all intents and purposes, it works like a real

01:12:38,830 --> 01:12:40,080
file system.

01:12:40,080 --> 01:12:43,270


01:12:43,270 --> 01:12:45,450
And then you've already seen proc and then there's some

01:12:45,450 --> 01:12:46,140
other examples.

01:12:46,140 --> 01:12:50,460
So one thing I did to help people understand this better

01:12:50,460 --> 01:12:55,400
was I created a video when he released MacFUSE.

01:12:55,400 --> 01:12:58,655
So in case you're interested and you haven't seen, probably

01:12:58,655 --> 01:12:59,905
you should look at that video.

01:12:59,905 --> 01:13:03,730


01:13:03,730 --> 01:13:05,480
And MacFUSE lets you do other things, too.

01:13:05,480 --> 01:13:08,630
Another reason why MacFUSE, the kernel port is increasing

01:13:08,630 --> 01:13:13,340
is because we wanted to give people everything that's

01:13:13,340 --> 01:13:16,990
really possible in a file system.

01:13:16,990 --> 01:13:18,960
OS X had ACLs in Tiger.

01:13:18,960 --> 01:13:21,780
You can do access control in Tiger.

01:13:21,780 --> 01:13:23,180
And it's a very good thing.

01:13:23,180 --> 01:13:26,050
It's a useful thing, if you're in that sort of business or

01:13:26,050 --> 01:13:27,720
looking for something like that.

01:13:27,720 --> 01:13:30,420
So MacFUSE supports ACLs.

01:13:30,420 --> 01:13:33,670
And your file system doesn't even have to know about it.

01:13:33,670 --> 01:13:37,650
Because the point is, MacFUSE supports extended attributes.

01:13:37,650 --> 01:13:41,120
So you can have arbitrary key value pairs, and they will all

01:13:41,120 --> 01:13:44,060
be forwarded to your file system, the user guy.

01:13:44,060 --> 01:13:46,220
If the guy says hey, I want extended attributes.

01:13:46,220 --> 01:13:47,810
I just don't want to deal with them.

01:13:47,810 --> 01:13:49,460
Can you just store them for me?

01:13:49,460 --> 01:13:52,970
So the kernel will take a fall back path and store them as

01:13:52,970 --> 01:13:56,280
Apple double files, and they will be there.

01:13:56,280 --> 01:13:59,960
You want to use ACLs, ACLs will be there.

01:13:59,960 --> 01:14:05,030
You want to use [? KQKVent ?], this thing OS X has, MacFUSE

01:14:05,030 --> 01:14:06,100
has it, too.

01:14:06,100 --> 01:14:09,860
So many of the things that regular OS X file systems

01:14:09,860 --> 01:14:13,830
have, your user file system will get it for free without

01:14:13,830 --> 01:14:16,870
even having to know that this thing is there or you don't

01:14:16,870 --> 01:14:18,120
have to do anything about it.

01:14:18,120 --> 01:14:20,490


01:14:20,490 --> 01:14:26,550
Before we get to Q&A, I would like to thank all those people

01:14:26,550 --> 01:14:30,770
who have helped me or who have created some of these demos.

01:14:30,770 --> 01:14:33,500
They're my friends and they're my team members.

01:14:33,500 --> 01:14:36,890
And I really, really value their support.

01:14:36,890 --> 01:14:39,370
Because like I said, I go into the zombie mode

01:14:39,370 --> 01:14:41,020
and people need me.

01:14:41,020 --> 01:14:44,230
And I'm like, can you talk to me after a week?

01:14:44,230 --> 01:14:45,820
And they've been very understanding of that.

01:14:45,820 --> 01:14:48,730
So that thing is just totally invaluable.

01:14:48,730 --> 01:14:53,650
And also, I asked them that it would be great if somebody

01:14:53,650 --> 01:14:55,700
could do this demo.

01:14:55,700 --> 01:14:56,710
Somebody.

01:14:56,710 --> 01:14:59,220
And I don't have to say more and they volunteer.

01:14:59,220 --> 01:15:01,400
So it just great to have support like this.

01:15:01,400 --> 01:15:02,570
So thank you guys.

01:15:02,570 --> 01:15:05,800
You know who you are.

01:15:05,800 --> 01:15:10,040
And with that, we come to the end of this talk.

01:15:10,040 --> 01:15:14,170
And if people have questions, I'll be happy to answer them.

01:15:14,170 --> 01:15:20,062


01:15:20,062 --> 01:15:22,026
Thank you.

01:15:22,026 --> 01:15:23,760
AUDIENCE: Hi.

01:15:23,760 --> 01:15:24,830
I think this stuff's great.

01:15:24,830 --> 01:15:27,820
I'm a big fan of Plan 9's architecture where

01:15:27,820 --> 01:15:29,260
everything's a file.

01:15:29,260 --> 01:15:31,230
But sometimes I feel like people like you and me are

01:15:31,230 --> 01:15:33,250
freaks and no one else gets this.

01:15:33,250 --> 01:15:37,730
And I'm curious, outside of your team where maybe, I don't

01:15:37,730 --> 01:15:39,680
know, whether people do it because they just like you or

01:15:39,680 --> 01:15:42,340
because they really buy into it, how do your fellow Google

01:15:42,340 --> 01:15:46,750
developers feel about this model where basically the file

01:15:46,750 --> 01:15:48,130
system is the object interface?

01:15:48,130 --> 01:15:50,440
And also, now that it's written, how does

01:15:50,440 --> 01:15:51,270
Apple feel about it?

01:15:51,270 --> 01:15:53,030
Do they actually see the light now that you actually

01:15:53,030 --> 01:15:54,280
implemented this?

01:15:54,280 --> 01:15:56,710


01:15:56,710 --> 01:15:58,910
AMIT SINGH: Good questions, but difficult questions.

01:15:58,910 --> 01:16:03,410


01:16:03,410 --> 01:16:07,840
As far as Apple's concerned, this is under a free license.

01:16:07,840 --> 01:16:09,970
So if Apple thinks this is great and if Apple wants to

01:16:09,970 --> 01:16:12,420
use it, it's open source.

01:16:12,420 --> 01:16:15,040
AUDIENCE: I'm curious whether you've spoken to them about

01:16:15,040 --> 01:16:15,510
this since it's been written?

01:16:15,510 --> 01:16:16,710
AMIT SINGH: I have not really spoken to them.

01:16:16,710 --> 01:16:20,080
I do know that, based on some of the engineers I've talked

01:16:20,080 --> 01:16:24,620
to, just I ran into them, that they really like it.

01:16:24,620 --> 01:16:25,930
But that could be just the engineers.

01:16:25,930 --> 01:16:27,950
So I can answer for the people that I've talked to.

01:16:27,950 --> 01:16:29,990
They thought it was a great idea, because they are

01:16:29,990 --> 01:16:31,360
like-minded people.

01:16:31,360 --> 01:16:32,990
But how does Apple as a company feel?

01:16:32,990 --> 01:16:33,750
I can't answer that.

01:16:33,750 --> 01:16:36,380
I don't know.

01:16:36,380 --> 01:16:38,680
As far as Google's concerned, we have a lot of

01:16:38,680 --> 01:16:40,260
Mac users at Google.

01:16:40,260 --> 01:16:42,920
So they like using it.

01:16:42,920 --> 01:16:43,560
That's for sure.

01:16:43,560 --> 01:16:46,610
And SSHFS is really useful.

01:16:46,610 --> 01:16:49,900
As for where this is headed, will this play a role here or

01:16:49,900 --> 01:16:53,450
anywhere else, I can't say.

01:16:53,450 --> 01:16:57,380
AUDIENCE: How about beyond the obvious things where you have

01:16:57,380 --> 01:16:59,400
what you would consider a traditional file system like

01:16:59,400 --> 01:17:02,490
SSHFS, which just exports real files on

01:17:02,490 --> 01:17:05,480
another machine securely?

01:17:05,480 --> 01:17:08,070
I guess I'm curious about using it for things like what

01:17:08,070 --> 01:17:11,070
you showed with Picasso web.

01:17:11,070 --> 01:17:11,480
on.

01:17:11,480 --> 01:17:12,970
Things that you don't traditionally think of as a

01:17:12,970 --> 01:17:15,780
file system, but this and things like Plan 9 are able to

01:17:15,780 --> 01:17:17,820
export as file servers.

01:17:17,820 --> 01:17:19,220
Do you think that other developers at

01:17:19,220 --> 01:17:20,780
Google get that idea?

01:17:20,780 --> 01:17:21,900
Do they see value in it?

01:17:21,900 --> 01:17:25,980
Or are they just basically developing standard libraries

01:17:25,980 --> 01:17:29,320
and doing things through like XML or PC or whatever?

01:17:29,320 --> 01:17:32,091


01:17:32,091 --> 01:17:34,370
AMIT SINGH: I can't talk about Google's plans either way.

01:17:34,370 --> 01:17:38,430
But I can say that first of all, this thing is very new.

01:17:38,430 --> 01:17:41,980
So even if people here or outside think that this is

01:17:41,980 --> 01:17:45,740
really great and this should be in products, we just

01:17:45,740 --> 01:17:49,330
released it in January.

01:17:49,330 --> 01:17:51,270
So it's a file system.

01:17:51,270 --> 01:17:53,300
It's destabilizing by nature.

01:17:53,300 --> 01:17:54,540
So it'll take a while to bake.

01:17:54,540 --> 01:17:56,660
And the other thing is that, whether at Google or

01:17:56,660 --> 01:18:00,250
elsewhere, lots of these products have been out for a

01:18:00,250 --> 01:18:01,870
really long, long time.

01:18:01,870 --> 01:18:05,200
So changes like this anywhere, they don't happen overnight.

01:18:05,200 --> 01:18:07,820


01:18:07,820 --> 01:18:12,660
AUDIENCE: But as you pointed out earlier, this idea has

01:18:12,660 --> 01:18:13,740
been around for a long time.

01:18:13,740 --> 01:18:16,460
And it just doesn't seem to have really caught on.

01:18:16,460 --> 01:18:19,290
And I'm just curious whether is that because the system's

01:18:19,290 --> 01:18:21,570
that it's been developed in haven't caught on?

01:18:21,570 --> 01:18:25,210
Is OS X a chance to actually make this something that's

01:18:25,210 --> 01:18:27,040
feasible and used, because of it's popularity?

01:18:27,040 --> 01:18:31,220
AMIT SINGH: I certainly hope that, or I think that we have

01:18:31,220 --> 01:18:33,560
at least as good a chance if not a better chance than the

01:18:33,560 --> 01:18:36,710
previous systems to do it on OS X, simply because I think

01:18:36,710 --> 01:18:38,160
the community is very innovative.

01:18:38,160 --> 01:18:43,910
And the tools like the default tools are quite powerful.

01:18:43,910 --> 01:18:46,090
Just if you want to make something very visually

01:18:46,090 --> 01:18:48,180
appealing to get your point across and convince people

01:18:48,180 --> 01:18:51,170
that hey, look, this can be quite cool, is by nature--

01:18:51,170 --> 01:18:53,890
it's a little easier on OS X, if nothing else.

01:18:53,890 --> 01:18:55,350
And I'm seeing some of that, both

01:18:55,350 --> 01:18:56,490
inside and outside Google.

01:18:56,490 --> 01:18:57,970
People are excited about it.

01:18:57,970 --> 01:18:58,740
AUDIENCE: That's, I guess, what I was getting at.

01:18:58,740 --> 01:19:01,460
I was curious actually, whether you would have to do

01:19:01,460 --> 01:19:03,190
much of evangelization or whether it's just showing them

01:19:03,190 --> 01:19:05,350
these demos is enough to go, oh, yeah, OK, I get that.

01:19:05,350 --> 01:19:07,535
AMIT SINGH: I think for the most part, people see the

01:19:07,535 --> 01:19:09,500
demos and they're quite happy and excited.

01:19:09,500 --> 01:19:12,700
The thing with Plan 9 and all is like Plan 9 is arguably

01:19:12,700 --> 01:19:14,150
like even a better way of doing this.

01:19:14,150 --> 01:19:18,410
Because that's the system from the ground up and files are in

01:19:18,410 --> 01:19:20,240
the kernel and Userspace doesn't matter.

01:19:20,240 --> 01:19:22,230
Just you can do whatever you want.

01:19:22,230 --> 01:19:24,310
But the thing is, we're not running Plan 9

01:19:24,310 --> 01:19:26,990
for whatever reason.

01:19:26,990 --> 01:19:28,050
So, yes.

01:19:28,050 --> 01:19:30,440
And that's why I make it a point to make it clear that

01:19:30,440 --> 01:19:33,200
people, this is nothing new.

01:19:33,200 --> 01:19:34,980
The execution might be new.

01:19:34,980 --> 01:19:37,300
And whether it succeeds in the 100th attempt or the 200th

01:19:37,300 --> 01:19:38,430
attempt, that's to be seen.

01:19:38,430 --> 01:19:39,510
AUDIENCE: Thanks a lot.

01:19:39,510 --> 01:19:40,760
AMIT SINGH: Thank you.

01:19:40,760 --> 01:19:46,038


01:19:46,038 --> 01:19:49,700
AUDIENCE: What kind of performance set do you take?

01:19:49,700 --> 01:19:52,510
For instance, if you used MacFUSE file system as an

01:19:52,510 --> 01:19:54,940
interposer, what kind of slowdown do you

01:19:54,940 --> 01:19:58,115
think you would see?

01:19:58,115 --> 01:19:59,680
AMIT SINGH: Yeah, actually that's a good question I

01:19:59,680 --> 01:20:04,130
should have included in the user perception kind of thing.

01:20:04,130 --> 01:20:10,300


01:20:10,300 --> 01:20:13,840
It's a multifaceted question with a multifaceted answer.

01:20:13,840 --> 01:20:17,510
So the question is what kind of performance for disk-based

01:20:17,510 --> 01:20:18,770
file systems?

01:20:18,770 --> 01:20:20,760
What kind of performance for something that's coming across

01:20:20,760 --> 01:20:21,760
the network?

01:20:21,760 --> 01:20:24,520
What kind of performance for something like ProcFS that

01:20:24,520 --> 01:20:25,910
you're cooking up?

01:20:25,910 --> 01:20:30,140
So if you're doing a real disk-based file system, like

01:20:30,140 --> 01:20:33,530
let's say you're doing NTFS, then--

01:20:33,530 --> 01:20:36,280
so there's MacFUSE overhead by itself.

01:20:36,280 --> 01:20:41,110
And that's actually pretty close to the [UNINTELLIGIBLE],

01:20:41,110 --> 01:20:42,910
which is you're doing at least twice the

01:20:42,910 --> 01:20:44,520
number of system calls.

01:20:44,520 --> 01:20:46,830
Because you're going back to Userspace and then you're

01:20:46,830 --> 01:20:47,210
coming back.

01:20:47,210 --> 01:20:49,970
And so you're doing quite a lot of system calls.

01:20:49,970 --> 01:20:54,360
So one might expect it to be at least twice as expensive

01:20:54,360 --> 01:20:56,140
from that standpoint.

01:20:56,140 --> 01:20:59,980
So there's a very good way to measure it, which is use the

01:20:59,980 --> 01:21:00,860
loopback file system.

01:21:00,860 --> 01:21:03,110
So there's a loopback file system that mounts your root

01:21:03,110 --> 01:21:05,860
directory on to somewhere else.

01:21:05,860 --> 01:21:09,300
And then the only overhead is you're going to Userspace, and

01:21:09,300 --> 01:21:10,710
there you're making the actual calls.

01:21:10,710 --> 01:21:13,510
So if open the Userspace file system, it's just doing open

01:21:13,510 --> 01:21:16,000
and coming back.

01:21:16,000 --> 01:21:20,540
So with that, it's typically 1.6X to 1.8X, which

01:21:20,540 --> 01:21:21,275
isn't bad at all.

01:21:21,275 --> 01:21:22,265
AUDIENCE: That's pretty good.

01:21:22,265 --> 01:21:27,380
AMIT SINGH: And with network file systems, the network

01:21:27,380 --> 01:21:29,420
really is the bottleneck most of the time.

01:21:29,420 --> 01:21:32,710
Like with SSH file system, my personal experience in OS X

01:21:32,710 --> 01:21:38,160
has been that it either beats SCP or it does at least as

01:21:38,160 --> 01:21:39,910
good as SCP.

01:21:39,910 --> 01:21:41,640
Because we're doing buffer caching and all that.

01:21:41,640 --> 01:21:44,790
So if you're doing interactive work, then you're definitely

01:21:44,790 --> 01:21:49,930
much better than SCP or something else.

01:21:49,930 --> 01:21:51,490
So on that front, I'm actually quite

01:21:51,490 --> 01:21:53,380
pleased with the results.

01:21:53,380 --> 01:21:55,800
The performances should not be the issue.

01:21:55,800 --> 01:21:57,640
People shouldn't really worry about that.

01:21:57,640 --> 01:21:59,420
People should just think of like what new

01:21:59,420 --> 01:22:00,820
things could be done.

01:22:00,820 --> 01:22:02,570
If you're writing disk-based file systems--

01:22:02,570 --> 01:22:03,730
let's say you're doing NTFS--

01:22:03,730 --> 01:22:07,890
and raw throughput, megabytes per second or gigabytes per

01:22:07,890 --> 01:22:11,180
second is an issue, then there's a bigger problem.

01:22:11,180 --> 01:22:15,610
Because MacFUSE is not the only thing in question here.

01:22:15,610 --> 01:22:19,000
If you're reading and writing to a raw disk, OS X doesn't

01:22:19,000 --> 01:22:24,970
have a disk block cache the same way that Linux does.

01:22:24,970 --> 01:22:28,360
So if you're opening like let's say DevDisk and you're

01:22:28,360 --> 01:22:31,390
reading and writing from it, then you're much better off

01:22:31,390 --> 01:22:33,890
doing that on Linux than on OS X. And that's just an

01:22:33,890 --> 01:22:35,190
architectural difference.

01:22:35,190 --> 01:22:39,320
So that alone will kill you.

01:22:39,320 --> 01:22:40,710
So there are solutions though.

01:22:40,710 --> 01:22:44,030
You could implement your own cache, whether in Userspace or

01:22:44,030 --> 01:22:45,110
in the kernel.

01:22:45,110 --> 01:22:50,220
So we have a lot of grumbling from the NTFS people who were

01:22:50,220 --> 01:22:52,230
using NTFS that hey, this sucks.

01:22:52,230 --> 01:22:53,040
It crawls.

01:22:53,040 --> 01:22:54,140
It's just so slow.

01:22:54,140 --> 01:22:55,270
Who is at fault here?

01:22:55,270 --> 01:22:57,540
NTFS or FUSE or MacFUSE?

01:22:57,540 --> 01:22:58,780
What is going on?

01:22:58,780 --> 01:23:02,900
So well, what is going on is that NTFS the program is

01:23:02,900 --> 01:23:06,620
opening the raw disk, is doing a lot of random I/O, none of

01:23:06,620 --> 01:23:08,710
which is cached.

01:23:08,710 --> 01:23:09,350
So what to do?

01:23:09,350 --> 01:23:11,170
It is hitting the disk every time.

01:23:11,170 --> 01:23:14,060
And it's seeking every time, too, because it's doing a lot

01:23:14,060 --> 01:23:16,200
of random seeks and stuff.

01:23:16,200 --> 01:23:20,400
So essentially, the worst case for disk-based I/O.

01:23:20,400 --> 01:23:21,550
So one way to solve that.

01:23:21,550 --> 01:23:28,450
So as an experiment, I wrote a small file system that takes a

01:23:28,450 --> 01:23:33,840
disk like a DevDisk and mounts it as a file.

01:23:33,840 --> 01:23:35,800
Which is essentially the way Linux does

01:23:35,800 --> 01:23:37,890
it inside the kernel.

01:23:37,890 --> 01:23:40,610
But if you mount as a file, then you get the benefit of

01:23:40,610 --> 01:23:43,240
the buffer cache that is for files.

01:23:43,240 --> 01:23:46,810
So for certain workloads, it sped up performance

01:23:46,810 --> 01:23:49,070
like 20X for NTFS.

01:23:49,070 --> 01:23:51,660
So essentially, that shows that

01:23:51,660 --> 01:23:53,801
that's most of the reason.

01:23:53,801 --> 01:23:55,051
AUDIENCE: OK, thanks.

01:23:55,051 --> 01:23:59,222


01:23:59,222 --> 01:24:00,080
AMIT SINGH: All right.

01:24:00,080 --> 01:24:01,590
So no more questions.

01:24:01,590 --> 01:24:05,540
And if people do want to ask offline, please feel free.

01:24:05,540 --> 01:24:08,980
Thanks again for taking time to come here.


YouTube URL: https://www.youtube.com/watch?v=Yjdp70474LE


