Title: Google Open Source Live "Bazel day" | Bazel for Android Open Source Platform
Publication date: 2021-04-01
Playlist: Google Open Source Live
Description: 
	
Captions: 
	00:00:00,790 --> 00:00:08,360
[Music]

00:00:10,000 --> 00:00:13,280
hello there

00:00:10,880 --> 00:00:14,400
i'm lukasz berkey the tech lead of the

00:00:13,280 --> 00:00:15,839
bazel build tool

00:00:14,400 --> 00:00:18,560
today i would like to talk to you about

00:00:15,839 --> 00:00:19,279
one of the more significant significant

00:00:18,560 --> 00:00:21,279
projects

00:00:19,279 --> 00:00:23,359
which is to build android platform with

00:00:21,279 --> 00:00:24,320
bazel that is to say not individual

00:00:23,359 --> 00:00:26,240
android applications

00:00:24,320 --> 00:00:27,599
we can already do that but the operating

00:00:26,240 --> 00:00:29,760
system itself

00:00:27,599 --> 00:00:32,239
first i would like to talk to you a bit

00:00:29,760 --> 00:00:34,160
about the history

00:00:32,239 --> 00:00:35,520
and why we are doing this then i would

00:00:34,160 --> 00:00:37,920
like to talk to you about

00:00:35,520 --> 00:00:39,120
the difficulties there are and then i

00:00:37,920 --> 00:00:42,000
would like to talk

00:00:39,120 --> 00:00:43,040
to you about what exactly is happening

00:00:42,000 --> 00:00:46,160
and what

00:00:43,040 --> 00:00:49,760
accomplishments there are

00:00:46,160 --> 00:00:50,960
history long and storied i would like to

00:00:49,760 --> 00:00:54,000
not dwell too much

00:00:50,960 --> 00:00:56,879
on the individual items on this slide

00:00:54,000 --> 00:00:58,320
what is important is that both our both

00:00:56,879 --> 00:01:00,879
the internal monorepo

00:00:58,320 --> 00:01:01,840
and both android platform have a story

00:01:00,879 --> 00:01:04,559
that's almost

00:01:01,840 --> 00:01:07,119
two decades old both of them started out

00:01:04,559 --> 00:01:07,119
from make

00:01:07,200 --> 00:01:13,280
and since then they have diverged aren't

00:01:10,560 --> 00:01:13,840
repo is using the internal version of

00:01:13,280 --> 00:01:16,640
bezel

00:01:13,840 --> 00:01:18,000
called blaze android is currently using

00:01:16,640 --> 00:01:20,640
a version of

00:01:18,000 --> 00:01:22,080
a bespoke built-in code soon and still

00:01:20,640 --> 00:01:25,200
bits of make

00:01:22,080 --> 00:01:26,720
so why build android platform with bazel

00:01:25,200 --> 00:01:28,640
there are multiple reasons both

00:01:26,720 --> 00:01:31,360
organizational and technical

00:01:28,640 --> 00:01:32,720
the organizational reasons are simpler

00:01:31,360 --> 00:01:34,159
which is to have one

00:01:32,720 --> 00:01:36,320
is sponsoring the solution to the same

00:01:34,159 --> 00:01:37,680
problem and not two

00:01:36,320 --> 00:01:39,520
this and the health of parallel

00:01:37,680 --> 00:01:41,439
development resulted in different

00:01:39,520 --> 00:01:44,000
solutions to the same problems

00:01:41,439 --> 00:01:45,360
and developers do find it hard to move

00:01:44,000 --> 00:01:47,119
from one word to the other

00:01:45,360 --> 00:01:49,200
i speak from experience i spent a whole

00:01:47,119 --> 00:01:50,960
lot of time in our internal monorepo

00:01:49,200 --> 00:01:53,200
and then when i started working on

00:01:50,960 --> 00:01:56,320
android it took me quite a bit of time

00:01:53,200 --> 00:01:58,000
to learn all the separate tools and

00:01:56,320 --> 00:01:59,600
it's better for other developers not to

00:01:58,000 --> 00:02:01,840
have the same experience or the opposite

00:01:59,600 --> 00:02:05,280
of it

00:02:01,840 --> 00:02:08,319
the technical benefits are also many

00:02:05,280 --> 00:02:11,840
first off we do a we do provide a

00:02:08,319 --> 00:02:14,160
way to execute build actions remotely

00:02:11,840 --> 00:02:15,599
which is important because android is a

00:02:14,160 --> 00:02:17,120
big operating system

00:02:15,599 --> 00:02:19,120
and one of the biggest companies there

00:02:17,120 --> 00:02:21,920
are is that

00:02:19,120 --> 00:02:23,520
bills are slow distributing the build

00:02:21,920 --> 00:02:26,480
over multiple computers

00:02:23,520 --> 00:02:27,200
helps with that bazel also provides a

00:02:26,480 --> 00:02:28,879
sandbox

00:02:27,200 --> 00:02:30,720
for individual actions which is

00:02:28,879 --> 00:02:31,599
important for incrementality that is to

00:02:30,720 --> 00:02:34,560
say

00:02:31,599 --> 00:02:36,800
this this is how beta makes sure that

00:02:34,560 --> 00:02:39,040
when an input file is changed

00:02:36,800 --> 00:02:40,959
only those actions are redone that are

00:02:39,040 --> 00:02:43,920
actually affected by the change

00:02:40,959 --> 00:02:46,720
nothing more and nothing less this

00:02:43,920 --> 00:02:48,959
creates trust in the build tool

00:02:46,720 --> 00:02:51,440
because as anyone has ever said merclean

00:02:48,959 --> 00:02:54,640
knows that

00:02:51,440 --> 00:02:56,720
when this happens it can when

00:02:54,640 --> 00:02:58,080
incorrect incremental bills happen that

00:02:56,720 --> 00:02:59,920
can give rise to

00:02:58,080 --> 00:03:02,159
hours and hours of wasted time of

00:02:59,920 --> 00:03:04,640
debugging baser also provides

00:03:02,159 --> 00:03:05,920
a number of tools to look at the

00:03:04,640 --> 00:03:08,640
structure of the build

00:03:05,920 --> 00:03:10,480
for example to look at the structure of

00:03:08,640 --> 00:03:13,840
the action graph that is to say

00:03:10,480 --> 00:03:16,840
the graph that is composed by

00:03:13,840 --> 00:03:18,319
the actions and the input and the output

00:03:16,840 --> 00:03:20,640
files and

00:03:18,319 --> 00:03:23,280
the individual targets for example cpas

00:03:20,640 --> 00:03:26,400
or java binaries or libraries

00:03:23,280 --> 00:03:27,040
last but not least bazel has a vibrant

00:03:26,400 --> 00:03:29,280
community

00:03:27,040 --> 00:03:30,799
both inside and outside google which is

00:03:29,280 --> 00:03:32,000
useful for one to get started with

00:03:30,799 --> 00:03:34,560
building android

00:03:32,000 --> 00:03:35,200
of course life is not simple the next

00:03:34,560 --> 00:03:38,239
few slides

00:03:35,200 --> 00:03:39,120
will be about the difficulties that are

00:03:38,239 --> 00:03:40,319
on the way

00:03:39,120 --> 00:03:43,040
the root cause of almost all the

00:03:40,319 --> 00:03:46,159
difficulties there are is that

00:03:43,040 --> 00:03:47,599
as said before android platform and our

00:03:46,159 --> 00:03:51,440
internet monopoly

00:03:47,599 --> 00:03:54,480
have different long histories

00:03:51,440 --> 00:03:56,159
now the good part is that song the build

00:03:54,480 --> 00:03:57,519
system for the majority of android was

00:03:56,159 --> 00:03:59,519
modeled after bazel

00:03:57,519 --> 00:04:01,280
and was developed with full knowledge of

00:03:59,519 --> 00:04:03,760
beta structure

00:04:01,280 --> 00:04:05,439
and the other good part is that

00:04:03,760 --> 00:04:09,120
android's build does not need to be

00:04:05,439 --> 00:04:12,239
fully converted to bazel to see benefits

00:04:09,120 --> 00:04:14,560
the best part is that even though xong

00:04:12,239 --> 00:04:18,079
borrow some concept from bazel

00:04:14,560 --> 00:04:20,799
it's just not quite the same

00:04:18,079 --> 00:04:21,759
which makes the integration between the

00:04:20,799 --> 00:04:24,960
two tools

00:04:21,759 --> 00:04:25,520
hard and there will be a long migration

00:04:24,960 --> 00:04:28,160
phase

00:04:25,520 --> 00:04:28,960
because we cannot just wave a magic wand

00:04:28,160 --> 00:04:32,160
to

00:04:28,960 --> 00:04:32,960
turn someone into bazel what's even

00:04:32,160 --> 00:04:36,000
worse

00:04:32,960 --> 00:04:37,120
is that the migration to song has not

00:04:36,000 --> 00:04:39,919
been finished yet

00:04:37,120 --> 00:04:42,000
and therefore for a while there are

00:04:39,919 --> 00:04:44,720
going to be three build systems

00:04:42,000 --> 00:04:45,360
in android platform that is to say song

00:04:44,720 --> 00:04:48,720
make

00:04:45,360 --> 00:04:51,040
and bazel which makes interoperability

00:04:48,720 --> 00:04:51,759
not so easy of course there is a reason

00:04:51,040 --> 00:04:54,320
why song is

00:04:51,759 --> 00:04:55,919
different from bazel and that is mostly

00:04:54,320 --> 00:04:57,040
because the world of android is also

00:04:55,919 --> 00:05:00,400
different

00:04:57,040 --> 00:05:04,160
than the world of the internal monorepo

00:05:00,400 --> 00:05:05,759
bazel grew up in the international repo

00:05:04,160 --> 00:05:08,720
is a well monorepo

00:05:05,759 --> 00:05:10,080
which means among other things that it's

00:05:08,720 --> 00:05:12,479
much more uniform

00:05:10,080 --> 00:05:14,080
we have a uniform testing environment we

00:05:12,479 --> 00:05:15,759
have a

00:05:14,080 --> 00:05:18,160
uniform environment to deploy to okay

00:05:15,759 --> 00:05:21,360
not completely uniform

00:05:18,160 --> 00:05:23,360
but clearly it's much simpler uh than

00:05:21,360 --> 00:05:25,120
the land of android where there are many

00:05:23,360 --> 00:05:27,360
many different devices

00:05:25,120 --> 00:05:28,479
which all need to work in addition to

00:05:27,360 --> 00:05:30,720
that

00:05:28,479 --> 00:05:32,639
when one talks about android platform

00:05:30,720 --> 00:05:35,520
it's not really one code base

00:05:32,639 --> 00:05:36,240
it's more like many different core bases

00:05:35,520 --> 00:05:39,600
the

00:05:36,240 --> 00:05:41,919
biggest difference is that there is aosp

00:05:39,600 --> 00:05:43,120
which is a large part of android but not

00:05:41,919 --> 00:05:44,479
all of it

00:05:43,120 --> 00:05:47,039
and there is the full android source

00:05:44,479 --> 00:05:49,600
tree but in addition to that

00:05:47,039 --> 00:05:51,280
different partners google works with

00:05:49,600 --> 00:05:52,960
that is to say

00:05:51,280 --> 00:05:54,560
companies who make chipsets or companies

00:05:52,960 --> 00:05:56,160
who make the actual devices

00:05:54,560 --> 00:05:57,840
have their own code they add or remove

00:05:56,160 --> 00:06:00,880
to android

00:05:57,840 --> 00:06:02,400
and there is also the effort to

00:06:00,880 --> 00:06:04,479
build to build parts of android

00:06:02,400 --> 00:06:05,520
separately such that they can be

00:06:04,479 --> 00:06:08,720
deployed

00:06:05,520 --> 00:06:10,639
separately to the actual devices

00:06:08,720 --> 00:06:12,400
that is to say to do partial system

00:06:10,639 --> 00:06:13,919
updates which is which is called project

00:06:12,400 --> 00:06:16,240
mainline

00:06:13,919 --> 00:06:17,360
in order to be to be certain that a part

00:06:16,240 --> 00:06:18,960
of the operating system

00:06:17,360 --> 00:06:20,880
can be deployed separately it also has

00:06:18,960 --> 00:06:21,919
to build separately which is yet another

00:06:20,880 --> 00:06:24,880
way to slice and

00:06:21,919 --> 00:06:26,400
dice the source tree android also comes

00:06:24,880 --> 00:06:28,400
from a hardware background

00:06:26,400 --> 00:06:29,680
unlike our monorepo which comes from a

00:06:28,400 --> 00:06:32,319
softer background

00:06:29,680 --> 00:06:34,240
which is a salient in a number of ways

00:06:32,319 --> 00:06:38,160
for example

00:06:34,240 --> 00:06:41,919
android puts so much puts much more

00:06:38,160 --> 00:06:42,880
stress on integration testing that is to

00:06:41,919 --> 00:06:44,639
say

00:06:42,880 --> 00:06:47,039
uploading software to a natural piece of

00:06:44,639 --> 00:06:50,160
hardware and see

00:06:47,039 --> 00:06:51,680
if it works and less emphasis on unit

00:06:50,160 --> 00:06:53,520
testing

00:06:51,680 --> 00:06:55,199
that is to say testing a small piece of

00:06:53,520 --> 00:06:55,759
code separately this is the exact

00:06:55,199 --> 00:06:58,160
opposite

00:06:55,759 --> 00:06:58,880
what we have in our internal monorepo

00:06:58,160 --> 00:07:00,800
where

00:06:58,880 --> 00:07:02,800
the rule is unit testing with a few

00:07:00,800 --> 00:07:04,880
integration tests spin

00:07:02,800 --> 00:07:06,240
in between and of course we have the

00:07:04,880 --> 00:07:09,840
biggest problem

00:07:06,240 --> 00:07:11,599
which is the problem of every developer

00:07:09,840 --> 00:07:13,120
that has ever maintained our code base

00:07:11,599 --> 00:07:16,000
with a long life which is

00:07:13,120 --> 00:07:17,280
legacy code now in the background you

00:07:16,000 --> 00:07:19,599
see cobol

00:07:17,280 --> 00:07:22,639
that we don't have but those almost two

00:07:19,599 --> 00:07:25,840
decades of history have resulted in code

00:07:22,639 --> 00:07:30,000
that is sometimes not so easy

00:07:25,840 --> 00:07:31,360
to live with so what's happening there

00:07:30,000 --> 00:07:32,400
are three projects that are happening at

00:07:31,360 --> 00:07:34,400
the moment

00:07:32,400 --> 00:07:36,080
the first is executing actions through

00:07:34,400 --> 00:07:38,960
bazel the second

00:07:36,080 --> 00:07:40,479
is uh doing the product configuration

00:07:38,960 --> 00:07:41,440
through starlark basis configuration

00:07:40,479 --> 00:07:44,479
language

00:07:41,440 --> 00:07:46,639
and the third is to run mixed builds

00:07:44,479 --> 00:07:49,840
with song bazel and cathy

00:07:46,639 --> 00:07:53,120
katie is a term of art in android land

00:07:49,840 --> 00:07:58,800
it's a re-implementation of make that

00:07:53,120 --> 00:08:02,160
was done a few years ago for performance

00:07:58,800 --> 00:08:04,400
i would like to show the state of uh

00:08:02,160 --> 00:08:06,160
and android's builds before beta came

00:08:04,400 --> 00:08:08,400
around

00:08:06,160 --> 00:08:09,759
i understand this graph is somewhat

00:08:08,400 --> 00:08:12,319
complicated

00:08:09,759 --> 00:08:14,400
but the as but the essence is that the

00:08:12,319 --> 00:08:16,720
build consists of three steps

00:08:14,400 --> 00:08:18,319
first what you see on the left is the

00:08:16,720 --> 00:08:21,360
product configuration part

00:08:18,319 --> 00:08:22,879
where it is decided what exactly needs

00:08:21,360 --> 00:08:25,199
to be built

00:08:22,879 --> 00:08:27,039
its input is a bunch of make files that

00:08:25,199 --> 00:08:30,160
is processed by katie that is to say

00:08:27,039 --> 00:08:32,240
the reimposition of make android has

00:08:30,160 --> 00:08:34,000
which turns it into a set of

00:08:32,240 --> 00:08:36,560
configuration variables

00:08:34,000 --> 00:08:38,320
these variables are ingested by song

00:08:36,560 --> 00:08:40,880
androids bespoke build tool

00:08:38,320 --> 00:08:43,039
and another instance of katie which also

00:08:40,880 --> 00:08:44,800
take blueprint files and make files

00:08:43,039 --> 00:08:47,440
that is to say the configuration files

00:08:44,800 --> 00:08:50,720
of song and katie respectively

00:08:47,440 --> 00:08:52,320
and turn them into ninja files which are

00:08:50,720 --> 00:08:53,760
the description of the action graph that

00:08:52,320 --> 00:08:57,200
is to say the command lines

00:08:53,760 --> 00:09:00,080
that need to be done to do the build and

00:08:57,200 --> 00:09:01,519
their input and output files then after

00:09:00,080 --> 00:09:03,200
this

00:09:01,519 --> 00:09:06,560
a tool called ninja takes the ninja

00:09:03,200 --> 00:09:08,320
files and actually executes the builds

00:09:06,560 --> 00:09:10,160
where you want to be well where we want

00:09:08,320 --> 00:09:11,839
to be is much simpler

00:09:10,160 --> 00:09:13,680
we want to have built files that is to

00:09:11,839 --> 00:09:16,160
say the configuration files of bazel

00:09:13,680 --> 00:09:17,680
that describe both how to build things

00:09:16,160 --> 00:09:20,800
and what to build

00:09:17,680 --> 00:09:22,240
have it ingested by bazel and have

00:09:20,800 --> 00:09:23,920
executed the resulting actions and i'll

00:09:22,240 --> 00:09:27,279
put the system image

00:09:23,920 --> 00:09:29,279
so what is the state of the effects now

00:09:27,279 --> 00:09:32,000
it's slightly more complicated because

00:09:29,279 --> 00:09:35,279
it's an intermediate phase

00:09:32,000 --> 00:09:37,519
on this diagram the green boxes

00:09:35,279 --> 00:09:40,000
are the pieces of code that are

00:09:37,519 --> 00:09:42,720
implemented for the migration

00:09:40,000 --> 00:09:44,320
firstly for the product configuration

00:09:42,720 --> 00:09:47,680
there are two new tools

00:09:44,320 --> 00:09:50,880
one is to convert the make files to

00:09:47,680 --> 00:09:54,000
starlark files with the extension bcl

00:09:50,880 --> 00:09:55,839
that is to say bazel

00:09:54,000 --> 00:09:57,120
and a tool to interpret those busy

00:09:55,839 --> 00:10:00,160
alphas

00:09:57,120 --> 00:10:03,279
to emit the configuration variables that

00:10:00,160 --> 00:10:05,680
used to be emitted by cutty

00:10:03,279 --> 00:10:06,720
then in addition to sung and kathy we

00:10:05,680 --> 00:10:09,040
have bazel

00:10:06,720 --> 00:10:10,320
and build files it's config files and a

00:10:09,040 --> 00:10:13,120
tool to convert

00:10:10,320 --> 00:10:13,760
the configuration files of song to build

00:10:13,120 --> 00:10:16,560
files

00:10:13,760 --> 00:10:18,399
we call this tool bp to build that is to

00:10:16,560 --> 00:10:20,959
say blue pin to build

00:10:18,399 --> 00:10:22,880
currently bazel also emits ninja files

00:10:20,959 --> 00:10:25,600
in order to facilitate two different

00:10:22,880 --> 00:10:28,640
ways of executing actions

00:10:25,600 --> 00:10:32,000
the legacy mode with ninja

00:10:28,640 --> 00:10:35,200
and the new mode with bazel which gives

00:10:32,000 --> 00:10:37,120
one access to all the goodies beza

00:10:35,200 --> 00:10:39,680
provides

00:10:37,120 --> 00:10:41,440
these three work streams are in various

00:10:39,680 --> 00:10:42,720
tests of completion

00:10:41,440 --> 00:10:44,480
we are the further along with actual

00:10:42,720 --> 00:10:47,200
execution

00:10:44,480 --> 00:10:49,200
bazel can run a full android build as

00:10:47,200 --> 00:10:50,959
the action executor

00:10:49,200 --> 00:10:52,640
what remains is to make sure that the

00:10:50,959 --> 00:10:53,120
action graph is well specified that is

00:10:52,640 --> 00:10:54,640
to say

00:10:53,120 --> 00:10:56,800
each action has its inputs and outputs

00:10:54,640 --> 00:10:58,480
declared properly which is important for

00:10:56,800 --> 00:11:00,480
incremental builds

00:10:58,480 --> 00:11:01,600
and to integrate bazel's remote

00:11:00,480 --> 00:11:03,519
execution client

00:11:01,600 --> 00:11:05,200
into the build currently there's a way

00:11:03,519 --> 00:11:08,320
to run builds remotely

00:11:05,200 --> 00:11:10,000
using a code tool called reclient which

00:11:08,320 --> 00:11:12,160
is a common line tool that can be called

00:11:10,000 --> 00:11:13,440
either by ninja or by bazel

00:11:12,160 --> 00:11:15,200
the second workstream product

00:11:13,440 --> 00:11:17,279
configuration is also seeing good

00:11:15,200 --> 00:11:19,920
progress

00:11:17,279 --> 00:11:21,600
the make to starla conversion tool has

00:11:19,920 --> 00:11:24,640
been implemented

00:11:21,600 --> 00:11:25,600
and there are no numbers in it and there

00:11:24,640 --> 00:11:29,040
is good progress

00:11:25,600 --> 00:11:32,480
on integrating it into the actual build

00:11:29,040 --> 00:11:34,640
what remains is actually converting the

00:11:32,480 --> 00:11:37,279
make files to that bezier files and

00:11:34,640 --> 00:11:39,200
checking them into the source tree

00:11:37,279 --> 00:11:40,800
the largest challenges there are in the

00:11:39,200 --> 00:11:42,720
third works theme that is to say

00:11:40,800 --> 00:11:45,760
integrating bazel into a build

00:11:42,720 --> 00:11:48,000
with sung and katie

00:11:45,760 --> 00:11:49,120
because that's when there need to be a

00:11:48,000 --> 00:11:50,560
conceptual mapping

00:11:49,120 --> 00:11:52,480
between the concepts on these three

00:11:50,560 --> 00:11:53,040
build systems and it turns out that all

00:11:52,480 --> 00:11:56,160
three

00:11:53,040 --> 00:11:59,440
have a complicated conceptual model

00:11:56,160 --> 00:12:02,240
that need to be reconciled somehow

00:11:59,440 --> 00:12:03,760
current work is being done on finding a

00:12:02,240 --> 00:12:05,040
mapping between the concepts of song and

00:12:03,760 --> 00:12:06,880
basil

00:12:05,040 --> 00:12:08,800
kathy not so much because the world of

00:12:06,880 --> 00:12:11,360
cut is much simpler

00:12:08,800 --> 00:12:14,320
and today's progress on implementing an

00:12:11,360 --> 00:12:16,480
automatic conversion tool

00:12:14,320 --> 00:12:17,360
checking in build files instead of

00:12:16,480 --> 00:12:19,600
bluefin pies

00:12:17,360 --> 00:12:21,200
haven't been started yet we'll start

00:12:19,600 --> 00:12:24,079
once

00:12:21,200 --> 00:12:26,880
there's enough confidence about the the

00:12:24,079 --> 00:12:29,200
fidelity of set conversion tool

00:12:26,880 --> 00:12:31,040
i would like to talk about uh action

00:12:29,200 --> 00:12:34,320
execution that is to say

00:12:31,040 --> 00:12:36,560
using bazel as a better ninja this was

00:12:34,320 --> 00:12:38,399
work that was much easier than expected

00:12:36,560 --> 00:12:40,399
mostly because the interface to action

00:12:38,399 --> 00:12:41,920
execution is pretty narrow

00:12:40,399 --> 00:12:43,519
an action after all is a very simple

00:12:41,920 --> 00:12:45,600
thing it has input files

00:12:43,519 --> 00:12:47,200
output files and a command line that one

00:12:45,600 --> 00:12:49,279
needs to execute

00:12:47,200 --> 00:12:50,959
the work required some design

00:12:49,279 --> 00:12:54,000
compromises in bazel

00:12:50,959 --> 00:12:57,200
but nothing too serious

00:12:54,000 --> 00:12:59,120
and it actually worked while

00:12:57,200 --> 00:13:00,399
by requiring only very small changes to

00:12:59,120 --> 00:13:02,320
anal platform

00:13:00,399 --> 00:13:04,800
mostly to specify a missing input or

00:13:02,320 --> 00:13:07,519
outputs here and there

00:13:04,800 --> 00:13:08,160
this is not default yet but i am very

00:13:07,519 --> 00:13:10,480
confident

00:13:08,160 --> 00:13:11,519
that beza can actually work as an action

00:13:10,480 --> 00:13:13,120
executor

00:13:11,519 --> 00:13:15,040
and it provides a bunch of benefits

00:13:13,120 --> 00:13:17,680
already

00:13:15,040 --> 00:13:18,480
one can use bazel's remote execution

00:13:17,680 --> 00:13:21,200
engine

00:13:18,480 --> 00:13:23,279
one can use basis action sandbox one can

00:13:21,200 --> 00:13:26,240
use bazel to query the action graph

00:13:23,279 --> 00:13:26,959
of the build and bazel also provides

00:13:26,240 --> 00:13:29,680
change pruning

00:13:26,959 --> 00:13:30,880
that is to say the ability not to

00:13:29,680 --> 00:13:32,399
execute an action

00:13:30,880 --> 00:13:34,320
when its optimizations have been

00:13:32,399 --> 00:13:35,040
executed but did not change their output

00:13:34,320 --> 00:13:37,680
files

00:13:35,040 --> 00:13:39,440
for example when you add a command to a

00:13:37,680 --> 00:13:42,560
setup source file

00:13:39,440 --> 00:13:44,079
then the compile is executed but the

00:13:42,560 --> 00:13:46,320
object file it emits

00:13:44,079 --> 00:13:48,560
is not changed therefore you don't need

00:13:46,320 --> 00:13:50,240
to actually rerun the linker

00:13:48,560 --> 00:13:52,800
the product configuration is a more

00:13:50,240 --> 00:13:54,000
interesting part because it's unique to

00:13:52,800 --> 00:13:57,040
android

00:13:54,000 --> 00:14:00,240
it's a part of

00:13:57,040 --> 00:14:01,360
android that is not touched very

00:14:00,240 --> 00:14:03,680
frequently

00:14:01,360 --> 00:14:05,040
and therefore there is there is not a

00:14:03,680 --> 00:14:08,880
lot of knowledge spread

00:14:05,040 --> 00:14:11,839
about it at google and that partners

00:14:08,880 --> 00:14:13,600
it drives it's a way to describe in a

00:14:11,839 --> 00:14:15,120
modular fashion

00:14:13,600 --> 00:14:18,240
what exactly needs to be part of a

00:14:15,120 --> 00:14:19,360
system image and it's built on the 1976

00:14:18,240 --> 00:14:22,959
vintage

00:14:19,360 --> 00:14:25,040
make build tool the idea is to

00:14:22,959 --> 00:14:27,120
say things like i want to build this

00:14:25,040 --> 00:14:30,560
device and this device should be

00:14:27,120 --> 00:14:33,839
have an aosp image but with this

00:14:30,560 --> 00:14:34,720
android app in addition and with a few

00:14:33,839 --> 00:14:40,160
parts

00:14:34,720 --> 00:14:40,160
removed since it's built on top of make

00:14:40,240 --> 00:14:47,199
there isn't a lot of error checking

00:14:43,519 --> 00:14:49,440
in there and it's not very well tested

00:14:47,199 --> 00:14:51,600
but on the flip side the make files

00:14:49,440 --> 00:14:54,720
describing the product configuration

00:14:51,600 --> 00:14:56,160
are very structured and kind of easy to

00:14:54,720 --> 00:14:58,959
understand what they want to do

00:14:56,160 --> 00:15:00,480
which is to our advantage because it

00:14:58,959 --> 00:15:04,079
makes it easy

00:15:00,480 --> 00:15:05,600
to build a parser actually i'm saying

00:15:04,079 --> 00:15:08,160
parser but sometimes

00:15:05,600 --> 00:15:08,800
one doesn't actually need to pass make

00:15:08,160 --> 00:15:12,240
one can

00:15:08,800 --> 00:15:14,560
only use a text based method to

00:15:12,240 --> 00:15:16,880
understand them and to turn them into

00:15:14,560 --> 00:15:19,440
stalk files

00:15:16,880 --> 00:15:20,959
here's an example of how a make file

00:15:19,440 --> 00:15:23,839
looks like

00:15:20,959 --> 00:15:24,399
that is to say this product should be

00:15:23,839 --> 00:15:27,199
like

00:15:24,399 --> 00:15:29,199
cuttlefish with a package called

00:15:27,199 --> 00:15:31,839
craftsvm

00:15:29,199 --> 00:15:32,959
in addition and so on and here is how

00:15:31,839 --> 00:15:37,040
the same concept

00:15:32,959 --> 00:15:37,040
would look like when this club is still

00:15:38,839 --> 00:15:41,279
locked

00:15:40,079 --> 00:15:44,240
the last thing i would like to talk

00:15:41,279 --> 00:15:46,079
about is mixed mole bills that is to say

00:15:44,240 --> 00:15:47,920
making sun and basil and today

00:15:46,079 --> 00:15:50,160
certigricati

00:15:47,920 --> 00:15:52,240
interoperate with each other then the

00:15:50,160 --> 00:15:53,920
chart of this system

00:15:52,240 --> 00:15:56,160
will be a tool to convert the

00:15:53,920 --> 00:15:58,959
configuration configuration files of

00:15:56,160 --> 00:16:00,959
soon that is to say blueprint files into

00:15:58,959 --> 00:16:04,000
those of bazel that is to say

00:16:00,959 --> 00:16:04,639
busy files we wanted this tool to be

00:16:04,000 --> 00:16:08,079
mostly

00:16:04,639 --> 00:16:10,720
automatic because that's the only way we

00:16:08,079 --> 00:16:12,880
can migrate the koda scale

00:16:10,720 --> 00:16:13,839
it will probably not happen it will

00:16:12,880 --> 00:16:17,120
probably need some

00:16:13,839 --> 00:16:19,279
some manual help because uh both sung

00:16:17,120 --> 00:16:22,240
and bezel have rich conceptual models

00:16:19,279 --> 00:16:23,759
and there is no no point in implementing

00:16:22,240 --> 00:16:24,480
an automatic mechanism for migrating

00:16:23,759 --> 00:16:26,079
things

00:16:24,480 --> 00:16:29,519
that is used just once or twice in the

00:16:26,079 --> 00:16:31,759
code base but we do want to

00:16:29,519 --> 00:16:34,560
the overall majority of the migration to

00:16:31,759 --> 00:16:34,560
be automatic

00:16:34,639 --> 00:16:38,560
the reason why this is difficult is that

00:16:36,720 --> 00:16:40,720
because

00:16:38,560 --> 00:16:42,399
sung and bezel are extensible in

00:16:40,720 --> 00:16:44,639
different ways

00:16:42,399 --> 00:16:45,600
soon is extremely extensible in gold

00:16:44,639 --> 00:16:47,279
which means that

00:16:45,600 --> 00:16:48,720
extensions can use the full power of

00:16:47,279 --> 00:16:51,120
gold

00:16:48,720 --> 00:16:51,920
and bazel is accessible in starlark

00:16:51,120 --> 00:16:53,519
which is a

00:16:51,920 --> 00:16:55,680
very limited programming language with a

00:16:53,519 --> 00:16:58,720
very limited api

00:16:55,680 --> 00:17:02,800
we want to market code that

00:16:58,720 --> 00:17:04,720
can do more to a system that can do less

00:17:02,800 --> 00:17:06,000
now stalac has this limitations for a

00:17:04,720 --> 00:17:07,919
very good reason

00:17:06,000 --> 00:17:09,280
this is what provides opportunities for

00:17:07,919 --> 00:17:12,319
bezel to

00:17:09,280 --> 00:17:14,559
do sophisticated ways of caching

00:17:12,319 --> 00:17:16,079
but it's a difficulty the other

00:17:14,559 --> 00:17:18,000
difficulty we are facing

00:17:16,079 --> 00:17:19,199
is that we don't want to make the lives

00:17:18,000 --> 00:17:22,559
of people who work

00:17:19,199 --> 00:17:25,199
with android hardware not even

00:17:22,559 --> 00:17:26,079
temporarily which means that we have to

00:17:25,199 --> 00:17:28,880
be careful

00:17:26,079 --> 00:17:30,240
to slot bazel into the build process in

00:17:28,880 --> 00:17:32,080
such a way

00:17:30,240 --> 00:17:33,760
that it doesn't make build slower or

00:17:32,080 --> 00:17:36,720
less comprehensible

00:17:33,760 --> 00:17:37,039
admittedly this is difficult so what is

00:17:36,720 --> 00:17:40,000
it

00:17:37,039 --> 00:17:40,960
that has already been accomplished on

00:17:40,000 --> 00:17:42,799
bionic

00:17:40,960 --> 00:17:44,559
there's good progress we can build

00:17:42,799 --> 00:17:48,000
bionic you know in such a way

00:17:44,559 --> 00:17:51,280
that is a bit by bit the same as

00:17:48,000 --> 00:17:55,039
the build done without bazel

00:17:51,280 --> 00:17:58,240
what remains however is building bionic

00:17:55,039 --> 00:18:00,640
in all the various ways that

00:17:58,240 --> 00:18:02,320
in which it's built within the build for

00:18:00,640 --> 00:18:05,280
example

00:18:02,320 --> 00:18:06,000
it's built with various sanitizers acn

00:18:05,280 --> 00:18:09,440
ubison

00:18:06,000 --> 00:18:11,120
and so and so forth it's built so as to

00:18:09,440 --> 00:18:12,799
provide an interface for various android

00:18:11,120 --> 00:18:15,360
api levels

00:18:12,799 --> 00:18:16,480
such that it can be hit against by

00:18:15,360 --> 00:18:19,600
applications

00:18:16,480 --> 00:18:22,960
requiring those various api levels

00:18:19,600 --> 00:18:24,559
all this remains executing

00:18:22,960 --> 00:18:27,760
the actions comprising the build with

00:18:24,559 --> 00:18:30,000
bazel is mostly risk

00:18:27,760 --> 00:18:33,200
the pixel 3 system image can be built

00:18:30,000 --> 00:18:34,880
with bezel without problems

00:18:33,200 --> 00:18:36,880
which means that i'm pretty confident

00:18:34,880 --> 00:18:41,360
that everything else can be do

00:18:36,880 --> 00:18:44,720
but it's pixel 3 we tested it with

00:18:41,360 --> 00:18:46,000
and now one can start adding edges to

00:18:44,720 --> 00:18:48,559
the action graph

00:18:46,000 --> 00:18:50,880
to make it fully declared and

00:18:48,559 --> 00:18:53,520
incremental

00:18:50,880 --> 00:18:54,799
i also consider product configuration a

00:18:53,520 --> 00:18:58,000
source problem

00:18:54,799 --> 00:19:00,960
it's not integrated yet into the build

00:18:58,000 --> 00:19:01,440
but the translator is not operational

00:19:00,960 --> 00:19:03,840
and

00:19:01,440 --> 00:19:05,200
there are no known bags on a full build

00:19:03,840 --> 00:19:08,000
which means that there are probably

00:19:05,200 --> 00:19:09,440
no serious bugs that remain so it

00:19:08,000 --> 00:19:10,240
appears that most of the risk in the

00:19:09,440 --> 00:19:13,360
past

00:19:10,240 --> 00:19:14,320
there is still some risk left and i

00:19:13,360 --> 00:19:16,080
think that

00:19:14,320 --> 00:19:17,919
a large part of the disk will become by

00:19:16,080 --> 00:19:19,520
the time we can build bionic

00:19:17,919 --> 00:19:22,559
in all the ways that it needs to be

00:19:19,520 --> 00:19:24,559
built during a full build

00:19:22,559 --> 00:19:26,240
but all in all i'm happy with the

00:19:24,559 --> 00:19:29,200
progress so far

00:19:26,240 --> 00:19:30,320
on to the future thank you for listening

00:19:29,200 --> 00:19:32,000
to this talk

00:19:30,320 --> 00:19:39,840
and i hope you will follow further

00:19:32,000 --> 00:19:39,840
development on this project

00:19:44,400 --> 00:19:46,480

YouTube URL: https://www.youtube.com/watch?v=VyW04BwiBSs


