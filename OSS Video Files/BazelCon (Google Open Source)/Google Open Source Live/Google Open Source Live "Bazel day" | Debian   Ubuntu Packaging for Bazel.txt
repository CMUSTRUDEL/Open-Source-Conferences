Title: Google Open Source Live "Bazel day" | Debian   Ubuntu Packaging for Bazel
Publication date: 2021-04-01
Playlist: Google Open Source Live
Description: 
	
Captions: 
	00:00:10,230 --> 00:00:13,467
Hello, thanks for joining this talk on Debian packaging for Bazel.

00:00:13,467 --> 00:00:17,338
I'm Yun, I work on the Bazel team from the Google Munich office.

00:00:17,338 --> 00:00:19,740
And I'm Olek, I'm a Debian developer

00:00:19,740 --> 00:00:22,577
and the lead for the Debian packaging effort for Bazel.

00:00:23,077 --> 00:00:25,192
In this session we want to talk about

00:00:25,192 --> 00:00:29,116
how we manage to package Bazel for the Debian distribution.

00:00:29,116 --> 00:00:33,120
First, we'll show you what situation led to our collaboration

00:00:33,120 --> 00:00:37,758
then we'll talk about how we overcame some of the challenges we've had

00:00:37,758 --> 00:00:40,895
from both the Bazel side and the Debian side.

00:00:40,895 --> 00:00:44,572
Lastly, we'll say what is the outcome of this joint effort so far

00:00:44,572 --> 00:00:46,600
and what's the remaining work.

00:00:46,600 --> 00:00:50,704
Olek will start with some background of this effort.

00:00:50,704 --> 00:00:52,006
Thanks, Yun.

00:00:52,006 --> 00:00:56,182
So, this all started when I joined the Debian Med Team in the spring of 2020

00:00:56,182 --> 00:00:58,379
because of their efforts to package software

00:00:58,379 --> 00:01:01,181
that could help experts fighting Covid 19.

00:01:01,181 --> 00:01:04,485
One of their highest priority packages was Tensorflow.

00:01:04,485 --> 00:01:08,589
However, that package was also marked as extraordinarily difficult.

00:01:08,589 --> 00:01:11,425
At this time, Bazel was not available in Debian

00:01:11,425 --> 00:01:13,794
therefore, previous packaging efforts

00:01:13,794 --> 00:01:18,523
had unsuccessfully attempted to implement a custom-built system.

00:01:19,039 --> 00:01:21,001
The solution was obvious to me:

00:01:21,001 --> 00:01:23,819
package Bazel for Debian, how hard could it be?

00:01:24,505 --> 00:01:28,080
Unfortunately, neither the Debian team nor the Bazel team

00:01:28,080 --> 00:01:31,934
individually possessed all the required expertise to make that happen.

00:01:32,780 --> 00:01:35,182
Therefore, we rapidly put together an effort

00:01:35,182 --> 00:01:39,086
to leverage each team's unique abilities, to achieve this goal.

00:01:40,120 --> 00:01:42,540
Now, the primary goal was simple:

00:01:42,540 --> 00:01:44,825
introduce Bazel into Debian

00:01:44,825 --> 00:01:47,194
so that it could be used to build Tenserflow.

00:01:47,194 --> 00:01:49,163
Because of the pandemic implications

00:01:49,163 --> 00:01:52,242
we wanted to proceed as quickly as possible.

00:01:52,242 --> 00:01:56,864
Therefore, we agreed that we were willing to accept temporary workarounds

00:01:56,864 --> 00:01:59,467
if it helped us to achieve our goal faster.

00:01:59,473 --> 00:02:02,045
We didn't know exactly how long this effort would take

00:02:02,045 --> 00:02:04,695
but we wanted to finish within a couple of months.

00:02:04,695 --> 00:02:08,826
However, the previous packaging effort had lasted five years

00:02:08,826 --> 00:02:11,373
and had ultimately been unsuccessful.

00:02:12,019 --> 00:02:14,154
That was a sobering reality.

00:02:14,154 --> 00:02:17,559
Yun will now tell you more about our collaboration on this project.

00:02:18,525 --> 00:02:23,197
So, the Debian team first reached out to the Bazel team on GitHub.

00:02:23,197 --> 00:02:26,674
We soon had a video conference in April 2020.

00:02:26,674 --> 00:02:31,105
A task force was set up with me being the contact point from the Bazel team

00:02:31,105 --> 00:02:32,860
and Olek from the Debian team.

00:02:32,860 --> 00:02:37,087
In the first few weeks we had frequent email exchanges and video meetings

00:02:37,087 --> 00:02:40,180
to understand what problems we had to solve.

00:02:40,180 --> 00:02:43,383
And, finally, we came up with a viable work plan.

00:02:43,383 --> 00:02:47,344
So, what challenges did we have to overcome exactly?

00:02:47,344 --> 00:02:49,590
I'll first talk about the Bazel side.

00:02:49,590 --> 00:02:53,093
To comply with the Debian policy for packaging software

00:02:53,093 --> 00:02:58,033
we had to bootstrap and build Bazel without any bundled dependencies in source

00:02:58,033 --> 00:03:01,161
or any downloaded dependencies from the Internet.

00:03:01,161 --> 00:03:04,938
Also, we had to install Bazel following Debian's standards.

00:03:04,938 --> 00:03:06,900
I'll go into more detail.

00:03:08,609 --> 00:03:12,658
Bazel bundles some of its dependencies as source code and jar files

00:03:12,658 --> 00:03:14,716
under the third-party directory.

00:03:14,716 --> 00:03:18,085
In the Debian build, those dependencies should be replaced

00:03:18,085 --> 00:03:20,430
with their corresponding Debian packages

00:03:20,430 --> 00:03:22,422
which I installed on the system.

00:03:22,422 --> 00:03:27,795
So, for example JSON 2.8 is checked in Bazel source

00:03:27,795 --> 00:03:30,164
and then used via our Java import rule.

00:03:30,164 --> 00:03:35,303
So, how did we make use of the JSON jar installed via the Debian package?

00:03:35,303 --> 00:03:40,834
First, we created a new local repository rule, pointing to usr/share/java

00:03:40,834 --> 00:03:43,778
because that's where all Java libraries are installed.

00:03:43,784 --> 00:03:47,314
We named this repo as debian_java_deps.

00:03:47,314 --> 00:03:50,168
Of course, we had to write a BUILD file for this repo

00:03:50,184 --> 00:03:53,597
so that Bazel knows what targets are available.

00:03:53,597 --> 00:03:56,857
Here we write a Java import rule for JSON.

00:03:56,857 --> 00:04:01,361
Note that the name of this target

00:04:01,361 --> 00:04:05,465
is exactly the same as the one in the third-party directory.

00:04:05,465 --> 00:04:08,602
To be able to replace the original JSON targets

00:04:08,602 --> 00:04:12,333
with the one in the local repository debian_java_debs

00:04:12,333 --> 00:04:15,108
we wrote a macro for the Java input rule

00:04:15,108 --> 00:04:17,511
called distrib_java_import.

00:04:17,511 --> 00:04:21,809
It is essentially an analyze rule with a select statement.

00:04:21,815 --> 00:04:25,219
By default, it delegates to a native Java import rule

00:04:25,219 --> 00:04:28,121
that uses the checked_in jar file.

00:04:28,121 --> 00:04:31,291
We use an attribute called "enable distributions"

00:04:31,291 --> 00:04:34,759
to indicate what distributions are supported.

00:04:35,495 --> 00:04:39,032
If Debian is in the list of enable_distributions

00:04:39,032 --> 00:04:42,386
it means there is a target in the debian_java_deps repo

00:04:42,402 --> 00:04:43,524
with the same name

00:04:43,524 --> 00:04:46,273
that can replace the original target.

00:04:46,273 --> 00:04:50,777
Then a condition of the Debian BUILD for this target is added.

00:04:50,777 --> 00:04:54,982
So, when a config setting for the Debian BUILD is matched

00:04:54,982 --> 00:04:59,686
it redirects the target to the one in the debian_java_deps repo.

00:04:59,686 --> 00:05:04,124
We also created similar local repositories and wrote similar macros

00:05:04,124 --> 00:05:06,627
for CC library, CC binary

00:05:06,627 --> 00:05:12,266
so that dependencies like zlib or the protoc compiler can also be replaced.

00:05:12,266 --> 00:05:15,756
So, with not so intrusive changes in Bazel's BUILD file

00:05:15,756 --> 00:05:21,291
we added the ability to build Bazel with libraries installed on the system

00:05:21,291 --> 00:05:27,247
which can be enabled by the --define=distribution=debian flag.

00:05:27,247 --> 00:05:31,028
And we can safely strip out the bundled dependencies

00:05:31,028 --> 00:05:34,922
in Bazal's Debian source package.

00:05:34,922 --> 00:05:38,091
Note that this approach can be easily extended

00:05:38,091 --> 00:05:41,361
for other Linux distributions as needed.

00:05:41,361 --> 00:05:45,732
The other part of Bazel's dependencies comes from the workspace file

00:05:45,732 --> 00:05:48,568
which needs to be done already at the BUILD time.

00:05:48,568 --> 00:05:53,173
For example, we have bazel_skylib, rules_java, etc.

00:05:53,173 --> 00:05:55,676
Obviously they were not packaged for Debian

00:05:55,676 --> 00:05:58,515
by the time we were trying to patch Bazel

00:05:58,515 --> 00:06:03,116
but they are used in many BUILD files, so we cannot simply remove them.

00:06:03,116 --> 00:06:06,954
To work around this we had to write a patch file

00:06:06,954 --> 00:06:08,956
to create macro repositories

00:06:08,956 --> 00:06:13,193
which contain the BUILD files and the bzl files required.

00:06:13,193 --> 00:06:16,163
Then, with the override repository flag

00:06:16,163 --> 00:06:19,399
we can tell Bazel not to download those dependencies

00:06:19,399 --> 00:06:23,236
but to use a given directory for a certain repo.

00:06:23,236 --> 00:06:25,293
I admit this is kind of a hack

00:06:25,293 --> 00:06:29,029
but, in order to get Bazel packaged as soon as possible

00:06:29,029 --> 00:06:30,968
this is still acceptable.

00:06:30,968 --> 00:06:33,747
The last challenge is about installing Bazel.

00:06:33,747 --> 00:06:38,118
Bazel is implemented in the client-server architecture.

00:06:38,118 --> 00:06:41,038
Users usually download Bazel as a single binary

00:06:41,038 --> 00:06:44,091
which is in fact a self-extracting archive.

00:06:44,091 --> 00:06:45,826
The first time you run Bazel

00:06:45,826 --> 00:06:49,096
it extracts itself to an install base

00:06:49,096 --> 00:06:51,308
somewhere under your "home" directory

00:06:51,308 --> 00:06:54,769
which contains the Bazel server and the embedded tools.

00:06:54,769 --> 00:06:58,839
Then, the binary itself serves as a client.

00:06:58,839 --> 00:07:02,242
However, this behavior is not allowed in Debian.

00:07:02,242 --> 00:07:05,319
The user being Bazel binary must be stripped,

00:07:05,319 --> 00:07:08,081
while creating the Debian package.

00:07:08,081 --> 00:07:11,084
So it will only be the Bazel client

00:07:11,084 --> 00:07:13,957
and will not contain any additional data.

00:07:15,472 --> 00:07:19,220
Therefore we actually had to create the whole Bazel install base

00:07:19,226 --> 00:07:21,061
in the Debian package.

00:07:21,061 --> 00:07:24,798
So, on the left side is the normal install base for Bazel.

00:07:24,798 --> 00:07:28,536
On the right side it is the install base in Debian

00:07:28,536 --> 00:07:31,171
which is under usr/share/bazel.

00:07:31,171 --> 00:07:36,009
However, the C++ binaries should be installed in certain directories,

00:07:36,009 --> 00:07:38,879
because they are architecture dependent.

00:07:38,879 --> 00:07:43,450
So, we use symlinks to reconstruct the complete directory structure

00:07:43,450 --> 00:07:45,052
for the install base.

00:07:46,586 --> 00:07:49,367
And finally, with a global bazelrc file

00:07:49,367 --> 00:07:52,959
we can tell the Bazel client where the install base is

00:07:52,959 --> 00:07:56,081
so that users can just invoke Bazel as normal.

00:07:56,997 --> 00:08:00,100
So, that's the major challenges from the Bazel side.

00:08:00,100 --> 00:08:03,571
Next, Olek will tell you more from the Debian side.

00:08:03,571 --> 00:08:04,462
Thank you, Yun.

00:08:04,462 --> 00:08:06,904
I'd like to highlight the challenges for both teams

00:08:06,904 --> 00:08:09,310
were discussed and addressed together,

00:08:09,310 --> 00:08:12,045
no matter which team took the lead on the solution.

00:08:12,045 --> 00:08:15,613
And the up-to-date flexible work plan that Yun mentioned earlier

00:08:15,613 --> 00:08:18,685
was critical in keeping our efforts synchronized.

00:08:18,685 --> 00:08:22,749
Also, having a common understanding of our mutual desire

00:08:22,749 --> 00:08:25,358
and states, and constraints

00:08:25,358 --> 00:08:29,397
made things much easier when the plan inevitably changed.

00:08:29,397 --> 00:08:33,400
Regarding some specific challenges that the Debian team took the lead on

00:08:33,400 --> 00:08:37,298
we found that we had significantly more dependencies than we had expected.

00:08:37,838 --> 00:08:40,807
Each of these dependencies had to be packaged for Debian

00:08:40,807 --> 00:08:42,742
before we could package Bazel.

00:08:42,742 --> 00:08:46,046
Now, the Bazel team were very helpful in determining

00:08:46,046 --> 00:08:49,454
which we absolutely needed and which could be worked around.

00:08:50,250 --> 00:08:52,919
Some of these dependencies were fairly trivial.

00:08:52,919 --> 00:08:55,188
And some were not.

00:08:55,188 --> 00:08:59,273
On the difficult side, some dependencies needed to be built with Gradle

00:08:59,273 --> 00:09:03,890
which is not very well supported in Debian, to say the least.

00:09:03,890 --> 00:09:08,935
Also, the gRPC Java and Open Sensor circular dependency

00:09:08,935 --> 00:09:10,570
caused quite a few headaches.

00:09:11,571 --> 00:09:15,750
Our second challenge was that Debian contributors are all volunteers.

00:09:15,750 --> 00:09:17,844
We had to plan for extra time

00:09:17,844 --> 00:09:21,114
as both packagers and supporting Debian contributors

00:09:21,114 --> 00:09:24,918
often have rapidly changing time budgets.

00:09:24,918 --> 00:09:29,228
For example, even once we had completed our initial packaging effort

00:09:29,228 --> 00:09:33,226
we had to allow significant time for Debian's quality control team

00:09:33,226 --> 00:09:34,995
to review the packaging

00:09:34,995 --> 00:09:37,645
and, more importantly, to review the licensing.

00:09:38,431 --> 00:09:41,865
Now, licensing issues are critical for distribution.

00:09:42,802 --> 00:09:46,271
We wanted to identify anything that could present a problem

00:09:46,271 --> 00:09:48,675
for Debian distributing the software.

00:09:48,675 --> 00:09:52,579
For example, we discovered a JSON license in the Bazel source

00:09:52,579 --> 00:09:56,917
that we had to investigate, since it could not be included in Debian.

00:09:56,917 --> 00:09:59,920
We also had to clarify some licensing issues

00:09:59,920 --> 00:10:03,417
that our quality control team caught, related to checker framework

00:10:03,417 --> 00:10:07,324
which is one of the Bazel dependencies that we needed to package.

00:10:07,324 --> 00:10:09,963
This effort quickly grew beyond the Debian Med Team

00:10:09,963 --> 00:10:11,998
that originally spotted it

00:10:11,998 --> 00:10:14,968
and now it has its own team at Debian.

00:10:14,968 --> 00:10:18,933
While the scope of the Debian-Bazel team's efforts has grown

00:10:18,933 --> 00:10:23,543
the core purpose of the team is still the same as in our original project.

00:10:23,543 --> 00:10:26,079
That is, to enable TensorFlow

00:10:26,079 --> 00:10:29,416
and pandemic-related packages in Debian.

00:10:29,416 --> 00:10:31,851
After almost exactly six months

00:10:31,851 --> 00:10:35,555
the Bazel bootstrap package was in the Debian repositories.

00:10:35,555 --> 00:10:39,442
It is scheduled to release with Debian 11 later this year

00:10:39,442 --> 00:10:43,323
and with Ubuntu 21.04 in April.

00:10:43,323 --> 00:10:45,799
Now, this is a great time to point out

00:10:45,799 --> 00:10:49,920
that Bazel has a capability to bootstrap itself from source.

00:10:49,920 --> 00:10:51,872
That is a killer feature!

00:10:51,872 --> 00:10:55,702
And that is the variant that we packaged initially in Debian

00:10:55,702 --> 00:10:58,377
because it was the easiest to start with.

00:10:58,377 --> 00:11:01,609
I can't imagine how difficult this process would've been to implement

00:11:01,609 --> 00:11:03,307
if we had had to request permission

00:11:03,307 --> 00:11:06,586
to start with a prebuilt Bazel binary in Debian.

00:11:07,854 --> 00:11:10,373
Now, our TensorFlow packaging is ongoing

00:11:10,373 --> 00:11:12,613
and we're working with that packaging team

00:11:12,613 --> 00:11:14,853
to help with any workarounds that they may need

00:11:14,853 --> 00:11:17,264
to help accelerate their packaging efforts.

00:11:18,531 --> 00:11:21,668
Most importantly, we have developed a solid relationship

00:11:21,668 --> 00:11:24,371
between the Bazel and the Debian teams.

00:11:24,371 --> 00:11:27,281
And that relationship is continuing to bear fruit

00:11:27,281 --> 00:11:29,410
as we tackle new challenges.

00:11:29,410 --> 00:11:32,956
And, Yun, you saw some benefits upstream as well, correct?

00:11:33,613 --> 00:11:34,515
Yeah.

00:11:34,515 --> 00:11:36,650
Besides, the impact that we had in Debian,

00:11:36,650 --> 00:11:40,054
this effort also directly benefited

00:11:40,054 --> 00:11:41,826
the Bazel project itself.

00:11:41,826 --> 00:11:44,625
First, we had our dependencies polished:

00:11:44,625 --> 00:11:48,229
we deleted unused dependencies, upgraded outdated ones

00:11:48,229 --> 00:11:50,694
and, as mentioned before

00:11:50,694 --> 00:11:54,160
we also fixed some problematic license issues.

00:11:54,160 --> 00:11:58,938
Besides, the solution we developed for packaging Bazel for Debian

00:11:58,938 --> 00:12:03,423
can also be extended for other Linux distributions.

00:12:03,423 --> 00:12:08,208
Therefore, the Bazel project became more distribution friendly.

00:12:08,208 --> 00:12:12,667
Next, Olek and then I will talk about the remaining work.

00:12:12,667 --> 00:12:20,136
Yes, now we're targeting Debian 12 and Ubuntu 22.04 for our next steps.

00:12:20,136 --> 00:12:22,504
We've already started the first part of that plan

00:12:22,504 --> 00:12:25,073
which is to remove the hacks and the workarounds

00:12:25,073 --> 00:12:28,342
which we initially implemented for expediency.

00:12:28,342 --> 00:12:30,820
A key part of that is to properly package

00:12:30,820 --> 00:12:33,414
additional elements of the Bazel infrastructure

00:12:33,414 --> 00:12:39,387
such as Java tools, Java rules, CC rules and others.

00:12:39,387 --> 00:12:42,657
Currently we have Bazel platforms and Bazel Skylib

00:12:42,657 --> 00:12:47,328
packaged and awaiting the start of the Debian 12 development cycle.

00:12:47,328 --> 00:12:50,831
We're planning to add the others in the coming months.

00:12:50,831 --> 00:12:55,469
We also want to enable debhelper to natively support Bazel builds.

00:12:55,469 --> 00:12:58,105
Debhelper is the tool that we use in Debian

00:12:58,105 --> 00:13:01,409
to make upstream software into Debian packages.

00:13:01,409 --> 00:13:05,546
In contrast to the workarounds that we're using for TenserFlow

00:13:05,546 --> 00:13:10,618
we want debhelper to automatically detect that software is using Bazel to build.

00:13:10,618 --> 00:13:15,056
Debhelper will then be able to call Bazel to build that software

00:13:15,056 --> 00:13:17,258
find the resulting built files

00:13:17,258 --> 00:13:20,461
and install them properly into a Debian package.

00:13:20,461 --> 00:13:24,325
This will be further facilitated by some ongoing efforts in Bazel

00:13:24,325 --> 00:13:26,267
that Yun will share with you.

00:13:26,267 --> 00:13:27,707
As you may have noticed

00:13:27,707 --> 00:13:31,927
the issues of building a project off-line with system installed libraries

00:13:31,927 --> 00:13:34,742
are not unique to the Bazel project itself

00:13:34,742 --> 00:13:38,899
but also apply to other projects that are built with Bazel.

00:13:38,899 --> 00:13:40,665
This is one of the pinpoints

00:13:40,665 --> 00:13:44,852
of how Bazel currently deals with external dependencies.

00:13:44,852 --> 00:13:47,334
And, solving this will be very helpful

00:13:47,334 --> 00:13:51,325
for the effort to integrate Bazel with debhelper.

00:13:51,325 --> 00:13:55,830
Improving the dependency management in Bazel is an ongoing effort

00:13:55,830 --> 00:14:00,000
and also a priority of the Bazel open-source team this year.

00:14:00,000 --> 00:14:01,762
That's all for this talk.

00:14:01,762 --> 00:14:06,010
Thank you all for joining us at Google Open Source Live.

00:14:06,010 --> 00:14:10,327
I would like to especially thank Olek and other Debian developers

00:14:10,327 --> 00:14:14,049
for initiating this effort and driving it forward.

00:14:14,049 --> 00:14:17,118
And I would like to thank Yun and the rest of the Bazel team

00:14:17,118 --> 00:14:21,832
for all of their support in helping us to complete this very ambitious project.

00:14:21,832 --> 00:14:23,501

YouTube URL: https://www.youtube.com/watch?v=jLSgky4ISj0


