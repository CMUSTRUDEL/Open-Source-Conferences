Title: Google Open Source Live "Go day" | Full Event
Publication date: 2020-12-03
Playlist: Google Open Source Live
Description: 
	
Captions: 
	00:00:00,510 --> 00:00:08,650
[Music]

00:00:24,960 --> 00:00:28,560
good morning

00:00:26,000 --> 00:00:30,000
good afternoon and good evening thank

00:00:28,560 --> 00:00:32,559
you for joining the go day

00:00:30,000 --> 00:00:34,480
on google open source live this is an

00:00:32,559 --> 00:00:36,719
awesome monthly series of sessions

00:00:34,480 --> 00:00:38,480
led by open source experts from google

00:00:36,719 --> 00:00:40,960
and community leaders

00:00:38,480 --> 00:00:42,320
we really appreciate the ability to come

00:00:40,960 --> 00:00:45,520
together digitally

00:00:42,320 --> 00:00:47,680
and keep the community moving forward

00:00:45,520 --> 00:00:50,000
my name is carmen ondo and i'm the go

00:00:47,680 --> 00:00:52,879
open source strategy lead at google

00:00:50,000 --> 00:00:53,680
joining you from ann arbor michigan near

00:00:52,879 --> 00:00:57,280
detroit

00:00:53,680 --> 00:01:00,000
enjoying the cool fall weather

00:00:57,280 --> 00:01:00,960
hi and i'm steve francia goes product

00:01:00,000 --> 00:01:02,320
lead

00:01:00,960 --> 00:01:04,479
google's product lead for the go

00:01:02,320 --> 00:01:06,240
programming language and i'm joining you

00:01:04,479 --> 00:01:07,520
from connecticut which is just north of

00:01:06,240 --> 00:01:08,880
new york city

00:01:07,520 --> 00:01:12,000
and i'm really excited to be part of

00:01:08,880 --> 00:01:13,520
google's first go conference

00:01:12,000 --> 00:01:15,520
we have a really exciting session

00:01:13,520 --> 00:01:17,119
planned for you today uh we're going to

00:01:15,520 --> 00:01:19,439
start with an intro to go

00:01:17,119 --> 00:01:21,520
led by matt perring goes product

00:01:19,439 --> 00:01:26,400
marketing manager here at google

00:01:21,520 --> 00:01:29,360
my co-mc steve and yours truly

00:01:26,400 --> 00:01:30,159
next after that steve trout a technical

00:01:29,360 --> 00:01:32,400
writer for

00:01:30,159 --> 00:01:34,000
google will walk us through installation

00:01:32,400 --> 00:01:36,400
and go basics

00:01:34,000 --> 00:01:38,159
the session after that will be julie chu

00:01:36,400 --> 00:01:40,000
and rebecca stanler

00:01:38,159 --> 00:01:41,759
software engineers on the open source

00:01:40,000 --> 00:01:44,079
and tooling go sub teams

00:01:41,759 --> 00:01:46,640
at google and they'll tell us all about

00:01:44,079 --> 00:01:49,600
leveling up with go package discovery

00:01:46,640 --> 00:01:50,479
and editor tooling finally we'll wrap up

00:01:49,600 --> 00:01:53,840
with a third

00:01:50,479 --> 00:01:54,720
steve of the day steve kaufman from khan

00:01:53,840 --> 00:01:57,119
academy

00:01:54,720 --> 00:01:58,479
who will show us an actual use case of

00:01:57,119 --> 00:02:03,200
how using go

00:01:58,479 --> 00:02:03,200
saved khan academy time and money

00:02:03,439 --> 00:02:07,119
this is an extremely exciting time to be

00:02:05,680 --> 00:02:09,039
part of the go community

00:02:07,119 --> 00:02:10,319
and the go team at google we can't wait

00:02:09,039 --> 00:02:11,200
to share with you what we've been

00:02:10,319 --> 00:02:12,959
working on

00:02:11,200 --> 00:02:14,400
we hope it helps you move forward with

00:02:12,959 --> 00:02:15,599
your work as well

00:02:14,400 --> 00:02:18,160
now before we start there's some

00:02:15,599 --> 00:02:20,400
housekeeping items the first is don't

00:02:18,160 --> 00:02:21,440
forget to put your questions in the live

00:02:20,400 --> 00:02:23,360
q a

00:02:21,440 --> 00:02:26,080
this will be right below the live stream

00:02:23,360 --> 00:02:28,000
window and if you're viewing the

00:02:26,080 --> 00:02:29,840
it in full screen you have to exit full

00:02:28,000 --> 00:02:30,879
screen to be able to see the live q a

00:02:29,840 --> 00:02:32,400
part

00:02:30,879 --> 00:02:34,400
our sessions today have been

00:02:32,400 --> 00:02:35,200
pre-recorded to allow for accurate

00:02:34,400 --> 00:02:37,440
transcripts

00:02:35,200 --> 00:02:38,879
and so our speakers can focus on

00:02:37,440 --> 00:02:40,560
answering your questions live so don't

00:02:38,879 --> 00:02:42,319
worry about asking questions

00:02:40,560 --> 00:02:43,840
we already recorded the sessions we're

00:02:42,319 --> 00:02:45,280
just there to answer the questions for

00:02:43,840 --> 00:02:46,879
you live

00:02:45,280 --> 00:02:49,599
and once we're done don't forget to join

00:02:46,879 --> 00:02:52,480
us for the after party on google me

00:02:49,599 --> 00:02:54,239
and we will share a link to google meet

00:02:52,480 --> 00:02:55,360
uh to the after party at the end of the

00:02:54,239 --> 00:02:56,800
last session

00:02:55,360 --> 00:03:05,840
without further ado let's start our

00:02:56,800 --> 00:03:05,840
first talk

00:04:04,000 --> 00:04:07,840
hello and welcome to google open source

00:04:05,760 --> 00:04:09,760
live we're excited to have you here

00:04:07,840 --> 00:04:12,000
and to share a few things with you about

00:04:09,760 --> 00:04:13,599
go

00:04:12,000 --> 00:04:15,280
i'm matt and i'll be talking a bit about

00:04:13,599 --> 00:04:17,440
go as a language and why it's a great

00:04:15,280 --> 00:04:18,880
fit to build fast reliable and efficient

00:04:17,440 --> 00:04:20,720
software at scale

00:04:18,880 --> 00:04:22,479
then my colleague stephen carman will

00:04:20,720 --> 00:04:25,840
cover the most common use cases

00:04:22,479 --> 00:04:28,320
for the language so let's get started

00:04:25,840 --> 00:04:29,919
so why choose go let's start with the

00:04:28,320 --> 00:04:30,639
basics covering the foundation of the

00:04:29,919 --> 00:04:32,639
language

00:04:30,639 --> 00:04:34,960
and give you an idea of what to expect

00:04:32,639 --> 00:04:37,120
when using go

00:04:34,960 --> 00:04:38,639
at a high level go is designed to be

00:04:37,120 --> 00:04:41,120
simple and reliable

00:04:38,639 --> 00:04:43,040
in the era of multi-core computing it's

00:04:41,120 --> 00:04:45,280
easy to learn and get started with

00:04:43,040 --> 00:04:47,199
with many developers becoming productive

00:04:45,280 --> 00:04:48,960
in just a few days and sometimes even

00:04:47,199 --> 00:04:50,960
hours

00:04:48,960 --> 00:04:52,960
go is also a cloud native language

00:04:50,960 --> 00:04:55,199
designed to operate at scale

00:04:52,960 --> 00:04:56,960
it was built with micro services in mind

00:04:55,199 --> 00:04:57,759
and its standard library and performance

00:04:56,960 --> 00:04:59,840
design

00:04:57,759 --> 00:05:01,840
make it perfect for large distributed

00:04:59,840 --> 00:05:04,160
systems

00:05:01,840 --> 00:05:06,080
and go has a thriving ecosystem with a

00:05:04,160 --> 00:05:06,960
growing set of partners communities and

00:05:06,080 --> 00:05:08,639
tools

00:05:06,960 --> 00:05:10,080
gophers around the world are constantly

00:05:08,639 --> 00:05:12,240
adding new packages

00:05:10,080 --> 00:05:14,160
organizing events to share knowledge or

00:05:12,240 --> 00:05:16,479
contributing to the core language

00:05:14,160 --> 00:05:17,840
and if you're new to go chances are

00:05:16,479 --> 00:05:19,919
there's a gopher out there ready and

00:05:17,840 --> 00:05:22,400
waiting to answer your questions

00:05:19,919 --> 00:05:24,240
these three pillars ago simplicity

00:05:22,400 --> 00:05:26,479
scalability and community

00:05:24,240 --> 00:05:27,919
make working with go a great experience

00:05:26,479 --> 00:05:30,720
so let's take a moment to talk a bit

00:05:27,919 --> 00:05:33,840
more about the language itself

00:05:30,720 --> 00:05:35,759
so what makes go great as a language

00:05:33,840 --> 00:05:37,520
goes everything you need right out of

00:05:35,759 --> 00:05:39,680
the box or binary

00:05:37,520 --> 00:05:41,680
and that starts with its robust standard

00:05:39,680 --> 00:05:43,440
library

00:05:41,680 --> 00:05:46,400
go standard library is incredibly

00:05:43,440 --> 00:05:48,400
comprehensive and of excellent quality

00:05:46,400 --> 00:05:50,320
it's extensible and includes packages

00:05:48,400 --> 00:05:51,680
that cover the basics of almost any

00:05:50,320 --> 00:05:53,759
project

00:05:51,680 --> 00:05:56,160
from building web servers with ghost

00:05:53,759 --> 00:05:58,720
built-in high-performance hdb package

00:05:56,160 --> 00:05:59,840
to handling files and other programs to

00:05:58,720 --> 00:06:02,000
managing encryption

00:05:59,840 --> 00:06:03,600
with the crypto package for whatever

00:06:02,000 --> 00:06:05,199
you're building chances are there's a

00:06:03,600 --> 00:06:07,199
package or two in the standard library

00:06:05,199 --> 00:06:09,199
that will help

00:06:07,199 --> 00:06:10,560
go also helps keep things maintainable

00:06:09,199 --> 00:06:11,840
with automatic formatting and

00:06:10,560 --> 00:06:13,520
documentation

00:06:11,840 --> 00:06:15,680
and this is in addition to go syntax

00:06:13,520 --> 00:06:17,440
that focuses on readability

00:06:15,680 --> 00:06:18,960
many projects are built solely relying

00:06:17,440 --> 00:06:20,479
on the standard library without having

00:06:18,960 --> 00:06:21,919
to look elsewhere for support

00:06:20,479 --> 00:06:23,919
and while the standard library is

00:06:21,919 --> 00:06:25,199
expansive if your needs aren't met there

00:06:23,919 --> 00:06:27,840
there's definitely a solution in the

00:06:25,199 --> 00:06:27,840
ecosystem

00:06:28,319 --> 00:06:32,400
now let's talk about building with go

00:06:30,639 --> 00:06:34,319
building with go is easy

00:06:32,400 --> 00:06:36,479
when working with a language every go

00:06:34,319 --> 00:06:38,319
program compiles to a single binary

00:06:36,479 --> 00:06:40,400
including any system code required to

00:06:38,319 --> 00:06:43,360
run it which keeps things simple

00:06:40,400 --> 00:06:44,400
as projects progress in complexity and

00:06:43,360 --> 00:06:45,520
as they progress

00:06:44,400 --> 00:06:47,840
you can leverage those built-in

00:06:45,520 --> 00:06:49,199
concurrency mechanisms or go routines

00:06:47,840 --> 00:06:50,560
which make it really simple to build

00:06:49,199 --> 00:06:52,240
concurrent programs

00:06:50,560 --> 00:06:54,560
all while taking advantage of go's

00:06:52,240 --> 00:06:57,919
fantastic memory and cpu management

00:06:54,560 --> 00:07:00,080
and instant startup times additionally

00:06:57,919 --> 00:07:02,720
ghost dependency management is tightly

00:07:00,080 --> 00:07:04,479
integrated and seamless with modules

00:07:02,720 --> 00:07:06,639
which we'll cover a bit more in

00:07:04,479 --> 00:07:08,639
detail later today go helps you keep

00:07:06,639 --> 00:07:10,479
packages secure and compatible

00:07:08,639 --> 00:07:13,919
helping you avoid the diamond dependency

00:07:10,479 --> 00:07:15,840
problem and dependency health

00:07:13,919 --> 00:07:17,039
and to top it off goes supported by the

00:07:15,840 --> 00:07:18,720
go team at google

00:07:17,039 --> 00:07:21,840
who work every day to continue to

00:07:18,720 --> 00:07:21,840
improve the go experience

00:07:22,000 --> 00:07:26,319
from leading our bi-annual release

00:07:23,520 --> 00:07:27,440
process to directly triaging security

00:07:26,319 --> 00:07:29,120
reports

00:07:27,440 --> 00:07:30,960
to working collaboratively with the

00:07:29,120 --> 00:07:32,720
contributor community to ensure feedback

00:07:30,960 --> 00:07:33,680
is front and center of the development

00:07:32,720 --> 00:07:35,360
process

00:07:33,680 --> 00:07:36,880
and their work leads to great results

00:07:35,360 --> 00:07:38,479
for all go users

00:07:36,880 --> 00:07:40,240
just recently in the latest release of

00:07:38,479 --> 00:07:42,639
go 115 we saw

00:07:40,240 --> 00:07:43,280
sample of go programs compile around 20

00:07:42,639 --> 00:07:44,800
faster

00:07:43,280 --> 00:07:47,039
and take around thirty percent less

00:07:44,800 --> 00:07:47,680
memory on average for all projects but

00:07:47,039 --> 00:07:50,080
especially

00:07:47,680 --> 00:07:51,840
large distributed projects built and go

00:07:50,080 --> 00:07:53,039
that can lead to a solid reduction in

00:07:51,840 --> 00:07:54,879
compute costs

00:07:53,039 --> 00:07:56,560
and this is just one example of many

00:07:54,879 --> 00:07:58,160
changes the team has worked on and will

00:07:56,560 --> 00:07:58,960
continue to work on with the community's

00:07:58,160 --> 00:08:02,160
health

00:07:58,960 --> 00:08:04,879
this kind of performance increase

00:08:02,160 --> 00:08:07,599
15 versions in is what the team aims for

00:08:04,879 --> 00:08:08,960
with every major release

00:08:07,599 --> 00:08:10,800
and as we continue to improve the

00:08:08,960 --> 00:08:12,080
functionality performance and

00:08:10,800 --> 00:08:14,160
productivity of go

00:08:12,080 --> 00:08:15,840
we make sure that every go program

00:08:14,160 --> 00:08:16,720
written since the original release of go

00:08:15,840 --> 00:08:18,560
1.0

00:08:16,720 --> 00:08:19,919
will compile with newer versions up to

00:08:18,560 --> 00:08:22,240
our latest release

00:08:19,919 --> 00:08:23,280
this is our 1.0 compatibility promise

00:08:22,240 --> 00:08:24,879
it's awesome

00:08:23,280 --> 00:08:27,599
and it's part of what makes go so easy

00:08:24,879 --> 00:08:29,360
to maintain

00:08:27,599 --> 00:08:31,680
so let's take a step back and look at

00:08:29,360 --> 00:08:32,479
the ecosystem which continues to grow

00:08:31,680 --> 00:08:35,839
with more

00:08:32,479 --> 00:08:38,000
developers using go every day

00:08:35,839 --> 00:08:40,000
just to get a quick sense we took a look

00:08:38,000 --> 00:08:42,479
at growth in pull requests of go

00:08:40,000 --> 00:08:44,640
programs on github over the last five

00:08:42,479 --> 00:08:48,000
years that amount has nearly tripled

00:08:44,640 --> 00:08:51,040
and it continues to grow additionally

00:08:48,000 --> 00:08:52,480
several surveys psycho is the number one

00:08:51,040 --> 00:08:54,320
language in several areas

00:08:52,480 --> 00:08:55,839
go shows up is the top language that

00:08:54,320 --> 00:08:57,760
developers want to learn

00:08:55,839 --> 00:09:00,560
and also the top language the developer

00:08:57,760 --> 00:09:02,399
teams are looking to adopt or migrate to

00:09:00,560 --> 00:09:04,160
go also shows up as the highest paying

00:09:02,399 --> 00:09:05,680
language and the language with the most

00:09:04,160 --> 00:09:07,200
demand from employers

00:09:05,680 --> 00:09:09,440
and this comes as more companies are

00:09:07,200 --> 00:09:11,760
increasingly seeking go developers

00:09:09,440 --> 00:09:12,480
in short it's a great time to be a go

00:09:11,760 --> 00:09:13,920
developer

00:09:12,480 --> 00:09:15,839
and a great time to start building with

00:09:13,920 --> 00:09:17,920
go

00:09:15,839 --> 00:09:19,760
and when it comes to building with go

00:09:17,920 --> 00:09:21,279
many companies around the world use go

00:09:19,760 --> 00:09:23,600
and are often sharing their insights

00:09:21,279 --> 00:09:26,240
with the community paypal facebook

00:09:23,600 --> 00:09:29,360
microsoft mercado libre netflix

00:09:26,240 --> 00:09:30,880
and many more companies are using go a

00:09:29,360 --> 00:09:33,200
great example which you'll hear much

00:09:30,880 --> 00:09:34,959
more about later today is khan academy

00:09:33,200 --> 00:09:37,279
who begin migrating their infrastructure

00:09:34,959 --> 00:09:39,519
from python to go and have already begun

00:09:37,279 --> 00:09:42,800
to see the benefits of doing so

00:09:39,519 --> 00:09:44,320
and of course we use go here google

00:09:42,800 --> 00:09:46,399
from the web indexing pipeline that

00:09:44,320 --> 00:09:47,680
powers google search to the back end of

00:09:46,399 --> 00:09:49,279
firebase hosting

00:09:47,680 --> 00:09:51,040
which powers thousands of websites

00:09:49,279 --> 00:09:53,200
around the world

00:09:51,040 --> 00:09:55,200
we also use go on teams like chrome

00:09:53,200 --> 00:09:57,040
messaging and many more

00:09:55,200 --> 00:09:59,120
and in line with companies using go

00:09:57,040 --> 00:10:02,240
we're seeing folks choose go

00:09:59,120 --> 00:10:03,440
to build software in the cloud and the

00:10:02,240 --> 00:10:05,600
three pillars of go

00:10:03,440 --> 00:10:07,200
simplicity scalability and community are

00:10:05,600 --> 00:10:09,200
the reasons why many of these companies

00:10:07,200 --> 00:10:10,480
keep choosing go

00:10:09,200 --> 00:10:12,240
if you want to learn a bit more about

00:10:10,480 --> 00:10:12,959
who's using go how to get started with

00:10:12,240 --> 00:10:16,000
the language

00:10:12,959 --> 00:10:16,000
you can visit god.dev

00:10:16,160 --> 00:10:19,360
finally i wanted to touch on the

00:10:17,600 --> 00:10:20,880
community which in many ways is the

00:10:19,360 --> 00:10:22,560
beating heart of go

00:10:20,880 --> 00:10:24,640
the community is what keeps gophers

00:10:22,560 --> 00:10:26,480
active connected and up to date on the

00:10:24,640 --> 00:10:28,000
latest changes with go and related

00:10:26,480 --> 00:10:30,079
tooling and support

00:10:28,000 --> 00:10:31,519
the community also actively contributes

00:10:30,079 --> 00:10:33,120
to go releases

00:10:31,519 --> 00:10:36,720
helping the go team at google make the

00:10:33,120 --> 00:10:36,720
best decisions for the ecosystem

00:10:37,040 --> 00:10:42,000
to get a sense of scale today the gopher

00:10:39,839 --> 00:10:42,560
community has grown to reach over 180

00:10:42,000 --> 00:10:45,120
groups

00:10:42,560 --> 00:10:46,720
in nearly 50 countries these groups host

00:10:45,120 --> 00:10:49,920
events almost every week

00:10:46,720 --> 00:10:50,720
and are now doing so virtually over the

00:10:49,920 --> 00:10:53,120
last year

00:10:50,720 --> 00:10:55,120
there have also been 32 conferences one

00:10:53,120 --> 00:10:57,120
conference is taking place very soon

00:10:55,120 --> 00:10:58,160
just next week many gophers will be

00:10:57,120 --> 00:11:01,200
attending gophercon

00:10:58,160 --> 00:11:03,120
in a new all virtual experience

00:11:01,200 --> 00:11:05,440
the gopher community whether it be

00:11:03,120 --> 00:11:07,440
meetups listeners or smaller groups of

00:11:05,440 --> 00:11:08,399
developers are all enthusiastic and

00:11:07,440 --> 00:11:10,000
inspiring

00:11:08,399 --> 00:11:11,920
joining one is a great way to meet other

00:11:10,000 --> 00:11:13,839
developers jump into go

00:11:11,920 --> 00:11:16,720
and share your knowledge with others the

00:11:13,839 --> 00:11:18,480
swag is pretty cool too

00:11:16,720 --> 00:11:20,720
so i've talked a bit about what makes go

00:11:18,480 --> 00:11:22,240
great where the language is heading

00:11:20,720 --> 00:11:24,560
and who's using go ranging from

00:11:22,240 --> 00:11:26,640
individual devs to enterprises

00:11:24,560 --> 00:11:28,240
i also touched on the community and how

00:11:26,640 --> 00:11:29,680
gophers around the world stay connected

00:11:28,240 --> 00:11:31,360
and informed

00:11:29,680 --> 00:11:33,040
hopefully this has helped you answer the

00:11:31,360 --> 00:11:34,959
question why go

00:11:33,040 --> 00:11:36,399
but to take it one step further my

00:11:34,959 --> 00:11:37,839
colleague stephen carmen

00:11:36,399 --> 00:11:40,399
are going to cover the top four use

00:11:37,839 --> 00:11:43,440
cases for the language

00:11:40,399 --> 00:11:48,079
these are command line applications apis

00:11:43,440 --> 00:11:50,399
web apps and devops so take it away

00:11:48,079 --> 00:11:52,160
go is a great fit for command line or

00:11:50,399 --> 00:11:54,240
cli applications

00:11:52,160 --> 00:11:56,160
over the past decade these have made a

00:11:54,240 --> 00:11:56,880
huge comeback and firmly have a place

00:11:56,160 --> 00:12:00,639
alongside

00:11:56,880 --> 00:12:02,720
server web desktop and mobile apps

00:12:00,639 --> 00:12:04,560
with cli applications there are a few

00:12:02,720 --> 00:12:06,399
factors that are really important

00:12:04,560 --> 00:12:08,000
you want the application to seamlessly

00:12:06,399 --> 00:12:09,360
work cross-platform

00:12:08,000 --> 00:12:11,600
you want the application to load

00:12:09,360 --> 00:12:13,360
instantly you want it to be easily

00:12:11,600 --> 00:12:14,720
installed and updated without local

00:12:13,360 --> 00:12:15,839
dependencies

00:12:14,720 --> 00:12:18,079
you want the app to have good

00:12:15,839 --> 00:12:21,440
performance and you want to be it to be

00:12:18,079 --> 00:12:24,639
easy to write an app with good usability

00:12:21,440 --> 00:12:26,800
go checks every box

00:12:24,639 --> 00:12:28,720
go natively supports every modern

00:12:26,800 --> 00:12:32,079
offering modern operating system and

00:12:28,720 --> 00:12:35,760
architecture and many legacy ones

00:12:32,079 --> 00:12:38,639
go makes it trivial to build windows

00:12:35,760 --> 00:12:39,839
mac linux etc versions for various

00:12:38,639 --> 00:12:42,800
architectures

00:12:39,839 --> 00:12:45,200
right from your development machine most

00:12:42,800 --> 00:12:47,680
applications build around one second

00:12:45,200 --> 00:12:48,880
for anyone who's used c or c plus based

00:12:47,680 --> 00:12:52,639
applications

00:12:48,880 --> 00:12:54,800
this is unbelievably simple

00:12:52,639 --> 00:12:56,639
go applications have zero dependencies

00:12:54,800 --> 00:12:58,399
on the host there's no fighting with

00:12:56,639 --> 00:12:59,360
incompatible libraries or runtime

00:12:58,399 --> 00:13:01,360
versions

00:12:59,360 --> 00:13:03,839
and no runtimes or interpreters to

00:13:01,360 --> 00:13:05,680
install once the application is built

00:13:03,839 --> 00:13:06,000
installing it is as simple as copying a

00:13:05,680 --> 00:13:08,720
single

00:13:06,000 --> 00:13:11,360
file to another machine it just works

00:13:08,720 --> 00:13:13,279
compared to java javascript python ruby

00:13:11,360 --> 00:13:15,920
and even c-based applications

00:13:13,279 --> 00:13:17,200
this is incredibly smooth upgrading is

00:13:15,920 --> 00:13:19,120
just as easy

00:13:17,200 --> 00:13:20,800
simply replace the old file with the new

00:13:19,120 --> 00:13:23,680
one it's a single file

00:13:20,800 --> 00:13:24,800
what could be easier than that

00:13:23,680 --> 00:13:26,880
applications written

00:13:24,800 --> 00:13:28,480
go benefit from instant startup times

00:13:26,880 --> 00:13:32,000
and fast performance

00:13:28,480 --> 00:13:33,839
unlike java javascript python ruby etc

00:13:32,000 --> 00:13:35,040
there's no need to load up a virtual

00:13:33,839 --> 00:13:37,760
machine or interpreter

00:13:35,040 --> 00:13:39,440
so they're able to start instantly go's

00:13:37,760 --> 00:13:41,360
performance and concurrency take

00:13:39,440 --> 00:13:43,760
full advantage of modern multi-core

00:13:41,360 --> 00:13:45,279
processors to easily write applications

00:13:43,760 --> 00:13:48,720
with great performance

00:13:45,279 --> 00:13:50,880
are you sold yet but wait there's more

00:13:48,720 --> 00:13:52,800
there's a robust ecosystem built around

00:13:50,880 --> 00:13:55,279
go cli applications

00:13:52,800 --> 00:13:57,639
go.dev lists popular libraries and books

00:13:55,279 --> 00:14:00,320
to get you started

00:13:57,639 --> 00:14:02,800
learn.go.dev also has a workshop on

00:14:00,320 --> 00:14:05,680
building cli and go

00:14:02,800 --> 00:14:07,040
the most popular cli library is cobra

00:14:05,680 --> 00:14:08,959
which includes a generator that

00:14:07,040 --> 00:14:09,600
effectively builds your application for

00:14:08,959 --> 00:14:11,440
you

00:14:09,600 --> 00:14:13,199
using intuitive design patterns

00:14:11,440 --> 00:14:14,160
including sub commands parameters and

00:14:13,199 --> 00:14:16,240
flags

00:14:14,160 --> 00:14:19,680
it also automatically generates help

00:14:16,240 --> 00:14:21,680
auto completion and documentation

00:14:19,680 --> 00:14:23,360
when github wanted to build a new cli

00:14:21,680 --> 00:14:25,839
they chose cobra and go

00:14:23,360 --> 00:14:27,600
and the response has been fantastic they

00:14:25,839 --> 00:14:29,519
joined thousands of companies and

00:14:27,600 --> 00:14:33,040
projects who have built cli apps

00:14:29,519 --> 00:14:35,360
in go to understand why go

00:14:33,040 --> 00:14:36,959
is good for devops i find this quote

00:14:35,360 --> 00:14:39,199
works well

00:14:36,959 --> 00:14:40,160
go was not designed to be an academic

00:14:39,199 --> 00:14:42,160
language

00:14:40,160 --> 00:14:43,360
it was meant for large production

00:14:42,160 --> 00:14:45,680
systems

00:14:43,360 --> 00:14:47,680
to quickly onboard many inexperienced

00:14:45,680 --> 00:14:49,920
engineers to a code base

00:14:47,680 --> 00:14:50,880
providing continuity across the software

00:14:49,920 --> 00:14:52,639
life cycle

00:14:50,880 --> 00:14:54,079
from development to production to

00:14:52,639 --> 00:14:56,000
maintenance

00:14:54,079 --> 00:14:57,920
this is the essence of the devops

00:14:56,000 --> 00:15:01,760
movement and the adoption of site

00:14:57,920 --> 00:15:01,760
reliability engineering at google

00:15:02,720 --> 00:15:07,360
before going further i'd like to briefly

00:15:04,720 --> 00:15:10,839
talk about site reliability engineering

00:15:07,360 --> 00:15:13,839
also called sre and devops what's the

00:15:10,839 --> 00:15:13,839
difference

00:15:14,079 --> 00:15:17,120
devops and sre are two trending

00:15:16,399 --> 00:15:20,399
disciplines

00:15:17,120 --> 00:15:22,639
with quite a bit of overlap in the past

00:15:20,399 --> 00:15:23,839
some have called sre a competing set of

00:15:22,639 --> 00:15:26,639
practices

00:15:23,839 --> 00:15:27,760
but it's not so different from devops to

00:15:26,639 --> 00:15:30,560
read more

00:15:27,760 --> 00:15:31,199
visit the link at the bottom the key

00:15:30,560 --> 00:15:33,120
thing is

00:15:31,199 --> 00:15:35,519
that devops and sre are both

00:15:33,120 --> 00:15:38,240
organizational practices

00:15:35,519 --> 00:15:39,839
go was designed to simplify practices

00:15:38,240 --> 00:15:41,600
around developing software for the

00:15:39,839 --> 00:15:44,399
entire life cycle

00:15:41,600 --> 00:15:48,160
given similar philosophies and goals go

00:15:44,399 --> 00:15:48,160
is clearly a match for devops

00:15:48,800 --> 00:15:52,800
let's go over 9 reasons why go is good

00:15:50,800 --> 00:15:54,639
for devops and sre

00:15:52,800 --> 00:15:56,959
mentioned interchangeably are all the

00:15:54,639 --> 00:15:57,680
practitioners which include software

00:15:56,959 --> 00:15:59,920
engineers

00:15:57,680 --> 00:16:01,120
site reliability engineers systems

00:15:59,920 --> 00:16:03,120
administrators

00:16:01,120 --> 00:16:05,680
operations engineers and production

00:16:03,120 --> 00:16:07,839
engineers

00:16:05,680 --> 00:16:10,000
as mentioned before go is made to be

00:16:07,839 --> 00:16:11,920
readable designed for onboarding

00:16:10,000 --> 00:16:13,680
programmers to teams quickly

00:16:11,920 --> 00:16:16,560
it strikes a good balance between

00:16:13,680 --> 00:16:18,800
expressiveness and brevity

00:16:16,560 --> 00:16:20,079
even error handling an oft-critiqued

00:16:18,800 --> 00:16:22,880
aspect of the language

00:16:20,079 --> 00:16:24,800
has benefits of this explicitness as

00:16:22,880 --> 00:16:27,279
particularly for when those errors

00:16:24,800 --> 00:16:29,759
hit programs running in large production

00:16:27,279 --> 00:16:29,759
systems

00:16:30,240 --> 00:16:35,360
a small but strong standard library

00:16:33,600 --> 00:16:36,880
a smaller footprint makes it easy for

00:16:35,360 --> 00:16:39,279
learning developing

00:16:36,880 --> 00:16:40,480
and maintainers maintaining software

00:16:39,279 --> 00:16:42,800
across the stack

00:16:40,480 --> 00:16:45,600
and life cycle without getting bogged

00:16:42,800 --> 00:16:45,600
down in choice

00:16:47,199 --> 00:16:52,240
as mentioned in the talk on clis go has

00:16:50,079 --> 00:16:53,920
minimal run time dependencies

00:16:52,240 --> 00:16:55,839
if you're a systems administrator

00:16:53,920 --> 00:16:58,160
operations or production engineer

00:16:55,839 --> 00:17:00,000
you don't need to worry as all runtime

00:16:58,160 --> 00:17:00,639
libraries are included in the compiled

00:17:00,000 --> 00:17:03,360
execute

00:17:00,639 --> 00:17:04,799
executable so you can distribute your

00:17:03,360 --> 00:17:05,839
app the way you would any other

00:17:04,799 --> 00:17:08,480
statically linked

00:17:05,839 --> 00:17:08,480
binary

00:17:09,120 --> 00:17:12,240
speaking of binaries you don't need to

00:17:11,039 --> 00:17:15,120
worry about what version

00:17:12,240 --> 00:17:16,880
goes installed on your systems or even

00:17:15,120 --> 00:17:18,640
if it is installed in your systems at

00:17:16,880 --> 00:17:20,959
all if you're an ops

00:17:18,640 --> 00:17:23,520
this makes it easy for doing migrations

00:17:20,959 --> 00:17:25,360
upgrades and deploys

00:17:23,520 --> 00:17:27,839
it's great for these types of operation

00:17:25,360 --> 00:17:27,839
tasks

00:17:28,799 --> 00:17:32,000
also if you're an ops you'll often run

00:17:30,799 --> 00:17:34,400
into the chicken egg

00:17:32,000 --> 00:17:36,400
problem needing dependencies installed

00:17:34,400 --> 00:17:38,559
before running tools or scripts for your

00:17:36,400 --> 00:17:40,720
infrastructure where your app lives

00:17:38,559 --> 00:17:42,080
go is great for this bootstrap tooling

00:17:40,720 --> 00:17:45,440
where you don't yet have your

00:17:42,080 --> 00:17:45,440
dependencies installed

00:17:45,679 --> 00:17:49,840
garbage collection built-in means that

00:17:47,919 --> 00:17:52,720
operators don't have to be burdened with

00:17:49,840 --> 00:17:53,440
memory management making go both easier

00:17:52,720 --> 00:17:56,480
to use

00:17:53,440 --> 00:17:56,480
and more reliable

00:17:57,520 --> 00:18:03,679
easy concurrency support via go routines

00:18:00,960 --> 00:18:05,039
this is a first class feature of go and

00:18:03,679 --> 00:18:07,760
vastly simplifies

00:18:05,039 --> 00:18:09,679
distributed systems operations code

00:18:07,760 --> 00:18:10,320
bases today are becoming larger and

00:18:09,679 --> 00:18:12,559
larger

00:18:10,320 --> 00:18:14,320
with huge amounts of concurrency due to

00:18:12,559 --> 00:18:16,400
networking requirements that didn't

00:18:14,320 --> 00:18:18,559
exist 20 years ago

00:18:16,400 --> 00:18:19,440
go is the right balance of trade-offs

00:18:18,559 --> 00:18:22,000
needed to solve

00:18:19,440 --> 00:18:22,880
modern productivity issues it's the

00:18:22,000 --> 00:18:24,400
modern-day

00:18:22,880 --> 00:18:26,320
bottleneck for running distributed

00:18:24,400 --> 00:18:29,440
systems which isn't performance

00:18:26,320 --> 00:18:30,799
it's human cognition go addresses this

00:18:29,440 --> 00:18:33,440
human cognition issue

00:18:30,799 --> 00:18:35,360
without sacrificing performance gu is

00:18:33,440 --> 00:18:38,480
also more explicit and better

00:18:35,360 --> 00:18:40,640
glue than shell languages glue refers to

00:18:38,480 --> 00:18:43,360
those connector bits of code you write

00:18:40,640 --> 00:18:45,520
to put your system together the lack of

00:18:43,360 --> 00:18:48,720
data types in bash or powershell

00:18:45,520 --> 00:18:50,960
start to come apart after 100 lines for

00:18:48,720 --> 00:18:52,160
articulating more complex scripts for

00:18:50,960 --> 00:18:54,840
your infrastructure

00:18:52,160 --> 00:18:57,520
you'll need something strongly typed use

00:18:54,840 --> 00:19:01,039
go

00:18:57,520 --> 00:19:04,400
and finally go is still very performant

00:19:01,039 --> 00:19:04,400
particularly at scale

00:19:05,200 --> 00:19:09,120
to finish off there's a saying that

00:19:07,280 --> 00:19:11,679
software is never done

00:19:09,120 --> 00:19:13,440
this is equally true for development and

00:19:11,679 --> 00:19:15,600
production and maintenance

00:19:13,440 --> 00:19:16,480
use go for the entire software life

00:19:15,600 --> 00:19:18,480
cycle

00:19:16,480 --> 00:19:19,679
and implement devops practices into your

00:19:18,480 --> 00:19:23,760
organization to

00:19:19,679 --> 00:19:23,760
improve your system and your business

00:19:23,840 --> 00:19:28,559
developers love using go ninety percent

00:19:26,960 --> 00:19:29,760
of developers prefer to use it for their

00:19:28,559 --> 00:19:31,360
next project

00:19:29,760 --> 00:19:33,760
web applications are one of the most

00:19:31,360 --> 00:19:35,679
popular things developers build and go

00:19:33,760 --> 00:19:38,240
with half of go developers using it for

00:19:35,679 --> 00:19:40,000
web apps goes concurrency speed and

00:19:38,240 --> 00:19:42,080
excellent library support

00:19:40,000 --> 00:19:43,840
make an ideal environment for today's

00:19:42,080 --> 00:19:45,840
web applications

00:19:43,840 --> 00:19:47,760
today i'm going to introduce you to go's

00:19:45,840 --> 00:19:50,840
cloud support database support

00:19:47,760 --> 00:19:52,160
web security web frameworks and learning

00:19:50,840 --> 00:19:54,240
resources as

00:19:52,160 --> 00:19:55,280
is common today many web apps are hosted

00:19:54,240 --> 00:19:57,520
in the cloud

00:19:55,280 --> 00:19:58,480
go has first tier support on all major

00:19:57,520 --> 00:20:01,360
cloud platforms

00:19:58,480 --> 00:20:02,559
including google cloud amazon azure and

00:20:01,360 --> 00:20:04,240
olli cloud

00:20:02,559 --> 00:20:06,159
this includes serverless offerings like

00:20:04,240 --> 00:20:08,559
google's app engine and cloud run

00:20:06,159 --> 00:20:10,400
and amazon's lambda and as you would

00:20:08,559 --> 00:20:11,280
expect go has great support for

00:20:10,400 --> 00:20:13,200
databases

00:20:11,280 --> 00:20:15,760
from relational databases to document

00:20:13,200 --> 00:20:18,159
storage like mongodb and elasticsearch

00:20:15,760 --> 00:20:19,520
time series like influx db and memory

00:20:18,159 --> 00:20:21,440
storage like redis

00:20:19,520 --> 00:20:23,919
all have excellent support and go and

00:20:21,440 --> 00:20:25,760
several are written in go

00:20:23,919 --> 00:20:27,760
being a web developer's heart you need

00:20:25,760 --> 00:20:29,520
to master everything from sysops

00:20:27,760 --> 00:20:31,280
server-side programming client-side

00:20:29,520 --> 00:20:33,600
scripting visual design

00:20:31,280 --> 00:20:34,799
css and sql and all the other things

00:20:33,600 --> 00:20:36,799
listed here

00:20:34,799 --> 00:20:38,320
not only do these cross many paradigms

00:20:36,799 --> 00:20:39,440
and styles but they're constantly

00:20:38,320 --> 00:20:40,960
changing

00:20:39,440 --> 00:20:43,840
you also have to be current on the

00:20:40,960 --> 00:20:45,200
latest security trends

00:20:43,840 --> 00:20:47,440
and even if you've done all this

00:20:45,200 --> 00:20:48,640
perfectly you also need to keep on top

00:20:47,440 --> 00:20:51,039
of the latest network

00:20:48,640 --> 00:20:52,640
system and container security it should

00:20:51,039 --> 00:20:54,559
not come as a surprise that web

00:20:52,640 --> 00:20:56,240
applications are notorious for security

00:20:54,559 --> 00:20:58,400
vulnerabilities

00:20:56,240 --> 00:21:00,840
go is leading the way to better security

00:20:58,400 --> 00:21:02,480
encryption with its secure by default

00:21:00,840 --> 00:21:04,400
approach

00:21:02,480 --> 00:21:06,400
the latest encryption standards are

00:21:04,400 --> 00:21:07,280
written and go often ahead of any other

00:21:06,400 --> 00:21:09,679
language

00:21:07,280 --> 00:21:12,000
and ship is part of the standard library

00:21:09,679 --> 00:21:14,840
google let's encrypt and cloudflare

00:21:12,000 --> 00:21:17,919
are all heavy go users for exactly this

00:21:14,840 --> 00:21:20,159
reason unlike other applications

00:21:17,919 --> 00:21:22,080
unlike other languages go applications

00:21:20,159 --> 00:21:24,080
don't just reuse the host operating

00:21:22,080 --> 00:21:26,400
system security libraries

00:21:24,080 --> 00:21:27,840
for most web applications the authors

00:21:26,400 --> 00:21:29,120
need to not only write a secure

00:21:27,840 --> 00:21:31,120
application

00:21:29,120 --> 00:21:33,200
but also ensure that the host operating

00:21:31,120 --> 00:21:35,200
system is fully secure

00:21:33,200 --> 00:21:36,240
with go the security is built right into

00:21:35,200 --> 00:21:38,159
the application

00:21:36,240 --> 00:21:39,280
so it automatically supports the latest

00:21:38,159 --> 00:21:42,960
security standards

00:21:39,280 --> 00:21:43,600
independent of the host go ships with a

00:21:42,960 --> 00:21:46,080
powerful

00:21:43,600 --> 00:21:47,919
and friendly templating system among my

00:21:46,080 --> 00:21:49,760
favorite of its many features is the

00:21:47,919 --> 00:21:52,640
built-in sanitization

00:21:49,760 --> 00:21:53,520
it understands html css javascript and

00:21:52,640 --> 00:21:56,000
uris

00:21:53,520 --> 00:21:57,520
and automatically sanitizes any variable

00:21:56,000 --> 00:21:59,520
used in these contexts

00:21:57,520 --> 00:22:02,240
this built-in safety prevents most

00:21:59,520 --> 00:22:04,000
cross-site scripting problems

00:22:02,240 --> 00:22:06,159
go comes with its own web framework

00:22:04,000 --> 00:22:08,000
built into the standard library of go

00:22:06,159 --> 00:22:09,679
this is the most popular web framework

00:22:08,000 --> 00:22:11,440
for go however

00:22:09,679 --> 00:22:13,440
if your needs exceed what the standard

00:22:11,440 --> 00:22:15,039
library provides there are many web

00:22:13,440 --> 00:22:17,600
frameworks readily available

00:22:15,039 --> 00:22:18,080
and go's modular nature modular nature

00:22:17,600 --> 00:22:20,880
of

00:22:18,080 --> 00:22:22,559
favoring composition means that go's web

00:22:20,880 --> 00:22:23,679
frameworks and libraries all play well

00:22:22,559 --> 00:22:26,720
together

00:22:23,679 --> 00:22:28,400
go.dev has a book tutorial library and

00:22:26,720 --> 00:22:31,840
framework recommendations

00:22:28,400 --> 00:22:33,840
to get you started popular web developer

00:22:31,840 --> 00:22:35,280
projects from smashing magazine to

00:22:33,840 --> 00:22:37,919
vote.gov

00:22:35,280 --> 00:22:40,159
to bootstrap to let's encrypt all use go

00:22:37,919 --> 00:22:42,080
for their websites

00:22:40,159 --> 00:22:44,080
let's outline why go is great for

00:22:42,080 --> 00:22:47,679
application program interfaces

00:22:44,080 --> 00:22:48,559
or apis apis allow the capabilities of

00:22:47,679 --> 00:22:50,400
one program

00:22:48,559 --> 00:22:51,600
to be used by another and they are

00:22:50,400 --> 00:22:53,520
essentially tools

00:22:51,600 --> 00:22:55,280
for bridging businesses in all

00:22:53,520 --> 00:22:56,960
industries

00:22:55,280 --> 00:22:59,039
go is a language with a formal

00:22:56,960 --> 00:23:00,720
specification and it doesn't have

00:22:59,039 --> 00:23:03,280
undefined behavior

00:23:00,720 --> 00:23:04,080
the api behaviors outlined in the spec

00:23:03,280 --> 00:23:06,799
can be read

00:23:04,080 --> 00:23:08,799
in under an hour so even if you're new

00:23:06,799 --> 00:23:10,880
to go coming from another language

00:23:08,799 --> 00:23:11,840
you can most likely know what an api

00:23:10,880 --> 00:23:14,880
definition does

00:23:11,840 --> 00:23:15,840
in very little time this specification

00:23:14,880 --> 00:23:18,559
or spec

00:23:15,840 --> 00:23:20,960
extends to decoding third-party or

00:23:18,559 --> 00:23:23,440
non-standard library packages

00:23:20,960 --> 00:23:24,880
speaking of third-party packages go is

00:23:23,440 --> 00:23:26,240
simple enough that if you want to find

00:23:24,880 --> 00:23:28,320
out what's really going on in some

00:23:26,240 --> 00:23:30,159
unfamiliar code base you can

00:23:28,320 --> 00:23:31,360
and often that's by inspecting the code

00:23:30,159 --> 00:23:33,120
itself

00:23:31,360 --> 00:23:36,080
this simplicity allows for quick

00:23:33,120 --> 00:23:38,000
building all over the go ecosystem with

00:23:36,080 --> 00:23:39,600
the go package discovery site

00:23:38,000 --> 00:23:41,200
which you'll learn about in the go

00:23:39,600 --> 00:23:43,279
ecosystem session

00:23:41,200 --> 00:23:44,320
finding which packages and apis are best

00:23:43,279 --> 00:23:48,960
for the job

00:23:44,320 --> 00:23:51,520
is easy and an almost trivial task

00:23:48,960 --> 00:23:53,520
for those of you interested in specifics

00:23:51,520 --> 00:23:55,120
go is simply at robust

00:23:53,520 --> 00:23:57,039
for containing all the primitives you

00:23:55,120 --> 00:24:01,520
need for apis including

00:23:57,039 --> 00:24:03,919
strings lists maps and concurrency

00:24:01,520 --> 00:24:05,840
i'd like to focus on concurrency here

00:24:03,919 --> 00:24:08,240
concurrency describes the concept of

00:24:05,840 --> 00:24:10,080
running several tasks at the same time

00:24:08,240 --> 00:24:11,840
and this can either happen in a time

00:24:10,080 --> 00:24:14,640
shared manner or

00:24:11,840 --> 00:24:16,960
parallel if you have multiple cores for

00:24:14,640 --> 00:24:18,400
apis concurrent programming is a very

00:24:16,960 --> 00:24:21,919
difficult subject

00:24:18,400 --> 00:24:24,080
but in go we have concurrency built

00:24:21,919 --> 00:24:25,279
right in as a first class feature of the

00:24:24,080 --> 00:24:27,200
language

00:24:25,279 --> 00:24:28,320
this is important for some types of high

00:24:27,200 --> 00:24:30,880
level apis

00:24:28,320 --> 00:24:32,960
like streams and the native concurrency

00:24:30,880 --> 00:24:33,520
is a big deal for apis on both the

00:24:32,960 --> 00:24:36,080
server

00:24:33,520 --> 00:24:37,279
and the client side write balance for

00:24:36,080 --> 00:24:38,799
all apis

00:24:37,279 --> 00:24:40,720
if you care about low level or

00:24:38,799 --> 00:24:43,600
performant apis go

00:24:40,720 --> 00:24:45,360
can help you with bare bones but also is

00:24:43,600 --> 00:24:46,080
complex and heavy enough to be useful

00:24:45,360 --> 00:24:48,400
for high level

00:24:46,080 --> 00:24:50,000
apis especially ones that come from

00:24:48,400 --> 00:24:51,200
object-oriented languages where

00:24:50,000 --> 00:24:54,240
everything is boxed

00:24:51,200 --> 00:24:56,400
and there's a heavy use of generics

00:24:54,240 --> 00:24:57,279
also there are multiple paradigms for

00:24:56,400 --> 00:25:00,880
apis

00:24:57,279 --> 00:25:03,760
including rest rpc and graphql

00:25:00,880 --> 00:25:05,200
go maps well to encodings like json and

00:25:03,760 --> 00:25:08,320
protocol buffers

00:25:05,200 --> 00:25:08,799
and the 1.0 compatibility promise meshes

00:25:08,320 --> 00:25:12,080
well

00:25:08,799 --> 00:25:15,520
with api consistency over time

00:25:12,080 --> 00:25:16,559
in conclusion go is good for apis due to

00:25:15,520 --> 00:25:19,360
simplicity

00:25:16,559 --> 00:25:21,520
a small but strong language for easy

00:25:19,360 --> 00:25:22,640
onboarding and compatible usage across

00:25:21,520 --> 00:25:24,720
paradigms

00:25:22,640 --> 00:25:26,799
robust built-in functionality

00:25:24,720 --> 00:25:28,240
particularly for concurrency

00:25:26,799 --> 00:25:32,240
and a thoughtfully designed middle

00:25:28,240 --> 00:25:32,240
ground between systems and high level

00:25:40,840 --> 00:25:43,840
apis

00:25:47,440 --> 00:25:51,600
thanks matt and steve it was such a

00:25:50,000 --> 00:25:52,480
pleasure to create and present that

00:25:51,600 --> 00:25:54,240
together

00:25:52,480 --> 00:25:55,600
i loved it because i learned some new

00:25:54,240 --> 00:25:58,000
things about web

00:25:55,600 --> 00:25:59,279
which is not my forte and also about the

00:25:58,000 --> 00:26:01,760
growth that's been happening in the

00:25:59,279 --> 00:26:03,840
ecosystem among companies and different

00:26:01,760 --> 00:26:06,240
programming use cases which you can read

00:26:03,840 --> 00:26:09,440
about on go.dev

00:26:06,240 --> 00:26:09,440
steve did you learn anything

00:26:09,600 --> 00:26:14,640
i i did but my favorite part of that was

00:26:11,919 --> 00:26:16,880
actually just watching the live q a

00:26:14,640 --> 00:26:18,720
and seeing all these great questions

00:26:16,880 --> 00:26:20,400
come in it's something usually speakers

00:26:18,720 --> 00:26:22,640
we don't get a chance to

00:26:20,400 --> 00:26:24,480
interact at that level um so that was

00:26:22,640 --> 00:26:25,360
really fun and i hope the questions keep

00:26:24,480 --> 00:26:27,760
on coming

00:26:25,360 --> 00:26:29,360
yeah we'll do our best to try to answer

00:26:27,760 --> 00:26:31,200
each and every one of them there's so

00:26:29,360 --> 00:26:31,679
many good ones and we want to be able to

00:26:31,200 --> 00:26:33,840
get to

00:26:31,679 --> 00:26:35,360
a lot behind the scenes we're kind of

00:26:33,840 --> 00:26:36,880
sending some of the

00:26:35,360 --> 00:26:38,559
people who do know the answer we're

00:26:36,880 --> 00:26:39,200
sending them quick chat messages and

00:26:38,559 --> 00:26:41,279
saying hey

00:26:39,200 --> 00:26:42,880
can you help answer this or that so

00:26:41,279 --> 00:26:44,480
please be patient and hopefully we'll

00:26:42,880 --> 00:26:46,000
get you an answer before the end of the

00:26:44,480 --> 00:26:48,159
show

00:26:46,000 --> 00:26:50,240
next up we're going to hear from steve

00:26:48,159 --> 00:26:50,880
trout our technical writer for the go

00:26:50,240 --> 00:26:54,000
team

00:26:50,880 --> 00:27:07,840
about go basics and installation take it

00:26:54,000 --> 00:27:07,840
away steve

00:28:10,399 --> 00:28:13,600
hey there i'm steve trout i'm a tech

00:28:12,240 --> 00:28:14,960
writer on the go team

00:28:13,600 --> 00:28:17,520
today i'm going to show you how i can

00:28:14,960 --> 00:28:19,440
install go and write a bit of code

00:28:17,520 --> 00:28:21,279
along the way i'll talk about modules

00:28:19,440 --> 00:28:22,640
which go developers use to manage

00:28:21,279 --> 00:28:24,399
dependencies

00:28:22,640 --> 00:28:26,240
and i'll finish up by writing a simple

00:28:24,399 --> 00:28:27,120
web service which is one of the things

00:28:26,240 --> 00:28:30,240
go does best

00:28:27,120 --> 00:28:31,600
so let's get started and install go

00:28:30,240 --> 00:28:34,799
i'll visit the go home page at

00:28:31,600 --> 00:28:38,080
golang.org and click the documents link

00:28:34,799 --> 00:28:40,000
and then installing go

00:28:38,080 --> 00:28:42,640
now this page includes a button i can

00:28:40,000 --> 00:28:45,200
use to download a file to install from

00:28:42,640 --> 00:28:45,679
along with installation instructions if

00:28:45,200 --> 00:28:47,840
the

00:28:45,679 --> 00:28:49,760
the download isn't what i'm looking for

00:28:47,840 --> 00:28:52,240
i can click the other downloads link

00:28:49,760 --> 00:28:58,000
to scroll for a file that might be a

00:28:52,240 --> 00:28:59,120
better fit for me

00:28:58,000 --> 00:29:03,600
but i'm going to click the great big

00:28:59,120 --> 00:29:03,600
button to to download a file to install

00:29:05,120 --> 00:29:13,840
and once it's downloaded i'll open it to

00:29:07,520 --> 00:29:13,840
start the installer

00:29:13,919 --> 00:29:17,120
all right and click continue

00:29:17,840 --> 00:29:21,520
and uh it's telling me that how much

00:29:19,600 --> 00:29:24,880
space go will take up on my disk after

00:29:21,520 --> 00:29:28,559
i've installed i'll click install

00:29:24,880 --> 00:29:28,559
and it prompts me for my password

00:29:31,919 --> 00:29:35,520
and then the installer begins running

00:29:33,360 --> 00:29:36,559
scripts to install go this takes about a

00:29:35,520 --> 00:29:38,320
minute or so

00:29:36,559 --> 00:29:39,600
it's downloading files from the go site

00:29:38,320 --> 00:29:41,600
to my computer

00:29:39,600 --> 00:29:43,200
and it's running scripts to update paths

00:29:41,600 --> 00:29:46,640
on my computer so that i can run

00:29:43,200 --> 00:29:46,640
go commands from the command line

00:29:48,720 --> 00:29:52,480
and once it's finished goes installed

00:29:53,360 --> 00:29:56,640
i'll be using the command line for this

00:29:54,880 --> 00:29:58,960
demo but there are several editors and

00:29:56,640 --> 00:30:00,799
ides that support go

00:29:58,960 --> 00:30:02,080
if you like an ide be sure to check out

00:30:00,799 --> 00:30:04,720
the talk by julie q

00:30:02,080 --> 00:30:06,799
and rebecca stambler so my command

00:30:04,720 --> 00:30:10,480
prompt i'll run the go version command

00:30:06,799 --> 00:30:10,480
to confirm that goes installed

00:30:12,080 --> 00:30:16,399
the output tells me goes release version

00:30:13,919 --> 00:30:17,760
along with the os it's compiled for

00:30:16,399 --> 00:30:19,840
and now i'm ready to write some code

00:30:17,760 --> 00:30:21,600
i'll start with a hello world app

00:30:19,840 --> 00:30:24,559
first i'll create a directory in which

00:30:21,600 --> 00:30:24,559
to keep the code

00:30:27,279 --> 00:30:33,279
and i'll cd in there and then i'll

00:30:30,159 --> 00:30:37,840
create a file to put the code in

00:30:33,279 --> 00:30:37,840
today i'm using sublime text

00:30:38,880 --> 00:30:44,799
so i'll save it into the directory i

00:30:40,559 --> 00:30:44,799
just created and call it hello.go

00:30:46,480 --> 00:30:49,600
alright so all go code needs to be part

00:30:48,480 --> 00:30:51,520
of a package

00:30:49,600 --> 00:30:53,600
a package is the primary group in which

00:30:51,520 --> 00:30:57,120
you organize the functions you write

00:30:53,600 --> 00:30:57,120
so i'll declare a package first

00:30:57,600 --> 00:31:01,360
i'm calling this package main because

00:30:59,440 --> 00:31:01,679
any go code you want to execute on its

00:31:01,360 --> 00:31:03,840
own

00:31:01,679 --> 00:31:06,159
has to be in a main package and i want

00:31:03,840 --> 00:31:07,919
this to run independently

00:31:06,159 --> 00:31:10,000
writing an executable program and go is

00:31:07,919 --> 00:31:10,320
easy there's a specific convention that

00:31:10,000 --> 00:31:12,480
go

00:31:10,320 --> 00:31:14,320
follows create a package called main and

00:31:12,480 --> 00:31:16,399
put a main function in it

00:31:14,320 --> 00:31:18,000
in a main package a main function

00:31:16,399 --> 00:31:23,200
becomes your application's entry

00:31:18,000 --> 00:31:23,200
point so i'll create a main function

00:31:25,120 --> 00:31:28,399
all right so next i'll import the font

00:31:27,279 --> 00:31:33,840
package

00:31:28,399 --> 00:31:33,840
font is short for format

00:31:34,720 --> 00:31:39,279
the font package contains functions for

00:31:37,679 --> 00:31:41,039
reading and printing text

00:31:39,279 --> 00:31:43,600
and it's just one of more than 300

00:31:41,039 --> 00:31:45,200
packages in the go standard library

00:31:43,600 --> 00:31:47,760
i'll be using a function in the pumped

00:31:45,200 --> 00:31:51,279
package to print my greeting

00:31:47,760 --> 00:31:56,159
so inside my main function i'll call

00:31:51,279 --> 00:31:56,159
font println

00:31:58,000 --> 00:32:01,760
so go has great support for great native

00:32:00,399 --> 00:32:03,200
support for unicode

00:32:01,760 --> 00:32:04,960
so i'll get a little bit clever here

00:32:03,200 --> 00:32:05,360
instead of using text from my greeting

00:32:04,960 --> 00:32:07,279
i'll

00:32:05,360 --> 00:32:10,720
i'll grab a couple of emojis and paste

00:32:07,279 --> 00:32:10,720
them into my code and use those

00:32:13,200 --> 00:32:16,720
this looks like a hollow wave

00:32:25,519 --> 00:32:29,840
and looking for the world there it is

00:32:31,200 --> 00:32:33,760
copy that

00:32:35,279 --> 00:32:39,519
and paste that in as well so this should

00:32:38,080 --> 00:32:41,279
be all the code i need

00:32:39,519 --> 00:32:44,080
the quickest way to run go code in a

00:32:41,279 --> 00:32:46,799
simple setup like this without an ide

00:32:44,080 --> 00:32:47,600
is to use the go run command so i'll

00:32:46,799 --> 00:32:51,600
type go

00:32:47,600 --> 00:32:51,600
run hello.go

00:32:52,159 --> 00:32:55,840
and it's an emoji hello world i'll make

00:32:54,480 --> 00:32:56,720
it a little bit more interesting in a

00:32:55,840 --> 00:32:58,240
minute

00:32:56,720 --> 00:33:01,919
but first i want to say a bit more about

00:32:58,240 --> 00:33:03,760
a couple of the things i just introduced

00:33:01,919 --> 00:33:06,000
you saw me use the go run command to run

00:33:03,760 --> 00:33:08,320
a main function in a main package

00:33:06,000 --> 00:33:10,320
earlier i use the go version command to

00:33:08,320 --> 00:33:12,320
confirm that go is installed

00:33:10,320 --> 00:33:14,080
those are just two of many go commands

00:33:12,320 --> 00:33:16,159
that you might find handy

00:33:14,080 --> 00:33:17,519
here just a few more you can run go

00:33:16,159 --> 00:33:20,720
build and go install

00:33:17,519 --> 00:33:23,120
to compile your code to a local binary

00:33:20,720 --> 00:33:25,519
you can run go test to test your code

00:33:23,120 --> 00:33:27,519
with go's testing framework

00:33:25,519 --> 00:33:29,519
and goget is a commonly used command to

00:33:27,519 --> 00:33:30,960
download source for your code for your

00:33:29,519 --> 00:33:32,960
code's dependencies

00:33:30,960 --> 00:33:35,360
i'll show that later when i use code

00:33:32,960 --> 00:33:37,760
someone else is written

00:33:35,360 --> 00:33:40,080
for the full reference on commands check

00:33:37,760 --> 00:33:41,600
out the golang.org website

00:33:40,080 --> 00:33:44,960
where the commands are organized

00:33:41,600 --> 00:33:46,640
according to things you might want to do

00:33:44,960 --> 00:33:48,880
i also want to say more about how go

00:33:46,640 --> 00:33:51,039
code is organized and distributed

00:33:48,880 --> 00:33:53,519
you write code as functions and you

00:33:51,039 --> 00:33:55,360
collect related functions into packages

00:33:53,519 --> 00:33:56,720
and you collect related packages into

00:33:55,360 --> 00:33:58,159
modules

00:33:56,720 --> 00:33:59,919
if you want to make your your functions

00:33:58,159 --> 00:34:02,080
available to other developers

00:33:59,919 --> 00:34:05,200
you publish your module so that it's

00:34:02,080 --> 00:34:07,200
visible on the package discovery site

00:34:05,200 --> 00:34:09,119
as a go developer you have access to

00:34:07,200 --> 00:34:10,720
lots of other packages and functions you

00:34:09,119 --> 00:34:12,560
can use in your own code

00:34:10,720 --> 00:34:14,800
that includes the hundreds of packages

00:34:12,560 --> 00:34:16,320
in the go standard library

00:34:14,800 --> 00:34:20,240
those are listed on the package

00:34:16,320 --> 00:34:21,839
discovery site at package.go.dev

00:34:20,240 --> 00:34:23,520
but you can get even more packages

00:34:21,839 --> 00:34:25,760
written by other developers

00:34:23,520 --> 00:34:27,760
their packages are available alongside

00:34:25,760 --> 00:34:29,200
the the standard library

00:34:27,760 --> 00:34:31,919
you can search for package you might

00:34:29,200 --> 00:34:31,919
want to use

00:34:32,159 --> 00:34:35,359
packages for adding features related to

00:34:33,919 --> 00:34:37,919
databases security

00:34:35,359 --> 00:34:39,119
encryption and so on right now i just

00:34:37,919 --> 00:34:40,480
want to show you how you can use a

00:34:39,119 --> 00:34:42,399
package you found

00:34:40,480 --> 00:34:49,280
so i'll search for one i already know

00:34:42,399 --> 00:34:51,760
about i'll look for the quote package

00:34:49,280 --> 00:34:54,000
and this rscio quote package is the one

00:34:51,760 --> 00:34:56,000
i'm looking for

00:34:54,000 --> 00:34:58,320
so that quote package was written by

00:34:56,000 --> 00:35:00,240
russ cox one of goes designers

00:34:58,320 --> 00:35:02,079
i know russ does good work so i'm going

00:35:00,240 --> 00:35:03,359
to give that one a try in my code

00:35:02,079 --> 00:35:05,040
from the list of functions in the

00:35:03,359 --> 00:35:06,560
package i can see he's got a hello

00:35:05,040 --> 00:35:08,000
function that returns a friendly

00:35:06,560 --> 00:35:10,720
greeting

00:35:08,000 --> 00:35:11,359
and here at the top of the page i can

00:35:10,720 --> 00:35:13,920
see that

00:35:11,359 --> 00:35:14,480
russ's package is in a is it a module

00:35:13,920 --> 00:35:18,160
called r

00:35:14,480 --> 00:35:20,079
c i o dot slash quote

00:35:18,160 --> 00:35:21,200
on the versions tab here i can see a

00:35:20,079 --> 00:35:24,240
list of the versions

00:35:21,200 --> 00:35:25,760
for this package in the module

00:35:24,240 --> 00:35:30,079
each of these represents a tagged

00:35:25,760 --> 00:35:32,160
version of the code in russ's repository

00:35:30,079 --> 00:35:34,480
go modules use the semantic versioning

00:35:32,160 --> 00:35:34,880
model a version number includes a major

00:35:34,480 --> 00:35:37,520
part

00:35:34,880 --> 00:35:38,000
a minor part and a patch part a major

00:35:37,520 --> 00:35:39,680
update

00:35:38,000 --> 00:35:41,359
includes changes that aren't guaranteed

00:35:39,680 --> 00:35:42,880
to be backward compatible

00:35:41,359 --> 00:35:45,200
those might be changes to the modules

00:35:42,880 --> 00:35:46,960
public api for example

00:35:45,200 --> 00:35:48,560
things that break code that's already

00:35:46,960 --> 00:35:50,800
using the module

00:35:48,560 --> 00:35:52,079
a minor version update is guaranteed to

00:35:50,800 --> 00:35:54,000
be backward compatible

00:35:52,079 --> 00:35:56,880
but it also could include changes to the

00:35:54,000 --> 00:35:58,640
public api such as adding new functions

00:35:56,880 --> 00:35:59,920
a patch update is guaranteed to be

00:35:58,640 --> 00:36:02,720
backward compatible

00:35:59,920 --> 00:36:03,119
and is for bug fixes so let's look again

00:36:02,720 --> 00:36:06,480
at

00:36:03,119 --> 00:36:10,800
the v1 versions

00:36:06,480 --> 00:36:14,000
let's look again at the v1 versions v100

00:36:10,800 --> 00:36:17,680
had a single function in it v

00:36:14,000 --> 00:36:19,200
1 1 0 is a minor release so it added

00:36:17,680 --> 00:36:20,800
another function without breaking

00:36:19,200 --> 00:36:23,040
backward compatibility

00:36:20,800 --> 00:36:24,800
and it was the same for v 1 2 0 which

00:36:23,040 --> 00:36:27,760
added a third

00:36:24,800 --> 00:36:29,359
v v121 is a patch release so no changes

00:36:27,760 --> 00:36:32,480
to the public api

00:36:29,359 --> 00:36:33,040
but it's a bug fix release and down here

00:36:32,480 --> 00:36:35,680
v2

00:36:33,040 --> 00:36:38,240
and v3 are major version updates that

00:36:35,680 --> 00:36:40,000
don't guarantee backward compatibility

00:36:38,240 --> 00:36:41,520
this versioning scheme helps you keep

00:36:40,000 --> 00:36:43,280
your code stable

00:36:41,520 --> 00:36:44,560
you can upgrade in a deliberate way

00:36:43,280 --> 00:36:46,240
knowing the risk

00:36:44,560 --> 00:36:48,160
so now i'll try out the package i'll

00:36:46,240 --> 00:36:49,920
copy the package path up here at the top

00:36:48,160 --> 00:36:51,920
of the page

00:36:49,920 --> 00:36:56,160
and i now i've got it so i can paste it

00:36:51,920 --> 00:36:56,160
into my own code in an import statement

00:36:57,680 --> 00:37:04,240
and import or a cio quote

00:37:02,160 --> 00:37:06,480
all right and in my main function i'll

00:37:04,240 --> 00:37:08,240
call russ's quote hello function

00:37:06,480 --> 00:37:09,599
i'll replace what i'm doing there with

00:37:08,240 --> 00:37:13,440
the emojis

00:37:09,599 --> 00:37:13,440
and add a call to hello

00:37:17,920 --> 00:37:21,680
all right so now i'll put my my code

00:37:20,320 --> 00:37:23,680
into its own module

00:37:21,680 --> 00:37:25,599
having it in a module gives me a way to

00:37:23,680 --> 00:37:27,520
manage its dependencies

00:37:25,599 --> 00:37:28,800
like this quote module i just added i'll

00:37:27,520 --> 00:37:30,880
show you how in a minute

00:37:28,800 --> 00:37:37,839
i'll add my code to a new module by

00:37:30,880 --> 00:37:37,839
running the go mod init command

00:37:44,960 --> 00:37:49,040
and for the commands argument i'll give

00:37:47,839 --> 00:37:51,920
it a location

00:37:49,040 --> 00:37:54,000
in my git repository because that's

00:37:51,920 --> 00:37:56,079
where i'll eventually keep my code

00:37:54,000 --> 00:37:57,760
this becomes my module path and it's

00:37:56,079 --> 00:37:59,280
part of a unique identifier for my

00:37:57,760 --> 00:38:05,760
module

00:37:59,280 --> 00:38:08,640
and now i'll run the command

00:38:05,760 --> 00:38:11,520
so the command created a go.mod file

00:38:08,640 --> 00:38:11,520
let's take a look at that

00:38:13,599 --> 00:38:17,520
the file gives the version of go i'm

00:38:15,520 --> 00:38:18,640
using as the minimum required version

00:38:17,520 --> 00:38:20,000
for my module

00:38:18,640 --> 00:38:22,000
also at the top there's that git

00:38:20,000 --> 00:38:24,640
repository location

00:38:22,000 --> 00:38:26,240
and that's now my module path if i

00:38:24,640 --> 00:38:28,000
decide to publish my module for other

00:38:26,240 --> 00:38:30,320
developers to use

00:38:28,000 --> 00:38:32,079
that module path is how go will find my

00:38:30,320 --> 00:38:32,560
code to download it when they need it

00:38:32,079 --> 00:38:35,119
for

00:38:32,560 --> 00:38:36,640
for compiling for example i'm now

00:38:35,119 --> 00:38:38,400
importing the quote package

00:38:36,640 --> 00:38:40,800
but i don't yet have the packages code

00:38:38,400 --> 00:38:41,200
to compile with to get it i'll run go

00:38:40,800 --> 00:38:44,720
get

00:38:41,200 --> 00:38:46,640
that go command i mentioned earlier

00:38:44,720 --> 00:38:48,560
so go went looking for source for the

00:38:46,640 --> 00:38:50,320
packages i'm i'm importing

00:38:48,560 --> 00:38:52,079
the command downloaded the latest

00:38:50,320 --> 00:38:56,160
version of russ's

00:38:52,079 --> 00:39:01,839
quote quote module which for v1 is 152.

00:38:56,160 --> 00:39:01,839
it also made a change to my go.mod file

00:39:01,920 --> 00:39:05,760
the file includes this required

00:39:04,240 --> 00:39:06,560
directive down at the bottom now and

00:39:05,760 --> 00:39:08,800
that directive

00:39:06,560 --> 00:39:12,000
says that my module requires the quote

00:39:08,800 --> 00:39:15,839
module at a minimum version of 1.52

00:39:12,000 --> 00:39:15,839
now i'll run my code again

00:39:19,119 --> 00:39:22,160
all right so that's russ's hello

00:39:20,720 --> 00:39:24,880
function um

00:39:22,160 --> 00:39:26,000
printing hello world so this is a common

00:39:24,880 --> 00:39:28,079
sequencing go

00:39:26,000 --> 00:39:29,280
you start some code and create a module

00:39:28,079 --> 00:39:31,359
if you need it you

00:39:29,280 --> 00:39:33,280
you find a useful package and then you

00:39:31,359 --> 00:39:33,920
run go get to get source code to build

00:39:33,280 --> 00:39:36,160
with

00:39:33,920 --> 00:39:37,440
the go.mod file helps me manage my

00:39:36,160 --> 00:39:39,680
dependencies

00:39:37,440 --> 00:39:41,680
in that required directive if i change

00:39:39,680 --> 00:39:43,359
the quote module's minimum version to

00:39:41,680 --> 00:39:45,920
00:39:43,359 --> 00:39:47,760
go will downgrade the dependency it's

00:39:45,920 --> 00:39:49,760
the same for upgrading

00:39:47,760 --> 00:39:50,800
so i got go installed and i got hello

00:39:49,760 --> 00:39:53,280
world running

00:39:50,800 --> 00:39:55,440
i put my code in a module and i started

00:39:53,280 --> 00:39:56,880
using an external package

00:39:55,440 --> 00:39:58,560
i'll finish up by showing one of the

00:39:56,880 --> 00:40:00,960
things go does best

00:39:58,560 --> 00:40:03,920
i'll make a hello world idea and turn it

00:40:00,960 --> 00:40:06,160
into a web service

00:40:03,920 --> 00:40:07,280
web-based apps are some of the easiest

00:40:06,160 --> 00:40:09,599
to build with go

00:40:07,280 --> 00:40:10,560
that includes http servers and web

00:40:09,599 --> 00:40:12,240
services

00:40:10,560 --> 00:40:14,000
i'll change my code so that one makes

00:40:12,240 --> 00:40:15,599
one when someone makes a call to a

00:40:14,000 --> 00:40:17,920
specific url

00:40:15,599 --> 00:40:21,040
i'll return json with the hello world

00:40:17,920 --> 00:40:22,800
greeting in three languages

00:40:21,040 --> 00:40:25,839
i'll start by declaring a struct to hold

00:40:22,800 --> 00:40:25,839
the response data

00:40:29,280 --> 00:40:33,119
a struct is a collection of fields so it

00:40:31,520 --> 00:40:34,240
gives me a way to group together my

00:40:33,119 --> 00:40:37,280
greeting text

00:40:34,240 --> 00:40:39,119
the language and a language code notice

00:40:37,280 --> 00:40:41,680
the string literals in the text the

00:40:39,119 --> 00:40:44,960
green text there

00:40:41,680 --> 00:40:47,119
those are called struct tags

00:40:44,960 --> 00:40:48,880
each one specifies the json field name

00:40:47,119 --> 00:40:50,079
that will be used in the output the

00:40:48,880 --> 00:40:51,680
response value

00:40:50,079 --> 00:40:53,520
that gives me a way to ensure that

00:40:51,680 --> 00:40:56,240
generated json fields have

00:40:53,520 --> 00:40:57,680
lower case names otherwise go would use

00:40:56,240 --> 00:41:00,000
the struct field names

00:40:57,680 --> 00:41:01,920
which are capitalized in go you

00:41:00,000 --> 00:41:03,599
capitalize a field or function name

00:41:01,920 --> 00:41:05,119
when you want it to be visible outside

00:41:03,599 --> 00:41:07,359
the package it's in

00:41:05,119 --> 00:41:09,920
in this case the go code outside my

00:41:07,359 --> 00:41:11,839
package that creates json from my struct

00:41:09,920 --> 00:41:13,760
needs access it can only have if the

00:41:11,839 --> 00:41:15,280
field name is capitalized

00:41:13,760 --> 00:41:18,079
lowercase field and function names

00:41:15,280 --> 00:41:20,000
aren't visible outside the package

00:41:18,079 --> 00:41:22,880
next i'll declare a slice to hold the

00:41:20,000 --> 00:41:22,880
multiple greetings

00:41:23,839 --> 00:41:28,560
a slice is a go ray whose size changes

00:41:26,640 --> 00:41:30,160
as i add and remove items

00:41:28,560 --> 00:41:32,160
this slice gives me a way to collect

00:41:30,160 --> 00:41:34,720
multiple structs

00:41:32,160 --> 00:41:36,400
one for each language now i need a

00:41:34,720 --> 00:41:40,000
function to do something when the

00:41:36,400 --> 00:41:40,000
requests come over http

00:41:41,119 --> 00:41:47,760
so i will add a handler

00:41:45,680 --> 00:41:49,599
i'm adding a hello handler function

00:41:47,760 --> 00:41:52,319
whose parameters represent the

00:41:49,599 --> 00:41:54,480
the request and the response i'll create

00:41:52,319 --> 00:41:57,599
both the response writer

00:41:54,480 --> 00:41:59,599
and the request type are part of the

00:41:57,599 --> 00:42:01,839
http package

00:41:59,599 --> 00:42:04,079
that's in the go standard library the

00:42:01,839 --> 00:42:06,400
http package is one of the reasons it's

00:42:04,079 --> 00:42:07,920
so easy to write web services and go

00:42:06,400 --> 00:42:10,160
it includes functions for making

00:42:07,920 --> 00:42:12,480
requests over http methods

00:42:10,160 --> 00:42:13,440
handling responses and headers and other

00:42:12,480 --> 00:42:16,480
low-level

00:42:13,440 --> 00:42:17,280
aspects of http check out the talk by

00:42:16,480 --> 00:42:19,359
julie q

00:42:17,280 --> 00:42:22,720
and rebecca stambler for more about

00:42:19,359 --> 00:42:25,200
using the package to set up a web server

00:42:22,720 --> 00:42:26,960
inside the handler function my handler

00:42:25,200 --> 00:42:29,520
function encodes the contents

00:42:26,960 --> 00:42:31,119
of the greeting slice into json for use

00:42:29,520 --> 00:42:33,920
as a response

00:42:31,119 --> 00:42:35,040
to do that it uses an encoder type from

00:42:33,920 --> 00:42:36,800
the json package

00:42:35,040 --> 00:42:38,240
which is also included in the standard

00:42:36,800 --> 00:42:40,720
library

00:42:38,240 --> 00:42:41,920
and i'm using set indent to set an

00:42:40,720 --> 00:42:43,599
indent string so

00:42:41,920 --> 00:42:45,680
the response is a little bit nicer to

00:42:43,599 --> 00:42:47,200
look at

00:42:45,680 --> 00:42:49,119
before i finish the code i want to

00:42:47,200 --> 00:42:50,560
mention the colon equals operator i'm

00:42:49,119 --> 00:42:52,480
using here

00:42:50,560 --> 00:42:55,200
you use it to declare a variable and

00:42:52,480 --> 00:42:57,599
assign it a value in one line of code

00:42:55,200 --> 00:42:59,839
you don't need to declare the variables

00:42:57,599 --> 00:43:01,839
type go figures that out for you

00:42:59,839 --> 00:43:04,000
i like it because it's a great example

00:43:01,839 --> 00:43:06,160
of how ghost design keeps things simple

00:43:04,000 --> 00:43:07,760
and uncluttered now to put it all

00:43:06,160 --> 00:43:09,920
together so the service starts when i

00:43:07,760 --> 00:43:12,960
run the code

00:43:09,920 --> 00:43:16,000
i'll update my main function and replace

00:43:12,960 --> 00:43:19,280
what i was doing before

00:43:16,000 --> 00:43:21,680
with this so i'm calling handle func to

00:43:19,280 --> 00:43:22,880
map a url path to the handler function i

00:43:21,680 --> 00:43:25,839
just wrote

00:43:22,880 --> 00:43:26,560
when a request comes in on slash hello

00:43:25,839 --> 00:43:28,720
uh

00:43:26,560 --> 00:43:32,000
handle the hello handler function will

00:43:28,720 --> 00:43:35,119
be used to help to handle the request

00:43:32,000 --> 00:43:37,119
then i'll call listen and serve uh to

00:43:35,119 --> 00:43:38,560
to start a server that listens on port

00:43:37,119 --> 00:43:40,880
00:43:38,560 --> 00:43:42,880
ordinarily listen serve just starts and

00:43:40,880 --> 00:43:44,480
and runs without returning a value

00:43:42,880 --> 00:43:47,760
but if it returns an error i want to

00:43:44,480 --> 00:43:49,280
handle that the fatal function

00:43:47,760 --> 00:43:51,839
will in the standard libraries log

00:43:49,280 --> 00:43:55,839
package will log the error and exit

00:43:51,839 --> 00:43:55,839
now we'll run the code

00:43:59,200 --> 00:44:04,880
and go run hello.go okay

00:44:02,560 --> 00:44:07,040
so apparently i'm not quite finished yet

00:44:04,880 --> 00:44:09,280
uh it looks like this commands output

00:44:07,040 --> 00:44:12,240
tells me that i'm importing two packages

00:44:09,280 --> 00:44:14,319
that i'm not using and trying to use

00:44:12,240 --> 00:44:17,359
three packages that i'm not importing

00:44:14,319 --> 00:44:20,560
so i'm importing font and

00:44:17,359 --> 00:44:22,079
rscio quote and not using them and i'm

00:44:20,560 --> 00:44:25,200
trying to use http

00:44:22,079 --> 00:44:27,119
json and log so let's take a look

00:44:25,200 --> 00:44:28,240
at the code here here's where i'm

00:44:27,119 --> 00:44:31,280
commenting font

00:44:28,240 --> 00:44:33,440
and and quote so

00:44:31,280 --> 00:44:34,640
i need to update my imports to account

00:44:33,440 --> 00:44:37,839
for that

00:44:34,640 --> 00:44:37,839
so let's fix that

00:44:38,880 --> 00:44:42,960
by pasting in some new imports i'm going

00:44:41,839 --> 00:44:46,079
to

00:44:42,960 --> 00:44:48,240
combine the imports into a block using a

00:44:46,079 --> 00:44:50,079
single import statement this is

00:44:48,240 --> 00:44:52,640
something i could have done earlier i

00:44:50,079 --> 00:44:52,640
just didn't

00:44:55,040 --> 00:45:01,359
so now i'll try to run the code again i

00:44:58,160 --> 00:45:01,359
feel a little bit better about it this

00:45:02,839 --> 00:45:07,760
time

00:45:04,800 --> 00:45:09,599
okay so the service is now running i'll

00:45:07,760 --> 00:45:11,839
open another command prompt to try it

00:45:09,599 --> 00:45:11,839
out

00:45:14,880 --> 00:45:22,800
and i will curl localhost

00:45:18,960 --> 00:45:22,800
8080 hello

00:45:23,280 --> 00:45:26,319
all right it looks like it's working now

00:45:24,720 --> 00:45:28,560
so i've got uh

00:45:26,319 --> 00:45:31,280
jason a snippet of jason with my hello

00:45:28,560 --> 00:45:32,880
world messages in three languages

00:45:31,280 --> 00:45:35,119
and i got this going by using only

00:45:32,880 --> 00:45:36,800
packages from go standard library

00:45:35,119 --> 00:45:38,160
there are external packages that have

00:45:36,800 --> 00:45:41,119
more web service features

00:45:38,160 --> 00:45:41,599
and might be as easy to use if i wanted

00:45:41,119 --> 00:45:43,119
i could

00:45:41,599 --> 00:45:44,800
i could find those using the package

00:45:43,119 --> 00:45:46,640
disk site

00:45:44,800 --> 00:45:48,480
so that's all i have to show today you

00:45:46,640 --> 00:45:49,599
can find lots more about go at

00:45:48,480 --> 00:45:52,800
golang.org

00:45:49,599 --> 00:45:54,319
go.dev and all over the web if you're

00:45:52,800 --> 00:45:56,720
interested in support for go

00:45:54,319 --> 00:45:58,240
in editors and ides as well as ghost

00:45:56,720 --> 00:46:00,400
package discovery tools

00:45:58,240 --> 00:46:01,760
be sure to check out the talk by julie q

00:46:00,400 --> 00:46:15,839
and rebecca stambler

00:46:01,760 --> 00:46:15,839
thanks for watching

00:46:20,319 --> 00:46:24,400
hi welcome back steve thanks so much for

00:46:23,680 --> 00:46:26,000
sharing that

00:46:24,400 --> 00:46:28,480
watching that video really brought me

00:46:26,000 --> 00:46:29,760
back to when i was first learning go

00:46:28,480 --> 00:46:32,000
many years ago

00:46:29,760 --> 00:46:33,119
and the good experience i had my

00:46:32,000 --> 00:46:36,160
favorite part

00:46:33,119 --> 00:46:37,119
was i i looked in the q a part and there

00:46:36,160 --> 00:46:39,920
was a

00:46:37,119 --> 00:46:41,760
participant alexander who during your

00:46:39,920 --> 00:46:44,480
talk was able to download

00:46:41,760 --> 00:46:46,160
install and write his first go program

00:46:44,480 --> 00:46:48,160
all while you were teaching

00:46:46,160 --> 00:46:50,160
that's so inspiring carmen when you

00:46:48,160 --> 00:46:53,760
first started go what were some of

00:46:50,160 --> 00:46:56,960
your good and challenging experiences

00:46:53,760 --> 00:47:00,319
uh what i really liked gofund

00:46:56,960 --> 00:47:03,359
um coming from python and ruby i

00:47:00,319 --> 00:47:03,680
wrestled a lot with linton code and i

00:47:03,359 --> 00:47:06,800
just

00:47:03,680 --> 00:47:09,040
was tired of spaces versus cavs

00:47:06,800 --> 00:47:10,319
argument and i think that go lint is a

00:47:09,040 --> 00:47:12,640
simple but

00:47:10,319 --> 00:47:13,440
productive booster production booster

00:47:12,640 --> 00:47:15,520
for go

00:47:13,440 --> 00:47:16,960
programmers you import that library and

00:47:15,520 --> 00:47:19,599
you run gofund

00:47:16,960 --> 00:47:21,280
before you compile and it just

00:47:19,599 --> 00:47:22,400
automatically does everything for you so

00:47:21,280 --> 00:47:24,800
that tooling

00:47:22,400 --> 00:47:26,400
just came right in part as part of the

00:47:24,800 --> 00:47:28,240
installation was great

00:47:26,400 --> 00:47:30,000
i think also i like the little things

00:47:28,240 --> 00:47:31,119
that steve mentioned the short variable

00:47:30,000 --> 00:47:32,559
declarator that

00:47:31,119 --> 00:47:34,880
understands the type and also

00:47:32,559 --> 00:47:36,559
initializes these are the little things

00:47:34,880 --> 00:47:40,720
that just kind of made go

00:47:36,559 --> 00:47:41,280
um just for me a pleasant experience got

00:47:40,720 --> 00:47:43,359
things

00:47:41,280 --> 00:47:46,000
some of the like more friction based

00:47:43,359 --> 00:47:47,760
things out of the way

00:47:46,000 --> 00:47:49,440
that's great and what a nice transition

00:47:47,760 --> 00:47:51,280
because we're about to hear

00:47:49,440 --> 00:47:52,480
from julian rebecca who are going to

00:47:51,280 --> 00:47:55,680
share with us

00:47:52,480 --> 00:47:56,880
more about go tooling and more about go

00:47:55,680 --> 00:47:59,040
discovery and how you can

00:47:56,880 --> 00:48:00,640
find out all the great libraries across

00:47:59,040 --> 00:48:03,599
the go ecosystem

00:48:00,640 --> 00:48:04,319
as always put questions in the q a forum

00:48:03,599 --> 00:48:05,520
not like it

00:48:04,319 --> 00:48:07,440
it feels like no one needs to be

00:48:05,520 --> 00:48:08,960
reminded that before i'm so active but

00:48:07,440 --> 00:48:10,160
we we do want to answer every one of

00:48:08,960 --> 00:48:11,359
these questions so if you have a

00:48:10,160 --> 00:48:13,359
question please

00:48:11,359 --> 00:48:14,640
ask it and and start getting excited for

00:48:13,359 --> 00:48:21,839
the after party

00:48:14,640 --> 00:48:21,839
and julian rebecca handing off to you

00:49:20,079 --> 00:49:23,359
hi everyone i'm julie i work on the go

00:49:22,960 --> 00:49:25,200
team

00:49:23,359 --> 00:49:26,720
with rebecca and today we're going to

00:49:25,200 --> 00:49:28,319
show you how to build a goweb

00:49:26,720 --> 00:49:30,000
application with the help of the go

00:49:28,319 --> 00:49:33,280
package discovery site and your go

00:49:30,000 --> 00:49:35,040
editor tools if you don't already have

00:49:33,280 --> 00:49:37,119
go installed on your computer you can do

00:49:35,040 --> 00:49:38,559
so at the link shown on the screen

00:49:37,119 --> 00:49:40,400
if you need help you can check out the

00:49:38,559 --> 00:49:42,640
video of steve's getting started with go

00:49:40,400 --> 00:49:44,319
session from earlier today

00:49:42,640 --> 00:49:45,839
in this session we're going to start by

00:49:44,319 --> 00:49:47,520
showing you how to set up your editor

00:49:45,839 --> 00:49:50,720
for go development

00:49:47,520 --> 00:49:52,480
thanks julie hi everyone i'm rebecca and

00:49:50,720 --> 00:49:54,400
i work on the go team

00:49:52,480 --> 00:49:56,160
one of the great things about go is that

00:49:54,400 --> 00:49:58,240
the go team provides back-end tooling

00:49:56,160 --> 00:49:58,880
that plugs into many of the popular text

00:49:58,240 --> 00:50:03,440
editors

00:49:58,880 --> 00:50:03,440
like vs code vim emacs and sublime

00:50:03,760 --> 00:50:07,839
for today's tutorial we'll use vs code

00:50:06,160 --> 00:50:09,440
however all the features that we show

00:50:07,839 --> 00:50:13,839
you today are available in those other

00:50:09,440 --> 00:50:13,839
editors too

00:50:14,319 --> 00:50:18,160
so we'll begin by creating our project

00:50:16,400 --> 00:50:19,839
you can find this code on github at the

00:50:18,160 --> 00:50:21,920
url in the demo

00:50:19,839 --> 00:50:23,599
we're going to run gomod init to create

00:50:21,920 --> 00:50:25,359
a module which you saw earlier in

00:50:23,599 --> 00:50:28,480
steve's presentation

00:50:25,359 --> 00:50:31,359
so now let's open our module in vs code

00:50:28,480 --> 00:50:32,800
here is the go mod file that is created

00:50:31,359 --> 00:50:36,079
by running gomod in it

00:50:32,800 --> 00:50:38,000
let's see here and you can see that i've

00:50:36,079 --> 00:50:40,319
already installed the go extension

00:50:38,000 --> 00:50:41,920
which you'll need for coding with go and

00:50:40,319 --> 00:50:44,480
you can install it by searching for go

00:50:41,920 --> 00:50:46,960
in the extensions pane

00:50:44,480 --> 00:50:49,280
so next we'll create our go program by

00:50:46,960 --> 00:50:51,599
creating a main.go file

00:50:49,280 --> 00:50:53,200
and since we're using modules the

00:50:51,599 --> 00:50:54,240
extension will prompt us to install the

00:50:53,200 --> 00:50:57,119
language server

00:50:54,240 --> 00:50:58,720
go please so this is the editor back end

00:50:57,119 --> 00:51:00,800
that i mentioned earlier

00:50:58,720 --> 00:51:03,280
go please works in all editors to

00:51:00,800 --> 00:51:05,599
provide an ide like experience for go

00:51:03,280 --> 00:51:07,520
especially with go modules and so once

00:51:05,599 --> 00:51:09,040
we install it we'll be able to use the

00:51:07,520 --> 00:51:11,359
various ide like features like

00:51:09,040 --> 00:51:14,240
completion to create our package in our

00:51:11,359 --> 00:51:17,440
main program and now once we're done

00:51:14,240 --> 00:51:19,359
with that we'll be ready to start coding

00:51:17,440 --> 00:51:21,440
so now that our editors are set up let's

00:51:19,359 --> 00:51:23,200
go ahead and build something

00:51:21,440 --> 00:51:25,359
as steve mentioned in the intro to go

00:51:23,200 --> 00:51:26,800
session this morning web applications

00:51:25,359 --> 00:51:28,400
are one of the most popular things that

00:51:26,800 --> 00:51:30,480
developers like to build and go

00:51:28,400 --> 00:51:31,760
so we're going to do that today i'll

00:51:30,480 --> 00:51:33,520
start by sharing with you one of my

00:51:31,760 --> 00:51:35,920
favorite things

00:51:33,520 --> 00:51:37,680
which is this turkey chili recipe i've

00:51:35,920 --> 00:51:39,040
been making this recipe all year and i

00:51:37,680 --> 00:51:40,480
have it saved on my computer in a

00:51:39,040 --> 00:51:42,160
markdown file

00:51:40,480 --> 00:51:44,640
but what i would really like to have is

00:51:42,160 --> 00:51:47,760
a nicer ui to read this recipe and other

00:51:44,640 --> 00:51:47,760
recipes in my collection

00:51:48,000 --> 00:51:51,520
so today we're going to build a web app

00:51:49,839 --> 00:51:53,760
which reads this markdown file

00:51:51,520 --> 00:51:55,200
converts it into html and renders it in

00:51:53,760 --> 00:51:56,720
our browser

00:51:55,200 --> 00:51:59,280
that way we'll have an easy way to

00:51:56,720 --> 00:52:01,119
browse all of our favorite recipes

00:51:59,280 --> 00:52:02,720
and as a first step to building our web

00:52:01,119 --> 00:52:04,079
app let's read the markdown file and

00:52:02,720 --> 00:52:07,119
print the contents of that file

00:52:04,079 --> 00:52:09,359
to our terminal so

00:52:07,119 --> 00:52:10,640
in the module that rebecca just created

00:52:09,359 --> 00:52:11,520
i'm going to create a directory called

00:52:10,640 --> 00:52:13,359
static

00:52:11,520 --> 00:52:16,240
and i'll copy the markdown file and

00:52:13,359 --> 00:52:17,839
image for that recipe into this folder

00:52:16,240 --> 00:52:19,599
there are tons of packages that are part

00:52:17,839 --> 00:52:21,200
of the go standard library and included

00:52:19,599 --> 00:52:22,640
when you install go

00:52:21,200 --> 00:52:24,559
in steve's getting started with go

00:52:22,640 --> 00:52:26,079
session earlier he showed us how to use

00:52:24,559 --> 00:52:27,680
the thumps package

00:52:26,079 --> 00:52:32,400
i'm going to use another package from

00:52:27,680 --> 00:52:34,160
the standard library called i o util

00:52:32,400 --> 00:52:36,280
so let's check out this package on the

00:52:34,160 --> 00:52:39,280
go discovery site which lives at

00:52:36,280 --> 00:52:39,280
pkg.go.dev

00:52:41,119 --> 00:52:45,359
the go discovery site is a website with

00:52:43,359 --> 00:52:46,480
information about go packages that you

00:52:45,359 --> 00:52:49,040
might want to discover

00:52:46,480 --> 00:52:50,319
evaluate and integrate into your modules

00:52:49,040 --> 00:52:51,520
i want to give you a preview of some

00:52:50,319 --> 00:52:52,160
features that are going to be coming

00:52:51,520 --> 00:52:53,839
soon

00:52:52,160 --> 00:52:55,920
so in this tutorial i'm actually going

00:52:53,839 --> 00:52:56,319
to be working off a new version of the

00:52:55,920 --> 00:52:57,839
site

00:52:56,319 --> 00:52:59,599
that's going to be that will be live in

00:52:57,839 --> 00:53:01,359
the next few weeks

00:52:59,599 --> 00:53:02,720
i'm going to start by going to our

00:53:01,359 --> 00:53:07,119
search bar over here

00:53:02,720 --> 00:53:07,119
and looking up the i o util package

00:53:08,319 --> 00:53:12,160
and as we can see from the package

00:53:10,240 --> 00:53:15,280
documentation ioutil

00:53:12,160 --> 00:53:17,119
implements some i o utility functions

00:53:15,280 --> 00:53:18,960
in this tutorial we're going to use the

00:53:17,119 --> 00:53:20,160
read file function to read our markdown

00:53:18,960 --> 00:53:22,720
file from disk

00:53:20,160 --> 00:53:24,000
and then print it into the terminal so

00:53:22,720 --> 00:53:25,680
let's go ahead

00:53:24,000 --> 00:53:28,000
and look for the read file function in

00:53:25,680 --> 00:53:29,280
this index and click on it

00:53:28,000 --> 00:53:31,440
this will take us straight to the

00:53:29,280 --> 00:53:32,800
function and from here i can see the

00:53:31,440 --> 00:53:35,200
function signature

00:53:32,800 --> 00:53:36,640
a description of how to use the function

00:53:35,200 --> 00:53:38,960
and an example

00:53:36,640 --> 00:53:40,240
so let's open up the example and go

00:53:38,960 --> 00:53:42,000
ahead and copy it

00:53:40,240 --> 00:53:44,480
so that we can then build off of it in

00:53:42,000 --> 00:53:46,960
our editor

00:53:44,480 --> 00:53:48,400
now let's start writing some code let's

00:53:46,960 --> 00:53:51,680
create a web server to present

00:53:48,400 --> 00:53:51,680
our turkey chili recipe

00:53:52,480 --> 00:53:55,920
in the same module that we created

00:53:54,000 --> 00:53:57,680
earlier we're going to add a helper

00:53:55,920 --> 00:54:00,400
function to load a page by reading this

00:53:57,680 --> 00:54:02,160
turkey chili recipe file from disk

00:54:00,400 --> 00:54:04,559
i'll just paste in the code that julie

00:54:02,160 --> 00:54:05,920
copied from the i o util package earlier

00:54:04,559 --> 00:54:08,240
and i'll put it into our load page

00:54:05,920 --> 00:54:10,000
helper you'll remember that steve

00:54:08,240 --> 00:54:12,079
manually updated import statements in

00:54:10,000 --> 00:54:12,559
the earlier talk but when i save the

00:54:12,079 --> 00:54:14,480
file

00:54:12,559 --> 00:54:16,480
the editor will automatically format my

00:54:14,480 --> 00:54:17,200
code and it will add all the necessary

00:54:16,480 --> 00:54:20,240
imports

00:54:17,200 --> 00:54:21,599
to the top of my file finally

00:54:20,240 --> 00:54:23,040
we'll just clean up the code a little

00:54:21,599 --> 00:54:25,839
bit to match our helper function

00:54:23,040 --> 00:54:25,839
signature

00:54:27,040 --> 00:54:31,599
so now that we've read the file we can

00:54:29,359 --> 00:54:33,359
actually begin building out the web app

00:54:31,599 --> 00:54:35,280
you can build a web server and go using

00:54:33,359 --> 00:54:36,880
only the standard library with the net

00:54:35,280 --> 00:54:38,160
http package

00:54:36,880 --> 00:54:40,960
so we're going to start by exploring

00:54:38,160 --> 00:54:42,480
that package i'm not necessarily sure of

00:54:40,960 --> 00:54:43,920
which function i will need to use

00:54:42,480 --> 00:54:45,599
but i know that i want to register code

00:54:43,920 --> 00:54:48,319
to run an http handler

00:54:45,599 --> 00:54:49,680
so i can just start off by typing auto

00:54:48,319 --> 00:54:51,520
the http package

00:54:49,680 --> 00:54:52,960
and triggering autocomplete i'll

00:54:51,520 --> 00:54:54,160
immediately see a bunch of symbols

00:54:52,960 --> 00:54:55,920
related to handlers

00:54:54,160 --> 00:54:57,760
and i can figure out which one to choose

00:54:55,920 --> 00:55:00,000
by reading the documentation that pops

00:54:57,760 --> 00:55:01,520
up on the side here

00:55:00,000 --> 00:55:02,960
i think that handle func is the one that

00:55:01,520 --> 00:55:04,480
i want because it lets me create a

00:55:02,960 --> 00:55:06,799
handler with a single function

00:55:04,480 --> 00:55:08,000
so that's the one that i'm going to pick

00:55:06,799 --> 00:55:10,319
but i still want a little bit more

00:55:08,000 --> 00:55:12,400
information about how to use handle func

00:55:10,319 --> 00:55:13,680
fortunately when i hover over the

00:55:12,400 --> 00:55:15,480
function i'll see

00:55:13,680 --> 00:55:16,960
a link to the discovery site

00:55:15,480 --> 00:55:19,040
package.go.dev

00:55:16,960 --> 00:55:20,559
when i click on it i get taken to the

00:55:19,040 --> 00:55:23,839
documentation for handle func

00:55:20,559 --> 00:55:25,599
in the net http package and

00:55:23,839 --> 00:55:26,880
here we have not just documentation but

00:55:25,599 --> 00:55:28,799
another example

00:55:26,880 --> 00:55:30,400
so we can open up this example and we

00:55:28,799 --> 00:55:31,839
can use our same trick from earlier

00:55:30,400 --> 00:55:33,520
and just copy and paste this code

00:55:31,839 --> 00:55:36,720
directly into our

00:55:33,520 --> 00:55:39,280
editor so this is all the code that it

00:55:36,720 --> 00:55:41,280
takes to write a basic web server and go

00:55:39,280 --> 00:55:42,640
let's modify it to use our load page

00:55:41,280 --> 00:55:45,440
helper function that will read our

00:55:42,640 --> 00:55:45,440
recipe file

00:55:45,520 --> 00:55:49,119
we'll start off by validating the user

00:55:47,359 --> 00:55:50,880
inputs in the url

00:55:49,119 --> 00:55:52,079
make sure they typed in the right thing

00:55:50,880 --> 00:55:53,440
they're looking for the turkey chili

00:55:52,079 --> 00:55:55,200
recipe

00:55:53,440 --> 00:55:57,119
and then we're going to call the load

00:55:55,200 --> 00:55:59,599
page function to print out the file

00:55:57,119 --> 00:55:59,599
content

00:55:59,760 --> 00:56:02,880
next we'll add some logic to handle any

00:56:01,760 --> 00:56:03,920
errors that may occur while we're

00:56:02,880 --> 00:56:05,680
reading the file

00:56:03,920 --> 00:56:07,119
and you'll notice that the completion is

00:56:05,680 --> 00:56:08,480
designed to search all of the available

00:56:07,119 --> 00:56:10,480
symbols in the workspace

00:56:08,480 --> 00:56:11,839
so you don't even have to type http dot

00:56:10,480 --> 00:56:13,040
to get that internal server error

00:56:11,839 --> 00:56:14,240
completion you can just

00:56:13,040 --> 00:56:15,359
start writing out the word internal

00:56:14,240 --> 00:56:17,839
because that's what you know what you're

00:56:15,359 --> 00:56:17,839
looking for

00:56:19,440 --> 00:56:22,799
and then finally we'll just format the

00:56:21,040 --> 00:56:24,720
content as an html template so that we

00:56:22,799 --> 00:56:26,480
can actually render it on the webpage

00:56:24,720 --> 00:56:28,720
now let's run the server and see how it

00:56:26,480 --> 00:56:28,720
looks

00:56:29,280 --> 00:56:32,480
not too bad we got something going but

00:56:31,599 --> 00:56:34,799
the formatting

00:56:32,480 --> 00:56:35,839
isn't very readable it would be really

00:56:34,799 --> 00:56:37,680
nice if we could actually render that

00:56:35,839 --> 00:56:39,359
mark down as html

00:56:37,680 --> 00:56:41,359
so the standard library has gotten us

00:56:39,359 --> 00:56:41,920
really far we've like made an entire web

00:56:41,359 --> 00:56:43,680
app

00:56:41,920 --> 00:56:45,680
but unfortunately the standard library

00:56:43,680 --> 00:56:48,720
doesn't have a markdown parser

00:56:45,680 --> 00:56:50,720
so julie how can i go find one we can

00:56:48,720 --> 00:56:52,400
use the go package discovery site to

00:56:50,720 --> 00:56:55,119
search for third-party packages that we

00:56:52,400 --> 00:56:57,119
might want to use

00:56:55,119 --> 00:56:58,319
so i'm going to go to the discovery site

00:56:57,119 --> 00:57:00,880
and type in markdown

00:56:58,319 --> 00:57:01,920
into the search box and look there are a

00:57:00,880 --> 00:57:04,319
lot of results

00:57:01,920 --> 00:57:06,079
this first one here is black friday and

00:57:04,319 --> 00:57:07,280
if we take a look at it it seems to be

00:57:06,079 --> 00:57:10,160
pretty popular

00:57:07,280 --> 00:57:12,160
based off the imported by account so

00:57:10,160 --> 00:57:14,400
let's go ahead and click into that one

00:57:12,160 --> 00:57:16,240
and take a look

00:57:14,400 --> 00:57:18,880
so on this page i see a banner that

00:57:16,240 --> 00:57:20,880
tells me there's a newer v2 version

00:57:18,880 --> 00:57:22,960
i'm going to go ahead and use this v2

00:57:20,880 --> 00:57:25,440
package instead

00:57:22,960 --> 00:57:26,880
and i can see on this page that the v2

00:57:25,440 --> 00:57:28,960
version seems to have

00:57:26,880 --> 00:57:32,000
less importers than the v1 which is

00:57:28,960 --> 00:57:33,280
likely why i was ranked lower in search

00:57:32,000 --> 00:57:35,119
i want to figure out how to use black

00:57:33,280 --> 00:57:36,160
friday so let's take a look at the

00:57:35,119 --> 00:57:38,319
readme

00:57:36,160 --> 00:57:39,200
from the readme i see this installation

00:57:38,319 --> 00:57:40,720
section

00:57:39,200 --> 00:57:43,760
um and so i'm going to click expand

00:57:40,720 --> 00:57:43,760
which is right underneath it

00:57:43,839 --> 00:57:48,240
there are instructions here on how to go

00:57:45,680 --> 00:57:49,680
get and import this package

00:57:48,240 --> 00:57:52,559
and if i look through to read me a

00:57:49,680 --> 00:57:53,599
little bit more and go ahead and scroll

00:57:52,559 --> 00:57:56,079
down on this

00:57:53,599 --> 00:57:57,839
page i see that black friday is

00:57:56,079 --> 00:57:58,880
currently maintained and the recommended

00:57:57,839 --> 00:58:00,400
version is v2

00:57:58,880 --> 00:58:03,200
so we're looking at the right version

00:58:00,400 --> 00:58:05,520
now the package documentation is also a

00:58:03,200 --> 00:58:07,119
useful place to look for information

00:58:05,520 --> 00:58:09,760
and we can access it from the left side

00:58:07,119 --> 00:58:12,240
nav this overview tells me that black

00:58:09,760 --> 00:58:13,839
friday is a markdown processor

00:58:12,240 --> 00:58:15,760
and the other description here is that

00:58:13,839 --> 00:58:16,799
it tells me the simplest way to invoke

00:58:15,760 --> 00:58:19,599
black friday

00:58:16,799 --> 00:58:21,520
is to go ahead and call the run function

00:58:19,599 --> 00:58:25,040
so i'm going to go to this jump to

00:58:21,520 --> 00:58:27,280
identifier box here and search for run

00:58:25,040 --> 00:58:29,040
and so this brings up the run function

00:58:27,280 --> 00:58:31,040
and i can click on it which will take me

00:58:29,040 --> 00:58:33,200
straight to that identifier

00:58:31,040 --> 00:58:34,880
i can see the function signature a

00:58:33,200 --> 00:58:36,880
description

00:58:34,880 --> 00:58:39,040
in this description here tells me that

00:58:36,880 --> 00:58:41,440
all i need to do to use black friday

00:58:39,040 --> 00:58:42,640
is to pass in an input and then i'll get

00:58:41,440 --> 00:58:46,160
back in html

00:58:42,640 --> 00:58:48,079
output so i think that this package

00:58:46,160 --> 00:58:49,680
is worth trying out so i'm going to go

00:58:48,079 --> 00:58:50,000
to my header and click this copy button

00:58:49,680 --> 00:58:52,319
to get

00:58:50,000 --> 00:58:54,240
the import path onto my clipboard

00:58:52,319 --> 00:58:56,640
rebecca how about we go ahead and give

00:58:54,240 --> 00:58:58,240
black friday a try in our editor

00:58:56,640 --> 00:59:04,079
thanks for finding a markdown parser

00:58:58,240 --> 00:59:05,200
julie now let's go ahead and use it so

00:59:04,079 --> 00:59:07,680
we're going to run

00:59:05,200 --> 00:59:10,240
a go get command to add black friday to

00:59:07,680 --> 00:59:11,760
our module into our local module cache

00:59:10,240 --> 00:59:14,079
immediately you'll see that my projects

00:59:11,760 --> 00:59:15,280
go.mod file is modified to add new

00:59:14,079 --> 00:59:17,119
dependencies

00:59:15,280 --> 00:59:18,720
and also immediately the editor will

00:59:17,119 --> 00:59:20,240
show me that these dependencies are not

00:59:18,720 --> 00:59:21,760
yet used in our module

00:59:20,240 --> 00:59:24,000
which is expected we haven't used the

00:59:21,760 --> 00:59:25,200
black friday package yet

00:59:24,000 --> 00:59:27,359
but now that the package is in our

00:59:25,200 --> 00:59:29,440
module cache the editor can provide auto

00:59:27,359 --> 00:59:30,880
completion and other support for it

00:59:29,440 --> 00:59:32,960
so let's go ahead and use black friday

00:59:30,880 --> 00:59:33,599
in our module when i type out black

00:59:32,960 --> 00:59:35,040
friday

00:59:33,599 --> 00:59:36,400
the editor will offer me multiple

00:59:35,040 --> 00:59:38,319
options since there are multiple

00:59:36,400 --> 00:59:39,760
versions available

00:59:38,319 --> 00:59:42,319
but julie suggested that we should use

00:59:39,760 --> 00:59:43,920
v2 so let's pick that one

00:59:42,319 --> 00:59:45,359
and julie also suggested that we should

00:59:43,920 --> 00:59:46,160
use the run function to parse the

00:59:45,359 --> 00:59:49,040
markdown

00:59:46,160 --> 00:59:50,240
so we'll use that one as well and

00:59:49,040 --> 00:59:51,599
finally we'll just make some minor

00:59:50,240 --> 00:59:53,839
modifications to the code

00:59:51,599 --> 00:59:55,440
to return an html template since that's

00:59:53,839 --> 00:59:57,040
what we need to render the markdown as

00:59:55,440 --> 00:59:58,960
html

00:59:57,040 --> 01:00:01,839
and now it's time to try running our

00:59:58,960 --> 01:00:01,839
code once again

01:00:07,599 --> 01:00:11,280
awesome the turkey chili recipe showed

01:00:09,520 --> 01:00:12,400
up but i'm not sure if it's rendering

01:00:11,280 --> 01:00:13,839
totally correctly

01:00:12,400 --> 01:00:16,079
there's still something off about those

01:00:13,839 --> 01:00:17,839
emojis at the top and also our table

01:00:16,079 --> 01:00:19,520
doesn't look much like a table

01:00:17,839 --> 01:00:21,839
julia do you think there's an issue with

01:00:19,520 --> 01:00:23,760
this markdown file

01:00:21,839 --> 01:00:27,040
let's take a closer look and see how to

01:00:23,760 --> 01:00:28,319
evaluate a third party go package

01:00:27,040 --> 01:00:30,240
it seems like the things that are broken

01:00:28,319 --> 01:00:31,440
on this page are the table and the

01:00:30,240 --> 01:00:33,119
emojis

01:00:31,440 --> 01:00:35,119
and i know i followed the spec for

01:00:33,119 --> 01:00:36,640
github flavor markdown but maybe there's

01:00:35,119 --> 01:00:38,720
an issue with how black friday is

01:00:36,640 --> 01:00:39,760
parsing my markdown file

01:00:38,720 --> 01:00:42,079
let's go ahead and look at the

01:00:39,760 --> 01:00:43,599
documentation for black friday again

01:00:42,079 --> 01:00:45,119
i'm going to search for a github flavor

01:00:43,599 --> 01:00:46,640
marked down this page and let's see if

01:00:45,119 --> 01:00:48,160
anything comes up

01:00:46,640 --> 01:00:50,000
oh and look it takes me right to this

01:00:48,160 --> 01:00:51,839
section and it tells me that

01:00:50,000 --> 01:00:53,599
black friday is structured to allow

01:00:51,839 --> 01:00:55,359
alternative rendering engines

01:00:53,599 --> 01:00:57,280
but github flavor markdown isn't

01:00:55,359 --> 01:00:59,280
supportive right out of the box

01:00:57,280 --> 01:01:00,319
what about emojis let's search for that

01:00:59,280 --> 01:01:02,640
on the page

01:01:00,319 --> 01:01:05,680
it looks like nothing is coming out but

01:01:02,640 --> 01:01:07,680
if i go and click this repository link

01:01:05,680 --> 01:01:09,119
to go and look at the project i can

01:01:07,680 --> 01:01:10,960
browse around on the issue tracker and

01:01:09,119 --> 01:01:13,359
see if anything comes up there

01:01:10,960 --> 01:01:14,880
let's go to the issue tracker search for

01:01:13,359 --> 01:01:16,480
the word emoji

01:01:14,880 --> 01:01:19,359
and see if anything comes up related to

01:01:16,480 --> 01:01:19,359
emoji support

01:01:19,920 --> 01:01:24,079
so there's this closed issue here and if

01:01:23,040 --> 01:01:27,680
i click on it

01:01:24,079 --> 01:01:30,720
and click through this issue

01:01:27,680 --> 01:01:32,000
and uh look through the top and maybe

01:01:30,720 --> 01:01:35,359
i'm going to scroll to the bottom here

01:01:32,000 --> 01:01:37,599
and see if there's a resolution

01:01:35,359 --> 01:01:39,359
it seems like what this is telling me is

01:01:37,599 --> 01:01:40,960
that black friday

01:01:39,359 --> 01:01:42,720
is compatible with this other third

01:01:40,960 --> 01:01:43,440
party package that provides emoji

01:01:42,720 --> 01:01:45,520
support

01:01:43,440 --> 01:01:46,480
but it doesn't have it integrated

01:01:45,520 --> 01:01:48,240
directly

01:01:46,480 --> 01:01:49,520
so black friday could still be a great

01:01:48,240 --> 01:01:51,359
package to use

01:01:49,520 --> 01:01:52,880
but i'm kind of curious to know if

01:01:51,359 --> 01:01:54,079
there's something else that would fit my

01:01:52,880 --> 01:01:56,319
use case better

01:01:54,079 --> 01:01:58,079
so how about we go ahead and revisit the

01:01:56,319 --> 01:01:59,839
search results that we had for markdown

01:01:58,079 --> 01:02:02,400
before

01:01:59,839 --> 01:02:03,440
so on this page i see that the second

01:02:02,400 --> 01:02:05,599
result in this list

01:02:03,440 --> 01:02:07,599
is something called go markdown in this

01:02:05,599 --> 01:02:09,119
case this package doesn't have a tagged

01:02:07,599 --> 01:02:10,880
v1 version

01:02:09,119 --> 01:02:12,799
and so it might not necessarily be

01:02:10,880 --> 01:02:13,440
stable i don't really want to pull this

01:02:12,799 --> 01:02:16,319
package

01:02:13,440 --> 01:02:18,240
into my project just yet in case this

01:02:16,319 --> 01:02:19,599
breaks something later on

01:02:18,240 --> 01:02:21,280
there's this other project here at

01:02:19,599 --> 01:02:23,039
goldmark though that looks promising it

01:02:21,280 --> 01:02:25,440
has over 100 importers

01:02:23,039 --> 01:02:26,079
and there's a v1 release let's click

01:02:25,440 --> 01:02:29,200
through it

01:02:26,079 --> 01:02:31,599
and see what this project is like

01:02:29,200 --> 01:02:33,280
so from this page i can immediately see

01:02:31,599 --> 01:02:35,119
that the latest version of goldmark was

01:02:33,280 --> 01:02:36,640
published pretty recently

01:02:35,119 --> 01:02:39,359
and if i go and click on the version

01:02:36,640 --> 01:02:41,359
history i see that there's a pretty

01:02:39,359 --> 01:02:44,160
consistent history of maintenance

01:02:41,359 --> 01:02:44,799
for this project going back to the main

01:02:44,160 --> 01:02:46,640
page

01:02:44,799 --> 01:02:48,079
let's look through the readme and see

01:02:46,640 --> 01:02:50,240
what that says

01:02:48,079 --> 01:02:51,920
i'm going to look for github flavor

01:02:50,240 --> 01:02:53,760
markdown support again

01:02:51,920 --> 01:02:56,160
and right at the top here it tells me

01:02:53,760 --> 01:02:57,839
that goldmark is easy to extend and

01:02:56,160 --> 01:02:59,359
there are extensions provided for github

01:02:57,839 --> 01:03:00,880
flavor markdown

01:02:59,359 --> 01:03:04,640
if i scroll through this readme a little

01:03:00,880 --> 01:03:05,920
bit more i see the other features here

01:03:04,640 --> 01:03:08,079
one of which being that it's really

01:03:05,920 --> 01:03:10,319
easily extensible

01:03:08,079 --> 01:03:12,559
and if i look through the usage section

01:03:10,319 --> 01:03:13,440
it provides me examples of how to use

01:03:12,559 --> 01:03:15,440
that code

01:03:13,440 --> 01:03:17,839
and code snippets that i can use to pull

01:03:15,440 --> 01:03:19,359
stuff into my code

01:03:17,839 --> 01:03:20,960
okay rebecca i think we have enough

01:03:19,359 --> 01:03:23,359
information here do you want to go

01:03:20,960 --> 01:03:25,119
and give goldmark a try sounds good

01:03:23,359 --> 01:03:26,400
let's switch out black friday for

01:03:25,119 --> 01:03:27,599
goldmark

01:03:26,400 --> 01:03:30,880
we're going to start off by downloading

01:03:27,599 --> 01:03:33,280
the goldmark package

01:03:30,880 --> 01:03:35,119
but it might be easier if i extracted a

01:03:33,280 --> 01:03:36,160
helper extracted a helper function to do

01:03:35,119 --> 01:03:38,319
the markdown rendering

01:03:36,160 --> 01:03:39,680
and then i modified that so i'm going to

01:03:38,319 --> 01:03:42,160
highlight the area that i want to

01:03:39,680 --> 01:03:44,240
extract and click extract to function

01:03:42,160 --> 01:03:45,440
the editor will refactor the code for me

01:03:44,240 --> 01:03:46,880
and all i have to do

01:03:45,440 --> 01:03:48,480
is rename the function to something a

01:03:46,880 --> 01:03:50,240
little bit more useful maybe something

01:03:48,480 --> 01:03:52,160
like render markdown

01:03:50,240 --> 01:03:53,760
and finally we'll replace all the code

01:03:52,160 --> 01:03:56,480
in the render markdown function

01:03:53,760 --> 01:03:58,000
to be the code that uses goldmark so

01:03:56,480 --> 01:04:00,319
just paste that in and then we're ready

01:03:58,000 --> 01:04:02,720
to go let's try running our server one

01:04:00,319 --> 01:04:02,720
last time

01:04:03,920 --> 01:04:07,599
awesome looks exactly exactly as we

01:04:05,760 --> 01:04:08,400
expected we have our turkey emojis at

01:04:07,599 --> 01:04:11,520
the top

01:04:08,400 --> 01:04:13,920
and we have our formatted table well

01:04:11,520 --> 01:04:15,119
our package is ready for use um and we

01:04:13,920 --> 01:04:17,520
had pushed it to github

01:04:15,119 --> 01:04:18,799
and the code is open source so i would

01:04:17,520 --> 01:04:20,079
really love to see this package in the

01:04:18,799 --> 01:04:23,440
go discovery site

01:04:20,079 --> 01:04:25,200
let's go ahead and add it so while we're

01:04:23,440 --> 01:04:28,319
on our projects github page

01:04:25,200 --> 01:04:29,920
let's add a pkg.go.dev prefix

01:04:28,319 --> 01:04:32,319
to the url so then we can see this

01:04:29,920 --> 01:04:34,480
package on the discovery site

01:04:32,319 --> 01:04:36,160
you'll notice our package isn't here yet

01:04:34,480 --> 01:04:37,280
but i can go ahead and click this

01:04:36,160 --> 01:04:38,799
request button

01:04:37,280 --> 01:04:40,799
and that will request for the package to

01:04:38,799 --> 01:04:43,520
be downloaded there it is

01:04:40,799 --> 01:04:44,960
we can see our readme we can see the

01:04:43,520 --> 01:04:46,799
documentation

01:04:44,960 --> 01:04:48,640
and then if we look in the header here

01:04:46,799 --> 01:04:50,640
we can see an imports

01:04:48,640 --> 01:04:52,240
link and clicking on that shows us all

01:04:50,640 --> 01:04:52,799
the packages that we've been importing

01:04:52,240 --> 01:04:55,760
into

01:04:52,799 --> 01:04:57,200
our package if we then click on source

01:04:55,760 --> 01:04:59,200
files on the left hand side

01:04:57,200 --> 01:05:00,720
this takes us to the bottom of the page

01:04:59,200 --> 01:05:03,440
and here's the file that rebecca has

01:05:00,720 --> 01:05:05,280
been editing this whole time in vs code

01:05:03,440 --> 01:05:08,400
we can click on it and it'll take us to

01:05:05,280 --> 01:05:10,000
the actual code repository

01:05:08,400 --> 01:05:12,799
and here's all the code that we've been

01:05:10,000 --> 01:05:14,400
working on during today's tutorial

01:05:12,799 --> 01:05:16,720
but it would be really nice though if

01:05:14,400 --> 01:05:17,520
when users stumbled upon our package on

01:05:16,720 --> 01:05:18,720
github

01:05:17,520 --> 01:05:20,640
they knew that they could also look at

01:05:18,720 --> 01:05:22,319
our package documentation on the go

01:05:20,640 --> 01:05:24,160
discovery site

01:05:22,319 --> 01:05:26,240
so the go discovery site actually

01:05:24,160 --> 01:05:26,880
provides a badge exactly for this use

01:05:26,240 --> 01:05:28,880
case

01:05:26,880 --> 01:05:30,720
we can generate a badge and then put it

01:05:28,880 --> 01:05:32,799
in our readme and then when people see

01:05:30,720 --> 01:05:36,160
our readme they'll know to click on it

01:05:32,799 --> 01:05:39,280
so let's go to pkg.go.dev badge

01:05:36,160 --> 01:05:41,440
um and we can put the

01:05:39,280 --> 01:05:43,359
module path into this input box i'll go

01:05:41,440 --> 01:05:44,799
back to the cop the project page and

01:05:43,359 --> 01:05:47,440
copy the url

01:05:44,799 --> 01:05:49,520
and then paste it right here this will

01:05:47,440 --> 01:05:51,599
then generate code snippets for me

01:05:49,520 --> 01:05:52,559
so there's one for html and one for

01:05:51,599 --> 01:05:54,240
markdown

01:05:52,559 --> 01:05:55,680
i'm going to click to copy the one for

01:05:54,240 --> 01:05:57,839
markdown

01:05:55,680 --> 01:05:59,760
and add that to my clipboard and then

01:05:57,839 --> 01:06:02,799
i'll go back to our repository

01:05:59,760 --> 01:06:04,960
and go and edit the readme file and put

01:06:02,799 --> 01:06:06,079
this code snippet into the top of our

01:06:04,960 --> 01:06:07,680
readme file

01:06:06,079 --> 01:06:09,920
and if i click the preview changes

01:06:07,680 --> 01:06:11,599
button i'll see that there's a badge now

01:06:09,920 --> 01:06:13,200
at the top of our readme file and

01:06:11,599 --> 01:06:14,079
anybody comes across it and clicks on

01:06:13,200 --> 01:06:15,839
this badge

01:06:14,079 --> 01:06:18,079
um they'll be taken straight to our

01:06:15,839 --> 01:06:20,480
project page on the go discovery site

01:06:18,079 --> 01:06:21,920
so our demo code is public but so are

01:06:20,480 --> 01:06:23,599
the tools that we use today

01:06:21,920 --> 01:06:26,160
the code bases for the go package

01:06:23,599 --> 01:06:29,359
discovery site and the go editor tools

01:06:26,160 --> 01:06:29,359
are also open source

01:06:30,319 --> 01:06:33,359
if you want to contribute to these go

01:06:31,680 --> 01:06:34,720
projects you can find them at the links

01:06:33,359 --> 01:06:36,480
on the screen

01:06:34,720 --> 01:06:38,000
you can also find the package i've been

01:06:36,480 --> 01:06:41,200
working on in this tutorial

01:06:38,000 --> 01:06:43,680
right on the go discovery site at this

01:06:41,200 --> 01:06:43,680
url

01:06:43,760 --> 01:06:47,440
thank you for joining us today and if

01:06:45,599 --> 01:07:01,839
any questions feel free to reach out to

01:06:47,440 --> 01:07:01,839
us on twitter

01:07:03,359 --> 01:07:07,280
thanks rebecca and julie that should

01:07:05,680 --> 01:07:09,440
give you a good understanding of the

01:07:07,280 --> 01:07:11,440
details of how package discovery and

01:07:09,440 --> 01:07:13,119
editor integration all come together for

01:07:11,440 --> 01:07:15,280
a great gog experience

01:07:13,119 --> 01:07:17,760
i hope you all found that as useful as i

01:07:15,280 --> 01:07:19,119
do to learn more you can visit the go

01:07:17,760 --> 01:07:22,880
documentation pages

01:07:19,119 --> 01:07:25,640
at golang.org doc if you're a gcp or

01:07:22,880 --> 01:07:27,440
google cloud customer check out

01:07:25,640 --> 01:07:29,200
shell.cloud.google.com which is a cloud

01:07:27,440 --> 01:07:31,200
editor with vs code baked in

01:07:29,200 --> 01:07:33,200
and all the go integrations including

01:07:31,200 --> 01:07:35,200
debugger support

01:07:33,200 --> 01:07:36,480
last but certainly not least we're

01:07:35,200 --> 01:07:39,520
excited to welcome

01:07:36,480 --> 01:07:41,760
steve kaufman from khan academy to tell

01:07:39,520 --> 01:07:42,720
us why and how his team migrated to go

01:07:41,760 --> 01:07:45,039
and what benefits

01:07:42,720 --> 01:07:46,720
they're seeing from the transition this

01:07:45,039 --> 01:07:49,039
is the third steam that we have

01:07:46,720 --> 01:07:52,000
in this go open source live day what do

01:07:49,039 --> 01:07:52,000
you think steve

01:07:52,480 --> 01:07:56,400
i think if we could get all steves at

01:07:54,799 --> 01:07:58,640
the next conference that would be

01:07:56,400 --> 01:07:59,920
maybe the best conference ever we have

01:07:58,640 --> 01:08:03,200
steve khan

01:07:59,920 --> 01:08:05,599
steve khan i'm down for it steve khan

01:08:03,200 --> 01:08:06,880
well thank you for being a part of

01:08:05,599 --> 01:08:08,880
google steve

01:08:06,880 --> 01:08:10,400
at google open source live and now for

01:08:08,880 --> 01:08:25,839
steve kaufman

01:08:10,400 --> 01:08:25,839
we're all ears

01:09:15,440 --> 01:09:18,799
hi i'm steve kaufman and i work at khan

01:09:18,000 --> 01:09:20,799
academy

01:09:18,799 --> 01:09:22,319
and today i'd like to tell you how khan

01:09:20,799 --> 01:09:24,880
academy is saving

01:09:22,319 --> 01:09:25,759
both time and money by transitioning

01:09:24,880 --> 01:09:31,600
from python

01:09:25,759 --> 01:09:31,600
to go first what is khan academy

01:09:32,159 --> 01:09:35,759
at khan academy we believe it doesn't

01:09:34,239 --> 01:09:38,319
matter where you start

01:09:35,759 --> 01:09:39,040
what matters is where you go by offering

01:09:38,319 --> 01:09:41,279
a free

01:09:39,040 --> 01:09:42,159
world-class education for anyone

01:09:41,279 --> 01:09:44,319
anywhere

01:09:42,159 --> 01:09:46,159
we're leveling the playing field one

01:09:44,319 --> 01:09:48,640
learner at a time

01:09:46,159 --> 01:09:50,000
just last year millions of people spent

01:09:48,640 --> 01:09:52,799
8.7

01:09:50,000 --> 01:09:55,520
billion minutes actively learning at

01:09:52,799 --> 01:09:58,400
khan academy

01:09:55,520 --> 01:10:00,640
now who am i if you'll pardon the brief

01:09:58,400 --> 01:10:02,239
digression

01:10:00,640 --> 01:10:04,239
i've been a software engineer for 20

01:10:02,239 --> 01:10:05,840
years and i've worked at khan academy

01:10:04,239 --> 01:10:07,840
for the past year

01:10:05,840 --> 01:10:09,040
in my career i've found that i've grown

01:10:07,840 --> 01:10:10,640
the most professionally

01:10:09,040 --> 01:10:13,120
when i work with people with diverse

01:10:10,640 --> 01:10:14,800
experiences i love the diversity of

01:10:13,120 --> 01:10:17,760
experience that i've seen at khan

01:10:14,800 --> 01:10:20,320
and i'm proud that khan is committed to

01:10:17,760 --> 01:10:22,719
further increasing that diversity

01:10:20,320 --> 01:10:24,560
one other thing i love about khan is on

01:10:22,719 --> 01:10:28,000
the anniversary of our first day

01:10:24,560 --> 01:10:30,320
it's a tradition for us to give back

01:10:28,000 --> 01:10:31,280
this year i collected information on all

01:10:30,320 --> 01:10:33,040
the best remote

01:10:31,280 --> 01:10:35,199
home office setups for all those who are

01:10:33,040 --> 01:10:36,880
newly working from home

01:10:35,199 --> 01:10:38,880
i always enjoy this kind of quirky

01:10:36,880 --> 01:10:41,679
personal gifts that we give to show our

01:10:38,880 --> 01:10:43,040
appreciation to one another and now i

01:10:41,679 --> 01:10:45,280
want to show you

01:10:43,040 --> 01:10:46,960
how khan academy engineers are

01:10:45,280 --> 01:10:48,239
shepherding us through a remarkable

01:10:46,960 --> 01:10:49,920
transformation

01:10:48,239 --> 01:10:52,239
which will hopefully be invisible

01:10:49,920 --> 01:10:54,080
externally just to show how much i

01:10:52,239 --> 01:10:58,080
appreciate the work of the rest of

01:10:54,080 --> 01:11:01,120
the organization

01:10:58,080 --> 01:11:04,560
first where did we start we started

01:11:01,120 --> 01:11:07,040
on gcp app engine

01:11:04,560 --> 01:11:08,480
and we started with a python 2 monolith

01:11:07,040 --> 01:11:10,840
and this served us well for much of the

01:11:08,480 --> 01:11:12,800
company's org

01:11:10,840 --> 01:11:16,159
history

01:11:12,800 --> 01:11:18,880
where are we going well

01:11:16,159 --> 01:11:21,199
we're going to gcp app engine still but

01:11:18,880 --> 01:11:24,480
we're also going to multiple go services

01:11:21,199 --> 01:11:27,840
27 and we're going to use graphql

01:11:24,480 --> 01:11:27,840
in between the services

01:11:28,800 --> 01:11:34,080
so as you may have heard there's been an

01:11:32,000 --> 01:11:36,320
end-of-life announcement for python 2

01:11:34,080 --> 01:11:40,080
and when that came out it forced us to

01:11:36,320 --> 01:11:43,199
make some choices

01:11:40,080 --> 01:11:45,520
we chose go it was fast

01:11:43,199 --> 01:11:46,880
which translates to cheaper it's got a

01:11:45,520 --> 01:11:50,480
rich ecosystem

01:11:46,880 --> 01:11:52,800
and a rich standard library it's simple

01:11:50,480 --> 01:11:53,520
and productive and maintaining someone

01:11:52,800 --> 01:11:57,199
else's code

01:11:53,520 --> 01:11:59,199
is a pleasure in colleen i've maintained

01:11:57,199 --> 01:12:01,440
code and i've written my own code in

01:11:59,199 --> 01:12:04,000
many different languages over my career

01:12:01,440 --> 01:12:06,080
i love the expressivity of writing code

01:12:04,000 --> 01:12:07,440
i love doing some clever little trick

01:12:06,080 --> 01:12:09,520
and doing all these other kinds of

01:12:07,440 --> 01:12:10,000
things switching from one paradigm to

01:12:09,520 --> 01:12:11,600
another

01:12:10,000 --> 01:12:14,000
experimenting with things and playing

01:12:11,600 --> 01:12:15,600
with them it's a true joy

01:12:14,000 --> 01:12:18,080
but the problem is is that when i'm

01:12:15,600 --> 01:12:19,760
maintaining somebody else's code

01:12:18,080 --> 01:12:21,440
the cleverness that they put into their

01:12:19,760 --> 01:12:24,880
code sometimes

01:12:21,440 --> 01:12:27,280
makes my head hurt sometimes i look at

01:12:24,880 --> 01:12:28,000
their code and i have no idea what this

01:12:27,280 --> 01:12:29,600
is doing

01:12:28,000 --> 01:12:31,600
and what the context of the original

01:12:29,600 --> 01:12:35,120
decision was especially as it's

01:12:31,600 --> 01:12:37,040
shifted over time people switch from one

01:12:35,120 --> 01:12:39,760
paradigm to another

01:12:37,040 --> 01:12:42,080
back and forth when i maintain somebody

01:12:39,760 --> 01:12:44,480
else's code in golang

01:12:42,080 --> 01:12:46,080
it's a pleasure because it looks just

01:12:44,480 --> 01:12:48,960
like my code

01:12:46,080 --> 01:12:49,760
i love that it may be grumpy at first

01:12:48,960 --> 01:12:52,560
but

01:12:49,760 --> 01:12:53,920
i really love the maintainability of go

01:12:52,560 --> 01:12:56,560
it's so simple

01:12:53,920 --> 01:12:57,600
it's so easy for anybody to jump into a

01:12:56,560 --> 01:12:59,840
code basin

01:12:57,600 --> 01:13:03,199
makes perfect sense to them we also had

01:12:59,840 --> 01:13:06,239
to choose what platform we should run on

01:13:03,199 --> 01:13:09,040
we chose app engine again we wanted to

01:13:06,239 --> 01:13:10,880
avoid undifferentiated heavy lifting

01:13:09,040 --> 01:13:13,040
many organizations get a little too

01:13:10,880 --> 01:13:16,800
caught up in their own creations

01:13:13,040 --> 01:13:17,600
and their own sort of creations end up

01:13:16,800 --> 01:13:19,760
owning them

01:13:17,600 --> 01:13:21,600
as they have to have a burden for

01:13:19,760 --> 01:13:23,600
maintaining something unique

01:13:21,600 --> 01:13:25,360
that the rest of the ecosystem doesn't

01:13:23,600 --> 01:13:27,440
know anything about

01:13:25,360 --> 01:13:29,040
if there are common problems with common

01:13:27,440 --> 01:13:32,159
solutions

01:13:29,040 --> 01:13:33,440
it's easier for us to focus on our own

01:13:32,159 --> 01:13:37,199
business value

01:13:33,440 --> 01:13:40,080
than to try to actually have to

01:13:37,199 --> 01:13:41,360
make some other unique solution the

01:13:40,080 --> 01:13:44,320
other thing about app engine is

01:13:41,360 --> 01:13:46,960
that it scales great when covid19 forced

01:13:44,320 --> 01:13:49,679
school closures across the world

01:13:46,960 --> 01:13:50,320
we really had almost nothing to talk

01:13:49,679 --> 01:13:53,120
about

01:13:50,320 --> 01:13:54,320
because everything just scaled pretty

01:13:53,120 --> 01:13:56,239
much amazingly

01:13:54,320 --> 01:13:57,920
we had a few secondary systems that

01:13:56,239 --> 01:14:01,360
weren't user visible that we had to make

01:13:57,920 --> 01:14:04,239
some tweaks to but no real problems

01:14:01,360 --> 01:14:05,760
to speak of which i think speaks volumes

01:14:04,239 --> 01:14:08,880
to the reliability

01:14:05,760 --> 01:14:10,960
of app engine i should actually say even

01:14:08,880 --> 01:14:13,920
more about that

01:14:10,960 --> 01:14:15,199
our page duty is all volunteer and the

01:14:13,920 --> 01:14:17,600
reason why we can

01:14:15,199 --> 01:14:18,480
choose to let everybody opt out of that

01:14:17,600 --> 01:14:22,560
and have to

01:14:18,480 --> 01:14:23,760
opt in is because it goes off so rarely

01:14:22,560 --> 01:14:26,960
after hours

01:14:23,760 --> 01:14:28,000
it has only gone off it's less than once

01:14:26,960 --> 01:14:29,840
a month

01:14:28,000 --> 01:14:31,280
for the past year and a half and it's

01:14:29,840 --> 01:14:34,400
continuing to go off

01:14:31,280 --> 01:14:36,480
increasingly rarely in the off hours

01:14:34,400 --> 01:14:38,560
and every time it has gone off it's been

01:14:36,480 --> 01:14:41,280
our fault it's not been google's

01:14:38,560 --> 01:14:42,080
so the app engine's pretty great i

01:14:41,280 --> 01:14:45,120
highly recommend

01:14:42,080 --> 01:14:46,640
it the other choice we had was

01:14:45,120 --> 01:14:49,280
should we stick with the monolith or

01:14:46,640 --> 01:14:52,080
switch to services

01:14:49,280 --> 01:14:53,040
we chose services try to imagine an

01:14:52,080 --> 01:14:54,960
entire family

01:14:53,040 --> 01:14:56,800
all living working and going to school

01:14:54,960 --> 01:15:00,239
in the same small living space

01:14:56,800 --> 01:15:02,400
i know so far-fetched but bear with me

01:15:00,239 --> 01:15:04,320
we have 86 engineers at khan academy and

01:15:02,400 --> 01:15:06,080
in our monolith it started to feel

01:15:04,320 --> 01:15:08,080
similarly cramped

01:15:06,080 --> 01:15:09,520
borderless engineering required intense

01:15:08,080 --> 01:15:11,679
thoughtfulness discipline and

01:15:09,520 --> 01:15:12,480
coordination to avoid bumping into one

01:15:11,679 --> 01:15:15,040
another

01:15:12,480 --> 01:15:15,920
our deploy cues got longer and longer as

01:15:15,040 --> 01:15:18,640
we needed to test

01:15:15,920 --> 01:15:20,239
all the things for even a small change

01:15:18,640 --> 01:15:21,679
we also couldn't isolate how much

01:15:20,239 --> 01:15:23,760
specific efforts cost

01:15:21,679 --> 01:15:25,520
compared to the benefit they brought to

01:15:23,760 --> 01:15:27,199
know whether we were spending our

01:15:25,520 --> 01:15:28,960
resources wisely

01:15:27,199 --> 01:15:31,280
and or whether we should choose another

01:15:28,960 --> 01:15:31,280
path

01:15:32,320 --> 01:15:38,000
we also need to choose how should

01:15:34,159 --> 01:15:40,560
services communicate between one another

01:15:38,000 --> 01:15:42,080
we chose graphql for this we had great

01:15:40,560 --> 01:15:45,440
success previously with

01:15:42,080 --> 01:15:48,000
react and graphql on the front end

01:15:45,440 --> 01:15:50,800
app engine as awesome as it is

01:15:48,000 --> 01:15:54,960
unfortunately does not support http 2

01:15:50,800 --> 01:15:56,800
grpc yet but graphql provided a

01:15:54,960 --> 01:15:58,880
ubiquitous language across

01:15:56,800 --> 01:16:00,800
go and javascript divide and across the

01:15:58,880 --> 01:16:02,719
backend front-end divide

01:16:00,800 --> 01:16:04,800
so that all of our engineers could

01:16:02,719 --> 01:16:06,480
actually have a very similar experience

01:16:04,800 --> 01:16:09,040
when they were at least talking about

01:16:06,480 --> 01:16:10,320
those contracts speaking of those

01:16:09,040 --> 01:16:13,280
contracts

01:16:10,320 --> 01:16:14,960
by having our graphql be schema driven

01:16:13,280 --> 01:16:17,120
and then generate the code

01:16:14,960 --> 01:16:19,520
from those schemas we didn't have to get

01:16:17,120 --> 01:16:23,120
tangled up in expensive contract testing

01:16:19,520 --> 01:16:25,280
because we knew that those were exactly

01:16:23,120 --> 01:16:27,120
what we had written we wrote the spec

01:16:25,280 --> 01:16:29,040
first as the contract

01:16:27,120 --> 01:16:31,440
and then the code just got generated

01:16:29,040 --> 01:16:31,440
from that

01:16:32,159 --> 01:16:35,360
we also had to decide how should we

01:16:33,520 --> 01:16:36,960
divide up into services from our

01:16:35,360 --> 01:16:38,800
monolith

01:16:36,960 --> 01:16:41,040
it's a little messy to put them all in

01:16:38,800 --> 01:16:41,520
here but i wanted to illustrate the

01:16:41,040 --> 01:16:43,440
point

01:16:41,520 --> 01:16:45,040
that we chose not to make our services

01:16:43,440 --> 01:16:46,480
very micro sized

01:16:45,040 --> 01:16:48,400
wherever there seemed to be a good

01:16:46,480 --> 01:16:51,120
conceptual or technical scene

01:16:48,400 --> 01:16:53,520
that's where we drew a line a few are

01:16:51,120 --> 01:16:56,640
not directly user-facing

01:16:53,520 --> 01:16:59,280
for instance we have an email service

01:16:56,640 --> 01:17:00,560
that's not pictured here but some like

01:16:59,280 --> 01:17:02,880
the static asset

01:17:00,560 --> 01:17:06,320
requests go through fastly and then

01:17:02,880 --> 01:17:07,280
straight to google cloud storage

01:17:06,320 --> 01:17:10,239
what have we learned when we

01:17:07,280 --> 01:17:13,760
transitioned to go

01:17:10,239 --> 01:17:13,760
and how did we learn those things

01:17:13,840 --> 01:17:18,080
so a lot of our developers most of our

01:17:16,159 --> 01:17:19,199
developers were not familiar with go in

01:17:18,080 --> 01:17:22,239
the beginning

01:17:19,199 --> 01:17:25,280
so we collaborated and created

01:17:22,239 --> 01:17:27,679
a tiny little command line app that was

01:17:25,280 --> 01:17:28,400
all test driven and then we deleted all

01:17:27,679 --> 01:17:31,360
the code

01:17:28,400 --> 01:17:33,360
leaving only the tests we had developers

01:17:31,360 --> 01:17:35,679
who had never seen go before

01:17:33,360 --> 01:17:36,400
be able to actually one by one enable

01:17:35,679 --> 01:17:38,960
the tests

01:17:36,400 --> 01:17:40,880
and make them pass and move on until

01:17:38,960 --> 01:17:42,800
they had a fully functional application

01:17:40,880 --> 01:17:45,199
that would forecast the weather

01:17:42,800 --> 01:17:46,400
not exactly trivial but not exactly

01:17:45,199 --> 01:17:47,840
complicated

01:17:46,400 --> 01:17:50,400
it was enough to give them a taste for

01:17:47,840 --> 01:17:52,480
the language and it was enough that they

01:17:50,400 --> 01:17:54,480
in true khan style were able to take

01:17:52,480 --> 01:17:57,360
those and try to get hints

01:17:54,480 --> 01:17:58,640
and get if they had any sort of issues

01:17:57,360 --> 01:18:00,239
and it would actually work out pretty

01:17:58,640 --> 01:18:02,320
well

01:18:00,239 --> 01:18:03,920
we also had encouraged our developers to

01:18:02,320 --> 01:18:05,440
read and to practice using

01:18:03,920 --> 01:18:07,440
learn go with tests which is an

01:18:05,440 --> 01:18:10,000
excellent resource

01:18:07,440 --> 01:18:11,280
after that we engaged with arden labs to

01:18:10,000 --> 01:18:13,520
have them provide training

01:18:11,280 --> 01:18:16,640
on-site to our engineers and remote for

01:18:13,520 --> 01:18:18,800
all those people who are remote

01:18:16,640 --> 01:18:20,560
one of the big lessons that we learned

01:18:18,800 --> 01:18:23,120
is to create a cookbook

01:18:20,560 --> 01:18:24,560
for everything that's confusing when

01:18:23,120 --> 01:18:25,360
somebody asks the same question more

01:18:24,560 --> 01:18:28,719
than once

01:18:25,360 --> 01:18:31,440
to listen to that as a signal and we've

01:18:28,719 --> 01:18:33,440
written how to do different things in go

01:18:31,440 --> 01:18:35,760
how to do different things in graphql

01:18:33,440 --> 01:18:37,199
how to translate certain paradigms from

01:18:35,760 --> 01:18:39,760
python into go

01:18:37,199 --> 01:18:40,560
and we maintain that over time whenever

01:18:39,760 --> 01:18:44,320
somebody

01:18:40,560 --> 01:18:45,679
is new they are the most valuable

01:18:44,320 --> 01:18:48,159
resource in looking at that

01:18:45,679 --> 01:18:49,679
because any confusion that they find

01:18:48,159 --> 01:18:51,199
that's a signal that we use

01:18:49,679 --> 01:18:52,960
to help to improve that resource and

01:18:51,199 --> 01:18:54,560
make that a living resource as we move

01:18:52,960 --> 01:18:56,560
on

01:18:54,560 --> 01:18:58,000
the other thing that we're doing is

01:18:56,560 --> 01:19:00,560
we're actually open sourcing

01:18:58,000 --> 01:19:02,320
some of our ongoing onboarding we have

01:19:00,560 --> 01:19:04,800
an open source repository

01:19:02,320 --> 01:19:05,520
the web workshop that we're trying to

01:19:04,800 --> 01:19:08,320
develop

01:19:05,520 --> 01:19:10,080
in order to allow ongoing education for

01:19:08,320 --> 01:19:11,360
any new developer that comes on to be

01:19:10,080 --> 01:19:14,239
able to come up to speed

01:19:11,360 --> 01:19:16,239
reasonably quickly when you're making a

01:19:14,239 --> 01:19:18,800
drastic shift

01:19:16,239 --> 01:19:19,440
such as from a python service to a go

01:19:18,800 --> 01:19:22,880
service

01:19:19,440 --> 01:19:24,000
or from a monolith to services

01:19:22,880 --> 01:19:26,080
you need to make sure that that

01:19:24,000 --> 01:19:28,480
transition can happen in a safe

01:19:26,080 --> 01:19:30,000
manner the way that that has

01:19:28,480 --> 01:19:32,400
traditionally been done

01:19:30,000 --> 01:19:33,440
is using a technique such as traffic

01:19:32,400 --> 01:19:36,480
shadowing

01:19:33,440 --> 01:19:37,679
where requests go to the new version and

01:19:36,480 --> 01:19:40,159
the old version

01:19:37,679 --> 01:19:40,960
but only the response from the old

01:19:40,159 --> 01:19:43,520
version

01:19:40,960 --> 01:19:44,880
is given to end users and you only

01:19:43,520 --> 01:19:47,440
compare those

01:19:44,880 --> 01:19:48,640
and once you feel confident then you can

01:19:47,440 --> 01:19:51,760
shift over

01:19:48,640 --> 01:19:55,920
to being able to provide the end user

01:19:51,760 --> 01:19:58,480
with the response from the new version

01:19:55,920 --> 01:20:00,400
github pioneered a similar technique

01:19:58,480 --> 01:20:02,159
using the library scientist

01:20:00,400 --> 01:20:05,840
to be able to make those sorts of

01:20:02,159 --> 01:20:07,360
transitions inside of a code base

01:20:05,840 --> 01:20:08,800
that same technique has been ported to

01:20:07,360 --> 01:20:10,320
many other languages and other

01:20:08,800 --> 01:20:13,440
frameworks

01:20:10,320 --> 01:20:14,080
we were inspired by that but we at khan

01:20:13,440 --> 01:20:16,800
academy

01:20:14,080 --> 01:20:18,719
chose to do side-by-side testing where

01:20:16,800 --> 01:20:21,199
we're using graphql federation

01:20:18,719 --> 01:20:22,400
to allow us to transition at the

01:20:21,199 --> 01:20:25,920
granularity of

01:20:22,400 --> 01:20:26,320
even a single field at a time within of

01:20:25,920 --> 01:20:29,199
our

01:20:26,320 --> 01:20:29,199
our graphql

01:20:29,600 --> 01:20:33,280
so this is what our side-by-side

01:20:31,120 --> 01:20:36,239
transition looks like at con

01:20:33,280 --> 01:20:37,520
we develop in the python monolith first

01:20:36,239 --> 01:20:38,880
we make sure that we're actually using

01:20:37,520 --> 01:20:40,400
the graphql endpoint

01:20:38,880 --> 01:20:42,080
and not taking advantage of the fact

01:20:40,400 --> 01:20:44,560
that we're in the python monolith to

01:20:42,080 --> 01:20:48,719
make a library call

01:20:44,560 --> 01:20:48,719
then we start to develop a go service

01:20:49,199 --> 01:20:53,920
after we deploy that go service we end

01:20:52,400 --> 01:20:57,360
up actually making a request

01:20:53,920 --> 01:20:59,920
that goes both to python and to go

01:20:57,360 --> 01:21:00,800
but the python response is the only one

01:20:59,920 --> 01:21:04,239
that goes

01:21:00,800 --> 01:21:04,960
back to the end user the go is secondary

01:21:04,239 --> 01:21:07,600
here

01:21:04,960 --> 01:21:08,960
and its response is only used to record

01:21:07,600 --> 01:21:12,400
discrepancies

01:21:08,960 --> 01:21:13,280
and then it's discarded after we're

01:21:12,400 --> 01:21:16,159
confident

01:21:13,280 --> 01:21:17,199
that that has no more discrepancies in

01:21:16,159 --> 01:21:20,560
it

01:21:17,199 --> 01:21:23,280
we then make go primary and its response

01:21:20,560 --> 01:21:26,719
is the one that the end user sees

01:21:23,280 --> 01:21:29,840
python's response is now discarded

01:21:26,719 --> 01:21:33,040
and then we transition to go only and

01:21:29,840 --> 01:21:33,040
delete the python code

01:21:33,440 --> 01:21:38,800
so in our side by side we start out with

01:21:36,960 --> 01:21:42,080
the python monolith

01:21:38,800 --> 01:21:44,320
then we develop in a go service

01:21:42,080 --> 01:21:46,320
then we have python as primary where

01:21:44,320 --> 01:21:48,560
goes responses are secondary

01:21:46,320 --> 01:21:50,400
and discarded only used for comparison's

01:21:48,560 --> 01:21:53,600
sake to warn us if there's a

01:21:50,400 --> 01:21:54,880
discrepancy then we switch to having go

01:21:53,600 --> 01:21:57,120
be primary

01:21:54,880 --> 01:21:59,040
and python as secondary where the

01:21:57,120 --> 01:22:00,480
python's responses are now the ones that

01:21:59,040 --> 01:22:02,560
are discarded

01:22:00,480 --> 01:22:03,679
then we can delete the python code and

01:22:02,560 --> 01:22:08,840
have go only

01:22:03,679 --> 01:22:11,440
serving this it's code time

01:22:08,840 --> 01:22:14,880
so the graphql schema

01:22:11,440 --> 01:22:17,199
that we end up changing here

01:22:14,880 --> 01:22:18,960
we have this created date field that's

01:22:17,199 --> 01:22:20,639
already defined in python

01:22:18,960 --> 01:22:22,159
and we'll hit an error if we try to also

01:22:20,639 --> 01:22:24,639
define it in the assignments

01:22:22,159 --> 01:22:25,199
go service but until we define this

01:22:24,639 --> 01:22:28,320
field

01:22:25,199 --> 01:22:29,679
we can't generate a gql gen model or

01:22:28,320 --> 01:22:31,840
write any tests

01:22:29,679 --> 01:22:33,600
to get around this issue we add the

01:22:31,840 --> 01:22:36,320
migrate directive to our field

01:22:33,600 --> 01:22:38,000
with the state set to manual this will

01:22:36,320 --> 01:22:40,560
allow assignment service to define

01:22:38,000 --> 01:22:42,159
the created date but will hide the field

01:22:40,560 --> 01:22:44,320
from the normal schema

01:22:42,159 --> 01:22:46,000
if an end user requests this field the

01:22:44,320 --> 01:22:46,719
gateway will continue to fetch it from

01:22:46,000 --> 01:22:48,560
python

01:22:46,719 --> 01:22:51,040
but will not make any requests for it

01:22:48,560 --> 01:22:51,040
from go

01:22:51,199 --> 01:22:55,120
once the implementation of this field is

01:22:52,880 --> 01:22:57,199
done we can

01:22:55,120 --> 01:22:59,199
enable side-by-side testing by setting

01:22:57,199 --> 01:23:00,800
the migrate directive state to side by

01:22:59,199 --> 01:23:03,920
side

01:23:00,800 --> 01:23:07,840
here now both python and go

01:23:03,920 --> 01:23:07,840
are getting the request for that field

01:23:09,120 --> 01:23:13,760
when they are both providing it every

01:23:11,520 --> 01:23:16,320
request will be examined for differences

01:23:13,760 --> 01:23:17,520
both locally and in production a

01:23:16,320 --> 01:23:19,920
developer locally will

01:23:17,520 --> 01:23:21,040
receive instant feedback that there's a

01:23:19,920 --> 01:23:22,639
discrepancy

01:23:21,040 --> 01:23:24,800
as they go through either unit tests

01:23:22,639 --> 01:23:27,600
integration tests or just click around

01:23:24,800 --> 01:23:29,840
on the site locally

01:23:27,600 --> 01:23:31,520
in production we can see over millions

01:23:29,840 --> 01:23:33,360
of requests if there are corner cases

01:23:31,520 --> 01:23:35,679
where the fields might differ

01:23:33,360 --> 01:23:37,199
remembering to first make a python set

01:23:35,679 --> 01:23:39,440
deterministically ordered

01:23:37,199 --> 01:23:43,199
is probably our most common mistake even

01:23:39,440 --> 01:23:43,199
if it's not really apparent to a user

01:23:43,360 --> 01:23:46,560
in production we can also look for

01:23:44,880 --> 01:23:47,600
patterns in the discrepancies in many

01:23:46,560 --> 01:23:49,040
ways

01:23:47,600 --> 01:23:50,800
in case there's an edge case that for

01:23:49,040 --> 01:23:51,920
instance only occurs at a particular

01:23:50,800 --> 01:23:52,960
time of day

01:23:51,920 --> 01:23:54,719
i'm not going to go through all the

01:23:52,960 --> 01:23:56,159
different ways that our sres are able to

01:23:54,719 --> 01:23:59,360
slice and dice this to

01:23:56,159 --> 01:24:01,600
identify unusual patterns but

01:23:59,360 --> 01:24:02,719
just suffice it to say that we have a

01:24:01,600 --> 01:24:04,400
lot of great metrics

01:24:02,719 --> 01:24:06,880
and they bring that to the developers

01:24:04,400 --> 01:24:06,880
attention

01:24:07,920 --> 01:24:12,719
so now our schema changes and we can now

01:24:10,719 --> 01:24:15,280
ignore the python value of the field

01:24:12,719 --> 01:24:16,000
and pass the one from go we support the

01:24:15,280 --> 01:24:18,080
state to make it

01:24:16,000 --> 01:24:19,679
easier to stage deploys and reduce the

01:24:18,080 --> 01:24:21,840
risk of rollbacks

01:24:19,679 --> 01:24:23,199
we also use this state as we are

01:24:21,840 --> 01:24:24,960
transitioning to having

01:24:23,199 --> 01:24:27,280
all the graphql traffic move through the

01:24:24,960 --> 01:24:29,760
gateway it may be that some clients

01:24:27,280 --> 01:24:31,440
mobile native for example may not yet be

01:24:29,760 --> 01:24:33,040
able to query through the gateway

01:24:31,440 --> 01:24:34,800
and so we may need to keep a field

01:24:33,040 --> 01:24:37,199
defined in python to satisfy those

01:24:34,800 --> 01:24:37,199
requests

01:24:37,600 --> 01:24:40,719
once we're happy with the go service

01:24:39,199 --> 01:24:41,520
serving traffic for this field in

01:24:40,719 --> 01:24:43,679
production

01:24:41,520 --> 01:24:44,560
we can remove the definition and the

01:24:43,679 --> 01:24:47,520
related code

01:24:44,560 --> 01:24:49,840
from python once we do that step we can

01:24:47,520 --> 01:24:52,159
remove the migrate directive entirely

01:24:49,840 --> 01:24:54,800
this field is now just a normal graphql

01:24:52,159 --> 01:24:57,760
field like any other

01:24:54,800 --> 01:24:59,040
so now engineers are happy and

01:24:57,760 --> 01:25:01,520
productive and go

01:24:59,040 --> 01:25:04,320
our efficiency went up our costs are

01:25:01,520 --> 01:25:04,320
bending down

01:25:05,440 --> 01:25:12,480
what's next right now we have 34.5

01:25:09,280 --> 01:25:15,440
of production traffic served by go and

01:25:12,480 --> 01:25:16,800
as we kind of expected it's been sort of

01:25:15,440 --> 01:25:17,840
following a normal curve

01:25:16,800 --> 01:25:20,239
and right now we're seeing an

01:25:17,840 --> 01:25:21,040
acceleration in the code that's being

01:25:20,239 --> 01:25:25,360
transitioned

01:25:21,040 --> 01:25:25,360
to be solely served by go

01:25:25,679 --> 01:25:28,719
we've also adopted a new policy where

01:25:28,239 --> 01:25:30,639
we're

01:25:28,719 --> 01:25:32,320
trying to share as much as we can open

01:25:30,639 --> 01:25:35,040
source by default

01:25:32,320 --> 01:25:36,159
before we were much more concerned with

01:25:35,040 --> 01:25:37,920
only putting out

01:25:36,159 --> 01:25:39,520
open source code that we were committed

01:25:37,920 --> 01:25:40,719
to maintaining but

01:25:39,520 --> 01:25:42,560
we realize that there's a missed

01:25:40,719 --> 01:25:44,159
opportunity sometimes the community

01:25:42,560 --> 01:25:45,199
could benefit from some of the choices

01:25:44,159 --> 01:25:49,520
that we've made

01:25:45,199 --> 01:25:51,040
without necessarily having us to

01:25:49,520 --> 01:25:53,280
devote a large percentage of our

01:25:51,040 --> 01:25:55,600
engineering staff to be able to maintain

01:25:53,280 --> 01:25:56,960
that to meet all the possible end user

01:25:55,600 --> 01:25:59,360
use cases

01:25:56,960 --> 01:26:00,719
we're still open to collaborating but we

01:25:59,360 --> 01:26:04,239
might not

01:26:00,719 --> 01:26:05,840
on in all cases pursue all the different

01:26:04,239 --> 01:26:07,520
use cases that the community is

01:26:05,840 --> 01:26:09,199
interested in

01:26:07,520 --> 01:26:10,639
we're also going to try to share our

01:26:09,199 --> 01:26:12,880
onboarding process

01:26:10,639 --> 01:26:14,800
we're developing some of our individual

01:26:12,880 --> 01:26:15,760
tools like the web workshop and the

01:26:14,800 --> 01:26:18,000
forecast app

01:26:15,760 --> 01:26:19,360
as open source and we hope that as we

01:26:18,000 --> 01:26:20,480
onboard new developers who are

01:26:19,360 --> 01:26:22,239
unfamiliar with go

01:26:20,480 --> 01:26:24,080
or our environment that that will be

01:26:22,239 --> 01:26:27,040
beneficial to them as well as other

01:26:24,080 --> 01:26:27,040
members of the community

01:26:28,560 --> 01:26:31,679
so i hope that this was useful to you

01:26:31,199 --> 01:26:33,199
and

01:26:31,679 --> 01:26:34,719
i hope that you found this story to be

01:26:33,199 --> 01:26:37,600
compelling i

01:26:34,719 --> 01:26:38,400
certainly can highly recommend khan

01:26:37,600 --> 01:26:40,159
academy as an

01:26:38,400 --> 01:26:43,760
excellent place to work and if you're in

01:26:40,159 --> 01:26:51,840
the market feel free to drop us a line

01:26:43,760 --> 01:26:51,840
thanks any questions

01:27:03,120 --> 01:27:06,639
what a terrific use case it's easy to

01:27:05,360 --> 01:27:09,199
see why steve

01:27:06,639 --> 01:27:11,280
was so excited to share how go has

01:27:09,199 --> 01:27:13,040
changed how he and his team work

01:27:11,280 --> 01:27:15,120
and how they could serve as many

01:27:13,040 --> 01:27:16,719
students as possible

01:27:15,120 --> 01:27:18,320
in the chat we saw a lot of people

01:27:16,719 --> 01:27:20,159
asking how they could get more involved

01:27:18,320 --> 01:27:22,560
or find out more about go

01:27:20,159 --> 01:27:23,679
the best place for information is is the

01:27:22,560 --> 01:27:26,880
go twitter

01:27:23,679 --> 01:27:28,080
account which is uh at golang there you

01:27:26,880 --> 01:27:30,880
can find out

01:27:28,080 --> 01:27:31,600
out about things like our currently

01:27:30,880 --> 01:27:35,120
running go

01:27:31,600 --> 01:27:36,960
survey the go user survey helps shape

01:27:35,120 --> 01:27:38,159
the future of go and we invite everyone

01:27:36,960 --> 01:27:39,679
to participate in it

01:27:38,159 --> 01:27:41,360
you can also find out how to get more

01:27:39,679 --> 01:27:42,719
involved with conferences and other

01:27:41,360 --> 01:27:44,840
community events

01:27:42,719 --> 01:27:46,320
and you can find out about our upcoming

01:27:44,840 --> 01:27:48,480
birthday

01:27:46,320 --> 01:27:50,480
and with that it's a wrap now it's time

01:27:48,480 --> 01:27:50,960
for the after party hosted by our own

01:27:50,480 --> 01:27:53,760
ver

01:27:50,960 --> 01:27:54,080
van riper uh someone who many of you may

01:27:53,760 --> 01:27:57,360
know

01:27:54,080 --> 01:27:59,520
through his community efforts we have an

01:27:57,360 --> 01:28:00,719
updated google meet link to join the

01:27:59,520 --> 01:28:02,880
after party

01:28:00,719 --> 01:28:04,000
please look for a button in the agenda

01:28:02,880 --> 01:28:06,239
page

01:28:04,000 --> 01:28:07,520
today's speakers will also be joining

01:28:06,239 --> 01:28:09,760
and we'll have some quizzes

01:28:07,520 --> 01:28:10,639
interactive activities and surprise

01:28:09,760 --> 01:28:13,040
guests

01:28:10,639 --> 01:28:14,480
we hope to see you all there and with

01:28:13,040 --> 01:28:16,639
that we leave you with go's

01:28:14,480 --> 01:28:17,920
10th birthday celebration video from

01:28:16,639 --> 01:28:19,760
last year

01:28:17,920 --> 01:28:21,120
thank you and wherever in the world you

01:28:19,760 --> 01:28:28,639
are we hope you write

01:28:21,120 --> 01:28:32,080
and go

01:28:28,639 --> 01:28:37,120
happy birthday happy

01:28:32,080 --> 01:28:37,120
birthday a very happy birthday to you

01:28:39,520 --> 01:28:43,840
happy birthday girl

01:28:44,800 --> 01:28:57,840
happy birthday girl

01:28:57,990 --> 01:29:06,039
[Music]

01:29:07,440 --> 01:29:12,930
happy birthday girl

01:29:10,480 --> 01:29:16,079
happy birthday go

01:29:12,930 --> 01:29:16,079
[Music]

01:29:16,850 --> 01:29:21,360
[Applause]

01:29:18,960 --> 01:29:24,400
[Music]

01:29:21,360 --> 01:29:26,370
happy birthday girls

01:29:24,400 --> 01:29:28,320
happy birthday girl

01:29:26,370 --> 01:29:39,680
[Music]

01:29:28,320 --> 01:29:47,840
happy birthday girl

01:29:39,680 --> 01:29:53,620
[Music]

01:29:47,840 --> 01:30:02,870
birthday girl

01:29:53,620 --> 01:30:02,870
[Music]

01:30:04,000 --> 01:30:21,840
happy birthday to you

01:30:22,750 --> 01:30:35,840
[Music]

01:30:32,840 --> 01:30:35,840
oh

01:30:39,510 --> 01:30:48,400
[Music]

01:30:46,840 --> 01:30:50,480
fun

01:30:48,400 --> 01:30:50,480

YouTube URL: https://www.youtube.com/watch?v=w6I1X8vpA28


