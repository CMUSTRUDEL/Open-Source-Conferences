Title: BazelCon 2019 Day 1: Project Updates + Q&A
Publication date: 2020-01-09
Playlist: BazelCon 2019
Description: 
	John Field and Dmitry Lomov, Google event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: John Field, Dmitry Lomov;
Captions: 
	00:00:00,060 --> 00:00:06,029
next up we've got John and Dmitry from

00:00:03,510 --> 00:00:16,980
the basel team to give a project update

00:00:06,029 --> 00:00:18,600
let's welcome John and Dmitry guys hi

00:00:16,980 --> 00:00:22,220
everyone it's great to be here it's

00:00:18,600 --> 00:00:25,640
great to see a bunch of friendly faces

00:00:22,220 --> 00:00:27,689
Chernobyl is a hard act to follow and

00:00:25,640 --> 00:00:29,310
for better for worse we're not going to

00:00:27,689 --> 00:00:31,170
talk a lot about our most spectacular

00:00:29,310 --> 00:00:35,430
failures maybe in the break you can ask

00:00:31,170 --> 00:00:36,420
us about those but I do want to talk

00:00:35,430 --> 00:00:37,680
about a bunch of things that are

00:00:36,420 --> 00:00:40,399
relevant just by quick way of

00:00:37,680 --> 00:00:42,840
introduction I manage the basel team

00:00:40,399 --> 00:00:45,059
which is largely split between New York

00:00:42,840 --> 00:00:49,350
and Munich we now have some folks in the

00:00:45,059 --> 00:00:51,090
Bay Area as well so I'm Dimitri I manage

00:00:49,350 --> 00:00:53,070
the Munich part of the Basel team I

00:00:51,090 --> 00:00:54,180
spend a lot of time because beta 1.0 and

00:00:53,070 --> 00:00:57,449
just mentioned the basel president

00:00:54,180 --> 00:01:00,149
general thanks Dimitri all right so

00:00:57,449 --> 00:01:02,550
let's get going I want to talk a little

00:01:00,149 --> 00:01:06,479
bit about the path to Basel 1.0 and

00:01:02,550 --> 00:01:08,640
after Jeff's characterization of 1.0 I

00:01:06,479 --> 00:01:10,080
will say that our 1.0 is a little

00:01:08,640 --> 00:01:14,420
different I think from other 1.0 is

00:01:10,080 --> 00:01:16,619
because it was our as many of you know

00:01:14,420 --> 00:01:17,939
Basel is known internally at Google as

00:01:16,619 --> 00:01:20,790
Blaise we've been working with bathe

00:01:17,939 --> 00:01:24,470
blaze for a number of years Basel 1.0

00:01:20,790 --> 00:01:28,530
was our manifestation of her open source

00:01:24,470 --> 00:01:30,240
Basel and it it was a set of

00:01:28,530 --> 00:01:31,650
requirements we need we felt the

00:01:30,240 --> 00:01:33,299
community needed in order for us to

00:01:31,650 --> 00:01:36,150
announce 1.0 so I think it's maybe

00:01:33,299 --> 00:01:38,939
closer to a 2.0 probably not the 3.0

00:01:36,150 --> 00:01:40,409
level of polish that Jeff was alluding

00:01:38,939 --> 00:01:43,409
to but maybe a little more than the kind

00:01:40,409 --> 00:01:45,149
of 1.0 everybody is sort of wants to

00:01:43,409 --> 00:01:48,750
move on so I wanted to review a little

00:01:45,149 --> 00:01:51,930
bit the path to 1.0 which mostly is

00:01:48,750 --> 00:01:54,119
covering some changes the basel team has

00:01:51,930 --> 00:01:55,979
been working on since the last basel con

00:01:54,119 --> 00:01:57,810
a few things started before that and

00:01:55,979 --> 00:02:01,170
just go over those and then we'll talk

00:01:57,810 --> 00:02:02,909
about the future a little bit so let's

00:02:01,170 --> 00:02:04,350
start with processes and practices one

00:02:02,909 --> 00:02:06,210
of the bits of feedback we heard from a

00:02:04,350 --> 00:02:07,799
lot of users was hey you're making a lot

00:02:06,210 --> 00:02:09,149
of changes at head that's great we can't

00:02:07,799 --> 00:02:10,800
keep up you're making a lot of releases

00:02:09,149 --> 00:02:12,330
we can't keep up there are a lot of

00:02:10,800 --> 00:02:13,740
changes you're breaking us a lot

00:02:12,330 --> 00:02:16,350
we heard that feed

00:02:13,740 --> 00:02:18,270
and we've gone to a semantic versioning

00:02:16,350 --> 00:02:21,330
styles or the conventional semantic

00:02:18,270 --> 00:02:23,070
versioning style 1.0 establishes the

00:02:21,330 --> 00:02:25,670
first semantically version release each

00:02:23,070 --> 00:02:27,810
major release is then going to be an

00:02:25,670 --> 00:02:29,490
potentially incompatible changes from

00:02:27,810 --> 00:02:32,100
the previous releases so we're now going

00:02:29,490 --> 00:02:33,690
to a more conventional process for

00:02:32,100 --> 00:02:35,220
managing changes in that respect and

00:02:33,690 --> 00:02:37,380
we've introduced what we call the

00:02:35,220 --> 00:02:39,390
incompatible change policy we want to

00:02:37,380 --> 00:02:43,170
give folks advance notice of breaking

00:02:39,390 --> 00:02:43,740
changes under flagged special stylized

00:02:43,170 --> 00:02:45,480
Flags

00:02:43,740 --> 00:02:47,040
you have the opportunity to test these

00:02:45,480 --> 00:02:48,900
changes in advance if you wish and

00:02:47,040 --> 00:02:51,600
they're nice mechanisms to do that and

00:02:48,900 --> 00:02:54,030
then at the next release after a three

00:02:51,600 --> 00:02:55,830
month or so period we will flip those

00:02:54,030 --> 00:02:57,450
flags but you've had some fair warning

00:02:55,830 --> 00:02:59,880
to get on board with that so I think

00:02:57,450 --> 00:03:01,350
that's a that's a structured change to

00:02:59,880 --> 00:03:03,090
enable us to work quickly it had to

00:03:01,350 --> 00:03:05,790
build it to make changes fast but

00:03:03,090 --> 00:03:07,650
hopefully not to break you we've

00:03:05,790 --> 00:03:10,650
improved our bug triage and response

00:03:07,650 --> 00:03:12,330
internally we still miss a few things

00:03:10,650 --> 00:03:14,160
but we've were trying to be more

00:03:12,330 --> 00:03:15,600
responsive more systematic and response

00:03:14,160 --> 00:03:18,360
policy and hopefully you've seen this

00:03:15,600 --> 00:03:20,450
we've greatly improved our CI process

00:03:18,360 --> 00:03:23,670
it's an open process you can see our CI

00:03:20,450 --> 00:03:26,550
online we've invited folks who want

00:03:23,670 --> 00:03:29,310
their projects to track against head to

00:03:26,550 --> 00:03:31,080
unboard their projects into our CI so we

00:03:29,310 --> 00:03:33,030
can we can use that to help gauge how

00:03:31,080 --> 00:03:34,590
we're how well we're doing we've

00:03:33,030 --> 00:03:37,200
introduced what we call an incompatible

00:03:34,590 --> 00:03:39,240
change pipeline which enables us to see

00:03:37,200 --> 00:03:42,270
how potential future changes that will

00:03:39,240 --> 00:03:44,490
be in the next major release are affect

00:03:42,270 --> 00:03:46,440
you so our CI pipeline has improved and

00:03:44,490 --> 00:03:48,630
we're on boarding a bunch of other

00:03:46,440 --> 00:03:50,520
projects that are in our own to test how

00:03:48,630 --> 00:03:52,470
well our changes are working we have a

00:03:50,520 --> 00:03:54,300
new installer for basil called basalis

00:03:52,470 --> 00:03:55,680
that allows you to control when changes

00:03:54,300 --> 00:03:58,140
show up whether you want to get basil

00:03:55,680 --> 00:04:00,330
from head or get a certain version we've

00:03:58,140 --> 00:04:02,100
reduced the binary size that has

00:04:00,330 --> 00:04:03,240
advantages for a lot of purposes so this

00:04:02,100 --> 00:04:04,680
is all sort of you know kind of

00:04:03,240 --> 00:04:06,900
processed stuff but we think it's in

00:04:04,680 --> 00:04:09,060
fourth important to make basil a more

00:04:06,900 --> 00:04:12,900
reliable and more usable product less of

00:04:09,060 --> 00:04:14,459
a beta ok configurability not everyone

00:04:12,900 --> 00:04:15,780
touches this if you're just a user you

00:04:14,459 --> 00:04:17,790
may not know about this but if you're

00:04:15,780 --> 00:04:20,489
writing rules and extending the system

00:04:17,790 --> 00:04:23,820
we provide a mechanism to enable you to

00:04:20,489 --> 00:04:25,650
to support multiple platforms so for

00:04:23,820 --> 00:04:27,030
example we've introduced these concepts

00:04:25,650 --> 00:04:27,660
called platforms and tool chains

00:04:27,030 --> 00:04:29,490
internal

00:04:27,660 --> 00:04:31,260
so when you're writing new rules you can

00:04:29,490 --> 00:04:33,030
make the multi-platform in a nice way

00:04:31,260 --> 00:04:35,490
and this is all available from star lark

00:04:33,030 --> 00:04:36,990
also the so called build configuration

00:04:35,490 --> 00:04:39,150
which allows you to do different things

00:04:36,990 --> 00:04:41,190
depending on whether you're building it

00:04:39,150 --> 00:04:42,690
something for a tool or building

00:04:41,190 --> 00:04:44,460
something that you're targeting isn't as

00:04:42,690 --> 00:04:46,380
an output these kind of this kind of

00:04:44,460 --> 00:04:47,910
flexibility is now enabled in star lark

00:04:46,380 --> 00:04:50,550
it used to be previously only native

00:04:47,910 --> 00:04:52,620
rules had this config function allottee

00:04:50,550 --> 00:04:55,680
so now you can write multi-platform

00:04:52,620 --> 00:04:57,840
rules much more easily in star lark and

00:04:55,680 --> 00:05:01,040
evolve them quickly we've made a bunch

00:04:57,840 --> 00:05:03,210
of upgrades to our C++ and Java support

00:05:01,040 --> 00:05:04,800
C++ tool chains are incredibly

00:05:03,210 --> 00:05:07,230
complicated for those who deal with C++

00:05:04,800 --> 00:05:10,170
hopefully you're aware of this there's a

00:05:07,230 --> 00:05:12,780
concept in Basel called cross tool which

00:05:10,170 --> 00:05:15,060
is our configuration mechanism for for

00:05:12,780 --> 00:05:17,340
C++ previously there was a bit of an

00:05:15,060 --> 00:05:19,740
arcane internal way to configure cross

00:05:17,340 --> 00:05:21,300
tools now this is all part of Starlog so

00:05:19,740 --> 00:05:22,950
there's nothing special you need to know

00:05:21,300 --> 00:05:25,260
I mean configuration is still a hard

00:05:22,950 --> 00:05:27,990
problem but at least the barriers to

00:05:25,260 --> 00:05:30,120
entry for configuring the C++ tool chain

00:05:27,990 --> 00:05:33,390
have have diminished we now support

00:05:30,120 --> 00:05:35,580
multiple JDK s for Java that's obviously

00:05:33,390 --> 00:05:37,950
useful for folks who have to worry about

00:05:35,580 --> 00:05:40,230
the differences between JDK s we've done

00:05:37,950 --> 00:05:44,550
a lot of work a ton of work to refactor

00:05:40,230 --> 00:05:46,530
our code excuse me to what we call

00:05:44,550 --> 00:05:48,510
internally the sandwich api's and that

00:05:46,530 --> 00:05:51,690
means well we still have some rural code

00:05:48,510 --> 00:05:53,430
in native code in Java we make we expose

00:05:51,690 --> 00:05:55,620
that Java functionality that native

00:05:53,430 --> 00:05:57,450
functionality in a controlled way to

00:05:55,620 --> 00:05:59,190
enable other rules say Scala rules that

00:05:57,450 --> 00:06:01,140
need to access Java or other JVM

00:05:59,190 --> 00:06:03,120
compliant languages can do that in a

00:06:01,140 --> 00:06:05,070
controlled way so a lot of our internal

00:06:03,120 --> 00:06:07,110
API isn't cleaned up and we hope make

00:06:05,070 --> 00:06:10,800
more made more developer-friendly to

00:06:07,110 --> 00:06:12,210
make the system easier to extend we've

00:06:10,800 --> 00:06:14,520
done a lot of work over the past year or

00:06:12,210 --> 00:06:17,160
so an abling gradual adoption of basil

00:06:14,520 --> 00:06:18,900
so you don't necessarily have to move

00:06:17,160 --> 00:06:20,970
every part of your build or at least a

00:06:18,900 --> 00:06:22,770
particular system to basil all at once

00:06:20,970 --> 00:06:25,590
we recognize that people often want to

00:06:22,770 --> 00:06:27,420
say build their dependencies using the

00:06:25,590 --> 00:06:29,030
native system whatever ever built system

00:06:27,420 --> 00:06:31,680
that use be it make or something else

00:06:29,030 --> 00:06:33,150
and then reference those dependencies in

00:06:31,680 --> 00:06:36,840
a basil build perhaps for their own

00:06:33,150 --> 00:06:38,430
project so this is still ongoing work to

00:06:36,840 --> 00:06:39,960
do this in a really nice clean general

00:06:38,430 --> 00:06:41,150
way but we've had some proof points here

00:06:39,960 --> 00:06:44,330
that show that you can do this

00:06:41,150 --> 00:06:46,790
for from havean integration we have a

00:06:44,330 --> 00:06:49,639
way to do that to access maven builds

00:06:46,790 --> 00:06:52,940
for NPN for node you can do that you can

00:06:49,639 --> 00:06:54,740
run see make as a as a sub process for

00:06:52,940 --> 00:06:56,240
basil in a controlled way so we

00:06:54,740 --> 00:06:57,919
recognize that people want to move to

00:06:56,240 --> 00:06:59,270
basil don't want to just jump in and do

00:06:57,919 --> 00:07:03,500
everything all at once and if you don't

00:06:59,270 --> 00:07:05,630
we provided support for that remote

00:07:03,500 --> 00:07:08,199
execution is a key bit of functionality

00:07:05,630 --> 00:07:11,150
for basil we've done a lot of work to

00:07:08,199 --> 00:07:13,100
make remote execution even I think more

00:07:11,150 --> 00:07:15,470
attractive the build without the bytes

00:07:13,100 --> 00:07:17,389
work is work that minimizes the amount

00:07:15,470 --> 00:07:19,430
of data transfer needed to do a remote

00:07:17,389 --> 00:07:21,710
execution and it makes things like

00:07:19,430 --> 00:07:23,780
interactive development I think in

00:07:21,710 --> 00:07:26,000
particular more feasible than it would

00:07:23,780 --> 00:07:27,530
be otherwise because it minimizes the

00:07:26,000 --> 00:07:29,919
amount of data transfer minimizes the

00:07:27,530 --> 00:07:32,810
network load we've also simplified

00:07:29,919 --> 00:07:35,210
configuration of remote builds fewer

00:07:32,810 --> 00:07:37,940
flags needed fewer less croft less

00:07:35,210 --> 00:07:41,440
complexity so the barrier to entry for

00:07:37,940 --> 00:07:41,440
remote execution is hopefully lower

00:07:41,500 --> 00:07:46,639
windows support we've made some big

00:07:43,669 --> 00:07:48,590
changes there previously it used M sis

00:07:46,639 --> 00:07:51,620
there are vestiges of Linux floating

00:07:48,590 --> 00:07:53,539
around those are gone Bash is gone so

00:07:51,620 --> 00:07:56,419
Windows is now more of a native platform

00:07:53,539 --> 00:08:00,530
for for basil and we've added remote

00:07:56,419 --> 00:08:02,660
execution support as well on the

00:08:00,530 --> 00:08:04,280
performance side we've done a lot of

00:08:02,660 --> 00:08:06,919
work to make it easier for people to

00:08:04,280 --> 00:08:08,450
understand their build performance we

00:08:06,919 --> 00:08:10,789
have a new benchmarking tool called

00:08:08,450 --> 00:08:12,620
basil bench which is available for

00:08:10,789 --> 00:08:14,660
anyone a great tool to to try to

00:08:12,620 --> 00:08:16,970
understand how particular classes and

00:08:14,660 --> 00:08:18,710
builds are performing we have a nice

00:08:16,970 --> 00:08:20,330
profiler that's compatible with the

00:08:18,710 --> 00:08:22,370
chrome development tools you'll get nice

00:08:20,330 --> 00:08:25,130
very colorful profiles to understand

00:08:22,370 --> 00:08:26,539
what's going on in your build for those

00:08:25,130 --> 00:08:29,419
who know that this sort of the the

00:08:26,539 --> 00:08:31,099
assembly language the output of basil is

00:08:29,419 --> 00:08:33,080
basically what we call an action graph

00:08:31,099 --> 00:08:35,510
we provide a way to query that it's a

00:08:33,080 --> 00:08:37,219
lot of tools to enable you to better

00:08:35,510 --> 00:08:39,349
understand performance and and to

00:08:37,219 --> 00:08:40,700
optimize your performance there's still

00:08:39,349 --> 00:08:42,950
work to be done there but we think

00:08:40,700 --> 00:08:45,200
that's now less of a black box and

00:08:42,950 --> 00:08:46,520
performance is obviously important so

00:08:45,200 --> 00:08:47,900
I'm going to turn it over to Dimitri to

00:08:46,520 --> 00:08:50,390
talk a little bit about who is using

00:08:47,900 --> 00:08:53,209
basil in our next steps so yeah thanks

00:08:50,390 --> 00:08:54,310
John thank you yeah so there's been a

00:08:53,209 --> 00:08:57,040
journey as

00:08:54,310 --> 00:08:58,450
John John outlined about the basically

00:08:57,040 --> 00:08:59,950
uncle zero just this was just some

00:08:58,450 --> 00:09:02,620
highlights we did a lot of other things

00:08:59,950 --> 00:09:05,550
to to get to you know better base of one

00:09:02,620 --> 00:09:07,990
to zero and definitely we see a lot of

00:09:05,550 --> 00:09:11,770
adoption externally right so this is

00:09:07,990 --> 00:09:14,200
just a sample of of companies using

00:09:11,770 --> 00:09:16,860
basil and of course the attendance on

00:09:14,200 --> 00:09:19,840
basil corn is now twice as much as it is

00:09:16,860 --> 00:09:21,660
over the last year so there is there is

00:09:19,840 --> 00:09:25,480
definite momentum around basil

00:09:21,660 --> 00:09:27,130
externally and at the same time we see a

00:09:25,480 --> 00:09:29,110
lot of momentum at Google as well right

00:09:27,130 --> 00:09:30,670
way so basil blaze has always been a

00:09:29,110 --> 00:09:33,070
critical part of the infrastructure and

00:09:30,670 --> 00:09:34,570
place continues to be this and blaze and

00:09:33,070 --> 00:09:37,630
basil place if you don't know if the

00:09:34,570 --> 00:09:39,490
original tool that's still used as you

00:09:37,630 --> 00:09:42,220
know as a built the thing that builds

00:09:39,490 --> 00:09:44,440
the whole of Google and the blatant

00:09:42,220 --> 00:09:46,450
basil as you probably know already share

00:09:44,440 --> 00:09:48,310
a lot of code base all of the code base

00:09:46,450 --> 00:09:50,350
almost right there's some parts that are

00:09:48,310 --> 00:09:52,270
specific to place basil but it's still

00:09:50,350 --> 00:09:53,980
it's the same team same code base that's

00:09:52,270 --> 00:09:56,320
extremely poor part of the Google's

00:09:53,980 --> 00:09:59,080
infrastructure and we also see an uptick

00:09:56,320 --> 00:10:01,540
a strong uptick on usage of basil open

00:09:59,080 --> 00:10:03,339
source not just blaze the tool there's a

00:10:01,540 --> 00:10:05,890
tool used by everybody at Google but

00:10:03,339 --> 00:10:08,050
there's also a lot of a lot of adoption

00:10:05,890 --> 00:10:09,820
of basil itself obviously the open

00:10:08,050 --> 00:10:11,410
source projects that you see here abseil

00:10:09,820 --> 00:10:13,000
angular and woke up in a sense of low

00:10:11,410 --> 00:10:16,089
continues in beta we continue supporting

00:10:13,000 --> 00:10:18,550
them and we have a lot of other projects

00:10:16,089 --> 00:10:21,339
that are looking at basil maybe adoption

00:10:18,550 --> 00:10:23,350
base and so so this is this has been a

00:10:21,339 --> 00:10:25,140
pretty strong year for us in terms of

00:10:23,350 --> 00:10:28,030
both the external adoption and the

00:10:25,140 --> 00:10:31,360
internal part of that the interest at

00:10:28,030 --> 00:10:35,170
Google for for for the project right so

00:10:31,360 --> 00:10:38,050
I think the and now we are we're done

00:10:35,170 --> 00:10:40,120
right we are done with 1.0 we have this

00:10:38,050 --> 00:10:42,010
sort of I don't know if you've seen the

00:10:40,120 --> 00:10:44,200
level of commits the number of changes

00:10:42,010 --> 00:10:46,900
we've been doing we have maybe several

00:10:44,200 --> 00:10:48,850
debatable changes every single month we

00:10:46,900 --> 00:10:51,730
had a lot of a lot of features we did

00:10:48,850 --> 00:10:54,550
middle of work to get basil to the point

00:10:51,730 --> 00:10:57,130
where it's it's a good system it's a

00:10:54,550 --> 00:10:58,390
system that works for a lot of customers

00:10:57,130 --> 00:11:00,160
then we see this adoption saying and now

00:10:58,390 --> 00:11:03,190
when we think about what if what the

00:11:00,160 --> 00:11:05,709
future is right the key point here is

00:11:03,190 --> 00:11:07,400
this we have put a lot of work and

00:11:05,709 --> 00:11:11,060
thought into basil it

00:11:07,400 --> 00:11:13,520
it's the usage continuous continuous but

00:11:11,060 --> 00:11:16,820
we see this as we cannot do everything

00:11:13,520 --> 00:11:20,120
there is a if you look at just a number

00:11:16,820 --> 00:11:21,500
of bzl files on github over over just

00:11:20,120 --> 00:11:24,620
this last year it's threefold increase

00:11:21,500 --> 00:11:27,880
right from 10,000 to almost a hundred

00:11:24,620 --> 00:11:31,760
thousand so the community really

00:11:27,880 --> 00:11:36,500
embraces the embraces basil and matzo

00:11:31,760 --> 00:11:38,390
ball here is the yeah it's it's bzl

00:11:36,500 --> 00:11:41,030
files is your you know just rebuilt him

00:11:38,390 --> 00:11:43,220
you are contributing to the to the

00:11:41,030 --> 00:11:44,750
ecosystem you're creating subset at

00:11:43,220 --> 00:11:45,860
appeal probe we can use on your grading

00:11:44,750 --> 00:11:48,380
some rules maybe you're in San macros

00:11:45,860 --> 00:11:52,700
Sun sickness right so what we want to

00:11:48,380 --> 00:11:56,720
see is this kind of we cannot do errors

00:11:52,700 --> 00:11:58,550
the the here's the several projects it's

00:11:56,720 --> 00:12:00,680
just an example of what the community

00:11:58,550 --> 00:12:02,840
was able to deliver and you can see that

00:12:00,680 --> 00:12:05,450
Google has no particular expertise in

00:12:02,840 --> 00:12:07,190
Scala nice in rust well caught in there

00:12:05,450 --> 00:12:09,350
is some but you know this it's kind of

00:12:07,190 --> 00:12:11,360
going on and on but that is just started

00:12:09,350 --> 00:12:14,570
a year ago and Haskell is like we don't

00:12:11,360 --> 00:12:17,330
we don't do hostile but not not not in

00:12:14,570 --> 00:12:20,480
the you know nothing right not in the

00:12:17,330 --> 00:12:23,030
giggler right so basically really sort

00:12:20,480 --> 00:12:26,000
of for the future growth of basil we

00:12:23,030 --> 00:12:28,610
cannot do everything we and we we

00:12:26,000 --> 00:12:30,290
provide this foundation that the

00:12:28,610 --> 00:12:33,350
community we hope you'll build on and

00:12:30,290 --> 00:12:34,880
now strong focus in the future will be

00:12:33,350 --> 00:12:37,250
we've been doing the visit before but we

00:12:34,880 --> 00:12:39,470
will do it even stronger and maybe in

00:12:37,250 --> 00:12:41,240
the community making sure basil as a

00:12:39,470 --> 00:12:45,830
project words for community and the

00:12:41,240 --> 00:12:47,900
community can add and extent we add to

00:12:45,830 --> 00:12:49,310
basically extend basil in in the right

00:12:47,900 --> 00:12:51,230
way in such a way that we're so

00:12:49,310 --> 00:12:52,430
productive and frictionless right so

00:12:51,230 --> 00:12:55,730
here are some things we're definitely

00:12:52,430 --> 00:12:57,680
what I continue to do we definitely want

00:12:55,730 --> 00:12:59,900
to continue the stability and thinking

00:12:57,680 --> 00:13:01,670
about change change policies saying

00:12:59,900 --> 00:13:03,590
right so we you might adjust some

00:13:01,670 --> 00:13:05,270
parameter on that way depending on you

00:13:03,590 --> 00:13:07,190
know what were the feedback comes in and

00:13:05,270 --> 00:13:08,270
what's not what's not but basically this

00:13:07,190 --> 00:13:10,640
is I think this is a good foundation

00:13:08,270 --> 00:13:12,440
where we got to a stable support it's

00:13:10,640 --> 00:13:15,710
thing right and the same thing with

00:13:12,440 --> 00:13:17,750
basically I that's that's a tool for us

00:13:15,710 --> 00:13:19,700
that's also true to some extent for

00:13:17,750 --> 00:13:21,050
people who do rules and people who

00:13:19,700 --> 00:13:23,240
extended system so that if

00:13:21,050 --> 00:13:25,399
and boards of agencyís they will be able

00:13:23,240 --> 00:13:28,040
to you know test against the futurism

00:13:25,399 --> 00:13:29,779
Basel tester stuff those things are out

00:13:28,040 --> 00:13:33,830
releases and so on that that's the key

00:13:29,779 --> 00:13:35,480
thing around sort of enabling enabling

00:13:33,830 --> 00:13:38,300
basically exists the more our ideas are

00:13:35,480 --> 00:13:40,279
around supporting this recommended rule

00:13:38,300 --> 00:13:42,620
sets which is you know there is a set of

00:13:40,279 --> 00:13:45,019
criteria that if the rule set satisfies

00:13:42,620 --> 00:13:47,000
those then they get to be on the Basel

00:13:45,019 --> 00:13:49,070
CI we get to have some contact between

00:13:47,000 --> 00:13:51,860
between the basel team and their rule or

00:13:49,070 --> 00:13:53,660
nurse about after breaking them given

00:13:51,860 --> 00:13:55,010
the advance and ties and so on and you

00:13:53,660 --> 00:13:56,870
can read all that and it's basically an

00:13:55,010 --> 00:14:00,140
open process you can apply kind of for

00:13:56,870 --> 00:14:03,380
that and and it will get you on board

00:14:00,140 --> 00:14:05,600
so we also want we've heard a lot of

00:14:03,380 --> 00:14:08,300
feedback about difficulty of managing

00:14:05,600 --> 00:14:09,860
dependencies right and especially for

00:14:08,300 --> 00:14:11,120
the foundational pieces of the ecosystem

00:14:09,860 --> 00:14:13,700
people would like to continue exploring

00:14:11,120 --> 00:14:15,829
this beta federation idea we kind of had

00:14:13,700 --> 00:14:17,779
to start with that we we have not really

00:14:15,829 --> 00:14:19,820
really deliver to that yet but i think

00:14:17,779 --> 00:14:22,399
we will get to that and we will have a

00:14:19,820 --> 00:14:24,860
talk later later today about this but

00:14:22,399 --> 00:14:27,250
basically the idea there being that we

00:14:24,860 --> 00:14:29,420
want to simplify the release process for

00:14:27,250 --> 00:14:30,620
parts of the ecosystem where they can

00:14:29,420 --> 00:14:32,060
participate in fit generation and

00:14:30,620 --> 00:14:34,579
releases will kind of happen for you

00:14:32,060 --> 00:14:36,380
automatically and and it'll be the good

00:14:34,579 --> 00:14:38,690
release so it will work across across

00:14:36,380 --> 00:14:40,130
the different dependencies we have and

00:14:38,690 --> 00:14:44,029
of course one other efforts I've been

00:14:40,130 --> 00:14:46,550
pushing forward is stepping up this beta

00:14:44,029 --> 00:14:48,680
community experts program where that

00:14:46,550 --> 00:14:50,870
would be companies called South osseous

00:14:48,680 --> 00:14:53,120
or may be individuals who are recognized

00:14:50,870 --> 00:14:56,000
at experts who will get to get to some

00:14:53,120 --> 00:14:58,610
to go some trainings and who kind of

00:14:56,000 --> 00:15:01,190
currently help companies and projects on

00:14:58,610 --> 00:15:02,810
board to Basel help with support and

00:15:01,190 --> 00:15:08,089
this kind of thing so we you kind of

00:15:02,810 --> 00:15:09,800
want to work on this beta team cannot

00:15:08,089 --> 00:15:11,570
really support every single project

00:15:09,800 --> 00:15:14,390
that's out there we want to expand that

00:15:11,570 --> 00:15:16,130
going to expand that to community as

00:15:14,390 --> 00:15:18,500
well and the community being individual

00:15:16,130 --> 00:15:21,050
people and community being companies and

00:15:18,500 --> 00:15:22,790
and hopefully maybe even some business

00:15:21,050 --> 00:15:24,620
will come out of that right so that

00:15:22,790 --> 00:15:26,180
that's the that's what we mean by naval

00:15:24,620 --> 00:15:27,800
base all the key system that's our ideas

00:15:26,180 --> 00:15:32,839
and that's what we're gonna work on and

00:15:27,800 --> 00:15:34,490
of course when we think about basil

00:15:32,839 --> 00:15:37,279
changes that you want to do are

00:15:34,490 --> 00:15:38,600
focus would be on yes on on supporting

00:15:37,279 --> 00:15:40,880
the community there's some ideas that we

00:15:38,600 --> 00:15:43,100
have that we will probably without

00:15:40,880 --> 00:15:44,870
already formed one of them is just

00:15:43,100 --> 00:15:47,089
better style our KPI that's our

00:15:44,870 --> 00:15:48,470
accessibility point hopefully other

00:15:47,089 --> 00:15:50,540
accessibility points that we have the

00:15:48,470 --> 00:15:55,250
most efficient API something as we look

00:15:50,540 --> 00:15:56,839
in in expand as well the and then of

00:15:55,250 --> 00:15:58,880
course tooling around this so start up

00:15:56,839 --> 00:16:01,040
to such a profile or debugger style

00:15:58,880 --> 00:16:03,110
guides linters and I think that that

00:16:01,040 --> 00:16:05,810
will probably be important for the

00:16:03,110 --> 00:16:08,260
ecosystem as you go along and one other

00:16:05,810 --> 00:16:10,790
big project that we are we are hoping to

00:16:08,260 --> 00:16:13,190
continue working on is we call it star

00:16:10,790 --> 00:16:15,050
gauge this is a cute name the idea being

00:16:13,190 --> 00:16:17,089
that we have a lot of native rules as

00:16:15,050 --> 00:16:19,910
you know that the rules the code of that

00:16:17,089 --> 00:16:21,620
is is in Java and we we want to at least

00:16:19,910 --> 00:16:24,830
make sure that they move to the same

00:16:21,620 --> 00:16:26,300
api's as the star wars are and then it's

00:16:24,830 --> 00:16:29,000
just kind of one degree fracturing

00:16:26,300 --> 00:16:30,680
probably do around this year or so where

00:16:29,000 --> 00:16:33,260
you'll take all this all this code and

00:16:30,680 --> 00:16:34,490
and use the same API systolic used and

00:16:33,260 --> 00:16:36,020
then after that we'll

00:16:34,490 --> 00:16:37,459
we might just move them to start or not

00:16:36,020 --> 00:16:39,770
you'll see about that but the idea being

00:16:37,459 --> 00:16:41,990
that Vijay is the same and there's no no

00:16:39,770 --> 00:16:43,940
more this holes in a pl- rules can can

00:16:41,990 --> 00:16:46,399
use bestseller count so that's it

00:16:43,940 --> 00:16:48,560
that's a hope so these are some

00:16:46,399 --> 00:16:51,260
directions we are already outside

00:16:48,560 --> 00:16:53,720
ourselves and in which we execute but of

00:16:51,260 --> 00:16:56,750
course basically this is basically a

00:16:53,720 --> 00:16:58,430
system is you write you here are what

00:16:56,750 --> 00:17:00,260
makes basis from right that's why we are

00:16:58,430 --> 00:17:02,149
coming that's why I can't work every day

00:17:00,260 --> 00:17:05,839
that's why the Timperley comes to work

00:17:02,149 --> 00:17:08,329
as well hopefully and there's also the D

00:17:05,839 --> 00:17:09,770
suggestions here Google here and we are

00:17:08,329 --> 00:17:11,780
supporting us eternity nears did even

00:17:09,770 --> 00:17:14,809
great great things for for the whole

00:17:11,780 --> 00:17:17,030
world so basically just tell us what you

00:17:14,809 --> 00:17:20,179
need in this conference what you want to

00:17:17,030 --> 00:17:22,520
do is to help you and just throw out

00:17:20,179 --> 00:17:24,620
this two days just be there talk to us

00:17:22,520 --> 00:17:28,839
talk to me it up to John took two other

00:17:24,620 --> 00:17:28,839
engineers and yeah welcome

00:17:30,160 --> 00:17:33,279
[Music]

00:17:34,210 --> 00:17:39,710
thanks John Demetri so of course we've

00:17:36,950 --> 00:17:41,360
got some time for questions I expect to

00:17:39,710 --> 00:17:44,720
be lots of questions here oh they're

00:17:41,360 --> 00:17:46,280
already lining up that's fantastic so

00:17:44,720 --> 00:17:48,410
you know I hear you're saying

00:17:46,280 --> 00:17:49,820
essentially that the message is that one

00:17:48,410 --> 00:17:51,620
dot o is the foundation for the

00:17:49,820 --> 00:17:53,330
community to start building upon and

00:17:51,620 --> 00:17:55,400
we're very much eagerly looking forward

00:17:53,330 --> 00:17:58,340
to the community building on the

00:17:55,400 --> 00:18:00,110
foundation we've laid so I think we'll

00:17:58,340 --> 00:18:02,300
go with questions and if anybody needs a

00:18:00,110 --> 00:18:04,160
mic I'll just run out and go

00:18:02,300 --> 00:18:07,760
go ahead remember to introduce yourself

00:18:04,160 --> 00:18:10,510
and go ahead hello I'm Benjamin so if I

00:18:07,760 --> 00:18:14,840
recall from the basil roadmap say circa

00:18:10,510 --> 00:18:17,930
2016 there was a point on there about

00:18:14,840 --> 00:18:20,030
like basically merging blaze and basil

00:18:17,930 --> 00:18:23,030
right making making it so that Google is

00:18:20,030 --> 00:18:24,920
actually using the all all the code that

00:18:23,030 --> 00:18:25,370
Google is using in blazes open-source

00:18:24,920 --> 00:18:28,820
right

00:18:25,370 --> 00:18:30,800
I is that is that still a goal because

00:18:28,820 --> 00:18:32,840
it seems to me that that effort has kind

00:18:30,800 --> 00:18:34,340
of stalled and I see things like tests

00:18:32,840 --> 00:18:35,900
becoming closed source because there's

00:18:34,340 --> 00:18:38,390
test frameworks that aren't open source

00:18:35,900 --> 00:18:40,040
and you know we'll do a day where

00:18:38,390 --> 00:18:47,000
there's non-google committers to basil

00:18:40,040 --> 00:18:49,460
itself sure I write the I think I'll

00:18:47,000 --> 00:18:51,610
gray if you look over the trend the

00:18:49,460 --> 00:18:53,780
trend was to open more and more things

00:18:51,610 --> 00:18:55,670
maybe there were some reversals of that

00:18:53,780 --> 00:18:58,160
but I don't think that they had a lot of

00:18:55,670 --> 00:19:01,130
them there is a lot of things in blaze

00:18:58,160 --> 00:19:02,930
that that just don't make sense to open

00:19:01,130 --> 00:19:04,520
source like things that you know

00:19:02,930 --> 00:19:06,710
seriously we have an internal service

00:19:04,520 --> 00:19:08,180
that we connected to and and and this is

00:19:06,710 --> 00:19:10,700
I guess the thing that really irks me is

00:19:08,180 --> 00:19:12,200
is Tess sharp because like there's you

00:19:10,700 --> 00:19:15,020
know I infer that there's extensive

00:19:12,200 --> 00:19:16,940
tests of like the C++ stuff and and like

00:19:15,020 --> 00:19:18,440
it's very hard to develop a project if

00:19:16,940 --> 00:19:22,990
you don't have access to the tests right

00:19:18,440 --> 00:19:25,760
so yeah yeah that's fair I I would say

00:19:22,990 --> 00:19:27,320
speaking of fail failures I think we

00:19:25,760 --> 00:19:30,260
haven't gone as far as we had hoped in

00:19:27,320 --> 00:19:32,120
2016 towards this sort of convergence I

00:19:30,260 --> 00:19:33,320
think in some respects though some of

00:19:32,120 --> 00:19:35,030
the things that Dimitri talked about

00:19:33,320 --> 00:19:38,090
earlier are pointing in that direction

00:19:35,030 --> 00:19:40,280
so one of the things one of the blockers

00:19:38,090 --> 00:19:42,740
to getting to the point I think you want

00:19:40,280 --> 00:19:45,290
to see is that the native rules we use

00:19:42,740 --> 00:19:46,720
in Google for historical reasons are not

00:19:45,290 --> 00:19:49,090
always the ones that we

00:19:46,720 --> 00:19:51,790
externally and by refactoring these

00:19:49,090 --> 00:19:54,820
api's to make the api's basically the

00:19:51,790 --> 00:19:56,350
same for star lark and for native rules

00:19:54,820 --> 00:19:58,030
I think that will enable us to

00:19:56,350 --> 00:20:00,700
open-source more tests enable the

00:19:58,030 --> 00:20:02,740
divergence that is kind of getting in

00:20:00,700 --> 00:20:05,500
the way here to be less of an issue I

00:20:02,740 --> 00:20:06,610
will just add that we we actually see

00:20:05,500 --> 00:20:08,230
things in the other direction if it

00:20:06,610 --> 00:20:11,110
makes you feel any better that we have

00:20:08,230 --> 00:20:14,200
blocked changes in Google because they

00:20:11,110 --> 00:20:16,420
have broken basal users in some way or

00:20:14,200 --> 00:20:17,950
other and we are you know we it happens

00:20:16,420 --> 00:20:19,960
in both directions so we feel the pain

00:20:17,950 --> 00:20:22,150
in some respects it in the other

00:20:19,960 --> 00:20:23,350
direction too if that helps I guess it

00:20:22,150 --> 00:20:28,480
like it you know it's just like Google

00:20:23,350 --> 00:20:32,110
Google Go Go Google right like Google

00:20:28,480 --> 00:20:34,900
feels pain Google is doing stuff yeah

00:20:32,110 --> 00:20:37,810
well we I hear you I think one of the

00:20:34,900 --> 00:20:41,290
things we're trying to send is that they

00:20:37,810 --> 00:20:44,680
we realize that our time is not infinite

00:20:41,290 --> 00:20:47,350
so we're what we're investing in in

00:20:44,680 --> 00:20:49,390
particular going forward is the rules

00:20:47,350 --> 00:20:51,340
ecosystem the extensibility parts we

00:20:49,390 --> 00:20:53,140
want to be as open as possible and as

00:20:51,340 --> 00:20:54,520
vibrant as possible and that's we're

00:20:53,140 --> 00:20:56,170
going to focus our efforts that's not to

00:20:54,520 --> 00:20:58,300
say other parts of the system are

00:20:56,170 --> 00:20:59,680
somehow less open but those are where

00:20:58,300 --> 00:21:01,150
our investments are going to go and

00:20:59,680 --> 00:21:04,090
hopefully you will see less google

00:21:01,150 --> 00:21:06,160
google build lougle and more hey rules

00:21:04,090 --> 00:21:07,840
Scala is owned not by Google rule

00:21:06,160 --> 00:21:09,580
Scotland is owned not by Google other

00:21:07,840 --> 00:21:11,980
parts of the system bro not by Google

00:21:09,580 --> 00:21:14,650
remote execution engines not owned by

00:21:11,980 --> 00:21:18,450
Google those are all I think good things

00:21:14,650 --> 00:21:21,430
and we want to enable more of those so

00:21:18,450 --> 00:21:23,140
I'm guessing it we're not going to get

00:21:21,430 --> 00:21:24,940
all the way where you'd like us to be

00:21:23,140 --> 00:21:26,860
but we're trying to do better yeah and

00:21:24,940 --> 00:21:29,350
feel free to reach out to me during my

00:21:26,860 --> 00:21:30,040
office hours or find me and we can talk

00:21:29,350 --> 00:21:33,010
more about that

00:21:30,040 --> 00:21:35,950
Thanks hi my name is Christian I wrote

00:21:33,010 --> 00:21:40,390
rules hi Jen because python is painful

00:21:35,950 --> 00:21:41,860
like extremely painful and I actually

00:21:40,390 --> 00:21:44,710
have a different question about

00:21:41,860 --> 00:21:47,170
workspace rules it feels like workspaces

00:21:44,710 --> 00:21:50,080
just get out of hand and so you end up

00:21:47,170 --> 00:21:52,270
including bzl files and then like those

00:21:50,080 --> 00:21:53,800
include bzl files and then you add a new

00:21:52,270 --> 00:21:57,520
git repository and all of a sudden

00:21:53,800 --> 00:21:59,740
things broke because some dependency is

00:21:57,520 --> 00:22:00,490
not correct any plans to make that

00:21:59,740 --> 00:22:03,730
workspace

00:22:00,490 --> 00:22:07,930
a little cleaner in some way sure

00:22:03,730 --> 00:22:10,600
so I think one we definitely workspaces

00:22:07,930 --> 00:22:12,370
story is one of those probably stories

00:22:10,600 --> 00:22:15,160
that Jeff would cite Jeff Atwood would

00:22:12,370 --> 00:22:17,020
cite as one of the failures or rather

00:22:15,160 --> 00:22:18,100
not complete failures but I think that's

00:22:17,020 --> 00:22:20,620
something that could have designed

00:22:18,100 --> 00:22:22,450
better you know learning it feels like

00:22:20,620 --> 00:22:24,880
the engine in the picture from Jeff at

00:22:22,450 --> 00:22:27,070
Woodstock at the moment I will find it

00:22:24,880 --> 00:22:28,600
there are some parallels there are

00:22:27,070 --> 00:22:31,000
something we don't we don't have bricks

00:22:28,600 --> 00:22:33,840
on top of plastic buckets though I can

00:22:31,000 --> 00:22:39,760
assure you we don't actually do that

00:22:33,840 --> 00:22:42,880
right so I think my view on this is is

00:22:39,760 --> 00:22:44,380
that what we read it was kind of trying

00:22:42,880 --> 00:22:47,290
to we're trying to design there is a

00:22:44,380 --> 00:22:51,340
package manager but the package manager

00:22:47,290 --> 00:22:54,460
is is the very difficult thing to design

00:22:51,340 --> 00:22:57,700
right so I think shorter term what we

00:22:54,460 --> 00:22:59,970
were trying to do by 1.0 is focus on

00:22:57,700 --> 00:23:02,470
integrations with package managers right

00:22:59,970 --> 00:23:03,850
maybe even figure that out maybe in

00:23:02,470 --> 00:23:06,070
figure the package mention of the Java

00:23:03,850 --> 00:23:07,780
The Syndicate is maven NPM figure to

00:23:06,070 --> 00:23:11,350
package management for node community

00:23:07,780 --> 00:23:14,370
let's use that and and of course that

00:23:11,350 --> 00:23:17,080
that's what what where our focus was the

00:23:14,370 --> 00:23:18,610
one thing we are trying to fix for you

00:23:17,080 --> 00:23:21,220
know the some of the foundational pieces

00:23:18,610 --> 00:23:22,210
of the ecosystem we are trying to fix

00:23:21,220 --> 00:23:24,370
throughout the figurations

00:23:22,210 --> 00:23:26,650
through the well you don't have to like

00:23:24,370 --> 00:23:28,720
you will have a canonical workspace that

00:23:26,650 --> 00:23:30,220
you just load and use and that's how you

00:23:28,720 --> 00:23:33,400
get all the dependencies that that was

00:23:30,220 --> 00:23:35,080
that's how for PC Federation I in terms

00:23:33,400 --> 00:23:36,820
of and we'll say more about that you'll

00:23:35,080 --> 00:23:38,710
say more like that in in the talk later

00:23:36,820 --> 00:23:44,380
later today flooring will do the talk

00:23:38,710 --> 00:23:47,650
and then the fixing the whole workspace

00:23:44,380 --> 00:23:49,750
story is something we would still want

00:23:47,650 --> 00:23:52,600
some feedback on do you want to actually

00:23:49,750 --> 00:23:54,940
embed the package manager in Basel do

00:23:52,600 --> 00:23:58,420
you want to do something else do it what

00:23:54,940 --> 00:23:59,830
what is its kind of its its some

00:23:58,420 --> 00:24:02,200
feedback we would like to get from from

00:23:59,830 --> 00:24:03,940
from this community and also I think

00:24:02,200 --> 00:24:07,060
that the community I'd also take action

00:24:03,940 --> 00:24:09,010
in fact because we know there is a lot

00:24:07,060 --> 00:24:10,870
of integrations package managers there

00:24:09,010 --> 00:24:13,090
is a lot of things we could even with

00:24:10,870 --> 00:24:14,380
the current API as we have do through

00:24:13,090 --> 00:24:15,790
style guides maybe

00:24:14,380 --> 00:24:18,190
or through some best practices or maybe

00:24:15,790 --> 00:24:19,840
some tooling so I also welcome the

00:24:18,190 --> 00:24:22,860
community participation that and few

00:24:19,840 --> 00:24:25,210
kind of figuring out the better way to

00:24:22,860 --> 00:24:27,100
to handle those external dependencies is

00:24:25,210 --> 00:24:28,860
is something that that we would be

00:24:27,100 --> 00:24:36,460
interested in in hearing from you guys

00:24:28,860 --> 00:24:39,490
thank you when you come up hi my name is

00:24:36,460 --> 00:24:41,260
Keith smiley I work on basil I lift so

00:24:39,490 --> 00:24:42,700
after a few slides you had here I just

00:24:41,260 --> 00:24:44,440
wanted to hear if there was kind of

00:24:42,700 --> 00:24:45,820
update on what the state of Android is

00:24:44,440 --> 00:24:47,920
and what the kind of long-term plan is

00:24:45,820 --> 00:24:49,390
there so kind of two related things I

00:24:47,920 --> 00:24:52,210
guess one is you mentioned maybe the

00:24:49,390 --> 00:24:54,430
native rules won't move out as much as

00:24:52,210 --> 00:24:55,870
I've been kind of stated or talked about

00:24:54,430 --> 00:24:57,340
in the past and also like the

00:24:55,870 --> 00:24:59,410
possibility of rules Kotlin being owned

00:24:57,340 --> 00:25:01,120
by not Google just kinda want to hear if

00:24:59,410 --> 00:25:02,500
there's like a updated plan because

00:25:01,120 --> 00:25:05,500
there were some red maps at some point

00:25:02,500 --> 00:25:06,970
well most common is not owned by great

00:25:05,500 --> 00:25:09,340
org but yeah it's written by somebody

00:25:06,970 --> 00:25:11,440
else the assumption in the road map was

00:25:09,340 --> 00:25:13,210
that eventually like Google might drop

00:25:11,440 --> 00:25:15,090
the internal rules I'm just kind of

00:25:13,210 --> 00:25:17,680
curious like the overarching updating

00:25:15,090 --> 00:25:19,840
yeah I guess the short answer about the

00:25:17,680 --> 00:25:21,250
you know there are google divergences

00:25:19,840 --> 00:25:22,930
and not because there's anything to vert

00:25:21,250 --> 00:25:24,100
an affair is going on there's history

00:25:22,930 --> 00:25:27,130
that we have to deal with and we don't

00:25:24,100 --> 00:25:29,560
think our users outside Google want to

00:25:27,130 --> 00:25:30,730
deal with that history they're also

00:25:29,560 --> 00:25:32,110
negative side effects so but I think

00:25:30,730 --> 00:25:35,950
there are valid reasons for doing that

00:25:32,110 --> 00:25:38,160
so let's see that's that's Kotlin

00:25:35,950 --> 00:25:40,120
Android generally I can say a few things

00:25:38,160 --> 00:25:42,910
one is Android is obviously very

00:25:40,120 --> 00:25:45,120
important to us we have old team which

00:25:42,910 --> 00:25:47,170
is not our team actually in Google which

00:25:45,120 --> 00:25:49,770
supports the Android rules and people

00:25:47,170 --> 00:25:53,110
could commit history you may notice that

00:25:49,770 --> 00:25:56,170
the Android rules have been migrating to

00:25:53,110 --> 00:25:58,450
two star lark for those of you been

00:25:56,170 --> 00:26:00,670
paying attention and in fact I think the

00:25:58,450 --> 00:26:03,310
largest rewrite of native functionality

00:26:00,670 --> 00:26:06,580
to date in the blaze slash basal code

00:26:03,310 --> 00:26:09,760
base is in Android the rules code is

00:26:06,580 --> 00:26:11,530
essentially identical the few asterisks

00:26:09,760 --> 00:26:13,510
here and there between Google and the

00:26:11,530 --> 00:26:14,890
rules we make available in Basel so

00:26:13,510 --> 00:26:18,010
we've been actually I think pretty

00:26:14,890 --> 00:26:20,110
actively you know moving the start

00:26:18,010 --> 00:26:22,900
moving Android rules to Starlog to

00:26:20,110 --> 00:26:25,000
enable you know others to add on those

00:26:22,900 --> 00:26:27,100
if necessary keeping up with the many

00:26:25,000 --> 00:26:28,419
many changes the Android platform

00:26:27,100 --> 00:26:30,640
which you're probably painfully familiar

00:26:28,419 --> 00:26:31,840
with and will continue to do that so

00:26:30,640 --> 00:26:33,309
that's important I mean if you have

00:26:31,840 --> 00:26:34,870
specific Android questions I might be

00:26:33,309 --> 00:26:36,820
better to take offline but it's it's

00:26:34,870 --> 00:26:38,410
that's an area of active development we

00:26:36,820 --> 00:26:41,110
have a whole team working on it so yeah

00:26:38,410 --> 00:26:44,530
okay let's take the question from the

00:26:41,110 --> 00:26:46,840
balcony go ahead hi my name is Christian

00:26:44,530 --> 00:26:51,880
Gruber I'm actually the maintainer of

00:26:46,840 --> 00:26:53,799
the Kotlin rules so from from from the

00:26:51,880 --> 00:26:57,880
sky yeah

00:26:53,799 --> 00:26:59,440
so the I had a related question like I'm

00:26:57,880 --> 00:27:01,000
intimately familiar with this process of

00:26:59,440 --> 00:27:03,280
like the Android star lark ization of

00:27:01,000 --> 00:27:05,380
the rules and the whole process of the

00:27:03,280 --> 00:27:07,510
Kotlin rules in the internal external

00:27:05,380 --> 00:27:09,460
split and as an ex-googler I'm also

00:27:07,510 --> 00:27:11,530
familiar with how hard it is to do open

00:27:09,460 --> 00:27:13,780
source when you have like the size of

00:27:11,530 --> 00:27:15,970
Google 3 codebase and you have to test

00:27:13,780 --> 00:27:18,190
into all of these things what I'd like

00:27:15,970 --> 00:27:21,280
to see and I'd like to get your comment

00:27:18,190 --> 00:27:23,260
on is the process around roadmaps and

00:27:21,280 --> 00:27:24,880
communication externally and how that

00:27:23,260 --> 00:27:26,320
all works so when the roadmaps for the

00:27:24,880 --> 00:27:28,240
Kotlin and Android rules dropped it was

00:27:26,320 --> 00:27:29,620
amazing we were like yes we have

00:27:28,240 --> 00:27:32,470
something to sink our teeth into

00:27:29,620 --> 00:27:34,360
especially companies like square who are

00:27:32,470 --> 00:27:35,950
trying to migrate and figure out how all

00:27:34,360 --> 00:27:37,570
of this plays out into our planning and

00:27:35,950 --> 00:27:43,120
budgeting of headcount

00:27:37,570 --> 00:27:45,159
how can we work together better to have

00:27:43,120 --> 00:27:47,470
roadmap sort of more frequently updated

00:27:45,159 --> 00:27:49,750
if there's slippage like see that so we

00:27:47,470 --> 00:27:51,309
can have more interplay and is there

00:27:49,750 --> 00:27:53,620
something in the process that we can

00:27:51,309 --> 00:27:55,929
improve together because we're obviously

00:27:53,620 --> 00:27:58,929
willing to contribute but we'd like to

00:27:55,929 --> 00:28:00,880
see that flow so we can adjust does that

00:27:58,929 --> 00:28:03,490
make sense is there yeah yeah I I

00:28:00,880 --> 00:28:04,960
absolutely I think I hear you I think

00:28:03,490 --> 00:28:11,500
one of the things we realize is there's

00:28:04,960 --> 00:28:13,240
sort of a continuum of rules governance

00:28:11,500 --> 00:28:15,370
ranging from this is something that's

00:28:13,240 --> 00:28:18,610
pretty important at Google it's native

00:28:15,370 --> 00:28:20,679
code we're making it available but we

00:28:18,610 --> 00:28:22,380
acknowledge its it's often difficult to

00:28:20,679 --> 00:28:25,210
extend we'll try to improve that

00:28:22,380 --> 00:28:26,710
extensibility bit but but it's it's it's

00:28:25,210 --> 00:28:28,179
it's not going to be an area that's

00:28:26,710 --> 00:28:30,940
going to be easy for others to add on

00:28:28,179 --> 00:28:33,340
there are other rules that are totally

00:28:30,940 --> 00:28:35,890
developed outside of you know our team

00:28:33,340 --> 00:28:37,659
which is great but maybe not they're

00:28:35,890 --> 00:28:39,280
kind of hobby projects and then there

00:28:37,659 --> 00:28:40,870
are there's there's work like Christians

00:28:39,280 --> 00:28:43,059
which i think is super serious

00:28:40,870 --> 00:28:44,650
super-high quality and we I don't think

00:28:43,059 --> 00:28:46,840
we've done a great job differentiating

00:28:44,650 --> 00:28:48,400
these different classes of rules and the

00:28:46,840 --> 00:28:51,000
degree to which the roadmap may be

00:28:48,400 --> 00:28:54,610
totally owned by Google essentially

00:28:51,000 --> 00:28:56,620
totally open totally non Google or maybe

00:28:54,610 --> 00:28:58,150
shared and and I think we have to

00:28:56,620 --> 00:29:02,020
acknowledge those distinctions and I

00:28:58,150 --> 00:29:06,190
would like post Basel 1.0 to improve our

00:29:02,020 --> 00:29:08,500
I mean in general you saw a lot of stuff

00:29:06,190 --> 00:29:10,240
about the rules echo system this is a

00:29:08,500 --> 00:29:11,610
super important focus for this and I

00:29:10,240 --> 00:29:14,110
think you've raised a good point about

00:29:11,610 --> 00:29:17,290
distinguishing the roadmap ownerships

00:29:14,110 --> 00:29:19,570
and expectations and and I also I think

00:29:17,290 --> 00:29:21,790
some quality distinctions and in terms

00:29:19,570 --> 00:29:23,050
of level of support you know best

00:29:21,790 --> 00:29:24,460
practices we want to make those

00:29:23,050 --> 00:29:26,470
distinctions we want to make them public

00:29:24,460 --> 00:29:28,870
and you know we may have like change our

00:29:26,470 --> 00:29:30,160
github repo set up to make those

00:29:28,870 --> 00:29:33,580
distinctions clear so all of those

00:29:30,160 --> 00:29:37,900
things are on the table I don't hope

00:29:33,580 --> 00:29:40,030
that helped yeah I mean that's great and

00:29:37,900 --> 00:29:43,950
on point I guess the only thing that

00:29:40,030 --> 00:29:46,240
that feels missing there is when we see

00:29:43,950 --> 00:29:48,490
slippage --is and things in the roadmaps

00:29:46,240 --> 00:29:51,100
like can we get a better iteration cycle

00:29:48,490 --> 00:29:53,080
on the planning communication because we

00:29:51,100 --> 00:29:55,570
all understand that projects go weird

00:29:53,080 --> 00:29:58,480
and there's internal pressures but is

00:29:55,570 --> 00:30:00,309
there a way that we can get sort of more

00:29:58,480 --> 00:30:02,320
ongoing commitment to communicate out

00:30:00,309 --> 00:30:03,580
when those plans change when things

00:30:02,320 --> 00:30:05,200
don't look like they're gonna land the

00:30:03,580 --> 00:30:07,450
way they think say yeah well I I think

00:30:05,200 --> 00:30:10,750
you deserve that and I think I think the

00:30:07,450 --> 00:30:12,520
reality is some roadmaps are more

00:30:10,750 --> 00:30:14,020
aspirational than others

00:30:12,520 --> 00:30:17,320
and I think we need to acknowledge that

00:30:14,020 --> 00:30:18,820
and and and and I think in some cases we

00:30:17,320 --> 00:30:21,010
have kind of an advanced understanding

00:30:18,820 --> 00:30:23,740
of that distinction and just make that

00:30:21,010 --> 00:30:25,690
clear and and there are going to be ones

00:30:23,740 --> 00:30:27,610
that we're going to be super vigilant

00:30:25,690 --> 00:30:28,780
about committing to great we should you

00:30:27,610 --> 00:30:30,460
should hold us accountable for those

00:30:28,780 --> 00:30:32,350
there are others that I think are more

00:30:30,460 --> 00:30:33,660
like here's what we want to do here's

00:30:32,350 --> 00:30:36,790
some tentative dates

00:30:33,660 --> 00:30:38,500
you better not bet a business on this if

00:30:36,790 --> 00:30:39,730
you do maybe fork them or something I

00:30:38,500 --> 00:30:41,679
think we need to make those distinctions

00:30:39,730 --> 00:30:44,170
that'd be great

00:30:41,679 --> 00:30:46,240
but I do I think it's gonna vary from

00:30:44,170 --> 00:30:47,860
rule set to rule set owner to owner and

00:30:46,240 --> 00:30:50,350
then we need to make that distinction

00:30:47,860 --> 00:30:53,050
clear so yeah I think that is also some

00:30:50,350 --> 00:30:54,260
room to improvement in in the processes

00:30:53,050 --> 00:30:59,150
in a week

00:30:54,260 --> 00:31:00,710
on github may-maybe making sure that say

00:30:59,150 --> 00:31:02,900
if it's a google team that so

00:31:00,710 --> 00:31:04,610
instructional rules we can make that

00:31:02,900 --> 00:31:05,780
easier for them so that's easier for

00:31:04,610 --> 00:31:07,970
them to you know communicate these

00:31:05,780 --> 00:31:09,800
things I'm sure we can think of what

00:31:07,970 --> 00:31:11,630
ideas in that direction as well because

00:31:09,800 --> 00:31:14,840
ultimately it's all about you know you'd

00:31:11,630 --> 00:31:16,700
have a code it's the proof in the code

00:31:14,840 --> 00:31:19,040
so if you don't see commits happenin

00:31:16,700 --> 00:31:20,960
well looks like it's slippage right but

00:31:19,040 --> 00:31:23,210
yeah people need to plan of course but

00:31:20,960 --> 00:31:23,990
people of course need to polish yes so

00:31:23,210 --> 00:31:25,550
we have time for about two more

00:31:23,990 --> 00:31:28,280
questions thanks so much

00:31:25,550 --> 00:31:30,710
introduce hi my name is my name is Paul

00:31:28,280 --> 00:31:32,990
stack build I'm wondering if you can

00:31:30,710 --> 00:31:34,730
give us an update and this question kind

00:31:32,990 --> 00:31:36,560
of dovetails on some previous ones about

00:31:34,730 --> 00:31:37,970
recursive workspaces because it seemed

00:31:36,560 --> 00:31:40,040
like there was some interest did that

00:31:37,970 --> 00:31:42,230
stalled out yes it's not curious what

00:31:40,040 --> 00:31:46,580
the thing I can give you a longer answer

00:31:42,230 --> 00:31:49,040
in the you know in the break whatever is

00:31:46,580 --> 00:31:51,170
one of those equations like why don't

00:31:49,040 --> 00:31:53,120
you just why don't adjust the recursive

00:31:51,170 --> 00:31:55,690
equations well turns out the semantics

00:31:53,120 --> 00:31:57,830
of voc spaces is as you know

00:31:55,690 --> 00:32:00,830
acknowledged in the Fela car thing is

00:31:57,830 --> 00:32:04,400
it's been already complicated workspaces

00:32:00,830 --> 00:32:06,560
are essentially imperative code because

00:32:04,400 --> 00:32:08,570
every time you have a workspace

00:32:06,560 --> 00:32:11,540
declaration like the remote repository

00:32:08,570 --> 00:32:13,670
declaration you change a global state

00:32:11,540 --> 00:32:16,550
which means that when you do try to

00:32:13,670 --> 00:32:18,410
recursive workspaces it's basically kind

00:32:16,550 --> 00:32:20,180
of the first declaration you have to

00:32:18,410 --> 00:32:22,610
encounter as it occurs down the

00:32:20,180 --> 00:32:24,500
workspace three wins so let's imagine

00:32:22,610 --> 00:32:27,920
you depend on a no protobuf whatever

00:32:24,500 --> 00:32:30,590
version and some some dependency it

00:32:27,920 --> 00:32:32,480
reduced sunday dissipation protobuf now

00:32:30,590 --> 00:32:33,650
suddenly you know you your depends you

00:32:32,480 --> 00:32:35,300
can break you you don't know what the

00:32:33,650 --> 00:32:37,910
dependencies are anymore right so this

00:32:35,300 --> 00:32:40,520
is the management of the simple idea of

00:32:37,910 --> 00:32:43,430
let's load workplaces recursively and

00:32:40,520 --> 00:32:46,730
why why don't we just is is just it will

00:32:43,430 --> 00:32:49,640
cause pain and what needs to happen here

00:32:46,730 --> 00:32:50,930
is rethinking of the whole approach this

00:32:49,640 --> 00:32:52,970
is a package manager trying to build

00:32:50,930 --> 00:32:55,550
here package mines are hard to build so

00:32:52,970 --> 00:32:57,590
if that that's around certainly we just

00:32:55,550 --> 00:32:59,270
think that this simple design we had is

00:32:57,590 --> 00:33:01,070
a bad design it wouldn't work it would

00:32:59,270 --> 00:33:04,190
be caused a lot of pain and we can talk

00:33:01,070 --> 00:33:07,010
about ways to you know to fix that yeah

00:33:04,190 --> 00:33:08,330
I think our failure mode here being

00:33:07,010 --> 00:33:10,730
confessional you

00:33:08,330 --> 00:33:12,409
is we said yeah let's just do recursive

00:33:10,730 --> 00:33:16,159
workspaces clearly the right thing to do

00:33:12,409 --> 00:33:17,570
and then we realized oh yeah so let's

00:33:16,159 --> 00:33:19,730
have a longer conversation around that

00:33:17,570 --> 00:33:22,039
we we have a lot of thoughts but right

00:33:19,730 --> 00:33:24,580
that that simple declaration turned out

00:33:22,039 --> 00:33:27,710
to be too ambitious

00:33:24,580 --> 00:33:29,899
hi I'm Eric from Nvidia I've got a

00:33:27,710 --> 00:33:31,580
question for you about CUDA

00:33:29,899 --> 00:33:33,710
I know it's come up that you know

00:33:31,580 --> 00:33:34,820
various projects are incorporating CUDA

00:33:33,710 --> 00:33:36,409
and they're doing it in different ways

00:33:34,820 --> 00:33:39,350
tensorflow is kind of like the

00:33:36,409 --> 00:33:41,720
granddaddy that everybody goes to but

00:33:39,350 --> 00:33:43,730
there's been discussion about making

00:33:41,720 --> 00:33:46,070
CUDA first-class citizen and there's

00:33:43,730 --> 00:33:47,500
been some talk of a road map you know

00:33:46,070 --> 00:33:49,549
we're looking at our own internal way to

00:33:47,500 --> 00:33:50,840
take care of things and there was maybe

00:33:49,549 --> 00:33:52,700
hope that the community would solve

00:33:50,840 --> 00:33:53,570
something before you guys got a chance

00:33:52,700 --> 00:33:54,889
to get to it

00:33:53,570 --> 00:33:56,870
it was wondering if there's a road map

00:33:54,889 --> 00:33:59,000
for that what your plans are if maybe

00:33:56,870 --> 00:34:00,830
the right way addressed is to go to a

00:33:59,000 --> 00:34:06,500
one-on-one today tomorrow that's fine

00:34:00,830 --> 00:34:09,800
too III would say tensorflow

00:34:06,500 --> 00:34:11,480
is is you know sort of its own

00:34:09,800 --> 00:34:11,869
open-source project it's doing its own

00:34:11,480 --> 00:34:14,899
thing

00:34:11,869 --> 00:34:16,820
we're glad they're using basil it's not

00:34:14,899 --> 00:34:20,570
we don't our team does not necessarily

00:34:16,820 --> 00:34:23,599
view their use of CUDA as the road map

00:34:20,570 --> 00:34:27,320
or the model or the team's thing it is a

00:34:23,599 --> 00:34:29,690
project and I think if using the

00:34:27,320 --> 00:34:31,250
tensorflow the use of CUDA as a model is

00:34:29,690 --> 00:34:32,750
not working for other other folks and

00:34:31,250 --> 00:34:34,730
want to use CUDA that's an opportunity

00:34:32,750 --> 00:34:37,520
to do something new I don't think the

00:34:34,730 --> 00:34:39,230
tensorflow team will care they're going

00:34:37,520 --> 00:34:40,970
to use what they use it if it's good

00:34:39,230 --> 00:34:42,909
enough is that more generic things say

00:34:40,970 --> 00:34:45,500
it's good enough they might adopt it so

00:34:42,909 --> 00:34:47,359
it's not an area I think our team is

00:34:45,500 --> 00:34:50,000
going to invest a lot in us it's a short

00:34:47,359 --> 00:34:51,440
answer we would love the community to

00:34:50,000 --> 00:34:53,149
come together and do the right thing

00:34:51,440 --> 00:34:55,339
here and but but I don't think you

00:34:53,149 --> 00:34:58,730
should wait for like tensorflow or us to

00:34:55,339 --> 00:35:01,760
make that happen yeah I definitely -

00:34:58,730 --> 00:35:02,990
here's one thing that sounds like

00:35:01,760 --> 00:35:04,970
something that community and really

00:35:02,990 --> 00:35:08,150
strongly contribute a lot of people use

00:35:04,970 --> 00:35:11,180
CUDA we have a lot of api's in a civil

00:35:08,150 --> 00:35:12,560
class wall to support CUDA maybe they're

00:35:11,180 --> 00:35:15,220
not good enough so talk to us if that

00:35:12,560 --> 00:35:17,810
that's the case but then drop the driver

00:35:15,220 --> 00:35:19,580
probably is is the the user's rights

00:35:17,810 --> 00:35:20,500
people like you people like other folks

00:35:19,580 --> 00:35:22,390
here in the inaccuracy

00:35:20,500 --> 00:35:25,210
who can come together here's a good way

00:35:22,390 --> 00:35:27,310
to support CUDA and we first of all to

00:35:25,210 --> 00:35:29,500
that we will you know we will see what

00:35:27,310 --> 00:35:31,420
we can do to help you as well but yeah

00:35:29,500 --> 00:35:34,360
this is we are not frankly we are not

00:35:31,420 --> 00:35:37,570
doing CUDA in baseball team right thanks

00:35:34,360 --> 00:35:39,400
thanks so much everyone so I just want

00:35:37,570 --> 00:35:45,190
to give a big round of applause for John

00:35:39,400 --> 00:35:45,910
and Dmitry thanks so much I shouldn't

00:35:45,190 --> 00:35:49,300
upstage you

00:35:45,910 --> 00:35:51,520
Oh No yeah so I just want to cover one

00:35:49,300 --> 00:35:53,620
bit of housekeeping make sure to sign up

00:35:51,520 --> 00:35:54,730
for office hours out at registration if

00:35:53,620 --> 00:35:57,840
you would like to ask questions

00:35:54,730 --> 00:36:01,240
one-on-one with basal team members or

00:35:57,840 --> 00:36:03,220
you know anybody listed myself or John

00:36:01,240 --> 00:36:08,020
or Dimitri we're gonna take a break

00:36:03,220 --> 00:36:09,370
right now for about 25 minutes and there

00:36:08,020 --> 00:36:12,040
should be some snacks and some coffee

00:36:09,370 --> 00:36:14,740
and tea and other refreshments out there

00:36:12,040 --> 00:36:18,510
but make sure you come back at about

00:36:14,740 --> 00:36:20,920
10:25 we're gonna try to get sorry at

00:36:18,510 --> 00:36:23,260
10:55 we're gonna get started right away

00:36:20,920 --> 00:36:26,580
thanks everybody and see you in 25

00:36:23,260 --> 00:36:26,580

YouTube URL: https://www.youtube.com/watch?v=dXhmRal9TsA


