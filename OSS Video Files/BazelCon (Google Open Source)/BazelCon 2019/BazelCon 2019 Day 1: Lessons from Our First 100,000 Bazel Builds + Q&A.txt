Title: BazelCon 2019 Day 1: Lessons from Our First 100,000 Bazel Builds + Q&A
Publication date: 2020-01-09
Playlist: BazelCon 2019
Description: 
	Kevin Gessner, Etsy event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Kevin Gessner;
Captions: 
	00:00:00,319 --> 00:00:07,770
and I'd love to bring onto the stage and

00:00:03,959 --> 00:00:10,830
introduce Kevin Gesner from Etsy lessons

00:00:07,770 --> 00:00:12,540
from our first 100,000 basil builds

00:00:10,830 --> 00:00:16,190
Easter thanks Kevin

00:00:12,540 --> 00:00:16,190
there you go what do we click all right

00:00:17,630 --> 00:00:21,930
hi everybody thank you Joe and thank you

00:00:20,250 --> 00:00:23,699
all for being here my name is Kevin

00:00:21,930 --> 00:00:26,699
Gesner and I'm an engineer on the search

00:00:23,699 --> 00:00:28,619
platform team at Etsy search is a big

00:00:26,699 --> 00:00:31,740
deal for Etsy and there's really no

00:00:28,619 --> 00:00:34,950
better place to buy custom slime or cat

00:00:31,740 --> 00:00:37,140
hats online my team is responsible for

00:00:34,950 --> 00:00:38,850
designing building and operating the few

00:00:37,140 --> 00:00:41,579
dozen systems that power the various

00:00:38,850 --> 00:00:43,440
Etsy search features there's a lot of

00:00:41,579 --> 00:00:45,750
complexity that makes a page like that

00:00:43,440 --> 00:00:48,800
work so let's take a little peek behind

00:00:45,750 --> 00:00:51,059
the curtain yeah that seems about right

00:00:48,800 --> 00:00:52,800
over the past few years we've invested

00:00:51,059 --> 00:00:54,780
heavily in making the developer

00:00:52,800 --> 00:00:57,180
experience of working on our search mono

00:00:54,780 --> 00:00:59,910
repo smooth and easy for our engineers

00:00:57,180 --> 00:01:02,039
that hard work is paid off today and

00:00:59,910 --> 00:01:04,140
that's the engineer can build configure

00:01:02,039 --> 00:01:06,659
and deploy a multi-language multi

00:01:04,140 --> 00:01:08,970
service suite of applications with one

00:01:06,659 --> 00:01:11,820
command I'm here of course because that

00:01:08,970 --> 00:01:13,860
command is basil run it's been a

00:01:11,820 --> 00:01:15,840
substantial process over the past three

00:01:13,860 --> 00:01:17,759
years to get to this point but hundreds

00:01:15,840 --> 00:01:19,530
of bills that builds a day was just a

00:01:17,759 --> 00:01:21,750
few dozen engineers show that it's been

00:01:19,530 --> 00:01:22,770
worth it since our initial experiments

00:01:21,750 --> 00:01:24,990
in 2016

00:01:22,770 --> 00:01:27,150
basil has piece by piece and language by

00:01:24,990 --> 00:01:29,549
language come to consume more and more

00:01:27,150 --> 00:01:31,610
of our build pipeline going all-in on

00:01:29,549 --> 00:01:33,900
basil might be a good fit for you too

00:01:31,610 --> 00:01:35,610
today I'm here to talk to you about the

00:01:33,900 --> 00:01:37,860
choices we faced the mistakes we've made

00:01:35,610 --> 00:01:39,780
and the lessons we've learned as the

00:01:37,860 --> 00:01:41,990
very hungry build system has come to

00:01:39,780 --> 00:01:44,579
consume our entire development process

00:01:41,990 --> 00:01:46,470
thank you to Eric Carle for the art and

00:01:44,579 --> 00:01:48,590
apologies to children's book lovers

00:01:46,470 --> 00:01:49,850
everywhere

00:01:48,590 --> 00:01:51,800
in addition to some of the big picture

00:01:49,850 --> 00:01:53,600
ideas and concepts that we've adopted

00:01:51,800 --> 00:01:55,130
with basal huts and links and code

00:01:53,600 --> 00:01:56,330
snippets throughout the talk I'll make

00:01:55,130 --> 00:01:57,830
sure I share a link at the end of these

00:01:56,330 --> 00:02:00,770
slides so you don't have to worry about

00:01:57,830 --> 00:02:02,000
transcribing them as we go but I'll

00:02:00,770 --> 00:02:03,650
start with the biggest lesson we've

00:02:02,000 --> 00:02:05,600
learned the one that has really driven

00:02:03,650 --> 00:02:07,100
our adoption of basel and pushed us

00:02:05,600 --> 00:02:10,130
through tens of thousands of basel

00:02:07,100 --> 00:02:12,860
builds believe the hype if any of you

00:02:10,130 --> 00:02:14,060
are Gradle or ant or SVT users I'm sure

00:02:12,860 --> 00:02:16,460
you've gotten really good at running

00:02:14,060 --> 00:02:18,260
clean and then build because despite

00:02:16,460 --> 00:02:20,990
your best effort your build and your

00:02:18,260 --> 00:02:22,940
tests are flaky I've been there and I

00:02:20,990 --> 00:02:25,130
can say that with basil that has largely

00:02:22,940 --> 00:02:29,060
become a thing of the past when they say

00:02:25,130 --> 00:02:30,320
fast correct choose - they mean it but

00:02:29,060 --> 00:02:32,540
I'm not saying everything is sunshine

00:02:30,320 --> 00:02:34,550
and daisies with apologies to the basil

00:02:32,540 --> 00:02:36,950
team I'm gonna stick a big asterisk on

00:02:34,550 --> 00:02:39,470
believe and for good measure one on hype

00:02:36,950 --> 00:02:41,270
- and later on in the talk I will share

00:02:39,470 --> 00:02:43,820
much more about the rougher edges that

00:02:41,270 --> 00:02:45,830
we've run up against but now let's come

00:02:43,820 --> 00:02:47,900
back to our little newborn basil

00:02:45,830 --> 00:02:50,000
workspace in late 2016

00:02:47,900 --> 00:02:52,640
fed up with our flaky and slow build

00:02:50,000 --> 00:02:54,590
combining Gradle SBT and a ton of shell

00:02:52,640 --> 00:02:56,989
scripts my teammate Greg Donovan

00:02:54,590 --> 00:02:58,880
proposed that we switched to basil at

00:02:56,989 --> 00:03:01,400
the time basil was still quite new I

00:02:58,880 --> 00:03:04,400
think we started on version 0.4 about

00:03:01,400 --> 00:03:04,910
three dozen basil releases ago to get

00:03:04,400 --> 00:03:06,769
started

00:03:04,910 --> 00:03:08,150
Greg set up a basil build in parallel

00:03:06,769 --> 00:03:11,030
with our Gradle build for one of our

00:03:08,150 --> 00:03:12,470
smaller simpler Java applications even

00:03:11,030 --> 00:03:13,820
though it was just a handful of packages

00:03:12,470 --> 00:03:15,470
it started to give us a good feel for

00:03:13,820 --> 00:03:18,500
what the full migration would look like

00:03:15,470 --> 00:03:19,610
and really we liked what we saw writing

00:03:18,500 --> 00:03:21,890
build files was fairly straightforward

00:03:19,610 --> 00:03:24,140
we started to get a taste of star lark

00:03:21,890 --> 00:03:26,000
the language for basil build files and

00:03:24,140 --> 00:03:27,530
custom extensions full builds

00:03:26,000 --> 00:03:30,440
incremental builds and tests were all

00:03:27,530 --> 00:03:32,000
fast as promised starting small was a

00:03:30,440 --> 00:03:33,680
good idea because it gave us time to

00:03:32,000 --> 00:03:35,810
learn the ropes and figure out best

00:03:33,680 --> 00:03:38,360
practices before we created hundreds of

00:03:35,810 --> 00:03:39,680
build files for the whole repo we

00:03:38,360 --> 00:03:41,330
decided that basil was the way forward

00:03:39,680 --> 00:03:43,160
and started to migrate the rest of our

00:03:41,330 --> 00:03:45,290
Java build again in parallel with the

00:03:43,160 --> 00:03:47,720
existing Gradle build what had started

00:03:45,290 --> 00:03:49,790
small as a few packages was now going to

00:03:47,720 --> 00:03:51,830
build a couple thousand source files and

00:03:49,790 --> 00:03:55,310
as we worked on migrating all this code

00:03:51,830 --> 00:03:57,080
we faced a big problem dependencies in

00:03:55,310 --> 00:03:57,950
fact it was two separate problems which

00:03:57,080 --> 00:04:00,110
you've already heard about from other

00:03:57,950 --> 00:04:01,370
people today how to handle external

00:04:00,110 --> 00:04:02,750
dependencies and how

00:04:01,370 --> 00:04:05,720
deal with the internal dependencies in

00:04:02,750 --> 00:04:07,069
our codebase any application of a

00:04:05,720 --> 00:04:08,900
reasonable size is going to have

00:04:07,069 --> 00:04:10,489
external dependencies and unless you

00:04:08,900 --> 00:04:13,220
work at Google you're going to download

00:04:10,489 --> 00:04:14,930
them from the internet build time to

00:04:13,220 --> 00:04:16,310
avoid all kinds of bugs it's important

00:04:14,930 --> 00:04:18,079
that you get the right version of each

00:04:16,310 --> 00:04:20,479
library you depend on and the libraries

00:04:18,079 --> 00:04:22,160
that they depend on and on and on for a

00:04:20,479 --> 00:04:24,169
quick example let's say your application

00:04:22,160 --> 00:04:26,300
depends on G RPC and the solar search

00:04:24,169 --> 00:04:28,370
engine each of those depends on some

00:04:26,300 --> 00:04:30,440
things which may overlap so you'd better

00:04:28,370 --> 00:04:32,990
hope there is a common compatible

00:04:30,440 --> 00:04:35,180
version that will work and then those

00:04:32,990 --> 00:04:36,800
have dependencies all these transitive

00:04:35,180 --> 00:04:38,389
dependencies the dependencies of your

00:04:36,800 --> 00:04:40,400
dependencies are important

00:04:38,389 --> 00:04:42,260
basil needs to know about them both for

00:04:40,400 --> 00:04:45,229
compile time and then to run our build

00:04:42,260 --> 00:04:46,669
artifacts when we started with basil the

00:04:45,229 --> 00:04:49,729
recommended way of managing these

00:04:46,669 --> 00:04:51,440
artifacts was do-it-yourself there was a

00:04:49,729 --> 00:04:53,600
script called migrate workspace that

00:04:51,440 --> 00:04:56,270
could import our Gradle build into basil

00:04:53,600 --> 00:04:58,370
once but after that it was on us to keep

00:04:56,270 --> 00:05:00,710
all these dependencies upgraded and in

00:04:58,370 --> 00:05:03,139
sync a graph like this but literally

00:05:00,710 --> 00:05:05,930
hundreds of dependencies with complex

00:05:03,139 --> 00:05:08,120
inter dependencies and versioning this

00:05:05,930 --> 00:05:10,160
was effectively impossible to do by hand

00:05:08,120 --> 00:05:12,229
we ended up with missing dependencies

00:05:10,160 --> 00:05:14,389
version mismatches and all kinds of

00:05:12,229 --> 00:05:16,520
runtime failures we needed another

00:05:14,389 --> 00:05:19,430
solution and the basil community came to

00:05:16,520 --> 00:05:21,139
the rescue we adopted a tool written by

00:05:19,430 --> 00:05:23,539
Oscar Boykin and some folks at stripe

00:05:21,139 --> 00:05:25,099
called basil depths instead of leaving

00:05:23,539 --> 00:05:27,229
us to manage the full tree of

00:05:25,099 --> 00:05:29,090
dependencies ourselves we simply tell

00:05:27,229 --> 00:05:31,669
basil depths the fewer top-level

00:05:29,090 --> 00:05:33,440
dependencies that we directly need then

00:05:31,669 --> 00:05:35,150
it uses this declaration to generate a

00:05:33,440 --> 00:05:37,220
set of build files representing those

00:05:35,150 --> 00:05:39,800
and all their transitive dependencies

00:05:37,220 --> 00:05:41,810
when we upgrade or add a dependency we

00:05:39,800 --> 00:05:43,910
just rerun basil depths and it updates

00:05:41,810 --> 00:05:45,800
all the files this has worked really

00:05:43,910 --> 00:05:47,270
well for us as a repository has grown

00:05:45,800 --> 00:05:49,520
because we haven't had to worry about

00:05:47,270 --> 00:05:51,500
all the transitive dependencies under

00:05:49,520 --> 00:05:53,750
the hood basil depth takes care of it

00:05:51,500 --> 00:05:55,280
this pattern of managing transitive

00:05:53,750 --> 00:05:57,020
dependencies with tooling works for

00:05:55,280 --> 00:05:59,180
other languages too so we'll see it

00:05:57,020 --> 00:06:01,400
again and it's not without drawbacks

00:05:59,180 --> 00:06:03,410
because basil deps is a separate tool

00:06:01,400 --> 00:06:05,150
that generates code that is checked into

00:06:03,410 --> 00:06:07,490
our repository we have to make sure that

00:06:05,150 --> 00:06:09,469
those generated files are up-to-date so

00:06:07,490 --> 00:06:10,580
we wrote a test in our CI system that

00:06:09,469 --> 00:06:11,800
generates them and make sure

00:06:10,580 --> 00:06:13,790
everything's in

00:06:11,800 --> 00:06:16,610
more recently there's a new tool called

00:06:13,790 --> 00:06:18,170
rules jvm external that handles maven

00:06:16,610 --> 00:06:20,360
dependencies right in the basal build

00:06:18,170 --> 00:06:21,800
sono generated files and they can't get

00:06:20,360 --> 00:06:24,890
out of sync which seems like a nice

00:06:21,800 --> 00:06:27,100
improvement so thanks to basal depths

00:06:24,890 --> 00:06:29,390
that's external dependencies sorted

00:06:27,100 --> 00:06:30,050
internal dependencies posed a different

00:06:29,390 --> 00:06:32,480
set of problems

00:06:30,050 --> 00:06:34,280
our Gradle configuration for building

00:06:32,480 --> 00:06:35,840
Java was largely monolithic each

00:06:34,280 --> 00:06:37,760
application would be compiled as a

00:06:35,840 --> 00:06:40,580
single unit containing sometimes

00:06:37,760 --> 00:06:42,710
hundreds of source files each time we're

00:06:40,580 --> 00:06:45,560
gonna build Java C would be run with all

00:06:42,710 --> 00:06:47,090
those files producing a single jar this

00:06:45,560 --> 00:06:48,620
is an easy approach to set up and

00:06:47,090 --> 00:06:50,270
maintain you tell Gradle to build the

00:06:48,620 --> 00:06:52,190
entire directory tree and it takes care

00:06:50,270 --> 00:06:53,900
of the rest as we were learning about

00:06:52,190 --> 00:06:55,400
basil it was really tempting to

00:06:53,900 --> 00:06:57,850
replicate the setup we had with Gradle

00:06:55,400 --> 00:07:00,560
and have basil build large targets too

00:06:57,850 --> 00:07:02,090
but like the folks at Wix we picked up a

00:07:00,560 --> 00:07:02,720
rule of thumb called the one-to-one to

00:07:02,090 --> 00:07:05,210
one rule

00:07:02,720 --> 00:07:06,710
it only gets about one line in the basil

00:07:05,210 --> 00:07:09,230
Docs but I think it's really important

00:07:06,710 --> 00:07:11,540
enough to reiterate quote we recommend

00:07:09,230 --> 00:07:13,490
authoring a build file per directory and

00:07:11,540 --> 00:07:16,190
defining a dependency graph between them

00:07:13,490 --> 00:07:18,980
that is each source directory becomes

00:07:16,190 --> 00:07:20,780
one package with its own build file they

00:07:18,980 --> 00:07:21,200
call this idea target granularity in the

00:07:20,780 --> 00:07:23,150
docs

00:07:21,200 --> 00:07:25,520
how many source files should be included

00:07:23,150 --> 00:07:27,170
in each build target creating one build

00:07:25,520 --> 00:07:29,150
file per directory does mean that your

00:07:27,170 --> 00:07:31,220
build is quite a bit more work to set up

00:07:29,150 --> 00:07:32,900
but trust me it's very much worth the

00:07:31,220 --> 00:07:36,200
effort to set up your build with small

00:07:32,900 --> 00:07:38,000
packages imagine is example a small tree

00:07:36,200 --> 00:07:39,740
like this you can either create one

00:07:38,000 --> 00:07:42,080
target at the top level covering all the

00:07:39,740 --> 00:07:44,000
files recursively or for each of the

00:07:42,080 --> 00:07:45,920
packages one two and three create their

00:07:44,000 --> 00:07:47,930
own target connected by entered by

00:07:45,920 --> 00:07:49,700
dependencies you have to be explicit

00:07:47,930 --> 00:07:51,680
with basil about what those dependencies

00:07:49,700 --> 00:07:53,870
are for instance here where package 3

00:07:51,680 --> 00:07:55,480
depends on package 1 and package 2 but

00:07:53,870 --> 00:07:57,860
which are independent of each other

00:07:55,480 --> 00:07:59,870
if you have many small targets your

00:07:57,860 --> 00:08:01,340
builds will be much faster that's true

00:07:59,870 --> 00:08:02,900
both for full builds because the

00:08:01,340 --> 00:08:04,970
packages can be built in parallel and

00:08:02,900 --> 00:08:07,070
for incremental builds because what

00:08:04,970 --> 00:08:09,650
needs to be compiled is much smaller for

00:08:07,070 --> 00:08:11,450
any given change and getting to small

00:08:09,650 --> 00:08:13,010
packages with explicit dependencies may

00:08:11,450 --> 00:08:15,950
be a challenge if you already have a

00:08:13,010 --> 00:08:17,990
large existing mono repo there are some

00:08:15,950 --> 00:08:20,030
automated tools like Exodus that can do

00:08:17,990 --> 00:08:22,340
this for you but we also found that they

00:08:20,030 --> 00:08:23,510
have limitations so if you have a large

00:08:22,340 --> 00:08:25,150
code base with lots of internal

00:08:23,510 --> 00:08:27,820
dependencies

00:08:25,150 --> 00:08:29,470
quite a bit of work one additional

00:08:27,820 --> 00:08:31,240
wrinkle beyond just resolving the

00:08:29,470 --> 00:08:33,640
dependencies is dealing with circular

00:08:31,240 --> 00:08:35,650
imports because Basel models your build

00:08:33,640 --> 00:08:37,540
is an acyclic graph a graphic that loops

00:08:35,650 --> 00:08:39,940
you can't have packages with a circular

00:08:37,540 --> 00:08:41,380
dependency on one another a monolithic

00:08:39,940 --> 00:08:43,450
build doesn't care because everything is

00:08:41,380 --> 00:08:45,820
compiled at once but basil needs to know

00:08:43,450 --> 00:08:47,710
what to compile first it turned out that

00:08:45,820 --> 00:08:50,200
our codebase had many circular

00:08:47,710 --> 00:08:51,700
dependencies on our own packages as part

00:08:50,200 --> 00:08:53,800
of the basil migration we shipped a

00:08:51,700 --> 00:08:55,660
massive refactoring that moved classes

00:08:53,800 --> 00:08:58,840
and packages around to remove those

00:08:55,660 --> 00:09:01,420
loops learn from our mistakes and don't

00:08:58,840 --> 00:09:03,610
do it this way if I was doing this again

00:09:01,420 --> 00:09:05,110
I would ship this as a much smaller set

00:09:03,610 --> 00:09:07,380
of changes so that I wouldn't introduce

00:09:05,110 --> 00:09:09,640
a bunch of bugs

00:09:07,380 --> 00:09:11,880
otherwise you'll find yourself like we

00:09:09,640 --> 00:09:15,250
did reverting I mean trying again and

00:09:11,880 --> 00:09:17,680
reverting again and trying again until

00:09:15,250 --> 00:09:19,420
you finally get it right but we got it

00:09:17,680 --> 00:09:21,160
right eventually and after defeating the

00:09:19,420 --> 00:09:22,930
two-headed monster of Java dependencies

00:09:21,160 --> 00:09:24,880
and constructing a couple hundred build

00:09:22,930 --> 00:09:27,190
files we were ready to say goodbye to

00:09:24,880 --> 00:09:28,870
Gradle at this point I changed the we

00:09:27,190 --> 00:09:30,310
had made months earlier when we first

00:09:28,870 --> 00:09:32,950
started considering switching build

00:09:30,310 --> 00:09:34,780
systems really paid off when we decided

00:09:32,950 --> 00:09:36,430
that we migrated to basil we knew we

00:09:34,780 --> 00:09:38,140
wanted to make it painless for our users

00:09:36,430 --> 00:09:40,510
the engineers at Etsy that work on

00:09:38,140 --> 00:09:43,150
search so we wrote two very simple

00:09:40,510 --> 00:09:45,820
wrapper scripts build SH and run tests

00:09:43,150 --> 00:09:47,260
at SH at first these scripts simply

00:09:45,820 --> 00:09:49,540
called out to Gradle running the

00:09:47,260 --> 00:09:51,970
well-known commands to build our apps

00:09:49,540 --> 00:09:54,970
and to run the tests after cleaning the

00:09:51,970 --> 00:09:56,290
build of course we updated our CI and

00:09:54,970 --> 00:09:58,270
all our Docs to reference the new

00:09:56,290 --> 00:10:00,220
scripts and encourage people to start

00:09:58,270 --> 00:10:02,920
using them immediately instead of

00:10:00,220 --> 00:10:04,570
calling Gradle directly then by the time

00:10:02,920 --> 00:10:06,400
we were ready to swap basil in for all

00:10:04,570 --> 00:10:08,650
our builds no one had to remember new

00:10:06,400 --> 00:10:11,320
commands we just updated the guts of the

00:10:08,650 --> 00:10:12,370
wrapper scripts to call basil instead we

00:10:11,320 --> 00:10:14,530
didn't have to call basil clean this

00:10:12,370 --> 00:10:16,630
time which is nice this made the

00:10:14,530 --> 00:10:17,640
transition much less painful and I can't

00:10:16,630 --> 00:10:20,290
recommend it enough

00:10:17,640 --> 00:10:23,140
so these scripts along with the basil RC

00:10:20,290 --> 00:10:25,210
file also give us a place to set common

00:10:23,140 --> 00:10:26,920
standards and common configuration which

00:10:25,210 --> 00:10:29,410
creates a more consistent experience for

00:10:26,920 --> 00:10:31,630
our users the test wrapper for instance

00:10:29,410 --> 00:10:34,150
runs a quick query and grep to ensure

00:10:31,630 --> 00:10:36,370
that every Java test file is included in

00:10:34,150 --> 00:10:37,720
a Java test target otherwise those tests

00:10:36,370 --> 00:10:38,499
won't be run because basil doesn't

00:10:37,720 --> 00:10:41,019
automatically

00:10:38,499 --> 00:10:42,879
or tests this has definitely caught its

00:10:41,019 --> 00:10:44,889
share of build problems before they were

00:10:42,879 --> 00:10:47,559
merged and the source for this script is

00:10:44,889 --> 00:10:49,989
linked in the notes having a checked in

00:10:47,559 --> 00:10:51,939
Basel RC file allows us to set Basel

00:10:49,989 --> 00:10:53,409
flags globally automatically applying

00:10:51,939 --> 00:10:55,749
them to all builds of our repository

00:10:53,409 --> 00:10:57,729
those legs let us control a variety of

00:10:55,749 --> 00:10:59,559
Basel features but most importantly they

00:10:57,729 --> 00:11:01,809
let us decide when we adopt breaking

00:10:59,559 --> 00:11:03,999
changes because Basel rolls out major

00:11:01,809 --> 00:11:06,189
changes over several versions there are

00:11:03,999 --> 00:11:08,349
flags too so you can choose exactly when

00:11:06,189 --> 00:11:10,059
you adopt a new behavior and you will

00:11:08,349 --> 00:11:12,069
need to update around breaking changes

00:11:10,059 --> 00:11:13,959
while Basel is very good about backwards

00:11:12,069 --> 00:11:16,329
compatibility the project moves very

00:11:13,959 --> 00:11:18,189
fast so for the best experience

00:11:16,329 --> 00:11:21,069
I also recommend adding a Basel version

00:11:18,189 --> 00:11:22,899
file that specifies the exact version of

00:11:21,069 --> 00:11:24,759
Basel that your project course works

00:11:22,899 --> 00:11:26,499
with then you can use a launcher like

00:11:24,759 --> 00:11:28,419
John mentioned like basel disk they'll

00:11:26,499 --> 00:11:29,949
read that file and automatically fetch

00:11:28,419 --> 00:11:31,419
the right version of basel so you don't

00:11:29,949 --> 00:11:33,279
have to install it or update it

00:11:31,419 --> 00:11:35,109
yourselves if you're into the Belton

00:11:33,279 --> 00:11:36,669
suspenders approach you can also specify

00:11:35,109 --> 00:11:39,189
a minimum supported version right in

00:11:36,669 --> 00:11:41,049
your workspace altogether sharing these

00:11:39,189 --> 00:11:43,349
basel configs will make your experience

00:11:41,049 --> 00:11:45,249
and your team's experience much nicer

00:11:43,349 --> 00:11:47,109
but of course even with all these

00:11:45,249 --> 00:11:49,029
wrapper scripts our engineers could tell

00:11:47,109 --> 00:11:50,499
that the tooling had changed and while

00:11:49,029 --> 00:11:51,999
there was a bit of adjusting people were

00:11:50,499 --> 00:11:54,579
generally impressed with the switch from

00:11:51,999 --> 00:11:56,199
Gradle in particular builds and tests

00:11:54,579 --> 00:11:58,029
immediately got faster which was a

00:11:56,199 --> 00:12:00,249
significant quality of life improvement

00:11:58,029 --> 00:12:02,079
for our developers the speed-up is

00:12:00,249 --> 00:12:04,059
largely thanks to Basil's caching which

00:12:02,079 --> 00:12:06,909
is the core feature behind the fast part

00:12:04,059 --> 00:12:08,829
of fast and correct because we created

00:12:06,909 --> 00:12:10,929
small targets with explicit dependencies

00:12:08,829 --> 00:12:13,089
basil can confidently know what needs to

00:12:10,929 --> 00:12:14,789
be rebuilt after we make changes and use

00:12:13,089 --> 00:12:17,079
a cached artifact if nothing has changed

00:12:14,789 --> 00:12:18,839
so instead of every build with Gradle

00:12:17,079 --> 00:12:20,919
taking long enough for a coffee break

00:12:18,839 --> 00:12:22,899
incremental build suddenly take under a

00:12:20,919 --> 00:12:25,209
minute and just a few seconds in many

00:12:22,899 --> 00:12:27,339
cases you can even use a shared remote

00:12:25,209 --> 00:12:29,199
cache so basil will simply download a

00:12:27,339 --> 00:12:31,029
matching compiled artifact instead of

00:12:29,199 --> 00:12:33,759
building it if anyone has built that

00:12:31,029 --> 00:12:35,409
version of your code before in practice

00:12:33,759 --> 00:12:37,899
our remote cache gets us a hit rate

00:12:35,409 --> 00:12:39,819
around 95% for production builds and

00:12:37,899 --> 00:12:41,889
tests but it took a lot of tuning and a

00:12:39,819 --> 00:12:43,569
lot of adjusting to get it there there

00:12:41,889 --> 00:12:45,549
are some pretty good logs and cache

00:12:43,569 --> 00:12:47,799
debugging tools and I think George from

00:12:45,549 --> 00:12:49,389
uber is speaking about caching and

00:12:47,799 --> 00:12:50,949
remote execution and all the things that

00:12:49,389 --> 00:12:51,920
go into that tomorrow which I'm really

00:12:50,949 --> 00:12:54,350
looking forward to

00:12:51,920 --> 00:12:56,839
I think the coolest part is that basil

00:12:54,350 --> 00:12:58,790
doesn't just cash jars and binaries the

00:12:56,839 --> 00:13:01,249
kind of artifacts you're used to it also

00:12:58,790 --> 00:13:02,569
caches test results and test result

00:13:01,249 --> 00:13:04,339
caching is one of the best selling

00:13:02,569 --> 00:13:06,049
points for basil it's just such a clear

00:13:04,339 --> 00:13:08,209
benefit compared to other build systems

00:13:06,049 --> 00:13:09,709
as you're making code changes you no

00:13:08,209 --> 00:13:11,239
longer have to worry about finding the

00:13:09,709 --> 00:13:13,100
right test that covers the code you're

00:13:11,239 --> 00:13:15,619
working on or suffer waiting for the

00:13:13,100 --> 00:13:17,540
entire test suite you just ask basil to

00:13:15,619 --> 00:13:19,519
run all the tests and it will only rerun

00:13:17,540 --> 00:13:21,589
those that it knows have are affected by

00:13:19,519 --> 00:13:24,169
your changes the others will instantly

00:13:21,589 --> 00:13:25,819
report the last cache result I think it

00:13:24,169 --> 00:13:29,029
feels like magic and you get it right

00:13:25,819 --> 00:13:30,859
out of the box of basil so with that our

00:13:29,029 --> 00:13:32,359
very hungry build system has gobbled up

00:13:30,859 --> 00:13:35,929
Java but it's still hungry

00:13:32,359 --> 00:13:37,519
what's next also in 2017

00:13:35,929 --> 00:13:39,169
while we were migrating to basil we

00:13:37,519 --> 00:13:41,059
started the process of replac forming

00:13:39,169 --> 00:13:42,499
all the search services we were moving

00:13:41,059 --> 00:13:45,350
from a fleet of several hundred

00:13:42,499 --> 00:13:47,899
bare-metal servers to kubernetes here's

00:13:45,350 --> 00:13:49,549
your 15 second kubernetes lesson you

00:13:47,899 --> 00:13:51,739
build your binaries into docker images

00:13:49,549 --> 00:13:53,389
then configure them with llamó manifests

00:13:51,739 --> 00:13:55,399
that define the applications load

00:13:53,389 --> 00:13:57,649
balancers storage and all the rest they

00:13:55,399 --> 00:13:59,179
need to run kubernetes uses those

00:13:57,649 --> 00:14:00,889
definitions to download the docker

00:13:59,179 --> 00:14:02,290
images for your applications then

00:14:00,889 --> 00:14:04,549
configures and starts the containers

00:14:02,290 --> 00:14:06,199
there is a lot more to cooper Nettie's

00:14:04,549 --> 00:14:08,029
but given that this is basil con not

00:14:06,199 --> 00:14:10,029
cube con that should be enough to talk

00:14:08,029 --> 00:14:12,259
about how we use basil with kubernetes

00:14:10,029 --> 00:14:14,029
I'll speak more about the animal side of

00:14:12,259 --> 00:14:15,679
things later but the first hurdle we

00:14:14,029 --> 00:14:17,209
needed to tackle for this migration was

00:14:15,679 --> 00:14:19,819
building docker images around our

00:14:17,209 --> 00:14:21,619
binaries at first we would use basil to

00:14:19,819 --> 00:14:23,480
build an artifact than a docker file to

00:14:21,619 --> 00:14:25,610
build it into an image but pretty

00:14:23,480 --> 00:14:28,220
quickly we adopted rules docker to build

00:14:25,610 --> 00:14:29,779
the images directly with basil replacing

00:14:28,220 --> 00:14:31,429
a docker file with rules docker is

00:14:29,779 --> 00:14:33,379
pretty straightforward you use the

00:14:31,429 --> 00:14:35,059
container image rule you specify the

00:14:33,379 --> 00:14:36,619
base image you want to build on and

00:14:35,059 --> 00:14:39,169
whatever files and packages you want to

00:14:36,619 --> 00:14:40,939
copy in and you're set when you build

00:14:39,169 --> 00:14:42,559
this target rules docker produces an

00:14:40,939 --> 00:14:44,360
archive of the image like a docker file

00:14:42,559 --> 00:14:45,949
does but it also builds a shell script

00:14:44,360 --> 00:14:48,499
which makes working with the image easy

00:14:45,949 --> 00:14:51,169
when you run the script it loads the

00:14:48,499 --> 00:14:53,629
built image into docker that is when you

00:14:51,169 --> 00:14:55,759
run basil build my docker image it

00:14:53,629 --> 00:14:57,980
builds the image and basil run my docker

00:14:55,759 --> 00:14:59,869
image not only builds it but loads it

00:14:57,980 --> 00:15:02,179
into your local docker for easy testing

00:14:59,869 --> 00:15:03,980
I've come to really like these Handy

00:15:02,179 --> 00:15:05,600
hooks and scripts that a lot of basil

00:15:03,980 --> 00:15:07,100
rules produce and

00:15:05,600 --> 00:15:09,050
all comes from Basil's ability to easily

00:15:07,100 --> 00:15:12,110
build multiple kinds of artifacts from

00:15:09,050 --> 00:15:13,610
the same sources a big reason we chose

00:15:12,110 --> 00:15:15,680
Basel was because of its promises of

00:15:13,610 --> 00:15:17,029
reproducibility the idea that I build a

00:15:15,680 --> 00:15:18,680
certain set of source files and you

00:15:17,029 --> 00:15:20,779
build them who'll get the same result

00:15:18,680 --> 00:15:22,699
not just a program that produces the

00:15:20,779 --> 00:15:25,519
same output but bit for bit the same

00:15:22,699 --> 00:15:28,279
artifacts on disk and it is much harder

00:15:25,519 --> 00:15:30,319
than you'd think to get Java C or GCC to

00:15:28,279 --> 00:15:32,930
produce the exact same output twice in a

00:15:30,319 --> 00:15:34,850
row let alone on separate machines it

00:15:32,930 --> 00:15:36,709
requires these hermetic sandboxes or

00:15:34,850 --> 00:15:38,810
basel tracks not only the source files

00:15:36,709 --> 00:15:41,029
but the environment and the compilers

00:15:38,810 --> 00:15:43,339
and everything else by controlling that

00:15:41,029 --> 00:15:45,230
entire environment unexpected things

00:15:43,339 --> 00:15:47,959
can't sneak in like timestamps or

00:15:45,230 --> 00:15:50,600
sources of randomness this also enables

00:15:47,959 --> 00:15:51,949
the caching that makes build so fast the

00:15:50,600 --> 00:15:54,410
basel and blaze teams have done really

00:15:51,949 --> 00:15:57,170
amazing work to make this all work and

00:15:54,410 --> 00:15:59,750
it really pays off I think we've hit one

00:15:57,170 --> 00:16:01,579
java reproducibility bug in all our time

00:15:59,750 --> 00:16:03,730
with basil so really this is a place

00:16:01,579 --> 00:16:05,990
where you can believe the hype

00:16:03,730 --> 00:16:07,940
reproducibility is really key for docker

00:16:05,990 --> 00:16:10,250
images because even outside of basil

00:16:07,940 --> 00:16:12,500
images are identified by a hash of their

00:16:10,250 --> 00:16:14,329
contents if you change a single bit in

00:16:12,500 --> 00:16:16,370
the image it changes its whole identity

00:16:14,329 --> 00:16:18,470
and any container that's running that

00:16:16,370 --> 00:16:20,959
image has no choice but to restart with

00:16:18,470 --> 00:16:23,029
the changes with images easily weighing

00:16:20,959 --> 00:16:25,370
hundreds of Meg's it was important for

00:16:23,029 --> 00:16:27,259
our network and for a deploy speed then

00:16:25,370 --> 00:16:29,509
we not change images identities unless

00:16:27,259 --> 00:16:30,800
they'd really changed with basil

00:16:29,509 --> 00:16:33,259
building both the images and the

00:16:30,800 --> 00:16:34,819
binaries inside then reproducibly we can

00:16:33,259 --> 00:16:36,589
trust that the image IDs only change

00:16:34,819 --> 00:16:39,649
when the code inside the meaningfully

00:16:36,589 --> 00:16:41,329
changes coming back to our images our

00:16:39,649 --> 00:16:43,459
code needs a strong foundation to run

00:16:41,329 --> 00:16:44,779
successfully in a docker image so we

00:16:43,459 --> 00:16:46,550
build our images on top of pre-built

00:16:44,779 --> 00:16:49,189
base images containing our major

00:16:46,550 --> 00:16:51,889
dependencies like the JVM a Lib C and

00:16:49,189 --> 00:16:54,079
Python we get these images from Google's

00:16:51,889 --> 00:16:55,850
distro list project which produces very

00:16:54,079 --> 00:16:57,920
small docker images for exactly this

00:16:55,850 --> 00:17:00,259
purpose serving as a foundation to build

00:16:57,920 --> 00:17:01,639
your images on there are distro the

00:17:00,259 --> 00:17:03,529
space images for a bunch of popular

00:17:01,639 --> 00:17:05,569
runtimes and they really do serve a

00:17:03,529 --> 00:17:07,100
great foundation but they're called

00:17:05,569 --> 00:17:08,839
distro lists for a reason

00:17:07,100 --> 00:17:10,549
well they're built on top of Debian they

00:17:08,839 --> 00:17:12,500
don't include any of the usual things

00:17:10,549 --> 00:17:15,559
you see in Linux all you get is the

00:17:12,500 --> 00:17:18,460
runtime not a shell not cat not LS not

00:17:15,559 --> 00:17:20,110
them it keeps the images small and our

00:17:18,460 --> 00:17:21,760
dirty' team loves it because software

00:17:20,110 --> 00:17:24,160
that isn't in our image can't have a

00:17:21,760 --> 00:17:26,230
vulnerability but we do need some of

00:17:24,160 --> 00:17:27,670
these tools in our images we run shell

00:17:26,230 --> 00:17:30,220
scripts that power important production

00:17:27,670 --> 00:17:33,190
tasks and they need basic utilities like

00:17:30,220 --> 00:17:35,650
arsenic and coral and JQ these aren't

00:17:33,190 --> 00:17:38,440
uncommon but distro list by design

00:17:35,650 --> 00:17:40,600
includes nothing but digital list does

00:17:38,440 --> 00:17:42,460
include a basal library called package

00:17:40,600 --> 00:17:43,720
manager which lets you download and

00:17:42,460 --> 00:17:45,910
install packages from the Debian

00:17:43,720 --> 00:17:47,800
repositories this gives you access to

00:17:45,910 --> 00:17:49,630
the whole world of Debian packages which

00:17:47,800 --> 00:17:51,940
is essentially all software under the

00:17:49,630 --> 00:17:54,220
Sun but it doesn't take away any of the

00:17:51,940 --> 00:17:56,320
hermeticity or reproducibility because

00:17:54,220 --> 00:17:58,870
every package is pinned to a specific

00:17:56,320 --> 00:18:01,330
version in hash so we choose exactly

00:17:58,870 --> 00:18:02,920
which tools we want in our images and we

00:18:01,330 --> 00:18:04,780
can repeatedly build our own little

00:18:02,920 --> 00:18:06,970
Linux distro that contains exactly what

00:18:04,780 --> 00:18:09,040
we need it's a bit more work than

00:18:06,970 --> 00:18:11,080
building on top of a full-featured image

00:18:09,040 --> 00:18:13,570
like a bun too but it pays off in

00:18:11,080 --> 00:18:14,890
smaller images and better caching and we

00:18:13,570 --> 00:18:17,200
get that caching throughout the stack

00:18:14,890 --> 00:18:19,120
the jars the packages and the layers of

00:18:17,200 --> 00:18:22,180
images are all seamlessly handled as one

00:18:19,120 --> 00:18:23,170
build and built as one target and while

00:18:22,180 --> 00:18:24,610
you're looking at distillates I

00:18:23,170 --> 00:18:27,160
recommend taking a glance at some of the

00:18:24,610 --> 00:18:29,350
other utilities in the Google container

00:18:27,160 --> 00:18:30,970
tools github project some of them are

00:18:29,350 --> 00:18:32,800
very handy like container structure

00:18:30,970 --> 00:18:35,260
tests it's integrated into rules docker

00:18:32,800 --> 00:18:37,210
lets you write full end-to-end tests of

00:18:35,260 --> 00:18:38,920
your images which are run and the

00:18:37,210 --> 00:18:42,220
results cached alongside all your other

00:18:38,920 --> 00:18:44,050
basel tests so now our basel build has

00:18:42,220 --> 00:18:45,430
consumed our java images and it turns

00:18:44,050 --> 00:18:48,040
its hungry eyes towards the rest of our

00:18:45,430 --> 00:18:49,780
stack first on the menu is scala and

00:18:48,040 --> 00:18:51,670
thanks to the wonderful folks at stripe

00:18:49,780 --> 00:18:54,370
and Wix and several other Scala shops

00:18:51,670 --> 00:18:57,430
for the beautiful open source rules

00:18:54,370 --> 00:18:58,720
Scala it was so easy to replace our SBT

00:18:57,430 --> 00:19:01,450
build which was a maintenance nightmare

00:18:58,720 --> 00:19:03,880
inside our mono repo with basil Scala

00:19:01,450 --> 00:19:05,710
targets and because the Scala rules were

00:19:03,880 --> 00:19:07,110
all part of the same build we could drop

00:19:05,710 --> 00:19:09,310
those artifacts into docker images

00:19:07,110 --> 00:19:10,960
suddenly we have a multi-language build

00:19:09,310 --> 00:19:14,260
with fewer tools than we were using

00:19:10,960 --> 00:19:16,690
before next our build gobbled up go

00:19:14,260 --> 00:19:18,490
using rules go and at the beginning we

00:19:16,690 --> 00:19:19,990
had some growing pains with importing

00:19:18,490 --> 00:19:22,000
external dependencies into our build

00:19:19,990 --> 00:19:23,890
like we'd faced with Java but in the

00:19:22,000 --> 00:19:25,450
years since the ghazal tool and the

00:19:23,890 --> 00:19:27,130
modules features that have been added to

00:19:25,450 --> 00:19:29,290
go itself have really improved that

00:19:27,130 --> 00:19:31,620
situation we managed dependencies and go

00:19:29,290 --> 00:19:34,980
like we do with Java Oh

00:19:31,620 --> 00:19:44,309
what's going on here we go back a couple

00:19:34,980 --> 00:19:55,730
slides a couple more back please thank

00:19:44,309 --> 00:19:58,080
you there we go thank you we're worried

00:19:55,730 --> 00:20:00,029
right so we're managing dependencies and

00:19:58,080 --> 00:20:02,970
go like we do with Java by specifying

00:20:00,029 --> 00:20:03,899
the top-level ones and letting tooling

00:20:02,970 --> 00:20:05,340
take care of the rest

00:20:03,899 --> 00:20:07,799
getting in the transitive dependencies

00:20:05,340 --> 00:20:10,260
we've also had some struggles building

00:20:07,799 --> 00:20:11,940
native Segoe packages those depend on

00:20:10,260 --> 00:20:13,679
the GCC and headers that you have

00:20:11,940 --> 00:20:15,539
installed locally so you don't get the

00:20:13,679 --> 00:20:17,159
nice hermetic build and compiler like

00:20:15,539 --> 00:20:19,260
you do when you're building pure go code

00:20:17,159 --> 00:20:21,210
but generally it's been really smooth

00:20:19,260 --> 00:20:24,240
and go and Scala really feel like

00:20:21,210 --> 00:20:25,799
first-class basil citizens along the way

00:20:24,240 --> 00:20:27,049
our build also picked up some JavaScript

00:20:25,799 --> 00:20:29,130
with rules nodejs

00:20:27,049 --> 00:20:30,990
with all these rules I think it's been

00:20:29,130 --> 00:20:34,080
really exciting to watch basil itself

00:20:30,990 --> 00:20:35,850
and the rules evolve in tandem the basil

00:20:34,080 --> 00:20:38,100
contributors improve the startle our KPI

00:20:35,850 --> 00:20:39,720
is based on what the rules need and the

00:20:38,100 --> 00:20:41,580
rules innovate up to the edges and

00:20:39,720 --> 00:20:43,679
sometimes even past the edges of what

00:20:41,580 --> 00:20:45,390
star lark is able to do it's really

00:20:43,679 --> 00:20:48,059
worth keeping up to date with most basil

00:20:45,390 --> 00:20:50,039
itself and the rules so that you pick up

00:20:48,059 --> 00:20:52,279
all these features and improvements and

00:20:50,039 --> 00:20:55,320
speed reliability and build safety I

00:20:52,279 --> 00:20:57,870
think the biggest takeaway here is that

00:20:55,320 --> 00:20:59,279
the basil community is amazing you

00:20:57,870 --> 00:21:01,919
should absolutely be using third party

00:20:59,279 --> 00:21:03,570
rules in your build whenever you can jin

00:21:01,919 --> 00:21:05,370
chen from the basil team maintains a

00:21:03,570 --> 00:21:07,710
list of rules called awesome basil and

00:21:05,370 --> 00:21:09,779
i'm think you'll find rules for whatever

00:21:07,710 --> 00:21:13,350
languages or platforms you use from

00:21:09,779 --> 00:21:14,669
swift to CSS to Ruby to Oh camel these

00:21:13,350 --> 00:21:16,500
exist thanks to the hard work of

00:21:14,669 --> 00:21:19,500
Googlers and the wider basil community

00:21:16,500 --> 00:21:21,149
which is to say us and while this

00:21:19,500 --> 00:21:23,549
community is great I know it can be even

00:21:21,149 --> 00:21:25,200
better we've only begun to explore what

00:21:23,549 --> 00:21:26,789
a build system like basil can do by

00:21:25,200 --> 00:21:28,710
bringing together multiple technologies

00:21:26,789 --> 00:21:30,659
and has more people in communities join

00:21:28,710 --> 00:21:33,720
in I'm sure we'll see new innovations

00:21:30,659 --> 00:21:35,460
and new ideas this is especially true if

00:21:33,720 --> 00:21:37,020
we make sure there is a wide variety of

00:21:35,460 --> 00:21:39,330
perspectives and backgrounds in the

00:21:37,020 --> 00:21:40,980
basil community those of us here and

00:21:39,330 --> 00:21:43,140
especially those of us on this stage

00:21:40,980 --> 00:21:44,330
that look more like me aren't

00:21:43,140 --> 00:21:46,460
representative of the wide

00:21:44,330 --> 00:21:48,410
Tech Community we have the opportunity

00:21:46,460 --> 00:21:51,440
to be allies and sponsors so that basil

00:21:48,410 --> 00:21:52,760
Kahn 2020 showcases more viewpoints from

00:21:51,440 --> 00:21:56,360
the even more amazing and diverse

00:21:52,760 --> 00:21:57,950
community that I know we can become so

00:21:56,360 --> 00:21:59,930
with four languages under its belt or

00:21:57,950 --> 00:22:01,420
hungry basil build has consumed a huge

00:21:59,930 --> 00:22:03,320
part of our build and deploy pipeline

00:22:01,420 --> 00:22:05,660
looking back at this high-level picture

00:22:03,320 --> 00:22:07,640
of our kubernetes deploys is basil is

00:22:05,660 --> 00:22:09,020
now building all the docker images and

00:22:07,640 --> 00:22:10,910
that's great but our build is still

00:22:09,020 --> 00:22:13,250
hungry and it has its eyes on that yeah

00:22:10,910 --> 00:22:14,960
Mille remember these EML files tell

00:22:13,250 --> 00:22:16,880
kubernetes where and how to run our

00:22:14,960 --> 00:22:18,350
applications so they contain a lot of

00:22:16,880 --> 00:22:20,180
boilerplate but also a lot of

00:22:18,350 --> 00:22:23,000
configuration that is specific to each

00:22:20,180 --> 00:22:24,740
application and each environment and as

00:22:23,000 --> 00:22:26,660
we added more applications and more

00:22:24,740 --> 00:22:28,370
environments wrangling so many

00:22:26,660 --> 00:22:30,740
handwritten llamo files was getting

00:22:28,370 --> 00:22:32,570
completely unmaintainable remember these

00:22:30,740 --> 00:22:34,280
are the core configuration for our

00:22:32,570 --> 00:22:36,230
production systems and they were growing

00:22:34,280 --> 00:22:38,810
to be hundreds or even thousands of

00:22:36,230 --> 00:22:40,820
handwritten lines different applications

00:22:38,810 --> 00:22:41,930
often had very similar sections but

00:22:40,820 --> 00:22:45,020
there was no way to share code between

00:22:41,930 --> 00:22:46,460
them and keep them consistent so we did

00:22:45,020 --> 00:22:48,350
what any self-respecting group of

00:22:46,460 --> 00:22:49,390
software engineers would do we added

00:22:48,350 --> 00:22:51,530
Python to it

00:22:49,390 --> 00:22:53,300
instead of maintaining all the CML by

00:22:51,530 --> 00:22:55,370
hands we'll write Python scripts to

00:22:53,300 --> 00:22:56,780
generate the amyl that'll give us all

00:22:55,370 --> 00:22:59,150
the benefits of a real programming

00:22:56,780 --> 00:23:01,910
language to reduce duplication add tests

00:22:59,150 --> 00:23:03,590
and make things configurable so our

00:23:01,910 --> 00:23:05,870
basil build sinks its teeth into Python

00:23:03,590 --> 00:23:07,130
basil ships with rules for Python that

00:23:05,870 --> 00:23:08,480
are just like the others so getting a

00:23:07,130 --> 00:23:10,580
simple script up and running is

00:23:08,480 --> 00:23:12,320
straightforward and since anything can

00:23:10,580 --> 00:23:14,240
be an output in basil we wrote a small

00:23:12,320 --> 00:23:16,190
star lark rule that takes our yamo

00:23:14,240 --> 00:23:18,620
rating Python binary and puts the output

00:23:16,190 --> 00:23:20,180
into a file now the ammo files are built

00:23:18,620 --> 00:23:21,740
and cached with basil along with the

00:23:20,180 --> 00:23:24,560
rest of our outputs it's much better

00:23:21,740 --> 00:23:26,780
than handwriting all this code however

00:23:24,560 --> 00:23:28,910
we still need different yamo files for

00:23:26,780 --> 00:23:31,610
different environments like dev QA and

00:23:28,910 --> 00:23:33,170
prod fewer basil con last year you heard

00:23:31,610 --> 00:23:34,430
my teammate Greg talk about some of the

00:23:33,170 --> 00:23:36,140
struggles that we've had to get the

00:23:34,430 --> 00:23:38,150
right configuration into the right

00:23:36,140 --> 00:23:40,490
places at the time we were using

00:23:38,150 --> 00:23:42,350
workspace status variables a little

00:23:40,490 --> 00:23:44,960
documented way of injecting outside

00:23:42,350 --> 00:23:46,460
states into your basil built for us that

00:23:44,960 --> 00:23:47,810
meant a variety of environment variables

00:23:46,460 --> 00:23:49,940
which our deploy scripts had to

00:23:47,810 --> 00:23:54,050
carefully set up before calling basil

00:23:49,940 --> 00:23:55,580
and that served us only ok injecting

00:23:54,050 --> 00:23:56,710
environment variables means that basil

00:23:55,580 --> 00:23:58,390
can't cache as much

00:23:56,710 --> 00:24:00,250
because anytime any of the variables

00:23:58,390 --> 00:24:02,049
changes anything that might have

00:24:00,250 --> 00:24:04,539
depended on them has to be invalidated

00:24:02,049 --> 00:24:06,820
and rebuilt that maids are made our

00:24:04,539 --> 00:24:08,559
build slow and brittle because if you

00:24:06,820 --> 00:24:10,840
didn't set up the environment just right

00:24:08,559 --> 00:24:12,399
who knows what you'd get I'll talk a bit

00:24:10,840 --> 00:24:14,200
later about how we moved away from the

00:24:12,399 --> 00:24:16,210
works they satisfy abut for now I'll

00:24:14,200 --> 00:24:19,840
just say we learned the hard way that it

00:24:16,210 --> 00:24:20,950
should be a tool of last resort so now

00:24:19,840 --> 00:24:22,630
that our build is gobbled up its first

00:24:20,950 --> 00:24:24,190
Python and these scripts to generate

00:24:22,630 --> 00:24:26,350
Gamal these are pretty simple

00:24:24,190 --> 00:24:28,659
mostly pure Python with few dependencies

00:24:26,350 --> 00:24:30,250
does that seems to be going great we

00:24:28,659 --> 00:24:32,350
decided to move some of our other Python

00:24:30,250 --> 00:24:34,510
scripts into basil and as you've already

00:24:32,350 --> 00:24:37,210
heard today this is where things start

00:24:34,510 --> 00:24:38,799
to get a little hairy we depend on

00:24:37,210 --> 00:24:40,539
Python pretty heavily beyond just

00:24:38,799 --> 00:24:42,159
generating a mole for kubernetes it's a

00:24:40,539 --> 00:24:44,200
great language for tooling and for

00:24:42,159 --> 00:24:46,029
automation as well as for small services

00:24:44,200 --> 00:24:48,850
so it's important to us to have a good

00:24:46,029 --> 00:24:51,039
Python story in our build until very

00:24:48,850 --> 00:24:54,100
recently we were entirely using Python 2

00:24:51,039 --> 00:24:56,049
because we're lazy luckily that laziness

00:24:54,100 --> 00:24:58,299
was a good thing because basil didn't

00:24:56,049 --> 00:24:59,710
support Python 3 at the time it does now

00:24:58,299 --> 00:25:01,570
though it's still a little sketchy to

00:24:59,710 --> 00:25:04,240
wrangle both versions and with both

00:25:01,570 --> 00:25:06,250
Python 2 and 3 we unfortunately don't

00:25:04,240 --> 00:25:07,990
get all of the great basil features that

00:25:06,250 --> 00:25:10,570
we've come to love and seen in other

00:25:07,990 --> 00:25:12,909
languages in particular the hermetic

00:25:10,570 --> 00:25:14,320
sandbox builds and tests don't work as

00:25:12,909 --> 00:25:16,720
well with Python as with other languages

00:25:14,320 --> 00:25:18,250
by default any Python script that you

00:25:16,720 --> 00:25:20,140
run with basil will use your systems

00:25:18,250 --> 00:25:22,830
Python which might be a decade old

00:25:20,140 --> 00:25:25,690
Python 2 6 or a bleeding-edge Python 3 8

00:25:22,830 --> 00:25:27,520
with most compiled languages basil tool

00:25:25,690 --> 00:25:29,559
chains that you specify more or less

00:25:27,520 --> 00:25:30,940
precisely the exact compiler versions

00:25:29,559 --> 00:25:32,799
and tool versions you're going to get

00:25:30,940 --> 00:25:35,590
but Python doesn't have such a support

00:25:32,799 --> 00:25:37,029
out of the box your system Python likely

00:25:35,590 --> 00:25:39,159
has some number of libraries installed

00:25:37,029 --> 00:25:40,720
globally as well and since basil runs

00:25:39,159 --> 00:25:42,730
that Python your code will be able to

00:25:40,720 --> 00:25:44,440
import those libraries until you take

00:25:42,730 --> 00:25:46,720
that code to another machine where those

00:25:44,440 --> 00:25:48,460
libraries aren't available this has

00:25:46,720 --> 00:25:50,649
caused us a lot of trouble the lack of

00:25:48,460 --> 00:25:52,779
hermeticity in python is probably the

00:25:50,649 --> 00:25:54,730
single biggest frustration that we have

00:25:52,779 --> 00:25:56,919
with basil and it feels really limiting

00:25:54,730 --> 00:25:58,980
compared to the great clean support that

00:25:56,919 --> 00:26:01,750
we've gotten for Java and Scala and go

00:25:58,980 --> 00:26:03,940
we use rules Python to add dependencies

00:26:01,750 --> 00:26:06,130
with pip we try really hard to keep our

00:26:03,940 --> 00:26:08,289
CI system clean so we'll know if we end

00:26:06,130 --> 00:26:10,710
up with undeclared dependencies from the

00:26:08,289 --> 00:26:12,750
system and like with Java and go

00:26:10,710 --> 00:26:14,610
we check in a list of every dependency

00:26:12,750 --> 00:26:16,710
pinned to a specific version to avoid

00:26:14,610 --> 00:26:19,650
surprises but it adds a lot of manual

00:26:16,710 --> 00:26:20,670
work in unexpected failures it's really

00:26:19,650 --> 00:26:22,560
great to know that there are so many

00:26:20,670 --> 00:26:24,450
people around the conference working on

00:26:22,560 --> 00:26:26,010
and thinking about Python because I know

00:26:24,450 --> 00:26:28,250
that Basil's Python support is only

00:26:26,010 --> 00:26:31,200
going to get better from here

00:26:28,250 --> 00:26:33,480
so in early 2018 this is where we were

00:26:31,200 --> 00:26:34,860
our very hungry build system has jumped

00:26:33,480 --> 00:26:37,200
its way through half a dozen languages

00:26:34,860 --> 00:26:39,210
and technologies building jars binaries

00:26:37,200 --> 00:26:41,820
scripts docker images in llamó and

00:26:39,210 --> 00:26:43,470
running hundreds of tests so the final

00:26:41,820 --> 00:26:45,870
snack our basil build has lined up is

00:26:43,470 --> 00:26:47,520
our deploy pipeline when I showed you

00:26:45,870 --> 00:26:50,670
this slide before I've actually left out

00:26:47,520 --> 00:26:52,230
a very important piece the giant pile of

00:26:50,670 --> 00:26:54,630
handwritten bash scripts that deploy

00:26:52,230 --> 00:26:56,070
what we've built to kubernetes these

00:26:54,630 --> 00:26:57,780
scripts would call basil to build the

00:26:56,070 --> 00:26:59,670
docker images than tag and push them

00:26:57,780 --> 00:27:01,440
then call basil again to build the yamo

00:26:59,670 --> 00:27:04,260
and finally deploy that to kubernetes

00:27:01,440 --> 00:27:05,760
and again because again we're lazy

00:27:04,260 --> 00:27:07,590
we'd copied that script to each

00:27:05,760 --> 00:27:09,420
application and made little changes to

00:27:07,590 --> 00:27:11,760
it for each they were specific to each

00:27:09,420 --> 00:27:13,890
app it was up to the engineer who was

00:27:11,760 --> 00:27:15,000
deploying to know which scripts need to

00:27:13,890 --> 00:27:16,500
be called to deploy the write

00:27:15,000 --> 00:27:18,240
applications to the right environment

00:27:16,500 --> 00:27:19,800
and to set the right environment

00:27:18,240 --> 00:27:22,470
variables to produce the correct yellow

00:27:19,800 --> 00:27:26,220
it was a huge mess and a huge source of

00:27:22,470 --> 00:27:28,170
bugs but at basil Con in 2017 Matt from

00:27:26,220 --> 00:27:29,310
Google and miles from data bricks demoed

00:27:28,170 --> 00:27:32,520
something that we knew right away we

00:27:29,310 --> 00:27:34,260
wanted to use rules kate's this is a set

00:27:32,520 --> 00:27:35,910
of basil rules that would replace our

00:27:34,260 --> 00:27:37,680
hand-rolled deploy scripts and allow us

00:27:35,910 --> 00:27:40,320
to scale the number and complexity of

00:27:37,680 --> 00:27:42,960
apps we deploy the main magic of rules

00:27:40,320 --> 00:27:44,550
kate's is the kate's object rule this

00:27:42,960 --> 00:27:45,990
rule replaces our complicated shell

00:27:44,550 --> 00:27:48,450
script with some clear and readable

00:27:45,990 --> 00:27:49,890
basil targets I want to go into into

00:27:48,450 --> 00:27:51,720
some detail here because I think that

00:27:49,890 --> 00:27:53,310
the way that we use rules kate's in the

00:27:51,720 --> 00:27:54,750
way that it works internally really

00:27:53,310 --> 00:27:59,100
captures a lot of the lessons that we've

00:27:54,750 --> 00:28:00,780
learned about using basil effectively so

00:27:59,100 --> 00:28:02,430
before rules kate's we had a handwritten

00:28:00,780 --> 00:28:04,230
shell script that deployed of basil

00:28:02,430 --> 00:28:06,330
built docker images with basil

00:28:04,230 --> 00:28:08,220
EML files we've replaced that with a

00:28:06,330 --> 00:28:10,020
kate's object target which builds a

00:28:08,220 --> 00:28:13,770
shell script that deploys images in yeah

00:28:10,020 --> 00:28:15,420
mph files when we basil run it and you

00:28:13,770 --> 00:28:17,370
might hear that in wonder didn't we just

00:28:15,420 --> 00:28:19,440
replace one shell script with a fancier

00:28:17,370 --> 00:28:21,480
one and you'd be right if we'd stopped

00:28:19,440 --> 00:28:23,190
there by switching to rules kate's

00:28:21,480 --> 00:28:24,450
instead of our own script we get a bunch

00:28:23,190 --> 00:28:25,860
of additional benefits and

00:28:24,450 --> 00:28:28,680
portunities to improve our deploy

00:28:25,860 --> 00:28:29,910
pipeline further first like with all the

00:28:28,680 --> 00:28:31,920
other open-source rules that I've been

00:28:29,910 --> 00:28:33,960
talking about we now get to build on the

00:28:31,920 --> 00:28:35,700
work of the Basel community to me

00:28:33,960 --> 00:28:38,040
replacing code that we have to maintain

00:28:35,700 --> 00:28:39,840
ourselves with open-source is almost

00:28:38,040 --> 00:28:41,430
always an improvement it's one less

00:28:39,840 --> 00:28:44,190
thing for us to worry about and many

00:28:41,430 --> 00:28:45,870
more people to improve it second the

00:28:44,190 --> 00:28:47,790
scripts produced by rule skates don't

00:28:45,870 --> 00:28:50,040
depend on any of your local executables

00:28:47,790 --> 00:28:51,690
like cube cuddle or docker that's an

00:28:50,040 --> 00:28:53,040
immediate win for hermetic builds which

00:28:51,690 --> 00:28:55,080
we've seen time and time again are a

00:28:53,040 --> 00:28:56,610
benefit so we can worry less about the

00:28:55,080 --> 00:28:58,950
vagaries of each individual dev

00:28:56,610 --> 00:29:01,110
environment the tools that it does need

00:28:58,950 --> 00:29:03,770
are downloaded via the workspace pinned

00:29:01,110 --> 00:29:06,480
to specific versions that we know work

00:29:03,770 --> 00:29:08,970
third rule skates automatically handles

00:29:06,480 --> 00:29:11,010
versioning our docker images in the yamo

00:29:08,970 --> 00:29:12,830
we upload to kubernetes we tell it which

00:29:11,010 --> 00:29:15,060
version of each image it should run

00:29:12,830 --> 00:29:16,980
kate's object as part of the build

00:29:15,060 --> 00:29:19,290
processes the images and the amyl

00:29:16,980 --> 00:29:21,750
together specifying each image with its

00:29:19,290 --> 00:29:22,800
precise hash ID the same identity we

00:29:21,750 --> 00:29:25,320
were talking about when we were talking

00:29:22,800 --> 00:29:27,180
about reproducibility we don't have to

00:29:25,320 --> 00:29:29,340
worry about manually tagging our images

00:29:27,180 --> 00:29:31,590
or updating the amyl ourselves rules

00:29:29,340 --> 00:29:34,170
kate's produces a built resolved llamó

00:29:31,590 --> 00:29:36,390
file with the image hash embedded in the

00:29:34,170 --> 00:29:37,890
rest of the manifest that we wrote and a

00:29:36,390 --> 00:29:41,370
purpose-built shell script to deploy it

00:29:37,890 --> 00:29:43,080
called applied sh using that consistent

00:29:41,370 --> 00:29:44,820
image hash means that kubernetes only

00:29:43,080 --> 00:29:47,070
has to restart containers when the

00:29:44,820 --> 00:29:49,290
images identity has changed not on every

00:29:47,070 --> 00:29:51,690
deploy this makes our deploys faster and

00:29:49,290 --> 00:29:53,400
smoother I also find it really exciting

00:29:51,690 --> 00:29:56,160
that Basil's promises of reproducibility

00:29:53,400 --> 00:29:58,260
and consistent builds aren't just for

00:29:56,160 --> 00:30:00,240
build speed or for caching they actually

00:29:58,260 --> 00:30:03,450
enable new ways of thinking about and

00:30:00,240 --> 00:30:04,140
deploying your software like this so

00:30:03,450 --> 00:30:05,880
here's where we are

00:30:04,140 --> 00:30:07,590
we've artifacts from multiple languages

00:30:05,880 --> 00:30:10,200
built into docker images and deployed to

00:30:07,590 --> 00:30:12,180
kubernetes all with basil this diagram

00:30:10,200 --> 00:30:14,160
is admittedly a simplification and it's

00:30:12,180 --> 00:30:16,500
just one of the numerous applications we

00:30:14,160 --> 00:30:18,450
deploy and I did say earlier that we can

00:30:16,500 --> 00:30:20,460
deploy an entire environment of multiple

00:30:18,450 --> 00:30:22,890
applications all with one basil command

00:30:20,460 --> 00:30:24,690
this isn't quite there plus we still

00:30:22,890 --> 00:30:26,100
have that pesky reliance on environment

00:30:24,690 --> 00:30:28,980
variables which is making our build

00:30:26,100 --> 00:30:31,650
brittle earlier this year we solved both

00:30:28,980 --> 00:30:33,270
of those problems in one go our basil

00:30:31,650 --> 00:30:35,070
build now understands the environments

00:30:33,270 --> 00:30:36,690
we deploy to including which apps are

00:30:35,070 --> 00:30:37,890
deployed where and what configuration

00:30:36,690 --> 00:30:40,140
they need for

00:30:37,890 --> 00:30:41,970
each specific environment we call these

00:30:40,140 --> 00:30:43,950
configurations and deployment contexts

00:30:41,970 --> 00:30:45,960
they remove the need for environment

00:30:43,950 --> 00:30:48,030
variables and enable us to have a single

00:30:45,960 --> 00:30:48,860
deploy command for each environment just

00:30:48,030 --> 00:30:52,200
like I promised

00:30:48,860 --> 00:30:54,300
we have basal feed that context into our

00:30:52,200 --> 00:30:56,070
existing Python generating the correct

00:30:54,300 --> 00:30:58,890
DML for each environment with no other

00:30:56,070 --> 00:31:00,420
inputs required we implemented this by

00:30:58,890 --> 00:31:02,040
taking all the configuration that had

00:31:00,420 --> 00:31:04,830
been passed as environment variables and

00:31:02,040 --> 00:31:06,870
rewriting it as star lock constants that

00:31:04,830 --> 00:31:08,640
is we statically define each of our

00:31:06,870 --> 00:31:10,200
applications in each of our environments

00:31:08,640 --> 00:31:12,720
and how each application should be

00:31:10,200 --> 00:31:14,010
configured for that environment because

00:31:12,720 --> 00:31:15,690
we're deploying to Cooper Nettie's our

00:31:14,010 --> 00:31:17,850
contexts are things like cluster names

00:31:15,690 --> 00:31:19,980
namespaces off the information and such

00:31:17,850 --> 00:31:22,110
depending on your specific systems you

00:31:19,980 --> 00:31:23,580
might need something different this is

00:31:22,110 --> 00:31:25,740
all implemented in star lark

00:31:23,580 --> 00:31:27,510
so basil is fully aware of it and this

00:31:25,740 --> 00:31:29,880
only works because star lark is an

00:31:27,510 --> 00:31:31,560
expressive and powerful language so we

00:31:29,880 --> 00:31:34,350
can define these contexts in a human

00:31:31,560 --> 00:31:36,270
readable way and let basil generate

00:31:34,350 --> 00:31:38,610
targets at build time to do the work

00:31:36,270 --> 00:31:40,440
it's all neatly wrapped up in basil

00:31:38,610 --> 00:31:42,990
rules and macros so engineers don't have

00:31:40,440 --> 00:31:44,850
to think too much about the details for

00:31:42,990 --> 00:31:47,340
instance in this app we tie together the

00:31:44,850 --> 00:31:49,770
yamo building Python with two contexts

00:31:47,340 --> 00:31:51,060
one for QA and one for prod with

00:31:49,770 --> 00:31:54,030
different configuration for each

00:31:51,060 --> 00:31:55,890
environment instead of a single Yama

00:31:54,030 --> 00:31:56,880
file being produced and a single kate's

00:31:55,890 --> 00:31:58,890
object to deploy it

00:31:56,880 --> 00:32:00,900
we have basil create a Hamel file and

00:31:58,890 --> 00:32:03,360
deploy script for each context with a

00:32:00,900 --> 00:32:05,400
unique name and it contains and deploys

00:32:03,360 --> 00:32:07,290
the customized manifest for that

00:32:05,400 --> 00:32:09,690
environment that means that we can

00:32:07,290 --> 00:32:11,730
configure inspect and build each

00:32:09,690 --> 00:32:14,130
application in each environment in

00:32:11,730 --> 00:32:15,690
isolation and understand exactly what

00:32:14,130 --> 00:32:17,460
will be deployed where and when

00:32:15,690 --> 00:32:19,380
and without environment variables and

00:32:17,460 --> 00:32:21,480
our build each of these targets is

00:32:19,380 --> 00:32:23,880
cached individually and easily rebuilt

00:32:21,480 --> 00:32:26,640
so our build us faster as well as easier

00:32:23,880 --> 00:32:28,020
to use and understand it all comes

00:32:26,640 --> 00:32:30,060
together like this for an application

00:32:28,020 --> 00:32:32,370
with a context yeah Milland deploy

00:32:30,060 --> 00:32:34,290
script per environment but with all of

00:32:32,370 --> 00:32:36,570
that app's context using the same images

00:32:34,290 --> 00:32:38,550
we're not the only people exploring

00:32:36,570 --> 00:32:40,680
using starl our configuration for deploy

00:32:38,550 --> 00:32:43,320
environments check out the sky config

00:32:40,680 --> 00:32:45,450
project from stripe and isopods crews

00:32:43,320 --> 00:32:46,920
which are taking the same idea in

00:32:45,450 --> 00:32:50,070
different directions and those are

00:32:46,920 --> 00:32:51,450
linked in the notes as a bonus once

00:32:50,070 --> 00:32:53,159
we've gotten our custom rules

00:32:51,450 --> 00:32:55,860
rapping our context we can do even more

00:32:53,159 --> 00:32:58,080
with build time target generation we

00:32:55,860 --> 00:33:00,149
take you to generated llamó file one per

00:32:58,080 --> 00:33:02,580
application per context and generate a

00:33:00,149 --> 00:33:04,470
corresponding test target that test

00:33:02,580 --> 00:33:05,700
reads the ammo and validates it making

00:33:04,470 --> 00:33:08,130
sure we didn't produce something that

00:33:05,700 --> 00:33:09,779
would fail at deploy time the engineer

00:33:08,130 --> 00:33:11,760
doesn't have to do anything to get this

00:33:09,779 --> 00:33:14,730
test for their application and in fact

00:33:11,760 --> 00:33:16,500
they can't not get the test using basil

00:33:14,730 --> 00:33:18,570
macros and tests to enforce good

00:33:16,500 --> 00:33:21,029
behavior has worked well for us moving

00:33:18,570 --> 00:33:23,610
more validation up front with seamless

00:33:21,029 --> 00:33:25,500
automation we use the same pattern to

00:33:23,610 --> 00:33:27,720
enforce code formatting with basil tests

00:33:25,500 --> 00:33:30,049
and to set certain compiler warnings

00:33:27,720 --> 00:33:32,549
automatically at every step of our build

00:33:30,049 --> 00:33:35,519
now I promised you single command

00:33:32,549 --> 00:33:37,350
deploys and here we are with the context

00:33:35,519 --> 00:33:39,659
defining which applications are deployed

00:33:37,350 --> 00:33:41,220
to each environment basil can finally

00:33:39,659 --> 00:33:43,230
generate a single command for each

00:33:41,220 --> 00:33:44,909
environment wrapping up all the deploy

00:33:43,230 --> 00:33:47,279
scripts for all of that environments

00:33:44,909 --> 00:33:48,960
applications so this single basil run

00:33:47,279 --> 00:33:50,519
command will do everything to get a

00:33:48,960 --> 00:33:52,769
number of applications stood up in our

00:33:50,519 --> 00:33:54,659
QA environment it will build binaries

00:33:52,769 --> 00:33:56,880
from several languages make them into

00:33:54,659 --> 00:33:58,919
docker images generate configure Gamal

00:33:56,880 --> 00:34:00,990
create a number of context specific

00:33:58,919 --> 00:34:03,320
scripts then run them to deploy it all

00:34:00,990 --> 00:34:07,799
to kubernetes all in about two minutes

00:34:03,320 --> 00:34:10,020
it's easy as pie well there is actually

00:34:07,799 --> 00:34:13,109
a lot more complexity in reality this is

00:34:10,020 --> 00:34:15,300
the real build graph for that command in

00:34:13,109 --> 00:34:18,569
our repository I couldn't even get it to

00:34:15,300 --> 00:34:21,690
layout right it's a pretty tangled ball

00:34:18,569 --> 00:34:23,310
of yarn but don't fear basil enables us

00:34:21,690 --> 00:34:25,470
to build such a complex and powerful

00:34:23,310 --> 00:34:27,389
pipeline from small parts that are

00:34:25,470 --> 00:34:29,639
simpler to understand and that's due to

00:34:27,389 --> 00:34:30,869
the power of star look this wasn't the

00:34:29,639 --> 00:34:32,250
first star lark I'd written for our

00:34:30,869 --> 00:34:34,290
build but it was definitely the most

00:34:32,250 --> 00:34:36,000
complicated I've learned over the past

00:34:34,290 --> 00:34:38,310
three years to not be afraid of

00:34:36,000 --> 00:34:40,440
extending basil there are terrifying

00:34:38,310 --> 00:34:42,300
diagrams like this in the docs but it's

00:34:40,440 --> 00:34:44,609
much easier than that to get started so

00:34:42,300 --> 00:34:45,780
don't worry too much reading your own

00:34:44,609 --> 00:34:47,339
rules with star lark will let you

00:34:45,780 --> 00:34:49,760
integrate your basil build with a whole

00:34:47,339 --> 00:34:52,139
variety of tools both simple and complex

00:34:49,760 --> 00:34:53,609
learning curve for star lark is steep

00:34:52,139 --> 00:34:55,409
you have to get comfortable with

00:34:53,609 --> 00:34:57,510
thinking about your bills a series of

00:34:55,409 --> 00:34:59,819
discrete actions and steps and

00:34:57,510 --> 00:35:01,760
understand what rules can and cannot do

00:34:59,819 --> 00:35:04,319
which can sometimes be surprising

00:35:01,760 --> 00:35:05,070
starting with generals is a great way to

00:35:04,319 --> 00:35:06,930
dip your toe

00:35:05,070 --> 00:35:09,360
and get some experience before diving

00:35:06,930 --> 00:35:10,920
deeper I think of generals as magic glue

00:35:09,360 --> 00:35:12,810
for sticking different parts of your

00:35:10,920 --> 00:35:15,360
build together but doing it in a safe

00:35:12,810 --> 00:35:17,520
and repeatable way it's worth learning

00:35:15,360 --> 00:35:19,410
to write macros and rules because Starla

00:35:17,520 --> 00:35:21,230
gives you access to all the power of

00:35:19,410 --> 00:35:23,760
Basel sandboxing and reproducibility

00:35:21,230 --> 00:35:25,770
plus the power of all the other tools in

00:35:23,760 --> 00:35:28,440
your toolbox you'll be able to plug your

00:35:25,770 --> 00:35:30,300
logic into any step of the build consume

00:35:28,440 --> 00:35:32,160
inputs created by other Basel targets

00:35:30,300 --> 00:35:34,470
and pass your outputs down to further

00:35:32,160 --> 00:35:36,150
build steps your start code can mix

00:35:34,470 --> 00:35:38,490
seamlessly with both the built in rules

00:35:36,150 --> 00:35:40,290
and third-party rules with so much

00:35:38,490 --> 00:35:42,590
flexibility anything you dream up

00:35:40,290 --> 00:35:45,210
producing you can probably build a space

00:35:42,590 --> 00:35:47,010
there are libraries like skylib that let

00:35:45,210 --> 00:35:48,510
you write tests for your rules and there

00:35:47,010 --> 00:35:49,950
are plenty of open source rules out

00:35:48,510 --> 00:35:52,230
there to give you plenty to give you

00:35:49,950 --> 00:35:54,210
examples to look at once you write your

00:35:52,230 --> 00:35:56,790
first rule I'm confident you're going to

00:35:54,210 --> 00:35:58,050
want to write more I know I did and so

00:35:56,790 --> 00:36:00,690
this is the part of the talk where I get

00:35:58,050 --> 00:36:02,670
to plug them we use Griffin ax heavily

00:36:00,690 --> 00:36:04,470
at Etsy for dashboards and monitoring

00:36:02,670 --> 00:36:06,870
but I like keeping my hands on my

00:36:04,470 --> 00:36:08,430
keyboard so I find Griffin as UI for

00:36:06,870 --> 00:36:11,460
building dashboards to be a little

00:36:08,430 --> 00:36:13,110
clunky so building on top of the graph

00:36:11,460 --> 00:36:13,980
on a live graph on a live but library

00:36:13,110 --> 00:36:15,720
from weave works

00:36:13,980 --> 00:36:17,370
I wrote rules graph on ax to make it

00:36:15,720 --> 00:36:19,590
easy to build graph on a dashboards with

00:36:17,370 --> 00:36:21,660
basil you implement your graphs and such

00:36:19,590 --> 00:36:23,460
in Python then use the rules to build

00:36:21,660 --> 00:36:25,470
them into a docker image that runs the

00:36:23,460 --> 00:36:27,450
graph on a server the dashboards are

00:36:25,470 --> 00:36:29,340
baked right into graph on ax just like

00:36:27,450 --> 00:36:30,960
you built them in the UI but since

00:36:29,340 --> 00:36:32,850
they're defined in code you can track

00:36:30,960 --> 00:36:34,380
them and get and use all the power of

00:36:32,850 --> 00:36:37,260
Python and basil to build them

00:36:34,380 --> 00:36:38,970
consistently and share code we've been

00:36:37,260 --> 00:36:40,350
using rules Griffin at Etsy for about a

00:36:38,970 --> 00:36:42,150
year and we've built dozens of

00:36:40,350 --> 00:36:42,990
dashboards it's been pretty great if I

00:36:42,150 --> 00:36:45,180
do say so myself

00:36:42,990 --> 00:36:47,970
the rules are on github and I encourage

00:36:45,180 --> 00:36:52,100
you to check them out so here we are

00:36:47,970 --> 00:36:55,080
today here we are today

00:36:52,100 --> 00:36:57,300
there we go look how our basil build has

00:36:55,080 --> 00:36:58,860
grown with our whole deploy pipeline in

00:36:57,300 --> 00:37:01,980
great shape and powered by a single

00:36:58,860 --> 00:37:03,420
basil run we've come really far basil

00:37:01,980 --> 00:37:05,970
has gobbled up a huge variety of

00:37:03,420 --> 00:37:07,650
languages runtimes tools and systems

00:37:05,970 --> 00:37:09,960
well we've reduced the number of build

00:37:07,650 --> 00:37:11,730
tools in our stack dramatically in the

00:37:09,960 --> 00:37:13,740
process we've stood on the shoulders of

00:37:11,730 --> 00:37:15,540
the basil community gone deep with star

00:37:13,740 --> 00:37:18,030
lark and wowed our engineers with the

00:37:15,540 --> 00:37:18,740
speed of test caching and while our very

00:37:18,030 --> 00:37:20,180
hungry builds

00:37:18,740 --> 00:37:22,520
system wants to know what's on the menu

00:37:20,180 --> 00:37:25,400
next our engineers know that we've built

00:37:22,520 --> 00:37:28,220
a fast stable and consistent platform to

00:37:25,400 --> 00:37:30,110
let them do their work better going all

00:37:28,220 --> 00:37:31,460
in with basil isn't trivial and we've

00:37:30,110 --> 00:37:33,380
learned our share of hard lessons along

00:37:31,460 --> 00:37:35,480
the way but it does pay off

00:37:33,380 --> 00:37:37,400
that's the engineers deploy search apps

00:37:35,480 --> 00:37:39,800
with basil fifty to a hundred times

00:37:37,400 --> 00:37:42,020
every day and run tens of thousands of

00:37:39,800 --> 00:37:44,900
tests our first hundred thousand basil

00:37:42,020 --> 00:37:54,080
builds have been a smashing success and

00:37:44,900 --> 00:37:55,490
I can't wait for the next million thank

00:37:54,080 --> 00:37:57,770
you all so much the links to these

00:37:55,490 --> 00:37:59,480
slides and more notes is it bit ly slash

00:37:57,770 --> 00:38:02,830
hungry basil and I'm happy to take your

00:37:59,480 --> 00:38:05,930
questions there it is thanks Kevin and

00:38:02,830 --> 00:38:07,520
we can have the mics in the middle that

00:38:05,930 --> 00:38:10,490
was a great talk very comprehensive

00:38:07,520 --> 00:38:12,890
thank you I actually learned a few

00:38:10,490 --> 00:38:15,530
things and it's good I got excited yeah

00:38:12,890 --> 00:38:17,960
well I'm new new to the basil it's good

00:38:15,530 --> 00:38:23,900
to get you excited yeah fantastic we've

00:38:17,960 --> 00:38:27,290
got one is it Oscar it's Oscar oh hi

00:38:23,900 --> 00:38:29,180
Oscar I had no idea how comprehensive

00:38:27,290 --> 00:38:31,670
you guys have quite a large

00:38:29,180 --> 00:38:34,970
multi-language set up I said one minor

00:38:31,670 --> 00:38:37,430
comment just FYI you can generate the

00:38:34,970 --> 00:38:38,990
build files as part of a build rule with

00:38:37,430 --> 00:38:40,850
the tool that you're using that's what I

00:38:38,990 --> 00:38:42,680
get for not keeping up to date with my

00:38:40,850 --> 00:38:46,180
dependencies Thank You Oscar so just to

00:38:42,680 --> 00:38:46,180
the creator of basil depths everyone

00:38:49,660 --> 00:38:55,130
any other questions you're welcome to

00:38:53,150 --> 00:39:00,859
come find me later I'll be here oh oh

00:38:55,130 --> 00:39:04,280
yes so while you guys oh my name's

00:39:00,859 --> 00:39:07,630
Anthony I work at Twitter hi Anthony so

00:39:04,280 --> 00:39:10,400
while you guys were first evaluating

00:39:07,630 --> 00:39:12,800
basil to use that etsy did you guys

00:39:10,400 --> 00:39:16,130
consider other tools like like pants or

00:39:12,800 --> 00:39:18,410
buck or just kind of curious like we did

00:39:16,130 --> 00:39:20,150
yeah basil was pretty new as I said

00:39:18,410 --> 00:39:21,470
newly released but it's not a new

00:39:20,150 --> 00:39:24,760
project because I think it's been used

00:39:21,470 --> 00:39:27,020
at Google for like 30 years or something

00:39:24,760 --> 00:39:28,640
we didn't look at pants and buck and we

00:39:27,020 --> 00:39:31,490
talked to some people from Twitter and

00:39:28,640 --> 00:39:32,700
Facebook or Facebook and Twitter but

00:39:31,490 --> 00:39:35,040
really we kind of decided

00:39:32,700 --> 00:39:36,690
if we were gonna go all in on a you know

00:39:35,040 --> 00:39:38,790
new build system and one that based

00:39:36,690 --> 00:39:40,950
around this declarative reproducible

00:39:38,790 --> 00:39:43,470
thing we should go with the original one

00:39:40,950 --> 00:39:46,140
not with the knockoff no offense

00:39:43,470 --> 00:39:49,470
no no totally makes sense thanks so much

00:39:46,140 --> 00:39:51,810
sure thing thanks given that was a great

00:39:49,470 --> 00:39:53,099
talk I think serious how widespread is

00:39:51,810 --> 00:39:54,720
the knowledge and the understanding of

00:39:53,099 --> 00:39:57,210
how all the rules interact together

00:39:54,720 --> 00:39:58,680
is it just kind of constrained or FUP

00:39:57,210 --> 00:40:00,900
not as widespread as we would like

00:39:58,680 --> 00:40:02,730
because we're a small team we don't have

00:40:00,900 --> 00:40:05,010
a dedicated build engineering or deploy

00:40:02,730 --> 00:40:07,170
engineering team I'm very jealous of the

00:40:05,010 --> 00:40:09,630
people who do we really just have me and

00:40:07,170 --> 00:40:11,089
a couple other engineers part-time we

00:40:09,630 --> 00:40:12,990
think about the developer experience

00:40:11,089 --> 00:40:14,000
holistically and sometimes that means

00:40:12,990 --> 00:40:16,349
working on the build

00:40:14,000 --> 00:40:17,910
so yeah the knowledge of Star LARC in

00:40:16,349 --> 00:40:19,770
particular is not as widespread as I

00:40:17,910 --> 00:40:21,750
would like knowledge of Basel as a user

00:40:19,770 --> 00:40:24,180
is getting better and better we wrote

00:40:21,750 --> 00:40:26,099
some Docs specifically to the way that

00:40:24,180 --> 00:40:27,990
we set it up we also have a basil

00:40:26,099 --> 00:40:30,000
channel and our company slack and some

00:40:27,990 --> 00:40:32,520
basil custom emojis which have really

00:40:30,000 --> 00:40:34,619
gotten us far in terms of supporting

00:40:32,520 --> 00:40:37,440
people as they use basil but I will say

00:40:34,619 --> 00:40:39,240
as a rules author I don't want my users

00:40:37,440 --> 00:40:40,890
to have to know a lot about how it works

00:40:39,240 --> 00:40:42,119
under the hood but certainly some other

00:40:40,890 --> 00:40:49,920
people on my team should for

00:40:42,119 --> 00:40:54,240
maintainability hello yup that's me

00:40:49,920 --> 00:40:56,730
great so we use Python to a Python two

00:40:54,240 --> 00:40:59,069
and a three now and one problem that we

00:40:56,730 --> 00:41:01,589
have are tens of thousands of siblings

00:40:59,069 --> 00:41:04,800
produced by the Python rules how do you

00:41:01,589 --> 00:41:05,130
all handle that we don't we just let it

00:41:04,800 --> 00:41:06,990
happen

00:41:05,130 --> 00:41:09,900
okay yes there is there are admittedly a

00:41:06,990 --> 00:41:11,520
lot of things where I am waiting with

00:41:09,900 --> 00:41:14,190
bated breath for github issues to be

00:41:11,520 --> 00:41:17,099
fixed in basil itself there are a lot of

00:41:14,190 --> 00:41:18,540
issues of particularly in Python so yeah

00:41:17,099 --> 00:41:19,589
it's it's been a waiting game for us

00:41:18,540 --> 00:41:21,599
again because we don't have dedicated

00:41:19,589 --> 00:41:25,560
build engineers we can't we have to pick

00:41:21,599 --> 00:41:27,150
and choose what what we do I will say we

00:41:25,560 --> 00:41:28,530
don't end up with tens of thousands of

00:41:27,150 --> 00:41:30,390
symlinks so it's not a bottleneck

00:41:28,530 --> 00:41:32,069
especially on Linux that we run I

00:41:30,390 --> 00:41:35,270
suspect if we were running this on Mac

00:41:32,069 --> 00:41:35,270
OS or Windows it would hurt more

00:41:38,280 --> 00:41:47,619
any other questions just check and see

00:41:45,460 --> 00:41:50,560
if John field wants to say anything

00:41:47,619 --> 00:41:52,330
about - in the remaining minutes we've

00:41:50,560 --> 00:41:54,310
heard these issues python has been

00:41:52,330 --> 00:42:01,510
challenging talk to me offline

00:41:54,310 --> 00:42:02,920
absolutely yeah yeah everyone's welcome

00:42:01,510 --> 00:42:04,800
to come talk to me we do have a Python

00:42:02,920 --> 00:42:07,990
birds of the feathers session tomorrow

00:42:04,800 --> 00:42:09,640
we're the team's Python expert who John

00:42:07,990 --> 00:42:11,010
Brennan who could make it today will be

00:42:09,640 --> 00:42:13,450
there too

00:42:11,010 --> 00:42:16,180
remotely so if you throw things Adam it

00:42:13,450 --> 00:42:18,099
will just bounce off the screen but but

00:42:16,180 --> 00:42:19,740
no that's a good opportunity to get

00:42:18,099 --> 00:42:22,060
together and you know one issue is

00:42:19,740 --> 00:42:24,430
defining priorities for work in the

00:42:22,060 --> 00:42:25,810
space and I think that could be a good

00:42:24,430 --> 00:42:27,580
opportunity to do that so that's the

00:42:25,810 --> 00:42:29,680
short answer but do talk to us offline

00:42:27,580 --> 00:42:34,090
we're aware of the you know the pain

00:42:29,680 --> 00:42:38,130
points thank you okay hey thanks Kevin I

00:42:34,090 --> 00:42:38,130

YouTube URL: https://www.youtube.com/watch?v=keT8ixRS6Fk


