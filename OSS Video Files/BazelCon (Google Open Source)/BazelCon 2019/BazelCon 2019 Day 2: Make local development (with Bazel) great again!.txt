Title: BazelCon 2019 Day 2: Make local development (with Bazel) great again!
Publication date: 2020-01-15
Playlist: BazelCon 2019
Description: 
	Ittai Zeidman, Wix event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Ittai Zeidman;
Captions: 
	00:00:00,000 --> 00:00:03,810
all right well we're cutting into your

00:00:01,079 --> 00:00:05,400
time are you we were at 2:30 so people

00:00:03,810 --> 00:00:07,290
should have come over okay and I'm gonna

00:00:05,400 --> 00:00:09,450
introduce you now which is thank you it

00:00:07,290 --> 00:00:11,460
okay you know flicker no you're not

00:00:09,450 --> 00:00:13,590
alone okay no okay go ahead it's okay

00:00:11,460 --> 00:00:16,440
how do you say your name Eddie tie it

00:00:13,590 --> 00:00:19,260
tie it tie from wicks calm is gonna talk

00:00:16,440 --> 00:00:21,000
to us about make local development with

00:00:19,260 --> 00:00:26,609
basil great again thank you your tie

00:00:21,000 --> 00:00:29,010
thank you alright okay so so it's better

00:00:26,609 --> 00:00:32,489
packed two days thank you for coming

00:00:29,010 --> 00:00:34,829
just to understand the crowd a bit I

00:00:32,489 --> 00:00:36,300
want to start a show of hands so raise

00:00:34,829 --> 00:00:38,430
your hands if you're using Bayesian

00:00:36,300 --> 00:00:40,950
today today to be migration it can be

00:00:38,430 --> 00:00:44,030
actually using it awesome keep them up

00:00:40,950 --> 00:00:46,739
you know up now keep it up if you like

00:00:44,030 --> 00:00:50,280
handing build files looking up which

00:00:46,739 --> 00:00:52,770
which files belong to which labels yeah

00:00:50,280 --> 00:00:53,840
okay the few that left them up let's

00:00:52,770 --> 00:00:56,340
talk later

00:00:53,840 --> 00:00:58,820
but for hazardous networks this was a

00:00:56,340 --> 00:01:01,800
really really big pain people were

00:00:58,820 --> 00:01:03,840
really really confused about why they

00:01:01,800 --> 00:01:07,409
need to do that Sony because we went

00:01:03,840 --> 00:01:09,600
with fine-grained dependencies one more

00:01:07,409 --> 00:01:12,060
question before we dive in so how many

00:01:09,600 --> 00:01:13,920
people are using IntelliJ with Bazin

00:01:12,060 --> 00:01:16,080
raise your hands raise your hands okay a

00:01:13,920 --> 00:01:18,869
bit less keep up keep up for seven

00:01:16,080 --> 00:01:21,330
second if now keep it up if your

00:01:18,869 --> 00:01:23,340
experience is fluent like refactoring

00:01:21,330 --> 00:01:26,040
works and you don't need to think yeah

00:01:23,340 --> 00:01:29,579
yeah this was our experience as well so

00:01:26,040 --> 00:01:30,900
we'll touch on that so I have to say

00:01:29,579 --> 00:01:34,650
that over the past year we've had a lot

00:01:30,900 --> 00:01:36,780
of talk with developers like or from my

00:01:34,650 --> 00:01:38,340
team mentioned yesterday and make how I

00:01:36,780 --> 00:01:40,560
came up to my son told us hey you gave

00:01:38,340 --> 00:01:42,899
us an awesome CI but you seriously heard

00:01:40,560 --> 00:01:47,130
us locally like how is this possible

00:01:42,899 --> 00:01:48,930
what's going on and for us this was the

00:01:47,130 --> 00:01:50,490
focus for a lot of internal work to

00:01:48,930 --> 00:01:52,890
level up the local dev experience

00:01:50,490 --> 00:01:56,670
now some people even said to us hey

00:01:52,890 --> 00:02:00,210
maybe there was a mistake and I have to

00:01:56,670 --> 00:02:02,430
say that we think quite the country like

00:02:00,210 --> 00:02:05,790
we think that basil has so much value on

00:02:02,430 --> 00:02:08,819
CI and local build times that it's it's

00:02:05,790 --> 00:02:11,009
giving value right now but what I want

00:02:08,819 --> 00:02:13,349
to talk here is all the work we've done

00:02:11,009 --> 00:02:13,980
are doing and are going to do to make

00:02:13,349 --> 00:02:16,349
look at the

00:02:13,980 --> 00:02:18,030
basil great again in hopes that we can

00:02:16,349 --> 00:02:21,930
all join forces and do it together as a

00:02:18,030 --> 00:02:23,849
community so hi my name is a tie I'm

00:02:21,930 --> 00:02:27,510
back in kid manager at tweeks we have

00:02:23,849 --> 00:02:29,390
around 300 back-end devs for the past

00:02:27,510 --> 00:02:32,940
three and a half years I've been

00:02:29,390 --> 00:02:35,610
dreaming architecting coding and

00:02:32,940 --> 00:02:38,580
supporting which is next generation C I

00:02:35,610 --> 00:02:41,849
going from team city and maven to GC b

00:02:38,580 --> 00:02:45,360
RB results store and basil the whole

00:02:41,849 --> 00:02:48,660
pack basically only the project from one

00:02:45,360 --> 00:02:50,549
person we to 20 people a whole group and

00:02:48,660 --> 00:02:52,079
so on so on I've been a base addition

00:02:50,549 --> 00:02:54,360
contributor sense zero point two point

00:02:52,079 --> 00:02:56,610
three that 67 releases ago and three and

00:02:54,360 --> 00:02:58,860
a half years with Scala maintainer base

00:02:56,610 --> 00:03:00,660
integration testing maintainer and wrote

00:02:58,860 --> 00:03:02,340
big parts of Exodus and automatic

00:03:00,660 --> 00:03:03,900
migrator and over the past year I've

00:03:02,340 --> 00:03:06,299
done a lot of work for local dev tooling

00:03:03,900 --> 00:03:10,380
the reason I mentioned this is because

00:03:06,299 --> 00:03:12,569
I'm going to do some harsh criticism and

00:03:10,380 --> 00:03:14,700
I want to mention that I'm part of this

00:03:12,569 --> 00:03:19,500
community I love this community it's

00:03:14,700 --> 00:03:21,239
just for us to improve so Wix we have

00:03:19,500 --> 00:03:24,359
around thousand developers around 13 how

00:03:21,239 --> 00:03:26,970
the micro services around 350

00:03:24,359 --> 00:03:28,980
deployments a day we come from am a repo

00:03:26,970 --> 00:03:32,220
layout as if you saw always talk

00:03:28,980 --> 00:03:36,630
yesterday we are moving from maven to

00:03:32,220 --> 00:03:38,609
basic we moved finally moved yeah mainly

00:03:36,630 --> 00:03:40,019
in Scala in the back end we have some

00:03:38,609 --> 00:03:41,819
node but that's up scope for this

00:03:40,019 --> 00:03:43,829
discussion and we predominately work

00:03:41,819 --> 00:03:46,620
with IntelliJ the reason I mentioned

00:03:43,829 --> 00:03:48,569
this is because if you have a mono repo

00:03:46,620 --> 00:03:52,530
layout let's say I don't know Google 3

00:03:48,569 --> 00:03:54,090
and you just have Java or C++ and you

00:03:52,530 --> 00:03:57,239
know like people are willing to work

00:03:54,090 --> 00:03:58,709
with other IDs then I think the tones of

00:03:57,239 --> 00:04:00,810
this discussion will be different I

00:03:58,709 --> 00:04:03,630
think many of the core problems are very

00:04:00,810 --> 00:04:06,660
very much the same but you will find

00:04:03,630 --> 00:04:09,450
differences so like I said the focus of

00:04:06,660 --> 00:04:11,579
this talk is JVM and IntelliJ because

00:04:09,450 --> 00:04:14,880
this is you know our bread and butter

00:04:11,579 --> 00:04:17,430
for context we maintain a fork of the

00:04:14,880 --> 00:04:19,440
base identity plugin for various reasons

00:04:17,430 --> 00:04:21,090
you can it's open source you can go and

00:04:19,440 --> 00:04:23,789
look at our commits we try to have very

00:04:21,090 --> 00:04:25,919
few commits and we have our own closed

00:04:23,789 --> 00:04:27,569
source plugin

00:04:25,919 --> 00:04:30,629
intelligent program torture that in a

00:04:27,569 --> 00:04:32,580
second more importantly I feel that this

00:04:30,629 --> 00:04:35,250
talk applies in general - static

00:04:32,580 --> 00:04:36,870
languages because when you have the the

00:04:35,250 --> 00:04:38,729
code analysis you can extract all of

00:04:36,870 --> 00:04:40,560
tools and help your developers with all

00:04:38,729 --> 00:04:43,139
of these concerns and of course this

00:04:40,560 --> 00:04:46,889
isn't also only relevant to IntelliJ

00:04:43,139 --> 00:04:49,050
Eclipse vs code you know we we chose

00:04:46,889 --> 00:04:52,439
IntelliJ because that's where developers

00:04:49,050 --> 00:04:56,569
live out of 300 I would guess around 290

00:04:52,439 --> 00:04:58,680
use IntelliJ so that was a no-brainer

00:04:56,569 --> 00:05:00,210
ok so in the beginning I made two bold

00:04:58,680 --> 00:05:02,879
claims one is that the current situation

00:05:00,210 --> 00:05:08,099
is bad so yesterday literally coded in

00:05:02,879 --> 00:05:10,409
the red I will go here because I can see

00:05:08,099 --> 00:05:12,300
my see the slides so moving faster on

00:05:10,409 --> 00:05:15,000
takes hours so we really try to avoid it

00:05:12,300 --> 00:05:16,710
and oh my god they just spent a third of

00:05:15,000 --> 00:05:19,229
my time on this feature adding

00:05:16,710 --> 00:05:21,479
dependencies and I also said that we can

00:05:19,229 --> 00:05:23,759
greatly improve on it kudos on auto sync

00:05:21,479 --> 00:05:24,569
things are much snappier now these are

00:05:23,759 --> 00:05:27,330
real life

00:05:24,569 --> 00:05:29,039
slack quotes from people either DMS or

00:05:27,330 --> 00:05:32,190
in our support channels I love that

00:05:29,039 --> 00:05:34,229
fixer and I'm in love finally I can code

00:05:32,190 --> 00:05:37,409
without worrying about build files so I

00:05:34,229 --> 00:05:40,289
will show of course you know both the

00:05:37,409 --> 00:05:43,050
pains and and the tools that people

00:05:40,289 --> 00:05:47,669
loved yes thank you very much

00:05:43,050 --> 00:05:49,589
so let's get down to demo time so let's

00:05:47,669 --> 00:05:54,509
start with let me go into presentation

00:05:49,589 --> 00:05:56,960
mode and let's talk about six okay so

00:05:54,509 --> 00:05:59,610
what before I explain what is a base of

00:05:56,960 --> 00:06:01,319
intelligence Inc so basically it's the

00:05:59,610 --> 00:06:03,689
process where the basal integer plug-in

00:06:01,319 --> 00:06:05,819
runs based on reads all kinds of

00:06:03,689 --> 00:06:08,009
metadata out of it and configures

00:06:05,819 --> 00:06:09,870
intellij what does it configure many

00:06:08,009 --> 00:06:11,580
things one example is the external

00:06:09,870 --> 00:06:13,289
libraries that you might need like you

00:06:11,580 --> 00:06:15,089
know j-unit handcrafts and so on and

00:06:13,289 --> 00:06:18,000
other source routes like for example

00:06:15,089 --> 00:06:21,360
where you add source files so this is

00:06:18,000 --> 00:06:23,580
really really small in short example if

00:06:21,360 --> 00:06:25,860
you want to know more about sinks please

00:06:23,580 --> 00:06:29,879
read jeans blog post about that it's

00:06:25,860 --> 00:06:32,400
awesome but what so what's the problem

00:06:29,879 --> 00:06:34,500
about 6 first is when you run a sink

00:06:32,400 --> 00:06:36,270
then you have basil build and you have

00:06:34,500 --> 00:06:38,009
intelligent exceed this means that

00:06:36,270 --> 00:06:39,210
you're not coding your developers are

00:06:38,009 --> 00:06:42,300
waiting for the base of

00:06:39,210 --> 00:06:44,460
to finish and they can't bring value so

00:06:42,300 --> 00:06:46,710
now maybe this isn't a problem right

00:06:44,460 --> 00:06:48,630
maybe this doesn't happen a lot so let's

00:06:46,710 --> 00:06:51,180
take a look at when we need to run syncs

00:06:48,630 --> 00:06:53,880
and see that actually it's very frequent

00:06:51,180 --> 00:06:56,729
to frequent so first when you want to

00:06:53,880 --> 00:06:58,650
add a new dependency that's unused so I

00:06:56,729 --> 00:07:00,150
set up for J I want to use a set of for

00:06:58,650 --> 00:07:02,789
J because someone told me hey you have

00:07:00,150 --> 00:07:05,340
to use a virgin and in the demo sorry

00:07:02,789 --> 00:07:07,169
okay but this isn't resolved right the

00:07:05,340 --> 00:07:09,150
Taoiseach doesn't know about it so you

00:07:07,169 --> 00:07:11,580
might tell me hey you need to add it in

00:07:09,150 --> 00:07:15,090
the build file but that doesn't help

00:07:11,580 --> 00:07:16,860
anything right as we can see so what do

00:07:15,090 --> 00:07:19,620
we need to do we actually need to run

00:07:16,860 --> 00:07:21,780
sink in the sink like I told you it will

00:07:19,620 --> 00:07:23,970
run basil to find out oh it actually has

00:07:21,780 --> 00:07:27,599
this sort of 4j and let's well configure

00:07:23,970 --> 00:07:31,080
it right here uh-huh

00:07:27,599 --> 00:07:33,330
Thank You IntelliJ pages yes it's

00:07:31,080 --> 00:07:34,680
asynchronous so things you know

00:07:33,330 --> 00:07:37,800
sometimes we need to run things twice

00:07:34,680 --> 00:07:40,080
but you see and it was added here and we

00:07:37,800 --> 00:07:42,620
see it out here so one whenever you need

00:07:40,080 --> 00:07:45,240
to add external dependency that isn't

00:07:42,620 --> 00:07:48,300
already known in an intelligence cope

00:07:45,240 --> 00:07:52,979
you need to run sync one number two

00:07:48,300 --> 00:07:57,800
let's try to add a test so I need to add

00:07:52,979 --> 00:08:03,990
food test and I'm like here at test

00:07:57,800 --> 00:08:07,139
public void test foo and I want to run

00:08:03,990 --> 00:08:10,949
it but no I don't want a breakpoint

00:08:07,139 --> 00:08:11,639
but I can't run it why because I need to

00:08:10,949 --> 00:08:15,620
think

00:08:11,639 --> 00:08:18,090
so that IntelliJ basil will know that

00:08:15,620 --> 00:08:18,659
this is actually a test and so on and so

00:08:18,090 --> 00:08:21,150
on and so on

00:08:18,659 --> 00:08:24,780
so okay so this is one case of addict

00:08:21,150 --> 00:08:25,949
test what about renaming tests so my

00:08:24,780 --> 00:08:27,919
colleague she gave me a code reviewed

00:08:25,949 --> 00:08:31,259
she told me hey this isn't some test

00:08:27,919 --> 00:08:35,219
this is some other test I'm like okay

00:08:31,259 --> 00:08:37,620
okay you're right you're right and but

00:08:35,219 --> 00:08:39,719
now I want to go and run it but I can't

00:08:37,620 --> 00:08:41,839
because renaming also requires six

00:08:39,719 --> 00:08:45,270
okay so adding stone dependencies and

00:08:41,839 --> 00:08:47,430
addict tests and renaming files

00:08:45,270 --> 00:08:50,010
require sync now there are also other

00:08:47,430 --> 00:08:51,930
kinds of flows where you want to run

00:08:50,010 --> 00:08:52,770
saying this unfortunately is not an

00:08:51,930 --> 00:08:54,330
exhaustive

00:08:52,770 --> 00:08:57,150
but this is just like the the main

00:08:54,330 --> 00:08:59,940
kickers so what did we do about that can

00:08:57,150 --> 00:09:03,090
we improve so I want to show you a

00:08:59,940 --> 00:09:04,860
feature called Auto sinks you see here

00:09:03,090 --> 00:09:08,130
enable automatic sink for newly added

00:09:04,860 --> 00:09:09,210
files it's expressed mental so first and

00:09:08,130 --> 00:09:12,930
foremost I want to give a shout out to

00:09:09,210 --> 00:09:15,540
Brendan IntelliJ basil tech lead team

00:09:12,930 --> 00:09:17,430
lead because we're taking work heated

00:09:15,540 --> 00:09:20,760
and we're building on top of that he did

00:09:17,430 --> 00:09:22,290
for built basil we actually change to

00:09:20,760 --> 00:09:25,410
work for Java and Scala because that's

00:09:22,290 --> 00:09:27,990
what we care and let's take a look at

00:09:25,410 --> 00:09:30,000
what it does and then I'll explain maybe

00:09:27,990 --> 00:09:36,240
how it does it so let's take a look at

00:09:30,000 --> 00:09:42,570
bar test and I want to add public void

00:09:36,240 --> 00:09:44,700
test bar and let's run it and it's

00:09:42,570 --> 00:09:45,690
running without sinking and we thought

00:09:44,700 --> 00:09:49,080
me needed to wait

00:09:45,690 --> 00:09:53,070
let's see it actually passes yes

00:09:49,080 --> 00:09:55,770
it passed okay magical how because once

00:09:53,070 --> 00:09:58,470
we added a fine we triggered sync at the

00:09:55,770 --> 00:10:02,460
background let's try to rename it and

00:09:58,470 --> 00:10:03,540
see if this also works that's like my

00:10:02,460 --> 00:10:05,250
colleague you know the one with the

00:10:03,540 --> 00:10:09,210
confirm for so she also told me this is

00:10:05,250 --> 00:10:11,010
bad this says hey by Baz and you see

00:10:09,210 --> 00:10:12,390
that actually if you key you see that

00:10:11,010 --> 00:10:14,640
it's actually running sync here in the

00:10:12,390 --> 00:10:17,760
background and I need to entertain you

00:10:14,640 --> 00:10:22,500
and now it's synced so renaming also

00:10:17,760 --> 00:10:24,060
works so so I didn't show by the way

00:10:22,500 --> 00:10:25,980
about the external dependencies I will

00:10:24,060 --> 00:10:28,020
show that in just like a few a few

00:10:25,980 --> 00:10:30,570
minutes and the next thing but adding

00:10:28,020 --> 00:10:32,340
tests renaming tests and this of course

00:10:30,570 --> 00:10:35,430
applicable to all files but this is like

00:10:32,340 --> 00:10:37,620
where it's lives the most another

00:10:35,430 --> 00:10:40,080
problem with sync is that it takes too

00:10:37,620 --> 00:10:44,160
long now this is a toy example and so

00:10:40,080 --> 00:10:45,990
this thing's like feel snappy but but

00:10:44,160 --> 00:10:49,170
this is a real problem now we've already

00:10:45,990 --> 00:10:50,850
improved on that because I will exit

00:10:49,170 --> 00:10:52,830
presentation mode just for one second so

00:10:50,850 --> 00:10:54,570
you see it most often when you work then

00:10:52,830 --> 00:10:57,090
people just click this button right and

00:10:54,570 --> 00:10:59,340
this button is this is basis this is the

00:10:57,090 --> 00:11:01,980
sync button the sync button what it does

00:10:59,340 --> 00:11:03,690
is run incremental sync incremental sync

00:11:01,980 --> 00:11:05,040
ones all of the code that your you're

00:11:03,690 --> 00:11:08,430
currently working on

00:11:05,040 --> 00:11:09,930
be broken it might be like thrashing and

00:11:08,430 --> 00:11:12,120
so on and so on and run think on that

00:11:09,930 --> 00:11:14,100
what we were running with auto-sync is

00:11:12,120 --> 00:11:16,220
partial sync which is only for the

00:11:14,100 --> 00:11:19,110
specific target so it's much more

00:11:16,220 --> 00:11:20,550
fine-grain so this is one thing we also

00:11:19,110 --> 00:11:22,110
figure to automatically like Jesus saw

00:11:20,550 --> 00:11:24,930
so development seemed to think about it

00:11:22,110 --> 00:11:26,460
so really improved but this isn't good

00:11:24,930 --> 00:11:28,770
enough for us because people sometimes

00:11:26,460 --> 00:11:30,000
still need to wait a few seconds if like

00:11:28,770 --> 00:11:32,790
it's larger targets it could be like

00:11:30,000 --> 00:11:37,820
even 10 seconds so what we're thinking

00:11:32,790 --> 00:11:40,380
of doing is using in in memory syncs

00:11:37,820 --> 00:11:42,870
basically a lot of lot of times you can

00:11:40,380 --> 00:11:44,820
find your wrist exsist esthe is right

00:11:42,870 --> 00:11:48,270
it's exactly like the other test you can

00:11:44,820 --> 00:11:50,010
just add it to in memory and for more

00:11:48,270 --> 00:11:53,130
you sticks than what we're considering

00:11:50,010 --> 00:11:57,270
on doing is offloading to remote servers

00:11:53,130 --> 00:11:59,910
so basically if remote servers I'll

00:11:57,270 --> 00:12:01,470
switch on for the next demo if remote

00:11:59,910 --> 00:12:05,940
servers will do all of the heavy lifting

00:12:01,470 --> 00:12:07,380
then you know developer machines won't

00:12:05,940 --> 00:12:08,730
need to wait that long and if you do it

00:12:07,380 --> 00:12:10,560
preemptively and so on and so on but

00:12:08,730 --> 00:12:12,180
this so both of these are a bit hard to

00:12:10,560 --> 00:12:14,790
do without collaboration from the base

00:12:12,180 --> 00:12:17,790
and IntelliJ team and like we talked in

00:12:14,790 --> 00:12:19,950
both birds of a feather the capacity is

00:12:17,790 --> 00:12:21,780
limited so we need to see what what

00:12:19,950 --> 00:12:25,140
we're going to do about it let's talk

00:12:21,780 --> 00:12:27,960
about adding dependencies so when you

00:12:25,140 --> 00:12:32,220
write code alright you need to use like

00:12:27,960 --> 00:12:35,370
unless anyone here is like in a god file

00:12:32,220 --> 00:12:36,930
then I'm guessing you have imports that

00:12:35,370 --> 00:12:38,280
you add and if you're using base and

00:12:36,930 --> 00:12:40,410
then it's probably fine grained so when

00:12:38,280 --> 00:12:42,060
you add dependency you often need to add

00:12:40,410 --> 00:12:43,950
the Pennsy in the build file so what do

00:12:42,060 --> 00:12:46,710
you do then right so let's take a look

00:12:43,950 --> 00:12:50,250
an example like my colleague he told me

00:12:46,710 --> 00:12:54,380
hey use this new trivial utility oh wait

00:12:50,250 --> 00:12:58,620
I will do it right after sync refreshes

00:12:54,380 --> 00:13:01,590
yes okay okay now we're good and I like

00:12:58,620 --> 00:13:03,030
okay I will add it the compiles it looks

00:13:01,590 --> 00:13:04,620
good right and I'll just run the test

00:13:03,030 --> 00:13:08,010
see that we're good

00:13:04,620 --> 00:13:09,840
oh but it didn't actually compile even

00:13:08,010 --> 00:13:12,480
unlike here what's here the package

00:13:09,840 --> 00:13:15,540
doesn't exist and like okay the base of

00:13:12,480 --> 00:13:17,340
training someone told me that that there

00:13:15,540 --> 00:13:18,160
is like a simple so for that right

00:13:17,340 --> 00:13:20,230
when

00:13:18,160 --> 00:13:23,050
this happens you just take the package

00:13:20,230 --> 00:13:25,180
you know we're like we're like Google so

00:13:23,050 --> 00:13:29,980
just do slash slash Java or it's not

00:13:25,180 --> 00:13:32,769
just basic or in our case and just sorry

00:13:29,980 --> 00:13:34,899
just replace the dots with the slashes

00:13:32,769 --> 00:13:36,250
and it should be good like what's what's

00:13:34,899 --> 00:13:36,939
the problem this isn't really like a

00:13:36,250 --> 00:13:39,189
real problem

00:13:36,939 --> 00:13:40,360
adding dependencies is a breeze let's

00:13:39,189 --> 00:13:41,620
run the test and see if this actually

00:13:40,360 --> 00:13:44,139
solves the problem

00:13:41,620 --> 00:13:45,879
awesome it's off the problem so maybe

00:13:44,139 --> 00:13:47,889
I'm wrong maybe I think dependencies

00:13:45,879 --> 00:13:50,230
isn't is it a big deal

00:13:47,889 --> 00:13:52,629
so actually you know first of all I

00:13:50,230 --> 00:13:54,790
don't think this is good enough but we

00:13:52,629 --> 00:13:56,769
came from even so when you might be

00:13:54,790 --> 00:13:59,889
coming from Gradle SBT or whatever so

00:13:56,769 --> 00:14:04,029
your layout might not be liked by Google

00:13:59,889 --> 00:14:06,279
so I try to add this this module layout

00:14:04,029 --> 00:14:08,529
and it's failures like again and you

00:14:06,279 --> 00:14:13,139
know just for kicks and giggles let's

00:14:08,529 --> 00:14:21,810
try to use the naive approach and this

00:14:13,139 --> 00:14:25,750
is basic on and and yeah and selection

00:14:21,810 --> 00:14:28,569
again dot part you the first shortcut

00:14:25,750 --> 00:14:31,000
for keyboard itself for in selection and

00:14:28,569 --> 00:14:32,529
let's run it and this actually phase for

00:14:31,000 --> 00:14:34,060
a different reason no such package so we

00:14:32,529 --> 00:14:36,130
don't have a build file there okay so

00:14:34,060 --> 00:14:39,130
that approach doesn't work what do you

00:14:36,130 --> 00:14:40,660
do at this case usually go to github or

00:14:39,130 --> 00:14:42,759
code search or something I like to try

00:14:40,660 --> 00:14:45,250
to find module a or Java and then see

00:14:42,759 --> 00:14:46,930
what target this belongs to right so

00:14:45,250 --> 00:14:48,370
last night I implement at the code

00:14:46,930 --> 00:14:51,699
search just for this demo

00:14:48,370 --> 00:14:55,389
it's called tree I hope I hope you like

00:14:51,699 --> 00:14:57,819
it yeah and you know I'm searching I'm

00:14:55,389 --> 00:15:00,250
searching interesting and okay okay I

00:14:57,819 --> 00:15:03,880
found it awesome so what do I do now I'm

00:15:00,250 --> 00:15:08,649
a copy it yeah this is what real

00:15:03,880 --> 00:15:14,860
developers do and yeah one sec one sec

00:15:08,649 --> 00:15:18,660
so were you here and let's try yeah it

00:15:14,860 --> 00:15:20,709
will happen don't worry oh yeah I

00:15:18,660 --> 00:15:22,439
actually thinking of joining the circus

00:15:20,709 --> 00:15:27,280
later

00:15:22,439 --> 00:15:29,950
yep and the last one failed me okay

00:15:27,280 --> 00:15:35,650
okay and let's run this what do you

00:15:29,950 --> 00:15:37,540
think awesome also past good good good

00:15:35,650 --> 00:15:38,830
but you know you like you might tell me

00:15:37,540 --> 00:15:40,570
okay but this is your problem because

00:15:38,830 --> 00:15:42,370
you're not willing to really commit to

00:15:40,570 --> 00:15:44,890
basil and like change all of them your

00:15:42,370 --> 00:15:47,770
code layout so like we did this and like

00:15:44,890 --> 00:15:50,710
okay but what if you have code that's

00:15:47,770 --> 00:15:53,980
part of a cycle no part is not what I

00:15:50,710 --> 00:15:55,990
wanted part of a cycle and what if you

00:15:53,980 --> 00:15:58,870
have code just just belongs to a

00:15:55,990 --> 00:16:01,270
fine-grain target now what does this

00:15:58,870 --> 00:16:03,010
mean let's take a look in the in the

00:16:01,270 --> 00:16:05,380
code search but just note that

00:16:03,010 --> 00:16:08,380
fine-grain a belongs to fine-grain and

00:16:05,380 --> 00:16:10,780
part of cycle belongs to cycle a so

00:16:08,380 --> 00:16:13,810
we're going again here and we can

00:16:10,780 --> 00:16:15,870
actually see that part of cycle is in

00:16:13,810 --> 00:16:18,730
package a but the build file is on top

00:16:15,870 --> 00:16:21,310
okay it's not there and fine-grain we

00:16:18,730 --> 00:16:22,440
have a bit basil with two files so let's

00:16:21,310 --> 00:16:24,790
cut this

00:16:22,440 --> 00:16:26,740
let's cut fine-grain and you see we have

00:16:24,790 --> 00:16:28,210
two targets so what does this mean this

00:16:26,740 --> 00:16:29,440
means we can't use the naive approach of

00:16:28,210 --> 00:16:30,760
just using the package name and

00:16:29,440 --> 00:16:33,490
sometimes you want to have fine grain

00:16:30,760 --> 00:16:35,740
targets and if you have a cycle this

00:16:33,490 --> 00:16:38,170
means you see like this globs a and then

00:16:35,740 --> 00:16:39,820
globs b so you can't use a naive

00:16:38,170 --> 00:16:44,200
approach even if you have like a

00:16:39,820 --> 00:16:46,600
google-like layout okay so so i've shown

00:16:44,200 --> 00:16:50,110
you the problems what can we do about

00:16:46,600 --> 00:16:54,160
that so what we did is we built a tool

00:16:50,110 --> 00:16:55,960
called depth fixer and granted like many

00:16:54,160 --> 00:16:57,670
like I don't mainly like but some kind

00:16:55,960 --> 00:17:00,370
of companies have done this Google for

00:16:57,670 --> 00:17:02,860
sure my inspiration came from Twitter so

00:17:00,370 --> 00:17:06,069
thank you from from Basel can't actually

00:17:02,860 --> 00:17:09,550
talk at lunch with with Twitter guys a

00:17:06,069 --> 00:17:11,680
lot of parents and what what what what

00:17:09,550 --> 00:17:13,630
the fixture does will let that you know

00:17:11,680 --> 00:17:15,430
fixed you see it's running it would

00:17:13,630 --> 00:17:16,540
trigger sink in a sec and then we'll

00:17:15,430 --> 00:17:18,130
take a look at the build file and then

00:17:16,540 --> 00:17:20,199
I'll show you like a small flow diagram

00:17:18,130 --> 00:17:23,230
really simplistic one so you see it's

00:17:20,199 --> 00:17:25,180
it's it's done and it's syncing and

00:17:23,230 --> 00:17:28,540
everything works and you can see that

00:17:25,180 --> 00:17:30,190
all of the dependencies right in place

00:17:28,540 --> 00:17:33,340
so it did it for us

00:17:30,190 --> 00:17:36,400
right so how does the fixer work really

00:17:33,340 --> 00:17:39,230
simplistically let's take a look to

00:17:36,400 --> 00:17:40,760
trace the grunge basil if it passed da

00:17:39,230 --> 00:17:43,280
done if it doesn't it scrapes the

00:17:40,760 --> 00:17:45,620
compiler outfit for fq ends for the

00:17:43,280 --> 00:17:48,169
qualified names looks ups in various

00:17:45,620 --> 00:17:50,000
indexes global one that we have and I

00:17:48,169 --> 00:17:52,510
might touch on it and might not are

00:17:50,000 --> 00:17:55,880
called in the labor decks and local

00:17:52,510 --> 00:17:57,500
indexes finds the labels and adds it to

00:17:55,880 --> 00:17:59,299
the build file which ones Mazur again

00:17:57,500 --> 00:18:03,740
did I feel very complete

00:17:59,299 --> 00:18:05,690
if so yes let's just be done if not I

00:18:03,740 --> 00:18:08,179
try again it has all kinds of heuristics

00:18:05,690 --> 00:18:10,970
both for scraping and for priorities and

00:18:08,179 --> 00:18:15,830
for indexes we have a lot of edge cases

00:18:10,970 --> 00:18:17,179
that that we handle and definitely by

00:18:15,830 --> 00:18:19,280
the way is a CLI tool but we just

00:18:17,179 --> 00:18:20,750
integrated into IntelliJ so that you can

00:18:19,280 --> 00:18:22,730
write from every file and every

00:18:20,750 --> 00:18:26,720
directory so run the fixer also from

00:18:22,730 --> 00:18:29,600
here so so this is good right this isn't

00:18:26,720 --> 00:18:32,570
bad at least but you saw it's not that

00:18:29,600 --> 00:18:34,220
quick and also I did like I wound it up

00:18:32,570 --> 00:18:36,650
index as wise before I know it's a small

00:18:34,220 --> 00:18:40,070
package is so on so on so is this

00:18:36,650 --> 00:18:41,840
similar to what you want I say no like

00:18:40,070 --> 00:18:44,570
when like I have a lot of bad things to

00:18:41,840 --> 00:18:46,820
say about my event but but at least this

00:18:44,570 --> 00:18:48,919
was much much better so I want to see

00:18:46,820 --> 00:18:51,640
miss experience let's see if we can do

00:18:48,919 --> 00:18:54,140
this so let's turn on another feature

00:18:51,640 --> 00:18:57,380
it's going to be the default like a few

00:18:54,140 --> 00:18:58,700
weeks inside of Wix called Auto dip and

00:18:57,380 --> 00:19:00,530
auto that automatically adds

00:18:58,700 --> 00:19:02,630
dependencies in the background now for

00:19:00,530 --> 00:19:04,809
someone who asked me about build file

00:19:02,630 --> 00:19:06,980
generation this is somewhat related

00:19:04,809 --> 00:19:08,990
let's take a look first about the build

00:19:06,980 --> 00:19:11,780
file just so we see I'm not cheating no

00:19:08,990 --> 00:19:14,120
dependencies right only j-unit so now

00:19:11,780 --> 00:19:16,700
this doesn't compile right now and let's

00:19:14,120 --> 00:19:20,299
add part of cycle and let's add

00:19:16,700 --> 00:19:24,200
fine-grain let's add trivial and let's

00:19:20,299 --> 00:19:26,090
add module layout and let's run this

00:19:24,200 --> 00:19:28,429
test oh I don't think actually run the

00:19:26,090 --> 00:19:30,290
correct test so let's finish it this is

00:19:28,429 --> 00:19:34,940
the previous one wait wait wait I'm

00:19:30,290 --> 00:19:37,100
sorry yeah let's run this test and you

00:19:34,940 --> 00:19:38,480
see I didn't run that fixer and its best

00:19:37,100 --> 00:19:40,400
how can that be

00:19:38,480 --> 00:19:43,100
let's take a look at the build file here

00:19:40,400 --> 00:19:45,020
and we see that while I was coding while

00:19:43,100 --> 00:19:47,750
I was typing the dependencies were added

00:19:45,020 --> 00:19:50,990
so basically this also diffuses like an

00:19:47,750 --> 00:19:52,559
IntelliJ listener where it gets a hook

00:19:50,990 --> 00:19:54,779
that an import was added

00:19:52,559 --> 00:19:56,399
and then it uses logic very similar to

00:19:54,779 --> 00:19:58,320
that fixer to take the photo qualified

00:19:56,399 --> 00:20:00,029
name lookup and indexes and add to the

00:19:58,320 --> 00:20:04,460
dependency but this has the great

00:20:00,029 --> 00:20:07,679
advantage of not needing to wait ok so

00:20:04,460 --> 00:20:10,590
so we saw you know we automated it and

00:20:07,679 --> 00:20:12,509
then we made it much more seamless but

00:20:10,590 --> 00:20:14,519
if you are you know like really keen

00:20:12,509 --> 00:20:16,200
that maybe you notice that I cheated a

00:20:14,519 --> 00:20:18,960
bit because up until now I only showed

00:20:16,200 --> 00:20:21,419
you code that resolved in IntelliJ but

00:20:18,960 --> 00:20:24,149
we didn't exist in the build files right

00:20:21,419 --> 00:20:25,590
so now what happens if your colleague

00:20:24,149 --> 00:20:27,690
sends you hey that's handy until you

00:20:25,590 --> 00:20:29,789
have to use it you like adding it in it

00:20:27,690 --> 00:20:31,230
then what happens here what I do from

00:20:29,789 --> 00:20:35,249
here oh I got to get up again

00:20:31,230 --> 00:20:39,240
so no use smart autocomplete a smart

00:20:35,249 --> 00:20:43,350
autocomplete boom just as a dependency

00:20:39,240 --> 00:20:44,970
runs the sync and in like a second or

00:20:43,350 --> 00:20:47,789
two we will be able to just use it you

00:20:44,970 --> 00:20:52,080
see fixed fixed it fix the build file it

00:20:47,789 --> 00:20:55,460
added here I'm sorry for this mess but

00:20:52,080 --> 00:21:03,269
you see here it added handy util and

00:20:55,460 --> 00:21:06,600
let's see yes so there are unfortunately

00:21:03,269 --> 00:21:08,309
still flakes with respect this oh yes so

00:21:06,600 --> 00:21:10,200
when developerworks and they're not

00:21:08,309 --> 00:21:11,759
trying to demo then they are willing to

00:21:10,200 --> 00:21:13,379
wait the extra second for vela beautil

00:21:11,759 --> 00:21:16,860
but you see we have label util and we

00:21:13,379 --> 00:21:19,289
can alt enter down so this is also for

00:21:16,860 --> 00:21:21,149
smart autocomplete so this like that

00:21:19,289 --> 00:21:23,009
fixer and like auto that uses a global

00:21:21,149 --> 00:21:25,980
indexing server to get all of wix's code

00:21:23,009 --> 00:21:28,200
basically at the tips of the developer

00:21:25,980 --> 00:21:30,240
ok now I just want to show you one more

00:21:28,200 --> 00:21:32,159
example before you continue so what

00:21:30,240 --> 00:21:33,960
happens if you try to use some handy

00:21:32,159 --> 00:21:36,029
hotel was just one case in all of which

00:21:33,960 --> 00:21:39,299
this code what happens if there are more

00:21:36,029 --> 00:21:41,220
examples see you get this autocomplete

00:21:39,299 --> 00:21:43,740
pop up and you can say oh I want this I

00:21:41,220 --> 00:21:46,289
want that one ok this one and then you

00:21:43,740 --> 00:21:48,119
get back the add labor that we just saw

00:21:46,289 --> 00:21:49,649
and so on and so on

00:21:48,119 --> 00:21:52,529
we'll also have a like a token based

00:21:49,649 --> 00:21:57,509
search and so on so this is a bit about

00:21:52,529 --> 00:22:00,480
these we saw sinks and we just saw

00:21:57,509 --> 00:22:03,570
adding dependencies let's talk a bit

00:22:00,480 --> 00:22:05,910
about refactoring ok everyone's favorite

00:22:03,570 --> 00:22:09,030
thing No

00:22:05,910 --> 00:22:11,160
but yeah so actually like for us at

00:22:09,030 --> 00:22:14,010
wicks we used to do a lot of a factoring

00:22:11,160 --> 00:22:16,160
we try to keep our code clean moving to

00:22:14,010 --> 00:22:19,680
Basel made it harder much harder because

00:22:16,160 --> 00:22:21,660
fine grain targets suddenly mean that

00:22:19,680 --> 00:22:23,040
whenever you move stuff around you to

00:22:21,660 --> 00:22:25,410
think about the build fires as well

00:22:23,040 --> 00:22:28,340
right it's not a trivial now let's take

00:22:25,410 --> 00:22:34,860
a look at one one example so should move

00:22:28,340 --> 00:22:36,360
Thank You basil sink thank you yeah okay

00:22:34,860 --> 00:22:38,760
I'm just impatient

00:22:36,360 --> 00:22:40,590
so should move use at that time we see

00:22:38,760 --> 00:22:43,590
that should remain use it should move

00:22:40,590 --> 00:22:45,210
now my colleague again with the code

00:22:43,590 --> 00:22:47,190
review she comes to me and tells me hey

00:22:45,210 --> 00:22:49,170
should move exit is part of the domain

00:22:47,190 --> 00:22:51,450
of one package and like you're right I

00:22:49,170 --> 00:22:53,700
didn't think about that and I'm moving

00:22:51,450 --> 00:22:54,960
it you see this updated like correctly

00:22:53,700 --> 00:22:56,850
IntelliJ wise right

00:22:54,960 --> 00:22:59,250
you see refactoring one should move and

00:22:56,850 --> 00:23:00,720
and here the package was updated like

00:22:59,250 --> 00:23:02,810
everything is good right we can we can

00:23:00,720 --> 00:23:04,980
push it like let's push to push the diff

00:23:02,810 --> 00:23:10,830
let's try to see what base of things

00:23:04,980 --> 00:23:13,320
about this and partially sync and yeah

00:23:10,830 --> 00:23:15,300
not happy because should remain doesn't

00:23:13,320 --> 00:23:16,830
know anything about one ok the better

00:23:15,300 --> 00:23:18,740
the build file and should move doesn't

00:23:16,830 --> 00:23:20,820
know anything about you all the time so

00:23:18,740 --> 00:23:23,610
let's take a look at this the build file

00:23:20,820 --> 00:23:25,320
here is empty and the well file he only

00:23:23,610 --> 00:23:26,910
knows about you at a time so what can I

00:23:25,320 --> 00:23:29,070
do about this this isn't something that

00:23:26,910 --> 00:23:31,650
we just we just have a few pocs that

00:23:29,070 --> 00:23:35,340
we've done but basically integrating the

00:23:31,650 --> 00:23:37,860
fixture and or Auto dip into IntelliJ

00:23:35,340 --> 00:23:41,610
refactoring they have hooks for this and

00:23:37,860 --> 00:23:43,320
you run it on the target and then we

00:23:41,610 --> 00:23:45,120
will run it on the source while it's

00:23:43,320 --> 00:23:47,970
running I will just see it was just work

00:23:45,120 --> 00:23:50,310
but this is of course a toy example

00:23:47,970 --> 00:23:51,600
there are a lot of caveats what happens

00:23:50,310 --> 00:23:53,850
if one and two create a cycle together

00:23:51,600 --> 00:23:56,730
what happens if the other targets that

00:23:53,850 --> 00:23:59,040
need should move should they also have a

00:23:56,730 --> 00:24:01,290
dependency on one should to export one

00:23:59,040 --> 00:24:02,670
like there are a lot of product

00:24:01,290 --> 00:24:04,800
questions here that we're going to

00:24:02,670 --> 00:24:06,000
iterate with our users in the near

00:24:04,800 --> 00:24:09,090
future

00:24:06,000 --> 00:24:10,440
but in the interest of time I'll skip

00:24:09,090 --> 00:24:12,720
this because I think you got the gist

00:24:10,440 --> 00:24:14,160
basically this use as your the time and

00:24:12,720 --> 00:24:17,730
when I'll run it on to it will add

00:24:14,160 --> 00:24:20,780
should move locally so this is how we

00:24:17,730 --> 00:24:23,900
can do refactoring in the small

00:24:20,780 --> 00:24:34,150
I want to jump to the last example I

00:24:23,900 --> 00:24:38,300
will also skip the red code yeah yeah I

00:24:34,150 --> 00:24:46,490
might have a bit more time but just for

00:24:38,300 --> 00:24:49,550
us to be sure let's not okay okay good

00:24:46,490 --> 00:24:51,230
so we took a look at sinks right we also

00:24:49,550 --> 00:24:52,820
took a look at adding dependencies and

00:24:51,230 --> 00:24:54,860
about of factoring what else do you do

00:24:52,820 --> 00:24:57,290
you add targets right because you want

00:24:54,860 --> 00:24:57,830
to have a new package so what is the

00:24:57,290 --> 00:25:00,320
problem

00:24:57,830 --> 00:25:02,720
the main problem is that sometimes the

00:25:00,320 --> 00:25:04,010
build file has machinery like oh I need

00:25:02,720 --> 00:25:05,600
to do goo law because that's the

00:25:04,010 --> 00:25:06,920
convention that we do or maybe you have

00:25:05,600 --> 00:25:09,559
tests only equals one because you

00:25:06,920 --> 00:25:10,580
needing to test a test utility this

00:25:09,559 --> 00:25:12,590
isn't something that most developers

00:25:10,580 --> 00:25:14,860
want to think about and so we did the

00:25:12,590 --> 00:25:17,690
new Wix Basel package which uses

00:25:14,860 --> 00:25:22,250
Symantec templates so we have here Scala

00:25:17,690 --> 00:25:24,559
testing util and let's just create this

00:25:22,250 --> 00:25:27,200
new package and you see it created a

00:25:24,559 --> 00:25:28,910
build file with all of the mechanics so

00:25:27,200 --> 00:25:32,570
we don't have to think about that so

00:25:28,910 --> 00:25:33,890
this is one example another example

00:25:32,570 --> 00:25:35,690
let's say you know you coded this and

00:25:33,890 --> 00:25:37,309
maybe you extracted this be like I work

00:25:35,690 --> 00:25:39,290
in TDD so I extracted this from an

00:25:37,309 --> 00:25:41,150
existing file and this doesn't have

00:25:39,290 --> 00:25:43,370
tests and I want to cover a few tests so

00:25:41,150 --> 00:25:46,250
what I do I do command shift e creating

00:25:43,370 --> 00:25:48,170
test and this works for Scala because

00:25:46,250 --> 00:25:52,460
they are specs - because that's what we

00:25:48,170 --> 00:25:57,230
do and I'm doing like okay and I have

00:25:52,460 --> 00:26:01,250
this this this upper - now it's just you

00:25:57,230 --> 00:26:02,960
know IntelliJ but maybe you noticed

00:26:01,250 --> 00:26:04,580
there is a build file here and maybe you

00:26:02,960 --> 00:26:06,920
notice you're actually sink running here

00:26:04,580 --> 00:26:10,220
and it says sinking and in just a second

00:26:06,920 --> 00:26:11,929
I'll be able to run this test without

00:26:10,220 --> 00:26:14,570
needing to think about it so I can

00:26:11,929 --> 00:26:17,000
create a new test package and iterate

00:26:14,570 --> 00:26:20,210
okay so it's again it's about finding

00:26:17,000 --> 00:26:26,030
the flows developers have and meeting it

00:26:20,210 --> 00:26:31,950
you know meeting it with tools okay so I

00:26:26,030 --> 00:26:34,230
will not be showing yeah I think I'm

00:26:31,950 --> 00:26:38,670
yeah you know I will I will show just

00:26:34,230 --> 00:26:47,700
the diagram I think so basically let's

00:26:38,670 --> 00:26:49,320
this and oh okay yeah I should have done

00:26:47,700 --> 00:26:53,010
something different but it's okay

00:26:49,320 --> 00:26:54,240
red Colette code yeah okay so I don't

00:26:53,010 --> 00:26:55,950
know how many of you have noticed this

00:26:54,240 --> 00:26:58,290
if you're a scholar you definitely saw

00:26:55,950 --> 00:27:00,510
this where suddenly your code becomes

00:26:58,290 --> 00:27:02,760
red in like oh my god what happened I

00:27:00,510 --> 00:27:06,720
need to spend two hours like appeasing

00:27:02,760 --> 00:27:09,000
intelligent basil we solve this and like

00:27:06,720 --> 00:27:12,000
a workaround and we have thoughts about

00:27:09,000 --> 00:27:13,530
how to solve it like more generically if

00:27:12,000 --> 00:27:16,170
you're interested come talk to us later

00:27:13,530 --> 00:27:17,730
the general the general thing you can

00:27:16,170 --> 00:27:20,820
take away and you should take away is

00:27:17,730 --> 00:27:23,490
that trivial things might not work for

00:27:20,820 --> 00:27:25,500
developer experience so this was one for

00:27:23,490 --> 00:27:27,330
us a second thing that sources just

00:27:25,500 --> 00:27:28,320
viewing sources of external dependencies

00:27:27,330 --> 00:27:30,720
didn't work

00:27:28,320 --> 00:27:33,690
many many use cases okay we needed to

00:27:30,720 --> 00:27:36,690
spend many hours debugging this and

00:27:33,690 --> 00:27:38,700
adding support in our plugin just so we

00:27:36,690 --> 00:27:41,310
get sources you know this is like sounds

00:27:38,700 --> 00:27:43,560
basic were like what are we 20 I don't

00:27:41,310 --> 00:27:46,230
know twenty ten just getting sources in

00:27:43,560 --> 00:27:47,880
this didn't work and it spent like it

00:27:46,230 --> 00:27:49,770
wasted a lot of time for weeks

00:27:47,880 --> 00:27:52,020
developers so take into account if

00:27:49,770 --> 00:27:54,030
you're you know on groovy or cotton or

00:27:52,020 --> 00:27:57,890
whatever things which are trivial might

00:27:54,030 --> 00:27:57,890
not work can we go back to the slides

00:27:58,130 --> 00:28:02,940
awesome so let's talk about build file

00:28:00,990 --> 00:28:04,680
hygiene and this might sound like a huge

00:28:02,940 --> 00:28:06,390
context which like what we're talking

00:28:04,680 --> 00:28:09,150
about code and developer experience what

00:28:06,390 --> 00:28:11,490
what do you want with bill hygiene so

00:28:09,150 --> 00:28:13,860
I'll get to that in a sec but let's talk

00:28:11,490 --> 00:28:17,640
about what Bill fight hygiene is bill

00:28:13,860 --> 00:28:21,320
fight hygiene is we want to keep build

00:28:17,640 --> 00:28:26,670
files maintainable clean up to date and

00:28:21,320 --> 00:28:29,160
and reasonably clear why so many because

00:28:26,670 --> 00:28:31,770
when this happens when when the garbage

00:28:29,160 --> 00:28:33,870
fires up the bill becomes slow it

00:28:31,770 --> 00:28:36,120
becomes slow because you have a lot of

00:28:33,870 --> 00:28:37,290
cache cache misses because you have a

00:28:36,120 --> 00:28:39,510
lot of dependencies that you don't

00:28:37,290 --> 00:28:41,370
actually need but they still give you

00:28:39,510 --> 00:28:42,870
cache misses it becomes no because

00:28:41,370 --> 00:28:45,809
you're less parallel because your place

00:28:42,870 --> 00:28:49,739
in the graph is now much much lower not

00:28:45,809 --> 00:28:51,299
and velocity also drops because if you

00:28:49,739 --> 00:28:53,850
don't use if you don't explicitly

00:28:51,299 --> 00:28:57,029
declare dependencies aka strict dibs

00:28:53,850 --> 00:28:59,249
then people have a hard time refactoring

00:28:57,029 --> 00:29:01,350
if someone drops a dependency suddenly

00:28:59,249 --> 00:29:04,169
downstream can be broken because they

00:29:01,350 --> 00:29:05,850
dependent on them being bringing it I

00:29:04,169 --> 00:29:08,970
can't tell you how many times in maven

00:29:05,850 --> 00:29:11,279
that we had like you know storms NCI

00:29:08,970 --> 00:29:12,929
because people said hey framework why

00:29:11,279 --> 00:29:14,609
did you drop a Selfridge a from this

00:29:12,929 --> 00:29:17,100
module I was counting on to bring it

00:29:14,609 --> 00:29:19,139
like no this isn't part of IEP I this

00:29:17,100 --> 00:29:22,109
doesn't relate to us at all you are just

00:29:19,139 --> 00:29:23,700
counting on us so when bill fine hygiene

00:29:22,109 --> 00:29:26,879
goes to the dump

00:29:23,700 --> 00:29:28,950
you get slow now how does this relate to

00:29:26,879 --> 00:29:30,450
local dev it rates the local level

00:29:28,950 --> 00:29:33,570
because when you're proactive about it

00:29:30,450 --> 00:29:35,609
and you want to stop garbage being piled

00:29:33,570 --> 00:29:37,979
up then you're hurting velocity right

00:29:35,609 --> 00:29:39,570
because the verb she's coding and you're

00:29:37,979 --> 00:29:41,460
blocking right you're failing the build

00:29:39,570 --> 00:29:44,399
with strict depth unused app and so on

00:29:41,460 --> 00:29:46,889
and so on and she's like what the hell

00:29:44,399 --> 00:29:48,599
like this I'm coding I'm trying to get

00:29:46,889 --> 00:29:50,309
my business feature out and you're not

00:29:48,599 --> 00:29:54,179
talking to me about build files this

00:29:50,309 --> 00:29:55,609
isn't the same cognitive state so what

00:29:54,179 --> 00:29:58,470
can we do about that

00:29:55,609 --> 00:30:00,210
so let LA so let's talk about unused

00:29:58,470 --> 00:30:02,999
apps and strict apps this is pretty

00:30:00,210 --> 00:30:05,070
common basic concept right like informal

00:30:02,999 --> 00:30:06,809
basic concept so unused apps is about

00:30:05,070 --> 00:30:08,879
removing the penalties you don't use

00:30:06,809 --> 00:30:10,710
compile time and strict apps is about

00:30:08,879 --> 00:30:14,340
explicitly declaring all dependencies

00:30:10,710 --> 00:30:19,019
that you use mainly you know a lot of

00:30:14,340 --> 00:30:22,259
rules No yeah okay a lot of rules just

00:30:19,019 --> 00:30:25,889
have failures you know war modes this

00:30:22,259 --> 00:30:28,229
hurts fluency causes you know manual

00:30:25,889 --> 00:30:30,749
labor because I need to go to the log

00:30:28,229 --> 00:30:32,639
copy the billdozer at there you know

00:30:30,749 --> 00:30:34,859
like monkey work and maybe I do it like

00:30:32,639 --> 00:30:37,409
automatically and I basil and you know

00:30:34,859 --> 00:30:38,700
it this isn't like so super fluent most

00:30:37,409 --> 00:30:40,769
people for us sorry

00:30:38,700 --> 00:30:42,509
first a lot of time people used to go to

00:30:40,769 --> 00:30:46,559
the log search for it and so on so on

00:30:42,509 --> 00:30:49,529
this was a bad experience our answers

00:30:46,559 --> 00:30:52,379
for adepts is mainly auto tip if people

00:30:49,529 --> 00:30:54,359
use if you've use auto tip while they're

00:30:52,379 --> 00:30:57,810
coding you just get the defense's that

00:30:54,359 --> 00:31:00,660
they need right so a strict dips are is

00:30:57,810 --> 00:31:02,100
very very unlikely for onion steps and I

00:31:00,660 --> 00:31:04,590
have to say that this is a hardware

00:31:02,100 --> 00:31:06,600
harder problem because this has to

00:31:04,590 --> 00:31:08,610
relate to all of the files of a target

00:31:06,600 --> 00:31:10,440
and you have to find out that all of the

00:31:08,610 --> 00:31:12,600
files don't need the specific dependency

00:31:10,440 --> 00:31:15,150
to say that it's unused it's unclear

00:31:12,600 --> 00:31:18,210
that we can actually do this on the fly

00:31:15,150 --> 00:31:19,770
you know while someone is coding but for

00:31:18,210 --> 00:31:21,420
sure we what we can do is we can do it

00:31:19,770 --> 00:31:22,410
on demand so this is what we're going to

00:31:21,420 --> 00:31:24,870
implement like in the next few weeks

00:31:22,410 --> 00:31:26,790
just on demand before you push Cherie

00:31:24,870 --> 00:31:28,590
for your own test you can say show me

00:31:26,790 --> 00:31:32,400
like remove unused EPS and we'll just

00:31:28,590 --> 00:31:34,260
remove that so this isn't fluent but

00:31:32,400 --> 00:31:37,230
this is workable at least thinking about

00:31:34,260 --> 00:31:38,820
how to make it fluent what I mentioned

00:31:37,230 --> 00:31:40,650
is using intelligent mechanisms the

00:31:38,820 --> 00:31:42,690
advantage here is that even if your rule

00:31:40,650 --> 00:31:45,300
sets don't emit custom error messages

00:31:42,690 --> 00:31:49,020
like billdozer then you can use this

00:31:45,300 --> 00:31:51,420
mechanism at least for us in Scala we do

00:31:49,020 --> 00:31:52,770
omit them but Wix doesn't use these

00:31:51,420 --> 00:31:56,400
because they have too many false

00:31:52,770 --> 00:31:58,650
positives and false negatives and so we

00:31:56,400 --> 00:32:00,720
just opted out of that out of that and

00:31:58,650 --> 00:32:01,170
so Netaji mechanism works really well

00:32:00,720 --> 00:32:04,080
for us

00:32:01,170 --> 00:32:05,790
even if you do use the error messages

00:32:04,080 --> 00:32:07,050
then just consider having the plugin

00:32:05,790 --> 00:32:10,350
graphs of the log instead of the user

00:32:07,050 --> 00:32:12,450
and apply that as it's Wiggly or you

00:32:10,350 --> 00:32:14,220
know just let people know matically

00:32:12,450 --> 00:32:16,950
applied for them right no need for the

00:32:14,220 --> 00:32:21,300
developer to actually do it to go

00:32:16,950 --> 00:32:23,910
through the log so excited so I'll touch

00:32:21,300 --> 00:32:27,870
on export visibility just just shortly

00:32:23,910 --> 00:32:29,190
so these are other power features right

00:32:27,870 --> 00:32:32,040
you want to have exports because

00:32:29,190 --> 00:32:33,510
sometimes you want to have a target you

00:32:32,040 --> 00:32:35,040
know let's say you have a library let's

00:32:33,510 --> 00:32:36,630
say you have I don't know like a Kafka

00:32:35,040 --> 00:32:38,700
client and maybe Kafka client is

00:32:36,630 --> 00:32:40,890
actually 10 targets which are fine-grain

00:32:38,700 --> 00:32:42,450
you wanna have an abstraction so maybe

00:32:40,890 --> 00:32:44,610
you have a Kafka client target that

00:32:42,450 --> 00:32:48,630
exports all of the other ones if you

00:32:44,610 --> 00:32:50,340
want to help people and and actually

00:32:48,630 --> 00:32:51,810
tell them eh okay you should export this

00:32:50,340 --> 00:32:54,930
and you should export that because this

00:32:51,810 --> 00:32:56,910
is part of a your API then you want some

00:32:54,930 --> 00:32:59,490
kind of mechanism to him that to the

00:32:56,910 --> 00:33:01,860
developer similar to visibility we

00:32:59,490 --> 00:33:03,630
migrated everything is public I know

00:33:01,860 --> 00:33:05,820
that was a mistake I was also in

00:33:03,630 --> 00:33:07,440
Benjamin Peterson's talk last year but

00:33:05,820 --> 00:33:09,920
this was a virtually long after we

00:33:07,440 --> 00:33:11,810
migrated and we have

00:33:09,920 --> 00:33:13,730
everything is public and we need to ease

00:33:11,810 --> 00:33:17,270
managing this because we want to get

00:33:13,730 --> 00:33:18,260
things to be less visible so basically

00:33:17,270 --> 00:33:19,640
think about that you know when you're

00:33:18,260 --> 00:33:22,340
cutting in Java and it tells you tells

00:33:19,640 --> 00:33:23,570
you this method can be lower visibility

00:33:22,340 --> 00:33:25,580
you know like it'll have to be public

00:33:23,570 --> 00:33:27,920
that's have to be protected similar

00:33:25,580 --> 00:33:30,410
mechanisms basically thingy both of

00:33:27,920 --> 00:33:36,200
having ID inspections and CI bots that

00:33:30,410 --> 00:33:41,090
will cap on post build to give you like

00:33:36,200 --> 00:33:42,830
PR comments and so on and so on so in

00:33:41,090 --> 00:33:44,270
the beginning I made two bold claims

00:33:42,830 --> 00:33:46,730
right the concentration is bad enough

00:33:44,270 --> 00:33:50,270
and I hope that you were convinced that

00:33:46,730 --> 00:33:52,190
the amount of things the the time it

00:33:50,270 --> 00:33:54,290
takes to run things dependency

00:33:52,190 --> 00:33:56,780
management refactoring support that

00:33:54,290 --> 00:33:58,310
that's that's missing adding targets red

00:33:56,780 --> 00:34:00,650
code that I just shown a jiff and

00:33:58,310 --> 00:34:02,990
hygiene are not good enough right this

00:34:00,650 --> 00:34:04,820
creature is bad and I hope that I was

00:34:02,990 --> 00:34:06,620
able to convince you a bit that we can

00:34:04,820 --> 00:34:08,060
really improve on it so author saying

00:34:06,620 --> 00:34:10,760
future things that we want to do in

00:34:08,060 --> 00:34:13,190
memory deficits or also that palter

00:34:10,760 --> 00:34:15,500
complete utilizing the both of them for

00:34:13,190 --> 00:34:17,510
refactoring smart templates and test

00:34:15,500 --> 00:34:20,570
generation for adding tests adding

00:34:17,510 --> 00:34:22,850
targets drawer cash and integer

00:34:20,570 --> 00:34:26,870
expectancy I validate ins for benefit

00:34:22,850 --> 00:34:29,570
hygiene most importantly we're looking

00:34:26,870 --> 00:34:33,950
for persons partners Wix wants to open

00:34:29,570 --> 00:34:36,230
source most of this stuff doing 2020 the

00:34:33,950 --> 00:34:37,610
fixer OTO the labeled X which is the

00:34:36,230 --> 00:34:39,710
global the indexing server that I

00:34:37,610 --> 00:34:43,270
mentioned beforehand if I'll have time

00:34:39,710 --> 00:34:47,030
maybe I'll explain how it works later on

00:34:43,270 --> 00:34:49,790
after the UN a so we're looking to open

00:34:47,030 --> 00:34:51,590
source all of this stuff and if you have

00:34:49,790 --> 00:34:53,630
these problems and you have capacity and

00:34:51,590 --> 00:34:55,880
you want to iterate with us please come

00:34:53,630 --> 00:34:58,130
reach out and and and let's start the

00:34:55,880 --> 00:34:59,840
discussion even if you don't have the

00:34:58,130 --> 00:35:02,600
capacity right you don't have the

00:34:59,840 --> 00:35:04,940
manpower but you have the problems we're

00:35:02,600 --> 00:35:07,040
happy to come and and and consult and

00:35:04,940 --> 00:35:09,260
talk to you because because like I said

00:35:07,040 --> 00:35:13,430
we love this community we want basil to

00:35:09,260 --> 00:35:17,850
be make awesome and prosper and we feel

00:35:13,430 --> 00:35:21,010
this has a lot of benefit thank you

00:35:17,850 --> 00:35:21,010
[Applause]

00:35:21,980 --> 00:35:28,200
thank city okay we already see I really

00:35:26,160 --> 00:35:30,630
folks lining up let's see if they've got

00:35:28,200 --> 00:35:31,650
anybody else for questions wanted go

00:35:30,630 --> 00:35:33,990
ahead up top

00:35:31,650 --> 00:35:36,390
hey thanks for the talk it was fantastic

00:35:33,990 --> 00:35:37,980
my name is Danny I work on pants at

00:35:36,390 --> 00:35:40,049
Twitter so I really appreciated the

00:35:37,980 --> 00:35:42,690
shout out I wanted to say this is

00:35:40,049 --> 00:35:44,250
something one year at UX for this and

00:35:42,690 --> 00:35:45,329
this delivery is something we didn't

00:35:44,250 --> 00:35:46,710
even kind of approach I think it's

00:35:45,329 --> 00:35:48,059
fantastic and it's if it's something

00:35:46,710 --> 00:35:49,619
that we can really easily learn from so

00:35:48,059 --> 00:35:51,900
thanks a lot for displaying it like this

00:35:49,619 --> 00:35:53,849
also we're currently looking to

00:35:51,900 --> 00:35:56,220
potentially get around the sink problem

00:35:53,849 --> 00:35:58,109
of an IDE versus the build tool by

00:35:56,220 --> 00:36:00,960
having again we haven't influent this

00:35:58,109 --> 00:36:03,180
yet pants actually infer dependencies so

00:36:00,960 --> 00:36:05,400
that build files couldn't be mostly

00:36:03,180 --> 00:36:06,839
empty again it's an idea at this point

00:36:05,400 --> 00:36:08,609
but it's another possible way to get

00:36:06,839 --> 00:36:18,450
around that thanks again for this

00:36:08,609 --> 00:36:20,099
fantastic talk thank you yes so the

00:36:18,450 --> 00:36:22,349
question was is this a separate plugin

00:36:20,099 --> 00:36:24,420
from the from the official one so we

00:36:22,349 --> 00:36:26,789
actually so we have two plugins we have

00:36:24,420 --> 00:36:29,549
a fork of the official one which we

00:36:26,789 --> 00:36:31,859
maintain it's like just like six seven

00:36:29,549 --> 00:36:33,930
commits on top of that but for things

00:36:31,859 --> 00:36:35,430
that upstream currently don't want to

00:36:33,930 --> 00:36:36,900
accept it it's it's open source under

00:36:35,430 --> 00:36:40,289
Wix playground so you can take a look

00:36:36,900 --> 00:36:41,970
and we have our own plugin that's closed

00:36:40,289 --> 00:36:43,890
source and we are planning to open

00:36:41,970 --> 00:36:46,020
source big parts of that not everything

00:36:43,890 --> 00:36:47,849
we some things are like Wix generators

00:36:46,020 --> 00:36:51,720
which you don't care about but this is

00:36:47,849 --> 00:36:54,990
part of the plan I'm Krishna from VMware

00:36:51,720 --> 00:36:58,020
I think this is the day to issue

00:36:54,990 --> 00:37:02,849
everyone will run into potentially and

00:36:58,020 --> 00:37:05,099
we are in the stage so you talk about a

00:37:02,849 --> 00:37:06,480
lot about dependencies right there are a

00:37:05,099 --> 00:37:08,490
lot of times runtime kind of

00:37:06,480 --> 00:37:12,500
dependencies like maven has a lot of

00:37:08,490 --> 00:37:17,849
scope were you able to solve those

00:37:12,500 --> 00:37:19,980
what's so so to be honest we don't have

00:37:17,849 --> 00:37:21,630
a lot of runtime dependencies we mainly

00:37:19,980 --> 00:37:23,599
use compile time dependencies we prefer

00:37:21,630 --> 00:37:26,849
things to be more explicit and less

00:37:23,599 --> 00:37:31,830
spring you know like magic class path

00:37:26,849 --> 00:37:33,390
scanning having said that we did

00:37:31,830 --> 00:37:35,700
we didn't think about extending the

00:37:33,390 --> 00:37:38,070
fixer to scrape test logs this fine

00:37:35,700 --> 00:37:40,350
class not found errors in the test but

00:37:38,070 --> 00:37:43,110
then like you get into questions of okay

00:37:40,350 --> 00:37:44,970
which of the target you know the target

00:37:43,110 --> 00:37:47,730
graph does this class actually belong to

00:37:44,970 --> 00:37:50,850
run time so it's not an easy easy thing

00:37:47,730 --> 00:37:53,370
to to match and we decided not to go

00:37:50,850 --> 00:37:56,190
down that path okay so basically spring

00:37:53,370 --> 00:37:58,530
kind of stuff is still long Tim yeah

00:37:56,190 --> 00:37:59,790
yeah yeah yeah like you know like also

00:37:58,530 --> 00:38:01,410
by the way it's like many people use

00:37:59,790 --> 00:38:03,440
spring with Java configurations and

00:38:01,410 --> 00:38:06,030
explicit like spring component scanning

00:38:03,440 --> 00:38:11,490
xml's and discovery this this isn't

00:38:06,030 --> 00:38:14,520
supported yeah the build files did you

00:38:11,490 --> 00:38:16,620
try to move it to lower levels currently

00:38:14,520 --> 00:38:19,050
what we are trying to do is simulate

00:38:16,620 --> 00:38:22,970
similar to maven the package level

00:38:19,050 --> 00:38:26,700
becomes very hard to manage in the IDE

00:38:22,970 --> 00:38:29,070
so okay so we started other way we said

00:38:26,700 --> 00:38:31,680
one one one fine grain fine fine grain

00:38:29,070 --> 00:38:33,800
like 10 times more like for every maven

00:38:31,680 --> 00:38:37,080
module we have around 10 or maybe 15

00:38:33,800 --> 00:38:39,000
packages okay in basil and then we said

00:38:37,080 --> 00:38:41,130
let's build the tooling and this these

00:38:39,000 --> 00:38:43,140
are all of our toolings made to ease

00:38:41,130 --> 00:38:45,180
people from you know I don't care if I

00:38:43,140 --> 00:38:47,640
actually have one build file or you know

00:38:45,180 --> 00:38:50,790
tender files because the the tooling

00:38:47,640 --> 00:38:54,510
will help me 90% of the way so this idea

00:38:50,790 --> 00:38:58,530
other question is would did the tooling

00:38:54,510 --> 00:39:00,240
help if even if you had macros yes yes

00:38:58,530 --> 00:39:02,070
yes because it was me those are the

00:39:00,240 --> 00:39:04,500
current build Oh sir doesn't help very

00:39:02,070 --> 00:39:10,190
much with macro size thing no it does it

00:39:04,500 --> 00:39:10,190
did like okay let's take it off there I

00:39:11,000 --> 00:39:18,420
branded from IMC thank you for the

00:39:16,200 --> 00:39:21,360
presentation I'm looking forward to

00:39:18,420 --> 00:39:22,710
looking at what the open source code is

00:39:21,360 --> 00:39:25,440
now and then whenever the code drop

00:39:22,710 --> 00:39:27,840
finally hits because I also maintain an

00:39:25,440 --> 00:39:29,670
internal Fork of the IntelliJ plugin

00:39:27,840 --> 00:39:34,170
although my changes are primarily

00:39:29,670 --> 00:39:39,330
focused around sea lion mm-hmm so two

00:39:34,170 --> 00:39:41,580
questions what has the memory sort of

00:39:39,330 --> 00:39:45,220
the memory impact of all the additional

00:39:41,580 --> 00:39:47,319
indexing which you're doing Ben

00:39:45,220 --> 00:39:50,289
on like a dev laptop or a dev

00:39:47,319 --> 00:39:51,970
workstation so so we have two indexes

00:39:50,289 --> 00:39:54,160
right now we have a global one is that

00:39:51,970 --> 00:39:56,319
you know just HTTP call so it has no

00:39:54,160 --> 00:39:58,390
memory performance and we have another

00:39:56,319 --> 00:40:02,650
one which unfortunately is Beck fixer

00:39:58,390 --> 00:40:05,200
uses like a get based disk file index

00:40:02,650 --> 00:40:07,210
and so this has a perf hit when you run

00:40:05,200 --> 00:40:09,039
that fixer but does have a memory impact

00:40:07,210 --> 00:40:11,020
we're looking to run the fixer in daemon

00:40:09,039 --> 00:40:13,780
mode and then we'll probably have memory

00:40:11,020 --> 00:40:16,829
problems won't handle them okay the

00:40:13,780 --> 00:40:20,230
second question is for the sort of

00:40:16,829 --> 00:40:23,319
additional tooling has this only been

00:40:20,230 --> 00:40:25,150
written with or do you think this would

00:40:23,319 --> 00:40:28,150
be adaptable to other languages like

00:40:25,150 --> 00:40:29,559
Python or C++ was it written in such a

00:40:28,150 --> 00:40:34,599
way to be extensible or these like

00:40:29,559 --> 00:40:36,760
specific to JVM I think I think that so

00:40:34,599 --> 00:40:39,520
I think the devil is in the details

00:40:36,760 --> 00:40:43,510
right yeah because I think that C++ and

00:40:39,520 --> 00:40:48,369
Python I think differ enough from from

00:40:43,510 --> 00:40:50,529
JVM - maybe not work syllabus might be I

00:40:48,369 --> 00:40:52,829
I think it really depends on the details

00:40:50,529 --> 00:41:00,910
I'm not sure thank you

00:40:52,829 --> 00:41:06,549
sorry we have time for one more question

00:41:00,910 --> 00:41:09,549
if you want hi or from weeks can you

00:41:06,549 --> 00:41:11,049
elaborate on the global index yeah yeah

00:41:09,549 --> 00:41:14,799
so basically like some people mentioned

00:41:11,049 --> 00:41:18,760
you know we so we have basically we have

00:41:14,799 --> 00:41:21,130
a BS service that we use bs service is

00:41:18,760 --> 00:41:24,369
something like bases specific that

00:41:21,130 --> 00:41:26,680
basically after build finishes we can we

00:41:24,369 --> 00:41:28,630
get an event via Kafka and then we go to

00:41:26,680 --> 00:41:31,180
be a service and ask okay in this basil

00:41:28,630 --> 00:41:33,430
event basil build what targets did you

00:41:31,180 --> 00:41:35,289
have and for each target what outputs is

00:41:33,430 --> 00:41:38,289
you have and then we download all of

00:41:35,289 --> 00:41:41,740
these we basically just extract the jar

00:41:38,289 --> 00:41:44,500
and using in like bcl and whatever we

00:41:41,740 --> 00:41:47,380
index all of that into elasticsearch so

00:41:44,500 --> 00:41:49,960
you get an index of fully qualified

00:41:47,380 --> 00:41:52,720
names to labels and it's also token

00:41:49,960 --> 00:41:55,990
based and that way you can you know you

00:41:52,720 --> 00:41:58,490
can just reverse the world okay thank

00:41:55,990 --> 00:42:00,860
you cool thank you a big round

00:41:58,490 --> 00:42:04,700
Plus period I thank you it's a great

00:42:00,860 --> 00:42:06,500
talk yeah you can take off and and we're

00:42:04,700 --> 00:42:10,119
going to take just a two seconds here

00:42:06,500 --> 00:42:10,119

YouTube URL: https://www.youtube.com/watch?v=rQv1sjLU4cI


