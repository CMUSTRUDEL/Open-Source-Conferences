Title: BazelCon 2019 Day 2: Half-Day Bazel Bootcamp (Part 2)
Publication date: 2020-01-16
Playlist: BazelCon 2019
Description: 
	Kyle Cordes, Oasis Digital event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Kyle Cordes;
Captions: 
	00:00:00,829 --> 00:00:07,200
I'm waiting for my screen okay we are

00:00:03,300 --> 00:00:08,880
back welcome back it looks like 90% of

00:00:07,200 --> 00:00:11,130
people have made it back hopefully those

00:00:08,880 --> 00:00:15,240
that remain are merely late and not

00:00:11,130 --> 00:00:16,440
disappointed by the content so far I do

00:00:15,240 --> 00:00:18,240
want to take a quick show of hands Oh

00:00:16,440 --> 00:00:21,300
raise your hand if the pace we're going

00:00:18,240 --> 00:00:24,840
is about right raise your hand if you

00:00:21,300 --> 00:00:26,640
wish it was going faster and raise your

00:00:24,840 --> 00:00:30,029
hand if you which was a more careful

00:00:26,640 --> 00:00:31,529
slower explanation of each bit okay so

00:00:30,029 --> 00:00:34,489
it looks like based on that I can go

00:00:31,529 --> 00:00:36,809
very very slightly faster without

00:00:34,489 --> 00:00:38,430
offending the group okay so where we

00:00:36,809 --> 00:00:40,140
left off we're doing a very simple Java

00:00:38,430 --> 00:00:40,800
build but I hadn't actually built the

00:00:40,140 --> 00:00:43,110
thing yet

00:00:40,800 --> 00:00:46,620
so let's let's start and do the build

00:00:43,110 --> 00:00:50,100
now again I'm just gonna copy from here

00:00:46,620 --> 00:00:52,050
because I know this command works and

00:00:50,100 --> 00:00:55,559
use of him we had this thing I already

00:00:52,050 --> 00:00:57,449
did we have some tests in here so I'm

00:00:55,559 --> 00:01:00,329
gonna run the tests and see if the tests

00:00:57,449 --> 00:01:02,010
pass I'm sure enough they do and use

00:01:00,329 --> 00:01:06,299
that as a reason to mention a few bits

00:01:02,010 --> 00:01:08,430
here mmm so the test command by default

00:01:06,299 --> 00:01:09,960
the test subcommander basil by default

00:01:08,430 --> 00:01:12,600
is made for running

00:01:09,960 --> 00:01:15,210
like like running your tests in a mono

00:01:12,600 --> 00:01:18,270
repo where you have you know 7,000 or

00:01:15,210 --> 00:01:19,710
70,000 tests and so on so by default it

00:01:18,270 --> 00:01:22,770
really just wants to tell you like hey

00:01:19,710 --> 00:01:25,049
did things pass or not I have found that

00:01:22,770 --> 00:01:28,500
when tests don't pass I often would like

00:01:25,049 --> 00:01:30,720
to go fix them so I get to know these

00:01:28,500 --> 00:01:33,509
two settings and use them often you will

00:01:30,720 --> 00:01:34,860
need them when tests fail when you have

00:01:33,509 --> 00:01:37,170
tests that failed because they exceeded

00:01:34,860 --> 00:01:38,700
a test timeout you'll need the first one

00:01:37,170 --> 00:01:40,740
and when you have tests that fail

00:01:38,700 --> 00:01:42,869
because the testing tool threw an error

00:01:40,740 --> 00:01:44,490
message by default you actually won't

00:01:42,869 --> 00:01:46,619
see that error message it'll be sitting

00:01:44,490 --> 00:01:47,850
in a log file like the the basil output

00:01:46,619 --> 00:01:50,040
will just tell you hey that a test

00:01:47,850 --> 00:01:52,829
failed and here's the goal log a log

00:01:50,040 --> 00:01:54,899
file to go look at this this option is a

00:01:52,829 --> 00:01:56,759
real important common one to say go

00:01:54,899 --> 00:01:58,829
ahead and print out the failure in line

00:01:56,759 --> 00:02:00,930
and I don't want to get too distracted

00:01:58,829 --> 00:02:03,570
by testing so I'm not going to break one

00:02:00,930 --> 00:02:05,579
and illustrate that but just feel free

00:02:03,570 --> 00:02:07,920
to keep this file and look back at it as

00:02:05,579 --> 00:02:12,150
four options you are likely to want at

00:02:07,920 --> 00:02:13,530
some point okay so line 8 that this is

00:02:12,150 --> 00:02:13,740
how I built the thing but I really want

00:02:13,530 --> 00:02:14,910
to

00:02:13,740 --> 00:02:18,150
on it so let's go ahead and run this

00:02:14,910 --> 00:02:22,230
HelloWorld program that's how we do it

00:02:18,150 --> 00:02:24,810
and if you'll note that uh printed hello

00:02:22,230 --> 00:02:28,140
world so this is the point where i i i

00:02:24,810 --> 00:02:30,360
lodge a minor complaint about about

00:02:28,140 --> 00:02:35,040
basil to anyone here involved in its

00:02:30,360 --> 00:02:40,050
production a well behaved unix tool is

00:02:35,040 --> 00:02:42,330
silent if nothing goes wrong this tool

00:02:40,050 --> 00:02:44,960
is not silent when nothing goes wrong so

00:02:42,330 --> 00:02:47,370
i wish i wish it would be by default

00:02:44,960 --> 00:02:50,730
silent wish I had to ask it to produce

00:02:47,370 --> 00:02:53,070
all that output ok so that's at hello

00:02:50,730 --> 00:02:54,570
world so I'm going to take a real slight

00:02:53,070 --> 00:02:56,610
distraction to how that hello world

00:02:54,570 --> 00:02:58,260
happened because it ties in to what we

00:02:56,610 --> 00:03:00,030
did in the workspace in the workspace I

00:02:58,260 --> 00:03:03,290
brought in guava a third-party

00:03:00,030 --> 00:03:06,090
dependency now this is actually uh

00:03:03,290 --> 00:03:08,010
because I'm doing this on a google

00:03:06,090 --> 00:03:09,150
campus so it's a Google made third-party

00:03:08,010 --> 00:03:12,120
dependency but is still a third-party

00:03:09,150 --> 00:03:13,860
dependency and to actually depend on

00:03:12,120 --> 00:03:16,080
something brought in by that mechanism

00:03:13,860 --> 00:03:17,310
you need something like line 37 so when

00:03:16,080 --> 00:03:19,170
I'm when I'm I'm saying I'm going to

00:03:17,310 --> 00:03:21,510
compile some code like here's a source

00:03:19,170 --> 00:03:23,730
code I want to compile I have to list it

00:03:21,510 --> 00:03:25,950
as a dependency so again that there's

00:03:23,730 --> 00:03:27,980
like kind of old naming so if this was

00:03:25,950 --> 00:03:30,690
created new today it probably would say

00:03:27,980 --> 00:03:32,730
dependencies or libraries or something

00:03:30,690 --> 00:03:34,770
it says depths that that's just that's

00:03:32,730 --> 00:03:36,390
what the name is it's kind of a it's not

00:03:34,770 --> 00:03:41,990
enforced by basil but it's used across

00:03:36,390 --> 00:03:46,350
many many tools this is a naming scheme

00:03:41,990 --> 00:03:48,510
specific to the HTTP jar mechanism in

00:03:46,350 --> 00:03:50,910
the next example we'll see fetching

00:03:48,510 --> 00:03:52,980
using the maven dependency resolution

00:03:50,910 --> 00:03:56,910
mechanism that'll have a little bit

00:03:52,980 --> 00:03:58,980
different way of doing it and then in

00:03:56,910 --> 00:04:00,240
the source code I wanted to point out it

00:03:58,980 --> 00:04:03,750
doesn't really matter cuz this is not

00:04:00,240 --> 00:04:05,640
really a Java event but I did I didn't

00:04:03,750 --> 00:04:07,290
actually push this I did a minor rename

00:04:05,640 --> 00:04:10,140
it didn't bother to push it yet but I

00:04:07,290 --> 00:04:12,390
did actually use guava to make the most

00:04:10,140 --> 00:04:15,030
ridiculously over-engineered way of

00:04:12,390 --> 00:04:17,640
counting the word world that you could

00:04:15,030 --> 00:04:20,310
possibly imagine I brought in a a guava

00:04:17,640 --> 00:04:22,620
multi set to count how many times the

00:04:20,310 --> 00:04:24,240
world word world was mentioned on the

00:04:22,620 --> 00:04:26,950
command line so I could say hello world

00:04:24,240 --> 00:04:29,320
or hello worlds

00:04:26,950 --> 00:04:31,510
so if you run the thing which does hello

00:04:29,320 --> 00:04:35,320
at the hello world's target passes the

00:04:31,510 --> 00:04:39,130
word world three times so sure enough if

00:04:35,320 --> 00:04:42,220
I do hello world's face it says hello

00:04:39,130 --> 00:04:44,140
world so anyway I've shown off my elite

00:04:42,220 --> 00:04:48,370
Java coding skills

00:04:44,140 --> 00:04:49,540
I wrote Java code all day every day for

00:04:48,370 --> 00:04:51,490
about ten years

00:04:49,540 --> 00:04:53,650
but that was more than ten years ago so

00:04:51,490 --> 00:04:56,080
there was a time when I could just it

00:04:53,650 --> 00:05:00,190
just flew out but things fade slightly

00:04:56,080 --> 00:05:02,170
it happens um okay so I think I've now

00:05:00,190 --> 00:05:05,650
explained every little bit in piece of

00:05:02,170 --> 00:05:07,630
this simplest feasible single external

00:05:05,650 --> 00:05:13,630
dependency Java example are there any

00:05:07,630 --> 00:05:15,520
more questions on this one as if there's

00:05:13,630 --> 00:05:18,730
somebody at the mic behind you and go

00:05:15,520 --> 00:05:22,450
first so I have two questions one is

00:05:18,730 --> 00:05:24,520
word the binary stored yeah so I I had

00:05:22,450 --> 00:05:27,910
kind of glossed over that by using basil

00:05:24,520 --> 00:05:30,220
run to run them and like I think this is

00:05:27,910 --> 00:05:32,680
a little bit of a rough edge at the

00:05:30,220 --> 00:05:35,500
moment to understand where things are

00:05:32,680 --> 00:05:36,970
you go into the documentation and if you

00:05:35,500 --> 00:05:39,250
can find the bit in here about the

00:05:36,970 --> 00:05:43,090
output directory layout there is an

00:05:39,250 --> 00:05:44,830
explanation of where things are so you

00:05:43,090 --> 00:05:46,900
should familiarize yourself with this

00:05:44,830 --> 00:05:50,140
documentation page there's quite a bit

00:05:46,900 --> 00:05:52,000
of it but the short version is if you

00:05:50,140 --> 00:05:53,860
just look around you can usually spot

00:05:52,000 --> 00:05:55,810
what you want so I'm going to bring up a

00:05:53,860 --> 00:06:01,570
I guess a copy of a different editor

00:05:55,810 --> 00:06:06,880
here ooh that did not help did it how

00:06:01,570 --> 00:06:09,100
about this what if I do I'll bring up

00:06:06,880 --> 00:06:13,000
another copy of vs code and see if yeah

00:06:09,100 --> 00:06:15,400
there we go okay so in this copy I don't

00:06:13,000 --> 00:06:19,360
have the setting that hides these guys

00:06:15,400 --> 00:06:20,920
so there's this the know if convention

00:06:19,360 --> 00:06:24,070
is the word there's this thing basil

00:06:20,920 --> 00:06:28,090
does for you it creates for symlinks by

00:06:24,070 --> 00:06:30,100
default inside your workspace and that

00:06:28,090 --> 00:06:32,470
way you don't have to go like looking

00:06:30,100 --> 00:06:34,990
around outside your workspace to find

00:06:32,470 --> 00:06:37,210
things like logs and output it provides

00:06:34,990 --> 00:06:39,190
symlinks to get you access one of the

00:06:37,210 --> 00:06:40,540
sim links it gives is assembling back to

00:06:39,190 --> 00:06:42,490
your workspace

00:06:40,540 --> 00:06:44,860
and I have not yet found a good

00:06:42,490 --> 00:06:47,530
explanation of why of why this one

00:06:44,860 --> 00:06:48,550
happens so I do not know look at if

00:06:47,530 --> 00:06:51,160
there's anyone in the room who knows

00:06:48,550 --> 00:06:54,430
please tell me I do not know what what

00:06:51,160 --> 00:06:56,830
the motivation is for that one but well

00:06:54,430 --> 00:06:59,110
test logs is where test logs land that's

00:06:56,830 --> 00:07:00,250
pretty self-explanatory been an doubt

00:06:59,110 --> 00:07:02,830
there's been a lot of discussion it

00:07:00,250 --> 00:07:04,900
seems like there's a not a lot of

00:07:02,830 --> 00:07:06,310
clarity on exactly what the difference

00:07:04,900 --> 00:07:07,510
should be between Ben and out I think

00:07:06,310 --> 00:07:08,530
there was actually some discussion at

00:07:07,510 --> 00:07:10,420
some point of whether they should be the

00:07:08,530 --> 00:07:12,280
same thing but between the two of those

00:07:10,420 --> 00:07:14,860
you can typically look around and find

00:07:12,280 --> 00:07:15,340
what you want so for example that hello

00:07:14,860 --> 00:07:17,380
world

00:07:15,340 --> 00:07:20,530
this right here is an automatically

00:07:17,380 --> 00:07:22,360
generated bash script which does the

00:07:20,530 --> 00:07:24,490
ridiculous amount of push-ups that we

00:07:22,360 --> 00:07:26,020
have all done by hand to make it

00:07:24,490 --> 00:07:28,150
possible to run our Java programs

00:07:26,020 --> 00:07:30,040
correctly at the command line so this is

00:07:28,150 --> 00:07:32,920
actually a super convenient thing right

00:07:30,040 --> 00:07:36,430
I like writing like every project I've

00:07:32,920 --> 00:07:39,280
ever seen ends up with a complex command

00:07:36,430 --> 00:07:43,630
line wrapper around Java the java

00:07:39,280 --> 00:07:47,320
invocation and i don't know whether the

00:07:43,630 --> 00:07:49,000
google generated one is is fantastic but

00:07:47,320 --> 00:07:51,460
i know it's at least reasonably decent

00:07:49,000 --> 00:07:52,420
and so it's possible that if you have a

00:07:51,460 --> 00:07:54,490
project right now you're building

00:07:52,420 --> 00:07:56,050
another way if a hand-coded command line

00:07:54,490 --> 00:07:57,490
wrapper it's possible that the

00:07:56,050 --> 00:07:58,990
generating command line wrapper might

00:07:57,490 --> 00:08:01,270
actually take care of your needs for you

00:07:58,990 --> 00:08:02,830
that would be pretty great the short

00:08:01,270 --> 00:08:04,600
answer to that question is the things

00:08:02,830 --> 00:08:07,150
that are binaries dual and and bin and

00:08:04,600 --> 00:08:08,950
so when I said you know see if I can

00:08:07,150 --> 00:08:11,140
just make it I'll make it as direct as

00:08:08,950 --> 00:08:13,570
possible so this build file is at the

00:08:11,140 --> 00:08:16,390
top of my workspace it's parallel to my

00:08:13,570 --> 00:08:19,350
workspace file and it made a output

00:08:16,390 --> 00:08:22,360
called hello world and so this name

00:08:19,350 --> 00:08:25,570
became the name of something in the

00:08:22,360 --> 00:08:27,640
basil bin symlink and that thing will

00:08:25,570 --> 00:08:30,040
have the exact same name hello world and

00:08:27,640 --> 00:08:32,260
it'll have various suffixes after it so

00:08:30,040 --> 00:08:33,880
the jar file that that command line

00:08:32,260 --> 00:08:35,830
wrapper needs to run will be called that

00:08:33,880 --> 00:08:38,320
thing dot jar I do not remember the

00:08:35,830 --> 00:08:39,880
purpose of the native header but this

00:08:38,320 --> 00:08:41,650
like between these are the two most

00:08:39,880 --> 00:08:45,040
important files here and here to make it

00:08:41,650 --> 00:08:46,900
work and if I built on Windows I would

00:08:45,040 --> 00:08:48,970
get a hello world bat which had a

00:08:46,900 --> 00:08:51,850
reasonably pseudo Windows command line

00:08:48,970 --> 00:08:53,770
wrapper for it so did that answer that

00:08:51,850 --> 00:08:55,390
question sufficiently yep it did

00:08:53,770 --> 00:08:57,820
yeah okay the second question is how you

00:08:55,390 --> 00:09:02,410
pass arguments to that binary you ran it

00:08:57,820 --> 00:09:04,690
so in the context of something I want to

00:09:02,410 --> 00:09:08,800
run via basal I'm typically passing

00:09:04,690 --> 00:09:12,250
those arguments in here actually I can

00:09:08,800 --> 00:09:13,930
close this one now like if I'm X if I'm

00:09:12,250 --> 00:09:15,760
making a basal target to encapsulate

00:09:13,930 --> 00:09:18,010
running it I literally passed them right

00:09:15,760 --> 00:09:21,040
there where you can see on the screen I

00:09:18,010 --> 00:09:31,450
could though if I wanted to go run that

00:09:21,040 --> 00:09:34,779
file directly let me see here and I

00:09:31,450 --> 00:09:37,510
could if I wanted make one of these that

00:09:34,779 --> 00:09:40,510
did not say that said world right hello

00:09:37,510 --> 00:09:42,130
worlds which one did I run I run hello

00:09:40,510 --> 00:09:44,680
world which is this one and I mentioned

00:09:42,130 --> 00:09:48,850
only one world ah yep

00:09:44,680 --> 00:09:50,980
so so if I say world it's a single world

00:09:48,850 --> 00:09:55,990
if I say world I say it twice it's gonna

00:09:50,980 --> 00:09:59,310
say hello to both worlds so right

00:09:55,990 --> 00:10:01,959
because that rapper so that that target

00:09:59,310 --> 00:10:03,790
like the build output of that target is

00:10:01,959 --> 00:10:06,490
a script that can actually become the

00:10:03,790 --> 00:10:08,890
build output of your build process like

00:10:06,490 --> 00:10:10,600
I could I could I could CP a couple of

00:10:08,890 --> 00:10:12,880
those into my output artifacts of my

00:10:10,600 --> 00:10:14,709
build process and and that would be

00:10:12,880 --> 00:10:16,959
running them but just at the command

00:10:14,709 --> 00:10:19,450
line so but when you're running them via

00:10:16,959 --> 00:10:21,070
basil run they're assuming that you want

00:10:19,450 --> 00:10:23,829
to control that execution using Basil's

00:10:21,070 --> 00:10:26,079
that uses those arts that you pass okay

00:10:23,829 --> 00:10:28,540
any more questions about this simplest

00:10:26,079 --> 00:10:31,029
yeah go ahead it's really quick

00:10:28,540 --> 00:10:33,970
back in Ilyas the when you when you

00:10:31,029 --> 00:10:35,800
define that alias okay you're saying

00:10:33,970 --> 00:10:38,410
define it in the build file right but

00:10:35,800 --> 00:10:40,920
are used in the basil RC can it be more

00:10:38,410 --> 00:10:42,670
nested into your directory structure and

00:10:40,920 --> 00:10:45,190
they'll detect it

00:10:42,670 --> 00:10:47,350
I believe I have not I put it here

00:10:45,190 --> 00:10:49,570
because the handful of examples I could

00:10:47,350 --> 00:10:51,459
find seem to always put it here at the

00:10:49,570 --> 00:10:53,740
top the top turns out to be a pretty

00:10:51,459 --> 00:10:56,170
good place to put it because in a real

00:10:53,740 --> 00:10:58,480
project your stuff is normally pushed

00:10:56,170 --> 00:11:00,130
down in other directories but if you

00:10:58,480 --> 00:11:01,990
wanted to push that down yeah you could

00:11:00,130 --> 00:11:03,640
move that down to another directory like

00:11:01,990 --> 00:11:05,020
you can make like a JDK directory or

00:11:03,640 --> 00:11:07,120
something and then you would have to

00:11:05,020 --> 00:11:09,580
edit your basil RC

00:11:07,120 --> 00:11:13,450
have a different target where it where

00:11:09,580 --> 00:11:15,100
it says to go find the JDK yeah okay any

00:11:13,450 --> 00:11:23,380
more questions about this simplest

00:11:15,100 --> 00:11:28,390
complete Java example yeah so going back

00:11:23,380 --> 00:11:31,360
to the build or basel file yes so you

00:11:28,390 --> 00:11:33,880
have returned the dependency has at the

00:11:31,360 --> 00:11:36,810
at the rate gamma right tell me a line

00:11:33,880 --> 00:11:36,810
number okay

00:11:49,060 --> 00:11:53,029
while she's looking for the line number

00:11:51,170 --> 00:11:55,070
this is a tip for anyone that ever has

00:11:53,029 --> 00:11:56,750
to everyone has to explain code to other

00:11:55,070 --> 00:11:58,160
people always turn your line numbers on

00:11:56,750 --> 00:11:59,779
because it's a lot easier to call out a

00:11:58,160 --> 00:12:06,170
line number than the point yeah okay

00:11:59,779 --> 00:12:08,240
what are you saying 37 or 47 okay yeah

00:12:06,170 --> 00:12:11,660
it's that so I did it does it have a

00:12:08,240 --> 00:12:13,820
significance of using a tour slash okay

00:12:11,660 --> 00:12:15,500
so whenever you see something that has

00:12:13,820 --> 00:12:18,440
this kind of look to it you're actually

00:12:15,500 --> 00:12:20,000
looking at a basel target a target has

00:12:18,440 --> 00:12:22,279
the specifics with me

00:12:20,000 --> 00:12:24,529
a label is like the name of a target and

00:12:22,279 --> 00:12:25,839
a label has this like the kind of micro

00:12:24,529 --> 00:12:27,980
language syntax

00:12:25,839 --> 00:12:30,350
unfortunately because they built this

00:12:27,980 --> 00:12:32,779
syntax on top of Python it looks just

00:12:30,350 --> 00:12:35,240
like a string in the file so you just

00:12:32,779 --> 00:12:38,329
you kind of just have to know that line

00:12:35,240 --> 00:12:40,040
37 is a label and the way labels work if

00:12:38,329 --> 00:12:43,459
they start with an @ sign then they're

00:12:40,040 --> 00:12:46,430
pointing at another workspace well if I

00:12:43,459 --> 00:12:48,320
look at my workspace this HTTP jar

00:12:46,430 --> 00:12:51,140
basically brought in another workspace

00:12:48,320 --> 00:12:53,149
off to the side called guava and so

00:12:51,140 --> 00:12:55,310
whenever you see that at at the

00:12:53,149 --> 00:12:57,110
beginning you could simply take that

00:12:55,310 --> 00:12:58,700
word and go find it in your workspace

00:12:57,110 --> 00:13:01,520
and that would be where it came from

00:12:58,700 --> 00:13:03,709
and then again you kind of just have to

00:13:01,520 --> 00:13:07,790
know that the convention implemented by

00:13:03,709 --> 00:13:13,430
HTTP jar by this rule is that it outputs

00:13:07,790 --> 00:13:18,440
something called jar which is the actual

00:13:13,430 --> 00:13:21,380
jar file that was fetched so it's in

00:13:18,440 --> 00:13:23,750
reality you would only use this HTTP jar

00:13:21,380 --> 00:13:25,040
in the very simplest cases because he

00:13:23,750 --> 00:13:26,360
have a lot of dependencies you're gonna

00:13:25,040 --> 00:13:30,380
want to use maven anyway and we're gonna

00:13:26,360 --> 00:13:34,339
see that next okay any more questions on

00:13:30,380 --> 00:13:37,730
the simplest working or reasonable Java

00:13:34,339 --> 00:13:40,220
program okay great

00:13:37,730 --> 00:13:44,620
now did every was everyone able to run

00:13:40,220 --> 00:13:48,290
this okay and nobody nobody's squawking

00:13:44,620 --> 00:13:50,420
if anyone wants to make any small edits

00:13:48,290 --> 00:13:53,329
if anyone wants to say go in here and

00:13:50,420 --> 00:13:54,949
and you know edit the number of

00:13:53,329 --> 00:13:57,199
parameters or changed the name of a

00:13:54,949 --> 00:13:59,720
parameter or something feel free to do

00:13:57,199 --> 00:14:02,210
so and if you if you hit an interesting

00:13:59,720 --> 00:14:04,220
error message we will you

00:14:02,210 --> 00:14:05,480
we'll take a pause and try to try to

00:14:04,220 --> 00:14:08,330
work through it there's people around

00:14:05,480 --> 00:14:10,040
they can help so I don't have a specific

00:14:08,330 --> 00:14:12,260
target to do but just if you want to try

00:14:10,040 --> 00:14:14,210
taking this I'll be proceed I would

00:14:12,260 --> 00:14:15,800
encourage you to do so because if you

00:14:14,210 --> 00:14:18,050
hit an interesting question right now in

00:14:15,800 --> 00:14:24,500
the next hour or whatever you'll be able

00:14:18,050 --> 00:14:27,800
to get an answer okay the next one to

00:14:24,500 --> 00:14:29,959
look at is number three so this is more

00:14:27,800 --> 00:14:31,430
about Java dependencies so again I'm

00:14:29,959 --> 00:14:32,510
gonna assume that you are now an expert

00:14:31,430 --> 00:14:35,360
and everything we have covered so far

00:14:32,510 --> 00:14:37,160
and so just go very very fast past all

00:14:35,360 --> 00:14:39,610
the things that are not new so as always

00:14:37,160 --> 00:14:43,670
what version the basil I'll be running

00:14:39,610 --> 00:14:45,470
2.00 rc3 I spoke with someone during the

00:14:43,670 --> 00:14:47,300
break who thought they were on version

00:14:45,470 --> 00:14:50,060
one point two point one but when they

00:14:47,300 --> 00:14:54,529
ran the basil version command which I

00:14:50,060 --> 00:14:57,470
will show good command to know they ran

00:14:54,529 --> 00:15:01,070
the basil version command and they say

00:14:57,470 --> 00:15:03,140
I'm on two Oh rc3 they were actually on

00:15:01,070 --> 00:15:04,370
0.26 and they were getting weird error

00:15:03,140 --> 00:15:07,070
messages it's because they were on an

00:15:04,370 --> 00:15:11,330
old version so if you're ever not

00:15:07,070 --> 00:15:14,360
confident what version is running it's

00:15:11,330 --> 00:15:16,550
just basil version to find out what

00:15:14,360 --> 00:15:19,010
version is running Oh weird okay my

00:15:16,550 --> 00:15:22,279
basilisk is one one oh but my basil is

00:15:19,010 --> 00:15:24,020
200 rc3 okay so the next thing that

00:15:22,279 --> 00:15:26,779
happens is the basil RC file this is

00:15:24,020 --> 00:15:28,640
exactly the same thing as last time you

00:15:26,779 --> 00:15:30,140
know so again any any time you have a

00:15:28,640 --> 00:15:31,700
group of related projects they're gonna

00:15:30,140 --> 00:15:33,470
share some cash you're gonna have

00:15:31,700 --> 00:15:36,950
something in here about cash and any

00:15:33,470 --> 00:15:39,410
time you're you're using a a basil

00:15:36,950 --> 00:15:43,400
managed jdk you're gonna have a section

00:15:39,410 --> 00:15:45,350
about the jdk nothing new here at the

00:15:43,400 --> 00:15:47,270
workspace so starting at the top as

00:15:45,350 --> 00:15:48,440
usual it's got a name I gave it a

00:15:47,270 --> 00:15:52,820
different name because that's a good

00:15:48,440 --> 00:15:55,839
practice HTTP archive is there oh and a

00:15:52,820 --> 00:15:58,940
question came up also at the break of a

00:15:55,839 --> 00:16:01,850
what are some of the other ways of if

00:15:58,940 --> 00:16:05,120
you wanted to intercept how dependencies

00:16:01,850 --> 00:16:06,380
are loaded because inside your company

00:16:05,120 --> 00:16:07,790
maybe you don't want to load things

00:16:06,380 --> 00:16:09,829
externally and you don't feel like going

00:16:07,790 --> 00:16:12,050
in like editing any of your dependencies

00:16:09,829 --> 00:16:13,670
you can actually replace the HTTP

00:16:12,050 --> 00:16:15,900
archive command you could write your own

00:16:13,670 --> 00:16:18,480
you could load up your own variant

00:16:15,900 --> 00:16:21,540
HTTP archive right here that looked at

00:16:18,480 --> 00:16:23,130
these URLs and like bunged them in some

00:16:21,540 --> 00:16:24,180
way to point to an internal server so

00:16:23,130 --> 00:16:26,340
there's just there's just endless

00:16:24,180 --> 00:16:27,900
different places where you can get a

00:16:26,340 --> 00:16:31,590
little lever in and change basale

00:16:27,900 --> 00:16:34,560
behavior to do what you want okay lines

00:16:31,590 --> 00:16:36,630
13 15 and 17 you have seen those exactly

00:16:34,560 --> 00:16:40,050
before all the stuff about loading the

00:16:36,630 --> 00:16:41,820
JDK is you've seen those before there's

00:16:40,050 --> 00:16:46,740
a rule set again from the core team

00:16:41,820 --> 00:16:48,150
called rules JVM external I kind of wish

00:16:46,740 --> 00:16:50,400
would have been named like rules maven

00:16:48,150 --> 00:16:52,620
because it might be a little more clear

00:16:50,400 --> 00:16:55,020
name for what it is but this contains

00:16:52,620 --> 00:16:57,330
the things you need to go load jars from

00:16:55,020 --> 00:17:04,070
maven repositories so let's see how this

00:16:57,330 --> 00:17:07,920
works so for some reason some of the

00:17:04,070 --> 00:17:09,780
some of the rules suggest this syntax

00:17:07,920 --> 00:17:11,760
you can reason what this means right

00:17:09,780 --> 00:17:18,360
we're just defining a variable here and

00:17:11,760 --> 00:17:23,220
then we're using it line 61 so raise

00:17:18,360 --> 00:17:26,520
your hand if you've not used Python okay

00:17:23,220 --> 00:17:28,350
so I'm I will let the one non Python or

00:17:26,520 --> 00:17:31,680
guess the meaning of line 61 because

00:17:28,350 --> 00:17:34,200
it's obvious to any Python err um okay

00:17:31,680 --> 00:17:36,120
so rules JVM external provides a maven

00:17:34,200 --> 00:17:38,310
installation mechanism so as always

00:17:36,120 --> 00:17:40,140
before I can use a rule I have to load

00:17:38,310 --> 00:17:41,100
the rule from somewhere and that's just

00:17:40,140 --> 00:17:42,510
where that came from

00:17:41,100 --> 00:17:44,580
so how would I know that if I just

00:17:42,510 --> 00:17:45,840
walked up to this code one day and I had

00:17:44,580 --> 00:17:48,350
forgotten anything how would I know that

00:17:45,840 --> 00:17:52,770
well if the person who wrote this

00:17:48,350 --> 00:17:54,690
imported this thing under its under it's

00:17:52,770 --> 00:17:55,830
kind of standard name you could search

00:17:54,690 --> 00:17:58,680
for that on the Internet

00:17:55,830 --> 00:18:02,550
or if you just happen to know in the

00:17:58,680 --> 00:18:05,640
basil documentation the Java support is

00:18:02,550 --> 00:18:07,770
here under rules so you go to the Java

00:18:05,640 --> 00:18:09,600
part here and I could make my way in

00:18:07,770 --> 00:18:14,090
here and I could I could find my way to

00:18:09,600 --> 00:18:16,260
it I could type rules JVM external there

00:18:14,090 --> 00:18:18,210
so there's lots of different you could

00:18:16,260 --> 00:18:22,410
basically let search be your friend

00:18:18,210 --> 00:18:24,750
right well the one one really important

00:18:22,410 --> 00:18:27,690
oddity certain rules because

00:18:24,750 --> 00:18:30,100
historically they came kind of hard part

00:18:27,690 --> 00:18:31,720
of core blaze basil from inside

00:18:30,100 --> 00:18:33,850
certain rules are kind of got a

00:18:31,720 --> 00:18:36,280
promotion to be on the main Basel

00:18:33,850 --> 00:18:39,429
documentation website so if I go here to

00:18:36,280 --> 00:18:40,780
documentation and I click rules I see a

00:18:39,429 --> 00:18:44,559
bunch of the a bunch of the rules are

00:18:40,780 --> 00:18:46,690
listed here but oddly enough like the

00:18:44,559 --> 00:18:47,860
the note JavaScript rules if I click on

00:18:46,690 --> 00:18:50,830
that actually takes you out to this

00:18:47,860 --> 00:18:52,450
github page because not all not all the

00:18:50,830 --> 00:18:54,970
rule sets being developed by Googlers

00:18:52,450 --> 00:18:57,070
have been promoted into the Basel

00:18:54,970 --> 00:18:59,500
duck-billed website yet so there are a

00:18:57,070 --> 00:19:01,120
few kinds so you'll you'll find like the

00:18:59,500 --> 00:19:03,490
documentation for certain things is like

00:19:01,120 --> 00:19:05,860
on the github page that's okay you know

00:19:03,490 --> 00:19:07,780
if it's it's still it's still valid you

00:19:05,860 --> 00:19:09,340
can stick clear it's a you can tell that

00:19:07,780 --> 00:19:10,270
this came from the core team because

00:19:09,340 --> 00:19:13,860
it's part of the Basel build

00:19:10,270 --> 00:19:16,840
organization so kind of to be alarmed

00:19:13,860 --> 00:19:22,390
okay so unwind the stack just a little

00:19:16,840 --> 00:19:23,800
bit here so we loaded the external rules

00:19:22,390 --> 00:19:27,190
from those rules we got maven install

00:19:23,800 --> 00:19:30,460
okay so this is sort of like a pom but

00:19:27,190 --> 00:19:33,280
much much shorter it's just the external

00:19:30,460 --> 00:19:35,050
dependency part of a pom you list your

00:19:33,280 --> 00:19:36,610
artifacts oddly enough you list your

00:19:35,050 --> 00:19:38,740
artifacts with that kind of string macro

00:19:36,610 --> 00:19:40,390
syntax that you would use in Gradle so

00:19:38,740 --> 00:19:42,400
if you go to one of like the maven repo

00:19:40,390 --> 00:19:43,840
searching sites and it says here's the

00:19:42,400 --> 00:19:45,460
string you use to bring this in for

00:19:43,840 --> 00:19:50,140
Gradle that's what you can paste into

00:19:45,460 --> 00:19:52,720
this art this artifact list if you're

00:19:50,140 --> 00:19:54,490
doing Java loading things via maven you

00:19:52,720 --> 00:19:55,960
probably ought to be using pinning so

00:19:54,490 --> 00:19:57,480
that you notice it's like the the hash

00:19:55,960 --> 00:20:00,700
changes on something you're bringing in

00:19:57,480 --> 00:20:04,750
if you've not used maven pinning that's

00:20:00,700 --> 00:20:06,250
sort of like a node package lock there's

00:20:04,750 --> 00:20:08,890
a there's an analogue for every package

00:20:06,250 --> 00:20:14,070
manager but I've done this example with

00:20:08,890 --> 00:20:16,960
pinning out of fear um specifically I

00:20:14,070 --> 00:20:18,820
found that any code I put on a slide

00:20:16,960 --> 00:20:20,620
someone assumes this perfect amazing

00:20:18,820 --> 00:20:24,820
code they should copy into their real

00:20:20,620 --> 00:20:26,830
production project and so I would not

00:20:24,820 --> 00:20:28,510
recommend not using pinning and

00:20:26,830 --> 00:20:29,950
therefore this trivial example are using

00:20:28,510 --> 00:20:35,260
pinning it doesn't really matter it's a

00:20:29,950 --> 00:20:37,150
maven thing not not a basil thing but

00:20:35,260 --> 00:20:39,250
the essence is if you're using pinning

00:20:37,150 --> 00:20:41,440
you call a thing called pinned maven

00:20:39,250 --> 00:20:43,050
install I don't wanna spend more time on

00:20:41,440 --> 00:20:45,330
it just to point out that

00:20:43,050 --> 00:20:46,920
the pom like there I don't have a pom

00:20:45,330 --> 00:20:49,080
here I could three you could you'd throw

00:20:46,920 --> 00:20:50,880
away your pom in the combination of the

00:20:49,080 --> 00:20:52,800
build files in the workspace file take

00:20:50,880 --> 00:20:55,890
the place of a maven pom as you're

00:20:52,800 --> 00:20:58,320
moving from maven to basil and I think I

00:20:55,890 --> 00:20:59,820
think this afternoon on the schedule I

00:20:58,320 --> 00:21:03,270
think there might be a talk that talks

00:20:59,820 --> 00:21:06,110
about going from Gradle Gradle to basil

00:21:03,270 --> 00:21:11,130
does anybody know and if anybody has the

00:21:06,110 --> 00:21:13,710
sort of just a lightning talk yeah that

00:21:11,130 --> 00:21:18,870
talk is more than a lightnings worth of

00:21:13,710 --> 00:21:21,510
talk anyway so just so you've seen the

00:21:18,870 --> 00:21:24,180
syntax right so by now by now the the

00:21:21,510 --> 00:21:27,960
kind of the the theme of how this work

00:21:24,180 --> 00:21:30,050
should start to become clear really

00:21:27,960 --> 00:21:33,300
important aspect of learning all this

00:21:30,050 --> 00:21:35,400
you only have to go in deep on the the

00:21:33,300 --> 00:21:37,530
kind of pie segment of the ecosystem

00:21:35,400 --> 00:21:39,810
you're actually using so if you're not

00:21:37,530 --> 00:21:41,310
using Java code this might be though

00:21:39,810 --> 00:21:43,410
this might be the last time you ever

00:21:41,310 --> 00:21:45,750
even care about the maven install rule

00:21:43,410 --> 00:21:47,850
so I'm trying to spend as much time as

00:21:45,750 --> 00:21:49,950
possible and on basal wide things and as

00:21:47,850 --> 00:21:52,980
little time as possible digging into the

00:21:49,950 --> 00:21:54,000
specific rule sets because really you

00:21:52,980 --> 00:21:56,580
could sort of think of it being as an

00:21:54,000 --> 00:21:59,460
overall basal ecosystem but then like a

00:21:56,580 --> 00:22:00,750
sub ecosystem for each rule set like

00:21:59,460 --> 00:22:04,380
there's a whole bunch of stuff you have

00:22:00,750 --> 00:22:05,640
to do if you're doing a iOS builds an

00:22:04,380 --> 00:22:08,400
Xcode which was that there was a talk

00:22:05,640 --> 00:22:09,960
about yesterday I don't do i io s and

00:22:08,400 --> 00:22:13,290
Xcode I don't know anything about that

00:22:09,960 --> 00:22:16,080
stuff but I don't have to because I'm

00:22:13,290 --> 00:22:20,460
not in that edge of the basil ecosystem

00:22:16,080 --> 00:22:24,660
I'm in other parts of it okay so we

00:22:20,460 --> 00:22:28,200
brought this in via the pinned Mayville

00:22:24,660 --> 00:22:29,760
the pinned maven install mechanism so

00:22:28,200 --> 00:22:33,120
now we're gonna go see how we would use

00:22:29,760 --> 00:22:36,270
that so this time my top-level build

00:22:33,120 --> 00:22:37,200
file only has the jdk stuff right

00:22:36,270 --> 00:22:39,780
because you remember I mentioned that

00:22:37,200 --> 00:22:43,140
each file that has a build file each

00:22:39,780 --> 00:22:48,030
directory has a build file is a maven

00:22:43,140 --> 00:22:50,340
module or a basil module sorry um in a

00:22:48,030 --> 00:22:52,410
real project of complexity you wouldn't

00:22:50,340 --> 00:22:53,730
just pile everything into one build file

00:22:52,410 --> 00:22:55,380
at the top of your project it would

00:22:53,730 --> 00:22:58,170
quickly become you know disaster

00:22:55,380 --> 00:23:00,240
manageable so instead you end up pushing

00:22:58,170 --> 00:23:02,520
the instructions of how to build each

00:23:00,240 --> 00:23:04,410
piece further and further down it kind

00:23:02,520 --> 00:23:07,430
of into the into the tips into the leaf

00:23:04,410 --> 00:23:11,640
nodes of your project so I followed

00:23:07,430 --> 00:23:13,950
maven directory naming practices here

00:23:11,640 --> 00:23:15,750
you don't have to when there's there's

00:23:13,950 --> 00:23:17,970
no law that says they have to be lined

00:23:15,750 --> 00:23:19,620
up that way but just so many Java

00:23:17,970 --> 00:23:21,030
projects are that I've followed the

00:23:19,620 --> 00:23:22,950
pattern so here we are here's a

00:23:21,030 --> 00:23:25,470
different variation of the greeter this

00:23:22,950 --> 00:23:27,660
is the one that uses that that run files

00:23:25,470 --> 00:23:29,940
mechanism and that that's kind of a

00:23:27,660 --> 00:23:31,500
Google specific mechanism it's anybody

00:23:29,940 --> 00:23:34,320
ever used the Google Java run files

00:23:31,500 --> 00:23:35,670
mechanism I know there's like at least a

00:23:34,320 --> 00:23:38,820
Googler two in the room you haven't used

00:23:35,670 --> 00:23:40,440
it okay so I'm gonna skip the details of

00:23:38,820 --> 00:23:42,090
actions I can skip this resources

00:23:40,440 --> 00:23:44,220
directory the important thing is that

00:23:42,090 --> 00:23:47,070
instead of doing that java binary

00:23:44,220 --> 00:23:49,260
library stuff down deep or at the top of

00:23:47,070 --> 00:23:52,230
the project than having long path to the

00:23:49,260 --> 00:23:54,000
code I can do it I can put that file

00:23:52,230 --> 00:23:55,980
down next to the code see it's

00:23:54,000 --> 00:23:58,700
immediately adjacent to the code and so

00:23:55,980 --> 00:24:01,410
then when it refers to the source code

00:23:58,700 --> 00:24:03,090
it just like uses the name it's right

00:24:01,410 --> 00:24:06,660
there you don't like repeat that long

00:24:03,090 --> 00:24:08,760
path again and again everything in here

00:24:06,660 --> 00:24:10,650
is analogous to what you just saw

00:24:08,760 --> 00:24:14,910
but with shorter paths because we put

00:24:10,650 --> 00:24:17,160
the build file next to the code now

00:24:14,910 --> 00:24:19,110
there is there are there are caveats

00:24:17,160 --> 00:24:20,550
around this I don't want to get too deep

00:24:19,110 --> 00:24:24,210
into Java but someone had mentioned

00:24:20,550 --> 00:24:26,190
yesterday in one of their talks that in

00:24:24,210 --> 00:24:28,980
their project they had chosen the

00:24:26,190 --> 00:24:32,460
granularity of one build file per java

00:24:28,980 --> 00:24:34,140
package which is a per directory and I

00:24:32,460 --> 00:24:35,700
think that's a really good default

00:24:34,140 --> 00:24:37,650
that's probably a better default than

00:24:35,700 --> 00:24:39,510
like one build file at the top for the

00:24:37,650 --> 00:24:42,690
whole thing but you should test

00:24:39,510 --> 00:24:44,370
performance trade-offs because the java

00:24:42,690 --> 00:24:45,930
compiler is actually really good at

00:24:44,370 --> 00:24:48,090
efficiently compiling a whole bunch of

00:24:45,930 --> 00:24:50,070
files that cross refer and so it's

00:24:48,090 --> 00:24:51,870
possible you might slow down your total

00:24:50,070 --> 00:24:55,170
build by dividing it into many separate

00:24:51,870 --> 00:24:56,760
build rules so you know you may get more

00:24:55,170 --> 00:24:58,950
performance by picking a little bit

00:24:56,760 --> 00:25:02,370
bigger granularity not not not a single

00:24:58,950 --> 00:25:04,110
compile for 70,000 Java files but it's

00:25:02,370 --> 00:25:06,720
possible that a separate compile for

00:25:04,110 --> 00:25:08,400
each group of five files might cost you

00:25:06,720 --> 00:25:09,020
some some time I see something smiling

00:25:08,400 --> 00:25:12,140
here that happened

00:25:09,020 --> 00:25:13,730
you okay so I smiled fun thought I

00:25:12,140 --> 00:25:16,880
might've interpreted as that happened to

00:25:13,730 --> 00:25:19,100
me but what I've done here I only have

00:25:16,880 --> 00:25:21,110
one Java file so my granularity is sort

00:25:19,100 --> 00:25:25,730
of obvious right I have one file

00:25:21,110 --> 00:25:27,590
I had asked earlier and there Java was

00:25:25,730 --> 00:25:30,740
the most popular language in the in the

00:25:27,590 --> 00:25:34,070
room so I am I'm happy to take more

00:25:30,740 --> 00:25:37,090
questions here but there's one bit you

00:25:34,070 --> 00:25:37,090
find the important bit

00:25:46,030 --> 00:25:50,470
I'm trying to figure out on this one I

00:25:48,580 --> 00:25:50,770
didn't actually do the import I remember

00:25:50,470 --> 00:25:54,210
now

00:25:50,770 --> 00:25:57,340
so in this one I had brought in J unit

00:25:54,210 --> 00:26:01,020
to use for testing but then I realized

00:25:57,340 --> 00:26:04,530
later that when you do your tests here

00:26:01,020 --> 00:26:09,070
although I might have referred to J unit

00:26:04,530 --> 00:26:11,650
it appears to me that the Maven Java

00:26:09,070 --> 00:26:14,050
testing rule puts J unit in your class

00:26:11,650 --> 00:26:15,760
path for you so I think I found last

00:26:14,050 --> 00:26:18,640
time I did this that I could skip this

00:26:15,760 --> 00:26:20,860
and it worked fine but I left it in here

00:26:18,640 --> 00:26:22,860
because it illustrates the a name

00:26:20,860 --> 00:26:25,510
mangling process remember I said that

00:26:22,860 --> 00:26:26,830
things you in the workspace make other

00:26:25,510 --> 00:26:29,500
workspaces available

00:26:26,830 --> 00:26:31,930
well that maven import process makes one

00:26:29,500 --> 00:26:34,090
available under the name maven which you

00:26:31,930 --> 00:26:37,870
can see right there and then the

00:26:34,090 --> 00:26:40,150
specific thing maven package you

00:26:37,870 --> 00:26:44,350
imported it's name gets mangled to

00:26:40,150 --> 00:26:46,960
become this part right so let's get that

00:26:44,350 --> 00:26:51,070
in front of us so when I brought in a

00:26:46,960 --> 00:26:53,430
thing called J unit : J unit with a

00:26:51,070 --> 00:26:58,330
version number that got made available

00:26:53,430 --> 00:27:01,920
inside even / / : J unit underscore

00:26:58,330 --> 00:27:01,920
gentleman without the version number

00:27:02,340 --> 00:27:08,200
it is possible perhaps with a little

00:27:05,800 --> 00:27:10,570
effort to use multiple versions of a

00:27:08,200 --> 00:27:13,540
dependency inside basil but I would say

00:27:10,570 --> 00:27:17,080
that basil overall both its design it's

00:27:13,540 --> 00:27:19,150
sort of ethos it kind of assumes you're

00:27:17,080 --> 00:27:21,520
doing the single version policy thing

00:27:19,150 --> 00:27:22,450
that Googlers talk about regularly raise

00:27:21,520 --> 00:27:25,990
your hand you know if the single version

00:27:22,450 --> 00:27:27,630
policy is not very many okay so the

00:27:25,990 --> 00:27:31,630
single version policy is the idea that

00:27:27,630 --> 00:27:33,760
inside a company you pick a you pick one

00:27:31,630 --> 00:27:36,190
single version of every external

00:27:33,760 --> 00:27:37,870
dependency and that becomes the version

00:27:36,190 --> 00:27:39,910
used for everything in the whole company

00:27:37,870 --> 00:27:41,920
and so then when you upgrade that

00:27:39,910 --> 00:27:44,320
dependency you upgrade it synchronously

00:27:41,920 --> 00:27:46,210
for everyone in the whole company to do

00:27:44,320 --> 00:27:48,810
this user need to be in a giant mono

00:27:46,210 --> 00:27:51,480
repo or in that kind of the virtual mono

00:27:48,810 --> 00:27:54,430
rapido repair do you see floating around

00:27:51,480 --> 00:27:55,330
the single version policy is mostly a

00:27:54,430 --> 00:27:57,460
great idea

00:27:55,330 --> 00:27:59,590
but there are awful contexts where it

00:27:57,460 --> 00:28:01,600
doesn't work very well at all

00:27:59,590 --> 00:28:05,019
so I'm not saying you have to use it but

00:28:01,600 --> 00:28:06,940
like by the nature of design Basel would

00:28:05,019 --> 00:28:08,740
really like you to be using the single

00:28:06,940 --> 00:28:10,389
version policy it would like you to be

00:28:08,740 --> 00:28:11,980
working in a mono repo with the single

00:28:10,389 --> 00:28:14,919
version policy and I think that's a

00:28:11,980 --> 00:28:15,870
pretty good idea but you know it's not

00:28:14,919 --> 00:28:18,519
everyone does it

00:28:15,870 --> 00:28:21,669
who here has a giant amount of refill in

00:28:18,519 --> 00:28:24,100
their company where they work that's not

00:28:21,669 --> 00:28:25,720
bad for the sake of the video about 10

00:28:24,100 --> 00:28:31,929
percent of the people in the room are in

00:28:25,720 --> 00:28:33,970
a mono repo great I work in a

00:28:31,929 --> 00:28:35,649
consultancy in a consultancy we have

00:28:33,970 --> 00:28:37,960
bits of code that belong to many

00:28:35,649 --> 00:28:39,789
different customers who would not be all

00:28:37,960 --> 00:28:41,440
interested in us like combining all

00:28:39,789 --> 00:28:43,659
their code into one mono repo so I am

00:28:41,440 --> 00:28:56,320
forever cursed to not be an amount of

00:28:43,659 --> 00:29:00,999
repo myself questions ok what tell me a

00:28:56,320 --> 00:29:03,610
line number the line is 10 9 10 ok so

00:29:00,999 --> 00:29:06,789
this is relative to one of the generated

00:29:03,610 --> 00:29:10,629
directors in our local space not in the

00:29:06,789 --> 00:29:13,690
workspace itself so the network spaces

00:29:10,629 --> 00:29:16,539
so at maven means in the maven workspace

00:29:13,690 --> 00:29:19,629
so in my workspace file when I when I

00:29:16,539 --> 00:29:22,690
ran these maven rules unfortunately like

00:29:19,629 --> 00:29:26,139
this is kind of an irritation many rules

00:29:22,690 --> 00:29:28,779
have a convention that they state a name

00:29:26,139 --> 00:29:30,100
when you use them but not all of them do

00:29:28,779 --> 00:29:33,730
that so I'm gonna leave that there but

00:29:30,100 --> 00:29:36,279
commented some of them you just have to

00:29:33,730 --> 00:29:38,889
know that that this rule brought in a

00:29:36,279 --> 00:29:40,379
workspace called maven and so when I

00:29:38,889 --> 00:29:43,299
refer to it

00:29:40,379 --> 00:29:45,909
slash slash means the root of the

00:29:43,299 --> 00:29:48,549
workspace and then there's a convention

00:29:45,909 --> 00:29:51,039
implemented by the maven by the basil

00:29:48,549 --> 00:29:53,350
maven machinery that makes each

00:29:51,039 --> 00:29:57,129
dependency available in a name like this

00:29:53,350 --> 00:29:59,909
organization underscore project yeah but

00:29:57,129 --> 00:30:03,070
in so few good if you go to the

00:29:59,909 --> 00:30:06,940
workspace itself yeah there is no such a

00:30:03,070 --> 00:30:08,559
thing as unit J unit so it you have to

00:30:06,940 --> 00:30:12,669
go in right one of the no right here out

00:30:08,559 --> 00:30:13,440
dart where when I when I set up the

00:30:12,669 --> 00:30:16,620
basin

00:30:13,440 --> 00:30:19,259
Mayville basil maven rules

00:30:16,620 --> 00:30:20,820
I only listed one thing I wanted to

00:30:19,259 --> 00:30:22,620
bring in from the answer which was J

00:30:20,820 --> 00:30:25,259
unit so that that's where it came from

00:30:22,620 --> 00:30:27,179
so you would have to you could study the

00:30:25,259 --> 00:30:30,179
documentation and the patterns for using

00:30:27,179 --> 00:30:32,159
the basil maven rules and fortunately

00:30:30,179 --> 00:30:33,690
like there's there's not much to

00:30:32,159 --> 00:30:35,850
understand once you've used this for a

00:30:33,690 --> 00:30:37,710
day you'll know the pattern for the end

00:30:35,850 --> 00:30:39,450
of time but yeah that that's where that

00:30:37,710 --> 00:30:41,789
name came from so it's not it's not

00:30:39,450 --> 00:30:44,610
relative to the build file this is

00:30:41,789 --> 00:30:46,139
relative to the generated maven

00:30:44,610 --> 00:30:50,429
workspace that was generated by those

00:30:46,139 --> 00:30:53,669
rules when they ran more questions about

00:30:50,429 --> 00:30:54,990
the sky because we're gonna kick it up

00:30:53,669 --> 00:30:57,149
another notch in the next one we're

00:30:54,990 --> 00:31:02,299
gonna add a whole new kind of complexity

00:30:57,149 --> 00:31:05,669
not yet seen okay so did anybody try

00:31:02,299 --> 00:31:08,580
compiling and wants any help with any

00:31:05,669 --> 00:31:12,899
small edit they maybe I go ahead um this

00:31:08,580 --> 00:31:15,870
is a Java library which is if I want to

00:31:12,899 --> 00:31:17,429
publish it out oh so you're saying if

00:31:15,870 --> 00:31:19,980
you want to get the output well it's

00:31:17,429 --> 00:31:22,440
actually the same the same idea no I

00:31:19,980 --> 00:31:25,080
mean publish it out too and artifactory

00:31:22,440 --> 00:31:35,039
so that other people can consume oh ok

00:31:25,080 --> 00:31:37,019
so in the kind of basil google mono repo

00:31:35,039 --> 00:31:39,659
way of thinking about the world like you

00:31:37,019 --> 00:31:41,190
probably wouldn't do that but but you

00:31:39,659 --> 00:31:43,889
could do that there are rules there are

00:31:41,190 --> 00:31:46,620
rules that you can use to do that here

00:31:43,889 --> 00:31:48,210
you could just take the jar file and use

00:31:46,620 --> 00:31:50,070
the command-line maven publishing tool

00:31:48,210 --> 00:31:51,179
if you wanted but I believe there's

00:31:50,070 --> 00:31:56,250
something in there that helps you

00:31:51,179 --> 00:31:58,710
publish I have seen and helped companies

00:31:56,250 --> 00:32:00,779
go down the path of using an internal

00:31:58,710 --> 00:32:03,779
maven repository as their code sharing

00:32:00,779 --> 00:32:05,580
mechanism inside their company I would

00:32:03,779 --> 00:32:07,379
say that is a good way to spend a

00:32:05,580 --> 00:32:10,080
tremendous amount of time and money

00:32:07,379 --> 00:32:14,519
developing software it's maybe I mean

00:32:10,080 --> 00:32:16,139
like living through that and the costs

00:32:14,519 --> 00:32:19,049
that you incur over time with that

00:32:16,139 --> 00:32:22,529
approach makes a very strong argument

00:32:19,049 --> 00:32:24,809
for the single version mono mono repo

00:32:22,529 --> 00:32:26,710
approach to software development but you

00:32:24,809 --> 00:32:28,600
can do it with this

00:32:26,710 --> 00:32:38,520
but I would I would be cautious to

00:32:28,600 --> 00:32:43,500
encourage that approach even installed

00:32:38,520 --> 00:32:45,790
to JSON for you that yes so this is the

00:32:43,500 --> 00:32:48,310
pinning file so this is part of the

00:32:45,790 --> 00:32:49,870
machinery wear that you use that maven

00:32:48,310 --> 00:32:53,290
uses to lock down and make sure you got

00:32:49,870 --> 00:32:55,780
the exact version um so there are

00:32:53,290 --> 00:32:58,750
dependencies and direct dependencies is

00:32:55,780 --> 00:33:01,840
I mean is this auto-generated or do you

00:32:58,750 --> 00:33:03,820
really yeah I did not write this so if

00:33:01,840 --> 00:33:05,830
you're using maven at the command line

00:33:03,820 --> 00:33:08,290
it will output this when you tell it to

00:33:05,830 --> 00:33:13,480
make a pinning file or if you're using

00:33:08,290 --> 00:33:15,280
maven via basil I included some of the

00:33:13,480 --> 00:33:17,440
commands you might use to get started in

00:33:15,280 --> 00:33:18,940
comments but to avoid getting too far

00:33:17,440 --> 00:33:20,380
down the path in here in the short time

00:33:18,940 --> 00:33:21,820
we have abound like the details of the

00:33:20,380 --> 00:33:24,520
Java support I didn't actually go

00:33:21,820 --> 00:33:26,860
through running them here but if you

00:33:24,520 --> 00:33:28,330
start down this path you'll find that it

00:33:26,860 --> 00:33:30,100
just these commands are really all you

00:33:28,330 --> 00:33:33,100
need to do that one of the commands

00:33:30,100 --> 00:33:34,720
generates the pinning file and then the

00:33:33,100 --> 00:33:36,850
other commands consume the pinning file

00:33:34,720 --> 00:33:38,680
so basically this will take care of

00:33:36,850 --> 00:33:40,300
putting the dependencies off the

00:33:38,680 --> 00:33:43,900
dependencies in the class path as well

00:33:40,300 --> 00:33:46,330
yes yep yep and so the the generated

00:33:43,900 --> 00:33:47,970
targets so this generated target right

00:33:46,330 --> 00:33:52,600
here

00:33:47,970 --> 00:33:54,610
that is a target that contains j-unit

00:33:52,600 --> 00:33:56,770
and all of its transitive dependencies

00:33:54,610 --> 00:34:00,160
and that's an idea that we'll see again

00:33:56,770 --> 00:34:01,600
and again so in fact I could it's hard

00:34:00,160 --> 00:34:04,030
to illustrate here because we only have

00:34:01,600 --> 00:34:05,740
one dependency listed we'll see a

00:34:04,030 --> 00:34:08,230
variation of this on the next one that's

00:34:05,740 --> 00:34:09,610
a little more complexity but there's

00:34:08,230 --> 00:34:12,550
this idea that at the top of your

00:34:09,610 --> 00:34:16,240
project you specify all of your external

00:34:12,550 --> 00:34:19,480
dependencies and then at the build file

00:34:16,240 --> 00:34:21,490
level you then narrowly define what

00:34:19,480 --> 00:34:24,940
dependencies are available to build just

00:34:21,490 --> 00:34:27,310
this piece of code right so it doesn't

00:34:24,940 --> 00:34:28,540
automatically take all the jar files for

00:34:27,310 --> 00:34:31,270
all your dependencies and put on the

00:34:28,540 --> 00:34:33,850
class path for everything it only puts

00:34:31,270 --> 00:34:36,820
the stuff that you asked it to so here

00:34:33,850 --> 00:34:39,270
in the build file up if I clicked away

00:34:36,820 --> 00:34:39,270
from the

00:34:39,770 --> 00:34:42,770
to the correct build file here in the

00:34:41,929 --> 00:34:46,190
build file

00:34:42,770 --> 00:34:47,240
I guess this other build file I asked

00:34:46,190 --> 00:34:49,340
for j-unit

00:34:47,240 --> 00:34:51,470
I asked Virginia and it's transitive

00:34:49,340 --> 00:34:53,300
dependencies that's very important let's

00:34:51,470 --> 00:34:54,919
say you've had a hundred incoming maven

00:34:53,300 --> 00:34:56,179
artifacts and there's another you know

00:34:54,919 --> 00:35:00,440
one hundred transitive dependencies or

00:34:56,179 --> 00:35:02,840
whatever if you included all those in

00:35:00,440 --> 00:35:06,310
the class path for everything

00:35:02,840 --> 00:35:09,050
then anytime you had a version bump of

00:35:06,310 --> 00:35:11,600
any of your dependencies you have to

00:35:09,050 --> 00:35:14,960
rebuild and retest everything but by

00:35:11,600 --> 00:35:16,520
narrowing the dependencies that idea

00:35:14,960 --> 00:35:20,060
that we're basil is managing this build

00:35:16,520 --> 00:35:21,830
dependency graph it knows what it has to

00:35:20,060 --> 00:35:25,310
rebuild because it knows what changed

00:35:21,830 --> 00:35:28,010
because you told it what changed one

00:35:25,310 --> 00:35:32,119
last question if there is like a diamond

00:35:28,010 --> 00:35:35,720
dependency problem where one like yeah

00:35:32,119 --> 00:35:37,850
yeah okay so dependency management is a

00:35:35,720 --> 00:35:39,800
gigantic pain that's why there is the

00:35:37,850 --> 00:35:41,600
comment on the main stage yesterday that

00:35:39,800 --> 00:35:42,740
the workspace file is starting to look

00:35:41,600 --> 00:35:44,300
like it might have to grow into a

00:35:42,740 --> 00:35:46,010
dependency manager and they really

00:35:44,300 --> 00:35:48,770
really don't want to do that because

00:35:46,010 --> 00:35:50,030
it's a gigantic pain one of the ways in

00:35:48,770 --> 00:35:52,250
which it's a pain is the diamond

00:35:50,030 --> 00:35:55,130
dependency problem in this example you

00:35:52,250 --> 00:35:57,350
see in front of you we are delegating

00:35:55,130 --> 00:35:59,750
dependency resolution to the Maven

00:35:57,350 --> 00:36:02,330
machinery for dependency resolution so

00:35:59,750 --> 00:36:04,750
basil is doing precisely nothing to do

00:36:02,330 --> 00:36:07,580
with the diamond dependency problem here

00:36:04,750 --> 00:36:10,550
yeah that but that that is a giant pain

00:36:07,580 --> 00:36:12,410
and that the single version policy frees

00:36:10,550 --> 00:36:13,369
you you never hit the diamond dependency

00:36:12,410 --> 00:36:15,980
problem if you have the single version

00:36:13,369 --> 00:36:18,580
policy because it gets resolved kind of

00:36:15,980 --> 00:36:26,690
by by these set of of what you chose

00:36:18,580 --> 00:36:33,770
right but uh yeah okay any more

00:36:26,690 --> 00:36:36,680
questions on this bit okay we're gonna

00:36:33,770 --> 00:36:37,340
step it up a notch we've seen go we've

00:36:36,680 --> 00:36:39,859
seen Java

00:36:37,340 --> 00:36:41,270
let's see them together so as before I'm

00:36:39,859 --> 00:36:43,460
gonna assume you are now an expert and

00:36:41,270 --> 00:36:45,109
everything we have seen and go real fast

00:36:43,460 --> 00:36:47,390
in the beginning so the Basel version

00:36:45,109 --> 00:36:50,180
I'm using this nice latest and greatest

00:36:47,390 --> 00:36:53,300
again Basel are see nothing new this is

00:36:50,180 --> 00:36:56,090
exactly as you've seen now

00:36:53,300 --> 00:36:58,640
when it starts to get interesting so now

00:36:56,090 --> 00:37:00,200
I want to use Java and I want to use go

00:36:58,640 --> 00:37:00,980
because I'm making a multi language

00:37:00,200 --> 00:37:04,220
project

00:37:00,980 --> 00:37:05,900
well that means my workspace has to have

00:37:04,220 --> 00:37:09,920
all the Java stuff and all the ghost

00:37:05,900 --> 00:37:11,690
stuff now if you've been using this a

00:37:09,920 --> 00:37:13,490
while it's not that hard to put together

00:37:11,690 --> 00:37:14,510
a workspace it has all the job of stuff

00:37:13,490 --> 00:37:16,790
and the ghost stuff let me just go

00:37:14,510 --> 00:37:18,620
through it briefly here so we start with

00:37:16,790 --> 00:37:21,830
the HTTP archive we bring in the Java

00:37:18,620 --> 00:37:23,720
rules we bring in the the the transitive

00:37:21,830 --> 00:37:26,150
loading stuff from the Java rules and we

00:37:23,720 --> 00:37:28,340
invoke it we break we go get our JDK s

00:37:26,150 --> 00:37:29,870
now I'm gonna use protocol buffers in G

00:37:28,340 --> 00:37:31,430
RPC to talk between these two programs

00:37:29,870 --> 00:37:35,000
razor and if you know what protocol

00:37:31,430 --> 00:37:37,760
buffers in gr PCR I am so happy to hear

00:37:35,000 --> 00:37:41,240
that for those that haven't it is a a

00:37:37,760 --> 00:37:43,760
typed a schema based RPC across the wire

00:37:41,240 --> 00:37:48,220
or to the disks data persistence and RPC

00:37:43,760 --> 00:37:51,980
mechanism if you're writing code by hand

00:37:48,220 --> 00:37:54,080
to like put stuff in in JSON and then

00:37:51,980 --> 00:37:56,270
writing code by hand to know the meaning

00:37:54,080 --> 00:37:58,610
of the fields on the other end I suggest

00:37:56,270 --> 00:38:01,730
you stop because it's a really bad way

00:37:58,610 --> 00:38:03,560
to do it so I don't know if G RPC is not

00:38:01,730 --> 00:38:06,380
a right for everybody but it or wanted

00:38:03,560 --> 00:38:08,600
it or one of its competitors is almost

00:38:06,380 --> 00:38:13,540
always a better choice than doing kind

00:38:08,600 --> 00:38:18,440
of ad hoc string based RPC okay so

00:38:13,540 --> 00:38:20,720
protobuf sits underneath G RPC I have to

00:38:18,440 --> 00:38:22,820
know that as a workspace author so here

00:38:20,720 --> 00:38:25,220
I am loading the rules for protobuf now

00:38:22,820 --> 00:38:27,710
did I have to write this no I didn't I

00:38:25,220 --> 00:38:29,840
went to the github page or the

00:38:27,710 --> 00:38:33,110
documentation page for the protobuf

00:38:29,840 --> 00:38:38,270
rules for basil and I copy pasted this

00:38:33,110 --> 00:38:42,380
block and I brought it in like the Java

00:38:38,270 --> 00:38:44,570
support we just saw it has to load

00:38:42,380 --> 00:38:46,550
dependencies so again it can't load its

00:38:44,570 --> 00:38:48,440
own dependencies it has to make

00:38:46,550 --> 00:38:50,150
available to me a couple of functions

00:38:48,440 --> 00:38:53,420
and I'm basically giving it permission

00:38:50,150 --> 00:38:56,180
to load its dependencies next there's a

00:38:53,420 --> 00:38:57,950
layer that connects this G RPC RPC

00:38:56,180 --> 00:39:00,980
mechanism compiles it for Java

00:38:57,950 --> 00:39:03,890
I have to go load that and it has

00:39:00,980 --> 00:39:05,810
dependencies so again although I was I

00:39:03,890 --> 00:39:07,130
was able to copy this chunk from some

00:39:05,810 --> 00:39:10,039
documentation somewhere

00:39:07,130 --> 00:39:13,369
still at the workspace level I have to

00:39:10,039 --> 00:39:17,180
go give it permission or instruct it to

00:39:13,369 --> 00:39:18,710
load its dependencies and now rules JVM

00:39:17,180 --> 00:39:20,119
external we've seen that that's what

00:39:18,710 --> 00:39:22,700
gets our ability to pull code in via

00:39:20,119 --> 00:39:24,589
maven so that appears and that that's

00:39:22,700 --> 00:39:28,309
everything down to here

00:39:24,589 --> 00:39:29,660
now I want to use go in the same project

00:39:28,309 --> 00:39:31,369
so here we are I just I just brought in

00:39:29,660 --> 00:39:33,170
all that same go stuff again and I

00:39:31,369 --> 00:39:34,279
brought in gazelle again because why did

00:39:33,170 --> 00:39:36,259
I bring in a gazelle what I'm not

00:39:34,279 --> 00:39:38,690
actually using gazelle gazelle is where

00:39:36,259 --> 00:39:41,359
the rule lives that lets me load

00:39:38,690 --> 00:39:42,680
external dependencies for go and I

00:39:41,359 --> 00:39:44,119
wanted to do that so our broadened

00:39:42,680 --> 00:39:47,269
gazelle so I could load an external

00:39:44,119 --> 00:39:49,759
dependency III let it you know specify

00:39:47,269 --> 00:39:51,920
and manage the go version so now I could

00:39:49,759 --> 00:39:55,009
run this basil file on a computer that

00:39:51,920 --> 00:39:57,049
had no go had no Java and had none of

00:39:55,009 --> 00:39:58,940
the GRP seaport above stuff and it's

00:39:57,049 --> 00:40:00,979
managing bringing all that code to run

00:39:58,940 --> 00:40:02,420
and compile it and in fact it does so

00:40:00,979 --> 00:40:05,539
successfully it costs three operating

00:40:02,420 --> 00:40:06,950
systems so on the one hand this is like

00:40:05,539 --> 00:40:08,269
only the fourth workspace you've seen

00:40:06,950 --> 00:40:10,339
today on the other hand this is I

00:40:08,269 --> 00:40:12,619
believe a reasonably correct workspace

00:40:10,339 --> 00:40:15,400
as illustrated by it it actually works

00:40:12,619 --> 00:40:18,410
across multiple operating systems ok so

00:40:15,400 --> 00:40:19,940
here we are using that go mechanism to

00:40:18,410 --> 00:40:21,979
bring in dependencies and again a little

00:40:19,940 --> 00:40:23,599
frustration because this top one is is

00:40:21,979 --> 00:40:25,940
this thing called slim that that's a

00:40:23,599 --> 00:40:27,739
dependency I'm using but again because

00:40:25,940 --> 00:40:29,569
the way workspaces work they're not

00:40:27,739 --> 00:40:30,619
recursive they can't go fetch things

00:40:29,569 --> 00:40:33,170
can't go through just automatically

00:40:30,619 --> 00:40:35,690
fetch their own dependencies I have to

00:40:33,170 --> 00:40:37,039
know that if I'm using G RPC with go

00:40:35,690 --> 00:40:41,529
that I have to bring in these three

00:40:37,039 --> 00:40:43,640
things so you might be thinking wow

00:40:41,529 --> 00:40:46,759
that's now a hundred it's only two

00:40:43,640 --> 00:40:49,309
languages and one RPC mechanism and it's

00:40:46,759 --> 00:40:50,569
a hundred and eighty-three lines and it

00:40:49,309 --> 00:40:53,059
seemed like there was a lot to

00:40:50,569 --> 00:40:55,279
understand and how on earth would I know

00:40:53,059 --> 00:40:57,380
that I had like versions of all this

00:40:55,279 --> 00:40:58,670
stuff that's compatible has any raise

00:40:57,380 --> 00:40:59,450
your hand if you've thought that in your

00:40:58,670 --> 00:41:01,700
to yourself yet

00:40:59,450 --> 00:41:03,680
I'm disappointed only a few have thought

00:41:01,700 --> 00:41:07,160
that if you start using this you will

00:41:03,680 --> 00:41:08,869
run into this this again this is the

00:41:07,160 --> 00:41:11,599
exact problem that Federation that you

00:41:08,869 --> 00:41:13,579
heard mentioned yesterday solves so with

00:41:11,599 --> 00:41:14,960
Federation if if these tools were in

00:41:13,579 --> 00:41:16,130
Federation and since they're like core

00:41:14,960 --> 00:41:17,960
Google things they will almost certainly

00:41:16,130 --> 00:41:20,150
make their way in Federation you would

00:41:17,960 --> 00:41:20,960
delete this whole workspace and put in a

00:41:20,150 --> 00:41:23,150
very short

00:41:20,960 --> 00:41:24,680
lines that say go get me all the

00:41:23,150 --> 00:41:26,720
matching versions that someone else

00:41:24,680 --> 00:41:29,240
figured out of these tools and it would

00:41:26,720 --> 00:41:31,280
all just work but that is a that's a

00:41:29,240 --> 00:41:33,829
great future thing coming for today if

00:41:31,280 --> 00:41:35,420
you want to use Java and go in gr PC you

00:41:33,829 --> 00:41:39,829
need something pretty close to what you

00:41:35,420 --> 00:41:41,780
have in front of you you here okay any

00:41:39,829 --> 00:41:43,700
questions about this workspace so there

00:41:41,780 --> 00:41:48,940
surely must be some because it's a

00:41:43,700 --> 00:41:55,309
hundred and eighty-three lines long yeah

00:41:48,940 --> 00:41:57,470
can you think okay so the question was

00:41:55,309 --> 00:41:59,180
how does it know which JDK so that is

00:41:57,470 --> 00:42:01,819
just brought over from the previous step

00:41:59,180 --> 00:42:04,760
in my top level build file I'm using the

00:42:01,819 --> 00:42:07,579
alias and select mechanisms to pick the

00:42:04,760 --> 00:42:19,880
right one okay more questions about this

00:42:07,579 --> 00:42:21,710
this workspace cool okay we have a

00:42:19,880 --> 00:42:25,280
front-end program it's written and go

00:42:21,710 --> 00:42:26,990
now again I'm not a go developer so the

00:42:25,280 --> 00:42:28,430
details of the go don't matter I mean

00:42:26,990 --> 00:42:29,900
I'm enough of a go developer to write

00:42:28,430 --> 00:42:33,319
this program but I'm not really a go

00:42:29,900 --> 00:42:35,390
developer it's using that slim thing

00:42:33,319 --> 00:42:38,450
that's slim is the thing that like takes

00:42:35,390 --> 00:42:40,280
this like indented form of HTML and like

00:42:38,450 --> 00:42:42,740
does some substitution it's equivalent

00:42:40,280 --> 00:42:44,540
to like I don't know ER B or a hundred

00:42:42,740 --> 00:42:48,890
other tools like it in the world PHP

00:42:44,540 --> 00:42:52,549
files whatever but importantly it brings

00:42:48,890 --> 00:42:56,540
in this this mechanism here this

00:42:52,549 --> 00:42:59,839
protobuf mechanism so protocol buffers

00:42:56,540 --> 00:43:03,079
takes an api and generates code for that

00:42:59,839 --> 00:43:06,319
api g RPC layers on top of that to j g

00:43:03,079 --> 00:43:08,900
RPC mechanism for that api and so that

00:43:06,319 --> 00:43:11,540
code has to be used to compile this go

00:43:08,900 --> 00:43:13,490
code right so i can't really understand

00:43:11,540 --> 00:43:16,040
i you know i left into the first source

00:43:13,490 --> 00:43:17,780
code file but it turns out that hey you

00:43:16,040 --> 00:43:19,940
know what what is this that this came

00:43:17,780 --> 00:43:22,160
from somewhere else well actually the

00:43:19,940 --> 00:43:25,970
center of this system is this protocol

00:43:22,160 --> 00:43:28,490
buff thing so say about half the people

00:43:25,970 --> 00:43:31,160
we're familiar with protocol buffers so

00:43:28,490 --> 00:43:31,880
for those that aren't it's it's kind of

00:43:31,160 --> 00:43:34,370
who knows what

00:43:31,880 --> 00:43:36,470
IDL is

00:43:34,370 --> 00:43:39,500
or anybody used CORBA in the good old

00:43:36,470 --> 00:43:41,330
days all right okay so this idea has

00:43:39,500 --> 00:43:43,430
been reimplemented a zillion times and

00:43:41,330 --> 00:43:45,800
it basically is create a language

00:43:43,430 --> 00:43:47,870
neutral way of describing the shape of

00:43:45,800 --> 00:43:51,050
data in the shape of API calls and then

00:43:47,870 --> 00:43:53,530
compile that language neutral way toward

00:43:51,050 --> 00:43:55,610
many different language targets and

00:43:53,530 --> 00:43:57,170
everybody that does this has a slightly

00:43:55,610 --> 00:43:58,040
different twist on how they think it

00:43:57,170 --> 00:44:00,530
should be done

00:43:58,040 --> 00:44:02,390
protocol buffs is an especially nice one

00:44:00,530 --> 00:44:03,800
and although this is not about protocol

00:44:02,390 --> 00:44:06,140
buffs I want to point out why it's

00:44:03,800 --> 00:44:09,710
especially nice when you define

00:44:06,140 --> 00:44:11,360
structures you give an arbitrary number

00:44:09,710 --> 00:44:15,830
but kind of like a slot number basically

00:44:11,360 --> 00:44:17,570
to each field which means that you could

00:44:15,830 --> 00:44:20,030
actually rename the fields without

00:44:17,570 --> 00:44:22,700
breaking binary compatibility and that's

00:44:20,030 --> 00:44:24,830
really cool because in all of the

00:44:22,700 --> 00:44:26,150
systems and all of the idea like systems

00:44:24,830 --> 00:44:29,150
that don't have that capability

00:44:26,150 --> 00:44:30,710
if you step into an old project a 15

00:44:29,150 --> 00:44:33,020
year old project based on like you know

00:44:30,710 --> 00:44:35,420
the original core by I do every single

00:44:33,020 --> 00:44:38,660
field has a name that makes no sense

00:44:35,420 --> 00:44:40,310
anymore because it got that name when

00:44:38,660 --> 00:44:42,470
the project started and can never be

00:44:40,310 --> 00:44:43,910
changed so a nice thing about protocol

00:44:42,470 --> 00:44:46,280
buffs if you've never used anything like

00:44:43,910 --> 00:44:47,780
this is that it's more compatible with

00:44:46,280 --> 00:44:50,210
evolving the names of things over time

00:44:47,780 --> 00:44:52,340
than other similar tools are so that's

00:44:50,210 --> 00:44:54,080
my plug for protocol buffs the important

00:44:52,340 --> 00:44:58,570
thing is we're defining a very simple

00:44:54,080 --> 00:45:01,370
API so there there exists a service and

00:44:58,570 --> 00:45:03,770
you can add an entry to it and get a

00:45:01,370 --> 00:45:06,530
list of it and it's a grocery list I

00:45:03,770 --> 00:45:08,480
gave it to different RPC calls you could

00:45:06,530 --> 00:45:09,920
make because one didn't seem like enough

00:45:08,480 --> 00:45:12,380
but I didn't even implement the add

00:45:09,920 --> 00:45:15,830
entry version so my very simple service

00:45:12,380 --> 00:45:18,710
gets a grocery lists this is a

00:45:15,830 --> 00:45:21,230
definitely a sledgehammer being used to

00:45:18,710 --> 00:45:24,800
swat an app here to use G RPC to get a

00:45:21,230 --> 00:45:26,810
grocery list but hey okay so the details

00:45:24,800 --> 00:45:29,720
of it don't matter but this can be

00:45:26,810 --> 00:45:32,630
compiled into some go code and some Java

00:45:29,720 --> 00:45:35,000
code which make it easy for one to call

00:45:32,630 --> 00:45:36,560
the other and it like it is as typed as

00:45:35,000 --> 00:45:38,660
it can reasonably be so let's see how

00:45:36,560 --> 00:45:41,000
that comes together so we need to do

00:45:38,660 --> 00:45:43,430
some building we need to like run that

00:45:41,000 --> 00:45:45,890
run that that tooling that converts this

00:45:43,430 --> 00:45:48,530
protocol buffer thing to a Java thing

00:45:45,890 --> 00:45:50,780
and to a go thing

00:45:48,530 --> 00:45:52,490
so we've seen enough of these files by

00:45:50,780 --> 00:45:54,950
now you can probably read them right so

00:45:52,490 --> 00:45:56,960
load well load loads things from the

00:45:54,950 --> 00:45:58,880
workspace I won't go through it but I

00:45:56,960 --> 00:46:00,860
could take each of these identifiers and

00:45:58,880 --> 00:46:03,020
I could go search in the workspace to

00:46:00,860 --> 00:46:04,940
see where they came from and if you step

00:46:03,020 --> 00:46:06,380
into a new thing and you don't recognize

00:46:04,940 --> 00:46:07,520
any of these I would recommend that's

00:46:06,380 --> 00:46:08,690
that's you know that's what you should

00:46:07,520 --> 00:46:12,890
you go figure out where did that come

00:46:08,690 --> 00:46:14,390
from and then you step in the things you

00:46:12,890 --> 00:46:16,240
just have to know so you just have to

00:46:14,390 --> 00:46:18,830
know that the protocol buffer rules

00:46:16,240 --> 00:46:21,680
expose a thing called proto library and

00:46:18,830 --> 00:46:23,630
proto library is the first step so proto

00:46:21,680 --> 00:46:27,740
that compile this is the first step of

00:46:23,630 --> 00:46:29,240
compiling a protocol buffer file into

00:46:27,740 --> 00:46:31,220
sort of the generic binary

00:46:29,240 --> 00:46:36,200
representation of a protocol buffer file

00:46:31,220 --> 00:46:37,910
that's done here now I don't need like

00:46:36,200 --> 00:46:41,050
some kind of generic representation

00:46:37,910 --> 00:46:44,690
I need a Java and a go representation

00:46:41,050 --> 00:46:47,180
okay Java and go like encoding of that

00:46:44,690 --> 00:46:49,510
API because I'm using it to talk between

00:46:47,180 --> 00:46:55,369
my go program and my Java program well

00:46:49,510 --> 00:46:57,740
here is the rule for taking the protocol

00:46:55,369 --> 00:47:00,200
buffer stuff and making it ready to use

00:46:57,740 --> 00:47:02,750
with go again the details don't matter

00:47:00,200 --> 00:47:05,570
an interesting thing is kind of as they

00:47:02,750 --> 00:47:07,910
build engineer on a project you kind of

00:47:05,570 --> 00:47:09,619
don't care what's happening the right

00:47:07,910 --> 00:47:11,210
rule for the situation you kind of don't

00:47:09,619 --> 00:47:12,950
care what's happening inside it like I

00:47:11,210 --> 00:47:15,109
could go dig into the documentation to

00:47:12,950 --> 00:47:17,000
figure out what exactly all this means

00:47:15,109 --> 00:47:18,800
but it kind of doesn't matter all I know

00:47:17,000 --> 00:47:21,530
is it's gonna produce an output under

00:47:18,800 --> 00:47:25,790
the name API proto go and if I go look

00:47:21,530 --> 00:47:28,580
at that go code it will have defined a

00:47:25,790 --> 00:47:30,109
dependency on API proto go so all I

00:47:28,580 --> 00:47:31,340
needed to know is that was the right

00:47:30,109 --> 00:47:33,770
thing to compile that code were to

00:47:31,340 --> 00:47:35,300
consume and go and then I need to take

00:47:33,770 --> 00:47:39,109
that as a dependency when I'm compiling

00:47:35,300 --> 00:47:41,030
my go code another example of a label so

00:47:39,109 --> 00:47:43,850
slash slash means the top of the current

00:47:41,030 --> 00:47:46,730
workspace api def means go in this

00:47:43,850 --> 00:47:48,470
directory and then colon means go look

00:47:46,730 --> 00:47:51,790
in the build file in that directory for

00:47:48,470 --> 00:47:55,190
a thing called api proto go so line 9

00:47:51,790 --> 00:47:58,730
refers to line 14 in this file and the

00:47:55,190 --> 00:48:00,050
kind of recursive cross by name if i

00:47:58,730 --> 00:48:01,530
renamed one of these I would get an

00:48:00,050 --> 00:48:03,360
interesting bill there that it couldn't

00:48:01,530 --> 00:48:04,530
find the thing but I don't feel the need

00:48:03,360 --> 00:48:06,960
to create that bill there right now

00:48:04,530 --> 00:48:09,150
that's what that's what exercise is

00:48:06,960 --> 00:48:11,160
gonna be our exercise on this one is

00:48:09,150 --> 00:48:14,550
going to be renamed rename something and

00:48:11,160 --> 00:48:19,500
unbreak the system ok so then for for

00:48:14,550 --> 00:48:21,720
reasons that I do not know in the go

00:48:19,500 --> 00:48:23,700
support for protocol buffers a single

00:48:21,720 --> 00:48:26,820
rule handles the protocol buffer and the

00:48:23,700 --> 00:48:29,010
GRP see the Java rules need a separate

00:48:26,820 --> 00:48:32,040
ruling one rule for the protocol buffers

00:48:29,010 --> 00:48:34,770
and a separate rule for the GRP see now

00:48:32,040 --> 00:48:36,540
again the dthe why it is there's just

00:48:34,770 --> 00:48:37,860
some historical reason right of how it

00:48:36,540 --> 00:48:39,180
was written

00:48:37,860 --> 00:48:41,430
the important thing is like I could go

00:48:39,180 --> 00:48:43,200
read the documentation which I did then

00:48:41,430 --> 00:48:46,140
I invoke these things and now I get

00:48:43,200 --> 00:48:50,340
generated the Java code I need under

00:48:46,140 --> 00:48:52,560
that name to consume this from Java so

00:48:50,340 --> 00:48:54,600
now I have this this API defined and I

00:48:52,560 --> 00:48:56,010
generated Java code and in go code when

00:48:54,600 --> 00:48:57,300
phrase I'm gonna consumer from there and

00:48:56,010 --> 00:49:02,430
then I'm gonna have a call one to the

00:48:57,300 --> 00:49:06,420
other in this typed way now here's the

00:49:02,430 --> 00:49:09,720
go side again the the details here we go

00:49:06,420 --> 00:49:11,580
so right there so I import so the things

00:49:09,720 --> 00:49:14,610
that I generated I had told it to

00:49:11,580 --> 00:49:18,390
generate it under the name see if I can

00:49:14,610 --> 00:49:20,220
spot it there under the import path per

00:49:18,390 --> 00:49:23,000
toe grocery API so that then when I

00:49:20,220 --> 00:49:26,010
imported it and go there's the name

00:49:23,000 --> 00:49:28,500
proto grocery API and then this is just

00:49:26,010 --> 00:49:30,150
a local alias mechanism if you wanna

00:49:28,500 --> 00:49:31,950
have like a your own short name for

00:49:30,150 --> 00:49:33,600
something you imported and if I would

00:49:31,950 --> 00:49:36,600
read through here I could see like this

00:49:33,600 --> 00:49:38,400
is me calling the go mechanism for how I

00:49:36,600 --> 00:49:41,760
like talk to something that implements

00:49:38,400 --> 00:49:43,410
this grocery list service so again if I

00:49:41,760 --> 00:49:44,670
was giving the all-day explanation of

00:49:43,410 --> 00:49:46,200
this I would go through this line by

00:49:44,670 --> 00:49:47,670
line and why but it kind of doesn't

00:49:46,200 --> 00:49:50,160
matter from a basil point of view all

00:49:47,670 --> 00:49:53,550
that matters is somehow this code ended

00:49:50,160 --> 00:49:55,920
up here so the thing compile and run and

00:49:53,550 --> 00:50:00,720
then from the Java side which I called

00:49:55,920 --> 00:50:03,150
service there's something let me see it

00:50:00,720 --> 00:50:05,130
see if I can find there we go same idea

00:50:03,150 --> 00:50:08,100
those Java dependencies that got

00:50:05,130 --> 00:50:10,260
generated by the by the basil stuff over

00:50:08,100 --> 00:50:12,030
here is now available over here to

00:50:10,260 --> 00:50:15,060
consume from the java part of my build

00:50:12,030 --> 00:50:16,860
so I have a a common

00:50:15,060 --> 00:50:19,650
part of my build which has defines an

00:50:16,860 --> 00:50:21,330
API and then I'm like compiling that and

00:50:19,650 --> 00:50:24,150
making it available to this Java code in

00:50:21,330 --> 00:50:25,590
go code so any questions on like the the

00:50:24,150 --> 00:50:27,450
basic idea I'm gonna I'm trying to give

00:50:25,590 --> 00:50:29,400
like the fastest possible explanation of

00:50:27,450 --> 00:50:35,010
the overall idea so I'll take a question

00:50:29,400 --> 00:50:37,770
or two so I know several people we're

00:50:35,010 --> 00:50:39,750
using G RPC raise your hand if this

00:50:37,770 --> 00:50:45,360
makes total sense because you use G RPC

00:50:39,750 --> 00:50:47,130
I wish I saw more hands okay ask me a

00:50:45,360 --> 00:50:52,530
question that would clarify what's going

00:50:47,130 --> 00:50:55,590
on here Lance you can be a ringer if you

00:50:52,530 --> 00:50:57,060
have to what what why is it not obvious

00:50:55,590 --> 00:51:06,660
what why is not everyone raising their

00:50:57,060 --> 00:51:08,550
hand what's going on here any ideas hey

00:51:06,660 --> 00:51:11,370
maybe if I just run it maybe that'll

00:51:08,550 --> 00:51:12,690
make it more clear we'll try that okay I

00:51:11,370 --> 00:51:15,900
would encourage you to do this on your

00:51:12,690 --> 00:51:18,030
own machine as usual the exercise file

00:51:15,900 --> 00:51:27,030
has everything you need you can build it

00:51:18,030 --> 00:51:29,340
with basil build so basil build builds

00:51:27,030 --> 00:51:30,600
it all and I happen to know it'll build

00:51:29,340 --> 00:51:34,440
so I'm not gonna sit there and watch the

00:51:30,600 --> 00:51:35,940
build run the important thing is I want

00:51:34,440 --> 00:51:37,380
to be able to run the front end end the

00:51:35,940 --> 00:51:42,290
service and see them talk to each other

00:51:37,380 --> 00:51:45,870
right so I mentioned alias or earlier

00:51:42,290 --> 00:51:47,700
it's not fun to like type long label in

00:51:45,870 --> 00:51:49,350
you know slash slash app blah blah blah

00:51:47,700 --> 00:51:52,230
blah blah to the thing you want so even

00:51:49,350 --> 00:51:54,840
though I defined how to compile my java

00:51:52,230 --> 00:51:56,730
code way down deep inside this directory

00:51:54,840 --> 00:51:59,160
here see this really deep directory

00:51:56,730 --> 00:52:02,340
structure I have chosen to make it to

00:51:59,160 --> 00:52:06,080
make a top-level alias so here I am

00:52:02,340 --> 00:52:08,880
making a top-level alias to my service

00:52:06,080 --> 00:52:10,800
all right so my top-level alias lets me

00:52:08,880 --> 00:52:13,230
from the outside world just say :

00:52:10,800 --> 00:52:15,660
service because this is at the top level

00:52:13,230 --> 00:52:17,460
and then it'll it'll automatically alias

00:52:15,660 --> 00:52:19,380
that to the actual build file which is

00:52:17,460 --> 00:52:24,960
deep inside or to the actual target in

00:52:19,380 --> 00:52:28,230
that build file so you see it to unwind

00:52:24,960 --> 00:52:33,310
my stack of open files here

00:52:28,230 --> 00:52:35,020
okay so basil run front end we're on the

00:52:33,310 --> 00:52:36,820
front end code service run the service

00:52:35,020 --> 00:52:38,770
code and I have to do those in separate

00:52:36,820 --> 00:52:43,300
windows this should work for everyone

00:52:38,770 --> 00:52:46,510
here it should work so you're in this in

00:52:43,300 --> 00:52:48,310
this tab I'll run the front-end oh I

00:52:46,510 --> 00:52:55,810
guess I have to allow it to listen in

00:52:48,310 --> 00:52:57,850
this tab I'll run the service I guess

00:52:55,810 --> 00:53:00,640
that's the let them both listen I wish

00:52:57,850 --> 00:53:02,020
it it seems like as Mac OS now makes me

00:53:00,640 --> 00:53:04,180
answer that question a lot more than it

00:53:02,020 --> 00:53:08,530
used to and then my front end is

00:53:04,180 --> 00:53:10,240
listening on port 8080 and so if I go

00:53:08,530 --> 00:53:13,030
talk to port 8080 I can see my shopping

00:53:10,240 --> 00:53:18,340
list so supposed to applaud at this

00:53:13,030 --> 00:53:20,140
point so the the obviously the the

00:53:18,340 --> 00:53:24,430
functionality is not what's impressive

00:53:20,140 --> 00:53:26,230
but let's let's go trace through exactly

00:53:24,430 --> 00:53:28,870
what was what was happening there how

00:53:26,230 --> 00:53:31,120
that actually worked so in the so this

00:53:28,870 --> 00:53:33,550
is my front end directory has my front

00:53:31,120 --> 00:53:35,520
end go program the important thing is

00:53:33,550 --> 00:53:42,880
that if I search through this program

00:53:35,520 --> 00:53:44,680
for for example bananas there it's not

00:53:42,880 --> 00:53:46,750
mentioned right so that the data if I

00:53:44,680 --> 00:53:49,090
have not inadvertently hard-coded my

00:53:46,750 --> 00:53:50,470
grocery list into my front-end instead

00:53:49,090 --> 00:53:54,220
in my front end program

00:53:50,470 --> 00:53:55,900
I called this get list and the machinery

00:53:54,220 --> 00:53:58,030
around it doesn't matter this is all gr

00:53:55,900 --> 00:54:00,250
PC irrelevant details the important

00:53:58,030 --> 00:54:03,010
things that I use this G RPC mechanism

00:54:00,250 --> 00:54:05,260
to call this get list call but to find

00:54:03,010 --> 00:54:08,560
it and the protocol buffer file and then

00:54:05,260 --> 00:54:12,070
I'm calling it in a typed way here yeah

00:54:08,560 --> 00:54:17,410
that's typed from go and then over in

00:54:12,070 --> 00:54:19,270
the Java code I used this implementation

00:54:17,410 --> 00:54:21,370
base that was generated for me that G

00:54:19,270 --> 00:54:23,470
RPC mechanism like makes your base

00:54:21,370 --> 00:54:26,590
server that you just extend and build on

00:54:23,470 --> 00:54:28,360
and so I was able to simply override the

00:54:26,590 --> 00:54:30,220
generated kind of empty get list

00:54:28,360 --> 00:54:31,510
implementation and again some of the

00:54:30,220 --> 00:54:33,250
details here have to do with like how

00:54:31,510 --> 00:54:34,780
the types are generated for Java and

00:54:33,250 --> 00:54:36,520
there's a lot of reasons why it's not

00:54:34,780 --> 00:54:38,290
quite as simple as it might ideally be

00:54:36,520 --> 00:54:40,330
but the important thing is that I'm Jen

00:54:38,290 --> 00:54:40,810
I'm actually providing this data from

00:54:40,330 --> 00:54:43,060
this

00:54:40,810 --> 00:54:45,640
and in the Java code so there you have

00:54:43,060 --> 00:54:48,970
evidence before you that my front end

00:54:45,640 --> 00:54:50,800
called my back end using G RPC so again

00:54:48,970 --> 00:54:53,440
the G RPC isn't what matters what

00:54:50,800 --> 00:54:56,830
matters is you're now starting to look

00:54:53,440 --> 00:54:59,620
at a a realistically complex workspace

00:54:56,830 --> 00:55:01,630
and so this ended up at 183 the

00:54:59,620 --> 00:55:03,460
interesting thing is that the complexity

00:55:01,630 --> 00:55:04,240
of this workspace is almost entirely a

00:55:03,460 --> 00:55:07,540
function of how many different

00:55:04,240 --> 00:55:13,210
technologies I used if I replaced that

00:55:07,540 --> 00:55:15,490
one one source file Java service with 25

00:55:13,210 --> 00:55:17,920
different micro services each of which

00:55:15,490 --> 00:55:19,690
had ten thousand lines of code it's

00:55:17,920 --> 00:55:21,940
quite possible I would not edit a single

00:55:19,690 --> 00:55:23,710
character in the workspace file so the

00:55:21,940 --> 00:55:25,720
workspace files complexity is a function

00:55:23,710 --> 00:55:27,970
of how many things you're using not a

00:55:25,720 --> 00:55:32,920
function of how much you're using of

00:55:27,970 --> 00:55:35,050
each one whereas if I implemented 17

00:55:32,920 --> 00:55:38,290
more of these services I would put a

00:55:35,050 --> 00:55:39,820
build file next to each one and I

00:55:38,290 --> 00:55:41,920
wouldn't like I wouldn't have to like

00:55:39,820 --> 00:55:43,270
edit one single file to know about you

00:55:41,920 --> 00:55:44,830
know how they relate I would just I

00:55:43,270 --> 00:55:47,170
would just put it all right there and so

00:55:44,830 --> 00:55:49,360
you have like a sprawling team making it

00:55:47,170 --> 00:55:51,370
much it changed you know you don't have

00:55:49,360 --> 00:55:52,900
the kind of merge conflicts you would

00:55:51,370 --> 00:55:54,820
have if you were managing it all on file

00:55:52,900 --> 00:56:02,790
it's all very suitable for use at scale

00:55:54,820 --> 00:56:06,610
with teams that sort of thing okay so I

00:56:02,790 --> 00:56:11,500
have an exercise actually one more thing

00:56:06,610 --> 00:56:14,460
to show then I have an exercise let me

00:56:11,500 --> 00:56:14,460
see if I can find this thing

00:56:15,660 --> 00:56:27,370
where's my bzl file yeah okay so when I

00:56:22,990 --> 00:56:30,130
did this API definition build I started

00:56:27,370 --> 00:56:33,430
to notice like that's getting a little

00:56:30,130 --> 00:56:36,280
messy I mean it's only four rules right

00:56:33,430 --> 00:56:39,910
but like let's say that I had like 15

00:56:36,280 --> 00:56:42,790
more of those right I say it a bunch of

00:56:39,910 --> 00:56:44,200
those any big big project right do I

00:56:42,790 --> 00:56:46,240
really want to have like a bunch of

00:56:44,200 --> 00:56:47,740
different copies and like look at this

00:56:46,240 --> 00:56:49,150
naming convention this is kind of

00:56:47,740 --> 00:56:51,520
painful right like I had to figure out

00:56:49,150 --> 00:56:54,670
how to like make up a name with these

00:56:51,520 --> 00:56:56,810
suffixes with go and Java and Java Lib

00:56:54,670 --> 00:56:58,730
did anybody notice this yet isn't

00:56:56,810 --> 00:57:01,400
recruit eking my code as you saw this

00:56:58,730 --> 00:57:02,960
that just it's like a lot of irrelevant

00:57:01,400 --> 00:57:04,940
details in there if I had to do this

00:57:02,960 --> 00:57:07,610
again you can imagine like having to

00:57:04,940 --> 00:57:09,680
carefully edit a file to make it like

00:57:07,610 --> 00:57:11,990
this file but like with you know maybe

00:57:09,680 --> 00:57:13,880
like search and replacing the word API

00:57:11,990 --> 00:57:15,950
for the name of a different API is

00:57:13,880 --> 00:57:17,450
anybody spotted that yet that's hoping

00:57:15,950 --> 00:57:21,170
someone would feel uncomfortable with

00:57:17,450 --> 00:57:23,240
this file well there's a basil solution

00:57:21,170 --> 00:57:25,910
for that and I've I've put something at

00:57:23,240 --> 00:57:27,020
the bottom here to illustrate so what

00:57:25,910 --> 00:57:28,790
I'm gonna do and you're welcome to

00:57:27,020 --> 00:57:32,030
follow along I'm gonna take all this

00:57:28,790 --> 00:57:34,070
stuff and just comment all of that out

00:57:32,030 --> 00:57:35,660
and then I'm gonna take the thing I have

00:57:34,070 --> 00:57:39,110
at the bottom and I'm gonna uncomment

00:57:35,660 --> 00:57:41,390
that so let's say I was working at Acme

00:57:39,110 --> 00:57:43,700
corporation famous from the I guess Bugs

00:57:41,390 --> 00:57:45,590
Bunny cartoons and and they had

00:57:43,700 --> 00:57:47,570
corporate standards of how Acme

00:57:45,590 --> 00:57:49,190
corporation does protocol buffer G RPC

00:57:47,570 --> 00:57:51,290
inter braces and how is that thing that

00:57:49,190 --> 00:57:53,960
they want to do the naming so remember I

00:57:51,290 --> 00:57:56,480
mentioned so workspace files or how you

00:57:53,960 --> 00:57:57,920
bring stuff in to your workspace and

00:57:56,480 --> 00:58:00,230
build files or how you specify what

00:57:57,920 --> 00:58:02,300
you're gonna make in your workspace bzl

00:58:00,230 --> 00:58:04,760
files or how you extend the whole thing

00:58:02,300 --> 00:58:06,200
so what I've done is that is a rules

00:58:04,760 --> 00:58:10,100
directory I've made like kind of the

00:58:06,200 --> 00:58:13,210
simplest reasonable bzl file so here I'm

00:58:10,100 --> 00:58:19,910
extending basil in a sense by defining

00:58:13,210 --> 00:58:22,100
the Acme way of doing G RPC now I don't

00:58:19,910 --> 00:58:24,560
want to dig into like the syntax details

00:58:22,100 --> 00:58:25,670
of star LARC too much this is a star

00:58:24,560 --> 00:58:31,070
lark file that's the name of this

00:58:25,670 --> 00:58:33,200
language but the simplest thing you can

00:58:31,070 --> 00:58:34,610
do in star lar kind of the least power

00:58:33,200 --> 00:58:36,470
step you can use you're getting your

00:58:34,610 --> 00:58:38,360
feet wet writing your own bzo files is

00:58:36,470 --> 00:58:40,400
to make what they call a macro now a

00:58:38,360 --> 00:58:42,980
macro is just a function right it's C is

00:58:40,400 --> 00:58:44,960
def bike if you Python people write that

00:58:42,980 --> 00:58:49,190
that's just a Python like function right

00:58:44,960 --> 00:58:51,650
so macro simply means a way of writing

00:58:49,190 --> 00:58:54,410
one thing that then expands out into a

00:58:51,650 --> 00:58:56,870
set of thing so in this example here

00:58:54,410 --> 00:58:58,700
I've simply done some syntactic edits

00:58:56,870 --> 00:59:02,660
right I have loaded in those rules and

00:58:58,700 --> 00:59:04,610
then I've said well like take the name

00:59:02,660 --> 00:59:06,470
that I was passed and make that the name

00:59:04,610 --> 00:59:08,359
of the proto library and then add the

00:59:06,470 --> 00:59:10,279
underscore go to it and make a

00:59:08,359 --> 00:59:12,200
Oh proto library and then do the same

00:59:10,279 --> 00:59:14,809
thing with Java and so on so basically I

00:59:12,200 --> 00:59:18,980
have I've made a kind of corporate

00:59:14,809 --> 00:59:21,559
standardized implementation instead of a

00:59:18,980 --> 00:59:23,630
concrete human following a naming

00:59:21,559 --> 00:59:26,299
pattern I've encoded how to follow that

00:59:23,630 --> 00:59:28,009
naming pattern into a macro and I would

00:59:26,299 --> 00:59:29,809
definitely recommend before you try to

00:59:28,009 --> 00:59:31,400
do like your own custom rules start

00:59:29,809 --> 00:59:34,309
writing macros it's really easy

00:59:31,400 --> 00:59:36,230
there's the I basically I basically

00:59:34,309 --> 00:59:37,759
copied and pasted this stuff in here and

00:59:36,230 --> 00:59:39,349
I indented it a little bit and I edited

00:59:37,759 --> 00:59:40,730
the syntax a little bit I don't want to

00:59:39,349 --> 00:59:43,970
dig into the details here because we're

00:59:40,730 --> 00:59:45,319
at 30 minutes from the end but it's

00:59:43,970 --> 00:59:48,019
really easy to get your feet wet here

00:59:45,319 --> 00:59:49,339
and then this is like a gentle on-ramp

00:59:48,019 --> 00:59:51,019
to where you're writing your own rules

00:59:49,339 --> 00:59:53,150
writing your own rules is considerably

00:59:51,019 --> 00:59:55,220
more complex but if you get comforting

00:59:53,150 --> 00:59:57,980
macros and a few weeks you'll be ready

00:59:55,220 --> 01:00:03,019
to start writing your own rules okay so

00:59:57,980 --> 01:00:06,109
I want to try one I want everyone here

01:00:03,019 --> 01:00:07,549
to try one exercise if you have it up

01:00:06,109 --> 01:00:10,609
and running anyway so I'm gonna put this

01:00:07,549 --> 01:00:15,259
back the way it was I want you to try

01:00:10,609 --> 01:00:17,660
just renaming one thing in here and then

01:00:15,259 --> 01:00:21,109
make your build run again so pick any of

01:00:17,660 --> 01:00:23,210
these things any of these names and just

01:00:21,109 --> 01:00:25,039
make some edit to it and then try to

01:00:23,210 --> 01:00:27,670
make things work again that'll get you

01:00:25,039 --> 01:00:29,359
that'll put you through the exercise of

01:00:27,670 --> 01:00:30,980
understanding how the names linked

01:00:29,359 --> 01:00:33,319
together so the one I'm going to try

01:00:30,980 --> 01:00:35,989
naming is this one I'm gonna try

01:00:33,319 --> 01:00:40,220
renaming Java Lib and I'm going to name

01:00:35,989 --> 01:00:42,829
it like oh at least follow the

01:00:40,220 --> 01:00:48,170
underscores so I'm gonna try an renaming

01:00:42,829 --> 01:00:50,619
mine this way so if I go over here I can

01:00:48,170 --> 01:00:50,619
kill these things

01:00:55,060 --> 01:01:01,840
so I just tried renaming in a place and

01:00:58,570 --> 01:01:03,550
I got told there's no such Oh gross I

01:01:01,840 --> 01:01:05,530
mean this who this error message right

01:01:03,550 --> 01:01:07,210
it initially seems very overwhelming but

01:01:05,530 --> 01:01:10,930
if you just start following your way

01:01:07,210 --> 01:01:13,600
through oh it's in that service source

01:01:10,930 --> 01:01:15,430
main yet it's in that Java build file

01:01:13,600 --> 01:01:18,850
and it's telling me there's no such

01:01:15,430 --> 01:01:21,970
target API def Lib thing oh that's the

01:01:18,850 --> 01:01:24,490
thing I renamed so it turns out I was

01:01:21,970 --> 01:01:27,130
only referring to this name one other

01:01:24,490 --> 01:01:28,960
place and so for my edit and I would

01:01:27,130 --> 01:01:31,990
encourage you to do a different one I'm

01:01:28,960 --> 01:01:34,390
just gonna go in to that build file to

01:01:31,990 --> 01:01:38,920
our refer to that Java Lib and refer to

01:01:34,390 --> 01:01:43,240
it in the same way matching the name and

01:01:38,920 --> 01:01:44,500
see if I can now build so I would

01:01:43,240 --> 01:01:45,970
encourage you to try a different one

01:01:44,500 --> 01:01:48,940
because now you've seen the exact edit

01:01:45,970 --> 01:01:50,710
for that one so we will we'll pause for

01:01:48,940 --> 01:01:53,260
like three minutes here for people to

01:01:50,710 --> 01:01:56,590
try a rename and uh maybe maybe hit an

01:01:53,260 --> 01:01:58,240
interesting question if somebody wants

01:01:56,590 --> 01:02:00,160
to ask something unrelated while we wait

01:01:58,240 --> 01:02:10,180
for the renames you have three minutes

01:02:00,160 --> 01:02:11,620
to do so yeah you got one up here he's

01:02:10,180 --> 01:02:16,090
gonna get to the microphone they're

01:02:11,620 --> 01:02:20,080
trying to do a recording so yeah I'm

01:02:16,090 --> 01:02:22,150
kind of confused on like rules and

01:02:20,080 --> 01:02:24,130
macros so macro is basically like a

01:02:22,150 --> 01:02:26,320
function that you would you would load

01:02:24,130 --> 01:02:30,480
other macros within like native macros

01:02:26,320 --> 01:02:32,950
so the things that we're using here are

01:02:30,480 --> 01:02:35,080
they're called rules let me go back in

01:02:32,950 --> 01:02:38,020
here so everything we're revoking this

01:02:35,080 --> 01:02:40,720
is the proto library rule this is the go

01:02:38,020 --> 01:02:42,820
proto library rule so a macro just wraps

01:02:40,720 --> 01:02:44,980
up one or more rules and like somehow

01:02:42,820 --> 01:02:47,950
translates or expands the parameters in

01:02:44,980 --> 01:02:49,150
some way okay and so a macro looks just

01:02:47,950 --> 01:02:51,520
like a rule from the point of

01:02:49,150 --> 01:02:54,280
consumption yeah and in a sense it is a

01:02:51,520 --> 01:02:57,880
rule but like it's it's a simplified

01:02:54,280 --> 01:02:59,410
kind of rule called the macro so I spoke

01:02:57,880 --> 01:03:00,820
with several people here I just asked

01:02:59,410 --> 01:03:02,980
them because I saw them doing a talk and

01:03:00,820 --> 01:03:06,040
of these several people I talked to they

01:03:02,980 --> 01:03:08,710
all we're doing something vaguely like

01:03:06,040 --> 01:03:10,990
this idea where even if they were

01:03:08,710 --> 01:03:12,520
mostly using off-the-shelf rules they

01:03:10,990 --> 01:03:15,550
were like wrapping them in at least some

01:03:12,520 --> 01:03:16,750
trivial way to to implement some aspect

01:03:15,550 --> 01:03:18,490
of how they want to do things as a

01:03:16,750 --> 01:03:29,050
company it's a very very common thing in

01:03:18,490 --> 01:03:31,180
Basel isn't true that backers and rules

01:03:29,050 --> 01:03:33,609
I valuated at different phases of

01:03:31,180 --> 01:03:38,050
Basil's build that rules are evaluated

01:03:33,609 --> 01:03:41,170
during the loading phase so the

01:03:38,050 --> 01:03:43,869
challenge is that the macros run before

01:03:41,170 --> 01:03:45,940
the the phase of Basel execution where

01:03:43,869 --> 01:03:48,220
the errors are going to happen so if you

01:03:45,940 --> 01:03:49,690
get an error the error is going to be

01:03:48,220 --> 01:03:52,780
based on what the met what the macro

01:03:49,690 --> 01:03:55,060
output was so like if I saw an error my

01:03:52,780 --> 01:03:57,490
error would not mention acne gr PC it

01:03:55,060 --> 01:03:59,770
would mention go proto library and makes

01:03:57,490 --> 01:04:01,420
that it can be harder to figure out

01:03:59,770 --> 01:04:03,310
wait it's it's complaining about go

01:04:01,420 --> 01:04:06,339
proto library but I never even said go

01:04:03,310 --> 01:04:07,690
proto library there's a command-line

01:04:06,339 --> 01:04:09,280
switch which unfortunately I can't

01:04:07,690 --> 01:04:11,080
remember pop my head there's a query you

01:04:09,280 --> 01:04:12,880
can run that'll help you translate

01:04:11,080 --> 01:04:14,859
between them help you translate to the

01:04:12,880 --> 01:04:17,050
to the code you wrote that triggered it

01:04:14,859 --> 01:04:18,580
but yeah it's this is not without peril

01:04:17,050 --> 01:04:22,810
and that thing is perfect I'm just

01:04:18,580 --> 01:04:25,510
saying that it's common oh yeah this is

01:04:22,810 --> 01:04:27,010
just so this is some it's not quite a

01:04:25,510 --> 01:04:28,510
Python function but it's pretty close

01:04:27,010 --> 01:04:29,830
just being a function there's nothing to

01:04:28,510 --> 01:04:31,950
stop you from stacking them as deep as

01:04:29,830 --> 01:04:31,950
you want

01:04:32,040 --> 01:04:37,869
is there any editor support for like Co

01:04:36,400 --> 01:04:42,070
completion or telling you that you

01:04:37,869 --> 01:04:43,780
messed up I think this is so you should

01:04:42,070 --> 01:04:45,220
be using build a fire that'll tell you

01:04:43,780 --> 01:04:47,500
about the trivial ways where you messed

01:04:45,220 --> 01:04:50,290
up but in terms of complexity like

01:04:47,500 --> 01:04:53,500
actually a IDE like a language server

01:04:50,290 --> 01:04:56,859
that processes it I think that is they

01:04:53,500 --> 01:04:58,480
like contributors welcome area and the

01:04:56,859 --> 01:05:00,400
build a fire world people would they be

01:04:58,480 --> 01:05:01,780
really if if you would like to step up

01:05:00,400 --> 01:05:03,160
me the person who writes the language

01:05:01,780 --> 01:05:04,869
server server protocol implementation

01:05:03,160 --> 01:05:09,400
the replaces build a fire that would be

01:05:04,869 --> 01:05:11,710
fantastic this is more of an answer I've

01:05:09,400 --> 01:05:14,589
tried a bunch of them there's IntelliJ

01:05:11,710 --> 01:05:17,710
plug-in so if you use JetBrains IDs you

01:05:14,589 --> 01:05:21,010
can use it but I think I found the most

01:05:17,710 --> 01:05:21,680
usable one and vs code vs code editor

01:05:21,010 --> 01:05:24,349
has

01:05:21,680 --> 01:05:26,089
the best basal support built-in yeah

01:05:24,349 --> 01:05:31,730
that's what I'm using and it still is

01:05:26,089 --> 01:05:33,260
nowhere near what you're hoping for okay

01:05:31,730 --> 01:05:36,230
did anybody raise your hand if you if

01:05:33,260 --> 01:05:36,859
you rename something successfully well

01:05:36,230 --> 01:05:38,119
that's not bad

01:05:36,859 --> 01:05:41,000
raise your hand if you if you want a few

01:05:38,119 --> 01:05:42,200
more minutes to work on a rename okay so

01:05:41,000 --> 01:05:44,599
everybody else just follow along that's

01:05:42,200 --> 01:05:45,710
great okay so there's no more questions

01:05:44,599 --> 01:05:47,270
we're gonna see what else we can talk

01:05:45,710 --> 01:05:53,180
about in our and our remaining 24

01:05:47,270 --> 01:05:57,410
minutes okay so everything we've seen to

01:05:53,180 --> 01:06:00,559
this point has been Java and go and

01:05:57,410 --> 01:06:02,480
those are relatively mature they work

01:06:00,559 --> 01:06:04,730
great they've been in use at Google for

01:06:02,480 --> 01:06:07,069
many years building huge code bases and

01:06:04,730 --> 01:06:10,849
this code is derivative of what what

01:06:07,069 --> 01:06:13,730
they used for real this is all much less

01:06:10,849 --> 01:06:15,500
true on the full stack end so we're not

01:06:13,730 --> 01:06:17,089
going to go in as much depth on this one

01:06:15,500 --> 01:06:19,970
but I want to at least get through a

01:06:17,089 --> 01:06:21,680
workspace for a full stack program where

01:06:19,970 --> 01:06:23,180
full stack means yeah there's there's

01:06:21,680 --> 01:06:24,319
some like Java code running back there

01:06:23,180 --> 01:06:25,880
for a server but I'm running like a

01:06:24,319 --> 01:06:28,309
JavaScript based front-end

01:06:25,880 --> 01:06:32,089
now this import I'm actually doing a

01:06:28,309 --> 01:06:33,740
angular front-end on this example but I

01:06:32,089 --> 01:06:35,390
don't know that we'll even get into the

01:06:33,740 --> 01:06:36,950
angular part I want to go to the top

01:06:35,390 --> 01:06:49,819
here and just point out some features

01:06:36,950 --> 01:06:54,410
that come into play so if you're

01:06:49,819 --> 01:06:58,670
familiar with maven but not with NPM you

01:06:54,410 --> 01:07:01,339
could think of the NPM ecosystem is like

01:06:58,670 --> 01:07:03,980
the maven ecosystem but with a much

01:07:01,339 --> 01:07:07,010
larger number of much smaller packages

01:07:03,980 --> 01:07:11,000
and very broad and deep transitive

01:07:07,010 --> 01:07:14,299
dependency trees so like I mentioned I

01:07:11,000 --> 01:07:17,150
got actually you know what someone

01:07:14,299 --> 01:07:20,210
remind me of the UNIX command to count

01:07:17,150 --> 01:07:27,279
the total size under a directory is like

01:07:20,210 --> 01:07:29,930
do you - do you butts HS said it oh

01:07:27,279 --> 01:07:32,329
that's not bad yeah so I really trimmed

01:07:29,930 --> 01:07:35,420
this one down to get it to only 424

01:07:32,329 --> 01:07:37,400
megabytes of transitive dependencies on

01:07:35,420 --> 01:07:45,160
our real projects we do for customers

01:07:37,400 --> 01:07:47,480
were usually at 700 or more by default

01:07:45,160 --> 01:07:49,490
something like a dependency load that's

01:07:47,480 --> 01:07:51,589
like a build rule output so that's gonna

01:07:49,490 --> 01:07:55,460
be like hidden down inside that basil

01:07:51,589 --> 01:07:58,280
out mechanism but my IDE like I want IDE

01:07:55,460 --> 01:08:00,470
support for all those dependencies and

01:07:58,280 --> 01:08:03,250
so they have they have added this

01:08:00,470 --> 01:08:06,410
mechanism that basically lets you expose

01:08:03,250 --> 01:08:10,130
something that's generated as a basil

01:08:06,410 --> 01:08:12,109
target like the NPM load output NPM

01:08:10,130 --> 01:08:15,619
install output and expose it as a

01:08:12,109 --> 01:08:17,330
symlink in your project so that your IDE

01:08:15,619 --> 01:08:19,370
can see it that's what line three is I

01:08:17,330 --> 01:08:21,109
don't know if this mechanism isn't used

01:08:19,370 --> 01:08:22,880
for anything other than like the the

01:08:21,109 --> 01:08:24,170
node ecosystem but I think it's a

01:08:22,880 --> 01:08:26,359
general mechanism I don't think it's

01:08:24,170 --> 01:08:28,190
limited specifically to node so that's

01:08:26,359 --> 01:08:29,179
what line three is you'll probably only

01:08:28,190 --> 01:08:31,460
ever see that if you're doing JavaScript

01:08:29,179 --> 01:08:34,069
they just announced that at lunchtime

01:08:31,460 --> 01:08:35,929
there's a a birds of a feather and I'm

01:08:34,069 --> 01:08:40,130
really curious if anyone's even there

01:08:35,929 --> 01:08:42,290
because I think on all the mang talks at

01:08:40,130 --> 01:08:43,790
this and the last basil con I think

01:08:42,290 --> 01:08:45,560
everybody was using languages other than

01:08:43,790 --> 01:08:53,210
Java Script I don't remember seeing

01:08:45,560 --> 01:08:53,660
anyone yeah just to help understand line

01:08:53,210 --> 01:08:59,900
three

01:08:53,660 --> 01:09:01,520
so the at NPM rules or whatever that's

01:08:59,900 --> 01:09:03,350
generating a node module somewhere in

01:09:01,520 --> 01:09:06,560
the whole private like output area and

01:09:03,350 --> 01:09:09,710
this line 3 is saying to symlink yep

01:09:06,560 --> 01:09:12,049
that's saying when later you see that I

01:09:09,710 --> 01:09:14,089
ran a rule that made an NPM workspace

01:09:12,049 --> 01:09:16,339
exists make that available to me the

01:09:14,089 --> 01:09:17,960
user under the name node modules because

01:09:16,339 --> 01:09:22,460
that's where I need it to be so that my

01:09:17,960 --> 01:09:24,230
IDE can see it yep okay so line 3 that's

01:09:22,460 --> 01:09:26,540
this so everything on my screen here is

01:09:24,230 --> 01:09:28,400
stuff we have seen before we're again so

01:09:26,540 --> 01:09:29,929
I said this is a Java plus JavaScript

01:09:28,400 --> 01:09:32,210
project so you get this thing where it's

01:09:29,929 --> 01:09:34,609
you get kind of that your your workspace

01:09:32,210 --> 01:09:36,859
is like a mesh of both again you could

01:09:34,609 --> 01:09:38,750
solve it you could actually put some of

01:09:36,859 --> 01:09:40,759
this in separate bzl files and use the

01:09:38,750 --> 01:09:42,830
load mechanism like we just saw you

01:09:40,759 --> 01:09:44,089
could wait until basel federation comes

01:09:42,830 --> 01:09:45,739
around and does some of this for you but

01:09:44,089 --> 01:09:49,160
for the moment yeah I'm just piling it

01:09:45,739 --> 01:09:51,500
all in there then we get I'm trying to

01:09:49,160 --> 01:09:57,530
to the right place before I start okay

01:09:51,500 --> 01:10:01,040
so this is a new twist so in the

01:09:57,530 --> 01:10:04,220
examples we saw for go and for maven we

01:10:01,040 --> 01:10:07,160
were using the workspace to load go code

01:10:04,220 --> 01:10:11,480
and you know mate Java code via maven

01:10:07,160 --> 01:10:14,630
which were then consumed only in go or

01:10:11,480 --> 01:10:17,690
in Java there's a very interesting twist

01:10:14,630 --> 01:10:21,350
that's present in the JavaScript support

01:10:17,690 --> 01:10:24,530
so first I'm just things to get past its

01:10:21,350 --> 01:10:27,920
called rules nodejs but it's really

01:10:24,530 --> 01:10:29,630
rules JavaScript it has like it has

01:10:27,920 --> 01:10:32,390
browser side JavaScript support in there

01:10:29,630 --> 01:10:33,980
it's just a legacy name there's so this

01:10:32,390 --> 01:10:37,160
is like less than a year old but has a

01:10:33,980 --> 01:10:38,720
legacy name maybe if we all ask Alex

01:10:37,160 --> 01:10:45,500
Eagle to rename it maybe it'll get

01:10:38,720 --> 01:10:47,090
renamed um so from there from from that

01:10:45,500 --> 01:10:49,070
so I've made it available then again I

01:10:47,090 --> 01:10:50,540
said now reach inside the thing I just

01:10:49,070 --> 01:10:51,920
downloaded and get me some things out of

01:10:50,540 --> 01:10:54,170
it that I can call there's no

01:10:51,920 --> 01:10:55,730
repositories in yarn install okay so no

01:10:54,170 --> 01:10:58,190
depositories I do not remember why this

01:10:55,730 --> 01:11:00,470
was named repositories but this has the

01:10:58,190 --> 01:11:02,600
effect of going and getting me a node so

01:11:00,470 --> 01:11:05,270
again just like I managed my version of

01:11:02,600 --> 01:11:06,560
go and Java through the basal mechanism

01:11:05,270 --> 01:11:08,030
stead of just relying whatever happens

01:11:06,560 --> 01:11:10,070
to be on the machine I'm using base

01:11:08,030 --> 01:11:12,350
let's go get node I'm saying go get a

01:11:10,070 --> 01:11:16,940
managed copy of node and use that to run

01:11:12,350 --> 01:11:19,130
everything I need to run most rules you

01:11:16,940 --> 01:11:21,290
say name equal as the first parameter

01:11:19,130 --> 01:11:23,600
and that Nate that makes it obvious

01:11:21,290 --> 01:11:24,860
where the results is published for

01:11:23,600 --> 01:11:27,140
reasons unclear to me the node

01:11:24,860 --> 01:11:29,180
repositories rule does not take a

01:11:27,140 --> 01:11:30,350
parameter called name and so I put it

01:11:29,180 --> 01:11:32,960
there in a comment just as like a

01:11:30,350 --> 01:11:34,820
reminder pretend that it said that so if

01:11:32,960 --> 01:11:36,650
I want to reach in and grab something

01:11:34,820 --> 01:11:38,720
from what I installed from this copy of

01:11:36,650 --> 01:11:41,990
node I installed that's the name I would

01:11:38,720 --> 01:11:43,910
do it under next yeah there's a yarn

01:11:41,990 --> 01:11:46,100
mechanism right so this is saying so go

01:11:43,910 --> 01:11:48,440
run a yarn install publish the results

01:11:46,100 --> 01:11:51,830
under the name and PM which ties back

01:11:48,440 --> 01:11:55,370
into this NPM those are the same NPM s

01:11:51,830 --> 01:11:57,200
so go run me a yarn install and then

01:11:55,370 --> 01:11:58,790
here's a package file here's a yarn lock

01:11:57,200 --> 01:12:00,500
and then you also need to do this

01:11:58,790 --> 01:12:02,240
symlink thing too this is part of

01:12:00,500 --> 01:12:04,140
turning on that mechanism say symlink

01:12:02,240 --> 01:12:07,660
that out where I can

01:12:04,140 --> 01:12:11,110
okay now here's when it gets this is

01:12:07,660 --> 01:12:12,490
getting good here so with the go code in

01:12:11,110 --> 01:12:15,040
them in the Java code

01:12:12,490 --> 01:12:17,260
I was only pulling in go code in Java

01:12:15,040 --> 01:12:19,780
code via that mechanism for the

01:12:17,260 --> 01:12:27,070
JavaScript mechanism they have chosen to

01:12:19,780 --> 01:12:29,500
publish basal code basil rules to NPM so

01:12:27,070 --> 01:12:32,230
there are packages published to NPM that

01:12:29,500 --> 01:12:34,390
have basil rules in them so I'm like

01:12:32,230 --> 01:12:37,060
doing like a kind of a double layer of

01:12:34,390 --> 01:12:39,280
indirection here so I'm saying here is a

01:12:37,060 --> 01:12:41,920
package file with a yarn lock use that

01:12:39,280 --> 01:12:44,620
to go load stuff from NPM and then this

01:12:41,920 --> 01:12:49,210
says by the way there was some basil

01:12:44,620 --> 01:12:51,220
code in there go load that code also and

01:12:49,210 --> 01:12:52,780
then for because of that transitive

01:12:51,220 --> 01:12:55,120
thing there's no way of just like having

01:12:52,780 --> 01:12:56,680
this single thing just do the whole like

01:12:55,120 --> 01:12:58,810
it can't just transitively grab all the

01:12:56,680 --> 01:13:01,330
transitive dependencies so you kind of

01:12:58,810 --> 01:13:04,060
have to know that that that is going to

01:13:01,330 --> 01:13:06,990
expose things that you need to go load

01:13:04,060 --> 01:13:09,460
further dependencies so at the moment I

01:13:06,990 --> 01:13:12,160
believe the only documentation of this

01:13:09,460 --> 01:13:15,610
is the published example set and in

01:13:12,160 --> 01:13:16,980
rules node J s but again look who we

01:13:15,610 --> 01:13:19,210
have in front of us

01:13:16,980 --> 01:13:23,620
Federation will in theory make all of

01:13:19,210 --> 01:13:25,360
this much better we should all ask for

01:13:23,620 --> 01:13:27,280
more resources to be poured into

01:13:25,360 --> 01:13:29,380
Federation as fast as possible because

01:13:27,280 --> 01:13:31,410
it will make so many things so much

01:13:29,380 --> 01:13:33,940
better okay so for the moment though

01:13:31,410 --> 01:13:35,380
there's this double indirection that's

01:13:33,940 --> 01:13:38,200
happening so first we're going to go

01:13:35,380 --> 01:13:39,760
pull some stuff from from from the NPM

01:13:38,200 --> 01:13:40,120
repository so we don't know what's in

01:13:39,760 --> 01:13:45,340
there

01:13:40,120 --> 01:13:50,770
well the basil team is pushing stuff out

01:13:45,340 --> 01:13:54,580
under the basil namespace on NPM and so

01:13:50,770 --> 01:13:56,470
the basil typescript support instead of

01:13:54,580 --> 01:13:58,690
fetching that via that HTTP archive

01:13:56,470 --> 01:14:00,160
mechanism which you will see if you look

01:13:58,690 --> 01:14:02,650
on the web there's blog posts talking

01:14:00,160 --> 01:14:04,450
about using HTTP archive to fetch type

01:14:02,650 --> 01:14:06,990
script support that's actually obsolete

01:14:04,450 --> 01:14:09,820
at this point you don't do that anymore

01:14:06,990 --> 01:14:12,760
instead they have published that into

01:14:09,820 --> 01:14:14,110
the NPM ecosystem and so this goes back

01:14:12,760 --> 01:14:16,480
to that comment on the mainstage

01:14:14,110 --> 01:14:16,929
yesterday about work space probably

01:14:16,480 --> 01:14:19,360
shouldn't

01:14:16,929 --> 01:14:22,959
come yet another package manager so for

01:14:19,360 --> 01:14:24,820
the for the the JavaScript side they are

01:14:22,959 --> 01:14:26,889
going down the path and I don't know if

01:14:24,820 --> 01:14:28,989
this is like a the ultimate answer or

01:14:26,889 --> 01:14:30,070
just just a step in an evolution but

01:14:28,989 --> 01:14:31,989
they're going on the path of just

01:14:30,070 --> 01:14:34,929
relying on the existing package

01:14:31,989 --> 01:14:36,820
management ecosystem they're relying on

01:14:34,929 --> 01:14:38,769
the existing dominant package manager in

01:14:36,820 --> 01:14:41,499
that ecosystem and just putting the

01:14:38,769 --> 01:14:43,449
Basel stuff into it and so it's a little

01:14:41,499 --> 01:14:45,699
weird because you're like going back and

01:14:43,449 --> 01:14:50,170
forth more than once but it seems to

01:14:45,699 --> 01:14:52,959
work okay and I want to leave our last

01:14:50,170 --> 01:14:54,010
ten minutes for just discussion so we're

01:14:52,959 --> 01:14:55,719
not going to get all the way through

01:14:54,010 --> 01:14:56,829
this example which is but I was

01:14:55,719 --> 01:14:59,949
conservative wouldn't even get the to it

01:14:56,829 --> 01:15:02,920
at all I'm gonna find the extra bits so

01:14:59,949 --> 01:15:05,409
even things like protractor running a

01:15:02,920 --> 01:15:07,539
protractor tests which they have under

01:15:05,409 --> 01:15:10,269
the web web testing name like they'll

01:15:07,539 --> 01:15:11,949
actually go and like put in some browser

01:15:10,269 --> 01:15:14,110
installs for you to run it on it's it's

01:15:11,949 --> 01:15:17,860
pretty slick pretty slick there's a lot

01:15:14,110 --> 01:15:20,769
of machinery here and like this

01:15:17,860 --> 01:15:23,110
machinery currently works on multiple

01:15:20,769 --> 01:15:26,019
operating systems that's pretty good and

01:15:23,110 --> 01:15:29,949
then lastly the last thing I'd mention

01:15:26,019 --> 01:15:32,610
that IDE integration is a pain so one of

01:15:29,949 --> 01:15:35,499
the paths to do IDE integration is to

01:15:32,610 --> 01:15:38,800
take what's in your workspace and build

01:15:35,499 --> 01:15:42,099
files process that code and then emit

01:15:38,800 --> 01:15:43,840
like kind of the older equivalent to it

01:15:42,099 --> 01:15:45,550
so there is some machinery and I don't

01:15:43,840 --> 01:15:46,749
have the some scenery running in here I

01:15:45,550 --> 01:15:48,760
just brought it here so it'd be here for

01:15:46,749 --> 01:15:50,860
discussion but there's machinery that

01:15:48,760 --> 01:15:54,010
will look at your workspace and build

01:15:50,860 --> 01:15:56,409
files and spit out a maven pom that

01:15:54,010 --> 01:15:58,989
corresponds to them so if you have an

01:15:56,409 --> 01:16:01,090
IDE that understands how to auto

01:15:58,989 --> 01:16:02,380
configure itself from a maven pom but

01:16:01,090 --> 01:16:04,300
does not understand how to auto

01:16:02,380 --> 01:16:06,849
configure itself from basil which I

01:16:04,300 --> 01:16:08,800
think today is most of them then there

01:16:06,849 --> 01:16:10,749
is this kind of workaround and that will

01:16:08,800 --> 01:16:12,969
hopefully get you through until the

01:16:10,749 --> 01:16:17,939
official basil support comes through for

01:16:12,969 --> 01:16:17,939
all the rest of the IDE s yes

01:16:19,320 --> 01:16:26,100
Oh Oh perfect

01:16:23,760 --> 01:16:28,140
I actually just reached the point where

01:16:26,100 --> 01:16:29,610
I am NOT I'm not going to try to present

01:16:28,140 --> 01:16:31,170
the details of the example I just wanted

01:16:29,610 --> 01:16:33,660
to get to how this double dependency

01:16:31,170 --> 01:16:36,480
mechanism works and so I will yield the

01:16:33,660 --> 01:16:38,250
remainder of the time to Q&A so I will

01:16:36,480 --> 01:16:40,230
stay in here till the end but anyone who

01:16:38,250 --> 01:16:40,710
is super eager to eat can make a run for

01:16:40,230 --> 01:16:50,970
it

01:16:40,710 --> 01:16:52,170
so QA this is a odd question but you

01:16:50,970 --> 01:16:55,320
know you mentioned that you're not

01:16:52,170 --> 01:16:58,920
dealing with the mono repo so in your

01:16:55,320 --> 01:17:00,630
work I work in a consulting organization

01:16:58,920 --> 01:17:02,850
right which means that each of our

01:17:00,630 --> 01:17:04,560
customers stuff is a silo into itself

01:17:02,850 --> 01:17:06,600
there is no way it's ever gonna go in

01:17:04,560 --> 01:17:09,660
the same repo yeah okay let's just say

01:17:06,600 --> 01:17:12,180
you didn't have any legal issues or

01:17:09,660 --> 01:17:15,480
whatnot and every customer was happy to

01:17:12,180 --> 01:17:16,920
have not a single repo but multiple

01:17:15,480 --> 01:17:20,250
repos but she would have to build one

01:17:16,920 --> 01:17:21,060
basil pipeline how would you go about

01:17:20,250 --> 01:17:23,820
doing that

01:17:21,060 --> 01:17:25,710
or would you do that yeah that wouldn't

01:17:23,820 --> 01:17:27,630
make sense for somebody who's supporting

01:17:25,710 --> 01:17:29,340
unrelated projects because the

01:17:27,630 --> 01:17:31,260
probability of all your other products

01:17:29,340 --> 01:17:34,200
being on the same version of basil even

01:17:31,260 --> 01:17:35,880
is really really low there there are

01:17:34,200 --> 01:17:37,500
things that make you have a separate

01:17:35,880 --> 01:17:39,720
workspace a seperate build pipeline like

01:17:37,500 --> 01:17:42,330
like it's like if you literally have one

01:17:39,720 --> 01:17:44,250
project stuck on basil zero about 26 and

01:17:42,330 --> 01:17:48,890
another that's on 1.2 like yeah they're

01:17:44,250 --> 01:17:51,890
gonna have to be pretty separate yeah

01:17:48,890 --> 01:17:51,890
okay

01:17:54,159 --> 01:17:58,989
I'm doing at something that's maybe

01:17:56,290 --> 01:18:00,550
related to that question which is so I

01:17:58,989 --> 01:18:02,679
work in a consulting organization I have

01:18:00,550 --> 01:18:04,179
a couple of different customers who

01:18:02,679 --> 01:18:06,699
happen to be using basil but they're

01:18:04,179 --> 01:18:08,469
they're siloed like you said I'm

01:18:06,699 --> 01:18:10,179
publishing a small bit of code that they

01:18:08,469 --> 01:18:12,820
both would like to consume and so I

01:18:10,179 --> 01:18:15,310
actually like publish a go module with

01:18:12,820 --> 01:18:16,929
build that basil file journey in it sure

01:18:15,310 --> 01:18:17,440
it's got the exactly set up the way I

01:18:16,929 --> 01:18:19,060
want it

01:18:17,440 --> 01:18:22,750
yeah and it's easy for them both to suck

01:18:19,060 --> 01:18:24,820
it in yep yeah there are people doing

01:18:22,750 --> 01:18:26,199
that with get sub modules also kind of

01:18:24,820 --> 01:18:28,090
building a virtual repo I have a bunch

01:18:26,199 --> 01:18:34,480
of sub modules virtual mono repo

01:18:28,090 --> 01:18:35,679
basically yes or another yeah that just

01:18:34,480 --> 01:18:37,920
made me think about something else you

01:18:35,679 --> 01:18:42,659
mentioned earlier somebody asked about

01:18:37,920 --> 01:18:46,600
pushing artifacts out to remote yeah

01:18:42,659 --> 01:18:48,909
endpoints and then having remote caches

01:18:46,600 --> 01:18:50,800
and remote right everything is local so

01:18:48,909 --> 01:18:53,409
far in the examples you've shown yeah

01:18:50,800 --> 01:18:55,449
but you can point to endpoints that are

01:18:53,409 --> 01:18:56,920
not local is that correct so you can

01:18:55,449 --> 01:18:59,739
have that shared caching and chair yeah

01:18:56,920 --> 01:19:02,380
absolutely so I only showed you caching

01:18:59,739 --> 01:19:05,290
so you know it's important right there

01:19:02,380 --> 01:19:07,420
are other more advanced talks about like

01:19:05,290 --> 01:19:09,040
the kinds of caching like you can set up

01:19:07,420 --> 01:19:10,239
a Google Cloud Storage bucket to be your

01:19:09,040 --> 01:19:11,679
cache you can just have like uh

01:19:10,239 --> 01:19:12,880
something on a shared file system of the

01:19:11,679 --> 01:19:14,320
cache there's two or three different

01:19:12,880 --> 01:19:16,239
open-source implementations and a

01:19:14,320 --> 01:19:18,010
caching protocol between them so there's

01:19:16,239 --> 01:19:24,040
a there's a lot out there around caching

01:19:18,010 --> 01:19:26,469
I just did the simplest thing I brought

01:19:24,040 --> 01:19:29,170
this up to point out talk about pushing

01:19:26,469 --> 01:19:30,820
as you might guess the kubernetes stuff

01:19:29,170 --> 01:19:33,130
is it's pretty slick you can actually

01:19:30,820 --> 01:19:35,679
like manage a kubernetes deployment from

01:19:33,130 --> 01:19:40,960
a basil rule but it's like we're looking

01:19:35,679 --> 01:19:44,980
at if you did a sort of thing anybody

01:19:40,960 --> 01:19:48,880
else we may have reached the end so I

01:19:44,980 --> 01:19:50,440
will point the slide out again so if you

01:19:48,880 --> 01:19:51,940
work somewhere you want like a four

01:19:50,440 --> 01:19:53,500
times long version of this you might

01:19:51,940 --> 01:19:59,080
want to call us but other than that

01:19:53,500 --> 01:20:00,460
thanks for coming up sure okay if you

01:19:59,080 --> 01:20:02,830
want to be I mean you could actually

01:20:00,460 --> 01:20:04,719
like grab a piece of swag and a business

01:20:02,830 --> 01:20:07,300
card off the desk if you want the lo-fi

01:20:04,719 --> 01:20:07,940
way of achieving the goal or you can

01:20:07,300 --> 01:20:10,760
take a picture

01:20:07,940 --> 01:20:13,130
that's fine but anyway so thanks for

01:20:10,760 --> 01:20:15,350
coming hopefully uh hopefully this kind

01:20:13,130 --> 01:20:16,969
of met anybody's needs I try to think as

01:20:15,350 --> 01:20:19,070
much I'm gonna I'm just gonna stick my

01:20:16,969 --> 01:20:20,780
email address on here if anybody wants

01:20:19,070 --> 01:20:26,480
to just reach out to me directly

01:20:20,780 --> 01:20:29,420
I love getting feedback of any form so

01:20:26,480 --> 01:20:31,850
feel free to to reach email me directly

01:20:29,420 --> 01:20:33,890
for feedback of any form if there's

01:20:31,850 --> 01:20:35,719
anything you say hey I wish I think you

01:20:33,890 --> 01:20:37,460
should have covered topic X in the first

01:20:35,719 --> 01:20:39,890
three hours I would like that feedback

01:20:37,460 --> 01:20:41,570
if you say it sucked I'll take that

01:20:39,890 --> 01:20:50,570
feedback if you liked it I'll take that

01:20:41,570 --> 01:20:54,489
feedback and uh yeah thank you and lunch

01:20:50,570 --> 01:20:54,489
is started so run to lunch

01:20:56,970 --> 01:21:00,419

YouTube URL: https://www.youtube.com/watch?v=1KbfkOWO-DY


