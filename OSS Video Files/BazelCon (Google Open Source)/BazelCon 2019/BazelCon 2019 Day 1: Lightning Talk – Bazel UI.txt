Title: BazelCon 2019 Day 1: Lightning Talk â€“ Bazel UI
Publication date: 2020-01-15
Playlist: BazelCon 2019
Description: 
	Paul Johnston, stack.build event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Paul Johnston;
Captions: 
	00:00:00,030 --> 00:00:03,929
right our next speaker is Paul Johnson

00:00:02,460 --> 00:00:08,820
he'll talk about basil you I

00:00:03,929 --> 00:00:10,500
particularly okay so thank you so basil

00:00:08,820 --> 00:00:15,299
is this amazing tool this is a great

00:00:10,500 --> 00:00:17,400
tool makes us more efficient and but you

00:00:15,299 --> 00:00:19,109
know there it is it is a bit of a

00:00:17,400 --> 00:00:20,369
learning curve and it is challenging in

00:00:19,109 --> 00:00:22,680
particular if you're not part of the

00:00:20,369 --> 00:00:25,109
core build team and it's not really your

00:00:22,680 --> 00:00:26,970
you know core competency it can be quite

00:00:25,109 --> 00:00:29,279
intimidating and that's a real problem

00:00:26,970 --> 00:00:34,320
in terms of adoption of basil and in

00:00:29,279 --> 00:00:35,940
enterprise and organizations and you

00:00:34,320 --> 00:00:37,829
know ultimately makes your job harder if

00:00:35,940 --> 00:00:41,700
you're if your users you know have to

00:00:37,829 --> 00:00:44,280
struggle to learn basil so this is a

00:00:41,700 --> 00:00:46,440
tool I'd like to you know show you that

00:00:44,280 --> 00:00:48,120
you can offer to your colleagues to

00:00:46,440 --> 00:00:50,039
hopefully help decrease the activation

00:00:48,120 --> 00:00:52,710
energy to learn some of the basil

00:00:50,039 --> 00:00:55,440
concepts and also to give to yourself as

00:00:52,710 --> 00:00:58,230
sort of a force multiplier to learn

00:00:55,440 --> 00:01:01,710
basil faster and discover things quicker

00:00:58,230 --> 00:01:04,470
so it's called bzl or pronounced bezel

00:01:01,710 --> 00:01:06,030
and a bezel is a noun if you're holding

00:01:04,470 --> 00:01:07,619
your cell phone you're touching a bezel

00:01:06,030 --> 00:01:09,540
so the bezel is the sort of ring around

00:01:07,619 --> 00:01:12,119
your phone and classically it's the ring

00:01:09,540 --> 00:01:14,520
around a watch where the crystal glass

00:01:12,119 --> 00:01:16,020
goes in and so that kind of invokes this

00:01:14,520 --> 00:01:18,689
thing which is sort of like a wrapper

00:01:16,020 --> 00:01:28,500
with sort of a visual interface to the

00:01:18,689 --> 00:01:30,390
basil build tool yeah so so first

00:01:28,500 --> 00:01:32,939
foremost just to CLI this is statically

00:01:30,390 --> 00:01:36,090
compiled go binary with you know web

00:01:32,939 --> 00:01:38,130
server embedded in it and it's built

00:01:36,090 --> 00:01:39,509
basically in the same way over on top of

00:01:38,130 --> 00:01:43,380
basalis so if you're already using

00:01:39,509 --> 00:01:45,450
basilisk it's the same thing but it adds

00:01:43,380 --> 00:01:47,250
a few other commands so you there's a

00:01:45,450 --> 00:01:49,920
there's an install command so you can

00:01:47,250 --> 00:01:52,920
install basil versions at will there's a

00:01:49,920 --> 00:01:54,600
use command which is a repository rule

00:01:52,920 --> 00:01:56,430
generator so rather than having to

00:01:54,600 --> 00:01:58,170
figure out the sha-256 on your own and

00:01:56,430 --> 00:02:02,009
it this will spit out an HTTP archive

00:01:58,170 --> 00:02:04,740
for you or go repository or so forth and

00:02:02,009 --> 00:02:07,619
then basil serving basil open allow you

00:02:04,740 --> 00:02:09,569
to kind of look inside your basil build

00:02:07,619 --> 00:02:13,900
and so I guess I'll switch over to a

00:02:09,569 --> 00:02:17,209
demo at this point I don't know how

00:02:13,900 --> 00:02:19,310
okay so I'm here I'm inside the the

00:02:17,209 --> 00:02:30,580
abseil repository just been talked about

00:02:19,310 --> 00:02:33,530
and if I type gzl build abseil base

00:02:30,580 --> 00:02:35,720
that's normal right everyone knows what

00:02:33,530 --> 00:02:37,700
that is but I don't really know what's

00:02:35,720 --> 00:02:42,250
kind of happening so instead that I'm

00:02:37,700 --> 00:02:45,830
gonna say open and it'll drop us into

00:02:42,250 --> 00:02:47,569
kind of a location in the bill where we

00:02:45,830 --> 00:02:50,180
are and so are immediately presented

00:02:47,569 --> 00:02:52,579
with sort of a nicely formatted build

00:02:50,180 --> 00:02:55,400
rule where the inputs are replaced with

00:02:52,579 --> 00:02:58,910
links and so you can easily traverse the

00:02:55,400 --> 00:03:02,840
build graph you know pretty quickly and

00:02:58,910 --> 00:03:05,209
you can go through the build quite

00:03:02,840 --> 00:03:08,450
easily and even you know sort of inspect

00:03:05,209 --> 00:03:10,130
files and I use this to like sometimes

00:03:08,450 --> 00:03:11,569
there's a proto buff that I want to see

00:03:10,130 --> 00:03:13,670
the protobuf but it's embedded like

00:03:11,569 --> 00:03:15,440
three levels down it's cumbersome to get

00:03:13,670 --> 00:03:17,840
to and so I'll kind of use this to kind

00:03:15,440 --> 00:03:19,760
of inspect those kinds of files but even

00:03:17,840 --> 00:03:21,049
more simpler than that just just a label

00:03:19,760 --> 00:03:22,700
like I remember when I was first

00:03:21,049 --> 00:03:25,250
learning basil when I first looked at it

00:03:22,700 --> 00:03:27,769
like a label and it was like what I have

00:03:25,250 --> 00:03:29,569
no idea what that is it was just it was

00:03:27,769 --> 00:03:31,250
hard to learn but this makes it really

00:03:29,569 --> 00:03:33,769
clear if I can just I know it's that

00:03:31,250 --> 00:03:36,739
there's a target and I can go look at

00:03:33,769 --> 00:03:39,590
the package and kind of and see what's

00:03:36,739 --> 00:03:42,109
inside the package and so forth or I can

00:03:39,590 --> 00:03:44,810
go up to the workspace and take a look

00:03:42,109 --> 00:03:49,130
at all the packages in the workspace and

00:03:44,810 --> 00:03:56,049
easily kind of click through and and see

00:03:49,130 --> 00:04:00,980
that so if we go to then let's see

00:03:56,049 --> 00:04:06,889
strings pass it package and maybe the

00:04:00,980 --> 00:04:09,230
split test so so we saw the rule you can

00:04:06,889 --> 00:04:10,549
also look at the inputs and outputs for

00:04:09,230 --> 00:04:14,540
the rule you can look at all the

00:04:10,549 --> 00:04:15,889
attributes that are defined and so all

00:04:14,540 --> 00:04:17,299
the ones you're used to in addition the

00:04:15,889 --> 00:04:21,859
ones you don't normally see without

00:04:17,299 --> 00:04:23,720
looking at the protobuf directly you can

00:04:21,859 --> 00:04:25,729
then look at dependencies and you can

00:04:23,720 --> 00:04:26,830
also build and here we're streaming the

00:04:25,729 --> 00:04:30,350
bill

00:04:26,830 --> 00:04:31,940
protocol and so it's it's useful to

00:04:30,350 --> 00:04:34,580
learn the build event protocol because

00:04:31,940 --> 00:04:36,020
you kind of reduces the space of the

00:04:34,580 --> 00:04:37,310
problem space of basal-like once you

00:04:36,020 --> 00:04:39,199
understand the build event protocol you

00:04:37,310 --> 00:04:41,810
understand better about what basil is

00:04:39,199 --> 00:04:44,960
doing and it seems less magical so if we

00:04:41,810 --> 00:04:47,180
do that then it'll start building

00:04:44,960 --> 00:04:48,860
targets and and it kind of shows us this

00:04:47,180 --> 00:04:50,240
graph of what's happening and you can

00:04:48,860 --> 00:04:52,880
see all the actions that are occurring

00:04:50,240 --> 00:04:54,229
so forth and so okay so that passed so

00:04:52,880 --> 00:04:57,780
that was good we can kind of click

00:04:54,229 --> 00:05:02,410
through and look at the difference

00:04:57,780 --> 00:05:04,580
[Applause]

00:05:02,410 --> 00:05:08,270
someone mentioned earlier you could you

00:05:04,580 --> 00:05:10,280
know you can look at the they're using

00:05:08,270 --> 00:05:14,120
the checking whether it's cache remote

00:05:10,280 --> 00:05:15,710
laden no there so anyway so yeah you can

00:05:14,120 --> 00:05:17,660
you get to you understand what's

00:05:15,710 --> 00:05:18,400
happening inside your build a little bit

00:05:17,660 --> 00:05:20,840
better

00:05:18,400 --> 00:05:22,550
let's do coverage because covers will

00:05:20,840 --> 00:05:24,500
regenerate all the binaries and so forth

00:05:22,550 --> 00:05:31,280
I'm gonna cancel this because the code

00:05:24,500 --> 00:05:33,650
coverage won't work but just cancel that

00:05:31,280 --> 00:05:35,030
but then we can kind of slide through

00:05:33,650 --> 00:05:37,580
and look at all the different actions

00:05:35,030 --> 00:05:39,380
that have occurred and we can sort of

00:05:37,580 --> 00:05:42,320
see you know the specific command line

00:05:39,380 --> 00:05:43,599
stuff that occurred so it's a it's a

00:05:42,320 --> 00:05:46,070
good way to kind of learn your build

00:05:43,599 --> 00:05:49,720
this is a bit experimental but you can

00:05:46,070 --> 00:05:49,720
also kind of render the build graph also

00:05:50,979 --> 00:05:55,639
so I'm yet to sort of figure out the

00:05:53,660 --> 00:05:57,680
right heuristic of complexity versus

00:05:55,639 --> 00:05:59,960
simplicity with that but work in

00:05:57,680 --> 00:06:02,539
progress there so another thing that's

00:05:59,960 --> 00:06:06,349
useful is navigating the flag landscape

00:06:02,539 --> 00:06:08,000
of basil like there's so many flags and

00:06:06,349 --> 00:06:09,500
it's hard to know what they are and

00:06:08,000 --> 00:06:12,070
they're all available but this allows

00:06:09,500 --> 00:06:14,570
you to kind of be like alright I know

00:06:12,070 --> 00:06:17,120
know something I remember there's a

00:06:14,570 --> 00:06:20,539
remote flag about something maybe I'll

00:06:17,120 --> 00:06:22,550
go here and I can read about the remote

00:06:20,539 --> 00:06:23,960
instance name and a nice thing I don't

00:06:22,550 --> 00:06:26,539
know if you're abusing basil code search

00:06:23,960 --> 00:06:28,460
but I find the you know looking at basil

00:06:26,539 --> 00:06:29,840
code search for flags is useful because

00:06:28,460 --> 00:06:31,940
you go right to the source and you kind

00:06:29,840 --> 00:06:33,440
of get more information about what it is

00:06:31,940 --> 00:06:35,010
because it's often not super

00:06:33,440 --> 00:06:39,540
well-documented

00:06:35,010 --> 00:06:45,090
so expecting the flags it's good if we

00:06:39,540 --> 00:06:47,310
go to the tensorflow repository - it

00:06:45,090 --> 00:06:48,770
gives you sort of a nice sort of

00:06:47,310 --> 00:06:50,550
formatted understanding of

00:06:48,770 --> 00:06:53,010
configurations - so it gives you just

00:06:50,550 --> 00:06:58,920
sort of a window into what the

00:06:53,010 --> 00:07:02,730
configurations are so there's a fair

00:06:58,920 --> 00:07:06,060
amount of other stuff in here but yeah

00:07:02,730 --> 00:07:07,950
there's lightning talks so let's see

00:07:06,060 --> 00:07:09,960
what did I want to say after this so I

00:07:07,950 --> 00:07:12,480
did want to put together a build server

00:07:09,960 --> 00:07:15,090
for this you know this is this is closed

00:07:12,480 --> 00:07:16,500
source it's not free right now wanting

00:07:15,090 --> 00:07:18,420
to apply some sort of metric that it's

00:07:16,500 --> 00:07:20,910
worth my time to continue developing but

00:07:18,420 --> 00:07:22,410
it is fairly affordable in sheep

00:07:20,910 --> 00:07:25,440
especially working for some of these big

00:07:22,410 --> 00:07:27,030
companies so so look out for that so you

00:07:25,440 --> 00:07:28,350
can download it build your own personal

00:07:27,030 --> 00:07:31,590
binary and use it for whatever platform

00:07:28,350 --> 00:07:34,020
you want and and then come talk to me

00:07:31,590 --> 00:07:37,020
about what a tool like this should do

00:07:34,020 --> 00:07:41,360
and you know how it can how it can be

00:07:37,020 --> 00:07:41,360
improved so appreciate your attention I

00:07:45,500 --> 00:08:02,400
think it's a great tool patience yeah

00:07:59,580 --> 00:08:03,930
it's it does a lot by a github so it

00:08:02,400 --> 00:08:05,760
immediately doesn't probably should not

00:08:03,930 --> 00:08:07,140
do that right away that's definitely a

00:08:05,760 --> 00:08:09,950
work in progress check back tomorrow

00:08:07,140 --> 00:08:21,660
finally I don't continue to

00:08:09,950 --> 00:08:23,100
underestimate things like yeah so you

00:08:21,660 --> 00:08:25,230
can sort of see all the external

00:08:23,100 --> 00:08:27,600
dependencies they're kind of categorized

00:08:25,230 --> 00:08:30,830
and you can click through and go through

00:08:27,600 --> 00:08:33,570
under you know get a better sense of I

00:08:30,830 --> 00:08:35,630
probably shouldn't load tensorflow as a

00:08:33,570 --> 00:08:38,910
an example here because I haven't pre

00:08:35,630 --> 00:08:43,620
haven't reloaded it so let me go back to

00:08:38,910 --> 00:08:44,940
upsell to do that but yeah it allows you

00:08:43,620 --> 00:08:46,860
to kind of go through

00:08:44,940 --> 00:08:49,260
Journal dependencies and another thing

00:08:46,860 --> 00:08:50,850
to do is it'll summarize what all the

00:08:49,260 --> 00:08:51,900
different rules are in there so you can

00:08:50,850 --> 00:08:53,250
kind of get a better understanding of

00:08:51,900 --> 00:08:55,050
like what is the landscape of this

00:08:53,250 --> 00:08:57,810
repository what are the rules inside of

00:08:55,050 --> 00:09:00,510
it so I can see there's 29 SEC binaries

00:08:57,810 --> 00:09:03,120
in here and I can you know build those

00:09:00,510 --> 00:09:05,480
different kinds of things just directly

00:09:03,120 --> 00:09:05,480
so

00:09:08,980 --> 00:09:15,600

YouTube URL: https://www.youtube.com/watch?v=2a3S3MJOa9I


