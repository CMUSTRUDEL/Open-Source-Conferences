Title: BazelCon 2019 Day 2: Remote Execution for Windows + Q&A
Publication date: 2020-01-15
Playlist: BazelCon 2019
Description: 
	Erik Mavrinac, Microsoft event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Erik Mavrinac;
Captions: 
	00:00:00,089 --> 00:00:08,360
for all good all clear let me introduce

00:00:04,339 --> 00:00:18,449
Eric Myron ACK thanks Joe thanks

00:00:08,360 --> 00:00:20,570
how do everybody wait - thanks no

00:00:18,449 --> 00:00:27,660
worries

00:00:20,570 --> 00:00:34,189
already I'm on the last slide for some

00:00:27,660 --> 00:00:34,189
reason I thought that was my last slide

00:00:44,620 --> 00:00:51,520
oh hey no worries

00:00:48,340 --> 00:00:54,440
hey so a duck walks into a bar

00:00:51,520 --> 00:01:03,040
ouchie says it's the only joke I know

00:00:54,440 --> 00:01:03,040
come on sure hmm

00:01:03,699 --> 00:01:09,520
oh hey cool awesome logo anyway long

00:01:07,720 --> 00:01:10,960
title but what it comes down to is we

00:01:09,520 --> 00:01:12,430
head in a little bit different direction

00:01:10,960 --> 00:01:13,390
because of her internal history and

00:01:12,430 --> 00:01:15,430
Microsoft

00:01:13,390 --> 00:01:17,649
I'm from the one engineering systems

00:01:15,430 --> 00:01:20,619
team been with it since before it was

00:01:17,649 --> 00:01:21,759
called that about eight years now and

00:01:20,619 --> 00:01:23,920
I'll show you some of the stuff we've

00:01:21,759 --> 00:01:26,170
been doing where we're headed in the

00:01:23,920 --> 00:01:28,240
short term and then I'll leave a an

00:01:26,170 --> 00:01:29,590
ellipsis at the end we can see what

00:01:28,240 --> 00:01:33,549
happens in the next year by the next

00:01:29,590 --> 00:01:36,640
phase of con for instance we're gonna do

00:01:33,549 --> 00:01:38,170
all this don't worry we'll get to it so

00:01:36,640 --> 00:01:42,490
we've been doing cloud for quite a while

00:01:38,170 --> 00:01:45,429
for build it back in very early 2012

00:01:42,490 --> 00:01:47,619
late 2011 when I joined what was then at

00:01:45,429 --> 00:01:48,909
the NASA and cloud build team and a lot

00:01:47,619 --> 00:01:50,649
some people know about cloud build some

00:01:48,909 --> 00:01:53,259
don't it's internal only you can't use

00:01:50,649 --> 00:01:54,759
it too bad but we got about thirty five

00:01:53,259 --> 00:01:58,060
thousand actually it's more than that

00:01:54,759 --> 00:01:59,409
now physical machines big beefy you know

00:01:58,060 --> 00:02:01,659
forty eight cores sixty-four core

00:01:59,409 --> 00:02:03,670
machines 256 gigs of memory because I

00:02:01,659 --> 00:02:05,560
have big builds we have some half

00:02:03,670 --> 00:02:06,880
terabyte enlistments we have quarter

00:02:05,560 --> 00:02:09,130
terabyte enlistments we have all the way

00:02:06,880 --> 00:02:10,570
down to a few Meg's but one of the

00:02:09,130 --> 00:02:12,760
things that we were aiming at back then

00:02:10,570 --> 00:02:15,400
we started with distribution for NS

00:02:12,760 --> 00:02:16,660
build anybody who's delve deep into miss

00:02:15,400 --> 00:02:18,400
build knows this kind of difficult and

00:02:16,660 --> 00:02:20,640
we got it done

00:02:18,400 --> 00:02:22,390
we went from there and added caching

00:02:20,640 --> 00:02:23,680
well that's interesting

00:02:22,390 --> 00:02:28,420
somehow I ended up the squares that's

00:02:23,680 --> 00:02:30,370
cool when we started there was there

00:02:28,420 --> 00:02:34,989
were teams we start in the Bing team

00:02:30,370 --> 00:02:38,500
where we were a startup project builds

00:02:34,989 --> 00:02:40,230
there were 10 hours for retail six hours

00:02:38,500 --> 00:02:42,190
for debug for our first customer there's

00:02:40,230 --> 00:02:43,420
they were one of the biggest they have

00:02:42,190 --> 00:02:47,079
some though had some of the worse

00:02:43,420 --> 00:02:48,850
problems had mostly had with

00:02:47,079 --> 00:02:50,470
distribution only no caching we got it

00:02:48,850 --> 00:02:51,910
down to 16 minutes for debug just by

00:02:50,470 --> 00:02:53,920
adding more machines once we were able

00:02:51,910 --> 00:02:55,840
to do that and we went from 10 our

00:02:53,920 --> 00:02:57,880
retail bills to about 1 hour they still

00:02:55,840 --> 00:02:59,620
have a lot of single commands that take

00:02:57,880 --> 00:03:01,389
a long time and a whole machine to run

00:02:59,620 --> 00:03:04,030
but given more machines everything gets

00:03:01,389 --> 00:03:05,950
a lot faster we followed up with build

00:03:04,030 --> 00:03:07,209
Excel and build accelerator is this new

00:03:05,950 --> 00:03:11,380
name it used to be called Domino for

00:03:07,209 --> 00:03:13,810
those who happen to know that dual shift

00:03:11,380 --> 00:03:15,580
4 so there's dev cash above and quick

00:03:13,810 --> 00:03:16,959
build there's def cash and build Excel

00:03:15,580 --> 00:03:17,440
they're different technology stacks

00:03:16,959 --> 00:03:19,690
different

00:03:17,440 --> 00:03:21,700
people seem overall team just different

00:03:19,690 --> 00:03:23,980
approaches and actually what's

00:03:21,700 --> 00:03:25,900
interesting is we didn't know the name

00:03:23,980 --> 00:03:28,210
basil back then because basil has a name

00:03:25,900 --> 00:03:31,540
didn't exist yet but we started with on

00:03:28,210 --> 00:03:33,990
that one of the white papers for for

00:03:31,540 --> 00:03:37,230
blaze if it was called that back then

00:03:33,990 --> 00:03:39,750
about how to sandbox and how to present

00:03:37,230 --> 00:03:42,520
nothing but what was specified and

00:03:39,750 --> 00:03:44,110
starting with that and the same concept

00:03:42,520 --> 00:03:45,820
we arrive at a build engine that has a

00:03:44,110 --> 00:03:47,620
different lineage from the stuff at the

00:03:45,820 --> 00:03:50,020
top it's slowly converging this together

00:03:47,620 --> 00:03:53,350
takes a while because well quick build

00:03:50,020 --> 00:03:54,130
has about 1600 repos and everything from

00:03:53,350 --> 00:03:55,810
small to large

00:03:54,130 --> 00:03:57,910
pretty much it must build only with a

00:03:55,810 --> 00:04:02,320
bit of the old 30 year old empty build

00:03:57,910 --> 00:04:03,940
system it's now 30 years whereas Bill

00:04:02,320 --> 00:04:05,290
Excel started with the hugest code bases

00:04:03,940 --> 00:04:08,980
and they're coming towards the center so

00:04:05,290 --> 00:04:10,840
we're getting there have turbine list

00:04:08,980 --> 00:04:12,070
myths or interesting problem just by

00:04:10,840 --> 00:04:15,220
themselves and we solved that a couple

00:04:12,070 --> 00:04:17,859
years ago anyway so this is what we're

00:04:15,220 --> 00:04:19,420
doing now what I'm seeing with basil con

00:04:17,859 --> 00:04:21,850
that talks the last few days is people

00:04:19,420 --> 00:04:23,530
converting entirely to the basil build

00:04:21,850 --> 00:04:25,390
language as well as the basil ecosystem

00:04:23,530 --> 00:04:28,480
and doing a full conversion away from

00:04:25,390 --> 00:04:29,980
what see make all the other engines it's

00:04:28,480 --> 00:04:31,360
pretty cool we've got a lot of this tech

00:04:29,980 --> 00:04:36,580
but we never never really made it that

00:04:31,360 --> 00:04:37,600
public so just a reminder since we all

00:04:36,580 --> 00:04:40,240
know this but I'll just say it again

00:04:37,600 --> 00:04:42,730
what is especially from the dev point of

00:04:40,240 --> 00:04:44,950
view see is that's great we've basically

00:04:42,730 --> 00:04:47,140
solved the CI problem like crazy with 40

00:04:44,950 --> 00:04:48,250
thousand machines boom well and eight

00:04:47,140 --> 00:04:50,680
years of time a whole bunch of people

00:04:48,250 --> 00:04:51,970
really good people but from the dev

00:04:50,680 --> 00:04:53,740
point of view there's a little bit of a

00:04:51,970 --> 00:04:55,300
gap if you're the person doing the

00:04:53,740 --> 00:04:56,320
refactoring you're the person upgrading

00:04:55,300 --> 00:04:58,960
the package that's going to invalidate

00:04:56,320 --> 00:05:03,070
your whole build graph it's not so good

00:04:58,960 --> 00:05:04,810
right we use buddy builds I think I said

00:05:03,070 --> 00:05:06,160
on the previous slide we used buddy

00:05:04,810 --> 00:05:08,710
builds and I do that a lot when I'm

00:05:06,160 --> 00:05:11,080
doing a package upgrade I'll say change

00:05:08,710 --> 00:05:12,940
the package ID maybe fix a few things

00:05:11,080 --> 00:05:14,740
locally if I can kick off a buddy build

00:05:12,940 --> 00:05:17,290
in the cloud comes back 10-15 minutes

00:05:14,740 --> 00:05:19,480
later saying good to go or you broke and

00:05:17,290 --> 00:05:20,950
iterate that way but if you don't want

00:05:19,480 --> 00:05:23,140
to break out of your zone if you want to

00:05:20,950 --> 00:05:24,520
keep weaving and depends on your mental

00:05:23,140 --> 00:05:26,080
model but I think it was weaving a whole

00:05:24,520 --> 00:05:28,539
bunch of threads together you don't want

00:05:26,080 --> 00:05:30,340
to break out of flow etc to go wait for

00:05:28,539 --> 00:05:31,949
the data center build we want to be able

00:05:30,340 --> 00:05:35,350
to hook in at the death

00:05:31,949 --> 00:05:37,270
but we need more spindles really is what

00:05:35,350 --> 00:05:38,919
it comes down to more i/o buses more

00:05:37,270 --> 00:05:41,710
memory to memory usually isn't the

00:05:38,919 --> 00:05:46,509
biggest problem unless you have a real

00:05:41,710 --> 00:05:49,300
junky laptop more disks more spindles

00:05:46,509 --> 00:05:50,800
more SSDs more raid zero more stuff

00:05:49,300 --> 00:05:53,440
that's not on your box and not heating

00:05:50,800 --> 00:05:58,539
up your lap or your definition of your

00:05:53,440 --> 00:06:00,130
desk so take stuff and remote it get it

00:05:58,539 --> 00:06:02,020
off your machine of course you could do

00:06:00,130 --> 00:06:03,820
fully virtual run in the cloud only and

00:06:02,020 --> 00:06:05,139
that's cool but we don't have that we're

00:06:03,820 --> 00:06:08,550
kind of a big client for that client

00:06:05,139 --> 00:06:11,710
company so we'll run with that

00:06:08,550 --> 00:06:15,270
so challenges one of the things that

00:06:11,710 --> 00:06:17,800
works me because of this down here I

00:06:15,270 --> 00:06:19,570
want the devil machine to be primary if

00:06:17,800 --> 00:06:21,250
I go and mess with things cuz I do it

00:06:19,570 --> 00:06:22,780
all the time myself I rearranged code

00:06:21,250 --> 00:06:24,699
maybe I didn't want to get commit that

00:06:22,780 --> 00:06:26,620
yet or anything like that mess with

00:06:24,699 --> 00:06:30,550
weird packages get a pre-release

00:06:26,620 --> 00:06:32,560
compiler anything like that is the CI

00:06:30,550 --> 00:06:34,960
system ready to go with unless it's

00:06:32,560 --> 00:06:36,460
fully packaged and fully published CI

00:06:34,960 --> 00:06:39,729
systems not necessarily ready to go with

00:06:36,460 --> 00:06:41,259
that may have some time to catch up in

00:06:39,729 --> 00:06:43,870
fact I have a PR internally that's

00:06:41,259 --> 00:06:46,449
waiting for an image to get out to the

00:06:43,870 --> 00:06:48,099
ring of production that those guys are

00:06:46,449 --> 00:06:49,570
in work for me doesn't work for them

00:06:48,099 --> 00:06:51,360
because the this image is still working

00:06:49,570 --> 00:06:55,479
its way out with the very very latest

00:06:51,360 --> 00:06:57,130
nosebleed sort of stuff the fun part of

00:06:55,479 --> 00:06:58,599
this or the not fun part of this is what

00:06:57,130 --> 00:07:00,430
if you have special requirements what if

00:06:58,599 --> 00:07:01,960
say this image doesn't have what you

00:07:00,430 --> 00:07:03,849
want now you get to go manage your own

00:07:01,960 --> 00:07:05,620
you get to arrange for patches you get

00:07:03,849 --> 00:07:07,930
to do all that stuff I find it annoying

00:07:05,620 --> 00:07:11,169
it's kind of like a waste of life you

00:07:07,930 --> 00:07:13,389
know better things did you build

00:07:11,169 --> 00:07:14,380
language problems so the people of Basel

00:07:13,389 --> 00:07:16,060
kind of been talking about hey we

00:07:14,380 --> 00:07:18,969
convert it to basil its language its

00:07:16,060 --> 00:07:20,259
ecosystem and that's cool and I don't

00:07:18,969 --> 00:07:21,789
know what the largest team was is

00:07:20,259 --> 00:07:23,830
presented so far but think of just maybe

00:07:21,789 --> 00:07:25,240
a hundred people what if you got 200 or

00:07:23,830 --> 00:07:27,009
if they got a thousand or you've got

00:07:25,240 --> 00:07:29,639
three thousand people changing build

00:07:27,009 --> 00:07:32,800
language not that easy what if you have

00:07:29,639 --> 00:07:34,300
125,000 build specs there was once upon

00:07:32,800 --> 00:07:37,330
a time a team that said hey we're gonna

00:07:34,300 --> 00:07:38,409
take two thousand devs and a month and

00:07:37,330 --> 00:07:40,510
we're gonna change from this bill

00:07:38,409 --> 00:07:42,520
language of this bill language any ideas

00:07:40,510 --> 00:07:45,540
how many show hands how many people or

00:07:42,520 --> 00:07:47,920
how many of the specs were actually can

00:07:45,540 --> 00:07:50,470
and that was good you shouldn't do that

00:07:47,920 --> 00:07:51,850
that's a complete waste of if you want

00:07:50,470 --> 00:07:53,620
to think of this business time or you

00:07:51,850 --> 00:07:55,810
know time value of money it's kind of a

00:07:53,620 --> 00:07:57,550
waste of time so instead you leave the

00:07:55,810 --> 00:08:00,310
30 year old language in this case the

00:07:57,550 --> 00:08:03,040
ante build system alone and you adapt on

00:08:00,310 --> 00:08:05,770
top of that so converting everything to

00:08:03,040 --> 00:08:07,630
Basel hmm pretty hard plus you have to

00:08:05,770 --> 00:08:10,690
retrain everybody some of the stuff I

00:08:07,630 --> 00:08:13,510
heard was we had a seed team those guys

00:08:10,690 --> 00:08:16,030
converted then they were the advisors or

00:08:13,510 --> 00:08:17,380
the the QA people to answer all the

00:08:16,030 --> 00:08:19,090
questions that the next tier of a

00:08:17,380 --> 00:08:20,470
hundred people had it's a good pattern

00:08:19,090 --> 00:08:22,390
again though

00:08:20,470 --> 00:08:25,540
three thousand I don't know if that

00:08:22,390 --> 00:08:26,920
scales very well but I would use Basel

00:08:25,540 --> 00:08:29,200
and start up because I know what happens

00:08:26,920 --> 00:08:31,660
if you get beyond a handful well it's

00:08:29,200 --> 00:08:33,970
more than that the any build code base

00:08:31,660 --> 00:08:36,250
is about 32 projects right now and it's

00:08:33,970 --> 00:08:37,870
about a minute build is fine you get to

00:08:36,250 --> 00:08:40,000
a hundred is that the breakpoint is that

00:08:37,870 --> 00:08:41,440
a thousand well it's definitely a

00:08:40,000 --> 00:08:43,300
thousand two hundred somewhere in there

00:08:41,440 --> 00:08:45,190
it starts to really be bad you're five

00:08:43,300 --> 00:08:47,650
minutes it's go get coffee time instead

00:08:45,190 --> 00:08:49,240
of you're in the zone or even longer and

00:08:47,650 --> 00:08:51,790
then you're in the go get lunch time

00:08:49,240 --> 00:08:56,410
instead of going and getting coffee

00:08:51,790 --> 00:08:57,940
so waste of time so if we're not going

00:08:56,410 --> 00:08:59,440
to be converting to a deterministic

00:08:57,940 --> 00:09:02,980
language like Basel we got to deal with

00:08:59,440 --> 00:09:06,280
it as it is but like I said before we've

00:09:02,980 --> 00:09:07,690
been working on msbuild and adding

00:09:06,280 --> 00:09:09,760
distribution and caching to that with a

00:09:07,690 --> 00:09:11,470
great deal of effort what we're doing is

00:09:09,760 --> 00:09:13,120
learning predictors we look at the XML

00:09:11,470 --> 00:09:15,430
we say oh that's gonna have these inputs

00:09:13,120 --> 00:09:17,230
and those outputs and if we miss there's

00:09:15,430 --> 00:09:19,660
a bunch of mitigation strategies it's

00:09:17,230 --> 00:09:21,370
just kind of human time intensive and

00:09:19,660 --> 00:09:25,960
I'd rather if possible step away from

00:09:21,370 --> 00:09:28,330
that and just FYI in case you didn't

00:09:25,960 --> 00:09:29,620
know msbuild is basically its original

00:09:28,330 --> 00:09:31,450
entry point or the one if you look on

00:09:29,620 --> 00:09:34,300
the web it's called X make dots yes

00:09:31,450 --> 00:09:36,550
so it's XML make right so you take make

00:09:34,300 --> 00:09:38,290
the filesystem date times and you add on

00:09:36,550 --> 00:09:41,620
to that some in-memory stuff and you get

00:09:38,290 --> 00:09:43,360
Emma's bill but if you've tried to wrap

00:09:41,620 --> 00:09:45,190
make in a fully deterministic wrapper

00:09:43,360 --> 00:09:50,350
with all inputs now it's predicted and

00:09:45,190 --> 00:09:52,030
you can guess how that looks so and then

00:09:50,350 --> 00:09:54,550
one of the things is a little bit less

00:09:52,030 --> 00:09:56,800
prevalent than it used to be but PD B's

00:09:54,550 --> 00:09:57,970
program database files for debugging

00:09:56,800 --> 00:09:59,499
often have the

00:09:57,970 --> 00:10:00,879
of the machine that it ran on I don't

00:09:59,499 --> 00:10:03,279
know if you've started up a debugger and

00:10:00,879 --> 00:10:05,349
you got that problem of Oddi colon slash

00:10:03,279 --> 00:10:07,149
whatever and you've got some weird path

00:10:05,349 --> 00:10:08,289
that was from the build machine but it

00:10:07,149 --> 00:10:10,659
doesn't match yours and you have to do a

00:10:08,289 --> 00:10:11,499
bit of patch up it'd be nice not to have

00:10:10,659 --> 00:10:14,079
to deal with that

00:10:11,499 --> 00:10:15,579
Plus reproducible builds it's a website

00:10:14,079 --> 00:10:17,589
that's underway people are headed that

00:10:15,579 --> 00:10:19,239
way a lot of tools don't support it yet

00:10:17,589 --> 00:10:20,439
or if they do they're off by default so

00:10:19,239 --> 00:10:22,449
you kind of have to remember to go turn

00:10:20,439 --> 00:10:27,639
on reproducible outputs from the same

00:10:22,449 --> 00:10:29,619
inputs and I've alluded to this already

00:10:27,639 --> 00:10:32,169
we solved the CI problem really really

00:10:29,619 --> 00:10:36,759
well with tons of hardware and a lot of

00:10:32,169 --> 00:10:38,229
effort that's great do a lot of buddy

00:10:36,759 --> 00:10:39,639
builds but again I don't want to break

00:10:38,229 --> 00:10:42,729
out of zone I don't want to get commit

00:10:39,639 --> 00:10:44,919
push run a buddy builds wait for it

00:10:42,729 --> 00:10:46,899
waiting for prep time pull the latest

00:10:44,919 --> 00:10:48,220
packages than maybe I upgraded or wait

00:10:46,899 --> 00:10:50,739
for it to wonder the dependency graph

00:10:48,220 --> 00:10:55,419
building the because I touched Windows H

00:10:50,739 --> 00:10:57,309
or some equivalent in my code base so

00:10:55,419 --> 00:11:01,269
what are we doing this is a prototype

00:10:57,309 --> 00:11:03,399
although it did ship internally and it's

00:11:01,269 --> 00:11:04,569
based on basil remote execution so we're

00:11:03,399 --> 00:11:05,799
starting with that protocol and then

00:11:04,569 --> 00:11:07,899
varying and then we'll bring it back

00:11:05,799 --> 00:11:10,629
that's part of the plan at least as of

00:11:07,899 --> 00:11:13,209
this moment we wrap the existing build

00:11:10,629 --> 00:11:16,119
engine so we take Emma's build a DX and

00:11:13,209 --> 00:11:18,039
just run it there's another in anti

00:11:16,119 --> 00:11:19,599
build system from 30 years ago as

00:11:18,039 --> 00:11:21,729
another tool called build exe that's

00:11:19,599 --> 00:11:24,489
still around we wrap that too I've

00:11:21,729 --> 00:11:26,589
wrapped a gulp and done offloaded mocha

00:11:24,489 --> 00:11:28,989
tests on two different machines that

00:11:26,589 --> 00:11:32,259
makes my laptop a lot happier not to

00:11:28,989 --> 00:11:33,879
have to do all that stuff we have a cows

00:11:32,259 --> 00:11:35,349
we use the same cows protocol in fact

00:11:33,879 --> 00:11:36,789
that's the one thing we do most of is

00:11:35,349 --> 00:11:38,199
the is a byte stream and

00:11:36,789 --> 00:11:40,629
content-addressable story pretty much

00:11:38,199 --> 00:11:43,479
used near 100% except I'm not doing

00:11:40,629 --> 00:11:45,129
directory myrtle trees yet the other

00:11:43,479 --> 00:11:46,479
thing is like I said I don't want to

00:11:45,129 --> 00:11:48,429
deal with trying to deal with your image

00:11:46,479 --> 00:11:49,899
your tool oh my gosh I'm behind because

00:11:48,429 --> 00:11:51,189
tomorrow that'll ship and you're stuck

00:11:49,899 --> 00:11:52,720
today and you can't get your CI built

00:11:51,189 --> 00:11:54,970
through the devil machines the master

00:11:52,720 --> 00:11:57,339
all of your files just get uploaded as

00:11:54,970 --> 00:12:00,309
is if you have a special patch if you

00:11:57,339 --> 00:12:01,889
just installed some new tool that is an

00:12:00,309 --> 00:12:04,689
admin installed tool like Visual Studio

00:12:01,889 --> 00:12:06,309
we just get what you just deployed it

00:12:04,689 --> 00:12:08,139
just goes in the Kaz is just a file and

00:12:06,309 --> 00:12:10,769
we just run it and that's using some new

00:12:08,139 --> 00:12:10,769
virtualization

00:12:13,019 --> 00:12:19,410
and then importantly because I don't

00:12:16,829 --> 00:12:20,910
have purely hermetic build nodes

00:12:19,410 --> 00:12:22,290
whatever a note is in this case could be

00:12:20,910 --> 00:12:25,110
a process it could be a higher little

00:12:22,290 --> 00:12:28,079
construct I try to predict but if I miss

00:12:25,110 --> 00:12:30,029
and I don't want to be broken so we have

00:12:28,079 --> 00:12:31,769
a new contract that's an extension of

00:12:30,029 --> 00:12:34,649
the re protocol that we'll be delivering

00:12:31,769 --> 00:12:36,360
back eventually that reaches back the

00:12:34,649 --> 00:12:37,920
server can ask the client

00:12:36,360 --> 00:12:40,019
what's this directory you didn't tell me

00:12:37,920 --> 00:12:41,759
about that wasn't predicted hey what's

00:12:40,019 --> 00:12:43,470
this files hash oh good I've got it in

00:12:41,759 --> 00:12:44,550
the Cavs let's go use it oh wait I don't

00:12:43,470 --> 00:12:48,209
have that can you just give it to me

00:12:44,550 --> 00:12:49,769
live now so unlike the basil re protocol

00:12:48,209 --> 00:12:51,480
is a bit more of a batch protocol here's

00:12:49,769 --> 00:12:54,060
some work let me get a monitoring stream

00:12:51,480 --> 00:12:55,170
back instead any build is you need to be

00:12:54,060 --> 00:12:57,300
here live because I need to ask you

00:12:55,170 --> 00:12:59,160
questions hopefully not because doing so

00:12:57,300 --> 00:13:01,050
is lower performance but it doesn't

00:12:59,160 --> 00:13:02,339
break it just slows down and then you

00:13:01,050 --> 00:13:04,199
get some Chama tree and you follow up

00:13:02,339 --> 00:13:05,670
and say oh yeah we've been you know

00:13:04,199 --> 00:13:07,589
we've got a new compiler that does some

00:13:05,670 --> 00:13:09,420
new things to tweak the predictor test

00:13:07,589 --> 00:13:10,949
it out get a regression test in place

00:13:09,420 --> 00:13:12,449
and launch it in a few minutes and then

00:13:10,949 --> 00:13:18,870
you've got better builds the next time

00:13:12,449 --> 00:13:20,010
but you don't bring high level that's

00:13:18,870 --> 00:13:22,290
kind of as you would expect

00:13:20,010 --> 00:13:26,490
no there's animation there it didn't run

00:13:22,290 --> 00:13:29,459
ok my dev desktop contacts the cloud

00:13:26,490 --> 00:13:30,720
reserves agents if I can take a piece of

00:13:29,459 --> 00:13:32,639
work that's interesting in this case

00:13:30,720 --> 00:13:34,170
we're just doing the CLD XE compiler

00:13:32,639 --> 00:13:36,510
right now which is Microsoft C++

00:13:34,170 --> 00:13:37,949
compiler with full support we actually

00:13:36,510 --> 00:13:42,899
will show you a demo in a little bit

00:13:37,949 --> 00:13:45,569
that has a different result but from my

00:13:42,899 --> 00:13:47,010
dev desktop it contacts in our case just

00:13:45,569 --> 00:13:48,990
over the mountains from us in the

00:13:47,010 --> 00:13:51,389
Eastern Washington we have a data center

00:13:48,990 --> 00:13:53,040
there and that's the lowest latency that

00:13:51,389 --> 00:13:54,540
we can get so just contacts that and

00:13:53,040 --> 00:13:58,680
does it down here it might be our Bay

00:13:54,540 --> 00:14:01,199
Area data center that we deploy to so we

00:13:58,680 --> 00:14:03,569
have one repo that we're working with

00:14:01,199 --> 00:14:05,459
one team in the onedrive team they have

00:14:03,569 --> 00:14:06,930
repo if you run Windows and you've got

00:14:05,459 --> 00:14:09,120
the onedrive icon down there as those

00:14:06,930 --> 00:14:10,470
guys they have a lot of C++ since we're

00:14:09,120 --> 00:14:12,240
doing the compiler first we figure we

00:14:10,470 --> 00:14:16,980
need somebody with plenty of C++ and

00:14:12,240 --> 00:14:21,750
they're about 60% of their code or the

00:14:16,980 --> 00:14:24,700
code base is C++ compilation so they by

00:14:21,750 --> 00:14:27,310
default have fairly beefy machines 612

00:14:24,700 --> 00:14:29,470
six-wheel course 64 gigs of memory etc

00:14:27,310 --> 00:14:31,690
get to that in a second about 40%

00:14:29,470 --> 00:14:33,460
savings just with CL remoting we'll be

00:14:31,690 --> 00:14:35,650
adding more commands much more remoting

00:14:33,460 --> 00:14:37,240
in the next couple months this is mostly

00:14:35,650 --> 00:14:38,650
hot off the presses although I did

00:14:37,240 --> 00:14:40,030
present similar numbers a couple of

00:14:38,650 --> 00:14:42,520
months ago it's a little bit better a

00:14:40,030 --> 00:14:46,180
little bit better than building it up

00:14:42,520 --> 00:14:48,520
London you know pixelation on laptop's

00:14:46,180 --> 00:14:51,610
yeah my laptop's so cool I can read

00:14:48,520 --> 00:14:53,860
email at the same time because those big

00:14:51,610 --> 00:14:57,130
you know the remoting stuff that's big

00:14:53,860 --> 00:15:00,070
typically and this team has a repo or a

00:14:57,130 --> 00:15:02,110
portion of their bill that runs 206 cpp

00:15:00,070 --> 00:15:04,030
files at once and one big multi-threaded

00:15:02,110 --> 00:15:05,470
compilation I'd rather that go to

00:15:04,030 --> 00:15:10,780
Eastern Washington and be on my laptop

00:15:05,470 --> 00:15:12,520
so some details this is like when you

00:15:10,780 --> 00:15:14,860
hear a radio commercial and they have to

00:15:12,520 --> 00:15:16,480
go into that fast speak at the end but

00:15:14,860 --> 00:15:19,150
basically it's kind of what you'd expect

00:15:16,480 --> 00:15:21,160
vcx Praja there's our 300 out of 500

00:15:19,150 --> 00:15:22,390
that these guys have in their repo it's

00:15:21,160 --> 00:15:24,250
the first repo we're doing though

00:15:22,390 --> 00:15:25,630
there's much more coming up internally

00:15:24,250 --> 00:15:29,820
and then we'll start to look at external

00:15:25,630 --> 00:15:29,820
stuff I'm gonna get the bugs out first

00:15:29,940 --> 00:15:35,050
details on Azure we're just doing the

00:15:32,890 --> 00:15:36,040
compiler just like koma koma had success

00:15:35,050 --> 00:15:39,130
of that we thought it was a good place

00:15:36,040 --> 00:15:40,750
to start and we boost the parallelism

00:15:39,130 --> 00:15:43,540
settings for amis build but we also

00:15:40,750 --> 00:15:45,040
leave single cpp compilations locally so

00:15:43,540 --> 00:15:46,270
we have a predictor that says oh that

00:15:45,040 --> 00:15:47,770
looks like enough work it should be

00:15:46,270 --> 00:15:49,420
removable because there is a cost

00:15:47,770 --> 00:15:52,870
remoting you have to upload files check

00:15:49,420 --> 00:15:55,060
the cows run the command to all this

00:15:52,870 --> 00:16:00,490
stuff so why waste the time for

00:15:55,060 --> 00:16:01,720
something small Oh video there's

00:16:00,490 --> 00:16:03,190
supposed to be up there sorry about that

00:16:01,720 --> 00:16:04,590
let's do the first video if you could

00:16:03,190 --> 00:16:08,680
please

00:16:04,590 --> 00:16:10,060
so another result this was from last

00:16:08,680 --> 00:16:12,760
week this is hot off the presses

00:16:10,060 --> 00:16:15,730
in fact I supplied videos rather late in

00:16:12,760 --> 00:16:18,010
the game here on the left is our agent

00:16:15,730 --> 00:16:20,560
on the right is basil this is a loopback

00:16:18,010 --> 00:16:23,680
case and the first thing that running is

00:16:20,560 --> 00:16:25,270
taking a while for some reason partly

00:16:23,680 --> 00:16:27,100
because it's sending a link command and

00:16:25,270 --> 00:16:28,930
we're reaching back across the local

00:16:27,100 --> 00:16:31,120
socket that still takes a while to get

00:16:28,930 --> 00:16:34,720
all the files to run link so we're again

00:16:31,120 --> 00:16:38,470
we didn't break but we just ran slower

00:16:34,720 --> 00:16:43,370
come on it is remote it's right there

00:16:38,470 --> 00:16:44,930
anyway so net result is we have basil as

00:16:43,370 --> 00:16:46,400
well we have that host at the edge of

00:16:44,930 --> 00:16:47,870
our agent so we have our own custom

00:16:46,400 --> 00:16:51,800
protocol we have the rest of remote

00:16:47,870 --> 00:16:54,800
execution running there and it works no

00:16:51,800 --> 00:16:58,910
we're looping around so okay just switch

00:16:54,800 --> 00:17:00,800
its lights so yes I had an intern you

00:16:58,910 --> 00:17:06,800
did a great job will he's not here right

00:17:00,800 --> 00:17:09,290
now maybe he's watching so we have our

00:17:06,800 --> 00:17:11,209
own custom with that two-way socket

00:17:09,290 --> 00:17:14,809
protocol that lets us reach back and get

00:17:11,209 --> 00:17:17,449
rid of problems with hermeticity we now

00:17:14,809 --> 00:17:21,470
have basil client order the full basil

00:17:17,449 --> 00:17:23,809
re protocol including not us next

00:17:21,470 --> 00:17:25,339
question you might go well go Moses was

00:17:23,809 --> 00:17:26,030
a success but maybe we want to run this

00:17:25,339 --> 00:17:29,750
in the cloud

00:17:26,030 --> 00:17:31,880
maybe nekoma so we might do that we're

00:17:29,750 --> 00:17:34,130
talking about it but there's one piece

00:17:31,880 --> 00:17:35,780
missing and the salutes to one of those

00:17:34,130 --> 00:17:37,429
early slides I had is that when we first

00:17:35,780 --> 00:17:39,020
ran basil we had to put in a bunch of

00:17:37,429 --> 00:17:41,210
hacks to say if you can't find the path

00:17:39,020 --> 00:17:43,400
just go locally in other words on the

00:17:41,210 --> 00:17:45,530
loopback machine the command we get is

00:17:43,400 --> 00:17:47,720
like C colon slash Program Files Visual

00:17:45,530 --> 00:17:50,030
Studio 2019 bla bla bla

00:17:47,720 --> 00:17:51,200
CL Exe problem is our agent didn't have

00:17:50,030 --> 00:17:53,750
that installed we had nothing under

00:17:51,200 --> 00:17:58,370
agents at all except for the OS and our

00:17:53,750 --> 00:17:59,780
software so one of the problems we ran

00:17:58,370 --> 00:18:00,880
into is I don't want to go install stuff

00:17:59,780 --> 00:18:03,980
I don't want to be chasing that

00:18:00,880 --> 00:18:06,290
horrifying non dream of having to keep

00:18:03,980 --> 00:18:07,640
up with every nuanced version of every

00:18:06,290 --> 00:18:09,140
visual studio and every tool and

00:18:07,640 --> 00:18:11,570
everything else I just don't to be

00:18:09,140 --> 00:18:13,730
bothered so we wired it

00:18:11,570 --> 00:18:18,950
we made an adapter and that's the next

00:18:13,730 --> 00:18:22,070
video if you could please so this is an

00:18:18,950 --> 00:18:25,130
homage to last year's demo which I found

00:18:22,070 --> 00:18:27,500
amazingly great 600 simultaneous basil

00:18:25,130 --> 00:18:29,300
and rot execution agents and we upped it

00:18:27,500 --> 00:18:32,540
a little bit I was aiming for 700 didn't

00:18:29,300 --> 00:18:33,290
quite get there there's still bugs but

00:18:32,540 --> 00:18:35,390
up at the top

00:18:33,290 --> 00:18:36,890
this is hurrying remotely hold let it

00:18:35,390 --> 00:18:38,540
run through I drastically sped it up

00:18:36,890 --> 00:18:41,179
because we could stand here for five

00:18:38,540 --> 00:18:42,380
minutes and let it run but the agents in

00:18:41,179 --> 00:18:44,420
this case were not looped back they were

00:18:42,380 --> 00:18:45,620
running in Azure in West in eastern

00:18:44,420 --> 00:18:47,600
Washington the same place where we do

00:18:45,620 --> 00:18:49,700
our remoting

00:18:47,600 --> 00:18:50,930
and then I have to shut it down quickly

00:18:49,700 --> 00:18:52,400
because the guys are like whoa you're

00:18:50,930 --> 00:18:58,520
spending all this money on vm's I'm like

00:18:52,400 --> 00:19:03,350
yeah demo so we're looping okay that's

00:18:58,520 --> 00:19:05,570
cool switching back to side so how are

00:19:03,350 --> 00:19:09,170
we doing it what are we doing internals

00:19:05,570 --> 00:19:10,700
let's see so this is how it works so

00:19:09,170 --> 00:19:11,750
let's say visual studio actually don't

00:19:10,700 --> 00:19:15,200
have that integration but it's coming

00:19:11,750 --> 00:19:16,760
real soon we're talking - it's gonna run

00:19:15,200 --> 00:19:20,900
amis build we're gonna wrap it with an

00:19:16,760 --> 00:19:22,760
ad build sandbox and we're gonna let

00:19:20,900 --> 00:19:24,050
Emma spill do whatever it wants so again

00:19:22,760 --> 00:19:25,280
I don't want to second-guess Emma

00:19:24,050 --> 00:19:25,610
spilled I've spent eight years doing

00:19:25,280 --> 00:19:28,700
that

00:19:25,610 --> 00:19:30,320
it's okay but sometimes like in this

00:19:28,700 --> 00:19:31,910
build has its own stuff just like see

00:19:30,320 --> 00:19:32,840
maker it says oh these these files are

00:19:31,910 --> 00:19:34,190
up to date we're not gonna run this

00:19:32,840 --> 00:19:36,020
command we're gonna run this half of the

00:19:34,190 --> 00:19:38,330
build graph I'm gonna let it do whatever

00:19:36,020 --> 00:19:40,340
it wants to do when it goes to run a

00:19:38,330 --> 00:19:42,230
compiler I'd say oh that's interesting

00:19:40,340 --> 00:19:45,860
and I say yes I want to do that so it

00:19:42,230 --> 00:19:47,360
replace it and a spill still has a crate

00:19:45,860 --> 00:19:48,440
process call pending we stick a

00:19:47,360 --> 00:19:50,060
different process in there with stick

00:19:48,440 --> 00:19:52,430
cars in there and this guy then loops

00:19:50,060 --> 00:19:55,070
back up to the enabled execution

00:19:52,430 --> 00:19:58,900
environment we register an agent out in

00:19:55,070 --> 00:20:02,170
Azure and we run the compiler out there

00:19:58,900 --> 00:20:04,730
all the inputs are obviously pre-loaded

00:20:02,170 --> 00:20:07,040
there's a set of steps with that which

00:20:04,730 --> 00:20:08,780
is fine upload stuff to the caz we give

00:20:07,040 --> 00:20:11,330
a filesystem layout to the virtual file

00:20:08,780 --> 00:20:13,070
system manager up there and say I've got

00:20:11,330 --> 00:20:15,800
all the drive like I could have my repo

00:20:13,070 --> 00:20:17,720
on X my xDrive I could have the tools on

00:20:15,800 --> 00:20:19,760
C or maybe I'd like to put Visual Studio

00:20:17,720 --> 00:20:20,240
on D for some reason no problem we've

00:20:19,760 --> 00:20:22,940
got it covered

00:20:20,240 --> 00:20:24,950
we virtualized all the drive letters we

00:20:22,940 --> 00:20:26,360
virtual has all the paths and everything

00:20:24,950 --> 00:20:27,380
running out there thinks it's running on

00:20:26,360 --> 00:20:31,150
your client except it's a different

00:20:27,380 --> 00:20:34,010
kernel and a different state typically

00:20:31,150 --> 00:20:35,240
so when that completes bring the outputs

00:20:34,010 --> 00:20:37,790
back and write them back to you're just

00:20:35,240 --> 00:20:39,110
just like you would expect your machine

00:20:37,790 --> 00:20:41,120
is still the master you still get back

00:20:39,110 --> 00:20:42,470
stuff with your pass in it if it happens

00:20:41,120 --> 00:20:44,900
to write an output path in there and

00:20:42,470 --> 00:20:47,000
then we let go the agent for the next

00:20:44,900 --> 00:20:49,400
build whoever that is even including

00:20:47,000 --> 00:20:52,640
myself we can do this thing with test

00:20:49,400 --> 00:20:53,930
tools we don't have prediction for this

00:20:52,640 --> 00:20:57,260
yet but we're working on that it's on

00:20:53,930 --> 00:20:59,240
our list not far away and then you do

00:20:57,260 --> 00:21:00,090
the same thing replace it get an agent

00:20:59,240 --> 00:21:02,070
yeah

00:21:00,090 --> 00:21:03,330
skipped but we don't want to remote

00:21:02,070 --> 00:21:05,010
robocopy what's the point you'll copy

00:21:03,330 --> 00:21:06,330
all the files up into the cache you'll

00:21:05,010 --> 00:21:07,590
copy them to another directory and then

00:21:06,330 --> 00:21:09,750
download them all back it's kind of lame

00:21:07,590 --> 00:21:12,170
so obviously we don't want to do that

00:21:09,750 --> 00:21:12,170
sort of thing

00:21:13,070 --> 00:21:19,410
okay the drivers were using so anybody

00:21:17,100 --> 00:21:22,320
who's familiar with gvfs should know

00:21:19,410 --> 00:21:25,200
about or have an idea of how it works if

00:21:22,320 --> 00:21:29,250
you do it's projected FS lib or project

00:21:25,200 --> 00:21:30,390
S project s so in Windows Land we don't

00:21:29,250 --> 00:21:34,350
have a fused driver

00:21:30,390 --> 00:21:36,960
we've tried I tried with small team a

00:21:34,350 --> 00:21:39,690
few years ago dodgy just because there's

00:21:36,960 --> 00:21:41,070
a lot of compatibility API is down in

00:21:39,690 --> 00:21:43,800
the file system that are hard to support

00:21:41,070 --> 00:21:46,380
with pure virtualization so the windows

00:21:43,800 --> 00:21:49,620
team came up with gvfs it's based on an

00:21:46,380 --> 00:21:52,650
older system called ghost you need a

00:21:49,620 --> 00:21:53,820
real drive and you mount a directory

00:21:52,650 --> 00:21:55,380
under the drive your creative director

00:21:53,820 --> 00:21:57,930
and call that a virtualization root and

00:21:55,380 --> 00:21:59,310
inside of there then you can place what

00:21:57,930 --> 00:22:01,470
ghost was you'd have to create all the

00:21:59,310 --> 00:22:03,360
directories lay down for every file you

00:22:01,470 --> 00:22:05,280
put a placeholder saying if you want to

00:22:03,360 --> 00:22:07,980
read me pause let me go get the file

00:22:05,280 --> 00:22:10,350
from somewhere else that's pretty easy

00:22:07,980 --> 00:22:11,940
and that's how gvfs works you

00:22:10,350 --> 00:22:15,120
virtualized the get filesystem locally

00:22:11,940 --> 00:22:16,710
etc but what gvfs was designed and what

00:22:15,120 --> 00:22:21,060
project s was a diet designed to do for

00:22:16,710 --> 00:22:22,740
gvfs is to avoid writing the whole disk

00:22:21,060 --> 00:22:24,020
with a bunch of placeholders because the

00:22:22,740 --> 00:22:26,610
windows codebase is four million files

00:22:24,020 --> 00:22:28,470
it takes a while even on an SSD it takes

00:22:26,610 --> 00:22:29,730
a while to write all that stuff out so

00:22:28,470 --> 00:22:32,130
what they came up with then as well why

00:22:29,730 --> 00:22:33,990
not ghost the or virtualized the

00:22:32,130 --> 00:22:36,060
directories themselves so you create the

00:22:33,990 --> 00:22:37,560
route you say virtual eyes there as just

00:22:36,060 --> 00:22:39,570
sitting empty it's when some of these

00:22:37,560 --> 00:22:41,280
CDs into it and does a directory tries

00:22:39,570 --> 00:22:43,710
to run something on a sub path that then

00:22:41,280 --> 00:22:47,330
starts running directories contents

00:22:43,710 --> 00:22:49,170
files etc just like it would have before

00:22:47,330 --> 00:22:52,560
the other thing that we're using is

00:22:49,170 --> 00:22:55,350
brand-new has shipped in 1903 which is

00:22:52,560 --> 00:22:57,930
now six months ago it's in 1909 as well

00:22:55,350 --> 00:22:59,880
but there's a new driver that lets us

00:22:57,930 --> 00:23:01,470
remap paths across Drive letters etc

00:22:59,880 --> 00:23:03,480
down on the kernel so we don't have to

00:23:01,470 --> 00:23:06,510
try to hook in from user mode and get

00:23:03,480 --> 00:23:09,150
things done put those two together build

00:23:06,510 --> 00:23:10,290
Excel sandboxing which is using detours

00:23:09,150 --> 00:23:11,760
and we've been using that for years and

00:23:10,290 --> 00:23:13,140
years and years so that's pretty well

00:23:11,760 --> 00:23:17,160
baked

00:23:13,140 --> 00:23:19,350
it gets us what we're doing a sure so

00:23:17,160 --> 00:23:21,810
we're a data center company now among

00:23:19,350 --> 00:23:25,620
other things office windows no no no

00:23:21,810 --> 00:23:27,270
data center it takes about a half hour

00:23:25,620 --> 00:23:28,470
to deploy a full cluster takes two

00:23:27,270 --> 00:23:30,930
minutes to upgrade it with a new version

00:23:28,470 --> 00:23:33,750
once it's out there it auto scales using

00:23:30,930 --> 00:23:36,480
VM scale sets we're using a kind of all

00:23:33,750 --> 00:23:38,970
the standard stuff security blob storage

00:23:36,480 --> 00:23:40,620
for some calves work Reedus for a cache

00:23:38,970 --> 00:23:43,200
which I'll talk about in a second

00:23:40,620 --> 00:23:44,610
cosmos TP for tracking machines and some

00:23:43,200 --> 00:23:46,290
stats there's also some telemetry

00:23:44,610 --> 00:23:49,260
they're not talking about that's

00:23:46,290 --> 00:23:53,820
internal but we're aiming to get that to

00:23:49,260 --> 00:23:54,930
be a public version of everything so how

00:23:53,820 --> 00:23:58,380
much of our er we're using for our

00:23:54,930 --> 00:24:00,900
protocol all of byte stream most of Cass

00:23:58,380 --> 00:24:02,550
like I said we're not doing directory

00:24:00,900 --> 00:24:04,500
Merkle trees yet it's been in my backlog

00:24:02,550 --> 00:24:05,880
for six months and I think it's gonna

00:24:04,500 --> 00:24:06,410
have a huge perf win so I keep putting

00:24:05,880 --> 00:24:08,490
it off

00:24:06,410 --> 00:24:12,570
capabilities we just don't do that we

00:24:08,490 --> 00:24:14,550
just have Const constant size of buffer

00:24:12,570 --> 00:24:16,590
equals two Meg's whatever we'll get that

00:24:14,550 --> 00:24:17,790
in there action cache we're doing it a

00:24:16,590 --> 00:24:18,440
different way and I'll cover that in a

00:24:17,790 --> 00:24:20,100
second

00:24:18,440 --> 00:24:23,190
execution we're doing entirely

00:24:20,100 --> 00:24:24,840
differently but I've been asked to try

00:24:23,190 --> 00:24:26,420
to get the 2-way protocol added back

00:24:24,840 --> 00:24:30,140
into already and get there eventually

00:24:26,420 --> 00:24:30,140
not quite ready for that yet

00:24:31,600 --> 00:24:37,789
so this is the two-way protocol one

00:24:35,929 --> 00:24:39,409
thing the student from the Basel re

00:24:37,789 --> 00:24:40,970
protocol is that I try to maintain

00:24:39,409 --> 00:24:42,500
fidelity is standard out in standard

00:24:40,970 --> 00:24:44,570
error if you've looked at Basel re you

00:24:42,500 --> 00:24:46,039
get standard out as a block of text and

00:24:44,570 --> 00:24:48,500
standard errors a block of text and

00:24:46,039 --> 00:24:50,900
started to tell from that how they're

00:24:48,500 --> 00:24:54,260
supposed to be interleaved but because

00:24:50,900 --> 00:24:56,299
I'm live-streaming on a live call from

00:24:54,260 --> 00:24:57,559
the client we're streaming individual

00:24:56,299 --> 00:24:58,940
standard out and standard error as they

00:24:57,559 --> 00:25:02,539
happen so your bill looks like it's

00:24:58,940 --> 00:25:03,890
progressing completely normally even

00:25:02,539 --> 00:25:05,960
though the standard out error messages

00:25:03,890 --> 00:25:09,169
are coming from you know far away and

00:25:05,960 --> 00:25:12,440
across the internet to you like I said

00:25:09,169 --> 00:25:14,299
the agent can reach back and I'll get

00:25:12,440 --> 00:25:16,039
into a little straight how trying to

00:25:14,299 --> 00:25:18,860
include file that we didn't predict

00:25:16,039 --> 00:25:20,270
works on just a second and then we can

00:25:18,860 --> 00:25:22,610
we're not doing this yet we don't

00:25:20,270 --> 00:25:25,400
actually have a good UX or any UX really

00:25:22,610 --> 00:25:27,350
we silently just speed you up but what

00:25:25,400 --> 00:25:29,059
we can do is say hey and that was great

00:25:27,350 --> 00:25:30,260
but our agent had to reach back for this

00:25:29,059 --> 00:25:32,840
piece of data can you just add some

00:25:30,260 --> 00:25:35,720
metadata for it if you know vcx prods in

00:25:32,840 --> 00:25:37,340
your bus he'll include added in boom we

00:25:35,720 --> 00:25:39,500
could even obviously propose that as a

00:25:37,340 --> 00:25:43,640
PR if we wanted to go that far not there

00:25:39,500 --> 00:25:45,289
yet now here's some details on what we

00:25:43,640 --> 00:25:47,179
were doing to get the tools to

00:25:45,289 --> 00:25:49,190
automatically upload so I don't want to

00:25:47,179 --> 00:25:53,299
chase I just want to let the room up

00:25:49,190 --> 00:25:56,659
file system virtualize everything so

00:25:53,299 --> 00:25:58,880
basel any builds adapter runs on the

00:25:56,659 --> 00:26:01,730
client side and so when you tell basel

00:25:58,880 --> 00:26:03,500
with aria to go and say do seminar

00:26:01,730 --> 00:26:05,750
things simultaneously we can take 700

00:26:03,500 --> 00:26:08,330
socket connections to that process that

00:26:05,750 --> 00:26:10,159
process then owns the NE build side of

00:26:08,330 --> 00:26:13,820
things get agents potentially a lot of

00:26:10,159 --> 00:26:15,220
agents like in the case we had before

00:26:13,820 --> 00:26:18,890
[Music]

00:26:15,220 --> 00:26:20,240
deals with the with the pool but it also

00:26:18,890 --> 00:26:21,470
takes the command that basil sent

00:26:20,240 --> 00:26:23,419
because again it was sending us C

00:26:21,470 --> 00:26:24,919
program files blah blah blah and does

00:26:23,419 --> 00:26:26,750
the standard ad build thing of saying

00:26:24,919 --> 00:26:28,520
let me hash all that and just send it up

00:26:26,750 --> 00:26:30,110
as entries and then let me virtualize it

00:26:28,520 --> 00:26:32,659
on the agent just as though it was local

00:26:30,110 --> 00:26:34,610
so it's ureic sees if you've just

00:26:32,659 --> 00:26:36,770
patched it that's fine it was just a

00:26:34,610 --> 00:26:39,409
different as entering it to me the only

00:26:36,770 --> 00:26:40,940
thing we can't do or one say can't but

00:26:39,409 --> 00:26:42,830
the only thing we're not planning to do

00:26:40,940 --> 00:26:44,690
is to remote the registry so if your

00:26:42,830 --> 00:26:46,549
tool needs to look for stuff too bad

00:26:44,690 --> 00:26:48,289
so there needs to be xcopy deployable

00:26:46,549 --> 00:26:49,789
most stuff is like that but you know

00:26:48,289 --> 00:26:52,519
some people like to go to the registry

00:26:49,789 --> 00:26:56,929
for some reason no tool installs

00:26:52,519 --> 00:26:58,429
happy-making so missing header

00:26:56,929 --> 00:27:00,739
prediction everybody's encountered this

00:26:58,429 --> 00:27:04,759
and I call it bar dot H in this case

00:27:00,739 --> 00:27:07,070
that's fine we also look for hints in

00:27:04,759 --> 00:27:09,409
the vcx project it to that so the if

00:27:07,070 --> 00:27:11,059
we're running CL under directory we look

00:27:09,409 --> 00:27:15,349
for a VC X proj there and parse that

00:27:11,059 --> 00:27:17,059
defined seal includes so as you might

00:27:15,349 --> 00:27:18,609
expect this time let's tooten vs code

00:27:17,059 --> 00:27:20,899
not like the s code it's really good

00:27:18,609 --> 00:27:23,539
runner any build sandbox and run amis

00:27:20,899 --> 00:27:25,399
build we're gonna wave a local disk it's

00:27:23,539 --> 00:27:27,830
already connected to an agent we start

00:27:25,399 --> 00:27:30,229
running up there so here's what we're

00:27:27,830 --> 00:27:31,879
gonna run cut the path short so we don't

00:27:30,229 --> 00:27:33,289
have to talk to it all day

00:27:31,879 --> 00:27:37,580
we're gonna run Fuu dot cpp you're

00:27:33,289 --> 00:27:39,320
running in ceaseless repo /foo but the

00:27:37,580 --> 00:27:40,700
binary is over in another directory so

00:27:39,320 --> 00:27:42,349
the loader when does loader is going to

00:27:40,700 --> 00:27:44,359
do its usual thing hey filesystem tell

00:27:42,349 --> 00:27:46,609
me what's at C colon backslash we got

00:27:44,359 --> 00:27:48,409
that predicted at least Samara current

00:27:46,609 --> 00:27:49,909
code as long as this predicted it's

00:27:48,409 --> 00:27:53,269
pretty quick the callback Khamsin is

00:27:49,909 --> 00:27:56,029
resolved very very quickly so as you can

00:27:53,269 --> 00:27:57,649
see we we have a route der and then the

00:27:56,029 --> 00:27:59,869
zero is just because we can have several

00:27:57,649 --> 00:28:03,349
commands running simultaneously cleanup

00:27:59,869 --> 00:28:05,210
overlaps the next execution so zero see

00:28:03,349 --> 00:28:07,070
just the drive letter we can have B

00:28:05,210 --> 00:28:11,359
through Z a turns out to be problematic

00:28:07,070 --> 00:28:13,369
for ancient reasons but then it says hey

00:28:11,359 --> 00:28:15,289
I want to do C slash bin slash CL so it

00:28:13,369 --> 00:28:18,080
goes and says hey what's in C and we say

00:28:15,289 --> 00:28:19,340
well there's been and repo eventually we

00:28:18,080 --> 00:28:21,619
present it with the full view at that

00:28:19,340 --> 00:28:23,210
moment but it says cool I want bin

00:28:21,619 --> 00:28:25,970
what's in bin and we say well there's

00:28:23,210 --> 00:28:27,590
CLC 1x X - C - XS you know that's

00:28:25,970 --> 00:28:29,929
usually like several Meg's of stuff

00:28:27,590 --> 00:28:31,369
there and it says cool I want you to run

00:28:29,929 --> 00:28:33,049
that loader loads it and starts running

00:28:31,369 --> 00:28:35,809
it from our point of view it's a

00:28:33,049 --> 00:28:38,119
callback and we feed a stream back - for

00:28:35,809 --> 00:28:39,769
Anna's case CLD XE and it's dll's each

00:28:38,119 --> 00:28:44,239
one gets a callback we stream back the

00:28:39,769 --> 00:28:47,299
contents out of the cast so then once

00:28:44,239 --> 00:28:48,979
it's up and running wants to load Fuu

00:28:47,299 --> 00:28:51,320
dot CPP well that's easy we already have

00:28:48,979 --> 00:28:53,720
C rendered so we can skip right past

00:28:51,320 --> 00:28:56,370
that but we go to a different subtype I

00:28:53,720 --> 00:28:58,320
must find we had that predicted

00:28:56,370 --> 00:28:59,940
and then it goes into the Fuu subtor and

00:28:58,320 --> 00:29:01,440
it finds food hace peepee and streams it

00:28:59,940 --> 00:29:02,760
back to the compiler it's released and

00:29:01,440 --> 00:29:04,620
it's done with IO and it starts

00:29:02,760 --> 00:29:08,010
processing food at CPP and generating

00:29:04,620 --> 00:29:11,190
outputs into the real file system let's

00:29:08,010 --> 00:29:13,110
do the header a problematic header so it

00:29:11,190 --> 00:29:15,330
goes back to C again I need C or

00:29:13,110 --> 00:29:17,850
actually the full path to be ste colon

00:29:15,330 --> 00:29:20,880
slash repo slash bar slash bar da da

00:29:17,850 --> 00:29:22,140
train we already have the C and repo

00:29:20,880 --> 00:29:24,539
directory is rendered from her previous

00:29:22,140 --> 00:29:25,980
commands we don't have bar and we don't

00:29:24,539 --> 00:29:27,240
have it in the predictions now we're

00:29:25,980 --> 00:29:29,070
kind of stuck what are we gonna do we

00:29:27,240 --> 00:29:29,820
could break or because I hate client

00:29:29,070 --> 00:29:32,580
tell me about that

00:29:29,820 --> 00:29:35,210
so client says I've got bar dot H in

00:29:32,580 --> 00:29:38,130
there I always say cool here he goes

00:29:35,210 --> 00:29:39,899
enjoy it says well I want to open bar

00:29:38,130 --> 00:29:42,360
dot H callback but now we're stuck we

00:29:39,899 --> 00:29:44,370
don't have borrowed H so we ask the

00:29:42,360 --> 00:29:46,320
client give me the hash of that it could

00:29:44,370 --> 00:29:48,270
be in the calves could be not typically

00:29:46,320 --> 00:29:50,700
for the sort of case the second person

00:29:48,270 --> 00:29:53,610
to run doesn't have to go get the file

00:29:50,700 --> 00:29:55,500
which is let's say we have to do that so

00:29:53,610 --> 00:30:01,409
live streaming over the live socket we

00:29:55,500 --> 00:30:03,870
need a file we just get it the calves so

00:30:01,409 --> 00:30:06,419
we have a lot of tech after eight years

00:30:03,870 --> 00:30:08,700
and no in the build area I don't know

00:30:06,419 --> 00:30:12,029
whether we have 30 40 sometimes 50

00:30:08,700 --> 00:30:13,470
people sometimes less build Excel which

00:30:12,029 --> 00:30:15,360
is open source since earlier this year

00:30:13,470 --> 00:30:17,760
has a ton of stuff in it that's

00:30:15,360 --> 00:30:19,980
interesting from Mac drivers and other

00:30:17,760 --> 00:30:21,659
things we have a data center capable

00:30:19,980 --> 00:30:23,279
peer-to-peer cache and it's being

00:30:21,659 --> 00:30:25,169
refactored for our case particularly

00:30:23,279 --> 00:30:26,340
right now which then opens up some other

00:30:25,169 --> 00:30:30,529
possibilities for other operating

00:30:26,340 --> 00:30:33,809
systems it's all in that course its uses

00:30:30,529 --> 00:30:35,850
standard services like Reedus and just

00:30:33,809 --> 00:30:38,190
works we can get it's already running on

00:30:35,850 --> 00:30:39,840
mac sorting on windows we could extend

00:30:38,190 --> 00:30:44,100
that to linux pretty easily once we get

00:30:39,840 --> 00:30:46,830
going on linux the calves itself uses g

00:30:44,100 --> 00:30:49,049
RPC i switch to that six months ago from

00:30:46,830 --> 00:30:51,450
an internal format called bond and it's

00:30:49,049 --> 00:30:54,000
all the same idea uses Reedus like i

00:30:51,450 --> 00:30:56,039
said and then LS isn't is what its name

00:30:54,000 --> 00:30:57,330
is for I think it's using rocks DB it's

00:30:56,039 --> 00:30:59,940
they've gone through four or five DB's

00:30:57,330 --> 00:31:01,140
because they don't scale very well so

00:30:59,940 --> 00:31:04,649
they keep changing stuff happens just

00:31:01,140 --> 00:31:06,630
fine the client has it has we only put

00:31:04,649 --> 00:31:08,399
stuff in there that's deterministic so

00:31:06,630 --> 00:31:09,360
what's the point of starting a pdb file

00:31:08,399 --> 00:31:12,480
when the next build

00:31:09,360 --> 00:31:13,860
just going to rebuild the PTB again when

00:31:12,480 --> 00:31:15,330
we get a local cache going that'll

00:31:13,860 --> 00:31:17,309
change a little bit but as it stands now

00:31:15,330 --> 00:31:18,990
and we're downloading stuff if the flags

00:31:17,309 --> 00:31:20,490
are turned on for determinism we put

00:31:18,990 --> 00:31:24,540
stuff in the Clank has otherwise we just

00:31:20,490 --> 00:31:26,370
don't just put it on the disk and the

00:31:24,540 --> 00:31:29,010
other thing is so the Kaz as is tuned

00:31:26,370 --> 00:31:31,470
for cloud build build Excel on cloud

00:31:29,010 --> 00:31:33,630
build quick build as well as we get

00:31:31,470 --> 00:31:35,730
moving through that it's tuned for never

00:31:33,630 --> 00:31:39,690
fail or fail as little as possible so it

00:31:35,730 --> 00:31:41,460
has this paranoia about I need to get

00:31:39,690 --> 00:31:43,290
every copy of everything I need onto the

00:31:41,460 --> 00:31:44,880
drive before I let you continue

00:31:43,290 --> 00:31:46,350
we had them retune that for us because

00:31:44,880 --> 00:31:47,640
really because we can reach back to the

00:31:46,350 --> 00:31:49,950
client we have all sorts of options we

00:31:47,640 --> 00:31:52,710
can be determinate or optimistic we can

00:31:49,950 --> 00:31:54,450
say yeah tell me what you believe you

00:31:52,710 --> 00:31:55,679
have somewhere and start the downloads

00:31:54,450 --> 00:31:57,210
but I'm going to go back to the client

00:31:55,679 --> 00:31:58,740
and let it call back again with the

00:31:57,210 --> 00:32:01,500
command to run so we get more overlap

00:31:58,740 --> 00:32:03,360
and it works really well we have maybe

00:32:01,500 --> 00:32:10,020
once a day we miss one of those files so

00:32:03,360 --> 00:32:12,570
it's not bad so the road map this is

00:32:10,020 --> 00:32:14,280
tactical this is six months we're still

00:32:12,570 --> 00:32:16,770
discussing what to even do with this

00:32:14,280 --> 00:32:18,270
there's a bunch of stuff we can do and

00:32:16,770 --> 00:32:20,309
there's an entire dimension on even

00:32:18,270 --> 00:32:21,720
speaking to get to here so soon this is

00:32:20,309 --> 00:32:25,760
Windows so I'm not talking about Mac or

00:32:21,720 --> 00:32:25,760
Linux at this point but it's interesting

00:32:26,150 --> 00:32:29,970
we're working on a two phase lookup

00:32:28,320 --> 00:32:31,350
build cache and the two phase protocol

00:32:29,970 --> 00:32:33,780
will bring back to re at some point

00:32:31,350 --> 00:32:36,660
two-phase has had some other talks done

00:32:33,780 --> 00:32:38,070
on it essentially because if you don't

00:32:36,660 --> 00:32:39,900
have hermiticity you have to deal with

00:32:38,070 --> 00:32:41,669
that quick build does it one way which

00:32:39,900 --> 00:32:42,809
is to break you saying you touch this

00:32:41,669 --> 00:32:45,450
you're not allowed to do that you have

00:32:42,809 --> 00:32:47,730
to add some annotations in build Excel

00:32:45,450 --> 00:32:49,410
they have two phase lookup which is make

00:32:47,730 --> 00:32:52,140
your best guess tell me what your best

00:32:49,410 --> 00:32:53,520
guess was I'll hash your best guess run

00:32:52,140 --> 00:32:54,809
out with that hash to the data center

00:32:53,520 --> 00:32:56,730
and say what you got and it'll say oh

00:32:54,809 --> 00:32:58,280
I've got three things around previously

00:32:56,730 --> 00:33:00,419
or three thousand which causes problems

00:32:58,280 --> 00:33:02,100
but from your hash I got three things

00:33:00,419 --> 00:33:03,600
but the file system was laid out with

00:33:02,100 --> 00:33:05,429
these hashes in these positions so if

00:33:03,600 --> 00:33:06,840
your file system looks like that do the

00:33:05,429 --> 00:33:09,900
next step and go get the outputs from

00:33:06,840 --> 00:33:11,370
that build or from the build target so

00:33:09,900 --> 00:33:13,710
we're working on adding that in and then

00:33:11,370 --> 00:33:16,740
we'll bring it back to basil or to the

00:33:13,710 --> 00:33:18,510
remote execution protocol client-side

00:33:16,740 --> 00:33:19,740
virtualization that's something we have

00:33:18,510 --> 00:33:21,990
tried and failed and tried and failed

00:33:19,740 --> 00:33:24,179
with project s is pretty cool and

00:33:21,990 --> 00:33:25,830
I'm porting it to Nick horror it's the

00:33:24,179 --> 00:33:29,340
PR that's stuck right now because it

00:33:25,830 --> 00:33:31,710
needs bleeding edge tech with project s

00:33:29,340 --> 00:33:33,779
in the client though we can try some new

00:33:31,710 --> 00:33:35,220
things some of it would be during the

00:33:33,779 --> 00:33:36,659
bill don't download stuff you're not

00:33:35,220 --> 00:33:38,490
about to use on the client which

00:33:36,659 --> 00:33:40,890
typically the pdbs are not used they

00:33:38,490 --> 00:33:42,510
just need to be downloaded and we can go

00:33:40,890 --> 00:33:44,279
a bit further and say kick off an

00:33:42,510 --> 00:33:46,830
asynchronous process to answer the

00:33:44,279 --> 00:33:49,380
callbacks after we're done exiting in

00:33:46,830 --> 00:33:51,210
any build XE and that the thing answer

00:33:49,380 --> 00:33:52,830
placeholders we could place it down

00:33:51,210 --> 00:33:54,210
placeholders for every output or the

00:33:52,830 --> 00:33:55,860
output so we're pretty sure it will

00:33:54,210 --> 00:33:58,230
never be used we can use stats for that

00:33:55,860 --> 00:33:59,279
and get a loop going its experiments

00:33:58,230 --> 00:34:03,029
though don't know how it's going to turn

00:33:59,279 --> 00:34:04,830
out more command remoting I lived this

00:34:03,029 --> 00:34:07,260
the team we're working with now uses a

00:34:04,830 --> 00:34:09,060
lot of classic microsoft c++ stuff so

00:34:07,260 --> 00:34:10,679
they're doing RPC with middle and that

00:34:09,060 --> 00:34:13,200
turns out to be a fairly beefy process

00:34:10,679 --> 00:34:14,970
we'll get that off the boxes link link

00:34:13,200 --> 00:34:16,320
is mostly copying from here to here with

00:34:14,970 --> 00:34:19,080
a little bit of computation unless

00:34:16,320 --> 00:34:21,030
you're doing LT cg so l TCG link will be

00:34:19,080 --> 00:34:23,129
our main concern that we might turn off

00:34:21,030 --> 00:34:28,080
just plain old debug link is mostly just

00:34:23,129 --> 00:34:29,460
IO Lib same thing clang I'm talking with

00:34:28,080 --> 00:34:32,159
the team that's using clang and so we'll

00:34:29,460 --> 00:34:33,359
have to add support for that c-sharp is

00:34:32,159 --> 00:34:35,280
interesting when the shared compiler

00:34:33,359 --> 00:34:37,320
causes problems it's very performant but

00:34:35,280 --> 00:34:39,419
if your machine is overloaded how do i

00:34:37,320 --> 00:34:40,859
fork some of it off to the cloud while

00:34:39,419 --> 00:34:42,240
still letting shared compilation do that

00:34:40,859 --> 00:34:44,460
really fast thing that it does so we're

00:34:42,240 --> 00:34:46,830
working on that to unit tests let's the

00:34:44,460 --> 00:34:48,810
other thing is people and build excited

00:34:46,830 --> 00:34:50,609
like hobbies so great if these beefy

00:34:48,810 --> 00:34:53,159
unit tests suisse didn't run on my port

00:34:50,609 --> 00:34:55,409
dev box and like let's fix that so we'll

00:34:53,159 --> 00:34:56,730
do that to visual studio integration I

00:34:55,409 --> 00:34:57,890
just don't have it right now it's coming

00:34:56,730 --> 00:35:00,390
real soon

00:34:57,890 --> 00:35:02,880
internal customers I have some game

00:35:00,390 --> 00:35:05,970
repos I've got the visual studio team

00:35:02,880 --> 00:35:07,650
maybe we'll see how that goes and we're

00:35:05,970 --> 00:35:09,750
gonna go open source so what I'm talking

00:35:07,650 --> 00:35:12,180
about here isn't theoretical and not

00:35:09,750 --> 00:35:13,020
available well it is right now give me a

00:35:12,180 --> 00:35:14,730
few months they'll we'll see what

00:35:13,020 --> 00:35:16,560
happens I've got a lot of compliance and

00:35:14,730 --> 00:35:17,849
security stuff to get through and some

00:35:16,560 --> 00:35:19,170
internal isms that would be better not

00:35:17,849 --> 00:35:23,010
to show you we'll get rid of that and

00:35:19,170 --> 00:35:25,170
ship it like I said we'll be bringing

00:35:23,010 --> 00:35:28,320
back stuff to re so we got two-phase

00:35:25,170 --> 00:35:30,510
cache look up we've got the 2-way

00:35:28,320 --> 00:35:32,700
protocol extension they can be added as

00:35:30,510 --> 00:35:34,589
optionals and we'll see how that goes

00:35:32,700 --> 00:35:35,560
I do have to make my stuff look more

00:35:34,589 --> 00:35:38,200
like actual or

00:35:35,560 --> 00:35:40,180
instead of let's hack it and get it

00:35:38,200 --> 00:35:44,560
working so there's some work to do yet

00:35:40,180 --> 00:35:46,750
there yet more build engines so another

00:35:44,560 --> 00:35:48,790
team that we have is moving away from ms

00:35:46,750 --> 00:35:51,940
buildin and to see make because they

00:35:48,790 --> 00:35:53,800
need they're moving to actually they

00:35:51,940 --> 00:35:57,220
need all three OSS so they like see make

00:35:53,800 --> 00:35:59,440
they're not moving to Basel Japan maybe

00:35:57,220 --> 00:36:00,640
we'll talk them about that but given

00:35:59,440 --> 00:36:02,170
they're halfway through their conversion

00:36:00,640 --> 00:36:03,400
by the time I get to them next week

00:36:02,170 --> 00:36:04,690
they'll probably be all that we ever to

00:36:03,400 --> 00:36:07,060
see make and I'll add support for

00:36:04,690 --> 00:36:11,110
wrapping thats like a five-minute single

00:36:07,060 --> 00:36:12,280
PR to get that done and then we can go

00:36:11,110 --> 00:36:13,930
back to build Excel we can go back to

00:36:12,280 --> 00:36:16,810
quick build and get our existing

00:36:13,930 --> 00:36:19,590
customers who have huge repos like 3,000

00:36:16,810 --> 00:36:23,110
targets 10,000 targets these guys

00:36:19,590 --> 00:36:25,180
targets being proj files we can get

00:36:23,110 --> 00:36:27,040
those guys running with roman execution

00:36:25,180 --> 00:36:28,510
and again if you're getting dev cash

00:36:27,040 --> 00:36:29,920
from an old data center build that's

00:36:28,510 --> 00:36:31,090
great if you're changing a leaf that's

00:36:29,920 --> 00:36:33,190
great but if you're the guy doing the

00:36:31,090 --> 00:36:36,490
refactoring why should your lives be so

00:36:33,190 --> 00:36:38,340
bad let's make it better and coma that's

00:36:36,490 --> 00:36:40,270
an interesting conversation we're having

00:36:38,340 --> 00:36:41,860
and I don't know if we'll have to write

00:36:40,270 --> 00:36:46,630
an adapter so we ought to upload the

00:36:41,860 --> 00:36:49,150
tools so links these will be in the

00:36:46,630 --> 00:36:50,590
slides as they get sent out any build is

00:36:49,150 --> 00:36:52,900
out there as a repo but it doesn't have

00:36:50,590 --> 00:36:54,220
code it's mostly my marketing materials

00:36:52,900 --> 00:36:57,640
that talk about what you would have if

00:36:54,220 --> 00:37:00,430
you wait for another and commits I don't

00:36:57,640 --> 00:37:02,490
know what would be build Excel has been

00:37:00,430 --> 00:37:04,840
an open source since early this year

00:37:02,490 --> 00:37:06,010
we've had previous talks about some of

00:37:04,840 --> 00:37:10,030
the tech and there including Mac

00:37:06,010 --> 00:37:11,050
sandboxing Windows 10 boxing etc for

00:37:10,030 --> 00:37:12,400
those who don't know about cloud build

00:37:11,050 --> 00:37:13,810
we have a white paper that was a few

00:37:12,400 --> 00:37:15,820
years ago all the numbers are very small

00:37:13,810 --> 00:37:19,510
all the numbers are now much much much

00:37:15,820 --> 00:37:21,220
bigger but it was mostly the same

00:37:19,510 --> 00:37:22,600
systems it was then except with some new

00:37:21,220 --> 00:37:23,590
caching a few other things we should

00:37:22,600 --> 00:37:27,250
probably update that white paper

00:37:23,590 --> 00:37:29,740
eventually msbuild VFS forgetten is also

00:37:27,250 --> 00:37:32,320
as the rename of gvfs there's a repo for

00:37:29,740 --> 00:37:33,520
that but not a caching server I was

00:37:32,320 --> 00:37:36,040
going and looking for that the other day

00:37:33,520 --> 00:37:37,360
and they don't have one up there and if

00:37:36,040 --> 00:37:39,190
you want to know about the depths of

00:37:37,360 --> 00:37:41,860
Praja fests and project that's managed

00:37:39,190 --> 00:37:44,380
to API wraps a unmanaged DLL that's in

00:37:41,860 --> 00:37:48,760
Windows starting with our s1 three years

00:37:44,380 --> 00:37:49,510
ago 1607 I think that was so they now

00:37:48,760 --> 00:37:51,700
have a

00:37:49,510 --> 00:37:53,260
public API that's what's used by gvfs

00:37:51,700 --> 00:37:56,920
and if you're in c-sharp they got an

00:37:53,260 --> 00:37:58,570
Imagine c++ wrapper that we'll buy today

00:37:56,920 --> 00:38:03,930
tomorrow being moved over to net core

00:37:58,570 --> 00:38:06,780
3.1 or dual target net 417 that core 3-1

00:38:03,930 --> 00:38:14,349
and that's it

00:38:06,780 --> 00:38:17,800
any questions no sorry please thanks

00:38:14,349 --> 00:38:19,599
Eric I appreciate you talk as you guys

00:38:17,800 --> 00:38:22,329
know already the questions yeah fine

00:38:19,599 --> 00:38:24,040
enough thank you so much hi there so my

00:38:22,329 --> 00:38:26,619
name is Ed Kota I'm the author of build

00:38:24,040 --> 00:38:29,760
porn I actually have two questions so

00:38:26,619 --> 00:38:33,730
with regards to the two-way protocol and

00:38:29,760 --> 00:38:35,710
what happens if like there's a missing

00:38:33,730 --> 00:38:38,050
dependency in the file that hasn't been

00:38:35,710 --> 00:38:40,000
built yet would that mean that like the

00:38:38,050 --> 00:38:42,119
build action sort of gets stalled or

00:38:40,000 --> 00:38:44,470
that's great question we are gonna break

00:38:42,119 --> 00:38:46,540
this is not a we're not doing

00:38:44,470 --> 00:38:47,770
speculation we're not holding it we're

00:38:46,540 --> 00:38:49,510
assuming msbuild knows what it's doing

00:38:47,770 --> 00:38:50,680
so if you have a bad build graphing your

00:38:49,510 --> 00:38:52,240
client you've got a bad bill graph in

00:38:50,680 --> 00:38:53,440
the server it's gonna breaks it'll have

00:38:52,240 --> 00:38:55,030
a file not found just like it would have

00:38:53,440 --> 00:38:56,290
before yeah I mean it also makes sense

00:38:55,030 --> 00:38:57,730
right otherwise you'd have to like pause

00:38:56,290 --> 00:39:00,280
to build action and then you get like oh

00:38:57,730 --> 00:39:02,380
yeah utilization rate on you I wrote

00:39:00,280 --> 00:39:04,150
execution has a speculation protocol

00:39:02,380 --> 00:39:06,280
where you upload the graph and it can

00:39:04,150 --> 00:39:07,660
run ahead and as outputs become

00:39:06,280 --> 00:39:09,849
available it can quickly start getting

00:39:07,660 --> 00:39:10,930
the next things going on a frontier we

00:39:09,849 --> 00:39:13,599
don't have that for this and I don't

00:39:10,930 --> 00:39:16,180
really I don't know if it's possible as

00:39:13,599 --> 00:39:17,530
we develop or implement or the re

00:39:16,180 --> 00:39:19,510
protocol and if that becomes the

00:39:17,530 --> 00:39:20,800
standard we'll take a look but a lot of

00:39:19,510 --> 00:39:22,420
what I'm doing here is just reacting to

00:39:20,800 --> 00:39:23,650
what msbuild is doing I let it do all of

00:39:22,420 --> 00:39:25,900
its file system checks I don't want to

00:39:23,650 --> 00:39:28,060
second-guess it because I spend a lot of

00:39:25,900 --> 00:39:29,680
time doing it in the past let it run and

00:39:28,060 --> 00:39:31,750
if you're fully up-to-date we won't even

00:39:29,680 --> 00:39:33,880
be called because even if it runs CL if

00:39:31,750 --> 00:39:35,410
it's too small like a single CPP we'll

00:39:33,880 --> 00:39:37,390
just say go we don't we don't want you

00:39:35,410 --> 00:39:40,300
as soon as it built something bigger to

00:39:37,390 --> 00:39:42,069
take a look okay so the second question

00:39:40,300 --> 00:39:43,630
I had was actually related to a pull

00:39:42,069 --> 00:39:46,510
request that you folks into the remote

00:39:43,630 --> 00:39:48,460
API so repository namely you folks edit

00:39:46,510 --> 00:39:51,970
a new hashing algorithm yes so zero

00:39:48,460 --> 00:39:53,560
years oh yeah I was wondering about so

00:39:51,970 --> 00:39:55,150
like for the audience

00:39:53,560 --> 00:39:57,160
Sophie Zoe's basically sort of like a

00:39:55,150 --> 00:39:59,200
recursively defined hashing algorithm

00:39:57,160 --> 00:40:01,500
where you first not recursos paging hash

00:39:59,200 --> 00:40:04,380
yeah so every two Meg's you start up to

00:40:01,500 --> 00:40:07,140
thread whatever and let it so for large

00:40:04,380 --> 00:40:09,210
files you get run across two Meg's of

00:40:07,140 --> 00:40:10,920
input simultaneously across the file and

00:40:09,210 --> 00:40:12,840
then you hash the hashes and you have a

00:40:10,920 --> 00:40:14,880
seed that's funny just because of who

00:40:12,840 --> 00:40:16,380
wrote it yeah so one of the things I was

00:40:14,880 --> 00:40:18,420
wondering about that D folks who see

00:40:16,380 --> 00:40:20,430
also use that for like doing in file

00:40:18,420 --> 00:40:23,130
deduplication so that you actually store

00:40:20,430 --> 00:40:25,860
it it Wow what every question yes so

00:40:23,130 --> 00:40:28,020
this I don't even know how public this

00:40:25,860 --> 00:40:29,760
is that there is a system for that a lot

00:40:28,020 --> 00:40:32,040
of stuff the prefix is different but the

00:40:29,760 --> 00:40:33,540
back end is the same like you know for

00:40:32,040 --> 00:40:34,830
the good case the goods on the

00:40:33,540 --> 00:40:36,750
timestamps are in the header and the

00:40:34,830 --> 00:40:38,490
first few K or even first Meg whatever

00:40:36,750 --> 00:40:40,980
and then you quickly generate the same

00:40:38,490 --> 00:40:42,720
code layout so yeah why should you send

00:40:40,980 --> 00:40:45,180
back and forth the latter half of a file

00:40:42,720 --> 00:40:46,980
like that Windows has a system for that

00:40:45,180 --> 00:40:49,320
and turn remember the name of it in the

00:40:46,980 --> 00:40:50,850
future name but it's Delta download or

00:40:49,320 --> 00:40:53,250
something like that it exists within

00:40:50,850 --> 00:40:54,990
Windows and then we have a internal

00:40:53,250 --> 00:40:58,650
protocol that doesn't much the same

00:40:54,990 --> 00:41:00,480
thing public even good thing to talk

00:40:58,650 --> 00:41:05,330
about next year let's say see how that

00:41:00,480 --> 00:41:08,250
goes Thanks let me do a real quick hi

00:41:05,330 --> 00:41:11,040
hey Chappell we're for ultimate software

00:41:08,250 --> 00:41:12,990
so we have a really large dotnet app but

00:41:11,040 --> 00:41:14,490
it's not about that core we have builds

00:41:12,990 --> 00:41:18,960
that take like six hours plus which is

00:41:14,490 --> 00:41:20,100
kind of yeah yeah so one of the things

00:41:18,960 --> 00:41:22,050
is we're looking at moving to basil just

00:41:20,100 --> 00:41:24,740
to kind of speed that up a little bit

00:41:22,050 --> 00:41:27,180
but the dotnet rules are kind of

00:41:24,740 --> 00:41:29,100
neglected a little bit right now are we

00:41:27,180 --> 00:41:30,930
I have to ask that because I am I'm not

00:41:29,100 --> 00:41:32,640
that's me what it is are you gonna get

00:41:30,930 --> 00:41:33,810
for a large company and probably no left

00:41:32,640 --> 00:41:35,280
hand right hand the left hand could be

00:41:33,810 --> 00:41:36,060
doing all sorts of stuff right so that

00:41:35,280 --> 00:41:37,560
that would be something that I think

00:41:36,060 --> 00:41:38,910
it'd be interesting to see if some of

00:41:37,560 --> 00:41:40,350
the stuff that you're doing on this as

00:41:38,910 --> 00:41:42,000
well as the dotnet rules will kind of

00:41:40,350 --> 00:41:44,640
get some love like typescript does I'll

00:41:42,000 --> 00:41:46,470
take that back as they please cuz I need

00:41:44,640 --> 00:41:48,270
to answer the question myself I'm not in

00:41:46,470 --> 00:41:50,100
the basil like I don't use basil client

00:41:48,270 --> 00:41:52,140
we have all our own build engines but I

00:41:50,100 --> 00:41:53,490
wanted to get re its opens up

00:41:52,140 --> 00:41:55,650
interesting possibilities and on that

00:41:53,490 --> 00:41:57,540
case I'll find the people who know or

00:41:55,650 --> 00:41:59,130
I'll find nobody which will be an

00:41:57,540 --> 00:42:01,010
interesting statement - okay Thank You

00:41:59,130 --> 00:42:04,110
Felix

00:42:01,010 --> 00:42:06,960
David international instruments you you

00:42:04,110 --> 00:42:09,060
say you hook any build proc basically or

00:42:06,960 --> 00:42:11,790
all the sub processes get it you still

00:42:09,060 --> 00:42:12,690
only remote individual specific commands

00:42:11,790 --> 00:42:14,070
correct yes

00:42:12,690 --> 00:42:14,940
I do have a mode we can invert it and

00:42:14,070 --> 00:42:16,470
say remote everything

00:42:14,940 --> 00:42:18,990
but that tends to break quickly because

00:42:16,470 --> 00:42:21,299
of registry typically and that goes to

00:42:18,990 --> 00:42:22,829
my next point is incredible xge is kind

00:42:21,299 --> 00:42:26,010
of the same thing except that I notice

00:42:22,829 --> 00:42:30,329
that the registry yeah they've had more

00:42:26,010 --> 00:42:32,309
time to write code I can write did you

00:42:30,329 --> 00:42:34,530
not use that because of payment or

00:42:32,309 --> 00:42:37,109
because of it's a great question really

00:42:34,530 --> 00:42:39,930
we've got all the tech and when we saw

00:42:37,109 --> 00:42:41,430
the we're here or in New York for Basel

00:42:39,930 --> 00:42:42,990
Khan last year and the six hundred

00:42:41,430 --> 00:42:44,460
simultaneous thing demo is like yeah but

00:42:42,990 --> 00:42:46,170
we can do that we've got all the tech

00:42:44,460 --> 00:42:47,970
really I'm assembling pieces here and

00:42:46,170 --> 00:42:50,160
spending a lot of time in the middle and

00:42:47,970 --> 00:42:51,240
and prediction and stuff like that but

00:42:50,160 --> 00:42:52,740
you're right it looks very similar to

00:42:51,240 --> 00:42:55,740
something else doesn't it the other

00:42:52,740 --> 00:42:57,539
reason that I think you you could write

00:42:55,740 --> 00:43:00,930
your own areas because of the cast which

00:42:57,539 --> 00:43:02,190
I don't think incredible XD as I had not

00:43:00,930 --> 00:43:03,930
from there Doc's thought that they did

00:43:02,190 --> 00:43:06,450
but I write i've never installed it over

00:43:03,930 --> 00:43:08,609
electric cloud has that sort of casts

00:43:06,450 --> 00:43:11,579
and and sharing among the build farm

00:43:08,609 --> 00:43:13,200
I've got three devs five does I mean how

00:43:11,579 --> 00:43:14,490
big is the cash name five I got five

00:43:13,200 --> 00:43:16,680
people who spent all their time worrying

00:43:14,490 --> 00:43:18,720
about 40,000 plus machines thirty five

00:43:16,680 --> 00:43:21,180
thousand machines and full scale across

00:43:18,720 --> 00:43:23,069
all those and now my case to so write an

00:43:21,180 --> 00:43:24,089
electric how does also have some sort of

00:43:23,069 --> 00:43:26,819
the speculation but not really

00:43:24,089 --> 00:43:29,160
speculation it's rather like they detect

00:43:26,819 --> 00:43:31,980
failures and then undo and redo oh I'm

00:43:29,160 --> 00:43:33,690
here to reorder things that's why I

00:43:31,980 --> 00:43:34,829
wanted to let the build engine have its

00:43:33,690 --> 00:43:36,720
own graph I don't want to second-guess

00:43:34,829 --> 00:43:38,220
the graph I'm really kind of tired of

00:43:36,720 --> 00:43:39,869
that so I'll let it run and do what it

00:43:38,220 --> 00:43:41,819
wants to I'll just say that looks juicy

00:43:39,869 --> 00:43:44,609
let's promote that final thing we could

00:43:41,819 --> 00:43:47,569
change it final thing when when do you

00:43:44,609 --> 00:43:47,569
expect Linux and Mac to come

00:43:47,940 --> 00:43:53,880
dot dot dot no idea it's a conversation

00:43:51,569 --> 00:43:56,130
not even started yet so but it's an

00:43:53,880 --> 00:43:57,720
interesting idea is I kind of cool

00:43:56,130 --> 00:43:59,940
we have sandbox and tech for Mac for

00:43:57,720 --> 00:44:03,890
build Excel Linux I here is not that

00:43:59,940 --> 00:44:06,599
hard not a Linux guy old windows guy

00:44:03,890 --> 00:44:09,049
will see you let's talk next Faizal Khan

00:44:06,599 --> 00:44:09,049
see how that goes

00:44:09,200 --> 00:44:14,430
alright my name is Adrian Oni from

00:44:11,369 --> 00:44:16,109
VMware I know you noted that you have a

00:44:14,430 --> 00:44:18,779
system where you can do partial matches

00:44:16,109 --> 00:44:19,950
where basically you have some degree of

00:44:18,779 --> 00:44:21,690
prediction of what you think you may

00:44:19,950 --> 00:44:24,180
need on the other side and then later

00:44:21,690 --> 00:44:26,099
you may then you may end up saying I'm

00:44:24,180 --> 00:44:28,030
gonna return you multiple records and

00:44:26,099 --> 00:44:29,290
those multiple records will tell you

00:44:28,030 --> 00:44:30,730
help you figure out which of the things

00:44:29,290 --> 00:44:32,290
on your file system you you're talking

00:44:30,730 --> 00:44:34,360
about two-phase cash yeah the 10 phase

00:44:32,290 --> 00:44:36,430
cash gotcha how does this interact with

00:44:34,360 --> 00:44:38,770
say searching for headers when you're

00:44:36,430 --> 00:44:41,050
doing a compilation and the header is

00:44:38,770 --> 00:44:42,850
missing in one directory and you find it

00:44:41,050 --> 00:44:44,920
in the next one it's America I actually

00:44:42,850 --> 00:44:45,820
put in the records the fact that we did

00:44:44,920 --> 00:44:48,100
stuff missing

00:44:45,820 --> 00:44:49,780
we saw the directory enumeration order

00:44:48,100 --> 00:44:51,400
we store that in the order so when it's

00:44:49,780 --> 00:44:52,900
played back when you're given us called

00:44:51,400 --> 00:44:55,180
a path set this is all in the build

00:44:52,900 --> 00:44:56,650
Excel public code base pass that comes

00:44:55,180 --> 00:45:00,010
back and part of the thing that the the

00:44:56,650 --> 00:45:02,500
path set examiner whatever the class

00:45:00,010 --> 00:45:04,180
name is what it has to do is say we play

00:45:02,500 --> 00:45:05,440
in the same order and we did store in

00:45:04,180 --> 00:45:06,640
there the fact that first he went there

00:45:05,440 --> 00:45:07,600
and it wasn't there then you went there

00:45:06,640 --> 00:45:09,310
it wasn't there and then you might here

00:45:07,600 --> 00:45:11,140
it was because if you stick your header

00:45:09,310 --> 00:45:13,330
there suddenly in the first place we

00:45:11,140 --> 00:45:17,830
want it to be a different hit so good

00:45:13,330 --> 00:45:21,280
thinking and yes it's it's in there I'm

00:45:17,830 --> 00:45:22,570
Korean from Nvidia my question is it are

00:45:21,280 --> 00:45:24,100
there any plans on your roadmap to

00:45:22,570 --> 00:45:26,590
integrate your remote execution with

00:45:24,100 --> 00:45:30,550
your CI so you see I will so much faster

00:45:26,590 --> 00:45:32,320
yes actually I didn't talk to that how

00:45:30,550 --> 00:45:34,570
do I put it I was alluding to this we've

00:45:32,320 --> 00:45:37,540
spent a lot of time on CI and making CI

00:45:34,570 --> 00:45:39,910
better and a bit less let's say on the

00:45:37,540 --> 00:45:42,490
inner loop case for just the devs so my

00:45:39,910 --> 00:45:43,840
first personal focus is let's make the

00:45:42,490 --> 00:45:46,210
dev teams I'm working with eventually

00:45:43,840 --> 00:45:47,380
outside make that faster but yes you're

00:45:46,210 --> 00:45:49,000
right you could take the exact same

00:45:47,380 --> 00:45:50,560
thing so as your dev ops pipelines if

00:45:49,000 --> 00:45:51,910
you're using that or you can

00:45:50,560 --> 00:45:55,990
conceptually say anything that's going

00:45:51,910 --> 00:45:57,340
to run a build provision of pool hook up

00:45:55,990 --> 00:46:00,100
the config cook up the authentication

00:45:57,340 --> 00:46:02,550
and go and you'd speed up your CIS

00:46:00,100 --> 00:46:04,690
including in na do that would happen

00:46:02,550 --> 00:46:06,700
we're not running that yet doesn't even

00:46:04,690 --> 00:46:08,380
as an experiment but its way down or a

00:46:06,700 --> 00:46:09,850
backlog and just didn't feel like

00:46:08,380 --> 00:46:13,270
copying all that into the slides my

00:46:09,850 --> 00:46:14,770
backlog goes like 80 slides and so it's

00:46:13,270 --> 00:46:16,870
interesting because probably the same

00:46:14,770 --> 00:46:19,450
problem the CI in terms of maintaining

00:46:16,870 --> 00:46:21,490
the configurations required yes kind of

00:46:19,450 --> 00:46:23,590
maybe you can solve in a similar way or

00:46:21,490 --> 00:46:25,600
for the aggregate more resilient like

00:46:23,590 --> 00:46:28,210
you only go to those missions which have

00:46:25,600 --> 00:46:29,650
the convicts January's coming and maybe

00:46:28,210 --> 00:46:31,300
I'll get another person I can go try and

00:46:29,650 --> 00:46:33,340
we'll get it get that wired up figure

00:46:31,300 --> 00:46:34,030
right here we go absolutely right just

00:46:33,340 --> 00:46:36,520
not at this moment

00:46:34,030 --> 00:46:38,480
Thanks talk to me next basil Kahn let's

00:46:36,520 --> 00:46:41,460
see what have

00:46:38,480 --> 00:46:43,620
anybody else nobody up there nobody down

00:46:41,460 --> 00:46:45,120
here alright any other questions

00:46:43,620 --> 00:46:47,220
randomly cool

00:46:45,120 --> 00:46:52,970
thank you everybody appreciate it thanks

00:46:47,220 --> 00:46:52,970

YouTube URL: https://www.youtube.com/watch?v=q3RAOwezexU


