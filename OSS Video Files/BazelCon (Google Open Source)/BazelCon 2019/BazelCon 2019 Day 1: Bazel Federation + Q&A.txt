Title: BazelCon 2019 Day 1: Bazel Federation + Q&A
Publication date: 2020-01-09
Playlist: BazelCon 2019
Description: 
	Florian Weikert, Google event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Florian Weikert;
Captions: 
	00:00:00,000 --> 00:00:08,429
um also we Toni had wanted to be here

00:00:05,250 --> 00:00:09,840
but he can't but what we wanted to do

00:00:08,429 --> 00:00:11,370
was talk a lot about the basel

00:00:09,840 --> 00:00:13,860
Federation and I just wanted to go and

00:00:11,370 --> 00:00:15,120
introduce Lauren to talk about Basel

00:00:13,860 --> 00:00:17,340
Federation thanks Lauren

00:00:15,120 --> 00:00:23,070
big round of applause for Florian thank

00:00:17,340 --> 00:00:24,480
you yeah hello so my name is Florian I

00:00:23,070 --> 00:00:27,840
hope you had a great lunch and already

00:00:24,480 --> 00:00:29,039
for more base little goodness yeah I'm

00:00:27,840 --> 00:00:31,050
working on the base of Federation

00:00:29,039 --> 00:00:33,719
together with Tony who unfortunately

00:00:31,050 --> 00:00:38,370
can't be here today so yeah it's my

00:00:33,719 --> 00:00:40,950
presentation now so first one to set the

00:00:38,370 --> 00:00:43,290
expectations so this is about Federation

00:00:40,950 --> 00:00:45,180
and not foundation so I'm not talking

00:00:43,290 --> 00:00:47,480
about any governance plans but I'm

00:00:45,180 --> 00:00:49,920
talking about a technical project and

00:00:47,480 --> 00:00:51,960
the goal of the project is to make the

00:00:49,920 --> 00:00:54,870
base of rules ecosystem more accessible

00:00:51,960 --> 00:00:58,230
more accessible mostly to users but also

00:00:54,870 --> 00:00:59,910
to rules owners and maintain errs second

00:00:58,230 --> 00:01:01,530
disclaimer this is an early preview so I

00:00:59,910 --> 00:01:03,539
don't think I'm going to take all of the

00:01:01,530 --> 00:01:06,950
30 minutes so we have more time for

00:01:03,539 --> 00:01:09,510
questions or a coffee if you want so

00:01:06,950 --> 00:01:12,479
first let's talk about the basic rules

00:01:09,510 --> 00:01:13,950
ecosystem I guess most of you or all of

00:01:12,479 --> 00:01:16,619
you have used Bayes law which means

00:01:13,950 --> 00:01:18,390
using rule sets and there actually many

00:01:16,619 --> 00:01:20,310
challenges when you want to use rule

00:01:18,390 --> 00:01:23,009
sets especially if you're new to Basel

00:01:20,310 --> 00:01:25,560
so the first challenge are dependencies

00:01:23,009 --> 00:01:27,479
I mean if you have if you want to use

00:01:25,560 --> 00:01:29,460
that say rules go you have to figure out

00:01:27,479 --> 00:01:31,530
what other dependencies of rules go

00:01:29,460 --> 00:01:33,630
because you cannot simply add rules go

00:01:31,530 --> 00:01:35,759
to your workspace file you also have to

00:01:33,630 --> 00:01:37,350
add like all the dependencies and that

00:01:35,759 --> 00:01:39,030
also translates to the dependencies of

00:01:37,350 --> 00:01:41,520
rules goal which means the transitive

00:01:39,030 --> 00:01:45,450
dependencies so you have to identify and

00:01:41,520 --> 00:01:47,009
use them in your workspace file next if

00:01:45,450 --> 00:01:49,259
you've done that you're not finished

00:01:47,009 --> 00:01:51,570
because some rule sets require some

00:01:49,259 --> 00:01:53,640
setup they require specific tool chains

00:01:51,570 --> 00:01:56,520
which also means you need to know like

00:01:53,640 --> 00:02:00,180
which PCL files to load and which macros

00:01:56,520 --> 00:02:01,560
to call now both of these points suffer

00:02:00,180 --> 00:02:04,350
from the same problem which means

00:02:01,560 --> 00:02:07,439
there's no really no standard and no a

00:02:04,350 --> 00:02:09,599
uniform interface which means there are

00:02:07,439 --> 00:02:12,180
some conventions on how projects

00:02:09,599 --> 00:02:14,129
structure the VCF files but not not all

00:02:12,180 --> 00:02:16,019
projects follow these convened

00:02:14,129 --> 00:02:18,120
which means it's like if you figured it

00:02:16,019 --> 00:02:19,859
out for one project like a different

00:02:18,120 --> 00:02:23,370
rules that might have their DCL files in

00:02:19,859 --> 00:02:24,269
a completely different location now once

00:02:23,370 --> 00:02:26,129
you've done that and you've identified

00:02:24,269 --> 00:02:27,870
the dependencies and the tool chains and

00:02:26,129 --> 00:02:31,439
what you need and there's an even bigger

00:02:27,870 --> 00:02:33,269
problem which is versions like a twitch

00:02:31,439 --> 00:02:36,000
version should you use rules go for

00:02:33,269 --> 00:02:37,709
example that's not really trivial

00:02:36,000 --> 00:02:39,599
especially if you use a lot of rules you

00:02:37,709 --> 00:02:41,700
don't really know like which version of

00:02:39,599 --> 00:02:45,480
rules go works with which version of

00:02:41,700 --> 00:02:48,030
skylib for example and as you as you all

00:02:45,480 --> 00:02:50,340
know Bayes law also has these breaking

00:02:48,030 --> 00:02:51,840
changes and the major releases so it's

00:02:50,340 --> 00:02:53,310
also not obvious which rules that

00:02:51,840 --> 00:02:57,650
actually works with your version of

00:02:53,310 --> 00:03:00,030
basil now even if you figured out that

00:02:57,650 --> 00:03:01,349
like you don't want to be stuck in time

00:03:00,030 --> 00:03:03,480
right so if you're very brave if you

00:03:01,349 --> 00:03:06,389
maybe want to upgrade from basil 1.0 to

00:03:03,480 --> 00:03:09,269
basil 1 @ 2.0 eventually which means

00:03:06,389 --> 00:03:11,790
breaking changes so it's unclear or it's

00:03:09,269 --> 00:03:14,099
very hard to find out if you bump your

00:03:11,790 --> 00:03:16,409
basil version like will your old rule

00:03:14,099 --> 00:03:19,290
sets to work with that so it's it's a

00:03:16,409 --> 00:03:21,209
difficult question and the thing is the

00:03:19,290 --> 00:03:23,699
basic rules ecosystem is growing which

00:03:21,209 --> 00:03:25,859
is a good thing but it also means as you

00:03:23,699 --> 00:03:30,810
get more rule sets in Stalag like these

00:03:25,859 --> 00:03:33,060
problems become more complex so the good

00:03:30,810 --> 00:03:36,540
news is we have a solution to that and

00:03:33,060 --> 00:03:38,699
that's called the base of Federation so

00:03:36,540 --> 00:03:41,669
basically the Federation on a very

00:03:38,699 --> 00:03:44,009
abstract level is basil and a set of

00:03:41,669 --> 00:03:45,989
rules all that specific versions and we

00:03:44,009 --> 00:03:50,370
basically guarantee that this set of

00:03:45,989 --> 00:03:52,889
versions grow up together it also means

00:03:50,370 --> 00:03:54,750
it's a black box for dependencies and

00:03:52,889 --> 00:03:56,609
tool chains so you no longer have to

00:03:54,750 --> 00:03:58,590
think about like which dependencies you

00:03:56,609 --> 00:04:00,689
do I need to use rules go

00:03:58,590 --> 00:04:02,099
you basically just tell the Federation

00:04:00,689 --> 00:04:04,889
hey give me rules go and all of its

00:04:02,099 --> 00:04:08,250
dependencies so that's why it's a black

00:04:04,889 --> 00:04:10,680
box and finally to address the last

00:04:08,250 --> 00:04:13,049
challenge that I mentioned it's also a

00:04:10,680 --> 00:04:15,419
framework for understanding what parts

00:04:13,049 --> 00:04:18,599
what which rule sets you need to upgrade

00:04:15,419 --> 00:04:25,050
in order to account for moving from base

00:04:18,599 --> 00:04:26,740
of 1.0 to 2.0 so that was a rehab strike

00:04:25,050 --> 00:04:28,330
now to get a bit

00:04:26,740 --> 00:04:31,479
a bit more concrete what is the

00:04:28,330 --> 00:04:33,490
Federation really so at its core it's a

00:04:31,479 --> 00:04:35,919
github repository and it basically

00:04:33,490 --> 00:04:37,720
contains a number of projects mostly

00:04:35,919 --> 00:04:40,690
rulesets like to see see and whatever

00:04:37,720 --> 00:04:42,910
and those repositories all have like

00:04:40,690 --> 00:04:45,280
that URL us of course they have their

00:04:42,910 --> 00:04:48,610
version identifier and they have a

00:04:45,280 --> 00:04:51,039
checksum and on top of that we have a

00:04:48,610 --> 00:04:53,889
lot of PCL files that contain repository

00:04:51,039 --> 00:04:56,500
rules and macros and those are basically

00:04:53,889 --> 00:04:58,509
your interface using the Federation so

00:04:56,500 --> 00:05:01,919
that's basically how you'll say hey give

00:04:58,509 --> 00:05:05,380
me rules go and all of its dependencies

00:05:01,919 --> 00:05:06,669
yeah that also means like as I said it's

00:05:05,380 --> 00:05:08,440
a black box so we handle the

00:05:06,669 --> 00:05:10,449
dependencies and the tool chains and set

00:05:08,440 --> 00:05:13,330
up inside those functions and VCF files

00:05:10,449 --> 00:05:15,039
and finally to make this whole thing

00:05:13,330 --> 00:05:17,919
complete we have a CI system called

00:05:15,039 --> 00:05:19,870
basis VI and that system basically tests

00:05:17,919 --> 00:05:21,970
everything in the Federation to make

00:05:19,870 --> 00:05:27,370
sure that our promise that everything

00:05:21,970 --> 00:05:29,229
works together is actually true now to

00:05:27,370 --> 00:05:32,050
use it I mean you're probably familiar

00:05:29,229 --> 00:05:35,080
with remote repositories so like you're

00:05:32,050 --> 00:05:38,289
using let's say rules go today you just

00:05:35,080 --> 00:05:40,740
open your workspace file you add an HTTP

00:05:38,289 --> 00:05:42,909
archive repository rule and then you

00:05:40,740 --> 00:05:45,849
pull the Federation version that you

00:05:42,909 --> 00:05:47,949
actually want to use then you load the

00:05:45,849 --> 00:05:49,840
bzl files in the Federation and

00:05:47,949 --> 00:05:53,110
basically say hey give me rules go or

00:05:49,840 --> 00:05:54,880
rules to see whatever and then you still

00:05:53,110 --> 00:05:57,190
like it's your workspace file so you can

00:05:54,880 --> 00:05:58,630
still load other projects that you want

00:05:57,190 --> 00:06:01,180
to use that are not in the Federation

00:05:58,630 --> 00:06:03,280
and if you want to use a different

00:06:01,180 --> 00:06:05,800
Federation version you by see just

00:06:03,280 --> 00:06:09,340
change here HTTP archive rule or you

00:06:05,800 --> 00:06:13,840
change the URL in there so I'll show you

00:06:09,340 --> 00:06:15,610
an example which is yeah as you can see

00:06:13,840 --> 00:06:16,810
we do some loads to load some build and

00:06:15,610 --> 00:06:19,900
stuff so it's the HTTP archive

00:06:16,810 --> 00:06:21,669
repository rule and it's the maybe

00:06:19,900 --> 00:06:23,380
wrapper which basically means you

00:06:21,669 --> 00:06:26,139
shouldn't load things that are already

00:06:23,380 --> 00:06:27,819
there twice and what you do okay is you

00:06:26,139 --> 00:06:30,699
add an H should be archive rule and say

00:06:27,819 --> 00:06:33,039
oh please note the Federation from this

00:06:30,699 --> 00:06:34,960
URL use this version which is our

00:06:33,039 --> 00:06:39,050
preview version zero point zero point

00:06:34,960 --> 00:06:41,700
one and then you're ready to use rules

00:06:39,050 --> 00:06:44,220
now in this example we're using rule CC

00:06:41,700 --> 00:06:46,950
what you basically do is okay you load

00:06:44,220 --> 00:06:49,560
this repository is a VCF file from the

00:06:46,950 --> 00:06:52,320
Federation and you load the rule CC

00:06:49,560 --> 00:06:54,480
function or macro then you call it and

00:06:52,320 --> 00:06:57,540
that's basically bringing in rule cc in

00:06:54,480 --> 00:06:59,190
all of its dependencies then you load a

00:06:57,540 --> 00:07:01,530
different file also from Federation

00:06:59,190 --> 00:07:03,570
which contains the setup that is needed

00:07:01,530 --> 00:07:06,240
to use it will CC and you call this rule

00:07:03,570 --> 00:07:07,770
CC setup function and I mean this this

00:07:06,240 --> 00:07:10,110
is still the same workspace file and so

00:07:07,770 --> 00:07:13,860
now you're free to load everything else

00:07:10,110 --> 00:07:16,470
what you want to do now let's look at

00:07:13,860 --> 00:07:18,480
the things in detail so as I mentioned

00:07:16,470 --> 00:07:21,450
rules you see the macro brings in the

00:07:18,480 --> 00:07:23,670
dependencies and rule CC itself in this

00:07:21,450 --> 00:07:26,310
example you can see rule CC depends on

00:07:23,670 --> 00:07:28,560
skylit so in the rue CC tips function we

00:07:26,310 --> 00:07:31,200
call the skylit function those function

00:07:28,560 --> 00:07:33,900
on the repositories of PCL file so it's

00:07:31,200 --> 00:07:36,570
all in the Federation and after bringing

00:07:33,900 --> 00:07:38,430
in the dependencies we call another HTTP

00:07:36,570 --> 00:07:43,320
archive repository rule to bring in rule

00:07:38,430 --> 00:07:46,110
cc itself then looking at the setup we

00:07:43,320 --> 00:07:48,270
basically do everything that we need to

00:07:46,110 --> 00:07:50,520
make rules ec usable so we call the

00:07:48,270 --> 00:07:52,620
Skylab Skylab setup function because we

00:07:50,520 --> 00:07:54,780
depend on Skylab but you also call like

00:07:52,620 --> 00:07:56,580
some CC setup function and those

00:07:54,780 --> 00:07:58,110
functions can be defined in BC alpha is

00:07:56,580 --> 00:08:00,060
in the Federation but also like in the

00:07:58,110 --> 00:08:03,600
rules to see repository or the Skylab

00:08:00,060 --> 00:08:06,060
repository now this is not really nice

00:08:03,600 --> 00:08:08,310
because as you can see like why do we

00:08:06,060 --> 00:08:10,440
why do we have two function calls we

00:08:08,310 --> 00:08:12,480
could only have one and also we are

00:08:10,440 --> 00:08:15,030
duplicating the dependency relationship

00:08:12,480 --> 00:08:16,830
because we specify that rule city

00:08:15,030 --> 00:08:18,710
depends on Skylab both an adapts

00:08:16,830 --> 00:08:22,250
function but also in the setup function

00:08:18,710 --> 00:08:26,040
so what about we remove the second one

00:08:22,250 --> 00:08:29,190
that would be very nice so this would be

00:08:26,040 --> 00:08:30,660
one way so we say we will remove the

00:08:29,190 --> 00:08:33,150
setup functions and we merge them into

00:08:30,660 --> 00:08:35,159
the dependency functions so as you can

00:08:33,150 --> 00:08:39,120
see on the bottom in red it's the new

00:08:35,159 --> 00:08:41,550
code we basically load the setup

00:08:39,120 --> 00:08:43,430
functions in the rule CC function and we

00:08:41,550 --> 00:08:45,870
also assume the skylit that's the same

00:08:43,430 --> 00:08:47,640
now as you can see on the left the

00:08:45,870 --> 00:08:50,190
smiley is not really smiling because

00:08:47,640 --> 00:08:52,180
there's one big problem and that is that

00:08:50,190 --> 00:08:55,600
Starlog actually it doesn't allow us

00:08:52,180 --> 00:08:57,130
now let's allow this right now so we

00:08:55,600 --> 00:09:01,660
cannot use load statements from within

00:08:57,130 --> 00:09:03,850
macros so that's not really nice but we

00:09:01,660 --> 00:09:06,910
have a solution that's a design document

00:09:03,850 --> 00:09:08,940
that I proposed three months ago I think

00:09:06,910 --> 00:09:11,320
I should probably share it more widely

00:09:08,940 --> 00:09:12,400
so we have a solution which requires a

00:09:11,320 --> 00:09:14,620
changes to start lock

00:09:12,400 --> 00:09:16,630
but for now unfortunately we have to

00:09:14,620 --> 00:09:21,400
stick with the setup function which I

00:09:16,630 --> 00:09:23,560
think is still an improvement now going

00:09:21,400 --> 00:09:25,690
back to the Federation itself there are

00:09:23,560 --> 00:09:27,580
actually multiple versions of the

00:09:25,690 --> 00:09:30,250
Federation or multiple Federation tracks

00:09:27,580 --> 00:09:33,100
because as I said basil does

00:09:30,250 --> 00:09:34,900
incompatible changes so every major

00:09:33,100 --> 00:09:37,120
basil release is not backwards

00:09:34,900 --> 00:09:40,270
compatible so we have one Federation

00:09:37,120 --> 00:09:41,950
track for each major basil release and

00:09:40,270 --> 00:09:45,040
that's a consequence of the semantic

00:09:41,950 --> 00:09:48,820
versioning and it also means that every

00:09:45,040 --> 00:09:51,940
track basically supports one major basil

00:09:48,820 --> 00:09:53,380
version and its descendants so it's so

00:09:51,940 --> 00:09:56,440
there's one Federation track for basil

00:09:53,380 --> 00:09:58,810
1.0 which also supports 1.1 1.2 and so

00:09:56,440 --> 00:10:01,990
on and those translate to github

00:09:58,810 --> 00:10:03,850
branches and what do you basically do is

00:10:01,990 --> 00:10:06,730
like I think in most cases you say ok

00:10:03,850 --> 00:10:11,410
I'm using basil 2.0 so I have to use the

00:10:06,730 --> 00:10:13,750
Federation track 2.0 2.0 X now having

00:10:11,410 --> 00:10:16,480
methyl ranches as an advantage which

00:10:13,750 --> 00:10:18,190
just means if rules rule owners decide

00:10:16,480 --> 00:10:20,380
to add a new feature to the rule set

00:10:18,190 --> 00:10:22,390
which is backwards compatible they can

00:10:20,380 --> 00:10:25,450
propose to add this new version to the

00:10:22,390 --> 00:10:27,400
let's say 2.0 Federation track but they

00:10:25,450 --> 00:10:29,440
can also back port it to the 1.0

00:10:27,400 --> 00:10:32,320
Federation track which means even the

00:10:29,440 --> 00:10:36,430
users that are stuck to basil 1.0 could

00:10:32,320 --> 00:10:38,260
get like the new feature and how they do

00:10:36,430 --> 00:10:40,420
this is simple I mean we are on github

00:10:38,260 --> 00:10:41,770
so you send a pull request and our CI

00:10:40,420 --> 00:10:43,750
system that I mentioned before would

00:10:41,770 --> 00:10:47,400
basically make sure that all the new

00:10:43,750 --> 00:10:47,400
version bump still works

00:10:48,330 --> 00:10:53,980
now that doesn't come for free

00:10:50,770 --> 00:10:55,300
unfortunately so basically if a rules

00:10:53,980 --> 00:10:56,920
that is in the Federation it has to

00:10:55,300 --> 00:11:00,220
follow some guidelines and it has to

00:10:56,920 --> 00:11:02,230
play nicely in some ways so one thing is

00:11:00,220 --> 00:11:05,329
that you're no longer allowed to pin

00:11:02,230 --> 00:11:06,949
your dependencies which is because we

00:11:05,329 --> 00:11:09,350
like this diamond dependency problems of

00:11:06,949 --> 00:11:11,149
multiple projects in the Federation

00:11:09,350 --> 00:11:12,860
dependent basis Skylab they should

00:11:11,149 --> 00:11:15,139
depend on the same version because if

00:11:12,860 --> 00:11:18,110
they don't do then you're in for a lot

00:11:15,139 --> 00:11:19,519
of trouble they also will have to adopt

00:11:18,110 --> 00:11:22,279
semantic versioning to make things

00:11:19,519 --> 00:11:24,799
consistent and it's also like easier to

00:11:22,279 --> 00:11:27,049
talk about releases and semantic version

00:11:24,799 --> 00:11:29,420
numbers that just commit hashes so

00:11:27,049 --> 00:11:31,879
that's an improvement and they also need

00:11:29,420 --> 00:11:33,589
to fetch the dependency differently

00:11:31,879 --> 00:11:35,329
ideally through the base of Federation

00:11:33,589 --> 00:11:38,569
to make sure that everything uses the

00:11:35,329 --> 00:11:41,149
same set of rules now we know that this

00:11:38,569 --> 00:11:43,129
is more work on you that will offers and

00:11:41,149 --> 00:11:46,309
owners so we're trying to reduce that

00:11:43,129 --> 00:11:48,369
work by coming up with new workflows by

00:11:46,309 --> 00:11:52,779
inventing new tools and also by

00:11:48,369 --> 00:11:52,779
establishing policies of best practices

00:11:52,989 --> 00:11:57,290
now there was a lot of talk about the

00:11:55,670 --> 00:12:00,739
Federation what we want to do what do we

00:11:57,290 --> 00:12:02,929
already have so we spend a lot of times

00:12:00,739 --> 00:12:06,079
causing this problem I wrote like two or

00:12:02,929 --> 00:12:08,269
three prototypes for that and we finally

00:12:06,079 --> 00:12:09,529
have a first very early version as you

00:12:08,269 --> 00:12:12,199
can see from the version number it's

00:12:09,529 --> 00:12:15,399
zero point zero point one so it's in

00:12:12,199 --> 00:12:19,429
it's a beginning right now it supports

00:12:15,399 --> 00:12:22,459
C++ Java Python and skylit but I'm also

00:12:19,429 --> 00:12:24,619
working on including go darker proto

00:12:22,459 --> 00:12:27,649
protobuf tool chains platforms and

00:12:24,619 --> 00:12:29,869
ghazal and what I'm doing right now is a

00:12:27,649 --> 00:12:32,239
minimally invasive approach which means

00:12:29,869 --> 00:12:35,269
as I said it would be easier if all the

00:12:32,239 --> 00:12:37,399
rule sets confirmed to like a standard

00:12:35,269 --> 00:12:39,230
or convention of how they structure the

00:12:37,399 --> 00:12:41,299
dependencies but right now that's not

00:12:39,230 --> 00:12:43,910
possible for example Brusco has like an

00:12:41,299 --> 00:12:46,189
awful lot of mesial files and I don't

00:12:43,910 --> 00:12:47,959
want to like send the pool request and

00:12:46,189 --> 00:12:49,790
refactor everything so right on the

00:12:47,959 --> 00:12:52,429
Federation tries to work around that and

00:12:49,790 --> 00:12:54,519
tries to use the existing vzl files but

00:12:52,429 --> 00:12:57,410
with some checks and balances on top

00:12:54,519 --> 00:13:00,319
I've also mentioned we have CI support

00:12:57,410 --> 00:13:01,819
basis VI which is important to actually

00:13:00,319 --> 00:13:03,649
guarantee that things can be tested

00:13:01,819 --> 00:13:06,079
together so we have specific integration

00:13:03,649 --> 00:13:09,679
tests and we have pre seven support for

00:13:06,079 --> 00:13:11,269
pull requests finally something that I'm

00:13:09,679 --> 00:13:13,579
going to discuss on the next slide in

00:13:11,269 --> 00:13:15,860
more detail is support for release

00:13:13,579 --> 00:13:17,869
infrastructure so we've been approached

00:13:15,860 --> 00:13:18,540
by rule owners how to cut a release for

00:13:17,869 --> 00:13:20,580
their rules

00:13:18,540 --> 00:13:24,180
and that's something we want to support

00:13:20,580 --> 00:13:26,340
as well now the plan for now is actually

00:13:24,180 --> 00:13:28,440
for this year is to finish the work in

00:13:26,340 --> 00:13:30,750
progress so onboarding rules go with

00:13:28,440 --> 00:13:32,280
stalker and everything then cut a new

00:13:30,750 --> 00:13:34,110
release announced it to you and

00:13:32,280 --> 00:13:35,730
hopefully get your feedback but it's

00:13:34,110 --> 00:13:37,410
fully expected that we have to spend

00:13:35,730 --> 00:13:39,240
several more iterations on this project

00:13:37,410 --> 00:13:43,110
so we don't think we will get it right

00:13:39,240 --> 00:13:47,280
in the first time now that brings us to

00:13:43,110 --> 00:13:49,950
the future so I mean as I said like the

00:13:47,280 --> 00:13:51,960
idea the basic idea is to make the

00:13:49,950 --> 00:13:53,820
ecosystem more accessible which also

00:13:51,960 --> 00:13:55,970
means not only supporting the users but

00:13:53,820 --> 00:13:58,590
also the little owners and maintain errs

00:13:55,970 --> 00:14:00,060
so I've mentioned this like most will

00:13:58,590 --> 00:14:01,710
charge you for best practices are really

00:14:00,060 --> 00:14:04,470
important like it would be nice if every

00:14:01,710 --> 00:14:07,110
rule set confirmed to like a well-known

00:14:04,470 --> 00:14:08,640
standard because like we're looking at

00:14:07,110 --> 00:14:10,320
the rule sets I see that rule offers

00:14:08,640 --> 00:14:11,010
like basically all solve the same

00:14:10,320 --> 00:14:13,140
problems

00:14:11,010 --> 00:14:15,510
again and again so it would be nice if

00:14:13,140 --> 00:14:17,160
we could basically like take that work

00:14:15,510 --> 00:14:20,910
load from your shoulders and basically

00:14:17,160 --> 00:14:23,640
show you the best path forward now there

00:14:20,910 --> 00:14:25,860
are already some best practices as you

00:14:23,640 --> 00:14:27,840
can see on our home page but I think we

00:14:25,860 --> 00:14:29,820
should expand on them so one thing that

00:14:27,840 --> 00:14:31,530
was clear during Federation is like

00:14:29,820 --> 00:14:33,570
they're not only dependencies

00:14:31,530 --> 00:14:35,790
they are user dependencies which means

00:14:33,570 --> 00:14:37,200
what do you actually need if you want to

00:14:35,790 --> 00:14:39,330
use that rule set but there are also

00:14:37,200 --> 00:14:40,980
internal dependencies so what you need

00:14:39,330 --> 00:14:42,720
if you want to develop that rule set if

00:14:40,980 --> 00:14:46,320
you want to test the dual set or if you

00:14:42,720 --> 00:14:50,100
want to deploy that rule set finally one

00:14:46,320 --> 00:14:53,040
big source of problems are custom

00:14:50,100 --> 00:14:55,220
repository rules for us so for example

00:14:53,040 --> 00:14:58,200
gazelle has this go repository

00:14:55,220 --> 00:15:00,540
repository rule and normally you would

00:14:58,200 --> 00:15:02,100
assume okay you can always load the

00:15:00,540 --> 00:15:04,170
dependencies of a project and then the

00:15:02,100 --> 00:15:06,300
project itself well the thing is for

00:15:04,170 --> 00:15:08,130
gazelle some of its dependencies are

00:15:06,300 --> 00:15:10,410
brought in via the go repository rule

00:15:08,130 --> 00:15:13,350
which is actually defined in the castle

00:15:10,410 --> 00:15:15,090
project so as I could catch-22 so you

00:15:13,350 --> 00:15:17,220
have to load gazelle first before

00:15:15,090 --> 00:15:18,900
actually being able to load the go

00:15:17,220 --> 00:15:21,900
repository symbol and bring in its

00:15:18,900 --> 00:15:23,210
dependencies so that's something we want

00:15:21,900 --> 00:15:25,410
to work on

00:15:23,210 --> 00:15:28,680
finally finally what I mentioned on the

00:15:25,410 --> 00:15:31,170
previous slide releases are important

00:15:28,680 --> 00:15:31,710
and we have a project called rules

00:15:31,170 --> 00:15:34,350
package

00:15:31,710 --> 00:15:36,810
and that project basically offers build

00:15:34,350 --> 00:15:39,510
rules that we can use to build a release

00:15:36,810 --> 00:15:41,399
table all of your project which means

00:15:39,510 --> 00:15:43,770
that those build rules basically

00:15:41,399 --> 00:15:46,500
generate release notes for you and they

00:15:43,770 --> 00:15:48,480
also provide you a tarball archive which

00:15:46,500 --> 00:15:51,029
contains all the code that your users

00:15:48,480 --> 00:15:52,680
need so it basically strips out all like

00:15:51,029 --> 00:15:55,470
the test stuff and the internal stuff

00:15:52,680 --> 00:15:57,570
and that's something yeah we want to

00:15:55,470 --> 00:15:59,730
offer to you and also support on CI by

00:15:57,570 --> 00:16:04,050
doing pre-release testing for example

00:15:59,730 --> 00:16:06,600
and they are basically two approaches so

00:16:04,050 --> 00:16:08,130
some project like Cuzco are very active

00:16:06,600 --> 00:16:10,380
at cutting their own releases which we

00:16:08,130 --> 00:16:12,839
call bottom up but some projects don't

00:16:10,380 --> 00:16:15,360
cut releases at all so we thought maybe

00:16:12,839 --> 00:16:17,760
we could support that by offering the

00:16:15,360 --> 00:16:19,860
ability for top-down release cutting

00:16:17,760 --> 00:16:22,920
which means we would run the Federation

00:16:19,860 --> 00:16:25,440
of its memo projects at hat for each

00:16:22,920 --> 00:16:26,760
project and then if we identify one set

00:16:25,440 --> 00:16:29,070
that works together we would cut

00:16:26,760 --> 00:16:31,290
releases automatically and say okay like

00:16:29,070 --> 00:16:33,360
these rules now have like Federation

00:16:31,290 --> 00:16:36,270
release whatever because they work

00:16:33,360 --> 00:16:37,920
together but that's something we we

00:16:36,270 --> 00:16:41,240
offer and of course like people can

00:16:37,920 --> 00:16:41,240
decide if they want to use that or not

00:16:42,560 --> 00:16:47,100
now speaking about Basel itself there

00:16:45,750 --> 00:16:50,850
are more changes that we could make that

00:16:47,100 --> 00:16:52,560
would make life easier for all of us one

00:16:50,850 --> 00:16:56,490
thing is how can we support multiple

00:16:52,560 --> 00:16:59,459
basement versions and yeah that's some

00:16:56,490 --> 00:17:01,950
ideas that Tony came up with it's the

00:16:59,459 --> 00:17:03,870
question like how do we treat the

00:17:01,950 --> 00:17:06,510
question of which base and version do I

00:17:03,870 --> 00:17:08,550
have which features are supported we can

00:17:06,510 --> 00:17:10,589
improve on that by basically being able

00:17:08,550 --> 00:17:13,290
to query based or hey which features do

00:17:10,589 --> 00:17:14,880
you support right now it's also

00:17:13,290 --> 00:17:17,640
workspaces are a big point of contention

00:17:14,880 --> 00:17:19,079
because I feel like the original design

00:17:17,640 --> 00:17:22,770
didn't anticipate many of the use cases

00:17:19,079 --> 00:17:25,260
Rhian that we are now having so we could

00:17:22,770 --> 00:17:28,470
improve workspace files and make them

00:17:25,260 --> 00:17:31,470
completely declarative or imperative not

00:17:28,470 --> 00:17:32,910
like a mix and finally the thing that I

00:17:31,470 --> 00:17:34,650
mentioned before with the ideal basis of

00:17:32,910 --> 00:17:36,809
Federation there are a lot of

00:17:34,650 --> 00:17:39,870
restrictions around load statements in

00:17:36,809 --> 00:17:41,190
workspace files or in Stalag and I've

00:17:39,870 --> 00:17:42,720
been approached by users that actually

00:17:41,190 --> 00:17:44,370
had the same problem with this

00:17:42,720 --> 00:17:46,500
inflexibility

00:17:44,370 --> 00:17:47,910
maybe we can solve that because that

00:17:46,500 --> 00:17:49,200
would make the Federation you see about

00:17:47,910 --> 00:17:55,200
a thing that would also make some of

00:17:49,200 --> 00:17:57,720
your use cases easier yeah so as I said

00:17:55,200 --> 00:18:01,620
like it's very much work in progress

00:17:57,720 --> 00:18:03,059
it's still very early so I'm happy to

00:18:01,620 --> 00:18:05,400
get your feedback and to answer your

00:18:03,059 --> 00:18:09,210
questions I mean you can reach me or

00:18:05,400 --> 00:18:10,920
Tony by email we don't get up we you can

00:18:09,210 --> 00:18:12,930
also use the basil dev mailing list or

00:18:10,920 --> 00:18:16,740
you can find me advice O'Connor and ask

00:18:12,930 --> 00:18:18,660
me questions so yeah as I said like it's

00:18:16,740 --> 00:18:20,580
very early that this heart is very short

00:18:18,660 --> 00:18:24,080
thank you for your attention thank you

00:18:20,580 --> 00:18:24,080
to the amazing event team and

00:18:30,320 --> 00:18:34,860
so I'm open for Q&A

00:18:32,460 --> 00:18:36,630
thanks for en I appreciate taking time

00:18:34,860 --> 00:18:38,310
you can hold on talk for a minute if you

00:18:36,630 --> 00:18:40,650
want to my issue might flip back and

00:18:38,310 --> 00:18:42,120
forth once again the mics are in the

00:18:40,650 --> 00:18:44,910
middle does anybody have any questions

00:18:42,120 --> 00:18:47,760
on basil Federation we can chat until

00:18:44,910 --> 00:18:49,650
people can end up I also can grab a mic

00:18:47,760 --> 00:18:52,200
and we can run it over to folks as

00:18:49,650 --> 00:18:54,120
needed thanks for that talk I you know

00:18:52,200 --> 00:18:55,110
you know a big fan of the Federation

00:18:54,120 --> 00:18:59,000
right thank you

00:18:55,110 --> 00:19:01,020
I mean not just the Star Trek Federation

00:18:59,000 --> 00:19:06,140
so don't get any better

00:19:01,020 --> 00:19:10,200
it's a free conference yeah okay that's

00:19:06,140 --> 00:19:13,830
Mike here hello Oscar from LinkedIn

00:19:10,200 --> 00:19:16,410
hazard being any thought booty

00:19:13,830 --> 00:19:17,880
about running basil in an environment

00:19:16,410 --> 00:19:19,590
that doesn't have access to the Internet

00:19:17,880 --> 00:19:21,300
is a Federation gonna help with that

00:19:19,590 --> 00:19:24,420
because that's one of the biggest pain

00:19:21,300 --> 00:19:27,030
points yes so one idea was if we had a

00:19:24,420 --> 00:19:29,610
base of Federation that works you could

00:19:27,030 --> 00:19:32,040
basically download the entire stage and

00:19:29,610 --> 00:19:34,590
there's like which is the basis income

00:19:32,040 --> 00:19:36,150
and you could basically create a local

00:19:34,590 --> 00:19:38,910
snapshot of that so you would need

00:19:36,150 --> 00:19:40,680
access to the internet once but then you

00:19:38,910 --> 00:19:43,560
could use that specific snapshot of the

00:19:40,680 --> 00:19:45,810
Federation locally so the Federation

00:19:43,560 --> 00:19:48,210
Tarble includes all of the other rules

00:19:45,810 --> 00:19:49,800
in its release it's not just pointing to

00:19:48,210 --> 00:19:51,900
the no no it's actually it's actually

00:19:49,800 --> 00:19:53,640
pointing to them but you could run basel

00:19:51,900 --> 00:19:55,170
once on your workspace and do Basel sync

00:19:53,640 --> 00:19:57,450
and then it would fetch all the external

00:19:55,170 --> 00:20:00,150
repositories so that would basically

00:19:57,450 --> 00:20:01,440
create I mean the thing is it's not

00:20:00,150 --> 00:20:02,640
really perfect because I think if you

00:20:01,440 --> 00:20:07,830
run basically clean it would go away

00:20:02,640 --> 00:20:10,080
yeah but I mean I'm sure we could build

00:20:07,830 --> 00:20:11,460
tools on top of that to actually provide

00:20:10,080 --> 00:20:13,950
you like a tarball that includes

00:20:11,460 --> 00:20:16,350
everything so one of the things we have

00:20:13,950 --> 00:20:18,060
had to do is run basel sync but with

00:20:16,350 --> 00:20:20,520
that flag that gives you a result that

00:20:18,060 --> 00:20:22,860
vzl file and could have to manually

00:20:20,520 --> 00:20:24,750
tweak tweak all of the URLs in that file

00:20:22,860 --> 00:20:27,960
to point to internal copies and has been

00:20:24,750 --> 00:20:30,150
run through security and licensing like

00:20:27,960 --> 00:20:33,600
we have requirements before you import

00:20:30,150 --> 00:20:36,240
something and that is a major pain point

00:20:33,600 --> 00:20:37,650
for running basel on the CI so just

00:20:36,240 --> 00:20:39,360
something to think about indigent I mean

00:20:37,650 --> 00:20:41,730
it's actually a very good question

00:20:39,360 --> 00:20:42,780
because so when writing the test support

00:20:41,730 --> 00:20:44,880
for this on

00:20:42,780 --> 00:20:47,130
I'm also doing a lot of like workspace

00:20:44,880 --> 00:20:50,040
manipulation to rewrite workspaces to

00:20:47,130 --> 00:20:52,200
like fetch actually tarball and use a

00:20:50,040 --> 00:20:53,940
local repository rule to reference the

00:20:52,200 --> 00:20:55,800
contents of the table own so I think

00:20:53,940 --> 00:20:57,690
that tooling we could extract it a

00:20:55,800 --> 00:20:59,280
different tool to actually do what you

00:20:57,690 --> 00:21:01,140
want to say okay

00:20:59,280 --> 00:21:03,150
it's fetching everything and rewrite

00:21:01,140 --> 00:21:06,270
rewriting the workspace file to point at

00:21:03,150 --> 00:21:07,950
the local archives I mean I actually

00:21:06,270 --> 00:21:10,740
haven't thought about that but we could

00:21:07,950 --> 00:21:16,290
use that infrastructure for that thank

00:21:10,740 --> 00:21:17,880
you thank you couple questions so it

00:21:16,290 --> 00:21:20,400
sounds like rules should expose some

00:21:17,880 --> 00:21:22,170
sort of like common you know test entry

00:21:20,400 --> 00:21:23,490
point for you to run some tests against

00:21:22,170 --> 00:21:25,320
the rule because it's unclear like how

00:21:23,490 --> 00:21:27,780
would you exactly like test a rule why I

00:21:25,320 --> 00:21:30,600
made okay so that's also very good

00:21:27,780 --> 00:21:32,490
question so right now if you have a rule

00:21:30,600 --> 00:21:36,630
set most likely you run on basis VI

00:21:32,490 --> 00:21:39,000
which is build cut based and I mean we

00:21:36,630 --> 00:21:40,890
can easily add that so normally how this

00:21:39,000 --> 00:21:43,110
works is every project that runs on

00:21:40,890 --> 00:21:44,700
build cut has like this yamo file that

00:21:43,110 --> 00:21:46,410
basically specifies you build targets

00:21:44,700 --> 00:21:48,900
and test targets and right now the

00:21:46,410 --> 00:21:51,540
Federation basically takes these files

00:21:48,900 --> 00:21:54,090
and runs these tests I see but you're

00:21:51,540 --> 00:21:56,220
also able to specify different tests but

00:21:54,090 --> 00:21:59,130
right now it's like manually created so

00:21:56,220 --> 00:22:02,430
we will still require llaman files to

00:21:59,130 --> 00:22:05,610
test that make sense and what exactly do

00:22:02,430 --> 00:22:07,050
you mean by not being too like specific

00:22:05,610 --> 00:22:08,880
versions in my rules because like if I'm

00:22:07,050 --> 00:22:11,040
in depending on some other rules

00:22:08,880 --> 00:22:12,750
feening means reproducibility for me do

00:22:11,040 --> 00:22:15,330
you mean like so that you could override

00:22:12,750 --> 00:22:17,310
this in in your workspace or yeah I mean

00:22:15,330 --> 00:22:19,950
so ultimately the Federation has to be

00:22:17,310 --> 00:22:22,200
the has to be in control like which

00:22:19,950 --> 00:22:23,850
dependence is affected with erosion so

00:22:22,200 --> 00:22:25,680
you shouldn't just hard code say hey I

00:22:23,850 --> 00:22:29,940
want place a scallop at one point

00:22:25,680 --> 00:22:31,470
whatever so that would be a problem but

00:22:29,940 --> 00:22:33,210
at the same time I need some specific

00:22:31,470 --> 00:22:34,740
version when I'm developing you know

00:22:33,210 --> 00:22:35,970
like so sure but that would go through

00:22:34,740 --> 00:22:37,710
the Federation so you would basically

00:22:35,970 --> 00:22:39,390
specify all in the works which I want to

00:22:37,710 --> 00:22:41,100
use the Federation at this version and

00:22:39,390 --> 00:22:42,960
you would use that skylib version which

00:22:41,100 --> 00:22:45,570
is included in that Federation so you

00:22:42,960 --> 00:22:47,280
basically wouldn't know about the skylib

00:22:45,570 --> 00:22:49,290
version number you would only know about

00:22:47,280 --> 00:22:52,940
the Federation version number yeah and

00:22:49,290 --> 00:22:52,940
we would guarantee that it works for you

00:22:53,530 --> 00:22:57,490
make sure you remember to introduce

00:22:55,210 --> 00:23:01,059
yourselves and I'm gonna go up top to

00:22:57,490 --> 00:23:04,120
the balcony first with a question hi I'm

00:23:01,059 --> 00:23:07,720
Stefan from aspect dodaf I want to talk

00:23:04,120 --> 00:23:11,980
about CIA testing and automated testing

00:23:07,720 --> 00:23:16,110
what about entelechy like if you want to

00:23:11,980 --> 00:23:20,370
test in the in the upper ability between

00:23:16,110 --> 00:23:23,470
different all sessions if they have like

00:23:20,370 --> 00:23:25,179
at least 10 different roles which are

00:23:23,470 --> 00:23:27,280
not directly dependent on each other and

00:23:25,179 --> 00:23:30,549
each of them have like 10 different

00:23:27,280 --> 00:23:34,990
versions I'm gonna test each version

00:23:30,549 --> 00:23:39,520
with each other reason just to make sure

00:23:34,990 --> 00:23:43,179
they're compatible and I think it will

00:23:39,520 --> 00:23:44,950
grow exponentially if a lot of rules and

00:23:43,179 --> 00:23:50,320
a lot of resins which are going to be

00:23:44,950 --> 00:23:55,030
tested so who are going to write both

00:23:50,320 --> 00:23:58,720
tests and mmm is there some way for a

00:23:55,030 --> 00:24:03,010
little developer to like make sure that

00:23:58,720 --> 00:24:07,390
he wanted to test his rules with some

00:24:03,010 --> 00:24:09,280
different rules in particular so we

00:24:07,390 --> 00:24:11,440
don't test like every possible

00:24:09,280 --> 00:24:13,450
combination what we do is we usually

00:24:11,440 --> 00:24:15,610
start with one set of versions that we

00:24:13,450 --> 00:24:17,980
know that works and then what do you

00:24:15,610 --> 00:24:20,320
basically how you test the new versions

00:24:17,980 --> 00:24:22,690
by creating a pull request and in that

00:24:20,320 --> 00:24:24,159
pull request you can basically change as

00:24:22,690 --> 00:24:26,260
many version numbers as you want and

00:24:24,159 --> 00:24:29,830
then we see I gives you a result to say

00:24:26,260 --> 00:24:31,240
yes or no so we don't like take the

00:24:29,830 --> 00:24:32,860
approach of testing like all possible

00:24:31,240 --> 00:24:35,169
combinations which is fine with like

00:24:32,860 --> 00:24:40,090
having one set of versions and built on

00:24:35,169 --> 00:24:42,220
top of that thank you hi this is Jordan

00:24:40,090 --> 00:24:44,470
and leur one challenge I've had with

00:24:42,220 --> 00:24:46,419
Interop and composability when dealing

00:24:44,470 --> 00:24:48,370
with rules and that kind of a large set

00:24:46,419 --> 00:24:50,350
of rules is the extent to which some of

00:24:48,370 --> 00:24:52,690
the foundational rules are still in need

00:24:50,350 --> 00:24:55,030
of basel implementation as opposed to in

00:24:52,690 --> 00:24:59,280
purely in star LARC how do you expect to

00:24:55,030 --> 00:25:01,990
handle that problem so right now we

00:24:59,280 --> 00:25:04,690
focus on poorly styled lock basic rules

00:25:01,990 --> 00:25:06,840
so also the early members are OCC and

00:25:04,690 --> 00:25:08,760
Java for example which are

00:25:06,840 --> 00:25:13,170
going from later fools to Starlog rules

00:25:08,760 --> 00:25:15,270
I think with the operability with the

00:25:13,170 --> 00:25:17,640
native rules it just means we tested

00:25:15,270 --> 00:25:19,410
against a specific Basel version and I

00:25:17,640 --> 00:25:22,200
mean if that works that we know okay

00:25:19,410 --> 00:25:23,610
these rules these native rules also work

00:25:22,200 --> 00:25:27,740
with everything that is in Starlog in

00:25:23,610 --> 00:25:29,910
the Federation so you don't expect to

00:25:27,740 --> 00:25:31,800
necessarily accelerate the project or

00:25:29,910 --> 00:25:33,450
process of change changing these native

00:25:31,800 --> 00:25:34,740
rules into solo implementation I mean

00:25:33,450 --> 00:25:37,410
expect that that would be an ongoing

00:25:34,740 --> 00:25:40,800
long term it would be nice if it was

00:25:37,410 --> 00:25:42,960
faster right I mean I cannot really like

00:25:40,800 --> 00:25:44,430
it's not like in my authority to tell it

00:25:42,960 --> 00:25:45,960
because it's like it's like different

00:25:44,430 --> 00:25:47,730
teams so I don't know like what are

00:25:45,960 --> 00:25:49,500
their plans so for example I'm working

00:25:47,730 --> 00:25:51,690
closely with it will CC team which is

00:25:49,500 --> 00:25:53,670
myself for example so I don't know like

00:25:51,690 --> 00:25:55,230
what's the state of their migration I'll

00:25:53,670 --> 00:25:57,420
just write this well support like what's

00:25:55,230 --> 00:25:59,460
in the repository like the current state

00:25:57,420 --> 00:26:01,230
but I actually don't know like what's

00:25:59,460 --> 00:26:03,270
like what's the timeline for the

00:26:01,230 --> 00:26:07,860
migration and I guess the job would be a

00:26:03,270 --> 00:26:09,180
good person to answer that yeah see me

00:26:07,860 --> 00:26:11,310
afterwards and we can talk about that

00:26:09,180 --> 00:26:15,290
because we've time for just maybe one or

00:26:11,310 --> 00:26:18,480
two more questions so I thanks thank you

00:26:15,290 --> 00:26:20,130
Kyle Cortes gun so one of the earlier

00:26:18,480 --> 00:26:21,930
speakers I forget which mentioned that

00:26:20,130 --> 00:26:24,870
the workspace files running machinery

00:26:21,930 --> 00:26:27,030
were really like really want to be a

00:26:24,870 --> 00:26:28,440
package management system and it seems

00:26:27,030 --> 00:26:31,980
like foundation is right in the middle

00:26:28,440 --> 00:26:33,000
of that what are your thoughts on how it

00:26:31,980 --> 00:26:35,460
might grow into that

00:26:33,000 --> 00:26:40,980
that package romanticism wants to exist

00:26:35,460 --> 00:26:43,020
I actually don't really know I mean as I

00:26:40,980 --> 00:26:44,370
said like we we outlined some ideas how

00:26:43,020 --> 00:26:47,610
we could improve the whole workspace

00:26:44,370 --> 00:26:49,680
thing I'm not sure if we ever get to

00:26:47,610 --> 00:26:50,940
that so right now the solution was

00:26:49,680 --> 00:26:53,070
specially for the Federation to build

00:26:50,940 --> 00:26:54,930
something within the boundaries of basil

00:26:53,070 --> 00:26:57,660
and the workspace mechanism that we have

00:26:54,930 --> 00:27:00,420
right now because we feel that that

00:26:57,660 --> 00:27:01,740
already alleviate some of the pain but

00:27:00,420 --> 00:27:04,530
for the long term mission I think it's

00:27:01,740 --> 00:27:06,750
also like so far it has been like mostly

00:27:04,530 --> 00:27:09,540
internal design so I've talked to Marcel

00:27:06,750 --> 00:27:11,490
I grew CC owners but I think once we get

00:27:09,540 --> 00:27:13,890
it out and get feedback from like in the

00:27:11,490 --> 00:27:16,110
wild from real users like it might

00:27:13,890 --> 00:27:17,730
change dramatically so that's why I want

00:27:16,110 --> 00:27:19,440
to get like rules go and everything on

00:27:17,730 --> 00:27:20,730
board so that it provides a real value

00:27:19,440 --> 00:27:22,020
to people so the

00:27:20,730 --> 00:27:24,000
they actually want to try it out and

00:27:22,020 --> 00:27:26,669
then like I feel like the future is very

00:27:24,000 --> 00:27:31,260
open so we don't have like a very strict

00:27:26,669 --> 00:27:32,460
vision or something thank you Brian

00:27:31,260 --> 00:27:35,490
Silverman from blue river

00:27:32,460 --> 00:27:37,919
one thing that I've run into a lot of

00:27:35,490 --> 00:27:39,630
the time when using external rules is I

00:27:37,919 --> 00:27:42,990
want to riho s-- them somewhere that I

00:27:39,630 --> 00:27:45,780
control so that you avoid some external

00:27:42,990 --> 00:27:49,919
hosting site disappearing in the future

00:27:45,780 --> 00:27:53,490
I does the Federation have any plans for

00:27:49,919 --> 00:27:55,950
supporting remapping all the URLs to

00:27:53,490 --> 00:27:58,830
some other location for downloading all

00:27:55,950 --> 00:28:01,370
the files whole thing that goes back to

00:27:58,830 --> 00:28:03,929
one of the first questions which is I

00:28:01,370 --> 00:28:06,600
think we would need to invent that's a

00:28:03,929 --> 00:28:08,910
mechanism to for that feature to say

00:28:06,600 --> 00:28:11,280
okay we can remap the URLs or host them

00:28:08,910 --> 00:28:13,020
somewhere else I mean so far usually

00:28:11,280 --> 00:28:16,440
most projects are hosted on github and

00:28:13,020 --> 00:28:18,929
on our Basil's yeah or basil mirror so I

00:28:16,440 --> 00:28:21,929
think like those two sites won't go away

00:28:18,929 --> 00:28:25,290
soon so but I understand your your

00:28:21,929 --> 00:28:27,419
problem so I think it's if you had the

00:28:25,290 --> 00:28:29,070
tooling for the use case for the other

00:28:27,419 --> 00:28:32,910
question we could build that on top of

00:28:29,070 --> 00:28:34,590
that and github we've recently had a

00:28:32,910 --> 00:28:36,299
problem with their project moving to a

00:28:34,590 --> 00:28:39,830
different name on github so they'll all

00:28:36,299 --> 00:28:42,150
run away so it is a problem even there

00:28:39,830 --> 00:28:43,440
yeah we also had that I think in the

00:28:42,150 --> 00:28:44,910
long term you want to move to the base

00:28:43,440 --> 00:28:46,860
of the mirror because then we can also

00:28:44,910 --> 00:28:49,320
track like download numbers and metrics

00:28:46,860 --> 00:28:49,860
and then we don't have this problem

00:28:49,320 --> 00:28:51,990
anymore

00:28:49,860 --> 00:28:53,970
but yeah that's something like I ran in

00:28:51,990 --> 00:29:00,380
through the same problem so I I can feel

00:28:53,970 --> 00:29:03,179
your pain so thank you thank you okay

00:29:00,380 --> 00:29:04,470
sorry just quickly wanted to say if you

00:29:03,179 --> 00:29:06,059
I'm John for those of you who didn't see

00:29:04,470 --> 00:29:09,270
me early on John field I manage the

00:29:06,059 --> 00:29:11,070
basil team two responses to previous

00:29:09,270 --> 00:29:14,400
questions or partial responses even

00:29:11,070 --> 00:29:17,429
asked me more offline one is in terms of

00:29:14,400 --> 00:29:18,780
native rule migrations Starlog that's

00:29:17,429 --> 00:29:21,000
happening it's not going to happen

00:29:18,780 --> 00:29:22,350
immediately the the Federation work is

00:29:21,000 --> 00:29:26,000
not going to be predicated on that

00:29:22,350 --> 00:29:28,919
happening I think the way forward is to

00:29:26,000 --> 00:29:31,110
even though it's imperfect is is to to

00:29:28,919 --> 00:29:33,590
deal with treat that as a blaze version

00:29:31,110 --> 00:29:35,930
issue and manage it at that level

00:29:33,590 --> 00:29:38,210
so getting the Federation right is not

00:29:35,930 --> 00:29:39,920
going to be predicated on native rural

00:29:38,210 --> 00:29:41,990
migration but we're gonna do our best to

00:29:39,920 --> 00:29:44,360
account for the fact that it's not star

00:29:41,990 --> 00:29:45,860
lark that's one point the other point is

00:29:44,360 --> 00:29:47,840
in terms of package management I think

00:29:45,860 --> 00:29:49,940
the question the assertion about package

00:29:47,840 --> 00:29:52,550
manager was made somewhat ironically in

00:29:49,940 --> 00:29:55,340
the sense that it hit it it started to

00:29:52,550 --> 00:29:57,140
creep in our workspace facilities have

00:29:55,340 --> 00:29:59,570
started to creep into the having

00:29:57,140 --> 00:30:01,340
elements of a package manager and I

00:29:59,570 --> 00:30:02,810
think we don't want it to go into the

00:30:01,340 --> 00:30:05,480
mode of being a full-blown package

00:30:02,810 --> 00:30:08,330
manager so this is an effort to do less

00:30:05,480 --> 00:30:10,610
to you know we don't have you know fancy

00:30:08,330 --> 00:30:12,620
Sat solver is doing constraint solving

00:30:10,610 --> 00:30:14,240
to figure out what the right version of

00:30:12,620 --> 00:30:15,890
rules that interoperate is this is less

00:30:14,240 --> 00:30:18,080
ambitious than a package manager

00:30:15,890 --> 00:30:19,700
intentionally and in the hope is that

00:30:18,080 --> 00:30:22,790
this is this will therefore be more

00:30:19,700 --> 00:30:24,680
manageable and if you want to ask me

00:30:22,790 --> 00:30:26,630
more about any of my responses talk to

00:30:24,680 --> 00:30:27,800
me or Florian later but just want to

00:30:26,630 --> 00:30:30,320
represent sir the whole team's

00:30:27,800 --> 00:30:33,350
perspective on this that's a good point

00:30:30,320 --> 00:30:35,090
thank you John thanks John and I just

00:30:33,350 --> 00:30:37,130
want to thank Florian for the basel

00:30:35,090 --> 00:30:38,090
federation talk I wasn't kidding when I

00:30:37,130 --> 00:30:39,470
said I think it's one of the most

00:30:38,090 --> 00:30:41,330
interesting and important things that

00:30:39,470 --> 00:30:42,800
are happening for the community these

00:30:41,330 --> 00:30:45,070
days so let's give for in a round of

00:30:42,800 --> 00:30:45,070

YouTube URL: https://www.youtube.com/watch?v=eUlQnJm3NPU


