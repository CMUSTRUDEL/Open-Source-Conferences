Title: BazelCon 2019 Day 1: Lightning Talk â€“ How Bazel Handles Symlinks
Publication date: 2020-01-15
Playlist: BazelCon 2019
Description: 
	Nathan Harmata, Google event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Nathan Harmata;
Captions: 
	00:00:00,680 --> 00:00:08,189
okay hello everyone welcome to the

00:00:04,410 --> 00:00:10,830
second lightning talk session I'm gonna

00:00:08,189 --> 00:00:12,830
be MC for this in the next session let

00:00:10,830 --> 00:00:15,210
me just mention a few quick ground rules

00:00:12,830 --> 00:00:17,580
there lightning talks so we want to

00:00:15,210 --> 00:00:20,640
stick to schedule we have 10 minutes for

00:00:17,580 --> 00:00:22,080
each speaker I've asked each speaker to

00:00:20,640 --> 00:00:23,820
try to leave it time for a few questions

00:00:22,080 --> 00:00:25,350
some may have more some may have less

00:00:23,820 --> 00:00:26,970
but we're gonna stick to the 10 minute

00:00:25,350 --> 00:00:28,320
slots if we run out of time you have

00:00:26,970 --> 00:00:30,480
questions you can always grab them in

00:00:28,320 --> 00:00:33,239
the in the in the hall and talk to them

00:00:30,480 --> 00:00:35,700
offline I'm gonna ask speakers actually

00:00:33,239 --> 00:00:37,860
introduce themselves that'll save time

00:00:35,700 --> 00:00:40,860
and I less likelihood all miss mangle

00:00:37,860 --> 00:00:44,460
their names so without further ado let

00:00:40,860 --> 00:00:47,539
me let's sorry we have one minute in

00:00:44,460 --> 00:00:54,120
case folks actually get here on time

00:00:47,539 --> 00:00:57,000
let's not be early oh and by the way we

00:00:54,120 --> 00:00:58,440
don't have time or enough microphones to

00:00:57,000 --> 00:01:01,500
throw microphones to folks so if you

00:00:58,440 --> 00:01:03,780
have questions just speak loud and I'm

00:01:01,500 --> 00:01:14,460
the speakers will repeat your questions

00:01:03,780 --> 00:01:19,950
hopefully that's pretty much it all

00:01:14,460 --> 00:01:25,650
right when we get started let's see does

00:01:19,950 --> 00:01:26,670
this work ok ok so I'm Nathan I work on

00:01:25,650 --> 00:01:29,270
basil

00:01:26,670 --> 00:01:31,890
I work on Basil's incrementality engine

00:01:29,270 --> 00:01:33,900
and this talk is gonna be how basil

00:01:31,890 --> 00:01:35,939
handles simek's correctly and currently

00:01:33,900 --> 00:01:37,229
and this is lightning talk about

00:01:35,939 --> 00:01:38,880
halftime to motivate everything in

00:01:37,229 --> 00:01:40,320
detail so I'm gonna have to breeze

00:01:38,880 --> 00:01:41,759
through the stuff and I wasn't playing a

00:01:40,320 --> 00:01:45,600
having time for questions but we'll see

00:01:41,759 --> 00:01:46,890
if I can skip some content all right so

00:01:45,600 --> 00:01:49,619
first off a very quick review of

00:01:46,890 --> 00:01:51,149
symlinks these are some commonly used

00:01:49,619 --> 00:01:54,299
bash commands to do stuff of some links

00:01:51,149 --> 00:01:57,270
to the first ones Ln the - s option

00:01:54,299 --> 00:01:59,729
means make a symlink and so Ellen - SBA

00:01:57,270 --> 00:02:02,790
means have a point to be so create new

00:01:59,729 --> 00:02:04,409
sim link a that references B and some

00:02:02,790 --> 00:02:05,729
links can be relative or absolute for

00:02:04,409 --> 00:02:09,479
simplicity in this talk we're just in do

00:02:05,729 --> 00:02:11,160
a lots of some links so use L ends make

00:02:09,479 --> 00:02:13,410
a symlink use element to destroy a

00:02:11,160 --> 00:02:15,360
symlink you can use

00:02:13,410 --> 00:02:17,160
that to get information about any path

00:02:15,360 --> 00:02:18,840
including a symlink by default stat

00:02:17,160 --> 00:02:21,060
follows symlinks more on that in moments

00:02:18,840 --> 00:02:24,270
stat - capital L does not follow some

00:02:21,060 --> 00:02:26,460
likes and this is analogous a stat -

00:02:24,270 --> 00:02:29,280
capital L Undercovers calls the Lib C

00:02:26,460 --> 00:02:30,870
function l stat which means not

00:02:29,280 --> 00:02:35,330
following some links and it's kind of

00:02:30,870 --> 00:02:38,040
confusing how I could fill the - L means

00:02:35,330 --> 00:02:39,240
follow some links and the else that

00:02:38,040 --> 00:02:41,640
means don't sell to follow some links I

00:02:39,240 --> 00:02:44,190
mean the real path bash command gives

00:02:41,640 --> 00:02:47,280
you the real path of a path accounting

00:02:44,190 --> 00:02:49,110
for all symlinks so that is all some

00:02:47,280 --> 00:02:50,340
link chains all ancestors in link chains

00:02:49,110 --> 00:02:52,440
blah blah blah we'll see that in a

00:02:50,340 --> 00:02:54,750
minute here's some examples so starting

00:02:52,440 --> 00:02:59,160
with the top left I make two directories

00:02:54,750 --> 00:03:02,250
being C I make a file F under each of

00:02:59,160 --> 00:03:06,600
them so there's B / f + C / F and then I

00:03:02,250 --> 00:03:08,130
get the real path of beat chef and I'm

00:03:06,600 --> 00:03:09,690
not doing anything fancy of symlink so I

00:03:08,130 --> 00:03:12,660
was expected the real path to be stuff

00:03:09,690 --> 00:03:14,220
is P / F and then stat just to confirm

00:03:12,660 --> 00:03:16,500
that B is a directory and B slash F is a

00:03:14,220 --> 00:03:18,270
file because that's boring the middle

00:03:16,500 --> 00:03:20,760
example on the Left I have a pointer

00:03:18,270 --> 00:03:23,220
okay so we we created some link eight

00:03:20,760 --> 00:03:30,450
points to be and then stat says yep it's

00:03:23,220 --> 00:03:33,360
a symlink and be from a boost example

00:03:30,450 --> 00:03:37,350
was directory so stat following symlinks

00:03:33,360 --> 00:03:40,680
says that age directory but and then if

00:03:37,350 --> 00:03:42,600
I can stat the path a slash F and that's

00:03:40,680 --> 00:03:44,760
a file because remember B stuff is a

00:03:42,600 --> 00:03:46,290
follow up here and the real path of a

00:03:44,760 --> 00:03:47,280
slash F is B slash a fair because

00:03:46,290 --> 00:03:49,140
everything works as expected

00:03:47,280 --> 00:03:52,140
and then the example on the bottom left

00:03:49,140 --> 00:03:54,540
I can unlink a so link it is an exist

00:03:52,140 --> 00:03:57,840
make a point to see and they go path of

00:03:54,540 --> 00:03:59,850
a stuff is no CHS stuff and then up in

00:03:57,840 --> 00:04:02,010
the top right I can do what's called

00:03:59,850 --> 00:04:04,590
make a dangling link so I'll first of

00:04:02,010 --> 00:04:07,170
all unlink a I'm like a a link to nope

00:04:04,590 --> 00:04:10,170
and then I'll try to stop the path of

00:04:07,170 --> 00:04:12,720
half a /f it doesn't exist and then down

00:04:10,170 --> 00:04:14,970
here is more complicated example or I

00:04:12,720 --> 00:04:18,840
can do things with layers of directory

00:04:14,970 --> 00:04:20,430
ancestors some links more moments so the

00:04:18,840 --> 00:04:21,630
real question is is this talk or elevate

00:04:20,430 --> 00:04:24,990
I might have might a sec talking for fun

00:04:21,630 --> 00:04:26,910
or do symlinks maybe matter to basil so

00:04:24,990 --> 00:04:27,330
in this example pretty pretty simple

00:04:26,910 --> 00:04:31,199
basil

00:04:27,330 --> 00:04:33,120
sample of a one-nighter to print out all

00:04:31,199 --> 00:04:35,550
the files in my workspace so I got uh

00:04:33,120 --> 00:04:39,750
let's see blah blah sorry on a build

00:04:35,550 --> 00:04:42,330
file it loads a Starbuck file sir a bzl

00:04:39,750 --> 00:04:46,110
file and calls a macro foo foo when

00:04:42,330 --> 00:04:49,289
called instantiates a sh binary target

00:04:46,110 --> 00:04:52,169
that has our source file that source

00:04:49,289 --> 00:04:55,560
files just runs the bin slash true

00:04:52,169 --> 00:04:58,050
command so if I do basil build foo colon

00:04:55,560 --> 00:05:00,150
foo everything works as expected and the

00:04:58,050 --> 00:05:02,759
question is could symlinks possibly

00:05:00,150 --> 00:05:03,810
matter well for starters the build file

00:05:02,759 --> 00:05:06,000
itself could be a symlink

00:05:03,810 --> 00:05:09,330
the bzl file itself could be a symlink

00:05:06,000 --> 00:05:09,780
the data sh source file could be a

00:05:09,330 --> 00:05:12,060
symlink

00:05:09,780 --> 00:05:16,560
and actually the food directory could be

00:05:12,060 --> 00:05:18,840
some link so everything is hard maybe ok

00:05:16,560 --> 00:05:19,279
so actually is everything easy so for

00:05:18,840 --> 00:05:24,029
starters

00:05:19,279 --> 00:05:25,830
lots of command line tools just follow

00:05:24,029 --> 00:05:30,180
some links transparently for example

00:05:25,830 --> 00:05:32,490
cats so if I if I make a text file bit

00:05:30,180 --> 00:05:34,259
at 60 and make a dot take ta something

00:05:32,490 --> 00:05:36,120
to be that txt and I scan it at a fixed

00:05:34,259 --> 00:05:37,889
T it works right everyone thought this

00:05:36,120 --> 00:05:40,080
before what's happening with the covers

00:05:37,889 --> 00:05:42,779
if we s trace the cat command

00:05:40,080 --> 00:05:47,310
the the - capital P beans only print out

00:05:42,779 --> 00:05:49,400
stuff that's consuming this path we see

00:05:47,310 --> 00:05:51,539
that that cat under the covers is using

00:05:49,400 --> 00:05:53,940
the system call open at which

00:05:51,539 --> 00:05:55,409
transparently follow some links that's

00:05:53,940 --> 00:05:57,509
the recent works it works as expected

00:05:55,409 --> 00:06:00,529
and a bunch of things to do this too

00:05:57,509 --> 00:06:03,089
like Java C in various other tools

00:06:00,529 --> 00:06:04,620
basically every tool almost every tool

00:06:03,089 --> 00:06:06,060
you use probably follows and links

00:06:04,620 --> 00:06:10,740
transparently so the question is cabeza

00:06:06,060 --> 00:06:12,659
let's do that and so consider this

00:06:10,740 --> 00:06:15,449
hypothetical example so we do some build

00:06:12,659 --> 00:06:17,879
we make arbitrary thoses operations that

00:06:15,449 --> 00:06:19,849
we do another build well one of those

00:06:17,879 --> 00:06:21,990
arbitrary file system operations include

00:06:19,849 --> 00:06:23,849
introducing symlinks changing target

00:06:21,990 --> 00:06:27,300
system links introducing sibling cycles

00:06:23,849 --> 00:06:29,719
or something this we claimed to you

00:06:27,300 --> 00:06:32,370
about to be both fast and correct and

00:06:29,719 --> 00:06:34,080
it's hard to it's not always have to do

00:06:32,370 --> 00:06:36,839
that in the presence of arbitrary Simek

00:06:34,080 --> 00:06:39,810
stuff because either you don't handle

00:06:36,839 --> 00:06:41,280
some links and then you're just wrong

00:06:39,810 --> 00:06:42,630
incrementally or

00:06:41,280 --> 00:06:44,160
every incremental build you fully

00:06:42,630 --> 00:06:46,889
resolve over some links I mean you're

00:06:44,160 --> 00:06:50,669
not fast okay so fine let's just do

00:06:46,889 --> 00:06:53,400
everything okay so we have a

00:06:50,669 --> 00:06:54,990
incrementality engine where we expressed

00:06:53,400 --> 00:06:57,300
baseless business logic in terms of

00:06:54,990 --> 00:06:59,280
evaluation of math Michael functions so

00:06:57,300 --> 00:07:00,990
if we can think of how to do symlink

00:06:59,280 --> 00:07:02,730
stuff using mathematical functions

00:07:00,990 --> 00:07:05,580
everything works for free so bets

00:07:02,730 --> 00:07:08,850
implements the equivalents of the Bosch

00:07:05,580 --> 00:07:12,510
real path command ourselves so if we

00:07:08,850 --> 00:07:14,970
have a helper function LS which stands

00:07:12,510 --> 00:07:16,830
for L stat that tells us the statin

00:07:14,970 --> 00:07:18,660
formation not following some links our

00:07:16,830 --> 00:07:19,830
goal is to have a function RP setting

00:07:18,660 --> 00:07:23,250
for real path that computes the real

00:07:19,830 --> 00:07:24,710
path of a path and so here's this amount

00:07:23,250 --> 00:07:27,380
of time ago this is the obvious

00:07:24,710 --> 00:07:30,990
implementation where you basically

00:07:27,380 --> 00:07:33,180
recursively get the real path above the

00:07:30,990 --> 00:07:36,090
parent directory and then you get the

00:07:33,180 --> 00:07:39,210
else dot result of the path in question

00:07:36,090 --> 00:07:40,550
and if it's a symlink you like append

00:07:39,210 --> 00:07:42,660
those paths and then you recursively

00:07:40,550 --> 00:07:44,280
resolve that in case that pointing to

00:07:42,660 --> 00:07:46,770
another directory or something okay so

00:07:44,280 --> 00:07:47,910
this works here's an example I can go

00:07:46,770 --> 00:07:51,240
through this basically you have some

00:07:47,910 --> 00:07:51,510
semuc chain and it just works okay are

00:07:51,240 --> 00:07:54,960
we done

00:07:51,510 --> 00:07:57,260
no because here's the trivial counter

00:07:54,960 --> 00:08:00,150
example we have a circular symlink a

00:07:57,260 --> 00:08:03,570
cycle of size one eight points to a and

00:08:00,150 --> 00:08:05,070
our our function recurse is forever this

00:08:03,570 --> 00:08:06,510
is actually a bad thing but it means

00:08:05,070 --> 00:08:10,260
some features of basil don't work out

00:08:06,510 --> 00:08:13,460
the box so we want to solve this

00:08:10,260 --> 00:08:15,900
explicitly so siming cycles

00:08:13,460 --> 00:08:20,190
it turns out that the kernel handless

00:08:15,900 --> 00:08:21,260
handles this automatically and there's a

00:08:20,190 --> 00:08:24,030
hard-coded

00:08:21,260 --> 00:08:26,190
limit other number of simek's it follows

00:08:24,030 --> 00:08:27,270
it's just a fun aside okay there's also

00:08:26,190 --> 00:08:28,919
something called something infinite

00:08:27,270 --> 00:08:30,450
expansions this is relevance if you're

00:08:28,919 --> 00:08:32,130
doing a recursive directory traversal

00:08:30,450 --> 00:08:37,469
there's two flavors the flavor on the

00:08:32,130 --> 00:08:40,020
top is when a a descendants is a symlink

00:08:37,469 --> 00:08:42,750
to it to one of his ancestors and the

00:08:40,020 --> 00:08:43,589
flavor in the bottom is when a ancestor

00:08:42,750 --> 00:08:45,390
it's a similar to one but its

00:08:43,589 --> 00:08:46,920
descendants so naively

00:08:45,390 --> 00:08:47,970
if you don't think about this and you're

00:08:46,920 --> 00:08:49,980
doing a recursive directory traversal

00:08:47,970 --> 00:08:52,440
they're going to loop forever but the

00:08:49,980 --> 00:08:53,459
finds bash command does handle this

00:08:52,440 --> 00:08:54,430
correctly as you can see with these

00:08:53,459 --> 00:08:56,050
error messages

00:08:54,430 --> 00:08:58,990
so we have to think about for these

00:08:56,050 --> 00:09:00,670
things and skipping a lot of details

00:08:58,990 --> 00:09:02,890
here the the trick is to think at the

00:09:00,670 --> 00:09:06,240
logical chain of operations when

00:09:02,890 --> 00:09:10,810
resolving some links so in this example

00:09:06,240 --> 00:09:14,260
we we have some chains some chain ending

00:09:10,810 --> 00:09:15,880
and B dots in b /c in media and b /c was

00:09:14,260 --> 00:09:20,980
already in our logical chain of

00:09:15,880 --> 00:09:22,960
operations and so that's bad so this is

00:09:20,980 --> 00:09:24,940
this is the algorithm the basil uses

00:09:22,960 --> 00:09:27,340
matcom time we go through this but the

00:09:24,940 --> 00:09:31,360
key thing I'm going to focus on is the

00:09:27,340 --> 00:09:35,110
detecting badness part so the general

00:09:31,360 --> 00:09:38,800
algorithm is a pair of like Co recursive

00:09:35,110 --> 00:09:41,170
functions for resolving a path given the

00:09:38,800 --> 00:09:43,120
full resolution of its parent path and

00:09:41,170 --> 00:09:44,890
resolving a symlink given the full of us

00:09:43,120 --> 00:09:47,380
even the partial of evolution of house

00:09:44,890 --> 00:09:49,570
so far but the key thing is we we keep

00:09:47,380 --> 00:09:51,850
around knowledge of the logical chain of

00:09:49,570 --> 00:09:53,170
operations we've done so far and so this

00:09:51,850 --> 00:09:54,640
is this is all the Missal source code

00:09:53,170 --> 00:09:56,200
basically I move reading it here's

00:09:54,640 --> 00:09:56,590
here's the tricky here's the interesting

00:09:56,200 --> 00:10:01,360
part

00:09:56,590 --> 00:10:03,070
ok so if we're if we are in the act of

00:10:01,360 --> 00:10:06,790
resolving a path and we already have

00:10:03,070 --> 00:10:10,090
some chain of paths we consider the we

00:10:06,790 --> 00:10:12,700
want to determine whether the path we're

00:10:10,090 --> 00:10:14,470
looking at right now is is bad and by

00:10:12,700 --> 00:10:16,360
bad I mean it's either a sibling cycle

00:10:14,470 --> 00:10:19,090
or it's one of those two expansion cases

00:10:16,360 --> 00:10:22,930
I discussed it discussed earlier and so

00:10:19,090 --> 00:10:25,810
this is the pseudocode for that ok so if

00:10:22,930 --> 00:10:27,040
if we're considering if we were brought

00:10:25,810 --> 00:10:28,780
to consider path we've are considered

00:10:27,040 --> 00:10:31,360
this chain of paths and that path is in

00:10:28,780 --> 00:10:33,160
the chain ok cycle if the path is a

00:10:31,360 --> 00:10:35,530
descendants of something in the chain

00:10:33,160 --> 00:10:37,750
that's a that's one of the infinite

00:10:35,530 --> 00:10:39,490
expansion cases and if it's if it's

00:10:37,750 --> 00:10:42,160
ancestor it's in the other case and so

00:10:39,490 --> 00:10:44,680
we can't you do this efficiently if we

00:10:42,160 --> 00:10:45,880
store the chain both as like a linked

00:10:44,680 --> 00:10:47,980
list and also a binary search tree

00:10:45,880 --> 00:10:51,520
because then we can do these two cases

00:10:47,980 --> 00:10:54,370
in logarithmic time and so basil does

00:10:51,520 --> 00:10:57,400
this and if you're curious you can look

00:10:54,370 --> 00:10:59,080
at these two source files and because of

00:10:57,400 --> 00:11:00,460
this you get incremental correctness

00:10:59,080 --> 00:11:03,220
completely for free and performance for

00:11:00,460 --> 00:11:05,230
free so we do minimal working under and

00:11:03,220 --> 00:11:07,090
quintal builds most at a time and so

00:11:05,230 --> 00:11:08,290
here's a crazy example where we have

00:11:07,090 --> 00:11:10,839
lots of layers

00:11:08,290 --> 00:11:12,429
of your Kusum links I I haven't seen any

00:11:10,839 --> 00:11:14,379
other tool that that gets this correct

00:11:12,429 --> 00:11:16,449
but basil does and we have a lesson from

00:11:14,379 --> 00:11:18,590
our message about what's going on all

00:11:16,449 --> 00:11:24,799
right thank you for your time

00:11:18,590 --> 00:11:24,799

YouTube URL: https://www.youtube.com/watch?v=EoYdWmMcqDs


