Title: BazelCon 2019 Day 2: Bazel Migration Patterns
Publication date: 2020-01-16
Playlist: BazelCon 2019
Description: 
	Alex Eagle and Greg Magolan, Google event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Alex Eagle, Greg Magolan;
Captions: 
	00:00:00,050 --> 00:00:05,130
okay well thanks everyone for coming

00:00:02,010 --> 00:00:07,350
it's got a good crowd here so that's a

00:00:05,130 --> 00:00:08,820
good thing and okay we're starting so

00:00:07,350 --> 00:00:11,730
we're gonna talk today about Basel

00:00:08,820 --> 00:00:13,259
migration patterns basically we want to

00:00:11,730 --> 00:00:14,910
talk about how to prove business value

00:00:13,259 --> 00:00:16,590
with a small investment a lot of

00:00:14,910 --> 00:00:18,960
companies doing my guests are now so I

00:00:16,590 --> 00:00:23,400
think this is probably important to

00:00:18,960 --> 00:00:26,519
address my name is Greg McGowan I am

00:00:23,400 --> 00:00:29,039
co-founder of aspect development and we

00:00:26,519 --> 00:00:31,859
as far as we know were maybe the first

00:00:29,039 --> 00:00:33,960
basil consulting company and we helped

00:00:31,859 --> 00:00:36,600
teams their small to large enterprises

00:00:33,960 --> 00:00:39,510
to migrate and plan their Basel

00:00:36,600 --> 00:00:40,739
migrations and we also worked on open

00:00:39,510 --> 00:00:47,520
source project migrations like the

00:00:40,739 --> 00:00:49,770
angular project yeah hi and I'm Alex I

00:00:47,520 --> 00:00:51,870
work at Google and Greg and I are the

00:00:49,770 --> 00:00:52,710
maintainer of rules nodejs although

00:00:51,870 --> 00:00:57,079
that's not what we're talking about

00:00:52,710 --> 00:00:57,079
today thank you

00:00:57,539 --> 00:01:02,399
right so how to migrate to Basel so this

00:01:00,480 --> 00:01:04,140
talk is based on a lot of experiences

00:01:02,399 --> 00:01:07,170
that we've all heard here at basil Kahn

00:01:04,140 --> 00:01:09,210
over the years and from from Greg and my

00:01:07,170 --> 00:01:11,000
interactions with enterprises who are

00:01:09,210 --> 00:01:13,170
adopting the things that we've worked on

00:01:11,000 --> 00:01:14,549
and the things we want to talk about is

00:01:13,170 --> 00:01:15,979
how do you sequence the work pick the

00:01:14,549 --> 00:01:17,700
right things to do when in what order

00:01:15,979 --> 00:01:20,430
while you're keeping your business

00:01:17,700 --> 00:01:22,710
running and keeping the partnership

00:01:20,430 --> 00:01:26,250
strong between engineering and

00:01:22,710 --> 00:01:27,659
management we're assuming in this talk

00:01:26,250 --> 00:01:28,740
that you've decided to do it basil my

00:01:27,659 --> 00:01:30,540
creation so we're not going to talk

00:01:28,740 --> 00:01:33,329
about what are the advantages why should

00:01:30,540 --> 00:01:35,100
you do it and this is not about any

00:01:33,329 --> 00:01:36,329
particular language so there's been a

00:01:35,100 --> 00:01:39,299
lot of talks about how to migrate a

00:01:36,329 --> 00:01:40,439
particular like from from maven we're

00:01:39,299 --> 00:01:42,210
not going to talk about those things but

00:01:40,439 --> 00:01:47,340
we're gonna try to keep it very general

00:01:42,210 --> 00:01:50,729
and and it's not a very technical talk

00:01:47,340 --> 00:01:52,140
we will show some code slides but it's

00:01:50,729 --> 00:01:55,079
really about how like a tech leader

00:01:52,140 --> 00:01:58,619
should approach this migration so let's

00:01:55,079 --> 00:02:00,030
start with how not to approach it and I

00:01:58,619 --> 00:02:01,560
think this is the way I would like to

00:02:00,030 --> 00:02:03,479
start a migration I'm as an engineer and

00:02:01,560 --> 00:02:06,270
I and I look at basil and I make a claim

00:02:03,479 --> 00:02:08,009
like well it's it's better I mean it's

00:02:06,270 --> 00:02:09,209
it's it's correct and it's hermetic and

00:02:08,009 --> 00:02:11,370
it's reproducible and those are

00:02:09,209 --> 00:02:12,420
properties our build should have so we

00:02:11,370 --> 00:02:13,930
should just do it so let me get my

00:02:12,420 --> 00:02:15,670
laptop and start coding

00:02:13,930 --> 00:02:17,260
or after we're finished with the

00:02:15,670 --> 00:02:18,909
migration I saw these talks at Faizal

00:02:17,260 --> 00:02:20,200
Khan and it's gonna be 90 percent faster

00:02:18,909 --> 00:02:23,769
so I'm gonna get my laptop and start

00:02:20,200 --> 00:02:25,510
coding it's the fun part or our current

00:02:23,769 --> 00:02:26,469
build system is just bad like I just I'm

00:02:25,510 --> 00:02:28,120
just tired of dealing with it I just

00:02:26,469 --> 00:02:29,560
want to replace it so those are all

00:02:28,120 --> 00:02:30,879
perfectly valid motivations for you to

00:02:29,560 --> 00:02:32,620
have as an engineer but they're not good

00:02:30,879 --> 00:02:37,209
justifications I think for doing a

00:02:32,620 --> 00:02:40,209
migration project because infrastructure

00:02:37,209 --> 00:02:41,829
teams are always very underfunded I know

00:02:40,209 --> 00:02:44,530
I feel this I imagine a lot of

00:02:41,829 --> 00:02:45,790
infrastructure teams do you look at the

00:02:44,530 --> 00:02:47,620
number of engineers that you're

00:02:45,790 --> 00:02:48,790
supporting and the sort of like business

00:02:47,620 --> 00:02:49,989
value that you provide and you feel like

00:02:48,790 --> 00:02:52,659
you should have twice as many people on

00:02:49,989 --> 00:02:54,220
your team just know how it works

00:02:52,659 --> 00:02:55,629
migration is probably going to take a

00:02:54,220 --> 00:02:58,150
long time we'll talk a little bit more

00:02:55,629 --> 00:02:59,470
about sort of what to expect there but

00:02:58,150 --> 00:03:00,849
very importantly this is a business

00:02:59,470 --> 00:03:02,620
critical service you have to have

00:03:00,849 --> 00:03:05,560
engineers able to write code and run the

00:03:02,620 --> 00:03:07,239
tests and keep commits landing and you

00:03:05,560 --> 00:03:08,739
can't have downtime in that system and

00:03:07,239 --> 00:03:12,129
so the build building test is like

00:03:08,739 --> 00:03:14,079
critical right and so when the business

00:03:12,129 --> 00:03:15,310
looks at your build and test as a

00:03:14,079 --> 00:03:17,409
business critical service they're not

00:03:15,310 --> 00:03:19,419
going to let you monkey with it in ways

00:03:17,409 --> 00:03:21,909
that that hurt the the velocity of your

00:03:19,419 --> 00:03:23,919
company and so funding this kind of

00:03:21,909 --> 00:03:25,659
migration effort is hard and your boss

00:03:23,919 --> 00:03:26,739
will tell you to stop and so this talk

00:03:25,659 --> 00:03:32,169
is really about how to keep your boss

00:03:26,739 --> 00:03:33,819
from telling you to stop thanks Alex so

00:03:32,169 --> 00:03:36,940
let's start with the right approaches to

00:03:33,819 --> 00:03:39,549
do this I think the first thing you

00:03:36,940 --> 00:03:41,620
gotta do is plan the discovery phase and

00:03:39,549 --> 00:03:43,359
a large base on migration is critical

00:03:41,620 --> 00:03:45,489
that's really answering the questions of

00:03:43,359 --> 00:03:47,560
why are you doing it when are you doing

00:03:45,489 --> 00:03:49,659
it and how are you doing it this is

00:03:47,560 --> 00:03:52,780
where you want to de-risk before you

00:03:49,659 --> 00:03:54,370
start your main effort some things you

00:03:52,780 --> 00:03:55,919
do at this stage is you would do an

00:03:54,370 --> 00:03:57,879
itinerary of your current build system

00:03:55,919 --> 00:04:00,669
identify your biggest productivity

00:03:57,879 --> 00:04:01,780
drains and costs which is where you're

00:04:00,669 --> 00:04:04,599
gonna get the most value from this

00:04:01,780 --> 00:04:06,400
migration you want to find your the

00:04:04,599 --> 00:04:07,840
low-hanging fruit maybe the steps that

00:04:06,400 --> 00:04:10,689
are easiest you can get done really

00:04:07,840 --> 00:04:12,069
quickly and easily and another thing you

00:04:10,689 --> 00:04:13,419
could do at this point is identify some

00:04:12,069 --> 00:04:17,650
missing integration test that you have

00:04:13,419 --> 00:04:19,419
in your system basically so easier if

00:04:17,650 --> 00:04:20,620
you're working between teams and

00:04:19,419 --> 00:04:22,090
everyone's building a Basel to run these

00:04:20,620 --> 00:04:23,710
integration tests so maybe there's some

00:04:22,090 --> 00:04:25,810
coverage you can add that would add a

00:04:23,710 --> 00:04:28,000
lot of value to your to your development

00:04:25,810 --> 00:04:30,730
workflow

00:04:28,000 --> 00:04:34,420
you also at this point it's important to

00:04:30,730 --> 00:04:36,370
size the effort typically we see that

00:04:34,420 --> 00:04:39,850
migrations are long-term greater than 12

00:04:36,370 --> 00:04:41,140
months greater than 1.5 Engineers BMW I

00:04:39,850 --> 00:04:43,660
don't think I saw the talk earlier but

00:04:41,140 --> 00:04:45,280
they had a great example where they did

00:04:43,660 --> 00:04:47,440
a really strong discovery phase they put

00:04:45,280 --> 00:04:49,510
like five or six engineers on for four

00:04:47,440 --> 00:04:51,760
months figure out all of the complicated

00:04:49,510 --> 00:04:53,080
bits of their migration and when they're

00:04:51,760 --> 00:04:54,820
sure that they could do it then they

00:04:53,080 --> 00:04:57,460
they stormed everybody they put a

00:04:54,820 --> 00:04:59,170
hundred people on for a month which they

00:04:57,460 --> 00:05:05,590
got those done in about five months with

00:04:59,170 --> 00:05:08,140
that strategy yeah so the last thing I

00:05:05,590 --> 00:05:09,220
do is at this point if you if you know

00:05:08,140 --> 00:05:10,690
you're gonna be in for a long term

00:05:09,220 --> 00:05:13,480
regression is establish milestones along

00:05:10,690 --> 00:05:15,400
the way that make business sense this is

00:05:13,480 --> 00:05:17,650
important because you might want to halt

00:05:15,400 --> 00:05:18,880
your migration partway if maybe the next

00:05:17,650 --> 00:05:20,920
step doesn't make business sense at that

00:05:18,880 --> 00:05:22,360
point or if you just want to reallocate

00:05:20,920 --> 00:05:24,720
resources so if you do stop halfway

00:05:22,360 --> 00:05:27,900
you're still in a happy place you're not

00:05:24,720 --> 00:05:30,820
you're not killing your development team

00:05:27,900 --> 00:05:33,340
so what are the right incremental steps

00:05:30,820 --> 00:05:34,650
to that Bank business sense I would say

00:05:33,340 --> 00:05:38,500
that these fall into three categories

00:05:34,650 --> 00:05:40,240
first you want to take steps to maximize

00:05:38,500 --> 00:05:41,470
and expertise the benefits or expedite

00:05:40,240 --> 00:05:43,660
the benefits of this migration which

00:05:41,470 --> 00:05:44,950
means really find out what's what's

00:05:43,660 --> 00:05:46,720
going to give you the value early and do

00:05:44,950 --> 00:05:48,010
those steps first that's a good way to

00:05:46,720 --> 00:05:51,040
convince commit to your leadership and

00:05:48,010 --> 00:05:52,720
your devs about what you're doing second

00:05:51,040 --> 00:05:56,020
category I would say is you take steps

00:05:52,720 --> 00:05:57,820
to mitigate and delay risks which this

00:05:56,020 --> 00:05:59,020
is probably frequently overlooked with

00:05:57,820 --> 00:06:00,730
people they just get in and start coding

00:05:59,020 --> 00:06:03,130
away but if you plan ahead a little bit

00:06:00,730 --> 00:06:05,380
I knew I'd find those rest early then

00:06:03,130 --> 00:06:10,390
you can take action to mitigate those

00:06:05,380 --> 00:06:12,820
r/c steps and the third category is you

00:06:10,390 --> 00:06:15,070
want to try and minify or minimize and

00:06:12,820 --> 00:06:17,320
defer the costs of this migration which

00:06:15,070 --> 00:06:19,780
a couple of examples there is training

00:06:17,320 --> 00:06:22,000
costs if you change your entire

00:06:19,780 --> 00:06:23,380
development workflow on day one that's

00:06:22,000 --> 00:06:25,540
gonna have a huge cost so you might want

00:06:23,380 --> 00:06:27,130
to wait for if you are going to do that

00:06:25,540 --> 00:06:29,440
wait later on or just try and keep your

00:06:27,130 --> 00:06:32,170
development workflow the same also you

00:06:29,440 --> 00:06:34,210
might want to defer the complex parts of

00:06:32,170 --> 00:06:35,290
your build system for later because

00:06:34,210 --> 00:06:37,480
that's gonna incur the cost through

00:06:35,290 --> 00:06:39,810
having to relearn your entire legacy

00:06:37,480 --> 00:06:39,810
system

00:06:39,930 --> 00:06:46,810
so apologies to mathematicians in the

00:06:43,900 --> 00:06:48,520
room who who would like a rigorous

00:06:46,810 --> 00:06:50,350
treatment of the grading ascent problem

00:06:48,520 --> 00:06:52,060
this is not that but I think it's a

00:06:50,350 --> 00:06:53,500
really useful mental model for me in

00:06:52,060 --> 00:06:56,290
thinking about like why we're taking

00:06:53,500 --> 00:06:58,360
this this approach so grading descent

00:06:56,290 --> 00:07:01,060
means you want to get to the top of one

00:06:58,360 --> 00:07:04,090
of the hills and you don't have any idea

00:07:01,060 --> 00:07:05,320
where you are or where action the top of

00:07:04,090 --> 00:07:06,430
the hill is all you can tell is which

00:07:05,320 --> 00:07:08,440
direction is uphill from where you are

00:07:06,430 --> 00:07:09,820
right now and so this is you know you

00:07:08,440 --> 00:07:11,170
you there's algorithms for this where

00:07:09,820 --> 00:07:12,580
you take a small step and then you

00:07:11,170 --> 00:07:14,260
recalculate which way is uphill and you

00:07:12,580 --> 00:07:16,870
keep going you get to the top of some

00:07:14,260 --> 00:07:18,640
hill and I think this is a lot like the

00:07:16,870 --> 00:07:19,930
migration steps because if you imagine

00:07:18,640 --> 00:07:23,560
here that the height of the hill is this

00:07:19,930 --> 00:07:26,140
sort of benefit ratio to the risks and

00:07:23,560 --> 00:07:28,480
costs that Greg is talking about then

00:07:26,140 --> 00:07:29,590
the like as you go uphill then things

00:07:28,480 --> 00:07:31,870
are improving for your business your

00:07:29,590 --> 00:07:35,560
boss is getting happier going downhill

00:07:31,870 --> 00:07:37,480
is making things worse and the longer

00:07:35,560 --> 00:07:38,860
you stay downhill the more your business

00:07:37,480 --> 00:07:41,740
is being affected by the migration that

00:07:38,860 --> 00:07:43,330
you're working on and so even though an

00:07:41,740 --> 00:07:45,550
in gradient ascent you don't get to the

00:07:43,330 --> 00:07:47,290
global maximum I think that's actually

00:07:45,550 --> 00:07:48,370
modeling the business reality which is

00:07:47,290 --> 00:07:49,480
that you have to keep improving the

00:07:48,370 --> 00:07:51,850
build you can't make it worse at least

00:07:49,480 --> 00:07:53,560
not for a very long time and so if you

00:07:51,850 --> 00:07:55,360
think you can get downhill and then back

00:07:53,560 --> 00:07:57,010
up really quickly before it impacts the

00:07:55,360 --> 00:07:59,080
business maybe within one release cycle

00:07:57,010 --> 00:08:01,450
then maybe that's possible

00:07:59,080 --> 00:08:02,560
but I think I think if you get stuck

00:08:01,450 --> 00:08:04,540
down in one of these valleys that's

00:08:02,560 --> 00:08:08,500
that's when you've you've totally gone

00:08:04,540 --> 00:08:09,760
off of course and there's I think maybe

00:08:08,500 --> 00:08:11,260
we've all seen sort of had the

00:08:09,760 --> 00:08:12,730
experience of being like in that bad

00:08:11,260 --> 00:08:14,230
state for too long and like we're like

00:08:12,730 --> 00:08:15,880
hey no no no we will we're gonna get

00:08:14,230 --> 00:08:17,800
back to the good State I promise and and

00:08:15,880 --> 00:08:21,430
you just it's really hard to defend

00:08:17,800 --> 00:08:23,530
yourself when you're in that position ok

00:08:21,430 --> 00:08:26,020
so what we're gonna do next we're gonna

00:08:23,530 --> 00:08:27,340
go through benefits and then risks and

00:08:26,020 --> 00:08:30,070
then costs and we're gonna try to

00:08:27,340 --> 00:08:31,360
enumerate them this is not the complete

00:08:30,070 --> 00:08:32,560
list of these things these are some that

00:08:31,360 --> 00:08:33,849
we've come up with and I think it's

00:08:32,560 --> 00:08:36,040
important in your organization to think

00:08:33,849 --> 00:08:39,700
about what things you see as being

00:08:36,040 --> 00:08:41,320
benefits risks and costs so let's just

00:08:39,700 --> 00:08:43,900
let's step through some of them that

00:08:41,320 --> 00:08:45,190
we've thought of and in particular like

00:08:43,900 --> 00:08:46,840
like Greg said we want to get the

00:08:45,190 --> 00:08:49,690
benefits sooner we want to make the

00:08:46,840 --> 00:08:51,930
benefits bigger so so to expedite the

00:08:49,690 --> 00:08:53,760
the benefit of catch bugs sooner

00:08:51,930 --> 00:08:55,080
we all know that one of the advantages

00:08:53,760 --> 00:08:56,820
of using basil is that it can do

00:08:55,080 --> 00:08:58,890
integration testing because it can build

00:08:56,820 --> 00:09:00,210
all of your code in multiple languages

00:08:58,890 --> 00:09:01,560
and so you can write an integration test

00:09:00,210 --> 00:09:04,440
that's testing it head your front end

00:09:01,560 --> 00:09:05,910
your back end everything together and so

00:09:04,440 --> 00:09:07,560
if you add some of those integration

00:09:05,910 --> 00:09:09,450
tests first then you can get the benefit

00:09:07,560 --> 00:09:12,510
of catching those bugs during your

00:09:09,450 --> 00:09:13,920
migration project and to maximize the

00:09:12,510 --> 00:09:16,950
benefit from this it's really more like

00:09:13,920 --> 00:09:18,960
proving the value of your migration one

00:09:16,950 --> 00:09:20,580
thing you can do is to actually catch a

00:09:18,960 --> 00:09:23,220
critical bug so this is like data loss

00:09:20,580 --> 00:09:25,500
privacy revenue impact and if Google

00:09:23,220 --> 00:09:27,000
takes these bugs very seriously and if

00:09:25,500 --> 00:09:28,350
you and if you catch this bug because

00:09:27,000 --> 00:09:30,240
you added an integration test that basil

00:09:28,350 --> 00:09:31,970
enabled that's a great way to justify

00:09:30,240 --> 00:09:34,710
why you're working on this project

00:09:31,970 --> 00:09:37,110
similarly there may have been past bugs

00:09:34,710 --> 00:09:38,640
that were not caught but you can claim

00:09:37,110 --> 00:09:40,170
with some confidence that if you had the

00:09:38,640 --> 00:09:41,640
new integration tests that basil that

00:09:40,170 --> 00:09:42,870
you add then you would have caught those

00:09:41,640 --> 00:09:44,460
bugs and so you can look through your

00:09:42,870 --> 00:09:46,260
post mortems for action items and say

00:09:44,460 --> 00:09:47,610
okay we're doing this project because we

00:09:46,260 --> 00:09:48,690
had this post-mortem and the action item

00:09:47,610 --> 00:09:53,640
said we needed to have these kind of

00:09:48,690 --> 00:09:56,850
tests and basil lets us write them next

00:09:53,640 --> 00:09:58,050
benefit faster see I turn around I think

00:09:56,850 --> 00:10:00,630
we've this is one of the numbers that we

00:09:58,050 --> 00:10:02,310
most frequently see on the main stage of

00:10:00,630 --> 00:10:06,780
basil con is how much faster people's

00:10:02,310 --> 00:10:08,550
people CI can be obviously remote cache

00:10:06,780 --> 00:10:10,620
and execution is one of the main drivers

00:10:08,550 --> 00:10:12,210
of those those benefits so you should

00:10:10,620 --> 00:10:13,860
set those up pretty early so that you

00:10:12,210 --> 00:10:15,120
aren't running in a state where you say

00:10:13,860 --> 00:10:16,770
basil is great the reason we don't see

00:10:15,120 --> 00:10:18,540
CI numbers yet is that we haven't wired

00:10:16,770 --> 00:10:20,190
this up is you'll get sort of the wrong

00:10:18,540 --> 00:10:22,890
first impression from your users if your

00:10:20,190 --> 00:10:24,660
CI isn't fast from the beginning and

00:10:22,890 --> 00:10:27,450
then to maximize this again this is

00:10:24,660 --> 00:10:29,370
maximizing really your your your sales

00:10:27,450 --> 00:10:30,900
pitch or your you know defending the

00:10:29,370 --> 00:10:32,310
project make sure you have the before

00:10:30,900 --> 00:10:34,350
and after numbers make sure that they're

00:10:32,310 --> 00:10:36,900
comparable this was this came up in

00:10:34,350 --> 00:10:38,490
Rick's talk yesterday understand what

00:10:36,900 --> 00:10:42,750
the benefit is from from switching over

00:10:38,490 --> 00:10:45,480
your CI faster local development

00:10:42,750 --> 00:10:47,070
obviously is related one thing you can

00:10:45,480 --> 00:10:51,660
do to maximize this is just to learn

00:10:47,070 --> 00:10:52,830
more about flags that basil has so disk

00:10:51,660 --> 00:10:54,600
cache I didn't know about for the

00:10:52,830 --> 00:10:55,920
longest time and then some people on the

00:10:54,600 --> 00:10:57,240
angular team said hey like this allows

00:10:55,920 --> 00:10:59,360
us to keep our artifacts when we switch

00:10:57,240 --> 00:11:03,270
branches you should know those things

00:10:59,360 --> 00:11:04,320
and and and make sure that in one way or

00:11:03,270 --> 00:11:05,580
another you're spreading that knowledge

00:11:04,320 --> 00:11:07,279
that developers on your team

00:11:05,580 --> 00:11:09,600
so that it's not just little pockets of

00:11:07,279 --> 00:11:12,660
fast builds among everybody else being

00:11:09,600 --> 00:11:13,740
slow the developers to be able to read

00:11:12,660 --> 00:11:14,910
from the remote cache and a lot of

00:11:13,740 --> 00:11:16,410
setups I've seen people aren't don't

00:11:14,910 --> 00:11:17,880
trust developers to write to the remote

00:11:16,410 --> 00:11:19,140
cache because of course you can make a

00:11:17,880 --> 00:11:20,490
change locally that causes an on

00:11:19,140 --> 00:11:23,250
hermeticity and then you can poison the

00:11:20,490 --> 00:11:25,140
cache and also if you can try to collect

00:11:23,250 --> 00:11:26,490
profiles from the builds out in the wild

00:11:25,140 --> 00:11:27,839
so that you know whether developers are

00:11:26,490 --> 00:11:30,300
actually having faster builds or not

00:11:27,839 --> 00:11:31,320
this is something Greg and I are

00:11:30,300 --> 00:11:36,209
actually working on right now for the

00:11:31,320 --> 00:11:37,800
angular team mono repo is something it's

00:11:36,209 --> 00:11:39,060
closely affiliated with basil basil

00:11:37,800 --> 00:11:40,529
doesn't require that you be on a mono

00:11:39,060 --> 00:11:41,910
repo of course your workspace can have

00:11:40,529 --> 00:11:44,490
local repository pointing to other

00:11:41,910 --> 00:11:46,260
things but basil does make it possible

00:11:44,490 --> 00:11:48,360
to do mono repo in the sense that it's

00:11:46,260 --> 00:11:49,529
computationally feasible now to say I

00:11:48,360 --> 00:11:50,730
just run the test every time there's a

00:11:49,529 --> 00:11:52,140
change because I'm only going to run the

00:11:50,730 --> 00:11:54,089
affected ones and so it's kind of hard

00:11:52,140 --> 00:11:58,470
to do mono repo without a bill to like

00:11:54,089 --> 00:12:00,420
basil so I think mono repo is a

00:11:58,470 --> 00:12:02,310
long-term thing the way you can expedite

00:12:00,420 --> 00:12:04,290
this in my mind is simply to prevent the

00:12:02,310 --> 00:12:07,950
next new repo from being created so that

00:12:04,290 --> 00:12:09,570
your problems not getting worse that's a

00:12:07,950 --> 00:12:12,839
lot easier than moving code that you

00:12:09,570 --> 00:12:14,339
already have and then to maximize this

00:12:12,839 --> 00:12:15,600
one since it's not tied directly with

00:12:14,339 --> 00:12:16,860
basil it's not that you can do something

00:12:15,600 --> 00:12:18,810
in basil to make your mono repo better

00:12:16,860 --> 00:12:20,279
necessarily but you're gonna have to

00:12:18,810 --> 00:12:21,630
explain the benefits of mono repo to

00:12:20,279 --> 00:12:23,700
your organization and I don't think that

00:12:21,630 --> 00:12:27,000
I'm think that your basil bill by itself

00:12:23,700 --> 00:12:31,290
is going to do that for you and the last

00:12:27,000 --> 00:12:34,440
one is is about the developer experience

00:12:31,290 --> 00:12:35,790
that your engineers have so you your

00:12:34,440 --> 00:12:37,170
current build might be a bunch of

00:12:35,790 --> 00:12:38,579
spaghetti and only a few people know how

00:12:37,170 --> 00:12:40,140
to edit it and so if you're doing a

00:12:38,579 --> 00:12:41,399
programming task that requires modifying

00:12:40,140 --> 00:12:43,290
the build and you're very sad in its

00:12:41,399 --> 00:12:45,360
heart the way I've heard this described

00:12:43,290 --> 00:12:47,220
in basil Khan is democratize the build

00:12:45,360 --> 00:12:49,140
so everybody should be empowered to edit

00:12:47,220 --> 00:12:50,640
build files you should do it whatever

00:12:49,140 --> 00:12:52,110
mechanism your company has to make

00:12:50,640 --> 00:12:53,640
engineers feel empowered to sort of like

00:12:52,110 --> 00:12:55,079
you know you own these like the stuff in

00:12:53,640 --> 00:12:57,390
here is your business it's not somebody

00:12:55,079 --> 00:12:59,190
else is supposed to fix it for you and

00:12:57,390 --> 00:13:01,079
obviously the way to get the most

00:12:59,190 --> 00:13:02,279
benefit here is to find the parts of

00:13:01,079 --> 00:13:03,870
your legacy build that you are both

00:13:02,279 --> 00:13:05,070
touching often and that are difficult to

00:13:03,870 --> 00:13:08,250
change so they're costing you the most

00:13:05,070 --> 00:13:09,269
time and try to remove those first so

00:13:08,250 --> 00:13:15,860
I'll hand it off to Greg to talk about

00:13:09,269 --> 00:13:19,880
risks thanks Alex

00:13:15,860 --> 00:13:23,630
so let's talk about the steps you need

00:13:19,880 --> 00:13:25,040
to take to minimize your risks and what

00:13:23,630 --> 00:13:28,730
pitfalls in robots you will find along

00:13:25,040 --> 00:13:31,370
the way on your migration so these are

00:13:28,730 --> 00:13:32,720
equally if not more important than the

00:13:31,370 --> 00:13:33,800
benefits because these are the things

00:13:32,720 --> 00:13:35,600
that you ran into that will completely

00:13:33,800 --> 00:13:40,400
derail your project frustrated

00:13:35,600 --> 00:13:43,010
developers and yeah probably all been

00:13:40,400 --> 00:13:44,990
there so one of the reasons I wrote into

00:13:43,010 --> 00:13:48,680
is you depend on an ecosystem with very

00:13:44,990 --> 00:13:51,680
pool basal support for example Ruby Nix

00:13:48,680 --> 00:13:53,810
or maybe you're on dotnet framework you

00:13:51,680 --> 00:13:55,190
can delay these risk by planning to

00:13:53,810 --> 00:13:57,440
migrate these parts of your gold later

00:13:55,190 --> 00:14:00,470
or if you do need to migrate them right

00:13:57,440 --> 00:14:02,630
away you can mitigate the risk by you

00:14:00,470 --> 00:14:05,030
might commit resources to these rules

00:14:02,630 --> 00:14:06,800
for example coinbase is supporting roles

00:14:05,030 --> 00:14:08,390
Ruby and Wix is supporting a little

00:14:06,800 --> 00:14:08,780
Scala and that's worked really well for

00:14:08,390 --> 00:14:11,780
them

00:14:08,780 --> 00:14:13,490
it also become basil evangelists or you

00:14:11,780 --> 00:14:14,750
might also do some refactoring which

00:14:13,490 --> 00:14:16,100
means that maybe you've wanted to move

00:14:14,750 --> 00:14:18,590
away for a tool that's not supported

00:14:16,100 --> 00:14:20,030
well on on basil and you could do that

00:14:18,590 --> 00:14:23,360
before your migration so your migration

00:14:20,030 --> 00:14:25,960
is a lot easier another risk is you

00:14:23,360 --> 00:14:28,850
depend on rules with poor window support

00:14:25,960 --> 00:14:30,590
so some rule sets have bugs that are

00:14:28,850 --> 00:14:32,450
window specific or maybe just have poor

00:14:30,590 --> 00:14:34,670
support in general again you could delay

00:14:32,450 --> 00:14:36,770
these migration steps you could possibly

00:14:34,670 --> 00:14:38,660
migrate you build on CI first and need

00:14:36,770 --> 00:14:41,480
your local development experience on

00:14:38,660 --> 00:14:43,760
Windows if you see eyes Linux if you do

00:14:41,480 --> 00:14:45,200
need to migrate your windows builds

00:14:43,760 --> 00:14:47,210
right away you can commit resources to

00:14:45,200 --> 00:14:48,830
resolving these issues there's sometimes

00:14:47,210 --> 00:14:51,770
trivial like a path issue on windows

00:14:48,830 --> 00:14:54,110
rules which I've worked on one thing

00:14:51,770 --> 00:14:55,490
that's key is if you turn on files in

00:14:54,110 --> 00:14:58,010
with some windows but by default Windows

00:14:55,490 --> 00:14:59,660
only has junctions and links and basil

00:14:58,010 --> 00:15:01,220
will work a lot better with fellow some

00:14:59,660 --> 00:15:02,360
links and some people just don't know

00:15:01,220 --> 00:15:04,850
that that's that's a pretty trivial

00:15:02,360 --> 00:15:07,490
thing or you can have your Windows and

00:15:04,850 --> 00:15:11,050
Mac devs build on build on docker that's

00:15:07,490 --> 00:15:13,400
another option if that works for you

00:15:11,050 --> 00:15:14,990
another risk is your project has some

00:15:13,400 --> 00:15:19,310
unique property that doesn't work with

00:15:14,990 --> 00:15:20,930
basil so to mitigate this you might want

00:15:19,310 --> 00:15:22,580
to do a prototype first BMW did a lot of

00:15:20,930 --> 00:15:25,730
prototyping on their build as they were

00:15:22,580 --> 00:15:27,410
doing that for month discovery before is

00:15:25,730 --> 00:15:29,330
a migration that would prove the

00:15:27,410 --> 00:15:29,800
feasibility of it you might get into the

00:15:29,330 --> 00:15:30,970
situation

00:15:29,800 --> 00:15:33,940
where you do have to write custom rules

00:15:30,970 --> 00:15:35,620
which is which is great it's actually

00:15:33,940 --> 00:15:37,060
quite idiomatic to be writing star lark

00:15:35,620 --> 00:15:41,170
and it's nice to have someone on your

00:15:37,060 --> 00:15:42,820
team that knows basil that much you

00:15:41,170 --> 00:15:45,580
might get pushback from the leaders in

00:15:42,820 --> 00:15:47,529
your organization and to mitigate this I

00:15:45,580 --> 00:15:49,450
think the key is to really prove the

00:15:47,529 --> 00:15:51,160
value ahead of time that's that's what

00:15:49,450 --> 00:15:53,829
the leaders never want to hear so that

00:15:51,160 --> 00:15:55,180
you can start a migration you can point

00:15:53,829 --> 00:15:57,100
to success stories in your community

00:15:55,180 --> 00:15:58,390
that may apply to you there's a lot of

00:15:57,100 --> 00:16:01,420
great examples out there and talks in

00:15:58,390 --> 00:16:02,649
other conferences you want to this is

00:16:01,420 --> 00:16:04,000
where discovery comes in again you want

00:16:02,649 --> 00:16:06,040
to identify the biggest productivity

00:16:04,000 --> 00:16:08,260
drains and costs early on so that you

00:16:06,040 --> 00:16:09,730
could prove what the value is gonna be

00:16:08,260 --> 00:16:11,860
and show how you can solve these first

00:16:09,730 --> 00:16:12,910
and you can also identify just the

00:16:11,860 --> 00:16:14,290
low-hanging fruit what are the easy

00:16:12,910 --> 00:16:16,510
steps in your migration that you could

00:16:14,290 --> 00:16:18,160
do maybe get room with cash on early you

00:16:16,510 --> 00:16:21,730
maybe get rheumatic sexy even going

00:16:18,160 --> 00:16:24,670
right away if that doesn't work you

00:16:21,730 --> 00:16:29,050
could commit to a small team to do a

00:16:24,670 --> 00:16:30,279
longer discovery phase which is less

00:16:29,050 --> 00:16:31,390
expensive than going for a free loan

00:16:30,279 --> 00:16:33,700
migration and you want to prove the

00:16:31,390 --> 00:16:36,700
feasibility before you you start the

00:16:33,700 --> 00:16:38,050
full-blown project on the flip side you

00:16:36,700 --> 00:16:40,000
might as well get pushback from your

00:16:38,050 --> 00:16:41,350
developers it's with basil it's it's

00:16:40,000 --> 00:16:43,740
pretty easy to make your dev experience

00:16:41,350 --> 00:16:47,020
worse if you aren't careful

00:16:43,740 --> 00:16:48,670
you can do it unintentionally Wix

00:16:47,020 --> 00:16:50,110
initially sped up see I like we heard

00:16:48,670 --> 00:16:52,149
from more but their deaf experience

00:16:50,110 --> 00:16:53,890
decreased but then they turned around

00:16:52,149 --> 00:16:55,120
and they really focus on the Deaf

00:16:53,890 --> 00:17:00,040
experience which worked great for them

00:16:55,120 --> 00:17:01,329
to mitigate this you can fit your basil

00:17:00,040 --> 00:17:03,339
into your existing workflows have a glue

00:17:01,329 --> 00:17:04,870
layer so if your developers are typing

00:17:03,339 --> 00:17:07,000
NPM tests you could have them keep

00:17:04,870 --> 00:17:08,500
typing NPM tests and that would work

00:17:07,000 --> 00:17:11,439
just the same for them I'm trying like a

00:17:08,500 --> 00:17:14,230
transparent you could also start with

00:17:11,439 --> 00:17:15,730
the CI as I mentioned earlier and you

00:17:14,230 --> 00:17:17,800
can keep parallel build system for a

00:17:15,730 --> 00:17:19,270
while so that developers can flip back

00:17:17,800 --> 00:17:22,990
and forth if they're having frustrations

00:17:19,270 --> 00:17:24,280
at the basic build system and I think

00:17:22,990 --> 00:17:25,870
it's good the plan to turn on remote

00:17:24,280 --> 00:17:27,370
cache and execution early for local

00:17:25,870 --> 00:17:29,650
developments the devs can actually see

00:17:27,370 --> 00:17:32,860
an upgrade in their experience when they

00:17:29,650 --> 00:17:34,450
search the basil you could also

00:17:32,860 --> 00:17:36,309
introduce a bug with basil it might be

00:17:34,450 --> 00:17:37,570
that because your bills changed there's

00:17:36,309 --> 00:17:41,470
an art if there's a difference in your

00:17:37,570 --> 00:17:43,030
binary artifact to mitigate this you you

00:17:41,470 --> 00:17:43,630
want to change as little as possible so

00:17:43,030 --> 00:17:45,070
if your

00:17:43,630 --> 00:17:46,570
already changed into basil don't change

00:17:45,070 --> 00:17:48,190
your toolchain try and have basil

00:17:46,570 --> 00:17:50,530
Colliers this thing build with all the

00:17:48,190 --> 00:17:51,970
same configuration and settings that you

00:17:50,530 --> 00:17:56,080
have don't switch from web back the roll

00:17:51,970 --> 00:17:58,420
up for example if you I don't know if

00:17:56,080 --> 00:17:59,620
you guys are you saw the space looks not

00:17:58,420 --> 00:18:01,540
two years ago but that was an extreme

00:17:59,620 --> 00:18:03,730
example where they actually they're

00:18:01,540 --> 00:18:05,260
shipping he's these built on rocket so

00:18:03,730 --> 00:18:06,460
they did bitwise comparison to make sure

00:18:05,260 --> 00:18:08,140
along the way that every single

00:18:06,460 --> 00:18:09,970
configuration flag and the compiler was

00:18:08,140 --> 00:18:11,500
the same and every single bit and the

00:18:09,970 --> 00:18:14,050
final artifact was the same before they

00:18:11,500 --> 00:18:16,240
finally switched their build they they

00:18:14,050 --> 00:18:17,470
did no major restructuring they do not

00:18:16,240 --> 00:18:21,870
get bogged down in improvements there

00:18:17,470 --> 00:18:24,220
their goal was just have bitwise parity

00:18:21,870 --> 00:18:25,750
now if you do that you probably have to

00:18:24,220 --> 00:18:27,580
prepare to learn relearn the details

00:18:25,750 --> 00:18:30,280
agrees it's a system quite well so you

00:18:27,580 --> 00:18:31,930
can reproduce it you might have two

00:18:30,280 --> 00:18:35,560
point five or three engineers working on

00:18:31,930 --> 00:18:38,260
this on a time the angular team is a

00:18:35,560 --> 00:18:40,000
less extreme example of this when they

00:18:38,260 --> 00:18:41,680
when they upgraded the basil they wanted

00:18:40,000 --> 00:18:43,570
to reproduce a package format and they

00:18:41,680 --> 00:18:44,800
had their busy build and their gulp

00:18:43,570 --> 00:18:47,050
build running at the same time and they

00:18:44,800 --> 00:18:48,880
had a comparison script and they checked

00:18:47,050 --> 00:18:50,350
the results if the difference was was

00:18:48,880 --> 00:18:51,640
saying they ran their integration test

00:18:50,350 --> 00:18:54,640
and then they they flipped the switch at

00:18:51,640 --> 00:18:55,930
that point as an aside on SpaceX I'm

00:18:54,640 --> 00:18:58,060
actually very excited to see the first

00:18:55,930 --> 00:19:00,130
basil astronaut go to space next year

00:18:58,060 --> 00:19:01,780
just like we had the first basil car

00:19:00,130 --> 00:19:08,050
coming up in two couple years from BMW

00:19:01,780 --> 00:19:11,740
right so this is this is actually a shot

00:19:08,050 --> 00:19:13,690
of the angular angular package.json

00:19:11,740 --> 00:19:15,460
during the migration so you can see

00:19:13,690 --> 00:19:17,680
there's a basil step and a go up step

00:19:15,460 --> 00:19:19,210
and they had scripts to compare which is

00:19:17,680 --> 00:19:20,620
how they they got to the point where

00:19:19,210 --> 00:19:24,610
they're satisfied that they could flip

00:19:20,620 --> 00:19:26,380
over another problem is migration might

00:19:24,610 --> 00:19:28,930
just be hard and your team does not have

00:19:26,380 --> 00:19:30,310
the expertise necessary to do it you

00:19:28,930 --> 00:19:32,050
could do the easy steps first they gain

00:19:30,310 --> 00:19:33,490
experience and that's one way to go and

00:19:32,050 --> 00:19:34,840
as your team gets more comfortable with

00:19:33,490 --> 00:19:37,540
that the migration you can have under

00:19:34,840 --> 00:19:40,090
more complex ones or you can get up

00:19:37,540 --> 00:19:41,950
there's a Basel experts page and you can

00:19:40,090 --> 00:19:46,230
go to slack and go to hashtag jobs that

00:19:41,950 --> 00:19:46,230
slack and someone pick up the phone

00:19:48,580 --> 00:19:53,960
okay so our last category of things to

00:19:52,130 --> 00:19:58,159
enumerate his costs there are fewer of

00:19:53,960 --> 00:20:01,220
these so the first cost is retraining

00:19:58,159 --> 00:20:03,049
your engineers this is this is a cost

00:20:01,220 --> 00:20:05,870
you will incur we're not saying that

00:20:03,049 --> 00:20:07,010
like a training won't be necessary basil

00:20:05,870 --> 00:20:08,210
is going to be a leaky abstraction

00:20:07,010 --> 00:20:09,740
Engineers on your team are gonna see a

00:20:08,210 --> 00:20:10,640
failed CI with a bunch of basil stuff in

00:20:09,740 --> 00:20:12,950
it and they're gonna know that it's

00:20:10,640 --> 00:20:14,120
there no matter what you do but you can

00:20:12,950 --> 00:20:16,880
make this a lot you can reduce this a

00:20:14,120 --> 00:20:18,260
lot I think so one as Greg mentioned we

00:20:16,880 --> 00:20:19,940
want to try to keep things the same and

00:20:18,260 --> 00:20:21,500
that includes with the developers

00:20:19,940 --> 00:20:23,900
interface to the build system as much as

00:20:21,500 --> 00:20:25,280
possible we want to keep it the same so

00:20:23,900 --> 00:20:27,080
an example here I got to go visit

00:20:25,280 --> 00:20:30,289
Capital One they're working on migrating

00:20:27,080 --> 00:20:32,090
iOS development and the iOS developers

00:20:30,289 --> 00:20:33,530
are used to being in Xcode and so they

00:20:32,090 --> 00:20:35,330
spend some time with tulsi which is a

00:20:33,530 --> 00:20:36,860
project to generate your Xcode

00:20:35,330 --> 00:20:38,960
configuration from Basel and they're

00:20:36,860 --> 00:20:41,179
working through some improvements there

00:20:38,960 --> 00:20:43,010
to make the Xcode development experience

00:20:41,179 --> 00:20:46,940
not degraded by the fact that Basel is

00:20:43,010 --> 00:20:48,860
also is also present the other thing I

00:20:46,940 --> 00:20:51,350
think is useful is that as you develop

00:20:48,860 --> 00:20:53,059
those early experts as Greg said try to

00:20:51,350 --> 00:20:54,980
make there be a path like an escalation

00:20:53,059 --> 00:20:56,510
path within your org so that everyone

00:20:54,980 --> 00:20:58,070
who's having trouble knows that these

00:20:56,510 --> 00:20:59,780
are the experts who already know Basel I

00:20:58,070 --> 00:21:01,340
mean maybe this is kind of obvious but

00:20:59,780 --> 00:21:03,620
in some organizations you don't have the

00:21:01,340 --> 00:21:04,760
kind of transparency and then those

00:21:03,620 --> 00:21:08,120
people can provide the training on

00:21:04,760 --> 00:21:09,590
demand because I know I offered a four

00:21:08,120 --> 00:21:11,059
hour training to the angular team about

00:21:09,590 --> 00:21:13,010
how to do basil and their eyes glazed

00:21:11,059 --> 00:21:14,299
over after the first 20 minutes and then

00:21:13,010 --> 00:21:15,770
we needed to keep giving them more

00:21:14,299 --> 00:21:16,970
on-demand training as we went because it

00:21:15,770 --> 00:21:19,159
was weeks or months later that they

00:21:16,970 --> 00:21:20,480
encountered a problem and just hadn't

00:21:19,159 --> 00:21:23,360
had a chance to sort of use the training

00:21:20,480 --> 00:21:25,909
that they had gotten yet so we trained

00:21:23,360 --> 00:21:27,470
along the way or just or just hire

00:21:25,909 --> 00:21:34,130
another hire the training people to come

00:21:27,470 --> 00:21:35,059
back every every month okay another cost

00:21:34,130 --> 00:21:36,620
is that you have to create a lot of

00:21:35,059 --> 00:21:37,700
basil configuration and I know this is a

00:21:36,620 --> 00:21:39,049
cost I've heard from a lot of

00:21:37,700 --> 00:21:42,679
enterprises let's keep holding them back

00:21:39,049 --> 00:21:44,390
from wanting to do basil so the first

00:21:42,679 --> 00:21:45,740
thing I think is kind of obvious unless

00:21:44,390 --> 00:21:47,900
you come from a Google background which

00:21:45,740 --> 00:21:49,850
is we don't need to have every single

00:21:47,900 --> 00:21:52,130
directory be its own basil package and

00:21:49,850 --> 00:21:53,630
so I think it's a useful mechanism to

00:21:52,130 --> 00:21:55,909
start with to just have one big build

00:21:53,630 --> 00:21:58,580
with glob star star I know glob is

00:21:55,909 --> 00:21:59,990
naughty but this is a good way to defer

00:21:58,580 --> 00:22:00,900
that cost and then you can split them up

00:21:59,990 --> 00:22:04,110
later and we'll talk about

00:22:00,900 --> 00:22:05,670
more in a little bit to reduce this cost

00:22:04,110 --> 00:22:07,050
obviously one thing is to have some

00:22:05,670 --> 00:22:09,600
tooling that generates build files for

00:22:07,050 --> 00:22:10,650
you I know a bunch of us have sort of

00:22:09,600 --> 00:22:12,750
thought about how this would look I

00:22:10,650 --> 00:22:15,270
think it's still not in a great state

00:22:12,750 --> 00:22:17,550
across the basal ecosystem but gizelle

00:22:15,270 --> 00:22:20,220
is pretty great and it does have support

00:22:17,550 --> 00:22:21,270
to extend it to handle more languages so

00:22:20,220 --> 00:22:22,290
we've been talking about a couple of

00:22:21,270 --> 00:22:24,210
languages we might want to contribute

00:22:22,290 --> 00:22:26,940
there your organization could commit

00:22:24,210 --> 00:22:30,450
some resources to do that you can also

00:22:26,940 --> 00:22:32,610
use macros and maybe custom rules but I

00:22:30,450 --> 00:22:35,429
think macros mostly does it to reduce

00:22:32,610 --> 00:22:37,320
the boilerplate so the build file should

00:22:35,429 --> 00:22:39,720
contain contain bear facts and I got

00:22:37,320 --> 00:22:41,220
this this bear facts from Allen Donovan

00:22:39,720 --> 00:22:43,620
who's one of the original authors of

00:22:41,220 --> 00:22:45,240
Basel and it means that like you should

00:22:43,620 --> 00:22:47,010
just list the sources the dependencies

00:22:45,240 --> 00:22:48,420
and not what to do or any of sort of

00:22:47,010 --> 00:22:50,340
sort of the connection goop in your

00:22:48,420 --> 00:22:51,570
build if that starts to leak into your

00:22:50,340 --> 00:22:54,510
build file then your build file is too

00:22:51,570 --> 00:22:55,980
long so we have an example here I think

00:22:54,510 --> 00:22:58,410
it might be a little small on the back

00:22:55,980 --> 00:22:59,940
but this is this is a file in the

00:22:58,410 --> 00:23:02,730
angular repo and we always check in a

00:22:59,940 --> 00:23:04,200
tool slash defaults that bzl and what we

00:23:02,730 --> 00:23:06,059
do here is we load the original TS

00:23:04,200 --> 00:23:08,010
library and then we override it with a

00:23:06,059 --> 00:23:09,300
macro of the same name that's important

00:23:08,010 --> 00:23:10,860
we want to follow the macro style guide

00:23:09,300 --> 00:23:12,690
so that in your build files it still

00:23:10,860 --> 00:23:14,100
looks like a TS library but what we do

00:23:12,690 --> 00:23:15,690
is we say okay well there's some depth

00:23:14,100 --> 00:23:17,220
so we always want to yes Lib to be adapt

00:23:15,690 --> 00:23:19,500
and then if it's a test we add some

00:23:17,220 --> 00:23:21,450
common test steps and then we set some

00:23:19,500 --> 00:23:23,700
defaults like the TS config points or

00:23:21,450 --> 00:23:25,170
default one so this is a great way

00:23:23,700 --> 00:23:26,520
number one it means that the build files

00:23:25,170 --> 00:23:28,020
across your repo are a lot shorter

00:23:26,520 --> 00:23:30,690
because all your load statements can

00:23:28,020 --> 00:23:32,340
come from this one place so you just

00:23:30,690 --> 00:23:34,320
load defaults up izl comma all the

00:23:32,340 --> 00:23:35,850
things you need and it means that in the

00:23:34,320 --> 00:23:37,860
future if you do need to make a repo

00:23:35,850 --> 00:23:39,030
wide change to one of the rules you

00:23:37,860 --> 00:23:41,429
don't need to go everywhere and do it

00:23:39,030 --> 00:23:45,090
you can just do it in this one spot and

00:23:41,429 --> 00:23:46,230
of course it means that that it's just

00:23:45,090 --> 00:23:48,090
easier for your developers not to have

00:23:46,230 --> 00:23:49,170
to type this stuff and so it's often the

00:23:48,090 --> 00:23:50,610
case that this is the place that you

00:23:49,170 --> 00:23:55,490
come and make an edit to change your

00:23:50,610 --> 00:23:57,870
build across the repo so another problem

00:23:55,490 --> 00:23:59,790
another cost you'll find the SKU this is

00:23:57,870 --> 00:24:01,860
also from the SpaceX talk is that they

00:23:59,790 --> 00:24:04,500
had to discover all of the things that

00:24:01,860 --> 00:24:06,030
they had put into their old build and it

00:24:04,500 --> 00:24:07,890
did all these surprising things it's I

00:24:06,030 --> 00:24:09,690
mean of course it did because most

00:24:07,890 --> 00:24:11,400
legacy built systems didn't constrain

00:24:09,690 --> 00:24:13,570
you in any way and so you could just you

00:24:11,400 --> 00:24:15,640
know write whatever program and do what

00:24:13,570 --> 00:24:16,750
and it was often one-off and there

00:24:15,640 --> 00:24:18,640
wasn't sort of a consistent way to

00:24:16,750 --> 00:24:20,050
manage the build so you will have to go

00:24:18,640 --> 00:24:22,510
find these things you can defer this

00:24:20,050 --> 00:24:23,950
cost obviously by avoiding those unique

00:24:22,510 --> 00:24:25,630
snowflake corners of your build and

00:24:23,950 --> 00:24:27,010
start with something that is standard

00:24:25,630 --> 00:24:28,930
and turnkey and you kind of know how to

00:24:27,010 --> 00:24:35,590
mechanically migrate like like I may

00:24:28,930 --> 00:24:37,480
even build and the last cost is that

00:24:35,590 --> 00:24:41,130
during the migration you're gonna have

00:24:37,480 --> 00:24:43,480
some added complexity this one is real

00:24:41,130 --> 00:24:45,820
the only way to avoid this is to not

00:24:43,480 --> 00:24:48,130
have an intermediate state at all which

00:24:45,820 --> 00:24:49,330
we'll talk about in a second so assuming

00:24:48,130 --> 00:24:50,800
that you're gonna have this in this

00:24:49,330 --> 00:24:52,840
intermediate state the best way to

00:24:50,800 --> 00:24:54,010
reduce this I think is to keep it simple

00:24:52,840 --> 00:24:57,030
stupid

00:24:54,010 --> 00:24:59,620
make your basel build really simple

00:24:57,030 --> 00:25:00,850
don't do what we did which is that we

00:24:59,620 --> 00:25:02,440
started from sort of the google internal

00:25:00,850 --> 00:25:05,410
mentality and we brought over a lot of

00:25:02,440 --> 00:25:07,540
the complexity of that system intervals

00:25:05,410 --> 00:25:09,790
nodejs and I think maybe other rule sets

00:25:07,540 --> 00:25:13,480
have done this maybe maybe authors have

00:25:09,790 --> 00:25:16,390
done this you often don't need this the

00:25:13,480 --> 00:25:17,500
the sort of enterprise-grade things in

00:25:16,390 --> 00:25:19,390
there at the beginning of your migration

00:25:17,500 --> 00:25:21,010
and if you take on the complexity early

00:25:19,390 --> 00:25:23,980
then that's gonna hurt you a lot so just

00:25:21,010 --> 00:25:25,060
like I mean basic software engineering

00:25:23,980 --> 00:25:26,800
principle but try to avoid the

00:25:25,060 --> 00:25:29,020
complexity avoid writing custom rules if

00:25:26,800 --> 00:25:30,340
you can general is just fine I think

00:25:29,020 --> 00:25:34,510
general might be the best Basel rule of

00:25:30,340 --> 00:25:35,740
all not getting a nod from Dimitri or if

00:25:34,510 --> 00:25:37,210
you do need to write rules keep them

00:25:35,740 --> 00:25:38,260
really simple so one thing we learned is

00:25:37,210 --> 00:25:40,180
that we had some places where we're

00:25:38,260 --> 00:25:41,500
using fancy providers to propagate

00:25:40,180 --> 00:25:42,880
information through the dependency graph

00:25:41,500 --> 00:25:44,650
and if we could just use default info

00:25:42,880 --> 00:25:46,210
things get a lot simpler rules become a

00:25:44,650 --> 00:25:50,350
lot more obvious how to compose them in

00:25:46,210 --> 00:25:55,990
a new way so I just called you all

00:25:50,350 --> 00:25:57,430
stupid I'm sorry okay so so now what we

00:25:55,990 --> 00:26:00,550
want to try to do we've enumerated the

00:25:57,430 --> 00:26:02,020
benefits costs and risks and so we want

00:26:00,550 --> 00:26:03,310
to try to distill these we want to use

00:26:02,020 --> 00:26:06,730
those as a rubric for evaluating

00:26:03,310 --> 00:26:08,110
different patterns that you can use to

00:26:06,730 --> 00:26:11,310
transform from your legacy build

00:26:08,110 --> 00:26:16,420
represented here by acute sauropod

00:26:11,310 --> 00:26:18,760
transforming it's a basel so this is

00:26:16,420 --> 00:26:19,750
based on techniques that we've seen from

00:26:18,760 --> 00:26:20,980
across industry we're not inventing

00:26:19,750 --> 00:26:22,270
anything new here we're just trying to

00:26:20,980 --> 00:26:24,250
sort of group them together and give

00:26:22,270 --> 00:26:26,860
them names and and put cute dinosaurs on

00:26:24,250 --> 00:26:27,429
them some of these patterns might apply

00:26:26,860 --> 00:26:29,169
or

00:26:27,429 --> 00:26:31,419
but some of them may not so your mileage

00:26:29,169 --> 00:26:32,769
may vary certainly these are also not

00:26:31,419 --> 00:26:34,989
going to be mutually exclusive and Greg

00:26:32,769 --> 00:26:36,159
will talk about how to compose them and

00:26:34,989 --> 00:26:40,450
so what we're going to show here are

00:26:36,159 --> 00:26:42,940
diagrams and I will show the first one I

00:26:40,450 --> 00:26:44,619
just want to point out that the arrows

00:26:42,940 --> 00:26:46,599
here between the dinosaurs is not

00:26:44,619 --> 00:26:48,759
necessarily like an execution graph it's

00:26:46,599 --> 00:26:51,099
not like I just run dinosaur SH at the

00:26:48,759 --> 00:26:52,869
top and then all of this is automatic it

00:26:51,099 --> 00:26:54,519
may it may be that these are sort of

00:26:52,869 --> 00:26:55,629
more conceptual arrows and like first

00:26:54,519 --> 00:26:56,979
the developer has to go do this then

00:26:55,629 --> 00:26:58,119
check it into a repo then fetch the new

00:26:56,979 --> 00:26:59,739
artifact then put it into this other

00:26:58,119 --> 00:27:01,299
repo so think about this as being this

00:26:59,739 --> 00:27:02,889
sort of high-level flow of your build if

00:27:01,299 --> 00:27:06,609
you were like an armchair architect and

00:27:02,889 --> 00:27:07,929
this is what you did so so big bang is

00:27:06,609 --> 00:27:11,320
our first migration pattern this is

00:27:07,929 --> 00:27:13,239
really simple you have a before and then

00:27:11,320 --> 00:27:16,179
you make a commit and then tada they're

00:27:13,239 --> 00:27:17,589
all Basil's this is this is great I mean

00:27:16,179 --> 00:27:19,419
this lowers your cost a lot like I

00:27:17,589 --> 00:27:20,559
talked about the itíd complexity during

00:27:19,419 --> 00:27:22,749
the migration there's no during the

00:27:20,559 --> 00:27:24,820
migration is just before and after but

00:27:22,749 --> 00:27:28,359
it's also I think not viable for most

00:27:24,820 --> 00:27:30,190
enterprises like you would do this for

00:27:28,359 --> 00:27:31,919
your toy application like you have a

00:27:30,190 --> 00:27:33,700
like a demo repo you would just do this

00:27:31,919 --> 00:27:34,749
this only works if you have a

00:27:33,700 --> 00:27:36,519
development team that's really

00:27:34,749 --> 00:27:37,809
enthusiastic and so you can get a lot of

00:27:36,519 --> 00:27:40,509
people to come work on it at the same

00:27:37,809 --> 00:27:41,889
time like I said before with this

00:27:40,509 --> 00:27:43,779
gradient ascent I think you need to fit

00:27:41,889 --> 00:27:45,549
this within some development lifecycle

00:27:43,779 --> 00:27:48,700
at your company probably like within a

00:27:45,549 --> 00:27:50,109
release because it's very disruptive and

00:27:48,700 --> 00:27:51,849
if you if you can't land this all in one

00:27:50,109 --> 00:27:52,929
commit then the build and test is broken

00:27:51,849 --> 00:27:55,839
in the middle and people can't get work

00:27:52,929 --> 00:27:59,080
done so it requires a lot of careful

00:27:55,839 --> 00:28:00,669
planning I don't have an example of a

00:27:59,080 --> 00:28:02,469
Big Bang basal migration but there is

00:28:00,669 --> 00:28:03,809
this a fantastic blog post from lucid

00:28:02,469 --> 00:28:05,979
chart about how they migrated from

00:28:03,809 --> 00:28:07,299
JavaScript to typescript and it's a very

00:28:05,979 --> 00:28:09,669
similar sort of traverse the graph

00:28:07,299 --> 00:28:10,989
figure out what you can migrate and so I

00:28:09,669 --> 00:28:12,460
recommend reading this if you think that

00:28:10,989 --> 00:28:15,899
you want to try to do big bang this blog

00:28:12,460 --> 00:28:15,899
blog post will impress and scare you

00:28:17,529 --> 00:28:20,979
and then the next pattern I'm going to

00:28:19,779 --> 00:28:24,609
talk about before I hand it back to Greg

00:28:20,979 --> 00:28:27,129
is parallel builds so in this model we

00:28:24,609 --> 00:28:28,659
have our tree of dinosaurs and it's

00:28:27,129 --> 00:28:31,119
mirrored into a tree of Basil's

00:28:28,659 --> 00:28:32,619
we keep both of these things working we

00:28:31,119 --> 00:28:33,879
have a CI for both of them like Wix

00:28:32,619 --> 00:28:36,129
talked about they had the old CI the new

00:28:33,879 --> 00:28:37,419
CI and we're in the state for some

00:28:36,129 --> 00:28:38,559
period of time during the transition so

00:28:37,419 --> 00:28:39,849
first we're building up the tree of

00:28:38,559 --> 00:28:42,220
Basil's and then later we can tear down

00:28:39,849 --> 00:28:44,440
the tree of dinosaurs

00:28:42,220 --> 00:28:46,420
so I'm gonna be brave here and I'm gonna

00:28:44,440 --> 00:28:49,990
use Google as the case study for this

00:28:46,420 --> 00:28:51,880
one and I've been at Google for like 11

00:28:49,990 --> 00:28:54,070
years so this is even before my time

00:28:51,880 --> 00:28:56,020
so 13 years ago you've probably all

00:28:54,070 --> 00:28:59,290
heard Google 3 so yes there was a Google

00:28:56,020 --> 00:29:01,150
- and part of that migration was to

00:28:59,290 --> 00:29:03,310
introduce these files called build and

00:29:01,150 --> 00:29:07,330
they were configuring the legacy build

00:29:03,310 --> 00:29:08,530
system at the time so when we moved to

00:29:07,330 --> 00:29:10,180
Basel it was really we already had these

00:29:08,530 --> 00:29:11,470
build files and so we did a fix-it which

00:29:10,180 --> 00:29:12,610
is Google's way of getting a bunch of

00:29:11,470 --> 00:29:14,020
engineers to kind of swarm onto a

00:29:12,610 --> 00:29:16,960
problem by giving them prizes like

00:29:14,020 --> 00:29:18,730
t-shirts obvious doesn't work anymore

00:29:16,960 --> 00:29:22,090
but you know long ago people didn't have

00:29:18,730 --> 00:29:23,590
enough t-shirts so this was called the

00:29:22,090 --> 00:29:26,110
revolution you can read about it on my

00:29:23,590 --> 00:29:27,300
clans blog it's very interesting you

00:29:26,110 --> 00:29:29,200
know history of the software industry

00:29:27,300 --> 00:29:31,180
and if you're into basil it's just

00:29:29,200 --> 00:29:33,040
interesting to see where it came from I

00:29:31,180 --> 00:29:35,890
I'm just trying to represent what I

00:29:33,040 --> 00:29:37,060
learned from from Helen and and and Mike

00:29:35,890 --> 00:29:38,950
and a couple of other other early

00:29:37,060 --> 00:29:40,540
engineers on the project so what we did

00:29:38,950 --> 00:29:41,830
we took some ugly compromises we

00:29:40,540 --> 00:29:43,780
retained features in the build language

00:29:41,830 --> 00:29:45,340
that we don't like because we had to

00:29:43,780 --> 00:29:46,480
Mike to keep the migration small enough

00:29:45,340 --> 00:29:49,000
right we couldn't change more than one

00:29:46,480 --> 00:29:50,170
thing at a time we set up remote

00:29:49,000 --> 00:29:51,940
execution pretty early

00:29:50,170 --> 00:29:54,250
thanks to Ambrose who invented this in

00:29:51,940 --> 00:29:55,870
his 20% time and that was really

00:29:54,250 --> 00:29:57,490
critical to getting all of the tests

00:29:55,870 --> 00:29:59,410
migrated onto basil and sort of like

00:29:57,490 --> 00:30:01,450
like I said like having the benefit come

00:29:59,410 --> 00:30:05,950
in early was an important migration to

00:30:01,450 --> 00:30:07,150
like get this benefit earlier so how do

00:30:05,950 --> 00:30:09,880
we feel about the maze of basil

00:30:07,150 --> 00:30:12,130
migration it was just finishing when I

00:30:09,880 --> 00:30:13,480
started so the legacy built system it

00:30:12,130 --> 00:30:14,920
took us about 18 months to completely

00:30:13,480 --> 00:30:18,430
tear it down I think a lot of that was

00:30:14,920 --> 00:30:19,690
long tail so it was really like most of

00:30:18,430 --> 00:30:22,480
the work was much faster and we felt

00:30:19,690 --> 00:30:25,090
like that was a short timeline but even

00:30:22,480 --> 00:30:28,060
so the management at the time different

00:30:25,090 --> 00:30:29,530
management than now was was really

00:30:28,060 --> 00:30:30,750
straining their patience in terms of how

00:30:29,530 --> 00:30:32,860
long this migration could keep happening

00:30:30,750 --> 00:30:36,430
so it wasn't obvious that we were able

00:30:32,860 --> 00:30:37,960
to accomplish this developers felt the

00:30:36,430 --> 00:30:39,310
pain because they had to keep both of

00:30:37,960 --> 00:30:40,420
the build tools working right and this

00:30:39,310 --> 00:30:42,700
is during the migration you have to

00:30:40,420 --> 00:30:44,440
build systems that both need to work and

00:30:42,700 --> 00:30:46,030
that's true even though we had the same

00:30:44,440 --> 00:30:47,560
configuration files for both of those

00:30:46,030 --> 00:30:49,420
tools so only about a quarter of the

00:30:47,560 --> 00:30:51,280
build files in the Google 3 repo

00:30:49,420 --> 00:30:53,110
actually needed to be touched to migrate

00:30:51,280 --> 00:30:54,760
from the legacy built to Basel and even

00:30:53,110 --> 00:30:55,180
so it was hard for engineers so imagine

00:30:54,760 --> 00:30:56,680
you

00:30:55,180 --> 00:30:58,330
in your situation you probably are going

00:30:56,680 --> 00:31:01,059
to have to separate configs

00:30:58,330 --> 00:31:04,240
and so that's even more effort for

00:31:01,059 --> 00:31:05,680
engineers and the in the wicks talk

00:31:04,240 --> 00:31:07,480
there was a lot of discussion about how

00:31:05,680 --> 00:31:09,910
the IDs were kind of broken by Basel we

00:31:07,480 --> 00:31:13,090
totally did that to not don't have time

00:31:09,910 --> 00:31:14,500
to go into details on it but that's

00:31:13,090 --> 00:31:16,690
that's how we did it so yeah we did

00:31:14,500 --> 00:31:20,080
parallel builds so I hand it back to

00:31:16,690 --> 00:31:21,880
Greg thanks Alex

00:31:20,080 --> 00:31:23,590
so the third pattern that we're gonna

00:31:21,880 --> 00:31:26,020
talk about is called deploy artifacts

00:31:23,590 --> 00:31:27,130
first and in this pattern you're gonna

00:31:26,020 --> 00:31:29,020
leave your test alone initially you're

00:31:27,130 --> 00:31:32,380
gonna find a binary that you produce and

00:31:29,020 --> 00:31:34,390
you're gonna migrate that first this is

00:31:32,380 --> 00:31:35,500
good a good pattern to use if you find

00:31:34,390 --> 00:31:37,390
that your packages are actually the

00:31:35,500 --> 00:31:38,830
things telling your developers down you

00:31:37,390 --> 00:31:41,320
can build your binaries and then you can

00:31:38,830 --> 00:31:43,920
paralyze that and get some good value

00:31:41,320 --> 00:31:43,920
out of it right away

00:31:43,980 --> 00:31:47,260
this is one of those patterns like

00:31:45,850 --> 00:31:48,940
angular in spacex where you might want

00:31:47,260 --> 00:31:52,450
to compare the results of the basel bill

00:31:48,940 --> 00:31:53,980
to your legacy build initially and you

00:31:52,450 --> 00:31:55,390
might also want to take the opus of

00:31:53,980 --> 00:31:56,800
those binaries and run them to your

00:31:55,390 --> 00:32:01,290
integration test with your old legacy

00:31:56,800 --> 00:32:01,290
builds to make sure integration so pass

00:32:01,800 --> 00:32:06,309
so after your binaries are passed over

00:32:04,929 --> 00:32:07,690
to basel and everyone's happy then you

00:32:06,309 --> 00:32:09,760
can start migrating a test at that point

00:32:07,690 --> 00:32:13,120
and get more value in parallelization

00:32:09,760 --> 00:32:14,980
for the rest of your builds so the case

00:32:13,120 --> 00:32:17,110
study on this is is back to angular and

00:32:14,980 --> 00:32:18,790
when angular migrated to basel they

00:32:17,110 --> 00:32:21,190
wanted to satirize their distribution

00:32:18,790 --> 00:32:23,320
format called angular package format in

00:32:21,190 --> 00:32:25,000
the old build the legacy shell script

00:32:23,320 --> 00:32:27,610
was clunky as unattainable was not

00:32:25,000 --> 00:32:29,290
portable it was the long pole for them

00:32:27,610 --> 00:32:31,600
building packages on CI so that was a

00:32:29,290 --> 00:32:33,220
natural first fit and they were able to

00:32:31,600 --> 00:32:35,650
paralyze this using a real cache and

00:32:33,220 --> 00:32:38,530
execution and really get a a good value

00:32:35,650 --> 00:32:40,300
right away and I think I don't know what

00:32:38,530 --> 00:32:41,350
remember the CI speed upgrade on them

00:32:40,300 --> 00:32:43,929
but it was pretty good it went down from

00:32:41,350 --> 00:32:47,290
like 30 minutes to something maybe five

00:32:43,929 --> 00:32:48,910
initially and the other benefit they had

00:32:47,290 --> 00:32:53,230
was the new portable rule that they had

00:32:48,910 --> 00:32:54,670
to do this binary migration called ng

00:32:53,230 --> 00:32:56,530
package they could use another repo so

00:32:54,670 --> 00:33:00,010
angular material and TRX and those were

00:32:56,530 --> 00:33:02,050
posters use it right away on the flip

00:33:00,010 --> 00:33:03,340
side you may want to paralyze your tests

00:33:02,050 --> 00:33:05,650
first so you leave your binaries alone

00:33:03,340 --> 00:33:07,360
and you target to test a lot of a lot of

00:33:05,650 --> 00:33:08,980
CI builds and local development

00:33:07,360 --> 00:33:10,559
a lot of tests they can't paralyze and

00:33:08,980 --> 00:33:13,360
that's really a pain for developers and

00:33:10,559 --> 00:33:15,700
so if you get your test over the Basel

00:33:13,360 --> 00:33:19,030
early in your migration then you can use

00:33:15,700 --> 00:33:21,370
parallel lunar most strategies in CI and

00:33:19,030 --> 00:33:22,420
for local devs and you can also shard

00:33:21,370 --> 00:33:24,280
your tests so you don't necessarily have

00:33:22,420 --> 00:33:25,840
to break up if you have large tests in

00:33:24,280 --> 00:33:26,950
your repository you don't necessarily

00:33:25,840 --> 00:33:29,890
have to break them up right away you

00:33:26,950 --> 00:33:35,100
could shard them and then it saves you

00:33:29,890 --> 00:33:37,870
on making configuration you can do that

00:33:35,100 --> 00:33:40,450
so the case study for this came from

00:33:37,870 --> 00:33:41,530
Everest Microsystems so the first step

00:33:40,450 --> 00:33:43,540
was the migrate test for shared

00:33:41,530 --> 00:33:45,760
libraries and they set up a de bit AWS

00:33:43,540 --> 00:33:48,910
s3 cache right away and their local

00:33:45,760 --> 00:33:49,990
Deb's got real-time access to the cache

00:33:48,910 --> 00:33:51,250
sure they had a speed up for the

00:33:49,990 --> 00:33:52,540
development experience right away they

00:33:51,250 --> 00:33:54,940
didn't have to run every test every

00:33:52,540 --> 00:33:57,070
single time and ever it's also measured

00:33:54,940 --> 00:33:58,570
their build to see that they were

00:33:57,070 --> 00:33:59,830
getting those cache hits and so they

00:33:58,570 --> 00:34:09,100
could show that it was working the way

00:33:59,830 --> 00:34:12,010
they intended Alex okay so our next

00:34:09,100 --> 00:34:13,990
pattern we call inside out it's pretty

00:34:12,010 --> 00:34:16,780
simple you start from some inner node in

00:34:13,990 --> 00:34:18,429
your in your graph you migrate that all

00:34:16,780 --> 00:34:20,950
by itself just this little tiny island

00:34:18,429 --> 00:34:22,929
of basil in the sea of dinosaurs and

00:34:20,950 --> 00:34:24,520
then the island gets bigger over time

00:34:22,929 --> 00:34:26,760
usually following some dependency edge

00:34:24,520 --> 00:34:29,080
in the sort of again the logical graph

00:34:26,760 --> 00:34:30,909
because now these two nodes are able to

00:34:29,080 --> 00:34:32,500
sort of share cache hits with each other

00:34:30,909 --> 00:34:34,480
or I should say one of them gets cache

00:34:32,500 --> 00:34:35,800
hits from the other and so this way you

00:34:34,480 --> 00:34:37,570
have a like a little island of goodness

00:34:35,800 --> 00:34:39,340
that can sort of expand over time so

00:34:37,570 --> 00:34:42,460
it's obvious how this one can can grow

00:34:39,340 --> 00:34:43,750
over a really long migration so how to

00:34:42,460 --> 00:34:46,240
do this we talked to improbable

00:34:43,750 --> 00:34:47,649
and one of the things they did during

00:34:46,240 --> 00:34:50,260
their migration they had a protocol

00:34:47,649 --> 00:34:51,790
buffer to typescript code generator that

00:34:50,260 --> 00:34:53,500
was kind of slow needed to run in every

00:34:51,790 --> 00:34:54,909
single build and it had the advantage

00:34:53,500 --> 00:34:56,320
that the protocol buffer I think was not

00:34:54,909 --> 00:34:59,470
changed that often and so you could

00:34:56,320 --> 00:35:01,270
always get a cache it for this and so

00:34:59,470 --> 00:35:03,040
even though it seems like overkill to

00:35:01,270 --> 00:35:04,300
download a tool like basil and install

00:35:03,040 --> 00:35:05,950
it and set it up just so that you can

00:35:04,300 --> 00:35:07,180
like cache the results of this one thing

00:35:05,950 --> 00:35:10,180
like clearly you could write some script

00:35:07,180 --> 00:35:11,619
to do that this is already you know this

00:35:10,180 --> 00:35:12,970
is a very small step in the right

00:35:11,619 --> 00:35:15,340
direction that allows you to get basil

00:35:12,970 --> 00:35:16,869
in place and have it providing value and

00:35:15,340 --> 00:35:19,320
then you know grow that's more slowly

00:35:16,869 --> 00:35:19,320
over time

00:35:19,690 --> 00:35:24,369
the flipside of that one we call outside

00:35:21,640 --> 00:35:26,260
in so in this one you're going to start

00:35:24,369 --> 00:35:31,660
with basil sort of orchestrating the

00:35:26,260 --> 00:35:33,579
existing legacy build and over time you

00:35:31,660 --> 00:35:35,079
can then imagine that again this one

00:35:33,579 --> 00:35:36,640
will grow slowly over time you will

00:35:35,079 --> 00:35:38,309
start to have the things that basil is

00:35:36,640 --> 00:35:40,539
calling can be migrated one at a time

00:35:38,309 --> 00:35:44,589
from the legacy built system to be their

00:35:40,539 --> 00:35:47,770
own basil steps our case study here

00:35:44,589 --> 00:35:49,059
comes from lift so they use a tool

00:35:47,770 --> 00:35:53,740
called envoy which does some fancy

00:35:49,059 --> 00:35:57,789
Network stuff it envoy itself uses CMake

00:35:53,740 --> 00:35:59,049
and Ninja as a basil action and I put a

00:35:57,789 --> 00:36:02,079
pointer here too

00:35:59,049 --> 00:36:05,289
so a spot where they do that and so when

00:36:02,079 --> 00:36:07,960
lift wanted to have a they have a mobile

00:36:05,289 --> 00:36:09,130
version of the Envoy library and they

00:36:07,960 --> 00:36:11,680
want to migrate their iOS and Android

00:36:09,130 --> 00:36:14,829
builds to basil it's really convenient

00:36:11,680 --> 00:36:19,660
to not have to go back and tamper with

00:36:14,829 --> 00:36:21,069
the with the this part of envoy they did

00:36:19,660 --> 00:36:22,869
report that this introduced a lot of

00:36:21,069 --> 00:36:23,950
complexity because like they are now

00:36:22,869 --> 00:36:26,109
running these two built systems at the

00:36:23,950 --> 00:36:27,609
same time but it also deferred a lot of

00:36:26,109 --> 00:36:29,890
costs from having to migrate these

00:36:27,609 --> 00:36:31,750
things now also the talk earlier today

00:36:29,890 --> 00:36:33,460
about build stream went into some of

00:36:31,750 --> 00:36:36,130
this about how you can sort of call the

00:36:33,460 --> 00:36:37,720
existing tooling from from basil and I

00:36:36,130 --> 00:36:39,849
think the the speaker there mentioned

00:36:37,720 --> 00:36:42,670
rules for in CC which I'll also point to

00:36:39,849 --> 00:36:45,010
here this obviously is for C++ I think

00:36:42,670 --> 00:36:46,059
there are there are ways that you can do

00:36:45,010 --> 00:36:48,010
that certainly in the JavaScript

00:36:46,059 --> 00:36:49,299
ecosystem that Greg and I work on you

00:36:48,010 --> 00:36:57,190
can just call out to your existing tool

00:36:49,299 --> 00:36:58,210
as a big basil step okay so I'm gonna

00:36:57,190 --> 00:37:00,609
talk about a pattern when we called

00:36:58,210 --> 00:37:02,890
coarse-grain first and in this pattern

00:37:00,609 --> 00:37:05,079
you you start migrating with a small

00:37:02,890 --> 00:37:06,099
number of large global actions so you're

00:37:05,079 --> 00:37:07,420
not necessarily looking to get

00:37:06,099 --> 00:37:09,099
incrementality from your build right

00:37:07,420 --> 00:37:11,500
away you want to get as much a rebuild

00:37:09,099 --> 00:37:14,859
over to basil as possible you could turn

00:37:11,500 --> 00:37:16,450
on remote cache which you would get that

00:37:14,859 --> 00:37:17,559
benefit and you're not worried so much

00:37:16,450 --> 00:37:20,829
about breaking up your bill at this

00:37:17,559 --> 00:37:21,970
point you would do that next and then as

00:37:20,829 --> 00:37:23,349
you do that you would measure these

00:37:21,970 --> 00:37:24,760
global actions see which of them are

00:37:23,349 --> 00:37:26,650
causing in the most pain and start

00:37:24,760 --> 00:37:32,109
splitting those up into smaller pieces

00:37:26,650 --> 00:37:33,260
so an example of this is the that

00:37:32,109 --> 00:37:35,610
example okay

00:37:33,260 --> 00:37:39,300
the angular team did this when they did

00:37:35,610 --> 00:37:41,610
their package format and they started by

00:37:39,300 --> 00:37:46,560
doing one pious library we will for an

00:37:41,610 --> 00:37:48,060
entire package and then they would get

00:37:46,560 --> 00:37:49,350
all the packages a little basil and then

00:37:48,060 --> 00:37:50,700
start splitting it up from there and

00:37:49,350 --> 00:37:52,980
when you do this you also have to worry

00:37:50,700 --> 00:37:54,390
about cyclic dependencies too so basil

00:37:52,980 --> 00:37:56,990
can't handle that between targets which

00:37:54,390 --> 00:38:01,770
is one reason to just do a larger target

00:37:56,990 --> 00:38:04,320
one at a time and in the real world not

00:38:01,770 --> 00:38:05,970
all the repositories are uniform so you

00:38:04,320 --> 00:38:07,530
may have different size dinosaurs you

00:38:05,970 --> 00:38:09,720
may have some baby dinosaurs in there

00:38:07,530 --> 00:38:11,490
you might even have a Stegosaurus which

00:38:09,720 --> 00:38:15,090
is a very unusual build stuff that maybe

00:38:11,490 --> 00:38:18,060
basical can't run real repositories have

00:38:15,090 --> 00:38:20,460
a variety of tools for build a variety

00:38:18,060 --> 00:38:22,200
of tools for tests they're using or the

00:38:20,460 --> 00:38:26,130
building multiplications and multiple

00:38:22,200 --> 00:38:30,600
teams and you're probably gonna use a

00:38:26,130 --> 00:38:32,220
variety of these techniques to migrate

00:38:30,600 --> 00:38:34,920
the critical part here is the discovery

00:38:32,220 --> 00:38:36,710
step you really want to identify what's

00:38:34,920 --> 00:38:41,520
in your legacy build system so you know

00:38:36,710 --> 00:38:43,650
which tools you need to convert and you

00:38:41,520 --> 00:38:45,450
convert slowly maybe you start building

00:38:43,650 --> 00:38:48,120
the little basil pieces together into

00:38:45,450 --> 00:38:49,560
larger combinations and then finally

00:38:48,120 --> 00:38:53,270
your entire build will be basil you

00:38:49,560 --> 00:38:55,500
might still have a Stegosaurus in there

00:38:53,270 --> 00:38:57,870
so the case study for this we talked to

00:38:55,500 --> 00:39:01,590
Kyle at Oasis digital and he started

00:38:57,870 --> 00:39:02,940
converting his repo little by little

00:39:01,590 --> 00:39:04,500
little items at a time and as these

00:39:02,940 --> 00:39:07,650
islands with basil grew closer and they

00:39:04,500 --> 00:39:10,380
were adjacent thing he'd composed him at

00:39:07,650 --> 00:39:12,420
a larger target groups and finally he

00:39:10,380 --> 00:39:17,430
put a top layer and to make his entire

00:39:12,420 --> 00:39:19,560
build convert it over okay I think this

00:39:17,430 --> 00:39:22,200
is the last one we're almost done so for

00:39:19,560 --> 00:39:24,840
mono repo again this is not closely tied

00:39:22,200 --> 00:39:26,790
to basil basil enables mono repo but

00:39:24,840 --> 00:39:28,590
we've done a couple of these the typical

00:39:26,790 --> 00:39:32,250
pattern we see is that the mono repo on

00:39:28,590 --> 00:39:35,460
the Left starts off with a migration up

00:39:32,250 --> 00:39:36,870
sorry and it has at least it's out uses

00:39:35,460 --> 00:39:38,910
the outside-in pattern so like you have

00:39:36,870 --> 00:39:41,880
the the top level as a basil target and

00:39:38,910 --> 00:39:44,040
then it's it has a conceptual dependency

00:39:41,880 --> 00:39:44,970
on this other repo so then the first

00:39:44,040 --> 00:39:47,220
thing you do is you migrate the other

00:39:44,970 --> 00:39:48,570
repo to basil at least at the top

00:39:47,220 --> 00:39:50,280
and then you add this dependency edge

00:39:48,570 --> 00:39:53,940
and this can actually be two separate

00:39:50,280 --> 00:39:55,800
steps here so the way we did this I'll

00:39:53,940 --> 00:39:58,350
talk about it actually here on this

00:39:55,800 --> 00:39:59,400
slide so we did this for zone J s this

00:39:58,350 --> 00:40:00,810
was a separate library that really

00:39:59,400 --> 00:40:02,220
belonged as part of angular we had some

00:40:00,810 --> 00:40:03,510
pain because we changed it and we didn't

00:40:02,220 --> 00:40:04,530
see that there was breaking angular so

00:40:03,510 --> 00:40:06,480
they wanted to be continuously

00:40:04,530 --> 00:40:07,830
integrated together so the first thing

00:40:06,480 --> 00:40:10,860
is we migrated the zone J s repo to

00:40:07,830 --> 00:40:12,990
basil then we moved the code to the

00:40:10,860 --> 00:40:15,630
angular mono repo but at the at that

00:40:12,990 --> 00:40:17,520
point and actually still true today the

00:40:15,630 --> 00:40:18,690
that edge is not a source dependency

00:40:17,520 --> 00:40:19,740
edge but it's a binary artifact

00:40:18,690 --> 00:40:20,760
dependency edge because that's the

00:40:19,740 --> 00:40:21,990
easiest thing to do first so there's

00:40:20,760 --> 00:40:24,030
still a publish step followed by a

00:40:21,990 --> 00:40:26,610
consume step and then you change that

00:40:24,030 --> 00:40:28,350
edge to be a source dependency and

00:40:26,610 --> 00:40:30,830
credit to Jolley who works at this dot

00:40:28,350 --> 00:40:32,940
who did a lot of that migration work

00:40:30,830 --> 00:40:35,190
okay so we're almost through and I'll

00:40:32,940 --> 00:40:37,410
just summarize what we talked about to

00:40:35,190 --> 00:40:39,780
plan an execute a successful based on

00:40:37,410 --> 00:40:41,220
migration you want to pick the right

00:40:39,780 --> 00:40:42,660
incremental steps early on do your

00:40:41,220 --> 00:40:44,610
discovery so you know you're gonna do

00:40:42,660 --> 00:40:45,870
we've given you some general patterns to

00:40:44,610 --> 00:40:49,460
follow there's not specific to any

00:40:45,870 --> 00:40:51,120
language so you want to look at

00:40:49,460 --> 00:40:53,760
de-risking by choosing the right

00:40:51,120 --> 00:40:55,950
patterns and proving the value early

00:40:53,760 --> 00:40:57,270
ahead and really to go back to those

00:40:55,950 --> 00:40:58,860
three points you want to maximize your

00:40:57,270 --> 00:41:00,720
benefits you want to minimize your risks

00:40:58,860 --> 00:41:04,230
and you want to minimize your costs as

00:41:00,720 --> 00:41:07,200
much as you can so thank you for

00:41:04,230 --> 00:41:08,970
listening and if any of you are planning

00:41:07,200 --> 00:41:10,080
based on migration in the middle of a

00:41:08,970 --> 00:41:12,270
migration and you want to talk about

00:41:10,080 --> 00:41:14,160
specifics then please find us after the

00:41:12,270 --> 00:41:17,000
talk and we're happy to give you advice

00:41:14,160 --> 00:41:17,000
on your specific situation

00:41:21,680 --> 00:41:26,599
so we have time for maybe two quick

00:41:23,990 --> 00:41:28,039
questions we want a next stalk needs to

00:41:26,599 --> 00:41:37,910
start on time because people may be

00:41:28,039 --> 00:41:41,720
moving yes over there yeah I think

00:41:37,910 --> 00:41:43,400
you're talking about bare facts I'm

00:41:41,720 --> 00:41:44,720
summarizing from a very short comment he

00:41:43,400 --> 00:41:46,010
left on the slides but it's basically

00:41:44,720 --> 00:41:47,539
don't put stuff in the build file that

00:41:46,010 --> 00:41:49,339
Bay's that doesn't have to go there so

00:41:47,539 --> 00:41:51,319
like really only declare the sources and

00:41:49,339 --> 00:41:52,400
the dependencies and the rest of the

00:41:51,319 --> 00:41:57,700
goop in your bill doesn't shouldn't

00:41:52,400 --> 00:41:59,270
shouldn't be there one more question

00:41:57,700 --> 00:42:02,410
going once

00:41:59,270 --> 00:42:02,410

YouTube URL: https://www.youtube.com/watch?v=UwuRGpVpmbo


