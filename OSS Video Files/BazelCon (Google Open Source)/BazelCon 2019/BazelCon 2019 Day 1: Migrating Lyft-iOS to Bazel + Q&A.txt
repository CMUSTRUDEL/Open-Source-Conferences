Title: BazelCon 2019 Day 1: Migrating Lyft-iOS to Bazel + Q&A
Publication date: 2020-01-09
Playlist: BazelCon 2019
Description: 
	Keith Smiley & Dave Lee, Lyft event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Keith Smiley, Dave Lee;
Captions: 
	00:00:06,410 --> 00:00:11,040
later on this is a last station a

00:00:09,750 --> 00:00:14,790
session for the day we'll have three

00:00:11,040 --> 00:00:19,820
talks yes so everybody have a good time

00:00:14,790 --> 00:00:19,820
good awesome

00:00:21,680 --> 00:00:29,010
so yeah we have I guess last time is

00:00:26,010 --> 00:00:32,369
kind of veterans of basil Kahn some time

00:00:29,010 --> 00:00:34,860
at least so for the first talk I welcome

00:00:32,369 --> 00:00:43,559
case and day from lift they were talking

00:00:34,860 --> 00:00:45,600
about iOS development with basil hey

00:00:43,559 --> 00:00:47,789
everyone thanks for coming so today my

00:00:45,600 --> 00:00:49,320
colleague Dave Lee and me Keith smiley

00:00:47,789 --> 00:00:51,960
are gonna talk about our experience

00:00:49,320 --> 00:00:56,520
migrating lifts iOS code base to build

00:00:51,960 --> 00:00:59,039
with basil so for some context on lift

00:00:56,520 --> 00:00:59,940
we have a pretty large iOS team decent

00:00:59,039 --> 00:01:01,710
amount of developers like all

00:00:59,940 --> 00:01:03,090
contributing to the same codebase you

00:01:01,710 --> 00:01:05,070
know we have a few different apps and we

00:01:03,090 --> 00:01:06,689
share a lot of code between them but in

00:01:05,070 --> 00:01:08,520
general a lot of Engineers working on

00:01:06,689 --> 00:01:10,170
that there's just two of us Dave from

00:01:08,520 --> 00:01:12,000
myself working on tooling for this

00:01:10,170 --> 00:01:13,920
tooling is a little bit more than just

00:01:12,000 --> 00:01:16,860
the build but that kind of gives you a

00:01:13,920 --> 00:01:18,960
sense of like resourcing for that we

00:01:16,860 --> 00:01:20,400
have a decent amount of code one

00:01:18,960 --> 00:01:21,720
interesting thing for iOS engineers is

00:01:20,400 --> 00:01:24,900
that we don't have any objective-c which

00:01:21,720 --> 00:01:26,520
is kind of unique and all said and done

00:01:24,900 --> 00:01:30,119
like today we have a bunch of basil

00:01:26,520 --> 00:01:31,650
targets so I want to briefly cover why

00:01:30,119 --> 00:01:33,930
we wanted to switch in the first place

00:01:31,650 --> 00:01:35,130
so this is basil Kahn so I assume a lot

00:01:33,930 --> 00:01:36,150
of you have a positive impression of

00:01:35,130 --> 00:01:38,400
basil so I'm not gonna spend too much

00:01:36,150 --> 00:01:39,750
time on it but I want to cover like the

00:01:38,400 --> 00:01:43,380
highlights that really led us to make

00:01:39,750 --> 00:01:44,729
that decision so first off whether or

00:01:43,380 --> 00:01:47,549
not you're familiar with like the iOS

00:01:44,729 --> 00:01:48,600
ecosystem isn't a huge deal but you and

00:01:47,549 --> 00:01:51,180
you could do a whole talk on this piece

00:01:48,600 --> 00:01:53,130
but the gist of it is the the state of

00:01:51,180 --> 00:01:55,020
iOS tooling like out of the box once

00:01:53,130 --> 00:01:57,479
you're working on larger projects with

00:01:55,020 --> 00:01:58,290
the larger team doesn't really work very

00:01:57,479 --> 00:01:59,759
well and it doesn't have a lot of

00:01:58,290 --> 00:02:01,530
answers to the common problems like my

00:01:59,759 --> 00:02:03,659
app takes 45 minutes to build or

00:02:01,530 --> 00:02:05,310
whatever and the key piece is really

00:02:03,659 --> 00:02:07,320
that it's not extensible it's like a

00:02:05,310 --> 00:02:09,179
black box it's closed source from Apple

00:02:07,320 --> 00:02:11,520
you can't really add anything if you

00:02:09,179 --> 00:02:13,020
really wanted to so that's one big piece

00:02:11,520 --> 00:02:13,620
and kind of like basil is the opposite

00:02:13,020 --> 00:02:16,379
of that right like

00:02:13,620 --> 00:02:18,090
we have this open flexible ecosystem

00:02:16,379 --> 00:02:19,620
where we can contribute things back for

00:02:18,090 --> 00:02:21,239
other people or if it doesn't make sense

00:02:19,620 --> 00:02:23,040
for everyone we can still write our own

00:02:21,239 --> 00:02:24,920
rules and do lots of cool stuff there so

00:02:23,040 --> 00:02:27,840
that's a really nice benefit for us

00:02:24,920 --> 00:02:29,340
another thing that not everyone's talked

00:02:27,840 --> 00:02:31,950
about is just like sharing tooling

00:02:29,340 --> 00:02:33,569
across more teams so lyft has a large

00:02:31,950 --> 00:02:35,069
iOS team like I said but we also have a

00:02:33,569 --> 00:02:37,830
large Android team and we have a large

00:02:35,069 --> 00:02:39,629
server team and a lot of people hit the

00:02:37,830 --> 00:02:40,709
same kind of problems and what we found

00:02:39,629 --> 00:02:42,750
is we have like three or four

00:02:40,709 --> 00:02:44,160
infrastructure teams all kind of working

00:02:42,750 --> 00:02:46,319
on the exact same problems in different

00:02:44,160 --> 00:02:48,299
tool chains so really like if we could

00:02:46,319 --> 00:02:50,250
share some sort of tooling and

00:02:48,299 --> 00:02:51,630
infrastructure and knowledge we get some

00:02:50,250 --> 00:02:52,709
benefit from that as a company as a

00:02:51,630 --> 00:02:54,030
whole which is really nice

00:02:52,709 --> 00:02:56,069
and that's something obviously we're

00:02:54,030 --> 00:02:59,849
never gonna get from like the core iOS

00:02:56,069 --> 00:03:01,140
tooling and then of course you know some

00:02:59,849 --> 00:03:02,489
of the flashy features from basil like

00:03:01,140 --> 00:03:05,370
remote caching and execution are huge

00:03:02,489 --> 00:03:06,750
for us you know build times have

00:03:05,370 --> 00:03:08,610
increased a lot we have a lot of code

00:03:06,750 --> 00:03:10,200
about half of that code was written in

00:03:08,610 --> 00:03:12,780
the last six months so we're increasing

00:03:10,200 --> 00:03:14,519
very quickly and really there's no

00:03:12,780 --> 00:03:17,010
solution in the iOS world to build x

00:03:14,519 --> 00:03:19,139
besides some big change like this and

00:03:17,010 --> 00:03:21,780
especially an our code base where we

00:03:19,139 --> 00:03:24,030
kind of modular eyes so developers only

00:03:21,780 --> 00:03:25,560
work on a specific section of code but

00:03:24,030 --> 00:03:27,060
every time they pull that kind of like

00:03:25,560 --> 00:03:28,260
invalidates the whole build graph that

00:03:27,060 --> 00:03:30,060
pretty much meant that you know if they

00:03:28,260 --> 00:03:32,069
ever wanted to switch branches they're

00:03:30,060 --> 00:03:33,150
like doing a clean build so being able

00:03:32,069 --> 00:03:34,769
to use remote cache and kind of like

00:03:33,150 --> 00:03:36,750
eliminates this forest entirely which is

00:03:34,769 --> 00:03:38,099
great so those are some of the

00:03:36,750 --> 00:03:39,750
highlights you know we could talk about

00:03:38,099 --> 00:03:41,970
that more after the talk if you're

00:03:39,750 --> 00:03:43,079
interested and I want to kind of go

00:03:41,970 --> 00:03:44,400
through the process of how we migrated

00:03:43,079 --> 00:03:45,720
so you know there was a talk that

00:03:44,400 --> 00:03:47,609
covered this a little bit this morning

00:03:45,720 --> 00:03:49,739
as well our steps are maybe a little bit

00:03:47,609 --> 00:03:51,299
more iOS specific but of course your

00:03:49,739 --> 00:03:52,560
mileage may vary depending on the size

00:03:51,299 --> 00:03:57,030
of your company and what's going on

00:03:52,560 --> 00:03:59,639
there so the first big thing for the iOS

00:03:57,030 --> 00:04:01,139
side is that like I said they're kind of

00:03:59,639 --> 00:04:02,639
alluded to like the standard tooling

00:04:01,139 --> 00:04:04,829
really doesn't work once you're working

00:04:02,639 --> 00:04:06,389
on a large team and a big piece of this

00:04:04,829 --> 00:04:08,220
is like having your entire build

00:04:06,389 --> 00:04:11,849
configuration locked in this like close

00:04:08,220 --> 00:04:14,669
binary undocumented format so we took a

00:04:11,849 --> 00:04:16,079
few steps to get out of this like we

00:04:14,669 --> 00:04:18,750
kind of pulled all the settings we

00:04:16,079 --> 00:04:20,549
possibly could out which is may not

00:04:18,750 --> 00:04:21,900
sound like a lot but in the xcode world

00:04:20,549 --> 00:04:23,190
there's like thousands of settings you

00:04:21,900 --> 00:04:23,700
have no idea what they do you don't know

00:04:23,190 --> 00:04:25,440
how they

00:04:23,700 --> 00:04:27,180
that your build or if they apply to it

00:04:25,440 --> 00:04:29,070
at all so being able to like remove

00:04:27,180 --> 00:04:30,720
those and then reduce them as much as

00:04:29,070 --> 00:04:32,550
you can so you get an understanding of

00:04:30,720 --> 00:04:34,710
like what is my build even doing and

00:04:32,550 --> 00:04:36,630
like what Flags do I even rely on was a

00:04:34,710 --> 00:04:38,490
huge win for us and then the next piece

00:04:36,630 --> 00:04:40,050
was actually like just getting rid of

00:04:38,490 --> 00:04:41,400
this file stop checking it in start

00:04:40,050 --> 00:04:42,720
generating it from some other thing

00:04:41,400 --> 00:04:45,750
there's a bunch of great tools out there

00:04:42,720 --> 00:04:47,610
to do that but that gives us like a more

00:04:45,750 --> 00:04:49,980
clear path to move towards like build

00:04:47,610 --> 00:04:51,870
files as our source of truth and

00:04:49,980 --> 00:04:53,730
actually like the tools we wrote at this

00:04:51,870 --> 00:04:55,410
step to generate this project eventually

00:04:53,730 --> 00:04:56,910
helped us end up generating our build

00:04:55,410 --> 00:04:59,490
files which was kind of one of the steps

00:04:56,910 --> 00:05:01,470
mentioned before at Wix which is a

00:04:59,490 --> 00:05:02,700
really nice win for us because we had a

00:05:01,470 --> 00:05:06,150
bunch of modules so hand writing all

00:05:02,700 --> 00:05:07,830
that would have been a pain the next big

00:05:06,150 --> 00:05:11,460
step that we took was just kind of like

00:05:07,830 --> 00:05:13,290
reining in what our bill did you know of

00:05:11,460 --> 00:05:14,850
course your their parameters on this

00:05:13,290 --> 00:05:16,290
like you can't you know remove all the

00:05:14,850 --> 00:05:18,210
features of your build but there's

00:05:16,290 --> 00:05:19,860
plenty of stuff where maybe you don't

00:05:18,210 --> 00:05:21,000
need to be doing it that way or like you

00:05:19,860 --> 00:05:22,710
could simplify it and bring some

00:05:21,000 --> 00:05:24,990
consistency to your codebase and I think

00:05:22,710 --> 00:05:26,610
this has winds outside of making it

00:05:24,990 --> 00:05:28,770
easier to switch build systems for us

00:05:26,610 --> 00:05:30,300
this also means that developers look

00:05:28,770 --> 00:05:31,890
between different modules and they're

00:05:30,300 --> 00:05:33,510
all built exactly the same way they

00:05:31,890 --> 00:05:35,250
don't have to go and see like how

00:05:33,510 --> 00:05:36,480
different is this or is this gonna build

00:05:35,250 --> 00:05:38,280
in a really different way and I need to

00:05:36,480 --> 00:05:39,540
account for that somehow it's just every

00:05:38,280 --> 00:05:40,860
single module they move between and they

00:05:39,540 --> 00:05:42,810
work on like they all kind of look the

00:05:40,860 --> 00:05:44,400
same and this you know directly

00:05:42,810 --> 00:05:46,920
translates to how much work do we need

00:05:44,400 --> 00:05:47,820
to put in like understanding Basel rules

00:05:46,920 --> 00:05:49,470
because we're just like kind of

00:05:47,820 --> 00:05:51,630
eliminating entire rules that we needed

00:05:49,470 --> 00:05:53,820
to support the other thing that we did

00:05:51,630 --> 00:05:55,680
at this step was remove a bunch of third

00:05:53,820 --> 00:05:57,750
parties obviously you might have limited

00:05:55,680 --> 00:05:59,880
flexibility there too but we either

00:05:57,750 --> 00:06:02,310
removed them or we kind of pre compiled

00:05:59,880 --> 00:06:04,230
them so we kind of gave them to Basel as

00:06:02,310 --> 00:06:05,700
one thing that looked the same no matter

00:06:04,230 --> 00:06:08,370
how they were produced which means we

00:06:05,700 --> 00:06:10,140
could defer converting them to build

00:06:08,370 --> 00:06:13,890
with Basel which was a nice time saver

00:06:10,140 --> 00:06:15,180
too so that this was mentioned a few

00:06:13,890 --> 00:06:18,420
times today this might be controversial

00:06:15,180 --> 00:06:20,070
but for us not having a mono repo is

00:06:18,420 --> 00:06:21,390
actually not a true mono repo like

00:06:20,070 --> 00:06:24,000
Google it's more of like an iOS mono

00:06:21,390 --> 00:06:26,130
repo but that is where we are and all of

00:06:24,000 --> 00:06:28,410
our iOS code lives they're similar for

00:06:26,130 --> 00:06:29,640
Android again I don't think this is

00:06:28,410 --> 00:06:31,380
really basel specific you get a lot of

00:06:29,640 --> 00:06:32,370
nice code sharing benefits especially if

00:06:31,380 --> 00:06:33,930
you're like us where we're shipping

00:06:32,370 --> 00:06:36,120
multiple apps and we want to share a lot

00:06:33,930 --> 00:06:37,510
of code between multiple apps that's a

00:06:36,120 --> 00:06:39,220
nice win but

00:06:37,510 --> 00:06:41,050
this also matters once you start adding

00:06:39,220 --> 00:06:42,580
custom rules and custom macros either

00:06:41,050 --> 00:06:44,199
you're going to start maintaining

00:06:42,580 --> 00:06:46,510
different Basel workspaces across a

00:06:44,199 --> 00:06:48,880
bunch of repos for CI or something or

00:06:46,510 --> 00:06:50,110
you're going to end up having to do

00:06:48,880 --> 00:06:51,970
something like this and I think this is

00:06:50,110 --> 00:06:53,500
the better path but I'm happy to like

00:06:51,970 --> 00:06:56,740
have a holy war about this later if

00:06:53,500 --> 00:06:58,930
anyone's interested so so far nothing

00:06:56,740 --> 00:07:00,280
I've said is like specific to Basel but

00:06:58,930 --> 00:07:02,110
I think those are all good things to do

00:07:00,280 --> 00:07:04,750
even if you're not considering Basel yet

00:07:02,110 --> 00:07:06,190
unlike an iOS project but once you kind

00:07:04,750 --> 00:07:07,840
of get into it I think there's a few

00:07:06,190 --> 00:07:09,760
things that we did a few specific things

00:07:07,840 --> 00:07:10,960
that were nice so one was just trying to

00:07:09,760 --> 00:07:13,570
like ramp up with Basel in the first

00:07:10,960 --> 00:07:15,310
place so I think that Basel has a

00:07:13,570 --> 00:07:17,229
decently high learning curve I mean it's

00:07:15,310 --> 00:07:19,810
a complex tool it does a lot of great

00:07:17,229 --> 00:07:21,280
stuff but you kind of need to spend some

00:07:19,810 --> 00:07:23,229
time like figuring out how do ID bug

00:07:21,280 --> 00:07:24,940
this like what is the surface area of

00:07:23,229 --> 00:07:27,280
Basel that I need to understand for my

00:07:24,940 --> 00:07:29,800
project and for us this actually meant

00:07:27,280 --> 00:07:32,169
converting this like protobuf generation

00:07:29,800 --> 00:07:34,180
pipeline to use Basel for iOS so that we

00:07:32,169 --> 00:07:36,820
could get this understanding but also

00:07:34,180 --> 00:07:37,960
not impact developer experience at all

00:07:36,820 --> 00:07:39,850
so at this point like this was an

00:07:37,960 --> 00:07:41,380
entirely automated thing it kind of like

00:07:39,850 --> 00:07:44,229
vendored an artifact at the end the

00:07:41,380 --> 00:07:45,580
developers used but they had no

00:07:44,229 --> 00:07:46,389
awareness that we were building with

00:07:45,580 --> 00:07:47,710
Basel which meant that we could

00:07:46,389 --> 00:07:50,200
introduce it and get all this experience

00:07:47,710 --> 00:07:51,520
without having to like also ramp up

00:07:50,200 --> 00:07:52,750
developers on the Cure's how to build

00:07:51,520 --> 00:07:54,039
files work and all this stuff which we

00:07:52,750 --> 00:07:56,680
could kind of defer to later which is

00:07:54,039 --> 00:07:57,940
really nice the next kind of big step we

00:07:56,680 --> 00:08:00,400
did after that was like actually

00:07:57,940 --> 00:08:02,320
prototyping our build so this was

00:08:00,400 --> 00:08:04,660
mentioned earlier in the talk from the

00:08:02,320 --> 00:08:06,490
BMW folks but just trying to get a sense

00:08:04,660 --> 00:08:08,740
of like what are the issues what is the

00:08:06,490 --> 00:08:10,330
scope of like moving to Basel so for us

00:08:08,740 --> 00:08:12,789
this matte like building are more

00:08:10,330 --> 00:08:14,380
complex app and just trying to like see

00:08:12,789 --> 00:08:16,150
where are the places where we may need

00:08:14,380 --> 00:08:17,560
to change stuff to make it work in a way

00:08:16,150 --> 00:08:18,789
that works for Basel and where are

00:08:17,560 --> 00:08:21,190
places where maybe we need to contribute

00:08:18,789 --> 00:08:22,960
something back to Basel to work in a way

00:08:21,190 --> 00:08:25,690
that makes sense for a swift app or

00:08:22,960 --> 00:08:27,520
whatever I think this was the first time

00:08:25,690 --> 00:08:29,229
we really had a sense of like how big is

00:08:27,520 --> 00:08:33,219
the scope of moving to Basel actually

00:08:29,229 --> 00:08:34,750
going to be for our project so of course

00:08:33,219 --> 00:08:36,279
I've talked about a lot of times so far

00:08:34,750 --> 00:08:38,409
but you know the next kind of step for

00:08:36,279 --> 00:08:41,320
us was actually like contributing back a

00:08:38,409 --> 00:08:43,599
bunch of these fixes to the rules or to

00:08:41,320 --> 00:08:45,850
the core Basel pieces that kind of

00:08:43,599 --> 00:08:47,920
interact with the iOS stuff and then we

00:08:45,850 --> 00:08:49,150
kind of spend some time like abstracting

00:08:47,920 --> 00:08:50,180
away some of the things that we didn't

00:08:49,150 --> 00:08:52,550
want to

00:08:50,180 --> 00:08:54,589
in developers faces so on the iOS side

00:08:52,550 --> 00:08:57,020
this meant kind of abstracting things

00:08:54,589 --> 00:08:58,910
that make sense in Basel but not for

00:08:57,020 --> 00:09:01,520
people coming from this xcode background

00:08:58,910 --> 00:09:03,230
so specifically they're like basil has

00:09:01,520 --> 00:09:05,089
this divide between like library and

00:09:03,230 --> 00:09:06,380
packaging targets and xcode doesn't

00:09:05,089 --> 00:09:07,760
really have that and we didn't really

00:09:06,380 --> 00:09:09,890
think it was valuable to kind of expose

00:09:07,760 --> 00:09:11,360
that to developers long-term so we kind

00:09:09,890 --> 00:09:12,800
of like made a higher-level macro around

00:09:11,360 --> 00:09:14,570
these things to make it a little bit

00:09:12,800 --> 00:09:17,300
more like approachable for iOS engineers

00:09:14,570 --> 00:09:18,560
but regardless of like how you decide to

00:09:17,300 --> 00:09:19,970
abstract that I think there's a lot of

00:09:18,560 --> 00:09:22,339
work here of like rules you have to

00:09:19,970 --> 00:09:23,750
write or macros or whatever that you're

00:09:22,339 --> 00:09:24,950
gonna have to spend a decent amount of

00:09:23,750 --> 00:09:30,470
time on to like actually get everything

00:09:24,950 --> 00:09:31,520
close to working for real so Dave is

00:09:30,470 --> 00:09:33,050
gonna spend the second half of this talk

00:09:31,520 --> 00:09:35,630
like talking more about what we went

00:09:33,050 --> 00:09:38,930
through to make this work well in the

00:09:35,630 --> 00:09:41,029
IDE but we decided at this point that we

00:09:38,930 --> 00:09:43,130
didn't want to like fully migrate to

00:09:41,029 --> 00:09:44,630
Basel locally in the IDE for developers

00:09:43,130 --> 00:09:46,970
and it's just because integrating with

00:09:44,630 --> 00:09:50,390
Xcode is pretty difficult so we decided

00:09:46,970 --> 00:09:51,950
to like generate a project from Basel as

00:09:50,390 --> 00:09:53,870
the source of truth but still building

00:09:51,950 --> 00:09:55,100
with Xcode which is a nice like stepping

00:09:53,870 --> 00:09:56,630
stone and I think it's kind of required

00:09:55,100 --> 00:09:59,510
given how much work it is to make it

00:09:56,630 --> 00:10:00,860
work in IDE right now so we kind of were

00:09:59,510 --> 00:10:02,660
able to punt on that but still have

00:10:00,860 --> 00:10:06,620
basel being the only source of truth for

00:10:02,660 --> 00:10:08,480
our builds which is really nice so of

00:10:06,620 --> 00:10:09,589
course you know before we ship something

00:10:08,480 --> 00:10:12,290
to all of our engineers we want to

00:10:09,589 --> 00:10:14,060
document it some I think this we have to

00:10:12,290 --> 00:10:15,560
do this for a few reasons I think one is

00:10:14,060 --> 00:10:17,510
there is a lot of documentation out

00:10:15,560 --> 00:10:19,339
there about Basel stuff but there's it's

00:10:17,510 --> 00:10:21,140
a lot of like raw documentation I don't

00:10:19,339 --> 00:10:23,450
really think we'd want to throw iOS

00:10:21,140 --> 00:10:25,339
engineers out like here is the core

00:10:23,450 --> 00:10:27,500
documentation for all the rules like

00:10:25,339 --> 00:10:30,709
have fun so we spent a decent amount of

00:10:27,500 --> 00:10:32,600
time like documenting our API for our

00:10:30,709 --> 00:10:34,130
macros and stuff and then you know some

00:10:32,600 --> 00:10:35,480
brief basil usage if people really

00:10:34,130 --> 00:10:37,310
wanted to use it but realistically most

00:10:35,480 --> 00:10:38,750
people were still kind of like just

00:10:37,310 --> 00:10:40,040
running the same kind of abstract

00:10:38,750 --> 00:10:43,940
command they weren't interacting with

00:10:40,040 --> 00:10:45,709
basil directly and that was the kind of

00:10:43,940 --> 00:10:47,810
the those really like the biggest steps

00:10:45,709 --> 00:10:50,329
we took so obviously that would took

00:10:47,810 --> 00:10:52,100
like multiple months but you know that

00:10:50,329 --> 00:10:54,020
was that was the biggest piece those

00:10:52,100 --> 00:10:55,279
were the biggest pieces but of course at

00:10:54,020 --> 00:10:57,170
this point we weren't really done we had

00:10:55,279 --> 00:10:58,579
a lot of more work to do the ID piece

00:10:57,170 --> 00:11:00,290
the Dave's gonna talk about was a huge

00:10:58,579 --> 00:11:01,610
amount of that at this point we still

00:11:00,290 --> 00:11:03,110
hadn't like set up a remote cache or

00:11:01,610 --> 00:11:03,810
anything and there's also like a lot of

00:11:03,110 --> 00:11:05,700
other low

00:11:03,810 --> 00:11:06,990
fruit that we can improve and our build

00:11:05,700 --> 00:11:08,640
so like just improve developer

00:11:06,990 --> 00:11:11,640
experience in general which is actually

00:11:08,640 --> 00:11:12,840
really exciting so I want to talk

00:11:11,640 --> 00:11:14,700
through a little bit about like what

00:11:12,840 --> 00:11:15,930
went well for our migration and then a

00:11:14,700 --> 00:11:19,560
little bit about what didn't go so well

00:11:15,930 --> 00:11:20,970
so first off iterating with star lark

00:11:19,560 --> 00:11:21,810
we've heard a little bit about star lark

00:11:20,970 --> 00:11:24,029
and like moving some of this native

00:11:21,810 --> 00:11:25,680
stuff out and overall like this is one

00:11:24,029 --> 00:11:27,089
of the most positive things I think in

00:11:25,680 --> 00:11:29,190
the way the highest rules are currently

00:11:27,089 --> 00:11:30,690
set up so if you're not familiar with 5s

00:11:29,190 --> 00:11:32,400
rules there's a few different repos but

00:11:30,690 --> 00:11:34,470
they're almost entirely in star lark

00:11:32,400 --> 00:11:37,080
except for some shared stuff that lives

00:11:34,470 --> 00:11:38,670
in the native code if you're exclusively

00:11:37,080 --> 00:11:40,730
Swift like we are you have to deal this

00:11:38,670 --> 00:11:43,290
with the native stuff which is nice but

00:11:40,730 --> 00:11:44,850
working with star lark rules sets is

00:11:43,290 --> 00:11:46,050
like much nicer I think it's much more

00:11:44,850 --> 00:11:48,720
approachable if you don't come from a

00:11:46,050 --> 00:11:50,070
job Java backgrounds which I do not but

00:11:48,720 --> 00:11:51,960
also there's some really cool tools for

00:11:50,070 --> 00:11:53,040
being able to like point at a local

00:11:51,960 --> 00:11:55,320
checkout while you're working on

00:11:53,040 --> 00:11:56,580
something or apply some patches in your

00:11:55,320 --> 00:11:58,950
work space while you're waiting on a PR

00:11:56,580 --> 00:12:01,260
to be emerged that like helps really

00:11:58,950 --> 00:12:02,610
speed up like applying new fixes without

00:12:01,260 --> 00:12:04,980
having to wait for a full new basil

00:12:02,610 --> 00:12:05,970
release which is really great and the

00:12:04,980 --> 00:12:07,470
other thing that we heard a little bit

00:12:05,970 --> 00:12:09,930
about with the basil Federation talk is

00:12:07,470 --> 00:12:11,700
like the the release cycle is flexible

00:12:09,930 --> 00:12:13,080
for better or worse and for us this

00:12:11,700 --> 00:12:16,020
meant that we would submit a bunch of

00:12:13,080 --> 00:12:17,700
fixes to rules repos and they would

00:12:16,020 --> 00:12:19,140
merge and we had just update to like the

00:12:17,700 --> 00:12:20,580
newest head of those repos and of course

00:12:19,140 --> 00:12:22,170
there's some risk with that but it also

00:12:20,580 --> 00:12:23,880
has the added benefit of like we could

00:12:22,170 --> 00:12:26,160
move really fast as we were submitting

00:12:23,880 --> 00:12:27,480
new patches and you know reduce the risk

00:12:26,160 --> 00:12:29,240
of updates each time which is really

00:12:27,480 --> 00:12:31,290
great

00:12:29,240 --> 00:12:33,960
another thing that worked really well

00:12:31,290 --> 00:12:35,940
for us you know I kind of alluded to

00:12:33,960 --> 00:12:37,589
this but you know making reducing what

00:12:35,940 --> 00:12:39,839
we could do and like what we had to do

00:12:37,589 --> 00:12:42,390
to move really save us a bunch of time

00:12:39,839 --> 00:12:43,860
and just in general this simplification

00:12:42,390 --> 00:12:45,870
I mean this totally makes sense of

00:12:43,860 --> 00:12:47,220
course and you know you may or may not

00:12:45,870 --> 00:12:48,480
be able to simplify as much as we did

00:12:47,220 --> 00:12:49,980
but that really saved us a bunch of time

00:12:48,480 --> 00:12:51,780
because we could just totally ignore

00:12:49,980 --> 00:12:53,730
parts of basil that we just don't even

00:12:51,780 --> 00:12:54,780
have to deal with yet you know and we

00:12:53,730 --> 00:12:56,550
may have to eventually but in the

00:12:54,780 --> 00:12:57,750
meantime we have like basil working

00:12:56,550 --> 00:12:59,900
which is really nice because we started

00:12:57,750 --> 00:13:02,070
to see some of the benefits

00:12:59,900 --> 00:13:03,990
another thing that hasn't been talked

00:13:02,070 --> 00:13:07,440
about as much during this basil con but

00:13:03,990 --> 00:13:09,570
was a lot last year is forking so we've

00:13:07,440 --> 00:13:11,250
decided and I continue to decide to

00:13:09,570 --> 00:13:15,089
never fork basil or any of the rules

00:13:11,250 --> 00:13:16,830
repos which you know has advantages and

00:13:15,089 --> 00:13:18,620
disadvantages I'd say that the reasons

00:13:16,830 --> 00:13:21,420
we decided to do this

00:13:18,620 --> 00:13:22,680
where there are a few primary ones so

00:13:21,420 --> 00:13:24,810
one is that the community is moving

00:13:22,680 --> 00:13:26,430
really fast and at some point you're

00:13:24,810 --> 00:13:27,780
going to have to update in the iOS

00:13:26,430 --> 00:13:29,850
community it's probably going to be

00:13:27,780 --> 00:13:31,200
because you know Xcode releases a new

00:13:29,850 --> 00:13:33,150
version and there need to be some rules

00:13:31,200 --> 00:13:34,470
changes related to it and to update the

00:13:33,150 --> 00:13:35,700
rules you may have to update basel

00:13:34,470 --> 00:13:38,250
because they're kind of tied to what's

00:13:35,700 --> 00:13:39,930
in basel core so if you're gonna fork

00:13:38,250 --> 00:13:43,620
you're kind of committing to a long term

00:13:39,930 --> 00:13:45,060
maintenance cost of this i think the

00:13:43,620 --> 00:13:46,650
other problem part from the community

00:13:45,060 --> 00:13:47,940
perspective is that we're really

00:13:46,650 --> 00:13:49,320
interested in like investing in the

00:13:47,940 --> 00:13:50,970
communities so that we can bring down

00:13:49,320 --> 00:13:53,370
the cost of adoption for everyone else

00:13:50,970 --> 00:13:55,140
so that more iOS teams can move on to

00:13:53,370 --> 00:13:57,510
basel and then we can kind of all solve

00:13:55,140 --> 00:13:59,340
the same problems around the same tool

00:13:57,510 --> 00:14:00,660
which is like the first big time we've

00:13:59,340 --> 00:14:01,980
been able to do this with such a big

00:14:00,660 --> 00:14:04,650
tool in the iOS community which is

00:14:01,980 --> 00:14:06,600
really great but if those don't work for

00:14:04,650 --> 00:14:08,070
you you can think of like if you merge

00:14:06,600 --> 00:14:09,300
your changes upstream instead of just

00:14:08,070 --> 00:14:10,560
keeping them locally in a fork you're

00:14:09,300 --> 00:14:14,250
getting integration testing from other

00:14:10,560 --> 00:14:15,720
companies which is probably nice so kind

00:14:14,250 --> 00:14:18,270
of related to that we've also chose to

00:14:15,720 --> 00:14:20,220
like always stay super up-to-date and

00:14:18,270 --> 00:14:21,900
this means like testing release

00:14:20,220 --> 00:14:22,620
candidates updating basal-like

00:14:21,900 --> 00:14:24,210
immediately

00:14:22,620 --> 00:14:27,990
after it's released and like updating

00:14:24,210 --> 00:14:29,340
rules weekly and and again the reasons

00:14:27,990 --> 00:14:30,480
are kind of related like the community

00:14:29,340 --> 00:14:32,310
is moving really fast you're going to

00:14:30,480 --> 00:14:33,750
have to update at some point the longer

00:14:32,310 --> 00:14:37,440
you wait the more difficult that's going

00:14:33,750 --> 00:14:38,940
to be you know you may think that like

00:14:37,440 --> 00:14:40,320
by staying on 1.0 you'll be able to

00:14:38,940 --> 00:14:42,360
avoid some breaking changes or maybe you

00:14:40,320 --> 00:14:43,650
only update to 1.1 but realistically you

00:14:42,360 --> 00:14:44,940
know there might be unintentional

00:14:43,650 --> 00:14:47,340
breaking changes so like that's not

00:14:44,940 --> 00:14:48,390
going to save you a bunch at some point

00:14:47,340 --> 00:14:49,620
you're gonna have to update and you

00:14:48,390 --> 00:14:51,090
don't want it to be in like a mad rush

00:14:49,620 --> 00:14:52,320
where it's like oh man we found this bug

00:14:51,090 --> 00:14:54,240
in our build and now we really have to

00:14:52,320 --> 00:14:57,030
update today otherwise you know we're

00:14:54,240 --> 00:14:58,680
totally screwed and of course the

00:14:57,030 --> 00:15:00,000
biggest reason maybe you'd say to not do

00:14:58,680 --> 00:15:03,240
this is that you want other people to

00:15:00,000 --> 00:15:04,740
find your bugs first and that could work

00:15:03,240 --> 00:15:06,660
I guess my counter-argument to that is

00:15:04,740 --> 00:15:08,160
that basil is a really complex tool with

00:15:06,660 --> 00:15:09,420
a really large surface area and we're

00:15:08,160 --> 00:15:11,820
all using it in slightly different ways

00:15:09,420 --> 00:15:14,760
so I'm not actually sure that by waiting

00:15:11,820 --> 00:15:16,890
another month code for us not updating

00:15:14,760 --> 00:15:18,720
like our specific bug will be discovered

00:15:16,890 --> 00:15:20,010
and fixed by the time that we would

00:15:18,720 --> 00:15:21,030
actually update so I kind of think it

00:15:20,010 --> 00:15:22,950
gives you this like false sense of

00:15:21,030 --> 00:15:24,630
security that like oh I waited a month

00:15:22,950 --> 00:15:26,280
so now it's totally stable when in

00:15:24,630 --> 00:15:27,840
reality it's just like well no one's

00:15:26,280 --> 00:15:29,160
using it the exact same way you are so

00:15:27,840 --> 00:15:31,060
we've decided to do this and I think

00:15:29,160 --> 00:15:33,940
this is worked pretty well for us

00:15:31,060 --> 00:15:36,820
so the last thing that I want to mention

00:15:33,940 --> 00:15:38,770
about this is just generally keeping up

00:15:36,820 --> 00:15:39,940
with the community so you know this may

00:15:38,770 --> 00:15:40,990
seem like a lot of work because there's

00:15:39,940 --> 00:15:42,100
a lot of stuff happening the basal

00:15:40,990 --> 00:15:43,360
community and you hear from a lot of

00:15:42,100 --> 00:15:45,250
people like Oh stuff is changing

00:15:43,360 --> 00:15:46,720
changing so fast and that makes it hard

00:15:45,250 --> 00:15:48,070
to update and stuff but I actually think

00:15:46,720 --> 00:15:49,690
this is kind of a huge advantage and

00:15:48,070 --> 00:15:51,760
coming from this iOS background where

00:15:49,690 --> 00:15:53,260
you can't keep up with the community

00:15:51,760 --> 00:15:54,970
around the build because this is all

00:15:53,260 --> 00:15:56,590
just closed source stuff that you can't

00:15:54,970 --> 00:15:58,150
actually pay attention to or have any

00:15:56,590 --> 00:15:59,560
input on this is like an entirely

00:15:58,150 --> 00:16:01,630
different thing where you know I can

00:15:59,560 --> 00:16:03,280
subscribe to the commits RSS feed and

00:16:01,630 --> 00:16:04,870
see everything coming down the pipe for

00:16:03,280 --> 00:16:06,160
what's happening in Basel or what's

00:16:04,870 --> 00:16:08,560
happening in the rules which is super

00:16:06,160 --> 00:16:10,060
powerful and then you know we end up not

00:16:08,560 --> 00:16:11,500
being surprised by changes when they

00:16:10,060 --> 00:16:13,420
actually ship which is really great or

00:16:11,500 --> 00:16:15,850
see great features coming down the pipe

00:16:13,420 --> 00:16:17,620
ahead of time also this like helps us

00:16:15,850 --> 00:16:18,820
you know identify what other people in

00:16:17,620 --> 00:16:20,050
the community are interested in and

00:16:18,820 --> 00:16:21,820
maybe try to collaborate with them on

00:16:20,050 --> 00:16:23,020
something that they're working on that

00:16:21,820 --> 00:16:27,730
we're also interested in which is really

00:16:23,020 --> 00:16:29,470
cool so you know all tools have

00:16:27,730 --> 00:16:30,640
trade-offs so I want to talk about some

00:16:29,470 --> 00:16:33,580
of the things that didn't go as well for

00:16:30,640 --> 00:16:34,720
us but I have a disclaimer that you know

00:16:33,580 --> 00:16:36,130
Basil's really great I think if we

00:16:34,720 --> 00:16:37,300
hadn't migrated like our developer

00:16:36,130 --> 00:16:38,740
experience would be much worse than it

00:16:37,300 --> 00:16:40,900
is today and I don't think we would have

00:16:38,740 --> 00:16:42,760
any clear path towards improving it

00:16:40,900 --> 00:16:44,830
because of the tools the apple provides

00:16:42,760 --> 00:16:45,880
us but I want to talk about a few of the

00:16:44,830 --> 00:16:47,980
things that kind of like hurt us the

00:16:45,880 --> 00:16:50,410
most during the the migration and

00:16:47,980 --> 00:16:52,360
possibly still today so you know first

00:16:50,410 --> 00:16:55,620
off I think that the adoption cost is

00:16:52,360 --> 00:16:57,940
super high so I mean there's the kind of

00:16:55,620 --> 00:16:59,200
unsurprising cost of you know it's a

00:16:57,940 --> 00:17:01,030
complex tool you have to learn about it

00:16:59,200 --> 00:17:02,440
there's definitely that you know Dave

00:17:01,030 --> 00:17:03,730
like I said a few times we'll talk about

00:17:02,440 --> 00:17:06,580
the ID piece which is probably the

00:17:03,730 --> 00:17:08,440
highest costs for us and I do think that

00:17:06,580 --> 00:17:10,570
you know the larger project is the more

00:17:08,440 --> 00:17:12,250
scope you might have to support and then

00:17:10,570 --> 00:17:14,530
the more rules you depend on and then

00:17:12,250 --> 00:17:16,030
the more issues you find as you try to

00:17:14,530 --> 00:17:18,460
migrate to them so there's definitely

00:17:16,030 --> 00:17:20,350
like a possible scope creep there that

00:17:18,460 --> 00:17:21,970
could be increase this even more I think

00:17:20,350 --> 00:17:25,120
a big piece of this in the iOS community

00:17:21,970 --> 00:17:27,190
is that you know Basil's written by

00:17:25,120 --> 00:17:28,300
Google with the way the Google works on

00:17:27,190 --> 00:17:30,460
things which is very different I think

00:17:28,300 --> 00:17:32,080
from how a lot of like more standard iOS

00:17:30,460 --> 00:17:33,550
companies work were just companies who

00:17:32,080 --> 00:17:35,830
don't ship hundreds of apps with like

00:17:33,550 --> 00:17:37,210
thousands of engineers and so I think

00:17:35,830 --> 00:17:39,250
very quickly when you start adopting

00:17:37,210 --> 00:17:40,750
basil you kind of hit some wall where

00:17:39,250 --> 00:17:42,370
you're kind of surprised because you're

00:17:40,750 --> 00:17:43,840
like wow I really expected it would have

00:17:42,370 --> 00:17:44,980
support supported this like in the

00:17:43,840 --> 00:17:46,870
objective-c land this is

00:17:44,980 --> 00:17:48,669
like not supporting header maps and in

00:17:46,870 --> 00:17:50,110
the swift land maybe it's like your

00:17:48,669 --> 00:17:51,490
imports are based on the directory

00:17:50,110 --> 00:17:52,840
structure of your source code which is

00:17:51,490 --> 00:17:54,190
just something like iOS Engineers really

00:17:52,840 --> 00:17:56,350
don't expect so you end up hitting

00:17:54,190 --> 00:17:58,330
something like this that causes you to

00:17:56,350 --> 00:18:00,070
either change your own code or find a

00:17:58,330 --> 00:18:01,510
workaround or contribute it back to

00:18:00,070 --> 00:18:03,100
Basel or something but all of those

00:18:01,510 --> 00:18:06,130
things can end up taking a decent amount

00:18:03,100 --> 00:18:07,450
of your time another thing that's been

00:18:06,130 --> 00:18:08,710
talked about a few times this morning is

00:18:07,450 --> 00:18:10,030
just transitive dependency management in

00:18:08,710 --> 00:18:12,280
the workspace is really difficult I

00:18:10,030 --> 00:18:14,710
think the big surprising piece here for

00:18:12,280 --> 00:18:16,630
us was that we didn't expect to end up

00:18:14,710 --> 00:18:18,190
depending on like almost all public rule

00:18:16,630 --> 00:18:19,809
sets but that's kind of been the reality

00:18:18,190 --> 00:18:21,340
because once you depend on a few rule

00:18:19,809 --> 00:18:22,690
sets like the iOS ones and then maybe

00:18:21,340 --> 00:18:24,490
you pull in a tool like build a fire

00:18:22,690 --> 00:18:25,809
that's written go and you have these you

00:18:24,490 --> 00:18:27,280
kind of just end up with everything and

00:18:25,809 --> 00:18:29,530
at that point you really do have to be

00:18:27,280 --> 00:18:31,540
careful about oh this this specific

00:18:29,530 --> 00:18:33,640
version of skylib or whatever is you

00:18:31,540 --> 00:18:34,990
know trans of lien compatible and we've

00:18:33,640 --> 00:18:37,540
actually been blocked by that specific

00:18:34,990 --> 00:18:38,410
issue from updating rules before so you

00:18:37,540 --> 00:18:39,520
have to kind of be careful about this

00:18:38,410 --> 00:18:40,840
obviously this is what the basel

00:18:39,520 --> 00:18:42,460
federation is designed to solve so I

00:18:40,840 --> 00:18:46,330
really have excited about that in the

00:18:42,460 --> 00:18:48,040
future you know like I said earlier this

00:18:46,330 --> 00:18:49,750
kind of worked well for us but I also

00:18:48,040 --> 00:18:53,110
think that staying up-to-date is really

00:18:49,750 --> 00:18:54,400
required right now again you know you're

00:18:53,110 --> 00:18:56,110
gonna have to update at some point so if

00:18:54,400 --> 00:18:57,130
we agree on that like then the next

00:18:56,110 --> 00:18:58,600
piece is that kind of everything is

00:18:57,130 --> 00:18:59,980
intertwined so if you update rules

00:18:58,600 --> 00:19:01,419
you're gonna have to update basel and

00:18:59,980 --> 00:19:04,000
vice-versa at some point you're going to

00:19:01,419 --> 00:19:05,440
so we've found the best way to do this

00:19:04,000 --> 00:19:07,750
is to kind of treat our project more

00:19:05,440 --> 00:19:10,540
like a mono repo where with most rules

00:19:07,750 --> 00:19:12,070
repos we assume head and then we assume

00:19:10,540 --> 00:19:13,360
the newest Basel version and that works

00:19:12,070 --> 00:19:16,780
well for us and this makes sense because

00:19:13,360 --> 00:19:17,919
obviously what Google is doing here but

00:19:16,780 --> 00:19:19,390
you know the worst case scenario that

00:19:17,919 --> 00:19:21,070
I'm sure many of you have heard of here

00:19:19,390 --> 00:19:22,840
is that you can end up being stuck

00:19:21,070 --> 00:19:24,220
behind like one team at lyft who is

00:19:22,840 --> 00:19:25,990
stuck behind because of a version of

00:19:24,220 --> 00:19:28,210
protobuf and some transitive dependency

00:19:25,990 --> 00:19:29,500
conflicts and that makes it really tough

00:19:28,210 --> 00:19:30,760
for them to update and now they're like

00:19:29,500 --> 00:19:34,809
a year behind that bazel versions which

00:19:30,760 --> 00:19:35,950
is really unfortunate so another thing

00:19:34,809 --> 00:19:37,780
we're kind of surprised by you know

00:19:35,950 --> 00:19:39,460
hermeticity is this like core really a

00:19:37,780 --> 00:19:42,010
great feature of basel that really like

00:19:39,460 --> 00:19:43,299
separates it from how it works in xcode

00:19:42,010 --> 00:19:45,760
and really enables some of these great

00:19:43,299 --> 00:19:47,049
features but we've been surprised with

00:19:45,760 --> 00:19:49,540
kind of like how brittle this has been

00:19:47,049 --> 00:19:51,190
for us and there's a few problems with

00:19:49,540 --> 00:19:53,049
that I mean one is just that it can kind

00:19:51,190 --> 00:19:55,480
of happen anywhere in the stack so like

00:19:53,049 --> 00:19:56,799
any piece of basil can break this you

00:19:55,480 --> 00:19:58,210
know it can be the rules or like basil

00:19:56,799 --> 00:20:00,310
core stuff or just

00:19:58,210 --> 00:20:02,560
anywhere and then the problem that you

00:20:00,310 --> 00:20:04,780
get hit with when this happens is that

00:20:02,560 --> 00:20:06,280
you totally break remote caching and for

00:20:04,780 --> 00:20:08,920
us that means like totally destroying

00:20:06,280 --> 00:20:10,570
build times and so we've had to do a few

00:20:08,920 --> 00:20:13,030
things to like make sure this isn't the

00:20:10,570 --> 00:20:14,830
case like we wrap everyone's basil in

00:20:13,030 --> 00:20:16,150
vacations and make sure the paths are

00:20:14,830 --> 00:20:17,140
identical because otherwise you

00:20:16,150 --> 00:20:19,150
definitely will never get a cache hit

00:20:17,140 --> 00:20:20,560
and stuff like that but you have to be

00:20:19,150 --> 00:20:21,790
really careful I think to make sure you

00:20:20,560 --> 00:20:23,440
don't break these and especially if you

00:20:21,790 --> 00:20:25,420
do you end up having to spend a lot of

00:20:23,440 --> 00:20:27,160
time like trying to debug you know see I

00:20:25,420 --> 00:20:29,680
built this locally I built this like

00:20:27,160 --> 00:20:33,670
where did the first problem show up

00:20:29,680 --> 00:20:35,050
which can also be pretty hard to do and

00:20:33,670 --> 00:20:36,900
lastly I feel like since this is an iOS

00:20:35,050 --> 00:20:38,950
talk I have to have to mention this so

00:20:36,900 --> 00:20:40,300
right now in the basil community like

00:20:38,950 --> 00:20:41,890
unfortunately iOS is a little bit of a

00:20:40,300 --> 00:20:42,910
second-class citizen I think some of

00:20:41,890 --> 00:20:44,350
this is just because you know

00:20:42,910 --> 00:20:45,880
historically there haven't been a lot of

00:20:44,350 --> 00:20:47,980
companies who want to make a big move

00:20:45,880 --> 00:20:49,240
like this to another build tool and I

00:20:47,980 --> 00:20:51,460
think this is something that can really

00:20:49,240 --> 00:20:53,320
change over time especially as many of

00:20:51,460 --> 00:20:55,750
you like decide that moving to basil is

00:20:53,320 --> 00:20:58,270
the right choice but right now this kind

00:20:55,750 --> 00:21:00,550
of hits you with different issues some

00:20:58,270 --> 00:21:01,870
like fix will get merged for a Linux

00:21:00,550 --> 00:21:03,100
thing that happens to break a mac OS

00:21:01,870 --> 00:21:04,930
thing because of different assumptions

00:21:03,100 --> 00:21:06,310
about how this stuff works or you know

00:21:04,930 --> 00:21:08,200
we don't get support from services like

00:21:06,310 --> 00:21:10,630
Google RBE because you know it's a

00:21:08,200 --> 00:21:12,460
smaller market than the you know Linux

00:21:10,630 --> 00:21:13,630
side of things so I'm hoping this will

00:21:12,460 --> 00:21:15,370
change more in the future and I think

00:21:13,630 --> 00:21:16,420
it's improving already but currently I

00:21:15,370 --> 00:21:19,150
think this is still a little bit the

00:21:16,420 --> 00:21:21,490
state and I have to leave a positive

00:21:19,150 --> 00:21:23,860
note so I sold this from some from

00:21:21,490 --> 00:21:25,750
Oscar's talk later but I think that like

00:21:23,860 --> 00:21:28,900
overall you know this was the experience

00:21:25,750 --> 00:21:30,010
of us migrating but I think basil has a

00:21:28,900 --> 00:21:31,510
really bright future in the iOS

00:21:30,010 --> 00:21:32,680
community and in more communities too

00:21:31,510 --> 00:21:34,660
but this is the one I'm particularly

00:21:32,680 --> 00:21:36,430
interested in and I think that as we all

00:21:34,660 --> 00:21:38,350
continue to adopt basil and contribute

00:21:36,430 --> 00:21:40,270
back you know we can really lower the

00:21:38,350 --> 00:21:41,800
costs for everyone to adopt basil in the

00:21:40,270 --> 00:21:45,160
future which i think is better for all

00:21:41,800 --> 00:21:48,280
of us so Dave is gonna talk a little bit

00:21:45,160 --> 00:21:53,490
more about how he integrated basil index

00:21:48,280 --> 00:21:56,440
good thanks thank you thanks

00:21:53,490 --> 00:21:58,809
thanks Keith so I'm Dave I work at lift

00:21:56,440 --> 00:22:01,570
as well and as you can see I'm going to

00:21:58,809 --> 00:22:06,820
talk about ID integration which for Act

00:22:01,570 --> 00:22:08,590
for iOS that means Xcode so for we all

00:22:06,820 --> 00:22:10,300
talk here about builds everything's

00:22:08,590 --> 00:22:12,360
build build build but when you're doing

00:22:10,300 --> 00:22:14,620
development a lot of that activity is is

00:22:12,360 --> 00:22:16,600
other things and builds are kind of this

00:22:14,620 --> 00:22:19,210
secondary thing the developers are

00:22:16,600 --> 00:22:21,160
writing code designing things and then

00:22:19,210 --> 00:22:23,710
there's this gap between may hit build

00:22:21,160 --> 00:22:25,270
and does my code actually work so

00:22:23,710 --> 00:22:27,880
there's a lot of things that we had to

00:22:25,270 --> 00:22:30,429
make work in order to integrate basil

00:22:27,880 --> 00:22:33,490
while keeping in like as much as

00:22:30,429 --> 00:22:35,350
possible a native Xcode experience and

00:22:33,490 --> 00:22:40,179
keeping the build keeping basil and

00:22:35,350 --> 00:22:43,179
implementation detail so right now there

00:22:40,179 --> 00:22:45,370
are two options on the market for Xcode

00:22:43,179 --> 00:22:48,730
basil integration there's tulsi by

00:22:45,370 --> 00:22:50,290
Google and then XE amer by Pinterest XE

00:22:48,730 --> 00:22:53,320
hammer makes use of tell C as well so

00:22:50,290 --> 00:22:55,300
there's a bit of shared benefits going

00:22:53,320 --> 00:22:56,440
on there and when we were trying to

00:22:55,300 --> 00:22:59,830
figure it out we had a couple

00:22:56,440 --> 00:23:01,690
considerations to consider we had the

00:22:59,830 --> 00:23:03,670
work flow our developers already have

00:23:01,690 --> 00:23:05,590
we have conventions in our project and

00:23:03,670 --> 00:23:08,140
assumptions and then there were a few

00:23:05,590 --> 00:23:10,059
other things and we started with these

00:23:08,140 --> 00:23:12,190
but there and while they might be great

00:23:10,059 --> 00:23:13,809
for getting started for us the thing

00:23:12,190 --> 00:23:16,929
that they really provided was a third

00:23:13,809 --> 00:23:18,580
option which was learning from them and

00:23:16,929 --> 00:23:19,050
like Google and Pinterest we made our

00:23:18,580 --> 00:23:22,050
own

00:23:19,050 --> 00:23:24,340
so unlike Google and Pinterest were not

00:23:22,050 --> 00:23:27,360
necessarily gonna open-source it we may

00:23:24,340 --> 00:23:30,400
people ask us we'll see what happens but

00:23:27,360 --> 00:23:33,280
by taking on full maintenance of our own

00:23:30,400 --> 00:23:35,559
project generator we buy an opportunity

00:23:33,280 --> 00:23:37,059
to have a tool that's custom-made for

00:23:35,559 --> 00:23:40,030
our lifts for our repos for our

00:23:37,059 --> 00:23:42,160
workflows all of that but the good news

00:23:40,030 --> 00:23:44,230
is that basil and the open source

00:23:42,160 --> 00:23:45,550
community in general provide all the

00:23:44,230 --> 00:23:47,830
building blocks to write your own

00:23:45,550 --> 00:23:50,080
project generator and so for the rest of

00:23:47,830 --> 00:23:54,520
this I'll kind of go into details about

00:23:50,080 --> 00:23:56,410
how you might do this so we have a

00:23:54,520 --> 00:23:58,750
fairly modular project Keith I think

00:23:56,410 --> 00:24:01,240
mentioned that so every single poll

00:23:58,750 --> 00:24:03,280
every single commit could change the

00:24:01,240 --> 00:24:05,280
bill graph it's dynamic and so we need

00:24:03,280 --> 00:24:11,040
to we can have a static project we

00:24:05,280 --> 00:24:13,290
generated with every commit so using

00:24:11,040 --> 00:24:17,490
some typed star lark just kidding that's

00:24:13,290 --> 00:24:20,850
Python we want our project is a function

00:24:17,490 --> 00:24:24,870
that takes basil in and puts an X code

00:24:20,850 --> 00:24:26,490
out the X file format is really messy

00:24:24,870 --> 00:24:28,620
many of you probably already know that

00:24:26,490 --> 00:24:31,890
it's not easy to generate it's not easy

00:24:28,620 --> 00:24:33,570
to code review or version control and so

00:24:31,890 --> 00:24:35,820
because of this there are open source

00:24:33,570 --> 00:24:38,310
tools that take a friendlier format like

00:24:35,820 --> 00:24:41,430
Jason and Y Amal and produce an Xcode

00:24:38,310 --> 00:24:44,370
project for you so we use Xcode gen for

00:24:41,430 --> 00:24:46,440
this Xcode gen has been great for us and

00:24:44,370 --> 00:24:47,970
we used it before basil and then we

00:24:46,440 --> 00:24:53,430
continued to use it after we've adopted

00:24:47,970 --> 00:24:55,800
basil okay so you know how do we do this

00:24:53,430 --> 00:24:57,690
how do you take basil as an input to a

00:24:55,800 --> 00:24:59,730
function so you need to get that bill

00:24:57,690 --> 00:25:02,130
graph into some useable data structure a

00:24:59,730 --> 00:25:05,310
usable format and there are a few

00:25:02,130 --> 00:25:08,400
options for this tell C and I saw a

00:25:05,310 --> 00:25:10,380
visual studio generator out there use

00:25:08,400 --> 00:25:13,050
aspects so you could do something like

00:25:10,380 --> 00:25:15,300
this you write an aspect it it inspects

00:25:13,050 --> 00:25:17,370
your graph and then writes out some file

00:25:15,300 --> 00:25:20,520
and then you use that file to generate

00:25:17,370 --> 00:25:22,320
your project basically like yeah getting

00:25:20,520 --> 00:25:25,020
the data out of build files instead of

00:25:22,320 --> 00:25:28,800
parsing the build files and then there's

00:25:25,020 --> 00:25:32,430
basil query and basil C query XML and

00:25:28,800 --> 00:25:34,860
proto are some options there and for us

00:25:32,430 --> 00:25:38,010
we ended up going with basil query

00:25:34,860 --> 00:25:41,310
because well one it was really fast

00:25:38,010 --> 00:25:44,790
inconvenient but also we don't have

00:25:41,310 --> 00:25:47,010
aspects in C query might be better if

00:25:44,790 --> 00:25:50,160
you've got a bill graph that's like

00:25:47,010 --> 00:25:53,280
configurable highly configurable but we

00:25:50,160 --> 00:25:55,290
provide a as Keith mentioned a a build

00:25:53,280 --> 00:25:57,930
API that's simplified for developers and

00:25:55,290 --> 00:26:00,570
in not build API you don't have any

00:25:57,930 --> 00:26:02,610
select functions so our build graph is

00:26:00,570 --> 00:26:06,300
fairly static and that means we can use

00:26:02,610 --> 00:26:08,910
query like that and basil query and get

00:26:06,300 --> 00:26:10,290
all the data we need we do use select in

00:26:08,910 --> 00:26:12,390
our in our build but it's just an

00:26:10,290 --> 00:26:16,410
implementation detail it's hidden from

00:26:12,390 --> 00:26:18,450
developers and hidden from the IDE ok so

00:26:16,410 --> 00:26:18,930
now that we know how to do the input how

00:26:18,450 --> 00:26:24,240
do we get the

00:26:18,930 --> 00:26:26,910
output so what we really want to see

00:26:24,240 --> 00:26:28,980
this as or how I see this as is that by

00:26:26,910 --> 00:26:31,590
default an Xcode project has is tightly

00:26:28,980 --> 00:26:33,900
integrated with its own build tool and

00:26:31,590 --> 00:26:36,030
so there's the first option and then the

00:26:33,900 --> 00:26:38,580
second option is decoupling it and

00:26:36,030 --> 00:26:43,590
having your Xcode project but have it

00:26:38,580 --> 00:26:45,390
build with basel under the hood so as

00:26:43,590 --> 00:26:47,430
and Keith mentioned this as well our

00:26:45,390 --> 00:26:49,770
incremental approach to adopting Basel

00:26:47,430 --> 00:26:53,430
was get all of our build into a Basel

00:26:49,770 --> 00:26:56,130
build files and we could use that to

00:26:53,430 --> 00:26:58,740
help be the source of truth and take our

00:26:56,130 --> 00:27:00,600
Xcode project and Jenner or sorry take

00:26:58,740 --> 00:27:06,000
our Basel build files and generate an

00:27:00,600 --> 00:27:07,260
Xcode project that builds with Xcode so

00:27:06,000 --> 00:27:09,330
yeah so this was how we did our

00:27:07,260 --> 00:27:12,600
incremental incremental migration

00:27:09,330 --> 00:27:14,220
basically two parallel steps and once we

00:27:12,600 --> 00:27:15,300
have that first step going once we have

00:27:14,220 --> 00:27:17,130
the build in Basel

00:27:15,300 --> 00:27:21,590
we got the benefits of running it on C I

00:27:17,130 --> 00:27:24,720
mean while we weren't blocked we weren't

00:27:21,590 --> 00:27:27,480
stopped from adopting basel and we could

00:27:24,720 --> 00:27:32,160
jump to using Xcode that builds with

00:27:27,480 --> 00:27:34,410
Xcode so the next big step is is going

00:27:32,160 --> 00:27:37,770
from xcode build to basel build and this

00:27:34,410 --> 00:27:40,440
is where there was a lot of challenges a

00:27:37,770 --> 00:27:44,630
lot of effort the this was a place where

00:27:40,440 --> 00:27:47,190
the adoption cost was really high so

00:27:44,630 --> 00:27:49,830
making you making xcode build with basil

00:27:47,190 --> 00:27:52,470
as two operations one make it build with

00:27:49,830 --> 00:27:56,910
basil but also making it not build with

00:27:52,470 --> 00:27:59,750
xcode build okay so first of all let's

00:27:56,910 --> 00:28:02,280
figure out how we added basil index code

00:27:59,750 --> 00:28:04,440
echoed has this thing called an external

00:28:02,280 --> 00:28:07,260
build system target and you would think

00:28:04,440 --> 00:28:09,540
like hey that's what i want right but it

00:28:07,260 --> 00:28:10,800
i think it's some legacy thing I don't

00:28:09,540 --> 00:28:12,930
think Apple cares about it I don't know

00:28:10,800 --> 00:28:16,620
why they don't just remove it because

00:28:12,930 --> 00:28:20,070
it's not what you'd want it sounds right

00:28:16,620 --> 00:28:22,290
but so basil sorry echoed has this other

00:28:20,070 --> 00:28:24,450
thing called a run script and it's

00:28:22,290 --> 00:28:27,240
pretty obvious by the name it allows you

00:28:24,450 --> 00:28:29,100
to attach a script to any target and

00:28:27,240 --> 00:28:32,010
when you build that target that script

00:28:29,100 --> 00:28:32,790
gets run and it's available in all

00:28:32,010 --> 00:28:35,760
target types here

00:28:32,790 --> 00:28:37,890
applications unit tests etc and so from

00:28:35,760 --> 00:28:41,280
this run script we can easily call Basel

00:28:37,890 --> 00:28:42,930
bill so just like that we have Basel

00:28:41,280 --> 00:28:45,380
building as a part of Xcode and the

00:28:42,930 --> 00:28:47,580
benefit is that Xcode sees everything

00:28:45,380 --> 00:28:49,470
like as though it's normal like we've

00:28:47,580 --> 00:28:52,350
tricked it we doesn't know that we're

00:28:49,470 --> 00:28:57,000
doing another build necessarily so it's

00:28:52,350 --> 00:29:00,000
not invasive surgery to do this okay so

00:28:57,000 --> 00:29:02,400
we've got Xcode building with basil now

00:29:00,000 --> 00:29:09,060
how do we you know run our apps or run

00:29:02,400 --> 00:29:11,130
the tests so you take from your basil

00:29:09,060 --> 00:29:13,680
out directory you take the tap or the XC

00:29:11,130 --> 00:29:18,750
test and you copy it to X codes derived

00:29:13,680 --> 00:29:20,610
data which is it's basil though and

00:29:18,750 --> 00:29:22,890
that's it Xcode does the rest once you

00:29:20,610 --> 00:29:24,780
put it there it'll copy it wherever it

00:29:22,890 --> 00:29:29,100
needs to copy it and execute whatever it

00:29:24,780 --> 00:29:31,380
needs to execute and this gives you like

00:29:29,100 --> 00:29:33,060
really great idea integration so shout

00:29:31,380 --> 00:29:35,040
out to rules apple because they're the

00:29:33,060 --> 00:29:37,830
ones that produce the dot app the EXCI

00:29:35,040 --> 00:29:40,680
test and like it's been perfectly

00:29:37,830 --> 00:29:43,380
compatible and this this part was by far

00:29:40,680 --> 00:29:49,080
the easiest thing to do integrating

00:29:43,380 --> 00:29:50,550
Xcode with basil but there are other

00:29:49,080 --> 00:29:55,320
steps that you have to do after you've

00:29:50,550 --> 00:29:58,830
built the app and copied in the app so

00:29:55,320 --> 00:30:00,090
we install things but Xcode also tries

00:29:58,830 --> 00:30:02,280
to do some other things that it thinks

00:30:00,090 --> 00:30:03,810
it needs to do and is surprised when

00:30:02,280 --> 00:30:06,420
certain files don't exist at certain

00:30:03,810 --> 00:30:09,480
locations and so we we have to satisfy

00:30:06,420 --> 00:30:12,480
Xcode by copying a few very small amount

00:30:09,480 --> 00:30:17,160
of build artifacts from Basil's out into

00:30:12,480 --> 00:30:19,610
derive data and then supporting ID

00:30:17,160 --> 00:30:21,660
features means importing a few other

00:30:19,610 --> 00:30:26,460
build outputs and I'll get into those in

00:30:21,660 --> 00:30:28,920
a moment and lastly we have to generate

00:30:26,460 --> 00:30:32,750
debugger settings and this is also a

00:30:28,920 --> 00:30:35,340
bigger piece that I'll get into a moment

00:30:32,750 --> 00:30:37,470
but all these things the way I look at

00:30:35,340 --> 00:30:40,560
it the view I've taken is that after

00:30:37,470 --> 00:30:43,560
building with basil we have this random

00:30:40,560 --> 00:30:46,670
like structured installer so there's an

00:30:43,560 --> 00:30:46,670
installer that needs to be there

00:30:46,940 --> 00:30:51,750
so this was like a guiding principle and

00:30:50,340 --> 00:30:55,139
maybe like Google errs no this one

00:30:51,750 --> 00:30:57,659
really well this was like how I made a

00:30:55,139 --> 00:31:00,809
lot of this work was just see what Xcode

00:30:57,659 --> 00:31:04,320
does treat that as public API and copy

00:31:00,809 --> 00:31:04,710
it that way like to Xcode it's none the

00:31:04,320 --> 00:31:07,350
wiser

00:31:04,710 --> 00:31:09,710
and this was like you know joke amongst

00:31:07,350 --> 00:31:11,880
us but also a really useful way of

00:31:09,710 --> 00:31:15,149
looking at you know how to get the job

00:31:11,880 --> 00:31:18,419
done here and Xcode is pretty tolerant

00:31:15,149 --> 00:31:20,340
to letting things like that happen so

00:31:18,419 --> 00:31:23,159
now that we've added Basel and we've

00:31:20,340 --> 00:31:25,320
gotten an installer going how do we now

00:31:23,159 --> 00:31:26,759
we've got to build systems so if you hit

00:31:25,320 --> 00:31:28,679
build you're building things twice which

00:31:26,759 --> 00:31:32,279
obviously we don't want so we're not

00:31:28,679 --> 00:31:35,070
done so we have to disable Xcode build

00:31:32,279 --> 00:31:36,750
now as I mentioned tulsi and XE hammer

00:31:35,070 --> 00:31:39,720
provide like a really great starting

00:31:36,750 --> 00:31:43,289
point for getting started with the basil

00:31:39,720 --> 00:31:45,809
and for us to learn how to do this kind

00:31:43,289 --> 00:31:47,750
of thing and both tell Z and basil use

00:31:45,809 --> 00:31:52,259
run scripts like we like I showed there

00:31:47,750 --> 00:31:55,019
but tulsi and XE hammer do a different

00:31:52,259 --> 00:31:57,389
way for disabling Xcode build and we

00:31:55,019 --> 00:31:59,879
followed that way for a while but it

00:31:57,389 --> 00:32:02,990
didn't really achieve the parity and the

00:31:59,879 --> 00:32:06,570
sort of simplicity that we wanted with

00:32:02,990 --> 00:32:09,629
with disable it with Xcode with a native

00:32:06,570 --> 00:32:12,539
Xcode experience for developers so fast

00:32:09,629 --> 00:32:14,909
forward a few months of doing it the way

00:32:12,539 --> 00:32:17,210
that the other way and we came to this

00:32:14,909 --> 00:32:17,210
solution

00:32:17,520 --> 00:32:20,569
[Music]

00:32:22,510 --> 00:32:27,760
yeah when I look back on this it's it's

00:32:26,020 --> 00:32:30,190
like I feel so stupid

00:32:27,760 --> 00:32:31,810
now these if you've done any make like

00:32:30,190 --> 00:32:34,360
setting these variables as make

00:32:31,810 --> 00:32:37,000
environment variables seems like you

00:32:34,360 --> 00:32:39,310
know maybe obvious to do but what these

00:32:37,000 --> 00:32:40,840
are these are Xcode build settings so

00:32:39,310 --> 00:32:42,730
they're not make environment variables

00:32:40,840 --> 00:32:44,530
and so I guess like the idea of an Xcode

00:32:42,730 --> 00:32:46,780
build setting and a make environment

00:32:44,530 --> 00:32:48,850
variable like you know those neurons

00:32:46,780 --> 00:32:51,550
just didn't connect these things aren't

00:32:48,850 --> 00:32:53,740
documented using this approach as far as

00:32:51,550 --> 00:32:59,580
I know like isn't really widely known or

00:32:53,740 --> 00:32:59,580
or done very much but it does the job

00:33:02,310 --> 00:33:06,910
yeah and so just as though like a

00:33:05,590 --> 00:33:09,130
finishing part this is something that

00:33:06,910 --> 00:33:11,140
makes me feel like it was good to build

00:33:09,130 --> 00:33:13,660
our own because we got to a point which

00:33:11,140 --> 00:33:15,970
was much less complexity and gave like a

00:33:13,660 --> 00:33:20,590
higher quality Xcode experience for

00:33:15,970 --> 00:33:22,710
developers but it also can be customized

00:33:20,590 --> 00:33:25,720
so we have a solution in the works where

00:33:22,710 --> 00:33:27,550
Xcode or sorry clang and Swift they can

00:33:25,720 --> 00:33:29,050
provide fix it's like if you've done

00:33:27,550 --> 00:33:30,610
something wrong it can tell you here's

00:33:29,050 --> 00:33:33,400
the right way to do it and that gets

00:33:30,610 --> 00:33:36,850
exposed in the Xcode user interface and

00:33:33,400 --> 00:33:38,200
so the fix we have in the works means we

00:33:36,850 --> 00:33:41,050
have to like pipe some output from the

00:33:38,200 --> 00:33:43,180
compiler back to the IDE and because we

00:33:41,050 --> 00:33:45,760
are now the compiler or you know we can

00:33:43,180 --> 00:33:48,880
hook ourselves in here this is a great

00:33:45,760 --> 00:33:54,340
way to customize and get parody on Xcode

00:33:48,880 --> 00:33:56,170
features indexing so indexing is this

00:33:54,340 --> 00:33:59,800
weird beast I've heard some companies

00:33:56,170 --> 00:34:01,180
for Xcode and Android turn off indexing

00:33:59,800 --> 00:34:03,310
because for large projects it's

00:34:01,180 --> 00:34:05,770
ridiculously slow and on the other end

00:34:03,310 --> 00:34:07,960
of the spectrum I've heard of at least

00:34:05,770 --> 00:34:10,960
one developer mentioned that hail wait

00:34:07,960 --> 00:34:12,520
until Xcode indexing is done before

00:34:10,960 --> 00:34:16,179
he'll start coding because he wants like

00:34:12,520 --> 00:34:18,310
all the indexing features and an

00:34:16,179 --> 00:34:20,080
indexing is a primary advantage of of an

00:34:18,310 --> 00:34:23,260
IDE right otherwise we'd all be using

00:34:20,080 --> 00:34:28,419
vim and Emacs so we wanted to keep that

00:34:23,260 --> 00:34:32,409
we wanted full indexing support but it's

00:34:28,419 --> 00:34:35,079
slow sometimes and it's usually

00:34:32,409 --> 00:34:38,440
proprietary or some sort of black box

00:34:35,079 --> 00:34:41,169
not well-understood and it's off an

00:34:38,440 --> 00:34:46,559
out-of-band you open up your IDE and and

00:34:41,169 --> 00:34:50,519
it starts indexing for you but our index

00:34:46,559 --> 00:34:53,289
integration we saw an opportunity

00:34:50,519 --> 00:34:58,989
so both swift and clang can produce

00:34:53,289 --> 00:35:01,150
indexes while building which means we

00:34:58,989 --> 00:35:03,549
can mark them as outputs action outputs

00:35:01,150 --> 00:35:05,950
and basil can cache them but the problem

00:35:03,549 --> 00:35:07,719
is there are absolute paths and these

00:35:05,950 --> 00:35:10,180
absolute paths don't really matter much

00:35:07,719 --> 00:35:13,359
to the build they're just an output but

00:35:10,180 --> 00:35:15,339
for bringing them back into xcode we

00:35:13,359 --> 00:35:17,289
have to do something about that but

00:35:15,339 --> 00:35:18,759
because swift and clang our open source

00:35:17,289 --> 00:35:22,569
and their component libraries are open

00:35:18,759 --> 00:35:24,239
source we were able to make a tool so we

00:35:22,569 --> 00:35:27,009
wrote a tool called index import and

00:35:24,239 --> 00:35:30,459
basically all it does is it's like a

00:35:27,009 --> 00:35:31,989
said but for index files and you have a

00:35:30,459 --> 00:35:34,150
command line you say which paths you

00:35:31,989 --> 00:35:36,940
want to rewrite from basil paths to

00:35:34,150 --> 00:35:39,369
xcode paths and it copies the files and

00:35:36,940 --> 00:35:46,089
rewrites the paths and we open source

00:35:39,369 --> 00:35:49,539
that ok debugging so debugging on iOS

00:35:46,089 --> 00:35:52,569
means LOD B it gets a bit of a bad

00:35:49,539 --> 00:35:55,479
reputation and I actually like LD be a

00:35:52,569 --> 00:35:57,880
lot but debugging making debugging work

00:35:55,479 --> 00:36:01,029
with basil was by far the most painful

00:35:57,880 --> 00:36:03,969
and continues to be a pain for making it

00:36:01,029 --> 00:36:06,930
work and so there's a bunch of reasons

00:36:03,969 --> 00:36:09,099
why but the biggest main reason is paths

00:36:06,930 --> 00:36:12,489
there are just so many different kinds

00:36:09,099 --> 00:36:14,559
of paths involved source paths binary

00:36:12,489 --> 00:36:17,440
paths absolute paths relatives paths

00:36:14,559 --> 00:36:20,079
paths that Xcode sees from your project

00:36:17,440 --> 00:36:24,430
paths that the compiler saw because it

00:36:20,079 --> 00:36:26,680
was built in in the sandbox and the fix

00:36:24,430 --> 00:36:29,140
is to remove those paths altogether from

00:36:26,680 --> 00:36:31,869
the binary or by making them relative

00:36:29,140 --> 00:36:33,849
but even just doing this isn't easy

00:36:31,869 --> 00:36:35,910
removing paths maybe isn't always

00:36:33,849 --> 00:36:38,650
possible as the case was with indexing

00:36:35,910 --> 00:36:40,209
if you sometimes a flag will remove a

00:36:38,650 --> 00:36:43,089
path but it'll remove some other things

00:36:40,209 --> 00:36:45,190
so there's side effects to that and

00:36:43,089 --> 00:36:46,930
sometimes downstream tools don't handle

00:36:45,190 --> 00:36:47,480
relative paths even if you succeed and

00:36:46,930 --> 00:36:51,050
do

00:36:47,480 --> 00:36:53,119
that so there was a lot of solutions to

00:36:51,050 --> 00:36:55,100
this you have to use all the right

00:36:53,119 --> 00:36:59,140
compiler flags which of course is a bit

00:36:55,100 --> 00:37:01,640
of a magic magic thing to figure out and

00:36:59,140 --> 00:37:04,460
thankfully basil and real Swift have

00:37:01,640 --> 00:37:08,359
support for this using the right Flags

00:37:04,460 --> 00:37:11,470
in certain cases but you have to do link

00:37:08,359 --> 00:37:13,700
ly linking locally because of the way

00:37:11,470 --> 00:37:18,800
debug info works in the way it's

00:37:13,700 --> 00:37:21,230
embedded in a binary and then for us one

00:37:18,800 --> 00:37:24,260
of the challenges was getting being able

00:37:21,230 --> 00:37:26,510
to have a debuggable local developer

00:37:24,260 --> 00:37:28,700
experience where the build was hitting

00:37:26,510 --> 00:37:32,630
the build cache and the solution to this

00:37:28,700 --> 00:37:36,080
one was we had to disable some builds

00:37:32,630 --> 00:37:38,660
debugging sorry compilers flags from

00:37:36,080 --> 00:37:41,180
being embedded but we needed one single

00:37:38,660 --> 00:37:44,330
module that we attached that had to be

00:37:41,180 --> 00:37:45,980
run locally and that solved a problem so

00:37:44,330 --> 00:37:47,869
all the rest of the stuff could come

00:37:45,980 --> 00:37:50,660
from cache but this one little empty

00:37:47,869 --> 00:37:53,930
module brought in all the debugging info

00:37:50,660 --> 00:37:56,030
that we needed and then there's a

00:37:53,930 --> 00:37:58,430
problem of where you generate hello DB

00:37:56,030 --> 00:38:00,680
settings and then you have to figure out

00:37:58,430 --> 00:38:06,520
a way to hook that into the users own

00:38:00,680 --> 00:38:12,820
settings but finally everything works

00:38:06,520 --> 00:38:15,050
pretty much so stepping back a bit we

00:38:12,820 --> 00:38:17,480
are at a position where we built we're

00:38:15,050 --> 00:38:20,859
building with basil which is powerful we

00:38:17,480 --> 00:38:23,750
have customized project generation and

00:38:20,859 --> 00:38:25,900
we've taken the build away from Xcode so

00:38:23,750 --> 00:38:27,590
it doesn't know what a build is anymore

00:38:25,900 --> 00:38:31,880
it doesn't have to worry about

00:38:27,590 --> 00:38:34,880
dependencies or any of that stuff and so

00:38:31,880 --> 00:38:36,830
there's now this tradition a bit for big

00:38:34,880 --> 00:38:39,859
companies where you solve Xcode

00:38:36,830 --> 00:38:43,609
performance problems by generating a

00:38:39,859 --> 00:38:46,190
focused sub project and so that was our

00:38:43,609 --> 00:38:48,080
next step so basically what this means

00:38:46,190 --> 00:38:50,060
is as a developer you say here are the

00:38:48,080 --> 00:38:53,780
modules and targets I want to work on

00:38:50,060 --> 00:38:55,190
and because Xcode doesn't care if the

00:38:53,780 --> 00:38:57,350
dependencies are there the transitive

00:38:55,190 --> 00:38:59,090
dependencies are there you get a very

00:38:57,350 --> 00:39:00,400
small project with just what you've

00:38:59,090 --> 00:39:02,380
specified none of the depend

00:39:00,400 --> 00:39:05,080
these are required so I could build

00:39:02,380 --> 00:39:08,680
lifts without any of its dependencies by

00:39:05,080 --> 00:39:11,680
just specifying the lift up and the

00:39:08,680 --> 00:39:13,570
benefits are again that things get

00:39:11,680 --> 00:39:15,940
faster so generating a project is faster

00:39:13,570 --> 00:39:19,270
a large project with all the

00:39:15,940 --> 00:39:22,360
dependencies is slow to load and slow to

00:39:19,270 --> 00:39:24,970
generate launching Xcode ty is faster

00:39:22,360 --> 00:39:26,470
and the time to usability is faster to

00:39:24,970 --> 00:39:28,180
use like basil terminology I think it's

00:39:26,470 --> 00:39:30,220
configuration and analysis is really

00:39:28,180 --> 00:39:32,350
slow and it doesn't have like a daemon

00:39:30,220 --> 00:39:33,850
that it can use and run so every time

00:39:32,350 --> 00:39:38,920
you launch it has to rerun that stuff

00:39:33,850 --> 00:39:40,180
every time you get natural scopes for

00:39:38,920 --> 00:39:42,280
developers and teams you don't have to

00:39:40,180 --> 00:39:45,700
have a whole project that everybody

00:39:42,280 --> 00:39:47,440
shares you can have smaller projects and

00:39:45,700 --> 00:39:49,420
the performance scales by whatever the

00:39:47,440 --> 00:39:53,950
developers scope is not by the way your

00:39:49,420 --> 00:39:57,280
repo is scaling there were a few finer

00:39:53,950 --> 00:40:00,370
details that we wanted to make work with

00:39:57,280 --> 00:40:02,230
Xcode and most of these you know all

00:40:00,370 --> 00:40:02,740
these either work or have a fix in

00:40:02,230 --> 00:40:05,560
progress

00:40:02,740 --> 00:40:07,450
so X ode has this ability to click a

00:40:05,560 --> 00:40:09,460
little green check box by a test

00:40:07,450 --> 00:40:10,930
function or a test class and it'll run

00:40:09,460 --> 00:40:13,690
just that rather than running your whole

00:40:10,930 --> 00:40:15,880
test suite we've got that we added some

00:40:13,690 --> 00:40:17,290
we augmented the project search so that

00:40:15,880 --> 00:40:19,390
even though you might have focused only

00:40:17,290 --> 00:40:23,620
on a couple modules you could still

00:40:19,390 --> 00:40:26,140
search the whole repo and because of the

00:40:23,620 --> 00:40:28,870
way we do indexing you get the full

00:40:26,140 --> 00:40:30,970
advantage of the full index not just the

00:40:28,870 --> 00:40:34,240
index of the modules you've you've added

00:40:30,970 --> 00:40:38,050
to the project so I can do a refactor an

00:40:34,240 --> 00:40:40,090
Xcode refactor rename refactor and it

00:40:38,050 --> 00:40:42,580
will find all of the files that are even

00:40:40,090 --> 00:40:44,860
not in the project and rename them you

00:40:42,580 --> 00:40:49,090
can also find callers of functions that

00:40:44,860 --> 00:40:51,670
are outside of your project and remote

00:40:49,090 --> 00:40:53,290
cache we slid that right in so because

00:40:51,670 --> 00:40:57,090
they were using basil we turned it on

00:40:53,290 --> 00:40:57,090
and people started getting remote cache

00:40:57,150 --> 00:41:03,100
there's a few unresolved issues

00:41:00,490 --> 00:41:04,590
I'm not going to in essence because of

00:41:03,100 --> 00:41:07,450
time I'm not going to go into him but

00:41:04,590 --> 00:41:11,940
here they are the biggest one for me

00:41:07,450 --> 00:41:15,090
oops I went too far can't go back one

00:41:11,940 --> 00:41:17,790
the biggest one I think for us is the

00:41:15,090 --> 00:41:20,430
Basel and Swift parallelism mismatch so

00:41:17,790 --> 00:41:22,190
you know Basel is a build system and so

00:41:20,430 --> 00:41:24,660
if C thinks it's a build system and

00:41:22,190 --> 00:41:26,970
there are times when Basel is only

00:41:24,660 --> 00:41:28,830
running one thing and it could be saying

00:41:26,970 --> 00:41:30,570
hey why don't see why don't you run more

00:41:28,830 --> 00:41:32,580
but it doesn't did that just doesn't

00:41:30,570 --> 00:41:34,860
work so sometimes if C is kind of

00:41:32,580 --> 00:41:38,780
starved of of having availability of

00:41:34,860 --> 00:41:41,790
full parallelism so yeah so with that

00:41:38,780 --> 00:41:44,010
happy to take questions and come talk to

00:41:41,790 --> 00:41:53,550
us if you want any advice with iOS

00:41:44,010 --> 00:41:57,290
migration thank you right thanks for the

00:41:53,550 --> 00:41:57,290
great talk any questions and the mics

00:42:00,920 --> 00:42:07,740
hey I'm Steven from Airbnb did keep that

00:42:04,470 --> 00:42:09,660
was awesome thank you I was just

00:42:07,740 --> 00:42:11,910
wondering if you could clarify how many

00:42:09,660 --> 00:42:14,250
times buck build will get called is it

00:42:11,910 --> 00:42:23,990
once per library or is it just once for

00:42:14,250 --> 00:42:26,610
your whole project basal build well so

00:42:23,990 --> 00:42:29,400
it's just the top level one so when you

00:42:26,610 --> 00:42:31,230
say well you have a scheme and that

00:42:29,400 --> 00:42:34,050
scheme dictates so if you want to work

00:42:31,230 --> 00:42:35,400
on just a specific library then you'll

00:42:34,050 --> 00:42:38,700
be on a scheme and that scheme we'll

00:42:35,400 --> 00:42:40,950
call basil build once we call basil run

00:42:38,700 --> 00:42:42,660
for a bunch of things but but there's

00:42:40,950 --> 00:42:44,550
just one single build going on at any

00:42:42,660 --> 00:42:47,070
time whether it's an app or a test

00:42:44,550 --> 00:42:50,100
thanks let's take a question for the

00:42:47,070 --> 00:42:51,840
dope just one more yeah I know drew berg

00:42:50,100 --> 00:42:53,910
from Capital One can you talk about your

00:42:51,840 --> 00:43:00,680
CI infrastructure that you use to

00:42:53,910 --> 00:43:03,360
execute basil commands yeah so we use

00:43:00,680 --> 00:43:05,880
like build kite on our own Mac minis if

00:43:03,360 --> 00:43:09,390
your interests in that part but we do

00:43:05,880 --> 00:43:10,980
some things around only building what

00:43:09,390 --> 00:43:13,140
changed based on doing like an Ardex

00:43:10,980 --> 00:43:14,010
query with basil which works really well

00:43:13,140 --> 00:43:15,540
we've been doing it for a long time

00:43:14,010 --> 00:43:17,040
we're actually doing that with our own

00:43:15,540 --> 00:43:20,220
tooling before we move to basil as well

00:43:17,040 --> 00:43:22,260
but I just have some you know scripts

00:43:20,220 --> 00:43:24,180
that have some logic arounds like yeah

00:43:22,260 --> 00:43:24,720
given this file set change like what

00:43:24,180 --> 00:43:26,340
apps doing

00:43:24,720 --> 00:43:28,890
to build and what test targets do I need

00:43:26,340 --> 00:43:30,120
to retest overall I mean I'm happy to

00:43:28,890 --> 00:43:31,770
talk about it more but overall it's like

00:43:30,120 --> 00:43:34,140
actually pretty simple like our Depp's

00:43:31,770 --> 00:43:34,890
does all the heavy lifting for us Thanks

00:43:34,140 --> 00:43:37,520
so come find you later

00:43:34,890 --> 00:43:39,739
cool all right thank and right thank you

00:43:37,520 --> 00:43:39,739

YouTube URL: https://www.youtube.com/watch?v=NAPeWoimGx8


