Title: BazelCon 2019 Day 2: Gradle to Bazel + Q&A
Publication date: 2020-01-15
Playlist: BazelCon 2019
Description: 
	Chip Dickson and Charles Walker, SUM Global event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Chip Dickson, Charles Walker;
Captions: 
	00:00:00,000 --> 00:00:06,000
stayed this is the final talk in the

00:00:02,460 --> 00:00:08,130
main room except for the wrap-up right

00:00:06,000 --> 00:00:10,469
before the wrap-up and I am super

00:00:08,130 --> 00:00:13,950
excited for these guys to come on board

00:00:10,469 --> 00:00:16,320
and talk a little bit about this so I'm

00:00:13,950 --> 00:00:18,359
gonna bring up if they're ready chip and

00:00:16,320 --> 00:00:21,150
Charlie from some global to talk about

00:00:18,359 --> 00:00:26,210
the Gradle to basal let's have a big

00:00:21,150 --> 00:00:26,210
round of applause for these guys Thanks

00:00:27,050 --> 00:00:31,710
hi everybody how you doing

00:00:29,220 --> 00:00:35,399
hope everything last talk of the night

00:00:31,710 --> 00:00:37,710
and so and we'll try to go fast and

00:00:35,399 --> 00:00:42,629
cover things as quickly as we can here

00:00:37,710 --> 00:00:45,320
too so first just you know quick

00:00:42,629 --> 00:00:50,460
introductions I'm chip Dixon this is

00:00:45,320 --> 00:00:54,420
Charlie Walker hey everybody we're gonna

00:00:50,460 --> 00:00:55,920
get just this huge plug or you know

00:00:54,420 --> 00:00:58,590
shameless plug to the company here

00:00:55,920 --> 00:01:00,570
mainly because we're small consulting

00:00:58,590 --> 00:01:04,170
company and from Atlanta Georgia been in

00:01:00,570 --> 00:01:06,930
business about 15 years now and like to

00:01:04,170 --> 00:01:12,869
say thank you for company allowing us to

00:01:06,930 --> 00:01:14,700
get up here and talk with you guys first

00:01:12,869 --> 00:01:17,220
I'd like to say we're really honored to

00:01:14,700 --> 00:01:19,439
be here and excited about being able to

00:01:17,220 --> 00:01:22,590
talk especially with the you know holy

00:01:19,439 --> 00:01:24,390
cow all the groups of you know the the

00:01:22,590 --> 00:01:26,460
names of the companies and the people

00:01:24,390 --> 00:01:29,220
and the things that you're doing we're

00:01:26,460 --> 00:01:33,030
honored to be here we're not exactly a

00:01:29,220 --> 00:01:39,360
household name so a little bit about us

00:01:33,030 --> 00:01:42,270
most of our customers are sorry most of

00:01:39,360 --> 00:01:45,210
our customers are based in the utility

00:01:42,270 --> 00:01:50,369
and financial retail space we've had

00:01:45,210 --> 00:01:55,229
many many years now of using build tools

00:01:50,369 --> 00:01:58,790
basil Drake and Gradle maven we're in

00:01:55,229 --> 00:01:58,790
the basil community experts

00:02:00,110 --> 00:02:04,260
buildin CID consulting now for about

00:02:02,460 --> 00:02:06,320
eight years and it's kind of an

00:02:04,260 --> 00:02:08,310
interesting story we're really a

00:02:06,320 --> 00:02:11,220
consulting company for building

00:02:08,310 --> 00:02:14,400
applications and and what we ended up

00:02:11,220 --> 00:02:17,850
finding is we would go into a company to

00:02:14,400 --> 00:02:20,370
go build an application and we would say

00:02:17,850 --> 00:02:23,220
okay where is your source control system

00:02:20,370 --> 00:02:25,770
where is your CI system where is your

00:02:23,220 --> 00:02:28,320
all the things that you need in order to

00:02:25,770 --> 00:02:32,570
build something and most of the time

00:02:28,320 --> 00:02:36,360
they're true is what so so we kind of

00:02:32,570 --> 00:02:39,660
stumbled into this CI CD practice if you

00:02:36,360 --> 00:02:43,470
will over just out of necessity is

00:02:39,660 --> 00:02:45,390
really where the word came from so at

00:02:43,470 --> 00:02:48,209
first of course eight years ago we

00:02:45,390 --> 00:02:51,240
weren't doing a lot of CD we were doing

00:02:48,209 --> 00:02:55,610
mostly CI but as that architectural zev

00:02:51,240 --> 00:03:03,080
have evolved our tooling requirements

00:02:55,610 --> 00:03:05,550
have changed a great deal so we have

00:03:03,080 --> 00:03:08,160
about 20 years experience doing this

00:03:05,550 --> 00:03:10,410
kind of stuff the enterprise software

00:03:08,160 --> 00:03:11,760
and that sort of thing so we can you

00:03:10,410 --> 00:03:17,790
know where are the old gray beards and

00:03:11,760 --> 00:03:19,860
been around just say I had this

00:03:17,790 --> 00:03:22,260
conversation I don't know if he's out in

00:03:19,860 --> 00:03:26,040
the audience but basically on some pork

00:03:22,260 --> 00:03:28,019
I call him a kid he's he's not but some

00:03:26,040 --> 00:03:32,390
poor guy had to basically listen to this

00:03:28,019 --> 00:03:39,239
conversation from Charlie and I over

00:03:32,390 --> 00:03:39,690
over lunch the other day so getting

00:03:39,239 --> 00:03:41,850
started

00:03:39,690 --> 00:03:45,620
sorry we're not really talking about new

00:03:41,850 --> 00:03:48,239
projects here but I wanted to mention

00:03:45,620 --> 00:03:49,410
you know mention it just to kind of hey

00:03:48,239 --> 00:03:51,810
how do we get started we do a lot of

00:03:49,410 --> 00:03:55,220
greenfield development so and the Gradle

00:03:51,810 --> 00:03:57,840
they have a really nice an it feature

00:03:55,220 --> 00:04:00,440
you know use it very often but it's

00:03:57,840 --> 00:04:05,250
there it's a good start

00:04:00,440 --> 00:04:09,000
prompts really nice in Basel not really

00:04:05,250 --> 00:04:12,209
an equivalent there as far as greenfield

00:04:09,000 --> 00:04:13,650
and getting started so you know they're

00:04:12,209 --> 00:04:16,380
there is the gazelle

00:04:13,650 --> 00:04:18,239
project which has some hooks - - for

00:04:16,380 --> 00:04:19,769
other languages so kind of looking

00:04:18,239 --> 00:04:27,060
forward to seeing how that ecosystem

00:04:19,769 --> 00:04:28,410
evolves so we start talking about okay

00:04:27,060 --> 00:04:32,400
how do you manage different versions

00:04:28,410 --> 00:04:37,650
right so Gradle has got the the Gradle

00:04:32,400 --> 00:04:41,370
wrapper and basil with the Basel II

00:04:37,650 --> 00:04:44,550
project I'm pretty interested in how

00:04:41,370 --> 00:04:46,919
this is going to especially as as it may

00:04:44,550 --> 00:04:48,600
evolve with the basil Federation pieces

00:04:46,919 --> 00:04:50,669
and some other things I'm kind of

00:04:48,600 --> 00:04:55,530
excited about how how this is going to

00:04:50,669 --> 00:04:57,150
gonna move going forward so this is

00:04:55,530 --> 00:05:00,330
probably the most interesting topic when

00:04:57,150 --> 00:05:02,310
we start migrating things the first rule

00:05:00,330 --> 00:05:04,400
of a good correct erratic build right is

00:05:02,310 --> 00:05:08,010
getting your dependencies right and

00:05:04,400 --> 00:05:09,690
there just had a good talk about a lot

00:05:08,010 --> 00:05:12,840
of those issues that were that we're

00:05:09,690 --> 00:05:15,210
talking about here so we're gonna spend

00:05:12,840 --> 00:05:16,650
a little time on this as as when we were

00:05:15,210 --> 00:05:20,070
doing the conversion this is obviously

00:05:16,650 --> 00:05:21,150
the first major hurdle that that you hit

00:05:20,070 --> 00:05:25,620
when you're when you're doing a

00:05:21,150 --> 00:05:28,919
conversion to spent from maven Gradle so

00:05:25,620 --> 00:05:30,389
in Gradle right you specify your your

00:05:28,919 --> 00:05:32,400
dependencies much like this and if

00:05:30,389 --> 00:05:34,500
you've seen it you you know we've seen a

00:05:32,400 --> 00:05:39,240
great a file it's pretty straightforward

00:05:34,500 --> 00:05:41,430
with the rules JVM external you see you

00:05:39,240 --> 00:05:43,710
can specify your rules that pretty much

00:05:41,430 --> 00:05:45,090
the same way as the highlighted piece

00:05:43,710 --> 00:05:47,250
here says so it's a pretty

00:05:45,090 --> 00:05:49,740
straightforward here's how you know as

00:05:47,250 --> 00:05:56,190
far as specifying your pieces it's

00:05:49,740 --> 00:05:58,050
pretty straight forward so some more

00:05:56,190 --> 00:06:00,300
about dependencies right Gradle is a

00:05:58,050 --> 00:06:03,539
dramatic improvement over maven if

00:06:00,300 --> 00:06:06,599
you've been stuck with maven before in

00:06:03,539 --> 00:06:08,220
Gradle the highest version wins in your

00:06:06,599 --> 00:06:12,870
dependencies typically there are other

00:06:08,220 --> 00:06:14,880
strategies that go here you can create

00:06:12,870 --> 00:06:17,130
it's got all kinds of features around

00:06:14,880 --> 00:06:21,300
version lock files and transitive

00:06:17,130 --> 00:06:23,430
dependencies and locking all the

00:06:21,300 --> 00:06:25,440
versions down and things like that but

00:06:23,430 --> 00:06:27,060
one of the things that that we

00:06:25,440 --> 00:06:29,160
discovered at least in this particular

00:06:27,060 --> 00:06:31,320
bill that we we migrated was that

00:06:29,160 --> 00:06:35,310
transitive dependencies could be called

00:06:31,320 --> 00:06:37,770
from you know instantiated directly from

00:06:35,310 --> 00:06:39,690
other pieces of the bill that had

00:06:37,770 --> 00:06:44,570
nothing to do with or they weren't

00:06:39,690 --> 00:06:47,310
listed in in the Gradle file so you know

00:06:44,570 --> 00:06:50,280
one of the things that that we found as

00:06:47,310 --> 00:06:52,919
we were going through is in this

00:06:50,280 --> 00:06:56,669
transitive dependency references in

00:06:52,919 --> 00:07:00,150
piece also is that you don't always get

00:06:56,669 --> 00:07:02,340
what you think you're gonna get well is

00:07:00,150 --> 00:07:04,590
way better than maven but there are

00:07:02,340 --> 00:07:06,690
sometimes some surprises so for instance

00:07:04,590 --> 00:07:09,000
in what in this build we had a project

00:07:06,690 --> 00:07:11,610
day that depended on something project

00:07:09,000 --> 00:07:13,740
be dependent on on the same thing and

00:07:11,610 --> 00:07:16,560
when we when we got down to it we were

00:07:13,740 --> 00:07:28,770
expecting 504 can we got 507

00:07:16,560 --> 00:07:31,919
now the to achieve hermetic builds right

00:07:28,770 --> 00:07:33,570
it's just hard alright that's not it's

00:07:31,919 --> 00:07:35,880
not hard in I mean it's not easy in

00:07:33,570 --> 00:07:40,220
Gradle it's not easy and any any other

00:07:35,880 --> 00:07:40,220
so it's not easy and Basel either so

00:07:41,539 --> 00:07:48,660
Basel promised at least one in this port

00:07:46,080 --> 00:07:50,370
is about the the speed and the

00:07:48,660 --> 00:07:53,940
correctness of the build what was nice

00:07:50,370 --> 00:07:58,289
is we found it okay we asked for 504 we

00:07:53,940 --> 00:08:05,580
got 504 right or wrong it was 504 right

00:07:58,289 --> 00:08:09,750
so I can tell you that while I was doing

00:08:05,580 --> 00:08:13,440
this I didn't like Basel very much right

00:08:09,750 --> 00:08:16,350
it told me all the time I mean all the

00:08:13,440 --> 00:08:18,360
time can't find this dependency can't

00:08:16,350 --> 00:08:21,000
find that dependency this is the wrong

00:08:18,360 --> 00:08:24,000
version this is that I mean it really

00:08:21,000 --> 00:08:28,560
told us a lot about the build that we

00:08:24,000 --> 00:08:30,600
were migrating and how how much we were

00:08:28,560 --> 00:08:34,550
taking for granted or how much didn't

00:08:30,600 --> 00:08:34,550
know about the build so

00:08:36,700 --> 00:08:43,810
so you may ask like why all this extra

00:08:39,760 --> 00:08:47,230
time on this on the dependencies in our

00:08:43,810 --> 00:08:53,080
Gradle to Basel conversion it was the

00:08:47,230 --> 00:08:55,390
single biggest challenge and the getting

00:08:53,080 --> 00:08:57,910
of a wrong version doesn't always happen

00:08:55,390 --> 00:09:00,400
but given a sufficiently complex bill

00:08:57,910 --> 00:09:02,770
that happens enough that it's something

00:09:00,400 --> 00:09:05,740
that you've got a got to think about

00:09:02,770 --> 00:09:07,300
something you have to address so the one

00:09:05,740 --> 00:09:09,310
thing I'll say is it's easy to blame the

00:09:07,300 --> 00:09:11,140
the new tool alright that's the first

00:09:09,310 --> 00:09:12,700
thing you want to do it's like oh basil

00:09:11,140 --> 00:09:17,440
is horrible I can't believe it did this

00:09:12,700 --> 00:09:21,400
no a lot of times the real problem is

00:09:17,440 --> 00:09:24,970
really hard to find because what really

00:09:21,400 --> 00:09:27,700
should have happened it's based on the

00:09:24,970 --> 00:09:29,590
the build structure here right someplace

00:09:27,700 --> 00:09:31,660
along the line someone found a problem

00:09:29,590 --> 00:09:33,730
and they upgraded the version of spring

00:09:31,660 --> 00:09:36,160
that they were using and it fixed a

00:09:33,730 --> 00:09:37,830
problem which your code has been taking

00:09:36,160 --> 00:09:41,410
advantage of in the other build system

00:09:37,830 --> 00:09:42,190
right so it wasn't either tool doing the

00:09:41,410 --> 00:09:46,090
wrong thing

00:09:42,190 --> 00:09:49,390
it was simply in basil you know what

00:09:46,090 --> 00:09:53,730
it's doing versus in Gradle we didn't

00:09:49,390 --> 00:09:53,730
necessarily know how it got there so

00:09:58,589 --> 00:10:03,850
all right so one of the things that we

00:10:01,779 --> 00:10:06,910
came in that we started working with was

00:10:03,850 --> 00:10:10,230
how do i specify the java version that

00:10:06,910 --> 00:10:13,690
I'm compiling down to in Gradle it's

00:10:10,230 --> 00:10:15,399
it's pretty simple you specify on your

00:10:13,690 --> 00:10:17,740
build.gradle you specify your source

00:10:15,399 --> 00:10:21,670
compiler compatibility flag and target

00:10:17,740 --> 00:10:26,290
compatibility the compatibility flag but

00:10:21,670 --> 00:10:29,290
how do I do that in basil

00:10:26,290 --> 00:10:30,790
because basil we didn't find that same

00:10:29,290 --> 00:10:33,430
thing but basil it's actually still

00:10:30,790 --> 00:10:36,100
pretty simple to do you use you can

00:10:33,430 --> 00:10:38,950
either pass in through through the

00:10:36,100 --> 00:10:42,279
command line a Java C opt and specify

00:10:38,950 --> 00:10:44,260
your source and target or you can put in

00:10:42,279 --> 00:10:46,690
your basil RC flag you can put you can

00:10:44,260 --> 00:10:48,220
specify it there so that's how you

00:10:46,690 --> 00:10:53,290
specify the version that you're

00:10:48,220 --> 00:10:54,880
compiling down to now what about viewing

00:10:53,290 --> 00:10:56,800
the dependency graph chip has talked a

00:10:54,880 --> 00:11:02,320
little bit about finding dependencies

00:10:56,800 --> 00:11:03,820
and when we were doing our port one of

00:11:02,320 --> 00:11:06,100
the first one of the hardest things that

00:11:03,820 --> 00:11:08,079
we had to do was figuring out all of the

00:11:06,100 --> 00:11:10,839
dependencies the transitive dependencies

00:11:08,079 --> 00:11:13,870
and how they worked and so we were

00:11:10,839 --> 00:11:15,640
actually able to use these tools here in

00:11:13,870 --> 00:11:17,260
Gradle if I want to look at my

00:11:15,640 --> 00:11:18,459
dependencies that you have a bunch of

00:11:17,260 --> 00:11:21,459
different ways you can list your

00:11:18,459 --> 00:11:24,760
dependencies with Gradle dependencies

00:11:21,459 --> 00:11:27,610
you can do a dependency insight and less

00:11:24,760 --> 00:11:32,440
dependence list dependencies for a

00:11:27,610 --> 00:11:34,720
single for a single API there or single

00:11:32,440 --> 00:11:38,130
single dependency so you have lots of

00:11:34,720 --> 00:11:41,199
different ways that you can do that in

00:11:38,130 --> 00:11:43,959
basil you can use that you can use the

00:11:41,199 --> 00:11:45,880
query you can use basil query so you can

00:11:43,959 --> 00:11:49,120
so if I wanted to list all the

00:11:45,880 --> 00:11:51,820
dependencies of slash slash foo I could

00:11:49,120 --> 00:11:54,100
I could just do a basil query and depths

00:11:51,820 --> 00:11:56,110
of food now there's several different

00:11:54,100 --> 00:11:57,730
ways you can output that you can do you

00:11:56,110 --> 00:11:59,680
can out you can you can just take the

00:11:57,730 --> 00:12:03,699
output from it and read through it you

00:11:59,680 --> 00:12:06,250
can output it to a graph and and then

00:12:03,699 --> 00:12:07,720
use something like there's some some

00:12:06,250 --> 00:12:09,490
graphing tools that you can use a little

00:12:07,720 --> 00:12:10,060
display in the dependencies in a

00:12:09,490 --> 00:12:16,870
graphical

00:12:10,060 --> 00:12:19,000
or Matt so how do I if we're coming from

00:12:16,870 --> 00:12:22,990
a great old file which is what we were

00:12:19,000 --> 00:12:25,630
porting from how do I declare a task in

00:12:22,990 --> 00:12:28,210
Gradle here's a simple task just task

00:12:25,630 --> 00:12:31,330
hello dual asking it just it simply

00:12:28,210 --> 00:12:32,710
prints hello so how do I do that how do

00:12:31,330 --> 00:12:34,990
I do that in Basel

00:12:32,710 --> 00:12:38,620
well then Basel I want to create a rule

00:12:34,990 --> 00:12:43,780
I can create a simple rule here which

00:12:38,620 --> 00:12:45,820
basically in rules up Basel and it's it

00:12:43,780 --> 00:12:48,790
creates a rule and an implementation

00:12:45,820 --> 00:12:51,640
basically that that just prints hello

00:12:48,790 --> 00:12:54,250
world and in my build file I can load

00:12:51,640 --> 00:12:56,620
that rule and and run it and it'll in

00:12:54,250 --> 00:13:04,660
the debug output intellectually print

00:12:56,620 --> 00:13:06,700
hello so yeah you put that bill file wet

00:13:04,660 --> 00:13:11,980
build file where so we've seen in other

00:13:06,700 --> 00:13:14,710
talks here today that where you place

00:13:11,980 --> 00:13:18,180
your bill files can make a big

00:13:14,710 --> 00:13:21,610
difference in the speed of your build in

00:13:18,180 --> 00:13:23,260
Gradle you have a bill filer at your top

00:13:21,610 --> 00:13:27,670
level of your directory and Gradle

00:13:23,260 --> 00:13:32,050
expects expects you to have your source

00:13:27,670 --> 00:13:33,880
files and I may even ask type directory

00:13:32,050 --> 00:13:37,270
structure you can change that if you if

00:13:33,880 --> 00:13:38,770
you want but by convention you would

00:13:37,270 --> 00:13:42,490
expect to have that you Specter every

00:13:38,770 --> 00:13:46,420
source files in that way in Basel

00:13:42,490 --> 00:13:48,220
however you can put you it you can do

00:13:46,420 --> 00:13:52,660
the same thing you can you can place a

00:13:48,220 --> 00:13:55,180
build file to pick up all up pick up

00:13:52,660 --> 00:13:56,680
everything for the individual module and

00:13:55,180 --> 00:13:59,050
have it do the same thing to Gradle does

00:13:56,680 --> 00:14:00,990
but it's a better practice to put a

00:13:59,050 --> 00:14:03,370
build file and they've talked about this

00:14:00,990 --> 00:14:07,840
six or seven times and put a build file

00:14:03,370 --> 00:14:11,940
at the package level so that's how you

00:14:07,840 --> 00:14:15,550
do that that's how how we did that so

00:14:11,940 --> 00:14:20,860
when I'm running Gradle what I do a

00:14:15,550 --> 00:14:23,080
build my test just run whenever I call

00:14:20,860 --> 00:14:24,040
Gradle build they just run or I can run

00:14:23,080 --> 00:14:29,050
them separately with

00:14:24,040 --> 00:14:31,300
test so when I run my build for Basel it

00:14:29,050 --> 00:14:32,560
doesn't run my test automatically but

00:14:31,300 --> 00:14:34,810
that's because Basel just works

00:14:32,560 --> 00:14:37,329
differently if I want to run a test in

00:14:34,810 --> 00:14:41,589
in Basel I just called Basel tests they

00:14:37,329 --> 00:14:42,910
give the path to the target or if I want

00:14:41,589 --> 00:14:45,310
to run all the tests I can just call

00:14:42,910 --> 00:14:47,889
I'll call Basel test and and just and

00:14:45,310 --> 00:14:52,959
pass in the whole the whole thing and

00:14:47,889 --> 00:14:55,720
then run all the tests at once so what

00:14:52,959 --> 00:14:58,000
about spring boot we work in the Java

00:14:55,720 --> 00:15:01,269
Java world a lot and you encounter

00:14:58,000 --> 00:15:03,220
spring boot a lot in Gradle it's it's

00:15:01,269 --> 00:15:05,560
just as easy as using a plugin there's a

00:15:03,220 --> 00:15:08,230
plugin for it you use the plug-in it's

00:15:05,560 --> 00:15:11,170
well supported by spring about a spring

00:15:08,230 --> 00:15:13,779
community it's pretty easy and it's

00:15:11,170 --> 00:15:15,910
really easy to use so how do you do that

00:15:13,779 --> 00:15:17,800
in Basel well there's no rule there

00:15:15,910 --> 00:15:21,519
wasn't a rule out there and in the Java

00:15:17,800 --> 00:15:24,459
rules for doing spring boot you can use

00:15:21,519 --> 00:15:28,269
there's an example out in the spring out

00:15:24,459 --> 00:15:30,250
in the basil add in the basil in the

00:15:28,269 --> 00:15:33,339
basil code of doing of doing spring

00:15:30,250 --> 00:15:35,860
but-- but it but in their example it

00:15:33,339 --> 00:15:38,560
doesn't it actually doesn't build out

00:15:35,860 --> 00:15:43,959
what it doesn't build out a boot jar

00:15:38,560 --> 00:15:46,029
file it actually just creates pulls all

00:15:43,959 --> 00:15:49,690
your dependencies together creates the

00:15:46,029 --> 00:15:53,110
script to run and runs it that way which

00:15:49,690 --> 00:15:55,990
is workable and if you and it and it

00:15:53,110 --> 00:15:58,480
works but what we'd rather see is a

00:15:55,990 --> 00:16:00,130
spring boot jar that's well that's kind

00:15:58,480 --> 00:16:04,569
of what kind of a well is well defined

00:16:00,130 --> 00:16:06,160
now so what we did was we and we didn't

00:16:04,569 --> 00:16:08,260
want him to reinvent the wheel so we

00:16:06,160 --> 00:16:09,970
went on the look for somebody else who

00:16:08,260 --> 00:16:10,600
had surely somebody else had done this

00:16:09,970 --> 00:16:13,510
before

00:16:10,600 --> 00:16:15,670
and we found that Salesforce or friends

00:16:13,510 --> 00:16:18,279
that Salesforce had created a basil

00:16:15,670 --> 00:16:21,130
spring blue rule and we took a look at

00:16:18,279 --> 00:16:23,680
it it was a couple of years old didn't

00:16:21,130 --> 00:16:25,750
work because it was with the newest

00:16:23,680 --> 00:16:29,410
version of bat with a version of basil

00:16:25,750 --> 00:16:31,980
so we forked it made a few changes to

00:16:29,410 --> 00:16:34,720
make it work and now we're using that

00:16:31,980 --> 00:16:36,820
and now it's just so happens at this

00:16:34,720 --> 00:16:38,709
conference we've talked with the

00:16:36,820 --> 00:16:40,060
our friends here at Salesforce and

00:16:38,709 --> 00:16:42,070
they're gonna there they have actually

00:16:40,060 --> 00:16:43,720
updated the second rule thank you and

00:16:42,070 --> 00:16:46,480
they're gonna are going to push that

00:16:43,720 --> 00:16:51,209
push those changes out so hopefully we

00:16:46,480 --> 00:16:51,209
can use that for project scope moving on

00:16:52,050 --> 00:16:57,310
alright so how about micro profile so if

00:16:55,300 --> 00:16:59,589
you're not using Spring butyou may be in

00:16:57,310 --> 00:17:04,900
the je e community and want to use a

00:16:59,589 --> 00:17:06,579
micro profile well even in Gradle micro

00:17:04,900 --> 00:17:09,939
profile doesn't work very well there's a

00:17:06,579 --> 00:17:12,130
there's a few plugins for it

00:17:09,939 --> 00:17:13,809
thorn tales wanted to plugins and has a

00:17:12,130 --> 00:17:16,360
great a plugin but it doesn't work very

00:17:13,809 --> 00:17:18,429
well it's not very well supported open

00:17:16,360 --> 00:17:22,240
Liberty has a Gradle plugin and it is

00:17:18,429 --> 00:17:25,030
updated regularly but it's still a

00:17:22,240 --> 00:17:28,510
second class and it heavily relies on

00:17:25,030 --> 00:17:32,950
ant tasks so but what about the

00:17:28,510 --> 00:17:34,450
Baselworld well no such luck basil

00:17:32,950 --> 00:17:39,130
you're on your own basil ward you're on

00:17:34,450 --> 00:17:40,750
your own there are tools these tools

00:17:39,130 --> 00:17:42,850
they have documentation on how their

00:17:40,750 --> 00:17:44,830
packages you know so this is kind of on

00:17:42,850 --> 00:17:52,540
our radar to take a look at building

00:17:44,830 --> 00:17:55,299
some rules rules specific for this all

00:17:52,540 --> 00:17:57,460
right well okay so figured out a way and

00:17:55,299 --> 00:18:04,330
I built my fat jar so what about my

00:17:57,460 --> 00:18:06,760
docker image so the the the project that

00:18:04,330 --> 00:18:09,280
we were migrating this project that we

00:18:06,760 --> 00:18:11,200
use for us for this talk that was

00:18:09,280 --> 00:18:13,510
migrating it actually used docker images

00:18:11,200 --> 00:18:16,630
so it built out these spring boot jars

00:18:13,510 --> 00:18:22,390
and then it created docker images for it

00:18:16,630 --> 00:18:26,740
so in Gradle there are some solid docker

00:18:22,390 --> 00:18:28,179
plugins and that button they execute by

00:18:26,740 --> 00:18:30,309
using the docker that's installed on

00:18:28,179 --> 00:18:32,260
your system they're not hermetic but

00:18:30,309 --> 00:18:35,380
they do work they don't run in parallel

00:18:32,260 --> 00:18:38,500
and it can't take a long time

00:18:35,380 --> 00:18:41,530
and usually they use docker files for

00:18:38,500 --> 00:18:45,159
building and then you publish using your

00:18:41,530 --> 00:18:47,049
installed docker on the basil side of

00:18:45,159 --> 00:18:50,200
thing basil has rules docker it's a

00:18:47,049 --> 00:18:51,970
different approach and bays are based

00:18:50,200 --> 00:18:53,830
actually has its own container builder

00:18:51,970 --> 00:18:57,340
it's hermetic it's fast it runs in

00:18:53,830 --> 00:18:58,840
parallel and the image configured is via

00:18:57,340 --> 00:19:00,340
the rules so it's a different approach

00:18:58,840 --> 00:19:04,109
and to take some planning and

00:19:00,340 --> 00:19:06,519
understanding to get it to work right

00:19:04,109 --> 00:19:07,929
and you should all right you should

00:19:06,519 --> 00:19:16,179
so I mean you should know what you put

00:19:07,929 --> 00:19:18,639
in your docker container so all right

00:19:16,179 --> 00:19:21,340
and here's kind of an example of how you

00:19:18,639 --> 00:19:23,919
do it on the Gradle side you copy your

00:19:21,340 --> 00:19:26,080
artifacts to your docker and it's just

00:19:23,919 --> 00:19:30,509
and then you run your task to create

00:19:26,080 --> 00:19:33,609
your docker image and on the basil side

00:19:30,509 --> 00:19:40,330
you can see it's pretty it is pretty

00:19:33,609 --> 00:19:44,049
straightforward all right well how about

00:19:40,330 --> 00:19:45,970
publishing a jar file I don't see any

00:19:44,049 --> 00:19:47,169
rules on the basil side for publishing a

00:19:45,970 --> 00:19:48,070
jar file but how do you do it under

00:19:47,169 --> 00:19:50,169
Gradle side

00:19:48,070 --> 00:19:53,080
well Gradle you just use that we can use

00:19:50,169 --> 00:19:54,879
the plug-in maven publish and just to

00:19:53,080 --> 00:19:57,519
find the parameters we can just tell it

00:19:54,879 --> 00:20:01,869
what maven repository to publish to give

00:19:57,519 --> 00:20:03,909
the authentication and Palm fire and and

00:20:01,869 --> 00:20:07,809
and publish it will publish the pom file

00:20:03,909 --> 00:20:12,519
and Gradle has a new metadata file that

00:20:07,809 --> 00:20:14,200
little create and publish with it basil

00:20:12,519 --> 00:20:17,649
doesn't provide this functionality in

00:20:14,200 --> 00:20:19,749
the Java rules so yeah so you kind of on

00:20:17,649 --> 00:20:22,419
your own for this the publishing part of

00:20:19,749 --> 00:20:25,419
it is it's kind of straightforward it's

00:20:22,419 --> 00:20:28,149
just a bunch of HTTP calls right the

00:20:25,419 --> 00:20:29,379
problem is is the creation of the pom

00:20:28,149 --> 00:20:31,840
files you're gonna have to do that

00:20:29,379 --> 00:20:36,989
yourself we've had some success doing

00:20:31,840 --> 00:20:40,419
that using some basil common rule sets

00:20:36,989 --> 00:20:45,669
that have some pom file creation there's

00:20:40,419 --> 00:20:48,669
also there's also grokken labs has also

00:20:45,669 --> 00:20:50,200
got a set of rules to it that it helps

00:20:48,669 --> 00:20:53,519
you do that and there they're open

00:20:50,200 --> 00:20:55,809
sourced and I believe I heard yesterday

00:20:53,519 --> 00:21:00,279
Salesforce actually has a set of plugins

00:20:55,809 --> 00:21:01,690
or rules set to do that also so there's

00:21:00,279 --> 00:21:03,590
at least that there's at least two or

00:21:01,690 --> 00:21:05,450
three ways to publish the jar

00:21:03,590 --> 00:21:09,950
rulesets out there to publish the jar

00:21:05,450 --> 00:21:14,000
file all right well what about my code

00:21:09,950 --> 00:21:16,490
quality tools Gradle has plug-ins for

00:21:14,000 --> 00:21:17,270
all my code quality tools I can run spot

00:21:16,490 --> 00:21:22,580
bugs

00:21:17,270 --> 00:21:24,650
I can run PMD I can run checks tile what

00:21:22,580 --> 00:21:27,320
do you have how do you how do you do

00:21:24,650 --> 00:21:30,920
accomplish the same thing in Basel well

00:21:27,320 --> 00:21:32,780
basil uses error-prone it's built in to

00:21:30,920 --> 00:21:36,980
basil it works just straight out of the

00:21:32,780 --> 00:21:40,070
box and you can control what is reported

00:21:36,980 --> 00:21:42,740
by either either in the basil RC file or

00:21:40,070 --> 00:21:44,300
by the command line now there also some

00:21:42,740 --> 00:21:46,070
other rules out there there's some rules

00:21:44,300 --> 00:21:49,700
for running check style there's also a

00:21:46,070 --> 00:21:51,800
rule for running like sonar cube and but

00:21:49,700 --> 00:21:56,720
specific tools require custom rules set

00:21:51,800 --> 00:22:00,440
custom rule sets but don't I need to

00:21:56,720 --> 00:22:02,540
clean the build Gradle does a good job

00:22:00,440 --> 00:22:04,220
of keeping you from running clean but

00:22:02,540 --> 00:22:09,380
sometimes there are times when you

00:22:04,220 --> 00:22:10,940
simply have no other choice on the basil

00:22:09,380 --> 00:22:13,310
side of it this is one of Basil's

00:22:10,940 --> 00:22:16,430
primary goals is to ensure that you do

00:22:13,310 --> 00:22:17,600
correct incremental builds and I'm not

00:22:16,430 --> 00:22:19,100
going to read this to you because we've

00:22:17,600 --> 00:22:22,160
went over this they've went over this a

00:22:19,100 --> 00:22:24,230
bunch of times does she during this

00:22:22,160 --> 00:22:26,870
conference but one of the things this is

00:22:24,230 --> 00:22:28,520
one of the benefits of using one of the

00:22:26,870 --> 00:22:30,110
benefits of using correct incremental

00:22:28,520 --> 00:22:32,990
builds it's just a lot is you don't

00:22:30,110 --> 00:22:40,700
waste time waiting on rebuilds caused by

00:22:32,990 --> 00:22:44,390
the use of a clean command so how do I

00:22:40,700 --> 00:22:48,440
build a war file in Gradle I just use

00:22:44,390 --> 00:22:50,120
the war plug-in again in basil the Java

00:22:48,440 --> 00:22:52,220
rule said it doesn't contain any rules

00:22:50,120 --> 00:22:54,170
for building a war file but there's

00:22:52,220 --> 00:22:57,170
another rule set the App Engine rules

00:22:54,170 --> 00:22:59,510
they they actually contain that so what

00:22:57,170 --> 00:23:01,340
we did was we used the App Engine rules

00:22:59,510 --> 00:23:08,030
and use the Java war here's an example

00:23:01,340 --> 00:23:11,050
of it so what happens if I need to do

00:23:08,030 --> 00:23:11,050
something special

00:23:11,279 --> 00:23:15,940
but need to do something special in

00:23:13,450 --> 00:23:20,350
Gradle I'll use plugins or custom tasks

00:23:15,940 --> 00:23:24,009
or I can write custom plugins on the

00:23:20,350 --> 00:23:27,179
basal side we can use custom basal rules

00:23:24,009 --> 00:23:30,429
we can use a general tool chains

00:23:27,179 --> 00:23:31,809
platforms these are the things that we

00:23:30,429 --> 00:23:38,139
can do if we want to do something

00:23:31,809 --> 00:23:39,759
special in Basel now I think I'm gonna

00:23:38,139 --> 00:23:40,749
hand the back over to chip here all

00:23:39,759 --> 00:23:46,599
right talk a little bit about

00:23:40,749 --> 00:23:50,190
performance so first let's talk a little

00:23:46,599 --> 00:23:50,190
bit about the project that we actually

00:23:50,399 --> 00:23:55,389
migrated the original Gradle bill

00:23:52,809 --> 00:23:57,249
produced 11 libraries 19 micro services

00:23:55,389 --> 00:23:59,649
each of them in their own docker

00:23:57,249 --> 00:24:02,200
container it's not a giant bill that by

00:23:59,649 --> 00:24:03,639
any stretch of the imagination we we we

00:24:02,200 --> 00:24:05,859
picked this part of you've heard

00:24:03,639 --> 00:24:08,289
migration strategy talks you've heard

00:24:05,859 --> 00:24:11,109
other things so we picked this piece of

00:24:08,289 --> 00:24:14,259
the build because it was in our

00:24:11,109 --> 00:24:16,359
wheelhouse so we understood we could

00:24:14,259 --> 00:24:18,429
look at what the Gradle build was doing

00:24:16,359 --> 00:24:20,169
and we understood what it was doing and

00:24:18,429 --> 00:24:25,869
why it was doing it so it was the

00:24:20,169 --> 00:24:27,669
low-hanging fruit in the project the

00:24:25,869 --> 00:24:30,669
simple stats comparing that we're going

00:24:27,669 --> 00:24:32,979
to run here is just we run a clean build

00:24:30,669 --> 00:24:35,799
we produce the docker containers in both

00:24:32,979 --> 00:24:37,929
Gradle and basil's so no caching to get

00:24:35,799 --> 00:24:40,269
started or anything just we ran clean on

00:24:37,929 --> 00:24:42,940
both of them and then we just ran it's

00:24:40,269 --> 00:24:44,739
not a good mark neither build by the way

00:24:42,940 --> 00:24:47,499
is totally optimized or anything like

00:24:44,739 --> 00:24:48,879
that these were just as they came we

00:24:47,499 --> 00:24:52,029
didn't spend a lot of time trying to

00:24:48,879 --> 00:24:55,059
optimize the greater build that wasn't

00:24:52,029 --> 00:24:57,519
what we were trying to do we just

00:24:55,059 --> 00:25:01,989
migrated the the build and actually put

00:24:57,519 --> 00:25:03,820
the at the at the build file level at

00:25:01,989 --> 00:25:05,559
the same place that the build that

00:25:03,820 --> 00:25:07,239
Gradle files were so we did not start

00:25:05,559 --> 00:25:09,509
breaking it down by package or anything

00:25:07,239 --> 00:25:09,509
like that

00:25:13,950 --> 00:25:25,480
Wow okay covered all that I guess I've

00:25:21,760 --> 00:25:27,220
memorized over this nothing there are

00:25:25,480 --> 00:25:30,840
definitely things in both builds that

00:25:27,220 --> 00:25:34,510
could make both of them faster okay in

00:25:30,840 --> 00:25:36,190
the in the Gradle just looking it over

00:25:34,510 --> 00:25:39,700
based on our experience you kind of

00:25:36,190 --> 00:25:41,470
apply the 80/20 rule here further

00:25:39,700 --> 00:25:43,210
optimization of the Gradle build was

00:25:41,470 --> 00:25:45,010
going to take a lot of effort you know

00:25:43,210 --> 00:25:48,820
there's a lot more effort for a smaller

00:25:45,010 --> 00:25:51,370
gain in the optimization of the Gradle

00:25:48,820 --> 00:25:53,710
build basal of course the further

00:25:51,370 --> 00:25:56,440
breakdown of the build of the work units

00:25:53,710 --> 00:26:02,920
could definitely improve the speed and

00:25:56,440 --> 00:26:05,080
things like that so with Gradle first

00:26:02,920 --> 00:26:06,550
thing this goes back to one of the early

00:26:05,080 --> 00:26:08,380
slides on dependencies right and the

00:26:06,550 --> 00:26:10,960
Gradle dependencies we kind of loop side

00:26:08,380 --> 00:26:12,400
that get in there so that was kind of

00:26:10,960 --> 00:26:15,280
the first as we were trying to do the

00:26:12,400 --> 00:26:18,210
comparisons of how correct is our build

00:26:15,280 --> 00:26:20,920
based on what the Gradle side was doing

00:26:18,210 --> 00:26:22,600
you can kind of see the the two builds

00:26:20,920 --> 00:26:23,620
we ran at first and then we ran it a

00:26:22,600 --> 00:26:26,950
second time

00:26:23,620 --> 00:26:29,050
you can see that we got 123 tasks we're

00:26:26,950 --> 00:26:32,050
up to date and it ran the 19 executed

00:26:29,050 --> 00:26:34,000
tasks that's due to the docker plug-in

00:26:32,050 --> 00:26:37,260
and it calling out shelling out

00:26:34,000 --> 00:26:41,950
basically to the the docker run commands

00:26:37,260 --> 00:26:43,929
there so basal dependencies we got

00:26:41,950 --> 00:26:47,790
exactly what we asked for

00:26:43,929 --> 00:26:51,370
first run equivalent roughly second run

00:26:47,790 --> 00:26:53,890
far faster and again that comes with the

00:26:51,370 --> 00:26:57,820
the rules docker part of this because it

00:26:53,890 --> 00:27:02,410
was cached the results were cast so this

00:26:57,820 --> 00:27:03,820
is not a statement on over this build

00:27:02,410 --> 00:27:06,670
well you know this is why we did this

00:27:03,820 --> 00:27:08,860
the the actual reason that we reported

00:27:06,670 --> 00:27:11,110
this particular build had more to do

00:27:08,860 --> 00:27:14,230
with the hermiticity and the and the

00:27:11,110 --> 00:27:16,480
reproducibility of the build as well as

00:27:14,230 --> 00:27:19,750
dealing with the provenance so more

00:27:16,480 --> 00:27:21,550
security related then then performance

00:27:19,750 --> 00:27:26,250
related but it was nice to see a little

00:27:21,550 --> 00:27:26,250
speed-up and some of this

00:27:26,679 --> 00:27:34,720
so a few other things Gradle if you're

00:27:32,269 --> 00:27:38,990
doing a JVM language it's a great tool

00:27:34,720 --> 00:27:40,850
Android the the Gradle Kotlin and these

00:27:38,990 --> 00:27:43,909
days is kind of the de facto Android app

00:27:40,850 --> 00:27:47,029
what you're doing stuff great will build

00:27:43,909 --> 00:27:50,539
your Java base stack but if you start

00:27:47,029 --> 00:27:52,129
getting outside of Java you know you

00:27:50,539 --> 00:27:55,249
want to go build your angular app along

00:27:52,129 --> 00:27:56,299
with your iOS app along with the the

00:27:55,249 --> 00:27:58,610
rest of the things that you're doing

00:27:56,299 --> 00:28:04,129
then then you you're going outside of

00:27:58,610 --> 00:28:05,779
Gradle for your tool stack the basal it

00:28:04,129 --> 00:28:07,249
built many things well you've heard a

00:28:05,779 --> 00:28:08,570
million talks about this when we wrote

00:28:07,249 --> 00:28:10,610
this we didn't know what order we were

00:28:08,570 --> 00:28:13,840
going in so I'm not going to read

00:28:10,610 --> 00:28:16,700
through all of this in valois piece a

00:28:13,840 --> 00:28:21,139
couple of things from a JVM perspective

00:28:16,700 --> 00:28:25,629
right Kotlin support is still improving

00:28:21,139 --> 00:28:29,720
and improving other jvm languages GPU

00:28:25,629 --> 00:28:33,019
scene talks you know grooviest got solid

00:28:29,720 --> 00:28:35,330
support and basel basically the part of

00:28:33,019 --> 00:28:36,889
the reason that we are moving project so

00:28:35,330 --> 00:28:43,119
that is basically you get a full stack

00:28:36,889 --> 00:28:47,690
approach for a con and a common tool so

00:28:43,119 --> 00:28:49,580
some of the lessons learned it's not

00:28:47,690 --> 00:28:52,519
always the tool that's doing something

00:28:49,580 --> 00:28:58,580
wrong sometimes you just did something

00:28:52,519 --> 00:29:00,740
wrong with basil dependencies are

00:28:58,580 --> 00:29:07,159
definitely intentional and very precise

00:29:00,740 --> 00:29:09,470
and the that is sometimes painful coming

00:29:07,159 --> 00:29:11,210
from the way you do things and other

00:29:09,470 --> 00:29:13,789
tools may have inter Gradle and the way

00:29:11,210 --> 00:29:20,269
you think about the way I guess the

00:29:13,789 --> 00:29:21,799
tools think so replacing plugins from

00:29:20,269 --> 00:29:24,110
the Gradle ecosystem is not always a

00:29:21,799 --> 00:29:26,749
direct port like for instance the Worf

00:29:24,110 --> 00:29:28,759
pieces that we found here right so we

00:29:26,749 --> 00:29:31,850
went looking for ok how do I create a

00:29:28,759 --> 00:29:33,950
war file and ruled Java well there's not

00:29:31,850 --> 00:29:35,720
one so we went someplace else and found

00:29:33,950 --> 00:29:38,820
someplace you know found the other other

00:29:35,720 --> 00:29:41,970
piece so you're not always

00:29:38,820 --> 00:29:48,999
looking for something that is that is a

00:29:41,970 --> 00:29:51,190
one-to-one common common piece so again

00:29:48,999 --> 00:29:53,799
this goes back to many of the parts that

00:29:51,190 --> 00:29:56,409
you need and doing your conversions or

00:29:53,799 --> 00:29:57,879
doing your port they already exist

00:29:56,409 --> 00:29:59,889
they're just not always lumped in to

00:29:57,879 --> 00:30:02,019
where you think they might be because

00:29:59,889 --> 00:30:07,989
they apply to something else or they're

00:30:02,019 --> 00:30:09,609
more generic generally basil just thinks

00:30:07,989 --> 00:30:11,169
different than Gradle and that was

00:30:09,609 --> 00:30:15,789
probably the hardest thing that we did

00:30:11,169 --> 00:30:17,499
trying to trying to approach this basal

00:30:15,789 --> 00:30:19,359
kind of gives thee with great power

00:30:17,499 --> 00:30:19,779
comes great responsibility kind of a

00:30:19,359 --> 00:30:21,759
thing

00:30:19,779 --> 00:30:24,059
gray Dalls approaches more don't you

00:30:21,759 --> 00:30:29,769
worry your pretty little head about that

00:30:24,059 --> 00:30:32,799
both that merit but we're finding as

00:30:29,769 --> 00:30:35,799
we're moving forward that knowing

00:30:32,799 --> 00:30:38,109
exactly what our build is doing knowing

00:30:35,799 --> 00:30:41,259
exactly where things are coming from is

00:30:38,109 --> 00:30:45,690
much more important as we build these

00:30:41,259 --> 00:30:47,230
more complex systems than they

00:30:45,690 --> 00:30:55,059
necessarily you know some of the

00:30:47,230 --> 00:30:58,659
ease-of-use that we get well that's

00:30:55,059 --> 00:31:02,529
great mm-hmm is that you guys ready for

00:30:58,659 --> 00:31:04,330
questions we are sorry I'm probably chip

00:31:02,529 --> 00:31:07,179
and Charlie we got time for maybe one

00:31:04,330 --> 00:31:09,549
question maybe two questions have

00:31:07,179 --> 00:31:11,889
anybody if not where we can move towards

00:31:09,549 --> 00:31:13,419
the wrap-up so it's all good I'm super

00:31:11,889 --> 00:31:15,429
excited you've come on stage super

00:31:13,419 --> 00:31:16,809
excited that you've come to be a basil

00:31:15,429 --> 00:31:18,879
community expert and I'm super excited

00:31:16,809 --> 00:31:21,129
about the knowledge you bring to the

00:31:18,879 --> 00:31:24,659
community so thanks again all right

00:31:21,129 --> 00:31:24,659

YouTube URL: https://www.youtube.com/watch?v=b8uR7_vReQ0


