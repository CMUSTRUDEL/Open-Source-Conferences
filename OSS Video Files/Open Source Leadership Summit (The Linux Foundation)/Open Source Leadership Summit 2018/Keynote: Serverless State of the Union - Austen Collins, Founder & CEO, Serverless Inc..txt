Title: Keynote: Serverless State of the Union - Austen Collins, Founder & CEO, Serverless Inc.
Publication date: 2018-03-07
Playlist: Open Source Leadership Summit 2018
Description: 
	Keynote: Serverless State of the Union - Austen Collins, Founder & CEO, Serverless Inc. 


Serverless has captivated the IT community at an incredible pace, and for good reason.  It has tremendous power to liberate productivity, increase innovation and reduce overhead.  However, adopting serverless technologies is still not well understood.  As the ecosystem grows around serverless, we’re empowered with options, yet further distanced us from a clear path to adoption.

In this talk, we’ll break through the clutter to investigate use-cases, adoption methods, the power of serverless now and it’s capacity to meet the demands of the future.  We’ll also look into open-source, community-led projects within the Cloud Native Computing Foundation that aim to advance the adoption of serverless technologies, while enabling interoperability and an open ecosystem.

About Austen 
Austen Collins is a product-obsessed, software engineering leader.  His focus is not on technology, but on business value, customer experience and making meaning.  Austen is a primary influencer of the emerging “serverless” movement.  He is the creator of the Serverless Framework, the leading open-source tool for building applications with the least possible cost and overhead on top of infrastructure with “serverless” qualities.  In 2015, he founded Serverless Inc. (serverless.com), which creates developer tools and infrastructure to help organizations build and operate serverless applications.  He lives in San Francisco, CA.
Captions: 
	00:00:00,000 --> 00:00:03,570
all right good morning it's a pretty

00:00:01,500 --> 00:00:06,299
good turnout thank you so much for

00:00:03,570 --> 00:00:08,730
coming my eyes are a little red and

00:00:06,299 --> 00:00:11,010
blurry this morning not because I've

00:00:08,730 --> 00:00:11,670
been up all night drinking fine wine in

00:00:11,010 --> 00:00:13,349
Sonoma

00:00:11,670 --> 00:00:16,139
but because I woke up with a slight eye

00:00:13,349 --> 00:00:17,820
irritation so I got have my slides here

00:00:16,139 --> 00:00:19,800
my notes here so I could see them and if

00:00:17,820 --> 00:00:21,240
at any point I'm no longer facing the

00:00:19,800 --> 00:00:23,279
audience during my talk if you could be

00:00:21,240 --> 00:00:25,350
so kind as just to give me like a polite

00:00:23,279 --> 00:00:26,519
shout out and let me know where you're

00:00:25,350 --> 00:00:29,670
at

00:00:26,519 --> 00:00:32,219
just kidding it's not that bad

00:00:29,670 --> 00:00:35,210
anyway I'm Austin Collins I guess I'm an

00:00:32,219 --> 00:00:37,950
instigator of this serverless movement I

00:00:35,210 --> 00:00:39,149
in 2015 I created a very popular

00:00:37,950 --> 00:00:41,340
open-source project called the

00:00:39,149 --> 00:00:42,780
surrealist framework and this is an

00:00:41,340 --> 00:00:45,180
application framework that allows you to

00:00:42,780 --> 00:00:47,670
build apps exclusively on service

00:00:45,180 --> 00:00:49,200
infrastructure like AWS lambda and I

00:00:47,670 --> 00:00:51,090
think that this framework in particular

00:00:49,200 --> 00:00:53,610
had a lot to do in showing the world

00:00:51,090 --> 00:00:55,770
kind of how powerful this technology and

00:00:53,610 --> 00:00:58,289
this trend can be I'm also the founder

00:00:55,770 --> 00:01:00,120
and CEO of a startup called Cerberus Inc

00:00:58,289 --> 00:01:02,940
we're based in San Francisco we make

00:01:00,120 --> 00:01:05,250
tools and services to help developers

00:01:02,940 --> 00:01:07,590
and teams build and operate service

00:01:05,250 --> 00:01:10,130
applications regardless of platform and

00:01:07,590 --> 00:01:12,090
our company is also helping out with the

00:01:10,130 --> 00:01:14,490
standardization efforts happening within

00:01:12,090 --> 00:01:16,770
the CNC F around serverless concepts

00:01:14,490 --> 00:01:18,900
which I'll dig into later in this talk

00:01:16,770 --> 00:01:20,850
anyway this is serverless

00:01:18,900 --> 00:01:23,520
state-of-the-union special open source

00:01:20,850 --> 00:01:26,430
edition special exclusive in this talk

00:01:23,520 --> 00:01:27,780
we're gonna analyze what's happening in

00:01:26,430 --> 00:01:29,220
the service world we're gonna try and

00:01:27,780 --> 00:01:31,350
forecast you know what's gonna happen

00:01:29,220 --> 00:01:33,840
next and we're gonna discuss leveraging

00:01:31,350 --> 00:01:36,259
open source to smartly adopt service

00:01:33,840 --> 00:01:41,310
today so let's get started

00:01:36,259 --> 00:01:44,220
boom omits containers orchestrators VMs

00:01:41,310 --> 00:01:46,380
paths at a left field out of nowhere

00:01:44,220 --> 00:01:48,210
basically came this this serverless

00:01:46,380 --> 00:01:50,880
trend I don't think anyone was really

00:01:48,210 --> 00:01:53,549
expecting it and it picked up momentum

00:01:50,880 --> 00:01:56,070
rapidly it has won hearts and minds and

00:01:53,549 --> 00:01:58,640
developers and it's not slowing down we

00:01:56,070 --> 00:02:01,530
clearly have a trend here on our hands

00:01:58,640 --> 00:02:03,780
and now what's the big deal why why is

00:02:01,530 --> 00:02:06,180
why is this trend catching on why is

00:02:03,780 --> 00:02:09,000
this important so first off to clarify

00:02:06,180 --> 00:02:10,860
if you aren't already aware serverless

00:02:09,000 --> 00:02:12,360
means that those servers exist

00:02:10,860 --> 00:02:13,170
developers don't have to think about

00:02:12,360 --> 00:02:14,910
them

00:02:13,170 --> 00:02:16,770
not a very technically accurate term

00:02:14,910 --> 00:02:19,680
it's about as technically accurate as

00:02:16,770 --> 00:02:21,390
the term the cloud I'd say but once you

00:02:19,680 --> 00:02:24,270
say once you say that word to a

00:02:21,390 --> 00:02:26,480
developer and you see that enthusiasm

00:02:24,270 --> 00:02:30,150
that it invokes that emotional response

00:02:26,480 --> 00:02:32,850
you know there's there's no there's no

00:02:30,150 --> 00:02:34,920
reason why it's easy to recognize why

00:02:32,850 --> 00:02:36,690
this buzzword caught on why it is the

00:02:34,920 --> 00:02:39,120
buzzword because it invokes all the

00:02:36,690 --> 00:02:40,709
right emotions and it's all about you

00:02:39,120 --> 00:02:42,269
know using tools using infrastructure

00:02:40,709 --> 00:02:44,700
that get out of your way so you could

00:02:42,269 --> 00:02:46,440
focus on solving business problems and

00:02:44,700 --> 00:02:48,480
this simple idea has been around for a

00:02:46,440 --> 00:02:53,069
long time and obviously has has mass

00:02:48,480 --> 00:02:56,340
appeal and this simple idea you know a

00:02:53,069 --> 00:02:58,110
reason why we we get why this has become

00:02:56,340 --> 00:03:00,510
such a big trend is that because first

00:02:58,110 --> 00:03:03,060
off this does a great job of solving

00:03:00,510 --> 00:03:05,670
ancient problems in our service

00:03:03,060 --> 00:03:09,000
framework we have significant enterprise

00:03:05,670 --> 00:03:10,230
adoption and when these users come to us

00:03:09,000 --> 00:03:12,299
we always ask them you know why are you

00:03:10,230 --> 00:03:14,489
here what's so interesting about this to

00:03:12,299 --> 00:03:15,750
you and they always tell us the same you

00:03:14,489 --> 00:03:17,910
know that they looking to solve the same

00:03:15,750 --> 00:03:19,530
problems that is number one they want to

00:03:17,910 --> 00:03:21,000
move fast they want to reduce time to

00:03:19,530 --> 00:03:22,829
market number two they want to increase

00:03:21,000 --> 00:03:24,359
innovation they're saying heck our

00:03:22,829 --> 00:03:25,560
competitors are moving very fast our

00:03:24,359 --> 00:03:28,049
competitors are doing all these cool

00:03:25,560 --> 00:03:29,760
things we want to do the same and they

00:03:28,049 --> 00:03:32,430
also want to reduce operational overhead

00:03:29,760 --> 00:03:34,530
of course and reduce cost and despite

00:03:32,430 --> 00:03:37,350
how far we've come when how is so much

00:03:34,530 --> 00:03:38,880
great change in innovation in IT we

00:03:37,350 --> 00:03:40,620
still have not solved these ancient

00:03:38,880 --> 00:03:41,730
problems yet and the serverless movement

00:03:40,620 --> 00:03:43,950
is kind of a testament to that

00:03:41,730 --> 00:03:46,790
and it's why surplice has has picked up

00:03:43,950 --> 00:03:50,070
so much momentum at the same time

00:03:46,790 --> 00:03:51,510
serverless solves new problems problems

00:03:50,070 --> 00:03:53,130
that are just starting to come into

00:03:51,510 --> 00:03:56,760
fruition and I don't know how to

00:03:53,130 --> 00:03:59,819
characterize these more concisely than

00:03:56,760 --> 00:04:01,109
to say you know the the digital world is

00:03:59,819 --> 00:04:02,640
storming into reality

00:04:01,109 --> 00:04:05,340
right now we've got Internet of Things

00:04:02,640 --> 00:04:07,290
devices everywhere with sensors

00:04:05,340 --> 00:04:09,359
collecting all types of data generating

00:04:07,290 --> 00:04:12,180
big data we've got machine learning

00:04:09,359 --> 00:04:14,250
artificial intelligence infused into all

00:04:12,180 --> 00:04:15,989
this building systems of intelligent

00:04:14,250 --> 00:04:18,630
systems that can make decisions in real

00:04:15,989 --> 00:04:21,060
time at creating autonomous machines

00:04:18,630 --> 00:04:22,500
self-driving cars we've got computing

00:04:21,060 --> 00:04:25,800
running in the edge all over the place

00:04:22,500 --> 00:04:26,669
Voice devices technology is is

00:04:25,800 --> 00:04:29,340
everywhere

00:04:26,669 --> 00:04:31,199
and if you're a business you have to pay

00:04:29,340 --> 00:04:33,719
attention to all this because your

00:04:31,199 --> 00:04:35,580
competitors are and amidst these ancient

00:04:33,719 --> 00:04:37,229
problems and all these new problems you

00:04:35,580 --> 00:04:39,210
know one of course has to ask themselves

00:04:37,229 --> 00:04:41,340
a very important question

00:04:39,210 --> 00:04:43,229
and that is do you really want to be

00:04:41,340 --> 00:04:45,449
running your own infrastructure is that

00:04:43,229 --> 00:04:47,460
kind of a good position for you right

00:04:45,449 --> 00:04:50,819
now is that kind of the gonna be on the

00:04:47,460 --> 00:04:52,710
right side of history that choice and

00:04:50,819 --> 00:04:54,569
that's you know I think you could see

00:04:52,710 --> 00:04:56,490
where the people in the service movement

00:04:54,569 --> 00:04:58,439
stand but they're you know they're very

00:04:56,490 --> 00:05:01,229
nervous about burdening themselves with

00:04:58,439 --> 00:05:03,830
this especially in this era of upcoming

00:05:01,229 --> 00:05:06,180
hyper innovation and hyper competition

00:05:03,830 --> 00:05:07,620
so servlets a brief history I'm not

00:05:06,180 --> 00:05:09,659
going to go into pass I'm just gonna

00:05:07,620 --> 00:05:12,689
start with the serverless trend starting

00:05:09,659 --> 00:05:14,789
back in 2014 this kind of got kicked off

00:05:12,689 --> 00:05:17,129
with Amazon Web Services when they came

00:05:14,789 --> 00:05:19,949
out with a new way to do compute in the

00:05:17,129 --> 00:05:21,750
cloud called AWS lambda and in the early

00:05:19,949 --> 00:05:24,889
days you know they were kind of

00:05:21,750 --> 00:05:27,629
marketing this as glue code as

00:05:24,889 --> 00:05:30,659
event-driven code and it was very

00:05:27,629 --> 00:05:32,219
limited the use cases were very limited

00:05:30,659 --> 00:05:34,680
but at the core there was a

00:05:32,219 --> 00:05:36,449
revolutionary way to do compute and it

00:05:34,680 --> 00:05:38,849
was revolutionary because all you had to

00:05:36,449 --> 00:05:40,680
do as a developer was upload some code

00:05:38,849 --> 00:05:42,479
and you'd write this code in the form of

00:05:40,680 --> 00:05:45,449
a function enough code to perform one

00:05:42,479 --> 00:05:47,520
task like save a user to a database or

00:05:45,449 --> 00:05:49,860
send out a transactional email you'd

00:05:47,520 --> 00:05:51,300
upload that code to AWS lambdas platform

00:05:49,860 --> 00:05:53,219
and that would create an AWS lambda

00:05:51,300 --> 00:05:55,259
function this independent unit of

00:05:53,219 --> 00:05:56,490
deployment and this function would

00:05:55,259 --> 00:05:58,349
require very little to zero

00:05:56,490 --> 00:06:01,379
administration the provider handles

00:05:58,349 --> 00:06:03,180
everything and it scales automatically

00:06:01,379 --> 00:06:05,610
to meet massive levels of concurrency

00:06:03,180 --> 00:06:07,830
and also aw slam des had this paper

00:06:05,610 --> 00:06:09,389
execution paper use pricing model that

00:06:07,830 --> 00:06:12,659
was incredibly efficient and this cannot

00:06:09,389 --> 00:06:14,460
be understated when people come join the

00:06:12,659 --> 00:06:15,919
service movement it's this pricing model

00:06:14,460 --> 00:06:18,539
that really brings them through the door

00:06:15,919 --> 00:06:19,680
and then they kind of stay for once they

00:06:18,539 --> 00:06:20,939
look at all these qualities together

00:06:19,680 --> 00:06:22,830
they realize that there is a lowest

00:06:20,939 --> 00:06:25,439
total cost of ownership scenario here

00:06:22,830 --> 00:06:27,479
that is absolutely compelling but this

00:06:25,439 --> 00:06:28,860
pricing model is super-important you're

00:06:27,479 --> 00:06:30,599
not going to get charged unless your

00:06:28,860 --> 00:06:32,250
code runs and when you do get charged

00:06:30,599 --> 00:06:35,009
you get charged at 100 millisecond

00:06:32,250 --> 00:06:37,349
increments very exciting and lastly this

00:06:35,009 --> 00:06:38,909
code is event-driven these functions

00:06:37,349 --> 00:06:39,990
will spin up to handle any type of

00:06:38,909 --> 00:06:41,430
events

00:06:39,990 --> 00:06:43,710
of events mostly coming from the

00:06:41,430 --> 00:06:46,380
underlying platform so when something

00:06:43,710 --> 00:06:48,000
happens in your AWS s3 bucket it'll

00:06:46,380 --> 00:06:50,160
automatically trigger a function or when

00:06:48,000 --> 00:06:53,040
a record gets saved to a dynamodb table

00:06:50,160 --> 00:06:55,410
it'll trigger a function or an HTTP web

00:06:53,040 --> 00:06:57,570
request in the service world even these

00:06:55,410 --> 00:07:04,140
HTTP requests are being considered as as

00:06:57,570 --> 00:07:05,760
events so back in back in 2015 you know

00:07:04,140 --> 00:07:07,560
a Tobias lambda the use cases were very

00:07:05,760 --> 00:07:08,880
limited that you know it was I don't

00:07:07,560 --> 00:07:10,710
think it had great packaging I don't

00:07:08,880 --> 00:07:12,360
think it had a great developer

00:07:10,710 --> 00:07:13,890
experience and it certainly was not

00:07:12,360 --> 00:07:16,800
being considered as an application

00:07:13,890 --> 00:07:18,870
platform and this is where kind of our

00:07:16,800 --> 00:07:20,520
company stepped in you know we came out

00:07:18,870 --> 00:07:22,980
to try and define the application

00:07:20,520 --> 00:07:24,750
experience around AWS lambda because at

00:07:22,980 --> 00:07:26,610
the core we saw that revolutionary

00:07:24,750 --> 00:07:27,960
compute service and we won't basically

00:07:26,610 --> 00:07:29,970
wanted to use it for everything right

00:07:27,960 --> 00:07:32,070
and we needed some tooling to enable

00:07:29,970 --> 00:07:35,850
that so we started working on this

00:07:32,070 --> 00:07:37,740
service framework mid-2015 and it solves

00:07:35,850 --> 00:07:38,820
a lot of problems that need to be solved

00:07:37,740 --> 00:07:41,430
if you want to build service

00:07:38,820 --> 00:07:44,100
architectures most importantly when you

00:07:41,430 --> 00:07:46,350
build a service architecture it's pretty

00:07:44,100 --> 00:07:47,850
complicated first off you have all these

00:07:46,350 --> 00:07:50,040
independent units of deployment all

00:07:47,850 --> 00:07:51,810
these functions and there are a lot of

00:07:50,040 --> 00:07:52,980
these this is very much like a

00:07:51,810 --> 00:07:54,900
traditional kind of micro service

00:07:52,980 --> 00:07:58,740
architecture however the difference in

00:07:54,900 --> 00:08:01,260
the service world is that the overhead

00:07:58,740 --> 00:08:02,520
burden is not there with these surplice

00:08:01,260 --> 00:08:04,740
functions because the provider is

00:08:02,520 --> 00:08:06,930
managing scale managing you know all

00:08:04,740 --> 00:08:08,490
aspects of administration and what

00:08:06,930 --> 00:08:09,750
happens and what we see regularly is

00:08:08,490 --> 00:08:11,430
that people who are doing service

00:08:09,750 --> 00:08:13,200
development it could be one or two

00:08:11,430 --> 00:08:15,450
engineers and their provisioning

00:08:13,200 --> 00:08:17,460
hundreds of these functions it's pretty

00:08:15,450 --> 00:08:19,530
awesome it's all because that overhead

00:08:17,460 --> 00:08:20,880
burden is not there so you have a whole

00:08:19,530 --> 00:08:22,950
bunch of functions a whole bunch of

00:08:20,880 --> 00:08:24,390
independent units of deployment and all

00:08:22,950 --> 00:08:26,400
these functions have infrastructure

00:08:24,390 --> 00:08:28,290
dependencies they need infrastructure to

00:08:26,400 --> 00:08:30,000
trigger the functions via events and

00:08:28,290 --> 00:08:31,470
they also need infrastructure to perform

00:08:30,000 --> 00:08:35,240
their business logic whether it's a

00:08:31,470 --> 00:08:37,290
database caching mechanism or storage

00:08:35,240 --> 00:08:39,780
anyway so we looked at all this in the

00:08:37,290 --> 00:08:41,520
early days we said you know this there's

00:08:39,780 --> 00:08:43,140
there's a there's an application story

00:08:41,520 --> 00:08:45,780
here that's that's pretty compelling and

00:08:43,140 --> 00:08:47,130
how can we express this in a simpler

00:08:45,780 --> 00:08:48,960
format so that people don't have to

00:08:47,130 --> 00:08:50,970
think about things in this very

00:08:48,960 --> 00:08:52,320
complicated way so the one thing that I

00:08:50,970 --> 00:08:54,360
think the service framework did very

00:08:52,320 --> 00:08:57,120
well is they said look

00:08:54,360 --> 00:08:59,430
this is serverless is simply a story of

00:08:57,120 --> 00:09:01,260
functions and events and that's what we

00:08:59,430 --> 00:09:03,210
presented to developers we gave them a

00:09:01,260 --> 00:09:05,190
simple configuration file you could list

00:09:03,210 --> 00:09:06,840
all your functions containing your

00:09:05,190 --> 00:09:08,850
business logic and every single function

00:09:06,840 --> 00:09:10,860
in that configuration file could have an

00:09:08,850 --> 00:09:12,450
events property and that you could list

00:09:10,860 --> 00:09:14,160
there all the events that would trigger

00:09:12,450 --> 00:09:16,530
that function all the events that happen

00:09:14,160 --> 00:09:18,300
in your digital business in this this

00:09:16,530 --> 00:09:19,770
whole experience was very very

00:09:18,300 --> 00:09:21,870
compelling the users all they'd have to

00:09:19,770 --> 00:09:23,520
do is type service deploy and the

00:09:21,870 --> 00:09:26,010
service framework will go provision all

00:09:23,520 --> 00:09:27,330
the infrastructure necessary and wire it

00:09:26,010 --> 00:09:29,700
up so that it works together in this

00:09:27,330 --> 00:09:30,750
event-driven model and the user and the

00:09:29,700 --> 00:09:32,790
developers won't have to think about

00:09:30,750 --> 00:09:34,110
that as much so again I think this open

00:09:32,790 --> 00:09:35,340
source project had a lot to do and kind

00:09:34,110 --> 00:09:37,200
of show in the world the service

00:09:35,340 --> 00:09:40,440
architecture introducing the service

00:09:37,200 --> 00:09:43,080
application to the world and up next in

00:09:40,440 --> 00:09:44,970
2016 given the massive success of AWS

00:09:43,080 --> 00:09:46,800
lambda a lot of the other public cloud

00:09:44,970 --> 00:09:49,680
providers took note and they started to

00:09:46,800 --> 00:09:51,930
offer very similar services Google came

00:09:49,680 --> 00:09:54,090
out with Google Cloud functions a jerk'

00:09:51,930 --> 00:09:56,820
mout with as your functions IBM came out

00:09:54,090 --> 00:09:59,400
with IBM cloud functions and overall

00:09:56,820 --> 00:10:02,220
these service functions also known as

00:09:59,400 --> 00:10:04,530
functions as a service they're a great

00:10:02,220 --> 00:10:06,360
way to use these cloud platforms they're

00:10:04,530 --> 00:10:08,280
a great way to adopt cloud platforms if

00:10:06,360 --> 00:10:10,290
you want to use a cloud platform and

00:10:08,280 --> 00:10:12,900
gain access to all the cool services

00:10:10,290 --> 00:10:14,910
that that cloud platform offers stick a

00:10:12,900 --> 00:10:17,100
function there it's auto-scaling

00:10:14,910 --> 00:10:18,870
you know it's paper execution it's a

00:10:17,100 --> 00:10:20,370
very very trivial way to start

00:10:18,870 --> 00:10:22,020
leveraging leveraging that cloud

00:10:20,370 --> 00:10:23,820
platform and this is this is exciting

00:10:22,020 --> 00:10:25,940
because I think that this is going to

00:10:23,820 --> 00:10:28,350
enable more venture that a vendor choice

00:10:25,940 --> 00:10:32,160
and multi provider capability in the

00:10:28,350 --> 00:10:34,590
future in 2016 we also saw more

00:10:32,160 --> 00:10:36,720
open-source heroes enter the scene and

00:10:34,590 --> 00:10:38,610
they started coming out with open source

00:10:36,720 --> 00:10:41,370
versions of service compute platforms

00:10:38,610 --> 00:10:43,620
essentially and these projects seek to

00:10:41,370 --> 00:10:45,600
give organizations the ability to make

00:10:43,620 --> 00:10:48,990
their own service computing platforms

00:10:45,600 --> 00:10:51,090
you know largely based on containers and

00:10:48,990 --> 00:10:53,220
kubernetes we've got great projects in

00:10:51,090 --> 00:10:56,460
the space like cublas Oracle's FN

00:10:53,220 --> 00:10:58,020
project there's open faz and ibm's open

00:10:56,460 --> 00:10:59,730
whisk and a lot more these things are

00:10:58,020 --> 00:11:02,490
popping up a lot right now there

00:10:59,730 --> 00:11:04,890
probably be two more by tomorrow now in

00:11:02,490 --> 00:11:06,150
this scenario you're still managing your

00:11:04,890 --> 00:11:07,529
own infrastructure right you kind of

00:11:06,150 --> 00:11:08,970
bring one of these into your organism

00:11:07,529 --> 00:11:10,740
you have a few people operating the

00:11:08,970 --> 00:11:12,720
service platform and it's their job to

00:11:10,740 --> 00:11:14,819
expose it to developers so developers

00:11:12,720 --> 00:11:17,399
can focus on solving business problems

00:11:14,819 --> 00:11:21,749
with the least amount of friction so is

00:11:17,399 --> 00:11:23,579
it service I don't know but but what it

00:11:21,749 --> 00:11:25,829
does borrow heavily from the cloud

00:11:23,579 --> 00:11:27,480
experience is that application

00:11:25,829 --> 00:11:30,449
experience is emulated in these

00:11:27,480 --> 00:11:33,089
platforms that simple story of functions

00:11:30,449 --> 00:11:35,519
and events these things can be perceived

00:11:33,089 --> 00:11:38,100
as past 2.0 and one of the biggest

00:11:35,519 --> 00:11:39,839
changes is simply this model of doing

00:11:38,100 --> 00:11:41,430
things it's a simple story of functions

00:11:39,839 --> 00:11:43,439
and events and now you could kind of

00:11:41,430 --> 00:11:47,759
self host this anywhere you want and

00:11:43,439 --> 00:11:51,059
that's that's pretty exciting in 2017 we

00:11:47,759 --> 00:11:52,170
started to see the you know the surplice

00:11:51,059 --> 00:11:54,959
term continued to grow

00:11:52,170 --> 00:11:58,050
and all of a sudden a lot of cloud

00:11:54,959 --> 00:12:00,720
infrastructure beyond computing was

00:11:58,050 --> 00:12:02,189
being called serverless Amazon kind of

00:12:00,720 --> 00:12:04,290
took the lead on this they started

00:12:02,189 --> 00:12:06,959
referring to kind of their traditional

00:12:04,290 --> 00:12:08,490
SAS products as serverless so AWS s3

00:12:06,959 --> 00:12:10,139
which has been around for a very long

00:12:08,490 --> 00:12:12,000
time they've started to call that

00:12:10,139 --> 00:12:12,720
serverless SNS they're starting to call

00:12:12,000 --> 00:12:15,360
that serverless

00:12:12,720 --> 00:12:18,000
a lot of their new services like their

00:12:15,360 --> 00:12:19,769
Aurora database is now being referred to

00:12:18,000 --> 00:12:21,809
as serverless and a lot of these

00:12:19,769 --> 00:12:24,269
independent SAS providers are kind of

00:12:21,809 --> 00:12:26,550
using the term service to refer to their

00:12:24,269 --> 00:12:29,189
to their products like algo leah I've

00:12:26,550 --> 00:12:30,660
seen them do this are zero and that's

00:12:29,189 --> 00:12:32,850
pretty interesting I think it has some

00:12:30,660 --> 00:12:35,220
implications for the service application

00:12:32,850 --> 00:12:37,649
in general and the service application

00:12:35,220 --> 00:12:40,019
now is kind of being perceived as using

00:12:37,649 --> 00:12:42,029
service compute and pairing it with

00:12:40,019 --> 00:12:43,649
infrastructure that has these service

00:12:42,029 --> 00:12:46,620
qualities Auto scale and you know paper

00:12:43,649 --> 00:12:49,019
use and combining these things together

00:12:46,620 --> 00:12:50,670
to make end results or applications that

00:12:49,019 --> 00:12:52,800
have extremely low total cost of

00:12:50,670 --> 00:12:54,959
ownership their paper execution their

00:12:52,800 --> 00:12:55,589
auto scaling they're almost like set it

00:12:54,959 --> 00:12:57,000
and forget it

00:12:55,589 --> 00:12:59,910
and these applications are very

00:12:57,000 --> 00:13:02,279
efficient and and very powerful so

00:12:59,910 --> 00:13:04,410
that's what has happened here's here's

00:13:02,279 --> 00:13:07,439
kind of what's happening now and and

00:13:04,410 --> 00:13:09,029
some things to pay attention to there's

00:13:07,439 --> 00:13:11,220
there's clearly a collision happening

00:13:09,029 --> 00:13:14,069
between server lists computing functions

00:13:11,220 --> 00:13:15,529
as a service and containers I think it's

00:13:14,069 --> 00:13:17,459
getting a bit awkward actually

00:13:15,529 --> 00:13:19,559
traditionally containers offered great

00:13:17,459 --> 00:13:20,590
isolation you know packaging portability

00:13:19,559 --> 00:13:22,480
but not lo late

00:13:20,590 --> 00:13:24,240
a provisioning or an efficient pricing

00:13:22,480 --> 00:13:27,280
model for running them in the cloud

00:13:24,240 --> 00:13:29,290
meanwhile AWS lambda offered low latency

00:13:27,280 --> 00:13:31,720
provisioning runtimes ready to go sub

00:13:29,290 --> 00:13:34,030
second billing and this simple kind of

00:13:31,720 --> 00:13:35,440
functional model in the service world

00:13:34,030 --> 00:13:37,540
people have been using both these things

00:13:35,440 --> 00:13:39,640
for different use cases containers have

00:13:37,540 --> 00:13:41,980
been great for asynchronous long running

00:13:39,640 --> 00:13:43,360
tasks and functions are great for short

00:13:41,980 --> 00:13:44,380
tasks where you don't have to think

00:13:43,360 --> 00:13:46,270
where you don't want to have to kind of

00:13:44,380 --> 00:13:49,120
think about containers only the business

00:13:46,270 --> 00:13:50,410
logic and how you and if you want to

00:13:49,120 --> 00:13:52,570
benefit from that efficient pricing

00:13:50,410 --> 00:13:53,800
model but now containers as a service

00:13:52,570 --> 00:13:55,600
are looking more like serverless

00:13:53,800 --> 00:13:57,310
container platforms as your container

00:13:55,600 --> 00:13:58,840
service has a per second building model

00:13:57,310 --> 00:14:01,060
you know no virtual machine management

00:13:58,840 --> 00:14:02,500
AWS has Fargate you know it's a managed

00:14:01,060 --> 00:14:04,630
container platform also with the per

00:14:02,500 --> 00:14:06,760
second billing model both these are

00:14:04,630 --> 00:14:09,040
going to continue to probably collide

00:14:06,760 --> 00:14:10,300
and exist and evolve and this is still

00:14:09,040 --> 00:14:13,470
the beginning of this story but it's

00:14:10,300 --> 00:14:16,480
certainly something to watch furthermore

00:14:13,470 --> 00:14:19,270
software as a service is it continues to

00:14:16,480 --> 00:14:21,280
expand and this is important because SAS

00:14:19,270 --> 00:14:23,470
is value on top of service computing

00:14:21,280 --> 00:14:25,840
cannot be understated in the early days

00:14:23,470 --> 00:14:28,480
of the service framework we noticed

00:14:25,840 --> 00:14:30,370
amazing innovation and creativity coming

00:14:28,480 --> 00:14:31,750
from the users and first off it's

00:14:30,370 --> 00:14:34,090
because you know when you reduce

00:14:31,750 --> 00:14:35,890
operational overhead you liberate a lot

00:14:34,090 --> 00:14:38,590
of productivity and you also liberate

00:14:35,890 --> 00:14:40,330
creativity but a lot of this also came

00:14:38,590 --> 00:14:43,180
from simply pairing kind of servos

00:14:40,330 --> 00:14:45,010
compute from pairing AWS lambda with

00:14:43,180 --> 00:14:47,590
other kind of sass other service

00:14:45,010 --> 00:14:49,090
infrastructure and we kind of realized

00:14:47,590 --> 00:14:51,220
that the lambdas only half the value

00:14:49,090 --> 00:14:52,720
you've got to have other great service

00:14:51,220 --> 00:14:54,370
like infrastructure to pair it with to

00:14:52,720 --> 00:14:56,380
build these these end results these

00:14:54,370 --> 00:14:58,330
applications it's a very exciting time

00:14:56,380 --> 00:14:59,770
because you know a lot more sass is

00:14:58,330 --> 00:15:01,570
coming the cloud providers are

00:14:59,770 --> 00:15:05,260
aggressively innovating new products

00:15:01,570 --> 00:15:07,030
with SAS models and so are startups so

00:15:05,260 --> 00:15:09,760
you know Amazon of course has s3

00:15:07,030 --> 00:15:11,290
DynamoDB lambda they have the new Aurora

00:15:09,760 --> 00:15:12,790
they've got comprehend their natural

00:15:11,290 --> 00:15:14,220
language processing service they've got

00:15:12,790 --> 00:15:16,900
transcribed for speech recognition

00:15:14,220 --> 00:15:19,240
meanwhile Google has a ton of cool cloud

00:15:16,900 --> 00:15:21,580
a I products like cob speech translation

00:15:19,240 --> 00:15:24,520
their vision API video intelligence ap

00:15:21,580 --> 00:15:27,760
is that whole cloud AI category I think

00:15:24,520 --> 00:15:29,950
is just going to explode will continue

00:15:27,760 --> 00:15:32,530
to explode and you know overall this is

00:15:29,950 --> 00:15:33,160
this is exciting this is like the Golden

00:15:32,530 --> 00:15:35,350
Age

00:15:33,160 --> 00:15:37,569
of software development I mean never has

00:15:35,350 --> 00:15:39,459
there been this like greater time to be

00:15:37,569 --> 00:15:41,019
able to use all these kind of these

00:15:39,459 --> 00:15:44,290
pieces of infrastructure and make things

00:15:41,019 --> 00:15:45,699
faster to make things at scale to get

00:15:44,290 --> 00:15:48,519
your vision out there and make some type

00:15:45,699 --> 00:15:50,410
of meaning in the world so overall this

00:15:48,519 --> 00:15:53,139
is you know a lot of stuff is going on

00:15:50,410 --> 00:15:55,750
but it's all pretty exciting and another

00:15:53,139 --> 00:15:57,670
big trend to look out for is service

00:15:55,750 --> 00:16:00,220
functions are kind of running everywhere

00:15:57,670 --> 00:16:02,500
now they're clearly run in multiple

00:16:00,220 --> 00:16:04,800
cloud providers now that every cloud

00:16:02,500 --> 00:16:07,120
provider has a service experience

00:16:04,800 --> 00:16:09,910
they're running on premise

00:16:07,120 --> 00:16:12,100
thanks to these open source service

00:16:09,910 --> 00:16:14,350
platforms and they could also run in the

00:16:12,100 --> 00:16:16,870
edge cloud Flair's got a great cloud

00:16:14,350 --> 00:16:19,089
player worker project lambda has lambda

00:16:16,870 --> 00:16:20,500
at edge and we're quickly entering this

00:16:19,089 --> 00:16:22,329
world where these these functions can

00:16:20,500 --> 00:16:25,810
live all over the place

00:16:22,329 --> 00:16:28,990
and that's great because events data is

00:16:25,810 --> 00:16:30,490
all over the place I'm so what with all

00:16:28,990 --> 00:16:31,930
this stuff going on there's a lot of

00:16:30,490 --> 00:16:34,870
change a lot of innovation a ton of

00:16:31,930 --> 00:16:36,970
options now and projects how do we adopt

00:16:34,870 --> 00:16:38,199
this today and here's kind of the most

00:16:36,970 --> 00:16:41,019
important lessons that we've learned

00:16:38,199 --> 00:16:42,459
over at serverless sync first off you

00:16:41,019 --> 00:16:44,560
know we talked to you know these

00:16:42,459 --> 00:16:47,949
enterprise organizations regularly and

00:16:44,560 --> 00:16:49,990
they're in a tough bind a lot of them

00:16:47,949 --> 00:16:51,250
are kind of caught in this this adoption

00:16:49,990 --> 00:16:53,230
challenge you know they want to avoid

00:16:51,250 --> 00:16:55,750
lock-in they will also want total

00:16:53,230 --> 00:16:58,149
control and oversight but at the same

00:16:55,750 --> 00:17:01,600
time they want to move fast they want to

00:16:58,149 --> 00:17:04,299
innovate and many are choosing to kind

00:17:01,600 --> 00:17:05,949
of DIY their own service platforms so I

00:17:04,299 --> 00:17:07,539
you know we've seen several companies

00:17:05,949 --> 00:17:09,730
working on their own service platforms

00:17:07,539 --> 00:17:11,169
for a number of years now to avoid

00:17:09,730 --> 00:17:12,939
vendor locking to give them the control

00:17:11,169 --> 00:17:14,860
and oversight they need on the other

00:17:12,939 --> 00:17:17,199
hand we've seen the cloud providers

00:17:14,860 --> 00:17:19,870
unrelentingly add innovative services

00:17:17,199 --> 00:17:21,339
service offerings to their whole

00:17:19,870 --> 00:17:23,230
platform and we've seen a lot of

00:17:21,339 --> 00:17:25,179
companies embracing those and being very

00:17:23,230 --> 00:17:27,909
successful at delivering innovation at

00:17:25,179 --> 00:17:29,590
record pace so how does one how does an

00:17:27,909 --> 00:17:32,500
organization kind of kind of navigate

00:17:29,590 --> 00:17:37,630
this and this is where open source

00:17:32,500 --> 00:17:38,919
especially can save the day so so what

00:17:37,630 --> 00:17:41,919
we've learned of course and a big

00:17:38,919 --> 00:17:44,770
service principle is that first off it's

00:17:41,919 --> 00:17:46,059
all relative to the use case Einstein

00:17:44,770 --> 00:17:48,600
actually said this the second half just

00:17:46,059 --> 00:17:48,600
got cut off

00:17:49,240 --> 00:17:53,510
but you know this is you know something

00:17:51,890 --> 00:17:55,700
that's very popular in the service

00:17:53,510 --> 00:17:57,230
community and it's just central to the

00:17:55,700 --> 00:18:00,440
service culture that is focused on the

00:17:57,230 --> 00:18:03,020
use case focus on the outcome first not

00:18:00,440 --> 00:18:04,760
infrastructure and platforms figure out

00:18:03,020 --> 00:18:06,230
what is most important to best serve

00:18:04,760 --> 00:18:08,600
that use case you know do you need to

00:18:06,230 --> 00:18:10,310
move fast you need to be be innovative

00:18:08,600 --> 00:18:12,560
you need to capture the market or do you

00:18:10,310 --> 00:18:14,750
want to kind of avoid lock-in and maybe

00:18:12,560 --> 00:18:15,890
some public clouds in general and if you

00:18:14,750 --> 00:18:18,080
do that if you run your own platform

00:18:15,890 --> 00:18:20,030
kind of what is the opportunity cost of

00:18:18,080 --> 00:18:22,100
doing that the great thing about service

00:18:20,030 --> 00:18:24,650
is that lower overhead appeals to all

00:18:22,100 --> 00:18:26,120
types of use cases it's often used for

00:18:24,650 --> 00:18:28,370
kind of critical data processing

00:18:26,120 --> 00:18:30,380
pipelines back-end services but also

00:18:28,370 --> 00:18:32,840
equally used for marketing projects

00:18:30,380 --> 00:18:35,050
internal tools random adventure of an

00:18:32,840 --> 00:18:37,100
automation business process automation

00:18:35,050 --> 00:18:39,080
you know do you really need to roll out

00:18:37,100 --> 00:18:41,930
your own platform to do kind of all this

00:18:39,080 --> 00:18:43,340
stuff you know maybe not if the one at

00:18:41,930 --> 00:18:44,810
platform approach is gonna block you

00:18:43,340 --> 00:18:46,430
from being able to solve a problem best

00:18:44,810 --> 00:18:48,440
you know that's that's not super that's

00:18:46,430 --> 00:18:50,150
not good so you could do with a service

00:18:48,440 --> 00:18:52,310
a lot of different ways now and the best

00:18:50,150 --> 00:18:54,380
way will be revealed always by focusing

00:18:52,310 --> 00:18:57,560
on the outcome so focus on that first

00:18:54,380 --> 00:18:59,510
and you know what I strongly recommend

00:18:57,560 --> 00:19:01,070
is that before adopting any service

00:18:59,510 --> 00:19:03,590
platform and again there's so many great

00:19:01,070 --> 00:19:05,210
options out there whether it's AWS or

00:19:03,590 --> 00:19:05,900
one of these cool open source service

00:19:05,210 --> 00:19:08,060
platforms

00:19:05,900 --> 00:19:11,240
I would absolutely prioritize investing

00:19:08,060 --> 00:19:14,120
in tools that offer vendor and platform

00:19:11,240 --> 00:19:15,980
choice and organize your strategy all

00:19:14,120 --> 00:19:17,360
around that there are handful of great

00:19:15,980 --> 00:19:19,130
tools that do this you know like our

00:19:17,360 --> 00:19:21,290
service framework or Tara forms another

00:19:19,130 --> 00:19:22,580
fantastic one but these things are gonna

00:19:21,290 --> 00:19:23,930
give you options and that's of critical

00:19:22,580 --> 00:19:25,730
importance right now and they're also

00:19:23,930 --> 00:19:28,400
gonna give you a single experience for

00:19:25,730 --> 00:19:29,720
using for using these options and again

00:19:28,400 --> 00:19:31,760
this is where open source especially has

00:19:29,720 --> 00:19:33,050
to play a big role you know open source

00:19:31,760 --> 00:19:35,060
communities have to come up with more

00:19:33,050 --> 00:19:37,280
tools like this because you know these

00:19:35,060 --> 00:19:39,440
big platforms have big biases you know

00:19:37,280 --> 00:19:41,510
towards their platforms and if that

00:19:39,440 --> 00:19:43,730
future is running serverless functions

00:19:41,510 --> 00:19:45,710
everywhere we need the tool link to help

00:19:43,730 --> 00:19:47,540
make that easy so again first focus on

00:19:45,710 --> 00:19:49,130
your outcome and then adopt the tools

00:19:47,540 --> 00:19:51,620
that will flexibly allow you to deliver

00:19:49,130 --> 00:19:53,300
on those outcomes best the future is

00:19:51,620 --> 00:19:54,590
uncertain change is constant you know

00:19:53,300 --> 00:19:55,880
tools that give you options a

00:19:54,590 --> 00:19:58,670
diversified approach should absolutely

00:19:55,880 --> 00:20:00,980
be prioritized and further you know

00:19:58,670 --> 00:20:03,440
service is all about moving up the stack

00:20:00,980 --> 00:20:04,610
to the application level and we think

00:20:03,440 --> 00:20:06,050
sir bliss is going to evolve these

00:20:04,610 --> 00:20:08,210
developer tools infrastructure in

00:20:06,050 --> 00:20:10,820
general and infrastructure provisioning

00:20:08,210 --> 00:20:12,620
tools to focus more on the application

00:20:10,820 --> 00:20:14,929
level and this is something that this is

00:20:12,620 --> 00:20:16,850
a theme that we think about a lot at

00:20:14,929 --> 00:20:18,200
serverless Inc we're always trying to

00:20:16,850 --> 00:20:19,640
figure out how to how to express this

00:20:18,200 --> 00:20:21,110
team you know we think software tooling

00:20:19,640 --> 00:20:23,510
should be designed more around outcomes

00:20:21,110 --> 00:20:25,670
and apps and not infrastructure and this

00:20:23,510 --> 00:20:27,740
is also what service is strongly about

00:20:25,670 --> 00:20:29,960
we kind of started this with the service

00:20:27,740 --> 00:20:32,840
framework and we also have a new project

00:20:29,960 --> 00:20:33,320
which we're opening up in a beta in a

00:20:32,840 --> 00:20:36,380
few weeks

00:20:33,320 --> 00:20:38,300
it's called service components simply

00:20:36,380 --> 00:20:40,040
open source reusable vendor agnostic

00:20:38,300 --> 00:20:42,530
serverless building blocks

00:20:40,040 --> 00:20:45,200
it's a packaging system for application

00:20:42,530 --> 00:20:46,940
features or entire applications you know

00:20:45,200 --> 00:20:49,429
built using service infrastructure

00:20:46,940 --> 00:20:51,320
across all vendors you can compose these

00:20:49,429 --> 00:20:53,570
building blocks together to rapidly

00:20:51,320 --> 00:20:55,880
build apps and these components are very

00:20:53,570 --> 00:20:57,559
outcome focused whether it's you know

00:20:55,880 --> 00:21:00,640
your data processing pipeline a users

00:20:57,559 --> 00:21:02,929
credit API an SMS subscription service

00:21:00,640 --> 00:21:04,730
subscription payment service or an

00:21:02,929 --> 00:21:06,620
entire service forum or an entire

00:21:04,730 --> 00:21:08,000
service ecommerce application you should

00:21:06,620 --> 00:21:10,640
be able to compose this stuff together

00:21:08,000 --> 00:21:12,920
to build end results with that service

00:21:10,640 --> 00:21:14,540
efficiency we're opening this up as a

00:21:12,920 --> 00:21:15,860
standalone public beta we're going to

00:21:14,540 --> 00:21:17,270
incorporate it into our framework if

00:21:15,860 --> 00:21:19,100
it's interesting to you you could go to

00:21:17,270 --> 00:21:21,559
service calm and you know sign up for

00:21:19,100 --> 00:21:23,660
the newsletter but again focus on your

00:21:21,559 --> 00:21:24,770
outcomes and then adopt the flexible

00:21:23,660 --> 00:21:28,179
tools that will allow you to best

00:21:24,770 --> 00:21:31,250
deliver on those outcomes and after that

00:21:28,179 --> 00:21:34,190
lean on community driven standards these

00:21:31,250 --> 00:21:36,320
standards harmonization conversations

00:21:34,190 --> 00:21:38,360
are just getting started in the service

00:21:36,320 --> 00:21:40,520
space and it's exciting because it could

00:21:38,360 --> 00:21:42,800
solve a lot of problems for example

00:21:40,520 --> 00:21:44,840
making functions more portable so that

00:21:42,800 --> 00:21:46,910
they can move around to wherever they

00:21:44,840 --> 00:21:49,340
need to go or event data more consistent

00:21:46,910 --> 00:21:53,000
the CNC F is kind of where these

00:21:49,340 --> 00:21:55,160
conversations are taking place there's a

00:21:53,000 --> 00:21:58,070
service working group within the CNC F

00:21:55,160 --> 00:21:59,990
and we're meeting every Thursday 9:00

00:21:58,070 --> 00:22:02,510
a.m. Pacific time to talk about this

00:21:59,990 --> 00:22:04,340
stuff the service working group recently

00:22:02,510 --> 00:22:06,650
authored a great white paper talking

00:22:04,340 --> 00:22:08,720
about service in general and now they're

00:22:06,650 --> 00:22:11,090
focused on harmonizing these service

00:22:08,720 --> 00:22:14,210
concepts to give users vendor choice and

00:22:11,090 --> 00:22:15,500
flexibility first effort

00:22:14,210 --> 00:22:18,080
of the service working group where the

00:22:15,500 --> 00:22:20,210
next effort is you know that we found

00:22:18,080 --> 00:22:22,790
that a nun controversial starting point

00:22:20,210 --> 00:22:25,790
when it comes to harmonization was

00:22:22,790 --> 00:22:27,860
around events and we've working on this

00:22:25,790 --> 00:22:31,130
this concept called cloud events

00:22:27,860 --> 00:22:32,660
it's a specification for for describing

00:22:31,130 --> 00:22:35,180
event data in a common way

00:22:32,660 --> 00:22:37,880
again serverless is a story of function

00:22:35,180 --> 00:22:39,680
and events this is half that story an

00:22:37,880 --> 00:22:42,370
event data is being transported across

00:22:39,680 --> 00:22:44,750
environments increasingly and

00:22:42,370 --> 00:22:45,890
unfortunately all the platforms that are

00:22:44,750 --> 00:22:47,480
publishing events they're kind of

00:22:45,890 --> 00:22:48,920
ubiquitous events are everywhere but

00:22:47,480 --> 00:22:52,250
they're all publishing them in different

00:22:48,920 --> 00:22:54,260
formats which limits the ability to

00:22:52,250 --> 00:22:57,230
transform event data wherever you want

00:22:54,260 --> 00:22:59,180
it to go mm-hmm so we think this this

00:22:57,230 --> 00:23:00,320
might actually have a huge rising tide

00:22:59,180 --> 00:23:01,940
effect it could be bigger than

00:23:00,320 --> 00:23:03,860
serverless events are kind of bigger

00:23:01,940 --> 00:23:06,230
than service at the end of the day it

00:23:03,860 --> 00:23:07,490
might affect all of IT but we're kicking

00:23:06,230 --> 00:23:09,470
this off in the service working group

00:23:07,490 --> 00:23:11,480
because it's part of the service story

00:23:09,470 --> 00:23:13,130
it's an essential part there are a ton

00:23:11,480 --> 00:23:15,950
of major industry stakeholders involved

00:23:13,130 --> 00:23:17,810
now and it's super exciting so if you're

00:23:15,950 --> 00:23:20,960
if you're curious about this strongly

00:23:17,810 --> 00:23:22,400
recommend you jump in at a wrap-up you

00:23:20,960 --> 00:23:24,170
know whether you're adopting service or

00:23:22,400 --> 00:23:27,140
you're looking for a role open source

00:23:24,170 --> 00:23:28,880
has to play in the service space you

00:23:27,140 --> 00:23:30,290
know first off focus on outcomes not

00:23:28,880 --> 00:23:32,960
infrastructure that is an important

00:23:30,290 --> 00:23:34,730
service principle adopt tools to

00:23:32,960 --> 00:23:36,230
flexibly support those outcomes not

00:23:34,730 --> 00:23:38,540
tools that kind of support a specific

00:23:36,230 --> 00:23:41,330
platform and embrace standards when they

00:23:38,540 --> 00:23:43,640
mature or help us build them right now

00:23:41,330 --> 00:23:45,800
if any of this sounds interesting to you

00:23:43,640 --> 00:23:47,000
here's my contact info you can learn

00:23:45,800 --> 00:23:50,090
more about the service framework at

00:23:47,000 --> 00:23:51,410
service com and if cloud events is of

00:23:50,090 --> 00:23:54,440
interest to you or the service working

00:23:51,410 --> 00:23:56,090
group in general go to github.com slash

00:23:54,440 --> 00:23:58,160
cloud events such as ton of information

00:23:56,090 --> 00:24:00,830
as how you could join the effort and

00:23:58,160 --> 00:24:04,370
start contributing anyway thank you all

00:24:00,830 --> 00:24:06,080
for your time and next up we've got Dan

00:24:04,370 --> 00:24:08,390
Kahn the executive director of the cloud

00:24:06,080 --> 00:24:09,650
native computing foundation who's going

00:24:08,390 --> 00:24:11,090
to show you something special that

00:24:09,650 --> 00:24:11,840
they've been working on anyway thanks

00:24:11,090 --> 00:24:18,450
again

00:24:11,840 --> 00:24:18,450
[Applause]

00:24:32,760 --> 00:24:38,350
hi there I'm Dan Khan I'm the executive

00:24:36,490 --> 00:24:40,210
director of the cloud native computing

00:24:38,350 --> 00:24:42,220
foundation I want to really thank Austin

00:24:40,210 --> 00:24:43,990
for that great talk and talking about

00:24:42,220 --> 00:24:45,520
serverless which is really one of the

00:24:43,990 --> 00:24:47,440
most exciting spaces and open source

00:24:45,520 --> 00:24:49,690
right now I also want to thank him for

00:24:47,440 --> 00:24:51,910
donating three minutes at the end of his

00:24:49,690 --> 00:24:53,320
talk so I could just show you a cool

00:24:51,910 --> 00:24:55,120
project that we've been working on at

00:24:53,320 --> 00:24:58,570
CNCs and I also do want to thank him for

00:24:55,120 --> 00:24:59,679
his leadership with both the service

00:24:58,570 --> 00:25:02,650
working group but then particularly

00:24:59,679 --> 00:25:04,480
cloud events so quick showed hands how

00:25:02,650 --> 00:25:07,210
many people have seen some version of

00:25:04,480 --> 00:25:09,970
this document before okay more than half

00:25:07,210 --> 00:25:11,830
so this is the cloud native landscape

00:25:09,970 --> 00:25:14,679
many people have said that it's

00:25:11,830 --> 00:25:16,330
incredibly useful and valuable it has

00:25:14,679 --> 00:25:19,000
also been referred to as the hellscape

00:25:16,330 --> 00:25:21,880
and so we've gotten a little criticism

00:25:19,000 --> 00:25:25,419
for the tyranny of choice for seeming

00:25:21,880 --> 00:25:27,280
like it's too complicated and so we went

00:25:25,419 --> 00:25:30,039
back and looked at how we could make

00:25:27,280 --> 00:25:32,620
this more useful for real enterprises

00:25:30,039 --> 00:25:34,450
and vendors and the end users that are

00:25:32,620 --> 00:25:36,789
put in the developers that are make up

00:25:34,450 --> 00:25:38,650
our cloud native community and we

00:25:36,789 --> 00:25:40,750
decided to do two different follow-on

00:25:38,650 --> 00:25:42,280
projects so the first that we're

00:25:40,750 --> 00:25:46,000
launching is called the cloud native

00:25:42,280 --> 00:25:48,159
trail map and this is a one-page it's

00:25:46,000 --> 00:25:51,909
actually portrait but it takes you

00:25:48,159 --> 00:25:53,470
through the steps of how you might

00:25:51,909 --> 00:25:55,960
approach cloud native and so

00:25:53,470 --> 00:25:57,460
containerization and this real focus on

00:25:55,960 --> 00:26:00,309
continuous integration continuous

00:25:57,460 --> 00:26:01,690
delivery which is arguably the area

00:26:00,309 --> 00:26:04,120
that's going to have the very highest

00:26:01,690 --> 00:26:06,070
value the biggest return then talks

00:26:04,120 --> 00:26:07,390
about orchestration and then as we go

00:26:06,070 --> 00:26:09,309
forward you look at some of the other

00:26:07,390 --> 00:26:10,720
projects so service meshes are

00:26:09,309 --> 00:26:13,030
incredibly hot right now and you have

00:26:10,720 --> 00:26:14,470
envoy and linker D and core DNS but

00:26:13,030 --> 00:26:16,179
that's not where you want to get started

00:26:14,470 --> 00:26:19,570
in this space and we'll actually have

00:26:16,179 --> 00:26:21,070
handouts for you of this at the at the

00:26:19,570 --> 00:26:24,400
next break and it's also available

00:26:21,070 --> 00:26:26,919
online so that was a sort of the zoom

00:26:24,400 --> 00:26:28,870
out version of how can you just approach

00:26:26,919 --> 00:26:31,030
cloud native and begin thinking about it

00:26:28,870 --> 00:26:32,590
and begin learning about it but then for

00:26:31,030 --> 00:26:35,530
the practitioners and the folks that are

00:26:32,590 --> 00:26:37,990
really eyebrow deep in it we also wanted

00:26:35,530 --> 00:26:38,800
to have the zoom in version and so that

00:26:37,990 --> 00:26:40,570
is the

00:26:38,800 --> 00:26:42,820
interactive landscape that we're

00:26:40,570 --> 00:26:44,530
launching here at the conference and you

00:26:42,820 --> 00:26:46,870
can actually pull out your phone or your

00:26:44,530 --> 00:26:51,100
laptop and try typing this in right now

00:26:46,870 --> 00:26:54,400
it's l dot CNC F dot IO or landscape cm

00:26:51,100 --> 00:26:57,820
C F dot IO and it will show you the four

00:26:54,400 --> 00:27:00,010
hundred and sixty different projects and

00:26:57,820 --> 00:27:02,290
products that we're monitoring and

00:27:00,010 --> 00:27:05,500
following in this space and so I will go

00:27:02,290 --> 00:27:09,040
ahead and I'm no kelsey hightower but

00:27:05,500 --> 00:27:11,470
just try and do a quick demo for you so

00:27:09,040 --> 00:27:14,020
you can see that we show kubernetes

00:27:11,470 --> 00:27:17,170
which can goldberg announced that we

00:27:14,020 --> 00:27:20,650
graduated yesterday are incubating CN CF

00:27:17,170 --> 00:27:23,140
projects our sandbox projects and then a

00:27:20,650 --> 00:27:26,100
lot of other logos this has been a

00:27:23,140 --> 00:27:29,260
project for the last couple months and

00:27:26,100 --> 00:27:30,490
Jim and I and a few other Linux

00:27:29,260 --> 00:27:34,270
Foundation folks were traveling through

00:27:30,490 --> 00:27:36,310
China three weeks ago Beijing and

00:27:34,270 --> 00:27:39,040
Hangzhou Shanghai Shenzhen Hong Kong in

00:27:36,310 --> 00:27:40,600
five days and I got the feedback of why

00:27:39,040 --> 00:27:43,870
do you keep staring at all these logos

00:27:40,600 --> 00:27:45,100
but as I was dealing with data caps this

00:27:43,870 --> 00:27:46,900
was the the project that we've been

00:27:45,100 --> 00:27:48,100
working on but the part that's

00:27:46,900 --> 00:27:50,740
particularly neat about it is the

00:27:48,100 --> 00:27:52,600
ability to actually zoom in and kind of

00:27:50,740 --> 00:27:54,640
think about it in different ways so for

00:27:52,600 --> 00:27:56,740
example here's open source projects by

00:27:54,640 --> 00:27:59,410
first commit and so we're pulling this

00:27:56,740 --> 00:28:01,450
data from github and if I click in I can

00:27:59,410 --> 00:28:04,780
see that Postgres was actually found

00:28:01,450 --> 00:28:07,090
started 22 years ago but their latest

00:28:04,780 --> 00:28:08,770
commit was today which is just such an

00:28:07,090 --> 00:28:09,520
extraordinary accomplishment of an open

00:28:08,770 --> 00:28:12,490
source project

00:28:09,520 --> 00:28:15,010
Mariya DB being a fork of MySQL are both

00:28:12,490 --> 00:28:17,800
18 years old and I can click through and

00:28:15,010 --> 00:28:20,170
see a lot of other ones and for each of

00:28:17,800 --> 00:28:21,790
these I can then pull up the Twitter

00:28:20,170 --> 00:28:23,860
info to see what's been going on most

00:28:21,790 --> 00:28:25,270
recently the funding info that we're

00:28:23,860 --> 00:28:26,980
pulling from crunchbase you can see

00:28:25,270 --> 00:28:29,350
they've raised ten to half a million

00:28:26,980 --> 00:28:32,650
dollars and another view if I come here

00:28:29,350 --> 00:28:35,850
to open source projects by stars I can

00:28:32,650 --> 00:28:39,300
see here's kubernetes at number one with

00:28:35,850 --> 00:28:41,200
33,000 stars but look at that austin's

00:28:39,300 --> 00:28:43,900
project serverless

00:28:41,200 --> 00:28:45,250
is here is the fifth entry and we're

00:28:43,900 --> 00:28:47,170
very happy to have them as a CF CF

00:28:45,250 --> 00:28:48,640
member and I'll point out they're three

00:28:47,170 --> 00:28:50,380
million dollars in funding according to

00:28:48,640 --> 00:28:52,210
CrunchBase so any of the venture

00:28:50,380 --> 00:28:58,120
capitalists in the audience might want

00:28:52,210 --> 00:29:01,540
go up and talk to him so I do encourage

00:28:58,120 --> 00:29:03,970
you to take a look and if you pop it up

00:29:01,540 --> 00:29:06,850
later today it's fun to click those

00:29:03,970 --> 00:29:08,760
example filters to look at your

00:29:06,850 --> 00:29:11,920
organization and see the projects that

00:29:08,760 --> 00:29:14,020
come up and then in any project this

00:29:11,920 --> 00:29:15,490
size there's going to be errors in it so

00:29:14,020 --> 00:29:17,260
we're really eager to accept pull

00:29:15,490 --> 00:29:19,840
requests it's something you can do right

00:29:17,260 --> 00:29:21,670
from the github web interface and we can

00:29:19,840 --> 00:29:22,930
approve it and get it live almost

00:29:21,670 --> 00:29:25,390
immediately so this is really designed

00:29:22,930 --> 00:29:28,390
to be a collaborative editing project

00:29:25,390 --> 00:29:31,540
and so we do have an updated version of

00:29:28,390 --> 00:29:33,610
the landscape with even more logos on it

00:29:31,540 --> 00:29:36,550
we now list our kubernetes certified

00:29:33,610 --> 00:29:38,440
service providers all of the 50

00:29:36,550 --> 00:29:40,240
certified kubernetes platforms and

00:29:38,440 --> 00:29:41,890
distributions and everything else and

00:29:40,240 --> 00:29:44,020
we'll keep coming out with a new version

00:29:41,890 --> 00:29:46,030
of this every month that's gonna map to

00:29:44,020 --> 00:29:48,670
the interactive landscape this is also

00:29:46,030 --> 00:29:50,740
the server list version of it that was a

00:29:48,670 --> 00:29:52,660
project that Austin and everyone else

00:29:50,740 --> 00:29:56,260
from the Service Worker worked on so

00:29:52,660 --> 00:29:57,760
please feel free to tweet about this if

00:29:56,260 --> 00:29:59,560
you have issues or questions or

00:29:57,760 --> 00:30:01,240
suggestions please reach out to me at my

00:29:59,560 --> 00:30:03,870
email and thanks again to Austin for

00:30:01,240 --> 00:30:10,249
giving me those five minutes

00:30:03,870 --> 00:30:10,249

YouTube URL: https://www.youtube.com/watch?v=BBi8AubvFM4


