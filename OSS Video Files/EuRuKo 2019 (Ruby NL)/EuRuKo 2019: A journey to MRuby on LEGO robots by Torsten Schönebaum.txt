Title: EuRuKo 2019: A journey to MRuby on LEGO robots by Torsten Schönebaum
Publication date: 2021-01-11
Playlist: EuRuKo 2019
Description: 
	Building bricks with MRuby: A journey to MRuby on LEGO robots

Constructing robots with LEGO is fun, programming them using Ruby even more. If you ever wanted to know how to start with MRuby on a device that can be changed into anything you can build with LEGO — this talk is for you.

Torsten Schönebaum - https://twitter.com/radlepunktde
EuRuKo 2019
Captions: 
	00:00:05,920 --> 00:00:11,040
let's start let's introduce torsten

00:00:08,800 --> 00:00:12,240
yes so let's introduce thorson so um the

00:00:11,040 --> 00:00:14,559
nice thing we're trusting is

00:00:12,240 --> 00:00:16,160
he hasn't he has not been giving a talk

00:00:14,559 --> 00:00:18,560
for 10 years so

00:00:16,160 --> 00:00:19,199
it's almost as if it's new right yes it

00:00:18,560 --> 00:00:21,920
is

00:00:19,199 --> 00:00:23,119
nice um and his children are quite

00:00:21,920 --> 00:00:23,760
jealous of the fact that he's here in

00:00:23,119 --> 00:00:26,400
rotterdam

00:00:23,760 --> 00:00:28,160
while they are at home and to make it

00:00:26,400 --> 00:00:32,160
even worse

00:00:28,160 --> 00:00:32,160
they can't even play with their own lego

00:00:32,480 --> 00:00:37,200
i want to have a big round of applause

00:00:34,079 --> 00:00:37,200
for for trusting

00:00:37,280 --> 00:00:39,680
thank you

00:00:42,879 --> 00:00:46,800
okay let's reset the timer and then

00:00:45,760 --> 00:00:48,879
start

00:00:46,800 --> 00:00:50,559
yeah ahoy uh my name is torsten

00:00:48,879 --> 00:00:53,760
schunerbaum i'm working for

00:00:50,559 --> 00:00:54,320
sage which is a business software

00:00:53,760 --> 00:00:56,640
company

00:00:54,320 --> 00:00:57,440
working globally and i'm working on

00:00:56,640 --> 00:00:59,760
their

00:00:57,440 --> 00:01:00,800
accounting product which is a cloud

00:00:59,760 --> 00:01:04,000
software

00:01:00,800 --> 00:01:04,559
for small businesses but i won't talk

00:01:04,000 --> 00:01:06,479
about

00:01:04,559 --> 00:01:09,680
stuff i'm doing at work i will talk

00:01:06,479 --> 00:01:09,680
about stuff i do at home

00:01:10,400 --> 00:01:15,840
and let's start with a quote because

00:01:13,439 --> 00:01:17,600
i've heard that uh using a quote at the

00:01:15,840 --> 00:01:20,479
beginning of the talk is great

00:01:17,600 --> 00:01:21,360
uh friedrich schiller a german poet and

00:01:20,479 --> 00:01:24,159
philosopher

00:01:21,360 --> 00:01:26,720
once said men only plays when in the

00:01:24,159 --> 00:01:28,960
full meaning of the word he is a man

00:01:26,720 --> 00:01:30,799
and he is only completely a man when he

00:01:28,960 --> 00:01:32,960
plays

00:01:30,799 --> 00:01:33,840
before someone calls the code of conduct

00:01:32,960 --> 00:01:35,360
team

00:01:33,840 --> 00:01:37,439
remember friedrich schiller lived in the

00:01:35,360 --> 00:01:40,799
18th century

00:01:37,439 --> 00:01:42,720
equal rights weren't a topic back then

00:01:40,799 --> 00:01:43,920
and probably the translation isn't the

00:01:42,720 --> 00:01:46,960
best

00:01:43,920 --> 00:01:50,159
you should read it as human only place

00:01:46,960 --> 00:01:54,799
and what he means is

00:01:50,159 --> 00:01:57,520
humans gain their cultural abilities

00:01:54,799 --> 00:01:58,560
during childhood when they play and they

00:01:57,520 --> 00:02:02,240
even improve

00:01:58,560 --> 00:02:04,799
their cultural abilities further

00:02:02,240 --> 00:02:05,280
later in their life while playing

00:02:04,799 --> 00:02:09,039
playing

00:02:05,280 --> 00:02:11,760
something crucial for humans

00:02:09,039 --> 00:02:12,640
you learn new things you get creative

00:02:11,760 --> 00:02:16,080
while

00:02:12,640 --> 00:02:20,080
doing something without having a direct

00:02:16,080 --> 00:02:22,239
goal or target and if that is so

00:02:20,080 --> 00:02:24,239
then it is a great excuse for getting a

00:02:22,239 --> 00:02:28,239
rather large christmas present

00:02:24,239 --> 00:02:30,560
um a box of lego mindstorms education

00:02:28,239 --> 00:02:31,599
and it's even a better excuse to get

00:02:30,560 --> 00:02:34,959
another box

00:02:31,599 --> 00:02:37,760
um component

00:02:34,959 --> 00:02:39,120
so what's in the box you get lots of

00:02:37,760 --> 00:02:41,920
lego parts of course

00:02:39,120 --> 00:02:44,080
and maybe the most important thing is

00:02:41,920 --> 00:02:47,360
you get the lego ev3 brick

00:02:44,080 --> 00:02:49,519
which is basically a computer you get

00:02:47,360 --> 00:02:50,800
three motors two large ones and a medium

00:02:49,519 --> 00:02:53,840
one and you get

00:02:50,800 --> 00:02:55,840
a bunch of sensors you get an ultrasonic

00:02:53,840 --> 00:02:59,120
sensor for measuring distances

00:02:55,840 --> 00:03:02,560
quite precise uh up to the centimeter

00:02:59,120 --> 00:03:06,480
um you get an um geometer

00:03:02,560 --> 00:03:09,440
where you can measure angels angles

00:03:06,480 --> 00:03:10,480
and you get a color sensor which you can

00:03:09,440 --> 00:03:12,800
use to

00:03:10,480 --> 00:03:13,920
detect colors so you can sort lego

00:03:12,800 --> 00:03:17,519
bricks for instance

00:03:13,920 --> 00:03:19,360
but you can also measure reflected light

00:03:17,519 --> 00:03:20,720
which is useful when you want the robot

00:03:19,360 --> 00:03:23,280
to follow a line

00:03:20,720 --> 00:03:25,280
and you also get two touch sensors which

00:03:23,280 --> 00:03:26,640
lego calls touch sensors but actually

00:03:25,280 --> 00:03:32,319
they are just buttons

00:03:26,640 --> 00:03:35,120
so you can either press them or not

00:03:32,319 --> 00:03:36,400
yeah let's build a robot um you can see

00:03:35,120 --> 00:03:39,680
the robot on the pictures

00:03:36,400 --> 00:03:42,400
and i've brought it here so um

00:03:39,680 --> 00:03:44,480
building a robot is also something which

00:03:42,400 --> 00:03:47,280
is trial and error

00:03:44,480 --> 00:03:48,640
which is playing because um if you do

00:03:47,280 --> 00:03:51,280
not follow instructions

00:03:48,640 --> 00:03:51,760
you have to try things out you have an

00:03:51,280 --> 00:03:54,400
idea

00:03:51,760 --> 00:03:55,120
what a robot could do and then you start

00:03:54,400 --> 00:03:57,200
building

00:03:55,120 --> 00:03:58,400
and it either works but most of the

00:03:57,200 --> 00:04:01,599
times it doesn't work

00:03:58,400 --> 00:04:03,840
so this robot here took four twice or so

00:04:01,599 --> 00:04:05,840
until it was in a shape that i thought

00:04:03,840 --> 00:04:11,599
okay that's something i can use

00:04:05,840 --> 00:04:11,599
so i'll put it down there for later use

00:04:12,879 --> 00:04:16,160
what can robots do you build with leo

00:04:14,959 --> 00:04:18,320
basically anything

00:04:16,160 --> 00:04:20,160
you can build with lego there are some

00:04:18,320 --> 00:04:21,280
restrictions the motors are not too

00:04:20,160 --> 00:04:23,120
powerful so you

00:04:21,280 --> 00:04:26,000
probably wouldn't be able to move about

00:04:23,120 --> 00:04:28,080
with it um

00:04:26,000 --> 00:04:29,280
but you can build a robot that just

00:04:28,080 --> 00:04:31,360
moves around you can

00:04:29,280 --> 00:04:32,639
build a robot that follows a line uh you

00:04:31,360 --> 00:04:33,840
can build a robot that

00:04:32,639 --> 00:04:35,919
follows the line and then avoids

00:04:33,840 --> 00:04:37,120
obstacles you can build a robot that

00:04:35,919 --> 00:04:40,639
navigates the maze

00:04:37,120 --> 00:04:43,440
actually there is a contest

00:04:40,639 --> 00:04:44,720
for students which is called robocup uh

00:04:43,440 --> 00:04:45,680
you know actually it's not just for

00:04:44,720 --> 00:04:49,199
students

00:04:45,680 --> 00:04:52,160
um it's called robocup and they meet um

00:04:49,199 --> 00:04:53,120
and um it's a great competition

00:04:52,160 --> 00:04:56,160
worldwide

00:04:53,120 --> 00:04:59,120
and it's really great and they are

00:04:56,160 --> 00:04:59,759
building robots where the robots have to

00:04:59,120 --> 00:05:04,080
rescue

00:04:59,759 --> 00:05:06,240
marbles from a maze and that's amazing

00:05:04,080 --> 00:05:08,160
um let's come to the computer because

00:05:06,240 --> 00:05:10,560
yeah we are at a ruby conference we

00:05:08,160 --> 00:05:12,960
don't want to talk too much about lego

00:05:10,560 --> 00:05:14,240
um the computer has a cpu which is arm

00:05:12,960 --> 00:05:17,759
based um it has

00:05:14,240 --> 00:05:18,960
300 megahertz um you have 64 megabytes

00:05:17,759 --> 00:05:22,960
of one

00:05:18,960 --> 00:05:24,960
which is plenty for for a tiny robot

00:05:22,960 --> 00:05:27,360
and you have a micro sd card slot and so

00:05:24,960 --> 00:05:29,600
on and so on it's probably not that

00:05:27,360 --> 00:05:30,880
interesting there's also a display but

00:05:29,600 --> 00:05:34,000
it's very small

00:05:30,880 --> 00:05:37,280
um yeah you won't see it

00:05:34,000 --> 00:05:40,720
and now let's have a first demo

00:05:37,280 --> 00:05:42,400
um i have to start something on a robot

00:05:40,720 --> 00:05:45,520
so i've written a

00:05:42,400 --> 00:05:48,800
program in a movie

00:05:45,520 --> 00:05:53,039
and no sorry let's see

00:05:48,800 --> 00:05:55,840
what it does let's have this slide

00:05:53,039 --> 00:05:57,120
let's have this browser here so this is

00:05:55,840 --> 00:06:00,240
actually a web page

00:05:57,120 --> 00:06:01,759
which is loaded from the robot so

00:06:00,240 --> 00:06:03,360
this is running on the robots you can

00:06:01,759 --> 00:06:05,919
see

00:06:03,360 --> 00:06:07,840
the measurements of the sensors so this

00:06:05,919 --> 00:06:10,880
is the ultrasonic sensor

00:06:07,840 --> 00:06:13,039
um let's try something does the value

00:06:10,880 --> 00:06:16,560
change yeah it does great

00:06:13,039 --> 00:06:18,840
so as you can see um live

00:06:16,560 --> 00:06:21,039
now could i please see the robot on the

00:06:18,840 --> 00:06:25,360
screen

00:06:21,039 --> 00:06:28,240
ah great and now i can control it

00:06:25,360 --> 00:06:28,240
in my browser

00:06:33,039 --> 00:06:39,240
and it even has sound yeah

00:06:36,960 --> 00:06:46,800
okay let's try to move it

00:06:39,240 --> 00:06:50,160
[Applause]

00:06:46,800 --> 00:06:53,680
i should probably stop the robot uh

00:06:50,160 --> 00:06:56,479
it shouldn't fall down of the

00:06:53,680 --> 00:06:57,120
stage okay and i have to move it back

00:06:56,479 --> 00:07:00,160
because

00:06:57,120 --> 00:07:00,560
later on there will be another demo uh

00:07:00,160 --> 00:07:02,400
and

00:07:00,560 --> 00:07:03,759
i have to do something for that later

00:07:02,400 --> 00:07:06,080
demo

00:07:03,759 --> 00:07:07,599
i forgot to move the cap because this

00:07:06,080 --> 00:07:11,120
pen

00:07:07,599 --> 00:07:15,599
okay so uh what can you do to program

00:07:11,120 --> 00:07:18,560
this computer um there from lego you get

00:07:15,599 --> 00:07:19,759
the ev3 education app you can download

00:07:18,560 --> 00:07:23,199
it for free

00:07:19,759 --> 00:07:23,919
and then you can program the brick with

00:07:23,199 --> 00:07:26,080
it

00:07:23,919 --> 00:07:28,319
it is a graphical programming interface

00:07:26,080 --> 00:07:31,840
based on labview

00:07:28,319 --> 00:07:34,400
it's very intuitive you have

00:07:31,840 --> 00:07:36,240
live debugging you have data logging and

00:07:34,400 --> 00:07:36,639
you also have built instructions so if

00:07:36,240 --> 00:07:38,400
you

00:07:36,639 --> 00:07:39,840
have no idea what to do with the parts

00:07:38,400 --> 00:07:42,000
you have in your

00:07:39,840 --> 00:07:44,000
set then you can open up some build

00:07:42,000 --> 00:07:45,199
instructions by lego and you can build a

00:07:44,000 --> 00:07:48,319
robot and it will actually

00:07:45,199 --> 00:07:50,800
run this is great

00:07:48,319 --> 00:07:51,840
but it's very hard to create complex

00:07:50,800 --> 00:07:53,599
programs

00:07:51,840 --> 00:07:54,879
it's actually impossible to create

00:07:53,599 --> 00:07:58,080
something you have just

00:07:54,879 --> 00:08:01,840
seen you cannot build a web

00:07:58,080 --> 00:08:04,879
service on the robot using that software

00:08:01,840 --> 00:08:06,400
and the application itself is so slow

00:08:04,879 --> 00:08:09,199
and hard to operate

00:08:06,400 --> 00:08:11,280
so it's no fun at all for an experienced

00:08:09,199 --> 00:08:14,160
developer to use it

00:08:11,280 --> 00:08:15,759
it's maybe not even fun for students

00:08:14,160 --> 00:08:20,080
because the application is just

00:08:15,759 --> 00:08:23,360
so slow um so i looked for alternatives

00:08:20,080 --> 00:08:26,960
what what can i use else um there is

00:08:23,360 --> 00:08:29,280
a make code environment for this robot

00:08:26,960 --> 00:08:31,599
for anyone who doesn't know make code is

00:08:29,280 --> 00:08:33,919
from microsoft it's a

00:08:31,599 --> 00:08:34,640
browser-based development environment

00:08:33,919 --> 00:08:38,000
similar

00:08:34,640 --> 00:08:41,680
like scratch um you you can use

00:08:38,000 --> 00:08:43,680
graphical programming with that

00:08:41,680 --> 00:08:44,800
or you can edit text files in your

00:08:43,680 --> 00:08:47,680
browser

00:08:44,800 --> 00:08:48,800
and it's using typescript so you have

00:08:47,680 --> 00:08:51,680
javascript

00:08:48,800 --> 00:08:52,720
and as you cannot have live debugging in

00:08:51,680 --> 00:08:54,640
your browser

00:08:52,720 --> 00:08:55,839
with together with the brick it has a

00:08:54,640 --> 00:08:57,440
simulator

00:08:55,839 --> 00:08:59,360
which works most of the times but

00:08:57,440 --> 00:09:02,160
sometimes it doesn't

00:08:59,360 --> 00:09:02,640
there's also ignite which i didn't try

00:09:02,160 --> 00:09:05,920
out

00:09:02,640 --> 00:09:08,880
it's a ruby gem so we yeah i was happy

00:09:05,920 --> 00:09:10,640
but um it runs on your own computer it

00:09:08,880 --> 00:09:13,360
doesn't run on the brick

00:09:10,640 --> 00:09:14,959
and it could use produces bytecode the

00:09:13,360 --> 00:09:17,920
default ev3

00:09:14,959 --> 00:09:18,720
operating system understands um but i

00:09:17,920 --> 00:09:20,959
wanted to do

00:09:18,720 --> 00:09:23,600
something different i wanted to run ruby

00:09:20,959 --> 00:09:26,320
on this brick and not on my machine

00:09:23,600 --> 00:09:26,800
so i was looking for other options and i

00:09:26,320 --> 00:09:30,320
found

00:09:26,800 --> 00:09:33,440
ev3 def which is a linux distribution

00:09:30,320 --> 00:09:37,279
for this brick it's debian based

00:09:33,440 --> 00:09:39,360
and you install it on a sd card and

00:09:37,279 --> 00:09:40,959
you do not have to flash the firmware

00:09:39,360 --> 00:09:43,279
which is great because

00:09:40,959 --> 00:09:44,640
if i'm fed up with this stuff i can just

00:09:43,279 --> 00:09:47,120
remove the card

00:09:44,640 --> 00:09:48,640
and can give the set back to my kids and

00:09:47,120 --> 00:09:51,279
they'll be happy and they can can use

00:09:48,640 --> 00:09:54,959
the graphical environment by by lego

00:09:51,279 --> 00:09:58,240
um ev3 dev includes drivers for most

00:09:54,959 --> 00:10:00,640
if not all the fuels definitely

00:09:58,240 --> 00:10:02,160
the sensors and motors which are chipped

00:10:00,640 --> 00:10:05,279
in the default set

00:10:02,160 --> 00:10:06,959
are supported and are working and which

00:10:05,279 --> 00:10:10,720
is maybe most interesting it has an

00:10:06,959 --> 00:10:11,600
ssh server so i can get a console on the

00:10:10,720 --> 00:10:16,000
computer

00:10:11,600 --> 00:10:19,680
there so i wanted to try movie

00:10:16,000 --> 00:10:22,480
why yeah because obviously the um

00:10:19,680 --> 00:10:23,760
the logo of moobi looks like a lego

00:10:22,480 --> 00:10:28,160
brick

00:10:23,760 --> 00:10:29,839
um also i thought that um

00:10:28,160 --> 00:10:31,440
this is just a small computer doesn't

00:10:29,839 --> 00:10:34,560
have much memory it doesn't

00:10:31,440 --> 00:10:36,959
have a big cpu so i use a ruby

00:10:34,560 --> 00:10:38,000
implementation that is not that big as

00:10:36,959 --> 00:10:41,519
well

00:10:38,000 --> 00:10:43,360
uh because a movie the m could stand for

00:10:41,519 --> 00:10:45,040
different things it could be embeddable

00:10:43,360 --> 00:10:48,000
movie it could be

00:10:45,040 --> 00:10:49,839
and will be for embedded devices

00:10:48,000 --> 00:10:52,560
embedded devices it could be

00:10:49,839 --> 00:10:53,440
mini ruby or whatever but in the end

00:10:52,560 --> 00:10:55,600
it's just an

00:10:53,440 --> 00:10:58,160
alternative interpreter for the ruby

00:10:55,600 --> 00:11:00,079
programming language

00:10:58,160 --> 00:11:02,640
it does not implement every class and

00:11:00,079 --> 00:11:06,079
method you know from c ruby

00:11:02,640 --> 00:11:08,079
so you have to watch out what you do

00:11:06,079 --> 00:11:10,160
but for that reason it also has a much

00:11:08,079 --> 00:11:13,279
smaller footprint so it leads

00:11:10,160 --> 00:11:16,560
less memory it probably even runs fast

00:11:13,279 --> 00:11:17,279
faster for some things and this is

00:11:16,560 --> 00:11:19,360
something

00:11:17,279 --> 00:11:20,720
which i thought is desirable when

00:11:19,360 --> 00:11:24,720
running this

00:11:20,720 --> 00:11:25,440
lego robot so i tried to install it try

00:11:24,720 --> 00:11:28,640
and fail

00:11:25,440 --> 00:11:30,920
play around uh my initial

00:11:28,640 --> 00:11:32,079
thought was okay this is a debian based

00:11:30,920 --> 00:11:35,200
distribution

00:11:32,079 --> 00:11:37,040
so apt-get install movie should work and

00:11:35,200 --> 00:11:40,240
actually it does

00:11:37,040 --> 00:11:43,440
um yeah so i was able to put

00:11:40,240 --> 00:11:48,320
hello world and i got hello world

00:11:43,440 --> 00:11:50,959
but as you as i might mention

00:11:48,320 --> 00:11:53,279
the cpu doesn't support floating point

00:11:50,959 --> 00:11:57,120
operations well

00:11:53,279 --> 00:12:00,240
so i was eager to use a rational class

00:11:57,120 --> 00:12:01,519
so that i can use integers um as often

00:12:00,240 --> 00:12:04,079
as possible

00:12:01,519 --> 00:12:06,160
and as you can see here the rational

00:12:04,079 --> 00:12:09,920
class isn't present

00:12:06,160 --> 00:12:14,079
oh bad so i cannot use the debian

00:12:09,920 --> 00:12:17,600
distribution without changing something

00:12:14,079 --> 00:12:20,639
now movie doesn't support ruby gems

00:12:17,600 --> 00:12:23,680
why um so mov is

00:12:20,639 --> 00:12:24,000
library that is compiled and you can add

00:12:23,680 --> 00:12:27,120
this

00:12:24,000 --> 00:12:28,959
library into your program

00:12:27,120 --> 00:12:31,040
if you're using a library and you

00:12:28,959 --> 00:12:34,079
statically link it

00:12:31,040 --> 00:12:38,560
against the program then you can cannot

00:12:34,079 --> 00:12:41,839
easily dynamically load code later

00:12:38,560 --> 00:12:45,680
so all the gems you are using

00:12:41,839 --> 00:12:47,680
have to be compiled into the library

00:12:45,680 --> 00:12:49,360
and for that reason there are no ruby

00:12:47,680 --> 00:12:53,040
gems for moobi

00:12:49,360 --> 00:12:56,240
but mrb gems they are a bit different

00:12:53,040 --> 00:12:58,880
from the default ruby gems and

00:12:56,240 --> 00:12:59,680
you define them that you want to use

00:12:58,880 --> 00:13:02,959
them

00:12:59,680 --> 00:13:03,600
in your build configuration so first you

00:13:02,959 --> 00:13:06,800
fetch the

00:13:03,600 --> 00:13:09,839
movie source and then you have your

00:13:06,800 --> 00:13:09,839
build configuration

00:13:10,000 --> 00:13:14,000
this is just an example which is

00:13:12,480 --> 00:13:16,000
including some gems

00:13:14,000 --> 00:13:18,800
i left out the rational gem but there's

00:13:16,000 --> 00:13:22,320
a rational gem as well

00:13:18,800 --> 00:13:23,600
and then you compile it just call mini

00:13:22,320 --> 00:13:26,320
wake

00:13:23,600 --> 00:13:28,560
um yeah you compile it and then you grab

00:13:26,320 --> 00:13:31,680
a coffee

00:13:28,560 --> 00:13:34,480
you maybe even prepare pizza

00:13:31,680 --> 00:13:36,560
and eat it i don't know i stopped the

00:13:34,480 --> 00:13:37,440
operation after one hour so it just

00:13:36,560 --> 00:13:40,800
takes so

00:13:37,440 --> 00:13:44,320
long on the robot oh terrible

00:13:40,800 --> 00:13:46,240
but there's a an easy solution for that

00:13:44,320 --> 00:13:48,320
you can cross-compile applications for

00:13:46,240 --> 00:13:51,760
that robot

00:13:48,320 --> 00:13:53,440
the very nice ev3 dev people provide a

00:13:51,760 --> 00:13:55,600
docker image for this

00:13:53,440 --> 00:13:58,079
so you just just have to boot up a

00:13:55,600 --> 00:14:00,959
docker container on your machine

00:13:58,079 --> 00:14:02,320
and then you have to install some

00:14:00,959 --> 00:14:05,920
packages

00:14:02,320 --> 00:14:08,959
from debian we did and so on

00:14:05,920 --> 00:14:10,079
and then we again adjust the build

00:14:08,959 --> 00:14:12,720
configuration a bit

00:14:10,079 --> 00:14:15,279
notice the cross build here and then we

00:14:12,720 --> 00:14:17,839
need to adjust the commands a bit

00:14:15,279 --> 00:14:19,120
so that the compiler is found that we

00:14:17,839 --> 00:14:23,120
want to use

00:14:19,120 --> 00:14:26,560
and then there are some gems defined

00:14:23,120 --> 00:14:28,639
and then yeah it actually builds so i've

00:14:26,560 --> 00:14:32,160
written some scripts

00:14:28,639 --> 00:14:35,279
i use to get into the compiler shell

00:14:32,160 --> 00:14:38,399
and um this actually builds

00:14:35,279 --> 00:14:41,920
a mubi m-i-r-b which is

00:14:38,399 --> 00:14:44,800
a irb replacement running movie

00:14:41,920 --> 00:14:45,279
and mrbc which i will talk about later

00:14:44,800 --> 00:14:48,560
and it

00:14:45,279 --> 00:14:51,839
also builds a library called called lib

00:14:48,560 --> 00:14:52,800
movie dot h because it's uh supposed to

00:14:51,839 --> 00:14:56,000
be statically

00:14:52,800 --> 00:14:58,560
linked into applications

00:14:56,000 --> 00:15:00,320
and then i have to copy the binaries i

00:14:58,560 --> 00:15:04,000
have built on my machine

00:15:00,320 --> 00:15:07,600
to the robot using scp then i can

00:15:04,000 --> 00:15:08,560
execute then i can ssh into the robot

00:15:07,600 --> 00:15:11,680
console

00:15:08,560 --> 00:15:12,160
and i can run my commands and as you can

00:15:11,680 --> 00:15:15,440
see

00:15:12,160 --> 00:15:19,839
rational is actually working now

00:15:15,440 --> 00:15:23,360
and that's great yeah one step further

00:15:19,839 --> 00:15:25,920
um yeah i already was happy

00:15:23,360 --> 00:15:26,959
at that time and now i have to start

00:15:25,920 --> 00:15:31,759
something on a

00:15:26,959 --> 00:15:31,759
robot because it takes a bit of time

00:15:32,480 --> 00:15:38,839
maybe could i see the robot again

00:15:36,480 --> 00:15:41,600
ah great so you can see it's doing

00:15:38,839 --> 00:15:44,959
something

00:15:41,600 --> 00:15:47,839
it's moving around there is something

00:15:44,959 --> 00:15:49,680
turning down and later it will be

00:15:47,839 --> 00:15:52,079
turning up again

00:15:49,680 --> 00:15:55,440
and this will take about 10 minutes so

00:15:52,079 --> 00:15:57,759
please switch back to my screen

00:15:55,440 --> 00:15:59,440
i let it run and then let's see what it

00:15:57,759 --> 00:16:01,199
produces in the end

00:15:59,440 --> 00:16:02,560
can i get back to my screen please yeah

00:16:01,199 --> 00:16:05,920
great

00:16:02,560 --> 00:16:09,279
so i always was happy when

00:16:05,920 --> 00:16:11,279
being able to build ammo ruby on my host

00:16:09,279 --> 00:16:11,759
and then copy it to the robot i could

00:16:11,279 --> 00:16:15,199
actually

00:16:11,759 --> 00:16:18,079
run ubi programs on the robot now

00:16:15,199 --> 00:16:18,880
but i also wanted to improve things a

00:16:18,079 --> 00:16:21,600
bit further

00:16:18,880 --> 00:16:22,560
and i wanted to try things out as i i

00:16:21,600 --> 00:16:25,440
have mentioned

00:16:22,560 --> 00:16:25,839
mob is a library you can compile into

00:16:25,440 --> 00:16:29,759
your

00:16:25,839 --> 00:16:32,959
own applications so what if i

00:16:29,759 --> 00:16:36,880
create an application um

00:16:32,959 --> 00:16:40,160
just for my simple ruby script

00:16:36,880 --> 00:16:45,759
this is possible so um movie

00:16:40,160 --> 00:16:48,800
works with bytecode um the movie

00:16:45,759 --> 00:16:50,320
interpreter creates bytecode from the

00:16:48,800 --> 00:16:54,000
youvi code and then

00:16:50,320 --> 00:16:56,399
executes that bytecode and

00:16:54,000 --> 00:16:58,399
there's also a tool that creates that

00:16:56,399 --> 00:17:02,320
bytecode and then writes it

00:16:58,399 --> 00:17:04,720
as um as object into a c file

00:17:02,320 --> 00:17:06,480
and you can then use that c file with a

00:17:04,720 --> 00:17:10,079
bit of boiler clothes

00:17:06,480 --> 00:17:13,120
uh boilerplate code um

00:17:10,079 --> 00:17:16,079
to build a binary from your ruby code

00:17:13,120 --> 00:17:18,400
so the boilerplate code is just oh i

00:17:16,079 --> 00:17:22,640
didn't count at 50 lines of code or so

00:17:18,400 --> 00:17:25,839
really easy just get an

00:17:22,640 --> 00:17:28,480
mrb state then execute

00:17:25,839 --> 00:17:30,160
your ruby byte code which is included

00:17:28,480 --> 00:17:32,240
here

00:17:30,160 --> 00:17:33,600
and then print an error if there was an

00:17:32,240 --> 00:17:35,440
exception and

00:17:33,600 --> 00:17:37,120
close the state if there was no

00:17:35,440 --> 00:17:41,039
exception and that's it

00:17:37,120 --> 00:17:42,880
so pretty easy um compiling the code is

00:17:41,039 --> 00:17:45,760
a bit more complicated

00:17:42,880 --> 00:17:46,400
but it makes a lot lot sense to automate

00:17:45,760 --> 00:17:49,120
this

00:17:46,400 --> 00:17:49,600
so i have a wake file with some woods

00:17:49,120 --> 00:17:52,080
which

00:17:49,600 --> 00:17:54,320
produce the boilerplate code for each

00:17:52,080 --> 00:17:57,600
ruby application i write for the robot

00:17:54,320 --> 00:18:01,520
and which also

00:17:57,600 --> 00:18:05,200
compiles this into binary stand

00:18:01,520 --> 00:18:08,559
so now i'm able to produce binaries but

00:18:05,200 --> 00:18:11,919
how do i use the motors and sensors

00:18:08,559 --> 00:18:16,240
in that robot so ev3 dev

00:18:11,919 --> 00:18:17,840
uses the sysfs system on linux

00:18:16,240 --> 00:18:20,400
for the communication with the user

00:18:17,840 --> 00:18:22,400
space that means for each

00:18:20,400 --> 00:18:25,280
attached sensor motor there is a

00:18:22,400 --> 00:18:27,360
directory in this class

00:18:25,280 --> 00:18:30,000
and in each of those directories there

00:18:27,360 --> 00:18:32,799
are files which contain sensor values

00:18:30,000 --> 00:18:33,679
motor states and similar information and

00:18:32,799 --> 00:18:37,120
i

00:18:33,679 --> 00:18:39,679
if i want to use a sensor or a motor

00:18:37,120 --> 00:18:41,520
then i just have to read from files or i

00:18:39,679 --> 00:18:44,559
have to write into files

00:18:41,520 --> 00:18:45,360
pretty easy movie can do this yeah so

00:18:44,559 --> 00:18:49,280
there's an

00:18:45,360 --> 00:18:49,919
mov io and io has read methods and white

00:18:49,280 --> 00:18:53,919
methods

00:18:49,919 --> 00:18:53,919
and this is working very very well

00:18:54,480 --> 00:18:58,799
so for example if i want to get the

00:18:56,400 --> 00:19:01,919
distance from the ultrasonic sensor

00:18:58,799 --> 00:19:03,600
then i first need to specify um the

00:19:01,919 --> 00:19:06,400
sensor i will be using

00:19:03,600 --> 00:19:06,960
this just an example you probably should

00:19:06,400 --> 00:19:10,480
use

00:19:06,960 --> 00:19:14,080
more elaborate method to get that path

00:19:10,480 --> 00:19:16,799
but in the end you write a mode

00:19:14,080 --> 00:19:17,600
into a mode file and then you read a

00:19:16,799 --> 00:19:20,000
value

00:19:17,600 --> 00:19:21,520
and that's it now i have a string i

00:19:20,000 --> 00:19:24,559
could convert it into an

00:19:21,520 --> 00:19:26,960
integer and i could use it then in my

00:19:24,559 --> 00:19:26,960
program

00:19:27,039 --> 00:19:30,640
for moving the motor you can do

00:19:28,880 --> 00:19:33,520
something similar just

00:19:30,640 --> 00:19:33,840
read the maximum speed of the motor and

00:19:33,520 --> 00:19:36,240
then

00:19:33,840 --> 00:19:36,880
write the speed you want to use into the

00:19:36,240 --> 00:19:40,480
speed

00:19:36,880 --> 00:19:42,320
file and then send a command one forever

00:19:40,480 --> 00:19:44,400
and i suppose every one of you can guess

00:19:42,320 --> 00:19:46,640
what a motor will do if i send this

00:19:44,400 --> 00:19:50,240
command

00:19:46,640 --> 00:19:50,240
until i send a stop command

00:19:50,400 --> 00:19:54,160
um yeah so now i can use the sensors i

00:19:53,600 --> 00:19:57,679
can use

00:19:54,160 --> 00:19:58,320
the motors but um i do not only want to

00:19:57,679 --> 00:20:01,120
avoid

00:19:58,320 --> 00:20:02,480
one program for that robot but i want to

00:20:01,120 --> 00:20:04,720
rebuild the robot

00:20:02,480 --> 00:20:06,640
so that it does different things and i i

00:20:04,720 --> 00:20:09,760
want to write a new program

00:20:06,640 --> 00:20:13,360
for it and i don't want to

00:20:09,760 --> 00:20:16,480
repeat all the code i've used to

00:20:13,360 --> 00:20:22,159
access the sensors and motors and stuff

00:20:16,480 --> 00:20:24,640
so i created a mrb gem on my own

00:20:22,159 --> 00:20:25,280
and this is actually very very easy you

00:20:24,640 --> 00:20:28,960
just need

00:20:25,280 --> 00:20:30,240
a rake file in a directory that contains

00:20:28,960 --> 00:20:33,760
a specification

00:20:30,240 --> 00:20:34,000
for your gem so you define dependencies

00:20:33,760 --> 00:20:36,480
for

00:20:34,000 --> 00:20:37,280
other mlb gems there and you can even

00:20:36,480 --> 00:20:40,799
define

00:20:37,280 --> 00:20:41,919
um build instructions for the c compiler

00:20:40,799 --> 00:20:44,240
and for the linker

00:20:41,919 --> 00:20:44,960
so if you use the library in your in

00:20:44,240 --> 00:20:47,039
your mrb

00:20:44,960 --> 00:20:48,559
gem you can find it as well you can

00:20:47,039 --> 00:20:50,799
define it as well

00:20:48,559 --> 00:20:52,559
and then you put your ruby files into a

00:20:50,799 --> 00:20:54,400
directory named mrblip

00:20:52,559 --> 00:20:55,679
you put your c files into a source

00:20:54,400 --> 00:20:58,480
directory

00:20:55,679 --> 00:20:59,760
and then you go to the place where

00:20:58,480 --> 00:21:02,320
building your own

00:20:59,760 --> 00:21:04,240
ruby programs and modify the build

00:21:02,320 --> 00:21:06,480
configuration and reference your own gem

00:21:04,240 --> 00:21:09,919
there

00:21:06,480 --> 00:21:13,200
and then you can use it so

00:21:09,919 --> 00:21:16,720
for moving the robot i can get

00:21:13,200 --> 00:21:20,000
a motor instance by calling evp motors

00:21:16,720 --> 00:21:21,760
and then i need to specify the port on

00:21:20,000 --> 00:21:25,360
the robot

00:21:21,760 --> 00:21:26,799
and i have a movement controller which i

00:21:25,360 --> 00:21:30,799
can use

00:21:26,799 --> 00:21:34,559
to move the robot by a specific distance

00:21:30,799 --> 00:21:37,200
so when i know how large the wheels are

00:21:34,559 --> 00:21:38,080
then i know by how many turns of the

00:21:37,200 --> 00:21:41,280
wheel

00:21:38,080 --> 00:21:42,640
the robot has gone how far and i'm using

00:21:41,280 --> 00:21:47,840
that here

00:21:42,640 --> 00:21:50,159
so the wheels are 173 millimeters

00:21:47,840 --> 00:21:50,159
um

00:21:51,679 --> 00:21:56,159
not wide circum circumference thank you

00:21:54,880 --> 00:22:00,080
very much

00:21:56,159 --> 00:22:03,760
have a circumference of 173 millimeters

00:22:00,080 --> 00:22:06,960
so the motors count their rotation

00:22:03,760 --> 00:22:10,159
and i can use that um to move the robot

00:22:06,960 --> 00:22:10,159
by a specific distance

00:22:10,480 --> 00:22:13,679
i can play sounds if you've heard as

00:22:12,559 --> 00:22:17,039
you've heard

00:22:13,679 --> 00:22:20,080
i can even um switch on the

00:22:17,039 --> 00:22:21,520
leds which are in the brick there are

00:22:20,080 --> 00:22:24,000
two different leds with

00:22:21,520 --> 00:22:25,120
two different colors so you can produce

00:22:24,000 --> 00:22:27,919
green and red

00:22:25,120 --> 00:22:29,760
and everything in between and i can use

00:22:27,919 --> 00:22:32,320
the sensors very easy

00:22:29,760 --> 00:22:33,919
so i can print the sensor values there's

00:22:32,320 --> 00:22:37,039
even a formatted value

00:22:33,919 --> 00:22:39,520
method so that i get what you've

00:22:37,039 --> 00:22:41,120
seen here so this is actually coming

00:22:39,520 --> 00:22:45,039
from the robot itself

00:22:41,120 --> 00:22:45,039
it's not produced in the javascript here

00:22:47,039 --> 00:22:50,720
and that's very nice so what was

00:22:49,679 --> 00:22:54,640
difficult

00:22:50,720 --> 00:22:57,440
while developing this movie stuff

00:22:54,640 --> 00:22:57,840
um it was not always easy to understand

00:22:57,440 --> 00:23:01,039
which

00:22:57,840 --> 00:23:04,559
method i know from c will be is

00:23:01,039 --> 00:23:05,520
supported in movie but there is an api

00:23:04,559 --> 00:23:08,960
documentation

00:23:05,520 --> 00:23:09,760
i could use and it was also very very

00:23:08,960 --> 00:23:13,679
convenient

00:23:09,760 --> 00:23:16,080
to read the source code of movie because

00:23:13,679 --> 00:23:17,520
even for me who's not very familiar with

00:23:16,080 --> 00:23:19,600
c

00:23:17,520 --> 00:23:23,760
it was possible to read and understand

00:23:19,600 --> 00:23:27,039
what happens there

00:23:23,760 --> 00:23:29,520
what was difficult as well is

00:23:27,039 --> 00:23:31,600
in my gem i'm using different classes

00:23:29,520 --> 00:23:34,480
for the sensors for the motors and

00:23:31,600 --> 00:23:36,640
in the end i ended up with a lot with

00:23:34,480 --> 00:23:38,559
lots of classes and it just didn't fit

00:23:36,640 --> 00:23:42,400
into one file and i created

00:23:38,559 --> 00:23:45,679
several files as i'm used to in my

00:23:42,400 --> 00:23:49,200
um normal day-to-day c ruby programs

00:23:45,679 --> 00:23:51,039
and in the end it didn't work anymore

00:23:49,200 --> 00:23:52,320
and i was wondering what's happening

00:23:51,039 --> 00:23:55,440
there

00:23:52,320 --> 00:23:56,159
yeah the reason is lord order is

00:23:55,440 --> 00:23:58,880
important

00:23:56,159 --> 00:24:00,000
at that point and the class just wasn't

00:23:58,880 --> 00:24:03,200
defined

00:24:00,000 --> 00:24:06,559
when it should be defined i ended up

00:24:03,200 --> 00:24:08,640
prefixing some file names with with a

00:24:06,559 --> 00:24:09,760
or something so that they get loaded

00:24:08,640 --> 00:24:13,360
into the uh

00:24:09,760 --> 00:24:16,480
loaded into the order i wanted them to

00:24:13,360 --> 00:24:18,720
so nothing really important but um

00:24:16,480 --> 00:24:20,559
my advice would be to just use smaller

00:24:18,720 --> 00:24:23,120
mmb gems so i probably should

00:24:20,559 --> 00:24:25,360
should have created multiple gems one

00:24:23,120 --> 00:24:27,440
for the sensors one for the motors

00:24:25,360 --> 00:24:30,159
uh one for the other stuff on the brick

00:24:27,440 --> 00:24:34,480
and then just one gem which combines

00:24:30,159 --> 00:24:34,480
the other gems as dependencies

00:24:34,640 --> 00:24:38,640
what was difficult when running n movie

00:24:36,960 --> 00:24:42,960
on the robot

00:24:38,640 --> 00:24:46,640
so um it's actually working quite well

00:24:42,960 --> 00:24:50,000
there are some issues that the robot is

00:24:46,640 --> 00:24:53,120
too slow not too slow in moving but

00:24:50,000 --> 00:24:54,080
to slow in recognizing changed sensor

00:24:53,120 --> 00:24:56,559
values

00:24:54,080 --> 00:24:57,120
but this is probably something which

00:24:56,559 --> 00:25:00,559
isn't

00:24:57,120 --> 00:25:04,159
my movie's fault after all the cpu

00:25:00,559 --> 00:25:04,640
isn't that fast and maybe the sensor

00:25:04,159 --> 00:25:08,000
isn't

00:25:04,640 --> 00:25:10,000
isn't as fast as well so you just have

00:25:08,000 --> 00:25:13,200
to watch out for it

00:25:10,000 --> 00:25:15,840
but everything else is fine

00:25:13,200 --> 00:25:16,400
what could i do to improve this further

00:25:15,840 --> 00:25:19,440
so

00:25:16,400 --> 00:25:22,320
what do i want to do what

00:25:19,440 --> 00:25:24,720
uh with what things do i want to play i

00:25:22,320 --> 00:25:27,840
want to play with concurrency

00:25:24,720 --> 00:25:32,240
so for example there are some buttons

00:25:27,840 --> 00:25:36,080
on the on the brick and

00:25:32,240 --> 00:25:38,559
i want to have an action triggered

00:25:36,080 --> 00:25:39,440
when i press a button without blocking

00:25:38,559 --> 00:25:41,919
the program

00:25:39,440 --> 00:25:42,720
while waiting for a button press this is

00:25:41,919 --> 00:25:45,360
something

00:25:42,720 --> 00:25:46,799
not e not very easy to implement in

00:25:45,360 --> 00:25:49,600
movie at the moment

00:25:46,799 --> 00:25:51,440
or at least i didn't find a way yet and

00:25:49,600 --> 00:25:54,080
i also want to use the display

00:25:51,440 --> 00:25:57,840
although it is very small but it would

00:25:54,080 --> 00:25:57,840
be nice to be able to use it

00:25:58,000 --> 00:26:01,120
but it is using a linux frame buffer and

00:26:00,559 --> 00:26:04,480
i need

00:26:01,120 --> 00:26:05,760
c code to read and write to that

00:26:04,480 --> 00:26:08,240
framework buffer

00:26:05,760 --> 00:26:10,880
and that is something yeah i wasn't up

00:26:08,240 --> 00:26:13,360
to yet

00:26:10,880 --> 00:26:14,320
yeah so another demo so the robot has

00:26:13,360 --> 00:26:17,120
finished maybe

00:26:14,320 --> 00:26:19,440
uh can i have uh the robot on screen

00:26:17,120 --> 00:26:19,440
again

00:26:19,520 --> 00:26:24,490
yeah great so it has finished let's see

00:26:22,559 --> 00:26:29,940
what it did

00:26:24,490 --> 00:26:29,940
[Applause]

00:26:32,000 --> 00:26:35,200
no it's probably better here for the

00:26:34,320 --> 00:26:36,880
camera

00:26:35,200 --> 00:26:38,280
and then switch back to the screen and

00:26:36,880 --> 00:26:46,400
then here for the audience

00:26:38,280 --> 00:26:48,960
[Applause]

00:26:46,400 --> 00:26:51,200
so have a conclusion yeah playing around

00:26:48,960 --> 00:26:54,559
is fun you can get quite far

00:26:51,200 --> 00:26:56,720
if you have an idea try and yeah

00:26:54,559 --> 00:26:59,600
maybe you are up to bring your own lego

00:26:56,720 --> 00:27:07,840
set next year and we have an oyubu cup

00:26:59,600 --> 00:27:07,840
let's see thank you very much

00:27:17,520 --> 00:27:20,640
thank you very much thank you what a

00:27:19,440 --> 00:27:25,440
wonderful talk

00:27:20,640 --> 00:27:25,440

YouTube URL: https://www.youtube.com/watch?v=54v7kMzVAW8


