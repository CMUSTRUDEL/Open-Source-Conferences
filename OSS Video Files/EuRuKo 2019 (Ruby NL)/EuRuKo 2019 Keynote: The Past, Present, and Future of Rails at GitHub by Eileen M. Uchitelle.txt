Title: EuRuKo 2019 Keynote: The Past, Present, and Future of Rails at GitHub by Eileen M. Uchitelle
Publication date: 2021-01-19
Playlist: EuRuKo 2019
Description: 
	Closing keynote: The Past, Present, and Future of Rails at GitHub


We'll look at GitHub's story, our Rails upgrade, and how cumulative technical debt can stifle development. At the end we'll explore how we're staying up to date with Rails and our investment in the future of Rails.

Eileen M. Uchitelle - https://twitter.com/eileencodes
EuRuKo 2019
Captions: 
	00:00:06,000 --> 00:00:10,320
so for the last talk

00:00:07,359 --> 00:00:13,360
we have eileen here um well right now

00:00:10,320 --> 00:00:18,560
she works as a staff engineer at github

00:00:13,360 --> 00:00:18,560
yeah yeah some whoops and um

00:00:19,039 --> 00:00:24,160
which is uh well at least one small step

00:00:22,320 --> 00:00:26,000
up from something that she did before

00:00:24,160 --> 00:00:27,439
she worked on a conveyor belt well not

00:00:26,000 --> 00:00:30,080
an actual conveyor belt

00:00:27,439 --> 00:00:30,640
she was working at a photo studio making

00:00:30,080 --> 00:00:33,520
pictures

00:00:30,640 --> 00:00:34,800
by the thousands of people and she

00:00:33,520 --> 00:00:36,480
didn't really enjoy that and i think

00:00:34,800 --> 00:00:38,480
that the work that she does right now is

00:00:36,480 --> 00:00:41,120
much more specialized and well i think

00:00:38,480 --> 00:00:41,920
it will give anyone more joy than doing

00:00:41,120 --> 00:00:44,480
things

00:00:41,920 --> 00:00:46,650
by the thousands um i'd like to have a

00:00:44,480 --> 00:00:54,480
hand of applause for eileen

00:00:46,650 --> 00:00:56,239
[Applause]

00:00:54,480 --> 00:01:00,079
hi everyone can you hear me all in the

00:00:56,239 --> 00:01:01,520
back up there good okay

00:01:00,079 --> 00:01:03,199
oh there's like this countdown timer

00:01:01,520 --> 00:01:06,799
that's really stressful because it's

00:01:03,199 --> 00:01:06,799
it started before i got up here

00:01:08,640 --> 00:01:11,680
i first just want to say thank you to

00:01:10,080 --> 00:01:13,040
the organizers for throwing a great

00:01:11,680 --> 00:01:15,360
conference and

00:01:13,040 --> 00:01:17,280
inviting me to be your final keynote uh

00:01:15,360 --> 00:01:19,439
hopefully you're not disappointed

00:01:17,280 --> 00:01:21,600
and you enjoy the rest of this the only

00:01:19,439 --> 00:01:23,840
thing you will be disappointed by is i

00:01:21,600 --> 00:01:26,000
don't have ship puns because i don't i

00:01:23,840 --> 00:01:30,159
don't do puns if you want puns

00:01:26,000 --> 00:01:30,159
go talk to aaron he does it all day long

00:01:30,720 --> 00:01:35,200
all right let's get started so as they

00:01:33,280 --> 00:01:37,119
said already i'm ileane

00:01:35,200 --> 00:01:38,880
you can find me anywhere online at the

00:01:37,119 --> 00:01:42,079
handle eileen codes

00:01:38,880 --> 00:01:43,600
twitter github blog email unless i don't

00:01:42,079 --> 00:01:46,799
want you to find me

00:01:43,600 --> 00:01:49,119
and that it's not eileen codes

00:01:46,799 --> 00:01:51,119
i'm a staff engineer at github on our

00:01:49,119 --> 00:01:54,159
ruby architecture team

00:01:51,119 --> 00:01:54,720
we are responsible for improving the

00:01:54,159 --> 00:01:57,119
rails

00:01:54,720 --> 00:01:57,840
framework and the ruby language so that

00:01:57,119 --> 00:02:01,280
it benefits

00:01:57,840 --> 00:02:03,759
github we add features we reduce

00:02:01,280 --> 00:02:05,600
technical debt in the application and we

00:02:03,759 --> 00:02:06,719
try to make sure that the code that our

00:02:05,600 --> 00:02:08,560
engineers are writing

00:02:06,719 --> 00:02:10,160
is going to work with current and newer

00:02:08,560 --> 00:02:13,760
versions of rails

00:02:10,160 --> 00:02:15,599
and ruby i'm also on the rails core team

00:02:13,760 --> 00:02:16,879
for anyone who's new to the ruby

00:02:15,599 --> 00:02:18,879
ecosystem

00:02:16,879 --> 00:02:20,959
the rails core team decides the future

00:02:18,879 --> 00:02:23,680
of the framework we

00:02:20,959 --> 00:02:24,480
or a group of i think 12 i don't know i

00:02:23,680 --> 00:02:26,000
lost count

00:02:24,480 --> 00:02:28,560
anyway there's some number of us that

00:02:26,000 --> 00:02:30,640
you know we review your pull requests

00:02:28,560 --> 00:02:32,319
merge them decide what we actually want

00:02:30,640 --> 00:02:34,840
the next version to look like and then

00:02:32,319 --> 00:02:37,840
do the actual release

00:02:34,840 --> 00:02:40,560
um so each year i

00:02:37,840 --> 00:02:42,239
reflect back on what i've been what what

00:02:40,560 --> 00:02:44,000
i've what work i've been doing and what

00:02:42,239 --> 00:02:44,879
i've learned and what i'd like to share

00:02:44,000 --> 00:02:48,080
with all of you

00:02:44,879 --> 00:02:49,680
at conferences that i speak at each year

00:02:48,080 --> 00:02:51,599
and when i started writing the abstract

00:02:49,680 --> 00:02:53,360
for this talk i originally

00:02:51,599 --> 00:02:55,360
thought that i wanted to talk about the

00:02:53,360 --> 00:02:56,720
intimate details of upgrading rails at

00:02:55,360 --> 00:02:58,640
github

00:02:56,720 --> 00:03:00,319
i had spent more than a year and a half

00:02:58,640 --> 00:03:02,879
working on upgrading

00:03:00,319 --> 00:03:05,120
github from rails 32 to 5.2 and i

00:03:02,879 --> 00:03:07,920
certainly could talk about it for hours

00:03:05,120 --> 00:03:10,640
maybe even days or weeks at least until

00:03:07,920 --> 00:03:12,800
you were all bored

00:03:10,640 --> 00:03:14,400
but as i started to explore the themes

00:03:12,800 --> 00:03:16,319
around upgrading i realized that there

00:03:14,400 --> 00:03:17,519
was a deeper story that i wanted to

00:03:16,319 --> 00:03:19,200
explore

00:03:17,519 --> 00:03:20,640
i started thinking about the following

00:03:19,200 --> 00:03:22,800
questions like

00:03:20,640 --> 00:03:25,200
how did we even end up so far behind

00:03:22,800 --> 00:03:27,200
morale's master in the first place

00:03:25,200 --> 00:03:29,840
what past decisions did we make in our

00:03:27,200 --> 00:03:32,000
code base that made upgrading harder

00:03:29,840 --> 00:03:33,599
what drove us to upgrade when we were so

00:03:32,000 --> 00:03:35,680
far behind

00:03:33,599 --> 00:03:36,799
and what does our future look like now

00:03:35,680 --> 00:03:40,080
that we've actually

00:03:36,799 --> 00:03:41,920
finished it the story i want to tell you

00:03:40,080 --> 00:03:44,000
is the story of the past present and

00:03:41,920 --> 00:03:45,599
future of rails at github

00:03:44,000 --> 00:03:47,280
we've been using rails at github since

00:03:45,599 --> 00:03:48,640
day one and at times

00:03:47,280 --> 00:03:51,200
rails and github we've had our

00:03:48,640 --> 00:03:52,879
differences many years ago we forked

00:03:51,200 --> 00:03:53,599
rails and we practically wrote our own

00:03:52,879 --> 00:03:55,760
version

00:03:53,599 --> 00:03:57,200
we fought against the framework we

00:03:55,760 --> 00:03:59,200
deviated from the framework

00:03:57,200 --> 00:04:01,360
and we even wondered if rails was right

00:03:59,200 --> 00:04:03,519
for us at all

00:04:01,360 --> 00:04:05,519
but at the end of the day github is

00:04:03,519 --> 00:04:06,720
successful because of rails and rails is

00:04:05,519 --> 00:04:09,840
successful because of

00:04:06,720 --> 00:04:12,840
github our upgrade didn't just make for

00:04:09,840 --> 00:04:15,760
a good blog post for hacker news to

00:04:12,840 --> 00:04:17,759
criticize

00:04:15,760 --> 00:04:18,880
the rails upgrade made it possible for

00:04:17,759 --> 00:04:21,280
us to use and

00:04:18,880 --> 00:04:22,960
invest in rails so that we can continue

00:04:21,280 --> 00:04:24,479
using it for the long haul

00:04:22,960 --> 00:04:26,160
we can change and influence the

00:04:24,479 --> 00:04:28,080
framework for our needs

00:04:26,160 --> 00:04:29,759
while also benefiting the broader rails

00:04:28,080 --> 00:04:32,320
community

00:04:29,759 --> 00:04:34,240
this story is part historical we'll look

00:04:32,320 --> 00:04:36,240
back at the beginning

00:04:34,240 --> 00:04:38,720
to how github ended up maintaining a

00:04:36,240 --> 00:04:40,639
custom fork of rails 2.

00:04:38,720 --> 00:04:42,000
it's also part technical exploring what

00:04:40,639 --> 00:04:46,160
compelled us to upgrade

00:04:42,000 --> 00:04:48,080
our process and why it was so difficult

00:04:46,160 --> 00:04:49,919
we'll look at the costs of not upgrading

00:04:48,080 --> 00:04:51,600
and how it causes technical debt to

00:04:49,919 --> 00:04:53,120
accumulate until your application and

00:04:51,600 --> 00:04:54,639
framework start to work against each

00:04:53,120 --> 00:04:56,639
other

00:04:54,639 --> 00:04:58,880
and lastly this story is part forward

00:04:56,639 --> 00:05:00,639
looking we'll dive into our effort at

00:04:58,880 --> 00:05:03,120
github to clean up technical debt

00:05:00,639 --> 00:05:05,360
our commitment to open source and our

00:05:03,120 --> 00:05:07,919
responsibility to support rails

00:05:05,360 --> 00:05:10,160
for the long haul but first let's go

00:05:07,919 --> 00:05:13,120
back in time to the beginning

00:05:10,160 --> 00:05:15,280
in 2004 dhh announced a new ruby

00:05:13,120 --> 00:05:16,960
framework called ruby on rails

00:05:15,280 --> 00:05:18,639
immediately rails caught the attention

00:05:16,960 --> 00:05:20,960
of the ruby community

00:05:18,639 --> 00:05:22,000
at ruby conf that year dhh talked about

00:05:20,960 --> 00:05:24,720
rails history

00:05:22,000 --> 00:05:28,000
how it came to be and of course why it's

00:05:24,720 --> 00:05:30,080
better than existing ruby frameworks

00:05:28,000 --> 00:05:31,680
he went on to talk about his philosophy

00:05:30,080 --> 00:05:33,039
in building the framework most notably

00:05:31,680 --> 00:05:34,720
that many frameworks fail because

00:05:33,039 --> 00:05:35,840
they're built without an application in

00:05:34,720 --> 00:05:36,800
mind

00:05:35,840 --> 00:05:38,720
he said that frameworks are

00:05:36,800 --> 00:05:39,120
retrospectives they should be extracted

00:05:38,720 --> 00:05:41,440
not

00:05:39,120 --> 00:05:42,800
built rails was attractive and

00:05:41,440 --> 00:05:44,960
successful because it was

00:05:42,800 --> 00:05:46,880
extracted from a real application

00:05:44,960 --> 00:05:48,560
basecamp

00:05:46,880 --> 00:05:51,039
in the early years rail's complexity

00:05:48,560 --> 00:05:53,919
grew slowly and rails 1.0 was released

00:05:51,039 --> 00:05:55,759
in december of 2005. two years later

00:05:53,919 --> 00:05:58,000
rails 1.2 was released

00:05:55,759 --> 00:05:59,680
that same year tom preston warner was at

00:05:58,000 --> 00:06:00,960
a ruby meetup in san francisco

00:05:59,680 --> 00:06:03,600
when he showed his friend chris

00:06:00,960 --> 00:06:05,680
wainswrath a tool called grit

00:06:03,600 --> 00:06:07,280
grit was a ruby tool that allowed you to

00:06:05,680 --> 00:06:08,800
view git repositories in an

00:06:07,280 --> 00:06:10,319
object-oriented way

00:06:08,800 --> 00:06:12,960
it would become the basis for git

00:06:10,319 --> 00:06:14,880
repositories on github

00:06:12,960 --> 00:06:17,039
after seeing grit chris was immediately

00:06:14,880 --> 00:06:19,120
hooked and a few days later the github

00:06:17,039 --> 00:06:21,919
rails application was born

00:06:19,120 --> 00:06:23,600
it was created using rails 1.2.3 and

00:06:21,919 --> 00:06:24,319
after a short beta github was launched

00:06:23,600 --> 00:06:27,199
to the public

00:06:24,319 --> 00:06:31,199
in april of 2008. the next day rails

00:06:27,199 --> 00:06:31,199
moved their own svn server to github

00:06:31,680 --> 00:06:36,560
in 2009 rails 2.3 was released

00:06:34,960 --> 00:06:38,240
in the early days when rails would

00:06:36,560 --> 00:06:40,080
release a new version github would

00:06:38,240 --> 00:06:42,400
quickly upgrade to get new features and

00:06:40,080 --> 00:06:44,800
bug fixes and they were so excited

00:06:42,400 --> 00:06:47,440
but sometime between 2008 and 2009

00:06:44,800 --> 00:06:49,440
github had forked rails

00:06:47,440 --> 00:06:50,880
i couldn't find an exact date because

00:06:49,440 --> 00:06:52,720
we've entered our gems and

00:06:50,880 --> 00:06:54,560
there wasn't any commits that made it

00:06:52,720 --> 00:06:56,800
clear exactly when we forked

00:06:54,560 --> 00:06:58,240
but it was sometime between these two

00:06:56,800 --> 00:06:59,919
years

00:06:58,240 --> 00:07:02,000
i had personally always thought that

00:06:59,919 --> 00:07:03,520
github had forked rails because rails 30

00:07:02,000 --> 00:07:05,039
was known to be very slow

00:07:03,520 --> 00:07:07,039
slow enough that many applications

00:07:05,039 --> 00:07:08,639
actually couldn't upgrade either

00:07:07,039 --> 00:07:11,759
but it turns out that we forked rails

00:07:08,639 --> 00:07:14,080
long before that was ever a problem

00:07:11,759 --> 00:07:17,120
now remember this is the wild west of

00:07:14,080 --> 00:07:19,280
rails startups

00:07:17,120 --> 00:07:21,280
no one really knew what the future of

00:07:19,280 --> 00:07:22,639
rails or github was going to be

00:07:21,280 --> 00:07:24,400
we weren't yet talking about the

00:07:22,639 --> 00:07:26,479
importance of upgrades or staying

00:07:24,400 --> 00:07:28,639
current with rail's master

00:07:26,479 --> 00:07:30,560
and honestly rel's just wasn't as stable

00:07:28,639 --> 00:07:32,720
as it is today

00:07:30,560 --> 00:07:34,560
i don't want to go so far as to say that

00:07:32,720 --> 00:07:36,240
rails didn't care about performance or

00:07:34,560 --> 00:07:38,400
stability at this time

00:07:36,240 --> 00:07:40,400
but certainly a lot of developers felt

00:07:38,400 --> 00:07:41,840
that way

00:07:40,400 --> 00:07:43,919
it definitely wasn't a concern the way

00:07:41,840 --> 00:07:46,960
it is today we work really hard now to

00:07:43,919 --> 00:07:48,400
make sure that we're not breaking apps

00:07:46,960 --> 00:07:50,160
maybe it was because we were all kind of

00:07:48,400 --> 00:07:51,840
inexperienced back then

00:07:50,160 --> 00:07:53,520
or maybe it was because rails was good

00:07:51,840 --> 00:07:54,879
enough for its most important user

00:07:53,520 --> 00:07:57,280
basecamp

00:07:54,879 --> 00:07:58,000
or maybe it was because we github didn't

00:07:57,280 --> 00:08:00,720
contribute enough

00:07:58,000 --> 00:08:02,319
upstream i don't really know but i'm

00:08:00,720 --> 00:08:03,840
also not criticizing the past

00:08:02,319 --> 00:08:05,440
it's important to understand what

00:08:03,840 --> 00:08:08,479
happened then so that we can avoid

00:08:05,440 --> 00:08:10,240
these things in the future the problem

00:08:08,479 --> 00:08:11,759
was that github didn't just fork rails

00:08:10,240 --> 00:08:12,800
and add a bug fix here performance

00:08:11,759 --> 00:08:15,199
improvement there

00:08:12,800 --> 00:08:16,639
it wasn't just a fork with back ports

00:08:15,199 --> 00:08:19,120
from upstream

00:08:16,639 --> 00:08:20,479
github's fork was rails with custom code

00:08:19,120 --> 00:08:22,160
just for github

00:08:20,479 --> 00:08:23,840
it was rails morphed into a different

00:08:22,160 --> 00:08:24,479
framework that was built for github the

00:08:23,840 --> 00:08:27,759
way

00:08:24,479 --> 00:08:29,360
rails was built for base cam as github

00:08:27,759 --> 00:08:30,800
doubled down on their fork and added

00:08:29,360 --> 00:08:32,800
more and more functionality

00:08:30,800 --> 00:08:34,399
rails continued to progress at a fast

00:08:32,800 --> 00:08:36,399
pace as well

00:08:34,399 --> 00:08:38,240
at the time no one could predict or

00:08:36,399 --> 00:08:40,000
understand the cost that forking rails

00:08:38,240 --> 00:08:44,399
would have on the github application or

00:08:40,000 --> 00:08:46,240
engineering team in 2010 rails 3.0 was

00:08:44,399 --> 00:08:49,120
released but many applications couldn't

00:08:46,240 --> 00:08:50,880
upgrade due to performance concerns

00:08:49,120 --> 00:08:53,040
these performance issues in 3-0 were a

00:08:50,880 --> 00:08:55,200
big deal users saw an

00:08:53,040 --> 00:08:56,959
unacceptable increase in response times

00:08:55,200 --> 00:08:59,839
some applications seeing requests

00:08:56,959 --> 00:09:01,839
taking as much as twice as long active

00:08:59,839 --> 00:09:05,200
record in rails 3 was found to be 5

00:09:01,839 --> 00:09:06,640
times slower than rails 2. despite

00:09:05,200 --> 00:09:08,080
knowing about these performance concerns

00:09:06,640 --> 00:09:10,640
an engineer at github

00:09:08,080 --> 00:09:11,279
started working on upgrading github from

00:09:10,640 --> 00:09:14,160
rails

00:09:11,279 --> 00:09:17,440
three uh rails two to three and also

00:09:14,160 --> 00:09:20,000
working on upgrading ruby to one nine

00:09:17,440 --> 00:09:23,839
see github didn't just fork rails uh we

00:09:20,000 --> 00:09:23,839
also forked ruby

00:09:24,560 --> 00:09:28,959
so that makes upgrades really pretty

00:09:26,480 --> 00:09:28,959
difficult

00:09:29,440 --> 00:09:36,000
we don't have that problem anymore it's

00:09:32,800 --> 00:09:38,480
gone the rails 3 upgrade

00:09:36,000 --> 00:09:39,120
wasn't pointing at rails 3 upstream

00:09:38,480 --> 00:09:41,279
either

00:09:39,120 --> 00:09:43,680
it was still a fork with github's custom

00:09:41,279 --> 00:09:45,440
patches added on top

00:09:43,680 --> 00:09:47,040
from experience i can tell you that

00:09:45,440 --> 00:09:48,160
while that maintaining a fork while

00:09:47,040 --> 00:09:50,080
you're trying to upgrade and then having

00:09:48,160 --> 00:09:50,480
to add all of that stuff from your last

00:09:50,080 --> 00:09:52,160
fork

00:09:50,480 --> 00:09:55,200
on top of your new fork is enough to

00:09:52,160 --> 00:09:58,320
make someone want to quit programming

00:09:55,200 --> 00:09:58,320
and i don't recommend it

00:09:59,120 --> 00:10:03,519
in 2012 rails 3.2 was released and most

00:10:01,920 --> 00:10:05,200
of the performance concerns

00:10:03,519 --> 00:10:06,399
had been fixed in rails have been fixed

00:10:05,200 --> 00:10:08,079
by aaron patterson and other

00:10:06,399 --> 00:10:09,920
contributors

00:10:08,079 --> 00:10:11,360
in the same year the performance issues

00:10:09,920 --> 00:10:12,880
were fixed github's progress on the

00:10:11,360 --> 00:10:14,640
rails upgrades stalled

00:10:12,880 --> 00:10:16,959
it had been two years since they started

00:10:14,640 --> 00:10:18,000
the 30 upgrade and the engineering team

00:10:16,959 --> 00:10:20,320
began questioning whether

00:10:18,000 --> 00:10:21,760
the effort was worth it at all they

00:10:20,320 --> 00:10:23,279
asked each other

00:10:21,760 --> 00:10:25,680
why upgrade when this version isn't

00:10:23,279 --> 00:10:28,000
causing us any pain

00:10:25,680 --> 00:10:29,519
why upgrading rails 3-0 isn't so great

00:10:28,000 --> 00:10:32,800
all those performance concerns

00:10:29,519 --> 00:10:33,920
are concerns as well why upgrade when

00:10:32,800 --> 00:10:35,600
this fork just

00:10:33,920 --> 00:10:37,279
does this fork has more features than

00:10:35,600 --> 00:10:38,399
rails upstream

00:10:37,279 --> 00:10:40,000
looking at these questions the

00:10:38,399 --> 00:10:41,680
engineering team decided the upgrade

00:10:40,000 --> 00:10:43,360
wasn't worth their effort

00:10:41,680 --> 00:10:45,120
and focused their attention on other

00:10:43,360 --> 00:10:47,760
projects

00:10:45,120 --> 00:10:48,399
the truth is that at this time github

00:10:47,760 --> 00:10:51,120
wasn't yet

00:10:48,399 --> 00:10:52,800
feeling how painful being on a fork was

00:10:51,120 --> 00:10:53,360
and it's difficult to convince a team to

00:10:52,800 --> 00:10:55,760
upgrade

00:10:53,360 --> 00:10:57,600
when they're still feeling productive

00:10:55,760 --> 00:10:59,440
you make your tests faster when they

00:10:57,600 --> 00:11:00,640
feel too slow and ci is blocking you

00:10:59,440 --> 00:11:02,240
from deploying

00:11:00,640 --> 00:11:03,440
you refactor the complexity of that

00:11:02,240 --> 00:11:04,720
class when you need to add new

00:11:03,440 --> 00:11:07,519
functionality

00:11:04,720 --> 00:11:08,880
but when do you upgrade what's the

00:11:07,519 --> 00:11:11,279
incentive if the new version

00:11:08,880 --> 00:11:15,839
isn't better enough and your fork is

00:11:11,279 --> 00:11:15,839
just fine

00:11:16,640 --> 00:11:19,920
if you're not feeling the pain of being

00:11:18,000 --> 00:11:21,440
on a fork or an old version

00:11:19,920 --> 00:11:23,279
you're just not going to be compelled to

00:11:21,440 --> 00:11:25,120
upgrade

00:11:23,279 --> 00:11:26,880
eventually though all of these why

00:11:25,120 --> 00:11:28,720
should we upgrade questions would become

00:11:26,880 --> 00:11:29,360
suffocating for github's engineering

00:11:28,720 --> 00:11:31,200
team

00:11:29,360 --> 00:11:32,640
it became harder and harder to find

00:11:31,200 --> 00:11:33,760
where the framework ended and the

00:11:32,640 --> 00:11:35,600
application began

00:11:33,760 --> 00:11:37,760
as github engineers began fighting

00:11:35,600 --> 00:11:39,760
against the fork and their application

00:11:37,760 --> 00:11:40,959
security back ports were a nightmare

00:11:39,760 --> 00:11:42,880
each time rails announced a

00:11:40,959 --> 00:11:44,320
vulnerability github was forced to patch

00:11:42,880 --> 00:11:45,760
it manually

00:11:44,320 --> 00:11:47,440
hiring was becoming increasingly

00:11:45,760 --> 00:11:49,120
difficult nobody wanted to work on a

00:11:47,440 --> 00:11:51,600
rails 2-3 application that

00:11:49,120 --> 00:11:53,279
doesn't even resemble rails 2 it's

00:11:51,600 --> 00:11:54,839
harder to get up to speed and you can't

00:11:53,279 --> 00:11:57,519
google search how to do

00:11:54,839 --> 00:11:59,519
anything dependencies were brittle and

00:11:57,519 --> 00:12:01,200
unsupported as gem authors focused on

00:11:59,519 --> 00:12:02,639
new versions of rails and abandoned the

00:12:01,200 --> 00:12:04,720
old ones

00:12:02,639 --> 00:12:06,320
development was slow and painful working

00:12:04,720 --> 00:12:07,440
with an application that is tied so

00:12:06,320 --> 00:12:09,040
heavily to a custom

00:12:07,440 --> 00:12:12,320
fork can make adding features where

00:12:09,040 --> 00:12:14,240
factoring code increasingly difficult

00:12:12,320 --> 00:12:15,680
we realized that we needed to upgrade

00:12:14,240 --> 00:12:18,240
and get off a fork or that fork was

00:12:15,680 --> 00:12:20,560
going to suffocate the application

00:12:18,240 --> 00:12:22,800
in 2014 a team of four full-time

00:12:20,560 --> 00:12:23,279
engineers and a few volunteers banded

00:12:22,800 --> 00:12:25,920
together

00:12:23,279 --> 00:12:27,920
wrote an upgrade plan and got to work it

00:12:25,920 --> 00:12:29,760
took that team six months of full-time

00:12:27,920 --> 00:12:31,839
coordinated effort to deploy

00:12:29,760 --> 00:12:35,440
rails 3-0 to production and a few months

00:12:31,839 --> 00:12:36,800
later rails 3-2 was deployed as well

00:12:35,440 --> 00:12:38,959
it's important to remember though that

00:12:36,800 --> 00:12:41,680
here 30 and 32 are still a fork with

00:12:38,959 --> 00:12:44,079
github custom patches added on top

00:12:41,680 --> 00:12:45,519
by the time the rails 3 series by this

00:12:44,079 --> 00:12:47,920
time the rails 3 series was

00:12:45,519 --> 00:12:50,160
only receiving severe security patches

00:12:47,920 --> 00:12:52,480
so even though the upgrade was a success

00:12:50,160 --> 00:12:54,480
the code base was still very very far

00:12:52,480 --> 00:12:56,399
behind

00:12:54,480 --> 00:12:58,800
the effort putting into upgrading from

00:12:56,399 --> 00:13:00,639
2-3 to 3-2 was massive and motivation

00:12:58,800 --> 00:13:02,560
dwindled after that

00:13:00,639 --> 00:13:04,839
it would be another two years before the

00:13:02,560 --> 00:13:07,519
rails 40 upgrade was even

00:13:04,839 --> 00:13:09,680
started that same year rails five came

00:13:07,519 --> 00:13:09,680
out

00:13:11,360 --> 00:13:15,360
i'm sure to summit felt like github just

00:13:13,680 --> 00:13:16,079
was never gonna catch up if rails was

00:13:15,360 --> 00:13:19,600
constantly

00:13:16,079 --> 00:13:23,680
improving and releasing new versions

00:13:19,600 --> 00:13:23,680
in 2017 i joined github

00:13:25,519 --> 00:13:29,279
at this point the rels 40 upgrade was

00:13:27,839 --> 00:13:31,279
not in a good place

00:13:29,279 --> 00:13:33,040
there was no dedicated team working on

00:13:31,279 --> 00:13:34,880
it and the upgrade had fallen by the

00:13:33,040 --> 00:13:37,600
wayside it was something that

00:13:34,880 --> 00:13:38,560
people worked on when they had an extra

00:13:37,600 --> 00:13:40,320
hour or two

00:13:38,560 --> 00:13:43,680
not something where anyone was

00:13:40,320 --> 00:13:46,240
dedicating any efforts to

00:13:43,680 --> 00:13:47,040
so on my first day i asked hubot our

00:13:46,240 --> 00:13:49,279
little bot that

00:13:47,040 --> 00:13:51,199
runs tests for us i said hey hubot why

00:13:49,279 --> 00:13:52,320
don't you tell me how bad rails 400 is

00:13:51,199 --> 00:13:53,839
right now

00:13:52,320 --> 00:13:56,320
and so i asked you about hey run the

00:13:53,839 --> 00:13:58,720
tests and there were over four thousand

00:13:56,320 --> 00:13:58,720
errors

00:13:59,199 --> 00:14:02,480
luckily hubot can't count and it's more

00:14:01,279 --> 00:14:05,120
like 2500

00:14:02,480 --> 00:14:05,120
easy right

00:14:06,480 --> 00:14:09,920
luckily for me after the rails 3-0

00:14:08,560 --> 00:14:12,160
upgrade github engineers

00:14:09,920 --> 00:14:13,519
had added some tooling that made rails

00:14:12,160 --> 00:14:15,440
upgrades easier

00:14:13,519 --> 00:14:16,959
so that they should theoretically take

00:14:15,440 --> 00:14:18,560
less time

00:14:16,959 --> 00:14:20,079
we had a system that allowed us to boot

00:14:18,560 --> 00:14:20,800
the application in multiple rails

00:14:20,079 --> 00:14:21,839
versions

00:14:20,800 --> 00:14:24,240
this means that we don't need to

00:14:21,839 --> 00:14:25,680
maintain long-running branches

00:14:24,240 --> 00:14:28,800
long-running upgrade branches and can

00:14:25,680 --> 00:14:30,560
work merge into master when we're ready

00:14:28,800 --> 00:14:32,560
by adding the ability to dual boot the

00:14:30,560 --> 00:14:35,040
application we could focus only on test

00:14:32,560 --> 00:14:36,880
failures instead of merge conflicts

00:14:35,040 --> 00:14:38,320
unfortunately this method requires us to

00:14:36,880 --> 00:14:40,079
hack bundler because bundler doesn't

00:14:38,320 --> 00:14:40,720
support multiple gen files and dual

00:14:40,079 --> 00:14:43,120
booting

00:14:40,720 --> 00:14:45,839
but i'd rather monkey patch bundler than

00:14:43,120 --> 00:14:45,839
fork rails

00:14:46,720 --> 00:14:49,760
with this method we're able to boot the

00:14:48,399 --> 00:14:52,320
server console

00:14:49,760 --> 00:14:53,040
and run tests in multiple rails versions

00:14:52,320 --> 00:14:54,800
which make it

00:14:53,040 --> 00:14:56,320
makes it easy to compare and contrast

00:14:54,800 --> 00:14:57,600
behavior between the version that's in

00:14:56,320 --> 00:14:58,160
production and the version that we're

00:14:57,600 --> 00:15:00,399
upgrading

00:14:58,160 --> 00:15:00,399
to

00:15:01,440 --> 00:15:05,440
this process allows us to incrementally

00:15:03,680 --> 00:15:08,079
upgrade rails over time

00:15:05,440 --> 00:15:09,920
and also helps us prevent regressions

00:15:08,079 --> 00:15:12,320
once we have an upgraded version

00:15:09,920 --> 00:15:13,920
so when rails40 was green we made sure

00:15:12,320 --> 00:15:16,480
that everyone at github had to write

00:15:13,920 --> 00:15:18,560
code that passed in 3 2 and 4 0.

00:15:16,480 --> 00:15:20,000
and then when 4 1 was green we'd swap

00:15:18,560 --> 00:15:21,760
out the build and make sure that

00:15:20,000 --> 00:15:22,560
everyone wrote code that passed in 3 2

00:15:21,760 --> 00:15:24,240
and 4 1

00:15:22,560 --> 00:15:25,680
and we did this for every single version

00:15:24,240 --> 00:15:28,639
until we had 5 2

00:15:25,680 --> 00:15:30,079
and rails master in the application code

00:15:28,639 --> 00:15:31,519
we used helper methods to easily

00:15:30,079 --> 00:15:32,399
condition for the different rails

00:15:31,519 --> 00:15:34,079
versions

00:15:32,399 --> 00:15:36,320
we always put the production version in

00:15:34,079 --> 00:15:37,360
the elf else in the if clause not the

00:15:36,320 --> 00:15:40,639
elf clause

00:15:37,360 --> 00:15:41,360
the if clause and all future code in the

00:15:40,639 --> 00:15:43,759
else

00:15:41,360 --> 00:15:46,320
that way when we upgrade to 4-2 we don't

00:15:43,759 --> 00:15:47,759
accidentally fall into the 3-2 branch of

00:15:46,320 --> 00:15:50,320
the code

00:15:47,759 --> 00:15:51,920
in march of 2018 a year and three months

00:15:50,320 --> 00:15:53,759
after i started working at github we

00:15:51,920 --> 00:15:57,680
deployed rails 4-2 to production with

00:15:53,759 --> 00:15:57,680
zero downtime and no customer impact

00:15:57,760 --> 00:16:06,800
[Applause]

00:16:05,040 --> 00:16:08,880
after deploying fortune production we

00:16:06,800 --> 00:16:10,959
immediately started the rails 5 upgrade

00:16:08,880 --> 00:16:13,120
but this time with a larger team

00:16:10,959 --> 00:16:15,040
for the 5 series i led a team of 4

00:16:13,120 --> 00:16:16,959
full-time engineers and utilized

00:16:15,040 --> 00:16:19,120
github's projects and issues to make the

00:16:16,959 --> 00:16:20,880
work easier to divvy up

00:16:19,120 --> 00:16:22,240
because we had a dedicated team in a

00:16:20,880 --> 00:16:24,560
streamlined process

00:16:22,240 --> 00:16:27,040
the upgrade from 42 to 5.2 took only

00:16:24,560 --> 00:16:29,199
five months and in august of 2018 we

00:16:27,040 --> 00:16:31,199
deployed rails 52 to production

00:16:29,199 --> 00:16:32,320
also with zero downtime and no customer

00:16:31,199 --> 00:16:34,560
impact

00:16:32,320 --> 00:16:36,880
we learned a lot from our 4-2 deploy so

00:16:34,560 --> 00:16:37,279
we were way less nervous deploying 5-2 i

00:16:36,880 --> 00:16:39,120
think

00:16:37,279 --> 00:16:41,440
4-2 probably took us three or four

00:16:39,120 --> 00:16:43,279
months to actually deploy it whereas 5-2

00:16:41,440 --> 00:16:44,560
was maybe one month

00:16:43,279 --> 00:16:46,000
sometimes you might hear me complain

00:16:44,560 --> 00:16:49,279
about our test suite but it actually

00:16:46,000 --> 00:16:49,279
isn't that bad for upgrades

00:16:49,680 --> 00:16:55,680
this is this was a huge milestone

00:16:53,279 --> 00:16:57,600
it was the first time in 10 years 10

00:16:55,680 --> 00:16:58,639
years that github wasn't on a fork of

00:16:57,600 --> 00:17:00,399
rails

00:16:58,639 --> 00:17:02,480
it was the first time in 10 years that

00:17:00,399 --> 00:17:03,680
github was on the most recent version of

00:17:02,480 --> 00:17:05,919
rails

00:17:03,680 --> 00:17:08,400
that's 10 years of cumulative technical

00:17:05,919 --> 00:17:10,319
debt and 10 years of fighting our fork

00:17:08,400 --> 00:17:12,000
in our application

00:17:10,319 --> 00:17:14,720
and we finally had started to pay that

00:17:12,000 --> 00:17:16,559
debt off by upgrading we don't eliminate

00:17:14,720 --> 00:17:18,480
technical debt but it creates breathing

00:17:16,559 --> 00:17:21,520
room in your application that

00:17:18,480 --> 00:17:23,120
we just didn't have in a decade i hope

00:17:21,520 --> 00:17:25,839
that learning about our upgrade hasn't

00:17:23,120 --> 00:17:27,520
scared you into not doing your own

00:17:25,839 --> 00:17:29,600
the point of this talk is not to tell

00:17:27,520 --> 00:17:31,520
horror stories it's to show you that

00:17:29,600 --> 00:17:33,679
there's a cost to not upgrading and that

00:17:31,520 --> 00:17:35,760
cost is cumulative

00:17:33,679 --> 00:17:37,600
after hearing about the rails upgrade at

00:17:35,760 --> 00:17:38,080
github i've had engineers come to me and

00:17:37,600 --> 00:17:40,240
ask me

00:17:38,080 --> 00:17:42,000
how can i convince my leadership team to

00:17:40,240 --> 00:17:43,440
prioritize an upgrade

00:17:42,000 --> 00:17:45,600
they don't have the resources or it's

00:17:43,440 --> 00:17:47,039
not in their roadmap it's not a priority

00:17:45,600 --> 00:17:48,480
or the company thinks it'll be too

00:17:47,039 --> 00:17:50,559
expensive

00:17:48,480 --> 00:17:51,760
it's true that upgrading is expensive

00:17:50,559 --> 00:17:53,280
and time consuming

00:17:51,760 --> 00:17:55,760
i'm not going to lie to you and tell you

00:17:53,280 --> 00:17:56,240
otherwise but it's a lot easier to say

00:17:55,760 --> 00:17:58,320
that this

00:17:56,240 --> 00:18:00,080
upgrade will need x number of engineers

00:17:58,320 --> 00:18:02,240
at y number of dollars for z

00:18:00,080 --> 00:18:03,840
number of hours you can actually

00:18:02,240 --> 00:18:05,840
calculate and measure that cost and

00:18:03,840 --> 00:18:07,360
decide whether or not it's too expensive

00:18:05,840 --> 00:18:09,120
or not

00:18:07,360 --> 00:18:10,880
but at the end of the day it doesn't

00:18:09,120 --> 00:18:12,720
matter how expensive upgrading your

00:18:10,880 --> 00:18:15,919
application will be because the cost of

00:18:12,720 --> 00:18:17,520
not upgrading is immeasurable

00:18:15,919 --> 00:18:19,840
not upgrading your application will

00:18:17,520 --> 00:18:20,720
eventually cost more than any upgrade

00:18:19,840 --> 00:18:23,280
because of the debt

00:18:20,720 --> 00:18:24,720
that accumulates when you don't upgrade

00:18:23,280 --> 00:18:25,760
rails you have to become a security

00:18:24,720 --> 00:18:27,360
expert

00:18:25,760 --> 00:18:29,360
the rails core team only supports

00:18:27,360 --> 00:18:30,799
patching security vulnerabilities in the

00:18:29,360 --> 00:18:32,400
major current version in the major

00:18:30,799 --> 00:18:34,160
versions of the previous version

00:18:32,400 --> 00:18:37,120
which means that as soon as we release

00:18:34,160 --> 00:18:38,559
rel 6 4 2 is no longer supported

00:18:37,120 --> 00:18:41,120
and i know a lot of you in this room are

00:18:38,559 --> 00:18:42,960
still using 42.

00:18:41,120 --> 00:18:44,080
if you're using rails 42 or lower your

00:18:42,960 --> 00:18:45,520
team is going to end up being

00:18:44,080 --> 00:18:46,799
responsible for

00:18:45,520 --> 00:18:48,720
understanding and patching those

00:18:46,799 --> 00:18:50,400
vulnerabilities yourself it's

00:18:48,720 --> 00:18:52,240
very hard to get this right because on

00:18:50,400 --> 00:18:54,240
the rail security team we don't tell you

00:18:52,240 --> 00:18:57,360
how to exploit the vulnerability

00:18:54,240 --> 00:18:59,120
or at least we try not to

00:18:57,360 --> 00:19:00,400
not upgrading requires you to become a

00:18:59,120 --> 00:19:02,240
security expert

00:19:00,400 --> 00:19:04,000
and for you you and your team to

00:19:02,240 --> 00:19:07,120
manually patch vulnerabilities

00:19:04,000 --> 00:19:08,559
if you're on an old version when you

00:19:07,120 --> 00:19:09,120
upgrade rails you lose out on great

00:19:08,559 --> 00:19:11,440
talent

00:19:09,120 --> 00:19:13,679
boot camp grads college grads career

00:19:11,440 --> 00:19:14,480
changers all kinds of new engineers that

00:19:13,679 --> 00:19:16,559
you're hiring

00:19:14,480 --> 00:19:17,840
aren't learning rails 2-3 and they're

00:19:16,559 --> 00:19:20,480
definitely not learning your weird

00:19:17,840 --> 00:19:22,080
custom fork

00:19:20,480 --> 00:19:23,600
those engineers not only don't want to

00:19:22,080 --> 00:19:25,360
work on an old version they just don't

00:19:23,600 --> 00:19:25,840
even have the skill or knowledge of how

00:19:25,360 --> 00:19:28,160
it even

00:19:25,840 --> 00:19:29,919
worked engineers will turn on the

00:19:28,160 --> 00:19:31,360
opportunity to work for you if you're on

00:19:29,919 --> 00:19:32,880
an old version because

00:19:31,360 --> 00:19:35,120
it doesn't let them contribute to open

00:19:32,880 --> 00:19:38,960
source it's no longer googleable

00:19:35,120 --> 00:19:40,640
and it's 10 years old

00:19:38,960 --> 00:19:42,480
when you don't upgrade some of the gems

00:19:40,640 --> 00:19:44,400
that you rely on will get deprecated

00:19:42,480 --> 00:19:48,000
and so you'll either have to live with

00:19:44,400 --> 00:19:50,559
bugs or fork yet another dependency

00:19:48,000 --> 00:19:51,280
new gems may not support old versions of

00:19:50,559 --> 00:19:52,960
rails so

00:19:51,280 --> 00:19:55,200
you won't be able to use those if you're

00:19:52,960 --> 00:19:57,520
on an old unsupported version

00:19:55,200 --> 00:20:00,320
this makes development a lot harder

00:19:57,520 --> 00:20:01,679
every choice in dependency becomes

00:20:00,320 --> 00:20:04,400
more and more difficult because you're

00:20:01,679 --> 00:20:06,080
so far behind maintaining old gems on

00:20:04,400 --> 00:20:09,039
top of your old framework is going to

00:20:06,080 --> 00:20:11,520
get tedious really quickly

00:20:09,039 --> 00:20:13,039
when you don't upgrade rails you end up

00:20:11,520 --> 00:20:14,960
building more and more infrastructure on

00:20:13,039 --> 00:20:16,640
top of your fragile application

00:20:14,960 --> 00:20:18,320
i've seen this firsthand at github we

00:20:16,640 --> 00:20:18,799
have tons of infrastructure code in our

00:20:18,320 --> 00:20:20,720
app

00:20:18,799 --> 00:20:22,480
multiple databases ci tooling our own

00:20:20,720 --> 00:20:24,799
job queue and honestly probably things i

00:20:22,480 --> 00:20:26,799
haven't found yet

00:20:24,799 --> 00:20:29,280
ideally your application would consist

00:20:26,799 --> 00:20:31,919
only of code that makes your product

00:20:29,280 --> 00:20:33,840
work or makes your products value

00:20:31,919 --> 00:20:35,360
github's value is not that we have

00:20:33,840 --> 00:20:38,640
multiple databases

00:20:35,360 --> 00:20:40,400
in rails our value is in our product our

00:20:38,640 --> 00:20:42,640
issues our pull requests our repos our

00:20:40,400 --> 00:20:44,240
community multiple databases

00:20:42,640 --> 00:20:46,080
allows us to keep our application up and

00:20:44,240 --> 00:20:50,400
running but it's not why all of you

00:20:46,080 --> 00:20:50,400
here are using it at least i hope not

00:20:50,960 --> 00:20:54,720
this infrastructure code makes

00:20:52,400 --> 00:20:56,640
development more painful because of how

00:20:54,720 --> 00:20:58,000
tightly it couples your application to

00:20:56,640 --> 00:21:00,000
rails internals

00:20:58,000 --> 00:21:01,840
minor changes can turn into massive

00:21:00,000 --> 00:21:05,440
refactorings or abandoned projects

00:21:01,840 --> 00:21:06,400
altogether but the biggest cost of not

00:21:05,440 --> 00:21:08,080
upgrading rails

00:21:06,400 --> 00:21:11,840
is that someday someone is going to

00:21:08,080 --> 00:21:13,360
decide that using rails was a mistake

00:21:11,840 --> 00:21:17,840
and it's time to carve your application

00:21:13,360 --> 00:21:17,840
up into microservices

00:21:19,440 --> 00:21:22,480
now this isn't a language war talk i'm

00:21:21,520 --> 00:21:23,520
not interested in having that

00:21:22,480 --> 00:21:25,520
conversation

00:21:23,520 --> 00:21:27,280
i'm not criticizing go or how companies

00:21:25,520 --> 00:21:28,960
build their infrastructure

00:21:27,280 --> 00:21:31,600
but if you already have a monolith like

00:21:28,960 --> 00:21:34,559
just respect the monolith

00:21:31,600 --> 00:21:36,400
also we're at a ruby conference so i'm

00:21:34,559 --> 00:21:39,280
going to assume that you all at least

00:21:36,400 --> 00:21:41,039
like writing ruby

00:21:39,280 --> 00:21:42,960
it might seem like an exaggeration but

00:21:41,039 --> 00:21:45,039
if we don't upgrade rails we don't get

00:21:42,960 --> 00:21:47,039
to keep writing ruby

00:21:45,039 --> 00:21:48,720
the ruby ecosystem won't improve our

00:21:47,039 --> 00:21:50,720
applications will degrade and we'll be

00:21:48,720 --> 00:21:52,799
faced with an expensive rewrite

00:21:50,720 --> 00:21:54,640
and as matt said yesterday if ruby dies

00:21:52,799 --> 00:21:56,000
his family dies so by the transitive

00:21:54,640 --> 00:21:58,240
property

00:21:56,000 --> 00:22:00,560
if you don't upgrade rails max's family

00:21:58,240 --> 00:22:03,710
will die

00:22:00,560 --> 00:22:03,710
[Music]

00:22:09,039 --> 00:22:13,840
that's heavy it's heavy

00:22:13,919 --> 00:22:17,200
the key to upgrading rails is to

00:22:16,000 --> 00:22:19,280
incrementally pay

00:22:17,200 --> 00:22:21,360
off technical debt so that you've

00:22:19,280 --> 00:22:23,520
encouraged and figure out a plan to keep

00:22:21,360 --> 00:22:24,799
that debt paid down

00:22:23,520 --> 00:22:26,480
i'm not going to stand here and tell you

00:22:24,799 --> 00:22:28,240
the upgrading rails will be easy i will

00:22:26,480 --> 00:22:29,760
leave that to the person on hacker news

00:22:28,240 --> 00:22:32,159
who wondered why i couldn't do it in a

00:22:29,760 --> 00:22:32,159
weekend

00:22:33,520 --> 00:22:36,799
i must be so incompetent

00:22:36,880 --> 00:22:42,159
the upgrade did take a long time but it

00:22:39,760 --> 00:22:44,320
wasn't the only thing that we worked on

00:22:42,159 --> 00:22:46,559
i took time to delete unused features i

00:22:44,320 --> 00:22:48,559
rewrote our custom test framework

00:22:46,559 --> 00:22:50,720
i improved our database handling for

00:22:48,559 --> 00:22:52,960
development and test environments

00:22:50,720 --> 00:22:54,720
it's unfair for anyone to look at our

00:22:52,960 --> 00:22:58,320
upgrade timeline and decide

00:22:54,720 --> 00:23:00,159
that using rails is too expensive

00:22:58,320 --> 00:23:01,760
we made choices at github that made

00:23:00,159 --> 00:23:03,760
upgrading our application

00:23:01,760 --> 00:23:04,880
a lot harder and had it made it take

00:23:03,760 --> 00:23:06,159
many more years

00:23:04,880 --> 00:23:08,400
you have made choices in your

00:23:06,159 --> 00:23:10,960
application that have that will make

00:23:08,400 --> 00:23:13,200
uh your upgrade harder too but that

00:23:10,960 --> 00:23:15,280
doesn't mean that rails is a bad choice

00:23:13,200 --> 00:23:16,400
technical debt is real and you can write

00:23:15,280 --> 00:23:18,960
it in any

00:23:16,400 --> 00:23:20,559
language you and your team need to make

00:23:18,960 --> 00:23:22,320
decisions about what technical debt

00:23:20,559 --> 00:23:24,559
you're willing to accept

00:23:22,320 --> 00:23:26,400
at github we've decided that being

00:23:24,559 --> 00:23:28,000
behind rail's master is no longer

00:23:26,400 --> 00:23:30,000
technical debt that we're willing to put

00:23:28,000 --> 00:23:31,760
up with

00:23:30,000 --> 00:23:33,120
you can slowly work on technical debt

00:23:31,760 --> 00:23:35,360
and upgrade rails to get your

00:23:33,120 --> 00:23:36,640
application into a better place

00:23:35,360 --> 00:23:38,799
there are a few things that you should

00:23:36,640 --> 00:23:39,280
consider when upgrading and mistakes

00:23:38,799 --> 00:23:42,400
that you

00:23:39,280 --> 00:23:43,919
can avoid so that you avoid doing a two

00:23:42,400 --> 00:23:45,600
to seven year upgrade like we did at

00:23:43,919 --> 00:23:47,679
github

00:23:45,600 --> 00:23:49,600
the first most important step is to

00:23:47,679 --> 00:23:50,880
build out a team

00:23:49,600 --> 00:23:52,559
upgrades are really difficult and it

00:23:50,880 --> 00:23:54,559
helps to have a team that can support

00:23:52,559 --> 00:23:56,960
each other bounce ideas off of and make

00:23:54,559 --> 00:23:59,039
sure that momentum keeps up

00:23:56,960 --> 00:24:00,559
if you have a one person upgrade team

00:23:59,039 --> 00:24:02,080
and that person leaves the company

00:24:00,559 --> 00:24:04,480
your upgrade is going to be stalled or

00:24:02,080 --> 00:24:06,159
likely stopped altogether

00:24:04,480 --> 00:24:08,640
make sure to create redundancy when

00:24:06,159 --> 00:24:10,159
doing such a difficult task

00:24:08,640 --> 00:24:12,559
if you have a really small team and you

00:24:10,159 --> 00:24:13,520
just can't stop feature development to

00:24:12,559 --> 00:24:15,760
upgrade rails

00:24:13,520 --> 00:24:17,440
consider hiring a contracting firm to

00:24:15,760 --> 00:24:18,960
help you get out of the weeds

00:24:17,440 --> 00:24:21,200
it will be expensive but it's still

00:24:18,960 --> 00:24:23,039
cheaper than never upgrading

00:24:21,200 --> 00:24:24,640
this can also help you institute best

00:24:23,039 --> 00:24:27,520
practices so that you don't end up so

00:24:24,640 --> 00:24:29,200
far behind in the future

00:24:27,520 --> 00:24:31,279
another thing that makes upgrades easier

00:24:29,200 --> 00:24:32,880
is taking time to plan your upgrade

00:24:31,279 --> 00:24:34,480
your team should ask themselves do we

00:24:32,880 --> 00:24:35,600
want to upgrade incrementally from 3 2

00:24:34,480 --> 00:24:37,600
to 4 0 to 4 1

00:24:35,600 --> 00:24:39,440
or do we want to go straight from 3 2 5

00:24:37,600 --> 00:24:40,720
2. there are a lot of reasons why you

00:24:39,440 --> 00:24:42,080
might want to do one or the other so

00:24:40,720 --> 00:24:44,880
making those considerations with your

00:24:42,080 --> 00:24:47,760
team is really important

00:24:44,880 --> 00:24:49,440
um you can also make upgrades easier by

00:24:47,760 --> 00:24:51,520
fixing deprecation warnings

00:24:49,440 --> 00:24:52,799
early instead of ignoring them to take

00:24:51,520 --> 00:24:54,960
care for the next version consider

00:24:52,799 --> 00:24:57,279
fixing them as soon as you see them

00:24:54,960 --> 00:24:59,039
some deprecations are related to major

00:24:57,279 --> 00:25:00,559
changes so they can block your

00:24:59,039 --> 00:25:02,080
application from booting until they're

00:25:00,559 --> 00:25:04,000
fixed

00:25:02,080 --> 00:25:05,200
one example is the deprecation of alias

00:25:04,000 --> 00:25:07,039
method chain

00:25:05,200 --> 00:25:08,240
that is going to block your application

00:25:07,039 --> 00:25:09,919
from booting until you fix

00:25:08,240 --> 00:25:12,000
all of them and so then that way you can

00:25:09,919 --> 00:25:13,520
actually work in parallel with your team

00:25:12,000 --> 00:25:15,039
to upgrade faster

00:25:13,520 --> 00:25:17,760
so it's really important to fix these

00:25:15,039 --> 00:25:18,480
early and once you've upgraded the most

00:25:17,760 --> 00:25:20,880
recent version

00:25:18,480 --> 00:25:21,760
make a plan for the future how often

00:25:20,880 --> 00:25:25,360
will your team

00:25:21,760 --> 00:25:27,440
upgrade rails later on or in the future

00:25:25,360 --> 00:25:29,120
are you willing to test new releases of

00:25:27,440 --> 00:25:30,320
rails in the beta or release candidate

00:25:29,120 --> 00:25:32,159
phase

00:25:30,320 --> 00:25:33,919
this helps make upgrades smoother for

00:25:32,159 --> 00:25:35,679
you and everyone else because then you

00:25:33,919 --> 00:25:37,919
can tell the rails team what was hard

00:25:35,679 --> 00:25:39,919
plus you're changing your application as

00:25:37,919 --> 00:25:42,799
rails changes and it's a lot easier to

00:25:39,919 --> 00:25:44,080
debug those than six years later

00:25:42,799 --> 00:25:46,000
if you can't run rails master in

00:25:44,080 --> 00:25:48,799
production can you invest in a

00:25:46,000 --> 00:25:51,039
dual booting ci so that you can test

00:25:48,799 --> 00:25:52,720
five two and six simultaneously

00:25:51,039 --> 00:25:54,080
if you invested in upgrading it makes

00:25:52,720 --> 00:25:55,520
sense for you to invest in future

00:25:54,080 --> 00:25:58,080
tooling so that you can stay out of

00:25:55,520 --> 00:25:59,360
upgrade debt in the future

00:25:58,080 --> 00:26:00,559
now that we've looked at considerations

00:25:59,360 --> 00:26:01,679
you should make when upgrading we're

00:26:00,559 --> 00:26:03,600
going to look at things that you will

00:26:01,679 --> 00:26:06,320
regret

00:26:03,600 --> 00:26:07,600
and you should not do them there are a

00:26:06,320 --> 00:26:09,039
lot of choices that you can make in your

00:26:07,600 --> 00:26:10,720
application that will make

00:26:09,039 --> 00:26:12,799
upgrades or maintaining your application

00:26:10,720 --> 00:26:16,400
more difficult something you're likely

00:26:12,799 --> 00:26:18,320
to regret in the future is forking rails

00:26:16,400 --> 00:26:20,559
the choice of fork rails was the single

00:26:18,320 --> 00:26:22,960
most expensive choice that we made

00:26:20,559 --> 00:26:24,799
in regards to our application at github

00:26:22,960 --> 00:26:26,400
this had a compounding effect on the

00:26:24,799 --> 00:26:27,520
state of the code base that took made

00:26:26,400 --> 00:26:30,240
our upgrade take

00:26:27,520 --> 00:26:32,080
way longer than it should have if you

00:26:30,240 --> 00:26:33,440
absolutely must fork rails you should

00:26:32,080 --> 00:26:35,039
try to track upstream

00:26:33,440 --> 00:26:37,679
the upstream version as closely as

00:26:35,039 --> 00:26:39,840
possible and only backport bug fixes

00:26:37,679 --> 00:26:41,200
or features that you need if you add

00:26:39,840 --> 00:26:42,480
features that you never intend to

00:26:41,200 --> 00:26:44,480
upstream

00:26:42,480 --> 00:26:46,159
into your fork then your fork's going to

00:26:44,480 --> 00:26:47,440
deviate from rails and it's going to

00:26:46,159 --> 00:26:49,120
make upgrading more difficult in the

00:26:47,440 --> 00:26:50,559
future

00:26:49,120 --> 00:26:52,640
another thing that you may regret down

00:26:50,559 --> 00:26:55,039
the road is falling behind

00:26:52,640 --> 00:26:57,039
rails upgrades until the point the rails

00:26:55,039 --> 00:26:58,240
team no longer supports your version

00:26:57,039 --> 00:26:59,919
if you need to stay on an old

00:26:58,240 --> 00:27:01,600
unsupported version of rails you should

00:26:59,919 --> 00:27:03,120
use something like rail's long-term

00:27:01,600 --> 00:27:04,799
support because they'll maintain the

00:27:03,120 --> 00:27:07,440
fork for you so that way at least you're

00:27:04,799 --> 00:27:09,919
not doing weird stuff to it

00:27:07,440 --> 00:27:11,200
if you fall behind on rails upgrades you

00:27:09,919 --> 00:27:12,559
end up writing you'll end up writing

00:27:11,200 --> 00:27:14,480
your own patches

00:27:12,559 --> 00:27:15,679
and you may do it wrong and then you're

00:27:14,480 --> 00:27:17,679
going to leave an insecure endpoint and

00:27:15,679 --> 00:27:19,279
that's not good for anybody

00:27:17,679 --> 00:27:20,960
in general the best way to apply a

00:27:19,279 --> 00:27:22,880
security patch is by using rails

00:27:20,960 --> 00:27:25,120
upstream it's the safest

00:27:22,880 --> 00:27:26,320
most secure way to know that your

00:27:25,120 --> 00:27:29,120
application is

00:27:26,320 --> 00:27:30,240
solid if you're also using old

00:27:29,120 --> 00:27:32,080
unsupported gems

00:27:30,240 --> 00:27:33,360
then your upgrade will be more difficult

00:27:32,080 --> 00:27:35,360
because you'll be relying

00:27:33,360 --> 00:27:37,440
on you'll be required to replace those

00:27:35,360 --> 00:27:38,640
dependencies before you can finish your

00:27:37,440 --> 00:27:40,799
upgrade

00:27:38,640 --> 00:27:42,080
it's very hard to replace dependencies

00:27:40,799 --> 00:27:43,120
while you're also trying to upgrade

00:27:42,080 --> 00:27:44,799
rails

00:27:43,120 --> 00:27:46,240
ensure that you upgrade dependencies

00:27:44,799 --> 00:27:47,120
often to keep in line with the rails

00:27:46,240 --> 00:27:49,120
requirements

00:27:47,120 --> 00:27:50,799
that way it helps prevent you from

00:27:49,120 --> 00:27:53,440
relying on a gem that gets

00:27:50,799 --> 00:27:54,399
abandoned all of these things that we

00:27:53,440 --> 00:27:56,480
looked at and more

00:27:54,399 --> 00:27:57,440
can compound the cost of your upgrade

00:27:56,480 --> 00:27:59,520
it's easy to see

00:27:57,440 --> 00:28:01,200
how these decisions accumulate debt in

00:27:59,520 --> 00:28:02,799
our applications

00:28:01,200 --> 00:28:04,480
i'm hoping that by now you're feeling a

00:28:02,799 --> 00:28:05,760
bit more confident that you too can

00:28:04,480 --> 00:28:07,600
upgrade rails

00:28:05,760 --> 00:28:09,760
i know it's going to be hard you might

00:28:07,600 --> 00:28:12,720
cry

00:28:09,760 --> 00:28:14,320
you'll definitely get angry you may

00:28:12,720 --> 00:28:15,600
curse past engineers that worked at your

00:28:14,320 --> 00:28:18,720
company i know i did

00:28:15,600 --> 00:28:21,919
i apologize to all of you who i

00:28:18,720 --> 00:28:23,200
cursed but i want you to know that you

00:28:21,919 --> 00:28:25,440
can do it

00:28:23,200 --> 00:28:26,799
i have faith in you you might be

00:28:25,440 --> 00:28:27,840
thinking okay well eileen maybe it

00:28:26,799 --> 00:28:29,520
wasn't easy

00:28:27,840 --> 00:28:31,279
but you're on the rails core team and

00:28:29,520 --> 00:28:32,399
you work at github and i'm not capable

00:28:31,279 --> 00:28:35,440
of doing an upgrade

00:28:32,399 --> 00:28:37,039
it's too hard or i don't have the talent

00:28:35,440 --> 00:28:38,080
and i just don't know how to do it so

00:28:37,039 --> 00:28:40,720
i'm going to tell you something

00:28:38,080 --> 00:28:42,640
that shocks a lot of people not because

00:28:40,720 --> 00:28:43,760
i want to pat myself on my back but

00:28:42,640 --> 00:28:44,799
because i want you to know that you can

00:28:43,760 --> 00:28:47,360
do this

00:28:44,799 --> 00:28:48,240
before the rails 3 2 5 2 upgrade i had

00:28:47,360 --> 00:28:49,919
never done

00:28:48,240 --> 00:28:53,679
a major multi-version rails upgrade

00:28:49,919 --> 00:28:55,760
before in my career ever

00:28:53,679 --> 00:28:58,000
if i can do it you can do it i'm not

00:28:55,760 --> 00:29:00,320
smarter than you i'm not better than you

00:28:58,000 --> 00:29:03,120
i might be more stubborn than you but

00:29:00,320 --> 00:29:03,120
you can learn that

00:29:03,440 --> 00:29:07,039
upgrading isn't going to be easy if

00:29:05,200 --> 00:29:07,360
you've taken on these cumulative costs

00:29:07,039 --> 00:29:10,320
that

00:29:07,360 --> 00:29:11,840
we've looked at while you're working on

00:29:10,320 --> 00:29:14,480
your upgrade it's important to remember

00:29:11,840 --> 00:29:16,880
a few things you don't have to solve all

00:29:14,480 --> 00:29:19,279
of your technical debt problems tomorrow

00:29:16,880 --> 00:29:20,720
you can pay down debt incrementally

00:29:19,279 --> 00:29:21,760
start with a class that uses a private

00:29:20,720 --> 00:29:23,840
rails api

00:29:21,760 --> 00:29:25,520
remove or document your monkey patches

00:29:23,840 --> 00:29:27,039
identify and upgrade rails dependencies

00:29:25,520 --> 00:29:28,880
that are out of date

00:29:27,039 --> 00:29:31,039
rails upgrades are not a sprint they are

00:29:28,880 --> 00:29:32,159
a marathon they actually kind of never

00:29:31,039 --> 00:29:34,799
end

00:29:32,159 --> 00:29:36,640
if you and your team pay debt down

00:29:34,799 --> 00:29:38,320
incrementally that you've incurred over

00:29:36,640 --> 00:29:39,039
time you will eventually get to the

00:29:38,320 --> 00:29:42,080
point where your

00:29:39,039 --> 00:29:44,320
application is in a much healthier place

00:29:42,080 --> 00:29:45,600
i also want you to remember that you're

00:29:44,320 --> 00:29:47,360
not alone

00:29:45,600 --> 00:29:50,240
many before you have done an upgrade and

00:29:47,360 --> 00:29:51,679
many after you will do an upgrade

00:29:50,240 --> 00:29:52,960
find others doing upgrades at the same

00:29:51,679 --> 00:29:55,440
time or folks that you've done in the

00:29:52,960 --> 00:29:57,360
past and lean on them for support

00:29:55,440 --> 00:29:59,039
and lastly remember that the payoff is

00:29:57,360 --> 00:30:01,600
worth it

00:29:59,039 --> 00:30:03,200
upgrades take a long time and are

00:30:01,600 --> 00:30:04,799
difficult

00:30:03,200 --> 00:30:06,960
but being afraid of upgrading isn't

00:30:04,799 --> 00:30:08,480
going to make it go away

00:30:06,960 --> 00:30:09,760
when your application is finally

00:30:08,480 --> 00:30:11,679
upgraded it's going to be in a much

00:30:09,760 --> 00:30:13,520
better place

00:30:11,679 --> 00:30:15,120
in addition to better security easier

00:30:13,520 --> 00:30:17,360
hiring and more manageable

00:30:15,120 --> 00:30:19,440
manageable dependencies doing the hard

00:30:17,360 --> 00:30:20,960
work of upgrading will give you improved

00:30:19,440 --> 00:30:23,200
apis

00:30:20,960 --> 00:30:24,720
major versions of version upgrades of

00:30:23,200 --> 00:30:26,640
rails allow the rails team to think

00:30:24,720 --> 00:30:28,159
about what apis can we improve in the

00:30:26,640 --> 00:30:30,640
future

00:30:28,159 --> 00:30:32,799
an example of an improved api in rail 6

00:30:30,640 --> 00:30:34,960
is the handling for multiple databases

00:30:32,799 --> 00:30:36,080
before rail 6 adding multiple databases

00:30:34,960 --> 00:30:39,039
to an application was

00:30:36,080 --> 00:30:41,279
awful and very hard you had to write a

00:30:39,039 --> 00:30:43,440
ton of code yourself but in rails 6

00:30:41,279 --> 00:30:45,039
we've added new apis for establishing

00:30:43,440 --> 00:30:46,240
and handling connections as well as an

00:30:45,039 --> 00:30:47,679
improved api

00:30:46,240 --> 00:30:50,000
around active record database

00:30:47,679 --> 00:30:52,799
configurations without upgrading you

00:30:50,000 --> 00:30:54,720
don't have access to these improvements

00:30:52,799 --> 00:30:55,520
upgrading to new versions of rails also

00:30:54,720 --> 00:30:57,760
improves

00:30:55,520 --> 00:30:59,279
security in addition to security

00:30:57,760 --> 00:31:01,519
upgrades being easier if you're not

00:30:59,279 --> 00:31:03,200
behind each version of rails adds

00:31:01,519 --> 00:31:04,880
new security features to protect your

00:31:03,200 --> 00:31:05,679
application from your users and bad

00:31:04,880 --> 00:31:07,840
actors

00:31:05,679 --> 00:31:09,760
or from protect your users from bad

00:31:07,840 --> 00:31:11,279
actors you don't want to protect your

00:31:09,760 --> 00:31:12,399
app from your users actually maybe you

00:31:11,279 --> 00:31:14,960
do

00:31:12,399 --> 00:31:14,960
maybe you do

00:31:15,760 --> 00:31:19,360
in rails 5 we introduce perform csrf

00:31:18,559 --> 00:31:21,600
tokens

00:31:19,360 --> 00:31:23,200
rails 5.2 introduce encrypted secrets

00:31:21,600 --> 00:31:24,640
and rail sticks is going to ship with

00:31:23,200 --> 00:31:26,399
improved secur

00:31:24,640 --> 00:31:28,480
security around potentially dangerous

00:31:26,399 --> 00:31:28,960
arrow methods these features help keep

00:31:28,480 --> 00:31:30,640
your

00:31:28,960 --> 00:31:32,159
applications safe and secure but because

00:31:30,640 --> 00:31:33,679
they're actually features

00:31:32,159 --> 00:31:37,679
you can't get them unless you upgrade to

00:31:33,679 --> 00:31:40,080
rails you can't get them on the lts fork

00:31:37,679 --> 00:31:41,519
and although rails 3-0 is plagued by

00:31:40,080 --> 00:31:43,600
horrible performance issues

00:31:41,519 --> 00:31:44,720
newer versions of rails have focused on

00:31:43,600 --> 00:31:46,480
better performance

00:31:44,720 --> 00:31:48,960
schnees talked about some stuff that he

00:31:46,480 --> 00:31:51,120
fixed in active record

00:31:48,960 --> 00:31:53,039
we i know that rail six is shipping with

00:31:51,120 --> 00:31:53,760
a memory leak fixed for view loading and

00:31:53,039 --> 00:31:55,919
development

00:31:53,760 --> 00:31:57,919
and we also have faster active support

00:31:55,919 --> 00:32:00,000
notifications

00:31:57,919 --> 00:32:01,360
using rails also gets you access to new

00:32:00,000 --> 00:32:03,600
features

00:32:01,360 --> 00:32:05,919
in libraries rail 6 is shipping with

00:32:03,600 --> 00:32:08,320
brand new libraries like action text

00:32:05,919 --> 00:32:09,039
action mailbox and our new auto loading

00:32:08,320 --> 00:32:11,840
framework called

00:32:09,039 --> 00:32:13,279
site work by upgrading you can rely on

00:32:11,840 --> 00:32:14,240
new features and rails without building

00:32:13,279 --> 00:32:16,880
your own infrastructure

00:32:14,240 --> 00:32:18,240
tooling into your application in an

00:32:16,880 --> 00:32:18,799
ideal world your application would

00:32:18,240 --> 00:32:21,039
contain

00:32:18,799 --> 00:32:22,799
only code that pertains to your product

00:32:21,039 --> 00:32:24,320
if your product isn't about sending mail

00:32:22,799 --> 00:32:25,840
you should write code that you shouldn't

00:32:24,320 --> 00:32:27,120
write code that sends mail into your

00:32:25,840 --> 00:32:28,960
application

00:32:27,120 --> 00:32:30,640
upgrading rails helps you keep the line

00:32:28,960 --> 00:32:32,880
where rails ends and your application

00:32:30,640 --> 00:32:34,799
begins crystal clear

00:32:32,880 --> 00:32:36,480
and lastly upgrading your application

00:32:34,799 --> 00:32:37,760
gives you a chance to contribute

00:32:36,480 --> 00:32:40,240
upstream

00:32:37,760 --> 00:32:40,799
it's really difficult to fix bugs add

00:32:40,240 --> 00:32:42,720
features and

00:32:40,799 --> 00:32:44,080
influence the future of rails from an

00:32:42,720 --> 00:32:45,760
old version

00:32:44,080 --> 00:32:47,120
it's not a requirement to contribute if

00:32:45,760 --> 00:32:48,960
you're on a new version and don't feel

00:32:47,120 --> 00:32:49,919
like it but it definitely opens doors

00:32:48,960 --> 00:32:54,000
that are otherwise

00:32:49,919 --> 00:32:54,799
closed as dhh said in 2004 and many

00:32:54,000 --> 00:32:57,360
times since

00:32:54,799 --> 00:32:58,799
frameworks are extracted we build rails

00:32:57,360 --> 00:33:01,279
from our existing needs

00:32:58,799 --> 00:33:03,600
but if those needs are set back in rails

00:33:01,279 --> 00:33:07,039
2-3 it's really hard to make a

00:33:03,600 --> 00:33:08,720
case for an extraction that we require

00:33:07,039 --> 00:33:10,960
all of these are good reasons to upgrade

00:33:08,720 --> 00:33:12,399
but this is the one that kept me going

00:33:10,960 --> 00:33:14,240
this is the reason that i spent a year

00:33:12,399 --> 00:33:16,480
and a half upgrading rails

00:33:14,240 --> 00:33:18,720
at github it was so that we could

00:33:16,480 --> 00:33:20,799
influence the future of rails

00:33:18,720 --> 00:33:22,320
for github this is the biggest and most

00:33:20,799 --> 00:33:24,559
important reason to upgrade

00:33:22,320 --> 00:33:26,320
by upstreaming features fixing bugs and

00:33:24,559 --> 00:33:29,279
supporting rails future

00:33:26,320 --> 00:33:31,519
we support our future as well when i

00:33:29,279 --> 00:33:33,120
look back at when i started the 3-2-5-2

00:33:31,519 --> 00:33:34,320
upgrade the thought of being on a modern

00:33:33,120 --> 00:33:35,679
version of rails and actively

00:33:34,320 --> 00:33:38,640
contributing upstream

00:33:35,679 --> 00:33:39,360
felt like an unachievable fairy tale we

00:33:38,640 --> 00:33:41,760
were so

00:33:39,360 --> 00:33:43,120
far behind and i often wasn't sure that

00:33:41,760 --> 00:33:45,039
we could finish it

00:33:43,120 --> 00:33:46,640
at least not without maintaining most of

00:33:45,039 --> 00:33:49,919
my sanity

00:33:46,640 --> 00:33:49,919
that's still questionable though

00:33:50,320 --> 00:33:54,240
but now regularly contributing and to

00:33:52,399 --> 00:33:56,880
rails and supporting the future of rails

00:33:54,240 --> 00:33:58,720
is github's present and future state

00:33:56,880 --> 00:34:00,880
since upgrading rails github github

00:33:58,720 --> 00:34:01,679
engineers have sent over 75 pull

00:34:00,880 --> 00:34:03,919
requests

00:34:01,679 --> 00:34:06,720
to rail 6 that improve performance fix

00:34:03,919 --> 00:34:08,720
bugs and add major features

00:34:06,720 --> 00:34:09,760
before we upgraded we often were forced

00:34:08,720 --> 00:34:12,399
to monkey patch

00:34:09,760 --> 00:34:13,599
or work around bugs in overly complex

00:34:12,399 --> 00:34:14,960
ways

00:34:13,599 --> 00:34:16,159
yes even though we had a fork we still

00:34:14,960 --> 00:34:21,119
had lots of monkey patches i don't

00:34:16,159 --> 00:34:22,480
understand it using rails 5.2 has

00:34:21,119 --> 00:34:23,040
allowed us not just to contribute

00:34:22,480 --> 00:34:24,800
upstream

00:34:23,040 --> 00:34:26,960
but to make choices that improve our

00:34:24,800 --> 00:34:28,399
application instead of hinder it

00:34:26,960 --> 00:34:30,399
and all of you get to benefit from those

00:34:28,399 --> 00:34:32,079
changes as well

00:34:30,399 --> 00:34:34,000
in addition to bug fixes and performance

00:34:32,079 --> 00:34:36,800
improvements where we've extracted

00:34:34,000 --> 00:34:38,240
major functionality from github i won't

00:34:36,800 --> 00:34:39,679
go into technical details but we've

00:34:38,240 --> 00:34:41,839
extracted our handling from multiple

00:34:39,679 --> 00:34:43,599
databases into rel six

00:34:41,839 --> 00:34:45,200
we've used our knowledge and expertise

00:34:43,599 --> 00:34:46,159
on database handling to create an easy

00:34:45,200 --> 00:34:48,960
to use robust

00:34:46,159 --> 00:34:50,480
new api for defining establishing and

00:34:48,960 --> 00:34:52,480
switching data between database

00:34:50,480 --> 00:34:54,480
connections in your application

00:34:52,480 --> 00:34:56,320
we did this extraction not just because

00:34:54,480 --> 00:34:57,680
it benefits rails but because it allows

00:34:56,320 --> 00:34:59,200
us to reduce complexity in our

00:34:57,680 --> 00:35:01,440
application

00:34:59,200 --> 00:35:02,240
our goal is to never fall behind we're

00:35:01,440 --> 00:35:03,839
investing in our

00:35:02,240 --> 00:35:05,440
in our application in rails by doing

00:35:03,839 --> 00:35:07,839
continuous upgrades

00:35:05,440 --> 00:35:09,359
every week we bump rails and we run all

00:35:07,839 --> 00:35:09,920
of github's tests against the new

00:35:09,359 --> 00:35:13,040
version

00:35:09,920 --> 00:35:14,480
and rails 5.2 production since we did

00:35:13,040 --> 00:35:16,079
the hard work of upgrading major

00:35:14,480 --> 00:35:17,760
versions this new process means that

00:35:16,079 --> 00:35:19,839
we'll never fall behind

00:35:17,760 --> 00:35:21,040
and upgrades are easy because we will do

00:35:19,839 --> 00:35:23,280
them as rails changes

00:35:21,040 --> 00:35:24,800
instead of many years later because of

00:35:23,280 --> 00:35:25,440
this we're confident that rail 6 is

00:35:24,800 --> 00:35:28,320
stable

00:35:25,440 --> 00:35:30,240
performant and resilient continuous

00:35:28,320 --> 00:35:31,760
upgrades and our contributions to rails

00:35:30,240 --> 00:35:33,520
are evidence that for the first time in

00:35:31,760 --> 00:35:35,040
history

00:35:33,520 --> 00:35:36,400
in github's history we're not just using

00:35:35,040 --> 00:35:37,119
rails or simply building a rails

00:35:36,400 --> 00:35:38,400
application

00:35:37,119 --> 00:35:41,119
for the first time in github's history

00:35:38,400 --> 00:35:42,560
we're pioneering the future of rails

00:35:41,119 --> 00:35:44,000
we're extracting code from github

00:35:42,560 --> 00:35:45,520
building new features into rails that

00:35:44,000 --> 00:35:47,040
will help you scale your application

00:35:45,520 --> 00:35:49,040
and giving back to open source to

00:35:47,040 --> 00:35:50,800
support rails for the long haul

00:35:49,040 --> 00:35:52,079
it makes good sense for us to do this

00:35:50,800 --> 00:35:52,720
not only do we give back to the

00:35:52,079 --> 00:35:54,000
community

00:35:52,720 --> 00:35:56,240
but it helps keep our application

00:35:54,000 --> 00:35:58,079
focused on our product we can reduce

00:35:56,240 --> 00:35:59,760
complexity and improve resilience

00:35:58,079 --> 00:36:01,280
all while contributing to the future of

00:35:59,760 --> 00:36:02,800
rels

00:36:01,280 --> 00:36:04,480
at github we not only need to do this

00:36:02,800 --> 00:36:06,720
for our own application but because we

00:36:04,480 --> 00:36:08,560
have a responsibility to support rails

00:36:06,720 --> 00:36:10,079
we owe part of our success to the rails

00:36:08,560 --> 00:36:12,240
framework and we have the influence

00:36:10,079 --> 00:36:14,079
expertise and application to help push

00:36:12,240 --> 00:36:15,920
rels forward

00:36:14,079 --> 00:36:17,680
upgrading rails was a huge investment it

00:36:15,920 --> 00:36:18,800
wasn't cheap but it was really worth it

00:36:17,680 --> 00:36:20,960
because it opens up a ton of

00:36:18,800 --> 00:36:22,480
possibilities for our future

00:36:20,960 --> 00:36:24,000
we're building features faster we're

00:36:22,480 --> 00:36:25,520
more confident our codebase is stable

00:36:24,000 --> 00:36:26,160
and we're improving the scalability of

00:36:25,520 --> 00:36:27,680
rails

00:36:26,160 --> 00:36:30,000
all while giving back to the open source

00:36:27,680 --> 00:36:31,440
community at a minimum we went from

00:36:30,000 --> 00:36:32,079
being crushed by our application and

00:36:31,440 --> 00:36:34,000
rails

00:36:32,079 --> 00:36:35,680
and the decisions that we'd made to

00:36:34,000 --> 00:36:36,320
building up our application to building

00:36:35,680 --> 00:36:38,880
up rails

00:36:36,320 --> 00:36:40,480
to building up our community upgrading

00:36:38,880 --> 00:36:41,920
gave us the freedom and flexibility that

00:36:40,480 --> 00:36:43,920
we didn't have before

00:36:41,920 --> 00:36:46,160
it empowers our engineers to build more

00:36:43,920 --> 00:36:48,560
and build better

00:36:46,160 --> 00:36:50,720
in 2007 github was born and 11 years

00:36:48,560 --> 00:36:52,880
later we're finally tracking master

00:36:50,720 --> 00:36:54,640
it took seven years from the day the 3-0

00:36:52,880 --> 00:36:56,880
upgrade was started to the day the 5-2

00:36:54,640 --> 00:36:58,720
upgrade was complete

00:36:56,880 --> 00:37:00,800
i can't the future is bright and i can't

00:36:58,720 --> 00:37:03,119
wait for you to see what the next 10

00:37:00,800 --> 00:37:04,960
years allows us to extract from github

00:37:03,119 --> 00:37:07,599
builds and rails and how the community

00:37:04,960 --> 00:37:08,079
thrives at github we'll continue to

00:37:07,599 --> 00:37:10,160
invest

00:37:08,079 --> 00:37:11,599
in the future of rails in our community

00:37:10,160 --> 00:37:13,680
because we have to

00:37:11,599 --> 00:37:14,720
because we need to and because we want

00:37:13,680 --> 00:37:16,560
to

00:37:14,720 --> 00:37:17,920
we'll continue to invest in the future

00:37:16,560 --> 00:37:19,839
because github and rails are in it

00:37:17,920 --> 00:37:22,270
together for the long haul

00:37:19,839 --> 00:37:35,280
and i hope you are too thank you

00:37:22,270 --> 00:37:36,960
[Applause]

00:37:35,280 --> 00:37:38,720
thank you so much eileen that was

00:37:36,960 --> 00:37:39,119
wonderful and it's it's funny you talk

00:37:38,720 --> 00:37:41,599
about

00:37:39,119 --> 00:37:45,119
uh a major upgrade because uh arnold and

00:37:41,599 --> 00:37:45,119
i just got upgraded to majors

00:37:46,240 --> 00:37:51,839

YouTube URL: https://www.youtube.com/watch?v=ZrcPoRx_kQE


