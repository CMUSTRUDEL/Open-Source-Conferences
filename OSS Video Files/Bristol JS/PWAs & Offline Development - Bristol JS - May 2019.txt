Title: PWAs & Offline Development - Bristol JS - May 2019
Publication date: 2019-06-05
Playlist: Bristol JS
Description: 
	Mike Oram

In this talk, we will briefly explore what a PWA is and how to build one. We will look at the benefits of PWA's and more importantly their limitations.

We then look a bit deeper at the technologies behind PWA's such as Service Workers, in particular we will look at the mechanics behind Service Workers, and how they will affect your back-end builds.

Finally, we will look at offline development, the offline first life-cycle and the tools and technologies needed to start building offline applications. Comparing offline storage mechanisms, and their limitations.

This talk is great for anyone building web-based applications, in any language, or anyone wanting to learn more about PWA's and offline development

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:03,330
yeah I'm here today to talk about

00:00:01,260 --> 00:00:04,620
progressive web apps and we're gonna

00:00:03,330 --> 00:00:06,480
kind of focus a little bit at the end on

00:00:04,620 --> 00:00:09,679
offline development and how to make your

00:00:06,480 --> 00:00:11,460
web application actually work offline

00:00:09,679 --> 00:00:13,980
I'll start with talking a little bit

00:00:11,460 --> 00:00:16,770
about about myself so I'm a full-stack

00:00:13,980 --> 00:00:19,470
developer primarily I work in the lamp

00:00:16,770 --> 00:00:21,689
stack I do a little bit node as well I'm

00:00:19,470 --> 00:00:25,400
the lead at Maiden Academy which is a

00:00:21,689 --> 00:00:28,050
bootcamp slash training company in bath

00:00:25,400 --> 00:00:29,519
basically my job is to learn new stuff

00:00:28,050 --> 00:00:32,099
and then tell all the people about it

00:00:29,519 --> 00:00:33,870
like I am that so let's talk about what

00:00:32,099 --> 00:00:35,579
a progressive web app is and just to

00:00:33,870 --> 00:00:37,760
remind ourselves if we don't know

00:00:35,579 --> 00:00:40,020
so the Wikipedia definition is

00:00:37,760 --> 00:00:41,760
progressive web apps are experiences

00:00:40,020 --> 00:00:44,280
that combine the best of the web and the

00:00:41,760 --> 00:00:45,690
best of the apps which obviously is

00:00:44,280 --> 00:00:48,200
really clear to everybody so we can

00:00:45,690 --> 00:00:48,200
probably just go home

00:00:49,950 --> 00:00:54,989
so actually what is it so Alex Russell

00:00:52,559 --> 00:00:57,149
coined the term back in 2015

00:00:54,989 --> 00:00:59,250
they've actually been around as a kind

00:00:57,149 --> 00:01:01,410
of concept or thought project for a lot

00:00:59,250 --> 00:01:04,680
longer than that but he wrote an article

00:01:01,410 --> 00:01:07,530
and sort of actually coming up with a

00:01:04,680 --> 00:01:10,439
practical way of doing this the idea is

00:01:07,530 --> 00:01:13,229
that it's a web application that appears

00:01:10,439 --> 00:01:17,659
to be a native application on pretty

00:01:13,229 --> 00:01:21,299
much any device so rather than having a

00:01:17,659 --> 00:01:22,470
native app a web app and maybe a desktop

00:01:21,299 --> 00:01:24,090
application as well where you might have

00:01:22,470 --> 00:01:26,520
to have three dev teams building each

00:01:24,090 --> 00:01:27,930
one and you get like inconsistent UI is

00:01:26,520 --> 00:01:29,100
between each one and you have like

00:01:27,930 --> 00:01:30,960
project managers coming up with

00:01:29,100 --> 00:01:33,000
different features and like all sorts of

00:01:30,960 --> 00:01:35,130
weird things where like that one does

00:01:33,000 --> 00:01:36,930
this thing but this one doesn't and the

00:01:35,130 --> 00:01:39,479
idea is you just build one application

00:01:36,930 --> 00:01:41,270
and it runs across all platforms and

00:01:39,479 --> 00:01:45,780
looks like a native application

00:01:41,270 --> 00:01:47,490
everywhere the they are supposed to be

00:01:45,780 --> 00:01:48,659
able to work offline hence we're going

00:01:47,490 --> 00:01:52,110
to talk about the offline development

00:01:48,659 --> 00:01:54,479
stuff and they yeah supposed to be as it

00:01:52,110 --> 00:01:56,009
says operating system agnostic so they

00:01:54,479 --> 00:01:56,520
should work on mobile devices desktop

00:01:56,009 --> 00:02:00,450
devices

00:01:56,520 --> 00:02:03,869
just everything Microsoft actually tried

00:02:00,450 --> 00:02:06,270
to do this a few years before Alex

00:02:03,869 --> 00:02:09,989
Russell came up with the sort of came up

00:02:06,270 --> 00:02:12,849
with the term PWA they did it with one

00:02:09,989 --> 00:02:17,379
of the early versions of the Windows

00:02:12,849 --> 00:02:18,849
mobile operating system but just it

00:02:17,379 --> 00:02:23,439
didn't know but it didn't catch on

00:02:18,849 --> 00:02:26,439
nobody did it until the whole PWA kind

00:02:23,439 --> 00:02:27,939
of thing came up the actual article is

00:02:26,439 --> 00:02:29,650
on here I will share these slides on

00:02:27,939 --> 00:02:35,109
Twitter later so if you want to read

00:02:29,650 --> 00:02:37,299
Alex's article it's there so what is it

00:02:35,109 --> 00:02:39,669
well it's actually just your

00:02:37,299 --> 00:02:41,200
pre-existing web application you kind of

00:02:39,669 --> 00:02:42,819
don't really need to do a lot to it you

00:02:41,200 --> 00:02:44,919
can just use your existing web

00:02:42,819 --> 00:02:47,500
application your HTML your JavaScript

00:02:44,919 --> 00:02:49,000
CSS everything as it is and just add a

00:02:47,500 --> 00:02:55,949
little bit more JavaScript to it to make

00:02:49,000 --> 00:02:59,219
it do some other stuff so at the moment

00:02:55,949 --> 00:03:02,469
at the moment if you want an app on your

00:02:59,219 --> 00:03:05,829
mobile device or a desktop application

00:03:02,469 --> 00:03:07,419
on your computer you have to either go

00:03:05,829 --> 00:03:09,430
to the web site download it or go to an

00:03:07,419 --> 00:03:12,099
app store download it install it and

00:03:09,430 --> 00:03:13,870
then start using it whereas to use a

00:03:12,099 --> 00:03:15,849
web-based application you just go to the

00:03:13,870 --> 00:03:17,949
URL and use it straight away there's no

00:03:15,849 --> 00:03:20,769
installation there's no kind of pause so

00:03:17,949 --> 00:03:23,049
the idea of a PWA is it's use it to

00:03:20,769 --> 00:03:28,090
install it rather than install it to use

00:03:23,049 --> 00:03:29,799
it so what happens is when you start

00:03:28,090 --> 00:03:32,680
using the web application just through

00:03:29,799 --> 00:03:34,030
the browser after depending on what

00:03:32,680 --> 00:03:35,530
browser you're using after a certain

00:03:34,030 --> 00:03:38,169
amount of time it will just trigger a

00:03:35,530 --> 00:03:39,579
pop-up and say do you want to install

00:03:38,169 --> 00:03:41,259
this you just click yes and it'll just

00:03:39,579 --> 00:03:43,060
silently install in the background and

00:03:41,259 --> 00:03:45,609
you don't have to specifically go

00:03:43,060 --> 00:03:47,349
somewhere to install it yourself I've

00:03:45,609 --> 00:03:50,049
got a gif and the next one which will

00:03:47,349 --> 00:03:51,939
kind of show you how this works the gift

00:03:50,049 --> 00:03:54,069
quite fast so I'm going to leave up for

00:03:51,939 --> 00:03:57,129
a while so that you can see it run a few

00:03:54,069 --> 00:03:59,859
times the gifts actually quite old as

00:03:57,129 --> 00:04:01,509
well so it's using the old notification

00:03:59,859 --> 00:04:02,859
style so if you've seen like the old and

00:04:01,509 --> 00:04:05,139
the new one you'll notice that they're a

00:04:02,859 --> 00:04:06,579
little bit different I couldn't find a

00:04:05,139 --> 00:04:08,229
gift that somebody else had made with

00:04:06,579 --> 00:04:09,969
the new one and I didn't have time to do

00:04:08,229 --> 00:04:14,250
one myself so but it's basically the

00:04:09,969 --> 00:04:17,079
same principle so you go to a URL so

00:04:14,250 --> 00:04:19,060
just google something gives you your

00:04:17,079 --> 00:04:22,120
application after you've used it for a

00:04:19,060 --> 00:04:23,949
bit it gives you a pop up which click to

00:04:22,120 --> 00:04:26,110
install to the home screen go back to

00:04:23,949 --> 00:04:26,830
the home screen you can see it pops up

00:04:26,110 --> 00:04:29,050
like a native

00:04:26,830 --> 00:04:30,970
application you click it and open it and

00:04:29,050 --> 00:04:32,800
it goes back to the actual application

00:04:30,970 --> 00:04:34,599
but it's got rid of like the URL bar and

00:04:32,800 --> 00:04:37,199
it looks like a native app I'll just let

00:04:34,599 --> 00:04:37,199
you watch that again

00:04:46,520 --> 00:04:51,470
yeah that make sense so the one bad

00:04:49,639 --> 00:04:53,090
thing about this gift that it doesn't

00:04:51,470 --> 00:04:55,370
highlight which I feel is a really

00:04:53,090 --> 00:04:56,690
important point is when it installs to

00:04:55,370 --> 00:04:58,460
the home screen at the moment it's

00:04:56,690 --> 00:04:59,599
installing just using the chrome icon to

00:04:58,460 --> 00:05:01,370
the home screen so it just looks like a

00:04:59,599 --> 00:05:03,259
bookmark but actually you can customize

00:05:01,370 --> 00:05:05,750
that icon so it does look like a native

00:05:03,259 --> 00:05:10,940
app I couldn't find the gift with that

00:05:05,750 --> 00:05:13,120
example okay so we know kind of what PWA

00:05:10,940 --> 00:05:17,120
is so why why would we want to do this

00:05:13,120 --> 00:05:19,550
over something like react native so I've

00:05:17,120 --> 00:05:22,400
got a couple of case studies first of

00:05:19,550 --> 00:05:23,539
all it's really quick so tinder were one

00:05:22,400 --> 00:05:25,220
of the first kind of big companies to

00:05:23,539 --> 00:05:28,130
actually do this and they do obviously

00:05:25,220 --> 00:05:30,130
still have native applications that but

00:05:28,130 --> 00:05:33,380
their web application they've

00:05:30,130 --> 00:05:36,560
implemented the PWA code and that meant

00:05:33,380 --> 00:05:38,599
compared with the original web app which

00:05:36,560 --> 00:05:40,639
average load time was nearly 12 seconds

00:05:38,599 --> 00:05:43,639
they cut it down to just over four and a

00:05:40,639 --> 00:05:45,349
half seconds mostly that was down to the

00:05:43,639 --> 00:05:46,729
ability to control the cache through

00:05:45,349 --> 00:05:49,060
your JavaScript which we'll talk about

00:05:46,729 --> 00:05:49,060
in a bit

00:05:50,030 --> 00:05:56,479
uber did it as well so they decided that

00:05:54,830 --> 00:05:58,039
what they wanted from their PWA was it

00:05:56,479 --> 00:06:00,169
for it to be as small as possible and

00:05:58,039 --> 00:06:02,030
for it to use a small amount of data as

00:06:00,169 --> 00:06:03,409
possible so that no matter where you are

00:06:02,030 --> 00:06:06,199
if you're stuck in the middle of the

00:06:03,409 --> 00:06:09,469
field and you know drunk or whatever you

00:06:06,199 --> 00:06:11,840
can still get a taxi so they created a

00:06:09,469 --> 00:06:13,820
PWA which gzipped is actually only 50k

00:06:11,840 --> 00:06:16,699
the whole application of uber is just

00:06:13,820 --> 00:06:18,889
50k and it means that actually now you

00:06:16,699 --> 00:06:21,080
can install the whole thing or load the

00:06:18,889 --> 00:06:23,389
whole thing and actually get a taxi in

00:06:21,080 --> 00:06:25,520
kind of hopefully in under three seconds

00:06:23,389 --> 00:06:27,680
on 2g which is pretty good

00:06:25,520 --> 00:06:31,159
hopefully we're not actually ever on 2g

00:06:27,680 --> 00:06:33,050
anymore but all this is in comparison

00:06:31,159 --> 00:06:34,159
with the native mobile app obviously

00:06:33,050 --> 00:06:35,840
which if you don't already have

00:06:34,159 --> 00:06:38,090
installed you have to go in like install

00:06:35,840 --> 00:06:43,849
and that would take forever on 2g and

00:06:38,090 --> 00:06:45,919
you definitely die in a field trivago

00:06:43,849 --> 00:06:49,099
then another companies that have done it

00:06:45,919 --> 00:06:51,259
so they're these stats are in comparison

00:06:49,099 --> 00:06:54,289
with their web application before they

00:06:51,259 --> 00:06:56,659
implemented the PWA technologies so they

00:06:54,289 --> 00:07:00,470
saw 150 percent increase in user

00:06:56,659 --> 00:07:02,540
engagement obviously pretty handy

00:07:00,470 --> 00:07:04,820
ninety-seven percent increase in hotel

00:07:02,540 --> 00:07:09,140
offer clicks and six simple cent

00:07:04,820 --> 00:07:10,490
increase in users continuing to browse

00:07:09,140 --> 00:07:12,200
when they go offline because of the

00:07:10,490 --> 00:07:13,340
offline support obviously previously if

00:07:12,200 --> 00:07:17,450
you go offline most people would just

00:07:13,340 --> 00:07:20,680
give up like no signal most of this

00:07:17,450 --> 00:07:23,540
again comes from from the speed gains

00:07:20,680 --> 00:07:25,310
from cache control and from the push

00:07:23,540 --> 00:07:26,630
notification of stuff for me and the

00:07:25,310 --> 00:07:29,900
offline support we're going to talk

00:07:26,630 --> 00:07:32,600
about all of those things last one

00:07:29,900 --> 00:07:33,980
Pinterest we actually saw their logo

00:07:32,600 --> 00:07:36,010
earlier because they do have a react

00:07:33,980 --> 00:07:38,780
native application but they've also

00:07:36,010 --> 00:07:41,840
implemented the PWA tech into their web

00:07:38,780 --> 00:07:43,850
application which yep resulted in 60%

00:07:41,840 --> 00:07:46,010
user increase user engagement increase a

00:07:43,850 --> 00:07:48,710
44% increase in user generated ad

00:07:46,010 --> 00:07:49,760
revenue and a 40% increase in the amount

00:07:48,710 --> 00:07:51,740
of time actually spent on the

00:07:49,760 --> 00:07:53,840
application those stats of versus the

00:07:51,740 --> 00:07:56,360
just normal web application not versus

00:07:53,840 --> 00:07:58,340
the native one but actually if you want

00:07:56,360 --> 00:08:01,280
to compare the PWA to their react native

00:07:58,340 --> 00:08:02,750
one they did see in all three of these

00:08:01,280 --> 00:08:05,060
stats between two and five percent

00:08:02,750 --> 00:08:10,520
increase on all three areas versus react

00:08:05,060 --> 00:08:12,590
native so actually it is quicker so

00:08:10,520 --> 00:08:17,230
let's talk about the tech behind it how

00:08:12,590 --> 00:08:20,150
do we turn your application into a PWA

00:08:17,230 --> 00:08:22,490
you kind of need three things but kind

00:08:20,150 --> 00:08:23,780
of four so we'll talk about that you

00:08:22,490 --> 00:08:27,320
need to be running your application over

00:08:23,780 --> 00:08:30,140
HTTP you already are so we're fine

00:08:27,320 --> 00:08:32,330
obviously you need a web app manifest

00:08:30,140 --> 00:08:33,620
which is essentially a JSON file

00:08:32,330 --> 00:08:35,180
containing the settings for your

00:08:33,620 --> 00:08:40,280
application we'll have a look at that in

00:08:35,180 --> 00:08:41,719
a minute you might need a serviceworker

00:08:40,280 --> 00:08:43,520
you need a serviceworker in everything

00:08:41,719 --> 00:08:45,140
except firefox it doesn't require one

00:08:43,520 --> 00:08:47,140
we'll talk about what serviceworker is

00:08:45,140 --> 00:08:50,140
but it's basically a client-side proxy

00:08:47,140 --> 00:08:52,880
allows you to control your HTTP requests

00:08:50,140 --> 00:08:55,250
and you need the user's permission to

00:08:52,880 --> 00:08:59,600
actually do all of this stuff so we'll

00:08:55,250 --> 00:09:02,480
have a look at that as well so let's

00:08:59,600 --> 00:09:05,480
start by getting users permission so if

00:09:02,480 --> 00:09:08,120
your browser supports service workers

00:09:05,480 --> 00:09:11,270
and and pwace and all of the tech

00:09:08,120 --> 00:09:13,550
required then there is a new there's an

00:09:11,270 --> 00:09:13,940
event called the before install prompt

00:09:13,550 --> 00:09:17,890
event

00:09:13,940 --> 00:09:20,750
which will fire after a amount of time

00:09:17,890 --> 00:09:22,730
when the user visits your application so

00:09:20,750 --> 00:09:26,030
on Chrome or in the latest version of

00:09:22,730 --> 00:09:27,350
Chrome which is version 68 if the user

00:09:26,030 --> 00:09:29,030
has been using your application for more

00:09:27,350 --> 00:09:31,520
than 30 seconds then that's when the

00:09:29,030 --> 00:09:33,530
event will fire different browsers have

00:09:31,520 --> 00:09:35,780
different rules around how quickly that

00:09:33,530 --> 00:09:38,180
event will fire and they change it all

00:09:35,780 --> 00:09:40,520
the time so it's at some point but it's

00:09:38,180 --> 00:09:43,460
usually fairly quickly once that event

00:09:40,520 --> 00:09:45,680
fires you can then but the event will

00:09:43,460 --> 00:09:47,210
sorry the event will only fire if all of

00:09:45,680 --> 00:09:49,010
the install criteria are met we'll go

00:09:47,210 --> 00:09:50,360
over that but it's essentially if you're

00:09:49,010 --> 00:09:52,580
running on HTTPS if you've got a

00:09:50,360 --> 00:09:54,530
manifest.json file the stuff we just

00:09:52,580 --> 00:09:57,020
talked about

00:09:54,530 --> 00:09:59,000
once the instant once the event has

00:09:57,020 --> 00:10:02,060
fired you can then hook into that event

00:09:59,000 --> 00:10:03,440
and it's got a prompt method which we'll

00:10:02,060 --> 00:10:05,090
see in a minute on it you call that

00:10:03,440 --> 00:10:10,460
prompt method and that actually shows

00:10:05,090 --> 00:10:12,260
the pop-up some browsers require sorry

00:10:10,460 --> 00:10:14,690
some browsers require the prompt method

00:10:12,260 --> 00:10:16,250
to be triggered based on a user

00:10:14,690 --> 00:10:17,750
interaction so you might have to click a

00:10:16,250 --> 00:10:20,270
button and then get the prompt to that

00:10:17,750 --> 00:10:20,600
thing so we'll have a look at that as

00:10:20,270 --> 00:10:23,270
well

00:10:20,600 --> 00:10:25,310
once the a accept the prompt then it

00:10:23,270 --> 00:10:27,440
will just install in the background

00:10:25,310 --> 00:10:28,790
there's no like downloading installing

00:10:27,440 --> 00:10:31,580
bar it just does it behind the scenes

00:10:28,790 --> 00:10:32,810
you don't have to watch it so the code

00:10:31,580 --> 00:10:34,460
for this would look something like this

00:10:32,810 --> 00:10:35,660
I'm just going to kind of give you a

00:10:34,460 --> 00:10:41,240
minute to read through I assume

00:10:35,660 --> 00:10:42,800
everybody here knows JavaScript so we're

00:10:41,240 --> 00:10:45,800
just assuming that I've already selected

00:10:42,800 --> 00:10:52,490
the add button because I might have room

00:10:45,800 --> 00:10:54,020
on my slide ok so what's going on is

00:10:52,490 --> 00:10:57,100
I've create an event listener for the

00:10:54,020 --> 00:11:01,670
before install prompt after that fires

00:10:57,100 --> 00:11:04,460
picked up the event displayed my add

00:11:01,670 --> 00:11:04,910
button when the user then clicks on that

00:11:04,460 --> 00:11:07,730
button

00:11:04,910 --> 00:11:10,370
I'm calling prompt on the event itself

00:11:07,730 --> 00:11:11,780
which that actually displays that pop-up

00:11:10,370 --> 00:11:12,730
that you saw that says do you want to

00:11:11,780 --> 00:11:16,340
install this to your home screen

00:11:12,730 --> 00:11:19,100
provided that they accept that you get

00:11:16,340 --> 00:11:20,480
it returns this promise and you can do

00:11:19,100 --> 00:11:21,980
stuff with it or you can just like do

00:11:20,480 --> 00:11:23,540
nothing because it's already doing the

00:11:21,980 --> 00:11:26,299
install for you but if you want to run

00:11:23,540 --> 00:11:30,989
code whilst that's happening you can

00:11:26,299 --> 00:11:31,920
yeah okay

00:11:30,989 --> 00:11:33,389
so let's have a look at the other

00:11:31,920 --> 00:11:35,759
install requirements so the web app

00:11:33,389 --> 00:11:38,309
manifest this is a JSON file that you

00:11:35,759 --> 00:11:41,999
have to include into the head of your

00:11:38,309 --> 00:11:44,160
HTML document there's these are just the

00:11:41,999 --> 00:11:47,069
required fields within the web app

00:11:44,160 --> 00:11:48,959
manifest file there is actually loads of

00:11:47,069 --> 00:11:51,449
optional fields that you can put in

00:11:48,959 --> 00:11:53,609
there to configure all sorts of

00:11:51,449 --> 00:11:55,259
different things but essentially you

00:11:53,609 --> 00:11:57,239
kind of just configure the background

00:11:55,259 --> 00:11:58,799
color of your application the name that

00:11:57,239 --> 00:12:01,829
it will actually display once it's

00:11:58,799 --> 00:12:03,509
installed to the home screen the start

00:12:01,829 --> 00:12:05,790
URL so when they click the icon which

00:12:03,509 --> 00:12:08,339
page it actually goes to it doesn't have

00:12:05,790 --> 00:12:09,809
to be the home page description which is

00:12:08,339 --> 00:12:13,439
kind of like a longer description about

00:12:09,809 --> 00:12:17,189
what your app does display allows you to

00:12:13,439 --> 00:12:18,749
make it open in the browser or as a

00:12:17,189 --> 00:12:20,549
standalone thing so it looks like it's

00:12:18,749 --> 00:12:23,100
his own application generally that's the

00:12:20,549 --> 00:12:24,569
one you want to go with icons which is

00:12:23,100 --> 00:12:25,769
an array of different icons so you can

00:12:24,569 --> 00:12:28,049
provide them at different sizes for

00:12:25,769 --> 00:12:29,819
different resolutions so it can support

00:12:28,049 --> 00:12:31,559
lots of different devices and then

00:12:29,819 --> 00:12:33,720
orientation obviously which way it

00:12:31,559 --> 00:12:35,279
should open within the phone like I say

00:12:33,720 --> 00:12:38,100
there are lots of other available ones

00:12:35,279 --> 00:12:39,629
that you can put in to do different

00:12:38,100 --> 00:12:42,739
things but these are kind of the default

00:12:39,629 --> 00:12:42,739
set that you want to start with

00:12:48,760 --> 00:12:55,720
so if you're like actually at this point

00:12:53,410 --> 00:12:59,620
you you've pretty much got a PWA if

00:12:55,720 --> 00:13:02,019
you've done those two things but only if

00:12:59,620 --> 00:13:03,250
you're using Firefox if you're not using

00:13:02,019 --> 00:13:06,070
Firefox then you have to have a

00:13:03,250 --> 00:13:08,230
serviceworker installed so let's talk

00:13:06,070 --> 00:13:10,389
about bags so it's kind of like a

00:13:08,230 --> 00:13:12,790
client-side proxy it essentially sits

00:13:10,389 --> 00:13:16,149
between the browser and the server but

00:13:12,790 --> 00:13:18,279
actually on the client side and it it

00:13:16,149 --> 00:13:20,800
sits in its own execution thread so it's

00:13:18,279 --> 00:13:23,010
separate to JavaScript doesn't it can

00:13:20,800 --> 00:13:25,720
interact with JavaScript and the Dom but

00:13:23,010 --> 00:13:27,339
only through special api's it doesn't

00:13:25,720 --> 00:13:29,560
have direct Dom access because it is in

00:13:27,339 --> 00:13:31,480
its own thread so it's got this

00:13:29,560 --> 00:13:33,070
postmessage api which gives it the

00:13:31,480 --> 00:13:34,329
ability to kind of communicate with the

00:13:33,070 --> 00:13:36,730
other thread that javascript is actually

00:13:34,329 --> 00:13:39,600
running in but generally you kind of

00:13:36,730 --> 00:13:42,790
don't really want it to do that anyway

00:13:39,600 --> 00:13:44,019
the idea of it is that it's it's it's

00:13:42,790 --> 00:13:47,050
there to interact with all your network

00:13:44,019 --> 00:13:49,329
requests so anytime an HTTP request goes

00:13:47,050 --> 00:13:51,160
in or a response comes back it will be

00:13:49,329 --> 00:13:52,660
picked up by your serviceworker and then

00:13:51,160 --> 00:13:54,160
you can do stuff with it

00:13:52,660 --> 00:13:56,190
we'll talk about the kinds of things you

00:13:54,160 --> 00:13:58,569
might want to do with it in a minute

00:13:56,190 --> 00:14:01,389
most commonly used for cache management

00:13:58,569 --> 00:14:06,160
actually storing stuff in the cache not

00:14:01,389 --> 00:14:10,240
just files but data so let's have a look

00:14:06,160 --> 00:14:11,800
at how we do this so this can go in an

00:14:10,240 --> 00:14:12,940
external file but generally we would

00:14:11,800 --> 00:14:17,079
just put this in a script tag in the

00:14:12,940 --> 00:14:18,670
head of your HTML we start by just

00:14:17,079 --> 00:14:20,579
checking that the browser support

00:14:18,670 --> 00:14:23,819
serviceworkers the serviceworker

00:14:20,579 --> 00:14:26,709
property is inside the Navigator global

00:14:23,819 --> 00:14:28,269
if it is then we can call navigate to

00:14:26,709 --> 00:14:30,519
that serviceworker doc register and we

00:14:28,269 --> 00:14:32,380
point it out our serviceworker file so

00:14:30,519 --> 00:14:33,730
that's actually your serviceworker you

00:14:32,380 --> 00:14:35,170
don't actually have to have anything in

00:14:33,730 --> 00:14:37,959
your serviceworker at this point you can

00:14:35,170 --> 00:14:39,579
just register an empty one but it will

00:14:37,959 --> 00:14:41,230
register that as your serviceworker

00:14:39,579 --> 00:14:44,110
you have to give your serviceworker a

00:14:41,230 --> 00:14:46,209
scope which is essentially what it can

00:14:44,110 --> 00:14:48,069
control so you can say this

00:14:46,209 --> 00:14:49,510
serviceworker can only interact with

00:14:48,069 --> 00:14:51,550
network requests coming from a

00:14:49,510 --> 00:14:54,040
particular file or a particular folder

00:14:51,550 --> 00:14:57,670
or if you just give it root access like

00:14:54,040 --> 00:14:59,890
everything you can yeah it's all promise

00:14:57,670 --> 00:15:02,230
based so that returns a promise which

00:14:59,890 --> 00:15:02,649
obviously successful means that its

00:15:02,230 --> 00:15:05,170
installed

00:15:02,649 --> 00:15:07,749
Service Worker or failure falls into the

00:15:05,170 --> 00:15:09,249
catch and it hasn't because whatever

00:15:07,749 --> 00:15:11,199
reason maybe you've got an invalid

00:15:09,249 --> 00:15:12,910
service worker and I just put a little

00:15:11,199 --> 00:15:15,550
console to login for the else so if it's

00:15:12,910 --> 00:15:17,709
not supported yeah that's it we're done

00:15:15,550 --> 00:15:19,360
like you don't need anything else in all

00:15:17,709 --> 00:15:21,519
browsers now provided they actually

00:15:19,360 --> 00:15:23,769
supports all these technologies you you

00:15:21,519 --> 00:15:25,600
could actually that's the NASA pwa now

00:15:23,769 --> 00:15:27,220
you go to your web application the

00:15:25,600 --> 00:15:30,249
prompt will pop up and you can install

00:15:27,220 --> 00:15:33,309
it and naturally you're done but

00:15:30,249 --> 00:15:35,259
probably not because you probably want

00:15:33,309 --> 00:15:36,490
the service worker to do some stuff so

00:15:35,259 --> 00:15:39,339
let's talk about some of the things that

00:15:36,490 --> 00:15:40,629
we can do with the service worker as I

00:15:39,339 --> 00:15:43,569
said earlier the most common thing you

00:15:40,629 --> 00:15:45,550
would do with it it's cash management so

00:15:43,569 --> 00:15:47,319
once you're inside the service worker

00:15:45,550 --> 00:15:49,029
file that you've just registered you've

00:15:47,319 --> 00:15:50,949
got this global called self which

00:15:49,029 --> 00:15:52,779
essentially refers to the service worker

00:15:50,949 --> 00:15:55,179
and comes with a whole bunch of events

00:15:52,779 --> 00:15:57,670
and functionality methods and things you

00:15:55,179 --> 00:15:59,860
can call on it so here I'm listening for

00:15:57,670 --> 00:16:01,929
the install event so on obviously fires

00:15:59,860 --> 00:16:06,040
as the service worker itself is being

00:16:01,929 --> 00:16:08,790
installed the event that comes back from

00:16:06,040 --> 00:16:11,139
that has this method called wait until

00:16:08,790 --> 00:16:13,120
which basically allows you to do stuff

00:16:11,139 --> 00:16:14,620
whilst it's installing and it won't have

00:16:13,120 --> 00:16:17,019
finished installing until you've run

00:16:14,620 --> 00:16:20,079
that code so all I'm doing here is

00:16:17,019 --> 00:16:24,300
looking into the cache API opening a new

00:16:20,079 --> 00:16:26,920
cache and adding CSS file to the cache

00:16:24,300 --> 00:16:28,540
so now that's available offline I don't

00:16:26,920 --> 00:16:31,480
have to go to the network to go and get

00:16:28,540 --> 00:16:34,179
that cs4 s file ever again we can also

00:16:31,480 --> 00:16:37,449
hook into the fetch event which is the

00:16:34,179 --> 00:16:39,579
HTTP request event this event does fire

00:16:37,449 --> 00:16:44,439
whether you're using XML HTTP request

00:16:39,579 --> 00:16:46,779
object or the newer fetch this will yeah

00:16:44,439 --> 00:16:47,920
hook into literally every single HTTP

00:16:46,779 --> 00:16:49,929
request whether it's done from your

00:16:47,920 --> 00:16:52,449
JavaScript or by the browser every

00:16:49,929 --> 00:16:57,069
request will come through this event so

00:16:52,449 --> 00:16:58,869
here I'm hooking into the event and I'm

00:16:57,069 --> 00:17:01,360
checking whether the thing that the

00:16:58,869 --> 00:17:03,699
fetch is looking for is already in my

00:17:01,360 --> 00:17:05,980
cache so if the event is for that CSS

00:17:03,699 --> 00:17:08,079
file that I've just cached it will get

00:17:05,980 --> 00:17:10,630
it out of my cache and return it so it's

00:17:08,079 --> 00:17:12,429
returning my actual cached file if it's

00:17:10,630 --> 00:17:14,829
not in my cache then it'll just forward

00:17:12,429 --> 00:17:16,230
on the fetch request by literally using

00:17:14,829 --> 00:17:18,360
the fetch method

00:17:16,230 --> 00:17:19,819
and doing event requests and just kind

00:17:18,360 --> 00:17:22,890
of forwarding it onto the actual network

00:17:19,819 --> 00:17:24,750
so now I don't have to go back to the

00:17:22,890 --> 00:17:26,730
network to reget my CSS file every time

00:17:24,750 --> 00:17:31,200
I just pull it out of my service workers

00:17:26,730 --> 00:17:32,700
cache so that's kind of basic use of a

00:17:31,200 --> 00:17:34,679
service worker but we can do a lot more

00:17:32,700 --> 00:17:37,440
with it we can actually control our HTTP

00:17:34,679 --> 00:17:38,700
requests and do some quite more exciting

00:17:37,440 --> 00:17:41,640
things with it and this is where the

00:17:38,700 --> 00:17:44,309
real speed gains can be can come from so

00:17:41,640 --> 00:17:46,340
how about if we want to only get data

00:17:44,309 --> 00:17:48,360
from the API once every five minutes

00:17:46,340 --> 00:17:50,460
because the date doesn't update that

00:17:48,360 --> 00:17:52,080
often we don't need to re get the data

00:17:50,460 --> 00:17:54,840
on every new page or every time we our

00:17:52,080 --> 00:17:56,910
user interacts rather than actually

00:17:54,840 --> 00:17:58,950
editing our pre are already built

00:17:56,910 --> 00:18:00,780
application our Java Script we can do

00:17:58,950 --> 00:18:02,429
that in the serviceworker so as far as

00:18:00,780 --> 00:18:04,020
the application is concerned it's still

00:18:02,429 --> 00:18:06,770
going to the network and getting the

00:18:04,020 --> 00:18:09,780
data but actually the service workers

00:18:06,770 --> 00:18:12,000
returning with that data instead so I've

00:18:09,780 --> 00:18:14,040
just chucked an if statement in here

00:18:12,000 --> 00:18:16,169
that just checks if the last time that a

00:18:14,040 --> 00:18:18,510
request was done was more than five

00:18:16,169 --> 00:18:20,429
minutes ago then actually go and get the

00:18:18,510 --> 00:18:24,090
data and if it's not we can just return

00:18:20,429 --> 00:18:25,440
the previous data from the cache kind of

00:18:24,090 --> 00:18:28,740
the life cycle of what's going on here

00:18:25,440 --> 00:18:31,650
is you make an initial request for the

00:18:28,740 --> 00:18:34,110
API you get that data you store the data

00:18:31,650 --> 00:18:35,960
and then display it so you still the

00:18:34,110 --> 00:18:39,270
data somewhere in a cache or something

00:18:35,960 --> 00:18:41,820
user performs either a refresh or page

00:18:39,270 --> 00:18:45,840
change or some interaction which

00:18:41,820 --> 00:18:47,610
requires the data again the service

00:18:45,840 --> 00:18:48,990
worker then picks up on the fetch

00:18:47,610 --> 00:18:51,390
request where you're trying to go back

00:18:48,990 --> 00:18:53,640
and get that data and can decide how to

00:18:51,390 --> 00:18:54,750
respond yeah we've already got that data

00:18:53,640 --> 00:18:57,059
in the cache we'll just give it back or

00:18:54,750 --> 00:19:00,929
no that day is more than five minutes

00:18:57,059 --> 00:19:03,090
old so we'll go and get to new data the

00:19:00,929 --> 00:19:04,710
serviceworker responds with the data as

00:19:03,090 --> 00:19:06,870
far as your actual application is

00:19:04,710 --> 00:19:09,000
concerned it's the date from the network

00:19:06,870 --> 00:19:10,470
he doesn't know any different and then

00:19:09,000 --> 00:19:14,370
obviously your application just updates

00:19:10,470 --> 00:19:16,350
the UI as normal so the bit we actually

00:19:14,370 --> 00:19:18,120
need to talk about is this bold bit of

00:19:16,350 --> 00:19:20,100
here the whole like stores data thing

00:19:18,120 --> 00:19:22,770
like how does that happen there's a

00:19:20,100 --> 00:19:26,730
couple of different client-side data

00:19:22,770 --> 00:19:28,770
storage things see there's the

00:19:26,730 --> 00:19:30,010
serviceworker cache which we've just

00:19:28,770 --> 00:19:31,570
been talking about

00:19:30,010 --> 00:19:35,020
this is generally designed for storing

00:19:31,570 --> 00:19:37,330
files you can actually store data you

00:19:35,020 --> 00:19:38,740
can like on-the-fly generate JSON files

00:19:37,330 --> 00:19:43,450
and store them in the serviceworker

00:19:38,740 --> 00:19:45,790
cache don't do this like the the Jason

00:19:43,450 --> 00:19:49,750
is not searchable it's like a text file

00:19:45,790 --> 00:19:54,070
it's just a terrible idea there's the

00:19:49,750 --> 00:19:56,020
local storage API it's a synchronous API

00:19:54,070 --> 00:19:58,030
so therefore it doesn't work from the

00:19:56,020 --> 00:20:00,760
serviceworker serviceworker has only got

00:19:58,030 --> 00:20:02,860
access to asynchronous api's so you

00:20:00,760 --> 00:20:05,320
actually can't use this one a lot of

00:20:02,860 --> 00:20:06,840
people already using the local storage

00:20:05,320 --> 00:20:08,050
API on the front end to store their data

00:20:06,840 --> 00:20:10,780
sorry

00:20:08,050 --> 00:20:13,330
can't use it from your serviceworker so

00:20:10,780 --> 00:20:14,980
instead what we want is indexdb which is

00:20:13,330 --> 00:20:18,430
an asynchronous front-end database

00:20:14,980 --> 00:20:21,520
basically it's a database that runs in

00:20:18,430 --> 00:20:24,250
your browser it's an asynchronous API so

00:20:21,520 --> 00:20:26,230
we can store data in it from the

00:20:24,250 --> 00:20:28,600
serviceworker and then it's indexable

00:20:26,230 --> 00:20:31,420
it's searchable and it's much quicker

00:20:28,600 --> 00:20:35,020
than just JSON files so let's talk a

00:20:31,420 --> 00:20:36,760
little bit about indexeddb so as I said

00:20:35,020 --> 00:20:41,350
it's a client-side database it's

00:20:36,760 --> 00:20:45,190
designed to store large amounts of data

00:20:41,350 --> 00:20:47,350
in usually JSON format like I've given

00:20:45,190 --> 00:20:48,700
this talk a few times and at one point I

00:20:47,350 --> 00:20:50,260
was like yeah it stores large amounts of

00:20:48,700 --> 00:20:54,190
data and somebody was like so I work

00:20:50,260 --> 00:20:55,780
with 10 billion rows not that much there

00:20:54,190 --> 00:20:56,920
are limits to how much data you can

00:20:55,780 --> 00:21:01,300
store and we're going to talk about the

00:20:56,920 --> 00:21:03,460
limitations in a bit but yeah it will

00:21:01,300 --> 00:21:07,390
manage reasonably large amounts of data

00:21:03,460 --> 00:21:09,760
for a front-end application at least it

00:21:07,390 --> 00:21:11,560
yeah it uses indexes so it Auto indexes

00:21:09,760 --> 00:21:13,660
the data that you put in like a

00:21:11,560 --> 00:21:15,040
relational database would which means

00:21:13,660 --> 00:21:18,760
that actually is pretty high performance

00:21:15,040 --> 00:21:20,620
as far as searching is concerned it's

00:21:18,760 --> 00:21:23,530
yeah it's asynchronous promise based API

00:21:20,620 --> 00:21:25,690
so therefore all works nicely from the

00:21:23,530 --> 00:21:27,970
serviceworker and it's actually a

00:21:25,690 --> 00:21:29,380
permanent data storage this one took me

00:21:27,970 --> 00:21:33,040
a while to find out whether there was

00:21:29,380 --> 00:21:35,110
actually a limit but the data that you

00:21:33,040 --> 00:21:37,120
put in there we'll just never disappear

00:21:35,110 --> 00:21:38,560
it's not like a session storage or

00:21:37,120 --> 00:21:39,850
something like that where it'll expire

00:21:38,560 --> 00:21:41,770
after certain amount of time but you put

00:21:39,850 --> 00:21:44,230
something into index D being it's just

00:21:41,770 --> 00:21:46,179
it's there for the rest verbs ever

00:21:44,230 --> 00:21:49,900
unless you know they uninstall Chrome or

00:21:46,179 --> 00:21:53,080
they clear all of their browser data

00:21:49,900 --> 00:21:55,630
it's actually a permanent storage as far

00:21:53,080 --> 00:21:59,440
as performance it can do about 1k reads

00:21:55,630 --> 00:22:01,480
per second so if anybody does actual

00:21:59,440 --> 00:22:02,950
performance analysis you'll know that

00:22:01,480 --> 00:22:05,320
that's not super fast for a back-end

00:22:02,950 --> 00:22:09,490
application but pretty quick for a

00:22:05,320 --> 00:22:11,620
front-end one the right speed depends on

00:22:09,490 --> 00:22:13,900
the amount of data that you're writing

00:22:11,620 --> 00:22:16,480
and the device that you're using

00:22:13,900 --> 00:22:19,900
actually so there's I can't give you any

00:22:16,480 --> 00:22:25,270
stats on how fast a is but it's faster

00:22:19,900 --> 00:22:27,720
than going to the network so let's have

00:22:25,270 --> 00:22:32,799
a look at some code as to how we do it

00:22:27,720 --> 00:22:34,960
I'm using a library called local forage

00:22:32,799 --> 00:22:37,240
with an F which is like local storage

00:22:34,960 --> 00:22:39,940
but with an F then it makes indexdb like

00:22:37,240 --> 00:22:42,520
easy to do don't try and do this without

00:22:39,940 --> 00:22:46,120
library I did it doesn't fit on the

00:22:42,520 --> 00:22:48,280
slides it's not nice code so yeah I'm

00:22:46,120 --> 00:22:51,340
using local for it so here literally

00:22:48,280 --> 00:22:53,020
just set my date missed transaction you

00:22:51,340 --> 00:22:54,100
have to give it essentially you give it

00:22:53,020 --> 00:22:54,700
the name of the database that you want

00:22:54,100 --> 00:22:56,380
to create

00:22:54,700 --> 00:22:58,900
so obviously I'm using a to-do list

00:22:56,380 --> 00:23:00,160
application you give it the permissions

00:22:58,900 --> 00:23:01,840
that you want so I'm giving readwrite

00:23:00,160 --> 00:23:03,460
and then you give it the table so

00:23:01,840 --> 00:23:06,130
objects store is like your table if

00:23:03,460 --> 00:23:08,020
you're used to relational databases for

00:23:06,130 --> 00:23:09,280
clarity sake I called my database and my

00:23:08,020 --> 00:23:10,540
table the same thing

00:23:09,280 --> 00:23:12,100
once you've then once you've connected

00:23:10,540 --> 00:23:13,299
to your database you've got your your

00:23:12,100 --> 00:23:15,400
tip your database and your table

00:23:13,299 --> 00:23:17,679
connection you then just call add and

00:23:15,400 --> 00:23:19,929
kind of Chuck data at it and it'll just

00:23:17,679 --> 00:23:21,429
store that data it's kind of if you've

00:23:19,929 --> 00:23:23,530
used like document storage databases

00:23:21,429 --> 00:23:24,820
like very similar principle you

00:23:23,530 --> 00:23:27,490
just call add and here's some Jason

00:23:24,820 --> 00:23:29,350
thanks and it will literally store those

00:23:27,490 --> 00:23:33,220
key value pairs in a more relational

00:23:29,350 --> 00:23:35,710
kind of style way of doing it when you

00:23:33,220 --> 00:23:37,030
call add you can specify the key as the

00:23:35,710 --> 00:23:39,010
second argument so you can taste all

00:23:37,030 --> 00:23:40,390
this in key one or you can just omit the

00:23:39,010 --> 00:23:44,230
key and it will just auto generate in

00:23:40,390 --> 00:23:46,809
the next row then to get back out so

00:23:44,230 --> 00:23:49,809
literally just get key done there you go

00:23:46,809 --> 00:23:51,309
there's their next that key there is a

00:23:49,809 --> 00:23:53,500
whole bunch of other like searching

00:23:51,309 --> 00:23:55,900
features where you can say like give me

00:23:53,500 --> 00:23:57,880
all of the rows where the name is Mike

00:23:55,900 --> 00:24:02,140
or the name starts with M or you

00:23:57,880 --> 00:24:04,210
do like some more SQL e-type querying I

00:24:02,140 --> 00:24:08,230
haven't got any examples of that but you

00:24:04,210 --> 00:24:11,020
can't do it and depending on the kinds

00:24:08,230 --> 00:24:15,660
of querying you do you get mixed results

00:24:11,020 --> 00:24:18,400
in speed sometimes you crash chrome cool

00:24:15,660 --> 00:24:20,560
so yeah and then in addition to get

00:24:18,400 --> 00:24:23,110
we've got the put so updating

00:24:20,560 --> 00:24:26,950
essentially so here I've just changed

00:24:23,110 --> 00:24:28,930
the name of the day that I just got back

00:24:26,950 --> 00:24:31,480
out and then called put with the key of

00:24:28,930 --> 00:24:36,190
one and that just updates that row for

00:24:31,480 --> 00:24:40,120
us so fairly fairly simple to use so

00:24:36,190 --> 00:24:41,500
let's go back and have a look at the

00:24:40,120 --> 00:24:42,910
code that we had earlier where we were

00:24:41,500 --> 00:24:45,790
only calling the API every five minutes

00:24:42,910 --> 00:24:46,840
now that we know how to use indexdb we

00:24:45,790 --> 00:24:49,720
can actually start to put the two

00:24:46,840 --> 00:24:52,170
together so here I'm doing if the

00:24:49,720 --> 00:24:54,550
request is older than five minutes

00:24:52,170 --> 00:24:57,640
forward the request on so actually go to

00:24:54,550 --> 00:24:59,110
the network and get the data once we've

00:24:57,640 --> 00:25:01,660
got the response so we've got the

00:24:59,110 --> 00:25:05,830
response data here I'm adding the

00:25:01,660 --> 00:25:07,210
response data into index DB so I'm just

00:25:05,830 --> 00:25:09,160
saving it for later so it's now offline

00:25:07,210 --> 00:25:11,650
and then I'm just returning the response

00:25:09,160 --> 00:25:13,420
and so just send the response on once

00:25:11,650 --> 00:25:14,890
I've saved it I'm gonna also send it on

00:25:13,420 --> 00:25:18,850
so that our front-end JavaScript

00:25:14,890 --> 00:25:21,040
actually has the data as well otherwise

00:25:18,850 --> 00:25:23,530
it's not older than five minutes if it's

00:25:21,040 --> 00:25:25,840
a recent request then all we're going to

00:25:23,530 --> 00:25:29,080
do is just call the get request with the

00:25:25,840 --> 00:25:31,660
ID from the request body get the day out

00:25:29,080 --> 00:25:34,090
of index DB and give it back to us so

00:25:31,660 --> 00:25:36,820
not not actually too much code in order

00:25:34,090 --> 00:25:37,600
to get that working so let's talk a

00:25:36,820 --> 00:25:38,800
little bit more about offline

00:25:37,600 --> 00:25:40,630
development so the things that we've

00:25:38,800 --> 00:25:42,700
done so far obviously are the beginnings

00:25:40,630 --> 00:25:44,020
of offline development the whole five

00:25:42,700 --> 00:25:46,540
minute thing was just an arbitrary thing

00:25:44,020 --> 00:25:48,160
I made up but actually unless you are

00:25:46,540 --> 00:25:50,590
going to the network that would entirely

00:25:48,160 --> 00:25:53,740
work offline if we cached all of our

00:25:50,590 --> 00:25:55,450
files all of our static files like our

00:25:53,740 --> 00:25:57,610
CSS and our images and then we've got a

00:25:55,450 --> 00:25:58,990
data stored in our front-end database we

00:25:57,610 --> 00:26:00,160
just don't need the network anymore on

00:25:58,990 --> 00:26:04,600
our application we'll just run

00:26:00,160 --> 00:26:05,830
completely offline so there are some

00:26:04,600 --> 00:26:08,110
implications that we need to think about

00:26:05,830 --> 00:26:10,210
when we're doing this kind of thing most

00:26:08,110 --> 00:26:11,130
importantly is the UX implication of

00:26:10,210 --> 00:26:13,620
this

00:26:11,130 --> 00:26:19,169
if you're doing something like financial

00:26:13,620 --> 00:26:22,710
data or train times probably don't tell

00:26:19,169 --> 00:26:24,330
the user it's live data or probably tell

00:26:22,710 --> 00:26:26,240
them it's not live data more importantly

00:26:24,330 --> 00:26:28,799
because we all know what trains are like

00:26:26,240 --> 00:26:30,990
so yeah there's a big UX implication of

00:26:28,799 --> 00:26:35,370
this so we're gonna talk about how you

00:26:30,990 --> 00:26:37,049
do that okay

00:26:35,370 --> 00:26:38,580
so let's have a quick look at how we

00:26:37,049 --> 00:26:42,919
actually make this kind of work with

00:26:38,580 --> 00:26:45,059
offline stuff so here my fetch request

00:26:42,919 --> 00:26:46,980
that's actually going to the network to

00:26:45,059 --> 00:26:49,860
get the data obviously this will fail if

00:26:46,980 --> 00:26:53,429
you're not connect to the internet so we

00:26:49,860 --> 00:26:54,960
need to handle that scenario I ran out

00:26:53,429 --> 00:26:58,020
of room on my slides so just imagine

00:26:54,960 --> 00:26:59,100
we're in that purple bit now it's

00:26:58,020 --> 00:27:01,140
actually really easy the fetch request

00:26:59,100 --> 00:27:03,720
will just fall into the catch if it

00:27:01,140 --> 00:27:05,580
fails so in the catch we can just go and

00:27:03,720 --> 00:27:09,270
get the day out of indexdb again and you

00:27:05,580 --> 00:27:12,120
like look is there it's done yeah it's

00:27:09,270 --> 00:27:14,220
actually that was a bit fairly easy but

00:27:12,120 --> 00:27:15,809
I just couldn't fit all in one slide the

00:27:14,220 --> 00:27:18,870
fetch request within the serviceworker

00:27:15,809 --> 00:27:20,100
is really responsive to offline and

00:27:18,870 --> 00:27:22,200
it'll actually detect whether the

00:27:20,100 --> 00:27:23,909
application is connected to the Internet

00:27:22,200 --> 00:27:25,350
rather than trying and waiting and

00:27:23,909 --> 00:27:26,460
hanging and then failing it will just go

00:27:25,350 --> 00:27:27,900
no you're not online I'm just going to

00:27:26,460 --> 00:27:30,360
fail straight away so it's actually a

00:27:27,900 --> 00:27:31,830
very fast response as to falling into

00:27:30,360 --> 00:27:35,820
the catch once it's failed and it's

00:27:31,830 --> 00:27:39,210
returned with the offline data obviously

00:27:35,820 --> 00:27:41,039
don't forget to update you UI we can do

00:27:39,210 --> 00:27:43,890
that actually in our application with

00:27:41,039 --> 00:27:46,230
our front-end JavaScript code because

00:27:43,890 --> 00:27:48,659
we've got these two events that have

00:27:46,230 --> 00:27:51,929
been added the online and the offline

00:27:48,659 --> 00:27:53,880
events which fire on the window anytime

00:27:51,929 --> 00:27:55,260
that your application moves from being

00:27:53,880 --> 00:27:56,580
online or offline friendly enough

00:27:55,260 --> 00:28:00,809
so here I've just create a quick

00:27:56,580 --> 00:28:02,549
function which displays a message or a

00:28:00,809 --> 00:28:05,520
pop-up or whatever if you're online or

00:28:02,549 --> 00:28:08,400
if you're offline or hides it if you're

00:28:05,520 --> 00:28:10,230
online so if you just chuck that into

00:28:08,400 --> 00:28:11,669
your front-end code then anytime that

00:28:10,230 --> 00:28:13,530
your application goes offline it'll just

00:28:11,669 --> 00:28:15,090
pop up and say yeah you're now offline

00:28:13,530 --> 00:28:18,030
and we're just serving you old data

00:28:15,090 --> 00:28:20,159
until you go back online obviously very

00:28:18,030 --> 00:28:23,970
important so let's have a look at the

00:28:20,159 --> 00:28:24,960
the workflow the lifecycle again so now

00:28:23,970 --> 00:28:27,799
we've got only Shore

00:28:24,960 --> 00:28:30,360
Qwest going out to the API to get data

00:28:27,799 --> 00:28:32,250
the data comes back in the API response

00:28:30,360 --> 00:28:34,919
we're grabbing that data we're storing

00:28:32,250 --> 00:28:37,490
it in index DB and then we're forwarding

00:28:34,919 --> 00:28:40,039
it on actually to our front-end user

00:28:37,490 --> 00:28:43,260
performs a interaction with the page

00:28:40,039 --> 00:28:46,350
which requires the data again the

00:28:43,260 --> 00:28:48,419
service worker picks up that request it

00:28:46,350 --> 00:28:51,240
tries to get it from the network if it

00:28:48,419 --> 00:28:54,570
can't it will fall back to index DB and

00:28:51,240 --> 00:28:55,980
just return the data from index DB and

00:28:54,570 --> 00:28:57,330
then once it's returned the data

00:28:55,980 --> 00:29:00,149
regardless of whether it comes from the

00:28:57,330 --> 00:29:02,309
network or from index DB the front end

00:29:00,149 --> 00:29:09,179
has no idea it just updates the front

00:29:02,309 --> 00:29:11,940
end or seems to work so there are other

00:29:09,179 --> 00:29:14,279
parts of the service worker background

00:29:11,940 --> 00:29:15,140
sync is a particularly useful part of

00:29:14,279 --> 00:29:18,779
the Service Worker

00:29:15,140 --> 00:29:20,669
this code is every other bit of code in

00:29:18,779 --> 00:29:21,720
this talk will actually work if you were

00:29:20,669 --> 00:29:24,240
to copy and paste it straight into

00:29:21,720 --> 00:29:26,429
application this does not this is Dyke

00:29:24,240 --> 00:29:29,340
pseudo code representation because it

00:29:26,429 --> 00:29:30,960
does not fail in the slide so here's my

00:29:29,340 --> 00:29:32,940
app Jess which is my actual like

00:29:30,960 --> 00:29:35,309
front-end JavaScript code where I'm

00:29:32,940 --> 00:29:37,140
clicking on a button and I want to make

00:29:35,309 --> 00:29:39,029
effect requests to update the train data

00:29:37,140 --> 00:29:41,370
for example like a refresh button for

00:29:39,029 --> 00:29:44,039
example rather than just doing the fetch

00:29:41,370 --> 00:29:46,919
request straight in my app Jess what I'm

00:29:44,039 --> 00:29:49,230
doing is cooling registration don't

00:29:46,919 --> 00:29:53,730
think that register which registers a

00:29:49,230 --> 00:29:55,380
sink request with your service worker so

00:29:53,730 --> 00:29:57,510
then in our service worker we've got

00:29:55,380 --> 00:30:00,360
this event called sink which will pick

00:29:57,510 --> 00:30:02,580
up pick that up we can hook in to the

00:30:00,360 --> 00:30:05,130
event tag to see is it the same as the

00:30:02,580 --> 00:30:07,140
thing that we've registered and if it is

00:30:05,130 --> 00:30:09,750
we can then use event that wait until

00:30:07,140 --> 00:30:11,370
and call the function now this function

00:30:09,750 --> 00:30:12,539
is essentially the same front end

00:30:11,370 --> 00:30:14,669
function that you've already written

00:30:12,539 --> 00:30:16,710
that was doing your fetch request so you

00:30:14,669 --> 00:30:18,390
don't have to change that bit you just

00:30:16,710 --> 00:30:20,909
cool it from your service work instead

00:30:18,390 --> 00:30:22,710
of your app and what will happen is if

00:30:20,909 --> 00:30:25,860
you're offline when they click that

00:30:22,710 --> 00:30:27,539
button it will just wait until you come

00:30:25,860 --> 00:30:29,850
online and then it will make the request

00:30:27,539 --> 00:30:31,230
in the background and that will happen

00:30:29,850 --> 00:30:33,090
not just in the background like if

00:30:31,230 --> 00:30:35,820
you're sat there waiting it will they

00:30:33,090 --> 00:30:37,500
can close the app they can put like go

00:30:35,820 --> 00:30:38,700
and do something and it will just send

00:30:37,500 --> 00:30:41,040
the request when you

00:30:38,700 --> 00:30:42,390
come back online so you don't actually

00:30:41,040 --> 00:30:43,590
even have to have this running it

00:30:42,390 --> 00:30:45,900
doesn't have to be in the foreground if

00:30:43,590 --> 00:30:47,190
your app your phone it'll just say yeah

00:30:45,900 --> 00:30:48,600
we've registered that as a background

00:30:47,190 --> 00:30:50,430
sync thing you can now go and do other

00:30:48,600 --> 00:30:53,340
stuff you can leave the page you can

00:30:50,430 --> 00:30:56,150
close it and it will just sync when you

00:30:53,340 --> 00:30:56,150
come back online later

00:30:57,110 --> 00:31:02,370
it's more complicated than that code

00:30:59,400 --> 00:31:03,390
it's actually really hard to do this but

00:31:02,370 --> 00:31:08,520
it doesn't fit on the slide but that's

00:31:03,390 --> 00:31:10,920
kind of it that's like the idea of it so

00:31:08,520 --> 00:31:12,720
let's talk about some of the some of the

00:31:10,920 --> 00:31:14,280
limitations of pwace because so far I've

00:31:12,720 --> 00:31:16,880
been like yeah they're amazing but there

00:31:14,280 --> 00:31:20,600
are obviously downsides to these things

00:31:16,880 --> 00:31:23,250
limited storage is the biggest one so

00:31:20,600 --> 00:31:25,890
offline data and so offline data and

00:31:23,250 --> 00:31:29,040
files so indexdb and the serviceworker

00:31:25,890 --> 00:31:31,140
cache and kind of any other things that

00:31:29,040 --> 00:31:33,720
you're storing actually there's a limit

00:31:31,140 --> 00:31:35,970
to how much you can you can do that so

00:31:33,720 --> 00:31:40,170
on Android you can store anything less

00:31:35,970 --> 00:31:43,650
than two gigabytes and then each browser

00:31:40,170 --> 00:31:45,630
has their own specific requirements for

00:31:43,650 --> 00:31:47,220
that as well so if you're using chrome

00:31:45,630 --> 00:31:49,080
on Android then it's less than six

00:31:47,220 --> 00:31:51,800
percent of the available free space

00:31:49,080 --> 00:31:52,920
provided that that's less than two gigs

00:31:51,800 --> 00:31:55,080
yep

00:31:52,920 --> 00:31:58,800
cool good same on the others obviously

00:31:55,080 --> 00:32:00,390
Safari is iOS so iOS is just you

00:31:58,800 --> 00:32:04,890
couldn't only saw up to 50 Megan asked

00:32:00,390 --> 00:32:08,770
that I attend yeah this that does

00:32:04,890 --> 00:32:13,450
support this yes

00:32:08,770 --> 00:32:16,530
yes I tend yeah only 250 Meg's better

00:32:13,450 --> 00:32:21,400
than IRS but still not a massive amount

00:32:16,530 --> 00:32:23,200
so edge they have like this if you go

00:32:21,400 --> 00:32:25,030
and look this up they have this table

00:32:23,200 --> 00:32:26,200
where they're like this is how much data

00:32:25,030 --> 00:32:27,910
you can store and it's really

00:32:26,200 --> 00:32:29,500
complicated and it's all to do it like

00:32:27,910 --> 00:32:31,600
if you've got a device that runs at this

00:32:29,500 --> 00:32:33,790
many gigahertz per second in a field and

00:32:31,600 --> 00:32:36,820
the wind is blowing East then you can

00:32:33,790 --> 00:32:38,200
store this much data if you happen to be

00:32:36,820 --> 00:32:39,670
wearing a pink shirt you could install

00:32:38,200 --> 00:32:41,380
that much it like it's just really

00:32:39,670 --> 00:32:43,780
complicated algorithm no but I did I

00:32:41,380 --> 00:32:45,610
didn't understand it I don't actually

00:32:43,780 --> 00:32:51,100
have a clue how much day you can store I

00:32:45,610 --> 00:32:55,270
couldn't figure out any part of it so

00:32:51,100 --> 00:32:57,340
yeah the difference the only plus side

00:32:55,270 --> 00:32:59,470
of this actually is that on desktop

00:32:57,340 --> 00:33:00,880
devices there's unlimited storage

00:32:59,470 --> 00:33:02,110
none of these applied we can just saw

00:33:00,880 --> 00:33:04,570
whatever we like because it's a desktop

00:33:02,110 --> 00:33:07,060
obviously well limited by the amount of

00:33:04,570 --> 00:33:10,360
hard drive space you have other

00:33:07,060 --> 00:33:14,410
limitations iOS just like likes to

00:33:10,360 --> 00:33:15,700
randomly delete your data yeah yeah so

00:33:14,410 --> 00:33:18,310
if you don't use the application for a

00:33:15,700 --> 00:33:19,240
while the PWA for it's like they change

00:33:18,310 --> 00:33:20,590
the amount of time but it's like a

00:33:19,240 --> 00:33:22,000
couple of weeks like two or three weeks

00:33:20,590 --> 00:33:23,410
they'll just like yeah you probably

00:33:22,000 --> 00:33:25,360
didn't don't need that anymore we're

00:33:23,410 --> 00:33:27,940
just gonna do all your data it's not

00:33:25,360 --> 00:33:29,560
like a big problem because it's just

00:33:27,940 --> 00:33:31,930
front-end data anyway hopefully you're

00:33:29,560 --> 00:33:35,020
storing your data on your back-end like

00:33:31,930 --> 00:33:38,230
you should be it doesn't remove it from

00:33:35,020 --> 00:33:40,780
the homescreen can't do the home screen

00:33:38,230 --> 00:33:42,520
and stuff yet but it doesn't like remove

00:33:40,780 --> 00:33:44,110
the fact that the app is installed it

00:33:42,520 --> 00:33:46,780
just like removes all the cache data and

00:33:44,110 --> 00:33:47,980
all the indexeddb data so then when they

00:33:46,780 --> 00:33:49,540
go back into it you just have to

00:33:47,980 --> 00:33:50,500
redownload all that stuff but all that

00:33:49,540 --> 00:33:52,300
haven't in the background so it's not

00:33:50,500 --> 00:33:55,630
like a big problem but it does mean that

00:33:52,300 --> 00:33:56,560
if you had accession data or if it you

00:33:55,630 --> 00:33:57,790
were remembering the fact they were

00:33:56,560 --> 00:34:00,370
logged into an account or something it

00:33:57,790 --> 00:34:04,660
would lock them out so that's a bit of a

00:34:00,370 --> 00:34:07,270
pain and then the big one this is

00:34:04,660 --> 00:34:09,970
primarily the reason that Adam didn't

00:34:07,270 --> 00:34:11,380
pick PW A's and went down the react

00:34:09,970 --> 00:34:14,820
native one is obviously the limited

00:34:11,380 --> 00:34:17,200
native access so with react native

00:34:14,820 --> 00:34:18,310
obviously with through ionic you have

00:34:17,200 --> 00:34:20,429
access to a lot of the native

00:34:18,310 --> 00:34:23,099
functionality of a mobile phone

00:34:20,429 --> 00:34:26,970
or a device with pwace we still are

00:34:23,099 --> 00:34:28,440
limited by the browser web api's if you

00:34:26,970 --> 00:34:29,520
came to my talk last year where I hacked

00:34:28,440 --> 00:34:33,089
everybody's phones you'll know that

00:34:29,520 --> 00:34:36,059
they're getting better but it's still

00:34:33,089 --> 00:34:38,940
kind of not there so at the moment from

00:34:36,059 --> 00:34:41,099
your serviceworker you don't have access

00:34:38,940 --> 00:34:42,779
to this is actually wrong you do have

00:34:41,099 --> 00:34:44,520
access to Bluetooth now because I did

00:34:42,779 --> 00:34:46,559
that accidentally you'll know a bit few

00:34:44,520 --> 00:34:48,149
if you saw it before so you can actually

00:34:46,559 --> 00:34:50,700
access bluetooth but there's no access

00:34:48,149 --> 00:34:54,319
to things like your fingerprint scanner

00:34:50,700 --> 00:34:57,420
the face ID stuff no native storage app

00:34:54,319 --> 00:35:00,930
access no camera access like all the

00:34:57,420 --> 00:35:03,270
things you want you can't do but it's

00:35:00,930 --> 00:35:06,180
it's coming like it's not here yet but

00:35:03,270 --> 00:35:08,730
most of these things have AP is that

00:35:06,180 --> 00:35:09,960
either already exist and just haven't

00:35:08,730 --> 00:35:12,150
been implemented into the serviceworker

00:35:09,960 --> 00:35:13,589
or they've got api's that are under

00:35:12,150 --> 00:35:16,950
development and will hopefully be here

00:35:13,589 --> 00:35:22,890
soon so it's kind of hopefully this will

00:35:16,950 --> 00:35:24,150
be there soon and then iOS doesn't have

00:35:22,890 --> 00:35:25,559
any push notifications which is

00:35:24,150 --> 00:35:28,680
obviously the big one you can't do this

00:35:25,559 --> 00:35:30,900
in JavaScript that's also coming we're

00:35:28,680 --> 00:35:32,839
just not there yet but hopefully that

00:35:30,900 --> 00:35:36,990
that one will make a big difference I

00:35:32,839 --> 00:35:40,529
think yeah cool if you want to know more

00:35:36,990 --> 00:35:43,829
about like the web app API stuff I did a

00:35:40,529 --> 00:35:47,579
talk here in like December last year all

00:35:43,829 --> 00:35:51,529
about it so let's talk about what this

00:35:47,579 --> 00:35:53,910
actually means for us as developers

00:35:51,529 --> 00:35:56,099
that's funny I wrote this talk for a

00:35:53,910 --> 00:35:57,829
back-end meetup and I've got a note here

00:35:56,099 --> 00:36:00,349
that says brush up on your JavaScript

00:35:57,829 --> 00:36:04,650
I'm not gonna say that one to you guys

00:36:00,349 --> 00:36:08,250
you're probably better than me so yeah

00:36:04,650 --> 00:36:10,859
JavaScript but kind of primarily what

00:36:08,250 --> 00:36:12,630
does this mean well it means like don't

00:36:10,859 --> 00:36:17,160
get rid of your native applications just

00:36:12,630 --> 00:36:18,720
yet but maybe soon yeah like at the

00:36:17,160 --> 00:36:19,920
moment you're probably like if you're a

00:36:18,720 --> 00:36:21,690
big company you're probably paying like

00:36:19,920 --> 00:36:23,700
a native app team and you're paying a

00:36:21,690 --> 00:36:25,619
JavaScript team to do the web team the

00:36:23,700 --> 00:36:27,240
web stuff and if you've got a desktop

00:36:25,619 --> 00:36:28,920
application as well just loads people

00:36:27,240 --> 00:36:31,470
all those you're probably paying a

00:36:28,920 --> 00:36:33,119
desktop team as well the idea of this

00:36:31,470 --> 00:36:34,299
will be that you can just fire those

00:36:33,119 --> 00:36:38,259
other two teams and just be like

00:36:34,299 --> 00:36:41,349
yeah we're poops if you're a manager

00:36:38,259 --> 00:36:42,880
please don't do that yeah that's kind of

00:36:41,349 --> 00:36:44,109
the big thing is that obviously the idea

00:36:42,880 --> 00:36:46,539
is that it will actually just get rid of

00:36:44,109 --> 00:36:48,549
the need for having different teams and

00:36:46,539 --> 00:36:52,150
you can just build one application and

00:36:48,549 --> 00:36:54,579
just all the JavaScript the desktop

00:36:52,150 --> 00:36:56,650
thing is like super under development

00:36:54,579 --> 00:37:00,670
you can actually do this it's pretty

00:36:56,650 --> 00:37:02,469
cool I don't have any slides on it but

00:37:00,670 --> 00:37:04,179
in chrome like if you go into like

00:37:02,469 --> 00:37:05,439
Chrome's config where you can like mess

00:37:04,179 --> 00:37:06,910
around with all the like internal

00:37:05,439 --> 00:37:09,039
settings of Chrome there's a flag that

00:37:06,910 --> 00:37:11,949
you can turn on and then you can

00:37:09,039 --> 00:37:14,619
actually install your PWA application to

00:37:11,949 --> 00:37:16,630
your actual desktop machine and when it

00:37:14,619 --> 00:37:17,829
works like a desktop application and

00:37:16,630 --> 00:37:19,299
like it'll appear on your Applications

00:37:17,829 --> 00:37:20,890
folder and like you can put it on the

00:37:19,299 --> 00:37:22,569
launch bar and like it actually looks

00:37:20,890 --> 00:37:24,549
like it a desktop application it's

00:37:22,569 --> 00:37:26,380
really cool only works in Chrome and

00:37:24,549 --> 00:37:29,079
it's behind an experimental flag and

00:37:26,380 --> 00:37:31,119
it's super buggy but it's kind of on the

00:37:29,079 --> 00:37:33,759
way obviously the big implication of

00:37:31,119 --> 00:37:36,219
this is it means less Network requests

00:37:33,759 --> 00:37:39,009
less HTTP so therefore faster

00:37:36,219 --> 00:37:41,709
applications that's the that's the main

00:37:39,009 --> 00:37:43,209
reason that we do this because we can

00:37:41,709 --> 00:37:44,920
just castle the stuff now our

00:37:43,209 --> 00:37:46,029
applications work offline and we don't

00:37:44,920 --> 00:37:51,009
have to go to the network and we'd have

00:37:46,029 --> 00:37:53,079
to bug our back-end team so much couple

00:37:51,009 --> 00:37:57,329
of resources on this so there's a

00:37:53,079 --> 00:38:00,309
website called service work dot RS yeah

00:37:57,329 --> 00:38:01,179
this is like got all of the code that

00:38:00,309 --> 00:38:03,189
I've done today

00:38:01,179 --> 00:38:05,079
and loads of other examples just there

00:38:03,189 --> 00:38:09,009
for you the good thing about the service

00:38:05,079 --> 00:38:09,719
worker code is it like it's the same for

00:38:09,009 --> 00:38:12,609
everybody

00:38:09,719 --> 00:38:14,289
obviously there's specifics to do with

00:38:12,609 --> 00:38:17,289
like this fetch request or like the

00:38:14,289 --> 00:38:18,609
files that you want to cache but

00:38:17,289 --> 00:38:19,809
generally most of the code is pretty

00:38:18,609 --> 00:38:20,979
much the same for everyone so you can

00:38:19,809 --> 00:38:23,920
just go here and just Nick their code

00:38:20,979 --> 00:38:25,269
and then just like tweak it so they've

00:38:23,920 --> 00:38:27,670
got examples of pretty much all of the

00:38:25,269 --> 00:38:29,319
different like offline things and and

00:38:27,670 --> 00:38:31,630
push notification stuff and things

00:38:29,319 --> 00:38:35,469
through service workers it's really good

00:38:31,630 --> 00:38:37,359
created by Mozilla sorry do you want to

00:38:35,469 --> 00:38:39,900
take photos of this I don't summer I

00:38:37,359 --> 00:38:39,900
just click

00:38:43,210 --> 00:38:51,200
okay sounds like a terrible idea so the

00:38:50,330 --> 00:38:52,820
stats that we went through at the

00:38:51,200 --> 00:38:55,310
beginning they're all from PWA stats

00:38:52,820 --> 00:38:57,080
comm there's a whole load of case

00:38:55,310 --> 00:39:00,200
studies on there as to people that have

00:38:57,080 --> 00:39:02,390
created PW A's and what they found their

00:39:00,200 --> 00:39:04,060
results were so yeah go and check it out

00:39:02,390 --> 00:39:06,560
it's actually pretty good

00:39:04,060 --> 00:39:09,500
it's updated quite regularly with new

00:39:06,560 --> 00:39:10,970
people doing pwace if you're if you've

00:39:09,500 --> 00:39:12,560
done one or if you're thinking about

00:39:10,970 --> 00:39:15,470
doing one and you do do one please

00:39:12,560 --> 00:39:18,640
submit your data to here because that

00:39:15,470 --> 00:39:20,120
would be really interesting for me great

00:39:18,640 --> 00:39:43,810
and that's it

00:39:20,120 --> 00:39:49,430
any questions yes yeah okay so just

00:39:43,810 --> 00:39:51,650
gonna break my clicker the dead yes okay

00:39:49,430 --> 00:39:54,880
so in order for your application to be

00:39:51,650 --> 00:39:57,140
considered a PW a and therefore for be

00:39:54,880 --> 00:40:00,890
before install prompt event to actually

00:39:57,140 --> 00:40:02,870
fire you have to have these things so

00:40:00,890 --> 00:40:06,320
you have to be running on HTTPS you have

00:40:02,870 --> 00:40:08,720
to have a web app manifest and that's

00:40:06,320 --> 00:40:11,450
actually it in Firefox you don't have to

00:40:08,720 --> 00:40:13,300
have a registered serviceworker you used

00:40:11,450 --> 00:40:15,770
to but they've changed it more recently

00:40:13,300 --> 00:40:17,960
in every other browser you have to have

00:40:15,770 --> 00:40:20,180
a serviceworker as well in order for

00:40:17,960 --> 00:40:22,400
that event to fire but in firefox they

00:40:20,180 --> 00:40:24,560
don't require a serviceworker in order

00:40:22,400 --> 00:40:26,180
to fire that event you just have to have

00:40:24,560 --> 00:40:28,850
a web app manifest and be running on HTS

00:40:26,180 --> 00:40:30,290
and then it will fire the event so it's

00:40:28,850 --> 00:40:32,740
literally just a criteria for firing

00:40:30,290 --> 00:40:32,740
that then

00:40:36,260 --> 00:40:42,060
yes I mean obviously not on iOS but yes

00:40:40,110 --> 00:40:44,250
you can pick up on push notifications

00:40:42,060 --> 00:40:50,670
and yeah and and you can push them too

00:40:44,250 --> 00:40:53,790
to the client yeah so you can accept

00:40:50,670 --> 00:40:56,460
sockets so if you if you've got a socket

00:40:53,790 --> 00:40:59,640
connection you can because they're still

00:40:56,460 --> 00:41:01,050
just through HTTP it will go through

00:40:59,640 --> 00:41:02,460
your service worker and then your

00:41:01,050 --> 00:41:04,920
service worker can pick up that socket

00:41:02,460 --> 00:41:05,340
data and create a push notification with

00:41:04,920 --> 00:41:07,290
it

00:41:05,340 --> 00:41:09,690
so because your service worker actually

00:41:07,290 --> 00:41:13,220
installs to the phone and runs within

00:41:09,690 --> 00:41:15,540
the browser on the device phone whatever

00:41:13,220 --> 00:41:17,880
it's constantly running in the

00:41:15,540 --> 00:41:19,680
background so yeah if you've got a

00:41:17,880 --> 00:41:21,120
socket connection and the socket

00:41:19,680 --> 00:41:22,500
connection pushes to your service worker

00:41:21,120 --> 00:41:24,180
your service worker can then pick that

00:41:22,500 --> 00:41:25,740
up and create a push notification to

00:41:24,180 --> 00:41:29,760
your front-end and they don't have to

00:41:25,740 --> 00:41:31,080
have the browser even open I think there

00:41:29,760 --> 00:41:33,270
are some limitations on it I think they

00:41:31,080 --> 00:41:34,620
have to still have the tab in the

00:41:33,270 --> 00:41:36,420
browser even if they close the browser

00:41:34,620 --> 00:41:38,040
like it has to still be an active tab

00:41:36,420 --> 00:41:41,100
rather than having completely closed it

00:41:38,040 --> 00:41:54,980
but yeah you can use push notifications

00:41:41,100 --> 00:41:57,270
with no browser open just whenever so

00:41:54,980 --> 00:42:00,390
kind of the whole point of the

00:41:57,270 --> 00:42:04,020
serviceworker is that it picks up HTTP

00:42:00,390 --> 00:42:06,840
requests and then interacts with them

00:42:04,020 --> 00:42:08,520
the postmessage api was created because

00:42:06,840 --> 00:42:12,060
some people were like oh i want to be

00:42:08,520 --> 00:42:14,880
able to update the Dom from picking up a

00:42:12,060 --> 00:42:17,130
request but actually the whole point of

00:42:14,880 --> 00:42:18,630
the serviceworker is that it just

00:42:17,130 --> 00:42:20,250
interacts with the request and then

00:42:18,630 --> 00:42:22,470
forwards it on so you don't actually

00:42:20,250 --> 00:42:26,730
have to change your UI JavaScript your

00:42:22,470 --> 00:42:28,200
front-end JavaScript so generally it's a

00:42:26,730 --> 00:42:30,480
bad idea to do that you should just

00:42:28,200 --> 00:42:32,520
leave your front-end application alone

00:42:30,480 --> 00:42:35,190
like don't touch it and then just make

00:42:32,520 --> 00:42:37,400
boat your serviceworker on and then just

00:42:35,190 --> 00:42:41,010
forward the data or the other response

00:42:37,400 --> 00:42:45,070
as far as good ideas as to when to use

00:42:41,010 --> 00:42:47,800
it I

00:42:45,070 --> 00:42:51,570
I don't have any I like you I don't

00:42:47,800 --> 00:42:56,110
think you should really it was kind of

00:42:51,570 --> 00:42:58,240
created to circumnavigate that but just

00:42:56,110 --> 00:42:59,440
the whole point of it is HTTP requests

00:42:58,240 --> 00:43:02,080
and responses so just forward the

00:42:59,440 --> 00:43:04,900
response on there is actually there is a

00:43:02,080 --> 00:43:05,620
weird thing which I guess you might use

00:43:04,900 --> 00:43:15,580
it for

00:43:05,620 --> 00:43:21,310
so let me where it's my code sorry yeah

00:43:15,580 --> 00:43:24,370
here so this bit code actually doesn't

00:43:21,310 --> 00:43:26,350
work so the the response from fetch

00:43:24,370 --> 00:43:30,280
request within a serviceworker

00:43:26,350 --> 00:43:32,740
is one-time use so as soon as you've

00:43:30,280 --> 00:43:35,680
read the data you then aren't you can't

00:43:32,740 --> 00:43:38,020
it's gone like the date has come so if

00:43:35,680 --> 00:43:39,940
you grab the response and then put it

00:43:38,020 --> 00:43:42,760
into index DB you then don't have the

00:43:39,940 --> 00:43:43,990
data anymore to forward on so actually

00:43:42,760 --> 00:43:46,720
what you have to do is you have to clone

00:43:43,990 --> 00:43:49,000
that object first and then put the

00:43:46,720 --> 00:43:53,050
cloned data into index DB and forward

00:43:49,000 --> 00:43:55,750
the original response on you could use

00:43:53,050 --> 00:43:58,360
the post message API if you wanted not

00:43:55,750 --> 00:44:02,410
to clone it to read the data out into a

00:43:58,360 --> 00:44:04,030
variable put that variable into index DB

00:44:02,410 --> 00:44:06,250
and then interact with the Dom directly

00:44:04,030 --> 00:44:09,190
through the post message API instead of

00:44:06,250 --> 00:44:10,210
cloning the response that's the only

00:44:09,190 --> 00:44:14,440
place I've actually seen this being used

00:44:10,210 --> 00:44:17,340
but yeah again just clone the response

00:44:14,440 --> 00:44:17,340
and forward it Adam

00:44:24,670 --> 00:44:32,390
I don't know yeah I've got nothing more

00:44:30,049 --> 00:44:34,789
for you yes so not that I know of

00:44:32,390 --> 00:44:38,329
there's not in any documentation does it

00:44:34,789 --> 00:44:39,890
say that there's a yeah I imagine there

00:44:38,329 --> 00:44:41,539
probably is

00:44:39,890 --> 00:44:44,380
there's probably is some rules around

00:44:41,539 --> 00:44:49,339
like actually if you turn the device off

00:44:44,380 --> 00:44:52,160
or if that there probably is a certain

00:44:49,339 --> 00:44:54,799
amount of time out but within the

00:44:52,160 --> 00:44:56,749
documentation for this on both well the

00:44:54,799 --> 00:44:58,969
Google documentation for background sync

00:44:56,749 --> 00:45:01,339
is fantastic it doesn't say anything

00:44:58,969 --> 00:45:02,900
about it and I've never built one to

00:45:01,339 --> 00:45:04,930
test it so I couldn't tell you the

00:45:02,900 --> 00:45:16,249
answer but there probably is somewhere

00:45:04,930 --> 00:45:18,349
so you're asking if the yeah I mean yes

00:45:16,249 --> 00:45:19,880
it used to be you had to visit it more

00:45:18,349 --> 00:45:21,410
than twice with a five minute gap now

00:45:19,880 --> 00:45:24,410
it's just you have to interact with it

00:45:21,410 --> 00:45:26,900
for more than 30 seconds which is yeah

00:45:24,410 --> 00:45:28,339
that they have changed that as far as

00:45:26,900 --> 00:45:30,619
sharing code I mean it's just like

00:45:28,339 --> 00:45:32,900
JavaScript code so I imagine not

00:45:30,619 --> 00:45:36,920
I mean they guess you could open source

00:45:32,900 --> 00:45:39,709
it but I like MPM it but you know I

00:45:36,920 --> 00:45:40,789
probably probably not but to pick up on

00:45:39,709 --> 00:45:43,880
something else that you put there about

00:45:40,789 --> 00:45:45,259
not not imagining that you would go

00:45:43,880 --> 00:45:50,089
anywhere but the App Store to install

00:45:45,259 --> 00:45:52,670
those things the Microsoft the Windows

00:45:50,089 --> 00:45:54,529
app store actually you can add your PWA

00:45:52,670 --> 00:45:56,959
to it so if you create your application

00:45:54,529 --> 00:45:59,779
as a PWA you can then submit it to the

00:45:56,959 --> 00:46:01,190
Windows app store they've within the

00:45:59,779 --> 00:46:04,099
submission of their app store they've

00:46:01,190 --> 00:46:08,599
got a thing for pwace and it's coming to

00:46:04,099 --> 00:46:10,219
both the player and the iOS one as well

00:46:08,599 --> 00:46:13,640
so you will actually be able to put your

00:46:10,219 --> 00:46:14,869
PW A's in the real app stores and not

00:46:13,640 --> 00:46:16,219
have to have a native app anymore you

00:46:14,869 --> 00:46:18,109
just be able to go to the app store

00:46:16,219 --> 00:46:19,309
click download and actually what it will

00:46:18,109 --> 00:46:21,559
do is it will just fire you off to the

00:46:19,309 --> 00:46:23,119
web app URL and then download it in the

00:46:21,559 --> 00:46:25,449
background it's not here yet that's

00:46:23,119 --> 00:46:25,449
coming

00:46:25,460 --> 00:46:29,290
the only agree thunders

00:46:34,100 --> 00:46:40,670
yes so Google so Alex Russell works for

00:46:36,650 --> 00:46:43,250
Google I may not put that down so Google

00:46:40,670 --> 00:46:44,690
are kind of driving this so they're the

00:46:43,250 --> 00:46:49,610
ones pretty much setting the standards

00:46:44,690 --> 00:46:51,620
for most of this they're they as they

00:46:49,610 --> 00:46:53,960
say Alex kind of conceptualized yet the

00:46:51,620 --> 00:46:58,460
idea sort of unless you work for

00:46:53,960 --> 00:46:59,630
Microsoft but so so yeah they're they're

00:46:58,460 --> 00:47:00,980
kind of setting all the standards

00:46:59,630 --> 00:47:02,720
they're the ones that have created all

00:47:00,980 --> 00:47:07,940
the api's in chrome and then everybody's

00:47:02,720 --> 00:47:09,320
kind of following them and that the big

00:47:07,940 --> 00:47:10,970
problem and I used to have slides on

00:47:09,320 --> 00:47:15,920
this but the big problem is obviously

00:47:10,970 --> 00:47:17,480
that both Google and app will make just

00:47:15,920 --> 00:47:19,460
a ridiculous amount of money through

00:47:17,480 --> 00:47:21,950
their app stores and this has the

00:47:19,460 --> 00:47:25,460
potential to just get rid of all of that

00:47:21,950 --> 00:47:27,470
money so Google are kind of okay with

00:47:25,460 --> 00:47:30,020
that because they only make nine billion

00:47:27,470 --> 00:47:32,000
dollars a year from it whatever

00:47:30,020 --> 00:47:33,620
whereas Apple make like twenty three

00:47:32,000 --> 00:47:36,020
billion dollars a year which is a little

00:47:33,620 --> 00:47:37,700
bit more so Apple kind of don't want

00:47:36,020 --> 00:47:40,370
this but at the same time everybody

00:47:37,700 --> 00:47:42,110
actually kind of really wants this so

00:47:40,370 --> 00:47:44,060
they've they're just a little bit behind

00:47:42,110 --> 00:47:45,290
the curve which tends to be apples way

00:47:44,060 --> 00:47:48,500
of doing things they'd like to be a

00:47:45,290 --> 00:47:49,670
little bit behind so but they're slowly

00:47:48,500 --> 00:47:51,620
being pressured by all the other

00:47:49,670 --> 00:47:53,270
browsers to catch up so Google

00:47:51,620 --> 00:47:55,850
definitely the forefront of this and

00:47:53,270 --> 00:47:59,000
setting sort of the standards for it an

00:47:55,850 --> 00:48:04,900
apple at like a year 12 months 18 months

00:47:59,000 --> 00:48:04,900

YouTube URL: https://www.youtube.com/watch?v=OTQGqzVUCg4


