Title: Using React.js to Extend your CSM - Bristol JS - March 2018
Publication date: 2018-04-07
Playlist: Bristol JS
Description: 
	Using React.js to extend your CMS - Nicola Richardson

The range of CMSs available gives us a huge amount of variety with the possible ways to architect and build content-driven websites. However, even though most platforms support custom templating and theming, they aren't necessarily the best tools for delivering a modern front-end experience. Sometimes we want the front-end of our websites to do things that CMSs aren’t designed to do.

So what if, instead, we used the best technologies for the task: taking the data-store backend of the CMS, and plugging it into a flexible, decoupled frontend? This talk will focus on how JS frameworks or libraries, such as React.js, can be bolted onto headless CMSs to provide the immersive experience that we want our apps and websites to have, without needing to compromise on the complexity of the data structure on the backend. Using React.js and Drupal 8 as an example, we’ll take a look at a project currently in development where both technologies have been combined, and explore how it works, why it works and what you need to think about when trying this for yourself.
Captions: 
	00:00:00,000 --> 00:00:06,990
hi my name is Nicola I'm a web developer

00:00:02,820 --> 00:00:09,030
I work at nudge so nudge is a digital

00:00:06,990 --> 00:00:11,639
agency based in Bristol so we've got our

00:00:09,030 --> 00:00:14,070
offices over in desk Lodge and we are a

00:00:11,639 --> 00:00:16,440
drupal agency I've been working in edge

00:00:14,070 --> 00:00:18,359
for the past five months and I've also

00:00:16,440 --> 00:00:21,420
been a web developer for the past five

00:00:18,359 --> 00:00:22,949
months this is because I guess these are

00:00:21,420 --> 00:00:25,199
people laughing because they know why

00:00:22,949 --> 00:00:27,240
last summer I decided to change career

00:00:25,199 --> 00:00:30,210
so I used to work in marketing used to

00:00:27,240 --> 00:00:32,730
be marketer and a copywriter and and I

00:00:30,210 --> 00:00:35,550
decided to undertake a three-month

00:00:32,730 --> 00:00:37,550
coding boot camp run by a company called

00:00:35,550 --> 00:00:39,960
develop me down in the paint works and

00:00:37,550 --> 00:00:41,670
nudge were kind enough to hire me

00:00:39,960 --> 00:00:45,239
straight from that course and I hoping

00:00:41,670 --> 00:00:46,379
working there ever since and so I'm

00:00:45,239 --> 00:00:49,230
going to talk to you tonight about the

00:00:46,379 --> 00:00:51,090
first project that I ever worked on and

00:00:49,230 --> 00:00:53,850
nudge first project actually ever worked

00:00:51,090 --> 00:00:55,949
on as a developer and I was pretty lucky

00:00:53,850 --> 00:00:58,800
with the project that it was so a lot of

00:00:55,949 --> 00:01:00,449
the work that we do at nudge is three

00:00:58,800 --> 00:01:04,080
people back-end Drupal front-end in the

00:01:00,449 --> 00:01:06,090
same application and I ended up being on

00:01:04,080 --> 00:01:08,820
a project which had a headless tree pull

00:01:06,090 --> 00:01:11,520
back end and a decoupled react front end

00:01:08,820 --> 00:01:13,439
so the first project is a pivot bit of a

00:01:11,520 --> 00:01:15,240
learning curve but it was a great one to

00:01:13,439 --> 00:01:17,780
be involved with which is why I decided

00:01:15,240 --> 00:01:21,540
to talk about it tonight

00:01:17,780 --> 00:01:25,110
okay so Drupal and who here is familiar

00:01:21,540 --> 00:01:28,530
with Drupal yeah great okay who here

00:01:25,110 --> 00:01:30,930
works with Drupal okay so I assume you

00:01:28,530 --> 00:01:34,200
are not doing the updates yet if you are

00:01:30,930 --> 00:01:36,840
here okay so for those of you who are

00:01:34,200 --> 00:01:39,150
not so familiar with it I'm going to be

00:01:36,840 --> 00:01:41,490
talking about it's the broader context

00:01:39,150 --> 00:01:43,470
of this talk is just CMS's in general

00:01:41,490 --> 00:01:44,939
but this project focuses on Drupal so

00:01:43,470 --> 00:01:47,369
I'll just explain to you a little bit

00:01:44,939 --> 00:01:50,250
about what it is and so that you have a

00:01:47,369 --> 00:01:53,280
bit more context so Drupal itself is an

00:01:50,250 --> 00:01:57,090
open source and free CMS and it's really

00:01:53,280 --> 00:01:59,159
good at structuring content for content

00:01:57,090 --> 00:02:00,420
driven websites and actually what you're

00:01:59,159 --> 00:02:01,920
able to do on the back end of that is

00:02:00,420 --> 00:02:03,930
have some quite complex data structures

00:02:01,920 --> 00:02:05,430
and you're also able to access that

00:02:03,930 --> 00:02:08,009
information quite easily with the way

00:02:05,430 --> 00:02:09,780
it's structured and so the way that it's

00:02:08,009 --> 00:02:11,459
the way that you put does this the way

00:02:09,780 --> 00:02:13,650
that Drupal makes it quite easy is that

00:02:11,459 --> 00:02:16,319
it has this idea of nodes and within

00:02:13,650 --> 00:02:17,760
these nodes we can set fields once we've

00:02:16,319 --> 00:02:21,239
got that actually it makes it quite easy

00:02:17,760 --> 00:02:22,980
for us to organize our contents and when

00:02:21,239 --> 00:02:25,799
we then think about expanding this and

00:02:22,980 --> 00:02:27,989
thinking about taxonomy terms thinking

00:02:25,799 --> 00:02:29,730
about menus actually what we have now is

00:02:27,989 --> 00:02:32,310
quite an efficient way of structuring

00:02:29,730 --> 00:02:35,879
but also a way of filtering our content

00:02:32,310 --> 00:02:37,709
within the backend so Drupal 8 which is

00:02:35,879 --> 00:02:39,420
the version that I'm predominantly going

00:02:37,709 --> 00:02:41,790
to be talking about tonight it comes

00:02:39,420 --> 00:02:44,700
with support for exposing the entities

00:02:41,790 --> 00:02:47,190
like nodes like users like comments this

00:02:44,700 --> 00:02:49,260
is through its restful api service so

00:02:47,190 --> 00:02:51,060
already out of the box we've got a lot

00:02:49,260 --> 00:02:54,599
of possibilities with exposing that data

00:02:51,060 --> 00:02:56,129
from Drupal 8 backends if we want to go

00:02:54,599 --> 00:02:57,450
look with deeper and we might want to do

00:02:56,129 --> 00:02:58,769
that if we're being a bit more custom

00:02:57,450 --> 00:03:01,739
with what we're doing we've then got

00:02:58,769 --> 00:03:03,420
entity fields and form api's which again

00:03:01,739 --> 00:03:04,950
it makes managing that content injury

00:03:03,420 --> 00:03:09,540
poor quite a pleasurable experience for

00:03:04,950 --> 00:03:11,549
us so as a CMS Drupal is designed to be

00:03:09,540 --> 00:03:13,470
flexible and extensible and this is due

00:03:11,549 --> 00:03:15,239
to the modular approach that it takes so

00:03:13,470 --> 00:03:16,650
what you're getting with Drupal is

00:03:15,239 --> 00:03:18,569
you're getting the building blocks to

00:03:16,650 --> 00:03:19,709
build your CMS system and then you

00:03:18,569 --> 00:03:21,419
decide how you want to piece those

00:03:19,709 --> 00:03:25,590
together so you've got the tool kit you

00:03:21,419 --> 00:03:27,030
build it how you need to build it the

00:03:25,590 --> 00:03:31,079
other side of this is going to be react

00:03:27,030 --> 00:03:33,680
and say anyone work with react yeah more

00:03:31,079 --> 00:03:35,699
hands that's what I was thinking okay so

00:03:33,680 --> 00:03:38,370
with react then so it's a declarative

00:03:35,699 --> 00:03:41,099
efficient and flexible JavaScript

00:03:38,370 --> 00:03:42,720
library for building user interfaces so

00:03:41,099 --> 00:03:44,750
for me there are three main selling

00:03:42,720 --> 00:03:46,409
points of react and there were three

00:03:44,750 --> 00:03:48,299
aspects of it which became quite

00:03:46,409 --> 00:03:49,620
apparent during development things that

00:03:48,299 --> 00:03:51,840
really helped us as we were building

00:03:49,620 --> 00:03:54,239
these apps I'll go into these a little

00:03:51,840 --> 00:03:55,949
bit so first is the lightweight virtual

00:03:54,239 --> 00:03:58,319
Dom which allows it to be performant and

00:03:55,949 --> 00:04:00,060
quite fast second is being component

00:03:58,319 --> 00:04:02,220
based they were able to scale our apps

00:04:00,060 --> 00:04:04,319
if we want to and then the last one is

00:04:02,220 --> 00:04:05,340
the unidirectional data flow and I'm

00:04:04,319 --> 00:04:10,319
going to be talking about that in the

00:04:05,340 --> 00:04:13,739
context of debugging so the first one so

00:04:10,319 --> 00:04:15,449
thinking about updating the Dom so when

00:04:13,739 --> 00:04:18,090
we update the Dom it's normally quite an

00:04:15,449 --> 00:04:20,489
expensive process but react is able to

00:04:18,090 --> 00:04:23,070
mitigate this by actually creating a

00:04:20,489 --> 00:04:24,979
clone so it claims the real dumb this is

00:04:23,070 --> 00:04:27,330
what is referred to as the virtual Dom

00:04:24,979 --> 00:04:29,490
so the process that happens here

00:04:27,330 --> 00:04:32,190
so when I want to change an element and

00:04:29,490 --> 00:04:33,659
we render it out what react is doing is

00:04:32,190 --> 00:04:35,819
it's updating all of the nodes in the

00:04:33,659 --> 00:04:37,710
virtual Dom it's then performing a

00:04:35,819 --> 00:04:39,870
difference oh it's looking at the Dom in

00:04:37,710 --> 00:04:41,729
its new States comparing it with the Dom

00:04:39,870 --> 00:04:43,379
from the previous States finding out

00:04:41,729 --> 00:04:44,729
what's changed and then it makes those

00:04:43,379 --> 00:04:46,530
changes in the real DOM

00:04:44,729 --> 00:04:48,389
so actually what this allows is for it

00:04:46,530 --> 00:04:50,039
to be quite lightweight quite fast it

00:04:48,389 --> 00:04:52,949
can batch those operations so it's

00:04:50,039 --> 00:04:56,039
speedy and and this is quite a contrast

00:04:52,949 --> 00:04:58,220
to working with Drupal I just say I love

00:04:56,039 --> 00:05:00,719
working with Drupal but it has got its

00:04:58,220 --> 00:05:03,330
mmm fullbacks I don't know how to

00:05:00,719 --> 00:05:06,090
describe this so when you're thinking

00:05:03,330 --> 00:05:07,349
then about a monolithic Drupal build so

00:05:06,090 --> 00:05:10,169
this is where you've got back-end in

00:05:07,349 --> 00:05:11,460
Drupal front-end in Drupal and it's part

00:05:10,169 --> 00:05:13,139
of the same application so they are

00:05:11,460 --> 00:05:15,180
intrinsically linked together they're

00:05:13,139 --> 00:05:18,509
not separate things at all when we're

00:05:15,180 --> 00:05:21,090
thinking then about speed in this kind

00:05:18,509 --> 00:05:23,789
of context Drupal is not necessarily a

00:05:21,090 --> 00:05:26,069
fast performer so you've got quite a

00:05:23,789 --> 00:05:27,240
large code base with Drupal and you've

00:05:26,069 --> 00:05:29,159
also got a little bit of bloat there

00:05:27,240 --> 00:05:31,469
because Drupal is so flexible you have

00:05:29,159 --> 00:05:33,180
got so many things in your toolkit but

00:05:31,469 --> 00:05:34,440
you're never going to use them all so if

00:05:33,180 --> 00:05:36,630
you kind of think about maybe using

00:05:34,440 --> 00:05:38,039
about 40% of what you've got available

00:05:36,630 --> 00:05:39,330
you've still got all that other

00:05:38,039 --> 00:05:41,250
functionality that's just waiting there

00:05:39,330 --> 00:05:46,889
until you need to pull it out it's a

00:05:41,250 --> 00:05:49,919
little bit slower by nature components

00:05:46,889 --> 00:05:52,830
so react is essentially a component

00:05:49,919 --> 00:05:54,990
library so this allows you to break down

00:05:52,830 --> 00:05:57,240
your user interface into composable

00:05:54,990 --> 00:05:59,159
pieces and the granularity of that

00:05:57,240 --> 00:06:00,900
really depends on what you're building

00:05:59,159 --> 00:06:03,779
and what structure is going to suit that

00:06:00,900 --> 00:06:06,330
particular project I'm just going to

00:06:03,779 --> 00:06:08,940
show a really really basic overview of a

00:06:06,330 --> 00:06:10,830
react up and kind of to put it into

00:06:08,940 --> 00:06:12,629
context with how this could be scaled so

00:06:10,830 --> 00:06:15,090
sitting at the top of this then and it's

00:06:12,629 --> 00:06:17,430
a hierarchical structure I have got my

00:06:15,090 --> 00:06:19,409
main app container so this is where my

00:06:17,430 --> 00:06:22,139
UI is going to be rendered from this is

00:06:19,409 --> 00:06:23,940
pulling everything into it so sitting

00:06:22,139 --> 00:06:25,169
underneath my app I might have some

00:06:23,940 --> 00:06:27,889
parent components and these are

00:06:25,169 --> 00:06:30,090
essentially wrappers so these are

00:06:27,889 --> 00:06:32,340
probably creating a little bit of logic

00:06:30,090 --> 00:06:34,050
they might be pulling in data from API

00:06:32,340 --> 00:06:36,750
calls and they're feeding all of that

00:06:34,050 --> 00:06:38,880
down into essentially what we could call

00:06:36,750 --> 00:06:41,050
dumb components so these are just pure

00:06:38,880 --> 00:06:43,419
UI they don't contain logic

00:06:41,050 --> 00:06:45,039
all they do is take data and provide the

00:06:43,419 --> 00:06:48,310
tools for that app at the top to render

00:06:45,039 --> 00:06:49,750
it out so what we've got here then when

00:06:48,310 --> 00:06:51,879
we're looking at those dumb components

00:06:49,750 --> 00:06:53,680
at the bottom is depending on how we

00:06:51,879 --> 00:06:56,139
built it hopefully we've built it with

00:06:53,680 --> 00:06:58,270
the notion of scaling it up we've

00:06:56,139 --> 00:06:59,680
hopefully got reusable components so

00:06:58,270 --> 00:07:00,849
this means when we want to adapt it when

00:06:59,680 --> 00:07:02,800
we want to change it when we want to

00:07:00,849 --> 00:07:04,060
make this bigger it's easy for us to do

00:07:02,800 --> 00:07:06,270
because we've already done the work it's

00:07:04,060 --> 00:07:08,289
there waiting for us

00:07:06,270 --> 00:07:11,349
comparing the center you the Drupal

00:07:08,289 --> 00:07:12,699
build if we are looking at doing the

00:07:11,349 --> 00:07:15,669
same kind of thing with Drupal in terms

00:07:12,699 --> 00:07:17,949
of scaling it up it's not quite as quick

00:07:15,669 --> 00:07:19,539
it's not quite as easy we might have to

00:07:17,949 --> 00:07:21,190
think there a little bit about structure

00:07:19,539 --> 00:07:22,840
in Drupal and the configuration of how

00:07:21,190 --> 00:07:24,039
I've got it working because we have got

00:07:22,840 --> 00:07:26,020
that back-end bolted on for the

00:07:24,039 --> 00:07:27,639
front-end they're not decoupled in any

00:07:26,020 --> 00:07:31,690
way they're completely linked a little

00:07:27,639 --> 00:07:34,090
bit more tricky so the last one the

00:07:31,690 --> 00:07:35,440
unidirectional data flow so I said I was

00:07:34,090 --> 00:07:37,840
talking about this in the context of

00:07:35,440 --> 00:07:39,460
debugging so we've got these dumb

00:07:37,840 --> 00:07:40,870
components sitting at the bottom they

00:07:39,460 --> 00:07:43,360
need to get their data from somewhere

00:07:40,870 --> 00:07:46,539
and that data is going to come down from

00:07:43,360 --> 00:07:48,819
the top so we've got this unidirectional

00:07:46,539 --> 00:07:50,229
data flow is always going top down and

00:07:48,819 --> 00:07:53,770
it's being passed through by something

00:07:50,229 --> 00:07:56,080
called props so when we're thinking then

00:07:53,770 --> 00:07:57,909
about debugging what this is enabling us

00:07:56,080 --> 00:08:00,789
to do is first of all we know where our

00:07:57,909 --> 00:08:02,500
state is going so inside this reactor we

00:08:00,789 --> 00:08:04,449
have a notion of state this is anything

00:08:02,500 --> 00:08:05,590
that we're changing and we also know

00:08:04,449 --> 00:08:10,000
when we're changing it because we're

00:08:05,590 --> 00:08:12,520
calling a set state functional so when

00:08:10,000 --> 00:08:14,529
something goes wrong in my app I already

00:08:12,520 --> 00:08:17,139
know where the state's coming from I

00:08:14,529 --> 00:08:18,310
already know where I've modified it so

00:08:17,139 --> 00:08:21,069
I've got a bit of a head start and

00:08:18,310 --> 00:08:22,270
working out where it is I also know

00:08:21,069 --> 00:08:25,210
where it's not going to be because I

00:08:22,270 --> 00:08:27,909
know it's going downwards thinking that

00:08:25,210 --> 00:08:30,789
about debugging with Drupal not quite so

00:08:27,909 --> 00:08:32,589
straightforward so we've got various PHP

00:08:30,789 --> 00:08:34,329
things we can do we've got Kintz which

00:08:32,589 --> 00:08:36,010
we can print out all of our variables in

00:08:34,329 --> 00:08:38,199
Drupal so we can kind of work out what's

00:08:36,010 --> 00:08:41,140
going on with that we can also debug our

00:08:38,199 --> 00:08:42,430
theme templates and but essentially we

00:08:41,140 --> 00:08:44,350
are going to have to go to a few more

00:08:42,430 --> 00:08:46,630
places to try and debug exactly what is

00:08:44,350 --> 00:08:49,089
going on there so those are three main

00:08:46,630 --> 00:08:52,260
points with react and why it was a great

00:08:49,089 --> 00:08:52,260
experience working with it

00:08:52,460 --> 00:08:56,900
okay so I'm going to be talking about a

00:08:54,920 --> 00:08:58,310
headless CMS which I'm sure you've

00:08:56,900 --> 00:09:00,290
probably heard this term at some points

00:08:58,310 --> 00:09:02,090
and I'm just going to contextualize it

00:09:00,290 --> 00:09:04,490
so this is exactly what I mean when I

00:09:02,090 --> 00:09:07,640
say headless so I want you to imagine

00:09:04,490 --> 00:09:09,200
that you are going into a shop you may

00:09:07,640 --> 00:09:10,850
be interacting with products you are

00:09:09,200 --> 00:09:12,890
browsing and maybe picking them up

00:09:10,850 --> 00:09:14,360
having a good look at them and you might

00:09:12,890 --> 00:09:16,550
even interact with one of the store

00:09:14,360 --> 00:09:17,810
assistants there but there's one part of

00:09:16,550 --> 00:09:19,670
that store that you are never

00:09:17,810 --> 00:09:21,740
interacting with and that's the

00:09:19,670 --> 00:09:23,150
storeroom at the back that's the thing

00:09:21,740 --> 00:09:24,650
that's containing all of the data it's

00:09:23,150 --> 00:09:26,630
actually facilitating that store

00:09:24,650 --> 00:09:29,450
actually being there and running and

00:09:26,630 --> 00:09:31,250
operating that's what I'm talking about

00:09:29,450 --> 00:09:33,290
when I'm talking about headless CMS but

00:09:31,250 --> 00:09:35,270
a little bit more separated so it's that

00:09:33,290 --> 00:09:38,570
data store it's the content repository

00:09:35,270 --> 00:09:40,630
that is sitting at the back it doesn't

00:09:38,570 --> 00:09:43,310
have a natural front end bolted on to it

00:09:40,630 --> 00:09:45,320
which means that if we want to then

00:09:43,310 --> 00:09:47,960
expose that data we're gonna have to

00:09:45,320 --> 00:09:49,880
think about using an API to access it so

00:09:47,960 --> 00:09:51,470
if we're using Drupal we're using purely

00:09:49,880 --> 00:09:53,900
the backend we've got an admin interface

00:09:51,470 --> 00:09:55,940
on it we need to use the API to access

00:09:53,900 --> 00:10:00,920
any of that data because our front-end

00:09:55,940 --> 00:10:04,150
is not connected to Drupal and this

00:10:00,920 --> 00:10:06,620
means then that for our users they are

00:10:04,150 --> 00:10:09,230
interacting with our framework they're

00:10:06,620 --> 00:10:10,910
not interacting with Drupal and what

00:10:09,230 --> 00:10:12,830
this means for us as developers is that

00:10:10,910 --> 00:10:15,020
we are able to build immersive

00:10:12,830 --> 00:10:17,210
experiences modern front-end experiences

00:10:15,020 --> 00:10:19,790
that users are wanting that users are

00:10:17,210 --> 00:10:22,100
accustomed to and it also means if we

00:10:19,790 --> 00:10:23,600
are working with a CMS we're not forcing

00:10:22,100 --> 00:10:25,790
that CMS to do something that it's not

00:10:23,600 --> 00:10:31,340
designed to do we're choosing the best

00:10:25,790 --> 00:10:33,080
tooling for the job okay so at nudge

00:10:31,340 --> 00:10:35,330
we're quite excited about headless

00:10:33,080 --> 00:10:36,980
technology and I'm quite excited about

00:10:35,330 --> 00:10:38,680
it as well so I'm going to drive this

00:10:36,980 --> 00:10:40,730
point home and hopefully by the end

00:10:38,680 --> 00:10:41,030
you're all going to be excited about it

00:10:40,730 --> 00:10:42,710
too

00:10:41,030 --> 00:10:46,310
and I think about exploring it in some

00:10:42,710 --> 00:10:47,570
more ways so reasons why it is exciting

00:10:46,310 --> 00:10:50,060
there's more than this but I'll just

00:10:47,570 --> 00:10:53,840
pick my top three so first of those is

00:10:50,060 --> 00:10:54,500
that if we are using our CMS as a

00:10:53,840 --> 00:10:56,540
datastore

00:10:54,500 --> 00:10:58,970
it means that we're able to take a more

00:10:56,540 --> 00:11:00,850
service orientated approach to how we're

00:10:58,970 --> 00:11:03,680
architecting things on the backend and

00:11:00,850 --> 00:11:05,240
what this is meaning is that we're able

00:11:03,680 --> 00:11:06,260
to actually break down our services so

00:11:05,240 --> 00:11:08,450
we can distill man

00:11:06,260 --> 00:11:10,640
and we can kind of pull them out maybe

00:11:08,450 --> 00:11:12,440
even less subcomponents and what we're

00:11:10,640 --> 00:11:14,000
able to do once we get into that way of

00:11:12,440 --> 00:11:15,710
thinking is that we're able to pull out

00:11:14,000 --> 00:11:17,540
quite individual experiences for our

00:11:15,710 --> 00:11:19,550
users and we're all known to do this

00:11:17,540 --> 00:11:20,810
with with one CMS just one back-end

00:11:19,550 --> 00:11:23,660
we're able to pull out all of these

00:11:20,810 --> 00:11:26,150
different services so when you've got a

00:11:23,660 --> 00:11:28,490
single front a single CMS on the backend

00:11:26,150 --> 00:11:31,100
that can serve multiple front ends and

00:11:28,490 --> 00:11:32,780
and the platforms that you choose on

00:11:31,100 --> 00:11:35,780
those front ends that's totally up to

00:11:32,780 --> 00:11:37,100
you so it could be frameworks or if

00:11:35,780 --> 00:11:39,710
you're thinking about the Internet of

00:11:37,100 --> 00:11:41,150
Things it could be anything so your

00:11:39,710 --> 00:11:43,520
possibilities here at endless you've got

00:11:41,150 --> 00:11:44,840
the data you've got the API it's your

00:11:43,520 --> 00:11:48,350
choice now what you choose to do with

00:11:44,840 --> 00:11:50,120
that and how you display it there are a

00:11:48,350 --> 00:11:52,550
few benefits then to this idea of

00:11:50,120 --> 00:11:54,860
decoupling so decoupling is the idea of

00:11:52,550 --> 00:11:56,540
complete separation so when you've got a

00:11:54,860 --> 00:11:58,760
headless CMS you've decoupled the

00:11:56,540 --> 00:12:01,580
backend okay they're not connected at

00:11:58,760 --> 00:12:06,340
all so benefits that I'm going to be

00:12:01,580 --> 00:12:09,830
talking about first one is that and you

00:12:06,340 --> 00:12:11,270
are able to make changes on the back end

00:12:09,830 --> 00:12:14,600
or on the front end completely

00:12:11,270 --> 00:12:17,330
independently of the other end so for

00:12:14,600 --> 00:12:18,890
example if I need to make a change on

00:12:17,330 --> 00:12:20,600
the back end on my website so I need to

00:12:18,890 --> 00:12:23,240
get at sorry man app I need to go into

00:12:20,600 --> 00:12:24,920
Drupal I make my change and as long as

00:12:23,240 --> 00:12:26,810
my data is still available in the way it

00:12:24,920 --> 00:12:28,790
needs to be available my front-end will

00:12:26,810 --> 00:12:31,490
never ever know and I don't have to

00:12:28,790 --> 00:12:34,340
change it at all and then vice versa if

00:12:31,490 --> 00:12:38,270
I want to change the theming of my app

00:12:34,340 --> 00:12:39,950
or I want to make a UX change again as

00:12:38,270 --> 00:12:43,070
long as I'm still using the data in the

00:12:39,950 --> 00:12:45,050
right way I can do it and the backends

00:12:43,070 --> 00:12:46,100
never going to know I don't have to do

00:12:45,050 --> 00:12:49,400
anything with it so they're completely

00:12:46,100 --> 00:12:51,010
independent of each other what this also

00:12:49,400 --> 00:12:53,260
means is that when we're thinking about

00:12:51,010 --> 00:12:55,460
choosing the best technology for the job

00:12:53,260 --> 00:12:56,510
we might decide down the line that we

00:12:55,460 --> 00:12:59,180
actually want to change the technology

00:12:56,510 --> 00:13:01,580
so we've got react apps that we've built

00:12:59,180 --> 00:13:02,870
in Dutch couple years down the line we

00:13:01,580 --> 00:13:04,550
might want to change that my only is a

00:13:02,870 --> 00:13:06,710
different framework on the front end and

00:13:04,550 --> 00:13:08,960
we can as long as we are still

00:13:06,710 --> 00:13:11,510
interacting with that API in exactly the

00:13:08,960 --> 00:13:13,810
same way we can change it we can plug

00:13:11,510 --> 00:13:15,980
out react we could plug in a new app

00:13:13,810 --> 00:13:17,480
like Waze on the back end as long as

00:13:15,980 --> 00:13:19,190
we're still using the API in the right

00:13:17,480 --> 00:13:20,089
way giving it the right data in the

00:13:19,190 --> 00:13:22,670
right format

00:13:20,089 --> 00:13:24,499
at the right time plug out the Drupal

00:13:22,670 --> 00:13:26,600
put something else on the back end so

00:13:24,499 --> 00:13:30,860
again we've got a versatility on both

00:13:26,600 --> 00:13:32,389
sides of this the final point here put

00:13:30,860 --> 00:13:34,040
fakers tolling and simultaneous

00:13:32,389 --> 00:13:35,420
development so what I'm talking about

00:13:34,040 --> 00:13:38,990
here is that we've got two technologies

00:13:35,420 --> 00:13:40,610
then so for us Drupal react this gives

00:13:38,990 --> 00:13:42,050
us then the possibility of having really

00:13:40,610 --> 00:13:44,480
strong developers working on both sides

00:13:42,050 --> 00:13:46,370
of it rather than a couple of developers

00:13:44,480 --> 00:13:47,600
working full stack and maybe being a

00:13:46,370 --> 00:13:48,920
little less confident with react a

00:13:47,600 --> 00:13:51,350
little more confident with Drupal and

00:13:48,920 --> 00:13:52,790
and what we're doing there is we're

00:13:51,350 --> 00:13:54,649
allowing ourselves to have the best

00:13:52,790 --> 00:13:57,050
possible product at the end of it best

00:13:54,649 --> 00:13:58,730
possible interaction and experience for

00:13:57,050 --> 00:14:00,139
our users at the end which it's all for

00:13:58,730 --> 00:14:03,589
them really so we might as well make it

00:14:00,139 --> 00:14:04,910
the best that we can make it with them

00:14:03,589 --> 00:14:07,040
being independent of each other it also

00:14:04,910 --> 00:14:09,290
means that these two developers are able

00:14:07,040 --> 00:14:10,459
to work simultaneously so they're not

00:14:09,290 --> 00:14:11,899
having to wait for each other to catch

00:14:10,459 --> 00:14:13,879
up they can actually just plow ahead

00:14:11,899 --> 00:14:15,230
with their own developments and we'll

00:14:13,879 --> 00:14:21,559
have a little look later actually how

00:14:15,230 --> 00:14:23,089
about worked in practice so yeah I lift

00:14:21,559 --> 00:14:25,339
the tell-tale so I got through it and

00:14:23,089 --> 00:14:28,249
it's still kind of going but most of its

00:14:25,339 --> 00:14:31,629
done so and this has come from a project

00:14:28,249 --> 00:14:35,689
that we did as m-net and it was

00:14:31,629 --> 00:14:39,649
extending an existing Drupal build so

00:14:35,689 --> 00:14:41,089
there was an existing Drupal website so

00:14:39,649 --> 00:14:44,749
as a Drupal back-end Drupal front-end

00:14:41,089 --> 00:14:47,540
joined together same application this

00:14:44,749 --> 00:14:50,300
website was it's a room booking web

00:14:47,540 --> 00:14:51,529
sites so the basic functionality that

00:14:50,300 --> 00:14:55,339
we're working with here is the ability

00:14:51,529 --> 00:14:57,529
to search for a meeting room to book a

00:14:55,339 --> 00:15:00,290
meeting room for a specified duration at

00:14:57,529 --> 00:15:02,809
a specified time to add on extras if you

00:15:00,290 --> 00:15:05,720
wanted to and then to email out the

00:15:02,809 --> 00:15:06,920
meeting details to attendees so that is

00:15:05,720 --> 00:15:08,629
what we're working with and we are now

00:15:06,920 --> 00:15:10,249
thinking about distilling some of those

00:15:08,629 --> 00:15:13,100
services and extending them in our apps

00:15:10,249 --> 00:15:15,769
and we had two apps that we needed to

00:15:13,100 --> 00:15:17,929
build so the first of those was a room

00:15:15,769 --> 00:15:20,059
service app so this was an application

00:15:17,929 --> 00:15:24,290
that would be on an iPad it's a web app

00:15:20,059 --> 00:15:26,209
it would sit inside the room and it

00:15:24,290 --> 00:15:28,549
would collect data from the user as to

00:15:26,209 --> 00:15:31,490
what they wanted so food and drink it

00:15:28,549 --> 00:15:33,259
would then send that data to the CMS it

00:15:31,490 --> 00:15:33,920
would scurry around a bit look for the

00:15:33,259 --> 00:15:36,320
reception

00:15:33,920 --> 00:15:38,060
details of that venue send it back to

00:15:36,320 --> 00:15:41,149
the reception they can then deliver the

00:15:38,060 --> 00:15:43,190
order to the room second app which is

00:15:41,149 --> 00:15:44,959
the app that I was working on it was a

00:15:43,190 --> 00:15:46,850
quick book app so this is the one that

00:15:44,959 --> 00:15:49,430
most directly extended that booking

00:15:46,850 --> 00:15:51,620
functionality of the websites and and

00:15:49,430 --> 00:15:53,180
this was and on the door app so it'd be

00:15:51,620 --> 00:15:54,560
on the door or next to the door of the

00:15:53,180 --> 00:15:57,199
meeting room so everyone would have one

00:15:54,560 --> 00:15:58,670
of these and the kind of process for

00:15:57,199 --> 00:16:00,470
this one was that it needed to retrieve

00:15:58,670 --> 00:16:02,449
the latest booking data as soon as the

00:16:00,470 --> 00:16:03,980
user interacted with it they need to

00:16:02,449 --> 00:16:06,079
then collect the details of that

00:16:03,980 --> 00:16:08,360
particular booking what time they wanted

00:16:06,079 --> 00:16:10,190
to do it how long they wanted it for and

00:16:08,360 --> 00:16:12,500
if they needed to send that back to the

00:16:10,190 --> 00:16:15,050
CMS log it in there and then show a

00:16:12,500 --> 00:16:17,449
visual success or failure notice to the

00:16:15,050 --> 00:16:19,070
user and with this up

00:16:17,449 --> 00:16:22,639
this app is existing in a public space

00:16:19,070 --> 00:16:25,010
so we're not we didn't build it with the

00:16:22,639 --> 00:16:26,600
idea of any long-term user sessions so

00:16:25,010 --> 00:16:27,740
that kind of side of things wasn't

00:16:26,600 --> 00:16:31,459
really concerned for us when we were

00:16:27,740 --> 00:16:33,769
building this we had some requirements

00:16:31,459 --> 00:16:35,510
so the requires of these apps was that

00:16:33,769 --> 00:16:37,730
they were lightweight that they were

00:16:35,510 --> 00:16:40,399
quick and they were optimized iPads and

00:16:37,730 --> 00:16:41,990
this is what led us to choose react we

00:16:40,399 --> 00:16:43,550
had another criteria which was that it

00:16:41,990 --> 00:16:45,019
needed to use the existing data and

00:16:43,550 --> 00:16:47,029
that's why we went down the route of

00:16:45,019 --> 00:16:48,410
headless CMS and there's no point where

00:16:47,029 --> 00:16:50,089
you left in the wheel we have all the

00:16:48,410 --> 00:16:56,360
data there we just need to try and get

00:16:50,089 --> 00:16:58,670
it out and use it so this was the first

00:16:56,360 --> 00:16:59,990
time I noticed that we had done a

00:16:58,670 --> 00:17:01,790
project like this so it's the first time

00:16:59,990 --> 00:17:03,860
we had decoupled Drupal and bolted on

00:17:01,790 --> 00:17:05,780
react on to the front end of it

00:17:03,860 --> 00:17:07,130
so that naturally meant that we needed

00:17:05,780 --> 00:17:08,179
to have a bit of a think about the

00:17:07,130 --> 00:17:12,290
relationship and the communication

00:17:08,179 --> 00:17:15,290
structure between these two ends our

00:17:12,290 --> 00:17:17,000
react apps then were pure UI so they

00:17:15,290 --> 00:17:19,730
would need to use API calls to get the

00:17:17,000 --> 00:17:21,380
data out of Drupal and in order for us

00:17:19,730 --> 00:17:22,640
to be able to actually design these up

00:17:21,380 --> 00:17:23,990
because when you think about it like

00:17:22,640 --> 00:17:25,730
that the apps are really designed around

00:17:23,990 --> 00:17:28,100
the data they're really tailored to what

00:17:25,730 --> 00:17:30,169
they're going to receive in order to be

00:17:28,100 --> 00:17:32,299
able to do that design process we needed

00:17:30,169 --> 00:17:33,950
to know what the data was that we were

00:17:32,299 --> 00:17:35,809
going to get and when we were going to

00:17:33,950 --> 00:17:39,650
get it so we knew exactly the structure

00:17:35,809 --> 00:17:41,299
of what we were building so I'm going to

00:17:39,650 --> 00:17:43,909
give you a little overview bit of the

00:17:41,299 --> 00:17:45,679
basic structure of this app in terms of

00:17:43,909 --> 00:17:47,300
the communication between react app and

00:17:45,679 --> 00:17:48,980
API so

00:17:47,300 --> 00:17:52,250
over on the right hand side this is my

00:17:48,980 --> 00:17:53,960
react app right left on the left hand

00:17:52,250 --> 00:17:55,910
side we've got my headless TMS and we've

00:17:53,960 --> 00:17:59,000
got the Drupal 8 API which is sitting

00:17:55,910 --> 00:18:04,160
with it so in this instance the API is

00:17:59,000 --> 00:18:07,190
bolted on to the react CMS so before a

00:18:04,160 --> 00:18:08,720
user even interact with this app we want

00:18:07,190 --> 00:18:10,580
to have a visual signifier of exactly

00:18:08,720 --> 00:18:12,320
which room we're talking about on the

00:18:10,580 --> 00:18:14,450
screen so we're going to make an initial

00:18:12,320 --> 00:18:16,880
API call this is going to collect the

00:18:14,450 --> 00:18:18,290
room name this is now the app in its

00:18:16,880 --> 00:18:20,210
static state so as soon as it's

00:18:18,290 --> 00:18:22,370
initialized it gets the room name and it

00:18:20,210 --> 00:18:24,250
sits and it waits that is all it does

00:18:22,370 --> 00:18:27,290
until the user interacts

00:18:24,250 --> 00:18:28,880
we then know that there are a few bits

00:18:27,290 --> 00:18:31,520
of data that we're going to need in

00:18:28,880 --> 00:18:33,350
order for them to book any kind of room

00:18:31,520 --> 00:18:34,790
so the first of those is that we know

00:18:33,350 --> 00:18:36,650
we're going to have to get the time

00:18:34,790 --> 00:18:38,900
slots so we need to know when the room

00:18:36,650 --> 00:18:40,130
is available so that's one of the API

00:18:38,900 --> 00:18:43,550
calls we're going to have to make write

00:18:40,130 --> 00:18:44,810
the beginning we also know they're

00:18:43,550 --> 00:18:46,640
booking a room they're going to need to

00:18:44,810 --> 00:18:48,590
know price so we know there's gonna have

00:18:46,640 --> 00:18:53,090
to be an API call to calculate that and

00:18:48,590 --> 00:18:55,550
to show it back to the user within this

00:18:53,090 --> 00:18:57,740
system people can only book rooms if

00:18:55,550 --> 00:18:59,390
they are already registered within this

00:18:57,740 --> 00:19:01,010
booking system so there's gonna have to

00:18:59,390 --> 00:19:02,540
be some verification that goes on to

00:19:01,010 --> 00:19:04,460
check that they are actually already in

00:19:02,540 --> 00:19:07,670
our CMS so we've got a user verification

00:19:04,460 --> 00:19:09,500
API call and then the last one that we

00:19:07,670 --> 00:19:11,090
know we definitely need is we need a

00:19:09,500 --> 00:19:12,560
booking confirmation we need to know

00:19:11,090 --> 00:19:15,920
that it's been logged in the CMS we need

00:19:12,560 --> 00:19:17,420
to show the user that there's also some

00:19:15,920 --> 00:19:19,040
additional features that we want to add

00:19:17,420 --> 00:19:20,420
on to this so now we have to start

00:19:19,040 --> 00:19:22,070
thinking about what cause we're going to

00:19:20,420 --> 00:19:24,290
need for those and actually where we're

00:19:22,070 --> 00:19:26,540
going to fit them in so the first of

00:19:24,290 --> 00:19:28,610
those is that we want to be able to show

00:19:26,540 --> 00:19:30,560
our users if they can Quickbook the room

00:19:28,610 --> 00:19:31,970
so we want to have a visual tag which

00:19:30,560 --> 00:19:34,040
shows if it's available right at this

00:19:31,970 --> 00:19:36,230
minute or if it is not available right

00:19:34,040 --> 00:19:37,670
now so we're gonna have to check for the

00:19:36,230 --> 00:19:39,530
availability at the time that someone

00:19:37,670 --> 00:19:43,130
has interacted with the app it's another

00:19:39,530 --> 00:19:45,050
cool link to this we also want to be

00:19:43,130 --> 00:19:47,390
able to show the user which other rooms

00:19:45,050 --> 00:19:49,940
in the same venue also have a quick book

00:19:47,390 --> 00:19:51,200
so we're going to run this available now

00:19:49,940 --> 00:19:52,700
core but we're going to run it across

00:19:51,200 --> 00:19:54,710
the different venue across the different

00:19:52,700 --> 00:19:56,420
rooms in the same venue so that the user

00:19:54,710 --> 00:19:57,830
can have a look at that and decide if

00:19:56,420 --> 00:19:59,990
they want to go for that room or a

00:19:57,830 --> 00:20:01,820
different room

00:19:59,990 --> 00:20:04,970
then the last one that we know we're

00:20:01,820 --> 00:20:06,980
going to want is users can book now and

00:20:04,970 --> 00:20:09,620
they can book for today but they can

00:20:06,980 --> 00:20:12,350
also book seven days in the future so if

00:20:09,620 --> 00:20:13,640
they choose to book next Wednesday we're

00:20:12,350 --> 00:20:15,470
going to have to renew our time slots

00:20:13,640 --> 00:20:17,510
call with that new date passed into it

00:20:15,470 --> 00:20:20,030
so they've got accurate booking data of

00:20:17,510 --> 00:20:21,200
when they can book next Wednesday so

00:20:20,030 --> 00:20:23,120
this is the basic communication

00:20:21,200 --> 00:20:25,610
structure and these are API calls and

00:20:23,120 --> 00:20:27,260
later I'll show you the app I'll show

00:20:25,610 --> 00:20:28,880
you the API calls and this will all make

00:20:27,260 --> 00:20:32,000
more sense once you've got a bit of

00:20:28,880 --> 00:20:36,920
context I hope I hope it makes more

00:20:32,000 --> 00:20:38,660
sense all right so thinking about the

00:20:36,920 --> 00:20:42,950
experience then of actually going

00:20:38,660 --> 00:20:46,160
through this so when I was brought in

00:20:42,950 --> 00:20:48,679
the app and I was two weeks into being

00:20:46,160 --> 00:20:50,660
web developer and I had a really limited

00:20:48,679 --> 00:20:52,309
knowledge of Drupal safe anyone who

00:20:50,660 --> 00:20:54,440
knows Drupal there's a pretty steep

00:20:52,309 --> 00:20:56,510
learning curve say I was terrified

00:20:54,440 --> 00:20:57,710
because I was thinking oh my god okay

00:20:56,510 --> 00:20:59,090
not only am I gonna have to build a

00:20:57,710 --> 00:21:01,040
reactor and I've only had three weeks of

00:20:59,090 --> 00:21:02,780
training I'm now gonna have to do stuff

00:21:01,040 --> 00:21:04,940
with Drupal and I've got no idea what's

00:21:02,780 --> 00:21:06,530
going on here what was brilliant I

00:21:04,940 --> 00:21:08,720
didn't have to know anything about

00:21:06,530 --> 00:21:11,090
Drupal so I was purely working on the

00:21:08,720 --> 00:21:14,300
front-end it was decoupled so I was

00:21:11,090 --> 00:21:15,770
working on my own independently and this

00:21:14,300 --> 00:21:17,450
worked really really well with the other

00:21:15,770 --> 00:21:19,700
developer who was also working on the

00:21:17,450 --> 00:21:21,920
project because he was working more on

00:21:19,700 --> 00:21:23,780
the backend what this enables us to do

00:21:21,920 --> 00:21:25,610
was we were able to go pretty quick with

00:21:23,780 --> 00:21:27,170
our developments and to kind of give you

00:21:25,610 --> 00:21:29,170
a bit more context with this so I was

00:21:27,170 --> 00:21:32,600
working on my own on this quick book app

00:21:29,170 --> 00:21:35,420
my development speed bearing in mind I'm

00:21:32,600 --> 00:21:37,250
quite new to this was considerably

00:21:35,420 --> 00:21:39,470
quicker than the other developer who was

00:21:37,250 --> 00:21:41,360
working full stack he was developing the

00:21:39,470 --> 00:21:43,790
ream service app as well as working back

00:21:41,360 --> 00:21:46,280
end on the Drupal CMS so when you've

00:21:43,790 --> 00:21:48,679
decoupled suddenly your speed gets a lot

00:21:46,280 --> 00:21:53,660
quicker when you are working developing

00:21:48,679 --> 00:21:55,550
on one person one specific side um there

00:21:53,660 --> 00:21:57,830
was obviously the issue with this app

00:21:55,550 --> 00:21:59,240
only being UI and obviously I needed

00:21:57,830 --> 00:22:03,170
some data which you've just seen from

00:21:59,240 --> 00:22:04,790
that communication structure so what was

00:22:03,170 --> 00:22:07,160
really beneficial during this stage was

00:22:04,790 --> 00:22:08,900
that we had got this idea of how they

00:22:07,160 --> 00:22:11,330
were communicating and what API calls

00:22:08,900 --> 00:22:13,560
were being made and and we also had

00:22:11,330 --> 00:22:15,240
decided what format that day

00:22:13,560 --> 00:22:18,060
was going to be coming to the react taps

00:22:15,240 --> 00:22:19,230
in so we decided on JSON objects it

00:22:18,060 --> 00:22:22,020
meant that I was able to build the app

00:22:19,230 --> 00:22:24,150
with mock data so we put some fake data

00:22:22,020 --> 00:22:25,680
in I was able to build it start to

00:22:24,150 --> 00:22:27,540
finish and then when we got to the end

00:22:25,680 --> 00:22:29,580
and we actually plugged in the real API

00:22:27,540 --> 00:22:31,440
cause it was all a pretty seamless

00:22:29,580 --> 00:22:33,420
transition because those react apps

00:22:31,440 --> 00:22:35,010
already knew when the calls are going to

00:22:33,420 --> 00:22:36,750
happen what data was going to come back

00:22:35,010 --> 00:22:39,030
and also what the format of that data

00:22:36,750 --> 00:22:43,860
was says all it was a pretty slick

00:22:39,030 --> 00:22:45,750
operation and working with those there's

00:22:43,860 --> 00:22:47,070
another aspect to this which is the

00:22:45,750 --> 00:22:50,970
flexibility and the freedom of

00:22:47,070 --> 00:22:53,310
decoupling so working on a decoupled

00:22:50,970 --> 00:22:56,700
front-end gave me total flexibility with

00:22:53,310 --> 00:22:58,560
the mock-up so no longer was I tied to

00:22:56,700 --> 00:23:00,900
how a CMS wants to render out the front

00:22:58,560 --> 00:23:02,520
ends all of a sudden I have complete

00:23:00,900 --> 00:23:04,740
control over what I'm putting on that

00:23:02,520 --> 00:23:06,750
page and I also have complete control of

00:23:04,740 --> 00:23:08,610
the structure and hierarchy within my

00:23:06,750 --> 00:23:09,930
react app which gives me a huge amount

00:23:08,610 --> 00:23:11,790
of flexibility when we're thinking about

00:23:09,930 --> 00:23:13,380
scaling it up so I've already got the

00:23:11,790 --> 00:23:14,940
foresight of thinking if we want to add

00:23:13,380 --> 00:23:16,620
in features what's the best way for me

00:23:14,940 --> 00:23:20,040
to build this app so I can future-proof

00:23:16,620 --> 00:23:22,770
it as much as possible this also gives

00:23:20,040 --> 00:23:25,680
the ability then to have a very clean a

00:23:22,770 --> 00:23:28,050
very efficient front-end app also

00:23:25,680 --> 00:23:30,390
potentially the option to have no

00:23:28,050 --> 00:23:33,320
redundant code or no access nothing

00:23:30,390 --> 00:23:33,320
there that you don't actually need

00:23:33,350 --> 00:23:37,680
ultimately what this is translating to

00:23:35,490 --> 00:23:39,720
is that when you've got that flexibility

00:23:37,680 --> 00:23:41,340
on the front end you're able to create

00:23:39,720 --> 00:23:42,900
some really beautiful experiences and

00:23:41,340 --> 00:23:44,310
these can be for any platform because

00:23:42,900 --> 00:23:50,370
it's up to you so to you how you build

00:23:44,310 --> 00:23:52,310
it and how you architect it as well okay

00:23:50,370 --> 00:23:54,810
so I've kind of talked about Drupal

00:23:52,310 --> 00:23:56,460
headless CMS and react up in isolation

00:23:54,810 --> 00:23:57,810
but obviously there's kind of a

00:23:56,460 --> 00:23:59,570
handshake that's going on between them

00:23:57,810 --> 00:24:02,570
they've got to get information somehow

00:23:59,570 --> 00:24:05,370
so when we're then thinking about

00:24:02,570 --> 00:24:08,430
tapping in to that that content

00:24:05,370 --> 00:24:12,240
repository in the headless CMS and we've

00:24:08,430 --> 00:24:13,950
got an API so working with Drupal 8 and

00:24:12,240 --> 00:24:17,370
there's a reason why I focused on Drupal

00:24:13,950 --> 00:24:19,800
8 is that creating the endpoints for

00:24:17,370 --> 00:24:21,450
those API calls is it's really really

00:24:19,800 --> 00:24:23,190
straightforward kind of emphasize enough

00:24:21,450 --> 00:24:27,030
how straightforward it is with Drupal 8

00:24:23,190 --> 00:24:29,070
and that is because in Drupal 8 in core

00:24:27,030 --> 00:24:31,110
you have got two modules to do this you

00:24:29,070 --> 00:24:33,120
have got one which is your restful api

00:24:31,110 --> 00:24:34,950
web services and you've got another

00:24:33,120 --> 00:24:37,220
module which is your admin user

00:24:34,950 --> 00:24:40,590
interface allowing you to control that

00:24:37,220 --> 00:24:43,740
mmm from a very pretty view actually if

00:24:40,590 --> 00:24:45,750
you're used to doing it in code contrast

00:24:43,740 --> 00:24:47,820
this to Drupal 7 say Drupal 7 doesn't

00:24:45,750 --> 00:24:49,290
have it built into core so if you are

00:24:47,820 --> 00:24:50,850
looking at doing a headless CMS you've

00:24:49,290 --> 00:24:52,560
got to go out and get your modules and

00:24:50,850 --> 00:24:54,120
configure them yourselves it's possible

00:24:52,560 --> 00:24:56,970
it's just a little bit quicker and

00:24:54,120 --> 00:24:59,400
easier with Drupal 8 and actually when

00:24:56,970 --> 00:25:01,770
you're using these modules it's entirely

00:24:59,400 --> 00:25:03,600
possible then to go from a fresh Drupal

00:25:01,770 --> 00:25:05,730
and install to making an API call

00:25:03,600 --> 00:25:11,040
literally within minutes it's that

00:25:05,730 --> 00:25:12,630
simple to get started so this is kind of

00:25:11,040 --> 00:25:14,310
what part of the user interface looks

00:25:12,630 --> 00:25:17,400
like when we're working with Drupal and

00:25:14,310 --> 00:25:19,650
so when we are working with our API

00:25:17,400 --> 00:25:22,140
calls setting up our endpoints we are

00:25:19,650 --> 00:25:24,000
able to specify the verbs that we want

00:25:22,140 --> 00:25:26,610
to be allowed with any specific resource

00:25:24,000 --> 00:25:28,230
and we're also able to specify the

00:25:26,610 --> 00:25:30,630
format so you can see here I've got

00:25:28,230 --> 00:25:32,880
these formats so JSON and XML

00:25:30,630 --> 00:25:34,530
they come in built into core and I think

00:25:32,880 --> 00:25:36,720
if you want this little guy here I think

00:25:34,530 --> 00:25:37,770
you have to download a module and but

00:25:36,720 --> 00:25:39,960
essentially we've we've already gotten

00:25:37,770 --> 00:25:43,950
control over how we are presenting this

00:25:39,960 --> 00:25:45,990
data we're also able here to specify our

00:25:43,950 --> 00:25:47,520
authentication so if we need to think

00:25:45,990 --> 00:25:49,740
about cookies and about user sessions

00:25:47,520 --> 00:25:53,730
were able to do that and right if you

00:25:49,740 --> 00:25:55,920
are you I am and essentially what we've

00:25:53,730 --> 00:25:58,080
got here is we've got a really user

00:25:55,920 --> 00:26:00,540
friendly way to interact with our API

00:25:58,080 --> 00:26:02,490
and to modify things so we can actually

00:26:00,540 --> 00:26:05,490
build a functioning API just through

00:26:02,490 --> 00:26:06,990
this just through the UI and if we want

00:26:05,490 --> 00:26:08,280
to go a bit more custom if we want to

00:26:06,990 --> 00:26:09,330
add a bit more functionality which we

00:26:08,280 --> 00:26:11,820
probably will want to do at some point

00:26:09,330 --> 00:26:12,990
we can then do that in the code okay we

00:26:11,820 --> 00:26:14,820
can doing the code and it will appear

00:26:12,990 --> 00:26:16,230
here so actually those examples that

00:26:14,820 --> 00:26:22,320
I've got there are kind of more custom

00:26:16,230 --> 00:26:24,060
calls on the left-hand side ok this is

00:26:22,320 --> 00:26:28,400
exciting bit and I really hope this

00:26:24,060 --> 00:26:31,110
works and so I am going to demo the app

00:26:28,400 --> 00:26:32,940
so you can actually see it what got here

00:26:31,110 --> 00:26:34,230
is so this is the app just sitting here

00:26:32,940 --> 00:26:35,730
this one with the gray background and

00:26:34,230 --> 00:26:39,180
this is iPad view so this is actually

00:26:35,730 --> 00:26:40,390
what it will look like on the left hand

00:26:39,180 --> 00:26:42,340
side

00:26:40,390 --> 00:26:44,680
my console and so what I've done for

00:26:42,340 --> 00:26:47,200
this recording is every time an API call

00:26:44,680 --> 00:26:48,640
is made I've added a console log message

00:26:47,200 --> 00:26:50,440
so you can see when it's made and when

00:26:48,640 --> 00:26:52,000
the response is received so you'll be

00:26:50,440 --> 00:26:53,830
asked to actually see exactly when this

00:26:52,000 --> 00:26:56,140
app is interacting with my head the TMS

00:26:53,830 --> 00:26:57,880
and when it's actually not interesting

00:26:56,140 --> 00:27:00,340
at all it's just using the data that

00:26:57,880 --> 00:27:02,470
it's collected all right so this is the

00:27:00,340 --> 00:27:04,990
app in its static State so what I'm

00:27:02,470 --> 00:27:07,330
indicating there at the top that's the

00:27:04,990 --> 00:27:09,100
room title API call that's already been

00:27:07,330 --> 00:27:10,750
made and this is now sitting here it's

00:27:09,100 --> 00:27:13,960
waiting for a user to interact with it

00:27:10,750 --> 00:27:15,910
so that's not going to do as soon as I

00:27:13,960 --> 00:27:17,530
click into it then I've got three API

00:27:15,910 --> 00:27:19,180
calls that have been triggered so this

00:27:17,530 --> 00:27:20,740
is getting the initial information to

00:27:19,180 --> 00:27:23,830
start my app up to give the user

00:27:20,740 --> 00:27:26,140
essentially something to do the most

00:27:23,830 --> 00:27:28,960
prominent of those is this timeline so

00:27:26,140 --> 00:27:31,870
these are the available times that the

00:27:28,960 --> 00:27:33,100
user is available to book if you click

00:27:31,870 --> 00:27:34,840
on one it then shows you the possible

00:27:33,100 --> 00:27:37,810
duration so this data has come back with

00:27:34,840 --> 00:27:40,510
the time slots there's also the feature

00:27:37,810 --> 00:27:42,700
then to book seven days in advance so if

00:27:40,510 --> 00:27:44,320
I select next Wednesday it's gonna redo

00:27:42,700 --> 00:27:45,790
that time slot school so you see it on

00:27:44,320 --> 00:27:47,320
the left okay

00:27:45,790 --> 00:27:49,630
we've done it we've got a new updated

00:27:47,320 --> 00:27:51,220
timeline now we can see that some of

00:27:49,630 --> 00:27:53,590
these times are greyed outs it's because

00:27:51,220 --> 00:27:54,910
they're not available on Wednesday and

00:27:53,590 --> 00:27:57,340
if I go ahead and I choose a different

00:27:54,910 --> 00:27:59,430
time we can see some of those durations

00:27:57,340 --> 00:28:01,780
are also not available

00:27:59,430 --> 00:28:03,040
so it's updated this and this would keep

00:28:01,780 --> 00:28:05,830
going if you kept changing the date

00:28:03,040 --> 00:28:11,110
every time and you call so no matter

00:28:05,830 --> 00:28:13,060
today okay so there's this indicator

00:28:11,110 --> 00:28:14,830
then in the header so this is what I was

00:28:13,060 --> 00:28:16,420
talking about with the quick book so

00:28:14,830 --> 00:28:17,740
that says currently available if it

00:28:16,420 --> 00:28:20,010
wasn't it would be grayed out and it

00:28:17,740 --> 00:28:21,970
would say not currently available and

00:28:20,010 --> 00:28:23,920
then these are the other rooms in that

00:28:21,970 --> 00:28:25,660
venue which I could potentially book if

00:28:23,920 --> 00:28:31,120
I wanted to so they also have a quick

00:28:25,660 --> 00:28:33,460
book feature okay if I then decide to

00:28:31,120 --> 00:28:36,280
book my room now so I get my possible

00:28:33,460 --> 00:28:38,110
generations slack message I didn't turn

00:28:36,280 --> 00:28:40,990
that off and they did this that's smart

00:28:38,110 --> 00:28:42,190
and so I've got this and then we've got

00:28:40,990 --> 00:28:43,660
a few things happening now so we

00:28:42,190 --> 00:28:45,760
immediately had an API call for the

00:28:43,660 --> 00:28:47,950
price this has rendered out here that

00:28:45,760 --> 00:28:49,660
comes from our back-end and now I'm

00:28:47,950 --> 00:28:51,190
going to try and book it so what we're

00:28:49,660 --> 00:28:53,650
going to see happen now is we've got

00:28:51,190 --> 00:28:54,310
credentials verification to show that I

00:28:53,650 --> 00:28:57,220
am actually

00:28:54,310 --> 00:28:58,870
user in the system we can see here that

00:28:57,220 --> 00:29:01,420
the response has come back saying true

00:28:58,870 --> 00:29:03,610
so we know I am if that came back false

00:29:01,420 --> 00:29:04,720
we'd be presented with a failure message

00:29:03,610 --> 00:29:06,370
saying that you are not registered in

00:29:04,720 --> 00:29:10,780
the system please contact your

00:29:06,370 --> 00:29:13,750
administrator once we've got that true I

00:29:10,780 --> 00:29:15,910
can then send that into the booking

00:29:13,750 --> 00:29:17,410
system and then again I'm waiting for

00:29:15,910 --> 00:29:19,480
the response so you can see here I've

00:29:17,410 --> 00:29:22,210
got a true response which means I've got

00:29:19,480 --> 00:29:23,950
my success message if it was a false I'd

00:29:22,210 --> 00:29:27,040
have a whoops there's an error your

00:29:23,950 --> 00:29:28,390
booking hasn't been made so hopefully

00:29:27,040 --> 00:29:30,460
this gives a bit more context with how

00:29:28,390 --> 00:29:35,250
it's working with the API calls and how

00:29:30,460 --> 00:29:44,590
it's actually getting its data and now

00:29:35,250 --> 00:29:48,940
hey perfect okay no no okay look look

00:29:44,590 --> 00:29:54,610
notes done okay no yes

00:29:48,940 --> 00:29:56,380
okay great okay so thinking about then

00:29:54,610 --> 00:29:58,480
extensibility so with this particular

00:29:56,380 --> 00:30:01,090
project we obviously only had to react

00:29:58,480 --> 00:30:02,890
apps but there's actually nothing

00:30:01,090 --> 00:30:04,840
stopping us from adding three or adding

00:30:02,890 --> 00:30:06,370
four we can extend this as many times as

00:30:04,840 --> 00:30:08,320
we want in as many different directions

00:30:06,370 --> 00:30:11,170
as we want and there's actually nothing

00:30:08,320 --> 00:30:12,220
tying us to using react either so we

00:30:11,170 --> 00:30:14,380
could choose to use a different

00:30:12,220 --> 00:30:15,850
framework and that's really where this

00:30:14,380 --> 00:30:18,460
starts become a really powerful way to

00:30:15,850 --> 00:30:19,990
build things because it's so extensible

00:30:18,460 --> 00:30:22,180
we can do whatever we want with that

00:30:19,990 --> 00:30:24,700
data we can take it in any direction we

00:30:22,180 --> 00:30:25,900
could do it on any platform and we can

00:30:24,700 --> 00:30:27,640
have as many front ends as we want

00:30:25,900 --> 00:30:30,070
because those front ends they're

00:30:27,640 --> 00:30:32,350
completely unaware of each other so what

00:30:30,070 --> 00:30:34,630
it allows is that essentially they could

00:30:32,350 --> 00:30:36,190
be super lightweights and they're just

00:30:34,630 --> 00:30:37,540
dumb clients so they're rendering the

00:30:36,190 --> 00:30:39,460
data that they're getting which allows

00:30:37,540 --> 00:30:41,170
us to have these performant apps as well

00:30:39,460 --> 00:30:43,390
sitting on the front end of what could

00:30:41,170 --> 00:30:46,950
be quite a complex structure complexly

00:30:43,390 --> 00:30:49,270
no it's not weird complex structure yeah

00:30:46,950 --> 00:30:50,260
complex backends okay with a lot of

00:30:49,270 --> 00:30:54,880
content and a lot of different

00:30:50,260 --> 00:30:56,620
structures going on and we're also not

00:30:54,880 --> 00:30:58,830
just confined to JavaScript frameworks

00:30:56,620 --> 00:31:01,480
obviously I talked about react today and

00:30:58,830 --> 00:31:04,420
buttery little example so this here is

00:31:01,480 --> 00:31:07,060
my lovely CMS it's headless it's my room

00:31:04,420 --> 00:31:07,779
booking CMS and I decide that I want to

00:31:07,060 --> 00:31:10,179
extend it out

00:31:07,779 --> 00:31:11,889
to a few apps so okay again I've an

00:31:10,179 --> 00:31:14,200
angular app probably gonna choose to

00:31:11,889 --> 00:31:16,090
have a view why not and I'm also gonna

00:31:14,200 --> 00:31:17,649
have a react app so I'm super skilled

00:31:16,090 --> 00:31:20,399
right now I can do Drupal I can do all

00:31:17,649 --> 00:31:23,619
of those it's great for five months and

00:31:20,399 --> 00:31:26,529
I'm at this point there is absolutely

00:31:23,619 --> 00:31:28,119
nothing stopping me from taking this in

00:31:26,529 --> 00:31:32,440
a completely different direction

00:31:28,119 --> 00:31:35,789
say for example a smart fridge got the

00:31:32,440 --> 00:31:38,289
data available I've got the API set up I

00:31:35,789 --> 00:31:40,589
could get that data and I could show you

00:31:38,289 --> 00:31:43,239
that day's meetings on the office fridge

00:31:40,589 --> 00:31:45,070
don't know I'd want to I could do it if

00:31:43,239 --> 00:31:47,019
I wanted to do it that's kind of how its

00:31:45,070 --> 00:31:52,539
tensile and how flexible this idea is of

00:31:47,019 --> 00:31:54,580
headless CMS's okay so final slides I'm

00:31:52,539 --> 00:31:56,830
going to talk about these are a few

00:31:54,580 --> 00:31:59,409
takeaways so it was the first time we've

00:31:56,830 --> 00:32:00,729
done this naturally things came after

00:31:59,409 --> 00:32:02,169
that that we would do differently if we

00:32:00,729 --> 00:32:05,049
were going to but if we were going to

00:32:02,169 --> 00:32:06,759
redo this and there are also things that

00:32:05,049 --> 00:32:10,119
if you are thinking of exploring this

00:32:06,759 --> 00:32:12,609
that please don't make the same mistakes

00:32:10,119 --> 00:32:15,519
essentially as a mistakes that I made so

00:32:12,609 --> 00:32:19,089
my pain you'll gain first of those is

00:32:15,519 --> 00:32:21,129
this idea of resourcing so I talked

00:32:19,089 --> 00:32:22,570
about decoupling as being a really

00:32:21,129 --> 00:32:24,249
positive thing because I said you can

00:32:22,570 --> 00:32:25,929
have experts working on both ends and

00:32:24,249 --> 00:32:29,559
they can work independently and it's

00:32:25,929 --> 00:32:31,929
super quick it's great problem is if you

00:32:29,559 --> 00:32:33,849
don't have those experts how are you

00:32:31,929 --> 00:32:34,719
gonna build these things so you've got

00:32:33,849 --> 00:32:36,729
to make sure that you've got that

00:32:34,719 --> 00:32:38,080
resourcing in place or that you can get

00:32:36,729 --> 00:32:40,659
that resourcing if you're going to do

00:32:38,080 --> 00:32:42,460
this so our apps are built with me doing

00:32:40,659 --> 00:32:44,529
one of them and with another developer

00:32:42,460 --> 00:32:46,479
who was learning react on the job so as

00:32:44,529 --> 00:32:49,210
he was going he was learning and he was

00:32:46,479 --> 00:32:50,830
modifying it was thought of this is that

00:32:49,210 --> 00:32:53,739
we had a hell of a lot of struggles

00:32:50,830 --> 00:32:55,570
along the way of building these and some

00:32:53,739 --> 00:32:57,489
of the code is perhaps more clunky than

00:32:55,570 --> 00:32:59,019
we would like it and in fact it's now

00:32:57,489 --> 00:32:59,919
when I look back at the app I think oh

00:32:59,019 --> 00:33:01,389
my god what was I doing

00:32:59,919 --> 00:33:03,309
that's definitely not the best way to do

00:33:01,389 --> 00:33:04,839
this and want to naturally we factor the

00:33:03,309 --> 00:33:08,859
whole thing which probably not gonna

00:33:04,839 --> 00:33:11,139
happen it also has a an impact on

00:33:08,859 --> 00:33:13,419
maintenance so if you've got a clunky

00:33:11,139 --> 00:33:14,950
codes that ongoing maintenance is going

00:33:13,419 --> 00:33:17,229
to become a bit more cumbersome kind of

00:33:14,950 --> 00:33:19,179
become a bit more difficult plus if

00:33:17,229 --> 00:33:21,510
you're react developers leave the agency

00:33:19,179 --> 00:33:23,730
who's going to maintain it

00:33:21,510 --> 00:33:24,570
who's gonna maintain that technology you

00:33:23,730 --> 00:33:27,870
need to make sure you've got that

00:33:24,570 --> 00:33:29,910
resourcing there the second of these

00:33:27,870 --> 00:33:32,940
takeaways is to ensure that you are

00:33:29,910 --> 00:33:36,120
choosing the best technology and the

00:33:32,940 --> 00:33:38,010
right tooling for the job so if we were

00:33:36,120 --> 00:33:40,980
creating multiple experiences from the

00:33:38,010 --> 00:33:44,550
same content repository so using react

00:33:40,980 --> 00:33:46,700
and using Drupal as a headless CMS was

00:33:44,550 --> 00:33:49,530
definitely the right thing for us to do

00:33:46,700 --> 00:33:51,630
but actually when you really look at the

00:33:49,530 --> 00:33:53,940
whole project including that website

00:33:51,630 --> 00:33:56,730
which is Drupal backend Drupal front end

00:33:53,940 --> 00:33:59,400
completely integrated the whole project

00:33:56,730 --> 00:34:01,290
probably should have been headless so we

00:33:59,400 --> 00:34:02,670
kind of we forced that Drupal front-end

00:34:01,290 --> 00:34:04,530
to do things that it probably wasn't

00:34:02,670 --> 00:34:05,910
necessarily meant to do and it would

00:34:04,530 --> 00:34:07,200
have just been a lot easier on us and a

00:34:05,910 --> 00:34:13,679
lot more flexible if we decide to

00:34:07,200 --> 00:34:16,530
decouple the whole project I said that

00:34:13,679 --> 00:34:18,630
react was the right choice for us it was

00:34:16,530 --> 00:34:21,060
yeah it was a great choice but we built

00:34:18,630 --> 00:34:23,460
it built both of our apps without any

00:34:21,060 --> 00:34:25,320
state management so for those of you who

00:34:23,460 --> 00:34:27,090
know me ax you know that just having the

00:34:25,320 --> 00:34:28,290
state's floating around it's probably

00:34:27,090 --> 00:34:31,200
gonna cause you some problems down the

00:34:28,290 --> 00:34:34,740
line and it did it did causes quite a

00:34:31,200 --> 00:34:37,950
few problems actually um so I think in

00:34:34,740 --> 00:34:39,540
our situation the the decision to have

00:34:37,950 --> 00:34:41,399
state management tooling was just made a

00:34:39,540 --> 00:34:44,610
little bit too late we didn't have time

00:34:41,399 --> 00:34:46,280
to implement it so if you are doing this

00:34:44,610 --> 00:34:48,840
and if you are choosing our technologies

00:34:46,280 --> 00:34:50,070
make sure you've got the expertise there

00:34:48,840 --> 00:34:51,300
to know that you're doing it in the

00:34:50,070 --> 00:34:52,980
right way that's actually going to be

00:34:51,300 --> 00:34:54,330
easy and straightforward for you because

00:34:52,980 --> 00:34:55,620
that's the whole point of doing this

00:34:54,330 --> 00:34:58,669
it's supposed to be something that is

00:34:55,620 --> 00:34:58,669
flexible and adaptable

00:35:00,260 --> 00:35:07,710
okay applets point down here and clear

00:35:02,910 --> 00:35:11,430
separation of concerns so if we were

00:35:07,710 --> 00:35:13,470
thinking about kind of not going down

00:35:11,430 --> 00:35:15,120
this monolithic CMS roots and not having

00:35:13,470 --> 00:35:19,350
a Drupal back-end Drupal but a front-end

00:35:15,120 --> 00:35:20,820
or WordPress or endeavor CMS we need to

00:35:19,350 --> 00:35:22,440
think about which end is doing which

00:35:20,820 --> 00:35:23,940
because if we've got a monolithic build

00:35:22,440 --> 00:35:25,170
where they're all kind of working

00:35:23,940 --> 00:35:27,210
together a case we don't have to

00:35:25,170 --> 00:35:28,710
actually separate out that much but when

00:35:27,210 --> 00:35:30,030
I've got a headless CMS and I've got a

00:35:28,710 --> 00:35:32,400
react up on the front I need to know

00:35:30,030 --> 00:35:34,880
which is doing which so I know what to

00:35:32,400 --> 00:35:34,880
tell it to do

00:35:35,079 --> 00:35:39,489
so for us we we came a cropper a little

00:35:36,910 --> 00:35:41,890
bit with this so we had an issue with

00:35:39,489 --> 00:35:44,709
our price calculation for the quit book

00:35:41,890 --> 00:35:47,769
app so our back-end it had the price per

00:35:44,709 --> 00:35:50,140
price per hour for these rooms react app

00:35:47,769 --> 00:35:51,430
had the duration and see we're kinda

00:35:50,140 --> 00:35:53,440
thinking like oh hey where does this

00:35:51,430 --> 00:35:56,229
logic actually happen where do we make

00:35:53,440 --> 00:35:58,119
the calculation this is something which

00:35:56,229 --> 00:35:59,349
kind of slowed us down a little bit as

00:35:58,119 --> 00:36:00,700
we made that decision and then

00:35:59,349 --> 00:36:02,650
implemented it's definitely something

00:36:00,700 --> 00:36:04,890
that could have been avoided had we

00:36:02,650 --> 00:36:10,119
thought about that little bit earlier

00:36:04,890 --> 00:36:13,509
that situation is in reality not quite

00:36:10,119 --> 00:36:16,799
as simple as I've perhaps suggested so

00:36:13,509 --> 00:36:19,650
we in this project we didn't just have

00:36:16,799 --> 00:36:23,619
react app sitting with a headless Drupal

00:36:19,650 --> 00:36:25,119
CMS we actually had a reactor sitting

00:36:23,619 --> 00:36:27,700
with a headless CMS which was then

00:36:25,119 --> 00:36:29,619
connected to a third-party CRM so

00:36:27,700 --> 00:36:31,089
whenever we were making calls we were

00:36:29,619 --> 00:36:33,640
thinking about the API call going to

00:36:31,089 --> 00:36:36,249
Drupal maybe it'll come straight back if

00:36:33,640 --> 00:36:39,069
the data was in the CMS if not Drupal

00:36:36,249 --> 00:36:40,900
would then call the CRM it get the data

00:36:39,069 --> 00:36:43,630
back it was send it back just be the

00:36:40,900 --> 00:36:45,009
react app so it's a bit more of a

00:36:43,630 --> 00:36:46,869
complicated structure in terms of

00:36:45,009 --> 00:36:50,380
separation of concerns we've got now our

00:36:46,869 --> 00:36:52,900
different things to think about and but

00:36:50,380 --> 00:36:54,569
actually thinking about those apps and

00:36:52,900 --> 00:36:57,130
kind of at that more complicated sense

00:36:54,569 --> 00:36:58,539
what it really reinforces actually that

00:36:57,130 --> 00:37:01,359
when you have a clear separation of

00:36:58,539 --> 00:37:02,949
concerns it's fantastic because we did

00:37:01,359 --> 00:37:05,049
have quite a complex structure on the

00:37:02,949 --> 00:37:08,349
back of ours and it was pretty difficult

00:37:05,049 --> 00:37:10,809
to work with but actually by decoupling

00:37:08,349 --> 00:37:13,029
and be had by having those reactor react

00:37:10,809 --> 00:37:15,519
front ends completely unaware of what

00:37:13,029 --> 00:37:17,349
was going on it allowed us to really

00:37:15,519 --> 00:37:19,329
leverage all that data without having

00:37:17,349 --> 00:37:21,849
that cognitive load so they wear

00:37:19,329 --> 00:37:24,819
lightweight they wear fast and and that

00:37:21,849 --> 00:37:28,869
is because they were decoupled it was a

00:37:24,819 --> 00:37:30,219
fantastic thing okay final points this

00:37:28,869 --> 00:37:31,479
is the one that I probably labor most

00:37:30,219 --> 00:37:33,279
heavily I think this is super super

00:37:31,479 --> 00:37:34,359
important if you are going down this

00:37:33,279 --> 00:37:37,239
routes and trying to make something

00:37:34,359 --> 00:37:39,400
extensible and it's flexible and that is

00:37:37,239 --> 00:37:42,249
to have a clean and consistent API

00:37:39,400 --> 00:37:46,019
design so the point of this is

00:37:42,249 --> 00:37:48,770
extensibility so keep your API clean and

00:37:46,019 --> 00:37:51,630
document it meticulous

00:37:48,770 --> 00:37:54,630
so our API ended up being a bit more

00:37:51,630 --> 00:37:56,400
custom than it did being restful which

00:37:54,630 --> 00:37:59,099
kind of means that we really need to

00:37:56,400 --> 00:38:00,390
document it pretty well so we know that

00:37:59,099 --> 00:38:02,790
actually what's happening there

00:38:00,390 --> 00:38:05,790
we didn't document it quite as well as

00:38:02,790 --> 00:38:07,560
we need it to and all this really means

00:38:05,790 --> 00:38:10,230
for us it's just implications in terms

00:38:07,560 --> 00:38:12,720
of time now so in the future when we go

00:38:10,230 --> 00:38:13,910
to extend this even further we're gonna

00:38:12,720 --> 00:38:16,260
have to just do a little bit of legwork

00:38:13,910 --> 00:38:17,460
working with those API endpoints so

00:38:16,260 --> 00:38:19,890
we're gonna have to figure them out

00:38:17,460 --> 00:38:21,390
essentially work out what does what what

00:38:19,890 --> 00:38:24,270
data we're going to get what data we

00:38:21,390 --> 00:38:26,130
need to give so final bit of advice that

00:38:24,270 --> 00:38:27,930
I'd give you is that if you are going

00:38:26,130 --> 00:38:29,490
down this route of having a headless CMS

00:38:27,930 --> 00:38:33,000
so that you can extend it in multiple

00:38:29,490 --> 00:38:35,310
frameworks on the front end invest time

00:38:33,000 --> 00:38:37,079
in your API design because that is the

00:38:35,310 --> 00:38:39,030
part if there's any of all of these

00:38:37,079 --> 00:38:42,530
that's going to prevent you from making

00:38:39,030 --> 00:38:42,530
this extensible and easy to work with

00:38:42,800 --> 00:38:47,390
okay

00:38:43,950 --> 00:38:53,080
and if we've got any time for questions

00:38:47,390 --> 00:38:53,080

YouTube URL: https://www.youtube.com/watch?v=-8_RDR4wAKM


