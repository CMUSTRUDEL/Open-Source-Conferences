Title: The Bridge - Reinventing Social Networks - Bristol JS - October 2018
Publication date: 2018-11-13
Playlist: Bristol JS
Description: 
	Presented by Ollie Haydon-Mulligan.

If you'd like a completely unbiased feed of your Facebook friends' posts, this tool is for you.

This project was broadly prompted by thinking about how to empower social network users. One current limitation is how separate social networks are - it's hard to feel ownership of our online activity when we are locked into so many separate networks that don't connect with each other. We thought it would cool to build a bridge between networks that let us each manage all our communications in one place.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:09,570
everyone right I am Ali this is Mike we

00:00:06,450 --> 00:00:12,660
both worked it simple web which sir

00:00:09,570 --> 00:00:14,580
agency restore you might heard it will

00:00:12,660 --> 00:00:15,719
tell you a bit about that in a sec we're

00:00:14,580 --> 00:00:20,960
going to talk about projects that we

00:00:15,719 --> 00:00:20,960
worked on together called the bridge

00:00:21,590 --> 00:00:28,680
subtitled reinventing social networks

00:00:24,830 --> 00:00:30,060
because what we wanted to do is

00:00:28,680 --> 00:00:33,059
completely reinvent how social networks

00:00:30,060 --> 00:00:39,270
work in order to give more control and

00:00:33,059 --> 00:00:41,120
power to users but we have ten days so

00:00:39,270 --> 00:00:43,559
we have another subtitle which is

00:00:41,120 --> 00:00:47,760
messing around with Facebook which is a

00:00:43,559 --> 00:00:51,960
more accurate trapline what we spend our

00:00:47,760 --> 00:00:54,809
10 days doing so we have 10 days and we

00:00:51,960 --> 00:00:57,510
settled for experimenting with and

00:00:54,809 --> 00:01:01,140
learning about crawling websites

00:00:57,510 --> 00:01:05,430
scraping content specifically from

00:01:01,140 --> 00:01:08,210
Facebook and specifically creepy calling

00:01:05,430 --> 00:01:08,210
Facebook

00:01:08,340 --> 00:01:14,020
which is how I spent my morning those

00:01:12,790 --> 00:01:18,790
are the that if you've got better puns

00:01:14,020 --> 00:01:21,490
please let me know so we also learned a

00:01:18,790 --> 00:01:25,060
fair bit about WebSockets and about

00:01:21,490 --> 00:01:26,409
building user friendly CLI tool and we

00:01:25,060 --> 00:01:29,020
thought some of what we learned in the

00:01:26,409 --> 00:01:31,420
process would be interesting to you so

00:01:29,020 --> 00:01:33,280
we're going to talk a bit about the

00:01:31,420 --> 00:01:36,490
inspiration and the background behind

00:01:33,280 --> 00:01:38,800
what we did then we'll talk about and

00:01:36,490 --> 00:01:42,119
show you what we actually made and then

00:01:38,800 --> 00:01:44,740
we'll go into some detail about how we

00:01:42,119 --> 00:01:48,190
did it and some of the gotchas and

00:01:44,740 --> 00:01:53,470
interesting things that you might want

00:01:48,190 --> 00:01:55,539
to use yourself cool so as always

00:01:53,470 --> 00:01:58,690
mentioned we are web developers are

00:01:55,539 --> 00:02:01,149
simple web which is a agency and simple

00:01:58,690 --> 00:02:02,380
web we have a program that we recently

00:02:01,149 --> 00:02:04,990
created about six months ago called

00:02:02,380 --> 00:02:07,659
playground which the intention of that

00:02:04,990 --> 00:02:08,860
is to instead of working on projects for

00:02:07,659 --> 00:02:11,170
clients that they give us an opportunity

00:02:08,860 --> 00:02:13,329
to pitch for our own projects and then

00:02:11,170 --> 00:02:15,190
to pitch them to everyone and then get a

00:02:13,329 --> 00:02:16,390
bit of time bit of resource available so

00:02:15,190 --> 00:02:19,840
we can actually work on these projects

00:02:16,390 --> 00:02:21,430
and stuff for us essentially so I'm one

00:02:19,840 --> 00:02:24,130
week I decided to come up with an idea

00:02:21,430 --> 00:02:25,840
of pitching my own personal CRM which

00:02:24,130 --> 00:02:28,180
would just be a basic tool that would

00:02:25,840 --> 00:02:33,790
allow you to manage every aspect of your

00:02:28,180 --> 00:02:36,310
life and that prompted for me the idea

00:02:33,790 --> 00:02:37,780
of not so much helping to manage every

00:02:36,310 --> 00:02:40,540
aspect of your life which seemed a bit

00:02:37,780 --> 00:02:42,790
ugly ambitious but of managing your

00:02:40,540 --> 00:02:45,280
various social networks from one place

00:02:42,790 --> 00:02:48,190
and I was trying to think of ideas to

00:02:45,280 --> 00:02:51,910
pitch when I read this in an interview

00:02:48,190 --> 00:02:53,700
with Antonia Antonio Garcia Martinez who

00:02:51,910 --> 00:02:55,810
was a product manager at Facebook

00:02:53,700 --> 00:02:57,400
imagine if you somehow went back in time

00:02:55,810 --> 00:03:00,400
you tried to create a social network in

00:02:57,400 --> 00:03:02,470
the 1980s you stipulate your own user

00:03:00,400 --> 00:03:04,570
controlled social media file that's

00:03:02,470 --> 00:03:07,180
something that I would own and it almost

00:03:04,570 --> 00:03:08,920
be like an email I've got my data and I

00:03:07,180 --> 00:03:11,709
can shop it around to whatever social

00:03:08,920 --> 00:03:15,269
network I wanted which is a bit cryptic

00:03:11,709 --> 00:03:18,280
but I interpreted that to mean that I

00:03:15,269 --> 00:03:21,020
don't receive tweets or Facebook posts

00:03:18,280 --> 00:03:23,870
like I receive emails so emails

00:03:21,020 --> 00:03:26,240
then through any provider and they reach

00:03:23,870 --> 00:03:29,030
me at some other provider because emails

00:03:26,240 --> 00:03:31,580
an open protocol but tweets are sent and

00:03:29,030 --> 00:03:35,090
consumed and exists only in Twitter and

00:03:31,580 --> 00:03:38,300
Facebook posts are sent and received and

00:03:35,090 --> 00:03:40,190
exists only in Facebook which sounds

00:03:38,300 --> 00:03:40,490
kind of obvious when you say it like

00:03:40,190 --> 00:03:43,760
that

00:03:40,490 --> 00:03:45,650
but then when you compare it with email

00:03:43,760 --> 00:03:50,480
you think maybe it isn't completely

00:03:45,650 --> 00:03:53,630
inevitable so rather than having all

00:03:50,480 --> 00:03:55,880
these totally separate networks wouldn't

00:03:53,630 --> 00:03:59,360
it be more manageable to somehow bridge

00:03:55,880 --> 00:04:01,910
the gap between them it might feel like

00:03:59,360 --> 00:04:06,080
taking back control from the separate

00:04:01,910 --> 00:04:07,880
gatekeepers of your social life so this

00:04:06,080 --> 00:04:10,340
was one of our goals to build something

00:04:07,880 --> 00:04:14,300
that could make social networks more

00:04:10,340 --> 00:04:15,860
connected so another goal of this was

00:04:14,300 --> 00:04:18,620
was a quote from the same interview

00:04:15,860 --> 00:04:20,060
actually which is a way before Facebook

00:04:18,620 --> 00:04:22,250
going back to Google they've always

00:04:20,060 --> 00:04:24,890
claimed look we're just intermediaries

00:04:22,250 --> 00:04:26,630
the optin the algorithm optimizers for a

00:04:24,890 --> 00:04:28,550
metric whether it's engagement clicks or

00:04:26,630 --> 00:04:30,410
whatever we're not responsible for what

00:04:28,550 --> 00:04:33,110
you see at the end of the day it's you

00:04:30,410 --> 00:04:33,980
the users for your actions I think we're

00:04:33,110 --> 00:04:36,080
reaching a point where people are

00:04:33,980 --> 00:04:38,990
unwilling to write them that blank / if

00:04:36,080 --> 00:04:40,190
MIT check so at that point we thought

00:04:38,990 --> 00:04:41,570
well let's build sentence going to

00:04:40,190 --> 00:04:43,550
reduce the control of these algorithms

00:04:41,570 --> 00:04:45,200
so we can take control of what we

00:04:43,550 --> 00:04:46,550
consume on social networks and in our

00:04:45,200 --> 00:04:49,310
view these were pretty pretty noble

00:04:46,550 --> 00:04:51,620
goals noble goals to be able to make

00:04:49,310 --> 00:04:54,620
loads of separate social networks more

00:04:51,620 --> 00:04:55,940
connected and just reduce the extent to

00:04:54,620 --> 00:04:58,130
which these algorithms control what we

00:04:55,940 --> 00:05:01,370
actually see so ultimately it was all

00:04:58,130 --> 00:05:03,560
about giving control to users so we

00:05:01,370 --> 00:05:07,010
thought vaguely about some kind of new

00:05:03,560 --> 00:05:09,770
equivalent open protocol for social

00:05:07,010 --> 00:05:12,680
networks so you might have a profile

00:05:09,770 --> 00:05:15,380
that any provider could subscribe to and

00:05:12,680 --> 00:05:17,360
any provider could publish to so a

00:05:15,380 --> 00:05:19,669
Facebook user or Twitter user could

00:05:17,360 --> 00:05:21,680
subscribe to your profile so you

00:05:19,669 --> 00:05:23,660
wouldn't have to have separate Facebook

00:05:21,680 --> 00:05:26,300
or Twitter accounts to feed into those

00:05:23,660 --> 00:05:29,090
networks and in turn you would only need

00:05:26,300 --> 00:05:32,710
to subscribe to a user's single profile

00:05:29,090 --> 00:05:34,639
which any provider could publish - but

00:05:32,710 --> 00:05:37,969
why would Facebook or

00:05:34,639 --> 00:05:41,080
integrate with that protocol and it kind

00:05:37,969 --> 00:05:45,680
of already exists if you have a blog and

00:05:41,080 --> 00:05:49,159
you published to an RSS feed but no one

00:05:45,680 --> 00:05:51,949
uses our SS feeds so you can broadcast

00:05:49,159 --> 00:05:53,719
your updates but no one's listening and

00:05:51,949 --> 00:05:58,729
no one else is broadcasting them so

00:05:53,719 --> 00:06:00,020
that's not much of a network so all of

00:05:58,729 --> 00:06:02,360
that was fun

00:06:00,020 --> 00:06:05,229
pub talk but we had to come up with

00:06:02,360 --> 00:06:08,360
something we could build in two weeks

00:06:05,229 --> 00:06:10,370
yes so in it so the classic agency way

00:06:08,360 --> 00:06:12,229
that we had all these grand ideas and

00:06:10,370 --> 00:06:14,870
then we're told you have this mad budget

00:06:12,229 --> 00:06:16,550
this matte time so we decided one social

00:06:14,870 --> 00:06:18,110
network one goal so we decided to pick

00:06:16,550 --> 00:06:20,509
Facebook and we decided to go with goal

00:06:18,110 --> 00:06:23,029
of creating a Facebook newsfeed that

00:06:20,509 --> 00:06:25,550
were completely bypassed the the curated

00:06:23,029 --> 00:06:27,590
news feed algorithm that you see so it's

00:06:25,550 --> 00:06:28,909
go to all of your friends find all of

00:06:27,590 --> 00:06:30,529
their posts none of the things they

00:06:28,909 --> 00:06:32,719
liked or any of the adverts that you'd

00:06:30,529 --> 00:06:35,090
usually say build a curated but just one

00:06:32,719 --> 00:06:36,830
sort of build a curated list of things

00:06:35,090 --> 00:06:40,819
in chronological order compare them show

00:06:36,830 --> 00:06:45,710
them to you so we actually built a few

00:06:40,819 --> 00:06:47,979
things an Express API that runs on your

00:06:45,710 --> 00:06:50,750
machine using your Facebook credentials

00:06:47,979 --> 00:06:52,310
it has a Jason endpoint that doesn't

00:06:50,750 --> 00:06:55,099
look up with your friends post since

00:06:52,310 --> 00:06:57,080
since they're given timestamp then

00:06:55,099 --> 00:06:59,000
returns them and it also has a WebSocket

00:06:57,080 --> 00:07:02,150
endpoint that does repeated lookups and

00:06:59,000 --> 00:07:06,919
sends back posts as and when it gets

00:07:02,150 --> 00:07:11,960
them we also built a react front-end to

00:07:06,919 --> 00:07:15,680
consume that WebSocket endpoint and I

00:07:11,960 --> 00:07:17,300
CLI tool to help the user get their

00:07:15,680 --> 00:07:22,310
Facebook credentials in the right place

00:07:17,300 --> 00:07:29,020
on their machine and spin up the express

00:07:22,310 --> 00:07:33,759
API and the react app and now's the

00:07:29,020 --> 00:07:33,759
magical moment of trying to demo it

00:07:38,810 --> 00:07:41,350
who

00:07:53,870 --> 00:08:01,690
so this is their little CLI tool which

00:07:56,449 --> 00:08:07,610
is starting our API and the react app

00:08:01,690 --> 00:08:12,530
let's see we you see we didn't spend

00:08:07,610 --> 00:08:15,410
much time with front-end we're back in

00:08:12,530 --> 00:08:16,639
developers that's right I should

00:08:15,410 --> 00:08:21,680
probably say we're not JavaScript

00:08:16,639 --> 00:08:25,040
developers either anyway right so this

00:08:21,680 --> 00:08:26,780
is our front-end so I have started I've

00:08:25,040 --> 00:08:30,410
already put my credentials into the

00:08:26,780 --> 00:08:35,240
relevant place on this machine so when I

00:08:30,410 --> 00:08:36,620
start I'm gonna connect to my Facebook

00:08:35,240 --> 00:08:43,190
account I set up specifically for this

00:08:36,620 --> 00:08:46,279
who has one friend so it's done first

00:08:43,190 --> 00:08:48,020
look at but the sadly that friend hasn't

00:08:46,279 --> 00:08:54,430
posted in the last two hours so nothing

00:08:48,020 --> 00:08:54,430
came up so this is the friend so

00:08:57,580 --> 00:09:00,880
something like that

00:09:06,480 --> 00:09:17,100
so in theory and in all our practice is

00:09:12,980 --> 00:09:19,770
when the API does its Nets lookup it

00:09:17,100 --> 00:09:23,910
will find that post and display it for

00:09:19,770 --> 00:09:25,380
us and in the meantime yep so ultimately

00:09:23,910 --> 00:09:27,540
in a vision that we had for this is a

00:09:25,380 --> 00:09:28,950
we're working on one one two network one

00:09:27,540 --> 00:09:30,780
goal at the moment but ultimately you'll

00:09:28,950 --> 00:09:32,550
be able to pull in pulling content from

00:09:30,780 --> 00:09:34,140
any social network so there might be

00:09:32,550 --> 00:09:35,700
certain social networks they're a bit

00:09:34,140 --> 00:09:37,530
easier to crawl might have api's they're

00:09:35,700 --> 00:09:46,590
open enough you can just grab wherever

00:09:37,530 --> 00:09:52,880
you want the underwhelming demo how did

00:09:46,590 --> 00:09:56,310
we do that we're gonna focus on the

00:09:52,880 --> 00:09:59,910
scraping and the creepy crawly part the

00:09:56,310 --> 00:10:02,880
tool but for the WebSockets we recommend

00:09:59,910 --> 00:10:06,890
the ws library for creating a WebSocket

00:10:02,880 --> 00:10:11,040
endpoint server-side and we use socket

00:10:06,890 --> 00:10:12,420
in the react client to consume the

00:10:11,040 --> 00:10:17,310
WebSocket endpoint they worked really

00:10:12,420 --> 00:10:23,850
well the CLI we used miao to create that

00:10:17,310 --> 00:10:26,190
beautiful the bridge that you saw we

00:10:23,850 --> 00:10:27,960
used inquiry for setting up the end file

00:10:26,190 --> 00:10:31,050
with command line prompts and

00:10:27,960 --> 00:10:34,920
concurrently to get to processes running

00:10:31,050 --> 00:10:36,870
in the same command line output hernia

00:10:34,920 --> 00:10:38,610
the meat of what we've created is there

00:10:36,870 --> 00:10:40,800
the crawling so for the crawling we used

00:10:38,610 --> 00:10:43,590
a tool called simple crawler I suppose a

00:10:40,800 --> 00:10:45,000
lot of you wondering why why crawl in

00:10:43,590 --> 00:10:48,420
the first place when Facebook has their

00:10:45,000 --> 00:10:49,980
own perfectly adequate API but from what

00:10:48,420 --> 00:10:51,480
we've experienced that they didn't

00:10:49,980 --> 00:10:54,690
really give you the access you need it

00:10:51,480 --> 00:10:56,430
can be a massive pain to go set up it

00:10:54,690 --> 00:10:57,630
goes against the idea of having a

00:10:56,430 --> 00:10:59,100
curated for you because you're getting

00:10:57,630 --> 00:11:00,480
directly from them and mainly just

00:10:59,100 --> 00:11:05,940
because we're developers and we thought

00:11:00,480 --> 00:11:08,700
that's the scraper so some cold

00:11:05,940 --> 00:11:11,430
how does simple call of work how did we

00:11:08,700 --> 00:11:14,460
get it working in our API so this is the

00:11:11,430 --> 00:11:15,390
full Jason endpoint that triggers a

00:11:14,460 --> 00:11:18,300
single look up if you

00:11:15,390 --> 00:11:20,370
friends posts if you have a cool helper

00:11:18,300 --> 00:11:23,160
that sets up configuration for the

00:11:20,370 --> 00:11:24,660
caller caller itself including the

00:11:23,160 --> 00:11:26,010
starting page that the call is going to

00:11:24,660 --> 00:11:27,990
visit first

00:11:26,010 --> 00:11:30,180
luckily Facebook still maintains a

00:11:27,990 --> 00:11:33,590
completely JavaScript free website which

00:11:30,180 --> 00:11:36,720
is M basic facebook.com/ so the crawler

00:11:33,590 --> 00:11:39,900
had no problem at all visiting that and

00:11:36,720 --> 00:11:42,330
it's fully functional the crawler works

00:11:39,900 --> 00:11:44,550
by loading that initial page finding

00:11:42,330 --> 00:11:47,430
links on that page visiting those links

00:11:44,550 --> 00:11:49,040
then finding links on each new page and

00:11:47,430 --> 00:11:52,350
so on recursively

00:11:49,040 --> 00:11:54,480
we only wanted to visit certain links we

00:11:52,350 --> 00:11:56,910
wanted to visit lists of friends those

00:11:54,480 --> 00:12:00,180
friends profiles which showed their

00:11:56,910 --> 00:12:02,070
recent posts and next pages of posts if

00:12:00,180 --> 00:12:05,160
the current page didn't go back far

00:12:02,070 --> 00:12:07,440
enough and it also turns out that when

00:12:05,160 --> 00:12:09,810
you visit a friend's profile you

00:12:07,440 --> 00:12:12,300
actually go to an intermediary page with

00:12:09,810 --> 00:12:14,130
a hover card which then have the link to

00:12:12,300 --> 00:12:16,500
their post so we had to include hover

00:12:14,130 --> 00:12:19,200
cards as well so the first task was to

00:12:16,500 --> 00:12:22,500
get the crawler only to visit the

00:12:19,200 --> 00:12:24,900
correct pages yes so we managed to do

00:12:22,500 --> 00:12:28,050
this through what's called in a simple

00:12:24,900 --> 00:12:30,170
crawler land a fetch condition so we use

00:12:28,050 --> 00:12:32,220
the add fetch condition function and

00:12:30,170 --> 00:12:34,110
essentially just tell the caller that

00:12:32,220 --> 00:12:36,420
only put a link in there if it's either

00:12:34,110 --> 00:12:37,860
a hover card which is when you normal

00:12:36,420 --> 00:12:39,690
Facebook when you may serve it someone's

00:12:37,860 --> 00:12:42,330
name you get the little cards that's an

00:12:39,690 --> 00:12:44,970
actual page within a basic the profile

00:12:42,330 --> 00:12:46,980
page itself whether you're on the load

00:12:44,970 --> 00:12:48,690
list of friends or ever on the list of

00:12:46,980 --> 00:12:50,960
their posts because you're going through

00:12:48,690 --> 00:12:54,450
with no ajaxy magic going on you're

00:12:50,960 --> 00:12:56,280
manually loading each separate post so

00:12:54,450 --> 00:12:58,020
what this was essentially do is taking

00:12:56,280 --> 00:12:59,520
taking the cue item which is for all

00:12:58,020 --> 00:13:01,530
intents and purposes just a link and

00:12:59,520 --> 00:13:03,180
just compare it against these to say if

00:13:01,530 --> 00:13:05,880
it matches these conditions and if it

00:13:03,180 --> 00:13:07,350
does they can go on the queue so you

00:13:05,880 --> 00:13:08,960
could probably notice that on the load

00:13:07,350 --> 00:13:11,100
more friends there's quite a bit of

00:13:08,960 --> 00:13:13,020
quite a bit more going on there than the

00:13:11,100 --> 00:13:14,670
rest of them and that was because we we

00:13:13,020 --> 00:13:17,700
initially started using this on our

00:13:14,670 --> 00:13:19,110
Facebook accounts and when you get to a

00:13:17,700 --> 00:13:20,100
certain number of friends not to say

00:13:19,110 --> 00:13:22,020
that we've got loads of friends because

00:13:20,100 --> 00:13:23,190
we we don't but when you get to a

00:13:22,020 --> 00:13:24,480
certain number of friends it has to go

00:13:23,190 --> 00:13:25,730
through all of those friends and we

00:13:24,480 --> 00:13:27,649
would set their wings like

00:13:25,730 --> 00:13:30,110
come on hurry up hurry up so we put a

00:13:27,649 --> 00:13:32,750
bit of limiting in there so what we've

00:13:30,110 --> 00:13:35,420
set up is a cruel tracker to essentially

00:13:32,750 --> 00:13:38,510
go through a list of ten friends so we

00:13:35,420 --> 00:13:41,029
go through a list of like free list so

00:13:38,510 --> 00:13:45,949
go for your furry friends and just limit

00:13:41,029 --> 00:13:47,420
it in that way so I'm going on to the

00:13:45,949 --> 00:13:49,940
event for simple court it gives you

00:13:47,420 --> 00:13:51,880
quite a lot of events at the box which

00:13:49,940 --> 00:13:53,510
gives you pretty much limitless

00:13:51,880 --> 00:13:56,089
flexibility for what you might want to

00:13:53,510 --> 00:13:57,829
do in in terms of crawling so if you

00:13:56,089 --> 00:14:00,500
wanted to track say how many friends you

00:13:57,829 --> 00:14:02,570
visited you were use the keywords event

00:14:00,500 --> 00:14:04,010
and that would just um build up on a

00:14:02,570 --> 00:14:06,170
crude queue tracker which was just an

00:14:04,010 --> 00:14:07,160
instance of a class that adds 10 to say

00:14:06,170 --> 00:14:09,320
once you've gone through your list

00:14:07,160 --> 00:14:13,490
trucktown on there whenever any time you

00:14:09,320 --> 00:14:18,110
load you run loaded more friends so that

00:14:13,490 --> 00:14:21,529
was how we got two pages the other

00:14:18,110 --> 00:14:25,370
complication is that we post we only

00:14:21,529 --> 00:14:28,190
wanted to go back enough to make sure we

00:14:25,370 --> 00:14:31,010
were getting all posts sent since a get

00:14:28,190 --> 00:14:32,690
post since timestamp and this couldn't

00:14:31,010 --> 00:14:35,510
be handled by checking the queue item

00:14:32,690 --> 00:14:37,670
because it depended not on the link of

00:14:35,510 --> 00:14:39,980
the page but on the actual content on

00:14:37,670 --> 00:14:42,290
the current page specifically the

00:14:39,980 --> 00:14:44,389
timestamp of the oldest post on that

00:14:42,290 --> 00:14:46,300
page so for that we tucked in to the

00:14:44,389 --> 00:14:49,370
crawlers discover resources function

00:14:46,300 --> 00:14:53,089
which does have access to the current

00:14:49,370 --> 00:14:55,970
page so what this is doing is ignoring

00:14:53,089 --> 00:14:58,519
links on the page if we want a page of

00:14:55,970 --> 00:15:00,709
posts and the oldest post on that page

00:14:58,519 --> 00:15:02,569
is older than the get post since

00:15:00,709 --> 00:15:04,850
timestamp so it's just another example

00:15:02,569 --> 00:15:07,459
of the flexibility that simple caller

00:15:04,850 --> 00:15:13,220
gives you through the events and

00:15:07,459 --> 00:15:14,240
functions that are accessible cool to

00:15:13,220 --> 00:15:15,680
say you've gone for all these

00:15:14,240 --> 00:15:17,360
predecessors you've come filled with fat

00:15:15,680 --> 00:15:20,930
chunks you eventually get to the fetch

00:15:17,360 --> 00:15:22,579
complete event so once we've got to this

00:15:20,930 --> 00:15:24,050
point we've got our we've got a buffer

00:15:22,579 --> 00:15:25,910
of what we've what we've put into our

00:15:24,050 --> 00:15:28,250
queue so we need to actually get the

00:15:25,910 --> 00:15:30,980
HTML content out of that so we created a

00:15:28,250 --> 00:15:33,230
basic HTML cut HTML helper object which

00:15:30,980 --> 00:15:34,880
we'd use to bring the buffer in there

00:15:33,230 --> 00:15:37,730
again the articles we need get their

00:15:34,880 --> 00:15:39,350
names get the posts and then anything we

00:15:37,730 --> 00:15:39,680
need to filter out at this to older to

00:15:39,350 --> 00:15:42,020
new

00:15:39,680 --> 00:15:47,660
last time we've crawled with an get put

00:15:42,020 --> 00:15:50,000
into control nearly dropped it all put

00:15:47,660 --> 00:15:52,190
so I'm from here you can see if we try

00:15:50,000 --> 00:15:54,890
to extract as much of the logic as

00:15:52,190 --> 00:15:58,399
possible into this HTML helper

00:15:54,890 --> 00:16:01,190
we used a an NPM use a library called

00:15:58,399 --> 00:16:03,440
cheerio which for those who still yearn

00:16:01,190 --> 00:16:07,880
for the days of jQuery it's a jQuery

00:16:03,440 --> 00:16:11,330
type access to the Dom which are nice

00:16:07,880 --> 00:16:13,610
for me my way old days of JavaScript not

00:16:11,330 --> 00:16:15,440
so much from though so you can see there

00:16:13,610 --> 00:16:17,149
are the key functions of it see how

00:16:15,440 --> 00:16:19,820
we've actually gone and parsed some of

00:16:17,149 --> 00:16:22,370
these and a few if you can see the code

00:16:19,820 --> 00:16:23,450
you can see it's a not the nicest way

00:16:22,370 --> 00:16:25,459
we've had to go and get some of these

00:16:23,450 --> 00:16:28,760
things because the actual markup you get

00:16:25,459 --> 00:16:29,300
on need and basic site is pretty poor at

00:16:28,760 --> 00:16:31,550
best

00:16:29,300 --> 00:16:35,300
so it's a bit fiddly and a bit brittle

00:16:31,550 --> 00:16:39,950
about it works for now for example is

00:16:35,300 --> 00:16:45,350
not a class name for article to get or

00:16:39,950 --> 00:16:48,170
post to get most reliable way we found

00:16:45,350 --> 00:16:50,529
was finding the like and we asked of

00:16:48,170 --> 00:16:54,580
interaction bits that are on each

00:16:50,529 --> 00:16:57,830
article or each post and traversing that

00:16:54,580 --> 00:17:01,459
the parents of that to get to the post

00:16:57,830 --> 00:17:05,179
so it's it's worked well we did this in

00:17:01,459 --> 00:17:07,220
a few months ago and when we spun it up

00:17:05,179 --> 00:17:10,220
last week it still worked

00:17:07,220 --> 00:17:13,069
so the markup hasn't changed enough to

00:17:10,220 --> 00:17:15,020
break it but it is pretty brittle

00:17:13,069 --> 00:17:19,370
yeah and basic hasn't changed in five

00:17:15,020 --> 00:17:20,750
years so I hope it doesn't change so but

00:17:19,370 --> 00:17:23,059
all of what we've talked about rested on

00:17:20,750 --> 00:17:25,010
being able to get the caller to act as

00:17:23,059 --> 00:17:26,569
it signs in Facebook user and that was

00:17:25,010 --> 00:17:31,550
the the trickiest thing that we have to

00:17:26,569 --> 00:17:34,460
crack so we used an HTTP library request

00:17:31,550 --> 00:17:38,270
from its native to load a facebook login

00:17:34,460 --> 00:17:40,250
page then we got from that page the

00:17:38,270 --> 00:17:42,260
values from any hidden fields that were

00:17:40,250 --> 00:17:45,100
on the page that Facebook populates to

00:17:42,260 --> 00:17:47,510
preventing cross-site request forgery

00:17:45,100 --> 00:17:49,880
then again using the HTTP library

00:17:47,510 --> 00:17:51,980
request library we submitted the login

00:17:49,880 --> 00:17:52,910
request using those hidden fields as

00:17:51,980 --> 00:17:56,120
well as the users

00:17:52,910 --> 00:17:58,520
credentials and that gave us the

00:17:56,120 --> 00:17:59,900
response from a logged in user including

00:17:58,520 --> 00:18:02,600
the cookies that Facebook Ads to

00:17:59,900 --> 00:18:06,350
authenticate further requests so that's

00:18:02,600 --> 00:18:08,270
just going to the login screen and then

00:18:06,350 --> 00:18:12,710
this is submitting the after login

00:18:08,270 --> 00:18:14,030
request the first difficulty we had was

00:18:12,710 --> 00:18:16,790
around here Facebook doesn't always

00:18:14,030 --> 00:18:19,190
respond when you log in with a nice 200

00:18:16,790 --> 00:18:21,080
response often actually normally

00:18:19,190 --> 00:18:23,960
redirect you somewhere with a 302

00:18:21,080 --> 00:18:26,270
response and our live view was treating

00:18:23,960 --> 00:18:32,570
that as an error so we had to just

00:18:26,270 --> 00:18:35,720
swallow that error here and then the

00:18:32,570 --> 00:18:37,250
next challenge was getting the session

00:18:35,720 --> 00:18:41,480
cookie from the Facebook response into

00:18:37,250 --> 00:18:47,030
the caller the simple caller actually

00:18:41,480 --> 00:18:48,650
has a its own cookie jar and an API for

00:18:47,030 --> 00:18:52,250
getting cookies into that cookie jar

00:18:48,650 --> 00:18:54,470
from from headers but unfortunately

00:18:52,250 --> 00:18:56,510
simple cool it was then ignoring those

00:18:54,470 --> 00:18:58,370
cookies when making requests to Facebook

00:18:56,510 --> 00:19:01,880
ignoring the cookies that it had in its

00:18:58,370 --> 00:19:04,850
cookie jar took a while to debug this

00:19:01,880 --> 00:19:06,710
but simple caller ignores cookies if a

00:19:04,850 --> 00:19:09,350
domain being crawled so in this case M

00:19:06,710 --> 00:19:11,840
basic top facebook.com/ is not contained

00:19:09,350 --> 00:19:17,180
in the domain on the cookies in question

00:19:11,840 --> 00:19:21,680
in this case facebook.com so we try to

00:19:17,180 --> 00:19:25,670
get simple caller to fix that but our

00:19:21,680 --> 00:19:28,210
the issue we logged on deaf ears and so

00:19:25,670 --> 00:19:31,460
we just fix it ourselves with a little

00:19:28,210 --> 00:19:33,110
thing here which just replaces the

00:19:31,460 --> 00:19:36,200
domain on the cookies that we get back

00:19:33,110 --> 00:19:37,900
from Facebook so there the so they have

00:19:36,200 --> 00:19:40,280
a domain that simple caller needs and

00:19:37,900 --> 00:19:43,220
array once we did that we were able to

00:19:40,280 --> 00:19:45,290
act as a Facebook logged in Facebook

00:19:43,220 --> 00:19:48,770
user with any requests that the corner

00:19:45,290 --> 00:19:53,060
was making so just once again this is

00:19:48,770 --> 00:19:55,030
the full Jason endpoint which maybe

00:19:53,060 --> 00:20:00,260
makes a little bit more sense now

00:19:55,030 --> 00:20:03,440
setting off the caller login ask the

00:20:00,260 --> 00:20:06,770
Facebook user start the quarter hour

00:20:03,440 --> 00:20:10,010
and then when it finishes doing its full

00:20:06,770 --> 00:20:15,440
crawl we return the post that it was

00:20:10,010 --> 00:20:17,210
found in the process cool so from what

00:20:15,440 --> 00:20:18,350
we've shown you I think clearly this

00:20:17,210 --> 00:20:19,160
isn't going to change the world we're

00:20:18,350 --> 00:20:21,380
not going to have Mark Zuckerberg

00:20:19,160 --> 00:20:24,980
knocking at our doors with a lawsuit in

00:20:21,380 --> 00:20:26,090
his hands but in a like one of the major

00:20:24,980 --> 00:20:28,040
problems we found with this was

00:20:26,090 --> 00:20:29,990
naturally actually crawling the data

00:20:28,040 --> 00:20:32,570
just trying to get through to mark up

00:20:29,990 --> 00:20:34,070
what was there and trying to get the

00:20:32,570 --> 00:20:37,460
stuff that we we actually want to have

00:20:34,070 --> 00:20:39,410
it but we managed to rinse the limit of

00:20:37,460 --> 00:20:40,430
our 10 days quite nicely we've we

00:20:39,410 --> 00:20:41,900
weren't really sure we were going to

00:20:40,430 --> 00:20:45,410
actually be able to succeed with this

00:20:41,900 --> 00:20:47,060
but in 10 days we persevered and we

00:20:45,410 --> 00:20:48,890
managed to get working working demo of

00:20:47,060 --> 00:20:53,770
it and working working tool you can tame

00:20:48,890 --> 00:20:53,770
it so the code is here it's open source

00:20:53,800 --> 00:20:56,780
and with full instructions on how to use

00:20:56,420 --> 00:20:59,330
it

00:20:56,780 --> 00:21:01,730
and you're very welcome to go and have a

00:20:59,330 --> 00:21:04,460
poke around and let us know what you

00:21:01,730 --> 00:21:08,750
think and by all means submit to the

00:21:04,460 --> 00:21:10,680
pool requests and issues thank you very

00:21:08,750 --> 00:21:15,729
much

00:21:10,680 --> 00:21:15,729

YouTube URL: https://www.youtube.com/watch?v=Jm535eLUKb0


