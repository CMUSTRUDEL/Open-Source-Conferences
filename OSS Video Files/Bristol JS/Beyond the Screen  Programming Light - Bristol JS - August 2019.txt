Title: Beyond the Screen  Programming Light - Bristol JS - August 2019
Publication date: 2019-09-17
Playlist: Bristol JS
Description: 
	Presented by Ben Everard.

A look at how to control lights with code and how to use this to build aesthetically pleasing displays, such as a word clock.


_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:05,819
so I made this clock hats case hacks

00:00:03,570 --> 00:00:07,830
face magazine a couple of months ago and

00:00:05,819 --> 00:00:08,340
Adam got in touch and asked me to talk

00:00:07,830 --> 00:00:10,500
about it

00:00:08,340 --> 00:00:12,450
today and I thought a bit about the

00:00:10,500 --> 00:00:13,320
clock and it's there's like a few parts

00:00:12,450 --> 00:00:15,809
to it

00:00:13,320 --> 00:00:17,490
yeah there's the wooden frame but to be

00:00:15,809 --> 00:00:19,410
honest if you've got access to a saw and

00:00:17,490 --> 00:00:20,789
a screwdriver you don't need me to tell

00:00:19,410 --> 00:00:23,460
you how to do it you cut it open you

00:00:20,789 --> 00:00:26,070
screw it together there's the clock face

00:00:23,460 --> 00:00:28,439
which if you access to a laser cutter

00:00:26,070 --> 00:00:29,519
it's really easy to do if you don't

00:00:28,439 --> 00:00:31,470
there's actually one at Bristol hack

00:00:29,519 --> 00:00:33,630
spacer you can join the news and that's

00:00:31,470 --> 00:00:35,670
it's just like printing a document but

00:00:33,630 --> 00:00:38,700
it cuts out of plywood again it's not

00:00:35,670 --> 00:00:41,090
really worth a talk on it's all

00:00:38,700 --> 00:00:44,000
controlled by an Arduino microcontroller

00:00:41,090 --> 00:00:46,680
basically it's a really simple embedded

00:00:44,000 --> 00:00:48,780
computer that can talk to Wi-Fi once

00:00:46,680 --> 00:00:50,370
every minute or so grabs the latest time

00:00:48,780 --> 00:00:53,850
from the internet converts it into array

00:00:50,370 --> 00:00:55,320
of colors and spits it out again your

00:00:53,850 --> 00:00:57,239
programmers here you don't need me to

00:00:55,320 --> 00:01:00,149
tell you how to do a little bit of

00:00:57,239 --> 00:01:01,680
jiggery-pokery on that the interesting

00:01:00,149 --> 00:01:04,949
part of the technology for me at least

00:01:01,680 --> 00:01:07,110
is the way it lights up the letters so

00:01:04,949 --> 00:01:09,380
there's 104 letters behind each one of

00:01:07,110 --> 00:01:11,970
them is three LEDs a red green and blue

00:01:09,380 --> 00:01:15,210
and those can be combined to create any

00:01:11,970 --> 00:01:16,650
colors at the moment they're just fairly

00:01:15,210 --> 00:01:18,509
boring colors to be honest cuz I quite

00:01:16,650 --> 00:01:20,250
like boring colors that could be it

00:01:18,509 --> 00:01:24,689
could be pulsing rainbow if you wanted

00:01:20,250 --> 00:01:26,460
it to and so there's 312 LEDs back there

00:01:24,689 --> 00:01:29,130
that alone would be quite a lot of

00:01:26,460 --> 00:01:30,540
soldering together and LEDs they'll

00:01:29,130 --> 00:01:32,310
either on or off if you want to combine

00:01:30,540 --> 00:01:34,259
colors in different ways you have to

00:01:32,310 --> 00:01:35,909
flick them on and off really quickly a

00:01:34,259 --> 00:01:38,939
few hundred times a second the same way

00:01:35,909 --> 00:01:40,560
screen works really so you've got 312

00:01:38,939 --> 00:01:43,619
LEDs that need to be flicked on and off

00:01:40,560 --> 00:01:45,030
a few hundred times a second which it's

00:01:43,619 --> 00:01:46,680
kind of possible to manage on a

00:01:45,030 --> 00:01:48,149
microcontroller but it's difficult

00:01:46,680 --> 00:01:51,360
especially when you've got to manage the

00:01:48,149 --> 00:01:53,939
timings Wi-Fi and everything else but

00:01:51,360 --> 00:01:55,259
fortunately there's much much easier way

00:01:53,939 --> 00:01:55,640
you don't need to worry about any of

00:01:55,259 --> 00:02:00,020
that

00:01:55,640 --> 00:02:03,270
and it's these things they're called

00:02:00,020 --> 00:02:04,740
ws2812 B's is their technical name but

00:02:03,270 --> 00:02:07,049
they're commonly known as neopixels

00:02:04,740 --> 00:02:09,450
which is really kind of a trade name but

00:02:07,049 --> 00:02:12,840
we've gotten to that in a bit and these

00:02:09,450 --> 00:02:13,890
are really simple so each each dot is an

00:02:12,840 --> 00:02:15,900
individual device and this

00:02:13,890 --> 00:02:19,950
just on a sort of flexible PCB that they

00:02:15,900 --> 00:02:21,690
come in on each dot each new pixel has

00:02:19,950 --> 00:02:24,060
got four connections it's got voltage in

00:02:21,690 --> 00:02:25,860
ground it's got data in and data out and

00:02:24,060 --> 00:02:27,660
all you have to do is connect the data

00:02:25,860 --> 00:02:29,850
out of one to the data in of the next

00:02:27,660 --> 00:02:31,770
and you can make arbitrarily long chains

00:02:29,850 --> 00:02:33,840
of them really easily and you can

00:02:31,770 --> 00:02:37,170
combine different types and all sorts of

00:02:33,840 --> 00:02:38,970
ways they're kind of like our limits to

00:02:37,170 --> 00:02:40,410
how long you can get but it's mostly to

00:02:38,970 --> 00:02:41,850
do with how much memory you've gotten

00:02:40,410 --> 00:02:43,380
your device how much speed how much

00:02:41,850 --> 00:02:43,800
power you can supply and all that sort

00:02:43,380 --> 00:02:45,569
of thing

00:02:43,800 --> 00:02:48,570
but you can certainly create change of

00:02:45,569 --> 00:02:52,980
these hundreds long maybe if you really

00:02:48,570 --> 00:02:54,420
want to push it thousands and all they

00:02:52,980 --> 00:02:56,730
do is they connect to a single pin on

00:02:54,420 --> 00:02:58,800
your microcontroller and that can spit

00:02:56,730 --> 00:03:03,930
out the coms protocol to change them

00:02:58,800 --> 00:03:05,370
into any color now this particular this

00:03:03,930 --> 00:03:09,019
particular image comes from Adafruit

00:03:05,370 --> 00:03:10,890
which is it's kind of like a hobbyist

00:03:09,019 --> 00:03:13,650
electronics company they do really great

00:03:10,890 --> 00:03:15,660
stuff and they provide support and all

00:03:13,650 --> 00:03:16,820
that sort of stuff you can also get them

00:03:15,660 --> 00:03:19,470
from direct from China

00:03:16,820 --> 00:03:22,019
now these wanted to see a one pound 40

00:03:19,470 --> 00:03:26,130
for a string of 30 of them so they're

00:03:22,019 --> 00:03:28,980
incredibly cheap even if you wanna do

00:03:26,130 --> 00:03:30,510
fairly big installations this is a

00:03:28,980 --> 00:03:31,680
cheesy marketing video but it there's

00:03:30,510 --> 00:03:33,209
quite a good job of showing off the

00:03:31,680 --> 00:03:35,070
different forms that they come in so I'm

00:03:33,209 --> 00:03:37,380
just going to start it and see if it

00:03:35,070 --> 00:03:43,860
breaks anything

00:03:37,380 --> 00:03:43,860
[Music]

00:04:10,340 --> 00:04:44,400
we also have these neopixel earrings

00:04:40,380 --> 00:04:46,050
made with the 16 led rings the best

00:04:44,400 --> 00:04:50,760
thing about the open-source how easy to

00:04:46,050 --> 00:04:52,950
use I'll stop it there cuz it just sort

00:04:50,760 --> 00:04:54,960
of goes on to marketing stuff but all

00:04:52,950 --> 00:04:56,430
that stuff is available from they've

00:04:54,960 --> 00:04:58,169
made a for from loads of other

00:04:56,430 --> 00:04:59,729
manufacturers and as you can see it

00:04:58,169 --> 00:05:03,020
comes in loads different forms more than

00:04:59,729 --> 00:05:06,300
show now but I can go through everything

00:05:03,020 --> 00:05:08,880
so I'm just show you now is a little bit

00:05:06,300 --> 00:05:10,560
about how easy it is to get started with

00:05:08,880 --> 00:05:12,330
these because if you're a software

00:05:10,560 --> 00:05:14,099
person I'm imagining most people here of

00:05:12,330 --> 00:05:17,160
software guys rather than hardware guys

00:05:14,099 --> 00:05:19,590
and girls so I just want to show you

00:05:17,160 --> 00:05:21,419
that it you really don't need to worry

00:05:19,590 --> 00:05:23,070
about the hardware you can just access

00:05:21,419 --> 00:05:27,900
these from software so can I grab a

00:05:23,070 --> 00:05:29,940
couple of people to hold up so these are

00:05:27,900 --> 00:05:32,130
literally the spare ones left over from

00:05:29,940 --> 00:05:35,400
the clock they come in strings of 50 and

00:05:32,130 --> 00:05:40,560
I needed a hundred and four so I've got

00:05:35,400 --> 00:05:43,080
46 spare pixels and I'm here so and this

00:05:40,560 --> 00:05:44,419
is always asking for trouble to try and

00:05:43,080 --> 00:05:47,610
actually do something

00:05:44,419 --> 00:05:50,940
live but so just going to the top of the

00:05:47,610 --> 00:05:53,370
code now this is Python you can program

00:05:50,940 --> 00:05:54,690
these in just hundreds of lap I don't

00:05:53,370 --> 00:05:56,760
know so you can definitely program these

00:05:54,690 --> 00:05:57,210
in every language but I've never come

00:05:56,760 --> 00:05:59,030
across

00:05:57,210 --> 00:06:02,490
language that doesn't have some hardware

00:05:59,030 --> 00:06:03,990
interface that can control neopixels and

00:06:02,490 --> 00:06:05,789
I'm mostly built in a very similar way

00:06:03,990 --> 00:06:08,009
so in this case just import the near

00:06:05,789 --> 00:06:10,830
pixel library and you create and create

00:06:08,009 --> 00:06:15,240
an object which just references the pin

00:06:10,830 --> 00:06:17,970
that they're wired into that's fine a

00:06:15,240 --> 00:06:19,380
number of pixels yeah and a couple of

00:06:17,970 --> 00:06:23,310
other bits and we defined some colors

00:06:19,380 --> 00:06:28,259
here so just going to uncomment the bit

00:06:23,310 --> 00:06:30,539
that blanks it out and so comment in the

00:06:28,259 --> 00:06:34,919
bit that blanks it out and uncomment the

00:06:30,539 --> 00:06:36,389
bit that turns it on now this is circuit

00:06:34,919 --> 00:06:39,180
Python specifically and whenever you hit

00:06:36,389 --> 00:06:42,060
save that sends it out to the code and

00:06:39,180 --> 00:06:45,650
write code to the device and runs it so

00:06:42,060 --> 00:06:47,610
you can turn you to pixels red which is

00:06:45,650 --> 00:06:51,240
kind of useful but you could have just

00:06:47,610 --> 00:06:53,729
bought a string of red fairy lights so

00:06:51,240 --> 00:06:56,550
the hello world of hardware is always

00:06:53,729 --> 00:06:59,310
turning an LED on and off we're going to

00:06:56,550 --> 00:07:02,099
go slightly better and hopefully flick

00:06:59,310 --> 00:07:03,930
it between red and green so you can see

00:07:02,099 --> 00:07:06,120
all this is this is inside a big while

00:07:03,930 --> 00:07:08,330
loop that just keeps on running fills it

00:07:06,120 --> 00:07:11,970
with red shows it sleeps

00:07:08,330 --> 00:07:15,479
yeah it's a simpler code as you're ever

00:07:11,970 --> 00:07:17,669
going to get but all we've done in in

00:07:15,479 --> 00:07:18,870
the previous examples these two we've

00:07:17,669 --> 00:07:20,370
done it we've just treated them as a

00:07:18,870 --> 00:07:23,370
whole objects we're treating clearing

00:07:20,370 --> 00:07:24,960
them all red or all green which it has

00:07:23,370 --> 00:07:28,199
some uses but it's much more interesting

00:07:24,960 --> 00:07:33,330
if you can control individual pixels so

00:07:28,199 --> 00:07:40,590
we'll do that next so this time the code

00:07:33,330 --> 00:07:41,820
is a little bit clunky err yeah so you

00:07:40,590 --> 00:07:43,919
can see all it's doing is looping

00:07:41,820 --> 00:07:45,659
through this and pikemen doesn't have a

00:07:43,919 --> 00:07:48,289
switch statement of no idea why so you

00:07:45,659 --> 00:07:51,300
have to have a string of if-then elif's

00:07:48,289 --> 00:07:52,770
and it just yeah there's a modulo

00:07:51,300 --> 00:07:54,449
arithmetic and disart and loops

00:07:52,770 --> 00:07:55,889
it doesn't actually come out very well

00:07:54,449 --> 00:07:57,120
on this strip because the pixels are a

00:07:55,889 --> 00:07:59,699
bit further apart but it's a rainbow

00:07:57,120 --> 00:08:03,509
moving along if you look carefully

00:07:59,699 --> 00:08:05,460
anyway and so that's that's how you

00:08:03,509 --> 00:08:07,469
access them but at the moment all we've

00:08:05,460 --> 00:08:08,310
really done is recreate some Christmas

00:08:07,469 --> 00:08:10,000
lights you could have bought from

00:08:08,310 --> 00:08:11,800
Poundland

00:08:10,000 --> 00:08:14,220
the really interesting bit for me is

00:08:11,800 --> 00:08:16,510
that you can you can control them with

00:08:14,220 --> 00:08:17,860
sensors with you know data from the

00:08:16,510 --> 00:08:20,170
internet like I did with the clock we

00:08:17,860 --> 00:08:21,490
can can do something a bit more with

00:08:20,170 --> 00:08:26,110
them than you can with just passive

00:08:21,490 --> 00:08:29,200
lights that just they just yeah run a

00:08:26,110 --> 00:08:31,390
pre created sequence so that's all do in

00:08:29,200 --> 00:08:33,669
the next example which is a little bit

00:08:31,390 --> 00:08:36,700
more complex but hopefully we'll start

00:08:33,669 --> 00:08:38,400
working now yeah so you might not be

00:08:36,700 --> 00:08:41,590
able to tell us very well but actually

00:08:38,400 --> 00:08:45,570
it's a sound level meter so if we just

00:08:41,590 --> 00:08:45,570
can everyone just applaud for a minute

00:08:47,700 --> 00:08:52,050
and can we just cut that in at the end

00:08:53,190 --> 00:08:59,470
so ya can just have a look at the code

00:08:56,380 --> 00:09:01,540
really simply it's a grab state from the

00:08:59,470 --> 00:09:04,840
microphone that's on the board there it

00:09:01,540 --> 00:09:06,250
does some logging and calculates the

00:09:04,840 --> 00:09:08,290
yeah I'm not gonna go through the code

00:09:06,250 --> 00:09:10,330
in detail now but yeah it calculates the

00:09:08,290 --> 00:09:14,100
rms volume and then just converts that

00:09:10,330 --> 00:09:17,140
into how many LEDs you want to turn on

00:09:14,100 --> 00:09:18,610
and that's all there is to that Kodak's

00:09:17,140 --> 00:09:20,860
do you is completely ripped off the

00:09:18,610 --> 00:09:22,090
examples on the Adafruit website so you

00:09:20,860 --> 00:09:23,110
can go and have a look for yourself if

00:09:22,090 --> 00:09:26,050
you want to know how it works

00:09:23,110 --> 00:09:29,380
but I just wanted to show you those

00:09:26,050 --> 00:09:30,790
examples to see how easy these devices

00:09:29,380 --> 00:09:32,470
are to work with even if you're a

00:09:30,790 --> 00:09:36,670
software person you can at least plug

00:09:32,470 --> 00:09:38,410
straight into the device there's no plug

00:09:36,670 --> 00:09:41,440
it now I knew I was finished

00:09:38,410 --> 00:09:43,780
there's no components of soldiering or

00:09:41,440 --> 00:09:46,390
stuff just screw connectors it all goes

00:09:43,780 --> 00:09:49,780
together and you can program your lights

00:09:46,390 --> 00:09:51,400
thanks with just a few lines of in this

00:09:49,780 --> 00:09:53,320
case Python but you can do it from

00:09:51,400 --> 00:09:56,980
JavaScript you can do it from C you can

00:09:53,320 --> 00:10:00,490
do it from ya name a language you can

00:09:56,980 --> 00:10:02,290
probably do it from that so there are a

00:10:00,490 --> 00:10:04,810
couple of things you need to be careful

00:10:02,290 --> 00:10:06,010
of and pretty much with all hardware

00:10:04,810 --> 00:10:07,650
it's the same two things you need to be

00:10:06,010 --> 00:10:10,810
careful of the voltage and the current

00:10:07,650 --> 00:10:13,990
there's the one annoying thing about

00:10:10,810 --> 00:10:16,030
neopixels is that they really originated

00:10:13,990 --> 00:10:19,870
in time where most microcontrollers ran

00:10:16,030 --> 00:10:22,270
at 5 volts so they need a signal data

00:10:19,870 --> 00:10:24,880
between 3.5 and 5 volts

00:10:22,270 --> 00:10:29,080
these days most microcontrollers run at

00:10:24,880 --> 00:10:31,120
3.3 volts and it's like so close and

00:10:29,080 --> 00:10:33,730
it's so plated that kind of most of the

00:10:31,120 --> 00:10:36,190
time works and you can just ignore it

00:10:33,730 --> 00:10:37,600
and a lot of people if you look at

00:10:36,190 --> 00:10:39,279
instructions on the internet people say

00:10:37,600 --> 00:10:41,020
yeah just connected to a 3.3

00:10:39,279 --> 00:10:44,050
microcontroller and it will be fine and

00:10:41,020 --> 00:10:45,730
it about 90% the time it will be and

00:10:44,050 --> 00:10:49,180
about 10% of time you'll just get weird

00:10:45,730 --> 00:10:50,800
flashing lights so don't believe people

00:10:49,180 --> 00:10:52,390
on the internet they're lying to you or

00:10:50,800 --> 00:10:54,580
how to make sure you're using a five

00:10:52,390 --> 00:10:57,220
volt or above three point 5 volt output

00:10:54,580 --> 00:10:58,480
if you use them and the best way of

00:10:57,220 --> 00:11:00,010
doing that if you're sort of not that

00:10:58,480 --> 00:11:01,740
confident with hardware is just get some

00:11:00,010 --> 00:11:03,820
of this design to connect to near pixels

00:11:01,740 --> 00:11:07,110
there's loads of it out there and we'll

00:11:03,820 --> 00:11:09,190
go onto that and in a few slides time

00:11:07,110 --> 00:11:11,500
the second thing you need to be aware of

00:11:09,190 --> 00:11:13,300
is the current and I don't know if you

00:11:11,500 --> 00:11:15,220
know really what cone is it's measuring

00:11:13,300 --> 00:11:16,839
amps and it's it's essentially the

00:11:15,220 --> 00:11:20,740
amount of electrons flowing through a

00:11:16,839 --> 00:11:22,390
wire and the real problem is when you

00:11:20,740 --> 00:11:24,490
get too many going through a while it

00:11:22,390 --> 00:11:28,870
gets hot and in really extreme cases

00:11:24,490 --> 00:11:32,170
you're going to get a fire but yeah see

00:11:28,870 --> 00:11:34,089
with with no pixels each LED consumes

00:11:32,170 --> 00:11:37,390
about 20 milliamps and 20 milliamps is

00:11:34,089 --> 00:11:39,070
very little the trouble is the amount of

00:11:37,390 --> 00:11:41,770
them you can get your three LEDs in each

00:11:39,070 --> 00:11:44,140
new pic so if everything's on full

00:11:41,770 --> 00:11:46,060
brightness by the time you hit 10 near

00:11:44,140 --> 00:11:49,089
pixels you've gone above the threshold

00:11:46,060 --> 00:11:52,990
for USB at least for regular USB which

00:11:49,089 --> 00:11:54,880
is half an amp as you get bigger you can

00:11:52,990 --> 00:11:56,680
get into it's very easy to get into tens

00:11:54,880 --> 00:11:58,570
of amps which is around the point where

00:11:56,680 --> 00:12:01,180
you're starting to worry about setting

00:11:58,570 --> 00:12:03,130
fire to stuff the solution to this is

00:12:01,180 --> 00:12:07,899
just to turn the brightness down so if

00:12:03,130 --> 00:12:09,520
you look in yeah in this we just set the

00:12:07,899 --> 00:12:10,959
brightness there and that just limits

00:12:09,520 --> 00:12:13,000
the maximum brightness it can go with

00:12:10,959 --> 00:12:14,260
this between zero and one so in this

00:12:13,000 --> 00:12:16,149
case they turn them quite bright so I've

00:12:14,260 --> 00:12:17,529
got a beefy power supply you can turn

00:12:16,149 --> 00:12:20,200
that down to about point one and then

00:12:17,529 --> 00:12:24,100
you can run 100 neopixels without any

00:12:20,200 --> 00:12:27,040
issues really if you want a great really

00:12:24,100 --> 00:12:29,950
big really bright displays then you need

00:12:27,040 --> 00:12:32,290
to understand power distribution but

00:12:29,950 --> 00:12:34,120
there's no real reason to get upset

00:12:32,290 --> 00:12:35,260
about worried about that if you just

00:12:34,120 --> 00:12:38,020
want to do little ones

00:12:35,260 --> 00:12:42,280
for working inside just be aware that

00:12:38,020 --> 00:12:43,930
it's potentially a problem say I've done

00:12:42,280 --> 00:12:45,550
this on a circuit playground Express

00:12:43,930 --> 00:12:47,530
it's a board I really like it's got a

00:12:45,550 --> 00:12:49,180
load of sensors on there it's connected

00:12:47,530 --> 00:12:52,390
to a cricket it's a bit overkill for

00:12:49,180 --> 00:12:53,950
this thing so these are the three things

00:12:52,390 --> 00:12:57,190
I'd really recommend for getting started

00:12:53,950 --> 00:12:59,320
with neopixels but there are literally

00:12:57,190 --> 00:13:02,380
hundreds of controllers you could use

00:12:59,320 --> 00:13:03,910
and these are just my favourite a pixel

00:13:02,380 --> 00:13:06,010
blaze I've put this at the top because

00:13:03,910 --> 00:13:08,410
it's programmed in JavaScript which I

00:13:06,010 --> 00:13:09,940
thought you guys might appreciate it's

00:13:08,410 --> 00:13:12,280
Wi-Fi controlled so you just plug it

00:13:09,940 --> 00:13:14,260
into a power source and it will create a

00:13:12,280 --> 00:13:16,750
Wi-Fi network he can connect to that and

00:13:14,260 --> 00:13:19,780
it will create its own IDE that you can

00:13:16,750 --> 00:13:23,950
sort of do a Java scripting in and it

00:13:19,780 --> 00:13:26,170
will run your strip fade candy is

00:13:23,950 --> 00:13:28,030
slightly different from most near pixel

00:13:26,170 --> 00:13:29,740
controllers in that it's basically a USB

00:13:28,030 --> 00:13:32,350
device that needs a host computer to

00:13:29,740 --> 00:13:34,330
work you plug it in and the program

00:13:32,350 --> 00:13:36,040
actually runs on your laptop in the

00:13:34,330 --> 00:13:38,080
examples I showed you that program was

00:13:36,040 --> 00:13:40,350
running on microcontroller and it was

00:13:38,080 --> 00:13:42,850
just using the laptop to program it

00:13:40,350 --> 00:13:45,730
because it's done by computer you've got

00:13:42,850 --> 00:13:47,560
like a lot more computing power to play

00:13:45,730 --> 00:13:50,320
with you've got more familiar

00:13:47,560 --> 00:13:52,330
programming environments the chances are

00:13:50,320 --> 00:13:56,110
your regular ID can just link straight

00:13:52,330 --> 00:13:58,420
into it just by including a library and

00:13:56,110 --> 00:13:59,500
it's great as long as you only want to

00:13:58,420 --> 00:14:01,480
run it when you can plug it into a

00:13:59,500 --> 00:14:03,130
laptop if you want to embed it you can

00:14:01,480 --> 00:14:06,790
stick around for pi with it as well but

00:14:03,130 --> 00:14:09,610
it gets a bit more complex and the

00:14:06,790 --> 00:14:11,800
itsy-bitsy m4 is a microcontroller

00:14:09,610 --> 00:14:14,350
it's a 3.3 volt microcontroller but it

00:14:11,800 --> 00:14:16,840
has one pin that runs at five volts so

00:14:14,350 --> 00:14:18,190
it kind of solves that whole problem and

00:14:16,840 --> 00:14:20,830
you can do it with circuit Python which

00:14:18,190 --> 00:14:23,050
is what we've just shown or Arduino

00:14:20,830 --> 00:14:26,770
which is kind of a dialect of C++ which

00:14:23,050 --> 00:14:29,220
is really common in the hobbyist

00:14:26,770 --> 00:14:33,520
embedded world

00:14:29,220 --> 00:14:36,160
okay so talked a little bit about how to

00:14:33,520 --> 00:14:37,420
control LEDs and what's used but we

00:14:36,160 --> 00:14:39,670
haven't really talked that much about

00:14:37,420 --> 00:14:42,760
why I've just showed you my clock at the

00:14:39,670 --> 00:14:44,500
star and said there's a clock but I

00:14:42,760 --> 00:14:47,050
think it's actually a really important

00:14:44,500 --> 00:14:49,260
thing for software people to understand

00:14:47,050 --> 00:14:51,690
is that we've got so many more options

00:14:49,260 --> 00:14:53,250
and just sending stuff to a screen now

00:14:51,690 --> 00:14:55,770
you we're so used having little

00:14:53,250 --> 00:14:57,960
notifications pop-up or a webpage that

00:14:55,770 --> 00:14:59,940
does this but we really don't need to

00:14:57,960 --> 00:15:02,280
sort of constrict ourselves to this

00:14:59,940 --> 00:15:04,560
little LCD about soar between that and

00:15:02,280 --> 00:15:08,160
about that we can program anything

00:15:04,560 --> 00:15:09,690
really and they've got and the ability

00:15:08,160 --> 00:15:11,460
to use different materials I think is

00:15:09,690 --> 00:15:13,440
really important we're so used to just a

00:15:11,460 --> 00:15:15,360
screen and the clock I showed at the

00:15:13,440 --> 00:15:16,650
start I could have done that with the

00:15:15,360 --> 00:15:18,030
screen I could have gotten money to put

00:15:16,650 --> 00:15:20,580
a strip of wood around it and just

00:15:18,030 --> 00:15:22,980
program the words to appear when I

00:15:20,580 --> 00:15:24,450
wanted them to but that's not an object

00:15:22,980 --> 00:15:26,760
I want in my kitchen for me it just

00:15:24,450 --> 00:15:30,000
doesn't look nice it's not calming it's

00:15:26,760 --> 00:15:32,400
not natural it's not evocative whereas

00:15:30,000 --> 00:15:35,430
by using things like this so we can just

00:15:32,400 --> 00:15:37,320
embed into everyday devices or you know

00:15:35,430 --> 00:15:39,300
different materials we can create things

00:15:37,320 --> 00:15:41,250
that you know wood is calming and

00:15:39,300 --> 00:15:43,230
natural with metal you get this really

00:15:41,250 --> 00:15:45,990
cool too reflective sort of cyberpunk

00:15:43,230 --> 00:15:48,480
effect that can be really striking when

00:15:45,990 --> 00:15:50,130
used well with translucent plastic you

00:15:48,480 --> 00:15:52,200
get these sort of clouds of color moving

00:15:50,130 --> 00:15:54,030
around which again creates a very

00:15:52,200 --> 00:15:57,060
different effect and it's about picking

00:15:54,030 --> 00:15:58,680
what you want and picking the materials

00:15:57,060 --> 00:16:01,020
you want to create that rather than just

00:15:58,680 --> 00:16:03,960
using a screen because you always use a

00:16:01,020 --> 00:16:05,460
screen you can play with scale I mean

00:16:03,960 --> 00:16:07,080
you can use a single near pixel to

00:16:05,460 --> 00:16:08,910
display something you know I mean that

00:16:07,080 --> 00:16:11,160
the smallest ones are a millimeter or

00:16:08,910 --> 00:16:12,600
two millimeters across and you can just

00:16:11,160 --> 00:16:14,400
have that flashing different colors if

00:16:12,600 --> 00:16:15,780
you want you can light up a building

00:16:14,400 --> 00:16:17,670
with these and that certainly happens

00:16:15,780 --> 00:16:20,610
you know you can tens of meters high and

00:16:17,670 --> 00:16:22,830
whole cityscapes can flash on and off in

00:16:20,610 --> 00:16:25,740
really interesting ways you can think

00:16:22,830 --> 00:16:27,840
much bigger than you can with an LCD

00:16:25,740 --> 00:16:29,700
that big and fundamentally as

00:16:27,840 --> 00:16:31,650
technologists it allows us to create

00:16:29,700 --> 00:16:34,230
more imaginative and original computer

00:16:31,650 --> 00:16:35,310
interfaces and that's yeah that's

00:16:34,230 --> 00:16:36,780
something we should be trying to do it

00:16:35,310 --> 00:16:38,190
should be pushing the boundaries and we

00:16:36,780 --> 00:16:43,080
should be engaging people in more

00:16:38,190 --> 00:16:46,740
interesting ways and that's really why I

00:16:43,080 --> 00:16:49,760
came here to tell you guys where to go

00:16:46,740 --> 00:16:51,780
next if you are interested in doing this

00:16:49,760 --> 00:16:54,090
even if you're not using Adafruit

00:16:51,780 --> 00:16:56,010
neopixels they have a fantastic they

00:16:54,090 --> 00:16:57,540
call it the uber guide if you just

00:16:56,010 --> 00:16:59,460
search the neopixel uber guide it will

00:16:57,540 --> 00:17:01,410
come up and that tells you everything

00:16:59,460 --> 00:17:02,470
you need to know to get started but

00:17:01,410 --> 00:17:04,810
really it is

00:17:02,470 --> 00:17:06,520
let's just plug this three wires you

00:17:04,810 --> 00:17:08,620
plug one into five volt 1 into ground

00:17:06,520 --> 00:17:10,420
and one into signal and then you can

00:17:08,620 --> 00:17:13,140
start playing with the software that's

00:17:10,420 --> 00:17:13,140
near pixels

00:17:13,400 --> 00:17:19,499

YouTube URL: https://www.youtube.com/watch?v=z275vZUIWLk


