Title: Firebase - All you Need for Serverless Web Apps - Bristol JS - September 2018
Publication date: 2018-10-09
Playlist: Bristol JS
Description: 
	Presented by Gareth Brown.

Firebase started as a real-time backend for mobile application developers and has evolved to offer a suite of powerful tooling for mobile and web applications. It allows web devs the ability to access various services including a real-time database, storage and authentication without writing any backend code. The React JS and Firebase stack is a good way to develop serverless web apps.

Gareth's presentation will give an overview of what Firebase offers, how it's implemented using some code examples, and how he's found integrating Firebase with React JS.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:05,100
I'll introduce myself quickly first I'm

00:00:02,340 --> 00:00:09,870
relatively new to software development I

00:00:05,100 --> 00:00:12,960
probably started learning html5 CSS and

00:00:09,870 --> 00:00:14,219
JavaScript about five years ago when I

00:00:12,960 --> 00:00:16,859
was a primary school teacher actually

00:00:14,219 --> 00:00:18,960
and then over the neck last five years

00:00:16,859 --> 00:00:22,380
I've kind of slowly progressed did a bit

00:00:18,960 --> 00:00:25,320
of data analysis built some websites of

00:00:22,380 --> 00:00:30,779
the word WordPress and then kind of got

00:00:25,320 --> 00:00:32,700
into front-end dev stuff I also did

00:00:30,779 --> 00:00:35,160
quite a bit of c-sharp as well with

00:00:32,700 --> 00:00:38,160
things like asp.net so I've kind of gone

00:00:35,160 --> 00:00:41,820
from mainly doing c-sharp espied net to

00:00:38,160 --> 00:00:45,629
this year just working in in react with

00:00:41,820 --> 00:00:47,969
JavaScript and typescript as well I came

00:00:45,629 --> 00:00:50,780
across firebase probably about four

00:00:47,969 --> 00:00:53,190
months ago and I was just googling for

00:00:50,780 --> 00:00:54,899
places where I could host a static web

00:00:53,190 --> 00:00:57,329
site and there was things like neckla

00:00:54,899 --> 00:00:59,820
Phi which looks pretty good which just

00:00:57,329 --> 00:01:01,559
hosts a static site for free and also

00:00:59,820 --> 00:01:03,960
firebase came up as well

00:01:01,559 --> 00:01:07,080
I know firebase has been around for a

00:01:03,960 --> 00:01:10,229
while and is owned by Google so it's

00:01:07,080 --> 00:01:14,580
kind of good support good infrastructure

00:01:10,229 --> 00:01:16,140
in place I would assume I've called it

00:01:14,580 --> 00:01:18,150
all you need for service Web Apps

00:01:16,140 --> 00:01:20,400
firebase and react which is kind of

00:01:18,150 --> 00:01:22,080
based off an article I read which I

00:01:20,400 --> 00:01:25,470
think was firebase and react all you

00:01:22,080 --> 00:01:28,290
need and I think I would agree with that

00:01:25,470 --> 00:01:30,500
in the way we're react lots of people

00:01:28,290 --> 00:01:35,240
use is a good front-end framework and

00:01:30,500 --> 00:01:38,159
firebase is a very quick and easy way to

00:01:35,240 --> 00:01:40,590
store data instead of like maybe a

00:01:38,159 --> 00:01:44,909
back-end database because you can just

00:01:40,590 --> 00:01:48,229
it's all uses front-end code so I think

00:01:44,909 --> 00:01:51,960
those two work quite well together so

00:01:48,229 --> 00:01:54,360
I'll kind of go over a little bit about

00:01:51,960 --> 00:01:57,270
what firebase does at a curiosity how

00:01:54,360 --> 00:02:01,909
many people have used firebase okay so

00:01:57,270 --> 00:02:01,909
quite a few relatively familiar with it

00:02:03,229 --> 00:02:09,060
these are kind of some of the things

00:02:06,899 --> 00:02:12,480
firebase can do so aesthetic hosting is

00:02:09,060 --> 00:02:13,950
the one that I came across first it also

00:02:12,480 --> 00:02:17,750
has its own authenticate

00:02:13,950 --> 00:02:20,970
it's got a real-time database which was

00:02:17,750 --> 00:02:24,560
its database for a long time real time

00:02:20,970 --> 00:02:27,810
meaning that it could if someone else

00:02:24,560 --> 00:02:31,020
used an app you wrote for example and

00:02:27,810 --> 00:02:33,060
they updated it and you were on the app

00:02:31,020 --> 00:02:35,250
as well maybe online then you would see

00:02:33,060 --> 00:02:37,140
those updates instantly a bit like -

00:02:35,250 --> 00:02:39,390
when two people are using the Google Doc

00:02:37,140 --> 00:02:42,200
or something like that

00:02:39,390 --> 00:02:45,680
there's also firestore which is

00:02:42,200 --> 00:02:47,970
basically the real-time database 2.0

00:02:45,680 --> 00:02:50,160
there were quite a few gripes with the

00:02:47,970 --> 00:02:52,530
real-time database which I'll share an

00:02:50,160 --> 00:02:54,660
article a bit later which gives it quite

00:02:52,530 --> 00:02:57,150
a scathing review and I think they

00:02:54,660 --> 00:02:59,970
learnt a lot from that and so they've

00:02:57,150 --> 00:03:02,700
built firestore now to kind of address a

00:02:59,970 --> 00:03:04,799
lot of those problems it also has cloud

00:03:02,700 --> 00:03:10,019
storage so you can use it to save things

00:03:04,799 --> 00:03:12,420
like images media files and also these

00:03:10,019 --> 00:03:15,269
the next two components are quite new I

00:03:12,420 --> 00:03:17,310
think they're still in in beta cloud

00:03:15,269 --> 00:03:20,280
functions and the machine learning kit

00:03:17,310 --> 00:03:24,390
so they're starting to kind of integrate

00:03:20,280 --> 00:03:26,940
I think firebase with Google Cloud so

00:03:24,390 --> 00:03:29,609
you can use things like cloud functions

00:03:26,940 --> 00:03:30,930
from Google cloud and they I've never

00:03:29,609 --> 00:03:31,769
used them before so I'm not that

00:03:30,930 --> 00:03:33,930
familiar with them

00:03:31,769 --> 00:03:36,780
but I think they can kind of pair the

00:03:33,930 --> 00:03:39,959
two quite nicely and machine learning is

00:03:36,780 --> 00:03:42,299
very cool so they've integrated that as

00:03:39,959 --> 00:03:46,980
well again I'm not familiar with that

00:03:42,299 --> 00:03:49,680
myself and these some reasons of why I

00:03:46,980 --> 00:03:53,160
would recommend to use firebase and why

00:03:49,680 --> 00:03:54,930
I use it personally there's no need to

00:03:53,160 --> 00:03:58,730
write any back-end code to implement a

00:03:54,930 --> 00:04:01,980
database authentication or storage so

00:03:58,730 --> 00:04:06,840
where I came from doing a lot of c-sharp

00:04:01,980 --> 00:04:10,709
with asp.net you had to write lots of

00:04:06,840 --> 00:04:13,290
server-side code set up a sequel

00:04:10,709 --> 00:04:14,819
database and it was quite a bit of

00:04:13,290 --> 00:04:17,489
boilerplate to write and a bit of head

00:04:14,819 --> 00:04:22,019
work just to get the backend set up

00:04:17,489 --> 00:04:23,700
completely so with firebase it's a lot

00:04:22,019 --> 00:04:25,290
easier is a lot less code which I'll

00:04:23,700 --> 00:04:27,710
share a bit later how you can

00:04:25,290 --> 00:04:31,200
just the code what the code looks like

00:04:27,710 --> 00:04:32,820
so it's a lot easier to just have access

00:04:31,200 --> 00:04:35,480
to a database without having to write a

00:04:32,820 --> 00:04:38,100
whole bunch back-end server side code a

00:04:35,480 --> 00:04:40,280
koala the real-time nature of the

00:04:38,100 --> 00:04:42,630
real-time database and the firestore

00:04:40,280 --> 00:04:45,840
because it allows for automatic updates

00:04:42,630 --> 00:04:47,880
for the user if data has changed so it

00:04:45,840 --> 00:04:50,150
avoids you needing to write things like

00:04:47,880 --> 00:04:54,900
WebSockets and doing some other kind of

00:04:50,150 --> 00:04:59,790
complex back-end code as well as the

00:04:54,900 --> 00:05:01,290
real-time updates are just built in you

00:04:59,790 --> 00:05:06,480
don't need to manage infrastructure or

00:05:01,290 --> 00:05:08,340
servers where you've got back-end code

00:05:06,480 --> 00:05:10,140
for example and you need to kind of

00:05:08,340 --> 00:05:12,540
manage that in the cloud or wherever

00:05:10,140 --> 00:05:14,040
you've got it hosted you don't need to

00:05:12,540 --> 00:05:16,470
worry about that so you're not going to

00:05:14,040 --> 00:05:18,450
kind of run into any problems involved

00:05:16,470 --> 00:05:21,090
with with the infrastructure which I

00:05:18,450 --> 00:05:23,490
quite like specifically from a I've

00:05:21,090 --> 00:05:27,540
managed firebase for just my own

00:05:23,490 --> 00:05:30,090
projects where I'm just working on it

00:05:27,540 --> 00:05:32,400
part-time at home so I want to be quite

00:05:30,090 --> 00:05:35,450
quick and agile and develop stuff

00:05:32,400 --> 00:05:37,560
quickly without having to worry about

00:05:35,450 --> 00:05:41,070
pairing the backend with the front end

00:05:37,560 --> 00:05:43,260
and there's also access to a bunch of

00:05:41,070 --> 00:05:45,240
integrated tools such as analytics crash

00:05:43,260 --> 00:05:49,740
reporting performance monitoring and

00:05:45,240 --> 00:05:51,330
testing tools again I'm not that

00:05:49,740 --> 00:05:55,920
familiar with those I haven't really

00:05:51,330 --> 00:05:57,420
used those elements of it but I would

00:05:55,920 --> 00:05:59,040
imagine because they're all part of fire

00:05:57,420 --> 00:06:02,460
basement that they're going to integrate

00:05:59,040 --> 00:06:05,270
quite well and you can also build

00:06:02,460 --> 00:06:08,340
progressive web apps that work offline

00:06:05,270 --> 00:06:10,920
the I think firebase originally started

00:06:08,340 --> 00:06:13,350
as mainly a backend for mobile

00:06:10,920 --> 00:06:15,240
developers and so they had the

00:06:13,350 --> 00:06:20,580
functionality with the real time

00:06:15,240 --> 00:06:23,880
database to be able to store information

00:06:20,580 --> 00:06:26,250
and data from your app even when the

00:06:23,880 --> 00:06:29,430
user wasn't online or if the the

00:06:26,250 --> 00:06:32,550
connection was a bit dodgy I know with a

00:06:29,430 --> 00:06:35,750
new fire store you're now able to have

00:06:32,550 --> 00:06:38,340
that offline access to the database

00:06:35,750 --> 00:06:39,180
while you're while you're offline we're

00:06:38,340 --> 00:06:44,190
not

00:06:39,180 --> 00:06:46,740
so Google are right big supporters of of

00:06:44,190 --> 00:06:48,210
building progressive web apps and so

00:06:46,740 --> 00:06:50,520
that's why I think they've kind of

00:06:48,210 --> 00:06:57,090
introduces into firestore just to push

00:06:50,520 --> 00:06:58,290
that progressive web app angle so is a

00:06:57,090 --> 00:07:03,390
little bit of code to do with

00:06:58,290 --> 00:07:06,120
authentication I have a feeling it works

00:07:03,390 --> 00:07:08,040
with auth Oh as well as there's quite a

00:07:06,120 --> 00:07:10,830
bit of documentation around that but I

00:07:08,040 --> 00:07:12,540
haven't used that aspect of it but

00:07:10,830 --> 00:07:14,580
because of lots of the authentication is

00:07:12,540 --> 00:07:16,320
built into firebase it makes it a lot

00:07:14,580 --> 00:07:19,050
easier when you're accessing the

00:07:16,320 --> 00:07:20,940
firestore to be able to do things like

00:07:19,050 --> 00:07:24,300
authenticate your user and make sure the

00:07:20,940 --> 00:07:27,180
users getting the correct data this

00:07:24,300 --> 00:07:30,110
specific example was where I used this

00:07:27,180 --> 00:07:37,880
is inside react with Redux and they used

00:07:30,110 --> 00:07:37,880
redux thunk which basically instead of

00:07:39,680 --> 00:07:45,810
instead of dispatching your action

00:07:43,200 --> 00:07:49,380
straight away as the reducer doesn't

00:07:45,810 --> 00:07:52,080
really handle async functions

00:07:49,380 --> 00:07:54,060
functionality so in this case you can

00:07:52,080 --> 00:07:56,460
you basically send the dispatch function

00:07:54,060 --> 00:08:00,750
and then you call whatever you need to

00:07:56,460 --> 00:08:03,140
do in this case I have dishes fire fire

00:08:00,750 --> 00:08:05,310
based auth and I'm sign-in with a pop-up

00:08:03,140 --> 00:08:08,250
provider in this case I've used the

00:08:05,310 --> 00:08:11,580
Google auth provider and then I make

00:08:08,250 --> 00:08:15,960
sure you're signed in and then once

00:08:11,580 --> 00:08:18,750
you're you've made your async call you

00:08:15,960 --> 00:08:20,850
can then dispatch to the reducer to do

00:08:18,750 --> 00:08:24,540
whatever you need to do update the state

00:08:20,850 --> 00:08:26,400
for example so this is an example of how

00:08:24,540 --> 00:08:29,730
views that with redux and redux thunk

00:08:26,400 --> 00:08:31,890
but also how the authentication works so

00:08:29,730 --> 00:08:35,840
that's that's literally all it is to

00:08:31,890 --> 00:08:35,840
orphan to sign someone in

00:08:36,970 --> 00:08:41,620
and and on the right they have just got

00:08:39,250 --> 00:08:43,479
some of the services you can connect

00:08:41,620 --> 00:08:45,250
with at the moment with redux the main

00:08:43,479 --> 00:08:49,720
ones probably people use a Google

00:08:45,250 --> 00:08:51,910
Facebook and Twitter I know using things

00:08:49,720 --> 00:08:53,440
like Google is really really easy like

00:08:51,910 --> 00:08:56,740
the Google auth provider that's all it

00:08:53,440 --> 00:08:58,870
is with Facebook I know you need to have

00:08:56,740 --> 00:09:02,410
facebook dev account and set up API keys

00:08:58,870 --> 00:09:07,540
and things like that I've read that the

00:09:02,410 --> 00:09:10,320
email password is a bit more complex but

00:09:07,540 --> 00:09:15,570
I haven't used that one specifically yet

00:09:10,320 --> 00:09:18,790
so first element is static site hosting

00:09:15,570 --> 00:09:22,090
so it's free I think that's probably one

00:09:18,790 --> 00:09:24,820
of the biggest perks it's quite fast

00:09:22,090 --> 00:09:27,130
because as I've taken a quote cached on

00:09:24,820 --> 00:09:29,530
SSDs at CD and edge servers around the

00:09:27,130 --> 00:09:32,830
world my very limited understanding of

00:09:29,530 --> 00:09:37,810
CDN edge servers is that what that

00:09:32,830 --> 00:09:40,300
sounds pretty good it's free SSL

00:09:37,810 --> 00:09:42,700
Certificates for custom domains when

00:09:40,300 --> 00:09:44,170
I've done stuff with GoDaddy and other

00:09:42,700 --> 00:09:47,530
domains and you've got to pay a hundred

00:09:44,170 --> 00:09:49,660
pounds or whatever it is for an SSL

00:09:47,530 --> 00:09:52,120
certificate I didn't actually realize

00:09:49,660 --> 00:09:54,880
you could get them for free so that was

00:09:52,120 --> 00:09:56,440
a good perk as well you can see

00:09:54,880 --> 00:09:58,180
deployment history and roll back to a

00:09:56,440 --> 00:10:00,280
previous version from the firebase can

00:09:58,180 --> 00:10:04,270
console and it uses Google

00:10:00,280 --> 00:10:06,760
infrastructure which I would trust would

00:10:04,270 --> 00:10:07,990
be quite reliable and fast and you can

00:10:06,760 --> 00:10:10,660
kind of keep everything on the same

00:10:07,990 --> 00:10:12,730
platform so rather having an app hosted

00:10:10,660 --> 00:10:15,040
here use a database here user

00:10:12,730 --> 00:10:17,230
authentication over there you can use

00:10:15,040 --> 00:10:20,740
everything on firebase and access it all

00:10:17,230 --> 00:10:23,610
from the firebase console and the real

00:10:20,740 --> 00:10:27,700
time database was was the original

00:10:23,610 --> 00:10:31,360
firebase database it's a no no sequel

00:10:27,700 --> 00:10:35,470
database all data is stored in a single

00:10:31,360 --> 00:10:39,570
JSON document which obviously can get

00:10:35,470 --> 00:10:41,890
very messy quite fast and a lot of the

00:10:39,570 --> 00:10:44,560
kind of complaints about the real time

00:10:41,890 --> 00:10:46,900
database we're around this storing the

00:10:44,560 --> 00:10:48,540
data in the JSON object for example if

00:10:46,900 --> 00:10:50,320
you wanted to query a

00:10:48,540 --> 00:10:55,010
[Music]

00:10:50,320 --> 00:10:57,650
query one segment of data you also had

00:10:55,010 --> 00:11:01,040
to get all the children belonging to

00:10:57,650 --> 00:11:05,330
that data as well which was not

00:11:01,040 --> 00:11:07,430
necessarily going to be efficient it

00:11:05,330 --> 00:11:09,230
uses real-time snapshot subscribers to

00:11:07,430 --> 00:11:11,960
automatically update the client when a

00:11:09,230 --> 00:11:13,490
change is detected in the database and I

00:11:11,960 --> 00:11:15,470
don't have an example from the real-time

00:11:13,490 --> 00:11:17,180
database but the firestore will have an

00:11:15,470 --> 00:11:21,140
example later of what the snapshot looks

00:11:17,180 --> 00:11:25,250
like and it's good for storage of simple

00:11:21,140 --> 00:11:26,510
data models but it had trouble scaling

00:11:25,250 --> 00:11:28,730
when reaching a hundred thousand

00:11:26,510 --> 00:11:30,950
concurrent users obviously that's quite

00:11:28,730 --> 00:11:32,840
a big deal you'd have to have a very big

00:11:30,950 --> 00:11:34,250
popular application to actually be

00:11:32,840 --> 00:11:39,560
reaching a hundred thousand concurrent

00:11:34,250 --> 00:11:41,180
users but from what I gather when they

00:11:39,560 --> 00:11:42,890
reached a hundred thousand users you had

00:11:41,180 --> 00:11:46,040
to do things like sharding the database

00:11:42,890 --> 00:11:49,850
and using multiple databases which read

00:11:46,040 --> 00:11:54,140
that was world of pain for the people

00:11:49,850 --> 00:11:56,570
who reach that complex hierarchical data

00:11:54,140 --> 00:11:58,250
is harder to organize at scale so this

00:11:56,570 --> 00:12:00,560
is just another negative of the

00:11:58,250 --> 00:12:02,750
real-time database there's no offline

00:12:00,560 --> 00:12:04,090
support for web and you've got some

00:12:02,750 --> 00:12:07,820
limited sorting and filtering

00:12:04,090 --> 00:12:10,730
functionality so coming over to the

00:12:07,820 --> 00:12:14,420
firestore they learnt a lot from the

00:12:10,730 --> 00:12:17,960
real-time database it's currently in in

00:12:14,420 --> 00:12:21,110
beta when you if you've got to set up a

00:12:17,960 --> 00:12:25,340
new database using firebase it will

00:12:21,110 --> 00:12:26,720
pretty much have on-screen firestorm and

00:12:25,340 --> 00:12:28,190
you've kind of got to scroll down a

00:12:26,720 --> 00:12:31,430
little bit to choose the real time

00:12:28,190 --> 00:12:33,290
database so they're really telling users

00:12:31,430 --> 00:12:35,000
to use firestore because it's the new

00:12:33,290 --> 00:12:37,190
and improved it's gonna be a lot better

00:12:35,000 --> 00:12:39,140
than real time database but basically

00:12:37,190 --> 00:12:44,380
warn you it's currently in beta so just

00:12:39,140 --> 00:12:47,570
to not complain too much if if it breaks

00:12:44,380 --> 00:12:49,130
it's a document based structure which

00:12:47,570 --> 00:12:52,220
allows for quicker querying of large

00:12:49,130 --> 00:12:54,440
data sets I'm quite new to no no sequel

00:12:52,220 --> 00:12:58,130
using firestore was the first time i've

00:12:54,440 --> 00:13:01,910
i've used it i'm mainly used to sequel

00:12:58,130 --> 00:13:07,430
server and that kind of

00:13:01,910 --> 00:13:09,920
database structure so a document based

00:13:07,430 --> 00:13:12,080
structure might mean more to you than it

00:13:09,920 --> 00:13:13,730
did to me when I first read it but I've

00:13:12,080 --> 00:13:17,120
got a example on the next couple of

00:13:13,730 --> 00:13:20,510
slides to explain what a document base

00:13:17,120 --> 00:13:22,610
structure is and complex hierarchical

00:13:20,510 --> 00:13:24,500
data is easier to organize at scale

00:13:22,610 --> 00:13:28,760
using sub collections within documents

00:13:24,500 --> 00:13:31,520
so the way they use it if you query a

00:13:28,760 --> 00:13:32,750
parent you don't need to get all its

00:13:31,520 --> 00:13:37,220
children as well so it's a lot more

00:13:32,750 --> 00:13:41,180
efficient in that regards okay so here's

00:13:37,220 --> 00:13:44,510
a picture I found of a description of a

00:13:41,180 --> 00:13:46,610
document base database and our curiosity

00:13:44,510 --> 00:13:50,210
who's who's familiar with no sequel and

00:13:46,610 --> 00:13:54,320
the document base database okay okay

00:13:50,210 --> 00:13:57,290
quite a few people as well so and this

00:13:54,320 --> 00:14:00,020
is how the firestore database works

00:13:57,290 --> 00:14:04,700
where you have a collection so that

00:14:00,020 --> 00:14:08,690
whole thing is a collection actually

00:14:04,700 --> 00:14:12,230
sorry various collection actually that I

00:14:08,690 --> 00:14:14,660
think is a document because within a

00:14:12,230 --> 00:14:17,540
document you can have various

00:14:14,660 --> 00:14:20,830
collections and let me just think about

00:14:17,540 --> 00:14:23,690
that one document various collections

00:14:20,830 --> 00:14:26,600
okay okay each one of these is a

00:14:23,690 --> 00:14:29,180
document sorry and then so this document

00:14:26,600 --> 00:14:33,110
that a document will be like just a

00:14:29,180 --> 00:14:35,060
simple JSON object for example you might

00:14:33,110 --> 00:14:37,850
have first name last name ID and that

00:14:35,060 --> 00:14:44,720
might be your user but then the user can

00:14:37,850 --> 00:14:51,680
have multiple collections as well and

00:14:44,720 --> 00:14:53,810
then each so sorry a user can have

00:14:51,680 --> 00:14:57,860
multiple collections in each collection

00:14:53,810 --> 00:15:00,200
can have multiple documents and there

00:14:57,860 --> 00:15:03,410
might be a better example on the next

00:15:00,200 --> 00:15:05,890
page okay so there's an example there so

00:15:03,410 --> 00:15:09,500
at the top right you've got three users

00:15:05,890 --> 00:15:13,700
and one user Joe has a collection of

00:15:09,500 --> 00:15:16,810
workouts and the workouts as each one is

00:15:13,700 --> 00:15:16,810
is a separate document

00:15:18,730 --> 00:15:26,870
and I will flick over to what it

00:15:25,370 --> 00:15:32,360
actually looks like in the firebase

00:15:26,870 --> 00:15:34,279
database and this did start as just a

00:15:32,360 --> 00:15:36,140
demo that I that I did when I was

00:15:34,279 --> 00:15:38,900
learning how to use file store but I've

00:15:36,140 --> 00:15:40,760
actually manually changed it just so it

00:15:38,900 --> 00:15:47,860
kind of explains it a little bit better

00:15:40,760 --> 00:15:50,270
but basically here you've got so users

00:15:47,860 --> 00:15:51,710
so here you've got a collection of users

00:15:50,270 --> 00:15:54,140
and you've got at the moment I've only

00:15:51,710 --> 00:15:56,210
got two documents which are two

00:15:54,140 --> 00:16:00,920
different users both happens to be me

00:15:56,210 --> 00:16:04,370
and so this one document has details

00:16:00,920 --> 00:16:06,470
about this user and also has two

00:16:04,370 --> 00:16:09,830
collections so I've got a collection of

00:16:06,470 --> 00:16:14,930
items each one of these is a document

00:16:09,830 --> 00:16:17,690
and also a collection of lists there and

00:16:14,930 --> 00:16:19,250
I find this way of looking at the

00:16:17,690 --> 00:16:21,830
database quite useful especially when

00:16:19,250 --> 00:16:24,470
developing stuff because you can also

00:16:21,830 --> 00:16:28,330
test the real-time nature of it by kind

00:16:24,470 --> 00:16:28,330
of manually changing something here

00:16:30,190 --> 00:16:35,320
update and then you can just see it

00:16:32,570 --> 00:16:35,320
change in your app

00:16:40,480 --> 00:16:46,179
so this health is how firestore does it

00:16:43,389 --> 00:16:51,540
right as long as you've got your

00:16:46,179 --> 00:16:51,540
firestore DB actually my present present

00:16:53,279 --> 00:16:58,449
and then you can grab your collection in

00:16:56,169 --> 00:17:00,609
this case collection of users grab the

00:16:58,449 --> 00:17:03,839
document and the document is the

00:17:00,609 --> 00:17:07,059
document ID in this case I've just

00:17:03,839 --> 00:17:10,089
created the document ID to be the user

00:17:07,059 --> 00:17:13,059
ID and then I've got a collection of

00:17:10,089 --> 00:17:16,260
items over there add and then you

00:17:13,059 --> 00:17:19,480
literally just add straight in a

00:17:16,260 --> 00:17:23,289
JavaScript object in this case I've got

00:17:19,480 --> 00:17:26,620
time added and an item and then you've

00:17:23,289 --> 00:17:28,659
got your dot then so basically it'll do

00:17:26,620 --> 00:17:30,370
the add and then you've got your

00:17:28,659 --> 00:17:31,600
reference for the document so you can do

00:17:30,370 --> 00:17:33,970
whatever else you want with it

00:17:31,600 --> 00:17:36,419
in this case I've just logged it to the

00:17:33,970 --> 00:17:36,419
console

00:17:43,080 --> 00:17:48,090
okay and this is what a subscribe looks

00:17:45,029 --> 00:17:50,210
like so the first one was how you saved

00:17:48,090 --> 00:17:52,499
to the database and this is the case of

00:17:50,210 --> 00:17:54,809
creating the subscriber to make sure

00:17:52,499 --> 00:17:56,610
that if it changes in the database that

00:17:54,809 --> 00:18:01,080
are automatically updates on your screen

00:17:56,610 --> 00:18:04,110
and you with real-time database there

00:18:01,080 --> 00:18:06,869
was different kind of snapshot handlers

00:18:04,110 --> 00:18:08,779
you could do unchanged on add and on

00:18:06,869 --> 00:18:10,440
delete I think something like that

00:18:08,779 --> 00:18:13,200
firestore have made it a little bit

00:18:10,440 --> 00:18:15,629
simpler it's simply on snapshot so you

00:18:13,200 --> 00:18:19,950
just call on snapshot and then you send

00:18:15,629 --> 00:18:25,139
a callback function in this case I have

00:18:19,950 --> 00:18:26,369
it on class this collection okay so this

00:18:25,139 --> 00:18:29,100
case I've got a collection of class

00:18:26,369 --> 00:18:35,279
lists and every time the collection of

00:18:29,100 --> 00:18:38,999
class lists updates I've just got all

00:18:35,279 --> 00:18:42,960
the lists here so it'll return basically

00:18:38,999 --> 00:18:45,179
if one thing in your collection if one

00:18:42,960 --> 00:18:47,279
document in the collection changes in

00:18:45,179 --> 00:18:51,090
this case it'll return every single

00:18:47,279 --> 00:18:54,570
document so I've just gone through each

00:18:51,090 --> 00:18:56,909
different document created a class list

00:18:54,570 --> 00:19:04,789
out of it and then dispatched it to the

00:18:56,909 --> 00:19:07,139
Redux store you can so it's I kind of

00:19:04,789 --> 00:19:11,460
suppose my thoughts on the way I've used

00:19:07,139 --> 00:19:13,950
this in redux is every time a one

00:19:11,460 --> 00:19:16,399
document updates I've cleared the redux

00:19:13,950 --> 00:19:19,320
tour of all the documents and I've

00:19:16,399 --> 00:19:21,389
repopulated it at the moment doing that

00:19:19,320 --> 00:19:25,139
performance-wise is not kind of major

00:19:21,389 --> 00:19:28,580
effect but what you can do is with your

00:19:25,139 --> 00:19:31,019
snapshot you can for example only

00:19:28,580 --> 00:19:32,669
reflect the documents that do have

00:19:31,019 --> 00:19:35,190
changes and things like that so there's

00:19:32,669 --> 00:19:39,210
a little bit of flexibility around what

00:19:35,190 --> 00:19:43,200
you decide to up update these are just

00:19:39,210 --> 00:19:46,679
some examples of some queries so I think

00:19:43,200 --> 00:19:50,149
with firestore you still want to use it

00:19:46,679 --> 00:19:53,400
for relatively simple applications

00:19:50,149 --> 00:19:57,570
I think anything

00:19:53,400 --> 00:19:59,430
and that's gonna be kind of more complex

00:19:57,570 --> 00:20:03,780
or that's going to have different types

00:19:59,430 --> 00:20:06,530
of users different admins then firestore

00:20:03,780 --> 00:20:10,680
is probably not the best fire based

00:20:06,530 --> 00:20:13,860
database to use but biased orders have a

00:20:10,680 --> 00:20:15,870
few better querying capabilities as a

00:20:13,860 --> 00:20:17,580
real-time database so you can just do

00:20:15,870 --> 00:20:20,610
simple things like in this case I've got

00:20:17,580 --> 00:20:23,670
cities references where the state equals

00:20:20,610 --> 00:20:28,230
CA or where population is less than

00:20:23,670 --> 00:20:29,460
100,000 and this wasn't be odd to me

00:20:28,230 --> 00:20:32,070
when I first looked at it cuz you're

00:20:29,460 --> 00:20:34,350
basically calling a a method and then

00:20:32,070 --> 00:20:36,500
each of the arguments is just the string

00:20:34,350 --> 00:20:40,230
so you've got this two equal signs in

00:20:36,500 --> 00:20:42,330
double quotes but that's how they've

00:20:40,230 --> 00:20:45,000
done it and you can also do compound

00:20:42,330 --> 00:20:46,950
queries so where you do two more queries

00:20:45,000 --> 00:20:49,590
together and there's ordering as well I

00:20:46,950 --> 00:20:52,200
know in fire fire store there's lots of

00:20:49,590 --> 00:20:54,510
indexing you can use as well so if you

00:20:52,200 --> 00:20:57,510
do similar kinds of ordering in queries

00:20:54,510 --> 00:21:02,460
you can set up the indexing and it'll

00:20:57,510 --> 00:21:05,670
make it faster because everything is

00:21:02,460 --> 00:21:08,820
front-end code everyone basically has

00:21:05,670 --> 00:21:11,280
access to your details on how to access

00:21:08,820 --> 00:21:13,890
your fire store the only thing they

00:21:11,280 --> 00:21:16,710
don't have access to is the fire store

00:21:13,890 --> 00:21:22,140
rules so the rules are what you write

00:21:16,710 --> 00:21:24,300
upload to fire store itself to specify

00:21:22,140 --> 00:21:25,980
what people allowed to read and what

00:21:24,300 --> 00:21:27,690
people are allowed to write so basically

00:21:25,980 --> 00:21:32,400
you only want users to be able to write

00:21:27,690 --> 00:21:36,060
to their own files using their

00:21:32,400 --> 00:21:38,160
authorization and they can get quite

00:21:36,060 --> 00:21:40,140
complex about what can be read and what

00:21:38,160 --> 00:21:42,630
could be written but you can also have

00:21:40,140 --> 00:21:45,030
the mode where anything is accessible to

00:21:42,630 --> 00:21:50,670
everyone which is easy when you're first

00:21:45,030 --> 00:21:52,140
starting to develop stuff and I've shown

00:21:50,670 --> 00:21:56,600
you this that was a feistel structure

00:21:52,140 --> 00:21:59,310
for a list step and this is one kind of

00:21:56,600 --> 00:22:01,560
problem I ran into or I suppose a

00:21:59,310 --> 00:22:03,870
consideration I needed when I was as

00:22:01,560 --> 00:22:06,040
building one particular app with react

00:22:03,870 --> 00:22:09,010
and redux

00:22:06,040 --> 00:22:12,520
and this is how I've kind of handled the

00:22:09,010 --> 00:22:14,830
idea of state so with fire store because

00:22:12,520 --> 00:22:16,600
it's real time as well you effectively

00:22:14,830 --> 00:22:20,190
have two states you've got the fire

00:22:16,600 --> 00:22:22,810
store state and the Redux state and

00:22:20,190 --> 00:22:26,740
keeping them in sync is obviously

00:22:22,810 --> 00:22:29,800
important so the way I've done it is

00:22:26,740 --> 00:22:31,660
basically you've got the component and

00:22:29,800 --> 00:22:35,320
inside the component I've got a safe to

00:22:31,660 --> 00:22:37,060
fire store function which comes from a

00:22:35,320 --> 00:22:39,190
file which I've called the fire store

00:22:37,060 --> 00:22:41,620
repository and that will save it

00:22:39,190 --> 00:22:45,310
directly to fire store so then fire

00:22:41,620 --> 00:22:48,310
store I've got a separate file called

00:22:45,310 --> 00:22:50,380
snapshot handlers which takes the

00:22:48,310 --> 00:22:54,340
snapshot from fire store and that's what

00:22:50,380 --> 00:22:57,070
I use to to update Redux so effectively

00:22:54,340 --> 00:22:59,740
if someone for example clicks a checkbox

00:22:57,070 --> 00:23:02,320
click the checkbox there at the moment

00:22:59,740 --> 00:23:06,610
there's like a like a quarter half

00:23:02,320 --> 00:23:08,800
second delay as the check the update

00:23:06,610 --> 00:23:10,600
check to get safe to fire store and then

00:23:08,800 --> 00:23:12,730
it waits for the snap snapshot to

00:23:10,600 --> 00:23:14,500
actually update the check box and I'm

00:23:12,730 --> 00:23:16,120
tossing up whether I like that or not

00:23:14,500 --> 00:23:19,000
because I want to be a bit more a bit

00:23:16,120 --> 00:23:21,450
quicker but this is a nice clean way of

00:23:19,000 --> 00:23:21,450
doing it

00:23:21,480 --> 00:23:29,320
ok so I've set up an application and I'm

00:23:26,500 --> 00:23:33,520
gonna write this on here very quickly so

00:23:29,320 --> 00:23:44,910
you can pull out your phones and type in

00:23:33,520 --> 00:23:44,910
this email URL u-h

00:23:50,330 --> 00:23:57,470
okay I hope you can read that okay I'll

00:23:52,770 --> 00:23:57,470
give you a second to type that one in

00:24:02,059 --> 00:24:09,030
and so this is just an application I

00:24:05,220 --> 00:24:10,799
wrote to basically demo firebase and to

00:24:09,030 --> 00:24:12,720
kind of show the real-time nature of it

00:24:10,799 --> 00:24:19,230
and a bit of an example of what it can

00:24:12,720 --> 00:24:21,809
be used for so if you see all right I'll

00:24:19,230 --> 00:24:24,090
switch over to it now so if you need to

00:24:21,809 --> 00:24:29,010
keep running the URL you can just write

00:24:24,090 --> 00:24:32,910
it from up there I think this might work

00:24:29,010 --> 00:24:34,980
okay okay so I've tried to match a color

00:24:32,910 --> 00:24:36,630
with what you color you've got your

00:24:34,980 --> 00:24:39,990
phone so you can kind of try and find it

00:24:36,630 --> 00:24:42,870
easily what you're doing but you can

00:24:39,990 --> 00:24:44,460
kind of test out you can see that when

00:24:42,870 --> 00:24:46,470
you type something in there is a slight

00:24:44,460 --> 00:24:52,140
delay but I think that dilip the delay

00:24:46,470 --> 00:24:53,640
is reasonably usable and I think I

00:24:52,140 --> 00:24:56,520
tested this with about five different

00:24:53,640 --> 00:24:59,669
devices I got my iPad my phone and my

00:24:56,520 --> 00:25:01,980
laptop and my partner's phone but I'm

00:24:59,669 --> 00:25:07,169
glad to see it works with so many people

00:25:01,980 --> 00:25:10,799
connected as well and so I'll switch now

00:25:07,169 --> 00:25:14,210
to the code that I've done for this

00:25:10,799 --> 00:25:25,080
basically and just to show you how I

00:25:14,210 --> 00:25:28,620
created in firebase and okay we'll start

00:25:25,080 --> 00:25:32,100
with alright my firebase file so this is

00:25:28,620 --> 00:25:33,929
just the app you've just seen these

00:25:32,100 --> 00:25:36,809
section up the top here initializing

00:25:33,929 --> 00:25:39,210
firebase configuration basically has all

00:25:36,809 --> 00:25:40,590
your connections to your firebase and as

00:25:39,210 --> 00:25:42,720
soon as you want to start using firebase

00:25:40,590 --> 00:25:47,190
you need that little chunk of code at

00:25:42,720 --> 00:25:50,190
the top to to initialize yet basically

00:25:47,190 --> 00:25:55,620
with the configuration then to get

00:25:50,190 --> 00:25:59,790
access to the firestore I've just got a

00:25:55,620 --> 00:26:02,130
function self calling function which

00:25:59,790 --> 00:26:03,270
gets firestore from firebase that fire

00:26:02,130 --> 00:26:05,310
store and

00:26:03,270 --> 00:26:06,960
out of these settings I didn't need to

00:26:05,310 --> 00:26:08,640
do that originally but I tried it and a

00:26:06,960 --> 00:26:11,300
little error came up and told me that I

00:26:08,640 --> 00:26:13,560
had to handle timestamps and snapshots

00:26:11,300 --> 00:26:15,060
correctly so I've added that and not

00:26:13,560 --> 00:26:20,460
still not hundred percent sure why

00:26:15,060 --> 00:26:21,870
Google needed to add that but and these

00:26:20,460 --> 00:26:23,730
are just the firebase methods so

00:26:21,870 --> 00:26:25,860
basically when you go to the website on

00:26:23,730 --> 00:26:28,050
your phone I'm logging you in as an

00:26:25,860 --> 00:26:32,100
anonymous user so then I've got access

00:26:28,050 --> 00:26:34,260
to some kind of authorization and a user

00:26:32,100 --> 00:26:38,190
ID that I can use for whatever I want to

00:26:34,260 --> 00:26:43,110
and so you can see I've just login user

00:26:38,190 --> 00:26:45,420
sign in enormous anonymously you can get

00:26:43,110 --> 00:26:47,640
the user note so here I've got the user

00:26:45,420 --> 00:26:50,400
you can actually get the user ID

00:26:47,640 --> 00:26:56,610
straight by going fire-based auth dot

00:26:50,400 --> 00:26:58,650
current user but if you run that to get

00:26:56,610 --> 00:27:01,530
the user and then you use the user in

00:26:58,650 --> 00:27:03,960
another function the next function might

00:27:01,530 --> 00:27:05,300
be called before it returns the current

00:27:03,960 --> 00:27:08,970
user basically because it's asynchronous

00:27:05,300 --> 00:27:11,370
so they recommend that you use this on

00:27:08,970 --> 00:27:13,860
all state changed and then pass the user

00:27:11,370 --> 00:27:16,530
so that'll make sure and it's got access

00:27:13,860 --> 00:27:19,230
to the user before you use it in

00:27:16,530 --> 00:27:21,150
whatever function you want and then I've

00:27:19,230 --> 00:27:23,730
got the update text in firebase so every

00:27:21,150 --> 00:27:26,040
time you type into the input box I've

00:27:23,730 --> 00:27:30,780
just used that as a controlled component

00:27:26,040 --> 00:27:33,930
in react and I've passed the input to

00:27:30,780 --> 00:27:36,660
update text in firebase and also just

00:27:33,930 --> 00:27:38,640
the color I just gave you a random color

00:27:36,660 --> 00:27:41,970
in react so I passed that to the

00:27:38,640 --> 00:27:43,440
database as well call uh North State

00:27:41,970 --> 00:27:47,640
changed again to make sure I've got the

00:27:43,440 --> 00:27:51,210
user and so then I send the details to

00:27:47,640 --> 00:27:54,410
the document which has your user ID and

00:27:51,210 --> 00:28:01,080
I've just set the text and the color

00:27:54,410 --> 00:28:02,970
then the snapshot I've just put it in

00:28:01,080 --> 00:28:05,850
component did mount so it calls when the

00:28:02,970 --> 00:28:10,220
component first mounts and I've got the

00:28:05,850 --> 00:28:13,610
collection user text and then I've just

00:28:10,220 --> 00:28:13,610
set the state

00:28:14,390 --> 00:28:27,120
with it with the updated text and I

00:28:22,350 --> 00:28:30,900
think that is just a bit a few other

00:28:27,120 --> 00:28:34,500
things that's four base example there's

00:28:30,900 --> 00:28:35,580
just a few resources basically where

00:28:34,500 --> 00:28:37,470
I've got information where I've got

00:28:35,580 --> 00:28:41,760
quotes where I've used pictures as well

00:28:37,470 --> 00:28:43,350
and there is I've put the article in

00:28:41,760 --> 00:28:45,600
here why you should never use firebase

00:28:43,350 --> 00:28:47,310
real-time database it is an interesting

00:28:45,600 --> 00:28:49,230
article if you're kind of seriously

00:28:47,310 --> 00:28:51,690
considering building something big with

00:28:49,230 --> 00:28:54,800
firebase but what's worth pointing out

00:28:51,690 --> 00:29:00,300
is they refer to the real-time database

00:28:54,800 --> 00:29:01,650
quite harshly a lot of the problems I

00:29:00,300 --> 00:29:03,330
had with the real-time database I've

00:29:01,650 --> 00:29:05,230
been addressed with the firebase

00:29:03,330 --> 00:29:09,190
firestorm

00:29:05,230 --> 00:29:09,190

YouTube URL: https://www.youtube.com/watch?v=2SYoPHtvxVI


