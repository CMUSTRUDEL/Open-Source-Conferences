Title: Time Traveller's Guide to Accessibility Mechanics - Bristol JS - February 2019
Publication date: 2019-03-11
Playlist: Bristol JS
Description: 
	LÃ©onie Watson

For a long time, HTML gave us all the semantics and other goodies we
needed to make things work properly on the web. Then we started
inventing new UI components, and now we use ARIA and Javascript to
polyfill the missing bits. As we move towards a future of Web
Components, the time has come to invent another solution that will let
us encapsulate accessibility in the shadow DOM - and its called the
Accessibility Object Model (AOM).
_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,089 --> 00:00:06,210
good evening it's lovely to be back at

00:00:02,760 --> 00:00:08,880
Bristol j/s for those of you I haven't

00:00:06,210 --> 00:00:10,559
met before my name is Leonie Watson I've

00:00:08,880 --> 00:00:13,740
been working on the web since the mid

00:00:10,559 --> 00:00:17,970
90s most of that time in accessibility

00:00:13,740 --> 00:00:20,189
most recently kicking off a startup in

00:00:17,970 --> 00:00:22,740
the accessibility space called tetra

00:00:20,189 --> 00:00:25,109
logical and we're trying to move

00:00:22,740 --> 00:00:27,390
accessibility away from the professional

00:00:25,109 --> 00:00:30,679
obsession with audits being the answer

00:00:27,390 --> 00:00:33,149
to everything and instead focusing on

00:00:30,679 --> 00:00:34,440
more useful and earlier parts of

00:00:33,149 --> 00:00:36,059
accessibility things like getting

00:00:34,440 --> 00:00:38,520
pattern libraries component libraries

00:00:36,059 --> 00:00:41,450
and design systems accessible before

00:00:38,520 --> 00:00:43,980
they start being used to deploy sites

00:00:41,450 --> 00:00:45,920
taking accessibility into new areas with

00:00:43,980 --> 00:00:48,960
virtual reality voice assistant

00:00:45,920 --> 00:00:51,000
applications prototyping and researching

00:00:48,960 --> 00:00:52,949
solutions around those so it's a an

00:00:51,000 --> 00:00:55,110
exciting and crazy time and great to be

00:00:52,949 --> 00:00:57,360
back here in Bristol having a chance to

00:00:55,110 --> 00:01:00,149
talk about some of the accessibility

00:00:57,360 --> 00:01:03,840
things that I think amongst the most

00:01:00,149 --> 00:01:05,339
interesting and so on that note I'd like

00:01:03,840 --> 00:01:08,070
to talk a bit about accessibility

00:01:05,339 --> 00:01:11,130
mechanics the past the present and the

00:01:08,070 --> 00:01:15,689
future and why as developers we need to

00:01:11,130 --> 00:01:17,369
call on all three of those time eras in

00:01:15,689 --> 00:01:21,450
order to do the best that we can with

00:01:17,369 --> 00:01:23,430
accessibility at the code level browsers

00:01:21,450 --> 00:01:25,860
these will be very familiar to all of us

00:01:23,430 --> 00:01:28,560
at the moment for the time being at

00:01:25,860 --> 00:01:30,810
least we still have four browser engines

00:01:28,560 --> 00:01:33,210
out there to work with unfortunately

00:01:30,810 --> 00:01:36,479
we're about to lose edge HTML as edge

00:01:33,210 --> 00:01:38,340
shifts over to the chromium engine but

00:01:36,479 --> 00:01:41,579
for the moment these are the four that

00:01:38,340 --> 00:01:44,909
we most commonly deal with in our day to

00:01:41,579 --> 00:01:45,600
day work what might be less familiar to

00:01:44,909 --> 00:01:47,750
you

00:01:45,600 --> 00:01:50,759
pieces of software called screen readers

00:01:47,750 --> 00:01:53,220
to some extent the speech synthesis that

00:01:50,759 --> 00:01:56,430
ian was demonstrating in his talk just

00:01:53,220 --> 00:01:58,890
before is part of screen reading

00:01:56,430 --> 00:02:01,619
technology it's taking content on screen

00:01:58,890 --> 00:02:03,719
and translating it into synthetic speech

00:02:01,619 --> 00:02:05,880
so someone who's like me you can't see

00:02:03,719 --> 00:02:07,680
what's on the screen can actually still

00:02:05,880 --> 00:02:09,869
interact with it and understand what's

00:02:07,680 --> 00:02:11,430
going on and there are screen readers

00:02:09,869 --> 00:02:13,390
now on pretty much every platform

00:02:11,430 --> 00:02:18,160
whether it's Windows Mac Oh

00:02:13,390 --> 00:02:20,530
iOS Android and most Linux distros that

00:02:18,160 --> 00:02:22,900
are in common use today's so there is a

00:02:20,530 --> 00:02:24,490
screen reader available on all of those

00:02:22,900 --> 00:02:28,000
platforms which is really good news it

00:02:24,490 --> 00:02:30,730
hasn't always been that way so if we

00:02:28,000 --> 00:02:32,830
look to the past back as far as the

00:02:30,730 --> 00:02:34,750
1990s there were pretty much only

00:02:32,830 --> 00:02:37,840
Windows screen readers at this point

00:02:34,750 --> 00:02:39,970
though did used to be one for the Apple

00:02:37,840 --> 00:02:41,860
operating systems but they quit

00:02:39,970 --> 00:02:44,140
developing it or lose the third-party

00:02:41,860 --> 00:02:47,020
supplier quit developing it in the

00:02:44,140 --> 00:02:49,000
mid-90s so Windows really did rule the

00:02:47,020 --> 00:02:52,209
screen reading world for for most of the

00:02:49,000 --> 00:02:54,190
the 1990s and into the early 2000s and

00:02:52,209 --> 00:02:56,800
what used to happen was when an HTML

00:02:54,190 --> 00:02:58,300
document was loaded into the browser the

00:02:56,800 --> 00:02:59,739
browser would take that HTML it would

00:02:58,300 --> 00:03:01,630
pass it it would create the visual

00:02:59,739 --> 00:03:03,160
rendering it would provide the

00:03:01,630 --> 00:03:04,959
interaction where necessary for things

00:03:03,160 --> 00:03:07,030
like form fields and other interactive

00:03:04,959 --> 00:03:08,470
elements and then the screen reader

00:03:07,030 --> 00:03:10,360
would come along and it would do more or

00:03:08,470 --> 00:03:13,150
less exactly the same thing completely

00:03:10,360 --> 00:03:14,950
independently of each other on the one

00:03:13,150 --> 00:03:16,300
hand this was quite useful from the

00:03:14,950 --> 00:03:17,769
screen reader users point of view

00:03:16,300 --> 00:03:19,450
because they ended up with a virtual

00:03:17,769 --> 00:03:21,630
copy of the page that they could

00:03:19,450 --> 00:03:24,640
interact with that made it possible to

00:03:21,630 --> 00:03:26,320
navigate in different ways much more

00:03:24,640 --> 00:03:26,860
easily than what otherwise have been

00:03:26,320 --> 00:03:30,400
possible

00:03:26,860 --> 00:03:31,690
on the downside having to uas go in two

00:03:30,400 --> 00:03:33,760
completely separate things with the same

00:03:31,690 --> 00:03:35,560
document quite often led to very

00:03:33,760 --> 00:03:37,930
distinct renderings of the page

00:03:35,560 --> 00:03:41,890
not always distinctions that were useful

00:03:37,930 --> 00:03:44,769
to anybody in question so we can see a

00:03:41,890 --> 00:03:46,360
screen reader in action doing this with

00:03:44,769 --> 00:03:49,120
this sort of model and just reading some

00:03:46,360 --> 00:03:51,250
text from a web page heading level one

00:03:49,120 --> 00:03:55,000
using the Aria parent attribute hosted

00:03:51,250 --> 00:03:56,350
in Lake codenames on January 14 2017 it

00:03:55,000 --> 00:03:57,820
is common on the width of the current

00:03:56,350 --> 00:03:59,590
thing in a collection to be highlighted

00:03:57,820 --> 00:04:01,030
visually but providing an alternative

00:03:59,590 --> 00:04:03,190
for screen reader users has often

00:04:01,030 --> 00:04:04,900
involved something about the lake Aria

00:04:03,190 --> 00:04:07,540
current attribute his intended to solve

00:04:04,900 --> 00:04:08,950
this problem so because of the virtual

00:04:07,540 --> 00:04:10,989
model the screen reader is able to

00:04:08,950 --> 00:04:13,209
identify you know the different types of

00:04:10,989 --> 00:04:16,540
content there and to read the text but

00:04:13,209 --> 00:04:18,519
it was a pretty basic system there was a

00:04:16,540 --> 00:04:20,320
lot of guesswork involved and the screen

00:04:18,519 --> 00:04:22,240
reader had to do as much heavy lifting

00:04:20,320 --> 00:04:23,900
as the browser did so two years or

00:04:22,240 --> 00:04:27,830
agents doing equal amounts of

00:04:23,900 --> 00:04:30,470
really hard work by the time we hit sort

00:04:27,830 --> 00:04:32,570
of middle of the 2000s Apple had

00:04:30,470 --> 00:04:35,479
introduced a screen reader of its own

00:04:32,570 --> 00:04:37,280
voiceover and the waste screen readers

00:04:35,479 --> 00:04:39,620
on both platforms worked had changed

00:04:37,280 --> 00:04:41,389
pretty fundamentally they started using

00:04:39,620 --> 00:04:44,060
things called platform accessibility

00:04:41,389 --> 00:04:46,580
api's these have been around since the

00:04:44,060 --> 00:04:48,919
mid 90s but took their time being

00:04:46,580 --> 00:04:51,289
introduced into browsers and what these

00:04:48,919 --> 00:04:54,259
API is enabled screen readers to do was

00:04:51,289 --> 00:04:56,180
query information from the browser about

00:04:54,259 --> 00:04:57,440
content that was on screen so instead of

00:04:56,180 --> 00:04:59,389
having to do their own guesswork and

00:04:57,440 --> 00:05:00,590
their own rendering of the HTML they

00:04:59,389 --> 00:05:02,419
could ask the browser for its

00:05:00,590 --> 00:05:06,470
interpretation and use that information

00:05:02,419 --> 00:05:08,090
instead like screen readers in operating

00:05:06,470 --> 00:05:09,710
systems we've got plaques platform

00:05:08,090 --> 00:05:12,919
accessibility API is on pretty much

00:05:09,710 --> 00:05:14,840
every operating system windows still has

00:05:12,919 --> 00:05:19,370
three at the moment there's one

00:05:14,840 --> 00:05:22,880
available on Mac OS iOS talkback on

00:05:19,370 --> 00:05:24,979
Android as well and on Linux and these

00:05:22,880 --> 00:05:26,840
as the name suggests operate at the

00:05:24,979 --> 00:05:28,520
platform levels so a screen reader can

00:05:26,840 --> 00:05:30,229
actually ask the operating system via

00:05:28,520 --> 00:05:32,270
these API is you know what is that

00:05:30,229 --> 00:05:34,639
object on screen whether it's a window a

00:05:32,270 --> 00:05:37,340
menu a button within an application or

00:05:34,639 --> 00:05:38,720
now part of the browser web content so

00:05:37,340 --> 00:05:40,099
it takes a lot of the guesswork and a

00:05:38,720 --> 00:05:42,050
lot of the heavy lifting away from the

00:05:40,099 --> 00:05:44,120
screen reader and puts it back into the

00:05:42,050 --> 00:05:46,150
hands of the operating system or in the

00:05:44,120 --> 00:05:48,800
case we're interested in the browser so

00:05:46,150 --> 00:05:51,139
it means that when we use HTML elements

00:05:48,800 --> 00:05:53,000
for example the main element the browser

00:05:51,139 --> 00:05:54,710
makes a lot of information available to

00:05:53,000 --> 00:05:56,599
the screen reader it says this element

00:05:54,710 --> 00:05:58,210
has a particular role in this case that

00:05:56,599 --> 00:06:00,349
it's the main content area of the page

00:05:58,210 --> 00:06:01,789
the screen reader when it encounters

00:06:00,349 --> 00:06:03,020
this will say to the browser tell me

00:06:01,789 --> 00:06:05,270
everything you know about this element

00:06:03,020 --> 00:06:07,340
and then it'll grab that information and

00:06:05,270 --> 00:06:10,610
convey it to the user and it will say

00:06:07,340 --> 00:06:12,020
something along these lines reason quite

00:06:10,610 --> 00:06:13,880
simply that it'll just tell the user

00:06:12,020 --> 00:06:15,880
that they're dealing with the part of

00:06:13,880 --> 00:06:18,380
the page that has the main content in it

00:06:15,880 --> 00:06:20,060
the nav element has something pretty

00:06:18,380 --> 00:06:21,440
similar it has a roll of navigation

00:06:20,060 --> 00:06:23,240
according to to the browser's

00:06:21,440 --> 00:06:24,500
information on the element and the

00:06:23,240 --> 00:06:26,990
screen reader takes that and conveys

00:06:24,500 --> 00:06:29,389
this to the user to navigation reason

00:06:26,990 --> 00:06:30,889
the nice thing about these elements is

00:06:29,389 --> 00:06:33,320
that they also act as navigational

00:06:30,889 --> 00:06:35,599
landmarks so screen reader users can use

00:06:33,320 --> 00:06:37,270
a shortcut that's available to move

00:06:35,599 --> 00:06:39,610
between all of these different types of

00:06:37,270 --> 00:06:41,290
in HTML so all the sectioning elements

00:06:39,610 --> 00:06:44,320
like header and footer when I scoped to

00:06:41,290 --> 00:06:46,810
the body element the main element aside

00:06:44,320 --> 00:06:48,520
and nav can be used as navigational

00:06:46,810 --> 00:06:50,320
hooks for quickly and easily getting

00:06:48,520 --> 00:06:53,740
around the big kind of high-level chunks

00:06:50,320 --> 00:06:55,930
of a webpage doesn't stop there all of

00:06:53,740 --> 00:06:57,580
these elements or most HTML elements

00:06:55,930 --> 00:06:59,800
have this role information made

00:06:57,580 --> 00:07:03,850
available about them so the list

00:06:59,800 --> 00:07:06,670
elements have a roll of list and we can

00:07:03,850 --> 00:07:10,150
list are three items one do this to do

00:07:06,670 --> 00:07:11,530
that three do something else listen so

00:07:10,150 --> 00:07:13,600
the screen reader picks up the fact that

00:07:11,530 --> 00:07:15,460
it's a list in this case the browser

00:07:13,600 --> 00:07:18,730
also it counts up the list items inside

00:07:15,460 --> 00:07:20,260
the parent element and lets the screen

00:07:18,730 --> 00:07:22,330
reader user know how many list items

00:07:20,260 --> 00:07:24,130
there are inside the list it's one of

00:07:22,330 --> 00:07:25,540
these good reasons for using a list when

00:07:24,130 --> 00:07:27,100
you've got a collection of items like

00:07:25,540 --> 00:07:29,590
this is because it sets up the

00:07:27,100 --> 00:07:31,060
expectation of how much information is

00:07:29,590 --> 00:07:32,680
available on the screen to deal with

00:07:31,060 --> 00:07:35,050
something that most people can take in

00:07:32,680 --> 00:07:36,910
at a glance is conveyed to someone who

00:07:35,050 --> 00:07:38,740
can't see because the browser's counting

00:07:36,910 --> 00:07:40,240
up those list items inside the list and

00:07:38,740 --> 00:07:41,710
you know how many list items there are

00:07:40,240 --> 00:07:45,250
going to be as you progress through the

00:07:41,710 --> 00:07:47,590
content headings are another one all the

00:07:45,250 --> 00:07:49,960
H elements one through six have a role

00:07:47,590 --> 00:07:52,480
of heading and again that information is

00:07:49,960 --> 00:07:54,940
communicated along with the property in

00:07:52,480 --> 00:07:57,280
this case of the element it's level any

00:07:54,940 --> 00:07:59,220
level one again that just very simply

00:07:57,280 --> 00:08:02,200
gets communicated by the screen reader

00:07:59,220 --> 00:08:04,120
it also works with States of different

00:08:02,200 --> 00:08:07,690
elements so if we have a check box

00:08:04,120 --> 00:08:09,580
that's trackable then that information

00:08:07,690 --> 00:08:11,080
also gets exposed by the browser in the

00:08:09,580 --> 00:08:13,570
accessibility layer and the screen

00:08:11,080 --> 00:08:17,560
reader makes use of it I live in it you

00:08:13,570 --> 00:08:19,600
can check by subject okay so lots of

00:08:17,560 --> 00:08:21,190
information gets made available by the

00:08:19,600 --> 00:08:24,250
browser that the screen reader can query

00:08:21,190 --> 00:08:28,000
through the accessibility API s and do

00:08:24,250 --> 00:08:30,100
something useful with for users well one

00:08:28,000 --> 00:08:31,990
last example here which will take us

00:08:30,100 --> 00:08:34,120
through the rest of the talk in some

00:08:31,990 --> 00:08:36,370
respects and that's our accessibility

00:08:34,120 --> 00:08:38,200
talk favorite to the button element in

00:08:36,370 --> 00:08:40,360
this case we're going to take one that

00:08:38,200 --> 00:08:42,130
might be part of a video interface

00:08:40,360 --> 00:08:46,360
perhaps or an audio player interface

00:08:42,130 --> 00:08:48,160
just a simple play button using a button

00:08:46,360 --> 00:08:48,600
element that unsurprisingly has an

00:08:48,160 --> 00:08:53,580
element

00:08:48,600 --> 00:08:56,730
of a sort of role of button button and

00:08:53,580 --> 00:08:59,070
so the screen reader picks up a lot of

00:08:56,730 --> 00:09:00,660
information from that it picks up the

00:08:59,070 --> 00:09:02,490
role of button conveys that to the user

00:09:00,660 --> 00:09:04,020
in this case the button also has an

00:09:02,490 --> 00:09:06,120
accessible name which it just takes from

00:09:04,020 --> 00:09:07,440
the contents of the button element so if

00:09:06,120 --> 00:09:09,480
there were multiple buttons on the page

00:09:07,440 --> 00:09:11,130
we assumed they'd all have a different

00:09:09,480 --> 00:09:13,290
accessible name if they had a different

00:09:11,130 --> 00:09:16,040
purpose and again all that gets picked

00:09:13,290 --> 00:09:18,570
up by the screen reader from the browser

00:09:16,040 --> 00:09:19,980
so that was the past that's all the

00:09:18,570 --> 00:09:21,840
accessibility information that's baked

00:09:19,980 --> 00:09:24,090
into HTML and it's been like that pretty

00:09:21,840 --> 00:09:26,310
much since the beginning so we have a

00:09:24,090 --> 00:09:28,230
lot that we get for free if we can use

00:09:26,310 --> 00:09:31,140
HTML in the way that it was originally

00:09:28,230 --> 00:09:33,620
intended to in the present however we

00:09:31,140 --> 00:09:37,230
don't always have that luxury

00:09:33,620 --> 00:09:39,960
we often now create things that don't

00:09:37,230 --> 00:09:43,050
exist in HTML tab panels are probably

00:09:39,960 --> 00:09:45,390
the easiest example of that we also use

00:09:43,050 --> 00:09:47,670
frameworks and for a bunch of other

00:09:45,390 --> 00:09:49,170
reasons use div and span elements as the

00:09:47,670 --> 00:09:52,230
the primitive building blocks to create

00:09:49,170 --> 00:09:54,600
custom widgets custom components often

00:09:52,230 --> 00:09:56,820
to recreate existing HTML elements

00:09:54,600 --> 00:09:58,710
reasons best known to somebody else but

00:09:56,820 --> 00:10:01,830
that is the reality of it it's what we

00:09:58,710 --> 00:10:03,540
we find ourselves dealing with today so

00:10:01,830 --> 00:10:05,790
the problem with div and span elements

00:10:03,540 --> 00:10:08,190
is that unlike almost every other HTML

00:10:05,790 --> 00:10:10,590
element they don't have a particularly

00:10:08,190 --> 00:10:12,300
well communicated role in terms of

00:10:10,590 --> 00:10:13,890
accessibility they're pretty inert you

00:10:12,300 --> 00:10:15,930
can't focus on them you can't interact

00:10:13,890 --> 00:10:17,580
with them they have no accessibility

00:10:15,930 --> 00:10:19,230
information that gets communicated about

00:10:17,580 --> 00:10:21,930
them they just pretty much sit there and

00:10:19,230 --> 00:10:23,550
do absolutely nothing so if we see an

00:10:21,930 --> 00:10:26,160
example like this where we've got some

00:10:23,550 --> 00:10:27,840
divs and spans probably styled and

00:10:26,160 --> 00:10:30,480
scripted to behave and look like a

00:10:27,840 --> 00:10:32,370
toolbar all the screenreader is aware of

00:10:30,480 --> 00:10:36,810
it's just the text inside of some pretty

00:10:32,370 --> 00:10:37,980
inert elements all telling and so it

00:10:36,810 --> 00:10:39,300
doesn't matter what it looks like

00:10:37,980 --> 00:10:41,040
doesn't matter what it's scripted to

00:10:39,300 --> 00:10:42,420
behave like from the screenreader users

00:10:41,040 --> 00:10:44,100
point of view from the accessibility

00:10:42,420 --> 00:10:46,560
information in the browser point of view

00:10:44,100 --> 00:10:49,710
that's just two pieces of plain text and

00:10:46,560 --> 00:10:51,300
absolutely nothing more to it

00:10:49,710 --> 00:10:52,830
the good news is that we can polyfill

00:10:51,300 --> 00:10:55,650
some of this accessibility information

00:10:52,830 --> 00:11:00,000
when we need to using I'm sorry I meant

00:10:55,650 --> 00:11:00,550
in mention the Aria specification 1.2 is

00:11:00,000 --> 00:11:03,459
the current

00:11:00,550 --> 00:11:04,600
version of it they're working on a 1.1

00:11:03,459 --> 00:11:07,029
is the current version they're working

00:11:04,600 --> 00:11:09,130
on at one point - at the moment there's

00:11:07,029 --> 00:11:11,880
also another spec out there which

00:11:09,130 --> 00:11:14,589
instructs how to use Aria or which Aria

00:11:11,880 --> 00:11:15,760
roles can be used with specific HTML

00:11:14,589 --> 00:11:18,459
elements

00:11:15,760 --> 00:11:20,200
so those are two specs worth paying some

00:11:18,459 --> 00:11:24,100
attention to as you start thinking about

00:11:20,200 --> 00:11:26,769
adding accessibility information there's

00:11:24,100 --> 00:11:28,390
a role attribute in the Aria spec so

00:11:26,769 --> 00:11:30,630
where we just saw that lots of HTML

00:11:28,390 --> 00:11:33,550
elements have native roles of their own

00:11:30,630 --> 00:11:35,079
we can add a role in or even change a

00:11:33,550 --> 00:11:37,450
role if we need to using the role

00:11:35,079 --> 00:11:40,709
attribute as about 70 different values

00:11:37,450 --> 00:11:43,300
at the moment in the 1.1 specification

00:11:40,709 --> 00:11:44,950
pretty much every HTML element UI

00:11:43,300 --> 00:11:46,810
component you can think of there's a

00:11:44,950 --> 00:11:49,959
role for so radio buttons checkboxes

00:11:46,810 --> 00:11:51,820
tables rows cells even complex

00:11:49,959 --> 00:11:54,940
components like progress bars menu bars

00:11:51,820 --> 00:11:57,790
toolbars trees grids all sorts of things

00:11:54,940 --> 00:12:00,279
so roles that we can add in when they're

00:11:57,790 --> 00:12:01,959
not available in HTML there's a good

00:12:00,279 --> 00:12:06,399
amount of them to choose from in the

00:12:01,959 --> 00:12:08,680
Aria spec there are also 45 odd Aria

00:12:06,399 --> 00:12:10,390
prefixed attributes and these are the

00:12:08,680 --> 00:12:11,829
things that let us add in missing

00:12:10,390 --> 00:12:14,290
information about the state or other

00:12:11,829 --> 00:12:17,050
characteristics of whatever it is we're

00:12:14,290 --> 00:12:19,300
creating so Aria invalid if something's

00:12:17,050 --> 00:12:20,500
in invalid state re-record if it's

00:12:19,300 --> 00:12:23,290
needed for example if you're building

00:12:20,500 --> 00:12:26,230
forms aria-pressed to show that

00:12:23,290 --> 00:12:27,670
something is on or off re-expanded show

00:12:26,230 --> 00:12:30,430
it's expanded or collapsed like you

00:12:27,670 --> 00:12:31,990
might find in a disclosure widget lots

00:12:30,430 --> 00:12:33,970
of these that can be used to convey

00:12:31,990 --> 00:12:37,260
different sorts of information about the

00:12:33,970 --> 00:12:41,110
states or other properties of an element

00:12:37,260 --> 00:12:42,640
so if we take an example we'll go back

00:12:41,110 --> 00:12:44,529
to our button element our play button

00:12:42,640 --> 00:12:47,290
but this time recreate it using a span

00:12:44,529 --> 00:12:49,300
so as I said a span is pretty much dead

00:12:47,290 --> 00:12:52,300
in the water when you first start to use

00:12:49,300 --> 00:12:54,520
it so we've got a span it might look

00:12:52,300 --> 00:12:56,230
like a button but we're gonna have to do

00:12:54,520 --> 00:12:58,360
a lot of legwork to get it to work

00:12:56,230 --> 00:13:00,160
properly so we can start by adding the

00:12:58,360 --> 00:13:01,600
role attribute this time with a value of

00:13:00,160 --> 00:13:04,660
button because that's what we're trying

00:13:01,600 --> 00:13:07,089
to communicate at this point it's still

00:13:04,660 --> 00:13:08,440
a span in the Dom it's only in a

00:13:07,089 --> 00:13:10,329
structure known as the accessibility

00:13:08,440 --> 00:13:13,390
tree in the browser which is a sister

00:13:10,329 --> 00:13:14,259
structure to the dom that this is now to

00:13:13,390 --> 00:13:16,869
all intents and purpose

00:13:14,259 --> 00:13:18,369
is a button so just worth remembering

00:13:16,869 --> 00:13:20,739
there is that separation of concerns

00:13:18,369 --> 00:13:22,209
there but in the accessibility sense at

00:13:20,739 --> 00:13:24,759
least from the screen readers point of

00:13:22,209 --> 00:13:28,559
view our spam is now to all intents and

00:13:24,759 --> 00:13:30,729
purposes reported as being a button

00:13:28,559 --> 00:13:32,079
doesn't really behave like quanto or

00:13:30,729 --> 00:13:35,649
function like one we've got to make it

00:13:32,079 --> 00:13:37,539
focusable you can't focus on a span by

00:13:35,649 --> 00:13:39,879
default so we use tabindex with the

00:13:37,539 --> 00:13:41,709
value of 0 to make it focusable so if

00:13:39,879 --> 00:13:43,149
you're a keyboard user sighted or

00:13:41,709 --> 00:13:45,339
whether you use a screen reader you can

00:13:43,149 --> 00:13:46,720
now tab key onto this button which is a

00:13:45,339 --> 00:13:50,019
useful first step if you need to

00:13:46,720 --> 00:13:52,809
interact with it we then need to put in

00:13:50,019 --> 00:13:55,089
the interaction the mouse interaction is

00:13:52,809 --> 00:13:56,619
often the obvious step but we also need

00:13:55,089 --> 00:13:58,539
to make it function for keyboard users

00:13:56,619 --> 00:14:01,569
too so we listen out for the key codes

00:13:58,539 --> 00:14:03,489
13 and 32 because buttons are expected

00:14:01,569 --> 00:14:05,799
to respond to either the Enter key or

00:14:03,489 --> 00:14:09,549
the space key and then we just attach

00:14:05,799 --> 00:14:10,959
that into the expected functionality and

00:14:09,549 --> 00:14:12,609
what happens when we do all this is we

00:14:10,959 --> 00:14:17,259
get something that looks remarkably like

00:14:12,609 --> 00:14:20,350
our original button button which is

00:14:17,259 --> 00:14:21,939
probably why it's worth saying there's

00:14:20,350 --> 00:14:24,609
one piece of missing information from

00:14:21,939 --> 00:14:26,889
that and that is that as that button is

00:14:24,609 --> 00:14:29,439
toggled it changes visibly

00:14:26,889 --> 00:14:31,059
but that information isn't at the moment

00:14:29,439 --> 00:14:33,249
communicated by the browser to the

00:14:31,059 --> 00:14:36,220
screen reader and we can add that bit in

00:14:33,249 --> 00:14:37,869
by using the Aria pressed attribute when

00:14:36,220 --> 00:14:39,660
set to true it will indicate that the

00:14:37,869 --> 00:14:42,970
button is pressed when set to false

00:14:39,660 --> 00:14:44,379
it'll be the reverse state and this is

00:14:42,970 --> 00:14:46,419
one of the really good examples where

00:14:44,379 --> 00:14:48,850
this doesn't exist in HTML there is no

00:14:46,419 --> 00:14:53,079
equivalent natively in HTML you have to

00:14:48,850 --> 00:14:55,089
polyfill this using Aria we need to tuck

00:14:53,079 --> 00:14:56,889
in some functionality cuz why else have

00:14:55,089 --> 00:14:58,539
a button in this case we're just

00:14:56,889 --> 00:15:00,730
toggling the state of the aria-pressed

00:14:58,539 --> 00:15:02,589
attribute in response to the button

00:15:00,730 --> 00:15:03,819
being hit it's not doing anything much

00:15:02,589 --> 00:15:06,669
more interesting than that in our

00:15:03,819 --> 00:15:08,230
particular example you can also do

00:15:06,669 --> 00:15:11,079
something neat and that's hooking the

00:15:08,230 --> 00:15:14,019
functionality using a CSS attribute

00:15:11,079 --> 00:15:16,089
selector basically this is me just a

00:15:14,019 --> 00:15:18,119
neat way of changing the buttons visual

00:15:16,089 --> 00:15:20,559
appearance to show it's on or off state

00:15:18,119 --> 00:15:23,019
based on the state of the aria-pressed

00:15:20,559 --> 00:15:23,829
attribute it's really easy when you're

00:15:23,019 --> 00:15:25,629
using Aria

00:15:23,829 --> 00:15:27,709
to sort of forget about it because it's

00:15:25,629 --> 00:15:29,839
only consumed by screen readers

00:15:27,709 --> 00:15:31,519
from a visual point of view there's no

00:15:29,839 --> 00:15:33,319
obvious way when you're testing your

00:15:31,519 --> 00:15:34,790
page to know whether it's working or not

00:15:33,319 --> 00:15:37,370
you've got to test it with a screen

00:15:34,790 --> 00:15:38,899
reader by hooking the visual state into

00:15:37,370 --> 00:15:40,759
the accessibility state of the button

00:15:38,899 --> 00:15:42,410
you've got a pretty good early warning

00:15:40,759 --> 00:15:44,750
sign so if your visuals aren't working

00:15:42,410 --> 00:15:45,949
it's a clue to go and have a look and

00:15:44,750 --> 00:15:48,290
dig around and see if maybe the

00:15:45,949 --> 00:15:50,389
accessibility strand of the piece isn't

00:15:48,290 --> 00:15:52,459
working as well it also just simplifies

00:15:50,389 --> 00:15:54,170
code you need less classes or IDs or

00:15:52,459 --> 00:15:56,029
anything to hook the styles into so it's

00:15:54,170 --> 00:15:57,949
just a little bit of a neat trick there

00:15:56,029 --> 00:16:00,829
that's quite useful in a couple of

00:15:57,949 --> 00:16:03,079
different ways and so what we end up

00:16:00,829 --> 00:16:05,379
with now is a slightly different button

00:16:03,079 --> 00:16:09,379
to the first one that we looked at

00:16:05,379 --> 00:16:12,829
Huggle button that breasts press not

00:16:09,379 --> 00:16:14,360
press so it's now announced as a toggle

00:16:12,829 --> 00:16:15,769
button rather than just a

00:16:14,360 --> 00:16:17,060
straightforward button the screen reader

00:16:15,769 --> 00:16:19,850
recognizes it's something that can be

00:16:17,060 --> 00:16:22,310
toggled on or off and as it's interacted

00:16:19,850 --> 00:16:24,379
with its pressed or not pressed state is

00:16:22,310 --> 00:16:25,819
picked up and communicated by the screen

00:16:24,379 --> 00:16:27,709
reader so we've got something that is

00:16:25,819 --> 00:16:30,500
now for screen reader users a much more

00:16:27,709 --> 00:16:33,139
comparable experience as it is for

00:16:30,500 --> 00:16:35,569
sighted users of any description and

00:16:33,139 --> 00:16:36,889
we've done that partly by doing a fairly

00:16:35,569 --> 00:16:38,209
atrocious thing which are starting with

00:16:36,889 --> 00:16:40,610
a span instead of a perfectly good

00:16:38,209 --> 00:16:42,709
button element but we've also added in

00:16:40,610 --> 00:16:44,779
the pressed state in a way that we

00:16:42,709 --> 00:16:47,689
couldn't no matter how much native HTML

00:16:44,779 --> 00:16:48,980
we wanted to use and I am duty-bound to

00:16:47,689 --> 00:16:51,019
say that of course all of that could be

00:16:48,980 --> 00:16:52,279
done much more easily by using the

00:16:51,019 --> 00:16:53,269
button element in the first place and

00:16:52,279 --> 00:16:57,889
just throwing in the aria-pressed

00:16:53,269 --> 00:16:59,589
attribute you know so something else

00:16:57,889 --> 00:17:03,130
we're seeing in the present right now is

00:16:59,589 --> 00:17:06,260
more and more use of custom elements

00:17:03,130 --> 00:17:07,579
this is now hitting a lot of production

00:17:06,260 --> 00:17:10,459
level code

00:17:07,579 --> 00:17:12,159
British Gas for example just released a

00:17:10,459 --> 00:17:15,409
new version of their home page and

00:17:12,159 --> 00:17:17,179
sizable chunks of that now consists of

00:17:15,409 --> 00:17:20,809
components that are either custom

00:17:17,179 --> 00:17:23,750
elements or web components and so we can

00:17:20,809 --> 00:17:26,929
use Aria to help us polyfill this and

00:17:23,750 --> 00:17:29,240
also just to create simpler versions of

00:17:26,929 --> 00:17:32,539
things that don't exist natively in HTML

00:17:29,240 --> 00:17:35,840
at the moment so we can set up a pretty

00:17:32,539 --> 00:17:38,690
simple custom element constructor and

00:17:35,840 --> 00:17:40,970
we're going to use it to recreate our

00:17:38,690 --> 00:17:41,240
toggle button but in a way that can just

00:17:40,970 --> 00:17:43,070
be

00:17:41,240 --> 00:17:45,860
much more simply at the point you want

00:17:43,070 --> 00:17:47,540
to add it into the page so we're going

00:17:45,860 --> 00:17:49,610
to extend the button element because we

00:17:47,540 --> 00:17:52,640
want to take a lot of the goodness of

00:17:49,610 --> 00:17:56,000
the original button element we're going

00:17:52,640 --> 00:17:58,280
to hook it in so custom elements use

00:17:56,000 --> 00:18:00,110
something called a shadow root that's

00:17:58,280 --> 00:18:01,250
the point where all the code and the

00:18:00,110 --> 00:18:04,280
other bits and pieces we put into our

00:18:01,250 --> 00:18:06,530
custom element cook into what is entered

00:18:04,280 --> 00:18:07,670
into the page at the code level a good

00:18:06,530 --> 00:18:10,040
example of this is when you use the

00:18:07,670 --> 00:18:12,110
audio or video element when you use

00:18:10,040 --> 00:18:13,280
either of those things you never see the

00:18:12,110 --> 00:18:15,050
code that puts in all the buttons and

00:18:13,280 --> 00:18:17,390
the controls assuming you've got the

00:18:15,050 --> 00:18:19,070
controls attribute present the browser

00:18:17,390 --> 00:18:20,780
just renders them automatically and kind

00:18:19,070 --> 00:18:22,309
of takes care of business and to a

00:18:20,780 --> 00:18:24,559
certain extent that's pretty similar to

00:18:22,309 --> 00:18:26,330
how it works in custom elements and web

00:18:24,559 --> 00:18:27,679
components we can put a lot of code and

00:18:26,330 --> 00:18:29,540
a lot of features and functionality and

00:18:27,679 --> 00:18:31,160
bits and pieces in and that

00:18:29,540 --> 00:18:33,170
automatically gets generated if you go

00:18:31,160 --> 00:18:34,790
and inspect the code after you've used

00:18:33,170 --> 00:18:36,530
one of these custom elements you won't

00:18:34,790 --> 00:18:38,780
ever see all those bits and pieces that

00:18:36,530 --> 00:18:41,140
are going on under the hood so we start

00:18:38,780 --> 00:18:43,040
setting that up in the custom element

00:18:41,140 --> 00:18:45,110
we're just going to decant the

00:18:43,040 --> 00:18:47,330
functionality from the custom button

00:18:45,110 --> 00:18:49,670
example earlier into this just for

00:18:47,330 --> 00:18:51,530
efficiency sake more than anything so

00:18:49,670 --> 00:18:53,270
we're just adding in the ability for the

00:18:51,530 --> 00:18:57,590
button to change the state of the

00:18:53,270 --> 00:19:00,410
aria-pressed attribute we're using inner

00:18:57,590 --> 00:19:02,929
2n HTML to enable someone when they use

00:19:00,410 --> 00:19:04,790
this toggle button element to add in

00:19:02,929 --> 00:19:06,380
text exactly as you would with a button

00:19:04,790 --> 00:19:09,020
element just to add in the accessible

00:19:06,380 --> 00:19:11,720
name and so what we end up with

00:19:09,020 --> 00:19:14,840
something in the HTML is as simple as

00:19:11,720 --> 00:19:16,670
this it's just toggle - button we put a

00:19:14,840 --> 00:19:18,620
label in the middle play again exactly

00:19:16,670 --> 00:19:20,360
as we did with the button elements so

00:19:18,620 --> 00:19:22,730
it's very very simple to use we don't

00:19:20,360 --> 00:19:24,320
need to worry now every time we want to

00:19:22,730 --> 00:19:26,170
toggle button element about all the

00:19:24,320 --> 00:19:28,640
JavaScript all the other bits and pieces

00:19:26,170 --> 00:19:31,340
the reason for the - in the name is just

00:19:28,640 --> 00:19:32,540
a rule of creating a custom element it's

00:19:31,340 --> 00:19:34,610
necessary to distinguish them from

00:19:32,540 --> 00:19:36,050
original native HTML elements so when

00:19:34,610 --> 00:19:37,610
you create one it's got to have a hyphen

00:19:36,050 --> 00:19:41,750
or a dash in the middle of the name just

00:19:37,610 --> 00:19:43,490
to keep that separation of concerns and

00:19:41,750 --> 00:19:46,490
so what we get now for just putting that

00:19:43,490 --> 00:19:49,940
toggle button element into our HTML is

00:19:46,490 --> 00:19:51,380
effectively a re-creation of the one

00:19:49,940 --> 00:19:52,970
we've been seeing pretty much all the

00:19:51,380 --> 00:19:55,090
way through this talk please talk about

00:19:52,970 --> 00:19:59,750
nut press press

00:19:55,090 --> 00:20:01,039
not press and of course the nice thing

00:19:59,750 --> 00:20:04,039
about that is because it's a custom

00:20:01,039 --> 00:20:05,539
element it's reusable so anytime anybody

00:20:04,039 --> 00:20:07,460
wants to toggle element anywhere on the

00:20:05,539 --> 00:20:09,470
site they're just got to use that HTML

00:20:07,460 --> 00:20:12,110
element and providing they call in the

00:20:09,470 --> 00:20:14,840
custom element script behind it we can

00:20:12,110 --> 00:20:17,890
pretty much call that done except for

00:20:14,840 --> 00:20:20,090
one little thing if you do look at the

00:20:17,890 --> 00:20:21,710
render code as you look at it in the Dom

00:20:20,090 --> 00:20:24,620
what you'll find is is that the

00:20:21,710 --> 00:20:26,419
aria-pressed attribute has leaked out of

00:20:24,620 --> 00:20:28,039
the custom element code all the stuff

00:20:26,419 --> 00:20:30,590
that's supposed to be hidden away and

00:20:28,039 --> 00:20:32,240
not available for inspection has

00:20:30,590 --> 00:20:35,360
actually made its way into the Dom for

00:20:32,240 --> 00:20:38,120
this element it's perhaps not a big deal

00:20:35,360 --> 00:20:39,889
some people you know are very stringent

00:20:38,120 --> 00:20:43,730
about keeping their code clean and tidy

00:20:39,889 --> 00:20:46,039
and keeping concerns separated and so it

00:20:43,730 --> 00:20:47,960
perhaps isn't ideal in terms of you know

00:20:46,039 --> 00:20:50,210
keeping custom element code hidden away

00:20:47,960 --> 00:20:53,210
in the way that's intended when you use

00:20:50,210 --> 00:20:55,070
them and so that brings us to our future

00:20:53,210 --> 00:20:58,159
we haven't solved that particular

00:20:55,070 --> 00:21:00,620
problem but there is at least one thing

00:20:58,159 --> 00:21:02,029
underway that's aiming to do that and

00:21:00,620 --> 00:21:05,480
it's called the accessibility object

00:21:02,029 --> 00:21:07,789
model the aom it's a JavaScript API or

00:21:05,480 --> 00:21:11,389
at least it will be when it it comes to

00:21:07,789 --> 00:21:13,610
fruition it's being developed by the web

00:21:11,389 --> 00:21:16,580
incubates a community group from the w3c

00:21:13,610 --> 00:21:18,919
it's available on github please do go

00:21:16,580 --> 00:21:20,809
take a look check it out wade in and add

00:21:18,919 --> 00:21:24,559
your comments because there's a lot to

00:21:20,809 --> 00:21:28,159
think about when it comes to this phase

00:21:24,559 --> 00:21:30,440
one a of this aims to introduce Aria

00:21:28,159 --> 00:21:32,389
element and attribute reflection so at

00:21:30,440 --> 00:21:34,010
the moment when we're using custom

00:21:32,389 --> 00:21:36,110
elements or whether we're just creating

00:21:34,010 --> 00:21:38,570
custom widgets and components of any

00:21:36,110 --> 00:21:42,019
kind we have to use JavaScript along the

00:21:38,570 --> 00:21:43,760
lines of elements s attributes and then

00:21:42,019 --> 00:21:45,529
give it the name of the role and the

00:21:43,760 --> 00:21:47,960
value that we want to give the attribute

00:21:45,529 --> 00:21:49,639
phase one of the aom we'll just switch

00:21:47,960 --> 00:21:52,010
that around so the syntax becomes a lot

00:21:49,639 --> 00:21:56,149
more familiar we can just use element

00:21:52,010 --> 00:21:59,059
dot role equals and then the the value

00:21:56,149 --> 00:22:00,470
of the the roles so phase one of this I

00:21:59,059 --> 00:22:02,149
think has a lot of Merit it'll make

00:22:00,470 --> 00:22:03,679
coding just a lot simpler a lot more

00:22:02,149 --> 00:22:08,080
consistent with the ways that we tend to

00:22:03,679 --> 00:22:10,850
do things currently so so far so good

00:22:08,080 --> 00:22:13,460
phase 1 B I think is another good thing

00:22:10,850 --> 00:22:15,320
it means that particularly when we

00:22:13,460 --> 00:22:17,659
create custom elements or web components

00:22:15,320 --> 00:22:19,429
we'll be able to set certain immutable

00:22:17,659 --> 00:22:22,129
accessibility characteristics at the

00:22:19,429 --> 00:22:23,330
time the custom element is created and

00:22:22,129 --> 00:22:26,239
this is exactly what the browser does

00:22:23,330 --> 00:22:28,249
now when it creates the main element for

00:22:26,239 --> 00:22:29,960
example it sets the role of main and

00:22:28,249 --> 00:22:32,570
that doesn't change to all intents and

00:22:29,960 --> 00:22:34,580
purposes that's a defined characteristic

00:22:32,570 --> 00:22:36,039
at the time the element is rendered so

00:22:34,580 --> 00:22:38,570
we'll be able to do things like that

00:22:36,039 --> 00:22:40,639
we'll also be able to change

00:22:38,570 --> 00:22:43,909
accessibility characteristics in custom

00:22:40,639 --> 00:22:45,320
elements based on user interaction so

00:22:43,909 --> 00:22:46,700
it'll make it easier to do things like

00:22:45,320 --> 00:22:49,489
change the state of the aria-pressed

00:22:46,700 --> 00:22:51,789
attribute if we need to when the time

00:22:49,489 --> 00:22:55,299
comes so again I think the IOM is is

00:22:51,789 --> 00:22:58,429
looking to introduce some useful things

00:22:55,299 --> 00:22:59,749
if they get as far as phase 2 what will

00:22:58,429 --> 00:23:02,090
happen is they're gonna start looking at

00:22:59,749 --> 00:23:04,190
user events so we have lots of events

00:23:02,090 --> 00:23:06,619
for all kinds of interaction keyboard

00:23:04,190 --> 00:23:08,929
mouse all the rest of it but there are a

00:23:06,619 --> 00:23:10,960
few gaps when it comes to particularly

00:23:08,929 --> 00:23:14,629
accessibility and almost exclusively

00:23:10,960 --> 00:23:17,450
mobile so there are no easy ways to

00:23:14,629 --> 00:23:18,950
emulate increment and decrement from an

00:23:17,450 --> 00:23:20,749
accessibility point of view and we see

00:23:18,950 --> 00:23:22,179
this all the time in components on

00:23:20,749 --> 00:23:25,429
touchscreen devices

00:23:22,179 --> 00:23:26,749
similarly with scrolling pages this is

00:23:25,429 --> 00:23:29,529
applicable right across the board but

00:23:26,749 --> 00:23:31,190
again especially on touchscreen devices

00:23:29,529 --> 00:23:32,809
when you use a screen reader

00:23:31,190 --> 00:23:36,109
particularly on a touchscreen device

00:23:32,809 --> 00:23:38,960
your gesture set changes completely and

00:23:36,109 --> 00:23:40,879
so hooking into you know a flick up or a

00:23:38,960 --> 00:23:43,369
flick down to increment or decrement

00:23:40,879 --> 00:23:45,289
something or a pre three-fingered scroll

00:23:43,369 --> 00:23:47,869
up or scroll down swipe up or swipe down

00:23:45,289 --> 00:23:49,159
to scroll we want to be able to do that

00:23:47,869 --> 00:23:52,450
so again there are some pretty good use

00:23:49,159 --> 00:23:55,249
cases for for looking at these events

00:23:52,450 --> 00:23:58,249
phase 3 is where things start to get a

00:23:55,249 --> 00:23:59,869
little bit interesting shall we say this

00:23:58,249 --> 00:24:02,480
is where it's going to enable us as

00:23:59,869 --> 00:24:06,049
developers to start interacting with the

00:24:02,480 --> 00:24:07,669
browser's accessibility tree directly at

00:24:06,049 --> 00:24:09,379
the moment the browser is the only thing

00:24:07,669 --> 00:24:11,149
that has control over that tree it

00:24:09,379 --> 00:24:12,619
renders the accessibility tree when it

00:24:11,149 --> 00:24:14,899
creates the dom and does all with other

00:24:12,619 --> 00:24:17,539
bits and pieces and it manages that

00:24:14,899 --> 00:24:20,210
entire sister relationship between the

00:24:17,539 --> 00:24:20,510
two structures if phase 3 comes along

00:24:20,210 --> 00:24:22,220
for the

00:24:20,510 --> 00:24:25,309
so we're gonna be able to interact with

00:24:22,220 --> 00:24:28,040
that for ourselves and in some respects

00:24:25,309 --> 00:24:30,500
I think that's quite useful for example

00:24:28,040 --> 00:24:33,260
one of the techniques we see a lot of is

00:24:30,500 --> 00:24:34,880
hidden text on a page purely for the

00:24:33,260 --> 00:24:37,070
benefit of a screen reader user it might

00:24:34,880 --> 00:24:40,460
add a bit of context to your link text

00:24:37,070 --> 00:24:42,830
perhaps or quiet instruction to help

00:24:40,460 --> 00:24:44,750
someone do something the problem with

00:24:42,830 --> 00:24:46,400
that is that we most commonly use CSS to

00:24:44,750 --> 00:24:47,750
hide that information but if you happen

00:24:46,400 --> 00:24:49,160
to be someone who doesn't use the

00:24:47,750 --> 00:24:51,140
stylesheet provided by the website

00:24:49,160 --> 00:24:53,750
you're using your own stylesheet perhaps

00:24:51,140 --> 00:24:56,270
to solve a readability or a low-vision

00:24:53,750 --> 00:24:59,179
problem that text automatically becomes

00:24:56,270 --> 00:25:01,100
visible and it may not be as useful to

00:24:59,179 --> 00:25:02,900
someone who has some sense of vision and

00:25:01,100 --> 00:25:05,120
so it starts to get you know potentially

00:25:02,900 --> 00:25:06,770
a little bit messy if we could actually

00:25:05,120 --> 00:25:08,780
just inject that information straight

00:25:06,770 --> 00:25:10,250
into the accessibility tree where it

00:25:08,780 --> 00:25:13,040
would pretty much only be used by screen

00:25:10,250 --> 00:25:16,190
readers in that context that's perhaps a

00:25:13,040 --> 00:25:18,500
much neater way of doing it the concern

00:25:16,190 --> 00:25:20,660
is that we could end up with two

00:25:18,500 --> 00:25:23,450
entirely independent things going on on

00:25:20,660 --> 00:25:25,280
the page almost a regression back to the

00:25:23,450 --> 00:25:26,630
time in the 1990s where you've got one

00:25:25,280 --> 00:25:29,090
thing happening in the DOM

00:25:26,630 --> 00:25:30,830
and a completely other thing happening

00:25:29,090 --> 00:25:32,600
in the accessibility layer so two almost

00:25:30,830 --> 00:25:35,600
independent renderings of the same

00:25:32,600 --> 00:25:38,390
content and depending on how divergent

00:25:35,600 --> 00:25:40,190
they get we could be looking right back

00:25:38,390 --> 00:25:43,309
at all the problems we solved 20 odd

00:25:40,190 --> 00:25:45,380
years ago I'm in two minds of this part

00:25:43,309 --> 00:25:47,540
of me recognises the potential for the

00:25:45,380 --> 00:25:48,710
danger in that the other half of me

00:25:47,540 --> 00:25:50,030
thinks that if you're the sort of

00:25:48,710 --> 00:25:51,230
developer that has got yourself to the

00:25:50,030 --> 00:25:52,760
point where you've understood Aria

00:25:51,230 --> 00:25:54,440
browser mechanics accessibility

00:25:52,760 --> 00:25:56,960
mechanics and the aom to the point

00:25:54,440 --> 00:25:58,130
you're able to use it there's probably a

00:25:56,960 --> 00:25:59,240
fairly good chance you're not going to

00:25:58,130 --> 00:25:59,780
use it to do anything really that's

00:25:59,240 --> 00:26:03,530
stupid

00:25:59,780 --> 00:26:07,160
that's my hope anyway but we'll see the

00:26:03,530 --> 00:26:10,490
last part is that developers will have

00:26:07,160 --> 00:26:11,809
access to the computed accessibility

00:26:10,490 --> 00:26:13,700
tree so you'll be able to walk the tree

00:26:11,809 --> 00:26:15,500
pretty much the same way that we can

00:26:13,700 --> 00:26:17,059
walk the Dom in the same way that we get

00:26:15,500 --> 00:26:18,740
computed styles for things we'll be able

00:26:17,059 --> 00:26:20,360
to get the computed accessibility

00:26:18,740 --> 00:26:23,870
information for things and this

00:26:20,360 --> 00:26:26,450
completes the plans for the AOM at the

00:26:23,870 --> 00:26:27,559
moment there was an earlier version of

00:26:26,450 --> 00:26:29,900
the AOM that used something called

00:26:27,559 --> 00:26:31,490
accessible node that did have some

00:26:29,900 --> 00:26:33,490
implementation in a couple of browsers

00:26:31,490 --> 00:26:35,440
behind the flag but they've rewritten it

00:26:33,490 --> 00:26:37,450
this current version now with the

00:26:35,440 --> 00:26:39,790
element and attribute reflection doesn't

00:26:37,450 --> 00:26:42,940
yet have any implementation so it's

00:26:39,790 --> 00:26:45,310
still very very early phases and one of

00:26:42,940 --> 00:26:46,780
the good things about that as I

00:26:45,310 --> 00:26:48,220
mentioned just now is that it gives us

00:26:46,780 --> 00:26:49,900
all the chance as the developer

00:26:48,220 --> 00:26:51,640
community who will end up using this to

00:26:49,900 --> 00:26:53,110
feed into that process and one of the

00:26:51,640 --> 00:26:56,890
big questions that we really need to

00:26:53,110 --> 00:26:59,080
answer is that of privacy for the first

00:26:56,890 --> 00:27:02,260
time with this we'll have an absolutely

00:26:59,080 --> 00:27:04,980
concrete way of fingerprinting someone

00:27:02,260 --> 00:27:08,320
who has a visual or reading disability

00:27:04,980 --> 00:27:10,990
Aria is only really consumed by screen

00:27:08,320 --> 00:27:12,520
readers screen readers are majority of

00:27:10,990 --> 00:27:14,290
lis only used by blind or very low

00:27:12,520 --> 00:27:15,810
vision people and sometimes by people

00:27:14,290 --> 00:27:19,240
with reading disabilities like dyslexia

00:27:15,810 --> 00:27:20,880
or concentration difficulties such as

00:27:19,240 --> 00:27:23,080
people who here on the autistic spectrum

00:27:20,880 --> 00:27:26,230
but for the first time it would be

00:27:23,080 --> 00:27:28,300
absolutely unequivocally possible for a

00:27:26,230 --> 00:27:30,490
developer or creator of some JavaScript

00:27:28,300 --> 00:27:32,520
to know that the person consuming the

00:27:30,490 --> 00:27:34,750
website is a person with a disability

00:27:32,520 --> 00:27:36,850
and that cross is a pretty fundamental

00:27:34,750 --> 00:27:39,820
line in terms of personal information

00:27:36,850 --> 00:27:42,190
and privacy any other concept like

00:27:39,820 --> 00:27:43,990
whether someone uses a keyboard whether

00:27:42,190 --> 00:27:46,420
they adjust any other feature on the

00:27:43,990 --> 00:27:48,280
website cannot be tied exclusively to

00:27:46,420 --> 00:27:51,160
having a disability this will be very

00:27:48,280 --> 00:27:53,350
very different the argument of course

00:27:51,160 --> 00:27:55,480
goes well if we know someone's using a

00:27:53,350 --> 00:27:58,330
screen reader then we can improve the

00:27:55,480 --> 00:28:00,100
user experience for that audience the

00:27:58,330 --> 00:28:01,420
problem with that is as I just mentioned

00:28:00,100 --> 00:28:02,920
we don't know why someone's using a

00:28:01,420 --> 00:28:04,420
screen reader we could play the numbers

00:28:02,920 --> 00:28:07,360
and say sure most people are going to be

00:28:04,420 --> 00:28:10,840
blind but I know at least one screen

00:28:07,360 --> 00:28:13,390
reader user on the autistic spectrum who

00:28:10,840 --> 00:28:14,830
really struggles when things are adapted

00:28:13,390 --> 00:28:16,630
for screen reader users who are blind

00:28:14,830 --> 00:28:19,840
because he's a screen reader user who's

00:28:16,630 --> 00:28:22,180
sighted so even if we decide to do that

00:28:19,840 --> 00:28:23,890
customization trying to work out who or

00:28:22,180 --> 00:28:24,940
what we're customizing for is really

00:28:23,890 --> 00:28:27,550
really difficult

00:28:24,940 --> 00:28:29,080
and then that's fine as long as

00:28:27,550 --> 00:28:30,670
everybody's got really great intentions

00:28:29,080 --> 00:28:32,620
but I really don't want every

00:28:30,670 --> 00:28:34,180
advertising tracker script on the planet

00:28:32,620 --> 00:28:35,950
knowing I've got a disability and

00:28:34,180 --> 00:28:37,210
assuming that they know what that means

00:28:35,950 --> 00:28:38,890
in terms of what they want to advertise

00:28:37,210 --> 00:28:40,570
at me or what information they're going

00:28:38,890 --> 00:28:42,190
to sell about me and that more than

00:28:40,570 --> 00:28:45,130
anything is the kind of really really

00:28:42,190 --> 00:28:46,420
scary bit about the AOM so lots of

00:28:45,130 --> 00:28:49,450
fundamental engineering question

00:28:46,420 --> 00:28:51,760
to answer some philosophical ones to

00:28:49,450 --> 00:28:53,320
answer and again I really do encourage

00:28:51,760 --> 00:28:56,380
you please go take a look at that github

00:28:53,320 --> 00:28:58,780
repo Chuck in your thoughts because the

00:28:56,380 --> 00:29:00,460
w3c more than anything needs input from

00:28:58,780 --> 00:29:02,710
developers you pick up their specs at

00:29:00,460 --> 00:29:04,720
some point in the future and use them in

00:29:02,710 --> 00:29:09,370
their day to day jobs so your input is

00:29:04,720 --> 00:29:11,530
incredibly invaluable so just to finish

00:29:09,370 --> 00:29:13,600
more or less where I started which I

00:29:11,530 --> 00:29:15,970
suppose is apt for a time travelers

00:29:13,600 --> 00:29:17,680
guide to anything to be really good

00:29:15,970 --> 00:29:19,510
developers in this day and age we need

00:29:17,680 --> 00:29:21,970
to understand all of this we need to

00:29:19,510 --> 00:29:24,460
understand when and how we can get as

00:29:21,970 --> 00:29:26,650
much as we can for free from HTML we

00:29:24,460 --> 00:29:28,270
need to understand what we can do to

00:29:26,650 --> 00:29:29,950
fill in the gaps when that isn't

00:29:28,270 --> 00:29:32,110
possible because this is the real world

00:29:29,950 --> 00:29:33,970
and HTML isn't always possible in the

00:29:32,110 --> 00:29:35,620
best way and we need to look to the

00:29:33,970 --> 00:29:38,020
future and to the solutions that are

00:29:35,620 --> 00:29:39,340
coming our way that in a few years are

00:29:38,020 --> 00:29:41,440
going to be part of our toolkits

00:29:39,340 --> 00:29:43,390
and we need to try and help shape those

00:29:41,440 --> 00:29:45,580
as much as anything so to get

00:29:43,390 --> 00:29:47,800
accessibility right whether it was 20

00:29:45,580 --> 00:29:50,260
years ago in the current age or for the

00:29:47,800 --> 00:29:51,970
next 10 years we need to pull on all

00:29:50,260 --> 00:29:54,400
these skills and all this knowledge and

00:29:51,970 --> 00:29:56,140
draw on the best of all of them to try

00:29:54,400 --> 00:29:58,420
and make things as accessible as we can

00:29:56,140 --> 00:29:59,400
be so use the best of the past the

00:29:58,420 --> 00:30:01,750
present and the future

00:29:59,400 --> 00:30:09,380
thank you very much

00:30:01,750 --> 00:30:09,380
[Applause]

00:30:17,220 --> 00:30:28,110
yes it has certainly in reasonably

00:30:22,820 --> 00:30:29,250
well-funded Western countries back in

00:30:28,110 --> 00:30:32,850
the sort of time you were referring to

00:30:29,250 --> 00:30:35,420
sort of in the 90s early 2000s windows

00:30:32,850 --> 00:30:37,770
screen readers were proprietary and

00:30:35,420 --> 00:30:41,040
there their cost was in this one

00:30:37,770 --> 00:30:42,690
hundreds of pounds bracket Apple sort of

00:30:41,040 --> 00:30:43,950
really started changing that game when

00:30:42,690 --> 00:30:47,190
it introduced voice over which is

00:30:43,950 --> 00:30:48,030
integrated into all its products so it

00:30:47,190 --> 00:30:49,530
comes for free

00:30:48,030 --> 00:30:51,780
the catch of course is that Apple

00:30:49,530 --> 00:30:53,730
products cost a good deal more than you

00:30:51,780 --> 00:30:55,650
or Windows projects so so that's all

00:30:53,730 --> 00:30:57,420
part of the problem they started there

00:30:55,650 --> 00:31:01,470
we can do this as an integrated part of

00:30:57,420 --> 00:31:04,590
our operating system NVDA is an open

00:31:01,470 --> 00:31:06,990
source screen reader for Windows evolved

00:31:04,590 --> 00:31:09,000
roughly the same sort of time courtesy

00:31:06,990 --> 00:31:12,210
of a bunch of very talented developers

00:31:09,000 --> 00:31:14,960
in Australia and so that started to

00:31:12,210 --> 00:31:18,150
change the game for for Windows users

00:31:14,960 --> 00:31:20,970
Windows 10 the narrator screen reader is

00:31:18,150 --> 00:31:22,920
built into Windows 10 and over the past

00:31:20,970 --> 00:31:24,720
couple of years that's actually now

00:31:22,920 --> 00:31:26,340
become something much more akin to a

00:31:24,720 --> 00:31:29,820
fully fledged screen reader it was there

00:31:26,340 --> 00:31:32,070
since I think XP but it was it was about

00:31:29,820 --> 00:31:34,710
as useful as the speech synthesis api is

00:31:32,070 --> 00:31:35,940
it could talk at you but had none of the

00:31:34,710 --> 00:31:37,740
characteristics of a screen reader

00:31:35,940 --> 00:31:40,650
whereas now it's it's actually pretty

00:31:37,740 --> 00:31:42,450
damn good so just the availability of

00:31:40,650 --> 00:31:44,460
free and or integrated options has

00:31:42,450 --> 00:31:45,600
changed that completely there are a lot

00:31:44,460 --> 00:31:47,070
of parts of the world of course where

00:31:45,600 --> 00:31:48,690
you know even getting the latest

00:31:47,070 --> 00:31:50,670
operating system and therefore you know

00:31:48,690 --> 00:31:52,320
an integrated in a thing is still you

00:31:50,670 --> 00:31:54,330
know much of a challenge but yep

00:31:52,320 --> 00:31:59,550
certainly for here you know it's it's

00:31:54,330 --> 00:32:03,120
made a hell of a difference yes they do

00:31:59,550 --> 00:32:05,540
I forget the stats a few are a concern

00:32:03,120 --> 00:32:08,430
link afterwards there's a web aim do a

00:32:05,540 --> 00:32:10,230
every couple of years ish survey of

00:32:08,430 --> 00:32:12,260
screen reader users one of the stats

00:32:10,230 --> 00:32:14,930
they included in there is how often

00:32:12,260 --> 00:32:17,840
things are updated and

00:32:14,930 --> 00:32:19,310
even because lots and lots of home users

00:32:17,840 --> 00:32:21,110
are shifting to the free or integrated

00:32:19,310 --> 00:32:23,720
ones which tend to automatically update

00:32:21,110 --> 00:32:24,920
they're sort of taken care of but what

00:32:23,720 --> 00:32:27,100
we're starting to see is is that

00:32:24,920 --> 00:32:28,730
businesses are now the kind of the main

00:32:27,100 --> 00:32:30,560
purchasers if you like if the

00:32:28,730 --> 00:32:32,690
proprietary ones and although they're

00:32:30,560 --> 00:32:34,700
not excellent they're keeping things up

00:32:32,690 --> 00:32:36,500
to date they've often got more money to

00:32:34,700 --> 00:32:38,960
throw at it than home users used to so

00:32:36,500 --> 00:32:41,090
that gap is closing I will add that

00:32:38,960 --> 00:32:43,040
actually jaws which is the still the

00:32:41,090 --> 00:32:44,330
market leader screen reader it's one of

00:32:43,040 --> 00:32:47,060
the proprietary ones in the states

00:32:44,330 --> 00:32:49,670
they've just launched I think it's a $90

00:32:47,060 --> 00:32:51,560
a year home users sort of you know

00:32:49,670 --> 00:32:54,110
office 365 kind of based idea

00:32:51,560 --> 00:32:55,700
subscription so if they introduced that

00:32:54,110 --> 00:32:56,930
sort of around the world then that will

00:32:55,700 --> 00:32:58,940
fundamentally change that as well

00:32:56,930 --> 00:33:00,680
because you know ninety dollars a year

00:32:58,940 --> 00:33:03,860
as opposed to you know several hundred

00:33:00,680 --> 00:33:05,630
dollars to purchase outright you know in

00:33:03,860 --> 00:33:07,370
itself will help close that gap a bit

00:33:05,630 --> 00:33:24,650
more so it's not perfect but it's

00:33:07,370 --> 00:33:28,280
closing from a technical point of view

00:33:24,650 --> 00:33:30,350
it is I think it's it's one I use out of

00:33:28,280 --> 00:33:33,220
choice obviously I'm fortunate enough

00:33:30,350 --> 00:33:35,600
that I can afford to use it but but if I

00:33:33,220 --> 00:33:37,670
haven't done any thorough side-by-side

00:33:35,600 --> 00:33:40,520
comparison but I'd switch pretty

00:33:37,670 --> 00:33:44,170
routinely between jaws narrator and nvd

00:33:40,520 --> 00:33:44,170
Windows is my choice

00:33:48,000 --> 00:33:53,170
yeah and actually now if you if you are

00:33:51,190 --> 00:33:55,390
advised by the access to work team here

00:33:53,170 --> 00:33:57,460
in the UK you'll almost always get told

00:33:55,390 --> 00:33:59,830
to use and video on Windows or voiceover

00:33:57,460 --> 00:34:02,680
on a Mac partly because they haven't got

00:33:59,830 --> 00:34:04,360
the funding to pay for yours either so

00:34:02,680 --> 00:34:06,550
yeah and then ask me the end of the NVDA

00:34:04,360 --> 00:34:08,350
NVDA team did have you know a lot to

00:34:06,550 --> 00:34:11,500
prove in that respect organizations get

00:34:08,350 --> 00:34:14,110
really twitchy you know around whether

00:34:11,500 --> 00:34:15,490
open-source is a sustainable model and

00:34:14,110 --> 00:34:17,050
actually now they've proved they've got

00:34:15,490 --> 00:34:19,090
the community they've got funding from

00:34:17,050 --> 00:34:31,960
the likes of Mozilla Microsoft so on so

00:34:19,090 --> 00:34:34,780
yeah they've done a hell of a job yeah

00:34:31,960 --> 00:34:36,669
so web via a really big focus and there

00:34:34,780 --> 00:34:38,320
are lots of things going on one thing

00:34:36,669 --> 00:34:41,230
I'm working on at the moment is putting

00:34:38,320 --> 00:34:43,090
together an inclusive X are actually

00:34:41,230 --> 00:34:44,679
which is that the name that w3c has come

00:34:43,090 --> 00:34:47,440
up for a combination of virtual and

00:34:44,679 --> 00:34:48,850
augmented reality but a workshop that

00:34:47,440 --> 00:34:50,620
will bring together people from all of

00:34:48,850 --> 00:34:53,770
those fields accessibility inclusive

00:34:50,620 --> 00:34:55,120
design to start looking at you know some

00:34:53,770 --> 00:34:59,200
of the problems some of the solutions

00:34:55,120 --> 00:35:02,890
there's already work going on looking at

00:34:59,200 --> 00:35:05,200
captions for example in 360 and or VR

00:35:02,890 --> 00:35:07,150
environments you know how do we handle

00:35:05,200 --> 00:35:09,430
that when the speech could be coming

00:35:07,150 --> 00:35:10,780
from anywhere around you how do you

00:35:09,430 --> 00:35:12,490
indicate that to someone who's deaf and

00:35:10,780 --> 00:35:14,320
can't actually hear the orientation so

00:35:12,490 --> 00:35:15,700
what what visual signals can we put in

00:35:14,320 --> 00:35:17,440
place to say you know the voice is

00:35:15,700 --> 00:35:18,940
coming from over there as opposed to you

00:35:17,440 --> 00:35:23,110
know somewhere within your viewport at

00:35:18,940 --> 00:35:25,870
that time looking at things like how we

00:35:23,110 --> 00:35:26,920
handle audio description in real time

00:35:25,870 --> 00:35:28,990
and this is what we're so interesting

00:35:26,920 --> 00:35:31,480
about Ian's idea with the the speech

00:35:28,990 --> 00:35:33,220
synthesis API I'm pretty convinced that

00:35:31,480 --> 00:35:35,230
the you know writing text descriptions

00:35:33,220 --> 00:35:36,820
in the kind of old-school way that we do

00:35:35,230 --> 00:35:38,470
for things on the web at the moment is

00:35:36,820 --> 00:35:40,180
just never going to work inside a

00:35:38,470 --> 00:35:42,130
constantly evolving or updating virtual

00:35:40,180 --> 00:35:43,870
reality so the question is can we plug

00:35:42,130 --> 00:35:45,880
in some AI that consumes the virtual

00:35:43,870 --> 00:35:48,160
reality to get the data from it hook it

00:35:45,880 --> 00:35:50,080
into something like the speech API to

00:35:48,160 --> 00:35:52,450
spit out some some useful descriptions

00:35:50,080 --> 00:35:54,820
of the environment around you can we use

00:35:52,450 --> 00:35:57,070
things like vibration API to make haptic

00:35:54,820 --> 00:35:58,780
feedback possible to enhance the

00:35:57,070 --> 00:36:00,400
experience but be you know for

00:35:58,780 --> 00:36:02,170
hearing-impaired people again can we

00:36:00,400 --> 00:36:04,180
do more to notify them about events that

00:36:02,170 --> 00:36:05,829
are going on around them so it's a it's

00:36:04,180 --> 00:36:07,749
a really early stages area at the moment

00:36:05,829 --> 00:36:08,619
it's yeah a nice time to be involved in

00:36:07,749 --> 00:36:21,130
it really because there's a lot of

00:36:08,619 --> 00:36:23,619
exciting possibilities no so the canvas

00:36:21,130 --> 00:36:25,749
element other than the canvas element

00:36:23,619 --> 00:36:29,799
itself that hooked into the Dom is

00:36:25,749 --> 00:36:33,430
entirely JavaScript and so it has no no

00:36:29,799 --> 00:36:36,390
semantics no no nothing I haven't looked

00:36:33,430 --> 00:36:38,230
at it for a while good friend and

00:36:36,390 --> 00:36:40,869
recently a colleague of mine Steve

00:36:38,230 --> 00:36:43,059
Faulkner did some blogging about it a

00:36:40,869 --> 00:36:44,799
couple of years ago and the only really

00:36:43,059 --> 00:36:46,240
way a real way to deal with canvas

00:36:44,799 --> 00:36:48,490
accessibility at the moment is to build

00:36:46,240 --> 00:36:52,359
a kind of fallback Dom inside it which

00:36:48,490 --> 00:36:56,049
is limited at best and the same for

00:36:52,359 --> 00:37:03,940
WebGL yeah in and of itself it has

00:36:56,049 --> 00:37:05,019
nothing to work with unfortunately so I

00:37:03,940 --> 00:37:06,640
I will say this with complete

00:37:05,019 --> 00:37:08,859
transparency that I worked on it for a

00:37:06,640 --> 00:37:11,289
long time but the govern UK website if

00:37:08,859 --> 00:37:14,460
you want the accessibility at scale I

00:37:11,289 --> 00:37:17,470
think still does a really good job of it

00:37:14,460 --> 00:37:19,480
and and they're kind of putting user

00:37:17,470 --> 00:37:23,410
needs first has been absolutely

00:37:19,480 --> 00:37:29,470
fundamental in them achieving that other

00:37:23,410 --> 00:37:31,420
websites I think that's hard to say you

00:37:29,470 --> 00:37:32,890
the whole accessibility is really hard

00:37:31,420 --> 00:37:36,099
to come by there there are things that

00:37:32,890 --> 00:37:38,849
have got good features supermarkets

00:37:36,099 --> 00:37:43,599
actually don't tend to do too badly

00:37:38,849 --> 00:37:45,160
though they tend to do quite well if you

00:37:43,599 --> 00:37:47,319
want a good accessible app for anyone

00:37:45,160 --> 00:37:48,999
who's a Barclays bank customer their

00:37:47,319 --> 00:37:50,950
banking app is extraordinarily

00:37:48,999 --> 00:37:52,390
accessible it's it's really good and

00:37:50,950 --> 00:37:55,329
they've put a lot of a lot of time and

00:37:52,390 --> 00:37:57,130
effort into it so yeah there are some

00:37:55,329 --> 00:37:58,690
some good ideas out there I should just

00:37:57,130 --> 00:38:01,509
keep a list of these because I've I'll

00:37:58,690 --> 00:38:02,799
get home tonight oh yeah I never can

00:38:01,509 --> 00:38:05,019
remember with them when somebody asks me

00:38:02,799 --> 00:38:07,779
this but yeah there are there are some

00:38:05,019 --> 00:38:09,250
good good sites out there that do it and

00:38:07,779 --> 00:38:10,990
do it even at scale

00:38:09,250 --> 00:38:12,700
I mean you want website that's just done

00:38:10,990 --> 00:38:16,150
a terrible terrible thing though which

00:38:12,700 --> 00:38:17,890
is next that the clothes store they've

00:38:16,150 --> 00:38:20,079
just decided to publish an alternative

00:38:17,890 --> 00:38:22,660
accessible version of their website

00:38:20,079 --> 00:38:25,180
which isn't terribly accessible but it's

00:38:22,660 --> 00:38:26,380
a bit like kind of you know I always get

00:38:25,180 --> 00:38:28,119
really angry about this but it's it's a

00:38:26,380 --> 00:38:29,710
bit like I say you disabled people just

00:38:28,119 --> 00:38:31,539
go use that other website

00:38:29,710 --> 00:38:34,299
I really didn't we quit doing that in

00:38:31,539 --> 00:38:35,829
the 60s with other kind of unfair civil

00:38:34,299 --> 00:38:37,059
rights things so yeah if you want a

00:38:35,829 --> 00:38:39,819
really good example of how not to do it

00:38:37,059 --> 00:38:42,240
that's my current be in the works so

00:38:39,819 --> 00:38:42,240

YouTube URL: https://www.youtube.com/watch?v=kxub3jrGTHA


