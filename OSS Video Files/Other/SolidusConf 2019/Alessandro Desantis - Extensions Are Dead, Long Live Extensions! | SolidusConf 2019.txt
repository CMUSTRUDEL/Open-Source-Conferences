Title: Alessandro Desantis - Extensions Are Dead, Long Live Extensions! | SolidusConf 2019
Publication date: 2019-12-06
Playlist: SolidusConf 2019
Description: 
	Alessandro Desantis takes us through the future of extensions on Solidus.

"Extensions Are Dead, Long Live Extensions!"
What is the true place of extensions in the Solidus ecosystem and what does their future look like? In this talk, I will walk you through the challenges Solidus extensions currently face and how we have decided to tackle them.

Learn more about Solidus at solidus.io
Captions: 
	00:00:02,130 --> 00:00:05,160
[Music]

00:00:09,170 --> 00:00:14,759
[Music]

00:00:12,120 --> 00:00:16,590
couple disclaimers first I'm not a

00:00:14,759 --> 00:00:19,500
native speaker so forgive any mistakes

00:00:16,590 --> 00:00:21,119
and I am very cold so that's why I'm

00:00:19,500 --> 00:00:24,570
doing this but my jacket on I'm not in a

00:00:21,119 --> 00:00:25,380
hurry to get out so my name is Alison

00:00:24,570 --> 00:00:28,260
with the santista

00:00:25,380 --> 00:00:31,050
I'm a software engineer and I currently

00:00:28,260 --> 00:00:32,550
work for a nebula and for those of you

00:00:31,050 --> 00:00:34,920
who don't know us what an agency that

00:00:32,550 --> 00:00:36,690
specializes in e-commerce and we're also

00:00:34,920 --> 00:00:40,680
the technical and community director

00:00:36,690 --> 00:00:43,770
behind sadhus so today we're gonna talk

00:00:40,680 --> 00:00:45,600
about extensions I want to explore their

00:00:43,770 --> 00:00:47,129
current state a little bit what we're

00:00:45,600 --> 00:00:49,440
doing about them and what the future

00:00:47,129 --> 00:00:51,780
holds for them and before we dive into

00:00:49,440 --> 00:00:54,390
that I want to explore the why behind

00:00:51,780 --> 00:00:56,340
extensions so while they're important

00:00:54,390 --> 00:00:58,590
for sadhus and why they're important for

00:00:56,340 --> 00:01:02,550
its community and run a few reasons that

00:00:58,590 --> 00:01:04,500
we've identified the first one and this

00:01:02,550 --> 00:01:06,780
is true for most open-source software is

00:01:04,500 --> 00:01:09,450
that by adopting extensions for your

00:01:06,780 --> 00:01:11,790
store you are dramatically reducing your

00:01:09,450 --> 00:01:13,710
overhead so you are reducing your

00:01:11,790 --> 00:01:15,930
implementation time but you're also

00:01:13,710 --> 00:01:18,390
reducing your maintenance efforts which

00:01:15,930 --> 00:01:20,130
makes it quicker to get to market which

00:01:18,390 --> 00:01:24,299
is especially important for startups and

00:01:20,130 --> 00:01:26,369
it also allows you to save money the

00:01:24,299 --> 00:01:28,049
second reason is that when you implement

00:01:26,369 --> 00:01:30,390
most of your source functionality by

00:01:28,049 --> 00:01:33,030
using extensions it becomes much easier

00:01:30,390 --> 00:01:35,640
to avoid use all those developers so if

00:01:33,030 --> 00:01:37,079
you use extensions and you get use all

00:01:35,640 --> 00:01:38,850
those developers to join your team and

00:01:37,079 --> 00:01:40,560
they know those extensions they can be

00:01:38,850 --> 00:01:42,630
productive and good to go from day one

00:01:40,560 --> 00:01:45,990
and this is especially helpful when you

00:01:42,630 --> 00:01:48,600
want to scale up your team and finally

00:01:45,990 --> 00:01:50,759
what we realized is that the state of

00:01:48,600 --> 00:01:53,100
our extension ii system is an indicator

00:01:50,759 --> 00:01:54,540
of the overall health of solves so if

00:01:53,100 --> 00:01:56,280
I'm researching e-commerce frameworks

00:01:54,540 --> 00:01:58,049
and I see that sadhus has an extension

00:01:56,280 --> 00:02:00,149
psycho system that is vibrant and alive

00:01:58,049 --> 00:02:01,710
then it is much more likely that I will

00:02:00,149 --> 00:02:03,930
end up adopting it as my ecommerce

00:02:01,710 --> 00:02:06,329
solution and on the other hand if I see

00:02:03,930 --> 00:02:08,520
that extensions are old or baggy or

00:02:06,329 --> 00:02:12,120
unmaintained then I may end up going

00:02:08,520 --> 00:02:15,120
with something different and in fact

00:02:12,120 --> 00:02:17,040
when people inquire about sadhus the

00:02:15,120 --> 00:02:19,379
questions they ask most often are about

00:02:17,040 --> 00:02:20,879
the extension second system they want to

00:02:19,379 --> 00:02:22,860
know things such as how many extensions

00:02:20,879 --> 00:02:24,480
we have was in charge of maintaining

00:02:22,860 --> 00:02:27,060
them and what kind of support they can

00:02:24,480 --> 00:02:29,940
expect from the community so it became

00:02:27,060 --> 00:02:31,920
clear to us that extensions are one of

00:02:29,940 --> 00:02:33,989
the most important factors for people to

00:02:31,920 --> 00:02:35,489
adopt sadhus and so we need to do our

00:02:33,989 --> 00:02:38,489
best job possible to make sure that

00:02:35,489 --> 00:02:41,310
they're in good shape let's take a look

00:02:38,489 --> 00:02:44,040
at where we are today we have more than

00:02:41,310 --> 00:02:45,980
50 extensions and that's about a hundred

00:02:44,040 --> 00:02:48,450
and eighty thousand lines of code and

00:02:45,980 --> 00:02:50,160
this may not seem like a lot especially

00:02:48,450 --> 00:02:52,349
if you if you're used to working on

00:02:50,160 --> 00:02:54,120
large rails applications but just to

00:02:52,349 --> 00:02:55,980
give you a bit of perspective the entire

00:02:54,120 --> 00:02:58,319
chorus oldest is a hundred and twenty

00:02:55,980 --> 00:03:00,030
thousand lines of code so this is like

00:02:58,319 --> 00:03:03,840
having one and a half more frameworks to

00:03:00,030 --> 00:03:06,180
maintain we have six awesome members in

00:03:03,840 --> 00:03:08,099
the core team and they only have 40

00:03:06,180 --> 00:03:10,290
hours in their weeks and full-time jobs

00:03:08,099 --> 00:03:12,390
to attend to so it's very hard for them

00:03:10,290 --> 00:03:17,250
to find the time to look after both the

00:03:12,390 --> 00:03:18,720
core and extension tech system now just

00:03:17,250 --> 00:03:20,569
by looking at the numbers you may think

00:03:18,720 --> 00:03:22,709
the situation doesn't look very good and

00:03:20,569 --> 00:03:23,819
there is no way that we can get

00:03:22,709 --> 00:03:25,950
extensions in shape

00:03:23,819 --> 00:03:27,419
but what I want to do during this talk

00:03:25,950 --> 00:03:29,069
is take a look at some of the problems

00:03:27,419 --> 00:03:30,840
that are preventing us from doing this

00:03:29,069 --> 00:03:34,440
and figure out if there is a way we can

00:03:30,840 --> 00:03:36,720
solve them the talk will be structured

00:03:34,440 --> 00:03:38,549
in four parts in the first one

00:03:36,720 --> 00:03:40,260
maintaining extensions we'll talk about

00:03:38,549 --> 00:03:42,540
what it takes maintain extensions from a

00:03:40,260 --> 00:03:44,370
technical perspective so things such as

00:03:42,540 --> 00:03:47,040
implementing new features keeping

00:03:44,370 --> 00:03:50,040
extensions up-to-date reviewing issues

00:03:47,040 --> 00:03:51,720
and pull requests and so on then in

00:03:50,040 --> 00:03:53,910
extending extensions we'll talk about

00:03:51,720 --> 00:03:56,579
how our approach to configuring and

00:03:53,910 --> 00:03:59,299
customizing extensions in changing to

00:03:56,579 --> 00:04:01,829
align with what the core team is doing

00:03:59,299 --> 00:04:03,900
in governing extensions we'll talk about

00:04:01,829 --> 00:04:06,000
governance and in particular about the

00:04:03,900 --> 00:04:07,379
governance model around extensions so

00:04:06,000 --> 00:04:10,500
was in charge of maintaining which

00:04:07,379 --> 00:04:12,599
extensions and then finally in

00:04:10,500 --> 00:04:14,549
advertising extensions we'll talk about

00:04:12,599 --> 00:04:16,560
marketing and how we can make sure that

00:04:14,549 --> 00:04:20,430
all this work is seen by the community

00:04:16,560 --> 00:04:24,229
so let's Ivor then who here has ever

00:04:20,430 --> 00:04:26,030
developed or maintained a sols extension

00:04:24,229 --> 00:04:29,060
write quite a few

00:04:26,030 --> 00:04:30,710
and you know that it is quite some

00:04:29,060 --> 00:04:32,600
effort you have to do the initial

00:04:30,710 --> 00:04:33,830
implementation but then you also need to

00:04:32,600 --> 00:04:35,810
make sure that the extension is

00:04:33,830 --> 00:04:37,640
up-to-date and compatible with all the

00:04:35,810 --> 00:04:39,680
latest rails versions you need to engage

00:04:37,640 --> 00:04:41,390
with the community and the list of tasks

00:04:39,680 --> 00:04:43,610
goes on and on and most of this is

00:04:41,390 --> 00:04:46,250
recurring stuff so it's not just a don't

00:04:43,610 --> 00:04:48,680
forget and when you look at our

00:04:46,250 --> 00:04:50,900
extensions unfortunately we haven't done

00:04:48,680 --> 00:04:52,430
a very good job of making sure that the

00:04:50,900 --> 00:04:54,830
extensions kept up with the development

00:04:52,430 --> 00:04:58,030
pace and the quality standards that

00:04:54,830 --> 00:05:01,100
we're now used to seeing in the core I

00:04:58,030 --> 00:05:04,070
have a few problems here that I want to

00:05:01,100 --> 00:05:05,480
talk about so the first one and first

00:05:04,070 --> 00:05:07,310
thing you notice when you open most of

00:05:05,480 --> 00:05:09,890
our extensions is that we are not doing

00:05:07,310 --> 00:05:12,560
a great job of keeping up with issues

00:05:09,890 --> 00:05:14,150
and pull requests and this means that we

00:05:12,560 --> 00:05:16,160
are losing valuable contributions from

00:05:14,150 --> 00:05:18,260
the community but it's also discouraging

00:05:16,160 --> 00:05:20,090
for new contributors because if I want

00:05:18,260 --> 00:05:21,560
to contribute to an extension and I see

00:05:20,090 --> 00:05:24,110
that the maintainer is not very engaged

00:05:21,560 --> 00:05:29,030
with the community then I may end up not

00:05:24,110 --> 00:05:32,390
submitting my patch the test Suites are

00:05:29,030 --> 00:05:33,680
one more problem that we have and you

00:05:32,390 --> 00:05:35,120
know that feeling when you open an

00:05:33,680 --> 00:05:37,040
extension and you see it has a broken

00:05:35,120 --> 00:05:39,080
Travis badge and you think it's just

00:05:37,040 --> 00:05:41,090
temporary but then you open Travis and

00:05:39,080 --> 00:05:42,500
you see the last six eight months or the

00:05:41,090 --> 00:05:44,690
last year of bells for that extension

00:05:42,500 --> 00:05:46,310
have failed and you know that the

00:05:44,690 --> 00:05:48,290
extension doesn't have a reliable test

00:05:46,310 --> 00:05:49,729
suite so any upgrade may potentially

00:05:48,290 --> 00:05:52,100
break your app at some point in the

00:05:49,729 --> 00:05:53,660
future and it's also discouraging again

00:05:52,100 --> 00:05:55,040
if you're a contributor because if you

00:05:53,660 --> 00:05:56,840
don't have tests that you can use to

00:05:55,040 --> 00:05:59,570
validate your changes then it becomes

00:05:56,840 --> 00:06:01,580
that much harder to contribute so once

00:05:59,570 --> 00:06:05,270
again we are losing users we're losing

00:06:01,580 --> 00:06:07,250
contributors and documentation is

00:06:05,270 --> 00:06:11,630
another huge pain point I have an

00:06:07,250 --> 00:06:13,220
example here so by looking at this you

00:06:11,630 --> 00:06:15,770
may be pretty sure that you're looking

00:06:13,220 --> 00:06:17,780
at a spree extension it has three name

00:06:15,770 --> 00:06:19,880
it has pre in the summary in

00:06:17,780 --> 00:06:22,430
installation instructions basically has

00:06:19,880 --> 00:06:25,850
pre all over the place but this is

00:06:22,430 --> 00:06:27,470
actually s all this extension it's all

00:06:25,850 --> 00:06:29,570
those handling fees and it was forked

00:06:27,470 --> 00:06:32,180
from the SP one but the maintainer

00:06:29,570 --> 00:06:34,700
didn't have time or maybe they didn't

00:06:32,180 --> 00:06:36,110
think it was a priority to update the

00:06:34,700 --> 00:06:39,440
documentation with the right framework

00:06:36,110 --> 00:06:39,950
name now I just pick the most obvious

00:06:39,440 --> 00:06:41,870
example

00:06:39,950 --> 00:06:44,330
here but there are actually many worse

00:06:41,870 --> 00:06:46,790
scenarios there are situations where the

00:06:44,330 --> 00:06:49,430
documentation for extensions is updated

00:06:46,790 --> 00:06:52,070
or non-existent and so it becomes very

00:06:49,430 --> 00:06:56,360
hard for new users to figure out what

00:06:52,070 --> 00:06:57,980
the extension does now I just explore

00:06:56,360 --> 00:07:00,590
three of the problems but there are a

00:06:57,980 --> 00:07:02,420
few others most extensions don't have a

00:07:00,590 --> 00:07:04,160
change look so when a new release comes

00:07:02,420 --> 00:07:05,720
out it's very difficult to figure out if

00:07:04,160 --> 00:07:08,210
there are any new features you can adopt

00:07:05,720 --> 00:07:09,860
or maybe any monkey patches that you can

00:07:08,210 --> 00:07:12,890
remove because the next tension point

00:07:09,860 --> 00:07:15,260
has been implemented coding style is

00:07:12,890 --> 00:07:16,970
often inconsistent in extensions because

00:07:15,260 --> 00:07:19,130
not all of them use robocop but if they

00:07:16,970 --> 00:07:20,540
do they don't enforce it and so they

00:07:19,130 --> 00:07:25,190
introduce new code violations all the

00:07:20,540 --> 00:07:26,930
time many extensions even when they have

00:07:25,190 --> 00:07:29,360
a test suite and even when the test

00:07:26,930 --> 00:07:31,160
which is passing are often not testing

00:07:29,360 --> 00:07:33,080
the right stuff or not enough stuff and

00:07:31,160 --> 00:07:34,490
this is especially bad because it

00:07:33,080 --> 00:07:36,410
creates a false sense of confidence

00:07:34,490 --> 00:07:38,030
well now I'm making changes and I think

00:07:36,410 --> 00:07:40,010
I'm fine because I'm not breaking any

00:07:38,030 --> 00:07:41,060
tests when in fact I may be breaking

00:07:40,010 --> 00:07:45,380
stuff in people's production

00:07:41,060 --> 00:07:47,750
applications and finally we're not going

00:07:45,380 --> 00:07:49,640
and did a good job of making sure that

00:07:47,750 --> 00:07:51,950
extensions kept up-to-date with

00:07:49,640 --> 00:07:53,600
dependencies versions so when a new

00:07:51,950 --> 00:07:55,580
dependency comes out we are forcing

00:07:53,600 --> 00:07:57,020
users to stay on all versions which

00:07:55,580 --> 00:07:58,850
means they can't use the latest features

00:07:57,020 --> 00:08:00,830
they can't use the latest performance

00:07:58,850 --> 00:08:02,750
improvements and it's also a security

00:08:00,830 --> 00:08:07,010
problem because they can't use latest

00:08:02,750 --> 00:08:09,500
security fixes so clearly there's a lot

00:08:07,010 --> 00:08:11,000
of stuff to do and it's clear that we

00:08:09,500 --> 00:08:15,380
can't ask the core team to deal with it

00:08:11,000 --> 00:08:17,690
so what can we do we started looking at

00:08:15,380 --> 00:08:20,270
different solutions and we ended up with

00:08:17,690 --> 00:08:22,520
something that was originally devised by

00:08:20,270 --> 00:08:25,880
Stine bolt and we think could apply well

00:08:22,520 --> 00:08:28,070
for a nebula - at nebula we have

00:08:25,880 --> 00:08:30,590
investment Fridays as Thomas was

00:08:28,070 --> 00:08:31,850
suggesting earlier so we only work on

00:08:30,590 --> 00:08:34,520
client projects from Monday to Thursday

00:08:31,850 --> 00:08:36,740
and we reserved fry for stuff such as

00:08:34,520 --> 00:08:38,599
working on open source projects writing

00:08:36,740 --> 00:08:41,390
blog posts and studying new tools and

00:08:38,599 --> 00:08:43,640
technologies and we currently have more

00:08:41,390 --> 00:08:45,500
than 20 developers were working on solid

00:08:43,640 --> 00:08:48,470
projects full time and that's a lot of

00:08:45,500 --> 00:08:50,720
manpower that we can tap into so what we

00:08:48,470 --> 00:08:52,850
did was we compile the list of solves

00:08:50,720 --> 00:08:54,199
extensions and we graded these

00:08:52,850 --> 00:08:57,019
extensions by

00:08:54,199 --> 00:08:59,720
using factors such as how strategic the

00:08:57,019 --> 00:09:01,389
extension is insults ecosystem how much

00:08:59,720 --> 00:09:05,959
activity it sees from the community and

00:09:01,389 --> 00:09:08,000
how many stars it hasn't get up and then

00:09:05,959 --> 00:09:11,029
we assign each of these extensions a

00:09:08,000 --> 00:09:12,740
maintainer and well we actually asked

00:09:11,029 --> 00:09:15,800
our maintainer to volunteer and step up

00:09:12,740 --> 00:09:17,199
to maintain these extensions and many of

00:09:15,800 --> 00:09:20,000
them were happy to do it

00:09:17,199 --> 00:09:22,519
so these maintainer will implement new

00:09:20,000 --> 00:09:24,379
features of course but they will also

00:09:22,519 --> 00:09:26,319
work on reviewing the issues in the per

00:09:24,379 --> 00:09:28,490
request to keep ties with the community

00:09:26,319 --> 00:09:30,019
they will improve the test feed to add

00:09:28,490 --> 00:09:32,329
more meaningful examples and more

00:09:30,019 --> 00:09:34,250
realistic scenarios keep the

00:09:32,329 --> 00:09:35,899
dependencies up to date so that users

00:09:34,250 --> 00:09:37,790
can leverage the latest features and

00:09:35,899 --> 00:09:39,290
improvements and maintain the

00:09:37,790 --> 00:09:40,819
documentation to make sure that is

00:09:39,290 --> 00:09:43,699
that's helpful and relevant is the

00:09:40,819 --> 00:09:45,680
extension changes over time and finally

00:09:43,699 --> 00:09:47,990
because our developers work on solice

00:09:45,680 --> 00:09:50,029
projects full-time and most of these

00:09:47,990 --> 00:09:52,040
projects use a lot of extensions they

00:09:50,029 --> 00:09:53,689
can speak directly to the users that are

00:09:52,040 --> 00:09:55,790
using these extensions and gather

00:09:53,689 --> 00:10:00,529
feedback on what's working and what's

00:09:55,790 --> 00:10:02,120
not to improve the extension on the

00:10:00,529 --> 00:10:03,949
other hand we also wanted to make sure

00:10:02,120 --> 00:10:05,480
that the time of our maintainer is spent

00:10:03,949 --> 00:10:07,879
on things that are truly important and

00:10:05,480 --> 00:10:10,550
that they don't have to do any boring or

00:10:07,879 --> 00:10:12,500
repetitive tasks so we're trying to

00:10:10,550 --> 00:10:14,720
automate as much of the maintenance work

00:10:12,500 --> 00:10:15,920
around the extensions as possible and we

00:10:14,720 --> 00:10:18,529
hope that the entire community will

00:10:15,920 --> 00:10:21,079
benefit from this we're doing this with

00:10:18,529 --> 00:10:24,139
a few tools the first one that we're

00:10:21,079 --> 00:10:25,459
introducing is quite simple it's just a

00:10:24,139 --> 00:10:27,050
readme template that you can use to

00:10:25,459 --> 00:10:29,629
streamline the documentation of your

00:10:27,050 --> 00:10:30,980
extension and it has things there are

00:10:29,629 --> 00:10:32,899
specific solved with such as

00:10:30,980 --> 00:10:34,550
configuration instructions and different

00:10:32,899 --> 00:10:36,860
licensing options so you can choose the

00:10:34,550 --> 00:10:38,629
license you prefer and we are using this

00:10:36,860 --> 00:10:40,819
internally for all the extensions we

00:10:38,629 --> 00:10:42,350
maintain and we hope that by doing this

00:10:40,819 --> 00:10:44,720
we can provide a better experience for

00:10:42,350 --> 00:10:47,149
users who are evaluating extensions and

00:10:44,720 --> 00:10:49,370
deciding which one to adopt but also for

00:10:47,149 --> 00:10:52,069
existing users we want to figure out the

00:10:49,370 --> 00:10:53,809
true potential of their extensions this

00:10:52,069 --> 00:10:55,819
is open source you can find it at

00:10:53,809 --> 00:10:58,490
Spaghettio slashed all those extensions

00:10:55,819 --> 00:11:02,660
management so check it out and let us

00:10:58,490 --> 00:11:04,790
know what you think we also wanted to

00:11:02,660 --> 00:11:06,110
provide a simpler way for extension

00:11:04,790 --> 00:11:07,720
maintainer to generate change loads

00:11:06,110 --> 00:11:11,080
without having to write the menu

00:11:07,720 --> 00:11:12,520
and so we looked at a few tools and we

00:11:11,080 --> 00:11:14,950
ended up using github change lock

00:11:12,520 --> 00:11:16,330
generator which basically will generate

00:11:14,950 --> 00:11:17,830
your change lock by looking at the

00:11:16,330 --> 00:11:21,010
issues you closed and the pull request

00:11:17,830 --> 00:11:23,830
to merge since the last release the end

00:11:21,010 --> 00:11:25,780
result looks like this and it's pretty

00:11:23,830 --> 00:11:28,150
cool especially when you consider that

00:11:25,780 --> 00:11:29,560
there is no human work involved it also

00:11:28,150 --> 00:11:31,300
has the additional benefit of

00:11:29,560 --> 00:11:33,280
encouraging extension maintainer to use

00:11:31,300 --> 00:11:37,540
for requests for all changes so that

00:11:33,280 --> 00:11:39,310
they can get a change look for free one

00:11:37,540 --> 00:11:41,140
more problem we've seen is that maintain

00:11:39,310 --> 00:11:43,500
rates are having a hard time keeping

00:11:41,140 --> 00:11:46,810
track of requests for their extensions

00:11:43,500 --> 00:11:48,730
and so for this we use the pull

00:11:46,810 --> 00:11:50,620
reminders and we installed it in a lot

00:11:48,730 --> 00:11:51,820
of slack organization which means it's

00:11:50,620 --> 00:11:54,610
now available to all extension

00:11:51,820 --> 00:11:56,230
maintainer what this will do is it will

00:11:54,610 --> 00:11:58,690
ping Yuen slack when you get a new per

00:11:56,230 --> 00:12:00,460
request review and it will continue to

00:11:58,690 --> 00:12:03,850
bother you periodically until you can

00:12:00,460 --> 00:12:06,010
take action on that request of course

00:12:03,850 --> 00:12:07,870
you can decide which notifications you

00:12:06,010 --> 00:12:10,210
want to receive and how many you want to

00:12:07,870 --> 00:12:12,130
receive but we strongly encourage you to

00:12:10,210 --> 00:12:13,600
leave this on so that it does the work

00:12:12,130 --> 00:12:17,290
for you and you don't have to keep track

00:12:13,600 --> 00:12:19,960
of requests manually this also provides

00:12:17,290 --> 00:12:21,700
useful statistics on things such as how

00:12:19,960 --> 00:12:24,010
long it takes us on average to review up

00:12:21,700 --> 00:12:25,780
a request and in the future we hope that

00:12:24,010 --> 00:12:27,670
we can use these to do things such as

00:12:25,780 --> 00:12:29,080
figure out when an extension meter needs

00:12:27,670 --> 00:12:34,000
help because they're getting a bit

00:12:29,080 --> 00:12:36,130
behind on their request reviews for

00:12:34,000 --> 00:12:38,680
dependency management we went with

00:12:36,130 --> 00:12:41,560
dependable and again we have installed

00:12:38,680 --> 00:12:43,030
it in the solidus organization and it

00:12:41,560 --> 00:12:45,790
will be available for extension

00:12:43,030 --> 00:12:47,230
maintainer and some of you may be

00:12:45,790 --> 00:12:49,510
familiar with this because it's pretty

00:12:47,230 --> 00:12:52,510
popular in regular rails applications

00:12:49,510 --> 00:12:54,940
but basically this will create per

00:12:52,510 --> 00:12:57,430
request in your extension whenever a new

00:12:54,940 --> 00:12:58,839
dependency comes out and it will include

00:12:57,430 --> 00:13:00,520
a bunch of information such as the

00:12:58,839 --> 00:13:02,589
release notes and change log and the

00:13:00,520 --> 00:13:05,140
commits in the pull request review so

00:13:02,589 --> 00:13:07,030
that you can review everything and make

00:13:05,140 --> 00:13:08,500
sure that the extent the new dependency

00:13:07,030 --> 00:13:10,510
is compatible with your extension and

00:13:08,500 --> 00:13:15,070
when the time comes all you have to do

00:13:10,510 --> 00:13:17,230
is click on merge now all of these tools

00:13:15,070 --> 00:13:18,850
are pretty cool but they're really

00:13:17,230 --> 00:13:21,130
nothing new to the Ruby on Rails

00:13:18,850 --> 00:13:22,540
communities they've been used for

00:13:21,130 --> 00:13:24,520
one time they've been used in

00:13:22,540 --> 00:13:26,590
open-source projects and we hope that by

00:13:24,520 --> 00:13:28,750
combining them we can dramatically

00:13:26,590 --> 00:13:31,870
reduce the effort of developing and

00:13:28,750 --> 00:13:33,700
maintaining stalls extensions with that

00:13:31,870 --> 00:13:36,220
said there were a couple of challenges

00:13:33,700 --> 00:13:38,260
that we're unique to solves and require

00:13:36,220 --> 00:13:43,990
the funeral solutions so let's take a

00:13:38,260 --> 00:13:46,060
look so one of the problems was that all

00:13:43,990 --> 00:13:48,520
extensions used at different arts like

00:13:46,060 --> 00:13:50,740
configuration and there's creative

00:13:48,520 --> 00:13:52,210
issues in local development especially

00:13:50,740 --> 00:13:54,400
for those maintainer who are in charge

00:13:52,210 --> 00:13:55,870
of multiple extensions because sometimes

00:13:54,400 --> 00:13:58,930
you want to apply the same update while

00:13:55,870 --> 00:14:01,180
extensions but most importantly it

00:13:58,930 --> 00:14:03,850
created issues in CI environments

00:14:01,180 --> 00:14:06,040
because very often Europe Travis or

00:14:03,850 --> 00:14:08,260
circle CI build would break due to

00:14:06,040 --> 00:14:10,600
external factors such as a new chrome

00:14:08,260 --> 00:14:12,130
version coming out and your spec

00:14:10,600 --> 00:14:15,190
configuration using an outdated

00:14:12,130 --> 00:14:16,750
configuration version stain both had

00:14:15,190 --> 00:14:19,180
already designed a solution for this in

00:14:16,750 --> 00:14:21,670
the form of a reusable feature helper

00:14:19,180 --> 00:14:23,380
that comes with solder support but for

00:14:21,670 --> 00:14:26,110
some reason it was never really widely

00:14:23,380 --> 00:14:28,840
adopted so we simply tweaked it a little

00:14:26,110 --> 00:14:31,840
bit and we adopted it in all solves

00:14:28,840 --> 00:14:33,910
extensions so nowadays if you want to

00:14:31,840 --> 00:14:35,500
test yourselves extension you simply

00:14:33,910 --> 00:14:37,930
have to include these four lines in your

00:14:35,500 --> 00:14:40,720
spec helper and you can run rake and

00:14:37,930 --> 00:14:42,910
that's it you get consistent test runs

00:14:40,720 --> 00:14:48,070
across all your extensions in local

00:14:42,910 --> 00:14:50,500
development NCI the second problem and

00:14:48,070 --> 00:14:52,450
this also has to do with testing is that

00:14:50,500 --> 00:14:54,130
the CI configuration needed to be

00:14:52,450 --> 00:14:56,080
updated every time a new saw this

00:14:54,130 --> 00:14:57,730
version came out because the support is

00:14:56,080 --> 00:15:00,730
all those versions were hard coded in

00:14:57,730 --> 00:15:03,160
configuration and so we fixed this by

00:15:00,730 --> 00:15:05,890
using one of the latest feature ship a

00:15:03,160 --> 00:15:08,110
circle CI which is called orbs and these

00:15:05,890 --> 00:15:09,520
are reusable configuration packages that

00:15:08,110 --> 00:15:11,200
you can pull into your circle CI

00:15:09,520 --> 00:15:14,680
configuration just like you would do

00:15:11,200 --> 00:15:16,690
with a regular Ruby gem so what we did

00:15:14,680 --> 00:15:18,580
was we created an arbor that allows you

00:15:16,690 --> 00:15:20,680
to test your extension with all the

00:15:18,580 --> 00:15:23,680
currently supported solace versions at

00:15:20,680 --> 00:15:26,140
any given time and all you have to do is

00:15:23,680 --> 00:15:27,930
simply copy/paste this sample circle CI

00:15:26,140 --> 00:15:30,580
configuration and you're good to go

00:15:27,930 --> 00:15:34,510
let's take a look at what it does line

00:15:30,580 --> 00:15:35,529
by line so the first thing I'm doing is

00:15:34,510 --> 00:15:37,870
I install

00:15:35,529 --> 00:15:40,269
the souls iost lash extensions orb which

00:15:37,870 --> 00:15:42,279
is the one we created and the volatile

00:15:40,269 --> 00:15:44,139
specifier here allow a circle ci to

00:15:42,279 --> 00:15:45,670
always pull the latest version of VR and

00:15:44,139 --> 00:15:49,449
we'll see why that's important in a

00:15:45,670 --> 00:15:51,459
second then I define which database is

00:15:49,449 --> 00:15:52,959
someone to run my tests with and we

00:15:51,459 --> 00:15:55,089
recommend leaving the default which is

00:15:52,959 --> 00:15:56,439
MySQL and Postgres but you have the

00:15:55,089 --> 00:15:58,860
flexibility to choose in case your

00:15:56,439 --> 00:16:02,589
extension on supports one of them and

00:15:58,860 --> 00:16:04,420
finally I defined two were close this

00:16:02,589 --> 00:16:05,949
one is pretty boring if we'll just run

00:16:04,420 --> 00:16:08,579
the test when a new pro request is

00:16:05,949 --> 00:16:10,990
created or merged into master as usual

00:16:08,579 --> 00:16:13,209
this is where things get a little bit

00:16:10,990 --> 00:16:15,730
more interesting if we run my entire

00:16:13,209 --> 00:16:18,040
test suite every week against all the

00:16:15,730 --> 00:16:20,709
currently supported Souls versions but

00:16:18,040 --> 00:16:22,689
also against master so that I'm sure

00:16:20,709 --> 00:16:25,660
that my extension is compatible with the

00:16:22,689 --> 00:16:27,759
upcoming release of solace by

00:16:25,660 --> 00:16:29,110
centralizing our CI configuration the

00:16:27,759 --> 00:16:31,509
hope is that we can work more closely

00:16:29,110 --> 00:16:32,829
with extension maintainer to make sure

00:16:31,509 --> 00:16:34,779
that they're always using the latest

00:16:32,829 --> 00:16:36,970
features that we ship and also that

00:16:34,779 --> 00:16:39,819
their extensions are always ready for

00:16:36,970 --> 00:16:41,470
the new release of sadhus most of the

00:16:39,819 --> 00:16:43,120
credit for the work on this goes to

00:16:41,470 --> 00:16:44,439
Alberto for designing it and

00:16:43,120 --> 00:16:54,189
implementing it so let's give him a

00:16:44,439 --> 00:16:55,870
round of applause and finally all these

00:16:54,189 --> 00:16:58,600
improvements have been integrated with

00:16:55,870 --> 00:16:59,740
salt with CMB so nowadays if you want to

00:16:58,600 --> 00:17:01,629
start developing a new syllabus

00:16:59,740 --> 00:17:03,879
extension all you have to do is install

00:17:01,629 --> 00:17:09,579
sodastream deep runs all this extension

00:17:03,879 --> 00:17:12,730
and you're set up to party all right

00:17:09,579 --> 00:17:14,319
let's move on extending extensions as

00:17:12,730 --> 00:17:16,299
you know the core team is actively

00:17:14,319 --> 00:17:18,069
working on making salt was easier and

00:17:16,299 --> 00:17:19,659
easier to customize and we wanted to

00:17:18,069 --> 00:17:23,740
bring some of that effort to extensions

00:17:19,659 --> 00:17:25,480
as well so this is a piece of code from

00:17:23,740 --> 00:17:27,880
Sol this product fib which is one of the

00:17:25,480 --> 00:17:30,370
extensions I maintain and it's pretty

00:17:27,880 --> 00:17:32,080
simple it just creates an RSS feed of

00:17:30,370 --> 00:17:33,520
your Solus products and you can then

00:17:32,080 --> 00:17:36,309
import this feed into your Google ads

00:17:33,520 --> 00:17:39,880
account let's take a look at how we

00:17:36,309 --> 00:17:41,440
could go about extending this so our

00:17:39,880 --> 00:17:43,780
first approach historically was to use

00:17:41,440 --> 00:17:45,280
class eval but this has a bunch of

00:17:43,780 --> 00:17:48,340
problems which I'm sure we're all aware

00:17:45,280 --> 00:17:49,720
of you can't use super unless

00:17:48,340 --> 00:17:51,700
define an alias for the original

00:17:49,720 --> 00:17:53,860
implementation which is a bit ugly and

00:17:51,700 --> 00:17:56,590
clean to bed issues if you're doing

00:17:53,860 --> 00:17:58,659
weird stuff and it's hard to debug when

00:17:56,590 --> 00:18:00,220
things go wrong because there is no easy

00:17:58,659 --> 00:18:02,080
way to get a list of all the places

00:18:00,220 --> 00:18:05,620
where I'm calling class even on a given

00:18:02,080 --> 00:18:06,850
class but most importantly the problem

00:18:05,620 --> 00:18:08,919
with this is that there is no clear

00:18:06,850 --> 00:18:11,919
distinction between public API s and

00:18:08,919 --> 00:18:14,350
private API s-- and so what may happen

00:18:11,919 --> 00:18:16,240
is that I'm overriding a private API

00:18:14,350 --> 00:18:18,159
from an extension and the extension

00:18:16,240 --> 00:18:20,049
maintainer updates that API and breaks

00:18:18,159 --> 00:18:21,940
my customizations because they have no

00:18:20,049 --> 00:18:26,260
way of knowing I'm using that as a

00:18:21,940 --> 00:18:28,539
customization point our second approach

00:18:26,260 --> 00:18:31,299
was to use prepend which has a couple of

00:18:28,539 --> 00:18:33,100
bandages I can use super and it will

00:18:31,299 --> 00:18:35,559
reference the original implementation as

00:18:33,100 --> 00:18:37,120
I'm expecting and I can call ancestors

00:18:35,559 --> 00:18:39,820
to get a list of all the modules that

00:18:37,120 --> 00:18:41,200
are being prevented to a class but

00:18:39,820 --> 00:18:43,029
there's still no distinction between

00:18:41,200 --> 00:18:44,679
what's a public API amounts a private

00:18:43,029 --> 00:18:47,919
API so it's still a very brittle

00:18:44,679 --> 00:18:49,929
approach as I said we want to go the

00:18:47,919 --> 00:18:52,149
same route as Alstead so we are going

00:18:49,929 --> 00:18:55,120
back to the basics with plain old Ruby

00:18:52,149 --> 00:18:57,100
objects and in this scenario what you

00:18:55,120 --> 00:18:59,799
would do is define your own feed product

00:18:57,100 --> 00:19:01,899
class and then configure the extension

00:18:59,799 --> 00:19:04,390
to use your own class instead of your

00:19:01,899 --> 00:19:06,610
original implementation and this solves

00:19:04,390 --> 00:19:08,020
all the issues we've seen you can call

00:19:06,610 --> 00:19:10,750
super because you're just defining a

00:19:08,020 --> 00:19:12,730
subclass and it's a clearly documented

00:19:10,750 --> 00:19:14,970
extension point so if something was

00:19:12,730 --> 00:19:17,679
wrong you know exactly where to look and

00:19:14,970 --> 00:19:19,149
finally this is a stable customization

00:19:17,679 --> 00:19:20,260
contract that the extension maintainer

00:19:19,149 --> 00:19:23,350
committed to providing and maintaining

00:19:20,260 --> 00:19:24,580
over time so it is much less likely that

00:19:23,350 --> 00:19:29,080
this will be broken by an extension

00:19:24,580 --> 00:19:32,230
update at some point now this is a very

00:19:29,080 --> 00:19:34,710
simple and elegant approach and we think

00:19:32,230 --> 00:19:37,210
that it will solve 90% of our problems

00:19:34,710 --> 00:19:38,830
but it's not all there is one more

00:19:37,210 --> 00:19:40,870
approach that we are experimenting with

00:19:38,830 --> 00:19:42,370
in the core of salsa and we are very

00:19:40,870 --> 00:19:46,090
excited about the possibilities that it

00:19:42,370 --> 00:19:49,299
also opens for extensions this is the

00:19:46,090 --> 00:19:51,490
solidus event bus it's nothing new from

00:19:49,299 --> 00:19:53,230
a design perspective you just fire

00:19:51,490 --> 00:19:54,909
events from one part of your app and

00:19:53,230 --> 00:19:56,830
then subscribe to those events from

00:19:54,909 --> 00:19:59,710
another part and run your own logic and

00:19:56,830 --> 00:20:02,200
in this example I have an extension that

00:19:59,710 --> 00:20:04,029
provides subscriptions for my solo sir

00:20:02,200 --> 00:20:06,129
and I fire an event on a subscription is

00:20:04,029 --> 00:20:07,659
renewed and then from the main

00:20:06,129 --> 00:20:10,179
application and can subscribe to this

00:20:07,659 --> 00:20:10,840
event and notify the user to send a

00:20:10,179 --> 00:20:13,749
thank-you note

00:20:10,840 --> 00:20:16,119
when they renew their subscription now

00:20:13,749 --> 00:20:19,149
as I said this is still experimental but

00:20:16,119 --> 00:20:21,070
it's showing a lot of potential it has

00:20:19,149 --> 00:20:22,840
support for multiple adapters the

00:20:21,070 --> 00:20:24,489
default one is based on active support

00:20:22,840 --> 00:20:26,350
but you can also easily write your own

00:20:24,489 --> 00:20:28,059
and you can even make it a synchronous

00:20:26,350 --> 00:20:31,779
by using something such as register

00:20:28,059 --> 00:20:33,700
RabbitMQ as you can subscribe with a

00:20:31,779 --> 00:20:36,190
block as I'm doing in this example if

00:20:33,700 --> 00:20:37,629
your logic is quite simple or if it's a

00:20:36,190 --> 00:20:38,350
bit more complex you can define an

00:20:37,629 --> 00:20:40,090
entire class

00:20:38,350 --> 00:20:43,480
which comes in handy if you want to unit

00:20:40,090 --> 00:20:44,830
test it and finally it's completely

00:20:43,480 --> 00:20:47,739
integrated in the extension psycho

00:20:44,830 --> 00:20:49,989
system so you can either define custom

00:20:47,739 --> 00:20:51,369
events from inside extensions or you can

00:20:49,989 --> 00:20:55,299
subscribe to events that happen in the

00:20:51,369 --> 00:20:57,159
core from inside extensions again this

00:20:55,299 --> 00:20:58,960
work was started by stumbled and then

00:20:57,159 --> 00:21:00,850
taken over by one of our developers

00:20:58,960 --> 00:21:02,440
Sandra Longy so check out the

00:21:00,850 --> 00:21:05,549
documentation check out the source code

00:21:02,440 --> 00:21:05,549
and let us know if you have any feedback

00:21:06,840 --> 00:21:14,379
now let's talk about governance

00:21:11,519 --> 00:21:16,989
historically sawdust has adopted this

00:21:14,379 --> 00:21:18,580
pre governance model so our code is

00:21:16,989 --> 00:21:20,289
distributed across to github

00:21:18,580 --> 00:21:22,659
organizations we have solved with IO

00:21:20,289 --> 00:21:25,269
which is for critical functionality and

00:21:22,659 --> 00:21:26,889
the core and then we have solo second

00:21:25,269 --> 00:21:28,289
trip which is for additional community

00:21:26,889 --> 00:21:31,149
maintain functionality

00:21:28,289 --> 00:21:33,489
now we haven't done a great job over the

00:21:31,149 --> 00:21:37,119
years of enforcing this policy which led

00:21:33,489 --> 00:21:38,859
to some interesting results you can see

00:21:37,119 --> 00:21:41,559
in solo say oh we have stuff that it's

00:21:38,859 --> 00:21:44,230
really not critical and in solo second

00:21:41,559 --> 00:21:46,809
trip we have very important code such as

00:21:44,230 --> 00:21:47,859
our stripe integration or solo CMD which

00:21:46,809 --> 00:21:48,899
is the foundation for all other

00:21:47,859 --> 00:21:51,580
extensions

00:21:48,899 --> 00:21:53,619
this not only sends the wrong message to

00:21:51,580 --> 00:21:55,840
our users about what our priorities are

00:21:53,619 --> 00:21:57,700
but it's also bad use of the core teams

00:21:55,840 --> 00:22:01,169
time because we're asking them to work

00:21:57,700 --> 00:22:03,429
on stuff that is not really fundamental

00:22:01,169 --> 00:22:05,230
moving forward we want to do a much

00:22:03,429 --> 00:22:08,580
better job when forcing this governance

00:22:05,230 --> 00:22:10,989
model so salcedo will be used as

00:22:08,580 --> 00:22:13,029
originally designed for a critical

00:22:10,989 --> 00:22:15,279
functionality and integrations with

00:22:13,029 --> 00:22:16,080
major service providers and the code

00:22:15,279 --> 00:22:17,460
that goes in here

00:22:16,080 --> 00:22:21,030
we'll have to be proposed by the core

00:22:17,460 --> 00:22:22,680
team and approved by the core team so

00:22:21,030 --> 00:22:24,450
the second trip would continue to be the

00:22:22,680 --> 00:22:26,220
place for additional functionality and

00:22:24,450 --> 00:22:28,830
the coding here will be proposed and

00:22:26,220 --> 00:22:30,300
maintained by the community the core

00:22:28,830 --> 00:22:32,160
team will continue to provide guidance

00:22:30,300 --> 00:22:33,810
and tools around how to properly

00:22:32,160 --> 00:22:37,460
maintain extensions but they will not

00:22:33,810 --> 00:22:37,460
actively work on community code anymore

00:22:38,900 --> 00:22:43,290
additionally when we were categorizing

00:22:41,850 --> 00:22:45,240
extensions to figure out in which

00:22:43,290 --> 00:22:47,400
organization to put them and grain in

00:22:45,240 --> 00:22:49,050
main portends we also realized that

00:22:47,400 --> 00:22:50,640
there were a few categories that we are

00:22:49,050 --> 00:22:54,900
not very interested in maintaining at

00:22:50,640 --> 00:22:56,370
all we have legacy code so features that

00:22:54,900 --> 00:22:58,170
have been extracted from the core into

00:22:56,370 --> 00:23:00,660
an extension to provide an easier

00:22:58,170 --> 00:23:02,550
migration path and then we have

00:23:00,660 --> 00:23:04,140
customizations that are so simple you'd

00:23:02,550 --> 00:23:06,390
be better off implementing them yourself

00:23:04,140 --> 00:23:08,880
such as the Google Analytics code for

00:23:06,390 --> 00:23:10,290
front-end and on the other end of the

00:23:08,880 --> 00:23:11,850
spectrum we also have features so

00:23:10,290 --> 00:23:14,250
complex and specific to your business

00:23:11,850 --> 00:23:15,780
rules the an extension will never be

00:23:14,250 --> 00:23:19,440
able to provide the required level of

00:23:15,780 --> 00:23:21,300
flexibility we pride ourselves with

00:23:19,440 --> 00:23:23,640
sadhus being the best platform for

00:23:21,300 --> 00:23:25,650
custom e-commerce stores and we felt

00:23:23,640 --> 00:23:28,140
like there was really no place in a sec

00:23:25,650 --> 00:23:30,690
system for these extensions so moving

00:23:28,140 --> 00:23:32,970
forward we are acquiring them you won't

00:23:30,690 --> 00:23:34,500
be able to open any new issues or submit

00:23:32,970 --> 00:23:36,450
any poor requests but you can still

00:23:34,500 --> 00:23:39,900
download them and use them as a starting

00:23:36,450 --> 00:23:41,670
point for your own customizations we

00:23:39,900 --> 00:23:43,890
hope that by doing this we're sending a

00:23:41,670 --> 00:23:45,960
message to the community about what kind

00:23:43,890 --> 00:23:47,640
of extensions we want to see and we're

00:23:45,960 --> 00:23:49,170
also freeing up the time of the core

00:23:47,640 --> 00:23:53,910
team and our maintainer to the more

00:23:49,170 --> 00:23:57,780
strategic work now for the last part of

00:23:53,910 --> 00:24:00,060
the sock advertising extensions all of

00:23:57,780 --> 00:24:02,220
this work is great and will save us a

00:24:00,060 --> 00:24:04,140
lot of time but it won't be worth much

00:24:02,220 --> 00:24:07,350
if no one knows about our extensions

00:24:04,140 --> 00:24:08,760
ecosystem in the first place and when

00:24:07,350 --> 00:24:10,560
you look at the competition you have to

00:24:08,760 --> 00:24:11,820
give it to them that they're doing a

00:24:10,560 --> 00:24:14,880
much better job than we are

00:24:11,820 --> 00:24:17,040
rabbert izing their extensions now

00:24:14,880 --> 00:24:19,050
partly this is because most platforms

00:24:17,040 --> 00:24:21,270
out there monetize their extensions and

00:24:19,050 --> 00:24:22,500
so they have a very strong interest in

00:24:21,270 --> 00:24:24,840
making sure that they're easily

00:24:22,500 --> 00:24:26,130
discoverable but it's also because they

00:24:24,840 --> 00:24:27,960
understand that if you want people to

00:24:26,130 --> 00:24:28,980
use extensions you have to give them an

00:24:27,960 --> 00:24:29,220
amazing experience

00:24:28,980 --> 00:24:33,240
if

00:24:29,220 --> 00:24:35,429
or they even install anything when you

00:24:33,240 --> 00:24:37,140
look at Saudis today there are at least

00:24:35,429 --> 00:24:40,080
four different channels where you can

00:24:37,140 --> 00:24:41,820
find solve those extensions you have the

00:24:40,080 --> 00:24:44,400
extensions page on the Saudis website

00:24:41,820 --> 00:24:45,960
and then you have salt on a search

00:24:44,400 --> 00:24:49,409
engine force all these extensions that

00:24:45,960 --> 00:24:52,350
will enable up the build matrix and the

00:24:49,409 --> 00:24:54,840
key table organizations now each of

00:24:52,350 --> 00:24:57,450
these contain a subgroup all of this all

00:24:54,840 --> 00:24:59,520
those extensions out there in Sultan is

00:24:57,450 --> 00:25:01,020
probably the most complete because it

00:24:59,520 --> 00:25:03,600
just runs the search on github but it's

00:25:01,020 --> 00:25:05,309
also the only unofficial one and they

00:25:03,600 --> 00:25:08,730
provide virtually no information about

00:25:05,309 --> 00:25:10,559
the quality of these extensions we know

00:25:08,730 --> 00:25:11,850
that we can do better than this and we

00:25:10,559 --> 00:25:14,640
owe it to our community to do better

00:25:11,850 --> 00:25:16,169
than this so moving forward our next big

00:25:14,640 --> 00:25:19,020
project for extensions will be to

00:25:16,169 --> 00:25:21,120
provide a unified marketplace a single

00:25:19,020 --> 00:25:23,309
experience where you have one point of

00:25:21,120 --> 00:25:25,799
discovery for the solves extensions that

00:25:23,309 --> 00:25:27,390
have ever been developed and quality

00:25:25,799 --> 00:25:29,880
metrics that can help you make the right

00:25:27,390 --> 00:25:31,830
decision things such as how active the

00:25:29,880 --> 00:25:32,970
maintainer is what quality can I expect

00:25:31,830 --> 00:25:35,940
from the code what's the test coverage

00:25:32,970 --> 00:25:37,860
like and finally this will be the

00:25:35,940 --> 00:25:39,780
perfect place to provide even more tools

00:25:37,860 --> 00:25:41,940
for arming tinners to streamline and

00:25:39,780 --> 00:25:45,480
simplify their work even more and save

00:25:41,940 --> 00:25:46,980
as much time as possible we believe that

00:25:45,480 --> 00:25:49,080
there's still a lot of potential for

00:25:46,980 --> 00:25:50,760
solvus extensions and we are very

00:25:49,080 --> 00:25:53,460
excited about the possibility is the

00:25:50,760 --> 00:25:55,710
real marketplace will open so stay tuned

00:25:53,460 --> 00:25:59,850
for updates on this in 2020 and let us

00:25:55,710 --> 00:26:02,520
know if you have any ideas now coming

00:25:59,850 --> 00:26:05,929
back to the title of my talk which was a

00:26:02,520 --> 00:26:08,909
bit dramatic our extensions truly dead

00:26:05,929 --> 00:26:10,650
well it turns out they are but only in

00:26:08,909 --> 00:26:12,960
the sense that we need to radically

00:26:10,650 --> 00:26:15,330
rethink our strategy and refocus our

00:26:12,960 --> 00:26:17,159
efforts around extensions but in fact we

00:26:15,330 --> 00:26:18,870
feel like extensions have never been so

00:26:17,159 --> 00:26:21,750
alive in the history of Salty's ever

00:26:18,870 --> 00:26:23,850
before and if we do this right we have

00:26:21,750 --> 00:26:25,500
the opportunity to provide a shining

00:26:23,850 --> 00:26:27,480
extensions ecosystem which will be a

00:26:25,500 --> 00:26:31,049
huge selling point for souls and will

00:26:27,480 --> 00:26:32,669
continue to save us time and money now

00:26:31,049 --> 00:26:35,580
with that said we can't do this alone

00:26:32,669 --> 00:26:37,200
and you knew this part was coming we're

00:26:35,580 --> 00:26:38,340
looking at the community to help us and

00:26:37,200 --> 00:26:40,559
there are different ways you can do this

00:26:38,340 --> 00:26:41,200
you can volunteer as an extension

00:26:40,559 --> 00:26:43,480
maintainer

00:26:41,200 --> 00:26:45,910
or you could contribute on github with

00:26:43,480 --> 00:26:47,470
issues and pull requests you can improve

00:26:45,910 --> 00:26:49,570
the automation tools for extension

00:26:47,470 --> 00:26:51,580
maintainer and finally you can support

00:26:49,570 --> 00:26:53,200
us financially and open collective there

00:26:51,580 --> 00:26:56,680
help us sponsor more and more work on

00:26:53,200 --> 00:26:58,150
extensions with your help we believe

00:26:56,680 --> 00:27:00,430
that we can truly build the future of

00:26:58,150 --> 00:27:03,000
service and that future will definitely

00:27:00,430 --> 00:27:05,710
continue to be free open and extensible

00:27:03,000 --> 00:27:08,530
thank you

00:27:05,710 --> 00:27:21,910
[Applause]

00:27:08,530 --> 00:27:21,910

YouTube URL: https://www.youtube.com/watch?v=7iKjxcyLzmI


