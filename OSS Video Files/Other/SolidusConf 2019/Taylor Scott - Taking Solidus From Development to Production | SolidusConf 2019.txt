Title: Taylor Scott - Taking Solidus From Development to Production | SolidusConf 2019
Publication date: 2019-12-06
Playlist: SolidusConf 2019
Description: 
	Taylor Scott shows us how to take Solidus from 0 to 100.

"Taking Solidus From Development to Production"
This talk is focused on deploying a Solidus application to a multi-container environment on Elasticbeanstalk in AWS.

Learn more about Solidus at solidus.io
Captions: 
	00:00:02,130 --> 00:00:05,160
[Music]

00:00:09,170 --> 00:00:15,420
[Music]

00:00:12,349 --> 00:00:16,949
thank you Miss Rob said I work for

00:00:15,420 --> 00:00:19,949
Desiree book I'm one of their senior

00:00:16,949 --> 00:00:23,150
software engineers if I start talking

00:00:19,949 --> 00:00:23,150
too fast just say whoa

00:00:24,439 --> 00:00:32,579
there we go yeah I've done I've done a

00:00:29,250 --> 00:00:34,200
couple projects for desert book a lot of

00:00:32,579 --> 00:00:37,590
them include working with solidus as

00:00:34,200 --> 00:00:38,550
well for instance we have a project

00:00:37,590 --> 00:00:39,960
where we've had to integrate with a

00:00:38,550 --> 00:00:43,110
third party wear hat warehouse

00:00:39,960 --> 00:00:46,350
management system that one it was pretty

00:00:43,110 --> 00:00:49,230
challenging for various reasons as well

00:00:46,350 --> 00:00:51,930
as creating custom payment methods such

00:00:49,230 --> 00:00:54,180
as gift cards stuff like that today

00:00:51,930 --> 00:00:57,000
though I want to talk about kind of how

00:00:54,180 --> 00:00:59,219
we deploy and how we've taken kind of

00:00:57,000 --> 00:01:03,000
how we take our project from development

00:00:59,219 --> 00:01:05,220
to production just as it says this is a

00:01:03,000 --> 00:01:08,280
project was originally very very

00:01:05,220 --> 00:01:09,630
technical I've tried to abstract a lot

00:01:08,280 --> 00:01:12,090
of that and I've placed it into three

00:01:09,630 --> 00:01:13,650
different articles there's still a few

00:01:12,090 --> 00:01:16,670
things I need to add an update there but

00:01:13,650 --> 00:01:19,110
for the most part you should find it

00:01:16,670 --> 00:01:21,600
there if you want to look at the kind of

00:01:19,110 --> 00:01:23,130
more technicalities of stuff however

00:01:21,600 --> 00:01:25,080
keep in mind this project this this

00:01:23,130 --> 00:01:27,900
presentation is going to be fairly

00:01:25,080 --> 00:01:32,430
technical so I apologize to those who

00:01:27,900 --> 00:01:36,210
aren't technical here and buckle up yeah

00:01:32,430 --> 00:01:37,619
and I'd also like to kind of focus more

00:01:36,210 --> 00:01:40,009
that this presentation is going to be

00:01:37,619 --> 00:01:42,180
focused a lot on deployment as well

00:01:40,009 --> 00:01:44,369
which is very opinionated and what I

00:01:42,180 --> 00:01:45,930
mean by that is there's many ways to do

00:01:44,369 --> 00:01:48,240
it and so I'm not saying this is the way

00:01:45,930 --> 00:01:49,590
you guys should do this this is just the

00:01:48,240 --> 00:01:51,750
way we do it at desert book and I'm

00:01:49,590 --> 00:01:54,869
going to kind of explain why we do it

00:01:51,750 --> 00:01:56,549
that way and how it's helped us so what

00:01:54,869 --> 00:01:58,890
we will be covering is we're gonna talk

00:01:56,549 --> 00:02:01,140
about CI tools and we're gonna be

00:01:58,890 --> 00:02:04,049
talking a bit about docker as well as

00:02:01,140 --> 00:02:06,119
Amazon Web Services I guess by a raise

00:02:04,049 --> 00:02:11,580
of hands is anyone here familiar with

00:02:06,119 --> 00:02:13,110
docker Oh perfect has it with same

00:02:11,580 --> 00:02:14,900
raised amount of hands has anyone

00:02:13,110 --> 00:02:19,610
written docker file

00:02:14,900 --> 00:02:22,290
okay this would be excellent perfect so

00:02:19,610 --> 00:02:24,660
first I do want to talk about continuous

00:02:22,290 --> 00:02:26,630
integration for those who don't know

00:02:24,660 --> 00:02:30,090
what continuous integration is

00:02:26,630 --> 00:02:31,800
essentially it is by strict definition

00:02:30,090 --> 00:02:35,190
it is when developers are pushing to a

00:02:31,800 --> 00:02:38,070
common branch frequently so some define

00:02:35,190 --> 00:02:40,050
this to be at least once a day by a nun

00:02:38,070 --> 00:02:42,000
strict definition what we do at desert

00:02:40,050 --> 00:02:43,560
book is well every time we push to our

00:02:42,000 --> 00:02:45,540
repository we are going to take that

00:02:43,560 --> 00:02:47,790
cone we're going to build it and then

00:02:45,540 --> 00:02:49,320
we're going to test that code and then

00:02:47,790 --> 00:02:52,860
if we see fit we're going to deploy that

00:02:49,320 --> 00:02:54,239
code so that's kind of the difference

00:02:52,860 --> 00:02:55,680
really between continuous integration

00:02:54,239 --> 00:02:57,959
and continuous delivery is that

00:02:55,680 --> 00:02:59,100
continuous delivery not only you

00:02:57,959 --> 00:03:01,400
building and testing but you're also

00:02:59,100 --> 00:03:03,660
going to ship it automatically without

00:03:01,400 --> 00:03:07,520
really any approval you're trusting in

00:03:03,660 --> 00:03:09,630
your in your tests for the most part

00:03:07,520 --> 00:03:13,170
these are some of the tools that are out

00:03:09,630 --> 00:03:15,690
there the more popular ones I guess I

00:03:13,170 --> 00:03:17,400
should say we will be speaking or I will

00:03:15,690 --> 00:03:18,630
be speaking more on gitlab because

00:03:17,400 --> 00:03:20,940
that's what we use that desert book

00:03:18,630 --> 00:03:22,739
however the things I do discuss are

00:03:20,940 --> 00:03:26,040
going to transfer over fairly easy the

00:03:22,739 --> 00:03:28,070
tools are usually pretty similar so

00:03:26,040 --> 00:03:31,410
there's Travis CI and their circle CI

00:03:28,070 --> 00:03:34,590
circles you guys what solidus uses to

00:03:31,410 --> 00:03:38,640
test their code and there's code ship as

00:03:34,590 --> 00:03:41,549
well so this workbook this is kind of a

00:03:38,640 --> 00:03:45,060
bird's eye view for our development

00:03:41,549 --> 00:03:47,430
lifecycle we we code and then we push

00:03:45,060 --> 00:03:50,340
our code that code goes to our CI tool

00:03:47,430 --> 00:03:54,000
and that CI tool will build test and

00:03:50,340 --> 00:03:55,560
deploy and our deployment goes to a tool

00:03:54,000 --> 00:03:58,080
called the elastic Beanstalk it's an

00:03:55,560 --> 00:04:01,920
Amazon Web service and I'll go into that

00:03:58,080 --> 00:04:05,310
a little bit later the nice thing about

00:04:01,920 --> 00:04:07,200
this is our first kind of implementation

00:04:05,310 --> 00:04:08,519
was this was fairly similar however our

00:04:07,200 --> 00:04:11,280
build tests deploy was all in one

00:04:08,519 --> 00:04:13,170
process so we had a lot of issues where

00:04:11,280 --> 00:04:16,079
a deployment would fail and then we had

00:04:13,170 --> 00:04:19,079
to retry the entire process so we had to

00:04:16,079 --> 00:04:20,370
rebuild retest and then deploy even

00:04:19,079 --> 00:04:22,289
though the only thing that failed was

00:04:20,370 --> 00:04:24,660
deployment so one of the better things

00:04:22,289 --> 00:04:26,520
we've done is we separated that out this

00:04:24,660 --> 00:04:27,960
is a real example from one of our

00:04:26,520 --> 00:04:30,040
projects

00:04:27,960 --> 00:04:32,230
essentially these are we have four

00:04:30,040 --> 00:04:35,220
stages as what gitlab refers to them as

00:04:32,230 --> 00:04:38,140
there's build test release deploy and

00:04:35,220 --> 00:04:40,270
underneath each of those stages are jobs

00:04:38,140 --> 00:04:43,810
in these jobs run in parallel and each

00:04:40,270 --> 00:04:46,000
stage so when one of these jobs fails it

00:04:43,810 --> 00:04:47,380
will discontinue it will not continue

00:04:46,000 --> 00:04:51,940
down the pipeline so you can be safe

00:04:47,380 --> 00:04:53,470
that you you fail fast essentially what

00:04:51,940 --> 00:04:56,620
this is doing is we're building a docker

00:04:53,470 --> 00:04:58,980
image we're testing and linting and then

00:04:56,620 --> 00:05:02,230
we are going to upload our code to s3

00:04:58,980 --> 00:05:05,320
which then gets deployed to elastic

00:05:02,230 --> 00:05:07,210
Beanstalk bird's-eye view of what

00:05:05,320 --> 00:05:09,460
elastic Beanstalk looks like for us is

00:05:07,210 --> 00:05:11,470
we have an application load balancer

00:05:09,460 --> 00:05:14,320
this little balancer sits in front of

00:05:11,470 --> 00:05:18,520
one or more ec2 instances and it's

00:05:14,320 --> 00:05:21,310
backed by Postgres database the nice

00:05:18,520 --> 00:05:23,370
thing about this as well is our ec2

00:05:21,310 --> 00:05:26,370
instance as traffic increases we can

00:05:23,370 --> 00:05:30,340
scale up which is nice for the holidays

00:05:26,370 --> 00:05:32,080
if we look closer at the ec2 instances

00:05:30,340 --> 00:05:34,780
we actually have multiple docker

00:05:32,080 --> 00:05:37,630
containers running on each instance so

00:05:34,780 --> 00:05:40,480
we have a docker image which is a rail

00:05:37,630 --> 00:05:44,850
rails application and then we have a

00:05:40,480 --> 00:05:47,770
nginx image which is our web server so

00:05:44,850 --> 00:05:49,930
kind of to summarize all this I want to

00:05:47,770 --> 00:05:53,020
talk about why we as desert book are

00:05:49,930 --> 00:05:55,420
loving our CI tools and the biggest

00:05:53,020 --> 00:05:57,850
thing is we can focus more on coding and

00:05:55,420 --> 00:06:00,670
producing features rather than focusing

00:05:57,850 --> 00:06:03,040
on DevOps if you ask anyone here from

00:06:00,670 --> 00:06:06,160
desert book whether they are a DevOps

00:06:03,040 --> 00:06:07,990
person they will all tell you know um so

00:06:06,160 --> 00:06:10,270
the nice thing about our tools is we've

00:06:07,990 --> 00:06:13,150
only had to code it once and then we can

00:06:10,270 --> 00:06:15,490
just use it without hardly ever touching

00:06:13,150 --> 00:06:17,290
it it also it has increased our code

00:06:15,490 --> 00:06:19,060
quality so anytime we review something

00:06:17,290 --> 00:06:20,860
there have been tests there's been lint

00:06:19,060 --> 00:06:23,350
it code and we can look at that and see

00:06:20,860 --> 00:06:26,230
okay everything's passing it makes code

00:06:23,350 --> 00:06:28,240
reviews much easier and this also allows

00:06:26,230 --> 00:06:31,810
us to merge with less stress knowing

00:06:28,240 --> 00:06:34,600
that there is test coverage and the

00:06:31,810 --> 00:06:37,270
linting has been done however there are

00:06:34,600 --> 00:06:40,000
some cases where bugs do sneak into our

00:06:37,270 --> 00:06:41,350
code but because we push frequently it's

00:06:40,000 --> 00:06:43,990
it's very easy to

00:06:41,350 --> 00:06:46,450
back and say okay this is attributed to

00:06:43,990 --> 00:06:48,430
this this merger quest right here and so

00:06:46,450 --> 00:06:50,380
we can go in and more easily look at our

00:06:48,430 --> 00:06:54,700
code and I don't know if anyone here has

00:06:50,380 --> 00:06:57,670
ever not had the practice of pushing

00:06:54,700 --> 00:07:00,960
frequently to their repository but if

00:06:57,670 --> 00:07:03,940
you've ever had a conflict which spans

00:07:00,960 --> 00:07:09,010
hundreds of files then I think you know

00:07:03,940 --> 00:07:11,470
why this is nice so what are docker

00:07:09,010 --> 00:07:12,970
containers for those who don't or

00:07:11,470 --> 00:07:14,650
haven't worked with docker a docker

00:07:12,970 --> 00:07:17,140
container is essentially packaged

00:07:14,650 --> 00:07:20,470
software so I like to think of it as

00:07:17,140 --> 00:07:23,440
IKEA when you go to Ikea you're going to

00:07:20,470 --> 00:07:24,820
build out a living room for instance so

00:07:23,440 --> 00:07:26,730
if you want to build out your living

00:07:24,820 --> 00:07:28,900
room you're gonna purchase a couch and

00:07:26,730 --> 00:07:31,740
then you're gonna get a table and you

00:07:28,900 --> 00:07:35,230
might get some artwork some pictures

00:07:31,740 --> 00:07:37,390
this is essentially what docker is where

00:07:35,230 --> 00:07:39,760
when you want to go and build for

00:07:37,390 --> 00:07:41,260
instance a web service you can go in you

00:07:39,760 --> 00:07:45,270
can get your web server which could be

00:07:41,260 --> 00:07:47,740
nginx or Apache and you can grab your

00:07:45,270 --> 00:07:50,080
your your application for your code so

00:07:47,740 --> 00:07:53,020
that might be a java image or Python or

00:07:50,080 --> 00:07:55,090
whatever and then you can also grab a

00:07:53,020 --> 00:07:58,480
database as well which could be Postgres

00:07:55,090 --> 00:08:00,610
my sequel sequel server so that's how I

00:07:58,480 --> 00:08:02,020
like to think of docker all these images

00:08:00,610 --> 00:08:04,450
will live in what's called a docker

00:08:02,020 --> 00:08:08,050
registry I like to think of this as kind

00:08:04,450 --> 00:08:09,460
of like a git repo for docker images so

00:08:08,050 --> 00:08:13,690
when you push a new image it gets

00:08:09,460 --> 00:08:15,550
versioned and it's in the cloud just

00:08:13,690 --> 00:08:19,630
some terms I wanted to define before I

00:08:15,550 --> 00:08:22,270
continue is host a in docker the host is

00:08:19,630 --> 00:08:25,300
usually your it is your operating system

00:08:22,270 --> 00:08:28,650
so this could be your laptop that's

00:08:25,300 --> 00:08:31,090
running Mac OS Linux could be Windows

00:08:28,650 --> 00:08:33,490
whatever whatever your operating system

00:08:31,090 --> 00:08:35,919
is where doctors installed and then you

00:08:33,490 --> 00:08:38,169
have the notion of docker volumes this

00:08:35,919 --> 00:08:39,640
can be confusing to those who are kind

00:08:38,169 --> 00:08:40,990
of new with docker it took me a while

00:08:39,640 --> 00:08:43,450
it's kind of rot in the head around it

00:08:40,990 --> 00:08:46,150
essentially it's a little bit like a

00:08:43,450 --> 00:08:48,040
symbolic link what you can choose a file

00:08:46,150 --> 00:08:50,200
directory to create a volume out of and

00:08:48,040 --> 00:08:52,630
you can mount that onto container to

00:08:50,200 --> 00:08:54,730
share that file or that directory with

00:08:52,630 --> 00:08:57,970
the container from the host

00:08:54,730 --> 00:09:00,100
so kind of summarize and I'm a visual

00:08:57,970 --> 00:09:02,470
learner myself so I like to have some

00:09:00,100 --> 00:09:04,720
visual aids you have a host this is your

00:09:02,470 --> 00:09:07,900
operating system and that host runs a

00:09:04,720 --> 00:09:09,550
container so something important to know

00:09:07,900 --> 00:09:11,860
about this container is it is isolated

00:09:09,550 --> 00:09:13,900
so by default a container is not going

00:09:11,860 --> 00:09:15,670
to be able to reach out to your your

00:09:13,900 --> 00:09:18,760
operating system or your host and wreak

00:09:15,670 --> 00:09:20,200
havoc on files or maybe some malware

00:09:18,760 --> 00:09:22,330
snuck in or something it's going to be

00:09:20,200 --> 00:09:25,870
very difficult so that container is

00:09:22,330 --> 00:09:28,000
isolated but you can mount volumes so

00:09:25,870 --> 00:09:30,700
for instance on this host we have a

00:09:28,000 --> 00:09:33,040
volume for var slash log and it gets

00:09:30,700 --> 00:09:35,950
mounted onto the container app slash log

00:09:33,040 --> 00:09:38,020
you can you know of course choose and

00:09:35,950 --> 00:09:39,790
configure that but essentially what

00:09:38,020 --> 00:09:42,010
happens is if the host adds a file to

00:09:39,790 --> 00:09:43,540
that directory you'll be able to see on

00:09:42,010 --> 00:09:44,950
the container and vice versa if you had

00:09:43,540 --> 00:09:47,380
a file in the container you'll be able

00:09:44,950 --> 00:09:49,270
to see that file on the host as well so

00:09:47,380 --> 00:09:53,980
this can be very valuable especially if

00:09:49,270 --> 00:09:55,900
you are shipping logs you can mount a

00:09:53,980 --> 00:10:00,160
directory on that shipper so I can just

00:09:55,900 --> 00:10:04,390
collect those logs for you so you can

00:10:00,160 --> 00:10:07,240
also bind to ports so by default again

00:10:04,390 --> 00:10:08,980
containers are isolated you can't expose

00:10:07,240 --> 00:10:11,530
ports and you can buy into it on the

00:10:08,980 --> 00:10:14,530
host so in this example what's happening

00:10:11,530 --> 00:10:17,350
is I'm binding to the container port

00:10:14,530 --> 00:10:19,540
3000 to port 80 on the host so if I were

00:10:17,350 --> 00:10:21,130
to run rails on the container with this

00:10:19,540 --> 00:10:24,040
set it set up I could go to my browser

00:10:21,130 --> 00:10:27,520
at localhost and it would pass that on

00:10:24,040 --> 00:10:31,030
to the container which is my rails app

00:10:27,520 --> 00:10:36,640
and serve that code so why does desert

00:10:31,030 --> 00:10:37,990
book use docker I don't know if anyone

00:10:36,640 --> 00:10:40,870
else has had this experience but there

00:10:37,990 --> 00:10:42,640
have been projects where what I do is I

00:10:40,870 --> 00:10:45,760
ask this H onto the server I log into

00:10:42,640 --> 00:10:48,190
the server and I do a git pull and it's

00:10:45,760 --> 00:10:51,580
sometimes a bundle install or bundle

00:10:48,190 --> 00:10:56,350
update or I'll do a sudo apt-get upgrade

00:10:51,580 --> 00:10:58,480
and this is very dangerous also when you

00:10:56,350 --> 00:11:01,030
are keeping track of your libraries like

00:10:58,480 --> 00:11:03,400
this I like to call it tech rot some

00:11:01,030 --> 00:11:05,440
people call it tech drift but you lose

00:11:03,400 --> 00:11:07,270
track of what libraries are installed on

00:11:05,440 --> 00:11:08,830
your operating system and what's there

00:11:07,270 --> 00:11:11,890
and sometimes version

00:11:08,830 --> 00:11:13,290
get out of control and there's times

00:11:11,890 --> 00:11:15,970
where you don't really know how to

00:11:13,290 --> 00:11:17,440
repeat the process of redeployment

00:11:15,970 --> 00:11:19,990
because it's already set there and you

00:11:17,440 --> 00:11:22,900
forget this can be bad when the server

00:11:19,990 --> 00:11:24,850
goes down I can take a while to kind of

00:11:22,900 --> 00:11:28,720
figure out how you bring it back up it's

00:11:24,850 --> 00:11:29,980
very easily broken so I use the help of

00:11:28,720 --> 00:11:33,010
the Internet to come up with some memes

00:11:29,980 --> 00:11:37,270
as to kind of emphasize my point of why

00:11:33,010 --> 00:11:38,350
docker has been great for us I don't

00:11:37,270 --> 00:11:41,110
know if I mentioned this earlier but

00:11:38,350 --> 00:11:43,420
because docker runs on most operating

00:11:41,110 --> 00:11:45,850
systems you can essentially take that

00:11:43,420 --> 00:11:47,680
same image and run it anywhere so let's

00:11:45,850 --> 00:11:49,870
say I was using a Windows server before

00:11:47,680 --> 00:11:52,120
I can then take that docker image and I

00:11:49,870 --> 00:11:55,240
can put it up on a Linux Linux server

00:11:52,120 --> 00:11:57,010
without any troubles it will transfer

00:11:55,240 --> 00:11:58,240
and vice versa if I have something

00:11:57,010 --> 00:12:00,960
running on Linux I can move it over to

00:11:58,240 --> 00:12:03,280
Windows as long as it's running docker

00:12:00,960 --> 00:12:05,890
works on my machine I think we've all

00:12:03,280 --> 00:12:08,890
heard that one before I said that's this

00:12:05,890 --> 00:12:12,730
one quite a bit and my favorite is to

00:12:08,890 --> 00:12:14,860
sum up docker is will strip your machine

00:12:12,730 --> 00:12:17,140
then and that's essentially what docker

00:12:14,860 --> 00:12:18,460
is you are creating a fresh environment

00:12:17,140 --> 00:12:21,010
and you are shipping that to production

00:12:18,460 --> 00:12:23,200
so a desert or a book we we have a

00:12:21,010 --> 00:12:25,360
staged cluster and then we have our

00:12:23,200 --> 00:12:27,040
production cluster so our staged cluster

00:12:25,360 --> 00:12:28,570
is actually the same exact thing as what

00:12:27,040 --> 00:12:33,660
our production will be and this allows

00:12:28,570 --> 00:12:36,100
us to really understand what and kind of

00:12:33,660 --> 00:12:38,790
imitate what it's going to be on

00:12:36,100 --> 00:12:41,380
production in a reliable way

00:12:38,790 --> 00:12:44,020
so how do we containerize our rails

00:12:41,380 --> 00:12:45,460
applications I'm not going to go into

00:12:44,020 --> 00:12:47,830
too much specifics on this but this is

00:12:45,460 --> 00:12:51,820
an example docker file it's very basic

00:12:47,830 --> 00:12:55,830
and the docker file is really what it

00:12:51,820 --> 00:12:59,140
tells docker how to build your image I

00:12:55,830 --> 00:13:03,100
essentially this will sit in the root of

00:12:59,140 --> 00:13:04,600
your project usually and this I'll go

00:13:03,100 --> 00:13:06,540
through kind of step by step just give a

00:13:04,600 --> 00:13:08,680
summary so you know what's going on here

00:13:06,540 --> 00:13:10,240
what we're doing is we're borrowing from

00:13:08,680 --> 00:13:12,340
a Ruby image when we have that from

00:13:10,240 --> 00:13:14,020
statement so we're saying I want to use

00:13:12,340 --> 00:13:16,300
the Ruby image this makes it so we don't

00:13:14,020 --> 00:13:18,310
need to go in and install Ruby ourselves

00:13:16,300 --> 00:13:21,280
we want to keep things dry and we don't

00:13:18,310 --> 00:13:21,970
want to we don't want to reinvent the

00:13:21,280 --> 00:13:24,729
wheel

00:13:21,970 --> 00:13:27,429
I then copy my application code into a

00:13:24,729 --> 00:13:28,959
directory called slash app you can call

00:13:27,429 --> 00:13:31,539
that whatever you want I just chose

00:13:28,959 --> 00:13:33,579
slash app and then I run some commands

00:13:31,539 --> 00:13:35,649
here these are just pretty much

00:13:33,579 --> 00:13:37,449
installing nodejs and yarn which is

00:13:35,649 --> 00:13:39,249
usually required by later rails versions

00:13:37,449 --> 00:13:42,879
you also see I have build essential

00:13:39,249 --> 00:13:44,169
right here if you want to get real

00:13:42,879 --> 00:13:45,519
technical I can actually go into this

00:13:44,169 --> 00:13:47,859
afterward it's probably not a good thing

00:13:45,519 --> 00:13:50,709
but it is required to build certain gems

00:13:47,859 --> 00:13:52,869
so ruby is built on top of C and some

00:13:50,709 --> 00:13:55,149
gems need C compilers and they in order

00:13:52,869 --> 00:13:57,970
to build themselves so I do need that

00:13:55,149 --> 00:14:00,579
build essential statement there and then

00:13:57,970 --> 00:14:02,709
I of course I just install all the

00:14:00,579 --> 00:14:05,759
dependencies I need from yarn and

00:14:02,709 --> 00:14:09,329
bundler and pre-compiled my assets I

00:14:05,759 --> 00:14:12,069
make sure port 3,000 X is accessible and

00:14:09,329 --> 00:14:14,499
can be bound to and then I run this

00:14:12,069 --> 00:14:17,259
command bundle exec Puma - C config

00:14:14,499 --> 00:14:18,970
slash Puma dot RB so this command just

00:14:17,259 --> 00:14:21,519
sets the default command when you run

00:14:18,970 --> 00:14:23,109
the image it is going to start your Puma

00:14:21,519 --> 00:14:25,569
app server if you don't know what Puma

00:14:23,109 --> 00:14:29,889
is it comes with most later rails bears

00:14:25,569 --> 00:14:32,409
are all kind of late rails versions it

00:14:29,889 --> 00:14:34,269
is your application server its job is to

00:14:32,409 --> 00:14:38,409
pretty much take that ARB file and

00:14:34,269 --> 00:14:40,809
compile it to HTML or Jason or whatever

00:14:38,409 --> 00:14:44,499
it's taken Ruby and converting it to you

00:14:40,809 --> 00:14:47,019
so it can be served to a browser so we

00:14:44,499 --> 00:14:48,519
can build it with docker bill dot don't

00:14:47,019 --> 00:14:51,549
get too much too caught up in this this

00:14:48,519 --> 00:14:55,809
is just kind of an example you can see

00:14:51,549 --> 00:14:58,689
this image is fairly large so you know

00:14:55,809 --> 00:14:59,979
warehouse is pretty big and there are

00:14:58,689 --> 00:15:01,509
some techniques to bring this down as

00:14:59,979 --> 00:15:02,439
well for instance I brought up that

00:15:01,509 --> 00:15:04,119
build essentials

00:15:02,439 --> 00:15:05,649
once you've compiled you don't really

00:15:04,119 --> 00:15:09,970
need those libraries anymore you can get

00:15:05,649 --> 00:15:11,470
rid of them but keep it simple yeah so

00:15:09,970 --> 00:15:12,789
you can see that I'm running this image

00:15:11,470 --> 00:15:14,799
right here I run it in production mode

00:15:12,789 --> 00:15:19,449
that's what I pre compiled the assets

00:15:14,799 --> 00:15:21,009
for and everything is working so lots

00:15:19,449 --> 00:15:22,599
come out of my mouth right now I just

00:15:21,009 --> 00:15:24,959
want to make sure are there any

00:15:22,599 --> 00:15:29,229
questions so far

00:15:24,959 --> 00:15:31,559
with what I've talked about awesome so

00:15:29,229 --> 00:15:34,239
let's talk about elastic Beanstalk then

00:15:31,559 --> 00:15:36,579
has anyone here does anyone use the last

00:15:34,239 --> 00:15:38,989
of Beanstalk and

00:15:36,579 --> 00:15:42,709
okay so this is gonna be new to most of

00:15:38,989 --> 00:15:46,610
you so we are definitely an AWS shop at

00:15:42,709 --> 00:15:51,529
desert book you can thank Jeff Chang up

00:15:46,610 --> 00:15:52,579
there in the corner for that he pushes

00:15:51,529 --> 00:15:55,459
AWS quite a bit

00:15:52,579 --> 00:15:59,660
so essentially elastic Beanstalk is a

00:15:55,459 --> 00:16:01,850
way to orchestrate our web services we

00:15:59,660 --> 00:16:03,589
saw that diagram before it takes care of

00:16:01,850 --> 00:16:06,019
all of that the application load

00:16:03,589 --> 00:16:08,089
balancer the ec2 instances and it scales

00:16:06,019 --> 00:16:10,339
for us and we can choose how to scale as

00:16:08,089 --> 00:16:11,959
well so if we want to scale by CPU if we

00:16:10,339 --> 00:16:14,720
want to scale by networking or network

00:16:11,959 --> 00:16:17,749
out we can set that very easily by just

00:16:14,720 --> 00:16:20,179
clicking or setting a value of how we

00:16:17,749 --> 00:16:22,009
want to scale so this is great for us

00:16:20,179 --> 00:16:24,529
because it does read book we like to be

00:16:22,009 --> 00:16:25,699
lazy but not in the negative sense we

00:16:24,529 --> 00:16:28,790
want to make sure that we're not working

00:16:25,699 --> 00:16:30,410
on a weekend or on a holiday and there's

00:16:28,790 --> 00:16:33,319
often times where there are big events

00:16:30,410 --> 00:16:36,410
that happen for our company on weekends

00:16:33,319 --> 00:16:39,170
or holidays that we know we're going to

00:16:36,410 --> 00:16:41,209
receive a huge hit from traffic so the

00:16:39,170 --> 00:16:42,799
nice thing about the switch to elastic

00:16:41,209 --> 00:16:47,739
beanstalk is we have not had to worry

00:16:42,799 --> 00:16:50,089
about any going down for the most part

00:16:47,739 --> 00:16:51,860
there's also health checks so this is

00:16:50,089 --> 00:16:53,239
nice because as I said before bugs do

00:16:51,860 --> 00:16:56,360
make it indoor cones some of them can be

00:16:53,239 --> 00:16:58,220
very bad so with these health checks

00:16:56,360 --> 00:17:00,379
what elastic Beanstalk will do is it can

00:16:58,220 --> 00:17:02,600
sense that a instance is unhealthy or

00:17:00,379 --> 00:17:05,029
maybe it's receiving too many 500s and

00:17:02,600 --> 00:17:07,510
it will pull that instance out and it

00:17:05,029 --> 00:17:10,059
will either roll back to a later version

00:17:07,510 --> 00:17:13,880
an earlier version what I mean by that

00:17:10,059 --> 00:17:15,439
or it will spin up a new instance let's

00:17:13,880 --> 00:17:17,209
say the instance itself was just

00:17:15,439 --> 00:17:20,120
unhealthy maybe it ran out of memory and

00:17:17,209 --> 00:17:22,579
it needed to be rebooted or something

00:17:20,120 --> 00:17:25,279
it's also very configurable so we can

00:17:22,579 --> 00:17:28,250
choose what type of instance we want so

00:17:25,279 --> 00:17:30,470
if we need a smaller instance we can set

00:17:28,250 --> 00:17:31,970
that so it's only using small small

00:17:30,470 --> 00:17:35,419
servers or if we need more memory and

00:17:31,970 --> 00:17:38,870
and and more CPU then we can also

00:17:35,419 --> 00:17:40,610
upgrade to larger instance as well the

00:17:38,870 --> 00:17:42,950
biggest thing about it is you're not

00:17:40,610 --> 00:17:44,539
paying for the tool it's doing all of

00:17:42,950 --> 00:17:46,549
this for you all you're paying for are

00:17:44,539 --> 00:17:49,100
your AWS resources so if you're only

00:17:46,549 --> 00:17:50,600
using one AWS ec2 and

00:17:49,100 --> 00:17:54,230
since that is the only thing you're

00:17:50,600 --> 00:17:56,630
paying for I wanted to go over these

00:17:54,230 --> 00:17:58,460
terms real quick this is kind of what

00:17:56,630 --> 00:17:59,630
makes up elastic beanstalk you have your

00:17:58,460 --> 00:18:00,200
application that's pretty

00:17:59,630 --> 00:18:03,530
straightforward

00:18:00,200 --> 00:18:06,080
each application has at least one

00:18:03,530 --> 00:18:07,760
environment so usually this is typically

00:18:06,080 --> 00:18:09,919
going to be like development staging

00:18:07,760 --> 00:18:12,230
production or maybe review if you do

00:18:09,919 --> 00:18:15,440
review apps and then there's something

00:18:12,230 --> 00:18:17,480
called an application version this is a

00:18:15,440 --> 00:18:18,950
lot like a git commit where it just

00:18:17,480 --> 00:18:20,809
versions your deployment so it knows

00:18:18,950 --> 00:18:23,539
where to if it does need to rollback or

00:18:20,809 --> 00:18:25,789
if you need to rollback manually or go

00:18:23,539 --> 00:18:27,650
forward that's what that takes care of

00:18:25,789 --> 00:18:29,179
and every application version is

00:18:27,650 --> 00:18:29,900
attached to what's called a source

00:18:29,179 --> 00:18:31,909
package

00:18:29,900 --> 00:18:34,429
this source package is essentially just

00:18:31,909 --> 00:18:37,190
as if file that contains your code or

00:18:34,429 --> 00:18:40,610
any configuration you have for for

00:18:37,190 --> 00:18:41,929
elastic Beanstalk this is an example a

00:18:40,610 --> 00:18:44,330
real world example from one of our

00:18:41,929 --> 00:18:45,919
projects if you go to the AWS console

00:18:44,330 --> 00:18:48,590
and look at elastic Beanstalk this is

00:18:45,919 --> 00:18:50,900
one of our applications running it's got

00:18:48,590 --> 00:18:53,210
two environments there's a development

00:18:50,900 --> 00:18:55,220
and a production one if you look at the

00:18:53,210 --> 00:18:57,650
running version you can actually see the

00:18:55,220 --> 00:18:59,330
actual version right there don't get too

00:18:57,650 --> 00:19:02,210
caught up in that we you label at

00:18:59,330 --> 00:19:03,679
yourself it just needs to be unique the

00:19:02,210 --> 00:19:05,990
nice thing about it is you can look at

00:19:03,679 --> 00:19:07,460
it green means healthy yellow means it's

00:19:05,990 --> 00:19:10,130
not doing so well and red means

00:19:07,460 --> 00:19:11,539
something bad has happened so when you

00:19:10,130 --> 00:19:13,669
look at it you can kind of tell from the

00:19:11,539 --> 00:19:14,929
outside oh what is going on here and

00:19:13,669 --> 00:19:17,659
immediately go check out your

00:19:14,929 --> 00:19:21,740
environment if you don't have any any

00:19:17,659 --> 00:19:23,380
alerts setup or anything like that as I

00:19:21,740 --> 00:19:25,610
mentioned before application versions

00:19:23,380 --> 00:19:27,530
you can view them they here's another

00:19:25,610 --> 00:19:30,789
example of that page and we have these

00:19:27,530 --> 00:19:33,679
labels this label does have to be unique

00:19:30,789 --> 00:19:36,020
the way we've done it is we just call it

00:19:33,679 --> 00:19:37,909
project name the branch as well and then

00:19:36,020 --> 00:19:40,309
the commit sha right after it so it

00:19:37,909 --> 00:19:43,130
ensures uniqueness and we can kind of

00:19:40,309 --> 00:19:45,110
trace that that package back to a git

00:19:43,130 --> 00:19:46,700
commit so when we look at a deployment

00:19:45,110 --> 00:19:49,159
and why it's doing bad then we can be

00:19:46,700 --> 00:19:52,100
like okay this deployment is attached to

00:19:49,159 --> 00:19:57,380
this this commit right here let's look

00:19:52,100 --> 00:19:59,780
at what's going on and I guess I should

00:19:57,380 --> 00:20:02,000
mention as well these source packages

00:19:59,780 --> 00:20:02,870
they just get uploaded to s3 and you'll

00:20:02,000 --> 00:20:05,180
ask the Beanstalk

00:20:02,870 --> 00:20:07,370
just pull from that and deploy it and

00:20:05,180 --> 00:20:10,220
I'll talk about a little bit more about

00:20:07,370 --> 00:20:11,920
that a little bit later but for now I

00:20:10,220 --> 00:20:16,670
kind of just wanted to do a little

00:20:11,920 --> 00:20:18,230
example of creating application in

00:20:16,670 --> 00:20:20,809
elastic Beanstalk just so you can kind

00:20:18,230 --> 00:20:22,460
of get a feel for it so I go in I create

00:20:20,809 --> 00:20:26,240
it I'm gonna give it a name I just call

00:20:22,460 --> 00:20:27,770
it ecommerce store you don't have to

00:20:26,240 --> 00:20:32,000
give it a description I went ahead and

00:20:27,770 --> 00:20:34,040
did that and then I go and click create

00:20:32,000 --> 00:20:36,230
and what you'll see is an application

00:20:34,040 --> 00:20:39,020
with no environments so I need to go and

00:20:36,230 --> 00:20:40,490
create an environment so I choose web

00:20:39,020 --> 00:20:43,700
sort of environment so I'm gonna be

00:20:40,490 --> 00:20:44,240
doing a web application and I'm just

00:20:43,700 --> 00:20:46,340
going to change that

00:20:44,240 --> 00:20:49,190
env to production so this is gonna be my

00:20:46,340 --> 00:20:51,559
production environment and then you can

00:20:49,190 --> 00:20:53,179
choose a platform so you I'm choosing

00:20:51,559 --> 00:20:55,610
multik this we're talking about docker

00:20:53,179 --> 00:20:58,970
I'm choosing a multi container docker

00:20:55,610 --> 00:21:00,080
environment but there are many others

00:20:58,970 --> 00:21:02,630
that you can choose from like node

00:21:00,080 --> 00:21:05,210
Python and so forth and for now I'm just

00:21:02,630 --> 00:21:06,590
gonna use sample application and I'm

00:21:05,210 --> 00:21:09,470
gonna configure some more options before

00:21:06,590 --> 00:21:11,360
I actually create the environment the

00:21:09,470 --> 00:21:13,280
first being I want to choose my instance

00:21:11,360 --> 00:21:17,870
type I'm gonna switch from a micro to a

00:21:13,280 --> 00:21:19,670
medium instance I'm just real basic and

00:21:17,870 --> 00:21:21,410
then I want to auto scale so I want to

00:21:19,670 --> 00:21:23,840
make sure that when I do get traffic I

00:21:21,410 --> 00:21:26,929
scale up so I put a also put a load

00:21:23,840 --> 00:21:28,670
balancer in front and I said how many my

00:21:26,929 --> 00:21:31,130
max and minimum instances that I should

00:21:28,670 --> 00:21:33,559
have and then you can also choose how

00:21:31,130 --> 00:21:37,309
you want to scale so again it can be CPU

00:21:33,559 --> 00:21:39,890
Network whatever you choose so I'll go

00:21:37,309 --> 00:21:44,020
ahead and save that and then next I want

00:21:39,890 --> 00:21:47,030
to I want to create a database so that

00:21:44,020 --> 00:21:49,070
my instances can connect to a database

00:21:47,030 --> 00:21:52,580
so obviously so I'm gonna make it

00:21:49,070 --> 00:21:53,929
Postgres what happens when I do create

00:21:52,580 --> 00:21:55,490
this is the elastic Beanstalk does

00:21:53,929 --> 00:21:57,340
automatically provide environment

00:21:55,490 --> 00:21:59,600
variables in order to connect

00:21:57,340 --> 00:22:03,200
essentially giving a username and

00:21:59,600 --> 00:22:04,880
password click Save and last of all I'm

00:22:03,200 --> 00:22:06,679
gonna set some environment variables for

00:22:04,880 --> 00:22:10,280
my default and it's just going to be my

00:22:06,679 --> 00:22:14,300
rails master key so this is kind of a

00:22:10,280 --> 00:22:15,540
very basic setup in a nutshell click

00:22:14,300 --> 00:22:17,760
Save

00:22:15,540 --> 00:22:19,170
and I can actually go in and now I want

00:22:17,760 --> 00:22:20,910
to create my environment it's gonna put

00:22:19,170 --> 00:22:23,760
all this together create the database

00:22:20,910 --> 00:22:26,100
spin up the instances create an auto

00:22:23,760 --> 00:22:28,400
scaling group handles all that it takes

00:22:26,100 --> 00:22:30,720
about you can take about ten minutes

00:22:28,400 --> 00:22:32,940
luckily I split that out so you guys

00:22:30,720 --> 00:22:35,790
didn't have to wait and you'll see a

00:22:32,940 --> 00:22:38,310
page that says gives you your health and

00:22:35,790 --> 00:22:40,140
you can see that's okay you can also see

00:22:38,310 --> 00:22:42,420
the events and there's a button to

00:22:40,140 --> 00:22:44,790
upload and deploy your actual code when

00:22:42,420 --> 00:22:50,580
you want to and we can see our sample

00:22:44,790 --> 00:22:53,370
application right here so again what's

00:22:50,580 --> 00:22:55,590
kind of what did what just happened here

00:22:53,370 --> 00:22:58,470
so I want to re-emphasize kind of what

00:22:55,590 --> 00:23:00,360
we did again a bird's-eye view what we

00:22:58,470 --> 00:23:03,120
did was we created a web service with a

00:23:00,360 --> 00:23:06,270
load balancer in front and one or more

00:23:03,120 --> 00:23:11,070
ec2 instances that can that we can scale

00:23:06,270 --> 00:23:12,960
to with the Postgres database so now how

00:23:11,070 --> 00:23:16,590
do we deploy our code so again we've got

00:23:12,960 --> 00:23:19,170
this this multi container environment

00:23:16,590 --> 00:23:21,750
where we have in this example a rails

00:23:19,170 --> 00:23:24,360
application container and an engine X

00:23:21,750 --> 00:23:25,740
container running so this is where I

00:23:24,360 --> 00:23:28,140
kind of want to talk about that source

00:23:25,740 --> 00:23:30,600
package a little bit more so because

00:23:28,140 --> 00:23:32,250
we're running a containerized

00:23:30,600 --> 00:23:35,340
environment there's an important file

00:23:32,250 --> 00:23:37,620
called the docker run Eddy of AWS Jason

00:23:35,340 --> 00:23:39,390
kind of a tongue twister so this is very

00:23:37,620 --> 00:23:42,690
important it is if you're familiar with

00:23:39,390 --> 00:23:44,670
docker compose it is essentially the AWS

00:23:42,690 --> 00:23:47,340
is flavor of docker compose and it's

00:23:44,670 --> 00:23:49,740
telling AWS how to organize that

00:23:47,340 --> 00:23:52,830
environment so back to the IKEA thing it

00:23:49,740 --> 00:23:54,240
is essentially your partner telling you

00:23:52,830 --> 00:23:55,680
this is where the couch goes this is

00:23:54,240 --> 00:23:58,770
where the table goes and don't question

00:23:55,680 --> 00:24:00,930
me on it so that's the best way to

00:23:58,770 --> 00:24:02,400
explain it right there

00:24:00,930 --> 00:24:04,110
I wouldn't get too mixed up with some of

00:24:02,400 --> 00:24:06,870
these files but we've got my nginx

00:24:04,110 --> 00:24:08,970
config zipped up in there as well that's

00:24:06,870 --> 00:24:12,180
just I'm gonna mount that onto the nginx

00:24:08,970 --> 00:24:14,670
container just so nginx knows how to how

00:24:12,180 --> 00:24:16,200
to operate and it's not eebee extensions

00:24:14,670 --> 00:24:17,760
don't worry too much about that either

00:24:16,200 --> 00:24:19,170
this is where you can put some scripts

00:24:17,760 --> 00:24:23,310
that you want to run for your post

00:24:19,170 --> 00:24:25,290
deployment as well as you can also kind

00:24:23,310 --> 00:24:27,300
of add any variables or anything like

00:24:25,290 --> 00:24:28,860
that in in that file it's it's

00:24:27,300 --> 00:24:30,870
essentially just any any

00:24:28,860 --> 00:24:32,220
extensions you can put migrations in

00:24:30,870 --> 00:24:35,309
there if you wanted to run migrations

00:24:32,220 --> 00:24:38,460
every time so this this file gets

00:24:35,309 --> 00:24:40,320
uploaded to s3 and an application

00:24:38,460 --> 00:24:42,030
version gets created to point to that

00:24:40,320 --> 00:24:44,010
file and then you can go into elastic

00:24:42,030 --> 00:24:45,000
Beanstalk and say hey upgrade to this

00:24:44,010 --> 00:24:46,799
version right here

00:24:45,000 --> 00:24:49,260
and you'll ask the Beanstalk will take

00:24:46,799 --> 00:24:52,140
that version in that package and it

00:24:49,260 --> 00:24:55,610
extracts it onto every new ec2 instance

00:24:52,140 --> 00:24:58,730
and spins up new ec2 instances for you

00:24:55,610 --> 00:25:01,200
so let's talk a little bit about this

00:24:58,730 --> 00:25:06,330
again we've got an architecture that

00:25:01,200 --> 00:25:09,030
looks like this so what we're gonna do

00:25:06,330 --> 00:25:11,220
is what that file really does is it

00:25:09,030 --> 00:25:13,200
defines an image so you you well

00:25:11,220 --> 00:25:14,910
essentially you define containers in

00:25:13,200 --> 00:25:17,549
every container is going to be attached

00:25:14,910 --> 00:25:19,140
to an image you can specify mount points

00:25:17,549 --> 00:25:21,210
that just says which volumes you want to

00:25:19,140 --> 00:25:22,830
mount we talked about volumes a little

00:25:21,210 --> 00:25:25,140
bit it's a file or directory that you

00:25:22,830 --> 00:25:27,330
can mount on to the container so I

00:25:25,140 --> 00:25:30,299
actually do this for our Puma socket

00:25:27,330 --> 00:25:32,280
file I will mount it onto the host and

00:25:30,299 --> 00:25:34,020
the host then mounts it onto the nginx

00:25:32,280 --> 00:25:36,330
container in that Sanjana communicates

00:25:34,020 --> 00:25:39,179
with our rails application

00:25:36,330 --> 00:25:41,610
there's also another noteworthy thing

00:25:39,179 --> 00:25:44,669
here authentication so sometimes we do

00:25:41,610 --> 00:25:47,850
have private images that are kind of

00:25:44,669 --> 00:25:50,460
behind a password-protected wall there

00:25:47,850 --> 00:25:52,919
is a way to to find what you do is it's

00:25:50,460 --> 00:25:55,440
you can look it up on docker on the

00:25:52,919 --> 00:25:57,900
exact format of the file but you can

00:25:55,440 --> 00:26:00,390
upload it to s3 and it essentially it

00:25:57,900 --> 00:26:02,820
has your where your registry is located

00:26:00,390 --> 00:26:04,559
your username or password and in the

00:26:02,820 --> 00:26:06,450
docker run that idea was just that Jason

00:26:04,559 --> 00:26:10,770
you just defined where that what bucket

00:26:06,450 --> 00:26:12,090
is it is in in s3 and the key to where

00:26:10,770 --> 00:26:17,580
that file is so like the file name or

00:26:12,090 --> 00:26:20,549
directory so we've made it past another

00:26:17,580 --> 00:26:24,630
another hump any questions about

00:26:20,549 --> 00:26:27,769
anything I've talked about so far yeah

00:26:24,630 --> 00:26:27,769
[Music]

00:26:34,610 --> 00:26:40,710
mmm that's hard a little bit so it

00:26:38,580 --> 00:26:42,450
obvious does in a dovish does this all

00:26:40,710 --> 00:26:44,490
the time - they've got services

00:26:42,450 --> 00:26:47,070
like overlap quite a bit and like

00:26:44,490 --> 00:26:49,350
they're different in different ways that

00:26:47,070 --> 00:26:52,800
is kind of kubernetes because abuse does

00:26:49,350 --> 00:26:56,040
offer kubernetes elastic beanstalk is a

00:26:52,800 --> 00:27:00,030
little bit similar it's using what they

00:26:56,040 --> 00:27:03,420
call ekr elastic container registry or

00:27:00,030 --> 00:27:09,000
ECR it does like it uses that quite a

00:27:03,420 --> 00:27:10,980
bit and it uses their their tasks I

00:27:09,000 --> 00:27:13,380
can't remember the terminology for it

00:27:10,980 --> 00:27:15,270
but they are different but they are

00:27:13,380 --> 00:27:18,030
similar at the same time I wouldn't say

00:27:15,270 --> 00:27:20,280
it's a competitor I would say I would

00:27:18,030 --> 00:27:23,010
call it more like they're different

00:27:20,280 --> 00:27:24,720
enough to say like this is good in this

00:27:23,010 --> 00:27:26,930
situation this is good for us in this

00:27:24,720 --> 00:27:26,930
situation

00:27:33,620 --> 00:27:40,200
yeah yeah I would say there's a little

00:27:36,480 --> 00:27:41,820
less hands-on stuff and I'm not really

00:27:40,200 --> 00:27:43,700
familiar with kubernetes but I feel like

00:27:41,820 --> 00:27:47,220
there's a lot of hands-on stuff still

00:27:43,700 --> 00:27:49,290
that goes on the elastic Beanstalk is a

00:27:47,220 --> 00:28:21,450
it's a very simple way to just say hey

00:27:49,290 --> 00:28:22,950
deploy this yeah anyway yeah definitely

00:28:21,450 --> 00:28:25,590
stick with what what you're comfortable

00:28:22,950 --> 00:28:29,490
with as well because that's if something

00:28:25,590 --> 00:28:30,930
does go bad in your DevOps you're gonna

00:28:29,490 --> 00:28:35,240
have a hard time if you don't really

00:28:30,930 --> 00:28:38,970
understand the tool you're using okay

00:28:35,240 --> 00:28:41,070
okay sweet so let's go back to our CI

00:28:38,970 --> 00:28:44,160
this is the example pipeline that we

00:28:41,070 --> 00:28:47,070
have here I'm gonna kind of go through a

00:28:44,160 --> 00:28:48,930
little bit real quickly about gitlab CI

00:28:47,070 --> 00:28:50,970
because that's what we use again this

00:28:48,930 --> 00:28:55,440
will transfer over to circle CI or

00:28:50,970 --> 00:28:56,220
whatever CI tool the idea is at least so

00:28:55,440 --> 00:28:57,720
yeah

00:28:56,220 --> 00:29:00,000
there's something called the gitlab CI

00:28:57,720 --> 00:29:01,500
llamo this is just your config on how

00:29:00,000 --> 00:29:03,360
you define everything again it sits in

00:29:01,500 --> 00:29:05,309
the root of your project and that's

00:29:03,360 --> 00:29:08,429
where you define the jobs and what

00:29:05,309 --> 00:29:12,000
stages to run those jobs in so here's a

00:29:08,429 --> 00:29:14,070
little a basic starter file i define

00:29:12,000 --> 00:29:16,950
stages build test release deploy it goes

00:29:14,070 --> 00:29:19,230
in that order and i just say for every

00:29:16,950 --> 00:29:21,330
job i want to use this ruby image I want

00:29:19,230 --> 00:29:24,750
Ruby already installed that can be

00:29:21,330 --> 00:29:26,640
overridden at the job level I do create

00:29:24,750 --> 00:29:28,350
I create a r-spec job you can call this

00:29:26,640 --> 00:29:30,059
whatever you want I won't get into the

00:29:28,350 --> 00:29:32,010
technicalities of this I just want to

00:29:30,059 --> 00:29:33,929
point out that I set the stage to test

00:29:32,010 --> 00:29:36,679
so this will run in our testing stage I

00:29:33,929 --> 00:29:39,270
can call that r-spec whatever my tests

00:29:36,679 --> 00:29:43,500
it's just the way to name what you want

00:29:39,270 --> 00:29:46,380
to call it and I actually I run r-spec

00:29:43,500 --> 00:29:48,809
and then next to that I've got another

00:29:46,380 --> 00:29:51,030
another job that runs in the testing

00:29:48,809 --> 00:29:54,990
stage which is robocop and that will

00:29:51,030 --> 00:29:58,140
lint our code and do some kind of syntax

00:29:54,990 --> 00:30:01,200
checking as well you put it all together

00:29:58,140 --> 00:30:02,669
it looks like this and when you look at

00:30:01,200 --> 00:30:05,669
it and give AB CI you now have something

00:30:02,669 --> 00:30:06,929
that looks like this so the next thing

00:30:05,669 --> 00:30:09,179
we need to do is we want to build our

00:30:06,929 --> 00:30:10,590
container gitlab does make this very

00:30:09,179 --> 00:30:12,450
easy and that they have their own

00:30:10,590 --> 00:30:15,539
registry so there are some environment

00:30:12,450 --> 00:30:18,419
variables already provided to you what I

00:30:15,539 --> 00:30:21,090
do is I into the registry I build our

00:30:18,419 --> 00:30:23,190
container with that docker file that we

00:30:21,090 --> 00:30:25,500
went through earlier and then I push

00:30:23,190 --> 00:30:27,630
that container so on this it says latest

00:30:25,500 --> 00:30:30,390
I actually wouldn't recommend that this

00:30:27,630 --> 00:30:32,490
was just kind of for ease what we do is

00:30:30,390 --> 00:30:34,380
we actually will tag it with commits sha

00:30:32,490 --> 00:30:34,980
that's just preference do it whatever

00:30:34,380 --> 00:30:37,049
you want

00:30:34,980 --> 00:30:39,059
the problem with latest is if you build

00:30:37,049 --> 00:30:41,610
a new container and your last Beanstalk

00:30:39,059 --> 00:30:42,960
for instance is pulling a container you

00:30:41,610 --> 00:30:44,190
might get a new container that you

00:30:42,960 --> 00:30:47,820
didn't want in your production

00:30:44,190 --> 00:30:50,520
environment before you really wanted it

00:30:47,820 --> 00:30:54,000
to go to production so stuff to think

00:30:50,520 --> 00:30:55,860
about when you look at it and get lab CI

00:30:54,000 --> 00:30:57,299
you now have you know have something

00:30:55,860 --> 00:30:59,940
that looks like this you got your build

00:30:57,299 --> 00:31:02,039
you got your testing stage now we want

00:30:59,940 --> 00:31:04,860
to release so the reason I I split up

00:31:02,039 --> 00:31:07,770
release and deploy is because there are

00:31:04,860 --> 00:31:09,549
these kind of two separate jobs where

00:31:07,770 --> 00:31:11,470
you are uploading your code but your

00:31:09,549 --> 00:31:13,059
not exactly deploying it you were just

00:31:11,470 --> 00:31:15,489
creating a pointer to where your last

00:31:13,059 --> 00:31:19,539
beanstalk can use that say hey I want

00:31:15,489 --> 00:31:21,190
this code I'm gonna move to it now so I

00:31:19,539 --> 00:31:22,749
called it release and this is the part

00:31:21,190 --> 00:31:26,259
where we're actually uploading our code

00:31:22,749 --> 00:31:27,999
to s3 and I used the IDSA CLI to just

00:31:26,259 --> 00:31:29,440
create an application version again it's

00:31:27,999 --> 00:31:33,700
just a pointer to our code or a source

00:31:29,440 --> 00:31:36,659
package and I gave it a version label

00:31:33,700 --> 00:31:40,929
which again is like I use project name

00:31:36,659 --> 00:31:43,809
branch and sha so once that's been done

00:31:40,929 --> 00:31:45,249
we can then if we look at our back to

00:31:43,809 --> 00:31:48,100
our application versions page you'll see

00:31:45,249 --> 00:31:49,720
something that appears here and I also

00:31:48,100 --> 00:31:51,249
forgot to mention you can see this

00:31:49,720 --> 00:31:53,169
deployed too you can actually have the

00:31:51,249 --> 00:31:56,590
same application version deployed to

00:31:53,169 --> 00:31:58,359
this two different environments so some

00:31:56,590 --> 00:32:00,909
people use this in certain kind of

00:31:58,359 --> 00:32:02,109
deployment strategies where they want to

00:32:00,909 --> 00:32:04,590
use the same version and then what

00:32:02,109 --> 00:32:06,309
they'll do is instead of deploying or

00:32:04,590 --> 00:32:08,470
what they'll do is they'll swap

00:32:06,309 --> 00:32:11,320
environments if that makes sense so like

00:32:08,470 --> 00:32:14,369
let's say I have they call it red is it

00:32:11,320 --> 00:32:20,169
red green red blue blue green thank you

00:32:14,369 --> 00:32:21,909
so that's a strategy you can use so what

00:32:20,169 --> 00:32:23,619
we want to do now is we want to actually

00:32:21,909 --> 00:32:25,059
deploy so we've created our application

00:32:23,619 --> 00:32:27,340
version we've got our source code up

00:32:25,059 --> 00:32:29,379
there now we actually need to tell the

00:32:27,340 --> 00:32:31,149
last bean stuck okay move this create

00:32:29,379 --> 00:32:33,009
new instances with this version test

00:32:31,149 --> 00:32:36,309
them out and then roll forward if

00:32:33,009 --> 00:32:37,509
everything looks good so that's

00:32:36,309 --> 00:32:41,919
essentially what it's doing you choose

00:32:37,509 --> 00:32:43,570
the environment you want to update so

00:32:41,919 --> 00:32:45,009
that's what that does it's essentially

00:32:43,570 --> 00:32:47,440
in the console if you were to select a

00:32:45,009 --> 00:32:49,330
version here and select deploy and

00:32:47,440 --> 00:32:51,999
choose an environment that's what it

00:32:49,330 --> 00:32:54,970
looks like in the console and then act

00:32:51,999 --> 00:32:56,710
we look at get lab dashboard this is

00:32:54,970 --> 00:32:59,499
what our pipeline now looks like where

00:32:56,710 --> 00:33:01,269
we have these four stages the nice thing

00:32:59,499 --> 00:33:04,419
about this is we can retry each of them

00:33:01,269 --> 00:33:05,919
if anyone fails we don't have to we've

00:33:04,419 --> 00:33:09,450
got to separate out where we don't have

00:33:05,919 --> 00:33:13,899
a huge mess like we did when we started

00:33:09,450 --> 00:33:17,940
I know this is a lot to take in so are

00:33:13,899 --> 00:33:17,940
there any other questions and cat tacks

00:33:25,840 --> 00:33:33,950
so it this kind of depends and it also

00:33:31,520 --> 00:33:37,460
kind of depends how you label it as well

00:33:33,950 --> 00:33:39,800
so for the CI it takes 30 minutes and

00:33:37,460 --> 00:33:42,980
that is just from the point to where we

00:33:39,800 --> 00:33:44,750
call update environment however for the

00:33:42,980 --> 00:33:46,580
actual environment to roll through an

00:33:44,750 --> 00:33:48,440
update so there's different deployment

00:33:46,580 --> 00:33:50,810
strategies what we do is we'll put in a

00:33:48,440 --> 00:33:52,160
few instances it will test them out if

00:33:50,810 --> 00:33:53,660
they look good then it will put in the

00:33:52,160 --> 00:33:57,470
rest of the instances and pull out the

00:33:53,660 --> 00:33:59,780
old instances that can take some time

00:33:57,470 --> 00:34:01,370
that part right there and sometimes it

00:33:59,780 --> 00:34:04,850
does fail but it will automatically roll

00:34:01,370 --> 00:34:08,030
back for us that part depending on how

00:34:04,850 --> 00:34:11,560
many instances it can take probably on

00:34:08,030 --> 00:34:11,560
average is probably about 60 minutes

00:34:12,010 --> 00:34:18,440
yeah our container build time is

00:34:16,700 --> 00:34:20,030
probably about eight minutes it's

00:34:18,440 --> 00:34:22,340
honestly it's something we can

00:34:20,030 --> 00:34:27,050
definitely optimize rails itself is

00:34:22,340 --> 00:34:29,000
pretty bulky but yeah eight minutes is

00:34:27,050 --> 00:34:31,640
typically and a lot of that is actually

00:34:29,000 --> 00:34:34,190
due because we have some large libraries

00:34:31,640 --> 00:34:35,960
we need as well so for instance we need

00:34:34,190 --> 00:34:37,730
to connect to SQL Server so there's some

00:34:35,960 --> 00:34:43,190
third-party libraries that we have to

00:34:37,730 --> 00:34:45,800
include in our container and yeah no

00:34:43,190 --> 00:34:49,990
definitely and if we layered our docker

00:34:45,800 --> 00:34:54,470
images that's yeah you definitely write

00:34:49,990 --> 00:34:57,740
test suite one time is that's probably

00:34:54,470 --> 00:35:01,010
about 20 minutes it's not well yeah I'd

00:34:57,740 --> 00:35:03,110
say 15 to 20 minutes and what we

00:35:01,010 --> 00:35:06,170
actually do is I know up there shows a

00:35:03,110 --> 00:35:08,030
single r-spec job but what happens in

00:35:06,170 --> 00:35:09,950
our e-commerce stores that will split

00:35:08,030 --> 00:35:13,010
into five different jobs and take a

00:35:09,950 --> 00:35:15,160
section of the test suite and run it in

00:35:13,010 --> 00:35:15,160
parallel

00:35:29,290 --> 00:35:42,130
- yeah I think we've discussed that one

00:35:39,280 --> 00:35:58,840
actually in kind of like the the matter

00:35:42,130 --> 00:36:13,380
is just the time yeah awesome anyone

00:35:58,840 --> 00:36:15,880
else so we've kind of discussed this a

00:36:13,380 --> 00:36:17,650
little bit where we would do a review

00:36:15,880 --> 00:36:19,030
apps type thing and what would happen is

00:36:17,650 --> 00:36:20,920
you can actually set it up so you have

00:36:19,030 --> 00:36:22,630
to manually go in and say okay continue

00:36:20,920 --> 00:36:25,200
and it will tear down the review app

00:36:22,630 --> 00:36:27,190
environment when it's done and

00:36:25,200 --> 00:36:29,590
essentially it's just all code review

00:36:27,190 --> 00:36:31,510
right now our QA person she's here right

00:36:29,590 --> 00:36:33,040
now and what we'll also do is when we

00:36:31,510 --> 00:36:36,190
have a merge request we assign it to her

00:36:33,040 --> 00:36:37,480
and she'll go in and QA it and then

00:36:36,190 --> 00:36:44,620
actually merge it where it gets merged

00:36:37,480 --> 00:36:45,890
to master awesome I think that's it all

00:36:44,620 --> 00:36:48,500
right thank you guys

00:36:45,890 --> 00:37:01,789
[Applause]

00:36:48,500 --> 00:37:01,789

YouTube URL: https://www.youtube.com/watch?v=MAZDp4xw6cU


