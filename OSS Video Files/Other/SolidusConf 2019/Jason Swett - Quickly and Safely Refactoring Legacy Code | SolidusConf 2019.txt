Title: Jason Swett - Quickly and Safely Refactoring Legacy Code | SolidusConf 2019
Publication date: 2019-12-06
Playlist: SolidusConf 2019
Description: 
	Jason Swett helps us refactor our legacy code.

"Quickly and Safely Refactoring Legacy Code"
Refactoring can make code easier to understand and safer to work with, but refactoring itself is often risky and time-consuming. In this talk Jason shares techniques heâ€™s used to refactor code speedily while minimizing the chances anything breaks in the process.

Learn more about Solidus at solidus.io
Captions: 
	00:00:02,130 --> 00:00:05,160
[Music]

00:00:09,170 --> 00:00:16,379
[Music]

00:00:12,559 --> 00:00:17,940
to ask for a show of hands how many of

00:00:16,379 --> 00:00:23,130
you in the audience have ever worked

00:00:17,940 --> 00:00:27,080
with legacy code and who is maybe

00:00:23,130 --> 00:00:31,170
currently working with legacy code yeah

00:00:27,080 --> 00:00:33,690
it's pretty much most code is legacy

00:00:31,170 --> 00:00:38,730
code different people have different

00:00:33,690 --> 00:00:41,129
definitions of legacy code but I thought

00:00:38,730 --> 00:00:43,680
it might be interesting to kind of put a

00:00:41,129 --> 00:00:45,660
definition on it because people say

00:00:43,680 --> 00:00:48,420
legacy code a lot and talk about legacy

00:00:45,660 --> 00:00:53,730
code a lot but what exactly does that

00:00:48,420 --> 00:00:56,879
mean to me it seems like legacy code is

00:00:53,730 --> 00:01:00,989
just kind of a euphemism for bad code or

00:00:56,879 --> 00:01:03,930
code we don't like and what does that

00:01:00,989 --> 00:01:08,189
mean like when people say bad code what

00:01:03,930 --> 00:01:10,650
do they mean by bad code and you know

00:01:08,189 --> 00:01:14,430
I've I've thought about and talked about

00:01:10,650 --> 00:01:16,080
bad code over the years but I've never

00:01:14,430 --> 00:01:19,530
stopped and really thought like what do

00:01:16,080 --> 00:01:21,060
I mean when I say bad code actually let

00:01:19,530 --> 00:01:22,619
me let me get a little audience

00:01:21,060 --> 00:01:24,810
participation here

00:01:22,619 --> 00:01:28,580
what do you guys think when you when he

00:01:24,810 --> 00:01:28,580
say bad code what does that mean to you

00:01:29,540 --> 00:01:44,159
difficult to evolve okay int okay no

00:01:37,259 --> 00:01:46,409
test coverage poorly planned lacking of

00:01:44,159 --> 00:01:49,290
patterns yeah I would agree with pretty

00:01:46,409 --> 00:01:51,960
much all these and if I had to boil all

00:01:49,290 --> 00:01:53,430
these things down to just like a concise

00:01:51,960 --> 00:01:57,990
definition

00:01:53,430 --> 00:02:03,420
I'd say bad code is code that's risky or

00:01:57,990 --> 00:02:05,549
time-consuming to change and what I mean

00:02:03,420 --> 00:02:08,640
by that if we kind of unpack that a

00:02:05,549 --> 00:02:12,120
little bit if you have a piece of legacy

00:02:08,640 --> 00:02:14,130
code it's not always clear when you make

00:02:12,120 --> 00:02:17,000
a change in a legacy project

00:02:14,130 --> 00:02:20,580
what the effects of that are gonna be

00:02:17,000 --> 00:02:23,250
you might make a change and have the

00:02:20,580 --> 00:02:25,170
intended consequence happen but then

00:02:23,250 --> 00:02:27,959
there also might be unintended

00:02:25,170 --> 00:02:31,530
consequences that happen too and those

00:02:27,959 --> 00:02:34,140
unintended consequences might be bad and

00:02:31,530 --> 00:02:36,989
that's a risk I'm sure I'm not the only

00:02:34,140 --> 00:02:38,790
person who's like made a commit and a

00:02:36,989 --> 00:02:41,519
deployment and I've been like sweating

00:02:38,790 --> 00:02:45,750
as it deploys because I'm not sure

00:02:41,519 --> 00:02:49,980
what's gonna happen so that's that's a

00:02:45,750 --> 00:02:51,780
risk so that's bad and then time

00:02:49,980 --> 00:02:56,250
consuming if you have a piece of code

00:02:51,780 --> 00:02:57,600
that's difficult to understand this is

00:02:56,250 --> 00:02:59,760
another thing that I'm sure I'm not the

00:02:57,600 --> 00:03:02,489
only one whose experience you like stare

00:02:59,760 --> 00:03:04,049
at a block of code for like 20 minutes

00:03:02,489 --> 00:03:06,959
and you're trying to piece together

00:03:04,049 --> 00:03:12,810
you're like okay this variable is called

00:03:06,959 --> 00:03:15,750
Q this other variable is called AI what

00:03:12,810 --> 00:03:18,209
do these things really mean and what

00:03:15,750 --> 00:03:20,070
does this actually do you have to spend

00:03:18,209 --> 00:03:22,590
a really long time trying to figure out

00:03:20,070 --> 00:03:24,420
what the code does when really it might

00:03:22,590 --> 00:03:26,340
do something really simple the code is

00:03:24,420 --> 00:03:30,120
just really convoluted and so it's more

00:03:26,340 --> 00:03:33,930
time consuming than necessary to work

00:03:30,120 --> 00:03:36,769
with so that to me is bad code which is

00:03:33,930 --> 00:03:39,359
about the same thing as legacy code

00:03:36,769 --> 00:03:43,320
although legacy code might have a couple

00:03:39,359 --> 00:03:45,510
extra characteristics like the original

00:03:43,320 --> 00:03:49,920
maintainer zhh aren't around anymore and

00:03:45,510 --> 00:03:55,079
that kind of stuff here's the catch-22

00:03:49,920 --> 00:03:59,640
with legacy code you can't change the

00:03:55,079 --> 00:04:02,640
code before you understand it but you

00:03:59,640 --> 00:04:06,870
can't understand the code before you

00:04:02,640 --> 00:04:12,359
change it so what do you do it's a

00:04:06,870 --> 00:04:14,630
little bit of a circular problem luckily

00:04:12,359 --> 00:04:18,650
this catch-22 is kind of an illusion

00:04:14,630 --> 00:04:23,090
there are ways that you can get past it

00:04:18,650 --> 00:04:23,090
and we'll talk about that

00:04:23,760 --> 00:04:28,650
so the question that I want to answer in

00:04:26,130 --> 00:04:32,610
this talk is how we could how can we

00:04:28,650 --> 00:04:40,290
make bad code better without blowing up

00:04:32,610 --> 00:04:44,490
the world or taking forever and here are

00:04:40,290 --> 00:04:47,040
my three answers and it's entirely

00:04:44,490 --> 00:04:50,970
likely that you're looking at these

00:04:47,040 --> 00:04:52,950
three points work in tiny steps keep

00:04:50,970 --> 00:04:56,220
everything working all the time and add

00:04:52,950 --> 00:05:01,440
tests and these things might seem

00:04:56,220 --> 00:05:03,240
obvious and I hope they're obvious but

00:05:01,440 --> 00:05:06,300
in my experience working with a lot of

00:05:03,240 --> 00:05:11,160
different programmers a lot of

00:05:06,300 --> 00:05:13,140
programmers code as if either they don't

00:05:11,160 --> 00:05:15,210
know about these ideas or they've

00:05:13,140 --> 00:05:17,550
forgotten so even though these things

00:05:15,210 --> 00:05:19,980
might seem obvious to a lot of people I

00:05:17,550 --> 00:05:22,950
think these are things that need to be

00:05:19,980 --> 00:05:25,290
heard by a lot of programmers because a

00:05:22,950 --> 00:05:32,010
lot of programmers don't do these things

00:05:25,290 --> 00:05:36,360
a lot of the time before I dive in a

00:05:32,010 --> 00:05:38,280
little bit about me most this stuff was

00:05:36,360 --> 00:05:40,380
actually covered in the intro but I'll

00:05:38,280 --> 00:05:42,390
repeat it again I'm the host of a

00:05:40,380 --> 00:05:45,600
podcast called the rails with Jason

00:05:42,390 --> 00:05:47,880
podcast I personally don't do anything

00:05:45,600 --> 00:05:51,660
related to solidus I'm just a rails

00:05:47,880 --> 00:05:54,660
developer but I've been coding for about

00:05:51,660 --> 00:05:56,850
20 years I started when I was a kid been

00:05:54,660 --> 00:06:03,780
coding when I'm about 20 years I've been

00:05:56,850 --> 00:06:14,850
doing rails since like 2011 okay so the

00:06:03,780 --> 00:06:19,050
first point work in tiny steps I teach

00:06:14,850 --> 00:06:21,060
this class in in Detroit each year or at

00:06:19,050 --> 00:06:25,110
least I did for for three years in a row

00:06:21,060 --> 00:06:29,430
and I would notice something my students

00:06:25,110 --> 00:06:31,380
would often do and these are these

00:06:29,430 --> 00:06:33,840
students are relatively new programmers

00:06:31,380 --> 00:06:37,320
there people who recently graduated with

00:06:33,840 --> 00:06:40,140
computer science degrees but

00:06:37,320 --> 00:06:42,330
see my students making really big sets

00:06:40,140 --> 00:06:44,820
of changes at a time without doing any

00:06:42,330 --> 00:06:46,530
kinds of tests in between and by test I

00:06:44,820 --> 00:06:48,570
mean either an automated test or just

00:06:46,530 --> 00:06:53,250
manually checking something in the

00:06:48,570 --> 00:06:55,290
browser and they make the change and

00:06:53,250 --> 00:06:58,380
then after making a bunch of change they

00:06:55,290 --> 00:07:03,810
finally check and things don't work and

00:06:58,380 --> 00:07:07,770
they're surprised when I code I make

00:07:03,810 --> 00:07:10,650
each change between tests really really

00:07:07,770 --> 00:07:12,960
small like I only change one line at a

00:07:10,650 --> 00:07:15,990
time or maybe even a few characters at a

00:07:12,960 --> 00:07:18,300
time it's very rare that I'll write more

00:07:15,990 --> 00:07:21,920
than like two or three lines at a time

00:07:18,300 --> 00:07:26,040
without doing some kind of a a check

00:07:21,920 --> 00:07:31,200
I've learned through painful experience

00:07:26,040 --> 00:07:34,170
to trust myself very little there's a

00:07:31,200 --> 00:07:36,840
mantra that I repeat to myself which is

00:07:34,170 --> 00:07:39,720
never underestimate your ability to

00:07:36,840 --> 00:07:41,910
screw stuff up and sometimes I forget

00:07:39,720 --> 00:07:43,770
that and I get overconfident

00:07:41,910 --> 00:07:47,190
and I'll make a relatively big change

00:07:43,770 --> 00:07:49,380
and I'll mess something up and then I'll

00:07:47,190 --> 00:07:51,360
remember oh yeah I should never

00:07:49,380 --> 00:07:57,510
underestimate my ability to screw stuff

00:07:51,360 --> 00:07:59,700
up and this you know after 20 years of

00:07:57,510 --> 00:08:04,290
programming I still forget this and need

00:07:59,700 --> 00:08:06,840
to be constantly reminded there's

00:08:04,290 --> 00:08:10,290
multiple levels of feedback when we're

00:08:06,840 --> 00:08:12,570
programming the smallest and quickest

00:08:10,290 --> 00:08:14,760
level is when you're just making code

00:08:12,570 --> 00:08:16,620
changes and then doing some kind of test

00:08:14,760 --> 00:08:20,450
again whether that's an automated test

00:08:16,620 --> 00:08:26,400
or manually checking in the browser

00:08:20,450 --> 00:08:28,470
that's the fastest feedback cycle and I

00:08:26,400 --> 00:08:31,110
like to make really small changes at

00:08:28,470 --> 00:08:35,300
that level again just a few characters

00:08:31,110 --> 00:08:40,650
or a couple lines at a time at most and

00:08:35,300 --> 00:08:44,360
then there's the code change level or

00:08:40,650 --> 00:08:47,010
the the get commit level which is like

00:08:44,360 --> 00:08:49,740
when I do a git commit

00:08:47,010 --> 00:08:50,760
first of all I'll commit maybe once

00:08:49,740 --> 00:08:56,550
every five

00:08:50,760 --> 00:08:58,440
fifteen minutes which is probably on the

00:08:56,550 --> 00:09:00,210
I don't know again when I teach this

00:08:58,440 --> 00:09:01,590
class in Detroit that I siege people are

00:09:00,210 --> 00:09:04,290
surprised when they learned that I

00:09:01,590 --> 00:09:06,330
commit maybe every five minutes maybe

00:09:04,290 --> 00:09:08,700
newer programmers think that committing

00:09:06,330 --> 00:09:11,100
every few hours or even every couple

00:09:08,700 --> 00:09:13,200
days is a normal amount to commit but I

00:09:11,100 --> 00:09:15,990
commit just every few minutes because I

00:09:13,200 --> 00:09:18,090
like each change you know I'm sure

00:09:15,990 --> 00:09:20,760
you're familiar with the concept of an

00:09:18,090 --> 00:09:24,360
atomic commit where each commit you make

00:09:20,760 --> 00:09:27,690
is just one thing but I kind of make my

00:09:24,360 --> 00:09:30,780
commits as is not only atomic but as

00:09:27,690 --> 00:09:34,650
tiny as possible I might make a one-line

00:09:30,780 --> 00:09:36,750
change and then commit that I think I've

00:09:34,650 --> 00:09:39,150
even had students laugh when they see me

00:09:36,750 --> 00:09:40,560
make like a one-line commit they're like

00:09:39,150 --> 00:09:43,380
that's absurd that you're committing

00:09:40,560 --> 00:09:45,300
that one tiny thing but each commit is

00:09:43,380 --> 00:09:47,730
not only about the thing that you're

00:09:45,300 --> 00:09:50,190
committing now it's also about whatever

00:09:47,730 --> 00:09:53,700
you're gonna do next and you don't want

00:09:50,190 --> 00:09:56,760
to mix in like you don't want to take

00:09:53,700 --> 00:09:59,130
one tiny one-line change and mix that in

00:09:56,760 --> 00:10:02,100
with like maybe my next piece of work is

00:09:59,130 --> 00:10:04,590
gonna be a one-hour long chunk of work

00:10:02,100 --> 00:10:06,720
and it's a completely unrelated thing I

00:10:04,590 --> 00:10:09,150
don't want to mix in this unrelated

00:10:06,720 --> 00:10:11,610
one-line change with that big long

00:10:09,150 --> 00:10:15,210
change that I'm gonna do next so that's

00:10:11,610 --> 00:10:16,770
why I will commit something that's just

00:10:15,210 --> 00:10:21,090
one line even though that might seem

00:10:16,770 --> 00:10:24,900
silly another thing I do each time I

00:10:21,090 --> 00:10:28,920
make a commit is run my automated test

00:10:24,900 --> 00:10:32,100
suite because I think part of making a

00:10:28,920 --> 00:10:35,450
commit a Tom ik is making sure that that

00:10:32,100 --> 00:10:38,820
commit doesn't introduce any regressions

00:10:35,450 --> 00:10:41,040
because if you make a commit that breaks

00:10:38,820 --> 00:10:44,040
the tests aka

00:10:41,040 --> 00:10:45,870
breaks the application then that commit

00:10:44,040 --> 00:10:47,940
is not really atomic because you still

00:10:45,870 --> 00:10:50,160
have a piece of work left to do in that

00:10:47,940 --> 00:10:52,620
commit which is fixing that regression

00:10:50,160 --> 00:10:55,200
that it introduced so I think in order

00:10:52,620 --> 00:10:57,240
for a commit to really be atomic the

00:10:55,200 --> 00:11:00,930
test suite needs to be run before each

00:10:57,240 --> 00:11:03,330
commit is made and as the test suite

00:11:00,930 --> 00:11:04,260
grows it of course gets less possible to

00:11:03,330 --> 00:11:06,240
commit

00:11:04,260 --> 00:11:10,200
five minutes because maybe your test

00:11:06,240 --> 00:11:12,120
suite takes 15 minutes to run but I

00:11:10,200 --> 00:11:17,370
still make each commit as tiny as

00:11:12,120 --> 00:11:20,399
possible the next layer

00:11:17,370 --> 00:11:24,330
out in the feedback cycle is the

00:11:20,399 --> 00:11:26,250
deployment and release cycle again like

00:11:24,330 --> 00:11:30,240
to work in tiny steps to the extent

00:11:26,250 --> 00:11:32,640
that's possible there why do I consider

00:11:30,240 --> 00:11:34,560
tiny steps well I was talking with

00:11:32,640 --> 00:11:37,320
somebody the other day and they seemed

00:11:34,560 --> 00:11:39,959
to consider a two-week deployment cycle

00:11:37,320 --> 00:11:42,390
to be pretty fast I think they were used

00:11:39,959 --> 00:11:48,390
to deployment cycles of like a couple

00:11:42,390 --> 00:11:51,630
months because often the the thing that

00:11:48,390 --> 00:11:54,570
happens is deployments happen every

00:11:51,630 --> 00:11:58,350
couple months and when the code is

00:11:54,570 --> 00:12:01,320
deployed bad things happen and so

00:11:58,350 --> 00:12:03,540
leadership says well when we deploy bad

00:12:01,320 --> 00:12:07,800
things happen so let's deploy less

00:12:03,540 --> 00:12:09,839
frequently so bad things happen less but

00:12:07,800 --> 00:12:12,120
actually that just that doesn't make

00:12:09,839 --> 00:12:14,310
fewer bad things happen that just makes

00:12:12,120 --> 00:12:17,580
it so when the bad things happen they

00:12:14,310 --> 00:12:19,800
happen all at once so it's better I like

00:12:17,580 --> 00:12:23,190
to you know I've worked at places where

00:12:19,800 --> 00:12:26,760
we deploy several times a day and I like

00:12:23,190 --> 00:12:31,350
that because every commit we do is super

00:12:26,760 --> 00:12:33,240
tiny and so if my deployment only

00:12:31,350 --> 00:12:36,360
contains a single feature and it's a

00:12:33,240 --> 00:12:39,380
pretty small feature and then we we

00:12:36,360 --> 00:12:43,589
develop a mysterious bug in production

00:12:39,380 --> 00:12:46,350
well now in our in our mystery solving

00:12:43,589 --> 00:12:48,600
exercise where we have to try to find

00:12:46,350 --> 00:12:50,430
where the bug was introduced we have a

00:12:48,600 --> 00:12:52,589
really small Delta that we have to

00:12:50,430 --> 00:12:55,320
search within it's like well everything

00:12:52,589 --> 00:12:58,560
was working an hour ago and we deployed

00:12:55,320 --> 00:13:00,779
this 10 line change now things don't

00:12:58,560 --> 00:13:03,660
work it's probably in that 10 line

00:13:00,779 --> 00:13:07,380
change let's check there first makes

00:13:03,660 --> 00:13:09,149
things a lot easier and also just the

00:13:07,380 --> 00:13:10,860
fact that like if you deploy every two

00:13:09,149 --> 00:13:14,820
weeks it's pretty hard to remember

00:13:10,860 --> 00:13:16,480
everything you did two weeks ago and so

00:13:14,820 --> 00:13:18,040
if you deploy every day those

00:13:16,480 --> 00:13:20,740
things are more fresh in your mind and

00:13:18,040 --> 00:13:23,230
if so if something goes wrong it's

00:13:20,740 --> 00:13:30,360
easier to track that down because it's

00:13:23,230 --> 00:13:32,829
fresh very on your memory what about

00:13:30,360 --> 00:13:37,779
when a piece of refactoring or

00:13:32,829 --> 00:13:40,630
restructuring is too big I'm curious if

00:13:37,779 --> 00:13:43,209
anybody else has experienced this let's

00:13:40,630 --> 00:13:45,880
say you're advocating to your boss for

00:13:43,209 --> 00:13:47,649
more frequent deployments but they say

00:13:45,880 --> 00:13:50,019
well we can't do that because sometimes

00:13:47,649 --> 00:13:52,750
we have a feature that might take like

00:13:50,019 --> 00:13:54,610
six weeks to build and we can't release

00:13:52,750 --> 00:13:57,220
it in a half way state we can only show

00:13:54,610 --> 00:13:59,110
it to users when it's already done so we

00:13:57,220 --> 00:14:01,180
can't deploy like every day because that

00:13:59,110 --> 00:14:04,079
just doesn't work in those cases has

00:14:01,180 --> 00:14:08,260
anybody ever encountered that scenario

00:14:04,079 --> 00:14:12,100
yeah a couple at least one person okay a

00:14:08,260 --> 00:14:13,600
couple people at least yeah that's a

00:14:12,100 --> 00:14:17,560
little bit tough but the answer to that

00:14:13,600 --> 00:14:22,690
is to use feature flags and dark

00:14:17,560 --> 00:14:24,819
launching in my experience it's really

00:14:22,690 --> 00:14:27,730
the case that a big long feature can't

00:14:24,819 --> 00:14:29,589
be broken up into smaller pieces the

00:14:27,730 --> 00:14:35,190
trick is that you just have to separate

00:14:29,589 --> 00:14:38,019
the concepts of deployment and release

00:14:35,190 --> 00:14:40,600
so what I mean by that is when you

00:14:38,019 --> 00:14:42,690
deploy you're just changing the code

00:14:40,600 --> 00:14:46,240
that's on the production server

00:14:42,690 --> 00:14:49,360
releasing is when you expose the feature

00:14:46,240 --> 00:14:52,449
to the user there's no reason why those

00:14:49,360 --> 00:14:55,300
two things always have to happen at the

00:14:52,449 --> 00:14:58,810
same time so you can use a feature flag

00:14:55,300 --> 00:15:01,930
if there's let's say a feature involves

00:14:58,810 --> 00:15:04,300
adding a couple extra form fields you

00:15:01,930 --> 00:15:07,089
could put those couple extra form fields

00:15:04,300 --> 00:15:11,380
behind a feature flag have that feature

00:15:07,089 --> 00:15:13,540
flag turned off when you deploy from the

00:15:11,380 --> 00:15:16,120
users perspective nothing has changed

00:15:13,540 --> 00:15:19,060
even though the underlying code has

00:15:16,120 --> 00:15:20,980
changed then somewhere somebody can have

00:15:19,060 --> 00:15:22,959
a dashboard and when we're ready to show

00:15:20,980 --> 00:15:26,110
that feature to users you can turn that

00:15:22,959 --> 00:15:29,260
feature flag on and show that feature

00:15:26,110 --> 00:15:30,400
the extra benefit to that is let's say

00:15:29,260 --> 00:15:32,350
you're working on a feature

00:15:30,400 --> 00:15:34,150
for six weeks you finally turn the

00:15:32,350 --> 00:15:37,990
feature flag on and expose it to

00:15:34,150 --> 00:15:39,850
everybody but there's some big problem

00:15:37,990 --> 00:15:41,980
with the feature there's there's some

00:15:39,850 --> 00:15:44,470
part of it that we didn't think about or

00:15:41,980 --> 00:15:46,630
whatever we can just turn the feature

00:15:44,470 --> 00:15:49,420
flag back off and hide the feature again

00:15:46,630 --> 00:15:56,230
rather than having to have a big painful

00:15:49,420 --> 00:15:58,930
rollback process okay so that's working

00:15:56,230 --> 00:16:01,570
in tiny steps and if you're hearing this

00:15:58,930 --> 00:16:06,970
stuff and thinking I already know that

00:16:01,570 --> 00:16:09,160
that's obvious then I'm glad actually

00:16:06,970 --> 00:16:13,060
because that means that that you're

00:16:09,160 --> 00:16:14,860
already enlightened but again a lot of

00:16:13,060 --> 00:16:18,730
programmers work as if they're not aware

00:16:14,860 --> 00:16:21,010
of these things so I think these

00:16:18,730 --> 00:16:24,060
messages do need to be heard okay my

00:16:21,010 --> 00:16:30,370
next point is keep everything working

00:16:24,060 --> 00:16:32,920
all the time the analogy that I use with

00:16:30,370 --> 00:16:35,500
this is that it's easier to stay on the

00:16:32,920 --> 00:16:37,900
trail than to refine the trail like you

00:16:35,500 --> 00:16:39,460
might have heard of stories of people

00:16:37,900 --> 00:16:42,250
hiking in the woods and they get lost

00:16:39,460 --> 00:16:43,960
and die and then they find their body

00:16:42,250 --> 00:16:46,240
and it's like five feet from the trail

00:16:43,960 --> 00:16:48,100
or something like that because once you

00:16:46,240 --> 00:16:51,070
once you lose the trail it's so hard to

00:16:48,100 --> 00:16:52,090
get back on again and it's easier to

00:16:51,070 --> 00:16:53,740
stay on the trail

00:16:52,090 --> 00:16:55,660
might be a little extra work to pay

00:16:53,740 --> 00:16:58,330
extra close attention to stay on the

00:16:55,660 --> 00:17:00,880
trail the whole time rather than not

00:16:58,330 --> 00:17:09,100
paying attention but that extra bit of

00:17:00,880 --> 00:17:13,630
effort is worth it so again I've worked

00:17:09,100 --> 00:17:15,250
with programmers who like I can think of

00:17:13,630 --> 00:17:17,050
one particular occasion at the last

00:17:15,250 --> 00:17:18,820
place I worked where there was this

00:17:17,050 --> 00:17:20,740
pretty big feature that involved

00:17:18,820 --> 00:17:25,000
changing a lot of different parts of the

00:17:20,740 --> 00:17:26,680
application just a little bit but in a

00:17:25,000 --> 00:17:28,630
whole bunch of different files and there

00:17:26,680 --> 00:17:34,030
are some database changes and stuff like

00:17:28,630 --> 00:17:35,770
that and this guy I was pairing with he

00:17:34,030 --> 00:17:37,660
like went made this little database

00:17:35,770 --> 00:17:38,860
change change this other file because

00:17:37,660 --> 00:17:41,710
we'll probably need to kind of change

00:17:38,860 --> 00:17:43,539
this in this way a little bit and then

00:17:41,710 --> 00:17:46,570
change this other file what

00:17:43,539 --> 00:17:49,809
out like checking to see if everything

00:17:46,570 --> 00:17:51,820
still works cuz the plan was to like

00:17:49,809 --> 00:17:54,399
make all these changes and then at the

00:17:51,820 --> 00:17:57,879
end after all the changes were made then

00:17:54,399 --> 00:18:00,210
like recheck everything but that like

00:17:57,879 --> 00:18:03,789
never works

00:18:00,210 --> 00:18:09,809
there was another feature we worked on

00:18:03,789 --> 00:18:13,929
at the same place it was a relatively

00:18:09,809 --> 00:18:16,090
straightforward change conceptually we

00:18:13,929 --> 00:18:19,029
had the concept in the application of

00:18:16,090 --> 00:18:22,090
certain inventory being sellable or

00:18:19,029 --> 00:18:24,519
unsellable and we wanted to change the

00:18:22,090 --> 00:18:27,960
terminology from sellable and unsellable

00:18:24,519 --> 00:18:31,059
to for sale and not for sale

00:18:27,960 --> 00:18:33,269
there was the terminology change there's

00:18:31,059 --> 00:18:37,899
also a little bit of behavior change

00:18:33,269 --> 00:18:42,340
associated with this change but the

00:18:37,899 --> 00:18:44,649
people who planned this change did it in

00:18:42,340 --> 00:18:47,679
a really smart way where they said okay

00:18:44,649 --> 00:18:51,039
first we're just gonna change the names

00:18:47,679 --> 00:18:53,080
of the database columns we're not gonna

00:18:51,039 --> 00:18:54,489
change the variable names or anything

00:18:53,080 --> 00:18:56,799
we're just gonna change the database

00:18:54,489 --> 00:18:59,470
columns and they put that through the

00:18:56,799 --> 00:19:01,749
whole entire development cycle so they

00:18:59,470 --> 00:19:05,799
changed the database column names pushed

00:19:01,749 --> 00:19:09,669
it to production and then after that we

00:19:05,799 --> 00:19:12,309
said okay we've made that tiny change we

00:19:09,669 --> 00:19:13,989
pushed it to production there are a

00:19:12,309 --> 00:19:17,470
couple issues we fixed those couple

00:19:13,989 --> 00:19:20,830
issues now that that's kind of solidly

00:19:17,470 --> 00:19:23,080
in place now let's change the variable

00:19:20,830 --> 00:19:25,389
names and only the variable names we're

00:19:23,080 --> 00:19:27,549
not gonna change the UI labels or

00:19:25,389 --> 00:19:31,470
anything like that just the variable

00:19:27,549 --> 00:19:36,159
names did that pushed it to production

00:19:31,470 --> 00:19:39,039
and and it took a long time to make this

00:19:36,159 --> 00:19:41,169
change part of it was the app was just

00:19:39,039 --> 00:19:44,379
really big and so even something as

00:19:41,169 --> 00:19:46,629
simple as changing a name somewhere took

00:19:44,379 --> 00:19:48,700
a long time well you know we there's

00:19:46,629 --> 00:19:51,429
there's layers of the application the

00:19:48,700 --> 00:19:53,919
database the Ruby code the Java Script

00:19:51,429 --> 00:19:56,240
there is an iOS app there are a lot of

00:19:53,919 --> 00:20:00,410
coordinated changes that needed to

00:19:56,240 --> 00:20:02,570
happen so it took much longer to

00:20:00,410 --> 00:20:04,580
implement this change than it

00:20:02,570 --> 00:20:06,260
theoretically would have taken if we

00:20:04,580 --> 00:20:07,210
just did it all at once and deployed it

00:20:06,260 --> 00:20:11,000
all at once

00:20:07,210 --> 00:20:12,560
but even though in theory doing it all

00:20:11,000 --> 00:20:15,110
at once and deploying it all at once

00:20:12,560 --> 00:20:17,390
would have been faster in practice

00:20:15,110 --> 00:20:20,720
there's so much opportunity for error

00:20:17,390 --> 00:20:23,780
that that never goes right and it ends

00:20:20,720 --> 00:20:27,770
up taking overall more time than the

00:20:23,780 --> 00:20:29,870
slower more careful way I've heard it

00:20:27,770 --> 00:20:32,270
said before the slow way is the fast way

00:20:29,870 --> 00:20:36,200
in the fast way is the slow way which i

00:20:32,270 --> 00:20:38,300
think is totally true another quick

00:20:36,200 --> 00:20:40,820
example just because this is fresh in my

00:20:38,300 --> 00:20:43,760
mind and I made a lot of mistakes when I

00:20:40,820 --> 00:20:48,320
did this I'm working on an application

00:20:43,760 --> 00:20:51,110
right now where long story short we're

00:20:48,320 --> 00:20:53,150
changing the way some of our accounting

00:20:51,110 --> 00:20:57,650
works in the app or changing some

00:20:53,150 --> 00:21:00,590
terminology and again just because of

00:20:57,650 --> 00:21:02,540
like the size of the application it's

00:21:00,590 --> 00:21:05,060
gonna take a long time to make this

00:21:02,540 --> 00:21:09,230
conceptual change it involves not only

00:21:05,060 --> 00:21:11,000
code changes but data migrations also

00:21:09,230 --> 00:21:14,690
and so there's kind of a lot of

00:21:11,000 --> 00:21:16,760
opportunity for error so I decided to

00:21:14,690 --> 00:21:19,460
implement this change the same exact way

00:21:16,760 --> 00:21:23,050
we implemented this sellable unsellable

00:21:19,460 --> 00:21:29,180
change and I tried to split it up into

00:21:23,050 --> 00:21:31,910
chunks as small as possible at this

00:21:29,180 --> 00:21:35,090
point in time I've applied maybe four

00:21:31,910 --> 00:21:37,400
sets of changes each change is maybe

00:21:35,090 --> 00:21:42,950
like one or two git commits like pretty

00:21:37,400 --> 00:21:44,990
small but despite the small sizes of

00:21:42,950 --> 00:21:49,640
each of these changes that I've applied

00:21:44,990 --> 00:21:52,300
in production and despite how risk-free

00:21:49,640 --> 00:21:55,040
they've seemed at the planning stage

00:21:52,300 --> 00:21:57,770
once I actually applied each of these

00:21:55,040 --> 00:22:01,910
changes in production I made at least

00:21:57,770 --> 00:22:05,000
one mistake every single time I applied

00:22:01,910 --> 00:22:07,520
one of these three or four changes and

00:22:05,000 --> 00:22:09,190
it was like a mistake I could never have

00:22:07,520 --> 00:22:11,020
seen coming and

00:22:09,190 --> 00:22:12,970
like a change that seemed really simple

00:22:11,020 --> 00:22:16,000
and straightforward and like how could I

00:22:12,970 --> 00:22:18,130
possibly screw this up but I screwed it

00:22:16,000 --> 00:22:20,770
up again never underestimate your

00:22:18,130 --> 00:22:23,350
ability to screw stuff up or at least

00:22:20,770 --> 00:22:28,390
never underestimate my ability to screw

00:22:23,350 --> 00:22:32,350
stuff up luckily these changes I applied

00:22:28,390 --> 00:22:37,390
were each small enough that the mistakes

00:22:32,350 --> 00:22:41,290
I made were I was able to recover from

00:22:37,390 --> 00:22:42,850
those because the changes if the changes

00:22:41,290 --> 00:22:45,880
were small enough that I could like hold

00:22:42,850 --> 00:22:48,850
it all in my head at one time and I

00:22:45,880 --> 00:22:50,860
think that's important because when when

00:22:48,850 --> 00:22:54,610
each thing went wrong or I made each

00:22:50,860 --> 00:22:56,200
mistake it didn't take very very long to

00:22:54,610 --> 00:22:58,810
go back and figure out where it

00:22:56,200 --> 00:23:03,970
originated and what needed to happen to

00:22:58,810 --> 00:23:07,210
fix it so my advice would be if you have

00:23:03,970 --> 00:23:09,790
a user story that you think spans more

00:23:07,210 --> 00:23:12,850
than like one or two days it's a user

00:23:09,790 --> 00:23:14,890
story that well maybe it still fits into

00:23:12,850 --> 00:23:17,440
one sprint but it's like a five-day

00:23:14,890 --> 00:23:20,140
story or something like that I would

00:23:17,440 --> 00:23:22,420
argue that that's too big and that those

00:23:20,140 --> 00:23:24,850
usually can and should be broken down

00:23:22,420 --> 00:23:27,940
into stories that are more like a day or

00:23:24,850 --> 00:23:31,180
less and that each one of those parts

00:23:27,940 --> 00:23:34,390
should be its own complete atomic story

00:23:31,180 --> 00:23:35,980
and it's a good idea to take each of

00:23:34,390 --> 00:23:38,200
those through the entire development

00:23:35,980 --> 00:23:40,180
cycle and put it all the way into

00:23:38,200 --> 00:23:49,020
production before you start the next

00:23:40,180 --> 00:23:54,880
little piece third and final point add

00:23:49,020 --> 00:23:57,400
tasks this is conceptually simple we all

00:23:54,880 --> 00:24:00,490
know what it means to add tests but

00:23:57,400 --> 00:24:03,670
adding tests is never as simple as just

00:24:00,490 --> 00:24:05,290
saying it's let's start writing tests

00:24:03,670 --> 00:24:11,340
from now on especially if you're

00:24:05,290 --> 00:24:13,470
starting from zero tests so

00:24:11,340 --> 00:24:15,990
things that need to happen if you're

00:24:13,470 --> 00:24:22,639
gonna take your app from no tests to

00:24:15,990 --> 00:24:26,429
some tests mainly you need to like the

00:24:22,639 --> 00:24:31,169
initial obstacle isn't so much a

00:24:26,429 --> 00:24:34,409
technical one but a like a team

00:24:31,169 --> 00:24:36,120
challenge and what I mean by that is in

00:24:34,409 --> 00:24:38,220
order to write your tests you have to

00:24:36,120 --> 00:24:40,679
write your tests in something and you

00:24:38,220 --> 00:24:46,919
have to agree on kind of a general

00:24:40,679 --> 00:24:49,019
testing approach and so what I what I

00:24:46,919 --> 00:24:50,879
think is a good way to approach this and

00:24:49,019 --> 00:24:53,159
I've done this at at least one place

00:24:50,879 --> 00:24:57,179
I've worked before is our team got

00:24:53,159 --> 00:24:58,860
together and we asked ourselves what's

00:24:57,179 --> 00:25:01,860
our opinion first of all what's our

00:24:58,860 --> 00:25:05,369
opinion of where the app stands right

00:25:01,860 --> 00:25:09,240
now does it seem healthy or unhealthy

00:25:05,369 --> 00:25:12,539
from a perspective of tests and if

00:25:09,240 --> 00:25:15,119
unhealthy what areas could use the most

00:25:12,539 --> 00:25:17,879
attention maybe we don't have any tests

00:25:15,119 --> 00:25:20,149
at all right now so what areas of the

00:25:17,879 --> 00:25:22,860
application might be good to start up

00:25:20,149 --> 00:25:26,700
what testing framework or testing

00:25:22,860 --> 00:25:31,019
frameworks should we use I had a

00:25:26,700 --> 00:25:34,830
situation once where and we had a rails

00:25:31,019 --> 00:25:37,470
and ember application the rails code had

00:25:34,830 --> 00:25:42,509
pretty good test coverage the Ember code

00:25:37,470 --> 00:25:44,460
had effectively no test coverage we had

00:25:42,509 --> 00:25:47,009
a meeting with the engineering team and

00:25:44,460 --> 00:25:50,039
engineering leadership and we agreed we

00:25:47,009 --> 00:25:52,740
all agreed this is bad we need some

00:25:50,039 --> 00:25:55,529
tests on the ember application everybody

00:25:52,740 --> 00:25:59,159
was a hundred percent on board we

00:25:55,529 --> 00:26:02,009
decided from now on every PR for the

00:25:59,159 --> 00:26:04,460
embryo application has to have some

00:26:02,009 --> 00:26:04,460
tests

00:26:04,730 --> 00:26:12,139
fast forward like six months and what we

00:26:08,490 --> 00:26:15,419
had was like two different test Suites

00:26:12,139 --> 00:26:18,440
for the amber application neither of

00:26:15,419 --> 00:26:21,960
which like ever got run consistently and

00:26:18,440 --> 00:26:24,299
like there were some people on the team

00:26:21,960 --> 00:26:24,900
who like didn't even know one of the

00:26:24,299 --> 00:26:27,510
tests we

00:26:24,900 --> 00:26:29,610
existed because we never got together as

00:26:27,510 --> 00:26:31,650
a team and said these are the tools

00:26:29,610 --> 00:26:34,110
we're gonna use and these this is the

00:26:31,650 --> 00:26:35,700
approach we're gonna take so even though

00:26:34,110 --> 00:26:37,440
it's like a good and necessary for a

00:26:35,700 --> 00:26:39,810
step to come to the agreement that we're

00:26:37,440 --> 00:26:42,260
gonna add some tests that's not enough

00:26:39,810 --> 00:26:44,760
you have to also come to an agreement

00:26:42,260 --> 00:26:53,430
what exactly your approach is going to

00:26:44,760 --> 00:26:55,200
be as far as the first tests that get

00:26:53,430 --> 00:27:00,030
added to an application that doesn't

00:26:55,200 --> 00:27:02,970
have any right now my suggested approach

00:27:00,030 --> 00:27:05,520
would be don't start with adding tests

00:27:02,970 --> 00:27:10,140
the logical thing might seem like adding

00:27:05,520 --> 00:27:12,180
tests for whatever is most valuable the

00:27:10,140 --> 00:27:15,030
example I've used in the past is like

00:27:12,180 --> 00:27:18,750
maybe you have a checkout page where all

00:27:15,030 --> 00:27:21,660
the the commercial activity happens

00:27:18,750 --> 00:27:23,910
that's like the most crucial point or

00:27:21,660 --> 00:27:25,560
you have a contact page and it doesn't

00:27:23,910 --> 00:27:28,380
even matter hardly if the contact

00:27:25,560 --> 00:27:31,140
contact page breaks because there's very

00:27:28,380 --> 00:27:37,410
little actual economic activity there

00:27:31,140 --> 00:27:41,030
but those most valuable tests are also

00:27:37,410 --> 00:27:44,010
often the most involved tests to write

00:27:41,030 --> 00:27:46,440
you have to have a lot of setup work I

00:27:44,010 --> 00:27:48,900
mean if you just imagine for a second

00:27:46,440 --> 00:27:53,780
writing a test for a checkout page you

00:27:48,900 --> 00:27:57,030
might have to have products orders

00:27:53,780 --> 00:27:59,070
customers all this data that needs to be

00:27:57,030 --> 00:28:00,810
in place before you can write this test

00:27:59,070 --> 00:28:03,780
that's kind of hard and that's kind of a

00:28:00,810 --> 00:28:05,700
daunting task for your first test might

00:28:03,780 --> 00:28:08,520
not have much infrastructure to support

00:28:05,700 --> 00:28:11,160
that so I would say write the test for

00:28:08,520 --> 00:28:13,650
the checkout page first because then

00:28:11,160 --> 00:28:15,540
that forces you to pick your tools and

00:28:13,650 --> 00:28:18,090
infrastructure and approach and all that

00:28:15,540 --> 00:28:20,550
stuff the actual tests you write is

00:28:18,090 --> 00:28:23,760
trivial it might not really add any

00:28:20,550 --> 00:28:26,190
meaningful value to your application but

00:28:23,760 --> 00:28:28,590
it establishes a beachhead for you and

00:28:26,190 --> 00:28:30,450
then you can add a test that's a little

00:28:28,590 --> 00:28:33,060
bit more valuable a little bit more

00:28:30,450 --> 00:28:37,040
complicated and work your way up over

00:28:33,060 --> 00:28:37,040
time to those more valuable tests

00:28:39,059 --> 00:28:46,080
okay my last two points on adding tests

00:28:43,330 --> 00:28:50,350
there's a couple of certain techniques

00:28:46,080 --> 00:28:54,129
that I like to use for adding tests to

00:28:50,350 --> 00:28:56,049
code that's hard to add tests ooh these

00:28:54,129 --> 00:28:58,840
are both from the book working

00:28:56,049 --> 00:29:01,059
effectively with legacy code by Michael

00:28:58,840 --> 00:29:02,580
feathers and would anybody happen to be

00:29:01,059 --> 00:29:05,169
familiar with these two techniques

00:29:02,580 --> 00:29:08,529
characterization testing and sprout

00:29:05,169 --> 00:29:14,289
class and sprout method so these are

00:29:08,529 --> 00:29:18,249
really handy you might have experienced

00:29:14,289 --> 00:29:20,590
the pain of trying to add tests to an

00:29:18,249 --> 00:29:22,269
application that doesn't have any

00:29:20,590 --> 00:29:24,639
because the code was written in a way

00:29:22,269 --> 00:29:26,859
that makes it hard to test and the thing

00:29:24,639 --> 00:29:30,129
that makes it hard to test is tangled up

00:29:26,859 --> 00:29:34,059
dependencies and so maybe you're looking

00:29:30,129 --> 00:29:37,349
at a big hundred line method and it's

00:29:34,059 --> 00:29:40,450
really hard to identify an entry point

00:29:37,349 --> 00:29:43,710
it's like okay I see these hundred lines

00:29:40,450 --> 00:29:45,940
and I don't know what this method does I

00:29:43,710 --> 00:29:48,279
don't even like what should I write the

00:29:45,940 --> 00:29:49,599
tests to expect I don't even know what

00:29:48,279 --> 00:29:53,679
it's supposed to do so how could I

00:29:49,599 --> 00:29:57,279
possibly write the tests here's one

00:29:53,679 --> 00:29:59,440
thing I like to do you can't do TDD

00:29:57,279 --> 00:30:01,149
because TDD is when you write the code

00:29:59,440 --> 00:30:03,190
first sorry

00:30:01,149 --> 00:30:05,950
TDD is when you write the tests first

00:30:03,190 --> 00:30:09,489
and then the code but if the codes

00:30:05,950 --> 00:30:11,889
already there you can't do TDD but you

00:30:09,489 --> 00:30:14,799
kind of can because you can comment out

00:30:11,889 --> 00:30:17,289
all the code and then you can write some

00:30:14,799 --> 00:30:20,669
tests you have a failing test that fails

00:30:17,289 --> 00:30:23,289
when the code is commented out and then

00:30:20,669 --> 00:30:26,649
uncomment some code and make the test

00:30:23,289 --> 00:30:28,779
pass so I kind of simulate TDD in this

00:30:26,649 --> 00:30:31,989
way I'll write some tests comment on all

00:30:28,779 --> 00:30:35,229
the code I don't know what to write the

00:30:31,989 --> 00:30:38,919
test to expect for so I'll just write

00:30:35,229 --> 00:30:41,710
that this method should return a SDF of

00:30:38,919 --> 00:30:43,779
course it doesn't return a SDF it

00:30:41,710 --> 00:30:46,330
returns something else

00:30:43,779 --> 00:30:51,250
I'll uncomment one single line of the

00:30:46,330 --> 00:30:54,880
method see okay it returns 46

00:30:51,250 --> 00:30:56,860
then I'll change my test to expect 46 I

00:30:54,880 --> 00:30:59,580
still don't know what it means that it

00:30:56,860 --> 00:31:02,860
returns 46 but now I have a single

00:30:59,580 --> 00:31:06,700
passing test I'll repeat that process

00:31:02,860 --> 00:31:11,350
until the whole method is uncommented

00:31:06,700 --> 00:31:13,270
and usually that process will be

00:31:11,350 --> 00:31:15,010
somewhat revealing I'll have a little

00:31:13,270 --> 00:31:17,110
bit more understanding I might not

00:31:15,010 --> 00:31:19,929
understand everything but at least

00:31:17,110 --> 00:31:24,010
understand more than nothing which is

00:31:19,929 --> 00:31:26,049
where I started with and then the other

00:31:24,010 --> 00:31:28,840
side effect the other outcome of that is

00:31:26,049 --> 00:31:31,240
that I have something close to a hundred

00:31:28,840 --> 00:31:34,600
percent test coverage for that method

00:31:31,240 --> 00:31:38,590
then I can refactor that method I can

00:31:34,600 --> 00:31:40,809
rename things and maybe after that I'll

00:31:38,590 --> 00:31:43,539
have a little bit more understanding

00:31:40,809 --> 00:31:45,669
after I performed that refactoring and

00:31:43,539 --> 00:31:49,539
my refactoring can be relatively safe

00:31:45,669 --> 00:31:51,970
because I have the test coverage the

00:31:49,539 --> 00:31:55,179
sprout class technique and the sprout

00:31:51,970 --> 00:31:58,179
method technique are similar ways of

00:31:55,179 --> 00:32:01,809
dealing with a similar problem so again

00:31:58,179 --> 00:32:03,510
let's imagine this hundred line method

00:32:01,809 --> 00:32:06,760
don't know what it does

00:32:03,510 --> 00:32:08,919
can't write a test for that big method

00:32:06,760 --> 00:32:12,100
itself because the method has too many

00:32:08,919 --> 00:32:14,409
dependencies in order to test this it

00:32:12,100 --> 00:32:17,020
needs these two other objects which each

00:32:14,409 --> 00:32:18,789
this one depends on three other objects

00:32:17,020 --> 00:32:21,429
and this other one depends on four other

00:32:18,789 --> 00:32:24,250
objects each one of which depends on a

00:32:21,429 --> 00:32:27,929
couple other objects and the tree is so

00:32:24,250 --> 00:32:32,799
big that you just you you can't do it

00:32:27,929 --> 00:32:35,559
but you can break that apart by taking a

00:32:32,799 --> 00:32:38,200
chunk of that method so I want to

00:32:35,559 --> 00:32:40,299
explain the so the risk of this you

00:32:38,200 --> 00:32:42,700
don't want to change anything because

00:32:40,299 --> 00:32:44,890
even like changing one character of this

00:32:42,700 --> 00:32:47,830
method is really nerve-racking if you

00:32:44,890 --> 00:32:51,730
don't know what it does so you can take

00:32:47,830 --> 00:32:54,070
like five or ten lines move that and I

00:32:51,730 --> 00:32:56,110
usually like to start with the the last

00:32:54,070 --> 00:32:58,270
five or ten lines in the method because

00:32:56,110 --> 00:33:00,880
those have the fewest dependencies I'll

00:32:58,270 --> 00:33:02,820
take the last five or ten lines move it

00:33:00,880 --> 00:33:06,340
out and do a different method

00:33:02,820 --> 00:33:10,360
then I'll make the original method call

00:33:06,340 --> 00:33:14,410
the new method that way I've broken it

00:33:10,360 --> 00:33:16,600
apart but I still have almost the exact

00:33:14,410 --> 00:33:20,440
same code so that change was really a

00:33:16,600 --> 00:33:23,950
low risk then I'll add tests for my new

00:33:20,440 --> 00:33:26,170
small method refactor that a little bit

00:33:23,950 --> 00:33:30,310
then I'll grab another 5 or 10 line

00:33:26,170 --> 00:33:32,440
chunk move that into a new method it's

00:33:30,310 --> 00:33:35,350
usually the case that once I get through

00:33:32,440 --> 00:33:39,070
that whole big long method and break it

00:33:35,350 --> 00:33:40,660
down into pieces I'll do a combination

00:33:39,070 --> 00:33:43,750
so there's sprout clasp and sprout

00:33:40,660 --> 00:33:46,480
method to applications of the same idea

00:33:43,750 --> 00:33:48,910
basically sprout method take a chunk

00:33:46,480 --> 00:33:51,870
move it into its own method sprout class

00:33:48,910 --> 00:33:55,090
take a chunk move it into its own class

00:33:51,870 --> 00:33:57,370
so I'll move things out either into

00:33:55,090 --> 00:33:59,380
their own methods or their own classes

00:33:57,370 --> 00:34:01,780
depending on what seems to make sense

00:33:59,380 --> 00:34:04,330
maybe I'll change my mind at some point

00:34:01,780 --> 00:34:07,030
I made this a method originally actually

00:34:04,330 --> 00:34:10,149
that should be a class and the other way

00:34:07,030 --> 00:34:12,850
around once I'm done with this I usually

00:34:10,149 --> 00:34:16,090
end up with some composition of classes

00:34:12,850 --> 00:34:17,860
and methods that makes some sense and I

00:34:16,090 --> 00:34:21,070
can understand what the code does and

00:34:17,860 --> 00:34:29,050
that can further aid my refactoring and

00:34:21,070 --> 00:34:32,860
make changes less risky okay before I

00:34:29,050 --> 00:34:35,320
just recap I want to say that I don't

00:34:32,860 --> 00:34:36,880
take questions at the end of talks but

00:34:35,320 --> 00:34:39,700
if you have any questions you want to

00:34:36,880 --> 00:34:42,570
discuss this stuff I'm more than happy

00:34:39,700 --> 00:34:45,070
to talk in the hallway or whatever after

00:34:42,570 --> 00:34:48,730
but as a reminder of the three main

00:34:45,070 --> 00:34:52,710
points work in tiny steps keep

00:34:48,730 --> 00:34:56,919
everything working all the time and add

00:34:52,710 --> 00:34:59,860
tests if you find these topics

00:34:56,919 --> 00:35:01,660
interesting and want to read more on my

00:34:59,860 --> 00:35:05,610
thoughts on these things you can find

00:35:01,660 --> 00:35:07,380
all that stuff at code with Jason calm

00:35:05,610 --> 00:35:10,050
thank you

00:35:07,380 --> 00:35:23,360
[Applause]

00:35:10,050 --> 00:35:23,360

YouTube URL: https://www.youtube.com/watch?v=8Sx-IX-9-FE


