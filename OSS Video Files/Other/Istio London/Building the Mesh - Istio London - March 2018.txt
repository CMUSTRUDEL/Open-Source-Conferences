Title: Building the Mesh - Istio London - March 2018
Publication date: 2018-03-29
Playlist: Istio London
Description: 
	Building the Mesh, Liam White (IBM)

A deep dive on why and how Istio leverage Envoy to build the service mesh. In this talk, we will cover why Istio uses Envoy, how it configures Envoy and how Pilot operates as Envoy's discovery service(s). Liam is a core contributor to Istio, joining the project in its pre-alpha days back in March 2017. His work is focused on the Pilot, proxy and istioctl components.
Captions: 
	00:00:00,000 --> 00:00:03,659
I'm gonna talk a bit about how we build

00:00:01,500 --> 00:00:05,400
the mesh and then go into the deep dive

00:00:03,659 --> 00:00:09,420
on how all the discovery service stuff

00:00:05,400 --> 00:00:11,190
works under the covers I'm gonna focus

00:00:09,420 --> 00:00:13,349
on a kubernetes base disk your

00:00:11,190 --> 00:00:16,590
installation purely because most people

00:00:13,349 --> 00:00:18,840
who are using s2 are using kubernetes we

00:00:16,590 --> 00:00:21,050
have others we do support other service

00:00:18,840 --> 00:00:23,490
discovery backends so console in eureka

00:00:21,050 --> 00:00:24,960
but really the main reason I'm going to

00:00:23,490 --> 00:00:28,470
speak about kubernetes is it's way more

00:00:24,960 --> 00:00:30,539
opinionated on certain things so things

00:00:28,470 --> 00:00:32,759
like pods and services well-defined

00:00:30,539 --> 00:00:36,780
objects that I can kind of talk about

00:00:32,759 --> 00:00:39,570
and discuss so first there by me I'm a

00:00:36,780 --> 00:00:41,610
software engineer at IBM these are some

00:00:39,570 --> 00:00:43,230
of the projects I work on my day job is

00:00:41,610 --> 00:00:45,660
working on the IBM cloud container

00:00:43,230 --> 00:00:48,090
registry so that's the IBM cloud docker

00:00:45,660 --> 00:00:51,390
registry as a service offering in terms

00:00:48,090 --> 00:00:53,610
of SEO I've been part of the history

00:00:51,390 --> 00:00:58,500
organization on github since I think a

00:00:53,610 --> 00:01:02,219
weak lot a year last week so quite a

00:00:58,500 --> 00:01:04,350
while I work mostly on pilot and the

00:01:02,219 --> 00:01:06,420
proxy side of things and I'm a current

00:01:04,350 --> 00:01:09,150
of the sto CTL feature as if you have

00:01:06,420 --> 00:01:13,619
any requests for features for that talk

00:01:09,150 --> 00:01:15,600
to me afterwards so first a few of the

00:01:13,619 --> 00:01:19,470
problems so Advanced Micro servicing

00:01:15,600 --> 00:01:21,150
which is definitely a word what I really

00:01:19,470 --> 00:01:24,390
mean when I'm talking about this is you

00:01:21,150 --> 00:01:25,830
have your basic stuff like metrics trait

00:01:24,390 --> 00:01:27,509
and then some slightly more advanced

00:01:25,830 --> 00:01:29,130
stuff like tracing and then you have

00:01:27,509 --> 00:01:31,680
your basic advanced routing so you have

00:01:29,130 --> 00:01:32,729
things like timeouts and retries but

00:01:31,680 --> 00:01:36,509
then you have some more advanced stuff

00:01:32,729 --> 00:01:38,640
like canary testing a/b canary testing a

00:01:36,509 --> 00:01:41,220
bee testing or canary deploys and that

00:01:38,640 --> 00:01:42,780
type of thing so I'm presuming as a show

00:01:41,220 --> 00:01:50,329
of hands pretty much everyone has

00:01:42,780 --> 00:01:53,430
metrics yeah okay how many people have

00:01:50,329 --> 00:01:56,369
metrics at service levels so you can say

00:01:53,430 --> 00:01:59,100
you can have a dashboard for service a

00:01:56,369 --> 00:02:00,960
tox for error rates on service a

00:01:59,100 --> 00:02:03,060
talking-to service B and service be

00:02:00,960 --> 00:02:05,430
talking to service see how many people

00:02:03,060 --> 00:02:09,239
have that kind of level granularity okay

00:02:05,430 --> 00:02:12,300
so not many how many people have uniform

00:02:09,239 --> 00:02:13,270
metrics so what I mean by that is same

00:02:12,300 --> 00:02:16,000
kind of

00:02:13,270 --> 00:02:17,860
the same metrics being exposed same

00:02:16,000 --> 00:02:23,830
names and consistency and that type of

00:02:17,860 --> 00:02:26,500
thing okay somewhat on that so a lot of

00:02:23,830 --> 00:02:28,090
these are kind of basic things but some

00:02:26,500 --> 00:02:29,680
some of the things that you don't have a

00:02:28,090 --> 00:02:32,230
more advanced stuff like the tracing and

00:02:29,680 --> 00:02:36,190
the advanced routing and that type of

00:02:32,230 --> 00:02:38,680
thing so this is kind of a basic

00:02:36,190 --> 00:02:40,090
application running in kubernetes these

00:02:38,680 --> 00:02:41,200
are poorly named services because

00:02:40,090 --> 00:02:44,110
obviously a service is something

00:02:41,200 --> 00:02:46,030
specific in coop but it's easier to read

00:02:44,110 --> 00:02:49,480
it's easier to read than if I stuck mark

00:02:46,030 --> 00:02:52,120
services in those boxes but yeah in coop

00:02:49,480 --> 00:02:53,500
normally your micro services the

00:02:52,120 --> 00:02:56,920
containers basically all talk to each

00:02:53,500 --> 00:02:58,750
other directly and in kubernetes your

00:02:56,920 --> 00:03:00,400
your a lot of the concerns we already

00:02:58,750 --> 00:03:01,960
moved been moved to the platform level

00:03:00,400 --> 00:03:03,700
so you don't have to care about

00:03:01,960 --> 00:03:05,140
orchestration because coop does that for

00:03:03,700 --> 00:03:06,250
you you don't care about service

00:03:05,140 --> 00:03:08,110
discovery and you don't have to care

00:03:06,250 --> 00:03:10,180
about kind of the simple load balancing

00:03:08,110 --> 00:03:12,010
that that stuff is no longer a concern

00:03:10,180 --> 00:03:23,800
of your application code that's solved

00:03:12,010 --> 00:03:25,540
by the platform so you've got these you

00:03:23,800 --> 00:03:28,090
need some metrics and tracing to add to

00:03:25,540 --> 00:03:29,800
this so this is where your data client

00:03:28,090 --> 00:03:32,230
in right you put your client in your

00:03:29,800 --> 00:03:33,820
client woods spout some metrics and then

00:03:32,230 --> 00:03:37,450
you'd be able to get some observability

00:03:33,820 --> 00:03:39,310
into your application in order to debug

00:03:37,450 --> 00:03:44,260
stuff if you're optimizing for mean time

00:03:39,310 --> 00:03:45,340
to recovery but so you can either use if

00:03:44,260 --> 00:03:46,750
you're a Java shop you might use

00:03:45,340 --> 00:03:49,420
something like hystrix or finagle to do

00:03:46,750 --> 00:03:51,400
this which are quite advanced or maybe

00:03:49,420 --> 00:03:54,100
you write your own our team write our

00:03:51,400 --> 00:03:55,900
own because we use or we start adopting

00:03:54,100 --> 00:03:58,060
go with miles before there were any

00:03:55,900 --> 00:03:59,530
things that did listen go I assume it's

00:03:58,060 --> 00:04:03,640
been solved and go I haven't actually

00:03:59,530 --> 00:04:05,110
been keeping up and this is fine as long

00:04:03,640 --> 00:04:07,390
as all your micro services are written

00:04:05,110 --> 00:04:09,850
in the same language but what happens if

00:04:07,390 --> 00:04:12,760
you want to have a JavaScript front-end

00:04:09,850 --> 00:04:15,700
or something or maybe you want to adopt

00:04:12,760 --> 00:04:17,410
an open-source project into your code

00:04:15,700 --> 00:04:19,630
and now your basic client you've written

00:04:17,410 --> 00:04:22,810
for your market services isn't going to

00:04:19,630 --> 00:04:24,430
work in this situation so what ends up

00:04:22,810 --> 00:04:26,080
happening is you basically have to write

00:04:24,430 --> 00:04:28,479
your own or write a new

00:04:26,080 --> 00:04:30,340
one so for the javis unite we now have a

00:04:28,479 --> 00:04:31,780
JavaScript client here for the micro

00:04:30,340 --> 00:04:34,060
services sitting in the front we have

00:04:31,780 --> 00:04:35,949
three instances of the same go client

00:04:34,060 --> 00:04:37,870
and then we have some special snake the

00:04:35,949 --> 00:04:40,300
special snowflake wrapper basically

00:04:37,870 --> 00:04:42,099
around your open source project in order

00:04:40,300 --> 00:04:43,870
to try and get it to spout the same

00:04:42,099 --> 00:04:49,300
metrics that all of your other micro

00:04:43,870 --> 00:04:50,740
services do but this this is fine you've

00:04:49,300 --> 00:04:52,569
now got three clients you then want to

00:04:50,740 --> 00:04:53,560
adopt another open source project or you

00:04:52,569 --> 00:04:55,030
want to write something else in other

00:04:53,560 --> 00:04:57,520
language you then go write another

00:04:55,030 --> 00:04:59,050
clients do those things and then once

00:04:57,520 --> 00:05:00,610
you've got those three four or five

00:04:59,050 --> 00:05:02,169
client libraries however many you have

00:05:00,610 --> 00:05:03,669
what happens when you run out other

00:05:02,169 --> 00:05:05,710
features to those client libraries if

00:05:03,669 --> 00:05:07,270
you have the basic metrics and you want

00:05:05,710 --> 00:05:08,979
to do a/b testing you've then got your

00:05:07,270 --> 00:05:10,840
implement a be testing and four separate

00:05:08,979 --> 00:05:12,460
clients right and it becomes expensive

00:05:10,840 --> 00:05:15,789
to keep solving these problems in the

00:05:12,460 --> 00:05:18,969
application code so basically don't

00:05:15,789 --> 00:05:20,560
write like service discovery and load

00:05:18,969 --> 00:05:22,810
balancing is handled by the platform in

00:05:20,560 --> 00:05:24,129
coop just move all of this stuff to the

00:05:22,810 --> 00:05:25,689
platform if something can be solved in

00:05:24,129 --> 00:05:28,569
the platform so that's where you should

00:05:25,689 --> 00:05:30,819
be moving it and a high level this is

00:05:28,569 --> 00:05:34,469
kind of or this specific stuff is kind

00:05:30,819 --> 00:05:37,090
of the value of the service mesh the the

00:05:34,469 --> 00:05:39,159
basic kind of free stuff you get in

00:05:37,090 --> 00:05:40,210
terms of tracing and that type of thing

00:05:39,159 --> 00:05:43,150
it means you don't have to write it in

00:05:40,210 --> 00:05:48,819
your code and it's just generally made

00:05:43,150 --> 00:05:50,379
available by the platform so it's do

00:05:48,819 --> 00:05:52,479
builds the map it achieves the mesh

00:05:50,379 --> 00:05:55,599
using the on voice and on voice sidecar

00:05:52,479 --> 00:05:57,460
model so every request flows through a

00:05:55,599 --> 00:06:00,639
proxy at each step kind of in each pod

00:05:57,460 --> 00:06:03,009
so when the request comes in it goes to

00:06:00,639 --> 00:06:05,259
the envoy ingress controller and that'll

00:06:03,009 --> 00:06:09,129
do basic ingress controller stuff

00:06:05,259 --> 00:06:12,159
forward that on to the pod and all of

00:06:09,129 --> 00:06:13,990
the traffic within the pod it uses or

00:06:12,159 --> 00:06:15,550
that we use iptables then through all

00:06:13,990 --> 00:06:17,589
the traffic coming into the pod to envoy

00:06:15,550 --> 00:06:19,870
and then envoy will proxy that request

00:06:17,589 --> 00:06:21,699
through to the service now your service

00:06:19,870 --> 00:06:23,469
might want to make is the front page so

00:06:21,699 --> 00:06:26,650
it might need information on reviews or

00:06:23,469 --> 00:06:28,180
things like that and that will then try

00:06:26,650 --> 00:06:29,440
and make those requests that'll be proxy

00:06:28,180 --> 00:06:31,659
back through envoy and then to

00:06:29,440 --> 00:06:33,039
downstream envoys and so on and so on

00:06:31,659 --> 00:06:36,399
until you've finished your request at

00:06:33,039 --> 00:06:38,919
the end so this is what's referred to as

00:06:36,399 --> 00:06:39,500
a data plane in the service mesh and

00:06:38,919 --> 00:06:43,970
that's basically

00:06:39,500 --> 00:06:45,620
where your data flows hence the name so

00:06:43,970 --> 00:06:47,990
because we've got that single envoy

00:06:45,620 --> 00:06:49,580
binary basically everywhere we don't

00:06:47,990 --> 00:06:50,750
have this issue of multiple client

00:06:49,580 --> 00:06:52,910
libraries so we don't have any

00:06:50,750 --> 00:06:54,290
unintended differences so if you're

00:06:52,910 --> 00:06:56,720
implementing three different client

00:06:54,290 --> 00:06:58,340
libraries you've got three times the

00:06:56,720 --> 00:07:01,070
chance of making mistake criterion

00:06:58,340 --> 00:07:03,170
blending three different things also

00:07:01,070 --> 00:07:05,810
we've got language independence because

00:07:03,170 --> 00:07:07,640
envoy basically speaks TCP in quotes

00:07:05,810 --> 00:07:11,720
with some layer seven awareness so it

00:07:07,640 --> 00:07:13,370
has awareness for HTTP G RPC and

00:07:11,720 --> 00:07:17,990
DB I don't think I'm missing any other

00:07:13,370 --> 00:07:20,720
River suckers already it's my soup core

00:07:17,990 --> 00:07:22,160
okay loads of layer seven project

00:07:20,720 --> 00:07:24,290
difficult to keep up on that type of

00:07:22,160 --> 00:07:26,210
thing but any way that as long as your

00:07:24,290 --> 00:07:28,100
micro services are talking over these

00:07:26,210 --> 00:07:30,470
protocols it doesn't matter which

00:07:28,100 --> 00:07:31,490
language they're talking it doesn't

00:07:30,470 --> 00:07:36,770
matter which language is written in

00:07:31,490 --> 00:07:38,690
right so this means the Envoy provides

00:07:36,770 --> 00:07:40,760
SDO basically a unified approach to

00:07:38,690 --> 00:07:42,740
configuring all traffic routing it

00:07:40,760 --> 00:07:43,910
provides a single place where if you're

00:07:42,740 --> 00:07:46,190
doing some advanced routing now you

00:07:43,910 --> 00:07:48,229
might be using some stuff with

00:07:46,190 --> 00:07:50,030
environment variables there in disparate

00:07:48,229 --> 00:07:53,410
locations there's no kind of single

00:07:50,030 --> 00:07:55,880
source of truth a lot of the time so

00:07:53,410 --> 00:07:57,140
with pilot which I'll talk about it beer

00:07:55,880 --> 00:07:58,850
which one the components of sto that

00:07:57,140 --> 00:08:01,640
becomes kind of the single source of

00:07:58,850 --> 00:08:05,270
truth within for a lot of the traffic

00:08:01,640 --> 00:08:07,340
routing stuff because there's the same

00:08:05,270 --> 00:08:09,350
employed binary at every step it means

00:08:07,340 --> 00:08:11,570
that there's a standard set of metrics

00:08:09,350 --> 00:08:13,790
and tracing data that can be sent from

00:08:11,570 --> 00:08:15,970
this from all of the envoys and that

00:08:13,790 --> 00:08:18,710
that's how we get things like the

00:08:15,970 --> 00:08:20,180
service to service level dashboard so if

00:08:18,710 --> 00:08:22,370
you've ever played around with kind of

00:08:20,180 --> 00:08:24,470
the SDO demos the basic thing we install

00:08:22,370 --> 00:08:26,180
is a graph on a dashboard where you can

00:08:24,470 --> 00:08:29,000
basically click a drop down on a service

00:08:26,180 --> 00:08:32,089
and click the receiving service and see

00:08:29,000 --> 00:08:33,860
an entire see all of the information and

00:08:32,089 --> 00:08:35,659
metrics for that service to service

00:08:33,860 --> 00:08:37,490
communication so because we've got this

00:08:35,659 --> 00:08:39,620
consistent set of metrics that's what

00:08:37,490 --> 00:08:42,020
allows us to do things like that but

00:08:39,620 --> 00:08:43,310
most importantly and one of the design

00:08:42,020 --> 00:08:46,010
decisions early on that was made with

00:08:43,310 --> 00:08:48,170
this geo is this is all transparent from

00:08:46,010 --> 00:08:49,970
your mark for service codes as long as

00:08:48,170 --> 00:08:53,300
your market service code works in

00:08:49,970 --> 00:08:59,000
kubernetes it will work with sto and

00:08:53,300 --> 00:09:00,980
at ease so building the mesh this

00:08:59,000 --> 00:09:04,070
building the master starts when you do

00:09:00,980 --> 00:09:06,640
cube CTL apply these two commands are

00:09:04,070 --> 00:09:09,350
basically the two ways you can currently

00:09:06,640 --> 00:09:11,690
deploy SDO so the first command is

00:09:09,350 --> 00:09:16,880
basically we inject the proxy client

00:09:11,690 --> 00:09:19,550
side using the SDR CTL kuben check

00:09:16,880 --> 00:09:21,380
command and then that the output of that

00:09:19,550 --> 00:09:24,560
is then sent to the cube API server by

00:09:21,380 --> 00:09:27,079
cube CTL the second one which is using a

00:09:24,560 --> 00:09:29,089
feature in coupon 9 so mutating a

00:09:27,079 --> 00:09:30,860
mission webhooks basically does this all

00:09:29,089 --> 00:09:32,990
server-side for you so you don't have to

00:09:30,860 --> 00:09:34,220
worry about doing a client-side so if

00:09:32,990 --> 00:09:35,269
you're using helm for instance you

00:09:34,220 --> 00:09:37,700
probably want to use the second one

00:09:35,269 --> 00:09:39,529
because then you don't have to pollute

00:09:37,700 --> 00:09:43,880
your helm charts with loads of injected

00:09:39,529 --> 00:09:46,100
proxies manually so yeah what a mutating

00:09:43,880 --> 00:09:48,890
mission webhook basically does is when

00:09:46,100 --> 00:09:52,550
you try to deploy anything to coop coop

00:09:48,890 --> 00:09:55,850
will send a request off to sto and say

00:09:52,550 --> 00:09:58,310
do does this does this pod need to be

00:09:55,850 --> 00:10:00,620
mutated and SEO will return back the

00:09:58,310 --> 00:10:02,570
route the pod that was sent but with the

00:10:00,620 --> 00:10:04,370
SDO proxy injected into it

00:10:02,570 --> 00:10:07,610
both these commands have the same result

00:10:04,370 --> 00:10:12,079
is just kind of client side vs. server

00:10:07,610 --> 00:10:13,970
side so if you once you've run this

00:10:12,079 --> 00:10:16,459
command if you do a get pod on one of

00:10:13,970 --> 00:10:17,779
your pods you'll notice that there's

00:10:16,459 --> 00:10:19,760
quite a lot of Yama it's quite noisy

00:10:17,779 --> 00:10:22,370
when we inject some proxy stuff in there

00:10:19,760 --> 00:10:25,010
so I'm only going to focus on the stuff

00:10:22,370 --> 00:10:26,810
that's kind of important so it's do

00:10:25,010 --> 00:10:28,220
users coop init containers for those who

00:10:26,810 --> 00:10:30,770
aren't familiar with LOC unit containers

00:10:28,220 --> 00:10:33,110
are basically their containers that spin

00:10:30,770 --> 00:10:35,180
up prior to the rest of your containers

00:10:33,110 --> 00:10:36,920
in the pod they'll do some kind of setup

00:10:35,180 --> 00:10:42,290
and they'll terminate and then the rest

00:10:36,920 --> 00:10:45,320
of your pod can come up so sto in it

00:10:42,290 --> 00:10:47,510
uses it has no admin capabilities which

00:10:45,320 --> 00:10:49,490
might kind of give away what it does as

00:10:47,510 --> 00:10:51,649
I mentioned IP tables earlier so what

00:10:49,490 --> 00:10:53,630
what this container does is basically it

00:10:51,649 --> 00:10:56,660
sets IP tables through all traffic from

00:10:53,630 --> 00:10:58,910
within the pod to envoy for 15,000 and

00:10:56,660 --> 00:11:00,649
one is the first parameter that's passed

00:10:58,910 --> 00:11:03,980
in so that's where envoy listening for

00:11:00,649 --> 00:11:06,230
the requests and then U is the UID for

00:11:03,980 --> 00:11:07,310
which redirection is not applied because

00:11:06,230 --> 00:11:08,660
otherwise this

00:11:07,310 --> 00:11:10,520
is usually the you idea of the proxy

00:11:08,660 --> 00:11:12,170
container because otherwise you'd have

00:11:10,520 --> 00:11:14,240
this never-ending loop back as soon as

00:11:12,170 --> 00:11:18,740
you tried to speak to something outside

00:11:14,240 --> 00:11:22,310
of your pod so next container come up is

00:11:18,740 --> 00:11:24,830
sto proxy SEO proxies basically the

00:11:22,310 --> 00:11:27,230
Envoy write binary wrapped by pilot

00:11:24,830 --> 00:11:29,240
agent so pilot agent is responsible for

00:11:27,230 --> 00:11:32,740
managing configuring the Envoy process

00:11:29,240 --> 00:11:35,450
it does things like hot restarts on

00:11:32,740 --> 00:11:36,980
certificate rotations so it does a file

00:11:35,450 --> 00:11:38,480
watch on the certificates when it

00:11:36,980 --> 00:11:40,490
detects they've changed it when it

00:11:38,480 --> 00:11:42,680
detects any changes it has a hot restart

00:11:40,490 --> 00:11:47,660
of envoy so envoy can pick up the new

00:11:42,680 --> 00:11:50,390
certificates so if we look at the SDO

00:11:47,660 --> 00:11:52,100
proxy amel it's running in proxy sidecar

00:11:50,390 --> 00:11:54,560
modes there are this is because it's

00:11:52,100 --> 00:11:57,130
running as a sidecar to a container pot

00:11:54,560 --> 00:11:59,420
there's also ingress and routing mode

00:11:57,130 --> 00:12:01,220
ingress is pursuin is running as an

00:11:59,420 --> 00:12:03,890
ingress controller and I believe Rooter

00:12:01,220 --> 00:12:06,560
mode is used for egress stuff again

00:12:03,890 --> 00:12:09,410
where zach is is it is it used for

00:12:06,560 --> 00:12:12,890
egress off the router yes it is I've

00:12:09,410 --> 00:12:15,560
been keeping up on that okay yeah so

00:12:12,890 --> 00:12:17,780
that's what that one's useful so then

00:12:15,560 --> 00:12:20,420
we've got the binary path from the

00:12:17,780 --> 00:12:22,839
config path so envoy has two forms of

00:12:20,420 --> 00:12:26,630
configuration it has static config and

00:12:22,839 --> 00:12:29,030
dynamic config the conflict path is

00:12:26,630 --> 00:12:31,850
where the static configures located so

00:12:29,030 --> 00:12:33,560
that'll contain things like the location

00:12:31,850 --> 00:12:34,850
of the certificates because although the

00:12:33,560 --> 00:12:37,220
certificates change the location of the

00:12:34,850 --> 00:12:41,120
sifrits don't and generally things that

00:12:37,220 --> 00:12:44,570
don't change then we've got proxy admin

00:12:41,120 --> 00:12:45,589
poor proxy admin port is potentially

00:12:44,570 --> 00:12:47,030
where you could do a lot of damage if

00:12:45,589 --> 00:12:50,480
you got into the pod and was curling on

00:12:47,030 --> 00:12:52,700
that port if you were looking to debug

00:12:50,480 --> 00:12:56,660
currently the best way to see envoys

00:12:52,700 --> 00:12:59,260
view of the world is to exactly into

00:12:56,660 --> 00:13:02,120
your pod and basically curl localhost /

00:12:59,260 --> 00:13:04,130
listeners clusters or routes and that

00:13:02,120 --> 00:13:06,830
would dump out any debug information

00:13:04,130 --> 00:13:09,950
from Envoy I currently actually have an

00:13:06,830 --> 00:13:11,570
ST OC TLP are open to allow you to do

00:13:09,950 --> 00:13:14,180
this from SDI CTL so you can do

00:13:11,570 --> 00:13:15,830
something like it's do CTL proxy config

00:13:14,180 --> 00:13:19,360
and then give it a pod name and it will

00:13:15,830 --> 00:13:19,360
dump out the config for that pod

00:13:19,970 --> 00:13:27,000
- so service cluster so a cluster in

00:13:25,410 --> 00:13:30,060
there's a lot of confusing terminology

00:13:27,000 --> 00:13:31,620
between first off envoy sto and ku

00:13:30,060 --> 00:13:33,090
because there are three different

00:13:31,620 --> 00:13:34,950
definitions for what a cluster means and

00:13:33,090 --> 00:13:37,620
those three different things so a

00:13:34,950 --> 00:13:39,480
cluster in envoy terms is basically a

00:13:37,620 --> 00:13:41,730
service in coop it's a collection of

00:13:39,480 --> 00:13:44,280
endpoints that represents a given

00:13:41,730 --> 00:13:46,050
service so the service cluster we pretty

00:13:44,280 --> 00:13:48,630
much just map to the app labeling coop

00:13:46,050 --> 00:13:53,280
because that's because they're kind of

00:13:48,630 --> 00:13:55,740
equivalent so I know I mentioned earlier

00:13:53,280 --> 00:13:57,420
there's dynamic config so that's where

00:13:55,740 --> 00:13:59,400
pilot comes in so we need to tell envoy

00:13:57,420 --> 00:14:01,770
waits go and get the dynamic config and

00:13:59,400 --> 00:14:03,510
then we have the zip key and then stance

00:14:01,770 --> 00:14:05,300
D address so that's where we'd send

00:14:03,510 --> 00:14:09,510
distributed tracing stuff and metrics

00:14:05,300 --> 00:14:11,640
information so now we've got all the

00:14:09,510 --> 00:14:13,050
envoys deployed how do they know where

00:14:11,640 --> 00:14:14,340
to route all the requests you can't

00:14:13,050 --> 00:14:16,110
obviously have all this and Static

00:14:14,340 --> 00:14:18,390
config you need to have it in some kind

00:14:16,110 --> 00:14:19,950
of dynamic config so this is where the

00:14:18,390 --> 00:14:23,040
control plane comes in and this is

00:14:19,950 --> 00:14:27,390
really what SEO is SEO is basically a

00:14:23,040 --> 00:14:28,770
control plane for envoy and yep this is

00:14:27,390 --> 00:14:30,390
where pilot comes in hence the term

00:14:28,770 --> 00:14:31,710
piloting the mesh which I believe is why

00:14:30,390 --> 00:14:35,190
it's called pilot in the first place I

00:14:31,710 --> 00:14:36,720
vaguely remember the discussion so pilot

00:14:35,190 --> 00:14:40,530
acts as an abstraction over top of

00:14:36,720 --> 00:14:42,330
kubernetes service discovery obviously

00:14:40,530 --> 00:14:43,860
this is where we abstract away things

00:14:42,330 --> 00:14:45,840
like if you wanted to run with a console

00:14:43,860 --> 00:14:48,450
back end or Eureka backend for service

00:14:45,840 --> 00:14:49,830
discovery it uses the service discovery

00:14:48,450 --> 00:14:52,170
information and then mutates it

00:14:49,830 --> 00:14:54,390
depending on SEO rules they're set so if

00:14:52,170 --> 00:14:57,330
you set up a route rule or a destination

00:14:54,390 --> 00:14:59,970
policy I forget this - changing with v3

00:14:57,330 --> 00:15:03,150
what the exact terminology is but if you

00:14:59,970 --> 00:15:05,100
set up things like that that it's do

00:15:03,150 --> 00:15:07,020
will then mutate the response that it

00:15:05,100 --> 00:15:10,460
gets from the discovery service and send

00:15:07,020 --> 00:15:13,230
it send it to envoy so every few seconds

00:15:10,460 --> 00:15:14,550
envoy will call out to pilot basically

00:15:13,230 --> 00:15:16,650
to retrieve the information they need to

00:15:14,550 --> 00:15:19,980
correctly route the traffic and then it

00:15:16,650 --> 00:15:22,260
will cache that in memory this

00:15:19,980 --> 00:15:24,900
information comes in the form of for ap

00:15:22,260 --> 00:15:26,950
is so we've got the there's five on this

00:15:24,900 --> 00:15:29,139
list I know that

00:15:26,950 --> 00:15:30,970
so we've got the lift no discovery

00:15:29,139 --> 00:15:32,649
service the roots discovery service the

00:15:30,970 --> 00:15:34,870
cluster discovery service and the

00:15:32,649 --> 00:15:38,079
service discovery service / endpoint

00:15:34,870 --> 00:15:39,579
discovery service depending on so we

00:15:38,079 --> 00:15:41,320
don't yet support the endpoint discovery

00:15:39,579 --> 00:15:43,870
service because that's on the envoy v2

00:15:41,320 --> 00:15:45,850
API but we're I think we're aiming for

00:15:43,870 --> 00:15:47,500
Noor point eight nine point nine it's a

00:15:45,850 --> 00:15:49,680
release of moving to v2 something like

00:15:47,500 --> 00:15:49,680
that

00:15:50,519 --> 00:15:56,829
okay so I thought to potentially

00:15:54,250 --> 00:15:58,180
future-proof this talk immediately I'd

00:15:56,829 --> 00:16:01,889
talk about the important discovery

00:15:58,180 --> 00:16:07,240
service more prior warning all of the

00:16:01,889 --> 00:16:10,839
pilot produces a lot of but pilot

00:16:07,240 --> 00:16:12,790
produces a lot of JSON so the next few

00:16:10,839 --> 00:16:16,089
slides going to contain contain a some

00:16:12,790 --> 00:16:17,230
JSON again like I did with the Yammer

00:16:16,089 --> 00:16:19,600
I'm just gonna try and highlight the

00:16:17,230 --> 00:16:20,980
important stuff but the idea is we're

00:16:19,600 --> 00:16:23,560
gonna follow kind of a request through

00:16:20,980 --> 00:16:25,750
to work out how envoy works out where to

00:16:23,560 --> 00:16:27,490
send the request and hopefully by the

00:16:25,750 --> 00:16:30,100
end of this you'll become a debugging

00:16:27,490 --> 00:16:31,589
expert but if you don't understand most

00:16:30,100 --> 00:16:34,420
of what I'm saying there's a very good

00:16:31,589 --> 00:16:36,370
sto community talk that highlights this

00:16:34,420 --> 00:16:37,870
is by plus news twitter handle is bobby

00:16:36,370 --> 00:16:39,940
tables but i can't remember his actual

00:16:37,870 --> 00:16:41,980
name is I presume it's Bobby Bob

00:16:39,940 --> 00:16:45,820
something but if you go and look in the

00:16:41,980 --> 00:16:47,529
sto YouTube channel I think it was two

00:16:45,820 --> 00:16:49,660
weeks last week two weeks ago something

00:16:47,529 --> 00:16:55,390
like that there's a very good kind of

00:16:49,660 --> 00:16:56,980
live demo of debugging in sto so we got

00:16:55,390 --> 00:16:59,380
follow requests through like I said this

00:16:56,980 --> 00:17:02,050
is basically just a normal HTTP request

00:16:59,380 --> 00:17:04,750
from the product page service in our

00:17:02,050 --> 00:17:07,740
coop cluster to the review service so

00:17:04,750 --> 00:17:09,760
you can imagine a product page is

00:17:07,740 --> 00:17:11,709
displaying a product and it needs to get

00:17:09,760 --> 00:17:12,970
reviews it Orion needs to talk to a

00:17:11,709 --> 00:17:14,919
downstream reviews market service to

00:17:12,970 --> 00:17:18,339
pull in the reviews information so

00:17:14,919 --> 00:17:20,500
that's kind of what this request is so

00:17:18,339 --> 00:17:22,809
the first thing you can see that that's

00:17:20,500 --> 00:17:24,160
quite small we're going to talk to the

00:17:22,809 --> 00:17:27,510
listener discovery service so that's

00:17:24,160 --> 00:17:30,460
available on v1 slash listeners in pilot

00:17:27,510 --> 00:17:33,040
we get with self-identifying as the

00:17:30,460 --> 00:17:36,640
product page and all the product page

00:17:33,040 --> 00:17:38,320
service and the unique identifier for

00:17:36,640 --> 00:17:39,540
this instance of the product page

00:17:38,320 --> 00:17:41,970
service

00:17:39,540 --> 00:17:43,200
think so this information is actually

00:17:41,970 --> 00:17:45,540
relevant in listeners in some

00:17:43,200 --> 00:17:47,160
microservices or in some discovery

00:17:45,540 --> 00:17:49,110
services we pass this information and

00:17:47,160 --> 00:17:51,000
then proceed to mostly ignore it like

00:17:49,110 --> 00:17:54,270
that cluster discovery service and that

00:17:51,000 --> 00:17:56,970
kind of just dumps out everything but

00:17:54,270 --> 00:17:58,650
yeah so we need to use the listener

00:17:56,970 --> 00:18:01,650
discovery service a listener is

00:17:58,650 --> 00:18:03,240
basically just something input in envoy

00:18:01,650 --> 00:18:04,320
terms and I think in most proxy terms a

00:18:03,240 --> 00:18:06,890
listener is basically just something

00:18:04,320 --> 00:18:09,990
that listens for incoming requests so

00:18:06,890 --> 00:18:11,820
the top listener here is this listener

00:18:09,990 --> 00:18:13,800
you'll notice assisting on localhost

00:18:11,820 --> 00:18:15,420
fifteen thousand and one which is the

00:18:13,800 --> 00:18:19,110
place we route all traffic to from the

00:18:15,420 --> 00:18:20,250
previous slides and this one's bound to

00:18:19,110 --> 00:18:22,710
the port which obviously means it's

00:18:20,250 --> 00:18:25,050
listening on the port and then we use

00:18:22,710 --> 00:18:27,240
and then we set use original destination

00:18:25,050 --> 00:18:29,930
to true and what this means it basically

00:18:27,240 --> 00:18:32,580
tells this listener to hand it off to

00:18:29,930 --> 00:18:35,280
the port from the original destination

00:18:32,580 --> 00:18:38,400
address or the best match for the

00:18:35,280 --> 00:18:42,210
collection of IP and port that it can

00:18:38,400 --> 00:18:45,450
find so this is once this is handed off

00:18:42,210 --> 00:18:46,710
this is where the second listener comes

00:18:45,450 --> 00:18:48,000
into play and what we're really looking

00:18:46,710 --> 00:18:52,380
for here is right down the bottom

00:18:48,000 --> 00:18:54,060
there's the RDS object there so this is

00:18:52,380 --> 00:18:57,240
telling it that where it needs to go to

00:18:54,060 --> 00:19:00,060
how it needs to look up his routes we've

00:18:57,240 --> 00:19:02,160
got the we're going to RDS cluster which

00:19:00,060 --> 00:19:04,050
is actually pilot I don't know why the

00:19:02,160 --> 00:19:07,710
string is set to RDS I think there's

00:19:04,050 --> 00:19:10,560
historical reasons I did ask white and

00:19:07,710 --> 00:19:15,690
he couldn't tell me so apparently no one

00:19:10,560 --> 00:19:18,030
knows it's lost yeah but yeah that

00:19:15,690 --> 00:19:20,670
that's just telling envoy to go to Pilar

00:19:18,030 --> 00:19:25,740
and to look up routes for port ninety

00:19:20,670 --> 00:19:27,150
eighty so now we're going to talk to the

00:19:25,740 --> 00:19:28,560
routes discovery service we're going to

00:19:27,150 --> 00:19:30,540
use port ninety eighty and the request

00:19:28,560 --> 00:19:32,460
and what the routes discovery service is

00:19:30,540 --> 00:19:37,080
going to return is basically every pore

00:19:32,460 --> 00:19:38,520
every Envoy cluster which is a coop

00:19:37,080 --> 00:19:41,760
service this is why it gets very

00:19:38,520 --> 00:19:43,920
confusing that exposes something on port

00:19:41,760 --> 00:19:45,960
ninety eighty so if you're all your

00:19:43,920 --> 00:19:47,430
Microsoft applications are exposing port

00:19:45,960 --> 00:19:48,660
ninety eighty RDS is basically just

00:19:47,430 --> 00:19:51,110
going to dump out everything that it

00:19:48,660 --> 00:19:51,110
knows about

00:19:52,160 --> 00:19:58,410
so roots deals and virtual hosts envoy

00:19:56,580 --> 00:20:00,900
will match on domain so we made the

00:19:58,410 --> 00:20:03,120
original request to reviews 90 80 so a

00:20:00,900 --> 00:20:05,640
match on that and then it will check the

00:20:03,120 --> 00:20:08,160
routes associated with that domain so

00:20:05,640 --> 00:20:10,530
here we've got two routes associated

00:20:08,160 --> 00:20:12,540
with it the reason we have two is

00:20:10,530 --> 00:20:15,990
basically because this is kind of a

00:20:12,540 --> 00:20:18,270
plant but we're doing Canary deploys

00:20:15,990 --> 00:20:21,390
here so what we're looking for is a

00:20:18,270 --> 00:20:24,900
header of a cookie header with user

00:20:21,390 --> 00:20:27,930
equals jason and if a user comes into

00:20:24,900 --> 00:20:30,090
our application with that header we will

00:20:27,930 --> 00:20:32,220
be sending them to version two of this

00:20:30,090 --> 00:20:36,240
cluster as app and if not then we'll be

00:20:32,220 --> 00:20:37,500
sending them to this one so the

00:20:36,240 --> 00:20:38,880
important thing here is the cluster name

00:20:37,500 --> 00:20:41,400
so now we need to go to the cluster

00:20:38,880 --> 00:20:46,650
discovery service to look up information

00:20:41,400 --> 00:20:48,360
on this cluster so this is the cluster

00:20:46,650 --> 00:20:50,430
discovery service it will basically dump

00:20:48,360 --> 00:20:53,480
out everything that pilot knows about so

00:20:50,430 --> 00:20:55,920
you'll in if you went and curl'd

00:20:53,480 --> 00:20:57,720
v1 slash clusters you'd get things like

00:20:55,920 --> 00:20:59,400
coop dns in coop dashboard that would

00:20:57,720 --> 00:21:01,710
all be in there but what we're really

00:20:59,400 --> 00:21:03,840
interested in is looking up that cost

00:21:01,710 --> 00:21:06,570
the name there and you can see this

00:21:03,840 --> 00:21:10,710
one's of type SDS or EDS in the new

00:21:06,570 --> 00:21:12,270
stuff so this tells on void that it's a

00:21:10,710 --> 00:21:13,860
dynamic collection of endpoints so it

00:21:12,270 --> 00:21:17,280
needs to go and look this information up

00:21:13,860 --> 00:21:19,500
from pilot again I'm using lookup but

00:21:17,280 --> 00:21:21,600
this is kind of all stored in a cache it

00:21:19,500 --> 00:21:23,370
doesn't make a request of pilot every

00:21:21,600 --> 00:21:25,800
time for one of these because that would

00:21:23,370 --> 00:21:27,540
not be scalable at all so we're gonna

00:21:25,800 --> 00:21:31,350
take the service name here and go and

00:21:27,540 --> 00:21:32,970
look that up in the endpoint or service

00:21:31,350 --> 00:21:35,850
discovery service depending on which

00:21:32,970 --> 00:21:37,230
version of history are you using so we

00:21:35,850 --> 00:21:39,080
can use the service name in the lookup

00:21:37,230 --> 00:21:41,250
obviously that's how she's going to be

00:21:39,080 --> 00:21:43,800
URL encoded because otherwise it will

00:21:41,250 --> 00:21:46,920
fail but here we've only got one host

00:21:43,800 --> 00:21:48,330
serving this request so we now have

00:21:46,920 --> 00:21:50,850
worked out where to set on voice and I

00:21:48,330 --> 00:21:54,390
worked out exactly the IP import that it

00:21:50,850 --> 00:21:56,310
needs to send this request so we know

00:21:54,390 --> 00:21:57,270
that there's a Envoy in the first part

00:21:56,310 --> 00:22:01,410
and we know that there's an envoy in the

00:21:57,270 --> 00:22:03,060
receiving pod so when it get this

00:22:01,410 --> 00:22:03,570
request is now made when it reaches the

00:22:03,060 --> 00:22:05,129
pod

00:22:03,570 --> 00:22:06,960
it goes into pool fifteen thousand and

00:22:05,129 --> 00:22:08,190
one it gets forwarded to a different

00:22:06,960 --> 00:22:10,320
listen at this time because it's got a

00:22:08,190 --> 00:22:12,600
better match on that IP if you remember

00:22:10,320 --> 00:22:14,009
that IP was the one we found before so

00:22:12,600 --> 00:22:17,609
it will get forwarded to this listener

00:22:14,009 --> 00:22:19,979
and then this one's got a lot more stuff

00:22:17,609 --> 00:22:21,389
in line because when you're if you if

00:22:19,979 --> 00:22:23,970
you know the but the request is coming

00:22:21,389 --> 00:22:25,169
inbound to port 98 in a coop cluster you

00:22:23,970 --> 00:22:26,609
know you're gonna be forwarding it to

00:22:25,169 --> 00:22:27,960
localhost ninety eighty because that's

00:22:26,609 --> 00:22:28,759
where your micro-services listening

00:22:27,960 --> 00:22:31,739
within a pod

00:22:28,759 --> 00:22:34,619
so we'll find the cluster name which is

00:22:31,739 --> 00:22:38,999
n dot ninety eighty we'll go and look

00:22:34,619 --> 00:22:40,739
that up too far and this one's a static

00:22:38,999 --> 00:22:41,999
one so like I said we know that we're

00:22:40,739 --> 00:22:43,080
going to route support ninety eighty so

00:22:41,999 --> 00:22:44,700
we don't need to bother looking up

00:22:43,080 --> 00:22:45,899
dynamic endpoints we can just go

00:22:44,700 --> 00:22:49,499
straight through and route it to port

00:22:45,899 --> 00:22:53,700
ninety eighty inline so now the requests

00:22:49,499 --> 00:22:57,479
finally arrived handle the response

00:22:53,700 --> 00:22:59,340
however you want and that I hope most of

00:22:57,479 --> 00:23:02,070
that made sense has been quite it was I

00:22:59,340 --> 00:23:03,450
understand there's a lot Jason there so

00:23:02,070 --> 00:23:05,309
if none of that makes sense

00:23:03,450 --> 00:23:07,229
feel free to ask me questions luckily

00:23:05,309 --> 00:23:08,580
unless something goes wrong in SEO you

00:23:07,229 --> 00:23:10,169
don't have to worry about this this is

00:23:08,580 --> 00:23:13,499
only relevant information if you're

00:23:10,169 --> 00:23:17,639
debugging stuff again SEO is in beta so

00:23:13,499 --> 00:23:19,349
you may be debugging stuff but yeah so

00:23:17,639 --> 00:23:21,179
why really the one take away should

00:23:19,349 --> 00:23:22,830
probably take from this is the the idea

00:23:21,179 --> 00:23:24,059
is that SEO is basically the next level

00:23:22,830 --> 00:23:26,849
of abstraction running on top of

00:23:24,059 --> 00:23:29,070
kubernetes it moves the observability

00:23:26,849 --> 00:23:30,809
stuff and intelligent routing stuff to

00:23:29,070 --> 00:23:33,299
the platform it does things like mutual

00:23:30,809 --> 00:23:36,330
TLS by default if you turn it on and

00:23:33,299 --> 00:23:38,580
it'll do things like policy enforcement

00:23:36,330 --> 00:23:39,809
with a mix of stuff I don't work on any

00:23:38,580 --> 00:23:41,119
a mix of stuff so I can't really talk

00:23:39,809 --> 00:23:43,349
about it

00:23:41,119 --> 00:23:45,389
but yet the idea is to move all this

00:23:43,349 --> 00:23:46,950
stuff to the platform so you don't have

00:23:45,389 --> 00:23:49,200
to worry about this code in your micro

00:23:46,950 --> 00:23:51,929
services themselves and you can focus on

00:23:49,200 --> 00:23:53,729
actually writing some of the domain

00:23:51,929 --> 00:23:55,739
logic and business logic in your micro

00:23:53,729 --> 00:23:57,629
services rather than do all of the

00:23:55,739 --> 00:24:01,440
intelligent routing stuff here in your

00:23:57,629 --> 00:24:03,059
clients so that's the end of my talk if

00:24:01,440 --> 00:24:04,379
you've got any feedback for me or want

00:24:03,059 --> 00:24:08,489
to suggest any future technical talks

00:24:04,379 --> 00:24:10,409
because I am your local sto developer so

00:24:08,489 --> 00:24:12,809
yeah if you've got any kind of technical

00:24:10,409 --> 00:24:14,099
deep dive talks you want just come speak

00:24:12,809 --> 00:24:15,149
to me afterwards I'm happy to them any

00:24:14,099 --> 00:24:16,280
future meets up so if you'll have me

00:24:15,149 --> 00:24:18,320
again

00:24:16,280 --> 00:24:20,120
so you can either comes between offers

00:24:18,320 --> 00:24:21,760
or speaks me on Twitter there with that

00:24:20,120 --> 00:24:27,279
I'll take any questions

00:24:21,760 --> 00:24:27,279

YouTube URL: https://www.youtube.com/watch?v=07eRSVsebNs


