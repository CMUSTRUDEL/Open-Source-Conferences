Title: JS.Geo- Drawing Maps with OpenGL
Publication date: 2020-01-23
Playlist: JS.Geo 2014
Description: 
	By, Lauren Budorick

Help us caption & translate this video!

http://amara.org/v/FS0v/
Captions: 
	00:00:16,480 --> 00:00:20,619
I'm gonna talk about drawing maps with

00:00:18,670 --> 00:00:23,830
OpenGL my name is Lauren and I worked in

00:00:20,619 --> 00:00:26,109
matte box so we release matte box GL at

00:00:23,830 --> 00:00:27,939
the summer first GL native which is

00:00:26,109 --> 00:00:30,220
written in C++ for native devices and

00:00:27,939 --> 00:00:33,970
then really isn't matte box glj asks

00:00:30,220 --> 00:00:37,239
about a month ago for the web so open GL

00:00:33,970 --> 00:00:39,430
is an open source low-level graphics API

00:00:37,239 --> 00:00:40,390
that's been around for about 22 years so

00:00:39,430 --> 00:00:42,159
at this point it has pretty good

00:00:40,390 --> 00:00:45,489
hardware and software renderer support

00:00:42,159 --> 00:00:47,559
and more recently WebGL has pretty

00:00:45,489 --> 00:00:49,719
excellent cross browser support native

00:00:47,559 --> 00:01:13,300
Mobile Safari is adding support I think

00:00:49,719 --> 00:01:15,039
with iOS 82 but so traditionally web

00:01:13,300 --> 00:01:16,600
Maps has been done with CPU based on

00:01:15,039 --> 00:01:18,820
English there's a lot of good reasons to

00:01:16,600 --> 00:01:20,289
do CPU this place right I'm gonna just

00:01:18,820 --> 00:01:21,759
let a great things but a lot of web

00:01:20,289 --> 00:01:24,700
mapping is moving increasingly towards

00:01:21,759 --> 00:01:26,619
GPU base running and it has some

00:01:24,700 --> 00:01:29,079
limitations still but ultimately drawing

00:01:26,619 --> 00:01:30,070
on the GPU is just faster and it allows

00:01:29,079 --> 00:01:33,430
for some really cool things like

00:01:30,070 --> 00:01:36,310
continued assume or like arbitrary map

00:01:33,430 --> 00:01:38,799
rotation and it also allows access to

00:01:36,310 --> 00:01:41,799
native hardware acceleration but out of

00:01:38,799 --> 00:01:43,420
the box OpenGL only draws lines and

00:01:41,799 --> 00:01:45,719
triangles and for maps that we need a

00:01:43,420 --> 00:01:54,219
lot more than lines and triangles so

00:01:45,719 --> 00:01:56,920
basically we need lines polygons icons

00:01:54,219 --> 00:01:58,810
and text ultimately so those are kind of

00:01:56,920 --> 00:02:01,030
the primitives that make up what we know

00:01:58,810 --> 00:02:03,039
it's maps so drawing lines like I said

00:02:01,030 --> 00:02:04,840
OpenGL actually draws lines and

00:02:03,039 --> 00:02:07,259
triangles so lines should essentially be

00:02:04,840 --> 00:02:10,869
the easiest route but it turns out that

00:02:07,259 --> 00:02:12,730
Lyons has OpenGL has a command called

00:02:10,869 --> 00:02:14,590
geo lines but this is what geo lands

00:02:12,730 --> 00:02:16,780
look like so they're not anti-alias they

00:02:14,590 --> 00:02:18,549
don't support miter joints they often

00:02:16,780 --> 00:02:20,709
only support a ninja with mini devices

00:02:18,549 --> 00:02:23,019
and on some devices they don't support

00:02:20,709 --> 00:02:24,000
with greater than 10 pixels so if you've

00:02:23,019 --> 00:02:27,030
ever seen like

00:02:24,000 --> 00:02:32,820
like this so we need to figure out a

00:02:27,030 --> 00:02:34,230
different way to talk about so we have

00:02:32,820 --> 00:02:38,040
to figure out a different way to draw

00:02:34,230 --> 00:02:40,230
lines and we do that in my box GL is by

00:02:38,040 --> 00:02:42,930
using triangles like I said the other

00:02:40,230 --> 00:02:46,430
thing that OpenGL draws is triangles so

00:02:42,930 --> 00:02:49,110
basically this is what a Y looks like in

00:02:46,430 --> 00:02:51,810
so it's made up of six triangles in this

00:02:49,110 --> 00:02:54,600
case so the innermost two triangles make

00:02:51,810 --> 00:02:56,670
up a quad that is the width of the

00:02:54,600 --> 00:02:58,290
specified width of the line and so

00:02:56,670 --> 00:03:00,510
basically you pass those two through

00:02:58,290 --> 00:03:05,160
that box GL shader or through open GL

00:03:00,510 --> 00:03:07,140
shaders and now we can do arbitrary with

00:03:05,160 --> 00:03:09,630
lines and they can be smoothly scanned

00:03:07,140 --> 00:03:11,250
but then to make anti-alias lines we

00:03:09,630 --> 00:03:14,850
also have to drop these two more quads

00:03:11,250 --> 00:03:17,150
on the outside that form like kind of

00:03:14,850 --> 00:03:20,520
these basically these gradients here so

00:03:17,150 --> 00:03:23,580
those basically passing alpha values to

00:03:20,520 --> 00:03:25,739
the two vertices on the inside of those

00:03:23,580 --> 00:03:29,549
quads that's one and alpha values on the

00:03:25,739 --> 00:03:30,900
outside of zero and then OpenGL does

00:03:29,549 --> 00:03:32,519
free linear interpolations

00:03:30,900 --> 00:03:35,310
so then you can just interpolate between

00:03:32,519 --> 00:03:37,980
those alpha values to draw basically

00:03:35,310 --> 00:03:41,340
opacity gradients and that's how you get

00:03:37,980 --> 00:03:42,810
a nice anti alias lying for and another

00:03:41,340 --> 00:03:45,750
thing we need for Matt for drawing lines

00:03:42,810 --> 00:03:47,519
on maps is nice join so round during

00:03:45,750 --> 00:03:48,540
this bevel joins and mitre joins and

00:03:47,519 --> 00:03:51,030
they're not gonna go into that too much

00:03:48,540 --> 00:03:52,350
today but it's a similar process of

00:03:51,030 --> 00:03:54,209
figuring out how to draw those

00:03:52,350 --> 00:03:55,680
geometries using just triangles and

00:03:54,209 --> 00:03:57,180
there's an awesome blog post in that box

00:03:55,680 --> 00:03:58,230
blog but I'm a Colin Constantine that

00:03:57,180 --> 00:04:01,170
you should definitely check out if you

00:03:58,230 --> 00:04:03,299
interested and so another thing we need

00:04:01,170 --> 00:04:07,140
to go to draw on that next which is

00:04:03,299 --> 00:04:09,959
super important um and we need text at

00:04:07,140 --> 00:04:13,200
arbitrary rotations for variable labels

00:04:09,959 --> 00:04:14,610
and we also need text halos which is

00:04:13,200 --> 00:04:16,320
pretty distinctive to web mapping but

00:04:14,610 --> 00:04:18,299
super important if we want to draw text

00:04:16,320 --> 00:04:19,769
over anything so if you look into

00:04:18,299 --> 00:04:21,510
rasterizing texts one of the really

00:04:19,769 --> 00:04:24,320
common things to use is free type which

00:04:21,510 --> 00:04:29,490
is kind of the go-to open source library

00:04:24,320 --> 00:04:31,569
for rendering text and basically what

00:04:29,490 --> 00:04:33,339
free type does is it

00:04:31,569 --> 00:04:35,019
creates a glyph atlas of all the glyphs

00:04:33,339 --> 00:04:36,399
you might need to use in your map so

00:04:35,019 --> 00:04:38,709
it's gonna look kinda like this and once

00:04:36,399 --> 00:04:39,969
again instead of because we're using GL

00:04:38,709 --> 00:04:41,649
we need to use triangles so it's

00:04:39,969 --> 00:04:43,029
basically gonna break up each clip into

00:04:41,649 --> 00:04:45,429
two triangles and figure out how to draw

00:04:43,029 --> 00:04:49,509
that glyph and it does a pretty good job

00:04:45,429 --> 00:04:52,179
of this it it's essentially copying a

00:04:49,509 --> 00:04:53,739
bitmap representation onto your map so

00:04:52,179 --> 00:04:55,929
you're copying it pixel by pixel from

00:04:53,739 --> 00:04:57,789
the glyph Alice onto the map and that's

00:04:55,929 --> 00:04:59,319
fine for a little while but then as soon

00:04:57,789 --> 00:05:02,019
as you start rotating that it becomes

00:04:59,319 --> 00:05:03,639
pretty blurry because using OpenGL

00:05:02,019 --> 00:05:05,169
linear interpolation like I said it's

00:05:03,639 --> 00:05:07,659
free but it's not the best when it comes

00:05:05,169 --> 00:05:10,899
to something as precise as a glyph so it

00:05:07,659 --> 00:05:12,729
doesn't render a very nice text we could

00:05:10,899 --> 00:05:15,339
also rear equesticle if every time you

00:05:12,729 --> 00:05:16,749
rotate the map from free type but that's

00:05:15,339 --> 00:05:18,519
gonna become pretty expensive and it's

00:05:16,749 --> 00:05:21,639
listed under map a lot so we had to find

00:05:18,519 --> 00:05:23,799
some alternative so instead of using

00:05:21,639 --> 00:05:25,569
free type there's a paper from valve

00:05:23,799 --> 00:05:28,149
software on scientists since fields but

00:05:25,569 --> 00:05:30,099
we looked into and scientists and fields

00:05:28,149 --> 00:05:33,579
basically instead of using a bitmap

00:05:30,099 --> 00:05:35,529
representation of the glyph it makes

00:05:33,579 --> 00:05:36,789
something looks like this and this looks

00:05:35,529 --> 00:05:39,639
really blurred but it's actually not

00:05:36,789 --> 00:05:41,559
pixel blur it's actually where each of

00:05:39,639 --> 00:05:43,539
those values represents the distance

00:05:41,559 --> 00:05:47,259
from that point to the outside of a

00:05:43,539 --> 00:05:48,189
given glyph so at that point basically

00:05:47,259 --> 00:05:50,860
everything that should be rendered

00:05:48,189 --> 00:05:51,849
inside the glyph has a negative value

00:05:50,860 --> 00:05:53,229
and everything that you've rendered

00:05:51,849 --> 00:05:57,999
outside that left has a positive value

00:05:53,229 --> 00:05:59,110
and using OpenGL free linear

00:05:57,999 --> 00:06:01,269
interpolation again the future

00:05:59,110 --> 00:06:02,829
interpolate it and scale these up so you

00:06:01,269 --> 00:06:05,049
can have glyphs that are pretty small

00:06:02,829 --> 00:06:07,479
and then scale them up nicely and end up

00:06:05,049 --> 00:06:10,979
drawing really nice looking glyphs and

00:06:07,479 --> 00:06:10,979
we actually added another

00:06:11,399 --> 00:06:19,119
optimization which was two-step all

00:06:15,789 --> 00:06:21,249
those values instead of doing about our

00:06:19,119 --> 00:06:23,289
below zero we changed it from from zero

00:06:21,249 --> 00:06:24,939
to 180 one and then one ninety two to

00:06:23,289 --> 00:06:27,969
255 so then essentially we're mapping

00:06:24,939 --> 00:06:30,639
these color values to whether or not

00:06:27,969 --> 00:06:33,129
what should be rendered and the cool

00:06:30,639 --> 00:06:35,199
thing is that using this we can also

00:06:33,129 --> 00:06:36,879
render text halos for free that are

00:06:35,199 --> 00:06:39,789
pretty accurate because we just changed

00:06:36,879 --> 00:06:41,050
the threshold like I said instead of

00:06:39,789 --> 00:06:42,339
doing one I do wanna we'll just change

00:06:41,050 --> 00:06:43,749
the threshold to something lower and

00:06:42,339 --> 00:06:46,179
that way we can render it basically just

00:06:43,749 --> 00:06:50,649
like fatter text and I thought to create

00:06:46,179 --> 00:06:53,050
pretty great text yellows and doing this

00:06:50,649 --> 00:06:58,919
actually ends up producing really nice

00:06:53,050 --> 00:07:02,999
scaling really easy to rotate text and

00:06:58,919 --> 00:07:07,689
this is what a glyph Atlas looks like in

00:07:02,999 --> 00:07:09,639
using STS there's some other interesting

00:07:07,689 --> 00:07:12,249
things about rendering text in OpenGL

00:07:09,639 --> 00:07:14,019
like label placement and context

00:07:12,249 --> 00:07:15,219
sensitive text replacement and there's a

00:07:14,019 --> 00:07:17,259
couple good blog posts again on the

00:07:15,219 --> 00:07:19,809
matte box blog by my colleague on says

00:07:17,259 --> 00:07:30,999
about other parts of written text in

00:07:19,809 --> 00:07:34,360
OpenGL sorry yeah yellow just looks cool

00:07:30,999 --> 00:07:35,829
no I'm just kidding and so another thing

00:07:34,360 --> 00:07:39,669
we have to be able to draw for maps is

00:07:35,829 --> 00:07:41,919
polygons and polygons again is gonna be

00:07:39,669 --> 00:07:43,240
a pretty simpler similar process to how

00:07:41,919 --> 00:07:44,469
we're drawing lines or we basically just

00:07:43,240 --> 00:07:48,009
have to figure out how to draw a polygon

00:07:44,469 --> 00:07:51,550
using triangles and did this in matte

00:07:48,009 --> 00:07:53,199
box GL native and it was working quite

00:07:51,550 --> 00:07:56,559
well actually where we tessellate a

00:07:53,199 --> 00:07:59,379
polygon into triangles but in JavaScript

00:07:56,559 --> 00:08:01,659
are any of the libraries that are out

00:07:59,379 --> 00:08:03,279
there were kind of too slow so instead

00:08:01,659 --> 00:08:05,079
we use this trick called the using a

00:08:03,279 --> 00:08:08,439
stencil buffer which basically creates a

00:08:05,079 --> 00:08:09,879
secondary buffer of a map or just a

00:08:08,439 --> 00:08:11,860
secondary buffer and then you could draw

00:08:09,879 --> 00:08:13,360
the shape and fill in everything and

00:08:11,860 --> 00:08:15,219
then just copy part of the buffer back

00:08:13,360 --> 00:08:16,629
to the screen but that's actually kind

00:08:15,219 --> 00:08:17,919
of expensive because you're copying this

00:08:16,629 --> 00:08:20,500
buffer back and forth and it uses more

00:08:17,919 --> 00:08:21,760
memory that we really need so

00:08:20,500 --> 00:08:23,680
we wanted to also bring it kind of

00:08:21,760 --> 00:08:25,240
background parity with native and also

00:08:23,680 --> 00:08:27,070
geo is just better at drawing triangle

00:08:25,240 --> 00:08:28,990
something is at doing things like

00:08:27,070 --> 00:08:30,730
copying stencil buffers so actually Vlad

00:08:28,990 --> 00:08:34,150
as you know is really into like small

00:08:30,730 --> 00:08:36,669
code and was not happy with all these

00:08:34,150 --> 00:08:39,099
libraries already out there and so he

00:08:36,669 --> 00:08:40,690
wrote his own implementation of

00:08:39,099 --> 00:08:42,990
something called vitals for into my

00:08:40,690 --> 00:08:47,530
strangulation algorithm that will

00:08:42,990 --> 00:08:49,060
basically tessellate a a polygon until

00:08:47,530 --> 00:08:52,630
these triangles this is how we draw them

00:08:49,060 --> 00:08:54,700
with a matte box GL and so his library

00:08:52,630 --> 00:08:55,930
is also open source now it's matte box

00:08:54,700 --> 00:08:58,570
it's like github slash matte white

00:08:55,930 --> 00:09:06,430
/title if you want to look at that it's

00:08:58,570 --> 00:09:08,800
pretty cool so a couple of their

00:09:06,430 --> 00:09:11,290
interesting things aside from the basic

00:09:08,800 --> 00:09:16,750
map permanent wanted to do we wanted to

00:09:11,290 --> 00:09:18,250
be able to draw blurred Blair's and so

00:09:16,750 --> 00:09:20,920
we're gonna feel blur like anything

00:09:18,250 --> 00:09:22,540
together not just lines are you know so

00:09:20,920 --> 00:09:23,490
what we ended up doing was looking into

00:09:22,540 --> 00:09:27,100
pre-rendering

00:09:23,490 --> 00:09:28,420
so instead of drawing a layer and then

00:09:27,100 --> 00:09:30,339
blurring it what we ended up doing is

00:09:28,420 --> 00:09:31,870
using a render buffer which is like a

00:09:30,339 --> 00:09:34,240
secondary off-screen buffer that you're

00:09:31,870 --> 00:09:38,020
gonna draw layers to so for something

00:09:34,240 --> 00:09:40,210
like hill shades which I can show you in

00:09:38,020 --> 00:09:42,670
a minute I don't want to fight in here

00:09:40,210 --> 00:09:44,560
but we can draw multiple layers to a

00:09:42,670 --> 00:09:47,950
render buffer and then apply a Gaussian

00:09:44,560 --> 00:09:50,380
blur over those over the whole layer and

00:09:47,950 --> 00:09:51,610
then render that layer to the screen and

00:09:50,380 --> 00:09:53,950
the cool thing about drawing blurs and

00:09:51,610 --> 00:09:55,420
pre-rendered layers is that we can

00:09:53,950 --> 00:09:56,710
actually draw them smaller than they

00:09:55,420 --> 00:09:59,350
actually need to be on the map and then

00:09:56,710 --> 00:10:00,760
using OpenGL 3 linear interpolation we

00:09:59,350 --> 00:10:02,350
can scale them up and because they're

00:10:00,760 --> 00:10:05,410
blurred it actually looks pretty great

00:10:02,350 --> 00:10:07,390
and that way it's faster than rendering

00:10:05,410 --> 00:10:12,130
blurts to entire like full science

00:10:07,390 --> 00:10:14,950
layers another cool thing is a lot of

00:10:12,130 --> 00:10:17,200
people are kind of wondering what about

00:10:14,950 --> 00:10:18,670
like older machines like you know maybe

00:10:17,200 --> 00:10:20,140
your machine doesn't support WebGL or

00:10:18,670 --> 00:10:22,540
maybe your your browser doesn't support

00:10:20,140 --> 00:10:25,030
you help so there's we're kind of

00:10:22,540 --> 00:10:27,510
working on something experimental using

00:10:25,030 --> 00:10:29,610
node bindings to render

00:10:27,510 --> 00:10:32,490
that works she'll need it from server

00:10:29,610 --> 00:10:35,790
and then save those files and serve them

00:10:32,490 --> 00:10:37,470
to devices or browsers that don't

00:10:35,790 --> 00:10:39,650
support GL as kind of a fallback but

00:10:37,470 --> 00:10:42,240
that's like I said still experimental

00:10:39,650 --> 00:10:44,430
and we're working on also creating a

00:10:42,240 --> 00:10:46,020
style editor that'll make it easier to

00:10:44,430 --> 00:10:48,330
edit it styles because now that it runs

00:10:46,020 --> 00:10:52,350
you used to carto CSS we're doing

00:10:48,330 --> 00:10:55,370
something totally different so so

00:10:52,350 --> 00:10:55,370
hopefully that will make it easier

00:11:05,800 --> 00:11:21,430
right we need IPA compatibility which is

00:11:11,240 --> 00:11:21,430
the backbone question back sure sorry

00:12:02,100 --> 00:12:08,970
I think that's that hardware question

00:12:07,230 --> 00:12:18,120
that is just way beyond what I

00:12:08,970 --> 00:12:19,980
understand about GL to be honest um I

00:12:18,120 --> 00:12:22,380
don't I don't really know so much about

00:12:19,980 --> 00:12:25,590
like the internals of devices in OpenGL

00:12:22,380 --> 00:12:30,960
it hey you guys are doing the cesium

00:12:25,590 --> 00:12:35,520
talk this afternoon okay we have a

00:12:30,960 --> 00:12:40,170
caesium talk okay but if you have like

00:12:35,520 --> 00:12:42,090
good bugs if you start working in that

00:12:40,170 --> 00:12:43,770
box you have cool bugs that you find in

00:12:42,090 --> 00:13:19,860
various devices you should totally send

00:12:43,770 --> 00:13:24,090
them to us and that's actually a

00:13:19,860 --> 00:13:27,740
question that Vlad might be developing

00:13:24,090 --> 00:13:27,740
like we flip for matte box gel

00:14:02,980 --> 00:14:07,670
yeah we have another colleague who just

00:14:05,390 --> 00:14:09,560
started actually who did something some

00:14:07,670 --> 00:14:12,020
experiment combining dawn elements for

00:14:09,560 --> 00:14:15,140
to make like 100 markers on a map using

00:14:12,020 --> 00:14:17,210
just getting the position of pixel on

00:14:15,140 --> 00:14:18,320
the map on the screen and it works

00:14:17,210 --> 00:14:55,430
pretty well but that's it's kind of a

00:14:18,320 --> 00:14:56,900
hack but yes it's still pretty and say

00:14:55,430 --> 00:14:59,810
one a different depends only your

00:14:56,900 --> 00:15:02,420
application is but also I don't really

00:14:59,810 --> 00:15:05,570
mean by how hard is it so Matt Fox GL

00:15:02,420 --> 00:15:08,900
started in some capacity May of 2013 as

00:15:05,570 --> 00:15:12,470
kind of an experiment and like I said we

00:15:08,900 --> 00:15:15,440
released native and may I believe mayor

00:15:12,470 --> 00:15:17,360
June and then is in August which are

00:15:15,440 --> 00:15:20,780
basically two different vendors that do

00:15:17,360 --> 00:15:22,780
the same thing I don't know how to

00:15:20,780 --> 00:15:52,690
answer how hard is it

00:15:22,780 --> 00:15:53,980
oh so to use my bucks jail that's

00:15:52,690 --> 00:15:55,570
probably gonna read it a little less

00:15:53,980 --> 00:15:57,700
good I mean it depends like I said on

00:15:55,570 --> 00:16:00,820
some upcoming work maybe if it's using

00:15:57,700 --> 00:16:02,860
leaflet let's leave legit geo it also

00:16:00,820 --> 00:16:03,940
depends on how complicated your map is I

00:16:02,860 --> 00:16:06,730
suppose it shouldn't be too complicated

00:16:03,940 --> 00:16:09,760
the Styles like I said are pretty

00:16:06,730 --> 00:16:12,280
different so I don't have you seen matte

00:16:09,760 --> 00:16:13,810
box shield like JSON that's pretty

00:16:12,280 --> 00:16:14,920
different like I said I work in an

00:16:13,810 --> 00:16:17,140
editor that's gonna make hopefully

00:16:14,920 --> 00:16:18,670
restyling I'm a pretty much easier it

00:16:17,140 --> 00:16:23,800
has like a nice UI instead of just a

00:16:18,670 --> 00:16:26,680
code editor but so it's not like a one

00:16:23,800 --> 00:16:29,050
step shop but it'll kind of free your

00:16:26,680 --> 00:16:32,170
maps and watch a lot of things so right

00:16:29,050 --> 00:16:33,840
and then the other point is what is the

00:16:32,170 --> 00:16:36,790
use case what is the user experience

00:16:33,840 --> 00:16:39,790
that we want to create that actually

00:16:36,790 --> 00:16:43,240
demands this advanced technology like a

00:16:39,790 --> 00:16:47,260
rapidly changing styling of a base map

00:16:43,240 --> 00:16:50,200
on the fly and the idea is with this

00:16:47,260 --> 00:16:52,570
technology is so on the edge and yet the

00:16:50,200 --> 00:16:54,400
majority of our work is take a hundred

00:16:52,570 --> 00:16:58,030
points and plow them down on some tiles

00:16:54,400 --> 00:17:00,820
right so unless you know we're going to

00:16:58,030 --> 00:17:04,390
the sensor web and huge volumes of

00:17:00,820 --> 00:17:06,970
dynamic data changing by the second then

00:17:04,390 --> 00:17:09,060
this that some of this technology is the

00:17:06,970 --> 00:17:11,630
only way you're going to handle that

00:17:09,060 --> 00:17:16,220
versus all our traditional

00:17:11,630 --> 00:17:19,310
cases we get by well I mean you took SVG

00:17:16,220 --> 00:17:24,680
what 15 years to become useful and

00:17:19,310 --> 00:17:28,250
everyday deployments so it's a it's a

00:17:24,680 --> 00:17:48,290
it's a chicken and the egg problem and

00:17:28,250 --> 00:17:50,870
some no question so we thought about

00:17:48,290 --> 00:17:54,320
that but ultimately I'm at Fox GL can do

00:17:50,870 --> 00:17:55,460
so much more than Curtis ESS so at this

00:17:54,320 --> 00:17:59,000
point I think we're not really planning

00:17:55,460 --> 00:18:03,040
on building a converter um there's like

00:17:59,000 --> 00:18:06,400
a little bit of learning curve but it it

00:18:03,040 --> 00:18:06,400
it's worth it

00:18:21,109 --> 00:18:24,109
sir

00:18:36,680 --> 00:18:44,400
the world what my question okay I mean

00:18:41,270 --> 00:18:47,370
in my opinion not everyone knows like is

00:18:44,400 --> 00:18:49,230
using Juliet so GL is still its own

00:18:47,370 --> 00:18:50,580
brave new world a little bit and the

00:18:49,230 --> 00:18:52,800
things that you can do it that are just

00:18:50,580 --> 00:18:54,420
pretty unless so I think there's a lot

00:18:52,800 --> 00:18:56,190
of cool things that are gonna happen

00:18:54,420 --> 00:18:59,180
with GL that people are kind of gonna

00:18:56,190 --> 00:19:01,800
figure out I'm actually gonna show you

00:18:59,180 --> 00:19:03,420
this is the editor that I mentioned

00:19:01,800 --> 00:19:05,220
that's still like very much under

00:19:03,420 --> 00:19:08,790
development so I'm probably not supposed

00:19:05,220 --> 00:19:16,740
to show it to you and but so like things

00:19:08,790 --> 00:19:21,090
like this and you can like you know your

00:19:16,740 --> 00:19:26,130
mat won't apply and you can basically

00:19:21,090 --> 00:19:28,560
and I also someone at my box made this

00:19:26,130 --> 00:19:33,630
pretty cool like storytelling future

00:19:28,560 --> 00:19:35,670
here using digital globes new imagery

00:19:33,630 --> 00:19:37,980
where basically we can like scroll down

00:19:35,670 --> 00:19:40,650
here in it and this is using a raster

00:19:37,980 --> 00:19:42,450
raster type it titles obviously but just

00:19:40,650 --> 00:19:46,490
like the interactions you can create

00:19:42,450 --> 00:19:46,490
with GL jsr pretty cool

00:19:52,750 --> 00:20:01,250
alright so if you're playing jsg I would

00:19:55,430 --> 00:20:05,060
be dope story back that's been taking I

00:20:01,250 --> 00:20:20,960
had quite criticism the speaker's not

00:20:05,060 --> 00:20:24,140
why do you show hexagon maps with other

00:20:20,960 --> 00:20:32,330
things can you use other things you can

00:20:24,140 --> 00:20:35,230
use of other things we it's matte box GL

00:20:32,330 --> 00:20:44,060
so you can use our library unsalted

00:20:35,230 --> 00:20:47,510
tiles right you need a public key format

00:20:44,060 --> 00:20:56,540
box for if you're using matte box hosted

00:20:47,510 --> 00:21:01,960
tiles God paid back the one sees body

00:20:56,540 --> 00:21:01,960
one sees nice and wide

00:21:11,770 --> 00:21:13,830
you

00:21:21,450 --> 00:21:23,510

YouTube URL: https://www.youtube.com/watch?v=AsqeRF6NP_0


