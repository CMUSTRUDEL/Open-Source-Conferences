Title: MountainWest RubyConf 2013 Ruby 2.0 by Yukihiro 'Matz' Matsumoto
Publication date: 2020-01-28
Playlist: MWRC 2013
Description: 
	Help us caption & translate this video!

http://amara.org/v/FGb1/
Captions: 
	00:00:19,699 --> 00:00:29,609
so okay focus it on ok that's a good bad

00:00:26,039 --> 00:00:37,470
and agree the good things is the

00:00:29,609 --> 00:00:41,239
mountain west will be conference in i'm

00:00:37,470 --> 00:00:45,390
a mormon so so that in this conference

00:00:41,239 --> 00:00:47,729
too many of you are also normals of

00:00:45,390 --> 00:00:52,439
course this is always Eddie but you know

00:00:47,729 --> 00:00:54,809
back in Japan virtually no one and has

00:00:52,439 --> 00:00:57,960
no way in the community has same face as

00:00:54,809 --> 00:01:02,790
me so this is kind of weird and that's

00:00:57,960 --> 00:01:05,759
good and then you know the besides that

00:01:02,790 --> 00:01:12,079
the hospitality of that this conference

00:01:05,759 --> 00:01:17,189
is great and I think this is ah doesn't

00:01:12,079 --> 00:01:23,720
we should appreciate Mike Moore there

00:01:17,189 --> 00:01:23,720
yeah the bad things is my galaxy note 2

00:01:26,000 --> 00:01:35,510
just because you know this morning I

00:01:29,900 --> 00:01:35,510
don't know where that went to break I

00:01:36,020 --> 00:01:43,500
don't know that you know the in the very

00:01:39,600 --> 00:01:50,850
beginning of this journey my micro SD

00:01:43,500 --> 00:01:55,550
card ah did died so the older backup was

00:01:50,850 --> 00:02:01,680
gone then a few days later my phone

00:01:55,550 --> 00:02:04,229
there it was that too bad I have to buy

00:02:01,680 --> 00:02:08,640
a new one you know the my last one the

00:02:04,229 --> 00:02:11,880
Galaxy Nexus was dead in six months and

00:02:08,640 --> 00:02:15,900
this this new one the galaxy note 2 was

00:02:11,880 --> 00:02:20,750
dead in six months probably someone in

00:02:15,900 --> 00:02:29,850
the Samsung Haiti anyway the ugly one

00:02:20,750 --> 00:02:31,260
this keynote yep I this is very

00:02:29,850 --> 00:02:38,250
unfortunate you don't understand

00:02:31,260 --> 00:02:40,980
Japanese if you do I will I will give

00:02:38,250 --> 00:02:46,890
you very excellent presentation in

00:02:40,980 --> 00:02:51,330
Japanese but unfortunately you don't so

00:02:46,890 --> 00:02:53,850
you have to stand okay and then in the

00:02:51,330 --> 00:02:56,010
beginning of the makii note i have i

00:02:53,850 --> 00:02:59,700
have to tell you very important things

00:02:56,010 --> 00:03:04,670
first so the brewery 18 will die soon in

00:02:59,700 --> 00:03:08,810
a few months so move to Ruby 20 now

00:03:04,670 --> 00:03:08,810
right now right now

00:03:09,310 --> 00:03:19,370
so in the past we had we made several

00:03:14,510 --> 00:03:23,150
releases since will be the first version

00:03:19,370 --> 00:03:26,390
was zero point 95 so we have the bunch

00:03:23,150 --> 00:03:30,200
of releases in the past the some some of

00:03:26,390 --> 00:03:34,659
them are good some of them very bad for

00:03:30,200 --> 00:03:40,810
example the one point eight point seven

00:03:34,659 --> 00:03:43,760
that has a real tragedy so it it

00:03:40,810 --> 00:03:47,510
provides a new method named symbol to

00:03:43,760 --> 00:03:49,760
proc and it was incompatible with their

00:03:47,510 --> 00:03:52,310
symbol to prague defined in the

00:03:49,760 --> 00:03:56,569
activerecord then that's sliding

00:03:52,310 --> 00:04:00,370
possibility cross rails so the many

00:03:56,569 --> 00:04:05,000
people in the community are boycotted

00:04:00,370 --> 00:04:08,450
the one day seven back then so there's

00:04:05,000 --> 00:04:11,480
the very unfortunate and the other

00:04:08,450 --> 00:04:17,019
example of the bad release is one and

00:04:11,480 --> 00:04:22,190
zero that we made a huge incompatibility

00:04:17,019 --> 00:04:24,500
from 18 to 19 for example we introduce

00:04:22,190 --> 00:04:26,960
the new virtual machine Nick our content

00:04:24,500 --> 00:04:31,820
job yet another river virtual machine

00:04:26,960 --> 00:04:36,620
and we also introduced the M 17m

00:04:31,820 --> 00:04:42,370
multilingual ization which is that we

00:04:36,620 --> 00:04:46,250
can handle that virtually every single

00:04:42,370 --> 00:04:48,800
character encodings on the earth so we

00:04:46,250 --> 00:04:51,440
can use unico we can use the version

00:04:48,800 --> 00:04:54,470
encoding we can use japanese and korean

00:04:51,440 --> 00:04:57,830
chinese encodings lot of other encodings

00:04:54,470 --> 00:05:03,580
without any conversion bit to to the

00:04:57,830 --> 00:05:06,909
central encoding like unicode the other

00:05:03,580 --> 00:05:10,810
languages like Java and Python use the

00:05:06,909 --> 00:05:14,870
centralized upwards so they have to

00:05:10,810 --> 00:05:19,700
convert everything into unicode then

00:05:14,870 --> 00:05:22,080
proper process text inside as in unicode

00:05:19,700 --> 00:05:26,159
text then convert back to the idea

00:05:22,080 --> 00:05:31,069
no encoding at the idea output but the

00:05:26,159 --> 00:05:35,039
DA maybe some of you may know that the

00:05:31,069 --> 00:05:37,530
character encoding conversion open up

00:05:35,039 --> 00:05:41,189
their cannon worms so it's kind of like

00:05:37,530 --> 00:05:45,240
a hell so we try to avoid that kind of

00:05:41,189 --> 00:05:50,550
conversion did I believe that that

00:05:45,240 --> 00:05:54,979
approach was very good but the still it

00:05:50,550 --> 00:05:58,259
introduced that incompatibility from 118

00:05:54,979 --> 00:06:01,650
so it took five years for the to the

00:05:58,259 --> 00:06:05,430
community to adopt the one guy and

00:06:01,650 --> 00:06:07,349
gradually to all but now realz fo does

00:06:05,430 --> 00:06:11,969
not support will be one gate so it's

00:06:07,349 --> 00:06:15,060
it's good time to move on so so recently

00:06:11,969 --> 00:06:17,819
we had released there will be 20 so this

00:06:15,060 --> 00:06:22,529
in this keynote I were going to talk

00:06:17,819 --> 00:06:25,830
about the new feature but I have to tell

00:06:22,529 --> 00:06:30,000
you that Ruby 20 was the happiest ladies

00:06:25,830 --> 00:06:32,940
ever so that no one virtually no one

00:06:30,000 --> 00:06:36,000
complained about the Ruby to all so than

00:06:32,940 --> 00:06:39,270
the every everyone that I went to the

00:06:36,000 --> 00:06:42,000
conference like like us say I i went to

00:06:39,270 --> 00:06:47,270
the was a conference held by Heroku a

00:06:42,000 --> 00:06:50,490
month ago so that the every people I

00:06:47,270 --> 00:06:51,990
told me that the Congress tration about

00:06:50,490 --> 00:06:55,110
the Ruby too old and the 20th

00:06:51,990 --> 00:06:59,879
anniversary of the language and so I

00:06:55,110 --> 00:07:02,129
feel I felt very happy so I declare to

00:06:59,879 --> 00:07:06,539
repeat 20 as the happiest ladies ever

00:07:02,129 --> 00:07:09,539
and it's faster than will be 19 and it's

00:07:06,539 --> 00:07:14,279
better than better than stable and will

00:07:09,539 --> 00:07:16,289
be 19 and that we try to make it a

00:07:14,279 --> 00:07:18,629
hundred percent compatible with 19

00:07:16,289 --> 00:07:21,330
actually it's it's kind of impossible

00:07:18,629 --> 00:07:25,949
just because you know we fix many bags

00:07:21,330 --> 00:07:29,879
from 19 so the fixing bug introduces the

00:07:25,949 --> 00:07:35,580
slight incompatibility but but we try to

00:07:29,879 --> 00:07:39,090
make it very compatible so I started

00:07:35,580 --> 00:07:42,379
developing Ruby on february2014 1993 so

00:07:39,090 --> 00:07:47,550
it was 20 years ago I start developing

00:07:42,379 --> 00:07:52,199
Ruby and it the date was the day I named

00:07:47,550 --> 00:07:54,080
it as Ruby so then in a software and the

00:07:52,199 --> 00:07:57,780
programming language is a kind of like a

00:07:54,080 --> 00:08:01,139
concept no physical entity so the name

00:07:57,780 --> 00:08:05,810
is pretty important for the entity so

00:08:01,139 --> 00:08:10,379
that I choose the day I named it as a

00:08:05,810 --> 00:08:13,620
first date of the language then so two

00:08:10,379 --> 00:08:16,770
years later that the symbol 21st 1995 I

00:08:13,620 --> 00:08:21,020
release it to the public and then to the

00:08:16,770 --> 00:08:28,259
Internet the diversion was back then was

00:08:21,020 --> 00:08:31,919
version 0.95 then December 90 nike the

00:08:28,259 --> 00:08:40,050
symbol 1996 really just watching 1.0 so

00:08:31,919 --> 00:08:44,360
August 1997 1.1 December 1998 1.2 so

00:08:40,050 --> 00:08:48,540
then we do this that are we thick

00:08:44,360 --> 00:08:50,670
introduced a new rule as a if odd number

00:08:48,540 --> 00:08:53,640
version is as a the development

00:08:50,670 --> 00:08:59,730
development version and the even number

00:08:53,640 --> 00:09:05,190
is a stable version so in August 1999

00:08:59,730 --> 00:09:09,649
winches the e 1.4 September 2020s a 2000

00:09:05,190 --> 00:09:13,170
weeks to the 11.6 so virtually we

00:09:09,649 --> 00:09:18,990
introduced versions and a Christmas

00:09:13,170 --> 00:09:23,510
vacation or summer vacation so August 23

00:09:18,990 --> 00:09:27,769
so we released it every year basically

00:09:23,510 --> 00:09:32,779
then take that the place was slows down

00:09:27,769 --> 00:09:37,740
august 2003 one wheel is 1.8 december

00:09:32,779 --> 00:09:41,160
2007 1.9 point zero august twenty 20 10

00:09:37,740 --> 00:09:44,910
one point five point two october nine 12

00:09:41,160 --> 00:09:47,810
2011 1.93 so the version number goes

00:09:44,910 --> 00:09:47,810
like this

00:09:48,190 --> 00:09:59,780
so we go up like this then we saturated

00:09:54,380 --> 00:10:04,030
some kind that you know that the the

00:09:59,780 --> 00:10:04,030
version number is very limited resource

00:10:06,760 --> 00:10:15,650
we we decide that every every now agent

00:10:12,170 --> 00:10:20,060
in the version number it should be the

00:10:15,650 --> 00:10:22,460
one digit so we had a 1.9 point 1 1

00:10:20,060 --> 00:10:25,700
point 9 42 then one point nine point

00:10:22,460 --> 00:10:30,770
nine but we are not going to have the

00:10:25,700 --> 00:10:36,340
1.9 point 10 so I'm Alterman timer so I

00:10:30,770 --> 00:10:41,590
i used the LS a lot so so we list the

00:10:36,340 --> 00:10:47,720
version numbers so one point one point

00:10:41,590 --> 00:10:52,550
1.1 1.2 1.3 but what if he just 1 point

00:10:47,720 --> 00:10:55,790
10 1 point 1 1 point 10 1.2 I don't like

00:10:52,550 --> 00:10:58,790
that so the the version that was very

00:10:55,790 --> 00:11:01,190
limited lasers so that introduced some

00:10:58,790 --> 00:11:04,520
kind of psychological barrier afforded

00:11:01,190 --> 00:11:06,770
version numbers so and the Ruby

00:11:04,520 --> 00:11:09,590
developers verse for Rudy different

00:11:06,770 --> 00:11:11,930
version was very important so the 1.9

00:11:09,590 --> 00:11:15,350
has this feature 1.9 point 2 has this

00:11:11,930 --> 00:11:17,900
feature dot that dot or that but for the

00:11:15,350 --> 00:11:20,990
quarter purpose like us so the verse

00:11:17,900 --> 00:11:23,300
number is nothing so we fix bugs every

00:11:20,990 --> 00:11:25,670
day we introduce new features every day

00:11:23,300 --> 00:11:28,550
we improve the performance every day so

00:11:25,670 --> 00:11:33,680
virtual number is nothing we have trunk

00:11:28,550 --> 00:11:35,810
we have track so so there is very big

00:11:33,680 --> 00:11:37,820
conflict between the core developers and

00:11:35,810 --> 00:11:41,240
then the Ruby users at the community as

00:11:37,820 --> 00:11:43,900
a whole so that that is one of the

00:11:41,240 --> 00:11:50,750
reasons the psyche was go over here but

00:11:43,900 --> 00:11:54,800
but somehow we overcome overcame that

00:11:50,750 --> 00:12:00,490
the cypress cove area so we lose the

00:11:54,800 --> 00:12:06,490
version 2 of the language finally

00:12:00,490 --> 00:12:10,060
30 5824 to 1913 this year so it is a

00:12:06,490 --> 00:12:14,560
ruby 20th birthday so back in Japan the

00:12:10,060 --> 00:12:17,980
20th 21st day is the data person or

00:12:14,560 --> 00:12:24,700
child become at all so Ruby is adult now

00:12:17,980 --> 00:12:35,250
so we call it we call it our anniversary

00:12:24,700 --> 00:12:38,080
driven development or a DD and the rupee

00:12:35,250 --> 00:12:40,600
rubyists Ruby people the people in the

00:12:38,080 --> 00:12:43,480
Ruby community loves events like the

00:12:40,600 --> 00:12:45,100
conferences like meetups we have a lot

00:12:43,480 --> 00:12:46,570
of conference out there that ruby

00:12:45,100 --> 00:12:49,300
conference mountain west through because

00:12:46,570 --> 00:12:51,640
long story becomes golden girl rue

00:12:49,300 --> 00:12:54,220
becomes a lot of others order in the

00:12:51,640 --> 00:12:57,970
state and it back in Japan we have the

00:12:54,220 --> 00:13:01,480
Ruby ke conference and there in Europe

00:12:57,970 --> 00:13:04,750
we have you Rocco this year we have the

00:13:01,480 --> 00:13:06,670
rock or angry I think Athens Greece so

00:13:04,750 --> 00:13:09,820
we have a lot of conference rather

00:13:06,670 --> 00:13:15,220
Olivia's role of media so we love events

00:13:09,820 --> 00:13:18,010
so that we encourage the software

00:13:15,220 --> 00:13:21,430
development driven by these kind of

00:13:18,010 --> 00:13:25,180
events event driven development so that

00:13:21,430 --> 00:13:28,480
is one of the driving force for us for

00:13:25,180 --> 00:13:29,980
the purpose to double set force that

00:13:28,480 --> 00:13:36,010
will be the language and the

00:13:29,980 --> 00:13:39,670
implementation so then the rupee as Ruby

00:13:36,010 --> 00:13:45,160
20 I'd like to seek seek the origin of

00:13:39,670 --> 00:13:47,230
the reveal to so I seek back into my

00:13:45,160 --> 00:13:50,620
document the documentation and the king

00:13:47,230 --> 00:13:55,149
of our slides and we've I finally found

00:13:50,620 --> 00:14:01,320
the earliest reference of the Ruby to

00:13:55,149 --> 00:14:01,320
and the keynote of the rubicon 2001

00:14:02,250 --> 00:14:10,140
12 years ago whoa and Tampa Florida is

00:14:07,290 --> 00:14:13,110
that the first will become the first

00:14:10,140 --> 00:14:17,910
will become the remember that in the

00:14:13,110 --> 00:14:22,230
year two thousand one was the dad that

00:14:17,910 --> 00:14:26,760
the year we had 911 and right right Ruby

00:14:22,230 --> 00:14:30,360
comes 2001 was had organized right after

00:14:26,760 --> 00:14:33,360
that that event so you remember that

00:14:30,360 --> 00:14:36,750
tampa florida we had some kind of the

00:14:33,360 --> 00:14:40,770
anthrax problem there so it was quite

00:14:36,750 --> 00:14:44,550
amazing so everyone in my family member

00:14:40,770 --> 00:14:47,640
was worried about it the good way when i

00:14:44,550 --> 00:14:50,010
told them i am going to the fraud so the

00:14:47,640 --> 00:14:54,090
they'll take care of the answer like or

00:14:50,010 --> 00:14:56,700
something like that anyway so the in the

00:14:54,090 --> 00:15:00,090
keynote of the rubicon 2001 i mentioned

00:14:56,700 --> 00:15:03,060
about the ruby to which he has the new

00:15:00,090 --> 00:15:04,860
which should introduce a new virtual

00:15:03,060 --> 00:15:08,540
machine you gotthis cotton and then

00:15:04,860 --> 00:15:12,450
dodge should interest native plants so i

00:15:08,540 --> 00:15:15,330
tried i wanted new vm for performance

00:15:12,450 --> 00:15:21,270
and if that you vm was implemented by

00:15:15,330 --> 00:15:23,240
ruby 1.9 so I we try to improve that

00:15:21,270 --> 00:15:25,860
garbage collection for performance and

00:15:23,240 --> 00:15:28,500
in the generation of garbage practice so

00:15:25,860 --> 00:15:31,290
that that pride self was a council just

00:15:28,500 --> 00:15:33,870
because you know the the the object

00:15:31,290 --> 00:15:37,140
allocation scheme strategy was changed

00:15:33,870 --> 00:15:41,940
in Ruby one but back then we had a will

00:15:37,140 --> 00:15:44,250
be 11.6 then the object allocation

00:15:41,940 --> 00:15:47,880
strategy was changed so the general

00:15:44,250 --> 00:15:50,070
Chicago sir has less effective so that

00:15:47,880 --> 00:15:51,960
that closet itself was counseled but

00:15:50,070 --> 00:15:54,750
will be 19 improved the garbage

00:15:51,960 --> 00:15:59,400
collector then it is just a lazy

00:15:54,750 --> 00:16:01,260
sleeping which are sold in da da but a

00:15:59,400 --> 00:16:03,660
pastime from the garbage collector and

00:16:01,260 --> 00:16:06,660
there will be 20 inches out get map

00:16:03,660 --> 00:16:10,410
marking which is the copying right

00:16:06,660 --> 00:16:12,660
friendly and we are working on the

00:16:10,410 --> 00:16:15,150
partial partial a generational garbage

00:16:12,660 --> 00:16:15,769
collector or four will be 21 we are not

00:16:15,150 --> 00:16:18,939
one now

00:16:15,769 --> 00:16:23,119
walking home and a net for native stress

00:16:18,939 --> 00:16:26,839
so Ruby 19 uses native sleds with a

00:16:23,119 --> 00:16:28,879
global interpreter lock global

00:16:26,839 --> 00:16:33,290
interpreter lock everyone has global

00:16:28,879 --> 00:16:35,929
interpreter lock but it's without that

00:16:33,290 --> 00:16:39,049
we have to put the fine-grained look

00:16:35,929 --> 00:16:42,920
everywhere so lock a lock lock and lock

00:16:39,049 --> 00:16:45,649
lock unlock so it slows down the

00:16:42,920 --> 00:16:49,819
interpreter a lot so no one wants slow

00:16:45,649 --> 00:16:55,249
Ruby one Ruben 19 we to all so it's kind

00:16:49,819 --> 00:16:57,939
of the compromise so to to remove the

00:16:55,249 --> 00:17:01,129
global interpreter lock without

00:16:57,939 --> 00:17:03,410
hindering performance so we have to we

00:17:01,129 --> 00:17:05,870
implement the every data structure in

00:17:03,410 --> 00:17:09,230
this interpreter as a lock free or

00:17:05,870 --> 00:17:12,829
something so that is a huge effort

00:17:09,230 --> 00:17:15,470
though our resource is very limited so

00:17:12,829 --> 00:17:18,709
it's kind of compromise anyway the Rue

00:17:15,470 --> 00:17:23,329
between 2001 is almost accomplished by

00:17:18,709 --> 00:17:29,799
what we 19 so the the origin of the Ruby

00:17:23,329 --> 00:17:34,340
20 today is something appears later with

00:17:29,799 --> 00:17:38,809
which which I seeked I found in the

00:17:34,340 --> 00:17:42,889
keynote of the Rubicon 2003 10 years ago

00:17:38,809 --> 00:17:47,539
whoa the in the keynote up in the

00:17:42,889 --> 00:17:49,610
Rubicon 2003 we I I proposed a new house

00:17:47,539 --> 00:17:51,820
literals keyword argument method

00:17:49,610 --> 00:17:56,630
combination and swept the namespace and

00:17:51,820 --> 00:18:02,539
then new harsh material is the that the

00:17:56,630 --> 00:18:08,179
hash that which whose key is the symbols

00:18:02,539 --> 00:18:11,419
can be written as that the below ones so

00:18:08,179 --> 00:18:15,860
new hospitals are introduced in 19 and

00:18:11,419 --> 00:18:18,770
their the other ones like a method

00:18:15,860 --> 00:18:21,470
combination which allows a method

00:18:18,770 --> 00:18:23,539
declaration afterwards and the selector

00:18:21,470 --> 00:18:27,909
namespace is kind of like a scope monkey

00:18:23,539 --> 00:18:27,909
patching with these are

00:18:28,350 --> 00:18:35,950
implemented in some shape in 320 so let

00:18:33,610 --> 00:18:38,920
me introduce about the detail of the new

00:18:35,950 --> 00:18:41,020
features in will be too old so Ruby new

00:18:38,920 --> 00:18:43,510
features in Ruby 20 has a new key our

00:18:41,020 --> 00:18:46,480
keyword arguments a module prepend in a

00:18:43,510 --> 00:18:49,720
number of all lazy and refinements and

00:18:46,480 --> 00:18:51,580
the symbol re literals and the 2h

00:18:49,720 --> 00:18:54,670
conversion method you get paid by

00:18:51,580 --> 00:18:58,330
default dtrace and tris point for to

00:18:54,670 --> 00:19:01,210
name a few so let me introduce first

00:18:58,330 --> 00:19:03,700
about about the keyword arguments so Q

00:19:01,210 --> 00:19:05,920
arguments is the name optional argument

00:19:03,700 --> 00:19:08,650
no specific ordered and descriptive and

00:19:05,920 --> 00:19:12,850
easy to remember so this this is kind of

00:19:08,650 --> 00:19:18,880
like a the new hash materials put in the

00:19:12,850 --> 00:19:23,880
DN end of the augment list like this so

00:19:18,880 --> 00:19:27,070
the calling log log method with the

00:19:23,880 --> 00:19:30,640
argument and the level are the named

00:19:27,070 --> 00:19:37,540
argument it is possible in Ruby 19 which

00:19:30,640 --> 00:19:41,140
is which has the new hash literal but to

00:19:37,540 --> 00:19:47,370
use the keyword arguments is 19 you have

00:19:41,140 --> 00:19:52,930
to decompose the heart by yourself but

00:19:47,370 --> 00:19:54,970
this is this is had a TD and a son some

00:19:52,930 --> 00:19:58,570
part of the rails use that kind of that

00:19:54,970 --> 00:20:00,910
keyword arguments already but what what

00:19:58,570 --> 00:20:03,160
if the you want to combine with the

00:20:00,910 --> 00:20:05,650
arbitrary number of arguments with the

00:20:03,160 --> 00:20:09,160
descriptive descriptive exceptions or

00:20:05,650 --> 00:20:12,490
the pass near the val value so the

00:20:09,160 --> 00:20:19,030
keyword arguments in will be 19 go like

00:20:12,490 --> 00:20:21,820
if if you want that kind of a deep what

00:20:19,030 --> 00:20:24,370
will define the keyword arguments you

00:20:21,820 --> 00:20:30,760
have to write it out this is teeny like

00:20:24,370 --> 00:20:34,270
a goes like retrieve the last last

00:20:30,760 --> 00:20:39,070
argument as in as a hash or their

00:20:34,270 --> 00:20:40,870
arguments then check the existence of

00:20:39,070 --> 00:20:43,900
the keyword arguments and

00:20:40,870 --> 00:20:47,500
with all with the default values and

00:20:43,900 --> 00:20:52,800
then the other ones so the Rays

00:20:47,500 --> 00:20:56,170
exceptions work when you don't have that

00:20:52,800 --> 00:20:59,500
you have you have that the unknown

00:20:56,170 --> 00:21:03,880
keyword is given then go like this this

00:20:59,500 --> 00:21:08,950
is quite complex but in will be 20 we

00:21:03,880 --> 00:21:13,840
try to simplify things so the this same

00:21:08,950 --> 00:21:16,720
things is collected just put the keyword

00:21:13,840 --> 00:21:19,540
arguments here then you don't have to

00:21:16,720 --> 00:21:22,570
worry about the dog raising errors and

00:21:19,540 --> 00:21:27,309
the default values or anything then good

00:21:22,570 --> 00:21:31,840
the comparing this and that very simple

00:21:27,309 --> 00:21:34,420
as ended so the keyword arguments in

00:21:31,840 --> 00:21:38,400
route 20 is simpler and more descriptive

00:21:34,420 --> 00:21:42,400
API is it to read isn't wise so the

00:21:38,400 --> 00:21:45,700
things is very ah less complicated and

00:21:42,400 --> 00:21:48,640
then you can pass the existing out I'm

00:21:45,700 --> 00:21:50,890
sorry you can pass the existing hashes I

00:21:48,640 --> 00:21:57,400
the keyword arguments like a double

00:21:50,890 --> 00:22:00,700
double star and then you can accept here

00:21:57,400 --> 00:22:05,890
it is stop are arbitrary keyword

00:22:00,700 --> 00:22:12,160
arguments as a hash so if if we use

00:22:05,890 --> 00:22:14,800
specify this kinda a hash of the default

00:22:12,160 --> 00:22:18,370
hash so I don't even do not waste any

00:22:14,800 --> 00:22:23,980
errors without this one that unknown

00:22:18,370 --> 00:22:25,870
keyword with zero so is the API the more

00:22:23,980 --> 00:22:29,440
descriptive and the real speed of proof

00:22:25,870 --> 00:22:32,410
Akira likeness so risks are theirs for

00:22:29,440 --> 00:22:38,110
use the keyword arguments if you run it

00:22:32,410 --> 00:22:43,000
by will be 20 this is keyword Ravens so

00:22:38,110 --> 00:22:45,160
then go next module prepend multiple

00:22:43,000 --> 00:22:48,820
pendse that in a form the method

00:22:45,160 --> 00:22:51,340
combination it's decorating existing

00:22:48,820 --> 00:22:53,380
methods it's kind of like an alias

00:22:51,340 --> 00:22:55,270
method change by the decorating system

00:22:53,380 --> 00:22:58,190
messin with you

00:22:55,270 --> 00:23:01,400
which is the area's metal chain used

00:22:58,190 --> 00:23:03,860
that exists missions using Elias it's

00:23:01,400 --> 00:23:07,580
defined adaptive support a less tense

00:23:03,860 --> 00:23:14,559
exchange goes like this class a defines

00:23:07,580 --> 00:23:18,320
the food methods so then you define the

00:23:14,559 --> 00:23:23,440
decoration method with ba dang arrows

00:23:18,320 --> 00:23:27,770
metal chain football then you call food

00:23:23,440 --> 00:23:31,760
then the 80s message chain calls the

00:23:27,770 --> 00:23:34,190
av's power then rename the original fool

00:23:31,760 --> 00:23:39,380
as the ate food with the bar then go

00:23:34,190 --> 00:23:41,570
like this then go like this so the

00:23:39,380 --> 00:23:44,390
definition of the method metal change is

00:23:41,570 --> 00:23:47,510
pretty simple using meta meta

00:23:44,390 --> 00:23:52,730
programming like Al do our renamed

00:23:47,510 --> 00:23:58,179
original method as a original method

00:23:52,730 --> 00:24:02,929
without our features then rename the

00:23:58,179 --> 00:24:05,330
method with faithful feature in the way

00:24:02,929 --> 00:24:10,370
she met the replaced original method so

00:24:05,330 --> 00:24:14,720
that was well which way then the food is

00:24:10,370 --> 00:24:18,140
bar is defined as full then the original

00:24:14,720 --> 00:24:20,870
foo is full with a bar then calling food

00:24:18,140 --> 00:24:23,929
called foo with bar their food without

00:24:20,870 --> 00:24:28,280
bar cause original food then go back to

00:24:23,929 --> 00:24:31,460
the dang you can decorate the original

00:24:28,280 --> 00:24:36,530
method with the new new method do you

00:24:31,460 --> 00:24:38,840
understand this is pretty complicated so

00:24:36,530 --> 00:24:40,790
the ls message chain has some kind of

00:24:38,840 --> 00:24:44,510
that their defect and the problem so

00:24:40,790 --> 00:24:47,150
many public methods is spelled out like

00:24:44,510 --> 00:24:50,600
our the width with something or without

00:24:47,150 --> 00:24:53,720
something so an extent of each name

00:24:50,600 --> 00:24:57,440
conflict so adding some feature set of

00:24:53,720 --> 00:25:01,030
class same to adding same feature set

00:24:57,440 --> 00:25:04,750
across so

00:25:01,030 --> 00:25:10,470
though if you can you have some set of

00:25:04,750 --> 00:25:15,300
the class then you have to call every

00:25:10,470 --> 00:25:20,800
many LS metal chain for the kinda dull

00:25:15,300 --> 00:25:23,710
set of methods so the we investigated

00:25:20,800 --> 00:25:25,870
the method combination which is provided

00:25:23,710 --> 00:25:30,580
by the Common Lisp object system to

00:25:25,870 --> 00:25:32,470
accept existing method so the the method

00:25:30,580 --> 00:25:34,780
combination in common list it can be

00:25:32,470 --> 00:25:37,780
configuring the mid object from them and

00:25:34,780 --> 00:25:40,360
then standard combination in common lisp

00:25:37,780 --> 00:25:42,670
object system has a default book which

00:25:40,360 --> 00:25:45,400
is invoked by the original method after

00:25:42,670 --> 00:25:47,980
food which is involved after them of

00:25:45,400 --> 00:25:53,770
nu-metal the under around folk which is

00:25:47,980 --> 00:25:56,170
wrap the original method but and since

00:25:53,770 --> 00:25:59,230
it is configured via method metal object

00:25:56,170 --> 00:26:03,270
protocol so you can provide some kinda

00:25:59,230 --> 00:26:08,920
and the combination which is the Tri

00:26:03,270 --> 00:26:12,310
many variation of the methods and either

00:26:08,920 --> 00:26:15,550
of them that all of them if all of them

00:26:12,310 --> 00:26:19,630
succeeded the method message execution

00:26:15,550 --> 00:26:23,230
has done or any of them failed the

00:26:19,630 --> 00:26:25,450
execution of the method is failed the

00:26:23,230 --> 00:26:27,520
oil composition is a just rivers of them

00:26:25,450 --> 00:26:30,780
on the Commission order you can define

00:26:27,520 --> 00:26:34,390
whatever combination in common lisp but

00:26:30,780 --> 00:26:38,100
I think it's too complex for movie so

00:26:34,390 --> 00:26:40,390
are we I introduce more simple

00:26:38,100 --> 00:26:43,930
simplified method combination which is

00:26:40,390 --> 00:26:46,690
method module prepared module prepend is

00:26:43,930 --> 00:26:50,080
that module added by include comes after

00:26:46,690 --> 00:26:52,690
existing methods but multiple measures

00:26:50,080 --> 00:26:55,990
added by the module prepend comes before

00:26:52,690 --> 00:26:59,620
the existing method to rottnest a wrap

00:26:55,990 --> 00:27:05,640
original method so using module prepend

00:26:59,620 --> 00:27:12,550
you can do that the original food then

00:27:05,640 --> 00:27:14,500
rub you can rub the existing method in

00:27:12,550 --> 00:27:18,970
the map in a mall

00:27:14,500 --> 00:27:24,130
then you can prepare the the module so

00:27:18,970 --> 00:27:29,620
the method defined in there the food

00:27:24,130 --> 00:27:32,580
class comes after the prepended method

00:27:29,620 --> 00:27:37,300
so you can rub the existing method

00:27:32,580 --> 00:27:41,470
without using any areas metal chain so

00:27:37,300 --> 00:27:44,200
the use by using module prepend you can

00:27:41,470 --> 00:27:46,540
extend the existing methods so you don't

00:27:44,200 --> 00:27:49,000
have to worry about done what method

00:27:46,540 --> 00:27:52,210
name conflict and you can package the

00:27:49,000 --> 00:27:55,780
set of that are decoration in a module

00:27:52,210 --> 00:28:03,910
like that the music repent repent repent

00:27:55,780 --> 00:28:05,650
module so that's that's much simpler

00:28:03,910 --> 00:28:08,950
than they leave me to change what a

00:28:05,650 --> 00:28:12,160
message combination accommodated so

00:28:08,950 --> 00:28:14,980
refinements ah refinements is the kind

00:28:12,160 --> 00:28:18,880
of scope monkey patching and a monkey

00:28:14,980 --> 00:28:20,980
patching is it is pretty popular in will

00:28:18,880 --> 00:28:23,020
be especially in the active support so

00:28:20,980 --> 00:28:24,700
revolving existing class and module are

00:28:23,020 --> 00:28:26,410
the message replacing message that

00:28:24,700 --> 00:28:31,810
remove the nestles you can do whatever

00:28:26,410 --> 00:28:35,830
you want but the it is it is effective

00:28:31,810 --> 00:28:42,120
globally so you replace the existing

00:28:35,830 --> 00:28:42,120
method so you will you will have

00:28:42,210 --> 00:28:50,530
unexpected result sometimes but the

00:28:46,630 --> 00:28:53,200
example is active support so using our

00:28:50,530 --> 00:28:59,620
can support you can call that 20 years

00:28:53,200 --> 00:29:02,830
ago and the the other example is a math

00:28:59,620 --> 00:29:05,740
n which is the widgets bubble in the

00:29:02,830 --> 00:29:08,980
standard distribution so you when you

00:29:05,740 --> 00:29:17,260
called require the library named matt n

00:29:08,980 --> 00:29:21,940
you can the this has the very effective

00:29:17,260 --> 00:29:24,070
ok where the 1/2 becomes zero in mean

00:29:21,940 --> 00:29:26,890
standard movie just because it's into

00:29:24,070 --> 00:29:28,160
the division but you by requiring

00:29:26,890 --> 00:29:31,750
mountain

00:29:28,160 --> 00:29:38,060
library the that it replaces the

00:29:31,750 --> 00:29:42,140
division method division so 1/2 became

00:29:38,060 --> 00:29:47,150
the 1/2 it's a rational and irrational

00:29:42,140 --> 00:29:50,950
number so this is quite impressive so

00:29:47,150 --> 00:29:56,690
very teeny likely can we place the very

00:29:50,950 --> 00:30:01,100
fundamental integer division but it

00:29:56,690 --> 00:30:03,950
replaces that every individual so you

00:30:01,100 --> 00:30:06,230
the the other part of the library other

00:30:03,950 --> 00:30:12,700
part of the your software might require

00:30:06,230 --> 00:30:16,160
integer division 1 by 1/2 equals 0 so

00:30:12,700 --> 00:30:18,920
what what would happen the crash error I

00:30:16,160 --> 00:30:22,840
expect to result that's not good that's

00:30:18,920 --> 00:30:26,860
not good got the global global

00:30:22,840 --> 00:30:33,040
modification is basically a bad things

00:30:26,860 --> 00:30:36,500
so the open class is so strong so it

00:30:33,040 --> 00:30:39,650
that could happen that name your name

00:30:36,500 --> 00:30:42,560
conflict or behavior conflict so the

00:30:39,650 --> 00:30:46,730
global medication is bad so there are

00:30:42,560 --> 00:30:50,980
scoped a you can't you want to scope

00:30:46,730 --> 00:30:54,260
your modification in certain aspect so

00:30:50,980 --> 00:31:00,620
refinements is that kind of does the

00:30:54,260 --> 00:31:04,580
scope so oops you define a module and

00:31:00,620 --> 00:31:07,190
you in module you you can refine the

00:31:04,580 --> 00:31:09,770
existing class and you can add add

00:31:07,190 --> 00:31:14,120
method you can replace method well

00:31:09,770 --> 00:31:18,800
whatever you want then so that

00:31:14,120 --> 00:31:24,770
refinement will not effective outside of

00:31:18,800 --> 00:31:28,910
that refinement scope but when you call

00:31:24,770 --> 00:31:33,790
using refinement module so you can

00:31:28,910 --> 00:31:38,690
refine you can call the refine method so

00:31:33,790 --> 00:31:41,270
the the default is nor no refinement at

00:31:38,690 --> 00:31:44,840
all so you don't have to worry

00:31:41,270 --> 00:31:48,500
mount the scope or the global

00:31:44,840 --> 00:31:52,550
modification the there are some other

00:31:48,500 --> 00:31:54,470
language like us the language could name

00:31:52,550 --> 00:31:57,380
the small script which is a dialect of

00:31:54,470 --> 00:32:01,220
the small talk which is the feature name

00:31:57,380 --> 00:32:03,440
the selector namespace and we have that

00:32:01,220 --> 00:32:06,020
the feature name the class box for the

00:32:03,440 --> 00:32:08,600
language like smart out in Java and if

00:32:06,020 --> 00:32:11,750
you can extend messes and for the

00:32:08,600 --> 00:32:15,020
luggage likes cheese C sharp and a

00:32:11,750 --> 00:32:18,560
certain namespace about no one knows

00:32:15,020 --> 00:32:21,380
small script do you know that so then

00:32:18,560 --> 00:32:24,170
I'm not sure as motor still alive and

00:32:21,380 --> 00:32:27,170
the feature of the small script is very

00:32:24,170 --> 00:32:30,260
complex so I just gave up the adapter so

00:32:27,170 --> 00:32:33,260
names sector namespace in Ruby and the

00:32:30,260 --> 00:32:35,810
class box is a sculptor class medication

00:32:33,260 --> 00:32:38,510
but it is that very interesting feature

00:32:35,810 --> 00:32:42,590
named the local rebinding the local

00:32:38,510 --> 00:32:45,310
rebinding means that you you will the

00:32:42,590 --> 00:32:49,610
modification in that class box is

00:32:45,310 --> 00:32:56,000
effective in the method you can call

00:32:49,610 --> 00:32:59,330
from that that scope you know that that

00:32:56,000 --> 00:33:03,950
means that you refine work for example

00:32:59,330 --> 00:33:08,270
that you refine the shape of the gooey

00:33:03,950 --> 00:33:12,350
butter in that the specific scope so you

00:33:08,270 --> 00:33:17,690
call to create color method to create a

00:33:12,350 --> 00:33:21,470
dialogue so the the method to write the

00:33:17,690 --> 00:33:27,140
button shape is replaced so the shape

00:33:21,470 --> 00:33:29,720
node is the dialog button is changed but

00:33:27,140 --> 00:33:33,740
it also the local event is very strong

00:33:29,720 --> 00:33:36,230
but at the same time the you may have

00:33:33,740 --> 00:33:39,410
that kind of the behavior conflict in

00:33:36,230 --> 00:33:44,930
the method called from your method you I

00:33:39,410 --> 00:33:47,030
think you you you have food you don't

00:33:44,930 --> 00:33:50,660
have full control of the message called

00:33:47,030 --> 00:33:53,870
from the method called by your scope the

00:33:50,660 --> 00:33:54,830
method called by a US Court then the

00:33:53,870 --> 00:33:57,860
method called from

00:33:54,830 --> 00:34:02,149
got that method darkness or tendon so

00:33:57,860 --> 00:34:04,100
it's it's too thin too strong it's kind

00:34:02,149 --> 00:34:07,700
of like a dynamic scope in the lisp

00:34:04,100 --> 00:34:09,740
language so I just just gave up that the

00:34:07,700 --> 00:34:12,679
more more simplified sculpted

00:34:09,740 --> 00:34:15,349
multipathing and the extended method in

00:34:12,679 --> 00:34:20,839
c-sharp can only add meses no replacing

00:34:15,349 --> 00:34:22,550
so which is not what we want so the

00:34:20,839 --> 00:34:27,349
refinement is scoped monkey patching

00:34:22,550 --> 00:34:30,710
either then unfortunately right before

00:34:27,349 --> 00:34:36,830
the release of the Ruby 20 the very deep

00:34:30,710 --> 00:34:41,270
deep and heated discussion has held for

00:34:36,830 --> 00:34:45,050
the refinements so that the route we

00:34:41,270 --> 00:34:46,849
have had to mark the the refinement if

00:34:45,050 --> 00:34:50,740
which is very interesting and useful

00:34:46,849 --> 00:34:53,659
feature but but we had to market as an

00:34:50,740 --> 00:34:55,399
experimental so that the other

00:34:53,659 --> 00:34:59,349
implementation the Ruby language like

00:34:55,399 --> 00:35:02,589
Jay will be Ruby Nia's will not provide

00:34:59,349 --> 00:35:08,210
refinements in the foreseeable future

00:35:02,589 --> 00:35:11,630
I'm that that's unfortunate anyway then

00:35:08,210 --> 00:35:16,040
next animal were lazy I never lazy is

00:35:11,630 --> 00:35:19,430
kind of like a deal in evaluation that

00:35:16,040 --> 00:35:22,099
that we see in some kind of functional

00:35:19,430 --> 00:35:23,810
programming language it's inspired by

00:35:22,099 --> 00:35:28,220
the functional programming language and

00:35:23,810 --> 00:35:38,839
that we for functional programming wanna

00:35:28,220 --> 00:35:40,460
be we have the anyway as a functional

00:35:38,839 --> 00:35:42,830
programming wanna be we often use

00:35:40,460 --> 00:35:45,970
immutable data the pattern matching lazy

00:35:42,830 --> 00:35:52,220
evaluation the function position and

00:35:45,970 --> 00:35:55,940
what the function come the in a new mule

00:35:52,220 --> 00:35:59,750
immutable immutable data is as kind of a

00:35:55,940 --> 00:36:02,599
cup you know you can you can modify

00:35:59,750 --> 00:36:04,910
every data a data structure in Ruby you

00:36:02,599 --> 00:36:06,860
can replace I modify string you can

00:36:04,910 --> 00:36:11,180
modify the re you can

00:36:06,860 --> 00:36:13,210
by any object but you you can you can

00:36:11,180 --> 00:36:19,760
freeze them and then you you don't you

00:36:13,210 --> 00:36:24,080
you do avoid a modifying object as a

00:36:19,760 --> 00:36:25,700
rule so then then then the functional

00:36:24,080 --> 00:36:30,380
composition is kind of like a method

00:36:25,700 --> 00:36:32,300
combination in Ruby so that we as a

00:36:30,380 --> 00:36:35,020
functional programming wanna be we often

00:36:32,300 --> 00:36:39,860
use the method change like once we

00:36:35,020 --> 00:36:45,380
infinity converted them to the dust

00:36:39,860 --> 00:36:48,140
rings then it has a digit this is 3 so

00:36:45,380 --> 00:36:52,370
we have we want to have the first five

00:36:48,140 --> 00:36:57,500
appearance of that from the stream so

00:36:52,370 --> 00:37:04,790
but if you try this one it doesn't work

00:36:57,500 --> 00:37:07,910
you know that so the map here is very

00:37:04,790 --> 00:37:12,530
lazy as I I mean the very eager unlike

00:37:07,910 --> 00:37:16,580
me so it created the infinite number of

00:37:12,530 --> 00:37:19,520
strings as an re and it gradually

00:37:16,580 --> 00:37:25,910
consume all the memory in the computer

00:37:19,520 --> 00:37:33,350
so it's crushed so but if we have lazy

00:37:25,910 --> 00:37:37,400
evaluation the we we only have need to

00:37:33,350 --> 00:37:44,390
need five appearance so if we are lazy

00:37:37,400 --> 00:37:46,940
we have the are we have lazily convert

00:37:44,390 --> 00:37:52,550
the number two strings we are lazy

00:37:46,940 --> 00:37:54,980
select these strings from three then we

00:37:52,550 --> 00:38:03,110
have first five appearance of that kind

00:37:54,980 --> 00:38:05,450
ah five that numbers so we just stop so

00:38:03,110 --> 00:38:09,920
what do you have lazy version Minerva of

00:38:05,450 --> 00:38:12,440
NASA so the the first proposal was a the

00:38:09,920 --> 00:38:16,160
map ladies work lazy so that these

00:38:12,440 --> 00:38:20,770
methods with the LZ the shorter hand of

00:38:16,160 --> 00:38:25,010
the lazy just because we are lazy

00:38:20,770 --> 00:38:29,300
so that goes like this so mop lazily

00:38:25,010 --> 00:38:31,610
then select lately then fast 50 get the

00:38:29,300 --> 00:38:35,870
first five appearance of that seat love

00:38:31,610 --> 00:38:40,700
stream but the lazy people need lazy

00:38:35,870 --> 00:38:44,900
evaluation but we are too lazy to other

00:38:40,700 --> 00:38:47,510
the LZ prefix all the time so maybe

00:38:44,900 --> 00:38:54,410
maybe we forget to put lazy here or

00:38:47,510 --> 00:39:00,790
lousy here so the the other one is that

00:38:54,410 --> 00:39:06,350
put lazy here the form now on the every

00:39:00,790 --> 00:39:15,050
innumerable methods will go go lazy so

00:39:06,350 --> 00:39:21,230
it looks better so oh it looks better so

00:39:15,050 --> 00:39:24,350
the from ritual you way if you put lazy

00:39:21,230 --> 00:39:29,720
here to there any and a number of event

00:39:24,350 --> 00:39:32,960
object so that the the stream exists

00:39:29,720 --> 00:39:38,840
execution will be late either evaluated

00:39:32,960 --> 00:39:41,060
lately so and now we are we going to

00:39:38,840 --> 00:39:43,250
have the symbol or a little zing movie

00:39:41,060 --> 00:39:46,370
two-goal goes like this is a array of

00:39:43,250 --> 00:39:48,770
the symbol foo bar baz so and then we

00:39:46,370 --> 00:39:55,010
have to H conversion method like a hash

00:39:48,770 --> 00:39:58,010
and shrug of the 2h so the you you can

00:39:55,010 --> 00:40:00,740
have the after-game think we had their

00:39:58,010 --> 00:40:05,270
conversion method to I and to into is

00:40:00,740 --> 00:40:07,970
then to throw to asian to hush we have

00:40:05,270 --> 00:40:12,320
the disc news set pair of their methods

00:40:07,970 --> 00:40:17,930
so too i convert object into integer and

00:40:12,320 --> 00:40:22,790
to end at implicitly convert object into

00:40:17,930 --> 00:40:26,780
an integer so to a dentist Roy same and

00:40:22,790 --> 00:40:31,420
to agent to house the same hey there

00:40:26,780 --> 00:40:33,380
next utf-8 by default so the when I

00:40:31,420 --> 00:40:39,280
design the multilingual

00:40:33,380 --> 00:40:43,460
ization 419 the unique code is not yet

00:40:39,280 --> 00:40:46,040
was not yet yet a champion of the doctor

00:40:43,460 --> 00:40:50,150
Kang coding but more than five years

00:40:46,040 --> 00:40:53,000
later now so almost everyone use unicode

00:40:50,150 --> 00:40:59,980
so the almost every website using

00:40:53,000 --> 00:41:02,570
Unicode almost utf-8 so the we make a

00:40:59,980 --> 00:41:07,430
Unicode especially utf-8 as a champion

00:41:02,570 --> 00:41:09,940
of that ah the character encoding so you

00:41:07,430 --> 00:41:13,730
don't have to put the magic encoding to

00:41:09,940 --> 00:41:19,460
mention this file is written in utf-8

00:41:13,730 --> 00:41:21,740
and we see unicode every window and the

00:41:19,460 --> 00:41:26,540
US and tres pointed at the bits better

00:41:21,740 --> 00:41:29,630
at DP back at the profile support so you

00:41:26,540 --> 00:41:32,420
can write a debug a better debugger or a

00:41:29,630 --> 00:41:38,090
better profile using this tea trays and

00:41:32,420 --> 00:41:42,380
trays point so and we try to improve

00:41:38,090 --> 00:41:44,870
improve the performance and then we we

00:41:42,380 --> 00:41:47,690
have the virtual machine we improve the

00:41:44,870 --> 00:41:52,990
garbage collector and we improve the

00:41:47,690 --> 00:41:55,580
required so that we you know and

00:41:52,990 --> 00:41:59,870
programming like a rails application has

00:41:55,580 --> 00:42:03,680
that tons of that rubygems required so

00:41:59,870 --> 00:42:07,430
that the requiring you pass is so long

00:42:03,680 --> 00:42:11,420
so you have to look into the huge set of

00:42:07,430 --> 00:42:16,120
that the loading path so we try to

00:42:11,420 --> 00:42:19,250
improve that kinda require step so that

00:42:16,120 --> 00:42:24,770
the invocation time of the rails

00:42:19,250 --> 00:42:27,500
application yeah come improved a lot so

00:42:24,770 --> 00:42:31,610
Ruby 20 is kind of like up and up the

00:42:27,500 --> 00:42:34,670
working under the community and you so

00:42:31,610 --> 00:42:38,120
you don't you don't have to worry about

00:42:34,670 --> 00:42:40,850
the internal so we improve the language

00:42:38,120 --> 00:42:43,690
and its implementation so that you can

00:42:40,850 --> 00:42:47,440
have the faster better

00:42:43,690 --> 00:42:51,760
angling for your vocation so I have no

00:42:47,440 --> 00:42:54,460
idea but the beyond would be too old but

00:42:51,760 --> 00:42:59,680
we made it would be 21 Blanche he

00:42:54,460 --> 00:43:02,109
already so there I hope the would be 21

00:42:59,680 --> 00:43:04,900
will coming next Christmas I mean I mean

00:43:02,109 --> 00:43:08,589
this Christmas this year and we will see

00:43:04,900 --> 00:43:11,730
more frequent releases the 1.9 point 3

00:43:08,589 --> 00:43:16,470
has the past level 300 something awesome

00:43:11,730 --> 00:43:22,240
we had we had a lot of pacha levels and

00:43:16,470 --> 00:43:25,510
with the 3 23 years of the lifetime of

00:43:22,240 --> 00:43:27,700
that the single release so we I think we

00:43:25,510 --> 00:43:30,300
will have more frequently disease

00:43:27,700 --> 00:43:34,780
probably once a year for the will be

00:43:30,300 --> 00:43:38,380
12.1 this year will be 2.2 next year or

00:43:34,780 --> 00:43:40,089
something like that and then I tried we

00:43:38,380 --> 00:43:42,579
are walking on the less strict unicode

00:43:40,089 --> 00:43:44,589
validation or even better performance

00:43:42,579 --> 00:43:47,680
and then you're working on a partial

00:43:44,589 --> 00:43:53,640
generational garbage collector so that's

00:43:47,680 --> 00:43:57,310
what we have right now so the Ruby 20 is

00:43:53,640 --> 00:44:01,119
the happiest really is ever so da the

00:43:57,310 --> 00:44:05,890
better the best in from our release ever

00:44:01,119 --> 00:44:09,030
so please switch to Ruby to all ah very

00:44:05,890 --> 00:44:09,030

YouTube URL: https://www.youtube.com/watch?v=zQvmgN-0imY


