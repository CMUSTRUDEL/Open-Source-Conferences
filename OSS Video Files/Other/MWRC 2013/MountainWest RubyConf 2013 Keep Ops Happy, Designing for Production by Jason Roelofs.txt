Title: MountainWest RubyConf 2013 Keep Ops Happy, Designing for Production by Jason Roelofs
Publication date: 2020-01-28
Playlist: MWRC 2013
Description: 
	Building applications in Ruby is fast and fun. Features fly, progress is quick and everyone's happy, until you have to deploy. While services like Heroku make deployment easier than it ever has been before, there's only so much they can do for you, and no-one is happy when customers can't use your application!
This talk will go over steps developers can take to protect against common production errors as well as more advanced techniques to keep your application running smoothly over the long term.

Help us caption & translate this video!

http://amara.org/v/FGcW/
Captions: 
	00:00:19,699 --> 00:00:25,259
hey as Mike said I'm Jason Roloffs I

00:00:22,769 --> 00:00:27,090
work for collective idea a small

00:00:25,259 --> 00:00:29,519
contracting company over in West

00:00:27,090 --> 00:00:33,390
Michigan and I'm kind of one other two

00:00:29,519 --> 00:00:35,190
DevOps people I've been professionally

00:00:33,390 --> 00:00:36,720
developing for seven years and have

00:00:35,190 --> 00:00:38,519
ended up in an Operations role of some

00:00:36,720 --> 00:00:39,829
sort for that entire time so a lot of

00:00:38,519 --> 00:00:42,329
what I'm going to talk about here is

00:00:39,829 --> 00:00:44,040
stuff that I've run into that done

00:00:42,329 --> 00:00:47,510
myself that I've learned from and

00:00:44,040 --> 00:00:50,370
basically so this talk is about

00:00:47,510 --> 00:00:52,140
development practices and patterns and

00:00:50,370 --> 00:00:54,869
techniques that you can do add to your

00:00:52,140 --> 00:00:56,280
code to make it easier for operations to

00:00:54,869 --> 00:00:59,189
manage and handle running your

00:00:56,280 --> 00:01:00,809
application on the Internet has been

00:00:59,189 --> 00:01:04,140
sent in a couple of tight and the talks

00:01:00,809 --> 00:01:05,850
before me ops has a hard time enough as

00:01:04,140 --> 00:01:07,439
it is the internet is actually a very

00:01:05,850 --> 00:01:10,220
dangerous place there are constantly

00:01:07,439 --> 00:01:15,119
scripts running to try to exploit common

00:01:10,220 --> 00:01:17,250
vulnerabilities and as an ops as the op

00:01:15,119 --> 00:01:18,840
side of me I'm happy when I can trust

00:01:17,250 --> 00:01:21,090
that the application that I'm managing

00:01:18,840 --> 00:01:23,190
runs on its own just fine without having

00:01:21,090 --> 00:01:24,930
to worry about it and keeping the

00:01:23,190 --> 00:01:27,720
firewall and making sure that scripts

00:01:24,930 --> 00:01:30,390
are at bay and throttling because when

00:01:27,720 --> 00:01:32,610
we run into the works fine in dev ops

00:01:30,390 --> 00:01:37,260
problem now well we've all been there

00:01:32,610 --> 00:01:40,500
and it's not a fun place to be so that

00:01:37,260 --> 00:01:43,049
was starting two things first most

00:01:40,500 --> 00:01:44,630
important thing that I find with any

00:01:43,049 --> 00:01:48,060
sort of project in documentation

00:01:44,630 --> 00:01:50,070
documentation kind of that always gets a

00:01:48,060 --> 00:01:51,950
bad rap a lot of people do it wrong do

00:01:50,070 --> 00:01:53,880
too much of it don't like doing it but

00:01:51,950 --> 00:01:57,869
documentation is very important for a

00:01:53,880 --> 00:02:00,420
number of reasons mainly being that you

00:01:57,869 --> 00:02:02,460
need to make sure that people understand

00:02:00,420 --> 00:02:04,890
what your application his application

00:02:02,460 --> 00:02:06,840
does and how it runs um and so any

00:02:04,890 --> 00:02:10,470
documentation for an application needs

00:02:06,840 --> 00:02:13,080
to answer these three problems what does

00:02:10,470 --> 00:02:15,659
it do is it a game as an informational

00:02:13,080 --> 00:02:17,280
site is it a CMS does it serve video all

00:02:15,659 --> 00:02:19,260
these different types of applications

00:02:17,280 --> 00:02:22,530
have different requirements for hosting

00:02:19,260 --> 00:02:23,970
and being run on the Internet what does

00:02:22,530 --> 00:02:25,980
it need doesn't need a database as I

00:02:23,970 --> 00:02:28,739
need a caching layer does it need a load

00:02:25,980 --> 00:02:30,290
balancer does it do uploads the

00:02:28,739 --> 00:02:31,400
background jobs

00:02:30,290 --> 00:02:33,860
does it do any sort of image processing

00:02:31,400 --> 00:02:35,269
does it talk out to other services is

00:02:33,860 --> 00:02:36,530
very important things to know for an

00:02:35,269 --> 00:02:37,760
operations person trying to provision

00:02:36,530 --> 00:02:41,480
servers and figure out how to configure

00:02:37,760 --> 00:02:42,650
for your application to run and of

00:02:41,480 --> 00:02:46,970
course how do I get it running on my

00:02:42,650 --> 00:02:48,260
machine if you can't even get running on

00:02:46,970 --> 00:02:51,680
your own death machine how do you expect

00:02:48,260 --> 00:02:54,620
a cavern a time out in production and so

00:02:51,680 --> 00:02:56,510
this kind of documentation can come in

00:02:54,620 --> 00:02:59,239
like I do like a readme or a couple of

00:02:56,510 --> 00:03:01,310
docx files or better yet if it's in

00:02:59,239 --> 00:03:04,579
something that is executable like a proc

00:03:01,310 --> 00:03:06,260
file if using Foreman or if you're got

00:03:04,579 --> 00:03:08,000
like a bootstrap script or if you're

00:03:06,260 --> 00:03:10,700
going with something like github boxing

00:03:08,000 --> 00:03:12,409
if it's an executable then it has to be

00:03:10,700 --> 00:03:17,239
right because you're trying to have just

00:03:12,409 --> 00:03:18,049
a 1.1 click setup and when I see

00:03:17,239 --> 00:03:19,879
applications that don't have

00:03:18,049 --> 00:03:21,319
documentation it's always kind of it

00:03:19,879 --> 00:03:22,730
crestfallen because I'm going to spend a

00:03:21,319 --> 00:03:25,329
week trying to figure out what all i

00:03:22,730 --> 00:03:27,799
need so documentation is very important

00:03:25,329 --> 00:03:29,989
the next part that's been mentioned a

00:03:27,799 --> 00:03:32,720
couple of times now it's kind of made of

00:03:29,989 --> 00:03:35,120
DevOps is deploy all the time we should

00:03:32,720 --> 00:03:37,489
be deploying our code to a deployable

00:03:35,120 --> 00:03:39,739
runnable state you know even every day

00:03:37,489 --> 00:03:41,209
multiple times a day at minimum at the

00:03:39,739 --> 00:03:42,319
end of your sprint to your iteration you

00:03:41,209 --> 00:03:43,879
should have somebody deployed and

00:03:42,319 --> 00:03:46,729
running so that people can look at it

00:03:43,879 --> 00:03:49,010
and this deploy should always be one

00:03:46,729 --> 00:03:52,760
button deploys like you cap environment

00:03:49,010 --> 00:03:54,079
deploy minimize the amount of that

00:03:52,760 --> 00:03:55,669
minimizes the chance of risk of someone

00:03:54,079 --> 00:03:57,590
doing a toy wrong by making sure it's

00:03:55,669 --> 00:03:59,060
all encoded all codified so that it's

00:03:57,590 --> 00:04:01,639
one button you have to worry about it

00:03:59,060 --> 00:04:02,780
and it just runs and now with when

00:04:01,639 --> 00:04:04,760
you're starting up new applications or

00:04:02,780 --> 00:04:06,769
small applications her oh pues first

00:04:04,760 --> 00:04:09,169
dino is free so there's really no reason

00:04:06,769 --> 00:04:11,000
not to have put something at least on

00:04:09,169 --> 00:04:12,500
Heroku for free just to give yourself a

00:04:11,000 --> 00:04:14,269
start have something to deploy it so you

00:04:12,500 --> 00:04:15,799
can start understanding that what your

00:04:14,269 --> 00:04:21,590
application needs for its deployment

00:04:15,799 --> 00:04:23,750
strategy with that I start diving into

00:04:21,590 --> 00:04:26,479
some things you can do in your code and

00:04:23,750 --> 00:04:30,590
the first one is configurability of your

00:04:26,479 --> 00:04:33,380
application as an ops guy I love being

00:04:30,590 --> 00:04:35,030
able to configure a configuring

00:04:33,380 --> 00:04:37,190
application I'm not talking about the

00:04:35,030 --> 00:04:38,990
old j2ee days where you had mountains of

00:04:37,190 --> 00:04:41,840
XML files that were basically where your

00:04:38,990 --> 00:04:43,870
application that's a disaster what I'm

00:04:41,840 --> 00:04:46,210
talking about is separating out

00:04:43,870 --> 00:04:48,370
what your application does to who it

00:04:46,210 --> 00:04:49,690
does it with the application needs a

00:04:48,370 --> 00:04:51,400
database it doesn't care who the

00:04:49,690 --> 00:04:53,320
databases are where it is you can figure

00:04:51,400 --> 00:04:54,970
that the database is at this host with

00:04:53,320 --> 00:04:57,220
this user name this password this port

00:04:54,970 --> 00:04:58,900
everything that's how the configuration

00:04:57,220 --> 00:05:03,370
that ops really likes to see because

00:04:58,900 --> 00:05:06,220
then it lets us easily tell a software a

00:05:03,370 --> 00:05:07,600
application on staging to talk to one

00:05:06,220 --> 00:05:09,550
database production to talk to another

00:05:07,600 --> 00:05:15,400
database and you make sure to keep those

00:05:09,550 --> 00:05:18,790
separate um and so the one pattern that

00:05:15,400 --> 00:05:20,230
I really do not like seeing is when

00:05:18,790 --> 00:05:22,270
these kind of configurations ends up in

00:05:20,230 --> 00:05:24,460
code so i say you have a class that's

00:05:22,270 --> 00:05:26,740
talks to Redis and know it you know you

00:05:24,460 --> 00:05:28,210
have it works in dev you need to send it

00:05:26,740 --> 00:05:30,460
to this red as host with his username

00:05:28,210 --> 00:05:32,380
and password when I needed to blow it to

00:05:30,460 --> 00:05:33,310
staging or production and those need

00:05:32,380 --> 00:05:34,780
different host names and different

00:05:33,310 --> 00:05:36,490
usernames and different passwords and

00:05:34,780 --> 00:05:41,470
you start building up this rails and

00:05:36,490 --> 00:05:44,230
branch of passwords in the code not good

00:05:41,470 --> 00:05:46,540
because of them for one this stuff is

00:05:44,230 --> 00:05:50,140
now in source control which gets spread

00:05:46,540 --> 00:05:52,240
across all the developers in this on the

00:05:50,140 --> 00:05:53,920
product it gets and more importantly

00:05:52,240 --> 00:05:56,260
gets spread across all the development

00:05:53,920 --> 00:05:58,090
of the deployment environments so people

00:05:56,260 --> 00:05:59,110
jump onto your staging also and they

00:05:58,090 --> 00:06:00,820
have credentials to get to your

00:05:59,110 --> 00:06:05,380
production environment and that's really

00:06:00,820 --> 00:06:07,660
not good Ruby makes this really simple

00:06:05,380 --> 00:06:09,910
for us so I have active record example

00:06:07,660 --> 00:06:12,760
of using a young animal file and your

00:06:09,910 --> 00:06:14,440
config prefix it with the environment

00:06:12,760 --> 00:06:16,630
your part you're working with set up a

00:06:14,440 --> 00:06:19,120
couple of values load it through yamel

00:06:16,630 --> 00:06:21,520
rails root gives you a direct access to

00:06:19,120 --> 00:06:27,450
that config directory and there you go

00:06:21,520 --> 00:06:32,410
it's no reason not to do this there is

00:06:27,450 --> 00:06:34,840
could be so the two ways I kind of like

00:06:32,410 --> 00:06:37,180
to do config files either one config

00:06:34,840 --> 00:06:43,090
file per service or one giant config

00:06:37,180 --> 00:06:45,460
file but if you are happen to running on

00:06:43,090 --> 00:06:47,350
environments that don't let you sit

00:06:45,460 --> 00:06:49,420
config files like Heroku which uses

00:06:47,350 --> 00:06:51,100
environment variables that can kind of

00:06:49,420 --> 00:06:53,830
the way that's why there's a couple of

00:06:51,100 --> 00:06:55,830
tools out there to kind of mix and match

00:06:53,830 --> 00:06:58,260
this nicely one that I use

00:06:55,830 --> 00:07:00,660
it's called figueroa which is actually

00:06:58,260 --> 00:07:03,300
written by a fellow guy collective idea

00:07:00,660 --> 00:07:06,090
and I'm Steve rickard where basically

00:07:03,300 --> 00:07:08,360
you set environment variable looking

00:07:06,090 --> 00:07:10,530
values in your application y Amal and

00:07:08,360 --> 00:07:13,230
Figueroa will take those values put them

00:07:10,530 --> 00:07:15,960
into your environment and then give you

00:07:13,230 --> 00:07:18,600
an abstracted access point via its

00:07:15,960 --> 00:07:20,100
figaro am so that you can have in the

00:07:18,600 --> 00:07:23,790
situation actually have with a customer

00:07:20,100 --> 00:07:25,740
you can have staging on Heroku and you

00:07:23,790 --> 00:07:28,500
can have production on a dedicated box

00:07:25,740 --> 00:07:30,240
and both places that configure file the

00:07:28,500 --> 00:07:31,920
configure Minh configurations are

00:07:30,240 --> 00:07:34,440
exactly the same you don't have to worry

00:07:31,920 --> 00:07:38,310
about having any of stuff leaking into

00:07:34,440 --> 00:07:41,280
code now previously I had that nests of

00:07:38,310 --> 00:07:44,730
rails and Bach and I kind is something

00:07:41,280 --> 00:07:47,430
that I've seen a unfortunate a lot and

00:07:44,730 --> 00:07:52,410
in rails rails code where people like to

00:07:47,430 --> 00:07:55,290
use rails MDOT to configure or change

00:07:52,410 --> 00:07:58,380
how the application works and really not

00:07:55,290 --> 00:08:00,540
a fan of this practice for one if you

00:07:58,380 --> 00:08:03,360
have this a bunch of static information

00:08:00,540 --> 00:08:05,520
like the domain of a website oh it's

00:08:03,360 --> 00:08:07,200
like this is a configuration value the

00:08:05,520 --> 00:08:09,510
site shouldn't care what domain that's

00:08:07,200 --> 00:08:11,520
being run under and every time you make

00:08:09,510 --> 00:08:12,390
a new deploy environment or you change

00:08:11,520 --> 00:08:13,530
something you have to come in you have

00:08:12,390 --> 00:08:15,180
to change your code and that's kind of

00:08:13,530 --> 00:08:17,520
tedious this type of thing is really

00:08:15,180 --> 00:08:19,140
easy just to move into a config and pull

00:08:17,520 --> 00:08:22,590
it out using figure or whatever tools

00:08:19,140 --> 00:08:24,810
that you decide to use worse though is

00:08:22,590 --> 00:08:26,720
when your actual logic is split apart

00:08:24,810 --> 00:08:28,770
according to what environment you're in

00:08:26,720 --> 00:08:30,630
I've seen this a couple of times

00:08:28,770 --> 00:08:31,830
thankfully not often but it's still

00:08:30,630 --> 00:08:33,630
something that scares me every time I

00:08:31,830 --> 00:08:37,410
see it probably have actually done this

00:08:33,630 --> 00:08:38,790
before too but once you have logic going

00:08:37,410 --> 00:08:40,290
through one path in your development and

00:08:38,790 --> 00:08:42,500
urine test environment a different path

00:08:40,290 --> 00:08:44,670
in your production environment then

00:08:42,500 --> 00:08:46,500
you're not actually testing what's going

00:08:44,670 --> 00:08:48,500
on in production and this is definitely

00:08:46,500 --> 00:08:52,740
something that you're going to regret

00:08:48,500 --> 00:08:54,120
because doing it live is a joke for a

00:08:52,740 --> 00:08:59,010
reason we don't want to actually do it

00:08:54,120 --> 00:09:01,400
live the next step next part I talked

00:08:59,010 --> 00:09:04,350
about is threading and thread safety

00:09:01,400 --> 00:09:06,270
threading has been is kind of thankfully

00:09:04,350 --> 00:09:07,530
less of a worry with the Ruby

00:09:06,270 --> 00:09:09,150
environment in the Ruby community in the

00:09:07,530 --> 00:09:09,720
rails community we've been focusing more

00:09:09,150 --> 00:09:12,120
on multiple

00:09:09,720 --> 00:09:15,060
processes with thin and with passenger

00:09:12,120 --> 00:09:17,490
or why not to keep that at bay but as we

00:09:15,060 --> 00:09:19,829
progress being able to run multiple

00:09:17,490 --> 00:09:23,490
threads across all your cpu's using

00:09:19,829 --> 00:09:24,810
jruby or Rubinius making sure that your

00:09:23,490 --> 00:09:27,269
code is thread-safe is we going to

00:09:24,810 --> 00:09:28,529
become much more important rails gives

00:09:27,269 --> 00:09:30,930
us my ninety percent of the way there

00:09:28,529 --> 00:09:32,550
most of rails is thread-safe it has been

00:09:30,930 --> 00:09:35,540
for a very long time you seem to make

00:09:32,550 --> 00:09:38,879
sure that your code does not end up

00:09:35,540 --> 00:09:40,410
breaking that thread safety the first

00:09:38,879 --> 00:09:43,170
rule of anything with thread safety is

00:09:40,410 --> 00:09:44,639
share nothing don't share anything there

00:09:43,170 --> 00:09:46,920
should be nothing that is actually

00:09:44,639 --> 00:09:48,269
pulled saved in memory between requests

00:09:46,920 --> 00:09:51,029
if you need to save something put in the

00:09:48,269 --> 00:09:53,279
session or the cookie put it into Redis

00:09:51,029 --> 00:09:54,569
or in your database because once you

00:09:53,279 --> 00:09:56,009
start sharing something you can have

00:09:54,569 --> 00:09:57,860
that's when you start opening yourself

00:09:56,009 --> 00:10:02,189
up to deadlocks and contention and

00:09:57,860 --> 00:10:03,600
memory issues in the cases that you do

00:10:02,189 --> 00:10:06,209
have some values that you want to save

00:10:03,600 --> 00:10:08,790
her request that may not be easily

00:10:06,209 --> 00:10:13,170
passed around everywhere there is this

00:10:08,790 --> 00:10:15,660
lovely little thread current hash so one

00:10:13,170 --> 00:10:17,009
issue that actually ran into with one of

00:10:15,660 --> 00:10:20,009
our products that collective idea harm

00:10:17,009 --> 00:10:22,500
the Harmony CMS is we had you're sending

00:10:20,009 --> 00:10:25,949
exceptions to the exceptional service

00:10:22,500 --> 00:10:29,250
and we stored the current user and their

00:10:25,949 --> 00:10:31,949
email on their site that the request is

00:10:29,250 --> 00:10:33,779
dealing with out to exceptional bogard

00:10:31,949 --> 00:10:36,089
foot noticing was that the user ID and

00:10:33,779 --> 00:10:38,490
the site didn't match up most the time

00:10:36,089 --> 00:10:42,089
the sole ended up finding out what's

00:10:38,490 --> 00:10:43,500
happening was before each request we set

00:10:42,089 --> 00:10:46,050
the current user when set the current

00:10:43,500 --> 00:10:47,689
site but knowing that we need to make

00:10:46,050 --> 00:10:50,220
sure that that stuff gets cleared out we

00:10:47,689 --> 00:10:52,589
have an around filter instead that then

00:10:50,220 --> 00:10:55,620
clears out that information after the

00:10:52,589 --> 00:10:57,930
request is done however what happens if

00:10:55,620 --> 00:10:59,670
that request those an exception which

00:10:57,930 --> 00:11:00,990
propagates up past yield and that clear

00:10:59,670 --> 00:11:02,309
never gets called so the next request

00:11:00,990 --> 00:11:04,980
that comes through with this thread has

00:11:02,309 --> 00:11:07,259
values already set the fix is easy

00:11:04,980 --> 00:11:09,209
enough we change back to a before filter

00:11:07,259 --> 00:11:10,740
and we clear information before we

00:11:09,209 --> 00:11:13,399
actually run the requests that we know

00:11:10,740 --> 00:11:17,300
we're at we start at a clean slate and

00:11:13,399 --> 00:11:20,100
as a side note I haven't found a really

00:11:17,300 --> 00:11:22,529
good place where in a round filter works

00:11:20,100 --> 00:11:23,520
better than just before filter I would

00:11:22,529 --> 00:11:24,960
be interesting if I

00:11:23,520 --> 00:11:26,850
some people had some ideas but usually

00:11:24,960 --> 00:11:30,390
when i see a round filter i try to turn

00:11:26,850 --> 00:11:33,780
it back into it before filter the next

00:11:30,390 --> 00:11:35,310
section something that we've had a lot

00:11:33,780 --> 00:11:37,560
of discussion about alright today but i

00:11:35,310 --> 00:11:40,830
feel is incredibly important in today's

00:11:37,560 --> 00:11:42,870
day and age is security every developer

00:11:40,830 --> 00:11:45,440
what other it's a website or an

00:11:42,870 --> 00:11:48,810
application needs to have some idea of

00:11:45,440 --> 00:11:50,880
security and code what they're doing

00:11:48,810 --> 00:11:51,990
what opens security holes what closes

00:11:50,880 --> 00:11:54,030
them and how to make sure that they're

00:11:51,990 --> 00:11:57,150
not throwing something dealer that works

00:11:54,030 --> 00:12:01,500
but is just rife with security holes on

00:11:57,150 --> 00:12:03,030
the first thing that first security hole

00:12:01,500 --> 00:12:06,990
i look for in rails applications is

00:12:03,030 --> 00:12:09,210
attribute injection as a rails has for a

00:12:06,990 --> 00:12:11,640
long time had actually accessible

00:12:09,210 --> 00:12:12,810
actually protected for specifying these

00:12:11,640 --> 00:12:14,450
attributes are available to come in

00:12:12,810 --> 00:12:17,480
these attributes are not available and

00:12:14,450 --> 00:12:20,570
blocking the good and the bad ones

00:12:17,480 --> 00:12:23,430
unfortunately up until only recently

00:12:20,570 --> 00:12:24,810
this has not been default on so real so

00:12:23,430 --> 00:12:30,000
i've seen a lot of rails applications

00:12:24,810 --> 00:12:32,790
that have this hole in them and edge

00:12:30,000 --> 00:12:34,980
accessible i used to really like it but

00:12:32,790 --> 00:12:36,450
it really does get in the way when

00:12:34,980 --> 00:12:37,800
you're trying to develop your code

00:12:36,450 --> 00:12:39,780
because now everything in your app has

00:12:37,800 --> 00:12:41,250
to adhere to this accessibility whether

00:12:39,780 --> 00:12:42,570
it's your test or your models or whatnot

00:12:41,250 --> 00:12:44,400
something that isn't coming from the

00:12:42,570 --> 00:12:46,530
user and that just gets tedious and

00:12:44,400 --> 00:12:48,480
annoying so this this way is now

00:12:46,530 --> 00:12:50,400
considered deprecated in the new way is

00:12:48,480 --> 00:12:53,120
what's called strong parameters where

00:12:50,400 --> 00:12:56,520
your controller isn't for is in charge

00:12:53,120 --> 00:12:59,430
of which parameters can come in and be

00:12:56,520 --> 00:13:04,260
accepted from the user this then gives

00:12:59,430 --> 00:13:06,300
you a nice single point of protection

00:13:04,260 --> 00:13:07,950
about the parameters and also gives you

00:13:06,300 --> 00:13:09,660
some documentation on what the request

00:13:07,950 --> 00:13:11,100
coming in will look like something that

00:13:09,660 --> 00:13:13,620
we didn't really had before generally

00:13:11,100 --> 00:13:15,330
has before and this opens up your tests

00:13:13,620 --> 00:13:17,430
and your internal application structure

00:13:15,330 --> 00:13:22,830
to not really care about these type of

00:13:17,430 --> 00:13:27,150
security protections next thing we all

00:13:22,830 --> 00:13:29,010
loved hating is passwords passwords are

00:13:27,150 --> 00:13:30,650
the way to make sure people can

00:13:29,010 --> 00:13:32,460
authenticate that they are who they are

00:13:30,650 --> 00:13:34,170
obviously we don't store password in

00:13:32,460 --> 00:13:37,620
plaintext we always hatch them with some

00:13:34,170 --> 00:13:41,320
sort of md5 or sha hash or what

00:13:37,620 --> 00:13:45,910
today these should be considered

00:13:41,320 --> 00:13:48,940
deprecated they're very easily crackable

00:13:45,910 --> 00:13:50,950
now GPUs are incredibly fast very

00:13:48,940 --> 00:13:53,260
optimized piece of mathematical hardware

00:13:50,950 --> 00:13:56,220
that can blast through these jaws at

00:13:53,260 --> 00:13:58,839
enormous rates a single GPU can run

00:13:56,220 --> 00:14:00,070
hundreds of millions of shaws a second

00:13:58,839 --> 00:14:01,779
and when you start putting them into a

00:14:00,070 --> 00:14:04,390
cluster this is an embarrassingly

00:14:01,779 --> 00:14:07,269
parallel problem so the more GPUs you

00:14:04,390 --> 00:14:09,279
get the more cloth the more hashes you

00:14:07,269 --> 00:14:11,140
can get per second and you have a 20

00:14:09,279 --> 00:14:14,709
cluster GPUs can start pushing through

00:14:11,140 --> 00:14:16,660
say if you have say they're like six

00:14:14,709 --> 00:14:20,890
hundred trillion available eight

00:14:16,660 --> 00:14:22,680
character passwords and a single GPU can

00:14:20,890 --> 00:14:27,060
run through that whole thing in 16 days

00:14:22,680 --> 00:14:29,950
20 GPUs will do it in 19 hours I

00:14:27,060 --> 00:14:32,079
consider these shut the the Shah hashing

00:14:29,950 --> 00:14:33,880
and md5 hashing as that they're not

00:14:32,079 --> 00:14:35,620
really secure even with salting does

00:14:33,880 --> 00:14:41,140
help but there are better solutions out

00:14:35,620 --> 00:14:44,890
there namely bcrypt bcrypt takes hashing

00:14:41,140 --> 00:14:47,470
one level further and says that bcrypt

00:14:44,890 --> 00:14:50,110
the the hash has a complexity value and

00:14:47,470 --> 00:14:52,470
that complexity value then makes the

00:14:50,110 --> 00:14:55,570
hash take a very long time to generate

00:14:52,470 --> 00:14:57,579
for example is setting a complexity of 5

00:14:55,570 --> 00:14:59,440
running a hundred hashes takes two

00:14:57,579 --> 00:15:02,350
tenths of a second and that goes up very

00:14:59,440 --> 00:15:04,149
quickly as you increase the cost this

00:15:02,350 --> 00:15:06,760
cost has to be paid so if you're

00:15:04,149 --> 00:15:08,440
throwing bcrypt hashes at a GPU it still

00:15:06,760 --> 00:15:10,630
has to take that amount of time and

00:15:08,440 --> 00:15:13,470
process all that complexity before it

00:15:10,630 --> 00:15:16,480
gets it down so you're taking 30 million

00:15:13,470 --> 00:15:18,760
hashes the second down to 10 or 20 and

00:15:16,480 --> 00:15:21,699
with that you're not going to have a

00:15:18,760 --> 00:15:25,540
brute forcible hash system and as

00:15:21,699 --> 00:15:28,810
Hardware gets faster you are able to

00:15:25,540 --> 00:15:30,820
re-encrypt these passwords with higher

00:15:28,810 --> 00:15:33,269
complexity to keep up with the growing

00:15:30,820 --> 00:15:33,269
hardware

00:15:40,650 --> 00:15:45,250
next part under security is something

00:15:43,480 --> 00:15:47,680
that we've had to deal with in the rails

00:15:45,250 --> 00:15:50,980
community this year and that's dealing

00:15:47,680 --> 00:15:52,750
with serialization obviously there's

00:15:50,980 --> 00:15:54,070
been a lot of issues and security holes

00:15:52,750 --> 00:15:56,470
that we've had to fix lately due to

00:15:54,070 --> 00:16:05,460
remote code execution via the Amal

00:15:56,470 --> 00:16:09,100
serialization stuff cos I go fast

00:16:05,460 --> 00:16:11,890
basically my what I've comes up is my

00:16:09,100 --> 00:16:15,730
rule serialization is I don't serialize

00:16:11,890 --> 00:16:18,310
custom types that opens you up to any

00:16:15,730 --> 00:16:19,780
sort of pilot revert any sort of remote

00:16:18,310 --> 00:16:22,120
execution or you don't know what's being

00:16:19,780 --> 00:16:24,130
serialized so only use the base types I

00:16:22,120 --> 00:16:29,380
can't some strings and hashes and arrays

00:16:24,130 --> 00:16:32,260
an example that I that I ran into I had

00:16:29,380 --> 00:16:35,020
an application that was keeping track of

00:16:32,260 --> 00:16:36,370
some like a vehicle that I users select

00:16:35,020 --> 00:16:38,260
as they're going through the process so

00:16:36,370 --> 00:16:40,810
I put the car into the session and then

00:16:38,260 --> 00:16:42,520
at some point i renamed the class to

00:16:40,810 --> 00:16:44,530
from car to vehicle and now all of a

00:16:42,520 --> 00:16:46,810
sudden people were jumping a website in

00:16:44,530 --> 00:16:48,910
getting a our lovely rails default error

00:16:46,810 --> 00:16:51,250
message because it couldn't find the

00:16:48,910 --> 00:16:52,540
class anymore so that was i was

00:16:51,250 --> 00:16:55,990
accidentally coupling my implementation

00:16:52,540 --> 00:16:59,290
with my data representation another

00:16:55,990 --> 00:17:02,110
serialization i ran into was eager

00:16:59,290 --> 00:17:04,300
loading was causing problems like I'd

00:17:02,110 --> 00:17:06,010
serialized this user into a background

00:17:04,300 --> 00:17:07,480
job user had a whole bunch of followers

00:17:06,010 --> 00:17:10,839
those followers had a whole bunch of

00:17:07,480 --> 00:17:13,300
followers it overflowed on my sequel

00:17:10,839 --> 00:17:15,370
text field the resulting yeah mille and

00:17:13,300 --> 00:17:17,830
broke everything so and really all you

00:17:15,370 --> 00:17:21,010
need is just ID for the job to know what

00:17:17,830 --> 00:17:22,330
to do and then I'll plenty of other

00:17:21,010 --> 00:17:23,440
situations that you have to worry about

00:17:22,330 --> 00:17:25,420
like cross-site scripting or

00:17:23,440 --> 00:17:28,000
clickjacking or cross like forgery

00:17:25,420 --> 00:17:30,670
requests or past reversals IP spoofing

00:17:28,000 --> 00:17:32,260
or cookie hijacking your researchers

00:17:30,670 --> 00:17:34,390
I'll talk to us like you can kind of

00:17:32,260 --> 00:17:36,419
make you just want to curl up in a

00:17:34,390 --> 00:17:39,029
corner and just cry

00:17:36,419 --> 00:17:40,499
but thankfully there are solutions out

00:17:39,029 --> 00:17:42,539
there a lot of these can be blocked

00:17:40,499 --> 00:17:45,419
automatically we have a tool out now

00:17:42,539 --> 00:17:47,489
called rack protection which puts in

00:17:45,419 --> 00:17:49,080
place all the protections for a lot of

00:17:47,489 --> 00:17:51,409
these problems automatically just hook

00:17:49,080 --> 00:17:54,869
up the middleware and you're good to go

00:17:51,409 --> 00:17:57,029
and so with the researchers thing when

00:17:54,869 --> 00:17:59,999
the security issues started coming out

00:17:57,029 --> 00:18:01,799
in January we put up a security page

00:17:59,999 --> 00:18:04,409
saying eight you know if you find

00:18:01,799 --> 00:18:06,389
security issues in harmony let us know

00:18:04,409 --> 00:18:07,799
and we'll take it out we'll put you up

00:18:06,389 --> 00:18:10,799
on our Hall of Fame page well we

00:18:07,799 --> 00:18:12,960
suddenly got DUS like mad people were

00:18:10,799 --> 00:18:15,149
hitting us with automated scripts and

00:18:12,960 --> 00:18:17,970
post and hitting our comment post on the

00:18:15,149 --> 00:18:20,970
blog and pushing thousands of comments a

00:18:17,970 --> 00:18:22,859
minute against our system we have our

00:18:20,970 --> 00:18:25,409
spam tool is keeping track it was it was

00:18:22,859 --> 00:18:26,759
Martin mollis spam but it was bogging

00:18:25,409 --> 00:18:29,070
down the system getting really annoying

00:18:26,759 --> 00:18:30,980
so we ended up finding this tool called

00:18:29,070 --> 00:18:33,389
Rack Attack from the Kickstarter group

00:18:30,980 --> 00:18:35,460
and basically with raccattack has a

00:18:33,389 --> 00:18:37,559
throttle module we say i want to limit

00:18:35,460 --> 00:18:38,999
to 20 requests over 60 seconds and then

00:18:37,559 --> 00:18:40,739
you define what the what the request

00:18:38,999 --> 00:18:44,879
looks like so i'll post to our comments

00:18:40,739 --> 00:18:46,980
and then block on that IP we subscribe

00:18:44,879 --> 00:18:49,730
to weather when it gets actually

00:18:46,980 --> 00:18:53,580
throttled and then we insert it into the

00:18:49,730 --> 00:18:55,769
middleware and from there we end up with

00:18:53,580 --> 00:18:57,330
a nice if someone hits us with a script

00:18:55,769 --> 00:18:59,340
we throttle a whole bunch of junk we

00:18:57,330 --> 00:19:01,649
only have a couple of comments coming in

00:18:59,340 --> 00:19:03,840
we're good to go and then one more thing

00:19:01,649 --> 00:19:05,970
added to this was called what we call

00:19:03,840 --> 00:19:08,519
honey pot or basically put in a text

00:19:05,970 --> 00:19:10,109
field that has some random name that is

00:19:08,519 --> 00:19:12,149
completely hidden to the user so bots

00:19:10,109 --> 00:19:14,549
will find it fill it out and we just say

00:19:12,149 --> 00:19:16,529
nope you're not going to actually happen

00:19:14,549 --> 00:19:22,489
do anything so we just drop that really

00:19:16,529 --> 00:19:24,480
quick quickly a couple of quick tips I

00:19:22,489 --> 00:19:25,820
don't store stuff in the file system

00:19:24,480 --> 00:19:28,200
unless that's what you're building

00:19:25,820 --> 00:19:29,789
Amazon's s3 or actually is cloud they're

00:19:28,200 --> 00:19:31,889
really cheap there really fast they're

00:19:29,789 --> 00:19:34,080
infinitely scalable you don't have to

00:19:31,889 --> 00:19:36,059
worry about running out of space on your

00:19:34,080 --> 00:19:38,609
on your system those problems really

00:19:36,059 --> 00:19:40,889
suck and Emmas on s3 just today lowered

00:19:38,609 --> 00:19:44,070
the price of s3 so it's even cheaper to

00:19:40,889 --> 00:19:45,720
do it now don't schedule jobs between

00:19:44,070 --> 00:19:47,420
one and three a.m. because either they

00:19:45,720 --> 00:19:50,190
won't exist it'll happen twice

00:19:47,420 --> 00:19:52,440
daylight savings will go from one 59 59

00:19:50,190 --> 00:19:54,570
23 the whole two o'clock realm was gone

00:19:52,440 --> 00:19:56,040
and daylight savings time n goes one

00:19:54,570 --> 00:19:58,230
Phenom with nine back to one o'clock

00:19:56,040 --> 00:20:00,660
doing the time over again that can cause

00:19:58,230 --> 00:20:02,700
real problems any problems with the next

00:20:00,660 --> 00:20:04,320
tip which is don't write your own

00:20:02,700 --> 00:20:06,300
billing engine unless that's what you're

00:20:04,320 --> 00:20:08,880
actually building if you put your

00:20:06,300 --> 00:20:10,530
billing engine to a scheduled payments

00:20:08,880 --> 00:20:11,850
at 2am well sudden you've got a day

00:20:10,530 --> 00:20:13,530
where you don't schedule any payments or

00:20:11,850 --> 00:20:14,820
if there's one name you schedule a day

00:20:13,530 --> 00:20:16,200
that you've got double double hits

00:20:14,820 --> 00:20:18,840
you're not quite sure what's going on I

00:20:16,200 --> 00:20:21,510
hate dealing with money I try to stay

00:20:18,840 --> 00:20:24,870
away from it these services are awesome

00:20:21,510 --> 00:20:27,120
I love them so much to finish up just a

00:20:24,870 --> 00:20:28,500
couple of services that I like to use we

00:20:27,120 --> 00:20:30,170
know a lot of these pingdom from

00:20:28,500 --> 00:20:33,170
honoring New Relic for performance

00:20:30,170 --> 00:20:35,220
instrumental is a stats d graphite type

00:20:33,170 --> 00:20:37,740
aggregation serviced or your stats at

00:20:35,220 --> 00:20:39,810
they give you nice graphs log lean paper

00:20:37,740 --> 00:20:41,550
trail have used for aggregating our logs

00:20:39,810 --> 00:20:44,040
through syslog they're great tools i

00:20:41,550 --> 00:20:45,630
highly recommend them my favorite tool

00:20:44,040 --> 00:20:47,580
is one that tells me when something

00:20:45,630 --> 00:20:49,170
doesn't happen like when you look log

00:20:47,580 --> 00:20:50,850
into your system and you see that oh hey

00:20:49,170 --> 00:20:54,690
my backups haven't been running for a

00:20:50,850 --> 00:20:57,990
month oh crap dead man snitch will tell

00:20:54,690 --> 00:21:00,420
you that you've missed something run

00:20:57,990 --> 00:21:03,330
some task curl to curl to your snitch

00:21:00,420 --> 00:21:04,710
and if dead man's switch dead man snitch

00:21:03,330 --> 00:21:07,110
doesn't get that within a time window

00:21:04,710 --> 00:21:10,110
you get an email or an SMS saying hey

00:21:07,110 --> 00:21:11,850
this is not running I love this service

00:21:10,110 --> 00:21:13,410
that has saved me so many times already

00:21:11,850 --> 00:21:17,670
i highly recommend it go check it out

00:21:13,410 --> 00:21:19,620
it's dead man snitch and that's all I

00:21:17,670 --> 00:21:25,700
have I'm Jason Roloffs with collective

00:21:19,620 --> 00:21:25,700
idea my website github and twitter thank

00:21:59,530 --> 00:22:02,530

YouTube URL: https://www.youtube.com/watch?v=n7mtYj3dHt4


