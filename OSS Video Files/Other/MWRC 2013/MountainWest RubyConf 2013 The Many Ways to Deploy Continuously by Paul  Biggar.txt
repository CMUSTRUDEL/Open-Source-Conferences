Title: MountainWest RubyConf 2013 The Many Ways to Deploy Continuously by Paul  Biggar
Publication date: 2020-01-28
Playlist: MWRC 2013
Description: 
	So...Continuous Deployment. You hear that you should be practicing continuous deployment, but nobody every pointed out that there are many different ways to do it!
This talk compares and contrasts different kinds of continuous deployment strategies. Implementation, requirements, tradeoffs will be covered. Case-studies, examining different strategies practiced at companies such as Facebook, GitHub, IMVU, Heroku and CircleCI.

Help us caption & translate this video!

http://amara.org/v/FGbe/
Captions: 
	00:00:19,880 --> 00:00:27,899
all right folks um so so I'm going to

00:00:25,619 --> 00:00:31,070
give a talk about the many ways to

00:00:27,899 --> 00:00:33,239
deploy continuously as was pointed out

00:00:31,070 --> 00:00:35,519
Allen was supposed to give this talk and

00:00:33,239 --> 00:00:38,879
rather selflessly went off to Italy on

00:00:35,519 --> 00:00:40,890
his honeymoon and and so fortunately I

00:00:38,879 --> 00:00:43,519
kind of know the the material pretty

00:00:40,890 --> 00:00:46,320
well and I as well so Alan and I are

00:00:43,519 --> 00:00:49,949
co-founders of a company called Circle C

00:00:46,320 --> 00:00:52,799
I Circle C I does hosted continuous

00:00:49,949 --> 00:00:55,589
integration and deployment for ruby apps

00:00:52,799 --> 00:00:58,259
and and also node and similar kind of

00:00:55,589 --> 00:01:01,500
apps so we have a couple of thousand

00:00:58,259 --> 00:01:03,479
developers who are as are as our paying

00:01:01,500 --> 00:01:04,890
customers and about I think forty two

00:01:03,479 --> 00:01:07,229
percent of them are doing continuous

00:01:04,890 --> 00:01:09,390
deployment so we get to look at a lot of

00:01:07,229 --> 00:01:11,070
people who are doing various kinds of

00:01:09,390 --> 00:01:12,780
continuous deployment and then we also

00:01:11,070 --> 00:01:14,610
spend a lot of time looking at what the

00:01:12,780 --> 00:01:16,829
future of our product is going to be by

00:01:14,610 --> 00:01:18,180
looking at what you all the big guys are

00:01:16,829 --> 00:01:21,479
doing so looking at what Facebook is

00:01:18,180 --> 00:01:24,060
doing looking at what etsy is doing IMVU

00:01:21,479 --> 00:01:26,640
github that sort of thing and so this

00:01:24,060 --> 00:01:28,890
talk is is kind of about what we've

00:01:26,640 --> 00:01:31,890
learned during the this kind of research

00:01:28,890 --> 00:01:33,900
and talking to our customers so most

00:01:31,890 --> 00:01:36,540
talks that I give and I guess most talks

00:01:33,900 --> 00:01:38,760
that you're used to coming to are all

00:01:36,540 --> 00:01:41,340
about giving answers and this is not one

00:01:38,760 --> 00:01:43,860
of those stocks and I'm not here to tell

00:01:41,340 --> 00:01:45,330
you the right way to do continuous

00:01:43,860 --> 00:01:46,979
deployment because what I think one of

00:01:45,330 --> 00:01:48,650
the things I learned is there is no

00:01:46,979 --> 00:01:50,970
right way to do continuous deployment

00:01:48,650 --> 00:01:52,920
everyone we talked to does continuous

00:01:50,970 --> 00:01:55,979
deployment ever so slightly differently

00:01:52,920 --> 00:01:57,690
from the guys who only do continuous

00:01:55,979 --> 00:01:59,640
deployment at nine to five monday to

00:01:57,690 --> 00:02:01,950
friday except friday afternoons because

00:01:59,640 --> 00:02:04,320
that's beer time to the guys who only do

00:02:01,950 --> 00:02:05,610
it at 2am because that's the only time

00:02:04,320 --> 00:02:08,700
they can stand there cash is being

00:02:05,610 --> 00:02:10,349
cleared so i think that if if you're

00:02:08,700 --> 00:02:11,760
doing continuous deployment or if you're

00:02:10,349 --> 00:02:14,849
going to do continuous deployment at

00:02:11,760 --> 00:02:16,439
your company there is probably a way

00:02:14,849 --> 00:02:18,720
that you think that that continuous

00:02:16,439 --> 00:02:21,390
deployment should be done and i think

00:02:18,720 --> 00:02:22,650
that if you look at other companies they

00:02:21,390 --> 00:02:25,080
will all be doing it completely

00:02:22,650 --> 00:02:26,939
differently and so what I'm trying to do

00:02:25,080 --> 00:02:29,249
here is instead of giving you answers to

00:02:26,939 --> 00:02:30,740
talk about the variables all the

00:02:29,249 --> 00:02:33,500
different variables that are

00:02:30,740 --> 00:02:36,920
with doing continuous deployment so

00:02:33,500 --> 00:02:38,240
these variables can include the speed at

00:02:36,920 --> 00:02:40,220
which you're writing new features the

00:02:38,240 --> 00:02:41,900
complexity of your code the design of

00:02:40,220 --> 00:02:44,000
your software and the architecture of

00:02:41,900 --> 00:02:45,910
your software whether you're doing a

00:02:44,000 --> 00:02:49,010
service oriented or whether you have a

00:02:45,910 --> 00:02:51,260
sort of a monolithic kind of app and

00:02:49,010 --> 00:02:53,330
even things like business priorities the

00:02:51,260 --> 00:02:54,530
number of Engineers you have and the

00:02:53,330 --> 00:02:56,630
state of your mom doing all of these

00:02:54,530 --> 00:03:01,820
will affect how you do your continuous

00:02:56,630 --> 00:03:03,650
deployment so that the talk or most of

00:03:01,820 --> 00:03:05,570
the talk is is actually about deployment

00:03:03,650 --> 00:03:11,380
because a continuous deployment is a

00:03:05,570 --> 00:03:13,910
subset of of all deployments and it's a

00:03:11,380 --> 00:03:15,770
lot of the problems that you face with

00:03:13,910 --> 00:03:17,960
deployments aren't really problems if

00:03:15,770 --> 00:03:19,520
you only deploy once a month you can

00:03:17,960 --> 00:03:21,200
have a minute of downtime every time you

00:03:19,520 --> 00:03:23,780
deploy and still have four nines of

00:03:21,200 --> 00:03:25,640
reliability but there's these problems

00:03:23,780 --> 00:03:27,260
that you get with deployment which only

00:03:25,640 --> 00:03:30,020
really become a problem when you're when

00:03:27,260 --> 00:03:35,510
you're deploying ten or 40 or 500 times

00:03:30,020 --> 00:03:37,820
a day a lot of times deployment is is

00:03:35,510 --> 00:03:40,070
really really hard even on your

00:03:37,820 --> 00:03:42,440
day-to-day deployments we only really

00:03:40,070 --> 00:03:47,960
start to do to notice it when that

00:03:42,440 --> 00:03:49,580
happens every few minutes so too I want

00:03:47,960 --> 00:03:52,450
to quickly go back to kind of the early

00:03:49,580 --> 00:03:55,400
days i'm sure people here will remember

00:03:52,450 --> 00:03:58,550
when they used to deploy PHP to a shared

00:03:55,400 --> 00:04:00,650
server using ftp so this is this is kind

00:03:58,550 --> 00:04:03,380
of the original deployment on the web

00:04:00,650 --> 00:04:06,200
and and the way that it worked was you

00:04:03,380 --> 00:04:07,970
start you had your code in on your

00:04:06,200 --> 00:04:10,400
server or an on your own machine and you

00:04:07,970 --> 00:04:12,140
want to get it onto your web server and

00:04:10,400 --> 00:04:13,700
that's that's kind of the basics of

00:04:12,140 --> 00:04:15,200
deployments your code is here it goes

00:04:13,700 --> 00:04:17,930
there and there's a transport in this

00:04:15,200 --> 00:04:19,370
case in this case ftp there's also a

00:04:17,930 --> 00:04:20,810
server on the far end and you need to

00:04:19,370 --> 00:04:22,580
coordinate with your server to decide

00:04:20,810 --> 00:04:25,610
when you switch from the old codes the

00:04:22,580 --> 00:04:28,070
new code in the indie PHP days what

00:04:25,610 --> 00:04:30,560
happened was the the server just stayed

00:04:28,070 --> 00:04:32,930
up and running it was all the logic was

00:04:30,560 --> 00:04:35,420
in mod PHP and it was in Apache and so

00:04:32,930 --> 00:04:36,710
you could overwrite the PHP files and

00:04:35,420 --> 00:04:38,570
you would have absolutely no problem at

00:04:36,710 --> 00:04:41,720
all and the server would just keep

00:04:38,570 --> 00:04:42,980
running but even though it's very

00:04:41,720 --> 00:04:45,680
straightforward what

00:04:42,980 --> 00:04:47,480
happened when requests came in web

00:04:45,680 --> 00:04:49,940
request came in from your users while

00:04:47,480 --> 00:04:53,060
the deployment was happening there was

00:04:49,940 --> 00:04:54,740
this a period of time when files were

00:04:53,060 --> 00:04:56,390
being overwritten and half of the files

00:04:54,740 --> 00:04:58,190
had been had been copied and half of

00:04:56,390 --> 00:05:02,090
them hadn't been copied and so you got

00:04:58,190 --> 00:05:04,040
users who would start start a page I

00:05:02,090 --> 00:05:06,320
guess I start a request that goes

00:05:04,040 --> 00:05:08,270
through code that that is new and then

00:05:06,320 --> 00:05:10,340
got passed into code that is old and

00:05:08,270 --> 00:05:12,620
didn't have functions that you had that

00:05:10,340 --> 00:05:14,060
you would expect it to have and so this

00:05:12,620 --> 00:05:16,130
is the problem with every single

00:05:14,060 --> 00:05:18,200
deployments that's out there everyone

00:05:16,130 --> 00:05:20,000
who's doing deployment of any kind or

00:05:18,200 --> 00:05:23,420
continuous deployment of any kind has

00:05:20,000 --> 00:05:26,300
this race there is old code there is new

00:05:23,420 --> 00:05:28,100
code they are different and you're still

00:05:26,300 --> 00:05:31,700
getting requests for these things happen

00:05:28,100 --> 00:05:34,370
sia damn time was with something which

00:05:31,700 --> 00:05:35,630
can happened in the 90s but now there

00:05:34,370 --> 00:05:37,640
are no maintenance windows there there's

00:05:35,630 --> 00:05:39,590
no planned downtime that stuff isn't

00:05:37,640 --> 00:05:41,510
really allowed anymore for your users

00:05:39,590 --> 00:05:43,880
and so every single time you have this

00:05:41,510 --> 00:05:45,380
deploy you're going to have a race the

00:05:43,880 --> 00:05:47,960
way that we dealt with this in in the

00:05:45,380 --> 00:05:50,450
PHP days the advanced deployments use

00:05:47,960 --> 00:05:53,480
symlinks you would upload your code into

00:05:50,450 --> 00:05:55,100
into one directory and your old code was

00:05:53,480 --> 00:05:56,780
another directory and once it result

00:05:55,100 --> 00:05:59,390
uploaded you would change the symlink

00:05:56,780 --> 00:06:01,880
anatomically point to the new directory

00:05:59,390 --> 00:06:03,770
I say atomically because you know they

00:06:01,880 --> 00:06:07,130
were requesting flight probably at the

00:06:03,770 --> 00:06:09,050
time and which we're still affected now

00:06:07,130 --> 00:06:10,430
so even more advanced people would shut

00:06:09,050 --> 00:06:12,290
down taking requests for a couple of

00:06:10,430 --> 00:06:15,680
seconds then do the Atomics rich and

00:06:12,290 --> 00:06:17,840
then continue during request so it seems

00:06:15,680 --> 00:06:20,570
like that that kind of has the problem

00:06:17,840 --> 00:06:22,400
solved except the race appears in many

00:06:20,570 --> 00:06:24,860
many different places so it's not just

00:06:22,400 --> 00:06:27,020
in changing from one version of the code

00:06:24,860 --> 00:06:31,100
to the other it's it's DB schemas its

00:06:27,020 --> 00:06:33,680
API versions and asset versions anything

00:06:31,100 --> 00:06:35,420
that has a service running on it if you

00:06:33,680 --> 00:06:36,920
change that service and it interacts

00:06:35,420 --> 00:06:41,810
with another service maybe those

00:06:36,920 --> 00:06:43,910
versions get out of sync so let's talk a

00:06:41,810 --> 00:06:45,680
little bit about a more a more modern

00:06:43,910 --> 00:06:50,330
world one in which we're running on

00:06:45,680 --> 00:06:53,630
Heroku so it's basically the same

00:06:50,330 --> 00:06:55,280
elements as an old PHP version you're

00:06:53,630 --> 00:06:55,770
you're pushing code it's got a different

00:06:55,280 --> 00:06:58,650
transport

00:06:55,770 --> 00:07:00,840
get over SSH but as fundamentally you're

00:06:58,650 --> 00:07:02,610
pushing a new code and there's old code

00:07:00,840 --> 00:07:05,460
and there's there's a transition to be

00:07:02,610 --> 00:07:09,750
made so when you push and users are

00:07:05,460 --> 00:07:12,720
making requests what happens well heroku

00:07:09,750 --> 00:07:17,340
I guess intelligently routes your data

00:07:12,720 --> 00:07:19,349
to new Dino I know so Heroku basically

00:07:17,340 --> 00:07:21,569
makes your request queue up basically

00:07:19,349 --> 00:07:23,580
exactly in the same way as it was in the

00:07:21,569 --> 00:07:27,240
PHP days request queue up and then the

00:07:23,580 --> 00:07:29,669
new code handles it and so when the new

00:07:27,240 --> 00:07:31,319
requests come back those were requests

00:07:29,669 --> 00:07:34,199
that were made by an old version of your

00:07:31,319 --> 00:07:36,409
app your users are running code which

00:07:34,199 --> 00:07:39,090
was generated by your old version and

00:07:36,409 --> 00:07:41,849
that code is now calling back to your

00:07:39,090 --> 00:07:43,949
server and it's hitting new code so your

00:07:41,849 --> 00:07:46,680
new code has to expect that it has to

00:07:43,949 --> 00:07:48,360
expect to be able to answer the

00:07:46,680 --> 00:07:50,190
questions that the old code was asking

00:07:48,360 --> 00:07:54,690
and to answer them in a sort of a

00:07:50,190 --> 00:07:58,080
similar way and your new code is also

00:07:54,690 --> 00:08:00,389
connected to the old databases if you if

00:07:58,080 --> 00:08:01,830
your old code or if you need a schema

00:08:00,389 --> 00:08:03,870
change between switching to your old

00:08:01,830 --> 00:08:05,610
code in your new code then you have to

00:08:03,870 --> 00:08:06,870
run that migration sometime and if

00:08:05,610 --> 00:08:10,050
you're running that migration then your

00:08:06,870 --> 00:08:12,270
old code needs to support the old schema

00:08:10,050 --> 00:08:13,590
and the new schema or your new code has

00:08:12,270 --> 00:08:15,479
to support the old schema in the new

00:08:13,590 --> 00:08:17,639
schema and so you need to write your app

00:08:15,479 --> 00:08:19,469
to take that into account the

00:08:17,639 --> 00:08:20,849
alternative and and this is this is

00:08:19,469 --> 00:08:23,310
going to be a recurring pattern to

00:08:20,849 --> 00:08:26,130
solving all of the containers to blend

00:08:23,310 --> 00:08:27,719
problems is to make sure that you deploy

00:08:26,130 --> 00:08:30,240
an intermediate version something which

00:08:27,719 --> 00:08:32,070
understands both the old version and the

00:08:30,240 --> 00:08:35,820
new version of in this case the schema

00:08:32,070 --> 00:08:38,159
but in in you know anything which has

00:08:35,820 --> 00:08:40,079
different versions you deploy something

00:08:38,159 --> 00:08:41,399
try to get a fully deployed that that

00:08:40,079 --> 00:08:42,810
supports both the old and the new

00:08:41,399 --> 00:08:44,730
version and then you can do your

00:08:42,810 --> 00:08:46,440
migration or you can do your version

00:08:44,730 --> 00:08:50,790
change or you can do database upgrade or

00:08:46,440 --> 00:08:52,890
whatever it is so this this is starting

00:08:50,790 --> 00:08:55,290
to sound pretty good we've got kind of a

00:08:52,890 --> 00:08:56,910
solution and even though I said it

00:08:55,290 --> 00:08:59,790
wasn't going to offer solutions here's a

00:08:56,910 --> 00:09:01,410
solution and and and this is kind of for

00:08:59,790 --> 00:09:02,700
a problem start really to go to help

00:09:01,410 --> 00:09:04,380
because once you've solved this there

00:09:02,700 --> 00:09:06,630
only remained really really difficult

00:09:04,380 --> 00:09:07,920
problems to solve and two of them that

00:09:06,630 --> 00:09:09,000
I'm going to talk about now our data

00:09:07,920 --> 00:09:10,920
migrations and tape

00:09:09,000 --> 00:09:13,680
locking so when when you're changing

00:09:10,920 --> 00:09:15,600
your data and when you're changing your

00:09:13,680 --> 00:09:18,000
schema you're affecting generally on

00:09:15,600 --> 00:09:19,710
your schema you're not affecting the

00:09:18,000 --> 00:09:24,600
data and sometimes you need to do a data

00:09:19,710 --> 00:09:26,340
migration as well and I am V you raise

00:09:24,600 --> 00:09:29,570
your hand quick audience participation

00:09:26,340 --> 00:09:32,370
time if you've heard of IMVU okay

00:09:29,570 --> 00:09:34,890
excellent that means that my talk is not

00:09:32,370 --> 00:09:36,360
at that means i'm not talking to people

00:09:34,890 --> 00:09:39,480
who already know all the stuff i'm going

00:09:36,360 --> 00:09:42,090
to talk about so I IMVU is the company

00:09:39,480 --> 00:09:43,620
that essentially created continuous

00:09:42,090 --> 00:09:45,360
deployment they were the first people

00:09:43,620 --> 00:09:47,250
doing it they pioneered basically

00:09:45,360 --> 00:09:49,080
everything they even coined the term

00:09:47,250 --> 00:09:52,310
continuous delivery that came from a guy

00:09:49,080 --> 00:09:55,170
who worked at I envy you um and there

00:09:52,310 --> 00:09:57,060
it's it's a start-up that's founded by a

00:09:55,170 --> 00:09:59,160
guy called Eric Ries who is who is the

00:09:57,060 --> 00:10:01,320
main proponents behind Lean Startup so

00:09:59,160 --> 00:10:03,360
it's all about iteration and continues

00:10:01,320 --> 00:10:05,390
to the development continuous deployment

00:10:03,360 --> 00:10:08,340
continuous delivery that sort of thing

00:10:05,390 --> 00:10:10,410
so there's a problem when you change

00:10:08,340 --> 00:10:14,070
your DB tables that data tables will

00:10:10,410 --> 00:10:17,790
lock if you add a ski or if you add a

00:10:14,070 --> 00:10:19,950
new default column to your table and you

00:10:17,790 --> 00:10:21,570
have a lot of data in that table then

00:10:19,950 --> 00:10:23,100
you can't expect to see your table again

00:10:21,570 --> 00:10:24,900
for another couple of errors and your

00:10:23,100 --> 00:10:28,710
site is then and uses a day and things

00:10:24,900 --> 00:10:30,510
are complaining and this is this is very

00:10:28,710 --> 00:10:32,700
awkward obviously if you're running a

00:10:30,510 --> 00:10:34,740
business like most people and so what

00:10:32,700 --> 00:10:36,270
what I envy you did is that they decided

00:10:34,740 --> 00:10:38,850
that they're never going to do a schema

00:10:36,270 --> 00:10:41,370
change on their SQL tables and what they

00:10:38,850 --> 00:10:43,080
did instead is instead of having user

00:10:41,370 --> 00:10:45,839
table they'd have a version table so

00:10:43,080 --> 00:10:48,720
they'd have user 37 and whenever they

00:10:45,839 --> 00:10:51,630
need to change the the schema of user

00:10:48,720 --> 00:10:53,550
they would create user table 38 and that

00:10:51,630 --> 00:10:56,210
user table 38 has the new schema and

00:10:53,550 --> 00:10:58,770
that way they never actually change a

00:10:56,210 --> 00:11:01,020
table that's in place whenever they go

00:10:58,770 --> 00:11:02,940
to look for a user they'll look in user

00:11:01,020 --> 00:11:05,910
38 first and if they don't find it there

00:11:02,940 --> 00:11:08,850
then they'll go to user 37 take the data

00:11:05,910 --> 00:11:10,770
do whatever data or schema migration

00:11:08,850 --> 00:11:12,630
they need to do to it and then copy it

00:11:10,770 --> 00:11:14,430
over in the background they have they

00:11:12,630 --> 00:11:16,560
have a process running which which you

00:11:14,430 --> 00:11:18,630
know slowly moves everything from the

00:11:16,560 --> 00:11:19,770
old table into the new table and so what

00:11:18,630 --> 00:11:22,610
they managed to do there is is they

00:11:19,770 --> 00:11:24,500
meant to split at the schema changes

00:11:22,610 --> 00:11:26,329
to do it row at a time instead it did

00:11:24,500 --> 00:11:28,970
instead of entire table at a time and

00:11:26,329 --> 00:11:32,750
that way they avoided and they avoided

00:11:28,970 --> 00:11:35,149
the entire problem another way to do it

00:11:32,750 --> 00:11:38,269
is to use something which has no table

00:11:35,149 --> 00:11:39,769
locking so I'm mongodb I was going to

00:11:38,269 --> 00:11:42,740
say has no table locking it has its own

00:11:39,769 --> 00:11:44,390
horrific locking problems and but any

00:11:42,740 --> 00:11:47,240
any sort of schema list database you

00:11:44,390 --> 00:11:49,550
have will not have the schema migration

00:11:47,240 --> 00:11:51,290
problem that you suffer from so it you

00:11:49,550 --> 00:11:53,779
may have to assume that all values do

00:11:51,290 --> 00:11:58,040
not exist but you can't assume that that

00:11:53,779 --> 00:12:00,350
you fetching a an old value or expecting

00:11:58,040 --> 00:12:04,870
an old and a new value well basically

00:12:00,350 --> 00:12:07,310
the the problem goes away or vanishes so

00:12:04,870 --> 00:12:09,649
Facebook doesn't actually do continuous

00:12:07,310 --> 00:12:11,269
deployment and they're they're still old

00:12:09,649 --> 00:12:13,970
school I think nowadays they deploy once

00:12:11,269 --> 00:12:15,680
a day and but they had to solve the same

00:12:13,970 --> 00:12:18,980
problem which is that they have a huge

00:12:15,680 --> 00:12:20,360
amount of data and they solve it the

00:12:18,980 --> 00:12:22,040
same way that I envy you does it by

00:12:20,360 --> 00:12:24,019
running all these all these background

00:12:22,040 --> 00:12:26,149
processes but those background processes

00:12:24,019 --> 00:12:30,019
to migrate old data to new data can take

00:12:26,149 --> 00:12:33,829
months sometimes and Facebook has a lot

00:12:30,019 --> 00:12:36,079
data so what they do is that they write

00:12:33,829 --> 00:12:38,089
the code to assume that it can have the

00:12:36,079 --> 00:12:40,250
old data they have big if statements and

00:12:38,089 --> 00:12:42,440
such statements that say if version is

00:12:40,250 --> 00:12:44,390
this assume that the data can look like

00:12:42,440 --> 00:12:47,600
this or like this or like this or like

00:12:44,390 --> 00:12:50,390
this and often if if it takes months for

00:12:47,600 --> 00:12:53,060
your data to migrate and then you

00:12:50,390 --> 00:12:55,880
sometimes have to just assume that it's

00:12:53,060 --> 00:12:57,260
going to take months and for those if

00:12:55,880 --> 00:12:59,120
statements to actually leave your code

00:12:57,260 --> 00:13:03,140
and that's that that's the way they do

00:12:59,120 --> 00:13:05,750
that so I want to talk a little bit

00:13:03,140 --> 00:13:07,730
about how to deploy code because it's it

00:13:05,750 --> 00:13:10,399
seems like something that that's it's

00:13:07,730 --> 00:13:14,540
kind of obvious you kind of you push to

00:13:10,399 --> 00:13:17,089
Heroku or something um code must be

00:13:14,540 --> 00:13:20,570
deployed to every new machine and there

00:13:17,089 --> 00:13:22,040
are ways of getting code um there's

00:13:20,570 --> 00:13:23,959
basically two ways of getting code to

00:13:22,040 --> 00:13:26,990
new machines there's you can build your

00:13:23,959 --> 00:13:29,510
entire code package in advance and and

00:13:26,990 --> 00:13:31,699
deploy that image to your new machine or

00:13:29,510 --> 00:13:33,589
you can have every machine that you want

00:13:31,699 --> 00:13:34,460
to start up take the code and build

00:13:33,589 --> 00:13:37,010
their own image

00:13:34,460 --> 00:13:39,790
they go and disadvantaged the stage so

00:13:37,010 --> 00:13:42,260
the first is is shipping an image and if

00:13:39,790 --> 00:13:44,300
on your on your continuous integration

00:13:42,260 --> 00:13:46,190
build or on your local machine or in a

00:13:44,300 --> 00:13:49,370
special machine or wherever you take

00:13:46,190 --> 00:13:51,110
your code and you get all of its

00:13:49,370 --> 00:13:52,970
dependencies you build all of its assets

00:13:51,110 --> 00:13:54,740
all of its generated files anything that

00:13:52,970 --> 00:13:56,690
you need to do you generate it into a

00:13:54,740 --> 00:13:58,520
package and you put it somewhere so this

00:13:56,690 --> 00:14:01,100
is fundamentally what Heroku does with

00:13:58,520 --> 00:14:04,250
their with their slugs and whenever you

00:14:01,100 --> 00:14:06,380
push to Roku it'll it'll take it on its

00:14:04,250 --> 00:14:08,060
good server it'll download all the

00:14:06,380 --> 00:14:10,310
dependencies and gems and all that sort

00:14:08,060 --> 00:14:12,350
of thing and compile them into what it

00:14:10,310 --> 00:14:15,140
calls the slug and then deploy that slug

00:14:12,350 --> 00:14:16,760
to each each dino as you scale up it'll

00:14:15,140 --> 00:14:18,680
just download that done it again and not

00:14:16,760 --> 00:14:20,780
have to do a recompilation so it can

00:14:18,680 --> 00:14:22,130
scale up very quickly and you can do

00:14:20,780 --> 00:14:25,880
this yourself as well you can do it on

00:14:22,130 --> 00:14:28,220
on Nami you can you take your base image

00:14:25,880 --> 00:14:30,830
on Heroku that's kind of equivalent to a

00:14:28,220 --> 00:14:32,660
build pack and and you put your code in

00:14:30,830 --> 00:14:34,240
your dependencies on it and you create a

00:14:32,660 --> 00:14:36,380
new am I and you let Amazon

00:14:34,240 --> 00:14:38,200
automatically scale you up and down and

00:14:36,380 --> 00:14:40,580
your code is already on that machine and

00:14:38,200 --> 00:14:42,250
there's middle grounds as well you can

00:14:40,580 --> 00:14:45,680
take things packed I put them into a

00:14:42,250 --> 00:14:47,060
attar gzip and put them onto s3 and then

00:14:45,680 --> 00:14:50,810
download that point when the server

00:14:47,060 --> 00:14:52,070
start so all of these are kind of

00:14:50,810 --> 00:14:54,980
roughly the same you take an empty

00:14:52,070 --> 00:14:57,140
server and you and you kind of go for it

00:14:54,980 --> 00:14:59,180
you empty server put names on it we have

00:14:57,140 --> 00:15:01,250
we have a new server but whether or not

00:14:59,180 --> 00:15:03,500
you want to do that or not depends on

00:15:01,250 --> 00:15:06,140
your deployment strategy when you push

00:15:03,500 --> 00:15:08,150
new code to production and what do you

00:15:06,140 --> 00:15:11,000
want the machines to do and there's two

00:15:08,150 --> 00:15:12,380
strategies here is the new code code

00:15:11,000 --> 00:15:14,360
that you want to run on all future

00:15:12,380 --> 00:15:15,680
machines or is the new code something

00:15:14,360 --> 00:15:18,740
that you want to replace all existing

00:15:15,680 --> 00:15:20,690
machines with and depends on how fast

00:15:18,740 --> 00:15:23,060
you scale whether you go up and down a

00:15:20,690 --> 00:15:25,790
lot and so I think it's kind of an

00:15:23,060 --> 00:15:29,300
interesting problem it also if you think

00:15:25,790 --> 00:15:32,650
of only putting code on future machines

00:15:29,300 --> 00:15:35,930
then you're acknowledging implicitly

00:15:32,650 --> 00:15:37,790
that races will always be a part of your

00:15:35,930 --> 00:15:39,470
a part of your life in the future that

00:15:37,790 --> 00:15:41,810
you may have half a day or a full day of

00:15:39,470 --> 00:15:44,780
races and I think that that can actually

00:15:41,810 --> 00:15:47,360
be quite free so one tell you about the

00:15:44,780 --> 00:15:49,820
way that we do it at Circle C I so

00:15:47,360 --> 00:15:53,240
we run continuous integration builds are

00:15:49,820 --> 00:15:55,550
our customers push code to github github

00:15:53,240 --> 00:15:58,790
sends us a notification and we rerun the

00:15:55,550 --> 00:16:01,579
build across dozens of machines and that

00:15:58,790 --> 00:16:03,890
sort of thing and so the way the way

00:16:01,579 --> 00:16:05,839
that it works is is that at night in

00:16:03,890 --> 00:16:07,880
California we are running very very few

00:16:05,839 --> 00:16:09,350
builds the nature of selling to

00:16:07,880 --> 00:16:10,940
developers means that a lot of them live

00:16:09,350 --> 00:16:12,200
in America allowed them live in Europe

00:16:10,940 --> 00:16:13,790
and the rest of them are kind of

00:16:12,200 --> 00:16:15,260
interspersed across the rest of the

00:16:13,790 --> 00:16:17,390
world so when it's night time in

00:16:15,260 --> 00:16:20,089
California at Europe hasn't got to work

00:16:17,390 --> 00:16:23,240
yet and we only have you know a much

00:16:20,089 --> 00:16:25,370
smaller version of a number of customers

00:16:23,240 --> 00:16:27,050
in Asia so kind of nothing's really

00:16:25,370 --> 00:16:29,510
going on that the system is quiet and

00:16:27,050 --> 00:16:31,220
then Europe wakes up and then the East

00:16:29,510 --> 00:16:32,870
Coast wakes up and then finally

00:16:31,220 --> 00:16:35,360
California wakes up at the same time

00:16:32,870 --> 00:16:38,899
that Europe is hitting its peak pushing

00:16:35,360 --> 00:16:41,600
time which is 4pm and and as you go

00:16:38,899 --> 00:16:45,310
through that tener period we go from

00:16:41,600 --> 00:16:47,720
nothing to to our peak and then as

00:16:45,310 --> 00:16:51,880
California goes back to bed we do it

00:16:47,720 --> 00:16:54,529
again and what this means is that we use

00:16:51,880 --> 00:16:56,510
is that new code only makes it to new

00:16:54,529 --> 00:16:58,699
machines we don't have the luxury of

00:16:56,510 --> 00:17:00,350
turning off old machines whenever we

00:16:58,699 --> 00:17:01,760
deploy new code because we need those

00:17:00,350 --> 00:17:03,709
machines to run the builds that have

00:17:01,760 --> 00:17:05,630
just come on it's a it's pretty

00:17:03,709 --> 00:17:06,890
expensive running builds for people so

00:17:05,630 --> 00:17:14,089
we can't just turn off machines

00:17:06,890 --> 00:17:15,500
willy-nilly so there's a lot of kind of

00:17:14,089 --> 00:17:17,660
Dan sides here it means that we can't

00:17:15,500 --> 00:17:20,390
get our code to customers very quickly

00:17:17,660 --> 00:17:22,760
at all we we do it essentially the same

00:17:20,390 --> 00:17:26,839
day and we have and we have a kind of a

00:17:22,760 --> 00:17:28,189
back door where if we where we can over

00:17:26,839 --> 00:17:29,570
provision and that'll shut down the old

00:17:28,189 --> 00:17:31,040
machines but it's not the sort of thing

00:17:29,570 --> 00:17:32,870
we want to be doing all the time so

00:17:31,040 --> 00:17:34,610
whenever we push our code will know

00:17:32,870 --> 00:17:37,460
generally that we have to wait about

00:17:34,610 --> 00:17:40,040
half a day to get code in in certain

00:17:37,460 --> 00:17:45,679
subsets so a web code we can get it much

00:17:40,040 --> 00:17:47,900
more quickly so if you had a more an

00:17:45,679 --> 00:17:50,000
embarrassingly parallel problem like web

00:17:47,900 --> 00:17:51,380
servers you can do it a lot better and

00:17:50,000 --> 00:17:54,919
you might be better off deploying from

00:17:51,380 --> 00:17:56,750
get instead of thinking of instead of

00:17:54,919 --> 00:17:59,210
creating an image and bring that image

00:17:56,750 --> 00:18:00,620
down onto new machines like we did you

00:17:59,210 --> 00:18:03,640
might be better off if each

00:18:00,620 --> 00:18:06,350
machine could upgrade itself so um

00:18:03,640 --> 00:18:09,590
whenever there's a new version wait a

00:18:06,350 --> 00:18:10,850
random amount of time shut down the web

00:18:09,590 --> 00:18:12,920
server remove yourself from the load

00:18:10,850 --> 00:18:15,950
balancer do a git update to a bundle

00:18:12,920 --> 00:18:17,210
update and start the web server up again

00:18:15,950 --> 00:18:19,120
connect to the load balancer and your

00:18:17,210 --> 00:18:22,340
cues and whatever else you do again and

00:18:19,120 --> 00:18:26,750
you can you can do that because you're

00:18:22,340 --> 00:18:31,190
not you you're not relying on on any of

00:18:26,750 --> 00:18:33,530
this um you know like excuse me like we

00:18:31,190 --> 00:18:35,090
are where where you have to kind of go

00:18:33,530 --> 00:18:36,530
up and down and there's very tight

00:18:35,090 --> 00:18:40,250
constraints in the amount of machines

00:18:36,530 --> 00:18:41,870
you want to run so they can do rolling

00:18:40,250 --> 00:18:44,240
restarts without really taking the

00:18:41,870 --> 00:18:46,370
server stand at all and this is exactly

00:18:44,240 --> 00:18:49,309
what Twitter does so twitter has a

00:18:46,370 --> 00:18:54,500
system called murder murder as in a

00:18:49,309 --> 00:18:55,880
group of crows not homicide and so this

00:18:54,500 --> 00:18:57,740
is this is what they said about their

00:18:55,880 --> 00:19:00,440
system we used to have a get placed a

00:18:57,740 --> 00:19:02,240
gift based deploy strategy where we just

00:19:00,440 --> 00:19:03,920
instruct our front-end to download the

00:19:02,240 --> 00:19:06,740
latest code from our main get machine

00:19:03,920 --> 00:19:08,690
and serve that unfortunately once we got

00:19:06,740 --> 00:19:10,730
past a few hundred servers things got

00:19:08,690 --> 00:19:13,760
ugly so I'm sure most of us in this room

00:19:10,730 --> 00:19:16,940
orange at the few hundred servers or a

00:19:13,760 --> 00:19:19,370
few thousand servers like like Twitter

00:19:16,940 --> 00:19:23,510
is but you know the problems can happen

00:19:19,370 --> 00:19:25,940
other kind of a small scale as well so

00:19:23,510 --> 00:19:27,770
the way Twitter did it is they moved

00:19:25,940 --> 00:19:29,929
away from a centralized system like yet

00:19:27,770 --> 00:19:31,700
and they move to a decentralized one and

00:19:29,929 --> 00:19:34,520
the decentralized one that they used I

00:19:31,700 --> 00:19:36,380
was BitTorrent every net and now

00:19:34,520 --> 00:19:38,210
whenever they deploy they deploy using

00:19:36,380 --> 00:19:40,460
BitTorrent within their data center

00:19:38,210 --> 00:19:42,679
where BitTorrent is is shockingly fast

00:19:40,460 --> 00:19:44,630
it's it's decentralized of course so

00:19:42,679 --> 00:19:46,610
they're 40 minutes deploy which is how

00:19:44,630 --> 00:19:51,080
long it took for new code to reach every

00:19:46,610 --> 00:19:55,490
machine is now 12 seconds 12 little

00:19:51,080 --> 00:19:58,190
seconds so you might be familiar with

00:19:55,490 --> 00:20:00,140
with the new shiny which is what I'm

00:19:58,190 --> 00:20:03,830
using to refer to one page JavaScript

00:20:00,140 --> 00:20:05,150
apps and you you take all of your all of

00:20:03,830 --> 00:20:08,150
your JavaScript all of your views

00:20:05,150 --> 00:20:10,370
everything you you ship it as an asset

00:20:08,150 --> 00:20:11,870
and then it interacts with with AP is so

00:20:10,370 --> 00:20:14,150
this is this is very common we do it

00:20:11,870 --> 00:20:17,590
it's brilliant if you're a developer

00:20:14,150 --> 00:20:19,880
but it's leads to a whole new

00:20:17,590 --> 00:20:22,190
interaction problem which is the acid

00:20:19,880 --> 00:20:26,000
race it's the same race again but now

00:20:22,190 --> 00:20:27,530
it's with assets so you kind of end up

00:20:26,000 --> 00:20:30,410
with this situation where the code that

00:20:27,530 --> 00:20:32,960
you deployed three weeks ago is still

00:20:30,410 --> 00:20:35,540
hitting your server because someone went

00:20:32,960 --> 00:20:38,990
on holidays or they they have tab open

00:20:35,540 --> 00:20:40,250
somewhere and you you end up again with

00:20:38,990 --> 00:20:42,950
with kind of racist and if you've ever

00:20:40,250 --> 00:20:44,420
used Trello then you might have seen

00:20:42,950 --> 00:20:46,130
their solution pop up every few days

00:20:44,420 --> 00:20:48,830
there is a new version of Trello click

00:20:46,130 --> 00:20:50,930
here to click here to do it there's the

00:20:48,830 --> 00:20:52,850
problem in Reverse as well you've got

00:20:50,930 --> 00:20:55,250
new JavaScript code and you ship the new

00:20:52,850 --> 00:20:57,410
JavaScript code which expects an API to

00:20:55,250 --> 00:21:00,890
be there but the API hasn't fully rolled

00:20:57,410 --> 00:21:02,390
out to all of your systems and same fix

00:21:00,890 --> 00:21:03,830
for that is before roll out your new

00:21:02,390 --> 00:21:07,760
code before you roll out the code that

00:21:03,830 --> 00:21:10,460
relies on so everything so far has been

00:21:07,760 --> 00:21:12,410
has been a bit deployment and and not so

00:21:10,460 --> 00:21:15,650
much about continuous deployment but if

00:21:12,410 --> 00:21:17,570
we hit all of these problems in in

00:21:15,650 --> 00:21:18,980
manual deployments surely continuous

00:21:17,570 --> 00:21:21,410
deployment is going to be is going to be

00:21:18,980 --> 00:21:23,090
absolute hell um and there's two ways

00:21:21,410 --> 00:21:25,010
that people are the people deal with

00:21:23,090 --> 00:21:28,880
this and those are monitoring and

00:21:25,010 --> 00:21:31,040
testing testing is is really difficult

00:21:28,880 --> 00:21:32,900
it's not like you can create a unit test

00:21:31,040 --> 00:21:35,510
that says there was this version and

00:21:32,900 --> 00:21:37,490
there will be this new version and and

00:21:35,510 --> 00:21:40,130
we'll test both versions of our code

00:21:37,490 --> 00:21:42,070
base in the same unit testing your test

00:21:40,130 --> 00:21:44,090
joiners aren't exactly run that way so

00:21:42,070 --> 00:21:45,530
and even if you could get it working

00:21:44,090 --> 00:21:47,330
it's not like you could write tests to

00:21:45,530 --> 00:21:50,270
anticipate what goes wrong because the

00:21:47,330 --> 00:21:51,530
problems tend to happen when when you

00:21:50,270 --> 00:21:53,480
put it in front of customers and

00:21:51,530 --> 00:21:54,920
customers click around and you know

00:21:53,480 --> 00:21:56,800
three week old versions of code are

00:21:54,920 --> 00:21:59,450
hitting it in ways that you don't expect

00:21:56,800 --> 00:22:02,360
so what people tend to do is they tend

00:21:59,450 --> 00:22:04,400
to do the conversion on their dev server

00:22:02,360 --> 00:22:06,590
on a staging server something along

00:22:04,400 --> 00:22:09,440
those lines and then they try to figure

00:22:06,590 --> 00:22:12,650
it out so github goes one step further

00:22:09,440 --> 00:22:14,630
at github all code that gets merged into

00:22:12,650 --> 00:22:17,030
master must first have been in

00:22:14,630 --> 00:22:19,280
production serving actual customers so

00:22:17,030 --> 00:22:21,020
in this way they protect master from

00:22:19,280 --> 00:22:22,880
from code which isn't quite ready to go

00:22:21,020 --> 00:22:23,670
out so that master is always ready to go

00:22:22,880 --> 00:22:27,360
it

00:22:23,670 --> 00:22:28,800
and they ensure that all code will have

00:22:27,360 --> 00:22:31,110
been tested against a small number of

00:22:28,800 --> 00:22:33,150
users before test it against all of the

00:22:31,110 --> 00:22:34,890
users so I personally think that this is

00:22:33,150 --> 00:22:37,620
a great idea and it's something which is

00:22:34,890 --> 00:22:40,550
going to be incorporated in all our work

00:22:37,620 --> 00:22:43,680
flows within the next couple of years

00:22:40,550 --> 00:22:45,990
Facebook similar problem or similar

00:22:43,680 --> 00:22:48,240
solution all code goes out to all

00:22:45,990 --> 00:22:49,980
customers but new features are disabled

00:22:48,240 --> 00:22:53,310
and they're disabled by feature flags

00:22:49,980 --> 00:22:55,050
which can be very powerfully enabled so

00:22:53,310 --> 00:22:57,090
that they can do something like enable

00:22:55,050 --> 00:22:59,430
this feature but only for married women

00:22:57,090 --> 00:23:02,130
aged 25 to 27 who live in Northern

00:22:59,430 --> 00:23:04,620
California and have a dog and so this

00:23:02,130 --> 00:23:06,660
enables them to to show new features to

00:23:04,620 --> 00:23:07,740
tens of people and then to hundreds of

00:23:06,660 --> 00:23:09,090
people in then to thousands and

00:23:07,740 --> 00:23:11,100
eventually to millions and hundreds of

00:23:09,090 --> 00:23:12,480
millions of people and so that they can

00:23:11,100 --> 00:23:14,190
test against a very small number of

00:23:12,480 --> 00:23:18,150
people before they test against a huge

00:23:14,190 --> 00:23:20,340
number so that that's testing and that's

00:23:18,150 --> 00:23:22,290
how people do it it's pretty cool and

00:23:20,340 --> 00:23:24,630
the complementary to the technique to

00:23:22,290 --> 00:23:26,520
that is is monitoring so I'm sure all of

00:23:24,630 --> 00:23:28,650
you do monitoring for your systems and

00:23:26,520 --> 00:23:30,870
you get kind of dragged out of bed if

00:23:28,650 --> 00:23:32,610
your database spikes to above like 300

00:23:30,870 --> 00:23:34,110
milliseconds or something like that or

00:23:32,610 --> 00:23:36,450
if your rate of exception increases or

00:23:34,110 --> 00:23:38,490
something but I envy you took it quite a

00:23:36,450 --> 00:23:40,380
bit further and any time that they had a

00:23:38,490 --> 00:23:43,800
problem in their in their continuous

00:23:40,380 --> 00:23:45,230
deployment system they they added it to

00:23:43,800 --> 00:23:48,000
monitoring so that they'd be able to

00:23:45,230 --> 00:23:50,670
automatically roll back and that

00:23:48,000 --> 00:23:51,930
includes business problems so that they

00:23:50,670 --> 00:23:54,150
had a problem which I refer to as the

00:23:51,930 --> 00:23:56,010
white on white problem they deployed a

00:23:54,150 --> 00:23:58,200
white boy button on to a white

00:23:56,010 --> 00:24:00,870
background and even though the code

00:23:58,200 --> 00:24:02,550
worked nobody was clicking on the buy

00:24:00,870 --> 00:24:03,990
button because they couldn't see it so

00:24:02,550 --> 00:24:05,880
obviously their their conversion rates

00:24:03,990 --> 00:24:08,430
plummeted as people didn't know to click

00:24:05,880 --> 00:24:10,620
the button and to solve that they added

00:24:08,430 --> 00:24:12,660
business metrics and anytime that

00:24:10,620 --> 00:24:14,460
business metrics or any other metrics go

00:24:12,660 --> 00:24:16,320
terribly wrong in the 10 to 15 minutes

00:24:14,460 --> 00:24:18,270
after they deploy it's automatically

00:24:16,320 --> 00:24:21,330
rolled back so I think it's kind of easy

00:24:18,270 --> 00:24:24,120
to see how we can do that we can we can

00:24:21,330 --> 00:24:26,010
look at more than our monitoring systems

00:24:24,120 --> 00:24:27,480
are more than the technical systems for

00:24:26,010 --> 00:24:29,460
being monitored we can start looking at

00:24:27,480 --> 00:24:31,890
conversion funnels how far people get

00:24:29,460 --> 00:24:33,450
down the funnel how happy people are all

00:24:31,890 --> 00:24:35,850
those key performance indicators for our

00:24:33,450 --> 00:24:36,410
business can also be used in our

00:24:35,850 --> 00:24:39,920
continuous to

00:24:36,410 --> 00:24:41,780
learning system so that that's kind of

00:24:39,920 --> 00:24:43,460
the end of my talk thanks very much for

00:24:41,780 --> 00:24:44,990
listening it covered a lot of ground a

00:24:43,460 --> 00:24:46,730
bit you kind of weight different ways

00:24:44,990 --> 00:24:49,130
that people deploy and the challenges to

00:24:46,730 --> 00:24:50,900
deploying continuously and if this sort

00:24:49,130 --> 00:24:53,780
of thing interests you Circle C is

00:24:50,900 --> 00:24:56,540
hiring jobs at these are is our address

00:24:53,780 --> 00:24:59,300
in that demand by me so I'd also love to

00:24:56,540 --> 00:25:00,560
hear from you if you've any ways in if

00:24:59,300 --> 00:25:02,870
there's any ways i haven't covered in

00:25:00,560 --> 00:25:05,060
which people do deployment continuously

00:25:02,870 --> 00:25:07,310
or not very interested in the sort of

00:25:05,060 --> 00:25:09,650
things around efficient transfer

00:25:07,310 --> 00:25:12,200
mechanisms reducing problems with

00:25:09,650 --> 00:25:13,850
deployed with deploy time racing's and

00:25:12,200 --> 00:25:16,610
all sorts of kind of database schema

00:25:13,850 --> 00:25:18,320
locking so i hope that you guys were all

00:25:16,610 --> 00:25:20,090
interested in as in this sort of thing

00:25:18,320 --> 00:25:22,640
as well and enjoyed hearing about the

00:25:20,090 --> 00:25:24,730
many ways to deploy continuously thank

00:25:22,640 --> 00:25:24,730

YouTube URL: https://www.youtube.com/watch?v=9wgsDosgWhE


