Title: MountainWest JavaScript 2014 - 60 FPS or Bust: Bleeding Edge Web Animation
Publication date: 2020-01-24
Playlist: MountainWest JavaScript 2014
Description: 
	By Jeremy Kahn

JavaScript allows us to define complex behavior as well as respond to events. Modern browsers give us JavaScript APIs that are optimized for animation timing, but we still only get 16 milliseconds to render. Alternatively, CSS handles the heavy lifting of timing and rendering for us. However, it is often not as flexible as JavaScript and therefore has different use cases. How do we know what language is best for the job?
In addition to APIs, high-quality animation requires effective workflows and tooling. With animation being such a visual craft, text-based workflows will only get us so far. In this session, we will explore some of the visual tools to help us build better animations more easily than ever before.

Help us caption & translate this video!

http://amara.org/v/FG21/
Captions: 
	00:00:25,030 --> 00:00:31,550
yes good morning everyone I'm Jeremy con

00:00:28,810 --> 00:00:33,410
and then it title this talk is 60 frames

00:00:31,550 --> 00:00:36,200
per second or bust bleeding edge web

00:00:33,410 --> 00:00:38,000
animation so this is going to be kind of

00:00:36,200 --> 00:00:40,610
a zero to 60 talk to make kind of a bad

00:00:38,000 --> 00:00:41,989
pun whereas when we're going to talk

00:00:40,610 --> 00:00:43,220
about like everything from the basics

00:00:41,989 --> 00:00:46,720
all the way to the more advanced stuff

00:00:43,220 --> 00:00:49,730
and my goal with this talk is to kind of

00:00:46,720 --> 00:00:52,309
reframe how we look at animation on the

00:00:49,730 --> 00:00:54,020
web and how we approach doing it so

00:00:52,309 --> 00:00:56,540
let's get into it first I'll introduce

00:00:54,020 --> 00:00:58,640
myself again hello again my name is

00:00:56,540 --> 00:00:59,990
Jeremy Khan I'm a frameworks developer

00:00:58,640 --> 00:01:02,690
at a company called jelly vision in

00:00:59,990 --> 00:01:04,640
Chicago jelly visions elevation is an

00:01:02,690 --> 00:01:07,130
interactive company that communicates

00:01:04,640 --> 00:01:09,560
via interactive conversations we do some

00:01:07,130 --> 00:01:11,869
really cool stuff so check us out when

00:01:09,560 --> 00:01:13,430
I'm not doing stuff in my day job I

00:01:11,869 --> 00:01:16,009
spent a lot of time making open source

00:01:13,430 --> 00:01:18,050
stuff on putting on github and sharing

00:01:16,009 --> 00:01:20,899
my thoughts on Twitter both as Jeremy C

00:01:18,050 --> 00:01:23,300
Conn in both places I want to highlight

00:01:20,899 --> 00:01:26,660
this bottom part here in that I am NOT

00:01:23,300 --> 00:01:28,550
an animator I am an engineer so why am I

00:01:26,660 --> 00:01:30,530
here talking to you guys about animation

00:01:28,550 --> 00:01:33,140
which is a creative thing that you know

00:01:30,530 --> 00:01:34,850
I you wouldn't wanna let me near any

00:01:33,140 --> 00:01:38,090
well you wouldn't want to let me near

00:01:34,850 --> 00:01:40,729
any place close to you know design tools

00:01:38,090 --> 00:01:44,119
cuz that's just it's not going to work

00:01:40,729 --> 00:01:46,009
out well but I think that you know the

00:01:44,119 --> 00:01:47,630
intersection of art and science as it's

00:01:46,009 --> 00:01:50,899
commonly referred to you get something

00:01:47,630 --> 00:01:52,280
really magical there I think when you

00:01:50,899 --> 00:01:53,390
get people who are really good at design

00:01:52,280 --> 00:01:54,740
and you put them if people are really

00:01:53,390 --> 00:01:56,840
good at like finding the science behind

00:01:54,740 --> 00:01:59,569
things you can get us get the best

00:01:56,840 --> 00:02:01,100
results so I like to focus on the

00:01:59,569 --> 00:02:03,709
science side of things the engineering

00:02:01,100 --> 00:02:05,869
components and let the the creatives

00:02:03,709 --> 00:02:10,700
focus on the art stuff and it's a pretty

00:02:05,869 --> 00:02:11,810
good team I find animation interesting

00:02:10,700 --> 00:02:15,400
because it's a really powerful

00:02:11,810 --> 00:02:17,780
communication tool I think that

00:02:15,400 --> 00:02:19,370
animation helps us connect the dots and

00:02:17,780 --> 00:02:23,150
that's kind of how our brains work as

00:02:19,370 --> 00:02:25,400
humans static images are pretty good and

00:02:23,150 --> 00:02:27,500
text is ok but when we see things see

00:02:25,400 --> 00:02:29,450
things move we can make sort of like a

00:02:27,500 --> 00:02:31,640
an intrinsic connection with it we can

00:02:29,450 --> 00:02:33,650
really understand what it's trying to

00:02:31,640 --> 00:02:34,849
communicate communicate to us

00:02:33,650 --> 00:02:39,319
it's important to get this kind of thing

00:02:34,849 --> 00:02:40,760
right so I've got this talk you know

00:02:39,319 --> 00:02:43,489
organizing the three sections

00:02:40,760 --> 00:02:47,629
methodology api's and tooling but let's

00:02:43,489 --> 00:02:50,689
take a look at methodology first now

00:02:47,629 --> 00:02:52,909
this is not an official way of looking

00:02:50,689 --> 00:02:54,920
at things is just how I've kind of come

00:02:52,909 --> 00:02:58,010
to see it but there's predefined in

00:02:54,920 --> 00:03:00,040
algorithmic animations in algorithmic

00:02:58,010 --> 00:03:02,030
animations kind of deal with not knowing

00:03:00,040 --> 00:03:04,489
necessarily what the next frame of the

00:03:02,030 --> 00:03:07,579
animation is going to be it's it can be

00:03:04,489 --> 00:03:09,139
unpredictable so it basically just every

00:03:07,579 --> 00:03:12,079
frame just takes a bunch of input

00:03:09,139 --> 00:03:13,549
variables and then renders those to the

00:03:12,079 --> 00:03:14,930
screen and you don't necessarily know

00:03:13,549 --> 00:03:17,659
what those input variables are going to

00:03:14,930 --> 00:03:20,150
be because those could come from user

00:03:17,659 --> 00:03:23,000
input or network activity or any number

00:03:20,150 --> 00:03:25,489
of things so this example this is like

00:03:23,000 --> 00:03:28,129
you know kinematics like physics and you

00:03:25,489 --> 00:03:30,519
know just responding to the changing

00:03:28,129 --> 00:03:33,200
state of a simulated environment or

00:03:30,519 --> 00:03:35,420
reactivity where again where it deals

00:03:33,200 --> 00:03:38,540
with like responding to events of some

00:03:35,420 --> 00:03:41,389
kind such as user input so that would be

00:03:38,540 --> 00:03:42,650
more of like more like a game so the

00:03:41,389 --> 00:03:46,690
video games would be more like

00:03:42,650 --> 00:03:46,690
algorithmic algorithmic animations

00:03:46,720 --> 00:03:50,870
predefined animations I think are a

00:03:48,620 --> 00:03:53,030
little bit easier and that's where you

00:03:50,870 --> 00:03:54,590
can you can mathematically determine

00:03:53,030 --> 00:03:57,680
what the entire state of the animation

00:03:54,590 --> 00:03:59,269
is from any given point and this is

00:03:57,680 --> 00:04:00,709
probably pretty familiar to people who

00:03:59,269 --> 00:04:03,169
are you know who might come from a flash

00:04:00,709 --> 00:04:05,239
background so tweening is just a way of

00:04:03,169 --> 00:04:06,979
defining a singular motion just from

00:04:05,239 --> 00:04:09,169
start to end with an easing formula and

00:04:06,979 --> 00:04:12,859
key frames are little more than just

00:04:09,169 --> 00:04:16,299
sequential tweens so a tween that begins

00:04:12,859 --> 00:04:18,739
as soon as the last one completed and

00:04:16,299 --> 00:04:21,739
one little one little last piece of

00:04:18,739 --> 00:04:23,090
methodology is easing and that's easing

00:04:21,739 --> 00:04:25,490
is important because nothing in reality

00:04:23,090 --> 00:04:28,220
works nothing in reality moves at a

00:04:25,490 --> 00:04:29,770
linear rate of speed there's always some

00:04:28,220 --> 00:04:32,659
sort of acceleration and deceleration

00:04:29,770 --> 00:04:34,310
sometimes intermixed but it's not you

00:04:32,659 --> 00:04:36,380
know it's not perfectly smooth all the

00:04:34,310 --> 00:04:38,870
way across there's a lot of using

00:04:36,380 --> 00:04:41,360
formulas out there these is just a

00:04:38,870 --> 00:04:42,560
screenshot of easing net which is a

00:04:41,360 --> 00:04:44,779
useful resource for this sort of thing

00:04:42,560 --> 00:04:46,969
there's no limit to the types of easing

00:04:44,779 --> 00:04:49,279
curves you can have but there's a

00:04:46,969 --> 00:04:50,929
a set of common curves that are there

00:04:49,279 --> 00:04:53,299
were many of which were developed by

00:04:50,929 --> 00:04:55,299
Robert Penner who is uh who was an Adobe

00:04:53,299 --> 00:04:57,559
engineer and now he's doing other stuff

00:04:55,299 --> 00:04:59,239
but you'll know them if you see them

00:04:57,559 --> 00:05:03,679
because they're all over the web they're

00:04:59,239 --> 00:05:05,449
become more or less standardized so

00:05:03,679 --> 00:05:07,399
that's methodology let's look at how we

00:05:05,449 --> 00:05:11,269
can actually use code to make this stuff

00:05:07,399 --> 00:05:13,369
real let's take a look at CSS so CSS

00:05:11,269 --> 00:05:14,629
really just gives us to AP is for for

00:05:13,369 --> 00:05:17,299
making things move in the web

00:05:14,629 --> 00:05:18,559
transitions and animations there's

00:05:17,299 --> 00:05:20,089
nothing new here but it's kind of

00:05:18,559 --> 00:05:24,259
interesting to look at how these really

00:05:20,089 --> 00:05:26,839
you know work together I see transitions

00:05:24,259 --> 00:05:28,579
as being this reactive approach to

00:05:26,839 --> 00:05:31,789
animating things and animations being

00:05:28,579 --> 00:05:33,619
active meaning that transitions they

00:05:31,789 --> 00:05:36,169
respond to a change in state in the Dom

00:05:33,619 --> 00:05:38,899
but animations create that change in the

00:05:36,169 --> 00:05:40,309
state so I've got a few of simple

00:05:38,899 --> 00:05:44,179
examples for anybody who might not be

00:05:40,309 --> 00:05:47,269
familiar with them but let's so here's a

00:05:44,179 --> 00:05:49,429
simple transition when I mouse over this

00:05:47,269 --> 00:05:50,929
it just flips around it's really simple

00:05:49,429 --> 00:05:53,149
and there's no JavaScript burning on

00:05:50,929 --> 00:05:58,369
this page but the way this works is that

00:05:53,149 --> 00:05:59,929
we have we have an h1 and a span and we

00:05:58,369 --> 00:06:02,419
have this hover class for the span that

00:05:59,929 --> 00:06:04,699
just changes the flips it around and

00:06:02,419 --> 00:06:07,099
changes the color and the magic part

00:06:04,699 --> 00:06:08,989
here is this line the transition which

00:06:07,099 --> 00:06:12,169
basically says for any property that

00:06:08,989 --> 00:06:14,300
changes just animate that that state

00:06:12,169 --> 00:06:16,069
change so this is a simple way of just

00:06:14,300 --> 00:06:18,709
getting hover effects or class changes

00:06:16,069 --> 00:06:19,939
or just you know making things move

00:06:18,709 --> 00:06:22,129
without having to have a whole lot of

00:06:19,939 --> 00:06:26,419
JavaScript infrastructure to make it

00:06:22,129 --> 00:06:29,539
happen on the other type of animation

00:06:26,419 --> 00:06:32,119
that CSS gives us is animations so or in

00:06:29,539 --> 00:06:33,619
other words keyframes this is more of

00:06:32,119 --> 00:06:35,869
the active thing that I was referring to

00:06:33,619 --> 00:06:38,209
so here's another hello world thing and

00:06:35,869 --> 00:06:40,339
it's just cycling its colors nothing too

00:06:38,209 --> 00:06:43,009
crazy but the thing is is that I didn't

00:06:40,339 --> 00:06:45,409
have to interact with it it just kind of

00:06:43,009 --> 00:06:48,289
goes and to look at the syntax for this

00:06:45,409 --> 00:06:51,259
thing let's see if I can it's a bit

00:06:48,289 --> 00:06:55,550
bigger for you unfortunately there's a

00:06:51,259 --> 00:06:57,650
there's repetition here because I

00:06:55,550 --> 00:06:58,970
this speck is still not totally

00:06:57,650 --> 00:07:01,610
standardized so everybody's got their

00:06:58,970 --> 00:07:03,380
own vendor prefix version of it so I at

00:07:01,610 --> 00:07:06,410
the moment you have to redefine the

00:07:03,380 --> 00:07:09,080
animation twice and set it up twice but

00:07:06,410 --> 00:07:10,970
as we can see here once we actually get

00:07:09,080 --> 00:07:12,950
to the meat of what this is doing it's

00:07:10,970 --> 00:07:15,650
just defining some keyframe States and

00:07:12,950 --> 00:07:17,690
then looping through it so again nothing

00:07:15,650 --> 00:07:22,760
too crazy but I didn't have to do

00:07:17,690 --> 00:07:25,210
anything to make this animation occur so

00:07:22,760 --> 00:07:28,270
that's CSS pretty simple stuff

00:07:25,210 --> 00:07:31,310
javascript is a little bit different

00:07:28,270 --> 00:07:33,500
whereas CSS gives us declarative ways to

00:07:31,310 --> 00:07:37,190
create animations with JavaScript it's a

00:07:33,500 --> 00:07:38,000
lot more imperative and understand what

00:07:37,190 --> 00:07:40,610
that means you have to kind of take a

00:07:38,000 --> 00:07:42,770
step back for a second and what

00:07:40,610 --> 00:07:44,030
animation is the way that we the reason

00:07:42,770 --> 00:07:45,200
that we see motion is because it's

00:07:44,030 --> 00:07:47,270
showing us a bunch of different frames

00:07:45,200 --> 00:07:51,710
really quickly making the illusion of

00:07:47,270 --> 00:07:53,840
motion and it's historically that that's

00:07:51,710 --> 00:07:55,040
done by scheduling you know a frame to

00:07:53,840 --> 00:07:58,250
be rendered at some point in the future

00:07:55,040 --> 00:07:59,690
many many times very quickly and that's

00:07:58,250 --> 00:08:01,790
what we have to do with JavaScript and

00:07:59,690 --> 00:08:03,500
the way we schedule those frames of the

00:08:01,790 --> 00:08:05,500
set timeout traditionally or newer

00:08:03,500 --> 00:08:07,700
browsers give us requestanimationframe

00:08:05,500 --> 00:08:09,260
set timeout is nice because it works

00:08:07,700 --> 00:08:11,530
literally everywhere it's that it's

00:08:09,260 --> 00:08:13,820
native to the language

00:08:11,530 --> 00:08:16,790
requestanimationframe isn't available in

00:08:13,820 --> 00:08:18,560
older browsers but the key difference is

00:08:16,790 --> 00:08:20,450
that with set timeout you can define

00:08:18,560 --> 00:08:22,820
when you want the weight when you want

00:08:20,450 --> 00:08:24,320
the callback function to execute or at

00:08:22,820 --> 00:08:27,170
least requested because it's not perfect

00:08:24,320 --> 00:08:29,420
where's requestanimationframe takes care

00:08:27,170 --> 00:08:32,180
of the timing for you the assumption by

00:08:29,420 --> 00:08:33,500
the browser is that you are using this

00:08:32,180 --> 00:08:36,650
call back inside of your request

00:08:33,500 --> 00:08:38,300
animation frame to render something to

00:08:36,650 --> 00:08:41,060
the screen of than animation hence the

00:08:38,300 --> 00:08:43,730
name so it optimizes to have that happen

00:08:41,060 --> 00:08:45,860
60 times a second because that's when

00:08:43,730 --> 00:08:47,900
things look really smooth browser

00:08:45,860 --> 00:08:49,790
optimizes for its first rendering

00:08:47,900 --> 00:08:51,860
pipeline as far as I can tell and it

00:08:49,790 --> 00:08:55,040
seems to work pretty well there's other

00:08:51,860 --> 00:08:57,230
advantages to it such as I think when

00:08:55,040 --> 00:09:01,850
you um switch tabs it goes back to like

00:08:57,230 --> 00:09:04,130
one second timeouts but generally in

00:09:01,850 --> 00:09:06,710
most cases requestanimationframe is the

00:09:04,130 --> 00:09:07,850
preferred way to schedule a function to

00:09:06,710 --> 00:09:09,569
be called for rendering stuff to the

00:09:07,850 --> 00:09:13,449
screen

00:09:09,569 --> 00:09:15,429
so we have CSS and we have JavaScript

00:09:13,449 --> 00:09:16,929
which one is better you know like

00:09:15,429 --> 00:09:18,970
clearly one must be better than the

00:09:16,929 --> 00:09:21,249
other we want to use one and not the

00:09:18,970 --> 00:09:23,769
other but I don't really think that this

00:09:21,249 --> 00:09:25,480
is the case I think that these two

00:09:23,769 --> 00:09:28,089
languages languages work better together

00:09:25,480 --> 00:09:34,619
than they do a part I think that CSS

00:09:28,089 --> 00:09:37,119
loves JavaScript should get married and

00:09:34,619 --> 00:09:38,920
when I say that you know these languages

00:09:37,119 --> 00:09:41,559
work better together that's because you

00:09:38,920 --> 00:09:44,589
can have hybrid solutions because they

00:09:41,559 --> 00:09:47,079
each have strengths CSS it's understood

00:09:44,589 --> 00:09:50,110
by the browser so the browser can can

00:09:47,079 --> 00:09:52,989
can you know literally and theoretically

00:09:50,110 --> 00:09:57,309
do things to optimize a CSS CSS

00:09:52,989 --> 00:10:00,610
optimization or CSS animation JavaScript

00:09:57,309 --> 00:10:02,889
might not be as optimized olinsky's but

00:10:00,610 --> 00:10:04,389
it is more flexible so we can kind of

00:10:02,889 --> 00:10:08,170
get the boasts of the best of both of

00:10:04,389 --> 00:10:10,059
these world's easiest way to do this is

00:10:08,170 --> 00:10:12,220
to trigger CSS transitions with

00:10:10,059 --> 00:10:14,470
javascript now as I mentioned before

00:10:12,220 --> 00:10:16,269
transitions just respond to a change in

00:10:14,470 --> 00:10:17,679
state I showed you an example where i

00:10:16,269 --> 00:10:20,139
hovered over the element and it flipped

00:10:17,679 --> 00:10:22,299
around but you could do a lot of things

00:10:20,139 --> 00:10:24,670
with this you could add an inline state

00:10:22,299 --> 00:10:27,699
or an inline style to change the state

00:10:24,670 --> 00:10:29,619
you could add a class which has has a

00:10:27,699 --> 00:10:31,600
similar effect and this is actually

00:10:29,619 --> 00:10:35,079
pretty powerful so I've got another

00:10:31,600 --> 00:10:37,929
example here how this works so another

00:10:35,079 --> 00:10:41,410
really simple hello world example now

00:10:37,929 --> 00:10:43,299
I've got HTML CSS and JavaScript and on

00:10:41,410 --> 00:10:45,429
this CSS I've just got the h1 of the

00:10:43,299 --> 00:10:47,350
grow class but we can see that the grill

00:10:45,429 --> 00:10:51,610
class isn't down here but I'm actually

00:10:47,350 --> 00:10:54,100
adding it with JavaScript here so

00:10:51,610 --> 00:10:56,679
nothing too crazy but the point is is

00:10:54,100 --> 00:10:59,589
that I'm controlling how this animation

00:10:56,679 --> 00:11:00,970
with JavaScript I could any at any class

00:10:59,589 --> 00:11:04,209
and it would change the state however I

00:11:00,970 --> 00:11:06,819
want I don't have to do any JavaScript

00:11:04,209 --> 00:11:08,379
logic to handle animation or a run loop

00:11:06,819 --> 00:11:10,600
or anything like that the browser

00:11:08,379 --> 00:11:13,059
handles it for me so it's super

00:11:10,600 --> 00:11:15,160
convenient it's a great way of kind of

00:11:13,059 --> 00:11:19,119
separating you know your state logic

00:11:15,160 --> 00:11:21,399
from your actual from your views from

00:11:19,119 --> 00:11:22,209
your view layer and this is also really

00:11:21,399 --> 00:11:24,910
great because it's

00:11:22,209 --> 00:11:28,480
an excellent graceful degradation a kind

00:11:24,910 --> 00:11:30,129
of pattern meaning that if Iran this in

00:11:28,480 --> 00:11:32,439
a browser that did not support CSS

00:11:30,129 --> 00:11:35,110
transitions the user would just see both

00:11:32,439 --> 00:11:37,300
states which for most things is probably

00:11:35,110 --> 00:11:40,959
okay for something like this it's kind

00:11:37,300 --> 00:11:42,730
of more of a a it just kind of enhances

00:11:40,959 --> 00:11:45,069
the experience it's not that content in

00:11:42,730 --> 00:11:46,540
and of itself if you need a certain

00:11:45,069 --> 00:11:48,939
animation that is critical to your

00:11:46,540 --> 00:11:51,579
experience this wouldn't work but in

00:11:48,939 --> 00:11:52,990
most cases animations are more

00:11:51,579 --> 00:11:58,809
enhancements rather than core

00:11:52,990 --> 00:12:00,610
functionality typically so a more

00:11:58,809 --> 00:12:02,679
advanced approach is to create CSS

00:12:00,610 --> 00:12:04,569
animations with JavaScript there's a

00:12:02,679 --> 00:12:06,009
couple a couple of ways to do this and I

00:12:04,569 --> 00:12:08,170
don't see many people actually using

00:12:06,009 --> 00:12:10,629
this in the real world either because it

00:12:08,170 --> 00:12:12,249
maybe doesn't work which I haven't heard

00:12:10,629 --> 00:12:15,220
anything because I just haven't seen

00:12:12,249 --> 00:12:17,519
much feedback on it or because people

00:12:15,220 --> 00:12:21,040
just don't know about it but there's a

00:12:17,519 --> 00:12:24,490
so when I showed you the CSS animation

00:12:21,040 --> 00:12:26,769
example there was a that there were

00:12:24,490 --> 00:12:28,689
there's just a bunch of keyframes and

00:12:26,769 --> 00:12:33,100
there's no limit the amount of keyframes

00:12:28,689 --> 00:12:35,470
you can have in a CSS animation and you

00:12:33,100 --> 00:12:38,769
there's nothing dictating that it has to

00:12:35,470 --> 00:12:41,619
be hard-coded into your into your into

00:12:38,769 --> 00:12:43,990
your style sheet so you could use

00:12:41,619 --> 00:12:46,179
JavaScript for example to create a whole

00:12:43,990 --> 00:12:49,420
bunch of style rules or he uses CSS

00:12:46,179 --> 00:12:52,089
object model to to create it through a

00:12:49,420 --> 00:12:54,129
more pure approach James long was

00:12:52,089 --> 00:12:57,759
another speaker here has a great project

00:12:54,129 --> 00:12:59,470
I believe it's called CSS animations but

00:12:57,759 --> 00:13:01,660
it's on github in it takes the CSS

00:12:59,470 --> 00:13:03,399
object model approach but there's also

00:13:01,660 --> 00:13:06,610
other ways to do it where you just

00:13:03,399 --> 00:13:08,709
create this giant string of CSS text and

00:13:06,610 --> 00:13:10,629
injected into the Dom I've got a little

00:13:08,709 --> 00:13:12,670
blog post here that explains it in more

00:13:10,629 --> 00:13:16,299
detail but I've got an example so we can

00:13:12,670 --> 00:13:17,769
just kind of see how it looks actually I

00:13:16,299 --> 00:13:22,209
think I've got this opening chrome where

00:13:17,769 --> 00:13:24,009
it's easier to see anyways here we go so

00:13:22,209 --> 00:13:26,170
this is using a library that I wrote

00:13:24,009 --> 00:13:27,670
called recap II and this just for

00:13:26,170 --> 00:13:30,759
demonstration purposes just to show how

00:13:27,670 --> 00:13:32,139
it works but we have a we have three

00:13:30,759 --> 00:13:33,999
buttons up here one for stopping the

00:13:32,139 --> 00:13:35,250
animation and one for running in

00:13:33,999 --> 00:13:38,970
JavaScript and in

00:13:35,250 --> 00:13:41,370
CSS so period is in JavaScript nothing

00:13:38,970 --> 00:13:44,820
too crazy and here's the exact same

00:13:41,370 --> 00:13:47,670
thing in CSS and it looks the same which

00:13:44,820 --> 00:13:50,670
is kind of the point but the idea here

00:13:47,670 --> 00:13:56,130
is that the JavaScript approach is doing

00:13:50,670 --> 00:13:58,470
inline style changes so source map but

00:13:56,130 --> 00:14:00,500
with the CSS we're actually creating a

00:13:58,470 --> 00:14:06,240
style element and injecting into the Dom

00:14:00,500 --> 00:14:07,980
so if we take a look at the head what we

00:14:06,240 --> 00:14:10,680
kept you is doing in which is what this

00:14:07,980 --> 00:14:13,050
this approach is all about is creating a

00:14:10,680 --> 00:14:17,340
giant CSS string and injecting it into

00:14:13,050 --> 00:14:19,830
the DOM and its pretty long but it seems

00:14:17,340 --> 00:14:21,240
to work pretty well and you can't really

00:14:19,830 --> 00:14:22,530
see a much of a difference in

00:14:21,240 --> 00:14:25,320
performance on a machine like this

00:14:22,530 --> 00:14:26,730
because this is reasonably quick but you

00:14:25,320 --> 00:14:28,320
can see a big difference on mobile

00:14:26,730 --> 00:14:30,450
browsers when I look at this on my

00:14:28,320 --> 00:14:35,130
iPhone it looks way smoother when I'm

00:14:30,450 --> 00:14:37,260
rendering it vs CSS so what good what

00:14:35,130 --> 00:14:39,030
happens when I remove or when I stop

00:14:37,260 --> 00:14:42,750
this animation is that it just removes

00:14:39,030 --> 00:14:45,720
that style element so it's kind of cool

00:14:42,750 --> 00:14:47,730
trick who wouldn't work everywhere big

00:14:45,720 --> 00:14:49,620
caveat to this approach is that it can

00:14:47,730 --> 00:14:52,110
take some time to render the giant CSS

00:14:49,620 --> 00:14:54,030
string so you have to keep that in mind

00:14:52,110 --> 00:14:55,980
especially if it's for a more intricate

00:14:54,030 --> 00:14:58,130
or longer animation may not be

00:14:55,980 --> 00:15:01,860
appropriate but if there's certain

00:14:58,130 --> 00:15:04,770
there's a certain animation or emotion

00:15:01,860 --> 00:15:07,200
that the CSS spec doesn't really

00:15:04,770 --> 00:15:08,940
facilitate easily natively you can

00:15:07,200 --> 00:15:11,970
create that animation with JavaScript

00:15:08,940 --> 00:15:18,330
and then more or less export that to CSS

00:15:11,970 --> 00:15:20,310
for better rendering so let's stive into

00:15:18,330 --> 00:15:21,870
performance for a second and I can only

00:15:20,310 --> 00:15:25,250
kind of get into high level details of

00:15:21,870 --> 00:15:28,650
this because it's a really wide subject

00:15:25,250 --> 00:15:30,930
and it can really it could span its own

00:15:28,650 --> 00:15:33,930
talk or it can in fact even span its own

00:15:30,930 --> 00:15:35,610
conference and it does actually things a

00:15:33,930 --> 00:15:37,320
few conferences that are all about you

00:15:35,610 --> 00:15:39,570
know web performance so I'm just going

00:15:37,320 --> 00:15:43,459
to cover the high-level details for

00:15:39,570 --> 00:15:46,610
right now so the goal with animations

00:15:43,459 --> 00:15:49,110
always is to hit 60 frames per second

00:15:46,610 --> 00:15:50,640
this is more or less the limit

00:15:49,110 --> 00:15:53,130
of what the human eye can perceive as

00:15:50,640 --> 00:15:55,740
perfect motion we can't really see

00:15:53,130 --> 00:15:56,820
anything beyond 60 frames per second but

00:15:55,740 --> 00:16:00,630
a lot of people can start to see

00:15:56,820 --> 00:16:03,209
degradation of of the motion when you

00:16:00,630 --> 00:16:04,019
start getting below that like 50 or 40

00:16:03,209 --> 00:16:07,170
and you can definitely see a difference

00:16:04,019 --> 00:16:09,060
at 30 or below so we want to hit 60

00:16:07,170 --> 00:16:13,529
frames per second as much as we possibly

00:16:09,060 --> 00:16:16,680
can Rachel neighbors has a great quote

00:16:13,529 --> 00:16:18,360
on this she is a an animator turned web

00:16:16,680 --> 00:16:21,959
developer now she just kind of does both

00:16:18,360 --> 00:16:24,620
like web animation like for various

00:16:21,959 --> 00:16:27,180
interactive things and she says that

00:16:24,620 --> 00:16:29,370
jank killed the precious illusion of

00:16:27,180 --> 00:16:31,110
life and this is from her recent a list

00:16:29,370 --> 00:16:32,940
apart article which is really good and I

00:16:31,110 --> 00:16:37,100
suggest you read it it's a link which

00:16:32,940 --> 00:16:39,480
I'll share with you later but this is

00:16:37,100 --> 00:16:42,720
this is why animation is important is

00:16:39,480 --> 00:16:46,050
because we kind of relate to it because

00:16:42,720 --> 00:16:47,579
you know as I had mentioned we we kind

00:16:46,050 --> 00:16:50,490
of connect dots that's how our brains

00:16:47,579 --> 00:16:53,130
work and when there is you know

00:16:50,490 --> 00:16:56,149
sluggishness or choppiness in that

00:16:53,130 --> 00:16:59,279
motion it kind of it breaks our

00:16:56,149 --> 00:17:01,170
suspension of disbelief it it ruins the

00:16:59,279 --> 00:17:03,329
experience and there's a huge movement

00:17:01,170 --> 00:17:06,390
in the community right now to try and

00:17:03,329 --> 00:17:07,949
you know to get rid of jank this is the

00:17:06,390 --> 00:17:09,480
the term for it it basically just means

00:17:07,949 --> 00:17:14,069
you know dropping your frames

00:17:09,480 --> 00:17:15,689
sluggishness the best thing that we can

00:17:14,069 --> 00:17:18,030
do right now is web developers is to

00:17:15,689 --> 00:17:21,780
leverage the GPU this is something

00:17:18,030 --> 00:17:25,740
that's relatively new to to us as web

00:17:21,780 --> 00:17:28,140
developers it's only newer api's that

00:17:25,740 --> 00:17:29,580
allow us to do this so now that it's

00:17:28,140 --> 00:17:32,880
here we should start taking advantage of

00:17:29,580 --> 00:17:34,919
it as much as we possibly can and using

00:17:32,880 --> 00:17:36,270
the GPU is important because it's just

00:17:34,919 --> 00:17:39,210
better for rendering things to the

00:17:36,270 --> 00:17:40,559
screen then the CPU is that's what is

00:17:39,210 --> 00:17:42,450
therefore that's why I was created to

00:17:40,559 --> 00:17:45,360
you know put stuff on the screen so

00:17:42,450 --> 00:17:49,020
let's use our computers components for

00:17:45,360 --> 00:17:51,120
what they're meant to do now a lot of

00:17:49,020 --> 00:17:54,360
people like to use this hack where that

00:17:51,120 --> 00:17:56,070
it just magically sends you know

00:17:54,360 --> 00:17:58,230
animations over to the GPU to be

00:17:56,070 --> 00:18:01,530
rendered and that is to put translate Z

00:17:58,230 --> 00:18:02,850
0 on something and that what this does

00:18:01,530 --> 00:18:05,640
is it creates its own compile

00:18:02,850 --> 00:18:07,350
layer that then gets sent over to the

00:18:05,640 --> 00:18:10,830
browser and it just magically animates

00:18:07,350 --> 00:18:12,750
faster and everybody's happy but

00:18:10,830 --> 00:18:15,750
unfortunately I've got some bad news for

00:18:12,750 --> 00:18:17,070
you it's not quite this simple this

00:18:15,750 --> 00:18:20,040
isn't something you really wanted to

00:18:17,070 --> 00:18:23,090
pend on primarily because it's an

00:18:20,040 --> 00:18:27,810
implementation detail of some browsers

00:18:23,090 --> 00:18:29,730
specifically blink and WebKit and it's

00:18:27,810 --> 00:18:31,290
not standardized and because it's an

00:18:29,730 --> 00:18:34,020
implementation detail it's really just a

00:18:31,290 --> 00:18:36,270
byproduct of how the how the browser

00:18:34,020 --> 00:18:38,940
happens to work it could change it

00:18:36,270 --> 00:18:41,880
anytime so you don't want to just put

00:18:38,940 --> 00:18:44,420
translate Z 0 and just move on and call

00:18:41,880 --> 00:18:46,590
it a day it's not that simple

00:18:44,420 --> 00:18:51,090
additionally when you start putting

00:18:46,590 --> 00:18:53,430
everything on the GPU for rendering you

00:18:51,090 --> 00:18:55,290
exhaust your video RAM which there's not

00:18:53,430 --> 00:18:58,110
necessarily necessarily a lot of

00:18:55,290 --> 00:19:00,720
especially on mobile so you have to pick

00:18:58,110 --> 00:19:03,330
and choose which things you want to GPU

00:19:00,720 --> 00:19:04,920
optimize whenever possible and which

00:19:03,330 --> 00:19:10,170
ones you just want to like let the

00:19:04,920 --> 00:19:12,870
browser handle it the other big part of

00:19:10,170 --> 00:19:15,840
this is that you want to limit your GPU

00:19:12,870 --> 00:19:18,750
texture uploads and this is where it

00:19:15,840 --> 00:19:20,550
gets kind of confusing so the GPU is

00:19:18,750 --> 00:19:24,300
really fast for rendering things to the

00:19:20,550 --> 00:19:26,100
screen the CPU not so much but the

00:19:24,300 --> 00:19:28,560
actual communication pipeline between

00:19:26,100 --> 00:19:30,960
the CPU and the GPU is relatively slow

00:19:28,560 --> 00:19:33,240
so if we're spending a lot of time

00:19:30,960 --> 00:19:35,100
sending data from the cpu to the GPU

00:19:33,240 --> 00:19:37,020
then we're going to lose many of the

00:19:35,100 --> 00:19:39,270
performance benefits of using the GPU to

00:19:37,020 --> 00:19:45,060
render stuff so how can we get around

00:19:39,270 --> 00:19:46,890
this we can if we limit the types of

00:19:45,060 --> 00:19:50,340
properties we animate we can avoid

00:19:46,890 --> 00:19:51,870
sending unnecessary data to the GPU the

00:19:50,340 --> 00:19:54,180
way this works is a little high level is

00:19:51,870 --> 00:19:56,400
that for the GPU to do anything you have

00:19:54,180 --> 00:19:59,880
to render a bitmap and then send that

00:19:56,400 --> 00:20:02,070
bitmap data over the GPU but when you

00:19:59,880 --> 00:20:04,470
when you animate opacity and transform

00:20:02,070 --> 00:20:06,300
you don't have to rerender that that

00:20:04,470 --> 00:20:08,970
bitmap the browser can optimize for that

00:20:06,300 --> 00:20:11,670
it just recompose its things in the

00:20:08,970 --> 00:20:14,250
route up for the GPU so it sends much

00:20:11,670 --> 00:20:15,350
less data across the wire so the GV you

00:20:14,250 --> 00:20:18,289
can actually animate the

00:20:15,350 --> 00:20:19,520
stuff so what this means is that if

00:20:18,289 --> 00:20:20,870
you're animating something where you're

00:20:19,520 --> 00:20:24,530
changing the height or the width or the

00:20:20,870 --> 00:20:28,100
background color you can't GPU optimize

00:20:24,530 --> 00:20:30,350
that in any meaningful way so whenever

00:20:28,100 --> 00:20:32,000
possible try and work your animations

00:20:30,350 --> 00:20:34,039
around so that your only animating

00:20:32,000 --> 00:20:37,520
opacity and transform and you'll get

00:20:34,039 --> 00:20:40,100
much better frame rates this link

00:20:37,520 --> 00:20:41,419
actually down here really helps to

00:20:40,100 --> 00:20:45,080
explain how this stuff works in great

00:20:41,419 --> 00:20:46,640
detail it's an html5 rocks article and

00:20:45,080 --> 00:20:52,700
definitely check this out a little bit

00:20:46,640 --> 00:20:54,320
later so it's very complex and I kind of

00:20:52,700 --> 00:20:56,000
just skimmed the surface of you know

00:20:54,320 --> 00:20:58,190
performance when it comes to animation

00:20:56,000 --> 00:21:00,650
but the important thing thing to note

00:20:58,190 --> 00:21:02,960
here is that there's no one good way to

00:21:00,650 --> 00:21:05,630
do this unfortunately a lot of people

00:21:02,960 --> 00:21:07,460
just want one magical solution the more

00:21:05,630 --> 00:21:10,549
they don't to consider all of the you

00:21:07,460 --> 00:21:12,740
know the subtle subtle details of the

00:21:10,549 --> 00:21:14,480
whole thing but we're at a state where

00:21:12,740 --> 00:21:16,700
you can't just run with one solution

00:21:14,480 --> 00:21:19,340
call it a day you kind of have to play

00:21:16,700 --> 00:21:21,200
with it some animations work better with

00:21:19,340 --> 00:21:24,650
JavaScript some animations work better

00:21:21,200 --> 00:21:26,870
as CSS and it also depends on your

00:21:24,650 --> 00:21:30,520
operating system your browser your

00:21:26,870 --> 00:21:33,470
hardware a lot of stuff so don't just

00:21:30,520 --> 00:21:35,960
dogmatically stick to one approach CSS

00:21:33,470 --> 00:21:36,919
or JavaScript or one tool set you just

00:21:35,960 --> 00:21:39,919
have to play with it on a case-by-case

00:21:36,919 --> 00:21:42,650
basis and you know determine which

00:21:39,919 --> 00:21:45,230
patterns work for you also there's other

00:21:42,650 --> 00:21:48,950
issues beyond just performance that you

00:21:45,230 --> 00:21:51,230
have to consider like CSS is great for

00:21:48,950 --> 00:21:53,120
simpler animations or little you I

00:21:51,230 --> 00:21:55,280
enhancement interactions but it totally

00:21:53,120 --> 00:21:56,630
falls apart for workflow type situations

00:21:55,280 --> 00:21:58,250
meaning that you can't necessarily

00:21:56,630 --> 00:22:00,020
change where the playhead is in the

00:21:58,250 --> 00:22:02,299
timeline and a lot of browsers have

00:22:00,020 --> 00:22:05,270
issues with timing so that if you have a

00:22:02,299 --> 00:22:07,520
bunch of CSS like a CSS animation with a

00:22:05,270 --> 00:22:10,010
bunch of divs for instance animating in

00:22:07,520 --> 00:22:11,419
a very specific way there's timing

00:22:10,010 --> 00:22:15,470
issues so they don't actually line up

00:22:11,419 --> 00:22:17,360
correctly Jack Doyle of green sock green

00:22:15,470 --> 00:22:21,230
sock is a JavaScript animation and also

00:22:17,360 --> 00:22:23,090
a flash animation tool he's done a ton

00:22:21,230 --> 00:22:25,490
of research on this so if you go to

00:22:23,090 --> 00:22:29,080
green socom there he's got plenty of

00:22:25,490 --> 00:22:31,180
articles on how this stuff breaks down

00:22:29,080 --> 00:22:33,580
and it really is just a mixed bag some

00:22:31,180 --> 00:22:37,180
things CSS is better at other things

00:22:33,580 --> 00:22:38,500
javascript is better at work it's kind

00:22:37,180 --> 00:22:41,890
of a weird state in the industry right

00:22:38,500 --> 00:22:43,390
now so I suggest that having that you

00:22:41,890 --> 00:22:45,130
try and optimize to have one way of

00:22:43,390 --> 00:22:47,230
defining an animation and then

00:22:45,130 --> 00:22:49,930
determining whether you whether you

00:22:47,230 --> 00:22:52,030
animate a CSS or JavaScript or you know

00:22:49,930 --> 00:22:54,070
the implementation details of it just

00:22:52,030 --> 00:22:58,780
have one singular way of defining how an

00:22:54,070 --> 00:23:00,160
animation should work now this is my

00:22:58,780 --> 00:23:01,780
favorite part of this presentation and

00:23:00,160 --> 00:23:04,540
we're going to talk about graphical

00:23:01,780 --> 00:23:06,550
editors and graphical editors are

00:23:04,540 --> 00:23:08,800
interesting to me because I think that

00:23:06,550 --> 00:23:11,320
code is an incredibly ineffective

00:23:08,800 --> 00:23:12,430
animation tool I think that when people

00:23:11,320 --> 00:23:13,840
want to animate a lot of things it's

00:23:12,430 --> 00:23:16,300
code we're just kind of looking at the

00:23:13,840 --> 00:23:17,980
problem wrong and that's because using

00:23:16,300 --> 00:23:20,350
code damn it to make an animation is

00:23:17,980 --> 00:23:22,060
like using poetry to draw painting it

00:23:20,350 --> 00:23:23,410
just doesn't make any sense you don't

00:23:22,060 --> 00:23:25,680
want to describe how something should

00:23:23,410 --> 00:23:28,000
look you want to manipulate and like

00:23:25,680 --> 00:23:31,360
visually directly manipulate how it's

00:23:28,000 --> 00:23:33,220
going to be so I think that we need to

00:23:31,360 --> 00:23:35,770
start looking more towards visual

00:23:33,220 --> 00:23:38,020
editors and less at code for actually

00:23:35,770 --> 00:23:40,150
animating stuff kotas how things get

00:23:38,020 --> 00:23:42,670
implemented but it doesn't make sense to

00:23:40,150 --> 00:23:46,990
actually try and create animations in

00:23:42,670 --> 00:23:48,610
this way this is something where like

00:23:46,990 --> 00:23:52,600
we're still trying to catch up the flash

00:23:48,610 --> 00:23:53,860
with like they the corn the market for

00:23:52,600 --> 00:23:55,600
years because they had an incredibly

00:23:53,860 --> 00:23:58,390
powerful tool the flash authoring

00:23:55,600 --> 00:24:01,210
environment for creating animations and

00:23:58,390 --> 00:24:03,220
it made sense to designers designers are

00:24:01,210 --> 00:24:06,660
the ones who make animations so we need

00:24:03,220 --> 00:24:06,660
to optimize for their skill sets

00:24:07,020 --> 00:24:11,710
fortunately things are getting better in

00:24:09,580 --> 00:24:13,000
this regard well there's actually a

00:24:11,710 --> 00:24:15,940
bunch more tools than I've got listed

00:24:13,000 --> 00:24:19,900
here 1recent the tool that I found is

00:24:15,940 --> 00:24:22,690
called animatronic kind of resembles

00:24:19,900 --> 00:24:25,060
flash the overall environment and it's

00:24:22,690 --> 00:24:26,760
free I don't know how they're making

00:24:25,060 --> 00:24:30,970
money because it's not open source but

00:24:26,760 --> 00:24:32,530
it's cool so check it out edge is pretty

00:24:30,970 --> 00:24:33,880
cool because it because it's from Adobe

00:24:32,530 --> 00:24:36,010
therefore they've kind of learned from

00:24:33,880 --> 00:24:39,280
their own I'm grown past and I've got

00:24:36,010 --> 00:24:41,650
flash on here because as a very recently

00:24:39,280 --> 00:24:42,400
flash can actually export its animations

00:24:41,650 --> 00:24:45,220
to

00:24:42,400 --> 00:24:47,230
html5 canvas so if you're used to a

00:24:45,220 --> 00:24:49,150
flesh workflow for creating animations

00:24:47,230 --> 00:24:50,590
you don't have to give up the toolset

00:24:49,150 --> 00:24:53,980
that you know and love if that's your

00:24:50,590 --> 00:24:56,230
thing so definitely check that out and

00:24:53,980 --> 00:24:58,420
I've got another tool on here which is

00:24:56,230 --> 00:25:00,940
one that I wrote called stylee and this

00:24:58,420 --> 00:25:04,630
is kind of a it's a different take on

00:25:00,940 --> 00:25:06,070
animation because I because I'm not an

00:25:04,630 --> 00:25:07,540
animator I just want to put something on

00:25:06,070 --> 00:25:09,610
the screen and get it to move around I

00:25:07,540 --> 00:25:12,730
wanted something just simpler to work

00:25:09,610 --> 00:25:15,850
with so I'll just give you a quick demo

00:25:12,730 --> 00:25:18,190
of that just running that locally here

00:25:15,850 --> 00:25:20,920
but the idea is that it's just a tool

00:25:18,190 --> 00:25:23,470
for creating CSS keyframes it's not a

00:25:20,920 --> 00:25:30,610
full animation sweet you just add some

00:25:23,470 --> 00:25:34,630
keyframes move around then oops maybe

00:25:30,610 --> 00:25:39,970
change the CSS 3d rotation of it a

00:25:34,630 --> 00:25:42,130
little bit oops don't go back my browser

00:25:39,970 --> 00:25:43,300
so you can move it around at an easing

00:25:42,130 --> 00:25:47,170
formula because I said that's an

00:25:43,300 --> 00:25:49,870
important part of animations maybe make

00:25:47,170 --> 00:25:54,610
a custom using formula so you can tweak

00:25:49,870 --> 00:25:56,890
the curve as you as you need it so it's

00:25:54,610 --> 00:25:59,140
just this is meant to just get something

00:25:56,890 --> 00:26:01,690
on the screen in just like get it

00:25:59,140 --> 00:26:02,890
working in a few minutes get the

00:26:01,690 --> 00:26:05,650
original motivation for this is to

00:26:02,890 --> 00:26:08,170
create CSS animations so if you click

00:26:05,650 --> 00:26:10,150
the CSS tab here then you can see that

00:26:08,170 --> 00:26:12,730
it's creating all the CSS which you

00:26:10,150 --> 00:26:14,370
could then copy and paste into a style

00:26:12,730 --> 00:26:17,320
sheet and have the exact same animation

00:26:14,370 --> 00:26:19,270
so it's just a it's a simpler way of

00:26:17,320 --> 00:26:23,290
doing what I thought was kind of painful

00:26:19,270 --> 00:26:25,390
because I do not like the CSS animation

00:26:23,290 --> 00:26:27,100
syntax the keyframes and I just wanted

00:26:25,390 --> 00:26:33,670
to get something on the screen and

00:26:27,100 --> 00:26:36,880
moving around so to wrap things up we've

00:26:33,670 --> 00:26:39,640
got methodology you know algorithmic and

00:26:36,880 --> 00:26:42,850
predefined animations with a you know

00:26:39,640 --> 00:26:46,300
twinging keyframing api's through CSS

00:26:42,850 --> 00:26:48,070
and JavaScript so we have this we have

00:26:46,300 --> 00:26:51,460
declarative and imperative ways of doing

00:26:48,070 --> 00:26:53,890
things and tooling where we have more

00:26:51,460 --> 00:26:55,210
graphical tools and i think that the

00:26:53,890 --> 00:26:55,610
tooling thing is really important

00:26:55,210 --> 00:26:57,679
because

00:26:55,610 --> 00:27:00,080
as I said you know the people who really

00:26:57,679 --> 00:27:01,700
make animations are designers does not

00:27:00,080 --> 00:27:04,130
say that we can't make animations but

00:27:01,700 --> 00:27:07,429
you know we're developers and developers

00:27:04,130 --> 00:27:09,710
create you know engineering solutions to

00:27:07,429 --> 00:27:11,600
engineering problems that's not to say

00:27:09,710 --> 00:27:12,890
you couldn't be both kind of both of

00:27:11,600 --> 00:27:15,309
those people at the same time but

00:27:12,890 --> 00:27:17,870
there's a difference in that skill set

00:27:15,309 --> 00:27:21,110
and I think it's really important also

00:27:17,870 --> 00:27:22,670
to have a good open source tools because

00:27:21,110 --> 00:27:24,200
we the problem with it with with Adobe

00:27:22,670 --> 00:27:26,660
where they made this this industry

00:27:24,200 --> 00:27:28,970
leading industry defining tool but is

00:27:26,660 --> 00:27:31,700
locked away no and on their on their

00:27:28,970 --> 00:27:33,169
machines so I think it's important for

00:27:31,700 --> 00:27:34,910
the community to invest for the

00:27:33,169 --> 00:27:37,190
community to invest in making open

00:27:34,910 --> 00:27:39,559
source either similar tools or competing

00:27:37,190 --> 00:27:41,660
tools or whatever so that we can you

00:27:39,559 --> 00:27:44,500
know make the industry-leading tool

00:27:41,660 --> 00:27:49,360
shared by all in a community effort in

00:27:44,500 --> 00:27:49,360

YouTube URL: https://www.youtube.com/watch?v=u4uNz-Z3Rd8


