Title: MountainWest JavaScript 2014 - You should be using Twitter's Flight framework.
Publication date: 2020-01-24
Playlist: MountainWest JavaScript 2014
Description: 
	By Kassandra Perch

Twitter's Flight framework is unobtrusive, powerful, and allows you to structure your client-side javascript more efficiently and makes it more manageable and testable. It gives you tools such as a modular system, event-based architecture, and functional mixins- all with tiny overhead. It even integrates easily with non-flight code, allowing for a piecemeal conversion of old code to a Flight-based system. This talk will go over Flight and how you can start using it, today, to create great javascript applications.

Help us caption & translate this video!

http://amara.org/v/FG25/
Captions: 
	00:00:25,250 --> 00:00:29,640
so if you want to follow along there's a

00:00:27,420 --> 00:00:32,160
URL here that will lead to the slides so

00:00:29,640 --> 00:00:34,140
there is some code and again a link to

00:00:32,160 --> 00:00:36,510
the github page for that code so if

00:00:34,140 --> 00:00:38,760
you'd like to follow along while you

00:00:36,510 --> 00:00:40,470
guys are typing in that URL and I want

00:00:38,760 --> 00:00:42,059
to tell you my Mountain West Gia's story

00:00:40,470 --> 00:00:44,070
that happened this morning um I

00:00:42,059 --> 00:00:46,500
mentioned at dinner that I've never seen

00:00:44,070 --> 00:00:48,570
snow i was born in phoenix and raised in

00:00:46,500 --> 00:00:50,280
austin so I've never seen anything more

00:00:48,570 --> 00:00:52,530
than like sleet about that thick well

00:00:50,280 --> 00:00:53,640
this morning Ryan Florence was pinging

00:00:52,530 --> 00:00:55,440
me on Twitter he's like where are you

00:00:53,640 --> 00:00:57,930
sitting and all of a sudden he shows up

00:00:55,440 --> 00:00:59,760
with a bag of snow okay I've had that

00:00:57,930 --> 00:01:01,530
big piece of snow so I got to like run

00:00:59,760 --> 00:01:03,870
it through my fingers and it's

00:01:01,530 --> 00:01:05,309
definitely weird but um yeah that's my

00:01:03,870 --> 00:01:09,560
Mountain West yes oh sorry is I got to

00:01:05,309 --> 00:01:09,560
see my first bit of snow thank you in

00:01:10,100 --> 00:01:19,039
yeah so let me put this into

00:01:13,550 --> 00:01:24,990
presentation mode and we'll get started

00:01:19,039 --> 00:01:27,840
all right close enough so um you should

00:01:24,990 --> 00:01:30,210
be using flights and I know what you're

00:01:27,840 --> 00:01:31,080
going to say first is what is it and

00:01:30,210 --> 00:01:32,610
don't worry about the text being

00:01:31,080 --> 00:01:35,880
unreadable it's kind of unreadable for a

00:01:32,610 --> 00:01:38,100
reason the first sentence of flight

00:01:35,880 --> 00:01:39,479
JSE's website says it's a framework and

00:01:38,100 --> 00:01:40,770
that's usually where people stop

00:01:39,479 --> 00:01:43,979
listening to me they kind of glaze over

00:01:40,770 --> 00:01:46,950
and the reason for that is there already

00:01:43,979 --> 00:01:49,380
a fan of some other framework like react

00:01:46,950 --> 00:01:51,780
or angular or a lot of ember fans I've

00:01:49,380 --> 00:01:55,770
noticed here at this conference and I

00:01:51,780 --> 00:01:59,520
think and um oh what the heck just

00:01:55,770 --> 00:02:02,369
happened huh all right let's try that

00:01:59,520 --> 00:02:04,350
again all right so heads up these next

00:02:02,369 --> 00:02:06,030
few slides show my opinion and you're

00:02:04,350 --> 00:02:08,820
gonna want to argue with me and that's

00:02:06,030 --> 00:02:10,649
fine just not right now find me later

00:02:08,820 --> 00:02:13,950
and we will I would gladly discuss

00:02:10,649 --> 00:02:15,810
things with you um I think a lot of

00:02:13,950 --> 00:02:18,269
frameworks are shoehorned into

00:02:15,810 --> 00:02:21,060
situations in which they are not meant

00:02:18,269 --> 00:02:23,760
to be used I've noticed a lot of people

00:02:21,060 --> 00:02:25,050
using frameworks where maybe framework

00:02:23,760 --> 00:02:26,970
isn't exactly necessary

00:02:25,050 --> 00:02:28,800
and I've even met some flight fans who

00:02:26,970 --> 00:02:30,780
use flight where it shouldn't be used

00:02:28,800 --> 00:02:33,150
and I think this is indicative of a

00:02:30,780 --> 00:02:35,460
larger problem and that's that we have a

00:02:33,150 --> 00:02:38,700
serious fanaticism problem with

00:02:35,460 --> 00:02:41,730
frameworks in JavaScript we we tend to

00:02:38,700 --> 00:02:43,470
be dedicated fans of one framework and

00:02:41,730 --> 00:02:45,030
we think in terms of that framework and

00:02:43,470 --> 00:02:47,490
I really don't think that's healthy I

00:02:45,030 --> 00:02:49,440
think we shouldn't be asking how can I

00:02:47,490 --> 00:02:50,940
use ember for this how can I use angular

00:02:49,440 --> 00:02:53,490
how can i use flight for this I think we

00:02:50,940 --> 00:02:55,830
should be asking how does this tool make

00:02:53,490 --> 00:02:57,420
my j/s better and I've actually been

00:02:55,830 --> 00:02:59,400
asked several times since I got to this

00:02:57,420 --> 00:03:01,410
conference how is flight like this how

00:02:59,400 --> 00:03:03,420
is flight like that I don't think that's

00:03:01,410 --> 00:03:06,420
the right question I think is it's how

00:03:03,420 --> 00:03:09,510
can flight make my j/s better which I'm

00:03:06,420 --> 00:03:11,090
going to talk about so obviously that

00:03:09,510 --> 00:03:13,380
statement I'm going to get a lot of

00:03:11,090 --> 00:03:15,210
argument about that and that's fine I

00:03:13,380 --> 00:03:16,860
would gladly talk to you later this

00:03:15,210 --> 00:03:19,950
evening i'll pick a place and stick

00:03:16,860 --> 00:03:22,770
there and yeah so now we've gotten that

00:03:19,950 --> 00:03:26,880
all the way again with the fading out of

00:03:22,770 --> 00:03:29,160
the slides it's a new feature so the

00:03:26,880 --> 00:03:32,510
definition of the word framework is an

00:03:29,160 --> 00:03:35,370
essential structure like an essential

00:03:32,510 --> 00:03:38,430
set of tools essential thing to a

00:03:35,370 --> 00:03:40,470
building or a structure and I think a

00:03:38,430 --> 00:03:41,700
lot of frameworks today do more than

00:03:40,470 --> 00:03:43,010
that which is awesome doing me wrong

00:03:41,700 --> 00:03:46,140
they do a lot of really cool things but

00:03:43,010 --> 00:03:48,660
flight is a framework in that sense of

00:03:46,140 --> 00:03:51,570
the word it is a very small set of tools

00:03:48,660 --> 00:03:55,020
it does not do a lot of magic for you it

00:03:51,570 --> 00:03:57,180
just it's very onion opinionated in most

00:03:55,020 --> 00:04:00,209
parts it does not prescribe an MV star

00:03:57,180 --> 00:04:02,190
it does not prescribe and any form of

00:04:00,209 --> 00:04:03,810
Technology back onto a front end it just

00:04:02,190 --> 00:04:05,550
it just has a jQuery dependency really

00:04:03,810 --> 00:04:07,320
that's that's the only opinion has in

00:04:05,550 --> 00:04:09,739
terms of what tech you use and it's

00:04:07,320 --> 00:04:12,780
remarkably lightweight it's 5k gzipped

00:04:09,739 --> 00:04:14,250
again it does require jquery but i don't

00:04:12,780 --> 00:04:16,290
think that's that outlandish of a

00:04:14,250 --> 00:04:20,669
requirement in today's web development

00:04:16,290 --> 00:04:23,040
world like I said flights not overly

00:04:20,669 --> 00:04:25,050
prescriptive at all it is not an MV star

00:04:23,040 --> 00:04:27,960
framework it's not just for single page

00:04:25,050 --> 00:04:32,010
apps it's not just for hyper interactive

00:04:27,960 --> 00:04:34,050
clients whatever that means um it's it

00:04:32,010 --> 00:04:37,200
does play well with other libraries and

00:04:34,050 --> 00:04:38,330
I'll explain this super complicated very

00:04:37,200 --> 00:04:40,520
much into

00:04:38,330 --> 00:04:43,370
tailed plan to integrate flight into

00:04:40,520 --> 00:04:46,580
your current code and what it does give

00:04:43,370 --> 00:04:48,259
you is the way it is the ways to

00:04:46,580 --> 00:04:50,930
structure your code to write better

00:04:48,259 --> 00:04:53,180
JavaScript applications and how you use

00:04:50,930 --> 00:04:56,689
it is more up to you it's just kind of

00:04:53,180 --> 00:04:58,159
pointers to build better applications so

00:04:56,689 --> 00:05:00,530
there are a few commandments of flight

00:04:58,159 --> 00:05:02,810
components are entirely agnostic what

00:05:00,530 --> 00:05:05,150
you do is you define what a component is

00:05:02,810 --> 00:05:07,310
and what it does when you instantiate a

00:05:05,150 --> 00:05:09,319
component in flight you no longer have

00:05:07,310 --> 00:05:11,810
direct access to that component you can

00:05:09,319 --> 00:05:14,629
no longer go grab it and do something

00:05:11,810 --> 00:05:16,009
with it the only way to get a component

00:05:14,629 --> 00:05:18,409
to do something once you have defined it

00:05:16,009 --> 00:05:20,120
and instantiated it is for it to listen

00:05:18,409 --> 00:05:22,129
for events and it will it can admit

00:05:20,120 --> 00:05:25,310
events so we'll get into why that

00:05:22,129 --> 00:05:27,979
actually a really good idea later it

00:05:25,310 --> 00:05:30,139
does require you to use the Dom I've

00:05:27,979 --> 00:05:32,150
heard a lot of dominating in the past 24

00:05:30,139 --> 00:05:34,159
hours and I actually like the use of the

00:05:32,150 --> 00:05:36,919
dumb and this framework definitely

00:05:34,159 --> 00:05:40,699
leverage is that well and it definitely

00:05:36,919 --> 00:05:42,229
helps finally a test everything this is

00:05:40,699 --> 00:05:44,360
more of an implicit commandment flight

00:05:42,229 --> 00:05:49,639
makes it so easy to test your code that

00:05:44,360 --> 00:05:50,960
there's really no excuse not to we're

00:05:49,639 --> 00:05:53,210
also going to go into functional mix-ins

00:05:50,960 --> 00:05:55,699
as a way to structure your JavaScript

00:05:53,210 --> 00:05:58,460
flight is very heavy on mix-ins usage

00:05:55,699 --> 00:06:00,139
instead of inheritance and so I'm going

00:05:58,460 --> 00:06:03,589
to go into what functional mix-ins are

00:06:00,139 --> 00:06:05,270
so there there are a couple other

00:06:03,589 --> 00:06:06,949
languages that use this construct but

00:06:05,270 --> 00:06:09,379
I've mostly found it used in JavaScript

00:06:06,949 --> 00:06:11,469
because of the prototype system and what

00:06:09,379 --> 00:06:14,409
functional mix-ins do is they apply

00:06:11,469 --> 00:06:17,839
functionality to an existing prototype

00:06:14,409 --> 00:06:19,460
Angus Crowell said on the blog post that

00:06:17,839 --> 00:06:21,729
described what functional mix-ins are

00:06:19,460 --> 00:06:24,770
that they're a process and not an object

00:06:21,729 --> 00:06:28,279
you call a mix in on a prototype and it

00:06:24,770 --> 00:06:29,719
augments that prototype and I personally

00:06:28,279 --> 00:06:31,539
think functional mix-ins are the best

00:06:29,719 --> 00:06:35,960
thing that happen to jas since JS hint

00:06:31,539 --> 00:06:37,250
but that's again is an opinion and a lot

00:06:35,960 --> 00:06:39,349
of people ask me why not straight up

00:06:37,250 --> 00:06:41,389
inheritance well the Gang of Four book

00:06:39,349 --> 00:06:45,229
actually does state that you should

00:06:41,389 --> 00:06:47,240
value object object composition over

00:06:45,229 --> 00:06:50,449
classical inheritance and so it actually

00:06:47,240 --> 00:06:52,220
kind of does go with existing literature

00:06:50,449 --> 00:06:54,650
and

00:06:52,220 --> 00:06:56,660
there's in the second bullet describes a

00:06:54,650 --> 00:06:57,830
question that I had a lot when we did

00:06:56,660 --> 00:06:59,060
use classical inheritance with

00:06:57,830 --> 00:07:02,380
JavaScript at some other places that

00:06:59,060 --> 00:07:04,430
I've worked and that's Joe's a button in

00:07:02,380 --> 00:07:06,650
inherit from a form element or does it

00:07:04,430 --> 00:07:08,300
inherent from another button or it

00:07:06,650 --> 00:07:10,160
doesn't hear it from a class called

00:07:08,300 --> 00:07:12,890
Greenwich why did we have a class called

00:07:10,160 --> 00:07:14,600
green and it's a lot of inheritance

00:07:12,890 --> 00:07:16,820
change get really messy really quick

00:07:14,600 --> 00:07:19,880
especially if you delve into multiple

00:07:16,820 --> 00:07:22,730
inheritance which can just get weird and

00:07:19,880 --> 00:07:24,260
then I actually don't think jeaious is

00:07:22,730 --> 00:07:26,030
meant for headed it's a prototype based

00:07:24,260 --> 00:07:28,400
system and I really think object

00:07:26,030 --> 00:07:30,850
composition is a better way to handle

00:07:28,400 --> 00:07:36,170
your J esco with an inheritance and

00:07:30,850 --> 00:07:38,390
Angus curl sense to think the same so

00:07:36,170 --> 00:07:41,000
I'm going to go into how to write a

00:07:38,390 --> 00:07:44,180
flight j/s application the flight J a

00:07:41,000 --> 00:07:46,280
sample code that I put a link to in the

00:07:44,180 --> 00:07:48,740
slides it's also available if you just

00:07:46,280 --> 00:07:50,390
go to K perch on github and then it's

00:07:48,740 --> 00:07:53,210
mountain underscore West is the

00:07:50,390 --> 00:07:55,400
repository it was built using the yeoman

00:07:53,210 --> 00:07:56,930
generator for flight applications so it

00:07:55,400 --> 00:07:59,810
gave me a lot of setup right off the bat

00:07:56,930 --> 00:08:04,100
including a karma testing set up which

00:07:59,810 --> 00:08:06,110
is really nifty to have so the first

00:08:04,100 --> 00:08:10,310
step for writing a component in flight

00:08:06,110 --> 00:08:12,830
is to write your HTML basic general good

00:08:10,310 --> 00:08:15,260
practices apply use semantic HTML try

00:08:12,830 --> 00:08:18,050
not to get de vitus try to you know

00:08:15,260 --> 00:08:22,070
class things semantically or use IDs

00:08:18,050 --> 00:08:24,200
when necessary this is the HTML that I

00:08:22,070 --> 00:08:27,290
wrote for a counter component which

00:08:24,200 --> 00:08:32,270
actually show you the little demo right

00:08:27,290 --> 00:08:36,099
here close my dev tools just mixable

00:08:32,270 --> 00:08:39,530
counters nuthin button too terribly

00:08:36,099 --> 00:08:41,750
crazy so this is this right here on the

00:08:39,530 --> 00:08:43,430
screen is all of the flight dependent

00:08:41,750 --> 00:08:47,300
j/s that you'll need to write a

00:08:43,430 --> 00:08:49,730
component there are a couple of unique

00:08:47,300 --> 00:08:52,010
pieces to this that will go into more

00:08:49,730 --> 00:08:56,060
detail the first is the this dot default

00:08:52,010 --> 00:08:58,010
actors call default attributes this dot

00:08:56,060 --> 00:09:00,260
after initialize is basically your

00:08:58,010 --> 00:09:02,300
constructor for your component and it's

00:09:00,260 --> 00:09:03,889
called after that component is attached

00:09:02,300 --> 00:09:07,040
to the dawn

00:09:03,889 --> 00:09:09,139
and then your event handlers or error

00:09:07,040 --> 00:09:11,869
event listeners right here and after

00:09:09,139 --> 00:09:13,189
this is just your your own event

00:09:11,869 --> 00:09:14,720
handlers which is your business logic

00:09:13,189 --> 00:09:19,040
which is all the code that makes your

00:09:14,720 --> 00:09:20,419
out special like I said the three

00:09:19,040 --> 00:09:22,040
components so the disc default

00:09:20,419 --> 00:09:24,589
attributes call what you want to put in

00:09:22,040 --> 00:09:26,299
there is everything that makes your

00:09:24,589 --> 00:09:27,799
component uniquely anything you need to

00:09:26,299 --> 00:09:30,139
access for that component would go in

00:09:27,799 --> 00:09:32,899
the default attributes especially any

00:09:30,139 --> 00:09:35,540
HTML selectors or CSS selectors that you

00:09:32,899 --> 00:09:37,459
would want to call for that component so

00:09:35,540 --> 00:09:40,970
any child elements that you'd want to

00:09:37,459 --> 00:09:42,169
access any HTML values data attributes

00:09:40,970 --> 00:09:43,549
so you'd want to access you'll want to

00:09:42,169 --> 00:09:44,959
put those selectors in the default

00:09:43,549 --> 00:09:46,189
attributes class and there's a reason

00:09:44,959 --> 00:09:48,829
for this that will go into in a little

00:09:46,189 --> 00:09:51,169
bit the this set after initialized

00:09:48,829 --> 00:09:52,759
function callback is for your

00:09:51,169 --> 00:09:54,259
construction this is for your setup of

00:09:52,759 --> 00:09:56,869
that individual component this is the

00:09:54,259 --> 00:09:58,790
last time you'll be able to do things to

00:09:56,869 --> 00:10:02,569
that component because it will then be

00:09:58,790 --> 00:10:04,100
only responding to events and then event

00:10:02,569 --> 00:10:06,439
ham event handlers and event listeners

00:10:04,100 --> 00:10:10,519
are going to be how your component

00:10:06,439 --> 00:10:13,279
interacts with your app so to actually

00:10:10,519 --> 00:10:15,410
use a flight component you call you

00:10:13,279 --> 00:10:18,019
require in the definition the the code

00:10:15,410 --> 00:10:19,399
that was just shown that's a component

00:10:18,019 --> 00:10:22,399
definition you call it in and you call

00:10:19,399 --> 00:10:24,019
attached to on a selector and what it

00:10:22,399 --> 00:10:26,629
does is it creates an instance of that

00:10:24,019 --> 00:10:31,549
component for each instance of the

00:10:26,629 --> 00:10:34,040
selector that's on the page so the

00:10:31,549 --> 00:10:36,619
reason we put all of our selectors in

00:10:34,040 --> 00:10:39,259
default attributes is because by doing

00:10:36,619 --> 00:10:41,179
this when you call attached to you can

00:10:39,259 --> 00:10:43,100
pass in new definitions for those

00:10:41,179 --> 00:10:45,199
selectors and so you've then made your

00:10:43,100 --> 00:10:47,899
component HTML I agnostic you can use it

00:10:45,199 --> 00:10:49,579
with several different HTML setups you

00:10:47,899 --> 00:10:52,459
just you just override those defaults

00:10:49,579 --> 00:10:53,989
and that makes it kind of fantastic if

00:10:52,459 --> 00:10:55,489
your if your markup changes you don't

00:10:53,989 --> 00:10:57,410
have to change everything in your

00:10:55,489 --> 00:11:03,399
component you just change one line this

00:10:57,410 --> 00:11:06,139
is okay this class needs to change so I

00:11:03,399 --> 00:11:07,879
have to explain how the event bubbling

00:11:06,139 --> 00:11:09,439
works sometimes to newer debs and to

00:11:07,879 --> 00:11:12,169
devs that are there new to like the

00:11:09,439 --> 00:11:14,600
event base structure so I have a series

00:11:12,169 --> 00:11:17,380
of pictures that kind of explain how

00:11:14,600 --> 00:11:19,940
have flight handles

00:11:17,380 --> 00:11:21,290
so the first is all instances component

00:11:19,940 --> 00:11:24,380
of a component are watching for the same

00:11:21,290 --> 00:11:27,019
event and so in this case the kittens

00:11:24,380 --> 00:11:29,420
are components and on the toy falling

00:11:27,019 --> 00:11:33,320
they all freak out and want to figure

00:11:29,420 --> 00:11:35,149
out what the toy is so this variable

00:11:33,320 --> 00:11:37,220
refers to the instance of the component

00:11:35,149 --> 00:11:39,230
so when an event fires it can access its

00:11:37,220 --> 00:11:40,760
children it can access it's still atomic

00:11:39,230 --> 00:11:42,140
because the component is only accessing

00:11:40,760 --> 00:11:44,180
itself you're not accessing it from

00:11:42,140 --> 00:11:46,640
outside of there and in this case the

00:11:44,180 --> 00:11:51,019
gray cat is a component and reacts to

00:11:46,640 --> 00:11:54,470
its friend looking it and in the last

00:11:51,019 --> 00:11:56,209
case I've noticed recently and we

00:11:54,470 --> 00:11:58,160
actually do this at retail me not where

00:11:56,209 --> 00:12:01,339
I work sometimes when an error event

00:11:58,160 --> 00:12:02,959
won't break the entire application will

00:12:01,339 --> 00:12:05,360
actually throw an error event with a

00:12:02,959 --> 00:12:07,490
reference to the error object and so we

00:12:05,360 --> 00:12:09,440
can react accordingly if it's if it's an

00:12:07,490 --> 00:12:11,060
AJAX error failing we can tell it to

00:12:09,440 --> 00:12:16,910
retry or we can tell the user sorry

00:12:11,060 --> 00:12:19,579
we're not we can't do that right now so

00:12:16,910 --> 00:12:22,100
i mentioned that testing was pretty easy

00:12:19,579 --> 00:12:23,480
with flight it's actually remarkably

00:12:22,100 --> 00:12:26,149
easy especially for client-side

00:12:23,480 --> 00:12:27,500
JavaScript a lot of people groan when

00:12:26,149 --> 00:12:29,660
they're told they need to test their

00:12:27,500 --> 00:12:31,430
client side JavaScript because things

00:12:29,660 --> 00:12:34,190
are so rooted in the Dom things are

00:12:31,430 --> 00:12:35,990
difficult to test go try testing an AJAX

00:12:34,190 --> 00:12:37,880
call etc there's so many dependencies

00:12:35,990 --> 00:12:39,320
that make it hard to test but because of

00:12:37,880 --> 00:12:41,329
the way flight encourages you to

00:12:39,320 --> 00:12:45,079
structure your code it's actually really

00:12:41,329 --> 00:12:47,149
easy to test flight components and the

00:12:45,079 --> 00:12:48,620
reasons our components are tiny little

00:12:47,149 --> 00:12:50,600
services that's all they are they're

00:12:48,620 --> 00:12:52,579
tiny little atomic services they're not

00:12:50,600 --> 00:12:54,260
accessed anywhere else they're just

00:12:52,579 --> 00:12:57,200
constructed and then let out in a little

00:12:54,260 --> 00:12:58,730
while and the other cool part about the

00:12:57,200 --> 00:13:01,339
event based system is that now your

00:12:58,730 --> 00:13:04,190
component has a clearly defined API if

00:13:01,339 --> 00:13:05,930
your component receives event a with

00:13:04,190 --> 00:13:08,839
data be you know that it will limit

00:13:05,930 --> 00:13:10,730
event C with data d you know what's

00:13:08,839 --> 00:13:12,649
going to happen and that's ninety

00:13:10,730 --> 00:13:14,959
percent of what you need to test any

00:13:12,649 --> 00:13:16,250
code is to know what that when you get a

00:13:14,959 --> 00:13:22,610
certain input you're going to get a

00:13:16,250 --> 00:13:24,770
certain output there's more actually the

00:13:22,610 --> 00:13:26,720
flight community has provided flight

00:13:24,770 --> 00:13:28,640
mocha and flight jasmine which are

00:13:26,720 --> 00:13:30,420
wrappers around two of the most popular

00:13:28,640 --> 00:13:33,810
client-side JavaScript testing framework

00:13:30,420 --> 00:13:36,000
and what they give you are the things

00:13:33,810 --> 00:13:40,639
that you will need the most which are

00:13:36,000 --> 00:13:43,019
events pies and automated markup

00:13:40,639 --> 00:13:44,339
generated markups tubbing so basically

00:13:43,019 --> 00:13:45,480
you give it the mark-up you want for

00:13:44,339 --> 00:13:47,220
your component and it will handle

00:13:45,480 --> 00:13:50,209
sticking it in the Dom and handling

00:13:47,220 --> 00:13:53,040
handling all the attachment for you so

00:13:50,209 --> 00:13:55,019
the yeoman app generator for flight is

00:13:53,040 --> 00:13:56,550
also remarkably useful it sets up Karma

00:13:55,019 --> 00:13:58,470
for you and does all the configuration

00:13:56,550 --> 00:14:01,019
which is fantastic if you've ever done

00:13:58,470 --> 00:14:04,050
karma configuration by hand it can kind

00:14:01,019 --> 00:14:09,540
of be interesting as so it's nice that

00:14:04,050 --> 00:14:12,750
it sets it up for you I don't have a

00:14:09,540 --> 00:14:14,910
time or do i how do you know it okay so

00:14:12,750 --> 00:14:17,880
um like I said it gives you events pies

00:14:14,910 --> 00:14:19,470
which are actually pretty robust it will

00:14:17,880 --> 00:14:21,300
tell you how many times your event has

00:14:19,470 --> 00:14:23,370
been triggered you can set it up to

00:14:21,300 --> 00:14:25,680
listen on a specific Dom point so if you

00:14:23,370 --> 00:14:27,990
say I want to know if this event was

00:14:25,680 --> 00:14:30,510
fired here you can do that you can

00:14:27,990 --> 00:14:32,639
access the data with which the event

00:14:30,510 --> 00:14:34,320
firing basically what what if when the

00:14:32,639 --> 00:14:36,720
event was fired what data was sent with

00:14:34,320 --> 00:14:40,500
it so i can say on the first call if

00:14:36,720 --> 00:14:42,990
data dot equals foo than her a the test

00:14:40,500 --> 00:14:44,550
passes and it does give you headless

00:14:42,990 --> 00:14:45,779
tests running via karma which is nice

00:14:44,550 --> 00:14:47,130
because when you're editing your code

00:14:45,779 --> 00:14:49,350
it's nice to be able to just hit save

00:14:47,130 --> 00:14:53,910
and watch the test results run on the

00:14:49,350 --> 00:14:57,240
side so this is the code for a mocha

00:14:53,910 --> 00:14:59,760
flight test and the setup component is

00:14:57,240 --> 00:15:01,709
the HTML stubbing out that i mentioned

00:14:59,760 --> 00:15:03,089
it you just give it a piece of HTML that

00:15:01,709 --> 00:15:05,339
you'd want to attach your component to

00:15:03,089 --> 00:15:07,890
and it will handle injecting it into the

00:15:05,339 --> 00:15:10,380
dom and handle all the clean up there as

00:15:07,890 --> 00:15:12,720
well and then in the actual test we're

00:15:10,380 --> 00:15:17,160
setting up an event spy on document for

00:15:12,720 --> 00:15:19,890
the event counter change and then you

00:15:17,160 --> 00:15:21,750
can click and manage handling of the UI

00:15:19,890 --> 00:15:25,199
actually interacting with the UI and

00:15:21,750 --> 00:15:27,269
then as you'll notice the last few lines

00:15:25,199 --> 00:15:30,720
expect events by to have been triggered

00:15:27,269 --> 00:15:33,089
on document and expect events events by

00:15:30,720 --> 00:15:34,889
is that most recent called data to equal

00:15:33,089 --> 00:15:37,319
it to that very interesting dot syntax

00:15:34,889 --> 00:15:38,410
where it reads like a sentence as mocha

00:15:37,319 --> 00:15:40,779
does and

00:15:38,410 --> 00:15:43,389
you want the value to be one so that's

00:15:40,779 --> 00:15:46,449
basically accounting for if you go to

00:15:43,389 --> 00:15:47,829
here and you go to a counter this is

00:15:46,449 --> 00:15:49,690
zero because that's how it's initialized

00:15:47,829 --> 00:15:54,870
and you click there that's testing that

00:15:49,690 --> 00:15:54,870
particular piece of functionality okay

00:15:55,019 --> 00:16:01,660
speaking a little faster than I thought

00:15:56,980 --> 00:16:04,300
I would a lot faster so not only does

00:16:01,660 --> 00:16:06,910
flight gettin it the tools are nice like

00:16:04,300 --> 00:16:08,620
even but even without the tools testing

00:16:06,910 --> 00:16:12,009
everything would be a commandment in

00:16:08,620 --> 00:16:14,139
flight because it encourages you to

00:16:12,009 --> 00:16:15,670
write code that is modular it encourages

00:16:14,139 --> 00:16:18,430
you to write small components that have

00:16:15,670 --> 00:16:20,170
a consistent API and that alone gives

00:16:18,430 --> 00:16:21,639
you most of what you need to test your

00:16:20,170 --> 00:16:23,139
client side JavaScript the fact that you

00:16:21,639 --> 00:16:26,139
have all of these components with

00:16:23,139 --> 00:16:27,759
consistent api's and that gif is how I

00:16:26,139 --> 00:16:29,800
felt the first time I tested a flight

00:16:27,759 --> 00:16:33,370
app we actually used flight in

00:16:29,800 --> 00:16:34,750
production tree tell me not and I was

00:16:33,370 --> 00:16:37,060
the person who convinced us to use

00:16:34,750 --> 00:16:39,399
flight so I got 28 some of the tests and

00:16:37,060 --> 00:16:40,660
I was dreading it until I tried it and

00:16:39,399 --> 00:16:42,250
then I felt like that because it took me

00:16:40,660 --> 00:16:44,949
about five minutes to write the first

00:16:42,250 --> 00:16:47,230
test that actually tested something that

00:16:44,949 --> 00:16:48,699
it wasn't just oh does this component

00:16:47,230 --> 00:16:50,470
actually exist it was oh if I click this

00:16:48,699 --> 00:16:52,300
does this event fire here and does that

00:16:50,470 --> 00:16:54,970
one fire over there it was it was just

00:16:52,300 --> 00:16:57,220
very gratifying to be able to think oh I

00:16:54,970 --> 00:16:59,230
can I can do handle TDD now with my

00:16:57,220 --> 00:17:00,850
client side JavaScript I'm not dreading

00:16:59,230 --> 00:17:02,319
writing tests anymore because I can

00:17:00,850 --> 00:17:07,419
actually handle that quickly and

00:17:02,319 --> 00:17:09,189
efficiently so you're probably still

00:17:07,419 --> 00:17:11,500
thinking at this point but i still like

00:17:09,189 --> 00:17:14,169
amber angular whatever better I don't

00:17:11,500 --> 00:17:16,630
want to use flight I want to use that's

00:17:14,169 --> 00:17:18,159
the thing i'm not trying to replace your

00:17:16,630 --> 00:17:20,679
favorite framework flight works

00:17:18,159 --> 00:17:22,659
extraordinarily well with other

00:17:20,679 --> 00:17:24,610
frameworks and other libraries because

00:17:22,659 --> 00:17:27,459
of the way it has you structure your

00:17:24,610 --> 00:17:29,559
code but i also think there are times

00:17:27,459 --> 00:17:31,570
when flight isn't the best solution i am

00:17:29,559 --> 00:17:33,220
i try not to be a fanatic i happen to

00:17:31,570 --> 00:17:34,960
like flight but i am very much a firm

00:17:33,220 --> 00:17:37,780
believer in using the right tool for the

00:17:34,960 --> 00:17:40,330
job if there's a team that would code

00:17:37,780 --> 00:17:41,860
better in ember i would just code a

00:17:40,330 --> 00:17:43,659
number with them because that's what

00:17:41,860 --> 00:17:45,850
would work for that team or if there's a

00:17:43,659 --> 00:17:47,409
project where a framework isn't really a

00:17:45,850 --> 00:17:49,059
good solution i just wouldn't use a

00:17:47,409 --> 00:17:51,039
framework and I'm kind of hoping to

00:17:49,059 --> 00:17:51,760
communicate that point that it's good to

00:17:51,039 --> 00:17:54,880
like framework

00:17:51,760 --> 00:17:57,250
it's it's really bad to singularly like

00:17:54,880 --> 00:17:58,960
one framework and not consider other

00:17:57,250 --> 00:18:03,940
viewpoints or try to compare everything

00:17:58,960 --> 00:18:05,200
your favorite framework so I was talking

00:18:03,940 --> 00:18:06,910
with a friend last night and I had this

00:18:05,200 --> 00:18:08,770
slide where did differently he phrased

00:18:06,910 --> 00:18:10,330
it a lot better and even if you are

00:18:08,770 --> 00:18:12,550
looking to move frameworks even if you

00:18:10,330 --> 00:18:14,050
are interested in flight a lot of

00:18:12,550 --> 00:18:15,820
there's always a lot of concern with

00:18:14,050 --> 00:18:17,710
changing frameworks there's it's always

00:18:15,820 --> 00:18:19,780
hard to move your framework and there is

00:18:17,710 --> 00:18:21,700
never time to take down your entire

00:18:19,780 --> 00:18:23,500
application or to stop development on

00:18:21,700 --> 00:18:25,090
your entire application so you can move

00:18:23,500 --> 00:18:28,660
it to a new framework that almost never

00:18:25,090 --> 00:18:30,730
happens so I'm going to share with you

00:18:28,660 --> 00:18:33,160
the super complicated super difficult oh

00:18:30,730 --> 00:18:36,370
my god help me plan to integrate flight

00:18:33,160 --> 00:18:39,280
into your existing code that's the

00:18:36,370 --> 00:18:41,740
entire plan all you have to do because

00:18:39,280 --> 00:18:43,420
of the way components exist is add event

00:18:41,740 --> 00:18:45,970
him event listeners and event handlers

00:18:43,420 --> 00:18:48,190
in your own code and trigger events from

00:18:45,970 --> 00:18:50,080
your own code since you're probably

00:18:48,190 --> 00:18:52,150
already using jquery this is very easy

00:18:50,080 --> 00:18:54,280
to handle jquery delegates thought out

00:18:52,150 --> 00:18:56,200
really well so it's actually remarkably

00:18:54,280 --> 00:18:57,940
simple to integrate flight with your

00:18:56,200 --> 00:19:00,220
existing code base no matter how messy

00:18:57,940 --> 00:19:01,300
it is no matter how crazy it is no

00:19:00,220 --> 00:19:06,580
matter what frameworks you're already

00:19:01,300 --> 00:19:08,380
using it's really simple to use right

00:19:06,580 --> 00:19:10,990
flight really likes developers I think

00:19:08,380 --> 00:19:12,730
because it doesn't restrict us from

00:19:10,990 --> 00:19:14,710
using the other technologies that we

00:19:12,730 --> 00:19:18,760
want to use and it doesn't prevent us

00:19:14,710 --> 00:19:20,080
from from building our own applications

00:19:18,760 --> 00:19:22,050
it doesn't kind of like fence this in

00:19:20,080 --> 00:19:25,030
but what it does give us is the

00:19:22,050 --> 00:19:26,500
encouragement and the rules to create a

00:19:25,030 --> 00:19:29,650
sound structure from the beginning

00:19:26,500 --> 00:19:31,900
flight is more of a foundation in a

00:19:29,650 --> 00:19:33,430
sense it's it doesn't give you a lot but

00:19:31,900 --> 00:19:39,130
what it does give you helps you write

00:19:33,430 --> 00:19:41,410
better code so one of the reasons is

00:19:39,130 --> 00:19:43,510
everyone's everyone's welcome in flight

00:19:41,410 --> 00:19:45,430
camp everyone is welcome it's got an

00:19:43,510 --> 00:19:47,290
extremely low barrier to entry if you

00:19:45,430 --> 00:19:48,670
already understand how JavaScript works

00:19:47,290 --> 00:19:51,400
how a sync works and how event were

00:19:48,670 --> 00:19:52,900
events work and bubble up the Dom you've

00:19:51,400 --> 00:19:55,660
got ninety percent of what you need to

00:19:52,900 --> 00:19:57,910
write a flat application I found a lot

00:19:55,660 --> 00:19:59,740
of newer developers I actually trained

00:19:57,910 --> 00:20:01,840
JavaScript developers back in Austin for

00:19:59,740 --> 00:20:03,760
girl develop it and I find that when

00:20:01,840 --> 00:20:05,320
they try to transition into the

00:20:03,760 --> 00:20:05,570
workforce the scariest thing for them is

00:20:05,320 --> 00:20:06,560
they

00:20:05,570 --> 00:20:07,760
feel they're going to pick the wrong

00:20:06,560 --> 00:20:10,220
framework and they're going to invest

00:20:07,760 --> 00:20:11,690
hundreds of hours in learning this huge

00:20:10,220 --> 00:20:14,780
system and it's going to be the wrong

00:20:11,690 --> 00:20:17,090
one with flight it takes about I

00:20:14,780 --> 00:20:19,670
remember learning about flight last year

00:20:17,090 --> 00:20:20,810
at jay's cough and I went back to my

00:20:19,670 --> 00:20:23,510
hotel room I'm like all right I'm going

00:20:20,810 --> 00:20:25,070
to try this I kind of have my own little

00:20:23,510 --> 00:20:26,660
metric I'm sure someone else thought of

00:20:25,070 --> 00:20:29,330
it first but I call it the time to first

00:20:26,660 --> 00:20:30,770
hello world I'll take a framework I will

00:20:29,330 --> 00:20:32,600
sit there i will read the documentation

00:20:30,770 --> 00:20:34,790
and i will mark how long it took me to

00:20:32,600 --> 00:20:37,220
write a HelloWorld it took me 15 minutes

00:20:34,790 --> 00:20:38,660
to write a HelloWorld in flight took me

00:20:37,220 --> 00:20:39,830
20 minutes to write the counter

00:20:38,660 --> 00:20:42,650
application that you see up there in

00:20:39,830 --> 00:20:44,510
flight so it's it's got a very low

00:20:42,650 --> 00:20:46,130
barrier of entry and I think that's

00:20:44,510 --> 00:20:48,410
great if your team especially if your

00:20:46,130 --> 00:20:50,960
team has a bunch of junior developers or

00:20:48,410 --> 00:20:54,580
a bunch of newer developers or you just

00:20:50,960 --> 00:20:54,580
want to try something a little simpler

00:20:55,030 --> 00:21:00,080
like I said a couple times I'm a fan of

00:20:57,710 --> 00:21:02,390
testing and because you can test all the

00:21:00,080 --> 00:21:04,250
things easily there's enough problems

00:21:02,390 --> 00:21:06,410
with being a web developer servers going

00:21:04,250 --> 00:21:08,210
down builds not working correctly

00:21:06,410 --> 00:21:09,650
there's a million different things that

00:21:08,210 --> 00:21:12,170
can go wrong it's really nice to say

00:21:09,650 --> 00:21:14,180
I've got the tests around my client side

00:21:12,170 --> 00:21:16,370
code I can focus on all of the other

00:21:14,180 --> 00:21:17,900
chaos that happens I could focus on that

00:21:16,370 --> 00:21:19,330
new feature that was dropped on my desk

00:21:17,900 --> 00:21:27,500
a day ago and they wanted it yesterday

00:21:19,330 --> 00:21:29,440
sort of thing actually oh yeah yeah I

00:21:27,500 --> 00:21:32,450
was actually trying to run too much too

00:21:29,440 --> 00:21:34,460
early but it looks like i have because

00:21:32,450 --> 00:21:35,890
that's what my last slides the most

00:21:34,460 --> 00:21:38,390
important thing i find about flight is

00:21:35,890 --> 00:21:40,130
the people i have convinced to use it

00:21:38,390 --> 00:21:42,470
have become very happy with flight and

00:21:40,130 --> 00:21:44,000
very happy with javascript and developer

00:21:42,470 --> 00:21:45,800
happiness is extremely contagious I've

00:21:44,000 --> 00:21:46,850
noticed if your entire team is working

00:21:45,800 --> 00:21:47,990
on something that they believe in and

00:21:46,850 --> 00:21:49,550
something that they're not dreading to

00:21:47,990 --> 00:21:51,290
go to work to every morning it spreads

00:21:49,550 --> 00:21:56,450
and it spreads quickly just like child's

00:21:51,290 --> 00:21:58,280
laughter and that's what I've got so any

00:21:56,450 --> 00:21:59,120
questions comments concerns like I said

00:21:58,280 --> 00:22:01,340
if you want to argue with me about

00:21:59,120 --> 00:22:02,840
frameworks I'll probably be it squatters

00:22:01,340 --> 00:22:04,970
your red rock or something like that and

00:22:02,840 --> 00:22:06,590
come meet me and talk to me about

00:22:04,970 --> 00:22:08,630
frameworks as long as the dialogue is

00:22:06,590 --> 00:22:16,930
constructive I'm totally happy for it

00:22:08,630 --> 00:22:16,930

YouTube URL: https://www.youtube.com/watch?v=PrcvUZGuUa8


