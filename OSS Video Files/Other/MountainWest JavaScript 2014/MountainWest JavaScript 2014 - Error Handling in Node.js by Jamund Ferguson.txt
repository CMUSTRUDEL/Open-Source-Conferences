Title: MountainWest JavaScript 2014 - Error Handling in Node.js by Jamund Ferguson
Publication date: 2020-01-24
Playlist: MountainWest JavaScript 2014
Description: 
	At PayPal I'm working with a lot of people who are new to node.js. A big issue my team has run into is how to sanely handle errors in node./express. I want to talk about some common (and maybe some less common) ways to handle errors across the stack. We'll look at patterns for dealing with synchronous and asynchronous errors and talk about when and where they're appropriate. Mostly this will be about JavaScript, but we'll touch a bit on logging and other aspects of error handling as well.
Lots of code. Lots of real life examples. Should be useful to anyone working with a large team on a large node code base.

Help us caption & translate this video!

http://amara.org/v/FG23/
Captions: 
	00:00:28,109 --> 00:00:31,439
this is so weird it's gonna hook this up

00:00:30,059 --> 00:00:33,390
to their face before I feel like I'm in

00:00:31,439 --> 00:00:37,050
the dentist office or something I hope I

00:00:33,390 --> 00:00:38,400
hope I don't seem that scared so before

00:00:37,050 --> 00:00:41,280
I get started on my talk about air

00:00:38,400 --> 00:00:42,510
handling and node and and all across the

00:00:41,280 --> 00:00:45,149
stack I just want to ask you a couple of

00:00:42,510 --> 00:00:50,070
questions first question why is there a

00:00:45,149 --> 00:00:52,969
table here but second question like how

00:00:50,070 --> 00:00:57,539
many of you guys use node in production

00:00:52,969 --> 00:01:01,050
so 25% okay so out of those how many of

00:00:57,539 --> 00:01:04,320
you guys are using Express basically all

00:01:01,050 --> 00:01:08,460
of them and no one using --happy or one

00:01:04,320 --> 00:01:10,110
happy guy any other frameworks out there

00:01:08,460 --> 00:01:14,690
that you guys are using for from note

00:01:10,110 --> 00:01:16,979
just curious Khoa there you go what

00:01:14,690 --> 00:01:21,000
cracking yeah cracking there you go it's

00:01:16,979 --> 00:01:22,319
PayPal stuff rest if I yeah so there's a

00:01:21,000 --> 00:01:24,000
couple different frameworks but for the

00:01:22,319 --> 00:01:25,649
vast majority of people are using

00:01:24,000 --> 00:01:27,210
Express I'm mostly going to talk about

00:01:25,649 --> 00:01:29,130
error handling with Express what about

00:01:27,210 --> 00:01:34,470
on the client side raise your hand if

00:01:29,130 --> 00:01:38,840
your angular user ember users angular

00:01:34,470 --> 00:01:38,840
actually one where's the react guy

00:01:39,079 --> 00:01:50,310
awesome uh flight Hey and backbone any

00:01:45,840 --> 00:01:53,579
backbone people still around oh man like

00:01:50,310 --> 00:01:55,259
three there's three that's amazing all

00:01:53,579 --> 00:01:56,520
right I just wanted to get to know you a

00:01:55,259 --> 00:01:59,250
little bit better cuz you'll learn a

00:01:56,520 --> 00:02:02,130
little bit about me so I used to work at

00:01:59,250 --> 00:02:03,719
oDesk and we wanted to convince everyone

00:02:02,130 --> 00:02:05,880
at owed us that it was a super awesome

00:02:03,719 --> 00:02:09,090
idea to use nodejs

00:02:05,880 --> 00:02:10,649
like oh no it is so cool PHP is the

00:02:09,090 --> 00:02:12,690
dumps we're gonna move everything to

00:02:10,649 --> 00:02:14,730
notes so they're like okay you can test

00:02:12,690 --> 00:02:16,590
it out on this really cool mobile web

00:02:14,730 --> 00:02:18,480
app we're gonna work on you know we can

00:02:16,590 --> 00:02:19,890
people can log in and they can manage

00:02:18,480 --> 00:02:22,049
their contractors that they're working

00:02:19,890 --> 00:02:26,040
with and we built this thing it was

00:02:22,049 --> 00:02:28,680
really shiny it was a nice app and um so

00:02:26,040 --> 00:02:32,579
it's like running for a few days and I

00:02:28,680 --> 00:02:34,160
get this message this email from our IT

00:02:32,579 --> 00:02:36,050
guy and he's like hey

00:02:34,160 --> 00:02:39,320
so your no note server went crazy again

00:02:36,050 --> 00:02:41,510
and just started eating up all the disk

00:02:39,320 --> 00:02:43,490
on the server I just I stopped the app

00:02:41,510 --> 00:02:46,640
and restarted it and deleted all the

00:02:43,490 --> 00:02:48,560
logs and it's fine everybody my whole

00:02:46,640 --> 00:02:50,840
story about node being so easy to use

00:02:48,560 --> 00:02:53,420
and so reliable is just like totally

00:02:50,840 --> 00:02:55,460
sank to the ground but I'm like no no

00:02:53,420 --> 00:02:57,890
it's fine like I'll just like update my

00:02:55,460 --> 00:03:01,600
node modules and like probably it's like

00:02:57,890 --> 00:03:05,570
sent to us or something swell so um a

00:03:01,600 --> 00:03:07,730
couple days later I get the same email

00:03:05,570 --> 00:03:10,220
again like hey your node server like

00:03:07,730 --> 00:03:11,840
started just like destroying the server

00:03:10,220 --> 00:03:14,510
it actually took down the production

00:03:11,840 --> 00:03:16,400
website so I'm gonna have to move node

00:03:14,510 --> 00:03:18,410
to its own little sandbox environment

00:03:16,400 --> 00:03:21,500
and limit the amount of disk space it

00:03:18,410 --> 00:03:24,680
gets and this is not looking good for

00:03:21,500 --> 00:03:26,180
your your whole node is awesome so um he

00:03:24,680 --> 00:03:27,680
said but this time I preserved the logs

00:03:26,180 --> 00:03:29,180
and I thought ah perfect I'm gonna take

00:03:27,680 --> 00:03:31,370
those logs I'll get this thing solved in

00:03:29,180 --> 00:03:31,970
five minutes so here the logs anyone

00:03:31,370 --> 00:03:35,510
know what's wrong

00:03:31,970 --> 00:03:37,970
okay first of all you can't read it but

00:03:35,510 --> 00:03:40,220
second of all if you could read it it

00:03:37,970 --> 00:03:42,380
you would get absolutely no information

00:03:40,220 --> 00:03:44,270
there's nothing in this stack trace that

00:03:42,380 --> 00:03:46,400
that is anything to do with my app and

00:03:44,270 --> 00:03:50,330
so I'm sitting there thinking like okay

00:03:46,400 --> 00:03:51,830
okay having a little bit of a panic

00:03:50,330 --> 00:03:53,900
right because like I'm trying to give in

00:03:51,830 --> 00:03:56,000
to the company to move to node I can't

00:03:53,900 --> 00:03:58,190
figure out what's wrong but I'm like I

00:03:56,000 --> 00:04:04,090
know what this is this is open source

00:03:58,190 --> 00:04:04,090
you know it's someone else's problem so

00:04:04,300 --> 00:04:09,739
so I get on IRC and you know I I felt a

00:04:08,060 --> 00:04:11,390
little bit bad because you know I know

00:04:09,739 --> 00:04:13,430
these guys that work on Express are

00:04:11,390 --> 00:04:14,840
they're amazing engineers they do some

00:04:13,430 --> 00:04:17,330
great things they're doing this in their

00:04:14,840 --> 00:04:20,900
spare time but I had to tell them you

00:04:17,330 --> 00:04:22,520
know I regret to inform you but there's

00:04:20,900 --> 00:04:23,810
a serious bug in your app there's

00:04:22,520 --> 00:04:26,000
something wrong with your module and

00:04:23,810 --> 00:04:31,230
like so I go in i go in IRC i'm in chat

00:04:26,000 --> 00:04:34,150
and like person one you're a mom

00:04:31,230 --> 00:04:36,250
person to like that's so funny it

00:04:34,150 --> 00:04:39,730
infinite loops and fills up your logs

00:04:36,250 --> 00:04:42,490
that's so great haha and I'm like you

00:04:39,730 --> 00:04:45,790
don't understand like this is huge like

00:04:42,490 --> 00:04:49,600
no dude isn't working for me and it was

00:04:45,790 --> 00:04:50,920
it was sort of terrifying and so it's

00:04:49,600 --> 00:04:53,380
always your problem right with open

00:04:50,920 --> 00:04:54,010
source you work on a module it's your

00:04:53,380 --> 00:04:57,250
problem

00:04:54,010 --> 00:04:59,200
you want some better documentation for

00:04:57,250 --> 00:05:00,010
angularjs who's complaining about docs

00:04:59,200 --> 00:05:02,020
for angularjs

00:05:00,010 --> 00:05:03,490
a lot of people out anyone that's used

00:05:02,020 --> 00:05:05,560
angularjs has complained about the bus

00:05:03,490 --> 00:05:07,720
guess what it's your problem go fix them

00:05:05,560 --> 00:05:09,280
it's open source so that's one thing I

00:05:07,720 --> 00:05:10,330
learned about open source it's always

00:05:09,280 --> 00:05:13,810
always your problem

00:05:10,330 --> 00:05:17,820
so what can you do about it well for me

00:05:13,810 --> 00:05:20,680
and my my my challenges with Express I

00:05:17,820 --> 00:05:22,030
dug deeper into the code I finally sort

00:05:20,680 --> 00:05:23,950
of figured out how to work around this

00:05:22,030 --> 00:05:25,710
problem and for me I had to learn how to

00:05:23,950 --> 00:05:28,030
do proper error handling in my app

00:05:25,710 --> 00:05:29,470
obviously the problems you're gonna face

00:05:28,030 --> 00:05:31,960
in your app are a little bit different

00:05:29,470 --> 00:05:35,200
so I want to share what I learned from

00:05:31,960 --> 00:05:37,120
this experience so after after in there

00:05:35,200 --> 00:05:38,200
at oDesk we worked on this I got an

00:05:37,120 --> 00:05:41,080
amazing opportunity to go work with

00:05:38,200 --> 00:05:43,240
PayPal and the kraken project basically

00:05:41,080 --> 00:05:45,430
we built this wrapper on top of express

00:05:43,240 --> 00:05:47,080
to add security add a whole bunch of

00:05:45,430 --> 00:05:50,080
cool functionality internationalization

00:05:47,080 --> 00:05:52,180
and all this as we're trying to take all

00:05:50,080 --> 00:05:54,100
of our Java things and move them to node

00:05:52,180 --> 00:05:55,600
they'd already been convinced of this

00:05:54,100 --> 00:05:57,220
ability story before I got there

00:05:55,600 --> 00:05:59,590
thankfully cuz I wouldn't have had very

00:05:57,220 --> 00:06:01,450
good evidence for them with my previous

00:05:59,590 --> 00:06:05,080
experience and so I started working on

00:06:01,450 --> 00:06:06,670
the team there and the thing is what

00:06:05,080 --> 00:06:08,740
happens when you take a team of Java

00:06:06,670 --> 00:06:12,340
engineers and you get them riding nodejs

00:06:08,740 --> 00:06:14,080
code just there write a bunch of try

00:06:12,340 --> 00:06:15,970
caches all over the place right because

00:06:14,080 --> 00:06:19,180
like in Java if you have problems you

00:06:15,970 --> 00:06:20,680
can try and catch them what happens when

00:06:19,180 --> 00:06:25,030
you throw an async JavaScript anyone

00:06:20,680 --> 00:06:28,270
know you can't catch them right it's

00:06:25,030 --> 00:06:29,950
just like it's but they will crash your

00:06:28,270 --> 00:06:31,450
server so you've got this rolling

00:06:29,950 --> 00:06:33,610
monster running around

00:06:31,450 --> 00:06:35,470
crashing things and you can't catch it

00:06:33,610 --> 00:06:36,850
you can't you can't grab a hold of it

00:06:35,470 --> 00:06:39,790
there's nothing that you can do about

00:06:36,850 --> 00:06:43,030
those errors running around in your

00:06:39,790 --> 00:06:44,680
application so what do you do for me it

00:06:43,030 --> 00:06:46,240
was this this point of like

00:06:44,680 --> 00:06:48,550
I moved over to the team I was really

00:06:46,240 --> 00:06:49,900
excited to work on project with a bunch

00:06:48,550 --> 00:06:53,530
of great team members but we found all

00:06:49,900 --> 00:06:54,880
this legacy code legacy code this brand

00:06:53,530 --> 00:06:57,850
new note code that people had written

00:06:54,880 --> 00:06:59,800
not using any best practices so what it

00:06:57,850 --> 00:07:02,560
came down to is figuring out what those

00:06:59,800 --> 00:07:03,970
best practices were for error handling

00:07:02,560 --> 00:07:06,039
and note I don't know if you see this

00:07:03,970 --> 00:07:07,240
picture but this thing's called a snoot

00:07:06,039 --> 00:07:08,680
sucker and what you do is you put it in

00:07:07,240 --> 00:07:10,389
the nose of the child and you literally

00:07:08,680 --> 00:07:11,440
suck out the snot it's amazing that's my

00:07:10,389 --> 00:07:16,479
daughter

00:07:11,440 --> 00:07:18,009
I did I did get her permission

00:07:16,479 --> 00:07:20,500
oh my wife's permission before using

00:07:18,009 --> 00:07:22,240
this picture but um you've got to learn

00:07:20,500 --> 00:07:23,710
the best practices right this is the

00:07:22,240 --> 00:07:26,370
best tool I've ever used for getting

00:07:23,710 --> 00:07:30,430
clearing snot out of my child's nose and

00:07:26,370 --> 00:07:32,770
and node there's not a lot of clarity

00:07:30,430 --> 00:07:34,840
around the best practices for handling

00:07:32,770 --> 00:07:37,270
errors right some people are like oh

00:07:34,840 --> 00:07:39,099
domains and other people like oh I just

00:07:37,270 --> 00:07:43,360
use promises but like it's not really

00:07:39,099 --> 00:07:45,580
like comprehensive plan to solve errors

00:07:43,360 --> 00:07:46,479
like we deal with people's money I don't

00:07:45,580 --> 00:07:50,020
know how many of you have PayPal

00:07:46,479 --> 00:07:51,639
accounts alright and this is gonna be

00:07:50,020 --> 00:07:53,979
bad but how many of you have been mad at

00:07:51,639 --> 00:07:55,330
PayPal at some point in your life right

00:07:53,979 --> 00:07:58,870
half the audience awesome

00:07:55,330 --> 00:08:00,760
so good job guys so we're trying to fix

00:07:58,870 --> 00:08:02,800
that like we're building cool things and

00:08:00,760 --> 00:08:04,030
it will be really awesome and I'd love

00:08:02,800 --> 00:08:06,250
for you to come and join us in San Jose

00:08:04,030 --> 00:08:09,070
but that's a that's a later discussion

00:08:06,250 --> 00:08:11,349
so what I decided to do new on the team

00:08:09,070 --> 00:08:14,229
is a lead they're building some consumer

00:08:11,349 --> 00:08:15,729
apps with node is come up with a couple

00:08:14,229 --> 00:08:17,440
of best practices of how we should be

00:08:15,729 --> 00:08:20,800
doing things how we can handle errors

00:08:17,440 --> 00:08:22,770
from the backend you know from from our

00:08:20,800 --> 00:08:25,870
services layer all the way down to

00:08:22,770 --> 00:08:28,240
putting them in front of our users so

00:08:25,870 --> 00:08:30,610
kind of full stack error handling and so

00:08:28,240 --> 00:08:32,680
I'm gonna get to some of the things that

00:08:30,610 --> 00:08:35,500
some of the practices we're using at

00:08:32,680 --> 00:08:36,219
PayPal they're not perfect like this is

00:08:35,500 --> 00:08:37,450
trial and error

00:08:36,219 --> 00:08:39,430
I'd love to hear some of the stuff you

00:08:37,450 --> 00:08:40,990
guys are doing at your places but I'll

00:08:39,430 --> 00:08:41,800
share with you a few of the the things

00:08:40,990 --> 00:08:43,930
that we're doing and then we'll have

00:08:41,800 --> 00:08:46,300
time for questions you can you can pick

00:08:43,930 --> 00:08:47,680
at pick up me and come up with better

00:08:46,300 --> 00:08:50,920
ways to do some of this stuff so first

00:08:47,680 --> 00:08:52,720
thing like try catch the only case where

00:08:50,920 --> 00:08:55,600
I know that it's a good idea to use try

00:08:52,720 --> 00:08:58,070
catch is when you're doing JSON a parse

00:08:55,600 --> 00:09:00,110
when you're doing JSON that parse

00:08:58,070 --> 00:09:02,900
it if you have invalid data that you're

00:09:00,110 --> 00:09:05,350
sending into it it can crash it can

00:09:02,900 --> 00:09:08,960
throw and so it's really really good to

00:09:05,350 --> 00:09:10,280
try and catch that and do something with

00:09:08,960 --> 00:09:11,810
the error right like obviously I don't

00:09:10,280 --> 00:09:13,270
know how you need to handle your error

00:09:11,810 --> 00:09:15,440
because it's different for every case

00:09:13,270 --> 00:09:17,300
but that's a really important thing that

00:09:15,440 --> 00:09:19,580
you need to do but other than that I

00:09:17,300 --> 00:09:21,650
can't I haven't seen very many cases

00:09:19,580 --> 00:09:23,870
where I would recommend using the try

00:09:21,650 --> 00:09:26,480
catch pattern in your node apps so

00:09:23,870 --> 00:09:30,290
that's the first thing anytime I see

00:09:26,480 --> 00:09:32,210
people throwing in the node code in our

00:09:30,290 --> 00:09:34,430
application I get really really nervous

00:09:32,210 --> 00:09:35,600
and I'm I'm presuming almost in every

00:09:34,430 --> 00:09:35,990
case that they're just basically doing

00:09:35,600 --> 00:09:39,260
it wrong

00:09:35,990 --> 00:09:39,830
so avoid try-catch except for this JSON

00:09:39,260 --> 00:09:42,590
cate-cate

00:09:39,830 --> 00:09:45,110
JSON dot parse case that's one the

00:09:42,590 --> 00:09:46,610
second thing is a callback pattern more

00:09:45,110 --> 00:09:49,100
than anything else I would recommend

00:09:46,610 --> 00:09:50,840
that every single person working on node

00:09:49,100 --> 00:09:52,370
just get really really familiar with the

00:09:50,840 --> 00:09:54,440
callback pattern it's the most boring

00:09:52,370 --> 00:09:58,010
thing in the whole world right you pass

00:09:54,440 --> 00:10:00,230
in a callback some sort of like I'll

00:09:58,010 --> 00:10:03,020
just point you pass in a callback there

00:10:00,230 --> 00:10:05,720
that takes and your callback takes an

00:10:03,020 --> 00:10:07,010
error and some sort of data or

00:10:05,720 --> 00:10:09,170
whatever's coming back or you know

00:10:07,010 --> 00:10:10,970
whatever it may be and then the first

00:10:09,170 --> 00:10:12,740
thing that you should do is do something

00:10:10,970 --> 00:10:14,060
with that error object now a couple of

00:10:12,740 --> 00:10:16,610
things that I want to point out here

00:10:14,060 --> 00:10:18,920
with the callback pattern one that error

00:10:16,610 --> 00:10:20,660
should always be an error object if

00:10:18,920 --> 00:10:23,720
you're calling back with a string or

00:10:20,660 --> 00:10:25,490
you're calling back with a number this

00:10:23,720 --> 00:10:27,620
is almost always likely going to lead to

00:10:25,490 --> 00:10:31,310
more problems whenever you're calling

00:10:27,620 --> 00:10:33,590
back from an asynchronous function call

00:10:31,310 --> 00:10:34,940
back with a proper error object just if

00:10:33,590 --> 00:10:37,490
you don't have one coming down from your

00:10:34,940 --> 00:10:39,200
services just go new error and then

00:10:37,490 --> 00:10:40,730
whatever messages anyone know why it's

00:10:39,200 --> 00:10:43,120
useful to have error objects Ryan you

00:10:40,730 --> 00:10:43,120
have an idea

00:10:47,780 --> 00:10:53,150
yeah exactly constraints are not super

00:10:51,770 --> 00:10:55,310
helpful as errors they're helpful as

00:10:53,150 --> 00:10:57,260
messages for users so it's important

00:10:55,310 --> 00:10:59,390
that we have a stack trace and if you

00:10:57,260 --> 00:11:02,090
create an error object you'll always

00:10:59,390 --> 00:11:05,090
have that stack trace so I'm a huge fan

00:11:02,090 --> 00:11:08,150
of using error objects for for all the

00:11:05,090 --> 00:11:09,710
things trying to think there's any other

00:11:08,150 --> 00:11:12,040
big things to point out one other

00:11:09,710 --> 00:11:15,110
pattern that I'll just mention here is

00:11:12,040 --> 00:11:16,970
when you handle that error I always

00:11:15,110 --> 00:11:19,070
handle it first and recommend returning

00:11:16,970 --> 00:11:22,100
immediately so usually in that if block

00:11:19,070 --> 00:11:23,270
right there I'll do you know if error do

00:11:22,100 --> 00:11:25,250
something with that error and then

00:11:23,270 --> 00:11:27,950
return because what I found is that it's

00:11:25,250 --> 00:11:29,510
extremely important to not accidentally

00:11:27,950 --> 00:11:31,250
then continue like nothing happened and

00:11:29,510 --> 00:11:33,500
sometimes developers get a little bit

00:11:31,250 --> 00:11:34,730
confused and I think well if error I do

00:11:33,500 --> 00:11:36,230
something with the air and then they

00:11:34,730 --> 00:11:39,230
just sort of let it let let the flow

00:11:36,230 --> 00:11:41,570
continue so don't do that any questions

00:11:39,230 --> 00:11:42,530
about a callback pattern I'm happy to

00:11:41,570 --> 00:11:44,240
answer any questions you might have

00:11:42,530 --> 00:11:45,620
about it before I move on because I feel

00:11:44,240 --> 00:11:47,000
like it's so important it's like so

00:11:45,620 --> 00:11:48,650
boring people are like what kind of

00:11:47,000 --> 00:11:50,270
question what I have I feel like

00:11:48,650 --> 00:11:55,280
someone's scratching their head is it a

00:11:50,270 --> 00:11:56,960
question no okay moving on so one of the

00:11:55,280 --> 00:11:58,370
things that we've done at PayPal that I

00:11:56,960 --> 00:12:01,160
really really like is this pattern of

00:11:58,370 --> 00:12:02,600
creating custom error objects so anyone

00:12:01,160 --> 00:12:05,330
has any one subclass errors in their

00:12:02,600 --> 00:12:06,560
node experiments before okay three or

00:12:05,330 --> 00:12:07,970
four people let me give you a little bit

00:12:06,560 --> 00:12:09,710
of a pitch for creating your own custom

00:12:07,970 --> 00:12:11,150
error objects and the syntax that you

00:12:09,710 --> 00:12:13,460
find here is the best syntax I could

00:12:11,150 --> 00:12:14,839
come up with that does all the essential

00:12:13,460 --> 00:12:17,680
things that errors need to do you have a

00:12:14,839 --> 00:12:19,940
stack trace it preserves a message of

00:12:17,680 --> 00:12:23,150
you know that you pass into the error

00:12:19,940 --> 00:12:24,620
and it's an instance of error so if

00:12:23,150 --> 00:12:26,000
someone was doing some sort of type

00:12:24,620 --> 00:12:27,650
checking and making sure that you had a

00:12:26,000 --> 00:12:29,150
real error object this type of object

00:12:27,650 --> 00:12:31,520
would pass oh so I can go and create my

00:12:29,150 --> 00:12:35,450
new Mountain error with my message it's

00:12:31,520 --> 00:12:37,160
too freaking cold in Utah and it would

00:12:35,450 --> 00:12:38,839
work just like any other error but the

00:12:37,160 --> 00:12:40,070
the clever thing about doing custom

00:12:38,839 --> 00:12:42,140
errors and we do this all the time at

00:12:40,070 --> 00:12:45,140
PayPal is you can start making errors

00:12:42,140 --> 00:12:48,260
like a server error object so we created

00:12:45,140 --> 00:12:49,880
a server error object and we'll pass in

00:12:48,260 --> 00:12:52,400
a message for the message of the error

00:12:49,880 --> 00:12:54,110
but then we'll also pass in a whole

00:12:52,400 --> 00:12:56,600
bunch of information about what services

00:12:54,110 --> 00:12:59,240
we were hitting what poor what time all

00:12:56,600 --> 00:13:00,980
this sort of stuff we can we can pass in

00:12:59,240 --> 00:13:01,250
as additional items that we append to

00:13:00,980 --> 00:13:03,439
that

00:13:01,250 --> 00:13:05,899
and while none of that information ends

00:13:03,439 --> 00:13:07,910
up back in front of the user it's really

00:13:05,899 --> 00:13:10,850
helpful in our debugging so why did this

00:13:07,910 --> 00:13:13,220
problem why would this problem occur

00:13:10,850 --> 00:13:15,560
well let's check our server logs and we

00:13:13,220 --> 00:13:17,660
have a super fat stack trace of where it

00:13:15,560 --> 00:13:21,860
occurred and then we also will have a

00:13:17,660 --> 00:13:24,110
whole bunch of information about the the

00:13:21,860 --> 00:13:25,579
services that were called and it's all

00:13:24,110 --> 00:13:27,290
sort of extra information around that

00:13:25,579 --> 00:13:29,420
error so I highly recommend looking into

00:13:27,290 --> 00:13:30,829
doing custom errors there's some blog

00:13:29,420 --> 00:13:33,920
post about it there but frankly this is

00:13:30,829 --> 00:13:35,600
the best the simplest code that will

00:13:33,920 --> 00:13:38,000
create custom errors that have worked

00:13:35,600 --> 00:13:40,790
for me and the last thing I want to talk

00:13:38,000 --> 00:13:42,889
about are just a few conventions you

00:13:40,790 --> 00:13:44,300
know what I found a lot in programming

00:13:42,889 --> 00:13:46,879
on large teams and especially

00:13:44,300 --> 00:13:48,290
distributed teams is that it's really

00:13:46,879 --> 00:13:51,470
important to have some conventions some

00:13:48,290 --> 00:13:52,790
best practices in place because frankly

00:13:51,470 --> 00:13:55,040
there's about 20 different ways to do

00:13:52,790 --> 00:13:56,779
something but just making sure that your

00:13:55,040 --> 00:13:59,329
team uses a single way is really really

00:13:56,779 --> 00:14:00,589
important so I'll read these and then I

00:13:59,329 --> 00:14:02,839
can go into a little more specifics of

00:14:00,589 --> 00:14:04,790
code in a second first thing always deal

00:14:02,839 --> 00:14:07,220
with error objects if you ever see in

00:14:04,790 --> 00:14:08,600
your code a string or a number being

00:14:07,220 --> 00:14:09,949
passed as the first argument and a

00:14:08,600 --> 00:14:11,899
callback you should just change it just

00:14:09,949 --> 00:14:14,240
wrap it in new error immediately right

00:14:11,899 --> 00:14:15,709
then it will almost always starts to

00:14:14,240 --> 00:14:16,879
work you should probably you know make

00:14:15,709 --> 00:14:19,100
sure your tests still pass and all that

00:14:16,879 --> 00:14:21,139
first but it's always a good idea to use

00:14:19,100 --> 00:14:24,110
err objects because because of those

00:14:21,139 --> 00:14:26,209
stack traces the next thing is with

00:14:24,110 --> 00:14:27,800
regard to doing something with errors if

00:14:26,209 --> 00:14:29,870
you're if you're in a normal callback

00:14:27,800 --> 00:14:31,759
situation or if you're in an express

00:14:29,870 --> 00:14:34,519
middleware situation for those of you

00:14:31,759 --> 00:14:36,740
using Express you almost always want to

00:14:34,519 --> 00:14:37,970
just if you get an error send it as the

00:14:36,740 --> 00:14:39,980
first argument of the callback or the

00:14:37,970 --> 00:14:42,079
first argument of your next function and

00:14:39,980 --> 00:14:44,629
then just return after that that will

00:14:42,079 --> 00:14:48,050
allow express is sort of default

00:14:44,629 --> 00:14:50,240
middleware Handler or whatever callback

00:14:48,050 --> 00:14:52,430
handling you have to handle the error in

00:14:50,240 --> 00:14:54,259
the sanest way possible oftentimes we

00:14:52,430 --> 00:14:55,639
ignore errors in middleware I've seen

00:14:54,259 --> 00:14:57,139
and that can lead to really weird

00:14:55,639 --> 00:14:58,759
problems down the road where like you

00:14:57,139 --> 00:15:00,889
think the session should have certain

00:14:58,759 --> 00:15:02,809
values built into it you rely on those

00:15:00,889 --> 00:15:04,790
values to exist and they don't the

00:15:02,809 --> 00:15:07,370
solution to that is just next thing with

00:15:04,790 --> 00:15:10,069
an error which will then cancel that

00:15:07,370 --> 00:15:13,009
whole request flow another important

00:15:10,069 --> 00:15:14,209
thing about error handling that I took

00:15:13,009 --> 00:15:15,500
me a while to understand why this was

00:15:14,209 --> 00:15:17,060
important is

00:15:15,500 --> 00:15:18,860
when you do process that on uncut

00:15:17,060 --> 00:15:21,110
exception when you try to handle those

00:15:18,860 --> 00:15:23,300
errors that do get thrown randomly you

00:15:21,110 --> 00:15:25,730
must always process that exit at the end

00:15:23,300 --> 00:15:26,029
of that and people might ask why do I do

00:15:25,730 --> 00:15:28,700
that

00:15:26,029 --> 00:15:32,149
does anyone not do this or no know about

00:15:28,700 --> 00:15:34,820
the problem here okay was it was it was

00:15:32,149 --> 00:15:37,339
a poorly written question a poorly asked

00:15:34,820 --> 00:15:39,380
question so the issue is if you listen

00:15:37,339 --> 00:15:41,420
for an uncaught exception error and then

00:15:39,380 --> 00:15:42,860
you don't kill the process what you'll

00:15:41,420 --> 00:15:44,660
have is you'll have these connections

00:15:42,860 --> 00:15:45,980
like whoever was made that request that

00:15:44,660 --> 00:15:48,589
killed the server will just be hanging

00:15:45,980 --> 00:15:50,420
there open until the whole thing times

00:15:48,589 --> 00:15:53,720
out and if you were doing something like

00:15:50,420 --> 00:15:55,430
say logging out or you know some sort of

00:15:53,720 --> 00:15:57,050
Security check process that sort of

00:15:55,430 --> 00:15:58,310
never completed you can have really

00:15:57,050 --> 00:15:59,510
weird things like open database

00:15:58,310 --> 00:16:02,360
connections that are just sort of

00:15:59,510 --> 00:16:04,220
leaking off into you know ethereal space

00:16:02,360 --> 00:16:06,949
so it's very important just to exit that

00:16:04,220 --> 00:16:08,540
process let that connection discontinue

00:16:06,949 --> 00:16:10,190
and then have a new server process start

00:16:08,540 --> 00:16:11,570
up immediately to handle it a couple

00:16:10,190 --> 00:16:13,490
other things that we're doing and I can

00:16:11,570 --> 00:16:15,560
show code examples in a second is we

00:16:13,490 --> 00:16:17,540
have a helper function anytime at the

00:16:15,560 --> 00:16:19,040
controller level where you have any

00:16:17,540 --> 00:16:21,560
errors you want to send onto the server

00:16:19,040 --> 00:16:23,390
that that has the standard contract that

00:16:21,560 --> 00:16:25,220
it works with on the server so or with

00:16:23,390 --> 00:16:27,140
the client so anytime that we have an

00:16:25,220 --> 00:16:30,140
error we pass it to this error handler

00:16:27,140 --> 00:16:32,269
the function and we also pass in the

00:16:30,140 --> 00:16:34,310
request and response objects and then

00:16:32,269 --> 00:16:35,959
we'll send that down to the client and a

00:16:34,310 --> 00:16:38,720
really standard way where you always

00:16:35,959 --> 00:16:40,820
know the format of that error that way

00:16:38,720 --> 00:16:43,850
on the client side we have we're using

00:16:40,820 --> 00:16:46,070
backbone and we have our we've

00:16:43,850 --> 00:16:47,899
overridden backbone dot sync to look for

00:16:46,070 --> 00:16:49,339
that error object and it will know how

00:16:47,899 --> 00:16:50,540
to handle it and trigger the appropriate

00:16:49,339 --> 00:16:53,170
errors on the models it's very

00:16:50,540 --> 00:16:56,089
consistent in every single one of our

00:16:53,170 --> 00:16:57,680
you know client-server communications

00:16:56,089 --> 00:16:58,880
errors are always going to be handled in

00:16:57,680 --> 00:17:01,490
the same way and I highly recommend

00:16:58,880 --> 00:17:03,740
doing it like that another important

00:17:01,490 --> 00:17:06,049
fact is you have to log every error we

00:17:03,740 --> 00:17:07,970
also log our client-side errors love

00:17:06,049 --> 00:17:09,020
them not just in files but like in a

00:17:07,970 --> 00:17:10,809
place where you actually see them

00:17:09,020 --> 00:17:14,120
aggregate them that sort of thing and

00:17:10,809 --> 00:17:16,760
and finally don't throw if you have any

00:17:14,120 --> 00:17:19,040
other way to handle an error like I find

00:17:16,760 --> 00:17:20,480
throwing to usually mean I give up and I

00:17:19,040 --> 00:17:21,949
want the server to crash I just don't

00:17:20,480 --> 00:17:23,329
know what else to do but for the most

00:17:21,949 --> 00:17:24,500
part you don't really want to throw if

00:17:23,329 --> 00:17:26,659
there's another way to handle the

00:17:24,500 --> 00:17:28,370
problem so those are the those are the

00:17:26,659 --> 00:17:28,880
conventions before we go into code is

00:17:28,370 --> 00:17:30,530
anyone have

00:17:28,880 --> 00:17:32,510
questions about a specific area of air

00:17:30,530 --> 00:17:36,410
handling in the node stack that I can

00:17:32,510 --> 00:17:38,720
try and show some examples for what's

00:17:36,410 --> 00:17:47,270
your name blue sweater yeah Murphy hi

00:17:38,720 --> 00:17:49,040
Murphy I'm Jamin yeah we have like the

00:17:47,270 --> 00:17:50,900
worst prescribed pattern like the ghetto

00:17:49,040 --> 00:17:54,350
is pattern which is we have window air

00:17:50,900 --> 00:17:57,080
and on window dot on air we basically

00:17:54,350 --> 00:17:58,280
post something to the server and the

00:17:57,080 --> 00:17:59,960
only thing I'll mention briefly about

00:17:58,280 --> 00:18:02,870
that is you need to make sure that your

00:17:59,960 --> 00:18:05,180
errors don't cascade so we make sure

00:18:02,870 --> 00:18:07,070
that per page load you you can only send

00:18:05,180 --> 00:18:09,530
like two or three errors right we have

00:18:07,070 --> 00:18:10,700
this sort of limiter on there that if

00:18:09,530 --> 00:18:12,500
you're in Chrome that'll give you a

00:18:10,700 --> 00:18:14,810
stack trace and it's reasonably helpful

00:18:12,500 --> 00:18:16,250
so we log those at the server level and

00:18:14,810 --> 00:18:17,600
then we have some aggregation that we'll

00:18:16,250 --> 00:18:18,950
go in and we can we can notice when

00:18:17,600 --> 00:18:20,660
there are trends with our client-side

00:18:18,950 --> 00:18:22,100
errors there are some great tools out

00:18:20,660 --> 00:18:24,530
there to do client-side error handling

00:18:22,100 --> 00:18:26,510
that we're not using right now but I'd

00:18:24,530 --> 00:18:27,740
recommend you use them any other

00:18:26,510 --> 00:18:34,070
questions about specifics and then I'll

00:18:27,740 --> 00:18:35,960
go into some details on code we send it

00:18:34,070 --> 00:18:37,310
back to the same server there's problem

00:18:35,960 --> 00:18:38,600
you know obviously there can be some

00:18:37,310 --> 00:18:40,250
problems with that but for the types of

00:18:38,600 --> 00:18:43,940
errors that we're generally dealing with

00:18:40,250 --> 00:18:46,250
which is programmer mistakes or you know

00:18:43,940 --> 00:18:47,900
weird session stuff where the the user

00:18:46,250 --> 00:18:49,250
you know we didn't get all the

00:18:47,900 --> 00:18:50,450
information we expected when we created

00:18:49,250 --> 00:18:53,360
those objects on the client-side it

00:18:50,450 --> 00:18:55,190
works pretty well great let me go into a

00:18:53,360 --> 00:18:58,550
couple specific examples and in the next

00:18:55,190 --> 00:19:02,450
few minutes that I have about about how

00:18:58,550 --> 00:19:06,380
this actually looks in code and let's

00:19:02,450 --> 00:19:08,060
see let's see let's see I'll go back to

00:19:06,380 --> 00:19:09,680
that in a second so this is what our

00:19:08,060 --> 00:19:11,590
basic error handler looks like I don't

00:19:09,680 --> 00:19:13,520
know can you guys all see that okay I

00:19:11,590 --> 00:19:16,790
can't do anything about it actually so

00:19:13,520 --> 00:19:18,860
nevermind who cares so basically we we

00:19:16,790 --> 00:19:21,500
have this function and in every single

00:19:18,860 --> 00:19:24,260
route that we have we just require this

00:19:21,500 --> 00:19:26,510
function and it will it's a total module

00:19:24,260 --> 00:19:27,980
we call it responses and then we'll just

00:19:26,510 --> 00:19:29,360
call responses that handle error and

00:19:27,980 --> 00:19:31,220
we'll pass in an error and request in

00:19:29,360 --> 00:19:32,570
response and that'll do a little bit of

00:19:31,220 --> 00:19:34,610
checking to make sure that hey if we

00:19:32,570 --> 00:19:36,260
don't have a real error object let's

00:19:34,610 --> 00:19:37,490
just call this message it'll just give

00:19:36,260 --> 00:19:39,710
send down an internal server error

00:19:37,490 --> 00:19:42,260
message and then we use res that JSON to

00:19:39,710 --> 00:19:42,800
make sure that we have a consistent JSON

00:19:42,260 --> 00:19:44,450
object go

00:19:42,800 --> 00:19:45,770
back down to the client an important

00:19:44,450 --> 00:19:47,000
thing that anytime you have an error we

00:19:45,770 --> 00:19:48,740
log it so and here I'm just showing

00:19:47,000 --> 00:19:51,590
console dot logging the error and this

00:19:48,740 --> 00:19:53,990
the message and the stack in in real

00:19:51,590 --> 00:19:56,930
life we actually send that to an

00:19:53,990 --> 00:19:58,190
aggregation service internally but we

00:19:56,930 --> 00:20:00,020
can do fancier things with error

00:19:58,190 --> 00:20:01,070
handlers here's the client-side code on

00:20:00,020 --> 00:20:04,610
the error handler so if you have an

00:20:01,070 --> 00:20:05,660
error in your route you just we passed

00:20:04,610 --> 00:20:07,460
that directly the error handler

00:20:05,660 --> 00:20:08,480
otherwise we just continue so let me

00:20:07,460 --> 00:20:10,760
show you we can do that's that's

00:20:08,480 --> 00:20:11,210
interesting with error handlers how many

00:20:10,760 --> 00:20:15,220
of you guys deal with

00:20:11,210 --> 00:20:18,440
internationalization and in your code

00:20:15,220 --> 00:20:21,310
20-ish percent so this is the thing that

00:20:18,440 --> 00:20:24,500
was the hardest problem for us to solve

00:20:21,310 --> 00:20:27,680
we wanted we created these custom error

00:20:24,500 --> 00:20:29,660
objects to handle translation because

00:20:27,680 --> 00:20:31,670
what we found is that it was really

00:20:29,660 --> 00:20:32,840
difficult for us to get like when an

00:20:31,670 --> 00:20:34,910
error happened on the server it was

00:20:32,840 --> 00:20:37,520
difficult for us to to get the correct

00:20:34,910 --> 00:20:38,600
message to the user in their language it

00:20:37,520 --> 00:20:41,270
was really easy for us to create an

00:20:38,600 --> 00:20:45,830
English language error but in order to

00:20:41,270 --> 00:20:47,720
create a translated error message we had

00:20:45,830 --> 00:20:49,550
to do some fancy stuff so he created

00:20:47,720 --> 00:20:50,900
this special error class in this case

00:20:49,550 --> 00:20:52,610
I'm calling it Babel error it's called

00:20:50,900 --> 00:20:54,530
something else at PayPal and it just has

00:20:52,610 --> 00:20:57,260
a get message function added to the

00:20:54,530 --> 00:20:58,850
prototype with that method we use

00:20:57,260 --> 00:21:01,100
something called Makara it's an open

00:20:58,850 --> 00:21:03,020
source library as part of the kraken

00:21:01,100 --> 00:21:08,870
project to do our our translation and

00:21:03,020 --> 00:21:15,640
then in our crap where's my where's my

00:21:08,870 --> 00:21:19,010
other slide no okay in our error handler

00:21:15,640 --> 00:21:20,000
instead of thought I had another slide

00:21:19,010 --> 00:21:23,390
about the error handler for this so

00:21:20,000 --> 00:21:26,270
instead of doing just taking the message

00:21:23,390 --> 00:21:27,950
as is we wrap the thing in the get

00:21:26,270 --> 00:21:29,600
message call and it will translate that

00:21:27,950 --> 00:21:31,400
message if they didn't send in something

00:21:29,600 --> 00:21:35,840
that has if they didn't send in a type

00:21:31,400 --> 00:21:38,030
of babel error then we will we will send

00:21:35,840 --> 00:21:39,470
just the error message in English so it

00:21:38,030 --> 00:21:42,860
works really well we get translated

00:21:39,470 --> 00:21:46,040
error messages down just by using custom

00:21:42,860 --> 00:21:47,720
error objects and it's pretty sweet so I

00:21:46,040 --> 00:21:50,510
like that someone else asks a question

00:21:47,720 --> 00:21:54,860
to me outside about domains and what I

00:21:50,510 --> 00:21:56,000
have to say about domains is TJ Fontaine

00:21:54,860 --> 00:21:56,669
dang it why are you seeing something

00:21:56,000 --> 00:21:58,679
different

00:21:56,669 --> 00:22:00,960
je Fontaine at know de said if you

00:21:58,679 --> 00:22:02,489
really love domains stop TJ Fontaine's a

00:22:00,960 --> 00:22:04,049
node project lead I get the idea that

00:22:02,489 --> 00:22:05,279
it's not something that people are

00:22:04,049 --> 00:22:07,830
really excited about on node core

00:22:05,279 --> 00:22:09,299
anymore I don't know how far where it's

00:22:07,830 --> 00:22:10,980
really going I hope I didn't take the

00:22:09,299 --> 00:22:11,970
quote out of context but that's what I

00:22:10,980 --> 00:22:13,230
understand that it's not something

00:22:11,970 --> 00:22:15,570
that's being pushed very much anymore

00:22:13,230 --> 00:22:17,879
and using the techniques that I

00:22:15,570 --> 00:22:22,350
mentioned today it's not necessary to

00:22:17,879 --> 00:22:24,059
really sorry it's not necessarily to

00:22:22,350 --> 00:22:26,759
really use domains because so much of

00:22:24,059 --> 00:22:28,799
what you can do if you just use the

00:22:26,759 --> 00:22:29,850
callback pattern and handle air is

00:22:28,799 --> 00:22:31,409
pretty consistently you don't

00:22:29,850 --> 00:22:34,279
necessarily need that functionality but

00:22:31,409 --> 00:22:36,840
that's my two cents anyway i'm jaymund

00:22:34,279 --> 00:22:39,769
awesome well I think I'm done thank you

00:22:36,840 --> 00:22:39,769
so much for having me speak

00:23:09,920 --> 00:23:11,980

YouTube URL: https://www.youtube.com/watch?v=p-2fzgfk9AA


