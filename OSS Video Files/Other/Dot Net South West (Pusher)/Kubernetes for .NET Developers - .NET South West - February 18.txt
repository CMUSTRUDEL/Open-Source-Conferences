Title: Kubernetes for .NET Developers - .NET South West - February 18
Publication date: 2018-03-06
Playlist: Dot Net South West
Description: 
	Everyone seems to be talking about Kubernetes with companies seemingly tripping over themselves to support or adopt it.

In this talk we'll introduce Kubernetes, discuss the key concepts of the platform, it's high level architecture and how to get a Kubernetes cluster up and running in minutes.

We'll talk about and demo (hopefully!) deploying .NET applications to Kubernetes and we'll finish with a discussion of the future where you can deploy both legacy and modern .NET applications to the same platform.

If you're interested in Kubernetes and you're not a .NET developer this session still has something for you.

About Shahid Iqbal

Shahid is an independent consultant working with companies to help migrate their existing applications to the cloud and to build natively for the cloud using technologies such as Kubernetes. A .NET developer/architect with nearly a decade of experience he is usually happiest working with the latest technologies and playing around with gadgets or talking about cars.
Captions: 
	00:00:00,030 --> 00:00:03,929
well thank you so much for coming and

00:00:01,319 --> 00:00:09,960
braving the the snow and I've been too

00:00:03,929 --> 00:00:14,490
bad so very briefly I'm I'll switch this

00:00:09,960 --> 00:00:15,960
one first and help so I'm sure it being

00:00:14,490 --> 00:00:17,580
a developer can active for about ten

00:00:15,960 --> 00:00:19,920
years we now work as a kind of freelance

00:00:17,580 --> 00:00:22,529
consultant I'm on Twitter

00:00:19,920 --> 00:00:25,470
i blog occasionally and my email address

00:00:22,529 --> 00:00:26,490
not that easy to read what is on me so

00:00:25,470 --> 00:00:29,760
today I just wanted to talk about

00:00:26,490 --> 00:00:34,020
kubernetes so this is one of the kind of

00:00:29,760 --> 00:00:35,489
hot trends at the moment so to cover the

00:00:34,020 --> 00:00:36,030
kind of overview cuba Nettie's how it

00:00:35,489 --> 00:00:37,380
works

00:00:36,030 --> 00:00:39,480
talk about how you get started with

00:00:37,380 --> 00:00:41,070
clusters and then I kind of want to talk

00:00:39,480 --> 00:00:43,860
around the subject so talk about manage

00:00:41,070 --> 00:00:45,570
to kind of communities providers a quick

00:00:43,860 --> 00:00:47,309
discussion around kind of past versus

00:00:45,570 --> 00:00:49,500
container platforms and then what you

00:00:47,309 --> 00:00:50,940
might want to do in terms of planning so

00:00:49,500 --> 00:00:52,350
in terms of takeaways for today it's

00:00:50,940 --> 00:00:54,899
really around understanding the key

00:00:52,350 --> 00:00:56,730
concepts within communities and I've

00:00:54,899 --> 00:00:57,930
kind of made an assumption that most

00:00:56,730 --> 00:00:59,430
people who attend user groups are

00:00:57,930 --> 00:01:02,039
familiar with docker by now probably

00:00:59,430 --> 00:01:03,570
bored to death of docker one 101 talks

00:01:02,039 --> 00:01:06,420
I'm not going to go into any great

00:01:03,570 --> 00:01:07,770
detail about docker so apologies if you

00:01:06,420 --> 00:01:09,270
don't know that much my daughter feel

00:01:07,770 --> 00:01:13,740
free to grab me afterwards I'm happy to

00:01:09,270 --> 00:01:16,259
explain so kubernetes is a open source

00:01:13,740 --> 00:01:18,479
container orchestration platform it was

00:01:16,259 --> 00:01:21,210
originally created by Google based on

00:01:18,479 --> 00:01:24,030
some of the internal tools one one named

00:01:21,210 --> 00:01:26,100
Borg and one named Omega it's raining

00:01:24,030 --> 00:01:30,270
goats under person open source it's

00:01:26,100 --> 00:01:32,729
hosted on github recently Google donated

00:01:30,270 --> 00:01:35,280
the their code to cloud native computing

00:01:32,729 --> 00:01:37,380
Foundation which is a subset of the

00:01:35,280 --> 00:01:40,439
Linux Foundation so it's no longer owned

00:01:37,380 --> 00:01:43,950
by Google which is why we've probably

00:01:40,439 --> 00:01:45,479
seen a great up taken in kinda adoption

00:01:43,950 --> 00:01:47,759
because it's not home by single company

00:01:45,479 --> 00:01:49,020
anymore before we go too far I'll

00:01:47,759 --> 00:01:51,899
probably just clarify a couple of things

00:01:49,020 --> 00:01:54,270
so you often see kubernetes written as K

00:01:51,899 --> 00:01:54,540
eights and may not know where that comes

00:01:54,270 --> 00:01:56,939
from

00:01:54,540 --> 00:01:59,219
so simply it's okay and then there's

00:01:56,939 --> 00:02:02,700
eight letters in between yes so that's

00:01:59,219 --> 00:02:04,439
all that is when Twitter have the the

00:02:02,700 --> 00:02:06,899
140 character limit I was trying to get

00:02:04,439 --> 00:02:10,410
that adopted but it didn't take off and

00:02:06,899 --> 00:02:12,959
I suspect it won't now as well so I

00:02:10,410 --> 00:02:13,660
mentioned the CN CF know who are they so

00:02:12,959 --> 00:02:19,990
there are subject

00:02:13,660 --> 00:02:21,450
Linux Foundation and they a large number

00:02:19,990 --> 00:02:23,740
of companies are part of that foundation

00:02:21,450 --> 00:02:24,850
so this this is just a screenshot from

00:02:23,740 --> 00:02:27,100
their website these are just the

00:02:24,850 --> 00:02:29,020
Platinum members so these guys have paid

00:02:27,100 --> 00:02:31,600
around three hundred and twenty thousand

00:02:29,020 --> 00:02:32,830
dollars to be a Platinum Member and for

00:02:31,600 --> 00:02:35,710
that they get to contribute to the

00:02:32,830 --> 00:02:38,170
project stair Asterius direction the key

00:02:35,710 --> 00:02:39,970
thing is as you can see obviously we've

00:02:38,170 --> 00:02:41,650
got hey WH go to Joe and go Google cloud

00:02:39,970 --> 00:02:43,540
and then all these other companies as

00:02:41,650 --> 00:02:45,460
well so there isn't a single company

00:02:43,540 --> 00:02:48,520
that's that's kind of directing the

00:02:45,460 --> 00:02:50,350
project and this helps I guess keep

00:02:48,520 --> 00:02:52,090
other people comfortable that it's not

00:02:50,350 --> 00:02:56,070
going to go down a particular Avenue now

00:02:52,090 --> 00:02:59,380
red have recently acquired one of the

00:02:56,070 --> 00:03:01,270
another company and they've actually got

00:02:59,380 --> 00:03:02,830
quite a few people leading a lot of the

00:03:01,270 --> 00:03:04,630
projects within the kubernetes forum so

00:03:02,830 --> 00:03:07,600
there's probably some concerns what that

00:03:04,630 --> 00:03:09,160
might look like in the future so the CN

00:03:07,600 --> 00:03:10,660
CF they host a number of projects

00:03:09,160 --> 00:03:12,850
kubernetes is probably the most well

00:03:10,660 --> 00:03:14,080
known but once you're in this kind of

00:03:12,850 --> 00:03:15,730
realm you'll come across a number of

00:03:14,080 --> 00:03:20,260
other projects so Prometheus is a very

00:03:15,730 --> 00:03:22,000
popular monitoring tool which runs

00:03:20,260 --> 00:03:25,240
within communities and then there's a

00:03:22,000 --> 00:03:27,790
number of other ones probably call are

00:03:25,240 --> 00:03:29,800
things like envoi which is a service

00:03:27,790 --> 00:03:32,350
mesh which is another very kind of hot

00:03:29,800 --> 00:03:33,760
topic within this space and then rocky

00:03:32,350 --> 00:03:34,930
which is an alternative kind of

00:03:33,760 --> 00:03:37,720
container runtime and I'll talk about

00:03:34,930 --> 00:03:39,550
that in a minute so we kind of go back

00:03:37,720 --> 00:03:42,700
to basics Lou and say well why do we

00:03:39,550 --> 00:03:45,580
need it what do we need kubernetes well

00:03:42,700 --> 00:03:46,930
you know I guess most people are Adana

00:03:45,580 --> 00:03:50,110
developers and the pub used to be

00:03:46,930 --> 00:03:51,700
writing full framework applications and

00:03:50,110 --> 00:03:53,650
impossible we'd have to do is we deploy

00:03:51,700 --> 00:03:55,930
these two VMs or physical hosts

00:03:53,650 --> 00:03:58,450
and now you'd create application you

00:03:55,930 --> 00:04:01,930
deploy it's a hexagon but it's not macro

00:03:58,450 --> 00:04:04,209
service and then you need to deploy

00:04:01,930 --> 00:04:05,440
another one to give yourself isolation

00:04:04,209 --> 00:04:08,530
you put it on a different host and then

00:04:05,440 --> 00:04:09,820
same again obviously here we're

00:04:08,530 --> 00:04:11,290
potentially we're wasting a lot of

00:04:09,820 --> 00:04:14,010
resources by having these physical hosts

00:04:11,290 --> 00:04:16,180
and also being kind of dotnet

00:04:14,010 --> 00:04:17,500
traditional net where we're paying for

00:04:16,180 --> 00:04:20,140
Windows licenses and each one of these

00:04:17,500 --> 00:04:22,030
boxes as well so obviously in recent

00:04:20,140 --> 00:04:23,560
times we've kind of moved on to the

00:04:22,030 --> 00:04:25,539
world of docker and that's great so now

00:04:23,560 --> 00:04:27,190
we can put more and more containers

00:04:25,539 --> 00:04:30,820
together so we can make

00:04:27,190 --> 00:04:32,560
better use of our resources but doing

00:04:30,820 --> 00:04:34,900
this kind of manually still has some

00:04:32,560 --> 00:04:37,750
challenges for example your application

00:04:34,900 --> 00:04:40,060
may be bigger than need more resources

00:04:37,750 --> 00:04:41,530
in a single node and the other obvious

00:04:40,060 --> 00:04:43,270
issue is if that physical machine dies

00:04:41,530 --> 00:04:44,710
what do you do with all those containers

00:04:43,270 --> 00:04:47,260
you've got to go and interact with it

00:04:44,710 --> 00:04:48,760
and weave it so very quickly when you're

00:04:47,260 --> 00:04:52,240
in the kind of docker world or container

00:04:48,760 --> 00:04:53,650
world you need something more and that's

00:04:52,240 --> 00:04:55,330
where something like a container

00:04:53,650 --> 00:04:57,310
extraction platform comes in so let's

00:04:55,330 --> 00:05:00,340
imagine we've got whole heap of machines

00:04:57,310 --> 00:05:01,990
the way to think about it kubernetes is

00:05:00,340 --> 00:05:05,140
that it meshes together all of these

00:05:01,990 --> 00:05:08,110
machines into just a blob of computer

00:05:05,140 --> 00:05:10,120
memory and networking and then we don't

00:05:08,110 --> 00:05:12,430
really care about the underlying VMs

00:05:10,120 --> 00:05:14,230
anymore or physical machines we just

00:05:12,430 --> 00:05:19,030
deploy our containers onto the onto that

00:05:14,230 --> 00:05:21,490
platform so in terms of kind of who's

00:05:19,030 --> 00:05:22,900
using kubernetes this is a very recent

00:05:21,490 --> 00:05:25,660
squish I think it took this couple of

00:05:22,900 --> 00:05:26,980
days ago and there's no surprise really

00:05:25,660 --> 00:05:28,510
this quite a lot of big companies on

00:05:26,980 --> 00:05:30,340
there what's interesting is they've

00:05:28,510 --> 00:05:32,710
updated is since the last time I took

00:05:30,340 --> 00:05:34,300
this screenshot so a few companies don't

00:05:32,710 --> 00:05:38,920
show in here anymore for some some

00:05:34,300 --> 00:05:41,470
reason one of interest is the UK Home

00:05:38,920 --> 00:05:43,240
Office use kubernetes as well as I think

00:05:41,470 --> 00:05:45,250
the DVLA and also the Department of

00:05:43,240 --> 00:05:47,860
Justice so always find it quite

00:05:45,250 --> 00:05:49,750
interesting that we've got government

00:05:47,860 --> 00:05:51,900
agencies who are normally traditionally

00:05:49,750 --> 00:05:54,070
known for being quite slow on the uptake

00:05:51,900 --> 00:05:56,460
arguably leading the way in some cases

00:05:54,070 --> 00:05:58,510
compared to a lot of smaller companies

00:05:56,460 --> 00:05:59,919
and partly that's because the

00:05:58,510 --> 00:06:02,919
complexities of kubernetes recently

00:05:59,919 --> 00:06:04,510
there were in terms of hosting

00:06:02,919 --> 00:06:06,550
communities running it what where can

00:06:04,510 --> 00:06:08,470
you run it first option is obviously

00:06:06,550 --> 00:06:12,070
on-premise so you may have your physical

00:06:08,470 --> 00:06:13,900
data centers with racks you can store

00:06:12,070 --> 00:06:14,860
them they're obviously more likely

00:06:13,900 --> 00:06:17,440
you're gonna have some kind of

00:06:14,860 --> 00:06:19,390
infrastructure as a service platform so

00:06:17,440 --> 00:06:21,400
VMI OpenStack and it's full on there you

00:06:19,390 --> 00:06:22,300
can even write in raspberry PI's well

00:06:21,400 --> 00:06:24,330
you're not going to be running your

00:06:22,300 --> 00:06:26,740
business with raspberry PI's hopefully

00:06:24,330 --> 00:06:28,780
you can of course go ahead and spin up

00:06:26,740 --> 00:06:31,720
infrastructure in the cloud and install

00:06:28,780 --> 00:06:33,010
it on there and then the kind of the

00:06:31,720 --> 00:06:34,120
final option is slightly more

00:06:33,010 --> 00:06:36,669
interesting this is where you can have

00:06:34,120 --> 00:06:39,100
managed services so where somebody takes

00:06:36,669 --> 00:06:40,080
ownership of running the platform for

00:06:39,100 --> 00:06:43,349
you and you

00:06:40,080 --> 00:06:46,199
we just access he has a has a software

00:06:43,349 --> 00:06:47,520
platform so and the Red Hat guys have a

00:06:46,199 --> 00:06:50,250
can opener shift platform and then the

00:06:47,520 --> 00:06:51,419
three cloud providers all offer going to

00:06:50,250 --> 00:06:52,889
manage two communities and I'll talk

00:06:51,419 --> 00:06:56,669
about these in a bit more detail in a

00:06:52,889 --> 00:06:58,439
second we talked about cost kubernetes

00:06:56,669 --> 00:07:00,419
is free I mention is open tools you're

00:06:58,439 --> 00:07:02,669
welcome to download and run it now of

00:07:00,419 --> 00:07:05,969
course free and open source doesn't

00:07:02,669 --> 00:07:07,919
always sit very well with enterprises so

00:07:05,969 --> 00:07:09,360
probably one of the most popular

00:07:07,919 --> 00:07:10,740
enterprise kind of versions of Cuba

00:07:09,360 --> 00:07:13,800
Nettie's is openshift

00:07:10,740 --> 00:07:15,300
and this isn't this isn't a kind of rule

00:07:13,800 --> 00:07:17,909
kubernetes if you like it's been wrapped

00:07:15,300 --> 00:07:19,469
by my dread hat into more of an

00:07:17,909 --> 00:07:22,669
enterprise offering sorry it kind of

00:07:19,469 --> 00:07:24,840
builds in deployment pipelines and and

00:07:22,669 --> 00:07:28,259
got authorization various other

00:07:24,840 --> 00:07:30,210
components and then canonical have a

00:07:28,259 --> 00:07:31,800
have a kind of hosted version again they

00:07:30,210 --> 00:07:35,069
they offer kind of commercial support

00:07:31,800 --> 00:07:38,189
and then core OS have their version as

00:07:35,069 --> 00:07:40,020
well but again the other guys we've got

00:07:38,189 --> 00:07:41,069
taken over by Red Hat recently so I'm

00:07:40,020 --> 00:07:43,560
not sure what's going to happen with

00:07:41,069 --> 00:07:45,360
with bath ticket offering and recently

00:07:43,560 --> 00:07:48,300
helped here which is a kind of

00:07:45,360 --> 00:07:49,979
kubernetes consulting company they've

00:07:48,300 --> 00:07:51,300
offered this thing called a proven NT

00:07:49,979 --> 00:07:54,300
subscription where they will support

00:07:51,300 --> 00:07:57,240
kubernetes on any of the main cloud

00:07:54,300 --> 00:07:59,490
providers so they have a lot of kind of

00:07:57,240 --> 00:08:02,129
key kubernetes people working for them

00:07:59,490 --> 00:08:07,979
so that's an interesting proposition as

00:08:02,129 --> 00:08:09,060
well terms of features communities is

00:08:07,979 --> 00:08:10,889
the number of features of just kind of

00:08:09,060 --> 00:08:13,250
picked up a few so obviously we talked

00:08:10,889 --> 00:08:15,779
about contain orchestration we have

00:08:13,250 --> 00:08:17,520
automatic bin packing so this is where

00:08:15,779 --> 00:08:18,960
communities can understand the

00:08:17,520 --> 00:08:20,969
requirements of your containers and

00:08:18,960 --> 00:08:22,469
package them onto your nodes in a

00:08:20,969 --> 00:08:24,270
particular way to make it more efficient

00:08:22,469 --> 00:08:26,460
so be an example you may have a

00:08:24,270 --> 00:08:30,089
container that needs high CPU but low

00:08:26,460 --> 00:08:32,789
memory you may also have a container has

00:08:30,089 --> 00:08:34,229
low CPU and high memory usage those two

00:08:32,789 --> 00:08:36,209
would sit together quite well and it's

00:08:34,229 --> 00:08:38,699
the same node and that's what kubernetes

00:08:36,209 --> 00:08:42,779
will do for you we have horizontal

00:08:38,699 --> 00:08:44,490
scaling we have rolling deployments of

00:08:42,779 --> 00:08:46,920
roll backs we have self-healing service

00:08:44,490 --> 00:08:50,940
discovery back jobs and a number of

00:08:46,920 --> 00:08:53,350
other things in order to provide these

00:08:50,940 --> 00:08:55,540
features there's a number of

00:08:53,350 --> 00:08:57,610
now most of these I'm not even gonna get

00:08:55,540 --> 00:08:58,990
chance to cover in this talk you can

00:08:57,610 --> 00:09:03,040
easily spend today talking about

00:08:58,990 --> 00:09:04,450
communities I'll call out a couple of

00:09:03,040 --> 00:09:07,690
things just have interests so we have

00:09:04,450 --> 00:09:10,600
things we have ingress which is a this

00:09:07,690 --> 00:09:12,640
lazy boot is not gonna work only which

00:09:10,600 --> 00:09:15,730
is kind of layer 7 load balancing we

00:09:12,640 --> 00:09:18,400
have things storage obviously we have

00:09:15,730 --> 00:09:19,650
all back roles based access control we

00:09:18,400 --> 00:09:22,360
have helm which is a package manager

00:09:19,650 --> 00:09:25,000
secrets management so everything you'd

00:09:22,360 --> 00:09:27,990
imagine a kind of comprehensive

00:09:25,000 --> 00:09:33,340
enterprise level platform would have

00:09:27,990 --> 00:09:35,680
kubernetes has it terms of creating a

00:09:33,340 --> 00:09:37,210
cluster as I mentioned it's kind of open

00:09:35,680 --> 00:09:38,640
source you can go and download the

00:09:37,210 --> 00:09:41,590
source code and you can run it yourself

00:09:38,640 --> 00:09:43,690
you can deploy there's a there's a guide

00:09:41,590 --> 00:09:45,130
by Kelsey Hightower kubernetes the hard

00:09:43,690 --> 00:09:46,600
way which gives you step by step

00:09:45,130 --> 00:09:49,150
instructions and how to create a

00:09:46,600 --> 00:09:51,000
kubernetes cluster from scratch you know

00:09:49,150 --> 00:09:53,650
there's also tools like cube ATM and

00:09:51,000 --> 00:09:56,440
cops particularly in AWS world for

00:09:53,650 --> 00:09:58,390
creating clusters terms of working

00:09:56,440 --> 00:10:01,420
locally you've got some communique band

00:09:58,390 --> 00:10:04,660
I'll talk about this in a little one and

00:10:01,420 --> 00:10:06,520
then recently docker racketeering for

00:10:04,660 --> 00:10:08,800
Windows and Mac has has built-in support

00:10:06,520 --> 00:10:11,350
kubernetes of course again you've got

00:10:08,800 --> 00:10:14,560
those managed clusters from the three

00:10:11,350 --> 00:10:16,900
main cloud providers and then canonical

00:10:14,560 --> 00:10:19,540
and rancher crate will have tools which

00:10:16,900 --> 00:10:21,970
are kind of used to create clusters so

00:10:19,540 --> 00:10:23,320
simplify the question of clusters and

00:10:21,970 --> 00:10:27,580
there can be anywhere can be on on

00:10:23,320 --> 00:10:30,580
premise or in the cloud if we dive into

00:10:27,580 --> 00:10:32,230
the architecture a little bit so high

00:10:30,580 --> 00:10:33,640
level architecture is pretty standard

00:10:32,230 --> 00:10:37,540
for you'd expect from a distributed

00:10:33,640 --> 00:10:41,950
system so we have one or more master

00:10:37,540 --> 00:10:43,510
nodes which which is the control plane

00:10:41,950 --> 00:10:44,890
as we call it they're trying to go away

00:10:43,510 --> 00:10:48,010
from the term master node it has

00:10:44,890 --> 00:10:50,380
connotations so more likely ability is

00:10:48,010 --> 00:10:53,980
controlling the management plane this

00:10:50,380 --> 00:10:55,090
exposes an API and the API you interact

00:10:53,980 --> 00:10:56,980
with that through either the user

00:10:55,090 --> 00:11:01,230
interface or the CLI which is called

00:10:56,980 --> 00:11:03,400
cube CTL or cube cuttle or cube cuddle

00:11:01,230 --> 00:11:05,410
because we've spent a decade arguing

00:11:03,400 --> 00:11:07,000
about tabs and spaces that wasn't enough

00:11:05,410 --> 00:11:09,399
and we're now gonna argue about how we

00:11:07,000 --> 00:11:12,660
the sea alight so just just to warn you

00:11:09,399 --> 00:11:16,870
if you in this space that will come up

00:11:12,660 --> 00:11:18,250
so the masternode doesn't host any of

00:11:16,870 --> 00:11:21,639
the work the work is done on the worker

00:11:18,250 --> 00:11:24,730
notes and you notice the master node is

00:11:21,639 --> 00:11:26,519
linux only but the worker nodes can be

00:11:24,730 --> 00:11:30,279
Linux or Windows although the Windows

00:11:26,519 --> 00:11:31,689
functionality is in beta and it's it's

00:11:30,279 --> 00:11:36,370
developing shall we say to label

00:11:31,689 --> 00:11:38,920
fluidity if you dive in the anatomy of

00:11:36,370 --> 00:11:40,540
the master node so master node has an

00:11:38,920 --> 00:11:42,129
API server and this is the main entry

00:11:40,540 --> 00:11:43,839
point so you don't interact with

00:11:42,129 --> 00:11:46,839
kubernetes any other way other than

00:11:43,839 --> 00:11:48,699
through the API server as a scheduler

00:11:46,839 --> 00:11:50,680
and the schedulers job is to basically

00:11:48,699 --> 00:11:53,529
determine where to run your pods where

00:11:50,680 --> 00:11:55,240
to run your containers you have a

00:11:53,529 --> 00:11:56,889
controller manager this is one of the

00:11:55,240 --> 00:11:59,139
main control loops that kubernetes runs

00:11:56,889 --> 00:12:02,500
and its job is to basically monitor the

00:11:59,139 --> 00:12:03,819
cluster and monitor the nodes and that

00:12:02,500 --> 00:12:06,279
fairly recent edition was a cloud

00:12:03,819 --> 00:12:07,750
controller manager and this is kind of

00:12:06,279 --> 00:12:09,790
recognition that when you hosting

00:12:07,750 --> 00:12:12,089
kubernetes on on a cloud platform you

00:12:09,790 --> 00:12:14,350
need to interact with the cloud fabric

00:12:12,089 --> 00:12:16,480
it's a common examples here is you may

00:12:14,350 --> 00:12:19,139
need to provision a load balancer you

00:12:16,480 --> 00:12:21,069
may need to allocate public IP addresses

00:12:19,139 --> 00:12:22,300
originally that code was within the

00:12:21,069 --> 00:12:24,309
controller manager and they recognized

00:12:22,300 --> 00:12:25,930
that this was causing a liver friction

00:12:24,309 --> 00:12:27,490
so they split you having to a controller

00:12:25,930 --> 00:12:30,370
manager Cloud Controller manager

00:12:27,490 --> 00:12:32,199
specifically to deal with that and then

00:12:30,370 --> 00:12:33,699
all of the state for your cluster stored

00:12:32,199 --> 00:12:36,699
in ED CD which is a distributed

00:12:33,699 --> 00:12:38,860
key-value store so that's the the main

00:12:36,699 --> 00:12:40,629
the brains I guess of the of the cluster

00:12:38,860 --> 00:12:44,500
master node die will it be into the

00:12:40,629 --> 00:12:46,149
worker node so worker node has a queue

00:12:44,500 --> 00:12:50,470
blur and this is the main agent that

00:12:46,149 --> 00:12:52,199
communicates with the master nodes you

00:12:50,470 --> 00:12:54,610
have the queue proxy which deals with

00:12:52,199 --> 00:12:57,009
all of the networking aspects of a

00:12:54,610 --> 00:13:00,129
particular node we have the container

00:12:57,009 --> 00:13:02,139
runtime so there's always an assumption

00:13:00,129 --> 00:13:04,089
that I mean I talked about docker

00:13:02,139 --> 00:13:06,129
earlier and doc is obviously the

00:13:04,089 --> 00:13:07,829
de-facto container platform but

00:13:06,129 --> 00:13:10,959
kubernetes isn't closely coupled with

00:13:07,829 --> 00:13:12,579
docker you can actually run kubernetes

00:13:10,959 --> 00:13:14,589
with the different container runtime and

00:13:12,579 --> 00:13:17,019
rocky which I showed I mentioned earlier

00:13:14,589 --> 00:13:20,030
on at the-- with the CNC CN CF projects

00:13:17,019 --> 00:13:21,440
rockets one no I'm

00:13:20,030 --> 00:13:23,000
is pods and the pods actually where your

00:13:21,440 --> 00:13:24,440
containers run there's a couple of

00:13:23,000 --> 00:13:28,160
additional services to do with kind of

00:13:24,440 --> 00:13:30,920
health monitoring and and metrics so got

00:13:28,160 --> 00:13:32,360
pods and they want our pulse so the pods

00:13:30,920 --> 00:13:36,110
actually the abstraction that kubernetes

00:13:32,360 --> 00:13:38,930
uses to contain your containers if you

00:13:36,110 --> 00:13:42,290
like so typically a pod will have one

00:13:38,930 --> 00:13:43,370
container but on occasions there's where

00:13:42,290 --> 00:13:45,580
there's a need you can have more than

00:13:43,370 --> 00:13:49,370
one container with in a pod

00:13:45,580 --> 00:13:52,910
the key thing is the pod is a unit of

00:13:49,370 --> 00:13:54,560
deployment the unit of scale so why

00:13:52,910 --> 00:13:56,990
would you have more than one container

00:13:54,560 --> 00:13:59,180
within a pod so common use case here is

00:13:56,990 --> 00:14:00,800
where you have these the secondary

00:13:59,180 --> 00:14:03,410
containers sometimes called a sidecar

00:14:00,800 --> 00:14:05,810
container and this is where it could be

00:14:03,410 --> 00:14:06,830
doing it a kind of side job from the

00:14:05,810 --> 00:14:08,480
main container okay

00:14:06,830 --> 00:14:10,130
example of this could be your

00:14:08,480 --> 00:14:13,040
application containers writing logs to a

00:14:10,130 --> 00:14:14,210
log file location and the sidecar

00:14:13,040 --> 00:14:16,010
containers grabbing those logs and

00:14:14,210 --> 00:14:19,640
pushing them to some kind of log saver

00:14:16,010 --> 00:14:21,650
some way if they're within the same pod

00:14:19,640 --> 00:14:23,180
then they're sharing Network

00:14:21,650 --> 00:14:25,250
communications of a local host you can't

00:14:23,180 --> 00:14:29,120
bind the same port address as you'd

00:14:25,250 --> 00:14:31,130
imagine now kind of talked about various

00:14:29,120 --> 00:14:33,500
components it's when you get into

00:14:31,130 --> 00:14:35,210
kubernetes you can get a little bit lost

00:14:33,500 --> 00:14:37,730
in terms of where all the bits fit

00:14:35,210 --> 00:14:39,080
together so I just want to touch on them

00:14:37,730 --> 00:14:40,820
here and we'll go into bit more detail

00:14:39,080 --> 00:14:43,520
on some of these later on in the

00:14:40,820 --> 00:14:45,410
presentation as well but broadly

00:14:43,520 --> 00:14:47,210
speaking we have some calling ingress

00:14:45,410 --> 00:14:49,370
and this is your kind of layer seven

00:14:47,210 --> 00:14:51,470
load balancer so ingress can span more

00:14:49,370 --> 00:14:54,020
than one service its job is basically

00:14:51,470 --> 00:14:56,210
direct traffic based on whether it's the

00:14:54,020 --> 00:14:59,060
hostname whether it's the headers

00:14:56,210 --> 00:15:01,250
whether it's packet fragment of the

00:14:59,060 --> 00:15:03,290
address it can route traffic to your

00:15:01,250 --> 00:15:05,930
service services a effectively service

00:15:03,290 --> 00:15:07,370
discovery over your application your

00:15:05,930 --> 00:15:10,400
application is packaged up as a

00:15:07,370 --> 00:15:12,200
deployment the deployment will contain a

00:15:10,400 --> 00:15:15,500
replica set which will have multiple

00:15:12,200 --> 00:15:17,510
replicas of your application which of

00:15:15,500 --> 00:15:19,550
the pods the pods can contain multiple

00:15:17,510 --> 00:15:22,790
containers and a container can bind

00:15:19,550 --> 00:15:24,320
volume secrets called config Maps so

00:15:22,790 --> 00:15:25,790
don't worry if you don't get all of

00:15:24,320 --> 00:15:29,000
those right waves just to give you an

00:15:25,790 --> 00:15:31,220
idea of how the things fit together kind

00:15:29,000 --> 00:15:33,080
of changing tax law we wanted to dive a

00:15:31,220 --> 00:15:33,950
little bit deeper into the managed

00:15:33,080 --> 00:15:37,010
kubernetes

00:15:33,950 --> 00:15:41,390
is so people familiar with kind of a KSC

00:15:37,010 --> 00:15:44,030
KS and GK so these are managed

00:15:41,390 --> 00:15:47,030
kubernetes services provided by the main

00:15:44,030 --> 00:15:49,880
cloud providers a key feature of these

00:15:47,030 --> 00:15:52,010
is they manage the masternodes for you

00:15:49,880 --> 00:15:54,620
so that that's the kind of critical part

00:15:52,010 --> 00:15:56,630
of a cluster and all of these platforms

00:15:54,620 --> 00:15:57,980
they take that away from you they take

00:15:56,630 --> 00:16:00,620
the concern of running that way from you

00:15:57,980 --> 00:16:01,910
they make it highly available they're

00:16:00,620 --> 00:16:04,670
responsible for making sure it's backed

00:16:01,910 --> 00:16:06,350
up and upgraded so it's significantly

00:16:04,670 --> 00:16:09,290
remove this removes the complexity of

00:16:06,350 --> 00:16:12,860
running a cluster and sending in the

00:16:09,290 --> 00:16:14,690
case of Azure and Google you don't pay

00:16:12,860 --> 00:16:16,070
for those masternodes so you're only

00:16:14,690 --> 00:16:17,750
paying for the infrastructure that

00:16:16,070 --> 00:16:19,220
you're using as your worker nodes so

00:16:17,750 --> 00:16:21,560
it's exactly the same as I as theirs

00:16:19,220 --> 00:16:23,530
it's literally no additional cost to run

00:16:21,560 --> 00:16:25,640
a kubernetes cluster over running VMs

00:16:23,530 --> 00:16:27,980
themselves practice cheaper because not

00:16:25,640 --> 00:16:29,660
paying for these now I was in haven't as

00:16:27,980 --> 00:16:31,790
far as I know having announcer pricing

00:16:29,660 --> 00:16:34,280
is still in preview it's in limited

00:16:31,790 --> 00:16:37,520
preview so I presume they'll follow suit

00:16:34,280 --> 00:16:38,900
because as you did that first and I

00:16:37,520 --> 00:16:42,800
think Google then changed their pricing

00:16:38,900 --> 00:16:44,360
to to kind of Alliance so that's the

00:16:42,800 --> 00:16:45,830
kind of managed services if you want to

00:16:44,360 --> 00:16:48,800
work locally and I've touched on this

00:16:45,830 --> 00:16:51,290
before good option is is some community

00:16:48,800 --> 00:16:53,090
up so the doc of a window scaling is is

00:16:51,290 --> 00:16:55,910
in the edge build at the moment so it's

00:16:53,090 --> 00:16:57,530
it's a little bit hairy I'm not going to

00:16:55,910 --> 00:17:00,200
use it today for this time I'll show you

00:16:57,530 --> 00:17:00,920
very briefly mini cube is another

00:17:00,200 --> 00:17:03,140
alternative

00:17:00,920 --> 00:17:05,329
in essence both of them crate use a VM

00:17:03,140 --> 00:17:07,550
and they create a single node kubernetes

00:17:05,329 --> 00:17:08,870
cluster sometimes interacting with it

00:17:07,550 --> 00:17:12,890
it's the same experience as you would on

00:17:08,870 --> 00:17:14,030
a fully blown cluster same API calls but

00:17:12,890 --> 00:17:20,030
I've see you don't get the multi node

00:17:14,030 --> 00:17:23,560
experience so let's dive into quick demo

00:17:20,030 --> 00:17:26,030
of mini cube crucial you doc you just

00:17:23,560 --> 00:17:30,110
kiss you familiar with it so the edge

00:17:26,030 --> 00:17:31,700
builds if you go to the doctor tooling

00:17:30,110 --> 00:17:36,350
you can download the edge from the edge

00:17:31,700 --> 00:17:38,240
channel here I once you installed it it

00:17:36,350 --> 00:17:41,240
doesn't enable the kubernetes by default

00:17:38,240 --> 00:17:43,460
you have to go to the settings you see a

00:17:41,240 --> 00:17:46,220
new option for kubernetes there and then

00:17:43,460 --> 00:17:47,670
you see enable it and you can see it's

00:17:46,220 --> 00:17:49,260
running at the moment

00:17:47,670 --> 00:17:50,790
last time I hope they say I had to

00:17:49,260 --> 00:17:53,490
understand wind solar stopped working

00:17:50,790 --> 00:17:56,250
sir I'm not going to use that for this

00:17:53,490 --> 00:17:58,860
demo said I'm using mini cube now

00:17:56,250 --> 00:18:01,170
meaning key we can find on github and

00:17:58,860 --> 00:18:03,120
the deans installations all the

00:18:01,170 --> 00:18:06,299
instructions all therefore I'm running

00:18:03,120 --> 00:18:07,980
it on Windows or Mac you can run it on

00:18:06,299 --> 00:18:11,760
you need hyper-v enabled basically on

00:18:07,980 --> 00:18:15,299
your machine or VirtualBox I obviously

00:18:11,760 --> 00:18:17,250
prefer hyper-v easiest way to get

00:18:15,299 --> 00:18:18,900
started is just use chocolaty to install

00:18:17,250 --> 00:18:24,150
it I wouldn't bother trying to do

00:18:18,900 --> 00:18:28,700
manually it's just just far easier once

00:18:24,150 --> 00:18:28,700
you install him it was installs the

00:18:29,179 --> 00:18:37,830
tooling and then I can just check it's

00:18:35,760 --> 00:18:41,130
working now mini cube has been Libby

00:18:37,830 --> 00:18:43,049
flaky recently as well I've had one one

00:18:41,130 --> 00:18:45,090
talk a list where we're kind of gave up

00:18:43,049 --> 00:18:49,080
the ghost so got fingers crossed for

00:18:45,090 --> 00:18:50,490
this talk a roll quick blog I found what

00:18:49,080 --> 00:18:52,320
I think was a cause I mean I I wrote a

00:18:50,490 --> 00:18:53,179
blog article about a which are whole

00:18:52,320 --> 00:18:58,260
link to later

00:18:53,179 --> 00:18:59,850
so I've earliest the cube CTL come on to

00:18:58,260 --> 00:19:03,090
K so we can stop arguing over how to

00:18:59,850 --> 00:19:05,010
pronounce it so I can do is I can say

00:19:03,090 --> 00:19:07,830
cluster info and that just gives me a

00:19:05,010 --> 00:19:11,850
just a very brief kind of indication of

00:19:07,830 --> 00:19:15,929
where that clue master is running if I

00:19:11,850 --> 00:19:19,309
say ok get nodes and if I can type

00:19:15,929 --> 00:19:22,049
you'll see there's a single node there

00:19:19,309 --> 00:19:24,179
so if I want to get an application and

00:19:22,049 --> 00:19:25,980
up and running so I'm going to do is I'm

00:19:24,179 --> 00:19:27,480
going to type some imperative commands

00:19:25,980 --> 00:19:32,160
and I'll explain why you shouldn't do

00:19:27,480 --> 00:19:35,760
that and no classic demo fashion so if I

00:19:32,160 --> 00:19:38,130
want to run a container I'll do is - a

00:19:35,760 --> 00:19:41,970
keep see - run I'm going to call it

00:19:38,130 --> 00:19:45,929
hello world and on a reference an image

00:19:41,970 --> 00:19:48,200
so I've gone and pushed an image to taka

00:19:45,929 --> 00:19:48,200
hub

00:19:50,910 --> 00:20:02,580
and I'm gonna ask one port 80 so see

00:20:00,060 --> 00:20:04,140
this is a diploma crated I'll keep

00:20:02,580 --> 00:20:07,880
clearing this so it's at the top now if

00:20:04,140 --> 00:20:11,250
I say if I ask for the pods should see

00:20:07,880 --> 00:20:16,260
we've got one pod running as of nine

00:20:11,250 --> 00:20:18,240
seconds ago and it's one of one now if I

00:20:16,260 --> 00:20:19,800
want you to connect cess this pod what

00:20:18,240 --> 00:20:22,140
we need to do is expose you as a service

00:20:19,800 --> 00:20:29,160
now another shortcut you can do there is

00:20:22,140 --> 00:20:32,730
you can ask this exposed so I'm going to

00:20:29,160 --> 00:20:40,680
expose so I'm looking down because I've

00:20:32,730 --> 00:20:43,610
got some notes just to remind me and I

00:20:40,680 --> 00:20:47,010
want to expose this as type load hunter

00:20:43,610 --> 00:20:52,140
I'll explain what these are in a little

00:20:47,010 --> 00:20:55,200
bit so the I think the API is quite

00:20:52,140 --> 00:20:56,670
intuitive it's kind of get to Pavlik if

00:20:55,200 --> 00:20:58,290
things describe if you want to see more

00:20:56,670 --> 00:21:01,740
details it's fairly standard and then

00:20:58,290 --> 00:21:04,020
it's always can cube CT or get and in

00:21:01,740 --> 00:21:07,170
this case I want to get the service SVC

00:21:04,020 --> 00:21:09,120
I can see my service has been created

00:21:07,170 --> 00:21:11,250
it's got a cluster IP address and it's

00:21:09,120 --> 00:21:12,960
got a pending our peepers now because

00:21:11,250 --> 00:21:14,310
this is running locally it's not going

00:21:12,960 --> 00:21:16,050
to get a public IP address because

00:21:14,310 --> 00:21:20,210
there's nothing to provide its own mini

00:21:16,050 --> 00:21:23,160
cube kind of gives you an option to

00:21:20,210 --> 00:21:26,790
basically in essence it's running on the

00:21:23,160 --> 00:21:28,020
VMS IP address at that particular kind

00:21:26,790 --> 00:21:30,510
of three one one two one

00:21:28,020 --> 00:21:36,440
for what a shortcut really is if you

00:21:30,510 --> 00:21:36,440
just ask mini cube to give you the URL

00:21:37,250 --> 00:21:47,160
it's behaving itself I'll give you back

00:21:39,570 --> 00:21:51,030
all if I pop over to a browser you can

00:21:47,160 --> 00:21:55,820
see I spent literally zero time on this

00:21:51,030 --> 00:21:57,720
app down here you can see that we have

00:21:55,820 --> 00:22:00,090
the machine name so this is

00:21:57,720 --> 00:22:00,960
environmental machine name and what

00:22:00,090 --> 00:22:03,200
you'll actually notice is that

00:22:00,960 --> 00:22:04,460
corresponds to the

00:22:03,200 --> 00:22:08,820
[Music]

00:22:04,460 --> 00:22:11,280
the pod name so if I wanted to scale

00:22:08,820 --> 00:22:13,380
this so I've got a single instance

00:22:11,280 --> 00:22:22,400
running and I want to scale it um I can

00:22:13,380 --> 00:22:22,400
do is tell it to scale deployments oops

00:22:22,820 --> 00:22:28,640
so again I'm referencing the resource

00:22:25,170 --> 00:22:28,640
type and then I want to tell it to say

00:22:33,860 --> 00:22:40,290
now if I do get pods are found quick

00:22:36,780 --> 00:22:42,720
enough still slow you can see now

00:22:40,290 --> 00:22:45,270
there's four pods running if I pop back

00:22:42,720 --> 00:22:48,450
to the browser and if it's behaving

00:22:45,270 --> 00:22:51,990
itself if i refresh often enough you

00:22:48,450 --> 00:22:53,490
should and it's not doing it but but

00:22:51,990 --> 00:22:57,570
trust me it would you would load

00:22:53,490 --> 00:23:00,960
balanced across now key concept will

00:22:57,570 --> 00:23:02,250
include net is desired state so we've

00:23:00,960 --> 00:23:04,440
told kubernetes that we want four

00:23:02,250 --> 00:23:05,880
replicas kubernetes job is to make sure

00:23:04,440 --> 00:23:08,460
there's four replicas if something

00:23:05,880 --> 00:23:10,200
happens to change that then this will go

00:23:08,460 --> 00:23:13,410
ahead and make sure this worked because

00:23:10,200 --> 00:23:15,840
they will act so if I delete one of

00:23:13,410 --> 00:23:19,640
these pods so let's just delete that one

00:23:15,840 --> 00:23:19,640
I'll scroll up on here

00:23:25,350 --> 00:23:30,630
and then if I'm quick enough should see

00:23:28,710 --> 00:23:33,870
that one's terminating that there's four

00:23:30,630 --> 00:23:35,100
running so it spun up the fourth one

00:23:33,870 --> 00:23:37,019
immediately and that one's now

00:23:35,100 --> 00:23:39,059
terminating so when you kill a pot like

00:23:37,019 --> 00:23:40,559
that it gives it I think it's by default

00:23:39,059 --> 00:23:43,080
three seconds it gives it to finish

00:23:40,559 --> 00:23:45,450
serving in traffic before I actually he

00:23:43,080 --> 00:23:46,799
also stops takes out the load balancer

00:23:45,450 --> 00:23:49,470
let's say finish

00:23:46,799 --> 00:23:59,519
many sends a termination signal so it

00:23:49,470 --> 00:24:01,950
tries to do in a in a safe way the so I

00:23:59,519 --> 00:24:03,450
think that's that's everything on mini

00:24:01,950 --> 00:24:06,659
cube for now so let's just flip back to

00:24:03,450 --> 00:24:07,679
the slides so you saw me kind of typing

00:24:06,659 --> 00:24:09,779
at the command line and we know that's

00:24:07,679 --> 00:24:11,370
not the way to do it that's error-prone

00:24:09,779 --> 00:24:15,299
you saw me miss type a couple of times

00:24:11,370 --> 00:24:16,679
so kubernetes uses muscle Yama followed

00:24:15,299 --> 00:24:18,409
you can actually be json files as well

00:24:16,679 --> 00:24:21,929
but yeah mel is the current hotness so

00:24:18,409 --> 00:24:23,730
everyone really uses Yama falls so Yama

00:24:21,929 --> 00:24:26,220
files define the application structure

00:24:23,730 --> 00:24:28,399
and the resources application needs and

00:24:26,220 --> 00:24:30,450
this is the desired state of application

00:24:28,399 --> 00:24:32,850
so way to think about this is your

00:24:30,450 --> 00:24:34,230
containers the application and then the

00:24:32,850 --> 00:24:37,159
Yama files the infrastructure as code

00:24:34,230 --> 00:24:39,600
you kind of ignore the cluster bit of it

00:24:37,159 --> 00:24:41,909
so these yarmulkes should be in source

00:24:39,600 --> 00:24:43,740
control they are your deployment these

00:24:41,909 --> 00:24:45,149
are your petitions and this is to your

00:24:43,740 --> 00:24:47,879
to your question earlier this is partly

00:24:45,149 --> 00:24:50,940
where you'd be able to move clusters but

00:24:47,879 --> 00:24:53,789
basically re submitting these AMA files

00:24:50,940 --> 00:24:56,429
to new cluster then we take a look at

00:24:53,789 --> 00:24:58,230
one of the Jama files so you can see

00:24:56,429 --> 00:24:59,480
this is a deployment fall so I showed

00:24:58,230 --> 00:25:03,179
you that deployment is the cunning

00:24:59,480 --> 00:25:05,759
encompassing object I won't call out all

00:25:03,179 --> 00:25:07,620
of the the bits on here but the key

00:25:05,759 --> 00:25:09,090
thing is the the files are all very

00:25:07,620 --> 00:25:11,820
similar structures and the coin tells

00:25:09,090 --> 00:25:12,559
you the resource so we've given it some

00:25:11,820 --> 00:25:16,830
labels

00:25:12,559 --> 00:25:17,940
kind of act HW over here we've told it

00:25:16,830 --> 00:25:22,470
we want a replica

00:25:17,940 --> 00:25:23,940
single replica and then down here is the

00:25:22,470 --> 00:25:26,039
specification for the for the container

00:25:23,940 --> 00:25:28,289
itself so there's the image in this in

00:25:26,039 --> 00:25:30,210
this case is on docker hubs public repo

00:25:28,289 --> 00:25:32,279
you can have private repositories as

00:25:30,210 --> 00:25:34,559
well if you wanted to and then we

00:25:32,279 --> 00:25:37,200
reference the container pool now if we

00:25:34,559 --> 00:25:39,000
wanted to deploy this again we can run

00:25:37,200 --> 00:25:40,770
the cube CTO command

00:25:39,000 --> 00:25:42,840
this time we the created a chef and we

00:25:40,770 --> 00:25:44,280
pass it the Yamaha that you notice we're

00:25:42,840 --> 00:25:45,780
not telling you what particular resource

00:25:44,280 --> 00:25:51,060
to deploy all of that's contained in the

00:25:45,780 --> 00:25:52,890
file itself so this is automatable once

00:25:51,060 --> 00:25:55,440
we've deployed application how do we can

00:25:52,890 --> 00:25:56,880
access it so let's say we've got in this

00:25:55,440 --> 00:25:58,500
instance I've got this application go

00:25:56,880 --> 00:26:00,210
three instances of this particular up

00:25:58,500 --> 00:26:02,220
here it's running on three different

00:26:00,210 --> 00:26:04,080
nodes each one's got its own internal IP

00:26:02,220 --> 00:26:06,330
address and I've an application that

00:26:04,080 --> 00:26:08,370
wants to talk to that I could do the

00:26:06,330 --> 00:26:10,880
knife thing which is discover the IP

00:26:08,370 --> 00:26:13,020
address somehow and talk to it directly

00:26:10,880 --> 00:26:15,630
now of course I mentioned before what

00:26:13,020 --> 00:26:17,550
happens if no dice when the case there

00:26:15,630 --> 00:26:19,200
are no dice kubernetes will detect that

00:26:17,550 --> 00:26:21,270
we said three instances and there are

00:26:19,200 --> 00:26:23,640
now two so we'll go and spin up another

00:26:21,270 --> 00:26:26,220
instance of that pod on one of the

00:26:23,640 --> 00:26:27,720
remaining nodes more than likely at that

00:26:26,220 --> 00:26:28,920
time I'll get a different IP address so

00:26:27,720 --> 00:26:30,990
obviously our application will now be

00:26:28,920 --> 00:26:33,380
broken it's fairly standard stuff I'm

00:26:30,990 --> 00:26:36,360
short so those of you familiar with

00:26:33,380 --> 00:26:38,220
systems development so the way around

00:26:36,360 --> 00:26:40,140
this is you use some color service you

00:26:38,220 --> 00:26:42,510
saw me doing this through the command

00:26:40,140 --> 00:26:44,550
line so service service is basically a

00:26:42,510 --> 00:26:47,160
well-known endpoint for your application

00:26:44,550 --> 00:26:49,980
gives you a DNS so DNS endpoint for this

00:26:47,160 --> 00:26:51,330
service discovery application talks to

00:26:49,980 --> 00:26:53,100
our service and then that service load

00:26:51,330 --> 00:26:56,700
balances the requests across the

00:26:53,100 --> 00:26:59,250
underlying pods in this situation if no

00:26:56,700 --> 00:27:01,860
ties doesn't matter because kubernetes

00:26:59,250 --> 00:27:04,320
will create the missing pod on another

00:27:01,860 --> 00:27:05,940
node your service will discover that and

00:27:04,320 --> 00:27:07,860
keep a load balancing across it so your

00:27:05,940 --> 00:27:09,030
application should be unaffected

00:27:07,860 --> 00:27:12,480
particularly if you've got more than one

00:27:09,030 --> 00:27:15,450
instance running so in terms of

00:27:12,480 --> 00:27:16,830
deploying a service the Yama file for

00:27:15,450 --> 00:27:18,540
service looks again very similar in

00:27:16,830 --> 00:27:21,570
terms of structure this time we're

00:27:18,540 --> 00:27:23,940
telling it to service reusing labels

00:27:21,570 --> 00:27:26,280
again and the the bit of problem on

00:27:23,940 --> 00:27:27,720
Koala here is this selector so the nice

00:27:26,280 --> 00:27:30,710
thing that could net is this service is

00:27:27,720 --> 00:27:33,600
a loosely coupled loosely coupled rather

00:27:30,710 --> 00:27:35,580
to the underlying pods so they don't

00:27:33,600 --> 00:27:37,410
have any way it doesn't mention the

00:27:35,580 --> 00:27:39,480
specific pods that the service is not

00:27:37,410 --> 00:27:43,230
banning single cross what it defines is

00:27:39,480 --> 00:27:45,600
this concept of a selector so the the

00:27:43,230 --> 00:27:47,640
pods have labels and the selector here

00:27:45,600 --> 00:27:49,890
tells us the service basically some

00:27:47,640 --> 00:27:51,690
predicates say find all the pods to have

00:27:49,890 --> 00:27:52,650
this particular label and load balance

00:27:51,690 --> 00:27:54,330
across them

00:27:52,650 --> 00:27:55,980
so the service doesn't know specifically

00:27:54,330 --> 00:27:57,450
which pods disk analog balance - it

00:27:55,980 --> 00:28:00,780
finds them at the time they're running

00:27:57,450 --> 00:28:02,280
if a new pod comes into the into a node

00:28:00,780 --> 00:28:04,200
that has the same label it'll become

00:28:02,280 --> 00:28:06,930
part of the load balancing as well

00:28:04,200 --> 00:28:08,760
so it's loosely coupled and this this

00:28:06,930 --> 00:28:12,780
gives the option to doing clever things

00:28:08,760 --> 00:28:15,390
with potentially with canary now the

00:28:12,780 --> 00:28:17,820
load balancers are kind of basic kind of

00:28:15,390 --> 00:28:19,530
layer 3 layer 4 load balancers so it's

00:28:17,820 --> 00:28:21,120
loading anything too clever there's the

00:28:19,530 --> 00:28:24,090
ingress which you won't really get

00:28:21,120 --> 00:28:26,370
talked about too much today which gives

00:28:24,090 --> 00:28:30,059
you the default clever kind of load

00:28:26,370 --> 00:28:31,710
balancing that you'd expect ok so that's

00:28:30,059 --> 00:28:34,020
kind of accessing your service so we've

00:28:31,710 --> 00:28:36,300
got our application we've deployed it we

00:28:34,020 --> 00:28:39,420
can access it and now we want to update

00:28:36,300 --> 00:28:42,480
it so how do we do updates so

00:28:39,420 --> 00:28:45,750
communities has support for performing

00:28:42,480 --> 00:28:48,960
zero downtime rolling updates so the the

00:28:45,750 --> 00:28:51,840
kind of gold standard if you like you

00:28:48,960 --> 00:28:53,580
can also do Bluegreen deployments and it

00:28:51,840 --> 00:28:56,309
does this through a reasonably simple

00:28:53,580 --> 00:28:57,600
API so in essence it defines two

00:28:56,309 --> 00:29:00,090
parameters which I'll talk about in a

00:28:57,600 --> 00:29:02,460
second and what communities does is you

00:29:00,090 --> 00:29:04,260
will go ahead and start rolling out a

00:29:02,460 --> 00:29:06,390
new version of your application

00:29:04,260 --> 00:29:09,090
your waits for the application to come

00:29:06,390 --> 00:29:11,280
up be ready be healthy and then it will

00:29:09,090 --> 00:29:12,990
start taking down all pods all the time

00:29:11,280 --> 00:29:16,410
the load balance is now routing traffic

00:29:12,990 --> 00:29:17,970
to the relevant pods so the two

00:29:16,410 --> 00:29:20,610
parameters are you juggle when you do

00:29:17,970 --> 00:29:22,740
this is max unavailable which says

00:29:20,610 --> 00:29:25,200
basically these are the number of my

00:29:22,740 --> 00:29:27,780
current application pods I want to take

00:29:25,200 --> 00:29:29,250
down during the upgrade max Serge says

00:29:27,780 --> 00:29:31,890
these are how many additional pause I

00:29:29,250 --> 00:29:33,090
want to create as part of the update and

00:29:31,890 --> 00:29:36,630
now both of these numbers can be a

00:29:33,090 --> 00:29:37,980
percentage or actual number with those

00:29:36,630 --> 00:29:41,309
two numbers you strike a balance between

00:29:37,980 --> 00:29:43,500
how fast you roll out your update versus

00:29:41,309 --> 00:29:46,470
your service capacity so for example if

00:29:43,500 --> 00:29:49,590
you've got a high volume service that's

00:29:46,470 --> 00:29:52,470
you can't really afford to lose 30% of

00:29:49,590 --> 00:29:53,820
your traffic handling capability you

00:29:52,470 --> 00:29:56,460
wouldn't set the max unavailable you

00:29:53,820 --> 00:29:57,960
would keep that a low number if you want

00:29:56,460 --> 00:30:00,630
to draw like really fast you'd sent max

00:29:57,960 --> 00:30:03,660
surge to be higher I'll show some

00:30:00,630 --> 00:30:06,030
examples of these in a second you can

00:30:03,660 --> 00:30:07,950
also then roll back deployments as well

00:30:06,030 --> 00:30:10,650
from the c'mon I'll show these things in

00:30:07,950 --> 00:30:12,300
a second I just want to call out that as

00:30:10,650 --> 00:30:14,610
six years kind of zero downtime

00:30:12,300 --> 00:30:16,590
deployments are there not kind of magic

00:30:14,610 --> 00:30:18,690
there's no magic source in communities I

00:30:16,590 --> 00:30:20,520
will solve the data problem if any of

00:30:18,690 --> 00:30:23,850
you've tried doing this and if you've

00:30:20,520 --> 00:30:25,560
got schema schema changes or breaking

00:30:23,850 --> 00:30:27,420
changes in your schema as part of your

00:30:25,560 --> 00:30:29,280
deployment kubernetes not going to fix

00:30:27,420 --> 00:30:30,480
that for you at some point during a

00:30:29,280 --> 00:30:31,980
rolling update you will be serving

00:30:30,480 --> 00:30:34,080
traffic to two versions of your

00:30:31,980 --> 00:30:36,510
application and your application needs

00:30:34,080 --> 00:30:39,510
to deal with that so just want to make

00:30:36,510 --> 00:30:41,640
sure that was clear so we take a look an

00:30:39,510 --> 00:30:44,670
example of other kind of rolling update

00:30:41,640 --> 00:30:47,670
so we've got this service let's go three

00:30:44,670 --> 00:30:49,860
instances of it we've we've this is a

00:30:47,670 --> 00:30:51,930
service which is go critical capacity we

00:30:49,860 --> 00:30:54,150
can't afford to take any capacity down

00:30:51,930 --> 00:30:55,560
moutoku Baudette is we want have max

00:30:54,150 --> 00:31:00,690
urgent one so what will happen during

00:30:55,560 --> 00:31:02,850
the upgrade is overlapping the upgrade

00:31:00,690 --> 00:31:04,950
is another pot is created

00:31:02,850 --> 00:31:07,620
so we've now surged up to for someone

00:31:04,950 --> 00:31:11,220
more than the max when that pot is

00:31:07,620 --> 00:31:14,250
healthy and responding to the health

00:31:11,220 --> 00:31:16,440
checks it will remove one of these so

00:31:14,250 --> 00:31:19,910
now we're back to our three original

00:31:16,440 --> 00:31:24,030
capacity and repeat the process for

00:31:19,910 --> 00:31:26,490
three eventually we'll have all of the

00:31:24,030 --> 00:31:28,560
VT pods running so no point did we lose

00:31:26,490 --> 00:31:30,420
the original capacity of our cluster but

00:31:28,560 --> 00:31:34,470
the rollout was a bit slower for that

00:31:30,420 --> 00:31:37,680
reason what you can do is you can do

00:31:34,470 --> 00:31:39,600
Bluegreen deployments using the same

00:31:37,680 --> 00:31:42,870
concepts so in this case what we've said

00:31:39,600 --> 00:31:45,690
is we want zero max unavailable but we

00:31:42,870 --> 00:31:47,880
want to search to 100% so so you

00:31:45,690 --> 00:31:51,480
probably guess communities will then

00:31:47,880 --> 00:31:53,580
create 100% of the new service wait for

00:31:51,480 --> 00:31:55,650
those to become healthy then I will take

00:31:53,580 --> 00:32:01,530
the other ones away and that's your real

00:31:55,650 --> 00:32:03,000
agreement so switch over so the next

00:32:01,530 --> 00:32:05,280
time I'm going to do is in a case or

00:32:03,000 --> 00:32:08,100
thought just quickly mention a case I'm

00:32:05,280 --> 00:32:11,760
kind of as your guy so it's the plaid of

00:32:08,100 --> 00:32:13,770
choice for me so very briefly I just

00:32:11,760 --> 00:32:15,480
want to mention why Kay so I've

00:32:13,770 --> 00:32:16,890
mentioned the management nodes

00:32:15,480 --> 00:32:18,660
they're not even visible so you can't

00:32:16,890 --> 00:32:19,559
access them can't do anything with them

00:32:18,660 --> 00:32:20,700
so this this loom

00:32:19,559 --> 00:32:23,909
some options when you want to use

00:32:20,700 --> 00:32:25,679
certain feature flags you can run

00:32:23,909 --> 00:32:27,749
multiple different communities versions

00:32:25,679 --> 00:32:29,100
and you can upgrade if you're brave

00:32:27,749 --> 00:32:31,409
enough you can upgrade your cluster in

00:32:29,100 --> 00:32:34,320
situ while it's running to a different

00:32:31,409 --> 00:32:36,480
version of kubernetes now the AKS is

00:32:34,320 --> 00:32:39,600
still in preview so this has gone wrong

00:32:36,480 --> 00:32:41,429
in the past but I think of assorted can

00:32:39,600 --> 00:32:42,929
also scale the node count you can do it

00:32:41,429 --> 00:32:45,149
from the UI actually I'm notice as well

00:32:42,929 --> 00:32:48,440
now you can increase the number of

00:32:45,149 --> 00:32:51,240
worker nodes you want just from the CLI

00:32:48,440 --> 00:32:53,759
the the nodes your worker nodes are

00:32:51,240 --> 00:32:55,679
patched automatically by oh but they're

00:32:53,759 --> 00:32:57,629
not automatically restarted and recently

00:32:55,679 --> 00:33:00,629
there was a community project crated

00:32:57,629 --> 00:33:02,009
cured which detects when I'm node has

00:33:00,629 --> 00:33:03,990
been patched and it will trigger a

00:33:02,009 --> 00:33:06,360
restore in a safe manner so in effect

00:33:03,990 --> 00:33:09,119
what kubernetes does is it has a concept

00:33:06,360 --> 00:33:10,980
of draining nodes tainting so paint will

00:33:09,119 --> 00:33:12,210
stop any new nodes being scheduled and

00:33:10,980 --> 00:33:13,409
then it will slowly move them off

00:33:12,210 --> 00:33:15,480
tactically node until there's nothing

00:33:13,409 --> 00:33:17,039
left and then every starts a node when

00:33:15,480 --> 00:33:19,950
it comes back up it comes back into the

00:33:17,039 --> 00:33:21,539
cluster so it's pretty cool stuff

00:33:19,950 --> 00:33:23,519
as I mentioned it's covered in preview

00:33:21,539 --> 00:33:25,679
and it's like GG and the coming month oh

00:33:23,519 --> 00:33:28,740
I think Jo ran into this you wanted to

00:33:25,679 --> 00:33:30,210
have a play around and it was a bit

00:33:28,740 --> 00:33:32,309
confusing in the UI he looked like your

00:33:30,210 --> 00:33:33,720
to spin up quite expensive cluster so

00:33:32,309 --> 00:33:36,749
you can create a single node cluster on

00:33:33,720 --> 00:33:38,460
on a KS for free using the the quota you

00:33:36,749 --> 00:33:40,950
get in the trial so in the past is you

00:33:38,460 --> 00:33:43,110
all used to give you just a 150 pounds a

00:33:40,950 --> 00:33:45,509
month now they give you certain number

00:33:43,110 --> 00:33:48,779
of resources for a whole year so you can

00:33:45,509 --> 00:33:50,549
run one of the small VMs on the cluster

00:33:48,779 --> 00:33:55,529
if you want for a full year to try the

00:33:50,549 --> 00:33:57,600
Hat so let's flip over to the demo again

00:33:55,529 --> 00:33:59,539
previously I was using Mini Cooper now

00:33:57,600 --> 00:34:06,210
what you can do is you can set the

00:33:59,539 --> 00:34:07,860
context so if I do get context you see

00:34:06,210 --> 00:34:08,609
list all the contexts and one of these

00:34:07,860 --> 00:34:11,250
is the docker

00:34:08,609 --> 00:34:12,599
the docker tooling then I've got my is

00:34:11,250 --> 00:34:13,679
your class and I've got mini cubes at

00:34:12,599 --> 00:34:18,359
the moment you can see it's using mini

00:34:13,679 --> 00:34:20,569
cube so if I say Kay config set context

00:34:18,359 --> 00:34:20,569
whoops

00:34:23,020 --> 00:34:27,129
I should now have switched my contact

00:34:25,899 --> 00:34:33,340
over to communities

00:34:27,129 --> 00:34:33,820
I guess so now if I do get notes fingers

00:34:33,340 --> 00:34:36,070
crossed

00:34:33,820 --> 00:34:40,179
okay so I had this problem before we

00:34:36,070 --> 00:34:44,590
wasn't switching so enough to switch to

00:34:40,179 --> 00:34:47,649
the come on line temporarily just a

00:34:44,590 --> 00:34:49,810
second see not have this probably before

00:34:47,649 --> 00:34:53,080
but it suddenly appeared today for some

00:34:49,810 --> 00:34:55,830
reason so I'm just gonna use the zoom on

00:34:53,080 --> 00:34:55,830
line to switch the

00:35:06,000 --> 00:35:09,150
mr. yes

00:35:18,700 --> 00:35:33,980
again cool ok so just scroll that up as

00:35:32,180 --> 00:35:37,099
you can see I've got three node cluster

00:35:33,980 --> 00:35:40,130
now to get started on this I won't run

00:35:37,099 --> 00:35:42,740
it but it's as easy as in the KS create

00:35:40,130 --> 00:35:46,339
and then giving you a name and giving

00:35:42,740 --> 00:35:48,650
you a resource group and then optionally

00:35:46,339 --> 00:35:50,660
you can specify the version you want so

00:35:48,650 --> 00:35:52,309
for example on that and then optionally

00:35:50,660 --> 00:35:55,010
you can say node count so you can say I

00:35:52,309 --> 00:35:57,190
want five nodes and there's a number of

00:35:55,010 --> 00:35:59,329
other options you can do as well

00:35:57,190 --> 00:36:00,529
yeah that's cool I'm not going to run it

00:35:59,329 --> 00:36:03,109
I just wanted to because I've already

00:36:00,529 --> 00:36:05,280
created the cluster it takes about about

00:36:03,109 --> 00:36:06,849
four or five minutes depending on how

00:36:05,280 --> 00:36:09,410
[Music]

00:36:06,849 --> 00:36:18,260
how quick is yours deciding to work that

00:36:09,410 --> 00:36:20,299
day so what do you now is I'm I'm going

00:36:18,260 --> 00:36:21,770
to create the same deployment I did

00:36:20,299 --> 00:36:31,119
before but this time I'll use the Yama

00:36:21,770 --> 00:36:33,319
file so I'm going to create - F and then

00:36:31,119 --> 00:36:38,960
and I'll show you this was in a minute

00:36:33,319 --> 00:36:41,569
because I've modified them slightly okay

00:36:38,960 --> 00:36:43,460
don't get pods if you really kind of

00:36:41,569 --> 00:36:46,490
want to shorten you can you can say that

00:36:43,460 --> 00:36:52,250
and then you can spend the additional

00:36:46,490 --> 00:37:00,549
nanosecond with your liking kids so now

00:36:52,250 --> 00:37:03,549
if i deploy the services all oops

00:37:00,549 --> 00:37:03,549
okay

00:37:06,040 --> 00:37:12,500
so now if I get the service more we'll

00:37:08,660 --> 00:37:13,849
see is we've created the Lord bouncer

00:37:12,500 --> 00:37:17,000
it's got the internal Epirus now this

00:37:13,849 --> 00:37:19,040
pending here right now the cluster is

00:37:17,000 --> 00:37:20,780
talking to you on is creating as your

00:37:19,040 --> 00:37:22,430
load balancer and it's getting a public

00:37:20,780 --> 00:37:26,080
IP address with her now that takes a few

00:37:22,430 --> 00:37:28,790
seconds and takes power minimal - so

00:37:26,080 --> 00:37:35,839
while that's happening I will show you

00:37:28,790 --> 00:37:37,310
the Yama falls good question I don't

00:37:35,839 --> 00:37:39,500
think you do this I think the center

00:37:37,310 --> 00:37:42,380
ones free so you pay for the traffic the

00:37:39,500 --> 00:37:43,820
egress egress traffic but you don't pay

00:37:42,380 --> 00:37:45,830
for the LOB and so the standard load

00:37:43,820 --> 00:37:47,930
balancer you don't pay for now so what I

00:37:45,830 --> 00:37:50,890
want to call out is down here so I've

00:37:47,930 --> 00:37:54,500
added health checking to this particular

00:37:50,890 --> 00:37:58,280
file so communities is going to do HTTP

00:37:54,500 --> 00:38:01,190
GET on this path within my container on

00:37:58,280 --> 00:38:02,200
port 80 if it receives back status code

00:38:01,190 --> 00:38:03,710
between two and four hundred

00:38:02,200 --> 00:38:09,200
everything's fine

00:38:03,710 --> 00:38:11,630
anything else steamed to be offline ill

00:38:09,200 --> 00:38:14,599
and self-healing will kick in so I'll

00:38:11,630 --> 00:38:15,920
show you this in a second initial delay

00:38:14,599 --> 00:38:18,170
says how long to wait before it starts

00:38:15,920 --> 00:38:23,119
doing this and then the period seconds

00:38:18,170 --> 00:38:24,230
obviously health care pros for that show

00:38:23,119 --> 00:38:25,640
you the service of there's nothing

00:38:24,230 --> 00:38:27,920
different in the services exactly as it

00:38:25,640 --> 00:38:30,740
was before now I mentioned the type load

00:38:27,920 --> 00:38:33,740
balancer so by having type load balancer

00:38:30,740 --> 00:38:34,880
exposes the service publicly now of

00:38:33,740 --> 00:38:36,800
course you may have services which are

00:38:34,880 --> 00:38:39,830
internal to the cluster only in which

00:38:36,800 --> 00:38:41,240
case you would use a type plus or IP in

00:38:39,830 --> 00:38:43,240
there and they won't get given a public

00:38:41,240 --> 00:38:45,589
IP address on you within the cluster

00:38:43,240 --> 00:38:47,240
it's also possible to create a service

00:38:45,589 --> 00:38:48,800
which actually doesn't have any pods any

00:38:47,240 --> 00:38:51,080
references an external service so let's

00:38:48,800 --> 00:38:53,990
say you have a sequel server running

00:38:51,080 --> 00:38:55,760
ready somewhere but you want your kind

00:38:53,990 --> 00:38:57,140
of Yama files to reflect as if it's

00:38:55,760 --> 00:38:59,060
within the cluster because you plan to

00:38:57,140 --> 00:39:02,570
move it in potentially you can create a

00:38:59,060 --> 00:39:05,150
service which will effectively proxy to

00:39:02,570 --> 00:39:06,680
the service and your pods will behave as

00:39:05,150 --> 00:39:09,500
if they are talking to an internal

00:39:06,680 --> 00:39:11,330
community service and you can also

00:39:09,500 --> 00:39:13,040
allocate public IP address if you go on

00:39:11,330 --> 00:39:14,510
public IP vs. already you can specify in

00:39:13,040 --> 00:39:17,690
here and it will actually set that run

00:39:14,510 --> 00:39:17,990
and requesting one as I said this this

00:39:17,690 --> 00:39:19,430
is

00:39:17,990 --> 00:39:22,310
kind of more primitive load balancing

00:39:19,430 --> 00:39:23,780
the the layer seven ingre stuff which

00:39:22,310 --> 00:39:25,280
you won't have time to talk about is

00:39:23,780 --> 00:39:27,470
really where the cool stuff comes in

00:39:25,280 --> 00:39:31,250
with a lot of the layer 7 stuff you'd

00:39:27,470 --> 00:39:34,100
expect to find so let's pop back and see

00:39:31,250 --> 00:39:35,050
if our service is good an IP address yes

00:39:34,100 --> 00:39:37,580
it has

00:39:35,050 --> 00:39:40,520
glad sometimes it takes quite a while so

00:39:37,580 --> 00:39:41,900
I was a bit nervous then so I'm gonna

00:39:40,520 --> 00:39:44,770
close out just to avoid any confusion

00:39:41,900 --> 00:39:50,210
and then I'll open you again

00:39:44,770 --> 00:39:53,330
ok and then again you have that day so

00:39:50,210 --> 00:39:55,160
now if I want you to scale this you see

00:39:53,330 --> 00:39:56,780
one you could do it the command line

00:39:55,160 --> 00:40:00,980
which I said you shouldn't do so I'll do

00:39:56,780 --> 00:40:08,690
is I'm going to update the replicas in

00:40:00,980 --> 00:40:12,220
here or is it five save that and then

00:40:08,690 --> 00:40:12,220
what we do is we do an apply

00:40:18,460 --> 00:40:26,650
yep ignore the warning so now if I do

00:40:21,940 --> 00:40:30,670
get pots that's too quick so now there's

00:40:26,650 --> 00:40:32,650
five running what I've done on this

00:40:30,670 --> 00:40:34,750
particular service is because obviously

00:40:32,650 --> 00:40:38,530
my code never has any bugs in here I've

00:40:34,750 --> 00:40:42,460
deliberately created a so let me show

00:40:38,530 --> 00:40:46,839
you the the health check so if I go to

00:40:42,460 --> 00:40:51,940
Home Health see how okay now what I did

00:40:46,839 --> 00:40:53,200
was I created a those of you should

00:40:51,940 --> 00:40:57,280
rightly be shuddering that what I'm

00:40:53,200 --> 00:40:58,780
about to do because I'm going to I'm

00:40:57,280 --> 00:41:01,960
going to call it get method which is

00:40:58,780 --> 00:41:04,990
going to modify the state which is

00:41:01,960 --> 00:41:07,480
terrible thing to do but in my defense

00:41:04,990 --> 00:41:10,150
you don't normally do you don't normally

00:41:07,480 --> 00:41:14,410
deliberately make you cluster sick so

00:41:10,150 --> 00:41:16,000
now if I do what should happen if I

00:41:14,410 --> 00:41:18,069
haven't done it secretly there we are so

00:41:16,000 --> 00:41:23,230
that particular port there kubernetes

00:41:18,069 --> 00:41:26,859
detected that it was unhealthy and it

00:41:23,230 --> 00:41:29,349
restarted it automatically now the way I

00:41:26,859 --> 00:41:30,849
set it up is if it obviously I've got

00:41:29,349 --> 00:41:32,079
multiple instances anyway so if I go

00:41:30,849 --> 00:41:36,520
back they might get at different

00:41:32,079 --> 00:41:44,760
instance anyway so let's make that one

00:41:36,520 --> 00:41:44,760
sick as well try and catch you this time

00:41:49,700 --> 00:41:57,539
so we can use a watch which should Oh

00:41:52,349 --> 00:41:59,970
too slow it's already updated they okay

00:41:57,539 --> 00:42:06,150
I'm putting a good time to have a quick

00:41:59,970 --> 00:42:13,099
chat about a look at the kubernetes UI

00:42:06,150 --> 00:42:18,420
very briefly I think I'm just gonna

00:42:13,099 --> 00:42:20,670
break out of that so the communities you

00:42:18,420 --> 00:42:22,529
guys running within the cluster and see

00:42:20,670 --> 00:42:27,029
a cluster Langdon is your so they're

00:42:22,529 --> 00:42:30,180
giving us a kind of handy shortcut to be

00:42:27,029 --> 00:42:34,799
able to tunnel into that cluster I'll

00:42:30,180 --> 00:42:36,630
access the when you're doing these

00:42:34,799 --> 00:42:38,819
things it it helps to name them in a

00:42:36,630 --> 00:42:40,140
consistent way because nearly every as

00:42:38,819 --> 00:42:42,630
you'll see a like come on you have to

00:42:40,140 --> 00:42:47,430
use the name of the cluster and the

00:42:42,630 --> 00:42:49,140
resource group so that's doing out so

00:42:47,430 --> 00:42:52,769
that will tunnel to the cluster and

00:42:49,140 --> 00:42:53,849
they'll pop up in the communities UI I'm

00:42:52,769 --> 00:42:56,130
not going to spend too long on the you

00:42:53,849 --> 00:42:57,420
I'm just going to touch on a few things

00:42:56,130 --> 00:42:59,609
so you can see you some basic kind of

00:42:57,420 --> 00:43:01,980
memory usage you can see the deployments

00:42:59,609 --> 00:43:04,170
here you can see there's five pods

00:43:01,980 --> 00:43:06,650
running if I want you to scale from here

00:43:04,170 --> 00:43:06,650
I can do that

00:43:12,020 --> 00:43:17,810
nice thing is also if you're if you're

00:43:14,540 --> 00:43:20,060
not so familiar with the user interface

00:43:17,810 --> 00:43:21,230
sorry with the kind of CL I'm not that

00:43:20,060 --> 00:43:27,440
comfortable with it and you want to have

00:43:21,230 --> 00:43:29,120
a look at it so what you can do is you

00:43:27,440 --> 00:43:31,940
can see the logs from the container

00:43:29,120 --> 00:43:33,800
itself so in this case I got multiple

00:43:31,940 --> 00:43:36,320
instances so I can flick through so I've

00:43:33,800 --> 00:43:38,540
got a particular one misbehaving I can

00:43:36,320 --> 00:43:39,860
pop it up and see the the logs coming

00:43:38,540 --> 00:43:43,310
straight from the container you can see

00:43:39,860 --> 00:43:52,490
it's just the kind of half-baked it's

00:43:43,310 --> 00:43:55,270
been a cool application there so let's

00:43:52,490 --> 00:44:11,540
have a quick look at doing somebody

00:43:55,270 --> 00:44:13,640
deployments break out that so we have

00:44:11,540 --> 00:44:16,490
for now because I scaled it down from

00:44:13,640 --> 00:44:19,810
the UI is you noticed and that's running

00:44:16,490 --> 00:44:19,810
v1 so just

00:44:25,160 --> 00:44:30,980
see if I can show it no bouncing no it's

00:44:28,880 --> 00:44:32,660
not gonna behave itself okay so I'm

00:44:30,980 --> 00:44:34,190
gonna upgrade this so you can probably

00:44:32,660 --> 00:44:38,750
guess what the upgrade is gonna look

00:44:34,190 --> 00:44:40,640
like it's just full of features so what

00:44:38,750 --> 00:44:43,009
I can actually do the upgrade directly

00:44:40,640 --> 00:44:44,809
in the command line but I won't because

00:44:43,009 --> 00:44:46,509
I said you shouldn't do that so what we

00:44:44,809 --> 00:44:49,400
can do is if you go to the Yama forum

00:44:46,509 --> 00:44:57,910
I'll update the content image division -

00:44:49,400 --> 00:44:57,910
I save that I'll just type it out

00:45:02,640 --> 00:45:21,610
okay so now if I'm quick with this if I

00:45:06,130 --> 00:45:24,879
do too slowly

00:45:21,610 --> 00:45:24,879
[Music]

00:45:24,989 --> 00:45:29,079
it's all we can do is that we're all out

00:45:27,130 --> 00:45:32,109
I was fumbling with the keyboard so

00:45:29,079 --> 00:45:34,890
probably too slow there and our

00:45:32,109 --> 00:45:34,890
deployments sorry

00:45:50,590 --> 00:45:57,710
how is it thank you

00:45:52,670 --> 00:45:59,990
I wouldn't have seen that one come so we

00:45:57,710 --> 00:46:02,900
can see I'll run that again soups so

00:45:59,990 --> 00:46:05,840
that's big camera so we can see we've

00:46:02,900 --> 00:46:06,950
got we've got two revisions there's no

00:46:05,840 --> 00:46:09,080
change cause because the way I

00:46:06,950 --> 00:46:10,490
implemented the update there's two

00:46:09,080 --> 00:46:13,130
versions and I fight back to the

00:46:10,490 --> 00:46:15,640
application I was far too slow to show

00:46:13,130 --> 00:46:18,830
you a happening when I call VT running

00:46:15,640 --> 00:46:22,270
now let's assume that so in this case

00:46:18,830 --> 00:46:24,740
the health was fine if during my health

00:46:22,270 --> 00:46:26,540
monitoring there was an issue coming

00:46:24,740 --> 00:46:28,550
this will stop the rollout it doesn't

00:46:26,540 --> 00:46:29,870
automatically roll back he used to do

00:46:28,550 --> 00:46:32,330
that and they've taken a functionality

00:46:29,870 --> 00:46:35,120
away for some reason I'm fully

00:46:32,330 --> 00:46:36,890
understand why but in in essence he'll

00:46:35,120 --> 00:46:38,810
stop writing up the deployment if he if

00:46:36,890 --> 00:46:42,500
the pods come up and they're not healthy

00:46:38,810 --> 00:46:43,850
so so let's say for example I've

00:46:42,500 --> 00:46:48,910
discovered an issue with this version

00:46:43,850 --> 00:46:48,910
and I went to rollback why I can do is

00:46:51,280 --> 00:47:00,830
and I just your handi now you can't

00:46:58,910 --> 00:47:03,760
actually specify a specific version when

00:47:00,830 --> 00:47:11,120
a rollback - but if you just do the undo

00:47:03,760 --> 00:47:13,160
let's try and get status I'm quick

00:47:11,120 --> 00:47:15,650
enough yeah so it was quick enough a we

00:47:13,160 --> 00:47:25,730
should see as it's rolling out the

00:47:15,650 --> 00:47:27,050
update this one so without special my

00:47:25,730 --> 00:47:28,820
version it's only rolling back to the

00:47:27,050 --> 00:47:30,620
previous previous deployment but you can

00:47:28,820 --> 00:47:32,240
specify particular version - chomp - if

00:47:30,620 --> 00:47:33,830
you want and I've seen as people say

00:47:32,240 --> 00:47:38,020
Xuan rollback shuttle was roll forward

00:47:33,830 --> 00:47:38,020
so in getting to that debate as well

00:47:39,100 --> 00:47:44,480
yeah that was that I think that's

00:47:42,020 --> 00:47:50,240
everything only soy surrender

00:47:44,480 --> 00:47:53,270
deployments yeah so speed back to the

00:47:50,240 --> 00:47:54,620
slides so I've been talking back with

00:47:53,270 --> 00:47:56,090
Nettie's and obviously I kind of pitched

00:47:54,620 --> 00:47:59,420
this talk is kubernetes vadhana

00:47:56,090 --> 00:48:01,750
developers so let's talk a little bit

00:47:59,420 --> 00:48:05,029
don't let Microsoft in particularly so

00:48:01,750 --> 00:48:08,630
kind of showed Microsoft is a Platinum

00:48:05,029 --> 00:48:11,210
Partner of CN CF and they actively

00:48:08,630 --> 00:48:12,260
contribute to the Cades project last

00:48:11,210 --> 00:48:13,460
year they I think it was last year

00:48:12,260 --> 00:48:16,130
actual maybe the year before they

00:48:13,460 --> 00:48:17,779
acquired her company called Deus who

00:48:16,130 --> 00:48:20,450
were heavily involved in the communities

00:48:17,779 --> 00:48:21,980
space they were creating tools including

00:48:20,450 --> 00:48:24,380
helm you may have heard of

00:48:21,980 --> 00:48:27,319
so by querying them they kind of

00:48:24,380 --> 00:48:30,109
expanded the in-house kubernetes team

00:48:27,319 --> 00:48:31,640
and knowledge Brendon burns who is one

00:48:30,109 --> 00:48:33,500
of the used to work at Google's one of

00:48:31,640 --> 00:48:37,609
the cofounders of kubernetes works at

00:48:33,500 --> 00:48:40,519
Microsoft and she'd own a cool kind of

00:48:37,609 --> 00:48:41,660
works tonic on Linux works now and I

00:48:40,519 --> 00:48:43,160
kind of touched on this before but the

00:48:41,660 --> 00:48:44,750
Windows nodes are currently in beta and

00:48:43,160 --> 00:48:46,670
therefore we should be able to run

00:48:44,750 --> 00:48:49,700
Windows containers on those nodes some

00:48:46,670 --> 00:48:51,200
point in terms of what Microsoft does

00:48:49,700 --> 00:48:54,049
best in terms of developers is obviously

00:48:51,200 --> 00:48:57,140
tooling depends on how you feel about

00:48:54,049 --> 00:49:00,289
the Visual Studio I guess and something

00:48:57,140 --> 00:49:02,150
they announced at the connect events

00:49:00,289 --> 00:49:03,500
some of you may have seen Scott

00:49:02,150 --> 00:49:07,009
Hanselman demo some core Visual Studio

00:49:03,500 --> 00:49:09,049
connected environment this is in private

00:49:07,009 --> 00:49:10,339
preview now literally gone in five four

00:49:09,049 --> 00:49:12,049
two days are gonna haven't been able to

00:49:10,339 --> 00:49:13,880
play with it yet but it allows

00:49:12,049 --> 00:49:15,380
development teams to in essence have a

00:49:13,880 --> 00:49:18,259
development cluster that they don't have

00:49:15,380 --> 00:49:19,579
to manage so you can all have the

00:49:18,259 --> 00:49:20,990
similar workflow without having to have

00:49:19,579 --> 00:49:25,279
local kind of mini of your clusters

00:49:20,990 --> 00:49:27,730
every run having local clusters so this

00:49:25,279 --> 00:49:29,569
one here you can imagine is going to be

00:49:27,730 --> 00:49:32,299
developed further something from

00:49:29,569 --> 00:49:33,619
Michael's point of view so talk a bit

00:49:32,299 --> 00:49:35,809
more about kind of donor applications

00:49:33,619 --> 00:49:37,730
where I see where I'm kind of excited

00:49:35,809 --> 00:49:39,289
vacuum Nettie's is you know I see a

00:49:37,730 --> 00:49:41,180
single platform for all of our kind of

00:49:39,289 --> 00:49:43,940
daunting applications most of us

00:49:41,180 --> 00:49:46,519
probably have kind of legacy full domain

00:49:43,940 --> 00:49:49,099
framework applications and maybe we're

00:49:46,519 --> 00:49:50,809
now working with on a core as well and

00:49:49,099 --> 00:49:53,779
really like they were having a single

00:49:50,809 --> 00:49:57,079
platform single kind of CI CD approach

00:49:53,779 --> 00:49:58,759
and also having a having the kind of

00:49:57,079 --> 00:50:00,950
cluster that consistent deployment

00:49:58,759 --> 00:50:03,170
cluster really helps when you come to

00:50:00,950 --> 00:50:04,490
kind of breaking up your monoliths into

00:50:03,170 --> 00:50:05,809
micro services you don't have to worry

00:50:04,490 --> 00:50:07,910
about the plumbing that goes with that

00:50:05,809 --> 00:50:09,710
particular challenge so the kind of

00:50:07,910 --> 00:50:12,109
thing I envisage is a kind of donate

00:50:09,710 --> 00:50:13,319
corn don't know being basically built

00:50:12,109 --> 00:50:15,089
and deployed we

00:50:13,319 --> 00:50:17,279
Tonie full-frame 'ok you're building

00:50:15,089 --> 00:50:18,269
windows containers the Linux containers

00:50:17,279 --> 00:50:21,930
and they're being deployed into a

00:50:18,269 --> 00:50:23,400
hardwood cluster kubernetes will take

00:50:21,930 --> 00:50:25,140
care of actually picking the right node

00:50:23,400 --> 00:50:27,390
for you to run the machines and

00:50:25,140 --> 00:50:28,709
obviously with the later Windows Server

00:50:27,390 --> 00:50:32,430
insiders build you can actually run

00:50:28,709 --> 00:50:33,839
Linux containers on windows so if you if

00:50:32,430 --> 00:50:35,039
you were a company that wasn't

00:50:33,839 --> 00:50:37,079
comfortable with linux and there are

00:50:35,039 --> 00:50:41,759
some out there you could run entirely

00:50:37,079 --> 00:50:43,440
windows closed if you wanted so shifting

00:50:41,759 --> 00:50:45,509
a little bit into the conversation into

00:50:43,440 --> 00:50:47,329
kind of why would you want to use

00:50:45,509 --> 00:50:49,589
something like continual castration

00:50:47,329 --> 00:50:53,160
versus pass you know you may already be

00:50:49,589 --> 00:50:56,819
using paths of service and as you're and

00:50:53,160 --> 00:51:01,319
various other platforms so why would you

00:50:56,819 --> 00:51:03,180
want to switch so I think passes are are

00:51:01,319 --> 00:51:06,089
great for simple kind of independent

00:51:03,180 --> 00:51:09,509
services if easy to deploy the work why

00:51:06,089 --> 00:51:11,069
why can I change it a lot of people say

00:51:09,509 --> 00:51:12,719
the pass has a kind of vendor lock-in

00:51:11,069 --> 00:51:15,719
problem and I'm not convinced that's

00:51:12,719 --> 00:51:17,369
necessarily the case because most pass

00:51:15,719 --> 00:51:18,779
platforms give you simple deployments

00:51:17,369 --> 00:51:20,309
whether it's a web hook from okay I have

00:51:18,779 --> 00:51:22,949
a repo whether it's a zip file

00:51:20,309 --> 00:51:24,839
deployment so not convinced that itself

00:51:22,949 --> 00:51:29,160
is an issue kind of container

00:51:24,839 --> 00:51:30,930
orchestration as a service class is is

00:51:29,160 --> 00:51:32,369
undoubtedly slightly harder to get

00:51:30,930 --> 00:51:34,229
started and you have some ongoing

00:51:32,369 --> 00:51:36,989
overhead of maintaining a cluster you

00:51:34,229 --> 00:51:39,059
need to have some knowledge the cause

00:51:36,989 --> 00:51:41,699
has a lot more scope to mature with your

00:51:39,059 --> 00:51:43,049
application so has your needs expand you

00:51:41,699 --> 00:51:44,880
know you've seen me deploy applications

00:51:43,049 --> 00:51:47,819
do some basic stuff I have not had to

00:51:44,880 --> 00:51:49,469
talk about authorization or package

00:51:47,819 --> 00:51:51,150
management various other things that

00:51:49,469 --> 00:51:53,400
that's that's all there when you need it

00:51:51,150 --> 00:51:57,630
it's there but initially you don't

00:51:53,400 --> 00:51:59,430
necessarily need it so I think the kind

00:51:57,630 --> 00:52:00,989
of container expression is is gives a

00:51:59,430 --> 00:52:02,999
sweet spot between Crenn infrastructure

00:52:00,989 --> 00:52:04,619
as a service but gives you the kind of

00:52:02,999 --> 00:52:06,180
flexibility that you get with most past

00:52:04,619 --> 00:52:07,469
platforms so you get power water scaling

00:52:06,180 --> 00:52:11,099
you get the self feeling you get the

00:52:07,469 --> 00:52:14,009
deployment and roll back support so it's

00:52:11,099 --> 00:52:15,329
coming towards the end what do you want

00:52:14,009 --> 00:52:16,829
what do you need to be doing if you're

00:52:15,329 --> 00:52:18,630
kind of thinking about kubernetes and

00:52:16,829 --> 00:52:20,219
first thing I'd say is don't get sucked

00:52:18,630 --> 00:52:21,569
into the hype now sounds strange you've

00:52:20,219 --> 00:52:22,499
come out there and I've come all the way

00:52:21,569 --> 00:52:24,269
from Luton to talk to you about

00:52:22,499 --> 00:52:26,080
humanities and the first thing I'm

00:52:24,269 --> 00:52:27,550
saying is don't get sucked in but

00:52:26,080 --> 00:52:28,960
you've got to look at your particular

00:52:27,550 --> 00:52:30,580
use case and you gotta understand

00:52:28,960 --> 00:52:32,530
whether it actually fits for you now I

00:52:30,580 --> 00:52:35,920
think it does for most people most

00:52:32,530 --> 00:52:38,260
companies and I think it has a potential

00:52:35,920 --> 00:52:39,880
value in certain sized organizations

00:52:38,260 --> 00:52:43,270
where they don't necessarily have the

00:52:39,880 --> 00:52:45,070
ops team the huge ops team that large

00:52:43,270 --> 00:52:47,650
enterprises have where you know you're

00:52:45,070 --> 00:52:49,780
doing maybe the the the DevOps I think I

00:52:47,650 --> 00:52:52,000
think of ticked all the buzzword bingo

00:52:49,780 --> 00:52:55,060
words during this talk so hope you're

00:52:52,000 --> 00:52:57,130
following along in terms of applications

00:52:55,060 --> 00:52:58,870
you want to be looking at kind of

00:52:57,130 --> 00:53:00,460
developing 12 factor style applications

00:52:58,870 --> 00:53:02,530
I think he and Cooper's probably being

00:53:00,460 --> 00:53:07,120
down here talking about our factor if

00:53:02,530 --> 00:53:09,640
not yeah gotta get him down if not DDD's

00:53:07,120 --> 00:53:11,260
he's often talking about it so key

00:53:09,640 --> 00:53:13,540
things with these are is how you're

00:53:11,260 --> 00:53:16,150
logging and then I showed you the kind

00:53:13,540 --> 00:53:17,230
of health checking a really important

00:53:16,150 --> 00:53:19,270
and I think you know this some you could

00:53:17,230 --> 00:53:21,550
start doing now because all it is is an

00:53:19,270 --> 00:53:22,840
API endpoint it's not a difficult thing

00:53:21,550 --> 00:53:24,910
it's not going to cost you huge amount

00:53:22,840 --> 00:53:25,330
to implement and then it's ready for the

00:53:24,910 --> 00:53:28,060
future

00:53:25,330 --> 00:53:29,290
now readiness so community is also has

00:53:28,060 --> 00:53:31,360
support of readiness which I didn't

00:53:29,290 --> 00:53:33,040
really talk about but this is where an

00:53:31,360 --> 00:53:34,600
application is started and it takes a

00:53:33,040 --> 00:53:36,490
little a few seconds worse ready to

00:53:34,600 --> 00:53:38,920
serve traffic so it could be priming

00:53:36,490 --> 00:53:40,660
caches or something like that so you can

00:53:38,920 --> 00:53:42,130
also define in exactly the same ways we

00:53:40,660 --> 00:53:44,470
have the health check you can have a

00:53:42,130 --> 00:53:46,120
readiness check a criminal probe that

00:53:44,470 --> 00:53:50,470
until it's ready then your saw sending

00:53:46,120 --> 00:53:51,850
it traffic so terms of your kind of

00:53:50,470 --> 00:53:53,950
architecture you really want to have

00:53:51,850 --> 00:53:55,780
your kind of architecture and

00:53:53,950 --> 00:53:57,070
microservices house in order doesn't

00:53:55,780 --> 00:53:59,260
mean you have to have everything ready

00:53:57,070 --> 00:54:01,150
and working you need to have an idea of

00:53:59,260 --> 00:54:02,410
where you're going with it just because

00:54:01,150 --> 00:54:03,850
you're going to containerize in sticking

00:54:02,410 --> 00:54:05,860
kubernetes it's not going to solve your

00:54:03,850 --> 00:54:08,800
monolith creaking problems you know

00:54:05,860 --> 00:54:10,870
there's no magic here what it can do is

00:54:08,800 --> 00:54:13,690
you can make that journey easier for you

00:54:10,870 --> 00:54:15,370
obviously start looking at hopefully

00:54:13,690 --> 00:54:17,800
your writing most new things now and on

00:54:15,370 --> 00:54:21,100
a call look at migrating those things

00:54:17,800 --> 00:54:22,000
that you can migrate off to them to to

00:54:21,100 --> 00:54:24,100
donate core as well

00:54:22,000 --> 00:54:26,950
see really important you have see ICD

00:54:24,100 --> 00:54:29,110
pipelines particularly windows

00:54:26,950 --> 00:54:30,310
containers so I do a whole talking

00:54:29,110 --> 00:54:31,780
windows container so I can't go into

00:54:30,310 --> 00:54:32,710
huge amount of detail here but one of

00:54:31,780 --> 00:54:34,510
the things you've got to bear in mind

00:54:32,710 --> 00:54:35,860
Windows containers this patch Tuesdays

00:54:34,510 --> 00:54:37,960
means you've got to redeploy your

00:54:35,860 --> 00:54:39,170
container you don't patch the container

00:54:37,960 --> 00:54:40,700
like your whatever um you

00:54:39,170 --> 00:54:41,900
to redeploy without container so you

00:54:40,700 --> 00:54:43,430
don't want to be doing that every month

00:54:41,900 --> 00:54:46,280
on a cheese they're saying they're

00:54:43,430 --> 00:54:47,960
trying to redeploy definitely look I

00:54:46,280 --> 00:54:49,400
investigate can I investigate container

00:54:47,960 --> 00:54:51,740
rising you don't applications into

00:54:49,400 --> 00:54:54,200
windows containers there were some

00:54:51,740 --> 00:54:56,750
roadblocks recently and I think the last

00:54:54,200 --> 00:54:58,430
updates removed a lot of roadblocks the

00:54:56,750 --> 00:54:59,839
via the image size is getting smaller

00:54:58,430 --> 00:55:01,640
and smaller so things are improving

00:54:59,839 --> 00:55:02,900
there you know where I want them to be

00:55:01,640 --> 00:55:04,099
right now but they're they're getting

00:55:02,900 --> 00:55:08,329
there and again they're quickly

00:55:04,099 --> 00:55:10,099
the final point unmake is kind of beware

00:55:08,329 --> 00:55:11,299
of pet clusters so I've seen I think

00:55:10,099 --> 00:55:13,250
most people have kind of bought into

00:55:11,299 --> 00:55:15,500
these pets versus cattle so you don't

00:55:13,250 --> 00:55:17,089
have VMs on you nurture you treat them

00:55:15,500 --> 00:55:19,970
as cattle and you destroy them if

00:55:17,089 --> 00:55:21,619
they're you have an issue but I'm seeing

00:55:19,970 --> 00:55:24,589
a lot people thinking about the clusters

00:55:21,619 --> 00:55:25,880
like there would be pets but really what

00:55:24,589 --> 00:55:28,849
you want to do is your cluster should be

00:55:25,880 --> 00:55:31,760
as disposable as your your VMs your

00:55:28,849 --> 00:55:33,290
applications so some called get hops is

00:55:31,760 --> 00:55:34,880
starting to kind of take hold a little

00:55:33,290 --> 00:55:37,339
bit this is where you can wipe away your

00:55:34,880 --> 00:55:39,109
production system and from a single

00:55:37,339 --> 00:55:42,040
github push you can redeploy the whole

00:55:39,109 --> 00:55:44,240
whole cluster and the whole environment

00:55:42,040 --> 00:55:47,390
so that's something you want to consider

00:55:44,240 --> 00:55:48,799
doing and that takes away some of the

00:55:47,390 --> 00:55:50,359
concerns around well how do I pack up my

00:55:48,799 --> 00:55:52,720
DD cluster and everything else if you're

00:55:50,359 --> 00:55:55,190
not using manage service

00:55:52,720 --> 00:55:57,290
it's just quickly wrapping up towards

00:55:55,190 --> 00:56:00,770
you and now obviously in terms of

00:55:57,290 --> 00:56:02,390
alternatives often a quick way to get

00:56:00,770 --> 00:56:06,859
started with kind of multiple container

00:56:02,390 --> 00:56:08,440
expression is docker swarm I haven't

00:56:06,859 --> 00:56:11,839
used the huge amount myself but the

00:56:08,440 --> 00:56:13,670
common pattern is that you it's great to

00:56:11,839 --> 00:56:17,210
get started quicker than communities and

00:56:13,670 --> 00:56:19,640
but it you can sometimes I grow it we've

00:56:17,210 --> 00:56:22,339
got D cos for me so sphere this is a

00:56:19,640 --> 00:56:26,210
kind of reasonably enterprise-e Big Data

00:56:22,339 --> 00:56:28,339
Platform but it illustrates a big data

00:56:26,210 --> 00:56:30,020
workloads using containers and then

00:56:28,339 --> 00:56:32,210
service fabric and run containers as

00:56:30,020 --> 00:56:34,640
well and of course if you follow the

00:56:32,210 --> 00:56:36,770
kind of the trends in ich you know that

00:56:34,640 --> 00:56:40,040
pretty much kubernetes is eaten all of

00:56:36,770 --> 00:56:42,230
those up because docker now supports

00:56:40,040 --> 00:56:44,390
kubernetes missus fear sports kubernetes

00:56:42,230 --> 00:56:47,119
and obviously Microsoft of heavily

00:56:44,390 --> 00:56:49,040
invested in kubernetes is all so just

00:56:47,119 --> 00:56:50,390
summarize communities is a mature

00:56:49,040 --> 00:56:52,640
feature a feature-rich

00:56:50,390 --> 00:56:54,260
container orchestration platform

00:56:52,640 --> 00:56:55,670
it's being used by many of the large

00:56:54,260 --> 00:56:58,430
organizations and they're betting on it

00:56:55,670 --> 00:57:00,920
as their future the window support is

00:56:58,430 --> 00:57:02,930
gaining traction fast it's really

00:57:00,920 --> 00:57:04,430
interesting if you follow the the all of

00:57:02,930 --> 00:57:06,050
the work is done in Auckland they have

00:57:04,430 --> 00:57:08,150
special interest groups who work on

00:57:06,050 --> 00:57:10,550
different parts of the class of the of

00:57:08,150 --> 00:57:12,740
the platform and I've seen videos where

00:57:10,550 --> 00:57:14,480
we've had Microsoft to him

00:57:12,740 --> 00:57:16,250
networking engineers talking about the

00:57:14,480 --> 00:57:18,410
changes they've made to the windows

00:57:16,250 --> 00:57:19,940
networking stack to make it work better

00:57:18,410 --> 00:57:21,950
with kubernetes and they're sharing this

00:57:19,940 --> 00:57:25,970
before it's been released as a Windows

00:57:21,950 --> 00:57:28,220
Server preview so really open and of

00:57:25,970 --> 00:57:29,750
course you know the dollar tooling is

00:57:28,220 --> 00:57:30,890
getting easier mortgage easier you can

00:57:29,750 --> 00:57:35,290
imagine there's a lot more to come in

00:57:30,890 --> 00:57:38,750
that space in terms of learning more I

00:57:35,290 --> 00:57:40,520
mentioned if you can't run a cluster on

00:57:38,750 --> 00:57:43,010
your own machine anyway quatre coda is

00:57:40,520 --> 00:57:45,230
awesome awesome online learning platform

00:57:43,010 --> 00:57:47,660
it lets you basically create a cluster

00:57:45,230 --> 00:57:50,120
in in a browser so long as you get

00:57:47,660 --> 00:57:52,130
internet connection and then it's got

00:57:50,120 --> 00:57:54,350
worked examples a lot of the cloud

00:57:52,130 --> 00:57:56,090
native projects actually use including

00:57:54,350 --> 00:57:58,480
kubernetes documentation use cata coda

00:57:56,090 --> 00:58:01,430
to give you hands-on try me

00:57:58,480 --> 00:58:03,710
functionality kubernetes up and running

00:58:01,430 --> 00:58:07,250
kelsey Hightower Brendan burns and job

00:58:03,710 --> 00:58:09,620
ADA is excellent excellent book and I

00:58:07,250 --> 00:58:10,850
initially was hesitant about getting the

00:58:09,620 --> 00:58:13,100
books at a while it's gonna be out today

00:58:10,850 --> 00:58:15,080
so we think move so fast but it really

00:58:13,100 --> 00:58:16,730
isn't a brilliant book because it covers

00:58:15,080 --> 00:58:18,620
a fundamental so well it's it's

00:58:16,730 --> 00:58:21,230
literally a page-turner maybe it's just

00:58:18,620 --> 00:58:22,460
cuz I'm a huge geek but but but it's a

00:58:21,230 --> 00:58:23,810
fantastic book and I don't think we'll

00:58:22,460 --> 00:58:25,910
go out of date because it covers the

00:58:23,810 --> 00:58:27,830
core concepts really well everything in

00:58:25,910 --> 00:58:29,690
kubernetes since has been building on

00:58:27,830 --> 00:58:33,470
top of those core concepts so gives you

00:58:29,690 --> 00:58:35,990
a great grounding mini cubies attack

00:58:33,470 --> 00:58:37,520
github address and then the community

00:58:35,990 --> 00:58:44,090
documentation is fantastic as well

00:58:37,520 --> 00:58:46,130
really detailed that's it me i blog

00:58:44,090 --> 00:58:48,620
occasionally at addresses if you want to

00:58:46,130 --> 00:58:51,650
see the mini cube issue on Windows

00:58:48,620 --> 00:58:53,670
that's the place to find it that's it

00:58:51,650 --> 00:58:59,989
any questions

00:58:53,670 --> 00:58:59,989

YouTube URL: https://www.youtube.com/watch?v=MF3cdWKjhwU


