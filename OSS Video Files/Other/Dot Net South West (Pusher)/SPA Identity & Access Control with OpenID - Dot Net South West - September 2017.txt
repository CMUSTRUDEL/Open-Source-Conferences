Title: SPA Identity & Access Control with OpenID - Dot Net South West - September 2017
Publication date: 2018-02-02
Playlist: Dot Net South West
Description: 
	As software developers, we work in one of the most rapidly changing industries available, and in recent years this has been doubly true when we talk about security. Nowadays we have to accommodate a variety of client applications, hosted on any device, anywhere in the world and this means we must take a closer look at how we handle authentication and authorization when dealing with our protected resources.

In this talk, we’ll take a look at how Single Page Applications, running on a user’s browser, can use OpenID Connect for authentication and OAuth to gain access to data from an API. This will include the limitations of working with the unique security profile of a client side web application, and the measures we must take to secure our data. Once we have covered the basic theory behind identity and access control, OAuth, and OpenID Connect, we will implement IdentityServer 4 as our OpenID Connect Provider and use it to authenticate users for an Angular 4 SPA and authorize access to a ASP.NET Core API.

About Scott Brady

Scott Brady is the Identity & Access Control Lead at Rock Solid Knowledge, a Pluralsight Author, and Speaker. He specializes in IdentityServer and all things Identity, OAuth, and OpenID Connect. He's also a big fan of Azure.

Scott work mainly with C# and ASP.NET Core, creating identity solutions for both external customers and for commercial IdentityServer products. When not working with these technologies he dabbles with languages such as Kotlin, Python, and Typescript.

You can find more information about Scott in his website at scottbrady91.com (https://www.scottbrady91.com).


_____________________________________________________________

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:04,290
welcome to spa identity and access

00:00:02,429 --> 00:00:07,049
control with open ID connect and

00:00:04,290 --> 00:00:12,360
identity server for that's not my worst

00:00:07,049 --> 00:00:14,490
title so my name is Scott Brady I work

00:00:12,360 --> 00:00:17,039
at a company called rock-solid knowledge

00:00:14,490 --> 00:00:18,869
and I'm the identity and access control

00:00:17,039 --> 00:00:20,430
eat there

00:00:18,869 --> 00:00:26,519
so we're Bristol based as well just

00:00:20,430 --> 00:00:28,830
outside Parkway so my role is kind of

00:00:26,519 --> 00:00:31,320
all things identity server so we're the

00:00:28,830 --> 00:00:34,559
European consulting or commercial

00:00:31,320 --> 00:00:36,870
partners for identity server so I work

00:00:34,559 --> 00:00:40,579
with Adama Brock picking up any extra

00:00:36,870 --> 00:00:45,000
consultancy doing fold their projects

00:00:40,579 --> 00:00:50,309
with our team there and conference talks

00:00:45,000 --> 00:00:53,850
like this commercial support we also do

00:00:50,309 --> 00:00:56,120
some products for identi server so we do

00:00:53,850 --> 00:00:59,879
the official administration UI for it

00:00:56,120 --> 00:01:02,039
we've just completed sam'l 2p support so

00:00:59,879 --> 00:01:03,780
that's been what I've had to do for the

00:01:02,039 --> 00:01:06,900
past few months which I'm really happy

00:01:03,780 --> 00:01:08,430
about and we also done a kind of like a

00:01:06,900 --> 00:01:11,000
turnkey solution which is coming out

00:01:08,430 --> 00:01:12,960
shortly called identity express

00:01:11,000 --> 00:01:16,470
contractually obliged to say we're also

00:01:12,960 --> 00:01:18,530
on brac of go partners and was a marine

00:01:16,470 --> 00:01:20,850
authorized consulting partners

00:01:18,530 --> 00:01:22,200
personally I'm also a parasite author so

00:01:20,850 --> 00:01:29,100
check me out on there because I get paid

00:01:22,200 --> 00:01:32,340
for that yeah ok agenda we're gonna

00:01:29,100 --> 00:01:35,729
start off with a to recap yeah just to

00:01:32,340 --> 00:01:37,650
get everyone on the same level and then

00:01:35,729 --> 00:01:40,020
kind of covered the Open ID Connect

00:01:37,650 --> 00:01:42,600
basics I'm not gonna spend too much time

00:01:40,020 --> 00:01:45,479
on the basics because I kind of want to

00:01:42,600 --> 00:01:47,670
cover the next big point about kind of

00:01:45,479 --> 00:01:49,320
the the worries about using all this

00:01:47,670 --> 00:01:51,950
stuff with single page applications

00:01:49,320 --> 00:01:54,210
applications running inside the browser

00:01:51,950 --> 00:01:56,399
and then we'll move on to a demo so

00:01:54,210 --> 00:01:58,649
we've gone I've gone for a pre cam demo

00:01:56,399 --> 00:02:01,259
for this one because I've told us 45

00:01:58,649 --> 00:02:04,040
minutes to an hour and yeah that's not

00:02:01,259 --> 00:02:06,420
that's not I knew the demo gods too much

00:02:04,040 --> 00:02:07,979
just a warning there's no gifts in this

00:02:06,420 --> 00:02:09,479
presentation yeah

00:02:07,979 --> 00:02:12,080
we're doing security now you're not

00:02:09,479 --> 00:02:16,680
meant to have fun

00:02:12,080 --> 00:02:20,220
so yeah why why all this stuff why or

00:02:16,680 --> 00:02:21,150
that open ID connect so things change

00:02:20,220 --> 00:02:25,410
yeah

00:02:21,150 --> 00:02:26,820
thus especially true in our industry for

00:02:25,410 --> 00:02:28,860
computer science software development

00:02:26,820 --> 00:02:33,000
there's something of a running joke when

00:02:28,860 --> 00:02:35,190
it comes to JavaScript frameworks so we

00:02:33,000 --> 00:02:37,380
used to have things like XML sam'l

00:02:35,190 --> 00:02:41,580
tokens W a star

00:02:37,380 --> 00:02:43,020
sam'l 2 P of all running over soap yeah

00:02:41,580 --> 00:02:45,360
this kind of technologies we used to go

00:02:43,020 --> 00:02:46,950
to but someone came up with these

00:02:45,360 --> 00:02:51,030
annoying little things called mobile

00:02:46,950 --> 00:02:55,410
devices JavaScript became viable and we

00:02:51,030 --> 00:02:56,580
have things like micro services so you

00:02:55,410 --> 00:03:00,050
know these are apparently these are

00:02:56,580 --> 00:03:02,730
off-site premises of premises devices

00:03:00,050 --> 00:03:08,100
outside of your intranet and they sure

00:03:02,730 --> 00:03:12,209
as hell don't work with soap so for

00:03:08,100 --> 00:03:14,010
instance some things like maybe even

00:03:12,209 --> 00:03:16,019
client-side applications actually and

00:03:14,010 --> 00:03:17,760
mobile devices they had some early

00:03:16,019 --> 00:03:20,790
limitations with request size limits

00:03:17,760 --> 00:03:24,360
yeah so sam'l 2 P started to struggle

00:03:20,790 --> 00:03:25,620
very fast with those so yeah what we're

00:03:24,360 --> 00:03:28,350
gonna be talking about today is all

00:03:25,620 --> 00:03:29,340
around newer technologies so Jason Jason

00:03:28,350 --> 00:03:31,739
web tokens

00:03:29,340 --> 00:03:37,769
ooofff an open ID connect and they're

00:03:31,739 --> 00:03:42,209
all gonna be running over HTTP so I'll

00:03:37,769 --> 00:03:44,760
skip through these actually I converted

00:03:42,209 --> 00:03:46,980
these from Google Drive to PowerPoint

00:03:44,760 --> 00:03:49,670
and thing works as well I just want to

00:03:46,980 --> 00:03:51,690
clarify correlate the three layers of

00:03:49,670 --> 00:03:53,130
kind of like this process bring we

00:03:51,690 --> 00:03:54,269
talked about today just to just to make

00:03:53,130 --> 00:03:56,820
sure we're all on the same level of

00:03:54,269 --> 00:03:59,370
vocabulary the first thing I just want

00:03:56,820 --> 00:04:01,830
to mention is we kind of the first layer

00:03:59,370 --> 00:04:03,630
is the user store so we're all our

00:04:01,830 --> 00:04:05,610
identity data is stored

00:04:03,630 --> 00:04:09,840
you know how things like credentials in

00:04:05,610 --> 00:04:12,900
their email addresses but these are

00:04:09,840 --> 00:04:15,690
different to authentication so

00:04:12,900 --> 00:04:17,850
authentication is the act of verifying

00:04:15,690 --> 00:04:20,669
who a user is yeah so proving they are

00:04:17,850 --> 00:04:22,620
who they say they are so use a store

00:04:20,669 --> 00:04:24,910
it'd be something like asp.net identity

00:04:22,620 --> 00:04:28,840
yeah or a it's been on our membership

00:04:24,910 --> 00:04:30,550
a few years back now whilst

00:04:28,840 --> 00:04:32,970
authentication would be kind of the

00:04:30,550 --> 00:04:37,240
cooking middleware we see these days and

00:04:32,970 --> 00:04:40,180
identity server next we have

00:04:37,240 --> 00:04:43,330
authorization so that's the act of kind

00:04:40,180 --> 00:04:45,250
of figuring out what someone is allowed

00:04:43,330 --> 00:04:47,380
to do so are you actually allowed to

00:04:45,250 --> 00:04:50,920
access this resource your request yeah

00:04:47,380 --> 00:04:53,140
so they're not necessarily all

00:04:50,920 --> 00:04:55,480
interlinked yeah they could be or

00:04:53,140 --> 00:04:57,780
separate if you don't have to be

00:04:55,480 --> 00:05:03,130
authenticated for authorization it helps

00:04:57,780 --> 00:05:07,210
yeah so just to clarify those so yeah

00:05:03,130 --> 00:05:09,190
both - all - is a authorization protocol

00:05:07,210 --> 00:05:10,960
yeah so it's the act of saying right

00:05:09,190 --> 00:05:13,630
you're allowed to access something on my

00:05:10,960 --> 00:05:16,330
behalf so better phrased as a delegation

00:05:13,630 --> 00:05:17,830
protocol yeah so I go up to someone I

00:05:16,330 --> 00:05:20,310
joined an application say right you're

00:05:17,830 --> 00:05:24,010
allowed to send emails on my behalf

00:05:20,310 --> 00:05:25,750
so emphases on the send emails

00:05:24,010 --> 00:05:27,490
yeah so it's scoped access I'm only

00:05:25,750 --> 00:05:28,960
giving you permission to send emails you

00:05:27,490 --> 00:05:30,220
can't read them you can't delete them

00:05:28,960 --> 00:05:35,800
you sure as hell can't change my

00:05:30,220 --> 00:05:37,840
password yeah so it's been designed for

00:05:35,800 --> 00:05:39,400
HTTP api s-- so we're actually talking

00:05:37,840 --> 00:05:41,200
about the right technology so we're not

00:05:39,400 --> 00:05:44,020
trying to fit an older a specification

00:05:41,200 --> 00:05:44,710
like sam'l on top of something it's not

00:05:44,020 --> 00:05:46,720
meant to do

00:05:44,710 --> 00:05:50,410
I think sam'l are still trying to get

00:05:46,720 --> 00:05:52,060
HTTP API stuff sorted out and the nice

00:05:50,410 --> 00:05:56,430
thing about it is we get both user

00:05:52,060 --> 00:05:58,510
authentication and client authentication

00:05:56,430 --> 00:06:00,610
I'm not going to talk about why we don't

00:05:58,510 --> 00:06:03,310
use things like cookies for api's or

00:06:00,610 --> 00:06:06,370
maybe even API keys or credential

00:06:03,310 --> 00:06:10,870
sharing maybe because when I keep it

00:06:06,370 --> 00:06:13,030
focused today so check out this site

00:06:10,870 --> 00:06:17,100
here my article the wrong ways to

00:06:13,030 --> 00:06:17,100
protect an API for reasoning around out

00:06:17,820 --> 00:06:21,690
all right and that's fiscally

00:06:22,510 --> 00:06:30,200
so the OAuth dance there's four players

00:06:26,780 --> 00:06:33,919
in a request you have the protected

00:06:30,200 --> 00:06:35,780
resource so your API you have the

00:06:33,919 --> 00:06:37,550
authorization server who's going to be

00:06:35,780 --> 00:06:41,240
in charge of saying yes you're allowed

00:06:37,550 --> 00:06:43,700
to access this API no you're not we have

00:06:41,240 --> 00:06:47,300
the client application so let's say like

00:06:43,700 --> 00:06:49,190
an asp.net MVC application yeah and we

00:06:47,300 --> 00:06:52,160
have the resource owner who's typically

00:06:49,190 --> 00:06:54,380
a user yeah so we call it the resource

00:06:52,160 --> 00:06:56,390
owner because even though this API might

00:06:54,380 --> 00:06:59,180
be inside our company it's we hold the

00:06:56,390 --> 00:07:00,980
data we run the infrastructure if it's

00:06:59,180 --> 00:07:03,200
something like their mailbox yeah that's

00:07:00,980 --> 00:07:04,700
still the users property yeah that

00:07:03,200 --> 00:07:06,560
belongs to them it's their right to

00:07:04,700 --> 00:07:09,470
delegate access and say people can do

00:07:06,560 --> 00:07:14,800
stuff to it especially true if we're

00:07:09,470 --> 00:07:17,000
talking supporters I'll stop there so

00:07:14,800 --> 00:07:20,240
the first thing we want to do is

00:07:17,000 --> 00:07:22,430
basically the client application goes

00:07:20,240 --> 00:07:23,210
off the user and says can I do this on

00:07:22,430 --> 00:07:26,320
your behalf

00:07:23,210 --> 00:07:28,850
yeah can I send an email on your behalf

00:07:26,320 --> 00:07:30,710
it's at this point the user or the

00:07:28,850 --> 00:07:33,229
resource owner might have to

00:07:30,710 --> 00:07:35,240
authenticate with the authorization

00:07:33,229 --> 00:07:37,430
server you know prove they are who they

00:07:35,240 --> 00:07:42,229
say they are they're allowed to delegate

00:07:37,430 --> 00:07:43,789
this permission if that checks out we

00:07:42,229 --> 00:07:47,120
get back what's called an authorization

00:07:43,789 --> 00:07:49,039
grant in the ideal scenario we'll be

00:07:47,120 --> 00:07:51,110
talking about something physical yeah

00:07:49,039 --> 00:07:52,460
explicit like an authorization code like

00:07:51,110 --> 00:07:55,100
a little ticket basically which says

00:07:52,460 --> 00:07:57,320
which which corresponds directly to that

00:07:55,100 --> 00:07:59,360
consent yeah so this this basically

00:07:57,320 --> 00:08:03,740
means I can access the API on their

00:07:59,360 --> 00:08:05,270
behalf what then happens is that the

00:08:03,740 --> 00:08:07,880
client application goes up to your

00:08:05,270 --> 00:08:09,530
ization server and says right the user

00:08:07,880 --> 00:08:11,270
you know I have the user gave their

00:08:09,530 --> 00:08:13,610
permission for me to do this I have a

00:08:11,270 --> 00:08:15,350
little ticket here here are my

00:08:13,610 --> 00:08:16,820
credentials so here's proof that I'm

00:08:15,350 --> 00:08:20,419
allowed to actually deal I'm asking you

00:08:16,820 --> 00:08:21,950
as well and if everything checks out the

00:08:20,419 --> 00:08:27,950
client application gets back an access

00:08:21,950 --> 00:08:29,240
token client application then doesn't do

00:08:27,950 --> 00:08:31,630
anything with that it just attaches it

00:08:29,240 --> 00:08:34,459
to a request to the protected resource

00:08:31,630 --> 00:08:35,479
saying look I've got I've got a token

00:08:34,459 --> 00:08:39,620
here

00:08:35,479 --> 00:08:43,130
I want to send an email the protected

00:08:39,620 --> 00:08:44,720
resource then does something with the

00:08:43,130 --> 00:08:46,670
access token yeah I'm being purposely

00:08:44,720 --> 00:08:49,459
vague I'll get to in a minute

00:08:46,670 --> 00:08:50,540
it might verify it in some way if it's

00:08:49,459 --> 00:08:52,040
you know if it's sorry if it's

00:08:50,540 --> 00:08:53,750
structured data it might verify it

00:08:52,040 --> 00:08:55,550
locally yeah

00:08:53,750 --> 00:08:57,350
if it's unstructured data so like some

00:08:55,550 --> 00:08:59,510
sort of random string it might look it

00:08:57,350 --> 00:09:01,519
up in the database confirm it's real and

00:08:59,510 --> 00:09:03,529
what it's allowed to do or might ask the

00:09:01,519 --> 00:09:07,130
authorization server if it's you know

00:09:03,529 --> 00:09:09,980
what what the details of this token and

00:09:07,130 --> 00:09:14,540
then if everything checks out yeah

00:09:09,980 --> 00:09:18,170
responds back so the nice thing about

00:09:14,540 --> 00:09:20,779
this is user credentials are now

00:09:18,170 --> 00:09:23,690
separate to client credentials yeah

00:09:20,779 --> 00:09:26,449
only the authorization server sees any

00:09:23,690 --> 00:09:28,940
of these credentials another nice thing

00:09:26,449 --> 00:09:32,980
is the API has no idea about the client

00:09:28,940 --> 00:09:35,630
applications doesn't need to care and

00:09:32,980 --> 00:09:37,670
we've pretty much decoupled everything

00:09:35,630 --> 00:09:38,870
we've separated concerns you know no

00:09:37,670 --> 00:09:44,959
one's no one's looking each other's

00:09:38,870 --> 00:09:47,149
credentials anymore so that was kind of

00:09:44,959 --> 00:09:52,880
the ideal scenario where we had that

00:09:47,149 --> 00:09:56,089
physical explicit code so let's look at

00:09:52,880 --> 00:09:58,579
the problems with OAuth yeah it's kind

00:09:56,089 --> 00:10:03,410
of a bit of a troubled specification

00:09:58,579 --> 00:10:05,389
yeah so what happens when oh well v1 is

00:10:03,410 --> 00:10:08,930
popular yeah everyone wants to say with

00:10:05,389 --> 00:10:11,779
v2 so as a result no one agreed on ever

00:10:08,930 --> 00:10:14,240
anything yeah so it went through I think

00:10:11,779 --> 00:10:16,899
27 28 different drafts before is

00:10:14,240 --> 00:10:19,459
finalized

00:10:16,899 --> 00:10:21,050
you know people through their toys out

00:10:19,459 --> 00:10:23,630
the pram during this time and stormed

00:10:21,050 --> 00:10:25,699
out people went off and implemented

00:10:23,630 --> 00:10:28,310
certain drafts before it got rekt rare

00:10:25,699 --> 00:10:32,449
ratified and as a result people got

00:10:28,310 --> 00:10:35,029
hacked they also never actually said

00:10:32,449 --> 00:10:37,130
what the token type was or how to verify

00:10:35,029 --> 00:10:39,230
it yeah they were purposely vague about

00:10:37,130 --> 00:10:43,069
it it's just something is an access

00:10:39,230 --> 00:10:44,390
token and as a result people implemented

00:10:43,069 --> 00:10:48,310
their own tokens their own way of

00:10:44,390 --> 00:10:49,790
verifying them and they got hacked I

00:10:48,310 --> 00:10:52,730
finally

00:10:49,790 --> 00:10:55,370
Oh auth is an authentication yeah so

00:10:52,730 --> 00:10:56,990
it's just authorization so the act of

00:10:55,370 --> 00:10:59,600
you know delegating permission to do

00:10:56,990 --> 00:11:01,730
something on someone's behalf this

00:10:59,600 --> 00:11:03,770
there's no proof that the user actually

00:11:01,730 --> 00:11:05,510
verified their presence yeah they've

00:11:03,770 --> 00:11:07,460
verified credentials there's there's no

00:11:05,510 --> 00:11:08,900
proof there's even a user there it could

00:11:07,460 --> 00:11:13,940
just be a machine to machine kind of

00:11:08,900 --> 00:11:15,800
communication happening so people tried

00:11:13,940 --> 00:11:19,900
putting their own layer of identity kind

00:11:15,800 --> 00:11:23,390
of authentication on top of OAuth and

00:11:19,900 --> 00:11:26,630
people like Facebook Linkedin especially

00:11:23,390 --> 00:11:27,770
and they got hacked yeah it's just one

00:11:26,630 --> 00:11:33,260
of those things it wasn't as simple as

00:11:27,770 --> 00:11:36,050
they thought so this is where open ID

00:11:33,260 --> 00:11:38,600
Connect comes in yeah so I think the

00:11:36,050 --> 00:11:41,900
spec says it's a simple layer of

00:11:38,600 --> 00:11:44,480
authentication on top of a wolf yeah so

00:11:41,900 --> 00:11:46,610
earth is still compatible you know it

00:11:44,480 --> 00:11:48,350
still fully works but now we just add

00:11:46,610 --> 00:11:56,060
this extra layer on top which allows us

00:11:48,350 --> 00:11:59,990
to do authentication as well so it

00:11:56,060 --> 00:12:01,970
formalizes a wolf yeah we do actually

00:11:59,990 --> 00:12:05,390
say what token types there are now yeah

00:12:01,970 --> 00:12:07,160
so it's a JSON web token and you put in

00:12:05,390 --> 00:12:10,190
standardized cryptography so we used to

00:12:07,160 --> 00:12:12,290
Jose specs and as a result we get the

00:12:10,190 --> 00:12:14,600
standardized validation yeah so we can

00:12:12,290 --> 00:12:18,020
actually get a token and prove it's not

00:12:14,600 --> 00:12:22,250
been tampered with locally and using

00:12:18,020 --> 00:12:24,860
cryptography the authorization server

00:12:22,250 --> 00:12:28,400
becomes an identity provider yeah so it

00:12:24,860 --> 00:12:31,340
provides both access to some random HTTP

00:12:28,400 --> 00:12:33,740
API but it also provides data about the

00:12:31,340 --> 00:12:39,350
authentication event and about the user

00:12:33,740 --> 00:12:41,030
it's himself or themselves so that's in

00:12:39,350 --> 00:12:44,990
the form of what's called an identity

00:12:41,030 --> 00:12:48,110
resource yeah so it's kind of like a

00:12:44,990 --> 00:12:50,120
whole other API where we get permission

00:12:48,110 --> 00:12:53,030
to access things like their profile data

00:12:50,120 --> 00:12:55,250
yeah so I want to know what their first

00:12:53,030 --> 00:12:58,490
name is their last name their gender the

00:12:55,250 --> 00:13:00,680
day of birth we could say email so we

00:12:58,490 --> 00:13:01,940
want to know if they they have what

00:13:00,680 --> 00:13:03,410
their email address is whether it's

00:13:01,940 --> 00:13:05,299
verified

00:13:03,410 --> 00:13:09,079
and also brought in the concept of an

00:13:05,299 --> 00:13:14,269
identity token so I like to explain this

00:13:09,079 --> 00:13:16,789
as you know it's a way of it represents

00:13:14,269 --> 00:13:20,389
the authentication event yeah and we'll

00:13:16,789 --> 00:13:22,639
have a look at this in detail a bit yeah

00:13:20,389 --> 00:13:24,709
and it's designed to be as simple as

00:13:22,639 --> 00:13:28,099
possible for the client application yeah

00:13:24,709 --> 00:13:30,169
so the the complexity is in the identity

00:13:28,099 --> 00:13:31,909
provider not in your client application

00:13:30,169 --> 00:13:33,829
who's trying to consume it so we're

00:13:31,909 --> 00:13:35,419
trying to make authentication and

00:13:33,829 --> 00:13:37,339
authorization as easy as possible for

00:13:35,419 --> 00:13:39,769
people it's still a bit complicated

00:13:37,339 --> 00:13:41,329
because of the cryptography stuff but if

00:13:39,769 --> 00:13:43,099
you're using a library the right well at

00:13:41,329 --> 00:13:50,839
the right library yeah it'll do it for

00:13:43,099 --> 00:13:52,639
you so this is just kind of like an

00:13:50,839 --> 00:13:54,979
overview of what Open ID Connect brings

00:13:52,639 --> 00:13:57,379
we have the kind of JSON web token kind

00:13:54,979 --> 00:14:01,789
of stuff here we have the OAuth and some

00:13:57,379 --> 00:14:03,709
of the extra row of specifications and

00:14:01,789 --> 00:14:06,199
you know interesting things like

00:14:03,709 --> 00:14:08,600
discovery documentation yeah so we can

00:14:06,199 --> 00:14:11,379
programmatically interact so I integrate

00:14:08,600 --> 00:14:13,129
with the open ID Connect provider

00:14:11,379 --> 00:14:15,999
session management is another

00:14:13,129 --> 00:14:22,249
interesting thing we'll look at in a bit

00:14:15,999 --> 00:14:26,059
I'll leave it there from it so there's

00:14:22,249 --> 00:14:28,039
three endpoints with open ID Connect you

00:14:26,059 --> 00:14:30,079
have the authorization endpoint so

00:14:28,039 --> 00:14:32,149
that's where we saw all the human

00:14:30,079 --> 00:14:36,649
interaction before in that diagram so

00:14:32,149 --> 00:14:39,019
that's where we'll redirect the user off

00:14:36,649 --> 00:14:40,519
to the identity provider say right you

00:14:39,019 --> 00:14:42,229
need to go authenticate prove who you

00:14:40,519 --> 00:14:45,229
are and give us permission to do this on

00:14:42,229 --> 00:14:48,350
your behalf we then have the token

00:14:45,229 --> 00:14:50,169
endpoint which is it's just an API yeah

00:14:48,350 --> 00:14:52,970
so it's all back-channel communication

00:14:50,169 --> 00:14:56,689
this is where we swap that code for a

00:14:52,970 --> 00:15:00,399
token and then finally we have the user

00:14:56,689 --> 00:15:02,749
info endpoint which is again another API

00:15:00,399 --> 00:15:06,169
but here we can actually use that access

00:15:02,749 --> 00:15:09,919
token which we use to talk to various

00:15:06,169 --> 00:15:12,319
API so sending emails accessing some

00:15:09,919 --> 00:15:14,539
sort of admin area and we can now swap

00:15:12,319 --> 00:15:15,679
the access token for identity data so

00:15:14,539 --> 00:15:16,840
like I was saying the profile

00:15:15,679 --> 00:15:24,150
information that

00:15:16,840 --> 00:15:24,150
information I'm talking fast today sorry

00:15:26,640 --> 00:15:37,480
so this is a JSON web token yeah happy

00:15:33,520 --> 00:15:40,660
yeah there's actually three dots in

00:15:37,480 --> 00:15:43,690
there somewhere it's one near the top

00:15:40,660 --> 00:15:46,150
there and another one forever on and

00:15:43,690 --> 00:15:48,520
these just signify three different parts

00:15:46,150 --> 00:15:52,000
of a JSON web token you have the header

00:15:48,520 --> 00:15:55,030
which describes itself basically it

00:15:52,000 --> 00:15:56,980
describes the token you have the second

00:15:55,030 --> 00:15:58,540
part which is the payload so that

00:15:56,980 --> 00:16:00,700
includes all the information about the

00:15:58,540 --> 00:16:03,010
authentication event maybe a bit of

00:16:00,700 --> 00:16:05,260
identity data just to just to tease the

00:16:03,010 --> 00:16:08,830
application and then the third bit is

00:16:05,260 --> 00:16:14,760
the actual signature so it's been signed

00:16:08,830 --> 00:16:14,760
yeah so it's a it's digitally verifiable

00:16:14,910 --> 00:16:20,050
so the first two parts are just base 64

00:16:18,280 --> 00:16:23,620
encoded and this is what they look like

00:16:20,050 --> 00:16:26,190
so the the page the header sorry as

00:16:23,620 --> 00:16:30,000
you're saying there right we use the RSA

00:16:26,190 --> 00:16:34,660
sha-256 algorithm to sign this hokum

00:16:30,000 --> 00:16:36,850
here's the key ID the kid which we can

00:16:34,660 --> 00:16:40,630
link back to what public key to use to

00:16:36,850 --> 00:16:43,510
verify this we say type of token is the

00:16:40,630 --> 00:16:46,290
JSON web token and then the payload

00:16:43,510 --> 00:16:49,890
we've got things like not before time

00:16:46,290 --> 00:16:56,050
expiration and that's the C POC times

00:16:49,890 --> 00:16:58,180
seconds since January the 1st 1970 big

00:16:56,050 --> 00:17:00,550
thing here is the issuer so who actually

00:16:58,180 --> 00:17:02,680
issued the token is it who we expected

00:17:00,550 --> 00:17:05,050
to issue the token that's quite an

00:17:02,680 --> 00:17:08,500
important one we've got the intended

00:17:05,050 --> 00:17:11,620
audience yeah so who is this identity

00:17:08,500 --> 00:17:13,660
token actually meant to be issued to so

00:17:11,620 --> 00:17:16,030
if the access token the intended

00:17:13,660 --> 00:17:17,709
audience was the API yeah the the

00:17:16,030 --> 00:17:20,680
protected resource it was going to

00:17:17,709 --> 00:17:24,910
unlock for you in this case the identity

00:17:20,680 --> 00:17:27,250
token is only for the client yeah we

00:17:24,910 --> 00:17:29,380
have the nonce which has nothing to do

00:17:27,250 --> 00:17:32,710
with the kid

00:17:29,380 --> 00:17:36,210
I don't know why they chose that it's

00:17:32,710 --> 00:17:38,980
bizarre I don't obviously know English

00:17:36,210 --> 00:17:43,450
so that's kind of like a randomly

00:17:38,980 --> 00:17:45,400
generated value so when you make a

00:17:43,450 --> 00:17:46,570
request for the token at some point

00:17:45,400 --> 00:17:49,840
you'll state the nonce

00:17:46,570 --> 00:17:51,370
some people are still going and this is

00:17:49,840 --> 00:17:55,120
basically repeated back to you in the

00:17:51,370 --> 00:17:57,970
token so it's a way of verifying that

00:17:55,120 --> 00:18:00,040
the token that's been sent to you was in

00:17:57,970 --> 00:18:02,080
response to the token you made yeah so

00:18:00,040 --> 00:18:03,940
someone's not just copying tokens from

00:18:02,080 --> 00:18:06,130
some other application or from some

00:18:03,940 --> 00:18:09,040
other request feeding into your

00:18:06,130 --> 00:18:10,720
application so that way they might try

00:18:09,040 --> 00:18:14,850
and impersonate someone yeah so it's

00:18:10,720 --> 00:18:19,540
called a cut and paste attack issued out

00:18:14,850 --> 00:18:21,940
session ID sub is an interesting one

00:18:19,540 --> 00:18:25,420
subject so that's the unique identifier

00:18:21,940 --> 00:18:28,060
for this user within this application

00:18:25,420 --> 00:18:29,740
yeah it could be unique identifiers

00:18:28,060 --> 00:18:31,750
across all the applications for this

00:18:29,740 --> 00:18:33,340
issuer or it could be one generated

00:18:31,750 --> 00:18:37,270
especially for this app but it will

00:18:33,340 --> 00:18:40,020
always be the same for that user and

00:18:37,270 --> 00:18:43,990
then finally we have identity provider

00:18:40,020 --> 00:18:45,370
so we've said there basically it was a

00:18:43,990 --> 00:18:47,640
local identity provider its identity

00:18:45,370 --> 00:18:49,930
server or your actual open ID provider

00:18:47,640 --> 00:18:52,810
that could say something like Google or

00:18:49,930 --> 00:18:54,460
Facebook yeah so if you logged in using

00:18:52,810 --> 00:18:56,920
those fendt ocation methods using

00:18:54,460 --> 00:19:00,040
account from some other provider might

00:18:56,920 --> 00:19:02,650
say that there and we have the AMR which

00:19:00,040 --> 00:19:07,270
is the authentication method reference

00:19:02,650 --> 00:19:09,280
so how they authenticated so password in

00:19:07,270 --> 00:19:12,930
this case and there's a nice spec out

00:19:09,280 --> 00:19:15,010
there now of loads of biometric versions

00:19:12,930 --> 00:19:16,930
maybe you want to do some logic about

00:19:15,010 --> 00:19:18,310
that who knows you might say to log into

00:19:16,930 --> 00:19:20,880
this app you must have used your thing

00:19:18,310 --> 00:19:20,880
fingerprint

00:19:24,670 --> 00:19:32,320
don't say any more about that yes so

00:19:28,830 --> 00:19:35,380
these tokens issued once yeah you use

00:19:32,320 --> 00:19:37,390
them to figure out who the user was make

00:19:35,380 --> 00:19:39,130
sure it's actually a valid token is

00:19:37,390 --> 00:19:42,760
about authentication event you're happy

00:19:39,130 --> 00:19:45,490
with it if I start putting authorization

00:19:42,760 --> 00:19:49,030
data in there yeah so things like

00:19:45,490 --> 00:19:52,150
they're allowed to send email addresses

00:19:49,030 --> 00:19:53,890
they can they're allowed to write a

00:19:52,150 --> 00:19:58,630
prescription for this person they are an

00:19:53,890 --> 00:20:01,270
administrator yeah what happens when I

00:19:58,630 --> 00:20:04,600
do something accidently or I give

00:20:01,270 --> 00:20:06,360
someone the wrong permissions so what

00:20:04,600 --> 00:20:09,220
the question is how do I revoke it yeah

00:20:06,360 --> 00:20:10,480
you got a token it's got an expiration

00:20:09,220 --> 00:20:15,190
lasts for an hour

00:20:10,480 --> 00:20:16,750
how do I revoke that the thing is like I

00:20:15,190 --> 00:20:21,250
can I have to wait for them to expire

00:20:16,750 --> 00:20:23,770
yeah so don't put authorization date in

00:20:21,250 --> 00:20:25,240
here just think about the issue of what

00:20:23,770 --> 00:20:27,220
if you accidentally get someone admin

00:20:25,240 --> 00:20:28,600
rights how how you gonna get that away

00:20:27,220 --> 00:20:30,820
from them where you phone them up and

00:20:28,600 --> 00:20:32,140
say sorry I accidentally gave you admin

00:20:30,820 --> 00:20:34,380
rights can you please log out and log

00:20:32,140 --> 00:20:38,020
back in it's not going to go down well

00:20:34,380 --> 00:20:41,070
so this is purely authentication don't

00:20:38,020 --> 00:20:45,550
try and put authorization data in here

00:20:41,070 --> 00:20:46,720
okay so to client types confidential

00:20:45,550 --> 00:20:48,850
client which is what we just kind of

00:20:46,720 --> 00:20:52,150
talked about a minute ago with the

00:20:48,850 --> 00:20:54,580
tokens can be done via swear accessed by

00:20:52,150 --> 00:20:57,270
the back-channel the client can keep a

00:20:54,580 --> 00:21:00,460
secret so they can actually authenticate

00:20:57,270 --> 00:21:03,220
however if I have a mobile application

00:21:00,460 --> 00:21:05,740
and I deploy it with the same secret

00:21:03,220 --> 00:21:06,960
across hundreds of devices is that

00:21:05,740 --> 00:21:12,640
secret a secret anymore

00:21:06,960 --> 00:21:15,040
no same with JavaScript yeah so if I try

00:21:12,640 --> 00:21:16,870
using a secret and JavaScript someone

00:21:15,040 --> 00:21:20,370
just hit f12 and they can go see it so

00:21:16,870 --> 00:21:20,370
it's not really a secret anymore

00:21:20,460 --> 00:21:24,950
so yeah

00:21:23,450 --> 00:21:26,450
applications running inside the browser

00:21:24,950 --> 00:21:28,100
so all their source code is in the

00:21:26,450 --> 00:21:31,820
browser they're running their single

00:21:28,100 --> 00:21:36,860
page application they can just can't do

00:21:31,820 --> 00:21:38,929
you client authentication so this means

00:21:36,860 --> 00:21:41,389
like like you're saying what's the point

00:21:38,929 --> 00:21:43,519
in the code then yeah the code doesn't

00:21:41,389 --> 00:21:47,059
add any extra because we can't put a

00:21:43,519 --> 00:21:48,950
secret with it so the tokens still going

00:21:47,059 --> 00:21:50,240
to come by the browser so why don't we

00:21:48,950 --> 00:21:55,580
just ask for the token straight away

00:21:50,240 --> 00:21:58,519
yeah so yeah big thing to remember your

00:21:55,580 --> 00:22:01,250
tokens are exposed yeah they can be seen

00:21:58,519 --> 00:22:08,019
in the browser as a user if I hit f12 I

00:22:01,250 --> 00:22:09,769
could probably find the token itself so

00:22:08,019 --> 00:22:14,120
actually it's not all doom and gloom

00:22:09,769 --> 00:22:16,130
there the identity token as I said it's

00:22:14,120 --> 00:22:18,500
fine going by the browser it can't

00:22:16,130 --> 00:22:20,600
really be reused because as long as the

00:22:18,500 --> 00:22:22,580
long as your client applications are

00:22:20,600 --> 00:22:24,559
verifying the identity tokens correctly

00:22:22,580 --> 00:22:26,299
so they're checking the nonce is what

00:22:24,559 --> 00:22:28,490
they're expecting they're checking the

00:22:26,299 --> 00:22:29,990
issuer and the audience are what they're

00:22:28,490 --> 00:22:33,159
expecting yeah so the audience's

00:22:29,990 --> 00:22:38,389
themselves can't really reuse it yeah

00:22:33,159 --> 00:22:40,250
access tokens though can be and we look

00:22:38,389 --> 00:22:42,169
at how we can kind of combat this kind

00:22:40,250 --> 00:22:44,860
of stuff in a bit

00:22:42,169 --> 00:22:48,500
there's no specification for client-side

00:22:44,860 --> 00:22:50,720
applications like this yeah there is for

00:22:48,500 --> 00:22:53,840
native apps and pretty much everything

00:22:50,720 --> 00:22:55,130
else going over than a spa yeah so we've

00:22:53,840 --> 00:22:58,429
kind of got a piece this stuff together

00:22:55,130 --> 00:22:59,870
ourselves and try and bit of a community

00:22:58,429 --> 00:23:09,909
effort to try and maybe come up with a

00:22:59,870 --> 00:23:13,970
spec soon yeah ok so this is what a

00:23:09,909 --> 00:23:15,769
request actually looks like when using a

00:23:13,970 --> 00:23:19,519
spa we've already used what's called the

00:23:15,769 --> 00:23:21,909
implicit authentication flow so as I

00:23:19,519 --> 00:23:24,559
saying before we can explicitly verify

00:23:21,909 --> 00:23:27,919
ourselves we can't prove that weird this

00:23:24,559 --> 00:23:30,289
application really there's no

00:23:27,919 --> 00:23:31,940
authorization grant or as a result so we

00:23:30,289 --> 00:23:36,350
just ask for the token straight up

00:23:31,940 --> 00:23:37,309
give me the token so as a result there's

00:23:36,350 --> 00:23:39,429
no use of the tok

00:23:37,309 --> 00:23:42,080
point there's no use of client secrets

00:23:39,429 --> 00:23:44,330
we do everything via the authorization

00:23:42,080 --> 00:23:49,730
endpoint and as a result everything via

00:23:44,330 --> 00:23:51,649
the browser so when we have when we use

00:23:49,730 --> 00:23:54,230
Open ID Connect we have to pre-register

00:23:51,649 --> 00:23:55,669
our client application yeah so that's

00:23:54,230 --> 00:23:58,039
where the client ID at the top there

00:23:55,669 --> 00:24:00,049
comes from so I've said to them yep I'm

00:23:58,039 --> 00:24:02,240
I missed an old client I'm mister

00:24:00,049 --> 00:24:06,230
angular client I have a record in your

00:24:02,240 --> 00:24:06,980
database most probably we say what we

00:24:06,230 --> 00:24:08,840
want in return

00:24:06,980 --> 00:24:10,879
so this dictates what flow we're using

00:24:08,840 --> 00:24:12,769
so before when we looked at the ideal

00:24:10,879 --> 00:24:15,259
situation we were just asking for code

00:24:12,769 --> 00:24:18,169
yeah we swapped the code then for our

00:24:15,259 --> 00:24:19,879
identity token and an access token in

00:24:18,169 --> 00:24:21,200
this case we've just said yeah just give

00:24:19,879 --> 00:24:22,700
me the app give me the identity token

00:24:21,200 --> 00:24:24,289
straight to me

00:24:22,700 --> 00:24:29,629
give me the token as well at the same

00:24:24,289 --> 00:24:32,119
time we also say what scopes we want to

00:24:29,629 --> 00:24:35,869
access so what what permissions about

00:24:32,119 --> 00:24:38,389
what not permissions what what do we

00:24:35,869 --> 00:24:40,970
want to access on the user's behalf so

00:24:38,389 --> 00:24:44,119
open ID is their subject claim so give

00:24:40,970 --> 00:24:46,429
me their unique identifiers profile and

00:24:44,119 --> 00:24:48,950
email we've covered before I might want

00:24:46,429 --> 00:24:52,659
to say API one or like API one don't

00:24:48,950 --> 00:24:55,210
read so we don't read access to API one

00:24:52,659 --> 00:24:59,600
yeah and then we have the redirect URI

00:24:55,210 --> 00:25:01,070
so this is where a bit of a little bit

00:24:59,600 --> 00:25:03,710
of client authentication I guess comes

00:25:01,070 --> 00:25:06,860
in so this is basically you're telling

00:25:03,710 --> 00:25:08,779
the you're telling the open ID cadet

00:25:06,860 --> 00:25:11,570
provider this is where I want you to

00:25:08,779 --> 00:25:13,909
send the tokens to yeah so this this

00:25:11,570 --> 00:25:16,639
this endpoint is pre registered within

00:25:13,909 --> 00:25:18,590
the open ID Connect provider if it's the

00:25:16,639 --> 00:25:24,080
wrong endpoint you'll just go down sorry

00:25:18,590 --> 00:25:26,450
got send those tokens and again we have

00:25:24,080 --> 00:25:28,460
the nonce which we expect to be repeated

00:25:26,450 --> 00:25:31,159
back to us as a result of this

00:25:28,460 --> 00:25:33,080
authorized request the user is going to

00:25:31,159 --> 00:25:35,600
be redirected to the identity provider

00:25:33,080 --> 00:25:39,139
they're gonna possibly login they might

00:25:35,600 --> 00:25:40,999
be logged in already and then via the

00:25:39,139 --> 00:25:45,590
browser we get redirected back to our

00:25:40,999 --> 00:25:47,539
callback I'll redirect your right and we

00:25:45,590 --> 00:25:50,480
include the tokens in the hash fragment

00:25:47,539 --> 00:25:53,060
on that so

00:25:50,480 --> 00:25:58,130
using the hash fragment is mainly again

00:25:53,060 --> 00:26:01,040
to minimize attack services yeah so with

00:25:58,130 --> 00:26:02,650
with hash fragments everything before

00:26:01,040 --> 00:26:04,790
the hash is sent to the server

00:26:02,650 --> 00:26:07,580
everything afterwards is kept within the

00:26:04,790 --> 00:26:09,170
browser yeah so the user agent the

00:26:07,580 --> 00:26:12,020
browser is going to see the tokens we

00:26:09,170 --> 00:26:14,090
can't really get around that but we can

00:26:12,020 --> 00:26:16,310
stop these tokens from pinging around

00:26:14,090 --> 00:26:18,290
the internet quite so much so the

00:26:16,310 --> 00:26:20,230
alternative would be query string where

00:26:18,290 --> 00:26:23,840
that would be sent to a server possibly

00:26:20,230 --> 00:26:28,910
and it could even be cached depending on

00:26:23,840 --> 00:26:33,020
what policies using so we're saying

00:26:28,910 --> 00:26:34,700
before yes or I'll describe this first

00:26:33,020 --> 00:26:37,250
so we get the identity token which is

00:26:34,700 --> 00:26:40,640
going to be the bigger one we also get

00:26:37,250 --> 00:26:42,590
the access token if we ask for it which

00:26:40,640 --> 00:26:45,500
can potentially be a lot smaller we can

00:26:42,590 --> 00:26:47,090
use some sort of other access token

00:26:45,500 --> 00:26:50,420
scheme doesn't necessarily have to be a

00:26:47,090 --> 00:26:52,520
JSON web token this one we say what type

00:26:50,420 --> 00:26:54,890
the access token is so it's bearer and

00:26:52,520 --> 00:26:56,780
we'll see that in action in a bit and we

00:26:54,890 --> 00:27:00,080
also say when it expires which is in

00:26:56,780 --> 00:27:01,940
seconds so I've done an hour there for a

00:27:00,080 --> 00:27:04,160
reason and that's typically what I'd

00:27:01,940 --> 00:27:07,160
recommend for a client-side application

00:27:04,160 --> 00:27:09,590
where the token is potentially okay has

00:27:07,160 --> 00:27:12,140
more potential to be stolen yeah so

00:27:09,590 --> 00:27:13,820
giving out long-lived tokens is just

00:27:12,140 --> 00:27:16,460
asking for trouble in this case they're

00:27:13,820 --> 00:27:18,560
they're going by the browser I mean if

00:27:16,460 --> 00:27:20,510
you haven't made it if you haven't

00:27:18,560 --> 00:27:22,040
secured to your client-side application

00:27:20,510 --> 00:27:26,030
properly yeah they could easily be

00:27:22,040 --> 00:27:28,880
stolen the user could even just have 12

00:27:26,030 --> 00:27:31,190
and go take the token which I guess is

00:27:28,880 --> 00:27:33,200
fair enough yeah it's it's kind of we're

00:27:31,190 --> 00:27:34,490
doing on their behalf anyway but at the

00:27:33,200 --> 00:27:41,960
same time the token wasn't really

00:27:34,490 --> 00:27:44,450
intended for them so going on from refre

00:27:41,960 --> 00:27:47,540
going on from long-lived tokens we can't

00:27:44,450 --> 00:27:51,320
use the concept of refresh tokens yeah

00:27:47,540 --> 00:27:54,470
so if so with their Worth and open ID

00:27:51,320 --> 00:27:56,150
Connect there's you asked for another

00:27:54,470 --> 00:27:58,130
type of token again called a refresh

00:27:56,150 --> 00:27:59,960
token and you can just use this

00:27:58,130 --> 00:28:01,880
indefinitely with your secret just to

00:27:59,960 --> 00:28:04,320
swap the Refresh token for a new access

00:28:01,880 --> 00:28:06,389
token and possibly even a new refreshed

00:28:04,320 --> 00:28:09,210
same time but it allows you to keep

00:28:06,389 --> 00:28:13,139
doing long lived processing after the

00:28:09,210 --> 00:28:16,259
user has left the application in this

00:28:13,139 --> 00:28:17,700
case again it can't keep a secret even

00:28:16,259 --> 00:28:20,639
if you did use a secret it's easily

00:28:17,700 --> 00:28:22,440
steal you know easily discoverable so if

00:28:20,639 --> 00:28:23,759
you gave this guy a refresh token and

00:28:22,440 --> 00:28:26,960
someone stole that you know let's just

00:28:23,759 --> 00:28:34,980
got unlimited access to your application

00:28:26,960 --> 00:28:36,539
or your api s-- so there's a couple of

00:28:34,980 --> 00:28:38,100
defenses here i just want to talk about

00:28:36,539 --> 00:28:41,009
and we will talk about the the

00:28:38,100 --> 00:28:48,389
alternative to refresh tokens there's a

00:28:41,009 --> 00:28:50,429
couple of defenses so for one if we ask

00:28:48,389 --> 00:28:53,820
for identity token and token at the same

00:28:50,429 --> 00:28:56,309
time the identity token will be given

00:28:53,820 --> 00:28:58,740
another claim in the payload called the

00:28:56,309 --> 00:29:00,659
access token hash it's actually a hash

00:28:58,740 --> 00:29:03,029
of the access token that's meant to be

00:29:00,659 --> 00:29:04,350
sent with it at the same time so it's a

00:29:03,029 --> 00:29:07,500
little defense against the cut-and-paste

00:29:04,350 --> 00:29:09,029
attack again where someone might go okay

00:29:07,500 --> 00:29:10,769
i'll log in but then I'll intercept the

00:29:09,029 --> 00:29:13,259
request and paste in a token I've stolen

00:29:10,769 --> 00:29:15,149
from another user so I can get access to

00:29:13,259 --> 00:29:17,039
the client application and then start

00:29:15,149 --> 00:29:17,580
sending emails maybe on someone else's

00:29:17,039 --> 00:29:20,730
behalf

00:29:17,580 --> 00:29:23,100
you know maliciously so we can prove

00:29:20,730 --> 00:29:25,379
that a verified that the token that was

00:29:23,100 --> 00:29:32,490
sent to us was intended to be as part of

00:29:25,379 --> 00:29:38,000
this request now there is one part which

00:29:32,490 --> 00:29:38,000
hasn't really been solved yet and that's

00:29:38,899 --> 00:29:44,879
bearer tokens just being stolen after

00:29:42,480 --> 00:29:46,830
the fact so we can verify that token

00:29:44,879 --> 00:29:48,570
beings the tokens being sent to us are

00:29:46,830 --> 00:29:50,870
the ones that are meant to be sent to us

00:29:48,570 --> 00:29:53,279
the legitimate they're intended for us

00:29:50,870 --> 00:29:55,320
but then if someone steals that token

00:29:53,279 --> 00:29:58,259
after the fact and starts using it our

00:29:55,320 --> 00:30:02,509
API just goes yeah right yeah this is as

00:29:58,259 --> 00:30:04,889
far as it knows as a valid token so

00:30:02,509 --> 00:30:06,840
there's some specs around this being

00:30:04,889 --> 00:30:10,769
written right now which should hopefully

00:30:06,840 --> 00:30:13,590
start solving these kind of problems but

00:30:10,769 --> 00:30:16,100
I mean it remains to be seen whether

00:30:13,590 --> 00:30:18,210
this really affects our like spars

00:30:16,100 --> 00:30:21,840
whether it's gonna be mainly for

00:30:18,210 --> 00:30:23,429
clients and server side apps again but

00:30:21,840 --> 00:30:25,619
those kind of things are like proof of

00:30:23,429 --> 00:30:27,119
possession tokens htb token bindings

00:30:25,619 --> 00:30:32,759
that's the kind of stuff we're starting

00:30:27,119 --> 00:30:33,990
to implement to combat this write code

00:30:32,759 --> 00:30:35,220
and we can actually see what we've been

00:30:33,990 --> 00:30:38,460
talking about an action and hopefully

00:30:35,220 --> 00:30:42,480
make it a bit clearer so yeah we use the

00:30:38,460 --> 00:30:44,220
identity server for you know I'm paid to

00:30:42,480 --> 00:30:46,889
do identity server for so of course I'm

00:30:44,220 --> 00:30:50,549
going to use it but the main thing about

00:30:46,889 --> 00:30:52,499
it is it's a certified provider yeah so

00:30:50,549 --> 00:30:54,450
is actually the open ID connect guys

00:30:52,499 --> 00:30:56,879
have actually looked tested this thing

00:30:54,450 --> 00:30:58,980
and proven that it works the

00:30:56,879 --> 00:31:02,190
specification yes there's no hidden

00:30:58,980 --> 00:31:05,249
gotchas in there and there's unlike some

00:31:02,190 --> 00:31:07,049
paid for providers there's no no

00:31:05,249 --> 00:31:09,809
provider specifics in there locking you

00:31:07,049 --> 00:31:12,690
in so there's no tweaks to the spec in

00:31:09,809 --> 00:31:14,159
there also the main thing the main

00:31:12,690 --> 00:31:16,590
reason I like it is that it's actually a

00:31:14,159 --> 00:31:18,980
framework so everything is done

00:31:16,590 --> 00:31:21,509
programmatically I can actually start

00:31:18,980 --> 00:31:22,860
extending the the protocols so I've

00:31:21,509 --> 00:31:26,340
actually you know for instance you can

00:31:22,860 --> 00:31:27,990
add in WS Federation sam'l to P you

00:31:26,340 --> 00:31:30,860
don't like the way secrets are hashed or

00:31:27,990 --> 00:31:33,600
stored or compared go ahead change it

00:31:30,860 --> 00:31:37,009
don't let the way you know even redirect

00:31:33,600 --> 00:31:38,940
your eyes a validated go and change it

00:31:37,009 --> 00:31:41,159
and unfortunately a lot of other

00:31:38,940 --> 00:31:46,350
competitors are mainly like XML kind of

00:31:41,159 --> 00:31:47,970
config driven or closed source and for

00:31:46,350 --> 00:31:50,639
the the spy itself we're going to use

00:31:47,970 --> 00:31:54,269
another library as time from written by

00:31:50,639 --> 00:31:57,029
Brock Brock Allen called oh I DC client

00:31:54,269 --> 00:31:59,159
Jas again this is certified as a relying

00:31:57,029 --> 00:32:01,679
party so a certified that it verifies

00:31:59,159 --> 00:32:04,769
tokens correctly can authenticate users

00:32:01,679 --> 00:32:06,330
safely there's a couple of others we

00:32:04,769 --> 00:32:09,149
could be using so there's there's one

00:32:06,330 --> 00:32:11,279
for typescript one for angular but I

00:32:09,149 --> 00:32:12,809
thought you know not everyone here is

00:32:11,279 --> 00:32:15,119
gonna be using angular so let's use

00:32:12,809 --> 00:32:19,470
something a bit more vanilla vanilla

00:32:15,119 --> 00:32:24,059
JavaScript works of any of them so demo

00:32:19,470 --> 00:32:26,190
time so I've got a small identity server

00:32:24,059 --> 00:32:27,790
instance running that's logging that's

00:32:26,190 --> 00:32:29,560
not interesting

00:32:27,790 --> 00:32:32,530
so to get a identity server up and

00:32:29,560 --> 00:32:34,920
running all you have to do is this kind

00:32:32,530 --> 00:32:39,100
of block here in the di part of your

00:32:34,920 --> 00:32:40,270
your asp.net core application so here

00:32:39,100 --> 00:32:43,390
we're just saying

00:32:40,270 --> 00:32:46,090
initializing some in-memory stores so

00:32:43,390 --> 00:32:48,340
here's all our identity scopes here's a

00:32:46,090 --> 00:32:51,580
list of API scopes yeah so the API

00:32:48,340 --> 00:32:55,240
scopes be your custom API is like your

00:32:51,580 --> 00:32:57,190
mail server I keep coming back on may be

00:32:55,240 --> 00:32:59,590
your prescription service or some sort

00:32:57,190 --> 00:33:02,890
of ordering service whilst the identity

00:32:59,590 --> 00:33:05,560
resource scopes are more well their

00:33:02,890 --> 00:33:09,310
identity yeah so my username my email

00:33:05,560 --> 00:33:13,030
address my gender donate core to support

00:33:09,310 --> 00:33:17,070
is on its way but it's in our c1 I think

00:33:13,030 --> 00:33:17,070
but release candidates a new beta yeah

00:33:17,310 --> 00:33:27,100
if you don't call it I see no one tries

00:33:19,960 --> 00:33:31,090
it so yeah so we got some in memory test

00:33:27,100 --> 00:33:33,340
users as well Alice and Bob and we've

00:33:31,090 --> 00:33:36,130
just put in like a development signing

00:33:33,340 --> 00:33:38,260
certificate so this is the private key

00:33:36,130 --> 00:33:43,570
we'll be using to sign digitally sign

00:33:38,260 --> 00:33:46,720
our tokens we send out and then all you

00:33:43,570 --> 00:33:49,300
need to do in your actual pipeline is

00:33:46,720 --> 00:33:50,590
just say use identity server yeah so

00:33:49,300 --> 00:33:53,020
that's just going to intercept any

00:33:50,590 --> 00:33:56,320
routes that match the actual protocol

00:33:53,020 --> 00:33:57,760
requests and then you just plug in MVC

00:33:56,320 --> 00:33:59,890
afterwards because we've got a little UI

00:33:57,760 --> 00:34:03,100
around it which actually performs user

00:33:59,890 --> 00:34:05,080
authentication so just to be clear when

00:34:03,100 --> 00:34:06,970
we go back to our layer stuff identity

00:34:05,080 --> 00:34:09,130
service the authentication layer you

00:34:06,970 --> 00:34:10,450
know so it does not even authentication

00:34:09,130 --> 00:34:13,330
is it's kind of that it's the protocol

00:34:10,450 --> 00:34:15,370
layer yeah if you want when you actually

00:34:13,330 --> 00:34:17,550
wanna do the authentication so verifying

00:34:15,370 --> 00:34:20,550
users credentials that's all up to you

00:34:17,550 --> 00:34:24,520
angular they can't the the usual way of

00:34:20,550 --> 00:34:27,429
implementing kind of access control is

00:34:24,520 --> 00:34:30,610
via auth guards so we've just going here

00:34:27,429 --> 00:34:32,740
I can activate off guard so basically

00:34:30,610 --> 00:34:34,440
this will fire this would trigger when

00:34:32,740 --> 00:34:37,000
someone tries outsourcing a certain page

00:34:34,440 --> 00:34:39,720
and we just return true or false if

00:34:37,000 --> 00:34:43,389
they're actually allowed to do it or not

00:34:39,720 --> 00:34:44,559
if they're logged in we say true yeah

00:34:43,389 --> 00:34:48,309
you can go you can go into this

00:34:44,559 --> 00:34:49,839
protected page if not we we call a start

00:34:48,309 --> 00:34:55,179
with indication method which we'll look

00:34:49,839 --> 00:34:57,220
at now so I've I strike this out as an

00:34:55,179 --> 00:35:04,900
all-service just to show you know you're

00:34:57,220 --> 00:35:06,400
not tightly coupled into one library so

00:35:04,900 --> 00:35:09,160
this is the the first thing we need to

00:35:06,400 --> 00:35:13,809
do we actually need to kind of build up

00:35:09,160 --> 00:35:16,029
the information about our identity

00:35:13,809 --> 00:35:19,329
server installation yeah so the

00:35:16,029 --> 00:35:22,210
authority URL where identity server is

00:35:19,329 --> 00:35:23,980
running we then need to starts building

00:35:22,210 --> 00:35:28,630
up kind of information required to do

00:35:23,980 --> 00:35:30,640
the request so our client ID where the

00:35:28,630 --> 00:35:34,630
redirect URI where we want our tokens to

00:35:30,640 --> 00:35:38,410
be sent back to the response type so ID

00:35:34,630 --> 00:35:42,210
token and token so that just translates

00:35:38,410 --> 00:35:44,710
to the implicit flow what scopes we want

00:35:42,210 --> 00:35:47,259
and then there's a couple of nice little

00:35:44,710 --> 00:35:49,690
helper methods within the oid c client

00:35:47,259 --> 00:35:53,230
library so we've got filter protocol

00:35:49,690 --> 00:35:56,259
claims so I don't really care about not

00:35:53,230 --> 00:35:58,359
before times and stuff like this when

00:35:56,259 --> 00:36:00,400
you extract user data don't include that

00:35:58,359 --> 00:36:02,140
yeah that's what I'm saying

00:36:00,400 --> 00:36:07,930
and I really don't want to see the nonce

00:36:02,140 --> 00:36:11,109
in my application we then have load user

00:36:07,930 --> 00:36:13,180
info so this would trigger as soon as it

00:36:11,109 --> 00:36:15,670
verifies all the tokens it's quite happy

00:36:13,180 --> 00:36:17,950
with it and called the user info

00:36:15,670 --> 00:36:19,690
endpoint for you so get all the claims

00:36:17,950 --> 00:36:22,720
that it's allowed to find out about the

00:36:19,690 --> 00:36:24,069
user so as we saw earlier in the

00:36:22,720 --> 00:36:26,680
identity token we'll just have the

00:36:24,069 --> 00:36:28,480
subject so we can actually call the pro

00:36:26,680 --> 00:36:30,099
yeah automatically call the user info

00:36:28,480 --> 00:36:36,039
endpoint find out their email address as

00:36:30,099 --> 00:36:40,239
well so this is then reflected within

00:36:36,039 --> 00:36:44,079
identity server so we've got the client

00:36:40,239 --> 00:36:46,509
ID we actually say what grant types the

00:36:44,079 --> 00:36:48,579
client is allowed to access so we're

00:36:46,509 --> 00:36:52,119
allowed to communicate via so we say

00:36:48,579 --> 00:36:53,300
implicit we say what allow what Scopes

00:36:52,119 --> 00:36:57,080
is actually allowed to use

00:36:53,300 --> 00:36:58,760
yeah so I not all providers actually

00:36:57,080 --> 00:37:03,590
have that that's quite a useful feature

00:36:58,760 --> 00:37:07,070
you can you can scope down access per

00:37:03,590 --> 00:37:09,770
client that way I'm not sure why they

00:37:07,070 --> 00:37:14,360
don't huh laughter we actually know

00:37:09,770 --> 00:37:17,240
about the redirect URI because it's

00:37:14,360 --> 00:37:20,090
going to be spa we also need to

00:37:17,240 --> 00:37:23,150
understand what it's possibly going to

00:37:20,090 --> 00:37:25,310
be a cross-domain requests yeah and I

00:37:23,150 --> 00:37:26,810
always recommend deploying identity

00:37:25,310 --> 00:37:29,960
server on each of your clients on a

00:37:26,810 --> 00:37:32,890
separate subdomain else you have wife

00:37:29,960 --> 00:37:36,200
had a the problem a client had last week

00:37:32,890 --> 00:37:37,880
where they had about 20 apps on one

00:37:36,200 --> 00:37:41,480
domain and then wondered why there again

00:37:37,880 --> 00:37:43,370
cookie request length issues I mean

00:37:41,480 --> 00:37:45,920
because they're all squatting on the

00:37:43,370 --> 00:37:48,440
same thing yeah so yeah we need to say

00:37:45,920 --> 00:37:51,530
our Korres origin so that identity

00:37:48,440 --> 00:37:53,270
server will actually allow some

00:37:51,530 --> 00:37:58,010
browser-based application to call across

00:37:53,270 --> 00:38:00,440
to it again they're quite strict we

00:37:58,010 --> 00:38:01,820
actually have to say we allow access

00:38:00,440 --> 00:38:03,860
tokens via the browser for this

00:38:01,820 --> 00:38:06,110
application so as to stop people

00:38:03,860 --> 00:38:09,950
accidentally doing doing that

00:38:06,110 --> 00:38:12,290
functionality yeah and could by forcing

00:38:09,950 --> 00:38:14,450
people to be aware of what the possible

00:38:12,290 --> 00:38:16,850
security implementation they're they're

00:38:14,450 --> 00:38:19,760
causing here and then we have the access

00:38:16,850 --> 00:38:23,390
token lifetime I've included so this

00:38:19,760 --> 00:38:27,730
again strictness the redirect URI has to

00:38:23,390 --> 00:38:30,410
be exactly the same on both sides yeah

00:38:27,730 --> 00:38:33,530
it will a will throw an error if there's

00:38:30,410 --> 00:38:37,070
a casing issues or if there's a slash on

00:38:33,530 --> 00:38:42,440
the end of one but not the other it's

00:38:37,070 --> 00:38:44,990
being just purposely paranoid there so

00:38:42,440 --> 00:38:46,670
in the auth service in the constructor I

00:38:44,990 --> 00:38:50,150
base it is called the get user method

00:38:46,670 --> 00:38:50,930
and that just checks the the storage

00:38:50,150 --> 00:38:52,580
that

00:38:50,930 --> 00:38:54,860
oh I DC client has been configured to

00:38:52,580 --> 00:38:57,410
use so it has a look in there to see if

00:38:54,860 --> 00:39:02,120
there's any tokens maybe some profile

00:38:57,410 --> 00:39:04,910
data so is anyone actually around so by

00:39:02,120 --> 00:39:06,360
default uses session storage for reasons

00:39:04,910 --> 00:39:08,400
we said earlier about

00:39:06,360 --> 00:39:11,850
not writing personal information the

00:39:08,400 --> 00:39:13,950
disk you can swap that with a local

00:39:11,850 --> 00:39:16,530
storage if you don't care or you can use

00:39:13,950 --> 00:39:18,930
something not web storage like indexed

00:39:16,530 --> 00:39:22,500
DB which personally I only found out

00:39:18,930 --> 00:39:28,170
about the table it's it's been designed

00:39:22,500 --> 00:39:32,700
to work with that as well the user

00:39:28,170 --> 00:39:37,380
object mostly contains lots of

00:39:32,700 --> 00:39:40,320
information about the tokens so what

00:39:37,380 --> 00:39:43,950
token type it is the actual access token

00:39:40,320 --> 00:39:46,050
it will store the identity token but of

00:39:43,950 --> 00:39:48,510
what's used to us programmatically is

00:39:46,050 --> 00:39:51,090
things like profile so it automatically

00:39:48,510 --> 00:39:53,550
extracts any claims it can about the

00:39:51,090 --> 00:39:55,440
user so if we go into profile we'll see

00:39:53,550 --> 00:39:57,060
like oh yeah here's a claim type of

00:39:55,440 --> 00:39:57,480
email and we can actually access it like

00:39:57,060 --> 00:39:59,310
that

00:39:57,480 --> 00:40:01,580
maybe displaying it on the page just to

00:39:59,310 --> 00:40:05,430
make the user feel a bit more welcomed

00:40:01,580 --> 00:40:08,490
and we have expired as well which is

00:40:05,430 --> 00:40:10,650
something to be aware of at all times

00:40:08,490 --> 00:40:12,540
you know so if the if the token if the

00:40:10,650 --> 00:40:17,790
access token is expired we might want to

00:40:12,540 --> 00:40:19,380
proactively do something about it and

00:40:17,790 --> 00:40:23,040
I've got some helper methods there for

00:40:19,380 --> 00:40:25,650
get claims garrison header we'll take a

00:40:23,040 --> 00:40:27,480
look around a bit but here's where the

00:40:25,650 --> 00:40:29,970
magic happens so the start

00:40:27,480 --> 00:40:32,880
authentication method well sign in

00:40:29,970 --> 00:40:36,180
redirect even sorry so this is where we

00:40:32,880 --> 00:40:37,140
just tell our d6o ADC client is do you

00:40:36,180 --> 00:40:40,110
think yeah

00:40:37,140 --> 00:40:41,850
so we've configured it with the client

00:40:40,110 --> 00:40:43,460
settings so here's all the information

00:40:41,850 --> 00:40:46,500
about yourself you need to know to do a

00:40:43,460 --> 00:40:47,850
successful authentication request and by

00:40:46,500 --> 00:40:49,530
calling this it'll automatically

00:40:47,850 --> 00:40:51,240
generate that URL

00:40:49,530 --> 00:40:53,340
yeah the authorized request we saw

00:40:51,240 --> 00:40:57,380
earlier and redirect the user to the

00:40:53,340 --> 00:41:01,350
authorization server using that URL and

00:40:57,380 --> 00:41:02,880
then when that response comes back we

00:41:01,350 --> 00:41:05,700
somehow want to call this sign-in

00:41:02,880 --> 00:41:08,670
redirect callback which includes all the

00:41:05,700 --> 00:41:10,590
token verification which for some reason

00:41:08,670 --> 00:41:12,630
is something you have to say some some

00:41:10,590 --> 00:41:15,090
open ID connect libraries don't do token

00:41:12,630 --> 00:41:17,010
authenticate a token validation you know

00:41:15,090 --> 00:41:20,940
the hard bit yeah where you got the

00:41:17,010 --> 00:41:23,339
handle cryptography they don't bother

00:41:20,940 --> 00:41:27,420
and we tried to get them flack about it

00:41:23,339 --> 00:41:29,460
but yeah yeah so do the validation it'll

00:41:27,420 --> 00:41:31,619
make sure the identity token had token

00:41:29,460 --> 00:41:33,180
the ones you expecting that they match

00:41:31,619 --> 00:41:35,309
each other but they do have they're the

00:41:33,180 --> 00:41:38,099
same hat the access token hash inside

00:41:35,309 --> 00:41:40,020
the identity token it'll do it all for

00:41:38,099 --> 00:41:42,780
you yeah so all that stuff I said about

00:41:40,020 --> 00:41:48,510
before is useless knowledge just do it

00:41:42,780 --> 00:41:51,569
for you so we have our callback URL I've

00:41:48,510 --> 00:41:53,220
just done as a component which just on

00:41:51,569 --> 00:41:55,530
initialization we call complete

00:41:53,220 --> 00:42:02,160
authentication and we do that validation

00:41:55,530 --> 00:42:06,839
in there anywhere anything else worth

00:42:02,160 --> 00:42:08,130
saying about that yes so there's a there

00:42:06,839 --> 00:42:11,609
is another option in this library

00:42:08,130 --> 00:42:15,990
actually for sign-in pop-up yeah so if

00:42:11,609 --> 00:42:17,700
you're ux guys hate hey users leaving

00:42:15,990 --> 00:42:20,400
your webpage and get really paranoid

00:42:17,700 --> 00:42:23,460
about lost sales you could just do a

00:42:20,400 --> 00:42:25,589
pop-up personally i don't really have a

00:42:23,460 --> 00:42:28,799
strong opinion either way I prefer

00:42:25,589 --> 00:42:31,799
redirects but you're welcome to use

00:42:28,799 --> 00:42:34,109
pop-up I think there's also a community

00:42:31,799 --> 00:42:37,170
addition to the library which has

00:42:34,109 --> 00:42:39,270
support forked over but we can anyone's

00:42:37,170 --> 00:42:43,109
interested in that kind of using Cordova

00:42:39,270 --> 00:42:45,150
or ionic so JavaScript running on a

00:42:43,109 --> 00:42:46,529
native device give me a chair afterwards

00:42:45,150 --> 00:42:52,760
because there's some extra knowledge

00:42:46,529 --> 00:42:56,240
you'll probably benefit from yeah so

00:42:52,760 --> 00:42:56,240
let's see us in action

00:43:01,840 --> 00:43:14,600
I'm also available for a UI design okay

00:43:11,290 --> 00:43:17,450
and II preserve log and zoom in on that

00:43:14,600 --> 00:43:19,520
so they try and access the protected

00:43:17,450 --> 00:43:22,730
area this just simply has my auth guard

00:43:19,520 --> 00:43:24,440
on the root so this will kick in the

00:43:22,730 --> 00:43:27,290
fact that there's no user in the in the

00:43:24,440 --> 00:43:32,960
storage and we need to go to identity

00:43:27,290 --> 00:43:36,290
server to authenticate our tree fast so

00:43:32,960 --> 00:43:38,330
the first thing it does needs to know

00:43:36,290 --> 00:43:41,180
where to redirect them to yeah we've

00:43:38,330 --> 00:43:44,900
told them the authority which is

00:43:41,180 --> 00:43:47,210
localhost 5000 but we haven't told it

00:43:44,900 --> 00:43:49,940
where the authorization endpoint is or

00:43:47,210 --> 00:43:53,860
the user info endpoint so the first

00:43:49,940 --> 00:43:53,860
thing it does is goes to the disco doc

00:43:55,210 --> 00:44:01,010
which looks like this

00:43:57,520 --> 00:44:02,780
so this is a on a well-known endpoint so

00:44:01,010 --> 00:44:05,600
the same endpoint for every open ID

00:44:02,780 --> 00:44:08,600
Connect provider and it has the same set

00:44:05,600 --> 00:44:10,220
of values depending on what supported so

00:44:08,600 --> 00:44:12,080
in here we can see things like the

00:44:10,220 --> 00:44:13,850
authorization endpoint so that's where

00:44:12,080 --> 00:44:16,690
we're going to redirect the user and put

00:44:13,850 --> 00:44:18,560
our request on user info endpoint

00:44:16,690 --> 00:44:19,070
session endpoints which we'll talk about

00:44:18,560 --> 00:44:21,400
later

00:44:19,070 --> 00:44:23,720
but then we can start building up more

00:44:21,400 --> 00:44:25,160
kind of knowledge about the open ID

00:44:23,720 --> 00:44:27,530
connect provider when you see what

00:44:25,160 --> 00:44:29,240
scopes they support yeah you don't have

00:44:27,530 --> 00:44:32,210
to put all your scopes in this these are

00:44:29,240 --> 00:44:37,820
the publicly advertised ones what claim

00:44:32,210 --> 00:44:40,190
types you support flows even clients

00:44:37,820 --> 00:44:43,130
secret methods you know how you actually

00:44:40,190 --> 00:44:49,000
send a client secret and then various

00:44:43,130 --> 00:44:51,890
different like Josie Josie Jose kind of

00:44:49,000 --> 00:44:55,670
the algorithms support for doing your

00:44:51,890 --> 00:44:59,750
JSON web tokens what's of use mainly

00:44:55,670 --> 00:45:01,460
here is the JSON web key URL so this is

00:44:59,750 --> 00:45:05,930
the public keys we're going to be using

00:45:01,460 --> 00:45:08,330
to verify our tokens yeah verify the

00:45:05,930 --> 00:45:10,580
signatures so it's not like the case

00:45:08,330 --> 00:45:12,470
with like sam'l where you have to swap

00:45:10,580 --> 00:45:14,789
big metadata endpoints at first maybe

00:45:12,470 --> 00:45:18,269
swap keys and all the sort of stuff

00:45:14,789 --> 00:45:20,939
all done programmatically now and as you

00:45:18,269 --> 00:45:22,679
saw earlier here's the kid and that's

00:45:20,939 --> 00:45:24,959
the ID because you could have multiple

00:45:22,679 --> 00:45:27,569
signing keys yeah so some could have

00:45:24,959 --> 00:45:29,759
expirations you leave your public key up

00:45:27,569 --> 00:45:33,209
there so stay keep verifying them for

00:45:29,759 --> 00:45:34,859
maybe a week or so but you can allow

00:45:33,209 --> 00:45:38,039
people to start using the new key

00:45:34,859 --> 00:45:39,599
already so you can allow old keys to

00:45:38,039 --> 00:45:46,039
slowly fade out that way instead of just

00:45:39,599 --> 00:45:46,039
cutting them off of the heels okay

00:45:47,000 --> 00:45:55,730
that's big stream thank you so what

00:45:52,369 --> 00:45:58,359
happened next is our middleware our

00:45:55,730 --> 00:46:02,210
client library automatically generated

00:45:58,359 --> 00:46:06,050
the authorized request so we've got the

00:46:02,210 --> 00:46:10,250
the client ID the redirect URI response

00:46:06,050 --> 00:46:13,880
type scopes state and nonce so state is

00:46:10,250 --> 00:46:15,890
very similar to the nonce again it's

00:46:13,880 --> 00:46:18,200
it's a value gonna be matching back yeah

00:46:15,890 --> 00:46:20,060
but it just gets the state is instead of

00:46:18,200 --> 00:46:26,569
being in the token it's just echoed back

00:46:20,060 --> 00:46:28,160
on the return so at this point identity

00:46:26,569 --> 00:46:30,140
server goes right I've violated the

00:46:28,160 --> 00:46:31,490
request this is a valid request I'm

00:46:30,140 --> 00:46:33,410
happy of this they're asking for stuff

00:46:31,490 --> 00:46:36,650
they're allowed to do but they're not

00:46:33,410 --> 00:46:38,599
authenticated so this is custom to your

00:46:36,650 --> 00:46:40,550
application yeah so this is my this is

00:46:38,599 --> 00:46:43,190
some QuickStart you I done Brock's

00:46:40,550 --> 00:46:45,380
supply they're very clear don't use in

00:46:43,190 --> 00:46:47,859
production but be honest it's not a bad

00:46:45,380 --> 00:46:52,160
jumping-off point to go and figure out

00:46:47,859 --> 00:46:54,109
what you need to do and the ending of it

00:46:52,160 --> 00:46:56,270
is basically just need to issue a cookie

00:46:54,109 --> 00:46:57,890
yeah you need to issue a cookie using

00:46:56,270 --> 00:47:01,099
the authentication scheme identity

00:46:57,890 --> 00:47:02,839
server users so I'm just gonna log in

00:47:01,099 --> 00:47:05,680
just using them password in here so I'm

00:47:02,839 --> 00:47:05,680
going to be Alice today

00:47:05,869 --> 00:47:11,510
just a reminder remember me does not

00:47:07,819 --> 00:47:16,480
remember credentials it's possibly a bad

00:47:11,510 --> 00:47:19,069
name for it it's more of a remember

00:47:16,480 --> 00:47:21,410
remember my account for X amount of time

00:47:19,069 --> 00:47:24,560
yeah so you're saying remember me for 30

00:47:21,410 --> 00:47:26,359
days otherwise it just issues a cookie

00:47:24,560 --> 00:47:27,770
which is valid for the session only so

00:47:26,359 --> 00:47:29,420
when you close the browser next time you

00:47:27,770 --> 00:47:32,770
come along you're gonna have to real

00:47:29,420 --> 00:47:32,770
authentic eight with identity server

00:47:35,910 --> 00:47:44,009
I did I did a test before so I'll show

00:47:41,519 --> 00:47:45,269
you at the end if we have time but what

00:47:44,009 --> 00:47:47,849
also happens there is that we have to

00:47:45,269 --> 00:47:50,730
get screen displayed to the user saying

00:47:47,849 --> 00:47:52,890
do you give the view give this a client

00:47:50,730 --> 00:47:55,109
application permission to access these

00:47:52,890 --> 00:47:57,359
scopes on your behalf so it's a consent

00:47:55,109 --> 00:47:58,680
screen and you have the choice to say

00:47:57,359 --> 00:48:02,099
actually no I don't want to give this

00:47:58,680 --> 00:48:05,250
client application my email address you

00:48:02,099 --> 00:48:07,769
know it's it's up to you if you make the

00:48:05,250 --> 00:48:10,380
you even display that page if it's an

00:48:07,769 --> 00:48:12,109
internal application you you can get

00:48:10,380 --> 00:48:15,089
away of not doing it but if your

00:48:12,109 --> 00:48:16,319
federating with third party clients you

00:48:15,089 --> 00:48:17,369
definitely want to make people aware

00:48:16,319 --> 00:48:19,349
that you're going to be sharing

00:48:17,369 --> 00:48:22,799
information with them yeah so if just

00:48:19,349 --> 00:48:24,690
deep integrated with I can't think of a

00:48:22,799 --> 00:48:27,150
rival now but if you started allowing

00:48:24,690 --> 00:48:30,269
people to sign in to AXT use your

00:48:27,150 --> 00:48:32,250
accounts to access their client

00:48:30,269 --> 00:48:33,390
applications you really have to say you

00:48:32,250 --> 00:48:34,559
are you really have to make them know

00:48:33,390 --> 00:48:39,660
we're gonna be sending your email

00:48:34,559 --> 00:48:43,369
address to these people and then on the

00:48:39,660 --> 00:48:45,359
return see if we can see the request

00:48:43,369 --> 00:48:48,059
well no need is some notice in the

00:48:45,359 --> 00:48:49,859
browser here so as I said in the hash

00:48:48,059 --> 00:48:53,460
fragment we've hit that wolf call back

00:48:49,859 --> 00:48:57,210
endpoint we have the identity token the

00:48:53,460 --> 00:49:01,410
access token and token type and expires

00:48:57,210 --> 00:49:04,500
in my cosign so we can see here then

00:49:01,410 --> 00:49:06,900
that the the library has automatically

00:49:04,500 --> 00:49:08,640
called the JSON web key endpoint for us

00:49:06,900 --> 00:49:12,720
to go get the public key to verify the

00:49:08,640 --> 00:49:18,779
token if everything checks out it calls

00:49:12,720 --> 00:49:23,160
the user info endpoint by attaching the

00:49:18,779 --> 00:49:25,490
where is it yeah so it touches the

00:49:23,160 --> 00:49:28,440
access token to the authorization header

00:49:25,490 --> 00:49:31,950
so this is how we how we communicate

00:49:28,440 --> 00:49:34,579
with them with API is protected by oath

00:49:31,950 --> 00:49:37,109
use the authorization header preferably

00:49:34,579 --> 00:49:39,720
so here we say what type of token it is

00:49:37,109 --> 00:49:43,200
we say the bearer type and then we

00:49:39,720 --> 00:49:45,869
actually bung the token in there and the

00:49:43,200 --> 00:49:49,039
response to that is just Jason with a

00:49:45,869 --> 00:49:49,039
load of personal details

00:49:49,550 --> 00:49:54,780
okay

00:49:51,690 --> 00:49:56,250
so now if I go on a protected area we

00:49:54,780 --> 00:49:59,250
can now get in there we can see some

00:49:56,250 --> 00:50:03,330
personal details so this is what

00:49:59,250 --> 00:50:06,420
happened in the background we use

00:50:03,330 --> 00:50:10,560
session storage and we just paste in the

00:50:06,420 --> 00:50:12,990
token we paste in all that user object

00:50:10,560 --> 00:50:16,970
we looked at so whether when it expires

00:50:12,990 --> 00:50:20,730
some profile data access token to

00:50:16,970 --> 00:50:22,890
protect your API using a wolf all you

00:50:20,730 --> 00:50:26,310
need is this middleware here called use

00:50:22,890 --> 00:50:29,430
identity server authentication and that

00:50:26,310 --> 00:50:32,460
basically says check for the check for a

00:50:29,430 --> 00:50:34,470
bearer token being available yeah again

00:50:32,460 --> 00:50:35,730
we say our authority so this is going to

00:50:34,470 --> 00:50:38,400
be using that well-known endpoint to

00:50:35,730 --> 00:50:41,609
configure itself and we could say API

00:50:38,400 --> 00:50:44,339
name which says the token must have an

00:50:41,609 --> 00:50:46,520
audience of API one so the token is

00:50:44,339 --> 00:50:50,099
intended for me the protected resource

00:50:46,520 --> 00:50:51,330
we can say what scopes it must have it

00:50:50,099 --> 00:50:53,280
doesn't have to have all of these just

00:50:51,330 --> 00:50:57,750
need to have one of them validate that

00:50:53,280 --> 00:51:00,300
has at least one of those scopes and we

00:50:57,750 --> 00:51:01,830
recommend using this one because it's

00:51:00,300 --> 00:51:04,470
got a couple of extra features that the

00:51:01,830 --> 00:51:07,740
Microsoft one doesn't have so mainly

00:51:04,470 --> 00:51:09,960
that allowed scopes we can also start

00:51:07,740 --> 00:51:11,490
using other token types of this as well

00:51:09,960 --> 00:51:13,490
so yeah it kind of the concept of

00:51:11,490 --> 00:51:15,570
reference tokens but

00:51:13,490 --> 00:51:19,320
I'm not going to demo it because we're

00:51:15,570 --> 00:51:22,800
running out of time but the implicit

00:51:19,320 --> 00:51:24,599
flow relies on the user still being in

00:51:22,800 --> 00:51:28,080
front of the browser yeah so relies on

00:51:24,599 --> 00:51:31,080
them still being active so in that case

00:51:28,080 --> 00:51:32,400
when the access token expires yeah we

00:51:31,080 --> 00:51:34,380
can just send them off to identity

00:51:32,400 --> 00:51:36,150
server they can click yes give them a

00:51:34,380 --> 00:51:39,680
new access token or real authenticate

00:51:36,150 --> 00:51:42,150
and we can carry on our merry way

00:51:39,680 --> 00:51:44,160
the only problem of that is what if

00:51:42,150 --> 00:51:46,589
they've just filled in a form which took

00:51:44,160 --> 00:51:48,330
over an hour to do yeah and they hit

00:51:46,589 --> 00:51:49,800
submit and we send them off to identity

00:51:48,330 --> 00:51:53,460
server send them back in its nice blank

00:51:49,800 --> 00:51:54,900
form yeah it is infuriating right so

00:51:53,460 --> 00:51:56,310
this is where refresh tokens would have

00:51:54,900 --> 00:51:58,770
been handy yeah we could have

00:51:56,310 --> 00:52:01,349
automatically detected ah 401 the access

00:51:58,770 --> 00:52:01,809
tokens expired let's get a new one and

00:52:01,349 --> 00:52:07,059
then reset

00:52:01,809 --> 00:52:10,869
at the data so because we're in the same

00:52:07,059 --> 00:52:12,579
session we can normally safely assume

00:52:10,869 --> 00:52:14,319
that identity server they're still

00:52:12,579 --> 00:52:16,749
authenticated with an identity server

00:52:14,319 --> 00:52:18,009
yeah so the identity service session

00:52:16,749 --> 00:52:19,469
will be much longer lived than the

00:52:18,009 --> 00:52:22,329
access token

00:52:19,469 --> 00:52:26,319
so what Open ID Connect allows you to do

00:52:22,329 --> 00:52:28,930
is set a value in the query and then in

00:52:26,319 --> 00:52:32,289
the request called prompt and you say

00:52:28,930 --> 00:52:32,709
prompt equals none so if they're logged

00:52:32,289 --> 00:52:34,959
in

00:52:32,709 --> 00:52:37,029
just give me tokens yeah just send

00:52:34,959 --> 00:52:39,369
tokens right back if they're not logged

00:52:37,029 --> 00:52:39,640
in or if there's an error throw don't

00:52:39,369 --> 00:52:42,069
bother

00:52:39,640 --> 00:52:45,189
yeah so what we can actually do in

00:52:42,069 --> 00:52:48,069
behind is open up an iframe yeah we've

00:52:45,189 --> 00:52:51,689
it doesn't need to be displayed and this

00:52:48,069 --> 00:52:54,099
just calls pings off to identity server

00:52:51,689 --> 00:52:57,009
generating a whole new authorization

00:52:54,099 --> 00:53:00,039
request yeah if the users still logged

00:52:57,009 --> 00:53:02,920
in new token new tokens get sent back

00:53:00,039 --> 00:53:05,949
and we can consume them and update our

00:53:02,920 --> 00:53:08,829
our tokens internally if the users not

00:53:05,949 --> 00:53:10,359
logged in well when they hit submit in

00:53:08,829 --> 00:53:11,979
that form anyway they're gonna have an

00:53:10,359 --> 00:53:13,299
error yeah they need to they have

00:53:11,979 --> 00:53:16,239
they'll actually have to have their user

00:53:13,299 --> 00:53:17,799
experience disrupted but that's one

00:53:16,239 --> 00:53:22,709
waiting we can get around it just by

00:53:17,799 --> 00:53:24,670
keeping whole authorization requests so

00:53:22,709 --> 00:53:28,689
when you have a JavaScript application

00:53:24,670 --> 00:53:30,479
like I was saying you know there might

00:53:28,689 --> 00:53:33,039
not be a request for a quite a long time

00:53:30,479 --> 00:53:35,349
so they could happily just live in the

00:53:33,039 --> 00:53:38,650
JavaScript application mooching around

00:53:35,349 --> 00:53:41,019
looking at data doing whatever your

00:53:38,650 --> 00:53:42,699
JavaScript app does so I was going to

00:53:41,019 --> 00:53:44,469
show there move that bit today but I

00:53:42,699 --> 00:53:48,670
found managed to find a weird bug with

00:53:44,469 --> 00:53:50,979
angular and using this library around I

00:53:48,670 --> 00:53:52,749
think it seems around the way angular

00:53:50,979 --> 00:53:54,729
handles iframes so I think it's been Sun

00:53:52,749 --> 00:53:59,019
boxed in some weird way so I can't

00:53:54,729 --> 00:54:00,099
manage the response properly but yeah I

00:53:59,019 --> 00:54:03,099
mean other than that with plain

00:54:00,099 --> 00:54:05,589
JavaScript that works lovely and we can

00:54:03,099 --> 00:54:07,749
keep the session going and get logged a

00:54:05,589 --> 00:54:10,479
single site single sign out you know the

00:54:07,749 --> 00:54:12,719
elusive other side of the other side of

00:54:10,479 --> 00:54:12,719
the coin

00:54:12,910 --> 00:54:18,880
yeah I'll stop waffling on though next

00:54:15,999 --> 00:54:21,479
steps check us out on identity server

00:54:18,880 --> 00:54:25,950
comm so that's the commercial side of it

00:54:21,479 --> 00:54:28,239
otherwise if you want community driven

00:54:25,950 --> 00:54:30,249
articles I've got a few on identity

00:54:28,239 --> 00:54:34,660
server a wharf and open ID connect in

00:54:30,249 --> 00:54:36,609
general on Scott Brady 91 comm otherwise

00:54:34,660 --> 00:54:38,789
here's our products gotta plug them

00:54:36,609 --> 00:54:38,789
right

00:54:41,890 --> 00:54:48,980

YouTube URL: https://www.youtube.com/watch?v=I4AIh8nnt4o


