Title: Lessons Learned from the New Build Farm for Java - Developer South Coast - October 2018
Publication date: 2018-11-03
Playlist: Developer South Coast
Description: 
	Presented by Adam Farley.

The AdoptOpenJDK Build Farm is a new community project producing high-quality OpenJDK binaries for all versions, platforms, and variants. Want Java 10 with OpenJ9 on AIX or maybe Java 8 with HotSpot on macOS? AdoptOpenJDK can help! This session covers how 200+ people (from companies such as IBM, Oracle, and Red Hat), cloud providers, and the wider Java community (e.g., the LJC) collaborated to create a full build farm in under a year for the common good. Also learn how a modern CI build+test pipeline works:
• Building hosts with Ansible
• Build coordination with Jenkins
• Advanced shell scripts for building Java on any platform
• Swaths of testing
• Certification
•Deploying binaries via AdoptOpenJDK.net and the API gateway

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:05,150
hello everyone my name is Adam Farley

00:00:02,850 --> 00:00:08,130
and I'm here representing the adopt

00:00:05,150 --> 00:00:10,380
OpenJDK community and today I'm going to

00:00:08,130 --> 00:00:13,980
be telling you about lessons learned for

00:00:10,380 --> 00:00:15,870
the new build farm for Java itself it's

00:00:13,980 --> 00:00:17,789
okay if you don't understand every word

00:00:15,870 --> 00:00:19,920
in that sentence and we're going to be

00:00:17,789 --> 00:00:24,590
covering it all one step at a time so

00:00:19,920 --> 00:00:26,670
that nobody gets a nobody gets confused

00:00:24,590 --> 00:00:28,699
so here's what we're going to cover

00:00:26,670 --> 00:00:33,630
today we're going to cover the basics

00:00:28,699 --> 00:00:35,550
what is Java what is open JDK that sort

00:00:33,630 --> 00:00:38,579
of thing we're going to be talking about

00:00:35,550 --> 00:00:41,250
a doctype and jdk how that fits into the

00:00:38,579 --> 00:00:43,079
picture of the history we're going to be

00:00:41,250 --> 00:00:46,140
going through a demonstration of our

00:00:43,079 --> 00:00:48,120
build farm we're going to be talking

00:00:46,140 --> 00:00:50,610
about the the principles of continuous

00:00:48,120 --> 00:00:52,199
integrations so the theory behind what

00:00:50,610 --> 00:00:55,620
we're trying to do how we're trying to

00:00:52,199 --> 00:00:57,780
do it the philosophy if you like and the

00:00:55,620 --> 00:00:59,910
build farm tech so the different pieces

00:00:57,780 --> 00:01:07,040
of technology that we've brought

00:00:59,910 --> 00:01:09,360
together to create our build farm ok

00:01:07,040 --> 00:01:10,860
picture at the top is me that's Adam

00:01:09,360 --> 00:01:14,490
Farley I'm an adoptee open JDK

00:01:10,860 --> 00:01:16,740
contributor I work at IBM the fellow at

00:01:14,490 --> 00:01:18,420
the bottom is Daniel Bryant he can't be

00:01:16,740 --> 00:01:21,000
here today because he's flying over to

00:01:18,420 --> 00:01:23,729
America a little early we're going to be

00:01:21,000 --> 00:01:26,220
giving this exact same talk at Oracle

00:01:23,729 --> 00:01:28,460
code one in San Francisco next week at

00:01:26,220 --> 00:01:33,180
some ungodly time in the morning so you

00:01:28,460 --> 00:01:36,180
know you got the better deal here

00:01:33,180 --> 00:01:37,770
and here's some some key links we

00:01:36,180 --> 00:01:39,390
consider printing these often little

00:01:37,770 --> 00:01:40,829
bits of paper but I thought to myself

00:01:39,390 --> 00:01:42,229
this is just gonna make things hard for

00:01:40,829 --> 00:01:44,790
the clean up stuff at the end of the day

00:01:42,229 --> 00:01:47,579
everyone's got mobiles if you want to

00:01:44,790 --> 00:01:49,649
follow up and ask questions we've got

00:01:47,579 --> 00:01:51,450
slack channels that are active every day

00:01:49,649 --> 00:01:53,970
so just drop by the website ask

00:01:51,450 --> 00:01:56,759
questions you can take a picture if you

00:01:53,970 --> 00:02:00,509
want to keep the links oh we'll have

00:01:56,759 --> 00:02:07,710
this up at the end as well so there you

00:02:00,509 --> 00:02:10,530
go background what is Java Java is a

00:02:07,710 --> 00:02:12,520
programming language hands up who here

00:02:10,530 --> 00:02:14,230
is heard of Java

00:02:12,520 --> 00:02:18,970
excellent I can skip this part of the

00:02:14,230 --> 00:02:22,300
presentation Java the programming

00:02:18,970 --> 00:02:24,520
language gets compiled and turned into

00:02:22,300 --> 00:02:26,530
things called Java byte codes now what

00:02:24,520 --> 00:02:29,560
that is you don't need to worry about

00:02:26,530 --> 00:02:31,240
but what these byte codes do is they run

00:02:29,560 --> 00:02:33,340
on top of something that's also called

00:02:31,240 --> 00:02:35,650
Java and that's the Java executable and

00:02:33,340 --> 00:02:37,000
that can sit on top of lots different

00:02:35,650 --> 00:02:39,490
operating systems lots of different

00:02:37,000 --> 00:02:40,900
platforms and it's Java that we're going

00:02:39,490 --> 00:02:45,760
to be talking about here today that's

00:02:40,900 --> 00:02:49,450
what we're building the Java development

00:02:45,760 --> 00:02:51,640
kit consists of the the Java Runtime

00:02:49,450 --> 00:02:55,390
environment that's that core java re'

00:02:51,640 --> 00:02:58,690
bit and tools to compile and debug java

00:02:55,390 --> 00:03:00,280
code for Java applications I'm not

00:02:58,690 --> 00:03:03,940
that's outside the scope of this talk

00:03:00,280 --> 00:03:06,310
but there's a lot of the JRE consists of

00:03:03,940 --> 00:03:08,980
libraries you've got class libraries so

00:03:06,310 --> 00:03:14,860
classes like string classes like integer

00:03:08,980 --> 00:03:17,200
classes like file as file exceptions you

00:03:14,860 --> 00:03:19,890
know that any number of library classes

00:03:17,200 --> 00:03:23,200
I've got the Java Virtual Machine that

00:03:19,890 --> 00:03:25,300
the Java runs on top of it's the

00:03:23,200 --> 00:03:28,410
interface layer if you like between the

00:03:25,300 --> 00:03:31,150
byte codes in the operating system and

00:03:28,410 --> 00:03:33,310
it's the engine at the heart of Java it

00:03:31,150 --> 00:03:35,560
makes it turns the air the byte codes

00:03:33,310 --> 00:03:37,900
into actions basically on your computer

00:03:35,560 --> 00:03:45,700
and you've also got the Java plug-in

00:03:37,900 --> 00:03:48,400
applets and Java Web Start what is open

00:03:45,700 --> 00:03:51,160
JDK joking open JDK is reference

00:03:48,400 --> 00:03:55,390
implementation for Java 7 onwards so

00:03:51,160 --> 00:03:57,700
when someone says this is Java then

00:03:55,390 --> 00:04:00,459
they're defining that by comparing it to

00:03:57,700 --> 00:04:03,550
open JDK so open JDK is the gold

00:04:00,459 --> 00:04:05,680
standard for Java basically you get

00:04:03,550 --> 00:04:07,720
variations you have interpretations you

00:04:05,680 --> 00:04:09,940
have a derivative implementations and

00:04:07,720 --> 00:04:12,760
things like that but it all comes back

00:04:09,940 --> 00:04:17,410
to open JDK because they're the ones who

00:04:12,760 --> 00:04:19,060
were to set the pace it's free it's open

00:04:17,410 --> 00:04:22,450
source anyone can take a look at the

00:04:19,060 --> 00:04:25,360
code it's under the gnu general public

00:04:22,450 --> 00:04:26,410
license with class path exception anyone

00:04:25,360 --> 00:04:32,410
who's worked with

00:04:26,410 --> 00:04:36,040
knows that the GPL can be contagious you

00:04:32,410 --> 00:04:38,230
get it new your code it spreads but the

00:04:36,040 --> 00:04:40,600
classpath exception is good news because

00:04:38,230 --> 00:04:43,240
it means that you can put your code next

00:04:40,600 --> 00:04:48,850
to a piece of GPL code and it's okay it

00:04:43,240 --> 00:04:51,910
won't spread across what is the open JDK

00:04:48,850 --> 00:04:54,610
it's a source to build your own Java sip

00:04:51,910 --> 00:04:57,550
you just download the open JDK source

00:04:54,610 --> 00:04:59,680
from the open JDK project the open JDK

00:04:57,550 --> 00:05:04,480
community then you can build your own on

00:04:59,680 --> 00:05:06,910
your desktop and you get Twitter who've

00:05:04,480 --> 00:05:08,770
entered the JDK you've got Amazon who've

00:05:06,910 --> 00:05:10,150
worked in the community you've got IBM

00:05:08,770 --> 00:05:12,040
who's worked heavily in the community

00:05:10,150 --> 00:05:14,350
you get a lot of companies donating

00:05:12,040 --> 00:05:19,030
little bits of code some anything from

00:05:14,350 --> 00:05:20,530
typos to full-blown features and it's up

00:05:19,030 --> 00:05:22,600
to the individual to decide how heavily

00:05:20,530 --> 00:05:26,080
they want to get involved but there are

00:05:22,600 --> 00:05:27,400
a lot of people out there and it's it is

00:05:26,080 --> 00:05:29,170
a great opportunity to learn more about

00:05:27,400 --> 00:05:32,230
the internals of Java you'll learn that

00:05:29,170 --> 00:05:37,270
there's a lot inside of Java so you'll

00:05:32,230 --> 00:05:38,560
learn a lot but depends on what tasks

00:05:37,270 --> 00:05:39,880
you get involved in this to the breadth

00:05:38,560 --> 00:05:48,220
of knowledge that you're actually going

00:05:39,880 --> 00:05:50,650
to gain from Java 11 forwards the Java

00:05:48,220 --> 00:05:53,470
you get from Oracle and the Java you get

00:05:50,650 --> 00:05:57,400
from open JDK are going to be

00:05:53,470 --> 00:05:59,710
essentially identical where there are

00:05:57,400 --> 00:06:03,640
some cosmetic and packaging differences

00:05:59,710 --> 00:06:05,280
there's some details here mostly they're

00:06:03,640 --> 00:06:08,800
obvious when you start to run your code

00:06:05,280 --> 00:06:10,419
if you go in expecting minor differences

00:06:08,800 --> 00:06:13,720
then you can usually plow through the

00:06:10,419 --> 00:06:15,610
Westham pretty quickly and there's

00:06:13,720 --> 00:06:20,370
comprehensive details if anyone's

00:06:15,610 --> 00:06:20,370
interested which I'm not

00:06:20,430 --> 00:06:25,300
we've got various different

00:06:22,870 --> 00:06:30,690
implementations of open JDK you've got

00:06:25,300 --> 00:06:33,850
things like ice tea which is Java built

00:06:30,690 --> 00:06:36,520
using only open source projects the

00:06:33,850 --> 00:06:37,940
original Java open source implementation

00:06:36,520 --> 00:06:40,550
had a bootstrapping problem

00:06:37,940 --> 00:06:42,050
you needed another Java in order to

00:06:40,550 --> 00:06:44,300
build it in fact that's still the case

00:06:42,050 --> 00:06:47,540
and since back then the only Java's

00:06:44,300 --> 00:06:50,090
around where the licensed versions that

00:06:47,540 --> 00:06:53,650
you got from sun they had to find a way

00:06:50,090 --> 00:06:56,090
to build Java without using Java and

00:06:53,650 --> 00:06:57,770
that was a big ol headache but they

00:06:56,090 --> 00:07:02,300
found a way they made it happen

00:06:57,770 --> 00:07:04,700
and Fedora was very very happy and so

00:07:02,300 --> 00:07:07,850
that's another implementation of open

00:07:04,700 --> 00:07:10,490
JDK you've got Zulu which is as Xul's

00:07:07,850 --> 00:07:11,480
taking the open JDK source and building

00:07:10,490 --> 00:07:14,840
it so you've got lots of different

00:07:11,480 --> 00:07:18,230
flavors of open JDK as far as I can tell

00:07:14,840 --> 00:07:21,700
Zulu is just a straight Bilbo but you

00:07:18,230 --> 00:07:24,680
can call it Java which is good and

00:07:21,700 --> 00:07:27,230
you've got Eclipse opened j9 which was

00:07:24,680 --> 00:07:30,800
IBM's JDK until they put it out into you

00:07:27,230 --> 00:07:39,100
open and now it's just another flavor of

00:07:30,800 --> 00:07:41,120
open JDK Java is still free I've I was

00:07:39,100 --> 00:07:43,370
instructed to put this picture up here

00:07:41,120 --> 00:07:45,500
because it's very important but I was

00:07:43,370 --> 00:07:47,600
advised not to try reading it because

00:07:45,500 --> 00:07:52,430
there's a lot of text on that slide and

00:07:47,600 --> 00:07:54,530
it's not very useful but it is still

00:07:52,430 --> 00:07:56,390
free it is still free for people to just

00:07:54,530 --> 00:07:58,280
go and download if you want to if you

00:07:56,390 --> 00:08:00,590
this evening you wanted to go and grab a

00:07:58,280 --> 00:08:02,810
copy of the open JDK source and build

00:08:00,590 --> 00:08:05,590
your own Java it is now easier and

00:08:02,810 --> 00:08:11,210
faster than it hasn't ever been before

00:08:05,590 --> 00:08:13,610
it really is and what does open JDK JDK

00:08:11,210 --> 00:08:15,230
consist of it used to be that open JDK

00:08:13,610 --> 00:08:17,000
was split into lots of different

00:08:15,230 --> 00:08:21,650
repositories that you had to pull

00:08:17,000 --> 00:08:23,930
together it was divided up into lots of

00:08:21,650 --> 00:08:25,370
different sections and thankfully you

00:08:23,930 --> 00:08:28,750
don't need to do that anymore because

00:08:25,370 --> 00:08:32,930
they've unified them into one repository

00:08:28,750 --> 00:08:35,060
but you know a pie chart with just one

00:08:32,930 --> 00:08:36,349
color isn't much of a pie chart so we

00:08:35,060 --> 00:08:42,630
use the older pictures because they're

00:08:36,349 --> 00:08:44,730
more colorful history

00:08:42,630 --> 00:08:47,460
there's a nice little slide about

00:08:44,730 --> 00:08:53,640
openjdk history it's of interest to

00:08:47,460 --> 00:08:55,260
historians but not to me the history

00:08:53,640 --> 00:08:58,020
section of today's slides is going to be

00:08:55,260 --> 00:09:02,820
mainly about adopt open JDK so what is

00:08:58,020 --> 00:09:05,700
it where did it come from adopt OpenJDK

00:09:02,820 --> 00:09:10,080
started with a pair of projects that

00:09:05,700 --> 00:09:12,090
kind of came together to form adopt and

00:09:10,080 --> 00:09:18,050
the first of those projects was called

00:09:12,090 --> 00:09:20,630
betta Rev now better up started 2014

00:09:18,050 --> 00:09:22,860
anyone who's worked with the openjdk

00:09:20,630 --> 00:09:25,740
community knows that whenever you're

00:09:22,860 --> 00:09:27,990
submitting a change or a patch or a fix

00:09:25,740 --> 00:09:30,000
or an update or whatever and for

00:09:27,990 --> 00:09:34,110
consideration by the community for

00:09:30,000 --> 00:09:36,480
inclusion into OpenJDK you have to pass

00:09:34,110 --> 00:09:39,330
through a tool called their web Rev it

00:09:36,480 --> 00:09:41,310
basically creates a set of diffs that

00:09:39,330 --> 00:09:43,140
clearly outlined the new code you're

00:09:41,310 --> 00:09:46,260
adding all the code you're taking away

00:09:43,140 --> 00:09:49,320
and ties it together with some nice

00:09:46,260 --> 00:09:50,820
little bits of HTML so you can dig

00:09:49,320 --> 00:09:52,680
through those changes nice and

00:09:50,820 --> 00:09:54,090
conveniently and then you patched out

00:09:52,680 --> 00:09:57,840
send it off to the community and that's

00:09:54,090 --> 00:09:59,550
good but it is very manual it doesn't

00:09:57,840 --> 00:10:01,710
really give you any assurances in terms

00:09:59,550 --> 00:10:04,710
of quality you can end up sending it to

00:10:01,710 --> 00:10:08,610
the wrong mailing lists it's it's not a

00:10:04,710 --> 00:10:10,910
very good design which is why a group of

00:10:08,610 --> 00:10:13,080
people in in the ljc

00:10:10,910 --> 00:10:15,360
originally came together and thought we

00:10:13,080 --> 00:10:19,770
can do this better so they came up with

00:10:15,360 --> 00:10:21,480
with better read some of the

00:10:19,770 --> 00:10:23,580
difficulties they were trying to fix was

00:10:21,480 --> 00:10:25,290
getting started can be quite daunting

00:10:23,580 --> 00:10:27,300
you have to take a lot of boxes you have

00:10:25,290 --> 00:10:28,800
to try and figure out the OpenJDK

00:10:27,300 --> 00:10:31,020
mailing lists in order to contribute

00:10:28,800 --> 00:10:32,430
code if you've just got something you

00:10:31,020 --> 00:10:36,870
want if you've just got problem you want

00:10:32,430 --> 00:10:39,570
to solve it can be annoyingly difficult

00:10:36,870 --> 00:10:41,730
just getting in there and showing your

00:10:39,570 --> 00:10:43,410
code to the community and because they

00:10:41,730 --> 00:10:45,390
want you to sign things and they want

00:10:43,410 --> 00:10:46,830
you to find the right categories and oh

00:10:45,390 --> 00:10:49,749
no you need to talk to this guy and all

00:10:46,830 --> 00:10:52,239
you need buy-in from these people

00:10:49,749 --> 00:10:55,089
thorough testing is quite challenging

00:10:52,239 --> 00:10:57,219
because their testing infrastructure is

00:10:55,089 --> 00:10:59,919
only available to people who are already

00:10:57,219 --> 00:11:04,329
committed so unless you're familiar with

00:10:59,919 --> 00:11:07,659
their testing infrastructure self on

00:11:04,329 --> 00:11:09,759
your desktop manually then you kind of

00:11:07,659 --> 00:11:15,089
just have to either write your own tests

00:11:09,759 --> 00:11:18,369
or throw your code at them and hope and

00:11:15,089 --> 00:11:20,859
even then when they run their tests they

00:11:18,369 --> 00:11:22,509
just have a binary yes or no that comes

00:11:20,859 --> 00:11:25,899
out of their testing material and it's

00:11:22,509 --> 00:11:30,009
not really helpful for them either so we

00:11:25,899 --> 00:11:31,989
thought okay there's there's more

00:11:30,009 --> 00:11:33,729
difficulties discussions and incorrect

00:11:31,989 --> 00:11:35,459
mailing less we've really discussed it's

00:11:33,729 --> 00:11:38,109
a lot of work for the reviewers

00:11:35,459 --> 00:11:42,189
quality's a problem yep and here's with

00:11:38,109 --> 00:11:44,619
the better Rev you had mirrored open JD

00:11:42,189 --> 00:11:46,419
it caused repositories in bitbucket I

00:11:44,619 --> 00:11:50,439
think this was before I get hub was the

00:11:46,419 --> 00:11:53,889
thing you had a community driven web

00:11:50,439 --> 00:11:55,749
portal you had a single click setup so

00:11:53,889 --> 00:11:57,159
new people could just go in show up with

00:11:55,749 --> 00:11:59,949
a bit of code and it was designed to be

00:11:57,159 --> 00:12:02,589
very easy very user friendly

00:11:59,949 --> 00:12:04,869
you've got automated quality review of

00:12:02,589 --> 00:12:07,119
patches you had testing automation built

00:12:04,869 --> 00:12:08,829
in there so you just push a bit of code

00:12:07,119 --> 00:12:12,429
in and it would run some tests and come

00:12:08,829 --> 00:12:15,639
back to you and so you know what kind of

00:12:12,429 --> 00:12:19,979
quality your code was going forwards and

00:12:15,639 --> 00:12:22,269
you had moved move discussions to code

00:12:19,979 --> 00:12:27,639
we have discussions to code that's an

00:12:22,269 --> 00:12:31,809
awkward way of saying that the code was

00:12:27,639 --> 00:12:34,149
connected to the associate the mailing

00:12:31,809 --> 00:12:37,149
lists associated with the section of

00:12:34,149 --> 00:12:38,499
code that you were trying to change so

00:12:37,149 --> 00:12:40,959
instead of you trying to find the right

00:12:38,499 --> 00:12:43,239
mailing list first and then delivering

00:12:40,959 --> 00:12:46,059
your changes you deliver your changes

00:12:43,239 --> 00:12:47,289
first and then the automation would find

00:12:46,059 --> 00:12:49,059
the right mailing list and update the

00:12:47,289 --> 00:12:50,529
right people for you on your behalf you

00:12:49,059 --> 00:12:53,829
didn't need to mess around with any of

00:12:50,529 --> 00:12:56,469
that here's a nice diagram of what it

00:12:53,829 --> 00:13:01,439
was going to look like but that's mostly

00:12:56,469 --> 00:13:04,109
academic because it fell over and

00:13:01,439 --> 00:13:05,519
the community as a whole if you're

00:13:04,109 --> 00:13:07,139
showing up there especially if you're

00:13:05,519 --> 00:13:08,099
know if you're new and I know this

00:13:07,139 --> 00:13:10,259
firsthand

00:13:08,099 --> 00:13:13,559
does not like people who show up out of

00:13:10,259 --> 00:13:15,089
the blue and propose large changes and

00:13:13,559 --> 00:13:17,849
even if you've been in the community a

00:13:15,089 --> 00:13:19,829
while you have to know the right people

00:13:17,849 --> 00:13:21,619
you have to gather buy-in first you

00:13:19,829 --> 00:13:24,419
can't just show up with this great idea

00:13:21,619 --> 00:13:27,419
sometimes it'll work most of the time it

00:13:24,419 --> 00:13:29,429
won't need to sell them on the concept

00:13:27,419 --> 00:13:30,720
before you try pushing code on them

00:13:29,429 --> 00:13:34,739
because they're not going to sit down

00:13:30,720 --> 00:13:37,319
and take the time to read it so it

00:13:34,739 --> 00:13:39,359
didn't work it was far too big it was

00:13:37,319 --> 00:13:44,699
too ambitious it was you know before

00:13:39,359 --> 00:13:49,289
it's time so just as it was just as it

00:13:44,699 --> 00:13:51,659
was falling down enter IBM IBM had

00:13:49,289 --> 00:13:53,729
gotten it into its head to get more

00:13:51,659 --> 00:13:55,019
involved in open source communities they

00:13:53,729 --> 00:13:56,759
were ready to start throwing their

00:13:55,019 --> 00:13:59,279
weight around putting some manpower out

00:13:56,759 --> 00:14:01,349
there and they've just gone out with

00:13:59,279 --> 00:14:07,259
open Liberty they've gone out with

00:14:01,349 --> 00:14:11,429
Eclipse open j9 that's IBM's virtual

00:14:07,259 --> 00:14:13,859
machine for Java so it would replace the

00:14:11,429 --> 00:14:15,839
default one and open JDK it has various

00:14:13,859 --> 00:14:17,339
upsides and downsides compared to the

00:14:15,839 --> 00:14:19,169
open one but we're not going to go into

00:14:17,339 --> 00:14:21,209
that it's a it's an alternative

00:14:19,169 --> 00:14:27,959
implementation of the engine at the

00:14:21,209 --> 00:14:31,229
heart of Java okay so the Eclipse opened

00:14:27,959 --> 00:14:32,999
j9 so that's IBM's BM gone into the open

00:14:31,229 --> 00:14:37,109
they were looking to distribute their

00:14:32,999 --> 00:14:40,609
Java and you had the better Rev

00:14:37,109 --> 00:14:42,899
community who already had this prototype

00:14:40,609 --> 00:14:47,549
infrastructure for building and testing

00:14:42,899 --> 00:14:51,479
Java so they kind of found each other

00:14:47,549 --> 00:14:54,359
and lived happily ever after

00:14:51,479 --> 00:14:57,629
you had IBM looking to throw manpower

00:14:54,359 --> 00:15:01,559
and resources at build farm for building

00:14:57,629 --> 00:15:04,229
Java in the open for testing it and you

00:15:01,559 --> 00:15:05,909
had the better of guys who had that

00:15:04,229 --> 00:15:08,339
looking for someone to fund their

00:15:05,909 --> 00:15:10,769
development for their own little build

00:15:08,339 --> 00:15:13,089
farm so they came together and what they

00:15:10,769 --> 00:15:15,999
forged was adopt open JDK

00:15:13,089 --> 00:15:21,069
and while docked OpenJDK is is basically

00:15:15,999 --> 00:15:25,050
a big massive build farm what they do on

00:15:21,069 --> 00:15:29,529
a daily basis is they grab new code from

00:15:25,050 --> 00:15:33,009
OpenJDK they take it internally they

00:15:29,529 --> 00:15:35,319
build it on lots of different platforms

00:15:33,009 --> 00:15:38,050
we'll be going through that in a bit

00:15:35,319 --> 00:15:40,329
then they test it we have functional

00:15:38,050 --> 00:15:42,399
tests we have system tests we have

00:15:40,329 --> 00:15:44,499
thousands upon thousands we have the

00:15:42,399 --> 00:15:46,569
tests that openjdk runs itself

00:15:44,499 --> 00:15:48,670
we're going to be going through that in

00:15:46,569 --> 00:15:50,740
a bit more detail later and if it passed

00:15:48,670 --> 00:15:54,490
enough of our Quality Assurance stages

00:15:50,740 --> 00:15:56,170
then it gets released to our website and

00:15:54,490 --> 00:16:00,459
the general public can get at it for

00:15:56,170 --> 00:16:02,529
free which is Goodis it really is very

00:16:00,459 --> 00:16:07,379
good actually you get it's a very active

00:16:02,529 --> 00:16:09,160
community and yes so perfect storm

00:16:07,379 --> 00:16:14,399
substantial code and engineering

00:16:09,160 --> 00:16:14,399
assistance myself myself among them I

00:16:17,220 --> 00:16:22,269
believe so yes it has been referred to

00:16:20,110 --> 00:16:24,699
as the london java community a number of

00:16:22,269 --> 00:16:26,949
times in a recent eve email it was

00:16:24,699 --> 00:16:29,230
referred to as the london Jamiroquai

00:16:26,949 --> 00:16:30,519
community or something like that so why

00:16:29,230 --> 00:16:33,339
in a number of other people have been

00:16:30,519 --> 00:16:35,639
very confused but I still think it's

00:16:33,339 --> 00:16:40,959
called the London Java community yes I

00:16:35,639 --> 00:16:43,660
need to confirm that IBM did donate its

00:16:40,959 --> 00:16:45,490
testing infrastructure there's a testing

00:16:43,660 --> 00:16:48,040
framework that we're very proud of it's

00:16:45,490 --> 00:16:52,689
called STF I can get him to it later if

00:16:48,040 --> 00:16:55,269
anyone isn't bored enough yet and we

00:16:52,689 --> 00:16:56,139
push we gave that out into the open we

00:16:55,269 --> 00:16:57,670
pushed a lot of our testing

00:16:56,139 --> 00:17:00,759
infrastructure out we gave them a lot of

00:16:57,670 --> 00:17:02,889
our test talent in a space of weeks open

00:17:00,759 --> 00:17:04,990
JDK was able to churn out some

00:17:02,889 --> 00:17:07,779
high-quality binaries that were very

00:17:04,990 --> 00:17:10,270
good very good and that they passed all

00:17:07,779 --> 00:17:13,750
the tests that we hope they passed which

00:17:10,270 --> 00:17:18,850
show is very good adopt open JDK did

00:17:13,750 --> 00:17:21,850
grow to 60 plus repos thankfully I think

00:17:18,850 --> 00:17:24,520
we have fewer rap hosts now and we had

00:17:21,850 --> 00:17:26,260
600 plus volunteers in six to nine

00:17:24,520 --> 00:17:27,210
months I'm assured the numbers on there

00:17:26,260 --> 00:17:29,230
a queue

00:17:27,210 --> 00:17:30,820
however how many of those people are

00:17:29,230 --> 00:17:31,960
active on a day to day basis you know

00:17:30,820 --> 00:17:35,080
what it's like you get some people who

00:17:31,960 --> 00:17:37,720
are active at midnight on a Sunday Vande

00:17:35,080 --> 00:17:40,360
you get some people who maybe login once

00:17:37,720 --> 00:17:42,370
or twice a month but it's it's

00:17:40,360 --> 00:17:45,190
definitely a very active community every

00:17:42,370 --> 00:17:46,600
single day and a technical steering

00:17:45,190 --> 00:17:50,770
committee is being formed to ensure

00:17:46,600 --> 00:17:53,890
quality and security at the at the peak

00:17:50,770 --> 00:17:56,080
of our little duoc recei and anybody who

00:17:53,890 --> 00:17:59,740
does not know what do oxy is a democracy

00:17:56,080 --> 00:18:02,230
is a it's a bit of a dictatorship where

00:17:59,740 --> 00:18:05,050
the people who do the work get to

00:18:02,230 --> 00:18:06,700
dictate what gets done how the work gets

00:18:05,050 --> 00:18:08,860
done and when it gets done where it gets

00:18:06,700 --> 00:18:10,300
gets done so the technical steering

00:18:08,860 --> 00:18:15,190
committee is going to be made up of all

00:18:10,300 --> 00:18:17,890
of our shout es people the the build

00:18:15,190 --> 00:18:20,230
fund the resultant build farm was very

00:18:17,890 --> 00:18:22,240
well structured we paid a lot of

00:18:20,230 --> 00:18:25,240
attention to what it what we wanted it

00:18:22,240 --> 00:18:27,040
to look like in the end first before we

00:18:25,240 --> 00:18:29,380
started laying hands on code and as a

00:18:27,040 --> 00:18:33,070
result it's very well put together if I

00:18:29,380 --> 00:18:34,990
do say so myself it does turn out

00:18:33,070 --> 00:18:37,900
binaries every night which are

00:18:34,990 --> 00:18:39,490
distributed on the adopt openjdk website

00:18:37,900 --> 00:18:47,260
which I can show you afterwards if you

00:18:39,490 --> 00:18:51,490
like and here is the demonstration here

00:18:47,260 --> 00:18:53,530
is the year the build demo I've got a

00:18:51,490 --> 00:18:55,440
note here that says use the website use

00:18:53,530 --> 00:18:57,640
the website to launch the pipeline

00:18:55,440 --> 00:19:00,250
unfortunately I don't have access to

00:18:57,640 --> 00:19:01,720
launch the pub the pipeline yet so we're

00:19:00,250 --> 00:19:05,800
going to be doing this through slides I

00:19:01,720 --> 00:19:08,200
hope nobody minds here is the the

00:19:05,800 --> 00:19:10,240
structure we're going to be going

00:19:08,200 --> 00:19:14,770
through this again afterwards so don't

00:19:10,240 --> 00:19:17,710
worry if not all of it makes sense first

00:19:14,770 --> 00:19:21,940
we've got the the pipeline job in this

00:19:17,710 --> 00:19:24,430
case it's open JDK 10 so this gets

00:19:21,940 --> 00:19:27,220
kicked off and then what we do is we

00:19:24,430 --> 00:19:29,740
generate jobs for each of the platforms

00:19:27,220 --> 00:19:32,020
that we want to build on so if we're

00:19:29,740 --> 00:19:34,480
building for JDK 10 here's a breakdown

00:19:32,020 --> 00:19:38,830
of the different sub jobs that are

00:19:34,480 --> 00:19:40,470
created to build JDK tonne on Mac using

00:19:38,830 --> 00:19:42,940
the the default via

00:19:40,470 --> 00:19:46,570
as you can see we've got the build job

00:19:42,940 --> 00:19:48,400
here which executes the build and then

00:19:46,570 --> 00:19:52,840
once it's built it executes the tests

00:19:48,400 --> 00:19:55,090
and the regression tests and the system

00:19:52,840 --> 00:19:57,490
tests at the same time and then we sign

00:19:55,090 --> 00:20:00,100
off on the build and we push it out into

00:19:57,490 --> 00:20:02,380
the open and as we can see here publish

00:20:00,100 --> 00:20:05,140
to get hub and that's right at the end

00:20:02,380 --> 00:20:06,880
and github is just where we store the

00:20:05,140 --> 00:20:08,830
builds after we've built them assuming

00:20:06,880 --> 00:20:12,730
they pass all of our all of our rigorous

00:20:08,830 --> 00:20:14,740
testing or unless something's gone

00:20:12,730 --> 00:20:16,090
hideously hideously wrong and the

00:20:14,740 --> 00:20:19,230
testing just says it's passed but that

00:20:16,090 --> 00:20:19,230
never happens

00:20:19,290 --> 00:20:27,250
okay here is Jenkins who here has seen

00:20:22,870 --> 00:20:34,410
Jenkins before okay so some have some

00:20:27,250 --> 00:20:37,150
haven't Jenkins is a it's a continuous

00:20:34,410 --> 00:20:38,110
it's a job management system is what it

00:20:37,150 --> 00:20:42,460
is

00:20:38,110 --> 00:20:46,090
you cluster together tasks that we call

00:20:42,460 --> 00:20:49,270
jobs and you give it a list of machines

00:20:46,090 --> 00:20:51,400
that it can run those tasks on and what

00:20:49,270 --> 00:20:54,730
you basically do is you open up a job

00:20:51,400 --> 00:20:56,950
you click on one and you say go do this

00:20:54,730 --> 00:20:59,470
on the next available machine that meets

00:20:56,950 --> 00:21:01,630
your needs and it goes off it grabs one

00:20:59,470 --> 00:21:05,620
of its machines and it runs through the

00:21:01,630 --> 00:21:07,510
tasks and we have pipelines here which

00:21:05,620 --> 00:21:09,580
are basically several tasks linked

00:21:07,510 --> 00:21:11,740
together it's it's a smart way of

00:21:09,580 --> 00:21:14,950
managing lots of different machines on

00:21:11,740 --> 00:21:19,470
lots of different platforms and running

00:21:14,950 --> 00:21:19,470
code or running whatever on each of them

00:21:19,620 --> 00:21:28,870
so first we're going to select a folder

00:21:24,370 --> 00:21:30,970
at the top which is build scripts and in

00:21:28,870 --> 00:21:35,440
here we're going to select the java 11

00:21:30,970 --> 00:21:37,890
pipeline and as you can see here you've

00:21:35,440 --> 00:21:40,720
got the history of past builds and

00:21:37,890 --> 00:21:44,290
you've got the one that was running when

00:21:40,720 --> 00:21:46,840
we took this screenshot and each of

00:21:44,290 --> 00:21:49,270
these is the different platforms that we

00:21:46,840 --> 00:21:52,030
support along with the the vm variations

00:21:49,270 --> 00:21:53,550
that we support on them so this for

00:21:52,030 --> 00:21:56,490
instance is linux so

00:21:53,550 --> 00:21:58,500
j9 that took 25 minutes and this is

00:21:56,490 --> 00:22:00,540
Linux on hotspot which took 32 minutes

00:21:58,500 --> 00:22:02,280
and as you can see it's all very green

00:22:00,540 --> 00:22:07,140
because everything's passing and

00:22:02,280 --> 00:22:10,020
everyone's happy whenever you want to

00:22:07,140 --> 00:22:12,810
launch a new build you can click on

00:22:10,020 --> 00:22:14,400
build with parameters these also run

00:22:12,810 --> 00:22:17,100
you can also set these things up to run

00:22:14,400 --> 00:22:21,120
automatically by the way which they do

00:22:17,100 --> 00:22:23,370
every night and if you click on one of

00:22:21,120 --> 00:22:24,480
those it brings up this sort of window

00:22:23,370 --> 00:22:27,300
it's where you can set the parameters

00:22:24,480 --> 00:22:28,770
for the build here we've got a list of

00:22:27,300 --> 00:22:30,930
the different platforms that we want to

00:22:28,770 --> 00:22:32,850
build them and for each platform you can

00:22:30,930 --> 00:22:36,180
specify the different type of VM you

00:22:32,850 --> 00:22:38,130
want to build in and down here we have

00:22:36,180 --> 00:22:40,140
other parameters do you want to run

00:22:38,130 --> 00:22:42,930
tests on this do you want to give it a

00:22:40,140 --> 00:22:44,850
specific tag do you want to use a

00:22:42,930 --> 00:22:49,950
particular branch a particular source

00:22:44,850 --> 00:22:54,150
for your build and additional arguments

00:22:49,950 --> 00:22:57,320
down the bottom and then you just click

00:22:54,150 --> 00:23:04,170
go and then when you click go it

00:22:57,320 --> 00:23:05,790
launches a selection of these jobs here

00:23:04,170 --> 00:23:08,040
we go we'll pick one as an example

00:23:05,790 --> 00:23:12,960
that's Linux 64-bit being built on

00:23:08,040 --> 00:23:15,090
hotspot and as you can see this is in

00:23:12,960 --> 00:23:17,940
progress you've got the top one on this

00:23:15,090 --> 00:23:19,950
little table and as on the previous

00:23:17,940 --> 00:23:24,030
slide where I showed you the the Mac

00:23:19,950 --> 00:23:28,170
breakdown for JDK 10 first we do the

00:23:24,030 --> 00:23:30,180
build then we run the aggression tests

00:23:28,170 --> 00:23:33,480
and the system tests and a few more

00:23:30,180 --> 00:23:35,670
tests and as we scroll along you get the

00:23:33,480 --> 00:23:37,830
other steps in a build process and it

00:23:35,670 --> 00:23:40,260
basically goes from step to step a few

00:23:37,830 --> 00:23:41,910
of them can be run in parallel some of

00:23:40,260 --> 00:23:44,400
them can be run sequential some of them

00:23:41,910 --> 00:23:46,080
has to have to be run sequentially but

00:23:44,400 --> 00:23:48,000
ultimately it just goes point to point

00:23:46,080 --> 00:23:51,170
to point and if it passes all the steps

00:23:48,000 --> 00:23:57,600
then you've got a good build at the end

00:23:51,170 --> 00:24:00,450
and that's a load of code in the output

00:23:57,600 --> 00:24:03,240
it's just to give you an idea of what a

00:24:00,450 --> 00:24:06,809
screen full of text looks like

00:24:03,240 --> 00:24:08,970
our dough at the moment it's installing

00:24:06,809 --> 00:24:13,830
freetype I think it's a font rendering

00:24:08,970 --> 00:24:15,720
piece but yes so it builds and it fills

00:24:13,830 --> 00:24:18,240
the screen with text and it's all very

00:24:15,720 --> 00:24:20,490
impressive it's a great way to look like

00:24:18,240 --> 00:24:21,539
you're working and if you just put it on

00:24:20,490 --> 00:24:25,679
the screen it's just scrolling

00:24:21,539 --> 00:24:28,260
continuously and here we go like I said

00:24:25,679 --> 00:24:30,690
you've got some points which can be run

00:24:28,260 --> 00:24:32,700
sequentially which have to be run

00:24:30,690 --> 00:24:34,380
sequentially so you've got one step at a

00:24:32,700 --> 00:24:37,020
time and some bits like all of this

00:24:34,380 --> 00:24:38,520
which can be run in parallel so you've

00:24:37,020 --> 00:24:40,110
got all these different builds being run

00:24:38,520 --> 00:24:43,770
on all these different platforms with

00:24:40,110 --> 00:24:45,090
all these different VM variants and you

00:24:43,770 --> 00:24:46,890
can run these all at the same time

00:24:45,090 --> 00:24:48,929
because we have a lot of different types

00:24:46,890 --> 00:24:50,610
of machines and Jenkins is smart enough

00:24:48,929 --> 00:24:54,690
to pick the right machine for the job

00:24:50,610 --> 00:24:59,100
each time now we're going to select one

00:24:54,690 --> 00:25:01,789
of those that's the Mac 64-bit build and

00:24:59,100 --> 00:25:04,380
yes we do have Mac builds for Java and

00:25:01,789 --> 00:25:06,179
here we go we have the breakdown again

00:25:04,380 --> 00:25:09,000
we have the build which is happening

00:25:06,179 --> 00:25:10,649
first then you have the different tests

00:25:09,000 --> 00:25:12,720
which can be run in parallel you've got

00:25:10,649 --> 00:25:15,029
regression you've got performance you've

00:25:12,720 --> 00:25:17,399
got system tests and then after the

00:25:15,029 --> 00:25:20,610
testing is complete sign up on the build

00:25:17,399 --> 00:25:22,020
zooming it's all passed and then you

00:25:20,610 --> 00:25:23,880
reach the end it's a nice little

00:25:22,020 --> 00:25:37,260
graphical way to break down what's going

00:25:23,880 --> 00:25:39,659
on that's a difficult question we try

00:25:37,260 --> 00:25:42,210
and keep the interfaces the same per

00:25:39,659 --> 00:25:43,980
platform but the deep you get inside

00:25:42,210 --> 00:25:45,809
things the more different it gets on

00:25:43,980 --> 00:25:47,520
different platforms so things are going

00:25:45,809 --> 00:25:49,789
to look a lot different for Windows than

00:25:47,520 --> 00:25:52,440
they're going to look for Linux or Mac

00:25:49,789 --> 00:25:54,450
some things are going to require special

00:25:52,440 --> 00:25:57,409
characters sometimes you can part with

00:25:54,450 --> 00:26:00,720
GCC sometimes you compile with Excel C

00:25:57,409 --> 00:26:03,630
and different options used at different

00:26:00,720 --> 00:26:05,730
stages by and large we try and keep the

00:26:03,630 --> 00:26:08,279
number of special cases to a minimum

00:26:05,730 --> 00:26:11,789
because we don't like having to split

00:26:08,279 --> 00:26:14,220
our code up but we keep it separate so

00:26:11,789 --> 00:26:16,620
it's clear what's going on and this is

00:26:14,220 --> 00:26:17,160
the result when all the builds are

00:26:16,620 --> 00:26:19,050
complete

00:26:17,160 --> 00:26:20,520
you've got a list of all these different

00:26:19,050 --> 00:26:24,210
builds all these different artifacts

00:26:20,520 --> 00:26:25,770
that have been generated as you can see

00:26:24,210 --> 00:26:28,830
each one's been paired up with a nice

00:26:25,770 --> 00:26:30,410
little char number those are useful if

00:26:28,830 --> 00:26:32,940
you want to download builds

00:26:30,410 --> 00:26:34,740
programmatically and then verify that

00:26:32,940 --> 00:26:37,190
what you've got hasn't been corrupted

00:26:34,740 --> 00:26:39,630
during the download or somesuch

00:26:37,190 --> 00:26:43,680
we just put them on the same folder for

00:26:39,630 --> 00:26:45,090
ease of use and here's nice little file

00:26:43,680 --> 00:26:46,830
that it generates it gives you the

00:26:45,090 --> 00:26:50,040
details of all the builds that have been

00:26:46,830 --> 00:26:51,720
churned out and that can be used to were

00:26:50,040 --> 00:26:54,060
to populate the website and that's the

00:26:51,720 --> 00:26:55,770
website I mentioned earlier and you can

00:26:54,060 --> 00:26:58,740
see you've got this list of all the

00:26:55,770 --> 00:27:00,930
different builds and if 11 with hotspot

00:26:58,740 --> 00:27:04,170
isn't your taste you can click on the

00:27:00,930 --> 00:27:07,410
little down arrow there and it will give

00:27:04,170 --> 00:27:10,530
you the different options you've got so

00:27:07,410 --> 00:27:11,850
you've got JDK 10 we've got some JDK 9

00:27:10,530 --> 00:27:14,460
builds I don't know if we're still

00:27:11,850 --> 00:27:16,290
building anymore but we do build JDK

00:27:14,460 --> 00:27:19,110
tand will be long into the future

00:27:16,290 --> 00:27:20,940
so if you're not a modularity fan we are

00:27:19,110 --> 00:27:25,410
still catering for your needs ok so

00:27:20,940 --> 00:27:27,210
moving on continuous integration what is

00:27:25,410 --> 00:27:29,120
continuous integration who here has

00:27:27,210 --> 00:27:31,530
heard of continuous integration

00:27:29,120 --> 00:27:33,690
excellent excellent

00:27:31,530 --> 00:27:38,460
it's always a tricky thing to try and

00:27:33,690 --> 00:27:41,430
explain here we've got a blurb we we

00:27:38,460 --> 00:27:43,650
grabbed that's good to explain it

00:27:41,430 --> 00:27:45,300
especially as a reference it's a coding

00:27:43,650 --> 00:27:48,990
philosophy it allows you to implement

00:27:45,300 --> 00:27:50,220
small changes repeatedly to a product in

00:27:48,990 --> 00:27:52,710
order to try and get your changes and

00:27:50,220 --> 00:27:55,200
rather than building up big clusters of

00:27:52,710 --> 00:27:57,990
changes or massive features before you

00:27:55,200 --> 00:28:01,020
push it in you just put in individual

00:27:57,990 --> 00:28:02,880
bits one chunk at a time and then put in

00:28:01,020 --> 00:28:06,540
a chunk and then you release put in a

00:28:02,880 --> 00:28:08,970
chunk generator beta whatever so that

00:28:06,540 --> 00:28:10,770
way you can get a new code in theory you

00:28:08,970 --> 00:28:14,010
can get new code out to your clients

00:28:10,770 --> 00:28:17,190
faster which is good because it shows

00:28:14,010 --> 00:28:20,040
you're more active such things usually

00:28:17,190 --> 00:28:23,760
go hand and hand with concepts like dark

00:28:20,040 --> 00:28:25,820
launchers where you create a feature but

00:28:23,760 --> 00:28:29,080
you don't enable it which allows you to

00:28:25,820 --> 00:28:32,630
release a product that has that code in

00:28:29,080 --> 00:28:35,630
without necessarily putting in a

00:28:32,630 --> 00:28:36,980
disclaimer saying don't use this and

00:28:35,630 --> 00:28:39,680
that's good because it allows you to

00:28:36,980 --> 00:28:41,480
integrate your changes one little piece

00:28:39,680 --> 00:28:43,460
at a time until you're ready then you

00:28:41,480 --> 00:28:48,290
switch on and then all of a sudden your

00:28:43,460 --> 00:28:50,180
clients can use it the technical goal of

00:28:48,290 --> 00:28:52,940
continuous integration is to establish a

00:28:50,180 --> 00:28:56,510
consistent and automated way to build

00:28:52,940 --> 00:28:58,040
package and test applications so as you

00:28:56,510 --> 00:28:59,960
can imagine because I've just talked

00:28:58,040 --> 00:29:02,390
your ear off about Bill funds that

00:28:59,960 --> 00:29:03,920
automatically build and test the

00:29:02,390 --> 00:29:05,510
application known as Java that kind of

00:29:03,920 --> 00:29:11,390
goes hand-in-hand with what we're trying

00:29:05,510 --> 00:29:14,450
to achieve here what we use continuous

00:29:11,390 --> 00:29:17,180
integration continuous delivery for we

00:29:14,450 --> 00:29:19,640
use build and test pipelines for the

00:29:17,180 --> 00:29:23,540
open JDK builds which I'm just showing

00:29:19,640 --> 00:29:25,760
you we create official docker images I

00:29:23,540 --> 00:29:27,710
don't know how many of you have used

00:29:25,760 --> 00:29:31,730
docker I imagine it's a fair few at this

00:29:27,710 --> 00:29:34,250
point it's spreading but yeah you can

00:29:31,730 --> 00:29:36,890
get docker images that have our builds

00:29:34,250 --> 00:29:38,570
in them so you can just spin up your

00:29:36,890 --> 00:29:40,070
little docker container it already has a

00:29:38,570 --> 00:29:44,390
build in hand you don't need to go find

00:29:40,070 --> 00:29:49,340
the website you can we have continuously

00:29:44,390 --> 00:29:51,110
deploy we have api's and the website

00:29:49,340 --> 00:29:54,110
which you can use to get regular updates

00:29:51,110 --> 00:29:55,610
so every day you get a fresh version of

00:29:54,110 --> 00:29:59,390
Java assuming it passed all our

00:29:55,610 --> 00:30:01,070
overnight tests and you can also get

00:29:59,390 --> 00:30:02,330
that via an API so if you don't want to

00:30:01,070 --> 00:30:03,710
have to bother grabbing it manually

00:30:02,330 --> 00:30:05,630
every day you can just set up a little

00:30:03,710 --> 00:30:08,210
thing that goes and fetches it we can

00:30:05,630 --> 00:30:11,960
accommodate that we'll be talking about

00:30:08,210 --> 00:30:14,150
that in a bit action you can mirror we

00:30:11,960 --> 00:30:16,580
mirrored the upstream material forests

00:30:14,150 --> 00:30:19,640
these days it's not so much of forest as

00:30:16,580 --> 00:30:21,350
it is a single mercurial repository but

00:30:19,640 --> 00:30:23,060
yeah we use continuous integration

00:30:21,350 --> 00:30:28,570
techniques and their scripts that we use

00:30:23,060 --> 00:30:28,570
to fetch the source code from open JDK

00:30:28,660 --> 00:30:32,990
we've got a web site staging bot which

00:30:31,370 --> 00:30:35,810
I'm going to talk about in a bit it

00:30:32,990 --> 00:30:37,910
allows us to try out changes to the

00:30:35,810 --> 00:30:39,260
website without messing with the live

00:30:37,910 --> 00:30:42,160
version

00:30:39,260 --> 00:30:47,300
and we have a release counter which is

00:30:42,160 --> 00:30:51,380
it's it's a release counter here's an

00:30:47,300 --> 00:30:53,350
example we've got the the adopt openjdk

00:30:51,380 --> 00:30:55,760
example which is build test and deploy

00:30:53,350 --> 00:31:00,410
which I've just talked you through but

00:30:55,760 --> 00:31:02,540
we're gonna cover again open JDK and

00:31:00,410 --> 00:31:04,580
mercurial repository is married into

00:31:02,540 --> 00:31:07,580
github it's where we store the source

00:31:04,580 --> 00:31:09,710
prior to the build that way when we're

00:31:07,580 --> 00:31:11,960
running the nightly build we're not so

00:31:09,710 --> 00:31:14,030
dependent on the speed of how quickly we

00:31:11,960 --> 00:31:17,480
can download stuff from open JDK it's

00:31:14,030 --> 00:31:20,780
all contained you've got the repository

00:31:17,480 --> 00:31:23,030
that's cloned into Jenkins then we try

00:31:20,780 --> 00:31:25,760
and build which we showed you during the

00:31:23,030 --> 00:31:28,190
demo if build passes then the test

00:31:25,760 --> 00:31:29,900
Suites kicked off and if the test Suites

00:31:28,190 --> 00:31:31,700
are kicked off then the binary is

00:31:29,900 --> 00:31:35,270
shipped the binary will either be

00:31:31,700 --> 00:31:37,280
released as a nightly build which has so

00:31:35,270 --> 00:31:39,290
much testing applied to it or it'll be

00:31:37,280 --> 00:31:41,240
released as a release build which is

00:31:39,290 --> 00:31:44,810
much less frequent happens about once

00:31:41,240 --> 00:31:46,700
every quarter and it usually happens on

00:31:44,810 --> 00:31:49,130
par with Oracle's releases the best as

00:31:46,700 --> 00:31:51,590
we're able and it has a much larger

00:31:49,130 --> 00:31:53,420
array of testing applied to it you know

00:31:51,590 --> 00:31:55,070
much more stringent quality control so

00:31:53,420 --> 00:32:04,130
you know you're getting a good Java it's

00:31:55,070 --> 00:32:06,290
tagged as a release bit yes yes the open

00:32:04,130 --> 00:32:11,240
JDK mercurial repository is married into

00:32:06,290 --> 00:32:12,920
into github I believe that's a Jenkins

00:32:11,240 --> 00:32:15,290
job I'm not too familiar with those

00:32:12,920 --> 00:32:17,180
Jenkins jobs but they are initialized

00:32:15,290 --> 00:32:21,350
automatically there's just a timer and

00:32:17,180 --> 00:32:23,750
so once once a day perhaps even several

00:32:21,350 --> 00:32:25,670
times a day if we can get it to you know

00:32:23,750 --> 00:32:29,680
run nice and quickly and it would just

00:32:25,670 --> 00:32:29,680
go and grab some new source and do that

00:32:30,640 --> 00:32:37,790
here's the example to the website

00:32:33,710 --> 00:32:41,600
deployment so first if you want to say

00:32:37,790 --> 00:32:43,940
you spot a typo on the webpage so first

00:32:41,600 --> 00:32:47,060
you change the source code for the

00:32:43,940 --> 00:32:49,760
webpage and a github repository you

00:32:47,060 --> 00:32:52,880
create a pull request for the necessary

00:32:49,760 --> 00:32:55,520
repository the pull request

00:32:52,880 --> 00:32:57,530
automated bot running in Jenkins and

00:32:55,520 --> 00:33:00,710
we'll talk about these in the bit spots

00:32:57,530 --> 00:33:04,280
that you want to commit a change it

00:33:00,710 --> 00:33:06,049
takes your code and it stages it what

00:33:04,280 --> 00:33:08,090
that means is it takes the changes that

00:33:06,049 --> 00:33:10,130
you've made applies it to a copy of the

00:33:08,090 --> 00:33:11,720
website and then loads it up in a way

00:33:10,130 --> 00:33:13,520
that you can get at it through the front

00:33:11,720 --> 00:33:15,650
end so if you just open up your web

00:33:13,520 --> 00:33:18,049
browser and add the right combination of

00:33:15,650 --> 00:33:20,720
characters to the start of the adopt

00:33:18,049 --> 00:33:23,000
openjdk URL then it will bring up your

00:33:20,720 --> 00:33:26,870
nice staged copy with your typo

00:33:23,000 --> 00:33:28,549
corrected and that way github reviewers

00:33:26,870 --> 00:33:30,919
can then review the staged changes what

00:33:28,549 --> 00:33:34,160
it actually looks like an anger before

00:33:30,919 --> 00:33:36,020
it goes live and that's good because

00:33:34,160 --> 00:33:38,660
then people can just review it and see

00:33:36,020 --> 00:33:41,090
does this actually work

00:33:38,660 --> 00:33:44,720
rather than static analysis which is

00:33:41,090 --> 00:33:47,809
always a bit hit-and-miss then if it

00:33:44,720 --> 00:33:50,210
works pull request gets merged we've got

00:33:47,809 --> 00:33:52,700
a github webhook the tribble that

00:33:50,210 --> 00:33:57,320
triggers production jobs in jenkins now

00:33:52,700 --> 00:34:00,549
what a web hook is is it's something

00:33:57,320 --> 00:34:05,419
that allows you to run applications

00:34:00,549 --> 00:34:07,880
based on events that occur in github so

00:34:05,419 --> 00:34:09,350
when a pull request is merged when a

00:34:07,880 --> 00:34:11,990
commit happens when someone makes a

00:34:09,350 --> 00:34:15,919
comment whatever you can say go to this

00:34:11,990 --> 00:34:18,500
URL and create a HTTP post and basically

00:34:15,919 --> 00:34:20,510
send a message to this URL and tell it

00:34:18,500 --> 00:34:23,179
that this thing has happened and what we

00:34:20,510 --> 00:34:25,100
use that for is telling Jenkins to go

00:34:23,179 --> 00:34:27,260
off and say well this bit of code has

00:34:25,100 --> 00:34:29,240
just been changed in the website so we

00:34:27,260 --> 00:34:32,899
want you to regenerate the main site and

00:34:29,240 --> 00:34:34,730
reload this fresh one and that's what it

00:34:32,899 --> 00:34:37,100
does and I know it works because I tried

00:34:34,730 --> 00:34:38,780
it the other day host prep what we've

00:34:37,100 --> 00:34:40,760
gone through so far is some of the

00:34:38,780 --> 00:34:42,800
theory behind why we're creating the

00:34:40,760 --> 00:34:44,480
build system that we did and what we

00:34:42,800 --> 00:34:46,700
were trying to build with it and how

00:34:44,480 --> 00:34:47,869
that was kind of structured now we're

00:34:46,700 --> 00:34:50,359
going to be getting down there to the

00:34:47,869 --> 00:34:52,790
nitty gritty it's the individual pieces

00:34:50,359 --> 00:34:56,240
of technology that we chose for each of

00:34:52,790 --> 00:34:59,240
the individual phases of the build and

00:34:56,240 --> 00:35:01,340
why we did and what kind of lessons you

00:34:59,240 --> 00:35:03,410
can learn from that and you know some

00:35:01,340 --> 00:35:04,580
some of its things you want to do and

00:35:03,410 --> 00:35:06,890
some of its things you want to avoid all

00:35:04,580 --> 00:35:12,330
costs

00:35:06,890 --> 00:35:14,040
so first host prep what here we go first

00:35:12,330 --> 00:35:16,200
of all a bit of background the adopt

00:35:14,040 --> 00:35:21,109
bill farm contains many machines donated

00:35:16,200 --> 00:35:21,109
and funded by these very generous people

00:35:24,230 --> 00:35:28,970
well everything needs to be everything

00:35:26,520 --> 00:35:31,140
needs to be hosted somewhere I

00:35:28,970 --> 00:35:34,050
understand some of them physical

00:35:31,140 --> 00:35:36,210
machines hosted in places I can't swear

00:35:34,050 --> 00:35:37,320
that all of them are actual machines and

00:35:36,210 --> 00:35:39,840
not just something hosted on a cloud

00:35:37,320 --> 00:35:41,460
server I know not enough of it's hosted

00:35:39,840 --> 00:35:43,020
on the cloud as far as we'd like and

00:35:41,460 --> 00:35:45,090
that's something I'm also going to cover

00:35:43,020 --> 00:35:46,590
late ok the problem we were trying to

00:35:45,090 --> 00:35:48,180
solve in regards to all these different

00:35:46,590 --> 00:35:50,460
machines donated by all these lovely

00:35:48,180 --> 00:35:53,640
people is they have many different

00:35:50,460 --> 00:35:57,540
architectures no s it's a very diffuse

00:35:53,640 --> 00:35:59,670
group how do we set up so many different

00:35:57,540 --> 00:36:02,160
machines somebody throws a half a dozen

00:35:59,670 --> 00:36:04,230
Macs at us and a couple of Linux PPC le

00:36:02,160 --> 00:36:07,020
machines how are we going to set up on

00:36:04,230 --> 00:36:08,880
those without breaking stride how do we

00:36:07,020 --> 00:36:10,920
ensure that our tool chain dependencies

00:36:08,880 --> 00:36:12,599
remain consistent so someone

00:36:10,920 --> 00:36:15,030
accidentally kicks off an update on a

00:36:12,599 --> 00:36:16,800
few of our machines how do we make sure

00:36:15,030 --> 00:36:19,619
that we didn't just replace the version

00:36:16,800 --> 00:36:22,290
of the C compiler with something that

00:36:19,619 --> 00:36:25,589
won't build as we were expecting what

00:36:22,290 --> 00:36:27,540
won't build consistently how do we scale

00:36:25,589 --> 00:36:31,560
quickly should the need arise as I said

00:36:27,540 --> 00:36:32,970
if we get a bunch of new machines all of

00:36:31,560 --> 00:36:34,560
a sudden then we need the ability to

00:36:32,970 --> 00:36:39,150
quickly set up all these different

00:36:34,560 --> 00:36:41,910
machines at once the solution is concept

00:36:39,150 --> 00:36:46,020
called IT automation and the tool we

00:36:41,910 --> 00:36:47,790
chose was ansible why did we choose

00:36:46,020 --> 00:36:49,950
ansible to set up all our different

00:36:47,790 --> 00:36:51,960
pieces of hardware well because a de

00:36:49,950 --> 00:36:53,520
facto standard for setting up machines

00:36:51,960 --> 00:36:55,470
and open-source infrastructure and

00:36:53,520 --> 00:36:57,060
because it's the de facto standard it

00:36:55,470 --> 00:36:58,710
means that lots of different projects

00:36:57,060 --> 00:37:00,599
use it lots of different people use it

00:36:58,710 --> 00:37:02,099
which means that we don't need to skill

00:37:00,599 --> 00:37:04,080
these people up when they join our

00:37:02,099 --> 00:37:06,180
project they just show up and they

00:37:04,080 --> 00:37:09,390
already have the the mental tools they

00:37:06,180 --> 00:37:11,280
need to understand our code and how it

00:37:09,390 --> 00:37:12,170
is that it goes about setting up all

00:37:11,280 --> 00:37:14,880
their different machines

00:37:12,170 --> 00:37:16,740
it's agentless which means you don't

00:37:14,880 --> 00:37:18,570
need to set up anything on the machines

00:37:16,740 --> 00:37:19,890
in question in advance

00:37:18,570 --> 00:37:22,650
you just point

00:37:19,890 --> 00:37:26,579
at the minute we'll SSH in and run the

00:37:22,650 --> 00:37:28,799
commands it needs by our SSH which makes

00:37:26,579 --> 00:37:31,380
it nice and lightweight from the hosts

00:37:28,799 --> 00:37:35,579
point of view and it uses simple yeah

00:37:31,380 --> 00:37:37,890
more syntax hands up who's had the

00:37:35,579 --> 00:37:43,999
pleasure of working with the amel in

00:37:37,890 --> 00:37:46,140
anger a few of you you poor poor people

00:37:43,999 --> 00:37:51,359
yeah more for those of you who don't

00:37:46,140 --> 00:37:53,249
know is whitespace formatted so that

00:37:51,359 --> 00:37:55,700
means the difference between one chunk

00:37:53,249 --> 00:37:58,440
of text and another is how indent it is

00:37:55,700 --> 00:38:02,670
and anyone who's used make will know how

00:37:58,440 --> 00:38:04,230
big a headache that can be though okay

00:38:02,670 --> 00:38:05,730
it's simple its straightforward there

00:38:04,230 --> 00:38:13,049
aren't too many things for you to learn

00:38:05,730 --> 00:38:15,269
in order to you to learn ya know what is

00:38:13,049 --> 00:38:18,660
ansible what it is is infrastructure as

00:38:15,269 --> 00:38:21,930
code you write your code in ansible

00:38:18,660 --> 00:38:23,940
in what we call play books which are

00:38:21,930 --> 00:38:26,640
then subdivided into roles roles are

00:38:23,940 --> 00:38:28,319
like class libraries and that can be

00:38:26,640 --> 00:38:30,660
shared between different play books and

00:38:28,319 --> 00:38:32,849
what you do is you write your playbooks

00:38:30,660 --> 00:38:36,599
and it says I want you to install these

00:38:32,849 --> 00:38:40,529
things to this level and set up these

00:38:36,599 --> 00:38:41,789
folders and whatever and it will go to

00:38:40,529 --> 00:38:43,619
each of your different hosts to make

00:38:41,789 --> 00:38:45,930
sure that happens and the thing

00:38:43,619 --> 00:38:47,670
danceable is it does it smart so it's

00:38:45,930 --> 00:38:50,249
not going to go installing a package if

00:38:47,670 --> 00:38:52,559
it's already there it knows how to check

00:38:50,249 --> 00:38:55,140
that you've got the right version and

00:38:52,559 --> 00:38:56,700
you don't need to worry about telling it

00:38:55,140 --> 00:38:58,710
to do that explicitly yourself it's a

00:38:56,700 --> 00:39:00,269
nice and smart piece of kit you just

00:38:58,710 --> 00:39:03,239
need to say I want you to make sure I've

00:39:00,269 --> 00:39:04,619
got this package at this level on the

00:39:03,239 --> 00:39:08,569
machines that are in this group of

00:39:04,619 --> 00:39:08,569
machines and it will just do it

00:39:09,440 --> 00:39:16,349
how is ansible run you've got something

00:39:12,960 --> 00:39:18,359
called a awx which is it's a tangible

00:39:16,349 --> 00:39:21,779
tower and what it is is a thing that

00:39:18,359 --> 00:39:23,999
runs intimal you've got automatic

00:39:21,779 --> 00:39:26,309
executions you just tell it to go you

00:39:23,999 --> 00:39:28,200
set up a schedule or an event or

00:39:26,309 --> 00:39:29,670
whatever and it will just go and run and

00:39:28,200 --> 00:39:31,880
update your machines or make sure that

00:39:29,670 --> 00:39:34,250
they are still up to date

00:39:31,880 --> 00:39:37,760
and like it says it keeps host up to

00:39:34,250 --> 00:39:40,430
date and it allows us to run regularly

00:39:37,760 --> 00:39:43,400
from changes in a continuous integration

00:39:40,430 --> 00:39:46,150
plan in order to keep all the machines

00:39:43,400 --> 00:39:46,150
on the same level

00:39:47,330 --> 00:39:51,950
how is ansible structured we've got some

00:39:50,359 --> 00:39:54,260
play books in our github repository

00:39:51,950 --> 00:39:58,099
which is a source code management system

00:39:54,260 --> 00:40:01,820
I've mentioned earlier an example use is

00:39:58,099 --> 00:40:04,760
inside the adopt open open JDK UNIX

00:40:01,820 --> 00:40:06,770
playbook directory and if you crack that

00:40:04,760 --> 00:40:09,859
open I'll show you an example on the

00:40:06,770 --> 00:40:12,380
next slide you've got one yeah more file

00:40:09,859 --> 00:40:15,530
which is called main yeah more and what

00:40:12,380 --> 00:40:17,930
it has in it is a list of roles and so

00:40:15,530 --> 00:40:20,690
you execute main yeah more and it will

00:40:17,930 --> 00:40:22,520
go through each of these roles in turn

00:40:20,690 --> 00:40:23,720
you've got common you've got debug

00:40:22,520 --> 00:40:25,490
you've got Auto conf

00:40:23,720 --> 00:40:27,770
and it will go inside there and it will

00:40:25,490 --> 00:40:31,010
run the main Yama file in each of those

00:40:27,770 --> 00:40:34,070
and it will install whatever needs to be

00:40:31,010 --> 00:40:37,099
installed as part of that so inside the

00:40:34,070 --> 00:40:38,599
free marker all for instance that might

00:40:37,099 --> 00:40:40,400
contain the set of instructions for

00:40:38,599 --> 00:40:43,310
making sure you've got free marker

00:40:40,400 --> 00:40:45,020
installed on your various machines and

00:40:43,310 --> 00:40:47,200
free marker is a package by the way it's

00:40:45,020 --> 00:40:49,670
a font rendering engine

00:40:47,200 --> 00:40:51,230
you've got ant contrib which is another

00:40:49,670 --> 00:40:53,390
package you need to make sure your

00:40:51,230 --> 00:40:55,580
machines have you've got C cache we like

00:40:53,390 --> 00:40:57,980
to subdivide these things so that when

00:40:55,580 --> 00:40:59,780
something goes wrong or when you need to

00:40:57,980 --> 00:41:01,400
update a particular bit of the code it's

00:40:59,780 --> 00:41:03,589
nice and modularized it's easy to

00:41:01,400 --> 00:41:06,640
maintain them wrap your head around it's

00:41:03,589 --> 00:41:06,640
nice it's nice and straightforward

00:41:14,780 --> 00:41:23,339
what it what it does is essentially

00:41:20,730 --> 00:41:25,380
running commands it's not like a

00:41:23,339 --> 00:41:29,160
scripting thing where you have to write

00:41:25,380 --> 00:41:31,829
them it's more you tell it to make sure

00:41:29,160 --> 00:41:35,460
you literally I'm not simplifying things

00:41:31,829 --> 00:41:36,930
as you say go to these machines and part

00:41:35,460 --> 00:41:39,839
of the instructions is make sure you've

00:41:36,930 --> 00:41:41,910
got this package at this version go and

00:41:39,839 --> 00:41:43,260
it will go and it will run the various

00:41:41,910 --> 00:41:46,140
commands it needs to see if it's already

00:41:43,260 --> 00:41:47,819
got it what version it is and it will

00:41:46,140 --> 00:41:50,160
remove the package if it has to and

00:41:47,819 --> 00:41:51,839
replace it with the one once and that

00:41:50,160 --> 00:41:53,160
kind of thing and it'll do all that kind

00:41:51,839 --> 00:41:57,710
of thing nice and smartly so you don't

00:41:53,160 --> 00:41:57,710
have to worry about putting if and then

00:42:02,119 --> 00:42:06,750
basically yes and you can put all the

00:42:05,190 --> 00:42:08,339
stuff that's contained within the rolls

00:42:06,750 --> 00:42:10,050
you can put within the main document if

00:42:08,339 --> 00:42:12,270
you like we like to subdivide it into

00:42:10,050 --> 00:42:14,280
rolls because your main dirty ml file

00:42:12,270 --> 00:42:16,260
can get big quickly and it becomes

00:42:14,280 --> 00:42:18,240
difficult to poke through these things

00:42:16,260 --> 00:42:20,609
and figure out what's going wrong and

00:42:18,240 --> 00:42:27,359
what's happening so we like to break it

00:42:20,609 --> 00:42:30,599
down here's an example of a main dot ya

00:42:27,359 --> 00:42:32,809
mph file at the top you've got your

00:42:30,599 --> 00:42:36,119
hosts that we're running these things on

00:42:32,809 --> 00:42:40,829
this is what machine set we want to run

00:42:36,119 --> 00:42:42,690
this playbook against we've got bits of

00:42:40,829 --> 00:42:45,750
code we don't need to go into this into

00:42:42,690 --> 00:42:49,200
greater detail here's your roles listed

00:42:45,750 --> 00:42:51,299
here this is nice little nice little

00:42:49,200 --> 00:42:53,549
list for you and it will continue off

00:42:51,299 --> 00:42:56,309
the bottom of the screen so it's just

00:42:53,549 --> 00:43:01,950
run each of these in turn it's nice it's

00:42:56,309 --> 00:43:03,869
it's it's pretty easy to read and so

00:43:01,950 --> 00:43:05,880
yeah lessons learned one from

00:43:03,869 --> 00:43:09,089
implementing this stuff the play books

00:43:05,880 --> 00:43:10,710
do get bigger quickly and if you don't

00:43:09,089 --> 00:43:13,290
start using roles at the start you will

00:43:10,710 --> 00:43:15,809
regret it before your project is sofas

00:43:13,290 --> 00:43:17,910
so we started using roles early and we

00:43:15,809 --> 00:43:19,710
haven't looked back so if you do use

00:43:17,910 --> 00:43:24,859
ansible to set up your infrastructure

00:43:19,710 --> 00:43:26,770
it's worth using roles problem is

00:43:24,859 --> 00:43:28,330
absolutions in way you may not

00:43:26,770 --> 00:43:30,160
once so if you're looking to run a build

00:43:28,330 --> 00:43:32,410
locally on your machine you thought our

00:43:30,160 --> 00:43:34,960
I'll just use the ansible scripts on

00:43:32,410 --> 00:43:38,680
adopt to set up my machine in a way that

00:43:34,960 --> 00:43:43,300
allows me to build openjdk locally you

00:43:38,680 --> 00:43:46,120
could do it that way there's an

00:43:43,300 --> 00:43:48,330
expression once you do bla you'll never

00:43:46,120 --> 00:43:50,440
go back

00:43:48,330 --> 00:43:52,030
that's much the case with ansible

00:43:50,440 --> 00:43:53,430
because once it's changed your machine

00:43:52,030 --> 00:43:56,170
it will change it in so many different

00:43:53,430 --> 00:43:58,410
ways that it can be difficult doing

00:43:56,170 --> 00:44:00,820
anything that you've done before

00:43:58,410 --> 00:44:03,970
especially if it relies on packages that

00:44:00,820 --> 00:44:07,210
you've said stripped out by ansible one

00:44:03,970 --> 00:44:11,500
solution is to use a vagrant to spin up

00:44:07,210 --> 00:44:14,890
a VM to run ansible inside vm vagrant is

00:44:11,500 --> 00:44:18,160
a vm management system we have a vagrant

00:44:14,890 --> 00:44:20,050
file that we provide so you just say you

00:44:18,160 --> 00:44:22,180
just install vagrant and you say you

00:44:20,050 --> 00:44:24,880
pointed at a vagrant file and you say go

00:44:22,180 --> 00:44:27,490
and spin up a VM for me that I can then

00:44:24,880 --> 00:44:30,580
run ansible inside and then run a build

00:44:27,490 --> 00:44:33,070
in and that way you can just do it that

00:44:30,580 --> 00:44:35,260
way future plans we in plan to improve

00:44:33,070 --> 00:44:36,760
the Windows and Mac playbook so if

00:44:35,260 --> 00:44:38,050
anybody wants to get involved in ansible

00:44:36,760 --> 00:44:40,600
or anyone wants to learn more about

00:44:38,050 --> 00:44:43,720
ansible then you can drop by the the

00:44:40,600 --> 00:44:45,750
adopt community I'll put the link up

00:44:43,720 --> 00:44:49,360
again at the end of the presentation and

00:44:45,750 --> 00:44:51,490
what we'd show you is what a good

00:44:49,360 --> 00:44:53,590
playbook looks like in terms of our Mac

00:44:51,490 --> 00:44:55,750
playbook in terms of our Linux play

00:44:53,590 --> 00:44:58,420
books and then we compare them to the

00:44:55,750 --> 00:45:00,490
Windows one the Mac's one and you'd

00:44:58,420 --> 00:45:02,230
quickly find out what makes a good one

00:45:00,490 --> 00:45:05,620
what makes a bad one so it's a good way

00:45:02,230 --> 00:45:07,180
to develop your skills in that area and

00:45:05,620 --> 00:45:10,390
we're also looking to set up a chaos

00:45:07,180 --> 00:45:12,400
monkey which is an interesting term only

00:45:10,390 --> 00:45:14,650
learned a few days ago it's something

00:45:12,400 --> 00:45:18,670
that randomly goes through your farm of

00:45:14,650 --> 00:45:20,500
machines and shuts down nodes which

00:45:18,670 --> 00:45:22,660
seems like a terrible thing to me but

00:45:20,500 --> 00:45:24,730
apparently it's not it's something you

00:45:22,660 --> 00:45:26,200
can use to test your IT automation

00:45:24,730 --> 00:45:28,120
infrastructure to make sure that you can

00:45:26,200 --> 00:45:30,910
recover quickly from this kind of

00:45:28,120 --> 00:45:33,010
failure so it randomly goes knocking

00:45:30,910 --> 00:45:34,750
things offline and then your automation

00:45:33,010 --> 00:45:36,280
is supposed to then go and bring

00:45:34,750 --> 00:45:38,980
everything up and setup again eight

00:45:36,280 --> 00:45:40,210
continuous integration server you may

00:45:38,980 --> 00:45:42,580
recall I showed you some

00:45:40,210 --> 00:45:45,609
pictures of Jenkins earlier and Jenkins

00:45:42,580 --> 00:45:47,560
is a continuous integration server so

00:45:45,609 --> 00:45:50,080
what problem we're trying to solve our

00:45:47,560 --> 00:45:52,599
build process has lots of steps that we

00:45:50,080 --> 00:45:54,250
need to implement in turn how do we

00:45:52,599 --> 00:45:56,260
automate the steps how do we automate

00:45:54,250 --> 00:45:58,690
the flow from one piece to the other and

00:45:56,260 --> 00:46:01,210
how do we enable continuous integration

00:45:58,690 --> 00:46:05,290
in this way rather than just plugging

00:46:01,210 --> 00:46:06,520
together a bunch of scripts the answer

00:46:05,290 --> 00:46:08,560
is we pick the continuous integration

00:46:06,520 --> 00:46:11,500
server and surprise surprise we chose

00:46:08,560 --> 00:46:13,750
Jenkins again we chose it because it's

00:46:11,500 --> 00:46:15,640
the de facto standard everyone has

00:46:13,750 --> 00:46:16,960
skills in there and those that don't can

00:46:15,640 --> 00:46:18,849
quickly pick it up because it's got a

00:46:16,960 --> 00:46:21,550
nice failure intuitive graphical

00:46:18,849 --> 00:46:24,790
interface that's a pretty easy to get to

00:46:21,550 --> 00:46:27,070
grips with you've got modularity it

00:46:24,790 --> 00:46:30,160
breaks itself nice breaks the tasks down

00:46:27,070 --> 00:46:32,109
nicely into different jobs with

00:46:30,160 --> 00:46:34,599
different phases inside of each job and

00:46:32,109 --> 00:46:36,250
you can view Daphna it's nice and easy

00:46:34,599 --> 00:46:38,859
to understand you've got low level

00:46:36,250 --> 00:46:40,750
access to the machines which not all

00:46:38,859 --> 00:46:42,940
continuous integration servers give you

00:46:40,750 --> 00:46:46,180
access to so we have greater control

00:46:42,940 --> 00:46:51,160
during job execution and it's also

00:46:46,180 --> 00:46:53,170
written in Java which is good which is

00:46:51,160 --> 00:46:55,119
good other than the obvious because so

00:46:53,170 --> 00:46:57,910
many people have Java skills these days

00:46:55,119 --> 00:47:00,070
that when we bring them on board if we

00:46:57,910 --> 00:47:02,920
need a new plugin created or if we

00:47:00,070 --> 00:47:05,380
identify a defect then we can go into

00:47:02,920 --> 00:47:08,349
the guts of it and figure out what needs

00:47:05,380 --> 00:47:10,000
to be done ourselves which is good

00:47:08,349 --> 00:47:14,440
writing your own get writing your own

00:47:10,000 --> 00:47:16,420
material is always good how do we use

00:47:14,440 --> 00:47:19,450
Jenkins has we showed you before we've

00:47:16,420 --> 00:47:21,160
got pipelines of different jobs that we

00:47:19,450 --> 00:47:24,130
launched nightly and that we can launch

00:47:21,160 --> 00:47:26,560
manually as well we have different jobs

00:47:24,130 --> 00:47:29,170
for different JDK versions you may have

00:47:26,560 --> 00:47:32,410
seen we showed you the JDK 10 jobs and

00:47:29,170 --> 00:47:37,180
the JDK 11 jobs we also have ones for JD

00:47:32,410 --> 00:47:40,450
came nine JDK 8 we have dynamic host

00:47:37,180 --> 00:47:42,970
selection so we might have a dozen or so

00:47:40,450 --> 00:47:44,710
Linux boxes and if two of them are busy

00:47:42,970 --> 00:47:47,109
running tests and one's busy running

00:47:44,710 --> 00:47:49,900
some of these manuals then it will

00:47:47,109 --> 00:47:51,849
dynamically pick another machine from

00:47:49,900 --> 00:47:52,510
that list so you don't need to worry so

00:47:51,849 --> 00:47:53,980
much about

00:47:52,510 --> 00:47:55,930
what machine you're going to run that on

00:47:53,980 --> 00:47:57,520
you'd have to wait until it's free

00:47:55,930 --> 00:48:01,120
it'll just pick the next one that meets

00:47:57,520 --> 00:48:03,220
your criteria jobs can run solo or in

00:48:01,120 --> 00:48:05,820
sequence at one point they were pretty

00:48:03,220 --> 00:48:08,410
heavily tied to the sequence but we

00:48:05,820 --> 00:48:11,380
since made sure they were more modular

00:48:08,410 --> 00:48:13,150
so you can build and test and you can do

00:48:11,380 --> 00:48:15,160
that separately if you wants you don't

00:48:13,150 --> 00:48:16,810
need to run the whole suite of tests or

00:48:15,160 --> 00:48:21,190
you don't need to build first in order

00:48:16,810 --> 00:48:23,500
to test and the parameters control

00:48:21,190 --> 00:48:26,110
behavior we showed you a list of when

00:48:23,500 --> 00:48:27,970
you start the the pipeline when you pick

00:48:26,110 --> 00:48:29,650
the different platforms that you want to

00:48:27,970 --> 00:48:34,050
run against the different virtual

00:48:29,650 --> 00:48:36,790
machines you can control how that works

00:48:34,050 --> 00:48:38,320
what do our jobs look like and you may

00:48:36,790 --> 00:48:40,180
recall this picture we showed you

00:48:38,320 --> 00:48:43,540
earlier we had a bit more screen space

00:48:40,180 --> 00:48:45,520
to show it to you before so yeah here's

00:48:43,540 --> 00:48:48,700
the the breakdown as you can see we've

00:48:45,520 --> 00:48:50,800
got we're spinning up the new jobs then

00:48:48,700 --> 00:48:52,570
we break it down to more jobs we've got

00:48:50,800 --> 00:48:56,500
the build we've got the tests we've got

00:48:52,570 --> 00:48:59,290
the signing of the builds and yeah

00:48:56,500 --> 00:49:01,360
that's that's what they look like me I

00:48:59,290 --> 00:49:04,480
prefer the colorful graphs but then I'm

00:49:01,360 --> 00:49:07,330
a simple person we've got source

00:49:04,480 --> 00:49:10,090
controlled build pipelines sorry this is

00:49:07,330 --> 00:49:12,670
the the first lesson we learned from

00:49:10,090 --> 00:49:16,030
running Jenkins we've got the source

00:49:12,670 --> 00:49:18,580
controlled build pipelines so instead of

00:49:16,030 --> 00:49:20,950
just having here's a job and when you

00:49:18,580 --> 00:49:25,450
run it it runs these instructions or

00:49:20,950 --> 00:49:27,010
this set of scripts internally instead

00:49:25,450 --> 00:49:29,230
of just having that there where anyone

00:49:27,010 --> 00:49:30,850
can tweak or change it or where only the

00:49:29,230 --> 00:49:33,730
admins can tweak it or change it or

00:49:30,850 --> 00:49:36,250
whatever anyone can damage it anyone can

00:49:33,730 --> 00:49:38,110
modify who's got access to it instead of

00:49:36,250 --> 00:49:41,020
that we put the contents of these jobs

00:49:38,110 --> 00:49:44,890
in source control we put them in github

00:49:41,020 --> 00:49:47,500
repositories in groovy files which which

00:49:44,890 --> 00:49:53,500
just looked like scripts to me but

00:49:47,500 --> 00:49:55,810
that's me and yeah so it's it's good

00:49:53,500 --> 00:49:57,880
because it means that you can recover

00:49:55,810 --> 00:49:59,350
from issues you can recur up we can

00:49:57,880 --> 00:50:01,930
recover from giving the wrong person

00:49:59,350 --> 00:50:03,670
access privileges and it's good to be

00:50:01,930 --> 00:50:04,700
able to control the contents of your

00:50:03,670 --> 00:50:15,650
jobs in this way

00:50:04,700 --> 00:50:19,250
I don't know I don't have access to that

00:50:15,650 --> 00:50:25,579
part Jenkins sorry some of this I have

00:50:19,250 --> 00:50:27,619
to rely on third-party information so

00:50:25,579 --> 00:50:29,750
yeah another feature something which I I

00:50:27,619 --> 00:50:31,970
have seen is a continuous integration

00:50:29,750 --> 00:50:34,760
build failure tracking so I don't know

00:50:31,970 --> 00:50:38,060
how many of you have used slack you

00:50:34,760 --> 00:50:39,470
slack before yes excellent one of the

00:50:38,060 --> 00:50:42,470
things you can get is little plugin

00:50:39,470 --> 00:50:44,750
allows slack notifications do not set

00:50:42,470 --> 00:50:46,310
these things to notify you on past runs

00:50:44,750 --> 00:50:48,640
especially if you've cut as many builds

00:50:46,310 --> 00:50:53,930
as we do they will flood your channels

00:50:48,640 --> 00:50:55,670
and but yeah if you get something to

00:50:53,930 --> 00:50:57,290
notify you on failure especially if

00:50:55,670 --> 00:50:58,910
you've got a run green philosophy and

00:50:57,290 --> 00:51:00,470
your companies it's definitely

00:50:58,910 --> 00:51:02,180
worthwhile because you get notified

00:51:00,470 --> 00:51:04,220
immediately when something's gone wrong

00:51:02,180 --> 00:51:07,460
and you're not reliant on an intern

00:51:04,220 --> 00:51:10,220
who's just sitting looking glazed at a

00:51:07,460 --> 00:51:13,819
bank of lights on the Jenkins main page

00:51:10,220 --> 00:51:17,349
you can get dynamic updates which is

00:51:13,819 --> 00:51:21,260
good it's it's it's very useful it's

00:51:17,349 --> 00:51:22,880
it's it's a bit dry so of course yeah

00:51:21,260 --> 00:51:26,060
you know what it's like techies and

00:51:22,880 --> 00:51:29,480
spare time and an API we plugged it into

00:51:26,060 --> 00:51:32,300
a nice little what you can do to get

00:51:29,480 --> 00:51:34,339
information out of Jenkins you can get

00:51:32,300 --> 00:51:37,190
regular updates on slag or you can go

00:51:34,339 --> 00:51:40,220
and get the information yourself here we

00:51:37,190 --> 00:51:44,420
see one of our enterprising developers

00:51:40,220 --> 00:51:48,859
has used a curl command to run a HTTP

00:51:44,420 --> 00:51:50,630
GET and has fetched information fetches

00:51:48,859 --> 00:51:55,220
information on a regular basis

00:51:50,630 --> 00:51:58,520
from Jenkins and gets information in

00:51:55,220 --> 00:52:00,140
form of a JSON object I believe and what

00:51:58,520 --> 00:52:02,210
they use that information to do they use

00:52:00,140 --> 00:52:03,880
that information to populate this nice

00:52:02,210 --> 00:52:06,290
little graph on one of their web pages

00:52:03,880 --> 00:52:08,510
with the status of all the different

00:52:06,290 --> 00:52:10,400
jobs that we've been running and then

00:52:08,510 --> 00:52:12,050
they feed that information into a

00:52:10,400 --> 00:52:16,550
Raspberry Pi that's sitting on his desk

00:52:12,050 --> 00:52:17,830
and it's lit up in bright colors like I

00:52:16,550 --> 00:52:20,060
said we're simple

00:52:17,830 --> 00:52:22,160
but we do like that we've got a nice

00:52:20,060 --> 00:52:24,350
Bank of Lights and it's very twinkly

00:52:22,160 --> 00:52:25,760
it's something to show people and it's

00:52:24,350 --> 00:52:27,680
good because it means if something fails

00:52:25,760 --> 00:52:30,200
we don't have to try digging out the one

00:52:27,680 --> 00:52:35,630
slack channel that we're piping all the

00:52:30,200 --> 00:52:37,970
automated messages into a future plan

00:52:35,630 --> 00:52:40,690
we'd like to transition to on demand

00:52:37,970 --> 00:52:43,520
hosting so instead of relying on a

00:52:40,690 --> 00:52:48,280
static list of fixed bits of hardware

00:52:43,520 --> 00:52:50,510
we'd like to have a link to the cloud

00:52:48,280 --> 00:52:53,000
basically we'd like to say to the cloud

00:52:50,510 --> 00:52:56,270
hey we want half a dozen Linux machines

00:52:53,000 --> 00:52:57,710
and a couple of Mac OS machines and then

00:52:56,270 --> 00:52:59,780
it says sure and it just spins them up

00:52:57,710 --> 00:53:02,840
and sends us the addresses we'd love to

00:52:59,780 --> 00:53:05,090
have that set up we currently don't and

00:53:02,840 --> 00:53:06,620
if anyone here would like to get

00:53:05,090 --> 00:53:08,480
involved in setting that kind of thing

00:53:06,620 --> 00:53:12,170
up by all means you know give us a

00:53:08,480 --> 00:53:17,510
message on slack and set you to work ok

00:53:12,170 --> 00:53:20,510
build scripts build scripts what they do

00:53:17,510 --> 00:53:24,710
is we run them on the individual host

00:53:20,510 --> 00:53:28,850
machines and they build OpenJDK from the

00:53:24,710 --> 00:53:30,320
source we run the pre-configure steps to

00:53:28,850 --> 00:53:32,090
configure the machine in question

00:53:30,320 --> 00:53:36,110
fetching any dependencies we don't

00:53:32,090 --> 00:53:38,420
already have we download the source code

00:53:36,110 --> 00:53:41,750
we need we set up any folders we want

00:53:38,420 --> 00:53:44,150
and then we just run and configure and

00:53:41,750 --> 00:53:46,940
make with any options that we need to

00:53:44,150 --> 00:53:51,130
run in order to build the open JDK and

00:53:46,940 --> 00:53:51,130
it's basically a bunch of bash scripts

00:53:52,000 --> 00:53:57,050
this is where it fits into the pipeline

00:53:54,320 --> 00:54:00,260
you've got the overall pipeline you've

00:53:57,050 --> 00:54:03,590
got it broken down again by you've got

00:54:00,260 --> 00:54:07,100
the operating system number of bits and

00:54:03,590 --> 00:54:09,980
the VM version and then inside those you

00:54:07,100 --> 00:54:13,040
have the jobs for build test packaging

00:54:09,980 --> 00:54:14,390
and the bits in green of the bill to get

00:54:13,040 --> 00:54:15,830
parts and that's where we're running the

00:54:14,390 --> 00:54:17,360
bash scripts on our various host

00:54:15,830 --> 00:54:19,730
machines here we go here's the build

00:54:17,360 --> 00:54:21,680
scripts it is a load of bash scripts why

00:54:19,730 --> 00:54:23,510
do we use bash because everyone knows

00:54:21,680 --> 00:54:25,550
what bash is not everybody likes what

00:54:23,510 --> 00:54:28,490
Bash is and but everybody knows how to

00:54:25,550 --> 00:54:30,810
use it it's a bit like making that sense

00:54:28,490 --> 00:54:34,130
except people like it

00:54:30,810 --> 00:54:37,380
it's widely available cross-platform

00:54:34,130 --> 00:54:39,810
again everyone knows it it's a universal

00:54:37,380 --> 00:54:42,750
skillset and it's we figured it was one

00:54:39,810 --> 00:54:48,360
battle we don't have to fight so we use

00:54:42,750 --> 00:54:51,180
Bosch how do we use these things you can

00:54:48,360 --> 00:54:53,550
either build natively on the machine

00:54:51,180 --> 00:54:55,650
directly or you can tell the build

00:54:53,550 --> 00:54:57,690
scripts to spin up a nice little docker

00:54:55,650 --> 00:54:59,820
container and run the build scripts

00:54:57,690 --> 00:55:02,850
inside of that and it's a nice simple

00:54:59,820 --> 00:55:07,620
command in both cases we like to keep it

00:55:02,850 --> 00:55:09,390
simple when we can here's the build

00:55:07,620 --> 00:55:11,040
script structure I don't know if you can

00:55:09,390 --> 00:55:14,880
all read the the writing

00:55:11,040 --> 00:55:18,240
you've got the mega JDK any platform at

00:55:14,880 --> 00:55:20,250
the top you've got these two scripts

00:55:18,240 --> 00:55:21,990
which sorry this is the main entry point

00:55:20,250 --> 00:55:24,660
be a nice simple commands I was showing

00:55:21,990 --> 00:55:26,130
you earlier this launches these to

00:55:24,660 --> 00:55:29,340
configure scripts to get the

00:55:26,130 --> 00:55:31,650
configuration set up so where are we

00:55:29,340 --> 00:55:33,330
getting the boot Java from where are we

00:55:31,650 --> 00:55:34,770
going to install to where are we going

00:55:33,330 --> 00:55:38,430
to get the dependencies from what the

00:55:34,770 --> 00:55:39,930
paths we need such-and-such we have two

00:55:38,430 --> 00:55:41,700
different batch scripts depending on

00:55:39,930 --> 00:55:43,470
whether or not whether you're going to

00:55:41,700 --> 00:55:45,600
build it natively or inside docker

00:55:43,470 --> 00:55:47,940
and then we've got the build scripts

00:55:45,600 --> 00:55:50,280
which connects to this prepare the

00:55:47,940 --> 00:55:52,710
workspace script and it sets things up

00:55:50,280 --> 00:55:59,150
and builds inside it and so it's a nice

00:55:52,710 --> 00:56:02,580
simple breakdown about my of our scripts

00:55:59,150 --> 00:56:05,010
this is a nice little blocky depiction

00:56:02,580 --> 00:56:10,170
of exactly what it does and how they're

00:56:05,010 --> 00:56:16,830
executed does anybody want to go through

00:56:10,170 --> 00:56:20,250
this again you're right okay this is the

00:56:16,830 --> 00:56:22,770
the configuration step we specify a load

00:56:20,250 --> 00:56:26,160
of variables some things we have to

00:56:22,770 --> 00:56:28,970
figure out ourselves some things that

00:56:26,160 --> 00:56:31,830
provided forest here are some defaults

00:56:28,970 --> 00:56:34,050
we pass the user's options we write out

00:56:31,830 --> 00:56:35,400
a nice configure file and the configure

00:56:34,050 --> 00:56:36,870
file is useful because it means that we

00:56:35,400 --> 00:56:40,860
can then just pass it into the docker

00:56:36,870 --> 00:56:43,050
container it's not we like to keep it

00:56:40,860 --> 00:56:47,940
simple here's the

00:56:43,050 --> 00:56:50,820
the structure of bill but SH we invoke

00:56:47,940 --> 00:56:53,250
the native or the docker build we read

00:56:50,820 --> 00:56:54,960
in generate configuration you guys can

00:56:53,250 --> 00:56:58,200
read the slides if you're that

00:56:54,960 --> 00:57:01,410
interested it's it's doing exactly why I

00:56:58,200 --> 00:57:05,570
said just now it's sets up the configure

00:57:01,410 --> 00:57:08,310
it downloads dependencies and it runs

00:57:05,570 --> 00:57:11,460
slash configure and make in order to

00:57:08,310 --> 00:57:17,730
build Java and then it packages it up at

00:57:11,460 --> 00:57:19,710
the end lessons learnt we learnt in

00:57:17,730 --> 00:57:22,830
implementing all these baskets we learn

00:57:19,710 --> 00:57:25,320
not to rely on global or environment

00:57:22,830 --> 00:57:27,330
variables too much because every single

00:57:25,320 --> 00:57:28,830
one of those is a wild card so if

00:57:27,330 --> 00:57:31,890
someone's been on that machine before if

00:57:28,830 --> 00:57:36,450
we've somehow failed to blanket between

00:57:31,890 --> 00:57:38,430
executions then it can get messy quickly

00:57:36,450 --> 00:57:40,260
especially if we're using debugging

00:57:38,430 --> 00:57:42,300
options in one run that we don't then

00:57:40,260 --> 00:57:49,050
erase at the beginning of the next run

00:57:42,300 --> 00:57:50,640
it can get yeah I don't believe we've

00:57:49,050 --> 00:57:54,630
run the ansible scripts every single

00:57:50,640 --> 00:57:57,510
time between build executions we do like

00:57:54,630 --> 00:57:58,950
to run them as regularly as we can but

00:57:57,510 --> 00:58:00,359
the last time I think that we actually

00:57:58,950 --> 00:58:06,510
ran them across the entire network was

00:58:00,359 --> 00:58:08,700
several weeks ago so we try not to rely

00:58:06,510 --> 00:58:09,869
over rely on environment variables in

00:58:08,700 --> 00:58:12,810
fact that's a general rule of thumb

00:58:09,869 --> 00:58:16,130
which is good to stick with we use shell

00:58:12,810 --> 00:58:18,330
check which is a static script checker

00:58:16,130 --> 00:58:19,590
so you run these things against your

00:58:18,330 --> 00:58:23,310
scripts and it will tell them if you're

00:58:19,590 --> 00:58:25,109
making common mistakes what it does you

00:58:23,310 --> 00:58:27,540
can go into more detail if you take a

00:58:25,109 --> 00:58:29,010
look at that URL these scripts are

00:58:27,540 --> 00:58:33,990
available afterwards if you want to know

00:58:29,010 --> 00:58:36,600
down anything you can use functions so

00:58:33,990 --> 00:58:38,160
instead of creating a big honking script

00:58:36,600 --> 00:58:40,460
you can break it down to individual

00:58:38,160 --> 00:58:40,460
pieces

00:58:40,520 --> 00:58:47,010
you we learnt that we don't want to make

00:58:44,070 --> 00:58:53,340
the user modify their environment to fit

00:58:47,010 --> 00:58:54,840
a snowflake build can't John yeah we

00:58:53,340 --> 00:58:56,460
want that we want it to be nice and easy

00:58:54,840 --> 00:58:56,790
for the users to use your bugs to be

00:58:56,460 --> 00:58:58,500
able to

00:58:56,790 --> 00:59:01,800
downloadable scripts and just run them

00:58:58,500 --> 00:59:05,040
on their desktop and this enables you to

00:59:01,800 --> 00:59:06,630
do that and although it's common and

00:59:05,040 --> 00:59:10,320
everybody knows how to use it

00:59:06,630 --> 00:59:12,780
John hates it for many reasons he's got

00:59:10,320 --> 00:59:17,070
a list in fact and he made me memorize

00:59:12,780 --> 00:59:19,860
two of his favorites there's a lack of

00:59:17,070 --> 00:59:22,140
associative arrays prior to bash for

00:59:19,860 --> 00:59:23,910
which you won't forgive them for because

00:59:22,140 --> 00:59:25,950
we can't use bash for because it's not

00:59:23,910 --> 00:59:29,100
available on Mac OS and we like to keep

00:59:25,950 --> 00:59:32,070
things consistent which means we can't

00:59:29,100 --> 00:59:34,680
use it anywhere and there's no try-catch

00:59:32,070 --> 00:59:35,970
equivalent so if you know you're going

00:59:34,680 --> 00:59:37,440
to run a bit of code and you think it

00:59:35,970 --> 00:59:40,890
might fall over horribly and you just

00:59:37,440 --> 00:59:43,080
want to run it and find out you can't

00:59:40,890 --> 00:59:44,700
really do that with bash because if it

00:59:43,080 --> 00:59:47,400
falls over bad enough it won't get back

00:59:44,700 --> 00:59:50,610
up again future plans move more builds

00:59:47,400 --> 00:59:52,890
into containers as you've already seen

00:59:50,610 --> 00:59:56,090
we have the ability to run builds and

00:59:52,890 --> 00:59:59,040
containers but we don't always do that

00:59:56,090 --> 01:00:02,280
we'd like to produce more installers

00:59:59,040 --> 01:00:03,720
we'd like to reduce build times increase

01:00:02,280 --> 01:00:05,760
the reliability of them because

01:00:03,720 --> 01:00:08,360
sometimes they fail and it gives people

01:00:05,760 --> 01:00:12,150
a lot of hard work that they don't need

01:00:08,360 --> 01:00:14,100
and we'd like to reduce the special

01:00:12,150 --> 01:00:15,360
casings for various platforms so we

01:00:14,100 --> 01:00:17,760
don't want people to have to worry too

01:00:15,360 --> 01:00:24,450
much about whether they're running on

01:00:17,760 --> 01:00:26,010
Mac OS or Linux or whatever you know so

01:00:24,450 --> 01:00:27,780
we like we like to have as much common

01:00:26,010 --> 01:00:33,960
code as possible it makes maintenance a

01:00:27,780 --> 01:00:35,940
lot easier ok and this slide can be

01:00:33,960 --> 01:00:40,590
safely ignored because as you can see it

01:00:35,940 --> 01:00:45,360
is completely irrelevant archiving this

01:00:40,590 --> 01:00:50,520
is a nice simple section when we create

01:00:45,360 --> 01:00:53,430
our builds just to emphasize we upload

01:00:50,520 --> 01:01:00,480
them using the API and we store them on

01:00:53,430 --> 01:01:03,360
github for our convenience and here is

01:01:00,480 --> 01:01:05,250
our release process when we have a build

01:01:03,360 --> 01:01:08,160
and we know it's passed all of our tests

01:01:05,250 --> 01:01:09,710
we compress the binary into a nice

01:01:08,160 --> 01:01:12,440
little tar ball

01:01:09,710 --> 01:01:16,430
those who don't know tarball is just a

01:01:12,440 --> 01:01:19,220
it's like a dot zip it's a package of

01:01:16,430 --> 01:01:20,119
different files lumped together we can

01:01:19,220 --> 01:01:24,109
press into a tarball

01:01:20,119 --> 01:01:26,210
we generate a sha-256 sum for anyone who

01:01:24,109 --> 01:01:31,490
doesn't know what that is it's a

01:01:26,210 --> 01:01:33,710
checksum it's a string of digits that

01:01:31,490 --> 01:01:35,509
you can then compare to you the build

01:01:33,710 --> 01:01:37,249
you've downloaded to verify that the

01:01:35,509 --> 01:01:40,670
build you've downloaded is the one that

01:01:37,249 --> 01:01:42,740
was created at Build time so you

01:01:40,670 --> 01:01:44,150
download the build you can create a

01:01:42,740 --> 01:01:47,029
program if you're that concerned about

01:01:44,150 --> 01:01:49,039
corruption to compare it to the sha sum

01:01:47,029 --> 01:01:50,930
and it will just tell you whether or not

01:01:49,039 --> 01:01:52,940
you've got a good build that wasn't

01:01:50,930 --> 01:01:55,039
corrupted or partly downloaded or

01:01:52,940 --> 01:01:56,900
whatever

01:01:55,039 --> 01:02:00,829
we've got github release tag that we

01:01:56,900 --> 01:02:04,400
create during the release process then

01:02:00,829 --> 01:02:06,920
we upload everything to to get hub for

01:02:04,400 --> 01:02:10,490
storage and then we you can use the

01:02:06,920 --> 01:02:12,309
github API to to get download links and

01:02:10,490 --> 01:02:17,839
grab yourself a nice copy of Java and

01:02:12,309 --> 01:02:22,309
that's why our website does ok quality

01:02:17,839 --> 01:02:25,039
control test goals and motivations what

01:02:22,309 --> 01:02:27,200
we were doing with our tests we wanted

01:02:25,039 --> 01:02:29,390
open and transparent testing of JD case

01:02:27,200 --> 01:02:31,849
for the community 3 wanted anyone to be

01:02:29,390 --> 01:02:37,789
able to just show up and either run

01:02:31,849 --> 01:02:41,029
tests or run tests or view what tests

01:02:37,789 --> 01:02:44,029
were being executed against the JDK

01:02:41,029 --> 01:02:45,589
binaries that we provide so we want

01:02:44,029 --> 01:02:47,480
people to just be able to wander in off

01:02:45,589 --> 01:02:51,079
the street and eyeball this stuff to

01:02:47,480 --> 01:02:53,390
know what we're doing we want to find

01:02:51,079 --> 01:02:55,549
defects early so we can report quickly

01:02:53,390 --> 01:02:59,029
to the upstream project so that's report

01:02:55,549 --> 01:03:00,769
2 open JDK that's reports the open June

01:02:59,029 --> 01:03:03,430
9 communities there are various other

01:03:00,769 --> 01:03:07,970
communities that we report to as well

01:03:03,430 --> 01:03:11,480
such as OMR and the like we like to

01:03:07,970 --> 01:03:13,730
empower developers so you can run all of

01:03:11,480 --> 01:03:15,319
these tests locally on your machine much

01:03:13,730 --> 01:03:16,999
like with the build scripts we enable

01:03:15,319 --> 01:03:18,890
people to do that as well so if you just

01:03:16,999 --> 01:03:21,170
want to download our tests and run them

01:03:18,890 --> 01:03:23,119
yourself you can

01:03:21,170 --> 01:03:24,770
it does take a while for the longest

01:03:23,119 --> 01:03:29,000
sets so I'd restrict yourself to the

01:03:24,770 --> 01:03:30,890
sanity testing for you you've got a

01:03:29,000 --> 01:03:33,170
quick integration of new test material

01:03:30,890 --> 01:03:36,140
we created an intentionally thin layer

01:03:33,170 --> 01:03:37,819
on top that allows you to access all

01:03:36,140 --> 01:03:39,799
these different testing infrastructures

01:03:37,819 --> 01:03:42,770
and frameworks all different subtypes of

01:03:39,799 --> 01:03:47,000
tests run on we wanted people to be able

01:03:42,770 --> 01:03:49,220
to download so we could download new

01:03:47,000 --> 01:03:51,740
groups of tests as and when we identify

01:03:49,220 --> 01:03:53,809
them and just plug them into this thing

01:03:51,740 --> 01:03:56,210
with minimal changes required as quickly

01:03:53,809 --> 01:03:57,890
as possible and we've got a nice

01:03:56,210 --> 01:03:59,720
turnaround on that actually when we

01:03:57,890 --> 01:04:01,910
identify a new test that we can bring

01:03:59,720 --> 01:04:05,319
into the fold fairly quickly just as

01:04:01,910 --> 01:04:05,319
soon as the lawyers are done with it and

01:04:05,740 --> 01:04:27,650
yes thousands we have precise numbers on

01:04:12,950 --> 01:04:33,680
the following slides duplicates or gaps

01:04:27,650 --> 01:04:36,109
I honestly don't know we use test sets

01:04:33,680 --> 01:04:39,230
that are provided by various different

01:04:36,109 --> 01:04:42,380
groups and one of the groups is the open

01:04:39,230 --> 01:04:45,980
JDK regression test Suites created by

01:04:42,380 --> 01:04:49,460
the open JDK community itself we also

01:04:45,980 --> 01:04:51,200
have the the jck tests which is provided

01:04:49,460 --> 01:04:53,450
by Oracle which is how you define

01:04:51,200 --> 01:04:56,630
something as Java so does it meet the

01:04:53,450 --> 01:05:00,260
specification and we do intend to run

01:04:56,630 --> 01:05:02,210
those against our hotspot builds so we

01:05:00,260 --> 01:05:03,980
know that it meets the spec we know that

01:05:02,210 --> 01:05:05,720
passes all the tests that the community

01:05:03,980 --> 01:05:06,619
well not necessarily old testing

01:05:05,720 --> 01:05:08,839
community because some of them are

01:05:06,619 --> 01:05:11,599
incredibly flaky but you know enough of

01:05:08,839 --> 01:05:12,920
them and we've got various different

01:05:11,599 --> 01:05:15,440
tests we've got a test framerate

01:05:12,920 --> 01:05:18,290
provided by IBM so if they think it's

01:05:15,440 --> 01:05:20,720
good and you've got profiling tests such

01:05:18,290 --> 01:05:22,940
as micro profile and such to guarantee

01:05:20,720 --> 01:05:25,130
the performance is good will it be a

01:05:22,940 --> 01:05:28,369
hundred percent coverage unlikely

01:05:25,130 --> 01:05:30,230
because there's a lot in Java but we

01:05:28,369 --> 01:05:33,310
figure if we cast a net wide enough

01:05:30,230 --> 01:05:36,350
we'll cover will cover what we need to

01:05:33,310 --> 01:05:42,730
okay so yeah we want to make adopt

01:05:36,350 --> 01:05:45,880
openjdk a center of excellence yeah

01:05:42,730 --> 01:05:49,610
there we go here's your specific numbers

01:05:45,880 --> 01:05:51,740
we've got consolidating curators what we

01:05:49,610 --> 01:05:53,720
wanted to do so we've got as I mentioned

01:05:51,740 --> 01:05:55,850
the thin layer it's called test kit Jen

01:05:53,720 --> 01:05:58,010
running on the top and that allows you

01:05:55,850 --> 01:06:00,740
to execute all the different types of

01:05:58,010 --> 01:06:02,600
tests with the same interface at the top

01:06:00,740 --> 01:06:04,760
so you just say what you want to run you

01:06:02,600 --> 01:06:06,310
don't need to worry about how that

01:06:04,760 --> 01:06:09,410
framework is running it

01:06:06,310 --> 01:06:12,620
you've got the functional tests which

01:06:09,410 --> 01:06:14,960
come from the open j9 community which

01:06:12,620 --> 01:06:18,020
run on test ng and command-line tester

01:06:14,960 --> 01:06:21,800
that's 20,000 we run nightly you've got

01:06:18,020 --> 01:06:24,740
the open JDK communities regression test

01:06:21,800 --> 01:06:29,300
suite that's run on j-tier edge we've

01:06:24,740 --> 01:06:31,310
got almost 3,000 we run nightly and 6.6

01:06:29,300 --> 01:06:34,910
thousand that we run for releases

01:06:31,310 --> 01:06:38,870
because they take a long time to run

01:06:34,910 --> 01:06:40,700
we've got system tests STF we run a lot

01:06:38,870 --> 01:06:43,910
of those but it's in flux so we just put

01:06:40,700 --> 01:06:47,540
X's there and you've got external tests

01:06:43,910 --> 01:06:51,170
provided by third parties so individual

01:06:47,540 --> 01:06:52,970
test sets for common applications so we

01:06:51,170 --> 01:06:56,120
want to make sure the various products

01:06:52,970 --> 01:06:57,890
work and we run those and they're often

01:06:56,120 --> 01:07:00,080
in j-unit format there there are and

01:06:57,890 --> 01:07:03,410
others were integrating micro profile

01:07:00,080 --> 01:07:06,740
and stuff like that and there's about we

01:07:03,410 --> 01:07:10,570
also run the TC case as part of that and

01:07:06,740 --> 01:07:14,840
that's about 50,000 tests in a container

01:07:10,570 --> 01:07:17,510
and continuing on we've got the jck

01:07:14,840 --> 01:07:20,870
tests which is 70,000 tests the jck

01:07:17,510 --> 01:07:22,490
tests by the way five minutes okay we're

01:07:20,870 --> 01:07:25,730
going to move on a little faster so we

01:07:22,490 --> 01:07:28,250
can cover the remaining bits and we've

01:07:25,730 --> 01:07:32,600
got lots of tests it's the short version

01:07:28,250 --> 01:07:34,790
we have many tests we've got the

01:07:32,600 --> 01:07:37,010
functional tests which come from open j9

01:07:34,790 --> 01:07:40,010
and we've got the open JDK regression

01:07:37,010 --> 01:07:42,710
tests which often come from which

01:07:40,010 --> 01:07:45,290
originally were intended to test hotspot

01:07:42,710 --> 01:07:46,250
but they also test wider areas of open

01:07:45,290 --> 01:07:48,950
JDK and Jen

01:07:46,250 --> 01:07:51,530
and they can be run against any VM

01:07:48,950 --> 01:07:57,100
whether it's the hotspot VM that comes

01:07:51,530 --> 01:08:00,740
with OpenJDK of the open j9 alternative

01:07:57,100 --> 01:08:02,660
you've got the system STF tests which

01:08:00,740 --> 01:08:06,290
are designed to simulate client

01:08:02,660 --> 01:08:07,430
scenarios and that's actually very handy

01:08:06,290 --> 01:08:09,200
because STF

01:08:07,430 --> 01:08:11,900
one of the things it does it generates

01:08:09,200 --> 01:08:17,810
very complex scenarios but in part of it

01:08:11,900 --> 01:08:19,640
is creating a small removable test case

01:08:17,810 --> 01:08:22,010
that you can then pass the developers

01:08:19,640 --> 01:08:23,390
when you're trying to repair our defect

01:08:22,010 --> 01:08:25,400
so instead of giving them the entire

01:08:23,390 --> 01:08:28,310
framework you can just give them that

01:08:25,400 --> 01:08:31,910
small X tractable thing which I always

01:08:28,310 --> 01:08:34,340
thought was very handy you've got the

01:08:31,910 --> 01:08:36,320
external tests which are application

01:08:34,340 --> 01:08:39,770
tests and micro profile they're from

01:08:36,320 --> 01:08:41,780
outside groups you've got compliance

01:08:39,770 --> 01:08:45,350
tests to making sure that we are meeting

01:08:41,780 --> 01:08:47,300
the the spec for Java and you've got

01:08:45,350 --> 01:08:49,040
performance tests how fast we're running

01:08:47,300 --> 01:08:50,960
so making sure that what we're producing

01:08:49,040 --> 01:08:54,920
isn't slower than what you'd get

01:08:50,960 --> 01:08:57,170
elsewhere lesson is use scaffolding

01:08:54,920 --> 01:08:58,760
which is cheap bits of cheap code to

01:08:57,170 --> 01:09:00,440
keep things going when you have to

01:08:58,760 --> 01:09:02,300
especially if it's not customer facing

01:09:00,440 --> 01:09:04,160
because as long as the tests run it

01:09:02,300 --> 01:09:05,690
doesn't always have to run nicely as

01:09:04,160 --> 01:09:08,090
long as you know you're getting the

01:09:05,690 --> 01:09:11,480
quality you need but don't leave it

01:09:08,090 --> 01:09:14,090
there as you can see further down when

01:09:11,480 --> 01:09:16,730
it says don't settle it's good to keep

01:09:14,090 --> 01:09:18,260
things modular it's good to get regular

01:09:16,730 --> 01:09:20,060
feedback from developers a lot of this

01:09:18,260 --> 01:09:24,650
is just common sense stuff but it's good

01:09:20,060 --> 01:09:26,720
to repeat these things and what's next

01:09:24,650 --> 01:09:28,550
we tend we want to integrate a lot more

01:09:26,720 --> 01:09:32,750
tests collaborate with a much broader

01:09:28,550 --> 01:09:35,570
community and improve triage ability via

01:09:32,750 --> 01:09:37,520
something called T RSS which I have

01:09:35,570 --> 01:09:40,850
training to do on and I haven't

01:09:37,520 --> 01:09:43,040
completed it and we also want to develop

01:09:40,850 --> 01:09:44,750
some other services which will allow our

01:09:43,040 --> 01:09:49,220
test results to be much more useful to

01:09:44,750 --> 01:09:53,000
developers in the long run how do I get

01:09:49,220 --> 01:09:55,610
this how do you get a binary you can get

01:09:53,000 --> 01:09:58,220
that from adopt open JDK net you can get

01:09:55,610 --> 01:09:59,520
it from our API gateway you can get a

01:09:58,220 --> 01:10:02,280
Mac OS boot pack

01:09:59,520 --> 01:10:04,740
these days as well and you can also get

01:10:02,280 --> 01:10:06,780
docker images including newfangled

01:10:04,740 --> 01:10:09,090
distro lists if you're familiar with

01:10:06,780 --> 01:10:11,910
that it's docker images that contain a

01:10:09,090 --> 01:10:15,050
Java that don't have a particular

01:10:11,910 --> 01:10:19,920
distribution of an OS associated with it

01:10:15,050 --> 01:10:21,930
which how do you get this fired web you

01:10:19,920 --> 01:10:24,440
can get it via our website how do you

01:10:21,930 --> 01:10:27,690
get this via the open JDK API

01:10:24,440 --> 01:10:30,540
programmatically you can get it this is

01:10:27,690 --> 01:10:33,150
complicated there's a set of

01:10:30,540 --> 01:10:36,810
instructions on API dot adopt open JDK

01:10:33,150 --> 01:10:39,690
net slash readme and what it basically

01:10:36,810 --> 01:10:42,540
means is run a custom curl command and

01:10:39,690 --> 01:10:45,990
it will get you say the latest Windows

01:10:42,540 --> 01:10:47,280
build using hotspot you could just tell

01:10:45,990 --> 01:10:48,780
it what you want and it will go off and

01:10:47,280 --> 01:10:51,690
fetch it and that's good if you want to

01:10:48,780 --> 01:10:53,670
make sure the Java on your machine or on

01:10:51,690 --> 01:10:55,490
your server on your cloud is the most

01:10:53,670 --> 01:10:57,510
up-to-date one of a particular version

01:10:55,490 --> 01:10:59,130
because that way you don't need to have

01:10:57,510 --> 01:11:00,840
to worry about updating it regularly you

01:10:59,130 --> 01:11:03,920
just set that thing up to run every

01:11:00,840 --> 01:11:03,920
morning and that's it

01:11:04,350 --> 01:11:09,330
future work in this space we want

01:11:06,090 --> 01:11:11,900
support various types of packages and we

01:11:09,330 --> 01:11:14,220
also well we're also looking for

01:11:11,900 --> 01:11:15,480
contributions fairly heavily because we

01:11:14,220 --> 01:11:18,740
like to be able to distribute these

01:11:15,480 --> 01:11:18,740
things to as many people as possible

01:11:18,890 --> 01:11:23,850
summary thank you for sticking with us

01:11:21,630 --> 01:11:28,950
not a single person fell asleep which is

01:11:23,850 --> 01:11:31,740
good today we learned the basics we

01:11:28,950 --> 01:11:34,800
learned what open JDK is what Java is

01:11:31,740 --> 01:11:36,030
what the doctor open JDK is though I

01:11:34,800 --> 01:11:39,720
agree we could have done a better job

01:11:36,030 --> 01:11:43,110
explaining that we had a demonstration

01:11:39,720 --> 01:11:44,520
of our build process we used continuous

01:11:43,110 --> 01:11:46,710
integration we showed you the philosophy

01:11:44,520 --> 01:11:48,300
that we're trying to meet and we also

01:11:46,710 --> 01:11:51,330
talked you through a bunch of the tech

01:11:48,300 --> 01:11:54,480
we used and some helpful hints that I

01:11:51,330 --> 01:11:58,200
hope you guys can use in your in your

01:11:54,480 --> 01:12:00,660
day-to-day and we're going to finish

01:11:58,200 --> 01:12:03,570
with these links if anyone wants to join

01:12:00,660 --> 01:12:04,920
us you can drop by a doctor open JDK net

01:12:03,570 --> 01:12:06,630
there's the link to our slack channels

01:12:04,920 --> 01:12:08,700
at the bottom just drop by and wave your

01:12:06,630 --> 01:12:11,099
hands in the general channel and we're

01:12:08,700 --> 01:12:16,169
always happy to see new faces

01:12:11,099 --> 01:12:19,280
and so yeah that's that's the whole

01:12:16,169 --> 01:12:20,620
thing I'm finally going to stop talking

01:12:19,280 --> 01:12:27,460
thank you very much

01:12:20,620 --> 01:12:27,460

YouTube URL: https://www.youtube.com/watch?v=3s2l_0rph-I


