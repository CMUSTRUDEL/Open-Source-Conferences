Title: Introduction to PESTER - TDD for PowerShell - Developer South Coast - January 2018
Publication date: 2018-02-07
Playlist: Developer South Coast
Description: 
	An introduction session for using Pester to test your PowerShell code Pester provides a framework for running unit tests to execute and validate PowerShell commands from within PowerShell.

About Rob: Rob is a SQL Server DBA with a passion for Powershell, Azure, Automation, and SQL (PaaS geddit?). He is an officer for the PASS PowerShell Virtual Chapter and has spoken at and volunteered at many events. 

Developer South Coast: https://www.meetup.com/DeveloperSouthCoast/
Captions: 
	00:00:00,030 --> 00:00:06,330
hello nice to meet you this is my third

00:00:04,130 --> 00:00:09,000
different user group that I presented to

00:00:06,330 --> 00:00:10,260
you in this building of them the sequel

00:00:09,000 --> 00:00:12,269
user group and I've done the pyro use

00:00:10,260 --> 00:00:16,109
group and now I get to meet you guys as

00:00:12,269 --> 00:00:19,650
well so my name is Rob

00:00:16,109 --> 00:00:24,529
I am a production sequel DBA by trade

00:00:19,650 --> 00:00:28,140
originally once upon a long ago now I do

00:00:24,529 --> 00:00:30,599
stuff I pretty much go in and do the

00:00:28,140 --> 00:00:35,550
things people don't realize they need to

00:00:30,599 --> 00:00:38,670
be done so DevOps automation I do

00:00:35,550 --> 00:00:42,030
training all the boring under the hood

00:00:38,670 --> 00:00:44,280
stuff and nobody really sees and I love

00:00:42,030 --> 00:00:47,579
para shell I've been doing PowerShell

00:00:44,280 --> 00:00:50,850
for many years now and I'm lucky enough

00:00:47,579 --> 00:00:52,230
that I'm involved in organizing the

00:00:50,850 --> 00:00:54,120
paschal conference in Europe

00:00:52,230 --> 00:00:58,800
I've spoken the PowerShell conference in

00:00:54,120 --> 00:01:00,539
Asia I did the PSD in London as an

00:00:58,800 --> 00:01:02,250
organizer and a speaker and I'm involved

00:01:00,539 --> 00:01:05,489
in the sequel community as well so any

00:01:02,250 --> 00:01:09,030
user groups sequel bits sequel really

00:01:05,489 --> 00:01:13,020
all of those sort of things and I've

00:01:09,030 --> 00:01:14,580
developed a DBA reports as an open

00:01:13,020 --> 00:01:16,470
source partial module for collecting

00:01:14,580 --> 00:01:19,710
information from sequel server states

00:01:16,470 --> 00:01:22,200
I'm one of the founders of DBA tools

00:01:19,710 --> 00:01:24,030
which is probably know is definitely the

00:01:22,200 --> 00:01:25,439
best PowerShell module for working with

00:01:24,030 --> 00:01:27,540
sequel even better than the sequel

00:01:25,439 --> 00:01:31,380
server one from Microsoft and yeah I

00:01:27,540 --> 00:01:33,960
know that's recorded and we are

00:01:31,380 --> 00:01:36,450
currently developing something called DB

00:01:33,960 --> 00:01:40,040
HX which is going to use DBA tools and

00:01:36,450 --> 00:01:42,899
Pesta to develop nice easy to use

00:01:40,040 --> 00:01:44,640
validation for your environment so I'm

00:01:42,899 --> 00:01:47,759
going to do two sessions today first one

00:01:44,640 --> 00:01:49,560
is going to be introduction to TDD with

00:01:47,759 --> 00:01:51,509
Pesta which probably going to be more

00:01:49,560 --> 00:01:54,869
your guys sort of thing as developers

00:01:51,509 --> 00:01:58,590
and second one is going to be green is

00:01:54,869 --> 00:02:01,770
good red is bad turning your checklist

00:01:58,590 --> 00:02:03,509
into pesto tests which might seem like

00:02:01,770 --> 00:02:05,369
in the air what's the point but actually

00:02:03,509 --> 00:02:06,869
hopefully you'll see pest has got

00:02:05,369 --> 00:02:10,080
another side that's really really useful

00:02:06,869 --> 00:02:12,569
as well oh yeah I'm an MVP Microsoft

00:02:10,080 --> 00:02:13,660
decided that spent so much time speaking

00:02:12,569 --> 00:02:18,780
about my

00:02:13,660 --> 00:02:21,190
that they'd honor me with that award I

00:02:18,780 --> 00:02:23,980
still play cricket even though the beard

00:02:21,190 --> 00:02:27,990
is gray and I fly a drone I crashed a

00:02:23,980 --> 00:02:30,970
drone and now I've bought a new track so

00:02:27,990 --> 00:02:33,010
pester pester provides a framework for

00:02:30,970 --> 00:02:34,690
running unit tests to execute and

00:02:33,010 --> 00:02:39,450
validate Parashar commands from within

00:02:34,690 --> 00:02:45,670
para shop it's the first open source

00:02:39,450 --> 00:02:47,260
thing that Microsoft releases with one

00:02:45,670 --> 00:02:49,270
of their products so it's embedded

00:02:47,260 --> 00:02:51,520
inside Windows 10 in the para shell you

00:02:49,270 --> 00:02:53,470
get in Windows 10 you'll have pester

00:02:51,520 --> 00:02:55,360
them best there was an open-source tool

00:02:53,470 --> 00:02:56,710
it's an open source module you can see

00:02:55,360 --> 00:03:00,640
the code on github you can go in

00:02:56,710 --> 00:03:04,360
contributes and it enables you to do

00:03:00,640 --> 00:03:10,990
unit tests and validate your partial

00:03:04,360 --> 00:03:13,060
commands why do we need to test we need

00:03:10,990 --> 00:03:14,700
to test to make sure that our code is

00:03:13,060 --> 00:03:17,170
working correctly

00:03:14,700 --> 00:03:20,620
even people who use PowerShell nowadays

00:03:17,170 --> 00:03:22,950
if I'm working on PowerShell and I'm

00:03:20,620 --> 00:03:26,320
developing something that's going to

00:03:22,950 --> 00:03:28,420
recreate an entire environment in Azure

00:03:26,320 --> 00:03:30,640
I want to make sure that it's doing what

00:03:28,420 --> 00:03:33,640
it should be doing this is something

00:03:30,640 --> 00:03:36,160
that was really hard as a an ops guy as

00:03:33,640 --> 00:03:38,230
a production DBA to get my head around

00:03:36,160 --> 00:03:41,920
what was what was this how is this

00:03:38,230 --> 00:03:45,130
important why do we need to do this we

00:03:41,920 --> 00:03:46,480
need to prevent regressions so we need

00:03:45,130 --> 00:03:49,090
to make sure that when we make a change

00:03:46,480 --> 00:03:50,560
it still works how it should do if we

00:03:49,090 --> 00:03:54,330
upgrade something it's still going to

00:03:50,560 --> 00:03:54,330
work with the old stuff with me big new

00:03:54,810 --> 00:04:02,800
documentation because we all love to do

00:03:57,130 --> 00:04:06,080
documentation pesto

00:04:02,800 --> 00:04:09,709
testing in general could actually help

00:04:06,080 --> 00:04:15,140
you to document how you when he wrote it

00:04:09,709 --> 00:04:20,140
expected the code to work so my command

00:04:15,140 --> 00:04:22,910
should have an integer as a parameter

00:04:20,140 --> 00:04:27,020
because we're never expecting a string

00:04:22,910 --> 00:04:31,940
to be passing you write a test to make

00:04:27,020 --> 00:04:37,100
sure that's happening and then explain

00:04:31,940 --> 00:04:39,860
in the title of the test why people will

00:04:37,100 --> 00:04:44,480
understand always think about the future

00:04:39,860 --> 00:04:48,710
you all the thing what you call it a

00:04:44,480 --> 00:04:51,169
meme I guess about always code like the

00:04:48,710 --> 00:04:54,530
person who's going to follow you is a

00:04:51,169 --> 00:04:58,610
maniac axe wielding psychopath who knows

00:04:54,530 --> 00:04:59,980
your address come on you really like to

00:04:58,610 --> 00:05:06,320
laugh you could have something laughter

00:04:59,980 --> 00:05:09,320
it could provide design guidance my

00:05:06,320 --> 00:05:14,320
security team say that I must only have

00:05:09,320 --> 00:05:17,030
windows groups has logins to my service

00:05:14,320 --> 00:05:18,650
so I can write to you detest whenever

00:05:17,030 --> 00:05:21,950
I'm adding a log in to attack to a

00:05:18,650 --> 00:05:28,370
server to say that if it's not a group

00:05:21,950 --> 00:05:32,330
don't get out it enables us to refactor

00:05:28,370 --> 00:05:34,940
so when we go back and somebody says oh

00:05:32,330 --> 00:05:36,410
can you do this we've upgraded to this

00:05:34,940 --> 00:05:38,840
version can it make sure you do this

00:05:36,410 --> 00:05:40,250
well that's really amazing what that

00:05:38,840 --> 00:05:41,270
does with those sequel servers can you

00:05:40,250 --> 00:05:44,870
get it to do the same with our

00:05:41,270 --> 00:05:47,150
application service if you have good

00:05:44,870 --> 00:05:50,620
unit tests and enables you to make sure

00:05:47,150 --> 00:05:50,620
that all of that happens

00:05:51,620 --> 00:05:57,020
so as I said already if you've got

00:05:53,830 --> 00:05:59,710
Windows 10 PowerShell version 5 and

00:05:57,020 --> 00:06:02,660
above you've already got Pesta

00:05:59,710 --> 00:06:06,020
unfortunately because it's being

00:06:02,660 --> 00:06:08,660
released with Windows 10 embedded in the

00:06:06,020 --> 00:06:11,150
operating system it's not the version

00:06:08,660 --> 00:06:14,540
that can be updated by the parish or

00:06:11,150 --> 00:06:17,120
gallery power gallery is a new gate type

00:06:14,540 --> 00:06:21,440
repository of PowerShell commands and

00:06:17,120 --> 00:06:23,720
modules and it means you have to do this

00:06:21,440 --> 00:06:29,090
force and this skipped publisher tip

00:06:23,720 --> 00:06:32,600
check to update it you might have to do

00:06:29,090 --> 00:06:35,240
an install module pester to get it to

00:06:32,600 --> 00:06:39,800
install from the gallery so that then

00:06:35,240 --> 00:06:42,740
you can update it the new powershell

00:06:39,800 --> 00:06:46,310
version 6 does not have pester embedded

00:06:42,740 --> 00:06:49,820
into it for this very reason use partial

00:06:46,310 --> 00:06:51,680
version 6 special call call because it

00:06:49,820 --> 00:06:54,530
runs on dotnet core because it's

00:06:51,680 --> 00:06:58,060
available cross-platform but also core

00:06:54,530 --> 00:07:01,630
as in only the core things that you need

00:06:58,060 --> 00:07:03,980
are embedded in partial version 6

00:07:01,630 --> 00:07:06,620
everything else that you want to go and

00:07:03,980 --> 00:07:09,230
get you go to the powershell gallery new

00:07:06,620 --> 00:07:12,170
installer modules you build yourself up

00:07:09,230 --> 00:07:15,790
your packages of modules and commands

00:07:12,170 --> 00:07:15,790
that you need to do your work

00:07:21,710 --> 00:07:31,400
if you're not able to run your commands

00:07:27,650 --> 00:07:33,470
as administrator you need to use a dash

00:07:31,400 --> 00:07:35,750
scope current user to enable you to

00:07:33,470 --> 00:07:41,770
install any modules modules pester this

00:07:35,750 --> 00:07:43,639
runs for any single module tool and

00:07:41,770 --> 00:07:49,490
something else I was going to say then

00:07:43,639 --> 00:07:52,639
if not is if you work in an environment

00:07:49,490 --> 00:07:54,289
where you're not allowed to connect your

00:07:52,639 --> 00:07:57,410
machine to the Internet and download

00:07:54,289 --> 00:07:59,690
strange things because obviously parish

00:07:57,410 --> 00:08:03,650
or galleries hosted by Microsoft has

00:07:59,690 --> 00:08:06,139
some pretty good malware scanning on it

00:08:03,650 --> 00:08:08,840
but you should never trust anything from

00:08:06,139 --> 00:08:10,160
the internet anyway so you should do

00:08:08,840 --> 00:08:12,800
your own checking on those things so

00:08:10,160 --> 00:08:14,870
don't automatically install it what you

00:08:12,800 --> 00:08:18,740
can do for the patrick gallery is save -

00:08:14,870 --> 00:08:20,840
module save the module down to path and

00:08:18,740 --> 00:08:22,910
then import it from that path we want is

00:08:20,840 --> 00:08:25,539
passed all the relevant checks that are

00:08:22,910 --> 00:08:29,750
required to get on your environment

00:08:25,539 --> 00:08:31,430
what's it look like looks like this so

00:08:29,750 --> 00:08:33,800
I'm going to describe so PowerShell

00:08:31,430 --> 00:08:36,110
normally goes verb noun but here we have

00:08:33,800 --> 00:08:38,120
a different command command is one word

00:08:36,110 --> 00:08:39,680
it's described and we have this is the

00:08:38,120 --> 00:08:42,110
group of tests we just put a name of

00:08:39,680 --> 00:08:44,110
some description in it a string and then

00:08:42,110 --> 00:08:46,339
we have a curly brace on the same line

00:08:44,110 --> 00:08:47,959
very important that you have the curly

00:08:46,339 --> 00:08:50,959
brace on the team line otherwise you get

00:08:47,959 --> 00:08:52,360
my favorite para shell error error that

00:08:50,959 --> 00:08:55,660
kind of walks up to you guys

00:08:52,360 --> 00:08:59,270
you put the curly brace on the next line

00:08:55,660 --> 00:09:00,830
as opposed to the random sea of blood

00:08:59,270 --> 00:09:03,290
that you sometimes get out of PowerShell

00:09:00,830 --> 00:09:06,860
when stuff goes wrong so we have a

00:09:03,290 --> 00:09:10,459
context there's a set of tests a scope

00:09:06,860 --> 00:09:13,000
and this is very important you to

00:09:10,459 --> 00:09:16,089
understand that within this block

00:09:13,000 --> 00:09:18,760
everything is within the same scope just

00:09:16,089 --> 00:09:24,680
allows you to group your tests together

00:09:18,760 --> 00:09:26,390
in a certain way it it is the test it's

00:09:24,680 --> 00:09:28,520
how we decide this is a test we give it

00:09:26,390 --> 00:09:31,649
a title but I clearly brace on the same

00:09:28,520 --> 00:09:37,170
name on the same line and then we say

00:09:31,649 --> 00:09:39,420
what I found pipe sign should be what I

00:09:37,170 --> 00:09:41,399
expected or should not be what I

00:09:39,420 --> 00:09:42,180
accepted or should be less than what I

00:09:41,399 --> 00:09:45,660
expected

00:09:42,180 --> 00:09:50,189
whichever way round it needs to be

00:09:45,660 --> 00:09:56,790
that's pester and the results look like

00:09:50,189 --> 00:09:59,160
that Green is good red is bad if we do

00:09:56,790 --> 00:10:02,879
an environmental validation we're doing

00:09:59,160 --> 00:10:04,649
TDD Green is good red right that's also

00:10:02,879 --> 00:10:07,139
good because it proves we've written a

00:10:04,649 --> 00:10:10,670
good test we've made sure it fails

00:10:07,139 --> 00:10:14,459
before we've written our code to pass it

00:10:10,670 --> 00:10:17,550
and this gift doesn't stop looping like

00:10:14,459 --> 00:10:19,649
I thought he did but you can see that

00:10:17,550 --> 00:10:23,360
you get some results you get a skip test

00:10:19,649 --> 00:10:23,360
and it will tell you where things fail

00:10:23,480 --> 00:10:28,740
environmental validation absolutely

00:10:25,649 --> 00:10:31,350
brilliant we will talk about that after

00:10:28,740 --> 00:10:35,009
the pizza free editor allows you to work

00:10:31,350 --> 00:10:40,620
in all sorts of languages so you can

00:10:35,009 --> 00:10:42,899
work in any of these and alter

00:10:40,620 --> 00:10:44,730
formatting intellisense all the rest of

00:10:42,899 --> 00:10:47,220
it you can add extensions you can do all

00:10:44,730 --> 00:10:50,730
sorts of funky stuff and the play with

00:10:47,220 --> 00:10:53,009
docker is your containers you want to do

00:10:50,730 --> 00:10:54,569
some of the get lends blame stuff all

00:10:53,009 --> 00:10:58,350
available to you within Visual Studio

00:10:54,569 --> 00:11:00,980
code it is the editor that you should be

00:10:58,350 --> 00:11:04,679
using for doing any powershell and

00:11:00,980 --> 00:11:07,259
creation one because it's nice and easy

00:11:04,679 --> 00:11:09,990
to use and you can create as many tabs

00:11:07,259 --> 00:11:13,009
as you need to you just keep building

00:11:09,990 --> 00:11:17,370
new stuff it's got brilliant debugging

00:11:13,009 --> 00:11:20,160
process and because there is no more

00:11:17,370 --> 00:11:22,019
development for the ISE to the old

00:11:20,160 --> 00:11:24,629
believe where the bottom and white at

00:11:22,019 --> 00:11:26,370
the top that you would expect that will

00:11:24,629 --> 00:11:28,649
no longer be developed it will still be

00:11:26,370 --> 00:11:30,809
available but it's not gonna be in any

00:11:28,649 --> 00:11:33,319
development whereas this gets updated

00:11:30,809 --> 00:11:33,319
every one

00:11:35,140 --> 00:11:42,290
so if we did a list available and have a

00:11:39,470 --> 00:11:44,060
look at all of the available variations

00:11:42,290 --> 00:11:45,890
of pressure that we've got three point

00:11:44,060 --> 00:11:48,350
4.0 that'll be the one that you've

00:11:45,890 --> 00:11:49,880
probably got in your machine I'll be the

00:11:48,350 --> 00:11:52,310
one that was delivered with you all

00:11:49,880 --> 00:11:54,529
Windows operating system and as you see

00:11:52,310 --> 00:11:57,320
I've updated mine at several times at

00:11:54,529 --> 00:11:59,209
the moment 4.1.1 is the latest available

00:11:57,320 --> 00:12:01,700
release and we'll also have a look at

00:11:59,209 --> 00:12:05,270
some of the pre-release what week to

00:12:01,700 --> 00:12:07,160
version as well so when we're just

00:12:05,270 --> 00:12:09,500
working on a single command we're going

00:12:07,160 --> 00:12:12,680
to start by just running the command new

00:12:09,500 --> 00:12:14,690
fixture and what new fixture does with

00:12:12,680 --> 00:12:17,450
the name that matches the command name

00:12:14,690 --> 00:12:21,070
that we're going to make is creates as

00:12:17,450 --> 00:12:23,630
two files the crater's file with our

00:12:21,070 --> 00:12:35,300
command in it and a file with our tests

00:12:23,630 --> 00:12:39,680
in it and what we'll do now is so what I

00:12:35,300 --> 00:12:46,040
was doing when you came in was setting

00:12:39,680 --> 00:12:47,930
up my API and unfortunately I managed to

00:12:46,040 --> 00:12:50,209
run out of credit on my usual

00:12:47,930 --> 00:12:51,950
subscription so I tried to set up a

00:12:50,209 --> 00:12:54,340
different one which didn't quite work as

00:12:51,950 --> 00:12:55,589
I expected

00:12:54,340 --> 00:12:59,970
[Music]

00:12:55,589 --> 00:12:59,970
otherwise this would all be ready so

00:13:01,949 --> 00:13:07,689
spit thank you

00:13:04,230 --> 00:13:09,069
on the left we have our function this is

00:13:07,689 --> 00:13:09,670
what's been created for us by new

00:13:09,069 --> 00:13:12,610
fixture

00:13:09,670 --> 00:13:14,139
it says function gets bigger beard and

00:13:12,610 --> 00:13:17,949
curly braces that's it's done on the

00:13:14,139 --> 00:13:22,300
right we have this funky start for

00:13:17,949 --> 00:13:24,310
getting the current value of the path

00:13:22,300 --> 00:13:26,589
we're in and the current file that we're

00:13:24,310 --> 00:13:29,250
in and splitting it out and taking away

00:13:26,589 --> 00:13:31,660
the tests so that we've got a name just

00:13:29,250 --> 00:13:41,439
leave it there and it gives us a nice

00:13:31,660 --> 00:13:42,029
quick describe so I described now we can

00:13:41,439 --> 00:13:48,959
run a test

00:13:42,029 --> 00:13:51,009
if we run invoke pester in any folder

00:13:48,959 --> 00:13:54,220
it's going to go through and look for

00:13:51,009 --> 00:13:56,319
any file that ends dot test ps1 with a

00:13:54,220 --> 00:13:58,360
capital T only it's going to seem that

00:13:56,319 --> 00:13:59,879
this pester in there and it's going to

00:13:58,360 --> 00:14:02,379
run the pester and gives you the output

00:13:59,879 --> 00:14:04,600
and as you can see what we've got

00:14:02,379 --> 00:14:06,759
does something useful false true should

00:14:04,600 --> 00:14:10,089
be false we get the read we get a

00:14:06,759 --> 00:14:12,040
failure tells us how long it took to run

00:14:10,089 --> 00:14:17,050
our tests and that we failed this

00:14:12,040 --> 00:14:21,699
perfect we failed a test because we

00:14:17,050 --> 00:14:26,110
haven't written any code yet so let's

00:14:21,699 --> 00:14:28,990
start off by writing some code as if by

00:14:26,110 --> 00:14:32,740
magic over here we've just written some

00:14:28,990 --> 00:14:35,800
code say does my command exist its

00:14:32,740 --> 00:14:39,329
command name exists we're just a get

00:14:35,800 --> 00:14:41,439
command error action silently continue

00:14:39,329 --> 00:14:46,389
this is a PowerShell

00:14:41,439 --> 00:14:49,290
and way of suppressing our errors so we

00:14:46,389 --> 00:14:53,019
don't get our test results completely

00:14:49,290 --> 00:14:56,680
overrun by a sea of red from a failing

00:14:53,019 --> 00:14:59,110
PowerShell command just keep that hidden

00:14:56,680 --> 00:15:03,059
away now then we've got should not be

00:14:59,110 --> 00:15:03,059
null or empty should be something there

00:15:03,290 --> 00:15:09,709
so now if we run off test we've done it

00:15:08,519 --> 00:15:11,310
there we go

00:15:09,709 --> 00:15:14,640
congratulations so you've now learned

00:15:11,310 --> 00:15:17,060
how to do TDD we passed that great a

00:15:14,640 --> 00:15:22,529
test it fails to rent some co2 passes

00:15:17,060 --> 00:15:27,829
pretty much that's it but let's go on a

00:15:22,529 --> 00:15:30,750
little bit in general what I do is

00:15:27,829 --> 00:15:34,290
create myself a set of contexts like

00:15:30,750 --> 00:15:36,480
that so I've got a test for my input I

00:15:34,290 --> 00:15:38,070
got a test for the execution the path my

00:15:36,480 --> 00:15:40,620
tone that they're taking I've got some

00:15:38,070 --> 00:15:42,690
if else's or some switches test where

00:15:40,620 --> 00:15:44,940
they're going to go and test for the

00:15:42,690 --> 00:15:50,850
output probably it's where you gonna put

00:15:44,940 --> 00:15:53,190
mostly tests I'm gay testing get speak a

00:15:50,850 --> 00:15:54,870
bit absolutely yes so this is the

00:15:53,190 --> 00:15:56,459
function that we're testing on the on

00:15:54,870 --> 00:16:02,910
the left and this is our test on the

00:15:56,459 --> 00:16:07,320
right so very well but what is Speaker

00:16:02,910 --> 00:16:12,420
beard going to do so let's get Speaker

00:16:07,320 --> 00:16:15,029
beard is gonna do yeah we've got we've

00:16:12,420 --> 00:16:17,220
got no internet so great we're going to

00:16:15,029 --> 00:16:19,170
use the cognitive services API from

00:16:17,220 --> 00:16:24,120
Microsoft for no other reason than

00:16:19,170 --> 00:16:29,339
because it's fun and also free and we're

00:16:24,120 --> 00:16:32,820
gonna use the faces API to analyze this

00:16:29,339 --> 00:16:34,290
page I'm gonna take each picture from

00:16:32,820 --> 00:16:37,350
this page you're going to analyze it and

00:16:34,290 --> 00:16:42,180
see how good the beer is how much beard

00:16:37,350 --> 00:16:45,000
there is on this page of speakers at an

00:16:42,180 --> 00:16:47,370
event in Portugal last year and I'm sure

00:16:45,000 --> 00:16:49,079
you will agree that there's there's one

00:16:47,370 --> 00:16:54,390
particularly fabulous beard in there

00:16:49,079 --> 00:16:57,290
that I'm particularly proud it's the

00:16:54,390 --> 00:16:57,290
first thing we need to do

00:16:58,700 --> 00:17:03,670
if you wanna run a command that says

00:17:00,640 --> 00:17:08,120
when there is no speaker in the array we

00:17:03,670 --> 00:17:10,400
should get a useful message so we really

00:17:08,120 --> 00:17:14,540
defined that we're going to put an input

00:17:10,400 --> 00:17:16,340
in there and when we put the input in if

00:17:14,540 --> 00:17:18,320
we haven't got something we expect we

00:17:16,340 --> 00:17:21,500
want to get back this particular phrase

00:17:18,320 --> 00:17:23,060
this is what has been decided by the

00:17:21,500 --> 00:17:25,520
focus group so this is the message

00:17:23,060 --> 00:17:28,310
should be given to our users for when we

00:17:25,520 --> 00:17:31,730
have not got a speaker available in our

00:17:28,310 --> 00:17:35,360
comment when we look at our command

00:17:31,730 --> 00:17:39,290
it's literally saying one argot speaker

00:17:35,360 --> 00:17:43,130
beard with a value that I know is not

00:17:39,290 --> 00:17:45,620
available and it should be no speaker

00:17:43,130 --> 00:17:46,850
with a name like that you enter Chris

00:17:45,620 --> 00:17:52,720
who you met that's exactly what we were

00:17:46,850 --> 00:17:52,720
expecting to get nope

00:17:54,690 --> 00:18:07,710
when I run that test fails we write some

00:18:03,539 --> 00:18:11,099
code to fix that test you have a look at

00:18:07,710 --> 00:18:15,570
that very simply gives us as a parameter

00:18:11,099 --> 00:18:16,879
of faces and we've set our face is equal

00:18:15,570 --> 00:18:19,019
to get speaker face

00:18:16,879 --> 00:18:22,609
fortunately the get speaker face

00:18:19,019 --> 00:18:22,609
function isn't going to work for me so

00:18:24,859 --> 00:18:36,210
what I'm going to have to do is actually

00:18:32,909 --> 00:18:39,359
just move on so what I would normally do

00:18:36,210 --> 00:18:42,840
is run this test and the test will call

00:18:39,359 --> 00:18:45,090
get speaker face get speaker face will

00:18:42,840 --> 00:18:47,220
go off to the internet it'll go to the

00:18:45,090 --> 00:18:51,179
web page of T right e get the speaker

00:18:47,220 --> 00:18:55,999
faces down analyze each of them show

00:18:51,179 --> 00:18:55,999
that display what

00:18:57,929 --> 00:19:03,330
analyze all of them put all the results

00:19:00,179 --> 00:19:04,649
into a JSON objective and then get

00:19:03,330 --> 00:19:07,679
Speaker beard is going to make use of

00:19:04,649 --> 00:19:09,059
that JSON objects to decide about

00:19:07,679 --> 00:19:12,179
whether speakers you've got a beard a

00:19:09,059 --> 00:19:14,789
lot now I can't run that right now

00:19:12,179 --> 00:19:15,960
because my a guy is not working my

00:19:14,789 --> 00:19:16,619
Internet's not working everything's

00:19:15,960 --> 00:19:19,289
great

00:19:16,619 --> 00:19:20,789
I normally I'd run the test and then

00:19:19,289 --> 00:19:22,830
turn my wife way off and say we'll look

00:19:20,789 --> 00:19:25,799
I passed the test and then it failed

00:19:22,830 --> 00:19:29,009
because we should only be testing the

00:19:25,799 --> 00:19:32,720
code that we're writing we shall waste

00:19:29,009 --> 00:19:37,580
write our unit test in such a way that

00:19:32,720 --> 00:19:39,059
nothing external affects them at all

00:19:37,580 --> 00:19:42,240
right now

00:19:39,059 --> 00:19:44,100
lack of internet and lack of API means

00:19:42,240 --> 00:19:45,059
that this test is going to fail when

00:19:44,100 --> 00:19:47,249
actually I might have written the code

00:19:45,059 --> 00:19:51,379
that would mean it would pass so we need

00:19:47,249 --> 00:19:56,039
to do a thing called mocking luckily

00:19:51,379 --> 00:19:57,960
I've got some Jason already so I happen

00:19:56,039 --> 00:20:05,490
to have some Jason already this is what

00:19:57,960 --> 00:20:07,879
you get from get speaker face as you can

00:20:05,490 --> 00:20:10,470
see it'll give you the name of the

00:20:07,879 --> 00:20:13,409
person Yap brusse because one of my

00:20:10,470 --> 00:20:15,480
friends he's a dutch powershell MVP

00:20:13,409 --> 00:20:16,619
helped me to write some of this as if

00:20:15,480 --> 00:20:19,799
you see with the particular picture

00:20:16,619 --> 00:20:21,450
these goodies that he's not that you

00:20:19,799 --> 00:20:24,809
can't tell you can't see with a picture

00:20:21,450 --> 00:20:27,299
that he's wearing and he's not wearing

00:20:24,809 --> 00:20:28,470
any makeup so this is this is good we're

00:20:27,299 --> 00:20:30,419
pleased about that

00:20:28,470 --> 00:20:31,799
they did used to come back and resolve

00:20:30,419 --> 00:20:33,690
that he was wearing makeup so a

00:20:31,799 --> 00:20:35,999
different plain-looking and it also

00:20:33,690 --> 00:20:39,679
gives us the URL of the image so we can

00:20:35,999 --> 00:20:39,679
actually grab what what image we've got

00:20:41,629 --> 00:20:48,750
this is exactly that this has been

00:20:44,580 --> 00:20:52,259
picked up from this JSON file here and

00:20:48,750 --> 00:20:55,320
the JSON file is just some Duff data

00:20:52,259 --> 00:20:59,899
that I've created actually straight off

00:20:55,320 --> 00:20:59,899
of there to enable me to mock my command

00:21:05,370 --> 00:21:10,980
and I mock my command with that piece of

00:21:08,640 --> 00:21:14,850
parasol there so I took the value from

00:21:10,980 --> 00:21:17,010
the actual website I converted it to

00:21:14,850 --> 00:21:20,900
Jason we had a depth of five and then we

00:21:17,010 --> 00:21:20,900
just didn't act file to face it so Jason

00:21:21,050 --> 00:21:30,240
and that means that I can lock my code

00:21:27,330 --> 00:21:32,550
like this so now we've added another new

00:21:30,240 --> 00:21:34,170
command to our peso test it's called

00:21:32,550 --> 00:21:34,740
before all I don't need to tell you what

00:21:34,170 --> 00:21:36,720
it does

00:21:34,740 --> 00:21:39,480
runs everything inside the curly braces

00:21:36,720 --> 00:21:41,810
before all of the tests surprisingly

00:21:39,480 --> 00:21:45,690
enough there's one called before each

00:21:41,810 --> 00:21:47,190
domain which will work run all of the

00:21:45,690 --> 00:21:49,380
code within the curly braces before each

00:21:47,190 --> 00:21:52,400
of the tests there's also an after all

00:21:49,380 --> 00:21:57,300
hand and after each to enable you to

00:21:52,400 --> 00:22:01,950
create and destroy whatever things you

00:21:57,300 --> 00:22:04,860
need for your tests all within the scope

00:22:01,950 --> 00:22:07,740
of this context block if we put the

00:22:04,860 --> 00:22:10,110
before all up here the describe level

00:22:07,740 --> 00:22:12,060
then we run for every single context bot

00:22:10,110 --> 00:22:14,400
that we've got sorry every single eight

00:22:12,060 --> 00:22:19,560
block that we got within that described

00:22:14,400 --> 00:22:23,580
block what we say is set me the variable

00:22:19,560 --> 00:22:27,750
Mach face to the content of the faces

00:22:23,580 --> 00:22:29,340
JSON file with a little bit of that to

00:22:27,750 --> 00:22:33,720
make PowerShell understand that this is

00:22:29,340 --> 00:22:36,990
a JSON object and then we say look get

00:22:33,720 --> 00:22:40,020
speaker speaker face with whatever is

00:22:36,990 --> 00:22:42,240
inside the curly brace basically when

00:22:40,020 --> 00:22:46,380
you're running this test every time you

00:22:42,240 --> 00:22:48,990
see get speaker face don't go and load

00:22:46,380 --> 00:22:51,090
the function go off to the internet grab

00:22:48,990 --> 00:22:52,920
the page bring it down analyze it with

00:22:51,090 --> 00:22:57,120
cognitive faces API and then give me a

00:22:52,920 --> 00:22:59,300
JSON object just give me this and you

00:22:57,120 --> 00:23:04,380
can fill that with whatever you like

00:22:59,300 --> 00:23:05,790
only that means that I can run this

00:23:04,380 --> 00:23:08,000
command

00:23:05,790 --> 00:23:10,170
it's going to go to get Speaker beard

00:23:08,000 --> 00:23:13,380
it's going to fill in the speaker from

00:23:10,170 --> 00:23:16,550
the parameters that we set and it's

00:23:13,380 --> 00:23:19,200
going to set faces to get Speaker face

00:23:16,550 --> 00:23:20,850
and then go hang on a minute I don't

00:23:19,200 --> 00:23:31,170
need to do all that rubbish I'll just

00:23:20,850 --> 00:23:31,860
use this mock staring run test test

00:23:31,170 --> 00:23:39,630
passes

00:23:31,860 --> 00:23:42,050
everybody knows wall as well you cannot

00:23:39,630 --> 00:23:46,800
have a context without a context

00:23:42,050 --> 00:23:48,060
no not it you could you can have as many

00:23:46,800 --> 00:23:49,860
contexts as you like with another

00:23:48,060 --> 00:23:51,960
describe have as many describes as you

00:23:49,860 --> 00:23:58,170
like within a file but each of those are

00:23:51,960 --> 00:24:05,670
going to be their own steps so that's

00:23:58,170 --> 00:24:08,610
right another test and this test is now

00:24:05,670 --> 00:24:10,530
going to be in the end it should return

00:24:08,610 --> 00:24:12,450
the beard value for the speaker so we

00:24:10,530 --> 00:24:16,940
know that Yap brasses bid value is not

00:24:12,450 --> 00:24:21,950
point to because we created it in Jason

00:24:16,940 --> 00:24:24,450
and when we run when we run our pester

00:24:21,950 --> 00:24:28,080
fails because we haven't got any values

00:24:24,450 --> 00:24:32,340
we've got no code there to fix that so

00:24:28,080 --> 00:24:37,710
as usual we're going to write the code

00:24:32,340 --> 00:24:43,800
to fix our test say if we have got

00:24:37,710 --> 00:24:47,480
something just do the phases where grab

00:24:43,800 --> 00:24:47,480
me that property out of the Jason please

00:24:52,289 --> 00:24:57,490
and we just keep adding ourselves

00:24:54,970 --> 00:25:03,370
further and further things within this

00:24:57,490 --> 00:25:12,519
as we go forward so we can make sure

00:25:03,370 --> 00:25:15,399
that we've got a speaker name and a

00:25:12,519 --> 00:25:18,009
beard value and a URL if we provide the

00:25:15,399 --> 00:25:19,779
detailed parameter so if we add that

00:25:18,009 --> 00:25:25,029
switch we definitely should have all of

00:25:19,779 --> 00:25:27,279
these three things now this is wrong you

00:25:25,029 --> 00:25:33,909
should only test one thing and one thing

00:25:27,279 --> 00:25:35,919
only each time okay you can write three

00:25:33,909 --> 00:25:39,249
of those tests and test the name and the

00:25:35,919 --> 00:25:41,799
beard and the image URL but actually my

00:25:39,249 --> 00:25:43,899
argument would be this is right because

00:25:41,799 --> 00:25:47,409
if I've got a detail I want all of those

00:25:43,899 --> 00:25:48,940
things actually it doesn't matter as

00:25:47,409 --> 00:25:51,580
long as you make sure you do what is

00:25:48,940 --> 00:25:59,679
right for you it's fine

00:25:51,580 --> 00:26:02,110
pesto can do more than one test within a

00:25:59,679 --> 00:26:03,669
net block whether it should or should

00:26:02,110 --> 00:26:08,100
not is a religious argument that other

00:26:03,669 --> 00:26:08,100
people would have yes

00:26:10,769 --> 00:26:21,970
Hey so the thing about this is within

00:26:16,840 --> 00:26:24,309
this it block everything should be the

00:26:21,970 --> 00:26:28,539
right value so he takes one of these to

00:26:24,309 --> 00:26:30,009
fail and if one of them fails he'll come

00:26:28,539 --> 00:26:33,100
back and say I was expecting naught

00:26:30,009 --> 00:26:34,960
point too but I got a hundred right so

00:26:33,100 --> 00:26:38,529
you'll know where you are if two of them

00:26:34,960 --> 00:26:42,009
fail you'd get I was expecting 0.2 but

00:26:38,529 --> 00:26:43,450
it should have been 100 you won't know

00:26:42,009 --> 00:26:51,039
which one of the other two it is that's

00:26:43,450 --> 00:26:57,549
fail and we carry on we write some code

00:26:51,039 --> 00:27:04,029
to pass our test run our code test

00:26:57,549 --> 00:27:06,309
passes so now our code has if we've got

00:27:04,029 --> 00:27:10,269
a detail then do this otherwise just do

00:27:06,309 --> 00:27:11,320
that a bit of an expression just to make

00:27:10,269 --> 00:27:18,249
sure we've got everything that we

00:27:11,320 --> 00:27:21,279
expected if we want to open our URL we

00:27:18,249 --> 00:27:22,480
could just have a show image switch and

00:27:21,279 --> 00:27:25,509
that's just going to start a start

00:27:22,480 --> 00:27:28,269
process and this is pretty much just to

00:27:25,509 --> 00:27:31,149
say that you can mock powershell

00:27:28,269 --> 00:27:32,710
embedded commands as well as your own

00:27:31,149 --> 00:27:37,450
functions that you've written for

00:27:32,710 --> 00:27:42,779
yourself so doesn't matter what it is if

00:27:37,450 --> 00:27:46,210
you mock it pester will return the mop

00:27:42,779 --> 00:27:50,590
just don't try walking invoke pesto

00:27:46,210 --> 00:27:53,169
because then it really gets us sorry in

00:27:50,590 --> 00:27:58,350
a twizzle so we'll write ourselves a

00:27:53,169 --> 00:27:58,350
test to make sure that we've got

00:28:02,510 --> 00:28:11,700
everything Rulon taught me what we're

00:28:08,460 --> 00:28:14,760
doing oh yes we're doing we're making

00:28:11,700 --> 00:28:18,900
sure that our code follows a certain

00:28:14,760 --> 00:28:24,330
path and if we have chosen to get our

00:28:18,900 --> 00:28:27,680
image URL we want to make sure that

00:28:24,330 --> 00:28:29,850
we're going to use our showing me switch

00:28:27,680 --> 00:28:30,990
so this time we're going to we know what

00:28:29,850 --> 00:28:32,190
the value is going to be Valley is going

00:28:30,990 --> 00:28:35,120
to be nought point two that's what's

00:28:32,190 --> 00:28:37,740
going to be returned from our function

00:28:35,120 --> 00:28:40,680
we're not going to test that we get an

00:28:37,740 --> 00:28:44,010
actual image we're testing the return in

00:28:40,680 --> 00:28:45,720
the console from our function so even

00:28:44,010 --> 00:28:48,000
though we've put the show image switch

00:28:45,720 --> 00:28:49,950
in what will be displayed on the screen

00:28:48,000 --> 00:28:54,330
will only be the output from the command

00:28:49,950 --> 00:28:56,130
that's what we test that we're gonna

00:28:54,330 --> 00:28:59,460
check that if we use the detailed switch

00:28:56,130 --> 00:29:01,610
as well as the show image switch that

00:28:59,460 --> 00:29:03,270
we're gonna get those three values again

00:29:01,610 --> 00:29:04,800
and now we're going to come up with

00:29:03,270 --> 00:29:08,490
something else it's all very well

00:29:04,800 --> 00:29:10,200
mocking your commands but you need to

00:29:08,490 --> 00:29:14,370
make sure that they have actually been

00:29:10,200 --> 00:29:16,080
locked or if by mocking the command

00:29:14,370 --> 00:29:17,640
you're actually taking away some of the

00:29:16,080 --> 00:29:20,130
functionality and you're no longer

00:29:17,640 --> 00:29:21,450
giving an output that you expect you

00:29:20,130 --> 00:29:23,580
need to make sure that you're testing

00:29:21,450 --> 00:29:25,980
that you're calling that comment and

00:29:23,580 --> 00:29:29,250
that's where we use assert mock calls

00:29:25,980 --> 00:29:31,410
this is called splatting your parameters

00:29:29,250 --> 00:29:33,030
it's just a power shell way of

00:29:31,410 --> 00:29:35,820
displaying all your parameters up ahead

00:29:33,030 --> 00:29:38,070
of time so you don't end up with -

00:29:35,820 --> 00:29:39,720
command name - x that's exactly -

00:29:38,070 --> 00:29:43,710
precise because that makes it really

00:29:39,720 --> 00:29:46,110
difficult for people to change things so

00:29:43,710 --> 00:29:49,770
we're just gonna say I want you to check

00:29:46,110 --> 00:29:51,060
the mock forget speaker face it's only

00:29:49,770 --> 00:29:52,290
checking the mock it's not if you

00:29:51,060 --> 00:29:53,220
haven't mocked the command it's not

00:29:52,290 --> 00:29:55,710
gonna work in fact it's going to come

00:29:53,220 --> 00:30:00,080
back and say no I don't have a mock for

00:29:55,710 --> 00:30:06,390
that command how many times well I know

00:30:00,080 --> 00:30:09,150
that because I've run two commands

00:30:06,390 --> 00:30:11,419
within this particular scope I'm gonna

00:30:09,150 --> 00:30:14,669
have called get speaker face twice

00:30:11,419 --> 00:30:17,640
exactly twice if you don't put the

00:30:14,669 --> 00:30:20,760
exactly in it we'll just go I need to

00:30:17,640 --> 00:30:22,950
have two I could have 202 but as long as

00:30:20,760 --> 00:30:25,559
I got two we passed we're gonna have run

00:30:22,950 --> 00:30:26,880
against Speaker beard once there and

00:30:25,559 --> 00:30:30,510
we're gonna have run against speak

00:30:26,880 --> 00:30:34,860
appeared once there and I could put

00:30:30,510 --> 00:30:37,070
those down here doesn't matter this is

00:30:34,860 --> 00:30:43,830
going to check the scope of that context

00:30:37,070 --> 00:30:46,860
unless I add it there if I put it equals

00:30:43,830 --> 00:30:49,559
true then it's only going to check

00:30:46,860 --> 00:30:54,320
within the context of this particular it

00:30:49,559 --> 00:30:54,320
block make sense

00:30:59,570 --> 00:31:06,330
and if we run our tests we expected it

00:31:05,160 --> 00:31:11,490
to be called twice but it was called

00:31:06,330 --> 00:31:16,070
zero times excellent you notice that the

00:31:11,490 --> 00:31:16,070
other ones are actually lying to us

00:31:16,280 --> 00:31:23,930
because this test and this test was

00:31:21,000 --> 00:31:26,460
checking the output of the command and

00:31:23,930 --> 00:31:28,620
the output of the command we worried to

00:31:26,460 --> 00:31:30,060
written the code for so we've already

00:31:28,620 --> 00:31:33,300
written the code to give us a speaker

00:31:30,060 --> 00:31:35,250
beard and the name and the URL of the

00:31:33,300 --> 00:31:41,760
image that's all coming out with these

00:31:35,250 --> 00:31:50,640
ones the start process to give us the

00:31:41,760 --> 00:31:54,960
image URL is where we failed if we want

00:31:50,640 --> 00:32:01,100
to write we win some code and fix the

00:31:54,960 --> 00:32:04,610
test that's a look okay all right and

00:32:01,100 --> 00:32:04,610
here's the code we've written

00:32:08,480 --> 00:32:14,640
basically we've got a show image start

00:32:12,030 --> 00:32:17,780
as a process grab as that image or our

00:32:14,640 --> 00:32:20,190
lights of our JSON object and away we go

00:32:17,780 --> 00:32:22,140
all of this was already written so

00:32:20,190 --> 00:32:25,070
that's why those first three tests will

00:32:22,140 --> 00:32:28,350
still passing there's something to keep

00:32:25,070 --> 00:32:31,350
your head around always know what is

00:32:28,350 --> 00:32:36,390
going to make your test fail as well as

00:32:31,350 --> 00:32:41,010
what's going to make it pass if we want

00:32:36,390 --> 00:32:47,370
it to rank our bits if we wanted to make

00:32:41,010 --> 00:32:50,820
sure that the top beards and the bottom

00:32:47,370 --> 00:32:53,660
beards were ranked in a certain way we

00:32:50,820 --> 00:32:55,860
can grab the top one or the top five

00:32:53,660 --> 00:33:01,050
expected to get a one we didn't get

00:32:55,860 --> 00:33:07,230
anything we write some code we'll pass

00:33:01,050 --> 00:33:10,260
that test where do we do this time this

00:33:07,230 --> 00:33:12,600
time we just did account and I can't is

00:33:10,260 --> 00:33:17,010
of the number of objects that we come

00:33:12,600 --> 00:33:21,930
back we've named mocking we're now

00:33:17,010 --> 00:33:24,390
calling get speaker faces mock 1 2 3 4 5

00:33:21,930 --> 00:33:26,850
6 times now so we need to check that

00:33:24,390 --> 00:33:32,010
we're grabbing those mocks every single

00:33:26,850 --> 00:33:36,510
time everything screaming so now we've

00:33:32,010 --> 00:33:39,240
written all of our tests to gather all

00:33:36,510 --> 00:33:42,390
the information about these beards on

00:33:39,240 --> 00:33:45,480
this page well we've written the tests

00:33:42,390 --> 00:33:47,460
and the code to pass exactly what it is

00:33:45,480 --> 00:33:49,710
that the focus group says that we should

00:33:47,460 --> 00:33:51,690
do the requirements for our project a

00:33:49,710 --> 00:33:54,450
business analyst has spent many many

00:33:51,690 --> 00:33:56,280
hours and days building as an excel

00:33:54,450 --> 00:33:57,900
sheet to make sure that we have all of

00:33:56,280 --> 00:34:02,790
this information so that we can write

00:33:57,900 --> 00:34:05,600
this particular piece of code so now

00:34:02,790 --> 00:34:07,710
we're done now you just throw it away

00:34:05,600 --> 00:34:09,700
hand it over great excellent

00:34:07,710 --> 00:34:14,210
everything's groovy

00:34:09,700 --> 00:34:16,910
you could fully test pass I'd argue

00:34:14,210 --> 00:34:23,510
shipment because you haven't done some

00:34:16,910 --> 00:34:26,960
other things first of those things is

00:34:23,510 --> 00:34:30,850
you haven't made sure that your code is

00:34:26,960 --> 00:34:35,930
following good practice do to practice

00:34:30,850 --> 00:34:39,380
good practice defined by the PS Script

00:34:35,930 --> 00:34:41,630
analyzer module which comes down and

00:34:39,380 --> 00:34:45,290
Microsoft it is the way of making sure

00:34:41,630 --> 00:34:50,080
that everything is as we should do so PS

00:34:45,290 --> 00:34:55,310
use single announced it has been decided

00:34:50,080 --> 00:34:59,990
by them the parish shell should only

00:34:55,310 --> 00:35:03,710
have singular nouns which means that

00:34:59,990 --> 00:35:09,520
when I connect to a sequel server and I

00:35:03,710 --> 00:35:17,510
do get - sequel database I can get back

00:35:09,520 --> 00:35:17,990
360 databases which annoys me but them's

00:35:17,510 --> 00:35:20,180
the rules

00:35:17,990 --> 00:35:22,370
everybody should follow those rules we

00:35:20,180 --> 00:35:24,440
have a test visuals there's a lot of

00:35:22,370 --> 00:35:25,910
other good rules in there as you can see

00:35:24,440 --> 00:35:27,620
there's 50 rules there at the moment

00:35:25,910 --> 00:35:29,510
there's going to be a lot more coming

00:35:27,620 --> 00:35:34,160
through with with new partial core as

00:35:29,510 --> 00:35:37,970
well and also as you can see I haven't

00:35:34,160 --> 00:35:39,800
actually um passed for these since this

00:35:37,970 --> 00:35:41,780
passes the PS Script analyzer rule

00:35:39,800 --> 00:35:46,160
number one PS avoid using command

00:35:41,780 --> 00:35:49,330
addresses do not use aliases encode that

00:35:46,160 --> 00:35:53,330
you share with other people

00:35:49,330 --> 00:35:55,900
remember this beard and imagine how

00:35:53,330 --> 00:36:01,580
frustrated he was seven years ago

00:35:55,900 --> 00:36:04,370
searching google for % parish l % parish

00:36:01,580 --> 00:36:08,930
l % in double quotes parish l % of

00:36:04,370 --> 00:36:17,850
single quotes parish l % parish l what

00:36:08,930 --> 00:36:23,770
the % me % is it alias for where object

00:36:17,850 --> 00:36:26,680
nope percent is an alias for for each

00:36:23,770 --> 00:36:28,540
object question mark is an alias for

00:36:26,680 --> 00:36:35,500
where object that one I might have got

00:36:28,540 --> 00:36:38,290
but I drove myself absolutely 100% batty

00:36:35,500 --> 00:36:46,060
trying to work out how to use my Google

00:36:38,290 --> 00:36:49,270
foo to find what this meant please don't

00:36:46,060 --> 00:36:53,590
use aliases in code that you share with

00:36:49,270 --> 00:36:55,270
other people all the time use aliases on

00:36:53,590 --> 00:36:57,250
the command line to save yourself from

00:36:55,270 --> 00:37:01,360
typing things absolutely every single

00:36:57,250 --> 00:37:03,130
time but remember write your code like

00:37:01,360 --> 00:37:04,960
there's an axe-wielding psychopathic

00:37:03,130 --> 00:37:06,790
maniac who knows where you live he's

00:37:04,960 --> 00:37:08,560
going to be the guy in the job next

00:37:06,790 --> 00:37:10,960
after you nobody's gone

00:37:08,560 --> 00:37:12,700
hang on a minute where's the problem

00:37:10,960 --> 00:37:14,530
here we don't really know we could just

00:37:12,700 --> 00:37:17,200
see we're expected to get zero but we

00:37:14,530 --> 00:37:23,250
got two not really telling is a great

00:37:17,200 --> 00:37:23,250
lot we failed the test script analyzer

00:37:24,360 --> 00:37:34,240
said of typing it on a high amenity

00:37:29,130 --> 00:37:36,820
script analyzer you just do an invoke

00:37:34,240 --> 00:37:41,590
script analyzer you pass it the path of

00:37:36,820 --> 00:37:43,240
the script that you're analyzing and

00:37:41,590 --> 00:37:46,150
it'll helpfully tell you much more

00:37:43,240 --> 00:37:47,800
information about this you'll say avoid

00:37:46,150 --> 00:37:49,900
using commander aliases so they were two

00:37:47,800 --> 00:37:51,610
of them both the same a severity of

00:37:49,900 --> 00:37:53,820
warnings it's not bad enough to really

00:37:51,610 --> 00:37:56,140
break stuff but you should take notice

00:37:53,820 --> 00:37:58,660
it's in this script

00:37:56,140 --> 00:38:00,040
get Speaker beard doc ps1 so you can run

00:37:58,660 --> 00:38:02,860
this against the whole folder if you

00:38:00,040 --> 00:38:05,200
want to hi and it's on line 27 and line

00:38:02,860 --> 00:38:07,570
36 and it says select is an alias of

00:38:05,200 --> 00:38:10,000
select object don't use aliases because

00:38:07,570 --> 00:38:15,370
the beard gets really cross bonnet well

00:38:10,000 --> 00:38:21,190
that's where should so now if you're

00:38:15,370 --> 00:38:23,290
using BS code you would already notice

00:38:21,190 --> 00:38:27,460
that you've got a little green scaly

00:38:23,290 --> 00:38:28,589
line under your select and your little

00:38:27,460 --> 00:38:31,430
light bulb

00:38:28,589 --> 00:38:33,839
and the light bulb comes along and says

00:38:31,430 --> 00:38:36,529
yeah I do to replace you select the

00:38:33,839 --> 00:38:39,180
select object fix everything

00:38:36,529 --> 00:38:40,589
so hopefully use EVs code means you

00:38:39,180 --> 00:38:43,589
don't you won't fall into that

00:38:40,589 --> 00:38:47,849
particular trap but not every single one

00:38:43,589 --> 00:38:50,309
of the BS code of the script analyzer

00:38:47,849 --> 00:38:52,819
rules is going to be picked up by PS

00:38:50,309 --> 00:38:56,910
code you don't even have to think about

00:38:52,819 --> 00:38:58,859
testing writing your tests for analyzing

00:38:56,910 --> 00:39:00,019
your partial scripts because somebody's

00:38:58,859 --> 00:39:02,309
already done it for us

00:39:00,019 --> 00:39:03,959
wasn't me somebody else did this and

00:39:02,309 --> 00:39:07,650
I've just stolen it I've made use of it

00:39:03,959 --> 00:39:09,479
and there it is one piece of context

00:39:07,650 --> 00:39:11,969
code that you can just pick in and push

00:39:09,479 --> 00:39:15,329
through to anything and I make use of

00:39:11,969 --> 00:39:17,609
this I use a module called plaster so

00:39:15,329 --> 00:39:21,539
whenever I create a new module when I'm

00:39:17,609 --> 00:39:23,309
working I just invoke plaster it creates

00:39:21,539 --> 00:39:26,969
me all the framework that I need

00:39:23,309 --> 00:39:28,650
including all the tests the fake team

00:39:26,969 --> 00:39:30,839
the ordinary tests all the commands I'm

00:39:28,650 --> 00:39:32,969
gonna run one of those is the script

00:39:30,839 --> 00:39:34,439
analyzer works if I can quickly run

00:39:32,969 --> 00:39:35,819
those through without even thinking

00:39:34,439 --> 00:39:37,679
about it don't even have to write any

00:39:35,819 --> 00:39:42,509
you pretty much all right things for

00:39:37,679 --> 00:39:44,969
other people yeah so you've written a

00:39:42,509 --> 00:39:47,219
thing for another person or another

00:39:44,969 --> 00:39:52,499
group of people and after a while

00:39:47,219 --> 00:39:53,849
somebody comes back and says Sam the the

00:39:52,499 --> 00:39:58,969
thing you wrote it's not working doesn't

00:39:53,849 --> 00:40:00,900
do this got an arrow you get that yeah

00:39:58,969 --> 00:40:04,019
so when they phoned me up and they say

00:40:00,900 --> 00:40:05,459
Rob that module II wrote this function

00:40:04,019 --> 00:40:08,219
gets speaker beard I'm getting this

00:40:05,459 --> 00:40:14,849
error I say have you one get help get

00:40:08,219 --> 00:40:17,039
speak a bit they say no I say okay maybe

00:40:14,849 --> 00:40:22,069
I go well run get help get speak a bit

00:40:17,039 --> 00:40:26,459
and then put it up the point is don't

00:40:22,069 --> 00:40:30,179
create yourself as the support for your

00:40:26,459 --> 00:40:32,900
own code especially with your PowerShell

00:40:30,179 --> 00:40:37,619
code PowerShell has this brilliant

00:40:32,900 --> 00:40:40,289
ability to grab the help for your code

00:40:37,619 --> 00:40:41,920
and display it to the user and all they

00:40:40,289 --> 00:40:51,150
have to do is type get -

00:40:41,920 --> 00:40:51,150
I'm the name of the command so actually

00:40:52,410 --> 00:40:57,400
make sure we've passed that test there's

00:40:55,720 --> 00:41:00,150
a pest test that has been written for

00:40:57,400 --> 00:41:03,010
this if we want to have a look at it

00:41:00,150 --> 00:41:04,480
here it is genius to work for Microsoft

00:41:03,010 --> 00:41:06,520
in the paschal team

00:41:04,480 --> 00:41:07,870
if you've opened partial version 3 you

00:41:06,520 --> 00:41:09,970
have read some of the words that she's

00:41:07,870 --> 00:41:12,850
written because she was one of the

00:41:09,970 --> 00:41:14,800
people that wrote the help for Parrish

00:41:12,850 --> 00:41:16,120
show version three and four then she

00:41:14,800 --> 00:41:19,840
went to work for sapien now she's

00:41:16,120 --> 00:41:23,170
working for AWS and she is amazing

00:41:19,840 --> 00:41:25,630
awesome lady and she's written this peso

00:41:23,170 --> 00:41:29,430
test for us so now we don't even have to

00:41:25,630 --> 00:41:33,070
think about whether we have created our

00:41:29,430 --> 00:41:34,150
help in the right way we can just run

00:41:33,070 --> 00:41:34,870
this test and make sure that

00:41:34,150 --> 00:41:40,450
everything's there

00:41:34,870 --> 00:41:41,560
I wrote eight modules for the place

00:41:40,450 --> 00:41:41,920
where I'm currently working at the

00:41:41,560 --> 00:41:44,200
moment

00:41:41,920 --> 00:41:47,260
each one's got a couple of dozen

00:41:44,200 --> 00:41:50,980
commands in I'm running this for every

00:41:47,260 --> 00:41:55,540
single command I'm starting to get a lot

00:41:50,980 --> 00:41:58,510
of green and some red and what happens

00:41:55,540 --> 00:42:01,300
is you see this flash past Green Green

00:41:58,510 --> 00:42:04,030
Green Green Green Green Green Green

00:42:01,300 --> 00:42:08,080
Green Green Green gets the bottom it

00:42:04,030 --> 00:42:10,320
says summary six thousand seven hundred

00:42:08,080 --> 00:42:12,040
eighty two tests pass three failed

00:42:10,320 --> 00:42:15,790
alright okay great

00:42:12,040 --> 00:42:18,280
Oh scroll up scroll up scroll up all my

00:42:15,790 --> 00:42:20,620
fingers gates or page up page up page up

00:42:18,280 --> 00:42:26,020
page up bar exception now to memory

00:42:20,620 --> 00:42:27,130
error ah so I know I failed to test site

00:42:26,020 --> 00:42:29,350
of six thousand seven hundred and

00:42:27,130 --> 00:42:34,180
whatever it was but I can't see any

00:42:29,350 --> 00:42:35,850
information about me invoke pester has

00:42:34,180 --> 00:42:40,860
got a parameter called

00:42:35,850 --> 00:42:40,860
show which is not even being shown

00:42:42,220 --> 00:42:51,350
got parameter called show and show is

00:42:46,790 --> 00:42:55,330
merely the output of the tests results

00:42:51,350 --> 00:42:59,570
to screen it's not the tests themselves

00:42:55,330 --> 00:43:06,110
it is just the results that come to the

00:42:59,570 --> 00:43:09,680
screen so we can run a test with a show

00:43:06,110 --> 00:43:12,710
summary is running well we get is 92

00:43:09,680 --> 00:43:21,080
passed in one file for most uses it but

00:43:12,710 --> 00:43:28,700
it shows us what we can do if we do we

00:43:21,080 --> 00:43:29,140
do failed up okay hey old it's pretty

00:43:28,700 --> 00:43:31,310
good

00:43:29,140 --> 00:43:34,190
get this example help them get to be

00:43:31,310 --> 00:43:42,260
kabir to expected the value to not be

00:43:34,190 --> 00:43:44,960
empty now if I've got eight modules and

00:43:42,260 --> 00:43:47,530
I've got a hundred commands and maybe in

00:43:44,960 --> 00:43:50,810
seven of those I've got something like

00:43:47,530 --> 00:43:54,170
server names should be always in little

00:43:50,810 --> 00:43:56,740
letters and it fails on one of them how

00:43:54,170 --> 00:44:02,650
do I know which one it is

00:43:56,740 --> 00:44:05,840
so I say don't you failed you failed

00:44:02,650 --> 00:44:09,830
because what fails does is it gives you

00:44:05,840 --> 00:44:12,080
the describe and the context and if

00:44:09,830 --> 00:44:14,570
there is a failure it puts it in the

00:44:12,080 --> 00:44:18,440
right place makes it much easier for you

00:44:14,570 --> 00:44:25,660
to find out that everything is in the

00:44:18,440 --> 00:44:25,660
right place this right I'll help files

00:44:26,930 --> 00:44:35,820
we've passed our test oops

00:44:30,560 --> 00:44:38,400
you've shown off our get lens you'll run

00:44:35,820 --> 00:44:42,359
all of those tests expected value not to

00:44:38,400 --> 00:44:44,190
be acting right okay it's obviously

00:44:42,359 --> 00:44:50,430
because I didn't write the right bit of

00:44:44,190 --> 00:44:54,630
code test ran everything passes the

00:44:50,430 --> 00:44:57,090
other advantage to the show we said that

00:44:54,630 --> 00:44:58,619
ran into point seven six seconds whereas

00:44:57,090 --> 00:45:02,340
when we displayed all of the output

00:44:58,619 --> 00:45:04,890
ekran' about twenty seconds so when you

00:45:02,340 --> 00:45:06,950
are now doing more and more with this

00:45:04,890 --> 00:45:09,180
and you're writing more and more tests

00:45:06,950 --> 00:45:10,890
actually we don't care about what comes

00:45:09,180 --> 00:45:18,480
out and screen we just want the results

00:45:10,890 --> 00:45:21,510
the object we load on module that's

00:45:18,480 --> 00:45:23,330
sorry load off function now we can make

00:45:21,510 --> 00:45:26,730
sure that our users can help themselves

00:45:23,330 --> 00:45:29,460
there we go get Speaker beard ranking

00:45:26,730 --> 00:45:32,609
from the T variety website helpfully

00:45:29,460 --> 00:45:35,220
tells us that hopefully tells us that if

00:45:32,609 --> 00:45:37,440
we do a dash detailed we can get some

00:45:35,220 --> 00:45:39,599
more information including all of the

00:45:37,440 --> 00:45:42,210
examples always write as many examples

00:45:39,599 --> 00:45:43,740
as you can with as many parameters and

00:45:42,210 --> 00:45:46,470
many switches just to make sure that it

00:45:43,740 --> 00:45:53,970
really gives you give your user all the

00:45:46,470 --> 00:45:56,880
information so because we don't need to

00:45:53,970 --> 00:45:59,190
show all of our information at the

00:45:56,880 --> 00:46:03,060
results of our tests onto the screen but

00:45:59,190 --> 00:46:06,380
we might want to make use of them we've

00:46:03,060 --> 00:46:08,760
got an output file and an output format

00:46:06,380 --> 00:46:10,830
so now we can take the results of our

00:46:08,760 --> 00:46:14,880
test even though we're only going to

00:46:10,830 --> 00:46:21,320
show the summary in the header and we

00:46:14,880 --> 00:46:21,320
can put them into

00:46:24,010 --> 00:46:39,700
file what about them

00:46:25,630 --> 00:46:41,440
oh yeah salsa that's a really stupid yes

00:46:39,700 --> 00:46:45,030
I hear I hear that I hear the PISA call

00:46:41,440 --> 00:46:48,099
I am aware of the pizza call

00:46:45,030 --> 00:46:54,670
it's just XML results of all of our

00:46:48,099 --> 00:46:57,339
tests just XML you can see the name see

00:46:54,670 --> 00:47:05,859
how long it took to run see the

00:46:57,339 --> 00:47:09,819
successful result was a success we can

00:47:05,859 --> 00:47:12,490
save them into a variable two more

00:47:09,819 --> 00:47:15,510
things and then it's time for Pisa test

00:47:12,490 --> 00:47:20,790
drive we might want to work with files

00:47:15,510 --> 00:47:24,130
so we can make use of a test drive

00:47:20,790 --> 00:47:26,500
variable which goes to an actual file

00:47:24,130 --> 00:47:29,440
system somewhere in the attempt

00:47:26,500 --> 00:47:31,690
directory which is created and destroyed

00:47:29,440 --> 00:47:35,440
at the beginning of each scope so

00:47:31,690 --> 00:47:37,390
describe context this test drive will be

00:47:35,440 --> 00:47:40,480
created and destroyed enabling these

00:47:37,390 --> 00:47:41,920
create files as and when you need to if

00:47:40,480 --> 00:47:44,980
you need to with any type you know tests

00:47:41,920 --> 00:47:47,760
without affecting anything outside and

00:47:44,980 --> 00:47:47,760
in module scope

00:47:49,970 --> 00:48:00,230
you can use in module scope within your

00:47:52,640 --> 00:48:06,349
peso tests to put your mocks into that

00:48:00,230 --> 00:48:08,390
module rather than into a completely

00:48:06,349 --> 00:48:11,630
different your scope of your entire

00:48:08,390 --> 00:48:14,900
script so you say only if I call this

00:48:11,630 --> 00:48:19,250
mock from within this module that I'm

00:48:14,900 --> 00:48:21,640
writing then call the mock if I call

00:48:19,250 --> 00:48:24,890
this command from outside of this module

00:48:21,640 --> 00:48:26,330
don't call it going you know get child

00:48:24,890 --> 00:48:29,180
biting or whatever it is that we need to

00:48:26,330 --> 00:48:29,930
do if you want to learn a lot about

00:48:29,180 --> 00:48:33,530
pesto

00:48:29,930 --> 00:48:35,680
get the agile delivered pesto book by

00:48:33,530 --> 00:48:40,820
Adam Bertram and there's some details

00:48:35,680 --> 00:48:42,400
Windows PowerShell a shell - please

00:48:40,820 --> 00:48:46,880
don't use to throw it away

00:48:42,400 --> 00:48:48,349
disable it three four five 5.1 those are

00:48:46,880 --> 00:48:49,760
the ones that you're used to looking at

00:48:48,349 --> 00:48:52,190
in the blue screen with the white

00:48:49,760 --> 00:48:54,200
writing or in an ASE what we've been

00:48:52,190 --> 00:48:57,940
seen pretty much all the way through

00:48:54,200 --> 00:49:02,690
that's be partial 5.1 powershell six

00:48:57,940 --> 00:49:07,640
partial core as you can see in vs code I

00:49:02,690 --> 00:49:09,440
can just flip select safe like that

00:49:07,640 --> 00:49:12,310
select my language mode will select

00:49:09,440 --> 00:49:17,839
which language I want choose to have

00:49:12,310 --> 00:49:20,990
parish or call six now you can get a

00:49:17,839 --> 00:49:23,150
pre-release version of any modules on

00:49:20,990 --> 00:49:26,960
the parish or gallery if you have the

00:49:23,150 --> 00:49:29,359
latest parish old get package so in an

00:49:26,960 --> 00:49:31,099
admin session you need to install module

00:49:29,359 --> 00:49:33,170
partial get go to the partial gallery

00:49:31,099 --> 00:49:35,390
gets new patch will get and that list

00:49:33,170 --> 00:49:37,430
all it for you and then you can install

00:49:35,390 --> 00:49:42,310
any module but pester particularly say

00:49:37,430 --> 00:49:46,040
allow pre-release and once you do that

00:49:42,310 --> 00:49:49,070
you can see that you've got partial

00:49:46,040 --> 00:49:51,440
version 4.2 see we've got all of the

00:49:49,070 --> 00:49:53,570
same functions that we had before still

00:49:51,440 --> 00:49:56,180
got a context to describe an eight and a

00:49:53,570 --> 00:50:00,260
shirt but one of the beautiful things

00:49:56,180 --> 00:50:02,090
that we've got is

00:50:00,260 --> 00:50:05,210
I expected the strings to be the same

00:50:02,090 --> 00:50:10,310
because beards are awesome but they were

00:50:05,210 --> 00:50:12,950
different so the expected the results of

00:50:10,310 --> 00:50:15,980
the tests then the because whatever you

00:50:12,950 --> 00:50:20,030
put in and then the result of the test

00:50:15,980 --> 00:50:23,390
that you get so it means you can do

00:50:20,030 --> 00:50:26,540
things like this one of these may not

00:50:23,390 --> 00:50:28,280
work because my SMB protocol module

00:50:26,540 --> 00:50:29,660
didn't load I expect his strings to be

00:50:28,280 --> 00:50:30,980
the same but because we have failed to

00:50:29,660 --> 00:50:35,930
bother to update the app and it only

00:50:30,980 --> 00:50:37,820
works on XP they were different should

00:50:35,930 --> 00:50:39,920
be running as robux PS Rob yeah great

00:50:37,820 --> 00:50:43,400
and this actually worked

00:50:39,920 --> 00:50:46,250
should have SMB 1 enabled expected true

00:50:43,400 --> 00:50:50,260
because we don't care about the risk but

00:50:46,250 --> 00:50:53,270
we got false obviously jokey made up

00:50:50,260 --> 00:50:56,109
because us but hopefully you can see

00:50:53,270 --> 00:50:57,980
that you can now begin to pick up why

00:50:56,109 --> 00:51:00,140
these tests are failed

00:50:57,980 --> 00:51:02,210
and give even more information document

00:51:00,140 --> 00:51:04,490
your code even better as to why this

00:51:02,210 --> 00:51:06,800
particularly has has failed in this way

00:51:04,490 --> 00:51:14,090
Microsoft cognitive services does not

00:51:06,800 --> 00:51:15,980
recognize that as a face so even though

00:51:14,090 --> 00:51:18,500
I wrote my gets leak appeared it will

00:51:15,980 --> 00:51:20,510
analyze all of these pictures to grab

00:51:18,500 --> 00:51:22,880
the faces out and give me a beard score

00:51:20,510 --> 00:51:27,859
for my picture gave me a beard score of

00:51:22,880 --> 00:51:29,080
0 just wish quite fun greenies good

00:51:27,859 --> 00:51:32,960
where is bad

00:51:29,080 --> 00:51:34,520
before the break Green was good and red

00:51:32,960 --> 00:51:36,740
was also good because it was about

00:51:34,520 --> 00:51:38,810
writing our tests and making sure that

00:51:36,740 --> 00:51:40,880
everything was as we expected this time

00:51:38,810 --> 00:51:45,050
we're going to talk about validation of

00:51:40,880 --> 00:51:47,840
your environment still the same person

00:51:45,050 --> 00:51:49,790
still doing the same things still

00:51:47,840 --> 00:51:52,220
available on Twitter at sequel DBA with

00:51:49,790 --> 00:51:54,890
beard still have a website of sequel DBA

00:51:52,220 --> 00:51:58,280
with up beard there's a reason for that

00:51:54,890 --> 00:51:58,940
and that is that when I changed my

00:51:58,280 --> 00:52:03,700
Twitter handle

00:51:58,940 --> 00:52:05,869
I suddenly became sequel DBA with a bear

00:52:03,700 --> 00:52:07,940
because Twitter's only got a 15

00:52:05,869 --> 00:52:10,530
character minutes

00:52:07,940 --> 00:52:14,000
so I stole that moniker and I make use

00:52:10,530 --> 00:52:18,300
of it in fun and interesting ways but I

00:52:14,000 --> 00:52:20,310
am sequel DBA with beard on Twitter and

00:52:18,300 --> 00:52:22,890
all the other things still saying I'm

00:52:20,310 --> 00:52:28,200
still an MVP still work with our assess

00:52:22,890 --> 00:52:33,450
software and projects and all of this

00:52:28,200 --> 00:52:37,440
community stuff that I love doing but I

00:52:33,450 --> 00:52:39,360
hope I no longer have a drone no Joan no

00:52:37,440 --> 00:52:42,330
no that drone that when I wrote this

00:52:39,360 --> 00:52:44,910
crashed they just flew into a tree

00:52:42,330 --> 00:52:47,100
it was probably absolutely fine until it

00:52:44,910 --> 00:52:49,710
fell 40 meters down and then smashed on

00:52:47,100 --> 00:52:54,060
the floor but it was okay but I do have

00:52:49,710 --> 00:52:56,850
a new drone so today's list get up drink

00:52:54,060 --> 00:52:59,220
coffee anime me the rest of the world

00:52:56,850 --> 00:53:00,720
can happen yes I know this says drink

00:52:59,220 --> 00:53:02,610
appropriately credits because somebody

00:53:00,720 --> 00:53:05,520
complained that they don't drink coffee

00:53:02,610 --> 00:53:07,830
so I embarrassed them by changing the

00:53:05,520 --> 00:53:12,840
slide at the time and I will keep it

00:53:07,830 --> 00:53:14,730
there won't I Karen and what I want you

00:53:12,840 --> 00:53:17,640
to think about for the rest of this

00:53:14,730 --> 00:53:20,850
session is how many checklists do you

00:53:17,640 --> 00:53:26,760
have in your job in your work in your

00:53:20,850 --> 00:53:30,030
team and think about ways that you can

00:53:26,760 --> 00:53:36,210
use your checklists and turn them into

00:53:30,030 --> 00:53:38,220
pesto tests okay so don't take what Rob

00:53:36,210 --> 00:53:41,970
says here is all this is absolutely way

00:53:38,220 --> 00:53:43,590
to do it take what Rob says here as here

00:53:41,970 --> 00:53:46,140
are some things that I can use in my

00:53:43,590 --> 00:53:52,290
environment as I can make working this

00:53:46,140 --> 00:53:55,530
way so I bet we've all seen checklists

00:53:52,290 --> 00:53:57,090
like this Incident Response checklists

00:53:55,530 --> 00:53:59,100
things we should do when stuff goes

00:53:57,090 --> 00:54:00,690
wrong at 3 o'clock in the morning which

00:53:59,100 --> 00:54:02,070
normally a stuck on the share somewhere

00:54:00,690 --> 00:54:03,930
that we can't find because we've

00:54:02,070 --> 00:54:06,390
forgotten on login details to get to

00:54:03,930 --> 00:54:12,210
that place with ago what am I supposed

00:54:06,390 --> 00:54:14,010
to do release checklists making sure

00:54:12,210 --> 00:54:17,400
everything is in place before we move

00:54:14,010 --> 00:54:21,200
forward to release our next upgrade of

00:54:17,400 --> 00:54:21,200
the amazing widget that we've built

00:54:22,250 --> 00:54:29,280
all of the chains release

00:54:25,349 --> 00:54:31,430
it'll management type checklists by the

00:54:29,280 --> 00:54:34,470
first thing in the morning checklists

00:54:31,430 --> 00:54:35,849
what about all of the things that you do

00:54:34,470 --> 00:54:39,270
when you get into work to make sure

00:54:35,849 --> 00:54:40,619
everything is as you expect it maybe you

00:54:39,270 --> 00:54:42,809
want to make sure our build server is up

00:54:40,619 --> 00:54:45,329
and running make sure there are no

00:54:42,809 --> 00:54:47,760
failures in our unit test last night

00:54:45,329 --> 00:54:49,140
when everything round through it one of

00:54:47,760 --> 00:54:52,849
those things that we would like to do

00:54:49,140 --> 00:54:55,380
water magically it's a good checklist

00:54:52,849 --> 00:54:58,380
what about standing in front of about 30

00:54:55,380 --> 00:55:03,240
people in Southampton wanting to make

00:54:58,380 --> 00:55:08,369
sure everything works had absolutely as

00:55:03,240 --> 00:55:09,510
you saw before the break my API II was

00:55:08,369 --> 00:55:12,869
in a subscription that were run out of

00:55:09,510 --> 00:55:14,819
credit but I knew about that because I

00:55:12,869 --> 00:55:20,520
had run a pester test for my environment

00:55:14,819 --> 00:55:22,289
so I knew that that was a problem and it

00:55:20,520 --> 00:55:24,990
enabled me to try and fix it which I

00:55:22,289 --> 00:55:28,319
then failed to do but then it breaks at

00:55:24,990 --> 00:55:31,680
least I know that it's there by styling

00:55:28,319 --> 00:55:33,660
in front of a client did a presentation

00:55:31,680 --> 00:55:36,270
about in the new widget that we've just

00:55:33,660 --> 00:55:38,460
built it's going to be amazing this is

00:55:36,270 --> 00:55:40,619
the wrong version of the widget Oh nuts

00:55:38,460 --> 00:55:45,450
I wish I check that before I stood in

00:55:40,619 --> 00:55:48,660
front of them incident response morning

00:55:45,450 --> 00:55:51,450
checks first lines of Paul everything

00:55:48,660 --> 00:55:53,760
else that you're thinking of they're all

00:55:51,450 --> 00:55:56,250
good stuff we know because we talked

00:55:53,760 --> 00:55:57,750
about it earlier pester provides a

00:55:56,250 --> 00:55:59,069
framework for running unit tests to

00:55:57,750 --> 00:56:01,279
execute and validate parish shell

00:55:59,069 --> 00:56:03,150
commands from within PowerShell great

00:56:01,279 --> 00:56:05,700
that's brilliant

00:56:03,150 --> 00:56:08,819
how is that helping us test stuff about

00:56:05,700 --> 00:56:10,849
our environment validate parish shell

00:56:08,819 --> 00:56:14,039
commands from within parish shop

00:56:10,849 --> 00:56:16,640
whatever parish shell command I give to

00:56:14,039 --> 00:56:19,980
pester I can test the output off

00:56:16,640 --> 00:56:22,550
therefore they're a whole bundle of

00:56:19,980 --> 00:56:24,740
things that I can test

00:56:22,550 --> 00:56:26,720
we're going to bother talking about how

00:56:24,740 --> 00:56:28,880
we look what pester looks like because

00:56:26,720 --> 00:56:30,500
we've seen that listen this morning this

00:56:28,880 --> 00:56:37,340
morning felt like this morning before

00:56:30,500 --> 00:56:39,740
lunch before Peter I must apologize as

00:56:37,340 --> 00:56:42,920
you may have noticed from before Peter

00:56:39,740 --> 00:56:47,290
and since I am NOT somebody who likes to

00:56:42,920 --> 00:56:50,810
give you powerpoint slides full of text

00:56:47,290 --> 00:56:52,910
however sometimes you just have to give

00:56:50,810 --> 00:56:55,400
people parish shell PowerShell slides

00:56:52,910 --> 00:56:57,980
PowerPoint slides full of text these are

00:56:55,400 --> 00:57:00,620
our stood up raters I am NOT going to

00:56:57,980 --> 00:57:02,810
read through all of these I'm going to

00:57:00,620 --> 00:57:04,640
let you read them you can see what they

00:57:02,810 --> 00:57:06,590
are you understand what they mean these

00:57:04,640 --> 00:57:08,930
are the should assertions that are

00:57:06,590 --> 00:57:11,000
available to us within Pesta when this

00:57:08,930 --> 00:57:18,320
was written a couple more come through

00:57:11,000 --> 00:57:21,730
now oh yes the one you I will draw your

00:57:18,320 --> 00:57:26,570
attention to is contained

00:57:21,730 --> 00:57:32,030
what contain does not do is see if there

00:57:26,570 --> 00:57:35,510
is a member of an array so you can't say

00:57:32,030 --> 00:57:38,750
does this list of servers contain this

00:57:35,510 --> 00:57:41,660
particular server with your content

00:57:38,750 --> 00:57:46,850
contained check super file contains a

00:57:41,660 --> 00:57:48,890
specific specified text that may catch

00:57:46,850 --> 00:57:53,420
you out it still occasionally catches me

00:57:48,890 --> 00:57:56,410
out so be aware of that but this is the

00:57:53,420 --> 00:58:00,140
properties of a sequel server object a

00:57:56,410 --> 00:58:02,180
sequel server agent object and a login

00:58:00,140 --> 00:58:05,120
object that's all

00:58:02,180 --> 00:58:08,450
so in PowerShell sre in sequel server

00:58:05,120 --> 00:58:10,520
itself I can probably find another three

00:58:08,450 --> 00:58:13,610
or four hundred properties that I can

00:58:10,520 --> 00:58:15,410
check that's just in sequel server when

00:58:13,610 --> 00:58:21,890
you think about Active Directory file

00:58:15,410 --> 00:58:25,640
systems has you VMware hyper-v you start

00:58:21,890 --> 00:58:31,570
adding all of those up and then you put

00:58:25,640 --> 00:58:35,270
W my calls in there's pretty much

00:58:31,570 --> 00:58:36,660
nothing in a computer type thing that

00:58:35,270 --> 00:58:39,460
you can't

00:58:36,660 --> 00:58:41,470
Pastorius we've seen works on pi over 6

00:58:39,460 --> 00:58:45,700
that means you can check things on Mac

00:58:41,470 --> 00:58:50,770
if you check things on UNIX all sorts of

00:58:45,700 --> 00:58:53,140
stuff however there's one thing it can't

00:58:50,770 --> 00:58:55,000
check if you're going to Stuttgart and

00:58:53,140 --> 00:59:00,550
you're gonna do a parish else after day

00:58:55,000 --> 00:59:05,020
and you take your nook and my nook have

00:59:00,550 --> 00:59:07,030
got domain controller in about 13 sequel

00:59:05,020 --> 00:59:08,320
server images on there and they can run

00:59:07,030 --> 00:59:09,190
all of them at once means like a

00:59:08,320 --> 00:59:11,320
show-off

00:59:09,190 --> 00:59:12,580
look at these scripts run against all of

00:59:11,320 --> 00:59:14,740
these different versions of sequel

00:59:12,580 --> 00:59:16,080
server and clusters and availability

00:59:14,740 --> 00:59:20,290
groups and all these wonderful things

00:59:16,080 --> 00:59:22,480
however here is a peso test which shows

00:59:20,290 --> 00:59:24,550
us how we can do a contain so we'll

00:59:22,480 --> 00:59:27,190
describe our backpacking will have a

00:59:24,550 --> 00:59:31,860
context scope of hardware a knit bag

00:59:27,190 --> 00:59:37,080
should include beard nook so our bag

00:59:31,860 --> 00:59:39,310
contents contains big nook that's just

00:59:37,080 --> 00:59:41,290
parish up

00:59:39,310 --> 00:59:45,220
that is going to resolve to true or

00:59:41,290 --> 00:59:48,460
false so we NSA should be true we don't

00:59:45,220 --> 00:59:51,370
need to say should be true yeah there's

00:59:48,460 --> 00:59:53,290
an assumption around that we're gonna

00:59:51,370 --> 00:59:56,350
get a shift we just put a ship we

00:59:53,290 --> 00:59:57,820
wouldn't get a failure of our test but

00:59:56,350 --> 00:59:58,960
will we put should be true because we

00:59:57,820 --> 01:00:01,570
want everybody to understand what

00:59:58,960 --> 01:00:03,460
happens so I failed that pest to test

01:00:01,570 --> 01:00:06,510
because I couldn't actually run it and

01:00:03,460 --> 01:00:09,370
when I got to my hotel room at about

01:00:06,510 --> 01:00:10,780
11:00 p.m. and I got everything out to

01:00:09,370 --> 01:00:13,990
Roma pest test to make sure everything

01:00:10,780 --> 01:00:17,050
was working I didn't have my look at the

01:00:13,990 --> 01:00:20,400
power supply had the switch had all the

01:00:17,050 --> 01:00:23,020
network cables didn't have the look so I

01:00:20,400 --> 01:00:25,750
rapidly had to rewrite my entire

01:00:23,020 --> 01:00:27,310
presentation to make use of the fact oh

01:00:25,750 --> 01:00:31,900
and you could only run about for

01:00:27,310 --> 01:00:35,650
instance as a sequel on my box so some

01:00:31,900 --> 01:00:39,880
of the things we can do is we can see if

01:00:35,650 --> 01:00:43,750
things exist so we can check for example

01:00:39,880 --> 01:00:46,840
our servers we say this server returns a

01:00:43,750 --> 01:00:50,910
ping we're going to test connection for

01:00:46,840 --> 01:00:53,680
a server name count of one with a quiet

01:00:50,910 --> 01:00:55,780
area action silently continue we put

01:00:53,680 --> 01:00:59,070
higher action silently continue in so

01:00:55,780 --> 01:01:02,410
that our results of our tests are not

01:00:59,070 --> 01:01:08,410
confused with a sea of blood red of

01:01:02,410 --> 01:01:11,230
failed PowerShell maybe you want to

01:01:08,410 --> 01:01:13,510
check our operating system it's just a

01:01:11,230 --> 01:01:15,820
WI call so we know that our version

01:01:13,510 --> 01:01:19,660
should be ten point zero point one six

01:01:15,820 --> 01:01:24,820
point two nine nine it's easy for us

01:01:19,660 --> 01:01:29,770
check one thing I cannot test that

01:01:24,820 --> 01:01:33,520
little moon there apparently if you

01:01:29,770 --> 01:01:37,710
change your registry key you can switch

01:01:33,520 --> 01:01:40,750
that quiet hours on or off which means

01:01:37,710 --> 01:01:43,600
it's just PowerShell I can connect to

01:01:40,750 --> 01:01:47,920
the registry it just appears like a

01:01:43,600 --> 01:01:49,510
drive to me but the registry key hack

01:01:47,920 --> 01:01:51,680
that they gave doesn't work so that

01:01:49,510 --> 01:01:53,059
literally is the only thing that I found

01:01:51,680 --> 01:01:55,250
that I have not been able to test with

01:01:53,059 --> 01:01:57,079
pesto apart from whether I took might

01:01:55,250 --> 01:01:59,750
not be justified maybe we want to make

01:01:57,079 --> 01:02:00,579
sure about a particular text well is in

01:01:59,750 --> 01:02:03,140
place

01:02:00,579 --> 01:02:04,670
maybe our folder with some things it

01:02:03,140 --> 01:02:09,470
should have only a certain number of

01:02:04,670 --> 01:02:12,800
files maybe the XE should be of a

01:02:09,470 --> 01:02:14,000
certain version I'm gonna make sure when

01:02:12,800 --> 01:02:15,770
we go in front of our clients show

01:02:14,000 --> 01:02:17,900
brand-new widget that we're showing off

01:02:15,770 --> 01:02:23,180
brand-new widget and not brand new

01:02:17,900 --> 01:02:24,680
[ __ ] version - one maybe should say

01:02:23,180 --> 01:02:26,569
that our file has been created on this

01:02:24,680 --> 01:02:28,520
date we know that we did the

01:02:26,569 --> 01:02:30,230
configuration file on the 18th of

01:02:28,520 --> 01:02:33,800
November therefore that's when that

01:02:30,230 --> 01:02:37,760
should have been created and it should

01:02:33,800 --> 01:02:40,760
not be modified since that date I was

01:02:37,760 --> 01:02:44,540
sat in an organization where a business

01:02:40,760 --> 01:02:46,640
analyst had done some work and then he

01:02:44,540 --> 01:02:49,010
came to the manager and the manager was

01:02:46,640 --> 01:02:51,130
very cross and he came out the

01:02:49,010 --> 01:02:54,309
technician he was extremely upset

01:02:51,130 --> 01:02:58,250
because this process happened

01:02:54,309 --> 01:03:02,540
hey client phoned up the service desk

01:02:58,250 --> 01:03:04,549
and said the thing is broken okay

01:03:02,540 --> 01:03:07,460
what's what's broken my saying blah blah

01:03:04,549 --> 01:03:10,040
blah blah blah service desk man went or

01:03:07,460 --> 01:03:10,609
woman went well I don't understand what

01:03:10,040 --> 01:03:15,470
that means

01:03:10,609 --> 01:03:18,549
um okay try a few things write it in the

01:03:15,470 --> 01:03:22,640
call pass it to second might support

01:03:18,549 --> 01:03:25,339
second life support when I'm really busy

01:03:22,640 --> 01:03:27,040
I'll get to that in a while and it's sat

01:03:25,339 --> 01:03:29,890
in the key for a week

01:03:27,040 --> 01:03:32,890
for two weeks and then cycle I picked up

01:03:29,890 --> 01:03:35,530
and they went find the client house try

01:03:32,890 --> 01:03:37,390
this try that change the rich treat this

01:03:35,530 --> 01:03:39,450
icon I'm not happening okay we'll try

01:03:37,390 --> 01:03:43,330
that no I don't know what it is though

01:03:39,450 --> 01:03:45,430
second loan went I've got 150 other

01:03:43,330 --> 01:03:48,700
calls here I'll check it up just third

01:03:45,430 --> 01:03:50,950
line third line were very busy they're

01:03:48,700 --> 01:03:53,380
perusing the internet we were reading

01:03:50,950 --> 01:03:56,740
read it and they were making sure the

01:03:53,380 --> 01:03:58,600
nerf gun was in fact working so they

01:03:56,740 --> 01:03:59,680
picked up this call right out of this

01:03:58,600 --> 01:04:00,790
and they looked at the call and they

01:03:59,680 --> 01:04:05,200
went oh for goodness sake they've

01:04:00,790 --> 01:04:09,640
changed the company for what they should

01:04:05,200 --> 01:04:11,230
have done he's given the call back to

01:04:09,640 --> 01:04:12,610
the first line to pour the first line

01:04:11,230 --> 01:04:14,170
support should have find the client and

01:04:12,610 --> 01:04:15,700
set the client I'm sorry you will not

01:04:14,170 --> 01:04:17,620
under support because you have altered

01:04:15,700 --> 01:04:20,400
the configuration file as specified in

01:04:17,620 --> 01:04:24,340
our contract of agreement with you

01:04:20,400 --> 01:04:25,570
because third line support Mike try that

01:04:24,340 --> 01:04:26,770
with first line support first line

01:04:25,570 --> 01:04:28,630
support would find out the client client

01:04:26,770 --> 01:04:30,130
will be really angry you've had this for

01:04:28,630 --> 01:04:31,240
four weeks and you still haven't been

01:04:30,130 --> 01:04:34,000
there now you're coming back saying that

01:04:31,240 --> 01:04:36,340
this is ridiculous all right so what

01:04:34,000 --> 01:04:37,690
third line support did is give the new

01:04:36,340 --> 01:04:40,140
conflict I'll put it in the clients

01:04:37,690 --> 01:04:43,170
place oh did I fixed quick clients happy

01:04:40,140 --> 01:04:45,130
everybody's happy except for the manager

01:04:43,170 --> 01:04:46,300
manager was completely happy because

01:04:45,130 --> 01:04:48,610
there were no clients shouting at him

01:04:46,300 --> 01:04:50,350
until the business analyst said I don't

01:04:48,610 --> 01:04:52,900
know minute you're wasting all of this

01:04:50,350 --> 01:04:54,520
time and resource for something that is

01:04:52,900 --> 01:04:55,630
actually not under a license agreement

01:04:54,520 --> 01:04:59,080
and you shouldn't be supporting in the

01:04:55,630 --> 01:05:02,550
first place this is ridiculous oh how

01:04:59,080 --> 01:05:04,660
could we do this that's how we did it

01:05:02,550 --> 01:05:06,190
that wasn't even working on that project

01:05:04,660 --> 01:05:10,870
and I went well you could just wipe s

01:05:06,190 --> 01:05:13,800
test now what what what pest test file

01:05:10,870 --> 01:05:16,150
should not be modified since this date

01:05:13,800 --> 01:05:18,370
so we had a whole load of other stuff

01:05:16,150 --> 01:05:20,410
than we needed to make sure was right we

01:05:18,370 --> 01:05:22,330
gave that first month support first-line

01:05:20,410 --> 01:05:25,240
support when they got a call would say

01:05:22,330 --> 01:05:28,420
okay who'd you just download this run

01:05:25,240 --> 01:05:31,510
this pester test tell me what it says I

01:05:28,420 --> 01:05:32,950
come back so I was Green Green so next

01:05:31,510 --> 01:05:34,390
he should be of this version is green

01:05:32,950 --> 01:05:36,310
saying the file should have been created

01:05:34,390 --> 01:05:37,630
in the state it's red it says the file

01:05:36,310 --> 01:05:39,350
should not have been modified since this

01:05:37,630 --> 01:05:41,090
date I'm very sorry sir

01:05:39,350 --> 01:05:42,620
appears that somebody is altered the

01:05:41,090 --> 01:05:44,420
configuration of your client if you

01:05:42,620 --> 01:05:46,040
could reset it back to the original

01:05:44,420 --> 01:05:47,540
configuration we can support you but as

01:05:46,040 --> 01:05:50,570
it is in its current state I'm afraid

01:05:47,540 --> 01:05:53,330
we're not able to support you suddenly

01:05:50,570 --> 01:05:54,920
everybody's happy apart from maybe the

01:05:53,330 --> 01:05:56,680
first-line support guys you have to have

01:05:54,920 --> 01:05:59,000
that conversation with the client but

01:05:56,680 --> 01:06:00,340
that's okay they'll grow they'll get

01:05:59,000 --> 01:06:03,800
used to it

01:06:00,340 --> 01:06:06,800
everybody's happy here is just one

01:06:03,800 --> 01:06:10,510
example of a way that you can make use

01:06:06,800 --> 01:06:13,040
of pesto to resolve an issue for your

01:06:10,510 --> 01:06:15,130
customers for your clients for your

01:06:13,040 --> 01:06:19,400
managers but now imagine that your

01:06:15,130 --> 01:06:21,790
consultant and you walk into different

01:06:19,400 --> 01:06:24,590
clients different times of the week

01:06:21,790 --> 01:06:27,650
different weeks and you're pretty much

01:06:24,590 --> 01:06:29,930
checking the same thing you know you're

01:06:27,650 --> 01:06:31,160
checking where the sequel server is set

01:06:29,930 --> 01:06:34,520
up as it should be

01:06:31,160 --> 01:06:35,990
you're checking whether your as your

01:06:34,520 --> 01:06:38,060
subscription is set up in the right way

01:06:35,990 --> 01:06:39,440
Active Directory is created in the right

01:06:38,060 --> 01:06:41,870
way whatever it is that you're

01:06:39,440 --> 01:06:43,220
consulting about you're going in

01:06:41,870 --> 01:06:44,390
checking the same sort of things with

01:06:43,220 --> 01:06:47,860
different clients have different

01:06:44,390 --> 01:06:53,030
environments so how do you path in

01:06:47,860 --> 01:06:56,030
different things to these clients so

01:06:53,030 --> 01:07:02,740
what you can do is make sure you're in

01:06:56,030 --> 01:07:07,460
the white over yes good load ourselves a

01:07:02,740 --> 01:07:08,840
function and if we look at this

01:07:07,460 --> 01:07:09,980
particular [ __ ] not that particular

01:07:08,840 --> 01:07:10,790
function if we look at this particular

01:07:09,980 --> 01:07:13,130
function

01:07:10,790 --> 01:07:14,870
you see got some good help some good

01:07:13,130 --> 01:07:17,090
descriptions because I do not want to be

01:07:14,870 --> 01:07:19,130
the person who looks at and mike koval

01:07:17,090 --> 01:07:21,530
it'll be the support just want to be the

01:07:19,130 --> 01:07:23,030
guy that writes it some examples be some

01:07:21,530 --> 01:07:24,500
examples to make sure people know how to

01:07:23,030 --> 01:07:27,620
use the thing that we've written for

01:07:24,500 --> 01:07:30,380
them and what this code is going to do

01:07:27,620 --> 01:07:32,870
you see there's a lot of it got some

01:07:30,380 --> 01:07:34,640
parameters loads of parameters we're

01:07:32,870 --> 01:07:37,310
gonna press in parameters are plenty

01:07:34,640 --> 01:07:41,750
into this piece of code for each server

01:07:37,310 --> 01:07:46,040
in servers skip equals trip remember

01:07:41,750 --> 01:07:47,060
that I'll be useful in it what we're

01:07:46,040 --> 01:07:48,950
gonna do is going to do a test

01:07:47,060 --> 01:07:51,650
connection make sure the server is

01:07:48,950 --> 01:07:53,390
online we're going to do a test WS man

01:07:51,650 --> 01:07:56,630
make sure we've got some PS remoting

01:07:53,390 --> 01:07:59,270
capabilities and then we're going to

01:07:56,630 --> 01:08:03,080
create ourselves a script block which is

01:07:59,270 --> 01:08:07,310
going to make you solve the line thank

01:08:03,080 --> 01:08:09,950
you a return object a PS custom object

01:08:07,310 --> 01:08:14,600
just defined like that this is a custom

01:08:09,950 --> 01:08:19,310
object with nothing in it I mean in that

01:08:14,600 --> 01:08:21,590
object for save a backup directory we're

01:08:19,310 --> 01:08:23,830
gonna put in the results of the backup

01:08:21,590 --> 01:08:26,510
directory querying our sequel server

01:08:23,830 --> 01:08:28,160
we're gonna go through we're going to

01:08:26,510 --> 01:08:30,620
make sure things are enabled and the

01:08:28,160 --> 01:08:33,260
frequency in the start times are all as

01:08:30,620 --> 01:08:35,600
they well what what they are place them

01:08:33,260 --> 01:08:37,160
into this object just with some Parishad

01:08:35,600 --> 01:08:40,720
because it's PowerShell we can create

01:08:37,160 --> 01:08:45,560
anything we like I'll at the bottom

01:08:40,720 --> 01:08:48,500
we're gonna invoke ourselves a script

01:08:45,560 --> 01:08:52,970
lock go to our remote server run this

01:08:48,500 --> 01:08:55,820
script return me the object now that

01:08:52,970 --> 01:09:00,230
we've got our objects we can go through

01:08:55,820 --> 01:09:03,680
and say pick that one the full system

01:09:00,230 --> 01:09:07,610
database backup should be scheduled so

01:09:03,680 --> 01:09:10,700
our return object all s this full

01:09:07,610 --> 01:09:13,100
schedule should be true the full system

01:09:10,700 --> 01:09:15,320
database backup should be scheduled with

01:09:13,100 --> 01:09:18,800
this frequency which is a variable that

01:09:15,320 --> 01:09:20,900
we've passed into our function so this

01:09:18,800 --> 01:09:24,260
value should be the same as the value

01:09:20,900 --> 01:09:27,410
we've passed in so anything that we

01:09:24,260 --> 01:09:30,230
might change but we can still gather in

01:09:27,410 --> 01:09:33,830
the same thing maybe how often we take

01:09:30,230 --> 01:09:35,810
our backups maybe it's who are the

01:09:33,830 --> 01:09:39,200
members of the administrators on the

01:09:35,810 --> 01:09:41,390
local machine but all sorts of different

01:09:39,200 --> 01:09:42,770
things that you can imagine you might

01:09:41,390 --> 01:09:44,990
want to parameterize because you're

01:09:42,770 --> 01:09:48,320
going to different places to save us

01:09:44,990 --> 01:09:51,650
having to put all of these parameters in

01:09:48,320 --> 01:09:55,430
one long line try and change them we

01:09:51,650 --> 01:09:59,150
splat them out into a nice column we can

01:09:55,430 --> 01:10:01,760
change anything we want to if our system

01:09:59,150 --> 01:10:03,560
full frequency job runs weekly we can

01:10:01,760 --> 01:10:04,580
just change that to weekly and then run

01:10:03,560 --> 01:10:06,230
the rest of the command

01:10:04,580 --> 01:10:08,150
good work and what you're seeing there

01:10:06,230 --> 01:10:11,930
is not greenies good already's bad we're

01:10:08,150 --> 01:10:15,440
seeing yellow is skipped because pesto

01:10:11,930 --> 01:10:20,570
is just PowerShell so if we have some

01:10:15,440 --> 01:10:25,610
logic that we want to define we can skip

01:10:20,570 --> 01:10:27,950
our tests that's we need to because as

01:10:25,610 --> 01:10:31,460
we've already discussed I don't have a

01:10:27,950 --> 01:10:33,680
look with me I didn't actually bring it

01:10:31,460 --> 01:10:36,920
I deliberately didn't do it okay but I

01:10:33,680 --> 01:10:39,290
have no remote machines to run commands

01:10:36,920 --> 01:10:42,020
on so I've just skipped them all so you

01:10:39,290 --> 01:10:44,630
can see what would happen but you can

01:10:42,020 --> 01:10:47,540
imagine that I can quickly run all of

01:10:44,630 --> 01:10:49,580
those tests if I wanted to go to a

01:10:47,540 --> 01:10:51,770
different environment and run them I

01:10:49,580 --> 01:10:53,360
could just change the parameters run the

01:10:51,770 --> 01:10:55,160
same piece of code I don't have to worry

01:10:53,360 --> 01:10:56,840
about it it's already been done what

01:10:55,160 --> 01:11:00,830
about the other way round of thinking

01:10:56,840 --> 01:11:02,450
about it what about if all of you wanted

01:11:00,830 --> 01:11:06,140
to write some para shells and pesto

01:11:02,450 --> 01:11:10,640
tests and you all wanted to do different

01:11:06,140 --> 01:11:12,080
things or maybe your values for

01:11:10,640 --> 01:11:13,730
production are different from the values

01:11:12,080 --> 01:11:18,410
from UAT the difference of Farley's to

01:11:13,730 --> 01:11:21,410
dev difference of values of QA or SAT or

01:11:18,410 --> 01:11:23,570
sut or all the other acronyms that we

01:11:21,410 --> 01:11:24,890
give to test environments that we want

01:11:23,570 --> 01:11:25,940
to create another one just because we

01:11:24,890 --> 01:11:32,230
think there's something else we want to

01:11:25,940 --> 01:11:32,230
test before we test up by five my word

01:11:32,860 --> 01:11:41,870
invoke pesto will run all of the files

01:11:39,170 --> 01:11:46,790
that end up test stock ps1 that are in a

01:11:41,870 --> 01:11:51,620
folder by adding a tag of backup we have

01:11:46,790 --> 01:11:54,250
only run the backup commands if we look

01:11:51,620 --> 01:12:00,320
in our folder we can see we've got one

01:11:54,250 --> 01:12:02,840
file with top tests got ps1 inside that

01:12:00,320 --> 01:12:07,910
file we've got a describe block which

01:12:02,840 --> 01:12:10,640
has a tag now got a tag of backup so

01:12:07,910 --> 01:12:15,470
even though he's like pesto ran all of

01:12:10,640 --> 01:12:17,140
this code it only ran the tests with a

01:12:15,470 --> 01:12:19,900
tag of

01:12:17,140 --> 01:12:23,969
so you can write first line second line

01:12:19,900 --> 01:12:28,150
third line prod UAT Active Directory DNS

01:12:23,969 --> 01:12:29,710
whatever tests with a tag put them in

01:12:28,150 --> 01:12:33,280
the same place source control them

01:12:29,710 --> 01:12:37,300
anybody can run them with the tag it's

01:12:33,280 --> 01:12:39,010
just one way of using it I'd show you

01:12:37,300 --> 01:12:41,110
some more but I don't have much time

01:12:39,010 --> 01:12:44,790
maybe you want to make use of some

01:12:41,110 --> 01:12:49,030
configuration I just used some Jason I

01:12:44,790 --> 01:12:51,520
pick a tag Teddy B I picked some values

01:12:49,030 --> 01:12:54,190
that I could change and a skip as and

01:12:51,520 --> 01:12:57,820
when I need to and I can skip various

01:12:54,190 --> 01:12:59,469
tests if I need to do so enables me to

01:12:57,820 --> 01:13:01,690
write different Jason for different

01:12:59,469 --> 01:13:05,110
environments and we could just call them

01:13:01,690 --> 01:13:13,660
with a command but I want to show you

01:13:05,110 --> 01:13:17,800
this because this is cool so I needed to

01:13:13,660 --> 01:13:20,620
check that every server in the estate

01:13:17,800 --> 01:13:22,750
there are about 250 had all of those

01:13:20,620 --> 01:13:26,020
particular jobs and each job had been

01:13:22,750 --> 01:13:30,610
enabled and scheduled and had run and

01:13:26,020 --> 01:13:33,969
had succeeded and that each of those

01:13:30,610 --> 01:13:36,460
jobs had created a backup share for each

01:13:33,969 --> 01:13:38,370
server and inside that folder there

01:13:36,460 --> 01:13:40,510
should be a folder for each database

01:13:38,370 --> 01:13:42,010
inside the folder for each database this

01:13:40,510 --> 01:13:46,090
should be a full Adair for the log

01:13:42,010 --> 01:13:48,910
folder inside the full folder there

01:13:46,090 --> 01:13:49,930
should be a doctor within less than

01:13:48,910 --> 01:13:51,430
seven days old

01:13:49,930 --> 01:13:53,199
within the diff folder should be a

01:13:51,430 --> 01:13:55,150
doctor in file less than one day old

01:13:53,199 --> 01:13:56,920
inside the log folder there should be a

01:13:55,150 --> 01:14:01,960
doctor in file less than thirty minutes

01:13:56,920 --> 01:14:04,120
old apart from all of the databases that

01:14:01,960 --> 01:14:06,489
were in simple mode and the ones that

01:14:04,120 --> 01:14:07,840
were in log shipping and the

01:14:06,489 --> 01:14:14,320
availability groups would be in a

01:14:07,840 --> 01:14:16,480
different folder so you can imagine that

01:14:14,320 --> 01:14:18,670
was going to take me a fair amount of

01:14:16,480 --> 01:14:20,949
time to do for 200 instances and however

01:14:18,670 --> 01:14:24,370
many thousand databases it was check all

01:14:20,949 --> 01:14:26,080
of those files existed so it's parish up

01:14:24,370 --> 01:14:28,090
I just need to work out that logic it

01:14:26,080 --> 01:14:29,609
took me an hour or so a right to pass

01:14:28,090 --> 01:14:38,489
the test

01:14:29,609 --> 01:14:40,409
and that meant that what I can do is run

01:14:38,489 --> 01:14:42,510
tests on instance which is the function

01:14:40,409 --> 01:14:44,909
that I wrote against these three

01:14:42,510 --> 01:14:48,719
particular instances the moment with a

01:14:44,909 --> 01:14:54,869
value of the share of the backer then I

01:14:48,719 --> 01:14:58,469
can grab all of this come back ok there

01:14:54,869 --> 01:15:00,449
we go we're now checking that who has

01:14:58,469 --> 01:15:01,649
files in the full folder and that the

01:15:00,449 --> 01:15:03,510
lock folder for world while the

01:15:01,649 --> 01:15:05,579
importance has files in it but it was

01:15:03,510 --> 01:15:07,139
written to within the last 30 minutes it

01:15:05,579 --> 01:15:09,030
expected 30 minutes ago

01:15:07,139 --> 01:15:16,709
to be greater than the file that was in

01:15:09,030 --> 01:15:25,019
there and because this is just

01:15:16,709 --> 01:15:27,989
powershell and we get our results as an

01:15:25,019 --> 01:15:32,909
object we could turn them just into a

01:15:27,989 --> 01:15:36,079
JSON object and because it's Jason we

01:15:32,909 --> 01:15:40,589
can create ourselves something beautiful

01:15:36,079 --> 01:15:44,449
and if you go to my blog you'll find a

01:15:40,589 --> 01:15:47,280
power bi desktop file that will take any

01:15:44,449 --> 01:15:50,489
pester results if you format them in the

01:15:47,280 --> 01:15:52,589
right way some of them might not display

01:15:50,489 --> 01:15:58,669
quite as you want them to but in general

01:15:52,589 --> 01:15:58,669
they're going to look as cool as this

01:16:04,370 --> 01:16:13,740
so we can see 507 tests 43 seconds arrow

01:16:10,680 --> 01:16:16,230
test for good run we can click into our

01:16:13,740 --> 01:16:19,590
tests because we're not online we're not

01:16:16,230 --> 01:16:26,010
going to get all the values in there or

01:16:19,590 --> 01:16:27,750
maybe any managers in the room okay and

01:16:26,010 --> 01:16:31,920
if you just close your ears the next

01:16:27,750 --> 01:16:35,450
five minutes sir please we all know what

01:16:31,920 --> 01:16:39,380
management like pretty pictures chilli

01:16:35,450 --> 01:16:45,570
pretty pictures that are interactive and

01:16:39,380 --> 01:16:48,900
stuff changes as they click on them yes

01:16:45,570 --> 01:16:50,550
and you can give them all of this and

01:16:48,900 --> 01:16:53,070
they will click on it and they might

01:16:50,550 --> 01:16:56,940
actually forget the fact or forget to

01:16:53,070 --> 01:16:58,380
ask why are 8% of these rate because

01:16:56,940 --> 01:17:01,710
they're so impressed with this because

01:16:58,380 --> 01:17:05,010
you've created this amazing thing and it

01:17:01,710 --> 01:17:07,800
is beautiful and it is useful and

01:17:05,010 --> 01:17:10,890
enables you to maneuver this data around

01:17:07,800 --> 01:17:14,940
however you want that is one of the

01:17:10,890 --> 01:17:19,040
beauties of PowerShell that it enables

01:17:14,940 --> 01:17:23,640
you to go within a whole environment

01:17:19,040 --> 01:17:26,970
whether it's Windows Mac Linux sequel -

01:17:23,640 --> 01:17:29,610
your VMware hyper-v test all of the

01:17:26,970 --> 01:17:31,680
things that you need to test turn them

01:17:29,610 --> 01:17:34,380
into an object which you could use in

01:17:31,680 --> 01:17:37,050
your CI CD build process you can put

01:17:34,380 --> 01:17:39,030
those XML results in to VST yes for

01:17:37,050 --> 01:17:41,480
example to give it the test results or

01:17:39,030 --> 01:17:43,410
you can create some beautiful power bi

01:17:41,480 --> 01:17:44,760
that means that you manager doesn't

01:17:43,410 --> 01:17:46,920
actually hassle you for why things are

01:17:44,760 --> 01:17:49,290
wrong okay monitor you come back of

01:17:46,920 --> 01:17:50,640
course this is all really useful as we

01:17:49,290 --> 01:17:53,190
explained for all of our managers

01:17:50,640 --> 01:17:55,250
you've all got checklists don't do

01:17:53,190 --> 01:17:57,810
things manually if you can avoid it

01:17:55,250 --> 01:18:00,090
bestories unit testing framework but you

01:17:57,810 --> 01:18:05,870
can use it to validate anything you can

01:18:00,090 --> 01:18:08,580
gather with Perisher describe context it

01:18:05,870 --> 01:18:11,070
don't forget to put the curly braces on

01:18:08,580 --> 01:18:12,450
the same line I bet you put them on a

01:18:11,070 --> 01:18:13,660
different line just to see the error

01:18:12,450 --> 01:18:17,960
message

01:18:13,660 --> 01:18:22,190
should test your assertions you can

01:18:17,960 --> 01:18:23,750
output to any XML for CI CD you can

01:18:22,190 --> 01:18:25,130
output to an object because the parish

01:18:23,750 --> 01:18:27,560
all you can do anything you like with it

01:18:25,130 --> 01:18:29,000
but I think the best way is try to put

01:18:27,560 --> 01:18:31,010
it to Jason and turn it into phobia

01:18:29,000 --> 01:18:33,310
might be robbed you've been amazing

01:18:31,010 --> 01:18:33,310
thank you

01:18:34,220 --> 01:18:37,339

YouTube URL: https://www.youtube.com/watch?v=2r0jbRMIRQI


