Title: Azure SQL Database Managed Instances - Dev South Coast - April 2018
Publication date: 2018-05-03
Playlist: Developer South Coast
Description: 
	Local MVP and all round data guru, John Martin, heads over to fill our heads with all the new knowledge on Microsoft's recently announce Managed SQL instances.

Main Session

The range of options for storing data in Microsoft Azure keeps growing, the most notable recent addition is the Managed Instance. But what is it, and why is it there? Join John as he walks through what they are
and how you might start using them. Managed Instances add a new option for running workloads in the cloud. Allowing near parity with a traditional on-premises SQL Server. Including SQL Agent, Cross Database Queries, Service Broker, CDC, and many more. Overcoming many of the challenges to using Azure SQL Databases. But, what is the reality, how do we make use of it, and are there any gotchaâ€™s that we need to be aware of? This is what we will cover, going beyond the hype and looking at how we can make use of this new technology, working through a full migration including workload analysis, selecting the appropriate migration pathway and then putting it in place.

John Martin
Bio
John is a Data Platform MVP and Product Manager for SentryOne. With over a decade of experience working with Data Platform technologies John has seen how to get the most of our SQL Server and other database platforms, as well as some great examples of what not to do. John is also Director at Large for PASS representing EMEA.
Captions: 
	00:00:00,030 --> 00:00:04,350
I just come along evening I appreciate

00:00:01,920 --> 00:00:05,700
it's a lovely evening and a lot of us

00:00:04,350 --> 00:00:07,620
would rather be down to par I'm guessing

00:00:05,700 --> 00:00:10,800
but gave me a chance to ride the bike

00:00:07,620 --> 00:00:11,790
over so I'm or I'm a happy man um we're

00:00:10,800 --> 00:00:16,049
gonna be talking about as your sequel

00:00:11,790 --> 00:00:17,609
database managed instances before we go

00:00:16,049 --> 00:00:20,609
into the slide deck and stuff has anyone

00:00:17,609 --> 00:00:22,230
apart from Richard and Sylvia at the

00:00:20,609 --> 00:00:25,439
front here heard of managed instances or

00:00:22,230 --> 00:00:27,060
seen anything about them couple of

00:00:25,439 --> 00:00:29,010
people who here's using Azure sequel

00:00:27,060 --> 00:00:30,929
database at the moment right it's

00:00:29,010 --> 00:00:35,820
basically the same thing right

00:00:30,929 --> 00:00:37,200
presentation done let's go no we'll

00:00:35,820 --> 00:00:38,190
cover what they are and how they differ

00:00:37,200 --> 00:00:41,129
but they're built on the same technology

00:00:38,190 --> 00:00:43,980
so we'll have a look at that one there a

00:00:41,129 --> 00:00:46,050
little bit about me my name is John

00:00:43,980 --> 00:00:48,660
Martin I'm a product manager for a

00:00:46,050 --> 00:00:50,219
company called century one we're an ISV

00:00:48,660 --> 00:00:53,190
we build monitoring software and stuff

00:00:50,219 --> 00:00:55,050
like that and I'll give a license to

00:00:53,190 --> 00:00:57,750
give away tonight if the swag ometer is

00:00:55,050 --> 00:00:59,910
working and stuff only this time I hope

00:00:57,750 --> 00:01:03,390
I don't win the license like I did last

00:00:59,910 --> 00:01:06,299
time I gave one away mug soft dated

00:01:03,390 --> 00:01:07,740
platform MVP working with data platform

00:01:06,299 --> 00:01:10,979
in one form or another for well over a

00:01:07,740 --> 00:01:12,420
decade now started off writing DTS and

00:01:10,979 --> 00:01:16,799
reporting services reports back in

00:01:12,420 --> 00:01:20,659
sequel 2000 done time as a sequel day of

00:01:16,799 --> 00:01:22,680
VI developer I'm now a reformed DBA

00:01:20,659 --> 00:01:23,820
prior to joining sentry I used to work

00:01:22,680 --> 00:01:25,830
for Microsoft as a premier field

00:01:23,820 --> 00:01:28,560
engineer based out of the UK I'm also

00:01:25,830 --> 00:01:30,689
director at large for Amir for an

00:01:28,560 --> 00:01:32,009
organization called Pass which is a

00:01:30,689 --> 00:01:36,869
professional association a sequel server

00:01:32,009 --> 00:01:38,729
basically a an organization that puts on

00:01:36,869 --> 00:01:40,650
conferences helps run events and things

00:01:38,729 --> 00:01:42,450
like that about data platform

00:01:40,650 --> 00:01:45,960
technologies be it relational

00:01:42,450 --> 00:01:48,570
non-relational as your AWS whatever keep

00:01:45,960 --> 00:01:50,759
an eye out of stuff contact details are

00:01:48,570 --> 00:01:54,600
down the bottom here so please feel free

00:01:50,759 --> 00:01:56,630
to tweet at me email we read stuff I

00:01:54,600 --> 00:02:00,180
blog about I've also blog at some a

00:01:56,630 --> 00:02:01,229
website called MS sequel tips one of the

00:02:00,180 --> 00:02:02,969
demos are going to do towards the end

00:02:01,229 --> 00:02:06,890
all the code is up there and my blog

00:02:02,969 --> 00:02:11,250
post which went live today in convenient

00:02:06,890 --> 00:02:15,360
so that's cool yeah

00:02:11,250 --> 00:02:18,420
I'm just retasking a deck from work so

00:02:15,360 --> 00:02:20,760
what is banish'd instance it's a new

00:02:18,420 --> 00:02:21,300
platform as a service offering that's

00:02:20,760 --> 00:02:23,790
obvious

00:02:21,300 --> 00:02:25,980
as I said it's built on top of as your

00:02:23,790 --> 00:02:30,860
single database well rather not built on

00:02:25,980 --> 00:02:33,090
top of it's another flavor thereof okay

00:02:30,860 --> 00:02:35,640
we've got Azure sequel database the

00:02:33,090 --> 00:02:37,350
singletons so you spin up her as your

00:02:35,640 --> 00:02:40,830
sequel server then an azure sequel

00:02:37,350 --> 00:02:42,510
database you've got as your sequel

00:02:40,830 --> 00:02:44,820
database elastic pools which is

00:02:42,510 --> 00:02:46,590
essentially allows you to group a bunch

00:02:44,820 --> 00:02:48,780
of them together and get better

00:02:46,590 --> 00:02:50,400
utilization across the field when you're

00:02:48,780 --> 00:02:53,540
using I just sequel databases so you're

00:02:50,400 --> 00:02:56,220
paying for less throughput and then

00:02:53,540 --> 00:02:57,780
you're basically looking at seasonality

00:02:56,220 --> 00:02:59,250
in your workloads through the course of

00:02:57,780 --> 00:03:03,990
a day that's how we leverage elastic

00:02:59,250 --> 00:03:07,230
pools now Microsoft have added managed

00:03:03,990 --> 00:03:09,270
instance the reason they've done this is

00:03:07,230 --> 00:03:11,640
because there are a large number of

00:03:09,270 --> 00:03:13,980
blockers for migrating an existing

00:03:11,640 --> 00:03:15,420
on-premises workload existing

00:03:13,980 --> 00:03:17,190
application databases things like that

00:03:15,420 --> 00:03:18,450
to our sequel database quite simply

00:03:17,190 --> 00:03:21,530
there are a number of restrictions

00:03:18,450 --> 00:03:24,660
around the functionality of the platform

00:03:21,530 --> 00:03:26,910
such as I'm gonna say you can't do cross

00:03:24,660 --> 00:03:28,709
database queries you can't do three-part

00:03:26,910 --> 00:03:30,780
name queries in the traditional sense of

00:03:28,709 --> 00:03:33,870
the manner so you can't say select star

00:03:30,780 --> 00:03:36,239
from database schema dot table can't do

00:03:33,870 --> 00:03:37,739
that an agile sequel database okay there

00:03:36,239 --> 00:03:39,750
is something called elastic query which

00:03:37,739 --> 00:03:42,720
allows you to create what I refer to as

00:03:39,750 --> 00:03:44,400
external tables essentially you create

00:03:42,720 --> 00:03:45,810
database scope credentials and you you

00:03:44,400 --> 00:03:48,209
log in to the other databases

00:03:45,810 --> 00:03:50,070
you've got no no sense of the instance

00:03:48,209 --> 00:03:52,830
like we do with your retail sequel

00:03:50,070 --> 00:03:55,769
server environments that's where this

00:03:52,830 --> 00:03:59,459
comes in it fills an awful lot of those

00:03:55,769 --> 00:04:01,019
gaps in capability okay making it a lot

00:03:59,459 --> 00:04:03,269
easier if you want to get if you've got

00:04:01,019 --> 00:04:04,410
old servers you've got old versions of

00:04:03,269 --> 00:04:06,780
sequel that are being retired by

00:04:04,410 --> 00:04:09,810
Microsoft then it's simply a case of

00:04:06,780 --> 00:04:11,670
okay maybe we can do this and stick our

00:04:09,810 --> 00:04:14,670
apps in a VM deploy to App Service

00:04:11,670 --> 00:04:16,590
things like that okay but the important

00:04:14,670 --> 00:04:20,459
thing to understand here is it is as

00:04:16,590 --> 00:04:23,370
your sequel database okay what that

00:04:20,459 --> 00:04:25,260
means is you're running on essentially V

00:04:23,370 --> 00:04:27,060
next all the time

00:04:25,260 --> 00:04:28,860
it's got the latest bits there's no

00:04:27,060 --> 00:04:29,130
updates no infrastructure that type of

00:04:28,860 --> 00:04:30,990
thing

00:04:29,130 --> 00:04:32,670
okay which brings us onto the question

00:04:30,990 --> 00:04:34,760
I've been asked a lot is it really past

00:04:32,670 --> 00:04:36,570
because you're saying an instance yes

00:04:34,760 --> 00:04:38,940
because when you look at it your

00:04:36,570 --> 00:04:42,170
unselect a tout version it's as your

00:04:38,940 --> 00:04:44,520
sequel database now this is a fun one

00:04:42,170 --> 00:04:47,610
the version numbers between sequel bed

00:04:44,520 --> 00:04:49,320
database and retail sequel server two

00:04:47,610 --> 00:04:52,410
different things they diverged a long

00:04:49,320 --> 00:04:54,570
time ago okay so when you run select a

00:04:52,410 --> 00:04:58,080
top version and tells you a v12 database

00:04:54,570 --> 00:04:59,940
it's not talking sequel server 2014 okay

00:04:58,080 --> 00:05:02,850
about four or five years ago Microsoft

00:04:59,940 --> 00:05:04,050
retired the original form of Azure

00:05:02,850 --> 00:05:06,810
sequel database and replaced it with

00:05:04,050 --> 00:05:10,620
what they refer to as a v12 database

00:05:06,810 --> 00:05:12,390
type okay so yeah there's been a lot of

00:05:10,620 --> 00:05:14,370
discussion online and in various groups

00:05:12,390 --> 00:05:18,120
or members of but it says 12 that means

00:05:14,370 --> 00:05:19,080
14 No okay you go to a database you run

00:05:18,120 --> 00:05:20,790
exactly the same command you'll see

00:05:19,080 --> 00:05:24,210
exactly the same version numbers you may

00:05:20,790 --> 00:05:25,620
see slightly higher on managed instance

00:05:24,210 --> 00:05:28,830
at the moment because it's still running

00:05:25,620 --> 00:05:32,450
through public preview but it is how's

00:05:28,830 --> 00:05:32,450
your sequel database under the hood okay

00:05:33,260 --> 00:05:38,850
so yeah don't worry if you do that and

00:05:35,790 --> 00:05:40,350
you see 12 is the latest bits it's got

00:05:38,850 --> 00:05:43,650
all of the latest capabilities of the

00:05:40,350 --> 00:05:46,050
sequel server 2016-2017 has from an

00:05:43,650 --> 00:05:47,460
engine perspective plus a whole bunch

00:05:46,050 --> 00:05:49,410
more when it comes to the

00:05:47,460 --> 00:05:52,800
programmability in the surface area okay

00:05:49,410 --> 00:05:56,280
but yeah it is pass essentially what

00:05:52,800 --> 00:05:58,770
that means is no OS to manage okay now

00:05:56,280 --> 00:06:01,650
Microsoft are expanding the OS footprint

00:05:58,770 --> 00:06:02,880
for sequel server retail to Linux which

00:06:01,650 --> 00:06:04,970
allows us to use it in things like

00:06:02,880 --> 00:06:07,080
docker containers and what-have-you but

00:06:04,970 --> 00:06:09,060
it still runs on Windows operating

00:06:07,080 --> 00:06:11,400
systems still need mean need to be

00:06:09,060 --> 00:06:13,200
maintained no sequel server patching

00:06:11,400 --> 00:06:15,390
Microsoft have gone away from service

00:06:13,200 --> 00:06:17,880
packs quite simply they're now running

00:06:15,390 --> 00:06:20,850
on a much much more frequent cadence of

00:06:17,880 --> 00:06:23,070
pretty much every 60 ish days they're

00:06:20,850 --> 00:06:24,480
dropping a cumulative update now the

00:06:23,070 --> 00:06:26,610
reason that Microsoft are doing that is

00:06:24,480 --> 00:06:27,600
because they're running as your sequel

00:06:26,610 --> 00:06:29,070
database and they're starting to feel

00:06:27,600 --> 00:06:31,530
the pain that we felt for a very long

00:06:29,070 --> 00:06:34,080
time so it's in their best interest to

00:06:31,530 --> 00:06:35,760
actually fix this now so the retail side

00:06:34,080 --> 00:06:37,290
of things is reaping the benefits of it

00:06:35,760 --> 00:06:39,340
but it does come with a big

00:06:37,290 --> 00:06:40,300
administrative overhead that's not there

00:06:39,340 --> 00:06:42,370
because you get that continuous

00:06:40,300 --> 00:06:44,199
deployment capability the Microsoft are

00:06:42,370 --> 00:06:46,680
running with the Azure platform when

00:06:44,199 --> 00:06:48,550
they bundle all the fixes up they go

00:06:46,680 --> 00:06:53,650
high availability disaster recovery

00:06:48,550 --> 00:06:55,240
built-in built-in this is a fun one

00:06:53,650 --> 00:06:56,290
under the hood because it's actually

00:06:55,240 --> 00:06:58,389
will database you've got multiple

00:06:56,290 --> 00:07:00,639
replicas of the data ok multiple

00:06:58,389 --> 00:07:01,870
databases it sits on top of and will

00:07:00,639 --> 00:07:03,940
cover the storage later but essentially

00:07:01,870 --> 00:07:06,850
it sits on top of Azure storage which is

00:07:03,940 --> 00:07:08,229
a nice replicated storage they run a

00:07:06,850 --> 00:07:09,699
huge amount of consistency checking and

00:07:08,229 --> 00:07:11,110
everything under the hood so again that

00:07:09,699 --> 00:07:12,669
tends to alleviate things like the need

00:07:11,110 --> 00:07:14,530
to run check DB which is database

00:07:12,669 --> 00:07:16,120
consistency checking identifying

00:07:14,530 --> 00:07:20,380
corruption I'm sort of doing a lot of

00:07:16,120 --> 00:07:24,280
this in the background ok the high

00:07:20,380 --> 00:07:26,229
availability yeah I can only talk about

00:07:24,280 --> 00:07:27,610
the general-purpose variant at the

00:07:26,229 --> 00:07:29,919
moment because that's the one that's in

00:07:27,610 --> 00:07:35,380
public preview there is another variant

00:07:29,919 --> 00:07:37,060
called business critical but that's all

00:07:35,380 --> 00:07:41,320
I can say at the moment because they

00:07:37,060 --> 00:07:42,880
made me sign some paperwork but

00:07:41,320 --> 00:07:44,350
essentially it's built on top of the

00:07:42,880 --> 00:07:46,780
Azure storage and it's multiple replicas

00:07:44,350 --> 00:07:48,520
and they just the hive able to compute

00:07:46,780 --> 00:07:50,590
fails it brings another bit on line if

00:07:48,520 --> 00:07:53,229
the storage fails it just swaps out in

00:07:50,590 --> 00:07:53,740
the background ok so there's a lot going

00:07:53,229 --> 00:07:55,000
on there

00:07:53,740 --> 00:07:57,280
that we don't need to worry about

00:07:55,000 --> 00:07:59,020
anymore building highly available data

00:07:57,280 --> 00:08:02,050
platform solutions it's the joys of

00:07:59,020 --> 00:08:04,419
platforms of service ok lost recovery

00:08:02,050 --> 00:08:05,950
they do the backups for you as per as

00:08:04,419 --> 00:08:07,300
you see with database and you've also

00:08:05,950 --> 00:08:08,860
got the ability to than leverage long

00:08:07,300 --> 00:08:11,950
term retention for up to ten years if

00:08:08,860 --> 00:08:13,720
you configure it small tangent if you do

00:08:11,950 --> 00:08:15,820
initially goes for Azure sequel database

00:08:13,720 --> 00:08:18,940
as well if you set up long term

00:08:15,820 --> 00:08:21,070
retention delete the backups in long

00:08:18,940 --> 00:08:23,200
term retention storage before you delete

00:08:21,070 --> 00:08:24,639
the database because if you do it you

00:08:23,200 --> 00:08:26,620
essentially often the storage in it's a

00:08:24,639 --> 00:08:28,870
real pain in the backside to go and find

00:08:26,620 --> 00:08:30,300
you end up still paying for it because

00:08:28,870 --> 00:08:32,560
it's still there

00:08:30,300 --> 00:08:34,690
delete the storage or delete the backups

00:08:32,560 --> 00:08:36,219
first then delete the database otherwise

00:08:34,690 --> 00:08:37,330
it cost you money so now we start

00:08:36,219 --> 00:08:39,039
thinking about okay well we're a

00:08:37,330 --> 00:08:42,550
Microsoft taking a city is it the

00:08:39,039 --> 00:08:44,890
equivalent of RDS well kind of ok RDS is

00:08:42,550 --> 00:08:45,940
a halfway house between managed instance

00:08:44,890 --> 00:08:48,700
and as your sequel database from a

00:08:45,940 --> 00:08:50,170
functionality perspective ok the big

00:08:48,700 --> 00:08:51,610
differences here are the Amazon are

00:08:50,170 --> 00:08:52,870
running there's on the retail variant of

00:08:51,610 --> 00:08:53,770
sequel server so all they've got

00:08:52,870 --> 00:08:55,330
available to them

00:08:53,770 --> 00:08:56,709
they're running up VMs in the background

00:08:55,330 --> 00:08:59,110
and underneath there essentially

00:08:56,709 --> 00:09:00,640
abstracting that off okay so you have

00:08:59,110 --> 00:09:03,070
got the ability to from a compatibility

00:09:00,640 --> 00:09:06,220
perspective you've got the options

00:09:03,070 --> 00:09:09,490
they're going fourteen sixteen seventeen

00:09:06,220 --> 00:09:11,260
and deploying that under RDS so two

00:09:09,490 --> 00:09:12,220
depends on the applications you're going

00:09:11,260 --> 00:09:14,709
to be running as to whether or not you

00:09:12,220 --> 00:09:16,839
can leverage that whereas as your sequel

00:09:14,709 --> 00:09:18,310
database we're going to be running on

00:09:16,839 --> 00:09:20,410
the very latest builds it's continually

00:09:18,310 --> 00:09:23,170
updated in the background you do have

00:09:20,410 --> 00:09:26,620
compatibility mode compatibility mode is

00:09:23,170 --> 00:09:29,140
all about how the engine will handle

00:09:26,620 --> 00:09:31,089
interpret and execute your T sequel okay

00:09:29,140 --> 00:09:32,649
depending on which compatibility mode

00:09:31,089 --> 00:09:34,709
you have in place any given point in

00:09:32,649 --> 00:09:38,890
time you may see different behaviors

00:09:34,709 --> 00:09:42,029
most notable are some of the DMV's so a

00:09:38,890 --> 00:09:44,770
good example is back in the 2008

00:09:42,029 --> 00:09:49,200
compatibility modes if you nest things

00:09:44,770 --> 00:09:52,930
like the the DB ID function into the

00:09:49,200 --> 00:09:56,170
index physical stats management function

00:09:52,930 --> 00:09:58,480
it won't work because that doesn't for

00:09:56,170 --> 00:09:59,829
some really bizarre reason the database

00:09:58,480 --> 00:10:01,750
ID function just doesn't work when you

00:09:59,829 --> 00:10:03,910
nest it bring it up to 2012

00:10:01,750 --> 00:10:07,060
compatibility mode works a treat okay

00:10:03,910 --> 00:10:08,200
that's what compatibility mode is you do

00:10:07,060 --> 00:10:10,180
deal with retail sequel server

00:10:08,200 --> 00:10:11,320
on-premises VMs things like that it

00:10:10,180 --> 00:10:13,660
doesn't mean you're running in a

00:10:11,320 --> 00:10:15,730
database at a lower level and and take

00:10:13,660 --> 00:10:18,760
it back it's all about how the engine

00:10:15,730 --> 00:10:21,970
interprets the the T sequel from an

00:10:18,760 --> 00:10:23,020
authentication perspective both of them

00:10:21,970 --> 00:10:24,670
have sequel server authentication

00:10:23,020 --> 00:10:27,899
capabilities okay

00:10:24,670 --> 00:10:30,250
both of them have Directory Integration

00:10:27,899 --> 00:10:32,020
RDS uses Amazon's Active Directory

00:10:30,250 --> 00:10:33,550
Integration mechanisms which in my

00:10:32,020 --> 00:10:35,980
experience is not the easiest thing to

00:10:33,550 --> 00:10:37,390
set up if you start looking a building

00:10:35,980 --> 00:10:39,640
hybrid environment so if you're working

00:10:37,390 --> 00:10:41,500
with an on-premise estate at this point

00:10:39,640 --> 00:10:42,910
in time where you're going to Enterprise

00:10:41,500 --> 00:10:44,529
Active Directory and things like that

00:10:42,910 --> 00:10:46,959
and you want to facilitate single

00:10:44,529 --> 00:10:50,279
sign-on through the applications it can

00:10:46,959 --> 00:10:52,420
be a bit of a pain in the butt to set up

00:10:50,279 --> 00:10:55,990
conversely as your Active Directory

00:10:52,420 --> 00:10:57,579
really easy to set up but unless you've

00:10:55,990 --> 00:11:01,029
engineered your applications to leverage

00:10:57,579 --> 00:11:04,600
it it goes down the pan you can't fire

00:11:01,029 --> 00:11:06,490
up say a Windows service so for example

00:11:04,600 --> 00:11:07,629
if you take a standard off-the-shelf is

00:11:06,490 --> 00:11:09,249
any apps such as

00:11:07,629 --> 00:11:11,079
we're running as a Windows service we

00:11:09,249 --> 00:11:13,209
haven't yet architected than the ability

00:11:11,079 --> 00:11:15,790
to authenticate against Azure Active

00:11:13,209 --> 00:11:17,230
Directory so if you're running as a

00:11:15,790 --> 00:11:21,129
Windows service where the windows use

00:11:17,230 --> 00:11:22,480
Windows user on a virtual machine that's

00:11:21,129 --> 00:11:24,459
connected to do traditional Active

00:11:22,480 --> 00:11:27,129
Directory if we try to authenticate

00:11:24,459 --> 00:11:29,649
against as your active sorry Azure

00:11:27,129 --> 00:11:31,929
Active Directory via managed instance it

00:11:29,649 --> 00:11:35,230
will fail because the protocols and the

00:11:31,929 --> 00:11:39,749
API is are different okay Microsoft has

00:11:35,230 --> 00:11:43,029
released preview I think the term is now

00:11:39,749 --> 00:11:46,869
dotnet for seven - I don't think it's

00:11:43,029 --> 00:11:48,309
gone GA yet but that has a number or

00:11:46,869 --> 00:11:49,600
four starts got a number of fixes in and

00:11:48,309 --> 00:11:51,879
around the Microsoft data platform

00:11:49,600 --> 00:11:54,220
components that it's built into but also

00:11:51,879 --> 00:11:57,009
they've enhanced the capabilities when

00:11:54,220 --> 00:11:57,939
it comes to making it a lot easier to

00:11:57,009 --> 00:11:59,199
build applications that will

00:11:57,939 --> 00:12:01,449
authenticate against Azure Active

00:11:59,199 --> 00:12:04,029
Directory so if you are looking at doing

00:12:01,449 --> 00:12:05,709
that for single sign-on running a

00:12:04,029 --> 00:12:07,449
services and things like that against

00:12:05,709 --> 00:12:12,040
now your Active Directory have a look at

00:12:07,449 --> 00:12:14,110
daum net for 72 one of the big things

00:12:12,040 --> 00:12:16,869
with RDS is you don't get full SI

00:12:14,110 --> 00:12:18,699
privileges okay also whilst you have got

00:12:16,869 --> 00:12:20,470
things like signal agent you're limited

00:12:18,699 --> 00:12:22,689
so if you create jobs you're the only

00:12:20,470 --> 00:12:24,100
one who sees them okay so if you want to

00:12:22,689 --> 00:12:26,439
run your index rebuilds and stuff like

00:12:24,100 --> 00:12:28,329
that you set it up and off you go but no

00:12:26,439 --> 00:12:30,009
one else finds it easy to have a look at

00:12:28,329 --> 00:12:33,999
it essentially the MS DB database is

00:12:30,009 --> 00:12:36,369
locked down with an instance it's full

00:12:33,999 --> 00:12:41,230
sa rights and okay you've got sis admin

00:12:36,369 --> 00:12:47,589
privileges you can do as you need is

00:12:41,230 --> 00:12:51,519
anyone here using RDS at the moment of

00:12:47,589 --> 00:12:53,319
the - I can see benefits in both

00:12:51,519 --> 00:12:56,290
depending on the type of applications

00:12:53,319 --> 00:12:58,360
you're building if you still need a

00:12:56,290 --> 00:13:00,549
relational engine and you want a very

00:12:58,360 --> 00:13:02,999
fast path to building something managed

00:13:00,549 --> 00:13:06,249
instance makes life a whole lot easier

00:13:02,999 --> 00:13:09,339
so that's what we have now what are the

00:13:06,249 --> 00:13:11,049
workloads essentially in Microsoft we're

00:13:09,339 --> 00:13:14,350
really saying if it runs on retail

00:13:11,049 --> 00:13:15,850
sequel server there's a greater than 90%

00:13:14,350 --> 00:13:18,249
possibility that we can run it on

00:13:15,850 --> 00:13:20,230
managed instance which takes away all

00:13:18,249 --> 00:13:21,160
the server costs it takes away the

00:13:20,230 --> 00:13:22,540
operating system costs

00:13:21,160 --> 00:13:25,300
the management overhead of davin to

00:13:22,540 --> 00:13:28,000
stack rack servers put all in that type

00:13:25,300 --> 00:13:30,190
of thing okay there are gonna be areas

00:13:28,000 --> 00:13:31,600
that it doesn't work as well because

00:13:30,190 --> 00:13:34,240
it's platform-as-a-service if anyone's

00:13:31,600 --> 00:13:36,730
using functionality like our replication

00:13:34,240 --> 00:13:39,370
for example the moment that's not scoped

00:13:36,730 --> 00:13:41,230
in to be full parity yet because it's

00:13:39,370 --> 00:13:43,120
running on the azure service fabric all

00:13:41,230 --> 00:13:44,829
of the under the hood another quick look

00:13:43,120 --> 00:13:45,790
at the DMV's later but under the hood

00:13:44,829 --> 00:13:46,870
there's a whole pile of applications

00:13:45,790 --> 00:13:48,279
running on for service fabric

00:13:46,870 --> 00:13:51,009
essentially that go into making this

00:13:48,279 --> 00:13:54,220
service up the log readers and suchlike

00:13:51,009 --> 00:13:57,670
are not they're full replication it can

00:13:54,220 --> 00:13:59,829
be a subscriber for push transactional

00:13:57,670 --> 00:14:01,300
replication subscriptions but it can't

00:13:59,829 --> 00:14:03,279
be pull subscriptions you can't set up

00:14:01,300 --> 00:14:06,970
as a distributor and you can't set it up

00:14:03,279 --> 00:14:08,769
as the publisher is three third-party

00:14:06,970 --> 00:14:10,750
applications custom apps things like

00:14:08,769 --> 00:14:12,819
that if you're running it in the engine

00:14:10,750 --> 00:14:15,240
if you're using column store using

00:14:12,819 --> 00:14:17,769
hackaton all those features are there

00:14:15,240 --> 00:14:20,079
we recently architected our platform

00:14:17,769 --> 00:14:21,310
made some changes to it now we can

00:14:20,079 --> 00:14:23,430
monitor it now we can actually run our

00:14:21,310 --> 00:14:27,370
database on it relatively simple

00:14:23,430 --> 00:14:30,189
modifications to make okay I think it

00:14:27,370 --> 00:14:31,600
took us maybe we'll took us one and a

00:14:30,189 --> 00:14:34,949
half Sprint's to get all of the work

00:14:31,600 --> 00:14:37,569
done and a Sprint's or two weeks long so

00:14:34,949 --> 00:14:42,100
we did that got everything pushed the

00:14:37,569 --> 00:14:45,880
release everything was good I was happy

00:14:42,100 --> 00:14:47,079
anyway cloud migration hybrid

00:14:45,880 --> 00:14:48,189
deployments is really gunning for the

00:14:47,079 --> 00:14:50,620
enterprise for this one if you're

00:14:48,189 --> 00:14:53,110
building cloud borne applications from

00:14:50,620 --> 00:14:54,569
the outset if you're going to use

00:14:53,110 --> 00:14:57,699
relational as your sequel database

00:14:54,569 --> 00:15:00,100
singleton or elastic pools is probably

00:14:57,699 --> 00:15:01,420
the best way to go so long as you're

00:15:00,100 --> 00:15:02,980
familiar with that if you're not

00:15:01,420 --> 00:15:05,139
familiar with that particular one yet

00:15:02,980 --> 00:15:07,930
you can look at doing this there is no

00:15:05,139 --> 00:15:09,370
direct migration path so you can't take

00:15:07,930 --> 00:15:11,079
the database and just say actually move

00:15:09,370 --> 00:15:12,459
it to to an addressable database even

00:15:11,079 --> 00:15:15,100
though it's the same platform under the

00:15:12,459 --> 00:15:18,370
hood you've got to essentially do the

00:15:15,100 --> 00:15:19,629
whole generate a backpack or spit the

00:15:18,370 --> 00:15:20,980
schema route or use any of them

00:15:19,629 --> 00:15:25,449
agression services to take it from one

00:15:20,980 --> 00:15:26,740
service the other okay there are a lot

00:15:25,449 --> 00:15:29,559
of requests for them to add that

00:15:26,740 --> 00:15:30,519
capability of a push button move it so

00:15:29,559 --> 00:15:32,040
fingers crossed

00:15:30,519 --> 00:15:34,050
that'll come across

00:15:32,040 --> 00:15:37,640
so coming back to your question earlier

00:15:34,050 --> 00:15:39,870
about agent jobs agent is their

00:15:37,640 --> 00:15:42,090
full-blown sequel agent including

00:15:39,870 --> 00:15:45,750
database mail if you've got an external

00:15:42,090 --> 00:15:47,870
SMTP server such as office 365 Google

00:15:45,750 --> 00:15:49,950
things like that you set the DB mail up

00:15:47,870 --> 00:15:52,050
we have the same functionality that they

00:15:49,950 --> 00:15:53,100
have on print but yeah full sequel

00:15:52,050 --> 00:15:54,420
server agent there are certain

00:15:53,100 --> 00:15:57,090
restrictions around the job types

00:15:54,420 --> 00:15:58,680
you haven't got command exec because

00:15:57,090 --> 00:15:59,610
there's no command line there anymore

00:15:58,680 --> 00:16:02,790
because you're not running on a

00:15:59,610 --> 00:16:03,930
traditional operating system but a lot

00:16:02,790 --> 00:16:05,400
of other ones there the integration

00:16:03,930 --> 00:16:07,260
services and stuff like that because it

00:16:05,400 --> 00:16:08,820
will work with some of the other

00:16:07,260 --> 00:16:11,310
platforms of service offerings in and

00:16:08,820 --> 00:16:13,980
around ADF integration services in the

00:16:11,310 --> 00:16:15,660
cloud which is courtesy of Azure data

00:16:13,980 --> 00:16:17,250
factory and things like that you input

00:16:15,660 --> 00:16:19,580
the integration services catalog on

00:16:17,250 --> 00:16:23,160
managed instance and stuff like that

00:16:19,580 --> 00:16:25,500
CDC change tracking we've got access to

00:16:23,160 --> 00:16:27,360
those now never had them for out before

00:16:25,500 --> 00:16:30,270
the big one here across database queries

00:16:27,360 --> 00:16:32,340
native three part names because you're

00:16:30,270 --> 00:16:34,140
in the context of an instance it knows

00:16:32,340 --> 00:16:36,840
that there's multiple databases in this

00:16:34,140 --> 00:16:39,000
collection so yeah so long as you've got

00:16:36,840 --> 00:16:41,340
the the traditional login and user

00:16:39,000 --> 00:16:43,620
configurations to allow you to see in

00:16:41,340 --> 00:16:45,990
interact with those databases yeah you

00:16:43,620 --> 00:16:49,080
can build queries that are do CrossFit

00:16:45,990 --> 00:16:51,360
across a database of queries so joining

00:16:49,080 --> 00:16:53,820
data from database is one into two and

00:16:51,360 --> 00:16:55,920
three it's not a design pattern I like

00:16:53,820 --> 00:16:58,260
because it's a real nightmare to manage

00:16:55,920 --> 00:17:04,260
and migrate databases if you ever have

00:16:58,260 --> 00:17:07,380
to scale things out but there's an awful

00:17:04,260 --> 00:17:10,140
lot of it out there best one I ever had

00:17:07,380 --> 00:17:12,240
to deal with was working for a company

00:17:10,140 --> 00:17:14,220
where that we had it was an access front

00:17:12,240 --> 00:17:15,750
end for sequel server back-end it's

00:17:14,220 --> 00:17:18,540
about a hundred and something databases

00:17:15,750 --> 00:17:20,130
one database which had about 50 tables

00:17:18,540 --> 00:17:22,260
and then 100 and something views into

00:17:20,130 --> 00:17:24,420
all of these other databases doing

00:17:22,260 --> 00:17:26,280
three-point that's bad because when I

00:17:24,420 --> 00:17:28,800
had to move that there was an auto took

00:17:26,280 --> 00:17:30,870
me six months to move a database had to

00:17:28,800 --> 00:17:34,830
re-architect a whole pile of it linked

00:17:30,870 --> 00:17:36,810
servers are in okay link servers just

00:17:34,830 --> 00:17:38,910
means that we can access things at the

00:17:36,810 --> 00:17:40,230
moment that's restricted to other

00:17:38,910 --> 00:17:42,480
managed instances and other sequel

00:17:40,230 --> 00:17:45,570
servers retail sequel servers running in

00:17:42,480 --> 00:17:47,549
VMs on pram if you've got the networking

00:17:45,570 --> 00:17:48,779
place which will jump over service

00:17:47,549 --> 00:17:53,009
broker which is essentially service

00:17:48,779 --> 00:17:54,559
broker within the instance inter instant

00:17:53,009 --> 00:17:56,880
service broker doesn't function yet

00:17:54,559 --> 00:18:00,690
they've got it slated at some point

00:17:56,880 --> 00:18:03,659
deliver the big one here though is V net

00:18:00,690 --> 00:18:06,299
deployment so one of the biggest issues

00:18:03,659 --> 00:18:07,679
for enterprises that they had and also

00:18:06,299 --> 00:18:12,090
many many other people when they were

00:18:07,679 --> 00:18:13,799
building applications in Asia was the

00:18:12,090 --> 00:18:16,039
endpoint is always a publicly

00:18:13,799 --> 00:18:20,820
addressable endpoint it has to be unique

00:18:16,039 --> 00:18:22,440
okay what that means is when you go to

00:18:20,820 --> 00:18:24,269
set the permissions up you can say I

00:18:22,440 --> 00:18:26,509
want to restrict it so that only these

00:18:24,269 --> 00:18:28,799
IP addresses are able to come in or

00:18:26,509 --> 00:18:30,750
other Azure services and there's a tick

00:18:28,799 --> 00:18:33,419
box for that one that other Azure

00:18:30,750 --> 00:18:34,980
services tick box basically means any

00:18:33,419 --> 00:18:37,500
Azure service whether it's in your

00:18:34,980 --> 00:18:39,990
subscription or not so if someone got

00:18:37,500 --> 00:18:41,789
the credentials the login so the server

00:18:39,990 --> 00:18:44,580
name and database name user name

00:18:41,789 --> 00:18:46,139
password from other serve other

00:18:44,580 --> 00:18:51,690
subscriptions they've got full access to

00:18:46,139 --> 00:18:56,610
it okay be very careful with that one

00:18:51,690 --> 00:18:58,860
now what myself did was with manage

00:18:56,610 --> 00:19:00,509
instances the the managed instance

00:18:58,860 --> 00:19:02,519
entity that you create in the azure

00:19:00,509 --> 00:19:05,220
portal and the azure platform is

00:19:02,519 --> 00:19:07,440
deployed onto a V net so this is a

00:19:05,220 --> 00:19:09,870
virtual network subnet segment okay

00:19:07,440 --> 00:19:12,990
there is no public IP address a public

00:19:09,870 --> 00:19:14,759
endpoint so that locks that down but

00:19:12,990 --> 00:19:16,289
what that does mean is your applications

00:19:14,759 --> 00:19:21,360
have got to be able to connect and

00:19:16,289 --> 00:19:23,309
Traverse to that V net now there are

00:19:21,360 --> 00:19:25,340
various different service endpoint

00:19:23,309 --> 00:19:27,570
options available so if you're running

00:19:25,340 --> 00:19:29,309
blob storage a sequel database you can

00:19:27,570 --> 00:19:33,480
put them onto V Nets now through the

00:19:29,309 --> 00:19:35,879
service endpoints additionally with app

00:19:33,480 --> 00:19:37,850
service there is a container solution

00:19:35,879 --> 00:19:40,350
essentially that will allow you to

00:19:37,850 --> 00:19:42,299
basically come in through the networking

00:19:40,350 --> 00:19:44,759
portion there so if you are deploying

00:19:42,299 --> 00:19:46,409
directly to app service in the platforms

00:19:44,759 --> 00:19:47,940
of service offering you can get that

00:19:46,409 --> 00:19:50,370
networking into the V net and not have

00:19:47,940 --> 00:19:52,710
to traverse the public Internet if for

00:19:50,370 --> 00:19:55,769
whatever reason you do want a publicly

00:19:52,710 --> 00:19:57,960
available endpoint you're going to have

00:19:55,769 --> 00:19:59,720
to look at third-party solutions in the

00:19:57,960 --> 00:20:02,429
azure

00:19:59,720 --> 00:20:04,259
marketplace essentially looking at Kemp

00:20:02,429 --> 00:20:06,570
f5 barracuda

00:20:04,259 --> 00:20:08,399
they've all got virtual appliances that

00:20:06,570 --> 00:20:11,190
will be firewalls web application

00:20:08,399 --> 00:20:13,499
firewalls load balancers all of that

00:20:11,190 --> 00:20:15,600
sort of stuff and they're a lot more

00:20:13,499 --> 00:20:19,289
secure than just trying to sort of hack

00:20:15,600 --> 00:20:20,850
it open with something like RS server on

00:20:19,289 --> 00:20:22,440
Windows and stuff like that way you've

00:20:20,850 --> 00:20:25,379
got public endpoints and stuff like that

00:20:22,440 --> 00:20:28,769
set up the device then it'll give you

00:20:25,379 --> 00:20:30,480
full access control allow you to do TLS

00:20:28,769 --> 00:20:31,830
and all that sort of connection level

00:20:30,480 --> 00:20:33,509
authentication I'm sorry a connection

00:20:31,830 --> 00:20:38,879
level encryption then make life a lot

00:20:33,509 --> 00:20:40,619
easier we also have the ability to take

00:20:38,879 --> 00:20:42,690
native backups so we can run a backup

00:20:40,619 --> 00:20:44,070
database command but it's copy only and

00:20:42,690 --> 00:20:45,090
we can push out a blob store the reason

00:20:44,070 --> 00:20:46,830
for that is because if you want to

00:20:45,090 --> 00:20:48,359
migrate them between managed instances

00:20:46,830 --> 00:20:51,419
you're gonna take a backup and restore

00:20:48,359 --> 00:20:53,909
from blob store file layout as well

00:20:51,419 --> 00:20:56,220
now with Azure sequel database that's it

00:20:53,909 --> 00:20:58,019
you deploy the database everything is

00:20:56,220 --> 00:21:01,109
managed for you storage tier the works

00:20:58,019 --> 00:21:02,940
okay here we've actually got the ability

00:21:01,109 --> 00:21:05,220
to manage file groups and files so you

00:21:02,940 --> 00:21:07,499
can spread your data out you basically

00:21:05,220 --> 00:21:08,669
partition it as you need you can say

00:21:07,499 --> 00:21:12,029
actually I'm going to put all of this

00:21:08,669 --> 00:21:14,549
data for 2016 into this file group and

00:21:12,029 --> 00:21:16,919
these files and what have you okay so

00:21:14,549 --> 00:21:20,909
you've got that versatility that becomes

00:21:16,919 --> 00:21:25,070
very very important because when you

00:21:20,909 --> 00:21:29,850
come on to hit next no thank you

00:21:25,070 --> 00:21:31,649
no public endpoint what she said but it

00:21:29,850 --> 00:21:35,909
leverages Azure storage

00:21:31,649 --> 00:21:37,739
okay premium storage what this means is

00:21:35,909 --> 00:21:41,639
the under the hood you've essentially

00:21:37,739 --> 00:21:49,080
got some region of 200 as your premium

00:21:41,639 --> 00:21:51,359
disks now they are P 10 through 70 if

00:21:49,080 --> 00:21:54,029
you look I think I've got it in the

00:21:51,359 --> 00:21:57,389
slide deck as a link which I'll put up

00:21:54,029 --> 00:21:59,190
online but essentially the size of the

00:21:57,389 --> 00:22:01,950
file or some rather the size of the disk

00:21:59,190 --> 00:22:05,369
will dictate how much I owe you get

00:22:01,950 --> 00:22:09,059
through the Azure platform ok so the

00:22:05,369 --> 00:22:11,129
larger the disk the more throughput you

00:22:09,059 --> 00:22:13,049
get both in AI ops and megabytes per

00:22:11,129 --> 00:22:14,759
second basically most often

00:22:13,049 --> 00:22:16,019
making an assumption that the bigger the

00:22:14,759 --> 00:22:19,919
database the more you're gonna interact

00:22:16,019 --> 00:22:21,149
with it or the bigger the storage so

00:22:19,919 --> 00:22:24,239
what this means is because you've got

00:22:21,149 --> 00:22:25,499
access to the database files with

00:22:24,239 --> 00:22:28,529
managed instance you can just basically

00:22:25,499 --> 00:22:30,869
bloat them up with empty space okay

00:22:28,529 --> 00:22:34,649
make them big which means if you bump

00:22:30,869 --> 00:22:37,289
them up to say terabytes size files what

00:22:34,649 --> 00:22:38,909
that means is you'll then get the p70

00:22:37,289 --> 00:22:40,440
disk which has got all of the throughput

00:22:38,909 --> 00:22:42,320
even though you've got a very small

00:22:40,440 --> 00:22:44,820
amount of data in those data files

00:22:42,320 --> 00:22:47,269
you've got the full capability of the

00:22:44,820 --> 00:22:52,679
azure storage platform available to you

00:22:47,269 --> 00:22:56,039
storage is pretty cheap okay as far as I

00:22:52,679 --> 00:22:57,359
was concerned when you think if you want

00:22:56,039 --> 00:22:59,279
to bump it up if you got one database at

00:22:57,359 --> 00:23:01,379
the moment 120 gig you just turn into a

00:22:59,279 --> 00:23:03,679
terabyte size file you'll be paying

00:23:01,379 --> 00:23:07,950
maybe a couple of pounds more a month

00:23:03,679 --> 00:23:13,609
okay but the capability and throughput

00:23:07,950 --> 00:23:13,609
you get is worth way more than that okay

00:23:13,639 --> 00:23:16,679
business critical instances this is

00:23:15,629 --> 00:23:19,129
about all I can say about them at the

00:23:16,679 --> 00:23:22,769
moment but they use local storage on SSD

00:23:19,129 --> 00:23:24,239
okay local to the compute another

00:23:22,769 --> 00:23:25,379
benefit coming back to the no public

00:23:24,239 --> 00:23:27,480
endpoint piece and the fact we're

00:23:25,379 --> 00:23:28,919
deploying onto V Nets means that you've

00:23:27,480 --> 00:23:31,200
got a lot more control if you are

00:23:28,919 --> 00:23:33,529
working from an office environment and

00:23:31,200 --> 00:23:37,289
things like that you can establish a

00:23:33,529 --> 00:23:38,929
site-to-site VPN which means the traffic

00:23:37,289 --> 00:23:41,039
between you and azure is encrypted

00:23:38,929 --> 00:23:43,950
whereas previously with Azure sequel

00:23:41,039 --> 00:23:46,259
database singleton elastic pools you're

00:23:43,950 --> 00:23:50,309
going over the public endpoint yes it'll

00:23:46,259 --> 00:23:52,529
be doing TLS encryption on the

00:23:50,309 --> 00:23:55,619
connection between your app and what's

00:23:52,529 --> 00:23:57,090
up there but this just gives you that

00:23:55,619 --> 00:23:59,279
added protection do you know where it's

00:23:57,090 --> 00:24:01,679
going okay you know the route that is

00:23:59,279 --> 00:24:04,710
taking likewise if you've got very deep

00:24:01,679 --> 00:24:08,190
pockets you can buy Express route which

00:24:04,710 --> 00:24:10,169
is the high speed low latency high

00:24:08,190 --> 00:24:12,299
bandwidth MPLS capabilities that

00:24:10,169 --> 00:24:15,659
essentially you peer into the azure

00:24:12,299 --> 00:24:17,179
network fabrics so over here it's BT I

00:24:15,659 --> 00:24:19,379
think that provides that capability

00:24:17,179 --> 00:24:22,499
essentially you say here's a huge wedge

00:24:19,379 --> 00:24:23,609
of money give me a very big pipe to

00:24:22,499 --> 00:24:24,929
Azure

00:24:23,609 --> 00:24:25,790
if you got the vast quantities of data

00:24:24,929 --> 00:24:28,370
to do

00:24:25,790 --> 00:24:30,080
have a look at it now one of the fun

00:24:28,370 --> 00:24:31,220
things is we think about migrating

00:24:30,080 --> 00:24:34,100
database and we'll talk about in the

00:24:31,220 --> 00:24:35,420
back half of the presentation ma'am if

00:24:34,100 --> 00:24:37,700
you don't have to go down the route of

00:24:35,420 --> 00:24:40,790
Azure Express route or you don't have to

00:24:37,700 --> 00:24:43,010
go for VPN and wait for weeks you can

00:24:40,790 --> 00:24:46,400
put stuff on to USB disks and ship it to

00:24:43,010 --> 00:24:49,010
Microsoft essentially you bit lock of

00:24:46,400 --> 00:24:50,510
the debit lock of the drives you put all

00:24:49,010 --> 00:24:52,430
the stuff you want on them you ship them

00:24:50,510 --> 00:24:54,130
to the data center and then they put it

00:24:52,430 --> 00:24:56,930
into an azure blob store account for you

00:24:54,130 --> 00:24:58,010
so there are ways around it if you don't

00:24:56,930 --> 00:25:02,200
want to spend lots of money on

00:24:58,010 --> 00:25:07,520
networking any questions so far

00:25:02,200 --> 00:25:09,230
okay let's try a quick demo so what we

00:25:07,520 --> 00:25:10,970
have here is managed instances so we

00:25:09,230 --> 00:25:14,050
think about the azure portal anyone here

00:25:10,970 --> 00:25:14,050
use Azure at all for anything

00:25:14,980 --> 00:25:21,860
essentially what we now have is managed

00:25:18,680 --> 00:25:26,150
instances as an option here that we can

00:25:21,860 --> 00:25:28,370
use for creating as a service okay so

00:25:26,150 --> 00:25:31,010
nice and happy when we create them at

00:25:28,370 --> 00:25:35,090
the moment this is what we see managed

00:25:31,010 --> 00:25:36,860
instance still the standard behavior for

00:25:35,090 --> 00:25:38,210
a shoe you've got to build the resource

00:25:36,860 --> 00:25:41,600
group you put it in the resource group

00:25:38,210 --> 00:25:43,220
and most of the other stuff is managed

00:25:41,600 --> 00:25:44,810
for you so we've got West Europe is

00:25:43,220 --> 00:25:48,380
where I'm storing it and which

00:25:44,810 --> 00:25:49,250
subscription it's in so let's jump in

00:25:48,380 --> 00:25:56,110
and have a quick look at it from the

00:25:49,250 --> 00:25:56,110
portal here so what we're able to see

00:25:56,320 --> 00:26:01,250
various different options available to

00:25:58,430 --> 00:26:04,580
us pricing tier now like I just ignore

00:26:01,250 --> 00:26:08,200
most of fun one Microsoft changed the

00:26:04,580 --> 00:26:12,890
way that as your sequel database is

00:26:08,200 --> 00:26:17,690
scaled and build okay up until about two

00:26:12,890 --> 00:26:21,740
weeks ago you only have the option to

00:26:17,690 --> 00:26:23,810
run what they refer to as DTU database

00:26:21,740 --> 00:26:26,000
throughput unit which is a magical

00:26:23,810 --> 00:26:30,350
number that they calculate based around

00:26:26,000 --> 00:26:34,550
how much I owe so log i/o data i/o and

00:26:30,350 --> 00:26:36,800
CPU you're using okay managed instance

00:26:34,550 --> 00:26:39,020
when that was introduced into public

00:26:36,800 --> 00:26:39,630
preview essentially gives us the ability

00:26:39,020 --> 00:26:42,660
to say

00:26:39,630 --> 00:26:45,390
how many virtual cause we want and how

00:26:42,660 --> 00:26:46,830
much storage we want okay so it's more

00:26:45,390 --> 00:26:48,960
akin so we know that we're running

00:26:46,830 --> 00:26:52,740
sequel server on a machine that's got

00:26:48,960 --> 00:26:54,000
four cores and that much storage that's

00:26:52,740 --> 00:26:56,790
how they're trying to ease that burden

00:26:54,000 --> 00:26:58,620
of migration and scaling it and picking

00:26:56,790 --> 00:27:00,660
the right sort of size because dtu's

00:26:58,620 --> 00:27:02,070
it's like wall during a basic a standard

00:27:00,660 --> 00:27:06,180
or a premium and then within each of

00:27:02,070 --> 00:27:08,970
those how big do I go and the top NP

00:27:06,180 --> 00:27:13,980
databases you're talking upwards of

00:27:08,970 --> 00:27:16,350
$10,000 a month so it's important

00:27:13,980 --> 00:27:17,460
they're so management's brought in V

00:27:16,350 --> 00:27:18,780
cause they've actually brought that and

00:27:17,460 --> 00:27:21,450
now down into as your sequel database

00:27:18,780 --> 00:27:23,850
itself as well so you've got both the

00:27:21,450 --> 00:27:25,560
hype you've got the dtu's and V cause as

00:27:23,850 --> 00:27:27,960
an option when it comes to creating

00:27:25,560 --> 00:27:29,940
house you see the databases my suspicion

00:27:27,960 --> 00:27:33,210
is that dtu's is going to go the way the

00:27:29,940 --> 00:27:35,070
dodo and we're gonna be sticking with V

00:27:33,210 --> 00:27:37,380
course so just be aware of that one but

00:27:35,070 --> 00:27:38,970
we have got the ability to scale up and

00:27:37,380 --> 00:27:42,630
down as needed

00:27:38,970 --> 00:27:43,950
okay at the moment we've got limited

00:27:42,630 --> 00:27:47,790
capabilities here because we're still in

00:27:43,950 --> 00:27:50,760
preview but one of the key ones here

00:27:47,790 --> 00:27:52,130
that's worth thinking about is the joys

00:27:50,760 --> 00:27:54,260
of platform-as-a-service

00:27:52,130 --> 00:27:57,120
means that Moe's got a lot of

00:27:54,260 --> 00:27:59,400
capabilities built in okay threat

00:27:57,120 --> 00:28:01,590
detection being one of them it's a key

00:27:59,400 --> 00:28:02,850
part of the Azure platform because

00:28:01,590 --> 00:28:04,560
they're looking at all of the network

00:28:02,850 --> 00:28:06,960
traffic across the entire Azure estate

00:28:04,560 --> 00:28:08,160
they're able to run machine learning

00:28:06,960 --> 00:28:10,460
heuristics and things like that in the

00:28:08,160 --> 00:28:12,930
background to look at help identifying

00:28:10,460 --> 00:28:14,970
potential threats to your systems and

00:28:12,930 --> 00:28:18,170
it's as simple as ticking three boxes

00:28:14,970 --> 00:28:20,670
and saying yes turn this on for me okay

00:28:18,170 --> 00:28:21,840
so it can do that detection is someone

00:28:20,670 --> 00:28:23,790
trying to brute-force your account are

00:28:21,840 --> 00:28:25,410
you liable and susceptible to sequel

00:28:23,790 --> 00:28:27,030
injection no you try is someone trying

00:28:25,410 --> 00:28:28,590
to do sequel injection attack against

00:28:27,030 --> 00:28:30,090
you all of this is capability that

00:28:28,590 --> 00:28:32,370
exists for a sequel database in

00:28:30,090 --> 00:28:34,410
platform-as-a-service and at the tick of

00:28:32,370 --> 00:28:36,330
a box we'll be able to sort of be

00:28:34,410 --> 00:28:40,800
available for you to understand and get

00:28:36,330 --> 00:28:42,570
advice from the platform okay other than

00:28:40,800 --> 00:28:44,520
that we can see managed instance

00:28:42,570 --> 00:28:45,870
databases here I've only got one of them

00:28:44,520 --> 00:28:49,680
at the moment that will change later how

00:28:45,870 --> 00:28:51,990
much CPU I'm using how big it is you'll

00:28:49,680 --> 00:28:53,900
notice here this is the pricing tier

00:28:51,990 --> 00:28:58,560
which is the configuration I'm using

00:28:53,900 --> 00:29:03,180
now the size that you've got is 816 and

00:28:58,560 --> 00:29:05,100
24v cause okay now depending on which

00:29:03,180 --> 00:29:06,630
generation hardware you end up on

00:29:05,100 --> 00:29:09,780
depends on how much memory you're gonna

00:29:06,630 --> 00:29:12,330
get now the moment Microsoft has stated

00:29:09,780 --> 00:29:18,960
that it's anywhere between 5 and 8 gigs

00:29:12,330 --> 00:29:20,430
of ram per vehicle okay so as you scale

00:29:18,960 --> 00:29:21,870
the system up you're gonna get an

00:29:20,430 --> 00:29:23,910
increase in memory as well and if you're

00:29:21,870 --> 00:29:28,010
on the Gen 5 Hardware in all likelihood

00:29:23,910 --> 00:29:30,810
you're gonna get a bit more memory okay

00:29:28,010 --> 00:29:35,310
at the moment I think I'm running on a

00:29:30,810 --> 00:29:37,050
g4 I think I've got a couple of them in

00:29:35,310 --> 00:29:39,930
subscriptions and they're on different

00:29:37,050 --> 00:29:41,310
bits um so yeah we've got a various

00:29:39,930 --> 00:29:43,100
different pieces to have a look at here

00:29:41,310 --> 00:29:45,180
threat action

00:29:43,100 --> 00:29:47,910
connections strings there's not much

00:29:45,180 --> 00:29:50,190
here from the portal okay we can also

00:29:47,910 --> 00:29:51,930
say how much storage we want up to 8

00:29:50,190 --> 00:29:54,870
terabytes at the moment I'm sure that

00:29:51,930 --> 00:29:56,430
will get larger one of the big things

00:29:54,870 --> 00:29:58,860
that is useful those if you've got

00:29:56,430 --> 00:30:01,260
existing on-premises licenses under si

00:29:58,860 --> 00:30:02,850
you can tick this little box down here

00:30:01,260 --> 00:30:05,070
and it will save you money essentially

00:30:02,850 --> 00:30:06,690
you get license transportability so if

00:30:05,070 --> 00:30:08,880
you paid for Software Assurance licenses

00:30:06,690 --> 00:30:12,210
on Prem and you decommission those

00:30:08,880 --> 00:30:16,170
servers you can basically transfer the

00:30:12,210 --> 00:30:17,670
licensing and offset your costs so most

00:30:16,170 --> 00:30:20,360
off of that with virtual machines and

00:30:17,670 --> 00:30:23,970
with a couple of other options as well

00:30:20,360 --> 00:30:25,410
so if we bring up this one a second and

00:30:23,970 --> 00:30:31,650
then we'll break for pete's or in a

00:30:25,410 --> 00:30:35,940
moment I think the zoom it's running

00:30:31,650 --> 00:30:38,730
here yes it is so I've added um to

00:30:35,940 --> 00:30:40,620
object Explorer here managed instance a

00:30:38,730 --> 00:30:46,680
local retail sequel server instance a

00:30:40,620 --> 00:30:48,330
national database okay now we'll

00:30:46,680 --> 00:30:52,200
concentrate on these two because

00:30:48,330 --> 00:30:57,330
essentially they are fundamentally the

00:30:52,200 --> 00:30:59,220
same thing there we go

00:30:57,330 --> 00:31:01,470
so here's my managed instance you can

00:30:59,220 --> 00:31:04,160
see what databases node here's my retail

00:31:01,470 --> 00:31:06,720
sequel server I've got that as well okay

00:31:04,160 --> 00:31:07,590
and I can drill down I've got all of the

00:31:06,720 --> 00:31:13,919
databases this

00:31:07,590 --> 00:31:15,929
security I got logins si server objects

00:31:13,919 --> 00:31:17,580
so endpoints linked servers all of that

00:31:15,929 --> 00:31:19,350
sort of stuff that system databases are

00:31:17,580 --> 00:31:21,210
all there you remember what I said

00:31:19,350 --> 00:31:27,150
earlier about it being version 12

00:31:21,210 --> 00:31:30,659
databases 12.0 dots 2008 okay that's not

00:31:27,150 --> 00:31:34,380
2014 that's a v12 classical database if

00:31:30,659 --> 00:31:35,669
we come down you'll see that the as you

00:31:34,380 --> 00:31:39,390
see what they debase I'm connected to is

00:31:35,669 --> 00:31:41,549
also that particular version but how

00:31:39,390 --> 00:31:43,409
does this differ when I log into all I

00:31:41,549 --> 00:31:47,460
get some databases and some security

00:31:43,409 --> 00:31:48,899
settings now the reason I see all of the

00:31:47,460 --> 00:31:50,940
database is because I've connected with

00:31:48,899 --> 00:31:54,210
a server level account for article

00:31:50,940 --> 00:31:55,470
database and connected to master so I've

00:31:54,210 --> 00:31:57,870
got visibility all of those if you've

00:31:55,470 --> 00:32:00,990
got connectivity into a single database

00:31:57,870 --> 00:32:02,789
on a their base you see that and master

00:32:00,990 --> 00:32:04,710
you'll also notice here that I've got an

00:32:02,789 --> 00:32:06,450
adjustable database a data warehouse on

00:32:04,710 --> 00:32:07,740
that particular one that's not

00:32:06,450 --> 00:32:10,679
functionality that comes with a managed

00:32:07,740 --> 00:32:12,539
instance that's discrete okay so whilst

00:32:10,679 --> 00:32:15,899
you can coexist David Sigal database and

00:32:12,539 --> 00:32:18,390
manage sequel TW on the same logical

00:32:15,899 --> 00:32:21,899
server entity you can't do that and have

00:32:18,390 --> 00:32:24,990
a date DW in managed instance

00:32:21,899 --> 00:32:29,330
environment again from a security you've

00:32:24,990 --> 00:32:29,330
got logins there you'll notice up here

00:32:29,510 --> 00:32:33,240
we got things like credential server

00:32:31,980 --> 00:32:37,260
roles and things like that ledge don't

00:32:33,240 --> 00:32:42,090
exist for Ashes database but they do up

00:32:37,260 --> 00:32:43,320
here for managed instance credentials in

00:32:42,090 --> 00:32:44,820
Azure sequel database or at the database

00:32:43,320 --> 00:32:47,669
level not at the logical server entity

00:32:44,820 --> 00:32:48,840
level we've got credentials here and

00:32:47,669 --> 00:32:51,120
managed instance because that's how we

00:32:48,840 --> 00:32:52,860
interact with blob storage and that's

00:32:51,120 --> 00:32:55,020
what we're going to look at in the back

00:32:52,860 --> 00:32:57,179
half of it when we go through a

00:32:55,020 --> 00:33:00,539
migration to face it's got built-in high

00:32:57,179 --> 00:33:02,159
availability around data synchronization

00:33:00,539 --> 00:33:06,510
resiliency all built through the

00:33:02,159 --> 00:33:07,409
platform now the big issue comes when we

00:33:06,510 --> 00:33:08,669
start thinking about things are outside

00:33:07,409 --> 00:33:11,850
of the database and outside of the

00:33:08,669 --> 00:33:16,679
database server logins is a real classic

00:33:11,850 --> 00:33:17,760
one okay Network shares well we can't

00:33:16,679 --> 00:33:20,059
get to them because we're platform

00:33:17,760 --> 00:33:21,539
as-a-service okay

00:33:20,059 --> 00:33:24,629
likewise age

00:33:21,539 --> 00:33:27,869
jobs if you're dealing with things like

00:33:24,629 --> 00:33:29,220
for example I'm using XP c'mon shell for

00:33:27,869 --> 00:33:30,450
some bizarre reason to move things

00:33:29,220 --> 00:33:33,149
around not gonna happen

00:33:30,450 --> 00:33:35,940
we need to react attack those okay we

00:33:33,149 --> 00:33:38,970
have got CLR back which we lost for a

00:33:35,940 --> 00:33:40,350
while in Asia sequel database because of

00:33:38,970 --> 00:33:43,019
the way that it needs to be sandboxed

00:33:40,350 --> 00:33:45,749
and isolated and things like that - is

00:33:43,019 --> 00:33:47,789
bringing that capability back a guy

00:33:45,749 --> 00:33:51,509
called Yavin Popovich has got some

00:33:47,789 --> 00:33:53,070
really good stuff up on github he's also

00:33:51,509 --> 00:33:55,830
got some what I would consider truly

00:33:53,070 --> 00:33:57,869
terrible things on github like building

00:33:55,830 --> 00:34:00,830
a CLR routine that uses curl to call a

00:33:57,869 --> 00:34:04,499
web service directly from the database

00:34:00,830 --> 00:34:05,909
please don't do that it's the quickest

00:34:04,499 --> 00:34:09,559
way to kill performance in the database

00:34:05,909 --> 00:34:12,000
engine but yeah windows logins networks

00:34:09,559 --> 00:34:14,579
file stream now this is a fun one file

00:34:12,000 --> 00:34:17,010
stream will not work on general purpose

00:34:14,579 --> 00:34:18,839
platform the reason being is that you

00:34:17,010 --> 00:34:20,549
need a local storage essentially because

00:34:18,839 --> 00:34:23,909
you're essentially dealing with network

00:34:20,549 --> 00:34:25,889
attached storage doesn't work so if

00:34:23,909 --> 00:34:28,290
you're using a file table file stream

00:34:25,889 --> 00:34:31,530
also Hecate on the in memory engine

00:34:28,290 --> 00:34:34,980
relies on file stream like capabilities

00:34:31,530 --> 00:34:36,270
okay now when we start thinking about

00:34:34,980 --> 00:34:38,250
these compatibility checks I mentioned

00:34:36,270 --> 00:34:40,559
there's some scripts so you can do it

00:34:38,250 --> 00:34:41,970
all yourself if you were fancy reading

00:34:40,559 --> 00:34:45,889
the documentation and hoping that it's

00:34:41,970 --> 00:34:48,299
up to date a data migration assistant

00:34:45,889 --> 00:34:51,599
it's both a blessing and a curse

00:34:48,299 --> 00:34:55,079
okay it was developed by a different

00:34:51,599 --> 00:34:58,859
team and it's a command line app it's

00:34:55,079 --> 00:35:00,809
not integrated PowerShell the fun one is

00:34:58,859 --> 00:35:02,160
if you want to do with multiple data

00:35:00,809 --> 00:35:04,049
pieces with it you need to feed it a

00:35:02,160 --> 00:35:06,510
connection string a full connection

00:35:04,049 --> 00:35:08,309
string for every database which means it

00:35:06,510 --> 00:35:09,420
gets very verbose very quickly when

00:35:08,309 --> 00:35:13,109
you're dealing with a large amount of

00:35:09,420 --> 00:35:15,839
data and databases sorry okay but it is

00:35:13,109 --> 00:35:17,430
very useful one caveat be aware if

00:35:15,839 --> 00:35:18,900
you're using XML queries in your

00:35:17,430 --> 00:35:19,799
database in views and still procedure

00:35:18,900 --> 00:35:22,559
things like that

00:35:19,799 --> 00:35:25,260
it can flag those as cross database

00:35:22,559 --> 00:35:27,210
queries and then not I've spoken to one

00:35:25,260 --> 00:35:29,549
of the PM's about it and Olding said

00:35:27,210 --> 00:35:32,210
please fix this you know if it doesn't

00:35:29,549 --> 00:35:34,500
work with adventureworks adventureworks

00:35:32,210 --> 00:35:34,920
was familiar with it is microsoft's old

00:35:34,500 --> 00:35:37,200
song

00:35:34,920 --> 00:35:38,670
Apple database system it was fantastic

00:35:37,200 --> 00:35:40,470
because it had so many things wrong with

00:35:38,670 --> 00:35:45,030
it it actually looked representative of

00:35:40,470 --> 00:35:46,710
what a real-world database was so yeah

00:35:45,030 --> 00:35:48,960
it's like if it doesn't work with that

00:35:46,710 --> 00:35:51,559
then chances are that in the real world

00:35:48,960 --> 00:35:53,640
people are gonna be hitting this okay

00:35:51,559 --> 00:35:55,140
and then you think about the migration

00:35:53,640 --> 00:35:55,650
process are we going online are we going

00:35:55,140 --> 00:35:57,839
offline

00:35:55,650 --> 00:35:59,760
how much downtime and disruption can we

00:35:57,839 --> 00:36:01,470
handle if we're going to take systems up

00:35:59,760 --> 00:36:03,559
there so if you're building a brand-new

00:36:01,470 --> 00:36:05,640
system from scratch yeah not a problem

00:36:03,559 --> 00:36:06,900
but if you're going to take some plat

00:36:05,640 --> 00:36:08,069
for you're gonna take a workload you're

00:36:06,900 --> 00:36:09,210
gonna move it from one place to the

00:36:08,069 --> 00:36:13,549
other there's always going to be that

00:36:09,210 --> 00:36:16,770
potential for a bit of downtime okay now

00:36:13,549 --> 00:36:18,690
where Manesh instance far exceeds the

00:36:16,770 --> 00:36:20,609
capability of azure sequel database is

00:36:18,690 --> 00:36:22,380
that you can take a native backup and

00:36:20,609 --> 00:36:24,299
restore it with a restore database

00:36:22,380 --> 00:36:27,450
command you can't do that with Azure

00:36:24,299 --> 00:36:29,280
sequel database okay so I can basically

00:36:27,450 --> 00:36:31,589
block backup - blobstore from my own

00:36:29,280 --> 00:36:33,630
prem sequel server and then restore it

00:36:31,589 --> 00:36:36,569
in but then also we've got the ability

00:36:33,630 --> 00:36:40,530
to use backpacks and DAC packs which I

00:36:36,569 --> 00:36:43,980
hate personally but that's just me

00:36:40,530 --> 00:36:45,299
I find them unintuitive and difficult to

00:36:43,980 --> 00:36:48,720
package up get them ready for deployment

00:36:45,299 --> 00:36:50,190
and to do it in a meaningful way from a

00:36:48,720 --> 00:36:52,200
database migration perspective from a

00:36:50,190 --> 00:36:55,680
deployment phase yes they're great but

00:36:52,200 --> 00:36:58,079
if I want to migrate a database no it's

00:36:55,680 --> 00:37:00,990
gonna hurt okay there's other ways I'll

00:36:58,079 --> 00:37:02,960
do it especially if I've got very large

00:37:00,990 --> 00:37:04,619
databases okay

00:37:02,960 --> 00:37:05,940
likewise if you've got very large

00:37:04,619 --> 00:37:08,520
databases the data migration assistant

00:37:05,940 --> 00:37:12,210
is greater auditing them it really sucks

00:37:08,520 --> 00:37:14,309
at shifting data okay it's not very

00:37:12,210 --> 00:37:15,599
resilient

00:37:14,309 --> 00:37:17,099
it will script out the schema and it

00:37:15,599 --> 00:37:18,869
will build that schema it will then

00:37:17,099 --> 00:37:20,640
script out the data it will stream the

00:37:18,869 --> 00:37:24,089
data in if you get an interruption in

00:37:20,640 --> 00:37:25,680
your networking it buffs on you and then

00:37:24,089 --> 00:37:31,200
you go to a backup star game which is

00:37:25,680 --> 00:37:32,430
not great okay you three quarters away

00:37:31,200 --> 00:37:35,849
through a terabyte database that could

00:37:32,430 --> 00:37:37,470
hurt it could be men and white coats

00:37:35,849 --> 00:37:41,460
show up and drag you off because you've

00:37:37,470 --> 00:37:43,020
gone mad but this is where the other

00:37:41,460 --> 00:37:45,599
options come in data migration service

00:37:43,020 --> 00:37:48,420
now this is an azure based service okay

00:37:45,599 --> 00:37:48,890
essentially looks to synchronize the

00:37:48,420 --> 00:37:51,140
database

00:37:48,890 --> 00:37:52,880
from your system not there there is a

00:37:51,140 --> 00:37:54,830
big reliance on having V nets and in

00:37:52,880 --> 00:37:58,130
network connectivity through VPNs for

00:37:54,830 --> 00:38:01,850
that unfortunately though ok log

00:37:58,130 --> 00:38:03,110
shipping is not supported yet but it's

00:38:01,850 --> 00:38:05,420
not difficult to roll your own because

00:38:03,110 --> 00:38:06,950
you're actually agent up there ok so

00:38:05,420 --> 00:38:08,020
there's ways and there are means to do

00:38:06,950 --> 00:38:10,460
it

00:38:08,020 --> 00:38:13,760
transactional replication it can be a

00:38:10,460 --> 00:38:15,530
push subscriber ok much like as you

00:38:13,760 --> 00:38:17,840
sequel database can at the moment which

00:38:15,530 --> 00:38:20,330
if which is why I'm not a huge fan of

00:38:17,840 --> 00:38:23,360
the backpack and DAC packs because I can

00:38:20,330 --> 00:38:24,800
just create new I don't just do a

00:38:23,360 --> 00:38:26,780
snapshot and I can push a lot of HR

00:38:24,800 --> 00:38:30,410
transactional replication and that's

00:38:26,780 --> 00:38:31,700
keeping it in sync pretty well so I can

00:38:30,410 --> 00:38:32,470
minimize downtime when it comes to doing

00:38:31,700 --> 00:38:34,910
the cutover

00:38:32,470 --> 00:38:36,530
but the big issue really comes around

00:38:34,910 --> 00:38:38,180
online offline migration is the

00:38:36,530 --> 00:38:40,120
application and everything surrounds the

00:38:38,180 --> 00:38:44,240
database itself

00:38:40,120 --> 00:38:45,980
where are they how do they connect how

00:38:44,240 --> 00:38:47,930
do you control how do you repoint them

00:38:45,980 --> 00:38:50,180
is it a massive web farm things like

00:38:47,930 --> 00:38:51,890
that is a whole pile of people with fat

00:38:50,180 --> 00:38:52,970
clients on their laptops and stuff like

00:38:51,890 --> 00:38:55,730
that that connects directly to the

00:38:52,970 --> 00:38:58,600
database ok there's all things that you

00:38:55,730 --> 00:39:01,670
need to consider when we start moving to

00:38:58,600 --> 00:39:09,170
and basically hosted solutions it's all

00:39:01,670 --> 00:39:11,480
about connectivity now we think about

00:39:09,170 --> 00:39:12,890
migrating them as I said earlier what

00:39:11,480 --> 00:39:15,380
we'll do is we'll create our Azure

00:39:12,890 --> 00:39:16,990
subscription ok I've got two sites here

00:39:15,380 --> 00:39:19,340
one and two

00:39:16,990 --> 00:39:21,440
first different sequel server solutions

00:39:19,340 --> 00:39:23,840
and application servers them so I'll

00:39:21,440 --> 00:39:25,970
create our I create a V now I've got a

00:39:23,840 --> 00:39:29,690
resource group all set up I create my

00:39:25,970 --> 00:39:32,840
managed instance essentially ok I create

00:39:29,690 --> 00:39:36,290
some Azure blob storage accounts create

00:39:32,840 --> 00:39:37,190
some containers now because I'm feeling

00:39:36,290 --> 00:39:38,390
a bit flush with cash

00:39:37,190 --> 00:39:40,870
I've gone out and bought myself an

00:39:38,390 --> 00:39:40,870
express route

00:39:41,150 --> 00:39:44,520
got my other site and I've not gotten so

00:39:43,529 --> 00:39:46,619
much money now so I'm doing a

00:39:44,520 --> 00:39:50,640
site-to-site VPN so here we've got two

00:39:46,619 --> 00:39:52,770
different options now big difference

00:39:50,640 --> 00:39:56,190
between Express route and site to site

00:39:52,770 --> 00:39:59,460
VPN okay by default

00:39:56,190 --> 00:40:05,339
things like blob storage this one here

00:39:59,460 --> 00:40:08,160
are not available over the VPN you're

00:40:05,339 --> 00:40:13,289
going to the public endpoint even if you

00:40:08,160 --> 00:40:15,510
create the v-net okay now what you can

00:40:13,289 --> 00:40:17,460
do is create a service endpoint which

00:40:15,510 --> 00:40:19,920
you map to the V net and put your base

00:40:17,460 --> 00:40:23,069
you're linking your blob store via the

00:40:19,920 --> 00:40:26,250
service endpoint to the V net at that

00:40:23,069 --> 00:40:29,730
point yes we can traverse the VPN to go

00:40:26,250 --> 00:40:31,680
here okay but it needs to be on the same

00:40:29,730 --> 00:40:34,140
network otherwise we're going over the

00:40:31,680 --> 00:40:35,549
public point so for every virtual

00:40:34,140 --> 00:40:38,069
network you set up where you've got

00:40:35,549 --> 00:40:39,839
blobstore that you want to access you're

00:40:38,069 --> 00:40:42,029
essentially needing to create VPN or

00:40:39,839 --> 00:40:44,579
peer then networks together so you've

00:40:42,029 --> 00:40:46,140
got that consistent link Express route

00:40:44,579 --> 00:40:51,710
everything that travels over Express

00:40:46,140 --> 00:40:51,710
route to Asha is on a private link okay

00:40:51,859 --> 00:40:58,770
so what we're gonna do is I'm going to

00:40:55,260 --> 00:41:00,450
move some databases because I'm an

00:40:58,770 --> 00:41:03,180
old-school DBA I like backing things up

00:41:00,450 --> 00:41:04,500
and restoring them back up those four

00:41:03,180 --> 00:41:07,230
databases and then there's simply

00:41:04,500 --> 00:41:09,539
restore them and I'm gonna move my app

00:41:07,230 --> 00:41:10,529
service because I'm on a VPN link it may

00:41:09,539 --> 00:41:13,470
be a higher latency

00:41:10,529 --> 00:41:15,720
okay and my application may be very

00:41:13,470 --> 00:41:16,920
sensitive to that latency so I want the

00:41:15,720 --> 00:41:20,430
application servers close to the

00:41:16,920 --> 00:41:21,990
databases as your virtual machines the

00:41:20,430 --> 00:41:24,089
services we push your button lift it

00:41:21,990 --> 00:41:27,510
shift it don't deploy the applications

00:41:24,089 --> 00:41:31,020
to it all that sort of stuff okay now I

00:41:27,510 --> 00:41:31,920
can make those servers go away now if

00:41:31,020 --> 00:41:32,910
they were running something like an

00:41:31,920 --> 00:41:35,069
availability group we're talking

00:41:32,910 --> 00:41:38,190
Enterprise Edition typically which is

00:41:35,069 --> 00:41:39,599
tens of thousands of pounds so if I

00:41:38,190 --> 00:41:41,250
bought them on SA I can tick the box and

00:41:39,599 --> 00:41:43,710
I can offset my costs up in the managed

00:41:41,250 --> 00:41:44,130
instance but also when renewals come

00:41:43,710 --> 00:41:47,160
round

00:41:44,130 --> 00:41:49,650
I'm not sat there with sixteen thirty

00:41:47,160 --> 00:41:52,710
thirty-two whatever cause of enterprise

00:41:49,650 --> 00:41:54,670
I need to pay for again cost comes down

00:41:52,710 --> 00:41:55,930
don't have to renew the hardware don't

00:41:54,670 --> 00:41:58,740
have to renew the OS all that sort of

00:41:55,930 --> 00:42:03,520
stuff I moved some more databases

00:41:58,740 --> 00:42:05,350
backup/restore move the VM now I've got

00:42:03,520 --> 00:42:08,350
a much smaller footprint here online on

00:42:05,350 --> 00:42:09,910
my site that means I'm paying less

00:42:08,350 --> 00:42:12,520
energy I'm paying less electricity for

00:42:09,910 --> 00:42:14,050
the servers I'm paying less cooling so

00:42:12,520 --> 00:42:15,430
there's a number of other intangible

00:42:14,050 --> 00:42:17,080
cost savings as well that you're gonna

00:42:15,430 --> 00:42:20,350
see by taking this stuff and sticking in

00:42:17,080 --> 00:42:21,760
there but that's offset by you now

00:42:20,350 --> 00:42:23,770
you're paying monthly subscriptions up

00:42:21,760 --> 00:42:25,840
here if you're going to do this type of

00:42:23,770 --> 00:42:28,060
thing it's very very important to

00:42:25,840 --> 00:42:29,920
optimize the performance of your code

00:42:28,060 --> 00:42:35,080
both in the application and the data

00:42:29,920 --> 00:42:37,180
tier okay basically if you can tune that

00:42:35,080 --> 00:42:40,090
query down and use less resources you

00:42:37,180 --> 00:42:41,890
can actually scale platforms down okay

00:42:40,090 --> 00:42:45,280
you can get more in there and more bang

00:42:41,890 --> 00:42:46,720
for your buck okay performance tuning is

00:42:45,280 --> 00:42:49,690
going to be key when you start looking

00:42:46,720 --> 00:42:51,550
at using cloud systems rather than your

00:42:49,690 --> 00:42:53,200
traditional sort of Rackspace kolos and

00:42:51,550 --> 00:42:55,240
things like that where you've got a

00:42:53,200 --> 00:42:57,580
whole server I mean how many people here

00:42:55,240 --> 00:43:00,820
at the moment consistently run their own

00:42:57,580 --> 00:43:03,880
premises hardware at about 80% CPU

00:43:00,820 --> 00:43:06,880
utilization and sort of equivalent for

00:43:03,880 --> 00:43:11,380
memory normally we sort of freak out

00:43:06,880 --> 00:43:13,359
when we see it that don't we but that's

00:43:11,380 --> 00:43:15,580
when we've had to buy that and scope it

00:43:13,359 --> 00:43:18,490
in for five years we buy with plenty of

00:43:15,580 --> 00:43:19,930
headroom okay you need to switch that

00:43:18,490 --> 00:43:23,410
thinking around when it comes to dealing

00:43:19,930 --> 00:43:24,850
with platforms a service infrastructure

00:43:23,410 --> 00:43:28,390
as a service you want to be running that

00:43:24,850 --> 00:43:30,760
kit hot ok you want as little Headroom

00:43:28,390 --> 00:43:32,410
as you can get away with because all of

00:43:30,760 --> 00:43:34,650
that extra Headroom is going to cost you

00:43:32,410 --> 00:43:37,930
money ok

00:43:34,650 --> 00:43:39,190
running at 80% CPU is great if you know

00:43:37,930 --> 00:43:41,560
that you're going to burst another 10

00:43:39,190 --> 00:43:43,300
percent up to 90 but then you've also

00:43:41,560 --> 00:43:45,400
bills you've actually it's coming up the

00:43:43,300 --> 00:43:46,930
holiday season we're a retailer it's

00:43:45,400 --> 00:43:48,280
going to be Easter actually I can afford

00:43:46,930 --> 00:43:50,950
a couple minutes downtime to turn that

00:43:48,280 --> 00:43:51,970
vp8 over that VM or that managed

00:43:50,950 --> 00:43:53,619
instance or that has your sequel

00:43:51,970 --> 00:43:56,170
database I can actually increase the

00:43:53,619 --> 00:43:58,930
scale of it and we'll just run it bigger

00:43:56,170 --> 00:44:00,850
version for the next month and then

00:43:58,930 --> 00:44:03,520
we'll turn it down again so the big

00:44:00,850 --> 00:44:05,270
benefit is just be aware of the

00:44:03,520 --> 00:44:07,340
workloads you're moving

00:44:05,270 --> 00:44:08,540
and how efficient they are if the

00:44:07,340 --> 00:44:10,040
workload is not efficient you

00:44:08,540 --> 00:44:28,700
potentially gonna cost yourself more

00:44:10,040 --> 00:44:34,810
money yes yeah because everything in in

00:44:28,700 --> 00:44:37,370
Azure is scriptable yeah so we've got

00:44:34,810 --> 00:44:38,930
part of our software monitors as your

00:44:37,370 --> 00:44:40,960
sequel data warehouse as your sequel

00:44:38,930 --> 00:44:43,280
data warehouse is inordinately expensive

00:44:40,960 --> 00:44:47,360
you don't leave it sat there twiddling

00:44:43,280 --> 00:44:49,690
its thumbs we use Azure automation with

00:44:47,360 --> 00:44:51,770
the run books to actually turn it off

00:44:49,690 --> 00:44:54,410
well basically make a check are you off

00:44:51,770 --> 00:44:56,690
are you off are you off are you off and

00:44:54,410 --> 00:44:59,840
we do that every sort of four hours or

00:44:56,690 --> 00:45:01,370
so once it's outside of the business day

00:44:59,840 --> 00:45:03,350
that we have as a business doesn't

00:45:01,370 --> 00:45:05,120
matter BAM it's going down okay

00:45:03,350 --> 00:45:07,940
if you're doing stuff you just got to go

00:45:05,120 --> 00:45:08,780
- automation and say paws otherwise you

00:45:07,940 --> 00:45:12,890
be in the middle of something like a

00:45:08,780 --> 00:45:14,240
demo and then gone but there is the

00:45:12,890 --> 00:45:16,520
facility to automate those things there

00:45:14,240 --> 00:45:17,750
is also the ability to have building

00:45:16,520 --> 00:45:20,260
feedback loops essentially to say

00:45:17,750 --> 00:45:24,140
actually I'm running really hot now

00:45:20,260 --> 00:45:27,770
certain services in our show not

00:45:24,140 --> 00:45:29,300
typically the data platform services but

00:45:27,770 --> 00:45:31,760
typically the app servers and things

00:45:29,300 --> 00:45:34,160
like that the app services you can say

00:45:31,760 --> 00:45:36,740
scale give me extra rather give me extra

00:45:34,160 --> 00:45:38,360
nodes so if you're using stateless

00:45:36,740 --> 00:45:40,670
environments without your container

00:45:38,360 --> 00:45:41,990
services as I could be native services

00:45:40,670 --> 00:45:47,510
you can just fire in say give me an

00:45:41,990 --> 00:45:49,160
extra six replicas okay yeah you're

00:45:47,510 --> 00:45:51,110
essentially using the you're pulling the

00:45:49,160 --> 00:45:53,240
data from all you've got a rest n rest

00:45:51,110 --> 00:45:55,400
api s-- which you can pull metric data

00:45:53,240 --> 00:45:56,360
from but you're so you can interact with

00:45:55,400 --> 00:45:58,100
as well so you can either write

00:45:56,360 --> 00:46:00,860
powershell scripts do it the azure CLI

00:45:58,100 --> 00:46:02,360
you can go through the REST API s as

00:46:00,860 --> 00:46:04,700
well you can build your own little very

00:46:02,360 --> 00:46:07,760
basic web page app and things like that

00:46:04,700 --> 00:46:11,200
to give you that capability it's very

00:46:07,760 --> 00:46:11,200
very extensible that platform

00:46:11,350 --> 00:46:15,260
unfortunately when you do some of the

00:46:13,040 --> 00:46:16,310
stuff with the data platform because of

00:46:15,260 --> 00:46:17,090
the way that it does things are

00:46:16,310 --> 00:46:18,980
especially without things like hey

00:46:17,090 --> 00:46:20,630
where's dB

00:46:18,980 --> 00:46:22,190
essentially it will sever all the

00:46:20,630 --> 00:46:23,390
connections do the scaling and then

00:46:22,190 --> 00:46:25,460
you've got to reconnect

00:46:23,390 --> 00:46:26,840
which is why Microsoft suggests if

00:46:25,460 --> 00:46:28,730
you're going to be doing stuff with

00:46:26,840 --> 00:46:31,400
managed instance I just equal database

00:46:28,730 --> 00:46:32,750
DW any of these relational technologies

00:46:31,400 --> 00:46:36,950
where you're able to use the dotnet

00:46:32,750 --> 00:46:38,090
libraries they've actually got methods

00:46:36,950 --> 00:46:41,200
and functions and everything in there

00:46:38,090 --> 00:46:43,550
that help you build resilient

00:46:41,200 --> 00:46:45,260
connectivity so essentially if there is

00:46:43,550 --> 00:46:46,490
an interruption for those native

00:46:45,260 --> 00:46:48,920
capabilities in there that you can

00:46:46,490 --> 00:46:51,680
leverage to say actually let's do some

00:46:48,920 --> 00:46:52,369
retry logic so back off give it a minute

00:46:51,680 --> 00:46:54,800
try again

00:46:52,369 --> 00:46:57,710
back off try again back and you build

00:46:54,800 --> 00:46:59,869
that sort of capability in there just

00:46:57,710 --> 00:47:02,359
simply because it's somebody else's

00:46:59,869 --> 00:47:07,010
hardware in somebody else's data center

00:47:02,359 --> 00:47:09,830
over a network link that's not mine you

00:47:07,010 --> 00:47:11,450
know that's the perfect storm for if Joe

00:47:09,830 --> 00:47:15,310
Bloggs with this JCB digs up the road

00:47:11,450 --> 00:47:18,369
and your applications around boom

00:47:15,310 --> 00:47:20,930
someone forgets to renew a stiff occur

00:47:18,369 --> 00:47:23,420
on your service provider they will go

00:47:20,930 --> 00:47:25,040
down things like that a good example as

00:47:23,420 --> 00:47:27,350
well and this is something when it comes

00:47:25,040 --> 00:47:30,230
to to these sorts of systems I'm showing

00:47:27,350 --> 00:47:31,880
often a little bit of a tangent here if

00:47:30,230 --> 00:47:33,140
you are planning on taking workloads to

00:47:31,880 --> 00:47:35,720
the cloud be they relation will be there

00:47:33,140 --> 00:47:41,600
anything architect them from multiple

00:47:35,720 --> 00:47:43,640
regions ok last last year early last

00:47:41,600 --> 00:47:47,060
year maybe the late in the year before I

00:47:43,640 --> 00:47:49,490
forget Amazon had a big s3 outage on the

00:47:47,060 --> 00:47:51,590
East Coast the US it became very

00:47:49,490 --> 00:47:54,350
apparent very quickly who built their

00:47:51,590 --> 00:47:56,990
entire service in to leverages resources

00:47:54,350 --> 00:47:59,359
in that one region even Amazon's Status

00:47:56,990 --> 00:48:02,090
page didn't work because all the images

00:47:59,359 --> 00:48:07,310
that said no it's broken were hosted an

00:48:02,090 --> 00:48:08,270
s3 service in the failed data center the

00:48:07,310 --> 00:48:10,820
cloud fails

00:48:08,270 --> 00:48:12,920
quite simply it's still running on

00:48:10,820 --> 00:48:15,230
hardware it's still mechanical care it

00:48:12,920 --> 00:48:17,450
will fail there's people in the loop a

00:48:15,230 --> 00:48:18,680
lot less now than the would be but

00:48:17,450 --> 00:48:22,250
there's still people there there's still

00:48:18,680 --> 00:48:24,500
processes things break Architect it if a

00:48:22,250 --> 00:48:27,260
whole cloud goes down that's an

00:48:24,500 --> 00:48:28,730
exceptional scenario but typically if

00:48:27,260 --> 00:48:29,990
you build for multiple regions you're

00:48:28,730 --> 00:48:30,530
going to be protecting yourself against

00:48:29,990 --> 00:48:33,230
a lot of fat

00:48:30,530 --> 00:48:34,490
a lot of these data services here manage

00:48:33,230 --> 00:48:36,590
the instance and you see will database

00:48:34,490 --> 00:48:39,110
things like that you can set up geo

00:48:36,590 --> 00:48:40,940
redundancy or you will be able to set up

00:48:39,110 --> 00:48:42,380
Ryoji redundancy very few clicks of the

00:48:40,940 --> 00:48:45,590
mouse in the portal or a couple of

00:48:42,380 --> 00:48:46,940
scripts which will give you if if Dublin

00:48:45,590 --> 00:48:50,900
goes down go to Durham

00:48:46,940 --> 00:48:52,820
go to Amsterdam if you're in the UK if

00:48:50,900 --> 00:48:55,460
Cardiff goes down go to one of the other

00:48:52,820 --> 00:48:57,440
ones that sort of thing okay be very

00:48:55,460 --> 00:48:58,640
important when think about that one now

00:48:57,440 --> 00:49:00,320
I've got those database I've moved from

00:48:58,640 --> 00:49:02,390
my other site I'll get rid of that so

00:49:00,320 --> 00:49:04,730
because I've got Express route and

00:49:02,390 --> 00:49:06,950
because I've got very low latency I can

00:49:04,730 --> 00:49:07,940
leave my app servers there one of the

00:49:06,950 --> 00:49:09,050
important things to understand in that

00:49:07,940 --> 00:49:11,030
sort of scenario if you're going to

00:49:09,050 --> 00:49:13,820
build hybrid solutions or even if you're

00:49:11,030 --> 00:49:15,320
building multi-region solutions if

00:49:13,820 --> 00:49:17,990
you're not using the native data

00:49:15,320 --> 00:49:21,140
transfer between regions in Azure you

00:49:17,990 --> 00:49:22,460
get charged for data egress if you're

00:49:21,140 --> 00:49:24,050
building hybrid solutions with

00:49:22,460 --> 00:49:26,480
on-premises components and cloud

00:49:24,050 --> 00:49:30,980
components you will be charged for data

00:49:26,480 --> 00:49:32,480
egress ingress is free why put a barrier

00:49:30,980 --> 00:49:35,300
between you putting data into their

00:49:32,480 --> 00:49:36,260
services but you want it back that's

00:49:35,300 --> 00:49:39,110
where you're gonna get charged some

00:49:36,260 --> 00:49:40,790
money it's not ridiculous money but it

00:49:39,110 --> 00:49:43,550
is still a cost overhead if you've got

00:49:40,790 --> 00:49:45,890
very chatty applications just be aware

00:49:43,550 --> 00:49:47,240
of that so the question is if I've got

00:49:45,890 --> 00:49:48,260
my web app on my database talking to

00:49:47,240 --> 00:49:50,660
each other and as you're doing it

00:49:48,260 --> 00:49:51,650
charged if they're in the same region

00:49:50,660 --> 00:49:56,420
okay

00:49:51,650 --> 00:49:58,760
no if I had one announcer this an

00:49:56,420 --> 00:50:00,980
Amsterdam and Myra database in Dublin

00:49:58,760 --> 00:50:03,260
yes I'm gonna be charged for the data

00:50:00,980 --> 00:50:05,900
that leaves Dublin to go to Amsterdam

00:50:03,260 --> 00:50:08,960
and the data that gets child leaving

00:50:05,900 --> 00:50:11,030
Amsterdam to go to Dublin the costs in

00:50:08,960 --> 00:50:12,230
reality are relatively small unless

00:50:11,030 --> 00:50:15,380
you're dealing with vast quantities of

00:50:12,230 --> 00:50:17,060
data don't do what someone did which was

00:50:15,380 --> 00:50:19,670
put multiple terabytes of data into

00:50:17,060 --> 00:50:22,070
Hadoop in Europe and have your power bi

00:50:19,670 --> 00:50:24,650
tenant in America and then get a

00:50:22,070 --> 00:50:28,220
six-figure sum at the end of the month

00:50:24,650 --> 00:50:30,050
which Microsoft went yeah you didn't

00:50:28,220 --> 00:50:33,800
want to do that we'll write this off and

00:50:30,050 --> 00:50:38,000
we'll move you Tennant for you so yeah

00:50:33,800 --> 00:50:40,310
Michael can be nice but yeah it's all

00:50:38,000 --> 00:50:43,600
cool database for migration service I

00:50:40,310 --> 00:50:43,600
touched on this briefly earlier

00:50:43,730 --> 00:50:49,490
it's a fully managed service you've got

00:50:48,020 --> 00:50:50,660
a provision it in as you under the hood

00:50:49,490 --> 00:50:52,070
there's a couple of vm's and things like

00:50:50,660 --> 00:50:54,770
that so it is a service you get charged

00:50:52,070 --> 00:50:58,190
for does rely on VPN connectivity

00:50:54,770 --> 00:50:59,450
directly to the Vee nets ok so again

00:50:58,190 --> 00:51:01,400
you'll think about how you're gonna do

00:50:59,450 --> 00:51:03,560
the migration what's gonna have access

00:51:01,400 --> 00:51:05,270
it can everything talk to each other

00:51:03,560 --> 00:51:07,040
essentially you're not dealing with a

00:51:05,270 --> 00:51:09,790
gateway service that everything runs

00:51:07,040 --> 00:51:11,960
through you need that full connectivity

00:51:09,790 --> 00:51:16,550
for access to the Vee nets for it to do

00:51:11,960 --> 00:51:18,440
the the bits it needs to do now once

00:51:16,550 --> 00:51:21,400
we've got our databases somewhere that's

00:51:18,440 --> 00:51:21,400
only half the story

00:51:22,630 --> 00:51:28,010
migration of everything outside of the

00:51:24,560 --> 00:51:28,940
database then becomes key for us now if

00:51:28,010 --> 00:51:31,010
we're dealing with Active Directory

00:51:28,940 --> 00:51:32,660
connectivity on-premises and we've got

00:51:31,010 --> 00:51:36,890
everything set up and my applications

00:51:32,660 --> 00:51:39,230
use as your Active Directory I've got

00:51:36,890 --> 00:51:41,480
them set up and it all works fine one of

00:51:39,230 --> 00:51:42,530
the big things that you need to do is

00:51:41,480 --> 00:51:44,000
make sure that Active Directory is

00:51:42,530 --> 00:51:45,920
synchronizing to Azure for a start

00:51:44,000 --> 00:51:48,530
throughout your Active Directory through

00:51:45,920 --> 00:51:51,650
the ad Connect tool very easy to set up

00:51:48,530 --> 00:51:56,180
next next next next next done as per

00:51:51,650 --> 00:51:59,119
Microsoft Wizards what happens though

00:51:56,180 --> 00:52:01,490
when it moves a rather copies those

00:51:59,119 --> 00:52:02,780
logins and entities from on-premise this

00:52:01,490 --> 00:52:04,910
Active Directory to Azure Active

00:52:02,780 --> 00:52:07,579
Directory the SID the security

00:52:04,910 --> 00:52:09,410
identifier will change okay

00:52:07,579 --> 00:52:13,119
the said in the azure tenant will be

00:52:09,410 --> 00:52:17,420
different to the one on premises okay

00:52:13,119 --> 00:52:19,040
now traditionally one of the the issues

00:52:17,420 --> 00:52:20,599
you've had when you've moved databases

00:52:19,040 --> 00:52:23,869
between servers and it's been

00:52:20,599 --> 00:52:26,660
predominantly for sequel logins is when

00:52:23,869 --> 00:52:29,240
you create a sequel log in it creates a

00:52:26,660 --> 00:52:32,349
SID unique to the server so if you've

00:52:29,240 --> 00:52:34,010
ever run mirroring log shipping

00:52:32,349 --> 00:52:36,890
availability groups things like that

00:52:34,010 --> 00:52:38,839
with sequel logins it's not simple case

00:52:36,890 --> 00:52:40,130
of creating this a log in on the other

00:52:38,839 --> 00:52:42,440
side of the same username password

00:52:40,130 --> 00:52:44,810
because the security identifies that

00:52:42,440 --> 00:52:46,900
link the log in at the server level to

00:52:44,810 --> 00:52:49,040
the user in the database will not match

00:52:46,900 --> 00:52:52,940
which means the authentication will fail

00:52:49,040 --> 00:52:54,920
so what you need to do is either now

00:52:52,940 --> 00:52:56,060
there are the store procedures out there

00:52:54,920 --> 00:52:57,000
and code out there which will allow you

00:52:56,060 --> 00:53:00,060
to script out

00:52:57,000 --> 00:53:02,070
logins with the password hash and the

00:53:00,060 --> 00:53:04,170
CID which means you can take that and

00:53:02,070 --> 00:53:06,570
then just use a create login statement

00:53:04,170 --> 00:53:09,080
with the CID with the password hash and

00:53:06,570 --> 00:53:13,230
that will push in and then the lineup

00:53:09,080 --> 00:53:16,890
alternatively alter user for login but

00:53:13,230 --> 00:53:19,530
and that will align them again there is

00:53:16,890 --> 00:53:21,030
also a powershell anyone who's dealing

00:53:19,530 --> 00:53:23,640
with sequel server in any way shape or

00:53:21,030 --> 00:53:26,310
form there is a powershell come module

00:53:23,640 --> 00:53:29,120
called DBA tools okay it's an

00:53:26,310 --> 00:53:32,700
open-source one up on github use that

00:53:29,120 --> 00:53:34,590
it's got a huge number of very useful

00:53:32,700 --> 00:53:36,660
command it's in there for doing just

00:53:34,590 --> 00:53:38,760
that sort of thing migrating jobs

00:53:36,660 --> 00:53:41,100
migrating logins migrating linked

00:53:38,760 --> 00:53:43,680
servers migrating credentials all of

00:53:41,100 --> 00:53:45,480
these server scoped elements which means

00:53:43,680 --> 00:53:47,100
you can automate it because it's all

00:53:45,480 --> 00:53:49,740
done in PowerShell doing it with T

00:53:47,100 --> 00:53:51,180
sequel is a freaking nightmare it's not

00:53:49,740 --> 00:53:55,350
that's not what is really designed for

00:53:51,180 --> 00:53:57,570
TB sequel is really designed for DML and

00:53:55,350 --> 00:54:00,090
DDA so day two different emulation

00:53:57,570 --> 00:54:02,100
language data definition language doing

00:54:00,090 --> 00:54:05,010
stuff in the databases administering the

00:54:02,100 --> 00:54:06,630
server was just a well we've got to do

00:54:05,010 --> 00:54:07,620
something we might as well use T sequel

00:54:06,630 --> 00:54:09,870
for it because that's what the guys are

00:54:07,620 --> 00:54:13,500
scripting in the powershots other things

00:54:09,870 --> 00:54:15,000
uses s mo makes life a lot easier but

00:54:13,500 --> 00:54:16,170
you're responsible for all of this stuff

00:54:15,000 --> 00:54:18,210
it doesn't go with the database just

00:54:16,170 --> 00:54:22,170
make sure that's another point in the

00:54:18,210 --> 00:54:24,570
migration process the migration as we

00:54:22,170 --> 00:54:25,830
said it leverages backup to URL now this

00:54:24,570 --> 00:54:29,760
capability came in with sequel server

00:54:25,830 --> 00:54:32,700
2012 cu3 but essentially you can Bob

00:54:29,760 --> 00:54:35,490
back up directly to an azure blobstore

00:54:32,700 --> 00:54:37,350
container from the sequel server okay

00:54:35,490 --> 00:54:39,480
really nice and easy you just need to

00:54:37,350 --> 00:54:41,250
create a credential in sequel after you

00:54:39,480 --> 00:54:42,780
setup the blobstore component and then

00:54:41,250 --> 00:54:45,390
it just treats it like another back

00:54:42,780 --> 00:54:47,130
application if you've got lot if you're

00:54:45,390 --> 00:54:48,960
very large databases spread out to

00:54:47,130 --> 00:54:53,700
multiple backup files you'll see better

00:54:48,960 --> 00:54:56,700
throughput it depends on how big your

00:54:53,700 --> 00:54:58,320
bandwidth is really but large databases

00:54:56,700 --> 00:54:59,880
I mean if you're dealing with tens of

00:54:58,320 --> 00:55:01,620
gigabytes you just gotta think about how

00:54:59,880 --> 00:55:05,910
how easy is it to upload one large

00:55:01,620 --> 00:55:07,500
database file ok versus well let's break

00:55:05,910 --> 00:55:08,850
that down into three or four different

00:55:07,500 --> 00:55:11,390
streams so we're dealing with smaller

00:55:08,850 --> 00:55:12,500
files you higher utilize a

00:55:11,390 --> 00:55:13,339
don't do it in the middle of the day

00:55:12,500 --> 00:55:15,799
when everyone's watching cat videos

00:55:13,339 --> 00:55:17,990
because you'll still have no bandwidth

00:55:15,799 --> 00:55:19,190
and also you have very unhappy people

00:55:17,990 --> 00:55:21,440
because they can't watch their cat

00:55:19,190 --> 00:55:25,609
videos because you just saturated it

00:55:21,440 --> 00:55:26,539
with a hundred gig database backup one

00:55:25,609 --> 00:55:28,280
of the other things as well make sure

00:55:26,539 --> 00:55:30,230
you use compression compression

00:55:28,280 --> 00:55:32,240
capabilities natively built into sequel

00:55:30,230 --> 00:55:35,599
server it will compress it before it

00:55:32,240 --> 00:55:37,220
sends the data okay so you'll be sending

00:55:35,599 --> 00:55:38,510
less up there less on the wire makes it

00:55:37,220 --> 00:55:40,369
a little bit quicker but multiple files

00:55:38,510 --> 00:55:42,160
will see better utilization of the

00:55:40,369 --> 00:55:45,530
network resources you have available

00:55:42,160 --> 00:55:46,730
likewise if your bottleneck if you if

00:55:45,530 --> 00:55:49,280
your VMs all in as you and you're doing

00:55:46,730 --> 00:55:50,420
that sort of backup service there you've

00:55:49,280 --> 00:55:52,160
got higher amounts and large amounts of

00:55:50,420 --> 00:55:54,380
bandwidth you're probably going to

00:55:52,160 --> 00:55:57,250
bottleneck on the azure storage so

00:55:54,380 --> 00:56:04,039
multiple storage accounts just scale out

00:55:57,250 --> 00:56:06,319
okay if you're using right back up to

00:56:04,039 --> 00:56:09,020
URL requires credentials create at the

00:56:06,319 --> 00:56:10,910
server level if you're using 2012-2014

00:56:09,020 --> 00:56:15,140
there's a specific syntax for the

00:56:10,910 --> 00:56:17,839
creation of the credential if you're

00:56:15,140 --> 00:56:20,029
using twenty sixteen or seventeen it's a

00:56:17,839 --> 00:56:21,829
different syntax when different

00:56:20,029 --> 00:56:23,150
functionality and we'll have a quick

00:56:21,829 --> 00:56:26,750
look at those in a moment and we get to

00:56:23,150 --> 00:56:28,220
it reduce your cost if you've got sa

00:56:26,750 --> 00:56:29,180
don't forget to tick the box and don't

00:56:28,220 --> 00:56:31,579
forget the decommission your service

00:56:29,180 --> 00:56:33,710
because it will save you money now

00:56:31,579 --> 00:56:38,329
one thing I haven't covered here and we

00:56:33,710 --> 00:56:43,480
will talk about briefly is workload

00:56:38,329 --> 00:56:47,240
analysis there are some tools available

00:56:43,480 --> 00:56:49,490
okay I am a huge fan of a tool set

00:56:47,240 --> 00:56:52,190
called our ml utilities I don't know if

00:56:49,490 --> 00:56:55,099
anyone's heard of this basically our ml

00:56:52,190 --> 00:56:59,089
is replaying markup language is a free

00:56:55,099 --> 00:57:07,880
tool set from Microsoft okay in the same

00:56:59,089 --> 00:57:10,220
vein as PS s diox equal diag nexus and

00:57:07,880 --> 00:57:12,700
that sort of toolset but essentially our

00:57:10,220 --> 00:57:14,839
ml utilities contains four applications

00:57:12,700 --> 00:57:16,609
you've got retrace

00:57:14,839 --> 00:57:20,000
so when you take a either an extended

00:57:16,609 --> 00:57:20,869
events trace or a sequel trace retrace

00:57:20,000 --> 00:57:23,510
does exactly that

00:57:20,869 --> 00:57:24,560
it reads it and your two options here

00:57:23,510 --> 00:57:26,060
one

00:57:24,560 --> 00:57:28,100
you can have it push all of the metrics

00:57:26,060 --> 00:57:31,960
and telemetry data it discovers through

00:57:28,100 --> 00:57:35,060
reading that trace into a database or

00:57:31,960 --> 00:57:37,850
you can also get work and/or you can get

00:57:35,060 --> 00:57:39,860
it to create our ml files which are then

00:57:37,850 --> 00:57:43,180
used by a tool in that suite called Oh

00:57:39,860 --> 00:57:46,910
stress which will read the our ml and

00:57:43,180 --> 00:57:48,200
basically replay the workload so what it

00:57:46,910 --> 00:57:50,570
allows you to do is take a backup a

00:57:48,200 --> 00:57:52,010
database restore it but when you're

00:57:50,570 --> 00:57:54,920
taking the backup you're capturing the

00:57:52,010 --> 00:57:56,600
trace turn it our ml and then I can

00:57:54,920 --> 00:57:58,250
replay that exact workload into the

00:57:56,600 --> 00:58:02,990
database on the new platform and you

00:57:58,250 --> 00:58:04,610
server okay if you've got if you want to

00:58:02,990 --> 00:58:06,050
simulate multiple clients there's also a

00:58:04,610 --> 00:58:07,730
tool in there called Orca which

00:58:06,050 --> 00:58:09,890
essentially is an Orchestrator for Oh

00:58:07,730 --> 00:58:11,240
stress and you can either run it in a

00:58:09,890 --> 00:58:14,300
stress mode or you can run it in a

00:58:11,240 --> 00:58:15,890
replay mode which means I actually I

00:58:14,300 --> 00:58:17,630
want to maintain the timings as best I

00:58:15,890 --> 00:58:20,180
can and the intricacies are over maybe

00:58:17,630 --> 00:58:21,260
say a client's so eight instances of Oh

00:58:20,180 --> 00:58:23,300
stress will have the workload

00:58:21,260 --> 00:58:25,850
distributed amongst them and they'll all

00:58:23,300 --> 00:58:27,200
interact with the database and then

00:58:25,850 --> 00:58:29,740
there's a reporter application which

00:58:27,200 --> 00:58:32,150
reads the database that retrace creates

00:58:29,740 --> 00:58:33,790
one of the launches this is if you're

00:58:32,150 --> 00:58:35,780
going to do the whole capture a workload

00:58:33,790 --> 00:58:38,510
turn it into our ml and replay it

00:58:35,780 --> 00:58:40,850
capture it again there what you can do

00:58:38,510 --> 00:58:42,740
is then use retrace to read the second

00:58:40,850 --> 00:58:44,450
one into another database and the

00:58:42,740 --> 00:58:47,150
reporter tool can actually do a

00:58:44,450 --> 00:58:48,740
comparison between the two straight out

00:58:47,150 --> 00:58:51,590
of the bat saves you having to write all

00:58:48,740 --> 00:58:54,230
your own queries next life will be

00:58:51,590 --> 00:58:56,450
easier I am a huge fan of our ml if

00:58:54,230 --> 00:58:59,360
anyone suggest you use distributed

00:58:56,450 --> 00:59:01,700
replay that came between 12 laughs of

00:58:59,360 --> 00:59:03,080
them because a the controller costs you

00:59:01,700 --> 00:59:05,390
money you need a full sequel license of

00:59:03,080 --> 00:59:07,160
the controller and B it is inordinately

00:59:05,390 --> 00:59:11,270
complex and a pain in the backside to

00:59:07,160 --> 00:59:15,550
setup okay so those the key things I'd

00:59:11,270 --> 00:59:18,200
have a look at from that side now let's

00:59:15,550 --> 00:59:19,990
try to migrate some databases what I've

00:59:18,200 --> 00:59:22,760
got here is a very basic little

00:59:19,990 --> 00:59:26,870
application that we use called

00:59:22,760 --> 00:59:30,560
sequel spoof essentially it's a very

00:59:26,870 --> 00:59:32,510
very basic application that runs a bunch

00:59:30,560 --> 00:59:37,100
of queries for us now I've got three

00:59:32,510 --> 00:59:39,250
databases currently sat on my sequel

00:59:37,100 --> 00:59:39,250
server

00:59:40,890 --> 00:59:50,560
okay

00:59:42,360 --> 00:59:52,060
it's art disconnect son what I've got

00:59:50,560 --> 00:59:55,150
here are three little sales databases

00:59:52,060 --> 00:59:56,440
essentially sales archive sales data

00:59:55,150 --> 00:59:58,210
Marcel sandbox

00:59:56,440 --> 00:59:59,230
that's the sequel spoof database that

00:59:58,210 --> 01:00:00,810
you see at the bottom is the one that's

00:59:59,230 --> 01:00:12,760
got all my queries in it essentially

01:00:00,810 --> 01:00:21,010
okay I've got a bunch of logins my boss

01:00:12,760 --> 01:00:22,390
who wrote this is a big Avengers fan so

01:00:21,010 --> 01:00:23,920
what do we need to do well we need to

01:00:22,390 --> 01:00:26,740
get all of these database well these

01:00:23,920 --> 01:00:28,090
three databases and the logins up to my

01:00:26,740 --> 01:00:30,130
managed instance those who direct the

01:00:28,090 --> 01:00:36,180
application basically so that's what I'm

01:00:30,130 --> 01:00:39,730
gonna try and do emphasis on the try so

01:00:36,180 --> 01:00:43,410
let's see let me just double check I've

01:00:39,730 --> 01:00:43,410
cleared all the things I need to clear

01:00:49,690 --> 01:00:54,089
make sure I've got everything removed

01:00:54,930 --> 01:01:04,930
yep okay so we should be good to go

01:00:58,650 --> 01:01:09,130
now let's start can everybody read that

01:01:04,930 --> 01:01:09,640
okay okay so I logged into my asia

01:01:09,130 --> 01:01:12,039
account

01:01:09,640 --> 01:01:14,470
earlier when i was copying and pasting

01:01:12,039 --> 01:01:16,539
passwords so since you want me to do

01:01:14,470 --> 01:01:19,000
here is i'm just going to set a bunch of

01:01:16,539 --> 01:01:20,770
perhaps now this says ms equal tips

01:01:19,000 --> 01:01:21,670
because that's where my blog post is and

01:01:20,770 --> 01:01:24,910
that's where you can get all the code

01:01:21,670 --> 01:01:26,260
i'm about to run along with uh basically

01:01:24,910 --> 01:01:30,190
a step through guide

01:01:26,260 --> 01:01:31,450
okay so resource group i need to create

01:01:30,190 --> 01:01:33,880
one of those need to create storage

01:01:31,450 --> 01:01:35,859
accounts storage can't type standard

01:01:33,880 --> 01:01:38,650
locally redundant storage what that

01:01:35,859 --> 01:01:41,319
stands for okay you can have geo

01:01:38,650 --> 01:01:44,230
redundant zone redundant g-- redundant

01:01:41,319 --> 01:01:46,329
read-only as well okay the more

01:01:44,230 --> 01:01:47,770
redundant and the further apart it is

01:01:46,329 --> 01:01:51,789
and the more on line it is the more

01:01:47,770 --> 01:01:53,140
money it's going to cost you also there

01:01:51,789 --> 01:01:54,520
are two different types of storage

01:01:53,140 --> 01:01:56,650
account at the moment and we take a

01:01:54,520 --> 01:01:58,569
slight tangent on the azure platform but

01:01:56,650 --> 01:02:01,150
you've got general-purpose storage and

01:01:58,569 --> 01:02:03,250
general purpose of v2 general purpose

01:02:01,150 --> 01:02:06,099
storage is more expensive for data at

01:02:03,250 --> 01:02:09,339
rest but less expensive when you're

01:02:06,099 --> 01:02:11,950
interacting with it v2 is less expensive

01:02:09,339 --> 01:02:15,430
at rest more expensive when you're

01:02:11,950 --> 01:02:16,750
interacting with it just bear that in

01:02:15,430 --> 01:02:18,520
mind when you think about what you're

01:02:16,750 --> 01:02:20,559
going to put on there if it's whatever

01:02:18,520 --> 01:02:22,329
you didn't do is very chatty go with v1

01:02:20,559 --> 01:02:27,520
if you're going to put up there and

01:02:22,329 --> 01:02:28,920
never talk to it again v2 ok as your

01:02:27,520 --> 01:02:31,329
region I'm gonna put it in West Europe

01:02:28,920 --> 01:02:32,529
and that's my container name when I'm

01:02:31,329 --> 01:02:33,460
going to create the blob storage I want

01:02:32,529 --> 01:02:35,980
to create a container call database

01:02:33,460 --> 01:02:39,250
backups and I need to create policy as

01:02:35,980 --> 01:02:42,309
part of this for when I create the

01:02:39,250 --> 01:02:45,730
shared access essentially so I'm gonna

01:02:42,309 --> 01:02:50,170
run this one here which is create the

01:02:45,730 --> 01:02:55,930
new resource group ok let's move this up

01:02:50,170 --> 01:02:57,579
a bit so scroll down so I now have my

01:02:55,930 --> 01:02:59,890
resource group now one of the things

01:02:57,579 --> 01:03:03,210
you'll notice here is that it's got tags

01:02:59,890 --> 01:03:03,210
it's a property

01:03:03,340 --> 01:03:06,680
ordinarily if I was deploying this type

01:03:05,450 --> 01:03:09,860
of thing to production I would be

01:03:06,680 --> 01:03:13,190
tagging these resources essentially this

01:03:09,860 --> 01:03:15,080
is a way that I can then identify those

01:03:13,190 --> 01:03:17,510
resources very easily and quickly so

01:03:15,080 --> 01:03:20,180
find everything with my so for example

01:03:17,510 --> 01:03:22,490
running a certain application okay that

01:03:20,180 --> 01:03:24,980
application has app services resource

01:03:22,490 --> 01:03:27,980
groups databases blob storage all these

01:03:24,980 --> 01:03:31,460
things if you tag them all with a common

01:03:27,980 --> 01:03:33,350
property then you can easily search for

01:03:31,460 --> 01:03:35,120
and identify those resources in the

01:03:33,350 --> 01:03:36,590
subscription and that can actually

01:03:35,120 --> 01:03:39,320
filter through to billing as well if

01:03:36,590 --> 01:03:42,310
you're looking to rebuild things okay so

01:03:39,320 --> 01:03:44,810
it's strongly recommend a good tagging

01:03:42,310 --> 01:03:47,090
naming convention if you plan on using

01:03:44,810 --> 01:03:49,190
Azure just makes life a little bit

01:03:47,090 --> 01:03:50,390
easier about breaking down those

01:03:49,190 --> 01:03:54,770
barriers and saying okay well who's

01:03:50,390 --> 01:03:56,960
using it for what now when it comes to

01:03:54,770 --> 01:03:59,270
deploying resources and as you deploy

01:03:56,960 --> 01:04:01,010
them into resource groups only deploying

01:03:59,270 --> 01:04:04,220
to that resource group something that is

01:04:01,010 --> 01:04:06,260
within that container essentially so

01:04:04,220 --> 01:04:13,190
I've got a bunch of my application

01:04:06,260 --> 01:04:15,110
contains VMs as a single database some

01:04:13,190 --> 01:04:17,180
blob storage if it's something that I'm

01:04:15,110 --> 01:04:18,590
gonna basically tear down and redeploy

01:04:17,180 --> 01:04:21,140
the whole thing again that's what the

01:04:18,590 --> 01:04:22,550
resource group is for okay very very

01:04:21,140 --> 01:04:24,530
easy to just wipe everything out and

01:04:22,550 --> 01:04:26,510
redeploy from scratch if you need it to

01:04:24,530 --> 01:04:28,580
persist maybe you need to break them out

01:04:26,510 --> 01:04:30,290
into multiple resource groups okay just

01:04:28,580 --> 01:04:32,360
think about how you're gonna logically

01:04:30,290 --> 01:04:34,160
lay things out because you might want to

01:04:32,360 --> 01:04:36,380
burn an entire resource group down and

01:04:34,160 --> 01:04:37,490
then redeploy the whole thing so you

01:04:36,380 --> 01:04:40,130
need to think about whether it's

01:04:37,490 --> 01:04:41,900
stateful or stateless when it comes to

01:04:40,130 --> 01:04:44,150
what you're doing with it in the context

01:04:41,900 --> 01:04:47,090
of them so many of your databases you'll

01:04:44,150 --> 01:04:48,980
probably want to be stateful tearing it

01:04:47,090 --> 01:04:50,660
down and then deploying it and rebuilt

01:04:48,980 --> 01:04:56,060
populating all the data is not something

01:04:50,660 --> 01:04:57,980
we typically do and this is def so I've

01:04:56,060 --> 01:05:00,050
created my resource group now in a

01:04:57,980 --> 01:05:02,300
create storage account and I'm gonna

01:05:00,050 --> 01:05:04,490
create some account keys and set the

01:05:02,300 --> 01:05:06,650
storage context this is we'll go through

01:05:04,490 --> 01:05:08,450
the portal a minute so no highlighting

01:05:06,650 --> 01:05:12,290
code and executing code is really not

01:05:08,450 --> 01:05:14,120
very exciting and not very intuitive but

01:05:12,290 --> 01:05:15,650
this is a lot quicker than me trying to

01:05:14,120 --> 01:05:17,319
do it through the portal

01:05:15,650 --> 01:05:19,729
percent you will create storage account

01:05:17,319 --> 01:05:27,140
the storage account keys now because I'm

01:05:19,729 --> 01:05:29,539
using 2017 in my VM what I need to do

01:05:27,140 --> 01:05:35,239
what's that's doing that actually will

01:05:29,539 --> 01:05:43,729
come across to the portal let me just

01:05:35,239 --> 01:05:49,160
close these down storage account there

01:05:43,729 --> 01:05:53,569
it is so I'm into my storage account

01:05:49,160 --> 01:05:58,359
I'm just fire up resume it again so if

01:05:53,569 --> 01:06:00,529
you're using sequel server 2012 and 2014

01:05:58,359 --> 01:06:03,739
you need to come through to the access

01:06:00,529 --> 01:06:05,599
Keys okay when you create the credit

01:06:03,739 --> 01:06:07,369
I'll show you the credential T sequel

01:06:05,599 --> 01:06:11,259
statement a minute but essentially you

01:06:07,369 --> 01:06:16,400
will need the storage account name and

01:06:11,259 --> 01:06:17,599
one of these two keys okay you'll need

01:06:16,400 --> 01:06:20,059
that information to be able to put it

01:06:17,599 --> 01:06:22,849
into the create credential statement if

01:06:20,059 --> 01:06:26,539
you're using 2016 or above manage the

01:06:22,849 --> 01:06:29,420
instance 2016 2017 you need to set up a

01:06:26,539 --> 01:06:32,210
shared access signature essentially this

01:06:29,420 --> 01:06:34,849
is a one-time code but what you can do

01:06:32,210 --> 01:06:36,440
here is to find the types of access the

01:06:34,849 --> 01:06:38,420
level of permissions is a lot more

01:06:36,440 --> 01:06:42,049
granular than using it with a standard

01:06:38,420 --> 01:06:43,969
naming keys okay you can say validity

01:06:42,049 --> 01:06:46,880
time when's it valid from when's it

01:06:43,969 --> 01:06:48,680
valid to restricted to inbound outbound

01:06:46,880 --> 01:06:51,950
IP addresses things like that so it's a

01:06:48,680 --> 01:06:54,170
full fully capable very granular

01:06:51,950 --> 01:06:56,599
security control mechanism for granting

01:06:54,170 --> 01:06:59,749
or restricting access to your azure blob

01:06:56,599 --> 01:07:02,869
storage okay you can say only through

01:06:59,749 --> 01:07:04,369
HTTPS or HTTP as well and then you

01:07:02,869 --> 01:07:06,279
generate the the SAS key so I'll

01:07:04,369 --> 01:07:10,969
generate one here independently as well

01:07:06,279 --> 01:07:14,170
because it's this SAS token here that we

01:07:10,969 --> 01:07:14,170
want whoops

01:07:14,180 --> 01:07:20,700
okay when we take the property from that

01:07:18,870 --> 01:07:23,570
box and take it to sequel server to use

01:07:20,700 --> 01:07:28,740
the create credential statement this

01:07:23,570 --> 01:07:30,300
question mark needs to disappear so if

01:07:28,740 --> 01:07:32,430
you use the native copy bit in the end

01:07:30,300 --> 01:07:34,560
it will copy it with a question mark and

01:07:32,430 --> 01:07:36,600
then your statements you will create the

01:07:34,560 --> 01:07:39,120
credential fine but all of your backup

01:07:36,600 --> 01:07:41,220
statements will fail because it's

01:07:39,120 --> 01:07:44,510
incorrect you make the question won't go

01:07:41,220 --> 01:07:46,830
away and everything's good okay

01:07:44,510 --> 01:07:48,000
so those are the two different access

01:07:46,830 --> 01:07:49,880
mechanism depending on the version six

01:07:48,000 --> 01:07:51,750
here if you're using prior to 2012

01:07:49,880 --> 01:07:54,450
you're going to have to roll your own

01:07:51,750 --> 01:07:55,920
with PowerShell okay essentially you'll

01:07:54,450 --> 01:07:58,470
be backing up locally and then copying

01:07:55,920 --> 01:08:01,140
the data via PowerShell is that copy or

01:07:58,470 --> 01:08:02,970
whatever to blob storage okay

01:08:01,140 --> 01:08:07,050
this code in my blog post as well for

01:08:02,970 --> 01:08:10,470
that so fingers crossed this has now

01:08:07,050 --> 01:08:13,880
done what it's supposed to yes okay

01:08:10,470 --> 01:08:13,880
so now I need to create my container

01:08:14,360 --> 01:08:20,640
which is done now you know the the

01:08:19,290 --> 01:08:22,950
shared access policy and everything we

01:08:20,640 --> 01:08:31,520
just created through the portal this is

01:08:22,950 --> 01:08:34,320
it doing it with PowerShell set that up

01:08:31,520 --> 01:08:36,600
so now I can create my T sequel

01:08:34,320 --> 01:08:39,420
statements so I'll just set them into

01:08:36,600 --> 01:08:41,730
some and then write that out to the

01:08:39,420 --> 01:08:45,480
console actually we'll do it one at a

01:08:41,730 --> 01:08:48,000
time so so for 2016 is this one here

01:08:45,480 --> 01:08:50,190
create credential now the name of the

01:08:48,000 --> 01:08:55,500
credential for 2016 and above is the

01:08:50,190 --> 01:08:57,240
full path to the container okay with

01:08:55,500 --> 01:08:59,100
identity you're telling it it's a shared

01:08:57,240 --> 01:09:01,410
access signature and then you're

01:08:59,100 --> 01:09:03,230
providing the secret as you can see

01:09:01,410 --> 01:09:05,190
there there's no question mark on it

01:09:03,230 --> 01:09:09,450
they weren't able to read that all right

01:09:05,190 --> 01:09:13,080
the bomb if I'm doing it with 2012 or

01:09:09,450 --> 01:09:14,970
2014 my statements slightly different

01:09:13,080 --> 01:09:19,950
the credential name can be whatever you

01:09:14,970 --> 01:09:23,190
want with identity the identity is now

01:09:19,950 --> 01:09:24,990
the name of the storage account and the

01:09:23,190 --> 01:09:26,290
secret again is that key that we took

01:09:24,990 --> 01:09:29,589
from that page

01:09:26,290 --> 01:09:31,120
okay now you can rotate these keys at

01:09:29,589 --> 01:09:32,710
any point in time to invalidate these

01:09:31,120 --> 01:09:38,319
credentials so someone does lose them

01:09:32,710 --> 01:09:46,350
wipe them out okay so now I need to

01:09:38,319 --> 01:09:49,000
create my credentials on the servers now

01:09:46,350 --> 01:09:51,700
you'll see my very very secure password

01:09:49,000 --> 01:09:53,230
here just simply because the password

01:09:51,700 --> 01:09:54,970
has to be very long for managed

01:09:53,230 --> 01:09:59,080
instances I think it's a minimum of 16

01:09:54,970 --> 01:10:05,590
characters and I was very very tired

01:09:59,080 --> 01:10:08,920
that day so I can use either I can use

01:10:05,590 --> 01:10:11,800
invoke sequel command now there are I

01:10:08,920 --> 01:10:14,370
remember I mentioned DBA tools there is

01:10:11,800 --> 01:10:17,920
a create DBA credential command lip

01:10:14,370 --> 01:10:20,230
however if you've not got the latest

01:10:17,920 --> 01:10:23,230
management studio installed it won't

01:10:20,230 --> 01:10:24,640
work I'm still working with Christy and

01:10:23,230 --> 01:10:27,340
the team on that one to try and figure

01:10:24,640 --> 01:10:29,520
out quite which DLL it is we need to get

01:10:27,340 --> 01:10:32,220
hold of and pull in

01:10:29,520 --> 01:10:34,180
because Microsoft keep changing things

01:10:32,220 --> 01:10:35,230
so I'm going to use invoke sequel

01:10:34,180 --> 01:10:38,830
command and I'm just going to execute

01:10:35,230 --> 01:10:39,640
the T sequel statement I generated okay

01:10:38,830 --> 01:10:41,350
so this is going to be on my own

01:10:39,640 --> 01:10:44,380
premises or retail sequel server when

01:10:41,350 --> 01:10:46,450
it's equals zero okay and then I've

01:10:44,380 --> 01:10:54,610
selected out and said okay well there's

01:10:46,450 --> 01:10:56,970
my so I'll set these up and then I'm

01:10:54,610 --> 01:11:00,160
gonna create that on my managed instance

01:10:56,970 --> 01:11:01,900
same way this time just invoke sequel

01:11:00,160 --> 01:11:03,700
command there we go

01:11:01,900 --> 01:11:04,930
so I've created the same credentials

01:11:03,700 --> 01:11:06,940
which because I'm accessing the same

01:11:04,930 --> 01:11:08,830
blob store you can create different

01:11:06,940 --> 01:11:10,000
credentials depending on how granular

01:11:08,830 --> 01:11:15,630
and how much you want to segment your

01:11:10,000 --> 01:11:21,100
security now for brevity he says with a

01:11:15,630 --> 01:11:27,130
dot dot dot basically gonna set the URL

01:11:21,100 --> 01:11:29,130
path so there's my backup path I'm going

01:11:27,130 --> 01:11:31,450
to pass into my backup statements and

01:11:29,130 --> 01:11:34,300
this is an example of the powershell

01:11:31,450 --> 01:11:36,640
commandlets from DBA tools backup DBA

01:11:34,300 --> 01:11:39,100
databases so I'm just going to say do

01:11:36,640 --> 01:11:39,790
these now one thing I'll say is when we

01:11:39,100 --> 01:11:43,360
come to do the day

01:11:39,790 --> 01:11:46,060
bass restores we can't use the the

01:11:43,360 --> 01:11:47,410
commandments from DBA tools because

01:11:46,060 --> 01:11:49,030
myself to change the way that the

01:11:47,410 --> 01:11:50,680
restore command works on managed

01:11:49,030 --> 01:11:53,110
instance okay

01:11:50,680 --> 01:11:57,100
so the standard s mo stuff that the the

01:11:53,110 --> 01:11:59,560
team of written doesn't work so just

01:11:57,100 --> 01:12:01,000
back the other two up as well lost I'm

01:11:59,560 --> 01:12:03,970
waiting for that let's nip over to the

01:12:01,000 --> 01:12:07,330
portal briefly and then we'll come down

01:12:03,970 --> 01:12:10,620
to containers and then there's my

01:12:07,330 --> 01:12:18,600
container and there are my backups

01:12:10,620 --> 01:12:18,600
backed up straight to URL okay now a

01:12:22,320 --> 01:12:37,180
moment I need to come to my managed

01:12:25,510 --> 01:12:48,090
instance and then archive from URL

01:12:37,180 --> 01:12:48,090
equals and do that so what I'm gonna do

01:12:49,410 --> 01:12:53,530
I'm gonna create three of these because

01:12:52,000 --> 01:12:57,760
they'll make life really unpleasant for

01:12:53,530 --> 01:13:01,390
it come back to the container and let's

01:12:57,760 --> 01:13:03,280
just get the blob properties because

01:13:01,390 --> 01:13:08,040
that'll give me it's full URI which

01:13:03,280 --> 01:13:08,040
means I can come to my restore database

01:13:08,310 --> 01:13:15,030
so archive oops

01:13:16,620 --> 01:13:30,360
okay so we'll kick that off yep now you

01:13:26,620 --> 01:13:33,130
can't use things like with stats for

01:13:30,360 --> 01:13:34,990
managed instance the reason being is the

01:13:33,130 --> 01:13:36,460
different that what Microsoft date with

01:13:34,990 --> 01:13:38,490
mentions that they recognize that

01:13:36,460 --> 01:13:40,600
there's going to be a potential

01:13:38,490 --> 01:13:43,780
disconnect and disruption between my

01:13:40,600 --> 01:13:46,330
client and the database server if I'm

01:13:43,780 --> 01:13:49,450
doing a very large restore that can

01:13:46,330 --> 01:13:53,770
potentially take a lot of time so what

01:13:49,450 --> 01:13:59,040
that means is they basically

01:13:53,770 --> 01:14:02,140
almost treated like a sort of RPC in

01:13:59,040 --> 01:14:03,550
that as soon as I hit go it actually

01:14:02,140 --> 01:14:05,470
sends the command so if I lose that

01:14:03,550 --> 01:14:07,900
connection to the server the backup will

01:14:05,470 --> 01:14:10,300
not fail it will complete because it

01:14:07,900 --> 01:14:13,360
knows that it's in Asia the blobs in

01:14:10,300 --> 01:14:15,400
Asia well the internet means that the

01:14:13,360 --> 01:14:18,490
internet could have gone away so I'll

01:14:15,400 --> 01:14:21,940
just crack on and get it done so sales

01:14:18,490 --> 01:14:23,560
data mark restore that now the restores

01:14:21,940 --> 01:14:26,860
may take a little bit longer and I

01:14:23,560 --> 01:14:28,420
managed instance the reason being is

01:14:26,860 --> 01:14:29,980
that under the hood it's actually

01:14:28,420 --> 01:14:31,390
generating multiple replicas and

01:14:29,980 --> 01:14:33,100
streaming all of that data down into

01:14:31,390 --> 01:14:34,810
them as well so it's instantiating

01:14:33,100 --> 01:14:50,890
multiple versions of the database at the

01:14:34,810 --> 01:14:52,480
same time sandbox another thing you'll

01:14:50,890 --> 01:14:54,100
notice that I'm not doing here can

01:14:52,480 --> 01:14:56,350
everyone read that all right

01:14:54,100 --> 01:14:58,300
I'm not specifying anything like with

01:14:56,350 --> 01:14:59,620
move which ordinarily if I'm moving from

01:14:58,300 --> 01:15:03,670
one server to another with different

01:14:59,620 --> 01:15:05,080
storage layouts I'd need to do managed

01:15:03,670 --> 01:15:06,520
instance just handles all of that for me

01:15:05,080 --> 01:15:08,830
I just say just restore this and stick

01:15:06,520 --> 01:15:10,480
the data in appropriate places on your

01:15:08,830 --> 01:15:12,900
storage platform okay

01:15:10,480 --> 01:15:15,070
so whilst that's doing what it's doing

01:15:12,900 --> 01:15:17,080
let's crack on and move some databases

01:15:15,070 --> 01:15:20,410
stuff or let's move some in users around

01:15:17,080 --> 01:15:23,200
now you saw I had a number of logins I

01:15:20,410 --> 01:15:26,020
need to migrate as well this is where

01:15:23,200 --> 01:15:34,180
PowerShell comes to the fore so I'm

01:15:26,020 --> 01:15:42,120
gonna create my credential remember

01:15:34,180 --> 01:15:42,120
password no it's that one

01:15:43,519 --> 01:15:49,769
no not question marks this time okay I'm

01:15:48,719 --> 01:15:52,349
a little basically set an array of

01:15:49,769 --> 01:15:54,719
logins I want to move now with the copy

01:15:52,349 --> 01:15:57,300
DBA login again this is from DBA tools

01:15:54,719 --> 01:16:00,179
you can basically say these logins this

01:15:57,300 --> 01:16:02,309
login all logins or exclude these logins

01:16:00,179 --> 01:16:06,090
it's highly versatile so I just run a

01:16:02,309 --> 01:16:12,329
for each loop and off we go and I'm

01:16:06,090 --> 01:16:14,309
gonna hope that it works well that

01:16:12,329 --> 01:16:17,429
there's no red yet so that's always a

01:16:14,309 --> 01:16:20,579
bonus yeah

01:16:17,429 --> 01:16:24,059
successful so I've actually just moved

01:16:20,579 --> 01:16:28,170
those logins across which is nice wrong

01:16:24,059 --> 01:16:36,239
one so now if I come back to here and

01:16:28,170 --> 01:16:41,190
then expand that out on my there we go

01:16:36,239 --> 01:16:49,260
got more now why yeah it looks like

01:16:41,190 --> 01:16:52,489
they're working now which is good so if

01:16:49,260 --> 01:16:58,219
we select from servant principals here

01:16:52,489 --> 01:16:58,219
come down we'll find Stark

01:17:06,700 --> 01:17:30,280
okay I'm fine

01:17:19,850 --> 01:17:31,820
Stark I figure I did something wrong

01:17:30,280 --> 01:17:33,650
there we go

01:17:31,820 --> 01:17:36,920
you'll notice that the SIDS lineup

01:17:33,650 --> 01:17:42,590
they're the same Sid okay which is this

01:17:36,920 --> 01:17:45,730
one here in the middle yes the joy is

01:17:42,590 --> 01:17:45,730
the human eye and pattern recognition

01:17:46,720 --> 01:17:54,860
okay so the citizens same that's the

01:17:49,910 --> 01:17:58,280
joys of migrating if I just created if I

01:17:54,860 --> 01:17:59,780
just create it with a standard new one

01:17:58,280 --> 01:18:01,850
it will just create a new Sid and then

01:17:59,780 --> 01:18:04,610
my databases won't line up and nothing

01:18:01,850 --> 01:18:07,580
will work although at the moment my

01:18:04,610 --> 01:18:11,300
databases aren't restored so I've run

01:18:07,580 --> 01:18:13,490
out of time this is one of the joys of

01:18:11,300 --> 01:18:15,320
preview services I've got most of the

01:18:13,490 --> 01:18:18,080
way there in about 10-15 minutes so

01:18:15,320 --> 01:18:20,180
that's not too bad but essentially all

01:18:18,080 --> 01:18:25,220
I'd need to do then is cut back across

01:18:20,180 --> 01:18:28,160
to my app server stop coming here update

01:18:25,220 --> 01:18:31,420
my config file so I've migrating all my

01:18:28,160 --> 01:18:37,160
logins and then press Start again done

01:18:31,420 --> 01:18:39,260
okay so it can be very very quick and

01:18:37,160 --> 01:18:40,700
easy so sorry I couldn't complete that

01:18:39,260 --> 01:18:42,470
one for you I was being a little bit

01:18:40,700 --> 01:18:46,820
ambitious so we go through a quick

01:18:42,470 --> 01:18:52,250
summary really what we're looking at

01:18:46,820 --> 01:18:53,780
here is yeah we now have another

01:18:52,250 --> 01:18:57,140
platform as a service offering available

01:18:53,780 --> 01:18:58,820
to us if you're migrating from one

01:18:57,140 --> 01:19:00,350
premises it can give you a lot of value

01:18:58,820 --> 01:19:03,290
if you're starting with cloud borne

01:19:00,350 --> 01:19:05,000
solutions maybe not depends on how many

01:19:03,290 --> 01:19:06,800
databases you need the architecture

01:19:05,000 --> 01:19:08,600
you've got the type of design patterns

01:19:06,800 --> 01:19:09,710
you're going for very high pitch

01:19:08,600 --> 01:19:12,770
coverage which makes life a lot easier

01:19:09,710 --> 01:19:14,840
for those are our migrating

01:19:12,770 --> 01:19:16,820
and the migration paths that are open to

01:19:14,840 --> 01:19:20,000
us are ones that are tried tested and

01:19:16,820 --> 01:19:20,980
trusted backup and restore we've been

01:19:20,000 --> 01:19:23,150
doing that forever

01:19:20,980 --> 01:19:24,860
transactional replication is still very

01:19:23,150 --> 01:19:26,570
very viable option for migrating

01:19:24,860 --> 01:19:28,610
databases when you want to get them as

01:19:26,570 --> 01:19:31,300
close as possible for minimizing

01:19:28,610 --> 01:19:35,990
downtime log shipping backup restore

01:19:31,300 --> 01:19:37,270
it's all available to us has anybody got

01:19:35,990 --> 01:19:40,520
any questions

01:19:37,270 --> 01:19:43,760
hopefully I've made you think not to you

01:19:40,520 --> 01:19:45,320
bad it's got how to play with it one

01:19:43,760 --> 01:19:46,940
thing I will say is you need to sign up

01:19:45,320 --> 01:19:48,620
to the preview conditions and that can

01:19:46,940 --> 01:19:51,320
take because someone's gonna go and tick

01:19:48,620 --> 01:19:53,000
a box and say yes this is right because

01:19:51,320 --> 01:19:54,650
there's big capacity issues well because

01:19:53,000 --> 01:19:56,390
there is a huge demand for this service

01:19:54,650 --> 01:19:58,400
it can take a little while to get

01:19:56,390 --> 01:20:03,290
approved for the preview and then it

01:19:58,400 --> 01:20:05,060
takes about 12 hours for an ami to

01:20:03,290 --> 01:20:07,640
deploy because essentially you get put

01:20:05,060 --> 01:20:08,840
into a queue and it processes through

01:20:07,640 --> 01:20:10,610
and there's that demand for them and

01:20:08,840 --> 01:20:12,770
limited hardware capabilities at this

01:20:10,610 --> 01:20:13,970
point whilst we're in preview obviously

01:20:12,770 --> 01:20:16,610
all that will disappear when we hit

01:20:13,970 --> 01:20:18,720
product well it's not as many questions

01:20:16,610 --> 01:20:23,459
um thank you very much

01:20:18,720 --> 01:20:23,459

YouTube URL: https://www.youtube.com/watch?v=_4gggT9PAVY


