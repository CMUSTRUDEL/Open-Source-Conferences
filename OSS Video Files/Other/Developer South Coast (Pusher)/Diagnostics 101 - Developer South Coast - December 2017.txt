Title: Diagnostics 101 - Developer South Coast - December 2017
Publication date: 2018-01-31
Playlist: Developer South Coast
Description: 
	No-one writes software without getting stuck from time to time. Whether it's an API not working as expected, an algorithm not producing the right results, or a vexing exception, it's a rare day when coding is just plain sailing. So what do you do when you hit a problem? In this talk I'll walk through some strategies and techniques so that you can:

Narrow down where a problem occurs Reproduce the problem in a debug-friendly environment Write a log as you go, to avoid going down blind alleys multiple times Capture your problem concisely but precisely, to ask colleagues for help, report a bug or post on Stack Overflow While there are no true silver bullets in computing, the ability to work on solving problems in a methodical way is as close as I've found.

More about Developer South Coast: https://www.meetup.com/DeveloperSouthCoast/
Captions: 
	00:00:00,030 --> 00:00:05,009
I'll give my normal wind to start with

00:00:02,040 --> 00:00:09,210
looking at this room it's all white man

00:00:05,009 --> 00:00:11,940
nearly not quite all but nearly enough

00:00:09,210 --> 00:00:18,359
that it's a problem it's a problem

00:00:11,940 --> 00:00:22,289
because if we are creating the future we

00:00:18,359 --> 00:00:24,930
will fix problems that we can see and we

00:00:22,289 --> 00:00:28,380
can't experience the world in any way

00:00:24,930 --> 00:00:30,510
other than as we are so it's not my

00:00:28,380 --> 00:00:32,250
fault that I'm a white man it's not my

00:00:30,510 --> 00:00:34,440
fault that I think like a white man but

00:00:32,250 --> 00:00:37,829
it's my fault that there aren't more

00:00:34,440 --> 00:00:40,050
non-white non men in our community to

00:00:37,829 --> 00:00:42,090
experience the joy that is software so

00:00:40,050 --> 00:00:51,090
it's up to all of us to improve things

00:00:42,090 --> 00:00:51,809
but I if I could believe if I could

00:00:51,090 --> 00:00:54,420
believe that

00:00:51,809 --> 00:00:59,730
the fact that I only spend up speaking

00:00:54,420 --> 00:01:02,370
to white men is do to me that would make

00:00:59,730 --> 00:01:04,140
me so happy because that would mean that

00:01:02,370 --> 00:01:08,310
it's only me that's got to change

00:01:04,140 --> 00:01:10,530
and that's manageable but seriously we

00:01:08,310 --> 00:01:11,939
have a problem in our community we need

00:01:10,530 --> 00:01:14,850
to do something about it and that's up

00:01:11,939 --> 00:01:16,890
to all of us okay rant over I'm getting

00:01:14,850 --> 00:01:19,890
quite used to doing that runt everywhere

00:01:16,890 --> 00:01:22,710
I cave now um I'll be running a bit more

00:01:19,890 --> 00:01:24,509
tonight though because I've had an

00:01:22,710 --> 00:01:28,159
interesting day on Stack Overflow for

00:01:24,509 --> 00:01:31,409
exactly this reason and I thought we'd

00:01:28,159 --> 00:01:33,960
I'll go into the slides in a bit but

00:01:31,409 --> 00:01:36,210
before that I like to sort of find out

00:01:33,960 --> 00:01:39,840
what your experiences of Stack Overflow

00:01:36,210 --> 00:01:41,549
have been like I'm assuming that most of

00:01:39,840 --> 00:01:43,320
you have used Stack Overflow even if

00:01:41,549 --> 00:01:48,000
it's just lurking and seen some search

00:01:43,320 --> 00:01:52,320
results yeah okay um have any of you had

00:01:48,000 --> 00:01:55,020
a bad experience on sec overflow okay I

00:01:52,320 --> 00:01:56,250
may be preaching to the choir then and I

00:01:55,020 --> 00:01:58,500
don't know whether you are see churches

00:01:56,250 --> 00:02:01,439
have choirs we don't tend to do them in

00:01:58,500 --> 00:02:04,020
Methodism much I was at a wonderful

00:02:01,439 --> 00:02:07,049
carol service yesterday that my kids

00:02:04,020 --> 00:02:08,069
school was putting on and I seem to be

00:02:07,049 --> 00:02:10,009
the only member of the congregation

00:02:08,069 --> 00:02:12,250
singing my heart help but there we go

00:02:10,009 --> 00:02:16,710
entirely to a different

00:02:12,250 --> 00:02:21,700
um so my problem on psycho flow was

00:02:16,710 --> 00:02:27,910
three questions today one about xml and

00:02:21,700 --> 00:02:30,970
numbers one about someone in java having

00:02:27,910 --> 00:02:33,220
a problem with a scanner which is a

00:02:30,970 --> 00:02:36,220
terrible terrible class in in java you

00:02:33,220 --> 00:02:38,500
can tell API design and where it's gone

00:02:36,220 --> 00:02:39,760
wrong by the kind of the kind of number

00:02:38,500 --> 00:02:44,950
of questions that you get on Stack

00:02:39,760 --> 00:02:49,600
Overflow and the third was about reading

00:02:44,950 --> 00:02:51,310
a from a deflate stream and I won't put

00:02:49,600 --> 00:02:53,140
up the questions partly because you know

00:02:51,310 --> 00:02:56,590
you might have a look at the user in

00:02:53,140 --> 00:02:58,900
question and in each case and things but

00:02:56,590 --> 00:03:03,780
the first one were saying I get a number

00:02:58,900 --> 00:03:09,040
x 10,000 when i read some data from xml

00:03:03,780 --> 00:03:13,060
here's my code and there were 150 lines

00:03:09,040 --> 00:03:16,239
of code or so that i think even from the

00:03:13,060 --> 00:03:18,220
start didn't compile because there was

00:03:16,239 --> 00:03:21,040
right here's a class and here's the

00:03:18,220 --> 00:03:23,080
constructor and here's a method no end

00:03:21,040 --> 00:03:24,459
of the constructor didn't have a closing

00:03:23,080 --> 00:03:28,450
brace or anything so this clearly wasn't

00:03:24,459 --> 00:03:31,299
the whole code and right here's the

00:03:28,450 --> 00:03:33,360
another class that uses it and this was

00:03:31,299 --> 00:03:36,459
clearly in the middle of some asp.net

00:03:33,360 --> 00:03:38,560
application or similar so there was

00:03:36,459 --> 00:03:40,630
nothing that I could start I said could

00:03:38,560 --> 00:03:46,209
I have a minimal complete verifiable

00:03:40,630 --> 00:03:49,299
example and after a about twenty minutes

00:03:46,209 --> 00:03:50,890
he said there you go that's still not

00:03:49,299 --> 00:03:53,950
going to compile it still doesn't have a

00:03:50,890 --> 00:03:56,769
main method and there's no data you've

00:03:53,950 --> 00:03:59,049
got a problem in your XML and you're not

00:03:56,769 --> 00:04:02,260
showing me the XML how can I possibly

00:03:59,049 --> 00:04:04,720
reproduce this we went through a bit

00:04:02,260 --> 00:04:07,959
more banter and here have a look now no

00:04:04,720 --> 00:04:09,250
I still can't copy/paste compile run see

00:04:07,959 --> 00:04:11,230
the problem Oh

00:04:09,250 --> 00:04:14,170
try now no there's still no main method

00:04:11,230 --> 00:04:17,440
what they're gonna be running Oh deleted

00:04:14,170 --> 00:04:20,260
the question posted a new duplicate

00:04:17,440 --> 00:04:24,039
question about 10 minutes later why are

00:04:20,260 --> 00:04:25,750
you doing this I believe the problem was

00:04:24,039 --> 00:04:26,200
in one line where he was calling double

00:04:25,750 --> 00:04:29,530
dot

00:04:26,200 --> 00:04:31,330
I'm passing in a string the fact that he

00:04:29,530 --> 00:04:33,790
was writing that to sit her to a CSV

00:04:31,330 --> 00:04:35,950
file later completely irrelevant the

00:04:33,790 --> 00:04:37,810
fact that he was getting some XML from a

00:04:35,950 --> 00:04:39,730
web service the web server is completely

00:04:37,810 --> 00:04:43,120
irrelevant the XML completely irrelevant

00:04:39,730 --> 00:04:47,680
a minimal example of that would have

00:04:43,120 --> 00:04:50,770
been using system class tests static

00:04:47,680 --> 00:04:53,440
void main string text equals string

00:04:50,770 --> 00:04:55,960
literal double D equals double dot parse

00:04:53,440 --> 00:04:59,020
text and then either console dot write

00:04:55,960 --> 00:05:00,730
line D or something like that like I can

00:04:59,020 --> 00:05:05,740
say it quicker than I could have read

00:05:00,730 --> 00:05:07,450
his question before so that's sort of

00:05:05,740 --> 00:05:13,090
what I'm talking about tonight is how

00:05:07,450 --> 00:05:15,910
how we can get to genuine minimal but

00:05:13,090 --> 00:05:18,250
complete verifiable examples why they're

00:05:15,910 --> 00:05:20,470
so important and why if none of you have

00:05:18,250 --> 00:05:23,170
had problematic experiences where you

00:05:20,470 --> 00:05:24,850
ask a question on Stack Overflow and you

00:05:23,170 --> 00:05:27,250
get a load of people saying you need to

00:05:24,850 --> 00:05:30,040
fix your question if you haven't had

00:05:27,250 --> 00:05:33,010
that experience then you're you're on

00:05:30,040 --> 00:05:34,750
Santa's nice list but you need to help

00:05:33,010 --> 00:05:38,320
the rest of the community because

00:05:34,750 --> 00:05:40,690
there's clearly a problem sock overflow

00:05:38,320 --> 00:05:43,180
has been getting a bad reputation as

00:05:40,690 --> 00:05:45,670
being a nasty place where you know all

00:05:43,180 --> 00:05:48,490
these horrible moderators come and close

00:05:45,670 --> 00:05:51,760
any interesting question I know we just

00:05:48,490 --> 00:05:55,240
have quality standards and it's not for

00:05:51,760 --> 00:05:58,120
me it's not really about keeping stack

00:05:55,240 --> 00:05:59,680
overflows quality high this isn't talked

00:05:58,120 --> 00:06:02,500
about Stack Overflow

00:05:59,680 --> 00:06:07,330
it's about developers and developer

00:06:02,500 --> 00:06:09,540
practices because when I quite often I

00:06:07,330 --> 00:06:12,070
can see a question and I know the answer

00:06:09,540 --> 00:06:15,550
but I will force someone to go through

00:06:12,070 --> 00:06:18,100
and get a better question because the

00:06:15,550 --> 00:06:20,350
process of doing that is more important

00:06:18,100 --> 00:06:22,450
than the answer the answer will help

00:06:20,350 --> 00:06:26,380
them today it's that that whole teach

00:06:22,450 --> 00:06:28,390
someone to fish business and that's

00:06:26,380 --> 00:06:30,160
where I can't possibly do that on my own

00:06:28,390 --> 00:06:33,040
so at this point I will actually go back

00:06:30,160 --> 00:06:35,830
to my slides um these were slides that I

00:06:33,040 --> 00:06:39,310
have presented twice from my shared both

00:06:35,830 --> 00:06:40,180
times um I work from home about four

00:06:39,310 --> 00:06:43,810
days a week

00:06:40,180 --> 00:06:45,070
I work from my shed people keep telling

00:06:43,810 --> 00:06:48,639
me that I shouldn't call it a shed

00:06:45,070 --> 00:06:50,680
because it's it's a garden building and

00:06:48,639 --> 00:06:53,080
I should really have a picture of it but

00:06:50,680 --> 00:06:55,000
basically you look down my garden you

00:06:53,080 --> 00:06:56,889
see my office bit there and then there

00:06:55,000 --> 00:07:00,330
is a bit that's got lawnmowers and stuff

00:06:56,889 --> 00:07:05,139
in but my shed has an ice-cream maker

00:07:00,330 --> 00:07:07,360
and Joanne Miro pictures and surround

00:07:05,139 --> 00:07:10,060
sound and things so it's these sheds go

00:07:07,360 --> 00:07:13,870
it's quite nice but I've presented this

00:07:10,060 --> 00:07:15,729
twice from my shed once to a sort of

00:07:13,870 --> 00:07:18,789
live audience around the world and once

00:07:15,729 --> 00:07:20,050
just being recorded to then be shown so

00:07:18,789 --> 00:07:22,960
I've never given it in front of a live

00:07:20,050 --> 00:07:26,440
audience live and in person

00:07:22,960 --> 00:07:27,940
so I want feedback as we go along

00:07:26,440 --> 00:07:30,370
well feedback afterwards about what

00:07:27,940 --> 00:07:32,259
could be improved but also interaction

00:07:30,370 --> 00:07:34,360
as we go along if you're quiet the whole

00:07:32,259 --> 00:07:36,550
time this will be a lot less interesting

00:07:34,360 --> 00:07:37,960
I won't say it'll be deathly boring but

00:07:36,550 --> 00:07:40,300
it'll be a lot less interesting than if

00:07:37,960 --> 00:07:42,400
you do pipe up if you see I've done

00:07:40,300 --> 00:07:44,860
something wrong or well why didn't you

00:07:42,400 --> 00:07:46,960
do that bit first or whatever that'll be

00:07:44,860 --> 00:07:49,360
where actually everyone else will get a

00:07:46,960 --> 00:07:51,729
lot more outs of things right so where I

00:07:49,360 --> 00:07:54,550
was coming in was where you fit in with

00:07:51,729 --> 00:07:58,650
me doing this talk I'm on a bit of a

00:07:54,550 --> 00:08:02,139
mission so I had a mission from about

00:07:58,650 --> 00:08:05,500
2009 or something to sort out date and

00:08:02,139 --> 00:08:08,139
time for.net and now I've gone about as

00:08:05,500 --> 00:08:10,479
far with us as I think I can in terms of

00:08:08,139 --> 00:08:13,120
you know a time it will make your life

00:08:10,479 --> 00:08:15,220
better and that's a whole other talk and

00:08:13,120 --> 00:08:16,750
yeah if if we get through this one by

00:08:15,220 --> 00:08:17,860
the time pizzas come I can just talk

00:08:16,750 --> 00:08:22,630
about no design for the second half

00:08:17,860 --> 00:08:25,060
it'll be fine um but my mission for the

00:08:22,630 --> 00:08:27,280
next however many years via blog posts

00:08:25,060 --> 00:08:31,200
and speaking and getting other people to

00:08:27,280 --> 00:08:33,820
chip in is to improve the world's

00:08:31,200 --> 00:08:36,820
diagnostic capabilities and I'm not

00:08:33,820 --> 00:08:39,550
talking about anything really difficult

00:08:36,820 --> 00:08:41,500
and ground there are there are cool

00:08:39,550 --> 00:08:44,020
things out there I saw Microsoft

00:08:41,500 --> 00:08:45,970
announced recently something that Google

00:08:44,020 --> 00:08:48,160
cloud platform has as well in terms of

00:08:45,970 --> 00:08:50,079
diagnostic debuggers not the kind of

00:08:48,160 --> 00:08:52,630
debugger where you step through but

00:08:50,079 --> 00:08:53,890
where you've got a service running

00:08:52,630 --> 00:08:56,589
across hundreds of No

00:08:53,890 --> 00:08:59,079
and you know that sometimes something

00:08:56,589 --> 00:09:00,940
goes wrong so you put a breakpoint

00:08:59,079 --> 00:09:04,089
snapshot point whatever you want to call

00:09:00,940 --> 00:09:05,350
it on a line of code and if that happens

00:09:04,089 --> 00:09:07,660
on any of the servers

00:09:05,350 --> 00:09:09,459
it doesn't stop but it captures all the

00:09:07,660 --> 00:09:12,070
information so you can get diagnostic

00:09:09,459 --> 00:09:14,279
stuff later on so I'm not talking about

00:09:12,070 --> 00:09:16,959
that kind of stuff that's that sort of

00:09:14,279 --> 00:09:18,850
401 or I don't know how all that the

00:09:16,959 --> 00:09:21,970
American one o ones and things work but

00:09:18,850 --> 00:09:23,800
that's that's how about stuff and the

00:09:21,970 --> 00:09:26,230
world needs that but not nearly as much

00:09:23,800 --> 00:09:30,220
as it needs good old-fashioned knowing

00:09:26,230 --> 00:09:32,170
what you're doing to start with so I'm

00:09:30,220 --> 00:09:34,089
trying to do my best here but I can't do

00:09:32,170 --> 00:09:36,070
it all myself I would like you to spread

00:09:34,089 --> 00:09:41,050
the word so that will be in your

00:09:36,070 --> 00:09:43,740
companies if any do any of you teach no

00:09:41,050 --> 00:09:45,970
or go into schools and give talks

00:09:43,740 --> 00:09:47,079
occasionally no okay well you could

00:09:45,970 --> 00:09:50,680
start doing that for one thing

00:09:47,079 --> 00:09:55,089
and likewise universities I gave a talk

00:09:50,680 --> 00:09:56,920
in London Metropolitan University early

00:09:55,089 --> 00:10:00,760
this year maybe last year I lose track

00:09:56,920 --> 00:10:03,010
of time about things that you don't

00:10:00,760 --> 00:10:04,180
learn in a computer science course but

00:10:03,010 --> 00:10:06,970
that you need to be a software engineer

00:10:04,180 --> 00:10:09,040
so I'm firmly of the opinion that there

00:10:06,970 --> 00:10:11,740
are far more people doing computer

00:10:09,040 --> 00:10:13,449
science degrees than need computer

00:10:11,740 --> 00:10:15,839
science and there aren't nearly enough

00:10:13,449 --> 00:10:18,310
people studying software engineering

00:10:15,839 --> 00:10:19,779
seriously in order to be software

00:10:18,310 --> 00:10:22,329
engineers so we should have more

00:10:19,779 --> 00:10:23,290
software engineering courses but anyway

00:10:22,329 --> 00:10:24,850
if you're going to be a computer

00:10:23,290 --> 00:10:26,529
scientist wouldn't it be good to use

00:10:24,850 --> 00:10:29,320
source control and know about unit

00:10:26,529 --> 00:10:32,170
testing when I talk to a roomful of

00:10:29,320 --> 00:10:34,300
computer scientists I think one person

00:10:32,170 --> 00:10:36,010
was using so there are sort of 40 or 50

00:10:34,300 --> 00:10:38,100
people one person using source control

00:10:36,010 --> 00:10:39,339
about three people doing unit testing

00:10:38,100 --> 00:10:41,769
what

00:10:39,339 --> 00:10:43,390
it's just that makes no sense to me we

00:10:41,769 --> 00:10:46,180
need to get the word out there are these

00:10:43,390 --> 00:10:48,970
things they're useful you get isn't

00:10:46,180 --> 00:10:51,160
exactly friendly but eventually you can

00:10:48,970 --> 00:10:53,350
at least learn by rote the commands that

00:10:51,160 --> 00:10:55,029
you need for and then find someone who

00:10:53,350 --> 00:10:59,320
you can turn to when it all goes to pot

00:10:55,029 --> 00:11:01,209
I was there for a while I'm now you know

00:10:59,320 --> 00:11:07,030
I use ref log effectively sometimes

00:11:01,209 --> 00:11:09,980
these days so we need to spread the word

00:11:07,030 --> 00:11:11,620
and I fit in by spreading the word to

00:11:09,980 --> 00:11:14,510
you and you will go out from there um

00:11:11,620 --> 00:11:18,620
the point of this light if I remember I

00:11:14,510 --> 00:11:22,220
remember my notes rightly is that unlike

00:11:18,620 --> 00:11:24,110
some talks that I gave the idea of this

00:11:22,220 --> 00:11:27,110
certainly isn't that I come out looking

00:11:24,110 --> 00:11:28,760
smart okay there will be there are talks

00:11:27,110 --> 00:11:30,770
that I gave so I look at the features of

00:11:28,760 --> 00:11:32,870
c-sharp seven you've never seen features

00:11:30,770 --> 00:11:34,970
like this and by demonstrating them

00:11:32,870 --> 00:11:36,410
magnificently yes you can learn but I

00:11:34,970 --> 00:11:39,830
look good and that's the main thing to

00:11:36,410 --> 00:11:42,170
come out of the talk okay not really but

00:11:39,830 --> 00:11:44,960
that's very very much not the point of

00:11:42,170 --> 00:11:48,260
today the point is I will show you some

00:11:44,960 --> 00:11:51,080
code and doing really obvious stuff to

00:11:48,260 --> 00:11:53,720
code and you will go that was really

00:11:51,080 --> 00:11:56,510
obvious I'll say yeah it was wasn't it

00:11:53,720 --> 00:11:58,040
but why don't people do it why do people

00:11:56,510 --> 00:12:01,640
persist in saying that's a complete

00:11:58,040 --> 00:12:03,890
example when stuff won't compile that's

00:12:01,640 --> 00:12:06,290
a minimal example well you've got a load

00:12:03,890 --> 00:12:08,720
of stuff talking about a logger when

00:12:06,290 --> 00:12:10,880
that's not really you we don't need is

00:12:08,720 --> 00:12:12,350
logger enabled if you want to write

00:12:10,880 --> 00:12:14,330
something out for the sake of the

00:12:12,350 --> 00:12:14,900
example then console dot write line is

00:12:14,330 --> 00:12:17,630
your friend

00:12:14,900 --> 00:12:19,760
if you don't fine but there's no need to

00:12:17,630 --> 00:12:24,260
conditional eyes it and try to talk to a

00:12:19,760 --> 00:12:27,590
web service and stuff okay so there are

00:12:24,260 --> 00:12:31,250
four things to remember techniques to

00:12:27,590 --> 00:12:34,250
remember which are on here and you

00:12:31,250 --> 00:12:37,180
probably guess the rest of the talk the

00:12:34,250 --> 00:12:40,490
main thing is divide and conquer I

00:12:37,180 --> 00:12:42,410
talked before about this this first

00:12:40,490 --> 00:12:43,520
question I've just realized that I

00:12:42,410 --> 00:12:45,050
haven't talked about the other questions

00:12:43,520 --> 00:12:48,680
at all I'll spread them out over the

00:12:45,050 --> 00:12:50,030
course the talk so he was I believe

00:12:48,680 --> 00:12:52,640
making a web service called that

00:12:50,030 --> 00:12:55,010
returned him some XML that he was also

00:12:52,640 --> 00:12:57,500
using the old XML document API which is

00:12:55,010 --> 00:13:00,500
just horrible anyone having to use that

00:12:57,500 --> 00:13:03,170
still instead of link to XML link to XML

00:13:00,500 --> 00:13:07,850
rocks it's it's awesome yeah either I'm

00:13:03,170 --> 00:13:10,250
sorry particularly he had to do stuff

00:13:07,850 --> 00:13:12,170
with namespaces that's really really

00:13:10,250 --> 00:13:16,460
painful with XML document I'm really

00:13:12,170 --> 00:13:19,550
straightforward with link to XML yet so

00:13:16,460 --> 00:13:22,880
he was making a web service call

00:13:19,550 --> 00:13:25,550
getting some XML back parsing the XML

00:13:22,880 --> 00:13:28,010
and creating some objects and then

00:13:25,550 --> 00:13:31,670
writing stuff to a CSV file okay so

00:13:28,010 --> 00:13:32,690
that's some very distinct stages the

00:13:31,670 --> 00:13:36,140
point of the divide-and-conquer

00:13:32,690 --> 00:13:38,290
technique is you've got a problem

00:13:36,140 --> 00:13:41,480
somewhere in that giant array of things

00:13:38,290 --> 00:13:43,730
work out which initially very

00:13:41,480 --> 00:13:45,860
coarse-grained is the problem something

00:13:43,730 --> 00:13:48,350
to do with the web service I can get rid

00:13:45,860 --> 00:13:50,540
of that by saying let's imagine that my

00:13:48,350 --> 00:13:53,240
web service returns this file that I've

00:13:50,540 --> 00:13:55,400
got on the hard disk and you can fairly

00:13:53,240 --> 00:13:56,630
easily mock that out it kind of helps if

00:13:55,400 --> 00:13:59,690
you've got a decent architecture as well

00:13:56,630 --> 00:14:01,760
but I can get rid of all the web service

00:13:59,690 --> 00:14:03,500
calls I look the problem still happens

00:14:01,760 --> 00:14:07,040
therefore it probably had nothing to do

00:14:03,500 --> 00:14:09,980
with the web service okay well is it to

00:14:07,040 --> 00:14:12,260
do with writing out a CSV file if I just

00:14:09,980 --> 00:14:15,500
look at the values in the debugger do I

00:14:12,260 --> 00:14:17,420
still see the problem yes okay so kill

00:14:15,500 --> 00:14:19,420
the bit that's writing out the CSV so

00:14:17,420 --> 00:14:21,980
I've got some XML that I'm parsing and

00:14:19,420 --> 00:14:23,890
then I'm creating the objects well

00:14:21,980 --> 00:14:28,160
what's the bit that's parsing the XML

00:14:23,890 --> 00:14:32,210
okay I have you extracted the node from

00:14:28,160 --> 00:14:33,380
the value and when I create the object

00:14:32,210 --> 00:14:35,720
it gets the wrong value

00:14:33,380 --> 00:14:39,530
okay so throw the rest of the XML away

00:14:35,720 --> 00:14:41,900
or two steps let's have some minimal bit

00:14:39,530 --> 00:14:43,190
of XML with just the one field or

00:14:41,900 --> 00:14:46,430
actually whatever you want to call it

00:14:43,190 --> 00:14:48,620
that is parsing incorrectly instead of a

00:14:46,430 --> 00:14:50,270
huge great document yep I can still see

00:14:48,620 --> 00:14:52,310
the problem with that minimal document

00:14:50,270 --> 00:14:55,370
what am I doing with that document I'm

00:14:52,310 --> 00:14:57,350
extracting one string value okay well

00:14:55,370 --> 00:14:59,690
let's throw away the document here's a

00:14:57,350 --> 00:15:00,230
string let's parse the string oh we've

00:14:59,690 --> 00:15:02,690
got a problem

00:15:00,230 --> 00:15:05,420
so that's the divide-and-conquer bit is

00:15:02,690 --> 00:15:06,020
just working out at a course level where

00:15:05,420 --> 00:15:10,940
the issue is

00:15:06,020 --> 00:15:13,340
and then honing down it really is as

00:15:10,940 --> 00:15:17,920
simple as you having the problem size

00:15:13,340 --> 00:15:21,080
each time picking your environment I

00:15:17,920 --> 00:15:25,340
reckoned that this person was writing a

00:15:21,080 --> 00:15:27,110
an asp.net application I love web

00:15:25,340 --> 00:15:29,780
applications I love mobile applications

00:15:27,110 --> 00:15:33,270
I'm not an application developer and

00:15:29,780 --> 00:15:36,420
maybe if you are those are the places

00:15:33,270 --> 00:15:37,500
you're most familiar with and you can

00:15:36,420 --> 00:15:40,080
start a debugger

00:15:37,500 --> 00:15:43,170
most easily in a web application or a

00:15:40,080 --> 00:15:47,880
mobile app I find it amazing that with

00:15:43,170 --> 00:15:50,490
xamarin I can have my laptop hooked up

00:15:47,880 --> 00:15:53,550
over the network to a Mac Mini that's

00:15:50,490 --> 00:15:55,890
talking to an iPad and I can hit f5 in

00:15:53,550 --> 00:15:58,320
visual studio stuff will happen

00:15:55,890 --> 00:16:02,430
magically and I can step through in an

00:15:58,320 --> 00:16:04,500
iPad that's really cool but unless my

00:16:02,430 --> 00:16:08,040
problem is something to do with xamarin

00:16:04,500 --> 00:16:10,320
and iOS I probably don't want to be

00:16:08,040 --> 00:16:14,790
doing that I want to be using either

00:16:10,320 --> 00:16:16,710
just a local unit test or a console

00:16:14,790 --> 00:16:20,460
application I'm a big big fan of console

00:16:16,710 --> 00:16:23,160
applications so you can really easily

00:16:20,460 --> 00:16:26,480
whip up a console app you know I

00:16:23,160 --> 00:16:30,750
described the sort of nine line

00:16:26,480 --> 00:16:33,270
reproduction earlier on and unit tests

00:16:30,750 --> 00:16:35,220
are awesome as well when you use unit

00:16:33,270 --> 00:16:38,280
tests and when you use others I'll talk

00:16:35,220 --> 00:16:42,810
about later on challenge challenging

00:16:38,280 --> 00:16:45,780
assumptions basically this is a matter

00:16:42,810 --> 00:16:49,770
of knowing that if something isn't

00:16:45,780 --> 00:16:53,130
working as you expect it to then you

00:16:49,770 --> 00:16:54,360
don't know where the problem is and that

00:16:53,130 --> 00:16:57,780
sounds sort of a truism

00:16:54,360 --> 00:17:00,440
but then you find well I know the

00:16:57,780 --> 00:17:03,120
problem isn't here

00:17:00,440 --> 00:17:04,470
people post this fortunately not

00:17:03,120 --> 00:17:06,930
terribly often saying I'm a hundred

00:17:04,470 --> 00:17:10,260
percent sure my code is correct but it

00:17:06,930 --> 00:17:14,910
doesn't work I'm pretty sure your code

00:17:10,260 --> 00:17:18,720
isn't correct now there are there are

00:17:14,910 --> 00:17:21,230
degrees of assumptions and there are

00:17:18,720 --> 00:17:24,270
assumptions that are useful to make

00:17:21,230 --> 00:17:26,880
knowingly say for the moment I will

00:17:24,270 --> 00:17:29,130
assume that my compiler works and that

00:17:26,880 --> 00:17:33,120
the dotnet based class libraries work

00:17:29,130 --> 00:17:34,920
and if they don't I will be able to test

00:17:33,120 --> 00:17:37,080
that later on but I will test one thing

00:17:34,920 --> 00:17:38,520
at a time and assume that that works and

00:17:37,080 --> 00:17:41,670
that the problem is somewhere in my own

00:17:38,520 --> 00:17:43,770
code because it usually is and I'm not

00:17:41,670 --> 00:17:45,590
saying that in a generic way so much the

00:17:43,770 --> 00:17:48,769
problem is usually in my code

00:17:45,590 --> 00:17:53,029
and yes it will be in yours but I'm

00:17:48,769 --> 00:17:55,340
certainly not mean and I'll show some

00:17:53,029 --> 00:17:58,610
interesting assumptions later on that

00:17:55,340 --> 00:18:03,799
you might be surprised about keeping a

00:17:58,610 --> 00:18:06,169
log this is relatively new to me not the

00:18:03,799 --> 00:18:10,730
idea isn't new but I have started doing

00:18:06,169 --> 00:18:14,029
it more partly as a way of spreading the

00:18:10,730 --> 00:18:16,009
word is when I've started investigating

00:18:14,029 --> 00:18:18,350
something interesting I now start

00:18:16,009 --> 00:18:21,440
writing a blog post and I literally say

00:18:18,350 --> 00:18:24,049
right step zero here's the context step

00:18:21,440 --> 00:18:24,860
one I will try to remove this part of it

00:18:24,049 --> 00:18:27,320
and you're showing the

00:18:24,860 --> 00:18:29,299
divide-and-conquer but the great thing

00:18:27,320 --> 00:18:32,629
is if you keep a log of what you've done

00:18:29,299 --> 00:18:34,240
and what the results were then you won't

00:18:32,629 --> 00:18:36,529
forget it

00:18:34,240 --> 00:18:39,009
your memories may be a lot better than

00:18:36,529 --> 00:18:43,909
mine my memory isn't what it used to be

00:18:39,009 --> 00:18:46,190
as far as I can remember but it's it's

00:18:43,909 --> 00:18:48,169
really easy to be utterly convinced that

00:18:46,190 --> 00:18:49,970
you tried something and it still didn't

00:18:48,169 --> 00:18:51,679
work or that you tried something and it

00:18:49,970 --> 00:18:55,730
did work so the problem can't be over

00:18:51,679 --> 00:18:58,879
there particularly if you've got that

00:18:55,730 --> 00:19:01,129
nagging I reckon the problem is in this

00:18:58,879 --> 00:19:03,169
and everything I've seen confirms my

00:19:01,129 --> 00:19:05,029
theory so far so I'll just make very

00:19:03,169 --> 00:19:07,159
scant notes about what I'm testing

00:19:05,029 --> 00:19:09,649
because I kind of know where I think I'm

00:19:07,159 --> 00:19:13,179
heading and then later on you find ok it

00:19:09,649 --> 00:19:15,740
definitely isn't where I thought it was

00:19:13,179 --> 00:19:17,960
do you have to start again from scratch

00:19:15,740 --> 00:19:20,299
and say everything I've recorded is now

00:19:17,960 --> 00:19:22,340
worthless or can you go back and say

00:19:20,299 --> 00:19:26,200
well there are these two other

00:19:22,340 --> 00:19:28,399
possibilities which of them is also

00:19:26,200 --> 00:19:30,369
corroborated by all the tests I've

00:19:28,399 --> 00:19:33,619
already done

00:19:30,369 --> 00:19:37,460
now I mentioned console apps and unit

00:19:33,619 --> 00:19:40,159
tests if one of your ways of diagnosing

00:19:37,460 --> 00:19:42,409
things is to use unit tests then you can

00:19:40,159 --> 00:19:43,100
keep those along as a kind of a log of

00:19:42,409 --> 00:19:46,580
what you've done

00:19:43,100 --> 00:19:47,779
if you want to keep them passing or keep

00:19:46,580 --> 00:19:49,940
all but the one you're working on

00:19:47,779 --> 00:19:52,549
passing then feel free to keep just

00:19:49,940 --> 00:19:54,500
changing what the expected value is

00:19:52,549 --> 00:19:56,509
until it matches reality and that will

00:19:54,500 --> 00:19:59,360
at least show this is something that's

00:19:56,509 --> 00:20:02,179
true which is probably the

00:19:59,360 --> 00:20:04,700
anytime I've only just realized it

00:20:02,179 --> 00:20:07,850
saying about it but any of you use X

00:20:04,700 --> 00:20:10,460
unit versus and unit I'm personally a

00:20:07,850 --> 00:20:13,070
big n unit fan we use X unit at work and

00:20:10,460 --> 00:20:15,559
the whole fact vs. Theory thing leaves

00:20:13,070 --> 00:20:18,320
me cold but in this particular case if

00:20:15,559 --> 00:20:20,059
you are recording facts then that makes

00:20:18,320 --> 00:20:22,960
sense the rest of the time no it's a

00:20:20,059 --> 00:20:25,549
test for goodness sake so keep a

00:20:22,960 --> 00:20:30,950
detailed log of what you tried and what

00:20:25,549 --> 00:20:33,380
happened and try not to cheat it's

00:20:30,950 --> 00:20:35,120
really really hard not to cheat it's

00:20:33,380 --> 00:20:37,490
very rarely a straight line when you're

00:20:35,120 --> 00:20:40,400
diagnosing things you didn't go aha I

00:20:37,490 --> 00:20:41,299
will learn X I then learn why I then and

00:20:40,400 --> 00:20:43,340
then I'm done

00:20:41,299 --> 00:20:45,620
no you sort of learn a few things and

00:20:43,340 --> 00:20:47,240
then oh well I thought I'd learned that

00:20:45,620 --> 00:20:50,660
but actually it was something subtly

00:20:47,240 --> 00:20:53,210
different and things go go wrong and if

00:20:50,660 --> 00:20:55,220
you're talking to a new programmer

00:20:53,210 --> 00:20:59,360
because it's it's typically we've learnt

00:20:55,220 --> 00:21:01,160
this through five ten fifteen thirty

00:20:59,360 --> 00:21:03,770
whatever it is years of programming

00:21:01,160 --> 00:21:05,540
we've learnt the hard way and it would

00:21:03,770 --> 00:21:09,530
be really nice if not everyone had to go

00:21:05,540 --> 00:21:12,380
through quite that much hassle and in

00:21:09,530 --> 00:21:14,179
some ways the the struggle is part of

00:21:12,380 --> 00:21:16,429
the benefit and that's where you're

00:21:14,179 --> 00:21:18,470
taking some time when writing a stack

00:21:16,429 --> 00:21:20,450
overflow question is really important

00:21:18,470 --> 00:21:24,290
that that struggle is how you get the

00:21:20,450 --> 00:21:26,059
answer out but you don't need to make we

00:21:24,290 --> 00:21:28,429
don't need to make it look like it's

00:21:26,059 --> 00:21:29,750
always easy and that we always get the

00:21:28,429 --> 00:21:31,880
right answer because that just puts

00:21:29,750 --> 00:21:34,610
people off if they see where they are

00:21:31,880 --> 00:21:37,870
and they try something and you know the

00:21:34,610 --> 00:21:40,040
first three things they try fail if

00:21:37,870 --> 00:21:42,230
everything you've shown them always

00:21:40,040 --> 00:21:44,179
succeeds first time then they're gonna

00:21:42,230 --> 00:21:47,000
think it must be because I'm rubbish I

00:21:44,179 --> 00:21:48,650
will stop bothering and ask a bad

00:21:47,000 --> 00:21:52,150
question on Stack Overflow instead or

00:21:48,650 --> 00:21:57,559
leave the industry or whatever it is

00:21:52,150 --> 00:21:59,870
okay divide and conquer I've talked

00:21:57,559 --> 00:22:02,830
about making your environment I will go

00:21:59,870 --> 00:22:06,169
back to console apps versus unit tests

00:22:02,830 --> 00:22:09,140
because someone I was thrilled yesterday

00:22:06,169 --> 00:22:11,870
day before someone tweeted saying I

00:22:09,140 --> 00:22:13,010
follow John's advice and written a

00:22:11,870 --> 00:22:15,050
console app to try

00:22:13,010 --> 00:22:16,820
diagnose a problem and I got to the

00:22:15,050 --> 00:22:18,410
answer and didn't have to ask a question

00:22:16,820 --> 00:22:20,390
on Stack Overflow it's hey yeah and

00:22:18,410 --> 00:22:23,360
someone said sounds like you should have

00:22:20,390 --> 00:22:24,770
written a unit test instead okay thanks

00:22:23,360 --> 00:22:29,480
for the encouragement they're really

00:22:24,770 --> 00:22:33,410
positive community the unit tests are

00:22:29,480 --> 00:22:36,320
great I certainly wouldn't talk against

00:22:33,410 --> 00:22:38,930
unit tests at all but I find I

00:22:36,320 --> 00:22:41,180
personally use them for either code that

00:22:38,930 --> 00:22:42,890
I am writing at the time or have already

00:22:41,180 --> 00:22:45,500
written you know sometimes I will

00:22:42,890 --> 00:22:47,510
genuinely write test first code usually

00:22:45,500 --> 00:22:50,780
it's tests alongside oh I write the

00:22:47,510 --> 00:22:55,190
tests before I commit so it's yeah same

00:22:50,780 --> 00:22:57,470
kind of time I don't find for

00:22:55,190 --> 00:23:01,610
exploratory work which isn't for

00:22:57,470 --> 00:23:05,570
exploring how I can use an API that's

00:23:01,610 --> 00:23:08,510
great for TDD if I'm exploring something

00:23:05,570 --> 00:23:11,180
is wrong in this big ball of mud I don't

00:23:08,510 --> 00:23:15,380
always find that unit tests are as easy

00:23:11,180 --> 00:23:16,700
partly because I can't do it from the

00:23:15,380 --> 00:23:18,050
command line let me show you how I

00:23:16,700 --> 00:23:20,120
normally answer a stack overflow

00:23:18,050 --> 00:23:22,160
question this probably isn't great to

00:23:20,120 --> 00:23:26,870
see at the back but oh here we go so

00:23:22,160 --> 00:23:28,880
this was looking at you might learn some

00:23:26,870 --> 00:23:31,130
scene shop after all tonight um let me

00:23:28,880 --> 00:23:32,810
just put this in notepad instead so I

00:23:31,130 --> 00:23:37,930
don't use notepad normally but it's

00:23:32,810 --> 00:23:37,930
easier to get that in black on white and

00:23:38,080 --> 00:23:48,320
up the font a bit yeah it's the UM

00:23:43,300 --> 00:23:50,630
syntax highlighting is nice but but big

00:23:48,320 --> 00:23:52,430
letters good and I can't be bothered to

00:23:50,630 --> 00:23:55,810
start Visual Studio so normally I have

00:23:52,430 --> 00:23:58,460
Visual Studio for actual projects and

00:23:55,810 --> 00:24:00,740
throw away stuff for little

00:23:58,460 --> 00:24:02,210
investigations I've come up with

00:24:00,740 --> 00:24:03,860
something in between which I'll show you

00:24:02,210 --> 00:24:06,320
in a minute but I was trying to work out

00:24:03,860 --> 00:24:08,900
what this would do right so call a

00:24:06,320 --> 00:24:12,790
member name is part of c-sharp 5 so if

00:24:08,900 --> 00:24:18,770
we say we do let's let's change this to

00:24:12,790 --> 00:24:24,670
new base ok anyone now want to guess

00:24:18,770 --> 00:24:24,670
what this will print it will print main

00:24:24,790 --> 00:24:28,790
those of you near the back will have to

00:24:26,870 --> 00:24:30,800
trust those of you near the front in

00:24:28,790 --> 00:24:41,750
fact it'll print false let's print the

00:24:30,800 --> 00:24:43,820
actual name as well there we go it

00:24:41,750 --> 00:24:47,720
prints false and then main so call a

00:24:43,820 --> 00:24:49,700
member named as an attribute says it's

00:24:47,720 --> 00:24:52,310
only useful if you apply it to an

00:24:49,700 --> 00:24:54,230
optional parameter of type string and if

00:24:52,310 --> 00:24:57,430
the caller doesn't provide an argument

00:24:54,230 --> 00:25:00,470
then the compiler helpfully pops in the

00:24:57,430 --> 00:25:03,440
the name of the member calling it so

00:25:00,470 --> 00:25:07,010
that's fine here because we're calling

00:25:03,440 --> 00:25:11,680
it from main if we call new derived what

00:25:07,010 --> 00:25:11,680
is calling the base class constructor

00:25:11,770 --> 00:25:19,250
derived but but we haven't got any

00:25:14,360 --> 00:25:22,490
members in derived you've got a default

00:25:19,250 --> 00:25:29,510
constructor so what do we think the the

00:25:22,490 --> 00:25:32,080
output will be it's null when using CSC

00:25:29,510 --> 00:25:37,250
let's see if I've got mono installed I

00:25:32,080 --> 00:25:42,980
have who write if I know run tests it

00:25:37,250 --> 00:25:44,690
prints it all yeah so it's it is the

00:25:42,980 --> 00:25:47,300
derived class constructor that is

00:25:44,690 --> 00:25:50,390
calling the base class constructor but

00:25:47,300 --> 00:25:54,980
in fact the the c-sharp the microsoft

00:25:50,390 --> 00:25:57,860
c-sharp specification actually says it

00:25:54,980 --> 00:26:00,890
won't it won't pass it won't fill in the

00:25:57,860 --> 00:26:02,660
name for you the ECMO standard that will

00:26:00,890 --> 00:26:06,560
be coming out Oh

00:26:02,660 --> 00:26:09,830
fairly soon I think doesn't explicitly

00:26:06,560 --> 00:26:12,470
call out this I hope that the the

00:26:09,830 --> 00:26:14,270
c-sharp six specification might say that

00:26:12,470 --> 00:26:21,920
this is the right thing to do because it

00:26:14,270 --> 00:26:27,320
it feels really weird that adding public

00:26:21,920 --> 00:26:30,260
derived that should be a no op right but

00:26:27,320 --> 00:26:34,720
it's not if I now use Rosen again

00:26:30,260 --> 00:26:37,250
oh no oh okay

00:26:34,720 --> 00:26:41,800
that wasn't no up

00:26:37,250 --> 00:26:48,110
that feels like it should be a no op but

00:26:41,800 --> 00:26:49,250
it's not who so that was interesting C

00:26:48,110 --> 00:26:51,710
sharp fact that I happen to be

00:26:49,250 --> 00:26:54,320
investigating and wasn't it easy to do

00:26:51,710 --> 00:26:56,870
you can see all the code when I'm

00:26:54,320 --> 00:26:58,750
compiling and this is probably why I do

00:26:56,870 --> 00:27:01,550
things from a console app rather than a

00:26:58,750 --> 00:27:06,100
unit test I don't need to specify any

00:27:01,550 --> 00:27:10,670
other assemblies it's just CSC test CS

00:27:06,100 --> 00:27:13,910
what I do these days is I have an issues

00:27:10,670 --> 00:27:16,850
directory that is now segregated into

00:27:13,910 --> 00:27:19,820
many things and so if Google cloud net

00:27:16,850 --> 00:27:23,270
this is work stuff this is all on github

00:27:19,820 --> 00:27:24,980
so these are github issue numbers so I

00:27:23,270 --> 00:27:27,590
don't yeah I've got Visual Studio up

00:27:24,980 --> 00:27:29,330
that's got my main solution in and I

00:27:27,590 --> 00:27:31,550
don't want to start polluting that way

00:27:29,330 --> 00:27:34,010
the unit test code because it'll be a

00:27:31,550 --> 00:27:35,240
slight pain yeah I can get reset it

00:27:34,010 --> 00:27:39,410
afterwards but it'll be slightly

00:27:35,240 --> 00:27:45,100
annoying so what I tend to do is I would

00:27:39,410 --> 00:27:49,430
do something like their self Coast and

00:27:45,100 --> 00:27:51,650
donate new console and that creates a

00:27:49,430 --> 00:27:56,600
project file and that's half the problem

00:27:51,650 --> 00:27:58,790
with starting a new application in the

00:27:56,600 --> 00:28:00,050
new project in Visual Studio was just

00:27:58,790 --> 00:28:02,570
going through the new project wizard

00:28:00,050 --> 00:28:05,000
took far longer than typing dotnet new

00:28:02,570 --> 00:28:08,420
so here we are and now I've got you know

00:28:05,000 --> 00:28:11,870
I I'm now in a reasonable state and then

00:28:08,420 --> 00:28:14,900
it'll save her the solution when when I

00:28:11,870 --> 00:28:16,550
exit this way of saying well I just want

00:28:14,900 --> 00:28:20,110
to start something where I'm exploring

00:28:16,550 --> 00:28:24,160
and we're up we're running yeah we can

00:28:20,110 --> 00:28:27,050
debug that and it'll print hello world

00:28:24,160 --> 00:28:30,560
that's really useful without having gone

00:28:27,050 --> 00:28:33,290
anywhere else and I don't know why it is

00:28:30,560 --> 00:28:35,180
that when you run without debugging you

00:28:33,290 --> 00:28:37,460
get this press any key to continue or

00:28:35,180 --> 00:28:39,170
I'm pretty sure it's how it starts the

00:28:37,460 --> 00:28:40,910
process but it's it's kind of annoying

00:28:39,170 --> 00:28:46,370
that there's that difference between

00:28:40,910 --> 00:28:49,070
debug and not so if you prefer to use

00:28:46,370 --> 00:28:50,690
unit tests that's absolutely fine but I

00:28:49,070 --> 00:28:53,090
would request

00:28:50,690 --> 00:28:55,400
and request that you pass on this

00:28:53,090 --> 00:28:56,690
information unless the problem is

00:28:55,400 --> 00:28:58,900
something to do with a unit test

00:28:56,690 --> 00:29:02,140
framework which sometimes it will be

00:28:58,900 --> 00:29:04,580
I've got an example of that later on um

00:29:02,140 --> 00:29:07,820
if you're going to write something on

00:29:04,580 --> 00:29:10,610
Stack Overflow this is better than an X

00:29:07,820 --> 00:29:12,800
unit test why because not everyone's

00:29:10,610 --> 00:29:14,620
used X unit it's better than an unit

00:29:12,800 --> 00:29:16,910
test because not everyone uses n unit

00:29:14,620 --> 00:29:18,860
there's one other change I would make to

00:29:16,910 --> 00:29:20,510
this which is one of the nasty things

00:29:18,860 --> 00:29:25,820
about Stack Overflow is it's quite

00:29:20,510 --> 00:29:28,940
narrow namespaces are pointless in short

00:29:25,820 --> 00:29:31,910
but complete examples that is now ready

00:29:28,940 --> 00:29:35,270
to post on Stack Overflow you could make

00:29:31,910 --> 00:29:37,310
it shorter by putting braces on the line

00:29:35,270 --> 00:29:39,650
or whatever but no keep it so that it's

00:29:37,310 --> 00:29:41,270
idiomatic for someone reading the code

00:29:39,650 --> 00:29:43,520
they're not going to care that there

00:29:41,270 --> 00:29:46,700
isn't a namespace but they will care if

00:29:43,520 --> 00:29:49,640
you start calling things P and you're

00:29:46,700 --> 00:29:55,520
giving nonsensical variable names method

00:29:49,640 --> 00:29:59,030
names etc so at this point if I'm trying

00:29:55,520 --> 00:30:01,280
to investigate a problem then it's

00:29:59,030 --> 00:30:06,350
really easy to hit the debugger and I'm

00:30:01,280 --> 00:30:07,850
away I don't use despite the name

00:30:06,350 --> 00:30:09,380
diagnostic tools I hardly use this

00:30:07,850 --> 00:30:14,630
window at all I just haven't been

00:30:09,380 --> 00:30:18,560
bothered so I've made it my hotspot is

00:30:14,630 --> 00:30:22,220
now up I will just briefly if if there

00:30:18,560 --> 00:30:24,050
are any questions that happen to work

00:30:22,220 --> 00:30:31,960
with this then let's go for it

00:30:24,050 --> 00:30:31,960
as a live demo ddddd malformed data's

00:30:31,990 --> 00:30:39,020
nothing is screaming this is going to be

00:30:35,630 --> 00:30:45,230
a really good thing to demo what I might

00:30:39,020 --> 00:30:47,780
do is have another look see that that's

00:30:45,230 --> 00:30:49,070
probably not a good diagnostic one there

00:30:47,780 --> 00:30:51,560
could be interesting stuff but it's not

00:30:49,070 --> 00:30:57,800
a diagnostic one what I will do during

00:30:51,560 --> 00:31:00,730
the break is see if I can find one it's

00:30:57,800 --> 00:31:04,400
just pretty buff net is not my Protoss

00:31:00,730 --> 00:31:07,460
compiled a bit I like this

00:31:04,400 --> 00:31:09,290
already it's got a fairly complete

00:31:07,460 --> 00:31:16,480
missing using directives but that's not

00:31:09,290 --> 00:31:16,480
too bad and it's got some useful detail

00:31:17,080 --> 00:31:24,320
bah-bah-bah yeah I will probably upload

00:31:21,350 --> 00:31:26,630
that later on so it won't be a good

00:31:24,320 --> 00:31:28,580
example of what extra diagnostics to

00:31:26,630 --> 00:31:30,980
give because it's already kind of in US

00:31:28,580 --> 00:31:32,600
in a shape where I feel that I would be

00:31:30,980 --> 00:31:34,760
able to look at that even though I

00:31:32,600 --> 00:31:36,679
haven't used protobuf net for a long

00:31:34,760 --> 00:31:38,809
time at least I would be happy to look

00:31:36,679 --> 00:31:40,250
at that because the questioner has given

00:31:38,809 --> 00:31:42,650
me enough information that I can

00:31:40,250 --> 00:31:44,960
probably reproduce the problem without

00:31:42,650 --> 00:31:47,030
any extra knowledge that's a really good

00:31:44,960 --> 00:31:48,920
thing not just for getting an answer but

00:31:47,030 --> 00:31:51,830
for anyone who later comes along and

00:31:48,920 --> 00:31:55,220
thinks well I may have the same problem

00:31:51,830 --> 00:31:57,230
or not and if you've got something that

00:31:55,220 --> 00:32:03,140
lays out the problem really clearly then

00:31:57,230 --> 00:32:06,340
you can tell right that was pick your

00:32:03,140 --> 00:32:06,340
environment and various other things

00:32:09,040 --> 00:32:14,600
challenging assumptions I mentioned

00:32:12,170 --> 00:32:18,890
earlier on some assumptions that you

00:32:14,600 --> 00:32:20,690
might have so as before assume that your

00:32:18,890 --> 00:32:25,550
code is the one that is the the code

00:32:20,690 --> 00:32:28,160
that's broken next if you can't find

00:32:25,550 --> 00:32:31,160
anything wrong in your code it may well

00:32:28,160 --> 00:32:34,720
be something in that third-party library

00:32:31,160 --> 00:32:37,429
that someone emailed you the DLL that

00:32:34,720 --> 00:32:41,120
feels more likely than that you found a

00:32:37,429 --> 00:32:43,790
bug in JSON net which in turn feels more

00:32:41,120 --> 00:32:47,030
likely than you found a bug in asp.net

00:32:43,790 --> 00:32:50,540
core or maybe it doesn't I don't know on

00:32:47,030 --> 00:32:53,720
those those both feel more likely than

00:32:50,540 --> 00:32:56,150
you found a bug in string which people

00:32:53,720 --> 00:33:00,160
will say string dot index on is clearly

00:32:56,150 --> 00:33:04,730
brokered because this bad code no and

00:33:00,160 --> 00:33:07,280
the compiler now I love finding bugs in

00:33:04,730 --> 00:33:10,179
the compiler very few things make me

00:33:07,280 --> 00:33:12,200
happy that sounds really really sad

00:33:10,179 --> 00:33:13,400
there are many things that make me

00:33:12,200 --> 00:33:15,470
happier than finding bugs in the

00:33:13,400 --> 00:33:17,380
compiler but it does make me kind of

00:33:15,470 --> 00:33:19,539
happy

00:33:17,380 --> 00:33:22,360
almost as happy as finding a bug in the

00:33:19,539 --> 00:33:24,460
spec which happens as well so bugs in

00:33:22,360 --> 00:33:27,399
the in the compiler do happen but

00:33:24,460 --> 00:33:29,710
they're pretty rare but it's not just in

00:33:27,399 --> 00:33:30,929
terms of your code that you or the code

00:33:29,710 --> 00:33:35,130
that's running that you should be

00:33:30,929 --> 00:33:37,779
thinking of things to be skeptical of I

00:33:35,130 --> 00:33:38,320
don't know how long how much of your

00:33:37,779 --> 00:33:41,500
time

00:33:38,320 --> 00:33:43,870
you folks spend in the debugger I try

00:33:41,500 --> 00:33:47,529
not to spend very much time at all

00:33:43,870 --> 00:33:50,950
partly because the debugger lies to you

00:33:47,529 --> 00:33:55,139
it lies in really obvious ways if I

00:33:50,950 --> 00:33:57,850
still got this yes okay let's give a

00:33:55,139 --> 00:33:59,529
simple example I could find a hundred

00:33:57,850 --> 00:34:07,830
questions on Stack Overflow that looked

00:33:59,529 --> 00:34:07,830
like this okay

00:34:11,320 --> 00:34:16,630
and I'm gonna say I don't want double

00:34:14,080 --> 00:34:28,090
backslashes in my text so I'm gonna do

00:34:16,630 --> 00:34:32,380
text a text dot replace and if you're

00:34:28,090 --> 00:34:36,490
really lucky someone will post this much

00:34:32,380 --> 00:34:38,740
code and only this much code and look

00:34:36,490 --> 00:34:42,730
we've just replaced all the double

00:34:38,740 --> 00:34:44,440
backslashes but if you can see nearer

00:34:42,730 --> 00:34:48,160
the back trust those near near at the

00:34:44,440 --> 00:34:50,620
front it's saying text is see colum

00:34:48,160 --> 00:34:53,020
double backslash users double backslash

00:34:50,620 --> 00:34:55,180
John well we only started with one and

00:34:53,020 --> 00:34:57,730
just in case there were two we've

00:34:55,180 --> 00:35:00,910
replaced two with one what can possibly

00:34:57,730 --> 00:35:06,390
be going wrong it's like the debugger is

00:35:00,910 --> 00:35:09,460
lying to you um the debugger helpfully

00:35:06,390 --> 00:35:10,780
escapes things for you and I can see how

00:35:09,460 --> 00:35:12,160
that could be useful if you've got a tab

00:35:10,780 --> 00:35:16,570
in there it's kind of nice to know

00:35:12,160 --> 00:35:20,290
that's a tab backslash is this is evil I

00:35:16,570 --> 00:35:22,630
keep meaning to have a word with Dustin

00:35:20,290 --> 00:35:26,110
Campbell and the like and say can we

00:35:22,630 --> 00:35:27,760
please do something about this every

00:35:26,110 --> 00:35:30,670
time there's a stack overflow question

00:35:27,760 --> 00:35:33,400
that is someone not not understanding

00:35:30,670 --> 00:35:35,020
that the debugger does something there

00:35:33,400 --> 00:35:38,110
should be a little counter going off in

00:35:35,020 --> 00:35:41,050
Microsoft for a little bit like the

00:35:38,110 --> 00:35:43,960
build is broken this has been a problem

00:35:41,050 --> 00:35:46,050
for years and years and years and these

00:35:43,960 --> 00:35:49,480
days enough people do know about it that

00:35:46,050 --> 00:35:52,630
when a question is asked like this I am

00:35:49,480 --> 00:35:53,800
often not the first person to say I bet

00:35:52,630 --> 00:35:54,280
you're looking at this in the debugger

00:35:53,800 --> 00:35:57,340
aren't you

00:35:54,280 --> 00:35:59,200
because they won't see if they got as

00:35:57,340 --> 00:36:01,500
far as console dot write line text if

00:35:59,200 --> 00:36:06,810
they were writing a console application

00:36:01,500 --> 00:36:06,810
then they could see an the output of

00:36:07,140 --> 00:36:12,670
thing with single back slashes but

00:36:10,210 --> 00:36:14,950
they're not they're saying the value of

00:36:12,670 --> 00:36:17,200
text is but not saying how they're

00:36:14,950 --> 00:36:20,290
seeing it so they don't know yet that

00:36:17,200 --> 00:36:22,000
the debugger is lying to them um the

00:36:20,290 --> 00:36:24,430
other thing that the debugger has is the

00:36:22,000 --> 00:36:24,820
immediate window now when I do use the

00:36:24,430 --> 00:36:28,180
debugger

00:36:24,820 --> 00:36:31,390
I basically use breakpoints the coalsack

00:36:28,180 --> 00:36:34,000
and the local and watch windows and

00:36:31,390 --> 00:36:36,040
that's all I never use the immediate

00:36:34,000 --> 00:36:38,320
window but I gather there are people who

00:36:36,040 --> 00:36:40,180
find it really useful and that's fine so

00:36:38,320 --> 00:36:44,260
long as you realize it lies to you or

00:36:40,180 --> 00:36:46,570
eight sometimes execute code in subtly

00:36:44,260 --> 00:36:48,580
different ways and the ways in which

00:36:46,570 --> 00:36:51,790
it's subtly different to code that you

00:36:48,580 --> 00:36:54,130
write in your main program they've

00:36:51,790 --> 00:36:56,710
changed over time subtly as well I think

00:36:54,130 --> 00:36:58,960
with Rozlyn it's actually closer now

00:36:56,710 --> 00:37:02,050
than it was because it's I think using

00:36:58,960 --> 00:37:03,880
the scripting engine so things like over

00:37:02,050 --> 00:37:06,160
low resolution should really be pretty

00:37:03,880 --> 00:37:08,560
close but I have seen it do very odd

00:37:06,160 --> 00:37:13,870
things with conversions and things like

00:37:08,560 --> 00:37:16,360
that so it's not a case of don't use the

00:37:13,870 --> 00:37:18,910
immediate window it's be aware that if

00:37:16,360 --> 00:37:20,560
you start seeing something funny it may

00:37:18,910 --> 00:37:22,810
not be that the actual value is funny

00:37:20,560 --> 00:37:25,120
but that the problem is in the immediate

00:37:22,810 --> 00:37:28,300
window so at that point put that code

00:37:25,120 --> 00:37:30,490
into your program and make sure you log

00:37:28,300 --> 00:37:35,050
it somewhere somewhere that you know

00:37:30,490 --> 00:37:38,350
what's going to happen strings are funny

00:37:35,050 --> 00:37:42,670
things as well I've I've mentioned the

00:37:38,350 --> 00:37:45,970
string that you see in the debugger what

00:37:42,670 --> 00:37:55,860
I should really do let's we'll notepad

00:37:45,970 --> 00:37:55,860
handle this demo code using c-sharp

00:38:02,760 --> 00:38:19,200
dr. Nunes yes right so let's pop this

00:38:14,080 --> 00:38:22,000
little beastie into Visual Studio so

00:38:19,200 --> 00:38:24,790
we're we're convinced we're not going to

00:38:22,000 --> 00:38:28,869
look in the debugger anymore we're just

00:38:24,790 --> 00:38:34,330
going to print out the value and this

00:38:28,869 --> 00:38:36,490
will be fine so oh we've got a question

00:38:34,330 --> 00:38:37,990
mark well that's interesting because

00:38:36,490 --> 00:38:41,710
they didn't seem to be a question mark

00:38:37,990 --> 00:38:43,270
in our original source code but at least

00:38:41,710 --> 00:38:45,250
it's one question mark if I'd done

00:38:43,270 --> 00:38:47,260
something else we might see nothing and

00:38:45,250 --> 00:38:49,260
get two question marks or maybe see one

00:38:47,260 --> 00:38:54,010
character and get two question marks out

00:38:49,260 --> 00:38:56,080
and if we print the length of text this

00:38:54,010 --> 00:38:58,450
is going to print that it's got a length

00:38:56,080 --> 00:39:01,480
of eight where as we can see seven

00:38:58,450 --> 00:39:03,640
things so one of the nice things about

00:39:01,480 --> 00:39:10,810
the windows console is that it's fairly

00:39:03,640 --> 00:39:17,230
rubbish at doing anything non ASCII nice

00:39:10,810 --> 00:39:23,490
in some cases what's less than line and

00:39:17,230 --> 00:39:25,210
infinite infinity positive infinity

00:39:23,490 --> 00:39:31,800
what's this going to print to the

00:39:25,210 --> 00:39:31,800
console eight

00:39:32,020 --> 00:39:38,150
there we go look 8 it hasn't got an

00:39:36,080 --> 00:39:39,770
infinity sign so Oh we'll just turn it

00:39:38,150 --> 00:39:45,050
on its side no one will know the

00:39:39,770 --> 00:39:49,640
difference I point this out

00:39:45,050 --> 00:39:52,430
not just because if you're trying to

00:39:49,640 --> 00:39:54,770
debug something and and you're getting

00:39:52,430 --> 00:39:57,700
an error that something's much much too

00:39:54,770 --> 00:40:01,880
big ok I'll print out the actual value 8

00:39:57,700 --> 00:40:08,240
hmm what the hell do I do now in fact I

00:40:01,880 --> 00:40:10,810
think if you options

00:40:08,240 --> 00:40:17,720
oh you can't change the code page there

00:40:10,810 --> 00:40:22,940
if you let's run this code from here

00:40:17,720 --> 00:40:32,710
this will print 8 again eventually if I

00:40:22,940 --> 00:40:34,970
do see HCP 6 500 1 whoa infinity sign

00:40:32,710 --> 00:40:38,869
very small but it is there I promise

00:40:34,970 --> 00:40:43,160
that 6 500 1 that's the windows code

00:40:38,869 --> 00:40:44,750
page for utf-8 worth remembering so if

00:40:43,160 --> 00:40:47,359
you're seeing weird stuff in a console

00:40:44,750 --> 00:40:52,400
then get to a stage where you can do C

00:40:47,359 --> 00:40:55,010
HC P 6500 1 and you'll be away but I

00:40:52,400 --> 00:40:57,320
want to give you a better tool for this

00:40:55,010 --> 00:40:58,790
so this is something to actually

00:40:57,320 --> 00:41:03,890
remember that I don't think I've put in

00:40:58,790 --> 00:41:07,220
the slides but it's easy to remember if

00:41:03,890 --> 00:41:09,710
you go to tinyurl.com slash unicode -

00:41:07,220 --> 00:41:11,630
explorer you come bit that come to the

00:41:09,710 --> 00:41:13,210
only bit of JavaScript that's on the web

00:41:11,630 --> 00:41:16,070
that I have written

00:41:13,210 --> 00:41:20,060
I'm not good at JavaScript I'm not proud

00:41:16,070 --> 00:41:21,560
but this it's just it's in at the end of

00:41:20,060 --> 00:41:24,260
a page that's all about Unicode and

00:41:21,560 --> 00:41:26,330
c-sharp and stuff but actually this is

00:41:24,260 --> 00:41:29,000
the most useful bit of the page if you

00:41:26,330 --> 00:41:34,310
paste some text in there it shows you

00:41:29,000 --> 00:41:37,250
every character and the unicode value of

00:41:34,310 --> 00:41:40,760
it and it's utf-16 representation and

00:41:37,250 --> 00:41:42,859
it's utf-8 representation the these two

00:41:40,760 --> 00:41:44,810
will differ for things that aren't in

00:41:42,859 --> 00:41:50,240
the basic multilingual plane

00:41:44,810 --> 00:41:52,870
someone shout tails an emoji I knew I I

00:41:50,240 --> 00:41:55,720
I was having a little bet with myself

00:41:52,870 --> 00:42:00,410
eunuch a pile of poo

00:41:55,720 --> 00:42:02,390
it had to be so if you if you already

00:42:00,410 --> 00:42:07,970
know what the character is then file

00:42:02,390 --> 00:42:09,830
format loss info is great but if I has

00:42:07,970 --> 00:42:13,430
it got something that I can copy can I

00:42:09,830 --> 00:42:16,280
copy that yes hopefully so if I copy the

00:42:13,430 --> 00:42:19,160
Unicode pilot to there we go so it's

00:42:16,280 --> 00:42:21,970
saying that the Unicode value is 1/f for

00:42:19,160 --> 00:42:24,500
a nine and the fact that it's got five

00:42:21,970 --> 00:42:26,240
characters here means that it's not in

00:42:24,500 --> 00:42:28,970
the basic multilingual plane that's

00:42:26,240 --> 00:42:30,700
represented as a surrogate pair no

00:42:28,970 --> 00:42:32,450
surrogate followed by hi surrogate and

00:42:30,700 --> 00:42:35,270
in utf-8

00:42:32,450 --> 00:42:37,040
it's those four bytes the number of

00:42:35,270 --> 00:42:39,260
times I have found this page useful when

00:42:37,040 --> 00:42:42,620
I hadn't expected it to this was mostly

00:42:39,260 --> 00:42:44,600
for my own benefit but I've seen Stack

00:42:42,620 --> 00:42:47,030
Overflow posts where someone said this

00:42:44,600 --> 00:42:48,890
code doesn't compile it's saying there's

00:42:47,030 --> 00:42:52,090
an error in the middle of that method

00:42:48,890 --> 00:42:55,700
call that method name and you put it in

00:42:52,090 --> 00:42:58,190
you copy it put it in here and it turns

00:42:55,700 --> 00:42:59,810
out there's some non-breaking zero width

00:42:58,190 --> 00:43:04,220
non-breaking space or something that's

00:42:59,810 --> 00:43:09,410
particularly evil I will show you what

00:43:04,220 --> 00:43:11,060
the character is that's in here just to

00:43:09,410 --> 00:43:13,100
give a bit of trivia it's really nice

00:43:11,060 --> 00:43:14,540
having more time so when I've previously

00:43:13,100 --> 00:43:16,340
presented these slides it's been a

00:43:14,540 --> 00:43:18,020
one-hour slot and I haven't been able to

00:43:16,340 --> 00:43:20,660
go over so having sort of an hour and a

00:43:18,020 --> 00:43:26,840
half fish is great so this character

00:43:20,660 --> 00:43:29,060
here único 1-800 every saw from the

00:43:26,840 --> 00:43:32,540
Unicode consortium runs an adopter

00:43:29,060 --> 00:43:34,550
character funding campaign I have tried

00:43:32,540 --> 00:43:39,230
several times to adopt the Mongolian

00:43:34,550 --> 00:43:42,650
Bell separator and failed it's my

00:43:39,230 --> 00:43:44,060
favorite character because of it sort of

00:43:42,650 --> 00:43:47,330
done the hokey cokey in unicode

00:43:44,060 --> 00:43:50,840
characters categories so in c-sharp

00:43:47,330 --> 00:43:55,040
there's identify a sort of normalization

00:43:50,840 --> 00:43:58,070
so there is Unicode kateri called

00:43:55,040 --> 00:43:58,580
formatting characters where you can have

00:43:58,070 --> 00:44:00,050
as many

00:43:58,580 --> 00:44:03,140
all matching characters within an

00:44:00,050 --> 00:44:05,240
identifier as you like and then it will

00:44:03,140 --> 00:44:07,300
still be the same identifier as one that

00:44:05,240 --> 00:44:09,290
doesn't have those formatting characters

00:44:07,300 --> 00:44:13,060
all good so far

00:44:09,290 --> 00:44:15,860
so I will tell you that at the moment

00:44:13,060 --> 00:44:19,610
the Mongolian Val separator is a

00:44:15,860 --> 00:44:23,630
formatting character so this identifier

00:44:19,610 --> 00:44:26,150
and this identifier are the same in an

00:44:23,630 --> 00:44:28,760
earlier version of Unicode it was a

00:44:26,150 --> 00:44:30,920
whitespace character at which point it

00:44:28,760 --> 00:44:33,100
would be string X and it would be

00:44:30,920 --> 00:44:35,300
introducing a new variable called X and

00:44:33,100 --> 00:44:35,660
not changing the value of the field at

00:44:35,300 --> 00:44:39,050
all

00:44:35,660 --> 00:44:41,570
in an earlier still version of Unicode

00:44:39,050 --> 00:44:43,370
it was a formatting character it's done

00:44:41,570 --> 00:44:46,610
the hokey-cokey of unicode character

00:44:43,370 --> 00:44:50,060
categories now not only that that's sort

00:44:46,610 --> 00:44:52,600
of bad enough to start with but what

00:44:50,060 --> 00:44:57,530
version of Unicode does c-sharp use

00:44:52,600 --> 00:45:00,560
anyone happen to know so the Microsoft

00:44:57,530 --> 00:45:03,980
specification says it uses Unicode too

00:45:00,560 --> 00:45:09,170
and that's the version that used to ship

00:45:03,980 --> 00:45:13,370
with the old native CSC compiler let me

00:45:09,170 --> 00:45:13,880
just check oh no sorry three not two

00:45:13,370 --> 00:45:15,530
three

00:45:13,880 --> 00:45:18,710
so it was there as a formatting

00:45:15,530 --> 00:45:24,770
character the ECMO standard said no it's

00:45:18,710 --> 00:45:27,950
fall so you could have this this program

00:45:24,770 --> 00:45:31,250
is valid c-sharp under both the

00:45:27,950 --> 00:45:33,380
Microsoft specification and the old ECMO

00:45:31,250 --> 00:45:38,990
standard and it would mean different

00:45:33,380 --> 00:45:40,960
things in the new ACMA standard that

00:45:38,990 --> 00:45:45,980
I've been helping to standardize and

00:45:40,960 --> 00:45:49,070
what Roslyn does it's some version will

00:45:45,980 --> 00:45:50,870
just it off no because the reality is

00:45:49,070 --> 00:45:53,600
that Roslin uses whatever dotnet

00:45:50,870 --> 00:45:56,630
provides it with you Rozlyn is running

00:45:53,600 --> 00:45:58,940
on net which has a version of Unicode so

00:45:56,630 --> 00:46:01,730
it will call char get Unicode category

00:45:58,940 --> 00:46:03,860
or whatever it is so it's whatever and

00:46:01,730 --> 00:46:07,010
we've made sure that the standard says

00:46:03,860 --> 00:46:10,190
it will be some version of Unicode but

00:46:07,010 --> 00:46:11,890
it's it's just so joyous that it changes

00:46:10,190 --> 00:46:13,869
and the specific

00:46:11,890 --> 00:46:18,220
and sender don't match up so you get

00:46:13,869 --> 00:46:22,380
this weird effect okay enough of that

00:46:18,220 --> 00:46:22,380
silliness let's get to some more Salinas

00:46:22,589 --> 00:46:28,930
but I must remember to do that in okayed

00:46:25,089 --> 00:46:30,670
that fix that file I didn't have a

00:46:28,930 --> 00:46:33,940
chance to look over Stack Overflow over

00:46:30,670 --> 00:46:36,369
the break so we won't be trying to find

00:46:33,940 --> 00:46:39,490
something else do another question to

00:46:36,369 --> 00:46:44,769
answer however where are we strings

00:46:39,490 --> 00:46:46,990
floating point um so I've shown how

00:46:44,769 --> 00:46:49,450
strings can be wrong it should be of no

00:46:46,990 --> 00:46:51,339
surprise to anyone that floating point

00:46:49,450 --> 00:46:55,900
is a bit more complex than you might

00:46:51,339 --> 00:46:58,930
expect I blame the c-sharp language for

00:46:55,900 --> 00:47:03,190
defaulting to double I reckon if when I

00:46:58,930 --> 00:47:04,900
typed 0.1 that was decimal people would

00:47:03,190 --> 00:47:06,819
use decimal a lot more than they use

00:47:04,900 --> 00:47:08,500
double and they would be confused a lot

00:47:06,819 --> 00:47:11,349
less of the time because double is

00:47:08,500 --> 00:47:16,329
almost never the right thing to use in

00:47:11,349 --> 00:47:19,779
business applications at least but the

00:47:16,329 --> 00:47:21,759
console output shows you a value I can't

00:47:19,779 --> 00:47:25,769
even remember in Java it's really

00:47:21,759 --> 00:47:29,680
precisely said that double dot to string

00:47:25,769 --> 00:47:35,170
shows you the shortest representation

00:47:29,680 --> 00:47:37,450
that is unique so if you've got fourteen

00:47:35,170 --> 00:47:40,150
point one it can show you fourteen point

00:47:37,450 --> 00:47:43,990
one because there is no double value

00:47:40,150 --> 00:47:45,819
that is no two double values that are

00:47:43,990 --> 00:47:48,039
distinct we'll both show fourteen point

00:47:45,819 --> 00:47:51,549
one so it must be the closest one to

00:47:48,039 --> 00:47:54,490
exactly fourteen point one I have

00:47:51,549 --> 00:47:58,809
another bit of code that is on the same

00:47:54,490 --> 00:48:01,299
C sharp in-depth website that you may

00:47:58,809 --> 00:48:03,369
find useful I generally keep a copy of

00:48:01,299 --> 00:48:05,319
it lying around in my test directory

00:48:03,369 --> 00:48:07,869
called double converter which I should

00:48:05,319 --> 00:48:11,140
really make slight easy to use at some

00:48:07,869 --> 00:48:14,920
point but it's a piece of code I wrote

00:48:11,140 --> 00:48:17,380
many years ago that the only interesting

00:48:14,920 --> 00:48:21,789
bit is that it has two exact string that

00:48:17,380 --> 00:48:24,569
takes a double and if we write some code

00:48:21,789 --> 00:48:24,569
that's going to use it

00:48:25,770 --> 00:48:31,119
I'll put this in notepad in a minute

00:48:27,960 --> 00:48:32,680
double D he calls should we go with not

00:48:31,119 --> 00:48:44,140
0.1 should we see what not point one

00:48:32,680 --> 00:48:46,690
actually is double converter dot two

00:48:44,140 --> 00:48:48,190
exact string see this is where I should

00:48:46,690 --> 00:48:52,599
make it an extension method or something

00:48:48,190 --> 00:48:56,829
like that right so if we bring this up

00:48:52,599 --> 00:49:03,130
in a more readable font that's not too

00:48:56,829 --> 00:49:06,490
bad and then we do need to include it

00:49:03,130 --> 00:49:08,500
when we're building there we go right

00:49:06,490 --> 00:49:12,609
and so that will show you the exact

00:49:08,500 --> 00:49:13,930
value and it's worth being aware of and

00:49:12,609 --> 00:49:17,020
this is sort of just general

00:49:13,930 --> 00:49:19,500
floating-point knowledge that not every

00:49:17,020 --> 00:49:21,660
decimal value has an exact

00:49:19,500 --> 00:49:25,060
representation in binary floating-point

00:49:21,660 --> 00:49:27,940
but every binary floating-point value

00:49:25,060 --> 00:49:31,980
leaving outside Nan's and infinities

00:49:27,940 --> 00:49:37,780
I'll tell you another bug in net so

00:49:31,980 --> 00:49:39,910
every normal and D normal floating point

00:49:37,780 --> 00:49:41,829
number has a precise decimal

00:49:39,910 --> 00:49:43,690
representation so this double converter

00:49:41,829 --> 00:49:45,400
as long as you give it something that

00:49:43,690 --> 00:49:47,950
isn't nan or positive or negative

00:49:45,400 --> 00:49:52,300
infinity will always spit out a sequence

00:49:47,950 --> 00:49:55,750
of digits and a dot that is the precise

00:49:52,300 --> 00:49:58,960
value of that double there's no

00:49:55,750 --> 00:50:00,730
approximation so a double is not I get

00:49:58,960 --> 00:50:03,460
frustrated where people say our doubles

00:50:00,730 --> 00:50:05,470
an approximate type no it's not every

00:50:03,460 --> 00:50:07,390
double value is an exact number it's

00:50:05,470 --> 00:50:09,760
just that when you write double x equals

00:50:07,390 --> 00:50:12,240
not point one that conversion from the

00:50:09,760 --> 00:50:15,579
source code of not point one to that

00:50:12,240 --> 00:50:17,859
that's an approximation and when you do

00:50:15,579 --> 00:50:19,390
addition or something like that that

00:50:17,859 --> 00:50:21,670
will probably have to do some rounding

00:50:19,390 --> 00:50:23,770
but it's all well specified it's not

00:50:21,670 --> 00:50:25,300
kind of the idea of all their

00:50:23,770 --> 00:50:27,310
approximate types makes it sound like

00:50:25,300 --> 00:50:30,550
they could be just anything really no

00:50:27,310 --> 00:50:33,310
there there are exact values that when

00:50:30,550 --> 00:50:35,619
operations are performed you might lose

00:50:33,310 --> 00:50:38,229
some information just like no one would

00:50:35,619 --> 00:50:43,180
say integers are approximate

00:50:38,229 --> 00:50:45,819
but if I divide 7 by 3 then I don't get

00:50:43,180 --> 00:50:48,009
the exact value you we expect that they

00:50:45,819 --> 00:50:50,529
will be rounding going on and no one

00:50:48,009 --> 00:50:52,839
says that either 7 3 or 2 are just

00:50:50,529 --> 00:50:57,339
approximate values there are

00:50:52,839 --> 00:51:00,849
approximations to the actual value of 2

00:50:57,339 --> 00:51:06,160
and 1/3 but it's still the value 2 is a

00:51:00,849 --> 00:51:10,660
precise value trying to see how double

00:51:06,160 --> 00:51:12,640
is broken just actually broken I only

00:51:10,660 --> 00:51:32,140
found this out quite recently doing some

00:51:12,640 --> 00:51:33,690
pretty buff stuff so mmm ok let's hope

00:51:32,140 --> 00:51:41,339
that this works

00:51:33,690 --> 00:51:41,339
double 2 in 64 bits 1

00:51:48,600 --> 00:51:58,810
it convert a dot inches four bits to

00:51:52,830 --> 00:52:03,810
double D - sorry - plus one okay and

00:51:58,810 --> 00:52:05,980
hopefully these will both be nouns I

00:52:03,810 --> 00:52:07,900
keep talking about Nan's kind of

00:52:05,980 --> 00:52:10,240
assuming that you all know something

00:52:07,900 --> 00:52:11,680
about them is anyone going I have no

00:52:10,240 --> 00:52:16,260
idea I might as well be reading Twitter

00:52:11,680 --> 00:52:18,460
at the moment so nany is not a number so

00:52:16,260 --> 00:52:20,590
things like what's the square root of

00:52:18,460 --> 00:52:24,190
minus one well it's not a number because

00:52:20,590 --> 00:52:26,650
we don't have complex numbers let's just

00:52:24,190 --> 00:52:32,080
check that we're good so far yes they're

00:52:26,650 --> 00:52:39,700
both nuns so what's going to happen if I

00:52:32,080 --> 00:52:42,100
write D one is d 1 equals D 2 so we we

00:52:39,700 --> 00:52:45,160
reckon there's the the single person

00:52:42,100 --> 00:52:57,400
who's happy to do that said false what

00:52:45,160 --> 00:52:59,610
about that one false okay how about that

00:52:57,400 --> 00:52:59,610
one

00:53:00,850 --> 00:53:14,870
pulse how about this one trick okay and

00:53:09,970 --> 00:53:19,460
how about I'm not expecting exact values

00:53:14,870 --> 00:53:23,750
here I'll be quite dumbfounded if you

00:53:19,460 --> 00:53:24,860
can predict the exact value and if it

00:53:23,750 --> 00:53:31,220
happens again I'll know there was a

00:53:24,860 --> 00:53:39,220
plant from this time so okay let's let's

00:53:31,220 --> 00:53:43,510
see what happens let's um as as the

00:53:39,220 --> 00:53:48,110
actual results are this mouse is not

00:53:43,510 --> 00:53:49,730
obeying me properly right okay as that's

00:53:48,110 --> 00:53:51,170
bigger is that still readable even

00:53:49,730 --> 00:53:54,730
though it's white on black at the back

00:53:51,170 --> 00:53:57,650
yeah okay so we've got that there Nan's

00:53:54,730 --> 00:54:00,830
false and false yes the Equality

00:53:57,650 --> 00:54:04,280
operator on nan it's a bit like null in

00:54:00,830 --> 00:54:08,300
sequel it isn't even equal to itself

00:54:04,280 --> 00:54:11,900
however when you do equals well we said

00:54:08,300 --> 00:54:16,070
false and then true no one nan is equal

00:54:11,900 --> 00:54:19,700
to another so in in I Triple E 754 the

00:54:16,070 --> 00:54:22,400
floating point standard there are

00:54:19,700 --> 00:54:25,580
there's just one positive infinity and

00:54:22,400 --> 00:54:27,650
one negative infinity one positive zero

00:54:25,580 --> 00:54:30,410
and one negative zero but there are lots

00:54:27,650 --> 00:54:32,750
and lots of men's there are what are

00:54:30,410 --> 00:54:36,050
called signalling names and quiet men's

00:54:32,750 --> 00:54:39,100
the idea being that in certain

00:54:36,050 --> 00:54:41,480
circumstances a signalling nan might

00:54:39,100 --> 00:54:45,140
effectively throw an exception whereas a

00:54:41,480 --> 00:54:48,080
quiet man wouldn't but there are many

00:54:45,140 --> 00:54:51,110
many bit patterns that throw it and I

00:54:48,080 --> 00:54:54,320
was fortunate that this is just a way of

00:54:51,110 --> 00:54:56,030
saying well I'll take two bitwise

00:54:54,320 --> 00:54:57,950
representations that are only one bit

00:54:56,030 --> 00:55:00,560
apart if this hadn't worked I'd changed

00:54:57,950 --> 00:55:02,450
that to a minus one and then I suspect

00:55:00,560 --> 00:55:03,980
it would have done because it's it's

00:55:02,450 --> 00:55:07,930
something in the top set of bits that

00:55:03,980 --> 00:55:10,280
counts so they are equal to each other

00:55:07,930 --> 00:55:12,620
but look at this they've got different

00:55:10,280 --> 00:55:18,020
hash codes that's

00:55:12,620 --> 00:55:19,960
not allowed out of it huh no it's too

00:55:18,020 --> 00:55:24,620
much hassle to put this Internet core I

00:55:19,960 --> 00:55:29,210
think this was fixed in some version of

00:55:24,620 --> 00:55:33,530
the.net core CLR I think but yeah bit of

00:55:29,210 --> 00:55:35,150
a pain I won't show you the other weird

00:55:33,530 --> 00:55:38,840
thing that I found although it's a great

00:55:35,150 --> 00:55:42,830
example of Diagnostics yes I will I'll

00:55:38,840 --> 00:55:45,190
find it just the blog post so I've said

00:55:42,830 --> 00:55:48,130
I've been blogging about Diagnostics and

00:55:45,190 --> 00:55:52,280
I think the most recent one that I did

00:55:48,130 --> 00:55:56,720
was very very odd and a JIT compiler bug

00:55:52,280 --> 00:55:58,460
so yeah I did say assume that the

00:55:56,720 --> 00:56:00,410
compiler works in the runtime works in

00:55:58,460 --> 00:56:03,740
the base class library well just

00:56:00,410 --> 00:56:09,800
sometimes no it really doesn't and this

00:56:03,740 --> 00:56:12,280
was a weird situation so I'm sure I

00:56:09,800 --> 00:56:16,670
didn't actually introduce myself by John

00:56:12,280 --> 00:56:17,780
but I worked for Google and my job at

00:56:16,670 --> 00:56:20,390
the moment I used to have to come and

00:56:17,780 --> 00:56:22,130
say I'm not representing Google at

00:56:20,390 --> 00:56:25,100
Google I do Java whereas I'm doing a

00:56:22,130 --> 00:56:27,590
c-sharp now I now work in c-sharp all

00:56:25,100 --> 00:56:30,230
the time it's great making Google cloud

00:56:27,590 --> 00:56:32,480
platform rock for c-sharp developers so

00:56:30,230 --> 00:56:34,400
that's that's the sales pitch and I work

00:56:32,480 --> 00:56:35,810
particularly on the libraries so if

00:56:34,400 --> 00:56:38,510
you're trying to talk to any of our

00:56:35,810 --> 00:56:41,060
amazing services your vision and speech

00:56:38,510 --> 00:56:43,880
recognition and video intelligence and

00:56:41,060 --> 00:56:45,170
all kinds of things then come use my

00:56:43,880 --> 00:56:48,200
libraries it will give you a lovely

00:56:45,170 --> 00:56:50,990
experience which previously our API

00:56:48,200 --> 00:56:53,300
experience has been sometimes adequate

00:56:50,990 --> 00:56:55,190
but certainly not delightful I aim to

00:56:53,300 --> 00:56:59,660
make it delightful so I've been working

00:56:55,190 --> 00:57:01,760
on campfire store and I had some unit

00:56:59,660 --> 00:57:04,820
tests that were only failing on Linux

00:57:01,760 --> 00:57:07,550
and these were really quite naughty

00:57:04,820 --> 00:57:10,840
looking unit tests where I would create

00:57:07,550 --> 00:57:12,890
we've got a struct that's zero point

00:57:10,840 --> 00:57:17,000
which is just the latitude and longitude

00:57:12,890 --> 00:57:19,730
um and I was having units here saying

00:57:17,000 --> 00:57:21,170
well I expect that when I pass this from

00:57:19,730 --> 00:57:23,150
a protoplanet protocol buffer or

00:57:21,170 --> 00:57:25,840
whatever that it will be equal to this

00:57:23,150 --> 00:57:25,840
and

00:57:26,010 --> 00:57:32,100
it's simple code it really should work

00:57:28,380 --> 00:57:38,420
it works on windows doclet portable it's

00:57:32,100 --> 00:57:38,420
all it's all fine it failed on Linux so

00:57:38,540 --> 00:57:48,180
sorry it also failed on it worked on my

00:57:43,170 --> 00:57:52,470
local machine including my did it work

00:57:48,180 --> 00:57:57,240
on one of my Linux boxes I think but it

00:57:52,470 --> 00:57:59,700
was failing on on Travis and these days

00:57:57,240 --> 00:58:01,230
now one of the one of the things that

00:57:59,700 --> 00:58:03,600
was pointed out to me and this is where

00:58:01,230 --> 00:58:07,140
I appreciate this kind of thing so I

00:58:03,600 --> 00:58:10,050
have a separate Linux box and I have two

00:58:07,140 --> 00:58:12,510
little Intel nukes called bag puss and

00:58:10,050 --> 00:58:15,150
Gabriel for those of you who Android

00:58:12,510 --> 00:58:18,840
bypass back in the day the idea was that

00:58:15,150 --> 00:58:21,030
bag puss would be running I can't even

00:58:18,840 --> 00:58:22,530
remember which CI system it was and all

00:58:21,030 --> 00:58:23,910
the others would be agents and when bag

00:58:22,530 --> 00:58:26,670
puss would go to sleep all of his

00:58:23,910 --> 00:58:28,710
friends would go to sleep but it was

00:58:26,670 --> 00:58:31,170
just yeah a nice naming convention and

00:58:28,710 --> 00:58:33,540
they run my notice home benchmarks

00:58:31,170 --> 00:58:37,200
because I don't trust cloud machines to

00:58:33,540 --> 00:58:39,000
always be of exactly the same if you're

00:58:37,200 --> 00:58:40,200
running micro benchmarks you really want

00:58:39,000 --> 00:58:42,869
to make sure you've got the exact same

00:58:40,200 --> 00:58:45,270
environment ideally the same chip well

00:58:42,869 --> 00:58:48,810
when I've got two of these that have the

00:58:45,270 --> 00:58:50,010
same at least the same model and I can

00:58:48,810 --> 00:58:51,600
make sure that nothing else is running

00:58:50,010 --> 00:58:53,430
on them at 2:00 in the morning and 3:00

00:58:51,600 --> 00:58:55,920
in the morning I'm as close to being

00:58:53,430 --> 00:58:58,440
ideal circumstances for a benchmark as I

00:58:55,920 --> 00:58:59,970
can get so that's why I've got them but

00:58:58,440 --> 00:59:02,300
it's also handy during the day to be

00:58:59,970 --> 00:59:04,950
able to occasionally run bits of code

00:59:02,300 --> 00:59:08,100
someone else said but hang on you've got

00:59:04,950 --> 00:59:10,350
a Linux box already is that one hey

00:59:08,100 --> 00:59:13,020
that's my Windows box yeah but you can

00:59:10,350 --> 00:59:16,470
run Linux on it that the not your

00:59:13,020 --> 00:59:18,780
booting or anything the Linux subsystem

00:59:16,470 --> 00:59:22,020
for Windows managed to reproduce this

00:59:18,780 --> 00:59:25,230
and I wish I found that out which I

00:59:22,020 --> 00:59:28,800
thought to try it before I'd started it

00:59:25,230 --> 00:59:30,600
all because it is the it's the Linux JIT

00:59:28,800 --> 00:59:33,060
compiler for dotnet so when I'm running

00:59:30,600 --> 00:59:35,730
bash on here

00:59:33,060 --> 00:59:38,850
it really is running the dotnet core

00:59:35,730 --> 00:59:42,090
build for Linux with the Linux JIT

00:59:38,850 --> 00:59:45,680
and so it shows the problem so yeah that

00:59:42,090 --> 00:59:45,680
would have made things much much simpler

00:59:46,640 --> 01:00:00,540
so I first kept firestore but made it

00:59:56,970 --> 01:00:02,850
into a console app so I kept my this was

01:00:00,540 --> 01:00:05,400
my production code but let's get rid of

01:00:02,850 --> 01:00:10,350
X units because I know that X unit is

01:00:05,400 --> 01:00:14,660
going to be doing interesting things so

01:00:10,350 --> 01:00:14,660
I will introduce my own assert here

01:00:15,500 --> 01:00:21,320
which doesn't have very much yeah

01:00:18,090 --> 01:00:23,940
doesn't fail or anything this is the

01:00:21,320 --> 01:00:26,270
nuttiest unit test framework that you've

01:00:23,940 --> 01:00:30,900
ever seen but that's all it needs to be

01:00:26,270 --> 01:00:34,890
so I'm creating two Gio points that are

01:00:30,900 --> 01:00:37,320
the same 1.25 and 2.5 as the last

01:00:34,890 --> 01:00:39,680
student longitude and then what I'm

01:00:37,320 --> 01:00:44,940
checking is that when I call the

01:00:39,680 --> 01:00:48,380
equality operators via reflection that

01:00:44,940 --> 01:00:48,380
they should give the right results and

01:00:50,330 --> 01:00:59,820
did you do I get no it's not and so

01:00:57,690 --> 01:01:04,470
we're already in a situation of I've

01:00:59,820 --> 01:01:07,740
gone from a solution with many thousands

01:01:04,470 --> 01:01:11,820
of lines to 33 lines of code

01:01:07,740 --> 01:01:14,130
I'd gone from including references to I

01:01:11,820 --> 01:01:16,440
suppose at this point I've still got

01:01:14,130 --> 01:01:19,260
references to G RPC and all kinds of

01:01:16,440 --> 01:01:21,420
services I'm not calling any of them but

01:01:19,260 --> 01:01:24,090
for my peace of mind the fact that I'm

01:01:21,420 --> 01:01:27,000
working in a smaller codebase is useful

01:01:24,090 --> 01:01:29,010
so that's where I have a bias against

01:01:27,000 --> 01:01:32,070
unit tests for this exploratory work

01:01:29,010 --> 01:01:34,950
just because you're you know if I've got

01:01:32,070 --> 01:01:37,230
20 different files that are tabs in

01:01:34,950 --> 01:01:39,150
visual studio and I know I'm working in

01:01:37,230 --> 01:01:41,220
thousands of lines of code even if I

01:01:39,150 --> 01:01:42,780
know that half of them aren't being used

01:01:41,220 --> 01:01:44,580
it makes me nervous

01:01:42,780 --> 01:01:47,040
whereas by the time I'm in a console

01:01:44,580 --> 01:01:48,810
application where either I've started

01:01:47,040 --> 01:01:50,970
off by copying a load of code and then

01:01:48,810 --> 01:01:55,590
deleting half of it or I

01:01:50,970 --> 01:01:57,720
fer to build up from scratch then I can

01:01:55,590 --> 01:01:59,580
take more notice of I know exactly

01:01:57,720 --> 01:02:01,920
what's running and if I've written mein

01:01:59,580 --> 01:02:04,830
then I know there isn't any weird stuff

01:02:01,920 --> 01:02:06,570
going on behind the scenes with you know

01:02:04,830 --> 01:02:09,210
xunit having to cope with asynchronous

01:02:06,570 --> 01:02:11,430
tests and maybe having some extra tasks

01:02:09,210 --> 01:02:13,260
in the background and going via a visual

01:02:11,430 --> 01:02:15,480
studio plug-in and then maybe back out

01:02:13,260 --> 01:02:17,390
again and all kinds of things but unit

01:02:15,480 --> 01:02:23,100
test frameworks do to be really helpful

01:02:17,390 --> 01:02:27,900
most of the time so having reproduced

01:02:23,100 --> 01:02:31,800
that I then wanted to remove firestore

01:02:27,900 --> 01:02:35,250
entirely and this is where I made a

01:02:31,800 --> 01:02:37,350
mistake and this is where I want to log

01:02:35,250 --> 01:02:41,370
that I'm making mistakes so I did too

01:02:37,350 --> 01:02:42,360
much what I should have done is copy

01:02:41,370 --> 01:02:44,820
geopoint

01:02:42,360 --> 01:02:47,280
which was a really simple structure it

01:02:44,820 --> 01:02:48,990
hardly did anything I could have copied

01:02:47,280 --> 01:02:51,360
that straight into my test project and

01:02:48,990 --> 01:02:54,210
then removed the dependency and all

01:02:51,360 --> 01:02:56,010
would stand reproduced it that was the

01:02:54,210 --> 01:03:00,150
right thing to do do one thing at a time

01:02:56,010 --> 01:03:02,490
and log it but no I'm too clever for

01:03:00,150 --> 01:03:06,230
that I will come up with a new structure

01:03:02,490 --> 01:03:11,280
of my own that has a single double value

01:03:06,230 --> 01:03:15,180
say one point five here and it doesn't

01:03:11,280 --> 01:03:19,440
do much else you know it's this code is

01:03:15,180 --> 01:03:21,960
really just comparing the the the values

01:03:19,440 --> 01:03:24,240
all of the test code is was it what it

01:03:21,960 --> 01:03:28,890
was before but no this doesn't reproduce

01:03:24,240 --> 01:03:31,830
it silly John so it prints true three

01:03:28,890 --> 01:03:34,740
times it's actually testing equality

01:03:31,830 --> 01:03:39,860
three different ways so once testing it

01:03:34,740 --> 01:03:45,870
not with reflection once testing it by

01:03:39,860 --> 01:03:48,540
invoking invoking the method directly

01:03:45,870 --> 01:03:51,210
with reflection via method info and the

01:03:48,540 --> 01:03:55,290
third time sorry that's the third time

01:03:51,210 --> 01:04:00,000
the second time it's having what am i

01:03:55,290 --> 01:04:02,460
doing oh yes both times it its invoking

01:04:00,000 --> 01:04:05,070
the method but once via a delegate so

01:04:02,460 --> 01:04:06,120
I'm clearly at some point had the full

01:04:05,070 --> 01:04:12,330
that this was something to do with

01:04:06,120 --> 01:04:17,520
delegates okay so no no luck there let's

01:04:12,330 --> 01:04:19,500
go back to two doubles and this now

01:04:17,520 --> 01:04:21,240
reproduces it so this is really similar

01:04:19,500 --> 01:04:24,000
code to the previous one so we've got

01:04:21,240 --> 01:04:25,800
two doubles here instead of one so at

01:04:24,000 --> 01:04:31,290
this point I'm on very much scratching

01:04:25,800 --> 01:04:33,960
head grounds I'm thinking this is gonna

01:04:31,290 --> 01:04:35,550
make great bug report at some point and

01:04:33,960 --> 01:04:37,410
I'm pretty sure at this point that it's

01:04:35,550 --> 01:04:40,680
really really not my fire stall code

01:04:37,410 --> 01:04:43,920
that's wrong they're having assumed that

01:04:40,680 --> 01:04:48,000
it was my code to start with I've now

01:04:43,920 --> 01:04:50,460
proved pretty concisely if pretty firmly

01:04:48,000 --> 01:04:52,530
that it's not yeah if this doesn't work

01:04:50,460 --> 01:04:54,600
but the same thing with only a single

01:04:52,530 --> 01:05:01,620
double does work there's something very

01:04:54,600 --> 01:05:03,620
weird going on I tried it in a few

01:05:01,620 --> 01:05:08,400
different frameworks and environments

01:05:03,620 --> 01:05:11,670
and it was fixed in right so true means

01:05:08,400 --> 01:05:16,610
it's working true false false means it's

01:05:11,670 --> 01:05:19,740
failing so this was showing that it was

01:05:16,610 --> 01:05:22,020
failing for net core app 1.0 in both

01:05:19,740 --> 01:05:26,450
debug and release and working for net

01:05:22,020 --> 01:05:26,450
core app 1.1 in both debug and release

01:05:29,150 --> 01:05:33,570
and that's just a little bit of the

01:05:31,920 --> 01:05:35,940
exact details of what I got installed

01:05:33,570 --> 01:05:37,980
because by this point I realized I

01:05:35,940 --> 01:05:42,510
really need to be logging everything in

01:05:37,980 --> 01:05:46,110
quite a lot of detail so I then start

01:05:42,510 --> 01:05:52,800
putting some extra logging this is quite

01:05:46,110 --> 01:05:55,680
dangerous I'm slightly well I'm relieved

01:05:52,800 --> 01:05:57,120
that this did show the problem but there

01:05:55,680 --> 01:06:00,780
are times where it might not have done

01:05:57,120 --> 01:06:03,990
because by using console dot write line

01:06:00,780 --> 01:06:07,020
I could have blown up any chance of

01:06:03,990 --> 01:06:13,190
inlining I could have fixed things there

01:06:07,020 --> 01:06:16,080
are times where the JIT compiler can use

01:06:13,190 --> 01:06:18,450
larger represents 80 bit representations

01:06:16,080 --> 01:06:20,310
of floating-point numbers so

01:06:18,450 --> 01:06:21,869
long as you don't need the 64 bit

01:06:20,310 --> 01:06:25,170
representation for something like a

01:06:21,869 --> 01:06:27,000
field so there can be times where you

01:06:25,170 --> 01:06:28,410
can have the exact same code but

01:06:27,000 --> 01:06:29,820
sometimes it's using a field and

01:06:28,410 --> 01:06:31,829
sometimes it's using a local variable

01:06:29,820 --> 01:06:34,950
and they will give different results

01:06:31,829 --> 01:06:37,589
because the field really really is only

01:06:34,950 --> 01:06:39,119
64 bits wide whereas the local variable

01:06:37,589 --> 01:06:40,800
that's probably in a register somewhere

01:06:39,119 --> 01:06:42,810
that can be the extended representation

01:06:40,800 --> 01:06:44,579
of 80 bits that's fine and it gives you

01:06:42,810 --> 01:06:46,050
different results when you do some

01:06:44,579 --> 01:06:49,140
something that would otherwise have to

01:06:46,050 --> 01:06:51,349
round so I was really relieved to see

01:06:49,140 --> 01:06:56,220
that this gave completely bizarre

01:06:51,349 --> 01:06:58,890
results so the when we call the

01:06:56,220 --> 01:07:00,660
comparison directly we see that the left

01:06:58,890 --> 01:07:03,270
and right hand side are both one point

01:07:00,660 --> 01:07:05,099
five two point five when we call it with

01:07:03,270 --> 01:07:10,650
reflection we hit one point five and

01:07:05,099 --> 01:07:15,390
there some random crap a very very small

01:07:10,650 --> 01:07:22,079
number so it's one with 316 zeros in

01:07:15,390 --> 01:07:23,970
front of it well at a point I seeing

01:07:22,079 --> 01:07:26,099
that I'm only halfway through the the

01:07:23,970 --> 01:07:28,800
blog post I will let you go and find

01:07:26,099 --> 01:07:31,140
that this is on code blog John skeet UK

01:07:28,800 --> 01:07:36,210
let me just check I think if you just do

01:07:31,140 --> 01:07:38,880
code blog John skeet yes okay you'll

01:07:36,210 --> 01:07:43,530
find it it's the second or third post

01:07:38,880 --> 01:07:48,420
that's up the point is this took me two

01:07:43,530 --> 01:07:50,640
or three hours investigating this many

01:07:48,420 --> 01:07:53,880
people would have asked a question on

01:07:50,640 --> 01:07:56,579
Stack Overflow without trying any of

01:07:53,880 --> 01:07:58,890
that and I was chatting to someone over

01:07:56,579 --> 01:08:02,490
the break about what the purpose of

01:07:58,890 --> 01:08:04,109
Stack Overflow is and I'd like to make

01:08:02,490 --> 01:08:06,420
sure that you all know what the purpose

01:08:04,109 --> 01:08:08,040
is so that if you talk to someone I'm

01:08:06,420 --> 01:08:11,040
really glad that no one had had bad

01:08:08,040 --> 01:08:13,020
experiences but if you talk to someone

01:08:11,040 --> 01:08:14,329
who's saying our stack overflows

01:08:13,020 --> 01:08:17,520
horrible it's run by

01:08:14,329 --> 01:08:20,700
control freaks who don't want to help

01:08:17,520 --> 01:08:23,969
anyone new it's just that we understand

01:08:20,700 --> 01:08:27,299
the design of the site is around the

01:08:23,969 --> 01:08:28,770
purpose which is not to help you not to

01:08:27,299 --> 01:08:32,159
help the person that's got a problem

01:08:28,770 --> 01:08:35,190
it's to build a repository of hike

01:08:32,159 --> 01:08:38,429
see questions and answers so if you ask

01:08:35,190 --> 01:08:41,190
a question really badly that I happen to

01:08:38,429 --> 01:08:45,409
know the answer to and I give you the

01:08:41,190 --> 01:08:50,339
answer you go away happy and you leave a

01:08:45,409 --> 01:08:54,179
stain on the site okay that does not

01:08:50,339 --> 01:08:56,730
help the site's goal and that's why it's

01:08:54,179 --> 01:08:58,199
certainly why I can end up looking very

01:08:56,730 --> 01:09:00,779
passive-aggressive and contrôlée

01:08:58,199 --> 01:09:03,299
when I say please improve your question

01:09:00,779 --> 01:09:03,929
I'm thinking I know what's wrong I knew

01:09:03,299 --> 01:09:06,330
what's wrong

01:09:03,929 --> 01:09:08,730
please improve your question and there

01:09:06,330 --> 01:09:12,060
are two benefits from this one is

01:09:08,730 --> 01:09:14,730
hopefully it helps them do work that

01:09:12,060 --> 01:09:17,250
next time they will do before getting to

01:09:14,730 --> 01:09:19,679
the site at all they will become better

01:09:17,250 --> 01:09:22,170
developers by doing it and the other is

01:09:19,679 --> 01:09:25,350
by the time you've got a good question

01:09:22,170 --> 01:09:27,569
then okay you may have found the answer

01:09:25,350 --> 01:09:32,279
but it's much more helpful to someone

01:09:27,569 --> 01:09:34,620
else and that's why it's so important

01:09:32,279 --> 01:09:37,889
and it's not that we're all control

01:09:34,620 --> 01:09:40,080
freaks and that's a message that's quite

01:09:37,889 --> 01:09:42,870
hard to get over to people partly

01:09:40,080 --> 01:09:45,859
because there are some people who just

01:09:42,870 --> 01:09:48,120
get off on saying nasty things yeah we

01:09:45,859 --> 01:09:49,469
Stack Overflow is on the internet and

01:09:48,120 --> 01:09:52,589
strangely enough there are trolls on the

01:09:49,469 --> 01:09:55,260
internet who'd have thought so some

01:09:52,589 --> 01:09:57,690
people have had bad experiences that

01:09:55,260 --> 01:09:59,130
aren't their fault a lot of the time

01:09:57,690 --> 01:10:01,199
it's because they don't understand the

01:09:59,130 --> 01:10:04,190
site they've ticked through so when you

01:10:01,199 --> 01:10:07,050
first go to ask a question you have to

01:10:04,190 --> 01:10:08,550
go through a page that says this is what

01:10:07,050 --> 01:10:10,080
the sites for here's how you ask you a

01:10:08,550 --> 01:10:12,389
question look there are links on the

01:10:10,080 --> 01:10:14,730
right - how to ask a good question which

01:10:12,389 --> 01:10:16,650
I'll give you another link another tiny

01:10:14,730 --> 01:10:18,870
URL link stack

01:10:16,650 --> 01:10:25,650
- hints goes for another blog post of

01:10:18,870 --> 01:10:29,100
mine from 2010 long time ago but this is

01:10:25,650 --> 01:10:31,590
all still basically right or right in my

01:10:29,100 --> 01:10:34,170
mind about how to ask a good question

01:10:31,590 --> 01:10:37,860
and a lot of it goes into the kind of

01:10:34,170 --> 01:10:39,690
thing that we've been talking about so

01:10:37,860 --> 01:10:42,210
that's linked from Stack Overflow and

01:10:39,690 --> 01:10:43,800
you've got to tick a box saying hey I've

01:10:42,210 --> 01:10:45,270
read all this before I can ask a

01:10:43,800 --> 01:10:46,050
question and of course a lot of people

01:10:45,270 --> 01:10:47,550
do

01:10:46,050 --> 01:10:51,540
scroll down scroll down tick right

01:10:47,550 --> 01:10:54,480
here's random crap my program doesn't

01:10:51,540 --> 01:10:58,680
work I think the words doesn't work

01:10:54,480 --> 01:11:01,320
should be banned not quite but if you

01:10:58,680 --> 01:11:03,420
say my code doesn't work without giving

01:11:01,320 --> 01:11:05,840
any more detail that's like saying to

01:11:03,420 --> 01:11:09,240
the doctor I'm ill what's wrong with me

01:11:05,840 --> 01:11:11,400
I need a bit more information I'm afraid

01:11:09,240 --> 01:11:13,380
doesn't work doesn't cut it

01:11:11,400 --> 01:11:14,970
is it an exception does the code not

01:11:13,380 --> 01:11:16,260
compile does it compile and run without

01:11:14,970 --> 01:11:18,240
an exception but give you the wrong

01:11:16,260 --> 01:11:19,620
result what is the wrong result what is

01:11:18,240 --> 01:11:21,510
the right result why do you think that

01:11:19,620 --> 01:11:25,380
is the right result all of these things

01:11:21,510 --> 01:11:27,240
are reasonable things to expect and I

01:11:25,380 --> 01:11:32,610
will go back to my slides to get some

01:11:27,240 --> 01:11:34,830
sense of structure back very briefly we

01:11:32,610 --> 01:11:36,450
haven't had time to go into a single one

01:11:34,830 --> 01:11:39,570
of the other demos I've got a whole

01:11:36,450 --> 01:11:41,070
solution of demos for this talk none of

01:11:39,570 --> 01:11:45,720
which we'll get to because I've been

01:11:41,070 --> 01:11:47,940
busy doing other demos instead this is

01:11:45,720 --> 01:11:49,100
an important point though I've said

01:11:47,940 --> 01:11:51,570
about how some people get bad

01:11:49,100 --> 01:11:55,520
experiences on Stack Overflow that are

01:11:51,570 --> 01:11:59,040
their fault even if their their fault

01:11:55,520 --> 01:12:00,690
because they didn't read the site those

01:11:59,040 --> 01:12:03,270
people are still people and deserve to

01:12:00,690 --> 01:12:05,160
be treated with respect those people

01:12:03,270 --> 01:12:08,490
should be treating everyone else with

01:12:05,160 --> 01:12:11,670
respect as well and I get very cross

01:12:08,490 --> 01:12:13,260
when someone writes a rant on meto

01:12:11,670 --> 01:12:15,270
stackoverflow saying how horrible

01:12:13,260 --> 01:12:17,700
everyone is to them and you look at

01:12:15,270 --> 01:12:20,130
their comments and they're they haven't

01:12:17,700 --> 01:12:23,010
treated anyone with respect this goes

01:12:20,130 --> 01:12:25,470
way beyond Stack Overflow though so the

01:12:23,010 --> 01:12:29,220
techniques in terms of Diagnostics and

01:12:25,470 --> 01:12:32,730
braking problems down etc I use all the

01:12:29,220 --> 01:12:35,130
time for bug reports so a good question

01:12:32,730 --> 01:12:38,460
on Stack Overflow and a good bug report

01:12:35,130 --> 01:12:40,080
looked very very similar you might

01:12:38,460 --> 01:12:42,750
include a little bit more environmental

01:12:40,080 --> 01:12:44,580
information on a bug report but

01:12:42,750 --> 01:12:46,650
basically I treat them as the same so if

01:12:44,580 --> 01:12:48,150
I'm filing a bug report typically with

01:12:46,650 --> 01:12:52,440
Microsoft for something like that double

01:12:48,150 --> 01:12:54,290
dot nan I make sure I've got a short but

01:12:52,440 --> 01:12:56,850
complete example if at all possible

01:12:54,290 --> 01:12:59,360
these days if it's a dotnet core project

01:12:56,850 --> 01:13:02,090
I include the project file as well so

01:12:59,360 --> 01:13:03,770
you know even if you don't want to copy

01:13:02,090 --> 01:13:06,530
and paste just the c-sharp you could

01:13:03,770 --> 01:13:08,960
copy and paste c-sharp and the project

01:13:06,530 --> 01:13:10,430
file dotnet run and you're away woohoo

01:13:08,960 --> 01:13:12,050
it will bring in all the dependencies

01:13:10,430 --> 01:13:14,540
you don't need to do anything else it's

01:13:12,050 --> 01:13:18,170
great wouldn't have been feasible back

01:13:14,540 --> 01:13:22,400
in the old CS progeny but with the new

01:13:18,170 --> 01:13:24,950
dotnet core SDK it's great um but how

01:13:22,400 --> 01:13:28,760
many of you have filed a bug with an

01:13:24,950 --> 01:13:30,860
open-source project cost you just not

01:13:28,760 --> 01:13:32,210
use open source or you happen to use

01:13:30,860 --> 01:13:37,220
open source that doesn't have any bugs

01:13:32,210 --> 01:13:41,510
or you're too nervous to like let me

01:13:37,220 --> 01:13:44,360
know what that open source it I fell

01:13:41,510 --> 01:13:47,990
bugs and people file bugs on Notre time

01:13:44,360 --> 01:13:50,330
and it's great open-source maintainer

01:13:47,990 --> 01:13:53,000
love getting bug reports from people who

01:13:50,330 --> 01:13:54,590
are respectful of the fact that they've

01:13:53,000 --> 01:13:56,090
done you put their code up there to

01:13:54,590 --> 01:14:00,860
start with and their time in

01:13:56,090 --> 01:14:03,950
investigating things so when someone

01:14:00,860 --> 01:14:06,860
files a bug it's great if it comes like

01:14:03,950 --> 01:14:11,750
a stack overflow question and with some

01:14:06,860 --> 01:14:14,110
collaborative aspect say if they say I

01:14:11,750 --> 01:14:17,120
really like to help fix this if I can

01:14:14,110 --> 01:14:19,130
fantastic if they say I need this done

01:14:17,120 --> 01:14:22,930
by Tuesday because my clients is getting

01:14:19,130 --> 01:14:25,700
cross well sorry that's not my fault and

01:14:22,930 --> 01:14:27,190
we had a very bizarre or we have a very

01:14:25,700 --> 01:14:30,980
bizarre situation with someone who

01:14:27,190 --> 01:14:33,350
didn't say that they did say we have

01:14:30,980 --> 01:14:36,080
clients who are running into this but

01:14:33,350 --> 01:14:38,510
they're using serialization on things

01:14:36,080 --> 01:14:40,460
that aren't marked as serializable by

01:14:38,510 --> 01:14:43,400
calling stuff by reflection and things

01:14:40,460 --> 01:14:45,670
like that's never gonna work just just

01:14:43,400 --> 01:14:50,150
just don't do that please

01:14:45,670 --> 01:14:52,460
and but yeah I do think that the world

01:14:50,150 --> 01:14:54,650
would be the software world would be a

01:14:52,460 --> 01:14:55,970
much much better place if we can

01:14:54,650 --> 01:14:58,010
remember that every time we wrote an

01:14:55,970 --> 01:15:00,050
email or files bug report or responded

01:14:58,010 --> 01:15:01,940
to a bug report this is an actual person

01:15:00,050 --> 01:15:07,100
who's going to feel bad or feel good

01:15:01,940 --> 01:15:11,210
depending on what we write have some

01:15:07,100 --> 01:15:12,860
demos if you're still stuck do ask on

01:15:11,210 --> 01:15:16,070
Stack Overflow so um

01:15:12,860 --> 01:15:18,680
I have mentioned that you'll often find

01:15:16,070 --> 01:15:22,670
the answer by doing all of this stuff if

01:15:18,680 --> 01:15:24,680
you do you may be able to think of a

01:15:22,670 --> 01:15:27,250
good stack overflow question from that

01:15:24,680 --> 01:15:29,630
if you had to do something non-obvious

01:15:27,250 --> 01:15:31,370
that makes a really good stack overflow

01:15:29,630 --> 01:15:33,920
question because someone else is going

01:15:31,370 --> 01:15:36,020
to be in the same position and by the

01:15:33,920 --> 01:15:39,740
time you've come up with the short but

01:15:36,020 --> 01:15:41,420
complete example that's 3/4 of the time

01:15:39,740 --> 01:15:44,090
that you should be spending on a stack

01:15:41,420 --> 01:15:46,280
overflow question is doing all that

01:15:44,090 --> 01:15:48,980
diagnostic work translating that into a

01:15:46,280 --> 01:15:53,000
good question should be reasonably cheap

01:15:48,980 --> 01:15:55,280
and assuming it's not a duplicate it's

01:15:53,000 --> 01:15:57,620
likely to get uprooted and I think it's

01:15:55,280 --> 01:16:00,200
a shame that question up votes are only

01:15:57,620 --> 01:16:02,750
worth 5 when good questions much rarer

01:16:00,200 --> 01:16:04,160
than good answers I'm seeing the Stack

01:16:02,750 --> 01:16:06,620
Overflow focus in February I think I'll

01:16:04,160 --> 01:16:10,400
have a chat with them about that maybe

01:16:06,620 --> 01:16:11,840
say it on the podcast if I can and this

01:16:10,400 --> 01:16:13,900
is the stuff to take away because I'm

01:16:11,840 --> 01:16:17,810
running out of time

01:16:13,900 --> 01:16:19,190
mostly spread the word because none of

01:16:17,810 --> 01:16:20,300
this was particularly difficult

01:16:19,190 --> 01:16:22,520
I didn't demonstrate the

01:16:20,300 --> 01:16:25,010
divide-and-conquer encode as I would

01:16:22,520 --> 01:16:26,330
have done partly because it sounds like

01:16:25,010 --> 01:16:29,140
you're all very intelligent folks who

01:16:26,330 --> 01:16:32,840
kind of know they know the procedure of

01:16:29,140 --> 01:16:35,810
sometimes you just start deleting codes

01:16:32,840 --> 01:16:37,760
sometimes you start from scratch but

01:16:35,810 --> 01:16:40,760
show the people that you work with

01:16:37,760 --> 01:16:44,240
particularly if you are mentoring junior

01:16:40,760 --> 01:16:46,640
developers it's really valuable when you

01:16:44,240 --> 01:16:50,210
get stuck on something or when you start

01:16:46,640 --> 01:16:51,650
getting stuck you when you get that

01:16:50,210 --> 01:16:53,690
feeling that this is going to be an

01:16:51,650 --> 01:16:56,690
interesting bug you know that feeling

01:16:53,690 --> 01:16:59,630
yeah and you know it might take half an

01:16:56,690 --> 01:17:02,690
hour it will be really it will be the

01:16:59,630 --> 01:17:05,900
most valuable half an hour of a really

01:17:02,690 --> 01:17:08,030
junior developers day if you say come

01:17:05,900 --> 01:17:09,980
and help me let's look at this together

01:17:08,030 --> 01:17:12,140
and pair program on it because that's a

01:17:09,980 --> 01:17:13,850
great way of seeing oh hang on you've

01:17:12,140 --> 01:17:16,460
assumed that as like yeah your eyes are

01:17:13,850 --> 01:17:18,440
just skimmed over it completely so they

01:17:16,460 --> 01:17:20,840
may well be able to actually help you

01:17:18,440 --> 01:17:22,720
but you will be able to help them by

01:17:20,840 --> 01:17:26,630
giving them this experience of

01:17:22,720 --> 01:17:27,710
diagnostic work the URLs there

01:17:26,630 --> 01:17:28,820
don't bother remembering it because

01:17:27,710 --> 01:17:31,219
we'll make sure that you can get copies

01:17:28,820 --> 01:17:32,510
of the PowerPoint I would give you a

01:17:31,219 --> 01:17:36,440
link to the PowerPoint but that's kind

01:17:32,510 --> 01:17:45,739
of self referential thank you very much

01:17:36,440 --> 01:17:48,889
have swag we have time for any questions

01:17:45,739 --> 01:17:51,530
if people have questions it was a very

01:17:48,889 --> 01:17:52,760
rambling talk which I kind of apologize

01:17:51,530 --> 01:18:01,719
for but it's really nearly Christmas

01:17:52,760 --> 01:18:04,670
it's oh yeah um so someone used that uh

01:18:01,719 --> 01:18:07,340
lots of people said how how much time do

01:18:04,670 --> 01:18:09,889
you spend on stackoverflow and my normal

01:18:07,340 --> 01:18:12,710
not entirely glib answer is how much

01:18:09,889 --> 01:18:14,690
time do you spend breathing it's just a

01:18:12,710 --> 01:18:17,150
background activity it's something I go

01:18:14,690 --> 01:18:20,150
you know open stackoverflow open CNN

01:18:17,150 --> 01:18:21,920
open 538 open BBC News that's kind of

01:18:20,150 --> 01:18:33,760
the tabs that I have always open and

01:18:21,920 --> 01:18:36,770
just keep checking every so often right

01:18:33,760 --> 01:18:39,080
right so yeah these are all just

01:18:36,770 --> 01:18:43,159
different ways of logging so for one

01:18:39,080 --> 01:18:45,949
thing if any of you blog a diagnostic

01:18:43,159 --> 01:18:48,170
process tweet it at me and I will

01:18:45,949 --> 01:18:50,389
immediately retweet and link to it from

01:18:48,170 --> 01:18:54,620
my blog and whatever so that can have

01:18:50,389 --> 01:18:58,550
effect but otherwise it's just what what

01:18:54,620 --> 01:19:00,290
gets you there so I make the point in my

01:18:58,550 --> 01:19:03,440
notes that I wasn't reading from that

01:19:00,290 --> 01:19:05,330
you know start a word doc or a Google

01:19:03,440 --> 01:19:07,190
Doc or whatever and write down whatever

01:19:05,330 --> 01:19:09,139
is going to be useful to you it doesn't

01:19:07,190 --> 01:19:11,570
need to be pretty one of the bad side

01:19:09,139 --> 01:19:13,670
both sides of writing a blog post is

01:19:11,570 --> 01:19:15,679
you're constantly trying to frame it

01:19:13,670 --> 01:19:17,179
thinking oh well I I've got people who

01:19:15,679 --> 01:19:19,219
don't have any of the context so I've

01:19:17,179 --> 01:19:21,590
got to write a paragraph here and I sort

01:19:19,219 --> 01:19:23,360
of get slightly out of the zone don't

01:19:21,590 --> 01:19:28,190
care about that right right just a doc

01:19:23,360 --> 01:19:31,370
that captures it reality is normally I

01:19:28,190 --> 01:19:33,409
write it on on paper which won't be

01:19:31,370 --> 01:19:35,239
readable by me the next day probably I

01:19:33,409 --> 01:19:37,190
said I don't anything else and but

01:19:35,239 --> 01:19:39,139
that's where I start if I'm if I'm doing

01:19:37,190 --> 01:19:39,710
benchmarking I will write down the

01:19:39,139 --> 01:19:42,380
results

01:19:39,710 --> 01:19:44,900
as numbers just just there but yeah unit

01:19:42,380 --> 01:19:47,510
tests are a great way of capturing that

01:19:44,900 --> 01:19:49,310
and version control commits create a

01:19:47,510 --> 01:19:51,950
branch create as many branches as you

01:19:49,310 --> 01:19:53,150
need and put copious notes in the

01:19:51,950 --> 01:19:55,850
commits and know that you can just

01:19:53,150 --> 01:19:57,980
delete stuff later on it's great anyone

01:19:55,850 --> 01:20:00,050
not using version control and trying to

01:19:57,980 --> 01:20:01,219
do a diagnostic work is really trying to

01:20:00,050 --> 01:20:03,950
do it with one arm tied behind their

01:20:01,219 --> 01:20:11,780
back and and hoppin yes yeah mushrooms

01:20:03,950 --> 01:20:16,580
are always great how can we help to

01:20:11,780 --> 01:20:19,520
change it right so I need to I'm seeing

01:20:16,580 --> 01:20:25,550
Hamilton on Tuesday but I've got until

01:20:19,520 --> 01:20:30,070
then so hiring there are many hiring

01:20:25,550 --> 01:20:35,000
practices that I'll take step back I

01:20:30,070 --> 01:20:37,180
generally genuinely both of those don't

01:20:35,000 --> 01:20:40,630
think that most people believe

01:20:37,180 --> 01:20:45,620
themselves or try to be discriminatory

01:20:40,630 --> 01:20:48,050
so I will say I'm racist because I

01:20:45,620 --> 01:20:51,070
probably am but I'm trying not to be

01:20:48,050 --> 01:20:54,440
it's understanding unconscious bias and

01:20:51,070 --> 01:20:57,950
you know women can be as sexist as men

01:20:54,440 --> 01:21:01,640
against women and it happens unconscious

01:20:57,950 --> 01:21:03,260
bias really sucks and I know that there

01:21:01,640 --> 01:21:04,880
are there were some tests for it that

01:21:03,260 --> 01:21:08,200
have been discredited somewhat

01:21:04,880 --> 01:21:10,250
discredited but I think there's also

01:21:08,200 --> 01:21:14,540
sufficient evidence that the unconscious

01:21:10,250 --> 01:21:18,050
bias does there still come on so look at

01:21:14,540 --> 01:21:20,239
your company's hiring practices and see

01:21:18,050 --> 01:21:22,520
what you can see where you can tweak

01:21:20,239 --> 01:21:23,930
that for best practices and I can tell

01:21:22,520 --> 01:21:26,870
you a little bit about Google's hiring

01:21:23,930 --> 01:21:30,320
practices which is that there's no such

01:21:26,870 --> 01:21:34,250
thing as a diversity hire in Google but

01:21:30,320 --> 01:21:36,380
there is such a thing as I don't think

01:21:34,250 --> 01:21:38,780
we say diversity candidate now but

01:21:36,380 --> 01:21:45,810
candidate from a and historically

01:21:38,780 --> 01:21:47,820
underrepresented category

01:21:45,810 --> 01:21:52,770
and I know pigeonholing people is also

01:21:47,820 --> 01:21:55,530
horrible but the idea is if you're

01:21:52,770 --> 01:21:57,720
you're trying to get everyone has to

01:21:55,530 --> 01:21:58,980
meet the bar because no one wants to

01:21:57,720 --> 01:22:02,430
hire bad people

01:21:58,980 --> 01:22:03,900
that's bad for everyone involved the

01:22:02,430 --> 01:22:07,860
person hiring the team that they end up

01:22:03,900 --> 01:22:11,100
with the person being hired etc but if

01:22:07,860 --> 01:22:14,520
there are people who you're not sure

01:22:11,100 --> 01:22:17,550
about if you've got a line out the door

01:22:14,520 --> 01:22:19,470
of similar people then it's probably not

01:22:17,550 --> 01:22:20,910
worth putting in several hours to find

01:22:19,470 --> 01:22:22,860
out whether actually they are over the

01:22:20,910 --> 01:22:25,200
bar yeah if there's a couple of areas

01:22:22,860 --> 01:22:28,230
that you're not sure about if you've got

01:22:25,200 --> 01:22:30,300
a queue of you know there's someone over

01:22:28,230 --> 01:22:32,490
there if I if I really reach out to them

01:22:30,300 --> 01:22:33,780
then it's worth putting in a bit more

01:22:32,490 --> 01:22:35,820
time to see whether actually they're

01:22:33,780 --> 01:22:38,780
good enough and you know we haven't

01:22:35,820 --> 01:22:42,840
properly tested that that aspect so

01:22:38,780 --> 01:22:45,270
making sure that your hiring practices

01:22:42,840 --> 01:22:49,200
reflect that and that everyone knows

01:22:45,270 --> 01:22:50,580
that because even if I think it still

01:22:49,200 --> 01:22:53,940
probably still happens in Google

01:22:50,580 --> 01:22:56,610
sometimes that we can say this is what

01:22:53,940 --> 01:22:59,790
our hiring practices are but can you

01:22:56,610 --> 01:23:04,770
imagine going into a team and say oh

01:22:59,790 --> 01:23:05,550
you're the token girl we've hired makes

01:23:04,770 --> 01:23:08,790
me so mad

01:23:05,550 --> 01:23:12,360
so everyone needs to be aware of why and

01:23:08,790 --> 01:23:16,640
what the practices are that's a little

01:23:12,360 --> 01:23:21,150
bit about hiring for community events

01:23:16,640 --> 01:23:24,450
code of conduct making sure that the

01:23:21,150 --> 01:23:26,870
making sure that you good folks talk to

01:23:24,450 --> 01:23:30,750
other people in your community and

01:23:26,870 --> 01:23:33,600
encourage people and say right you may

01:23:30,750 --> 01:23:36,390
have heard bad things about user groups

01:23:33,600 --> 01:23:40,820
in general but Devco South East is

01:23:36,390 --> 01:23:42,750
really good etc Devco South rather sorry

01:23:40,820 --> 01:23:46,410
alright yeah

01:23:42,750 --> 01:23:48,600
I don't know itself some combination of

01:23:46,410 --> 01:23:51,870
dev self encased I don't know where the

01:23:48,600 --> 01:23:54,300
yeast came from at all but yeah we

01:23:51,870 --> 01:23:56,880
should I was reading a blog post today

01:23:54,300 --> 01:23:58,850
by someone saying how they've been

01:23:56,880 --> 01:24:02,160
sexually harassed at various conferences

01:23:58,850 --> 01:24:03,960
it's just got to stop it really has

01:24:02,160 --> 01:24:06,270
there has to be absolutely zero

01:24:03,960 --> 01:24:08,280
tolerance and you can tell that there

01:24:06,270 --> 01:24:11,690
still is tolerance this this woman's

01:24:08,280 --> 01:24:17,030
writing saying here is a well respected

01:24:11,690 --> 01:24:19,620
academic who is also well known to have

01:24:17,030 --> 01:24:21,660
harass people they shouldn't be well

01:24:19,620 --> 01:24:27,150
respected anymore that behavior does not

01:24:21,660 --> 01:24:29,250
deserve any respect I'm sort of losing

01:24:27,150 --> 01:24:32,910
the plot a bit partly after a couple of

01:24:29,250 --> 01:24:34,290
hours of speaking I tend to go a bit but

01:24:32,910 --> 01:24:38,060
yeah it's got to be a cultural thing

01:24:34,290 --> 01:24:41,070
that we've got to all except the titties

01:24:38,060 --> 01:24:43,430
important to get diversity that we will

01:24:41,070 --> 01:24:46,470
end up in a better working environment

01:24:43,430 --> 01:24:48,540
have more fun get better products you

01:24:46,470 --> 01:24:51,840
know I use far more technical products

01:24:48,540 --> 01:24:53,520
than I build so why would I not want the

01:24:51,840 --> 01:24:56,490
best people building technical products

01:24:53,520 --> 01:24:58,140
and if you immediately discount half the

01:24:56,490 --> 01:25:02,820
world's workforce you won't get as good

01:24:58,140 --> 01:25:04,770
products is self-explanatory so we've

01:25:02,820 --> 01:25:08,340
got to all take that on and make sure

01:25:04,770 --> 01:25:12,360
that everyone is supportive of that as a

01:25:08,340 --> 01:25:18,270
goal yeah I wish I had better

01:25:12,360 --> 01:25:18,270

YouTube URL: https://www.youtube.com/watch?v=gjpY8BprtU4


