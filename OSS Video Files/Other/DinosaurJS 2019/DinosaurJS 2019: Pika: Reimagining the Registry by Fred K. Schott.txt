Title: DinosaurJS 2019: Pika: Reimagining the Registry by Fred K. Schott
Publication date: 2019-08-19
Playlist: DinosaurJS 2019
Description: 
	DinosaurJS 2019: Pika: Reimagining the Registry by Fred K. Schott
Captions: 
	00:00:01,550 --> 00:00:06,490
[Applause]

00:00:04,100 --> 00:00:08,880
[Music]

00:00:06,490 --> 00:00:10,230
[Applause]

00:00:08,880 --> 00:00:14,240
[Music]

00:00:10,230 --> 00:00:17,010
[Applause]

00:00:14,240 --> 00:00:18,150
all right thank you all for coming out

00:00:17,010 --> 00:00:22,200
today thank you all for having me here

00:00:18,150 --> 00:00:23,340
I'm so excited to be speaking let's get

00:00:22,200 --> 00:00:26,550
started I wanna start with a simple

00:00:23,340 --> 00:00:32,850
question and this of course needs to be

00:00:26,550 --> 00:00:34,770
turned on haha no simple question now

00:00:32,850 --> 00:00:37,710
all right so I should explain I'm using

00:00:34,770 --> 00:00:39,510
this really cool new slide bundler for

00:00:37,710 --> 00:00:40,860
my talk really powerful but it just

00:00:39,510 --> 00:00:41,970
means that I have to recompile every

00:00:40,860 --> 00:00:44,940
time I change slides you won't even

00:00:41,970 --> 00:00:47,640
notice it I promise okay

00:00:44,940 --> 00:00:50,820
so first question who here is used

00:00:47,640 --> 00:00:52,890
webpack show of hands literally everyone

00:00:50,820 --> 00:00:57,470
it is an essential piece of web

00:00:52,890 --> 00:01:03,830
development today now second question

00:00:57,470 --> 00:01:06,200
just give it a second second question

00:01:03,830 --> 00:01:08,579
who here has ever seen one of these

00:01:06,200 --> 00:01:09,900
right okay that's great

00:01:08,579 --> 00:01:12,119
this is for if you don't know this is a

00:01:09,900 --> 00:01:13,890
bundle analysis so this is taking a look

00:01:12,119 --> 00:01:16,259
at what's in your web pack bundles and

00:01:13,890 --> 00:01:17,280
if you haven't run one of these one of

00:01:16,259 --> 00:01:22,829
the first times you do it'll probably

00:01:17,280 --> 00:01:25,649
look a lot more like probably look a lot

00:01:22,829 --> 00:01:28,289
more like this where it's really common

00:01:25,649 --> 00:01:30,389
for different bundles to just have like

00:01:28,289 --> 00:01:32,399
weird things going on so this was a real

00:01:30,389 --> 00:01:35,700
bundle analysis that I shared of a real

00:01:32,399 --> 00:01:37,889
production site where reactive material

00:01:35,700 --> 00:01:39,450
we're just in every bundle duplicated 40

00:01:37,889 --> 00:01:42,299
times over sent to the user 40 times

00:01:39,450 --> 00:01:44,159
over and you know just just what's

00:01:42,299 --> 00:01:45,450
happening no one really noticed so it's

00:01:44,159 --> 00:01:46,770
really easy for this to happen with web

00:01:45,450 --> 00:01:51,770
pack unless you're really conscious

00:01:46,770 --> 00:01:51,770
about doing one of these analyses now

00:01:51,859 --> 00:01:55,350
you know this is actually this is

00:01:53,850 --> 00:01:57,950
looking let's feel a little familiar

00:01:55,350 --> 00:02:02,279
feel from really to anyone else is that

00:01:57,950 --> 00:02:06,659
pre react up is that you that is you how

00:02:02,279 --> 00:02:07,799
do you get in my talk huh and you know

00:02:06,659 --> 00:02:09,630
this actually brings up while I was

00:02:07,799 --> 00:02:11,340
doing this dumb bit I actually started

00:02:09,630 --> 00:02:13,650
thinking about how much time I spend

00:02:11,340 --> 00:02:15,030
waiting for that screen and so I

00:02:13,650 --> 00:02:16,380
actually want to get some numbers I got

00:02:15,030 --> 00:02:19,440
all the last apps that I've worked on

00:02:16,380 --> 00:02:21,240
and I time them and this is what I saw

00:02:19,440 --> 00:02:23,400
and this wasn't a surprise right I'd

00:02:21,240 --> 00:02:25,440
I've been working on these over the

00:02:23,400 --> 00:02:26,730
course of years but to actually see it

00:02:25,440 --> 00:02:27,190
laid out like they're basically the

00:02:26,730 --> 00:02:28,720
worst offense

00:02:27,190 --> 00:02:31,270
was taken about a minute to start up and

00:02:28,720 --> 00:02:34,480
taking about eleven seconds to recompile

00:02:31,270 --> 00:02:38,140
every change and that's a lot of time

00:02:34,480 --> 00:02:38,950
added up over a years right and so one

00:02:38,140 --> 00:02:40,990
of the things I want to talk about

00:02:38,950 --> 00:02:42,310
because you've seen the bad news right

00:02:40,990 --> 00:02:44,560
this isn't to talk about how to use

00:02:42,310 --> 00:02:46,750
webpack better this is actually to talk

00:02:44,560 --> 00:02:48,730
about how not to use or rather

00:02:46,750 --> 00:02:52,260
it's to talk about why we use bundlers

00:02:48,730 --> 00:02:55,630
at all and what that's costing us so

00:02:52,260 --> 00:02:58,570
 is a project that I work on to

00:02:55,630 --> 00:02:59,860
basically reimagine what javascript

00:02:58,570 --> 00:03:02,440
could look like today and help move the

00:02:59,860 --> 00:03:05,770
JavaScript ecosystem forward and let me

00:03:02,440 --> 00:03:09,010
give you example what I mean by that we

00:03:05,770 --> 00:03:10,750
want to take this graph and see if we

00:03:09,010 --> 00:03:12,460
could do something better and one of the

00:03:10,750 --> 00:03:15,880
tools today I'm going to show you takes

00:03:12,460 --> 00:03:17,740
this and brings it here our goal is at

00:03:15,880 --> 00:03:19,330
start time less than one second and

00:03:17,740 --> 00:03:21,310
recompilation at less than 300

00:03:19,330 --> 00:03:23,700
milliseconds so I'm going to show you

00:03:21,310 --> 00:03:25,540
that tool again a little bit later but

00:03:23,700 --> 00:03:28,030
first we need to answer that fundamental

00:03:25,540 --> 00:03:31,390
question why do we need bundler today

00:03:28,030 --> 00:03:32,890
why do we need webpack and another

00:03:31,390 --> 00:03:34,270
question why did I call this talk

00:03:32,890 --> 00:03:35,350
reimagine in the registry if all I'm

00:03:34,270 --> 00:03:37,030
going to do is talk about bundlers for

00:03:35,350 --> 00:03:41,500
20 minutes the answer to both questions

00:03:37,030 --> 00:03:44,050
is NPM NPM is the reason that we need

00:03:41,500 --> 00:03:45,820
bumblers today and to really go back and

00:03:44,050 --> 00:03:47,530
answer that question we have to go back

00:03:45,820 --> 00:03:51,100
10 years okay who was doing web

00:03:47,530 --> 00:03:52,300
development 10 years ago I was just

00:03:51,100 --> 00:03:54,580
getting started out it was chaos

00:03:52,300 --> 00:03:55,630
compared to today you had to just put

00:03:54,580 --> 00:03:56,980
these script tags everywhere your

00:03:55,630 --> 00:03:58,510
dependencies if you give them the right

00:03:56,980 --> 00:04:00,280
order one would depend on another

00:03:58,510 --> 00:04:03,580
implicitly so you know God forbid

00:04:00,280 --> 00:04:05,050
they're in the wrong order and if you

00:04:03,580 --> 00:04:06,130
were smart you did something little

00:04:05,050 --> 00:04:09,640
smarter with your source code at least

00:04:06,130 --> 00:04:11,860
so this is AMD this was a module system

00:04:09,640 --> 00:04:14,040
that was pretty popular back then it

00:04:11,860 --> 00:04:16,720
allowed you to define your imports and

00:04:14,040 --> 00:04:18,340
define your exports in a user land

00:04:16,720 --> 00:04:20,919
module system so you'd ship this to the

00:04:18,340 --> 00:04:22,750
browser and this worked for the time

00:04:20,919 --> 00:04:24,250
because bundling at the time was really

00:04:22,750 --> 00:04:25,930
just string concatenation we'd really

00:04:24,250 --> 00:04:27,490
just take these files these smaller

00:04:25,930 --> 00:04:29,830
JavaScript files and then combine them

00:04:27,490 --> 00:04:30,730
into one bigger JavaScript file and then

00:04:29,830 --> 00:04:34,180
this would all kind of work it could

00:04:30,730 --> 00:04:36,190
define its imports Defiance exports now

00:04:34,180 --> 00:04:38,229
at the same time Note is getting started

00:04:36,190 --> 00:04:40,060
and they decide to go with something

00:04:38,229 --> 00:04:40,960
else called server Jas which was later

00:04:40,060 --> 00:04:42,610
renamed to

00:04:40,960 --> 00:04:44,320
and joyous now this should feel very

00:04:42,610 --> 00:04:46,360
familiar this is what nodes module

00:04:44,320 --> 00:04:48,130
system looks like today it allows you to

00:04:46,360 --> 00:04:49,479
define your imports to find your exports

00:04:48,130 --> 00:04:50,560
but a little bit more of a user friendly

00:04:49,479 --> 00:04:52,930
way right you don't need to worry about

00:04:50,560 --> 00:04:54,759
asynchronous loading you just have this

00:04:52,930 --> 00:04:56,110
require call it's pretty nice it's a

00:04:54,759 --> 00:04:59,320
little more user friendly little less

00:04:56,110 --> 00:05:00,669
boilerplate now this would never run in

00:04:59,320 --> 00:05:01,720
the browser on its own right

00:05:00,669 --> 00:05:04,120
what would the browser even do when it's

00:05:01,720 --> 00:05:05,620
not required it would just block the app

00:05:04,120 --> 00:05:06,910
while it loaded that file any of its

00:05:05,620 --> 00:05:08,860
dependencies and how would it look

00:05:06,910 --> 00:05:11,110
things up they don't be different

00:05:08,860 --> 00:05:13,539
requests so this was never meant to run

00:05:11,110 --> 00:05:14,500
in the browser on purpose and for

00:05:13,539 --> 00:05:16,210
whatever reason these two groups

00:05:14,500 --> 00:05:17,740
couldn't really come together on one

00:05:16,210 --> 00:05:19,180
module system so you ended up with two

00:05:17,740 --> 00:05:20,020
different module systems that were

00:05:19,180 --> 00:05:24,360
popular at the time

00:05:20,020 --> 00:05:26,259
one for node and one for the web now

00:05:24,360 --> 00:05:28,000
looking back this was never really gonna

00:05:26,259 --> 00:05:29,229
last right like the opportunity is too

00:05:28,000 --> 00:05:31,150
great you have two groups of people

00:05:29,229 --> 00:05:33,220
doing the same development in the same

00:05:31,150 --> 00:05:35,620
language but just they can't use each

00:05:33,220 --> 00:05:37,419
other's code and so there's no two

00:05:35,620 --> 00:05:39,669
people that finally figure this out with

00:05:37,419 --> 00:05:41,229
a tool called browserify if anyone uses

00:05:39,669 --> 00:05:43,690
this is one like the first bundler

00:05:41,229 --> 00:05:45,010
that would look at your node code and so

00:05:43,690 --> 00:05:46,990
if just like simple string concatenation

00:05:45,010 --> 00:05:48,460
would actually follow your imports to

00:05:46,990 --> 00:05:49,780
build your dependency graph and then

00:05:48,460 --> 00:05:51,639
build that all together into one

00:05:49,780 --> 00:05:53,169
javascript file that would stitch up all

00:05:51,639 --> 00:05:54,099
the different imports so instead of

00:05:53,169 --> 00:05:56,320
worrying about asynchronous loading

00:05:54,099 --> 00:05:58,560
everything was in one file it would all

00:05:56,320 --> 00:06:01,570
just you know load and run and

00:05:58,560 --> 00:06:04,030
browserify and web pack really figured

00:06:01,570 --> 00:06:05,979
this out in a way that allowed this one

00:06:04,030 --> 00:06:09,610
module system to work on both node and

00:06:05,979 --> 00:06:12,340
the web so with browserify and then

00:06:09,610 --> 00:06:14,110
later web pack everyone was able to come

00:06:12,340 --> 00:06:16,270
under one time do a lot of developing

00:06:14,110 --> 00:06:19,750
together tons of efficiency this was a

00:06:16,270 --> 00:06:22,570
good thing but I want to highlight one

00:06:19,750 --> 00:06:24,400
concession that came out of this that a

00:06:22,570 --> 00:06:25,840
lot of people ideally certainly didn't

00:06:24,400 --> 00:06:30,009
realize at the time it's really

00:06:25,840 --> 00:06:33,940
important the web decided to use tooling

00:06:30,009 --> 00:06:36,190
to access NPM so the web added a bundler

00:06:33,940 --> 00:06:37,810
and we'd already been doing production

00:06:36,190 --> 00:06:39,970
optimization bundling into single files

00:06:37,810 --> 00:06:41,710
but we added it to dev time to now so

00:06:39,970 --> 00:06:44,289
now it's an essential required piece of

00:06:41,710 --> 00:06:46,300
working with NPM node never had to make

00:06:44,289 --> 00:06:49,510
this concession right they welcomed web

00:06:46,300 --> 00:06:51,310
developers into their ecosystem so the

00:06:49,510 --> 00:06:54,610
expectation there is that an NPM package

00:06:51,310 --> 00:06:58,090
will run as installed as written as pub

00:06:54,610 --> 00:06:59,560
on node without tooling the web then has

00:06:58,090 --> 00:07:01,930
to go and do whatever it takes to make

00:06:59,560 --> 00:07:03,189
that work for them so this is a really

00:07:01,930 --> 00:07:04,030
important dynamic that I just want to

00:07:03,189 --> 00:07:05,620
highlight because we're gonna get back

00:07:04,030 --> 00:07:09,759
to in a second I want you to keep it in

00:07:05,620 --> 00:07:12,340
mind for the next next section now years

00:07:09,759 --> 00:07:15,189
later JavaScript taking off node an NPM

00:07:12,340 --> 00:07:16,689
are doing well and the community finally

00:07:15,189 --> 00:07:20,590
gets together and ratifies a native

00:07:16,689 --> 00:07:22,539
module syntax so it has the use of like

00:07:20,590 --> 00:07:25,539
user friendliness of require and a

00:07:22,539 --> 00:07:26,919
common j/s with your imports there but

00:07:25,539 --> 00:07:28,030
it's native so the browser can actually

00:07:26,919 --> 00:07:29,500
understand it and do some really cool

00:07:28,030 --> 00:07:31,330
things with asynchronous loading so it

00:07:29,500 --> 00:07:33,759
works the goal is to work in both

00:07:31,330 --> 00:07:35,979
environments and because it's really

00:07:33,759 --> 00:07:38,259
easy to analyze it's really explicit

00:07:35,979 --> 00:07:40,360
about what it's doing bundlers are also

00:07:38,259 --> 00:07:41,770
really good at optimizing this code so

00:07:40,360 --> 00:07:44,050
they can do things like tree shaking and

00:07:41,770 --> 00:07:45,849
things that will just make this a little

00:07:44,050 --> 00:07:48,219
bit more efficient when you ship it to

00:07:45,849 --> 00:07:51,639
production in a web app smaller code

00:07:48,219 --> 00:07:54,039
bundles now there's one notable

00:07:51,639 --> 00:07:55,330
exception to this right because this was

00:07:54,039 --> 00:07:58,000
a few years ago modern browsers are

00:07:55,330 --> 00:08:01,419
using this now web pack or rather

00:07:58,000 --> 00:08:03,340
roll-up Babel type script this is

00:08:01,419 --> 00:08:05,830
probably the syntax that you're writing

00:08:03,340 --> 00:08:07,629
today in your apps they're all using

00:08:05,830 --> 00:08:11,229
this pretty heavily the one holdout is

00:08:07,629 --> 00:08:14,370
node it's a really hard problem to move

00:08:11,229 --> 00:08:16,270
an ecosystem across module systems and

00:08:14,370 --> 00:08:17,979
they've tried a lot of different things

00:08:16,270 --> 00:08:20,889
but they're still primarily on common

00:08:17,979 --> 00:08:22,509
j/s so you know they're doing hard work

00:08:20,889 --> 00:08:23,650
but it's been a really tough road to get

00:08:22,509 --> 00:08:26,800
there and they're finally making really

00:08:23,650 --> 00:08:30,279
good progress but for the time being

00:08:26,800 --> 00:08:32,169
node is still on commonjs everyone else

00:08:30,279 --> 00:08:34,930
is either in process of moving or has

00:08:32,169 --> 00:08:38,219
moved already to ESM and this is where

00:08:34,930 --> 00:08:41,380
that dynamic comes back into play where

00:08:38,219 --> 00:08:44,199
packages are expected on NPM to run as

00:08:41,380 --> 00:08:47,589
written for node which means that you as

00:08:44,199 --> 00:08:49,899
a package author need to write command J

00:08:47,589 --> 00:08:52,600
s and publish common J s if anyone in

00:08:49,899 --> 00:08:55,449
the node community's gonna use it and so

00:08:52,600 --> 00:08:57,610
ever on the web has to they take this

00:08:55,449 --> 00:09:01,089
and do something with it to make it run

00:08:57,610 --> 00:09:03,459
on the web so what you end up there is

00:09:01,089 --> 00:09:06,490
NPM is still primarily on commonjs

00:09:03,459 --> 00:09:08,380
and doesn't get a lot of the beneficial

00:09:06,490 --> 00:09:10,120
things that ESM can give you

00:09:08,380 --> 00:09:12,160
optimization and just you know there's

00:09:10,120 --> 00:09:17,340
more about of needham more modern native

00:09:12,160 --> 00:09:19,240
syntax now there are workarounds roll up

00:09:17,340 --> 00:09:21,700
started doing this and a lot of people

00:09:19,240 --> 00:09:23,440
have caught on which is a module entry

00:09:21,700 --> 00:09:24,760
point in your package.json so if you as

00:09:23,440 --> 00:09:25,840
a package author write you you need to

00:09:24,760 --> 00:09:28,000
support node so you need to support

00:09:25,840 --> 00:09:30,700
commonjs but you can go and do a few

00:09:28,000 --> 00:09:32,560
extra steps to support ESM so you can

00:09:30,700 --> 00:09:34,990
build a second distribution of your

00:09:32,560 --> 00:09:37,480
package include a module entry point to

00:09:34,990 --> 00:09:38,950
it if that's CSM your bundler will

00:09:37,480 --> 00:09:42,520
recognize it and you'll get all those

00:09:38,950 --> 00:09:44,620
optimization benefits it works it's out

00:09:42,520 --> 00:09:48,970
there about 7% of packages that we've

00:09:44,620 --> 00:09:50,200
seen use this but and you know 7% of a

00:09:48,970 --> 00:09:51,910
million still a lot of packages but it's

00:09:50,200 --> 00:09:53,410
it's far from being the standard it's

00:09:51,910 --> 00:09:55,150
far from being as supported you know bus

00:09:53,410 --> 00:09:56,260
by NPM or anything like that it's an

00:09:55,150 --> 00:09:57,570
additional thing you have to go out and

00:09:56,260 --> 00:09:59,860
do

00:09:57,570 --> 00:10:01,930
so this is where pika kind of came on

00:09:59,860 --> 00:10:05,140
the same it started as a way to find

00:10:01,930 --> 00:10:06,400
these module modern packages that would

00:10:05,140 --> 00:10:08,050
optimize better and we're generally just

00:10:06,400 --> 00:10:10,600
a little more modern for a web user and

00:10:08,050 --> 00:10:12,940
what it was was just a search on NPM so

00:10:10,600 --> 00:10:14,260
it was like a nice modern filter for web

00:10:12,940 --> 00:10:15,970
developers on NPM and if you haven't

00:10:14,260 --> 00:10:19,120
used this you should really check it out

00:10:15,970 --> 00:10:21,370
is I not as a biased person who built

00:10:19,120 --> 00:10:24,070
this although that's I did build it but

00:10:21,370 --> 00:10:27,160
it is a really useful tool for finding

00:10:24,070 --> 00:10:28,720
just like modern web packages and it has

00:10:27,160 --> 00:10:30,220
a few really helpful kind of helper

00:10:28,720 --> 00:10:31,270
things for the package that you're

00:10:30,220 --> 00:10:32,650
looking for so it'll tell you if they

00:10:31,270 --> 00:10:34,480
have typescript definitions bundled in

00:10:32,650 --> 00:10:36,040
them so if you're using typescript it's

00:10:34,480 --> 00:10:39,070
just like a nice signal to know that it

00:10:36,040 --> 00:10:40,480
has that it has a little size indicator

00:10:39,070 --> 00:10:42,400
so it'll tell you how heavy this will be

00:10:40,480 --> 00:10:44,350
when it's added at the end of the day to

00:10:42,400 --> 00:10:46,210
your web bundle so it's just like it's

00:10:44,350 --> 00:10:52,780
like NPM search for web developers it's

00:10:46,210 --> 00:10:54,400
really cool so it's 2019 we have ESM we

00:10:52,780 --> 00:10:56,650
have a way to publish it on the on the

00:10:54,400 --> 00:11:01,000
registry we're writing it in our source

00:10:56,650 --> 00:11:04,720
code do we still need bunglers and the

00:11:01,000 --> 00:11:07,000
answer is yes now that's really sad to

00:11:04,720 --> 00:11:09,460
me and it's for three main reasons that

00:11:07,000 --> 00:11:11,260
we still need bundlers the first is that

00:11:09,460 --> 00:11:13,360
just because a package is ESM doesn't

00:11:11,260 --> 00:11:15,430
mean its dependencies are also SM and if

00:11:13,360 --> 00:11:17,589
any common GS gets into your web app and

00:11:15,430 --> 00:11:21,339
you ship it to the browser the whole

00:11:17,589 --> 00:11:22,060
thing just dies the tech the second

00:11:21,339 --> 00:11:25,030
thing is

00:11:22,060 --> 00:11:28,210
bad imports so importing by package name

00:11:25,030 --> 00:11:31,180
and by Empire partial import path those

00:11:28,210 --> 00:11:33,760
are really helpful kind of just nice

00:11:31,180 --> 00:11:35,020
little shortcut so we can take but they

00:11:33,760 --> 00:11:37,240
were never included in the spec and in

00:11:35,020 --> 00:11:39,040
the browser so browsers don't support

00:11:37,240 --> 00:11:40,780
them this would it just doesn't work in

00:11:39,040 --> 00:11:43,510
the browser and packages are doing this

00:11:40,780 --> 00:11:45,660
all the time I looking at my package

00:11:43,510 --> 00:11:48,010
name is a really convenient thing to do

00:11:45,660 --> 00:11:51,940
and the third is just there's a lot of

00:11:48,010 --> 00:11:54,340
node isms out there in the NPM ecosystem

00:11:51,940 --> 00:11:56,410
so a lot of these eeeh some packages are

00:11:54,340 --> 00:11:57,520
still built for bundler primarily so

00:11:56,410 --> 00:11:59,410
bundler is one thing that they do really

00:11:57,520 --> 00:12:02,350
well is they because remember they were

00:11:59,410 --> 00:12:04,150
added to make NPM work in the web so

00:12:02,350 --> 00:12:05,590
what they did was not only just bring

00:12:04,150 --> 00:12:07,930
all your files into one big file but

00:12:05,590 --> 00:12:10,080
they also poly filter shimmed a lot of

00:12:07,930 --> 00:12:14,380
node ism so node built-in modules or

00:12:10,080 --> 00:12:16,330
touching the process global and so a lot

00:12:14,380 --> 00:12:18,400
of packages on us out on NPM that are

00:12:16,330 --> 00:12:19,720
built as DSM are still doing those

00:12:18,400 --> 00:12:20,680
things because bundler take care of it

00:12:19,720 --> 00:12:25,450
they don't even know that it wouldn't

00:12:20,680 --> 00:12:27,370
run in the browser so this gets us to

00:12:25,450 --> 00:12:28,570
that tool whities at the beginning which

00:12:27,370 --> 00:12:29,110
is one of the things we're working on a

00:12:28,570 --> 00:12:31,660
pika

00:12:29,110 --> 00:12:33,160
which is trying to ask you know we saw

00:12:31,660 --> 00:12:35,530
this whole decade of web development

00:12:33,160 --> 00:12:37,330
since bundler first kind of introduced

00:12:35,530 --> 00:12:38,440
in that way can we take some of the

00:12:37,330 --> 00:12:40,810
progress that we've made in the

00:12:38,440 --> 00:12:43,590
ecosystem and as developers and in the

00:12:40,810 --> 00:12:45,550
language itself and can we reimagine

00:12:43,590 --> 00:12:46,870
what this flow can look like what

00:12:45,550 --> 00:12:49,660
bundling could look like today

00:12:46,870 --> 00:12:50,470
and so for the rest of this talk I want

00:12:49,660 --> 00:12:53,020
to show you this tool that we built

00:12:50,470 --> 00:12:55,390
called picot web it's a way to run NPM

00:12:53,020 --> 00:12:58,810
packages in the browser no web pack no

00:12:55,390 --> 00:13:01,210
bundler required and well it's true that

00:12:58,810 --> 00:13:03,130
you can't run these directly off of NPM

00:13:01,210 --> 00:13:04,540
you know some you can but most packages

00:13:03,130 --> 00:13:07,360
you can't run directly off of NPM in the

00:13:04,540 --> 00:13:09,820
browser what this tool does is it Reis

00:13:07,360 --> 00:13:11,980
copes bundling to solve those three

00:13:09,820 --> 00:13:13,990
problems that were mentioned instead of

00:13:11,980 --> 00:13:15,940
sending your entire application through

00:13:13,990 --> 00:13:18,370
a big bundle process with all the

00:13:15,940 --> 00:13:20,140
complex plugins and toolings it just

00:13:18,370 --> 00:13:23,290
scopes it to the three problems that

00:13:20,140 --> 00:13:24,280
still needs solving today in 2019 so

00:13:23,290 --> 00:13:28,090
what does that look like in product in

00:13:24,280 --> 00:13:30,460
practice well for one dika web only runs

00:13:28,090 --> 00:13:32,170
when your dependencies change and when

00:13:30,460 --> 00:13:35,100
that happens it takes a look at your

00:13:32,170 --> 00:13:37,050
dependencies it scans it for any

00:13:35,100 --> 00:13:39,510
packages with that module entry point

00:13:37,050 --> 00:13:42,540
right here some support and then it

00:13:39,510 --> 00:13:46,080
installs them as web ready JavaScript

00:13:42,540 --> 00:13:47,160
modules so if there's any common GS

00:13:46,080 --> 00:13:49,110
anywhere that's relied on one of those

00:13:47,160 --> 00:13:50,010
packages it pulls it up into that file

00:13:49,110 --> 00:13:52,020
so you don't have to worry about it

00:13:50,010 --> 00:13:54,270
there's any partial imports it resolves

00:13:52,020 --> 00:13:55,860
those and if there's any notices that

00:13:54,270 --> 00:13:59,270
tries to take care of as many as it can

00:13:55,860 --> 00:14:02,100
and so by you by Ries coping bundling

00:13:59,270 --> 00:14:06,570
just to solve those problems well you

00:14:02,100 --> 00:14:09,240
end up with our JavaScript packages that

00:14:06,570 --> 00:14:10,410
run in the web off of NPM which is

00:14:09,240 --> 00:14:11,580
really cool it so you don't need this

00:14:10,410 --> 00:14:13,920
whole tool chain you can just you can

00:14:11,580 --> 00:14:17,580
just do that it really you write modern

00:14:13,920 --> 00:14:20,670
ESM source and then we take care of the

00:14:17,580 --> 00:14:23,790
rest basically now what this looks like

00:14:20,670 --> 00:14:25,080
in practice for your source code is that

00:14:23,790 --> 00:14:26,340
you point to these files directly right

00:14:25,080 --> 00:14:28,080
they run in the web so you just point to

00:14:26,340 --> 00:14:30,750
them directly with an import that the

00:14:28,080 --> 00:14:32,070
browser will understand so what that

00:14:30,750 --> 00:14:34,950
means is they live at this web modules

00:14:32,070 --> 00:14:36,810
location and it means you'll never end

00:14:34,950 --> 00:14:38,430
up with something like this where you

00:14:36,810 --> 00:14:41,130
have dependency is kind of scattered and

00:14:38,430 --> 00:14:45,380
and and duplicated for efficiency but

00:14:41,130 --> 00:14:45,380
they all exist in one place by default

00:14:46,550 --> 00:14:50,670
the other nice thing about that is that

00:14:48,420 --> 00:14:51,960
then there's no giant vendor bundle to

00:14:50,670 --> 00:14:53,490
worry about either when one of them

00:14:51,960 --> 00:14:55,590
updates that's the only one that needs

00:14:53,490 --> 00:14:57,600
to be refreshed by the user so again

00:14:55,590 --> 00:14:59,250
each one is isolated they only need to

00:14:57,600 --> 00:15:00,090
be researched when they change which for

00:14:59,250 --> 00:15:03,350
a lot of dependencies they don't

00:15:00,090 --> 00:15:05,250
actually change that much now I

00:15:03,350 --> 00:15:07,020
mentioned that convenience of importing

00:15:05,250 --> 00:15:09,330
by package name and I like that myself

00:15:07,020 --> 00:15:12,170
everyone was pretty happy with that one

00:15:09,330 --> 00:15:14,610
thing to kind of clarify here is that

00:15:12,170 --> 00:15:16,410
using a tool like this going unbundled

00:15:14,610 --> 00:15:17,700
doesn't mean that you don't have to use

00:15:16,410 --> 00:15:19,620
a build stuff right a lot of the

00:15:17,700 --> 00:15:20,760
excitement in the space is about the

00:15:19,620 --> 00:15:22,290
fact that you know I don't need a build

00:15:20,760 --> 00:15:24,120
stuff anymore I can just write good

00:15:22,290 --> 00:15:25,650
source code point it to these good

00:15:24,120 --> 00:15:28,560
packages and then ship that to the user

00:15:25,650 --> 00:15:30,030
and that's really exciting but if you

00:15:28,560 --> 00:15:33,960
use Babel or typescript you can still

00:15:30,030 --> 00:15:36,720
use this new structure to not have to do

00:15:33,960 --> 00:15:39,450
so much work per iteration and so we

00:15:36,720 --> 00:15:40,800
ship a really easy babel plugin that

00:15:39,450 --> 00:15:43,890
just does this rewriting for you so you

00:15:40,800 --> 00:15:45,780
can keep writing you know the same node

00:15:43,890 --> 00:15:47,410
path imports that you've been using or

00:15:45,780 --> 00:15:51,009
package imports

00:15:47,410 --> 00:15:53,139
and so again you don't need to use a

00:15:51,009 --> 00:15:54,910
build step and what this ends up looking

00:15:53,139 --> 00:15:56,889
like is if you don't use a built stuff

00:15:54,910 --> 00:15:58,269
it's really fast right it's basically

00:15:56,889 --> 00:16:01,089
takes as long as your static asset

00:15:58,269 --> 00:16:02,410
server takes to start up but you can

00:16:01,089 --> 00:16:05,559
still use typescript or Babel or any

00:16:02,410 --> 00:16:07,869
tool on your source directory and that's

00:16:05,559 --> 00:16:09,249
just as fast as they allow that to work

00:16:07,869 --> 00:16:10,659
so typescript has a really cool

00:16:09,249 --> 00:16:12,399
incremental mode where it'll basically

00:16:10,659 --> 00:16:15,129
just pick off where you pick up where

00:16:12,399 --> 00:16:16,959
you left off Babel is the one that we're

00:16:15,129 --> 00:16:18,879
still working on so they don't have any

00:16:16,959 --> 00:16:20,679
sorts of caching so when you run watch

00:16:18,879 --> 00:16:22,389
on a directory it'll run through all

00:16:20,679 --> 00:16:24,009
your files so we're not there yet for

00:16:22,389 --> 00:16:30,309
large projects but certainly for small

00:16:24,009 --> 00:16:32,859
projects so this is really cool right

00:16:30,309 --> 00:16:34,449
it's like totally changes how you do web

00:16:32,859 --> 00:16:37,839
development by reimagining what bundling

00:16:34,449 --> 00:16:39,879
needs to be in 2019 for the first time

00:16:37,839 --> 00:16:41,919
in almost a decade you don't need a

00:16:39,879 --> 00:16:42,939
bundler you have the choice to choose

00:16:41,919 --> 00:16:45,609
you know this thing that we've all

00:16:42,939 --> 00:16:48,519
needed for 10 years you have a chance to

00:16:45,609 --> 00:16:49,749
choose if you want it or not and just

00:16:48,519 --> 00:16:52,029
like a build process right you can

00:16:49,749 --> 00:16:53,499
choose to use a bundler if you want to

00:16:52,029 --> 00:16:55,079
like if you see the stock you're like

00:16:53,499 --> 00:16:57,549
you know what this sounds kind of crazy

00:16:55,079 --> 00:16:58,600
I'm good I've done my webpack time but

00:16:57,549 --> 00:17:00,339
putting my time I know it now I'm

00:16:58,600 --> 00:17:01,779
feeling comfortable that's fine keep

00:17:00,339 --> 00:17:04,360
doing that that's awesome good you know

00:17:01,779 --> 00:17:05,889
more power to you and if you're worried

00:17:04,360 --> 00:17:06,909
about maybe performance of what

00:17:05,889 --> 00:17:08,139
unbundled means which I don't have

00:17:06,909 --> 00:17:10,990
enough time to get into it could be you

00:17:08,139 --> 00:17:12,129
know some talk you know feel free to use

00:17:10,990 --> 00:17:13,659
a bundler as a production only

00:17:12,129 --> 00:17:15,579
optimization kind of going back to what

00:17:13,659 --> 00:17:16,839
we did all those years ago where it's

00:17:15,579 --> 00:17:18,579
this thing that you do in production to

00:17:16,839 --> 00:17:20,139
speed up the flow for users while still

00:17:18,579 --> 00:17:22,839
letting you have a really quick

00:17:20,139 --> 00:17:23,919
iteration cycle so it's all about just

00:17:22,839 --> 00:17:25,659
getting rid of this requirement that

00:17:23,919 --> 00:17:29,250
we've had for so long of this really

00:17:25,659 --> 00:17:31,179
complex tool chain and I want to end on

00:17:29,250 --> 00:17:34,029
just talking about what this means right

00:17:31,179 --> 00:17:35,950
and on this piece that uh Chris Collier

00:17:34,029 --> 00:17:39,879
wrote sounds like a few people have

00:17:35,950 --> 00:17:43,690
maybe read this what this piece was

00:17:39,879 --> 00:17:45,549
getting that was Chris saw a divide in

00:17:43,690 --> 00:17:46,870
the community and he went out and

00:17:45,549 --> 00:17:49,299
through interviews talked to different

00:17:46,870 --> 00:17:50,590
front of developers about where what

00:17:49,299 --> 00:17:52,750
they saw is kind of the way that the

00:17:50,590 --> 00:17:55,419
community was working in and what he

00:17:52,750 --> 00:17:57,700
documented was this I'm gonna use your

00:17:55,419 --> 00:18:02,480
reading of this to dig by

00:17:57,700 --> 00:18:05,390
he saw one group of developers who were

00:18:02,480 --> 00:18:06,890
primarily focused on JavaScript another

00:18:05,390 --> 00:18:10,100
group there was basically just everyone

00:18:06,890 --> 00:18:12,680
else and you don't have to look too far

00:18:10,100 --> 00:18:13,820
to find a culprit for this right CSS and

00:18:12,680 --> 00:18:15,650
HTML they haven't really changed that

00:18:13,820 --> 00:18:17,450
much over the last ten years but

00:18:15,650 --> 00:18:20,000
javascript has changed tremendously over

00:18:17,450 --> 00:18:21,410
the last decade right we're so far from

00:18:20,000 --> 00:18:24,230
what we were doing ten years ago when it

00:18:21,410 --> 00:18:25,760
comes to JavaScript and there's even a

00:18:24,230 --> 00:18:28,100
term for this right JavaScript fatigue

00:18:25,760 --> 00:18:29,030
it's the the exhaustion people feel

00:18:28,100 --> 00:18:30,920
trying to keep up with all the different

00:18:29,030 --> 00:18:35,890
tools and plugins and frameworks and

00:18:30,920 --> 00:18:38,690
libraries it can be exhausting right and

00:18:35,890 --> 00:18:39,860
this isn't just anecdotal NPM actually

00:18:38,690 --> 00:18:42,050
backed us up with some data from their

00:18:39,860 --> 00:18:44,180
yearly developer survey they said that

00:18:42,050 --> 00:18:46,280
all survey respondents that's that's

00:18:44,180 --> 00:18:48,170
there were all survey respondents let

00:18:46,280 --> 00:18:49,760
you see less tulane less configuration

00:18:48,170 --> 00:18:53,480
required to get started and better to

00:18:49,760 --> 00:18:54,680
documentation of all these tools and so

00:18:53,480 --> 00:18:56,780
you bring these two problems together

00:18:54,680 --> 00:18:58,640
and view them together and what you see

00:18:56,780 --> 00:19:00,980
is an entire group of developers being

00:18:58,640 --> 00:19:03,080
alienated by how complex and how much

00:19:00,980 --> 00:19:06,410
work and how much exhaustion comes from

00:19:03,080 --> 00:19:09,020
working with JavaScript and you know

00:19:06,410 --> 00:19:10,520
what can we do to fix this that isn't

00:19:09,020 --> 00:19:13,300
just another tool on top of another tool

00:19:10,520 --> 00:19:15,320
on top of the toroid tool how can we

00:19:13,300 --> 00:19:16,670
simplify what we've built up which has

00:19:15,320 --> 00:19:18,950
been incredibly powerful but how can we

00:19:16,670 --> 00:19:21,680
simplify it back to something that's

00:19:18,950 --> 00:19:23,930
less exhausting and less just complex

00:19:21,680 --> 00:19:26,210
and get rid of things that we don't

00:19:23,930 --> 00:19:28,100
longer need ten years in the future and

00:19:26,210 --> 00:19:31,130
just Rhys cope tooling to where it's

00:19:28,100 --> 00:19:31,610
needed today so that's what peak is all

00:19:31,130 --> 00:19:33,200
about

00:19:31,610 --> 00:19:34,880
I hope these tools are something that

00:19:33,200 --> 00:19:36,170
you can use today I hope you find

00:19:34,880 --> 00:19:37,310
something useful in this and getting

00:19:36,170 --> 00:19:39,890
back that choice of whether you want to

00:19:37,310 --> 00:19:42,350
bundler or not and if you want to come

00:19:39,890 --> 00:19:43,790
help because open-source jump in it's

00:19:42,350 --> 00:19:46,280
really exciting there's a ton of

00:19:43,790 --> 00:19:48,500
excitement in the space of unbundled and

00:19:46,280 --> 00:19:49,580
unbuilt and what that all means so I'd

00:19:48,500 --> 00:19:53,740
really encourage you all to check it out

00:19:49,580 --> 00:19:53,740
and thank you so much for having me

00:19:55,409 --> 00:20:02,770
okay so first question here does pica

00:19:59,830 --> 00:20:04,750
have a COI client for search for search

00:20:02,770 --> 00:20:05,650
no it does not okay that's a really good

00:20:04,750 --> 00:20:07,480
idea all right

00:20:05,650 --> 00:20:09,400
it's primarily the website right now

00:20:07,480 --> 00:20:13,900
okay gotcha

00:20:09,400 --> 00:20:15,880
all right so I'm on that vein of topics

00:20:13,900 --> 00:20:17,320
um do you have a wish list for new

00:20:15,880 --> 00:20:19,750
features you could ship tomorrow if you

00:20:17,320 --> 00:20:22,029
could snap your fingers that's a great

00:20:19,750 --> 00:20:25,960
question I do it I'm trying to think of

00:20:22,029 --> 00:20:27,340
what that would look like so one thing

00:20:25,960 --> 00:20:28,840
that I'm really interested in and I

00:20:27,340 --> 00:20:30,940
didn't actually get to talk about this

00:20:28,840 --> 00:20:32,289
in the talk but one of the things we

00:20:30,940 --> 00:20:35,260
just launched last week maybe you saw it

00:20:32,289 --> 00:20:36,520
was pika CDN and it's a CDN of all these

00:20:35,260 --> 00:20:37,240
it's basically a combination of all

00:20:36,520 --> 00:20:38,919
these things together

00:20:37,240 --> 00:20:41,380
it's a every package that we have

00:20:38,919 --> 00:20:43,240
indexed on the site run through and pick

00:20:41,380 --> 00:20:44,470
a web to basically give you a web ready

00:20:43,240 --> 00:20:46,899
package that's hosted so it's like

00:20:44,470 --> 00:20:47,980
hosted be collab it's really easy to it

00:20:46,899 --> 00:20:48,940
basically it's like if any of this to

00:20:47,980 --> 00:20:51,159
lean part of this seems too complicated

00:20:48,940 --> 00:20:53,080
like just feel free to get started and

00:20:51,159 --> 00:20:55,750
pull something directly from the CDN use

00:20:53,080 --> 00:20:59,080
it in a code pen on glitch you know in

00:20:55,750 --> 00:21:01,179
your own site I want to see how we can

00:20:59,080 --> 00:21:03,190
make that a little more connected to the

00:21:01,179 --> 00:21:05,080
dev experience where there's another

00:21:03,190 --> 00:21:06,820
tool that we built that's more targeted

00:21:05,080 --> 00:21:08,770
to package creators that helps you shift

00:21:06,820 --> 00:21:11,740
modern JavaScript how could we use that

00:21:08,770 --> 00:21:12,850
to maybe power what the CDN deploys so

00:21:11,740 --> 00:21:13,809
that that could be a little more modern

00:21:12,850 --> 00:21:15,490
a little more faster a little more

00:21:13,809 --> 00:21:16,870
optimized so kind of connecting those

00:21:15,490 --> 00:21:18,460
who we've been focused on the developer

00:21:16,870 --> 00:21:20,200
the consumer and the developer the

00:21:18,460 --> 00:21:21,970
package creator and I want to see if we

00:21:20,200 --> 00:21:25,419
can bring those together all right

00:21:21,970 --> 00:21:26,890
hate see this again some more questions

00:21:25,419 --> 00:21:30,279
here see if we get any questions on

00:21:26,890 --> 00:21:34,090
Twitter okay so another question I have

00:21:30,279 --> 00:21:37,000
here um so I mean what does an ideal web

00:21:34,090 --> 00:21:40,270
bundle ecosystem look like to you a web

00:21:37,000 --> 00:21:41,890
bundle you go system mm-hmm so I think

00:21:40,270 --> 00:21:44,020
what gets me most excited about this is

00:21:41,890 --> 00:21:46,360
the idea and it goes back to that kind

00:21:44,020 --> 00:21:48,730
of like alienating anyone getting

00:21:46,360 --> 00:21:50,620
started or someone who maybe isn't as

00:21:48,730 --> 00:21:52,750
experienced with JavaScript the idea

00:21:50,620 --> 00:21:55,809
that you don't need these complex tools

00:21:52,750 --> 00:21:57,250
to get started so pica has been going

00:21:55,809 --> 00:21:59,020
for about eight months now the website

00:21:57,250 --> 00:22:00,899
that's all unbundled all built

00:21:59,020 --> 00:22:02,679
I haven't had to touch web pack yet

00:22:00,899 --> 00:22:04,270
which has been really nice for just

00:22:02,679 --> 00:22:05,910
quick iteration but I'm sure there'll be

00:22:04,270 --> 00:22:06,990
a day where I want to do something and

00:22:05,910 --> 00:22:08,820
and maybe I do need to reach for a

00:22:06,990 --> 00:22:10,380
bundler maybe the site gets too big or

00:22:08,820 --> 00:22:12,480
maybe there's some reason we're even

00:22:10,380 --> 00:22:14,040
just for production optimization reasons

00:22:12,480 --> 00:22:15,990
I want to I want to do some smart

00:22:14,040 --> 00:22:18,180
bundling I didn't have to make that

00:22:15,990 --> 00:22:19,530
choice day one I mean but I kind of push

00:22:18,180 --> 00:22:20,970
that out so especially if that's a

00:22:19,530 --> 00:22:23,190
really intimidating choice to make

00:22:20,970 --> 00:22:24,510
the idea of just don't touch it then you

00:22:23,190 --> 00:22:26,250
know and when you get to that point when

00:22:24,510 --> 00:22:28,520
that makes sense for you your company

00:22:26,250 --> 00:22:30,900
your project then you can take that time

00:22:28,520 --> 00:22:32,580
so that's I I still I don't see bumblers

00:22:30,900 --> 00:22:33,990
going away I don't see one baubles not

00:22:32,580 --> 00:22:35,370
making sense but it's it's more of a

00:22:33,990 --> 00:22:38,120
reframing if you don't need to do

00:22:35,370 --> 00:22:43,200
development with them so to speak okay

00:22:38,120 --> 00:22:46,980
all right so what what's the performance

00:22:43,200 --> 00:22:50,010
of unbundled versus unbundled yeah that

00:22:46,980 --> 00:22:52,920
could be its own talk um it depends this

00:22:50,010 --> 00:22:54,600
is kind of the answer it really depends

00:22:52,920 --> 00:22:56,670
so it's really interesting you ever want

00:22:54,600 --> 00:22:58,980
to look into this it changes what you

00:22:56,670 --> 00:23:00,240
need to think about because you get a

00:22:58,980 --> 00:23:02,340
lot of really good cash in by just

00:23:00,240 --> 00:23:04,470
having a lot of smaller files and http2

00:23:02,340 --> 00:23:05,790
is a way for you know the browser to

00:23:04,470 --> 00:23:07,500
load these files in parallel without too

00:23:05,790 --> 00:23:10,260
much of a performance hit as long as

00:23:07,500 --> 00:23:12,660
they're in parallel what you get bitten

00:23:10,260 --> 00:23:14,280
by is long chains of dependencies so

00:23:12,660 --> 00:23:16,140
well you really need to worry about is

00:23:14,280 --> 00:23:18,030
what is your longest chain from start of

00:23:16,140 --> 00:23:21,240
the page load down to the like lowest

00:23:18,030 --> 00:23:22,560
dependency in your in your tree that's

00:23:21,240 --> 00:23:24,420
what becomes much more of an intuition

00:23:22,560 --> 00:23:26,250
and then how do you mitigate that you

00:23:24,420 --> 00:23:27,810
know you can reach for a bundler you

00:23:26,250 --> 00:23:28,800
could also put some prefetch tags so if

00:23:27,810 --> 00:23:31,290
you know that one of those lower

00:23:28,800 --> 00:23:32,610
dependencies like a CSS library is

00:23:31,290 --> 00:23:34,710
always going to be is no matter what you

00:23:32,610 --> 00:23:36,270
could just put a prefetch tag somewhere

00:23:34,710 --> 00:23:38,550
on the page and then it's like kind of

00:23:36,270 --> 00:23:40,110
like a shortcut into that tree where now

00:23:38,550 --> 00:23:41,220
while you're loading the top of the tree

00:23:40,110 --> 00:23:43,740
you kind of start in the middle two and

00:23:41,220 --> 00:23:45,000
they both do one of these so it's really

00:23:43,740 --> 00:23:46,980
it's like it just it's a different set

00:23:45,000 --> 00:23:50,370
of problems and it's really interesting

00:23:46,980 --> 00:23:53,400
I'm like how do you solve those so what

00:23:50,370 --> 00:23:55,680
in terms of I guess in terms of the

00:23:53,400 --> 00:23:58,080
workload and things that you have to do

00:23:55,680 --> 00:24:00,420
and your wish list if someone were to

00:23:58,080 --> 00:24:01,680
jump into your project today what do you

00:24:00,420 --> 00:24:05,430
think that you would need the most help

00:24:01,680 --> 00:24:07,530
with right now a lot of documentation is

00:24:05,430 --> 00:24:09,390
missing which is both it's probably

00:24:07,530 --> 00:24:10,620
harder to jump in because of that I've

00:24:09,390 --> 00:24:12,090
just been working on these things and

00:24:10,620 --> 00:24:13,770
just it's only recently taken off so

00:24:12,090 --> 00:24:15,090
that's actually I would've been a better

00:24:13,770 --> 00:24:16,999
answer what do I need to do next

00:24:15,090 --> 00:24:18,739
definitely document these things

00:24:16,999 --> 00:24:21,349
and then how you can work with them and

00:24:18,739 --> 00:24:22,759
build on top of them which is also hard

00:24:21,349 --> 00:24:24,859
to then you know jump into over over

00:24:22,759 --> 00:24:27,259
that document right so I I needed that's

00:24:24,859 --> 00:24:29,179
my problem I gotta fix that but I'm it's

00:24:27,259 --> 00:24:31,459
all in github they're all just coming

00:24:29,179 --> 00:24:32,779
repos you can come into them there's

00:24:31,459 --> 00:24:35,179
really cool development going on in Pico

00:24:32,779 --> 00:24:37,129
Web to see how we can handle common

00:24:35,179 --> 00:24:39,409
jeaious packages as well if we could do

00:24:37,129 --> 00:24:41,089
something to install those as ESM it's

00:24:39,409 --> 00:24:42,409
some sort of wrapper probably get a lot

00:24:41,089 --> 00:24:44,269
of the performance you know tree shaking

00:24:42,409 --> 00:24:47,239
the fixes but you would certainly get

00:24:44,269 --> 00:24:48,409
something that would run and then the

00:24:47,239 --> 00:24:49,969
other cool thing that's going on right

00:24:48,409 --> 00:24:51,709
now is an idea of one thing you don't

00:24:49,969 --> 00:24:53,569
get is tree shaking on your dependencies

00:24:51,709 --> 00:24:56,599
right because we install the whole

00:24:53,569 --> 00:24:58,099
package so if we install all of lodash

00:24:56,599 --> 00:24:59,629
for example it could be a big package

00:24:58,099 --> 00:25:01,609
you only need to be cached once but

00:24:59,629 --> 00:25:03,769
still it's you know it's a file with

00:25:01,609 --> 00:25:05,809
everything in it the next feature that's

00:25:03,769 --> 00:25:07,579
really exciting is the idea of before

00:25:05,809 --> 00:25:09,679
build scanning your imports and

00:25:07,579 --> 00:25:11,809
basically doing the tree shake and as a

00:25:09,679 --> 00:25:13,249
part of building those new packages so

00:25:11,809 --> 00:25:15,469
if you can see if the tool can see that

00:25:13,249 --> 00:25:18,319
your source only needs to add method off

00:25:15,469 --> 00:25:20,149
of low - then we could install just that

00:25:18,319 --> 00:25:22,189
add method and get rid of the rest of

00:25:20,149 --> 00:25:23,329
the - that you're not even using so

00:25:22,189 --> 00:25:24,379
there's some things going on there that

00:25:23,329 --> 00:25:25,819
are more implementation details which

00:25:24,379 --> 00:25:26,899
are you know they're just community

00:25:25,819 --> 00:25:28,639
projects that's been really cool to see

00:25:26,899 --> 00:25:30,889
people jump in and work on those well

00:25:28,639 --> 00:25:33,319
could you just define what she checking

00:25:30,889 --> 00:25:35,119
is yes and I've used that word way too

00:25:33,319 --> 00:25:37,219
many times - about to find it it is the

00:25:35,119 --> 00:25:40,099
idea of actually it was a great example

00:25:37,219 --> 00:25:41,689
so if you only use one method off of low

00:25:40,099 --> 00:25:44,299
- you don't need to bring all of low -

00:25:41,689 --> 00:25:46,429
into your site you can just with the

00:25:44,299 --> 00:25:47,689
proper tool name the tooling can just

00:25:46,429 --> 00:25:49,249
take out the rest of it so it's

00:25:47,689 --> 00:25:50,959
tree-shaking I guess is the idea of like

00:25:49,249 --> 00:25:52,359
shaking it and getting rid of everything

00:25:50,959 --> 00:25:54,199
that's not necessary that's not really

00:25:52,359 --> 00:25:56,929
that's how I've always pictured I don't

00:25:54,199 --> 00:25:59,029
know if that's actually official but the

00:25:56,929 --> 00:26:04,279
idea that you can get rid of debt gets

00:25:59,029 --> 00:26:06,499
dead code elimination elimination and so

00:26:04,279 --> 00:26:08,239
you also just said to it yet pika

00:26:06,499 --> 00:26:09,829
recently just really took off and the

00:26:08,239 --> 00:26:11,599
terms of my popularity like folks coming

00:26:09,829 --> 00:26:14,569
to check it out what what do you think

00:26:11,599 --> 00:26:16,939
what happened a few things the first

00:26:14,569 --> 00:26:19,099
thing we launched was a tool for package

00:26:16,939 --> 00:26:21,529
creators that's naturally a smaller

00:26:19,099 --> 00:26:24,379
group picot level only came after and

00:26:21,529 --> 00:26:26,779
around that time I mean in the last six

00:26:24,379 --> 00:26:28,969
seven eight months everyone's been

00:26:26,779 --> 00:26:30,230
looking at this a bit more so it's just

00:26:28,969 --> 00:26:31,370
naturally kind of

00:26:30,230 --> 00:26:34,100
it's like it's more kind of on

00:26:31,370 --> 00:26:35,540
everyone's minds as we keep moving down

00:26:34,100 --> 00:26:37,270
this road of modern JavaScript that we

00:26:35,540 --> 00:26:39,380
write and then we keep having to go back

00:26:37,270 --> 00:26:42,110
for the packages we create or the

00:26:39,380 --> 00:26:43,250
packages we consume you know I think

00:26:42,110 --> 00:26:44,720
people are starting to ask more of those

00:26:43,250 --> 00:26:46,669
questions of why do we why do we do all

00:26:44,720 --> 00:26:49,490
this and hopefully this is another look

00:26:46,669 --> 00:26:50,890
at that well thank you so much friend

00:26:49,490 --> 00:26:54,140
thank you

00:26:50,890 --> 00:27:07,299
[Applause]

00:26:54,140 --> 00:27:07,299

YouTube URL: https://www.youtube.com/watch?v=2Wwx-lF5NhE


