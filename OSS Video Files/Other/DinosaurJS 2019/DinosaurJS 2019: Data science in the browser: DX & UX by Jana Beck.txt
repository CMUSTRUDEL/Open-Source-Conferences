Title: DinosaurJS 2019: Data science in the browser: DX & UX by Jana Beck
Publication date: 2019-08-19
Playlist: DinosaurJS 2019
Description: 
	DinosaurJS 2019: Data science in the browser: DX & UX by Jana Beck
Captions: 
	00:00:01,550 --> 00:00:06,490
[Applause]

00:00:04,100 --> 00:00:08,880
[Music]

00:00:06,490 --> 00:00:10,230
[Applause]

00:00:08,880 --> 00:00:14,270
[Music]

00:00:10,230 --> 00:00:18,180
[Applause]

00:00:14,270 --> 00:00:20,610
all righty your job doing this is to

00:00:18,180 --> 00:00:23,220
pray for my VPN connection so that I can

00:00:20,610 --> 00:00:25,230
show you some I'm like tethering to my

00:00:23,220 --> 00:00:28,680
phone because the Wi-Fi won't let me get

00:00:25,230 --> 00:00:32,009
on my VPN for my work-related demos so

00:00:28,680 --> 00:00:34,380
data science in the browser so I'm Jana

00:00:32,009 --> 00:00:37,530
I'm a data visualization engineer at

00:00:34,380 --> 00:00:42,510
stitch fix if you haven't heard of us we

00:00:37,530 --> 00:00:44,040
are a online personal styling company so

00:00:42,510 --> 00:00:45,989
basically you sign up you fill out a

00:00:44,040 --> 00:00:48,690
style profile we match you with a

00:00:45,989 --> 00:00:50,370
stylist who picks five things sends them

00:00:48,690 --> 00:00:52,680
to you you try them on in the comfort of

00:00:50,370 --> 00:00:57,480
your own home and you only pay for what

00:00:52,680 --> 00:01:00,440
you want to keep the company it's a

00:00:57,480 --> 00:01:03,690
public company now it's been around

00:01:00,440 --> 00:01:06,990
seven or eight years I think and it's

00:01:03,690 --> 00:01:08,939
been very data science focus from very

00:01:06,990 --> 00:01:11,009
early on so data science is integrated

00:01:08,939 --> 00:01:12,900
very closely into almost every aspect of

00:01:11,009 --> 00:01:14,729
the business where we have our own

00:01:12,900 --> 00:01:16,650
branch of the organization we're not

00:01:14,729 --> 00:01:18,899
embedded under engineering or under

00:01:16,650 --> 00:01:21,719
business analytics like data science is

00:01:18,899 --> 00:01:23,280
and some other organizations so just a

00:01:21,719 --> 00:01:24,810
smattering of all the places where we

00:01:23,280 --> 00:01:26,399
use data science I'm gonna rush through

00:01:24,810 --> 00:01:29,399
some of this intro because we don't have

00:01:26,399 --> 00:01:31,139
a ton of time with 25 minutes these are

00:01:29,399 --> 00:01:33,170
the slides are not up on the web yet but

00:01:31,139 --> 00:01:36,420
I will be deploying them later

00:01:33,170 --> 00:01:37,619
so and I will tweet a link out so at

00:01:36,420 --> 00:01:39,509
some point if you want to come back to

00:01:37,619 --> 00:01:41,189
them there's a really cool animated tour

00:01:39,509 --> 00:01:44,310
of our algorithms department that you

00:01:41,189 --> 00:01:46,200
can check out so our team as I said

00:01:44,310 --> 00:01:48,959
we're organized and our own branch of

00:01:46,200 --> 00:01:51,810
the company the data scientists who are

00:01:48,959 --> 00:01:53,670
ABCD here are organized in verticals

00:01:51,810 --> 00:01:56,039
according to parts of the business so

00:01:53,670 --> 00:01:57,719
client acquisition styling which is

00:01:56,039 --> 00:02:00,200
client stylist matching and

00:01:57,719 --> 00:02:03,209
recommendations inside our styling

00:02:00,200 --> 00:02:05,399
infrastructure the merchandising one of

00:02:03,209 --> 00:02:07,740
the cool things we do in merch is design

00:02:05,399 --> 00:02:10,110
new clothes with by like combining the

00:02:07,740 --> 00:02:11,640
successful features of some of the

00:02:10,110 --> 00:02:14,550
styles that do the best with our clients

00:02:11,640 --> 00:02:17,430
and predicting what will be even better

00:02:14,550 --> 00:02:19,230
that's really fun and then we have this

00:02:17,430 --> 00:02:21,120
data platform team that I'm part of

00:02:19,230 --> 00:02:23,640
we're about 25 on data platform now

00:02:21,120 --> 00:02:26,940
bunch of sub teams I'm on a four-person

00:02:23,640 --> 00:02:28,050
sub team doing front-end work so our

00:02:26,940 --> 00:02:30,000
philosophy

00:02:28,050 --> 00:02:31,170
that's the tricks in the algo Department

00:02:30,000 --> 00:02:33,540
which is what we call our data science

00:02:31,170 --> 00:02:35,430
department is that we had we hire

00:02:33,540 --> 00:02:37,470
full-stack data scientists so they are

00:02:35,430 --> 00:02:41,520
responsible for production izing their

00:02:37,470 --> 00:02:43,500
own work this is not super common a lot

00:02:41,520 --> 00:02:45,630
of a lot of places there's a handoff

00:02:43,500 --> 00:02:47,010
like data scientists kind of develop

00:02:45,630 --> 00:02:49,470
things and then handoff to data

00:02:47,010 --> 00:02:52,680
engineers who implement them but we

00:02:49,470 --> 00:02:55,350
don't work that way our data platform

00:02:52,680 --> 00:02:57,150
team instead we work on creating tools

00:02:55,350 --> 00:02:59,580
that make it easy for our data

00:02:57,150 --> 00:03:02,040
scientists who are not expert software

00:02:59,580 --> 00:03:05,520
engineers to put together and

00:03:02,040 --> 00:03:09,360
productionize their models api's and

00:03:05,520 --> 00:03:11,490
even front-end applications to surface

00:03:09,360 --> 00:03:13,500
things like dashboards and whatever to

00:03:11,490 --> 00:03:15,810
their business partners so we kind of

00:03:13,500 --> 00:03:18,450
co-developed these apps with data

00:03:15,810 --> 00:03:20,310
scientists one of the first things I

00:03:18,450 --> 00:03:23,010
worked on when I got to six two years

00:03:20,310 --> 00:03:24,360
ago was building out a lot of reusable

00:03:23,010 --> 00:03:26,460
react components and we're gonna look at

00:03:24,360 --> 00:03:29,010
a couple of those today most of ours are

00:03:26,460 --> 00:03:30,930
pretty boring they're like - they're

00:03:29,010 --> 00:03:32,700
boring a non presentational they're

00:03:30,930 --> 00:03:34,110
mostly for like fetching and saving data

00:03:32,700 --> 00:03:36,240
and stuff like that they just make it

00:03:34,110 --> 00:03:38,700
really easy to get an app up and running

00:03:36,240 --> 00:03:41,030
really quickly and we also have a

00:03:38,700 --> 00:03:43,530
wrapper around crate react app that

00:03:41,030 --> 00:03:45,840
customizes the outpointed by installing

00:03:43,530 --> 00:03:47,730
our private dependencies making the

00:03:45,840 --> 00:03:50,550
boilerplate something that like actually

00:03:47,730 --> 00:03:51,930
makes sense for a data scientist who

00:03:50,550 --> 00:03:53,670
wants to get started building an app

00:03:51,930 --> 00:03:58,440
based on a table and our table data

00:03:53,670 --> 00:04:00,209
warehouse things like that so long intro

00:03:58,440 --> 00:04:01,650
right we are gonna talk about data

00:04:00,209 --> 00:04:03,110
science in the browser and we're gonna

00:04:01,650 --> 00:04:06,150
talk about dimensionality reduction

00:04:03,110 --> 00:04:08,100
components in particular we're going to

00:04:06,150 --> 00:04:12,090
talk about two algorithms TCE and you

00:04:08,100 --> 00:04:14,070
map this says T stochastic neighbors and

00:04:12,090 --> 00:04:16,380
bedding and uniform manifold

00:04:14,070 --> 00:04:17,850
approximation and projection not going

00:04:16,380 --> 00:04:19,650
to go into the math I'm not the best

00:04:17,850 --> 00:04:22,560
person to do that and we only have 25

00:04:19,650 --> 00:04:24,510
minutes but you do one need to know a

00:04:22,560 --> 00:04:26,400
little bit about what to mention ality

00:04:24,510 --> 00:04:27,000
reduction is so let's start with this

00:04:26,400 --> 00:04:30,810
table

00:04:27,000 --> 00:04:34,260
we've got foods and MODY foods and an

00:04:30,810 --> 00:04:36,300
average weight per item so one grape is

00:04:34,260 --> 00:04:38,610
really small a watermelon is really big

00:04:36,300 --> 00:04:40,590
this is in grams and average calories

00:04:38,610 --> 00:04:42,540
per item and just like Google B's

00:04:40,590 --> 00:04:46,410
this example we can make a scatterplot

00:04:42,540 --> 00:04:47,970
of this right and you know we think

00:04:46,410 --> 00:04:49,890
about scatterplot as showing us

00:04:47,970 --> 00:04:52,050
correlation between variables like this

00:04:49,890 --> 00:04:53,850
what weight in calories per item but

00:04:52,050 --> 00:04:55,620
it's also showing us relationships

00:04:53,850 --> 00:04:59,130
between items and the data set right

00:04:55,620 --> 00:05:02,640
it's helping us see that like here's our

00:04:59,130 --> 00:05:04,920
kind of like fatty items area a bunch of

00:05:02,640 --> 00:05:06,870
the fruits are right here these are

00:05:04,920 --> 00:05:08,550
things that are pretty low in calories

00:05:06,870 --> 00:05:12,480
but tend to be like large pride um I

00:05:08,550 --> 00:05:14,550
think that one's a cantaloupe so you

00:05:12,480 --> 00:05:16,830
know we also see things clustered

00:05:14,550 --> 00:05:18,240
together that are share similar

00:05:16,830 --> 00:05:22,140
attributes at least in terms of what

00:05:18,240 --> 00:05:24,840
we're looking at if we go into three

00:05:22,140 --> 00:05:26,820
columns here carbs protein and fat the

00:05:24,840 --> 00:05:28,620
three major macronutrients we could also

00:05:26,820 --> 00:05:30,630
make a plot of this we'd have to do it

00:05:28,620 --> 00:05:32,340
in three dimensions it'd be a little bit

00:05:30,630 --> 00:05:33,480
trickier to like visually explore

00:05:32,340 --> 00:05:36,030
because you'd really want to do it

00:05:33,480 --> 00:05:39,480
interactive where you could you know

00:05:36,030 --> 00:05:40,920
like change the perspective because 3d

00:05:39,480 --> 00:05:42,960
is difficult you can't have things that

00:05:40,920 --> 00:05:44,340
are hidden you know basically because

00:05:42,960 --> 00:05:46,500
we're doing 3d on a two-dimensional

00:05:44,340 --> 00:05:48,840
screen

00:05:46,500 --> 00:05:52,500
so what T's me and you map do is they

00:05:48,840 --> 00:05:55,590
let you take datasets with many many

00:05:52,500 --> 00:05:58,230
many many more columns than this up to

00:05:55,590 --> 00:06:01,820
hundreds or as we'll see in a bit

00:05:58,230 --> 00:06:04,250
yeah hundreds almost a thousand and

00:06:01,820 --> 00:06:07,440
apply this algorithm and then be able to

00:06:04,250 --> 00:06:09,480
group them on a two-dimensional plane

00:06:07,440 --> 00:06:11,700
sometimes three-dimensional too so that

00:06:09,480 --> 00:06:14,100
you can see similar items together and

00:06:11,700 --> 00:06:15,600
have an understanding of this high

00:06:14,100 --> 00:06:19,470
dimensional data set that you're looking

00:06:15,600 --> 00:06:22,590
at so the canonical data set that we can

00:06:19,470 --> 00:06:24,900
take a look at for this is the emne

00:06:22,590 --> 00:06:26,670
stand drawn digits data set so this is

00:06:24,900 --> 00:06:29,940
what the actual digits look like or a

00:06:26,670 --> 00:06:31,950
selection of them so these are I don't

00:06:29,940 --> 00:06:35,070
know where they got them but somebody

00:06:31,950 --> 00:06:38,910
got them a bunch of hand-drawn digits 0

00:06:35,070 --> 00:06:43,560
through 9 each digit is an image that's

00:06:38,910 --> 00:06:47,730
28 by 28 pixels and so what that's going

00:06:43,560 --> 00:06:51,090
to end up being is 784 dimensions so

00:06:47,730 --> 00:06:53,460
here's one of the images so basically

00:06:51,090 --> 00:06:54,449
what we're doing is slicing it up 28 by

00:06:53,460 --> 00:06:58,830
00:06:54,449 --> 00:07:02,069
and so if we look at you know column

00:06:58,830 --> 00:07:05,430
eight row 7 that would be coded in this

00:07:02,069 --> 00:07:08,160
dataset as a zero for white and column 9

00:07:05,430 --> 00:07:10,560
row 7 is a 1 for black so that's how

00:07:08,160 --> 00:07:13,020
this data set works and so this is a

00:07:10,560 --> 00:07:14,400
high dimensional data set with 784

00:07:13,020 --> 00:07:19,440
dimensions because if we want to compare

00:07:14,400 --> 00:07:21,180
all of the images we have 784 little

00:07:19,440 --> 00:07:23,880
squares here to compare from image to

00:07:21,180 --> 00:07:29,190
image is it 0 or 1 on this image and on

00:07:23,880 --> 00:07:32,819
that image so when you put this image

00:07:29,190 --> 00:07:34,590
data into one of these algorithms this

00:07:32,819 --> 00:07:37,139
is an example result so this is the

00:07:34,590 --> 00:07:41,490
tensorflow JavaScript implementation of

00:07:37,139 --> 00:07:46,250
TCE on the emne status set here since

00:07:41,490 --> 00:07:49,380
the data set is labeled we color code by

00:07:46,250 --> 00:07:51,090
what what digit it actually is and so

00:07:49,380 --> 00:07:53,520
you see that it works pretty well you

00:07:51,090 --> 00:07:54,840
get these pretty you know with a few

00:07:53,520 --> 00:07:57,240
spots here and there you get these

00:07:54,840 --> 00:08:03,630
clusters of the digits that are actually

00:07:57,240 --> 00:08:05,759
the same the same number so now we're

00:08:03,630 --> 00:08:07,259
talking about component izing this i

00:08:05,759 --> 00:08:08,840
gave a talk a while ago called better

00:08:07,259 --> 00:08:11,190
living through components and this is

00:08:08,840 --> 00:08:14,789
doing components in particular for

00:08:11,190 --> 00:08:16,710
computation now the reason for doing

00:08:14,789 --> 00:08:20,639
this like the reason there's a talk here

00:08:16,710 --> 00:08:23,370
is because we can't just take one of

00:08:20,639 --> 00:08:25,560
these libraries and like the TCE the

00:08:23,370 --> 00:08:27,419
sensor flow TC library or the more

00:08:25,560 --> 00:08:29,639
recent u map implementation in

00:08:27,419 --> 00:08:33,089
javascript and just kind of dump it into

00:08:29,639 --> 00:08:35,779
an app because first thing these things

00:08:33,089 --> 00:08:38,789
are extremely computationally expensive

00:08:35,779 --> 00:08:40,620
even with all the tools i'm going to

00:08:38,789 --> 00:08:42,390
show you by the end of the day when i'm

00:08:40,620 --> 00:08:43,979
working on this stuff i and one of those

00:08:42,390 --> 00:08:46,110
people that i like to not be at my desk

00:08:43,979 --> 00:08:49,170
in my open plan office like go hide in a

00:08:46,110 --> 00:08:51,149
cubby somewhere and but my computer gets

00:08:49,170 --> 00:08:54,390
so hot that by the end by like mid

00:08:51,149 --> 00:08:56,190
afternoon I'm tethered to my desk and it

00:08:54,390 --> 00:08:57,990
doesn't even charge because max stopped

00:08:56,190 --> 00:08:59,370
charging when they overheat even if

00:08:57,990 --> 00:09:01,829
they're plugged in it'll just stay

00:08:59,370 --> 00:09:03,900
steady state or sometimes even keep

00:09:01,829 --> 00:09:06,930
dropping charge like while I'm working

00:09:03,900 --> 00:09:07,459
it's pretty incredible so we need to

00:09:06,930 --> 00:09:09,800
really

00:09:07,459 --> 00:09:12,829
is that not everyone even has a 15-inch

00:09:09,800 --> 00:09:14,929
MacBook Pro right and we need to

00:09:12,829 --> 00:09:16,790
minimize the compute time because we

00:09:14,929 --> 00:09:18,589
don't want a user waiting forever for

00:09:16,790 --> 00:09:19,759
one of these results to actually see

00:09:18,589 --> 00:09:23,119
some things and we wanted to happen

00:09:19,759 --> 00:09:26,389
before they turn 100 and do right so how

00:09:23,119 --> 00:09:28,429
do we do this so the biggest way

00:09:26,389 --> 00:09:30,949
although this doesn't apply to the you

00:09:28,429 --> 00:09:33,920
map is computing on the GPU and in

00:09:30,949 --> 00:09:35,689
particular even more important doing

00:09:33,920 --> 00:09:38,329
that outside of your main application

00:09:35,689 --> 00:09:39,709
code so doing it in a web worker this

00:09:38,329 --> 00:09:42,790
requires doing it in an off-screen

00:09:39,709 --> 00:09:45,170
canvas we'll talk about what that is and

00:09:42,790 --> 00:09:47,929
caching our data doesn't actually change

00:09:45,170 --> 00:09:49,550
super often pretty common in a data

00:09:47,929 --> 00:09:52,040
science board a lot of things run on

00:09:49,550 --> 00:09:53,329
nightly jobs so you know if a user is

00:09:52,040 --> 00:09:55,279
using an application and they're just

00:09:53,329 --> 00:09:57,829
going back and forth within the space

00:09:55,279 --> 00:10:00,410
between two pages within the space of a

00:09:57,829 --> 00:10:02,209
few minutes there's no reason to

00:10:00,410 --> 00:10:07,459
recompute they're getting the same input

00:10:02,209 --> 00:10:08,689
data so web workers these are if you're

00:10:07,459 --> 00:10:10,550
not familiar with them this is a way to

00:10:08,689 --> 00:10:13,100
do concurrency and JavaScript which is

00:10:10,550 --> 00:10:15,199
always single threaded so they are in a

00:10:13,100 --> 00:10:18,170
different bundle separately executing

00:10:15,199 --> 00:10:21,139
from your main app and there's no Dom in

00:10:18,170 --> 00:10:22,939
a worker you pass messages back and

00:10:21,139 --> 00:10:25,519
forth and these are actually copied you

00:10:22,939 --> 00:10:29,360
don't share data between your main app

00:10:25,519 --> 00:10:31,459
and the worker and more like

00:10:29,360 --> 00:10:33,740
frustratingly sometimes you have to pass

00:10:31,459 --> 00:10:36,079
certain types of messages back and forth

00:10:33,740 --> 00:10:39,160
they have to be serializable there's a

00:10:36,079 --> 00:10:41,839
link here to the algorithm that's used

00:10:39,160 --> 00:10:44,360
basically non-exhaustive list of what

00:10:41,839 --> 00:10:46,369
you can are like things that are pretty

00:10:44,360 --> 00:10:49,579
obvious like anything primitive dates

00:10:46,369 --> 00:10:52,069
blobs array buffers what's not and is

00:10:49,579 --> 00:10:54,559
frustratingly not is Dom nodes would be

00:10:52,069 --> 00:10:56,509
really great if you could like you know

00:10:54,559 --> 00:10:57,889
pass a canvas over render stuff into it

00:10:56,509 --> 00:11:00,290
into a worker and then bring it back

00:10:57,889 --> 00:11:01,819
when it's done can't do that errors

00:11:00,290 --> 00:11:03,290
which makes handling errors in the

00:11:01,819 --> 00:11:04,850
workers difficult because you can't pass

00:11:03,290 --> 00:11:06,559
them back to the main app to get

00:11:04,850 --> 00:11:08,929
reported out to the user of the

00:11:06,559 --> 00:11:11,329
developer and also very frustratingly

00:11:08,929 --> 00:11:13,819
functions obviously in JavaScript since

00:11:11,329 --> 00:11:16,069
we can do closures and pass functions

00:11:13,819 --> 00:11:18,049
around all the all over the place as

00:11:16,069 --> 00:11:19,790
first-class citizens it can be very

00:11:18,049 --> 00:11:21,209
frustrating to not be able to like pass

00:11:19,790 --> 00:11:25,050
some kind of callback into your

00:11:21,209 --> 00:11:28,499
worker so the basic template for using

00:11:25,050 --> 00:11:32,040
one is you just set up function on this

00:11:28,499 --> 00:11:33,240
on the workers on message this is just

00:11:32,040 --> 00:11:35,819
an example of how most of these

00:11:33,240 --> 00:11:39,990
libraries work it's not exact code of

00:11:35,819 --> 00:11:42,059
any particular library but we call the

00:11:39,990 --> 00:11:44,160
result of a tea sneer you map out grow

00:11:42,059 --> 00:11:46,679
them and imbedding so you usually just

00:11:44,160 --> 00:11:48,029
create them better and I should have

00:11:46,679 --> 00:11:50,279
called that in better not embedding and

00:11:48,029 --> 00:11:55,649
then you get out the coordinates of the

00:11:50,279 --> 00:11:59,399
result and pass those back in react oh

00:11:55,649 --> 00:12:02,309
I'm gonna breeze through this applies to

00:11:59,399 --> 00:12:04,379
any other framework library pretty much

00:12:02,309 --> 00:12:07,110
to like view basically just how you

00:12:04,379 --> 00:12:08,759
integrate this with the lifecycle you

00:12:07,110 --> 00:12:10,829
know creating your worker when you first

00:12:08,759 --> 00:12:12,179
mount the component and handing the data

00:12:10,829 --> 00:12:14,100
over to the worker and then when the

00:12:12,179 --> 00:12:16,709
message comes back you set it in state

00:12:14,100 --> 00:12:18,179
and then probably render it so we won't

00:12:16,709 --> 00:12:20,160
go through this in detail you can come

00:12:18,179 --> 00:12:23,819
back to it if you want so had a bundle

00:12:20,160 --> 00:12:25,769
workers this can be a little tricky web

00:12:23,819 --> 00:12:28,319
pack is the best place to do this right

00:12:25,769 --> 00:12:29,699
now the worker loader is what I've

00:12:28,319 --> 00:12:32,490
always used because I've been using them

00:12:29,699 --> 00:12:34,079
for a while more recently there's a cool

00:12:32,490 --> 00:12:35,879
package that will actually just take any

00:12:34,079 --> 00:12:37,350
function and then create that template

00:12:35,879 --> 00:12:39,389
around it and make it into a worker

00:12:37,350 --> 00:12:40,470
which is pretty cool the only reason

00:12:39,389 --> 00:12:41,819
I've never used this is because I'm

00:12:40,470 --> 00:12:43,079
really familiar with that template

00:12:41,819 --> 00:12:46,499
already because I've been using workers

00:12:43,079 --> 00:12:46,980
for a long time so but maybe one day

00:12:46,499 --> 00:12:50,309
I'll try it

00:12:46,980 --> 00:12:52,319
I did try recently because some of our

00:12:50,309 --> 00:12:54,059
libraries are bundled with roll-up in

00:12:52,319 --> 00:12:56,699
order to get tree shaking which was just

00:12:54,059 --> 00:12:58,350
the stuff discussed and it seems like

00:12:56,699 --> 00:13:00,029
the roll-up plugin might be out of date

00:12:58,350 --> 00:13:03,319
for workers because it didn't work for

00:13:00,029 --> 00:13:06,059
me but I didn't dive into it too deeply

00:13:03,319 --> 00:13:08,040
Austrian canvas so this is the other

00:13:06,059 --> 00:13:11,850
piece of really getting the user

00:13:08,040 --> 00:13:14,819
experience of computing a big TC in

00:13:11,850 --> 00:13:17,069
particular good off-screen canvas is

00:13:14,819 --> 00:13:20,429
brand new it is actually only right now

00:13:17,069 --> 00:13:22,769
in mainline chrome and the last few

00:13:20,429 --> 00:13:24,299
versions and it's I think you have to be

00:13:22,769 --> 00:13:26,009
in Firefox definition and then you have

00:13:24,299 --> 00:13:28,709
to turn on a flag to get it to work in

00:13:26,009 --> 00:13:30,899
Firefox so this is just an HTML canvas

00:13:28,709 --> 00:13:33,079
element but it's one that's well you

00:13:30,899 --> 00:13:34,420
can't use it in the window as well as

00:13:33,079 --> 00:13:38,110
this

00:13:34,420 --> 00:13:39,730
little pullout says but crucially you

00:13:38,110 --> 00:13:41,500
can use it in a worker the worker again

00:13:39,730 --> 00:13:43,030
has no Dom so it doesn't have normal

00:13:41,500 --> 00:13:45,520
HTML canvas you need to use this

00:13:43,030 --> 00:13:49,840
off-screen canvas and that's how the

00:13:45,520 --> 00:13:53,830
tensorflow TC library does the computing

00:13:49,840 --> 00:13:58,690
of the result on the GPU in a canvas

00:13:53,830 --> 00:14:01,270
element with WebGL caching the again

00:13:58,690 --> 00:14:03,520
theta doesn't change super often we do

00:14:01,270 --> 00:14:06,540
have an escape hatch like you'll see in

00:14:03,520 --> 00:14:09,310
some of the demos later recompute button

00:14:06,540 --> 00:14:11,530
we did this really simply just with

00:14:09,310 --> 00:14:13,270
using this library object hash on the

00:14:11,530 --> 00:14:16,300
data to get a key that we use for

00:14:13,270 --> 00:14:18,900
putting the result in local storage and

00:14:16,300 --> 00:14:21,490
cache is a boolean prop on the component

00:14:18,900 --> 00:14:23,470
so the secret here really is that every

00:14:21,490 --> 00:14:25,870
single time you compute you try to store

00:14:23,470 --> 00:14:27,580
the result in local storage but you just

00:14:25,870 --> 00:14:30,180
don't pull from that local storage

00:14:27,580 --> 00:14:33,790
unless the person has the cache prop

00:14:30,180 --> 00:14:35,740
turned on so that means that if it's off

00:14:33,790 --> 00:14:37,150
but then they somehow they turn it on if

00:14:35,740 --> 00:14:40,450
that's part of your app that you like

00:14:37,150 --> 00:14:42,130
let them turn it on then they can pull

00:14:40,450 --> 00:14:46,660
from the cache immediately without

00:14:42,130 --> 00:14:48,460
having to run it again I'll breeze

00:14:46,660 --> 00:14:51,940
through this again again just using the

00:14:48,460 --> 00:14:54,040
lifecycle to do this now for the

00:14:51,940 --> 00:14:55,930
developer experience most of these are

00:14:54,040 --> 00:14:57,310
basically the same as the user like you

00:14:55,930 --> 00:14:59,140
don't want your computer to burn up it

00:14:57,310 --> 00:15:00,880
kind of does anyway when you're doing

00:14:59,140 --> 00:15:03,780
this like sometimes I have multiple tabs

00:15:00,880 --> 00:15:06,210
open or something which is terrible and

00:15:03,780 --> 00:15:08,410
and you don't want to wait forever

00:15:06,210 --> 00:15:10,120
caching is really big for the developer

00:15:08,410 --> 00:15:12,310
experience when you want to iterate on

00:15:10,120 --> 00:15:13,990
how you're displaying the result right

00:15:12,310 --> 00:15:15,960
you don't want to recompute every single

00:15:13,990 --> 00:15:19,120
time that you make a change to that code

00:15:15,960 --> 00:15:20,620
and then the componentization is really

00:15:19,120 --> 00:15:24,340
the biggest part of the developer

00:15:20,620 --> 00:15:27,370
experience taking this whole procedural

00:15:24,340 --> 00:15:29,290
kind of flow of doing a computation and

00:15:27,370 --> 00:15:32,320
storing the result so you can cache it

00:15:29,290 --> 00:15:34,480
and making all of that declarative in a

00:15:32,320 --> 00:15:35,740
component form makes it extremely easy

00:15:34,480 --> 00:15:42,070
to reuse in a bunch of different

00:15:35,740 --> 00:15:44,680
contexts yep I already covered that so

00:15:42,070 --> 00:15:45,520
now we are getting into the demos which

00:15:44,680 --> 00:15:50,110
should be

00:15:45,520 --> 00:15:51,970
fun so the first one here I have in the

00:15:50,110 --> 00:15:54,790
code-behind here the caching turned on

00:15:51,970 --> 00:15:57,700
so we're gonna see the EM nest the EM

00:15:54,790 --> 00:16:00,100
nest hand-drawn digits and it should

00:15:57,700 --> 00:16:02,950
load pretty fast there we go pretty darn

00:16:00,100 --> 00:16:04,990
fast so this is the TC if you see always

00:16:02,950 --> 00:16:07,390
kind of tends to create this like

00:16:04,990 --> 00:16:09,670
amorphous circular type shape you map

00:16:07,390 --> 00:16:16,210
really doesn't so well see the

00:16:09,670 --> 00:16:19,330
difference there in a minute so the new

00:16:16,210 --> 00:16:21,700
map I'm gonna get started because it

00:16:19,330 --> 00:16:24,790
will take a while and this initial step

00:16:21,700 --> 00:16:25,930
is not very fun because this is actually

00:16:24,790 --> 00:16:26,940
it's doing some like initial

00:16:25,930 --> 00:16:29,890
bootstrapping

00:16:26,940 --> 00:16:32,110
and so you don't actually see even the

00:16:29,890 --> 00:16:33,670
iterations which you will see so that's

00:16:32,110 --> 00:16:35,620
another thing that's a prop on the

00:16:33,670 --> 00:16:36,820
component is saying whether or not you

00:16:35,620 --> 00:16:38,380
want to see these are iterative

00:16:36,820 --> 00:16:40,180
algorithms so if you want to see it

00:16:38,380 --> 00:16:42,310
while it's converging or you can just

00:16:40,180 --> 00:16:44,440
wait till it's done so we will see it

00:16:42,310 --> 00:16:45,940
while it's converging and the reason I

00:16:44,440 --> 00:16:47,140
put that little hedgehog in the corner

00:16:45,940 --> 00:16:48,190
is to prove to you that this is

00:16:47,140 --> 00:16:50,110
happening in a webworker

00:16:48,190 --> 00:16:51,820
if this is if this was not in a

00:16:50,110 --> 00:16:53,590
webworker that gif would be frozen right

00:16:51,820 --> 00:16:56,170
now because the compute we're doing is

00:16:53,590 --> 00:16:58,750
really a lot we're using up a ton of

00:16:56,170 --> 00:17:01,090
resources also as the iterations get

00:16:58,750 --> 00:17:02,470
going they'd be super super janky and

00:17:01,090 --> 00:17:04,180
slow there might still be a little bit

00:17:02,470 --> 00:17:07,900
of jank especially since I'm presenting

00:17:04,180 --> 00:17:11,310
so like my GPU is doing more than usual

00:17:07,900 --> 00:17:13,990
but oh that looks pretty good actually

00:17:11,310 --> 00:17:16,420
so yeah the you map in general takes

00:17:13,990 --> 00:17:19,900
fewer iterations to converge once it

00:17:16,420 --> 00:17:23,440
gets going and it doesn't create that

00:17:19,900 --> 00:17:25,120
circular shape as much so that's it

00:17:23,440 --> 00:17:27,490
one of the really cool things I think in

00:17:25,120 --> 00:17:30,250
this example and I think you map does

00:17:27,490 --> 00:17:33,720
this a little bit better than TCE is it

00:17:30,250 --> 00:17:36,040
even sees sort of neighborhood

00:17:33,720 --> 00:17:38,730
approximations and clusters them

00:17:36,040 --> 00:17:46,720
appropriately so this chunk right here

00:17:38,730 --> 00:17:50,020
the dark blue is 7 the dark brown is 9

00:17:46,720 --> 00:17:51,160
and the purple is 4 and so you can

00:17:50,020 --> 00:17:53,710
actually if you think about it you can

00:17:51,160 --> 00:17:55,480
see how all of those might be close to

00:17:53,710 --> 00:17:58,060
each other because they sometimes can

00:17:55,480 --> 00:17:59,419
look a little bit like each other and

00:17:58,060 --> 00:18:02,419
like the ones that

00:17:59,419 --> 00:18:03,729
that are the most isolated are like

00:18:02,419 --> 00:18:08,539
that's zero

00:18:03,729 --> 00:18:09,739
this one is sixes again and those two

00:18:08,539 --> 00:18:12,229
are close to each other you can kind of

00:18:09,739 --> 00:18:14,149
see why that might be true so it's

00:18:12,229 --> 00:18:19,039
pretty cool you can see some interesting

00:18:14,149 --> 00:18:22,099
things out of you map and so now I will

00:18:19,039 --> 00:18:23,929
show you some interesting things and the

00:18:22,099 --> 00:18:30,529
kind of data that we work with at stitch

00:18:23,929 --> 00:18:34,339
fix let me get out of full screen so

00:18:30,529 --> 00:18:44,659
this is where my VPN connection it's

00:18:34,339 --> 00:18:48,799
fine yeah I'm just gonna do that alright

00:18:44,659 --> 00:18:51,619
so this is actually a you map on items

00:18:48,799 --> 00:18:53,359
of clothing so in this particular what

00:18:51,619 --> 00:18:55,009
we're using for the dimensions here is a

00:18:53,359 --> 00:18:58,119
model that is still under development

00:18:55,009 --> 00:19:01,190
actually by one of our data scientists

00:18:58,119 --> 00:19:03,709
using computer vision to predict

00:19:01,190 --> 00:19:06,469
features of clothing so things like

00:19:03,709 --> 00:19:07,639
sleeve length collar type you know

00:19:06,469 --> 00:19:10,159
anything and everything you can imagine

00:19:07,639 --> 00:19:13,429
there's a lot of dimensions to this so

00:19:10,159 --> 00:19:16,129
using the actual we wanna the goal is to

00:19:13,429 --> 00:19:18,079
be able to take an image of a piece of

00:19:16,129 --> 00:19:19,489
clothing and then find other things that

00:19:18,079 --> 00:19:22,009
are similar to it either in our

00:19:19,489 --> 00:19:27,529
inventory or elsewhere and other like

00:19:22,009 --> 00:19:31,369
data of images of clothing so this is a

00:19:27,529 --> 00:19:33,499
run a view map on a particular I found

00:19:31,369 --> 00:19:35,239
developing these demos that narrowing it

00:19:33,499 --> 00:19:37,579
to a particular color is helpful

00:19:35,239 --> 00:19:40,729
although I think this color is bad so

00:19:37,579 --> 00:19:47,479
let us go it's too dark on the screen

00:19:40,729 --> 00:19:50,479
here let us take that out put this is

00:19:47,479 --> 00:19:52,219
one of our fetched components and we'll

00:19:50,479 --> 00:19:54,429
put pink and I think that might show up

00:19:52,219 --> 00:19:54,429
better

00:19:59,220 --> 00:20:03,980
oh please get the data

00:20:07,710 --> 00:20:13,530
I also running have been running into

00:20:10,200 --> 00:20:17,070
limits on header size which is why I

00:20:13,530 --> 00:20:19,340
just checked the console oh okay next

00:20:17,070 --> 00:20:23,190
we're watching for many services here

00:20:19,340 --> 00:20:27,110
basically to get all the attributes from

00:20:23,190 --> 00:20:27,110
this model and then also get the image

00:20:27,800 --> 00:20:42,510
of the item etc Oh No blank screen hmm

00:20:37,530 --> 00:20:46,080
oh oh it's just taking forever to load

00:20:42,510 --> 00:20:48,240
the images okay well we'll stick with

00:20:46,080 --> 00:20:49,890
light pink then we can do another

00:20:48,240 --> 00:20:51,690
version of this but I will keep the

00:20:49,890 --> 00:20:53,400
color the same because it's taking I

00:20:51,690 --> 00:20:55,830
should have predicted this that it would

00:20:53,400 --> 00:20:59,340
take a while to load all the images on

00:20:55,830 --> 00:21:00,540
my poor phone connection so they're

00:20:59,340 --> 00:21:01,950
they're just popping it and we're not

00:21:00,540 --> 00:21:05,390
seeing the iterations because they

00:21:01,950 --> 00:21:07,620
happened before then we're just loaded

00:21:05,390 --> 00:21:09,000
but you can already see actually this

00:21:07,620 --> 00:21:11,400
kind of makes it fun to see how things

00:21:09,000 --> 00:21:16,530
build up so here's like some flowy short

00:21:11,400 --> 00:21:22,170
sleeve things I need to look at my

00:21:16,530 --> 00:21:26,820
screen we have like button-down shirts

00:21:22,170 --> 00:21:31,380
over here it's the long sleeve cold

00:21:26,820 --> 00:21:34,910
shoulder not a lot of pants yet I guess

00:21:31,380 --> 00:21:34,910
there are not a lot of light pink pants

00:21:35,330 --> 00:21:43,230
yeah so another one thing you're

00:21:39,960 --> 00:21:45,960
noticing here that makes it a little

00:21:43,230 --> 00:21:47,670
difficult to assess this is with images

00:21:45,960 --> 00:21:50,700
rather than little tiny numerals with

00:21:47,670 --> 00:21:52,470
the Emnes data we have a lot of overlap

00:21:50,700 --> 00:21:54,360
and so that's a little hard to deal with

00:21:52,470 --> 00:21:59,580
so the newest thing that I've been

00:21:54,360 --> 00:22:01,320
working on is a linear optimization an

00:21:59,580 --> 00:22:03,360
alignment algorithm that takes the

00:22:01,320 --> 00:22:06,990
output of the dimensionality reduction

00:22:03,360 --> 00:22:09,420
and then kind of blows out the clusters

00:22:06,990 --> 00:22:11,430
and figures out the optimal place to

00:22:09,420 --> 00:22:14,220
preserve neighborhood relationships but

00:22:11,430 --> 00:22:16,200
have everything on a grid so I think

00:22:14,220 --> 00:22:19,090
we've got well they're still loading but

00:22:16,200 --> 00:22:22,630
let's try to look at that grid

00:22:19,090 --> 00:22:22,630
not to die

00:22:31,210 --> 00:22:39,080
waiting for those great react up to

00:22:34,610 --> 00:22:44,230
rebuttal I think the timing of the talks

00:22:39,080 --> 00:22:44,230
here under the big brother rather good I

00:22:44,559 --> 00:22:50,419
think it was so busy doing other things

00:22:47,090 --> 00:22:54,970
it just didn't recognize hopefully it's

00:22:50,419 --> 00:22:54,970
doing the alignment code now we'll see

00:22:59,080 --> 00:23:05,000
all right the alignment is not fun to

00:23:02,509 --> 00:23:07,669
see the iterations anyway so while this

00:23:05,000 --> 00:23:11,990
is loading I have one more demo that's

00:23:07,669 --> 00:23:14,389
in the deck and the images are on my

00:23:11,990 --> 00:23:18,710
computer so they don't have to load so

00:23:14,389 --> 00:23:23,899
this final demo fun one to land on this

00:23:18,710 --> 00:23:25,850
is all with this guys stuff so Bob brass

00:23:23,899 --> 00:23:28,759
the famous painting instructor a long

00:23:25,850 --> 00:23:30,320
time ago early I don't know what your

00:23:28,759 --> 00:23:33,590
definition of long is but I think maybe

00:23:30,320 --> 00:23:36,230
five years ago 5:38 hand-coded a

00:23:33,590 --> 00:23:39,559
bajillion attributes of every Bob Ross

00:23:36,230 --> 00:23:43,450
painting from every episode and the data

00:23:39,559 --> 00:23:51,470
is on github so I took that data and I

00:23:43,450 --> 00:23:54,110
made it into a little u map so that's

00:23:51,470 --> 00:23:56,960
yeah you get I think all the oval ones

00:23:54,110 --> 00:24:02,360
ended up over here again this is tough

00:23:56,960 --> 00:24:06,860
so this one will give us the grid so

00:24:02,360 --> 00:24:09,110
this is fun to zoom in on it looks like

00:24:06,860 --> 00:24:10,309
we're in a mountain section here lots of

00:24:09,110 --> 00:24:18,100
Bob Ross paintings of mountains now

00:24:10,309 --> 00:24:18,100
we're in streams foliage more mountains

00:24:18,220 --> 00:24:24,500
yeah some mountains there's usually oh

00:24:22,879 --> 00:24:27,950
there's got to be a water section

00:24:24,500 --> 00:24:32,889
somewhere yeah here's like the ocean

00:24:27,950 --> 00:24:35,539
paintings hmm well that's the grid and

00:24:32,889 --> 00:24:39,440
this is here now so here's a grid of

00:24:35,539 --> 00:24:41,290
those light pink clothes so there we do

00:24:39,440 --> 00:24:48,730
see the like pants cluster

00:24:41,290 --> 00:24:51,440
things like that and polo shirts here

00:24:48,730 --> 00:24:54,200
this alignment to grid isn't perfect it

00:24:51,440 --> 00:24:55,910
tends to kind of spread out clusters on

00:24:54,200 --> 00:24:58,930
diagonals so it kind of takes a little

00:24:55,910 --> 00:25:06,560
practice finding the relationships but

00:24:58,930 --> 00:25:08,090
it's fun and a work in progress so and

00:25:06,560 --> 00:25:12,170
then finally we are going to open source

00:25:08,090 --> 00:25:13,400
this so look for it sometime soon I'm

00:25:12,170 --> 00:25:16,460
sure I'll tweet about it and we're going

00:25:13,400 --> 00:25:18,740
to call it react flatland just these

00:25:16,460 --> 00:25:20,270
rapper components obviously relying on

00:25:18,740 --> 00:25:22,570
great open source libraries that already

00:25:20,270 --> 00:25:25,040
exists for these dimensional

00:25:22,570 --> 00:25:34,100
dimensionality reduction algorithms so

00:25:25,040 --> 00:25:38,000
thanks so the first thing so I saw

00:25:34,100 --> 00:25:39,710
something come on Twitter someone said

00:25:38,000 --> 00:25:41,540
you know a super cool that your talk on

00:25:39,710 --> 00:25:44,120
data science and the browser is also a

00:25:41,540 --> 00:25:48,290
secret introduction to working with web

00:25:44,120 --> 00:25:51,830
workers as well did you did you know

00:25:48,290 --> 00:25:54,020
that going in to your project or was it

00:25:51,830 --> 00:25:56,060
kind of a discovery yeah I've been using

00:25:54,020 --> 00:25:58,420
so I've been kind of a data

00:25:56,060 --> 00:26:02,660
visualization specialist for a while

00:25:58,420 --> 00:26:04,250
previously at a startup not as such fix

00:26:02,660 --> 00:26:06,620
is where I first started using web

00:26:04,250 --> 00:26:09,290
workers in that case it was just because

00:26:06,620 --> 00:26:11,270
we were working with a ton of data and

00:26:09,290 --> 00:26:13,760
we needed really really fast filtering

00:26:11,270 --> 00:26:16,010
so a pattern I use a lot is to have a

00:26:13,760 --> 00:26:17,330
worker basically cache if you have huge

00:26:16,010 --> 00:26:19,310
amount of data that you're visualizing

00:26:17,330 --> 00:26:21,350
in an app have a worker that just kind

00:26:19,310 --> 00:26:23,570
of caches it and then you pass every

00:26:21,350 --> 00:26:25,370
time like a user changes a filter and

00:26:23,570 --> 00:26:27,320
you need a different subset of that data

00:26:25,370 --> 00:26:29,540
you pass the message of like give me

00:26:27,320 --> 00:26:31,100
this subset and then the worker does the

00:26:29,540 --> 00:26:34,370
filtering and passes it back and that

00:26:31,100 --> 00:26:35,930
makes it tends to MIT even with I don't

00:26:34,370 --> 00:26:37,370
know how many data vis people are we're

00:26:35,930 --> 00:26:40,700
still using like something really fast

00:26:37,370 --> 00:26:43,040
like cross filter in the worker but it's

00:26:40,700 --> 00:26:44,630
still you know we're talking about maybe

00:26:43,040 --> 00:26:48,910
a million data points so it just makes

00:26:44,630 --> 00:26:51,290
it a lot of faster would you say that

00:26:48,910 --> 00:26:54,650
data science no matter what we've it's

00:26:51,290 --> 00:26:57,950
web or you know other you know I

00:26:54,650 --> 00:27:00,800
ways to do it I'm not a person but would

00:26:57,950 --> 00:27:04,430
you say that it's that there is always

00:27:00,800 --> 00:27:06,650
some form of performance in terms of

00:27:04,430 --> 00:27:09,740
either hardware or in the browser that

00:27:06,650 --> 00:27:11,570
you have to be aware of yeah definitely

00:27:09,740 --> 00:27:13,160
even our data scientists when they're

00:27:11,570 --> 00:27:16,120
you know most of the time they work in

00:27:13,160 --> 00:27:19,460
Python sometimes are to a lesser extent

00:27:16,120 --> 00:27:20,750
and they even struggle with you know

00:27:19,460 --> 00:27:22,850
they're dealing with very different

00:27:20,750 --> 00:27:25,040
timescales like it's okay for a job to

00:27:22,850 --> 00:27:26,570
take three hours it's not okay for a job

00:27:25,040 --> 00:27:28,610
to take a week like I was working on a

00:27:26,570 --> 00:27:30,440
project where like the job would

00:27:28,610 --> 00:27:31,850
literally take a week to finish and by

00:27:30,440 --> 00:27:34,810
that time the data that was the input

00:27:31,850 --> 00:27:37,190
was like a little bit stale so you know

00:27:34,810 --> 00:27:38,930
working to figure out how to make things

00:27:37,190 --> 00:27:40,340
perform faster it's definitely a big

00:27:38,930 --> 00:27:42,290
part of the job mm-hmm

00:27:40,340 --> 00:27:43,790
in terms of performance was usually the

00:27:42,290 --> 00:27:47,780
first thing that you'll usually take a

00:27:43,790 --> 00:27:49,520
look at I mean with with database stuff

00:27:47,780 --> 00:27:50,810
it's always like how are you rendering

00:27:49,520 --> 00:27:52,610
so all the things I just showed her in

00:27:50,810 --> 00:27:55,850
canvas even rendering the images in

00:27:52,610 --> 00:27:57,860
canvas I use SVG a lot when I can

00:27:55,850 --> 00:28:00,530
because it's easier to make tooltips and

00:27:57,860 --> 00:28:02,540
things like that but SVG gets into

00:28:00,530 --> 00:28:03,770
performance pitfalls pretty early so

00:28:02,540 --> 00:28:07,010
yeah rendering is usually the first

00:28:03,770 --> 00:28:08,990
thing I look at okay so if you can make

00:28:07,010 --> 00:28:11,090
changes to the web platform to better

00:28:08,990 --> 00:28:14,660
support data science in the browser what

00:28:11,090 --> 00:28:15,680
would some of those changes be I mean

00:28:14,660 --> 00:28:17,240
some of this stuff that's gonna be

00:28:15,680 --> 00:28:19,880
coming with like web assembly is

00:28:17,240 --> 00:28:23,000
probably what would be on my wish list

00:28:19,880 --> 00:28:25,970
but making that easier I think we were

00:28:23,000 --> 00:28:27,170
maybe joking about trying to put

00:28:25,970 --> 00:28:31,070
something web assembly that we were

00:28:27,170 --> 00:28:34,540
doing and then I was like well no I'm

00:28:31,070 --> 00:28:34,540
not this is gonna take too much time

00:28:34,960 --> 00:28:42,260
better concurrency and JavaScript too I

00:28:38,060 --> 00:28:45,020
think there is I was just reading up on

00:28:42,260 --> 00:28:46,460
the worker page and I think there is

00:28:45,020 --> 00:28:48,080
something coming where you might be able

00:28:46,460 --> 00:28:50,960
to share data like pass by reference

00:28:48,080 --> 00:28:54,800
basically so that might be interesting

00:28:50,960 --> 00:28:59,480
mm-hmm um have you used web workers to

00:28:54,800 --> 00:29:01,970
solve other problems not really it's

00:28:59,480 --> 00:29:04,970
usually the only problem I've ever

00:29:01,970 --> 00:29:07,160
solved with a web worker is a huge data

00:29:04,970 --> 00:29:10,010
set that I need to do something with

00:29:07,160 --> 00:29:11,600
I guess once in another app I basically

00:29:10,010 --> 00:29:13,370
just did the pattern of having the

00:29:11,600 --> 00:29:15,530
worker store a huge cache of data in

00:29:13,370 --> 00:29:17,270
order to not keep reloading it so it

00:29:15,530 --> 00:29:19,730
wasn't for the same reason it was more

00:29:17,270 --> 00:29:21,710
like because of the way the app grew it

00:29:19,730 --> 00:29:24,470
was a little tedious to like redo the

00:29:21,710 --> 00:29:27,590
and it was a it's a large amount of data

00:29:24,470 --> 00:29:29,630
and so in that case just to get it from

00:29:27,590 --> 00:29:34,850
that from our data warehouse like that

00:29:29,630 --> 00:29:36,470
time took a long time hmm so yeah so oh

00:29:34,850 --> 00:29:38,929
so what are some of the challenges of

00:29:36,470 --> 00:29:42,770
working with reacts for doing cool stuff

00:29:38,929 --> 00:29:44,390
like this oh I don't know I've actually

00:29:42,770 --> 00:29:46,490
the start if I was that before we were

00:29:44,390 --> 00:29:49,730
extremely early adopters of react in

00:29:46,490 --> 00:29:52,789
December of 2013 when I launched in May

00:29:49,730 --> 00:29:55,730
of 2013 so I've been in I'm a little bit

00:29:52,789 --> 00:29:57,140
of like a react fan like super fan so I

00:29:55,730 --> 00:29:57,710
don't know I don't think I have any

00:29:57,140 --> 00:29:59,450
complaints

00:29:57,710 --> 00:30:00,830
I love hooks I didn't show any of the

00:29:59,450 --> 00:30:05,090
new hook stuff because this library

00:30:00,830 --> 00:30:07,309
predates X but we're someday there will

00:30:05,090 --> 00:30:08,630
be a hook implementation of computing

00:30:07,309 --> 00:30:12,830
these things for those of you who know

00:30:08,630 --> 00:30:15,350
about Reax new hooks all right let's

00:30:12,830 --> 00:30:21,080
just check one more time but while I do

00:30:15,350 --> 00:30:23,919
that so it sounds like at least is what

00:30:21,080 --> 00:30:26,780
MIT data is like a lot of it you know

00:30:23,919 --> 00:30:28,669
especially on the web you have to you

00:30:26,780 --> 00:30:30,289
kind of you know you have your your date

00:30:28,669 --> 00:30:32,150
of science background but you also have

00:30:30,289 --> 00:30:33,799
you know this experience kind of with

00:30:32,150 --> 00:30:36,320
like web performance and web development

00:30:33,799 --> 00:30:37,909
how do you kind of manage that this is

00:30:36,320 --> 00:30:40,640
all like kind of this bundle at the same

00:30:37,909 --> 00:30:42,200
time you kind of just you know adopt you

00:30:40,640 --> 00:30:44,360
know new things and things like that you

00:30:42,200 --> 00:30:47,330
want to explain that process yeah I

00:30:44,360 --> 00:30:49,669
think if I understand the question

00:30:47,330 --> 00:30:51,200
correctly so when I don't actually have

00:30:49,669 --> 00:30:54,260
a data science background myself I have

00:30:51,200 --> 00:30:55,820
like more than some people because my

00:30:54,260 --> 00:30:59,179
PhD we actually did a lot of

00:30:55,820 --> 00:31:01,940
quantitative work but mostly I rely on

00:30:59,179 --> 00:31:03,620
working with data scientists and in

00:31:01,940 --> 00:31:05,990
terms of how we choose how to put things

00:31:03,620 --> 00:31:08,450
together but almost all the stuff we

00:31:05,990 --> 00:31:12,020
work on especially on my team like the

00:31:08,450 --> 00:31:13,700
apps that we build our internal we we

00:31:12,020 --> 00:31:16,340
build pretty fast and loose we pick our

00:31:13,700 --> 00:31:18,350
tools and and everyone in the department

00:31:16,340 --> 00:31:19,840
data science is included also have a

00:31:18,350 --> 00:31:23,380
very large amount of

00:31:19,840 --> 00:31:25,840
economy that's a company value and

00:31:23,380 --> 00:31:28,090
Department value so it's mostly just

00:31:25,840 --> 00:31:30,010
kind of trying new things and then when

00:31:28,090 --> 00:31:30,299
it doesn't work you know not doing it

00:31:30,010 --> 00:31:34,570
again

00:31:30,299 --> 00:31:35,950
hmm gotcha well thank you so much give a

00:31:34,570 --> 00:31:39,310
warm round of applause

00:31:35,950 --> 00:31:52,609
[Applause]

00:31:39,310 --> 00:31:52,609

YouTube URL: https://www.youtube.com/watch?v=WibNG98icAw


