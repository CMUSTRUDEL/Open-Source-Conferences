Title: Dynamic Schema Generation For Changing Data Models - Contentful Developers - October 2018
Publication date: 2018-11-13
Playlist: Contentful Developers
Description: 
	Presented by Stephan Schneider - Contentful

A GraphQL query tells you exactly what kind of data your page needs to render. But once you want to update that data, you're left alone with full entities in your admin panel. Let's re-use our query for a form that only allows editing the data used in the query.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:03,120
hi I'm Stefan I'm not the only one

00:00:02,129 --> 00:00:04,710
actually in the room working on a

00:00:03,120 --> 00:00:09,179
graphical API actually Tim here in front

00:00:04,710 --> 00:00:10,500
of me could also work on it so load

00:00:09,179 --> 00:00:15,860
balance between us with the questions

00:00:10,500 --> 00:00:15,860
rock boss we are happy to help their dad

00:00:16,190 --> 00:00:20,430
so yeah my today's topic is about like

00:00:19,140 --> 00:00:21,960
dynamic schema generation which is like

00:00:20,430 --> 00:00:23,340
about the the graphical API in the

00:00:21,960 --> 00:00:25,680
graphical schema that actually gets

00:00:23,340 --> 00:00:27,060
generated and yeah it's like for

00:00:25,680 --> 00:00:29,010
changing data models what does it mean

00:00:27,060 --> 00:00:30,179
like well in content for every user has

00:00:29,010 --> 00:00:31,560
like their own content types which way

00:00:30,179 --> 00:00:35,700
the he defining that content model and

00:00:31,560 --> 00:00:37,290
that means that we have a slightly

00:00:35,700 --> 00:00:39,420
different set of problems than the usual

00:00:37,290 --> 00:00:41,670
people have when they're using graphic

00:00:39,420 --> 00:00:43,320
you are building graphical API so there

00:00:41,670 --> 00:00:46,890
are some like really well sort graphical

00:00:43,320 --> 00:00:50,250
API is out there and basically that's

00:00:46,890 --> 00:00:51,449
how I came to this talk topic was that

00:00:50,250 --> 00:00:54,090
when we went to the graph kill your

00:00:51,449 --> 00:00:55,890
conference there was like the end from

00:00:54,090 --> 00:00:58,020
Shopify actually talking I think that's

00:00:55,890 --> 00:00:59,550
the actual link to the YouTube where

00:00:58,020 --> 00:01:02,820
she's talking on the graphical Europe

00:00:59,550 --> 00:01:04,229
media conference and Kyle is like

00:01:02,820 --> 00:01:06,000
talking about how they had to basically

00:01:04,229 --> 00:01:09,750
changed a bit of the internals and like

00:01:06,000 --> 00:01:13,799
github and to account and build their

00:01:09,750 --> 00:01:16,650
graphical API and well while we were

00:01:13,799 --> 00:01:19,820
watching talk all sites this is really

00:01:16,650 --> 00:01:23,159
nice but sadly it's not for us like why

00:01:19,820 --> 00:01:24,360
get up and shop if I have like the same

00:01:23,159 --> 00:01:27,630
thing they have like a lot of customers

00:01:24,360 --> 00:01:28,950
but their data model is like static for

00:01:27,630 --> 00:01:31,079
all of them and it's basically shared

00:01:28,950 --> 00:01:32,700
between all of them and that means they

00:01:31,079 --> 00:01:34,950
can really put like a lot of love and

00:01:32,700 --> 00:01:37,200
like details into like generating or

00:01:34,950 --> 00:01:39,540
building that schema and like I don't

00:01:37,200 --> 00:01:41,369
know like stuff how to group properties

00:01:39,540 --> 00:01:42,509
and like which kind of object types how

00:01:41,369 --> 00:01:44,310
they're like linked to each other

00:01:42,509 --> 00:01:45,509
whether it's like an array or whether

00:01:44,310 --> 00:01:48,000
it's like a real collection which like

00:01:45,509 --> 00:01:50,009
pagination and likely unlike really and

00:01:48,000 --> 00:01:51,600
went in a great detail of like how they

00:01:50,009 --> 00:01:53,490
were like thinking about each and every

00:01:51,600 --> 00:01:55,950
property and like how to name that and

00:01:53,490 --> 00:01:58,170
how to make that like really user

00:01:55,950 --> 00:02:00,390
friendly and yeah I was like watching

00:01:58,170 --> 00:02:01,710
this and saw like huh be so cool if we

00:02:00,390 --> 00:02:03,899
could do that but basically we're not

00:02:01,710 --> 00:02:07,049
just designing one API but we're like

00:02:03,899 --> 00:02:08,610
designing a thousand at once so because

00:02:07,049 --> 00:02:10,319
content for like tea the customers did

00:02:08,610 --> 00:02:11,849
fine like the shape of the content so

00:02:10,319 --> 00:02:13,300
that means the whole ecosystem that's

00:02:11,849 --> 00:02:15,130
like out there is

00:02:13,300 --> 00:02:16,930
not really accommodating for our use

00:02:15,130 --> 00:02:19,690
case so it's mostly about like

00:02:16,930 --> 00:02:21,250
reflection of a databases or it's like

00:02:19,690 --> 00:02:25,690
generating from the schema a descriptive

00:02:21,250 --> 00:02:27,670
language and well that's this is not

00:02:25,690 --> 00:02:29,260
what we are doing we have to really get

00:02:27,670 --> 00:02:31,210
your data model that you defined and

00:02:29,260 --> 00:02:34,030
then make the best out of it to generate

00:02:31,210 --> 00:02:37,210
a graphical schema that you can then

00:02:34,030 --> 00:02:39,040
work with so that morality means from

00:02:37,210 --> 00:02:41,140
our usual rest approach that's like a

00:02:39,040 --> 00:02:43,540
big shift and responsibility because

00:02:41,140 --> 00:02:45,070
beforehand we were I agree giving you in

00:02:43,540 --> 00:02:46,510
the API documentation like this is how

00:02:45,070 --> 00:02:48,520
our API looks like this is like this

00:02:46,510 --> 00:02:49,840
field which has like all properties it's

00:02:48,520 --> 00:02:51,820
like the fields everything in fields

00:02:49,840 --> 00:02:54,040
like from the user this is how a

00:02:51,820 --> 00:02:55,900
collection looks like and we could

00:02:54,040 --> 00:02:58,000
really feel like the whole JSON on how

00:02:55,900 --> 00:02:59,530
it looks because look basically the same

00:02:58,000 --> 00:03:02,350
for everybody except for the stuff in

00:02:59,530 --> 00:03:05,410
fields by now this is a bit different

00:03:02,350 --> 00:03:06,850
because we have a statically type thing

00:03:05,410 --> 00:03:13,360
so we have to generate like types for

00:03:06,850 --> 00:03:14,590
everything and it yeah it's like we need

00:03:13,360 --> 00:03:17,440
to really like look on the on the

00:03:14,590 --> 00:03:19,060
content types and we buy that we need to

00:03:17,440 --> 00:03:20,650
come up with like a schema that we use

00:03:19,060 --> 00:03:22,360
in our tutorials or you know

00:03:20,650 --> 00:03:24,250
documentation to actually show you

00:03:22,360 --> 00:03:26,140
examples on how we use that but of

00:03:24,250 --> 00:03:28,720
course it doesn't look like this for you

00:03:26,140 --> 00:03:30,760
so we really like describing how the API

00:03:28,720 --> 00:03:32,709
is derived I'm not like you mercy right

00:03:30,760 --> 00:03:35,950
and not like how it really looks like

00:03:32,709 --> 00:03:37,989
and this is a bit weird like for for

00:03:35,950 --> 00:03:41,590
documentation approach but actually it's

00:03:37,989 --> 00:03:43,269
also like a fun thing I mean we would

00:03:41,590 --> 00:03:44,980
have like one other option and I would

00:03:43,269 --> 00:03:46,989
have been like well the user just like

00:03:44,980 --> 00:03:49,180
he finds how their SDL looks like for

00:03:46,989 --> 00:03:52,480
example I think Prisma is doing kind of

00:03:49,180 --> 00:03:54,970
that in case anyone knows that but that

00:03:52,480 --> 00:03:56,440
has its own set of problems so well you

00:03:54,970 --> 00:03:57,580
need to change the data model then you

00:03:56,440 --> 00:04:00,100
need to change the data model like in

00:03:57,580 --> 00:04:01,840
contentful that you have and then you

00:04:00,100 --> 00:04:03,100
need to like update as SDL to actually

00:04:01,840 --> 00:04:04,810
like account for that so that would be

00:04:03,100 --> 00:04:07,630
always like some difference in between

00:04:04,810 --> 00:04:10,150
and we actually pretty fast decided that

00:04:07,630 --> 00:04:12,489
we don't want to get that approach or to

00:04:10,150 --> 00:04:13,750
choose that path but for later it might

00:04:12,489 --> 00:04:17,410
be actually an option to like fine

00:04:13,750 --> 00:04:20,290
really fine grained tweak the schema to

00:04:17,410 --> 00:04:24,220
your to your needs but currently we're

00:04:20,290 --> 00:04:25,960
just trying to get the best out of it

00:04:24,220 --> 00:04:27,320
without letting you writing anything

00:04:25,960 --> 00:04:29,810
manually

00:04:27,320 --> 00:04:31,610
oh yeah and also the other problem would

00:04:29,810 --> 00:04:33,890
be that like for us if you just give us

00:04:31,610 --> 00:04:35,720
an SD out and we need to figure out what

00:04:33,890 --> 00:04:38,120
we should do out of it it's very hard to

00:04:35,720 --> 00:04:41,270
actually get a right user intent without

00:04:38,120 --> 00:04:42,890
them inventing some kind of new syntax

00:04:41,270 --> 00:04:43,970
on top of the SCL which of course no one

00:04:42,890 --> 00:04:46,370
wants to learn because it's a kind

00:04:43,970 --> 00:04:47,630
contentful specifically and this talk

00:04:46,370 --> 00:04:49,070
then is basically about the design

00:04:47,630 --> 00:04:50,900
decisions that we took on how we

00:04:49,070 --> 00:04:51,980
generate the schema for you so that you

00:04:50,900 --> 00:04:55,190
get the best

00:04:51,980 --> 00:04:56,840
developer experience out of it so our

00:04:55,190 --> 00:04:58,790
first design decision was actually that

00:04:56,840 --> 00:05:01,960
it's like a green field view layer but

00:04:58,790 --> 00:05:04,880
not like a complete green field F this

00:05:01,960 --> 00:05:09,470
sounds kind of the same but actually has

00:05:04,880 --> 00:05:10,760
a few differences so what we wanted to

00:05:09,470 --> 00:05:12,200
achieve was that you don't need to make

00:05:10,760 --> 00:05:14,770
any changes to models that you have

00:05:12,200 --> 00:05:17,720
because no one really wants to actually

00:05:14,770 --> 00:05:19,840
change all the existing data that you

00:05:17,720 --> 00:05:25,100
have just to be able to use a new API

00:05:19,840 --> 00:05:26,570
and that means that we should basically

00:05:25,100 --> 00:05:28,370
work on the same data set that we

00:05:26,570 --> 00:05:30,590
currently have and we use like the same

00:05:28,370 --> 00:05:32,990
internal curry adapter that gives us

00:05:30,590 --> 00:05:34,040
kind of like the the rest representation

00:05:32,990 --> 00:05:36,290
that we currently have when you get

00:05:34,040 --> 00:05:37,850
something from the management API more

00:05:36,290 --> 00:05:39,650
or less that looks like this but then on

00:05:37,850 --> 00:05:43,790
top we build like the view layer that is

00:05:39,650 --> 00:05:46,130
then giving it out Julie as you would

00:05:43,790 --> 00:05:48,380
expect in a graph QL away but it has one

00:05:46,130 --> 00:05:49,580
very very cool implication which is like

00:05:48,380 --> 00:05:50,810
the last point here we can break with

00:05:49,580 --> 00:05:52,550
the expectations when it's necessary

00:05:50,810 --> 00:05:53,900
because you have to learn the graph

00:05:52,550 --> 00:05:55,280
killer API either way and you have to

00:05:53,900 --> 00:05:57,620
look into the documentation how does I

00:05:55,280 --> 00:06:00,710
derived so when necessary we can just

00:05:57,620 --> 00:06:02,300
like say we fix some things that were

00:06:00,710 --> 00:06:05,150
like annoying for us

00:06:02,300 --> 00:06:07,310
you don't necessarily expect the exact

00:06:05,150 --> 00:06:10,880
same fields to behave like they didn't

00:06:07,310 --> 00:06:12,980
rest my fame most favorite example of

00:06:10,880 --> 00:06:14,450
that is actually that we beforehand

00:06:12,980 --> 00:06:16,160
for the assets used like protocol

00:06:14,450 --> 00:06:19,280
relative URLs which back then when we

00:06:16,160 --> 00:06:20,210
started it were kind of the thing but

00:06:19,280 --> 00:06:21,860
there was like discouraged in the

00:06:20,210 --> 00:06:24,590
meantime and so we could just say okay

00:06:21,860 --> 00:06:28,130
we actually just prepended with an HTTPS

00:06:24,590 --> 00:06:32,090
Everywhere so that you use like this

00:06:28,130 --> 00:06:33,800
secure transport protocol and well that

00:06:32,090 --> 00:06:35,870
was the thing that annoyed us personally

00:06:33,800 --> 00:06:37,190
at least me and we could fix those

00:06:35,870 --> 00:06:38,719
little things and this is actually a

00:06:37,190 --> 00:06:40,969
pretty cool thing and

00:06:38,719 --> 00:06:45,799
you know it's like not that we need to

00:06:40,969 --> 00:06:48,649
maintain any backwards compatibility the

00:06:45,799 --> 00:06:50,569
second thing that we were deciding that

00:06:48,649 --> 00:06:53,389
we were giving content type IDs for the

00:06:50,569 --> 00:06:55,999
type names sounds obvious in the

00:06:53,389 --> 00:07:00,889
beginning but actually we were firstly

00:06:55,999 --> 00:07:03,529
starting with content type names for

00:07:00,889 --> 00:07:05,479
this example here it looks kind of the

00:07:03,529 --> 00:07:08,299
same so we have again the name up here

00:07:05,479 --> 00:07:12,229
we have a suicide e they kind of look

00:07:08,299 --> 00:07:13,669
the same in graph QL by convention type

00:07:12,229 --> 00:07:14,839
names are like Pascal case like the

00:07:13,669 --> 00:07:18,019
first ones upper case and then it

00:07:14,839 --> 00:07:20,809
basically camel case so here that would

00:07:18,019 --> 00:07:23,719
be like quite obvious it would be a

00:07:20,809 --> 00:07:26,149
grass run because an uppercase are so

00:07:23,719 --> 00:07:28,279
far like nothing exciting but if we look

00:07:26,149 --> 00:07:30,019
at on a different example we have two

00:07:28,279 --> 00:07:32,860
here the food category which we call it

00:07:30,019 --> 00:07:35,169
cuisine but the idea of this category

00:07:32,860 --> 00:07:37,309
how should that thing like look like

00:07:35,169 --> 00:07:39,889
well it's a different name it's a

00:07:37,309 --> 00:07:42,409
different ID the name could be like

00:07:39,889 --> 00:07:46,669
changed by editor while a content type

00:07:42,409 --> 00:07:49,659
ID cannot be changed so that actually is

00:07:46,669 --> 00:07:53,059
like a bonus point like for the ID but

00:07:49,659 --> 00:07:54,349
we used to have connect automatically

00:07:53,059 --> 00:07:55,969
generate or still have automatically

00:07:54,349 --> 00:07:58,219
generated content type IDs if you use

00:07:55,969 --> 00:08:00,379
like the post and these might actually

00:07:58,219 --> 00:08:03,949
start with a number which is inverted in

00:08:00,379 --> 00:08:06,139
graph QL and so we did actually a query

00:08:03,949 --> 00:08:07,989
first about like all of our database and

00:08:06,139 --> 00:08:10,369
actually I checked against like how many

00:08:07,989 --> 00:08:12,110
content type IDs would fail how many

00:08:10,369 --> 00:08:14,089
content names would fail to be generated

00:08:12,110 --> 00:08:15,769
and actually found out that like less

00:08:14,089 --> 00:08:18,979
content type names would fail so in the

00:08:15,769 --> 00:08:21,169
beginning we went with that but then we

00:08:18,979 --> 00:08:22,669
did a few like with like customer

00:08:21,169 --> 00:08:24,079
research and I talked to a few customers

00:08:22,669 --> 00:08:25,699
and asked him about their opinions and

00:08:24,079 --> 00:08:27,860
actually all of them were like to see

00:08:25,699 --> 00:08:30,050
how that feels like weird and I don't

00:08:27,860 --> 00:08:31,759
want that to be my schema to be broken

00:08:30,050 --> 00:08:34,370
because some editor decides like to

00:08:31,759 --> 00:08:36,379
rename the thing and that was also

00:08:34,370 --> 00:08:39,500
something that bugged us and it was like

00:08:36,379 --> 00:08:40,639
the wasn't the best decision but well we

00:08:39,500 --> 00:08:42,139
were like in an alpha so we could do

00:08:40,639 --> 00:08:45,279
breaking changes and then decided we

00:08:42,139 --> 00:08:47,660
actually go with the content type ID and

00:08:45,279 --> 00:08:49,370
by now we actually even support those

00:08:47,660 --> 00:08:50,720
like auto-generated invalid IDs by

00:08:49,370 --> 00:08:52,580
basically just prefixing it was like

00:08:50,720 --> 00:08:54,380
content type so it done looks

00:08:52,580 --> 00:08:56,510
bit weird if you aquarii it but at least

00:08:54,380 --> 00:08:57,950
the schema degeneration doesn't fail for

00:08:56,510 --> 00:09:03,140
you and you can make still use the

00:08:57,950 --> 00:09:04,940
graphical API so basically to answer

00:09:03,140 --> 00:09:08,090
your question it's an category and not

00:09:04,940 --> 00:09:09,500
food category cuisine which also is in

00:09:08,090 --> 00:09:16,250
this example at least a bit better to

00:09:09,500 --> 00:09:17,870
read so the cert is ina serum I don't

00:09:16,250 --> 00:09:21,350
know how many people of you are actually

00:09:17,870 --> 00:09:23,060
using link content type validations we

00:09:21,350 --> 00:09:25,540
go to stick raise your hand short if you

00:09:23,060 --> 00:09:28,570
at least know what they are

00:09:25,540 --> 00:09:31,400
see we need to educate our users better

00:09:28,570 --> 00:09:34,610
so whenever you're like linking between

00:09:31,400 --> 00:09:36,770
entries like for for single entry or

00:09:34,610 --> 00:09:38,960
like multiple entries or assets you can

00:09:36,770 --> 00:09:41,120
define for the if you linking two

00:09:38,960 --> 00:09:43,580
entries you can define of which content

00:09:41,120 --> 00:09:45,620
types they actually should be so that

00:09:43,580 --> 00:09:48,140
you can limit even like for the editors

00:09:45,620 --> 00:09:50,450
like to not link like wrong content into

00:09:48,140 --> 00:09:51,970
the fields and be a bit more specific

00:09:50,450 --> 00:09:54,350
and we decided that we actually

00:09:51,970 --> 00:09:55,970
piggyback on that and say like okay this

00:09:54,350 --> 00:09:57,470
actually is a good type in for us

00:09:55,970 --> 00:09:59,840
because we need like aesthetically type

00:09:57,470 --> 00:10:01,010
stuff so we said okay the user is

00:09:59,840 --> 00:10:02,750
already giving us information you know

00:10:01,010 --> 00:10:04,580
that's reuse it to actually make the

00:10:02,750 --> 00:10:07,070
best out of it so to have like an

00:10:04,580 --> 00:10:09,410
example to grasp at is when we have like

00:10:07,070 --> 00:10:11,450
this restaurant example again which is

00:10:09,410 --> 00:10:14,090
like of a type entry and it links to

00:10:11,450 --> 00:10:16,010
categories so the categories is like a

00:10:14,090 --> 00:10:18,700
restaurant categories collection we

00:10:16,010 --> 00:10:20,750
actually decided whenever you have a

00:10:18,700 --> 00:10:23,740
multi reference link we're actually

00:10:20,750 --> 00:10:29,120
doing the same like collection style

00:10:23,740 --> 00:10:31,880
linking as we do in in rests on a like

00:10:29,120 --> 00:10:33,590
slash entries endpoint for example which

00:10:31,880 --> 00:10:35,270
is like one advantage actually over rest

00:10:33,590 --> 00:10:37,340
where you could only like resolve into

00:10:35,270 --> 00:10:38,990
all of them or none of them like uses

00:10:37,340 --> 00:10:40,580
include parameter here you could say

00:10:38,990 --> 00:10:45,610
like give me only like the first ten

00:10:40,580 --> 00:10:51,260
linked categories or stuff like that so

00:10:45,610 --> 00:10:52,580
and actually still it still fine but

00:10:51,260 --> 00:10:54,440
here's the thing is that the items is

00:10:52,580 --> 00:10:55,940
just like a very generic type entry

00:10:54,440 --> 00:10:58,850
because I can all in content type is

00:10:55,940 --> 00:11:00,500
defined so that has an implication when

00:10:58,850 --> 00:11:03,590
you want to use it in graph QL because

00:11:00,500 --> 00:11:05,990
you need to explicitly tell the compiler

00:11:03,590 --> 00:11:07,550
or the interpreter like what kind of

00:11:05,990 --> 00:11:09,800
content type you are interested in and

00:11:07,550 --> 00:11:11,000
this makes the query a bit cumbersome

00:11:09,800 --> 00:11:12,590
because you always need to say that for

00:11:11,000 --> 00:11:14,660
the items you know there should be only

00:11:12,590 --> 00:11:17,330
categories inside and you need to say

00:11:14,660 --> 00:11:19,130
dot dot dot on category every single

00:11:17,330 --> 00:11:20,810
time you want to use that field what we

00:11:19,130 --> 00:11:23,240
actually want to have something like

00:11:20,810 --> 00:11:25,010
that where it's like categories and due

00:11:23,240 --> 00:11:28,310
to the graph gel schema you know that it

00:11:25,010 --> 00:11:30,440
can only be of a type category and then

00:11:28,310 --> 00:11:33,560
you can like directly use the fields

00:11:30,440 --> 00:11:36,950
instead of defining them giving this

00:11:33,560 --> 00:11:39,830
this type hint this then only also

00:11:36,950 --> 00:11:41,660
changes the actual collection and here

00:11:39,830 --> 00:11:45,710
you now have like the items being like

00:11:41,660 --> 00:11:47,090
of type category so yeah even for you

00:11:45,710 --> 00:11:49,460
exploring the schema we are like

00:11:47,090 --> 00:11:52,520
graphical also gives you some some

00:11:49,460 --> 00:12:00,020
better idea of how your data is actually

00:11:52,520 --> 00:12:01,970
structured so the fourth design decision

00:12:00,020 --> 00:12:03,500
before him in the rest api where

00:12:01,970 --> 00:12:06,470
everything like inserts and in fields

00:12:03,500 --> 00:12:08,270
which adds a nice name spacing thing

00:12:06,470 --> 00:12:10,190
that everything in fields was like user

00:12:08,270 --> 00:12:12,320
own so you could like use every name

00:12:10,190 --> 00:12:14,620
that you might want to have and insist

00:12:12,320 --> 00:12:20,810
they were like our properties that are

00:12:14,620 --> 00:12:23,200
owned by contentful in those terms but

00:12:20,810 --> 00:12:26,380
we decided that it should be actually of

00:12:23,200 --> 00:12:31,100
like co-located in the in the user thing

00:12:26,380 --> 00:12:32,900
why is the thing looking up here okay so

00:12:31,100 --> 00:12:35,630
did we decided that this are like still

00:12:32,900 --> 00:12:36,860
scopes that we still maintain our name

00:12:35,630 --> 00:12:39,290
space where we can like put our

00:12:36,860 --> 00:12:41,810
information that is a contention

00:12:39,290 --> 00:12:44,870
specific like when stuff was created or

00:12:41,810 --> 00:12:46,070
updated in which version we are but we

00:12:44,870 --> 00:12:47,870
decided to remove those fields in

00:12:46,070 --> 00:12:49,970
direction in the very very beginning we

00:12:47,870 --> 00:12:54,500
had it like that you always need to say

00:12:49,970 --> 00:12:57,770
I don't know restaurant dot feels dot

00:12:54,500 --> 00:12:59,450
categories dot fields dot name which at

00:12:57,770 --> 00:13:01,160
some point becomes a really long to

00:12:59,450 --> 00:13:02,420
write and like no one really wants to do

00:13:01,160 --> 00:13:06,560
that I think that was one of the things

00:13:02,420 --> 00:13:08,210
that annoyed our customers the most we

00:13:06,560 --> 00:13:10,520
saw in the beginning is not too bad but

00:13:08,210 --> 00:13:12,080
everyone had some kind of different

00:13:10,520 --> 00:13:13,760
opinions on them some even wanted to

00:13:12,080 --> 00:13:15,380
have two source properties hoisted like

00:13:13,760 --> 00:13:15,640
for example like this created at put

00:13:15,380 --> 00:13:18,910
them

00:13:15,640 --> 00:13:20,140
be directly in the restaurant type we

00:13:18,910 --> 00:13:21,670
actually decided that we don't want that

00:13:20,140 --> 00:13:24,730
because that it should be like user

00:13:21,670 --> 00:13:27,640
owned and when we use very like often or

00:13:24,730 --> 00:13:30,400
frequently used names then we would have

00:13:27,640 --> 00:13:31,840
like naming clashes all the time so we

00:13:30,400 --> 00:13:33,370
decided to use that like very sparingly

00:13:31,840 --> 00:13:35,170
and actually treat the whole restaurant

00:13:33,370 --> 00:13:39,910
type of being like userland

00:13:35,170 --> 00:13:42,430
and we we do have some types a few names

00:13:39,910 --> 00:13:43,750
that we have to block and to claim to

00:13:42,430 --> 00:13:45,970
actually give you some value in there

00:13:43,750 --> 00:13:50,740
but we try to come up with like names

00:13:45,970 --> 00:13:52,270
that are not very frequently used so but

00:13:50,740 --> 00:13:53,890
the field IDs can actually be changed so

00:13:52,270 --> 00:13:56,890
we were like we don't really care if we

00:13:53,890 --> 00:13:58,630
break the user user schema here because

00:13:56,890 --> 00:14:01,150
they could adjust to that except for

00:13:58,630 --> 00:14:02,890
like the compared to like the content

00:14:01,150 --> 00:14:04,240
type ID which you cannot change so we

00:14:02,890 --> 00:14:05,800
had to really come up with a way to

00:14:04,240 --> 00:14:08,650
figure that out make this as content

00:14:05,800 --> 00:14:10,180
type prefix but of course we just don't

00:14:08,650 --> 00:14:11,500
want to give you like chili arrows and

00:14:10,180 --> 00:14:14,140
being like yeah well your schema cannot

00:14:11,500 --> 00:14:16,480
be generated so we actually put a lot of

00:14:14,140 --> 00:14:19,360
love into our error messages which kind

00:14:16,480 --> 00:14:21,520
of looked like this and here it is

00:14:19,360 --> 00:14:22,810
actually quite easy to figure out what

00:14:21,520 --> 00:14:25,480
was it going on the schema generation

00:14:22,810 --> 00:14:27,220
failed because it contains a field that

00:14:25,480 --> 00:14:28,750
is called soos which is like reserved I

00:14:27,220 --> 00:14:31,540
actually don't know why anyone would

00:14:28,750 --> 00:14:35,500
like name their their field sirs if you

00:14:31,540 --> 00:14:37,240
have like this is already it would be

00:14:35,500 --> 00:14:40,840
inconsistent already but this is a good

00:14:37,240 --> 00:14:42,490
example to show it and what the graph

00:14:40,840 --> 00:14:45,370
here spec allows us is to put something

00:14:42,490 --> 00:14:46,690
like in the extensions field to give

00:14:45,370 --> 00:14:48,880
like more information about the error

00:14:46,690 --> 00:14:50,520
that has happened we decided to scope

00:14:48,880 --> 00:14:53,740
that and also ACTU contentful

00:14:50,520 --> 00:14:55,390
namespace so that for example if you

00:14:53,740 --> 00:14:56,770
later use a schema stitching to combine

00:14:55,390 --> 00:14:59,920
multiple graphic you'll api's together

00:14:56,770 --> 00:15:02,110
that we don't accidentally when two

00:14:59,920 --> 00:15:04,030
different parts of your API are like

00:15:02,110 --> 00:15:05,890
erroring some fields get like

00:15:04,030 --> 00:15:07,960
overwritten so we put everything like

00:15:05,890 --> 00:15:11,050
engine to the content for namespace we

00:15:07,960 --> 00:15:13,330
have a code that is like unique and

00:15:11,050 --> 00:15:14,920
won't change why the message could

00:15:13,330 --> 00:15:16,720
change as like a learning we'd also from

00:15:14,920 --> 00:15:18,040
the REST API that we basically cannot

00:15:16,720 --> 00:15:19,510
change our error messages because some

00:15:18,040 --> 00:15:21,670
clients might rely on that for the

00:15:19,510 --> 00:15:25,180
graphical API we said very explicitly

00:15:21,670 --> 00:15:26,620
the message can occur at any time change

00:15:25,180 --> 00:15:27,680
to actually make it like more expressive

00:15:26,620 --> 00:15:29,480
to the user and

00:15:27,680 --> 00:15:31,130
more machine readable way you have this

00:15:29,480 --> 00:15:34,339
extensions field and there the code

00:15:31,130 --> 00:15:36,080
won't change and also like the details

00:15:34,339 --> 00:15:38,089
shouldn't change maybe be like extended

00:15:36,080 --> 00:15:40,399
and as always you have like a request ID

00:15:38,089 --> 00:15:41,570
so when you reach out to the customer

00:15:40,399 --> 00:15:44,420
support you can just like give them

00:15:41,570 --> 00:15:45,830
request ID and then for example me or

00:15:44,420 --> 00:15:48,200
Tim can like go and figure out what was

00:15:45,830 --> 00:15:50,630
it going on we have that for all the

00:15:48,200 --> 00:15:52,490
different error messages which which

00:15:50,630 --> 00:15:55,700
could go wrong and they all kind of like

00:15:52,490 --> 00:15:56,930
look like this the details of course are

00:15:55,700 --> 00:15:59,450
dependent on what kind of error you're

00:15:56,930 --> 00:16:03,040
running into and but that is also done

00:15:59,450 --> 00:16:05,959
in a machine-readable way all the time

00:16:03,040 --> 00:16:09,940
so far so good so what was our latest

00:16:05,959 --> 00:16:14,120
design decision by now everything

00:16:09,940 --> 00:16:17,390
beforehand we had for the the locale in

00:16:14,120 --> 00:16:20,270
the query string for example that was a

00:16:17,390 --> 00:16:21,950
very simple design decision for us we

00:16:20,270 --> 00:16:23,899
didn't want the user to that specify

00:16:21,950 --> 00:16:25,640
like on each and every single like field

00:16:23,899 --> 00:16:27,200
or reference which kind of locale that

00:16:25,640 --> 00:16:29,000
should be so we're like ok let's put it

00:16:27,200 --> 00:16:32,450
in the query string and then we're good

00:16:29,000 --> 00:16:33,980
to go that bugged our Pio quite a bit

00:16:32,450 --> 00:16:35,839
and he wanted to keep everything like in

00:16:33,980 --> 00:16:37,279
graphical and because from the actual

00:16:35,839 --> 00:16:39,140
graph fields back it should be transport

00:16:37,279 --> 00:16:40,610
independent and if we rely on the Clara

00:16:39,140 --> 00:16:45,320
spring it's not transport independent

00:16:40,610 --> 00:16:47,830
anymore so what we came up with was to

00:16:45,320 --> 00:16:50,120
use the context so whenever you're like

00:16:47,830 --> 00:16:51,320
in a graphical resolver you have like

00:16:50,120 --> 00:16:52,400
different kind of like the parent I

00:16:51,320 --> 00:16:53,810
applied to got in and like some

00:16:52,400 --> 00:16:56,360
arguments and then there's also like

00:16:53,810 --> 00:16:58,430
some mysterious context objects that you

00:16:56,360 --> 00:17:01,430
can define by yourself and we came up

00:16:58,430 --> 00:17:05,569
with a cool way to cascade the like

00:17:01,430 --> 00:17:07,730
values from the context and that means

00:17:05,569 --> 00:17:09,800
we could finally allow to put the locale

00:17:07,730 --> 00:17:11,720
as an argument which then would for

00:17:09,800 --> 00:17:14,809
example look like this so you could say

00:17:11,720 --> 00:17:16,880
we want it like in in English then you

00:17:14,809 --> 00:17:18,260
get like the description English and if

00:17:16,880 --> 00:17:19,819
we wouldn't have like cascading you

00:17:18,260 --> 00:17:21,319
would need to do like categories and

00:17:19,819 --> 00:17:23,240
then like the local again but if it like

00:17:21,319 --> 00:17:25,600
doesn't change you if you don't want to

00:17:23,240 --> 00:17:28,370
like repeat it over and over again and

00:17:25,600 --> 00:17:29,809
so by now the like cascades and like

00:17:28,370 --> 00:17:34,490
through the context we can basically

00:17:29,809 --> 00:17:35,059
walk up the path and find the most the

00:17:34,490 --> 00:17:37,850
closest

00:17:35,059 --> 00:17:39,710
locate definition when this then

00:17:37,850 --> 00:17:42,200
actually once we had that

00:17:39,710 --> 00:17:43,640
had some awesome side effects we could

00:17:42,200 --> 00:17:46,340
actually allow switching between

00:17:43,640 --> 00:17:48,920
languages which beforehand wasn't really

00:17:46,340 --> 00:17:50,900
possible like you get like this locale

00:17:48,920 --> 00:17:53,360
equals s to risk saying and you could

00:17:50,900 --> 00:17:55,010
let God like all the locales that is the

00:17:53,360 --> 00:17:56,930
thing that it's not possible in graph QL

00:17:55,010 --> 00:17:58,880
because I changes the type I think and

00:17:56,930 --> 00:18:02,450
that would we cannot change the type

00:17:58,880 --> 00:18:04,520
based on the the locale that you're

00:18:02,450 --> 00:18:06,170
passing in because it's like it's a

00:18:04,520 --> 00:18:10,220
static schema that was like generated

00:18:06,170 --> 00:18:11,510
beforehand and also and that was

00:18:10,220 --> 00:18:13,130
actually then really amazing we could

00:18:11,510 --> 00:18:15,500
just like reuse the same thing with the

00:18:13,130 --> 00:18:17,090
cascading stuff to switch between like

00:18:15,500 --> 00:18:19,100
the published and preview content and

00:18:17,090 --> 00:18:22,180
this actually the last things I want to

00:18:19,100 --> 00:18:26,180
show you like how to do it so let's say

00:18:22,180 --> 00:18:28,310
you have a localized webpage but your

00:18:26,180 --> 00:18:29,750
restaurant is like a British restaurant

00:18:28,310 --> 00:18:31,160
so you know they will probably not be

00:18:29,750 --> 00:18:33,680
like a description in for example like

00:18:31,160 --> 00:18:35,480
in German so you of course want to show

00:18:33,680 --> 00:18:38,480
the description definitely in English

00:18:35,480 --> 00:18:40,490
but for making nice of food users the

00:18:38,480 --> 00:18:41,960
locales should be that the categories

00:18:40,490 --> 00:18:43,130
should be like in the user log here

00:18:41,960 --> 00:18:46,400
that's currently like visiting the page

00:18:43,130 --> 00:18:48,560
so that you get then get like the

00:18:46,400 --> 00:18:52,370
localized names for the for the

00:18:48,560 --> 00:18:54,350
categories and the user is a bit can

00:18:52,370 --> 00:18:57,590
better filter them and it feels more

00:18:54,350 --> 00:18:58,520
natural to him or her and here that

00:18:57,590 --> 00:18:59,870
would be like the description would be

00:18:58,520 --> 00:19:03,020
like an English and then the category

00:18:59,870 --> 00:19:05,390
whatever we pass in and then everything

00:19:03,020 --> 00:19:06,740
below that is in the user okay so if you

00:19:05,390 --> 00:19:08,360
want to switch back to english you would

00:19:06,740 --> 00:19:12,710
have to define that at some point and

00:19:08,360 --> 00:19:14,960
again and the same thing is possible

00:19:12,710 --> 00:19:16,880
with publish and preview content so I'd

00:19:14,960 --> 00:19:18,620
say you're currently working how the

00:19:16,880 --> 00:19:20,420
categories are named and want to figure

00:19:18,620 --> 00:19:22,970
that out but maybe someone else in your

00:19:20,420 --> 00:19:26,690
team is currently like working on the on

00:19:22,970 --> 00:19:27,620
the restaurant data and the you don't

00:19:26,690 --> 00:19:29,630
care about it for now

00:19:27,620 --> 00:19:31,370
it might even be like a broken state in

00:19:29,630 --> 00:19:32,750
the restaurant right now because we only

00:19:31,370 --> 00:19:35,810
like very date once you published so

00:19:32,750 --> 00:19:38,060
that they you can like play around and

00:19:35,810 --> 00:19:39,650
edit data and look at it and but when

00:19:38,060 --> 00:19:41,360
you actually are working on the

00:19:39,650 --> 00:19:43,400
categories you might want to see it in

00:19:41,360 --> 00:19:44,720
the context of the restaurant Howard how

00:19:43,400 --> 00:19:47,390
the restaurant now looks like with the

00:19:44,720 --> 00:19:49,100
new categories so you say hey give me

00:19:47,390 --> 00:19:50,690
like the description of the restaurant

00:19:49,100 --> 00:19:52,430
or the restaurant itself give it me give

00:19:50,690 --> 00:19:53,190
it to me like in the published form but

00:19:52,430 --> 00:19:55,890
then you

00:19:53,190 --> 00:19:58,490
which to the preview mode in the

00:19:55,890 --> 00:20:00,810
categories and that then has one

00:19:58,490 --> 00:20:02,460
implication or two implications the

00:20:00,810 --> 00:20:04,260
first one is the whole thing won't be

00:20:02,460 --> 00:20:06,390
cash it's like the thing we have like go

00:20:04,260 --> 00:20:07,710
to preview API as well because when you

00:20:06,390 --> 00:20:10,140
change the data you want to see the new

00:20:07,710 --> 00:20:11,910
data reflected immediately so the

00:20:10,140 --> 00:20:15,360
preview API in rest is currently much

00:20:11,910 --> 00:20:18,150
cash and then also the whole query won't

00:20:15,360 --> 00:20:20,520
be cached for graphical the second one

00:20:18,150 --> 00:20:22,110
is you need a preview access token with

00:20:20,520 --> 00:20:24,930
a preview access token you can also like

00:20:22,110 --> 00:20:26,790
access to publish data so for us felt

00:20:24,930 --> 00:20:28,860
like naturally that we require you to

00:20:26,790 --> 00:20:30,390
send preview token over and then you can

00:20:28,860 --> 00:20:32,850
access like both the publish and the

00:20:30,390 --> 00:20:35,160
preview data and if not you get an error

00:20:32,850 --> 00:20:37,440
that well that you need to pass and a

00:20:35,160 --> 00:20:41,850
preview of you're using a preview to

00:20:37,440 --> 00:20:44,550
somewhere so then the most important

00:20:41,850 --> 00:20:46,410
thing where can you try it out if you go

00:20:44,550 --> 00:20:48,720
to graph q all the content folder come

00:20:46,410 --> 00:20:50,640
then it will like redirect you to our

00:20:48,720 --> 00:20:52,350
documentation so you can get started

00:20:50,640 --> 00:20:55,920
there and read through it how it is like

00:20:52,350 --> 00:20:57,690
to drive if you add content v1 spaces

00:20:55,920 --> 00:20:59,970
and your space ID that's basically where

00:20:57,690 --> 00:21:02,790
you we agree fuel and pointers we

00:20:59,970 --> 00:21:04,950
decided to create here also I can name

00:21:02,790 --> 00:21:06,930
space so that we later on could

00:21:04,950 --> 00:21:10,410
eventually bring up other of our

00:21:06,930 --> 00:21:13,440
organizations for example also into a

00:21:10,410 --> 00:21:15,300
graph here without having like one

00:21:13,440 --> 00:21:18,450
really big API from the very beginning

00:21:15,300 --> 00:21:20,010
and also decided to go with a more

00:21:18,450 --> 00:21:22,440
explicit versioning here because

00:21:20,010 --> 00:21:25,860
probably no one knows but we actually

00:21:22,440 --> 00:21:30,480
have some versioning in the accept

00:21:25,860 --> 00:21:32,160
header only content type header but no

00:21:30,480 --> 00:21:33,600
one actually use it and we are not

00:21:32,160 --> 00:21:35,580
really enforcing that so that may

00:21:33,600 --> 00:21:38,040
actually made it very hard for a rest to

00:21:35,580 --> 00:21:40,290
to version it and here we set like okay

00:21:38,040 --> 00:21:41,850
we really put a v1 into the URL so

00:21:40,290 --> 00:21:45,270
whenever we want to put out like a v2

00:21:41,850 --> 00:21:46,770
API you would would not accidentally use

00:21:45,270 --> 00:21:49,320
that and we would not accidentally like

00:21:46,770 --> 00:21:51,120
break your data and you would like

00:21:49,320 --> 00:21:54,750
really need to opt in into the v2 and

00:21:51,120 --> 00:21:58,980
then if you append to the former one a

00:21:54,750 --> 00:22:01,620
slash Explorer then you this graphical

00:21:58,980 --> 00:22:03,270
interface gets spun up and you can like

00:22:01,620 --> 00:22:05,850
click around and explore it right some

00:22:03,270 --> 00:22:07,770
example query is this is something

00:22:05,850 --> 00:22:09,720
comes in very handy to explore how your

00:22:07,770 --> 00:22:11,580
graphical schema is like build and

00:22:09,720 --> 00:22:13,230
here's also the only exception was

00:22:11,580 --> 00:22:15,960
because I said earlier we want to not

00:22:13,230 --> 00:22:18,510
rely like on the Curie string well you

00:22:15,960 --> 00:22:20,460
cannot send the access token somehow

00:22:18,510 --> 00:22:22,350
different if you just the in the browser

00:22:20,460 --> 00:22:24,600
so you have to append the access token

00:22:22,350 --> 00:22:25,530
in the Curie string and that's like the

00:22:24,600 --> 00:22:27,360
only exception we're currently doing

00:22:25,530 --> 00:22:29,700
here but it's basically like in the

00:22:27,360 --> 00:22:32,610
graph to your API itself but just like

00:22:29,700 --> 00:22:36,179
for the exploration apart and then

00:22:32,610 --> 00:22:38,549
internally the access token gets added

00:22:36,179 --> 00:22:40,350
as a header so the usual

00:22:38,549 --> 00:22:42,210
authentication as in rest also stays

00:22:40,350 --> 00:22:44,370
true like this authorization header was

00:22:42,210 --> 00:22:47,630
like to bearer and then the CDA or CPA

00:22:44,370 --> 00:22:51,539
token like delivery or preview API token

00:22:47,630 --> 00:22:54,630
yeah and that was mainly it I kept my 20

00:22:51,539 --> 00:22:55,919
minutes quite good 23 minutes this is my

00:22:54,630 --> 00:22:58,049
Twitter handle in case you want to reach

00:22:55,919 --> 00:23:01,169
out and you can find the slides for this

00:22:58,049 --> 00:23:03,330
presentation on speaker back in a PDF

00:23:01,169 --> 00:23:06,090
format I hope the rendering issues by

00:23:03,330 --> 00:23:09,000
now are kind of resolved if not I will

00:23:06,090 --> 00:23:10,860
try to reapply it and then thank you and

00:23:09,000 --> 00:23:15,500
then draw the rest of the evening

00:23:10,860 --> 00:23:15,500

YouTube URL: https://www.youtube.com/watch?v=17PcKh9wGlQ


