Title: The State of Kotlin - Kotlin London - March 2018
Publication date: 2018-04-09
Playlist: Kotlin London
Description: 
	Zan Markan: 
The State of the Kotlin ecosystem

Over the last three months I ran a survey of the global Kotlin ecosystem. My goal was to learn how developers use and adopt Kotlin - either in work or side projects, or just for playing around, and what are some of the most popular resources for learning it.
The survey was a great success, and gained over 2400 responses in total! The results are meant to become a resource for the Kotlin community. Something we can all look at for interesting insights that will also help drive adoption of Kotlin in our teams and organisations.

To give you a taster, hereâ€™s a few questions I asked in the survey:
How big is Android as a proportion of all Kotlin developers
Are people happy naming libraries and tooling with K
What are the favourite features of the language
What kind of DSLs are people building with Kotlin and for what use-cases

In my talk will answer all these questions, and more. But be warned, some answers might surprise you. Speaker: Zan Markan

Zan is a Developer turned Evangelist at Pusher with over 8 years of experience in software development. He spends the days educating developers across the world about the wonders of realtime technologies and good API design, and nights fighting crime.
Before DevRel he used to dabble in mobile and SDK development, especially on Android. Currently he fancies Kotlin, Node, TypeScript, and the UX of APIs in general.
Other hobbies include speaking at conferences and yelling at computers.
Captions: 
	00:00:00,000 --> 00:00:06,379
hello everyone my name is n I work at

00:00:03,780 --> 00:00:09,570
pusher as a developer evangelist and

00:00:06,379 --> 00:00:14,460
today I would like to present you the

00:00:09,570 --> 00:00:17,250
state of Kotlin precisely I'm gonna

00:00:14,460 --> 00:00:19,109
present you the results of a survey that

00:00:17,250 --> 00:00:24,689
I've been running for the past three

00:00:19,109 --> 00:00:27,720
months that a bunch of you probably saw

00:00:24,689 --> 00:00:30,779
or even filled in actually let's do a

00:00:27,720 --> 00:00:35,520
show of hands who filled in the state of

00:00:30,779 --> 00:00:39,989
Coughlin survey about half that's good

00:00:35,520 --> 00:00:44,309
thank you everyone who who contributed

00:00:39,989 --> 00:00:47,039
who took their time to do it so yeah

00:00:44,309 --> 00:00:51,079
we'll be looking at where we are at the

00:00:47,039 --> 00:00:51,079
moment in the Coughlin ecosystem and

00:00:51,199 --> 00:00:58,949
yeah so I work at the pusher which is

00:00:55,559 --> 00:01:02,879
where we're hosting you today and Kotlin

00:00:58,949 --> 00:01:05,549
is used for all new Android SDK

00:01:02,879 --> 00:01:08,010
development here that's in products such

00:01:05,549 --> 00:01:13,080
as chat kit push notifications and feeds

00:01:08,010 --> 00:01:18,710
I played quite a large part to put it in

00:01:13,080 --> 00:01:21,030
there as the original Android enthusiast

00:01:18,710 --> 00:01:24,180
so yeah my background is Android

00:01:21,030 --> 00:01:30,780
development I moved into SDK development

00:01:24,180 --> 00:01:33,299
and currently I'm doing surveys jokes

00:01:30,780 --> 00:01:35,280
aside I love Kotlin Kotlin is I think

00:01:33,299 --> 00:01:36,990
it's it's a great language and more and

00:01:35,280 --> 00:01:39,210
more developers I spoke to they

00:01:36,990 --> 00:01:42,390
basically shared the opinion that it

00:01:39,210 --> 00:01:47,189
makes us happy I don't know why but it

00:01:42,390 --> 00:01:50,490
does so yeah with this survey I wanted

00:01:47,189 --> 00:01:52,470
to learn I wanted us to learn about the

00:01:50,490 --> 00:01:55,020
Kotlin ecosystem because no one's ever

00:01:52,470 --> 00:01:57,299
done it so we didn't really have a

00:01:55,020 --> 00:02:01,320
comprehensive view of what the ecosystem

00:01:57,299 --> 00:02:04,729
is I also want to produce something that

00:02:01,320 --> 00:02:06,840
can be used to promote Kotlin as a

00:02:04,729 --> 00:02:09,539
language that can be used by the

00:02:06,840 --> 00:02:11,459
community so something that you can take

00:02:09,539 --> 00:02:14,069
to your team and try to convince them

00:02:11,459 --> 00:02:15,840
that cotton is maybe the way to go

00:02:14,069 --> 00:02:17,909
if you're doing Android applications if

00:02:15,840 --> 00:02:24,379
you're doing native applications if

00:02:17,909 --> 00:02:26,640
you're doing any web stuff anything and

00:02:24,379 --> 00:02:29,909
yeah give back to the community

00:02:26,640 --> 00:02:33,209
My dear wish was that we get a thousand

00:02:29,909 --> 00:02:38,159
responses to the to the to the survey so

00:02:33,209 --> 00:02:41,219
yeah start in December start putting the

00:02:38,159 --> 00:02:44,849
questions together with a lot of help

00:02:41,219 --> 00:02:48,060
from the community I've gone through

00:02:44,849 --> 00:02:50,489
several iterations to kind of put the

00:02:48,060 --> 00:02:53,189
survey into the shape that was then

00:02:50,489 --> 00:02:56,879
released to the public and mid-january

00:02:53,189 --> 00:03:00,480
to mid March it was it was live it was

00:02:56,879 --> 00:03:03,419
running we're doing some promotion to

00:03:00,480 --> 00:03:06,150
get more and more people involved we

00:03:03,419 --> 00:03:09,359
even offered a prize which was a trip to

00:03:06,150 --> 00:03:11,849
coughlin Kampf the premier conference

00:03:09,359 --> 00:03:14,849
for Coughlin's developers this year is

00:03:11,849 --> 00:03:16,709
gonna be in October in Amsterdam and the

00:03:14,849 --> 00:03:21,500
prize was that essentially trip to

00:03:16,709 --> 00:03:24,720
Amsterdam with flights hotel and and

00:03:21,500 --> 00:03:28,859
ticket to the conference and we did a

00:03:24,720 --> 00:03:32,819
prize draw at the end was completely

00:03:28,859 --> 00:03:35,639
random and anyone who filled in the

00:03:32,819 --> 00:03:38,189
survey after email and wasn't a pusher

00:03:35,639 --> 00:03:43,139
employee or their close family member is

00:03:38,189 --> 00:03:46,560
pretty much legible to to win it and it

00:03:43,139 --> 00:03:49,319
was won by a person called nicolayevitch

00:03:46,560 --> 00:03:53,810
from Croatia so if you're watching a

00:03:49,319 --> 00:03:53,810
Nicola congratulations again

00:03:54,829 --> 00:04:02,670
it wasn't a flowers awesome so let's

00:04:00,139 --> 00:04:05,849
let's go on so I was hoping for a

00:04:02,670 --> 00:04:11,189
thousand responses we got almost three

00:04:05,849 --> 00:04:15,420
thousand which is scary and also super

00:04:11,189 --> 00:04:18,419
exciting it's also ten percent off state

00:04:15,420 --> 00:04:22,800
of j/s which is probably the one of the

00:04:18,419 --> 00:04:26,340
biggest state off kind of surveys going

00:04:22,800 --> 00:04:28,229
out there thirty three percent of people

00:04:26,340 --> 00:04:32,639
who landed on the survey actually

00:04:28,229 --> 00:04:34,710
completed it which my fellow marketeers

00:04:32,639 --> 00:04:38,430
also tell me it's it's a quite a good

00:04:34,710 --> 00:04:40,949
ratio and on average they took thirteen

00:04:38,430 --> 00:04:45,509
minutes and 14 seconds of their time to

00:04:40,949 --> 00:04:48,389
complete it doing some maths it also

00:04:45,509 --> 00:04:52,169
means that people have spent twenty five

00:04:48,389 --> 00:04:57,150
days filling the survey so yeah thank

00:04:52,169 --> 00:05:00,539
you so much the categories we surveyed

00:04:57,150 --> 00:05:03,180
we're how cuddling is being used how

00:05:00,539 --> 00:05:05,009
people learn Coughlin's what are some of

00:05:03,180 --> 00:05:08,190
the favorite features and how they are

00:05:05,009 --> 00:05:10,740
used and also Coughlin's zeitgeist which

00:05:08,190 --> 00:05:13,740
was a experiment I did to kind of grab

00:05:10,740 --> 00:05:16,650
more open-ended questions open-ended

00:05:13,740 --> 00:05:20,639
answers to questions and lastly I

00:05:16,650 --> 00:05:23,509
checked about demographics so yeah

00:05:20,639 --> 00:05:26,430
without further ado I would like to

00:05:23,509 --> 00:05:31,190
present you the state of Coughlin's in

00:05:26,430 --> 00:05:32,479
early 2018 let's look at the usage first

00:05:31,190 --> 00:05:37,440
mmm

00:05:32,479 --> 00:05:41,960
58% of people currently use Coughlin's

00:05:37,440 --> 00:05:45,090
on a project it's quite remarkable

00:05:41,960 --> 00:05:47,219
people who don't use it currently on a

00:05:45,090 --> 00:05:49,199
project they've maybe used it for

00:05:47,219 --> 00:05:54,780
learning or playing around that's like

00:05:49,199 --> 00:05:58,199
17% of those and 13% of surveyed people

00:05:54,780 --> 00:06:01,349
say they have no plans and they haven't

00:05:58,199 --> 00:06:04,260
used it so far among the rest there are

00:06:01,349 --> 00:06:06,590
people who plan to start using it or who

00:06:04,260 --> 00:06:10,330
use it in past or who

00:06:06,590 --> 00:06:15,130
only evaluated Kotlin as a potential

00:06:10,330 --> 00:06:15,130
language to make their software in

00:06:16,090 --> 00:06:22,550
people use Coughlin's in mostly in both

00:06:20,270 --> 00:06:25,160
work and personal projects out of the

00:06:22,550 --> 00:06:29,290
people who use it on a project anyway so

00:06:25,160 --> 00:06:29,290
that's 66 percent of people surveyed

00:06:29,350 --> 00:06:37,130
apart from that there are about 18

00:06:32,389 --> 00:06:44,840
percent each only doing work or side

00:06:37,130 --> 00:06:49,430
projects and out of curiosity how many

00:06:44,840 --> 00:06:50,510
of you are Android developers that's

00:06:49,430 --> 00:06:54,740
about right

00:06:50,510 --> 00:06:57,650
a lot of hands went up because according

00:06:54,740 --> 00:07:01,639
to survey 80% of people use Scotland to

00:06:57,650 --> 00:07:04,310
build Android applications it doesn't

00:07:01,639 --> 00:07:07,940
surprise me at all because it's very

00:07:04,310 --> 00:07:10,190
popular in Android and the ecosystem has

00:07:07,940 --> 00:07:14,090
been stuck with a quite a old version of

00:07:10,190 --> 00:07:16,820
Java for a very long time so yeah out of

00:07:14,090 --> 00:07:19,220
the work projects and to be honest it's

00:07:16,820 --> 00:07:21,830
this graph is pretty much the same for

00:07:19,220 --> 00:07:25,789
side projects 80% use it for Android

00:07:21,830 --> 00:07:28,039
development and about 30 31 % each use

00:07:25,789 --> 00:07:31,669
it for also server-side or SDK

00:07:28,039 --> 00:07:36,200
development there's a few others who use

00:07:31,669 --> 00:07:39,350
it for other type of things and yeah

00:07:36,200 --> 00:07:41,630
surprisingly the side projects they

00:07:39,350 --> 00:07:44,150
don't really defer like it's pretty much

00:07:41,630 --> 00:07:46,630
the same distribution here among other

00:07:44,150 --> 00:07:49,460
things people use it for scripting and

00:07:46,630 --> 00:07:52,250
obviously also experiments and just

00:07:49,460 --> 00:07:53,900
learning and playing around and I was

00:07:52,250 --> 00:07:55,610
also surprised to see data signs there

00:07:53,900 --> 00:07:57,860
people several people have mentioned

00:07:55,610 --> 00:08:02,080
that they use Kotlin to do some data

00:07:57,860 --> 00:08:02,080
sciences things which is pretty cool

00:08:03,700 --> 00:08:15,289
next thing that I checked was what's the

00:08:10,669 --> 00:08:18,950
percentage of people who who have kind

00:08:15,289 --> 00:08:19,950
of Coughlin as their projects only made

00:08:18,950 --> 00:08:23,100
in Coughlin

00:08:19,950 --> 00:08:25,050
so and compare that to like people who

00:08:23,100 --> 00:08:28,050
said they use it inside projects and

00:08:25,050 --> 00:08:34,520
people who use it in their work projects

00:08:28,050 --> 00:08:37,830
and the distribution is as seen so 55%

00:08:34,520 --> 00:08:40,200
use have hundred percent Coughlin

00:08:37,830 --> 00:08:41,910
projects in their side project so

00:08:40,200 --> 00:08:43,050
they're there like if you're doing

00:08:41,910 --> 00:08:45,630
something on the side they're probably

00:08:43,050 --> 00:08:48,000
smaller more experimental things and

00:08:45,630 --> 00:08:50,040
like a lot more people who are more

00:08:48,000 --> 00:08:53,850
comfortable just having full-on Coughlin

00:08:50,040 --> 00:08:56,610
there versus 25% for people who have it

00:08:53,850 --> 00:08:58,860
in their work projects which is also

00:08:56,610 --> 00:09:04,470
quite a nice number

00:08:58,860 --> 00:09:08,190
I guess pusher is amongst those 25% yeah

00:09:04,470 --> 00:09:14,370
so in work projects you see 25 and then

00:09:08,190 --> 00:09:17,280
about 20 to 15 to 20 percent in in other

00:09:14,370 --> 00:09:22,770
kind of distribution so 75 250 percent

00:09:17,280 --> 00:09:26,310
to 75 and so on 1.4 percent people said

00:09:22,770 --> 00:09:30,690
that they only use cotton intest in

00:09:26,310 --> 00:09:32,340
their work projects in their side

00:09:30,690 --> 00:09:34,320
projects the distribution is quite

00:09:32,340 --> 00:09:37,020
different because you see that it's

00:09:34,320 --> 00:09:41,400
heavily skewed towards full-on Coughlin

00:09:37,020 --> 00:09:45,030
or 75 to 100% Coughlin in android

00:09:41,400 --> 00:09:51,360
I think the 25 percent ish is probably

00:09:45,030 --> 00:09:55,130
xml for views yeah and a lot less people

00:09:51,360 --> 00:09:55,130
use it for tests on android apparently

00:09:55,730 --> 00:10:01,260
okay other programming languages because

00:09:58,740 --> 00:10:05,760
it's usually not the only program denies

00:10:01,260 --> 00:10:08,220
that you that you work with no surprise

00:10:05,760 --> 00:10:11,700
here Java is massive because it's kind

00:10:08,220 --> 00:10:15,990
of did older cousin off Kotlin anyway

00:10:11,700 --> 00:10:21,140
and so is Swift which is the super

00:10:15,990 --> 00:10:24,450
similar but not quite counterpart on iOS

00:10:21,140 --> 00:10:26,700
JavaScript and node are just big so

00:10:24,450 --> 00:10:28,920
that's why they were quite often

00:10:26,700 --> 00:10:30,860
mentioned and lastly there was Python I

00:10:28,920 --> 00:10:33,050
was quite surprised to see Python there

00:10:30,860 --> 00:10:35,120
so prevalent I'm not sure whether it's

00:10:33,050 --> 00:10:37,340
related to the data science or it's just

00:10:35,120 --> 00:10:40,160
people who do django and flask and other

00:10:37,340 --> 00:10:42,500
things or even scripting but yeah these

00:10:40,160 --> 00:10:44,120
are the few most popular other

00:10:42,500 --> 00:10:47,930
programming languages for Coughlin's

00:10:44,120 --> 00:10:51,200
developers another interesting feature

00:10:47,930 --> 00:10:53,690
of Kotlin is how close it is to java and

00:10:51,200 --> 00:10:59,660
how easy it is to migrate java code to

00:10:53,690 --> 00:11:01,820
Coughlin so we looked at how what kind

00:10:59,660 --> 00:11:06,710
of how many people decided to do this

00:11:01,820 --> 00:11:11,570
conversion so 87% of people migrated

00:11:06,710 --> 00:11:14,810
some Java code to Coughlin it also means

00:11:11,570 --> 00:11:16,760
that 13% of people didn't do that maybe

00:11:14,810 --> 00:11:19,370
they just started out writing Coughlin

00:11:16,760 --> 00:11:23,120
directly maybe they just created new

00:11:19,370 --> 00:11:24,980
classes and Cortland I don't know and

00:11:23,120 --> 00:11:27,920
yet those people who had done the

00:11:24,980 --> 00:11:31,880
migration a vast majority use the

00:11:27,920 --> 00:11:37,040
Wizards to convert individual classes 66

00:11:31,880 --> 00:11:43,940
percent 56 percent of people used did

00:11:37,040 --> 00:11:47,830
the conversion manually and 47 decided

00:11:43,940 --> 00:11:50,510
to convert only snippets by that I mean

00:11:47,830 --> 00:11:53,390
Android studio and IntelliJ allow you to

00:11:50,510 --> 00:11:55,010
if you copy Java code automatically

00:11:53,390 --> 00:11:56,660
convert that into Coughlin if you copy

00:11:55,010 --> 00:11:57,130
it into Coughlin file which is pretty

00:11:56,660 --> 00:11:59,930
cool

00:11:57,130 --> 00:12:01,910
there's also 10% of brave souls who

00:11:59,930 --> 00:12:08,240
decided to it's a good idea to convert

00:12:01,910 --> 00:12:10,160
the entire project and 20% all of people

00:12:08,240 --> 00:12:14,330
who done the migration decided it was a

00:12:10,160 --> 00:12:16,630
bad idea I imagine it went something

00:12:14,330 --> 00:12:16,630
like this

00:12:19,900 --> 00:12:28,640
so yeah I asked about the reasons

00:12:24,400 --> 00:12:31,430
dependencies were a big reason why the

00:12:28,640 --> 00:12:34,430
migration didn't go as planned so as

00:12:31,430 --> 00:12:38,090
reflection a couple of names popped up

00:12:34,430 --> 00:12:43,100
on Android it's it's dagger it's green

00:12:38,090 --> 00:12:45,800
Dao its realm there may be a bit some

00:12:43,100 --> 00:12:47,930
tricks involved to getting this migrated

00:12:45,800 --> 00:12:52,760
correctly in the early days it was also

00:12:47,930 --> 00:12:54,140
spring and we can't just look at

00:12:52,760 --> 00:12:56,320
technical reasons because there's also

00:12:54,140 --> 00:12:58,670
the organizational reasons they might be

00:12:56,320 --> 00:13:00,950
corporate policy at play too that

00:12:58,670 --> 00:13:02,330
prevents you from convert from just

00:13:00,950 --> 00:13:06,320
migrating to a completely new

00:13:02,330 --> 00:13:08,960
programming language so yeah these are

00:13:06,320 --> 00:13:10,670
quotes if you see slides like these it

00:13:08,960 --> 00:13:13,430
means that there are direct quotes that

00:13:10,670 --> 00:13:16,550
have taken from open-ended questions so

00:13:13,430 --> 00:13:21,170
someone made was made to revert it due

00:13:16,550 --> 00:13:23,090
to organizational rules or another team

00:13:21,170 --> 00:13:31,420
took the code and they didn't want

00:13:23,090 --> 00:13:33,410
Cortland sad on a more technical side

00:13:31,420 --> 00:13:37,010
migration triggered a number of changes

00:13:33,410 --> 00:13:39,200
in the Java code especially when you

00:13:37,010 --> 00:13:43,480
have a bunch of statics and it kind of

00:13:39,200 --> 00:13:47,060
breaks your API this is what can happen

00:13:43,480 --> 00:13:49,490
it's also that the wizard migration does

00:13:47,060 --> 00:13:51,380
not provide a dramatic Kotlin and it

00:13:49,490 --> 00:13:54,890
puts a lot of null assertions which can

00:13:51,380 --> 00:13:59,240
be considered code smells which means

00:13:54,890 --> 00:14:01,460
that you might want to rethink this and

00:13:59,240 --> 00:14:04,520
do some conversion manually as opposed

00:14:01,460 --> 00:14:09,320
to using the wizard so yeah that was

00:14:04,520 --> 00:14:11,660
usage of Kotlin moving on I decided to

00:14:09,320 --> 00:14:15,230
look at how people decide to learn

00:14:11,660 --> 00:14:20,060
Coughlin's what they use and when do

00:14:15,230 --> 00:14:22,760
they learn it so what's interesting is

00:14:20,060 --> 00:14:31,130
that this is a pretty much hockey stick

00:14:22,760 --> 00:14:32,780
graph it started in 2011 with very very

00:14:31,130 --> 00:14:36,980
small amounts so on

00:14:32,780 --> 00:14:42,140
nil 0.1% of people picked it up in 2011

00:14:36,980 --> 00:14:45,740
and exploded in mid 2017 after Google

00:14:42,140 --> 00:14:47,480
i/o when Google obviously announced that

00:14:45,740 --> 00:14:50,960
cotton is now officially supported

00:14:47,480 --> 00:14:53,330
language for Android applications so 46

00:14:50,960 --> 00:14:55,580
percent of all people surveyed said they

00:14:53,330 --> 00:15:00,730
started using Coughlin's after Google

00:14:55,580 --> 00:15:05,090
i/o another important spike was in 2015

00:15:00,730 --> 00:15:07,700
I can only speculate but there was also

00:15:05,090 --> 00:15:09,920
the time when Jake Wharton a very famous

00:15:07,700 --> 00:15:12,410
Android developer used to work at square

00:15:09,920 --> 00:15:14,450
now he's at Google released a white

00:15:12,410 --> 00:15:17,000
paper originally internally at square

00:15:14,450 --> 00:15:18,590
and then publicized it it was basically

00:15:17,000 --> 00:15:20,510
an evaluation of Coughlin as a

00:15:18,590 --> 00:15:23,810
programming language that Square can

00:15:20,510 --> 00:15:27,530
pick up and it was released as a Google

00:15:23,810 --> 00:15:30,110
Doc and it obviously exploded there was

00:15:27,530 --> 00:15:33,230
also a bunch of talks starting in 2015

00:15:30,110 --> 00:15:37,720
so that's probably what helped the

00:15:33,230 --> 00:15:40,490
explosion of kosslyn and popularity hmm

00:15:37,720 --> 00:15:44,480
so yeah reasons why people start

00:15:40,490 --> 00:15:46,430
learning it Google support in Kotlin

00:15:44,480 --> 00:15:48,710
officially on Android it's definitely a

00:15:46,430 --> 00:15:51,620
big one so is JetBrains

00:15:48,710 --> 00:15:54,800
so big companies like that big

00:15:51,620 --> 00:15:58,700
respectable companies when people see it

00:15:54,800 --> 00:16:00,700
that's kind of their idea to just kind

00:15:58,700 --> 00:16:02,810
of believe and trust those companies

00:16:00,700 --> 00:16:05,600
tooling is also important

00:16:02,810 --> 00:16:07,960
luckily Coughlin has JetBrains behind

00:16:05,600 --> 00:16:10,790
them which are in my opinion the best

00:16:07,960 --> 00:16:14,180
IDE makers in the world

00:16:10,790 --> 00:16:16,070
so tooling is there and then there's

00:16:14,180 --> 00:16:18,920
community our already mentioned jake

00:16:16,070 --> 00:16:21,560
wharton and there's also Christina Lee

00:16:18,920 --> 00:16:24,020
and Antonio Leyva and a lot of others

00:16:21,560 --> 00:16:28,370
who especially in the Android space

00:16:24,020 --> 00:16:31,010
helped to popularize Coughlin and on the

00:16:28,370 --> 00:16:32,960
JetBrains side there is Hadi Hariri

00:16:31,010 --> 00:16:36,110
Svetlana Zakharova and Andre brass love

00:16:32,960 --> 00:16:39,530
and many others who also did the same

00:16:36,110 --> 00:16:43,310
thing one person who answered the survey

00:16:39,530 --> 00:16:45,740
also said they were introduced to Kotlin

00:16:43,310 --> 00:16:46,430
by their friend Leo so Leo if you're

00:16:45,740 --> 00:16:50,560
watching

00:16:46,430 --> 00:16:53,660
thank you you're a good person

00:16:50,560 --> 00:16:56,570
so yeah among other quotes and reasons

00:16:53,660 --> 00:16:58,520
why people picked it up is the

00:16:56,570 --> 00:17:01,210
popularity of Coughlin in a short period

00:16:58,520 --> 00:17:06,110
of time we've seen the hockey stick

00:17:01,210 --> 00:17:09,050
graph it's really astonishing Java was

00:17:06,110 --> 00:17:12,800
very verbose and Coughlin is just love

00:17:09,050 --> 00:17:17,390
and happiness I guess I think that was

00:17:12,800 --> 00:17:20,319
like Java being Java was one of the

00:17:17,390 --> 00:17:24,290
biggest most often repeated reasons why

00:17:20,319 --> 00:17:25,850
Kotlin is so so popular so for instance

00:17:24,290 --> 00:17:29,090
this one it's like Java plus plus

00:17:25,850 --> 00:17:33,140
although I don't think I don't know what

00:17:29,090 --> 00:17:35,510
to think about this so yeah the

00:17:33,140 --> 00:17:37,820
resources that people used to learn no

00:17:35,510 --> 00:17:40,550
surprise Coughlin Lang dot org the

00:17:37,820 --> 00:17:44,780
official website is almost 90% of people

00:17:40,550 --> 00:17:47,630
use this to learn Coughlin and followed

00:17:44,780 --> 00:17:52,340
by different talks at conferences and

00:17:47,630 --> 00:17:56,690
resources like Kotlin cones the the most

00:17:52,340 --> 00:17:59,210
prevalent Community Supported projects

00:17:56,690 --> 00:18:01,550
are I would say Kotlin weekly which is a

00:17:59,210 --> 00:18:03,380
newsletter which pushers has been

00:18:01,550 --> 00:18:08,809
sponsoring for the last couple of months

00:18:03,380 --> 00:18:11,240
and the Kotlin for Android developers

00:18:08,809 --> 00:18:13,100
it's a book by Antonio Leyva it's been

00:18:11,240 --> 00:18:17,150
around for a while he published it on

00:18:13,100 --> 00:18:20,090
lean pop I think at first and then it's

00:18:17,150 --> 00:18:24,080
been quite popular and then yeah

00:18:20,090 --> 00:18:26,660
different blogs different courses I

00:18:24,080 --> 00:18:28,760
would also like to pay attention to the

00:18:26,660 --> 00:18:31,250
Coughlin Academy which is a publication

00:18:28,760 --> 00:18:32,840
on medium currently it's had four point

00:18:31,250 --> 00:18:38,450
eight percent of respondents say they

00:18:32,840 --> 00:18:41,000
kind of picked it up from they learned

00:18:38,450 --> 00:18:43,580
Coughlin from it but I think given that

00:18:41,000 --> 00:18:46,400
they're producing so many great pieces

00:18:43,580 --> 00:18:52,820
of content it's gonna be a lot more

00:18:46,400 --> 00:18:57,080
prevalent in the following iterations so

00:18:52,820 --> 00:18:58,450
yeah developers who learn Catalan come

00:18:57,080 --> 00:19:00,350
from different backgrounds

00:18:58,450 --> 00:19:03,289
mostly Java Android

00:19:00,350 --> 00:19:06,830
unsurprisingly but also front-end

00:19:03,289 --> 00:19:09,289
back-end desktop development other

00:19:06,830 --> 00:19:11,720
mobile they may come from Swift maybe

00:19:09,289 --> 00:19:13,880
maybe Swift developers decided to hate

00:19:11,720 --> 00:19:18,409
they have a cool thing on androids as

00:19:13,880 --> 00:19:20,990
well let's pick this up yeah three point

00:19:18,409 --> 00:19:22,460
eight percent of people decided hey I'm

00:19:20,990 --> 00:19:25,179
just gonna learn Coughlin from scratch

00:19:22,460 --> 00:19:27,470
which is great I want to see what this

00:19:25,179 --> 00:19:31,549
what this changes to in the in the

00:19:27,470 --> 00:19:33,679
following years so yeah this was where

00:19:31,549 --> 00:19:36,950
people come from how people learn and

00:19:33,679 --> 00:19:39,620
what people used to learn but let's talk

00:19:36,950 --> 00:19:43,940
about the features because it's it's got

00:19:39,620 --> 00:19:48,620
some pretty amazing features null safety

00:19:43,940 --> 00:19:50,720
is by far the most favorite one so

00:19:48,620 --> 00:19:52,610
eighty percent of people say they they

00:19:50,720 --> 00:19:54,529
love null safety this was a multiple

00:19:52,610 --> 00:19:57,679
choice question so they could people

00:19:54,529 --> 00:20:03,620
could say they love all of them I try to

00:19:57,679 --> 00:20:05,389
encourage them to pick only three follow

00:20:03,620 --> 00:20:07,490
the following null safety you've got

00:20:05,389 --> 00:20:09,429
extension functions Java inter up in

00:20:07,490 --> 00:20:13,580
data classes which which are favored by

00:20:09,429 --> 00:20:15,710
sixty something percent of people then

00:20:13,580 --> 00:20:19,759
followed by higher-order functions and

00:20:15,710 --> 00:20:22,940
type inference about 40 ish something

00:20:19,759 --> 00:20:25,179
and lastly you've got the newer features

00:20:22,940 --> 00:20:28,309
like multi-platform support and

00:20:25,179 --> 00:20:31,490
co-routines which have been introduced

00:20:28,309 --> 00:20:34,480
in the later versions of Kotlin at 20

00:20:31,490 --> 00:20:37,490
something percent before to be precise

00:20:34,480 --> 00:20:39,230
among other favorite features you've got

00:20:37,490 --> 00:20:41,750
the when key word you got the ray fide

00:20:39,230 --> 00:20:43,960
keyword and you got sealed classes and

00:20:41,750 --> 00:20:48,950
lambdas that popped up often during the

00:20:43,960 --> 00:20:53,480
the comments there was also a blooper in

00:20:48,950 --> 00:20:57,080
the original iteration of the of the

00:20:53,480 --> 00:20:59,720
survey I must have come from the

00:20:57,080 --> 00:21:03,799
screening of the last Jedi and then

00:20:59,720 --> 00:21:06,620
writing the writing the questions

00:21:03,799 --> 00:21:08,990
because I confused higher-order

00:21:06,620 --> 00:21:11,779
functions with first order functions and

00:21:08,990 --> 00:21:14,000
if you follow Star Wars first order is

00:21:11,779 --> 00:21:19,580
the are the baddies of the new

00:21:14,000 --> 00:21:22,250
trilogy so yeah bit of a blooper so yeah

00:21:19,580 --> 00:21:24,380
if we look at the breakdown of different

00:21:22,250 --> 00:21:28,370
function of different features of

00:21:24,380 --> 00:21:31,810
Coughlin's 77 percent said that they've

00:21:28,370 --> 00:21:35,180
used extension functions extensions are

00:21:31,810 --> 00:21:36,110
you can easily add what would otherwise

00:21:35,180 --> 00:21:38,990
have to be

00:21:36,110 --> 00:21:42,850
static utility classes static utility

00:21:38,990 --> 00:21:44,870
methods in Java to existing classes

00:21:42,850 --> 00:21:48,470
they're used to reduce Android

00:21:44,870 --> 00:21:50,420
boilerplate they're used to kind of

00:21:48,470 --> 00:21:52,850
replace utility classes as I just

00:21:50,420 --> 00:21:56,450
mentioned a lot of people mention

00:21:52,850 --> 00:21:58,340
conversions so strings object things

00:21:56,450 --> 00:22:03,560
that get from API is they just can

00:21:58,340 --> 00:22:06,260
convert them and dsls what people say

00:22:03,560 --> 00:22:08,270
about them we felt like going overboard

00:22:06,260 --> 00:22:10,610
with them now trying to find happy

00:22:08,270 --> 00:22:12,820
medium they're not the best thing but

00:22:10,610 --> 00:22:17,600
because because they can easily be

00:22:12,820 --> 00:22:19,790
easily be abused and overused the most

00:22:17,600 --> 00:22:25,370
important use case is lambda parameters

00:22:19,790 --> 00:22:27,500
for dsl style builders and for clean

00:22:25,370 --> 00:22:30,290
code because they make the code more

00:22:27,500 --> 00:22:32,450
readable because you can just name

00:22:30,290 --> 00:22:35,870
different things on things like strings

00:22:32,450 --> 00:22:41,600
integers any any given object you can

00:22:35,870 --> 00:22:44,450
just call them different on the other

00:22:41,600 --> 00:22:48,320
side you have cortines introduced more

00:22:44,450 --> 00:22:51,250
recently and only 20 well not only but

00:22:48,320 --> 00:22:54,920
29 percent of people have used them

00:22:51,250 --> 00:22:58,100
mostly for threading and any i/o UI

00:22:54,920 --> 00:23:02,360
based operations and also as a

00:22:58,100 --> 00:23:05,660
replacement for our X Java rx Java is

00:23:02,360 --> 00:23:08,330
the reactive extensions for Java it's is

00:23:05,660 --> 00:23:12,440
the library brings us observables and

00:23:08,330 --> 00:23:15,830
the reactive paradigm but most people on

00:23:12,440 --> 00:23:17,420
Android mostly use it for for simplified

00:23:15,830 --> 00:23:20,720
threading and scheduling things on

00:23:17,420 --> 00:23:24,080
different threads so coroutines because

00:23:20,720 --> 00:23:26,990
they're just that are probably gonna be

00:23:24,080 --> 00:23:27,920
taking a bit of limelight from Java or X

00:23:26,990 --> 00:23:30,140
Java in that

00:23:27,920 --> 00:23:31,730
since there's also a bunch of people who

00:23:30,140 --> 00:23:34,310
said they come from the C sharp

00:23:31,730 --> 00:23:37,660
background and they've missed the async

00:23:34,310 --> 00:23:41,540
and await keywords so they've used that

00:23:37,660 --> 00:23:44,000
so yeah some people also say they have

00:23:41,540 --> 00:23:47,000
used it with arrow because they use it

00:23:44,000 --> 00:23:49,790
for four comprehensions I've got back

00:23:47,000 --> 00:23:52,820
over there in the audience who's one of

00:23:49,790 --> 00:23:55,370
the main contributors to arrow if you

00:23:52,820 --> 00:23:58,990
want if having error questions please

00:23:55,370 --> 00:23:58,990
ask him

00:24:01,360 --> 00:24:05,330
someone said they stopped using

00:24:03,650 --> 00:24:09,140
co-routines because they are

00:24:05,330 --> 00:24:12,440
experimental fair enough they actually

00:24:09,140 --> 00:24:15,680
are and someone used them fully in

00:24:12,440 --> 00:24:21,950
production for a FinTech solution any

00:24:15,680 --> 00:24:24,380
munzo developers here no okay

00:24:21,950 --> 00:24:27,350
they also provide a very funny API when

00:24:24,380 --> 00:24:33,530
used to wrap J's promises I have no idea

00:24:27,350 --> 00:24:36,500
what this means another popular thing in

00:24:33,530 --> 00:24:39,590
Kotlin are the non JVM features

00:24:36,500 --> 00:24:45,800
targeting being able to target other

00:24:39,590 --> 00:24:48,500
platforms 26% out of which 15% are

00:24:45,800 --> 00:24:51,340
excited about coffee native so the

00:24:48,500 --> 00:24:54,310
native compilation target for Kotlin

00:24:51,340 --> 00:24:58,570
there's going to be possibility for

00:24:54,310 --> 00:25:03,650
doing writing Coughlin to be executed on

00:24:58,570 --> 00:25:07,280
iOS and native as well Coughlin jeaious

00:25:03,650 --> 00:25:16,640
with 11% and lastly multi-platform

00:25:07,280 --> 00:25:18,700
Coughlin with 7% of usage outside of

00:25:16,640 --> 00:25:21,920
features I also asked about build tools

00:25:18,700 --> 00:25:25,430
so what do people use to built Coughlin

00:25:21,920 --> 00:25:28,490
projects no surprise here again Android

00:25:25,430 --> 00:25:31,700
studio is with 75% clearly in the in the

00:25:28,490 --> 00:25:35,360
lead followed by IntelliJ at 65 and

00:25:31,700 --> 00:25:40,480
Gradle at 62 they're all used for

00:25:35,360 --> 00:25:41,929
Android development so no surprise here

00:25:40,480 --> 00:25:44,919
I

00:25:41,929 --> 00:25:49,759
quite surprised and disappointed why

00:25:44,919 --> 00:25:52,940
cobalt the native Kotlin built system is

00:25:49,759 --> 00:25:56,059
only used by 1.1 percent of people

00:25:52,940 --> 00:25:59,860
honestly I haven't used it so it

00:25:56,059 --> 00:26:04,309
shouldn't surprise me that much but yeah

00:25:59,860 --> 00:26:07,460
other tools included basil and Griffin

00:26:04,309 --> 00:26:12,399
and also buck apparently there is

00:26:07,460 --> 00:26:12,399
support for buck as well in for Kotlin

00:26:13,929 --> 00:26:24,769
41 percent have used a DSL in Kotlin

00:26:19,360 --> 00:26:29,210
prevalent is anko with 23 percent anko

00:26:24,769 --> 00:26:33,259
is the UI declaration library for for

00:26:29,210 --> 00:26:35,779
Android actually it's 24 percent Kotlin

00:26:33,259 --> 00:26:38,600
Gradle the ability to write Gradle

00:26:35,779 --> 00:26:41,779
plugins in Kotlin is another one with

00:26:38,600 --> 00:26:47,740
about 17 percent and lastly you've got

00:26:41,779 --> 00:26:52,909
cotton XHTML the Dom manipulation DSL

00:26:47,740 --> 00:26:54,320
with 5.6 among the others they're mostly

00:26:52,909 --> 00:26:56,869
homegrown DSL

00:26:54,320 --> 00:27:03,259
because 24 percent have actually

00:26:56,869 --> 00:27:06,740
developed a DSL themselves what for it's

00:27:03,259 --> 00:27:10,519
mostly used for a lot of people have

00:27:06,740 --> 00:27:12,519
mentioned Jake Wharton's again Jake is

00:27:10,519 --> 00:27:16,279
getting boring

00:27:12,519 --> 00:27:21,529
Jake Wharton's testing robots it's it's

00:27:16,279 --> 00:27:24,619
a it's a blog that he wrote about nicer

00:27:21,529 --> 00:27:28,220
testing on Android with write by writing

00:27:24,619 --> 00:27:32,110
a DSL a lot of people write UI

00:27:28,220 --> 00:27:35,299
declarations and custom data structures

00:27:32,110 --> 00:27:39,379
dsls but there's so many use cases from

00:27:35,299 --> 00:27:41,320
banks to AI to to all of that so people

00:27:39,379 --> 00:27:44,119
have mentioned pretty much everything I

00:27:41,320 --> 00:27:47,330
was really interested in this actually

00:27:44,119 --> 00:27:49,850
it's you've probably seen that a lot of

00:27:47,330 --> 00:27:53,570
libraries are replacing sees with case

00:27:49,850 --> 00:27:55,190
so there was category which was spelled

00:27:53,570 --> 00:28:00,680
with a k

00:27:55,190 --> 00:28:02,810
there is inject with a k' again so I

00:28:00,680 --> 00:28:05,450
asked like what do you think about this

00:28:02,810 --> 00:28:08,630
do you like it dude don't most people

00:28:05,450 --> 00:28:14,330
are indifferent but 32 percent of people

00:28:08,630 --> 00:28:17,150
say that it should be compulsory and 10

00:28:14,330 --> 00:28:22,520
percent of people say that KD did it two

00:28:17,150 --> 00:28:25,640
decades ago but not not everyone is so

00:28:22,520 --> 00:28:28,330
enthused the survey started with a

00:28:25,640 --> 00:28:30,280
button saying comments with a k' so

00:28:28,330 --> 00:28:35,960
someone didn't like it

00:28:30,280 --> 00:28:37,520
classic Dylan so yeah that's enough for

00:28:35,960 --> 00:28:39,380
features let's look at the zeitgeist

00:28:37,520 --> 00:28:42,020
what people actually think about cotton

00:28:39,380 --> 00:28:45,550
why do they what do they miss what do

00:28:42,020 --> 00:28:49,280
they like 29% of people say they are

00:28:45,550 --> 00:28:49,760
missing things in Kotlin most dearly

00:28:49,280 --> 00:28:53,080
missed

00:28:49,760 --> 00:28:57,980
is the ternary operator at least for the

00:28:53,080 --> 00:29:03,920
for the server itself s a.m. for Kotlin

00:28:57,980 --> 00:29:07,610
classes is also a big one and yeah

00:29:03,920 --> 00:29:09,170
there's like a lot of people miss new

00:29:07,610 --> 00:29:12,050
things all the time

00:29:09,170 --> 00:29:13,940
syntax sugar someone missed link so must

00:29:12,050 --> 00:29:15,920
be all the c-sharp developers out there

00:29:13,940 --> 00:29:18,560
apparently I've heard there is actually

00:29:15,920 --> 00:29:23,000
a alternative to link in Coughlin but I

00:29:18,560 --> 00:29:25,220
haven't I'm not aware of it it's

00:29:23,000 --> 00:29:28,010
interesting because a lot of people who

00:29:25,220 --> 00:29:30,830
filled in the JetBrains survey called

00:29:28,010 --> 00:29:32,930
Coughlin future features they asked for

00:29:30,830 --> 00:29:36,640
collection literals and they weren't

00:29:32,930 --> 00:29:40,780
that often mentioned in

00:29:36,640 --> 00:29:42,760
in my survey so yeah more things that

00:29:40,780 --> 00:29:47,500
they're missed so custom operations

00:29:42,760 --> 00:29:47,980
support for view a single multi-platform

00:29:47,500 --> 00:29:51,789
IDE

00:29:47,980 --> 00:29:54,400
I think jet the IntelliJ does it for up

00:29:51,789 --> 00:29:57,660
to an extent and there's also Swift's

00:29:54,400 --> 00:30:00,280
guard statements so like all the i/os

00:29:57,660 --> 00:30:04,929
transplants would be missing the guard

00:30:00,280 --> 00:30:08,460
statements from Swift 21% of people

00:30:04,929 --> 00:30:11,549
don't like certain features in Kotlin

00:30:08,460 --> 00:30:14,860
they don't like companion objects

00:30:11,549 --> 00:30:17,500
because the way it does this kind of

00:30:14,860 --> 00:30:21,760
interacts or kind of counteract statics

00:30:17,500 --> 00:30:24,100
in Java some people don't like it sold

00:30:21,760 --> 00:30:27,820
public by default even though it's also

00:30:24,100 --> 00:30:32,679
quite immutable by default someone says

00:30:27,820 --> 00:30:37,809
it's not a dynamic language not sure

00:30:32,679 --> 00:30:41,500
what to think about this but yeah but

00:30:37,809 --> 00:30:43,360
yeah what is the best ones though what

00:30:41,500 --> 00:30:45,039
people like they're like the features

00:30:43,360 --> 00:30:48,549
they're like the null safety they like

00:30:45,039 --> 00:30:52,659
the core routines they like the they're

00:30:48,549 --> 00:30:54,429
like Java interoperability they also

00:30:52,659 --> 00:30:56,470
like it's a modern programming language

00:30:54,429 --> 00:31:01,840
again too Swift typescript and others

00:30:56,470 --> 00:31:05,320
they like it's not a Java they're like

00:31:01,840 --> 00:31:07,000
it's fun pun intended because functions

00:31:05,320 --> 00:31:09,850
in Coughlin's start with a fun are

00:31:07,000 --> 00:31:13,140
declared with the fun and platform

00:31:09,850 --> 00:31:16,419
independence was quite often mentioned

00:31:13,140 --> 00:31:18,789
obviously it's also a very functional

00:31:16,419 --> 00:31:22,539
friendly programming language so that

00:31:18,789 --> 00:31:25,600
was quite frequently mentioned - my

00:31:22,539 --> 00:31:28,390
favorite quotes about this was it can be

00:31:25,600 --> 00:31:33,309
read like a story I think that's just

00:31:28,390 --> 00:31:37,049
nice and another one I smile again when

00:31:33,309 --> 00:31:41,049
writing code that's just poetic isn't it

00:31:37,049 --> 00:31:42,510
and the language does not get in the way

00:31:41,049 --> 00:31:46,720
of getting a job done

00:31:42,510 --> 00:31:48,400
it's pretty cool and my favorite one

00:31:46,720 --> 00:31:52,630
actually yes

00:31:48,400 --> 00:31:54,580
to combat the programming language I'm

00:31:52,630 --> 00:31:56,290
not sure whether that means the arcade

00:31:54,580 --> 00:31:58,300
version was better than the home console

00:31:56,290 --> 00:32:01,210
ones but yeah

00:31:58,300 --> 00:32:05,920
honestly if anyone has any ideas I'd

00:32:01,210 --> 00:32:08,140
like to learn what what that meant so

00:32:05,920 --> 00:32:12,280
yeah that's the Kotlin zeitgeist and

00:32:08,140 --> 00:32:14,830
lastly we've got the demographics we

00:32:12,280 --> 00:32:18,190
learned that Kotlin airs live everywhere

00:32:14,830 --> 00:32:22,050
on earth that is we haven't detected

00:32:18,190 --> 00:32:24,790
anyone coming in from outer space yet

00:32:22,050 --> 00:32:28,210
most of the surveyed people are employed

00:32:24,790 --> 00:32:31,840
or in being students but there is also

00:32:28,210 --> 00:32:36,700
others like CEO startup founders interns

00:32:31,840 --> 00:32:40,690
all sorts how long have people been

00:32:36,700 --> 00:32:43,800
working as developers I think this is a

00:32:40,690 --> 00:32:47,050
pretty standard distribution honestly I

00:32:43,800 --> 00:32:49,210
will when we release the report we're

00:32:47,050 --> 00:32:51,280
gonna compare this with the Stack

00:32:49,210 --> 00:32:55,240
Overflow one just to see how how it is

00:32:51,280 --> 00:33:01,870
all stacks against each other number of

00:32:55,240 --> 00:33:05,490
people in your organization has there is

00:33:01,870 --> 00:33:08,670
a big spike with 10 to 50 people and

00:33:05,490 --> 00:33:11,680
quite a large spike with the freelance

00:33:08,670 --> 00:33:14,350
but nothing nothing scary there is quite

00:33:11,680 --> 00:33:19,650
a uniform distribution across the other

00:33:14,350 --> 00:33:22,720
other size of companies so imagine the

00:33:19,650 --> 00:33:25,270
10 to 50 people are like small agencies

00:33:22,720 --> 00:33:28,810
startups that are quite eager to try out

00:33:25,270 --> 00:33:33,330
new things quite flexible to move move

00:33:28,810 --> 00:33:38,140
quickly and how many developers are in

00:33:33,330 --> 00:33:41,050
the organization's a big spike at 2 to 5

00:33:38,140 --> 00:33:46,300
developers it probably means Android

00:33:41,050 --> 00:33:47,950
themes working on Kotlin that's my my

00:33:46,300 --> 00:33:54,790
hunch because that's kind of the size of

00:33:47,950 --> 00:33:56,740
a Android team 3.7 percent of people

00:33:54,790 --> 00:34:00,130
have more than 50 coffee and developers

00:33:56,740 --> 00:34:01,250
in their wards so Google JetBrains the

00:34:00,130 --> 00:34:05,960
likes

00:34:01,250 --> 00:34:08,600
sector's no surprise here Tech is Dec is

00:34:05,960 --> 00:34:10,669
leading the charge and pretty uniform

00:34:08,600 --> 00:34:17,240
distribution unless you're working in

00:34:10,669 --> 00:34:20,510
government or insurance so yeah that was

00:34:17,240 --> 00:34:22,190
that was a demographics and I would like

00:34:20,510 --> 00:34:24,860
to ask you what do you think about the

00:34:22,190 --> 00:34:27,290
future of Kotlin and the future of state

00:34:24,860 --> 00:34:29,149
of Kotlin if you have any questions that

00:34:27,290 --> 00:34:30,919
you would like to see asked and the

00:34:29,149 --> 00:34:32,889
future iterations because there will be

00:34:30,919 --> 00:34:37,870
more what would they be

00:34:32,889 --> 00:34:41,810
get in touch please and let me know and

00:34:37,870 --> 00:34:44,720
we can make this a great experience and

00:34:41,810 --> 00:34:47,149
use this to kind of just grow the

00:34:44,720 --> 00:34:50,149
Coughlin community further that was

00:34:47,149 --> 00:34:52,590
state of Cortland and I am zan Markin

00:34:50,149 --> 00:34:57,429
thank you

00:34:52,590 --> 00:34:57,429

YouTube URL: https://www.youtube.com/watch?v=BMOAcZdOzGc


