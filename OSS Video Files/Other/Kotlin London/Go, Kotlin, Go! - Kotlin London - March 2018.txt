Title: Go, Kotlin, Go! - Kotlin London - March 2018
Publication date: 2018-04-09
Playlist: Kotlin London
Description: 
	Uberto Barbini: Go Kotlin Go!

I will share some experience on writing a software to play the game of Go in Kotlin.
The game of Go is born in China more than 2000 years ago and despite its very simple rules is considered more complex than chess and so one of the most interesting from a software developer point of view. Until 2018 when AlphaGo beated the world champion, it was considered the humanity's last stand.
I'll present a didactic go bot engine I developed in Kotlin. It's very simple but it is already able to give interesting matches.
The session will be split in three parts: First an introduction on game of Go and why is so interesting.
Second part is about some game algorithms, side to side with Python equivalents to compare the two styles.
Finally some considerations on performance, how to identify bottlenecks and how to improve them. Some counterintuitive facts I discovered in the meanwhile.
As final note, I'll offer some insight on current work on a deep learning engine to bring it to the next level.

Speaker: Uberto Barbini
Captions: 
	00:00:00,000 --> 00:00:07,950
I will present a some worker that I did

00:00:02,669 --> 00:00:09,510
on courtroom as I said I actually heard

00:00:07,950 --> 00:00:12,240
about cutting the first time three years

00:00:09,510 --> 00:00:15,750
ago but I just started work in a world

00:00:12,240 --> 00:00:23,180
on cotton basically end of the last year

00:00:15,750 --> 00:00:26,609
and so let's let's talk about the goal I

00:00:23,180 --> 00:00:31,560
don't know how many of you have had the

00:00:26,609 --> 00:00:36,600
game of go okay so on and so this talk

00:00:31,560 --> 00:00:41,550
will be my talk talk about how to do a

00:00:36,600 --> 00:00:44,100
computer program play go and okay this

00:00:41,550 --> 00:00:48,660
has some information if you want to know

00:00:44,100 --> 00:00:54,780
and in the innocence well let's talk

00:00:48,660 --> 00:00:58,859
about go became very famous suddenly I

00:00:54,780 --> 00:01:02,609
mean on the general public last year

00:00:58,859 --> 00:01:05,040
because it was at the last game where

00:01:02,609 --> 00:01:10,590
the computer was not able to beat the

00:01:05,040 --> 00:01:13,850
human and it was predicted that was you

00:01:10,590 --> 00:01:16,799
will take at least another 20 years to

00:01:13,850 --> 00:01:19,320
computer to beat a human but the last

00:01:16,799 --> 00:01:23,299
year Google with the deep learning

00:01:19,320 --> 00:01:27,540
managed to beat the world world champion

00:01:23,299 --> 00:01:30,840
and this was a quite big news that at

00:01:27,540 --> 00:01:34,430
the beginning nobody was really ready to

00:01:30,840 --> 00:01:39,450
accept that and you may wonder why since

00:01:34,430 --> 00:01:41,520
chess are basically computer orbiting

00:01:39,450 --> 00:01:43,909
the world chess champion since so many

00:01:41,520 --> 00:01:47,159
years but row is completely different

00:01:43,909 --> 00:01:49,860
and this is that the world the champion

00:01:47,159 --> 00:01:52,740
the go world champion that when you

00:01:49,860 --> 00:01:57,630
realized that being beaten and this is

00:01:52,740 --> 00:02:01,259
how they go keep me the debord

00:01:57,630 --> 00:02:07,550
go ban is called the smallest looks like

00:02:01,259 --> 00:02:11,970
in a new play and so just a very quick

00:02:07,550 --> 00:02:14,370
introduction so Google dis made this

00:02:11,970 --> 00:02:19,230
product with this software

00:02:14,370 --> 00:02:23,099
alphago and alphago was the first time

00:02:19,230 --> 00:02:26,190
basically it was using deep learning to

00:02:23,099 --> 00:02:29,690
develop a strategy on on go and then

00:02:26,190 --> 00:02:35,299
they apply us in several other games and

00:02:29,690 --> 00:02:43,290
you can see krzyston is the strongest

00:02:35,299 --> 00:02:48,959
commercial go software and the mahdis in

00:02:43,290 --> 00:02:53,130
this area the bit above 3000 is the

00:02:48,959 --> 00:02:55,610
level of the go world champion this

00:02:53,130 --> 00:03:00,930
number has a modest a kind of rating is

00:02:55,610 --> 00:03:04,370
time and then go did I mean Google did

00:03:00,930 --> 00:03:06,989
the first version that play with a

00:03:04,370 --> 00:03:12,120
strong professional player but not

00:03:06,989 --> 00:03:14,579
exceptional and then he again with the

00:03:12,120 --> 00:03:18,500
lee which was like number three or four

00:03:14,579 --> 00:03:23,220
of the world and then he wanted for the

00:03:18,500 --> 00:03:26,569
for the top and and then on top of that

00:03:23,220 --> 00:03:29,700
they did another version alphago see how

00:03:26,569 --> 00:03:32,069
that was still stronger than the

00:03:29,700 --> 00:03:35,819
previous one and it was also interesting

00:03:32,069 --> 00:03:38,420
because the old version of alphago were

00:03:35,819 --> 00:03:42,930
basically learning the deep learning

00:03:38,420 --> 00:03:46,349
path on played I mean using all the

00:03:42,930 --> 00:03:48,450
human played before but I forgot you

00:03:46,349 --> 00:03:50,430
know we started from scratch so

00:03:48,450 --> 00:03:55,919
basically they trained at the metal

00:03:50,430 --> 00:03:58,109
itself but we took in another bit about

00:03:55,919 --> 00:04:00,419
the planning at the end of the talk now

00:03:58,109 --> 00:04:03,780
we'll go a bit more technical on the

00:04:00,419 --> 00:04:06,840
details and why go is such a good game

00:04:03,780 --> 00:04:08,970
and maybe I play go not where I'm not

00:04:06,840 --> 00:04:13,980
strong at all but is a few years that

00:04:08,970 --> 00:04:20,160
apply go so just a very quick

00:04:13,980 --> 00:04:22,590
introduction the rules of the go I mean

00:04:20,160 --> 00:04:25,080
compiled with any other game really

00:04:22,590 --> 00:04:28,170
really simple you have the board someone

00:04:25,080 --> 00:04:30,960
other white stones and the other guy

00:04:28,170 --> 00:04:35,450
has the black stones each Turner you put

00:04:30,960 --> 00:04:39,570
the stones on the board and that's it

00:04:35,450 --> 00:04:43,550
and when you have your stone completely

00:04:39,570 --> 00:04:49,140
surrounded by the other color of stones

00:04:43,550 --> 00:04:53,100
the stones got to remove and okay now

00:04:49,140 --> 00:04:55,310
you you know the who's of God okay there

00:04:53,100 --> 00:04:58,080
is another whose you cannot really have

00:04:55,310 --> 00:05:00,450
you cannot play the same position that

00:04:58,080 --> 00:05:03,720
before so there are some cases where

00:05:00,450 --> 00:05:05,250
basically you eat one stone and then the

00:05:03,720 --> 00:05:08,310
other can eat the back of the stone and

00:05:05,250 --> 00:05:10,740
go back to the previous position that is

00:05:08,310 --> 00:05:13,590
forbidden so you cannot do that but

00:05:10,740 --> 00:05:16,920
apart from that I mean these tools there

00:05:13,590 --> 00:05:23,600
are no other rules but the implication

00:05:16,920 --> 00:05:27,870
are incredible and so this is the first

00:05:23,600 --> 00:05:30,570
just to give you so basically if we have

00:05:27,870 --> 00:05:33,990
a disposition and someone put the black

00:05:30,570 --> 00:05:39,240
stone here the black stone a kill all

00:05:33,990 --> 00:05:41,390
the white stones but if we have a

00:05:39,240 --> 00:05:45,240
disposition

00:05:41,390 --> 00:05:47,400
now this position you cannot put the

00:05:45,240 --> 00:05:51,000
black the white stone here because it

00:05:47,400 --> 00:05:53,040
will be automatically dead and there you

00:05:51,000 --> 00:05:56,820
cannot even put it here but for the same

00:05:53,040 --> 00:05:59,520
reason so any shape with that they are

00:05:56,820 --> 00:06:03,450
called a technically I any shaper with

00:05:59,520 --> 00:06:06,900
the two eyes is a unkillable two or more

00:06:03,450 --> 00:06:10,170
than two eyes so it's alive

00:06:06,900 --> 00:06:13,440
it's called any shape that has only one

00:06:10,170 --> 00:06:16,950
eye is scalable and sometimes they have

00:06:13,440 --> 00:06:20,250
those are called false highs like this

00:06:16,950 --> 00:06:23,730
one because it seems like an eye but if

00:06:20,250 --> 00:06:27,090
a white place on CMB then you can place

00:06:23,730 --> 00:06:28,740
on a and the kill we will kill this tree

00:06:27,090 --> 00:06:32,810
so this will be only one eye and

00:06:28,740 --> 00:06:36,090
Achilles or the other one so all the

00:06:32,810 --> 00:06:40,430
strategy of God is a to manage to have a

00:06:36,090 --> 00:06:40,430
group with two or more eyes

00:06:40,700 --> 00:06:45,950
and this but is not actually whole is

00:06:44,600 --> 00:06:53,240
something that the merger from their

00:06:45,950 --> 00:06:56,410
holes and just for your reference this I

00:06:53,240 --> 00:07:02,600
mean maybe you want to see later but a

00:06:56,410 --> 00:07:05,450
bit of program that did they go past the

00:07:02,600 --> 00:07:07,190
first one is a client a so it has no

00:07:05,450 --> 00:07:11,170
logic but you can use it to play with

00:07:07,190 --> 00:07:15,880
other guys or a play against an engine

00:07:11,170 --> 00:07:19,820
patchy is the strongest open source game

00:07:15,880 --> 00:07:22,820
Lillith dijah is the new one which is

00:07:19,820 --> 00:07:24,650
basically based on deep learning but is

00:07:22,820 --> 00:07:29,330
open source so it's kind of a he doing

00:07:24,650 --> 00:07:31,550
what Google did and I is really not like

00:07:29,330 --> 00:07:36,380
I think at the beginning of this year

00:07:31,550 --> 00:07:38,680
was still weaker than party but probably

00:07:36,380 --> 00:07:41,330
it will be stronger in the future and

00:07:38,680 --> 00:07:45,320
the core system is a commercial program

00:07:41,330 --> 00:07:48,110
in the district West and also consistent

00:07:45,320 --> 00:07:51,920
now is switching to deep learning and we

00:07:48,110 --> 00:07:56,120
tried to explain why and instead the new

00:07:51,920 --> 00:07:57,890
go it was at the old program so the only

00:07:56,120 --> 00:08:03,400
actually there was something that I

00:07:57,890 --> 00:08:07,730
didn't tell you yet in the go basically

00:08:03,400 --> 00:08:10,790
programmed aha the older generation

00:08:07,730 --> 00:08:14,020
which is a new go that is based on set

00:08:10,790 --> 00:08:17,320
of rules more less like the chess player

00:08:14,020 --> 00:08:20,450
then all the others like patchy or

00:08:17,320 --> 00:08:23,960
resistance are using a strategy which is

00:08:20,450 --> 00:08:27,520
called Monte Carlo tree search and we

00:08:23,960 --> 00:08:30,890
will see later some code about that and

00:08:27,520 --> 00:08:33,410
that was that the current ability nature

00:08:30,890 --> 00:08:37,130
until Google came and now there is also

00:08:33,410 --> 00:08:38,840
the deep learning strategy but the deep

00:08:37,130 --> 00:08:41,450
learning is something that goes on top

00:08:38,840 --> 00:08:47,810
of Monte Carlo tree search so it's not

00:08:41,450 --> 00:08:53,030
that now there is a dis Bukka in a map

00:08:47,810 --> 00:08:54,320
from Manning that basically explained is

00:08:53,030 --> 00:09:01,810
quite a nice book

00:08:54,320 --> 00:09:05,750
how to do a kind of alphago yourself and

00:09:01,810 --> 00:09:09,110
I when I see you there was all this

00:09:05,750 --> 00:09:11,180
example in Python and I thought well

00:09:09,110 --> 00:09:14,990
come on Python we can do better we can

00:09:11,180 --> 00:09:17,270
do cotton so what they did basically is

00:09:14,990 --> 00:09:20,690
taking the code of this book translated

00:09:17,270 --> 00:09:25,750
in Cortland that was version one and

00:09:20,690 --> 00:09:29,810
then improving on the cotton part and

00:09:25,750 --> 00:09:35,930
this is a one I think quite interesting

00:09:29,810 --> 00:09:40,160
point so left is Python right is cotton

00:09:35,930 --> 00:09:41,030
and is almost identical it is quite

00:09:40,160 --> 00:09:45,470
impressive

00:09:41,030 --> 00:09:47,660
I mean it's not some trivial code that

00:09:45,470 --> 00:09:52,640
the code is one of the most complicated

00:09:47,660 --> 00:09:56,180
piece of code and he has a lot of ifs

00:09:52,640 --> 00:09:59,420
and it's really really and I mean so far

00:09:56,180 --> 00:10:02,990
I was considering Python the easiest and

00:09:59,420 --> 00:10:06,110
cleanest computer language but I think

00:10:02,990 --> 00:10:08,180
Khatri now is still better because it's

00:10:06,110 --> 00:10:10,640
a source types so you can really help

00:10:08,180 --> 00:10:12,550
you with with Python sometimes really

00:10:10,640 --> 00:10:16,430
difficult to understand which type is

00:10:12,550 --> 00:10:18,260
expected or something like that and just

00:10:16,430 --> 00:10:22,250
to give you an idea this is the

00:10:18,260 --> 00:10:24,610
algorithm when you place a stone so

00:10:22,250 --> 00:10:27,680
basically well first there are some

00:10:24,610 --> 00:10:29,360
guards that we are in the grid and that

00:10:27,680 --> 00:10:31,040
the point is actually free because

00:10:29,360 --> 00:10:35,060
otherwise of course you cannot place a

00:10:31,040 --> 00:10:38,630
stone then basically it creates some

00:10:35,060 --> 00:10:41,030
sector that we wanted to know understand

00:10:38,630 --> 00:10:43,910
that we put which are the stones of a

00:10:41,030 --> 00:10:49,220
same color on the opposite color and the

00:10:43,910 --> 00:10:53,510
liberties the liberties the basically

00:10:49,220 --> 00:10:59,150
the free place around when when you have

00:10:53,510 --> 00:11:01,100
a shaping go basically each on the

00:10:59,150 --> 00:11:02,990
border there could be another stones or

00:11:01,100 --> 00:11:05,690
can be empty the empty are called

00:11:02,990 --> 00:11:07,459
liberties because one year you got an

00:11:05,690 --> 00:11:11,540
ollie but is basically your

00:11:07,459 --> 00:11:17,240
you died usually so basically for each

00:11:11,540 --> 00:11:19,279
neighbor point assuming okay this is a

00:11:17,240 --> 00:11:22,490
bit older version of code and now it's

00:11:19,279 --> 00:11:24,889
bit more because this is when I did that

00:11:22,490 --> 00:11:27,679
the combustion then if you look at the

00:11:24,889 --> 00:11:30,709
coding get now it's a bit more not

00:11:27,679 --> 00:11:35,240
complicated but as a more optimization

00:11:30,709 --> 00:11:38,050
aside basically it check the color and

00:11:35,240 --> 00:11:42,740
they put in one of the three set

00:11:38,050 --> 00:11:45,559
liberties same color opposite color then

00:11:42,740 --> 00:11:48,980
equate a ghost ringa basically I will

00:11:45,559 --> 00:11:51,730
look at the ghost wing is a set of

00:11:48,980 --> 00:11:53,779
stones of God that are on the same

00:11:51,730 --> 00:11:59,509
basically they are touching each other

00:11:53,779 --> 00:12:03,589
not in diagonal but directly and then if

00:11:59,509 --> 00:12:05,629
the stone is touching at the same color

00:12:03,589 --> 00:12:08,899
stones of the same color basically happy

00:12:05,629 --> 00:12:12,249
to merge the string in keeping one or if

00:12:08,899 --> 00:12:14,959
you are put in stone with three strings

00:12:12,249 --> 00:12:19,670
almost touching basically you have to

00:12:14,959 --> 00:12:21,740
merge three strings and then once you do

00:12:19,670 --> 00:12:23,899
this you have a to remove the liberties

00:12:21,740 --> 00:12:26,029
to the other strings that around because

00:12:23,899 --> 00:12:29,029
now you are putting so that is not a

00:12:26,029 --> 00:12:32,689
liberty anymore and if some of the

00:12:29,029 --> 00:12:34,519
opposite color has no liberties left

00:12:32,689 --> 00:12:36,799
that means that you completely

00:12:34,519 --> 00:12:40,100
surrounded the a string and then you can

00:12:36,799 --> 00:12:44,470
put those toes away so this is one of

00:12:40,100 --> 00:12:47,959
the most complicated piece of code and

00:12:44,470 --> 00:12:51,259
it's raining pressure is very linear and

00:12:47,959 --> 00:12:57,199
it's Python and cotton are really really

00:12:51,259 --> 00:13:04,490
similar okay a bit of a lesson learned

00:12:57,199 --> 00:13:09,589
so far about the types the the question

00:13:04,490 --> 00:13:11,119
mark types sometimes at least for me at

00:13:09,589 --> 00:13:13,339
the beginning of Sabae cuz I had some

00:13:11,119 --> 00:13:15,889
experience with groovy well using the

00:13:13,339 --> 00:13:17,959
question mark is not such a good idea it

00:13:15,889 --> 00:13:19,910
was a bit scary to use of the question

00:13:17,959 --> 00:13:23,220
mark in

00:13:19,910 --> 00:13:24,839
but then a completely change idea I

00:13:23,220 --> 00:13:27,720
think a question mark is really I mean

00:13:24,839 --> 00:13:29,760
nullable types are really good things so

00:13:27,720 --> 00:13:33,690
far the types are really new labor I

00:13:29,760 --> 00:13:37,589
mean if there is a reason why the the

00:13:33,690 --> 00:13:39,690
response can be Nullah I mean a domain

00:13:37,589 --> 00:13:42,570
reason that's completely fine that's

00:13:39,690 --> 00:13:44,430
great if there is no reason the only

00:13:42,570 --> 00:13:46,170
reason that you put the question mark is

00:13:44,430 --> 00:13:50,000
because you have a lazy initialization

00:13:46,170 --> 00:13:53,339
stuff like that that's not good but

00:13:50,000 --> 00:13:56,610
instead the double exclamation mark is

00:13:53,339 --> 00:13:59,670
very bad so you I think know or maybe

00:13:56,610 --> 00:14:02,040
very few in some case because every time

00:13:59,670 --> 00:14:04,889
you put a double exclamation mark you

00:14:02,040 --> 00:14:07,800
are saying okay this topic it can be

00:14:04,889 --> 00:14:12,269
nullable but not here

00:14:07,800 --> 00:14:14,130
and why not here that means either there

00:14:12,269 --> 00:14:19,279
is a some instruction that is missing

00:14:14,130 --> 00:14:22,529
that you wanted to remove all there is a

00:14:19,279 --> 00:14:24,390
kind of not so good coding de because

00:14:22,529 --> 00:14:27,540
actually it can be not in that point and

00:14:24,390 --> 00:14:29,279
you can have a problem but we don't want

00:14:27,540 --> 00:14:32,040
to have a null pointer exception so

00:14:29,279 --> 00:14:35,459
really we should avoid the double

00:14:32,040 --> 00:14:37,589
question mark immutably

00:14:35,459 --> 00:14:40,079
immutability is very nice is fantastic

00:14:37,589 --> 00:14:43,310
but there are also some performance

00:14:40,079 --> 00:14:48,029
issue so if you are in the very very I

00:14:43,310 --> 00:14:51,240
performance called maybe you wanted to

00:14:48,029 --> 00:14:53,399
verify because sometimes is help at the

00:14:51,240 --> 00:14:57,230
performance sometimes is not so it's

00:14:53,399 --> 00:14:57,230
something we can maybe look at some code

00:14:57,560 --> 00:15:02,730
algebraic data types which are the

00:15:00,149 --> 00:15:04,769
shield class where you have a several

00:15:02,730 --> 00:15:07,230
instance are great great things and that

00:15:04,769 --> 00:15:11,819
they can really help about performance

00:15:07,230 --> 00:15:14,279
and simplify the code and the premature

00:15:11,819 --> 00:15:18,930
optimization is the root over area so

00:15:14,279 --> 00:15:22,529
you have to think I mean it's very good

00:15:18,930 --> 00:15:24,959
to optimize at the algorithm but before

00:15:22,529 --> 00:15:27,540
20 automates the code you really have a

00:15:24,959 --> 00:15:30,750
to measure for example at the beginning

00:15:27,540 --> 00:15:33,000
I try to put some in lines around but in

00:15:30,750 --> 00:15:35,970
in lime sub absolutely zero in

00:15:33,000 --> 00:15:41,610
back down performers unless they have

00:15:35,970 --> 00:15:43,830
some a specific sample like lambda

00:15:41,610 --> 00:15:48,300
parameter and stuff aware the inline

00:15:43,830 --> 00:15:51,870
sectorally help you or it verified types

00:15:48,300 --> 00:16:01,740
but otherwise in lines have absolutely

00:15:51,870 --> 00:16:03,930
no impact on performance ok back ok

00:16:01,740 --> 00:16:06,150
maybe this life's work I tell you before

00:16:03,930 --> 00:16:10,590
anyway these are the explanation how to

00:16:06,150 --> 00:16:16,560
capture so if you are going let's say if

00:16:10,590 --> 00:16:22,130
you are in the if you have the black one

00:16:16,560 --> 00:16:25,440
and you put a stone in well is called a

00:16:22,130 --> 00:16:27,840
you can you can eat the white if you are

00:16:25,440 --> 00:16:30,720
white I put the dust on here you can eat

00:16:27,840 --> 00:16:34,140
the black so it's there is a lot of like

00:16:30,720 --> 00:16:37,770
a problem and yeah these are a bit of

00:16:34,140 --> 00:16:41,100
definition each one is a stone a set of

00:16:37,770 --> 00:16:44,210
stones is called a string and the

00:16:41,100 --> 00:16:48,030
liberties at the end so for example this

00:16:44,210 --> 00:16:50,339
black block has truly batiste this was a

00:16:48,030 --> 00:16:54,270
lotta so you don't even have to call

00:16:50,339 --> 00:16:58,530
Conte this has only to this altitude and

00:16:54,270 --> 00:17:02,070
a lot of strategies based on the number

00:16:58,530 --> 00:17:04,650
of liberties and then there is a group

00:17:02,070 --> 00:17:07,740
for the paul the black stones here will

00:17:04,650 --> 00:17:11,400
do a group which is more very important

00:17:07,740 --> 00:17:13,290
when you study go I mean as human but

00:17:11,400 --> 00:17:15,900
for the computer there is no equivalent

00:17:13,290 --> 00:17:17,579
is very very hard to define what is a

00:17:15,900 --> 00:17:20,010
copper form on the computer point of

00:17:17,579 --> 00:17:21,780
view so we just avoid we just talk about

00:17:20,010 --> 00:17:24,060
strings and strings are touching

00:17:21,780 --> 00:17:29,550
basically Cooper connected the minato

00:17:24,060 --> 00:17:35,700
touching each other now a strange

00:17:29,550 --> 00:17:40,320
problem with go is when to decide who

00:17:35,700 --> 00:17:42,420
win because I mean on chess the laughter

00:17:40,320 --> 00:17:44,940
one win is very easy

00:17:42,420 --> 00:17:47,100
instead the English absolutely not easy

00:17:44,940 --> 00:17:49,230
to understand who win I mean for

00:17:47,100 --> 00:17:52,140
human player what do they do basically

00:17:49,230 --> 00:17:55,130
the counter D territory that you are

00:17:52,140 --> 00:17:58,970
surrounding so for example if this was a

00:17:55,130 --> 00:18:06,600
play the black one and we have a da

00:17:58,970 --> 00:18:10,620
parte de statue in the sea and also the

00:18:06,600 --> 00:18:14,070
this tougher of those D white they are

00:18:10,620 --> 00:18:16,650
actually dead because from this position

00:18:14,070 --> 00:18:21,480
there is no way that white can save

00:18:16,650 --> 00:18:24,210
those stones I don't know if it because

00:18:21,480 --> 00:18:26,220
basically whatever died white can do

00:18:24,210 --> 00:18:28,830
here if a black put one here and then

00:18:26,220 --> 00:18:31,110
one here die will kill two and then

00:18:28,830 --> 00:18:34,289
black put another why kill and then

00:18:31,110 --> 00:18:36,150
black all of them because it's not that

00:18:34,289 --> 00:18:39,990
the two eyes instead these are two eyes

00:18:36,150 --> 00:18:41,909
and this is alive but when you have a

00:18:39,990 --> 00:18:44,280
player human player basically they can

00:18:41,909 --> 00:18:48,510
decide this is life this is not alive if

00:18:44,280 --> 00:18:50,700
there is a some difference of opinion

00:18:48,510 --> 00:18:54,630
you can skip keep playing until it's

00:18:50,700 --> 00:18:57,150
clear but it's very very hard to do an

00:18:54,630 --> 00:19:01,400
argument to be able to this to do this

00:18:57,150 --> 00:19:05,070
so what computer does is a keep plane

00:19:01,400 --> 00:19:09,600
over and over again I mean keep playing

00:19:05,070 --> 00:19:14,520
play until all the left place only one

00:19:09,600 --> 00:19:17,940
side I mean one single empty space

00:19:14,520 --> 00:19:20,610
because then is easy because you never

00:19:17,940 --> 00:19:24,150
play where you have an empty space of

00:19:20,610 --> 00:19:27,150
your stones I mean black I cannot if the

00:19:24,150 --> 00:19:30,659
X is black black will never play here

00:19:27,150 --> 00:19:31,919
and white cannot play here because it

00:19:30,659 --> 00:19:34,470
will be suicide

00:19:31,919 --> 00:19:37,890
there is no waited and so when there is

00:19:34,470 --> 00:19:40,890
no place that you can play you just quit

00:19:37,890 --> 00:19:43,860
then that computer can just calculator

00:19:40,890 --> 00:19:46,470
and calculate adjust the number of

00:19:43,860 --> 00:19:49,220
stones and the point that are so random

00:19:46,470 --> 00:19:49,220
stones

00:19:49,740 --> 00:19:55,320
so but this 20 because yeah you have it

00:19:53,460 --> 00:20:01,200
to keep a plane much more than a human

00:19:55,320 --> 00:20:03,390
will do so I will do very quickly and so

00:20:01,200 --> 00:20:06,659
alphago is the black and the white is

00:20:03,390 --> 00:20:14,279
the human and this is how a professional

00:20:06,659 --> 00:20:18,929
game and there is a lot of strategy

00:20:14,279 --> 00:20:21,510
involved and basically the strategy BISM

00:20:18,929 --> 00:20:24,480
a lesson that is much easier to surround

00:20:21,510 --> 00:20:27,809
the territory on the corners so firstly

00:20:24,480 --> 00:20:30,630
they play the corners and then they

00:20:27,809 --> 00:20:34,970
played the lateral area and finally the

00:20:30,630 --> 00:20:39,120
center but on the other side if someone

00:20:34,970 --> 00:20:41,190
get for example here black pitch taking

00:20:39,120 --> 00:20:43,620
basically the territory here but the

00:20:41,190 --> 00:20:47,520
white is getting the territorial center

00:20:43,620 --> 00:20:51,710
so there is always a bit of a giver

00:20:47,520 --> 00:20:54,720
taking baby

00:20:51,710 --> 00:20:56,429
of course I don't even pretend to

00:20:54,720 --> 00:21:02,190
understand exactly I mean there is a lot

00:20:56,429 --> 00:21:06,960
of but it's very cool at this point I

00:21:02,190 --> 00:21:09,120
mean for even for a human player that is

00:21:06,960 --> 00:21:13,649
not professional it's very hard at this

00:21:09,120 --> 00:21:16,110
point to understand who is a head but

00:21:13,649 --> 00:21:18,770
the in this pointedly what the champion

00:21:16,110 --> 00:21:24,110
basically resigned because it was a

00:21:18,770 --> 00:21:27,330
immediately behind maybe something that

00:21:24,110 --> 00:21:29,789
for example this those three stones are

00:21:27,330 --> 00:21:31,679
actually dead because you can see that

00:21:29,789 --> 00:21:35,279
there is no way that they can format

00:21:31,679 --> 00:21:40,710
your eyes so they are already counted as

00:21:35,279 --> 00:21:44,100
white and this is that alive because

00:21:40,710 --> 00:21:46,940
here white as enough space to do two

00:21:44,100 --> 00:21:49,710
eyes so this is a lot of stuff that a

00:21:46,940 --> 00:21:54,179
stronger player do automatically not

00:21:49,710 --> 00:21:56,610
even think about and in this version for

00:21:54,179 --> 00:21:59,730
distance are actually connected because

00:21:56,610 --> 00:22:02,100
of these shapes I mean if a white play

00:21:59,730 --> 00:22:03,570
here black play here so he can connect

00:22:02,100 --> 00:22:09,300
us so there is a lot of

00:22:03,570 --> 00:22:11,820
stuff going on and so but this is that

00:22:09,300 --> 00:22:18,060
the profession I mean professionally the

00:22:11,820 --> 00:22:29,270
full board when you play with with

00:22:18,060 --> 00:22:33,240
someone else' basically you can okay I

00:22:29,270 --> 00:22:39,660
don't know are you bit interested on the

00:22:33,240 --> 00:22:41,970
stuff oh let's see the code just just

00:22:39,660 --> 00:22:44,460
another bit basically this is one of its

00:22:41,970 --> 00:22:48,810
quality suji's this kind of a strange

00:22:44,460 --> 00:22:51,510
combination basically here the black

00:22:48,810 --> 00:22:53,550
stones seems completely alive because

00:22:51,510 --> 00:22:56,730
you think okay this had the white the

00:22:53,550 --> 00:22:59,310
white of only one eye the black here and

00:22:56,730 --> 00:23:02,820
there are not far from here so what is

00:22:59,310 --> 00:23:06,240
in a bad situation but actually these

00:23:02,820 --> 00:23:09,210
stones can be there is a a sequence

00:23:06,240 --> 00:23:13,890
basically where white puta distancia and

00:23:09,210 --> 00:23:16,440
then black basically wanted to eat this

00:23:13,890 --> 00:23:19,620
one he cannot place here because of the

00:23:16,440 --> 00:23:23,550
white white it destroys of black plays

00:23:19,620 --> 00:23:25,080
yeah then white extend at this point

00:23:23,550 --> 00:23:27,240
black I cannot put here because

00:23:25,080 --> 00:23:35,100
otherwise you will be eaten so black

00:23:27,240 --> 00:23:38,070
boot here and white put here and put at

00:23:35,100 --> 00:23:40,530
the top and then black it doesn't

00:23:38,070 --> 00:23:45,080
realize that there is a trap so it the

00:23:40,530 --> 00:23:49,800
white white play again black it again

00:23:45,080 --> 00:23:52,320
and now black white this at this point

00:23:49,800 --> 00:23:57,300
that these three are on parent so black

00:23:52,320 --> 00:24:00,060
habit to put here and black does hit

00:23:57,300 --> 00:24:01,770
this one and basically now black is

00:24:00,060 --> 00:24:05,760
completely dead whatever it does

00:24:01,770 --> 00:24:10,419
basically white can play here black can

00:24:05,760 --> 00:24:14,739
do idea it's completed

00:24:10,419 --> 00:24:18,460
this is a huh but basically you you

00:24:14,739 --> 00:24:24,549
develop your strategy it's a lot and the

00:24:18,460 --> 00:24:29,980
roots are so easy but just for the

00:24:24,549 --> 00:24:34,210
beginners basically what you want is to

00:24:29,980 --> 00:24:38,279
play on something seem simpler and you

00:24:34,210 --> 00:24:40,389
play online the full board is 19 by 19

00:24:38,279 --> 00:24:44,289
instead the you play with a small one

00:24:40,389 --> 00:24:51,669
nine by nine it's easier and they'd be

00:24:44,289 --> 00:24:57,899
much much shorter so just that to show

00:24:51,669 --> 00:25:01,450
you basically this is my software so

00:24:57,899 --> 00:25:04,600
this is a regulator one move for ten

00:25:01,450 --> 00:25:08,919
seconds so basically one black here the

00:25:04,600 --> 00:25:12,070
white will be the software and with one

00:25:08,919 --> 00:25:18,580
move for one ten second I can always

00:25:12,070 --> 00:25:21,129
beat em beat it quite regularly but with

00:25:18,580 --> 00:25:24,070
the one move away twenty thirty second

00:25:21,129 --> 00:25:25,659
it it bit me so it's kind of I got a

00:25:24,070 --> 00:25:32,739
polygon that is stronger than me that's

00:25:25,659 --> 00:25:37,289
already and so basically this is smaller

00:25:32,739 --> 00:25:39,850
so it looks like it's not a great move

00:25:37,289 --> 00:25:44,080
but it's not completely random it's a

00:25:39,850 --> 00:25:46,149
and if I give him a like thirty seconds

00:25:44,080 --> 00:25:51,609
from over they they move started to be

00:25:46,149 --> 00:25:56,669
quite good and okay we don't have time

00:25:51,609 --> 00:26:02,470
but it's quite easy okay let's do this

00:25:56,669 --> 00:26:05,220
how algorithmic to play games works the

00:26:02,470 --> 00:26:08,409
easiest is at the minimum so it's

00:26:05,220 --> 00:26:12,940
basically a take the current situation

00:26:08,409 --> 00:26:14,169
we do some evaluation who is ahead well

00:26:12,940 --> 00:26:17,590
not at the beginning at the beginning

00:26:14,169 --> 00:26:22,359
there is no evaluation so it take all

00:26:17,590 --> 00:26:24,190
the possible moves and then it take the

00:26:22,359 --> 00:26:27,549
possible move of possible moves

00:26:24,190 --> 00:26:30,940
create a tree over all the moves then at

00:26:27,549 --> 00:26:35,019
the end it valuate the moves and then it

00:26:30,940 --> 00:26:38,590
choose according to the two who is the

00:26:35,019 --> 00:26:40,840
player so here we'll take the lowest one

00:26:38,590 --> 00:26:43,539
because of course is your opponent so

00:26:40,840 --> 00:26:45,850
we'll choose the best for him and then

00:26:43,539 --> 00:26:47,620
he took at the IIST of the possibility

00:26:45,850 --> 00:26:50,860
of this level and then you took at the

00:26:47,620 --> 00:26:54,340
lowest so each level you took I ate at

00:26:50,860 --> 00:26:55,960
the highest on the lowest score and at

00:26:54,340 --> 00:26:57,580
the end of you you have because you

00:26:55,960 --> 00:27:00,100
assumed that your opponent is playing

00:26:57,580 --> 00:27:03,460
the best for himself and you're the best

00:27:00,100 --> 00:27:10,210
hope for yourself and this is the the

00:27:03,460 --> 00:27:12,460
first possible algorithm and there is a

00:27:10,210 --> 00:27:15,759
problem that you have to expand all the

00:27:12,460 --> 00:27:20,159
moves and enjoyable but even tested out

00:27:15,759 --> 00:27:21,730
too many moves so possible I mean and

00:27:20,159 --> 00:27:26,200
the best

00:27:21,730 --> 00:27:29,139
a better solution is I have trying to

00:27:26,200 --> 00:27:33,549
look at the moves at the better moves

00:27:29,139 --> 00:27:36,340
first and if you already have a move

00:27:33,549 --> 00:27:41,009
that is better you basically pull that

00:27:36,340 --> 00:27:43,870
way that is so basically if you already

00:27:41,009 --> 00:27:44,289
established that there is a move it can

00:27:43,870 --> 00:27:46,509
kill you

00:27:44,289 --> 00:27:48,789
it's pointless to look at all the

00:27:46,509 --> 00:27:50,919
possible responds because you already

00:27:48,789 --> 00:27:53,259
know that he has a better move than this

00:27:50,919 --> 00:27:56,799
so in this way you can cut a lot of

00:27:53,259 --> 00:28:00,730
moves in the evaluation but this is

00:27:56,799 --> 00:28:04,450
still not enough effort go and basically

00:28:00,730 --> 00:28:06,820
the go program is this Monte Carlo tree

00:28:04,450 --> 00:28:11,710
search algorithm because the problem

00:28:06,820 --> 00:28:14,110
with go is that at some point you wanted

00:28:11,710 --> 00:28:16,929
to evaluate and for example in chess or

00:28:14,110 --> 00:28:19,419
in other games it's quite easy to

00:28:16,929 --> 00:28:21,370
evaluate I mean you have a summary stick

00:28:19,419 --> 00:28:25,029
so you can counter the number of pieces

00:28:21,370 --> 00:28:27,519
and stuff like that but Ingo is

00:28:25,029 --> 00:28:29,350
absolutely not easy especially I mean

00:28:27,519 --> 00:28:31,990
not even professional can say at the

00:28:29,350 --> 00:28:35,169
beginning who is ahead so what the

00:28:31,990 --> 00:28:37,170
program is doing this doing some roll

00:28:35,169 --> 00:28:41,580
out so a completely random game

00:28:37,170 --> 00:28:44,550
so it just put in a piecing in the

00:28:41,580 --> 00:28:47,640
handle place only legal moves of course

00:28:44,550 --> 00:28:50,090
and the idea is that the from a given

00:28:47,640 --> 00:28:55,650
configuration playing on DOMA

00:28:50,090 --> 00:28:57,600
statistically the best position will win

00:28:55,650 --> 00:29:00,540
I mean the player with the best position

00:28:57,600 --> 00:29:03,330
so if you do ten times it doesn't really

00:29:00,540 --> 00:29:06,240
matter but if you do ten thousand or one

00:29:03,330 --> 00:29:08,430
hundred times call out you you

00:29:06,240 --> 00:29:12,980
understand who is actually winning that

00:29:08,430 --> 00:29:15,810
position so one and this is how the

00:29:12,980 --> 00:29:17,550
basically you take you select the mover

00:29:15,810 --> 00:29:21,330
you try to select the move on optimizing

00:29:17,550 --> 00:29:24,270
and then you do evaluation and then you

00:29:21,330 --> 00:29:26,670
have to balance between discovering new

00:29:24,270 --> 00:29:29,280
moves or get the or getting better

00:29:26,670 --> 00:29:30,810
evaluation for the most that kind of

00:29:29,280 --> 00:29:31,470
winning because maybe they are just

00:29:30,810 --> 00:29:33,450
winning

00:29:31,470 --> 00:29:35,550
it seems they win but just because of

00:29:33,450 --> 00:29:43,350
statistical fluke so you have a two

00:29:35,550 --> 00:29:46,260
handling on again and so when we you've

00:29:43,350 --> 00:29:48,120
write a software to play go the most

00:29:46,260 --> 00:29:52,710
important part is how fast they can

00:29:48,120 --> 00:29:57,540
valuated is allowed and this is my

00:29:52,710 --> 00:30:00,510
laptop so nothing particularly fancy and

00:29:57,540 --> 00:30:02,520
the the first line was basically when I

00:30:00,510 --> 00:30:05,550
just take at the Python code and copy

00:30:02,520 --> 00:30:08,490
paste it and post laitanan country it

00:30:05,550 --> 00:30:10,890
was a in let's just look at the first

00:30:08,490 --> 00:30:13,470
oil just to the second just one column

00:30:10,890 --> 00:30:17,070
the first column means on the nine by

00:30:13,470 --> 00:30:18,900
nine the second column 19 by 19 the in

00:30:17,070 --> 00:30:21,390
timing millisecond to do a single hole

00:30:18,900 --> 00:30:24,750
out and you have to think that you need

00:30:21,390 --> 00:30:29,580
at least 10,000 allowed to make

00:30:24,750 --> 00:30:32,160
something what and the so the beginning

00:30:29,580 --> 00:30:36,120
was the taking 10 millisecond on on the

00:30:32,160 --> 00:30:39,660
small border so that will be like 100

00:30:36,120 --> 00:30:47,420
second to have a I mean more than one

00:30:39,660 --> 00:30:47,420
minute just to have a decent play and

00:30:47,620 --> 00:30:51,830
then basically I keep improving

00:30:50,240 --> 00:30:55,640
improving proving and the de Quinta's

00:30:51,830 --> 00:31:01,720
the last situation is basically 20 times

00:30:55,640 --> 00:31:05,030
faster or less model and well most of a

00:31:01,720 --> 00:31:07,280
lesson learner on this performance stuff

00:31:05,030 --> 00:31:10,250
is that what is really important is the

00:31:07,280 --> 00:31:13,490
algorithm so trying to avoid the for

00:31:10,250 --> 00:31:16,460
example using immutable ago strings

00:31:13,490 --> 00:31:21,410
instead of immutable ones really help a

00:31:16,460 --> 00:31:24,470
lot of performance using a neighbor of

00:31:21,410 --> 00:31:27,230
map so instead of just have a mapper

00:31:24,470 --> 00:31:29,750
with everything that it can be pre

00:31:27,230 --> 00:31:32,030
calculated in this case it was all the

00:31:29,750 --> 00:31:33,800
neighbor from each point instead of a

00:31:32,030 --> 00:31:38,540
calculator with timer you put in a map

00:31:33,800 --> 00:31:41,390
so it really hurts to understand this

00:31:38,540 --> 00:31:46,460
position is high okay improve the

00:31:41,390 --> 00:31:49,820
algorithm and this was a quite so

00:31:46,460 --> 00:31:52,100
Philippe at the beginning every the

00:31:49,820 --> 00:31:55,010
handlebars are the one that do this one

00:31:52,100 --> 00:31:57,680
was calculating all the possible moves

00:31:55,010 --> 00:32:02,390
valid moves and then just pick up one

00:31:57,680 --> 00:32:04,970
handle instead now basically it pick up

00:32:02,390 --> 00:32:09,340
a random Danny check if a is valid and

00:32:04,970 --> 00:32:12,560
if it's not valid pick up another random

00:32:09,340 --> 00:32:15,340
but this is much faster than calculated

00:32:12,560 --> 00:32:19,670
all the valid and then pick up one arm

00:32:15,340 --> 00:32:22,400
and then okay instead of shuffle all the

00:32:19,670 --> 00:32:26,240
possible moves that just do the singles

00:32:22,400 --> 00:32:26,600
were opened and do the random are one by

00:32:26,240 --> 00:32:29,420
one

00:32:26,600 --> 00:32:33,650
basically oh if you could you can look

00:32:29,420 --> 00:32:37,390
at the code every finishing Ghita so the

00:32:33,650 --> 00:32:41,360
last one is also quite a nice basically

00:32:37,390 --> 00:32:46,430
sometimes we are using map like a hash

00:32:41,360 --> 00:32:50,180
map but we actually froze up I had the

00:32:46,430 --> 00:32:52,010
map pair with player 1 and player 2 so

00:32:50,180 --> 00:32:54,830
there was a mapper with the key player 1

00:32:52,010 --> 00:32:57,920
and some stuff key player 2 and some

00:32:54,830 --> 00:33:00,950
other stuff but secondly using an array

00:32:57,920 --> 00:33:03,200
is much easier faster

00:33:00,950 --> 00:33:06,470
because I if the map is completely

00:33:03,200 --> 00:33:08,120
filled because we completely put all the

00:33:06,470 --> 00:33:11,390
stuff and we know exactly where to go

00:33:08,120 --> 00:33:13,910
using an average much more network and I

00:33:11,390 --> 00:33:16,130
mean coming from a java world away are

00:33:13,910 --> 00:33:18,800
kind of bad you know because our low

00:33:16,130 --> 00:33:20,780
level and we want map but technically

00:33:18,800 --> 00:33:24,320
with also with cotton it's much easier

00:33:20,780 --> 00:33:27,560
to use a array than with Java and for

00:33:24,320 --> 00:33:30,290
SAP one advantage that if you go on an

00:33:27,560 --> 00:33:33,170
away you don't have to put the double

00:33:30,290 --> 00:33:35,510
exclamation mark because our way always

00:33:33,170 --> 00:33:39,290
return is that the map always written in

00:33:35,510 --> 00:33:49,190
new laborda and this I was also happen a

00:33:39,290 --> 00:33:53,290
lot and I know I can show you some code

00:33:49,190 --> 00:33:57,320
or well let's talk about the next step

00:33:53,290 --> 00:34:01,400
so at the moment ID the algorithm is

00:33:57,320 --> 00:34:03,710
pretty good it's already able to connect

00:34:01,400 --> 00:34:09,010
with the client so you can play with it

00:34:03,710 --> 00:34:12,410
with a kind of dysentery traffic but

00:34:09,010 --> 00:34:14,929
okay there is something the number that

00:34:12,410 --> 00:34:17,900
we saw was a for a single call for a

00:34:14,929 --> 00:34:22,100
single thread now I'm working on taking

00:34:17,900 --> 00:34:25,870
advantage of the full credit that is bit

00:34:22,100 --> 00:34:28,940
difficult but also coordinates with

00:34:25,870 --> 00:34:34,640
co-routines an inductor it's really nice

00:34:28,940 --> 00:34:39,220
decoder and once I finish this basically

00:34:34,640 --> 00:34:43,340
the next step is using deep learning and

00:34:39,220 --> 00:34:49,610
the point of deep learning in mango yeah

00:34:43,340 --> 00:34:55,310
is it - basically when we do this Monte

00:34:49,610 --> 00:34:59,750
Carlo calculation we have to to trial

00:34:55,310 --> 00:35:02,030
the possible position so in the middle

00:34:59,750 --> 00:35:04,550
and end game that's quite good

00:35:02,030 --> 00:35:08,120
but at the beginning squat hopeless

00:35:04,550 --> 00:35:12,620
because you cannot really try totally

00:35:08,120 --> 00:35:13,640
all the possible 400 for the position on

00:35:12,620 --> 00:35:18,920
the beginning

00:35:13,640 --> 00:35:22,369
and instead what deep learning help you

00:35:18,920 --> 00:35:26,750
is a doing us a lot of analyzing a lot

00:35:22,369 --> 00:35:30,650
of games it is this kind of a

00:35:26,750 --> 00:35:33,460
convolution so basically he has a bigger

00:35:30,650 --> 00:35:37,430
net that to take all the possible and

00:35:33,460 --> 00:35:41,720
then split in small gradient small and

00:35:37,430 --> 00:35:46,400
small liquid and at the end basically it

00:35:41,720 --> 00:35:48,289
gives you the full basically a list of

00:35:46,400 --> 00:35:52,490
output which is the same number of the

00:35:48,289 --> 00:35:55,220
possible position on the board with

00:35:52,490 --> 00:35:59,630
their position with the probability for

00:35:55,220 --> 00:36:02,329
each one so it can tell you which is

00:35:59,630 --> 00:36:06,500
kind of intuition analyze on this shape

00:36:02,329 --> 00:36:08,089
is understand the most good shaper can

00:36:06,500 --> 00:36:11,750
be this this and this I mean the

00:36:08,089 --> 00:36:14,569
position where I could maybe play and so

00:36:11,750 --> 00:36:16,640
you have a small number of a position

00:36:14,569 --> 00:36:18,829
which are interesting and there you can

00:36:16,640 --> 00:36:21,079
fit those to the multicolored research

00:36:18,829 --> 00:36:22,970
at the beginning so Monte Carlo tree

00:36:21,079 --> 00:36:25,490
search got a lot of improvement from

00:36:22,970 --> 00:36:27,069
this because it doesn't have a - I mean

00:36:25,490 --> 00:36:29,960
it started with a very good

00:36:27,069 --> 00:36:32,150
approximation and then of course it to

00:36:29,960 --> 00:36:34,849
have the final number you have actually

00:36:32,150 --> 00:36:38,390
to verify that it works but is

00:36:34,849 --> 00:36:42,170
incredibly boost of performance so this

00:36:38,390 --> 00:36:45,950
is I think after second half of this

00:36:42,170 --> 00:36:52,260
year I will concentrate on this part of

00:36:45,950 --> 00:36:52,260

YouTube URL: https://www.youtube.com/watch?v=2T7IFkfEsco


