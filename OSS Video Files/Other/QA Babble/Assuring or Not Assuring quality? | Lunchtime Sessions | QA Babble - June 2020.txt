Title: Assuring or Not Assuring quality? | Lunchtime Sessions | QA Babble - June 2020
Publication date: 2020-06-10
Playlist: QA Babble
Description: 
	QA Babble was organised by Woodrow Mercer and presented on YouTube by Pusher via Live-Stream.

"Assuring or Not Assuring quality?"

Continuous testing, continuous delivery, DevOps â€“ these are all terms very popular in the last couple of years, and they all involve a shift in the way we deliver products, testing included! So who is responsible for the quality assurance nowadays?
In this talk I'll go through some steps we took and processes we implemented to create a higher collaborative space where everyone takes ownership of changes all the way through rather than handing them over between us.
Of course, we'll also focus on the questions everyone is thinking about: "Do you still have testers? And what do they do now?"

Speaker bio:

Head of Quality Engineering at Wealth Wizards by role, evangelist of continuous delivery and automation by heart. Working as an Automation in Test Engineer in different environments for the past 9 years, my main focus is to shift testing activities as left as possible, to work closely with the stakeholders to create smarter automated checks, and to understand the system architecture so that the automation is created in the right place.

You can reach out to Ioana @
Twitter - @il_finaru
Linkedin - https://www.linkedin.com/in/ioanafinaru/

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,089 --> 00:00:04,020
hi everyone thank you so much for being

00:00:02,250 --> 00:00:06,960
here thank you for the kind words

00:00:04,020 --> 00:00:08,670
Anthony I appreciate everyone efforts to

00:00:06,960 --> 00:00:13,469
be here I know it won't enjoy the lunch

00:00:08,670 --> 00:00:15,299
time so the name of the talk that I'm

00:00:13,469 --> 00:00:18,539
gonna present to you today is assuring

00:00:15,299 --> 00:00:21,840
or not assuring quality it's a bit

00:00:18,539 --> 00:00:24,660
misleading but the idea behind it it's

00:00:21,840 --> 00:00:26,550
kind of the same we want to explore who

00:00:24,660 --> 00:00:30,119
is responsible for the quality assurance

00:00:26,550 --> 00:00:31,859
nowadays in our projects and I'm gonna

00:00:30,119 --> 00:00:33,899
walk through some of the steps that we

00:00:31,859 --> 00:00:35,640
took and some of the processes that we

00:00:33,899 --> 00:00:38,910
implemented to create a higher

00:00:35,640 --> 00:00:41,460
collaborative space where everyone takes

00:00:38,910 --> 00:00:43,260
ownership of changes all the way through

00:00:41,460 --> 00:00:49,590
rather than handing them over between us

00:00:43,260 --> 00:00:52,559
in in the team cool so if we kick things

00:00:49,590 --> 00:00:54,899
then Who am I I am a continuous delivery

00:00:52,559 --> 00:00:57,030
and automation advocate I've been

00:00:54,899 --> 00:00:58,620
working as an automation test engineer

00:00:57,030 --> 00:01:00,300
for almost 10 years now

00:00:58,620 --> 00:01:03,180
and I'm currently head of quality

00:01:00,300 --> 00:01:04,830
engineering at work wizards small frame

00:01:03,180 --> 00:01:10,260
check in Midlands offering which we

00:01:04,830 --> 00:01:12,630
teach regulated financial advice to put

00:01:10,260 --> 00:01:16,049
a bit of a bit of background I guess

00:01:12,630 --> 00:01:18,540
behind all this us as a team engineering

00:01:16,049 --> 00:01:21,960
Cardinals wizards we were always

00:01:18,540 --> 00:01:23,790
interested in continuous delivery and

00:01:21,960 --> 00:01:26,159
what continuous delivery is basically

00:01:23,790 --> 00:01:28,829
the ability to get changes of all types

00:01:26,159 --> 00:01:30,930
into production or into the hands of the

00:01:28,829 --> 00:01:33,240
users safely and quickly in a

00:01:30,930 --> 00:01:36,869
sustainable way as Jess humble presents

00:01:33,240 --> 00:01:39,240
this so we want to chain from and

00:01:36,869 --> 00:01:42,710
methodology in a process where we can

00:01:39,240 --> 00:01:45,899
actually deliver to our customers value

00:01:42,710 --> 00:01:48,780
a process that's it's gonna achieve

00:01:45,899 --> 00:01:51,590
through resilience not just ability and

00:01:48,780 --> 00:01:53,790
it's gonna unify all the disciplines so

00:01:51,590 --> 00:01:57,960
looking at the quality processes

00:01:53,790 --> 00:01:59,939
delivery processes releasing and we had

00:01:57,960 --> 00:02:02,189
all the capabilities we had all the

00:01:59,939 --> 00:02:04,950
infrastructure we are working in a

00:02:02,189 --> 00:02:08,369
microsomes architecture we are small

00:02:04,950 --> 00:02:10,170
teams with small contacts through our

00:02:08,369 --> 00:02:12,180
product so basically we have all the

00:02:10,170 --> 00:02:13,709
capabilities and the infrastructure to

00:02:12,180 --> 00:02:17,370
to release faster

00:02:13,709 --> 00:02:20,430
to go into this type of pipeline so our

00:02:17,370 --> 00:02:23,790
our mantra our goal was to deliver

00:02:20,430 --> 00:02:25,859
actually safely at speed because due to

00:02:23,790 --> 00:02:27,810
the nature of the business we need you

00:02:25,859 --> 00:02:31,739
to have some level of auditing and

00:02:27,810 --> 00:02:34,799
traceability we are fully regulated by

00:02:31,739 --> 00:02:38,519
FCA providing automated financial advice

00:02:34,799 --> 00:02:40,709
so this sometimes could feel like a big

00:02:38,519 --> 00:02:43,200
barrier against our mantra because we do

00:02:40,709 --> 00:02:47,180
want to deliver faster but then we also

00:02:43,200 --> 00:02:50,099
need to make sure we deliver safe and

00:02:47,180 --> 00:02:52,590
what we wanted to achieve part of our

00:02:50,099 --> 00:02:55,290
engineering team as I mentioned was to

00:02:52,590 --> 00:02:58,590
build a culture of quality that is

00:02:55,290 --> 00:03:01,260
automation led and it's always looking

00:02:58,590 --> 00:03:05,700
for fast feedback rather than wait until

00:03:01,260 --> 00:03:10,139
the end of the pipelines our testing our

00:03:05,700 --> 00:03:12,120
our focus was also a lot on the testing

00:03:10,139 --> 00:03:14,519
manifesto I don't know if you're aware

00:03:12,120 --> 00:03:17,879
of this it's part of the growing agile

00:03:14,519 --> 00:03:21,239
blog but we were always looking at

00:03:17,879 --> 00:03:23,250
testing basically through throughout the

00:03:21,239 --> 00:03:25,949
lifecycle rather than testing at the end

00:03:23,250 --> 00:03:28,709
we wanted to prevent bugs rather than

00:03:25,949 --> 00:03:30,870
finding them at the end we wanted to

00:03:28,709 --> 00:03:34,260
test understanding over checking

00:03:30,870 --> 00:03:36,540
functionality and then building the

00:03:34,260 --> 00:03:38,609
system right from the beginning rather

00:03:36,540 --> 00:03:41,699
than breaking it and finding bugs at the

00:03:38,609 --> 00:03:43,590
end and one really important one for us

00:03:41,699 --> 00:03:48,569
was the team responsibility for quality

00:03:43,590 --> 00:03:50,400
over tester responsibilities so with all

00:03:48,569 --> 00:03:53,759
this mantra behind us and all this

00:03:50,400 --> 00:03:57,389
vision behind it we were created our

00:03:53,759 --> 00:04:00,269
processes and we created our vision and

00:03:57,389 --> 00:04:02,459
actually we we did consider the testing

00:04:00,269 --> 00:04:04,319
manifesto in our in our approaches

00:04:02,459 --> 00:04:07,229
because we did consider actually

00:04:04,319 --> 00:04:09,810
shifting all this idea of shifting left

00:04:07,229 --> 00:04:11,459
the approval gap so basically through

00:04:09,810 --> 00:04:14,280
discovery trying to understand upfront

00:04:11,459 --> 00:04:17,180
what we're trying to deliver so that we

00:04:14,280 --> 00:04:20,340
can we can be a lot more competent in

00:04:17,180 --> 00:04:24,510
the end when we want to deploy and

00:04:20,340 --> 00:04:26,860
monitor with all this in mind so this

00:04:24,510 --> 00:04:31,870
was our vision this is this is what

00:04:26,860 --> 00:04:34,840
wanted you to have the reality was that

00:04:31,870 --> 00:04:36,789
actually we were it was a good thing

00:04:34,840 --> 00:04:39,879
that we were 5q A's

00:04:36,789 --> 00:04:43,509
in our chapter across 12 engineers in

00:04:39,879 --> 00:04:46,569
for stream value streams teams I have a

00:04:43,509 --> 00:04:49,449
title there so actually was really nice

00:04:46,569 --> 00:04:51,580
ratio and even now comparing with any

00:04:49,449 --> 00:04:53,439
other teams I guess we do have a really

00:04:51,580 --> 00:04:58,930
good ratio so we have one QA engineer

00:04:53,439 --> 00:05:00,550
two to three developers it was also

00:04:58,930 --> 00:05:02,500
really good it's actually a really good

00:05:00,550 --> 00:05:04,960
even now that engineers want more

00:05:02,500 --> 00:05:06,699
ownership so they want to be involved in

00:05:04,960 --> 00:05:08,889
testing they want to take ownership of

00:05:06,699 --> 00:05:11,050
their work they wanted to see it in life

00:05:08,889 --> 00:05:14,740
but they didn't quite understand how to

00:05:11,050 --> 00:05:16,479
do that because still the QA engineers

00:05:14,740 --> 00:05:18,490
for example were only in country two

00:05:16,479 --> 00:05:22,409
checks they were owning the dashboards

00:05:18,490 --> 00:05:26,139
the team didn't quite understand the

00:05:22,409 --> 00:05:28,840
automation test box that we had how they

00:05:26,139 --> 00:05:31,509
should run in what circumstances test

00:05:28,840 --> 00:05:33,460
environments so it was quite difficult

00:05:31,509 --> 00:05:37,599
with the understanding of where our

00:05:33,460 --> 00:05:40,719
automated checks the alteration was a

00:05:37,599 --> 00:05:42,610
task at the end or even later we found

00:05:40,719 --> 00:05:44,349
ourselves quite in few positions were

00:05:42,610 --> 00:05:47,529
actually we didn't create between two

00:05:44,349 --> 00:05:51,009
automated checks because of time or

00:05:47,529 --> 00:05:53,199
other other reasons and also we had

00:05:51,009 --> 00:05:54,729
quite a few quite a bit of flakiness in

00:05:53,199 --> 00:05:56,620
our test bags because we didn't quite

00:05:54,729 --> 00:06:02,319
necessarily had the teton to focus on it

00:05:56,620 --> 00:06:03,580
I think if you can mute your microphone

00:06:02,319 --> 00:06:05,830
please I think there is someone in the

00:06:03,580 --> 00:06:08,169
background thank you

00:06:05,830 --> 00:06:10,599
what wasn't good at all was that

00:06:08,169 --> 00:06:12,370
actually there wasn't much shared

00:06:10,599 --> 00:06:16,539
understanding created even if we

00:06:12,370 --> 00:06:18,490
practiced loads of ceremonies and we

00:06:16,539 --> 00:06:23,469
looked at the job testing and our job

00:06:18,490 --> 00:06:26,199
principles we had we had sessions we we

00:06:23,469 --> 00:06:28,240
were doing a lot of analysis grooming we

00:06:26,199 --> 00:06:31,810
were still finding ourselves in a lot of

00:06:28,240 --> 00:06:33,879
back and forth whenever we were picking

00:06:31,810 --> 00:06:35,740
up the testing basically activities in

00:06:33,879 --> 00:06:37,599
the team so actually we understood that

00:06:35,740 --> 00:06:39,909
the shared understanding wasn't so

00:06:37,599 --> 00:06:40,520
shared because we still were still not

00:06:39,909 --> 00:06:43,270
coming

00:06:40,520 --> 00:06:46,340
the same thing worked on same page and

00:06:43,270 --> 00:06:49,069
I've been seen in quite a few teens

00:06:46,340 --> 00:06:51,889
still nowadays quality engineer was

00:06:49,069 --> 00:06:55,490
still seen as a gatekeeper oh that's a

00:06:51,889 --> 00:06:59,180
shame my fire alarm started was just a

00:06:55,490 --> 00:07:01,639
test okay cool so the quality engineer

00:06:59,180 --> 00:07:04,460
was still seen as a gatekeeper so even

00:07:01,639 --> 00:07:07,460
if with the best intentions in our

00:07:04,460 --> 00:07:09,110
team's the engineers at the end of day

00:07:07,460 --> 00:07:11,060
were still thinking that actually there

00:07:09,110 --> 00:07:12,590
was a quality engineers there standing

00:07:11,060 --> 00:07:17,409
there and actually being a gatekeeper

00:07:12,590 --> 00:07:20,259
that safety net so it was good but it

00:07:17,409 --> 00:07:25,190
was taking that ownership I guess step

00:07:20,259 --> 00:07:27,020
back and as I mentioned we wanted the

00:07:25,190 --> 00:07:29,780
whole team to take responsibility for

00:07:27,020 --> 00:07:31,819
quality so we got the buy-in that the

00:07:29,780 --> 00:07:34,669
team wanted to be involved in automated

00:07:31,819 --> 00:07:36,139
checks in the whole testing process but

00:07:34,669 --> 00:07:38,139
they didn't quite know where to start

00:07:36,139 --> 00:07:42,650
exactly

00:07:38,139 --> 00:07:44,630
they still had they still have that gate

00:07:42,650 --> 00:07:46,880
keeper confirmation from a QA engineer

00:07:44,630 --> 00:07:51,590
they still had that that process in

00:07:46,880 --> 00:07:53,570
place and even so even if we wanted to

00:07:51,590 --> 00:07:56,659
take share a shared ownership of where

00:07:53,570 --> 00:07:59,719
where our quality the testing was still

00:07:56,659 --> 00:08:04,699
a face on the board we we had our own

00:07:59,719 --> 00:08:07,580
column and the tester was still seen as

00:08:04,699 --> 00:08:09,319
responsible for quality so we're still

00:08:07,580 --> 00:08:12,440
there with the power quality gate

00:08:09,319 --> 00:08:14,120
basically giving big go no-go for any

00:08:12,440 --> 00:08:19,250
ticket that was going through through

00:08:14,120 --> 00:08:23,060
our boards at one point though something

00:08:19,250 --> 00:08:24,800
happened and that was a webinar so we

00:08:23,060 --> 00:08:26,750
discovered this one I totally recommend

00:08:24,800 --> 00:08:28,400
it to you to read it and actually I'm

00:08:26,750 --> 00:08:30,770
gonna have quite a few references in

00:08:28,400 --> 00:08:33,349
this talk because the experiments that

00:08:30,770 --> 00:08:38,870
we've made are part of based on on this

00:08:33,349 --> 00:08:41,270
webinar so and this one our penny Wyatt

00:08:38,870 --> 00:08:44,089
is speaking about quality speak and how

00:08:41,270 --> 00:08:47,360
JIRA actually does QA in in their

00:08:44,089 --> 00:08:49,490
environment and she starts really good

00:08:47,360 --> 00:08:51,470
with a really good point that actually

00:08:49,490 --> 00:08:53,560
more key ways don't don't mean

00:08:51,470 --> 00:08:55,660
necessarily more quality

00:08:53,560 --> 00:08:59,200
and she made references that they do

00:08:55,660 --> 00:09:03,850
have a team of 70 developers with only

00:08:59,200 --> 00:09:06,160
five QA engineers so imagine how we

00:09:03,850 --> 00:09:07,420
found ourselves in what situations we

00:09:06,160 --> 00:09:09,880
found ourselves when actually we

00:09:07,420 --> 00:09:13,270
realized we do have a team of five QA

00:09:09,880 --> 00:09:16,180
engineers with 12 developers so if we're

00:09:13,270 --> 00:09:18,100
going to scale up the the engineering

00:09:16,180 --> 00:09:20,770
team does it mean that we need to scale

00:09:18,100 --> 00:09:22,660
we need to bring more QA engineers or do

00:09:20,770 --> 00:09:27,060
we need to look at our practices to see

00:09:22,660 --> 00:09:29,590
how actually we can we can work it out

00:09:27,060 --> 00:09:32,650
so that was that was the trigger for us

00:09:29,590 --> 00:09:36,130
I guess we will looked at the webinar we

00:09:32,650 --> 00:09:40,120
look to see just we were what we wanted

00:09:36,130 --> 00:09:43,570
what we could implement in it and we

00:09:40,120 --> 00:09:47,440
really liked the idea behind behind what

00:09:43,570 --> 00:09:50,310
they were proposing why because what

00:09:47,440 --> 00:09:50,310
they mentioned was that

00:09:50,810 --> 00:09:54,890
if engineers that master testing not

00:09:53,150 --> 00:09:57,470
only increase the efficiency and the

00:09:54,890 --> 00:10:01,010
capacity of their teams but they also

00:09:57,470 --> 00:10:02,510
write higher quality software they were

00:10:01,010 --> 00:10:04,880
also looking at the efficiency side

00:10:02,510 --> 00:10:07,190
basically trying to and it was a good

00:10:04,880 --> 00:10:09,140
point basically trying to if you prevent

00:10:07,190 --> 00:10:12,230
bugs before they are written it means

00:10:09,140 --> 00:10:14,690
you save time basically you-you-you

00:10:12,230 --> 00:10:17,060
don't waste time in finding those bugs

00:10:14,690 --> 00:10:20,240
and investigating them and fixing them

00:10:17,060 --> 00:10:21,830
so you save time so that means you're

00:10:20,240 --> 00:10:24,080
gonna be more efficient you're gonna

00:10:21,830 --> 00:10:26,690
write more code you're going to refactor

00:10:24,080 --> 00:10:28,700
more so that means in the end that the

00:10:26,690 --> 00:10:31,040
teams can ship faster and they can have

00:10:28,700 --> 00:10:34,160
more confidence that the quality remains

00:10:31,040 --> 00:10:36,340
high standard as they they wanted from

00:10:34,160 --> 00:10:39,170
from the beginning

00:10:36,340 --> 00:10:41,120
another reason basically trying to to

00:10:39,170 --> 00:10:45,680
look into some of these approaches was

00:10:41,120 --> 00:10:48,560
the independence because again the

00:10:45,680 --> 00:10:51,050
playin team made a good point that when

00:10:48,560 --> 00:10:53,000
testing can be confidently shared the

00:10:51,050 --> 00:10:55,490
people who are passionate about quality

00:10:53,000 --> 00:10:57,590
such as great testers can focus on

00:10:55,490 --> 00:10:59,840
solving the root cause of the quality

00:10:57,590 --> 00:11:03,140
problems in addition to discovering

00:10:59,840 --> 00:11:06,770
their symptoms so what would what

00:11:03,140 --> 00:11:09,710
they'll mention was that if if engineers

00:11:06,770 --> 00:11:13,040
basically focus more on testing their

00:11:09,710 --> 00:11:14,810
own work that means that overall we're

00:11:13,040 --> 00:11:18,140
gonna see an improvement in efficiency

00:11:14,810 --> 00:11:21,830
and actually you can give more time to

00:11:18,140 --> 00:11:24,710
your QA engineers your QA team testers

00:11:21,830 --> 00:11:27,500
how you want to call them to focus on

00:11:24,710 --> 00:11:31,280
bigger problems so they will not

00:11:27,500 --> 00:11:33,290
actually waste their time trying to find

00:11:31,280 --> 00:11:35,990
bugs in your code for example in

00:11:33,290 --> 00:11:38,120
engineers code when actually they could

00:11:35,990 --> 00:11:40,340
focus on bigger problems trying to

00:11:38,120 --> 00:11:43,370
enable you to be even more efficient

00:11:40,340 --> 00:11:45,350
even more faster so looking taking a

00:11:43,370 --> 00:11:49,550
step back basically and seeing how they

00:11:45,350 --> 00:11:52,430
could help you all this reasoning and

00:11:49,550 --> 00:11:55,970
all this experiment that they've done

00:11:52,430 --> 00:11:58,400
actually resonated with us a lot and we

00:11:55,970 --> 00:11:59,810
were really bought into it as a group as

00:11:58,400 --> 00:12:01,940
an engineering group because this is

00:11:59,810 --> 00:12:05,470
really important point as well so we

00:12:01,940 --> 00:12:09,260
start to actually give it a try

00:12:05,470 --> 00:12:12,590
so the experiment the first point that

00:12:09,260 --> 00:12:14,870
we've made was to look at the metrics so

00:12:12,590 --> 00:12:17,779
we tried to understand some metrics to

00:12:14,870 --> 00:12:20,839
see how where we are today basically

00:12:17,779 --> 00:12:23,089
world work back then and where we want

00:12:20,839 --> 00:12:24,800
to be so we can measure any any tricks

00:12:23,089 --> 00:12:26,510
that we're making in our processes

00:12:24,800 --> 00:12:33,850
anything basically so we can learn from

00:12:26,510 --> 00:12:36,680
them our our processes were compiled and

00:12:33,850 --> 00:12:39,830
we have loads of column flow two phases

00:12:36,680 --> 00:12:42,980
to to understand exactly how how we're

00:12:39,830 --> 00:12:46,160
doing as a team so we started with a

00:12:42,980 --> 00:12:48,710
cycle time registering which registered

00:12:46,160 --> 00:12:50,930
sorry between in progress and when it's

00:12:48,710 --> 00:12:54,830
ready to ship so what it means is that

00:12:50,930 --> 00:12:57,410
we were starting to count when actually

00:12:54,830 --> 00:12:59,690
something was picked up to be

00:12:57,410 --> 00:13:01,390
implemented and then we were looking

00:12:59,690 --> 00:13:04,180
until

00:13:01,390 --> 00:13:08,110
until the work was ready to ship

00:13:04,180 --> 00:13:11,710
basically we didn't look we didn't look

00:13:08,110 --> 00:13:15,490
initially until basically something was

00:13:11,710 --> 00:13:19,210
live in production because at that point

00:13:15,490 --> 00:13:21,940
we used to do train releases so

00:13:19,210 --> 00:13:23,830
basically we were bulking up a couple of

00:13:21,940 --> 00:13:26,380
tickets for example in release and

00:13:23,830 --> 00:13:31,270
sending them every couple of days let's

00:13:26,380 --> 00:13:33,550
say so we didn't want this to to hinder

00:13:31,270 --> 00:13:36,540
I guess our metrics because we knew

00:13:33,550 --> 00:13:39,130
there was a slight delay in the release

00:13:36,540 --> 00:13:40,780
release process so we said a starting

00:13:39,130 --> 00:13:42,910
point we're only gonna look basically

00:13:40,780 --> 00:13:45,250
from when we started picking up the work

00:13:42,910 --> 00:13:47,890
until it's ready to be shipped so we can

00:13:45,250 --> 00:13:49,750
see basically throughout the development

00:13:47,890 --> 00:13:53,830
lifecycle how we can actually improve

00:13:49,750 --> 00:13:56,200
the processes the other metric that we

00:13:53,830 --> 00:13:57,550
looked at was ticket rejection rate and

00:13:56,200 --> 00:13:59,940
actually occasion

00:13:57,550 --> 00:14:03,100
are speaking about this one as well so

00:13:59,940 --> 00:14:06,350
this metric is looking at how many times

00:14:03,100 --> 00:14:08,180
the ticket is going back and forth

00:14:06,350 --> 00:14:12,770
and this one was really important for us

00:14:08,180 --> 00:14:15,440
because we knew we were going back and

00:14:12,770 --> 00:14:17,630
forth between between our phases quite a

00:14:15,440 --> 00:14:20,750
lot quite a lot and actually after we

00:14:17,630 --> 00:14:24,350
implemented this we had the data to

00:14:20,750 --> 00:14:24,920
prove this so if before I didn't mention

00:14:24,350 --> 00:14:29,090
this

00:14:24,920 --> 00:14:32,810
we had a cycle time before of a week and

00:14:29,090 --> 00:14:34,670
four days an average basically to finish

00:14:32,810 --> 00:14:37,430
something between in progress and ready

00:14:34,670 --> 00:14:39,680
to ship so that gives around eleven

00:14:37,430 --> 00:14:43,460
twelve days basically so that's quite a

00:14:39,680 --> 00:14:45,820
bit of a bit of time with the addition

00:14:43,460 --> 00:14:49,100
of this metric ticket rejection rate

00:14:45,820 --> 00:14:52,850
we've seen that actually in test phase

00:14:49,100 --> 00:14:57,770
was was going back and forth basically

00:14:52,850 --> 00:15:01,460
around it on average around 63% so that

00:14:57,770 --> 00:15:05,990
means from 100 tickets six three of them

00:15:01,460 --> 00:15:07,700
would go at least once back which if

00:15:05,990 --> 00:15:09,680
you're looking you're in retrospect it

00:15:07,700 --> 00:15:13,280
means that basically more than half of

00:15:09,680 --> 00:15:17,540
your time as a team is wasted on fixing

00:15:13,280 --> 00:15:19,730
bugs and fixing broken understanding so

00:15:17,540 --> 00:15:21,380
we understood that actually this is

00:15:19,730 --> 00:15:24,020
something that definitely we need to we

00:15:21,380 --> 00:15:26,840
need to improve because half of our time

00:15:24,020 --> 00:15:30,710
was wasted basically on on fixing bugs

00:15:26,840 --> 00:15:32,510
and as I mentioned fixing broken

00:15:30,710 --> 00:15:37,670
understanding it was something that we

00:15:32,510 --> 00:15:39,410
definitely wanted you to look at after

00:15:37,670 --> 00:15:41,890
we implemented the metrics now that we

00:15:39,410 --> 00:15:45,730
had the metrics we were able to actually

00:15:41,890 --> 00:15:48,320
actually start an experiment and see how

00:15:45,730 --> 00:15:50,540
see how everything goes in the team

00:15:48,320 --> 00:15:55,250
basically throughout throughout our life

00:15:50,540 --> 00:15:57,470
cycles so the next step was to visualize

00:15:55,250 --> 00:15:59,780
our entire workflow to identify

00:15:57,470 --> 00:16:03,860
bottlenecks so what I mentioned we are

00:15:59,780 --> 00:16:05,240
working in Kanban but I won't see why

00:16:03,860 --> 00:16:08,120
you wouldn't be able to do this if

00:16:05,240 --> 00:16:10,640
working in a scrum for example because

00:16:08,120 --> 00:16:14,060
what we want you to see here was where

00:16:10,640 --> 00:16:16,670
is that time wasted so we knew it takes

00:16:14,060 --> 00:16:19,640
a lot a lot of time I guess between

00:16:16,670 --> 00:16:21,710
starting between picking up some more

00:16:19,640 --> 00:16:23,660
and actually being ready to be to be

00:16:21,710 --> 00:16:26,060
shipped so the release process the

00:16:23,660 --> 00:16:29,300
release time wasn't even included in

00:16:26,060 --> 00:16:31,910
this so this was only to implement and

00:16:29,300 --> 00:16:36,470
test a piece of work and it was a lot of

00:16:31,910 --> 00:16:39,820
time actually wasted the only note that

00:16:36,470 --> 00:16:39,820
I wanted to make here was that

00:16:39,910 --> 00:16:45,520
we were our approach being being you

00:16:43,510 --> 00:16:49,240
know being in financial services and

00:16:45,520 --> 00:16:52,210
being in a regulated environment makes

00:16:49,240 --> 00:16:57,550
us take take a bit of a more cautious

00:16:52,210 --> 00:17:00,690
approach to all releases so our our goal

00:16:57,550 --> 00:17:04,420
there basically is to release only user

00:17:00,690 --> 00:17:07,300
user value so that means for example in

00:17:04,420 --> 00:17:09,970
this situation we don't count tiny

00:17:07,300 --> 00:17:14,170
changes due to a service to a small API

00:17:09,970 --> 00:17:15,940
which is not actually bringing and users

00:17:14,170 --> 00:17:18,580
value necessarily so we were only

00:17:15,940 --> 00:17:20,890
looking at stream value basically so

00:17:18,580 --> 00:17:22,960
I'll treat your work here which could be

00:17:20,890 --> 00:17:25,270
quite complex as well and we were

00:17:22,960 --> 00:17:28,120
comfortable that it takes a couple of

00:17:25,270 --> 00:17:30,550
days so to implement these but

00:17:28,120 --> 00:17:32,440
definitely we weren't comfortable that

00:17:30,550 --> 00:17:34,420
it takes or not it took on average two

00:17:32,440 --> 00:17:38,920
weeks I guess to implement some it's a

00:17:34,420 --> 00:17:41,890
new feature for example so we started

00:17:38,920 --> 00:17:44,170
visualizing our entire workflow and what

00:17:41,890 --> 00:17:46,930
we've done based based on the examples

00:17:44,170 --> 00:17:48,760
that we got from occasion we we actually

00:17:46,930 --> 00:17:52,350
implemented we actually changed it a bit

00:17:48,760 --> 00:17:55,540
so what we've done is before development

00:17:52,350 --> 00:17:59,620
we we added this things which is the

00:17:55,540 --> 00:18:02,290
task econ and why we've done this

00:17:59,620 --> 00:18:03,280
because we wanted to pair up front we

00:18:02,290 --> 00:18:07,060
want you to understand up front

00:18:03,280 --> 00:18:09,880
basically to understand the risks to

00:18:07,060 --> 00:18:11,230
understand the edge cases to understand

00:18:09,880 --> 00:18:12,340
the test approach how we're going to

00:18:11,230 --> 00:18:14,350
test and how we're going to validate

00:18:12,340 --> 00:18:17,380
that piece of work we want you to do all

00:18:14,350 --> 00:18:18,790
that at the beginning so that we have

00:18:17,380 --> 00:18:22,480
that shared understanding created

00:18:18,790 --> 00:18:25,470
upfront the next phase is in development

00:18:22,480 --> 00:18:27,640
basically so in progress where

00:18:25,470 --> 00:18:29,290
developers basically are writing their

00:18:27,640 --> 00:18:30,910
code they're writing unit tests

00:18:29,290 --> 00:18:34,420
component tests which are pictures they

00:18:30,910 --> 00:18:36,400
need the extension to that now is that

00:18:34,420 --> 00:18:38,260
the developer based based on the

00:18:36,400 --> 00:18:42,130
outcomes from from this session test

00:18:38,260 --> 00:18:44,920
kickoff they also need to write their

00:18:42,130 --> 00:18:47,260
acceptance tests automated if they need

00:18:44,920 --> 00:18:49,240
to basically so the test kickoff is a

00:18:47,260 --> 00:18:51,670
session where we discuss okay

00:18:49,240 --> 00:18:53,270
it's a tiny change you're gonna we're

00:18:51,670 --> 00:18:55,520
gonna make it here

00:18:53,270 --> 00:18:57,560
and we're gonna we're going to validate

00:18:55,520 --> 00:18:59,240
it using these type of tests manual

00:18:57,560 --> 00:19:02,270
automated depending on depending on the

00:18:59,240 --> 00:19:04,940
change now that you have the approach

00:19:02,270 --> 00:19:08,630
you go into progress where as I

00:19:04,940 --> 00:19:10,820
mentioned you implement and you test you

00:19:08,630 --> 00:19:15,020
crate your automated checks for for that

00:19:10,820 --> 00:19:18,190
to prove your work and then we still

00:19:15,020 --> 00:19:21,380
have the test phase as a whole because

00:19:18,190 --> 00:19:25,730
we we acknowledge that actually it's not

00:19:21,380 --> 00:19:28,310
it's not a column owned by DQ engineer

00:19:25,730 --> 00:19:31,280
is actually a phase in the development

00:19:28,310 --> 00:19:32,780
lifecycle and because we it was really

00:19:31,280 --> 00:19:34,880
important for us to identify bottlenecks

00:19:32,780 --> 00:19:38,420
we thought that actually it's better to

00:19:34,880 --> 00:19:41,030
split to split into more granular phases

00:19:38,420 --> 00:19:45,380
so you can exactly see where the

00:19:41,030 --> 00:19:46,010
bottleneck is so our test phase is was

00:19:45,380 --> 00:19:48,890
still there

00:19:46,010 --> 00:19:52,190
but what we had changed was we had a

00:19:48,890 --> 00:19:54,800
developer own test so what it meant was

00:19:52,190 --> 00:19:57,380
that actually the developer itself

00:19:54,800 --> 00:19:59,540
himself or a different developer from

00:19:57,380 --> 00:20:02,450
the team is going to be testing the

00:19:59,540 --> 00:20:05,360
story using both the testing nodes

00:20:02,450 --> 00:20:08,330
created in this test kickoff and their

00:20:05,360 --> 00:20:10,520
own exploratory testing skills you know

00:20:08,330 --> 00:20:13,490
of course you're gonna think well how

00:20:10,520 --> 00:20:14,810
can an engineer I don't know there's a

00:20:13,490 --> 00:20:17,410
different type of skill set between

00:20:14,810 --> 00:20:20,390
between a QA engineer and a developer

00:20:17,410 --> 00:20:25,520
was that successful or not but I'm gonna

00:20:20,390 --> 00:20:26,960
get to to that detail later so that was

00:20:25,520 --> 00:20:29,120
the idea basically we're gonna have a

00:20:26,960 --> 00:20:30,470
developer and test QA engineers are now

00:20:29,120 --> 00:20:32,900
going to do the testing again anymore

00:20:30,470 --> 00:20:35,170
the aim was that the developers are

00:20:32,900 --> 00:20:38,360
actually going to test their own work

00:20:35,170 --> 00:20:40,520
and when we were we meant by testing was

00:20:38,360 --> 00:20:43,010
acceptance testing some exploratory

00:20:40,520 --> 00:20:48,590
reasons well I think automated checks

00:20:43,010 --> 00:20:50,300
were needed to so so we can actually be

00:20:48,590 --> 00:20:51,560
comfortable that we can release into

00:20:50,300 --> 00:20:55,700
your entry read for example into

00:20:51,560 --> 00:20:58,340
production after a couple of iterations

00:20:55,700 --> 00:21:01,670
we also added this space which is a demo

00:20:58,340 --> 00:21:04,160
and what it meant is at the beginning

00:21:01,670 --> 00:21:06,320
not everyone is comfortable until you

00:21:04,160 --> 00:21:10,340
learn and until you get comfortable you

00:21:06,320 --> 00:21:12,070
to have that buffer I guess and you need

00:21:10,340 --> 00:21:15,470
to have that buffer of getting feedback

00:21:12,070 --> 00:21:17,660
so what we've seen a couple of times was

00:21:15,470 --> 00:21:20,690
that the developer was getting

00:21:17,660 --> 00:21:22,940
comfortable here we were ready to ship

00:21:20,690 --> 00:21:25,100
and then I don't know some explorer was

00:21:22,940 --> 00:21:28,250
happening maybe in during this phase and

00:21:25,100 --> 00:21:30,410
we were discovering issues so after a

00:21:28,250 --> 00:21:33,500
couple of iterations we decided to move

00:21:30,410 --> 00:21:37,070
this closer before actually starting the

00:21:33,500 --> 00:21:39,530
shipping process so what happens is once

00:21:37,070 --> 00:21:43,460
the developer is comfortable with the

00:21:39,530 --> 00:21:46,940
change we added this demo state where he

00:21:43,460 --> 00:21:48,860
can demo to the quality engineers or to

00:21:46,940 --> 00:21:52,490
the product owner your stakeholders

00:21:48,860 --> 00:21:55,220
depending on who you have demo the work

00:21:52,490 --> 00:21:57,470
itself so basically you you define

00:21:55,220 --> 00:21:59,780
upfront which you want to implement and

00:21:57,470 --> 00:22:02,330
how you're going to prove that work you

00:21:59,780 --> 00:22:04,790
implement it and then you you demo at

00:22:02,330 --> 00:22:06,710
the end you say this is the change this

00:22:04,790 --> 00:22:08,330
is what I considered you get any

00:22:06,710 --> 00:22:10,520
feedback if you need to basically

00:22:08,330 --> 00:22:14,480
getting that Senate checking in the team

00:22:10,520 --> 00:22:18,470
and the collaboration look once you're

00:22:14,480 --> 00:22:20,330
comfortable with it depending if you

00:22:18,470 --> 00:22:22,940
need to for example if it's not done

00:22:20,330 --> 00:22:27,200
upfront what happened for us was that

00:22:22,940 --> 00:22:30,440
with more complex features we want to

00:22:27,200 --> 00:22:33,830
try to an exploratory session on its own

00:22:30,440 --> 00:22:36,020
so that the whole team basically it's

00:22:33,830 --> 00:22:38,060
gonna work together for a time box under

00:22:36,020 --> 00:22:39,650
30 minutes an hour depending on how long

00:22:38,060 --> 00:22:42,650
you need and depending on the complexity

00:22:39,650 --> 00:22:45,710
of the work basically to try and break a

00:22:42,650 --> 00:22:46,880
feature and once once all these are done

00:22:45,710 --> 00:22:49,840
and everyone is happy

00:22:46,880 --> 00:22:53,240
you start the shipping process because

00:22:49,840 --> 00:22:54,500
you are comfortable that the work is as

00:22:53,240 --> 00:22:57,230
you would expect it to be

00:22:54,500 --> 00:23:00,440
I mentioned quite a few terms there and

00:22:57,230 --> 00:23:03,710
I have a few a few details I guess over

00:23:00,440 --> 00:23:08,030
over these techniques so as per as per

00:23:03,710 --> 00:23:09,980
their tutorials as well we implemented

00:23:08,030 --> 00:23:12,050
this dotting and actually it's a really

00:23:09,980 --> 00:23:14,540
popular term you know in our teams now

00:23:12,050 --> 00:23:17,860
who's gonna do the dotting because what

00:23:14,540 --> 00:23:20,600
it means is actually we don't have Q A's

00:23:17,860 --> 00:23:22,610
responsible for testing itself

00:23:20,600 --> 00:23:25,549
actually the developers in the team are

00:23:22,610 --> 00:23:29,649
going to pick up that responsibility so

00:23:25,549 --> 00:23:32,419
they're gonna be on the testing Duty do

00:23:29,649 --> 00:23:34,309
this this practice this technique is

00:23:32,419 --> 00:23:36,649
going to introduce engineers to the idea

00:23:34,309 --> 00:23:38,960
of testing and improve their skills and

00:23:36,649 --> 00:23:41,509
make it explicit that actually quality

00:23:38,960 --> 00:23:42,769
is a shared responsibility but that

00:23:41,509 --> 00:23:44,779
doesn't mean that they're gonna be an

00:23:42,769 --> 00:23:48,470
experts from day one it takes a lot of

00:23:44,779 --> 00:23:50,330
learning and a lot of pairing so that

00:23:48,470 --> 00:23:54,379
everyone gets comfortable with

00:23:50,330 --> 00:23:57,769
everything long term it's gonna be a

00:23:54,379 --> 00:24:00,320
last QA less button like over over the

00:23:57,769 --> 00:24:02,000
QA engineers because actually the

00:24:00,320 --> 00:24:06,200
developers can can be comfortable

00:24:02,000 --> 00:24:07,669
picking up their own work and ideally

00:24:06,200 --> 00:24:09,649
long-term you would want to feel

00:24:07,669 --> 00:24:12,830
confident that actually the original

00:24:09,649 --> 00:24:15,889
developer has sufficiently tested for

00:24:12,830 --> 00:24:19,399
the risks outlined in the test kickoff

00:24:15,889 --> 00:24:21,529
session so it's up to you I guess if you

00:24:19,399 --> 00:24:24,529
want to try another developer do it

00:24:21,529 --> 00:24:26,809
being on the testing doujin we tried you

00:24:24,529 --> 00:24:29,450
didn't quite work for us but what we

00:24:26,809 --> 00:24:32,809
currently do now is the same developer

00:24:29,450 --> 00:24:34,960
actually is taking full ownership so

00:24:32,809 --> 00:24:37,190
he's part of the kickoff sessions

00:24:34,960 --> 00:24:41,149
implementation and then proving his own

00:24:37,190 --> 00:24:43,759
work from an acceptance point of view so

00:24:41,149 --> 00:24:45,049
not necessarily from from exploratory

00:24:43,759 --> 00:24:46,940
basically point of view and that's why

00:24:45,049 --> 00:24:50,149
we have the additional session basically

00:24:46,940 --> 00:24:52,519
to have a second pair of eyes to get

00:24:50,149 --> 00:24:56,000
away from from that confirmation bias

00:24:52,519 --> 00:24:59,000
for example yeah and that's it would be

00:24:56,000 --> 00:25:02,019
with the judging side on the other side

00:24:59,000 --> 00:25:06,350
we also used as I mentioned test kickoff

00:25:02,019 --> 00:25:08,330
and to be frank test kickoff is sounds

00:25:06,350 --> 00:25:10,639
really really similar with three amigos

00:25:08,330 --> 00:25:15,440
if you if you know the concept so

00:25:10,639 --> 00:25:17,960
basically an ad hoc session right before

00:25:15,440 --> 00:25:20,779
picking up new work where you you have

00:25:17,960 --> 00:25:23,419
Anna will call a cue engineer a

00:25:20,779 --> 00:25:25,850
developer and maybe it's a mobile

00:25:23,419 --> 00:25:28,760
product or B A's depending on who you

00:25:25,850 --> 00:25:30,300
have and discussing basically risks

00:25:28,760 --> 00:25:32,750
discussing edge cases

00:25:30,300 --> 00:25:36,540
up front before implementation starts

00:25:32,750 --> 00:25:38,640
discussing test approach details so test

00:25:36,540 --> 00:25:42,210
impact types ability checks that you

00:25:38,640 --> 00:25:46,080
want you you want covered and getting

00:25:42,210 --> 00:25:49,110
getting that inside I guess upfront and

00:25:46,080 --> 00:25:51,450
getting getting the engineers to think

00:25:49,110 --> 00:25:54,030
about testing upfront because if you

00:25:51,450 --> 00:25:56,070
start thinking of how am I gonna test

00:25:54,030 --> 00:25:58,170
this you're gonna see a shift in

00:25:56,070 --> 00:26:00,870
thinking as well so something that we've

00:25:58,170 --> 00:26:05,130
seen with this is that internally we

00:26:00,870 --> 00:26:06,510
take we've taken a lot more we've taken

00:26:05,130 --> 00:26:09,300
an approach where we think a lot more

00:26:06,510 --> 00:26:11,250
about testability because upfront if you

00:26:09,300 --> 00:26:13,740
start with okay how am I going to test

00:26:11,250 --> 00:26:15,690
this you're right away thinking okay I'm

00:26:13,740 --> 00:26:18,960
gonna implement it in a way so that I

00:26:15,690 --> 00:26:20,910
can test it a lot easier so definitely

00:26:18,960 --> 00:26:24,780
you see loads of loads of shifts I guess

00:26:20,910 --> 00:26:27,120
long term I don't know why three amigos

00:26:24,780 --> 00:26:31,140
never stick with us because we tried we

00:26:27,120 --> 00:26:32,760
tried this approach before but I don't

00:26:31,140 --> 00:26:36,120
know I don't know exactly what happened

00:26:32,760 --> 00:26:38,430
maybe maybe this experiment and the

00:26:36,120 --> 00:26:42,750
drive that we had in all of us basically

00:26:38,430 --> 00:26:44,640
to see it succeeding maybe the name I

00:26:42,750 --> 00:26:48,420
don't know test kick off definitely it

00:26:44,640 --> 00:26:50,060
definitely works for us whenever the

00:26:48,420 --> 00:26:53,070
developer wants to pick up something new

00:26:50,060 --> 00:26:55,380
he we have slack channels he writes the

00:26:53,070 --> 00:26:57,450
message in choice together the people it

00:26:55,380 --> 00:27:00,150
usually takes 5-10 minutes depending on

00:26:57,450 --> 00:27:02,700
the complexity because you should

00:27:00,150 --> 00:27:05,670
already have quite a few design analysis

00:27:02,700 --> 00:27:07,850
sessions before so you have the context

00:27:05,670 --> 00:27:11,430
already created this one is more

00:27:07,850 --> 00:27:15,050
deciding the details before actually

00:27:11,430 --> 00:27:15,050
getting into into implementation

00:27:17,419 --> 00:27:21,249
the other techniques that I mentioned

00:27:19,190 --> 00:27:23,539
there were demo so as I mentioned it's

00:27:21,249 --> 00:27:25,399
reviewing basically the new feature the

00:27:23,539 --> 00:27:27,230
new change that you made and the test

00:27:25,399 --> 00:27:28,549
evidence for feedback this one

00:27:27,230 --> 00:27:31,369
definitely helped us at the beginning

00:27:28,549 --> 00:27:32,809
because we weren't comfortable so cue

00:27:31,369 --> 00:27:36,350
engineers weren't quite comfortable with

00:27:32,809 --> 00:27:38,929
developers doing the testing on the same

00:27:36,350 --> 00:27:40,549
side engineers weren't comfortable yet

00:27:38,929 --> 00:27:42,139
they they were feeling they're missing

00:27:40,549 --> 00:27:44,860
something so they still wanted that

00:27:42,139 --> 00:27:47,749
safety net from from our key engineers

00:27:44,860 --> 00:27:50,749
and again it's ad hoc on-demand based

00:27:47,749 --> 00:27:52,759
based on the type of changes through a

00:27:50,749 --> 00:27:56,049
link to say actually I have here the new

00:27:52,759 --> 00:27:59,029
change have a look give me any feedback

00:27:56,049 --> 00:28:01,220
usually it's a review with the QA

00:27:59,029 --> 00:28:04,009
engineer where basically they present to

00:28:01,220 --> 00:28:06,200
the quality engineer the feature the

00:28:04,009 --> 00:28:07,999
change in the test evidence basically so

00:28:06,200 --> 00:28:10,580
they can get comfortable with the change

00:28:07,999 --> 00:28:13,940
and then we are comfortable with the

00:28:10,580 --> 00:28:16,659
change in we are all of us I guess happy

00:28:13,940 --> 00:28:20,119
at the end to be able to release

00:28:16,659 --> 00:28:25,519
exploratory we started adding old all

00:28:20,119 --> 00:28:27,200
team sessions I'm sorry again to get

00:28:25,519 --> 00:28:32,629
into the practice of thinking about

00:28:27,200 --> 00:28:34,609
exploratory 2 to pair with engineers and

00:28:32,629 --> 00:28:39,590
actually learn more more about

00:28:34,609 --> 00:28:42,679
exploratory tips how you can do good

00:28:39,590 --> 00:28:44,690
export your testing and we've done them

00:28:42,679 --> 00:28:47,179
as a group basically to get that

00:28:44,690 --> 00:28:50,359
knowledge and to bring that idea into

00:28:47,179 --> 00:28:52,909
the team and in time what we've

00:28:50,359 --> 00:28:56,600
understood is that we were actually

00:28:52,909 --> 00:28:58,609
ready we were in a process where we we

00:28:56,600 --> 00:29:00,559
started thinking why not actually ship

00:28:58,609 --> 00:29:02,299
it because I'm comfortable releasing it

00:29:00,559 --> 00:29:05,600
because I've done all this testing

00:29:02,299 --> 00:29:07,399
upfront so it came natural to actually

00:29:05,600 --> 00:29:11,509
start thinking about the release

00:29:07,399 --> 00:29:14,659
processes all at one point so we started

00:29:11,509 --> 00:29:17,570
looking into how actually we can add the

00:29:14,659 --> 00:29:21,200
release part add the releases part of

00:29:17,570 --> 00:29:23,239
the whole delivery process these were

00:29:21,200 --> 00:29:25,820
the techniques that we've used as I

00:29:23,239 --> 00:29:29,600
mentioned they are all

00:29:25,820 --> 00:29:31,010
very they were all presented basically

00:29:29,600 --> 00:29:33,770
from from different different

00:29:31,010 --> 00:29:38,570
experiments in different cycles where we

00:29:33,770 --> 00:29:41,000
tried different things so as I mentioned

00:29:38,570 --> 00:29:43,420
we learned and we adapted all the time

00:29:41,000 --> 00:29:46,580
so we've done loads of experiments and

00:29:43,420 --> 00:29:50,450
it was good because we had metrics to

00:29:46,580 --> 00:29:53,060
understand those experiments so you can

00:29:50,450 --> 00:29:55,850
you can adjust all the time and actually

00:29:53,060 --> 00:29:58,430
we we take retrospective really

00:29:55,850 --> 00:30:02,510
seriously because we wanted to learn we

00:29:58,430 --> 00:30:04,130
wanted to better as a group so all the

00:30:02,510 --> 00:30:06,230
time we were adjusting and we were

00:30:04,130 --> 00:30:08,890
changing and we're looking again to see

00:30:06,230 --> 00:30:11,180
how actually we can improve everything

00:30:08,890 --> 00:30:15,290
keep in mind that there is a learning

00:30:11,180 --> 00:30:18,590
curve so as we call it hand-holding and

00:30:15,290 --> 00:30:20,120
what it means is at the beginning it

00:30:18,590 --> 00:30:22,400
you're not going to see the change yet

00:30:20,120 --> 00:30:25,220
actually what happened at the beginning

00:30:22,400 --> 00:30:29,900
is that our quality engineers were

00:30:25,220 --> 00:30:33,290
seeing that they were there were

00:30:29,900 --> 00:30:36,320
were having last time as before even

00:30:33,290 --> 00:30:38,180
even than before because actually they

00:30:36,320 --> 00:30:41,390
were pairing a lot more there were

00:30:38,180 --> 00:30:44,750
reviewing work there were in a lot more

00:30:41,390 --> 00:30:47,540
sessions and that is because at the

00:30:44,750 --> 00:30:50,720
beginning it's that stepping basically

00:30:47,540 --> 00:30:52,970
learning curve where you need you need

00:30:50,720 --> 00:30:55,070
your handhold basically the engineer at

00:30:52,970 --> 00:30:57,770
the developer until he's comfortable I

00:30:55,070 --> 00:30:59,930
guess to go on his way and then only

00:30:57,770 --> 00:31:01,210
come for your support when when he needs

00:30:59,930 --> 00:31:04,940
it

00:31:01,210 --> 00:31:06,620
it takes time definitely takes a lot of

00:31:04,940 --> 00:31:10,310
time you're not gonna see improve months

00:31:06,620 --> 00:31:14,450
you're not gonna see changes until weeks

00:31:10,310 --> 00:31:19,490
for us for example e2 given once and as

00:31:14,450 --> 00:31:22,790
I mentioned it pair pair a lot basically

00:31:19,490 --> 00:31:24,890
we were pairing quality engineers with

00:31:22,790 --> 00:31:27,500
the developers all the time we brought

00:31:24,890 --> 00:31:31,310
product in as well because we were

00:31:27,500 --> 00:31:33,020
really invested into getting f1 up front

00:31:31,310 --> 00:31:36,710
getting that children standing created

00:31:33,020 --> 00:31:38,870
up front so we can actually be faster

00:31:36,710 --> 00:31:40,700
into into the delivery into the

00:31:38,870 --> 00:31:42,650
implementation phase and into the

00:31:40,700 --> 00:31:44,720
release phase because if we had that

00:31:42,650 --> 00:31:47,570
agreement upfront it's really easy to

00:31:44,720 --> 00:31:50,810
just put the change and then make the

00:31:47,570 --> 00:31:52,280
change and ship it and learn from it the

00:31:50,810 --> 00:31:54,740
last point that I want to make here is

00:31:52,280 --> 00:31:57,140
that it's a team effort I think I

00:31:54,740 --> 00:31:59,450
mentioned a couple of times if we

00:31:57,140 --> 00:32:03,170
wouldn't have the buy-in from the team

00:31:59,450 --> 00:32:06,050
and from the company itself I don't

00:32:03,170 --> 00:32:08,930
think we would have been here because

00:32:06,050 --> 00:32:12,410
because of the learning curve because it

00:32:08,930 --> 00:32:14,390
takes time because for even now

00:32:12,410 --> 00:32:17,150
sometimes depending on the change you

00:32:14,390 --> 00:32:20,840
you're gonna find that engineers maybe

00:32:17,150 --> 00:32:25,670
are are focusing more of their time on

00:32:20,840 --> 00:32:27,770
testing and not on actual changes in the

00:32:25,670 --> 00:32:30,400
system and it's something about him that

00:32:27,770 --> 00:32:33,290
I need to get from from the whole team

00:32:30,400 --> 00:32:35,570
from from the whole organization to to

00:32:33,290 --> 00:32:38,210
understand that actually it's an effort

00:32:35,570 --> 00:32:40,460
that you do today so you can learn from

00:32:38,210 --> 00:32:43,640
it so you can win from it in a month's

00:32:40,460 --> 00:32:46,310
time insurance time because in time you

00:32:43,640 --> 00:32:50,690
see an improvement into the mindset and

00:32:46,310 --> 00:32:52,220
into the ways of working so the way we

00:32:50,690 --> 00:32:54,560
presented this was that we already

00:32:52,220 --> 00:32:58,160
losing a lot of time so as I mentioned

00:32:54,560 --> 00:33:01,130
our power metrics were showing that 63%

00:32:58,160 --> 00:33:04,010
of the times we were going back with

00:33:01,130 --> 00:33:06,560
bugs and changes to the to the tickets

00:33:04,010 --> 00:33:10,490
why not actually using that time to

00:33:06,560 --> 00:33:13,850
learn the practice to be better and in

00:33:10,490 --> 00:33:17,060
the end be faster because after you're

00:33:13,850 --> 00:33:19,010
comfortable with the process you know

00:33:17,060 --> 00:33:21,910
exactly how to do it

00:33:19,010 --> 00:33:24,710
and you would be a lot more efficient

00:33:21,910 --> 00:33:29,180
faster and comfortable with the with the

00:33:24,710 --> 00:33:32,830
changes a lot about this so I'm gonna

00:33:29,180 --> 00:33:36,020
present your bet where we are today so

00:33:32,830 --> 00:33:39,110
overall we increased the feature

00:33:36,020 --> 00:33:42,280
automated checks coverage so actually

00:33:39,110 --> 00:33:46,220
we've seen quite a bit steep increase in

00:33:42,280 --> 00:33:49,910
how many automated checks we have we

00:33:46,220 --> 00:33:52,580
have created a lot of test dashboards a

00:33:49,910 --> 00:33:54,860
lot of alerting for visibility because

00:33:52,580 --> 00:33:58,010
we found ourselves quite a bit caught in

00:33:54,860 --> 00:34:00,560
a few situations where engineers wanted

00:33:58,010 --> 00:34:02,390
to run tests want you to run regression

00:34:00,560 --> 00:34:05,630
tests but they didn't quite know how to

00:34:02,390 --> 00:34:10,940
do it where to do it what type of tests

00:34:05,630 --> 00:34:13,159
to run and now in in time we've seen

00:34:10,940 --> 00:34:15,590
that actually the team has a full team

00:34:13,159 --> 00:34:18,980
ownership over the ultimate attacks test

00:34:15,590 --> 00:34:21,590
packs so everyone is creating automated

00:34:18,980 --> 00:34:24,530
checks everyone is comfortable everyone

00:34:21,590 --> 00:34:27,560
we factors the code and who's best I

00:34:24,530 --> 00:34:30,860
guess to refactor to give you feedback

00:34:27,560 --> 00:34:33,470
over the code rather than basically an

00:34:30,860 --> 00:34:36,169
engineer so it's definitely we've seen

00:34:33,470 --> 00:34:37,850
after we went from basically from that

00:34:36,169 --> 00:34:40,250
learning curve and everyone got

00:34:37,850 --> 00:34:42,260
comfortable with everything we've seen a

00:34:40,250 --> 00:34:46,070
lot more ownership over over the

00:34:42,260 --> 00:34:48,290
automated test packs I already mention

00:34:46,070 --> 00:34:50,330
this but we started conversations with

00:34:48,290 --> 00:34:53,659
testability in mind and I think this is

00:34:50,330 --> 00:34:55,730
really really important thing because if

00:34:53,659 --> 00:34:57,560
you start that conversation so in test

00:34:55,730 --> 00:35:00,290
kickoffs for example if you start

00:34:57,560 --> 00:35:02,450
conversation okay how Holloman can test

00:35:00,290 --> 00:35:05,840
it what do I need to test this you

00:35:02,450 --> 00:35:08,120
automatically think about testability so

00:35:05,840 --> 00:35:10,790
you automatically think how do I design

00:35:08,120 --> 00:35:13,940
this system so I can test it a lot

00:35:10,790 --> 00:35:16,400
easier basically we did have the

00:35:13,940 --> 00:35:18,200
testability in mind before as well and

00:35:16,400 --> 00:35:23,150
our teams were really good at this

00:35:18,200 --> 00:35:25,070
basically to to ease the testability but

00:35:23,150 --> 00:35:27,470
we we've definitely seen an improvement

00:35:25,070 --> 00:35:29,180
on this side as well because you start

00:35:27,470 --> 00:35:32,810
the conversation with testability in

00:35:29,180 --> 00:35:34,520
mind so it's really really good I guess

00:35:32,810 --> 00:35:36,590
from from this perspective as well and

00:35:34,520 --> 00:35:38,710
we've seen that actually hour or 20

00:35:36,590 --> 00:35:42,380
checks are smarter as well because

00:35:38,710 --> 00:35:44,780
because of the way we design our systems

00:35:42,380 --> 00:35:50,300
to to be testable and to be independent

00:35:44,780 --> 00:35:52,490
and to be small and of course we always

00:35:50,300 --> 00:35:54,350
look at improving our our overall

00:35:52,490 --> 00:35:57,530
processes so as I mentioned we take

00:35:54,350 --> 00:35:59,900
retrospectives very seriously and we

00:35:57,530 --> 00:36:03,110
still experiment a lot we're not even

00:35:59,900 --> 00:36:06,470
close to perfect now but I think we are

00:36:03,110 --> 00:36:09,110
comfortable now that the team's really

00:36:06,470 --> 00:36:11,530
takes that ownership over quality

00:36:09,110 --> 00:36:14,450
the team's takes full responsibility

00:36:11,530 --> 00:36:17,660
basically full ownership over testing

00:36:14,450 --> 00:36:19,820
practices and the quality engineers are

00:36:17,660 --> 00:36:22,100
actually there to offer support

00:36:19,820 --> 00:36:24,350
basically on demand rather than being

00:36:22,100 --> 00:36:26,630
there by default as a quality gatekeeper

00:36:24,350 --> 00:36:30,890
to say yeah this one passes this one

00:36:26,630 --> 00:36:34,040
doesn't so this is where we are today

00:36:30,890 --> 00:36:37,790
and actually the data backed us up so

00:36:34,040 --> 00:36:40,370
looking so this metric actually is our

00:36:37,790 --> 00:36:42,830
ticket rejection rate per quarter

00:36:40,370 --> 00:36:46,400
so if initially here we were looking at

00:36:42,830 --> 00:36:48,290
the test phase being around 63% what

00:36:46,400 --> 00:36:51,950
we've seen is by the end of the year

00:36:48,290 --> 00:36:57,260
actually our testing phase was a lower

00:36:51,950 --> 00:36:58,970
down to 19% so just by doing so just to

00:36:57,260 --> 00:37:02,780
make a point we started this process

00:36:58,970 --> 00:37:04,730
alone in in September so actually in the

00:37:02,780 --> 00:37:07,550
train September and December at 3 months

00:37:04,730 --> 00:37:09,830
time we've already seen an improvement

00:37:07,550 --> 00:37:11,390
throughout the whole ticket rejection

00:37:09,830 --> 00:37:14,450
rate basically so we've seen

00:37:11,390 --> 00:37:16,670
when that we felt as a team that

00:37:14,450 --> 00:37:17,720
actually that shared understanding was

00:37:16,670 --> 00:37:20,900
created upfront

00:37:17,720 --> 00:37:23,089
the teams were comfortable we didn't had

00:37:20,900 --> 00:37:25,579
a lot of back-and-forth for the tickets

00:37:23,089 --> 00:37:29,599
and the team was a lot more comfortable

00:37:25,579 --> 00:37:32,420
as a whole this one is the exactly same

00:37:29,599 --> 00:37:34,789
metric but it's promote so if you see

00:37:32,420 --> 00:37:36,380
here we had states were actually they

00:37:34,789 --> 00:37:38,809
were going to even a hundred percent

00:37:36,380 --> 00:37:44,510
based basically we had some difficult

00:37:38,809 --> 00:37:46,549
months but then in December and actually

00:37:44,510 --> 00:37:48,260
this year as well we started seeing that

00:37:46,549 --> 00:37:50,599
actually all the delivering metrics

00:37:48,260 --> 00:37:54,440
basically taken rejection rates were

00:37:50,599 --> 00:37:57,650
dropping off in less than 20% so that

00:37:54,440 --> 00:38:00,019
meant that basically we decrease with

00:37:57,650 --> 00:38:02,450
40% the the back-and-forth that we had

00:38:00,019 --> 00:38:04,519
on the tickets and it's not only testing

00:38:02,450 --> 00:38:06,950
phase as I mentioned we it was

00:38:04,519 --> 00:38:08,990
foundation maybe or code review or

00:38:06,950 --> 00:38:12,260
basically were looking at all the

00:38:08,990 --> 00:38:16,789
transitions that a ticket could could

00:38:12,260 --> 00:38:20,480
have what we've seen as well was that

00:38:16,789 --> 00:38:21,890
actually we started releasing so you

00:38:20,480 --> 00:38:24,670
know at the beginning I mentioned that

00:38:21,890 --> 00:38:27,170
we were releasing every now and then

00:38:24,670 --> 00:38:28,910
actually we were bulking releases

00:38:27,170 --> 00:38:30,619
basically so we're having kind of a

00:38:28,910 --> 00:38:32,869
release training trying to do both

00:38:30,619 --> 00:38:36,740
creases together and pushing them one by

00:38:32,869 --> 00:38:38,329
one and it had its own process the team

00:38:36,740 --> 00:38:40,039
is now comfortable making multiple

00:38:38,329 --> 00:38:42,440
releases a day there are small changes

00:38:40,039 --> 00:38:45,109
they understand the impact a lot better

00:38:42,440 --> 00:38:46,430
and then some actually small change it's

00:38:45,109 --> 00:38:49,609
not going to have an impact on the end

00:38:46,430 --> 00:38:53,289
user so we don't necessarily have that a

00:38:49,609 --> 00:38:55,579
release magnet reward will release only

00:38:53,289 --> 00:38:57,140
something that's gonna be impacting the

00:38:55,579 --> 00:39:00,259
user actually working believes we're

00:38:57,140 --> 00:39:01,819
gonna deploy everything depending on the

00:39:00,259 --> 00:39:03,289
impact basically we're gonna says that

00:39:01,819 --> 00:39:05,750
and we're gonna get comfortable with it

00:39:03,289 --> 00:39:09,500
so we do multiple releases a day and

00:39:05,750 --> 00:39:11,990
that's absolutely amazing as well and

00:39:09,500 --> 00:39:14,539
because we started releasing we actually

00:39:11,990 --> 00:39:17,359
moved our salt cycle time metric to to

00:39:14,539 --> 00:39:20,089
look from in progress so when we start

00:39:17,359 --> 00:39:24,710
picking up the work until it's done

00:39:20,089 --> 00:39:25,339
until is in life so here currently so I

00:39:24,710 --> 00:39:30,380
think this

00:39:25,339 --> 00:39:34,519
is from September till today our average

00:39:30,380 --> 00:39:37,059
it's still six days so definitely we're

00:39:34,519 --> 00:39:40,749
not you know a continuous deployment or

00:39:37,059 --> 00:39:43,609
release of the thing in the day but

00:39:40,749 --> 00:39:47,450
we've definitely seen an improvement in

00:39:43,609 --> 00:39:49,670
in our times and you know what process

00:39:47,450 --> 00:39:52,670
is and of course we're still gonna learn

00:39:49,670 --> 00:39:54,619
from it and we're gonna try and improve

00:39:52,670 --> 00:39:56,960
it but it that's half a time basically

00:39:54,619 --> 00:40:00,849
that we had before last year and that's

00:39:56,960 --> 00:40:03,289
definitely my secure point for us so

00:40:00,849 --> 00:40:04,849
based on that information the last part

00:40:03,289 --> 00:40:07,609
that I'm gonna walk you through is what

00:40:04,849 --> 00:40:09,739
do our QA is do now if if the developer

00:40:07,609 --> 00:40:12,849
is doing testing and they're owning the

00:40:09,739 --> 00:40:15,440
whole thing what do they do now and what

00:40:12,849 --> 00:40:19,489
we understood in the team is that

00:40:15,440 --> 00:40:22,309
actually we don't basically our our

00:40:19,489 --> 00:40:25,430
quality assurance team is not correctly

00:40:22,309 --> 00:40:27,529
named but actually we started looking at

00:40:25,430 --> 00:40:31,700
quality engineering and what that

00:40:27,529 --> 00:40:33,380
involves and what it meant is actually

00:40:31,700 --> 00:40:35,569
in time so during during these

00:40:33,380 --> 00:40:38,630
experiments we've seen that we evolved

00:40:35,569 --> 00:40:40,969
into new roles and what we were doing we

00:40:38,630 --> 00:40:43,130
were actually enabling the teams to

00:40:40,969 --> 00:40:46,309
establish and ensure the quality of the

00:40:43,130 --> 00:40:48,710
platform developed we were providing the

00:40:46,309 --> 00:40:51,859
knowledge the support and the tooling

00:40:48,710 --> 00:40:54,650
basically required to achieve the levels

00:40:51,859 --> 00:40:56,989
of quality that we wanted we were

00:40:54,650 --> 00:40:58,579
supporting with the work with the

00:40:56,989 --> 00:41:01,299
testing work within an agile team

00:40:58,579 --> 00:41:04,099
environment so definitely we were still

00:41:01,299 --> 00:41:07,519
we're still offering our t-shaped

00:41:04,099 --> 00:41:09,499
basically expertise from a testing

00:41:07,519 --> 00:41:12,890
perspective we don't we're still there

00:41:09,499 --> 00:41:14,450
were still part of the team and we do a

00:41:12,890 --> 00:41:16,729
lot of research because we want to

00:41:14,450 --> 00:41:19,849
improve we want to drive the adoption of

00:41:16,729 --> 00:41:23,329
best practices so a lot of our time is

00:41:19,849 --> 00:41:26,839
actually on the research and how we can

00:41:23,329 --> 00:41:28,789
improve our processes so actually we're

00:41:26,839 --> 00:41:31,749
not doing testing anymore we're looking

00:41:28,789 --> 00:41:34,339
into changing our ways of working

00:41:31,749 --> 00:41:36,380
facilitating product development looking

00:41:34,339 --> 00:41:38,940
at the KPIs and reporting metrics

00:41:36,380 --> 00:41:42,800
because we want to see how we

00:41:38,940 --> 00:41:45,569
of looking at overall test strategies

00:41:42,800 --> 00:41:48,000
exploit your testing behavior driven

00:41:45,569 --> 00:41:50,400
development how we can improve that in

00:41:48,000 --> 00:41:52,560
the team basically so we still have one

00:41:50,400 --> 00:41:56,520
quality engineer part of each team

00:41:52,560 --> 00:41:58,200
they're gonna be as an expert in testing

00:41:56,520 --> 00:42:00,480
basically to provide guidance and

00:41:58,200 --> 00:42:02,550
support they're not gonna be the

00:42:00,480 --> 00:42:04,770
gatekeeper anymore and of course we're

00:42:02,550 --> 00:42:06,619
also going to look a lot in in to how we

00:42:04,770 --> 00:42:09,589
can improve automation in testing

00:42:06,619 --> 00:42:12,150
continuous integration we're gonna offer

00:42:09,589 --> 00:42:16,170
technical leadership basically on best

00:42:12,150 --> 00:42:19,109
practices well there are loads of things

00:42:16,170 --> 00:42:22,710
that you can do behind the scenes but we

00:42:19,109 --> 00:42:25,440
were looking at was how we can improve

00:42:22,710 --> 00:42:29,579
the overall processes basically how we

00:42:25,440 --> 00:42:31,530
can what do we need to do how we can

00:42:29,579 --> 00:42:33,750
change our process is basically to try

00:42:31,530 --> 00:42:36,510
to be driven in in the whole software

00:42:33,750 --> 00:42:38,280
development lifecycle as I mentioned

00:42:36,510 --> 00:42:40,260
we're looking into sustainable

00:42:38,280 --> 00:42:41,730
automation frameworks and methodology

00:42:40,260 --> 00:42:44,280
because that's a really important part

00:42:41,730 --> 00:42:47,010
as well we're looking at scalability of

00:42:44,280 --> 00:42:49,940
the test infrastructure see ICD devops

00:42:47,010 --> 00:42:54,510
integration test environments and then

00:42:49,940 --> 00:42:56,490
being there for the teams I can go into

00:42:54,510 --> 00:42:58,710
this into a whole new discussion and

00:42:56,490 --> 00:43:00,599
actually the the session that if you

00:42:58,710 --> 00:43:02,430
join last week basically it was going

00:43:00,599 --> 00:43:04,890
into a lot of details into this part

00:43:02,430 --> 00:43:06,270
basically how you can how you can

00:43:04,890 --> 00:43:12,210
improve what type of practices you can

00:43:06,270 --> 00:43:13,800
use to to improve your processes but

00:43:12,210 --> 00:43:15,599
yeah basically this is what we do now

00:43:13,800 --> 00:43:18,359
we're trying to look over the bigger

00:43:15,599 --> 00:43:20,310
picture we're trying to understand the

00:43:18,359 --> 00:43:22,380
bigger picture and how we can actually

00:43:20,310 --> 00:43:24,359
support the team so we get a lot of

00:43:22,380 --> 00:43:27,900
feedback from the teams we create

00:43:24,359 --> 00:43:29,579
dashboards alerting mechanisms running

00:43:27,900 --> 00:43:31,859
tests on demand everything basically

00:43:29,579 --> 00:43:34,980
that they need to support them to be

00:43:31,859 --> 00:43:39,900
more efficient and you might think

00:43:34,980 --> 00:43:41,730
yourselves just a name matter and myself

00:43:39,900 --> 00:43:45,710
I've been I've been in the same position

00:43:41,730 --> 00:43:49,800
for a very long time but we were called

00:43:45,710 --> 00:43:52,890
Quality Assurance engineers and as a

00:43:49,800 --> 00:43:54,540
whole basically as we've seen it's

00:43:52,890 --> 00:43:57,300
everything it's a lot more than just

00:43:54,540 --> 00:44:00,120
testing so definitely it's not a testing

00:43:57,300 --> 00:44:03,750
grow anymore we are evolving into more

00:44:00,120 --> 00:44:05,400
quality engineering and to end building

00:44:03,750 --> 00:44:07,620
basically software delivery processes

00:44:05,400 --> 00:44:10,710
and how we can improve basic quality

00:44:07,620 --> 00:44:13,170
from from the whole process itself we

00:44:10,710 --> 00:44:15,750
also have this false conception that QA

00:44:13,170 --> 00:44:17,760
is our quality gatekeepers and we wanted

00:44:15,750 --> 00:44:21,980
to make sure we take the assurance from

00:44:17,760 --> 00:44:24,270
our name because it was wrongfully used

00:44:21,980 --> 00:44:26,160
because we wanted your knowledge

00:44:24,270 --> 00:44:28,470
actually everyone's responsibility for

00:44:26,160 --> 00:44:30,120
Quality Assurance so if everyone is

00:44:28,470 --> 00:44:30,510
responsible why should I have these

00:44:30,120 --> 00:44:32,280
names

00:44:30,510 --> 00:44:35,340
I feel like an imposter here because

00:44:32,280 --> 00:44:37,520
actually I don't do what I'm supposed to

00:44:35,340 --> 00:44:39,930
do based on lining based on my

00:44:37,520 --> 00:44:42,750
responsibilities and of course in the

00:44:39,930 --> 00:44:44,910
end we wanted to acknowledge our quality

00:44:42,750 --> 00:44:48,060
engineers new responsibilities so they

00:44:44,910 --> 00:44:49,830
were doing so much and it's only fair to

00:44:48,060 --> 00:44:51,780
acknowledge basically there are new

00:44:49,830 --> 00:44:54,240
responsibilities and their involvement

00:44:51,780 --> 00:44:57,150
in the team because at the end of the

00:44:54,240 --> 00:45:00,930
day we take pride in our jobs

00:44:57,150 --> 00:45:02,790
and we want our teams to be comfortable

00:45:00,930 --> 00:45:06,150
with everything they're doing and to be

00:45:02,790 --> 00:45:08,760
proud proud of what they do so for us

00:45:06,150 --> 00:45:10,680
the name mattered and we decided in the

00:45:08,760 --> 00:45:13,230
end actually our chapter is going to be

00:45:10,680 --> 00:45:16,890
called quality engineering no assurance

00:45:13,230 --> 00:45:20,120
no assistance no analyst no tests that

00:45:16,890 --> 00:45:22,440
was only our decision in the end and

00:45:20,120 --> 00:45:24,540
coming back to the to the initial

00:45:22,440 --> 00:45:27,330
questions I guess and to the initial

00:45:24,540 --> 00:45:29,460
thoughts our mantra was continuous

00:45:27,330 --> 00:45:31,260
delivery because we thought that by

00:45:29,460 --> 00:45:33,480
having by thinking all the time how we

00:45:31,260 --> 00:45:34,980
can get into a continuous delivery that

00:45:33,480 --> 00:45:37,200
means we're gonna get you into a

00:45:34,980 --> 00:45:39,870
continuous quality because you need to

00:45:37,200 --> 00:45:42,930
think about the quality all the time so

00:45:39,870 --> 00:45:46,350
to finish off I guess back to the

00:45:42,930 --> 00:45:48,660
initial questions that we had do we

00:45:46,350 --> 00:45:51,060
assure quality yes we do who's still

00:45:48,660 --> 00:45:52,980
Jewish real quality who is responsible

00:45:51,060 --> 00:45:54,960
for quality all of us we need to

00:45:52,980 --> 00:45:57,330
acknowledge that actually to share team

00:45:54,960 --> 00:45:59,580
responsibility and it's not only one

00:45:57,330 --> 00:46:01,200
department that's responsible to assure

00:45:59,580 --> 00:46:03,260
quality

00:46:01,200 --> 00:46:05,579
and how is that quality assured

00:46:03,260 --> 00:46:07,529
throughout your whole engineering

00:46:05,579 --> 00:46:09,750
process so take a look take a background

00:46:07,529 --> 00:46:11,970
look or take a step back and look at the

00:46:09,750 --> 00:46:14,099
whole process as a whole with your team

00:46:11,970 --> 00:46:17,789
and see what learning you can do from

00:46:14,099 --> 00:46:22,410
from it and that was me thank you very

00:46:17,789 --> 00:46:23,910
much okay so my property thank you

00:46:22,410 --> 00:46:26,760
visualize an awesome talk as always I

00:46:23,910 --> 00:46:28,740
got a lot of questions so we'll try and

00:46:26,760 --> 00:46:30,569
get through as many as possible okay

00:46:28,740 --> 00:46:33,650
each strike off I'm going to do straight

00:46:30,569 --> 00:46:36,990
from the check because we've got our

00:46:33,650 --> 00:46:38,549
first question comes from the eye in

00:46:36,990 --> 00:46:41,549
addition to you Asian engineers do you

00:46:38,549 --> 00:46:43,529
also have bas embedded within each team

00:46:41,549 --> 00:46:45,990
or product owner working very closely

00:46:43,529 --> 00:46:50,309
with the team helping with the

00:46:45,990 --> 00:46:53,250
definition of clear AC upfront yes

00:46:50,309 --> 00:46:55,799
so we don't have the ACE but we do have

00:46:53,250 --> 00:46:57,900
our product owners so what happens in

00:46:55,799 --> 00:47:02,160
our environment is being in financial

00:46:57,900 --> 00:47:06,269
services MBAs are really experts in the

00:47:02,160 --> 00:47:07,769
financial advice area and we still have

00:47:06,269 --> 00:47:10,200
them in the business but they are not

00:47:07,769 --> 00:47:12,509
close to the team so we do have that gap

00:47:10,200 --> 00:47:14,430
basically we do have that bridge we have

00:47:12,509 --> 00:47:16,799
our product owner really close working

00:47:14,430 --> 00:47:18,720
with the team and then they I'm offering

00:47:16,799 --> 00:47:22,140
basically they are more of an enable one

00:47:18,720 --> 00:47:24,390
team so they are there to support if we

00:47:22,140 --> 00:47:26,910
need to but it's not embedded in the

00:47:24,390 --> 00:47:28,740
team and then the team's iam are

00:47:26,910 --> 00:47:32,069
cross-functional so we have developers

00:47:28,740 --> 00:47:35,759
platform engineers a product as well in

00:47:32,069 --> 00:47:38,309
in them thank you

00:47:35,759 --> 00:47:40,759
Paul says Paul says given that you're in

00:47:38,309 --> 00:47:45,480
a regulated industry how do you manage

00:47:40,759 --> 00:47:50,250
evidencing of testing validation okay I

00:47:45,480 --> 00:47:52,740
can speak of all that for a day either I

00:47:50,250 --> 00:47:55,349
tried on this talk I guess you should be

00:47:52,740 --> 00:47:57,299
more high level because definitely it's

00:47:55,349 --> 00:47:59,220
quite difficult topic so especially

00:47:57,299 --> 00:48:00,750
being in a regulated environment we

00:47:59,220 --> 00:48:02,460
needed to make sure at any point and

00:48:00,750 --> 00:48:05,009
especially with the increase of the

00:48:02,460 --> 00:48:09,569
releases we needed to make sure we do

00:48:05,009 --> 00:48:12,119
have auditing for our test evidence so I

00:48:09,569 --> 00:48:15,030
have low we have loads of practices for

00:48:12,119 --> 00:48:18,319
example all our reporting is done

00:48:15,030 --> 00:48:22,140
HTML pages pushed into Amazon history

00:48:18,319 --> 00:48:24,329
and tracked down to a release basically

00:48:22,140 --> 00:48:27,329
unique ID basically so we can track that

00:48:24,329 --> 00:48:29,309
down so we can see with a unique release

00:48:27,329 --> 00:48:31,500
ID we can see all the changes that we

00:48:29,309 --> 00:48:32,970
made in the system versions test

00:48:31,500 --> 00:48:36,240
evidence and everything basically

00:48:32,970 --> 00:48:38,039
tracking back I can put more details

00:48:36,240 --> 00:48:40,200
into it because that's very very

00:48:38,039 --> 00:48:46,049
high-level I guess first I was the lean

00:48:40,200 --> 00:48:47,789
coffee mornings were Richard says how

00:48:46,049 --> 00:48:50,160
much time you spend on your kick off

00:48:47,789 --> 00:48:53,000
sessions how much coverage what kind of

00:48:50,160 --> 00:48:55,619
could do these sessions aim to achieve

00:48:53,000 --> 00:48:57,299
so other beginning I think they were

00:48:55,619 --> 00:48:59,940
actually even now it depends on the

00:48:57,299 --> 00:49:04,400
complexity of the change but it never

00:48:59,940 --> 00:49:08,160
takes more than 30 minutes so usually

00:49:04,400 --> 00:49:10,109
you're looking at how you're gonna

00:49:08,160 --> 00:49:12,660
basically the details are trying to

00:49:10,109 --> 00:49:14,849
understand the risks of the change how

00:49:12,660 --> 00:49:16,740
you're gonna prove that so the testing

00:49:14,849 --> 00:49:20,369
side what type of testing we're going to

00:49:16,740 --> 00:49:22,380
do being in a much services environment

00:49:20,369 --> 00:49:25,099
we do have quite a few chess packs so we

00:49:22,380 --> 00:49:27,750
don't have only one crushing test box so

00:49:25,099 --> 00:49:30,210
one activity is to actually understand

00:49:27,750 --> 00:49:32,670
the impact over that and what type of

00:49:30,210 --> 00:49:34,440
testing what type of automated checks we

00:49:32,670 --> 00:49:37,920
need to add if we need to change

00:49:34,440 --> 00:49:39,569
existing ones if you need to I don't

00:49:37,920 --> 00:49:42,450
know maintain delete some of them

00:49:39,569 --> 00:49:44,819
basically but that's why we have

00:49:42,450 --> 00:49:47,220
discussion between quality engineers and

00:49:44,819 --> 00:49:51,690
developers so they can get comfortable

00:49:47,220 --> 00:49:53,609
in time within the whole I guess the

00:49:51,690 --> 00:49:55,710
whole suite of alternative checks that

00:49:53,609 --> 00:49:58,470
we have because the an important part of

00:49:55,710 --> 00:50:01,319
that that discussion hope each answered

00:49:58,470 --> 00:50:03,990
questions listen I got a question here

00:50:01,319 --> 00:50:06,270
from Christian how do you overcome dad

00:50:03,990 --> 00:50:08,549
not wanting to demo we have this step of

00:50:06,270 --> 00:50:14,750
dev see as a lack of trust in their work

00:50:08,549 --> 00:50:17,339
and of the QE we we just raise it so

00:50:14,750 --> 00:50:21,839
yeah we're really good at calling all

00:50:17,339 --> 00:50:25,109
things in retrospectives if they don't

00:50:21,839 --> 00:50:26,760
demo basically they're gonna try to ship

00:50:25,109 --> 00:50:28,960
it and definitely someone is gonna so

00:50:26,760 --> 00:50:30,849
we've we've had situations where

00:50:28,960 --> 00:50:33,300
we were ready to ship it and then we

00:50:30,849 --> 00:50:35,920
discovered last minute li something I

00:50:33,300 --> 00:50:39,700
don't know something wasn't intended or

00:50:35,920 --> 00:50:42,190
actually the PIO had a change of mind so

00:50:39,700 --> 00:50:44,650
he he was asking about more questions so

00:50:42,190 --> 00:50:46,990
definitely it's gonna happen it's more

00:50:44,650 --> 00:50:48,730
it should only take five minutes so it's

00:50:46,990 --> 00:50:50,859
not especially at the beginning until

00:50:48,730 --> 00:50:53,380
they're comfortable you shouldn't force

00:50:50,859 --> 00:50:55,839
it part of the process I guess but in

00:50:53,380 --> 00:50:58,660
time for us at least it started

00:50:55,839 --> 00:51:05,890
dissolving out because we don't feel the

00:50:58,660 --> 00:51:07,450
need as much anymore very high levels V

00:51:05,890 --> 00:51:10,030
Ganesha says hi

00:51:07,450 --> 00:51:12,190
what's the developer to QA ratio in this

00:51:10,030 --> 00:51:14,880
setup what would be the QBs tasks

00:51:12,190 --> 00:51:18,040
involvement between kickoff and the demo

00:51:14,880 --> 00:51:21,520
so as I mentioned currently our ratio is

00:51:18,040 --> 00:51:23,829
one QE to three developers still but

00:51:21,520 --> 00:51:26,410
because we're considering we're taking

00:51:23,829 --> 00:51:29,890
example of occasion during where they

00:51:26,410 --> 00:51:32,020
have 70 developers to five quality

00:51:29,890 --> 00:51:34,329
engineers definitely we ask a question

00:51:32,020 --> 00:51:37,000
of where why do we have the same amount

00:51:34,329 --> 00:51:39,369
of engineers college engineers so this

00:51:37,000 --> 00:51:41,470
is the current setup I think with the

00:51:39,369 --> 00:51:43,329
scaling of the number of engineers who

00:51:41,470 --> 00:51:45,609
were gonna try to leave the number of

00:51:43,329 --> 00:51:48,760
quality engineers the same to see if

00:51:45,609 --> 00:51:50,290
actually the model is working and the

00:51:48,760 --> 00:51:51,730
involvement as I mentioned at the

00:51:50,290 --> 00:51:53,890
beginning definitely there's a lot of

00:51:51,730 --> 00:51:56,020
involvement a lot of pairing with the

00:51:53,890 --> 00:51:57,940
developers in test kickoffs and demo and

00:51:56,020 --> 00:51:59,710
actually testing itself because we're

00:51:57,940 --> 00:52:04,299
doing pairing sessions during test

00:51:59,710 --> 00:52:06,460
phases all but in time the the time

00:52:04,299 --> 00:52:09,220
requested for a quality engineer to be

00:52:06,460 --> 00:52:13,089
in these sessions actually decreased so

00:52:09,220 --> 00:52:15,250
it's more about on-demand so if if an

00:52:13,089 --> 00:52:17,200
engineer needs us basically they're

00:52:15,250 --> 00:52:19,180
gonna request some time I don't know a

00:52:17,200 --> 00:52:21,490
tiny cold five minutes asking some

00:52:19,180 --> 00:52:24,220
questions getting on the same page but

00:52:21,490 --> 00:52:26,290
definitely in the test kickoff we do

00:52:24,220 --> 00:52:30,000
have a quality engineer in it all the

00:52:26,290 --> 00:52:33,000
time so we can get that second second

00:52:30,000 --> 00:52:35,740
thoughts to compare thoughts I guess

00:52:33,000 --> 00:52:38,020
some so we got a situation are great my

00:52:35,740 --> 00:52:40,299
centerline both John and Richard asked

00:52:38,020 --> 00:52:42,460
the same question at the same time how

00:52:40,299 --> 00:52:48,490
did you get buying do develop

00:52:42,460 --> 00:52:51,070
in doing this ah I think yeah that's

00:52:48,490 --> 00:52:55,630
that's a really good question

00:52:51,070 --> 00:52:58,060
I think trying to present the data it's

00:52:55,630 --> 00:52:59,440
really good so definitely we invested a

00:52:58,060 --> 00:53:01,330
lot of time with triangles and

00:52:59,440 --> 00:53:06,220
organization I guess to be more data

00:53:01,330 --> 00:53:08,109
driven and metrics driven so we took a

00:53:06,220 --> 00:53:10,540
bit of effort to implement data to prove

00:53:08,109 --> 00:53:12,070
that because we've had just we've had

00:53:10,540 --> 00:53:13,960
these conversations with conversations

00:53:12,070 --> 00:53:16,240
for a long time before and actually we

00:53:13,960 --> 00:53:18,550
didn't get that buy-in but when we

00:53:16,240 --> 00:53:20,920
presented the data and when we presented

00:53:18,550 --> 00:53:23,890
actual numbers to say actually look from

00:53:20,920 --> 00:53:26,560
you're wasting half of your time fixing

00:53:23,890 --> 00:53:29,980
things instead of actually doing doing

00:53:26,560 --> 00:53:32,650
some more interesting stuff and in time

00:53:29,980 --> 00:53:34,480
I guess just just reminding the team all

00:53:32,650 --> 00:53:36,460
the time so it's not a one-off activity

00:53:34,480 --> 00:53:39,609
you need to remind the team all the time

00:53:36,460 --> 00:53:42,700
about why you're doing it and what

00:53:39,609 --> 00:53:44,680
you're trying to achieve so it can get

00:53:42,700 --> 00:53:47,470
you can get that buy-in from from the

00:53:44,680 --> 00:53:52,990
team as well so it's an ongoing practice

00:53:47,470 --> 00:53:55,390
I guess it says did you measure the

00:53:52,990 --> 00:53:57,640
percentage gain after your changes were

00:53:55,390 --> 00:54:00,400
implemented yes so after what time

00:53:57,640 --> 00:54:05,920
period and how much did the 63% improve

00:54:00,400 --> 00:54:08,800
by I think I had one of the slides yes

00:54:05,920 --> 00:54:12,369
well we yeah we dropped 40% basically we

00:54:08,800 --> 00:54:14,890
dropped to 19% and that was at the

00:54:12,369 --> 00:54:19,109
beginning of 2020 currency we are around

00:54:14,890 --> 00:54:21,760
15% as well so we keep dropping it

00:54:19,109 --> 00:54:24,280
richard says could you finally share

00:54:21,760 --> 00:54:25,690
your top three most used dashboards how

00:54:24,280 --> 00:54:29,349
do you maintain this for new staff

00:54:25,690 --> 00:54:34,210
members our dream team so three top

00:54:29,349 --> 00:54:36,580
dashboards yeah dashboards okay so the

00:54:34,210 --> 00:54:39,040
most important one that we have is our

00:54:36,580 --> 00:54:43,210
Jean Jenkins app dashboard where we have

00:54:39,040 --> 00:54:46,650
all our automated test jobs being so we

00:54:43,210 --> 00:54:49,180
do have some multi configuration

00:54:46,650 --> 00:54:50,800
products so we have loads of tests

00:54:49,180 --> 00:54:54,190
running in multiple configurations

00:54:50,800 --> 00:54:55,910
environments so on and so forth so it's

00:54:54,190 --> 00:54:57,349
good to keep that dashboard

00:54:55,910 --> 00:54:59,240
basically where you see at a glance

00:54:57,349 --> 00:55:02,660
everything that's green everything is

00:54:59,240 --> 00:55:03,319
red or something happened that's the

00:55:02,660 --> 00:55:05,630
first one

00:55:03,319 --> 00:55:09,799
the second one we do have so we use JIRA

00:55:05,630 --> 00:55:11,930
our tracking tool issue tracking tool

00:55:09,799 --> 00:55:15,349
and we do have a dashboard there where

00:55:11,930 --> 00:55:18,799
we look at number of bugs in production

00:55:15,349 --> 00:55:21,049
because we want to see basically if we

00:55:18,799 --> 00:55:23,030
keep doing this practice to be miss

00:55:21,049 --> 00:55:25,069
things and if we do how we can learn

00:55:23,030 --> 00:55:29,390
actually to to bring them again at the

00:55:25,069 --> 00:55:31,339
beginning of the process number of

00:55:29,390 --> 00:55:34,490
releases as I mentioned we want to see

00:55:31,339 --> 00:55:37,910
an improvement of cycle time it's really

00:55:34,490 --> 00:55:39,530
important how often you release and the

00:55:37,910 --> 00:55:42,170
number of releases so these who are

00:55:39,530 --> 00:55:45,589
definitely good good metrics to start

00:55:42,170 --> 00:55:47,359
with and I think that's pretty much I

00:55:45,589 --> 00:55:50,240
don't know if I missed anything but

00:55:47,359 --> 00:55:52,280
that's pretty much old for now the other

00:55:50,240 --> 00:55:55,309
important metric that we didn't manage

00:55:52,280 --> 00:55:57,380
to get around to yet is the automation

00:55:55,309 --> 00:56:00,109
coverage so this is something that in

00:55:57,380 --> 00:56:01,789
we're trying to look into to see how

00:56:00,109 --> 00:56:03,470
actually we can track we can get some

00:56:01,789 --> 00:56:05,420
numbers so we can actually present the

00:56:03,470 --> 00:56:09,319
data because conni you don't have a way

00:56:05,420 --> 00:56:10,279
to present it so when it's last question

00:56:09,319 --> 00:56:12,859
oh sorry

00:56:10,279 --> 00:56:15,799
this comes from Cena how do you measure

00:56:12,859 --> 00:56:17,539
success of QE teams if you're not game

00:56:15,799 --> 00:56:20,710
keeps a release and quality of shared

00:56:17,539 --> 00:56:22,700
responsibility and devs houses Thanks

00:56:20,710 --> 00:56:25,579
that's a really good question and

00:56:22,700 --> 00:56:28,690
actually yeah well we're discussing it

00:56:25,579 --> 00:56:32,630
in our engineering teams as well because

00:56:28,690 --> 00:56:35,960
it's it's quite a strange role so our we

00:56:32,630 --> 00:56:39,559
don't want to track tickets because our

00:56:35,960 --> 00:56:41,630
main role is to be support in the

00:56:39,559 --> 00:56:43,430
delivery team so definitely quite a bit

00:56:41,630 --> 00:56:47,390
of time it's gonna be supporting the

00:56:43,430 --> 00:56:48,200
team but as I mentioned I think with the

00:56:47,390 --> 00:56:51,140
other bids

00:56:48,200 --> 00:56:53,750
I think we identified a couple of

00:56:51,140 --> 00:56:56,960
metrics that are our success criteria

00:56:53,750 --> 00:57:00,230
basically success metrics so the cycle

00:56:56,960 --> 00:57:02,150
time I think if if the cycle time

00:57:00,230 --> 00:57:03,950
increases definitely it's a problem in

00:57:02,150 --> 00:57:05,720
the quality overall and that means it's

00:57:03,950 --> 00:57:07,490
problem in the pairing with the with the

00:57:05,720 --> 00:57:09,049
quality engineers as well and we still

00:57:07,490 --> 00:57:09,530
believe it's valid it's valid for the

00:57:09,049 --> 00:57:12,530
whole

00:57:09,530 --> 00:57:15,620
every team and the quality engineers as

00:57:12,530 --> 00:57:18,080
well we're looking at tickets rejection

00:57:15,620 --> 00:57:19,790
rate so that's definitely our metric for

00:57:18,080 --> 00:57:22,460
our quality engineers to see basically

00:57:19,790 --> 00:57:23,990
back and forth and if we need to support

00:57:22,460 --> 00:57:27,470
the team's more so we're still looking

00:57:23,990 --> 00:57:28,340
at that cycle time which I mentioned

00:57:27,470 --> 00:57:31,490
that I think I mentioned that already

00:57:28,340 --> 00:57:33,530
sorry number of releases number of

00:57:31,490 --> 00:57:35,810
issues in production basically again to

00:57:33,530 --> 00:57:38,990
see how efficient we are and the only

00:57:35,810 --> 00:57:41,960
success rate only available for the

00:57:38,990 --> 00:57:44,090
queueing team as I mentioned is the

00:57:41,960 --> 00:57:46,100
automation coverage that's the only one

00:57:44,090 --> 00:57:49,250
that we think it's valuable for us

00:57:46,100 --> 00:57:51,650
because if we have enough coverage

00:57:49,250 --> 00:57:54,380
it means we offer enough support for the

00:57:51,650 --> 00:57:56,660
teams to do their own work and we are

00:57:54,380 --> 00:57:59,480
there to support to offer the tooling

00:57:56,660 --> 00:58:01,400
the environments the co infrastructure

00:57:59,480 --> 00:58:03,110
and anything they would need to support

00:58:01,400 --> 00:58:05,240
that so this is something that we're

00:58:03,110 --> 00:58:08,540
currently looking into but we don't have

00:58:05,240 --> 00:58:10,490
a solution yet amazing thanks so much

00:58:08,540 --> 00:58:12,110
Jana so guys you talk about for one more

00:58:10,490 --> 00:58:13,910
minute so I do a quick wrap-up I mean I

00:58:12,110 --> 00:58:15,560
think that's a sign that we had a very

00:58:13,910 --> 00:58:17,150
very good thought-provoking talk there's

00:58:15,560 --> 00:58:19,580
a lot of really really good question

00:58:17,150 --> 00:58:20,390
though thank you so much thank you thank

00:58:19,580 --> 00:58:22,640
you for having me

00:58:20,390 --> 00:58:25,070
no definitely um so as you guys know and

00:58:22,640 --> 00:58:27,440
we've leaned coffee series that will be

00:58:25,070 --> 00:58:29,180
tomorrow morning at 8 a.m. you want us

00:58:27,440 --> 00:58:31,460
to be present for that is going to be

00:58:29,180 --> 00:58:33,020
based on your arms towards a it's his

00:58:31,460 --> 00:58:34,760
limited slots also if you're interested

00:58:33,020 --> 00:58:36,380
in that please sign up and drop me a

00:58:34,760 --> 00:58:39,170
message on LinkedIn connect so I can get

00:58:36,380 --> 00:58:41,240
the details to you know that next week

00:58:39,170 --> 00:58:44,270
I'm have to announce our next event

00:58:41,240 --> 00:58:46,520
which is going to be on it it's gonna be

00:58:44,270 --> 00:58:49,190
on a new open source tool conference

00:58:46,520 --> 00:58:50,420
called tritone basically taught is

00:58:49,190 --> 00:58:52,040
there's a lot of talking software

00:58:50,420 --> 00:58:54,410
industries they about browser automation

00:58:52,040 --> 00:58:56,750
tools like Cypress puppeteer webdriver

00:58:54,410 --> 00:58:58,520
test cafe and theft's project nobody

00:58:56,750 --> 00:59:00,680
seems to talk about it I can North

00:58:58,520 --> 00:59:02,180
Nation tool from Thor works the company

00:59:00,680 --> 00:59:04,220
the creator selenium webdriver and

00:59:02,180 --> 00:59:05,480
cucumber this talk he's going to take

00:59:04,220 --> 00:59:07,370
you through some of the key features off

00:59:05,480 --> 00:59:10,370
track on why he feels you should turn a

00:59:07,370 --> 00:59:12,260
simple yet powerful tool so that's next

00:59:10,370 --> 00:59:15,350
week's tour that began up on the meetup

00:59:12,260 --> 00:59:17,150
web page shortly we're also gonna we're

00:59:15,350 --> 00:59:18,440
also approaches you a bubble seeing put

00:59:17,150 --> 00:59:20,480
a questionnaire together which will

00:59:18,440 --> 00:59:22,130
release them to all the members just get

00:59:20,480 --> 00:59:22,619
your feedback for suggestions air search

00:59:22,130 --> 00:59:24,329
groups

00:59:22,619 --> 00:59:26,099
yeah that's a really great feedback on

00:59:24,329 --> 00:59:28,380
these webinars we want to make sure we

00:59:26,099 --> 00:59:30,210
keep these moving forwards basically

00:59:28,380 --> 00:59:32,969
everyone's getting amazing stuff from

00:59:30,210 --> 00:59:35,460
that so guys thank you so much as always

00:59:32,969 --> 00:59:37,799
really really appreciated any questions

00:59:35,460 --> 00:59:42,259
just give me a shout by preferred Avenue

00:59:37,799 --> 00:59:42,259
but take care and see you all guys soon

00:59:47,690 --> 00:59:49,750

YouTube URL: https://www.youtube.com/watch?v=LVzC1HnMkds


