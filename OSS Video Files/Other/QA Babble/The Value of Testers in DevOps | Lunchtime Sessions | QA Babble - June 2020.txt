Title: The Value of Testers in DevOps | Lunchtime Sessions | QA Babble - June 2020
Publication date: 2020-07-22
Playlist: QA Babble
Description: 
	This Lunchtime Session is organised by Woodrow Mercer and presented on YouTube by Pusher

"The Value of Testers in DevOps", with Ali Hill

Overview:
All too often, software testers are labeled as a bottleneck in DevOps environments. In a world where we are aiming to release frequently, what value do software testers provide? What activities can they, and the team, carry out in order to ensure we are releasing high quality software?

There is a focus on automating as much as possible when working in a team practicing a DevOps culture. The same applies to testing. Alan Page (Director, Unity) once said “You should automate 100% of the tests that should be automated.” But what about the other, human-focused activities, that are required to build a quality product?

Testing the ideas or design of the functionality being developed in order to prevent bugs, coaching other team members on the types of tests that they should write in order to build quality into the product and performing exploratory testing to discover unknowns of the system under test. These are just some of the ways in which testers can add value to a team practicing DevOps.

In this talk I will draw upon my own experiences of working as a tester within DevOps teams and share the value-add activities that I have practiced and successes I have experienced. I would like to expand on the industry term "Continuous Testing" and demonstrate that it's not just about automated tests.

Testing is way more than automating requirement checks. Testers are critical in mitigating risks in the solution teams are developing.

https://twitter.com/ali_hill91
Captions: 
	00:00:00,080 --> 00:00:03,280
so good afternoon everyone and thanks

00:00:01,680 --> 00:00:05,279
for joining the talk today

00:00:03,280 --> 00:00:07,200
and thanks to anthony and the qa babble

00:00:05,279 --> 00:00:08,559
meetup organization team as well for

00:00:07,200 --> 00:00:10,480
organizing this

00:00:08,559 --> 00:00:11,759
i think the size and the variety of the

00:00:10,480 --> 00:00:12,480
topics at this meetup are really

00:00:11,759 --> 00:00:14,080
impressive

00:00:12,480 --> 00:00:15,519
so having a look through some of the

00:00:14,080 --> 00:00:18,320
recordings before this

00:00:15,519 --> 00:00:19,840
and it's a really great community that

00:00:18,320 --> 00:00:20,720
you've got here and i'm really happy to

00:00:19,840 --> 00:00:23,279
be presenting to

00:00:20,720 --> 00:00:24,720
everyone here today so today i'm going

00:00:23,279 --> 00:00:25,039
to be speaking about what i perceive to

00:00:24,720 --> 00:00:28,240
be

00:00:25,039 --> 00:00:30,720
the value of testers and devops and

00:00:28,240 --> 00:00:31,920
it's a very far-reaching and open topic

00:00:30,720 --> 00:00:35,680
but i'm going to be sharing

00:00:31,920 --> 00:00:37,520
my own experiences during this talk

00:00:35,680 --> 00:00:39,200
so to give this talk some context i want

00:00:37,520 --> 00:00:40,719
you to start off by sharing a little bit

00:00:39,200 --> 00:00:43,200
about myself

00:00:40,719 --> 00:00:44,960
my name is ali hill and i live up in

00:00:43,200 --> 00:00:46,719
edinburgh in scotland

00:00:44,960 --> 00:00:49,280
i started off in the tech industry as a

00:00:46,719 --> 00:00:51,120
video games tester in january 2014

00:00:49,280 --> 00:00:52,320
before moving into a more traditional

00:00:51,120 --> 00:00:54,960
agile testing role

00:00:52,320 --> 00:00:56,559
a couple of years later i then took a

00:00:54,960 --> 00:00:58,800
slight change of direction in my career

00:00:56,559 --> 00:01:02,079
by joining ecs as a delivery or

00:00:58,800 --> 00:01:03,440
devops consultant in 2018 and

00:01:02,079 --> 00:01:05,360
despite moving into more of a

00:01:03,440 --> 00:01:07,520
development or devops role i still

00:01:05,360 --> 00:01:10,799
maintain a huge interest in testing

00:01:07,520 --> 00:01:12,400
as as a discipline as a craft and i like

00:01:10,799 --> 00:01:13,439
to apply all the techniques i'm going to

00:01:12,400 --> 00:01:16,799
discuss today

00:01:13,439 --> 00:01:17,680
in my day-to-day work i'm also active in

00:01:16,799 --> 00:01:19,520
the online

00:01:17,680 --> 00:01:21,119
tech and testing community and you can

00:01:19,520 --> 00:01:23,280
find my twitter handle on

00:01:21,119 --> 00:01:24,880
most of these slides and feel free to

00:01:23,280 --> 00:01:25,439
message me if you've got any questions

00:01:24,880 --> 00:01:26,799
or

00:01:25,439 --> 00:01:28,880
points you want to make about the stuff

00:01:26,799 --> 00:01:30,400
that i'm sharing today i also want to

00:01:28,880 --> 00:01:32,799
give a shout out to a session that

00:01:30,400 --> 00:01:33,439
we've got running at ecs on friday at 12

00:01:32,799 --> 00:01:35,360
p.m

00:01:33,439 --> 00:01:36,880
we're doing a qa and devops ask me

00:01:35,360 --> 00:01:39,600
anything session

00:01:36,880 --> 00:01:40,000
on youtube so if you find the ecs

00:01:39,600 --> 00:01:41,360
youtube

00:01:40,000 --> 00:01:43,439
or if you find me on twitter you'll find

00:01:41,360 --> 00:01:44,640
more details about that event

00:01:43,439 --> 00:01:46,079
i'm going to be part of that panel

00:01:44,640 --> 00:01:49,360
answering any questions that you've got

00:01:46,079 --> 00:01:49,360
about qa and devops

00:01:49,920 --> 00:01:55,680
so what am i going to be sharing with

00:01:51,759 --> 00:01:57,600
everyone today first of all i want to

00:01:55,680 --> 00:01:59,040
say that testers play a key role when it

00:01:57,600 --> 00:02:01,200
comes to the early stages of the

00:01:59,040 --> 00:02:03,119
development process

00:02:01,200 --> 00:02:04,719
devops practices facilitate the

00:02:03,119 --> 00:02:07,360
acceleration of

00:02:04,719 --> 00:02:08,319
releases but in order to provide value

00:02:07,360 --> 00:02:10,399
we need to ensure

00:02:08,319 --> 00:02:12,080
that the team has a shared understanding

00:02:10,399 --> 00:02:13,920
of what it is we're developing

00:02:12,080 --> 00:02:15,280
and the value that this is providing to

00:02:13,920 --> 00:02:17,040
our customers

00:02:15,280 --> 00:02:18,959
testers can play a key role in this by

00:02:17,040 --> 00:02:21,440
asking the right questions and by using

00:02:18,959 --> 00:02:23,840
examples

00:02:21,440 --> 00:02:26,000
secondly continuous testing is not all

00:02:23,840 --> 00:02:28,879
about automating tests

00:02:26,000 --> 00:02:30,800
test automation is a critical it's

00:02:28,879 --> 00:02:32,800
critical in a devops environment

00:02:30,800 --> 00:02:34,720
but as testers we can test continually

00:02:32,800 --> 00:02:37,840
all throughout the development process

00:02:34,720 --> 00:02:37,840
and even after release

00:02:37,920 --> 00:02:41,840
lastly and probably the most important

00:02:39,840 --> 00:02:43,280
point to work in any team in modern

00:02:41,840 --> 00:02:46,400
technology just now

00:02:43,280 --> 00:02:47,840
is that collaboration is critical

00:02:46,400 --> 00:02:49,599
previously testing would be the sole

00:02:47,840 --> 00:02:51,120
responsibility of the tester and it

00:02:49,599 --> 00:02:52,400
would be left towards the end of the

00:02:51,120 --> 00:02:54,000
development process

00:02:52,400 --> 00:02:55,760
but as we all know this should no longer

00:02:54,000 --> 00:02:56,720
be the case if the team wants to find

00:02:55,760 --> 00:03:00,000
issues early

00:02:56,720 --> 00:03:01,920
and release quality software

00:03:00,000 --> 00:03:03,200
although i do go on to talk about

00:03:01,920 --> 00:03:05,360
automation in this talk

00:03:03,200 --> 00:03:06,800
it's more about the practices associated

00:03:05,360 --> 00:03:08,959
with it rather than talking about the

00:03:06,800 --> 00:03:11,120
technology and tools themselves

00:03:08,959 --> 00:03:13,040
and i've purposely focused this talk on

00:03:11,120 --> 00:03:14,000
the collaborative practices and process

00:03:13,040 --> 00:03:16,640
improvements

00:03:14,000 --> 00:03:18,159
that we can influence as testers and

00:03:16,640 --> 00:03:18,720
that's where i've seen most of the

00:03:18,159 --> 00:03:21,360
benefit

00:03:18,720 --> 00:03:23,040
to have been throughout my career and

00:03:21,360 --> 00:03:24,400
it's these practices that then allow you

00:03:23,040 --> 00:03:25,519
to use the tools and technology to

00:03:24,400 --> 00:03:28,000
facilitate

00:03:25,519 --> 00:03:29,280
um you continuously improving processes

00:03:28,000 --> 00:03:31,040
within your team

00:03:29,280 --> 00:03:32,480
but the mindset in this approach have to

00:03:31,040 --> 00:03:33,920
come first

00:03:32,480 --> 00:03:35,440
but if you do want to dive deeper into

00:03:33,920 --> 00:03:37,599
the tools and technologies then i think

00:03:35,440 --> 00:03:38,400
it was tom mccrawley who gave a great

00:03:37,599 --> 00:03:40,319
talk called

00:03:38,400 --> 00:03:42,239
talking testing without the safety net

00:03:40,319 --> 00:03:44,000
at previous qa babble meetup

00:03:42,239 --> 00:03:45,360
and that's now available on youtube i

00:03:44,000 --> 00:03:46,959
would definitely recommend

00:03:45,360 --> 00:03:48,799
watching that if you're interested in

00:03:46,959 --> 00:03:52,080
the tools and technology that

00:03:48,799 --> 00:03:52,080
may follow on from this talk

00:03:52,400 --> 00:03:56,400
so why do i believe it's so important to

00:03:54,480 --> 00:03:57,920
share these thoughts on the value that

00:03:56,400 --> 00:03:59,760
testers can provide in devops

00:03:57,920 --> 00:04:01,360
environments

00:03:59,760 --> 00:04:03,120
like many roles in the technology

00:04:01,360 --> 00:04:04,480
industry testing has changed over the

00:04:03,120 --> 00:04:06,080
past few years

00:04:04,480 --> 00:04:08,000
previously testing was a role and

00:04:06,080 --> 00:04:11,040
activity that took place separate from

00:04:08,000 --> 00:04:12,640
other activities and within a separate

00:04:11,040 --> 00:04:14,400
team or department

00:04:12,640 --> 00:04:16,160
developers would take requirements work

00:04:14,400 --> 00:04:17,600
on those requirements through that work

00:04:16,160 --> 00:04:19,519
over the wall to testers who would then

00:04:17,600 --> 00:04:21,280
either throw the work back with bugs or

00:04:19,519 --> 00:04:23,199
throw it over to an operations team

00:04:21,280 --> 00:04:24,479
who may have never seen this code or

00:04:23,199 --> 00:04:26,720
knew known anything about this

00:04:24,479 --> 00:04:28,000
functionality before

00:04:26,720 --> 00:04:29,840
then companies obviously moved from

00:04:28,000 --> 00:04:30,639
waterfall into a more agile way of

00:04:29,840 --> 00:04:33,120
working

00:04:30,639 --> 00:04:35,120
where teams were cross-functional

00:04:33,120 --> 00:04:36,720
testers product owners and developers

00:04:35,120 --> 00:04:38,240
would work together

00:04:36,720 --> 00:04:40,800
within within the same team and

00:04:38,240 --> 00:04:44,720
typically short sprints

00:04:40,800 --> 00:04:46,240
so in practice this should remove silos

00:04:44,720 --> 00:04:48,400
everyone's working together to gain a

00:04:46,240 --> 00:04:50,320
shared understanding of the work

00:04:48,400 --> 00:04:52,479
however after having worked in a couple

00:04:50,320 --> 00:04:53,520
of companies working in agile and devops

00:04:52,479 --> 00:04:55,280
environments

00:04:53,520 --> 00:04:57,440
i'm not totally convinced that we are

00:04:55,280 --> 00:04:59,600
taking full advantage

00:04:57,440 --> 00:05:00,560
of this this situation where everyone's

00:04:59,600 --> 00:05:02,240
in the same team

00:05:00,560 --> 00:05:04,320
i'm not totally convinced that silos

00:05:02,240 --> 00:05:06,000
have been removed are we really taking

00:05:04,320 --> 00:05:09,120
full advantage of the opportunities that

00:05:06,000 --> 00:05:10,400
agile and devops environments provide us

00:05:09,120 --> 00:05:11,759
are we ensuring that there's a full

00:05:10,400 --> 00:05:12,479
understanding of what we're going to be

00:05:11,759 --> 00:05:14,080
developing

00:05:12,479 --> 00:05:15,520
by working through examples with the

00:05:14,080 --> 00:05:17,199
entire team

00:05:15,520 --> 00:05:19,280
are we working in collaboration with

00:05:17,199 --> 00:05:21,280
developers to give early insight

00:05:19,280 --> 00:05:22,479
into what tests will be running on this

00:05:21,280 --> 00:05:24,639
feature

00:05:22,479 --> 00:05:26,080
are we as testers getting involved as

00:05:24,639 --> 00:05:26,880
early as possible in the development

00:05:26,080 --> 00:05:28,479
process

00:05:26,880 --> 00:05:31,199
or are we waiting until the second week

00:05:28,479 --> 00:05:32,800
of a two-week sprint to begin testing

00:05:31,199 --> 00:05:36,720
and are we using new technologies and

00:05:32,800 --> 00:05:36,720
tools to aid our tests and efforts

00:05:36,880 --> 00:05:40,400
so quite a lot of what i'm going to talk

00:05:38,320 --> 00:05:42,320
about doesn't just apply to testers

00:05:40,400 --> 00:05:44,720
it applies applies to everyone within an

00:05:42,320 --> 00:05:46,720
agile or devops team

00:05:44,720 --> 00:05:48,720
but what i'm sharing today is where i've

00:05:46,720 --> 00:05:50,720
provided value or where i've seen value

00:05:48,720 --> 00:05:52,560
being provided by testers working in

00:05:50,720 --> 00:05:54,160
devops environments

00:05:52,560 --> 00:05:56,080
i believe that the majority of what i'm

00:05:54,160 --> 00:05:58,479
going to be sharing today can

00:05:56,080 --> 00:06:00,960
be applied to pretty much any working

00:05:58,479 --> 00:06:00,960
environment

00:06:02,560 --> 00:06:06,960
so i want to begin by covering the

00:06:04,080 --> 00:06:09,440
definition of continuous testing

00:06:06,960 --> 00:06:10,319
it's mentioned a lot in books such as

00:06:09,440 --> 00:06:12,479
accelerate and

00:06:10,319 --> 00:06:14,880
other devops text and when you search

00:06:12,479 --> 00:06:17,280
the term continuous testing online

00:06:14,880 --> 00:06:18,160
the first non-advert result was this

00:06:17,280 --> 00:06:20,880
quote here

00:06:18,160 --> 00:06:23,199
which states that continuous testing is

00:06:20,880 --> 00:06:24,560
a process of executing automated tests

00:06:23,199 --> 00:06:26,880
as part of the software delivery

00:06:24,560 --> 00:06:29,199
pipeline in order to obtain feedback

00:06:26,880 --> 00:06:30,720
on the business risks associated with a

00:06:29,199 --> 00:06:33,840
software release candidate

00:06:30,720 --> 00:06:35,440
as rapidly as possible so it's a bit of

00:06:33,840 --> 00:06:37,840
a mouthful

00:06:35,440 --> 00:06:40,000
but when you dissect it this is talking

00:06:37,840 --> 00:06:41,919
about test automation

00:06:40,000 --> 00:06:43,039
and i've taken this from the trisentis

00:06:41,919 --> 00:06:43,600
website because this was the first

00:06:43,039 --> 00:06:45,600
result

00:06:43,600 --> 00:06:48,400
but this definition is commonly adopted

00:06:45,600 --> 00:06:50,960
across the the industry

00:06:48,400 --> 00:06:53,199
so what i don't disagree with anything

00:06:50,960 --> 00:06:55,360
that is actually said in this text

00:06:53,199 --> 00:06:57,840
but what i do disagree with is using

00:06:55,360 --> 00:06:59,199
this text as a definition of continuous

00:06:57,840 --> 00:07:02,240
testing

00:06:59,199 --> 00:07:03,599
for me it's it's far too narrow

00:07:02,240 --> 00:07:05,199
what about the discussions we have when

00:07:03,599 --> 00:07:06,080
we're planning and discussing new

00:07:05,199 --> 00:07:08,080
functionality

00:07:06,080 --> 00:07:09,919
are we not testing people's assumptions

00:07:08,080 --> 00:07:12,160
or understanding of the work

00:07:09,919 --> 00:07:14,000
that we're about to start working on and

00:07:12,160 --> 00:07:15,680
what about after our work is released

00:07:14,000 --> 00:07:17,680
are we not using monitoring tools to

00:07:15,680 --> 00:07:18,880
test that our hypothesis was correct

00:07:17,680 --> 00:07:20,720
when we began the work

00:07:18,880 --> 00:07:23,440
when we decided what value we were

00:07:20,720 --> 00:07:25,039
providing to the customer

00:07:23,440 --> 00:07:27,039
i think it's potentially dangerous to

00:07:25,039 --> 00:07:28,400
describe continuous testing as purely

00:07:27,039 --> 00:07:29,759
automation

00:07:28,400 --> 00:07:31,840
but instead of trying to come up with my

00:07:29,759 --> 00:07:34,000
own definition because it wouldn't

00:07:31,840 --> 00:07:34,880
i don't think it would go well i want to

00:07:34,000 --> 00:07:36,160
share this graphic

00:07:34,880 --> 00:07:40,000
which most of you have probably seen

00:07:36,160 --> 00:07:42,160
before from dan ashby

00:07:40,000 --> 00:07:43,520
so this graphic's been shared at almost

00:07:42,160 --> 00:07:46,080
every conference i've been to over the

00:07:43,520 --> 00:07:48,800
past few years every testing conference

00:07:46,080 --> 00:07:50,160
since then first published it in 2016

00:07:48,800 --> 00:07:51,199
but i think it's been shared for very

00:07:50,160 --> 00:07:53,680
good reason

00:07:51,199 --> 00:07:56,000
and i want to talk a bit about why it is

00:07:53,680 --> 00:07:57,840
so important to me

00:07:56,000 --> 00:07:59,280
so whilst i was drawing out my mind map

00:07:57,840 --> 00:08:00,400
for this talk and writing down my notes

00:07:59,280 --> 00:08:02,160
to plan the talk

00:08:00,400 --> 00:08:04,479
i realized i've been using this graphic

00:08:02,160 --> 00:08:05,759
as a visual aid to guide my work

00:08:04,479 --> 00:08:08,240
it's not always been there in front of

00:08:05,759 --> 00:08:10,400
me but it's always at least been at the

00:08:08,240 --> 00:08:12,479
back of my mind

00:08:10,400 --> 00:08:14,560
and if we were to focus on the previous

00:08:12,479 --> 00:08:16,720
definition of continuous testing

00:08:14,560 --> 00:08:19,440
we may we would maybe cover a quarter of

00:08:16,720 --> 00:08:21,440
this devops loop on the left hand side

00:08:19,440 --> 00:08:23,280
but what about the planning releasing

00:08:21,440 --> 00:08:24,800
the operations and the monitoring side

00:08:23,280 --> 00:08:26,400
of the devops loop

00:08:24,800 --> 00:08:28,160
and this is where i think the definition

00:08:26,400 --> 00:08:29,919
of continuous testing

00:08:28,160 --> 00:08:33,199
as automated testing of the release

00:08:29,919 --> 00:08:33,199
candidate falls short

00:08:33,200 --> 00:08:36,479
as a tester in a devops environment i

00:08:35,279 --> 00:08:38,959
want to be thinking about

00:08:36,479 --> 00:08:41,200
where i can add value at every stage of

00:08:38,959 --> 00:08:43,599
the development process

00:08:41,200 --> 00:08:45,279
traditionally testing may fall into the

00:08:43,599 --> 00:08:47,760
the build stage of the devops loop

00:08:45,279 --> 00:08:49,279
down at the bottom left hand side there

00:08:47,760 --> 00:08:50,959
but we should be looking to expand into

00:08:49,279 --> 00:08:52,480
other areas

00:08:50,959 --> 00:08:54,000
and in order to do this we need to

00:08:52,480 --> 00:08:55,839
collaborate with our teammates and

00:08:54,000 --> 00:08:58,080
other roles and learn new tools

00:08:55,839 --> 00:09:00,240
technologies and practices in order to

00:08:58,080 --> 00:09:01,440
provide most value

00:09:00,240 --> 00:09:03,120
and i'm going to spend the rest of this

00:09:01,440 --> 00:09:04,560
talk discussing the ways in which i have

00:09:03,120 --> 00:09:06,839
done that or i've seen this done

00:09:04,560 --> 00:09:09,839
and the value it can provide to your

00:09:06,839 --> 00:09:13,040
team

00:09:09,839 --> 00:09:14,240
first collaboration is key

00:09:13,040 --> 00:09:16,480
if you're not willing to collaborate

00:09:14,240 --> 00:09:18,720
with other team members or other roles

00:09:16,480 --> 00:09:20,560
then you're a living empty pattern in an

00:09:18,720 --> 00:09:21,279
agile or a devops environment and this

00:09:20,560 --> 00:09:23,440
goes for

00:09:21,279 --> 00:09:24,959
everyone in any role in these sorts of

00:09:23,440 --> 00:09:27,360
teams

00:09:24,959 --> 00:09:28,880
the different background and views the

00:09:27,360 --> 00:09:30,480
different roles provided teams

00:09:28,880 --> 00:09:32,959
is extremely valuable and it's one of

00:09:30,480 --> 00:09:34,880
your team's biggest assets

00:09:32,959 --> 00:09:36,000
and as i begin to discuss the value that

00:09:34,880 --> 00:09:38,640
testers can provide

00:09:36,000 --> 00:09:39,839
in devops environments they all have the

00:09:38,640 --> 00:09:41,839
same one key theme

00:09:39,839 --> 00:09:43,920
running through them and that is one of

00:09:41,839 --> 00:09:45,519
collaboration

00:09:43,920 --> 00:09:47,680
gone are the days the testers should be

00:09:45,519 --> 00:09:49,600
exclusively sitting writing automated

00:09:47,680 --> 00:09:51,440
tests against requirements

00:09:49,600 --> 00:09:54,959
or exploratory tests and a new piece of

00:09:51,440 --> 00:09:56,640
functionality by themselves in isolation

00:09:54,959 --> 00:09:58,240
this does remain part of our roles in

00:09:56,640 --> 00:09:59,920
teams of course it does

00:09:58,240 --> 00:10:02,000
but we can provide a lot of value both

00:09:59,920 --> 00:10:03,440
before and after the stage

00:10:02,000 --> 00:10:05,839
but not without collaborating with

00:10:03,440 --> 00:10:05,839
others

00:10:07,600 --> 00:10:11,040
so first of all when it comes to

00:10:09,040 --> 00:10:12,399
building requirements it's important

00:10:11,040 --> 00:10:15,519
that we know what it is

00:10:12,399 --> 00:10:18,480
we're building and why what problem

00:10:15,519 --> 00:10:20,880
are we trying to solve for the customer

00:10:18,480 --> 00:10:22,800
with this new piece of functionality

00:10:20,880 --> 00:10:24,800
without understanding why we're building

00:10:22,800 --> 00:10:27,440
something it's impossible to

00:10:24,800 --> 00:10:28,160
begin answering how how are we going to

00:10:27,440 --> 00:10:31,200
design this

00:10:28,160 --> 00:10:32,000
and how are we going to test this you

00:10:31,200 --> 00:10:33,680
should be interested

00:10:32,000 --> 00:10:35,519
in the problem it is you're going to

00:10:33,680 --> 00:10:36,880
solve and the value you're

00:10:35,519 --> 00:10:38,640
potentially going to provide the

00:10:36,880 --> 00:10:40,240
customer

00:10:38,640 --> 00:10:42,000
and of course these questions are best

00:10:40,240 --> 00:10:44,000
asked three amigos session

00:10:42,000 --> 00:10:47,600
we've got product person a tester and a

00:10:44,000 --> 00:10:48,959
developer all present

00:10:47,600 --> 00:10:51,440
and by understanding the problem that

00:10:48,959 --> 00:10:53,279
you're trying to solve and why

00:10:51,440 --> 00:10:54,959
you can begin to use examples to try and

00:10:53,279 --> 00:10:56,720
find any missing requirements

00:10:54,959 --> 00:10:58,800
and to form a shared understanding

00:10:56,720 --> 00:11:00,160
across the whole team

00:10:58,800 --> 00:11:02,880
think of some examples of the

00:11:00,160 --> 00:11:04,720
functionality that you're talking about

00:11:02,880 --> 00:11:06,720
if you're designing a password reset

00:11:04,720 --> 00:11:08,640
functionality for example

00:11:06,720 --> 00:11:11,040
then the main path is to allow users to

00:11:08,640 --> 00:11:13,519
reset their password

00:11:11,040 --> 00:11:14,560
but then you can think of examples such

00:11:13,519 --> 00:11:16,320
as can

00:11:14,560 --> 00:11:18,320
the user reset their password using a

00:11:16,320 --> 00:11:19,680
previously used password

00:11:18,320 --> 00:11:21,360
is there a limit to the number of times

00:11:19,680 --> 00:11:22,160
a user can reset their password within a

00:11:21,360 --> 00:11:25,279
single

00:11:22,160 --> 00:11:27,279
day or a set time period and these

00:11:25,279 --> 00:11:28,800
examples may spawn off into

00:11:27,279 --> 00:11:30,800
different tasks or pieces of

00:11:28,800 --> 00:11:32,160
functionality but by having these

00:11:30,800 --> 00:11:34,079
conversations up front

00:11:32,160 --> 00:11:36,320
you're ensuring that the team is gaining

00:11:34,079 --> 00:11:38,000
a shared understanding

00:11:36,320 --> 00:11:40,720
you can of course do this formally using

00:11:38,000 --> 00:11:43,519
sections such as example mapping

00:11:40,720 --> 00:11:45,360
but i've found in my experience if your

00:11:43,519 --> 00:11:47,440
team isn't familiar with

00:11:45,360 --> 00:11:49,600
sessions such as example mapping then

00:11:47,440 --> 00:11:51,360
starting small works best

00:11:49,600 --> 00:11:53,839
it's sometimes not the best to jump into

00:11:51,360 --> 00:11:55,839
facilitated sessions for new practices

00:11:53,839 --> 00:11:57,760
but obviously it totally depends on your

00:11:55,839 --> 00:11:59,360
team your experience and their

00:11:57,760 --> 00:12:01,440
experience

00:11:59,360 --> 00:12:03,360
but the main benefit here is that if

00:12:01,440 --> 00:12:06,079
your team understands the benefit of

00:12:03,360 --> 00:12:06,880
talking through examples and discovering

00:12:06,079 --> 00:12:09,519
maybe

00:12:06,880 --> 00:12:12,880
edge cases the team hadn't thought of

00:12:09,519 --> 00:12:12,880
then then you're on to a winner

00:12:14,000 --> 00:12:16,480
and now that you've got a shared

00:12:15,040 --> 00:12:17,760
understanding of the functionality that

00:12:16,480 --> 00:12:18,959
you want to develop

00:12:17,760 --> 00:12:21,040
you can start to talk about test

00:12:18,959 --> 00:12:23,120
scenarios with your team

00:12:21,040 --> 00:12:25,440
using our previous example if you're

00:12:23,120 --> 00:12:27,120
designing a password reset system

00:12:25,440 --> 00:12:29,120
and the product owner decides that you

00:12:27,120 --> 00:12:30,800
can use one of you you can't use one of

00:12:29,120 --> 00:12:33,440
your previous five passwords

00:12:30,800 --> 00:12:34,639
when resetting the password then that

00:12:33,440 --> 00:12:36,079
becomes a test

00:12:34,639 --> 00:12:37,760
for at least one layer of the

00:12:36,079 --> 00:12:39,440
application

00:12:37,760 --> 00:12:41,600
think about what other tests you plan on

00:12:39,440 --> 00:12:42,959
writing have you got any boundary

00:12:41,600 --> 00:12:44,320
examples that you can share with your

00:12:42,959 --> 00:12:45,839
team

00:12:44,320 --> 00:12:47,920
and the value of sharing these tests

00:12:45,839 --> 00:12:49,839
that you want to run is that it reduces

00:12:47,920 --> 00:12:52,399
the likelihood of unexpected bugs being

00:12:49,839 --> 00:12:53,760
raised further down the pipeline

00:12:52,399 --> 00:12:55,279
if you can say to your team that are

00:12:53,760 --> 00:12:57,360
planning on running these tests and

00:12:55,279 --> 00:12:58,800
these are my expected results

00:12:57,360 --> 00:13:00,800
then you are ensuring that everyone

00:12:58,800 --> 00:13:03,680
knows what it is you're looking for

00:13:00,800 --> 00:13:04,079
in the behavior of the functionality of

00:13:03,680 --> 00:13:06,160
course

00:13:04,079 --> 00:13:08,000
the team doesn't have to agree with you

00:13:06,160 --> 00:13:09,600
and if the product owner or developer

00:13:08,000 --> 00:13:11,200
disagrees with your expected results

00:13:09,600 --> 00:13:12,800
then that's absolutely fine

00:13:11,200 --> 00:13:14,639
it's a but it gives you an opportunity

00:13:12,800 --> 00:13:15,360
to have these conversations as early as

00:13:14,639 --> 00:13:18,560
possible

00:13:15,360 --> 00:13:20,480
so that you're reducing waste say for

00:13:18,560 --> 00:13:20,880
example these conversations happen after

00:13:20,480 --> 00:13:22,079
your

00:13:20,880 --> 00:13:23,600
code is the point of your test

00:13:22,079 --> 00:13:24,320
environment and your automated tests are

00:13:23,600 --> 00:13:26,240
run

00:13:24,320 --> 00:13:28,160
then you're having to do a lot of rework

00:13:26,240 --> 00:13:31,920
to get back to the stage where

00:13:28,160 --> 00:13:31,920
we begin the deployment process over

00:13:32,839 --> 00:13:37,200
again

00:13:34,959 --> 00:13:39,040
when we begin to build functionality

00:13:37,200 --> 00:13:40,720
we're setting out to solve a problem for

00:13:39,040 --> 00:13:42,399
our customers

00:13:40,720 --> 00:13:45,360
but how do we know that what we have

00:13:42,399 --> 00:13:47,600
developed is a success

00:13:45,360 --> 00:13:49,279
we should be using data to either prove

00:13:47,600 --> 00:13:51,760
or disprove the hypothesis

00:13:49,279 --> 00:13:53,680
that we had when we started setting out

00:13:51,760 --> 00:13:55,120
to solve a problem

00:13:53,680 --> 00:13:56,639
as the functionality that we've

00:13:55,120 --> 00:13:58,240
developed being used when it's deployed

00:13:56,639 --> 00:13:59,920
to production

00:13:58,240 --> 00:14:02,079
our customers dropping off halfway

00:13:59,920 --> 00:14:04,560
through our expected user flow

00:14:02,079 --> 00:14:05,120
if they are has a student error are we

00:14:04,560 --> 00:14:07,839
catching

00:14:05,120 --> 00:14:09,199
and alerting the team on music sections

00:14:07,839 --> 00:14:10,399
these are just a few of the questions we

00:14:09,199 --> 00:14:13,040
can ask ourselves

00:14:10,399 --> 00:14:16,480
when it comes to building requirements

00:14:13,040 --> 00:14:18,399
or and designing our functionality

00:14:16,480 --> 00:14:20,320
so none of what i'm saying here are new

00:14:18,399 --> 00:14:21,600
concepts but i think

00:14:20,320 --> 00:14:23,680
it's amazing the value that these

00:14:21,600 --> 00:14:26,079
discussions provide

00:14:23,680 --> 00:14:27,120
and it's not unique to devops either but

00:14:26,079 --> 00:14:30,800
in my experience

00:14:27,120 --> 00:14:32,560
it is important that these sections are

00:14:30,800 --> 00:14:34,160
run in a devops environment because

00:14:32,560 --> 00:14:37,680
you're trying to release frequently

00:14:34,160 --> 00:14:40,399
you're trying to accelerate uh

00:14:37,680 --> 00:14:41,760
shipping quality software so the more

00:14:40,399 --> 00:14:42,639
effort you put into understanding

00:14:41,760 --> 00:14:45,040
requirements

00:14:42,639 --> 00:14:45,760
the less rework you'll have to do and

00:14:45,040 --> 00:14:48,160
sometimes

00:14:45,760 --> 00:14:49,680
things as simple as using examples and

00:14:48,160 --> 00:14:50,639
gaining a shared understanding of what

00:14:49,680 --> 00:14:52,720
you're developing

00:14:50,639 --> 00:14:56,320
can accelerate the rate at which you can

00:14:52,720 --> 00:14:56,320
develop this quality software

00:14:57,120 --> 00:15:03,279
so i want to talk about tdd and tdd

00:15:00,720 --> 00:15:03,839
is often seen as a developer's activity

00:15:03,279 --> 00:15:06,320
it's something

00:15:03,839 --> 00:15:08,079
they do when they're developing code and

00:15:06,320 --> 00:15:10,720
it isn't something that i've seen

00:15:08,079 --> 00:15:12,399
most testers get involved in but based

00:15:10,720 --> 00:15:15,120
on my experience this is a massive

00:15:12,399 --> 00:15:16,720
opportunity lost

00:15:15,120 --> 00:15:19,440
i think it's important to state up front

00:15:16,720 --> 00:15:21,680
that tdd is a design activity

00:15:19,440 --> 00:15:22,720
the tests that are written during the

00:15:21,680 --> 00:15:24,240
tdd process

00:15:22,720 --> 00:15:26,000
are used to guide a developer's

00:15:24,240 --> 00:15:28,000
implementation and

00:15:26,000 --> 00:15:29,040
it also guides how they construct their

00:15:28,000 --> 00:15:30,880
code

00:15:29,040 --> 00:15:34,079
but where does the information for which

00:15:30,880 --> 00:15:34,079
test to write come from

00:15:34,399 --> 00:15:38,079
the tests that are being written should

00:15:35,600 --> 00:15:40,000
be informed from the requirements that

00:15:38,079 --> 00:15:41,279
you had previously discussed with your

00:15:40,000 --> 00:15:42,880
team

00:15:41,279 --> 00:15:44,959
i found it extremely valuable as a

00:15:42,880 --> 00:15:46,399
tester to work with developers as they

00:15:44,959 --> 00:15:47,920
practice tdd

00:15:46,399 --> 00:15:49,920
and there are a couple of benefits to

00:15:47,920 --> 00:15:51,360
this

00:15:49,920 --> 00:15:53,040
firstly it's a great opportunity to

00:15:51,360 --> 00:15:55,519
reinforce the understanding of the

00:15:53,040 --> 00:15:57,040
requirements that you and your team have

00:15:55,519 --> 00:15:58,639
if you're sitting with a developer and

00:15:57,040 --> 00:16:00,000
they're writing unit tests

00:15:58,639 --> 00:16:02,079
as a tester you should be able to

00:16:00,000 --> 00:16:04,320
identify why they're writing those

00:16:02,079 --> 00:16:06,560
specific texts

00:16:04,320 --> 00:16:07,680
keep the requirements handy as you're

00:16:06,560 --> 00:16:10,639
pairing with them

00:16:07,680 --> 00:16:11,600
and refer to them often and i know that

00:16:10,639 --> 00:16:13,120
when i wear my

00:16:11,600 --> 00:16:14,800
developer hat when i'm working as a

00:16:13,120 --> 00:16:16,000
developer i often look at the

00:16:14,800 --> 00:16:18,720
requirements frequently

00:16:16,000 --> 00:16:20,240
and have them in my code as comments to

00:16:18,720 --> 00:16:21,759
ensure that i'm testing the intended

00:16:20,240 --> 00:16:23,360
behavior of the system

00:16:21,759 --> 00:16:25,120
whilst also testing the way i'm

00:16:23,360 --> 00:16:27,199
implementing my code

00:16:25,120 --> 00:16:28,800
and from experience i know it's easy for

00:16:27,199 --> 00:16:30,079
developers to lose discipline when

00:16:28,800 --> 00:16:31,680
practicing tdd

00:16:30,079 --> 00:16:33,120
and get caught up and implementing

00:16:31,680 --> 00:16:34,079
something that barely resembles the

00:16:33,120 --> 00:16:37,279
requirements

00:16:34,079 --> 00:16:38,959
just to get my test to pass so that's

00:16:37,279 --> 00:16:41,839
why i find it so valuable

00:16:38,959 --> 00:16:44,079
when practicing tdd and it's where i see

00:16:41,839 --> 00:16:46,160
the value of testers getting involved

00:16:44,079 --> 00:16:47,360
i think that as testers we're great at

00:16:46,160 --> 00:16:49,680
keeping a focus on

00:16:47,360 --> 00:16:51,519
the customer and the requirements why

00:16:49,680 --> 00:16:55,920
else did the developer were working

00:16:51,519 --> 00:16:55,920
er cans often get lost in the code

00:16:56,720 --> 00:17:01,839
so also has a second benefit whilst

00:17:00,320 --> 00:17:04,480
you practice the developers practice in

00:17:01,839 --> 00:17:07,120
tdd you can talk about the testability

00:17:04,480 --> 00:17:09,120
of the code under development

00:17:07,120 --> 00:17:10,959
of course practicing tdd means that the

00:17:09,120 --> 00:17:13,600
developer's code should be testable

00:17:10,959 --> 00:17:15,760
at least at a unit level but if you have

00:17:13,600 --> 00:17:17,280
discussed some ui or api tests that you

00:17:15,760 --> 00:17:19,039
would like to write for this

00:17:17,280 --> 00:17:20,959
then this provides opportunity to

00:17:19,039 --> 00:17:23,199
implement exception handling

00:17:20,959 --> 00:17:24,160
and talk about expected response format

00:17:23,199 --> 00:17:25,760
and

00:17:24,160 --> 00:17:28,000
and talk about putting hooks into the

00:17:25,760 --> 00:17:30,880
into the code for ui

00:17:28,000 --> 00:17:32,799
automated testing it's the perfect

00:17:30,880 --> 00:17:34,080
opportunity to develop with testability

00:17:32,799 --> 00:17:35,039
in mind

00:17:34,080 --> 00:17:37,120
and if you're the one that's going to be

00:17:35,039 --> 00:17:39,039
writing these automated tests

00:17:37,120 --> 00:17:40,320
then you know exactly what to hook into

00:17:39,039 --> 00:17:41,600
and you can begin writing these tests

00:17:40,320 --> 00:17:42,960
right away

00:17:41,600 --> 00:17:44,720
and if it's a developer that's writing

00:17:42,960 --> 00:17:46,960
these tests further

00:17:44,720 --> 00:17:49,120
down the process then they're creating a

00:17:46,960 --> 00:17:50,799
testable implementation for themselves

00:17:49,120 --> 00:17:54,559
and they're less likely to grow

00:17:50,799 --> 00:17:54,559
frustrated with writing automated text

00:17:55,360 --> 00:18:00,320
as well as this are you developing

00:17:58,320 --> 00:18:02,240
observable functionality

00:18:00,320 --> 00:18:03,679
what login are you implementing are you

00:18:02,240 --> 00:18:06,640
talking about what

00:18:03,679 --> 00:18:07,840
trace you need if if a user is following

00:18:06,640 --> 00:18:09,360
a specific flow

00:18:07,840 --> 00:18:11,600
if something goes wrong in production

00:18:09,360 --> 00:18:13,280
how are you going to know um

00:18:11,600 --> 00:18:15,600
it's easy to trace a user's journey from

00:18:13,280 --> 00:18:17,280
end to end and it's implemented

00:18:15,600 --> 00:18:19,600
implementation here that makes life a

00:18:17,280 --> 00:18:20,799
lot easier after your functionality is

00:18:19,600 --> 00:18:22,480
released to production

00:18:20,799 --> 00:18:24,480
you can observe what is going on in your

00:18:22,480 --> 00:18:29,360
system so it's important to talk about

00:18:24,480 --> 00:18:30,880
login and monitoring at this stage

00:18:29,360 --> 00:18:33,120
so of course one of the main advantages

00:18:30,880 --> 00:18:34,480
of tdd is that you end up with a large

00:18:33,120 --> 00:18:36,720
suite of tests that can be run

00:18:34,480 --> 00:18:39,840
every time code is committed and making

00:18:36,720 --> 00:18:41,360
sure that we aren't breaking builds

00:18:39,840 --> 00:18:43,120
but typically what you'll find with unit

00:18:41,360 --> 00:18:45,840
tests is that they test

00:18:43,120 --> 00:18:47,360
the expected flow the expected

00:18:45,840 --> 00:18:49,120
implementation

00:18:47,360 --> 00:18:51,039
but what about the edge or the boundary

00:18:49,120 --> 00:18:52,880
cases

00:18:51,039 --> 00:18:54,559
if we refer back to the reset password

00:18:52,880 --> 00:18:57,120
example what if someone to

00:18:54,559 --> 00:18:58,559
where to reuse their fifth most recent

00:18:57,120 --> 00:19:00,000
password

00:18:58,559 --> 00:19:01,600
it shouldn't be allowed based on our

00:19:00,000 --> 00:19:03,360
specification

00:19:01,600 --> 00:19:04,640
but has our code handled and off by one

00:19:03,360 --> 00:19:06,480
error

00:19:04,640 --> 00:19:09,280
if it's correctly not allowed then are

00:19:06,480 --> 00:19:11,280
the correct exceptions being thrown

00:19:09,280 --> 00:19:12,720
it's these type of scenarios where i

00:19:11,280 --> 00:19:14,160
believe that testers can add a lot of

00:19:12,720 --> 00:19:17,120
value in tdd

00:19:14,160 --> 00:19:19,200
or with writing unit tests and why why

00:19:17,120 --> 00:19:21,200
wait until a build has been deployed to

00:19:19,200 --> 00:19:22,160
a test environment to catch issues like

00:19:21,200 --> 00:19:23,840
this

00:19:22,160 --> 00:19:25,200
if a test is involved at this stage

00:19:23,840 --> 00:19:26,559
you'll generally find that cases like

00:19:25,200 --> 00:19:28,480
this are caught earlier

00:19:26,559 --> 00:19:30,720
and it prevents rework further down the

00:19:28,480 --> 00:19:30,720
line

00:19:32,240 --> 00:19:35,600
so earlier in this talk i stated a

00:19:34,320 --> 00:19:37,679
disagreement with the way that

00:19:35,600 --> 00:19:40,000
continuous testing is defined by

00:19:37,679 --> 00:19:41,760
much of the industry and one of my

00:19:40,000 --> 00:19:44,400
complaints was with the scope that

00:19:41,760 --> 00:19:45,120
was that the scope was too narrow and i

00:19:44,400 --> 00:19:47,440
fully believe

00:19:45,120 --> 00:19:49,120
if i'd said this on twitter or online

00:19:47,440 --> 00:19:52,240
then i may have been pulled up for

00:19:49,120 --> 00:19:54,160
devaluing automated testing i don't

00:19:52,240 --> 00:19:55,039
think by promoting the value of testers

00:19:54,160 --> 00:19:57,919
and devops

00:19:55,039 --> 00:20:00,400
out with test automation i'm definitely

00:19:57,919 --> 00:20:02,480
not saying the automation isn't valuable

00:20:00,400 --> 00:20:04,320
in my team we found that recently the

00:20:02,480 --> 00:20:05,120
pain of not having enough automated

00:20:04,320 --> 00:20:07,360
tests

00:20:05,120 --> 00:20:10,159
and relying too much on human testing

00:20:07,360 --> 00:20:10,159
after deploying

00:20:10,320 --> 00:20:14,480
of course most automated tests only

00:20:12,640 --> 00:20:16,400
highlight what has changed

00:20:14,480 --> 00:20:18,000
you provide an expected response and you

00:20:16,400 --> 00:20:19,760
compare it to an actual response

00:20:18,000 --> 00:20:22,159
and it tells you if what is returned

00:20:19,760 --> 00:20:24,240
matches what is expected

00:20:22,159 --> 00:20:26,000
and tests like this are basic but there

00:20:24,240 --> 00:20:27,679
is valuable

00:20:26,000 --> 00:20:30,080
there is much as part of testing and is

00:20:27,679 --> 00:20:31,440
valuable for me as exploratory testing

00:20:30,080 --> 00:20:33,440
is

00:20:31,440 --> 00:20:35,520
in a complex system with many moving

00:20:33,440 --> 00:20:37,840
parts components or modules it could be

00:20:35,520 --> 00:20:39,360
foolish to assume that changes to

00:20:37,840 --> 00:20:42,159
one component will not interfere with

00:20:39,360 --> 00:20:43,760
the functionality elsewhere

00:20:42,159 --> 00:20:45,440
we've made changes in our team recently

00:20:43,760 --> 00:20:47,200
that have led to unexpected functional

00:20:45,440 --> 00:20:48,000
changes out with the area that we were

00:20:47,200 --> 00:20:51,600
directly working

00:20:48,000 --> 00:20:54,159
on and a simple automated expected

00:20:51,600 --> 00:20:55,360
result versus actual result a test like

00:20:54,159 --> 00:20:56,080
that would have caught this for us

00:20:55,360 --> 00:20:57,360
instantly

00:20:56,080 --> 00:21:00,240
and saved our customers from

00:20:57,360 --> 00:21:00,240
experiencing issues

00:21:01,360 --> 00:21:05,039
so in order to have an effective test

00:21:02,880 --> 00:21:06,480
suite that provides value to the team

00:21:05,039 --> 00:21:08,480
we should focus on what the biggest

00:21:06,480 --> 00:21:09,919
risks are to the business and to the

00:21:08,480 --> 00:21:12,240
customer

00:21:09,919 --> 00:21:14,240
if a test fails we want it to mean

00:21:12,240 --> 00:21:16,799
something to the team

00:21:14,240 --> 00:21:17,520
and this is the same if a test passes we

00:21:16,799 --> 00:21:19,840
want the team

00:21:17,520 --> 00:21:21,280
to feel confident that nothing major has

00:21:19,840 --> 00:21:23,039
broken

00:21:21,280 --> 00:21:24,640
if a major issue occurs in production

00:21:23,039 --> 00:21:26,880
that we didn't have tests for

00:21:24,640 --> 00:21:28,400
then we should be looking to add tests

00:21:26,880 --> 00:21:31,679
that cover this scenario so that we'll

00:21:28,400 --> 00:21:33,520
find out about it quicker next time

00:21:31,679 --> 00:21:35,520
the entire team should feel responsible

00:21:33,520 --> 00:21:37,440
for our automated tests

00:21:35,520 --> 00:21:39,520
from unit tests all the way to end to

00:21:37,440 --> 00:21:41,440
end tests

00:21:39,520 --> 00:21:43,520
as i mentioned previously i would

00:21:41,440 --> 00:21:45,280
encourage testers to share knowledge of

00:21:43,520 --> 00:21:48,320
the test they're planning on writing

00:21:45,280 --> 00:21:49,600
or running with the rest of the team it

00:21:48,320 --> 00:21:51,280
also doesn't have to be test there's a

00:21:49,600 --> 00:21:52,799
write these tests

00:21:51,280 --> 00:21:54,960
everyone should be familiar with this

00:21:52,799 --> 00:21:57,600
test code

00:21:54,960 --> 00:21:59,280
repository so that so encourage

00:21:57,600 --> 00:22:01,200
developers to add some tests into the

00:21:59,280 --> 00:22:02,400
suite themselves after discussing

00:22:01,200 --> 00:22:04,559
the types of tests that you would like

00:22:02,400 --> 00:22:06,559
to run

00:22:04,559 --> 00:22:08,640
in our team just now we have one person

00:22:06,559 --> 00:22:09,520
who owns a task from beginning to end of

00:22:08,640 --> 00:22:11,200
development

00:22:09,520 --> 00:22:12,799
and this includes writing their own

00:22:11,200 --> 00:22:14,480
automated tests and testing their own

00:22:12,799 --> 00:22:16,000
functionality

00:22:14,480 --> 00:22:18,080
but like i said we encourage

00:22:16,000 --> 00:22:20,400
collaboration so

00:22:18,080 --> 00:22:22,080
like i've spoken about with with coming

00:22:20,400 --> 00:22:24,480
up with test ideas as a team

00:22:22,080 --> 00:22:26,080
before we begin work and this

00:22:24,480 --> 00:22:28,159
collaboration gives us confidence

00:22:26,080 --> 00:22:29,440
that when developers are writing tests

00:22:28,159 --> 00:22:31,360
for their own code

00:22:29,440 --> 00:22:33,440
they're doing so with the requirements

00:22:31,360 --> 00:22:36,799
in mind and not just to test that their

00:22:33,440 --> 00:22:36,799
own implementation works

00:22:38,880 --> 00:22:43,200
so speaking from experience uh don't

00:22:41,919 --> 00:22:44,720
leave the setting up of test

00:22:43,200 --> 00:22:46,240
environments and test data as an

00:22:44,720 --> 00:22:48,240
afterthought

00:22:46,240 --> 00:22:49,760
there's nothing more frustrating than

00:22:48,240 --> 00:22:50,559
not being able to reliably run your

00:22:49,760 --> 00:22:52,720
tests

00:22:50,559 --> 00:22:54,480
or failures happening due to problems in

00:22:52,720 --> 00:22:57,280
that environment

00:22:54,480 --> 00:22:58,640
this again comes under testability you

00:22:57,280 --> 00:23:00,400
should be able to create what you need

00:22:58,640 --> 00:23:02,799
when you need it or at the very least

00:23:00,400 --> 00:23:04,080
have it available to you at set times

00:23:02,799 --> 00:23:07,520
and i would encourage you to consider

00:23:04,080 --> 00:23:08,799
this as early in the project as possible

00:23:07,520 --> 00:23:10,240
one of the pain points our team's

00:23:08,799 --> 00:23:11,679
experiencing just now is that we're

00:23:10,240 --> 00:23:13,440
trying to work backwards and

00:23:11,679 --> 00:23:15,600
implement the ability to deploy small

00:23:13,440 --> 00:23:17,280
components of our code at a time

00:23:15,600 --> 00:23:19,520
to run tests quickly and get fast

00:23:17,280 --> 00:23:20,880
feedback but the way we've designed the

00:23:19,520 --> 00:23:23,039
code is that we've developed

00:23:20,880 --> 00:23:24,640
we've basically created a number of

00:23:23,039 --> 00:23:26,799
dependencies that make this difficult to

00:23:24,640 --> 00:23:26,799
do

00:23:27,200 --> 00:23:30,640
we haven't considered testability of our

00:23:29,200 --> 00:23:31,520
environments until much later in the

00:23:30,640 --> 00:23:33,120
process

00:23:31,520 --> 00:23:37,520
although we have developed our code with

00:23:33,120 --> 00:23:39,200
testability in mind

00:23:37,520 --> 00:23:41,120
if you have tests that take 15 minutes

00:23:39,200 --> 00:23:42,720
to run in your ci cd pipeline

00:23:41,120 --> 00:23:44,400
then there's a big chance that the

00:23:42,720 --> 00:23:46,000
developer who deployed the code

00:23:44,400 --> 00:23:47,679
is going to start working on something

00:23:46,000 --> 00:23:48,799
else while they're waiting on their test

00:23:47,679 --> 00:23:50,880
results

00:23:48,799 --> 00:23:52,720
and this can result in context switching

00:23:50,880 --> 00:23:54,320
by that from that developer which is a

00:23:52,720 --> 00:23:56,240
waste

00:23:54,320 --> 00:23:58,240
for me this comes back down to only

00:23:56,240 --> 00:24:00,880
writing and running critical tests every

00:23:58,240 --> 00:24:02,159
time code is committed

00:24:00,880 --> 00:24:04,000
of course there are ways to speed up

00:24:02,159 --> 00:24:06,640
your tests but in the code

00:24:04,000 --> 00:24:08,559
itself such as running them in parallel

00:24:06,640 --> 00:24:09,520
but some tests do just take a long time

00:24:08,559 --> 00:24:10,880
to run

00:24:09,520 --> 00:24:12,880
and i would consider running these

00:24:10,880 --> 00:24:13,440
nightly so that developers can deploy

00:24:12,880 --> 00:24:15,120
code

00:24:13,440 --> 00:24:16,799
and get results back within a couple of

00:24:15,120 --> 00:24:18,000
minutes

00:24:16,799 --> 00:24:20,000
this prevents a team from being

00:24:18,000 --> 00:24:21,679
frustrated with their automated tests

00:24:20,000 --> 00:24:24,240
and the impact that is having on their

00:24:21,679 --> 00:24:24,240
processes

00:24:25,600 --> 00:24:29,600
also one of the things that i've found

00:24:27,039 --> 00:24:32,400
most recently is be prepared to adapt

00:24:29,600 --> 00:24:33,120
to test the new testing practices for

00:24:32,400 --> 00:24:36,480
example

00:24:33,120 --> 00:24:38,720
infrastructure is code in our team just

00:24:36,480 --> 00:24:41,440
now we're heavy users of terraform

00:24:38,720 --> 00:24:44,240
which deploys our infrastructure such as

00:24:41,440 --> 00:24:46,000
virtual machines to aws

00:24:44,240 --> 00:24:49,120
and i've never tested terraform code

00:24:46,000 --> 00:24:51,039
before so this was completely new to me

00:24:49,120 --> 00:24:52,880
terraform is written as a declarative

00:24:51,039 --> 00:24:54,880
language and

00:24:52,880 --> 00:24:56,240
we found a test and a unit level is

00:24:54,880 --> 00:24:58,240
difficult

00:24:56,240 --> 00:24:59,679
but it can become just as complex as any

00:24:58,240 --> 00:25:01,679
other programming language such as

00:24:59,679 --> 00:25:03,279
python or java when you use it in big

00:25:01,679 --> 00:25:04,960
projects

00:25:03,279 --> 00:25:07,279
so what we did was we created our own

00:25:04,960 --> 00:25:09,760
test framework within the team

00:25:07,279 --> 00:25:11,360
and we write tests that run after our

00:25:09,760 --> 00:25:13,840
infrastructure has been deployed

00:25:11,360 --> 00:25:15,600
to aws to ensure that it's configured

00:25:13,840 --> 00:25:17,360
correctly

00:25:15,600 --> 00:25:18,720
although the language in terraform is

00:25:17,360 --> 00:25:20,159
declarative

00:25:18,720 --> 00:25:21,840
you can pull in modules from other

00:25:20,159 --> 00:25:23,840
infrastructure they can have an impact

00:25:21,840 --> 00:25:25,440
on what you're deploying

00:25:23,840 --> 00:25:28,000
and the tests that we've written are

00:25:25,440 --> 00:25:30,720
really quick under a second

00:25:28,000 --> 00:25:34,240
and they're inexpensive we're using

00:25:30,720 --> 00:25:35,679
python and bottle 3 which is aws api

00:25:34,240 --> 00:25:37,360
and that allows us to be confident that

00:25:35,679 --> 00:25:39,360
we haven't adversely affected the

00:25:37,360 --> 00:25:43,840
infrastructure that we wish to deploy

00:25:39,360 --> 00:25:43,840
by working somewhere else

00:25:44,720 --> 00:25:49,200
so exposure testing is a technique that

00:25:47,279 --> 00:25:52,159
much of the devops and tech industry

00:25:49,200 --> 00:25:53,440
don't know much about the ability to

00:25:52,159 --> 00:25:56,080
explore a piece of software or

00:25:53,440 --> 00:25:57,600
functionality to discover unknowns

00:25:56,080 --> 00:25:59,360
these are the types of tests that we can

00:25:57,600 --> 00:26:00,960
automate and

00:25:59,360 --> 00:26:03,039
because we don't know what the expected

00:26:00,960 --> 00:26:05,600
behavior is a lot of the time

00:26:03,039 --> 00:26:06,640
it's how we learn more about our complex

00:26:05,600 --> 00:26:07,840
systems

00:26:06,640 --> 00:26:09,840
and it's potentially one of the most

00:26:07,840 --> 00:26:11,840
underrated skills that a software tester

00:26:09,840 --> 00:26:13,360
possesses

00:26:11,840 --> 00:26:15,440
but in the world of continuous

00:26:13,360 --> 00:26:17,760
deployments and accelerated releases

00:26:15,440 --> 00:26:19,760
does exploration testing still have a

00:26:17,760 --> 00:26:23,200
place

00:26:19,760 --> 00:26:24,559
very much so i believe i believe it fits

00:26:23,200 --> 00:26:26,240
in a different way

00:26:24,559 --> 00:26:28,240
and as testers we need to change the

00:26:26,240 --> 00:26:30,720
scope of what it is we're exploring

00:26:28,240 --> 00:26:32,240
and how we're carrying it out but

00:26:30,720 --> 00:26:34,000
there's definitely still a place for

00:26:32,240 --> 00:26:36,080
exploring a more mature version of the

00:26:34,000 --> 00:26:38,159
product such as in our test environment

00:26:36,080 --> 00:26:40,000
or in production

00:26:38,159 --> 00:26:43,120
but the more frequently this is done at

00:26:40,000 --> 00:26:44,720
the earlier stages the better

00:26:43,120 --> 00:26:46,080
consider a couple of slides before this

00:26:44,720 --> 00:26:48,240
where i spoke about testers getting

00:26:46,080 --> 00:26:50,080
involved in tdd

00:26:48,240 --> 00:26:52,000
you can begin to explore the software at

00:26:50,080 --> 00:26:54,480
that unit layer before

00:26:52,000 --> 00:26:56,240
it is deployed you don't necessarily

00:26:54,480 --> 00:26:58,159
need to be code confident in order to

00:26:56,240 --> 00:26:59,600
carry this out

00:26:58,159 --> 00:27:00,720
think about what it is you'd like to

00:26:59,600 --> 00:27:01,840
explore with a new piece of

00:27:00,720 --> 00:27:04,159
functionality

00:27:01,840 --> 00:27:06,799
or the system as a whole and work with a

00:27:04,159 --> 00:27:08,640
developer on writing that test

00:27:06,799 --> 00:27:10,640
see if it's possible to capture all or

00:27:08,640 --> 00:27:13,760
some of these scenarios

00:27:10,640 --> 00:27:16,480
for your exploration and unit tests

00:27:13,760 --> 00:27:18,640
basic unit tests are relatively simple

00:27:16,480 --> 00:27:20,480
if you're dealing with a complex system

00:27:18,640 --> 00:27:23,600
then you can create unit tests that span

00:27:20,480 --> 00:27:26,240
multiple functions within your code

00:27:23,600 --> 00:27:27,919
exploring at this layer can be extremely

00:27:26,240 --> 00:27:30,640
valuable to teams

00:27:27,919 --> 00:27:32,320
you're still testing at the code level

00:27:30,640 --> 00:27:32,960
but you're spanning multiple often

00:27:32,320 --> 00:27:35,840
complex

00:27:32,960 --> 00:27:35,840
functions and logic

00:27:36,159 --> 00:27:39,760
and in the interest of getting other

00:27:37,279 --> 00:27:42,159
team members involved set up

00:27:39,760 --> 00:27:42,799
a session with your team to explore the

00:27:42,159 --> 00:27:45,679
system

00:27:42,799 --> 00:27:47,520
on the test environment many minds and

00:27:45,679 --> 00:27:48,159
different backgrounds and roles are more

00:27:47,520 --> 00:27:51,360
powerful

00:27:48,159 --> 00:27:52,960
than one time box this session

00:27:51,360 --> 00:27:55,679
and have set goals of what you like to

00:27:52,960 --> 00:27:56,960
explore and with what tools

00:27:55,679 --> 00:27:59,919
and this gives you the opportunity to

00:27:56,960 --> 00:28:01,520
show the benefits of exploratory testing

00:27:59,919 --> 00:28:04,080
and discuss what you have discovered

00:28:01,520 --> 00:28:06,399
after the session is finished

00:28:04,080 --> 00:28:07,919
i've run this in my last company and

00:28:06,399 --> 00:28:09,840
i've seen it eventually to change in

00:28:07,919 --> 00:28:11,679
mindset from developers

00:28:09,840 --> 00:28:14,000
which often leads them considering

00:28:11,679 --> 00:28:16,559
outside of the the happy path

00:28:14,000 --> 00:28:17,200
in order to uncover more information and

00:28:16,559 --> 00:28:18,960
they do

00:28:17,200 --> 00:28:21,840
they do this naturally as they're

00:28:18,960 --> 00:28:23,840
developing so often takes place

00:28:21,840 --> 00:28:25,279
on their local machines as they deploy

00:28:23,840 --> 00:28:28,240
what they've been working on

00:28:25,279 --> 00:28:29,919
or within their development environment

00:28:28,240 --> 00:28:32,399
so this is why i've titled this slide as

00:28:29,919 --> 00:28:34,559
continuous exploration

00:28:32,399 --> 00:28:35,919
exploratory testing is important to

00:28:34,559 --> 00:28:37,120
uncover more information about the

00:28:35,919 --> 00:28:38,880
system

00:28:37,120 --> 00:28:41,440
when a world where we want to ship

00:28:38,880 --> 00:28:42,960
faster we need to adapt to where it has

00:28:41,440 --> 00:28:45,600
taken place

00:28:42,960 --> 00:28:46,159
by practicing some exploratory testing

00:28:45,600 --> 00:28:48,399
techniques

00:28:46,159 --> 00:28:49,200
at the unit level and getting developers

00:28:48,399 --> 00:28:50,960
involved

00:28:49,200 --> 00:28:52,799
the team are practicing explorative

00:28:50,960 --> 00:28:59,200
testing throughout the process

00:28:52,799 --> 00:29:01,840
as well as in the traditional manner

00:28:59,200 --> 00:29:02,960
for me in a devops environment we are

00:29:01,840 --> 00:29:04,240
not finished with a piece of

00:29:02,960 --> 00:29:06,399
functionality

00:29:04,240 --> 00:29:07,840
until we have proven that it works in

00:29:06,399 --> 00:29:09,840
production

00:29:07,840 --> 00:29:12,240
and by working i mean there are no

00:29:09,840 --> 00:29:14,799
errors or exceptions

00:29:12,240 --> 00:29:17,440
and once this has been proven and the

00:29:14,799 --> 00:29:20,799
functionality is in front of customers

00:29:17,440 --> 00:29:23,279
we can begin to see how they're using it

00:29:20,799 --> 00:29:24,399
so as i discussed before observability

00:29:23,279 --> 00:29:27,120
needs to be discussed

00:29:24,399 --> 00:29:28,720
up front the login that we are

00:29:27,120 --> 00:29:29,679
outputting once the software is running

00:29:28,720 --> 00:29:32,000
in production

00:29:29,679 --> 00:29:34,240
and the tracing of user actions and data

00:29:32,000 --> 00:29:37,440
being sent through pipelines for example

00:29:34,240 --> 00:29:38,240
should be easy to do we should be

00:29:37,440 --> 00:29:40,159
validating

00:29:38,240 --> 00:29:41,520
that what we have developed is being

00:29:40,159 --> 00:29:44,799
used by the customer

00:29:41,520 --> 00:29:46,320
the way that we would expect as well as

00:29:44,799 --> 00:29:48,640
a product owner or the team getting

00:29:46,320 --> 00:29:49,760
feedback from customers directly

00:29:48,640 --> 00:29:52,399
we can do this through various

00:29:49,760 --> 00:29:53,440
monitoring tools and is this data that

00:29:52,399 --> 00:29:56,159
allows us to prove

00:29:53,440 --> 00:29:57,919
whether our hypothesis once when we

00:29:56,159 --> 00:30:01,200
began gathering requirements

00:29:57,919 --> 00:30:01,200
was correct or not

00:30:03,200 --> 00:30:08,159
in the world of devops is most likely

00:30:06,240 --> 00:30:10,159
your team's responsibility to operate

00:30:08,159 --> 00:30:11,520
your own software

00:30:10,159 --> 00:30:13,840
in our context we deploy our

00:30:11,520 --> 00:30:16,799
functionality directly to aws

00:30:13,840 --> 00:30:18,559
and we mainly utilize lambda functions

00:30:16,799 --> 00:30:19,600
we have set up our lambda functions to

00:30:18,559 --> 00:30:21,679
capture errors

00:30:19,600 --> 00:30:24,320
and then send email alerts to the team

00:30:21,679 --> 00:30:26,880
if these errors occur

00:30:24,320 --> 00:30:28,640
so this allows us to act immediately if

00:30:26,880 --> 00:30:30,799
there are any problems with any of our

00:30:28,640 --> 00:30:34,000
functions

00:30:30,799 --> 00:30:36,320
as well as this we also monitor costs

00:30:34,000 --> 00:30:37,279
and costs costs weren't something that i

00:30:36,320 --> 00:30:38,880
spoke about

00:30:37,279 --> 00:30:40,640
when we spoke about designing or

00:30:38,880 --> 00:30:43,360
gathering requirements but it should

00:30:40,640 --> 00:30:46,159
definitely be considered at this stage

00:30:43,360 --> 00:30:48,399
operating in the cloud can lead to costs

00:30:46,159 --> 00:30:50,320
escalating quite rapidly

00:30:48,399 --> 00:30:52,080
but you can combat this slightly by

00:30:50,320 --> 00:30:54,799
setting up billing alerts

00:30:52,080 --> 00:30:56,559
um either daily or as things spike

00:30:54,799 --> 00:30:58,559
beyond and accept what you decide as an

00:30:56,559 --> 00:31:01,679
acceptable cost

00:30:58,559 --> 00:31:02,960
and an unexpected cost alert can point

00:31:01,679 --> 00:31:05,039
their problem

00:31:02,960 --> 00:31:06,799
within your functionality for example

00:31:05,039 --> 00:31:08,080
you may be suffering from an infinite

00:31:06,799 --> 00:31:09,519
loop which is causing your function to

00:31:08,080 --> 00:31:13,120
run over and over

00:31:09,519 --> 00:31:13,120
which is causing the cost to rise

00:31:14,559 --> 00:31:18,960
and given the complex nature of most of

00:31:16,399 --> 00:31:21,360
the applications we work on now

00:31:18,960 --> 00:31:24,559
testing and production is becoming a

00:31:21,360 --> 00:31:27,200
necessity for quite a lot of teams

00:31:24,559 --> 00:31:28,880
we can set up tests or staging

00:31:27,200 --> 00:31:29,519
environments to look as much as like

00:31:28,880 --> 00:31:31,600
production

00:31:29,519 --> 00:31:33,760
as possible but each of these

00:31:31,600 --> 00:31:36,080
environments will always be unique

00:31:33,760 --> 00:31:37,039
due to data activity taking place at the

00:31:36,080 --> 00:31:38,559
same time

00:31:37,039 --> 00:31:40,320
or even small differences in the way

00:31:38,559 --> 00:31:42,080
that is configured

00:31:40,320 --> 00:31:43,919
how many times have you seen a bug occur

00:31:42,080 --> 00:31:45,279
in production that didn't occur in your

00:31:43,919 --> 00:31:47,120
test environment

00:31:45,279 --> 00:31:49,039
i know for me the answer is quite a few

00:31:47,120 --> 00:31:50,480
times

00:31:49,039 --> 00:31:52,080
and i know there are restrictions on

00:31:50,480 --> 00:31:54,799
accessing data and production

00:31:52,080 --> 00:31:56,640
as there should be but run as many

00:31:54,799 --> 00:31:59,200
different non-disruptive tests as

00:31:56,640 --> 00:32:00,480
possible in your production environment

00:31:59,200 --> 00:32:02,640
you can start off by running health

00:32:00,480 --> 00:32:02,960
checks that ensure for example a basic

00:32:02,640 --> 00:32:05,440
get

00:32:02,960 --> 00:32:07,840
on your apis or rest endpoints is

00:32:05,440 --> 00:32:10,080
functioning as expected

00:32:07,840 --> 00:32:11,760
the monitoring that i've just discussed

00:32:10,080 --> 00:32:13,679
should capture this as well

00:32:11,760 --> 00:32:15,120
i'll start off by running these checks

00:32:13,679 --> 00:32:17,039
until your team feels more confident

00:32:15,120 --> 00:32:18,559
running tests in production

00:32:17,039 --> 00:32:20,399
and make the results of these tests

00:32:18,559 --> 00:32:21,919
accessible to all so that everyone knows

00:32:20,399 --> 00:32:24,399
the health status of your production

00:32:21,919 --> 00:32:24,399
environment

00:32:25,919 --> 00:32:29,039
so when i first joined ecs i joined as a

00:32:28,480 --> 00:32:31,200
qa

00:32:29,039 --> 00:32:32,559
engineer and i hadn't thought i'd be

00:32:31,200 --> 00:32:34,880
wearing as many hats

00:32:32,559 --> 00:32:36,880
or perform as many roles as i do now

00:32:34,880 --> 00:32:39,039
within a team

00:32:36,880 --> 00:32:40,720
one day i can act as a developer the

00:32:39,039 --> 00:32:41,279
neck is next as an infrastructure

00:32:40,720 --> 00:32:44,399
engineer

00:32:41,279 --> 00:32:46,399
and the next is a tester i know that not

00:32:44,399 --> 00:32:47,840
all teams are as flexible as this

00:32:46,399 --> 00:32:50,080
i think it's really important that as

00:32:47,840 --> 00:32:52,080
testers in devops environments we begin

00:32:50,080 --> 00:32:54,000
to get comfortable with some aspects of

00:32:52,080 --> 00:32:55,039
these roles

00:32:54,000 --> 00:32:56,559
if we can get comfortable with

00:32:55,039 --> 00:32:57,600
monitoring tools tests and

00:32:56,559 --> 00:33:00,240
infrastructure

00:32:57,600 --> 00:33:01,760
or pairing with developers on dvd then

00:33:00,240 --> 00:33:04,240
we're stretching the definition

00:33:01,760 --> 00:33:05,840
of our role as a tester but this is not

00:33:04,240 --> 00:33:08,559
a bad thing

00:33:05,840 --> 00:33:10,000
and this should also work the other way

00:33:08,559 --> 00:33:10,960
other roles in the team should be aiming

00:33:10,000 --> 00:33:13,600
to learn more

00:33:10,960 --> 00:33:15,279
from you and this is where you coaching

00:33:13,600 --> 00:33:18,320
developers on what you're going to test

00:33:15,279 --> 00:33:21,919
and why is important it's a great way to

00:33:18,320 --> 00:33:21,919
start building a cross-functional team

00:33:22,880 --> 00:33:26,000
if there is an issue in the production

00:33:24,399 --> 00:33:26,720
environment that needs debugging for

00:33:26,000 --> 00:33:29,679
example

00:33:26,720 --> 00:33:31,360
then offer to help i find one of my

00:33:29,679 --> 00:33:33,360
biggest changes to working in a devops

00:33:31,360 --> 00:33:36,000
environment and a cross-functional team

00:33:33,360 --> 00:33:37,440
is i rarely if ever say that's not my

00:33:36,000 --> 00:33:39,200
job

00:33:37,440 --> 00:33:41,279
if you haven't looked at the monitoring

00:33:39,200 --> 00:33:43,200
tool before then offer to

00:33:41,279 --> 00:33:44,720
work with other members of your team to

00:33:43,200 --> 00:33:47,600
begin to get familiar with it

00:33:44,720 --> 00:33:48,559
help to debug the issue after a few

00:33:47,600 --> 00:33:50,159
times of doing this

00:33:48,559 --> 00:33:53,760
you may feel comfortable to take the

00:33:50,159 --> 00:33:55,039
lead on the situation the next time

00:33:53,760 --> 00:33:56,640
and this sort of transition to a

00:33:55,039 --> 00:33:57,760
cross-functional team it takes a long

00:33:56,640 --> 00:33:59,279
time

00:33:57,760 --> 00:34:01,200
i've been working on becoming more

00:33:59,279 --> 00:34:02,960
cross-functional whilst maintaining a

00:34:01,200 --> 00:34:04,840
focus on testing for

00:34:02,960 --> 00:34:06,159
over four years now at two different

00:34:04,840 --> 00:34:09,280
companies

00:34:06,159 --> 00:34:10,000
but i'd suggest starting small pair now

00:34:09,280 --> 00:34:12,879
and again

00:34:10,000 --> 00:34:14,639
as a developer is writing unit tests

00:34:12,879 --> 00:34:16,960
invite the team to perform a monthly

00:34:14,639 --> 00:34:18,480
exploratory testing session

00:34:16,960 --> 00:34:20,399
talk about tests and requirements at

00:34:18,480 --> 00:34:22,159
meeting and you might be surprised the

00:34:20,399 --> 00:34:24,800
impact that you can have in such a small

00:34:22,159 --> 00:34:24,800
space of time

00:34:25,839 --> 00:34:30,800
testing and devops for me anyway has

00:34:28,960 --> 00:34:33,200
been about adapting to a lot of new

00:34:30,800 --> 00:34:34,560
technologies and tools

00:34:33,200 --> 00:34:36,720
for example when it came to test and

00:34:34,560 --> 00:34:38,560
infrastructure as code i was totally out

00:34:36,720 --> 00:34:39,919
of my comfort zone

00:34:38,560 --> 00:34:41,760
but it's about applying the same

00:34:39,919 --> 00:34:43,520
principles that you know well

00:34:41,760 --> 00:34:44,800
for example if you know how to organize

00:34:43,520 --> 00:34:46,639
test automation

00:34:44,800 --> 00:34:49,760
if you know how to explore straight test

00:34:46,639 --> 00:34:52,639
a ui you can apply these techniques to

00:34:49,760 --> 00:34:54,879
new technologies and it's also about

00:34:52,639 --> 00:34:57,520
adapting your processes to reduce waste

00:34:54,879 --> 00:34:59,200
further down the process

00:34:57,520 --> 00:35:00,960
in devops environments we've never had a

00:34:59,200 --> 00:35:04,079
better opportunity to work closer with

00:35:00,960 --> 00:35:05,760
different roles on a day-to-day basis

00:35:04,079 --> 00:35:07,839
we can continue to learn from each other

00:35:05,760 --> 00:35:10,240
to improve our processes

00:35:07,839 --> 00:35:12,000
for example by collaborating on tdd and

00:35:10,240 --> 00:35:14,160
generating test ideas throughout that

00:35:12,000 --> 00:35:16,320
process

00:35:14,160 --> 00:35:18,079
as testers we also we need to be able to

00:35:16,320 --> 00:35:19,920
celebrate what we're good at

00:35:18,079 --> 00:35:22,320
for example like i mentioned exploration

00:35:19,920 --> 00:35:24,079
testing but we also need to adapt to

00:35:22,320 --> 00:35:26,480
bring these new skills to a new way of

00:35:24,079 --> 00:35:26,480
working

00:35:27,040 --> 00:35:33,280
so in summary what value can you provide

00:35:29,760 --> 00:35:34,480
as a tester in a devops environment

00:35:33,280 --> 00:35:36,240
i've spoken about getting involved in

00:35:34,480 --> 00:35:37,440
the development process as early as

00:35:36,240 --> 00:35:39,920
possible

00:35:37,440 --> 00:35:41,680
and this is the key point for me i've

00:35:39,920 --> 00:35:42,800
seen so many bugs being caught in a test

00:35:41,680 --> 00:35:44,000
environment that could have been

00:35:42,800 --> 00:35:45,760
prevented by talking about

00:35:44,000 --> 00:35:47,119
different scenarios or examples with

00:35:45,760 --> 00:35:48,160
your team

00:35:47,119 --> 00:35:50,480
of course you're not going to prevent

00:35:48,160 --> 00:35:51,839
all the bugs from making into code

00:35:50,480 --> 00:35:53,760
but the importance of having a shared

00:35:51,839 --> 00:35:58,000
understanding of requirements and test

00:35:53,760 --> 00:35:59,599
scenarios cannot be understood

00:35:58,000 --> 00:36:01,599
a lot more to testing and devops than

00:35:59,599 --> 00:36:03,760
automating tests

00:36:01,599 --> 00:36:05,440
yes that plays a critical role that i

00:36:03,760 --> 00:36:07,599
don't want to downplay

00:36:05,440 --> 00:36:09,119
but even more important than automation

00:36:07,599 --> 00:36:10,960
is the collaboration aspect

00:36:09,119 --> 00:36:12,560
and working with multiple roles within

00:36:10,960 --> 00:36:15,680
your team

00:36:12,560 --> 00:36:18,240
break down those walls between roles

00:36:15,680 --> 00:36:19,760
and begin to blur the lines this helps

00:36:18,240 --> 00:36:21,280
prevent bottlenecks within your team

00:36:19,760 --> 00:36:24,000
as people begin to become more

00:36:21,280 --> 00:36:24,000
cross-functional

00:36:24,400 --> 00:36:29,040
finally we need to learn and adapt in

00:36:27,359 --> 00:36:30,640
this new role

00:36:29,040 --> 00:36:32,240
devops environments provide us with the

00:36:30,640 --> 00:36:33,520
perfect opportunities to expand our

00:36:32,240 --> 00:36:35,280
knowledge and skills

00:36:33,520 --> 00:36:36,880
but also the opportunity to share our

00:36:35,280 --> 00:36:38,480
knowledge and skills with other members

00:36:36,880 --> 00:36:40,240
of the team

00:36:38,480 --> 00:36:41,839
working closer to develop working

00:36:40,240 --> 00:36:44,240
closely with developers on tdd

00:36:41,839 --> 00:36:46,000
and monitoring also pairing with them on

00:36:44,240 --> 00:36:47,520
writing automated tests that used to be

00:36:46,000 --> 00:36:49,359
your responsibility

00:36:47,520 --> 00:36:51,680
or even running through test scenarios

00:36:49,359 --> 00:36:53,760
can be extremely valuable

00:36:51,680 --> 00:36:55,119
if nothing else it builds a sense of

00:36:53,760 --> 00:36:57,040
empathy within the team

00:36:55,119 --> 00:37:00,160
where you understand each other each

00:36:57,040 --> 00:37:00,160
other's roles better

00:37:00,960 --> 00:37:04,240
so thank you very much for listening to

00:37:02,640 --> 00:37:06,079
my talk this afternoon on the value of

00:37:04,240 --> 00:37:07,599
testers and devops

00:37:06,079 --> 00:37:08,960
we've got time for questions now but if

00:37:07,599 --> 00:37:10,480
you want to discuss anything outside

00:37:08,960 --> 00:37:12,000
this session then feel free to reach out

00:37:10,480 --> 00:37:12,560
to me on twitter you can see my handle

00:37:12,000 --> 00:37:14,880
here

00:37:12,560 --> 00:37:15,680
or on linkedin and i'd also appreciate

00:37:14,880 --> 00:37:17,200
feedback on

00:37:15,680 --> 00:37:18,480
the talk itself this is the first time

00:37:17,200 --> 00:37:19,280
i've given this talk so if you've got

00:37:18,480 --> 00:37:22,720
any feedback

00:37:19,280 --> 00:37:24,640
constructive or positive then people

00:37:22,720 --> 00:37:26,640
please please feel free to let me know

00:37:24,640 --> 00:37:28,640
i'll be happy to hear it

00:37:26,640 --> 00:37:30,000
thank you thank you so much elliot's

00:37:28,640 --> 00:37:31,280
really really appreciate i think that

00:37:30,000 --> 00:37:32,400
great topic um

00:37:31,280 --> 00:37:34,400
more and more these days some of the

00:37:32,400 --> 00:37:35,920
juicy roles that i see are asking if

00:37:34,400 --> 00:37:36,560
people are exposure to their devops so

00:37:35,920 --> 00:37:38,800
you had some

00:37:36,560 --> 00:37:40,400
great points there um as always great

00:37:38,800 --> 00:37:41,599
talk generate some great questions so

00:37:40,400 --> 00:37:43,520
i'll get through as many of these as

00:37:41,599 --> 00:37:46,000
possible guys thank you so much for them

00:37:43,520 --> 00:37:46,800
so first question comes um from ian he

00:37:46,000 --> 00:37:48,400
says

00:37:46,800 --> 00:37:50,800
if testing is the art of challenging

00:37:48,400 --> 00:37:52,720
assumptions at any stage of a delivery

00:37:50,800 --> 00:37:55,280
then is that a specialist analyst skill

00:37:52,720 --> 00:37:55,839
set or is or a designated role within a

00:37:55,280 --> 00:37:57,839
team

00:37:55,839 --> 00:37:59,119
that can be done by anyone and the

00:37:57,839 --> 00:38:00,960
success of that

00:37:59,119 --> 00:38:05,520
depends on the more general skill set of

00:38:00,960 --> 00:38:08,400
the person's undertaking that role

00:38:05,520 --> 00:38:09,760
so i think generally based on the

00:38:08,400 --> 00:38:10,960
traditional roles we've had

00:38:09,760 --> 00:38:13,760
sorry if i don't answer this question

00:38:10,960 --> 00:38:15,359
correctly but um based on the

00:38:13,760 --> 00:38:16,880
nutritional role that we come from where

00:38:15,359 --> 00:38:18,480
we do as

00:38:16,880 --> 00:38:20,960
if we are good at challenging

00:38:18,480 --> 00:38:24,000
assumptions um

00:38:20,960 --> 00:38:26,880
we probably provide most value in that

00:38:24,000 --> 00:38:28,240
just now in our current roles but i do

00:38:26,880 --> 00:38:32,000
believe it can be done

00:38:28,240 --> 00:38:33,520
by anyone um with

00:38:32,000 --> 00:38:35,520
the right sort of coaching the right

00:38:33,520 --> 00:38:36,880
sort of training and this is why i talk

00:38:35,520 --> 00:38:38,240
about exposure to

00:38:36,880 --> 00:38:40,560
to to your mindset you're basically

00:38:38,240 --> 00:38:41,839
trying to share with people

00:38:40,560 --> 00:38:43,359
how you're thinking and what you're

00:38:41,839 --> 00:38:44,880
planning on doing as you design new

00:38:43,359 --> 00:38:48,560
functionality

00:38:44,880 --> 00:38:49,680
um so i do believe that anyone could be

00:38:48,560 --> 00:38:52,240
like we've learned these skills

00:38:49,680 --> 00:38:52,800
ourselves throughout performing this

00:38:52,240 --> 00:38:55,359
role

00:38:52,800 --> 00:38:56,640
so i do believe that any pretty much

00:38:55,359 --> 00:38:59,599
anyone can learn

00:38:56,640 --> 00:39:01,119
to challenge assumptions like we do but

00:38:59,599 --> 00:39:03,040
it definitely takes a lot of effort and

00:39:01,119 --> 00:39:04,560
time to get to that point where people

00:39:03,040 --> 00:39:07,680
are as effective as challenging

00:39:04,560 --> 00:39:10,079
assumptions as we are as testers

00:39:07,680 --> 00:39:10,880
i hope that answers the question thank

00:39:10,079 --> 00:39:14,079
you ali

00:39:10,880 --> 00:39:16,240
um next question comes from miriam say

00:39:14,079 --> 00:39:17,760
i'm a manual tester and use the fear for

00:39:16,240 --> 00:39:20,000
my manual test scripts

00:39:17,760 --> 00:39:21,920
i want to know how devops can be better

00:39:20,000 --> 00:39:24,640
than zephyr for testing management

00:39:21,920 --> 00:39:24,640
activities

00:39:24,960 --> 00:39:30,560
so i've never actually used um

00:39:28,000 --> 00:39:31,200
zephyr is it here yeah sorry is that a

00:39:30,560 --> 00:39:33,839
test

00:39:31,200 --> 00:39:35,119
management tool i've not come across

00:39:33,839 --> 00:39:37,839
something before

00:39:35,119 --> 00:39:39,760
no um so what i'll give i can give a

00:39:37,839 --> 00:39:43,839
general answer about tools themselves

00:39:39,760 --> 00:39:46,000
um so we

00:39:43,839 --> 00:39:48,240
i found a lot of places a lot of teams

00:39:46,000 --> 00:39:50,560
focus on the tools

00:39:48,240 --> 00:39:52,800
rather than what they're doing within

00:39:50,560 --> 00:39:56,320
their processes

00:39:52,800 --> 00:39:58,240
um the tool should be there to aid

00:39:56,320 --> 00:40:00,560
what your process is so for example if

00:39:58,240 --> 00:40:03,119
you're wanting to

00:40:00,560 --> 00:40:04,079
i don't know set up a jira kanban board

00:40:03,119 --> 00:40:08,319
um

00:40:04,079 --> 00:40:10,480
or raise bugs then

00:40:08,319 --> 00:40:11,520
your process should drive the way that

00:40:10,480 --> 00:40:14,720
your your

00:40:11,520 --> 00:40:18,640
board or your test management tool looks

00:40:14,720 --> 00:40:20,560
um so for example if you

00:40:18,640 --> 00:40:21,760
if you're wanting to get developers

00:40:20,560 --> 00:40:24,240
involved in

00:40:21,760 --> 00:40:25,520
writing test automation you wouldn't

00:40:24,240 --> 00:40:26,720
necessarily have

00:40:25,520 --> 00:40:28,319
all the test automation tests

00:40:26,720 --> 00:40:29,040
automatically assigned to the tester if

00:40:28,319 --> 00:40:31,359
that makes sense

00:40:29,040 --> 00:40:32,880
you would allow people to pick that up

00:40:31,359 --> 00:40:34,319
from the top of the backlog

00:40:32,880 --> 00:40:36,240
as it comes in and if they don't feel

00:40:34,319 --> 00:40:37,359
comfortable picking that up then you

00:40:36,240 --> 00:40:40,800
could

00:40:37,359 --> 00:40:42,000
um then you could ask why not and work

00:40:40,800 --> 00:40:44,240
on it together

00:40:42,000 --> 00:40:45,599
and so it's important that the tools are

00:40:44,240 --> 00:40:46,160
there to help you organize what you're

00:40:45,599 --> 00:40:47,920
doing

00:40:46,160 --> 00:40:49,520
but they don't drive the process you

00:40:47,920 --> 00:40:51,839
drive the process and then use the tools

00:40:49,520 --> 00:40:53,040
to assist you

00:40:51,839 --> 00:40:55,200
don't know if that answers the question

00:40:53,040 --> 00:40:59,680
about the things

00:40:55,200 --> 00:41:02,240
yeah um next question comes from um

00:40:59,680 --> 00:41:03,280
sam he says ali you mentioned about unit

00:41:02,240 --> 00:41:05,359
testing a lot

00:41:03,280 --> 00:41:07,760
could that be better termed as contract

00:41:05,359 --> 00:41:09,760
testing since i still believe the very

00:41:07,760 --> 00:41:11,040
minute unit test should be part of

00:41:09,760 --> 00:41:13,119
development work

00:41:11,040 --> 00:41:15,920
he'd also like to hear your thoughts on

00:41:13,119 --> 00:41:19,280
how integration presentation layer tests

00:41:15,920 --> 00:41:23,040
fit into the pipeline okay

00:41:19,280 --> 00:41:25,680
um so from my understand contract

00:41:23,040 --> 00:41:27,760
i don't believe that unit testing is the

00:41:25,680 --> 00:41:30,160
same as contract testing

00:41:27,760 --> 00:41:32,319
um when i was talking about unit tests

00:41:30,160 --> 00:41:35,040
in in this

00:41:32,319 --> 00:41:35,920
context and i was talking about using it

00:41:35,040 --> 00:41:39,119
as

00:41:35,920 --> 00:41:40,960
tdd sort of using writing unit tests as

00:41:39,119 --> 00:41:45,280
part of tdd so you're using the test

00:41:40,960 --> 00:41:48,079
to um guide your implementation

00:41:45,280 --> 00:41:50,880
and those tests can be run as anyone

00:41:48,079 --> 00:41:53,520
else comes in and makes a change

00:41:50,880 --> 00:41:54,079
on on that piece of code but also you

00:41:53,520 --> 00:41:55,040
can add

00:41:54,079 --> 00:41:56,880
like i was saying you can add more

00:41:55,040 --> 00:41:59,119
scenarios like boundary examples that we

00:41:56,880 --> 00:42:01,839
would add as testers

00:41:59,119 --> 00:42:02,319
and contract testing i believe it's not

00:42:01,839 --> 00:42:03,920
something i'm

00:42:02,319 --> 00:42:06,079
expert in in fact only just got exposed

00:42:03,920 --> 00:42:09,359
to a couple of months ago

00:42:06,079 --> 00:42:12,000
and it's more about how if you're using

00:42:09,359 --> 00:42:14,079
it if teams are using different apis

00:42:12,000 --> 00:42:15,599
then it's about not breaking that

00:42:14,079 --> 00:42:18,480
contract

00:42:15,599 --> 00:42:19,920
um between so like if someone changes

00:42:18,480 --> 00:42:21,040
something to the api that could break

00:42:19,920 --> 00:42:23,280
functionality for a team that's

00:42:21,040 --> 00:42:25,520
consuming that api

00:42:23,280 --> 00:42:27,680
i'm not sure how you would implement

00:42:25,520 --> 00:42:29,599
that at the unit testing

00:42:27,680 --> 00:42:31,359
layer i would be happy to speak about

00:42:29,599 --> 00:42:32,880
that after

00:42:31,359 --> 00:42:34,160
and what was the second part of the

00:42:32,880 --> 00:42:34,800
question sorry about the integration

00:42:34,160 --> 00:42:38,079
yeah

00:42:34,800 --> 00:42:40,800
seconds let's scroll back up um

00:42:38,079 --> 00:42:41,520
um some would also like to hear your

00:42:40,800 --> 00:42:44,000
thoughts on how

00:42:41,520 --> 00:42:47,280
integration and presentation layer tests

00:42:44,000 --> 00:42:49,839
fit into the pipeline

00:42:47,280 --> 00:42:51,520
so i can only the only sort of

00:42:49,839 --> 00:42:54,720
integration test that we've written

00:42:51,520 --> 00:42:56,640
before have been sort of apis

00:42:54,720 --> 00:42:57,920
talking to databases for example i'm not

00:42:56,640 --> 00:42:59,599
sure about the if you talk about the

00:42:57,920 --> 00:43:02,800
presentation layer the ui test

00:42:59,599 --> 00:43:04,800
then that i can answer that um

00:43:02,800 --> 00:43:06,240
so what we would do is as soon as

00:43:04,800 --> 00:43:08,079
something is deployed to an environment

00:43:06,240 --> 00:43:09,520
we would have our infrastructure test

00:43:08,079 --> 00:43:10,800
running so like the terraform test that

00:43:09,520 --> 00:43:13,839
i mentioned before

00:43:10,800 --> 00:43:17,200
we would then have our integration tests

00:43:13,839 --> 00:43:18,960
um such as like apis or

00:43:17,200 --> 00:43:20,480
database tests how the apis interact

00:43:18,960 --> 00:43:22,000
with database we would have them running

00:43:20,480 --> 00:43:24,480
immediately after

00:43:22,000 --> 00:43:26,000
and we found it a lot easier to get them

00:43:24,480 --> 00:43:29,839
to a shorter time

00:43:26,000 --> 00:43:30,560
than the ui test for example so we don't

00:43:29,839 --> 00:43:33,119
have ui

00:43:30,560 --> 00:43:33,680
or presentation layer tests we've got

00:43:33,119 --> 00:43:35,359
because we

00:43:33,680 --> 00:43:36,800
all of our work is done in aws we don't

00:43:35,359 --> 00:43:37,440
really have a front end in the team just

00:43:36,800 --> 00:43:39,040
now

00:43:37,440 --> 00:43:41,280
but these tests take a long time because

00:43:39,040 --> 00:43:43,760
you're essentially deploying something

00:43:41,280 --> 00:43:45,119
changing the state in aws waiting on aws

00:43:43,760 --> 00:43:46,480
to pick it up

00:43:45,119 --> 00:43:48,160
and because if you trigger it manually

00:43:46,480 --> 00:43:50,160
you hit a throttling limit and it's

00:43:48,160 --> 00:43:52,400
those tests that take a long time

00:43:50,160 --> 00:43:54,000
so what i'd suggest in our team is that

00:43:52,400 --> 00:43:57,200
we have the integration tests which

00:43:54,000 --> 00:43:58,240
take a couple second each or something

00:43:57,200 --> 00:43:59,760
to run

00:43:58,240 --> 00:44:01,839
in our pipeline every time the code is

00:43:59,760 --> 00:44:03,599
deployed but the n10 test we have them

00:44:01,839 --> 00:44:04,560
running on a nightly basis because they

00:44:03,599 --> 00:44:05,839
do take a long time

00:44:04,560 --> 00:44:08,800
and we've not figured out a way to

00:44:05,839 --> 00:44:10,880
shorten that time yet um

00:44:08,800 --> 00:44:12,240
you'll maybe want one or two critical

00:44:10,880 --> 00:44:13,839
end-to-end tests running

00:44:12,240 --> 00:44:15,520
it depends on what the team agrees but i

00:44:13,839 --> 00:44:16,560
find anything longer than five minutes

00:44:15,520 --> 00:44:19,040
for a pipeline

00:44:16,560 --> 00:44:21,280
run people get distracted and it doesn't

00:44:19,040 --> 00:44:23,760
have the same impact

00:44:21,280 --> 00:44:25,520
awesome thank you um next question comes

00:44:23,760 --> 00:44:27,359
from marie cruz um

00:44:25,520 --> 00:44:28,640
feature flags have allowed us to test

00:44:27,359 --> 00:44:31,200
our features in production

00:44:28,640 --> 00:44:32,240
safely however i attended a talk before

00:44:31,200 --> 00:44:34,400
where the speaker

00:44:32,240 --> 00:44:36,319
discourages the use of feature flags

00:44:34,400 --> 00:44:37,280
since this increases the complexity of

00:44:36,319 --> 00:44:40,960
your tests

00:44:37,280 --> 00:44:43,280
what are your views on feature flags

00:44:40,960 --> 00:44:44,640
i'll be honest i've never even talked

00:44:43,280 --> 00:44:45,280
about testing devops i've never actually

00:44:44,640 --> 00:44:48,640
used them

00:44:45,280 --> 00:44:50,400
um but from my understand

00:44:48,640 --> 00:44:52,400
i can see the value in numbers

00:44:50,400 --> 00:44:56,079
definitely because you're much better

00:44:52,400 --> 00:44:58,560
to run your tests in uh

00:44:56,079 --> 00:45:00,319
in a production environment especially

00:44:58,560 --> 00:45:02,720
if you're using feature flags to sort of

00:45:00,319 --> 00:45:04,079
protect the users if you like from from

00:45:02,720 --> 00:45:08,319
any impact of

00:45:04,079 --> 00:45:10,240
from any impact sorry off um

00:45:08,319 --> 00:45:12,319
off your tests because you're hiding it

00:45:10,240 --> 00:45:14,560
behind a feature flag essentially

00:45:12,319 --> 00:45:16,079
i think what i would do if i was going

00:45:14,560 --> 00:45:18,480
to start using them was

00:45:16,079 --> 00:45:19,760
start like i was saying start a test

00:45:18,480 --> 00:45:21,920
small

00:45:19,760 --> 00:45:23,200
try the non-intrusive try something

00:45:21,920 --> 00:45:24,480
really simple like just first of all

00:45:23,200 --> 00:45:26,160
making sure that the code is there and

00:45:24,480 --> 00:45:27,119
it's deployed how would you test for

00:45:26,160 --> 00:45:30,480
that

00:45:27,119 --> 00:45:33,680
um i'm not i'm not sure how

00:45:30,480 --> 00:45:35,599
it would complicate your

00:45:33,680 --> 00:45:38,319
complicate your test further essentially

00:45:35,599 --> 00:45:41,920
so i can't give an answer to that one

00:45:38,319 --> 00:45:46,079
um next one comes from ian

00:45:41,920 --> 00:45:48,800
uh he says by miss seconds

00:45:46,079 --> 00:45:50,319
um what's the strategy for retooling

00:45:48,800 --> 00:45:51,599
team members to be able to wear

00:45:50,319 --> 00:45:53,920
different hats

00:45:51,599 --> 00:45:55,440
that the company can buy into paying for

00:45:53,920 --> 00:45:56,319
example bringing testers into code

00:45:55,440 --> 00:45:58,880
knowledge

00:45:56,319 --> 00:45:59,440
develops test analysis left shift

00:45:58,880 --> 00:46:02,240
thinking

00:45:59,440 --> 00:46:02,240
lateral thought

00:46:03,520 --> 00:46:08,720
so what's the okay so why would a

00:46:05,920 --> 00:46:11,680
company buy into essentially yeah

00:46:08,720 --> 00:46:12,960
so this is always a difficult one so it

00:46:11,680 --> 00:46:15,280
depends on the

00:46:12,960 --> 00:46:16,560
a lot on the culture of the team you're

00:46:15,280 --> 00:46:19,920
working in first of all

00:46:16,560 --> 00:46:21,280
and and of the company you're working in

00:46:19,920 --> 00:46:22,560
so we've always kind of done it when i

00:46:21,280 --> 00:46:25,200
did it in the last place when i've done

00:46:22,560 --> 00:46:28,319
it now we've done it by stealth almost

00:46:25,200 --> 00:46:30,079
so we've just decided that it would be a

00:46:28,319 --> 00:46:32,960
good idea for me to

00:46:30,079 --> 00:46:34,400
to pair with a developer when they're

00:46:32,960 --> 00:46:35,599
writing their unit tests or when they're

00:46:34,400 --> 00:46:37,760
practicing tdd

00:46:35,599 --> 00:46:40,160
or it would be a good idea for them to

00:46:37,760 --> 00:46:43,280
learn how to write automated tests

00:46:40,160 --> 00:46:44,640
and i think we've shown the benefit of

00:46:43,280 --> 00:46:45,760
that so

00:46:44,640 --> 00:46:47,760
in the last place we used to have a

00:46:45,760 --> 00:46:49,200
kanban board where

00:46:47,760 --> 00:46:50,880
all the tests and tasks were assigned to

00:46:49,200 --> 00:46:52,000
me and at the end of each sprint i would

00:46:50,880 --> 00:46:55,280
still have loads of

00:46:52,000 --> 00:46:56,720
tasks and progress um because there's

00:46:55,280 --> 00:46:57,760
three developers and there's only one of

00:46:56,720 --> 00:46:59,440
me

00:46:57,760 --> 00:47:00,800
but after some time when the developers

00:46:59,440 --> 00:47:02,319
became more comfortable and we became

00:47:00,800 --> 00:47:04,800
more comfortable as a team

00:47:02,319 --> 00:47:06,079
with other members writing tests or

00:47:04,800 --> 00:47:09,520
performing tests and

00:47:06,079 --> 00:47:12,720
we could share those tasks out so

00:47:09,520 --> 00:47:13,599
it meant that more more work was

00:47:12,720 --> 00:47:14,560
considered done

00:47:13,599 --> 00:47:16,480
so if we're going to talk about using

00:47:14,560 --> 00:47:17,760
metrics our velocity would have been our

00:47:16,480 --> 00:47:19,440
metric here

00:47:17,760 --> 00:47:21,119
and i know there's arguments whether

00:47:19,440 --> 00:47:23,680
it's effective or not but

00:47:21,119 --> 00:47:24,960
management seem to like it and so our

00:47:23,680 --> 00:47:26,480
velocity would have been increased

00:47:24,960 --> 00:47:28,720
because we're managing to get more tasks

00:47:26,480 --> 00:47:31,839
through because we're sharing that

00:47:28,720 --> 00:47:35,280
that responsibility of testing with

00:47:31,839 --> 00:47:38,240
with the developers in the team

00:47:35,280 --> 00:47:39,200
and i think it's about tracking as well

00:47:38,240 --> 00:47:40,640
so

00:47:39,200 --> 00:47:42,319
not tracking how many bugs degrees but

00:47:40,640 --> 00:47:43,280
how many issues you encounter relate on

00:47:42,319 --> 00:47:45,280
in the process

00:47:43,280 --> 00:47:46,480
um so like i was saying a lot of bugs

00:47:45,280 --> 00:47:49,440
can be prevented

00:47:46,480 --> 00:47:51,440
and if you know that you're having to do

00:47:49,440 --> 00:47:53,040
a lot of rework within a sprint

00:47:51,440 --> 00:47:54,640
on a particular piece of work and you're

00:47:53,040 --> 00:47:56,960
finding that number reduces then that's

00:47:54,640 --> 00:47:59,440
another good selling point there

00:47:56,960 --> 00:48:01,359
and it can be that can be given to

00:47:59,440 --> 00:48:02,480
management as a benefit but yeah we've

00:48:01,359 --> 00:48:03,200
always started off by doing it in

00:48:02,480 --> 00:48:05,440
stealth

00:48:03,200 --> 00:48:06,800
it's really hard to sort of i've not

00:48:05,440 --> 00:48:09,359
found that perfectly of

00:48:06,800 --> 00:48:10,640
convincing managers that invest time and

00:48:09,359 --> 00:48:12,160
and things like this even though

00:48:10,640 --> 00:48:13,520
the team knows it makes sense it

00:48:12,160 --> 00:48:15,359
definitely depends on the culture of the

00:48:13,520 --> 00:48:19,359
company

00:48:15,359 --> 00:48:21,839
brian thank you um okay so

00:48:19,359 --> 00:48:23,760
indie says what skills do you suggest to

00:48:21,839 --> 00:48:26,079
begin with to start

00:48:23,760 --> 00:48:28,559
um getting involved within devops as a

00:48:26,079 --> 00:48:28,559
tester

00:48:28,960 --> 00:48:32,000
so i think one of the biggest ones for

00:48:30,480 --> 00:48:35,760
me is being

00:48:32,000 --> 00:48:36,160
code confident and i don't necessarily

00:48:35,760 --> 00:48:37,440
mean

00:48:36,160 --> 00:48:38,960
being able to write code because i know

00:48:37,440 --> 00:48:40,800
that's not for everyone and not

00:48:38,960 --> 00:48:42,319
something that everyone enjoys learning

00:48:40,800 --> 00:48:46,000
to do

00:48:42,319 --> 00:48:47,440
but even just if you know a

00:48:46,000 --> 00:48:49,200
piece of functionality well or you

00:48:47,440 --> 00:48:52,640
understand the requirements well

00:48:49,200 --> 00:48:54,319
if you can spend time sitting with

00:48:52,640 --> 00:48:57,359
pairing with a developer who's writing

00:48:54,319 --> 00:48:59,599
the code and asking questions about it

00:48:57,359 --> 00:49:01,520
you'll you'll learn how to how to read

00:48:59,599 --> 00:49:03,839
code um

00:49:01,520 --> 00:49:05,359
not at like a very not a massively

00:49:03,839 --> 00:49:07,520
detailed level but being able to

00:49:05,359 --> 00:49:10,160
understand

00:49:07,520 --> 00:49:11,680
what basically the high level what the

00:49:10,160 --> 00:49:13,599
flow of the code is and then you can

00:49:11,680 --> 00:49:15,200
begin to ask questions

00:49:13,599 --> 00:49:16,400
like oh what happens if a user does that

00:49:15,200 --> 00:49:16,800
so what happens if the user performs

00:49:16,400 --> 00:49:18,240
this

00:49:16,800 --> 00:49:20,160
action then they'll be able to show you

00:49:18,240 --> 00:49:21,760
the different paths like exceptions or

00:49:20,160 --> 00:49:23,760
the error reporting

00:49:21,760 --> 00:49:26,160
and you can ask about login and things

00:49:23,760 --> 00:49:28,319
like that so i think definitely

00:49:26,160 --> 00:49:30,400
it's not just for devops um but the

00:49:28,319 --> 00:49:33,200
biggest skill that i've

00:49:30,400 --> 00:49:34,480
picked up i do write code now um but the

00:49:33,200 --> 00:49:35,920
biggest thing initially for me was

00:49:34,480 --> 00:49:36,880
becoming code confident and being able

00:49:35,920 --> 00:49:39,599
to read code

00:49:36,880 --> 00:49:40,240
and work with the developers on that

00:49:39,599 --> 00:49:43,040
great

00:49:40,240 --> 00:49:44,480
okay we've got loads of thanks um

00:49:43,040 --> 00:49:45,680
everyone's really enjoyed the talk very

00:49:44,480 --> 00:49:47,119
very insightful stephen brown says

00:49:45,680 --> 00:49:48,880
thanks ali was a good

00:49:47,119 --> 00:49:50,480
summary of the journey he's seen too

00:49:48,880 --> 00:49:51,280
he's coached testers to go about their

00:49:50,480 --> 00:49:52,720
day job

00:49:51,280 --> 00:49:54,079
always thinking is what i'm doing now

00:49:52,720 --> 00:49:54,960
contributing to adding value to the

00:49:54,079 --> 00:49:56,880
customer

00:49:54,960 --> 00:49:58,559
this removes the label specific role set

00:49:56,880 --> 00:50:00,400
of tasks you do also helps

00:49:58,559 --> 00:50:02,000
focus attention in the right place so

00:50:00,400 --> 00:50:03,280
yeah really really good

00:50:02,000 --> 00:50:05,599
i'll just make sure i've not missed

00:50:03,280 --> 00:50:09,119
anything

00:50:05,599 --> 00:50:10,720
sick um ian says yeah i totally agree

00:50:09,119 --> 00:50:12,559
complex e-commerce systems can make a

00:50:10,720 --> 00:50:15,440
lot more sense when you get to

00:50:12,559 --> 00:50:16,720
the developers design patterns so some

00:50:15,440 --> 00:50:18,240
really great stuff there

00:50:16,720 --> 00:50:20,000
um we're coming close to the end guys so

00:50:18,240 --> 00:50:21,440
we'll wrap this up now thank you as

00:50:20,000 --> 00:50:22,319
always for everyone's attending today

00:50:21,440 --> 00:50:25,359
making this

00:50:22,319 --> 00:50:27,200
you know online webinar um success um

00:50:25,359 --> 00:50:28,800
watch the space on the qa bubble page i

00:50:27,200 --> 00:50:30,240
should be announcing the next tour

00:50:28,800 --> 00:50:32,160
i've got a conversation right now this

00:50:30,240 --> 00:50:33,440
afternoon's got so but someone's also

00:50:32,160 --> 00:50:34,000
known very well in the community a lot

00:50:33,440 --> 00:50:36,319
of you all

00:50:34,000 --> 00:50:37,680
know i've heard of um other than that

00:50:36,319 --> 00:50:38,960
thank you very much everyone

00:50:37,680 --> 00:50:40,480
stay safe and if you want to follow up

00:50:38,960 --> 00:50:41,119
upon office drop myself or all your

00:50:40,480 --> 00:50:42,240
message

00:50:41,119 --> 00:50:46,559
thank you very much again take care

00:50:42,240 --> 00:50:46,559
bye-bye thank you

00:50:47,800 --> 00:50:50,800

YouTube URL: https://www.youtube.com/watch?v=0Pg724vAxHc


