Title: Testing Within CI CD - QA Babble - June 2020
Publication date: 2020-06-03
Playlist: QA Babble
Description: 
	This talk was given as part of a live-stream with QA Babble, presented by Woodrow Mercer.

Testing Without the Safety Net - Tom McCrawley

Lots of people have heard of CI/CD, it almost seems to be the new normal. In reality though, few have taken steps onto this hallowed ground. In this talk I'll talk you through some of the steps we took and processes we implemented to ensure quality when you're testing without the safety net!

Speaker Bio:

Tom has 10 years of experience in the field of QA, the last 6 of which heavily involved in automation, with experience working with a variety of tools and frameworks, spanning across multiple programming languages. He is a keen adopter of agile approaches and always keen to improve quality in both the software and delivery practices. He has been involved in a number of different projects, delivering various applications including desktop, web, and mobile user applications, as well as automated back end processes, migrations, and data projects.

You can reach out to Tom @ https://www.linkedin.com/in/tom-mccawley/
_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:01,320 --> 00:00:06,459
so just a little bit of background first

00:00:04,359 --> 00:00:07,959
of all so this isn't theoretical it's an

00:00:06,459 --> 00:00:09,549
actual project it's based on an actual

00:00:07,959 --> 00:00:11,559
project that we did and it's how we

00:00:09,549 --> 00:00:17,320
assured quality and you know continues

00:00:11,559 --> 00:00:18,700
to the deployment environment so just

00:00:17,320 --> 00:00:22,060
give you some context in terms of the

00:00:18,700 --> 00:00:24,640
project that it was and so is project

00:00:22,060 --> 00:00:28,090
for major publishing company I myself

00:00:24,640 --> 00:00:30,130
work for a consultancy I did and at the

00:00:28,090 --> 00:00:31,390
time and we were sorts has to be

00:00:30,130 --> 00:00:34,330
delivering this project for them and

00:00:31,390 --> 00:00:36,250
what they wanted to do so it was it a

00:00:34,330 --> 00:00:38,680
project to improve the process to

00:00:36,250 --> 00:00:40,329
produce publications it's a lot of peace

00:00:38,680 --> 00:00:43,480
in that sense that's quite a mouthful

00:00:40,329 --> 00:00:47,230
and after a couple of gin tonics or

00:00:43,480 --> 00:00:48,730
Peyronie's and pina coladas so what they

00:00:47,230 --> 00:00:51,340
wanted to do is they wanted to make the

00:00:48,730 --> 00:00:52,750
the overall process quicker so they

00:00:51,340 --> 00:00:55,630
wanted to reduce the time it took from

00:00:52,750 --> 00:00:58,000
get to the point of an article being

00:00:55,630 --> 00:01:00,760
sort of provide leads and actually gain

00:00:58,000 --> 00:01:02,860
that into a publication I think the the

00:01:00,760 --> 00:01:04,950
over process when we start took months

00:01:02,860 --> 00:01:07,600
and I wanted to get answers 24 hours

00:01:04,950 --> 00:01:08,499
there weren't any more automation and

00:01:07,600 --> 00:01:10,179
obviously that helps you out with the

00:01:08,499 --> 00:01:13,780
first objective there and making it

00:01:10,179 --> 00:01:15,340
quicker but also eat sort of me to catch

00:01:13,780 --> 00:01:16,539
manual error and it just frees you

00:01:15,340 --> 00:01:21,490
people look to be doing more interesting

00:01:16,539 --> 00:01:22,959
stuff rather than danger entry and they

00:01:21,490 --> 00:01:26,530
wanted to provide a sort of better

00:01:22,959 --> 00:01:29,229
slicker more intuitive UI as well so

00:01:26,530 --> 00:01:30,450
they were using two Oracle forms which

00:01:29,229 --> 00:01:34,060
if you're not familiar with these

00:01:30,450 --> 00:01:35,920
question it's a Java swing if you're not

00:01:34,060 --> 00:01:38,709
familiar with those then and the only

00:01:35,920 --> 00:01:40,929
thing I'm gonna say is if you were it's

00:01:38,709 --> 00:01:43,599
sort of like a formal business old

00:01:40,929 --> 00:01:44,979
school application and if you were using

00:01:43,599 --> 00:01:47,619
it on Windows XP it probably looked

00:01:44,979 --> 00:01:48,849
pretty tired so you can imagine in in

00:01:47,619 --> 00:01:50,889
these days it's it's positively

00:01:48,849 --> 00:01:55,359
prehistoric so they wanted to improve

00:01:50,889 --> 00:01:57,569
that in terms of sort of the squads that

00:01:55,359 --> 00:02:00,969
seeing the works on this and there were

00:01:57,569 --> 00:02:02,529
five full start developers myself and

00:02:00,969 --> 00:02:04,450
McCarthy we're sort asked with the

00:02:02,529 --> 00:02:05,919
testing of it and we had a really good

00:02:04,450 --> 00:02:08,229
product owner who was very committed to

00:02:05,919 --> 00:02:09,849
the project and was always available and

00:02:08,229 --> 00:02:12,010
we had an architect who was was very

00:02:09,849 --> 00:02:13,420
experienced and and very skilled I knew

00:02:12,010 --> 00:02:14,130
exactly what he wanted which was great

00:02:13,420 --> 00:02:17,400
for us

00:02:14,130 --> 00:02:19,380
and the infrastructure for it was built

00:02:17,400 --> 00:02:23,340
by another squad - that started spring

00:02:19,380 --> 00:02:25,200
before us and they sort of they set up

00:02:23,340 --> 00:02:27,240
for example like the Jenkins agents and

00:02:25,200 --> 00:02:28,770
server and the the Kuban Essex cluster

00:02:27,240 --> 00:02:30,030
and that was good because that mean we

00:02:28,770 --> 00:02:35,790
could just focus on delivering the

00:02:30,030 --> 00:02:38,940
software which is great so a quick note

00:02:35,790 --> 00:02:40,850
on what we built we built three web apps

00:02:38,940 --> 00:02:44,880
to support what they were looking to do

00:02:40,850 --> 00:02:47,010
they was backed by react and we built a

00:02:44,880 --> 00:02:49,920
couple of automated sore back-end you

00:02:47,010 --> 00:02:51,210
oilless processes and so this is sort

00:02:49,920 --> 00:02:53,690
where that also many time where process

00:02:51,210 --> 00:02:57,240
comes in so these would do things like

00:02:53,690 --> 00:03:00,090
read files from ftp servers update them

00:02:57,240 --> 00:03:01,950
put them back on ftp have to make a rest

00:03:00,090 --> 00:03:04,860
request and all this would be triggered

00:03:01,950 --> 00:03:07,350
sort of automatically and sort of on

00:03:04,860 --> 00:03:09,480
cron jobs and by reading s qsq so there

00:03:07,350 --> 00:03:11,970
was no sort of human insi interaction we

00:03:09,480 --> 00:03:12,920
this as such and so that's quite a cool

00:03:11,970 --> 00:03:16,230
thing to work with

00:03:12,920 --> 00:03:19,380
and that wasn't mostly winning Java and

00:03:16,230 --> 00:03:20,250
made use of some of the IDS cloud tools

00:03:19,380 --> 00:03:24,150
as well

00:03:20,250 --> 00:03:26,190
sqs particularly and behind all of that

00:03:24,150 --> 00:03:29,160
and there was a lonely micro-services

00:03:26,190 --> 00:03:34,070
that supported it probably about 30 to

00:03:29,160 --> 00:03:36,380
40 and they were Java Spring boom so

00:03:34,070 --> 00:03:38,520
quite a lot of different tools

00:03:36,380 --> 00:03:39,240
technologies and really cool project

00:03:38,520 --> 00:03:40,770
there's a little bit of everything

00:03:39,240 --> 00:03:42,420
certainly for someone like myself you

00:03:40,770 --> 00:03:44,880
know a chance to supply us some micro

00:03:42,420 --> 00:03:46,650
services some front-end web apps and the

00:03:44,880 --> 00:03:48,930
bit at the bottom really as well and

00:03:46,650 --> 00:03:50,310
sort of salt some new problems there

00:03:48,930 --> 00:03:54,630
we've got AWS and a couple of other

00:03:50,310 --> 00:03:57,150
things um but what was really cool about

00:03:54,630 --> 00:04:01,110
this project was that it was the first

00:03:57,150 --> 00:04:04,709
project I worked on which made use of

00:04:01,110 --> 00:04:06,510
continuous deployment and I'm gonna talk

00:04:04,709 --> 00:04:07,500
terminology now because it's quite

00:04:06,510 --> 00:04:09,390
important to get the distinction right

00:04:07,500 --> 00:04:10,680
with this and sort of talking someone

00:04:09,390 --> 00:04:13,200
that I know we're talking about the CI

00:04:10,680 --> 00:04:15,240
CD pipeline and what I was talking about

00:04:13,200 --> 00:04:17,459
to me was just a CI and they'll

00:04:15,240 --> 00:04:18,209
basically and I think the terminology

00:04:17,459 --> 00:04:20,220
can get used

00:04:18,209 --> 00:04:24,240
you know quite different interchangeably

00:04:20,220 --> 00:04:25,830
in different areas so I appreciate a lot

00:04:24,240 --> 00:04:27,570
of you probably know this first one I

00:04:25,830 --> 00:04:29,910
sort of cover and make sure we're also

00:04:27,570 --> 00:04:32,250
clearin on summer terms so continuous

00:04:29,910 --> 00:04:34,500
integration is the practice of

00:04:32,250 --> 00:04:35,790
developers merging changes and back into

00:04:34,500 --> 00:04:38,430
the main product branch code as often as

00:04:35,790 --> 00:04:41,370
possible and then it's validate by

00:04:38,430 --> 00:04:45,050
running some automated checks fairly

00:04:41,370 --> 00:04:47,850
straightforward continuous delivery

00:04:45,050 --> 00:04:49,140
builds on that because now you've run

00:04:47,850 --> 00:04:51,360
those checks and you validate that the

00:04:49,140 --> 00:04:53,010
thing works what this now is easy

00:04:51,360 --> 00:04:56,280
automates the creation of something

00:04:53,010 --> 00:04:58,680
that's deployable and artifact so that

00:04:56,280 --> 00:05:07,380
might be I know a docker image or a jar

00:04:58,680 --> 00:05:08,340
file or even a zip pop etc well

00:05:07,380 --> 00:05:11,790
obviously once you've got that then you

00:05:08,340 --> 00:05:16,290
can then deploy it and but to deploy is

00:05:11,790 --> 00:05:17,700
still a manual step so the last the

00:05:16,290 --> 00:05:20,190
second of the CDs continuous deployment

00:05:17,700 --> 00:05:22,470
which probably seriesins can can get

00:05:20,190 --> 00:05:24,270
used interchangeably and mistaken for

00:05:22,470 --> 00:05:25,590
continuous delivery it's where you

00:05:24,270 --> 00:05:27,330
actually Tara and I one step further and

00:05:25,590 --> 00:05:28,700
you actually do deploy it automatically

00:05:27,330 --> 00:05:32,190
as part of that process

00:05:28,700 --> 00:05:33,180
so you just taking those artifacts that

00:05:32,190 --> 00:05:34,860
you built and you are actually deployed

00:05:33,180 --> 00:05:37,710
in them and you're removing that manual

00:05:34,860 --> 00:05:39,750
release set and there's really cool

00:05:37,710 --> 00:05:41,520
diagram here from Atlassian I'll put a

00:05:39,750 --> 00:05:44,100
link to at the bottom there so you can

00:05:41,520 --> 00:05:45,840
sort of have a look at this and it'll

00:05:44,100 --> 00:05:47,820
talk about this in more detail obviously

00:05:45,840 --> 00:05:48,870
and but that sort of illustrates the key

00:05:47,820 --> 00:05:50,400
difference really which is really

00:05:48,870 --> 00:05:52,290
important so you can see on there

00:05:50,400 --> 00:05:54,630
there's two flows there they both use

00:05:52,290 --> 00:05:57,540
continuous integration the top float

00:05:54,630 --> 00:05:58,920
uses continuous delivery flow and you've

00:05:57,540 --> 00:06:01,890
got a manual step where it deploys to

00:05:58,920 --> 00:06:03,570
production and whereas the bottom row it

00:06:01,890 --> 00:06:04,620
just goes all the way through now that

00:06:03,570 --> 00:06:05,580
manual step means that you can do a

00:06:04,620 --> 00:06:07,890
couple of things at this point you've

00:06:05,580 --> 00:06:09,660
got options you could get all you QA

00:06:07,890 --> 00:06:10,860
team together and say okay this release

00:06:09,660 --> 00:06:12,450
are we're happy with it do we want to do

00:06:10,860 --> 00:06:15,000
any more regression testing or we're

00:06:12,450 --> 00:06:18,150
comfortable you could have a go no-go

00:06:15,000 --> 00:06:20,370
meeting which obviously you know quite

00:06:18,150 --> 00:06:24,660
common particularly in sort of waterfall

00:06:20,370 --> 00:06:26,220
I guess methodologies um you could do

00:06:24,660 --> 00:06:27,990
nothing you could just leave it and

00:06:26,220 --> 00:06:29,730
actually carry on building build more

00:06:27,990 --> 00:06:31,590
stuff on top and layer artifacts and

00:06:29,730 --> 00:06:34,170
then eventually deploy something in ten

00:06:31,590 --> 00:06:36,270
builds time so conversely the continuous

00:06:34,170 --> 00:06:37,530
deployment you don't have those options

00:06:36,270 --> 00:06:39,150
because it's just going out the door

00:06:37,530 --> 00:06:41,600
it's done it's passed the test it's

00:06:39,150 --> 00:06:41,600
going to live

00:06:41,650 --> 00:06:45,610
so when you think about any and every

00:06:43,790 --> 00:06:49,160
community can go to production without

00:06:45,610 --> 00:06:50,780
intervention and that's quite a scary

00:06:49,160 --> 00:06:52,130
thought really sir and even for someone

00:06:50,780 --> 00:06:54,410
like myself tasked with the quality on

00:06:52,130 --> 00:06:58,930
the project you know what if something

00:06:54,410 --> 00:07:01,160
goes wrong where's my safety net and

00:06:58,930 --> 00:07:02,270
this is the e situation myself from a

00:07:01,160 --> 00:07:04,400
colleague sort of found ourselves in

00:07:02,270 --> 00:07:06,020
when we saw you know embarking on these

00:07:04,400 --> 00:07:07,729
projects and knowing you know the

00:07:06,020 --> 00:07:15,860
methodology and how we're gonna deliver

00:07:07,729 --> 00:07:17,210
it and certainly very stressful um but

00:07:15,860 --> 00:07:19,490
chain-smoking won't get you anywhere

00:07:17,210 --> 00:07:21,440
it'll just make clothes smell so we sort

00:07:19,490 --> 00:07:23,240
of took a step back and said okay so

00:07:21,440 --> 00:07:25,160
what risks are actually being introduced

00:07:23,240 --> 00:07:26,630
with continuous deployment what what are

00:07:25,160 --> 00:07:27,979
we now face we've got perhaps we weren't

00:07:26,630 --> 00:07:29,270
in continuous delivery what you know

00:07:27,979 --> 00:07:31,729
what what actually is the problem that

00:07:29,270 --> 00:07:33,350
we've got and when you break it down

00:07:31,729 --> 00:07:34,820
actually what what we sort of thought

00:07:33,350 --> 00:07:36,320
about it was actually there are two

00:07:34,820 --> 00:07:37,820
problems that we've got really that we

00:07:36,320 --> 00:07:41,449
are worried about when the brain Sunday

00:07:37,820 --> 00:07:43,190
the first is what if we release without

00:07:41,449 --> 00:07:45,260
having undertaken sufficient regression

00:07:43,190 --> 00:07:47,000
tested in so going back to the previous

00:07:45,260 --> 00:07:48,200
example we have the orange box you could

00:07:47,000 --> 00:07:49,340
sit down with the cue eyes and kind how

00:07:48,200 --> 00:07:50,870
we test it everything is or anything

00:07:49,340 --> 00:07:53,030
else that can go wrong and you can go

00:07:50,870 --> 00:07:54,050
all actually an aggression tested you

00:07:53,030 --> 00:07:58,780
don't have that option anymore because

00:07:54,050 --> 00:08:00,889
it's going live and the second is that

00:07:58,780 --> 00:08:03,169
some of the we worried about is well

00:08:00,889 --> 00:08:04,580
what if coat gets finished and pushed

00:08:03,169 --> 00:08:06,349
before we've written a test for example

00:08:04,580 --> 00:08:09,500
and that goes a little you know all the

00:08:06,349 --> 00:08:13,310
way through without being tested and and

00:08:09,500 --> 00:08:14,780
then we're at sue real sort concerns but

00:08:13,310 --> 00:08:15,919
once you've identified those risks you

00:08:14,780 --> 00:08:19,310
can start to think about how you can

00:08:15,919 --> 00:08:20,270
overcome them and now someone just needs

00:08:19,310 --> 00:08:23,840
to tell the business what we're planning

00:08:20,270 --> 00:08:25,520
and whoever done that is going to be

00:08:23,840 --> 00:08:26,930
faced with a look of fear akin to

00:08:25,520 --> 00:08:30,680
finding a Velociraptor in your kitchen

00:08:26,930 --> 00:08:32,650
and how you overcome that is do another

00:08:30,680 --> 00:08:35,890
story and not one I'll cover in here and

00:08:32,650 --> 00:08:37,909
so going back to our problems okay

00:08:35,890 --> 00:08:39,169
sufficient regression coverage then how

00:08:37,909 --> 00:08:40,400
are you going to solve that problem how

00:08:39,169 --> 00:08:42,529
you can make sure that everything is

00:08:40,400 --> 00:08:43,490
regression tested and I'm afraid I'm not

00:08:42,529 --> 00:08:45,170
going to give any prizes for this

00:08:43,490 --> 00:08:48,380
because there's there's obviously a

00:08:45,170 --> 00:08:51,280
straight answer which is automation time

00:08:48,380 --> 00:08:51,280
spring weather looks weak

00:08:52,570 --> 00:08:56,920
so within the project we had lots of

00:08:55,450 --> 00:09:00,670
automation we had lots of tests at

00:08:56,920 --> 00:09:03,160
different levels I've noted here tops of

00:09:00,670 --> 00:09:04,090
automated tests / checks and there's a

00:09:03,160 --> 00:09:05,260
lot of debate in the community the

00:09:04,090 --> 00:09:07,750
moment about whether there's any such

00:09:05,260 --> 00:09:09,790
thing as an automatic tests the theory

00:09:07,750 --> 00:09:12,760
being you can only check what you

00:09:09,790 --> 00:09:14,320
programmed it to do we're not going to

00:09:12,760 --> 00:09:17,020
get into it to a debate about that now

00:09:14,320 --> 00:09:19,720
but just know I'll probably use the term

00:09:17,020 --> 00:09:22,270
interchangeably and and obviously these

00:09:19,720 --> 00:09:27,190
tests or checks are sort curated by

00:09:22,270 --> 00:09:28,480
different individuals so unit tests you

00:09:27,190 --> 00:09:30,910
see unique checks just something that

00:09:28,480 --> 00:09:33,640
works and but yeah so these would be key

00:09:30,910 --> 00:09:34,540
right by the developers closely you know

00:09:33,640 --> 00:09:36,010
it's quite close to the code they're

00:09:34,540 --> 00:09:37,930
writing and they probably operate in in

00:09:36,010 --> 00:09:40,030
sub a TDD format as well as much as

00:09:37,930 --> 00:09:43,300
possible although they certainly did on

00:09:40,030 --> 00:09:45,580
this project and the developers also

00:09:43,300 --> 00:09:49,120
took care of the consumer driven

00:09:45,580 --> 00:09:51,070
contract tests using a talk or part and

00:09:49,120 --> 00:09:53,020
this was something that as we sort of

00:09:51,070 --> 00:09:55,690
wanted them to use so we did get a

00:09:53,020 --> 00:09:57,040
little bit involved with it but it was

00:09:55,690 --> 00:09:59,890
certainly closer to unit testing and

00:09:57,040 --> 00:10:03,010
certainly from a work flow pattern it

00:09:59,890 --> 00:10:04,030
and much easy for them to curate and if

00:10:03,010 --> 00:10:06,400
you're not familiar with this tool it's

00:10:04,030 --> 00:10:08,190
a really cool tool packed and he's great

00:10:06,400 --> 00:10:10,090
for testing monitoring services and

00:10:08,190 --> 00:10:11,890
basically make sure that you're not

00:10:10,090 --> 00:10:13,030
breaking anything you know where you've

00:10:11,890 --> 00:10:14,320
got like loads of different micro

00:10:13,030 --> 00:10:16,600
services let's say you've got one

00:10:14,320 --> 00:10:19,480
particular service that's called by 30

00:10:16,600 --> 00:10:20,910
other services and if you change that

00:10:19,480 --> 00:10:24,190
service you roughly at risk of breaking

00:10:20,910 --> 00:10:25,570
30 sort of calls to it and Pat sort

00:10:24,190 --> 00:10:26,740
protects you against I'll make sure you

00:10:25,570 --> 00:10:28,930
don't get into a position where you say

00:10:26,740 --> 00:10:30,760
you're back 25 or misfire or something

00:10:28,930 --> 00:10:32,050
like that and so really cool so if

00:10:30,760 --> 00:10:33,970
you're doing any sort of micro service

00:10:32,050 --> 00:10:35,470
testing certainly looking into consumer

00:10:33,970 --> 00:10:39,100
driven contract cuz it can eat a lot of

00:10:35,470 --> 00:10:40,720
you worried um and I was in doing that a

00:10:39,100 --> 00:10:43,000
reduce some of the reliance that we we

00:10:40,720 --> 00:10:45,160
need and we had on on writing

00:10:43,000 --> 00:10:49,660
integration tests and we still need to

00:10:45,160 --> 00:10:54,820
do some we also curated API tests meant

00:10:49,660 --> 00:10:56,620
when DUI tests we Java giant s so that

00:10:54,820 --> 00:10:58,060
leader for that automated process they

00:10:56,620 --> 00:11:00,160
were sought quite a black box we trigger

00:10:58,060 --> 00:11:01,780
the process and then validate for

00:11:00,160 --> 00:11:04,960
example what was on the FTP or was in

00:11:01,780 --> 00:11:06,400
the database we were at a performance

00:11:04,960 --> 00:11:08,110
testing jmeter

00:11:06,400 --> 00:11:11,800
and we did some manual exposure testing

00:11:08,110 --> 00:11:13,360
as well and I just want to talk quite

00:11:11,800 --> 00:11:14,830
quickly on test data because that is

00:11:13,360 --> 00:11:16,390
something that's that's particularly

00:11:14,830 --> 00:11:18,190
important I think when you're running in

00:11:16,390 --> 00:11:19,450
in any sort of sort of pattern where

00:11:18,190 --> 00:11:21,160
you've got a build and you've got a

00:11:19,450 --> 00:11:22,810
series of automated tests that could run

00:11:21,160 --> 00:11:25,660
you know multiple times throughout the

00:11:22,810 --> 00:11:28,630
day really and there's a number of sort

00:11:25,660 --> 00:11:31,270
of strategies I've seen work you could

00:11:28,630 --> 00:11:33,340
rely on hard coded data view tests so

00:11:31,270 --> 00:11:34,660
for example you could you know make sure

00:11:33,340 --> 00:11:37,140
there's a Canton exist in your database

00:11:34,660 --> 00:11:39,160
and your tests always uses that I can

00:11:37,140 --> 00:11:41,050
obviously the problem with that is that

00:11:39,160 --> 00:11:44,770
someone could delete that account and

00:11:41,050 --> 00:11:46,000
then you're in trouble and you know a

00:11:44,770 --> 00:11:47,680
possible way around that is you could

00:11:46,000 --> 00:11:49,510
restore the database before renature

00:11:47,680 --> 00:11:52,360
your tests but you need control of the

00:11:49,510 --> 00:11:54,880
environment to do that and you could use

00:11:52,360 --> 00:11:56,470
sort of searching to locate later so you

00:11:54,880 --> 00:11:58,690
could for example run a sequel query tab

00:11:56,470 --> 00:12:00,280
on an account you need and that means

00:11:58,690 --> 00:12:02,920
that you're not at risk then of someone

00:12:00,280 --> 00:12:06,910
killing your day off but it does mean

00:12:02,920 --> 00:12:08,500
that you know start sirs be right in

00:12:06,910 --> 00:12:11,380
altering complex sequel queries to find

00:12:08,500 --> 00:12:13,570
what you need and what you tend to find

00:12:11,380 --> 00:12:14,620
is that the data that you think you need

00:12:13,570 --> 00:12:16,960
is actually more intricate and

00:12:14,620 --> 00:12:18,130
complicated than you think so to give

00:12:16,960 --> 00:12:19,930
you an example it's a just needing

00:12:18,130 --> 00:12:21,340
account and you can we'll do you search

00:12:19,930 --> 00:12:24,880
you know select top one from accounts

00:12:21,340 --> 00:12:26,260
table but then I don't know after six

00:12:24,880 --> 00:12:27,670
months you find a test fails because

00:12:26,260 --> 00:12:30,430
although it's got an account the

00:12:27,670 --> 00:12:32,560
particular customer on your account has

00:12:30,430 --> 00:12:34,240
a flag against them so you go okay we

00:12:32,560 --> 00:12:35,860
need to look at a query we need you know

00:12:34,240 --> 00:12:39,430
top one from accounts where customer not

00:12:35,860 --> 00:12:40,570
in the exact no Flags table and over

00:12:39,430 --> 00:12:42,250
time this queries become really

00:12:40,570 --> 00:12:43,750
complicated and eventually what will

00:12:42,250 --> 00:12:44,980
happen is you get to a point where you

00:12:43,750 --> 00:12:48,220
run a test and you just can't find that

00:12:44,980 --> 00:12:51,970
you want so doesn't scale massively well

00:12:48,220 --> 00:12:55,060
and the last option which is probably

00:12:51,970 --> 00:12:57,720
the the best but also the most difficult

00:12:55,060 --> 00:12:59,740
self is to generate the data

00:12:57,720 --> 00:13:01,420
particularly if you do I mean if you're

00:12:59,740 --> 00:13:02,800
dealing with a new database that's not

00:13:01,420 --> 00:13:06,460
got a lot to it then that's it's

00:13:02,800 --> 00:13:08,950
probably straightforward if you you can

00:13:06,460 --> 00:13:11,260
call some ideas that do it and great if

00:13:08,950 --> 00:13:14,230
you're dealing with what we were dealing

00:13:11,260 --> 00:13:17,020
with we had a really complex legacy

00:13:14,230 --> 00:13:18,940
database where an entry into a table

00:13:17,020 --> 00:13:19,420
actually relies on other entries in 10

00:13:18,940 --> 00:13:21,640
all the time

00:13:19,420 --> 00:13:24,940
underneath it obviously becomes a much

00:13:21,640 --> 00:13:29,530
bigger task so we were integrating with

00:13:24,940 --> 00:13:31,570
an existing Oracle database we we

00:13:29,530 --> 00:13:34,120
couldn't rely on hard coded data because

00:13:31,570 --> 00:13:35,650
we didn't have control the database we

00:13:34,120 --> 00:13:37,150
couldn't search the data because what we

00:13:35,650 --> 00:13:38,950
were creating had lot of new flags and

00:13:37,150 --> 00:13:40,510
new day so so he just didn't exist so we

00:13:38,950 --> 00:13:43,120
were stood with the last option really

00:13:40,510 --> 00:13:46,000
so what we came up with was a test data

00:13:43,120 --> 00:13:47,890
framework to generate the data as and

00:13:46,000 --> 00:13:50,440
when we need it and it could tear it at

00:13:47,890 --> 00:13:51,790
hand as well so clean up after itself we

00:13:50,440 --> 00:13:54,090
actually got quite a bit of pushback on

00:13:51,790 --> 00:13:56,770
it because it was such an effort to do

00:13:54,090 --> 00:13:58,660
but without it we wouldn't have been

00:13:56,770 --> 00:14:01,690
able to accomplish what we were able to

00:13:58,660 --> 00:14:03,250
accomplish and you know sort of I think

00:14:01,690 --> 00:14:04,630
everyone that looks back on it now that

00:14:03,250 --> 00:14:06,670
probably pushed back at tom says yeah

00:14:04,630 --> 00:14:09,190
that was the right decision and so

00:14:06,670 --> 00:14:11,110
sometimes you have to go through the

00:14:09,190 --> 00:14:15,340
pain and fight those battles to get the

00:14:11,110 --> 00:14:16,840
result and I'm quickly going to just

00:14:15,340 --> 00:14:18,070
talk through the end I'm not going to

00:14:16,840 --> 00:14:19,240
show any code or anything I'm just gonna

00:14:18,070 --> 00:14:21,130
quit he talked about some of the tools

00:14:19,240 --> 00:14:23,710
and the patterns that were used in the

00:14:21,130 --> 00:14:26,530
the framework and for the end 2000 tests

00:14:23,710 --> 00:14:30,480
and so we used an open source tool

00:14:26,530 --> 00:14:33,340
called serenity BDD and which is

00:14:30,480 --> 00:14:37,600
completely open-source so free to use

00:14:33,340 --> 00:14:39,280
and it's a Java based framework and it

00:14:37,600 --> 00:14:41,890
provides a wrapper around cucumber

00:14:39,280 --> 00:14:43,420
selenium and rest assured and what it

00:14:41,890 --> 00:14:45,340
means is that it takes care of

00:14:43,420 --> 00:14:46,960
configuring all those dependencies for

00:14:45,340 --> 00:14:48,910
you and lets you concentrate on writing

00:14:46,960 --> 00:14:50,470
the tests which ultimately is you know

00:14:48,910 --> 00:14:53,140
test thinking is what we want to be

00:14:50,470 --> 00:14:55,990
doing and it also has built-in test

00:14:53,140 --> 00:14:59,050
reports that you know add a box house ml

00:14:55,990 --> 00:15:02,950
which look really cool and you know make

00:14:59,050 --> 00:15:05,500
this stakeholders quite happy and we

00:15:02,950 --> 00:15:06,970
have parallel text execution we did

00:15:05,500 --> 00:15:11,650
cross browser test testing with browser

00:15:06,970 --> 00:15:13,120
stack and something is quite important

00:15:11,650 --> 00:15:15,160
to us because obviously at the end of

00:15:13,120 --> 00:15:16,600
the day and any testing project is still

00:15:15,160 --> 00:15:19,150
a software project it has to be

00:15:16,600 --> 00:15:21,850
maintainable so we made use of several

00:15:19,150 --> 00:15:24,250
design patents where we need you to

00:15:21,850 --> 00:15:28,150
construct complex data we object with

00:15:24,250 --> 00:15:29,740
you the build apart and I think anyone

00:15:28,150 --> 00:15:30,850
that's wrote any any form of automated

00:15:29,740 --> 00:15:32,470
test is probably familiar with a page

00:15:30,850 --> 00:15:33,879
object pattern which abstracts away

00:15:32,470 --> 00:15:36,619
details or web

00:15:33,879 --> 00:15:39,109
and perhaps a lesser-known design

00:15:36,619 --> 00:15:42,679
pattern that we made a lot of use of is

00:15:39,109 --> 00:15:43,970
the strategy pan um if you all sort of

00:15:42,679 --> 00:15:45,859
write in automated testing not familiar

00:15:43,970 --> 00:15:47,029
with it and I would recommend sort of

00:15:45,859 --> 00:15:48,619
reading up on it because it is a great

00:15:47,029 --> 00:15:52,099
app and that sort of gets rid of a lot

00:15:48,619 --> 00:15:53,989
of these statements in your code and we

00:15:52,099 --> 00:15:55,159
used in lots of places but probably the

00:15:53,989 --> 00:15:57,559
place where we used it where we got the

00:15:55,159 --> 00:15:59,209
most benefit was when we were switching

00:15:57,559 --> 00:16:03,649
between and running the tests locally or

00:15:59,209 --> 00:16:05,959
on a against a dev or city environment

00:16:03,649 --> 00:16:07,759
and when we run the test locally to

00:16:05,959 --> 00:16:10,970
create the data we just need to create a

00:16:07,759 --> 00:16:12,379
file with Jason and then whenever we the

00:16:10,970 --> 00:16:15,019
app will then just read from that file

00:16:12,379 --> 00:16:16,609
for its Mott calls and whereas when we

00:16:15,019 --> 00:16:18,319
were running against you know in a

00:16:16,609 --> 00:16:20,899
proper environment we needs to inject

00:16:18,319 --> 00:16:22,669
that area by satirical queries and the

00:16:20,899 --> 00:16:24,199
strategy pan sort of managed stat for us

00:16:22,669 --> 00:16:28,489
at run time so that all we need to do is

00:16:24,199 --> 00:16:30,679
create or add data objects and and then

00:16:28,489 --> 00:16:32,449
finally the screenplay pattern and so

00:16:30,679 --> 00:16:34,039
serenity supports this quite a lot as

00:16:32,449 --> 00:16:36,289
there's a lot of sort of Handy methods

00:16:34,039 --> 00:16:38,449
that enable you to use this and it's

00:16:36,289 --> 00:16:40,459
quite a cool pan and it means that you

00:16:38,449 --> 00:16:42,259
can focus more on users of the system

00:16:40,459 --> 00:16:44,899
rather than the pages and it's all about

00:16:42,259 --> 00:16:46,729
users or interactions which i think is a

00:16:44,899 --> 00:16:48,169
great sort of way to think about your

00:16:46,729 --> 00:16:49,519
test really rather than just I need a

00:16:48,169 --> 00:16:52,129
page objects and then I need to think

00:16:49,519 --> 00:16:54,619
about how you know what methods to sort

00:16:52,129 --> 00:16:59,449
of use it's more about the users of the

00:16:54,619 --> 00:17:02,149
system and so in terms of the Eagles may

00:16:59,449 --> 00:17:03,949
check some cells they were there one was

00:17:02,149 --> 00:17:05,990
small atomic it tested one thing you

00:17:03,949 --> 00:17:08,720
only checked you know each test one

00:17:05,990 --> 00:17:14,350
assert they created and tore down our

00:17:08,720 --> 00:17:17,059
own data and they were very focused so

00:17:14,350 --> 00:17:18,620
this is after mana causes some debate

00:17:17,059 --> 00:17:20,000
and so for example they would log in

00:17:18,620 --> 00:17:21,559
programmatically and jump straight to

00:17:20,000 --> 00:17:24,379
the URL of the page they would call in

00:17:21,559 --> 00:17:26,059
action on and to give you an analogy of

00:17:24,379 --> 00:17:28,339
that imagine if you're creating writing

00:17:26,059 --> 00:17:30,129
tests for an e-commerce site and you

00:17:28,339 --> 00:17:32,990
want to test add to basket functionality

00:17:30,129 --> 00:17:35,269
what you could do is you could learn

00:17:32,990 --> 00:17:37,610
create test that goes to the home page

00:17:35,269 --> 00:17:39,379
clicks login enter the username

00:17:37,610 --> 00:17:41,889
passwords clicks submit

00:17:39,379 --> 00:17:44,210
gets back to the logged in home page

00:17:41,889 --> 00:17:46,700
click search searches for a product

00:17:44,210 --> 00:17:47,420
clicks the products and then you're

00:17:46,700 --> 00:17:49,610
ready to add the arms

00:17:47,420 --> 00:17:52,160
basket there's a lot of steps to get to

00:17:49,610 --> 00:17:54,410
that point and that means a couple of

00:17:52,160 --> 00:17:56,630
things can happen one your test is very

00:17:54,410 --> 00:17:57,980
bloated it's gonna take a long time to

00:17:56,630 --> 00:17:59,840
run if all of you tests like that and

00:17:57,980 --> 00:18:03,200
you've got a hundred tests your build is

00:17:59,840 --> 00:18:04,310
gonna take hours second of all there's

00:18:03,200 --> 00:18:07,520
more opportunity for something to go

00:18:04,310 --> 00:18:08,510
wrong when you might say well hold on

00:18:07,520 --> 00:18:10,160
this is a test frame what you want to

00:18:08,510 --> 00:18:12,440
find that out and but to give you an

00:18:10,160 --> 00:18:14,410
example of that in that example there

00:18:12,440 --> 00:18:17,780
what we want to test these Absa basket

00:18:14,410 --> 00:18:19,520
if we run a build with 100 tests you

00:18:17,780 --> 00:18:22,310
probably find that you know 99 of them

00:18:19,520 --> 00:18:24,050
would fail on if logging was broke on

00:18:22,310 --> 00:18:27,050
logging and that doesn't really tell us

00:18:24,050 --> 00:18:29,200
anything about add to basket what what

00:18:27,050 --> 00:18:31,250
you know better

00:18:29,200 --> 00:18:33,710
gives you more information as if you've

00:18:31,250 --> 00:18:35,510
got sort of you know one test that fails

00:18:33,710 --> 00:18:37,400
log in and then once our test that

00:18:35,510 --> 00:18:39,350
thousand two basket if you don't have

00:18:37,400 --> 00:18:40,700
that what you could do is you know after

00:18:39,350 --> 00:18:43,520
an hour an hour and a half probably

00:18:40,700 --> 00:18:45,920
longer because your your test for time

00:18:43,520 --> 00:18:47,300
you know you get the root the sort of

00:18:45,920 --> 00:18:48,710
the test report and you see that

00:18:47,300 --> 00:18:50,690
everything is fouled on logging so you

00:18:48,710 --> 00:18:51,830
fix log in you run the build again takes

00:18:50,690 --> 00:18:53,630
another hour and a half and this time

00:18:51,830 --> 00:18:55,010
you find out that search has failed so

00:18:53,630 --> 00:18:56,450
you still don't have that information so

00:18:55,010 --> 00:18:58,970
it's quite important that test was

00:18:56,450 --> 00:19:02,510
thought focused and gave us you know

00:18:58,970 --> 00:19:03,890
exactly what we needed tonight and they

00:19:02,510 --> 00:19:06,740
had lots of logging in a clear reason

00:19:03,890 --> 00:19:09,290
for failure so a useful metric isn't

00:19:06,740 --> 00:19:12,140
mean time to resolution and what this

00:19:09,290 --> 00:19:15,230
sort of is an indicator of how long it

00:19:12,140 --> 00:19:17,120
takes you to sort of start resolving a

00:19:15,230 --> 00:19:18,980
problem from from the point of view you

00:19:17,120 --> 00:19:20,960
reading the test report and I works on

00:19:18,980 --> 00:19:22,700
some projects where you get a build fail

00:19:20,960 --> 00:19:24,650
and you spend the next 40 minutes trying

00:19:22,700 --> 00:19:26,120
to work out what's gone wrong and which

00:19:24,650 --> 00:19:27,830
obviously is not ideal what you want to

00:19:26,120 --> 00:19:29,210
know straight away is what is going

00:19:27,830 --> 00:19:33,080
wrong and what wanting to do to fix it

00:19:29,210 --> 00:19:34,490
um and they were also altered to be

00:19:33,080 --> 00:19:36,050
running parallel so I mentioned

00:19:34,490 --> 00:19:37,460
obviously the test ran in parallel and

00:19:36,050 --> 00:19:38,930
we didn't do this from the very

00:19:37,460 --> 00:19:42,710
beginning the projects we did each start

00:19:38,930 --> 00:19:44,480
three four months down the line and what

00:19:42,710 --> 00:19:45,710
that meant is a sort of three-month

00:19:44,480 --> 00:19:48,350
stand on we then have to configure it

00:19:45,710 --> 00:19:50,060
and turn that on and but because when

00:19:48,350 --> 00:19:52,100
we'd sort of started right in this

00:19:50,060 --> 00:19:53,570
process of reiner tests and we'd

00:19:52,100 --> 00:19:55,310
considered that and we've made sure that

00:19:53,570 --> 00:19:57,350
each test was heard impotent and

00:19:55,310 --> 00:20:00,550
anatomic when it came to doing it we

00:19:57,350 --> 00:20:00,550
just turned it on and it worked

00:20:01,159 --> 00:20:08,720
and remember you can't automate

00:20:02,960 --> 00:20:10,669
everything hold on oh that last point

00:20:08,720 --> 00:20:14,659
you can't automate everything it's quite

00:20:10,669 --> 00:20:15,799
important one because of the nature of

00:20:14,659 --> 00:20:18,259
what we're doing here

00:20:15,799 --> 00:20:19,369
if you can't automate everything then

00:20:18,259 --> 00:20:21,440
you've got a gap in your regression

00:20:19,369 --> 00:20:22,820
coverage you know we don't have the

00:20:21,440 --> 00:20:26,419
option to go and perform some manual

00:20:22,820 --> 00:20:28,609
regression anymore so anything that's

00:20:26,419 --> 00:20:31,369
not being automated is effectively just

00:20:28,609 --> 00:20:34,639
going to go through straight to life and

00:20:31,369 --> 00:20:36,919
so we looked at a couple no when we were

00:20:34,639 --> 00:20:38,389
trying to come up with sort of how we

00:20:36,919 --> 00:20:40,700
can check some of these things we looked

00:20:38,389 --> 00:20:42,559
up a couple different things and perhaps

00:20:40,700 --> 00:20:44,119
testing a different level so rather than

00:20:42,559 --> 00:20:48,409
UI test apps we could do it at sort of

00:20:44,119 --> 00:20:49,999
an IEP or a unit layer and looking into

00:20:48,409 --> 00:20:51,950
new tools and libraries and I was

00:20:49,999 --> 00:20:54,889
working on a project recently and we

00:20:51,950 --> 00:20:56,690
needed to validate an image it was a

00:20:54,889 --> 00:20:59,389
hanks tml canvas element which you can't

00:20:56,690 --> 00:21:01,399
really interact with and so we sort of

00:20:59,389 --> 00:21:03,220
did some research and spiking and we

00:21:01,399 --> 00:21:06,609
found a tool that would allow us to

00:21:03,220 --> 00:21:08,419
compare images and match of pixels and

00:21:06,609 --> 00:21:09,889
honestly you've got sort of visual

00:21:08,419 --> 00:21:11,869
regression tools out there look and

00:21:09,889 --> 00:21:15,529
support you know some of those more

00:21:11,869 --> 00:21:18,139
difficult areas like that and using

00:21:15,529 --> 00:21:20,659
mocks I mean this is quite common a lot

00:21:18,139 --> 00:21:23,629
of tests very much use mocks but in

00:21:20,659 --> 00:21:25,369
particular this is useful where if

00:21:23,629 --> 00:21:27,919
you're interacting with a third party

00:21:25,369 --> 00:21:29,749
and you know you perhaps want to have a

00:21:27,919 --> 00:21:31,340
negative test about what happens if you

00:21:29,749 --> 00:21:33,399
make it calls that certain responder the

00:21:31,340 --> 00:21:36,169
500 you know any handled in that problem

00:21:33,399 --> 00:21:38,739
you need control of that that to do that

00:21:36,169 --> 00:21:41,389
so that's where I'm not comes in and

00:21:38,739 --> 00:21:45,649
tests boys are quite closely connected

00:21:41,389 --> 00:21:49,309
to that perhaps an underutilized tool in

00:21:45,649 --> 00:21:50,509
a test of his arsenal and so test by

00:21:49,309 --> 00:21:52,279
sort of build on mocks and what they

00:21:50,509 --> 00:21:56,059
enable you to do is to interrogate and

00:21:52,279 --> 00:21:57,169
how you mark has been called I'll give

00:21:56,059 --> 00:21:59,210
you an example how we use this in this

00:21:57,169 --> 00:22:00,979
particular project so in those automated

00:21:59,210 --> 00:22:02,659
end-to-end processes that we had which

00:22:00,979 --> 00:22:05,749
we were sort of testing it in a black

00:22:02,659 --> 00:22:07,489
box way we might trigger a process so it

00:22:05,749 --> 00:22:11,450
would need to go and get a file from an

00:22:07,489 --> 00:22:13,940
XML read some some data from it and then

00:22:11,450 --> 00:22:15,020
make an API call with it and because

00:22:13,940 --> 00:22:17,150
that API was

00:22:15,020 --> 00:22:19,340
a third party API with the amount s we

00:22:17,150 --> 00:22:21,800
wouldn't necessarily know whether it had

00:22:19,340 --> 00:22:24,080
been you know called or not so when we

00:22:21,800 --> 00:22:26,180
marked it and then what we did is we had

00:22:24,080 --> 00:22:28,010
another endpoint to that API which would

00:22:26,180 --> 00:22:30,260
give us back the last 10 requests that

00:22:28,010 --> 00:22:32,330
may be made to it and in doing that then

00:22:30,260 --> 00:22:35,600
we were able to ascertain that our test

00:22:32,330 --> 00:22:38,900
had made a call with the data as we were

00:22:35,600 --> 00:22:41,870
expecting and sometimes you need to

00:22:38,900 --> 00:22:44,090
validate as where so perhaps an API as

00:22:41,870 --> 00:22:45,680
database layer and a little bit more

00:22:44,090 --> 00:22:47,240
difficult but perhaps even if you can

00:22:45,680 --> 00:22:48,620
access the locks of the system that

00:22:47,240 --> 00:22:50,860
might give you something that you need

00:22:48,620 --> 00:22:53,300
to validate something that's happened

00:22:50,860 --> 00:22:54,860
and but most important thing I think is

00:22:53,300 --> 00:22:56,990
to consider testability when you refine

00:22:54,860 --> 00:22:59,060
in the ticket so perhaps to near the

00:22:56,990 --> 00:23:00,290
backlog refinement session you know

00:22:59,060 --> 00:23:01,670
think about how we're going to validate

00:23:00,290 --> 00:23:03,740
this work what we actually gonna do

00:23:01,670 --> 00:23:05,000
rather than getting to to sort of the

00:23:03,740 --> 00:23:06,080
day when you're trying to write the test

00:23:05,000 --> 00:23:08,200
for it if you've thought about it up

00:23:06,080 --> 00:23:11,660
front you you might have been able to

00:23:08,200 --> 00:23:13,550
come up with or just thought okay we

00:23:11,660 --> 00:23:15,170
perhaps need another ticket to spike a

00:23:13,550 --> 00:23:20,420
technology that when I enable us to do

00:23:15,170 --> 00:23:22,280
this um so I think our job isn't to

00:23:20,420 --> 00:23:24,800
composed selenium checks it's to enable

00:23:22,280 --> 00:23:26,210
quality and in the new world we perhaps

00:23:24,800 --> 00:23:30,740
need to think differently about how we

00:23:26,210 --> 00:23:32,660
can do that and so that was sort of

00:23:30,740 --> 00:23:35,540
automation how we how we handled that I

00:23:32,660 --> 00:23:37,010
want to talk about the pipeline now so

00:23:35,540 --> 00:23:39,470
we actually use Jenkins for our builds

00:23:37,010 --> 00:23:42,080
obviously other tools available teamcity

00:23:39,470 --> 00:23:47,540
circles CIO etc but we use Jenkins and

00:23:42,080 --> 00:23:48,860
we watched it like hogs and in the stand

00:23:47,540 --> 00:23:50,090
up every morning we would look at the

00:23:48,860 --> 00:23:51,860
Jenkins board and make sure everything

00:23:50,090 --> 00:23:54,020
is green if it wasn't then we'd make

00:23:51,860 --> 00:23:58,580
sure that someone was fixing it and saw

00:23:54,020 --> 00:24:00,980
that there and we would have slack

00:23:58,580 --> 00:24:04,670
notifications if the bill failed and we

00:24:00,980 --> 00:24:06,970
would you know immediately within that

00:24:04,670 --> 00:24:10,490
slack sort of channel make sure someone

00:24:06,970 --> 00:24:11,840
answered fix new and effectively if the

00:24:10,490 --> 00:24:14,990
build was broken it was a stop the line

00:24:11,840 --> 00:24:17,030
process and we were the most important

00:24:14,990 --> 00:24:19,100
thing you do to fix up the old and it

00:24:17,030 --> 00:24:21,700
was a case of drop tools and go and deal

00:24:19,100 --> 00:24:21,700
with it built basically

00:24:21,710 --> 00:24:26,870
and so coming back to our risks in our

00:24:24,770 --> 00:24:28,100
second risky recall was releasing before

00:24:26,870 --> 00:24:30,770
testing was complete and that was our

00:24:28,100 --> 00:24:33,140
other big concern and we brought the

00:24:30,770 --> 00:24:35,570
mechanism for that in the pipeline so

00:24:33,140 --> 00:24:37,909
what we did is we first of all enforced

00:24:35,570 --> 00:24:39,230
strict branch naming within get so when

00:24:37,909 --> 00:24:41,929
a developer creates like a branch of

00:24:39,230 --> 00:24:44,000
code and we enforced what the naming

00:24:41,929 --> 00:24:46,159
convention for that was and the idea was

00:24:44,000 --> 00:24:48,559
that it would be prefixed with the

00:24:46,159 --> 00:24:53,179
Giratina BER so in this example here

00:24:48,559 --> 00:24:54,620
zero two one six login feature anything

00:24:53,179 --> 00:24:56,059
that didn't matter that pattern match

00:24:54,620 --> 00:24:58,580
that pound will be rejected and they

00:24:56,059 --> 00:25:01,010
couldn't command that branch within our

00:24:58,580 --> 00:25:05,750
test then we tagged our test cases with

00:25:01,010 --> 00:25:06,799
that same prefix so accurate c16 and so

00:25:05,750 --> 00:25:08,990
they can go you can see there's an

00:25:06,799 --> 00:25:10,159
example test scenario there so for a

00:25:08,990 --> 00:25:11,840
login so giving him on the login screen

00:25:10,159 --> 00:25:15,320
when ounce credentials and I'm sending

00:25:11,840 --> 00:25:16,700
with the home screen and and then what

00:25:15,320 --> 00:25:18,740
that meant was that when we were

00:25:16,700 --> 00:25:20,720
executing to see the test in CIE the

00:25:18,740 --> 00:25:23,120
pipeline would pick up the branch prefix

00:25:20,720 --> 00:25:25,700
year of two one six and it would call

00:25:23,120 --> 00:25:28,070
that as a tag to our tests and so any

00:25:25,700 --> 00:25:29,690
tests that are tagged with that run even

00:25:28,070 --> 00:25:33,110
no tests were executed and a bill would

00:25:29,690 --> 00:25:34,700
fail and that was it problem solved so

00:25:33,110 --> 00:25:38,440
that's how we deal with it really simple

00:25:34,700 --> 00:25:43,159
really easy to use and really effective

00:25:38,440 --> 00:25:44,419
and flaky tests so there were a couple

00:25:43,159 --> 00:25:46,730
of instances where we have like your

00:25:44,419 --> 00:25:50,270
tests and they are the absolute enemy of

00:25:46,730 --> 00:25:52,610
Sidi from my experience there's a cool

00:25:50,270 --> 00:25:55,159
of common causes and you can have flaky

00:25:52,610 --> 00:25:58,130
selectors in you I rely on other tests

00:25:55,159 --> 00:25:59,750
relying on data and being in a set

00:25:58,130 --> 00:26:02,120
format so come back to that for example

00:25:59,750 --> 00:26:05,419
hard-coded account numbers earlier using

00:26:02,120 --> 00:26:07,220
proper weights different seizing the cio

00:26:05,419 --> 00:26:09,350
environment versus how you'll Rin them

00:26:07,220 --> 00:26:11,360
locally and particularly if you're

00:26:09,350 --> 00:26:13,250
perhaps writing the tests on a different

00:26:11,360 --> 00:26:16,340
operating system so what the CI server

00:26:13,250 --> 00:26:17,720
is and then not to be forgotten the ease

00:26:16,340 --> 00:26:20,090
of configuration errors or books in

00:26:17,720 --> 00:26:21,950
third party to limp and we actually had

00:26:20,090 --> 00:26:23,510
an instance on this where and we were

00:26:21,950 --> 00:26:26,210
running some tests from browser stack

00:26:23,510 --> 00:26:28,730
against IE and for some reason they they

00:26:26,210 --> 00:26:31,159
we just get random failures and couldn't

00:26:28,730 --> 00:26:32,720
work out why and when we turned the

00:26:31,159 --> 00:26:34,010
video recording on and watch back what

00:26:32,720 --> 00:26:36,740
we actually found was that

00:26:34,010 --> 00:26:38,390
an arrow a dialog box was calling upon

00:26:36,740 --> 00:26:41,660
on the operating system in browserstack

00:26:38,390 --> 00:26:44,630
and so we rise to see the browser stack

00:26:41,660 --> 00:26:46,250
and I probably fixed it but so you know

00:26:44,630 --> 00:26:49,040
not necessarily always you're sort of

00:26:46,250 --> 00:26:50,270
solving at the bottom and a couple of

00:26:49,040 --> 00:26:52,790
you know whenever we came across and

00:26:50,270 --> 00:26:55,429
though flaky tests are very notoriously

00:26:52,790 --> 00:26:56,510
difficult to sort of fix because you can

00:26:55,429 --> 00:26:58,070
run it ten times and you won't happen

00:26:56,510 --> 00:27:00,770
yet you're running the third time on CI

00:26:58,070 --> 00:27:02,210
and it will so sort of whenever we came

00:27:00,770 --> 00:27:03,919
across them some things we tried to do

00:27:02,210 --> 00:27:06,350
was added in lots of logging around the

00:27:03,919 --> 00:27:07,640
area and try and turn on video recording

00:27:06,350 --> 00:27:09,830
I mention that's how we found it the

00:27:07,640 --> 00:27:11,240
browser stack issue and I think the most

00:27:09,830 --> 00:27:13,400
important thing is that there is always

00:27:11,240 --> 00:27:15,080
a reason for it there it seems that was

00:27:13,400 --> 00:27:17,630
not that just you know files on reason

00:27:15,080 --> 00:27:19,010
but there is always a reason and and if

00:27:17,630 --> 00:27:21,169
you can work out what the pattern is

00:27:19,010 --> 00:27:22,970
you're a good sort of portion of the way

00:27:21,169 --> 00:27:24,890
to discovering what the actual problem

00:27:22,970 --> 00:27:26,150
is so you know whether that be the time

00:27:24,890 --> 00:27:29,059
of the execution perhaps something's

00:27:26,150 --> 00:27:30,260
running on the server and what tests run

00:27:29,059 --> 00:27:32,120
immediately prior perhaps they do

00:27:30,260 --> 00:27:34,700
something to the data or the system and

00:27:32,120 --> 00:27:36,620
put it in a state that's an adorable and

00:27:34,700 --> 00:27:38,660
then you know things like your brows ECI

00:27:36,620 --> 00:27:39,710
server we state of your data and there

00:27:38,660 --> 00:27:41,390
is always a pattern and if you can find

00:27:39,710 --> 00:27:44,840
out well that pennies you could you know

00:27:41,390 --> 00:27:47,450
why it's a result in so to summarize to

00:27:44,840 --> 00:27:48,620
see our bills it would fail if we if we

00:27:47,450 --> 00:27:50,929
had code that wasn't accompanied by

00:27:48,620 --> 00:27:53,000
tests and we had lots of alerts and

00:27:50,929 --> 00:27:54,500
visibility of when things went wrong and

00:27:53,000 --> 00:27:56,000
made sure that it was visible who was

00:27:54,500 --> 00:27:58,190
fixing it and you know help them out

00:27:56,000 --> 00:28:00,260
they needed it and we do the daily

00:27:58,190 --> 00:28:04,640
standard checks we addressed flaky tests

00:28:00,260 --> 00:28:06,049
and we were really sort of focused on

00:28:04,640 --> 00:28:07,490
the performance of the pipeline we

00:28:06,049 --> 00:28:09,350
wanted to clear error ISM we wanted a

00:28:07,490 --> 00:28:12,830
good mean time to remediation

00:28:09,350 --> 00:28:14,059
and myself my colleague got quite

00:28:12,830 --> 00:28:16,669
heavily involved with right Jenkins

00:28:14,059 --> 00:28:18,380
files as well and sort of a well at some

00:28:16,669 --> 00:28:19,790
part of it before Wes or QA doesn't get

00:28:18,380 --> 00:28:21,919
involved with the build sort

00:28:19,790 --> 00:28:23,120
configuration and but I think it's a

00:28:21,919 --> 00:28:25,460
really important thing to do because it

00:28:23,120 --> 00:28:27,020
sort of empowers you and you sort of

00:28:25,460 --> 00:28:29,570
learn the art of why he's possible and

00:28:27,020 --> 00:28:31,850
so for example the the convention that

00:28:29,570 --> 00:28:33,290
we had to prevent the untested code

00:28:31,850 --> 00:28:34,490
going through we were able to

00:28:33,290 --> 00:28:35,809
contributing the solution to that

00:28:34,490 --> 00:28:39,169
because we had a good understanding of

00:28:35,809 --> 00:28:41,120
how it works and we quite often optimize

00:28:39,169 --> 00:28:42,260
long-running tests as well and sort of

00:28:41,120 --> 00:28:44,210
every week or so we'd have a look at the

00:28:42,260 --> 00:28:46,549
test report and see which top ten tests

00:28:44,210 --> 00:28:47,660
were running the longest and if we could

00:28:46,549 --> 00:28:50,300
we try and you know read

00:28:47,660 --> 00:28:52,430
really factor them and try and get them

00:28:50,300 --> 00:28:55,010
running quicker and because ultimately

00:28:52,430 --> 00:28:56,510
you know if you've got lots of bills and

00:28:55,010 --> 00:28:58,130
all taking a long time to run you you

00:28:56,510 --> 00:28:59,270
can get in quite a mess so if you've got

00:28:58,130 --> 00:29:01,970
short quick bills that's really

00:28:59,270 --> 00:29:04,030
important and what was quite interesting

00:29:01,970 --> 00:29:06,520
was that we moved from a fear of failure

00:29:04,030 --> 00:29:09,050
to sort of push it and see if it builds

00:29:06,520 --> 00:29:10,880
mentality I remember when the devil AIDS

00:29:09,050 --> 00:29:13,190
committed the first push that was gonna

00:29:10,880 --> 00:29:15,800
be going through the pipeline to live

00:29:13,190 --> 00:29:17,500
and there was almost all why you're

00:29:15,800 --> 00:29:19,340
doing this now this is quite scary

00:29:17,500 --> 00:29:22,930
and everyone sort of huddled around

00:29:19,340 --> 00:29:25,250
watching him commit the code and but as

00:29:22,930 --> 00:29:27,290
time moved on we really moved away from

00:29:25,250 --> 00:29:28,670
that and - we had so much trust in the

00:29:27,290 --> 00:29:29,840
pipeline it was guys at well just push

00:29:28,670 --> 00:29:33,560
it and see if it builds if it doesn't we

00:29:29,840 --> 00:29:38,030
can fix it it's amazing how quickly that

00:29:33,560 --> 00:29:39,320
that sort confidence comes around and so

00:29:38,030 --> 00:29:40,880
probably the last section once talked

00:29:39,320 --> 00:29:42,080
about briefly is discipline and because

00:29:40,880 --> 00:29:47,060
I think it's really important a project

00:29:42,080 --> 00:29:48,650
like this we adhered to stand-ups on

00:29:47,060 --> 00:29:50,270
time every day they were always short

00:29:48,650 --> 00:29:52,100
and sweet it was exactly the same time

00:29:50,270 --> 00:29:53,990
the first thing we did was cover the

00:29:52,100 --> 00:29:55,760
Jenkins dashboards and then we'd

00:29:53,990 --> 00:29:57,650
individually given update on what we did

00:29:55,760 --> 00:29:59,960
yesterday what we're doing today and if

00:29:57,650 --> 00:30:01,910
there were any blockers at all each

00:29:59,960 --> 00:30:03,440
person took less than 30 seconds I've

00:30:01,910 --> 00:30:05,720
been on projects where each person takes

00:30:03,440 --> 00:30:08,300
five minutes and you know you've all

00:30:05,720 --> 00:30:09,800
importantly and we are these differently

00:30:08,300 --> 00:30:11,480
- a definition of ready and a definition

00:30:09,800 --> 00:30:12,590
have done and you couldn't ring a ticket

00:30:11,480 --> 00:30:14,300
into the sprint if you didn't meet the

00:30:12,590 --> 00:30:15,710
definition of ready you couldn't close a

00:30:14,300 --> 00:30:18,740
ticket until it was in live which was

00:30:15,710 --> 00:30:20,210
our definition of done we would swamp

00:30:18,740 --> 00:30:21,200
issues over the line so particularly

00:30:20,210 --> 00:30:22,400
towards the end of a sprint where you

00:30:21,200 --> 00:30:25,010
trying to close off those tickets and

00:30:22,400 --> 00:30:26,210
get them done and we help each other out

00:30:25,010 --> 00:30:28,730
rather than going and picking up a new

00:30:26,210 --> 00:30:31,700
piece of work and we did dear to all the

00:30:28,730 --> 00:30:33,950
scrum ceremonies and we did three amigos

00:30:31,700 --> 00:30:35,630
and every ticket the product owner was

00:30:33,950 --> 00:30:37,220
very heavily involved and also input

00:30:35,630 --> 00:30:40,310
quite heavily into the BDD scenarios

00:30:37,220 --> 00:30:42,710
which was great we did backlog

00:30:40,310 --> 00:30:43,940
refinement and it used to be two hours a

00:30:42,710 --> 00:30:45,590
week so we'd have a wood book out so our

00:30:43,940 --> 00:30:49,130
session everyone complained of had pain

00:30:45,590 --> 00:30:50,600
and everyone croaked oh it was really

00:30:49,130 --> 00:30:52,280
important because everyone estimated and

00:30:50,600 --> 00:30:56,090
we also you know we're able to really

00:30:52,280 --> 00:30:57,440
refine the tickets and an a mantra that

00:30:56,090 --> 00:30:58,790
we took in was if you don't know how

00:30:57,440 --> 00:31:00,200
you'll test something you've no right to

00:30:58,790 --> 00:31:03,799
start developing with it

00:31:00,200 --> 00:31:08,750
which is something I learned from a

00:31:03,799 --> 00:31:11,540
really good developer woman and we we

00:31:08,750 --> 00:31:12,320
demoed everything as well and we thought

00:31:11,540 --> 00:31:14,990
about it throughout that spring what

00:31:12,320 --> 00:31:16,160
we're gonna demo we actually rotate the

00:31:14,990 --> 00:31:18,320
scrum master and I'm one of the

00:31:16,160 --> 00:31:20,120
iterations it looked like we wouldn't

00:31:18,320 --> 00:31:22,610
have anything to demo when I was a

00:31:20,120 --> 00:31:24,049
schoolmaster so just because of the

00:31:22,610 --> 00:31:26,330
nature of the work that we were doing it

00:31:24,049 --> 00:31:27,980
wasn't particularly interesting so I

00:31:26,330 --> 00:31:29,660
went and spoke to the stakeholders and I

00:31:27,980 --> 00:31:31,160
said look guys we work we're doing

00:31:29,660 --> 00:31:34,220
really doesn't lend itself to much of a

00:31:31,160 --> 00:31:35,690
demo whose time around and I will find

00:31:34,220 --> 00:31:37,370
that it will look don't worry you one of

00:31:35,690 --> 00:31:39,679
the few teams that does demo regularly

00:31:37,370 --> 00:31:42,230
like on every sprint so just missing one

00:31:39,679 --> 00:31:43,669
isn't really much of a problem so I said

00:31:42,230 --> 00:31:44,540
okay great so I'm at the team and said

00:31:43,669 --> 00:31:46,429
look guys I've had a chat with

00:31:44,540 --> 00:31:47,720
stakeholders don't worry about a demo

00:31:46,429 --> 00:31:48,410
Nestor said he's fine you know if we

00:31:47,720 --> 00:31:50,630
miss this one

00:31:48,410 --> 00:31:53,059
not a problem at all and but the team

00:31:50,630 --> 00:31:55,309
what the great was refused and said well

00:31:53,059 --> 00:31:57,760
no we're gonna do the demo because you

00:31:55,309 --> 00:32:00,320
know that's that's that's what we do and

00:31:57,760 --> 00:32:02,870
we didn't want to get ourselves into

00:32:00,320 --> 00:32:04,280
solve you know this a pattern and that

00:32:02,870 --> 00:32:06,110
standard slip which I thought was great

00:32:04,280 --> 00:32:07,910
as all showed a little bit about the

00:32:06,110 --> 00:32:11,690
mentality of and the discipline of the

00:32:07,910 --> 00:32:13,160
Timur all the retrospectives had actions

00:32:11,690 --> 00:32:14,900
and we followed them up and verified the

00:32:13,160 --> 00:32:17,480
mean that we reaction them in the

00:32:14,900 --> 00:32:19,640
following metro and when we're quite

00:32:17,480 --> 00:32:21,980
strict on the the velocity is well on

00:32:19,640 --> 00:32:23,299
our points and so still it's all to

00:32:21,980 --> 00:32:25,309
start the project was talking about 40

00:32:23,299 --> 00:32:27,260
points in and we got better estimating

00:32:25,309 --> 00:32:29,240
and better you know understanding the

00:32:27,260 --> 00:32:33,320
technology in the stack so sorts all's

00:32:29,240 --> 00:32:37,610
the peak we're here 20 points which was

00:32:33,320 --> 00:32:40,309
great so all those things we did delete

00:32:37,610 --> 00:32:42,169
work so all the discipline and the

00:32:40,309 --> 00:32:44,419
automation and and that you know that

00:32:42,169 --> 00:32:47,900
the rigid pipeline and the really you

00:32:44,419 --> 00:32:50,440
know keeping an eye on it and this would

00:32:47,900 --> 00:32:53,780
be a very odd sort commuting work woman

00:32:50,440 --> 00:32:58,070
so and we actually started out using

00:32:53,780 --> 00:33:00,020
feature toggles so this was sort of to

00:32:58,070 --> 00:33:01,429
satisfy the business really and the

00:33:00,020 --> 00:33:02,809
stakeholders and we said well look what

00:33:01,429 --> 00:33:04,040
we'll do when we when we create a new

00:33:02,809 --> 00:33:06,980
feature will hide it behind a few to

00:33:04,040 --> 00:33:08,419
toggle any concern any on and that's

00:33:06,980 --> 00:33:09,410
it's a lot of maintenance because what

00:33:08,419 --> 00:33:11,000
you're introducing is lots of these

00:33:09,410 --> 00:33:12,350
statements you need twice as many tests

00:33:11,000 --> 00:33:13,639
because you need and if you know the

00:33:12,350 --> 00:33:15,259
toggles on if the toggles off

00:33:13,639 --> 00:33:18,049
and then you have to remove it otherwise

00:33:15,259 --> 00:33:19,399
you end up with technical debt and over

00:33:18,049 --> 00:33:21,049
time as we build confidence in the

00:33:19,399 --> 00:33:22,489
business became comfortable with what we

00:33:21,049 --> 00:33:24,679
would do and we're able to cut although

00:33:22,489 --> 00:33:26,839
and we would just go into straits alive

00:33:24,679 --> 00:33:30,619
and without sort of hiding stuff beyond

00:33:26,839 --> 00:33:32,089
toggle and urgently features we were

00:33:30,619 --> 00:33:33,129
able to get sort of nought to done in a

00:33:32,089 --> 00:33:35,359
matter of hours

00:33:33,129 --> 00:33:36,889
so the proper tone encountered spring

00:33:35,359 --> 00:33:39,950
one morning and follow minute release

00:33:36,889 --> 00:33:40,909
the previous day so some of it come

00:33:39,950 --> 00:33:42,349
through and should all that you know

00:33:40,909 --> 00:33:43,999
seen that new feature that's great and

00:33:42,349 --> 00:33:45,440
anything is there's the summer house

00:33:43,999 --> 00:33:47,809
that we forgot that we need to do as

00:33:45,440 --> 00:33:50,179
well and is there any chance we can do

00:33:47,809 --> 00:33:52,849
it bring it into the sprint and that was

00:33:50,179 --> 00:33:54,109
in the stand up by lunchtime people were

00:33:52,849 --> 00:33:55,909
using the new feature in life

00:33:54,109 --> 00:33:58,070
so it really enabled us to turn around

00:33:55,909 --> 00:34:00,950
and start you know getting things out

00:33:58,070 --> 00:34:02,389
the door much more quickly and the team

00:34:00,950 --> 00:34:03,679
was really heavily motivated it's

00:34:02,389 --> 00:34:05,209
probably one of the most motivated I've

00:34:03,679 --> 00:34:06,289
been in my career and I think that the

00:34:05,209 --> 00:34:09,500
other guys aren't seen would agree with

00:34:06,289 --> 00:34:11,629
that as well and the client carried out

00:34:09,500 --> 00:34:13,909
a dual report which is a third party

00:34:11,629 --> 00:34:16,849
that can come in and assess or agile

00:34:13,909 --> 00:34:18,289
maturity in terms of DevOps so it's a

00:34:16,849 --> 00:34:19,970
DevOps research and assessment report

00:34:18,289 --> 00:34:21,529
and we were one of the high scenes in

00:34:19,970 --> 00:34:22,759
the organization and we were set as a

00:34:21,529 --> 00:34:26,240
bit of a benchmark really for the seems

00:34:22,759 --> 00:34:28,329
to follow and so I've put here that we

00:34:26,240 --> 00:34:30,500
averaged around over 82 points a week

00:34:28,329 --> 00:34:32,329
and talking someone up works on a

00:34:30,500 --> 00:34:35,929
project and we believe the figures

00:34:32,329 --> 00:34:38,149
actually close to 100 but I'm gonna be

00:34:35,929 --> 00:34:41,179
really conservative and not 20% off and

00:34:38,149 --> 00:34:43,519
so with that in mind over an 18-month

00:34:41,179 --> 00:34:46,940
period that means that we need 4,500

00:34:43,519 --> 00:34:49,849
deployments which is you know quite

00:34:46,940 --> 00:34:52,460
bigger really we had zero major errors

00:34:49,849 --> 00:34:54,950
and personally I don't think we had

00:34:52,460 --> 00:34:56,809
minor errors we had one error where

00:34:54,950 --> 00:34:59,960
there was a guy in America who was using

00:34:56,809 --> 00:35:01,789
a version of Internet Explorer and a

00:34:59,960 --> 00:35:05,269
specific really old version of Windows

00:35:01,789 --> 00:35:06,380
who had an issue and ultimately when

00:35:05,269 --> 00:35:08,150
he's managed to find out what he was

00:35:06,380 --> 00:35:09,259
using he he was given a new machine in

00:35:08,150 --> 00:35:11,119
me because there was all sorts of

00:35:09,259 --> 00:35:12,380
security risks of patches so we get out

00:35:11,119 --> 00:35:15,950
you need to do anything with that one

00:35:12,380 --> 00:35:17,150
and and another another issue that

00:35:15,950 --> 00:35:20,119
happened was when you were doing a

00:35:17,150 --> 00:35:21,920
drag-and-drop on the web app and in a

00:35:20,119 --> 00:35:24,619
specific version of ie it highlighted

00:35:21,920 --> 00:35:27,510
the text so they was they were the sort

00:35:24,619 --> 00:35:29,580
of box that we would get we

00:35:27,510 --> 00:35:31,260
need to do one roll back I have all

00:35:29,580 --> 00:35:33,420
those deployments and that was because

00:35:31,260 --> 00:35:36,380
someone had committed an incorrect

00:35:33,420 --> 00:35:39,600
property in the production properties

00:35:36,380 --> 00:35:41,850
obviously because of the nature of that

00:35:39,600 --> 00:35:43,320
it's a property law if that wasn't in

00:35:41,850 --> 00:35:45,030
any of the lower environments the only

00:35:43,320 --> 00:35:47,100
way we would have fan would have been in

00:35:45,030 --> 00:35:48,570
northern fortunately and it was caught

00:35:47,100 --> 00:35:50,880
straight away because on the back of the

00:35:48,570 --> 00:35:52,320
deployment heartbeat check ran it picked

00:35:50,880 --> 00:35:55,110
it up and we rolled it back immediately

00:35:52,320 --> 00:35:57,300
so there was no doubt on but if you do

00:35:55,110 --> 00:36:02,810
count that one and that as a bit of a

00:35:57,300 --> 00:36:05,610
failure it's a success rate of 99.9999%

00:36:02,810 --> 00:36:09,840
which i think is pretty good but then I

00:36:05,610 --> 00:36:11,220
would set up and and I think that

00:36:09,840 --> 00:36:14,010
concludes everything I had to say really

00:36:11,220 --> 00:36:16,050
and there is so much that wanting to get

00:36:14,010 --> 00:36:18,360
in that I couldn't because of conscious

00:36:16,050 --> 00:36:20,640
of time I wanted to talk about you know

00:36:18,360 --> 00:36:21,990
how we won the business friend what the

00:36:20,640 --> 00:36:23,940
pipelines look like how we do

00:36:21,990 --> 00:36:26,280
performance tests the import so be

00:36:23,940 --> 00:36:28,980
honest I've been here all week and I'm

00:36:26,280 --> 00:36:32,250
sure some of you got work today and so

00:36:28,980 --> 00:36:35,190
just want to say thank you Tootie's

00:36:32,250 --> 00:36:37,650
anthony am at four percent up and yeah

00:36:35,190 --> 00:36:38,820
and see notes you might something you so

00:36:37,650 --> 00:36:39,030
yeah i've got some questions here for

00:36:38,820 --> 00:36:41,400
you

00:36:39,030 --> 00:36:42,960
first one from en we had a packed

00:36:41,400 --> 00:36:45,360
initiative which soars really wants to

00:36:42,960 --> 00:36:47,160
POC what's the way in a lot of the

00:36:45,360 --> 00:36:48,930
pushback was based around reluctance to

00:36:47,160 --> 00:36:52,140
add to or remove the existing automation

00:36:48,930 --> 00:36:54,300
processes especially wrt contract

00:36:52,140 --> 00:36:57,360
validation was swagger now i'm using

00:36:54,300 --> 00:36:59,430
through open api yeah and so we i mean

00:36:57,360 --> 00:37:00,810
we we were quite lucky because this was

00:36:59,430 --> 00:37:05,250
quite at the beginning the project for

00:37:00,810 --> 00:37:07,140
us and bought it we sewed the back then

00:37:05,250 --> 00:37:09,300
so we started off with swagger but he

00:37:07,140 --> 00:37:11,130
didn't quite to sort of what pacts did

00:37:09,300 --> 00:37:12,750
i'll be honest i haven't haven't looked

00:37:11,130 --> 00:37:16,290
at is that Swagger's doing at the moment

00:37:12,750 --> 00:37:18,660
and the open eyes have put and I mean we

00:37:16,290 --> 00:37:21,360
quite often did a lot of spikes on stuff

00:37:18,660 --> 00:37:22,800
and for example went you know we would

00:37:21,360 --> 00:37:24,780
whenever we wanted to implement

00:37:22,800 --> 00:37:26,910
something like this we would look at a

00:37:24,780 --> 00:37:28,470
couple of different tools as a spine

00:37:26,910 --> 00:37:31,050
ticket and figure out which one will be

00:37:28,470 --> 00:37:33,000
best for us and I think in terms of if

00:37:31,050 --> 00:37:35,190
it's a question of you know do you want

00:37:33,000 --> 00:37:36,030
to use a CD framework or not ain't given

00:37:35,190 --> 00:37:39,450
that you've already got a lot of

00:37:36,030 --> 00:37:41,250
automation I think the benefits of it do

00:37:39,450 --> 00:37:45,480
massively out why

00:37:41,250 --> 00:37:47,490
not using it and because I think you get

00:37:45,480 --> 00:37:49,680
a lot from CDC that perhaps the other

00:37:47,490 --> 00:37:52,050
tools don't give you it's a different

00:37:49,680 --> 00:37:53,790
level of test is what I would say and it

00:37:52,050 --> 00:37:56,580
gives you a different kind of confidence

00:37:53,790 --> 00:37:58,860
and then rather than just you know

00:37:56,580 --> 00:38:01,170
having perhaps lots of vodka a test but

00:37:58,860 --> 00:38:02,430
yeah I think in terms of like you say it

00:38:01,170 --> 00:38:04,410
sounds like you're sort of looking a

00:38:02,430 --> 00:38:08,250
couple of different tools I think the

00:38:04,410 --> 00:38:09,630
only thing you do there is a me do a spy

00:38:08,250 --> 00:38:11,820
can approve the concept on a couple of

00:38:09,630 --> 00:38:14,160
different ones and then obviously every

00:38:11,820 --> 00:38:15,540
team's different you know we were

00:38:14,160 --> 00:38:17,040
advised to use a couple of tools and we

00:38:15,540 --> 00:38:19,140
try to use them it just didn't work for

00:38:17,040 --> 00:38:21,570
us and with what we were doing in our

00:38:19,140 --> 00:38:23,040
workflow and I think yet doing a spy

00:38:21,570 --> 00:38:24,120
it's just way forward and seeing what

00:38:23,040 --> 00:38:26,340
result to get out of the back of it and

00:38:24,120 --> 00:38:30,510
then sort of demo anything need the

00:38:26,340 --> 00:38:32,220
retro and seen what the team very well

00:38:30,510 --> 00:38:34,290
bring thank you very much some next

00:38:32,220 --> 00:38:36,360
question is from John frizzy how did you

00:38:34,290 --> 00:38:38,430
find the costing model with browserstack

00:38:36,360 --> 00:38:41,820
and how do you link your tests into

00:38:38,430 --> 00:38:43,530
browserstack and so in terms of costing

00:38:41,820 --> 00:38:46,650
we actually only we actually went with

00:38:43,530 --> 00:38:48,300
one of the lower licenses are currently

00:38:46,650 --> 00:38:53,430
which one we went with now but it wasn't

00:38:48,300 --> 00:38:55,250
it we saw or is quite expensive and so I

00:38:53,430 --> 00:38:57,480
think we only had like two users and

00:38:55,250 --> 00:39:01,560
from memory I think you can sort of run

00:38:57,480 --> 00:39:04,740
two or three threads with each one so

00:39:01,560 --> 00:39:07,890
yeah we were sort of sort pressured into

00:39:04,740 --> 00:39:09,690
keeping the costs down on it really but

00:39:07,890 --> 00:39:13,340
we sort of found that it worked for us

00:39:09,690 --> 00:39:15,420
in terms of integrating it

00:39:13,340 --> 00:39:17,310
we sort of manage to get it working

00:39:15,420 --> 00:39:18,990
quite well and we got it working lisa

00:39:17,310 --> 00:39:20,640
rinna a are currently whether there was

00:39:18,990 --> 00:39:23,130
anything specific in serenity or whether

00:39:20,640 --> 00:39:24,930
we just sort of had to use the SDK and

00:39:23,130 --> 00:39:26,820
get it working but again it was another

00:39:24,930 --> 00:39:28,290
thing that we we originally we didn't

00:39:26,820 --> 00:39:31,290
use browser stack to start we knew we

00:39:28,290 --> 00:39:33,450
wanted to do cross browser and so we did

00:39:31,290 --> 00:39:38,610
a spike and implemented it as part of

00:39:33,450 --> 00:39:39,840
spike just within a sprint and just you

00:39:38,610 --> 00:39:42,360
know ultimately the goal of this fight

00:39:39,840 --> 00:39:45,330
was to patent not a spiking is true for

00:39:42,360 --> 00:39:47,190
me that's more of a an exploratory

00:39:45,330 --> 00:39:50,160
finding out thing whereas we actually

00:39:47,190 --> 00:39:51,330
implemented it and but quite often we

00:39:50,160 --> 00:39:53,970
did things like that you know when we do

00:39:51,330 --> 00:39:55,099
performance testing we we just create a

00:39:53,970 --> 00:39:57,739
ticket to

00:39:55,099 --> 00:39:59,479
just build a foundation just get the

00:39:57,739 --> 00:40:02,269
test running with this platform and then

00:39:59,479 --> 00:40:04,369
just building it from there but yeah I

00:40:02,269 --> 00:40:05,930
think we'd starting to creak as we start

00:40:04,369 --> 00:40:10,160
to scale and grow because we wanting to

00:40:05,930 --> 00:40:12,049
run more and more threads and we we saw

00:40:10,160 --> 00:40:14,630
I think towards the end we were pushing

00:40:12,049 --> 00:40:15,710
for more licenses but yeah we were

00:40:14,630 --> 00:40:18,739
getting pushback because I think it's

00:40:15,710 --> 00:40:21,289
quite an expensive tool great thank you

00:40:18,739 --> 00:40:23,720
got a question from Joe let did you find

00:40:21,289 --> 00:40:25,609
a way to automate those validations ie

00:40:23,720 --> 00:40:27,950
if it to get is ready to bring in but

00:40:25,609 --> 00:40:35,619
can't move into progress or just trust a

00:40:27,950 --> 00:40:37,579
team to not do bad things so yeah so

00:40:35,619 --> 00:40:40,849
obviously there's there's an element of

00:40:37,579 --> 00:40:42,829
to us of trust sorry can I just reply is

00:40:40,849 --> 00:40:46,779
that are we talking about bringing it in

00:40:42,829 --> 00:40:46,779
that doesn't meet definition of ready

00:40:46,809 --> 00:40:53,569
it's time question so we've got limited

00:40:49,309 --> 00:40:57,739
information can you answer that please

00:40:53,569 --> 00:40:59,599
job yes okay yeah so we were just quite

00:40:57,739 --> 00:41:01,190
strict on it so in terms of in terms of

00:40:59,599 --> 00:41:03,289
what our definition already was that oh

00:41:01,190 --> 00:41:06,319
perhaps if I expand on what that meant

00:41:03,289 --> 00:41:09,680
so we had things like you can bring into

00:41:06,319 --> 00:41:11,029
the sprint unless you know any

00:41:09,680 --> 00:41:12,410
supporting tickets were done so I

00:41:11,029 --> 00:41:13,430
mentioned earlier about how we to think

00:41:12,410 --> 00:41:16,039
about how we're going to test something

00:41:13,430 --> 00:41:18,950
and if when we were testing we said

00:41:16,039 --> 00:41:21,619
actually we don't know how we're gonna I

00:41:18,950 --> 00:41:23,809
don't know reads an f2 diet from an FTP

00:41:21,619 --> 00:41:25,729
server or something so we'd say okay

00:41:23,809 --> 00:41:26,839
well we need to do to do a spike to plan

00:41:25,729 --> 00:41:28,579
how we're gonna do I am the test

00:41:26,839 --> 00:41:30,140
framework so we would have a dependency

00:41:28,579 --> 00:41:32,660
so we'd say for example not in the

00:41:30,140 --> 00:41:34,219
dependency it can be done sorry the TV

00:41:32,660 --> 00:41:36,890
can't be doing - a little dependency to

00:41:34,219 --> 00:41:39,849
turn there has to be verifiable

00:41:36,890 --> 00:41:42,559
acceptance criteria and we had

00:41:39,849 --> 00:41:46,519
wireframes for all our UI stuff that was

00:41:42,559 --> 00:41:47,960
done by a UX guy so it was it was almost

00:41:46,519 --> 00:41:49,519
it was quite a straightforward checklist

00:41:47,960 --> 00:41:52,460
of things that has to be there before we

00:41:49,519 --> 00:41:53,660
were bringing to the sprint and and in

00:41:52,460 --> 00:41:55,940
terms of bringing the sprint we would

00:41:53,660 --> 00:41:59,539
then discuss that in in the planning

00:41:55,940 --> 00:42:00,920
session whoever's turn was scrum master

00:41:59,539 --> 00:42:04,400
would then bring any further tickets

00:42:00,920 --> 00:42:05,539
into the spring and yeah I mean we were

00:42:04,400 --> 00:42:07,519
quite strict with it there will probably

00:42:05,539 --> 00:42:09,050
one or two instances if I'm honest where

00:42:07,519 --> 00:42:10,640
we saw said well

00:42:09,050 --> 00:42:12,890
yeah we do need to do this in the next

00:42:10,640 --> 00:42:15,740
two weeks and we will get that thing

00:42:12,890 --> 00:42:18,290
tomorrow that's blocking us so sometimes

00:42:15,740 --> 00:42:20,720
we you know we tend to maybe bend their

00:42:18,290 --> 00:42:22,550
rules but if it just made sense to and

00:42:20,720 --> 00:42:28,910
but as much as possible we were strict

00:42:22,550 --> 00:42:30,860
with it got a question here from roofie

00:42:28,910 --> 00:42:33,080
did you get any resistance from business

00:42:30,860 --> 00:42:36,620
when cutting down tests to turn around

00:42:33,080 --> 00:42:38,180
bills quicker um no because I don't

00:42:36,620 --> 00:42:41,660
think we ever could I don't think we

00:42:38,180 --> 00:42:44,360
ever cut down the tests and in terms of

00:42:41,660 --> 00:42:47,000
cutting down so we we perhaps refactored

00:42:44,360 --> 00:42:48,830
them to make them run quicker we perhaps

00:42:47,000 --> 00:42:52,520
very for validating against different

00:42:48,830 --> 00:42:54,380
things but no artists in terms of the

00:42:52,520 --> 00:42:57,710
the actual numbers of the tests I just

00:42:54,380 --> 00:43:00,950
grew and grew at a time so yeah we were

00:42:57,710 --> 00:43:02,600
it's a balancing act obviously but we we

00:43:00,950 --> 00:43:06,020
obviously wanted as quick a build time

00:43:02,600 --> 00:43:07,130
as possible but obviously you know you

00:43:06,020 --> 00:43:09,230
have to you have to cover everything

00:43:07,130 --> 00:43:10,310
because if you don't then Ukraine gaps

00:43:09,230 --> 00:43:12,140
in your regression and it's going to be

00:43:10,310 --> 00:43:13,640
going on without it so yes I don't I

00:43:12,140 --> 00:43:15,530
don't think we ever cut down the checks

00:43:13,640 --> 00:43:17,540
that we were doing we were never added

00:43:15,530 --> 00:43:22,420
to them but perhaps we did them in a

00:43:17,540 --> 00:43:25,190
more performant way I would say amazing

00:43:22,420 --> 00:43:27,530
question from John feizi did you roll

00:43:25,190 --> 00:43:29,750
back billboards or only move forwards

00:43:27,530 --> 00:43:31,040
that is four failed builds you can also

00:43:29,750 --> 00:43:34,520
add a capture of a screen shot and

00:43:31,040 --> 00:43:36,890
failure and yeah so we we fixed for

00:43:34,520 --> 00:43:38,420
words we didn't sort of roll back so the

00:43:36,890 --> 00:43:40,850
the roll back I mentioned obviously we

00:43:38,420 --> 00:43:42,410
deployed something to live that sort of

00:43:40,850 --> 00:43:43,940
broke so we immediately roll back to the

00:43:42,410 --> 00:43:46,390
previous version for a particular

00:43:43,940 --> 00:43:49,730
service but yeah whenever a build broke

00:43:46,390 --> 00:43:52,280
we would commit on top with with fresh

00:43:49,730 --> 00:43:53,450
and working Co so fixing forward really

00:43:52,280 --> 00:43:55,190
thing without getting into any sort

00:43:53,450 --> 00:43:58,460
pickle we use the cherry picking commit

00:43:55,190 --> 00:43:59,990
or anything my hands got a question I

00:43:58,460 --> 00:44:04,240
see your hands raise the you understand

00:43:59,990 --> 00:44:04,240
I mean I can ask your questions it's on

00:44:08,460 --> 00:44:14,320
yeah hi

00:44:11,020 --> 00:44:17,890
I did actually include it in the in the

00:44:14,320 --> 00:44:22,330
chat line as well we've been working

00:44:17,890 --> 00:44:24,460
through a similar process of Devyn test

00:44:22,330 --> 00:44:27,430
we've been using CLO ACD we're not

00:44:24,460 --> 00:44:30,550
actually using absolutely using serenity

00:44:27,430 --> 00:44:31,990
we're not actually using CI CD but more

00:44:30,550 --> 00:44:34,030
and more when people talk about doing

00:44:31,990 --> 00:44:36,610
exploratory testing in this process it

00:44:34,030 --> 00:44:39,040
sounds a bit weird do you think there's

00:44:36,610 --> 00:44:40,570
still a place for it or is the new way

00:44:39,040 --> 00:44:43,240
of looking at testing just kind of my

00:44:40,570 --> 00:44:45,640
way of thinking makes it feel a little

00:44:43,240 --> 00:44:47,110
bit redundant and a bit well why do you

00:44:45,640 --> 00:44:48,310
want to spend time doing that when

00:44:47,110 --> 00:44:49,990
you're actually there and down your

00:44:48,310 --> 00:44:52,870
requirements and delivering exactly

00:44:49,990 --> 00:44:55,720
what's being asked for it has now that's

00:44:52,870 --> 00:44:57,280
a really good question and yeah so in in

00:44:55,720 --> 00:44:59,380
terms of the exploratory sort of thing

00:44:57,280 --> 00:45:02,710
and give you a bit of an insight and how

00:44:59,380 --> 00:45:04,600
we work so when when we sort of started

00:45:02,710 --> 00:45:06,370
an ode to the kick developer generally

00:45:04,600 --> 00:45:09,310
pick it up we might have subtasks under

00:45:06,370 --> 00:45:11,230
it for development and testing and on

00:45:09,310 --> 00:45:13,810
how you work what we would do is we

00:45:11,230 --> 00:45:16,210
would immediately start writing the

00:45:13,810 --> 00:45:18,640
automated checks for it even though we

00:45:16,210 --> 00:45:19,990
didn't have any code to work with it so

00:45:18,640 --> 00:45:21,010
for example if you got in a new screen

00:45:19,990 --> 00:45:22,180
you think well that's going to be really

00:45:21,010 --> 00:45:23,440
difficult because how can you write a

00:45:22,180 --> 00:45:27,400
test against the screen that doesn't

00:45:23,440 --> 00:45:29,710
exist yet but obviously from the BDD in

00:45:27,400 --> 00:45:32,020
the Gherkin we could start to put

00:45:29,710 --> 00:45:33,580
placeholders in and we could guess

00:45:32,020 --> 00:45:35,200
someone's letters and actually we

00:45:33,580 --> 00:45:38,410
weren't always right but you could do a

00:45:35,200 --> 00:45:39,670
lot more than you think and as we were

00:45:38,410 --> 00:45:42,520
talking with the developers all the time

00:45:39,670 --> 00:45:44,680
as soon as they had you know something

00:45:42,520 --> 00:45:46,600
in place we were pulling that down and

00:45:44,680 --> 00:45:49,390
testing that home and I think during the

00:45:46,600 --> 00:45:50,770
process of writing our tests and because

00:45:49,390 --> 00:45:52,210
we'd sort of done that build from where

00:45:50,770 --> 00:45:53,230
we'd been getting the selectors and

00:45:52,210 --> 00:45:55,870
we've done a lot of the groundwork

00:45:53,230 --> 00:45:58,060
already when the developer then gave us

00:45:55,870 --> 00:45:59,470
something the changes that we needed to

00:45:58,060 --> 00:46:01,900
make to the actual automated checks were

00:45:59,470 --> 00:46:04,210
quite minimal and what that meant was

00:46:01,900 --> 00:46:06,040
that at that point then we would then do

00:46:04,210 --> 00:46:08,290
some exploratory testing on the branch

00:46:06,040 --> 00:46:10,450
and just try and break it as much as

00:46:08,290 --> 00:46:11,590
possible really and try things out so

00:46:10,450 --> 00:46:14,590
there was definitely still a place for

00:46:11,590 --> 00:46:16,720
it and obviously the downside is that

00:46:14,590 --> 00:46:18,070
when you're running in in the regression

00:46:16,720 --> 00:46:19,360
suite that's not going to happen because

00:46:18,070 --> 00:46:21,820
you can only

00:46:19,360 --> 00:46:24,760
program the checks you've written so I

00:46:21,820 --> 00:46:28,300
think yeah there's absolutely place for

00:46:24,760 --> 00:46:31,840
it did it warrant and someone doing it

00:46:28,300 --> 00:46:33,100
full-time 100% he didn't because we were

00:46:31,840 --> 00:46:35,650
doing it as part of what we were doing

00:46:33,100 --> 00:46:37,390
and I think I think we might need to get

00:46:35,650 --> 00:46:39,280
it right in terms of our workflow and

00:46:37,390 --> 00:46:40,990
doing you know writing the code upfront

00:46:39,280 --> 00:46:43,600
and then we concentrate on just playing

00:46:40,990 --> 00:46:47,269
around and trying to break it so that

00:46:43,600 --> 00:46:50,579
sort of gives you a bit of an answer

00:46:47,269 --> 00:46:52,710
cool great okay so we're gonna end it

00:46:50,579 --> 00:46:54,029
that guy's tears gain how that cost you

00:46:52,710 --> 00:46:55,920
something guys progress on to your

00:46:54,029 --> 00:46:57,180
summer you get back to work so just a

00:46:55,920 --> 00:46:57,869
couple of things before you are sign up

00:46:57,180 --> 00:46:59,400
thank you

00:46:57,869 --> 00:47:02,010
hello queueing bubbles for attendance

00:46:59,400 --> 00:47:03,960
they make it's a great so we've

00:47:02,010 --> 00:47:06,119
got another talk coming next Wednesday's

00:47:03,960 --> 00:47:07,769
we are doing weekly and that's going to

00:47:06,119 --> 00:47:09,829
be with fabulous you want to progress a

00:47:07,769 --> 00:47:11,730
very sorry for mispronounce your name

00:47:09,829 --> 00:47:14,400
details we get up very sure this

00:47:11,730 --> 00:47:17,819
afternoon but it is assuring or not

00:47:14,400 --> 00:47:21,450
assuring quality see a little details on

00:47:17,819 --> 00:47:23,130
that shortly we've also got some more

00:47:21,450 --> 00:47:24,930
events can not be one check those after

00:47:23,130 --> 00:47:26,010
we'll rehearse with you Tech has time to

00:47:24,930 --> 00:47:29,579
react

00:47:26,010 --> 00:47:33,000
we also you X will talk sector so lots

00:47:29,579 --> 00:47:35,010
and lots of things on the radar and as I

00:47:33,000 --> 00:47:37,230
mentioned details elite coffee will be

00:47:35,010 --> 00:47:39,240
going up short they probably know it's

00:47:37,230 --> 00:47:41,490
an artist who is limited space

00:47:39,240 --> 00:47:43,349
unfortunately but please do so if you

00:47:41,490 --> 00:47:45,420
can't make it and like if we can't

00:47:43,349 --> 00:47:46,920
slaughter in this one then we've got a

00:47:45,420 --> 00:47:48,510
record that you are interested in these

00:47:46,920 --> 00:47:50,490
so next thing so I will try and

00:47:48,510 --> 00:47:52,920
prioritize right and give everyone as

00:47:50,490 --> 00:47:54,990
much opportunity as possible to attend

00:47:52,920 --> 00:47:56,160
one of these lean cafes and also if you

00:47:54,990 --> 00:47:57,450
give us please do connect with me on

00:47:56,160 --> 00:47:59,160
LinkedIn guys so I've gotten questions

00:47:57,450 --> 00:48:01,200
or anything like that or any suggestions

00:47:59,160 --> 00:48:03,000
and also we do need that as far as

00:48:01,200 --> 00:48:05,369
prerequisite to attend the link office

00:48:03,000 --> 00:48:09,170
on that guys thank you so much stay safe

00:48:05,369 --> 00:48:09,170

YouTube URL: https://www.youtube.com/watch?v=1XSxrqveWDg


