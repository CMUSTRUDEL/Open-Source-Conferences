Title: Taiko: Reliable Browser Automation: An Introduction | Lunchtime Sessions | QA Babble - June 2020
Publication date: 2020-06-25
Playlist: QA Babble
Description: 
	This Lunchtime Session was organised by Woodrow Mercer and presented on YouTube by Pusher via Zoom Webinar relay.

There is a lot of talk in the software industry today about browser automation tools like Cypress, Puppeteer, WebDriver, TestCafe, and TestProject. Yet nobody seems to be talking about Taiko, an automation tool from Thoughtworks, the company that created Selenium and WebDriver. In this talk Amit will take you through some of the key features of Taiko and why he feels you should consider this simple yet powerful tool. Zabil from Thoughtworks will also be on hand in the webinar to assist with the Q&A element at the end of the talk.

Speaker bio:

Amit has 13+ years of experience in the field of QA, with experience working in different industries using a variety of tools and frameworks. He is a keen adopter of open source technologies and always keen to improve the quality of the product and the business processes. He has been involved in a number of different projects and programs, delivering various applications for desktop, web, and mobile, as well as migrations, upgrades and digital transformation projects.

You can reach out to Amit @ https://www.linkedin.com/in/amitsarkar007/

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,060 --> 00:00:06,420
so I'm going to talk to you about Tyco

00:00:03,120 --> 00:00:09,900
reliable browser automation tool first I

00:00:06,420 --> 00:00:13,170
would like to thank QA Babel for letting

00:00:09,900 --> 00:00:16,049
me conduct this meeting I think Thanks

00:00:13,170 --> 00:00:18,930
Matt thanks Anthony for arranging this

00:00:16,049 --> 00:00:21,900
session for everyone I also want to

00:00:18,930 --> 00:00:23,640
thank team Tyco so it's a completely

00:00:21,900 --> 00:00:27,000
open-source tool and whatever I have

00:00:23,640 --> 00:00:30,769
learnt is through the community and

00:00:27,000 --> 00:00:34,350
interacting with the people behind tool

00:00:30,769 --> 00:00:37,620
so what is Tyco Tyco is basically a node

00:00:34,350 --> 00:00:39,899
library with clear and concise API to

00:00:37,620 --> 00:00:44,100
automate chromium browsers so it means

00:00:39,899 --> 00:00:46,710
any browser that runs on chromium will

00:00:44,100 --> 00:00:50,760
be able to use Tyco for the browser

00:00:46,710 --> 00:00:52,980
automation so let's quickly talk about

00:00:50,760 --> 00:00:55,949
the agenda so I'll talk a bit about

00:00:52,980 --> 00:00:59,539
myself what are in to end tests what is

00:00:55,949 --> 00:01:02,219
Tyco why JavaScript test framework

00:00:59,539 --> 00:01:05,820
comparison with other tools limitations

00:01:02,219 --> 00:01:12,119
demo conclusion and references in the

00:01:05,820 --> 00:01:13,500
end so I currently have about 13 years

00:01:12,119 --> 00:01:15,659
of experience in the software testing

00:01:13,500 --> 00:01:17,490
industry of tested web mobile and

00:01:15,659 --> 00:01:20,909
desktop applications and will be in

00:01:17,490 --> 00:01:23,159
large enterprises and startups I've

00:01:20,909 --> 00:01:25,950
worked for companies like Nevada or just

00:01:23,159 --> 00:01:29,369
burned rail Delfy group privates and

00:01:25,950 --> 00:01:34,110
Tata Consultancy Services over my 13

00:01:29,369 --> 00:01:37,590
years of testing career so now let's

00:01:34,110 --> 00:01:42,060
talk about end-to-end browser tests so

00:01:37,590 --> 00:01:43,619
martin fowler he has i mean written this

00:01:42,060 --> 00:01:45,509
that user journey tests are form of

00:01:43,619 --> 00:01:47,579
business facing tests designed to

00:01:45,509 --> 00:01:49,710
simulate a typical users journey through

00:01:47,579 --> 00:01:51,360
the system such a test which will

00:01:49,710 --> 00:01:53,430
typically cover a uses entire

00:01:51,360 --> 00:01:55,649
interaction in the system in order to

00:01:53,430 --> 00:01:57,600
achieve some goal they act as one path

00:01:55,649 --> 00:02:02,159
in a use case now this use case could be

00:01:57,600 --> 00:02:04,590
going to say ma looking for an item

00:02:02,159 --> 00:02:06,899
putting it into your basket checking it

00:02:04,590 --> 00:02:09,929
out making the payment so that's an

00:02:06,899 --> 00:02:11,819
end-to-end test now what are the

00:02:09,929 --> 00:02:14,189
challenges with end-to-end browser

00:02:11,819 --> 00:02:16,620
at the moment currently takes a lot of

00:02:14,189 --> 00:02:18,389
time to execute because you have a whole

00:02:16,620 --> 00:02:21,420
user journey spanning across multiple

00:02:18,389 --> 00:02:23,310
pages with different elements plus it's

00:02:21,420 --> 00:02:26,969
not part of development cycle because of

00:02:23,310 --> 00:02:28,920
all the focus on unit tests and API

00:02:26,969 --> 00:02:30,420
testing and other testing end to end

00:02:28,920 --> 00:02:34,139
browser tests are generally not the

00:02:30,420 --> 00:02:36,989
focus and definitely because the

00:02:34,139 --> 00:02:40,889
elements on the page can fluctuate and

00:02:36,989 --> 00:02:44,280
keep changing with development and also

00:02:40,889 --> 00:02:46,980
it's tough to read or modify because I

00:02:44,280 --> 00:02:48,840
mean you will have to do automation

00:02:46,980 --> 00:02:53,189
using some programming language say Java

00:02:48,840 --> 00:02:58,549
or C sharp or Ruby or whatever tool you

00:02:53,189 --> 00:02:58,549
want to use so what's the

00:02:59,440 --> 00:03:04,090
what's the goal of a end-to-end browser

00:03:02,380 --> 00:03:06,640
test the goal is basically to simulate a

00:03:04,090 --> 00:03:10,120
real user scenario from start to finish

00:03:06,640 --> 00:03:13,450
so basically that means is that we have

00:03:10,120 --> 00:03:16,780
to go from one state to another state

00:03:13,450 --> 00:03:19,320
and follow the entire journey and see

00:03:16,780 --> 00:03:19,320
what happens

00:03:27,500 --> 00:03:33,350
okay so taiko introduction so it's a

00:03:31,940 --> 00:03:37,940
free and open source browser automation

00:03:33,350 --> 00:03:41,450
tool built by thought works and thought

00:03:37,940 --> 00:03:42,830
works itself has a very great open

00:03:41,450 --> 00:03:44,660
source history because they were

00:03:42,830 --> 00:03:46,130
actually the people who actually created

00:03:44,660 --> 00:03:48,920
selenium that we are all familiar with

00:03:46,130 --> 00:03:52,400
they were also the people who came out

00:03:48,920 --> 00:03:53,720
with webdriver and webdriver combined

00:03:52,400 --> 00:03:56,330
with selenium became selenium webdriver

00:03:53,720 --> 00:03:58,870
and web browser is currently a w3c

00:03:56,330 --> 00:03:58,870
standard

00:04:01,750 --> 00:04:08,360
so what does type of mean Tyco actually

00:04:05,120 --> 00:04:15,620
is Japanese barrel shape drum and I will

00:04:08,360 --> 00:04:16,970
slowly come to what it means my first

00:04:15,620 --> 00:04:17,299
experience was actually also in a

00:04:16,970 --> 00:04:19,790
meet-up

00:04:17,299 --> 00:04:23,630
I attended the thoughtworks meetup last

00:04:19,790 --> 00:04:25,010
year where Scott Davis the web architect

00:04:23,630 --> 00:04:27,200
and principal engineer at court works

00:04:25,010 --> 00:04:28,580
give a talk on gauge and Tyco and that's

00:04:27,200 --> 00:04:32,090
how I got familiar with the tool and

00:04:28,580 --> 00:04:34,640
that's how I started looking into what

00:04:32,090 --> 00:04:38,540
it is and how I can use it for

00:04:34,640 --> 00:04:40,430
automating things it was also featured

00:04:38,540 --> 00:04:42,610
in the technology radar so technology

00:04:40,430 --> 00:04:46,160
radar is something that caught works

00:04:42,610 --> 00:04:48,290
produces every every year twice a year

00:04:46,160 --> 00:04:50,660
actually and they talk about the latest

00:04:48,290 --> 00:04:52,970
technology trends on techniques tools

00:04:50,660 --> 00:04:54,980
platforms and frameworks and they have

00:04:52,970 --> 00:04:59,390
actually mentioned Tyco in their April

00:04:54,980 --> 00:05:01,310
2019 edition so what was Tyco actually

00:04:59,390 --> 00:05:05,180
inspired by Tyco was actually inspired

00:05:01,310 --> 00:05:07,790
by puppeteer which we all know again

00:05:05,180 --> 00:05:11,150
it's open-source tool and it was also

00:05:07,790 --> 00:05:15,590
inspired by this Python library called

00:05:11,150 --> 00:05:16,910
helium now this is quite interesting I

00:05:15,590 --> 00:05:19,300
mean you can see that you are just

00:05:16,910 --> 00:05:24,380
typing something it's in the ripple mode

00:05:19,300 --> 00:05:27,350
and it opens Chrome so it's quite

00:05:24,380 --> 00:05:31,160
interactive and then you write something

00:05:27,350 --> 00:05:34,550
into the user name field and you write

00:05:31,160 --> 00:05:37,870
something in the password field and then

00:05:34,550 --> 00:05:37,870
you click the button

00:05:38,699 --> 00:05:43,800
click sign-in and that's it so as you

00:05:42,180 --> 00:05:47,849
can see this is quite interactive and

00:05:43,800 --> 00:05:50,639
Tycho got inspired by these two projects

00:05:47,849 --> 00:05:52,469
so what does Tai Chi actually do so as

00:05:50,639 --> 00:05:55,409
you can see here it's again this is

00:05:52,469 --> 00:05:58,530
psycho you open the browser you clicks

00:05:55,409 --> 00:06:03,919
you say go to google.com write something

00:05:58,530 --> 00:06:06,919
and click or press the Enter key and

00:06:03,919 --> 00:06:10,740
then click on this particular link and

00:06:06,919 --> 00:06:14,789
it's identifying using the text and then

00:06:10,740 --> 00:06:16,469
you can close a browser so taiko is a

00:06:14,789 --> 00:06:19,379
node.js library as I've already

00:06:16,469 --> 00:06:23,400
mentioned so you can find it on the npm

00:06:19,379 --> 00:06:25,349
JS website and you can download it using

00:06:23,400 --> 00:06:26,759
the npm install command so it's pretty

00:06:25,349 --> 00:06:30,419
straightforward and you can start

00:06:26,759 --> 00:06:32,550
automating immediately so as i mentioned

00:06:30,419 --> 00:06:35,340
it uses the chrome dev tools api

00:06:32,550 --> 00:06:37,199
protocol and is built for testing the

00:06:35,340 --> 00:06:38,639
modern web applications now what this

00:06:37,199 --> 00:06:41,219
means is any browser that supports

00:06:38,639 --> 00:06:43,409
chromium taiko can interact with it and

00:06:41,219 --> 00:06:45,120
taiko can automate them so that's that's

00:06:43,409 --> 00:06:49,110
actually quite a lot of browsers in the

00:06:45,120 --> 00:06:51,150
market currently it also has a lot of

00:06:49,110 --> 00:06:54,360
plugins so you have plug-ins for

00:06:51,150 --> 00:06:56,639
accessibility Android Diagnostics

00:06:54,360 --> 00:06:58,800
screencasting storage and many other

00:06:56,639 --> 00:07:02,039
plugins so that's also quite good

00:06:58,800 --> 00:07:03,870
because then you can extend the features

00:07:02,039 --> 00:07:05,639
and functionalities of taiko with all

00:07:03,870 --> 00:07:07,379
these plugins so that's again a good

00:07:05,639 --> 00:07:09,479
thing plus all these plugins are also

00:07:07,379 --> 00:07:15,810
open source and available by the via the

00:07:09,479 --> 00:07:20,339
node n P MJ s website a sample example

00:07:15,810 --> 00:07:22,740
so this is taiko on Android so you

00:07:20,339 --> 00:07:25,139
create the test and now you can see that

00:07:22,740 --> 00:07:28,199
this is the Android device and the test

00:07:25,139 --> 00:07:32,200
is starting so basically what will

00:07:28,199 --> 00:07:34,260
happen is it will open Chrome browser

00:07:32,200 --> 00:07:34,260
you

00:07:34,590 --> 00:07:39,440
so we think so yeah it opened Chrome

00:07:37,050 --> 00:07:43,400
browser it will navigate to a page and

00:07:39,440 --> 00:07:43,400
it will do some functions

00:07:45,090 --> 00:07:49,920
yeah so navigate it to github.com

00:07:51,420 --> 00:07:56,710
navigate it to the user login page

00:07:53,620 --> 00:07:59,440
entering the username entering the

00:07:56,710 --> 00:08:01,660
password so as you can see it works on

00:07:59,440 --> 00:08:04,450
multiple platforms which is quite good

00:08:01,660 --> 00:08:07,510
now how it does it does this by using

00:08:04,450 --> 00:08:09,100
smart selectors so write test scripts by

00:08:07,510 --> 00:08:09,820
looking at a webpage without inspecting

00:08:09,100 --> 00:08:11,920
its source code

00:08:09,820 --> 00:08:14,320
so traditionally whenever we try to

00:08:11,920 --> 00:08:17,320
automate something we try to first

00:08:14,320 --> 00:08:20,590
identify the element say using CSS

00:08:17,320 --> 00:08:24,180
selector or expert and then we try to

00:08:20,590 --> 00:08:27,280
perform an action on it but in taiko the

00:08:24,180 --> 00:08:30,430
advantages that whatever you see on the

00:08:27,280 --> 00:08:32,200
page you are trying to automate that so

00:08:30,430 --> 00:08:34,930
if you say if you see a text say Google

00:08:32,200 --> 00:08:38,669
so you say click Google or highlight

00:08:34,930 --> 00:08:38,669
Google it will do that for you

00:08:38,830 --> 00:08:42,880
implicit weights so scripts are written

00:08:40,930 --> 00:08:44,740
in Thai core free of explicit local or

00:08:42,880 --> 00:08:48,910
global weights and the flakiness so in

00:08:44,740 --> 00:08:50,380
most of the scripts that we are

00:08:48,910 --> 00:08:52,570
currently using we have to define

00:08:50,380 --> 00:08:53,080
explicit weights like wait for this much

00:08:52,570 --> 00:08:56,500
time

00:08:53,080 --> 00:08:58,780
wait this evade that in taiko it will

00:08:56,500 --> 00:09:00,670
actually wait for a particular action to

00:08:58,780 --> 00:09:03,820
finish and then move on to the next step

00:09:00,670 --> 00:09:05,470
so but in some cases when you actually

00:09:03,820 --> 00:09:07,480
want to define the weights you can

00:09:05,470 --> 00:09:08,860
actually do that as well so there is an

00:09:07,480 --> 00:09:11,770
option where you can actually explicitly

00:09:08,860 --> 00:09:15,130
define weight for and it will wait for

00:09:11,770 --> 00:09:16,480
that particular duration of time but by

00:09:15,130 --> 00:09:19,330
default you don't actually have to

00:09:16,480 --> 00:09:23,710
define it and the script will run has is

00:09:19,330 --> 00:09:26,530
whenever you execute it also it's got an

00:09:23,710 --> 00:09:29,860
interactive recorded so as I showed on

00:09:26,530 --> 00:09:32,830
the helium version it opens a ripple

00:09:29,860 --> 00:09:34,570
mode and what that means is you can type

00:09:32,830 --> 00:09:35,770
a code and see what's happening in the

00:09:34,570 --> 00:09:38,680
browser now this is quite powerful

00:09:35,770 --> 00:09:41,050
because traditionally we have to write

00:09:38,680 --> 00:09:42,670
the whole code then run the code and

00:09:41,050 --> 00:09:45,490
then see what's happening in the browser

00:09:42,670 --> 00:09:47,680
then go back to the code modify it and

00:09:45,490 --> 00:09:49,840
then run everything again from the start

00:09:47,680 --> 00:09:53,020
but in taiko because it's runs in the

00:09:49,840 --> 00:09:55,060
ripple mode you can type command and see

00:09:53,020 --> 00:09:58,110
exactly what's happening in the browser

00:09:55,060 --> 00:10:00,430
in the demo I will show you how it works

00:09:58,110 --> 00:10:01,780
you can also do requests and response

00:10:00,430 --> 00:10:05,110
stubbing with it so you can actually

00:10:01,780 --> 00:10:07,510
intercept something say a URL and then

00:10:05,110 --> 00:10:10,120
you can redirect the user to some other

00:10:07,510 --> 00:10:14,440
URL so you can also do that so that

00:10:10,120 --> 00:10:15,970
helps with mocking and stubbing so some

00:10:14,440 --> 00:10:18,070
of the acronyms that were mentioned in

00:10:15,970 --> 00:10:20,620
this slide I've just highlighted it for

00:10:18,070 --> 00:10:23,230
everyone's reference xhr stands for XML

00:10:20,620 --> 00:10:25,120
HTTP request so you want to update parts

00:10:23,230 --> 00:10:27,610
of a webpage without reloading the whole

00:10:25,120 --> 00:10:30,460
page and repple stands for read eval

00:10:27,610 --> 00:10:32,350
print loop so it takes a single user

00:10:30,460 --> 00:10:34,200
input execute step and returns the

00:10:32,350 --> 00:10:38,260
result to the user

00:10:34,200 --> 00:10:40,600
now why JavaScript I mean why not say C

00:10:38,260 --> 00:10:43,990
sharp or Java or Python which is quite

00:10:40,600 --> 00:10:46,810
popular with these days so the reason is

00:10:43,990 --> 00:10:49,960
I mean what's the current state browser

00:10:46,810 --> 00:10:51,820
automation state it's that everyone is

00:10:49,960 --> 00:10:53,650
using Java or Python Ruby with selenium

00:10:51,820 --> 00:10:55,270
and it really felt that there is no good

00:10:53,650 --> 00:10:57,190
alternative to this setup but

00:10:55,270 --> 00:10:59,290
alternatives have come out now so you

00:10:57,190 --> 00:11:01,720
have Cypress you have puppeteer you have

00:10:59,290 --> 00:11:05,980
many other things that are not following

00:11:01,720 --> 00:11:08,040
the conventional standard but what are

00:11:05,980 --> 00:11:10,150
the benefits of using javascript because

00:11:08,040 --> 00:11:12,940
javascript is already in the browser so

00:11:10,150 --> 00:11:15,160
browser has HTML it has CSS and it has

00:11:12,940 --> 00:11:16,870
JavaScript so you can actually play with

00:11:15,160 --> 00:11:20,080
all the elements of a page using

00:11:16,870 --> 00:11:21,820
javascript plus there is the electron so

00:11:20,080 --> 00:11:23,589
a framework allowed to wrap a browser

00:11:21,820 --> 00:11:26,140
inside a JavaScript engine so a lot of

00:11:23,589 --> 00:11:28,089
applications are now electron based so

00:11:26,140 --> 00:11:31,120
you can interact with them plus it uses

00:11:28,089 --> 00:11:33,070
chrome dev tools protocol it's a non w3c

00:11:31,120 --> 00:11:36,700
standard so compared to webdriver

00:11:33,070 --> 00:11:41,020
standard it's not a w3c standard but

00:11:36,700 --> 00:11:43,770
it's quite popular and it's very good if

00:11:41,020 --> 00:11:46,750
you want to automate chromium browsers

00:11:43,770 --> 00:11:49,030
so now what would a sample test

00:11:46,750 --> 00:11:51,070
framework which I could look like so

00:11:49,030 --> 00:11:52,870
suppose you want to implement ICO in

00:11:51,070 --> 00:11:54,880
your current organization as automation

00:11:52,870 --> 00:11:57,100
framework what would that framework look

00:11:54,880 --> 00:11:59,140
like so you can use any of these

00:11:57,100 --> 00:12:01,480
programming languages JavaScript and

00:11:59,140 --> 00:12:04,900
typescript so you can actually use

00:12:01,480 --> 00:12:07,360
typescript for tycho and you can write a

00:12:04,900 --> 00:12:08,800
script and save it and then run it using

00:12:07,360 --> 00:12:10,930
Tyco

00:12:08,800 --> 00:12:13,870
you will have any of the test trainer

00:12:10,930 --> 00:12:15,190
gauge mocha jest or any other things I

00:12:13,870 --> 00:12:17,370
have not mentioned all the tested owners

00:12:15,190 --> 00:12:20,290
here but I've mentioned some of the

00:12:17,370 --> 00:12:22,390
compatible tools with Tyco that have

00:12:20,290 --> 00:12:25,320
work and you can find the examples in

00:12:22,390 --> 00:12:27,670
there in the documentation website and

00:12:25,320 --> 00:12:28,510
then of course you will use the node.js

00:12:27,670 --> 00:12:31,170
library

00:12:28,510 --> 00:12:33,089
Tyco in order for your framework to work

00:12:31,170 --> 00:12:36,430
you will use the chrome dev tools

00:12:33,089 --> 00:12:38,589
protocol and you can use any of these

00:12:36,430 --> 00:12:40,269
chromium browser so as I mentioned you

00:12:38,589 --> 00:12:43,149
can automate any of the chromium

00:12:40,269 --> 00:12:47,110
browsers which are chromium chrome edge

00:12:43,149 --> 00:12:48,700
opera brave and Vivaldi so as you can

00:12:47,110 --> 00:12:52,450
see you can support a lot of browsers

00:12:48,700 --> 00:12:55,779
and do your cross browser testing it can

00:12:52,450 --> 00:12:59,079
work on Windows Mac OS Linux Jenkins

00:12:55,779 --> 00:13:02,019
docker Raspberry Pi Android so whenever

00:12:59,079 --> 00:13:04,470
you wherever you can run node.js you can

00:13:02,019 --> 00:13:07,240
run taiko it's essentially that simple

00:13:04,470 --> 00:13:08,740
and any of the front JavaScript

00:13:07,240 --> 00:13:11,350
frameworks so it's not specifically

00:13:08,740 --> 00:13:13,149
built to tackles angular view or react

00:13:11,350 --> 00:13:16,480
it can work with any of the front-end

00:13:13,149 --> 00:13:18,220
frameworks which is quite good now

00:13:16,480 --> 00:13:20,589
coming to the tool comparison

00:13:18,220 --> 00:13:24,790
how does Tyco compare with other browser

00:13:20,589 --> 00:13:26,920
automation tools browser automation tool

00:13:24,790 --> 00:13:30,370
so this comparison actually done by

00:13:26,920 --> 00:13:33,070
thought works and published last year so

00:13:30,370 --> 00:13:34,899
they analyzed this tool in comparison

00:13:33,070 --> 00:13:39,790
with selenium webdriver test Cafe

00:13:34,899 --> 00:13:41,740
Cypress puppeteer and itself and most of

00:13:39,790 --> 00:13:44,980
the things it scores quite high but

00:13:41,740 --> 00:13:46,870
puppeteer is also quite fast as you can

00:13:44,980 --> 00:13:48,970
see the script selenium and webdriver

00:13:46,870 --> 00:13:50,350
score high on the cross browser supports

00:13:48,970 --> 00:13:52,930
and the number of languages because

00:13:50,350 --> 00:13:54,610
strike only supports JavaScript but the

00:13:52,930 --> 00:13:59,500
test integration framework is also quite

00:13:54,610 --> 00:14:01,149
high so so that's quite good but what is

00:13:59,500 --> 00:14:02,949
the competition I mean currently there

00:14:01,149 --> 00:14:05,769
are so many automation tools in the

00:14:02,949 --> 00:14:07,899
market and as a test engineer or

00:14:05,769 --> 00:14:09,820
automation expert whenever you want to

00:14:07,899 --> 00:14:11,529
go into the market to pick up a tool you

00:14:09,820 --> 00:14:13,930
have so many tools to pick up for and

00:14:11,529 --> 00:14:16,180
you sometimes wonder which is the best

00:14:13,930 --> 00:14:18,930
tool so you have selenium you have a

00:14:16,180 --> 00:14:21,339
driver Cypress puppeteer code set

00:14:18,930 --> 00:14:22,010
Nightwatch backstop for visual

00:14:21,339 --> 00:14:25,910
regression

00:14:22,010 --> 00:14:28,040
Nescafe protractor this is play right

00:14:25,910 --> 00:14:31,340
and then test project so you have so

00:14:28,040 --> 00:14:34,970
many tools which are there so why would

00:14:31,340 --> 00:14:36,590
I recommend to use Piko but before

00:14:34,970 --> 00:14:38,390
before we go to the demo I just want to

00:14:36,590 --> 00:14:40,580
talk about the limitations as well Nyko

00:14:38,390 --> 00:14:43,790
does have some limitations it doesn't

00:14:40,580 --> 00:14:44,930
support c-sharp Java Python or Ruby so

00:14:43,790 --> 00:14:47,480
suppose you already have an existing

00:14:44,930 --> 00:14:49,460
framework you're devs all already use C

00:14:47,480 --> 00:14:51,590
sharp Java Python or Ruby then

00:14:49,460 --> 00:14:55,010
unfortunately you can't but you can

00:14:51,590 --> 00:14:58,940
still start very quickly to build a new

00:14:55,010 --> 00:15:00,380
framework using Tyco the current

00:14:58,940 --> 00:15:02,870
browsers which are not supported or

00:15:00,380 --> 00:15:06,020
Internet Explorer Firefox and Safari the

00:15:02,870 --> 00:15:09,100
Firefox is actually going to support

00:15:06,020 --> 00:15:11,510
chromium in the future so that's I think

00:15:09,100 --> 00:15:13,310
it's a very limited set of browsers that

00:15:11,510 --> 00:15:15,590
are not supported majority of the

00:15:13,310 --> 00:15:17,330
browsers are still supported Microsoft

00:15:15,590 --> 00:15:19,130
has moved edge to chromium so that's a

00:15:17,330 --> 00:15:21,050
very good news for the industry because

00:15:19,130 --> 00:15:23,570
then we don't have to do a lot of

00:15:21,050 --> 00:15:26,900
rewriting of the code just to enable

00:15:23,570 --> 00:15:31,310
cross browser support and it doesn't

00:15:26,900 --> 00:15:34,490
support iOS at the moment so let's go to

00:15:31,310 --> 00:15:44,540
the demo so let me open visual studio

00:15:34,490 --> 00:15:49,730
code so in order for you to install

00:15:44,540 --> 00:15:53,140
tycho you run the command npm install -

00:15:49,730 --> 00:15:53,140
g taiko

00:15:54,360 --> 00:16:03,840
you

00:15:56,220 --> 00:16:08,540
so if people can't see so yeah it's

00:16:03,840 --> 00:16:13,590
downloading the taiko let me zoom this

00:16:08,540 --> 00:16:15,090
yeah so it's downloading taiko library

00:16:13,590 --> 00:16:18,060
and it's also downloading the latest

00:16:15,090 --> 00:16:20,310
chromium version and I'm installing it

00:16:18,060 --> 00:16:21,840
globally I've already created some

00:16:20,310 --> 00:16:25,140
scripts and these are all available it

00:16:21,840 --> 00:16:26,910
may get a repo and I've tried to

00:16:25,140 --> 00:16:29,990
automate some of the websites like BT

00:16:26,910 --> 00:16:33,090
compare the market Google search

00:16:29,990 --> 00:16:35,430
internet Heroku website lighthouse

00:16:33,090 --> 00:16:39,930
report Rafa Skyscanner

00:16:35,430 --> 00:16:44,930
and some other websites so let's see

00:16:39,930 --> 00:16:44,930
what happens waiting

00:16:45,779 --> 00:16:47,839
you

00:16:48,110 --> 00:16:50,170
you

00:16:51,510 --> 00:16:58,050
okay should work

00:17:03,130 --> 00:17:07,330
okay if it's not

00:17:07,690 --> 00:17:24,950
anyway let me open a new terminal like

00:17:10,730 --> 00:17:30,160
we'll just go to the repple yeah okay

00:17:24,950 --> 00:17:33,830
okay let's see if it's done

00:17:30,160 --> 00:17:35,780
still waiting system it's no but I've

00:17:33,830 --> 00:17:39,140
already installed it so not a problem so

00:17:35,780 --> 00:17:41,360
you type Tyco in your command line or

00:17:39,140 --> 00:17:49,280
terminal or wherever you want to use it

00:17:41,360 --> 00:17:57,670
and then you just type open browser it

00:17:49,280 --> 00:18:00,670
opened this one let's say go to

00:17:57,670 --> 00:18:00,670
google.com

00:18:02,730 --> 00:18:17,759
let's say goto meeting.com so as you can

00:18:15,299 --> 00:18:20,070
see the page once it loaded then only it

00:18:17,759 --> 00:18:23,129
gave the pass so it actually waited for

00:18:20,070 --> 00:18:26,279
the page to load completely so let's say

00:18:23,129 --> 00:18:30,629
I want to click this OK button this one

00:18:26,279 --> 00:18:32,940
here bear in mind I am coding as well as

00:18:30,629 --> 00:18:33,779
trying to see if it works so let's see

00:18:32,940 --> 00:18:36,149
what happens

00:18:33,779 --> 00:18:39,899
click OK well it identified the element

00:18:36,149 --> 00:18:42,749
and then it lead and then it reloaded

00:18:39,899 --> 00:18:45,090
for some reason but see it waited for

00:18:42,749 --> 00:18:47,249
the page to reload complete and then so

00:18:45,090 --> 00:18:49,889
now if I want to click broadband and

00:18:47,249 --> 00:18:52,519
then maybe click on fibre broadband so

00:18:49,889 --> 00:19:02,450
what do I have to do so let's say click

00:18:52,519 --> 00:19:06,029
broadband and then click fiber button

00:19:02,450 --> 00:19:09,989
and be small so let's see what happens

00:19:06,029 --> 00:19:13,379
it it identified the element and then it

00:19:09,989 --> 00:19:15,330
went to that page it's not shown a pass

00:19:13,379 --> 00:19:20,960
yet the page is loaded it's shown a pass

00:19:15,330 --> 00:19:23,460
so let me click this see broadband deals

00:19:20,960 --> 00:19:25,529
so you can see what's happening here

00:19:23,460 --> 00:19:28,109
this is how a user would interact with

00:19:25,529 --> 00:19:29,609
the system it's not how the program is

00:19:28,109 --> 00:19:32,399
interacting it's how the user is

00:19:29,609 --> 00:19:35,369
interacting the user is interacting with

00:19:32,399 --> 00:19:37,259
what the user sees on the page so if I

00:19:35,369 --> 00:19:39,299
see something on the page I can interact

00:19:37,259 --> 00:19:40,919
with it using smart selectors but if I

00:19:39,299 --> 00:19:44,639
don't see something on the page which is

00:19:40,919 --> 00:19:46,080
hidden I I can then use XPath or CSS

00:19:44,639 --> 00:19:49,590
selectors so that's actually quite

00:19:46,080 --> 00:19:52,999
useful so now so let's say click see

00:19:49,590 --> 00:19:56,669
broadband deals and whenever it

00:19:52,999 --> 00:19:58,769
identifies it highlights the element in

00:19:56,669 --> 00:20:01,259
red you must have seen this this was

00:19:58,769 --> 00:20:06,059
already read so we've not able to see

00:20:01,259 --> 00:20:07,590
this now see the page loaded and then it

00:20:06,059 --> 00:20:10,200
should pass so it it waited

00:20:07,590 --> 00:20:12,019
automatically we didn't have to say ok

00:20:10,200 --> 00:20:16,200
wait for this much time of this and that

00:20:12,019 --> 00:20:19,980
now let's see click check availability

00:20:16,200 --> 00:20:23,269
oh really

00:20:19,980 --> 00:20:23,269
the Mickey

00:20:24,870 --> 00:20:35,230
well and then let's say I want to write

00:20:29,590 --> 00:20:46,870
a text so trying it so I give a postcode

00:20:35,230 --> 00:20:52,590
give my postcard into text box and say

00:20:46,870 --> 00:20:55,540
postcode let's see what happens

00:20:52,590 --> 00:20:57,460
so I told tie code to write this

00:20:55,540 --> 00:20:59,800
particular text into the text box

00:20:57,460 --> 00:21:04,480
postcode I didn't give any selector I

00:20:59,800 --> 00:21:06,700
didn't say use this X for that expert

00:21:04,480 --> 00:21:08,920
there was no CSS defined I just said

00:21:06,700 --> 00:21:12,130
there is a text box on the page which is

00:21:08,920 --> 00:21:14,380
under postcode with a label postcode and

00:21:12,130 --> 00:21:22,330
then just write that text and it did it

00:21:14,380 --> 00:21:29,410
for me and then I say click click check

00:21:22,330 --> 00:21:33,220
availability again so now here it's

00:21:29,410 --> 00:21:37,270
trying to find the address let's say

00:21:33,220 --> 00:21:44,080
click 55 let's see what happens so I'd

00:21:37,270 --> 00:21:47,850
say let's click 15 okay so it's not able

00:21:44,080 --> 00:21:53,320
to identify 15 so you wait for some time

00:21:47,850 --> 00:21:58,410
it will automatically time out so let's

00:21:53,320 --> 00:21:58,410
see 15 even Road I think that smoke here

00:21:58,680 --> 00:22:05,680
yeah it identified the element and it

00:22:02,140 --> 00:22:11,160
clicked it's selected and let's say

00:22:05,680 --> 00:22:11,160
click confirm address

00:22:15,309 --> 00:22:17,370
you

00:22:17,450 --> 00:22:23,659
I think someone is already asked what if

00:22:19,999 --> 00:22:27,799
there are other Broadband's so words so

00:22:23,659 --> 00:22:29,059
you have smart selectors I can share I

00:22:27,799 --> 00:22:31,639
can show what I have done in the scripts

00:22:29,059 --> 00:22:34,129
so basically this is an end-to-end test

00:22:31,639 --> 00:22:35,809
so suppose tomorrow you want to see

00:22:34,129 --> 00:22:37,969
whether you are able to see the packages

00:22:35,809 --> 00:22:41,209
for fiber for a particular address you

00:22:37,969 --> 00:22:44,089
can code using this now another another

00:22:41,209 --> 00:22:46,609
thing is what about the script itself

00:22:44,089 --> 00:22:48,049
suppose I want to see what the script

00:22:46,609 --> 00:22:50,919
would look like for this end-to-end

00:22:48,049 --> 00:22:56,389
scenario I use something called dot code

00:22:50,919 --> 00:22:58,820
so dot code will generate the entire

00:22:56,389 --> 00:23:01,159
code for me of whatever has passed

00:22:58,820 --> 00:23:03,489
click 15 did not pass so it's not there

00:23:01,159 --> 00:23:08,719
in my code so it has actually generated

00:23:03,489 --> 00:23:11,899
decode for me open browser go here do

00:23:08,719 --> 00:23:14,359
this click that write this click click

00:23:11,899 --> 00:23:18,440
click and then this is using a

00:23:14,359 --> 00:23:22,729
traditional try catch block and it says

00:23:18,440 --> 00:23:25,059
use these api's from this library which

00:23:22,729 --> 00:23:29,690
is psycho okay

00:23:25,059 --> 00:23:32,509
so and if I want to export this so say

00:23:29,690 --> 00:23:38,659
dot code and I want to put it in a file

00:23:32,509 --> 00:23:42,649
so be t.com dot j s so it has put

00:23:38,659 --> 00:23:45,950
everything in that particular file in a

00:23:42,649 --> 00:23:50,010
javascript file and let's see what

00:23:45,950 --> 00:24:00,010
happened so it created this file

00:23:50,010 --> 00:24:03,130
we cannot conscious and it's created

00:24:00,010 --> 00:24:04,570
this javascript file and I can now work

00:24:03,130 --> 00:24:07,540
with it now

00:24:04,570 --> 00:24:10,270
you can also pass some arguments say you

00:24:07,540 --> 00:24:12,340
want to run this in headless not in

00:24:10,270 --> 00:24:16,300
headless mode you want to actually see

00:24:12,340 --> 00:24:23,410
what happens when the code is actually

00:24:16,300 --> 00:24:25,600
running so let me close this session and

00:24:23,410 --> 00:24:28,380
let me come out so I'll come out by

00:24:25,600 --> 00:24:28,380
saying dot exit

00:24:32,630 --> 00:24:40,200
yeah and then I want to run this

00:24:37,290 --> 00:24:44,550
particular file BT dot condor jeaious so

00:24:40,200 --> 00:24:47,130
I just type echo VT not condone J's I'm

00:24:44,550 --> 00:24:54,870
using PowerShell so it's a bit different

00:24:47,130 --> 00:24:56,640
and so let's see what happens okay so

00:24:54,870 --> 00:25:02,040
that's already hit open the browser in a

00:24:56,640 --> 00:25:06,200
different window so it went to be t.com

00:25:02,040 --> 00:25:06,200
it clicked ok it clicked

00:25:09,649 --> 00:25:15,860
now you see there is a error the script

00:25:12,990 --> 00:25:18,630
is not able to execute why is that

00:25:15,860 --> 00:25:22,019
because when we interacted in the

00:25:18,630 --> 00:25:23,669
interactive mode we had some time and

00:25:22,019 --> 00:25:26,539
Tycho does not know that the page has

00:25:23,669 --> 00:25:26,539
reloaded

00:25:28,140 --> 00:25:33,549
so it will give a timeout we'll say it's

00:25:31,120 --> 00:25:34,919
not able to identify the element yeah

00:25:33,549 --> 00:25:36,940
navigation took more than thirty

00:25:34,919 --> 00:25:41,710
thousand milliseconds and we are not

00:25:36,940 --> 00:25:45,630
able to execute so I mean let's reboot

00:25:41,710 --> 00:25:45,630
if I the script so I've already done it

00:25:46,380 --> 00:25:54,010
and here is the script so what I've done

00:25:51,399 --> 00:25:54,970
is I've told it to wait for events Dom

00:25:54,010 --> 00:25:57,010
content loaded

00:25:54,970 --> 00:25:59,440
I didn't say wait for 300 milliseconds

00:25:57,010 --> 00:26:01,539
oh wait for 100 milliseconds I just said

00:25:59,440 --> 00:26:04,539
wait till the entire Dom content is

00:26:01,539 --> 00:26:07,210
loaded and because whenever I click OK

00:26:04,539 --> 00:26:09,340
the page refreshes so it has to wait for

00:26:07,210 --> 00:26:11,139
the entire Dom content to load and then

00:26:09,340 --> 00:26:15,000
identify where the element is and then

00:26:11,139 --> 00:26:15,000
click on it so let me run this clip now

00:26:17,370 --> 00:26:32,710
okay if my computer is having some

00:26:25,269 --> 00:26:43,690
memory issues let me kill this new

00:26:32,710 --> 00:26:47,620
terminal yeah ICO be tedious let's open

00:26:43,690 --> 00:26:50,100
this here in my other screen so let's

00:26:47,620 --> 00:26:55,059
see what's happening it cleaned okay

00:26:50,100 --> 00:26:56,679
it's quite quite fast actually so it

00:26:55,059 --> 00:27:04,539
wait for the Dom Kennedy load kick on

00:26:56,679 --> 00:27:12,010
broadband click on fibre broadband see

00:27:04,539 --> 00:27:15,460
broadband deals its click that scrolled

00:27:12,010 --> 00:27:20,169
to fibre to add continue write this

00:27:15,460 --> 00:27:27,639
check availability wait for it 55 Eden

00:27:20,169 --> 00:27:31,419
Road confirm address taken a screenshot

00:27:27,639 --> 00:27:32,889
of this page and saved it okay so all

00:27:31,419 --> 00:27:36,159
this is have done so there was a

00:27:32,889 --> 00:27:38,350
question in the chat of what if there

00:27:36,159 --> 00:27:43,019
are multiple broadband so I've actually

00:27:38,350 --> 00:27:43,019
said so here

00:27:46,679 --> 00:27:54,429
for events see here oh wait

00:27:51,610 --> 00:27:56,049
click add and continue below fiber - so

00:27:54,429 --> 00:27:59,740
suppose there are add and add and

00:27:56,049 --> 00:28:02,259
continue text under under which is

00:27:59,740 --> 00:28:04,960
repeated in the page you can actually

00:28:02,259 --> 00:28:07,929
say click this text which is below this

00:28:04,960 --> 00:28:12,730
text that's it so if even if there are

00:28:07,929 --> 00:28:15,850
multiple pages then you can identify the

00:28:12,730 --> 00:28:18,299
elements and click on it let me run out

00:28:15,850 --> 00:28:24,090
of the script and this is for redirect

00:28:18,299 --> 00:28:26,950
so this script what it does is you

00:28:24,090 --> 00:28:28,769
define an intercept say google.com and

00:28:26,950 --> 00:28:32,590
redirect it to bing.com

00:28:28,769 --> 00:28:34,360
so when you go to google.com it will

00:28:32,590 --> 00:28:36,039
actually go to bing.com instead of

00:28:34,360 --> 00:28:37,869
google.com and you can verify this by

00:28:36,039 --> 00:28:41,470
getting the current URL and then you

00:28:37,869 --> 00:28:43,990
actually go to SOC own and then execute

00:28:41,470 --> 00:28:56,080
so let's see what happens i I I run this

00:28:43,990 --> 00:29:03,759
script it always opens in the different

00:28:56,080 --> 00:29:07,480
screen so intercept open added navigated

00:29:03,759 --> 00:29:09,279
to URL google.com but the V we know that

00:29:07,480 --> 00:29:13,019
it actually went to bing.com because we

00:29:09,279 --> 00:29:16,960
got the current URL and we closed it and

00:29:13,019 --> 00:29:19,389
it navigated to assess comm it said that

00:29:16,960 --> 00:29:22,389
and the browser was closed that's quite

00:29:19,389 --> 00:29:24,809
interesting so what else can I do

00:29:22,389 --> 00:29:28,869
so I've actually played around with it

00:29:24,809 --> 00:29:30,669
quite a lot and Internet Haruka website

00:29:28,869 --> 00:29:34,570
now this website is quite popular for

00:29:30,669 --> 00:29:35,950
testing whether your automation tool can

00:29:34,570 --> 00:29:38,710
interact with different types of

00:29:35,950 --> 00:29:44,220
elements say authentication elements in

00:29:38,710 --> 00:29:48,580
a table drop-down and upload a file

00:29:44,220 --> 00:29:51,970
javascript alerts menu I flames and

00:29:48,580 --> 00:29:54,340
other things so because we are not using

00:29:51,970 --> 00:29:56,290
the backend code or the HTML code to

00:29:54,340 --> 00:29:58,150
actually identify the

00:29:56,290 --> 00:30:00,280
it doesn't care whether it's iframe so

00:29:58,150 --> 00:30:02,680
it will handle iframe directly it can

00:30:00,280 --> 00:30:05,710
handle images drop-down clicks and other

00:30:02,680 --> 00:30:07,570
things so I've actually mentioned all

00:30:05,710 --> 00:30:09,580
this in the script and it's all

00:30:07,570 --> 00:30:12,400
available in my github page I actually

00:30:09,580 --> 00:30:16,600
wanted to show you this script compare

00:30:12,400 --> 00:30:18,540
the market which I did recently and this

00:30:16,600 --> 00:30:21,250
is quite an interesting thing because

00:30:18,540 --> 00:30:23,590
I'm going to compare the market and

00:30:21,250 --> 00:30:25,570
trying to get a coat and this is a very

00:30:23,590 --> 00:30:28,210
complicated user journey where there are

00:30:25,570 --> 00:30:30,040
a lot of elements where I have to write

00:30:28,210 --> 00:30:32,290
so many texts and I've tried to automate

00:30:30,040 --> 00:30:36,490
that so every time I want to get a coat

00:30:32,290 --> 00:30:38,740
I change this and I can get a new coat

00:30:36,490 --> 00:30:41,320
and as you can see from the code it's

00:30:38,740 --> 00:30:43,180
highly readable I am NOT saying use that

00:30:41,320 --> 00:30:46,660
CSS selector or this or that I'm saying

00:30:43,180 --> 00:30:50,860
the right 55 into textbook this or right

00:30:46,660 --> 00:30:52,720
BR 3 4 s into postcode and then it will

00:30:50,860 --> 00:30:55,630
handle all the drop-down I'll basically

00:30:52,720 --> 00:31:00,040
just run this code now so that everyone

00:30:55,630 --> 00:31:01,930
can see and then we can go on to QA and

00:31:00,040 --> 00:31:14,470
other things so let me just run this

00:31:01,930 --> 00:31:15,580
script and this is a very complex a long

00:31:14,470 --> 00:31:21,330
end-to-end journey

00:31:15,580 --> 00:31:21,330
it's the code is less than 100 lines

00:31:21,350 --> 00:31:27,590
for this complete end-to-end journey

00:31:24,310 --> 00:31:30,080
just type a random name random sorry

00:31:27,590 --> 00:31:32,890
car registration type the current value

00:31:30,080 --> 00:31:32,890
next

00:31:33,720 --> 00:31:41,860
not use any CSS selector except one

00:31:36,519 --> 00:31:46,870
element all I have done is click this

00:31:41,860 --> 00:31:49,149
click that do that so you can see that

00:31:46,870 --> 00:31:51,399
this is a drop down and it's interacting

00:31:49,149 --> 00:31:51,940
with it so it's selecting the date of

00:31:51,399 --> 00:31:54,490
birth

00:31:51,940 --> 00:31:55,899
so you can see different elements on the

00:31:54,490 --> 00:32:05,409
page I can quickly

00:31:55,899 --> 00:32:10,659
it's interacted with the checkbox drop

00:32:05,409 --> 00:32:12,789
down software because it is so easy it -

00:32:10,659 --> 00:32:15,659
it did not take me much time to actually

00:32:12,789 --> 00:32:15,659
script this

00:32:18,990 --> 00:32:25,860
because I didn't have to go in the back

00:32:21,090 --> 00:32:28,380
end and say okay another thing is you

00:32:25,860 --> 00:32:31,110
notice that there are no multiple times

00:32:28,380 --> 00:32:37,970
no so I have to actually tell it which

00:32:31,110 --> 00:32:37,970
no to click and I can define that

00:32:42,710 --> 00:32:46,520
selected 20 adjourned

00:32:46,930 --> 00:32:50,940
okay give some error

00:32:52,360 --> 00:32:57,260
drop down with label do you have this

00:32:55,010 --> 00:32:58,820
will be detailed not found okay so that

00:32:57,260 --> 00:33:02,299
drop down might have changed so it's not

00:32:58,820 --> 00:33:06,429
found so it gave error but the basic

00:33:02,299 --> 00:33:09,559
idea is that I have not used any CSS

00:33:06,429 --> 00:33:12,529
locators or expert locators to create a

00:33:09,559 --> 00:33:14,659
script I have said click this what the

00:33:12,529 --> 00:33:16,820
user can see and I think that's quite

00:33:14,659 --> 00:33:20,029
intuitive because I've written lot of

00:33:16,820 --> 00:33:23,299
text here hardly any code and most of it

00:33:20,029 --> 00:33:26,450
is drop down you right off to left off

00:33:23,299 --> 00:33:29,659
or and select that particular option in

00:33:26,450 --> 00:33:32,059
that drop down so it's it's quite

00:33:29,659 --> 00:33:35,260
intuitive that way so now let's go back

00:33:32,059 --> 00:33:38,539
to the presentation

00:33:35,260 --> 00:33:40,279
so as I've mentioned all the scripts

00:33:38,539 --> 00:33:43,399
that are played with using this tool

00:33:40,279 --> 00:33:46,820
I've uploaded it in my github repo so

00:33:43,399 --> 00:33:49,159
anyone can refer to this and if you have

00:33:46,820 --> 00:33:52,429
any questions you can ask me directly I

00:33:49,159 --> 00:33:54,080
will give an email but these are all the

00:33:52,429 --> 00:33:56,059
scripts that have played and I'm trying

00:33:54,080 --> 00:33:58,549
to play with different complex sites

00:33:56,059 --> 00:34:00,559
like BT compare the market I'm trying

00:33:58,549 --> 00:34:01,610
currently working on Google flights I've

00:34:00,559 --> 00:34:03,559
done Skyscanner

00:34:01,610 --> 00:34:05,840
but Skyscanner production side it works

00:34:03,559 --> 00:34:08,450
one time but then it identifies that

00:34:05,840 --> 00:34:10,280
it's an automated bot so it doesn't work

00:34:08,450 --> 00:34:13,339
the next time so that's something that

00:34:10,280 --> 00:34:15,770
you might have to worry about or think

00:34:13,339 --> 00:34:18,550
about sorry but Skyscanner works I've

00:34:15,770 --> 00:34:22,790
I'm literally gone into Skyscanner

00:34:18,550 --> 00:34:25,040
entered the departure Airport arrival

00:34:22,790 --> 00:34:27,500
Airport dates selected number of

00:34:25,040 --> 00:34:30,889
passengers added few bags added adults

00:34:27,500 --> 00:34:33,619
and kids selected direct flights only

00:34:30,889 --> 00:34:35,270
and then search for flight so if every

00:34:33,619 --> 00:34:37,220
if I just have to select this particular

00:34:35,270 --> 00:34:38,990
user journey I can always run that

00:34:37,220 --> 00:34:43,429
script and I've done it for different

00:34:38,990 --> 00:34:46,369
websites as well so yes so in the end

00:34:43,429 --> 00:34:49,220
it's basically a node.js library uses

00:34:46,369 --> 00:34:51,290
chrome dev tools protocol automates

00:34:49,220 --> 00:34:55,220
tests quickly by using smart selectors

00:34:51,290 --> 00:34:58,160
so as you can see just by using the

00:34:55,220 --> 00:35:00,050
interactive ripple and then writing the

00:34:58,160 --> 00:35:01,760
code generating it automatically for you

00:35:00,050 --> 00:35:03,650
and then executing it it's actually

00:35:01,760 --> 00:35:05,420
quite fast so you can actually start

00:35:03,650 --> 00:35:08,569
automating things

00:35:05,420 --> 00:35:10,579
from the ground quite quickly it reduces

00:35:08,569 --> 00:35:14,930
flakiness by handling weights as you saw

00:35:10,579 --> 00:35:17,630
most almost I think all my scripts they

00:35:14,930 --> 00:35:19,579
don't have explicit weights defined so

00:35:17,630 --> 00:35:21,680
that's actually quite helpful because I

00:35:19,579 --> 00:35:23,930
don't have to say wait for 3,000

00:35:21,680 --> 00:35:26,599
milliseconds or 4,000 milliseconds it

00:35:23,930 --> 00:35:28,280
actually handles it for me and it comes

00:35:26,599 --> 00:35:32,569
with a interactive ripple I think this

00:35:28,280 --> 00:35:35,809
is the most useful feature for me to use

00:35:32,569 --> 00:35:39,230
a tool because with Python Java I have

00:35:35,809 --> 00:35:41,510
to write a code and then see what

00:35:39,230 --> 00:35:44,180
happens but here I can see okay I can

00:35:41,510 --> 00:35:46,819
type click it it didn't work so when I

00:35:44,180 --> 00:35:49,280
said click 15 it didn't work I just said

00:35:46,819 --> 00:35:51,079
click 15 he didn't Road and it worked so

00:35:49,280 --> 00:35:53,390
I can actually interactively see what's

00:35:51,079 --> 00:35:56,270
happening with what I'm typing and it's

00:35:53,390 --> 00:35:57,470
completely open-source so hot folks have

00:35:56,270 --> 00:35:59,390
been involved in a lot of open source

00:35:57,470 --> 00:36:03,650
projects so this is another open source

00:35:59,390 --> 00:36:05,480
project and yeah it's it's quite good

00:36:03,650 --> 00:36:10,579
the documentation is quite comprehensive

00:36:05,480 --> 00:36:12,770
and you have good support in the team so

00:36:10,579 --> 00:36:14,780
these are some of the links that I

00:36:12,770 --> 00:36:18,619
wanted to share Tycho you can actually

00:36:14,780 --> 00:36:20,329
go to Tycho dot dev and you can then see

00:36:18,619 --> 00:36:22,849
what the features are you can actually

00:36:20,329 --> 00:36:24,920
check out the documentation they have a

00:36:22,849 --> 00:36:27,589
Twitter page on they have a spectrum

00:36:24,920 --> 00:36:28,790
spectrum any user related issues suppose

00:36:27,589 --> 00:36:31,339
you are not able to figure out how to

00:36:28,790 --> 00:36:33,470
use a particular function or call API

00:36:31,339 --> 00:36:36,440
you can actually ask them and they are

00:36:33,470 --> 00:36:40,040
quick to respond and they also have

00:36:36,440 --> 00:36:41,750
their github page so I've actually

00:36:40,040 --> 00:36:45,710
posted issues with the tools so suppose

00:36:41,750 --> 00:36:47,569
you want a new feature or you cannot do

00:36:45,710 --> 00:36:50,270
something with the tool you can actually

00:36:47,569 --> 00:36:52,609
post an issue in github and they and if

00:36:50,270 --> 00:36:54,230
if it's relevant and if they have

00:36:52,609 --> 00:36:58,430
already not figured out a way to do it

00:36:54,230 --> 00:36:59,299
then they can actually create it in the

00:36:58,430 --> 00:37:01,130
future releases

00:36:59,299 --> 00:37:02,540
I've actually reported few bugs and they

00:37:01,130 --> 00:37:06,589
have already been accepted so that's

00:37:02,540 --> 00:37:09,410
actually quite good so and if anyone

00:37:06,589 --> 00:37:11,930
wants to use this presentation it's

00:37:09,410 --> 00:37:14,089
actually hosted on a github page created

00:37:11,930 --> 00:37:18,319
again using JavaScript so you can

00:37:14,089 --> 00:37:18,589
actually go and clone this repo and you

00:37:18,319 --> 00:37:19,999
can

00:37:18,589 --> 00:37:24,200
we get access to this entire

00:37:19,999 --> 00:37:26,900
presentation so yes thank you guys

00:37:24,200 --> 00:37:29,719
that's my email LinkedIn address and

00:37:26,900 --> 00:37:31,609
github so any code that I've shared you

00:37:29,719 --> 00:37:36,589
can actually find it on the github page

00:37:31,609 --> 00:37:38,839
and yes you can ping me or you can send

00:37:36,589 --> 00:37:40,940
me a message on LinkedIn yeah I'm

00:37:38,839 --> 00:37:43,599
available to help so thank you guys

00:37:40,940 --> 00:37:46,880
thank you everyone thanks for listening

00:37:43,599 --> 00:37:48,589
much love it that was great

00:37:46,880 --> 00:37:51,650
give me some extra insight so what'd you

00:37:48,589 --> 00:37:53,059
guys actually did okay so quite I've got

00:37:51,650 --> 00:37:55,849
quite a good list of questions yes so

00:37:53,059 --> 00:37:58,460
I'm going to a questions based on it and

00:37:55,849 --> 00:38:00,890
as appeals offices beers because one

00:37:58,460 --> 00:38:02,690
guys behind this front for work so first

00:38:00,890 --> 00:38:04,130
question comes in and I do apologize if

00:38:02,690 --> 00:38:05,749
any of these questions being answered as

00:38:04,130 --> 00:38:07,789
natural course of their demo in their

00:38:05,749 --> 00:38:10,130
taught oh just let me know but first

00:38:07,789 --> 00:38:12,650
question comes from Indrani he says can

00:38:10,130 --> 00:38:14,599
we have multiple actions together in one

00:38:12,650 --> 00:38:17,869
statement like licking an element and a

00:38:14,599 --> 00:38:21,200
drop-down so I think I think you can you

00:38:17,869 --> 00:38:23,269
can do multiple actions but it all

00:38:21,200 --> 00:38:25,099
depends on how you script so it's using

00:38:23,269 --> 00:38:29,569
javascript so you can actually have

00:38:25,099 --> 00:38:32,569
things i've actually hang on let me show

00:38:29,569 --> 00:38:37,969
you so these are actually multiple

00:38:32,569 --> 00:38:39,680
actions right drop down to write off

00:38:37,969 --> 00:38:42,289
select this so there are actually

00:38:39,680 --> 00:38:44,749
multiple actions so I am selecting a

00:38:42,289 --> 00:38:47,390
drop down which is to the right of and

00:38:44,749 --> 00:38:50,299
selecting that particular element I can

00:38:47,390 --> 00:38:52,579
also click right into a text box or

00:38:50,299 --> 00:38:58,119
click a button so those are multiple

00:38:52,579 --> 00:38:58,119
actions and if I go to the documentation

00:39:07,749 --> 00:39:13,640
the documentation is actually quite

00:39:09,950 --> 00:39:16,969
simple as well so things like what

00:39:13,640 --> 00:39:20,109
actions you can do on the browser what

00:39:16,969 --> 00:39:20,109
actions you can do on the page

00:39:21,180 --> 00:39:25,859
what actions you can do with selectors

00:39:23,220 --> 00:39:30,089
so dollar is basically the selector for

00:39:25,859 --> 00:39:32,550
using XPath or CSS and then you have

00:39:30,089 --> 00:39:37,440
multiple things so suppose I want to

00:39:32,550 --> 00:39:40,470
click an element the document says click

00:39:37,440 --> 00:39:41,490
particularly link so it identifies what

00:39:40,470 --> 00:39:43,559
element it is so you can actually

00:39:41,490 --> 00:39:47,819
perform multiple actions yes that's

00:39:43,559 --> 00:39:49,650
that's the answer so next question comes

00:39:47,819 --> 00:39:51,900
on a hit so far is there a way to

00:39:49,650 --> 00:39:54,089
encrypt to encode any secret information

00:39:51,900 --> 00:39:55,619
like password so you can share it with

00:39:54,089 --> 00:39:59,880
other testify exposing sensitive

00:39:55,619 --> 00:40:01,920
information so I've actually not been

00:39:59,880 --> 00:40:04,200
able to figure that out I think you can

00:40:01,920 --> 00:40:06,119
it's it's a Java Script so whatever way

00:40:04,200 --> 00:40:08,700
you handle your existing JavaScript

00:40:06,119 --> 00:40:10,559
coding to handle secrets I think you can

00:40:08,700 --> 00:40:13,109
do that you can actually declare

00:40:10,559 --> 00:40:17,160
variables at the top so I've done that

00:40:13,109 --> 00:40:19,790
in say Skyscanner this test scripts i've

00:40:17,160 --> 00:40:22,410
actually declared the variable but

00:40:19,790 --> 00:40:24,990
whatever way you handle secrets you can

00:40:22,410 --> 00:40:26,640
do that in Tycho as well for JavaScript

00:40:24,990 --> 00:40:32,630
but so bill do you want to add anything

00:40:26,640 --> 00:40:35,099
here yeah so there are some we mask

00:40:32,630 --> 00:40:37,140
sensitive information for sensitive

00:40:35,099 --> 00:40:42,750
fields so it doesn't turn up in the log

00:40:37,140 --> 00:40:45,030
files but as I standard because Tycho

00:40:42,750 --> 00:40:49,230
just wants to focus on driving and

00:40:45,030 --> 00:40:51,690
automating the browser secrets what we

00:40:49,230 --> 00:40:54,119
you see how people handle secrets is

00:40:51,690 --> 00:40:58,260
passing is it has environment variables

00:40:54,119 --> 00:41:00,619
so you can pass values as environment

00:40:58,260 --> 00:41:03,930
variables and because this is a node.js

00:41:00,619 --> 00:41:09,180
ecosystem it works fine it can delete

00:41:03,930 --> 00:41:14,280
those environment variables yeah I hope

00:41:09,180 --> 00:41:16,500
that answers nobody says what if we need

00:41:14,280 --> 00:41:20,069
to click on an icon how do we specify an

00:41:16,500 --> 00:41:22,710
icon who puts in names so buttons have

00:41:20,069 --> 00:41:25,559
already shown you let me go back to the

00:41:22,710 --> 00:41:29,099
documentation so you can actually

00:41:25,559 --> 00:41:31,260
identify using button so there is

00:41:29,099 --> 00:41:32,790
actually a button but if if the button

00:41:31,260 --> 00:41:34,920
has a text you actually don't have to

00:41:32,790 --> 00:41:36,480
say click button

00:41:34,920 --> 00:41:38,369
then that you just say click get

00:41:36,480 --> 00:41:41,490
started' it will identify it for you so

00:41:38,369 --> 00:41:46,020
that's quite intuitive regarding images

00:41:41,490 --> 00:41:48,180
so if images has all all field then it

00:41:46,020 --> 00:41:50,520
can actually use the alt and then it can

00:41:48,180 --> 00:41:52,920
click on it but unfortunately most of

00:41:50,520 --> 00:41:55,500
the images say in Google slides or other

00:41:52,920 --> 00:41:58,680
things I have to use XPath of CSS

00:41:55,500 --> 00:42:02,609
selector some images are SVG so I'm not

00:41:58,680 --> 00:42:04,260
sure if we can click or I mean we can

00:42:02,609 --> 00:42:07,230
click on a sweety's but we will have to

00:42:04,260 --> 00:42:11,420
use expert but if the image has an alt

00:42:07,230 --> 00:42:11,420
we can use the alt and click on it

00:42:11,650 --> 00:42:17,090
so I think don't answer the question

00:42:13,820 --> 00:42:19,520
definitely - says can we give the wait

00:42:17,090 --> 00:42:21,590
for events downloaded on any global

00:42:19,520 --> 00:42:23,680
level for all kinds of actions is that

00:42:21,590 --> 00:42:25,839
possible in any way

00:42:23,680 --> 00:42:27,430
I think global level I think this

00:42:25,839 --> 00:42:29,380
question is for Jamila I'll just open

00:42:27,430 --> 00:42:31,510
the wait for the bill if you want to

00:42:29,380 --> 00:42:35,280
answer this question yeah there is a way

00:42:31,510 --> 00:42:35,280
to configure it at the global level to

00:42:41,010 --> 00:42:46,030
search for conflict and there's a way

00:42:44,079 --> 00:42:49,630
where you can set a few global level

00:42:46,030 --> 00:42:51,609
configurations and one waiting as one so

00:42:49,630 --> 00:42:53,740
you can wait for a particular thing wait

00:42:51,609 --> 00:42:56,349
for a particular element or wait for

00:42:53,740 --> 00:42:59,829
that element till it exists and visible

00:42:56,349 --> 00:43:08,200
so you can do that another thing I found

00:42:59,829 --> 00:43:11,200
out is that this environment so if you

00:43:08,200 --> 00:43:14,170
go to the environment variable and you

00:43:11,200 --> 00:43:16,450
click on I mean you can create a new

00:43:14,170 --> 00:43:19,720
variable so what I've done is I've

00:43:16,450 --> 00:43:24,000
changed the chromium path to my chrome

00:43:19,720 --> 00:43:26,859
instance so you can actually run

00:43:24,000 --> 00:43:28,540
Tyko with different browsers and you can

00:43:26,859 --> 00:43:31,119
define it as the environment variable

00:43:28,540 --> 00:43:33,760
and it will handle it for you so that's

00:43:31,119 --> 00:43:36,790
actually quite useful as well you can

00:43:33,760 --> 00:43:38,829
define the environment variables using

00:43:36,790 --> 00:43:40,960
some of these options here so I have

00:43:38,829 --> 00:43:43,599
what I have done is my Cobra the browser

00:43:40,960 --> 00:43:47,970
path but you can define other

00:43:43,599 --> 00:43:50,349
environment variables as well awesome

00:43:47,970 --> 00:43:52,690
question here from here can you use the

00:43:50,349 --> 00:43:57,250
same script with variables parameterised

00:43:52,690 --> 00:44:00,730
into the jas for example in a JSON

00:43:57,250 --> 00:44:02,530
string or XML so you can't not I mean

00:44:00,730 --> 00:44:05,369
you cannot do it in the script but you

00:44:02,530 --> 00:44:08,440
can do it with a test runner so like

00:44:05,369 --> 00:44:10,329
gauge Mach are just so you can actually

00:44:08,440 --> 00:44:13,210
parameterize everything in that your

00:44:10,329 --> 00:44:18,160
test Runner and then it will run in

00:44:13,210 --> 00:44:21,299
multiple modes I haven't done it I've

00:44:18,160 --> 00:44:21,299
done it briefly

00:44:28,030 --> 00:44:39,800
so creation spec so this is something

00:44:37,160 --> 00:44:44,090
using gauge I've defined the variable

00:44:39,800 --> 00:44:45,620
here and then I'm passing I mean I'm not

00:44:44,090 --> 00:44:47,450
sure if everyone is familiar with gauge

00:44:45,620 --> 00:44:48,980
but basically what I've done is I've

00:44:47,450 --> 00:44:51,500
defined the particular variable

00:44:48,980 --> 00:44:59,330
parameterize date put it in my script

00:44:51,500 --> 00:45:02,000
and then passed it into the JavaScript

00:44:59,330 --> 00:45:04,370
function taking that as an argument so

00:45:02,000 --> 00:45:07,580
yes you can parameterize and pass it not

00:45:04,370 --> 00:45:11,090
through the script but using the help of

00:45:07,580 --> 00:45:14,390
a test runner I hope that answers the

00:45:11,090 --> 00:45:16,460
question yeah so thank you got a

00:45:14,390 --> 00:45:18,560
question here from Chris's can get it

00:45:16,460 --> 00:45:20,300
City screenshot comparison you share

00:45:18,560 --> 00:45:22,220
nature and free stuff which is that you

00:45:20,300 --> 00:45:24,200
so for a journey what about when it

00:45:22,220 --> 00:45:28,100
comes to the end destination by size

00:45:24,200 --> 00:45:31,340
content comparison Shack so screenshots

00:45:28,100 --> 00:45:33,560
yes you can do as I mentioned there is

00:45:31,340 --> 00:45:40,790
actually a plugin so if you go to NPM

00:45:33,560 --> 00:45:43,100
j/s and I've not used it myself but

00:45:40,790 --> 00:45:46,190
let's see so if you search for Tycho

00:45:43,100 --> 00:45:48,710
we'll give this and there is this ty

00:45:46,190 --> 00:45:52,150
quois it's actually so visual testing so

00:45:48,710 --> 00:45:54,710
you can maybe try this plug-in and then

00:45:52,150 --> 00:45:57,980
use it for visual testing and maybe do

00:45:54,710 --> 00:46:00,680
some comparisons hope that helps I

00:45:57,980 --> 00:46:06,530
haven't tried it yet but yes it's

00:46:00,680 --> 00:46:11,120
available I'd like to add this another

00:46:06,530 --> 00:46:12,980
plug-in also Tycho is I think integrates

00:46:11,120 --> 00:46:15,980
with applitools which is an online thing

00:46:12,980 --> 00:46:20,240
for screenshot comparison but there's a

00:46:15,980 --> 00:46:22,580
screen check plugin for Tycho which can

00:46:20,240 --> 00:46:24,740
compare screenshots yeah I think it's

00:46:22,580 --> 00:46:26,900
the screen check screen check okay

00:46:24,740 --> 00:46:28,820
yeah screen check so yeah so it will do

00:46:26,900 --> 00:46:32,510
screenshot compare capture and compare

00:46:28,820 --> 00:46:36,140
as well for you Ross says will it

00:46:32,510 --> 00:46:40,340
support loading a file oh yes

00:46:36,140 --> 00:46:40,820
so you can actually are actually done it

00:46:40,340 --> 00:46:42,170
in one of the

00:46:40,820 --> 00:46:44,690
scripts let me actually show it in the

00:46:42,170 --> 00:46:48,200
script itself so here is this OB dot ICO

00:46:44,690 --> 00:46:54,140
and in the internet Heroku app I

00:46:48,200 --> 00:46:56,930
actually load that particular file yes

00:46:54,140 --> 00:47:03,320
here so attach this to file filled this

00:46:56,930 --> 00:47:05,660
so yeah you can do that Krishna says

00:47:03,320 --> 00:47:08,510
house it says report here it's like a is

00:47:05,660 --> 00:47:10,400
it unfair no or can have a HTML app or

00:47:08,510 --> 00:47:13,160
also it does include capturing

00:47:10,400 --> 00:47:14,960
screenshots and sharing results yes it

00:47:13,160 --> 00:47:16,430
does but again as I mentioned you will

00:47:14,960 --> 00:47:22,130
have to use it with the test runner so

00:47:16,430 --> 00:47:25,340
your calf gauge Jess or mocha so you can

00:47:22,130 --> 00:47:30,580
have this and let me show you

00:47:25,340 --> 00:47:37,840
so gauge actually gauge actually does

00:47:30,580 --> 00:47:46,700
reporting for you so it gets started

00:47:37,840 --> 00:47:49,880
viewing report it actually creates this

00:47:46,700 --> 00:47:51,800
report format and you can specify

00:47:49,880 --> 00:47:54,200
whether you want to see screenshots with

00:47:51,800 --> 00:47:57,080
that so yeah you can do it but not

00:47:54,200 --> 00:47:59,780
through Tyco but using Tyco with some

00:47:57,080 --> 00:48:04,670
other test runners so it's possible yes

00:47:59,780 --> 00:48:07,580
a question from Vincennes is it possible

00:48:04,670 --> 00:48:11,990
to capture its found value and use it in

00:48:07,580 --> 00:48:14,780
a next step I think but that's again

00:48:11,990 --> 00:48:17,350
JavaScript so you can actually identify

00:48:14,780 --> 00:48:23,470
an element and say whether it exists or

00:48:17,350 --> 00:48:23,470
look for the value of it say text

00:48:25,330 --> 00:48:31,990
sorry guys Mike

00:48:26,980 --> 00:48:35,170
buta memories a bit low so so you can

00:48:31,990 --> 00:48:39,310
actually identify the text say of a

00:48:35,170 --> 00:48:41,560
given element and use it and then pass

00:48:39,310 --> 00:48:45,310
it on to the next step but as the beam

00:48:41,560 --> 00:48:50,619
do you want to add anything here yeah if

00:48:45,310 --> 00:48:55,960
you are not very clear about how to use

00:48:50,619 --> 00:48:57,970
return values but you can query using

00:48:55,960 --> 00:49:00,940
telcos API and capture the text value

00:48:57,970 --> 00:49:03,369
and then use that and I think there was

00:49:00,940 --> 00:49:05,170
another question we probably didn't

00:49:03,369 --> 00:49:07,810
answer which is about exhibitions and

00:49:05,170 --> 00:49:14,050
that's how assertions are also done by

00:49:07,810 --> 00:49:18,090
varying values from those API is and

00:49:14,050 --> 00:49:59,080
using it in in custom assertion library

00:49:18,090 --> 00:50:02,350
go to the terminal and then you can use

00:49:59,080 --> 00:50:06,720
something like so suppose you want to

00:50:02,350 --> 00:50:10,890
pass the URL or assert the URL you can

00:50:06,720 --> 00:50:15,520
see so yeah you have options to do it

00:50:10,890 --> 00:50:17,590
but I have not done it at the moment so

00:50:15,520 --> 00:50:23,130
you can actually pass this way value to

00:50:17,590 --> 00:50:23,130
some other command or in the next step

00:50:23,670 --> 00:50:28,990
thank you question here from you wanna

00:50:26,680 --> 00:50:31,060
this it has a paralyzation option

00:50:28,990 --> 00:50:35,290
options I

00:50:31,060 --> 00:50:36,550
yes it does but not with itself you will

00:50:35,290 --> 00:50:38,380
have to actually use parallelization

00:50:36,550 --> 00:50:40,000
through the test runner so you can

00:50:38,380 --> 00:50:42,450
actually run multiple scenarios in

00:50:40,000 --> 00:50:42,450
parallel

00:50:42,490 --> 00:50:48,650
so yeah you can do that but yeah you

00:50:45,079 --> 00:50:52,069
will have to use a test run upon it okay

00:50:48,650 --> 00:50:54,260
pretty says I'll today to drive various

00:50:52,069 --> 00:50:57,920
scenarios like using a multiple locking

00:50:54,260 --> 00:51:00,710
for a webpage so again I think you will

00:50:57,920 --> 00:51:02,809
have to do it using this method so you

00:51:00,710 --> 00:51:06,049
will have to mention what you want to do

00:51:02,809 --> 00:51:09,710
and script your scenario and then create

00:51:06,049 --> 00:51:12,140
it and yes so you can do it say multiple

00:51:09,710 --> 00:51:14,930
logins but you will have to create

00:51:12,140 --> 00:51:18,250
different instances maybe so you might

00:51:14,930 --> 00:51:18,250
have to do it through your test runner

00:51:19,630 --> 00:51:26,599
here to apologize for crashing into a

00:51:23,170 --> 00:51:29,329
monster and a can we access the table

00:51:26,599 --> 00:51:31,029
contents with table salt mine by using a

00:51:29,329 --> 00:51:34,400
column header

00:51:31,029 --> 00:51:36,859
I've actually let me see so here table

00:51:34,400 --> 00:51:40,039
cell row or table cell below text so

00:51:36,859 --> 00:51:42,680
yeah you can do that good

00:51:40,039 --> 00:51:48,680
I mean assess how to read right actor

00:51:42,680 --> 00:51:50,140
from DB or exam again I think to the

00:51:48,680 --> 00:51:53,420
test runner but this is something

00:51:50,140 --> 00:51:57,740
Seville I think you might be better if

00:51:53,420 --> 00:52:00,500
you'll answer sure again so Tyco is

00:51:57,740 --> 00:52:02,690
focused on the browser testing aspect

00:52:00,500 --> 00:52:08,029
automating the browser but the good part

00:52:02,690 --> 00:52:11,839
is it works with a node.js ecosystem so

00:52:08,029 --> 00:52:14,690
there are a lot of libraries for you

00:52:11,839 --> 00:52:17,359
know accessing the DB or Excel using

00:52:14,690 --> 00:52:19,130
node.js so the whole idea is to mix

00:52:17,359 --> 00:52:21,769
browser automation that's provided by

00:52:19,130 --> 00:52:24,079
Tyco with no J's and use whatever

00:52:21,769 --> 00:52:26,839
library that you want for testing even

00:52:24,079 --> 00:52:30,259
if you want to automate some part of the

00:52:26,839 --> 00:52:33,740
browser then use node.js to hit some API

00:52:30,259 --> 00:52:35,240
to post some data or something and then

00:52:33,740 --> 00:52:38,029
continue with the rest of the automation

00:52:35,240 --> 00:52:40,759
so that it's it's flexible that way

00:52:38,029 --> 00:52:43,009
so in short everything is possible

00:52:40,759 --> 00:52:47,359
everything that is possible why I know

00:52:43,009 --> 00:52:49,670
Jace is possible one yeah intestine I

00:52:47,359 --> 00:52:51,230
think I just wanted to add so I found

00:52:49,670 --> 00:52:53,940
this script I've actually uploaded it

00:52:51,230 --> 00:52:55,560
and have given the source so

00:52:53,940 --> 00:52:57,119
person actually used two different

00:52:55,560 --> 00:53:00,990
libraries when he strike when when his

00:52:57,119 --> 00:53:05,339
lighthouse and then it created a

00:53:00,990 --> 00:53:07,349
lighthouse report so suppose I want to

00:53:05,339 --> 00:53:10,440
run a light of the report on BBC not

00:53:07,349 --> 00:53:13,970
coded UK let me just quickly show I

00:53:10,440 --> 00:53:13,970
think this will be the last thing oh

00:53:17,839 --> 00:53:28,349
yeah so just just have a look here it's

00:53:24,329 --> 00:53:30,060
open the e page so this is just to show

00:53:28,349 --> 00:53:33,329
that it actually can work with other

00:53:30,060 --> 00:53:37,800
node libraries so it's open BBC dot code

00:53:33,329 --> 00:53:46,640
at UK it's did some things it's trying

00:53:37,800 --> 00:53:56,359
to reload the page again and wait wait

00:53:46,640 --> 00:54:04,310
then it closes again that's something

00:53:56,359 --> 00:54:04,310
closest audit dot HTML so if I open this

00:54:09,560 --> 00:54:13,500
so it's actually created a light house

00:54:11,970 --> 00:54:15,540
report using a Tycho

00:54:13,500 --> 00:54:17,490
I mean via Meuse Tycho to navigate to a

00:54:15,540 --> 00:54:19,800
page and then use light house to

00:54:17,490 --> 00:54:21,630
generate a report so yeah you can play

00:54:19,800 --> 00:54:24,329
with it and you can connect it with

00:54:21,630 --> 00:54:29,010
different node libraries and do multiple

00:54:24,329 --> 00:54:32,670
things so yeah that's refreshing come on

00:54:29,010 --> 00:54:34,619
last question from Charlotte coming in

00:54:32,670 --> 00:54:41,250
spring with browserstack Oh any of the

00:54:34,619 --> 00:54:42,780
cloud I leave that to Agatha so there is

00:54:41,250 --> 00:54:44,430
no integration browser stack because

00:54:42,780 --> 00:54:46,020
browser stack is heavily focused on

00:54:44,430 --> 00:54:51,150
webdriver and selenium

00:54:46,020 --> 00:54:53,520
however by default ICO runs on headless

00:54:51,150 --> 00:54:56,910
mode and it works well with headless

00:54:53,520 --> 00:54:58,950
testing so it works well if you want to

00:54:56,910 --> 00:55:03,690
integrate it into docker and run it on a

00:54:58,950 --> 00:55:06,660
cloud and all of that so that's possible

00:55:03,690 --> 00:55:07,310
provided you run it in a docker

00:55:06,660 --> 00:55:09,050
container

00:55:07,310 --> 00:55:14,120
can be hosted anywhere that support

00:55:09,050 --> 00:55:15,710
stock yes and thank you very much guys

00:55:14,120 --> 00:55:17,420
um just get off the chat people really

00:55:15,710 --> 00:55:18,980
enjoyed that demo and the information

00:55:17,420 --> 00:55:19,850
able to fight really really really

00:55:18,980 --> 00:55:21,830
appreciate it

00:55:19,850 --> 00:55:23,450
we've got to lean coffee more himself

00:55:21,830 --> 00:55:25,010
tomorrow morning us you know limited

00:55:23,450 --> 00:55:28,100
spaces we'll be talking about psycho

00:55:25,010 --> 00:55:29,810
over test tools on the market we've got

00:55:28,100 --> 00:55:33,110
a chess set up for next week as you know

00:55:29,810 --> 00:55:34,550
we do these events weekly now sir next

00:55:33,110 --> 00:55:36,800
week the also mind booking from be

00:55:34,550 --> 00:55:38,390
Jess's can be in store for us and Tyler

00:55:36,800 --> 00:55:40,040
that is going to be when an app for

00:55:38,390 --> 00:55:42,200
mattress and he's going to look at how

00:55:40,040 --> 00:55:45,020
tryst acceptance and empowerment can

00:55:42,200 --> 00:55:46,720
affect a team or project so please do

00:55:45,020 --> 00:55:48,950
sign up that's of interest rate for

00:55:46,720 --> 00:55:52,040
those links that you share them it our

00:55:48,950 --> 00:55:53,750
while do as well add those to the actual

00:55:52,040 --> 00:55:56,090
event page so they've got a triple bond

00:55:53,750 --> 00:55:57,890
that's reference yeah yeah and yet any

00:55:56,090 --> 00:56:00,860
questions reach out to any of us and

00:55:57,890 --> 00:56:03,200
we'll be hurt very much guys stay safe

00:56:00,860 --> 00:56:07,060
Stacy and see you the next one take care

00:56:03,200 --> 00:56:07,060

YouTube URL: https://www.youtube.com/watch?v=g7kwk6KXfTQ


