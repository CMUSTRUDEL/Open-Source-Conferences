Title: What is a Kubernetes and Why Would I Want One? - Devux - January 2018
Publication date: 2018-02-02
Playlist: Devux
Description: 
	What is a Kubernetes and why would I want one?

Jonathan: https://www.linkedin.com/in/jonathan-lloyd-51095446/

The way we deploy software in the cloud is changing faster every day. Unless you spend all day "scaling up the pods" you can get lost amongst all the new tech. If you've ever wondered "what is a Kubernetes and why would I want one?" This is the talk for you.


Captions: 
	00:00:00,030 --> 00:00:07,170
hello welcome to my talk on kubernetes

00:00:03,210 --> 00:00:09,179
and container orchestration subtitle I

00:00:07,170 --> 00:00:13,769
don't know what kubernetes is and at

00:00:09,179 --> 00:00:15,540
this point I'm too afraid to ask maybe

00:00:13,769 --> 00:00:17,670
in this talk everyone who wants to

00:00:15,540 --> 00:00:18,930
understand containers and kubernetes but

00:00:17,670 --> 00:00:20,699
doesn't get to work with infrastructure

00:00:18,930 --> 00:00:23,189
every day if you do get to work with

00:00:20,699 --> 00:00:25,410
infrastructure every day don't worry

00:00:23,189 --> 00:00:27,650
there'll be plenty of gifts of cue

00:00:25,410 --> 00:00:31,740
animals

00:00:27,650 --> 00:00:34,860
first things first Who am I why am I

00:00:31,740 --> 00:00:36,750
talking to you my name is Jonathan I've

00:00:34,860 --> 00:00:39,660
spent the past couple of years building

00:00:36,750 --> 00:00:42,390
micro services in golang and Python at

00:00:39,660 --> 00:00:47,129
various companies that run on keeping at

00:00:42,390 --> 00:00:49,739
ease I work at pusher where we build

00:00:47,129 --> 00:00:52,649
real-time api's that help you build and

00:00:49,739 --> 00:00:54,989
ship features faster our main product is

00:00:52,649 --> 00:00:56,399
a hosted WebSocket gateway that lets you

00:00:54,989 --> 00:00:58,350
build web apps that without refreshing

00:00:56,399 --> 00:00:59,969
the page and we're bringing out some

00:00:58,350 --> 00:01:02,219
exciting new products such as chat kit

00:00:59,969 --> 00:01:04,559
which gives you real-time chat back-end

00:01:02,219 --> 00:01:06,090
out of the box and push notifications

00:01:04,559 --> 00:01:08,880
which lets you send mobile push

00:01:06,090 --> 00:01:11,189
notifications at scale most importantly

00:01:08,880 --> 00:01:15,090
all of our new services run on keeping

00:01:11,189 --> 00:01:17,090
at ease so I'm gonna spend the next few

00:01:15,090 --> 00:01:19,320
minutes explaining what containers are

00:01:17,090 --> 00:01:22,970
why you'd want to orchestrate them and

00:01:19,320 --> 00:01:25,890
how Kuban Artie's can help you with that

00:01:22,970 --> 00:01:27,689
so what is a container the best way to

00:01:25,890 --> 00:01:28,799
understand containers is by

00:01:27,689 --> 00:01:30,810
understanding how they're used in

00:01:28,799 --> 00:01:34,979
context so I'm going to be explaining

00:01:30,810 --> 00:01:36,700
containers through the tale of snaps to

00:01:34,979 --> 00:01:38,870
ground

00:01:36,700 --> 00:01:41,210
snaps to Graham as a hot new startup

00:01:38,870 --> 00:01:44,480
that's tackling a deep and important

00:01:41,210 --> 00:01:47,330
social problem by allowing its users to

00:01:44,480 --> 00:01:50,350
add 3d dog faces to pictures of smashed

00:01:47,330 --> 00:01:50,350
avocado on toast

00:01:51,580 --> 00:01:55,400
snaps Graham is your basic web app

00:01:53,630 --> 00:01:57,080
running on Ruby on Rails it has a bunch

00:01:55,400 --> 00:01:59,600
of interesting features such as image

00:01:57,080 --> 00:02:02,000
hosting analytics it's a simple

00:01:59,600 --> 00:02:04,880
application runs as a single application

00:02:02,000 --> 00:02:11,840
from a single codebase which makes Matt

00:02:04,880 --> 00:02:13,340
a snaps to Graham I'm all Olaf but as

00:02:11,840 --> 00:02:15,470
snaps to ground grows they start running

00:02:13,340 --> 00:02:17,510
into the limitations of the monolithic

00:02:15,470 --> 00:02:19,100
architecture that web framework is not

00:02:17,510 --> 00:02:20,390
the best at doing all of the tasks they

00:02:19,100 --> 00:02:22,970
need compared to more specialized

00:02:20,390 --> 00:02:24,050
technologies as their engineering team

00:02:22,970 --> 00:02:25,400
grows they're finding it difficult

00:02:24,050 --> 00:02:27,980
because they're stepping on each other's

00:02:25,400 --> 00:02:29,540
code in the codebase and some features

00:02:27,980 --> 00:02:31,070
that are out get overloaded and they're

00:02:29,540 --> 00:02:35,090
struggling to deal with they're scaling

00:02:31,070 --> 00:02:36,980
requirements they then hear about an

00:02:35,090 --> 00:02:39,650
exciting new architectural paradigm

00:02:36,980 --> 00:02:40,970
micro services with micro services

00:02:39,650 --> 00:02:42,739
instead of running as a single

00:02:40,970 --> 00:02:44,540
application you break the application up

00:02:42,739 --> 00:02:46,880
into smaller single responsibility

00:02:44,540 --> 00:02:49,190
services that work together over a

00:02:46,880 --> 00:02:52,700
network to achieve the results you want

00:02:49,190 --> 00:02:54,800
in your application this has several

00:02:52,700 --> 00:02:56,060
advantages first you can choose the

00:02:54,800 --> 00:02:57,650
right tool for the job if there's a

00:02:56,060 --> 00:02:59,209
language or tech stack that's more

00:02:57,650 --> 00:03:01,640
appropriate for a particular feature you

00:02:59,209 --> 00:03:05,140
can just use that you can even use

00:03:01,640 --> 00:03:11,300
off-the-shelf open-source solutions or

00:03:05,140 --> 00:03:12,860
hosted SAS solutions secondly your team

00:03:11,300 --> 00:03:15,470
can now work in separate code bases

00:03:12,860 --> 00:03:17,000
separated by clean api's which makes it

00:03:15,470 --> 00:03:18,830
easier for your engineering team to work

00:03:17,000 --> 00:03:19,420
in parallel and not step on each other's

00:03:18,830 --> 00:03:22,310
toes

00:03:19,420 --> 00:03:24,200
finally you can tackle scaling by having

00:03:22,310 --> 00:03:27,590
the right operational and scaling

00:03:24,200 --> 00:03:29,120
strategies for each service but the most

00:03:27,590 --> 00:03:31,840
important thing is that all the cool

00:03:29,120 --> 00:03:37,630
kids are doing it you've got Google

00:03:31,840 --> 00:03:37,630
Netflix uber eBay

00:03:38,150 --> 00:03:42,290
so it's not so Graham take them on with

00:03:40,350 --> 00:03:45,360
they identify all the different

00:03:42,290 --> 00:03:49,350
responsibilities and features do some

00:03:45,360 --> 00:03:51,030
engineering and end up with snaps to

00:03:49,350 --> 00:03:53,010
Graham on microservices their

00:03:51,030 --> 00:03:55,560
authentication is now a golang service

00:03:53,010 --> 00:04:00,810
their analytics and now some nodejs

00:03:55,560 --> 00:04:02,100
thing this is all well and good but how

00:04:00,810 --> 00:04:04,350
are you going to deploy all of these

00:04:02,100 --> 00:04:06,420
services in the old world things are

00:04:04,350 --> 00:04:09,210
easy you installed Ruby on Rails on a

00:04:06,420 --> 00:04:11,100
computer and off you go in the new world

00:04:09,210 --> 00:04:12,840
things are a bit more difficult you have

00:04:11,100 --> 00:04:15,600
to run multiple services on the same

00:04:12,840 --> 00:04:18,420
machine this is actually more difficult

00:04:15,600 --> 00:04:20,190
than it sounds the dashboard needs a

00:04:18,420 --> 00:04:21,690
different Java version to the reporting

00:04:20,190 --> 00:04:23,460
system the logging system keeps

00:04:21,690 --> 00:04:26,340
overflowing the disk and crashing the

00:04:23,460 --> 00:04:31,050
backend this is not fun for anyone

00:04:26,340 --> 00:04:34,400
involved the solution to snaps to

00:04:31,050 --> 00:04:36,660
Graham's woes is containerization

00:04:34,400 --> 00:04:40,350
wikipedia defines containerization like

00:04:36,660 --> 00:04:44,910
that which is swart of easy to

00:04:40,350 --> 00:04:46,320
understand not really but I'm here to

00:04:44,910 --> 00:04:48,630
tell you that you already know what

00:04:46,320 --> 00:04:51,120
containerization is you use

00:04:48,630 --> 00:04:54,500
containerized applications every day you

00:04:51,120 --> 00:04:57,360
do that when you use your phone a

00:04:54,500 --> 00:04:59,220
Facebook app can't see the files created

00:04:57,360 --> 00:05:01,590
by the Twitter application the Maps

00:04:59,220 --> 00:05:03,570
application can't see the YouTube videos

00:05:01,590 --> 00:05:05,940
that you're streaming that's

00:05:03,570 --> 00:05:07,860
containerization you can think of

00:05:05,940 --> 00:05:09,480
containerization as operating system

00:05:07,860 --> 00:05:11,220
enforced isolation between the different

00:05:09,480 --> 00:05:15,690
software services running on your

00:05:11,220 --> 00:05:16,950
computer this allows our services to run

00:05:15,690 --> 00:05:18,990
together without interfering with each

00:05:16,950 --> 00:05:20,700
other each service can run as though

00:05:18,990 --> 00:05:23,640
it's the only application running on the

00:05:20,700 --> 00:05:25,230
machine that always great tools to run

00:05:23,640 --> 00:05:27,720
containers the most famous is obviously

00:05:25,230 --> 00:05:32,240
docker but there are others as well such

00:05:27,720 --> 00:05:33,360
as rocket lxd and run sea amongst others

00:05:32,240 --> 00:05:34,650
hooray

00:05:33,360 --> 00:05:37,020
snatcher ground has successfully

00:05:34,650 --> 00:05:41,400
deployed their new fancy micro service

00:05:37,020 --> 00:05:44,050
architecture not quite snaps Graham has

00:05:41,400 --> 00:05:49,220
one more thing to worry about

00:05:44,050 --> 00:05:51,110
orchestration like most modern companies

00:05:49,220 --> 00:05:52,940
snaps to Graham runs their services in

00:05:51,110 --> 00:05:54,860
the cloud which means instead of just

00:05:52,940 --> 00:05:58,070
buying a computer and shoving it in a

00:05:54,860 --> 00:05:59,930
cupboard they rent some computers that

00:05:58,070 --> 00:06:02,960
Amazon has bought and shoved in a

00:05:59,930 --> 00:06:04,820
cupboard renting computers from Amazon

00:06:02,960 --> 00:06:06,669
has its advantages though if your system

00:06:04,820 --> 00:06:09,500
gets overloaded you can just rent more

00:06:06,669 --> 00:06:11,540
that's how you scale in the cloud but

00:06:09,500 --> 00:06:13,669
that begs the question if we're scaling

00:06:11,540 --> 00:06:15,350
our cluster in real time how do we get

00:06:13,669 --> 00:06:18,380
our containerized services onto the

00:06:15,350 --> 00:06:20,510
correct nodes when we need them that is

00:06:18,380 --> 00:06:23,690
one of the problems of orchestration and

00:06:20,510 --> 00:06:28,550
that is where kubernetes can come in to

00:06:23,690 --> 00:06:30,020
help kubernetes is a piece of open

00:06:28,550 --> 00:06:31,490
source software from Google but make

00:06:30,020 --> 00:06:33,470
sure your containers are running where

00:06:31,490 --> 00:06:36,199
they need to be when they need to be but

00:06:33,470 --> 00:06:38,510
how does it work the first step is to

00:06:36,199 --> 00:06:41,840
install kubernetes on the nodes in your

00:06:38,510 --> 00:06:43,639
cluster one node becomes the master node

00:06:41,840 --> 00:06:47,139
that controls the cluster the rest

00:06:43,639 --> 00:06:49,700
worker nodes that run your containers

00:06:47,139 --> 00:06:51,289
the master nodes the boss we tell the

00:06:49,700 --> 00:06:52,849
master node how many instances of each

00:06:51,289 --> 00:06:55,820
service we want which can and can't

00:06:52,849 --> 00:06:57,710
share nodes the master node then goes

00:06:55,820 --> 00:06:59,479
away and works out how to assign

00:06:57,710 --> 00:07:03,310
services to no.2 based on those

00:06:59,479 --> 00:07:05,300
requirements the worker nodes

00:07:03,310 --> 00:07:07,460
periodically query the master node

00:07:05,300 --> 00:07:09,110
asking asking which containers they

00:07:07,460 --> 00:07:10,340
should currently be running if they're

00:07:09,110 --> 00:07:12,260
not running the containers they should

00:07:10,340 --> 00:07:14,750
be the worker nodes spring into action

00:07:12,260 --> 00:07:17,260
and get the right containers running in

00:07:14,750 --> 00:07:19,430
real-time

00:07:17,260 --> 00:07:21,800
snaps Graham is now running their micro

00:07:19,430 --> 00:07:22,220
services at scale and users across the

00:07:21,800 --> 00:07:24,440
world

00:07:22,220 --> 00:07:25,789
rejoice that's all well and good for

00:07:24,440 --> 00:07:27,139
snapped Graham with their amazing team

00:07:25,789 --> 00:07:28,820
of engineers and cloud infrastructure

00:07:27,139 --> 00:07:30,650
experts but how can you get started with

00:07:28,820 --> 00:07:32,919
kubernetes today when you have this

00:07:30,650 --> 00:07:32,919
evening

00:07:35,620 --> 00:07:39,160
the first step to getting started with

00:07:37,150 --> 00:07:41,170
kubernetes is to get your hands on a

00:07:39,160 --> 00:07:43,330
cluster there are two ways I'd recommend

00:07:41,170 --> 00:07:46,840
doing this the first is Google cloud

00:07:43,330 --> 00:07:48,970
platform Google offer a 12 month free

00:07:46,840 --> 00:07:51,250
trial which gives you $300 worth of free

00:07:48,970 --> 00:07:53,680
cloud services you can use this free

00:07:51,250 --> 00:07:55,690
credit to get their kubernetes engine

00:07:53,680 --> 00:08:00,250
product that gives you a full cluster

00:07:55,690 --> 00:08:01,300
managed by Google for free the second

00:08:00,250 --> 00:08:04,810
option I'd like to tell you about is

00:08:01,300 --> 00:08:06,850
mini cube mini cube is an open source

00:08:04,810 --> 00:08:08,440
project that lets you run a single node

00:08:06,850 --> 00:08:10,930
cube in a t's cluster in a virtual

00:08:08,440 --> 00:08:12,340
machine on your laptop it's a little

00:08:10,930 --> 00:08:15,460
less fully featured than a full cluster

00:08:12,340 --> 00:08:17,320
but it's a great way to get started you

00:08:15,460 --> 00:08:21,280
can get your hands on mini cube by going

00:08:17,320 --> 00:08:23,020
to their github repository once you've

00:08:21,280 --> 00:08:27,100
got access to Kuban at ease the next

00:08:23,020 --> 00:08:28,420
question is to learn how to use it the

00:08:27,100 --> 00:08:30,220
kubernetes project has loads of great

00:08:28,420 --> 00:08:31,330
documentation my favorite being an

00:08:30,220 --> 00:08:32,920
interactive tutorial

00:08:31,330 --> 00:08:35,890
they takes you through setting up a

00:08:32,920 --> 00:08:38,110
simple service on your cluster you can

00:08:35,890 --> 00:08:42,790
get access to this on the project

00:08:38,110 --> 00:08:44,320
website once you're all set up the only

00:08:42,790 --> 00:08:46,600
thing left is to get deploying and

00:08:44,320 --> 00:08:50,770
harness the full power of Kuban at ease

00:08:46,600 --> 00:08:53,470
in your business so in sorry containers

00:08:50,770 --> 00:08:55,690
our operating system isolated processes

00:08:53,470 --> 00:08:58,200
running can tail containers at scale

00:08:55,690 --> 00:09:00,100
requires automated orchestration and

00:08:58,200 --> 00:09:02,200
canoe burn at ease orchestrate your

00:09:00,100 --> 00:09:08,820
containers by using your requirements to

00:09:02,200 --> 00:09:08,820
assign nodes to and that's all the rest

00:09:12,320 --> 00:09:14,380

YouTube URL: https://www.youtube.com/watch?v=Dg-rl0Krs-4


