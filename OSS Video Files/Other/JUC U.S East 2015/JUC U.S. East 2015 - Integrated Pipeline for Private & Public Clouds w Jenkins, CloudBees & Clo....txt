Title: JUC U.S. East 2015 - Integrated Pipeline for Private & Public Clouds w Jenkins, CloudBees & Clo...
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Jamie O'Meara, Pivotal

This presentation will highlight an integrated development process that involves Java and non-Java code built with CloudBees Jenkins Enterprise and deployed to CloudFoundry. A software lifecycle of continuous delivery from source code control (Git) to Jenkins build (Maven and Gradle) to live deployment on a Cloud Foundry instance will be shown. We will demo using Jenkins to do a blue/green application deployment. Blue/green deployment as defined in continuous delivery and well described by Martin Fowler is having two environments that you can easily switch between without downtime. With a Cloud Foundry blue/green Jenkins deployment, you can push a new version of the application and have a software router add that to an existing version of the application's route. The two versions are then load-balanced, allowing for testing of the new version and easy replacement or fall-back to the existing version. Running jobs on private and public clouds with deploy to either/both Jenkins running on a PaaS and integrated into the PaaS * full development lifecycle automated with Jenkins. We will run a hands-on demo and show the beauty and simplicity of an integrated build pipeline with Jenkins and Cloud Foundry.
Captions: 
	00:00:14,990 --> 00:00:19,250
if you are here to learn about

00:00:17,660 --> 00:00:21,500
integrated pipe lines with private and

00:00:19,250 --> 00:00:23,150
public clouds using cloudbees jenkins

00:00:21,500 --> 00:00:26,450
artifactory and pivotal cloud foundry

00:00:23,150 --> 00:00:28,130
you are in the right place I am Jamie

00:00:26,450 --> 00:00:30,230
O'Mara I'm the guy that will be taking

00:00:28,130 --> 00:00:32,960
45 minutes of your day today hopefully

00:00:30,230 --> 00:00:35,650
to not only entertain you but to

00:00:32,960 --> 00:00:39,260
enlighten you about building pipelines

00:00:35,650 --> 00:00:41,739
just a quick a little bit about myself I

00:00:39,260 --> 00:00:44,000
work for pivotal so I've been there

00:00:41,739 --> 00:00:46,730
since the start for about three years

00:00:44,000 --> 00:00:49,250
now but my primary focus is a cloud

00:00:46,730 --> 00:00:52,309
foundry enthusiasts as well as a very

00:00:49,250 --> 00:00:54,860
specialized in helping customers look at

00:00:52,309 --> 00:00:57,530
using paths for things like continuous

00:00:54,860 --> 00:00:58,850
delivery and employment prior to that I

00:00:57,530 --> 00:01:00,530
have about 20 years of software

00:00:58,850 --> 00:01:02,629
engineering experience and this is my

00:01:00,530 --> 00:01:04,699
twitter handle and so one of the things

00:01:02,629 --> 00:01:06,619
that i like to do at conferences is also

00:01:04,699 --> 00:01:07,580
provide a unique fact about myself so

00:01:06,619 --> 00:01:09,830
that way if you think that the

00:01:07,580 --> 00:01:11,030
presentation wasn't very good and you

00:01:09,830 --> 00:01:12,860
happen to be walking down the hall and

00:01:11,030 --> 00:01:14,960
you see me we have something else to

00:01:12,860 --> 00:01:17,659
talk about so fortunately for me last

00:01:14,960 --> 00:01:20,030
week I was in Maui on a vacation with my

00:01:17,659 --> 00:01:22,310
family and I was able to knock off a

00:01:20,030 --> 00:01:24,560
couple of bucket-list items when I did a

00:01:22,310 --> 00:01:26,359
little cliff diving in Maui it was not

00:01:24,560 --> 00:01:28,250
40 or 50 feet tall I can tell you right

00:01:26,359 --> 00:01:30,109
now is only about 20 feet but it was a

00:01:28,250 --> 00:01:32,590
lot of fun and then for the first time

00:01:30,109 --> 00:01:34,759
in my life I did surfing so I've been a

00:01:32,590 --> 00:01:36,979
snowboarder but I was able to actually

00:01:34,759 --> 00:01:38,299
do some surfing and this picture here

00:01:36,979 --> 00:01:40,700
which you may not be able to see real

00:01:38,299 --> 00:01:42,409
well does prove it and I am that one guy

00:01:40,700 --> 00:01:44,689
that's standing right there in the black

00:01:42,409 --> 00:01:45,829
shirt so it was it was a lot of fun if

00:01:44,689 --> 00:01:51,319
you ever get a chance to do it i would

00:01:45,829 --> 00:01:53,149
highly recommend it so one of the things

00:01:51,319 --> 00:01:57,049
that i really wanted to talk to you guys

00:01:53,149 --> 00:01:59,090
about today is that I feel that the

00:01:57,049 --> 00:02:01,100
software development industry is kind of

00:01:59,090 --> 00:02:04,159
in there entering into a new era and

00:02:01,100 --> 00:02:05,899
that era is placing a lot of emphasis on

00:02:04,159 --> 00:02:08,390
the software delivery process and

00:02:05,899 --> 00:02:10,130
delivering things faster so if you look

00:02:08,390 --> 00:02:12,110
at the companies that are listed on here

00:02:10,130 --> 00:02:14,209
as that has been mentioned earlier these

00:02:12,110 --> 00:02:15,709
are the unicorns of the industry

00:02:14,209 --> 00:02:17,360
although I don't necessarily always

00:02:15,709 --> 00:02:18,680
agree with that terminology because I

00:02:17,360 --> 00:02:21,380
think these are the models that we want

00:02:18,680 --> 00:02:22,970
to set ourselves to but if you look at

00:02:21,380 --> 00:02:25,370
these these companies have been very

00:02:22,970 --> 00:02:26,000
disruptive in their industry for a lot

00:02:25,370 --> 00:02:27,950
of different

00:02:26,000 --> 00:02:29,810
reasons but I think what you'll notice

00:02:27,950 --> 00:02:32,600
about them is they all have one thing in

00:02:29,810 --> 00:02:34,490
common and that is they have very active

00:02:32,600 --> 00:02:40,010
software delivery cycles and they're

00:02:34,490 --> 00:02:42,500
able to deliver very frequently now if

00:02:40,010 --> 00:02:45,650
you actually take a look at some of the

00:02:42,500 --> 00:02:49,010
examples here for example square and a

00:02:45,650 --> 00:02:51,620
B&B these have both released their

00:02:49,010 --> 00:02:53,660
software this year 9 and 12 times

00:02:51,620 --> 00:02:57,080
respectively from the iOS application

00:02:53,660 --> 00:03:02,750
perspective 9 to 12 releases per year so

00:02:57,080 --> 00:03:04,220
far today another one of the companies

00:03:02,750 --> 00:03:05,390
that are very disruptive and this is

00:03:04,220 --> 00:03:07,130
uber and I don't know if you guys use

00:03:05,390 --> 00:03:08,390
uber uber a lot but I do this was

00:03:07,130 --> 00:03:10,340
actually a marketing blitz that I

00:03:08,390 --> 00:03:15,590
received from uber within the last

00:03:10,340 --> 00:03:18,830
couple of weeks and in the in in 2013

00:03:15,590 --> 00:03:21,080
some 450,000 users were actively using

00:03:18,830 --> 00:03:23,989
uber and launching the app every week

00:03:21,080 --> 00:03:25,220
and based on this marketing blitz what I

00:03:23,989 --> 00:03:27,920
did is I kind of went back and started

00:03:25,220 --> 00:03:30,290
to look at my usages of uber and the one

00:03:27,920 --> 00:03:31,910
thing that I noticed in in the was the

00:03:30,290 --> 00:03:33,980
impact it actually had on my business

00:03:31,910 --> 00:03:35,750
travel so in the 22 months that I've

00:03:33,980 --> 00:03:38,209
been there I've had 40 transactions with

00:03:35,750 --> 00:03:40,730
them with an average fair price of about

00:03:38,209 --> 00:03:41,870
forty seven dollars which equated to

00:03:40,730 --> 00:03:47,060
about nineteen hundred dollars in

00:03:41,870 --> 00:03:48,230
business that I've done with uber now

00:03:47,060 --> 00:03:49,670
one of the things that I noticed in the

00:03:48,230 --> 00:03:52,100
behavior I notice about uber was their

00:03:49,670 --> 00:03:53,840
ability to also deliver software so that

00:03:52,100 --> 00:03:55,549
in the last two months I've noticed that

00:03:53,840 --> 00:04:00,170
their iOS application has been released

00:03:55,549 --> 00:04:01,880
eight times in two months now all of

00:04:00,170 --> 00:04:03,440
these examples have given you today have

00:04:01,880 --> 00:04:05,570
been on the client side of iOS

00:04:03,440 --> 00:04:06,950
applications but if you start to think

00:04:05,570 --> 00:04:08,930
about that there's a lot of coordination

00:04:06,950 --> 00:04:12,470
that has to happen with back-end systems

00:04:08,930 --> 00:04:14,360
too and so we need solutions to kind of

00:04:12,470 --> 00:04:16,310
bring this together to make the delivery

00:04:14,360 --> 00:04:21,169
of the front-end and the backend systems

00:04:16,310 --> 00:04:23,690
together now I get asked this question

00:04:21,169 --> 00:04:25,280
just about every customer is how do

00:04:23,690 --> 00:04:28,190
these kind of companies do that how do

00:04:25,280 --> 00:04:29,270
we become more uber like in our and our

00:04:28,190 --> 00:04:32,240
philosophy and I think it's very

00:04:29,270 --> 00:04:35,510
important to remember that these

00:04:32,240 --> 00:04:36,950
companies didn't necessarily start out

00:04:35,510 --> 00:04:38,270
that way but what they did is they built

00:04:36,950 --> 00:04:41,810
culture around

00:04:38,270 --> 00:04:43,550
change and and even when I watch pivotal

00:04:41,810 --> 00:04:44,570
go through this this is pivotal labs I

00:04:43,550 --> 00:04:46,670
don't know if anybody's really familiar

00:04:44,570 --> 00:04:48,320
with them but this is a company has been

00:04:46,670 --> 00:04:50,780
around for 25 years but they've really

00:04:48,320 --> 00:04:53,660
perfected this whole concept and they've

00:04:50,780 --> 00:04:55,880
built it into their culture so when you

00:04:53,660 --> 00:04:57,590
look at for example when I look at Cloud

00:04:55,880 --> 00:04:59,540
Foundry I mean the amount of releases

00:04:57,590 --> 00:05:01,940
that we do for cloud foundry to the open

00:04:59,540 --> 00:05:03,620
source community I'm actually really

00:05:01,940 --> 00:05:05,540
floor to how frequently we actually

00:05:03,620 --> 00:05:07,100
release software and we do build a

00:05:05,540 --> 00:05:09,410
continuous pipeline and delivery

00:05:07,100 --> 00:05:11,180
mechanism for it but I think the other

00:05:09,410 --> 00:05:13,220
thing that's important to realize about

00:05:11,180 --> 00:05:15,830
these companies is they looked

00:05:13,220 --> 00:05:17,630
differently at the way the delivery of

00:05:15,830 --> 00:05:19,760
that software into production right they

00:05:17,630 --> 00:05:21,890
they took a different mentality to it

00:05:19,760 --> 00:05:24,230
with using more experimental releases

00:05:21,890 --> 00:05:25,850
using things like a bee testing where

00:05:24,230 --> 00:05:27,470
they really blurred the lines between

00:05:25,850 --> 00:05:30,560
what used to be considered beta and

00:05:27,470 --> 00:05:34,010
production and really allowed customers

00:05:30,560 --> 00:05:35,090
to drive that the behavior of using that

00:05:34,010 --> 00:05:37,580
and to understand whether it was

00:05:35,090 --> 00:05:39,380
effective or not I think the other thing

00:05:37,580 --> 00:05:40,700
that you'll notice and I've seen with

00:05:39,380 --> 00:05:42,920
these companies and it was a trend is

00:05:40,700 --> 00:05:45,410
that they questioned what production of

00:05:42,920 --> 00:05:49,010
production deployment is when I used to

00:05:45,410 --> 00:05:51,710
do production deployments it was a very

00:05:49,010 --> 00:05:54,050
stressful time for us people were really

00:05:51,710 --> 00:05:55,820
freaked out it was always done weekend

00:05:54,050 --> 00:05:57,410
they've really blurred the lines with

00:05:55,820 --> 00:05:59,180
that and I and you'll see as we go

00:05:57,410 --> 00:06:01,190
further why they were able to do that

00:05:59,180 --> 00:06:03,590
and this is using some of the

00:06:01,190 --> 00:06:05,690
cloud-based technologies now of course

00:06:03,590 --> 00:06:06,980
be able to have culture to be able to

00:06:05,690 --> 00:06:08,720
push things in like that you need to

00:06:06,980 --> 00:06:10,430
have a very communicative process back

00:06:08,720 --> 00:06:12,320
and so you have to have very good

00:06:10,430 --> 00:06:14,060
feedback loops and information coming

00:06:12,320 --> 00:06:16,700
back as well as metrics which we saw in

00:06:14,060 --> 00:06:18,170
the keynote next door it was very true

00:06:16,700 --> 00:06:20,360
for a lot of these companies as they had

00:06:18,170 --> 00:06:22,220
these metrics built in to the delivery

00:06:20,360 --> 00:06:23,510
of the software and that feedback loop

00:06:22,220 --> 00:06:24,980
but I'll give you a perfect example of

00:06:23,510 --> 00:06:28,670
this about a year and a half ago

00:06:24,980 --> 00:06:30,950
Instagram I had released a new UI for

00:06:28,670 --> 00:06:33,020
their users and I had noticed within a

00:06:30,950 --> 00:06:35,510
24-hour period they had rolled that back

00:06:33,020 --> 00:06:37,700
to the old UI and what they found was

00:06:35,510 --> 00:06:39,950
that over the course of that 24 hours as

00:06:37,700 --> 00:06:41,990
the new UI went out nobody liked it they

00:06:39,950 --> 00:06:44,090
stopped using the service and that

00:06:41,990 --> 00:06:45,470
really made them you know normally

00:06:44,090 --> 00:06:46,640
typically you would have panicked or not

00:06:45,470 --> 00:06:48,080
understood what was going on but they

00:06:46,640 --> 00:06:50,090
had the metrics and feedback loops in

00:06:48,080 --> 00:06:51,180
place but they realized that it was that

00:06:50,090 --> 00:06:53,400
software that was causing

00:06:51,180 --> 00:06:55,650
issue they rolled it back and within 24

00:06:53,400 --> 00:06:57,780
hours people were back to using it and

00:06:55,650 --> 00:06:59,160
of course if you have culture you have

00:06:57,780 --> 00:07:00,840
the communicative process around this

00:06:59,160 --> 00:07:03,900
then you need the technology and the

00:07:00,840 --> 00:07:05,460
tools and this is kind of where the

00:07:03,900 --> 00:07:07,919
things like Jenkins and cloud foundry

00:07:05,460 --> 00:07:09,539
and artifactory can really come in to

00:07:07,919 --> 00:07:13,320
make that delivery much easier going

00:07:09,539 --> 00:07:15,479
forward now one of the things that I

00:07:13,320 --> 00:07:16,979
felt privileged in having 20 years of

00:07:15,479 --> 00:07:18,539
experience in software engineering as

00:07:16,979 --> 00:07:20,070
you kind of get you gain a little

00:07:18,539 --> 00:07:24,030
different perspective when you look back

00:07:20,070 --> 00:07:25,080
over the years of building software and

00:07:24,030 --> 00:07:27,509
one of the things that I think that

00:07:25,080 --> 00:07:29,460
we've always done of always strive to do

00:07:27,509 --> 00:07:31,139
is build better quality software and

00:07:29,460 --> 00:07:33,030
that really started back in the 90s when

00:07:31,139 --> 00:07:34,530
the Gang of Four book came out and you

00:07:33,030 --> 00:07:36,389
saw us look at the way that we

00:07:34,530 --> 00:07:37,830
structured a code we said well we need

00:07:36,389 --> 00:07:39,960
to go to something more object-oriented

00:07:37,830 --> 00:07:41,490
where we would get encapsulation and we

00:07:39,960 --> 00:07:44,880
would change the structure of our code

00:07:41,490 --> 00:07:46,380
to make it better as we continue to go

00:07:44,880 --> 00:07:48,060
through that process we said well that's

00:07:46,380 --> 00:07:49,620
great now we have a better structure but

00:07:48,060 --> 00:07:51,449
how do I actually know that it's work

00:07:49,620 --> 00:07:53,250
working where is that level of

00:07:51,449 --> 00:07:54,210
confidence that I have and that's where

00:07:53,250 --> 00:07:56,849
you started to see things like

00:07:54,210 --> 00:07:58,560
functional tests and unit tests and UI

00:07:56,849 --> 00:08:00,840
tests and integration tests really come

00:07:58,560 --> 00:08:02,220
into play and then we really started to

00:08:00,840 --> 00:08:03,900
change our mindset and think about that

00:08:02,220 --> 00:08:04,979
and said well if we change if we're

00:08:03,900 --> 00:08:06,570
going to write these tests maybe we

00:08:04,979 --> 00:08:08,039
should write the test first or figure

00:08:06,570 --> 00:08:10,110
out how to write the test first then

00:08:08,039 --> 00:08:11,970
we'll go write the code and then

00:08:10,110 --> 00:08:13,620
eventually continuous integration became

00:08:11,970 --> 00:08:15,389
part of that as well so that way

00:08:13,620 --> 00:08:17,099
whatever we were building we knew at the

00:08:15,389 --> 00:08:19,889
end of the build we were very confident

00:08:17,099 --> 00:08:21,810
what was built now I think with

00:08:19,889 --> 00:08:23,550
continuous deployment and continuous

00:08:21,810 --> 00:08:25,740
delivery were ushering in a new set of

00:08:23,550 --> 00:08:28,919
standards to do the exact same thing

00:08:25,740 --> 00:08:30,720
that we did in the build phase at to the

00:08:28,919 --> 00:08:35,520
delivery phase and I think it's very

00:08:30,720 --> 00:08:38,190
important now i feel and i and i

00:08:35,520 --> 00:08:40,589
actually had validation by just going to

00:08:38,190 --> 00:08:43,050
the keynote is that no matter what we

00:08:40,589 --> 00:08:45,540
build it's where we deliver it to that

00:08:43,050 --> 00:08:47,850
matters and when we deliver it we should

00:08:45,540 --> 00:08:49,589
feel if we're delivering it to AWS today

00:08:47,850 --> 00:08:51,240
we should still have that same level of

00:08:49,589 --> 00:08:53,850
confidence that when we deliver it on

00:08:51,240 --> 00:08:55,529
site that it's not going to take a

00:08:53,850 --> 00:08:58,410
nine-month conversion process to go

00:08:55,529 --> 00:09:00,360
through that I also noticed and i also

00:08:58,410 --> 00:09:02,010
agree with some of the comments that

00:09:00,360 --> 00:09:03,570
were made earlier is that configuration

00:09:02,010 --> 00:09:03,880
management is really changing too it's

00:09:03,570 --> 00:09:05,440
real

00:09:03,880 --> 00:09:08,080
coming into the source control

00:09:05,440 --> 00:09:10,450
management and it's really being a part

00:09:08,080 --> 00:09:12,280
of a part of the bigger part of the

00:09:10,450 --> 00:09:13,750
process right it used to be days where

00:09:12,280 --> 00:09:16,180
you just stuff something in a properties

00:09:13,750 --> 00:09:17,380
file and you have a black box deployment

00:09:16,180 --> 00:09:19,120
you push your code out there and you'd

00:09:17,380 --> 00:09:20,970
kind of walk away and I really think

00:09:19,120 --> 00:09:22,960
that those days are pretty much gone I

00:09:20,970 --> 00:09:25,600
think what's also going to deliver

00:09:22,960 --> 00:09:26,620
higher set of value are some of the

00:09:25,600 --> 00:09:28,660
patterns that are being established

00:09:26,620 --> 00:09:31,240
things like the blue-green deployments

00:09:28,660 --> 00:09:36,550
and really questioning what production

00:09:31,240 --> 00:09:38,800
of production deployment is today so I

00:09:36,550 --> 00:09:39,880
think it's almost fundamental if we're

00:09:38,800 --> 00:09:43,060
going to do continuous deployment

00:09:39,880 --> 00:09:44,770
continuous delivery that we start with

00:09:43,060 --> 00:09:47,440
platform as a service because platform

00:09:44,770 --> 00:09:49,210
as a service is almost the key to to

00:09:47,440 --> 00:09:51,100
being that endpoint as to where we

00:09:49,210 --> 00:09:52,630
deliver and I think there's four key

00:09:51,100 --> 00:09:54,100
elements to that we need to really look

00:09:52,630 --> 00:09:56,170
at when we look at platform as a service

00:09:54,100 --> 00:09:59,350
one I think that we need a very strong

00:09:56,170 --> 00:10:01,600
vibrant open source community to build

00:09:59,350 --> 00:10:03,910
our to lay the foundation for our

00:10:01,600 --> 00:10:07,900
platform as a service for us Cloud

00:10:03,910 --> 00:10:09,220
Foundry is probable is the top most open

00:10:07,900 --> 00:10:11,410
source community for platform as a

00:10:09,220 --> 00:10:14,020
service today I think the second thing

00:10:11,410 --> 00:10:16,060
is whichever platform you choose it

00:10:14,020 --> 00:10:18,250
really needs to abstract away the

00:10:16,060 --> 00:10:20,950
underlying cloud provider and make that

00:10:18,250 --> 00:10:22,930
platform portable I think what I've seen

00:10:20,950 --> 00:10:24,940
with a lot of customers to date that

00:10:22,930 --> 00:10:26,440
have gone down the AWS route I mean

00:10:24,940 --> 00:10:30,880
today there's four different ways to

00:10:26,440 --> 00:10:32,320
deploy code on AWS but only AWS when you

00:10:30,880 --> 00:10:33,700
start to build these technologies in

00:10:32,320 --> 00:10:37,390
these solutions you want to have more

00:10:33,700 --> 00:10:39,490
than just a single vendor API and so we

00:10:37,390 --> 00:10:41,530
start to I think having something like

00:10:39,490 --> 00:10:43,300
Cloud Foundry provide that level of

00:10:41,530 --> 00:10:46,330
portability across I as providers is

00:10:43,300 --> 00:10:48,070
very important I also think high

00:10:46,330 --> 00:10:50,410
availability and scalability of the

00:10:48,070 --> 00:10:53,620
platform is as important as well as the

00:10:50,410 --> 00:10:56,050
applications if you look at the

00:10:53,620 --> 00:10:58,240
applications that are built today uber

00:10:56,050 --> 00:11:00,220
is a good example if they had relied on

00:10:58,240 --> 00:11:01,630
the old ways of engineering things where

00:11:00,220 --> 00:11:03,970
we put things on boxes or even just

00:11:01,630 --> 00:11:05,590
virtualized it to a vm they would have

00:11:03,970 --> 00:11:07,240
never been able to scale to the type of

00:11:05,590 --> 00:11:08,950
numbers that they needed to so that

00:11:07,240 --> 00:11:10,570
platform should have that kind of level

00:11:08,950 --> 00:11:14,080
of engineering already built into it and

00:11:10,570 --> 00:11:16,210
then from a developer's perspective I

00:11:14,080 --> 00:11:17,440
think that the solution has to be able

00:11:16,210 --> 00:11:19,270
to support

00:11:17,440 --> 00:11:20,410
where I am today and where I want to go

00:11:19,270 --> 00:11:22,210
in the future so the different

00:11:20,410 --> 00:11:24,670
frameworks and the tools and the

00:11:22,210 --> 00:11:28,330
technologies as well as be very API

00:11:24,670 --> 00:11:30,490
centric so as a developer I like to my

00:11:28,330 --> 00:11:35,590
most comfortable level is looking and

00:11:30,490 --> 00:11:37,420
interacting with AP is so beyond a

00:11:35,590 --> 00:11:39,820
valuation of the platform i think

00:11:37,420 --> 00:11:41,710
there's also nine key characteristics

00:11:39,820 --> 00:11:43,120
that you might want to look for in terms

00:11:41,710 --> 00:11:45,490
of the value of the platform what else

00:11:43,120 --> 00:11:46,900
it provides so this is really there's

00:11:45,490 --> 00:11:50,740
benefits in a platform for both

00:11:46,900 --> 00:11:52,570
operators and developers from an

00:11:50,740 --> 00:11:54,220
operational perspective you want to be

00:11:52,570 --> 00:11:55,930
able to have that abstraction and you

00:11:54,220 --> 00:11:57,370
want to be able to use that platform to

00:11:55,930 --> 00:11:59,350
be able to provision and configure the

00:11:57,370 --> 00:12:03,130
platform itself suspend things up spin

00:11:59,350 --> 00:12:04,420
things down add more capacity from a

00:12:03,130 --> 00:12:05,980
developer's perspective you start to

00:12:04,420 --> 00:12:07,870
move into things like containerisation

00:12:05,980 --> 00:12:10,390
so the platform should support any

00:12:07,870 --> 00:12:11,770
number of containers ations today most

00:12:10,390 --> 00:12:13,780
the most popular containerisation

00:12:11,770 --> 00:12:14,980
offices docker you all heard of it but

00:12:13,780 --> 00:12:18,100
you know rocket is gaining some

00:12:14,980 --> 00:12:19,870
popularity the bill packs from Heroku or

00:12:18,100 --> 00:12:21,070
also we're also very popular with people

00:12:19,870 --> 00:12:22,750
so having different types of

00:12:21,070 --> 00:12:25,210
containerization i think is very

00:12:22,750 --> 00:12:26,830
critical to the platform load balancing

00:12:25,210 --> 00:12:28,810
and routing across those different

00:12:26,830 --> 00:12:30,730
instances is very important and we'll

00:12:28,810 --> 00:12:33,220
see a little bit more of that coming up

00:12:30,730 --> 00:12:34,840
during the demonstration and I think any

00:12:33,220 --> 00:12:36,400
platform that you look at should have

00:12:34,840 --> 00:12:37,990
health management built into it so how

00:12:36,400 --> 00:12:40,270
well is my applications performing

00:12:37,990 --> 00:12:41,710
however my applications are they

00:12:40,270 --> 00:12:44,710
available or they not available do I

00:12:41,710 --> 00:12:47,350
need to spend new ones up I think it's

00:12:44,710 --> 00:12:49,600
also important that you at the platform

00:12:47,350 --> 00:12:51,760
be able to self heal itself so if a

00:12:49,600 --> 00:12:54,160
major component of the platform goes

00:12:51,760 --> 00:12:56,770
down who brings it back up right that

00:12:54,160 --> 00:12:59,260
has to be part of the platform scaling i

00:12:56,770 --> 00:13:01,300
mentioned services which are the

00:12:59,260 --> 00:13:03,100
building block for developers these are

00:13:01,300 --> 00:13:05,080
the things like the highly available

00:13:03,100 --> 00:13:06,610
database that you want to use it or the

00:13:05,080 --> 00:13:08,680
messaging bus that you want to use these

00:13:06,610 --> 00:13:10,210
are the services that we connect to when

00:13:08,680 --> 00:13:12,160
we push our application in the platform

00:13:10,210 --> 00:13:14,770
and those also have to be a major

00:13:12,160 --> 00:13:17,260
consideration for your for your platform

00:13:14,770 --> 00:13:21,040
needs and then log aggregation and

00:13:17,260 --> 00:13:23,470
metrics if you can imagine the number of

00:13:21,040 --> 00:13:26,400
instances of an application that uber

00:13:23,470 --> 00:13:28,810
has to support from a back-end systems

00:13:26,400 --> 00:13:29,720
scaling that up and then aggregating all

00:13:28,810 --> 00:13:31,939
of that log in from

00:13:29,720 --> 00:13:33,589
and analyzing it that it needs to be

00:13:31,939 --> 00:13:35,769
part of your platform that should be

00:13:33,589 --> 00:13:37,759
pretty much right out of the box

00:13:35,769 --> 00:13:40,279
security and roll management are always

00:13:37,759 --> 00:13:43,819
critical aspects of platform itself as

00:13:40,279 --> 00:13:46,339
well now one of the things that I happen

00:13:43,819 --> 00:13:48,019
to notice a pattern that's kind of

00:13:46,339 --> 00:13:49,879
evolved in Martin Fowler talked about it

00:13:48,019 --> 00:13:52,550
on as one of his blog post it's probably

00:13:49,879 --> 00:13:56,329
almost seven years old now was that of

00:13:52,550 --> 00:13:57,740
the blue green deployment and for us

00:13:56,329 --> 00:13:59,000
within cloud foundry blue career

00:13:57,740 --> 00:14:00,680
deployment has just built into the

00:13:59,000 --> 00:14:02,360
platform it's just part of the nine

00:14:00,680 --> 00:14:05,089
value-added features that you have there

00:14:02,360 --> 00:14:06,110
but what's important here and this is

00:14:05,089 --> 00:14:08,660
why we can start to think about

00:14:06,110 --> 00:14:10,160
production in a different way is that we

00:14:08,660 --> 00:14:12,980
can actually stand up the application

00:14:10,160 --> 00:14:15,740
the pre the current the current version

00:14:12,980 --> 00:14:18,589
and the next version side by side and

00:14:15,740 --> 00:14:21,889
route traffic differently to it based on

00:14:18,589 --> 00:14:24,500
the requests coming in so here in the

00:14:21,889 --> 00:14:25,850
blue green deployment in box one we have

00:14:24,500 --> 00:14:27,680
the initial deployment that we have

00:14:25,850 --> 00:14:30,980
there and you can see the URL that's

00:14:27,680 --> 00:14:34,309
being pointed to within within the

00:14:30,980 --> 00:14:35,930
platform now the next the new version is

00:14:34,309 --> 00:14:39,699
coming out which is the green here in

00:14:35,930 --> 00:14:42,790
box 2 and we assign it a different URL

00:14:39,699 --> 00:14:46,670
at deployment time we keep the existing

00:14:42,790 --> 00:14:48,980
external URL for the outside world back

00:14:46,670 --> 00:14:50,720
to the blue one and then in box 3 what

00:14:48,980 --> 00:14:53,509
we do is we start to slowly transition

00:14:50,720 --> 00:14:55,129
people to the green version and let them

00:14:53,509 --> 00:14:57,410
complete their transactions on the old

00:14:55,129 --> 00:14:59,779
one and slowly migrated to the new one

00:14:57,410 --> 00:15:03,139
and then the fourth one we have all the

00:14:59,779 --> 00:15:05,509
traffic going to the new green one now

00:15:03,139 --> 00:15:07,850
if it was me and I was looking at a best

00:15:05,509 --> 00:15:10,309
practice I would probably keep two or

00:15:07,850 --> 00:15:11,959
three of the older versions around so

00:15:10,309 --> 00:15:14,600
that way I can always roll back as far

00:15:11,959 --> 00:15:16,279
as I want so this diagram doesn't really

00:15:14,600 --> 00:15:19,040
show that but that that's kind of the

00:15:16,279 --> 00:15:22,519
idea of blue-green deployments and I

00:15:19,040 --> 00:15:24,860
think the benefit here is is it really

00:15:22,519 --> 00:15:26,600
reduces the risk of a bad deployment so

00:15:24,860 --> 00:15:28,220
when you have a bad deployment it isn't

00:15:26,600 --> 00:15:30,589
it isn't you know everybody come in on

00:15:28,220 --> 00:15:32,750
the weekend to roll back it's just

00:15:30,589 --> 00:15:38,449
really switching it back over to the

00:15:32,750 --> 00:15:40,220
previous one okay so I wanted to walk

00:15:38,449 --> 00:15:41,149
you through real quickly we're going to

00:15:40,220 --> 00:15:41,840
go ahead and do a demonstration right

00:15:41,149 --> 00:15:43,430
now for this but

00:15:41,840 --> 00:15:45,470
kinda just want to walk you through the

00:15:43,430 --> 00:15:47,960
demonstration flow and what I've set up

00:15:45,470 --> 00:15:50,180
so that way you have a contact some

00:15:47,960 --> 00:15:54,830
context as to what you're about to view

00:15:50,180 --> 00:15:56,360
in the video so I have a simple

00:15:54,830 --> 00:15:58,220
application it's called map application

00:15:56,360 --> 00:15:59,630
it's a mapping application it just shows

00:15:58,220 --> 00:16:03,080
the United States and a couple of orders

00:15:59,630 --> 00:16:04,670
that are coming into each state that the

00:16:03,080 --> 00:16:07,820
application itself is not really

00:16:04,670 --> 00:16:09,950
significant it's really the process that

00:16:07,820 --> 00:16:11,840
i go through two not only add a new

00:16:09,950 --> 00:16:14,330
feature but to get that deployed and

00:16:11,840 --> 00:16:17,060
then promoted up into into a production

00:16:14,330 --> 00:16:19,190
system so in this example what i have is

00:16:17,060 --> 00:16:21,740
i have a private instance of cloud

00:16:19,190 --> 00:16:24,340
foundry running in my own data center

00:16:21,740 --> 00:16:27,140
and then i also am using a public

00:16:24,340 --> 00:16:29,270
instance of cloud foundry called pivotal

00:16:27,140 --> 00:16:33,230
web services which is actually running

00:16:29,270 --> 00:16:35,120
on top of AWS so i have the ability to

00:16:33,230 --> 00:16:38,180
move or deploy my application to

00:16:35,120 --> 00:16:41,870
basically AWS on and on prem using Cloud

00:16:38,180 --> 00:16:44,630
Foundry is my my basis to be to deliver

00:16:41,870 --> 00:16:46,310
the application all of my code actually

00:16:44,630 --> 00:16:47,570
resides in github so what I'm going to

00:16:46,310 --> 00:16:49,640
do and you'll see in the videos I'm

00:16:47,570 --> 00:16:51,350
going to make a change for a new feature

00:16:49,640 --> 00:16:53,120
request that that's been requested

00:16:51,350 --> 00:16:55,100
through the community and it's going to

00:16:53,120 --> 00:16:56,540
add that to the to the application i'm

00:16:55,100 --> 00:16:59,480
going to test locally and then i'm going

00:16:56,540 --> 00:17:01,400
to push that into github jenkins which

00:16:59,480 --> 00:17:03,440
has been deployed on my on-premise

00:17:01,400 --> 00:17:06,350
through Cloud Foundry is going to pick

00:17:03,440 --> 00:17:10,220
up that change it's going to have a

00:17:06,350 --> 00:17:11,870
couple of it has five jobs it has one

00:17:10,220 --> 00:17:13,100
that will just build the artifact do all

00:17:11,870 --> 00:17:15,740
the testing the continuous integration

00:17:13,100 --> 00:17:19,310
and basically my quality check at the

00:17:15,740 --> 00:17:21,740
build phase the next two jobs will one

00:17:19,310 --> 00:17:25,220
or downstream jobs from that one will

00:17:21,740 --> 00:17:27,110
push the application to the on-premise

00:17:25,220 --> 00:17:28,970
version and the other will push the

00:17:27,110 --> 00:17:32,540
application to the pivotal web services

00:17:28,970 --> 00:17:34,520
or the hybrid public version and then I

00:17:32,540 --> 00:17:36,050
have two other jobs beyond that that

00:17:34,520 --> 00:17:38,180
when we're ready to promote into

00:17:36,050 --> 00:17:40,640
production you'll see where we actually

00:17:38,180 --> 00:17:42,050
come in and we select the version that

00:17:40,640 --> 00:17:44,960
we want to promote you'll see we'll go

00:17:42,050 --> 00:17:46,100
through that process as well so with

00:17:44,960 --> 00:17:48,850
that let's go ahead and get started with

00:17:46,100 --> 00:17:48,850
our demonstration

00:17:53,600 --> 00:17:58,039
alright so here we have the deployed map

00:17:56,000 --> 00:17:59,299
application as it exists what you're

00:17:58,039 --> 00:18:03,950
going to see here is when we come in

00:17:59,299 --> 00:18:10,480
this is the developer console in the

00:18:03,950 --> 00:18:10,480
center of that box was map 56 yes

00:18:10,630 --> 00:18:18,020
different components of your application

00:18:13,580 --> 00:18:19,789
right it's not only the front and UI but

00:18:18,020 --> 00:18:22,900
you might have a back-end database and

00:18:19,789 --> 00:18:25,549
you might have a middleware right yep so

00:18:22,900 --> 00:18:27,799
for this particular deployment to work

00:18:25,549 --> 00:18:29,210
are you suggesting that for every

00:18:27,799 --> 00:18:34,580
component that you have in the

00:18:29,210 --> 00:18:36,169
application we maintain two versions yes

00:18:34,580 --> 00:18:37,669
you would maintain two version well it

00:18:36,169 --> 00:18:39,740
depends on on the dependencies between

00:18:37,669 --> 00:18:41,510
each of the different pieces but there

00:18:39,740 --> 00:18:43,940
might be a chance that you would have

00:18:41,510 --> 00:18:46,159
different dependencies because as you

00:18:43,940 --> 00:18:48,559
take your application and you start to

00:18:46,159 --> 00:18:49,880
break it in two different pieces and if

00:18:48,559 --> 00:18:51,950
you start going down a micro service

00:18:49,880 --> 00:18:53,780
architecture then it's understanding the

00:18:51,950 --> 00:18:55,730
into the dependencies between the

00:18:53,780 --> 00:18:57,289
different pieces but there is a chance

00:18:55,730 --> 00:18:59,750
that if let's say you had ten different

00:18:57,289 --> 00:19:03,110
services that you may actually end up

00:18:59,750 --> 00:19:05,510
having through the deployment 20 total

00:19:03,110 --> 00:19:09,140
instances of that application the

00:19:05,510 --> 00:19:11,360
previous version and the next version so

00:19:09,140 --> 00:19:12,919
for all of the components which make up

00:19:11,360 --> 00:19:17,320
an application you maintain multiple

00:19:12,919 --> 00:19:17,320
versions in production yes okay

00:19:18,269 --> 00:19:22,909
okay so is that any better can you see

00:19:20,489 --> 00:19:24,839
that alright let's get started then

00:19:22,909 --> 00:19:26,009
alright so we have the deployed map

00:19:24,839 --> 00:19:27,239
application this is the developer

00:19:26,009 --> 00:19:31,709
console so you can see here we have

00:19:27,239 --> 00:19:33,149
version 56 in place if I actually go

00:19:31,709 --> 00:19:35,009
into the application I can see that it's

00:19:33,149 --> 00:19:36,629
running I can see that the the routes

00:19:35,009 --> 00:19:38,849
that are available for the application

00:19:36,629 --> 00:19:41,339
and I'll explain that the route in a

00:19:38,849 --> 00:19:42,570
minute here is the log output from that

00:19:41,339 --> 00:19:51,419
application from your developers

00:19:42,570 --> 00:19:53,999
perspective sorry try deposit alright

00:19:51,419 --> 00:19:56,339
say all the time I we just wanna know

00:19:53,999 --> 00:20:00,019
while you are showing the demo which

00:19:56,339 --> 00:20:03,509
tool we are while we are going through

00:20:00,019 --> 00:20:05,969
I'm sorry that is so we I think we are

00:20:03,509 --> 00:20:07,320
using while showing the demo right you

00:20:05,969 --> 00:20:09,599
are traveling through different tools

00:20:07,320 --> 00:20:11,639
right you're you're using gate for

00:20:09,599 --> 00:20:13,919
version control jenkins for continuously

00:20:11,639 --> 00:20:15,179
direction so right so I haven't done I

00:20:13,919 --> 00:20:17,219
haven't done any deployment just showing

00:20:15,179 --> 00:20:19,169
you the current version so what is this

00:20:17,219 --> 00:20:21,419
particular this here is pivotal claw

00:20:19,169 --> 00:20:23,879
foundry so this is a developer console

00:20:21,419 --> 00:20:26,339
version of the developer cloud foundry

00:20:23,879 --> 00:20:30,479
so this is the end point where I push my

00:20:26,339 --> 00:20:33,529
application to oh yes so in doing so and

00:20:30,479 --> 00:20:36,179
then that's a good point in doing so

00:20:33,529 --> 00:20:37,859
Cloud Foundry will basically take that

00:20:36,179 --> 00:20:39,539
application and stand up all of the

00:20:37,859 --> 00:20:44,190
components that are required for that

00:20:39,539 --> 00:20:45,809
application to run and so the previous

00:20:44,190 --> 00:20:47,729
one that i was showing was the on / m

00:20:45,809 --> 00:20:50,969
this pivotal web services in the upper

00:20:47,729 --> 00:20:52,589
left corner is the public version of the

00:20:50,969 --> 00:20:55,049
application this is actually running on

00:20:52,589 --> 00:20:56,879
top of AWS and what i really want to get

00:20:55,049 --> 00:20:58,979
across to you is that when you use

00:20:56,879 --> 00:21:00,450
something like Cloud Foundry it doesn't

00:20:58,979 --> 00:21:02,669
matter who your cloud provider is

00:21:00,450 --> 00:21:04,259
because the way that you deploy and how

00:21:02,669 --> 00:21:06,299
you interact with it is the exact same

00:21:04,259 --> 00:21:08,489
so when you want to move things back and

00:21:06,299 --> 00:21:09,749
forth you can easily do that so in this

00:21:08,489 --> 00:21:11,849
example here this is what the

00:21:09,749 --> 00:21:14,909
application looks like I'm going to

00:21:11,849 --> 00:21:17,190
ahead and start streaming the orders for

00:21:14,909 --> 00:21:19,259
this particular application and i will

00:21:17,190 --> 00:21:20,519
zoom in for the on-premise version and

00:21:19,259 --> 00:21:22,289
we can kind of take a look at the orders

00:21:20,519 --> 00:21:23,789
that are coming in I could tell us the

00:21:22,289 --> 00:21:26,729
on-premise version because if I look at

00:21:23,789 --> 00:21:27,920
the URL it has a different domain name

00:21:26,729 --> 00:21:30,830
now I look

00:21:27,920 --> 00:21:34,280
the URL for the public version and it

00:21:30,830 --> 00:21:37,040
has a different domain name so you could

00:21:34,280 --> 00:21:39,110
abstract the actual name that you apply

00:21:37,040 --> 00:21:41,750
to it to a higher level global load

00:21:39,110 --> 00:21:44,660
balancer and hide all of this complexity

00:21:41,750 --> 00:21:47,660
obviously for a user but it gives you

00:21:44,660 --> 00:21:49,550
the capability to do that now I've been

00:21:47,660 --> 00:21:53,090
asked by my management to deliver in a

00:21:49,550 --> 00:21:54,860
future so here I am in my local iee

00:21:53,090 --> 00:21:57,110
where I'm going to do the development of

00:21:54,860 --> 00:21:59,360
this application I'm going to come in

00:21:57,110 --> 00:22:02,150
here and add a new feature which is a

00:21:59,360 --> 00:22:03,770
new button to the application so some

00:22:02,150 --> 00:22:06,320
kind of visual context just so that we

00:22:03,770 --> 00:22:09,320
can see the new feature i will save it

00:22:06,320 --> 00:22:10,820
here locally let it recompile and then I

00:22:09,320 --> 00:22:12,860
will test it to make sure that I feel

00:22:10,820 --> 00:22:15,170
very confident that this is the right

00:22:12,860 --> 00:22:16,430
thing I need to do so in the upper right

00:22:15,170 --> 00:22:19,310
hand side you can see i have a new

00:22:16,430 --> 00:22:21,380
button called the awesome button once i

00:22:19,310 --> 00:22:24,140
feel very confident with that i'm ready

00:22:21,380 --> 00:22:26,300
to check this in to Jenkins or I'm

00:22:24,140 --> 00:22:27,980
tearing to get so that's part of my

00:22:26,300 --> 00:22:30,560
source control be much like we've talked

00:22:27,980 --> 00:22:33,470
about in an earlier components so here

00:22:30,560 --> 00:22:38,540
we will just do the quick add and then

00:22:33,470 --> 00:22:41,480
offer the commits and the message that

00:22:38,540 --> 00:22:44,060
goes with the commit as well and then

00:22:41,480 --> 00:22:46,210
finally we'll just do a git push so this

00:22:44,060 --> 00:22:48,610
will put this into source control for me

00:22:46,210 --> 00:22:53,270
now we start the continuous delivery

00:22:48,610 --> 00:22:55,370
process and so this is where we used the

00:22:53,270 --> 00:22:57,470
on-premise Jenkins to be able to do this

00:22:55,370 --> 00:23:01,070
so I have a project out there called PCF

00:22:57,470 --> 00:23:02,570
map and all this is doing here was it

00:23:01,070 --> 00:23:03,980
noticed that there was changes into

00:23:02,570 --> 00:23:06,170
github so you notice on the left-hand

00:23:03,980 --> 00:23:08,630
side here it picked up those changes and

00:23:06,170 --> 00:23:10,700
it's starting to build the artifact

00:23:08,630 --> 00:23:12,830
through the build phase from there I

00:23:10,700 --> 00:23:15,710
have to downstream projects that will

00:23:12,830 --> 00:23:18,620
actually do the delivery or jump shots

00:23:15,710 --> 00:23:20,720
delivery but the deployment into cloth

00:23:18,620 --> 00:23:22,880
boundary and I will take you guys

00:23:20,720 --> 00:23:24,050
through this in just a minute so you

00:23:22,880 --> 00:23:29,270
have a good feel for what that looks

00:23:24,050 --> 00:23:31,850
like so at the completion of the build

00:23:29,270 --> 00:23:33,710
phase the delivery phase kicked in if I

00:23:31,850 --> 00:23:35,810
go back into cloud foundry to look at

00:23:33,710 --> 00:23:38,150
the application because I didn't do a

00:23:35,810 --> 00:23:39,840
Bluegreen deployment for development you

00:23:38,150 --> 00:23:41,820
could see that the route did

00:23:39,840 --> 00:23:45,659
exist and so it couldn't lead me to the

00:23:41,820 --> 00:23:47,100
application still doesn't exist yet but

00:23:45,659 --> 00:23:50,429
it's going through the process of

00:23:47,100 --> 00:23:52,770
creating the next instance so you can

00:23:50,429 --> 00:23:55,860
see here if I go now I have bill 57

00:23:52,770 --> 00:23:59,820
coming online in both the private and

00:23:55,860 --> 00:24:02,279
now the public so here's 57 there for

00:23:59,820 --> 00:24:04,350
the public if I go back and look and

00:24:02,279 --> 00:24:07,440
step into the application this is it

00:24:04,350 --> 00:24:09,990
being actually deployed inside a cloud

00:24:07,440 --> 00:24:13,799
foundry I can see it's still starting I

00:24:09,990 --> 00:24:15,480
have mapped a canonical route name to to

00:24:13,799 --> 00:24:17,730
it so that developers can easily get to

00:24:15,480 --> 00:24:19,260
it I could look through the logs and

00:24:17,730 --> 00:24:22,559
then I can bind to the services that the

00:24:19,260 --> 00:24:24,029
application uses in the public cloud I

00:24:22,559 --> 00:24:27,000
have the exact same thing nothing

00:24:24,029 --> 00:24:29,070
different here I don't have a status yet

00:24:27,000 --> 00:24:32,039
but I'm you can see that I've mapped the

00:24:29,070 --> 00:24:33,539
new routes or map the new route / it's

00:24:32,039 --> 00:24:34,710
going through the process of creating

00:24:33,539 --> 00:24:36,990
that container for me with the

00:24:34,710 --> 00:24:38,850
application inside of it and it has the

00:24:36,990 --> 00:24:41,010
services that are bound to it so two

00:24:38,850 --> 00:24:43,470
different clouds two different versions

00:24:41,010 --> 00:24:44,520
same process that that's one of the

00:24:43,470 --> 00:24:47,340
things that think is very important to

00:24:44,520 --> 00:24:50,309
understand now that it's started if I go

00:24:47,340 --> 00:24:51,929
back you can see that this application

00:24:50,309 --> 00:24:56,700
is now running with the new feature that

00:24:51,929 --> 00:24:59,250
I have available I'll also check the

00:24:56,700 --> 00:25:03,029
public version of this and it's running

00:24:59,250 --> 00:25:06,659
as well so if i go there and now i

00:25:03,029 --> 00:25:08,820
refresh i now have the new version

00:25:06,659 --> 00:25:10,350
running in the public cloud too so now

00:25:08,820 --> 00:25:12,210
I've done I've deployed AWS I've

00:25:10,350 --> 00:25:14,520
deployed on Prem nothing's been any

00:25:12,210 --> 00:25:17,399
different we'll go ahead and start that

00:25:14,520 --> 00:25:18,390
process up we'll do a quick check just

00:25:17,399 --> 00:25:22,730
to make sure that the orders are coming

00:25:18,390 --> 00:25:22,730
through everything looks good

00:25:26,080 --> 00:25:29,080
ok

00:25:30,269 --> 00:25:35,609
now we jump into artifactory I just want

00:25:33,389 --> 00:25:37,799
to look at what was actually put into

00:25:35,609 --> 00:25:40,440
artifactory so in this case I had

00:25:37,799 --> 00:25:42,450
version 57 which I just built I put my

00:25:40,440 --> 00:25:44,489
deployment artifacts in there and then

00:25:42,450 --> 00:25:46,919
within artifactory I have some metadata

00:25:44,489 --> 00:25:49,200
as to what was actually placed in

00:25:46,919 --> 00:25:50,369
artifactory so I can look at things that

00:25:49,200 --> 00:25:52,739
are important like the build version

00:25:50,369 --> 00:25:54,149
number and he hash commits that kind of

00:25:52,739 --> 00:25:57,059
sucked so I can actually trace all of

00:25:54,149 --> 00:26:00,139
this back to the original get request

00:25:57,059 --> 00:26:02,609
that was put in when I did the git push

00:26:00,139 --> 00:26:06,509
now it's time to actually promote this

00:26:02,609 --> 00:26:08,309
into a production environment so I have

00:26:06,509 --> 00:26:09,899
the original jobs there the first thing

00:26:08,309 --> 00:26:12,479
I need to do is go back to the

00:26:09,899 --> 00:26:13,979
deployment artifact that I created and I

00:26:12,479 --> 00:26:16,679
want to go through and use the

00:26:13,979 --> 00:26:20,690
integration between Jenkins and

00:26:16,679 --> 00:26:24,389
artifactory to promote it so I select a

00:26:20,690 --> 00:26:26,700
target partition for that to be moved to

00:26:24,389 --> 00:26:31,399
repository I create a copy of it and

00:26:26,700 --> 00:26:33,119
then Jenkins in interacting with

00:26:31,399 --> 00:26:37,109
artifactory will actually make that

00:26:33,119 --> 00:26:38,700
promotion occur if I switch back over to

00:26:37,109 --> 00:26:40,919
artifactory I can come in here and I can

00:26:38,700 --> 00:26:42,899
actually see that that that occurred it

00:26:40,919 --> 00:26:46,859
moved it to my external resource

00:26:42,899 --> 00:26:49,889
released local and I now have a version

00:26:46,859 --> 00:26:55,409
57 in my snapshots and a version 57 in

00:26:49,889 --> 00:26:59,359
my release so now I know exactly which

00:26:55,409 --> 00:27:01,649
version was released into production and

00:26:59,359 --> 00:27:04,769
then I can look at some I can look at

00:27:01,649 --> 00:27:06,570
the same set of information now what I

00:27:04,769 --> 00:27:09,029
want to be able to do is move it into

00:27:06,570 --> 00:27:13,049
production so the current version that's

00:27:09,029 --> 00:27:14,940
out there is built 41 and it's running

00:27:13,049 --> 00:27:16,320
it has two instances running you can see

00:27:14,940 --> 00:27:18,809
the routes that are associated to it i

00:27:16,320 --> 00:27:22,499
have a very easily easily identifiable

00:27:18,809 --> 00:27:25,139
external route to it called maps and i

00:27:22,499 --> 00:27:30,869
have the exact same thing on the

00:27:25,139 --> 00:27:32,219
production side on my public cloud so it

00:27:30,869 --> 00:27:34,229
has two instances running i'm going to

00:27:32,219 --> 00:27:36,719
take a look at the routes you can see

00:27:34,229 --> 00:27:42,989
that i have both routes associated to it

00:27:36,719 --> 00:27:43,270
and this is the application prior to the

00:27:42,989 --> 00:27:44,650
new

00:27:43,270 --> 00:27:51,880
employment so we'll start that up and

00:27:44,650 --> 00:27:56,200
get it running and then the same thing

00:27:51,880 --> 00:27:58,450
for the public cloud so we can see that

00:27:56,200 --> 00:28:00,460
the orders are flowing for it and then

00:27:58,450 --> 00:28:03,640
with our next step will to actually

00:28:00,460 --> 00:28:05,020
start the promotion process so to do

00:28:03,640 --> 00:28:07,180
that I had two jobs that were sitting

00:28:05,020 --> 00:28:08,860
out there and I want to actually build

00:28:07,180 --> 00:28:11,080
this with parameters and I want to tell

00:28:08,860 --> 00:28:13,590
it which version I want to push so in

00:28:11,080 --> 00:28:16,870
this case I want to push version 57 and

00:28:13,590 --> 00:28:21,160
so I start that process of pushing the

00:28:16,870 --> 00:28:22,900
application to the private cloud as well

00:28:21,160 --> 00:28:24,370
as the public cloud now I want to do the

00:28:22,900 --> 00:28:26,980
exact same version you can see that the

00:28:24,370 --> 00:28:28,240
space in the domain the spaces are the

00:28:26,980 --> 00:28:30,550
same but the domain names were different

00:28:28,240 --> 00:28:33,310
the domain names are used to create that

00:28:30,550 --> 00:28:37,570
mapping for the route so we'll see that

00:28:33,310 --> 00:28:39,070
that a little more detail here so if I

00:28:37,570 --> 00:28:41,310
click back over and I look into Cloud

00:28:39,070 --> 00:28:43,360
Foundry is we're getting ready to do the

00:28:41,310 --> 00:28:46,990
deployment or the delivery of this

00:28:43,360 --> 00:28:50,290
application you can see 41 and 57 or

00:28:46,990 --> 00:28:51,790
being created side by side the same

00:28:50,290 --> 00:28:54,450
thing will happen here in the public

00:28:51,790 --> 00:29:02,320
cloud where we have 41 and 57 created

00:28:54,450 --> 00:29:04,090
side by side so if we jump in to 57

00:29:02,320 --> 00:29:07,600
we'll see it's going through the process

00:29:04,090 --> 00:29:09,310
of creating this instance so we haven't

00:29:07,600 --> 00:29:11,380
mapped the route yet so we have a an

00:29:09,310 --> 00:29:13,750
internal route that we use that we can

00:29:11,380 --> 00:29:15,880
test against and verify if we want to

00:29:13,750 --> 00:29:17,790
before we switch over and then we have

00:29:15,880 --> 00:29:20,140
the exact same thing on the public side

00:29:17,790 --> 00:29:21,640
so we haven't mapped the route the logs

00:29:20,140 --> 00:29:23,680
are starting up you can see that it's

00:29:21,640 --> 00:29:27,850
going through the process of creating

00:29:23,680 --> 00:29:30,690
the container for us and then it'll take

00:29:27,850 --> 00:29:30,690
just a second here

00:29:48,390 --> 00:29:52,550
all right it should be coming here just

00:29:50,160 --> 00:29:52,550
a second

00:30:00,840 --> 00:30:06,090
alright so what you'll notice now is we

00:30:02,820 --> 00:30:09,480
have 57 running in both the public and

00:30:06,090 --> 00:30:11,340
the private cloud and at this point we

00:30:09,480 --> 00:30:13,590
have mapped over the route so that new

00:30:11,340 --> 00:30:19,529
traffic is being directed on both of

00:30:13,590 --> 00:30:21,419
those two to the external you are URL

00:30:19,529 --> 00:30:23,549
and now if we go back into our

00:30:21,419 --> 00:30:25,830
application refresh what you'll notice

00:30:23,549 --> 00:30:29,100
is that the new button is there and the

00:30:25,830 --> 00:30:31,289
application is proceeding forward by

00:30:29,100 --> 00:30:33,210
taking the orders here so that'll

00:30:31,289 --> 00:30:35,039
happens on both the public and the

00:30:33,210 --> 00:30:37,679
private side the button is there for

00:30:35,039 --> 00:30:43,490
both and now we have completed a

00:30:37,679 --> 00:30:43,490
software promotion of our application

00:30:43,880 --> 00:30:53,669
okay so what I'd like to do is show you

00:30:50,429 --> 00:30:56,270
real quick so this is the actual applet

00:30:53,669 --> 00:30:58,620
this is the actual environment live so

00:30:56,270 --> 00:31:00,870
these were the jobs that we just went

00:30:58,620 --> 00:31:02,909
through and looked at so I had these

00:31:00,870 --> 00:31:05,580
five here so PCF map was the one that

00:31:02,909 --> 00:31:07,200
created the artifacts and then I did

00:31:05,580 --> 00:31:10,950
deployments and then I did software

00:31:07,200 --> 00:31:14,399
promotion from a operations perspective

00:31:10,950 --> 00:31:19,890
I think what's what's always interesting

00:31:14,399 --> 00:31:21,929
to see is how is the operator see

00:31:19,890 --> 00:31:23,159
pivotal cloud foundry and this is how

00:31:21,929 --> 00:31:25,020
they see it they see it as a bunch of

00:31:23,159 --> 00:31:27,000
tiles they could deploy for it but what

00:31:25,020 --> 00:31:28,590
I wanted to show you and what I think is

00:31:27,000 --> 00:31:29,970
very fascinating is if you're looking at

00:31:28,590 --> 00:31:33,480
doing something like Cloud Foundry and

00:31:29,970 --> 00:31:35,460
you incorporate Jenkins on here most

00:31:33,480 --> 00:31:38,580
organizations if they they may already

00:31:35,460 --> 00:31:40,559
have a Jenkins in place but if you don't

00:31:38,580 --> 00:31:43,770
or if you're looking to create more of a

00:31:40,559 --> 00:31:46,710
cloud scale Jenkins ops managers really

00:31:43,770 --> 00:31:47,940
good at doing that for you so what what

00:31:46,710 --> 00:31:50,690
you typically will do from an

00:31:47,940 --> 00:31:52,500
installation perspective as you'll as

00:31:50,690 --> 00:31:54,480
you'll come in here you provide

00:31:52,500 --> 00:31:55,529
configuration for this and one of the

00:31:54,480 --> 00:31:58,559
things that you'll end up doing is

00:31:55,529 --> 00:32:01,200
creating a slave and a number of masters

00:31:58,559 --> 00:32:06,480
and slave combinations here so in my

00:32:01,200 --> 00:32:09,480
environment I have I have one slave and

00:32:06,480 --> 00:32:11,559
I have one two three I have sorry I have

00:32:09,480 --> 00:32:14,830
one master in three slaves in this case

00:32:11,559 --> 00:32:16,409
and those were actually created by going

00:32:14,830 --> 00:32:18,879
through this process here of me

00:32:16,409 --> 00:32:20,200
installing it standing it up so from

00:32:18,879 --> 00:32:23,710
rappers perspective is really easy for

00:32:20,200 --> 00:32:26,139
me to do when i was done doing this I it

00:32:23,710 --> 00:32:27,879
was very easy for users than to come in

00:32:26,139 --> 00:32:29,740
and start consuming it they could come

00:32:27,879 --> 00:32:31,659
in and start creating their application

00:32:29,740 --> 00:32:40,809
or their their Jenkin jobs

00:32:31,659 --> 00:32:42,159
configurations right here okay so some

00:32:40,809 --> 00:32:43,749
of the things that I had learned through

00:32:42,159 --> 00:32:45,549
this process and some of the best

00:32:43,749 --> 00:32:47,889
practices from from Cloud Foundry

00:32:45,549 --> 00:32:50,470
specifically the first one is not

00:32:47,889 --> 00:32:52,389
necessarily a hundred percent that you

00:32:50,470 --> 00:32:54,519
need to use this there are community

00:32:52,389 --> 00:32:55,929
driven plugins I just found that the

00:32:54,519 --> 00:32:57,999
cloud be Jenkins one seemed to work

00:32:55,929 --> 00:33:00,309
really well where I had some issues with

00:32:57,999 --> 00:33:02,289
some of the other ones but some of the

00:33:00,309 --> 00:33:03,999
other lessons learned were around hash

00:33:02,289 --> 00:33:06,909
commits and build numbers using that for

00:33:03,999 --> 00:33:08,769
versioning number and understanding that

00:33:06,909 --> 00:33:10,029
way when you looked at specific

00:33:08,769 --> 00:33:12,039
artifacts that were deployed within

00:33:10,029 --> 00:33:15,190
cloud foundry I could relate that back

00:33:12,039 --> 00:33:18,100
to a specific commit that occurred back

00:33:15,190 --> 00:33:19,809
all the way back and get canonical route

00:33:18,100 --> 00:33:21,610
names for ease of use and external

00:33:19,809 --> 00:33:24,119
access I get asked this question quite a

00:33:21,610 --> 00:33:26,440
bit from customers that are looking to

00:33:24,119 --> 00:33:28,960
use things like blue-gray deployments

00:33:26,440 --> 00:33:31,749
and just changing using techniques

00:33:28,960 --> 00:33:32,799
around the routing the way I described

00:33:31,749 --> 00:33:34,200
it to them as you always want to have

00:33:32,799 --> 00:33:36,460
you always have your external facing

00:33:34,200 --> 00:33:38,860
URLs that you provide and you have your

00:33:36,460 --> 00:33:40,809
internal ones and finding and using

00:33:38,860 --> 00:33:42,669
canonical rap names makes it very easy

00:33:40,809 --> 00:33:45,850
so if you were to look back at my

00:33:42,669 --> 00:33:47,379
example the when I was in development or

00:33:45,850 --> 00:33:50,320
when I was in development looking at

00:33:47,379 --> 00:33:52,299
things or if I was in QA or test my URL

00:33:50,320 --> 00:33:54,490
for that would always be map test dot

00:33:52,299 --> 00:33:56,529
whatever the rest you always so that way

00:33:54,490 --> 00:33:57,909
whoever was using it could go to the

00:33:56,529 --> 00:34:01,269
latest and greatest without having to

00:33:57,909 --> 00:34:04,149
worry about the build number as I

00:34:01,269 --> 00:34:05,200
mentioned previously i do see software

00:34:04,149 --> 00:34:06,519
configuration management and

00:34:05,200 --> 00:34:08,889
configuration details environment

00:34:06,519 --> 00:34:11,919
variables all of that moving into the

00:34:08,889 --> 00:34:13,750
SCM world and we have a lot of customers

00:34:11,919 --> 00:34:14,919
that are as they're looking to migrate

00:34:13,750 --> 00:34:17,319
their applications in the cloud foundry

00:34:14,919 --> 00:34:19,389
are definitely looking to do this and

00:34:17,319 --> 00:34:21,220
then I definitely think from a lessons

00:34:19,389 --> 00:34:23,330
learned in a best practice for

00:34:21,220 --> 00:34:25,340
continuous delivery

00:34:23,330 --> 00:34:28,310
any design that you include should have

00:34:25,340 --> 00:34:29,840
multi club for for Portability and scale

00:34:28,310 --> 00:34:31,760
I can't tell you how many people I've

00:34:29,840 --> 00:34:33,650
talked to in the last year that built or

00:34:31,760 --> 00:34:37,280
acquired a company that did everything

00:34:33,650 --> 00:34:39,080
on AWS and then the application really

00:34:37,280 --> 00:34:40,970
took off for them going into the

00:34:39,080 --> 00:34:43,130
millions and they wanted to pull it back

00:34:40,970 --> 00:34:45,830
in-house and the cost for them to do

00:34:43,130 --> 00:34:48,020
that or to get off AWS it was a 9th

00:34:45,830 --> 00:34:50,900
month cycle just to get to get all of

00:34:48,020 --> 00:34:55,820
their tooling redone and move back to be

00:34:50,900 --> 00:34:57,380
on Prem so some future designs and

00:34:55,820 --> 00:34:59,330
topics that I would recommend some other

00:34:57,380 --> 00:35:01,010
things that I evaluated I did look at

00:34:59,330 --> 00:35:02,870
the Jenkins workflows capabilities for

00:35:01,010 --> 00:35:05,480
this I chose I actually went down that

00:35:02,870 --> 00:35:09,790
path for about a week and I chose to go

00:35:05,480 --> 00:35:12,830
back to using kind of the out-of-the-box

00:35:09,790 --> 00:35:16,070
stuff that was there today I think

00:35:12,830 --> 00:35:17,630
workflows definitely has a good fit and

00:35:16,070 --> 00:35:18,760
it's the right direction for the Jenkins

00:35:17,630 --> 00:35:20,390
community and where they're going

00:35:18,760 --> 00:35:23,450
specifically around things like

00:35:20,390 --> 00:35:25,220
checkpoints one of the other questions

00:35:23,450 --> 00:35:27,170
and I think someone kind of asked us was

00:35:25,220 --> 00:35:29,600
the orchestration around microservices

00:35:27,170 --> 00:35:32,030
that's another topic that that I plan to

00:35:29,600 --> 00:35:35,090
to cover a little more detail since

00:35:32,030 --> 00:35:37,880
docker images seem to be the way that a

00:35:35,090 --> 00:35:39,170
lot of people are going another area

00:35:37,880 --> 00:35:41,210
that I would really like to get into is

00:35:39,170 --> 00:35:43,040
using docker images on Cloud Foundry

00:35:41,210 --> 00:35:47,450
Diego which is the next release of cloud

00:35:43,040 --> 00:35:49,370
foundry a high-scale on-premise cloud

00:35:47,450 --> 00:35:50,720
deployment using Jenkins on Cloud

00:35:49,370 --> 00:35:53,090
Foundry so I showed you guys the ops

00:35:50,720 --> 00:35:54,950
manager and how easy that is to kind of

00:35:53,090 --> 00:35:56,990
set up what I'd like to do is kind of

00:35:54,950 --> 00:36:00,140
take that a little further and do more

00:35:56,990 --> 00:36:02,150
of a large-scale deployment for what the

00:36:00,140 --> 00:36:03,980
enterprise would really need and then as

00:36:02,150 --> 00:36:05,720
an alternative to Bluegreen deployment

00:36:03,980 --> 00:36:08,870
there's a something called the autopilot

00:36:05,720 --> 00:36:10,430
and this is a what we call a CF plugin

00:36:08,870 --> 00:36:12,170
and if this is something that you might

00:36:10,430 --> 00:36:16,790
be interested in you can find that under

00:36:12,170 --> 00:36:17,780
plugins on Cloud Foundry org and then

00:36:16,790 --> 00:36:19,250
the last thing I wanted to share with

00:36:17,780 --> 00:36:21,830
you guys and then we can do a few

00:36:19,250 --> 00:36:23,900
question answers is I did create all of

00:36:21,830 --> 00:36:26,780
this documentation for everything that

00:36:23,900 --> 00:36:30,020
you saw here today is actually in my

00:36:26,780 --> 00:36:31,490
github account under a pipe pipe line so

00:36:30,020 --> 00:36:34,220
it has all the instructions on how to do

00:36:31,490 --> 00:36:36,349
this and set this up yourself

00:36:34,220 --> 00:36:38,840
and the best part is if you want to use

00:36:36,349 --> 00:36:41,150
pivotal web services to do that that's

00:36:38,840 --> 00:36:44,300
that's a free service that anybody can

00:36:41,150 --> 00:36:45,380
use you can go up create an account and

00:36:44,300 --> 00:36:47,450
you can start going through this process

00:36:45,380 --> 00:36:51,200
yourself if you're interested in doing

00:36:47,450 --> 00:36:52,520
that so with that I would like to thank

00:36:51,200 --> 00:37:00,830
you guys for coming out and I'll take

00:36:52,520 --> 00:37:05,359
any questions you have you showed how

00:37:00,830 --> 00:37:09,020
your Jenkins see i billed automatically

00:37:05,359 --> 00:37:12,080
did a deploy but presumably if you

00:37:09,020 --> 00:37:15,619
checked in bad code that would not get

00:37:12,080 --> 00:37:18,349
deployed right the the bad build you

00:37:15,619 --> 00:37:21,020
would sort of bail out and say ah yes if

00:37:18,349 --> 00:37:23,720
it failed if it failed during the PCF

00:37:21,020 --> 00:37:27,320
map job then it wouldn't have done the

00:37:23,720 --> 00:37:29,270
downstream jobs good yeah another

00:37:27,320 --> 00:37:31,700
question is you're using github for your

00:37:29,270 --> 00:37:32,869
source code repository I was yes but

00:37:31,700 --> 00:37:34,880
there's really no need to do that right

00:37:32,869 --> 00:37:38,570
you could just set up a git server in

00:37:34,880 --> 00:37:42,080
your pricing loud yeah yeah I for I have

00:37:38,570 --> 00:37:44,240
the fortunate to be able to use the the

00:37:42,080 --> 00:37:45,500
github because but I have I mean

00:37:44,240 --> 00:37:47,450
obviously working a lot of different

00:37:45,500 --> 00:37:49,760
enterprises they're not all using github

00:37:47,450 --> 00:37:51,290
so but I need any get server would work

00:37:49,760 --> 00:37:53,180
and you can actually any of the other

00:37:51,290 --> 00:37:55,900
source control management systems that

00:37:53,180 --> 00:37:55,900
work with this as well

00:38:00,450 --> 00:38:06,750
does that documentation show how to set

00:38:03,690 --> 00:38:09,510
up your own private cloud or is that

00:38:06,750 --> 00:38:11,520
another kind of system so that

00:38:09,510 --> 00:38:14,910
documentation that doesn't have it show

00:38:11,520 --> 00:38:16,079
how to do that there but there's a yeah

00:38:14,910 --> 00:38:24,960
there's a whole set of documents for

00:38:16,079 --> 00:38:28,200
that yeah yeah keep them going I love

00:38:24,960 --> 00:38:31,170
question you talk a lot about the

00:38:28,200 --> 00:38:35,190
routing and changing one route to the

00:38:31,170 --> 00:38:38,460
next is that by playing tricks with DNS

00:38:35,190 --> 00:38:41,070
or do you establish your DNS from the

00:38:38,460 --> 00:38:43,920
get-go and then you don't have to mess

00:38:41,070 --> 00:38:45,540
with the DNS afterwards or do you really

00:38:43,920 --> 00:38:47,550
have to get down and dirty with name

00:38:45,540 --> 00:38:49,230
servers know that said that's the best

00:38:47,550 --> 00:38:52,800
part and and I'm glad you brought that

00:38:49,230 --> 00:38:55,020
up so if you think back to the slide

00:38:52,800 --> 00:38:57,150
that had the nine bullets on it one of

00:38:55,020 --> 00:38:59,430
them was load balancing and routing and

00:38:57,150 --> 00:39:02,460
so when you go to set up an on-premise

00:38:59,430 --> 00:39:04,589
version of Cloud Foundry it it has a

00:39:02,460 --> 00:39:06,180
wild-card DNS that then forwards all the

00:39:04,589 --> 00:39:08,280
requests internal to what we call the

00:39:06,180 --> 00:39:10,020
routing layer and that's where all of

00:39:08,280 --> 00:39:11,790
that is actually happening so it's

00:39:10,020 --> 00:39:13,380
actually it's actually automated as part

00:39:11,790 --> 00:39:16,349
of the push is it will actually update

00:39:13,380 --> 00:39:18,540
the routing tables when you push a new

00:39:16,349 --> 00:39:21,319
application in and as long as your

00:39:18,540 --> 00:39:24,900
routes unique it knows how to get to it

00:39:21,319 --> 00:39:27,480
it scales perfectly yep yep we do about

00:39:24,900 --> 00:39:28,920
7th out we have 7000 so that pivotal web

00:39:27,480 --> 00:39:32,160
services has about 7,000 applications

00:39:28,920 --> 00:39:33,510
running in it today and we use the same

00:39:32,160 --> 00:39:36,150
routing I think it's I think there's

00:39:33,510 --> 00:39:38,730
only about for routing VMs that support

00:39:36,150 --> 00:39:41,510
that all right well thank you for for

00:39:38,730 --> 00:39:41,510
coming I appreciate it

00:39:50,970 --> 00:39:53,030

YouTube URL: https://www.youtube.com/watch?v=dU8tVmbyATU


