Title: JUC U.S. East 2015 - QA in DevOps: Transformation thru Automation via Jenkins
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Tanya Kravtsov, ROKITT 

Since DevOps is based on continuous delivery, anything that breaks the continuity is a bottleneck. Often, QA becomes that bottleneck due to an unstable test environment, unavailable test data and/or manual processes. This presentation explores how Jenkins, together with other automation tools and techniques, can help to address process bottlenecks and achieve a true DevOps state.
Captions: 
	00:00:15,240 --> 00:00:20,740
thank you all for coming to the session

00:00:17,230 --> 00:00:23,740
I'm very excited to be here so it took

00:00:20,740 --> 00:00:25,630
me three hours last night to wait for my

00:00:23,740 --> 00:00:27,189
15-minute flight so I would like to

00:00:25,630 --> 00:00:28,689
apologize in advance for any bloopers

00:00:27,189 --> 00:00:33,850
that I might make I got here at three in

00:00:28,689 --> 00:00:35,910
the morning but let's get started so the

00:00:33,850 --> 00:00:39,940
session is going to be about

00:00:35,910 --> 00:00:41,680
transformations through automation just

00:00:39,940 --> 00:00:44,110
wanted to quickly go through the agenda

00:00:41,680 --> 00:00:45,550
basically I'll quickly cover the

00:00:44,110 --> 00:00:47,559
definition of DevOps I'm sure everybody

00:00:45,550 --> 00:00:49,030
here know what it is but there are so

00:00:47,559 --> 00:00:51,730
many definitions and I would just like

00:00:49,030 --> 00:00:53,800
to set the context then we'll go through

00:00:51,730 --> 00:00:56,680
the steps that will actually take us to

00:00:53,800 --> 00:00:58,870
the true state of DevOps and then I

00:00:56,680 --> 00:01:02,829
wanted to show what in my opinion is the

00:00:58,870 --> 00:01:06,160
target state and where we want to be so

00:01:02,829 --> 00:01:08,890
briefly about myself my name is Tanya

00:01:06,160 --> 00:01:10,600
kravtsov I'm heading up the automation

00:01:08,890 --> 00:01:13,390
and continuous delivery practice at

00:01:10,600 --> 00:01:15,899
racket racket is actually only a few

00:01:13,390 --> 00:01:17,950
months old company so I think my

00:01:15,899 --> 00:01:19,299
professional and personal life can best

00:01:17,950 --> 00:01:22,479
be described as a series of

00:01:19,299 --> 00:01:25,030
transformations I started out working at

00:01:22,479 --> 00:01:27,009
the big financial companies then I moved

00:01:25,030 --> 00:01:29,680
to a product development company and now

00:01:27,009 --> 00:01:34,420
I'm at a start-up and also I started

00:01:29,680 --> 00:01:37,210
working as a developer and moved into

00:01:34,420 --> 00:01:38,560
testing then I moved into automation and

00:01:37,210 --> 00:01:40,840
realized that this is where my passion

00:01:38,560 --> 00:01:43,000
lies exactly a year ago at this

00:01:40,840 --> 00:01:44,950
conference is very got an idea to start

00:01:43,000 --> 00:01:47,740
a meetup group which is called DevOps

00:01:44,950 --> 00:01:50,200
key of New Jersey and the reason was

00:01:47,740 --> 00:01:51,729
because I wanted to hear more and talk

00:01:50,200 --> 00:01:54,490
more about DevOps and there was nothing

00:01:51,729 --> 00:01:56,619
in New Jersey that covered that so we

00:01:54,490 --> 00:02:00,759
now have 200 plus members and we meet on

00:01:56,619 --> 00:02:02,950
regular basis and it's very exciting so

00:02:00,759 --> 00:02:05,350
as a tester I've been developing and

00:02:02,950 --> 00:02:08,019
managing automation for many years and

00:02:05,350 --> 00:02:09,759
at some point I realized that even

00:02:08,019 --> 00:02:11,200
though testing is automated it's not

00:02:09,759 --> 00:02:13,060
enough there are still a lot of

00:02:11,200 --> 00:02:15,850
processes before and after and during

00:02:13,060 --> 00:02:18,130
which our menu which kind of make the

00:02:15,850 --> 00:02:20,019
whole automation lose value and that's

00:02:18,130 --> 00:02:22,090
when I started realizing that there is a

00:02:20,019 --> 00:02:23,620
much bigger world out there there is not

00:02:22,090 --> 00:02:26,530
just test Adam ation there's process

00:02:23,620 --> 00:02:27,210
automation and basically this is why I'm

00:02:26,530 --> 00:02:29,520
here I

00:02:27,210 --> 00:02:31,410
for the several transformation

00:02:29,520 --> 00:02:34,080
initiative spree in my previous company

00:02:31,410 --> 00:02:35,160
and now as part of our startup we

00:02:34,080 --> 00:02:37,160
actually working with different

00:02:35,160 --> 00:02:39,630
companies and help them to transform and

00:02:37,160 --> 00:02:43,050
just wanted to share the experience of

00:02:39,630 --> 00:02:45,120
how you can get from being entirely menu

00:02:43,050 --> 00:02:47,400
or having some automated processes to

00:02:45,120 --> 00:02:49,650
the point where you truly can't deploy

00:02:47,400 --> 00:02:54,660
10 times the three thousand times the

00:02:49,650 --> 00:02:55,920
days Jin Kim was just telling us lastly

00:02:54,660 --> 00:02:58,310
I mean I used to be a competitive

00:02:55,920 --> 00:03:02,790
ballroom dancer now I'm a mom and

00:02:58,310 --> 00:03:04,560
working twenty-four/seven almost so yes

00:03:02,790 --> 00:03:06,120
transformation i think is part of our

00:03:04,560 --> 00:03:09,450
lives and that's what you're going to

00:03:06,120 --> 00:03:13,050
talk about so there are many definitions

00:03:09,450 --> 00:03:15,360
of DevOps some of them i really like i

00:03:13,050 --> 00:03:17,520
did one of my favorite ones is the one

00:03:15,360 --> 00:03:19,500
that jin kim just went through talking

00:03:17,520 --> 00:03:21,870
about three ways however i think this

00:03:19,500 --> 00:03:24,720
one summarizes it the best it was coined

00:03:21,870 --> 00:03:27,750
by john villas and it's called camps and

00:03:24,720 --> 00:03:30,180
then l-valine was added later on but

00:03:27,750 --> 00:03:33,330
basically it talks about five components

00:03:30,180 --> 00:03:35,130
of DevOps right culture is the number

00:03:33,330 --> 00:03:37,140
one component if you don't have a

00:03:35,130 --> 00:03:39,510
culture in your company which is ready

00:03:37,140 --> 00:03:41,250
to accept the changes it's very

00:03:39,510 --> 00:03:43,170
difficult to get started you might start

00:03:41,250 --> 00:03:44,640
automating and putting things in but if

00:03:43,170 --> 00:03:46,790
they don't get accepted it's going to

00:03:44,640 --> 00:03:49,350
stay with one group of is one person

00:03:46,790 --> 00:03:50,940
once you have the acceptance that's when

00:03:49,350 --> 00:03:53,010
you start automating right and

00:03:50,940 --> 00:03:55,710
automation is the essential component of

00:03:53,010 --> 00:03:59,490
DevOps you automate every manual process

00:03:55,710 --> 00:04:01,020
that you can find and you make sure that

00:03:59,490 --> 00:04:02,870
whatever you automate doesn't break

00:04:01,020 --> 00:04:07,080
because of something else that's

00:04:02,870 --> 00:04:09,240
interrupting it lean is I think in gene

00:04:07,080 --> 00:04:12,720
Kim's book he mentions that DevOps is a

00:04:09,240 --> 00:04:15,750
lean for IT it basically helps you to

00:04:12,720 --> 00:04:18,510
identify bottlenecks and get rid of them

00:04:15,750 --> 00:04:20,220
and this is what lean is all about once

00:04:18,510 --> 00:04:21,989
you have your automation in place it's

00:04:20,220 --> 00:04:24,030
very important to cut in your monitoring

00:04:21,989 --> 00:04:26,550
it and measuring it right and this is

00:04:24,030 --> 00:04:29,190
what M stands for and the most important

00:04:26,550 --> 00:04:31,230
component is sharing this is what all of

00:04:29,190 --> 00:04:33,720
us are doing here you're talking to each

00:04:31,230 --> 00:04:36,060
other and me presenting here this is us

00:04:33,720 --> 00:04:37,650
sharing what we learned about DevOps and

00:04:36,060 --> 00:04:38,090
that's how their webs get spread and

00:04:37,650 --> 00:04:42,860
that's how

00:04:38,090 --> 00:04:44,870
that more companies get started so this

00:04:42,860 --> 00:04:48,110
is all about what DevOps is but

00:04:44,870 --> 00:04:52,070
basically how do we get there that's the

00:04:48,110 --> 00:04:54,320
most important question step number one

00:04:52,070 --> 00:04:57,110
in starting the journey is identifying

00:04:54,320 --> 00:04:58,729
the bottlenecks and again I want to

00:04:57,110 --> 00:05:01,190
refer to the Phoenix project book which

00:04:58,729 --> 00:05:03,190
I really like where Gingka made the

00:05:01,190 --> 00:05:06,770
statement that any improvement made

00:05:03,190 --> 00:05:09,770
anywhere besides the bottleneck is an

00:05:06,770 --> 00:05:11,720
illusion and what it means is if you

00:05:09,770 --> 00:05:13,639
improve something where you don't have a

00:05:11,720 --> 00:05:15,110
bottleneck it might actually speed up

00:05:13,639 --> 00:05:16,700
your process but if the pattern that

00:05:15,110 --> 00:05:19,250
comes afterwards it's only going to make

00:05:16,700 --> 00:05:21,710
it worse if you improve something after

00:05:19,250 --> 00:05:23,600
the bottleneck then again it's not

00:05:21,710 --> 00:05:26,090
really going to help you so we need to

00:05:23,600 --> 00:05:27,680
identify what those wastes are with

00:05:26,090 --> 00:05:31,130
those bottlenecks are and we need to

00:05:27,680 --> 00:05:32,750
figure out how to address them so let me

00:05:31,130 --> 00:05:35,990
know if any of those look familiar to

00:05:32,750 --> 00:05:37,729
you you have your I mean as an

00:05:35,990 --> 00:05:40,460
automation test the right we're very

00:05:37,729 --> 00:05:42,320
often run tests we find bugs but then

00:05:40,460 --> 00:05:45,320
developer says it's not the bucket works

00:05:42,320 --> 00:05:47,240
on my machine it could be an environment

00:05:45,320 --> 00:05:50,930
issue it could be a data issue but as

00:05:47,240 --> 00:05:54,550
long as we have this we do not have true

00:05:50,930 --> 00:05:54,550
transparency of how a product works

00:05:54,880 --> 00:06:00,080
almost every company right now is going

00:05:57,169 --> 00:06:01,490
agile and it's great everybody's going

00:06:00,080 --> 00:06:03,110
through the Sprint's developers are

00:06:01,490 --> 00:06:04,639
committing to their points but what we

00:06:03,110 --> 00:06:06,470
find very often is because of those

00:06:04,639 --> 00:06:08,570
commitments there is no time for

00:06:06,470 --> 00:06:11,180
anything else there is no time for those

00:06:08,570 --> 00:06:14,450
twenty percent to clean up your backlog

00:06:11,180 --> 00:06:16,220
to fix the bugs and to put the processes

00:06:14,450 --> 00:06:21,349
in that actually can help to speed up

00:06:16,220 --> 00:06:23,000
the delivery and finally there is always

00:06:21,349 --> 00:06:25,010
few people in the company that want to

00:06:23,000 --> 00:06:26,330
change things but then there is probably

00:06:25,010 --> 00:06:27,950
ninety percent of people who are

00:06:26,330 --> 00:06:29,570
perfectly happy with the way things are

00:06:27,950 --> 00:06:33,979
and they don't want to accept those

00:06:29,570 --> 00:06:35,780
changes so in my opinion these are some

00:06:33,979 --> 00:06:38,450
of the major bottlenecks I'm sure you

00:06:35,780 --> 00:06:41,360
have more examples of your own but i

00:06:38,450 --> 00:06:42,680
would like to concentrate on those so

00:06:41,360 --> 00:06:44,450
some things that can cause the

00:06:42,680 --> 00:06:46,880
bottlenecks are inconsistent

00:06:44,450 --> 00:06:49,820
environments your test cycle which takes

00:06:46,880 --> 00:06:50,860
a long time and cannot provide you quick

00:06:49,820 --> 00:06:55,090
feedback and

00:06:50,860 --> 00:06:57,159
in your processes so now that you

00:06:55,090 --> 00:07:00,900
identify the bottlenecks what can we do

00:06:57,159 --> 00:07:04,389
next again most companies have this

00:07:00,900 --> 00:07:07,389
everybody versions their code but not

00:07:04,389 --> 00:07:10,860
everybody knows that everything should

00:07:07,389 --> 00:07:14,250
be stored in version management system

00:07:10,860 --> 00:07:16,900
so while the code stored in git or svn

00:07:14,250 --> 00:07:19,349
you also have your tests you have you in

00:07:16,900 --> 00:07:21,460
infrastructure code you have your

00:07:19,349 --> 00:07:23,080
requirements which are all stored in

00:07:21,460 --> 00:07:24,729
separate locations so very often they're

00:07:23,080 --> 00:07:27,460
actually stored in Excel files or

00:07:24,729 --> 00:07:28,990
documents on local hard drives as long

00:07:27,460 --> 00:07:31,750
as that happens there is no consistency

00:07:28,990 --> 00:07:33,250
there is no single point of truth and

00:07:31,750 --> 00:07:35,770
you cannot link your code to your

00:07:33,250 --> 00:07:38,259
environment to your test at the single

00:07:35,770 --> 00:07:40,150
point in time so this is a number one

00:07:38,259 --> 00:07:42,129
before you automate anything else just

00:07:40,150 --> 00:07:46,120
make sure that you can trace everything

00:07:42,129 --> 00:07:48,069
back to a single location almost in

00:07:46,120 --> 00:07:50,620
every slide I have examples of the tools

00:07:48,069 --> 00:07:53,680
a lot of you might be using or might be

00:07:50,620 --> 00:07:57,099
familiar with but this is some of the

00:07:53,680 --> 00:08:00,849
tools that I worked with in previous

00:07:57,099 --> 00:08:02,680
companies hand right now also once you

00:08:00,849 --> 00:08:04,509
have your code in your scripts and

00:08:02,680 --> 00:08:07,300
requirements it's also important to

00:08:04,509 --> 00:08:09,339
store your release and deployment

00:08:07,300 --> 00:08:10,860
artifacts in the version management

00:08:09,339 --> 00:08:13,060
system because if for some reason

00:08:10,860 --> 00:08:15,190
something happens and you have to go

00:08:13,060 --> 00:08:21,460
back you have to have an ability to do

00:08:15,190 --> 00:08:23,409
that robot once you have that then you

00:08:21,460 --> 00:08:26,650
should automate the build I think this

00:08:23,409 --> 00:08:29,860
is one of the points that most companies

00:08:26,650 --> 00:08:31,719
already do I have rarely seen manual

00:08:29,860 --> 00:08:34,149
builds in the past couple of years but

00:08:31,719 --> 00:08:35,890
what still often is there is that you

00:08:34,149 --> 00:08:38,169
have to push the button to run the build

00:08:35,890 --> 00:08:41,469
even though the Butte process itself is

00:08:38,169 --> 00:08:44,350
automated it's not integrated within a

00:08:41,469 --> 00:08:46,360
continuous integration so it's very

00:08:44,350 --> 00:08:48,399
important one to automate the build and

00:08:46,360 --> 00:08:49,899
then have that built as part of your

00:08:48,399 --> 00:08:52,390
development process so soon as the

00:08:49,899 --> 00:08:54,640
developer pushes the code that bill gets

00:08:52,390 --> 00:08:56,890
triggered automatically it's not always

00:08:54,640 --> 00:09:00,760
possible because sometimes builds run

00:08:56,890 --> 00:09:02,440
for hours which is the first thing to

00:09:00,760 --> 00:09:04,240
address right so if you bill takes

00:09:02,440 --> 00:09:06,459
couple of hours

00:09:04,240 --> 00:09:08,740
it's there is probably somewhere you can

00:09:06,459 --> 00:09:11,260
improve it so once you get your bill to

00:09:08,740 --> 00:09:13,270
under an hour you can try to do it after

00:09:11,260 --> 00:09:15,610
every comment or at least do it after

00:09:13,270 --> 00:09:18,310
every several commits and trigger it

00:09:15,610 --> 00:09:20,770
automatically and if the build is broken

00:09:18,310 --> 00:09:22,540
the developer who broke it has to fix it

00:09:20,770 --> 00:09:25,110
until the code goes to testing or

00:09:22,540 --> 00:09:25,110
anything else

00:09:31,550 --> 00:09:36,560
so next step is like the NY v by always

00:09:34,940 --> 00:09:41,240
here right it's continuous integration

00:09:36,560 --> 00:09:42,740
Jenkins very important step in getting

00:09:41,240 --> 00:09:46,070
to the DevOps is setting up the

00:09:42,740 --> 00:09:48,230
continuous integration server Jenkins

00:09:46,070 --> 00:09:49,880
can bring all those pieces together you

00:09:48,230 --> 00:09:52,519
have your version management you have

00:09:49,880 --> 00:09:55,519
your bill detonation so just get started

00:09:52,519 --> 00:09:57,829
you can start by integrating that once

00:09:55,519 --> 00:09:59,899
you set up Jenkins you integrate it with

00:09:57,829 --> 00:10:01,490
your version control you integrate it

00:09:59,899 --> 00:10:03,529
with your automated build scripts and

00:10:01,490 --> 00:10:06,170
all of a sudden you're already on your

00:10:03,529 --> 00:10:09,320
way to DevOps you building after every

00:10:06,170 --> 00:10:11,510
commit you checkin out code as soon as

00:10:09,320 --> 00:10:13,279
developer checks in and you do your

00:10:11,510 --> 00:10:15,230
builds and if they build breaks you send

00:10:13,279 --> 00:10:17,209
an email to developers so this is

00:10:15,230 --> 00:10:21,010
probably like fifty percent of your

00:10:17,209 --> 00:10:21,010
continuous integration process

00:10:28,150 --> 00:10:32,680
once you have you build automated it's

00:10:30,820 --> 00:10:34,600
good to know that the build works but

00:10:32,680 --> 00:10:36,850
then there are other things that might

00:10:34,600 --> 00:10:39,430
break it's so the next step is to

00:10:36,850 --> 00:10:41,110
introduce unit testing and this is

00:10:39,430 --> 00:10:43,060
actually surprisingly even though right

00:10:41,110 --> 00:10:46,240
now it seems like everybody's doing

00:10:43,060 --> 00:10:48,070
testing unit testing is something that

00:10:46,240 --> 00:10:49,930
either then manually are very often not

00:10:48,070 --> 00:10:52,390
done at all and I think again it goes

00:10:49,930 --> 00:10:55,030
back to the whole a gel delivery we are

00:10:52,390 --> 00:10:57,190
in such a hurry to deliver code that we

00:10:55,030 --> 00:10:59,110
don't have time to write the test right

00:10:57,190 --> 00:11:04,360
and that's I think as an issue because

00:10:59,110 --> 00:11:05,830
we end up paying for it later on so many

00:11:04,360 --> 00:11:08,320
of you probably have already seen the

00:11:05,830 --> 00:11:11,290
testing pyramid and this basically says

00:11:08,320 --> 00:11:13,840
that majority of your test should be

00:11:11,290 --> 00:11:15,190
unit test the reason being that even

00:11:13,840 --> 00:11:18,400
though when you think test automation

00:11:15,190 --> 00:11:20,500
usually do you think about UI automation

00:11:18,400 --> 00:11:22,840
this is the worst thing that you can

00:11:20,500 --> 00:11:26,650
possibly automate right you I constantly

00:11:22,840 --> 00:11:29,080
changes it's not stable it varies based

00:11:26,650 --> 00:11:31,150
on your screen resolutions it's

00:11:29,080 --> 00:11:33,700
different for mobile it's different for

00:11:31,150 --> 00:11:35,770
web however when you test on the unit

00:11:33,700 --> 00:11:39,820
level it's stable and if you give you

00:11:35,770 --> 00:11:43,720
consistent result all the time so

00:11:39,820 --> 00:11:45,970
definitely create unit tests here I list

00:11:43,720 --> 00:11:47,740
some of the best practices I mean unit

00:11:45,970 --> 00:11:49,720
tests have to be short and independent

00:11:47,740 --> 00:11:51,640
they should only fail when a bug is

00:11:49,720 --> 00:11:54,130
introduced and we need to know the

00:11:51,640 --> 00:11:55,330
reason why the test fails right so even

00:11:54,130 --> 00:11:57,550
though unit testing seems have

00:11:55,330 --> 00:11:59,860
explanatory there is a whole are to it

00:11:57,550 --> 00:12:02,080
and you know it's it's worth learning

00:11:59,860 --> 00:12:04,300
and then of course there is test-driven

00:12:02,080 --> 00:12:06,160
development which is again something

00:12:04,300 --> 00:12:08,380
that's very popular right now but

00:12:06,160 --> 00:12:09,990
basically what it means is that you need

00:12:08,380 --> 00:12:13,480
to write tests before you write the code

00:12:09,990 --> 00:12:15,490
so first you create a test that you know

00:12:13,480 --> 00:12:18,520
you need to do as part of your

00:12:15,490 --> 00:12:19,990
application you run at the Braves and

00:12:18,520 --> 00:12:22,390
then you write the code that fixes that

00:12:19,990 --> 00:12:24,370
test and this will you you can make sure

00:12:22,390 --> 00:12:26,320
that every single possible scenario is

00:12:24,370 --> 00:12:28,540
covered of course it doesn't eliminate

00:12:26,320 --> 00:12:30,340
the need for API layer testing a GUI

00:12:28,540 --> 00:12:31,810
level testing but I think it's going to

00:12:30,340 --> 00:12:33,880
bring your product a whole different

00:12:31,810 --> 00:12:35,440
level and now because this unit tests

00:12:33,880 --> 00:12:37,900
are small and fast you can run them

00:12:35,440 --> 00:12:41,380
after every build through Jenkins or

00:12:37,900 --> 00:12:41,710
through any other automated process and

00:12:41,380 --> 00:12:44,020
you

00:12:41,710 --> 00:12:45,760
make sure that not only your beauty but

00:12:44,020 --> 00:12:48,160
also your most important functionality

00:12:45,760 --> 00:12:49,870
works and if it breaks again you can

00:12:48,160 --> 00:12:57,790
link it back to the developer who wrote

00:12:49,870 --> 00:13:00,730
the code so now that we have the built

00:12:57,790 --> 00:13:05,820
and the unit test we can introduce the

00:13:00,730 --> 00:13:07,540
static analysis and the quality metrics

00:13:05,820 --> 00:13:10,150
so there are a lot of different

00:13:07,540 --> 00:13:13,690
varieties of static analysis there are

00:13:10,150 --> 00:13:16,660
tools like fine bug and PMG that

00:13:13,690 --> 00:13:18,640
basically validate that the code is

00:13:16,660 --> 00:13:20,470
coded correctly there are tools that

00:13:18,640 --> 00:13:23,410
detect memory leaks there are tools that

00:13:20,470 --> 00:13:26,050
detect security vulnerabilities all of

00:13:23,410 --> 00:13:29,020
them have plugins into Jenkins so

00:13:26,050 --> 00:13:30,670
basically every time somebody checks in

00:13:29,020 --> 00:13:32,920
the code those tools running the give

00:13:30,670 --> 00:13:35,320
you a report and the best thing about

00:13:32,920 --> 00:13:37,480
them is that you know the difference so

00:13:35,320 --> 00:13:39,250
one reason that I've seen by companies

00:13:37,480 --> 00:13:40,840
don't want to get started with the

00:13:39,250 --> 00:13:43,090
stools is because your product has been

00:13:40,840 --> 00:13:44,830
around for many years and when you run

00:13:43,090 --> 00:13:47,230
those static analysis for the first time

00:13:44,830 --> 00:13:50,350
it returns a thousandth of issues a lot

00:13:47,230 --> 00:13:52,240
of them high severity right so what

00:13:50,350 --> 00:13:54,430
you're going to do is that what we've

00:13:52,240 --> 00:13:56,620
done previously is that you let it run

00:13:54,430 --> 00:13:59,170
you get those cells and tissues and you

00:13:56,620 --> 00:14:01,300
make that your baseline right so next

00:13:59,170 --> 00:14:04,120
time you run if you get thousand one you

00:14:01,300 --> 00:14:06,580
fix that one if you have time later on

00:14:04,120 --> 00:14:10,030
and you finally have a chance to go to

00:14:06,580 --> 00:14:11,650
that twenty percent of refactoring clean

00:14:10,030 --> 00:14:15,580
up the backlog then you go back to those

00:14:11,650 --> 00:14:17,620
thousand but don't let the huge report

00:14:15,580 --> 00:14:21,540
discourage you right just take whatever

00:14:17,620 --> 00:14:21,540
is there as a baseline and move forward

00:14:21,870 --> 00:14:26,410
also there is code coverage analysis so

00:14:24,760 --> 00:14:28,540
for that of course you do need unit

00:14:26,410 --> 00:14:30,340
testing but once you have your unit

00:14:28,540 --> 00:14:31,690
testing you want to start tracking how

00:14:30,340 --> 00:14:34,630
much of the code is actually being

00:14:31,690 --> 00:14:36,670
tested how many things the gym is right

00:14:34,630 --> 00:14:38,800
so you can integrate code coverage

00:14:36,670 --> 00:14:41,050
analysis also as part of Jenkins and

00:14:38,800 --> 00:14:43,660
every time you check in at hotel you

00:14:41,050 --> 00:14:45,190
what your current coverage is and it

00:14:43,660 --> 00:14:47,940
will let you know if you need to add any

00:14:45,190 --> 00:14:47,940
more unit tests

00:14:52,870 --> 00:14:57,410
so so far all the things we have

00:14:55,310 --> 00:15:00,200
described it can actually be used and

00:14:57,410 --> 00:15:02,660
done on the development side right even

00:15:00,200 --> 00:15:05,720
though I mean I'm primarily working in

00:15:02,660 --> 00:15:07,880
the testing I feel that you know testing

00:15:05,720 --> 00:15:09,980
is not it should not be associated with

00:15:07,880 --> 00:15:12,410
the key item it should definitely start

00:15:09,980 --> 00:15:14,570
with the development so all of this unit

00:15:12,410 --> 00:15:16,730
testing static analysis code coverage

00:15:14,570 --> 00:15:18,380
this is something developer sexually

00:15:16,730 --> 00:15:21,440
should care about and I think a lot of

00:15:18,380 --> 00:15:25,850
them do but again I think because of all

00:15:21,440 --> 00:15:27,800
this deliverables and the pressure of

00:15:25,850 --> 00:15:30,620
the time there is no time to think about

00:15:27,800 --> 00:15:32,149
it but once you start doing this you

00:15:30,620 --> 00:15:40,160
will see how it actually simplifies your

00:15:32,149 --> 00:15:42,230
life so this is something that's not

00:15:40,160 --> 00:15:44,540
actually normally practice but I found

00:15:42,230 --> 00:15:46,970
it extremely useful in all the

00:15:44,540 --> 00:15:48,860
transformations that we've done we

00:15:46,970 --> 00:15:51,709
mentioned before that it only works on

00:15:48,860 --> 00:15:53,360
my machine bottleneck and the reason

00:15:51,709 --> 00:15:55,430
that usually happens is because there

00:15:53,360 --> 00:15:57,170
are some issues with the environment so

00:15:55,430 --> 00:15:59,089
you have every single timate you run

00:15:57,170 --> 00:16:01,790
your tests overnight and then after the

00:15:59,089 --> 00:16:04,130
first test everything fails because your

00:16:01,790 --> 00:16:06,709
database server is down or because you

00:16:04,130 --> 00:16:08,870
run out of your disk space on one of

00:16:06,709 --> 00:16:10,730
your machines right and basically you

00:16:08,870 --> 00:16:12,649
wasted your whole regression cycle

00:16:10,730 --> 00:16:14,990
because of one simple environment

00:16:12,649 --> 00:16:17,029
problem so one thing to do and this is

00:16:14,990 --> 00:16:19,519
another place where Jenkins can come in

00:16:17,029 --> 00:16:20,750
very useful is you can introduce a very

00:16:19,519 --> 00:16:22,550
small test that's going to run

00:16:20,750 --> 00:16:24,769
throughout the day it can run after

00:16:22,550 --> 00:16:26,630
every comedian every hour that basically

00:16:24,769 --> 00:16:29,449
validates that your environment is ready

00:16:26,630 --> 00:16:31,519
for testing right and this can include

00:16:29,449 --> 00:16:33,800
validation of your application service

00:16:31,519 --> 00:16:36,829
web servers it can check database

00:16:33,800 --> 00:16:39,529
listeners it can verify that you still

00:16:36,829 --> 00:16:41,839
have ram available disk space available

00:16:39,529 --> 00:16:43,250
it's actually a bunch of shell scripts

00:16:41,839 --> 00:16:45,319
that you can right there are tools that

00:16:43,250 --> 00:16:48,199
out there like what's a boat that can

00:16:45,319 --> 00:16:50,389
also help is that and if you find those

00:16:48,199 --> 00:16:52,399
issues you have several ways to deal

00:16:50,389 --> 00:16:55,100
with that one you can just send an email

00:16:52,399 --> 00:16:56,660
to your system administrators and let

00:16:55,100 --> 00:16:58,819
them know that there is an issue please

00:16:56,660 --> 00:17:01,310
fix it another one you can actually

00:16:58,819 --> 00:17:03,600
write a script that's going to reboot

00:17:01,310 --> 00:17:07,199
your servers it's going to start

00:17:03,600 --> 00:17:08,730
database and so forth so it's a

00:17:07,199 --> 00:17:11,130
different different levels of how you

00:17:08,730 --> 00:17:12,990
can address it but even if you send the

00:17:11,130 --> 00:17:15,660
simple Mayo it actually might prevent

00:17:12,990 --> 00:17:19,339
you from wasting that nightly regression

00:17:15,660 --> 00:17:19,339
cycle that you would have otherwise done

00:17:19,730 --> 00:17:23,970
another step that the environment is is

00:17:22,319 --> 00:17:25,799
the product readiness test that one I

00:17:23,970 --> 00:17:28,620
think we're more familiar with the old

00:17:25,799 --> 00:17:30,210
like do production checkouts right we

00:17:28,620 --> 00:17:31,650
want to want to make sure that once you

00:17:30,210 --> 00:17:33,960
go to production it's still up and

00:17:31,650 --> 00:17:36,120
running but nobody really thinks of it

00:17:33,960 --> 00:17:38,400
as part of your development and test

00:17:36,120 --> 00:17:40,470
cycle because again if somebody checked

00:17:38,400 --> 00:17:42,840
in the cold and the build worked but

00:17:40,470 --> 00:17:45,360
somehow it completely brought down your

00:17:42,840 --> 00:17:48,299
application you might not find out about

00:17:45,360 --> 00:17:50,580
that until you run your gooey tests

00:17:48,299 --> 00:17:53,039
which takes eight hours so instead of

00:17:50,580 --> 00:17:55,049
that again on regular basis after every

00:17:53,039 --> 00:17:56,850
come in just run a small smoke test we

00:17:55,049 --> 00:17:58,559
just checks the main pages of your

00:17:56,850 --> 00:18:00,720
application make sure that it's up and

00:17:58,559 --> 00:18:10,080
running and then you can go into your

00:18:00,720 --> 00:18:11,789
like thousands test regression sweet so

00:18:10,080 --> 00:18:13,650
now that we have the bill data mated

00:18:11,789 --> 00:18:15,120
unit tests automated we know that the

00:18:13,650 --> 00:18:16,919
environment is ready this is when we

00:18:15,120 --> 00:18:22,010
ready to start running our automated

00:18:16,919 --> 00:18:24,419
regression and again traditionally

00:18:22,010 --> 00:18:26,370
regression testing is done as part of

00:18:24,419 --> 00:18:29,370
this huge key cycle which very often

00:18:26,370 --> 00:18:31,440
happens once a month it is not a good

00:18:29,370 --> 00:18:33,030
idea regression is basically confirming

00:18:31,440 --> 00:18:34,620
that whatever your worked in your

00:18:33,030 --> 00:18:37,650
application yesterday is still working

00:18:34,620 --> 00:18:39,179
today so if your developers committed

00:18:37,650 --> 00:18:40,590
something it means that you should

00:18:39,179 --> 00:18:42,929
verify that everything that worked

00:18:40,590 --> 00:18:44,520
before still works most of the time

00:18:42,929 --> 00:18:48,270
you're not able to do it after every

00:18:44,520 --> 00:18:50,520
commit because application is large GUI

00:18:48,270 --> 00:18:52,470
testing a long time to run so you cannot

00:18:50,520 --> 00:18:55,289
possibly answer them in 15 minutes or

00:18:52,470 --> 00:18:57,210
even in an hour but overnight is doable

00:18:55,289 --> 00:18:59,370
I mean I've been in the company where

00:18:57,210 --> 00:19:02,640
regression run for six days when I got

00:18:59,370 --> 00:19:05,429
there so there are different techniques

00:19:02,640 --> 00:19:06,960
you can use to reduce that one of course

00:19:05,429 --> 00:19:09,960
is you can start running in parallel

00:19:06,960 --> 00:19:13,460
right so you can throw hardware at it or

00:19:09,960 --> 00:19:16,500
virtual machines which is great but

00:19:13,460 --> 00:19:17,470
there is a small area to it because the

00:19:16,500 --> 00:19:19,690
more tests to run the

00:19:17,470 --> 00:19:21,190
what else you have to analyze right so

00:19:19,690 --> 00:19:23,320
even if you're able to get through your

00:19:21,190 --> 00:19:25,450
10,000 tests in the night how you going

00:19:23,320 --> 00:19:27,700
to look at the results right so if you

00:19:25,450 --> 00:19:30,070
want to run something every night or on

00:19:27,700 --> 00:19:32,440
regular basis you need to reduce the

00:19:30,070 --> 00:19:35,740
scope of testing and you need to run

00:19:32,440 --> 00:19:38,530
what's important also very important

00:19:35,740 --> 00:19:40,809
pieces the web services testing so if

00:19:38,530 --> 00:19:43,120
you run the GUI but the more more you

00:19:40,809 --> 00:19:44,770
can do on your API levels again it

00:19:43,120 --> 00:19:46,630
speeds up the execution and you can

00:19:44,770 --> 00:19:49,059
cover more of the application by doing

00:19:46,630 --> 00:19:51,580
that if you can do bows and you can

00:19:49,059 --> 00:19:54,340
identify the issue happens on the API

00:19:51,580 --> 00:19:56,549
layer or in the UI layer that's even

00:19:54,340 --> 00:20:00,669
better right because that will speed up

00:19:56,549 --> 00:20:02,830
developers analysis time the data

00:20:00,669 --> 00:20:05,710
management is a very important piece so

00:20:02,830 --> 00:20:07,419
I've seen great automation suites in the

00:20:05,710 --> 00:20:10,299
state the environment which still don't

00:20:07,419 --> 00:20:13,720
run because there is no test data if you

00:20:10,299 --> 00:20:16,690
have test data processes done manually

00:20:13,720 --> 00:20:19,240
then your whole DevOps eiko is broken

00:20:16,690 --> 00:20:22,150
right you cannot have a tester sit down

00:20:19,240 --> 00:20:24,130
and query databases and tried or write

00:20:22,150 --> 00:20:26,020
emails to somebody and ask them to make

00:20:24,130 --> 00:20:27,580
a cup of the production data every time

00:20:26,020 --> 00:20:30,070
they need to run the test so that

00:20:27,580 --> 00:20:32,049
process has to be automated so there are

00:20:30,070 --> 00:20:34,240
tools out there you can write your

00:20:32,049 --> 00:20:36,490
queries yourself but basically the data

00:20:34,240 --> 00:20:40,179
retrieval generation and cleanup has to

00:20:36,490 --> 00:20:42,580
be part of your automated cycle finally

00:20:40,179 --> 00:20:44,110
if you have a very large automation the

00:20:42,580 --> 00:20:45,730
sweet you have to be selective about

00:20:44,110 --> 00:20:48,880
what you test there are different

00:20:45,730 --> 00:20:51,370
techniques like paradise testing also a

00:20:48,880 --> 00:20:54,309
very very simple solution that almost

00:20:51,370 --> 00:20:56,530
nobody uses a staging your test right so

00:20:54,309 --> 00:20:59,350
just like you label your emails in gmail

00:20:56,530 --> 00:21:02,289
you can label your test so next time

00:20:59,350 --> 00:21:04,030
when somebody modifies a piece of your

00:21:02,289 --> 00:21:05,830
product you can just search for that

00:21:04,030 --> 00:21:08,710
component and say just run the tests

00:21:05,830 --> 00:21:10,539
which are impacted by that something

00:21:08,710 --> 00:21:13,230
very simple to do but not usually

00:21:10,539 --> 00:21:13,230
practiced

00:21:17,289 --> 00:21:23,090
so this probably again everybody knows

00:21:20,390 --> 00:21:24,320
is an important part of DevOps it's

00:21:23,090 --> 00:21:26,390
probably one of the most difficult

00:21:24,320 --> 00:21:28,490
pieces to automate at least from my

00:21:26,390 --> 00:21:33,340
experience is sexually automating your

00:21:28,490 --> 00:21:35,809
environment configuration and deployment

00:21:33,340 --> 00:21:37,520
it's so the idea is that you want to

00:21:35,809 --> 00:21:39,640
have your consistent environment every

00:21:37,520 --> 00:21:42,830
time you run a test so in an ideal world

00:21:39,640 --> 00:21:44,870
before you start your testing just you

00:21:42,830 --> 00:21:46,610
spin up your VMs using the

00:21:44,870 --> 00:21:48,620
infrastructure code that you created

00:21:46,610 --> 00:21:51,470
using tools like chef puppet an ansible

00:21:48,620 --> 00:21:53,270
you use it or deco vagrant to create a

00:21:51,470 --> 00:21:55,399
virtual environment and after your run

00:21:53,270 --> 00:21:56,779
the tests you bring it down and then

00:21:55,399 --> 00:21:58,700
next time you start from a fresh

00:21:56,779 --> 00:22:02,779
environment I mean this is where I think

00:21:58,700 --> 00:22:04,940
everybody wants to be but in rare cases

00:22:02,779 --> 00:22:07,760
I have seen somebody truly get there but

00:22:04,940 --> 00:22:10,399
I think definitely worth getting on that

00:22:07,760 --> 00:22:12,020
road at least starting from doc you from

00:22:10,399 --> 00:22:13,970
writing the scripts for you

00:22:12,020 --> 00:22:15,169
infrastructure because even if that

00:22:13,970 --> 00:22:16,970
doesn't work in conjunction with

00:22:15,169 --> 00:22:18,770
everything else it creates your perfect

00:22:16,970 --> 00:22:21,919
document of what your environment looks

00:22:18,770 --> 00:22:24,590
like and it speeds up the time that

00:22:21,919 --> 00:22:26,779
developers otherwise would spend

00:22:24,590 --> 00:22:34,370
requesting for a new test environment or

00:22:26,779 --> 00:22:36,440
development environment and finally once

00:22:34,370 --> 00:22:38,330
we have all the testing running in a

00:22:36,440 --> 00:22:41,990
stable environment with automated test

00:22:38,330 --> 00:22:44,360
data we get the results right the reason

00:22:41,990 --> 00:22:46,760
why we test our application is to find

00:22:44,360 --> 00:22:49,159
out if it's good to go and nogo to

00:22:46,760 --> 00:22:50,720
production I mean this is pretty much

00:22:49,159 --> 00:22:52,669
the only reason why we have to go

00:22:50,720 --> 00:22:56,029
through those things of building unit

00:22:52,669 --> 00:22:59,059
tests and regression is to make that

00:22:56,029 --> 00:23:01,190
decision and be comfortable with it and

00:22:59,059 --> 00:23:04,010
in order to make the decision we need to

00:23:01,190 --> 00:23:05,659
understand our is out and again what

00:23:04,010 --> 00:23:07,730
I've seen in a lot of cases that

00:23:05,659 --> 00:23:10,850
majority of time is spent on creating

00:23:07,730 --> 00:23:13,130
those automation streets on writing the

00:23:10,850 --> 00:23:16,820
test cases on writing the release notes

00:23:13,130 --> 00:23:19,730
and very little time spent on actually

00:23:16,820 --> 00:23:21,740
reporting and what is it that you sent

00:23:19,730 --> 00:23:24,559
the developers what information do we

00:23:21,740 --> 00:23:26,929
put in our bugs and how do we let

00:23:24,559 --> 00:23:28,690
developers know exactly what field so

00:23:26,929 --> 00:23:30,220
when they start debugging it then

00:23:28,690 --> 00:23:31,960
can actually debug it quickly and not

00:23:30,220 --> 00:23:36,100
spend the whole week trying to find what

00:23:31,960 --> 00:23:39,010
happened so one is consolidated report

00:23:36,100 --> 00:23:42,340
right you're testing many many different

00:23:39,010 --> 00:23:44,650
platforms now we have a huge variety of

00:23:42,340 --> 00:23:46,960
browsers we have ios and android

00:23:44,650 --> 00:23:49,300
platforms we have desktop versions of

00:23:46,960 --> 00:23:51,400
our applications and very often we're

00:23:49,300 --> 00:23:53,140
actually still testing the same product

00:23:51,400 --> 00:23:55,810
we're also testing on different layers

00:23:53,140 --> 00:23:59,440
we testing on google layer on API layer

00:23:55,810 --> 00:24:01,690
on data layer and every single test

00:23:59,440 --> 00:24:03,880
produces a different report so what

00:24:01,690 --> 00:24:08,140
normally happens is that your developer

00:24:03,880 --> 00:24:10,510
start getting test results from database

00:24:08,140 --> 00:24:12,820
testing from mobile testing team from

00:24:10,510 --> 00:24:14,950
manual testing team from a dimension

00:24:12,820 --> 00:24:16,660
testing team and then somehow you need

00:24:14,950 --> 00:24:18,880
to reconcile and figure out what really

00:24:16,660 --> 00:24:20,410
happened and maybe all the bugs reported

00:24:18,880 --> 00:24:23,050
by all these different teams is one

00:24:20,410 --> 00:24:25,120
single bug right so they D is to

00:24:23,050 --> 00:24:26,890
consolidate results across all those

00:24:25,120 --> 00:24:28,750
tools and technologies into a single

00:24:26,890 --> 00:24:31,030
report which then just tells you your

00:24:28,750 --> 00:24:33,070
product is good to go right and this is

00:24:31,030 --> 00:24:36,250
an art in itself but it is possible and

00:24:33,070 --> 00:24:37,480
you know we have done it but basically

00:24:36,250 --> 00:24:39,550
the idea is that you need to create a

00:24:37,480 --> 00:24:41,920
standard plug and you need to make sure

00:24:39,550 --> 00:24:44,080
that all the tools write your results

00:24:41,920 --> 00:24:46,390
into the same format and once you have

00:24:44,080 --> 00:24:49,210
that same result format then you can

00:24:46,390 --> 00:24:50,830
filter it you can do different graphs

00:24:49,210 --> 00:24:55,240
and you can really see what your state

00:24:50,830 --> 00:24:56,860
of testing is also is the next step I

00:24:55,240 --> 00:24:58,870
mean one one thing is to report your

00:24:56,860 --> 00:25:00,490
person fails I mean I think most of the

00:24:58,870 --> 00:25:03,240
tools that doing a pretty good job with

00:25:00,490 --> 00:25:07,090
it another step is to actually analyze

00:25:03,240 --> 00:25:09,970
what failed and why it failed so the

00:25:07,090 --> 00:25:12,670
best thing that testers can do and this

00:25:09,970 --> 00:25:14,380
is something that you know when with

00:25:12,670 --> 00:25:15,910
each automation testing like I think

00:25:14,380 --> 00:25:17,650
this is essential part of it is to

00:25:15,910 --> 00:25:21,220
understand this one thousand failures

00:25:17,650 --> 00:25:23,200
that UCS fails is really one bug so

00:25:21,220 --> 00:25:25,390
again taking off the test helps a lot

00:25:23,200 --> 00:25:28,540
because you can see that okay it's same

00:25:25,390 --> 00:25:31,210
functionality failed also being able to

00:25:28,540 --> 00:25:33,430
filter your reports by machine that they

00:25:31,210 --> 00:25:35,260
runnin because maybe hundred does field

00:25:33,430 --> 00:25:36,700
on the same machine that might tell you

00:25:35,260 --> 00:25:38,620
something right there is a problem with

00:25:36,700 --> 00:25:40,900
that machine and it's not because there

00:25:38,620 --> 00:25:41,710
is an issue is the product so being able

00:25:40,900 --> 00:25:43,870
to filter

00:25:41,710 --> 00:25:45,850
every possible parameter that can cause

00:25:43,870 --> 00:25:47,710
a failure like which database does it

00:25:45,850 --> 00:25:50,169
run against which app server does it run

00:25:47,710 --> 00:25:52,990
against all of those things can actually

00:25:50,169 --> 00:25:55,179
help you to not only send the report but

00:25:52,990 --> 00:25:57,549
to analyze those report so by the time

00:25:55,179 --> 00:26:00,850
you log a bug you can actually say okay

00:25:57,549 --> 00:26:02,710
this is the bug which happened on all of

00:26:00,850 --> 00:26:05,409
these machines which have the following

00:26:02,710 --> 00:26:07,299
parameters and developers can right away

00:26:05,409 --> 00:26:09,100
say okay this happened because I don't

00:26:07,299 --> 00:26:13,899
know password expired on our mainframe

00:26:09,100 --> 00:26:15,909
and they wouldn't spend weeks or days or

00:26:13,899 --> 00:26:20,500
even hours trying to identify what the

00:26:15,909 --> 00:26:23,260
problem is also the means of reporting

00:26:20,500 --> 00:26:27,070
is very important I mean we've seen

00:26:23,260 --> 00:26:29,440
emails Excel files tools like what's a

00:26:27,070 --> 00:26:31,330
center and JIRA I think the most

00:26:29,440 --> 00:26:33,610
important thing about reporting is that

00:26:31,330 --> 00:26:35,380
you need to report fast right so as soon

00:26:33,610 --> 00:26:38,590
as some there is no reason to wait for

00:26:35,380 --> 00:26:39,789
the whole test suite to finish to let

00:26:38,590 --> 00:26:42,399
somebody know that there is a critical

00:26:39,789 --> 00:26:44,020
bug in the system so Jenkins actually

00:26:42,399 --> 00:26:46,350
does a great job with that because it

00:26:44,020 --> 00:26:48,460
has like email notifications

00:26:46,350 --> 00:26:50,289
incorporated wizard right so if

00:26:48,460 --> 00:26:52,059
something happens and you analyze the

00:26:50,289 --> 00:26:54,700
results you can right away send emails

00:26:52,059 --> 00:26:56,890
to whoever is responsible and let them

00:26:54,700 --> 00:26:59,380
know that something failed and then of

00:26:56,890 --> 00:27:01,450
course Jenkins has its own reporting

00:26:59,380 --> 00:27:03,909
dashboard plus it's good to have a

00:27:01,450 --> 00:27:06,429
dashboard where you can filter through

00:27:03,909 --> 00:27:07,929
the result I think visualization is also

00:27:06,429 --> 00:27:09,640
very important that I a lot of great

00:27:07,929 --> 00:27:12,490
tools right now it helps you visualize

00:27:09,640 --> 00:27:14,500
your data and your results is basically

00:27:12,490 --> 00:27:15,940
data right so if you can visualize it in

00:27:14,500 --> 00:27:17,980
the right way and presented to the

00:27:15,940 --> 00:27:20,380
developers and your management that it

00:27:17,980 --> 00:27:27,309
can make their job of making their

00:27:20,380 --> 00:27:29,710
decisions of that easier so finally the

00:27:27,309 --> 00:27:32,740
target state and basically I think

00:27:29,710 --> 00:27:35,230
covered all of this so the first part is

00:27:32,740 --> 00:27:38,130
all of your artifacts are in you version

00:27:35,230 --> 00:27:40,929
control system once you have everything

00:27:38,130 --> 00:27:43,059
centralized you have your continuous

00:27:40,929 --> 00:27:45,909
integration framework using the tool

00:27:43,059 --> 00:27:47,890
like Jenkins you have your date's data

00:27:45,909 --> 00:27:49,600
retrieve data magically you have your

00:27:47,890 --> 00:27:51,940
test environments that are automatically

00:27:49,600 --> 00:27:54,039
once you have all those components you

00:27:51,940 --> 00:27:54,590
can have your automation test framework

00:27:54,039 --> 00:27:57,200
that

00:27:54,590 --> 00:27:59,150
your automation test and finally you

00:27:57,200 --> 00:28:02,140
have your reporting dashboard that gives

00:27:59,150 --> 00:28:04,940
you that green light or red light and

00:28:02,140 --> 00:28:06,260
ideally it runs against a staging

00:28:04,940 --> 00:28:09,260
environment which is the same as

00:28:06,260 --> 00:28:11,929
production sometimes it's a scaled-down

00:28:09,260 --> 00:28:14,570
version of production but the main thing

00:28:11,929 --> 00:28:17,150
that I'm trying to show is this picture

00:28:14,570 --> 00:28:19,640
is that it's continuous right there is

00:28:17,150 --> 00:28:21,350
no manual processes here this is what

00:28:19,640 --> 00:28:23,150
DevOps is all about I mean it's

00:28:21,350 --> 00:28:25,400
basically trying to help us get to the

00:28:23,150 --> 00:28:28,460
state where we have no bottlenecks and

00:28:25,400 --> 00:28:30,440
while it might seem impossible I mean I

00:28:28,460 --> 00:28:32,179
think we can come very very close to

00:28:30,440 --> 00:28:36,770
that and we can make something like this

00:28:32,179 --> 00:28:38,990
possible so what was the conclusion

00:28:36,770 --> 00:28:41,059
right i mean i think a lot of people

00:28:38,990 --> 00:28:43,100
discuss what DevOps is I've seen a lot a

00:28:41,059 --> 00:28:45,230
lot of articles on the internet people

00:28:43,100 --> 00:28:47,899
arguing what it is and what it isn't I

00:28:45,230 --> 00:28:50,179
think the main question we should ask is

00:28:47,899 --> 00:28:52,360
what does it do for us what can it do

00:28:50,179 --> 00:28:55,520
for our organization how do we get there

00:28:52,360 --> 00:28:59,210
so things that I described that probably

00:28:55,520 --> 00:29:01,520
not don't even cover in what large

00:28:59,210 --> 00:29:03,590
portion of what develops is about but

00:29:01,520 --> 00:29:06,919
from my experience I think it can truly

00:29:03,590 --> 00:29:09,980
get us there so I mentioned a lot of

00:29:06,919 --> 00:29:11,539
tools in those slides most of them you

00:29:09,980 --> 00:29:15,409
probably heard about some of them might

00:29:11,539 --> 00:29:18,470
be new 12 that wasn't there is basically

00:29:15,409 --> 00:29:20,570
is you right because those tools without

00:29:18,470 --> 00:29:22,970
us I'm not going to help anybody

00:29:20,570 --> 00:29:26,690
somebody needs to start looking at them

00:29:22,970 --> 00:29:29,210
learning them and implementing them so

00:29:26,690 --> 00:29:31,070
the conclusion is take action start

00:29:29,210 --> 00:29:35,960
learning those tools start writing those

00:29:31,070 --> 00:29:37,970
scripts go back to your management or go

00:29:35,960 --> 00:29:39,500
back to your employees and let them know

00:29:37,970 --> 00:29:41,659
that that's it we're starting on our

00:29:39,500 --> 00:29:43,789
DevOps journey these are the tools out

00:29:41,659 --> 00:29:45,409
there let's do proof of concepts let's

00:29:43,789 --> 00:29:48,500
try to automate the environment let's

00:29:45,409 --> 00:29:50,120
try to automate our testing and a year

00:29:48,500 --> 00:29:51,649
from now maybe you'll come to this

00:29:50,120 --> 00:29:54,289
conference and you talk about your

00:29:51,649 --> 00:29:58,279
experience of how you were able to get

00:29:54,289 --> 00:30:01,610
to your target state and I think this is

00:29:58,279 --> 00:30:04,210
it if you have any questions please feel

00:30:01,610 --> 00:30:04,210
free to ask

00:30:04,940 --> 00:30:07,000
you

00:30:16,509 --> 00:30:18,570

YouTube URL: https://www.youtube.com/watch?v=3IueM0Vuis4


