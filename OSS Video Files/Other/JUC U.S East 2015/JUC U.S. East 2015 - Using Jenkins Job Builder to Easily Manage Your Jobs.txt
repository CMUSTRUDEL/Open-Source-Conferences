Title: JUC U.S. East 2015 - Using Jenkins Job Builder to Easily Manage Your Jobs
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Ari LiVigni, Red Hat 

Is there an easier way to managing Jenkins jobs than via the UI, XML files, API? There IS a simpler solution; you can use Jenkins Job Builder (OpenStack upstream project). Jenkins Job Builder offers the following: 
- Simple descriptions of Jenkins jobs in YAML format
- Job descriptions kept in human readable text format 
- Kept in a version control system to make changes and auditing easier 
- Flexible template system, so creating many similarly configured jobs is easy (avoids duplication).
Captions: 
	00:00:15,320 --> 00:00:20,900
my topics about Jenkins job builder and

00:00:17,920 --> 00:00:23,529
how to easily manage your jobs you Jake

00:00:20,900 --> 00:00:26,930
its jobs how many of you attended Kai's

00:00:23,529 --> 00:00:28,430
presentation earlier so I'm gonna talk

00:00:26,930 --> 00:00:29,869
there's a little bit overlap but I'm

00:00:28,430 --> 00:00:34,040
gonna go a more in-depth than some

00:00:29,869 --> 00:00:36,829
examples and dive into some of that in

00:00:34,040 --> 00:00:39,860
more detail I did a good job of kind of

00:00:36,829 --> 00:00:42,020
the overview and and a good like simple

00:00:39,860 --> 00:00:45,860
example so I'm going to show you kind of

00:00:42,020 --> 00:00:48,560
how we use it in at Red Hat so my name

00:00:45,860 --> 00:00:51,880
is Ari Lavinia I'm from Red Hat I've

00:00:48,560 --> 00:00:53,780
been there for almost two years I work

00:00:51,880 --> 00:00:55,940
originally I started out kind of an

00:00:53,780 --> 00:00:59,120
essential CI team across all our product

00:00:55,940 --> 00:01:01,760
lines and now I'm focused on our project

00:00:59,120 --> 00:01:03,380
atomic docker and kubernetes which I'm

00:01:01,760 --> 00:01:08,930
sure you've heard about a lot in the

00:01:03,380 --> 00:01:10,340
last couple days so get started so I'm

00:01:08,930 --> 00:01:13,939
gonna the agenda is we could talk about

00:01:10,340 --> 00:01:15,680
like challenges as as you know Jenkins

00:01:13,939 --> 00:01:17,780
users you know managing all the

00:01:15,680 --> 00:01:20,630
different jobs that we have you know

00:01:17,780 --> 00:01:22,460
what what that entails you know here's a

00:01:20,630 --> 00:01:24,049
solution Jenkins job builder hopefully

00:01:22,460 --> 00:01:27,100
it's a solution for you as well it's

00:01:24,049 --> 00:01:30,079
definitely been extremely useful

00:01:27,100 --> 00:01:33,469
automation tool for Jenkins jobs for for

00:01:30,079 --> 00:01:36,049
our team and for Red Hat as a whole as

00:01:33,469 --> 00:01:38,420
Kai kind of pointed out it's an upstream

00:01:36,049 --> 00:01:41,329
and OpenStack project I'm gonna dive

00:01:38,420 --> 00:01:43,189
into some of the job definitions and

00:01:41,329 --> 00:01:45,740
what you know each of the definitions

00:01:43,189 --> 00:01:48,740
means and the modules that you can use

00:01:45,740 --> 00:01:50,719
and modules kind of corresponds to the

00:01:48,740 --> 00:01:53,659
different pieces that you have in a

00:01:50,719 --> 00:01:56,090
Jenkins job you know SCM build you know

00:01:53,659 --> 00:01:57,740
builders wrappers

00:01:56,090 --> 00:02:00,499
you know post build actions or

00:01:57,740 --> 00:02:03,349
publishers then I'm gonna show some

00:02:00,499 --> 00:02:05,299
examples I probably won't spend a huge

00:02:03,349 --> 00:02:07,789
amount of time on all the detail of the

00:02:05,299 --> 00:02:09,830
yamo code but I'll try to touch on as

00:02:07,789 --> 00:02:11,720
much as possible just to kind of get the

00:02:09,830 --> 00:02:13,940
message across of what Jake is job

00:02:11,720 --> 00:02:16,520
builder can do and then I'm going to

00:02:13,940 --> 00:02:18,830
show an execution and a brief demo in a

00:02:16,520 --> 00:02:20,420
in the Jenkins environment so you can

00:02:18,830 --> 00:02:23,530
see what that looks like and hopefully

00:02:20,420 --> 00:02:23,530
we'll have some time for some Q&A

00:02:25,430 --> 00:02:31,620
so as you start to you know create your

00:02:29,400 --> 00:02:34,500
Jenkins jobs you know it gets can get

00:02:31,620 --> 00:02:37,020
out of hand pretty quick definitely if

00:02:34,500 --> 00:02:39,750
you're messing with the UI you can it's

00:02:37,020 --> 00:02:42,240
prone to human error or job drift unless

00:02:39,750 --> 00:02:43,830
you're you can back everything up but

00:02:42,240 --> 00:02:47,640
obviously you don't want to have to

00:02:43,830 --> 00:02:49,020
restore everything from a back up also

00:02:47,640 --> 00:02:51,690
there's a lot of redundancy some jobs

00:02:49,020 --> 00:02:53,610
are very similar so if you could get

00:02:51,690 --> 00:02:56,130
away from having to basically repeat the

00:02:53,610 --> 00:02:59,880
same jobs or copy xml files you want to

00:02:56,130 --> 00:03:01,680
do that and you also you know another

00:02:59,880 --> 00:03:04,560
thing is the consistency and the source

00:03:01,680 --> 00:03:06,360
control of your jobs you know obviously

00:03:04,560 --> 00:03:08,190
even if you back up your Jenkins master

00:03:06,360 --> 00:03:09,630
you'd be great to have those jobs and

00:03:08,190 --> 00:03:13,860
sometimes of source control so you can

00:03:09,630 --> 00:03:16,650
not only you know keep them you know

00:03:13,860 --> 00:03:18,030
version controlled but also if people

00:03:16,650 --> 00:03:19,620
want to make updates when they're

00:03:18,030 --> 00:03:21,570
changing maybe their dev code they can

00:03:19,620 --> 00:03:26,940
also change a Jenkins job at the same

00:03:21,570 --> 00:03:29,040
time and obviously the XML API and UI

00:03:26,940 --> 00:03:33,060
are very cumbersome to use for those

00:03:29,040 --> 00:03:34,800
purposes and what if you had different

00:03:33,060 --> 00:03:37,110
masters or you wanted to share these

00:03:34,800 --> 00:03:38,340
jobs with another team in your company

00:03:37,110 --> 00:03:40,920
maybe you have a large company and you

00:03:38,340 --> 00:03:43,850
want to share those jobs Jake his job

00:03:40,920 --> 00:03:48,000
builder makes that very easy to do that

00:03:43,850 --> 00:03:49,950
so the solution Jenkins job builder so

00:03:48,000 --> 00:03:53,250
it takes very simple descriptions of

00:03:49,950 --> 00:03:57,690
gamal which is very human readable and

00:03:53,250 --> 00:03:58,800
to configure Jenkins jobs like I said

00:03:57,690 --> 00:04:02,070
you can keep it under version control

00:03:58,800 --> 00:04:05,640
makes auditing of them very easy you can

00:04:02,070 --> 00:04:07,080
keep them part of a system called

00:04:05,640 --> 00:04:09,390
Garrett or maybe you have a review

00:04:07,080 --> 00:04:11,630
system or review review code you can

00:04:09,390 --> 00:04:15,240
also review your Jenkins jobs that way

00:04:11,630 --> 00:04:19,440
and it just is a more consistent way and

00:04:15,240 --> 00:04:22,320
less prone to human error it supports a

00:04:19,440 --> 00:04:24,330
huge amount of plugins it does not

00:04:22,320 --> 00:04:27,720
currently support the workflow plug-in I

00:04:24,330 --> 00:04:30,420
I'm sure it will at some point but there

00:04:27,720 --> 00:04:34,820
is a vast support for a lot of the

00:04:30,420 --> 00:04:34,820
plugins that people use yeah

00:04:40,320 --> 00:04:45,240
you can do either/or so you could have

00:04:43,050 --> 00:04:48,060
these llamo files live where the dev

00:04:45,240 --> 00:04:49,800
code is or you could have say maybe you

00:04:48,060 --> 00:04:51,780
have more of an Operations repo where

00:04:49,800 --> 00:04:53,520
you have puppet or ansible types of

00:04:51,780 --> 00:04:55,470
scripts and you want to keep the ammo

00:04:53,520 --> 00:04:58,410
for your jobs with that you could do

00:04:55,470 --> 00:05:02,360
that as well there's no you don't have

00:04:58,410 --> 00:05:02,360
to have to keep it in one or the other

00:05:02,720 --> 00:05:07,950
so the definitions are kind of broken

00:05:05,190 --> 00:05:12,000
down into these different categories of

00:05:07,950 --> 00:05:13,320
definitions a job is just a basic you

00:05:12,000 --> 00:05:16,200
know just like you think of the Jenkins

00:05:13,320 --> 00:05:17,700
job it's very hard coded text format and

00:05:16,200 --> 00:05:22,380
you can definitely create your your

00:05:17,700 --> 00:05:25,080
Yambol that way and then really kind of

00:05:22,380 --> 00:05:28,770
some of the power is when you use job

00:05:25,080 --> 00:05:33,530
templates I'm gonna actually link to

00:05:28,770 --> 00:05:33,530
this if you can

00:05:42,000 --> 00:05:48,540
there we go so job templates are really

00:05:45,270 --> 00:05:50,100
useful because if you Sneed several jobs

00:05:48,540 --> 00:05:51,990
defined but you kind of want to just

00:05:50,100 --> 00:05:54,750
tweak certain parameters and maybe it's

00:05:51,990 --> 00:05:56,010
an architecture or topology and you want

00:05:54,750 --> 00:05:59,850
to call it something different or you

00:05:56,010 --> 00:06:02,790
want to use these things the templates

00:05:59,850 --> 00:06:07,140
allow you to do that pretty easily and

00:06:02,790 --> 00:06:11,790
then down here the the project is kind

00:06:07,140 --> 00:06:13,650
of a map or the wrapper around all these

00:06:11,790 --> 00:06:17,130
variables that you create which are

00:06:13,650 --> 00:06:19,440
macros that allow you to then put those

00:06:17,130 --> 00:06:21,240
into the job template to find those in

00:06:19,440 --> 00:06:24,810
the project and then it replaces them

00:06:21,240 --> 00:06:28,680
inside your job templates and then you

00:06:24,810 --> 00:06:31,560
have a job group which just helps you

00:06:28,680 --> 00:06:33,600
actually take a bunch of different job

00:06:31,560 --> 00:06:35,100
templates and group them together so

00:06:33,600 --> 00:06:38,430
maybe you have a certain order of how

00:06:35,100 --> 00:06:40,800
you want these set up and it just is a

00:06:38,430 --> 00:06:45,530
wrapper around that that's a pretty

00:06:40,800 --> 00:06:45,530
basic definition in Jenkins job builder

00:06:51,800 --> 00:06:59,599
so oops

00:06:56,180 --> 00:07:02,090
so macros are just I guess you consider

00:06:59,599 --> 00:07:04,099
them more like variables so they're set

00:07:02,090 --> 00:07:06,139
up in a project and then you can easily

00:07:04,099 --> 00:07:08,539
define what those are in that project

00:07:06,139 --> 00:07:11,449
definition that I just spoke about and

00:07:08,539 --> 00:07:13,550
then those would then be replaced in a

00:07:11,449 --> 00:07:15,319
job template that you could that you

00:07:13,550 --> 00:07:17,139
could use and I'm gonna show the

00:07:15,319 --> 00:07:21,080
examples of how you can use that

00:07:17,139 --> 00:07:26,479
defaults come in handy basically you can

00:07:21,080 --> 00:07:27,979
set up some things that will you know

00:07:26,479 --> 00:07:30,199
that you can use throughout all your

00:07:27,979 --> 00:07:31,610
Jenkins jobs or the job templates and

00:07:30,199 --> 00:07:33,289
you don't want to have to redo placate

00:07:31,610 --> 00:07:35,120
that code it's more like I guess I would

00:07:33,289 --> 00:07:37,370
have created to having a library that

00:07:35,120 --> 00:07:39,110
has everything set up so if there's a

00:07:37,370 --> 00:07:41,419
similar SCM that you want to use

00:07:39,110 --> 00:07:43,969
throughout many jobs you can define a

00:07:41,419 --> 00:07:46,729
default and then in your job template

00:07:43,969 --> 00:07:48,650
you can just reference that so it helps

00:07:46,729 --> 00:07:50,780
you know limit the amount of lines of

00:07:48,650 --> 00:07:52,490
the animal that you have and makes it

00:07:50,780 --> 00:07:54,169
all so easy that you're not duplicating

00:07:52,490 --> 00:07:55,940
and have to have any change things in

00:07:54,169 --> 00:07:58,460
multiple places you can update a

00:07:55,940 --> 00:08:04,130
template update a default and then it

00:07:58,460 --> 00:08:06,020
will take care of that for you these are

00:08:04,130 --> 00:08:07,610
all the different types of modules that

00:08:06,020 --> 00:08:09,949
you can use these names should look

00:08:07,610 --> 00:08:15,340
somewhat familiar from using Jenkins

00:08:09,949 --> 00:08:17,690
jobs you know I'm gonna concentrate on

00:08:15,340 --> 00:08:19,789
probably half of these or less than half

00:08:17,690 --> 00:08:21,650
of these for the example and the demo

00:08:19,789 --> 00:08:24,529
just so you know you can definitely

00:08:21,650 --> 00:08:26,419
there's links at the end for

00:08:24,529 --> 00:08:28,340
documentation Jenkins job builder or the

00:08:26,419 --> 00:08:30,800
OpenStack community has a very good

00:08:28,340 --> 00:08:32,479
lengthy set of documentation and

00:08:30,800 --> 00:08:35,270
examples on how to use Jenkins job

00:08:32,479 --> 00:08:41,029
builder which I just showed you in the

00:08:35,270 --> 00:08:42,950
previous stuff a link to so free style

00:08:41,029 --> 00:08:44,060
project is just like it's you know just

00:08:42,950 --> 00:08:45,890
like when you go to set up a project

00:08:44,060 --> 00:08:48,470
right you can have matrix projects is or

00:08:45,890 --> 00:08:51,230
multi job this just handles really a

00:08:48,470 --> 00:08:54,529
freestyle Jenkins project builders are

00:08:51,230 --> 00:08:56,390
the build steps that you can do so if

00:08:54,529 --> 00:08:59,839
that's a shell build step or and

00:08:56,390 --> 00:09:01,320
injecting environment variables you know

00:08:59,839 --> 00:09:05,550
those are considered

00:09:01,320 --> 00:09:07,920
steps properties you can have different

00:09:05,550 --> 00:09:10,230
types of elements inside your Jenkins

00:09:07,920 --> 00:09:13,380
jobs that you want to have as properties

00:09:10,230 --> 00:09:15,060
publishers so one thing about doing his

00:09:13,380 --> 00:09:17,280
job Euler that I wish there was more of

00:09:15,060 --> 00:09:19,230
a parallel with is the names that's in

00:09:17,280 --> 00:09:20,280
the UI sometimes and they tried to do

00:09:19,230 --> 00:09:23,910
that for the most part but with

00:09:20,280 --> 00:09:25,560
publishers they that's that equals to

00:09:23,910 --> 00:09:27,840
post build actions so when you see

00:09:25,560 --> 00:09:31,170
publishers just do equals post build

00:09:27,840 --> 00:09:33,180
action there and it helps define any of

00:09:31,170 --> 00:09:35,640
those things that you do after executing

00:09:33,180 --> 00:09:37,710
something in your build step as a polish

00:09:35,640 --> 00:09:40,560
build action SCM is pretty

00:09:37,710 --> 00:09:44,970
self-explanatory whether it's get multi

00:09:40,560 --> 00:09:47,310
SCM you know the mercurial or perforce

00:09:44,970 --> 00:09:49,860
or any of those types of SEMS that's how

00:09:47,310 --> 00:09:52,200
you would define them triggers same

00:09:49,860 --> 00:09:54,870
thing should look familiar whether it's

00:09:52,200 --> 00:09:57,420
your triggering off of some SCM change

00:09:54,870 --> 00:09:59,730
or a cron type of thing with a periodic

00:09:57,420 --> 00:10:03,090
build or maybe you have some other

00:09:59,730 --> 00:10:05,370
mechanism as well and then wrappers

00:10:03,090 --> 00:10:08,130
which you would kind of know in the UI

00:10:05,370 --> 00:10:10,800
is a build environment so these are

00:10:08,130 --> 00:10:13,950
things like I want a timestamp in my log

00:10:10,800 --> 00:10:16,520
file in my console log I want to clean

00:10:13,950 --> 00:10:19,650
my workspace before I start I want to

00:10:16,520 --> 00:10:22,080
maybe I want to put a timeout on the

00:10:19,650 --> 00:10:26,550
build these are what wrappers are

00:10:22,080 --> 00:10:27,840
considered these by the way in here you

00:10:26,550 --> 00:10:29,280
see all the blue is just links to them

00:10:27,840 --> 00:10:31,230
I'm not going to jump through all of

00:10:29,280 --> 00:10:33,060
them but afterwards in the presentation

00:10:31,230 --> 00:10:37,380
you can then go and look look them up

00:10:33,060 --> 00:10:40,410
specifically so the example that I'm

00:10:37,380 --> 00:10:43,380
gonna show is basically a defaults file

00:10:40,410 --> 00:10:46,590
and kind of a sample file that has all

00:10:43,380 --> 00:10:49,470
my stuff for my jobs you do not have to

00:10:46,590 --> 00:10:51,330
have the defaults separated from you can

00:10:49,470 --> 00:10:53,730
have them in one file if you wanted to I

00:10:51,330 --> 00:10:56,370
did it purely for showing the

00:10:53,730 --> 00:10:58,590
differences and showing you kind of you

00:10:56,370 --> 00:11:01,740
can keep your defaults in one and your a

00:10:58,590 --> 00:11:04,170
sample of all your or your all your job

00:11:01,740 --> 00:11:06,270
templates on the other one and the

00:11:04,170 --> 00:11:08,310
default like I said before it just sets

00:11:06,270 --> 00:11:10,470
up things to be used by multiple jobs

00:11:08,310 --> 00:11:12,090
maybe you have ten jobs in the air and

00:11:10,470 --> 00:11:13,270
three of them use one type of default

00:11:12,090 --> 00:11:14,830
another three you

00:11:13,270 --> 00:11:17,320
different default but you can define

00:11:14,830 --> 00:11:19,240
them all in one file and it just really

00:11:17,320 --> 00:11:21,910
avoids the redundancy like I said it's

00:11:19,240 --> 00:11:25,690
very similar to having a library in that

00:11:21,910 --> 00:11:28,510
sense and then the workflow file

00:11:25,690 --> 00:11:30,850
contains the main jobs and I'm using an

00:11:28,510 --> 00:11:33,520
example that we're gonna show is job

00:11:30,850 --> 00:11:35,710
templates and job groups to create many

00:11:33,520 --> 00:11:41,380
jobs so I'm just gonna link we're just

00:11:35,710 --> 00:11:52,690
gonna bring up this okay everyone see

00:11:41,380 --> 00:11:54,960
that is that clear yes you can see the

00:11:52,690 --> 00:11:58,210
SCM is just like you would see in the UI

00:11:54,960 --> 00:11:59,650
here I'm setting up some defaults at the

00:11:58,210 --> 00:12:01,960
top is the name of it so that's gonna be

00:11:59,650 --> 00:12:03,700
maybe something I call it can be

00:12:01,960 --> 00:12:05,140
whatever name you want there the

00:12:03,700 --> 00:12:08,230
description is the same description

00:12:05,140 --> 00:12:10,330
that's gonna pop into a Jenkins job the

00:12:08,230 --> 00:12:14,170
SCM is right there and then we have

00:12:10,330 --> 00:12:18,970
those wrappers and I'm gonna jump down

00:12:14,170 --> 00:12:22,300
to a wrapper here so this is an example

00:12:18,970 --> 00:12:24,820
of a wrapper where I'm saying set my

00:12:22,300 --> 00:12:27,450
color of my output clean up my workspace

00:12:24,820 --> 00:12:31,960
and put time stance in my log file and

00:12:27,450 --> 00:12:34,570
within the top default there

00:12:31,960 --> 00:12:37,990
I am referencing that other default for

00:12:34,570 --> 00:12:42,010
wrappers and it's you can pretty much

00:12:37,990 --> 00:12:44,710
create you know different publisher type

00:12:42,010 --> 00:12:47,110
of defaults this way maybe you want to

00:12:44,710 --> 00:12:48,700
group them together and roll them up but

00:12:47,110 --> 00:12:53,920
that's essentially what allows you to do

00:12:48,700 --> 00:12:55,480
by setting that those defaults up it

00:12:53,920 --> 00:12:57,910
does not matter long long as you're

00:12:55,480 --> 00:12:59,410
using the names it picks up on the names

00:12:57,910 --> 00:13:02,650
so when Jenkins job builder runs through

00:12:59,410 --> 00:13:05,140
it will see that that wrapper name

00:13:02,650 --> 00:13:07,150
default CI workflow wrappers is called

00:13:05,140 --> 00:13:10,780
down below with that name it will pick

00:13:07,150 --> 00:13:13,030
that up and same here the default we

00:13:10,780 --> 00:13:17,230
have for the CI workflow provision or

00:13:13,030 --> 00:13:19,180
down below the CI workflow run test the

00:13:17,230 --> 00:13:21,510
other default we're gonna reference

00:13:19,180 --> 00:13:24,510
those in the other file that we have

00:13:21,510 --> 00:13:24,510
sure

00:13:27,070 --> 00:13:36,890
so this is the sample this is kind of

00:13:29,480 --> 00:13:38,810
the goods here is that here I have a job

00:13:36,890 --> 00:13:41,570
template at the top and I'll get into

00:13:38,810 --> 00:13:43,220
this these curly brackets around or what

00:13:41,570 --> 00:13:45,530
the macros are and I'll get into those

00:13:43,220 --> 00:13:47,990
in a minute but this is doing the

00:13:45,530 --> 00:13:49,670
provision and here we're referencing the

00:13:47,990 --> 00:13:51,950
defaults is the second line in there

00:13:49,670 --> 00:13:54,380
that we had in the other file that tells

00:13:51,950 --> 00:13:56,360
us ok all the defaults are defined in

00:13:54,380 --> 00:13:58,510
there I'm going to just reuse them so

00:13:56,360 --> 00:14:01,280
this way I don't have to now put SEM

00:13:58,510 --> 00:14:03,230
information in here I don't I don't have

00:14:01,280 --> 00:14:05,120
to put certain things that I know I'm

00:14:03,230 --> 00:14:07,430
going to use throughout all the jobs in

00:14:05,120 --> 00:14:09,140
here I can just keep that same goes for

00:14:07,430 --> 00:14:10,400
parameters if this was a default

00:14:09,140 --> 00:14:11,810
parameter and I didn't want to have it

00:14:10,400 --> 00:14:13,850
in here and I wanted to make it default

00:14:11,810 --> 00:14:15,680
I could move it into the defaults and

00:14:13,850 --> 00:14:18,590
just reference it the same way I'm doing

00:14:15,680 --> 00:14:21,050
the other ones and then I have this

00:14:18,590 --> 00:14:23,330
build step in this case and I'm doing

00:14:21,050 --> 00:14:25,850
some provisioning of resources and

00:14:23,330 --> 00:14:28,670
stinking slaves with some other stuff

00:14:25,850 --> 00:14:34,640
that I wrote to provision resources and

00:14:28,670 --> 00:14:39,830
slaves then then I have some publishers

00:14:34,640 --> 00:14:42,290
where I'm archiving my artifacts again

00:14:39,830 --> 00:14:45,320
could be a default but I put it in here

00:14:42,290 --> 00:14:49,100
this way and then I'm triggering some

00:14:45,320 --> 00:14:51,530
downstream jobs also almost missed I'm

00:14:49,100 --> 00:14:53,420
another build step I'm injecting some

00:14:51,530 --> 00:14:57,620
environment variables from what resulted

00:14:53,420 --> 00:15:00,170
from my shell run and then I'm

00:14:57,620 --> 00:15:02,510
triggering some downstream jobs if I had

00:15:00,170 --> 00:15:04,220
success I'm gonna run some tests if I

00:15:02,510 --> 00:15:06,110
had a failure I'm gonna go clean up

00:15:04,220 --> 00:15:13,910
those resources and call that teardown

00:15:06,110 --> 00:15:16,520
job so this is the run test template

00:15:13,910 --> 00:15:18,800
very similar but obviously the shell

00:15:16,520 --> 00:15:21,140
step is very different there's no

00:15:18,800 --> 00:15:23,750
parameters in this job the other thing

00:15:21,140 --> 00:15:25,640
to note is in this case I'm calling out

00:15:23,750 --> 00:15:29,300
know that I'm running on a Jenkins slave

00:15:25,640 --> 00:15:31,220
that is a macro that I define below my

00:15:29,300 --> 00:15:32,060
other jobs are running on the master but

00:15:31,220 --> 00:15:37,730
you can run that

00:15:32,060 --> 00:15:39,860
any note and then another publisher

00:15:37,730 --> 00:15:43,670
where I'm calling a downstream job to do

00:15:39,860 --> 00:15:46,340
the teardown of resources get all the

00:15:43,670 --> 00:15:48,560
artifacts from running tests and the

00:15:46,340 --> 00:15:51,680
other thing that I'm doing is I'm doing

00:15:48,560 --> 00:15:54,110
this defy workflow publishers that was

00:15:51,680 --> 00:15:56,170
any other file that actually I can show

00:15:54,110 --> 00:15:56,170
you

00:16:06,210 --> 00:16:09,440
let's go back to

00:16:13,910 --> 00:16:16,910
that

00:16:22,420 --> 00:16:32,740
right so in a default I'll show you is

00:16:30,149 --> 00:16:37,209
that it also have these publishers down

00:16:32,740 --> 00:16:41,620
below that I set up for one for sending

00:16:37,209 --> 00:16:44,560
out email and then another one for

00:16:41,620 --> 00:16:49,860
producing xunit results and I'm actually

00:16:44,560 --> 00:16:49,860
gonna call the in that run test template

00:16:55,110 --> 00:16:59,320
and then at the end this is just another

00:16:57,670 --> 00:17:02,380
template that does the teardown of the

00:16:59,320 --> 00:17:04,030
resources and here's the job group that

00:17:02,380 --> 00:17:07,780
kind of groups them together so now you

00:17:04,030 --> 00:17:10,689
can see I have a grouping of three

00:17:07,780 --> 00:17:12,339
templates one that's going to provision

00:17:10,689 --> 00:17:14,169
resources one that's going to run a set

00:17:12,339 --> 00:17:16,329
of tests and one that's going to tear

00:17:14,169 --> 00:17:17,290
everything down at the end of it and now

00:17:16,329 --> 00:17:19,750
I'm going to get into kind of this

00:17:17,290 --> 00:17:21,970
macros of how that works in the project

00:17:19,750 --> 00:17:27,510
so we have these squiggly brackets of

00:17:21,970 --> 00:17:27,510
the project and topology being used here

00:17:30,299 --> 00:17:36,580
and here I'm calling it just a name for

00:17:34,840 --> 00:17:40,360
that and then my project is called work

00:17:36,580 --> 00:17:43,210
flow so that's that's what my projects

00:17:40,360 --> 00:17:45,130
called there I've set up this project

00:17:43,210 --> 00:17:46,840
default name which is another variable

00:17:45,130 --> 00:17:49,240
or another macro that can be replaced

00:17:46,840 --> 00:17:51,960
and here are the topology so what this

00:17:49,240 --> 00:17:55,179
means is even though I have three jobs

00:17:51,960 --> 00:17:57,309
three jobs templates here when I go to

00:17:55,179 --> 00:18:00,340
run this it's actually going to create

00:17:57,309 --> 00:18:02,230
as many to Paulo it's going to multiply

00:18:00,340 --> 00:18:05,230
by three of them how many topologies I

00:18:02,230 --> 00:18:07,330
had there so I think I have four there

00:18:05,230 --> 00:18:12,360
so that's going to be twelve is going to

00:18:07,330 --> 00:18:15,130
be created as a result of that and then

00:18:12,360 --> 00:18:18,940
these are other macros that you can also

00:18:15,130 --> 00:18:23,650
use that are part of this project

00:18:18,940 --> 00:18:26,710
definition the Jay slave name which

00:18:23,650 --> 00:18:29,110
would replace the node up above so just

00:18:26,710 --> 00:18:33,179
equate those kind of things to variables

00:18:29,110 --> 00:18:33,179
that's basically what they are

00:18:33,290 --> 00:18:42,020
so so that really kind of shows is a

00:18:40,220 --> 00:18:44,360
layout obviously I kind of ran through

00:18:42,020 --> 00:18:45,860
it we can there's questions about it

00:18:44,360 --> 00:18:47,090
afterwards we can go into more detail

00:18:45,860 --> 00:18:48,950
but I kind of want to just give you an

00:18:47,090 --> 00:18:54,470
overview of how that works and then we

00:18:48,950 --> 00:18:56,630
can also I'm going to show you this

00:18:54,470 --> 00:18:59,840
other gamma file this one here is

00:18:56,630 --> 00:19:01,520
actually if you wanted to not just run

00:18:59,840 --> 00:19:02,780
Jenkins job builder on the command line

00:19:01,520 --> 00:19:05,210
I think if you guys went to the session

00:19:02,780 --> 00:19:07,940
earlier you can obviously do that on

00:19:05,210 --> 00:19:09,800
your system in but let's say you

00:19:07,940 --> 00:19:12,680
actually want to create a Jenkins job

00:19:09,800 --> 00:19:15,470
that does that to create other jobs you

00:19:12,680 --> 00:19:17,840
can do that and that's what I did here

00:19:15,470 --> 00:19:21,350
is it's a Jacob job that updates other

00:19:17,840 --> 00:19:23,960
jobs and it can be triggered off of off

00:19:21,350 --> 00:19:25,940
of a get change so if there's a get

00:19:23,960 --> 00:19:28,670
change to your repo you can it will

00:19:25,940 --> 00:19:30,380
automatically rerun this and then update

00:19:28,670 --> 00:19:33,560
any of those those jobs

00:19:30,380 --> 00:19:36,790
it could be get time or Garrett or any

00:19:33,560 --> 00:19:38,720
of these other trigger events to do that

00:19:36,790 --> 00:19:50,180
and I'm going to show you that real

00:19:38,720 --> 00:19:51,890
quick - oops this in this case - I I set

00:19:50,180 --> 00:19:54,440
up the faults within the same file I

00:19:51,890 --> 00:19:56,720
didn't actually create files I it's so

00:19:54,440 --> 00:19:59,510
small that I just threw it in one and I

00:19:56,720 --> 00:20:05,000
created this job template and what it

00:19:59,510 --> 00:20:09,110
did was it's it's basically every 30

00:20:05,000 --> 00:20:11,240
minutes it's going to check if there was

00:20:09,110 --> 00:20:12,980
a if there was a every suit yeah every

00:20:11,240 --> 00:20:16,250
every 30 minutes gonna check if there

00:20:12,980 --> 00:20:18,560
was a change and then it's going to to

00:20:16,250 --> 00:20:21,890
update accordingly and it's going to

00:20:18,560 --> 00:20:24,290
execute Jacobs job builder but what it's

00:20:21,890 --> 00:20:27,770
going to do is it's going to go through

00:20:24,290 --> 00:20:29,840
each of these jobs here and and that's

00:20:27,770 --> 00:20:31,460
and that's its idea that it will Dan

00:20:29,840 --> 00:20:34,370
cycle through all these different jobs

00:20:31,460 --> 00:20:35,600
this is similar to demo I'm going to

00:20:34,370 --> 00:20:37,220
show you now obviously I did less

00:20:35,600 --> 00:20:39,500
projects and kind of scale it down just

00:20:37,220 --> 00:20:42,110
to show more and Jenkins of how it works

00:20:39,500 --> 00:20:44,660
but that's this is actually a file that

00:20:42,110 --> 00:20:46,010
we use in our production that we have

00:20:44,660 --> 00:20:48,560
several projects that we

00:20:46,010 --> 00:20:50,650
to update from time to time and changes

00:20:48,560 --> 00:20:54,020
have been made and we run through that

00:20:50,650 --> 00:20:55,790
and we just substitute this JJB

00:20:54,020 --> 00:20:59,170
underscore with those names that are up

00:20:55,790 --> 00:20:59,170
above it just cycles through those

00:21:03,670 --> 00:21:11,750
alright so executing Jenkins job builder

00:21:10,040 --> 00:21:14,360
it's it's pretty straightforward and

00:21:11,750 --> 00:21:16,850
kind of covered this this morning

00:21:14,360 --> 00:21:19,040
your any files pretty basic you know if

00:21:16,850 --> 00:21:21,950
you in this case I don't have a username

00:21:19,040 --> 00:21:23,870
password it's just a it's a test Jenkins

00:21:21,950 --> 00:21:25,400
that I'm using but if you needed

00:21:23,870 --> 00:21:27,560
credentials there you could put them in

00:21:25,400 --> 00:21:29,090
this file if you were doing it in the

00:21:27,560 --> 00:21:31,010
job that I just showed you you'd

00:21:29,090 --> 00:21:32,690
probably want to use mass passwords and

00:21:31,010 --> 00:21:36,110
use some credential binding type of

00:21:32,690 --> 00:21:38,660
thing to hide that information or you

00:21:36,110 --> 00:21:41,480
could use Jenkins job

00:21:38,660 --> 00:21:43,160
Jenkins global variables and then use

00:21:41,480 --> 00:21:44,360
global passwords and you could do it

00:21:43,160 --> 00:21:45,590
that way as well that's actually how we

00:21:44,360 --> 00:21:48,740
do it

00:21:45,590 --> 00:21:50,930
but different ways to do it definitely

00:21:48,740 --> 00:21:52,970
flex there's flexibility there these are

00:21:50,930 --> 00:21:54,710
the options that you can run with it so

00:21:52,970 --> 00:21:57,650
you can update jobs you can do a test

00:21:54,710 --> 00:22:00,380
you can delete delete all and you really

00:21:57,650 --> 00:22:03,350
just need the path to either a directory

00:22:00,380 --> 00:22:04,790
where the files and I say files like if

00:22:03,350 --> 00:22:06,890
you have a defaults file and you have a

00:22:04,790 --> 00:22:09,080
regular file that has all the jobs in it

00:22:06,890 --> 00:22:10,910
you need to just the path to that or if

00:22:09,080 --> 00:22:15,530
they're all in one pup one file you can

00:22:10,910 --> 00:22:17,990
just just point to it and do that and

00:22:15,530 --> 00:22:21,250
then this would be the execution that

00:22:17,990 --> 00:22:21,250
I'm going to show you now

00:22:25,330 --> 00:22:28,659
so let's

00:22:33,400 --> 00:22:44,340
so here you can see we have basically no

00:22:37,720 --> 00:22:44,340
jobs in here it's it's empty we do have

00:22:48,090 --> 00:22:53,050
we do have some views so I created kind

00:22:51,010 --> 00:22:57,450
of a dummy setup of views of for project

00:22:53,050 --> 00:22:57,450
data project B to show this so

00:23:04,109 --> 00:23:09,349
so I'm just gonna show this is just

00:23:06,210 --> 00:23:09,349
doing the execution

00:23:18,659 --> 00:23:23,999
priviledge Jenkins user um it depends if

00:23:22,080 --> 00:23:25,679
you're Jake is require security yes and

00:23:23,999 --> 00:23:29,429
then you would provide a net any file a

00:23:25,679 --> 00:23:30,990
username and password or I wouldn't say

00:23:29,429 --> 00:23:33,720
it doesn't have to be a password it can

00:23:30,990 --> 00:23:34,649
be the API token to talk to Jenkins you

00:23:33,720 --> 00:23:38,279
can use that as well

00:23:34,649 --> 00:23:39,690
most people use that or if in this case

00:23:38,279 --> 00:23:41,909
I don't really have any security is just

00:23:39,690 --> 00:23:44,519
a test Jenkins that I have so I left

00:23:41,909 --> 00:23:46,590
username and password blank but that's

00:23:44,519 --> 00:23:49,379
the any file the common configuration

00:23:46,590 --> 00:23:52,860
file in this case I want to update all

00:23:49,379 --> 00:23:57,499
the jobs that are defined in that so

00:23:52,860 --> 00:24:00,210
what I'm going to do is run that and

00:23:57,499 --> 00:24:02,929
it's cycling through my projects and

00:24:00,210 --> 00:24:02,929
updating those

00:24:10,700 --> 00:24:17,580
so now we should have something here at

00:24:13,889 --> 00:24:21,419
least for the service job and also it

00:24:17,580 --> 00:24:24,419
already triggered and set up my it set

00:24:21,419 --> 00:24:26,519
up these what it should also do is once

00:24:24,419 --> 00:24:28,559
it picks up on the fact that this was

00:24:26,519 --> 00:24:30,570
added because it's the first time we're

00:24:28,559 --> 00:24:40,139
adding this it's going to trigger a get

00:24:30,570 --> 00:24:43,379
to check it for any updates I think I

00:24:40,139 --> 00:24:44,519
said it for two minutes so but uh and

00:24:43,379 --> 00:24:46,529
there now it's already there ready

00:24:44,519 --> 00:24:49,529
running so it should be updated in a

00:24:46,529 --> 00:24:51,600
second so this is actually me I put in a

00:24:49,529 --> 00:24:54,470
service job to call Jenkins job builder

00:24:51,600 --> 00:25:00,029
and now it's doing its magic to then

00:24:54,470 --> 00:25:06,960
update my other jobs and you'll probably

00:25:00,029 --> 00:25:09,210
see this grow as yeah in this case so I

00:25:06,960 --> 00:25:10,950
really created like three job templates

00:25:09,210 --> 00:25:13,740
but because I set up all these different

00:25:10,950 --> 00:25:21,299
topologies here I was able to then

00:25:13,740 --> 00:25:25,350
multiply how many jobs I've had and now

00:25:21,299 --> 00:25:28,129
just to kind of show you right the the

00:25:25,350 --> 00:25:28,129
provision job

00:25:33,480 --> 00:25:38,059
I could see where configures

00:25:39,120 --> 00:25:41,840
area

00:25:48,260 --> 00:25:53,990
so this has the stuff that was in that

00:25:50,870 --> 00:25:56,000
job that site for the parameter but

00:25:53,990 --> 00:25:58,460
notice here I have all my SCM stuff

00:25:56,000 --> 00:26:00,200
checked out now I didn't put that in the

00:25:58,460 --> 00:26:05,480
job template that was a default but it

00:26:00,200 --> 00:26:07,549
pulled it in here for me set up the the

00:26:05,480 --> 00:26:08,929
build environment the default build

00:26:07,549 --> 00:26:15,309
environment that I set up for the build

00:26:08,929 --> 00:26:15,309
wrappers to put timestamps in ANSI and

00:26:15,970 --> 00:26:23,750
what else time stamps and the coloring

00:26:20,570 --> 00:26:25,760
and also to loot delete my workspace and

00:26:23,750 --> 00:26:35,770
then here is the shell code that I had

00:26:25,760 --> 00:26:35,770
in that job template to run and then

00:26:40,760 --> 00:26:46,340
this is then the archiving of the build

00:26:43,850 --> 00:26:49,520
artifacts and then the other jobs that

00:26:46,340 --> 00:26:52,720
I'm going to trigger downstream so it's

00:26:49,520 --> 00:26:56,270
basically what I wanted to show is that

00:26:52,720 --> 00:27:01,190
we can very easily create multiple jobs

00:26:56,270 --> 00:27:03,950
that way without a lot of code or using

00:27:01,190 --> 00:27:07,400
the UI and now if I wanted to either

00:27:03,950 --> 00:27:09,710
connect these into source control which

00:27:07,400 --> 00:27:11,630
these are in up in github there's a link

00:27:09,710 --> 00:27:13,610
that I have at the end too for the

00:27:11,630 --> 00:27:17,120
github so you can look at the examples

00:27:13,610 --> 00:27:18,620
themselves and then there's you can also

00:27:17,120 --> 00:27:20,270
then if you wanted to give this to

00:27:18,620 --> 00:27:22,790
somebody else or run this on another

00:27:20,270 --> 00:27:26,450
master you could easily set this up and

00:27:22,790 --> 00:27:29,200
and give it out or run it in another

00:27:26,450 --> 00:27:29,200
environment

00:27:33,790 --> 00:27:37,170
so let me go back

00:27:42,210 --> 00:27:46,480
so now we should have these over all the

00:27:44,500 --> 00:27:51,550
jobs that have been updated both for

00:27:46,480 --> 00:27:54,420
project day and project B and now the

00:27:51,550 --> 00:27:58,120
good thing too is is that this is here

00:27:54,420 --> 00:28:00,160
we can then you know keep this under

00:27:58,120 --> 00:28:01,900
source control and it will automatically

00:28:00,160 --> 00:28:04,360
get updated as well let's say you wanted

00:28:01,900 --> 00:28:08,470
to update these jobs you could have a

00:28:04,360 --> 00:28:13,990
get trigger that updates them as as well

00:28:08,470 --> 00:28:18,660
if you wanted to probably kick one of

00:28:13,990 --> 00:28:18,660
these off I'm not sure if it will run

00:28:44,590 --> 00:28:47,580
pick that off

00:28:49,050 --> 00:28:56,810
that's running me see

00:28:59,710 --> 00:29:05,710
so these are some references to the

00:29:02,890 --> 00:29:08,380
Jacobs job builder documentation as well

00:29:05,710 --> 00:29:11,020
as the kid hub for this demo and in the

00:29:08,380 --> 00:29:13,930
demo I have all those files that you saw

00:29:11,020 --> 00:29:16,000
the the amble files

00:29:13,930 --> 00:29:21,010
the Jacobs job other llamó files as well

00:29:16,000 --> 00:29:25,180
as like a readme and you see what else I

00:29:21,010 --> 00:29:27,160
have in there and what I did too is I

00:29:25,180 --> 00:29:29,530
created Yama files for each of the

00:29:27,160 --> 00:29:33,450
projects that were defined you also

00:29:29,530 --> 00:29:35,440
could in my demo and in the github I

00:29:33,450 --> 00:29:38,290
separated them into different folders

00:29:35,440 --> 00:29:40,150
you could have them easily put them in

00:29:38,290 --> 00:29:42,910
one folder so if you wanted to create

00:29:40,150 --> 00:29:44,740
that Jenkins job builder amyl and have

00:29:42,910 --> 00:29:51,820
multiple projects within that you could

00:29:44,740 --> 00:29:53,470
do that in my examples I basically did

00:29:51,820 --> 00:29:55,870
one on topologies and one on

00:29:53,470 --> 00:30:03,730
architecture and I switched it up and I

00:29:55,870 --> 00:30:06,490
can show you that too if I'll show you

00:30:03,730 --> 00:30:11,020
an update to one of those files and now

00:30:06,490 --> 00:30:16,690
how that will get triggered so here's

00:30:11,020 --> 00:30:18,640
the one for project a yep with all the

00:30:16,690 --> 00:30:23,740
different topologies so let's say I

00:30:18,640 --> 00:30:27,010
wanted to I'm going to add another

00:30:23,740 --> 00:30:28,840
topology to that mix now we're maybe

00:30:27,010 --> 00:30:36,120
testing on another platform that needs

00:30:28,840 --> 00:30:36,120
that and then what I'm going to do is

00:31:03,800 --> 00:31:16,760
now in two minutes time the provisioning

00:31:15,020 --> 00:31:21,190
is that job is still running which is

00:31:16,760 --> 00:31:24,740
fine but we want to see is that this one

00:31:21,190 --> 00:31:26,870
gets triggered in that in that time and

00:31:24,740 --> 00:31:32,030
probably a minute it'll probably get

00:31:26,870 --> 00:31:38,690
triggered it should I guess while we

00:31:32,030 --> 00:31:40,640
wait for that it's for a few back you

00:31:38,690 --> 00:31:42,290
guys have any questions now that you've

00:31:40,640 --> 00:31:43,520
seen that and we can jump back to that

00:31:42,290 --> 00:31:45,710
one that once that's running but I

00:31:43,520 --> 00:31:46,970
figured I'd answer some questions yeah

00:31:45,710 --> 00:31:51,070
if you want to just if you can just go

00:31:46,970 --> 00:31:51,070
to the mic I appreciate that thank you

00:31:53,020 --> 00:31:58,070
um I was wondering is there a way to

00:31:55,540 --> 00:32:03,380
specify an info it's some sort of

00:31:58,070 --> 00:32:05,990
conditional block if yes actually we use

00:32:03,380 --> 00:32:09,230
that quite heavily there is a both in

00:32:05,990 --> 00:32:11,660
the Builder step and the post action or

00:32:09,230 --> 00:32:13,429
publisher section you can use something

00:32:11,660 --> 00:32:15,440
called conditioner or a flexible

00:32:13,429 --> 00:32:17,330
publisher depending on where you're

00:32:15,440 --> 00:32:18,559
using it and Jenkins job builder

00:32:17,330 --> 00:32:21,710
supports that so you can create

00:32:18,559 --> 00:32:23,300
conditions that says if this file so

00:32:21,710 --> 00:32:26,120
let's say in your shell step you created

00:32:23,300 --> 00:32:28,250
a file for certain condition and that

00:32:26,120 --> 00:32:29,750
file exists you could then do some

00:32:28,250 --> 00:32:32,540
action based on that and you can have

00:32:29,750 --> 00:32:37,929
that all in your Jenkins job builder it

00:32:32,540 --> 00:32:37,929
jjv supports that extremely well

00:32:38,679 --> 00:32:45,350
presumably after you run the tool the

00:32:41,900 --> 00:32:48,350
Jenkins home files like Varley Jenkins

00:32:45,350 --> 00:32:50,330
the config dot XML and the jobs and all

00:32:48,350 --> 00:32:50,750
those get created is that correct that's

00:32:50,330 --> 00:32:53,120
right

00:32:50,750 --> 00:32:55,400
okay and I was surprised you didn't have

00:32:53,120 --> 00:32:56,780
to restart Jenkins you do not have to

00:32:55,400 --> 00:33:00,530
read no you don't have to restart

00:32:56,780 --> 00:33:04,330
Jenkins at all it's it's done just

00:33:00,530 --> 00:33:07,070
talking there's basically a wrapper a

00:33:04,330 --> 00:33:10,280
Python API that Jenkins job builder

00:33:07,070 --> 00:33:12,800
talks to and that generates the XML file

00:33:10,280 --> 00:33:14,120
so it's in it and what's nice too is

00:33:12,800 --> 00:33:15,870
right is you have these templates that

00:33:14,120 --> 00:33:17,700
are very simplified but

00:33:15,870 --> 00:33:19,440
it expands into the XML files that

00:33:17,700 --> 00:33:21,150
Jenkins wants to see and then the jobs

00:33:19,440 --> 00:33:22,500
are automatically you know you do a

00:33:21,150 --> 00:33:24,090
refresh in your browser and they're

00:33:22,500 --> 00:33:26,250
there I didn't I didn't have to restart

00:33:24,090 --> 00:33:28,770
anything and also you didn't say this

00:33:26,250 --> 00:33:30,809
explicitly or maybe you did but when you

00:33:28,770 --> 00:33:33,540
have those three files with the

00:33:30,809 --> 00:33:38,280
definitions I assume that any one of

00:33:33,540 --> 00:33:39,150
them can override a previous value is

00:33:38,280 --> 00:33:41,790
that not true

00:33:39,150 --> 00:33:44,430
a previous value right in other words

00:33:41,790 --> 00:33:46,710
can you define topology in both the

00:33:44,430 --> 00:33:48,480
template and then later on override it

00:33:46,710 --> 00:33:52,770
in a different file

00:33:48,480 --> 00:33:56,070
um you can't whatever is defined in that

00:33:52,770 --> 00:33:58,490
project section is what those macros are

00:33:56,070 --> 00:34:00,390
defined as okay you can't change them

00:33:58,490 --> 00:34:04,290
they don't they wouldn't mean anything

00:34:00,390 --> 00:34:05,910
in in the job templates themselves they

00:34:04,290 --> 00:34:07,380
have to be defined in that section and

00:34:05,910 --> 00:34:10,159
then they're replaced in the job

00:34:07,380 --> 00:34:13,649
templates at that point okay so each

00:34:10,159 --> 00:34:17,490
value pair yes you defined has to be

00:34:13,649 --> 00:34:24,300
unique throughout the whole yeah

00:34:17,490 --> 00:34:27,290
enchilada yes all right thank you let's

00:34:24,300 --> 00:34:27,290
see if we got our job

00:34:33,510 --> 00:34:36,290
what's that

00:34:39,510 --> 00:34:48,810
yeah okay great perfect so project a ran

00:34:45,270 --> 00:34:51,570
the the Jenkins job builder to update so

00:34:48,810 --> 00:34:53,909
what I would expect here now is that we

00:34:51,570 --> 00:34:56,340
have yet another one that has that

00:34:53,909 --> 00:35:03,600
topology to find which I believe it does

00:34:56,340 --> 00:35:04,770
the relevant one I can't see as well as

00:35:03,600 --> 00:35:10,100
you guys probably can

00:35:04,770 --> 00:35:12,690
so it basically added that said this

00:35:10,100 --> 00:35:14,640
just means my job failed from running it

00:35:12,690 --> 00:35:18,480
to provision which can be any number of

00:35:14,640 --> 00:35:22,290
things but I'm not worried about that as

00:35:18,480 --> 00:35:23,940
far as the creation though the updater

00:35:22,290 --> 00:35:28,500
job that was successful and that's what

00:35:23,940 --> 00:35:31,490
I wanted to show any other questions or

00:35:28,500 --> 00:35:31,490
comments

00:35:35,100 --> 00:35:41,040
I was just curious if it works with

00:35:37,170 --> 00:35:43,950
custom plugins as well so if you were to

00:35:41,040 --> 00:35:46,290
develop your own plugin right yeah so we

00:35:43,950 --> 00:35:50,930
actually have that in Red Hat there is

00:35:46,290 --> 00:35:53,400
someone that wrote a plug-in to do some

00:35:50,930 --> 00:35:56,280
triggering off of an internal message

00:35:53,400 --> 00:35:58,130
bus and also publish that message bus so

00:35:56,280 --> 00:36:01,410
they wrote a plug-in for that and

00:35:58,130 --> 00:36:05,010
someone on our team wrote the Jenkins

00:36:01,410 --> 00:36:06,600
job builder to do that so you this

00:36:05,010 --> 00:36:07,950
jakey's job builder is open source you

00:36:06,600 --> 00:36:10,440
can either add to something that's

00:36:07,950 --> 00:36:12,270
upstream in this case since we did there

00:36:10,440 --> 00:36:15,630
was we were not releasing this plug-in

00:36:12,270 --> 00:36:18,090
outside of our outside of Red Hat we

00:36:15,630 --> 00:36:19,950
were able to then just load it on top of

00:36:18,090 --> 00:36:21,780
the existing Jenkins job builder when we

00:36:19,950 --> 00:36:23,220
set up a master and we could just have

00:36:21,780 --> 00:36:24,090
it that way so you can definitely do

00:36:23,220 --> 00:36:26,700
that if you wanted to

00:36:24,090 --> 00:36:28,710
okay sure and then is it is there a list

00:36:26,700 --> 00:36:31,770
of all the supported plug-ins for the

00:36:28,710 --> 00:36:33,720
Jenkins job builder I think in the

00:36:31,770 --> 00:36:36,660
documentation if it's not spelled out

00:36:33,720 --> 00:36:39,240
explicitly like all the plugins when you

00:36:36,660 --> 00:36:42,390
go to read about any of the builders or

00:36:39,240 --> 00:36:44,670
any of those it says there and a link to

00:36:42,390 --> 00:36:46,860
the plugin it says you need this plug-in

00:36:44,670 --> 00:36:50,280
for this to be supported so like in the

00:36:46,860 --> 00:36:52,340
case of email extension if you were to

00:36:50,280 --> 00:36:54,300
look that up in the publishers

00:36:52,340 --> 00:36:57,300
documentation it would say you need that

00:36:54,300 --> 00:36:58,740
plug-in on your Jenkins master and if

00:36:57,300 --> 00:37:00,990
you were to run it and the plug-in

00:36:58,740 --> 00:37:02,820
wasn't there it doesn't break but then

00:37:00,990 --> 00:37:04,020
it just doesn't fill anything in for

00:37:02,820 --> 00:37:06,030
that so it wouldn't show up in your

00:37:04,020 --> 00:37:12,980
master that's all that happened okay

00:37:06,030 --> 00:37:12,980
thanks sure any other questions comments

00:37:14,150 --> 00:37:19,390
well thanks everybody appreciate your

00:37:17,180 --> 00:37:19,390
time

00:37:30,920 --> 00:37:32,980

YouTube URL: https://www.youtube.com/watch?v=pLDEwzXvdjs


