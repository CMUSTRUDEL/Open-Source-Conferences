Title: JUC U.S. East 2015 - Optimizing Your CI: Lessons Learned from a Successful Jenkins Rebuild
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Jonathann Zenou, Ravello Systems 

Ravello Systems has relied heavily on Jenkins since the early days. During the company's first four years, their Jenkins setup changed and evolved to the point that it was out of control. Ravello decided to take all the experience from those years and create a new and improved Jenkins setup. This session will share the lessons that were learned the hard way - and explain how the CI process was optimized. The process of re-doing the CI mechanism for a large, always developing group will be discussed, as well as mechanisms for revision control in Jenkins, job infrastructure and architecture guidelines for maximal flexibility and various other considerations. The overall continuous integration and testing strategies - which are completely cloud-based and cover all our varied components (from a hypervisor through networking and storage layers, distributed backend systems and all the way to an HTML5-based UI and a cross platform client side application) - will be described.
Captions: 
	00:00:15,230 --> 00:00:19,590
the title of this session is optimizing

00:00:17,880 --> 00:00:23,070
your CI there's some learned from a

00:00:19,590 --> 00:00:28,529
successful gen Kim's we built so let's

00:00:23,070 --> 00:00:30,779
start so hi my name is Jonathan I live

00:00:28,529 --> 00:00:34,170
in Tel Aviv in Israel and I originally

00:00:30,779 --> 00:00:36,840
from town in Marseille in France called

00:00:34,170 --> 00:00:40,110
Marseille nowaday I'm leading the DevOps

00:00:36,840 --> 00:00:41,850
effort a traveler system and when I'm

00:00:40,110 --> 00:00:44,010
not doing the verbs are spending time

00:00:41,850 --> 00:00:46,980
with my friends and family I life to

00:00:44,010 --> 00:00:49,140
play guitar this is my gibson les paul

00:00:46,980 --> 00:00:51,449
i'm very proud of it and when I'm not

00:00:49,140 --> 00:00:55,350
playing guitar I read comics with all of

00:00:51,449 --> 00:00:56,969
them okay so what is weather system why

00:00:55,350 --> 00:01:01,230
below system makes it possible to run

00:00:56,969 --> 00:01:04,589
any x86x64 workload in the public cloud

00:01:01,230 --> 00:01:09,570
and we are doing that with a zero

00:01:04,589 --> 00:01:11,310
migration we built a fort to do so we've

00:01:09,570 --> 00:01:14,340
built a high-performance nest a diaper

00:01:11,310 --> 00:01:17,010
visor over a networking and application

00:01:14,340 --> 00:01:20,759
centric management all that accessible

00:01:17,010 --> 00:01:23,369
to a pay per use SAS platform in other

00:01:20,759 --> 00:01:27,390
words we are providing data center as a

00:01:23,369 --> 00:01:29,909
service on the public cloud a few matrix

00:01:27,390 --> 00:01:32,729
about weather systems we are 30

00:01:29,909 --> 00:01:36,960
developers we have seven major projects

00:01:32,729 --> 00:01:39,450
and we are using development methodology

00:01:36,960 --> 00:01:41,750
with very close to Kanban we don't have

00:01:39,450 --> 00:01:46,110
a formal development methodology but

00:01:41,750 --> 00:01:50,990
what we are doing is a lot of small and

00:01:46,110 --> 00:01:54,829
quick releases so for us yeah is a must

00:01:50,990 --> 00:01:57,840
this is a part of a technological stack

00:01:54,829 --> 00:02:03,149
it is very diversified we are developing

00:01:57,840 --> 00:02:10,080
from sea level Colonel to Java backhand

00:02:03,149 --> 00:02:12,030
to angular html5 content so what are we

00:02:10,080 --> 00:02:14,640
going to talk about let's start with

00:02:12,030 --> 00:02:17,010
what we won't be talking about I won't

00:02:14,640 --> 00:02:19,020
explain to you where is the eye I want

00:02:17,010 --> 00:02:22,320
to explain to you why you or your

00:02:19,020 --> 00:02:24,990
company should use Jenkins of CI you

00:02:22,320 --> 00:02:26,490
have to understand that a travel system

00:02:24,990 --> 00:02:29,010
DuckTales of Jenkins and she admitted

00:02:26,490 --> 00:02:32,130
origin the problem being that throughout

00:02:29,010 --> 00:02:35,370
the years our CI environment became very

00:02:32,130 --> 00:02:38,340
fat very hard to maintain into scale so

00:02:35,370 --> 00:02:40,770
we came to the point that we decided we

00:02:38,340 --> 00:02:45,600
had to do a rebuild phase of our CI

00:02:40,770 --> 00:02:49,350
environment as jay-z famously said I got

00:02:45,600 --> 00:02:53,070
99 program but the build and one as i

00:02:49,350 --> 00:02:55,980
said earlier at rivero system we were

00:02:53,070 --> 00:02:58,190
already already obviously I environment

00:02:55,980 --> 00:03:01,590
running so when you want to recreate a

00:02:58,190 --> 00:03:03,660
new CI environment what is the question

00:03:01,590 --> 00:03:06,030
you should ask yourself what should I

00:03:03,660 --> 00:03:09,630
keep what should I break what should I

00:03:06,030 --> 00:03:11,640
improve and to find those question and

00:03:09,630 --> 00:03:13,140
to find the answer to this question the

00:03:11,640 --> 00:03:15,570
first people we came to where our

00:03:13,140 --> 00:03:17,250
developers we get to them and we ask

00:03:15,570 --> 00:03:18,900
them okay guys what can we do to make

00:03:17,250 --> 00:03:22,200
your life easier when you use Jenkins

00:03:18,900 --> 00:03:25,800
and what would we see from them is a

00:03:22,200 --> 00:03:28,680
list of problems and what we will go

00:03:25,800 --> 00:03:30,810
over right now with the main problems we

00:03:28,680 --> 00:03:33,200
receive and which solution which

00:03:30,810 --> 00:03:35,370
technology we used to solve this problem

00:03:33,200 --> 00:03:37,500
so let's start with the first problem

00:03:35,370 --> 00:03:39,930
jobs left over when you are winning a

00:03:37,500 --> 00:03:42,090
lot of job on slave and you are not

00:03:39,930 --> 00:03:43,770
taking care job left over after you are

00:03:42,090 --> 00:03:45,600
winning your job the first thing that

00:03:43,770 --> 00:03:48,360
would happen is that it will cause full

00:03:45,600 --> 00:03:50,880
disk and we all know that when the disk

00:03:48,360 --> 00:03:52,940
is swollen slave every job that you want

00:03:50,880 --> 00:03:55,500
on it will fail so our first

00:03:52,940 --> 00:03:57,480
straightforward answer was to use a very

00:03:55,500 --> 00:04:00,930
famous plugin called workspace clean a

00:03:57,480 --> 00:04:04,520
plug-in this plug-in just remove the

00:04:00,930 --> 00:04:07,680
workspace from the disk of the slave but

00:04:04,520 --> 00:04:09,900
then what do you do when you have when

00:04:07,680 --> 00:04:13,100
you are using technologies that are not

00:04:09,900 --> 00:04:16,739
five days but our rather cash base like

00:04:13,100 --> 00:04:19,080
maven when p.m. for such a problem for

00:04:16,739 --> 00:04:21,959
such a situation using the expects plug

00:04:19,080 --> 00:04:23,520
cleaner plug-in won't be enough so what

00:04:21,959 --> 00:04:26,940
you need you need a new clean

00:04:23,520 --> 00:04:28,770
environment for every job another

00:04:26,940 --> 00:04:31,320
problem we add was a need of better

00:04:28,770 --> 00:04:33,479
resource distribution let's have a look

00:04:31,320 --> 00:04:34,860
at this situation from outside we have

00:04:33,479 --> 00:04:36,300
the backing team

00:04:34,860 --> 00:04:38,729
and for the sake of the example let's

00:04:36,300 --> 00:04:41,759
say that they have three slave each

00:04:38,729 --> 00:04:43,319
slave in one executor on the other side

00:04:41,759 --> 00:04:45,900
we have the front end team we have only

00:04:43,319 --> 00:04:48,719
one slave with one executor and the

00:04:45,900 --> 00:04:50,969
yellow thing that you are that you can

00:04:48,719 --> 00:04:54,270
see below I'll the jobs of the back in

00:04:50,969 --> 00:04:56,729
team so let's start to push the job on

00:04:54,270 --> 00:04:58,680
the slave of the back in team and now we

00:04:56,729 --> 00:05:01,020
arrive to the state that we are waiting

00:04:58,680 --> 00:05:03,030
for the next available executor and we

00:05:01,020 --> 00:05:05,400
have other jobs on the back in team that

00:05:03,030 --> 00:05:07,439
I waiting in the queue on the other side

00:05:05,400 --> 00:05:10,050
we have the front end team slave that is

00:05:07,439 --> 00:05:11,759
empty nothing is running on it so we

00:05:10,050 --> 00:05:15,479
thought okay maybe we can create a

00:05:11,759 --> 00:05:17,580
common pool of resources and then we'll

00:05:15,479 --> 00:05:20,520
be able to use the front end team slave

00:05:17,580 --> 00:05:23,969
when they don't use it so this is what

00:05:20,520 --> 00:05:26,219
we did and then we continue to run the

00:05:23,969 --> 00:05:28,979
back end job but now I arrived a

00:05:26,219 --> 00:05:30,300
front-end team job and when you are

00:05:28,979 --> 00:05:32,520
looking at the back in team job this is

00:05:30,300 --> 00:05:35,039
a very fat job job that is taking a lot

00:05:32,520 --> 00:05:36,569
of time and a lot of resources on the

00:05:35,039 --> 00:05:38,129
other side the front end team is a very

00:05:36,569 --> 00:05:41,279
small job that is taking three minute

00:05:38,129 --> 00:05:43,830
run and when you are looking at the

00:05:41,279 --> 00:05:45,750
situation you see that the front end job

00:05:43,830 --> 00:05:51,900
will have to wait a lot of time to

00:05:45,750 --> 00:05:54,620
receive an empty executor to run oh just

00:05:51,900 --> 00:05:54,620
a second sorry

00:05:58,300 --> 00:06:04,220
ok so this job will have to wait a lot

00:06:02,360 --> 00:06:05,599
of time and if we will check what will

00:06:04,220 --> 00:06:07,849
be is the front end team leaders

00:06:05,599 --> 00:06:12,319
reaction it will look something like

00:06:07,849 --> 00:06:13,849
this and it is very understandable so we

00:06:12,319 --> 00:06:16,069
need a better resource distribution and

00:06:13,849 --> 00:06:19,039
what we need a rapid and scalable way to

00:06:16,069 --> 00:06:21,949
spawn dynamic environments to solve this

00:06:19,039 --> 00:06:25,129
issue we decided to use non technology

00:06:21,949 --> 00:06:27,020
that is called docker and to use docker

00:06:25,129 --> 00:06:30,680
engine keen first of all we decided to

00:06:27,020 --> 00:06:33,500
use the Jenkins Dhaka plugin then on

00:06:30,680 --> 00:06:37,699
that we created a dedicated docker asked

00:06:33,500 --> 00:06:39,620
for each team we decided what will be

00:06:37,699 --> 00:06:42,229
the physical capabilities of the doctor

00:06:39,620 --> 00:06:44,060
asked in function of what is the size of

00:06:42,229 --> 00:06:47,659
the team and what is a requirement of

00:06:44,060 --> 00:06:51,169
the team and in the end we decided to

00:06:47,659 --> 00:06:54,380
put on every aust all the docker images

00:06:51,169 --> 00:06:58,310
of all the team because in the end if we

00:06:54,380 --> 00:07:00,680
have some barrier that are most restful

00:06:58,310 --> 00:07:03,289
from one teams and the other will be

00:07:00,680 --> 00:07:06,650
able to push the load between the

00:07:03,289 --> 00:07:08,330
different teams and then we solve two

00:07:06,650 --> 00:07:10,490
problems first of all we solve the jab

00:07:08,330 --> 00:07:12,409
love the job leftover problem because

00:07:10,490 --> 00:07:14,750
now each time that we're winning a job

00:07:12,409 --> 00:07:17,360
in Jenkins this job will run on the

00:07:14,750 --> 00:07:18,830
brand new container and when the job

00:07:17,360 --> 00:07:21,680
will be over we will just destroy the

00:07:18,830 --> 00:07:24,889
container and we solve the resource

00:07:21,680 --> 00:07:27,830
distribution to another problem we add

00:07:24,889 --> 00:07:30,050
was a security problem as I said earlier

00:07:27,830 --> 00:07:32,719
we are only 30 developers at hydro

00:07:30,050 --> 00:07:35,840
system so we are kind of a small company

00:07:32,719 --> 00:07:37,729
and being a small company we don't have

00:07:35,840 --> 00:07:39,740
an active directory and we have no need

00:07:37,729 --> 00:07:42,199
from an active directory so when we

00:07:39,740 --> 00:07:44,479
start using Jenkins we decided to use

00:07:42,199 --> 00:07:47,690
Jenkins own database to manage users and

00:07:44,479 --> 00:07:51,139
passwords but the program is that is

00:07:47,690 --> 00:07:55,190
that it is a static authentication

00:07:51,139 --> 00:07:56,659
mechanism and in the end you can see Jim

00:07:55,190 --> 00:08:00,020
that will use dave's account because

00:07:56,659 --> 00:08:02,800
once Jim gave to Dave his login and

00:08:00,020 --> 00:08:05,779
password and we don't want such a thing

00:08:02,800 --> 00:08:07,820
another problem that we add was when an

00:08:05,779 --> 00:08:10,650
employee is leaving the company you have

00:08:07,820 --> 00:08:11,820
to remember that this employee has left

00:08:10,650 --> 00:08:14,070
you have to enter Jenkins and you have

00:08:11,820 --> 00:08:17,699
to remember to remove the employee

00:08:14,070 --> 00:08:19,979
account from Jenkins and what other

00:08:17,699 --> 00:08:21,690
things that happening once a week is

00:08:19,979 --> 00:08:23,310
this meant that will arrive and we'll

00:08:21,690 --> 00:08:26,669
ask you to with it its password in

00:08:23,310 --> 00:08:29,370
Jenkins let's be honest we don't have

00:08:26,669 --> 00:08:32,820
time for that we have some more

00:08:29,370 --> 00:08:35,969
important things to do and because a

00:08:32,820 --> 00:08:38,310
traveler system we are using what we

00:08:35,969 --> 00:08:40,800
need it's a third-party dynamic

00:08:38,310 --> 00:08:42,900
authentication mechanism and because a

00:08:40,800 --> 00:08:45,950
traveler system we are using google apps

00:08:42,900 --> 00:08:49,470
for mail and calendar we decided to use

00:08:45,950 --> 00:08:52,080
a plug-in called Jenkins Google login

00:08:49,470 --> 00:08:54,270
plug-in and with that we have the

00:08:52,080 --> 00:08:57,420
possibility to use google SSO mechanism

00:08:54,270 --> 00:09:00,720
to authenticate with Jenkins so right

00:08:57,420 --> 00:09:03,870
now when my users want to use Jenkins

00:09:00,720 --> 00:09:06,750
they only need to be authenticated to

00:09:03,870 --> 00:09:09,839
the gmail account and they can enter

00:09:06,750 --> 00:09:11,220
Jenkins and use it with this plug-in we

00:09:09,839 --> 00:09:15,779
covered it with another plug-in called

00:09:11,220 --> 00:09:17,910
metrics authorization strategy so on the

00:09:15,779 --> 00:09:20,520
top of the Google authentication now we

00:09:17,910 --> 00:09:24,029
have the abbot the possibility to manage

00:09:20,520 --> 00:09:25,350
group of users still with a Google SSO

00:09:24,029 --> 00:09:28,230
education that we have a two-factor

00:09:25,350 --> 00:09:31,110
authentication thanks to google and in

00:09:28,230 --> 00:09:34,500
the end if we want we are able to open

00:09:31,110 --> 00:09:39,000
or jenkins to the world and that can be

00:09:34,500 --> 00:09:41,459
with is in some situations now raise of

00:09:39,000 --> 00:09:44,940
n of many of you are running scripts in

00:09:41,459 --> 00:09:47,640
your jobs yeah everyone is running

00:09:44,940 --> 00:09:51,150
scripts in their job because Jane Kean

00:09:47,640 --> 00:09:52,890
is making it very easy to do the problem

00:09:51,150 --> 00:09:55,020
with that is that sometimes you are

00:09:52,890 --> 00:09:57,930
starting with very small script that's

00:09:55,020 --> 00:10:00,209
only doing to your fault lines but very

00:09:57,930 --> 00:10:03,300
easy script is getting bigger and bigger

00:10:00,209 --> 00:10:05,400
and the problem with big scrape in

00:10:03,300 --> 00:10:07,350
Jenkins it's it is how to maintain I

00:10:05,400 --> 00:10:09,089
think that yesterday I heard someone in

00:10:07,350 --> 00:10:12,180
at all that what explaining that when

00:10:09,089 --> 00:10:14,580
you are the big script in Jenkins how do

00:10:12,180 --> 00:10:16,529
you manage it you are writing it with

00:10:14,580 --> 00:10:19,260
notepad plus plus and you are doing copy

00:10:16,529 --> 00:10:21,150
paste in the window in Jenkins and most

00:10:19,260 --> 00:10:23,250
of the time you can forget one character

00:10:21,150 --> 00:10:23,820
here and you all bit will say because of

00:10:23,250 --> 00:10:27,000
this little

00:10:23,820 --> 00:10:29,760
character so it's how to main thing to

00:10:27,000 --> 00:10:33,660
have big scripts and jenkins and it can

00:10:29,760 --> 00:10:36,420
be easily broken as i explained and then

00:10:33,660 --> 00:10:39,060
when you have some time that a job that

00:10:36,420 --> 00:10:40,560
would be broken because of a script you

00:10:39,060 --> 00:10:42,570
would start to run around in your

00:10:40,560 --> 00:10:44,160
company asking would touch the script it

00:10:42,570 --> 00:10:48,450
was working very well a few minutes ago

00:10:44,160 --> 00:10:50,310
now it doesn't so what we decided to do

00:10:48,450 --> 00:10:52,830
is first of all to put your script in

00:10:50,310 --> 00:10:54,710
revision control a travel system use

00:10:52,830 --> 00:10:57,180
github but now we have another problem

00:10:54,710 --> 00:10:59,550
because by default when you are running

00:10:57,180 --> 00:11:03,360
a job in Jenkins Jenkins lets you use

00:10:59,550 --> 00:11:05,880
one sem you cannot use power released

00:11:03,360 --> 00:11:08,580
several HCM so if your product is in

00:11:05,880 --> 00:11:10,980
subversion and your script isn't get AB

00:11:08,580 --> 00:11:14,820
you have to choose what do I pal I

00:11:10,980 --> 00:11:17,580
product on my script soul of every the

00:11:14,820 --> 00:11:19,770
protein for that and there is a plug-in

00:11:17,580 --> 00:11:24,180
called Jenkins multi para siempre game

00:11:19,770 --> 00:11:26,940
and for us it solve this issue okay so

00:11:24,180 --> 00:11:29,010
now we found a solution to take care of

00:11:26,940 --> 00:11:31,860
the script that we are winning in the

00:11:29,010 --> 00:11:35,040
job but what about the job configuration

00:11:31,860 --> 00:11:37,920
itself I'm sure it's already happened to

00:11:35,040 --> 00:11:41,370
several of us that you are changing a

00:11:37,920 --> 00:11:43,410
job configuration and the job is failing

00:11:41,370 --> 00:11:46,410
but you cannot remember what was the

00:11:43,410 --> 00:11:49,440
value that you changed so we need a

00:11:46,410 --> 00:11:53,310
solution for that and there is a plug-in

00:11:49,440 --> 00:11:55,290
called Jenkins job config history what

00:11:53,310 --> 00:11:58,770
this plug-in is doing itself old

00:11:55,290 --> 00:12:00,660
configuration of jobs it can let you

00:11:58,770 --> 00:12:04,110
make a diff between two job

00:12:00,660 --> 00:12:06,420
configuration and in the case that you

00:12:04,110 --> 00:12:10,230
need you can revert a job configuration

00:12:06,420 --> 00:12:13,260
and that pretty nice but that's not

00:12:10,230 --> 00:12:15,330
enough because all this data is saved on

00:12:13,260 --> 00:12:17,790
the Jenkins master what would be good

00:12:15,330 --> 00:12:20,730
it's would be if we had the opportunity

00:12:17,790 --> 00:12:23,580
to save this data outside let's say in

00:12:20,730 --> 00:12:26,370
revision control but there is a plug-in

00:12:23,580 --> 00:12:28,410
for that too and we coupled the job

00:12:26,370 --> 00:12:30,510
configures to it with another plugins

00:12:28,410 --> 00:12:33,740
that is called junk in SCM seen

00:12:30,510 --> 00:12:35,840
configuration and what is the Jenkins as

00:12:33,740 --> 00:12:37,130
sing configuration pagina means doing it

00:12:35,840 --> 00:12:40,730
just saves your world jenkins

00:12:37,130 --> 00:12:42,740
configuration in a revision control so

00:12:40,730 --> 00:12:44,900
right now if you think about it we have

00:12:42,740 --> 00:12:47,540
all of our scripts that are saved in

00:12:44,900 --> 00:12:49,250
revision control and now we have a whole

00:12:47,540 --> 00:12:52,370
Jenkins configuration i am not talking

00:12:49,250 --> 00:12:54,140
only about the job configuration but i

00:12:52,370 --> 00:12:56,540
am talking about the user configuration

00:12:54,140 --> 00:13:01,790
the configs amal of your world jenkins

00:12:56,540 --> 00:13:04,160
and that's pretty nice another needs

00:13:01,790 --> 00:13:07,130
that we discovered along the way it is

00:13:04,160 --> 00:13:09,770
an integer to share data between the

00:13:07,130 --> 00:13:12,350
jobs let's have a look at this situation

00:13:09,770 --> 00:13:14,420
we have a back end job that for the sake

00:13:12,350 --> 00:13:17,420
of the example only receive two

00:13:14,420 --> 00:13:18,530
parameters the first parameters will be

00:13:17,420 --> 00:13:20,810
the back end version that you are

00:13:18,530 --> 00:13:23,060
testing the second parameters is the

00:13:20,810 --> 00:13:25,060
front end version that you will test the

00:13:23,060 --> 00:13:27,320
integration with your back conversion

00:13:25,060 --> 00:13:29,210
and the other side I have the front end

00:13:27,320 --> 00:13:32,180
job that received exactly the same

00:13:29,210 --> 00:13:34,130
parameter but with a different value in

00:13:32,180 --> 00:13:36,440
the end when your developer will be

00:13:34,130 --> 00:13:38,030
running their jobs the developer from

00:13:36,440 --> 00:13:39,950
the back end team doesn't have an ID

00:13:38,030 --> 00:13:41,750
which is a stable versions of the front

00:13:39,950 --> 00:13:43,700
end and it is the same from the front

00:13:41,750 --> 00:13:46,040
end people it doesn't have any idea what

00:13:43,700 --> 00:13:51,170
will be the stable version of the back

00:13:46,040 --> 00:13:52,910
end so what we need is an enter fast of

00:13:51,170 --> 00:13:56,750
a service that we saw that that it will

00:13:52,910 --> 00:13:59,120
be accessible from all the jobs and I

00:13:56,750 --> 00:14:01,820
found such a solution to our plugin that

00:13:59,120 --> 00:14:04,400
is called Jenkins global variable string

00:14:01,820 --> 00:14:07,280
parameter which is creating some global

00:14:04,400 --> 00:14:10,220
parameters in Jenkins and you can use

00:14:07,280 --> 00:14:13,130
them there is only one problem with this

00:14:10,220 --> 00:14:16,220
plug-in is that you cannot alter the

00:14:13,130 --> 00:14:18,490
value from inside a job the only way you

00:14:16,220 --> 00:14:22,460
have to do that is to enter the

00:14:18,490 --> 00:14:25,520
configuration page front of Jenkins and

00:14:22,460 --> 00:14:28,160
then you have list of all your global

00:14:25,520 --> 00:14:31,490
parameters and you can change the

00:14:28,160 --> 00:14:33,110
from from there but you can change them

00:14:31,490 --> 00:14:37,310
inside the job if you know how to use

00:14:33,110 --> 00:14:40,040
groovy and I created this little script

00:14:37,310 --> 00:14:42,800
that receive two parameters the first

00:14:40,040 --> 00:14:45,230
parameters is the name of the global of

00:14:42,800 --> 00:14:48,470
the global variables and the second one

00:14:45,230 --> 00:14:50,540
is its value so if you are running the

00:14:48,470 --> 00:14:52,819
script with an honor and already created

00:14:50,540 --> 00:14:54,740
global parameters it will change the

00:14:52,819 --> 00:14:56,870
value if you are running the script with

00:14:54,740 --> 00:15:00,980
a non-existent global parameters it will

00:14:56,870 --> 00:15:03,620
create it so now what can we do we can

00:15:00,980 --> 00:15:06,920
keep a global parameter for each product

00:15:03,620 --> 00:15:10,459
stable version we can let all the other

00:15:06,920 --> 00:15:13,040
job use these values and let's say that

00:15:10,459 --> 00:15:16,639
now we are running a CI pipeline for our

00:15:13,040 --> 00:15:20,209
packing job for a back end product if

00:15:16,639 --> 00:15:23,620
the CIA pipeline finished green we can

00:15:20,209 --> 00:15:27,769
automatically increment the value of the

00:15:23,620 --> 00:15:30,230
back end stable version and dynamically

00:15:27,769 --> 00:15:35,990
all the other job we can use now the new

00:15:30,230 --> 00:15:38,300
version so now you have linked to my

00:15:35,990 --> 00:15:43,639
guess so you can use this script if you

00:15:38,300 --> 00:15:46,130
want ok before digging further you have

00:15:43,639 --> 00:15:48,290
to understand I have to explain you a

00:15:46,130 --> 00:15:53,240
little bit more about our CI is working

00:15:48,290 --> 00:15:56,329
at barrio system so from the beginning

00:15:53,240 --> 00:15:59,410
it looks like any other CI we have a

00:15:56,329 --> 00:16:01,790
build and unit test job that is

00:15:59,410 --> 00:16:04,250
triggered by the change in our revision

00:16:01,790 --> 00:16:06,170
control then we are creating an

00:16:04,250 --> 00:16:08,630
environment then we are deploying the

00:16:06,170 --> 00:16:10,939
code of the created environment we are

00:16:08,630 --> 00:16:14,420
running some test Suites and at the end

00:16:10,939 --> 00:16:17,350
we are stopping the environment so we

00:16:14,420 --> 00:16:19,880
decided to add some steps along the way

00:16:17,350 --> 00:16:23,149
first of all we are using auto factory

00:16:19,880 --> 00:16:25,879
and after we are winning the build and

00:16:23,149 --> 00:16:29,029
the unit tests will create an artifact

00:16:25,879 --> 00:16:31,100
that will deploy not a factory and later

00:16:29,029 --> 00:16:33,829
on women will be on the phase own we are

00:16:31,100 --> 00:16:36,769
deploying our code of the newly created

00:16:33,829 --> 00:16:38,420
environment we will use artifactory to

00:16:36,769 --> 00:16:39,769
just pull the artifact from there and

00:16:38,420 --> 00:16:43,129
then deploy them

00:16:39,769 --> 00:16:46,879
now create an environment another state

00:16:43,129 --> 00:16:48,199
we add was the low collection step if

00:16:46,879 --> 00:16:50,809
you think about it when you are running

00:16:48,199 --> 00:16:53,480
CI and let's say you are winning some

00:16:50,809 --> 00:16:56,239
tests that are failing what will be your

00:16:53,480 --> 00:16:58,129
first reaction to connect to the

00:16:56,239 --> 00:17:01,040
environment to check the logs what

00:16:58,129 --> 00:17:04,179
happens but when you are winning dynamic

00:17:01,040 --> 00:17:08,149
environment and they say you are winning

00:17:04,179 --> 00:17:09,439
sei pipeline during the night so it will

00:17:08,149 --> 00:17:11,539
mean that when you will arrive at the

00:17:09,439 --> 00:17:14,299
morning at the office google it of 0 to

00:17:11,539 --> 00:17:17,630
create a new environment or to start the

00:17:14,299 --> 00:17:20,000
environment and at the end of the day

00:17:17,630 --> 00:17:21,949
can kiss it can cause some money on the

00:17:20,000 --> 00:17:23,720
other end if d for stopping the

00:17:21,949 --> 00:17:26,059
environment you are running little

00:17:23,720 --> 00:17:28,580
script that will connect to each one of

00:17:26,059 --> 00:17:32,270
the vm of your environment and will push

00:17:28,580 --> 00:17:34,460
all the logs in s3 you will only have to

00:17:32,270 --> 00:17:36,620
download all the rugs and then you can

00:17:34,460 --> 00:17:40,429
open your log files and investigate them

00:17:36,620 --> 00:17:43,940
without any need to to restart the

00:17:40,429 --> 00:17:45,590
creative environment but if we are

00:17:43,940 --> 00:17:47,899
looking at this pie pan and if we are

00:17:45,590 --> 00:17:50,450
talking about the eye according to me

00:17:47,899 --> 00:17:52,159
the real challenge in CI is not in the

00:17:50,450 --> 00:17:53,899
build part it's not in the code

00:17:52,159 --> 00:18:00,260
deployment oh it's not in the test suite

00:17:53,899 --> 00:18:03,950
it's in the environment creation so in

00:18:00,260 --> 00:18:07,070
order to have CI environment we need to

00:18:03,950 --> 00:18:08,990
create environment dynamically but as I

00:18:07,070 --> 00:18:10,460
said earlier we have a better system and

00:18:08,990 --> 00:18:14,059
we are providing data center as a

00:18:10,460 --> 00:18:17,120
service so for us creating dynamic

00:18:14,059 --> 00:18:21,649
environment and maintaining it is what

00:18:17,120 --> 00:18:24,340
we do best so yes we decided to test to

00:18:21,649 --> 00:18:27,380
a vero system on a hybrid system and

00:18:24,340 --> 00:18:29,210
this is what it look like this is a

00:18:27,380 --> 00:18:33,020
screenshot of the rubbery system

00:18:29,210 --> 00:18:35,360
interface to create an environment on

00:18:33,020 --> 00:18:37,610
weather system you only have to have

00:18:35,360 --> 00:18:40,899
knowledge on how to use visio because

00:18:37,610 --> 00:18:43,330
the only thing you do is drag and drop

00:18:40,899 --> 00:18:46,070
so what you are seeing now is an

00:18:43,330 --> 00:18:50,130
identical twin of our banking services

00:18:46,070 --> 00:18:53,790
and using the web video system

00:18:50,130 --> 00:18:57,930
dko ribeiro system maven plugin we can

00:18:53,790 --> 00:18:59,340
dynamically create environment so and

00:18:57,930 --> 00:19:01,500
when you are creating this environment

00:18:59,340 --> 00:19:04,650
we can decide if you want to publish it

00:19:01,500 --> 00:19:09,710
in amazon in each region that can we

00:19:04,650 --> 00:19:12,540
decide in amazon or in GC and likewise

00:19:09,710 --> 00:19:15,420
so now all the pieces are ready for our

00:19:12,540 --> 00:19:18,300
new CI environment there is only one

00:19:15,420 --> 00:19:20,340
piece that is missing is how do we

00:19:18,300 --> 00:19:23,760
present this year environment to our

00:19:20,340 --> 00:19:26,520
developers because in the end what we

00:19:23,760 --> 00:19:29,580
want is to understand what our

00:19:26,520 --> 00:19:31,800
developers want so we came to them and

00:19:29,580 --> 00:19:34,710
we asked them the question okay guys if

00:19:31,800 --> 00:19:38,880
now we can provide you a CI environment

00:19:34,710 --> 00:19:42,990
solution what will be the best way for

00:19:38,880 --> 00:19:44,520
you to look for it to look like and I

00:19:42,990 --> 00:19:46,920
know that usually when I talk to people

00:19:44,520 --> 00:19:49,170
and I say them that I am always asking

00:19:46,920 --> 00:19:51,570
my developer what they want the first

00:19:49,170 --> 00:19:53,270
restaurant that I received from other

00:19:51,570 --> 00:19:54,930
people from the DevOps community is

00:19:53,270 --> 00:19:57,780
developers doesn't know what they want

00:19:54,930 --> 00:19:59,880
and usually they will ask you for

00:19:57,780 --> 00:20:01,530
something you will put a lot of fo

00:19:59,880 --> 00:20:03,630
creating it and when you will direct

00:20:01,530 --> 00:20:06,030
deliver it to them the first preference

00:20:03,630 --> 00:20:08,700
will be okay we don't need it anymore or

00:20:06,030 --> 00:20:12,330
that wasn't exactly how we imagined it

00:20:08,700 --> 00:20:14,460
but I discovered that if you ask all the

00:20:12,330 --> 00:20:16,860
developers tears of the developers teams

00:20:14,460 --> 00:20:19,110
in your company and all the team will

00:20:16,860 --> 00:20:21,720
ask for the same thing that usually they

00:20:19,110 --> 00:20:24,950
will need that thing so when I asked

00:20:21,720 --> 00:20:28,200
them all the imagined the CI environment

00:20:24,950 --> 00:20:31,740
the respond that that they gave me what

00:20:28,200 --> 00:20:33,810
was we need a black box with a button so

00:20:31,740 --> 00:20:35,490
when we press the button it will create

00:20:33,810 --> 00:20:37,650
an environment deploy code on the

00:20:35,490 --> 00:20:39,720
environment run some tests and after

00:20:37,650 --> 00:20:41,430
that stop the environment thought of

00:20:39,720 --> 00:20:42,960
them okay guys that's great that this

00:20:41,430 --> 00:20:44,850
young vermin that we had before so I

00:20:42,960 --> 00:20:48,240
don't have to do anything and then they

00:20:44,850 --> 00:20:49,770
told me no no it's not this easy we want

00:20:48,240 --> 00:20:52,260
some time to be able to only do the

00:20:49,770 --> 00:20:54,420
create part when some time to be able to

00:20:52,260 --> 00:20:56,370
do the create and deploy but without the

00:20:54,420 --> 00:21:00,120
rent test and without stopping the

00:20:56,370 --> 00:21:00,710
environment what they want was a dynamic

00:21:00,120 --> 00:21:05,049
see I am

00:21:00,710 --> 00:21:08,990
Armaan's so we decided to create a job

00:21:05,049 --> 00:21:12,169
first of all our first answer to that

00:21:08,990 --> 00:21:16,130
was okay so we'll just creates a one job

00:21:12,169 --> 00:21:18,980
for each combination but in the end i'm

00:21:16,130 --> 00:21:21,890
lazy de bouts engineer and that don't

00:21:18,980 --> 00:21:25,630
like to maintain a lot of jobs so i said

00:21:21,890 --> 00:21:30,260
the must be a solution without creating

00:21:25,630 --> 00:21:34,100
factorial for job so we created a job

00:21:30,260 --> 00:21:39,559
that we call ctrs for create deploy ran

00:21:34,100 --> 00:21:42,200
and stop and this hideous job as as a

00:21:39,559 --> 00:21:44,240
parameter a lot of parameters you can

00:21:42,200 --> 00:21:46,549
text in account a lot of parameters and

00:21:44,240 --> 00:21:51,740
it can be called from a lot of other

00:21:46,549 --> 00:21:56,210
jobs but in the end which is what is

00:21:51,740 --> 00:21:58,070
make cd-rs so coolant specific it the

00:21:56,210 --> 00:22:01,460
fact that because we are using the

00:21:58,070 --> 00:22:03,649
mythity job plugin I am letting all the

00:22:01,460 --> 00:22:06,140
conditional aspect of the job to the

00:22:03,649 --> 00:22:09,649
plug-in and in the end if I am looking

00:22:06,140 --> 00:22:13,340
at my job I have almost no lines of

00:22:09,649 --> 00:22:17,899
coordinates and the world logic will be

00:22:13,340 --> 00:22:20,510
handled by by the voltage or plugin okay

00:22:17,899 --> 00:22:22,970
so now we obviously environment and it

00:22:20,510 --> 00:22:26,390
is running and my developers are very

00:22:22,970 --> 00:22:28,970
happy with it but let's say that now I

00:22:26,390 --> 00:22:31,640
want to add some other jobs well I want

00:22:28,970 --> 00:22:33,049
to change an existing job now I am very

00:22:31,640 --> 00:22:34,610
afraid because I have something that is

00:22:33,049 --> 00:22:38,330
running and I don't want to change it it

00:22:34,610 --> 00:22:40,490
can break and I would like to be able to

00:22:38,330 --> 00:22:43,640
improve a job without first of all

00:22:40,490 --> 00:22:46,640
breaking it without stopping other

00:22:43,640 --> 00:22:48,470
people to use it right now CD RS is one

00:22:46,640 --> 00:22:51,919
of the hottest job at micro system I

00:22:48,470 --> 00:22:54,289
have oughta know at every given time I

00:22:51,919 --> 00:22:57,710
have at least ten instances of this job

00:22:54,289 --> 00:23:02,240
so if i go to my developer that says I'm

00:22:57,710 --> 00:23:04,370
okay guys from 10 to 14 you won't be

00:23:02,240 --> 00:23:06,380
able to see dr s is like telling them

00:23:04,370 --> 00:23:10,149
okay guys from this hour to this hour

00:23:06,380 --> 00:23:12,090
Jenkins will be down and I now want such

00:23:10,149 --> 00:23:14,760
such a solution

00:23:12,090 --> 00:23:17,580
so what I need is a power al Jenkins

00:23:14,760 --> 00:23:19,650
environment that will be almost

00:23:17,580 --> 00:23:21,240
identical to our regular to our

00:23:19,650 --> 00:23:23,909
production Jenkins environment and

00:23:21,240 --> 00:23:30,090
aletta will be able to test my changes

00:23:23,909 --> 00:23:31,650
on so if you remember well first of all

00:23:30,090 --> 00:23:36,029
if you remember well before we talked

00:23:31,650 --> 00:23:39,270
about the jenkins sem seen configuration

00:23:36,029 --> 00:23:42,870
plugin that is saving my whole gentian

00:23:39,270 --> 00:23:46,409
configuration on the revision control so

00:23:42,870 --> 00:23:49,320
what I did I created Jenkins environment

00:23:46,409 --> 00:23:51,750
guru print on Ribeiro system so it means

00:23:49,320 --> 00:23:54,539
that I will have an identical copy of my

00:23:51,750 --> 00:23:58,649
Jenkins infrastructure on Ribeiro system

00:23:54,539 --> 00:24:02,130
and using NC bara we first of all make a

00:23:58,649 --> 00:24:08,510
git clone of the github repository that

00:24:02,130 --> 00:24:08,510
on it i have on my sorry guys

00:24:10,440 --> 00:24:16,649
i will make a git clone of of the

00:24:14,220 --> 00:24:19,620
repository that I've on it all my

00:24:16,649 --> 00:24:22,710
Jenkins configuration and then I will

00:24:19,620 --> 00:24:26,669
just run a little script to change stuff

00:24:22,710 --> 00:24:29,490
like my production keys or some of the

00:24:26,669 --> 00:24:31,379
servers because I don't want my sandbox

00:24:29,490 --> 00:24:35,039
to be able to deploy stuff in production

00:24:31,379 --> 00:24:37,350
of course and only that will run my

00:24:35,039 --> 00:24:40,139
regular jobs and this will be a good way

00:24:37,350 --> 00:24:44,159
for me to test the newly created job on

00:24:40,139 --> 00:24:47,509
Jenkins and of course all that will be

00:24:44,159 --> 00:24:50,129
orchestrated from my Jenkins production

00:24:47,509 --> 00:24:52,169
environment so in the end which would

00:24:50,129 --> 00:24:55,320
like this let's say that I am talking

00:24:52,169 --> 00:24:58,889
about a change that I've pushed on one

00:24:55,320 --> 00:25:01,440
of my script so i will add a job that

00:24:58,889 --> 00:25:03,809
will detect this change this job will

00:25:01,440 --> 00:25:07,049
create a dynamic Jenkins environment on

00:25:03,809 --> 00:25:10,019
Rivero I will be able to run my regular

00:25:07,049 --> 00:25:12,659
jobs on it and in the end I would stop

00:25:10,019 --> 00:25:16,889
the dynamic environment so this way I

00:25:12,659 --> 00:25:19,470
really add nested Jenkins if you can

00:25:16,889 --> 00:25:25,259
call it like this and on it i'll be able

00:25:19,470 --> 00:25:29,009
to really test my changes in the end

00:25:25,259 --> 00:25:32,129
this is what my Jenkinson box look like

00:25:29,009 --> 00:25:34,740
I have a Jenkins master a darker host

00:25:32,129 --> 00:25:37,080
for the phone making it simpler because

00:25:34,740 --> 00:25:39,720
in my production environment I have

00:25:37,080 --> 00:25:42,570
several docker ask that all those are

00:25:39,720 --> 00:25:45,269
the same images here for the sandbox I

00:25:42,570 --> 00:25:47,100
only need one doc aroused and an

00:25:45,269 --> 00:25:53,070
artifact to a server to manage my

00:25:47,100 --> 00:25:54,960
artifacts so now if we compare our all

00:25:53,070 --> 00:25:57,000
Jenkins environments the new Jenkins

00:25:54,960 --> 00:25:59,580
environment first of all about the

00:25:57,000 --> 00:26:04,799
number of jobs using jobs like cd-rs

00:25:59,580 --> 00:26:07,309
make me cuts a lot of jobs now before we

00:26:04,799 --> 00:26:07,309
add one

00:26:07,480 --> 00:26:13,340
137 jobs and now we are good with only

00:26:10,070 --> 00:26:15,889
50 56 jobs and we are doing exactly the

00:26:13,340 --> 00:26:17,869
same thing we are doing even more thing

00:26:15,889 --> 00:26:22,190
that we could do in our audience

00:26:17,869 --> 00:26:25,580
environment before we all we add 10

00:26:22,190 --> 00:26:27,549
static slave but now we have between 0

00:26:25,580 --> 00:26:31,129
and 50 dynamics life with docker and

00:26:27,549 --> 00:26:34,609
until now I never had any performance

00:26:31,129 --> 00:26:38,509
issue and our build test and duration

00:26:34,609 --> 00:26:40,999
pass to 70 minutes to 43 minutes so in

00:26:38,509 --> 00:26:46,249
the end what we have is up here

00:26:40,999 --> 00:26:49,159
developers so refusing for you to take

00:26:46,249 --> 00:26:50,720
away on you first of all always ask your

00:26:49,159 --> 00:26:54,470
developers are you can make their life

00:26:50,720 --> 00:26:57,409
easier because as devops engineer was

00:26:54,470 --> 00:26:59,299
jenkins administrator almond costumer

00:26:57,409 --> 00:27:01,549
other developers if they are not using

00:26:59,299 --> 00:27:04,100
your Jenkins environment because it

00:27:01,549 --> 00:27:06,470
doesn't look easy to use for them then

00:27:04,100 --> 00:27:08,840
we miss the whole point they have to be

00:27:06,470 --> 00:27:12,470
happy yes I know it's hard but they have

00:27:08,840 --> 00:27:14,179
to be happy another thing is don't be

00:27:12,470 --> 00:27:16,249
afraid to break things I think one of

00:27:14,179 --> 00:27:19,309
our sponsor are giving away t-shirts

00:27:16,249 --> 00:27:21,259
that is waiting on it move fast and

00:27:19,309 --> 00:27:23,299
don't break things I say yes break

00:27:21,259 --> 00:27:25,820
things but know how to fig them and

00:27:23,299 --> 00:27:27,940
breaking things is the only way that

00:27:25,820 --> 00:27:31,879
will be able to discover new things and

00:27:27,940 --> 00:27:34,909
discover how to solve them another thing

00:27:31,879 --> 00:27:36,499
that I can that you could do is follow a

00:27:34,909 --> 00:27:39,739
twitter account called junk into this

00:27:36,499 --> 00:27:42,529
it's time that there is a new version of

00:27:39,739 --> 00:27:44,539
a plug-in of a new plug-in this account

00:27:42,529 --> 00:27:46,070
is showing it and if you are following

00:27:44,539 --> 00:27:50,080
and you'll be able to receive a

00:27:46,070 --> 00:27:52,340
notification on it and one last thing a

00:27:50,080 --> 00:27:56,659
traveler system we have a new feature

00:27:52,340 --> 00:27:58,970
that is called rivero whip oh and what

00:27:56,659 --> 00:28:01,789
it is doing its like marketplace for

00:27:58,970 --> 00:28:05,510
ribeiro blueprint you can access this

00:28:01,789 --> 00:28:09,080
from there and what I did is I

00:28:05,510 --> 00:28:11,450
I best on it the blue plane the

00:28:09,080 --> 00:28:14,450
blueprint that we are using for our

00:28:11,450 --> 00:28:17,000
Jenkinson box in the way very poor

00:28:14,450 --> 00:28:19,700
marketplace so if you want you can now

00:28:17,000 --> 00:28:21,650
enter a very poor start to use this

00:28:19,700 --> 00:28:23,960
blueprint and you will have all the

00:28:21,650 --> 00:28:26,240
plugins I talked about today all the

00:28:23,960 --> 00:28:28,460
integration I met with Doc on without

00:28:26,240 --> 00:28:30,680
the factory and you'll be able to play

00:28:28,460 --> 00:28:34,310
with that understand all the plugins are

00:28:30,680 --> 00:28:37,760
working so this is video red stuff and I

00:28:34,310 --> 00:28:40,210
ran and I invite you to use it any

00:28:37,760 --> 00:28:40,210
questions

00:28:45,890 --> 00:28:56,880
sure you're hi hi you're Jenkins sandbox

00:28:52,950 --> 00:29:00,059
that is running real jobs is it not it

00:28:56,880 --> 00:29:02,909
is venting real job right and you have

00:29:00,059 --> 00:29:06,030
your original Jenkins and that is

00:29:02,909 --> 00:29:09,539
running real jobs so don't the two step

00:29:06,030 --> 00:29:11,850
on each other's toes no they don't

00:29:09,539 --> 00:29:13,530
because when I extend that the first

00:29:11,850 --> 00:29:17,970
step that I am doing when I ringing up

00:29:13,530 --> 00:29:21,000
my Jenkinson box is winning some some NC

00:29:17,970 --> 00:29:25,169
Bell playbooks that will that will alter

00:29:21,000 --> 00:29:28,980
my my newly created Jenkins environments

00:29:25,169 --> 00:29:32,730
to not for them not to be able to step

00:29:28,980 --> 00:29:35,370
on one another I will change which

00:29:32,730 --> 00:29:37,799
servers they usually talk with or which

00:29:35,370 --> 00:29:40,860
production keys are using just exactly

00:29:37,799 --> 00:29:43,530
for this case for does it won't be able

00:29:40,860 --> 00:29:47,880
to step on one another ok and then how

00:29:43,530 --> 00:29:50,270
do you check the results of your sandbox

00:29:47,880 --> 00:29:54,200
jenkins do you ask the development team

00:29:50,270 --> 00:29:56,669
know you have several way to do this

00:29:54,200 --> 00:29:58,980
what you can do first of all it receive

00:29:56,669 --> 00:30:01,549
notification on the job that you are

00:29:58,980 --> 00:30:06,120
running or you can use third-party

00:30:01,549 --> 00:30:08,640
systems like stats d and graphite so

00:30:06,120 --> 00:30:12,030
that your sent box will be able to send

00:30:08,640 --> 00:30:14,789
matrix and then you can all watch the

00:30:12,030 --> 00:30:20,539
graph define some money to hang above

00:30:14,789 --> 00:30:20,539
this graph the sky's the limit thank you

00:30:30,910 --> 00:30:36,320
how just going to ask with the SCM sink

00:30:34,280 --> 00:30:39,140
plugin you ever run into an issue where

00:30:36,320 --> 00:30:40,850
life jobs are renamed things get out of

00:30:39,140 --> 00:30:44,330
sync with the git repo and you have to

00:30:40,850 --> 00:30:48,410
go in and manually add commit job yeah

00:30:44,330 --> 00:30:52,190
it was opening in the old version of the

00:30:48,410 --> 00:30:54,890
plugin i download it and install the new

00:30:52,190 --> 00:30:59,090
one and it seems like this problem has

00:30:54,890 --> 00:31:01,130
disappeared from them so now we good but

00:30:59,090 --> 00:31:04,640
yes I know exactly which problem we are

00:31:01,130 --> 00:31:09,730
talking about and yes it was a first

00:31:04,640 --> 00:31:09,730
pretty toes problematic okay thanks

00:31:17,350 --> 00:31:25,290
hmm

00:31:19,800 --> 00:31:28,880
can you be a little more specific is to

00:31:25,290 --> 00:31:28,880
know on which file you are talking about

00:31:30,800 --> 00:31:33,800
okay

00:31:43,710 --> 00:31:47,270
this is one you are talking about

00:31:50,559 --> 00:31:57,399
so have a question on the best practices

00:31:54,909 --> 00:31:59,769
that needs to be followed to come up

00:31:57,399 --> 00:32:02,470
with the job naming convention mm-hmm

00:31:59,769 --> 00:32:04,929
say in enterprise-scale implementation

00:32:02,470 --> 00:32:08,169
we always run into about 2,000 or 3,000

00:32:04,929 --> 00:32:12,360
jobs right so what's the best way to

00:32:08,169 --> 00:32:16,960
manage the naming conventions so that it

00:32:12,360 --> 00:32:18,429
can always manage well okay I I won't be

00:32:16,960 --> 00:32:20,379
able to give you the best way I will

00:32:18,429 --> 00:32:24,059
give you my way I'm not sure if Li the

00:32:20,379 --> 00:32:27,249
best but what I decided to do is create

00:32:24,059 --> 00:32:32,039
some kind of naming convention where the

00:32:27,249 --> 00:32:34,929
first word of the job will be the team

00:32:32,039 --> 00:32:37,539
then after that the product then after

00:32:34,929 --> 00:32:40,990
that which part of the fluid is doing so

00:32:37,539 --> 00:32:44,259
let's say that you will have management

00:32:40,990 --> 00:32:45,639
backends and see iphone commit and after

00:32:44,259 --> 00:32:50,019
that management back and builder

00:32:45,639 --> 00:32:51,879
etcetera etcetera yes right you were

00:32:50,019 --> 00:32:54,610
talking about you're talking about

00:32:51,879 --> 00:32:56,470
earlier about using raveloe to create

00:32:54,610 --> 00:32:57,909
dynamic environments can you talk a

00:32:56,470 --> 00:32:59,200
little bit more how it doesn't how do

00:32:57,909 --> 00:33:01,029
you when you set up a new environment

00:32:59,200 --> 00:33:02,860
like an ec2 or something like that how

00:33:01,029 --> 00:33:04,210
you get back the hostname or IP address

00:33:02,860 --> 00:33:07,450
and things like that so you can continue

00:33:04,210 --> 00:33:09,210
with the build yes this is one of the

00:33:07,450 --> 00:33:12,220
key feature of choosing revel systems

00:33:09,210 --> 00:33:14,230
when you create an environment first of

00:33:12,220 --> 00:33:16,929
all you create a blueprint for this

00:33:14,230 --> 00:33:20,590
environment and when I created the group

00:33:16,929 --> 00:33:23,399
the blueprint of my Jenkinson box out of

00:33:20,590 --> 00:33:25,720
the service of the blueprint are using

00:33:23,399 --> 00:33:32,470
f.2d ends and they have the possibility

00:33:25,720 --> 00:33:35,860
to have a static IP so at the end my

00:33:32,470 --> 00:33:39,669
blueprint is working like locales of

00:33:35,860 --> 00:33:43,090
network so each server as a static IP

00:33:39,669 --> 00:33:44,529
that doesn't matter if i am using it or

00:33:43,090 --> 00:33:47,139
you are using it or somebody else which

00:33:44,529 --> 00:33:50,919
isn't it inside of the sub networks

00:33:47,139 --> 00:33:54,399
Jenkin master will always be at 1000 for

00:33:50,919 --> 00:34:00,429
and the dr. oz will always be 1000 tree

00:33:54,399 --> 00:34:01,289
and etc okay so we have several suite of

00:34:00,429 --> 00:34:04,600
tests

00:34:01,289 --> 00:34:08,830
when we are running our men's I we are

00:34:04,600 --> 00:34:13,119
using an empty database just to check

00:34:08,830 --> 00:34:16,359
that the feature are working between one

00:34:13,119 --> 00:34:19,149
another but when we are talking about

00:34:16,359 --> 00:34:22,169
pushing something to production we have

00:34:19,149 --> 00:34:25,149
what we call the upgrade face test and

00:34:22,169 --> 00:34:28,480
the first thing that will that this

00:34:25,149 --> 00:34:30,849
upgrade face test test will do is that

00:34:28,480 --> 00:34:35,560
it will take a dump of our production

00:34:30,849 --> 00:34:37,270
database it will bash it on our dynamic

00:34:35,560 --> 00:34:39,669
environment and then we will run tests

00:34:37,270 --> 00:34:41,290
on this so in the end for us it will be

00:34:39,669 --> 00:34:48,790
like we are running the test on

00:34:41,290 --> 00:34:52,530
production but we are not thank you

00:34:48,790 --> 00:34:52,530
everyone I shall hope you like

00:35:03,660 --> 00:35:05,720

YouTube URL: https://www.youtube.com/watch?v=D4uNU9XKzjM


