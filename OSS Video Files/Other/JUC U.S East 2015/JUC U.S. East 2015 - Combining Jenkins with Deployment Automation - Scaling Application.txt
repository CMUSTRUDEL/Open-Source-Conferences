Title: JUC U.S. East 2015 - Combining Jenkins with Deployment Automation - Scaling Application
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Darryl Bowler, Serena Software

In this session, Darryl will demonstrate the combined capabilities of Jenkins and deployment automation. The strengths of Jenkins are already well-understood with its intuitive interface and extensive plugin ecosystem. This hands-on presentation will extend the build pipeline to enterprise deployment scenarios, where more control and governance are required for production environments.

You will learn:
· Why you should use a dedicated deployment automation tool
· How to manage the deployment of enterprise, multi-tier applications
· How to use pipelines to control deployments through multiple environments
· About gates and approval processes
· How to integrate to other tools in the deployment toolchain
Captions: 
	00:00:14,990 --> 00:00:18,650
so welcome everybody thanks for

00:00:16,789 --> 00:00:21,590
attending the session on combining

00:00:18,650 --> 00:00:23,060
Jenkins with deployment automation my

00:00:21,590 --> 00:00:26,710
name is Daryl Boland the solutions

00:00:23,060 --> 00:00:29,060
architect for Serena software at today's

00:00:26,710 --> 00:00:33,830
presentation is going to be showing you

00:00:29,060 --> 00:00:35,900
how to use Jenkins to actually deploy to

00:00:33,830 --> 00:00:39,230
enterprise application share how to

00:00:35,900 --> 00:00:41,449
scale that particular and use

00:00:39,230 --> 00:00:43,220
particularly use cases to show you what

00:00:41,449 --> 00:00:45,410
you need to do to actually as a best

00:00:43,220 --> 00:00:47,330
practice to actually deploy to the

00:00:45,410 --> 00:00:48,260
enterprise so this is agenda today so

00:00:47,330 --> 00:00:50,659
I'm going to show you some of the

00:00:48,260 --> 00:00:53,269
characteristics of or enterprise

00:00:50,659 --> 00:00:56,150
application deployments using some of

00:00:53,269 --> 00:00:58,040
some of the best practices that we kind

00:00:56,150 --> 00:01:00,489
of developed in our deployment

00:00:58,040 --> 00:01:03,290
automation tool using concepts of

00:01:00,489 --> 00:01:05,600
components and abstraction so you can

00:01:03,290 --> 00:01:07,939
actually reuse processes from one

00:01:05,600 --> 00:01:09,290
environment to another environment I'm

00:01:07,939 --> 00:01:14,180
going to show you how to configure

00:01:09,290 --> 00:01:16,280
manage Jenkins jobs to actually even

00:01:14,180 --> 00:01:19,009
trigger automated builds to environments

00:01:16,280 --> 00:01:20,899
doing continuous deployment and or do

00:01:19,009 --> 00:01:23,420
push bunch of deployments to other

00:01:20,899 --> 00:01:25,460
environments that are typically under

00:01:23,420 --> 00:01:29,179
more control and I'm going to do all

00:01:25,460 --> 00:01:31,729
this through a live presentation of the

00:01:29,179 --> 00:01:35,179
technology but before i get there i just

00:01:31,729 --> 00:01:36,770
wanna kind of put it in context you talk

00:01:35,179 --> 00:01:38,030
a little bit about the technology how

00:01:36,770 --> 00:01:39,499
will fits together there's some

00:01:38,030 --> 00:01:43,070
integrations i'll be talking about today

00:01:39,499 --> 00:01:46,990
i want to show you how they actually fit

00:01:43,070 --> 00:01:49,460
into to the actual process itself yeah

00:01:46,990 --> 00:01:50,869
so essentially there's going to be i'm

00:01:49,460 --> 00:01:53,359
going to showing you a couple

00:01:50,869 --> 00:01:55,579
technologies yet the main technology

00:01:53,359 --> 00:01:57,310
Serena deployment automation the

00:01:55,579 --> 00:02:00,079
automation tool is integrated into

00:01:57,310 --> 00:02:03,740
Jenkins in two ways yeah we have a

00:02:00,079 --> 00:02:06,619
plug-in that's a community plug-in that

00:02:03,740 --> 00:02:08,869
allows you to publish artifacts as a

00:02:06,619 --> 00:02:11,450
post build step so once the build is

00:02:08,869 --> 00:02:13,130
completed its successful an almost

00:02:11,450 --> 00:02:15,410
testing and our artifacts are already

00:02:13,130 --> 00:02:17,120
there's a use case here where you may

00:02:15,410 --> 00:02:19,490
want to automatically push those

00:02:17,120 --> 00:02:21,530
artifacts deploy those artifacts to a

00:02:19,490 --> 00:02:24,200
particular environment and that's with

00:02:21,530 --> 00:02:27,110
our community-based integration

00:02:24,200 --> 00:02:28,879
we have another integration actually in

00:02:27,110 --> 00:02:31,069
the tool itself Serena deployment

00:02:28,879 --> 00:02:33,980
automation that allows you to trigger

00:02:31,069 --> 00:02:37,370
different Jenkins built so it's a kind

00:02:33,980 --> 00:02:39,739
of a Jenkins workflow plugin but you

00:02:37,370 --> 00:02:41,810
know it's somewhat different and as I

00:02:39,739 --> 00:02:43,790
present that particular workflow you'll

00:02:41,810 --> 00:02:47,030
see the subtle differences but you can

00:02:43,790 --> 00:02:49,519
actually trigger Jenkins jobs as part of

00:02:47,030 --> 00:02:51,769
your deployment process or after

00:02:49,519 --> 00:02:53,989
deployment process in our typical use

00:02:51,769 --> 00:02:56,690
cases that you have tests Kate's a test

00:02:53,989 --> 00:02:58,459
test at your exit you on Jenkins and so

00:02:56,690 --> 00:03:03,340
you can put that as part of your world

00:02:58,459 --> 00:03:06,380
flow so be showing that as well you know

00:03:03,340 --> 00:03:08,390
no lot of people ask me actually uncle

00:03:06,380 --> 00:03:10,310
asked the audience a question how many

00:03:08,390 --> 00:03:13,280
people here are actually using Jenkins

00:03:10,310 --> 00:03:16,280
for deployment not just for CI but for

00:03:13,280 --> 00:03:19,310
deploy there's quite a few probably

00:03:16,280 --> 00:03:21,590
fifty percent so a lot of people ask me

00:03:19,310 --> 00:03:23,150
why would you use another tool to do

00:03:21,590 --> 00:03:25,700
deployment automation is a great

00:03:23,150 --> 00:03:29,060
question yeah and it really boils down

00:03:25,700 --> 00:03:32,290
to you know the use case maybe a level

00:03:29,060 --> 00:03:34,880
scale that you have role based controls

00:03:32,290 --> 00:03:36,859
you know why be showing you here some

00:03:34,880 --> 00:03:40,730
some of the governments around the

00:03:36,859 --> 00:03:43,190
deployment pipeline yet so you know in a

00:03:40,730 --> 00:03:45,139
lot of large enterprises you you have

00:03:43,190 --> 00:03:47,959
controlled environments you can't just

00:03:45,139 --> 00:03:49,400
simply deploy to an environment it has

00:03:47,959 --> 00:03:51,410
to be approved it might have to be

00:03:49,400 --> 00:03:54,620
linked to change management system etc

00:03:51,410 --> 00:03:57,680
etc you know you get it so there are use

00:03:54,620 --> 00:04:00,200
cases whether it would be useful to use

00:03:57,680 --> 00:04:01,790
a deployment automation tool and we can

00:04:00,200 --> 00:04:04,310
get into that as we go through the

00:04:01,790 --> 00:04:08,090
presentation so these are the typical

00:04:04,310 --> 00:04:11,299
things that are attributes over

00:04:08,090 --> 00:04:13,519
enterprise deployment now you want you

00:04:11,299 --> 00:04:15,889
want to moduli your deployment process

00:04:13,519 --> 00:04:17,900
you want to try and reuse as much of

00:04:15,889 --> 00:04:20,599
what you design so you can actually

00:04:17,900 --> 00:04:21,950
standardized those processes food anyway

00:04:20,599 --> 00:04:23,270
so i'm going to show you through

00:04:21,950 --> 00:04:27,169
components how you can actually

00:04:23,270 --> 00:04:29,270
standardized and actually a deployment

00:04:27,169 --> 00:04:31,550
to a certain type of technology

00:04:29,270 --> 00:04:33,200
role-based deployments in a large

00:04:31,550 --> 00:04:34,950
enterprises you know you have different

00:04:33,200 --> 00:04:38,370
roles performing different functions

00:04:34,950 --> 00:04:40,380
yeah but the whole thing is it's not

00:04:38,370 --> 00:04:43,590
about the torch at this whole movement

00:04:40,380 --> 00:04:45,540
around CD DevOps is not about the tools

00:04:43,590 --> 00:04:48,240
in all that sick technol is making the

00:04:45,540 --> 00:04:50,010
process transparent yet and so at this

00:04:48,240 --> 00:04:51,300
what I want to show you today is that

00:04:50,010 --> 00:04:53,970
you want to make that process

00:04:51,300 --> 00:04:55,680
transparent and you want to alleviate

00:04:53,970 --> 00:04:58,920
some of those bottlenecks to actually

00:04:55,680 --> 00:05:02,100
allowing example a QA group to actually

00:04:58,920 --> 00:05:03,690
deploy to infrastructure they do use

00:05:02,100 --> 00:05:05,610
exception testing yeah they don't want

00:05:03,690 --> 00:05:09,150
to wait around give them the ability to

00:05:05,610 --> 00:05:10,230
do that yeah the technology exists so

00:05:09,150 --> 00:05:12,630
I'm going to show you some reuse

00:05:10,230 --> 00:05:14,940
abstractions for proper properties and

00:05:12,630 --> 00:05:18,420
as I go for the interfacial says a a

00:05:14,940 --> 00:05:20,190
relative simple interface and also when

00:05:18,420 --> 00:05:22,140
you're doing application deployments you

00:05:20,190 --> 00:05:23,670
need an ecosystem of plugins and

00:05:22,140 --> 00:05:26,010
integrations cause everybody's

00:05:23,670 --> 00:05:28,140
applications it's different even though

00:05:26,010 --> 00:05:30,930
you want a reusable process as you go

00:05:28,140 --> 00:05:32,190
from environment environment you're

00:05:30,930 --> 00:05:33,450
going to be working a lot of different

00:05:32,190 --> 00:05:35,910
operating systems and different

00:05:33,450 --> 00:05:41,250
technologies so you need to integrate to

00:05:35,910 --> 00:05:44,280
those tools and technologies one of the

00:05:41,250 --> 00:05:46,730
plugins i'll be showing you today is the

00:05:44,280 --> 00:05:49,320
this is a relative new plug-in it's the

00:05:46,730 --> 00:05:51,300
jenkins plug-in actually in Serena

00:05:49,320 --> 00:05:53,880
deployment automation and this will

00:05:51,300 --> 00:05:56,730
allow you to trigger build jobs across

00:05:53,880 --> 00:05:59,040
different masters diff you know on

00:05:56,730 --> 00:06:03,270
different instances you can run jobs in

00:05:59,040 --> 00:06:05,730
parallel you can invoke parallel tests

00:06:03,270 --> 00:06:07,740
after the deployment is done on your new

00:06:05,730 --> 00:06:10,620
Jenkins build seller but it integrates

00:06:07,740 --> 00:06:13,110
into you know all those builds that

00:06:10,620 --> 00:06:15,150
you're already devised in creating on

00:06:13,110 --> 00:06:20,370
Jenkins builder and incorporate those

00:06:15,150 --> 00:06:22,230
into your deployment process so let me

00:06:20,370 --> 00:06:25,440
get into the product itself and I'll

00:06:22,230 --> 00:06:29,220
show you the technology how is

00:06:25,440 --> 00:06:31,620
integrated and then we'll save some time

00:06:29,220 --> 00:06:34,940
at the end to do like a QA if you have

00:06:31,620 --> 00:06:37,680
some questions so like I said you know

00:06:34,940 --> 00:06:39,260
if you're doing if you want to do CD and

00:06:37,680 --> 00:06:41,970
this is all about seeding it doing

00:06:39,260 --> 00:06:43,729
implementing continuous integration now

00:06:41,970 --> 00:06:46,550
obviously I'm presenting it from

00:06:43,729 --> 00:06:48,439
perspective of a tool but the key thing

00:06:46,550 --> 00:06:50,749
is that you got to make the whole

00:06:48,439 --> 00:06:53,509
process of delivering software

00:06:50,749 --> 00:06:56,029
transparent yeah you know a lot of

00:06:53,509 --> 00:06:58,520
people came mask you know the actual

00:06:56,029 --> 00:07:00,529
process through technology so using

00:06:58,520 --> 00:07:03,680
something close this you know or even

00:07:00,529 --> 00:07:05,930
using something like the bill pipeline

00:07:03,680 --> 00:07:08,599
in Jenkins you can actually visualize

00:07:05,930 --> 00:07:11,779
what is actually available for change to

00:07:08,599 --> 00:07:13,849
deploy where is it in terms of the

00:07:11,779 --> 00:07:15,620
deployment pipeline so to give it a

00:07:13,849 --> 00:07:18,710
higher level this is actually a java

00:07:15,620 --> 00:07:20,930
application very simple but at a high

00:07:18,710 --> 00:07:24,349
level the key thing is that you want a

00:07:20,930 --> 00:07:26,659
BP plc's now where are where is this

00:07:24,349 --> 00:07:28,939
application in terms of the pipeline air

00:07:26,659 --> 00:07:30,680
so here we've got a pipeline the dew

00:07:28,939 --> 00:07:32,659
point the deployment quite point of view

00:07:30,680 --> 00:07:34,789
that shows you the versions of the

00:07:32,659 --> 00:07:37,849
applications that are installed yeah

00:07:34,789 --> 00:07:39,620
food is kind of very simple quiet

00:07:37,849 --> 00:07:41,899
playing all the way from dead and

00:07:39,620 --> 00:07:43,789
production but also you know more

00:07:41,899 --> 00:07:46,339
complicated environments you want to

00:07:43,789 --> 00:07:48,740
force this pipeline as well you don't

00:07:46,339 --> 00:07:50,899
want people to just deploy straight to

00:07:48,740 --> 00:07:53,330
production so here we can actually put

00:07:50,899 --> 00:07:55,459
rules in place laying in for the best

00:07:53,330 --> 00:07:57,949
practices that you got to deploy to your

00:07:55,459 --> 00:07:59,930
development environment first make sure

00:07:57,949 --> 00:08:02,330
it deploys it pass all the functional

00:07:59,930 --> 00:08:06,080
tests and then have the ability to then

00:08:02,330 --> 00:08:08,719
promote to UHC then production in a

00:08:06,080 --> 00:08:10,789
certain order and also you can apply a

00:08:08,719 --> 00:08:13,069
rule that you can actually automate that

00:08:10,789 --> 00:08:14,959
function as well let's let's have it so

00:08:13,069 --> 00:08:16,819
that if it gets out into the velopment

00:08:14,959 --> 00:08:18,979
it pass the functional test let's try

00:08:16,819 --> 00:08:21,409
and promote that automatically to uat

00:08:18,979 --> 00:08:24,459
and so we can do it as well but the key

00:08:21,409 --> 00:08:27,499
thing is making the pipeline visible

00:08:24,459 --> 00:08:29,629
another high level element is you know

00:08:27,499 --> 00:08:32,180
you want to do be able to do push button

00:08:29,629 --> 00:08:35,180
deployments and we can drill into some

00:08:32,180 --> 00:08:37,250
of the reusable components and how we

00:08:35,180 --> 00:08:41,389
actually create those workflows behind

00:08:37,250 --> 00:08:43,430
here but from a very simplistic view you

00:08:41,389 --> 00:08:46,930
we're actually in the context of an

00:08:43,430 --> 00:08:49,160
application and it knows that we just

00:08:46,930 --> 00:08:51,390
attempted to run up on automation

00:08:49,160 --> 00:08:54,780
process on develop and

00:08:51,390 --> 00:08:56,760
we get the village you actually choose a

00:08:54,780 --> 00:09:01,440
particular version of the application

00:08:56,760 --> 00:09:03,060
and this is actually using Jenkins as

00:09:01,440 --> 00:09:06,060
the back end so every time I actually

00:09:03,060 --> 00:09:09,600
create a new build you know I will

00:09:06,060 --> 00:09:12,720
actually collect those artifacts the air

00:09:09,600 --> 00:09:15,060
files war files objects I wanted to put

00:09:12,720 --> 00:09:17,610
deployed and this is going to verge and

00:09:15,060 --> 00:09:20,430
control those objects and I can actually

00:09:17,610 --> 00:09:22,350
choose a version of those those objects

00:09:20,430 --> 00:09:26,100
that I want to deploy so how I'm going

00:09:22,350 --> 00:09:28,230
to choose 51 a hit submit and now it

00:09:26,100 --> 00:09:30,450
actually deploying that application back

00:09:28,230 --> 00:09:34,260
end so fundamentally this gives the

00:09:30,450 --> 00:09:36,930
users then uses the ability to do push

00:09:34,260 --> 00:09:40,140
button deployments to essentially turn

00:09:36,930 --> 00:09:41,880
the environment they choose in real life

00:09:40,140 --> 00:09:43,830
you need to put more girl runs on that

00:09:41,880 --> 00:09:46,380
and i'll show you some of some of the

00:09:43,830 --> 00:09:51,330
best practices well we go into some of

00:09:46,380 --> 00:09:55,040
the best practices of how do you make

00:09:51,330 --> 00:09:59,190
these processes reusable yeah so

00:09:55,040 --> 00:10:02,100
essentially here we have the process

00:09:59,190 --> 00:10:05,910
around installing a java web application

00:10:02,100 --> 00:10:08,430
yeah when you store an object like a war

00:10:05,910 --> 00:10:10,140
file and here far well first you've got

00:10:08,430 --> 00:10:14,900
you want a virgin control that

00:10:10,140 --> 00:10:17,190
everything in terms of you how to do

00:10:14,900 --> 00:10:18,510
reliable continuous deployment and

00:10:17,190 --> 00:10:21,570
continuous delivery means that you have

00:10:18,510 --> 00:10:23,760
to version control the process the

00:10:21,570 --> 00:10:26,070
artifacts and be able to use a

00:10:23,760 --> 00:10:28,050
combination of those processes and those

00:10:26,070 --> 00:10:30,030
versions of artifacts to deploy to

00:10:28,050 --> 00:10:33,210
different environments so in this

00:10:30,030 --> 00:10:35,760
particular case I'm actually taking

00:10:33,210 --> 00:10:39,840
artifacts from my Jenkins build job but

00:10:35,760 --> 00:10:42,450
then I'm creating a process around that

00:10:39,840 --> 00:10:45,530
deployment so the key thing is that you

00:10:42,450 --> 00:10:48,450
want to make these processes as

00:10:45,530 --> 00:10:50,580
reusables as possible and obviously our

00:10:48,450 --> 00:10:54,840
best practices you use the same process

00:10:50,580 --> 00:10:57,360
as you go from dev Tess uat stage and

00:10:54,840 --> 00:10:59,250
production so you do so that you

00:10:57,360 --> 00:11:00,750
rehearse that all the way to production

00:10:59,250 --> 00:11:02,910
so this is

00:11:00,750 --> 00:11:05,130
a workflow that you can design for a

00:11:02,910 --> 00:11:07,350
deployment process for a java web

00:11:05,130 --> 00:11:10,440
application you know in this particular

00:11:07,350 --> 00:11:12,390
case you know you can actually drag and

00:11:10,440 --> 00:11:14,460
drop the different technologies into the

00:11:12,390 --> 00:11:18,330
parlor and actually create a workflow of

00:11:14,460 --> 00:11:20,160
how the process for deployment of this

00:11:18,330 --> 00:11:22,350
particular object object to take take

00:11:20,160 --> 00:11:24,720
place and as you can see you go through

00:11:22,350 --> 00:11:27,090
if you ever installed on a tomcat

00:11:24,720 --> 00:11:29,610
container these are very familiar steps

00:11:27,090 --> 00:11:33,330
that you either do manually or you would

00:11:29,610 --> 00:11:35,280
do through a script but here you kind of

00:11:33,330 --> 00:11:38,190
model that workflow and you can actually

00:11:35,280 --> 00:11:41,490
devise logic in that workflow so if it

00:11:38,190 --> 00:11:43,170
fails you take a different path if it if

00:11:41,490 --> 00:11:46,830
it's successful we take the happy path

00:11:43,170 --> 00:11:49,320
all the way to actually installing that

00:11:46,830 --> 00:11:52,650
particular application but the key thing

00:11:49,320 --> 00:11:55,560
is that you want to add stract any kind

00:11:52,650 --> 00:11:58,650
of unique properties from the process

00:11:55,560 --> 00:12:00,900
and this makes it reusable if you can

00:11:58,650 --> 00:12:05,730
abstract those runtime properties like

00:12:00,900 --> 00:12:09,450
the JDB jdbc connection I bet jdbc user

00:12:05,730 --> 00:12:12,420
ID password even to the IP address of

00:12:09,450 --> 00:12:15,030
the tomcat server or the service you're

00:12:12,420 --> 00:12:19,230
the point to what you have is a reusable

00:12:15,030 --> 00:12:21,930
property that extracts the process from

00:12:19,230 --> 00:12:24,480
the underlying runtime environment and

00:12:21,930 --> 00:12:28,290
we can achieve this by using properties

00:12:24,480 --> 00:12:31,100
yeah and so if I go into this particular

00:12:28,290 --> 00:12:34,589
step you see on the left-hand side

00:12:31,100 --> 00:12:37,650
fuller like a tomcat manager URL I'm

00:12:34,589 --> 00:12:40,500
actually abstracting the IP address with

00:12:37,650 --> 00:12:43,860
an environment variable based on that

00:12:40,500 --> 00:12:47,820
environment yeah so dev has a unique IP

00:12:43,860 --> 00:12:50,490
address and URL QA prod sofa and now i

00:12:47,820 --> 00:12:53,280
have a reusable process that can reuse

00:12:50,490 --> 00:12:55,440
over and over again and i just inject

00:12:53,280 --> 00:13:00,720
the unique properties for the

00:12:55,440 --> 00:13:02,820
environment into that process as you can

00:13:00,720 --> 00:13:05,250
see everything is virgin controlled you

00:13:02,820 --> 00:13:10,260
know you need to virgin control all your

00:13:05,250 --> 00:13:12,410
processes because historically your your

00:13:10,260 --> 00:13:14,509
find that you want to run processes

00:13:12,410 --> 00:13:17,839
is that you devised earlier on so

00:13:14,509 --> 00:13:19,220
basically everything every chain should

00:13:17,839 --> 00:13:21,649
be virgin control so you can go

00:13:19,220 --> 00:13:23,569
backwards and forwards on that process

00:13:21,649 --> 00:13:25,759
inject different properties that are

00:13:23,569 --> 00:13:29,029
also based on that also virgin

00:13:25,759 --> 00:13:32,509
controlled as well so what the kind of

00:13:29,029 --> 00:13:37,370
boils down to is that at a high level it

00:13:32,509 --> 00:13:40,699
gives the ability for users to pick and

00:13:37,370 --> 00:13:43,040
choose the processes they want to run be

00:13:40,699 --> 00:13:47,029
able to collect metrics about successful

00:13:43,040 --> 00:13:48,709
and failed processes but essentially

00:13:47,029 --> 00:13:50,779
going to the environments and actually

00:13:48,709 --> 00:13:52,910
be able to pick an environment and

00:13:50,779 --> 00:13:56,689
actually deployed to as well and as you

00:13:52,910 --> 00:14:01,550
see when I chose deployed 51 actually

00:13:56,689 --> 00:14:03,949
push there all the way to 51 on on the

00:14:01,550 --> 00:14:06,470
UAE environment so I use the concept of

00:14:03,949 --> 00:14:09,199
the build pipeline to also to promote

00:14:06,470 --> 00:14:14,720
from from the development environment to

00:14:09,199 --> 00:14:17,829
uat as well also you know in controlled

00:14:14,720 --> 00:14:21,500
environments you don't want to deploy

00:14:17,829 --> 00:14:23,509
directly so you may be staged maybe to

00:14:21,500 --> 00:14:25,910
production unless there's approval

00:14:23,509 --> 00:14:29,569
process as well so you can't I you know

00:14:25,910 --> 00:14:32,209
tie the whole process into you know into

00:14:29,569 --> 00:14:35,149
service now as integration into service

00:14:32,209 --> 00:14:36,860
now is integrations into juror wherever

00:14:35,149 --> 00:14:38,870
you actually put in those change tickets

00:14:36,860 --> 00:14:40,970
in you can actually link into those

00:14:38,870 --> 00:14:43,550
change processes as well or you can

00:14:40,970 --> 00:14:45,800
actually use the approval process that's

00:14:43,550 --> 00:14:48,709
actually built into the workflow so here

00:14:45,800 --> 00:14:51,079
I can approve this deployment to

00:14:48,709 --> 00:14:53,990
production hit ok and in the background

00:14:51,079 --> 00:14:57,680
is actually deploying into the

00:14:53,990 --> 00:14:59,180
production environment so at a high

00:14:57,680 --> 00:15:01,250
level I just want to give you some kind

00:14:59,180 --> 00:15:04,250
of level setting or what a deployment

00:15:01,250 --> 00:15:07,309
automation tool does how it differs from

00:15:04,250 --> 00:15:09,889
from what Jenkins does for deployment

00:15:07,309 --> 00:15:12,319
now I want to talk about some of the the

00:15:09,889 --> 00:15:14,300
integration point share and how it

00:15:12,319 --> 00:15:16,490
integrates with Jenkins because we're

00:15:14,300 --> 00:15:18,709
all here for Jenkins come conference

00:15:16,490 --> 00:15:19,390
will know more about Jenkins so there's

00:15:18,709 --> 00:15:20,890
a

00:15:19,390 --> 00:15:24,550
there's a couple ways that we integrate

00:15:20,890 --> 00:15:27,840
with Jenkins share the the typical use

00:15:24,550 --> 00:15:32,260
case is that so you want to integrate it

00:15:27,840 --> 00:15:33,820
so that when a bill completes and is

00:15:32,260 --> 00:15:36,340
successful that you want to

00:15:33,820 --> 00:15:38,410
automatically deploy that to an

00:15:36,340 --> 00:15:40,570
environment yet so maybe to an

00:15:38,410 --> 00:15:42,310
environment that has less control as a

00:15:40,570 --> 00:15:45,310
development environment is a test

00:15:42,310 --> 00:15:49,480
environment so we have a an integration

00:15:45,310 --> 00:15:52,300
here that allows you to set up a post

00:15:49,480 --> 00:15:56,040
build step so when when the build is

00:15:52,300 --> 00:15:58,120
completed we actually link this change

00:15:56,040 --> 00:15:59,890
so where there's new artifacts and

00:15:58,120 --> 00:16:02,350
actually published these new artifacts

00:15:59,890 --> 00:16:04,420
into the tool and then we trigger a

00:16:02,350 --> 00:16:07,810
deployment process yet so it

00:16:04,420 --> 00:16:10,060
automatically goes into dev for example

00:16:07,810 --> 00:16:11,920
so you know a few simple things that you

00:16:10,060 --> 00:16:13,390
need to configure and this is very

00:16:11,920 --> 00:16:16,750
similar to a lot of plugins out there

00:16:13,390 --> 00:16:18,670
you need to set up set up and specify

00:16:16,750 --> 00:16:21,040
the base artifact directory this is a

00:16:18,670 --> 00:16:23,620
maven job so everything is put into the

00:16:21,040 --> 00:16:25,420
target directory and so everything names

00:16:23,620 --> 00:16:27,790
of the target directory is now pushed

00:16:25,420 --> 00:16:29,680
and published into the tool and then we

00:16:27,790 --> 00:16:32,440
can pick and choose which artifacts that

00:16:29,680 --> 00:16:38,110
we want to deploy I'm going to version

00:16:32,440 --> 00:16:39,910
control based on the build number so I'm

00:16:38,110 --> 00:16:43,140
going to trigger this build I'm going to

00:16:39,910 --> 00:16:47,040
go back to this and i'll show you it

00:16:43,140 --> 00:16:50,640
pushing build 52 and its artifacts into

00:16:47,040 --> 00:16:53,470
the tool itself and we show show you

00:16:50,640 --> 00:16:55,480
this the setup to actually deploying

00:16:53,470 --> 00:17:01,420
those artifacts now the job is building

00:16:55,480 --> 00:17:04,030
so we go back to the bill job also you

00:17:01,420 --> 00:17:05,770
specify the kind of regular expression

00:17:04,030 --> 00:17:08,530
of what artifacts you want to deploy and

00:17:05,770 --> 00:17:12,430
a few other check box as well so you can

00:17:08,530 --> 00:17:14,350
add a status to this build so as you get

00:17:12,430 --> 00:17:17,350
further to production there's less than

00:17:14,350 --> 00:17:18,940
less candidates for those machines so

00:17:17,350 --> 00:17:21,130
obviously if you're doing continuous

00:17:18,940 --> 00:17:23,720
integration you go like transient builds

00:17:21,130 --> 00:17:25,520
you got a lot of builds that you know

00:17:23,720 --> 00:17:27,350
you can deploy to death but when you get

00:17:25,520 --> 00:17:29,419
to QA you don't want to waste the QA

00:17:27,350 --> 00:17:30,980
people's time you want you want builds

00:17:29,419 --> 00:17:33,860
only deployed they have reached a

00:17:30,980 --> 00:17:36,140
particular status you have an example

00:17:33,860 --> 00:17:40,700
past a certain level functional testing

00:17:36,140 --> 00:17:43,549
so you can actually add a status to your

00:17:40,700 --> 00:17:45,350
build artifacts so here I'm gonna add a

00:17:43,549 --> 00:17:48,140
bill states is ready for quality

00:17:45,350 --> 00:17:51,169
assurance so on my chewy environment I

00:17:48,140 --> 00:17:54,110
can only deploy artifacts that have

00:17:51,169 --> 00:17:56,990
passed this process that I'll have the

00:17:54,110 --> 00:17:59,840
status QA ready so that way it filters

00:17:56,990 --> 00:18:03,110
down the list of builds that can be that

00:17:59,840 --> 00:18:05,360
can be deployed to the QA stage

00:18:03,110 --> 00:18:08,059
environment I can also deploy

00:18:05,360 --> 00:18:10,250
automatically as well so once the build

00:18:08,059 --> 00:18:12,559
is complete I can actually trigger a

00:18:10,250 --> 00:18:14,539
deployment process and actually choose

00:18:12,559 --> 00:18:18,980
any environment that I want to deploy to

00:18:14,539 --> 00:18:21,140
as well so what happens is that once the

00:18:18,980 --> 00:18:25,130
the build is complete and it probably is

00:18:21,140 --> 00:18:29,350
still running or will check it's almost

00:18:25,130 --> 00:18:32,990
there what we get is that we actually

00:18:29,350 --> 00:18:35,799
push these artifacts into the tool and

00:18:32,990 --> 00:18:38,360
they become another release that's

00:18:35,799 --> 00:18:41,120
anyone that has access to the tool can

00:18:38,360 --> 00:18:44,059
actually then deploy so we go back to

00:18:41,120 --> 00:18:45,890
our component where we actually go to

00:18:44,059 --> 00:18:49,370
the burgeoning of the component you know

00:18:45,890 --> 00:18:53,120
at the moments 3051 but for drilling 251

00:18:49,370 --> 00:18:55,280
these are the artifacts that's the

00:18:53,120 --> 00:18:57,620
Jenkins build server has published and

00:18:55,280 --> 00:19:00,320
now I can actually choose this

00:18:57,620 --> 00:19:06,440
particular version to actually deployed

00:19:00,320 --> 00:19:08,360
to my various environments so that way

00:19:06,440 --> 00:19:11,000
we got an authority so some people ask

00:19:08,360 --> 00:19:13,130
me why do you do that yeah so you know

00:19:11,000 --> 00:19:14,720
this is a couple use cases a lot of

00:19:13,130 --> 00:19:17,179
people obviously keep the application

00:19:14,720 --> 00:19:19,280
releases an artifact repositories you

00:19:17,179 --> 00:19:21,830
know some people keep them on Jenkins

00:19:19,280 --> 00:19:24,409
but it's probably not a great solution

00:19:21,830 --> 00:19:26,150
and it really depends on how far you

00:19:24,409 --> 00:19:29,330
want to go back so a lot of people want

00:19:26,150 --> 00:19:31,190
to be able to maybe for a for pet

00:19:29,330 --> 00:19:34,429
testing personal purposes actually

00:19:31,190 --> 00:19:34,990
redeploy an older build and so here you

00:19:34,429 --> 00:19:37,300
can

00:19:34,990 --> 00:19:38,980
keep your authoritative fields actually

00:19:37,300 --> 00:19:41,350
within the tool so you can hope go

00:19:38,980 --> 00:19:43,120
backwards and forwards depending on what

00:19:41,350 --> 00:19:46,780
kind of application you want to deploy

00:19:43,120 --> 00:19:49,090
as so as you saw my build 52 is finished

00:19:46,780 --> 00:19:51,640
I've pushed the artifacts in the talk

00:19:49,090 --> 00:19:54,130
you know and when I actually trigger my

00:19:51,640 --> 00:19:56,550
process it will go out and actually push

00:19:54,130 --> 00:19:59,920
this war file this java web application

00:19:56,550 --> 00:20:02,050
through that process i showed you in a

00:19:59,920 --> 00:20:03,730
tomcat container and actually deploy on

00:20:02,050 --> 00:20:08,380
any environment and any environment i

00:20:03,730 --> 00:20:10,150
choose so at a high level we know that

00:20:08,380 --> 00:20:12,910
that's what it does in terms of

00:20:10,150 --> 00:20:16,929
deployment integrating with jenkins you

00:20:12,910 --> 00:20:20,559
know as a post build step also there's

00:20:16,929 --> 00:20:23,740
another use case where that maybe you

00:20:20,559 --> 00:20:26,380
want to involve jenkins as part of the

00:20:23,740 --> 00:20:30,280
deployment process yeah so a use cases

00:20:26,380 --> 00:20:32,200
is that you want to deploy to an

00:20:30,280 --> 00:20:34,960
environment and then you want to trigger

00:20:32,200 --> 00:20:37,780
your test jobs that already reside on on

00:20:34,960 --> 00:20:40,690
Jenkins so in this particular case we

00:20:37,780 --> 00:20:44,260
have a process here where we can

00:20:40,690 --> 00:20:46,990
actually trigger Jenkins builds that are

00:20:44,260 --> 00:20:49,809
distributed on different masters we can

00:20:46,990 --> 00:20:52,840
run parallel builds but the key thing is

00:20:49,809 --> 00:20:55,840
you can component eyes this and actually

00:20:52,840 --> 00:20:57,610
add it to your deployment process so in

00:20:55,840 --> 00:21:00,040
this particular case you know we can

00:20:57,610 --> 00:21:02,380
trigger off a build if the build is

00:21:00,040 --> 00:21:05,200
successful I'm triggering of parallel

00:21:02,380 --> 00:21:07,780
builds on different masters and then if

00:21:05,200 --> 00:21:10,210
the two builds are successful then

00:21:07,780 --> 00:21:13,510
actually trigger off two parallel builds

00:21:10,210 --> 00:21:17,260
to do testings once for executing

00:21:13,510 --> 00:21:19,330
selenium and I want to execute test on a

00:21:17,260 --> 00:21:22,420
robot framework so this way we can

00:21:19,330 --> 00:21:25,330
actually link Jenkins jobs to the

00:21:22,420 --> 00:21:28,150
deployment process kind of reuse some of

00:21:25,330 --> 00:21:29,620
that those jobs that investment at that

00:21:28,150 --> 00:21:33,670
time you spend on creating those jobs

00:21:29,620 --> 00:21:38,950
and actually creating a workflow in the

00:21:33,670 --> 00:21:42,010
process itself now I'll show you this

00:21:38,950 --> 00:21:43,789
working just showed us how this action

00:21:42,010 --> 00:21:47,690
will actually execute in rule

00:21:43,789 --> 00:21:53,200
so if I go back to the application it's

00:21:47,690 --> 00:21:56,149
closes down so in any application

00:21:53,200 --> 00:21:59,389
context we can actually trigger

00:21:56,149 --> 00:22:02,869
different types of processes now one of

00:21:59,389 --> 00:22:06,619
these processes been dis Jenkins multi

00:22:02,869 --> 00:22:10,369
build so basically trick trigger this

00:22:06,619 --> 00:22:12,769
click Next and we can choose a Pacific

00:22:10,369 --> 00:22:17,239
version or the workflow I'm going to

00:22:12,769 --> 00:22:20,019
choose 43 and in the back end is

00:22:17,239 --> 00:22:23,239
actually executing those build jobs and

00:22:20,019 --> 00:22:26,509
hopefully when I minimize this is

00:22:23,239 --> 00:22:34,789
actually triggering the builds in the

00:22:26,509 --> 00:22:39,109
back end so you can see is triggering

00:22:34,789 --> 00:22:41,929
one build on one build server once

00:22:39,109 --> 00:22:45,379
that's complete it will trigger to two

00:22:41,929 --> 00:22:46,970
builds actually one on each server on

00:22:45,379 --> 00:22:50,090
the other side see it's going through

00:22:46,970 --> 00:22:52,909
that workflow that I showed you so once

00:22:50,090 --> 00:22:55,070
that's complete you can see is

00:22:52,909 --> 00:22:57,590
triggering off another build on on this

00:22:55,070 --> 00:23:00,409
particular build server and if i refresh

00:22:57,590 --> 00:23:02,389
this one should be triggering off

00:23:00,409 --> 00:23:04,700
another build and so you will go through

00:23:02,389 --> 00:23:06,409
that sequence and she create that

00:23:04,700 --> 00:23:10,429
workflow so here we trigger in another

00:23:06,409 --> 00:23:12,320
build and what it will do is it will

00:23:10,429 --> 00:23:14,479
wait for these two builds to be

00:23:12,320 --> 00:23:17,509
successful yeah so we actually will

00:23:14,479 --> 00:23:20,239
combine the logic of these builds and if

00:23:17,509 --> 00:23:23,629
only if only boat for successful then

00:23:20,239 --> 00:23:25,849
will trigger the parallel builds for the

00:23:23,629 --> 00:23:27,879
testing on the other to build servers as

00:23:25,849 --> 00:23:27,879
well

00:23:33,480 --> 00:23:41,750
so now we should be almost there to

00:23:38,370 --> 00:23:41,750
trigger the other two builds

00:23:46,470 --> 00:23:52,440
but it's a interesting way of

00:23:49,890 --> 00:23:54,450
incorporating Jenkins build jobs

00:23:52,440 --> 00:23:57,750
actually into your deployment process

00:23:54,450 --> 00:23:59,490
and so you can add build jobs before and

00:23:57,750 --> 00:24:02,940
after the process you can run them in

00:23:59,490 --> 00:24:06,750
parallel you can define logic between

00:24:02,940 --> 00:24:10,380
the various jobs to actually test test

00:24:06,750 --> 00:24:13,320
the workflow so what's that run I'll go

00:24:10,380 --> 00:24:15,390
back into the remaining presentation but

00:24:13,320 --> 00:24:22,190
I gives you an idea of how this

00:24:15,390 --> 00:24:25,230
particular workflow works so also i

00:24:22,190 --> 00:24:28,260
mentioned you want to apply more

00:24:25,230 --> 00:24:30,659
governments around your your process

00:24:28,260 --> 00:24:32,190
your actual deployment pipeline because

00:24:30,659 --> 00:24:34,710
obviously you don't want people to

00:24:32,190 --> 00:24:36,690
deploy straight into uat without testing

00:24:34,710 --> 00:24:38,700
or deployed certainly don't want people

00:24:36,690 --> 00:24:41,190
deploy into production without actually

00:24:38,700 --> 00:24:42,780
testing on environments beforehand so

00:24:41,190 --> 00:24:45,900
one of the things that you can do is

00:24:42,780 --> 00:24:49,799
actually create a pipeline so a girl

00:24:45,900 --> 00:24:54,750
runs pipeline so here what I can define

00:24:49,799 --> 00:24:57,600
is what are the what are the stages that

00:24:54,750 --> 00:25:00,179
an application must go through in the

00:24:57,600 --> 00:25:03,210
life cycle in the pathway to production

00:25:00,179 --> 00:25:07,530
yeah I want to force that that it goes

00:25:03,210 --> 00:25:09,480
through dare you 80 from stage and you

00:25:07,530 --> 00:25:12,020
know as many environments that you want

00:25:09,480 --> 00:25:14,580
you before you get into production yeah

00:25:12,020 --> 00:25:16,409
so here we define what's called a

00:25:14,580 --> 00:25:18,330
pipeline is this is a very simple

00:25:16,409 --> 00:25:20,280
pipeline I've only got free environments

00:25:18,330 --> 00:25:22,650
in hit but basically the pipeline says

00:25:20,280 --> 00:25:24,750
it says here that you know to get to

00:25:22,650 --> 00:25:27,450
production I have to go to dev first you

00:25:24,750 --> 00:25:31,590
a tea and fruit production yet and then

00:25:27,450 --> 00:25:35,870
i can set two attributes the attributes

00:25:31,590 --> 00:25:37,980
me and i won I enforced asst and two

00:25:35,870 --> 00:25:41,130
meaning that it has to go through this

00:25:37,980 --> 00:25:45,179
particular sequence and two I want to be

00:25:41,130 --> 00:25:47,400
able to also promote as as I go through

00:25:45,179 --> 00:25:51,480
it is in violence so as someone deploys

00:25:47,400 --> 00:25:53,730
to uat know if it's successful why not

00:25:51,480 --> 00:25:56,039
push that to stage here and make stage

00:25:53,730 --> 00:25:58,650
ready with that particular application

00:25:56,039 --> 00:26:00,930
so the uat people get no

00:25:58,650 --> 00:26:03,180
yukkuri people get notified and actually

00:26:00,930 --> 00:26:05,640
know that as a build out there ready for

00:26:03,180 --> 00:26:07,470
them to do some kind of testing so we

00:26:05,640 --> 00:26:13,050
have a model hair where we can kind of

00:26:07,470 --> 00:26:14,700
govern the deployment pipeline so we can

00:26:13,050 --> 00:26:17,250
apply that pipeline to any of these

00:26:14,700 --> 00:26:22,170
applications so i give you an example

00:26:17,250 --> 00:26:25,500
here if i go back to my application

00:26:22,170 --> 00:26:28,140
drill into my application go into

00:26:25,500 --> 00:26:29,490
details if i was first to remove this

00:26:28,140 --> 00:26:36,590
pipeline because i have one already

00:26:29,490 --> 00:26:39,180
applied what you find is that

00:26:36,590 --> 00:26:42,150
essentially depending on my role based

00:26:39,180 --> 00:26:44,550
controls i can actually deploy my

00:26:42,150 --> 00:26:46,710
processes directly and deploy it

00:26:44,550 --> 00:26:50,660
directly to any particular environment

00:26:46,710 --> 00:26:53,190
yeah and but by applying a particular

00:26:50,660 --> 00:26:55,800
pipeline what i will do is they actually

00:26:53,190 --> 00:26:57,780
take that ability away here so the only

00:26:55,800 --> 00:27:00,750
environment i can actually deploy to is

00:26:57,780 --> 00:27:03,330
dev and the rest of the process is that

00:27:00,750 --> 00:27:06,570
if it's successful in dev then then i

00:27:03,330 --> 00:27:10,710
can promote it to QA so here I apply a

00:27:06,570 --> 00:27:12,810
particular pipeline this is the pipeline

00:27:10,710 --> 00:27:16,380
and we're going to apply so here I'm

00:27:12,810 --> 00:27:19,560
saying that you must go through all of

00:27:16,380 --> 00:27:22,020
these environments to production now if

00:27:19,560 --> 00:27:24,840
i go to my environments now if i go to

00:27:22,020 --> 00:27:27,210
my UAC using you don't have the ability

00:27:24,840 --> 00:27:28,920
now to actually deploy to that

00:27:27,210 --> 00:27:31,790
environment so I've taken away that

00:27:28,920 --> 00:27:34,710
ability by using a build pipeline

00:27:31,790 --> 00:27:36,560
governments to actually control that so

00:27:34,710 --> 00:27:40,620
the only way I can actually deploy to

00:27:36,560 --> 00:27:46,980
uat is first active deploy to dev and

00:27:40,620 --> 00:27:50,640
then it will promote to to UHC and then

00:27:46,980 --> 00:27:52,710
production so that's a one of the best

00:27:50,640 --> 00:27:55,830
practices that you can adopt you know

00:27:52,710 --> 00:27:59,520
using this technology in combination

00:27:55,830 --> 00:28:02,730
with Jenkins now the other thing that

00:27:59,520 --> 00:28:06,870
you want to do is that you want to be

00:28:02,730 --> 00:28:09,350
able to identify the status of those

00:28:06,870 --> 00:28:11,600
builds so I mentioned to you in

00:28:09,350 --> 00:28:16,370
Lincoln's job there was the ability to

00:28:11,600 --> 00:28:19,640
add a status for those artifacts and so

00:28:16,370 --> 00:28:22,360
if I drill back into my component go

00:28:19,640 --> 00:28:25,610
back into the process to install the

00:28:22,360 --> 00:28:28,190
java web object if you go into my

00:28:25,610 --> 00:28:31,910
versions you see that a certain portion

00:28:28,190 --> 00:28:35,030
of my application binaries that come

00:28:31,910 --> 00:28:37,220
from Jenkins are ready for QA now you

00:28:35,030 --> 00:28:40,730
can say any kind of status you can

00:28:37,220 --> 00:28:43,700
actually put logic initially so you can

00:28:40,730 --> 00:28:45,350
have Anne's learner water keeps popping

00:28:43,700 --> 00:28:47,690
up but you can put ends in hair as well

00:28:45,350 --> 00:28:49,549
so they have different statuses but what

00:28:47,690 --> 00:28:55,520
you can do now is that when you go back

00:28:49,549 --> 00:28:59,830
to your your pipeline you can actually

00:28:55,520 --> 00:28:59,830
say that for this particular environment

00:28:59,860 --> 00:29:08,200
for example let's choose I think I have

00:29:03,679 --> 00:29:11,900
a rule on UHC is that I could cut a gate

00:29:08,200 --> 00:29:14,750
so in this particular case year and out

00:29:11,900 --> 00:29:16,610
back to you know the best practice know

00:29:14,750 --> 00:29:19,539
in the use cases that as you get further

00:29:16,610 --> 00:29:22,190
to production now there's actually less

00:29:19,539 --> 00:29:24,470
releases that are candidates for that

00:29:22,190 --> 00:29:26,750
for those deployments now you can

00:29:24,470 --> 00:29:29,659
actually in this particular case when

00:29:26,750 --> 00:29:32,270
you choose a build an application

00:29:29,659 --> 00:29:34,669
release for QA you actually will only

00:29:32,270 --> 00:29:37,820
get the ones are labeled with QA status

00:29:34,669 --> 00:29:40,010
and that status originated from from the

00:29:37,820 --> 00:29:42,020
Jenkins build so you can have obviously

00:29:40,010 --> 00:29:44,539
different types of builds you know you

00:29:42,020 --> 00:29:47,090
could have CI builds over say it's ready

00:29:44,539 --> 00:29:50,240
for you know development testing maybe

00:29:47,090 --> 00:29:52,700
you have longer running tests and then

00:29:50,240 --> 00:29:54,830
it would then create a stamp status for

00:29:52,700 --> 00:29:56,720
ready for you a tease testing so it is

00:29:54,830 --> 00:29:59,059
different use cases that you can apply

00:29:56,720 --> 00:30:01,850
this but what a key thing is that if it

00:29:59,059 --> 00:30:03,380
will filter the Mount of builds and the

00:30:01,850 --> 00:30:05,409
amount available builds that are

00:30:03,380 --> 00:30:09,520
available for deployment to those

00:30:05,409 --> 00:30:09,520
upstream environments

00:30:10,790 --> 00:30:20,000
so so let's say I've got about 15

00:30:18,290 --> 00:30:21,800
minutes ten minutes left so i'm going to

00:30:20,000 --> 00:30:26,810
do football mess and i'm now kind of

00:30:21,800 --> 00:30:30,680
open up for question and answers yeah so

00:30:26,810 --> 00:30:33,920
if i go back to my application out some

00:30:30,680 --> 00:30:35,930
other features that you know other

00:30:33,920 --> 00:30:38,270
components of both jenkins and

00:30:35,930 --> 00:30:41,960
deployment automation that are useful

00:30:38,270 --> 00:30:44,720
for the enterprise there's a concept of

00:30:41,960 --> 00:30:48,320
snapshots jam you know in there in there

00:30:44,720 --> 00:30:50,390
and it's goes back to my slider says no

00:30:48,320 --> 00:30:54,020
enterprise deployments are complicated

00:30:50,390 --> 00:30:58,010
yet we are not simply deploying just war

00:30:54,020 --> 00:31:00,380
file as ma e be executing sequel scripts

00:30:58,010 --> 00:31:02,960
against am i single database you know we

00:31:00,380 --> 00:31:06,670
involves things like maybe making

00:31:02,960 --> 00:31:10,460
changes to a low balance deploying is

00:31:06,670 --> 00:31:12,020
changing property files maybe model you

00:31:10,460 --> 00:31:14,540
know maybe there's multiple databases

00:31:12,020 --> 00:31:18,140
involved so in real life you know you

00:31:14,540 --> 00:31:20,210
have lots of components that are that

00:31:18,140 --> 00:31:22,880
are at different versions that have to

00:31:20,210 --> 00:31:24,520
be deployed at different times so what

00:31:22,880 --> 00:31:27,860
you can do is you can create a snapshot

00:31:24,520 --> 00:31:30,350
so a snapshot represents that release

00:31:27,860 --> 00:31:32,980
bundle that recent risk bundle meaning

00:31:30,350 --> 00:31:35,870
that you have a logical repetative

00:31:32,980 --> 00:31:38,210
representation of an application with

00:31:35,870 --> 00:31:40,970
multiple components at different

00:31:38,210 --> 00:31:43,130
versions so maybe you have seek some

00:31:40,970 --> 00:31:45,230
sequel scripts that you version control

00:31:43,130 --> 00:31:46,880
you know you can deploy those at

00:31:45,230 --> 00:31:49,400
different version numbers and different

00:31:46,880 --> 00:31:52,010
environments you have different objects

00:31:49,400 --> 00:31:54,950
for example a war files air files

00:31:52,010 --> 00:31:57,680
property files again they could be at

00:31:54,950 --> 00:31:59,300
different versions but the number in a

00:31:57,680 --> 00:32:01,070
nutshell what it is that when you do an

00:31:59,300 --> 00:32:04,700
enterprise that point there could be

00:32:01,070 --> 00:32:06,710
five six seven components different

00:32:04,700 --> 00:32:09,140
different versions of components that

00:32:06,710 --> 00:32:11,870
have to deploy so what you can do is is

00:32:09,140 --> 00:32:14,150
you create a snapshot so in this

00:32:11,870 --> 00:32:17,510
particular case what you do is you

00:32:14,150 --> 00:32:21,710
create a snapshot that represents all

00:32:17,510 --> 00:32:25,140
those different components

00:32:21,710 --> 00:32:29,760
at different versions so I'm just going

00:32:25,140 --> 00:32:31,920
to give you an example of this and

00:32:29,760 --> 00:32:34,200
basically here I can actually with this

00:32:31,920 --> 00:32:38,250
particular snapshot I can then pick and

00:32:34,200 --> 00:32:40,940
choose what kind of configuration that's

00:32:38,250 --> 00:32:44,280
not shot will have I can choose the

00:32:40,940 --> 00:32:47,340
particular versions of the components so

00:32:44,280 --> 00:32:53,100
here I can choose for example it's going

00:32:47,340 --> 00:32:55,290
to have 54 version 54 of the war file or

00:32:53,100 --> 00:32:59,100
the air file or this property files yeah

00:32:55,290 --> 00:33:01,380
and then we want to give it a status as

00:32:59,100 --> 00:33:04,940
well say this is ready for QA so

00:33:01,380 --> 00:33:07,590
essentially when QA is ready to actually

00:33:04,940 --> 00:33:10,050
deploy the next snack shop I actually

00:33:07,590 --> 00:33:12,360
see this is identified as think that's

00:33:10,050 --> 00:33:14,070
available for them to actually put on

00:33:12,360 --> 00:33:18,480
their environment to actually test as

00:33:14,070 --> 00:33:21,330
well in terms of a configuration you can

00:33:18,480 --> 00:33:23,340
change things like the component virgin

00:33:21,330 --> 00:33:25,320
yeah so you can change the version

00:33:23,340 --> 00:33:27,240
numbers you can actually change the

00:33:25,320 --> 00:33:29,880
process that they actually use the

00:33:27,240 --> 00:33:32,010
version of the process they use and also

00:33:29,880 --> 00:33:34,200
you can change the environments they can

00:33:32,010 --> 00:33:37,650
actually be employed to as well so all

00:33:34,200 --> 00:33:40,650
of these things are attributes you know

00:33:37,650 --> 00:33:42,660
due to the complexity of enterprise

00:33:40,650 --> 00:33:46,560
deployment that you want to be able to

00:33:42,660 --> 00:33:48,450
now know about to have the ability to do

00:33:46,560 --> 00:33:51,810
now be able to create release bundles

00:33:48,450 --> 00:33:54,120
where you have released components that

00:33:51,810 --> 00:33:58,650
have unique attributes but at the same

00:33:54,120 --> 00:34:00,450
time be able to reuse no processes that

00:33:58,650 --> 00:34:03,720
you've defined for may be installing a

00:34:00,450 --> 00:34:07,910
tomcat may be executing a sequel files

00:34:03,720 --> 00:34:07,910
against the Oracle database and so forth

00:34:08,060 --> 00:34:15,960
so so to kind of wrap this up and I'll

00:34:13,800 --> 00:34:19,590
not just fire off a build and show you a

00:34:15,960 --> 00:34:22,020
deploy show that st. rule happening

00:34:19,590 --> 00:34:24,390
underneath of the covers so here I'm

00:34:22,020 --> 00:34:28,230
going to go to the environment I'm going

00:34:24,390 --> 00:34:31,460
to run this particular process deploy

00:34:28,230 --> 00:34:31,460
this particular war file

00:34:31,590 --> 00:34:38,320
Charlie again oh by the way you know

00:34:36,100 --> 00:34:40,990
everything comes show you today you can

00:34:38,320 --> 00:34:44,890
actually free available this is a

00:34:40,990 --> 00:34:46,020
community software so if you want to you

00:34:44,890 --> 00:34:48,640
want me to give you the download URL

00:34:46,020 --> 00:34:50,560
just kind of see me afterwards and I can

00:34:48,640 --> 00:34:53,620
I can give that to you so everything I

00:34:50,560 --> 00:34:57,010
showed you today's is a it's based on

00:34:53,620 --> 00:34:59,230
the community edition so here I can

00:34:57,010 --> 00:35:02,740
choose a particular version oh god now

00:34:59,230 --> 00:35:05,290
54 boom off it goes and basically in the

00:35:02,740 --> 00:35:08,410
background I can see this running I go

00:35:05,290 --> 00:35:10,570
into my deployment history and basically

00:35:08,410 --> 00:35:12,130
I can see the history of all the

00:35:10,570 --> 00:35:14,350
deployments to all the different

00:35:12,130 --> 00:35:17,310
environments have taken place and you

00:35:14,350 --> 00:35:20,170
can see I've deployed to dead UHC

00:35:17,310 --> 00:35:22,630
production you can see the process i

00:35:20,170 --> 00:35:25,390
invoked the environment is installed on

00:35:22,630 --> 00:35:28,750
executed on the time it was scheduled

00:35:25,390 --> 00:35:31,360
who who executed it and if it failed if

00:35:28,750 --> 00:35:33,550
you're successful and you can see I got

00:35:31,360 --> 00:35:36,490
some failures here on on my UHC

00:35:33,550 --> 00:35:38,590
environment you notice that some of

00:35:36,490 --> 00:35:40,540
these are waiting for approval and I

00:35:38,590 --> 00:35:42,550
mentioned to you you can actually apply

00:35:40,540 --> 00:35:46,330
approval process if you want to gate

00:35:42,550 --> 00:35:48,610
that process to stage your production so

00:35:46,330 --> 00:35:50,560
if I was to go up here I could then

00:35:48,610 --> 00:35:53,260
trigger the approval process and

00:35:50,560 --> 00:35:55,420
actually deploy in that particular that

00:35:53,260 --> 00:35:57,850
built but to show you what it's like

00:35:55,420 --> 00:36:00,100
doing under covers and I've had a little

00:35:57,850 --> 00:36:02,020
bit of a problem with earlier on so

00:36:00,100 --> 00:36:04,270
hopefully this will work what I'm

00:36:02,020 --> 00:36:07,780
showing you is very new this actually is

00:36:04,270 --> 00:36:11,290
not released until July to 15th so this

00:36:07,780 --> 00:36:13,480
is a kind of pre GA version but so as

00:36:11,290 --> 00:36:16,000
you can see that works well I started

00:36:13,480 --> 00:36:17,830
out with with the install of the java

00:36:16,000 --> 00:36:19,900
web application and tomcat container

00:36:17,830 --> 00:36:23,410
these are all the steps they went

00:36:19,900 --> 00:36:25,960
through to actually deploy you know the

00:36:23,410 --> 00:36:28,750
key thing is you know simplification you

00:36:25,960 --> 00:36:31,510
know you know a lot of times it's

00:36:28,750 --> 00:36:33,820
difficult actually find the right log

00:36:31,510 --> 00:36:36,160
and the right part of the log takes you

00:36:33,820 --> 00:36:37,540
look at that particular exception yet so

00:36:36,160 --> 00:36:40,030
in this particular case you can drill

00:36:37,540 --> 00:36:42,340
into it that failure is actually see

00:36:40,030 --> 00:36:45,090
what actually went on under the covers

00:36:42,340 --> 00:36:48,190
and there was some exception however

00:36:45,090 --> 00:36:51,490
deploying but I didn't have to drill for

00:36:48,190 --> 00:36:55,480
logs you know I identified a problem by

00:36:51,490 --> 00:36:58,060
simply clicking on that so I have about

00:36:55,480 --> 00:37:02,260
five more minutes you know it was a

00:36:58,060 --> 00:37:04,030
quick whirlwind presentation or you know

00:37:02,260 --> 00:37:06,880
the integration between a deployment

00:37:04,030 --> 00:37:09,820
automation tool and Jenkins shown you

00:37:06,880 --> 00:37:11,500
the two integrations that we have there

00:37:09,820 --> 00:37:15,490
are open it for any kind of questions

00:37:11,500 --> 00:37:18,820
and answers QA yeah we have a question

00:37:15,490 --> 00:37:21,490
over there so I have a question oh

00:37:18,820 --> 00:37:23,200
absolutely when you think about deploy

00:37:21,490 --> 00:37:25,030
web frameworks like share for puppet

00:37:23,200 --> 00:37:26,740
earth yeah absolutely that's a Greek

00:37:25,030 --> 00:37:28,480
related like a lot of times we've done

00:37:26,740 --> 00:37:29,830
Jenkins it'll trigger shaft to do stuff

00:37:28,480 --> 00:37:32,560
and whatnot what's the relationship

00:37:29,830 --> 00:37:34,300
between yes so this versus you know so I

00:37:32,560 --> 00:37:37,780
get that ask that question a lot yeah

00:37:34,300 --> 00:37:41,170
and quite frankly the answer is the

00:37:37,780 --> 00:37:43,600
lines of blood right and because put

00:37:41,170 --> 00:37:45,970
tools eye-popping chef chef there the

00:37:43,600 --> 00:37:48,700
main problem domain of China resolve was

00:37:45,970 --> 00:37:51,430
system configuration management actually

00:37:48,700 --> 00:37:54,220
converging those systems to a known good

00:37:51,430 --> 00:37:55,570
point yet and I use the word convergence

00:37:54,220 --> 00:37:58,030
because that's what they do they can

00:37:55,570 --> 00:38:01,210
converge the system to a known state

00:37:58,030 --> 00:38:03,430
based on a manifest based on a recipe so

00:38:01,210 --> 00:38:06,020
that's the main problem domain that they

00:38:03,430 --> 00:38:08,980
tackled but obviously a lot of the

00:38:06,020 --> 00:38:11,090
are now saying they can do release

00:38:08,980 --> 00:38:14,000
deployment and automation that kind of

00:38:11,090 --> 00:38:16,700
stuff so the main difference i see is

00:38:14,000 --> 00:38:19,340
tho those tools are still excellent at

00:38:16,700 --> 00:38:21,560
system configuration management getting

00:38:19,340 --> 00:38:25,100
those system systems in a consistent

00:38:21,560 --> 00:38:27,500
state into a known state and then using

00:38:25,100 --> 00:38:29,410
a tool like release automation the

00:38:27,500 --> 00:38:32,750
deployment automation then to actually

00:38:29,410 --> 00:38:35,360
then to actually do those deployments of

00:38:32,750 --> 00:38:37,910
those applications because behind the

00:38:35,360 --> 00:38:40,310
scenes yeah there can be some real

00:38:37,910 --> 00:38:42,080
complicated application deployment share

00:38:40,310 --> 00:38:44,210
you know let's go back back to

00:38:42,080 --> 00:38:45,890
enterprise the cleanser so most of us

00:38:44,210 --> 00:38:47,960
you know if you've done application

00:38:45,890 --> 00:38:49,760
Enterprise open the application to punch

00:38:47,960 --> 00:38:52,070
you know that there's clusters of

00:38:49,760 --> 00:38:53,360
systems behind it it's not typically one

00:38:52,070 --> 00:38:55,340
system that you need against a

00:38:53,360 --> 00:38:57,800
particular state is clusters assistance

00:38:55,340 --> 00:38:59,600
systems that you have to install the

00:38:57,800 --> 00:39:02,090
application may be multiple times on

00:38:59,600 --> 00:39:04,640
times on you might have to adjust the

00:39:02,090 --> 00:39:07,400
load balancer when you do that and so

00:39:04,640 --> 00:39:11,000
there's more complicated deployment

00:39:07,400 --> 00:39:13,040
scenarios that know quite frankly you

00:39:11,000 --> 00:39:14,930
know maybe a puppet shift aren't that

00:39:13,040 --> 00:39:16,970
great at doing here and that's what I

00:39:14,930 --> 00:39:20,560
see the difference as may hopefully

00:39:16,970 --> 00:39:25,340
that's answered your question welcome I

00:39:20,560 --> 00:39:27,320
was noticing that you for that for your

00:39:25,340 --> 00:39:29,210
app here that you basically cut out the

00:39:27,320 --> 00:39:31,160
Nexus artifact repository and disorder

00:39:29,210 --> 00:39:32,600
go straight to the target yeah and grab

00:39:31,160 --> 00:39:34,790
that is certain thing in the works to

00:39:32,600 --> 00:39:37,280
actually you know grab that from the

00:39:34,790 --> 00:39:40,360
next artifact yeah yeah absolutely yeah

00:39:37,280 --> 00:39:43,310
and in a follow-up uh sure that would be

00:39:40,360 --> 00:39:45,590
with this ever support you know non java

00:39:43,310 --> 00:39:47,330
applications like no jazz or angular or

00:39:45,590 --> 00:39:50,420
porch yeah use NPM that's a great

00:39:47,330 --> 00:39:52,520
question repositories yeah so let's

00:39:50,420 --> 00:39:55,150
start with the first question yeah I

00:39:52,520 --> 00:39:57,920
didn't show you it is but obviously

00:39:55,150 --> 00:40:00,200
artifacts are stored and laws in place

00:39:57,920 --> 00:40:02,570
in know if you're if you're

00:40:00,200 --> 00:40:04,160
undisciplined you're storing your

00:40:02,570 --> 00:40:07,700
artifacts unfortunately on a file system

00:40:04,160 --> 00:40:09,980
you know version control Bob's de i

00:40:07,700 --> 00:40:10,870
showed you jenkins but the most common

00:40:09,980 --> 00:40:12,550
use case

00:40:10,870 --> 00:40:17,980
you're stalling on an artifact

00:40:12,550 --> 00:40:20,350
repository Nexus artifactory archivio if

00:40:17,980 --> 00:40:24,100
anyone still using that and basically we

00:40:20,350 --> 00:40:26,680
have a generic adapter that allows you

00:40:24,100 --> 00:40:29,500
to basically point to your repository

00:40:26,680 --> 00:40:32,410
yeah snapshots your releases basically

00:40:29,500 --> 00:40:34,570
giving your group ID your artifact ID

00:40:32,410 --> 00:40:36,370
but as soon as something gets pushed

00:40:34,570 --> 00:40:38,740
through your build job into your

00:40:36,370 --> 00:40:40,710
artifact repository we know it's there

00:40:38,740 --> 00:40:44,170
we put we set up holding interview

00:40:40,710 --> 00:40:46,510
interval and so that once it's there we

00:40:44,170 --> 00:40:48,790
actually know exists and it becomes

00:40:46,510 --> 00:40:52,690
another revision that you can deploy

00:40:48,790 --> 00:40:56,460
from so we support that now in terms of

00:40:52,690 --> 00:41:01,060
supporting lots of different technology

00:40:56,460 --> 00:41:02,800
yes now the key thing with application

00:41:01,060 --> 00:41:05,680
and it's actually the hard thing about

00:41:02,800 --> 00:41:08,590
application deployment is the ability to

00:41:05,680 --> 00:41:12,400
support lots of different architecture

00:41:08,590 --> 00:41:15,840
type share different technologies that

00:41:12,400 --> 00:41:18,970
are part of the deployment process so

00:41:15,840 --> 00:41:20,650
you know you see on the left hand side

00:41:18,970 --> 00:41:23,680
I've got all different types of

00:41:20,650 --> 00:41:26,350
technologies that I support yeah so you

00:41:23,680 --> 00:41:29,140
know in a Java world it's not simply one

00:41:26,350 --> 00:41:31,420
container one technology you got you

00:41:29,140 --> 00:41:34,510
know glass officially of anyone use it

00:41:31,420 --> 00:41:36,100
jboss tomcat weblogic plus many more as

00:41:34,510 --> 00:41:38,080
well you know you've got you've got

00:41:36,100 --> 00:41:41,080
different data database technologies as

00:41:38,080 --> 00:41:44,010
well also you might want to provision a

00:41:41,080 --> 00:41:47,770
system here out in the cloud amazon ec2

00:41:44,010 --> 00:41:50,320
you know as you're also you might want

00:41:47,770 --> 00:41:53,230
to instrument a quick test pro

00:41:50,320 --> 00:41:56,610
functional testing selenium those kind

00:41:53,230 --> 00:41:59,170
of things and also back to the different

00:41:56,610 --> 00:42:02,110
provision technologies you might want a

00:41:59,170 --> 00:42:05,230
provision of VMware machine VM a vm

00:42:02,110 --> 00:42:07,390
sensor etc so there's lots of

00:42:05,230 --> 00:42:11,200
technologies that are part of the

00:42:07,390 --> 00:42:12,750
end-to-end provisioning cycle yeah the

00:42:11,200 --> 00:42:14,650
unfortunate thing there's always

00:42:12,750 --> 00:42:16,960
something that someone's you

00:42:14,650 --> 00:42:18,340
that's not supported so one of the

00:42:16,960 --> 00:42:21,130
things that we're trying to do is make

00:42:18,340 --> 00:42:22,990
that the plugins more easier to develop

00:42:21,130 --> 00:42:25,540
they're all written in groovy we

00:42:22,990 --> 00:42:27,520
standardized and groovy typically

00:42:25,540 --> 00:42:29,500
they're very easy to develop and

00:42:27,520 --> 00:42:33,220
basically all of these integrations yet

00:42:29,500 --> 00:42:35,620
they're not rewriting you know the

00:42:33,220 --> 00:42:37,480
integration stuff is using the SDKs that

00:42:35,620 --> 00:42:39,330
already come with that particular tengen

00:42:37,480 --> 00:42:41,860
technology example that Amazon ec2

00:42:39,330 --> 00:42:44,350
integration all it is using is the

00:42:41,860 --> 00:42:46,300
Amazon SDK under the covers and I've set

00:42:44,350 --> 00:42:49,990
some automation steps that executes a

00:42:46,300 --> 00:42:53,290
certain you know web services to to

00:42:49,990 --> 00:42:55,570
amazon so hopefully i'll answer your

00:42:53,290 --> 00:42:57,280
question yes so we try our best to

00:42:55,570 --> 00:43:00,190
support as many technology as possible

00:42:57,280 --> 00:43:02,650
but obviously some slip through I think

00:43:00,190 --> 00:43:06,340
we that's end of the time right okay so

00:43:02,650 --> 00:43:08,530
every one last question oak so sorry

00:43:06,340 --> 00:43:13,000
there you go through I just wanted to

00:43:08,530 --> 00:43:16,090
understand two things the role based

00:43:13,000 --> 00:43:18,790
access that is provided by FDA yeah is

00:43:16,090 --> 00:43:21,820
it L that kind of an integration that is

00:43:18,790 --> 00:43:25,810
available to provide this yeah that's

00:43:21,820 --> 00:43:28,620
one yeah the second thing is on how the

00:43:25,810 --> 00:43:31,660
test data is managed and I was there a

00:43:28,620 --> 00:43:34,810
testator yeah we rotate I want to fly

00:43:31,660 --> 00:43:36,220
okay sure I can answer first of all I

00:43:34,810 --> 00:43:39,130
could ask you the first two questions

00:43:36,220 --> 00:43:40,960
there yeah everything has to be very

00:43:39,130 --> 00:43:44,650
good actor director all that so that's

00:43:40,960 --> 00:43:46,090
what it does the second question well

00:43:44,650 --> 00:43:47,860
based control everything I showed you

00:43:46,090 --> 00:43:50,560
today role-based controls at every

00:43:47,860 --> 00:43:52,330
single level year super we use cases

00:43:50,560 --> 00:43:54,289
they add to the sport you know you've

00:43:52,330 --> 00:43:57,859
got a set of individuals

00:43:54,289 --> 00:43:59,959
anyway to uat or state yet we can

00:43:57,859 --> 00:44:02,449
support that 40 based control you might

00:43:59,959 --> 00:44:03,829
have a component designer you can set

00:44:02,449 --> 00:44:05,869
role based controls so they can only

00:44:03,829 --> 00:44:07,579
modify the work so yes there's a

00:44:05,869 --> 00:44:10,789
role-based control so we can be set

00:44:07,579 --> 00:44:12,939
every different level yeah well thank

00:44:10,789 --> 00:44:12,939
you

00:44:23,130 --> 00:44:25,190

YouTube URL: https://www.youtube.com/watch?v=_MCiIwc0pbg


