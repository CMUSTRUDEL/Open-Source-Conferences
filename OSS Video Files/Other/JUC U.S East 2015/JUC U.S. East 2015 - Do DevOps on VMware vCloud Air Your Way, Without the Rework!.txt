Title: JUC U.S. East 2015 - Do DevOps on VMware vCloud Air Your Way, Without the Rework!
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By:  Ashok Aletty and Bob Webster, VMware
 
vCloud Air is the ultimate destination for development and testing in the cloud. Many organizations are implementing DevOps initiatives to increase development throughout and shorten product delivery timeframes. The combination of vSphere and vCloud Air provides you with the ability to deploy applications on premise, in the cloud or in hybrid environments with no changes, thanks to the underlying vSphere platform. In this session, we will present how the DevOps team can use Jenkins, VMware Code Stream and other existing tools they love to implement hybrid continuous integration and continuous delivery pipeline architectures.
Captions: 
	00:00:15,130 --> 00:00:22,029
it's a good morning my name is Ashok a

00:00:18,850 --> 00:00:26,020
lady and I'm a solution architect in the

00:00:22,029 --> 00:00:27,849
VMware vCloud air team I don't know how

00:00:26,020 --> 00:00:29,800
many of you have heard about the vCloud

00:00:27,849 --> 00:00:33,640
air it's it's a public cloud offering

00:00:29,800 --> 00:00:35,500
from VMware and essentially will be so

00:00:33,640 --> 00:00:37,030
along with me I have my colleague here

00:00:35,500 --> 00:00:39,610
Sanjay I mean who is also a solution

00:00:37,030 --> 00:00:43,989
architect in the same team so the topic

00:00:39,610 --> 00:00:45,550
today is if you have implemented DevOps

00:00:43,989 --> 00:00:48,760
in a continuous integration or

00:00:45,550 --> 00:00:50,260
continuous delivery on premise on VMware

00:00:48,760 --> 00:00:53,350
technology running within your data

00:00:50,260 --> 00:00:56,230
center within your enterprise so

00:00:53,350 --> 00:00:58,930
essentially now you can use on demand

00:00:56,230 --> 00:01:01,270
resources in a public cloud and how

00:00:58,930 --> 00:01:04,930
these fungible resources and essentially

00:01:01,270 --> 00:01:07,000
have implement DevOps or move some of

00:01:04,930 --> 00:01:08,829
the workloads into the cloud without

00:01:07,000 --> 00:01:10,479
changing any of the processes without

00:01:08,829 --> 00:01:12,970
you know without doing any migration

00:01:10,479 --> 00:01:14,290
effort it's pretty straightforward so

00:01:12,970 --> 00:01:18,369
essentially you can take your workloads

00:01:14,290 --> 00:01:20,469
from on-prem to the cloud and and use

00:01:18,369 --> 00:01:22,810
some of the resources you know on demand

00:01:20,469 --> 00:01:28,840
and then have it in a pay-as-you-go

00:01:22,810 --> 00:01:31,889
model so from a agenda perspective so

00:01:28,840 --> 00:01:34,899
we'll be covering a brief overview of

00:01:31,889 --> 00:01:37,090
the cloud air and then we'll cover what

00:01:34,899 --> 00:01:40,149
is what we call as hybrid DevOps you

00:01:37,090 --> 00:01:42,880
know this is essentially how you can not

00:01:40,149 --> 00:01:45,729
only you know do your DevOps processors

00:01:42,880 --> 00:01:48,549
implement them in on you know on premise

00:01:45,729 --> 00:01:50,469
but also you say you know move some of

00:01:48,549 --> 00:01:53,079
the workloads into in the cloud and

00:01:50,469 --> 00:01:55,270
essentially have this hybrid deployment

00:01:53,079 --> 00:01:57,670
with you know you're using resources

00:01:55,270 --> 00:01:59,649
both on-premise and cloud and as needed

00:01:57,670 --> 00:02:01,959
basis which is which which we call as

00:01:59,649 --> 00:02:03,639
hybrid DevOps and then finally we'll

00:02:01,959 --> 00:02:06,279
cover some of the services that's coming

00:02:03,639 --> 00:02:08,490
will be available in the vCloud air in

00:02:06,279 --> 00:02:11,290
the in our public cloud offering

00:02:08,490 --> 00:02:13,709
starting this month and then some of the

00:02:11,290 --> 00:02:18,190
roadmap items for the rest of the year

00:02:13,709 --> 00:02:20,560
so just more of a brief show fan how

00:02:18,190 --> 00:02:25,030
many of your VMware customers how many

00:02:20,560 --> 00:02:29,040
of you use VMware technology okay how

00:02:25,030 --> 00:02:29,040
many of you heard about vCloud air

00:02:29,190 --> 00:02:36,190
okay some some of you so I think it will

00:02:33,910 --> 00:02:40,860
probably help with so this brief

00:02:36,190 --> 00:02:44,500
interval health so as I said vm support

00:02:40,860 --> 00:02:47,160
about a year and a half a vmware

00:02:44,500 --> 00:02:50,680
launched the public cloud service it's

00:02:47,160 --> 00:02:54,130
you know it's in a marketed as it will

00:02:50,680 --> 00:02:56,709
be cloud air so this is a public cloud

00:02:54,130 --> 00:02:59,500
service this is owned and operated by

00:02:56,709 --> 00:03:02,920
vmware so essentially if you have been

00:02:59,500 --> 00:03:04,480
using vmware technology on-premise what

00:03:02,920 --> 00:03:08,170
we have done is we have taken the same

00:03:04,480 --> 00:03:10,270
technology vSphere and essentially use

00:03:08,170 --> 00:03:13,000
that technology to building the cloud

00:03:10,270 --> 00:03:15,310
offering and what is the advantage that

00:03:13,000 --> 00:03:17,739
you have so any of the workloads that

00:03:15,310 --> 00:03:20,590
you have today running on premise on

00:03:17,739 --> 00:03:23,410
vsphere you can take those workloads and

00:03:20,590 --> 00:03:25,930
move it migrate them into the cloud and

00:03:23,410 --> 00:03:28,030
in idle start no changes required no

00:03:25,930 --> 00:03:31,120
migration required so this is the value

00:03:28,030 --> 00:03:34,630
proposition so essentially if you have

00:03:31,120 --> 00:03:36,640
you have need for resources data center

00:03:34,630 --> 00:03:39,280
and you're out of out of capacity in

00:03:36,640 --> 00:03:42,220
your IT system sort of capacity within

00:03:39,280 --> 00:03:45,730
your data center and you need resources

00:03:42,220 --> 00:03:47,560
quickly you know you can go to this into

00:03:45,730 --> 00:03:49,450
the clouds in the cloud service go sign

00:03:47,560 --> 00:03:52,780
up for an account you know and you get

00:03:49,450 --> 00:03:55,540
there and an allotment of resources of

00:03:52,780 --> 00:03:58,180
compute storage networking and start

00:03:55,540 --> 00:03:59,830
migrating your workloads or moon your

00:03:58,180 --> 00:04:02,200
workloads into the cloud and start using

00:03:59,830 --> 00:04:04,180
them and then only pay for this for the

00:04:02,200 --> 00:04:06,400
resources and for the duration of the

00:04:04,180 --> 00:04:08,560
time that you use those resources for so

00:04:06,400 --> 00:04:10,510
you get this fungible resources

00:04:08,560 --> 00:04:12,940
essentially the combination of on prem

00:04:10,510 --> 00:04:15,610
and on cloud and you can start using

00:04:12,940 --> 00:04:19,810
this resources as needed essentially

00:04:15,610 --> 00:04:23,200
what you can do is use the vCloud air as

00:04:19,810 --> 00:04:25,510
an extension of your data center and you

00:04:23,200 --> 00:04:28,060
can extend not just the the computer and

00:04:25,510 --> 00:04:30,550
the storage resources but also extend

00:04:28,060 --> 00:04:31,810
your data center network into a cloud

00:04:30,550 --> 00:04:34,229
and i will show you how we know how that

00:04:31,810 --> 00:04:36,400
can be easily done and the other

00:04:34,229 --> 00:04:39,400
advantage you have it is common

00:04:36,400 --> 00:04:41,630
management just because now we are using

00:04:39,400 --> 00:04:43,580
a cloud resource

00:04:41,630 --> 00:04:46,040
you don't have to log into a cloud

00:04:43,580 --> 00:04:47,570
portal and start using it so we have

00:04:46,040 --> 00:04:49,400
something called the vCloud connector

00:04:47,570 --> 00:04:52,310
it's a plug-in into your into your

00:04:49,400 --> 00:04:55,430
vSphere product so once you install the

00:04:52,310 --> 00:04:58,490
plug-in your cloud resources show up on

00:04:55,430 --> 00:05:00,020
your in a V center which is which is a

00:04:58,490 --> 00:05:01,760
management portal for managing your

00:05:00,020 --> 00:05:04,490
on-premise v's you know vSphere

00:05:01,760 --> 00:05:06,470
deployments so from a administrator

00:05:04,490 --> 00:05:08,570
point of view you have now a pool of

00:05:06,470 --> 00:05:09,950
resources that are on Prem and in the

00:05:08,570 --> 00:05:11,750
cloud but from a you know from a

00:05:09,950 --> 00:05:13,700
management perspective they all you know

00:05:11,750 --> 00:05:15,800
you all have access to it from a single

00:05:13,700 --> 00:05:17,600
console so you're not forced to go to

00:05:15,800 --> 00:05:18,980
the cloud and then a cloud portal and

00:05:17,600 --> 00:05:20,600
start using it so essentially you have a

00:05:18,980 --> 00:05:22,760
single pane of glass to manage the whole

00:05:20,600 --> 00:05:26,390
thing and then you have in a single

00:05:22,760 --> 00:05:29,060
company to call and get support call if

00:05:26,390 --> 00:05:30,680
you have any issues with on-prem vmail

00:05:29,060 --> 00:05:32,660
products of the cloud products so you

00:05:30,680 --> 00:05:38,750
essentially have you know 11 company

00:05:32,660 --> 00:05:40,580
backing it up and the flexibility i said

00:05:38,750 --> 00:05:43,420
was a key value proposition if you are

00:05:40,580 --> 00:05:47,000
an existing vmware customer using

00:05:43,420 --> 00:05:49,550
vSphere on-premise and you have built a

00:05:47,000 --> 00:05:50,630
lot of templates these are gold images

00:05:49,550 --> 00:05:53,300
for your applicant mission-critical

00:05:50,630 --> 00:05:55,130
applications or for testing or develop

00:05:53,300 --> 00:05:57,800
enterprise you know for for any of your

00:05:55,130 --> 00:06:01,400
workloads and you have put them in your

00:05:57,800 --> 00:06:03,610
vsphere catalog now these same catalog

00:06:01,400 --> 00:06:05,990
this gold templates could be now

00:06:03,610 --> 00:06:07,250
available in the in the cloud and you

00:06:05,990 --> 00:06:09,560
can start deploying them in the cloud

00:06:07,250 --> 00:06:11,570
and you start using them as I said there

00:06:09,560 --> 00:06:13,130
is no migration effort you want to go to

00:06:11,570 --> 00:06:16,370
any other cloud essentially you how to

00:06:13,130 --> 00:06:18,980
have a go through a process of migration

00:06:16,370 --> 00:06:20,860
and follow the the standards the other

00:06:18,980 --> 00:06:23,540
clouds you know and force you to do it

00:06:20,860 --> 00:06:25,640
what is the advantage what is the

00:06:23,540 --> 00:06:27,680
advantage here is once you let's say you

00:06:25,640 --> 00:06:29,720
move some of your clothes from on from

00:06:27,680 --> 00:06:31,370
the cloud and you say the cloud is not

00:06:29,720 --> 00:06:33,530
for me and you want to bring those

00:06:31,370 --> 00:06:34,910
workloads back you can easily bring it

00:06:33,530 --> 00:06:36,350
back it is because you know essentially

00:06:34,910 --> 00:06:39,170
there is no migration effort in all

00:06:36,350 --> 00:06:41,870
right so you have this ability to move

00:06:39,170 --> 00:06:44,630
back and forth and how you want to use

00:06:41,870 --> 00:06:47,600
your resources between on prime and the

00:06:44,630 --> 00:06:49,490
cloud resources and obviously you can if

00:06:47,600 --> 00:06:50,990
you are starting brand new application

00:06:49,490 --> 00:06:52,520
development you can start in the cloud

00:06:50,990 --> 00:06:53,590
using the cloud native architectures

00:06:52,520 --> 00:06:55,510
that the latest in

00:06:53,590 --> 00:06:58,090
greatest architectures and we allow that

00:06:55,510 --> 00:06:59,740
as well so you have the freedom of where

00:06:58,090 --> 00:07:01,990
you build it where you move it where you

00:06:59,740 --> 00:07:04,090
deployed and you can change your mind at

00:07:01,990 --> 00:07:07,600
any at any point in time and move back

00:07:04,090 --> 00:07:10,270
and forth so how do you migrate your

00:07:07,600 --> 00:07:13,570
application so if you have your so if

00:07:10,270 --> 00:07:16,660
you get in vCloud air account you can

00:07:13,570 --> 00:07:19,210
use you can just upload your files the

00:07:16,660 --> 00:07:21,790
templates or virtual appliances into the

00:07:19,210 --> 00:07:24,700
cloud catalog and then start deploying

00:07:21,790 --> 00:07:29,530
those applications or you can use the

00:07:24,700 --> 00:07:32,680
ovf tool to upload this the virtual

00:07:29,530 --> 00:07:35,260
appliances as well or as I said we have

00:07:32,680 --> 00:07:37,980
we provide a vcloud connector which is a

00:07:35,260 --> 00:07:40,030
plug-in into your vSphere and

00:07:37,980 --> 00:07:42,760
essentially what this as I said earlier

00:07:40,030 --> 00:07:45,180
it gives you the ability to now manage

00:07:42,760 --> 00:07:47,860
your cloud resources from your vcenter

00:07:45,180 --> 00:07:51,700
management console so it's a one

00:07:47,860 --> 00:07:53,350
painting class for for managing both

00:07:51,700 --> 00:07:56,500
your own Prime and cloud resources and

00:07:53,350 --> 00:07:58,840
being able to move workloads back and

00:07:56,500 --> 00:08:02,380
forth between your cloud wrestling on on

00:07:58,840 --> 00:08:05,020
Prem now we will show you a demo of how

00:08:02,380 --> 00:08:09,120
an application template that is residing

00:08:05,020 --> 00:08:12,130
in your local data center can be easily

00:08:09,120 --> 00:08:15,520
migrated over or uploaded into vCloud

00:08:12,130 --> 00:08:19,090
air by using the VCC connector it's very

00:08:15,520 --> 00:08:21,720
simple so one of the key differentiator

00:08:19,090 --> 00:08:24,040
is the software-defined networking

00:08:21,720 --> 00:08:26,710
appliance that we make available in

00:08:24,040 --> 00:08:29,140
every cloud instance so when you go and

00:08:26,710 --> 00:08:32,410
sign up for we cloud air and you get in

00:08:29,140 --> 00:08:33,940
cloud instance as part of that instance

00:08:32,410 --> 00:08:35,200
you get what is known as the edge

00:08:33,940 --> 00:08:38,320
gateway which is you know which is

00:08:35,200 --> 00:08:39,400
backed up by n is an appliance so it

00:08:38,320 --> 00:08:42,280
implements the software-defined

00:08:39,400 --> 00:08:44,080
networking now this is one of the key

00:08:42,280 --> 00:08:45,790
differences now once you know for

00:08:44,080 --> 00:08:49,240
example you probably have an application

00:08:45,790 --> 00:08:50,440
running within your enterprise and an

00:08:49,240 --> 00:08:52,090
application could be a multi-tier

00:08:50,440 --> 00:08:54,220
application let's say you have a webbed

00:08:52,090 --> 00:08:56,950
here an application tier and a database

00:08:54,220 --> 00:08:59,470
it data based here and you can probably

00:08:56,950 --> 00:09:01,060
these different tiers are sitting behind

00:08:59,470 --> 00:09:02,200
different firewalls or could be

00:09:01,060 --> 00:09:04,900
significant are sitting between

00:09:02,200 --> 00:09:06,649
different private networks and with the

00:09:04,900 --> 00:09:10,040
web tier sitting in the DMZ

00:09:06,649 --> 00:09:13,430
just an exposed to the internet so what

00:09:10,040 --> 00:09:15,439
this edge gateway allows you essentially

00:09:13,430 --> 00:09:19,430
it allows you to replicate your network

00:09:15,439 --> 00:09:21,769
topology in on-prem in the cloud so

00:09:19,430 --> 00:09:25,459
using this edge gateway you can have up

00:09:21,769 --> 00:09:27,649
to nine network segments fully I either

00:09:25,459 --> 00:09:32,660
you know either everything is open open

00:09:27,649 --> 00:09:34,429
to the network or one acting as a DMZ

00:09:32,660 --> 00:09:36,290
and the rest acting as private networks

00:09:34,429 --> 00:09:37,429
completely isolated from the network so

00:09:36,290 --> 00:09:38,990
it is you know you can pretty much

00:09:37,429 --> 00:09:41,889
replicate your own frame network

00:09:38,990 --> 00:09:44,540
deployment or topology in the club and

00:09:41,889 --> 00:09:46,819
then you can see you know in this

00:09:44,540 --> 00:09:49,279
example we have shown for different

00:09:46,819 --> 00:09:51,559
network segments with the routed Network

00:09:49,279 --> 00:09:53,660
which is a default anytime you get an

00:09:51,559 --> 00:09:55,879
instance cloud instance you always have

00:09:53,660 --> 00:09:58,879
a router network topology which is acts

00:09:55,879 --> 00:10:00,730
like the DMZ so any vm place in the

00:09:58,879 --> 00:10:03,470
routed network is visible to the

00:10:00,730 --> 00:10:05,470
internet and the only other network

00:10:03,470 --> 00:10:07,879
segments can get completely isolated and

00:10:05,470 --> 00:10:11,170
completed product protected from the

00:10:07,879 --> 00:10:14,420
internet traffic and then in addition

00:10:11,170 --> 00:10:16,189
the edge gateway gives you all those

00:10:14,420 --> 00:10:17,689
capabilities that listed on the right it

00:10:16,189 --> 00:10:19,939
not only provides you the routing

00:10:17,689 --> 00:10:22,490
capabilities but also it has a built-in

00:10:19,939 --> 00:10:26,269
firewall it is a built-in network

00:10:22,490 --> 00:10:28,490
address translation capabilities it does

00:10:26,269 --> 00:10:31,879
the load balancing across the vm sitting

00:10:28,490 --> 00:10:34,699
in your router network it provides it's

00:10:31,879 --> 00:10:37,579
a built in VPN server soothe and then it

00:10:34,699 --> 00:10:40,189
also has a dhcp server available in it

00:10:37,579 --> 00:10:43,189
so what this means is you don't have to

00:10:40,189 --> 00:10:45,649
buy these additional capabilities as you

00:10:43,189 --> 00:10:47,629
know individual services it is all given

00:10:45,649 --> 00:10:49,129
to you it's available so essentially in

00:10:47,629 --> 00:10:50,569
all this capability is generally would

00:10:49,129 --> 00:10:52,459
buy separately from other cloud

00:10:50,569 --> 00:10:55,639
providers is made available in this edge

00:10:52,459 --> 00:10:57,649
gateway and then obviously if you don't

00:10:55,639 --> 00:11:00,170
have any if you have own choice of your

00:10:57,649 --> 00:11:02,660
own you know providers network providers

00:11:00,170 --> 00:11:06,740
we do support third-party providers such

00:11:02,660 --> 00:11:08,269
as f5 RSA cisco as well so if they ever

00:11:06,740 --> 00:11:10,790
so you can deploy their software

00:11:08,269 --> 00:11:13,670
software appliance and then start using

00:11:10,790 --> 00:11:15,920
those as well so this is I believe it's

00:11:13,670 --> 00:11:19,160
a true differentiator that is available

00:11:15,920 --> 00:11:21,709
to every instance

00:11:19,160 --> 00:11:24,350
then how do you now put the path to the

00:11:21,709 --> 00:11:27,440
hybrid cloud there are two ways you can

00:11:24,350 --> 00:11:29,120
subscribe and buy this cloud one is on a

00:11:27,440 --> 00:11:32,029
subscription model layer the one is the

00:11:29,120 --> 00:11:34,279
on-demand the subscription is you go and

00:11:32,029 --> 00:11:36,740
buy a pool of resources pool of compute

00:11:34,279 --> 00:11:38,990
pull of storage and then essentially a

00:11:36,740 --> 00:11:40,699
bandwidth and then you can use it for

00:11:38,990 --> 00:11:43,699
carve it out between your different

00:11:40,699 --> 00:11:45,560
workloads so this is mainly mainly

00:11:43,699 --> 00:11:47,990
useful if you have a predictable in a

00:11:45,560 --> 00:11:50,750
cast and budget for your rhino for your

00:11:47,990 --> 00:11:54,199
grub in a project and then essentially

00:11:50,750 --> 00:11:55,699
you can use this as a you know a common

00:11:54,199 --> 00:11:58,100
pool and carve it out different

00:11:55,699 --> 00:11:59,629
different groups and then you know

00:11:58,100 --> 00:12:02,120
exactly how much it's going to cost you

00:11:59,629 --> 00:12:03,379
on a monthly basis but if you don't know

00:12:02,120 --> 00:12:05,360
exactly you know how much you're going

00:12:03,379 --> 00:12:07,189
to use but you need this on-demand

00:12:05,360 --> 00:12:08,899
resource then you can essentially sign

00:12:07,189 --> 00:12:10,370
up for on demand and then pay as you go

00:12:08,899 --> 00:12:12,769
this is this provides you the

00:12:10,370 --> 00:12:15,920
pay-as-you-go model and we charge you

00:12:12,769 --> 00:12:17,689
only for the for the resources that

00:12:15,920 --> 00:12:21,050
you've consumed and for the duration of

00:12:17,689 --> 00:12:22,639
the of the consumption so and it is done

00:12:21,050 --> 00:12:25,100
on it hourly the meeting is done on an

00:12:22,639 --> 00:12:28,880
hourly basis so these are the two

00:12:25,100 --> 00:12:31,189
options available to you and then this

00:12:28,880 --> 00:12:33,920
is the last light here essentially how

00:12:31,189 --> 00:12:36,949
you know as I said we started we came

00:12:33,920 --> 00:12:39,259
into this into this pretty late about a

00:12:36,949 --> 00:12:40,790
year and a half but we have been you

00:12:39,259 --> 00:12:44,660
know trying to catch up and growing very

00:12:40,790 --> 00:12:48,500
fast so we have we have about seven data

00:12:44,660 --> 00:12:51,230
centers in us to in Europe and two in

00:12:48,500 --> 00:12:54,290
Asia currently and we are growing our

00:12:51,230 --> 00:12:56,689
footprint rapidly here and then in us we

00:12:54,290 --> 00:13:02,630
also have to government data centers

00:12:56,689 --> 00:13:06,230
with the FedRAMP certification all right

00:13:02,630 --> 00:13:09,170
hybrid DevOps now to the topic of this

00:13:06,230 --> 00:13:12,290
conference you know and we will show you

00:13:09,170 --> 00:13:15,980
how we can make this how it is how we

00:13:12,290 --> 00:13:19,220
enable this in our cloud so let's say

00:13:15,980 --> 00:13:20,930
for example you have set up a continuous

00:13:19,220 --> 00:13:23,449
integration of continuous daily process

00:13:20,930 --> 00:13:25,100
on Prem and you have set up in a year

00:13:23,449 --> 00:13:28,490
using perforce for your source code

00:13:25,100 --> 00:13:30,410
management and you're using Jenkins for

00:13:28,490 --> 00:13:32,870
your continuous integration and you're

00:13:30,410 --> 00:13:34,550
set up in a bunch of tests

00:13:32,870 --> 00:13:37,880
and different environments for different

00:13:34,550 --> 00:13:40,130
use cases now you need to add additional

00:13:37,880 --> 00:13:42,350
test capabilities or you need to free up

00:13:40,130 --> 00:13:44,450
you know as a as an IT person you need

00:13:42,350 --> 00:13:46,490
to free up some resources or you need

00:13:44,450 --> 00:13:49,610
some additional resources that you need

00:13:46,490 --> 00:13:51,230
for your in a DevOps operation so

00:13:49,610 --> 00:13:57,320
essentially what you do is go and sign

00:13:51,230 --> 00:13:59,690
up for the on-demand cloud and then as I

00:13:57,320 --> 00:14:03,260
said you set up this vcloud connector

00:13:59,690 --> 00:14:07,430
which sets up these direct path from

00:14:03,260 --> 00:14:10,580
your on-prem to the to the cloud and as

00:14:07,430 --> 00:14:12,290
part of that it also sets up the catalog

00:14:10,580 --> 00:14:15,860
sink this is what i said in any

00:14:12,290 --> 00:14:17,839
templates that you have on prem and your

00:14:15,860 --> 00:14:20,600
that is sitting in your on chrome

00:14:17,839 --> 00:14:24,470
catalog get synced automatically to the

00:14:20,600 --> 00:14:26,120
cloud by the by our software so

00:14:24,470 --> 00:14:27,620
essentially all the templates in our

00:14:26,120 --> 00:14:29,120
suddenly available in the cloud you can

00:14:27,620 --> 00:14:31,220
start deploying them in the cloud and

00:14:29,120 --> 00:14:33,860
start using it so at this point I'm

00:14:31,220 --> 00:14:36,500
going to give it old Sanjay and he will

00:14:33,860 --> 00:14:37,760
show you how this is you know how this

00:14:36,500 --> 00:14:41,500
is made possible and you will show you

00:14:37,760 --> 00:14:45,620
you know in real time this sync process

00:14:41,500 --> 00:14:48,080
thank you sure so a couple of key points

00:14:45,620 --> 00:14:50,959
I think as a shock mention that when you

00:14:48,080 --> 00:14:54,050
actually extending your resources from

00:14:50,959 --> 00:14:56,570
compromised to r2 to public cloud you

00:14:54,050 --> 00:14:59,510
really have to have a capability so that

00:14:56,570 --> 00:15:02,330
you can manage both compromised as well

00:14:59,510 --> 00:15:03,410
as the your cloud from the single sort

00:15:02,330 --> 00:15:05,089
of a single pane of glass so you

00:15:03,410 --> 00:15:08,390
basically you should have a capability

00:15:05,089 --> 00:15:10,400
to start and stop the VMS regardless

00:15:08,390 --> 00:15:13,790
whether on the compromised over or the

00:15:10,400 --> 00:15:15,320
onto the clock and also the there has to

00:15:13,790 --> 00:15:17,750
be a mechanism where you can basically

00:15:15,320 --> 00:15:20,240
seamlessly take the resources from your

00:15:17,750 --> 00:15:23,029
on-premise data center to cloud data

00:15:20,240 --> 00:15:26,660
centers and vice versa so let me quickly

00:15:23,029 --> 00:15:29,060
show you how we we achieve that that

00:15:26,660 --> 00:15:30,620
think so so what you are looking at what

00:15:29,060 --> 00:15:34,250
you are looking at is a what we call

00:15:30,620 --> 00:15:36,350
vSphere client agree i think if you most

00:15:34,250 --> 00:15:38,330
of your IT operations they're very very

00:15:36,350 --> 00:15:40,900
familiar with this GUI I mean this is

00:15:38,330 --> 00:15:46,270
the tools they use to manage on-premise

00:15:40,900 --> 00:15:46,270
resources so if you if I go to

00:15:47,230 --> 00:15:54,800
vm sin templates so these are these are

00:15:51,790 --> 00:15:57,650
so these are all the all the resources

00:15:54,800 --> 00:16:00,860
which which are running on my compromise

00:15:57,650 --> 00:16:02,570
data center so so you can see that bunch

00:16:00,860 --> 00:16:04,160
of VMs are up and running and then we

00:16:02,570 --> 00:16:08,120
have a vcloud connector nodes we cloud

00:16:04,160 --> 00:16:11,000
connect to server and in the end up in

00:16:08,120 --> 00:16:14,410
the vcenter server so and then you

00:16:11,000 --> 00:16:16,820
obviously with this tool your IT

00:16:14,410 --> 00:16:18,500
administrator has a capability to manage

00:16:16,820 --> 00:16:21,620
the resources started shut it deleted

00:16:18,500 --> 00:16:23,420
all that stuff right so now at the same

00:16:21,620 --> 00:16:25,490
time if you if you notice here I have a

00:16:23,420 --> 00:16:26,960
folder called templates and there are a

00:16:25,490 --> 00:16:29,090
bunch of templates which are sitting

00:16:26,960 --> 00:16:31,520
here right so as a short mentioned that

00:16:29,090 --> 00:16:33,890
when you actually extend your resources

00:16:31,520 --> 00:16:35,810
to two vCloud air you have to have a

00:16:33,890 --> 00:16:37,700
mechanism to either take those VMS

00:16:35,810 --> 00:16:40,190
running on to on-premise or those

00:16:37,700 --> 00:16:41,780
templates are seamlessly basically show

00:16:40,190 --> 00:16:44,960
up on the catalog on to the vCloud air

00:16:41,780 --> 00:16:47,500
so when vcloud connector gets configured

00:16:44,960 --> 00:16:50,480
that basically shows up as a plugin

00:16:47,500 --> 00:16:52,760
plugin on your on your vSphere client so

00:16:50,480 --> 00:16:54,740
so your IT administrator basically has

00:16:52,760 --> 00:16:58,490
to is using the same tool which is

00:16:54,740 --> 00:17:01,100
familiar in managing on-premise data

00:16:58,490 --> 00:17:03,410
center so when you actually click on

00:17:01,100 --> 00:17:06,530
that plug-in you can see now there are a

00:17:03,410 --> 00:17:09,080
bunch of a bunch of data center which

00:17:06,530 --> 00:17:11,360
are popping up so the first one is the

00:17:09,080 --> 00:17:13,040
one which is my on-premise data center

00:17:11,360 --> 00:17:15,710
the one which I was just showing you and

00:17:13,040 --> 00:17:18,650
over here you will be able to see all

00:17:15,710 --> 00:17:22,040
the VMS which are running running it on

00:17:18,650 --> 00:17:25,660
running on compromise and here so these

00:17:22,040 --> 00:17:25,660
are all the VMS i just showed you

00:17:26,260 --> 00:17:31,100
through my vSphere client they are

00:17:29,720 --> 00:17:33,110
running again they're basically popping

00:17:31,100 --> 00:17:34,970
up here so now through this week cloud

00:17:33,110 --> 00:17:36,940
connector plug in I can actually start

00:17:34,970 --> 00:17:39,800
and stop the vm see if I need to are

00:17:36,940 --> 00:17:42,020
directly from here through my action pan

00:17:39,800 --> 00:17:43,460
right so power on power of now at the

00:17:42,020 --> 00:17:46,220
same time if you notice that I have

00:17:43,460 --> 00:17:49,790
bunch of other cloud resources which are

00:17:46,220 --> 00:17:53,270
also showing up here so this is this is

00:17:49,790 --> 00:17:55,250
now all my cloud is which your cloud of

00:17:53,270 --> 00:17:57,590
resources I have access to they are

00:17:55,250 --> 00:18:00,110
showing up here so now if I look at

00:17:57,590 --> 00:18:06,260
and if I edit it so this is my public

00:18:00,110 --> 00:18:07,640
URL for my vCloud air resources and and

00:18:06,260 --> 00:18:08,870
then if you look at the template

00:18:07,640 --> 00:18:11,419
directory which I showed you on

00:18:08,870 --> 00:18:14,120
on-premise there is a slight blue up

00:18:11,419 --> 00:18:15,710
arrow what that indicates that i am

00:18:14,120 --> 00:18:18,260
actually publishing this template so

00:18:15,710 --> 00:18:20,539
whatever cloud resources they really

00:18:18,260 --> 00:18:22,610
want to subscribe to this type templates

00:18:20,539 --> 00:18:24,200
they can subscribe to it and then the

00:18:22,610 --> 00:18:26,990
sinking operation will automatically

00:18:24,200 --> 00:18:28,250
happen and all the catalogs or all the

00:18:26,990 --> 00:18:29,990
templates which are sitting into this

00:18:28,250 --> 00:18:33,220
particular template folder will

00:18:29,990 --> 00:18:36,230
automatically show up on my vCloud air

00:18:33,220 --> 00:18:37,730
catalogs so in this particular case if

00:18:36,230 --> 00:18:41,059
you look at I have like the three

00:18:37,730 --> 00:18:43,630
templates which are sitting on my own

00:18:41,059 --> 00:18:47,330
premise catalog and they are basically

00:18:43,630 --> 00:18:49,820
since I have published this a template

00:18:47,330 --> 00:18:51,799
directory anybody any of the cloud

00:18:49,820 --> 00:18:54,409
resource can basically subscribe to it

00:18:51,799 --> 00:18:59,720
so in this particular case I basically

00:18:54,409 --> 00:19:04,039
have subscribed those template two to

00:18:59,720 --> 00:19:08,779
one of my cloud resources you can see

00:19:04,039 --> 00:19:10,370
that my Deloitte cert 28v clouded data

00:19:08,779 --> 00:19:13,940
center has basically subscribed to sync

00:19:10,370 --> 00:19:18,740
template right so now the minute I i put

00:19:13,940 --> 00:19:22,309
i create any template let me create a

00:19:18,740 --> 00:19:24,799
simple template from one of them one of

00:19:22,309 --> 00:19:29,720
the machine so i can create a template

00:19:24,799 --> 00:19:32,659
here alone to template i am going to put

00:19:29,720 --> 00:19:37,179
it into this template directory this is

00:19:32,659 --> 00:19:37,179
my oracle 7

00:19:43,570 --> 00:19:48,100
and as you can see that the that the

00:19:46,360 --> 00:19:49,990
templating process has started now and

00:19:48,100 --> 00:19:51,550
the ones the templating process finished

00:19:49,990 --> 00:19:52,960
it was the syncing process will

00:19:51,550 --> 00:19:55,360
automatically start and it will

00:19:52,960 --> 00:19:58,060
basically start syncing this catalog

00:19:55,360 --> 00:20:00,070
into into my vCloud air so before before

00:19:58,060 --> 00:20:03,150
the session I actually is a kicked up

00:20:00,070 --> 00:20:06,400
one process and you may be able to see

00:20:03,150 --> 00:20:09,460
that this process is running and it is

00:20:06,400 --> 00:20:12,970
actually sinking the templates from my

00:20:09,460 --> 00:20:15,880
on-premise data center tutor to to my

00:20:12,970 --> 00:20:18,520
vCloud air catalog so this is completely

00:20:15,880 --> 00:20:20,770
seamless you just create a template and

00:20:18,520 --> 00:20:23,320
then the sinking operation every couple

00:20:20,770 --> 00:20:25,960
of hours it will basically check or you

00:20:23,320 --> 00:20:28,750
can configure the time or if you want to

00:20:25,960 --> 00:20:30,610
basically sink every every one hour but

00:20:28,750 --> 00:20:32,320
since most of the time the templates are

00:20:30,610 --> 00:20:34,480
really big in size you really want to

00:20:32,320 --> 00:20:37,360
give a reasonable good chunk of Windows

00:20:34,480 --> 00:20:39,130
but if you in any case if you really

00:20:37,360 --> 00:20:41,260
want to sync up right away you can also

00:20:39,130 --> 00:20:42,640
there is a button so that you can as

00:20:41,260 --> 00:20:44,650
soon as the templating process is

00:20:42,640 --> 00:20:46,870
finished you can sync it right away so

00:20:44,650 --> 00:20:48,490
the key here at the key take a key take

00:20:46,870 --> 00:20:51,280
away as you stretch your data center

00:20:48,490 --> 00:20:53,710
from the from the optimized to public I

00:20:51,280 --> 00:20:55,630
think you really have no burden on

00:20:53,710 --> 00:20:57,910
managing all your resources and

00:20:55,630 --> 00:21:00,130
migrating those resources the the tool

00:20:57,910 --> 00:21:07,830
our vmware provides will automatically

00:21:00,130 --> 00:21:07,830
take care of it thanks LJ

00:21:12,870 --> 00:21:22,390
so as he as he showed here so in most

00:21:17,740 --> 00:21:25,060
cases the idea arms or the admin would

00:21:22,390 --> 00:21:27,520
have created the templates and put them

00:21:25,060 --> 00:21:30,130
in the catalog on Prem so and as soon as

00:21:27,520 --> 00:21:32,740
you set up the vCloud connector plug in

00:21:30,130 --> 00:21:35,260
which you know connects the on prem data

00:21:32,740 --> 00:21:37,030
center into the cloud resources the sync

00:21:35,260 --> 00:21:38,230
automatically starts so the sink in

00:21:37,030 --> 00:21:40,570
essentially all the templates never

00:21:38,230 --> 00:21:42,310
available in the club so in this

00:21:40,570 --> 00:21:44,590
particular case let's say now you know

00:21:42,310 --> 00:21:46,000
because as I said you know the there was

00:21:44,590 --> 00:21:50,350
a requirement to add additional

00:21:46,000 --> 00:21:52,690
resources for testing and what the the

00:21:50,350 --> 00:21:54,910
admin did was created an account set up

00:21:52,690 --> 00:21:57,570
the vCloud connector and all the

00:21:54,910 --> 00:22:00,370
templates are available now they can

00:21:57,570 --> 00:22:02,320
install it's a chef server to stand up

00:22:00,370 --> 00:22:04,990
the different environments and use the

00:22:02,320 --> 00:22:08,140
templates to use the templates that that

00:22:04,990 --> 00:22:10,900
are sitting in the cloud catalog to

00:22:08,140 --> 00:22:13,840
deploy these environments and run some

00:22:10,900 --> 00:22:16,300
of the tests in parallel so essentially

00:22:13,840 --> 00:22:18,100
you have mood the testing in this

00:22:16,300 --> 00:22:19,720
particular case testing to the cloud and

00:22:18,100 --> 00:22:22,540
you're still doing user acceptance

00:22:19,720 --> 00:22:24,850
staging and prod on pram so you're now

00:22:22,540 --> 00:22:27,670
using a mix of both the resources on

00:22:24,850 --> 00:22:30,370
prime and on cloud and and for the Cloud

00:22:27,670 --> 00:22:32,230
usage obviously you are using only for

00:22:30,370 --> 00:22:34,150
the duration that you are signed up for

00:22:32,230 --> 00:22:35,950
those resources so you have this in a

00:22:34,150 --> 00:22:40,390
set of fungible resources at your

00:22:35,950 --> 00:22:42,730
disposal now I think you know if you

00:22:40,390 --> 00:22:45,280
want to take a step further we do

00:22:42,730 --> 00:22:47,110
support obviously in the right hand work

00:22:45,280 --> 00:22:51,340
side what you're seeing is we support

00:22:47,110 --> 00:22:54,250
most of the common DevOps tools in

00:22:51,340 --> 00:22:57,460
vcloud in a week Lord air pretty much

00:22:54,250 --> 00:22:59,080
anything that runs on Prem runs without

00:22:57,460 --> 00:23:00,550
any change in the vCloud air in this

00:22:59,080 --> 00:23:02,350
case we have in a way I have chef

00:23:00,550 --> 00:23:05,170
running and chef has a knife plug-in

00:23:02,350 --> 00:23:08,860
available for vCloud air get enterprise

00:23:05,170 --> 00:23:11,140
runs on vCloud air so if if you want to

00:23:08,860 --> 00:23:12,970
move completely into the cloud and get

00:23:11,140 --> 00:23:14,770
away from perforce that's an option as

00:23:12,970 --> 00:23:17,110
well so you can more to get enterprise

00:23:14,770 --> 00:23:20,500
or you can still continue to access the

00:23:17,110 --> 00:23:22,690
source code sitting on Prem and then

00:23:20,500 --> 00:23:23,810
finally if you want to move the

00:23:22,690 --> 00:23:26,360
continuous integration to the

00:23:23,810 --> 00:23:27,710
cloud we have worked with in a cloud

00:23:26,360 --> 00:23:29,930
bees and certified the Jenkins

00:23:27,710 --> 00:23:31,370
Enterprise version in the cloud so you

00:23:29,930 --> 00:23:33,620
can move move your continuous

00:23:31,370 --> 00:23:35,740
integration process into the cloud as

00:23:33,620 --> 00:23:38,330
well so this is you know what we mean by

00:23:35,740 --> 00:23:41,870
hybrid DevOps gives you the ability to

00:23:38,330 --> 00:23:44,690
now move some of those DevOps centric

00:23:41,870 --> 00:23:46,820
processes back and forth between on Prem

00:23:44,690 --> 00:23:49,480
and in the cloud so you have a choice

00:23:46,820 --> 00:23:51,620
you can move back and forth and then

00:23:49,480 --> 00:23:53,960
because staging and production is

00:23:51,620 --> 00:23:55,940
happening on Prem you want to set up

00:23:53,960 --> 00:23:58,310
artifactory and then gives you the inset

00:23:55,940 --> 00:24:00,050
of the artifactory at the replication so

00:23:58,310 --> 00:24:02,810
you have the binaries available both on

00:24:00,050 --> 00:24:04,280
Prem in and in the cloud and the even

00:24:02,810 --> 00:24:07,340
this setting up of this binary

00:24:04,280 --> 00:24:09,590
replication using artifactory is very

00:24:07,340 --> 00:24:11,960
simple through the vCloud connector plug

00:24:09,590 --> 00:24:13,670
in because there is already a secure

00:24:11,960 --> 00:24:16,310
channel set up between on prem an

00:24:13,670 --> 00:24:17,690
unplowed so it is the end in a setting

00:24:16,310 --> 00:24:20,450
of this binary replication it's very

00:24:17,690 --> 00:24:23,120
very simple with with vCloud air and

00:24:20,450 --> 00:24:26,390
then finally now you can move user

00:24:23,120 --> 00:24:28,550
acceptance tests to the cloud and then

00:24:26,390 --> 00:24:30,830
start you know deploying additional

00:24:28,550 --> 00:24:33,110
resources testing so this is using an

00:24:30,830 --> 00:24:35,450
idea of how you can use the resources

00:24:33,110 --> 00:24:38,240
back and forth so that's essentially

00:24:35,450 --> 00:24:39,860
what we mean by hybrid DevOps and giving

00:24:38,240 --> 00:24:42,920
you the power and the ability to move

00:24:39,860 --> 00:24:45,320
workloads back and forth so what are we

00:24:42,920 --> 00:24:46,880
doing on we cloud air I gave you some

00:24:45,320 --> 00:24:48,950
examples of the tools that are available

00:24:46,880 --> 00:24:51,410
in my cloud air in a cloud-based you

00:24:48,950 --> 00:24:55,010
know Jenkins enterprises certified blaze

00:24:51,410 --> 00:24:58,190
meter that they have a they have it in a

00:24:55,010 --> 00:24:59,690
booth here they referred the blaze meter

00:24:58,190 --> 00:25:01,180
product is certified as well so we have

00:24:59,690 --> 00:25:04,100
many we are working with many partners

00:25:01,180 --> 00:25:06,830
so our idea is to provide a

00:25:04,100 --> 00:25:09,410
best-of-breed product and make it

00:25:06,830 --> 00:25:10,970
available on vCloud air so you have a

00:25:09,410 --> 00:25:14,300
choice of all the products that you want

00:25:10,970 --> 00:25:17,480
to use within your ramp devops you know

00:25:14,300 --> 00:25:21,710
ecosystem and then essentially we want

00:25:17,480 --> 00:25:24,050
to you know it will be managed from an

00:25:21,710 --> 00:25:26,210
orchestration CD perspective we want to

00:25:24,050 --> 00:25:28,190
support two key use cases and

00:25:26,210 --> 00:25:31,280
essentially centered around Jenkins and

00:25:28,190 --> 00:25:34,250
the Jenkins workflow and then the other

00:25:31,280 --> 00:25:36,200
one is we want to have in a support for

00:25:34,250 --> 00:25:37,340
V realized code stream very less code

00:25:36,200 --> 00:25:40,250
stream is another

00:25:37,340 --> 00:25:42,800
continuous delivery tool from VMware

00:25:40,250 --> 00:25:45,580
itself so this is something fairly new

00:25:42,800 --> 00:25:49,310
it was released about six months ago and

00:25:45,580 --> 00:25:53,890
essentially does release automation in

00:25:49,310 --> 00:25:56,330
continuous delivery delivery process so

00:25:53,890 --> 00:25:59,570
so essentially you can orchestrate the

00:25:56,330 --> 00:26:02,930
DevOps processes through either Jenkins

00:25:59,570 --> 00:26:03,920
and Jenkins workflow or we realized code

00:26:02,930 --> 00:26:06,220
stream and you want to make it all

00:26:03,920 --> 00:26:09,770
available in the in the in the cloud and

00:26:06,220 --> 00:26:11,900
then why dem ops so essentially it's

00:26:09,770 --> 00:26:13,340
hybrid so as I said it gives you the

00:26:11,900 --> 00:26:15,920
ability to move back and forth and you

00:26:13,340 --> 00:26:18,400
can do it on Prem on in the cloud or

00:26:15,920 --> 00:26:20,120
move back and forth and it's open

00:26:18,400 --> 00:26:21,950
essentially you have a broad selection

00:26:20,120 --> 00:26:24,560
of tools that are available anything

00:26:21,950 --> 00:26:26,330
that runs on Prem is available in the

00:26:24,560 --> 00:26:29,180
cloud as well you can run it no change

00:26:26,330 --> 00:26:31,910
required as I said and you can in

00:26:29,180 --> 00:26:33,860
essence of what it enables is the

00:26:31,910 --> 00:26:35,390
leverage is the existing investments vm

00:26:33,860 --> 00:26:37,760
ever technologies and other tools that

00:26:35,390 --> 00:26:40,610
you had already done on Prem now you can

00:26:37,760 --> 00:26:43,640
leverage them in the in the cloud and

00:26:40,610 --> 00:26:46,250
you can bring your in the vCloud air

00:26:43,640 --> 00:26:48,890
perspective you can bring you know your

00:26:46,250 --> 00:26:50,950
own licenses or as I said we are working

00:26:48,890 --> 00:26:54,080
with a bunch of partners to make their

00:26:50,950 --> 00:26:56,810
products available as a service in

00:26:54,080 --> 00:26:58,850
wicklow there so you can you know easily

00:26:56,810 --> 00:27:02,660
consumed them as services as well and

00:26:58,850 --> 00:27:04,340
then it's consistency the catalog sink

00:27:02,660 --> 00:27:05,750
is one example of consistency because

00:27:04,340 --> 00:27:07,550
the gold templates that you have created

00:27:05,750 --> 00:27:10,070
they're available in the cloud now

00:27:07,550 --> 00:27:11,960
without any effort and then you are

00:27:10,070 --> 00:27:16,310
using the common runtime across both on

00:27:11,960 --> 00:27:18,140
prime n and uncloudy so briefly on the

00:27:16,310 --> 00:27:20,480
services that are going to that are

00:27:18,140 --> 00:27:24,110
available and coming soon on week loader

00:27:20,480 --> 00:27:26,450
so today right now these are the

00:27:24,110 --> 00:27:29,210
partners and the products that are

00:27:26,450 --> 00:27:30,800
available cloudbees essentially we are

00:27:29,210 --> 00:27:34,100
working with them so we have Jenkins

00:27:30,800 --> 00:27:38,600
Enterprise running on vCloud air and

00:27:34,100 --> 00:27:41,150
then you know you can start using it for

00:27:38,600 --> 00:27:42,800
all your bill jobs and then chef chef

00:27:41,150 --> 00:27:44,750
has built a knife plug-in as I said for

00:27:42,800 --> 00:27:46,490
vCloud air so that's available we

00:27:44,750 --> 00:27:49,400
realized code streams so this is a

00:27:46,490 --> 00:27:51,080
VMware product for continuous delivery

00:27:49,400 --> 00:27:52,549
and release automation I have one more

00:27:51,080 --> 00:27:55,340
slide on it so I'll go into a little bit

00:27:52,549 --> 00:27:58,640
more detail on that and then tosca tosca

00:27:55,340 --> 00:28:02,990
is it's this is a application blueprint

00:27:58,640 --> 00:28:04,940
standard that we are using for for you

00:28:02,990 --> 00:28:07,669
know for a for a way to define your

00:28:04,940 --> 00:28:09,820
multi you know multi-tier applications a

00:28:07,669 --> 00:28:12,169
standard way of defining your

00:28:09,820 --> 00:28:13,789
application topology and environment and

00:28:12,169 --> 00:28:16,130
then being able to deploy them in with

00:28:13,789 --> 00:28:19,309
low there and then we support bitnami so

00:28:16,130 --> 00:28:21,230
bitnami if you go to bit nami so vCloud

00:28:19,309 --> 00:28:23,179
air is a destination so you can have one

00:28:21,230 --> 00:28:25,370
click deployment of most common open

00:28:23,179 --> 00:28:30,919
source tools and deploy them in wicklow

00:28:25,370 --> 00:28:33,820
there so this is on we realized code

00:28:30,919 --> 00:28:37,159
stream so this is as I said this is a

00:28:33,820 --> 00:28:41,179
product from the VMware management tool

00:28:37,159 --> 00:28:43,340
team and it essentially enables release

00:28:41,179 --> 00:28:45,769
automation and then as well as

00:28:43,340 --> 00:28:49,100
continuous delivery so you heard the

00:28:45,769 --> 00:28:51,260
pitch on Jenkins workflow and continuous

00:28:49,100 --> 00:28:54,620
delivery and essentially we enable that

00:28:51,260 --> 00:28:57,049
so it uses Jenkins for continuous

00:28:54,620 --> 00:28:59,269
integration and then once the continuous

00:28:57,049 --> 00:29:01,399
integration does the bill and it puts

00:28:59,269 --> 00:29:04,190
the you know puts the binary artifacts

00:29:01,399 --> 00:29:06,289
into our into a repository in our case

00:29:04,190 --> 00:29:08,690
it is artifactory and artifactory is

00:29:06,289 --> 00:29:11,690
included in the product so that is not

00:29:08,690 --> 00:29:14,539
something i need to buy it triggers a

00:29:11,690 --> 00:29:16,309
pipeline so from a code stream there are

00:29:14,539 --> 00:29:19,130
three major things the code stream

00:29:16,309 --> 00:29:20,720
enables it does that it helps you create

00:29:19,130 --> 00:29:22,909
pipelines you can have multiple

00:29:20,720 --> 00:29:25,070
pipelines for different releases of the

00:29:22,909 --> 00:29:27,080
same product or you can manage multiple

00:29:25,070 --> 00:29:30,110
pipelines for different product releases

00:29:27,080 --> 00:29:31,750
as well and then and in each of the

00:29:30,110 --> 00:29:34,940
pipeline you can have different stages

00:29:31,750 --> 00:29:36,710
and then and then you know have

00:29:34,940 --> 00:29:38,539
governance you know how do you proceed

00:29:36,710 --> 00:29:41,779
from one stage to the next stage and

00:29:38,539 --> 00:29:44,720
then it does artifact management because

00:29:41,779 --> 00:29:47,419
our data factory is included you can

00:29:44,720 --> 00:29:49,610
have complete governance over the binary

00:29:47,419 --> 00:29:52,190
artifacts that that are going to be used

00:29:49,610 --> 00:29:54,529
within your release and then finally

00:29:52,190 --> 00:29:56,720
there is troubleshooting and dashboard

00:29:54,529 --> 00:29:59,240
support so you can have at any point one

00:29:56,720 --> 00:30:01,700
point you have an overall view of all

00:29:59,240 --> 00:30:03,740
the pipelines and what is happening

00:30:01,700 --> 00:30:04,920
within each of the pipelines at each of

00:30:03,740 --> 00:30:06,390
the stages and

00:30:04,920 --> 00:30:08,790
and have complete you know complete

00:30:06,390 --> 00:30:11,220
visibility into into these things and

00:30:08,790 --> 00:30:13,890
you can always click and find get more

00:30:11,220 --> 00:30:16,980
detail in each of the stages and the key

00:30:13,890 --> 00:30:18,930
thing is it's very visual difference

00:30:16,980 --> 00:30:21,660
between this one and workflow this is

00:30:18,930 --> 00:30:24,360
very visual it's a UI base you go you

00:30:21,660 --> 00:30:26,730
use a we have a contiguous to set up the

00:30:24,360 --> 00:30:30,150
pipe and set up these stages and set up

00:30:26,730 --> 00:30:31,980
the individual task and it is integrated

00:30:30,150 --> 00:30:35,100
very well with the vmware management

00:30:31,980 --> 00:30:37,290
tools and then you can use it you know

00:30:35,100 --> 00:30:41,130
you can deploy them on Prem or in the

00:30:37,290 --> 00:30:44,250
cloud and you can use it to run a hybrid

00:30:41,130 --> 00:30:45,780
process so you can control some of the

00:30:44,250 --> 00:30:47,070
stages some of the activities that is

00:30:45,780 --> 00:30:49,350
happening on Prem and the other

00:30:47,070 --> 00:30:52,530
activities could be happening in the

00:30:49,350 --> 00:30:54,000
cloud and you can use it to control both

00:30:52,530 --> 00:30:56,310
these activities from a single

00:30:54,000 --> 00:30:59,820
deployment either on prem or in the

00:30:56,310 --> 00:31:01,650
cloud and then it integrates with all

00:30:59,820 --> 00:31:04,050
the common tools that you are already

00:31:01,650 --> 00:31:06,180
using within within your DevOps process

00:31:04,050 --> 00:31:09,480
most commonly used tools out there in a

00:31:06,180 --> 00:31:11,700
chef puppet darker it supposed both VMs

00:31:09,480 --> 00:31:15,120
as well as in a container container

00:31:11,700 --> 00:31:18,510
processes and deployment and this is

00:31:15,120 --> 00:31:20,220
just another were briefed I think if you

00:31:18,510 --> 00:31:23,640
can see this maybe they the font is

00:31:20,220 --> 00:31:26,400
maybe don't be can everybody see it from

00:31:23,640 --> 00:31:30,180
the back side the fun okay so this is

00:31:26,400 --> 00:31:33,240
usually a a a highlighted view of one of

00:31:30,180 --> 00:31:34,890
the in a pipeline so you have complete

00:31:33,240 --> 00:31:38,610
end-to-end visibility of the pipeline

00:31:34,890 --> 00:31:41,340
the different stages in the pipeline and

00:31:38,610 --> 00:31:46,020
the artifacts that is using at each of

00:31:41,340 --> 00:31:48,600
these stages and then essentially you

00:31:46,020 --> 00:31:52,430
can look at the status of each of the

00:31:48,600 --> 00:31:55,770
stages and then the status allows you to

00:31:52,430 --> 00:31:58,680
govern how the pipeline moves from stage

00:31:55,770 --> 00:32:00,480
to stage so you can have some gating

00:31:58,680 --> 00:32:03,540
factor getting rules set up saying you

00:32:00,480 --> 00:32:05,100
know only if it passes that rule then go

00:32:03,540 --> 00:32:07,320
to the next stage it could be one of the

00:32:05,100 --> 00:32:10,350
gating rules could be if you're running

00:32:07,320 --> 00:32:12,120
selenium tests you can see if the test

00:32:10,350 --> 00:32:15,120
results is about ninety-five percent

00:32:12,120 --> 00:32:16,920
then you know go to the next stage

00:32:15,120 --> 00:32:18,190
otherwise stop somebody has to come in

00:32:16,920 --> 00:32:20,620
and take a

00:32:18,190 --> 00:32:24,850
annual action so there are you how you

00:32:20,620 --> 00:32:26,409
know you have a lot of ability to set up

00:32:24,850 --> 00:32:27,970
this you know set of these rules and

00:32:26,409 --> 00:32:30,399
then getting rules and then governance

00:32:27,970 --> 00:32:32,610
process to help you define your stuff

00:32:30,399 --> 00:32:35,470
the other key capabilities you can

00:32:32,610 --> 00:32:36,519
select two stages into comparison so you

00:32:35,470 --> 00:32:39,159
can look at what is the difference

00:32:36,519 --> 00:32:42,809
between those days stages so helps you

00:32:39,159 --> 00:32:47,289
in debugging and troubleshooting as well

00:32:42,809 --> 00:32:50,320
all right so quickly going to the the

00:32:47,289 --> 00:32:52,509
next one so automate application

00:32:50,320 --> 00:32:55,750
deployments so one of the common problem

00:32:52,509 --> 00:32:59,470
in dev ops in a setting up environments

00:32:55,750 --> 00:33:01,720
so today you probably are using could be

00:32:59,470 --> 00:33:03,960
using chef puppet or you could be using

00:33:01,720 --> 00:33:07,269
some proprietary way of doing things or

00:33:03,960 --> 00:33:09,549
VMware has its own technology called

00:33:07,269 --> 00:33:11,049
abdi application director it's a

00:33:09,549 --> 00:33:16,450
separate application blue current

00:33:11,049 --> 00:33:18,429
technology amazon has you know amazon at

00:33:16,450 --> 00:33:20,429
their own in a provide cloud formation

00:33:18,429 --> 00:33:23,350
technology which is proprietary

00:33:20,429 --> 00:33:25,210
OpenStack has you know had their own

00:33:23,350 --> 00:33:27,730
proprietary technology but recently have

00:33:25,210 --> 00:33:29,799
adopted Tosca so essentially what we

00:33:27,730 --> 00:33:32,110
decided was we needed a standard based

00:33:29,799 --> 00:33:34,210
way of defining application environment

00:33:32,110 --> 00:33:36,549
and topology and we have also decided to

00:33:34,210 --> 00:33:39,820
standardize on Tosca so Tosca is the

00:33:36,549 --> 00:33:41,950
oasis standard so the good thing is if

00:33:39,820 --> 00:33:44,230
you define an application topology and

00:33:41,950 --> 00:33:47,049
environment using Tosca you can deploy

00:33:44,230 --> 00:33:49,659
down to any cloud it is cloud neutral so

00:33:47,049 --> 00:33:51,850
this is only you build it once and you

00:33:49,659 --> 00:33:54,309
can deploy to any of the clouds so we do

00:33:51,850 --> 00:33:56,710
support that and that will read the

00:33:54,309 --> 00:34:00,220
service to deploy a task of blueprint

00:33:56,710 --> 00:34:02,080
will be available next month so that'll

00:34:00,220 --> 00:34:03,460
be something that we can start using so

00:34:02,080 --> 00:34:05,500
if you have task of blueprints you can

00:34:03,460 --> 00:34:07,690
deploy it onto vCloud air and we are

00:34:05,500 --> 00:34:09,520
also building that support actually

00:34:07,690 --> 00:34:11,470
there is already a plugin for vsphere so

00:34:09,520 --> 00:34:13,179
you can use you can use tasker broken

00:34:11,470 --> 00:34:18,609
into it you know and deploy them on to

00:34:13,179 --> 00:34:19,960
vsphere you're on prem cloud alright

00:34:18,609 --> 00:34:21,490
what else is coming so we will be

00:34:19,960 --> 00:34:23,349
offering continuous integration as a

00:34:21,490 --> 00:34:24,730
service and this is actually coming

00:34:23,349 --> 00:34:28,659
through a partner so it will be a

00:34:24,730 --> 00:34:31,000
managed service so so what we are taking

00:34:28,659 --> 00:34:31,990
is the most common tools that is used

00:34:31,000 --> 00:34:35,800
within their continuous

00:34:31,990 --> 00:34:37,350
integration process such as Jenkins

00:34:35,800 --> 00:34:41,649
definitely for bills and then

00:34:37,350 --> 00:34:43,840
artifactory for binary repository and

00:34:41,649 --> 00:34:44,980
then we have integrated with my source

00:34:43,840 --> 00:34:48,149
code point of view we have integrated

00:34:44,980 --> 00:34:52,260
with the gate github subversion and

00:34:48,149 --> 00:34:56,290
perforce and then we have also included

00:34:52,260 --> 00:34:59,050
jmeter and selenium no testing

00:34:56,290 --> 00:35:01,270
frameworks and then for environments

00:34:59,050 --> 00:35:03,670
support we have added chef puppet and

00:35:01,270 --> 00:35:06,550
the last logo that you see is that is

00:35:03,670 --> 00:35:07,960
our score which is our in application

00:35:06,550 --> 00:35:12,040
blueprint Oscar based application

00:35:07,960 --> 00:35:15,340
blueprint service so all these services

00:35:12,040 --> 00:35:17,530
will be available so what as a user you

00:35:15,340 --> 00:35:19,210
come in and you say i want a continuous

00:35:17,530 --> 00:35:22,480
integration environment and we will

00:35:19,210 --> 00:35:24,160
deploy all these tools and give you an

00:35:22,480 --> 00:35:26,890
instance of all this pre-integrated

00:35:24,160 --> 00:35:29,320
pre-configured ready to go so you just

00:35:26,890 --> 00:35:31,420
you just point it to the project in you

00:35:29,320 --> 00:35:35,050
know github or any other source code and

00:35:31,420 --> 00:35:38,650
then you can start using them for for

00:35:35,050 --> 00:35:42,580
continuous integration so this is a

00:35:38,650 --> 00:35:44,290
brief this is a recorded demo I have how

00:35:42,580 --> 00:35:47,950
do you you know from a user experience

00:35:44,290 --> 00:35:51,130
point of view what will you see when you

00:35:47,950 --> 00:35:53,140
come in and sign up for this service so

00:35:51,130 --> 00:35:54,940
this is the launching page you come in

00:35:53,140 --> 00:35:57,190
and say you want a continuous

00:35:54,940 --> 00:36:01,540
integration environment and then you

00:35:57,190 --> 00:36:03,190
give it a name and then the the key pair

00:36:01,540 --> 00:36:04,869
for from a security perspective and

00:36:03,190 --> 00:36:06,250
these are some of the tools that are

00:36:04,869 --> 00:36:08,140
included in the continuous integration

00:36:06,250 --> 00:36:09,670
environment today there is a continuous

00:36:08,140 --> 00:36:14,109
integration tools which is obviously

00:36:09,670 --> 00:36:16,780
Jenkins and artifactory chef and jmeter

00:36:14,109 --> 00:36:20,050
and then obviously we are going to add a

00:36:16,780 --> 00:36:22,210
few more tools here in a for code review

00:36:20,050 --> 00:36:23,890
and code coverage perspective so these

00:36:22,210 --> 00:36:26,890
are going to make it much more elaborate

00:36:23,890 --> 00:36:28,600
here so once you select it you say

00:36:26,890 --> 00:36:31,330
create an environment it has created an

00:36:28,600 --> 00:36:34,390
environment in we cloud air and you can

00:36:31,330 --> 00:36:36,550
go to the vCloud air console and look at

00:36:34,390 --> 00:36:39,369
the vm that have been deployed so in

00:36:36,550 --> 00:36:41,560
this case we deploy the four tools and

00:36:39,369 --> 00:36:42,940
you can see the photos are deployed and

00:36:41,560 --> 00:36:45,970
the resources that have been allocated

00:36:42,940 --> 00:36:49,180
to it and then you can also now

00:36:45,970 --> 00:36:53,230
access the individual consoles of each

00:36:49,180 --> 00:36:55,420
of this tool from within from within the

00:36:53,230 --> 00:36:57,849
managed services and then you can look

00:36:55,420 --> 00:36:59,890
at the status of all the running

00:36:57,849 --> 00:37:02,650
instances within that environment and

00:36:59,890 --> 00:37:06,099
then how complete control over the life

00:37:02,650 --> 00:37:07,450
cycle you can start stop delete in

00:37:06,099 --> 00:37:08,890
essentially you know it's in your head

00:37:07,450 --> 00:37:10,859
since it's a managed services you don't

00:37:08,890 --> 00:37:13,359
have the mat you know you don't have to

00:37:10,859 --> 00:37:16,150
worry about its life cycle so anything

00:37:13,359 --> 00:37:17,500
is a security patch or any other upgrade

00:37:16,150 --> 00:37:19,720
that is required that is something will

00:37:17,500 --> 00:37:21,520
be done by the partner and then you can

00:37:19,720 --> 00:37:24,369
get you know as you said you can look at

00:37:21,520 --> 00:37:28,960
deed a monitor the health look at the

00:37:24,369 --> 00:37:30,760
different usage metrics and how how each

00:37:28,960 --> 00:37:33,040
of these tools is how much resources are

00:37:30,760 --> 00:37:35,520
they consuming so I think so you get a

00:37:33,040 --> 00:37:38,830
lot more information on the whole CI

00:37:35,520 --> 00:37:41,260
environment and you have complete

00:37:38,830 --> 00:37:45,760
control of of these things have you you

00:37:41,260 --> 00:37:47,410
know how you use it so the the use cases

00:37:45,760 --> 00:37:49,270
you don't have to worry about setting it

00:37:47,410 --> 00:37:51,339
up installing it configuring it

00:37:49,270 --> 00:37:53,500
maintaining it this is all done by the

00:37:51,339 --> 00:37:56,380
the providers that service provider so

00:37:53,500 --> 00:37:58,570
you just start using it so you can start

00:37:56,380 --> 00:38:01,589
using it and we give you a sample

00:37:58,570 --> 00:38:04,930
project that takes you all the way from

00:38:01,589 --> 00:38:06,880
building to deployment so we show you

00:38:04,930 --> 00:38:08,530
how you can set up both continuous

00:38:06,880 --> 00:38:10,089
integration as well as you know you can

00:38:08,530 --> 00:38:14,140
do production deployment using this

00:38:10,089 --> 00:38:16,810
using this set of tools all right

00:38:14,140 --> 00:38:18,609
finally last two slides and this is some

00:38:16,810 --> 00:38:22,619
something new stuff that you are working

00:38:18,609 --> 00:38:25,930
with cloudbees so we are going to

00:38:22,619 --> 00:38:27,490
integrate with their Jenkins operations

00:38:25,930 --> 00:38:30,640
console we will make it available in the

00:38:27,490 --> 00:38:32,470
second half of this year so the this is

00:38:30,640 --> 00:38:34,210
is this is as usual their management

00:38:32,470 --> 00:38:37,450
tool gives you a single pane of glass

00:38:34,210 --> 00:38:41,109
for managing multiple Jenkins

00:38:37,450 --> 00:38:43,930
enterprises so with this you can now how

00:38:41,109 --> 00:38:46,780
build and test environments essentially

00:38:43,930 --> 00:38:49,030
in the cloud air and manage all those

00:38:46,780 --> 00:38:51,760
different instances from a single

00:38:49,030 --> 00:38:54,520
console from Jenkins operation operation

00:38:51,760 --> 00:38:55,900
center so this could be the each of the

00:38:54,520 --> 00:38:58,300
Jenkins master could be used by

00:38:55,900 --> 00:38:59,140
different teams but you know as one that

00:38:58,300 --> 00:39:01,930
admin can

00:38:59,140 --> 00:39:04,600
I have complete console but the key key

00:39:01,930 --> 00:39:07,660
here is Jenkins operation center has the

00:39:04,600 --> 00:39:09,970
concept of a global resource pool so

00:39:07,660 --> 00:39:13,390
when of the so and the global resource

00:39:09,970 --> 00:39:16,450
pool is always set up in the cloud so

00:39:13,390 --> 00:39:18,220
what this means is when a team is using

00:39:16,450 --> 00:39:19,990
one of the Jenkins masters for their

00:39:18,220 --> 00:39:23,850
local bills and if they're run out of

00:39:19,990 --> 00:39:26,260
resources you can start using the global

00:39:23,850 --> 00:39:27,520
the resources in the global machine pool

00:39:26,260 --> 00:39:31,390
so this is a common pool that is

00:39:27,520 --> 00:39:33,040
available across multiple masters and so

00:39:31,390 --> 00:39:35,260
so you in if you run out of resources

00:39:33,040 --> 00:39:37,900
you go to the master pool so this is

00:39:35,260 --> 00:39:43,150
coming in the second half the second one

00:39:37,900 --> 00:39:45,340
is cloud bursting so in this case many

00:39:43,150 --> 00:39:47,080
of you have some you know see I let says

00:39:45,340 --> 00:39:51,250
here running on Prem different teams

00:39:47,080 --> 00:39:53,740
using CI and now as I said you can

00:39:51,250 --> 00:39:56,620
install Jenkins orange console in the

00:39:53,740 --> 00:40:00,640
cloud or on-premise in pools sits in the

00:39:56,620 --> 00:40:03,490
cloud and if you think of a team that is

00:40:00,640 --> 00:40:05,650
running on Prem on the left hand side

00:40:03,490 --> 00:40:07,360
and they're using the local machine pool

00:40:05,650 --> 00:40:11,860
for their build jobs and there are no

00:40:07,360 --> 00:40:14,380
resources now that job can now be pushed

00:40:11,860 --> 00:40:16,180
to the cloud now essentially because we

00:40:14,380 --> 00:40:18,220
have set up the vCloud connector all the

00:40:16,180 --> 00:40:20,050
templates are available and you can

00:40:18,220 --> 00:40:21,700
launch that job in the machine pull in

00:40:20,050 --> 00:40:24,430
the cloud and you can now start using

00:40:21,700 --> 00:40:27,010
the cloud you know the cloud the global

00:40:24,430 --> 00:40:28,840
resource pool for your build jobs so

00:40:27,010 --> 00:40:30,850
again all this is coming in the second

00:40:28,840 --> 00:40:33,760
half so a lot of interesting things in

00:40:30,850 --> 00:40:34,900
the DevOps area and will be coming up

00:40:33,760 --> 00:40:37,960
with the continuous delivery as a

00:40:34,900 --> 00:40:40,840
service as well using both Jenkins and

00:40:37,960 --> 00:40:44,980
we closed we realized code stream in the

00:40:40,840 --> 00:40:47,770
second half as well alright so that was

00:40:44,980 --> 00:40:52,300
it and we have a few minutes for

00:40:47,770 --> 00:40:54,070
questions and for the questions we have

00:40:52,300 --> 00:40:56,700
questions can you please step onto the

00:40:54,070 --> 00:40:56,700
mic and

00:41:07,940 --> 00:41:19,950
yeah this light here I'm not seeing

00:41:15,140 --> 00:41:22,320
where you're using the VMware product is

00:41:19,950 --> 00:41:25,770
it behind the scenes I still have chef

00:41:22,320 --> 00:41:27,420
upper there so VMware product this is

00:41:25,770 --> 00:41:30,119
running in the cloud so this is a

00:41:27,420 --> 00:41:31,619
service offered by a partner okay

00:41:30,119 --> 00:41:33,660
continuous integration is a service

00:41:31,619 --> 00:41:35,730
running in vCloud air so we cloud air is

00:41:33,660 --> 00:41:38,839
a VMware product right so this is there

00:41:35,730 --> 00:41:42,300
this is there Ram value-added services

00:41:38,839 --> 00:41:45,950
no my question is when you're doing CD

00:41:42,300 --> 00:41:48,990
right when you're doing your deployment

00:41:45,950 --> 00:41:52,800
so the first step is you need to have an

00:41:48,990 --> 00:41:55,890
environment right so in this workflow I

00:41:52,800 --> 00:41:58,770
say yeah how is the environment build

00:41:55,890 --> 00:42:00,450
out safe even before provisioning a

00:41:58,770 --> 00:42:03,660
server right you need to provision the

00:42:00,450 --> 00:42:07,619
server yeah even before you bring in pop

00:42:03,660 --> 00:42:08,970
it correct so so as part of the setting

00:42:07,619 --> 00:42:10,800
of this environment let's in this

00:42:08,970 --> 00:42:12,599
example I showed you in the demo we have

00:42:10,800 --> 00:42:14,220
set up the chef server stood up the chef

00:42:12,599 --> 00:42:16,080
server or could be the puppet server and

00:42:14,220 --> 00:42:17,700
then essentially you will use chef for

00:42:16,080 --> 00:42:20,220
puppet to stand up your application

00:42:17,700 --> 00:42:23,160
environment for either doing the bill or

00:42:20,220 --> 00:42:26,250
using your testing unit test or a

00:42:23,160 --> 00:42:30,240
functional test or any other test so you

00:42:26,250 --> 00:42:33,240
lose chef since a chef recipes yeah I

00:42:30,240 --> 00:42:35,940
got that part even before chef for

00:42:33,240 --> 00:42:39,349
puppet come comes into play you need to

00:42:35,940 --> 00:42:42,480
spin up your vm right for your

00:42:39,349 --> 00:42:46,230
application environment that is done

00:42:42,480 --> 00:42:48,000
through chef and puppet so chef as a

00:42:46,230 --> 00:42:50,070
part of the recipe the first step would

00:42:48,000 --> 00:42:51,750
be spin up VMs let's say it's a

00:42:50,070 --> 00:42:54,240
multi-tier application your web server

00:42:51,750 --> 00:42:55,619
app server and database server so the

00:42:54,240 --> 00:42:57,839
first thing it will do is it will use a

00:42:55,619 --> 00:43:00,300
knife plugin i mean the chef plugin to

00:42:57,839 --> 00:43:03,810
create three BMS and then it will call

00:43:00,300 --> 00:43:06,000
the recipe to install the stack the

00:43:03,810 --> 00:43:07,830
database tag or whatever the database

00:43:06,000 --> 00:43:10,890
it's using whatever the app server and

00:43:07,830 --> 00:43:12,480
the the web server and then it the next

00:43:10,890 --> 00:43:14,490
step would be the configuration of that

00:43:12,480 --> 00:43:17,270
environment so it's all done in this

00:43:14,490 --> 00:43:18,510
particular example it's all done through

00:43:17,270 --> 00:43:20,700
the

00:43:18,510 --> 00:43:23,730
chef for puppet complete you're not

00:43:20,700 --> 00:43:27,300
using the blueprint incorrect so as the

00:43:23,730 --> 00:43:31,830
next release so if a customer already

00:43:27,300 --> 00:43:33,750
has a task of blueprint they can trigger

00:43:31,830 --> 00:43:36,780
that blueprint from again from chef for

00:43:33,750 --> 00:43:39,930
puppets so instead of chef you know the

00:43:36,780 --> 00:43:42,300
chef doing the individual instantiation

00:43:39,930 --> 00:43:44,820
of the VMS in the first deputy does is

00:43:42,300 --> 00:43:46,530
launched this blueprint as part of this

00:43:44,820 --> 00:43:50,250
blueprint it will stand up the complete

00:43:46,530 --> 00:43:52,410
environment and then the only step that

00:43:50,250 --> 00:43:55,380
you would do is use chef to configure

00:43:52,410 --> 00:43:57,720
the the individual so my question is on

00:43:55,380 --> 00:44:00,570
the earth so we have within our company

00:43:57,720 --> 00:44:03,240
blueprints already available right so

00:44:00,570 --> 00:44:07,260
what technology do you guys use VMware I

00:44:03,240 --> 00:44:09,870
mean which blueprint abdi aptly okay so

00:44:07,260 --> 00:44:12,870
if we have a blueprint available how do

00:44:09,870 --> 00:44:18,240
you kind of invoke through Jenkins is

00:44:12,870 --> 00:44:20,670
there any plugin so the best thing you

00:44:18,240 --> 00:44:23,910
the best way to do it is through chef

00:44:20,670 --> 00:44:26,490
for puppet because then you you know you

00:44:23,910 --> 00:44:28,380
write a script and then you launch that

00:44:26,490 --> 00:44:31,590
blueprint through that script so so

00:44:28,380 --> 00:44:34,230
Jenkins will call the chef's recipe or

00:44:31,590 --> 00:44:36,840
exactly and done that we'll call that

00:44:34,230 --> 00:44:38,010
will ya explain because once you do it

00:44:36,840 --> 00:44:40,350
that way then you have much more

00:44:38,010 --> 00:44:44,310
flexibility of using it anywhere right

00:44:40,350 --> 00:44:49,290
but even if you're using pop a droid you

00:44:44,310 --> 00:44:53,340
need does happy have a API Abby has a

00:44:49,290 --> 00:44:55,260
API so with if you are using abdi when

00:44:53,340 --> 00:44:57,660
you essentially in this particular case

00:44:55,260 --> 00:45:01,950
today you would need to have installed

00:44:57,660 --> 00:45:04,410
some of the Abdi required files and and

00:45:01,950 --> 00:45:06,180
services in order to deploy it so if you

00:45:04,410 --> 00:45:09,990
have a bleep blueprints the best way is

00:45:06,180 --> 00:45:12,360
to use the code stream product from

00:45:09,990 --> 00:45:14,760
VMware because that has built-in

00:45:12,360 --> 00:45:17,640
integration into apt e you can easily

00:45:14,760 --> 00:45:20,730
call Abdi deployment of Abdi blueprint

00:45:17,640 --> 00:45:23,100
deployment from within a stage yeah so

00:45:20,730 --> 00:45:24,200
what we are interested in is how can i

00:45:23,100 --> 00:45:27,260
call the

00:45:24,200 --> 00:45:29,829
blueprint from Jenkins oh I directly

00:45:27,260 --> 00:45:33,260
from Jenkinson directly from gently okay

00:45:29,829 --> 00:45:47,030
so we can take that offline okay thank

00:45:33,260 --> 00:45:49,480
you any other question all right thank

00:45:47,030 --> 00:45:49,480
you

00:45:57,750 --> 00:45:59,810

YouTube URL: https://www.youtube.com/watch?v=4frLvneiV3A


