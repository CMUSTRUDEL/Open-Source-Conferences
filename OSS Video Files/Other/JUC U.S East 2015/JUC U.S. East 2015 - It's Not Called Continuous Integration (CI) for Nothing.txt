Title: JUC U.S. East 2015 - It's Not Called Continuous Integration (CI) for Nothing
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	Dan Boutin, SOASTA 

This talk will dig deeply into continuous integration (CI) and the key factors that make up the overall CI process. It will cover the relationships and process flows between change management, configuration management and release/build management. Additionally, we will explore how the CI process, when coupled with a solid performance engineering discipline across the product lifecycle, can result in a better user experience for web and mobile applications. We will speak about the entire lifecycle, the "conveyor belt" of the application lifecycle, with concentration on the Big 3 processes that support the overall CI strategy. Included will be a real-world example of how SOASTA uses Jenkins for its conveyor belt and how this process enabled SOASTA to complete over 100 product releases in 2014 and still maintain customer SLA's for its SaaS product offerings.
Captions: 
	00:00:15,030 --> 00:00:19,500
my name is Dan boonton I'm from Sosa and

00:00:17,430 --> 00:00:22,200
I probably got the loudest Mike in the

00:00:19,500 --> 00:00:24,720
building yeah thank you all for coming

00:00:22,200 --> 00:00:26,369
I'm going to talk today about it's not

00:00:24,720 --> 00:00:28,560
called continuous integration for

00:00:26,369 --> 00:00:29,970
nothing now probably wondering what what

00:00:28,560 --> 00:00:31,680
is that title mean I'm sure you read the

00:00:29,970 --> 00:00:34,079
abstract and thought hmm what does that

00:00:31,680 --> 00:00:35,130
title have to do with that abstract so

00:00:34,079 --> 00:00:38,399
what I'm actually going to walk through

00:00:35,130 --> 00:00:40,170
today is I'm from a company called sosta

00:00:38,399 --> 00:00:42,030
or performance analytics performance

00:00:40,170 --> 00:00:44,129
testing company i'm going to talk walk

00:00:42,030 --> 00:00:46,079
you through what we look at when we

00:00:44,129 --> 00:00:48,030
looked at continuous integration and how

00:00:46,079 --> 00:00:50,070
it can help us build a product in the

00:00:48,030 --> 00:00:51,870
market so we're uniquely or a vendor

00:00:50,070 --> 00:00:53,429
that doesn't have I know we don't know

00:00:51,870 --> 00:00:54,719
if or a product for sale in this space

00:00:53,429 --> 00:00:57,300
really what I'm going to be talking

00:00:54,719 --> 00:00:59,159
about is best practice and then a lot of

00:00:57,300 --> 00:01:02,219
things that are underneath that go into

00:00:59,159 --> 00:01:04,680
continuous integration that somehow when

00:01:02,219 --> 00:01:06,479
you threw everything at this the whole

00:01:04,680 --> 00:01:08,159
marketplace is a lot about buzz words i

00:01:06,479 --> 00:01:10,380
hear continuous integration continuous

00:01:08,159 --> 00:01:12,360
delivery devops well what really does

00:01:10,380 --> 00:01:14,700
that mean and what are the critical

00:01:12,360 --> 00:01:18,840
pieces of it and what did we look at

00:01:14,700 --> 00:01:22,500
first on our conveyor belt of really

00:01:18,840 --> 00:01:24,840
software development so what I'm going

00:01:22,500 --> 00:01:28,200
to go through today I'm introduction one

00:01:24,840 --> 00:01:30,210
slide of what what we do and why speeds

00:01:28,200 --> 00:01:31,860
important to us and then I'm going to

00:01:30,210 --> 00:01:34,259
talk about the need for continuous and

00:01:31,860 --> 00:01:35,310
what we see the benefits are and you'll

00:01:34,259 --> 00:01:36,899
probably nod your head through that

00:01:35,310 --> 00:01:38,939
whole section because it's something

00:01:36,899 --> 00:01:40,710
that everyone in the marketplace is well

00:01:38,939 --> 00:01:43,500
aware of and then I'm going to talk

00:01:40,710 --> 00:01:45,359
about the big three what they are what

00:01:43,500 --> 00:01:47,909
they do why they're important to

00:01:45,359 --> 00:01:49,950
continuous integration and DevOps and

00:01:47,909 --> 00:01:51,869
why they're probably the most important

00:01:49,950 --> 00:01:53,850
critical components to any development

00:01:51,869 --> 00:01:56,430
lifecycle and then I'm going to talk a

00:01:53,850 --> 00:01:58,229
little bit about configuration in a CI

00:01:56,430 --> 00:01:59,130
with mobile and performance and I'm

00:01:58,229 --> 00:02:01,679
actually going to walk you through a

00:01:59,130 --> 00:02:04,950
little bit as to what we do and how we

00:02:01,679 --> 00:02:07,350
were able to do 450 for product releases

00:02:04,950 --> 00:02:08,700
last year think about that number for a

00:02:07,350 --> 00:02:11,880
minute three products that's that's a

00:02:08,700 --> 00:02:13,620
lot so we do quite a bit of continuous

00:02:11,880 --> 00:02:16,470
testing continuous integration that will

00:02:13,620 --> 00:02:18,570
walk through that today so so still what

00:02:16,470 --> 00:02:21,390
we do and we have a booth out there you

00:02:18,570 --> 00:02:23,430
can see this later we've performed the

00:02:21,390 --> 00:02:25,200
company's been around since 2006 camp

00:02:23,430 --> 00:02:27,510
started as a performance testing company

00:02:25,200 --> 00:02:28,650
we performed over 10 million tests from

00:02:27,510 --> 00:02:32,209
the cloud or

00:02:28,650 --> 00:02:35,189
since 2008 that's quite a few tests and

00:02:32,209 --> 00:02:37,349
user experiences we actually have tested

00:02:35,189 --> 00:02:40,019
over 100 billion user experiences since

00:02:37,349 --> 00:02:42,239
our product in that space launched i'm

00:02:40,019 --> 00:02:44,879
going to say two and a half years ago so

00:02:42,239 --> 00:02:47,310
we're very aware of user experience how

00:02:44,879 --> 00:02:49,290
that relates to continuous integration

00:02:47,310 --> 00:02:51,269
how that relates to performance and how

00:02:49,290 --> 00:02:53,189
that relates back to continuous

00:02:51,269 --> 00:02:56,700
integration in our mind it's like all

00:02:53,189 --> 00:02:59,299
it's all about the user so that's the

00:02:56,700 --> 00:03:01,650
social introduction i got my one slide

00:02:59,299 --> 00:03:03,930
so the need for continuous the next

00:03:01,650 --> 00:03:08,700
section I mean what's not to like about

00:03:03,930 --> 00:03:11,010
continuous integration right you can do

00:03:08,700 --> 00:03:13,109
it in small batches it fits very well in

00:03:11,010 --> 00:03:15,120
the agile stream you want to get things

00:03:13,109 --> 00:03:16,650
out to market get them evaluated get

00:03:15,120 --> 00:03:19,290
revenue in and then rinse lather repeat

00:03:16,650 --> 00:03:20,970
and keep building upon that process you

00:03:19,290 --> 00:03:22,470
want to bet able to have comprehensive

00:03:20,970 --> 00:03:24,000
version control you heard this during

00:03:22,470 --> 00:03:25,829
the keynote this morning if you were in

00:03:24,000 --> 00:03:28,590
this big room that was one of the big

00:03:25,829 --> 00:03:31,439
items that was covered was importance of

00:03:28,590 --> 00:03:33,419
version control you want to be able to

00:03:31,439 --> 00:03:35,099
have simple branch strategies don't want

00:03:33,419 --> 00:03:37,829
to make things complex this isn't a

00:03:35,099 --> 00:03:39,299
complex object oriented airline you're

00:03:37,829 --> 00:03:41,609
building it's it's essentially just

00:03:39,299 --> 00:03:43,019
software you want to be able to automate

00:03:41,609 --> 00:03:44,730
where it makes sense i always tell

00:03:43,019 --> 00:03:46,349
people automate the simple stuff first

00:03:44,730 --> 00:03:47,940
because that ends up being the

00:03:46,349 --> 00:03:50,699
repetitive time-consuming where errors

00:03:47,940 --> 00:03:53,549
can be made you want to have a

00:03:50,699 --> 00:03:56,040
continuous feedback loop if I'm doing a

00:03:53,549 --> 00:03:57,150
release and I'm measuring performance of

00:03:56,040 --> 00:03:59,370
that release I want to measure it

00:03:57,150 --> 00:04:01,229
against a previous release did something

00:03:59,370 --> 00:04:03,510
get faster did something get slower if

00:04:01,229 --> 00:04:05,840
it did get slower I want to change that

00:04:03,510 --> 00:04:07,919
back to where it was or improve upon it

00:04:05,840 --> 00:04:08,699
and I want to make sure that goes all

00:04:07,919 --> 00:04:10,530
the way back through the development

00:04:08,699 --> 00:04:13,859
cycle to the original requirements

00:04:10,530 --> 00:04:15,810
business developer and an emphasis on

00:04:13,859 --> 00:04:19,039
working builds I want to be able to have

00:04:15,810 --> 00:04:21,209
that assembly line continuously moving I

00:04:19,039 --> 00:04:23,010
want to have consistent environments

00:04:21,209 --> 00:04:24,770
because if they're not when I go to test

00:04:23,010 --> 00:04:26,669
and release if something has changed

00:04:24,770 --> 00:04:28,889
chances are something will slip through

00:04:26,669 --> 00:04:30,389
something will fail if it's different

00:04:28,889 --> 00:04:33,240
you can rest assured at some point it'll

00:04:30,389 --> 00:04:34,860
pop up and the important part that i

00:04:33,240 --> 00:04:36,479
like is developers and testers would

00:04:34,860 --> 00:04:38,219
continuous integration become really

00:04:36,479 --> 00:04:40,409
best friends now maybe they're already

00:04:38,219 --> 00:04:42,089
that way in some of the agile worlds but

00:04:40,409 --> 00:04:46,679
in this with continuous integration you

00:04:42,089 --> 00:04:50,729
almost have to be so the big three what

00:04:46,679 --> 00:04:53,659
is it well with the NBA season just any

00:04:50,729 --> 00:04:55,830
way of all what's been missing and

00:04:53,659 --> 00:04:58,050
really if you look at continuous

00:04:55,830 --> 00:05:00,899
integration what's been missing to me is

00:04:58,050 --> 00:05:06,139
the focus on three major processes that

00:05:00,899 --> 00:05:08,669
really touch the entire life cycle and

00:05:06,139 --> 00:05:10,199
the big three I call them the big three

00:05:08,669 --> 00:05:13,589
Cleveland lost the other night so that

00:05:10,199 --> 00:05:15,989
was the new big three but really was it

00:05:13,589 --> 00:05:17,610
the Miami Heat no not so much this

00:05:15,989 --> 00:05:20,039
played really well in Miami by the way

00:05:17,610 --> 00:05:22,019
but the booze never stopped after

00:05:20,039 --> 00:05:23,789
they'll Cleveland slide but I'm actually

00:05:22,019 --> 00:05:26,849
from Boston the original big three was

00:05:23,789 --> 00:05:30,449
bird parish and Mikael right that will

00:05:26,849 --> 00:05:32,989
always be the big three and for those

00:05:30,449 --> 00:05:36,119
that need a more current history lesson

00:05:32,989 --> 00:05:38,879
we have the 2008 big three from Boston

00:05:36,119 --> 00:05:41,849
but since we're in this venue talking

00:05:38,879 --> 00:05:43,939
about see I and software development

00:05:41,849 --> 00:05:47,339
will have to put those three aside and

00:05:43,939 --> 00:05:48,899
let's talk about what the big three is

00:05:47,339 --> 00:05:52,499
but first i want to put everything into

00:05:48,899 --> 00:05:55,319
context around devops so let's break

00:05:52,499 --> 00:05:58,169
down devops where is the process broken

00:05:55,319 --> 00:06:00,869
is it broken inside development is it

00:05:58,169 --> 00:06:04,889
broken inside test is it broken inside

00:06:00,869 --> 00:06:07,740
operations I argue no in the first tower

00:06:04,889 --> 00:06:09,719
else I'll give everyone it's a developer

00:06:07,740 --> 00:06:11,789
the you know the nod that hey you're

00:06:09,719 --> 00:06:13,439
great coders you do your job really

00:06:11,789 --> 00:06:15,479
really well why because it's all in that

00:06:13,439 --> 00:06:18,119
tower i can define how i do it when i do

00:06:15,479 --> 00:06:19,499
it how fast what language everything if

00:06:18,119 --> 00:06:21,509
i go into testing i could say the same

00:06:19,499 --> 00:06:24,239
thing about testing within the

00:06:21,509 --> 00:06:26,939
functional domain unit domain uat domain

00:06:24,239 --> 00:06:29,089
by go in operations i have never been in

00:06:26,939 --> 00:06:31,079
a in a knock that doesn't have

00:06:29,089 --> 00:06:33,179
performance monitoring application

00:06:31,079 --> 00:06:36,029
performance monitoring in and all the

00:06:33,179 --> 00:06:37,829
processes just a heartbeat away it's

00:06:36,029 --> 00:06:40,229
when things start to go across those

00:06:37,829 --> 00:06:42,209
silos where things break down and that's

00:06:40,229 --> 00:06:44,039
why you here DevOps that's because

00:06:42,209 --> 00:06:45,839
devops doesn't have the word test in it

00:06:44,039 --> 00:06:48,659
which kind of all goes me to this day

00:06:45,839 --> 00:06:51,539
but so it's about the relationships

00:06:48,659 --> 00:06:53,370
between these three silos anybody know

00:06:51,539 --> 00:06:55,110
where this is I always give away

00:06:53,370 --> 00:06:58,620
prize if anybody knows where that says

00:06:55,110 --> 00:06:59,940
this is an actual farm nobody I'll give

00:06:58,620 --> 00:07:01,860
you an opportunity to send me and i'll

00:06:59,940 --> 00:07:05,190
send you a phone charger if you know

00:07:01,860 --> 00:07:07,199
where it is so the three silos

00:07:05,190 --> 00:07:08,820
essentially continuous integration is

00:07:07,199 --> 00:07:11,280
all about the touch points between the

00:07:08,820 --> 00:07:15,020
silos and there are a couple of them to

00:07:11,280 --> 00:07:17,160
keep your life cycle going you've got a

00:07:15,020 --> 00:07:19,440
touch point between application

00:07:17,160 --> 00:07:22,440
development and QA actually three of

00:07:19,440 --> 00:07:24,360
them four of them if I really point home

00:07:22,440 --> 00:07:26,490
and then between QA and test same thing

00:07:24,360 --> 00:07:28,410
those are where the problems usually lie

00:07:26,490 --> 00:07:29,820
because we're going from one area of an

00:07:28,410 --> 00:07:34,620
organization that's been built to the

00:07:29,820 --> 00:07:36,510
next and on and so on so the focus lines

00:07:34,620 --> 00:07:37,919
and the big three really between I have

00:07:36,510 --> 00:07:41,970
development and test here but as same

00:07:37,919 --> 00:07:43,410
applies to test two operations the big

00:07:41,970 --> 00:07:46,110
three are configuration management

00:07:43,410 --> 00:07:49,110
release management and change management

00:07:46,110 --> 00:07:50,580
and I could say it's a big for with

00:07:49,110 --> 00:07:52,620
performance management and I'm going to

00:07:50,580 --> 00:07:54,229
touch on performance in a little bit and

00:07:52,620 --> 00:07:56,699
why that should be part of that

00:07:54,229 --> 00:07:58,500
discussion but really when you're

00:07:56,699 --> 00:08:01,680
building a product that you're taking

00:07:58,500 --> 00:08:03,690
the market those three processes are key

00:08:01,680 --> 00:08:05,970
to anything you need to be able to

00:08:03,690 --> 00:08:08,010
understand change management is nothing

00:08:05,970 --> 00:08:09,720
more than what am i building and where

00:08:08,010 --> 00:08:12,479
did it come from it did it come from a

00:08:09,720 --> 00:08:14,460
new business requirement or did it come

00:08:12,479 --> 00:08:15,900
from a ticket from operations where

00:08:14,460 --> 00:08:17,340
somebody called and complained about

00:08:15,900 --> 00:08:19,289
something or did it come from a bug

00:08:17,340 --> 00:08:21,870
during a test those are the three ways

00:08:19,289 --> 00:08:24,330
that changes get kicked off well a

00:08:21,870 --> 00:08:28,550
change really leads to some work being

00:08:24,330 --> 00:08:31,860
done and that leads to a what a

00:08:28,550 --> 00:08:34,770
configuration the configuration and gets

00:08:31,860 --> 00:08:36,839
put together in a bill of materials test

00:08:34,770 --> 00:08:39,180
it and then released those three

00:08:36,839 --> 00:08:41,760
together they span all three of the

00:08:39,180 --> 00:08:45,270
silos in and they're like a three-legged

00:08:41,760 --> 00:08:46,350
bar stool you essentially sawed off one

00:08:45,270 --> 00:08:48,089
of the legs and the bar you're gonna

00:08:46,350 --> 00:08:50,400
fall off the bar stool so those three

00:08:48,089 --> 00:08:52,290
really in my opinion or what continue it

00:08:50,400 --> 00:08:54,779
continuous integration is all about and

00:08:52,290 --> 00:08:56,970
that's really the way we look at it with

00:08:54,779 --> 00:08:59,279
at sosta and I'm going to get into the

00:08:56,970 --> 00:09:02,160
performance management piece as well so

00:08:59,279 --> 00:09:04,170
think of software and I do I mean we get

00:09:02,160 --> 00:09:05,760
shipped something from Amazon what's on

00:09:04,170 --> 00:09:06,930
a box a bill of materials it talks about

00:09:05,760 --> 00:09:08,880
every single thing that's in

00:09:06,930 --> 00:09:11,760
well the software should be no different

00:09:08,880 --> 00:09:13,230
and really it's not so we really need to

00:09:11,760 --> 00:09:15,839
look at is it software really is your

00:09:13,230 --> 00:09:17,310
configure ate your conveyor belt and you

00:09:15,839 --> 00:09:19,110
want to get it from the point where

00:09:17,310 --> 00:09:21,089
you're doing everything manually and

00:09:19,110 --> 00:09:23,580
lots of handoffs which leads to errors

00:09:21,089 --> 00:09:25,260
in rework to something more along the

00:09:23,580 --> 00:09:28,770
lines upon the right where you're doing

00:09:25,260 --> 00:09:31,290
more automation more linkage between the

00:09:28,770 --> 00:09:33,510
handoffs so that way you essentially

00:09:31,290 --> 00:09:39,779
don't have a broken configure broken

00:09:33,510 --> 00:09:42,300
conveyor belt so what so why is

00:09:39,779 --> 00:09:45,149
continuous integration critical speed

00:09:42,300 --> 00:09:46,800
and time to market is everything and and

00:09:45,149 --> 00:09:48,959
we can attest to that as a software

00:09:46,800 --> 00:09:50,640
company the quicker we get something to

00:09:48,959 --> 00:09:52,170
market is a feature the quicker it's

00:09:50,640 --> 00:09:55,140
going to generate revenue brand

00:09:52,170 --> 00:09:57,930
recognition customer satisfaction I see

00:09:55,140 --> 00:10:00,980
it in every every vertical I go into

00:09:57,930 --> 00:10:03,420
whether it's retail whether it's banking

00:10:00,980 --> 00:10:05,399
it could be something as simple as a

00:10:03,420 --> 00:10:07,170
differentiator where maybe you're

00:10:05,399 --> 00:10:09,930
developing an app and you've figured out

00:10:07,170 --> 00:10:12,390
a way to have people buy from your site

00:10:09,930 --> 00:10:13,529
a lot easier than somebody else and I

00:10:12,390 --> 00:10:15,540
can give you an example because I do

00:10:13,529 --> 00:10:20,130
this all the time any of you here amazon

00:10:15,540 --> 00:10:22,290
prime members a lot of everybody now if

00:10:20,130 --> 00:10:25,170
if you know that you're gonna buy an

00:10:22,290 --> 00:10:27,750
item whether it's a book a movie or

00:10:25,170 --> 00:10:30,390
whatever isn't it a lot more simple to

00:10:27,750 --> 00:10:32,580
just go and do a one click on amazon and

00:10:30,390 --> 00:10:34,110
to go shopping and do a 20 step

00:10:32,580 --> 00:10:36,690
somewhere else even if it's to save a

00:10:34,110 --> 00:10:38,670
nickel right that's one of the

00:10:36,690 --> 00:10:41,339
differentiators I'll admit that I do it

00:10:38,670 --> 00:10:43,500
and that's a that's a go-to-market speed

00:10:41,339 --> 00:10:47,390
that's a perfect example of making an

00:10:43,500 --> 00:10:49,680
app user experience friendly and

00:10:47,390 --> 00:10:51,870
generating revenue as quickly as

00:10:49,680 --> 00:10:56,910
possible they're masters at it I always

00:10:51,870 --> 00:10:59,029
give that example so the conveyor belt

00:10:56,910 --> 00:11:01,890
and I don't know you'll probably have to

00:10:59,029 --> 00:11:03,899
youtube this this is a you Lucille Ball

00:11:01,890 --> 00:11:05,579
show where they were her and I think

00:11:03,899 --> 00:11:07,350
it's Ethel where we're doing chocolates

00:11:05,579 --> 00:11:08,820
and the conveyor belt was moving at a

00:11:07,350 --> 00:11:11,579
certain speed and they couldn't keep up

00:11:08,820 --> 00:11:13,620
well the conveyor belt we can only test

00:11:11,579 --> 00:11:15,390
as fast as a conveyor belt moves but if

00:11:13,620 --> 00:11:17,100
you're doing agile and doing sprints and

00:11:15,390 --> 00:11:20,339
you're doing faster and faster releases

00:11:17,100 --> 00:11:22,170
well unfortunately Lucille kind of

00:11:20,339 --> 00:11:24,899
and keep up and that's what usually

00:11:22,170 --> 00:11:26,459
happens when because test is the one

00:11:24,899 --> 00:11:29,550
that becomes quote the bottleneck and

00:11:26,459 --> 00:11:31,920
then I hear things like healthcare gov

00:11:29,550 --> 00:11:33,959
where Kathleen Sebelius get up in front

00:11:31,920 --> 00:11:38,819
of Congress and said we just didn't have

00:11:33,959 --> 00:11:40,050
time to test come on I love that comment

00:11:38,819 --> 00:11:41,610
I usually have that slide up here but i

00:11:40,050 --> 00:11:45,839
was at Washington's I wasn't sure how

00:11:41,610 --> 00:11:47,970
that would pick up but the big three

00:11:45,839 --> 00:11:49,920
really drives the life cycle and the

00:11:47,970 --> 00:11:53,519
more you automate that the more you have

00:11:49,920 --> 00:11:55,290
those three processes down as the most

00:11:53,519 --> 00:11:56,879
solid throughout the lifecycle in

00:11:55,290 --> 00:11:59,040
everybody on the same page with those

00:11:56,879 --> 00:12:01,439
three that's you're going to get the

00:11:59,040 --> 00:12:02,639
most bang for the buck out of that so

00:12:01,439 --> 00:12:05,209
what I'm going to show you now is a

00:12:02,639 --> 00:12:07,170
little bit as how things have changed I

00:12:05,209 --> 00:12:11,370
don't know how many of you here familiar

00:12:07,170 --> 00:12:14,850
with the OSI model anybody but most

00:12:11,370 --> 00:12:16,319
everybody would be it looks a lot like

00:12:14,850 --> 00:12:18,509
an organization and a lot of IT

00:12:16,319 --> 00:12:21,019
operations chops too doesn't it we have

00:12:18,509 --> 00:12:23,339
the network team the database team

00:12:21,019 --> 00:12:25,379
applications team all the different

00:12:23,339 --> 00:12:26,759
layers and one of the things that I

00:12:25,379 --> 00:12:29,370
always used to say from a performance

00:12:26,759 --> 00:12:30,809
perspective is each one of those was

00:12:29,370 --> 00:12:32,610
assigned if I if I used to go into

00:12:30,809 --> 00:12:34,279
organizations and they'd have the NOC up

00:12:32,610 --> 00:12:38,220
and it would say hey or four five nines

00:12:34,279 --> 00:12:40,740
really your five nines but you were down

00:12:38,220 --> 00:12:42,420
twenty percent of the time last week how

00:12:40,740 --> 00:12:44,939
can you be five nines and you'd have the

00:12:42,420 --> 00:12:47,249
network I'm five nines I'm five nines

00:12:44,939 --> 00:12:48,689
I'm five nines the problem is when you

00:12:47,249 --> 00:12:50,790
put those on top of each other like that

00:12:48,689 --> 00:12:54,660
in the network I said all I was done

00:12:50,790 --> 00:12:56,490
from midnight to to the transport layer

00:12:54,660 --> 00:12:58,259
guy or Appalachian guy said well you

00:12:56,490 --> 00:13:00,089
know we did an upgrade from two to four

00:12:58,259 --> 00:13:01,649
of a sudden you add them all up draw a

00:13:00,089 --> 00:13:03,839
line on the bottom and here's your your

00:13:01,649 --> 00:13:05,279
sum total is eighty percent well that's

00:13:03,839 --> 00:13:06,959
what the users experience that's why

00:13:05,279 --> 00:13:08,790
you've got a lot of tickets open that's

00:13:06,959 --> 00:13:11,160
why your revenues down so you're not

00:13:08,790 --> 00:13:13,319
really five nines and when you dig under

00:13:11,160 --> 00:13:15,629
that it's those three processes that are

00:13:13,319 --> 00:13:18,809
the root cause of why you you

00:13:15,629 --> 00:13:20,999
essentially don't get to five nines one

00:13:18,809 --> 00:13:23,519
of the things that really has gone on in

00:13:20,999 --> 00:13:26,429
the industry whoops didn't mean to do

00:13:23,519 --> 00:13:29,069
that is performance testing over the

00:13:26,429 --> 00:13:31,649
past 20 years has been something that is

00:13:29,069 --> 00:13:33,350
all around writing scripts spending a

00:13:31,649 --> 00:13:35,720
lot of time writing scripts

00:13:33,350 --> 00:13:38,720
a little bit of time writing essentially

00:13:35,720 --> 00:13:41,540
running a test and the entire market has

00:13:38,720 --> 00:13:44,390
gone towards concentration of writing

00:13:41,540 --> 00:13:45,890
scripts for performance testing and

00:13:44,390 --> 00:13:48,200
that's because of tools that have been

00:13:45,890 --> 00:13:49,640
available over the past 25 years that's

00:13:48,200 --> 00:13:51,320
what they do I've gone into

00:13:49,640 --> 00:13:53,510
organizations where I had somebody tell

00:13:51,320 --> 00:13:56,140
me hey you know what my test

00:13:53,510 --> 00:13:59,510
organization is an SC I level three

00:13:56,140 --> 00:14:00,800
really maybe you should move your test

00:13:59,510 --> 00:14:02,990
organization into the development

00:14:00,800 --> 00:14:04,340
station hey you know hope group because

00:14:02,990 --> 00:14:06,980
they're not level three and they're

00:14:04,340 --> 00:14:08,870
giving you guys a lot of bugs why do you

00:14:06,980 --> 00:14:10,970
need to be a development organization in

00:14:08,870 --> 00:14:13,190
a test arena really what you want to be

00:14:10,970 --> 00:14:15,080
able to do is test fast writing code is

00:14:13,190 --> 00:14:17,630
not something that's fast and you want

00:14:15,080 --> 00:14:20,240
to be able to execute test as the more

00:14:17,630 --> 00:14:21,800
you can during a window like Kathleen

00:14:20,240 --> 00:14:23,240
Sebelius said didn't have time to test

00:14:21,800 --> 00:14:27,500
because they didn't have time to code

00:14:23,240 --> 00:14:29,420
the tests so performance engineering

00:14:27,500 --> 00:14:31,250
these days is about testing but it's

00:14:29,420 --> 00:14:33,920
about those three processes getting

00:14:31,250 --> 00:14:36,020
those correct and then managing them

00:14:33,920 --> 00:14:38,090
with traditional IT operations processes

00:14:36,020 --> 00:14:40,970
like capacity management like

00:14:38,090 --> 00:14:43,850
performance management scalability those

00:14:40,970 --> 00:14:45,650
kinds of kind of processes you see in

00:14:43,850 --> 00:14:46,970
the bigger institutions the bigger banks

00:14:45,650 --> 00:14:49,160
that they're behind the scenes but

00:14:46,970 --> 00:14:51,080
they're still there those guys all get

00:14:49,160 --> 00:14:53,120
married into the change release

00:14:51,080 --> 00:14:55,490
configuration process but it's

00:14:53,120 --> 00:14:57,530
engineering and the reason for that is

00:14:55,490 --> 00:14:59,960
because of the OSI model on the right

00:14:57,530 --> 00:15:01,970
that's not what it looks like now when I

00:14:59,960 --> 00:15:04,040
kind of gave it away already this is

00:15:01,970 --> 00:15:06,380
what it looks like this is actually an

00:15:04,040 --> 00:15:09,610
architecture map from one of my

00:15:06,380 --> 00:15:12,890
customers so pretty complex looking

00:15:09,610 --> 00:15:14,180
thing pretty pretty big beast you've got

00:15:12,890 --> 00:15:16,400
to be able to manage the big three with

00:15:14,180 --> 00:15:18,860
that kind of an environment because it

00:15:16,400 --> 00:15:25,640
is all about speed and that's what keeps

00:15:18,860 --> 00:15:27,200
it running I talked about that so just

00:15:25,640 --> 00:15:29,690
lay in the foundation a little bit a

00:15:27,200 --> 00:15:31,220
factory kind of streamlines things and a

00:15:29,690 --> 00:15:34,970
lot of what you want to look at when

00:15:31,220 --> 00:15:36,740
you're doing the essentially putting all

00:15:34,970 --> 00:15:38,840
those your software bill of materials in

00:15:36,740 --> 00:15:40,970
your and your work together is yes you

00:15:38,840 --> 00:15:42,680
want to assemble it and you really what

00:15:40,970 --> 00:15:46,459
you're doing is does it does it work as

00:15:42,680 --> 00:15:49,430
it's designed does it perform under

00:15:46,459 --> 00:15:52,560
extreme conditions lots of users

00:15:49,430 --> 00:15:54,300
bandwidth different connectivity what

00:15:52,560 --> 00:15:57,600
actually happens when people use it and

00:15:54,300 --> 00:16:00,269
then obviously you go through that whole

00:15:57,600 --> 00:16:01,709
cycle you want to look at what people

00:16:00,269 --> 00:16:04,500
that are doing that are really using

00:16:01,709 --> 00:16:06,149
your app we've done some examples where

00:16:04,500 --> 00:16:09,629
I think I've got some of them later on

00:16:06,149 --> 00:16:11,009
but one thing we see a lot of is a lot

00:16:09,629 --> 00:16:13,740
of people in the performance space say

00:16:11,009 --> 00:16:15,269
or sit in a room and they talk about I'm

00:16:13,740 --> 00:16:16,319
going to design test cases and here's

00:16:15,269 --> 00:16:18,209
how people are going to use it they're

00:16:16,319 --> 00:16:20,040
going to go step one step two step three

00:16:18,209 --> 00:16:23,310
step for step 5 you know go to the web

00:16:20,040 --> 00:16:26,329
page do a search on a product select

00:16:23,310 --> 00:16:29,699
what I want you know color pants size

00:16:26,329 --> 00:16:33,600
put it my car same thing and what we see

00:16:29,699 --> 00:16:35,699
happening is the site's not used that

00:16:33,600 --> 00:16:37,889
way maybe somebody goes you know step

00:16:35,699 --> 00:16:40,470
one step three step 5 step for step two

00:16:37,889 --> 00:16:42,029
we didn't test that and it breaks but

00:16:40,470 --> 00:16:43,529
the only way you know that that

00:16:42,029 --> 00:16:46,079
alternate path is being used is

00:16:43,529 --> 00:16:49,250
essentially to know what the users are

00:16:46,079 --> 00:16:51,660
doing and in this life cycle using

00:16:49,250 --> 00:16:53,430
essentially data that comes from real

00:16:51,660 --> 00:16:54,930
user experiences and folding that and

00:16:53,430 --> 00:16:56,639
the test cases folding that back into

00:16:54,930 --> 00:16:58,319
your change management because you want

00:16:56,639 --> 00:17:01,050
to be able to change the application or

00:16:58,319 --> 00:17:03,089
their website to be able to run the way

00:17:01,050 --> 00:17:04,559
users are using it because that's if

00:17:03,089 --> 00:17:06,299
they found a way to use it like the

00:17:04,559 --> 00:17:07,589
Amazon one click that's getting you more

00:17:06,299 --> 00:17:09,630
revenue then that's what you should do

00:17:07,589 --> 00:17:10,679
you need to keep that competitive

00:17:09,630 --> 00:17:15,659
advantage because if you don't do it

00:17:10,679 --> 00:17:19,439
somebody else will so if we tie this to

00:17:15,659 --> 00:17:20,850
software it's really building it doing

00:17:19,439 --> 00:17:22,919
your change management your requirements

00:17:20,850 --> 00:17:25,409
management getting a functional

00:17:22,919 --> 00:17:27,449
validation you want to be able to ensure

00:17:25,409 --> 00:17:29,250
that it performs properly you don't want

00:17:27,449 --> 00:17:31,049
to overload it you don't want it to tip

00:17:29,250 --> 00:17:33,150
over because if it tips over you end up

00:17:31,049 --> 00:17:35,070
on Twitter where somebody says you know

00:17:33,150 --> 00:17:36,840
this application went down and I wasn't

00:17:35,070 --> 00:17:39,480
able I do it all the time I travel a lot

00:17:36,840 --> 00:17:41,159
and if you have have my twitter i

00:17:39,480 --> 00:17:42,510
guarantee you at least once a week i'm

00:17:41,159 --> 00:17:45,000
going to tweet something not so nice

00:17:42,510 --> 00:17:46,230
about delta air lines because if i'm

00:17:45,000 --> 00:17:47,730
boarding a plane and I can't get my

00:17:46,230 --> 00:17:50,970
mobile boarding pass they won't let me

00:17:47,730 --> 00:17:53,190
on so and I tweet that a lot cuz it

00:17:50,970 --> 00:17:55,210
doesn't work on an iPad works great on a

00:17:53,190 --> 00:17:59,900
phone not so hot on ipad

00:17:55,210 --> 00:18:02,150
and they follow me on Twitter so that's

00:17:59,900 --> 00:18:04,550
another long story but what actually

00:18:02,150 --> 00:18:05,930
happens and then again what real users

00:18:04,550 --> 00:18:07,280
are doing and you and you cycle through

00:18:05,930 --> 00:18:10,640
that and I'm actually going to overlay

00:18:07,280 --> 00:18:15,860
what we do in our life cycle in a second

00:18:10,640 --> 00:18:19,370
year as well so CI with mobile and

00:18:15,860 --> 00:18:20,690
performance tests so our life cycle it's

00:18:19,370 --> 00:18:24,560
going to simplify it a little bit here

00:18:20,690 --> 00:18:25,790
so it really starts it says I just made

00:18:24,560 --> 00:18:26,930
a code change but that's the change

00:18:25,790 --> 00:18:28,490
management piece I'm going to get a

00:18:26,930 --> 00:18:30,500
change from one of three places I'm

00:18:28,490 --> 00:18:32,570
going to get a change from a customer

00:18:30,500 --> 00:18:33,740
request to feature enhancement I'm going

00:18:32,570 --> 00:18:35,630
to get a change from a new requirement

00:18:33,740 --> 00:18:38,690
or I'm going to get a change a change

00:18:35,630 --> 00:18:41,630
from an open ticket or a buck or some

00:18:38,690 --> 00:18:42,640
kind of feature breakage I'm going to go

00:18:41,630 --> 00:18:44,480
ahead and I'm going to run some

00:18:42,640 --> 00:18:46,580
functional tests to make sure it got

00:18:44,480 --> 00:18:48,170
tested properly yes we use Jenkins and

00:18:46,580 --> 00:18:53,330
actually show you some screenshots in

00:18:48,170 --> 00:18:55,040
the process flow in a second here we

00:18:53,330 --> 00:18:57,620
spin up our tests in the cloud or a SAS

00:18:55,040 --> 00:18:59,180
SAS model so you know want to be the big

00:18:57,620 --> 00:19:01,100
data center that you saw in the keynote

00:18:59,180 --> 00:19:02,660
where you had three free buildings there

00:19:01,100 --> 00:19:04,420
we just spin up when we need it and we

00:19:02,660 --> 00:19:06,950
spin it back down when we don't need it

00:19:04,420 --> 00:19:08,450
you want to be able to run load tests

00:19:06,950 --> 00:19:09,950
which we do you want to be able to

00:19:08,450 --> 00:19:11,540
determine can it perform is the truck

00:19:09,950 --> 00:19:14,560
going to tip over the ship sink or

00:19:11,540 --> 00:19:17,900
whatever the site go down and no revenue

00:19:14,560 --> 00:19:19,820
if you're looking at mobile I want to be

00:19:17,900 --> 00:19:21,370
able to look at mobile I want to be able

00:19:19,820 --> 00:19:23,930
to look at the types of devices

00:19:21,370 --> 00:19:25,730
operating systems and browsers all my

00:19:23,930 --> 00:19:28,880
users are using I want to prioritize

00:19:25,730 --> 00:19:31,130
those and I want to test those on the

00:19:28,880 --> 00:19:33,590
actual devices I want to automate as

00:19:31,130 --> 00:19:35,420
much testing as I can automate the

00:19:33,590 --> 00:19:38,720
simple tests that you can repetitively

00:19:35,420 --> 00:19:40,220
do like at an agile environment when you

00:19:38,720 --> 00:19:42,410
build feature upon feature with those

00:19:40,220 --> 00:19:44,540
building blocks you keep that repetition

00:19:42,410 --> 00:19:46,070
until the stream changes so much where

00:19:44,540 --> 00:19:48,710
you go back and you have to essentially

00:19:46,070 --> 00:19:51,050
start from scratch but you want to be

00:19:48,710 --> 00:19:53,180
able to run those again on the real

00:19:51,050 --> 00:19:55,430
devices but the key thing you don't want

00:19:53,180 --> 00:19:59,030
to lose focus off on a mobile it's not

00:19:55,430 --> 00:20:01,370
about the device in this market I see a

00:19:59,030 --> 00:20:03,170
lot about we support this device we

00:20:01,370 --> 00:20:06,290
support that device that's great that's

00:20:03,170 --> 00:20:07,660
fantastic in the 90s I didn't say I had

00:20:06,290 --> 00:20:09,820
a dell laptop or and I

00:20:07,660 --> 00:20:12,580
vm lab that laptop it was about the

00:20:09,820 --> 00:20:15,060
application that focus should still be

00:20:12,580 --> 00:20:17,200
on the application because ultimately

00:20:15,060 --> 00:20:18,880
even though there are some minor quirks

00:20:17,200 --> 00:20:20,770
between devices and you've got to allow

00:20:18,880 --> 00:20:24,330
for screen sizes and in different

00:20:20,770 --> 00:20:26,920
resolution and different Wi-Fi and and

00:20:24,330 --> 00:20:28,870
network emulation it still comes down to

00:20:26,920 --> 00:20:30,910
is the app doing what I needed to do is

00:20:28,870 --> 00:20:32,470
it being used the way I think it's being

00:20:30,910 --> 00:20:34,480
used and does it perform the way it

00:20:32,470 --> 00:20:37,360
should perform not just on the device

00:20:34,480 --> 00:20:39,280
but the app itself that focus shouldn't

00:20:37,360 --> 00:20:42,700
get lost and we realize that you know

00:20:39,280 --> 00:20:44,350
pretty early on in the mobile game you

00:20:42,700 --> 00:20:47,320
know what I want to know is when I'm

00:20:44,350 --> 00:20:50,860
running these tests live if they're if

00:20:47,320 --> 00:20:53,500
they're performance tests I want to know

00:20:50,860 --> 00:20:55,720
exactly what's going on don't hide the

00:20:53,500 --> 00:20:57,310
truth I want to compare current release

00:20:55,720 --> 00:20:58,690
the previous release because i want to

00:20:57,310 --> 00:21:01,840
know functionally did something change

00:20:58,690 --> 00:21:04,300
did something break should i look at on

00:21:01,840 --> 00:21:06,370
the functional side including more edge

00:21:04,300 --> 00:21:07,920
cases should I automate more so I can

00:21:06,370 --> 00:21:10,150
include more edge cases on the

00:21:07,920 --> 00:21:12,940
performance side is it running faster

00:21:10,150 --> 00:21:14,410
then the previous release did because I

00:21:12,940 --> 00:21:16,390
needed to run faster because my

00:21:14,410 --> 00:21:19,300
competitors are running faster we've

00:21:16,390 --> 00:21:21,370
done analysis and in a lot of our

00:21:19,300 --> 00:21:24,370
customers have provided us a data as

00:21:21,370 --> 00:21:26,650
well that just a half second in page

00:21:24,370 --> 00:21:29,650
load time increases revenue in some you

00:21:26,650 --> 00:21:31,360
know in some cases by you know multitude

00:21:29,650 --> 00:21:33,820
of millions of dollars for large revenue

00:21:31,360 --> 00:21:36,460
sites but just that breakage point

00:21:33,820 --> 00:21:37,930
between I'm not waiting anymore I'm

00:21:36,460 --> 00:21:40,120
going to go and buy it somewhere else

00:21:37,930 --> 00:21:45,010
the one click you know where we're fast

00:21:40,120 --> 00:21:47,020
society and then I mentioned it a couple

00:21:45,010 --> 00:21:50,290
times already managed to a baseline as

00:21:47,020 --> 00:21:51,820
i'm doing releases and we run tests we

00:21:50,290 --> 00:21:53,710
actually compare the current baseline

00:21:51,820 --> 00:21:55,900
functionally end performance wise

00:21:53,710 --> 00:21:57,820
against previous baselines I think we go

00:21:55,900 --> 00:21:59,080
five back that's an example I think of

00:21:57,820 --> 00:22:00,760
one of them that actually look like I

00:21:59,080 --> 00:22:03,520
want to know that if I added any

00:22:00,760 --> 00:22:05,980
functionality I changed any content

00:22:03,520 --> 00:22:09,670
maybe I'm a you know put in a bigger

00:22:05,980 --> 00:22:11,230
image on a page then I had before I want

00:22:09,670 --> 00:22:13,090
to know if that page is going to is

00:22:11,230 --> 00:22:15,130
going to load okay I want to make sure

00:22:13,090 --> 00:22:16,780
that it hasn't slowed down any the

00:22:15,130 --> 00:22:19,660
examples I give in this case any of you

00:22:16,780 --> 00:22:20,870
here monitor like I need the news pages

00:22:19,660 --> 00:22:23,990
like a CNN or

00:22:20,870 --> 00:22:26,059
Fox News a CNN online if you look at

00:22:23,990 --> 00:22:27,740
whenever they do breaking news and

00:22:26,059 --> 00:22:30,950
they're they're famous for monitoring

00:22:27,740 --> 00:22:32,330
and throttling their performance a lot

00:22:30,950 --> 00:22:34,580
of times if it's just the normal

00:22:32,330 --> 00:22:37,400
business day on the front page of CNN

00:22:34,580 --> 00:22:39,290
will be videos let me the first thing

00:22:37,400 --> 00:22:41,180
you see the video of the day the story

00:22:39,290 --> 00:22:42,770
of the day but when is breaking news

00:22:41,180 --> 00:22:44,630
take a look at the content that's on the

00:22:42,770 --> 00:22:46,970
page you'll actually see a lot of it

00:22:44,630 --> 00:22:49,010
peeled back and the reason for that is

00:22:46,970 --> 00:22:50,390
they lighten the page loads because they

00:22:49,010 --> 00:22:52,610
know more people are going to be hitting

00:22:50,390 --> 00:22:54,800
it you know breaking news some big event

00:22:52,610 --> 00:22:56,809
so you see a lot of those videos taken

00:22:54,800 --> 00:22:59,059
down and that it will stay like that

00:22:56,809 --> 00:23:00,770
until the event is no not broken you'll

00:22:59,059 --> 00:23:01,970
see the stuff go back up news

00:23:00,770 --> 00:23:05,000
organizations you want to talk about

00:23:01,970 --> 00:23:06,350
folks that have to release fast that's a

00:23:05,000 --> 00:23:08,179
perfect example because some of the

00:23:06,350 --> 00:23:10,160
content on a lot of the big whether it's

00:23:08,179 --> 00:23:12,650
newspapers are even the TV stations here

00:23:10,160 --> 00:23:14,840
I know you got a big media conglomerate

00:23:12,650 --> 00:23:16,250
right up right up the street here but

00:23:14,840 --> 00:23:18,679
their content changes about every two

00:23:16,250 --> 00:23:21,080
hours so talk about a release cycle and

00:23:18,679 --> 00:23:23,570
having the manage change manage config

00:23:21,080 --> 00:23:25,190
and architect around you know a template

00:23:23,570 --> 00:23:26,840
so your content can be changed and

00:23:25,190 --> 00:23:31,580
tested fast because if you don't break

00:23:26,840 --> 00:23:33,230
that story someone else is going to and

00:23:31,580 --> 00:23:34,850
finally I've mentioned the real user

00:23:33,230 --> 00:23:36,350
data you want to take that data and

00:23:34,850 --> 00:23:40,370
iterate that back into the development

00:23:36,350 --> 00:23:44,000
team so in an agile environment there's

00:23:40,370 --> 00:23:45,679
a row like all of you just know agile

00:23:44,000 --> 00:23:48,440
and that there's a roll call the UX user

00:23:45,679 --> 00:23:50,300
experience a lot of times when I read

00:23:48,440 --> 00:23:52,940
all about agile it's all about the

00:23:50,300 --> 00:23:55,460
performance role is really usability

00:23:52,940 --> 00:23:58,190
human factors it's not about performance

00:23:55,460 --> 00:23:59,960
the UX role and agile this is the data

00:23:58,190 --> 00:24:01,550
that should go back into that agile team

00:23:59,960 --> 00:24:04,160
for the next stream it's really

00:24:01,550 --> 00:24:05,809
performance of the application and the

00:24:04,160 --> 00:24:07,280
way the user is using it that needs to

00:24:05,809 --> 00:24:09,020
be added as a best practice and that's

00:24:07,280 --> 00:24:11,480
what we do we look at how people are

00:24:09,020 --> 00:24:14,090
using it the speed we get the feedback

00:24:11,480 --> 00:24:15,800
from the actual product being used in

00:24:14,090 --> 00:24:20,330
from the test and we feedback that back

00:24:15,800 --> 00:24:22,550
into the organization so here's an

00:24:20,330 --> 00:24:25,190
actual example this is actually a

00:24:22,550 --> 00:24:26,870
screenshot of our product called cloud

00:24:25,190 --> 00:24:28,550
test which is our performance testing

00:24:26,870 --> 00:24:31,460
tool if you look on the upper right you

00:24:28,550 --> 00:24:34,460
can see well maybe but we do on average

00:24:31,460 --> 00:24:39,050
about 22 major builds a day

00:24:34,460 --> 00:24:40,640
we run on the builds for each product we

00:24:39,050 --> 00:24:43,040
have three main products before now we

00:24:40,640 --> 00:24:44,480
just announced another one but we do two

00:24:43,040 --> 00:24:47,150
builds for each of the three sets of

00:24:44,480 --> 00:24:49,220
products and I'm going to actually drill

00:24:47,150 --> 00:24:51,980
in a little bit so this is one we're

00:24:49,220 --> 00:24:54,770
actually doing a mobile build and what

00:24:51,980 --> 00:24:57,260
we do is we have the functional tests

00:24:54,770 --> 00:24:59,390
built inside so that we can actually

00:24:57,260 --> 00:25:01,280
kick off the build and actually run the

00:24:59,390 --> 00:25:03,710
test automatically in this particular

00:25:01,280 --> 00:25:06,980
case you drill down where now we have a

00:25:03,710 --> 00:25:09,500
set that we had 30 36 failures here I

00:25:06,980 --> 00:25:12,380
want to be able to drill down see what

00:25:09,500 --> 00:25:14,510
they were I want all the failed tests I

00:25:12,380 --> 00:25:17,030
want to be able to actually drill down a

00:25:14,510 --> 00:25:20,570
little which one's past which one's

00:25:17,030 --> 00:25:22,550
failed and then we actually kick off our

00:25:20,570 --> 00:25:24,680
product to actually see what the test

00:25:22,550 --> 00:25:27,670
results are so that we can actually look

00:25:24,680 --> 00:25:30,500
at what exactly failed fix it we mediate

00:25:27,670 --> 00:25:32,870
change release config and conveyor belt

00:25:30,500 --> 00:25:34,910
speeding up for poorly Lucille Ball and

00:25:32,870 --> 00:25:37,880
then what I want to be able to do is I

00:25:34,910 --> 00:25:40,160
want to be able to kick off and run the

00:25:37,880 --> 00:25:42,530
regression tests so that they pass and

00:25:40,160 --> 00:25:44,360
all this is done at this the conveyor

00:25:42,530 --> 00:25:49,520
belt speeding up faster and faster all

00:25:44,360 --> 00:25:52,880
inside Jenkins and then when all the

00:25:49,520 --> 00:25:55,310
tests are passed you can actually see

00:25:52,880 --> 00:25:57,890
that the top one there got essentially

00:25:55,310 --> 00:26:01,910
is a promotion release candidate ready

00:25:57,890 --> 00:26:03,350
to go and we do we do this for three

00:26:01,910 --> 00:26:05,500
products again usually twice a day

00:26:03,350 --> 00:26:08,150
sometimes a little more depending on

00:26:05,500 --> 00:26:10,850
depending on where we are in the

00:26:08,150 --> 00:26:13,160
development cycle but so for our

00:26:10,850 --> 00:26:17,470
takeaways are we have three main

00:26:13,160 --> 00:26:21,020
products we run about 8,000 tests a day

00:26:17,470 --> 00:26:22,730
for mobile we do about 300 automated

00:26:21,020 --> 00:26:25,340
functional tests and these are all

00:26:22,730 --> 00:26:27,860
functional tests by the way for iOS and

00:26:25,340 --> 00:26:31,400
Android we did I think I mentioned

00:26:27,860 --> 00:26:32,600
earlier 454 builds last year this is

00:26:31,400 --> 00:26:35,240
june i just got the numbers yesterday

00:26:32,600 --> 00:26:39,020
i'm i think for the three products i

00:26:35,240 --> 00:26:41,660
think we're up to 120 130 and they're

00:26:39,020 --> 00:26:45,020
pretty evenly broken down between the

00:26:41,660 --> 00:26:47,540
three products so what we do is when we

00:26:45,020 --> 00:26:48,519
if we get bugs that are coming in we

00:26:47,540 --> 00:26:50,019
prioritized

00:26:48,519 --> 00:26:52,690
and we go ahead and fix them and get

00:26:50,019 --> 00:26:54,070
them out as fast as we can our goal you

00:26:52,690 --> 00:26:55,809
know as a company internally in the

00:26:54,070 --> 00:26:58,089
engineering team its quality first and

00:26:55,809 --> 00:26:59,559
the goal is when we look at the every

00:26:58,089 --> 00:27:00,940
Monday there's we have the engineering

00:26:59,559 --> 00:27:04,929
meeting it should be that number should

00:27:00,940 --> 00:27:06,580
be 00 priority 10 priority too and the

00:27:04,929 --> 00:27:11,080
priority three should be worked off in

00:27:06,580 --> 00:27:12,580
kept low so our takeaways from this

00:27:11,080 --> 00:27:14,349
understand your requirements because

00:27:12,580 --> 00:27:18,639
change control is all about requirements

00:27:14,349 --> 00:27:21,149
right whether it's a feature from the

00:27:18,639 --> 00:27:25,209
business or from engineering or a

00:27:21,149 --> 00:27:28,749
request from a customer or even a even a

00:27:25,209 --> 00:27:31,179
bug that needs to be fixed you want to

00:27:28,749 --> 00:27:33,909
identify advantages to cloud may have

00:27:31,179 --> 00:27:37,359
for you I think this morning i heard

00:27:33,909 --> 00:27:38,709
amazon has 450,000 servers they are the

00:27:37,359 --> 00:27:40,149
biggest i think if you put everybody

00:27:38,709 --> 00:27:42,249
together behind them they still don't

00:27:40,149 --> 00:27:43,539
add up to amazon but all that you've got

00:27:42,249 --> 00:27:45,669
all that infrastructure they are to be

00:27:43,539 --> 00:27:47,289
able to do more testing you shouldn't

00:27:45,669 --> 00:27:49,029
have to sit with Kathryn like Kathleen

00:27:47,289 --> 00:27:51,570
and say I didn't have time to test or I

00:27:49,029 --> 00:27:54,999
didn't have the infrastructure to test

00:27:51,570 --> 00:27:56,859
you want to automate be obvious in the

00:27:54,999 --> 00:27:58,739
most critical and the obvious to me is

00:27:56,859 --> 00:28:01,239
the simple stuff the repetitive stuff I

00:27:58,739 --> 00:28:05,409
chuckle when I hear somebody say oh I'll

00:28:01,239 --> 00:28:06,820
use crowdsourcing really so my 10 year

00:28:05,409 --> 00:28:08,139
olds on the other end doing your testing

00:28:06,820 --> 00:28:11,709
hopefully that will work for you but I'm

00:28:08,139 --> 00:28:13,479
not a big fan of crowdsourcing but from

00:28:11,709 --> 00:28:15,159
an automation perspective automate the

00:28:13,479 --> 00:28:16,570
simple repetitive stuff especially if

00:28:15,159 --> 00:28:17,709
you look at it from an agile stream

00:28:16,570 --> 00:28:19,809
perspective it's going to be something

00:28:17,709 --> 00:28:21,209
you put in that first building block and

00:28:19,809 --> 00:28:24,159
you're going to iterate build upon that

00:28:21,209 --> 00:28:26,499
automate that start there because it's

00:28:24,159 --> 00:28:27,820
not gee I have to get to one hundred

00:28:26,499 --> 00:28:29,559
percent automation you'll never get

00:28:27,820 --> 00:28:32,469
there on the ROI won't won't be there

00:28:29,559 --> 00:28:33,999
for you anyway you want to connect to a

00:28:32,469 --> 00:28:36,669
continuous process like what I showed

00:28:33,999 --> 00:28:38,379
with a circular doing the Jenkins doing

00:28:36,669 --> 00:28:40,419
the testing doing the regression testing

00:28:38,379 --> 00:28:42,190
remediating going back to the conveyor

00:28:40,419 --> 00:28:45,999
belt speeding it up for poor Lucille

00:28:42,190 --> 00:28:48,429
Ball and then when I say here aligned

00:28:45,999 --> 00:28:49,839
teams with actionable information when

00:28:48,429 --> 00:28:52,869
you're running the tests all that

00:28:49,839 --> 00:28:54,879
metrics that is available essentially

00:28:52,869 --> 00:28:56,739
either from the user experience or from

00:28:54,879 --> 00:28:58,359
the actual execution of whether it's

00:28:56,739 --> 00:29:02,080
performance tests or functional tests

00:28:58,359 --> 00:29:04,450
all that data is available to you we

00:29:02,080 --> 00:29:09,309
come into some just fascinating test

00:29:04,450 --> 00:29:13,210
cases we were doing some user experience

00:29:09,309 --> 00:29:15,549
testing for a retail retailer and their

00:29:13,210 --> 00:29:16,720
process what they were going having some

00:29:15,549 --> 00:29:19,779
outages on Friday and they couldn't

00:29:16,720 --> 00:29:22,450
figure out why and when we dug into the

00:29:19,779 --> 00:29:23,860
process of their own user data and we

00:29:22,450 --> 00:29:26,590
actually have actually had this running

00:29:23,860 --> 00:29:28,510
outside you can dig deep but they did is

00:29:26,590 --> 00:29:31,120
on their Facebook page is they put a

00:29:28,510 --> 00:29:32,980
coupon it would say women's clothing and

00:29:31,120 --> 00:29:34,990
accessories for this particular brand

00:29:32,980 --> 00:29:36,880
line is going to have a flash sale

00:29:34,990 --> 00:29:39,039
friday morning at 8am it's going to be

00:29:36,880 --> 00:29:41,710
forty percent off at 8am thirty percent

00:29:39,039 --> 00:29:43,779
off at nine and then dwindling down to

00:29:41,710 --> 00:29:46,450
zero but the coupons only go to on

00:29:43,779 --> 00:29:48,730
friday at that time but they put it on

00:29:46,450 --> 00:29:49,990
their facebook page on a sunday and so

00:29:48,730 --> 00:29:51,760
what happened to all during the week of

00:29:49,990 --> 00:29:53,679
course people that are frequent shoppers

00:29:51,760 --> 00:29:55,630
there that get the emails did they go to

00:29:53,679 --> 00:29:57,100
our facebook page they'd be putting

00:29:55,630 --> 00:29:58,630
things in the card all week i'm going to

00:29:57,100 --> 00:30:01,419
buy a pair of pants so i'm going to buy

00:29:58,630 --> 00:30:05,620
a shirt i need accessories and so friday

00:30:01,419 --> 00:30:08,350
would come along at at 8am boom coupon

00:30:05,620 --> 00:30:10,960
they want to buy and the site kept going

00:30:08,350 --> 00:30:14,139
down and the data that we actually came

00:30:10,960 --> 00:30:16,299
up with for them again is from real

00:30:14,139 --> 00:30:19,720
users where we went back in time with

00:30:16,299 --> 00:30:23,710
them over a couple of years and one test

00:30:19,720 --> 00:30:27,760
case that wasn't being tested wasn't it

00:30:23,710 --> 00:30:31,380
literally was go to shopping cart login

00:30:27,760 --> 00:30:34,120
by we weren't they weren't testing that

00:30:31,380 --> 00:30:35,740
because no no one's going to do that

00:30:34,120 --> 00:30:36,909
they could actually pick the items first

00:30:35,740 --> 00:30:39,519
well they were they were picking them

00:30:36,909 --> 00:30:42,610
all week putting him in the car and then

00:30:39,519 --> 00:30:44,470
on Friday it was boom boom done and the

00:30:42,610 --> 00:30:47,049
metric that was just mind-boggling to

00:30:44,470 --> 00:30:49,720
them was forty five point seven percent

00:30:47,049 --> 00:30:53,350
of their conversions on a weekly basis

00:30:49,720 --> 00:30:54,850
was with that path and how many test

00:30:53,350 --> 00:30:58,600
cases were they running for that one

00:30:54,850 --> 00:31:00,549
none so once we started doing that and

00:30:58,600 --> 00:31:02,679
running those kind of tests upfront and

00:31:00,549 --> 00:31:04,750
testing it that way we found what the

00:31:02,679 --> 00:31:07,240
error you know the issues were fixed

00:31:04,750 --> 00:31:10,330
them and it went away but that was we

00:31:07,240 --> 00:31:13,090
don't ever find that unless we have that

00:31:10,330 --> 00:31:14,200
user data and we just had all kinds of

00:31:13,090 --> 00:31:15,490
metrics that are there's fascinating

00:31:14,200 --> 00:31:17,170
about

00:31:15,490 --> 00:31:19,630
the way people shop and who you know how

00:31:17,170 --> 00:31:21,640
they show up and the demographics but

00:31:19,630 --> 00:31:23,590
that's an example where you know

00:31:21,640 --> 00:31:25,630
marketing's put something out something

00:31:23,590 --> 00:31:27,220
out on facebook i t probably totally

00:31:25,630 --> 00:31:29,800
unaware of it in this case they actually

00:31:27,220 --> 00:31:32,770
were and then things happening on friday

00:31:29,800 --> 00:31:35,770
i t not knowing why marketing asking why

00:31:32,770 --> 00:31:39,360
but the link was never made until we

00:31:35,770 --> 00:31:39,360
were actually able to pick the data row

00:31:40,620 --> 00:31:44,920
so final takeaway I've been hitting on

00:31:43,330 --> 00:31:46,840
it a little bit why is continuous

00:31:44,920 --> 00:31:48,880
integration important its speed it's the

00:31:46,840 --> 00:31:51,929
conveyor belt but its its revenue for

00:31:48,880 --> 00:31:54,030
your brand it's your brand recognition

00:31:51,929 --> 00:31:56,230
you know I already mentioned that I

00:31:54,030 --> 00:31:59,380
tweet every time I can't use my mobile

00:31:56,230 --> 00:32:00,700
boarding pass and you would you be

00:31:59,380 --> 00:32:04,770
surprised at the number of people that

00:32:00,700 --> 00:32:07,330
do that and then competitive advantage

00:32:04,770 --> 00:32:09,250
amazon one clicks a perfect example they

00:32:07,330 --> 00:32:11,350
found a fast way to get revenue because

00:32:09,250 --> 00:32:12,670
i'm the same way if i text me six or

00:32:11,350 --> 00:32:15,280
eight clicks to buy something i'm

00:32:12,670 --> 00:32:16,750
probably just going to go to amazon or

00:32:15,280 --> 00:32:19,450
go somewhere else where it takes only

00:32:16,750 --> 00:32:21,190
one or two clicks but that's a user

00:32:19,450 --> 00:32:23,440
experience and you have to know how

00:32:21,190 --> 00:32:25,750
people are using your app your site

00:32:23,440 --> 00:32:30,940
before you're able to take advantage of

00:32:25,750 --> 00:32:33,220
that so I'm going to leave you with a

00:32:30,940 --> 00:32:35,500
trivia no one yell the answers out here

00:32:33,220 --> 00:32:39,640
I'm going to put my Twitter account up

00:32:35,500 --> 00:32:41,440
there and for each question if the first

00:32:39,640 --> 00:32:44,290
person that tweets to me and says what

00:32:41,440 --> 00:32:46,600
the answer is I'll send I have a USB

00:32:44,290 --> 00:32:49,030
cell phone charger that supposed to give

00:32:46,600 --> 00:32:51,160
that I'll give me a couple days to get

00:32:49,030 --> 00:32:53,350
home and get it back out and I'll tweet

00:32:51,160 --> 00:32:54,640
out who the winners are the first

00:32:53,350 --> 00:32:58,630
question that you'd have to answer is

00:32:54,640 --> 00:33:02,320
and this is all mobile related so this

00:32:58,630 --> 00:33:07,540
is on your phone now there's a satellite

00:33:02,320 --> 00:33:10,000
that is very key to mobile right now it

00:33:07,540 --> 00:33:13,600
was first launched in the year that this

00:33:10,000 --> 00:33:16,020
snowstorm hit the city of Boston take a

00:33:13,600 --> 00:33:22,990
real good look at the cars not the snow

00:33:16,020 --> 00:33:25,540
hint it was not 2014 how many of them

00:33:22,990 --> 00:33:27,910
circle the Earth at any one time that's

00:33:25,540 --> 00:33:28,960
a number i'm looking for that's three

00:33:27,910 --> 00:33:32,020
questions so far

00:33:28,960 --> 00:33:35,230
and then the last one I'll be able to

00:33:32,020 --> 00:33:37,299
tell if those of you that will be smart

00:33:35,230 --> 00:33:39,029
enough to know where to go I worked at

00:33:37,299 --> 00:33:41,919
one of those three companies and

00:33:39,029 --> 00:33:45,760
actually worked on this you have to

00:33:41,919 --> 00:33:50,470
tweet me so the satellite named the year

00:33:45,760 --> 00:33:53,799
how many right company and then you just

00:33:50,470 --> 00:33:55,210
have to tweet me there and if you have a

00:33:53,799 --> 00:34:03,190
twitter account off all you follow you

00:33:55,210 --> 00:34:08,619
back as well so i'll ask four questions

00:34:03,190 --> 00:34:10,419
but go here there's free downloads and i

00:34:08,619 --> 00:34:12,250
write a blog and pretty much everything

00:34:10,419 --> 00:34:14,320
i just touched on today it has a blog

00:34:12,250 --> 00:34:15,580
written about it or white paper topic

00:34:14,320 --> 00:34:17,320
that's available and it a lot deeper

00:34:15,580 --> 00:34:21,220
dive whether its production testing or

00:34:17,320 --> 00:34:24,310
user experience or whatever tov our see

00:34:21,220 --> 00:34:27,639
i actually got a couple of them on CI so

00:34:24,310 --> 00:34:34,149
any quest we have time for questions yep

00:34:27,639 --> 00:34:36,220
good know you talked a bit about testing

00:34:34,149 --> 00:34:38,409
on physical devices how do you handle

00:34:36,220 --> 00:34:42,010
scheduling if you have say five physical

00:34:38,409 --> 00:34:45,040
devices and a thousand tests to run so

00:34:42,010 --> 00:34:47,530
for us we actually there's a company

00:34:45,040 --> 00:34:49,419
we're partnered with called NTT so we

00:34:47,530 --> 00:34:50,379
actually the example I gave about being

00:34:49,419 --> 00:34:51,639
able to test in the cloud the

00:34:50,379 --> 00:34:54,399
infrastructure we have the equivalent

00:34:51,639 --> 00:34:56,139
for through NTT to be able to spin up as

00:34:54,399 --> 00:34:57,700
many devices as we need for whatever

00:34:56,139 --> 00:34:59,050
period of time we spin them up and we

00:34:57,700 --> 00:35:00,849
actually offer that to our customers as

00:34:59,050 --> 00:35:02,650
well but we do the same thing and what

00:35:00,849 --> 00:35:04,420
you find is you you don't really need

00:35:02,650 --> 00:35:06,430
that many devices because when you have

00:35:04,420 --> 00:35:07,900
the data and again we have it I have it

00:35:06,430 --> 00:35:10,359
running over here you'll find that

00:35:07,900 --> 00:35:12,250
there's a ninety-five percent cut off of

00:35:10,359 --> 00:35:14,230
you know really what you do want to do

00:35:12,250 --> 00:35:16,119
is just test it but whatever you want us

00:35:14,230 --> 00:35:19,230
to draw the line where it's 90 or 95 and

00:35:16,119 --> 00:35:23,950
you'll see you most of my customers are

00:35:19,230 --> 00:35:25,540
20 devices 25 devices some 30 because

00:35:23,950 --> 00:35:27,130
I've got some interesting requirements

00:35:25,540 --> 00:35:29,230
that require them to do things a little

00:35:27,130 --> 00:35:30,849
differently but we look at the real user

00:35:29,230 --> 00:35:34,119
data and we draw the line based on that

00:35:30,849 --> 00:35:36,690
and then we use the clout from NTT it's

00:35:34,119 --> 00:35:36,690
the one we use

00:35:37,569 --> 00:35:42,529
yes they actually have like a data

00:35:41,000 --> 00:35:44,420
center like an Amazon when you spin up

00:35:42,529 --> 00:35:46,279
servers in the cloud they have the same

00:35:44,420 --> 00:35:48,500
thing for mobile and I've got data

00:35:46,279 --> 00:35:50,299
centers like Japan Asia here in the US

00:35:48,500 --> 00:35:52,220
so maybe another location i'm missing

00:35:50,299 --> 00:35:53,720
but that's what we that's what we like

00:35:52,220 --> 00:35:55,579
them so much because we had to do tests

00:35:53,720 --> 00:36:01,029
like this that we partner with him and

00:35:55,579 --> 00:36:03,289
we offer it to our customers the other i

00:36:01,029 --> 00:36:07,009
hear my phone buzzing so somebody's

00:36:03,289 --> 00:36:13,039
sending me something just wait for the

00:36:07,009 --> 00:36:15,140
mic to ask the question please so if you

00:36:13,039 --> 00:36:18,829
have a small change that you want to

00:36:15,140 --> 00:36:22,369
test like if it's a very small change so

00:36:18,829 --> 00:36:27,230
it will have to go to whole of the cycle

00:36:22,369 --> 00:36:29,089
that from the start to then so how do

00:36:27,230 --> 00:36:34,089
you handle it like if it's a trivial

00:36:29,089 --> 00:36:37,549
thing so we do the cycles the same

00:36:34,089 --> 00:36:41,150
regardless of the change whether it's a

00:36:37,549 --> 00:36:45,740
one feature change or whether it's one

00:36:41,150 --> 00:36:48,680
bug fix because we test so often it are

00:36:45,740 --> 00:36:51,049
pretty much our style is hey if if it's

00:36:48,680 --> 00:36:53,240
ready to go ship it ready to go keep

00:36:51,049 --> 00:36:57,619
going though don't stop the conveyor

00:36:53,240 --> 00:37:03,349
belt / for Lucy even though she probably

00:36:57,619 --> 00:37:06,559
would hate that thank you how do you

00:37:03,349 --> 00:37:09,079
measure quality do you have any metrics

00:37:06,559 --> 00:37:11,750
for test coverage or do you have any

00:37:09,079 --> 00:37:15,430
Jenkins plugins for s coverage or do you

00:37:11,750 --> 00:37:19,460
how do you do reporting and publishing

00:37:15,430 --> 00:37:21,619
so for for test coverage we do we do

00:37:19,460 --> 00:37:23,210
essentially analyze everything and

00:37:21,619 --> 00:37:26,089
there's a white paper and a blog on our

00:37:23,210 --> 00:37:28,009
site that actually I wrote but we are

00:37:26,089 --> 00:37:30,410
constantly looking at test coverage and

00:37:28,009 --> 00:37:32,210
edge cases and we tie user experience

00:37:30,410 --> 00:37:33,470
back to that you know obviously there's

00:37:32,210 --> 00:37:34,880
a place where we feel hey here's the

00:37:33,470 --> 00:37:37,839
criticality this is where we draw the

00:37:34,880 --> 00:37:40,670
line and that's constantly changing

00:37:37,839 --> 00:37:42,890
there's no real set if I got it had

00:37:40,670 --> 00:37:44,690
people ask me well what percentage of

00:37:42,890 --> 00:37:47,480
test cases do you know coverage you have

00:37:44,690 --> 00:37:48,950
is it 100 is it you know 80 and then the

00:37:47,480 --> 00:37:50,660
answer is it's not a number

00:37:48,950 --> 00:37:53,750
you gotta look at how your users are

00:37:50,660 --> 00:37:56,089
using your application and you're

00:37:53,750 --> 00:37:58,880
constantly evaluating those edge cases

00:37:56,089 --> 00:38:02,720
and really your feedback is back into

00:37:58,880 --> 00:38:05,089
that agile team as the UX role so that

00:38:02,720 --> 00:38:06,170
you're feeding how people are using the

00:38:05,089 --> 00:38:08,119
app because some things are going to

00:38:06,170 --> 00:38:09,859
fall off that hey I developed all these

00:38:08,119 --> 00:38:11,510
test cases this is where my coverages

00:38:09,859 --> 00:38:13,579
good lines going to be I don't need to

00:38:11,510 --> 00:38:15,109
do anything that has to be every every

00:38:13,579 --> 00:38:17,450
cycle in every iteration you're going to

00:38:15,109 --> 00:38:20,030
learn something from your user that will

00:38:17,450 --> 00:38:22,490
change that not only that line but maybe

00:38:20,030 --> 00:38:24,589
something new I always I always look at

00:38:22,490 --> 00:38:26,839
the there's some interesting whenever

00:38:24,589 --> 00:38:29,720
I'm out walking and you see sidewalks

00:38:26,839 --> 00:38:31,579
and all of a sudden I see this beaten

00:38:29,720 --> 00:38:33,800
path in the grass that's tall dirt

00:38:31,579 --> 00:38:35,180
that's an example where hey great design

00:38:33,800 --> 00:38:36,680
on the sidewalk but everybody's figured

00:38:35,180 --> 00:38:38,540
out they can cut the corner by walking

00:38:36,680 --> 00:38:41,619
to the grass that's kind of what you

00:38:38,540 --> 00:38:44,780
have to watch for is a as a designer

00:38:41,619 --> 00:38:49,310
from a test perspective don't play it on

00:38:44,780 --> 00:38:54,200
answer your question I think one more no

00:38:49,310 --> 00:38:57,099
we good all right well thank you for

00:38:54,200 --> 00:38:57,099
your time I appreciate it

00:39:06,299 --> 00:39:08,359

YouTube URL: https://www.youtube.com/watch?v=QTFFZBfdv1w


