Title: JUC U.S. East 2015 - Getting Groovy with Jenkins
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Lorelei McCollum, IBM 

Create Easy buttons to enable everyone with different skill levels to leverage the power of Jenkins. Learn fun Groovy coding tricks to enhance your build, test and deploy pipelines.
Captions: 
	00:00:15,430 --> 00:00:21,230
so my name is Lorelai McCallum I work at

00:00:18,110 --> 00:00:23,900
IBM I've been there for ten and a half

00:00:21,230 --> 00:00:27,650
years I've been fully focused on

00:00:23,900 --> 00:00:30,410
automation test build pipeline from most

00:00:27,650 --> 00:00:32,570
of my years there at IBM so today what

00:00:30,410 --> 00:00:34,610
we're going to cover is getting groovy

00:00:32,570 --> 00:00:40,180
with Jenkins so we're gonna go over some

00:00:34,610 --> 00:00:40,180
fun groovy snippets of code that yes oh

00:00:40,210 --> 00:00:46,699
yes I'll try and speak up better great

00:00:44,089 --> 00:00:49,100
sorry so today we're gonna cover some

00:00:46,699 --> 00:00:51,770
fun groovy snippets of code that

00:00:49,100 --> 00:00:53,539
essentially you can build into your

00:00:51,770 --> 00:00:55,399
pipelines into your Jenkins jobs and

00:00:53,539 --> 00:00:57,649
hopefully and enhance you know what you

00:00:55,399 --> 00:01:00,289
guys have today and your businesses your

00:00:57,649 --> 00:01:02,090
products and what you do with Jenkins so

00:01:00,289 --> 00:01:05,089
there's one disclaimer I am gonna show a

00:01:02,090 --> 00:01:07,250
lot of snippets of code now the code

00:01:05,089 --> 00:01:08,810
snippets if you just put them in and try

00:01:07,250 --> 00:01:09,770
and run them they may or may not run

00:01:08,810 --> 00:01:12,259
because you're gonna need some things

00:01:09,770 --> 00:01:13,880
like imports and I do a lot of dot dot

00:01:12,259 --> 00:01:15,500
dot because I you know don't want to

00:01:13,880 --> 00:01:18,080
show a huge piece of code on the screen

00:01:15,500 --> 00:01:19,610
for you so if you find you know you're

00:01:18,080 --> 00:01:21,259
trying to use this post-conference

00:01:19,610 --> 00:01:23,750
and you have problems with it feel free

00:01:21,259 --> 00:01:26,630
to shoot me an email so I can assist but

00:01:23,750 --> 00:01:29,030
I just want to throw that out there for

00:01:26,630 --> 00:01:29,869
everyone so what is groovy so you've

00:01:29,030 --> 00:01:30,439
probably heard it throughout the

00:01:29,869 --> 00:01:32,990
conference

00:01:30,439 --> 00:01:35,930
so essentially groovy is the language

00:01:32,990 --> 00:01:38,000
that you can use in the Jenkins JVM and

00:01:35,930 --> 00:01:40,070
you can run Ruby scripts it's like a

00:01:38,000 --> 00:01:42,110
scripting language essentially to do

00:01:40,070 --> 00:01:45,829
what you're looking to do in your

00:01:42,110 --> 00:01:47,540
Jenkins jobs so you can leverage this in

00:01:45,829 --> 00:01:50,450
different parts of your Jenkins job and

00:01:47,540 --> 00:01:53,420
both the build step and the post build

00:01:50,450 --> 00:01:55,340
step you can also do some you know

00:01:53,420 --> 00:01:57,500
administration type jobs with groovy

00:01:55,340 --> 00:01:59,210
which is kind of fun so if you have a

00:01:57,500 --> 00:02:01,460
lot of slave nodes or you have to do

00:01:59,210 --> 00:02:04,070
maintenance on your slave nodes or just

00:02:01,460 --> 00:02:05,899
various administrative type jobs almost

00:02:04,070 --> 00:02:07,430
like automating the operations on your

00:02:05,899 --> 00:02:09,320
Jenkins environment so I've done some

00:02:07,430 --> 00:02:12,019
fun stuff with groovy which we'll see

00:02:09,320 --> 00:02:13,579
there as well you can also pull your

00:02:12,019 --> 00:02:15,829
groovy scripts from source so we've

00:02:13,579 --> 00:02:17,480
heard a lot about source in this you

00:02:15,829 --> 00:02:20,090
know storing your artifacts your scripts

00:02:17,480 --> 00:02:22,400
the pieces of your pipeline in source

00:02:20,090 --> 00:02:23,989
control and this is crucial I find

00:02:22,400 --> 00:02:24,890
especially as you're making changes to

00:02:23,989 --> 00:02:27,020
these groovy scrap

00:02:24,890 --> 00:02:28,550
and you know you you add one little line

00:02:27,020 --> 00:02:30,620
and it breaks the whole pipeline so you

00:02:28,550 --> 00:02:32,030
really want to be able to track that and

00:02:30,620 --> 00:02:33,620
have that in version control so I'll

00:02:32,030 --> 00:02:35,270
show you kind of my way of doing this

00:02:33,620 --> 00:02:37,430
which I think might be a little

00:02:35,270 --> 00:02:39,140
different than the way other people have

00:02:37,430 --> 00:02:42,500
presented it but it seems to work pretty

00:02:39,140 --> 00:02:45,200
well for us we'll also do some fun Quick

00:02:42,500 --> 00:02:47,960
Links on your build pages that you have

00:02:45,200 --> 00:02:49,730
for your pipelines so for every Jenkins

00:02:47,960 --> 00:02:51,170
job that you run you end up with like a

00:02:49,730 --> 00:02:53,000
build page at the end which is your

00:02:51,170 --> 00:02:54,590
build report kind of tells you what you

00:02:53,000 --> 00:02:56,660
what went on what happened what past

00:02:54,590 --> 00:02:58,850
what failed various plugins out there

00:02:56,660 --> 00:03:00,980
today will allow you to kind of add

00:02:58,850 --> 00:03:03,050
things to that and kind of customize it

00:03:00,980 --> 00:03:04,370
but with you know some of this groovy

00:03:03,050 --> 00:03:06,380
stuff that I'm doing here can kind of

00:03:04,370 --> 00:03:08,480
take that to the next level and really

00:03:06,380 --> 00:03:10,220
give your developers that easy button

00:03:08,480 --> 00:03:12,260
that they're looking for because they

00:03:10,220 --> 00:03:14,720
don't want to have to click ten times to

00:03:12,260 --> 00:03:16,930
get to the logs for something that they

00:03:14,720 --> 00:03:19,760
needs to bug so I will talk about that

00:03:16,930 --> 00:03:21,950
I'll also go into some depth on the

00:03:19,760 --> 00:03:24,260
Jenkins workspace and how you can I use

00:03:21,950 --> 00:03:26,360
that to kind of get what you're looking

00:03:24,260 --> 00:03:29,150
to do and maybe some in administration

00:03:26,360 --> 00:03:31,459
type jobs on with groovy and then lastly

00:03:29,150 --> 00:03:32,870
the groovy groovy label assignment

00:03:31,459 --> 00:03:34,910
plugin which is kind of one of my

00:03:32,870 --> 00:03:37,400
favorite plugins that allows you to kind

00:03:34,910 --> 00:03:40,970
of based on parameters and your Jenkins

00:03:37,400 --> 00:03:42,709
job switch which node is at which slave

00:03:40,970 --> 00:03:44,980
node essentially the job goes to so

00:03:42,709 --> 00:03:47,660
that's kind of fun little plugin as well

00:03:44,980 --> 00:03:49,730
so groovy essentially is the language

00:03:47,660 --> 00:03:51,320
for the virtual machine I kind of took

00:03:49,730 --> 00:03:52,790
this from I guess the Jenkins

00:03:51,320 --> 00:03:55,040
documentation just to show you guys

00:03:52,790 --> 00:03:57,590
there's two types of groovy scripts and

00:03:55,040 --> 00:03:59,510
Jenkins there's the system groovy script

00:03:57,590 --> 00:04:01,340
and the regular crew B script the regu

00:03:59,510 --> 00:04:03,230
regular groovy script is just like

00:04:01,340 --> 00:04:05,570
writing a shell script or writing a

00:04:03,230 --> 00:04:07,700
batch script you know just you want to

00:04:05,570 --> 00:04:10,280
do something quick that's part of your

00:04:07,700 --> 00:04:12,500
build step in your Jenkins job and it

00:04:10,280 --> 00:04:14,570
works however the system groovy script

00:04:12,500 --> 00:04:15,950
is a little bit more gives you a little

00:04:14,570 --> 00:04:19,070
bit more because you essentially have

00:04:15,950 --> 00:04:21,739
access to the Jenkins API as this script

00:04:19,070 --> 00:04:23,419
is running in the Jenkins JVM as part of

00:04:21,739 --> 00:04:26,570
your build job now this can be dangerous

00:04:23,419 --> 00:04:28,510
you can do things like system.exit

00:04:26,570 --> 00:04:30,610
in the system groovy script and that

00:04:28,510 --> 00:04:32,530
take down your Jenkins master I've had a

00:04:30,610 --> 00:04:35,110
developer do that and we got a chuckle

00:04:32,530 --> 00:04:36,670
out of it but I so there is you know

00:04:35,110 --> 00:04:38,560
there is some danger associated with

00:04:36,670 --> 00:04:41,200
system groovy scripts so you definitely

00:04:38,560 --> 00:04:44,230
want to have a full you know test and

00:04:41,200 --> 00:04:46,330
test and deploy sort of process for

00:04:44,230 --> 00:04:48,490
making changes to this type of stuff and

00:04:46,330 --> 00:04:52,090
you can also you know facilitate that

00:04:48,490 --> 00:04:54,910
with Jenkins as well so how do you use

00:04:52,090 --> 00:04:58,060
groovy in your Jenkins job so you have

00:04:54,910 --> 00:04:59,950
to install the groovy plug-in I believe

00:04:58,060 --> 00:05:02,320
it's probably that's exact times that is

00:04:59,950 --> 00:05:04,660
called and when you do so it'll

00:05:02,320 --> 00:05:08,290
essentially add to your Jenkins jobs a

00:05:04,660 --> 00:05:10,540
build step and it'll also add to the if

00:05:08,290 --> 00:05:12,910
you install the groovy post build plugin

00:05:10,540 --> 00:05:15,730
so there's two plugins here that will

00:05:12,910 --> 00:05:17,680
actually add to your post build so this

00:05:15,730 --> 00:05:20,590
is how you actually get the ability to

00:05:17,680 --> 00:05:22,690
use groovy in your Jenkins jobs and with

00:05:20,590 --> 00:05:24,160
the groovy plug-in that gives you the

00:05:22,690 --> 00:05:26,770
ability to run a groovy script or a

00:05:24,160 --> 00:05:28,930
system groovy script the post build

00:05:26,770 --> 00:05:30,760
groovy plugin gives you just the post

00:05:28,930 --> 00:05:33,520
build option and in that it's

00:05:30,760 --> 00:05:34,900
essentially a little you know a text

00:05:33,520 --> 00:05:37,750
file that you can essentially put your

00:05:34,900 --> 00:05:40,150
groovy code in and when that runs it's

00:05:37,750 --> 00:05:41,680
actually running in the master space so

00:05:40,150 --> 00:05:43,360
while you think that the Jenkins job

00:05:41,680 --> 00:05:45,340
you've signed it to this node that

00:05:43,360 --> 00:05:47,140
you're on on the slave node it's running

00:05:45,340 --> 00:05:50,110
there when you actually want to actually

00:05:47,140 --> 00:05:53,080
execute that snippet of code in the post

00:05:50,110 --> 00:05:54,970
build plugin area it's actually running

00:05:53,080 --> 00:05:56,710
in the master space so you if you've

00:05:54,970 --> 00:05:58,750
tried it out before and you're trying to

00:05:56,710 --> 00:06:00,190
like access files in the workspace and

00:05:58,750 --> 00:06:02,170
you can't get out there or you can't

00:06:00,190 --> 00:06:03,340
write files to the workspace it's

00:06:02,170 --> 00:06:05,410
because it's actually running on the

00:06:03,340 --> 00:06:08,170
master so you have to do some crazy

00:06:05,410 --> 00:06:10,300
remote chained old stuff that could take

00:06:08,170 --> 00:06:13,870
you a long time to figure out if you're

00:06:10,300 --> 00:06:15,580
unaware of that so where to store these

00:06:13,870 --> 00:06:17,560
scripts you can put them right into

00:06:15,580 --> 00:06:19,120
drinkin's jobs but the minute you do

00:06:17,560 --> 00:06:20,920
that and then you create another Jenkins

00:06:19,120 --> 00:06:23,410
job and you copy it then you have two

00:06:20,920 --> 00:06:25,540
copies of it so you end up with two

00:06:23,410 --> 00:06:27,220
places to make your change so I always

00:06:25,540 --> 00:06:28,810
like to say put it in source if it's a

00:06:27,220 --> 00:06:29,559
script if it's more than one line of

00:06:28,810 --> 00:06:31,659
code

00:06:29,559 --> 00:06:33,699
put it in source control doesn't matter

00:06:31,659 --> 00:06:35,739
what source control you use put your

00:06:33,699 --> 00:06:39,639
scripts there so what what I have for me

00:06:35,739 --> 00:06:42,249
is I have a pipeline config project it's

00:06:39,639 --> 00:06:44,349
in rational team concert which is one of

00:06:42,249 --> 00:06:47,379
IBM source control I'm gonna be moving

00:06:44,349 --> 00:06:49,509
it to github soon but it's still in RTC

00:06:47,379 --> 00:06:51,029
so you'll see some pictures in a minute

00:06:49,509 --> 00:06:53,499
that will kind of show how we

00:06:51,029 --> 00:06:55,719
essentially create a Jenkins job to

00:06:53,499 --> 00:06:57,999
build this project so you have a new

00:06:55,719 --> 00:06:59,649
source component that you create and you

00:06:57,999 --> 00:07:01,299
put all of these types of scripts in it

00:06:59,649 --> 00:07:03,369
so whether it's a shell script of build

00:07:01,299 --> 00:07:08,019
script whatever it is put them in source

00:07:03,369 --> 00:07:10,299
so there versioned so this is how i set

00:07:08,019 --> 00:07:12,929
up to essentially get these scripts into

00:07:10,299 --> 00:07:15,819
the Jenkins job at runtime I create a

00:07:12,929 --> 00:07:18,429
that I have this job called admin update

00:07:15,819 --> 00:07:22,479
pipeline config it's essentially a job

00:07:18,429 --> 00:07:24,669
that is linked to my source control

00:07:22,479 --> 00:07:27,849
repository and essentially I have it

00:07:24,669 --> 00:07:29,649
configured to do the SCM pull when

00:07:27,849 --> 00:07:32,109
there's new changes and it's pulling on

00:07:29,649 --> 00:07:34,599
source control changes and then with

00:07:32,109 --> 00:07:36,579
that essentially when that runs it just

00:07:34,599 --> 00:07:38,739
copies all those files down to the

00:07:36,579 --> 00:07:40,419
workspace I don't need to build them

00:07:38,739 --> 00:07:43,299
they're not a build they're not I'm not

00:07:40,419 --> 00:07:45,669
building a jar file or a you know any

00:07:43,299 --> 00:07:47,499
any type of actual build I just copy

00:07:45,669 --> 00:07:49,629
them to the workspace and then I archive

00:07:47,499 --> 00:07:51,489
them so there's this nice feature with

00:07:49,629 --> 00:07:52,989
the post build and your Jenkins jobs

00:07:51,489 --> 00:07:55,389
that allows you to archive your

00:07:52,989 --> 00:07:58,299
artifacts and with that you now have a

00:07:55,389 --> 00:08:01,239
Jenkins job that runs when you make

00:07:58,299 --> 00:08:03,009
changes to your you know your operations

00:08:01,239 --> 00:08:05,709
your scripts of things that support the

00:08:03,009 --> 00:08:08,259
pipeline and it builds them in jenkins

00:08:05,709 --> 00:08:10,299
and they're all saved as artifacts so

00:08:08,259 --> 00:08:13,059
then what you get is in all these jobs

00:08:10,299 --> 00:08:15,819
you've been essentially copy artifacts

00:08:13,059 --> 00:08:19,229
from an existing job into that job and

00:08:15,819 --> 00:08:21,849
use them so we will we'll see that later

00:08:19,229 --> 00:08:25,269
but that's kind of this admin pipeline

00:08:21,849 --> 00:08:26,949
config job that's how I set that up so

00:08:25,269 --> 00:08:29,499
essentially once you have these

00:08:26,949 --> 00:08:30,969
artifacts in source and you can pull

00:08:29,499 --> 00:08:33,039
them from source essentially with this

00:08:30,969 --> 00:08:34,809
Jenkins job and you copy them into the

00:08:33,039 --> 00:08:35,649
workspace of the running Jenkins build

00:08:34,809 --> 00:08:38,649
you can

00:08:35,649 --> 00:08:41,469
reference them so if you use the build

00:08:38,649 --> 00:08:43,990
step to execute system groovy script or

00:08:41,469 --> 00:08:45,910
a regular groovy script you can see here

00:08:43,990 --> 00:08:48,490
I just reference workspace and then the

00:08:45,910 --> 00:08:50,769
script name so essentially these are the

00:08:48,490 --> 00:08:53,439
steps that you could leverage groovy

00:08:50,769 --> 00:08:55,240
with in your build portion of your job

00:08:53,439 --> 00:08:56,709
if you want to use the post build

00:08:55,240 --> 00:08:58,929
plug-in which is in the post build

00:08:56,709 --> 00:09:02,290
section you can essentially if you add

00:08:58,929 --> 00:09:04,629
that to your Jenkins job you'll get a

00:09:02,290 --> 00:09:05,769
little text box as you see here and you

00:09:04,629 --> 00:09:07,569
can put your groovy script right in

00:09:05,769 --> 00:09:10,420
there and what I have here is

00:09:07,569 --> 00:09:13,420
essentially I'm evaluating a file and

00:09:10,420 --> 00:09:16,089
that file is referenced from that master

00:09:13,420 --> 00:09:18,040
project that builds the source so it

00:09:16,089 --> 00:09:20,679
makes it easier than having to put that

00:09:18,040 --> 00:09:21,730
script directly in there because then if

00:09:20,679 --> 00:09:23,290
you want to make changes to it you

00:09:21,730 --> 00:09:25,029
actually have to go and update the

00:09:23,290 --> 00:09:27,850
Jenkins config and update the script

00:09:25,029 --> 00:09:31,569
there so by doing this evaluate file it

00:09:27,850 --> 00:09:34,929
allows you to have the scripts in source

00:09:31,569 --> 00:09:37,480
and be pulled from source when you're

00:09:34,929 --> 00:09:39,610
running this there's also the email ext

00:09:37,480 --> 00:09:41,529
plugin which gives you the ability to

00:09:39,610 --> 00:09:43,629
send emails in the post build of your

00:09:41,529 --> 00:09:44,860
Jenkins job and that gives you there's

00:09:43,629 --> 00:09:47,259
like an advanced button that if you

00:09:44,860 --> 00:09:48,970
click that there's a pre send script

00:09:47,259 --> 00:09:51,370
which understands groovy code as well

00:09:48,970 --> 00:09:53,290
and in there is another snippet where

00:09:51,370 --> 00:09:55,179
you could put code directly in there or

00:09:53,290 --> 00:09:57,279
you could actually reference it from a

00:09:55,179 --> 00:09:59,259
file that's in that project that builds

00:09:57,279 --> 00:10:00,999
from source so this kind of gives you

00:09:59,259 --> 00:10:03,309
the ability to pull these groovy scripts

00:10:00,999 --> 00:10:05,439
from source and execute them from source

00:10:03,309 --> 00:10:06,699
rather than having them you know putting

00:10:05,439 --> 00:10:09,009
the code directly in your Jenkins job

00:10:06,699 --> 00:10:10,809
which can you can be burnt by that if

00:10:09,009 --> 00:10:12,040
you know something changes or you make a

00:10:10,809 --> 00:10:14,110
change or someone else actually

00:10:12,040 --> 00:10:15,970
accidentally changes it and you don't

00:10:14,110 --> 00:10:19,959
have that version that history that

00:10:15,970 --> 00:10:21,249
tracking so some fun with groovy so I'm

00:10:19,959 --> 00:10:23,679
going to show some snippets on the next

00:10:21,249 --> 00:10:26,290
couple slides and essentially I've left

00:10:23,679 --> 00:10:27,759
out all the imports so with system

00:10:26,290 --> 00:10:30,220
groovy scripts you need to have the

00:10:27,759 --> 00:10:32,259
imports or else they don't run so these

00:10:30,220 --> 00:10:34,149
are an example of the various imports

00:10:32,259 --> 00:10:35,619
now all these snippets don't need all of

00:10:34,149 --> 00:10:37,689
these imports but this is just an

00:10:35,619 --> 00:10:40,240
example of the various imports that I

00:10:37,689 --> 00:10:42,110
require in each of these snippets to

00:10:40,240 --> 00:10:44,570
actually have them compile and run

00:10:42,110 --> 00:10:46,730
in my Jenkins jobs so this is just a

00:10:44,570 --> 00:10:49,820
kind of a snapshot as they will not be

00:10:46,730 --> 00:10:51,760
in in the next slides so the first thing

00:10:49,820 --> 00:10:54,320
that I found that when I started doing

00:10:51,760 --> 00:10:55,790
customizing my build pipelines and you

00:10:54,320 --> 00:10:57,800
know writing jobs to you know the

00:10:55,790 --> 00:10:59,690
developer wants this link on the build

00:10:57,800 --> 00:11:01,310
page after the bill Bruns because they

00:10:59,690 --> 00:11:03,410
don't want to dive into some console log

00:11:01,310 --> 00:11:06,410
to find it so the first thing I found

00:11:03,410 --> 00:11:08,630
was the environment variables so in a

00:11:06,410 --> 00:11:10,459
Jenkins job you have various environment

00:11:08,630 --> 00:11:14,180
variables out of the box you get a bunch

00:11:10,459 --> 00:11:16,700
of build number build URL build name I

00:11:14,180 --> 00:11:19,339
think if you have the user build user

00:11:16,700 --> 00:11:22,160
environment plug-in you get like the

00:11:19,339 --> 00:11:24,320
person that submitted it you also get a

00:11:22,160 --> 00:11:26,360
various the parameters if your build as

00:11:24,320 --> 00:11:28,250
a parameter size build you get those

00:11:26,360 --> 00:11:30,230
parameters come in as environment

00:11:28,250 --> 00:11:32,630
variables as well um you can inject

00:11:30,230 --> 00:11:34,519
environment variables and the pre build

00:11:32,630 --> 00:11:35,930
section on so there's there's lots of

00:11:34,519 --> 00:11:37,910
environment variables and they get into

00:11:35,930 --> 00:11:40,490
your build weather you added them or

00:11:37,910 --> 00:11:41,810
they're the defaults and so you you want

00:11:40,490 --> 00:11:43,940
to reference them because they're there

00:11:41,810 --> 00:11:45,589
for a reason and maybe you want to have

00:11:43,940 --> 00:11:47,810
a pretty display with it all at the end

00:11:45,589 --> 00:11:50,149
or you want to send an email and you

00:11:47,810 --> 00:11:51,529
want the email to include it all so you

00:11:50,149 --> 00:11:53,570
need to be able to get these environment

00:11:51,529 --> 00:11:55,370
variables in these groovy scripts in

00:11:53,570 --> 00:11:57,050
order to really do much especially the

00:11:55,370 --> 00:11:59,089
workspace one because if you have

00:11:57,050 --> 00:12:00,890
artifacts or files that are written to

00:11:59,089 --> 00:12:03,350
the workspace you want to be able to get

00:12:00,890 --> 00:12:05,450
them in your groovy scripts so there's a

00:12:03,350 --> 00:12:07,790
couple various ways to get them and it's

00:12:05,450 --> 00:12:09,380
it bothers me that it's they're quite

00:12:07,790 --> 00:12:11,060
different depending on what you're doing

00:12:09,380 --> 00:12:12,770
and it took a little while to kind of

00:12:11,060 --> 00:12:15,350
figure that all out and iron it all out

00:12:12,770 --> 00:12:17,480
so I have it kind of broken down here in

00:12:15,350 --> 00:12:19,190
your system Ruby scripts in the regular

00:12:17,480 --> 00:12:21,140
groovy script with the regular groovy

00:12:19,190 --> 00:12:24,020
script plugin that's part of the build

00:12:21,140 --> 00:12:25,880
step you essentially have to create you

00:12:24,020 --> 00:12:28,790
know you create a little hash map and

00:12:25,880 --> 00:12:30,140
you basically ask the thread the current

00:12:28,790 --> 00:12:34,220
thread which is that bill that's

00:12:30,140 --> 00:12:35,779
building to get its build variables and

00:12:34,220 --> 00:12:39,160
that will essentially put them in that

00:12:35,779 --> 00:12:42,140
map so that you can then reference them

00:12:39,160 --> 00:12:44,570
from that and you can you can get them

00:12:42,140 --> 00:12:46,370
out with either the config get and the

00:12:44,570 --> 00:12:49,240
parameter name you can also do something

00:12:46,370 --> 00:12:50,740
more complex with the build the parent

00:12:49,240 --> 00:12:52,839
which is the parent of that build and

00:12:50,740 --> 00:12:54,670
then essentially you're saying the first

00:12:52,839 --> 00:12:57,060
build so you can do some complex stuff

00:12:54,670 --> 00:12:59,500
on these there's two examples here

00:12:57,060 --> 00:13:02,800
essentially to get out environment

00:12:59,500 --> 00:13:05,320
variables but this is in the groovy and

00:13:02,800 --> 00:13:06,640
the system groovy scripts this is kind

00:13:05,320 --> 00:13:09,040
of how you go about it with the syntax

00:13:06,640 --> 00:13:11,820
you can also reference it with the build

00:13:09,040 --> 00:13:15,130
environment bars dot the build name

00:13:11,820 --> 00:13:17,560
however if you have current spaces in

00:13:15,130 --> 00:13:19,390
your parameters because they came in as

00:13:17,560 --> 00:13:21,370
parameters with you put spaces in them

00:13:19,390 --> 00:13:26,080
I'm not quite sure if that really works

00:13:21,370 --> 00:13:28,120
so it's best to do the you know create

00:13:26,080 --> 00:13:29,740
the map and then throw and put the

00:13:28,120 --> 00:13:31,839
environment variables in that if you're

00:13:29,740 --> 00:13:33,790
going the route of the system query

00:13:31,839 --> 00:13:35,800
script or the regular groovy script if

00:13:33,790 --> 00:13:38,050
you're using the groovy postal plugin

00:13:35,800 --> 00:13:39,610
there's a different way to access the

00:13:38,050 --> 00:13:41,980
variables so with a groovy Pro spill

00:13:39,610 --> 00:13:44,080
plugin if you click the little health

00:13:41,980 --> 00:13:45,910
symbol which most plugins have if you

00:13:44,080 --> 00:13:48,370
haven't seen it there is some times it's

00:13:45,910 --> 00:13:49,870
it's really helpful and if the people

00:13:48,370 --> 00:13:51,279
who wrote the plug-in did a good job

00:13:49,870 --> 00:13:51,790
with it it can really help you get on

00:13:51,279 --> 00:13:55,120
your way

00:13:51,790 --> 00:13:56,440
so with the post build plugin if you

00:13:55,120 --> 00:13:59,230
click the little help it'll tell you

00:13:56,440 --> 00:14:01,660
that there's three variables that you

00:13:59,230 --> 00:14:03,910
can reference directly in that script

00:14:01,660 --> 00:14:07,270
that are already set up so one of them

00:14:03,910 --> 00:14:08,800
being is manager and manager essentially

00:14:07,270 --> 00:14:11,020
you can get your environment variables

00:14:08,800 --> 00:14:13,029
off the manager object so you don't have

00:14:11,020 --> 00:14:15,190
to define manager because the groovy

00:14:13,029 --> 00:14:17,440
postal plugin already defines it for you

00:14:15,190 --> 00:14:19,660
they also have listener which will allow

00:14:17,440 --> 00:14:21,670
you to write out to the console.log so

00:14:19,660 --> 00:14:23,079
you don't have to define that either so

00:14:21,670 --> 00:14:25,680
that's you can read the help on the

00:14:23,079 --> 00:14:30,100
curvy post fill plug-in to find that out

00:14:25,680 --> 00:14:34,240
the email EXT and the priests and script

00:14:30,100 --> 00:14:36,339
also gives you the build variable so you

00:14:34,240 --> 00:14:39,029
can do build on environment variables

00:14:36,339 --> 00:14:42,579
and then do the you know in this case

00:14:39,029 --> 00:14:45,130
male one build result is an environment

00:14:42,579 --> 00:14:48,010
variable for that job the other fun

00:14:45,130 --> 00:14:49,990
thing with Jenkins is that there is an

00:14:48,010 --> 00:14:52,180
environment variables on like the

00:14:49,990 --> 00:14:54,160
actions navigation bar for the if you're

00:14:52,180 --> 00:14:56,440
in the view of that build that just ran

00:14:54,160 --> 00:14:58,690
you can see the environment variables on

00:14:56,440 --> 00:15:00,820
the left-hand page however that is not

00:14:58,690 --> 00:15:01,860
all your environment variables which I

00:15:00,820 --> 00:15:05,519
really wish it was

00:15:01,860 --> 00:15:07,920
but it's not so if you add into the

00:15:05,519 --> 00:15:09,899
build step a shell script and just put

00:15:07,920 --> 00:15:12,029
env in it to print out the environment

00:15:09,899 --> 00:15:14,220
variables it will show you like a

00:15:12,029 --> 00:15:15,810
hundred more and those ones are actually

00:15:14,220 --> 00:15:18,600
pretty useful especially if you want to

00:15:15,810 --> 00:15:20,820
customize an email if say you have a job

00:15:18,600 --> 00:15:22,560
that has you know 100 downstream jobs

00:15:20,820 --> 00:15:25,410
that triggers and you want to send an

00:15:22,560 --> 00:15:27,300
email when the parent finishes that says

00:15:25,410 --> 00:15:29,160
the status of all hundred that it

00:15:27,300 --> 00:15:30,930
triggers you can actually those are all

00:15:29,160 --> 00:15:33,630
environment variables so those

00:15:30,930 --> 00:15:36,060
downstream jobs that get triggered in

00:15:33,630 --> 00:15:39,510
that parent job you will have the

00:15:36,060 --> 00:15:41,550
downstream jobs number and its result so

00:15:39,510 --> 00:15:44,070
you can kind of do some fun stuff with

00:15:41,550 --> 00:15:45,990
that but the environment variables link

00:15:44,070 --> 00:15:47,880
on the main build page for that build

00:15:45,990 --> 00:15:49,769
doesn't have everything so you

00:15:47,880 --> 00:15:52,230
definitely need to add that shell script

00:15:49,769 --> 00:15:55,320
to see what you have available to to

00:15:52,230 --> 00:15:56,790
that build so now that we've got our

00:15:55,320 --> 00:15:58,800
environment variables we can kind of use

00:15:56,790 --> 00:16:01,170
that in some of these Quick Links and

00:15:58,800 --> 00:16:03,420
this administration administrative type

00:16:01,170 --> 00:16:06,209
stuff so we're gonna go over some

00:16:03,420 --> 00:16:07,860
administrative jobs first since I'm kind

00:16:06,209 --> 00:16:10,649
of in charge of our Jenkins system I

00:16:07,860 --> 00:16:12,690
don't like to do anything manually so in

00:16:10,649 --> 00:16:15,420
terms of putting operating system

00:16:12,690 --> 00:16:16,980
patches on my slave nodes or doing you

00:16:15,420 --> 00:16:19,140
know hygienic restarts of them once a

00:16:16,980 --> 00:16:20,880
week I'm not doing this manually so I've

00:16:19,140 --> 00:16:23,010
essentially automated it all with

00:16:20,880 --> 00:16:24,959
Jenkins and I have like this admin tab

00:16:23,010 --> 00:16:26,699
there's admin folder where I put all

00:16:24,959 --> 00:16:28,410
these jobs in there but essentially if

00:16:26,699 --> 00:16:31,320
my engineers ever do something manually

00:16:28,410 --> 00:16:33,690
we put it in the list of the plan and we

00:16:31,320 --> 00:16:34,740
we try and automate it with Jenkins so

00:16:33,690 --> 00:16:36,930
we're gonna cover a couple of things

00:16:34,740 --> 00:16:39,120
here essentially pulling the status of

00:16:36,930 --> 00:16:40,920
your Jenkins nodes this can be useful if

00:16:39,120 --> 00:16:43,529
you want to reboot one but you don't

00:16:40,920 --> 00:16:46,310
want to reboot it while it has jobs

00:16:43,529 --> 00:16:49,010
running restarting in the Jenkins nodes

00:16:46,310 --> 00:16:52,199
toggling the node online or offline

00:16:49,010 --> 00:16:54,839
pinning the build so if you haven't seen

00:16:52,199 --> 00:16:57,449
this feature essentially you know if you

00:16:54,839 --> 00:17:00,750
have a Jenkins job that runs by default

00:16:57,449 --> 00:17:03,240
if you haven't set up any discard old

00:17:00,750 --> 00:17:05,459
build history I think it only keeps like

00:17:03,240 --> 00:17:07,709
you know it keeps a small subset of that

00:17:05,459 --> 00:17:09,689
build history there are plugins that you

00:17:07,709 --> 00:17:11,500
can essentially say keep 30 builds or

00:17:09,689 --> 00:17:14,079
keep the last 30 days worth the bill

00:17:11,500 --> 00:17:15,610
however what we found is we forget

00:17:14,079 --> 00:17:17,019
there's one build in there

00:17:15,610 --> 00:17:20,019
it's our release builds or release

00:17:17,019 --> 00:17:21,699
candidate and we we missed it like with

00:17:20,019 --> 00:17:23,319
us this has happened we've lost our

00:17:21,699 --> 00:17:24,850
artifacts to that build and that's

00:17:23,319 --> 00:17:29,110
devastating because you can't get it

00:17:24,850 --> 00:17:33,610
back so the pin the build is a Jenkins

00:17:29,110 --> 00:17:35,590
job that we wrote to essentially to

00:17:33,610 --> 00:17:38,259
production it will automatically go and

00:17:35,590 --> 00:17:40,120
pin the jars for the actual product

00:17:38,259 --> 00:17:42,610
build so that we don't ever lose them in

00:17:40,120 --> 00:17:44,019
Jenkins and so in the Jenkins UI you can

00:17:42,610 --> 00:17:45,820
manually do this there's a little button

00:17:44,019 --> 00:17:47,320
if you're on that build you'll see in

00:17:45,820 --> 00:17:48,759
the top right hand corner it says pin

00:17:47,320 --> 00:17:52,059
this build or keep this build forever

00:17:48,759 --> 00:17:53,860
and you click that it won't delete it so

00:17:52,059 --> 00:17:56,379
it'll always forever remain in your

00:17:53,860 --> 00:17:58,539
build history so we've kind of automated

00:17:56,379 --> 00:18:02,559
this cool job that will actually go and

00:17:58,539 --> 00:18:05,500
pin the build you want forever we can

00:18:02,559 --> 00:18:08,799
also create Jenkins nodes on the fly and

00:18:05,500 --> 00:18:11,049
you can delete them so so pulling the

00:18:08,799 --> 00:18:13,240
status of Jenkins nodes so you can

00:18:11,049 --> 00:18:15,399
create a fun little function called pull

00:18:13,240 --> 00:18:17,889
jobs and groovy and then essentially

00:18:15,399 --> 00:18:20,500
because you're in the JVM this is a

00:18:17,889 --> 00:18:23,259
system groovy script you can get the

00:18:20,500 --> 00:18:25,809
busy executor is the number of things

00:18:23,259 --> 00:18:27,820
running on that job and essentially

00:18:25,809 --> 00:18:31,480
return that so then you can have

00:18:27,820 --> 00:18:33,429
something that goes in and waits until

00:18:31,480 --> 00:18:35,139
there's no more jobs running so you can

00:18:33,429 --> 00:18:37,960
have a nice complex script that

00:18:35,139 --> 00:18:39,899
essentially you know gets the list of

00:18:37,960 --> 00:18:42,879
all the slaves in your drinkin system

00:18:39,899 --> 00:18:46,059
asks well it's this one got jobs running

00:18:42,879 --> 00:18:47,169
on it if not reboot it you know and kind

00:18:46,059 --> 00:18:49,809
of have it on a schedule that runs

00:18:47,169 --> 00:18:51,940
because we like to reboot the nodes once

00:18:49,809 --> 00:18:54,460
a week essentially we just find that

00:18:51,940 --> 00:18:56,649
sometimes you know whatever it's doing

00:18:54,460 --> 00:18:58,299
you get runaway threads and things like

00:18:56,649 --> 00:19:00,399
that so it's just it's just good to

00:18:58,299 --> 00:19:02,980
clean them up when you can clean them up

00:19:00,399 --> 00:19:04,929
so we do that and then there's you know

00:19:02,980 --> 00:19:07,659
another another thing here is is online

00:19:04,929 --> 00:19:10,120
so you know when that reboot comes back

00:19:07,659 --> 00:19:12,340
depending on how you've configured that

00:19:10,120 --> 00:19:15,789
slave it's Linux usually it reconnects

00:19:12,340 --> 00:19:18,429
via if the SSH pretty easily windows not

00:19:15,789 --> 00:19:20,500
so much so you can basically in your

00:19:18,429 --> 00:19:22,360
scripts say well is it online again if

00:19:20,500 --> 00:19:22,900
it's not then you could potentially say

00:19:22,360 --> 00:19:24,700
you know

00:19:22,900 --> 00:19:28,450
you know run a batch script to make it

00:19:24,700 --> 00:19:30,190
online so this is kind of the power of

00:19:28,450 --> 00:19:33,160
you know these groovy scripts

00:19:30,190 --> 00:19:36,400
essentially here's an example of a

00:19:33,160 --> 00:19:39,160
restart function so to restart your node

00:19:36,400 --> 00:19:41,320
if you wanted to get this all automatic

00:19:39,160 --> 00:19:43,600
and that's what we've done essentially

00:19:41,320 --> 00:19:45,190
is you know it goes and it asks all

00:19:43,600 --> 00:19:46,590
these things and then it reboots the

00:19:45,190 --> 00:19:49,720
nodes and then brings them back online

00:19:46,590 --> 00:19:51,850
and toggles them online so this is

00:19:49,720 --> 00:19:56,980
pretty useful in the administrative area

00:19:51,850 --> 00:19:59,440
of your Jenkins system so this also goes

00:19:56,980 --> 00:20:03,040
with the toggling the node offline and

00:19:59,440 --> 00:20:05,020
online essentially the in a lot of this

00:20:03,040 --> 00:20:06,250
stuff you can kind of google it if

00:20:05,020 --> 00:20:08,200
there's some Stack Overflow

00:20:06,250 --> 00:20:09,790
and I wanted to share these snippets

00:20:08,200 --> 00:20:11,500
because you know it took me a while to

00:20:09,790 --> 00:20:13,600
kind of iron them out and figure them

00:20:11,500 --> 00:20:15,250
out and that's why I wanted to share

00:20:13,600 --> 00:20:17,380
them there's not too much in terms of

00:20:15,250 --> 00:20:19,810
documentation but there is the Jenkins

00:20:17,380 --> 00:20:21,970
API so if you do Google the Jenkins API

00:20:19,810 --> 00:20:24,280
you can kind of see a lot of the stuff

00:20:21,970 --> 00:20:26,440
on like the computer and the slave and

00:20:24,280 --> 00:20:28,270
the Jenkins project and an abstract

00:20:26,440 --> 00:20:29,700
build and all that sort of stuff so you

00:20:28,270 --> 00:20:31,960
can see the functions that are available

00:20:29,700 --> 00:20:34,300
and then you can actually Google the

00:20:31,960 --> 00:20:36,580
exact function name to see use cases of

00:20:34,300 --> 00:20:39,250
it that's kind of how I've come to this

00:20:36,580 --> 00:20:42,190
these snippets but this essentially is a

00:20:39,250 --> 00:20:44,560
way to toggle that node so before in our

00:20:42,190 --> 00:20:47,860
in our you know in my high genic reboot

00:20:44,560 --> 00:20:51,010
of my Jenkins notes what I do is I first

00:20:47,860 --> 00:20:54,040
toggle it offline and then no new builds

00:20:51,010 --> 00:20:55,930
can go to it and then if we wait for the

00:20:54,040 --> 00:20:57,610
jobs to go to zero once the jobs are

00:20:55,930 --> 00:20:59,740
zero then we call the restart function

00:20:57,610 --> 00:21:01,930
once the restart comes back then we say

00:20:59,740 --> 00:21:03,700
is it online yet and then we wait is it

00:21:01,930 --> 00:21:06,400
online yet and then we wait once it's

00:21:03,700 --> 00:21:08,410
online then we where we go our merry way

00:21:06,400 --> 00:21:11,230
and it it goes into the queue for the

00:21:08,410 --> 00:21:14,560
next seven days so you can do some fun

00:21:11,230 --> 00:21:16,900
stuff with this the pinning the build so

00:21:14,560 --> 00:21:19,030
we talked about this before essentially

00:21:16,900 --> 00:21:21,520
there's I have three little functions

00:21:19,030 --> 00:21:24,250
here that essentially will go and get

00:21:21,520 --> 00:21:26,770
all the jobs get the exact build job and

00:21:24,250 --> 00:21:29,110
get the the build job that you want to

00:21:26,770 --> 00:21:30,940
mark and this is kind of the code two

00:21:29,110 --> 00:21:33,430
these are the functions that you would

00:21:30,940 --> 00:21:35,740
use to essentially pin a specific build

00:21:33,430 --> 00:21:38,860
and the Jenkins job that we wrote

00:21:35,740 --> 00:21:41,890
runs this will take in parameters of the

00:21:38,860 --> 00:21:43,530
job name so the job project name of the

00:21:41,890 --> 00:21:46,600
Jenkins job you're actually looking to

00:21:43,530 --> 00:21:49,630
pin and then the build number so that

00:21:46,600 --> 00:21:51,700
would get passed to this in this this is

00:21:49,630 --> 00:21:54,160
a parent script that calls those helper

00:21:51,700 --> 00:21:56,470
functions so essentially it goes gets

00:21:54,160 --> 00:21:57,850
the environment variables of the job so

00:21:56,470 --> 00:21:59,950
it gets the job name and the build

00:21:57,850 --> 00:22:03,970
number and essentially it gets the build

00:21:59,950 --> 00:22:06,040
to run to mark and then it will keep log

00:22:03,970 --> 00:22:08,320
true and keep log true is in the Jenkins

00:22:06,040 --> 00:22:09,790
API and that's essentially when you go

00:22:08,320 --> 00:22:11,559
as a user and click that little button

00:22:09,790 --> 00:22:13,450
let's just keep this build forever

00:22:11,559 --> 00:22:15,490
that's what's getting executed in the

00:22:13,450 --> 00:22:17,350
back end so you kind of can simulate I

00:22:15,490 --> 00:22:19,600
you know this is something that was

00:22:17,350 --> 00:22:21,910
manual it's pretty simple but we'd

00:22:19,600 --> 00:22:23,290
forget to do it and so now we just kind

00:22:21,910 --> 00:22:28,420
of hooked it up to automatically do it

00:22:23,290 --> 00:22:31,920
for us creating a node so here's here's

00:22:28,420 --> 00:22:34,780
a way to automate creating a node so

00:22:31,920 --> 00:22:37,240
essentially for Windows you have this

00:22:34,780 --> 00:22:39,880
secret code that you need to get for in

00:22:37,240 --> 00:22:41,710
order to start this the slave up and

00:22:39,880 --> 00:22:43,929
have it connect to Jenkins um so that's

00:22:41,710 --> 00:22:45,580
a little function to get that you know I

00:22:43,929 --> 00:22:47,410
have a couple parameters based on you

00:22:45,580 --> 00:22:50,830
know what I want to call it what I want

00:22:47,410 --> 00:22:52,090
to label it and what I want to what the

00:22:50,830 --> 00:22:53,830
operating system is things like that

00:22:52,090 --> 00:22:55,150
nope this is the machine is already

00:22:53,830 --> 00:22:57,940
existing out there

00:22:55,150 --> 00:23:00,280
this is not creating a virtual machine

00:22:57,940 --> 00:23:02,110
this is just hey I have a machine out

00:23:00,280 --> 00:23:03,610
there I want to connect it to Jenkins so

00:23:02,110 --> 00:23:08,500
this is dynamically connecting it to

00:23:03,610 --> 00:23:10,720
Jenkins when you run and deleting you

00:23:08,500 --> 00:23:12,100
notice wealth so you know you can if

00:23:10,720 --> 00:23:14,320
you're you don't want it to be part of

00:23:12,100 --> 00:23:17,950
your Jenkins system anymore system

00:23:14,320 --> 00:23:19,540
anymore or you find it's constantly

00:23:17,950 --> 00:23:21,460
having problems or you have something

00:23:19,540 --> 00:23:24,160
running that's monitoring and it's just

00:23:21,460 --> 00:23:26,710
always crashing running out of memory

00:23:24,160 --> 00:23:28,030
you could delete it from Jenkins put it

00:23:26,710 --> 00:23:34,809
in you know put it somewhere to be

00:23:28,030 --> 00:23:36,160
looked at and fixed her or recreated so

00:23:34,809 --> 00:23:38,830
that was some administrative type

00:23:36,160 --> 00:23:41,500
snippets of Ruby code that we use for

00:23:38,830 --> 00:23:43,720
various those types of jobs now we're

00:23:41,500 --> 00:23:46,330
going to talk about some fun ways of

00:23:43,720 --> 00:23:48,440
customizing your build pages or your job

00:23:46,330 --> 00:23:51,620
for your drink it spilled so we'll talk

00:23:48,440 --> 00:23:54,530
about emails Quick Links eye setting the

00:23:51,620 --> 00:23:57,710
job display setting the description and

00:23:54,530 --> 00:24:00,230
essentially parsing sub job results and

00:23:57,710 --> 00:24:03,500
creating pool tables with analysis on

00:24:00,230 --> 00:24:05,690
your build page so this is what I mean

00:24:03,500 --> 00:24:08,240
by those things if you're not familiar

00:24:05,690 --> 00:24:10,610
with it so the job name is essentially

00:24:08,240 --> 00:24:11,870
this is an example of a build page what

00:24:10,610 --> 00:24:13,520
it might look like it may look a little

00:24:11,870 --> 00:24:16,370
different for you based on what your

00:24:13,520 --> 00:24:18,680
bill does but for us we have a bunch of

00:24:16,370 --> 00:24:21,740
build artifacts we run some JUnit tests

00:24:18,680 --> 00:24:25,040
so we have test results and so

00:24:21,740 --> 00:24:26,780
essentially you can set the build the

00:24:25,040 --> 00:24:29,600
job name so you can dynamically change

00:24:26,780 --> 00:24:31,630
that on with groovy you can dynamically

00:24:29,600 --> 00:24:34,520
add to or enhance the job description

00:24:31,630 --> 00:24:36,980
you can also add we add a little table

00:24:34,520 --> 00:24:38,930
with data that we parsed from the

00:24:36,980 --> 00:24:40,670
downstream jobs you put it up on the

00:24:38,930 --> 00:24:42,050
parent and then you can also add quick

00:24:40,670 --> 00:24:43,610
links and the quick links are my

00:24:42,050 --> 00:24:45,830
favorite because that gives the

00:24:43,610 --> 00:24:48,650
developers of one click button to get to

00:24:45,830 --> 00:24:50,000
what they need so that was one thing I

00:24:48,650 --> 00:24:51,650
think in the session a little while ago

00:24:50,000 --> 00:24:54,680
was like ask the developers what they

00:24:51,650 --> 00:24:57,020
want it's true you know it really helps

00:24:54,680 --> 00:24:58,370
you know they think you're you're really

00:24:57,020 --> 00:25:00,200
trying to make things better for them

00:24:58,370 --> 00:25:01,280
and then you get these fun things and

00:25:00,200 --> 00:25:03,500
then they actually look at the test

00:25:01,280 --> 00:25:06,400
results when it builds for their build

00:25:03,500 --> 00:25:09,710
so it's it's a win-win

00:25:06,400 --> 00:25:13,490
so the emails so you can do some things

00:25:09,710 --> 00:25:15,680
in the email exd plugin which in the

00:25:13,490 --> 00:25:18,290
post build can run groovy and that can

00:25:15,680 --> 00:25:20,360
essentially look at the job that just

00:25:18,290 --> 00:25:23,690
ran and then pull information out of

00:25:20,360 --> 00:25:25,790
that job and add it to an email so what

00:25:23,690 --> 00:25:28,520
I usually do is I have a parent job that

00:25:25,790 --> 00:25:30,820
runs three downstream jobs and they're

00:25:28,520 --> 00:25:33,680
all that job is an environment variable

00:25:30,820 --> 00:25:37,010
the result of that job so essentially

00:25:33,680 --> 00:25:39,650
mail a one male or male porn male 2 and

00:25:37,010 --> 00:25:42,710
male 3 are sub jobs of my parent

00:25:39,650 --> 00:25:45,020
acceptance and they all ran downstream

00:25:42,710 --> 00:25:46,490
so essentially in the acceptance when

00:25:45,020 --> 00:25:49,970
it's done running I want to go and get

00:25:46,490 --> 00:25:51,470
the results create a you know create a

00:25:49,970 --> 00:25:53,330
list of all the failures because I'm

00:25:51,470 --> 00:25:56,030
using the j-unit plugin to do the

00:25:53,330 --> 00:25:58,400
failures and create this email essential

00:25:56,030 --> 00:25:59,960
so I changed the subject based on

00:25:58,400 --> 00:26:00,380
whether or not the unit test passed or

00:25:59,960 --> 00:26:02,330
failed

00:26:00,380 --> 00:26:04,250
I put the total failed so I try to make

00:26:02,330 --> 00:26:05,960
the subject pretty concise since people

00:26:04,250 --> 00:26:08,000
are looking at this on mobile devices

00:26:05,960 --> 00:26:09,800
but you can customize this you can do

00:26:08,000 --> 00:26:12,350
you know whatever it is that that you

00:26:09,800 --> 00:26:14,210
need to to enhance your your pipeline

00:26:12,350 --> 00:26:15,890
you can get the list of actual tests

00:26:14,210 --> 00:26:17,960
keys that failed this can be really

00:26:15,890 --> 00:26:19,670
useful so you so if it's like all login

00:26:17,960 --> 00:26:21,800
test cases or something like that

00:26:19,670 --> 00:26:26,900
you know you'll see it it'll show up in

00:26:21,800 --> 00:26:29,660
the email and this is an example of we

00:26:26,900 --> 00:26:31,460
also put Quick Links in our emails so

00:26:29,660 --> 00:26:34,130
this is the other one click to get to

00:26:31,460 --> 00:26:36,110
the results so you know when you get an

00:26:34,130 --> 00:26:38,180
email and your Inbox I don't want to

00:26:36,110 --> 00:26:40,370
have to go to Jenkins and login and then

00:26:38,180 --> 00:26:42,110
navigate to the build page find the job

00:26:40,370 --> 00:26:44,240
that ran find that quick link and click

00:26:42,110 --> 00:26:46,820
on it why not just give it to them an

00:26:44,240 --> 00:26:49,760
email so you can do this you can add

00:26:46,820 --> 00:26:52,520
HTML to the email it's pretty basic HTML

00:26:49,760 --> 00:26:55,760
nothing fancy but essentially it has a

00:26:52,520 --> 00:26:57,980
link to those the results to the URL to

00:26:55,760 --> 00:26:59,810
those jobs that ran with the blogs and

00:26:57,980 --> 00:27:04,520
everything on them so you can really

00:26:59,810 --> 00:27:07,370
customize this in the emails so this is

00:27:04,520 --> 00:27:08,900
the end part of the email XD if you're

00:27:07,370 --> 00:27:11,900
writing directly if you have a script

00:27:08,900 --> 00:27:14,300
executing in that section where this is

00:27:11,900 --> 00:27:16,070
essentially setting the subject adding

00:27:14,300 --> 00:27:17,930
those links for each one of those sub

00:27:16,070 --> 00:27:20,210
jobs and then essentially you set the

00:27:17,930 --> 00:27:22,460
contents to the body of the email with

00:27:20,210 --> 00:27:23,780
all that data in all of this will go

00:27:22,460 --> 00:27:25,160
into a groovy script which you'd

00:27:23,780 --> 00:27:27,350
hopefully put in source and then

00:27:25,160 --> 00:27:29,660
reference in that pretty send script of

00:27:27,350 --> 00:27:33,530
the email EXT plugin in your post bill

00:27:29,660 --> 00:27:35,810
now this looks great however if you have

00:27:33,530 --> 00:27:38,770
20 acceptance jobs that look just like

00:27:35,810 --> 00:27:41,870
that and they all have different

00:27:38,770 --> 00:27:44,690
different sub job names so maybe it's

00:27:41,870 --> 00:27:46,670
male 4 male 5 ml6

00:27:44,690 --> 00:27:48,680
this script is hard-coded to those

00:27:46,670 --> 00:27:50,600
environment variables which means that

00:27:48,680 --> 00:27:52,850
you now have to copy the script or make

00:27:50,600 --> 00:27:55,310
it parameter ties or do something to

00:27:52,850 --> 00:27:56,750
allow the other 20 jobs to leverage this

00:27:55,310 --> 00:27:59,240
because you don't want to just copy it

00:27:56,750 --> 00:28:00,890
because then you have multiple places to

00:27:59,240 --> 00:28:02,990
make changes because if you make changes

00:28:00,890 --> 00:28:04,760
to one of them the developers are bound

00:28:02,990 --> 00:28:09,440
to want the same fun things and the

00:28:04,760 --> 00:28:12,500
so it's best to think about that so what

00:28:09,440 --> 00:28:14,990
you can do is in the build section so

00:28:12,500 --> 00:28:18,520
forget the groovy forget the email ext

00:28:14,990 --> 00:28:23,210
script in the in the build section of

00:28:18,520 --> 00:28:25,520
your job you can essentially with groovy

00:28:23,210 --> 00:28:27,860
system scripts you can create the email

00:28:25,520 --> 00:28:31,580
on so with groovy because it's running

00:28:27,860 --> 00:28:33,980
and the Jenkins JVM you can ask it what

00:28:31,580 --> 00:28:36,020
downstream jobs to do trigger and get a

00:28:33,980 --> 00:28:38,570
list of the names and then you can

00:28:36,020 --> 00:28:40,760
essentially because it's a known format

00:28:38,570 --> 00:28:43,280
that those environment variables for the

00:28:40,760 --> 00:28:45,530
downstream jobs are created with build

00:28:43,280 --> 00:28:47,840
result and build number appended to them

00:28:45,530 --> 00:28:49,970
that's just that's just the standard

00:28:47,840 --> 00:28:52,280
convention for Jenkins you can

00:28:49,970 --> 00:28:54,770
essentially dynamically create this

00:28:52,280 --> 00:28:56,900
email and then this works for any of

00:28:54,770 --> 00:28:58,760
your acceptance jobs or any of the other

00:28:56,900 --> 00:29:00,140
build jobs because you're not

00:28:58,760 --> 00:29:03,230
hard-coding to those specific

00:29:00,140 --> 00:29:06,740
environment variables and this is not

00:29:03,230 --> 00:29:08,929
the full script but essentially shows

00:29:06,740 --> 00:29:12,940
you how you know we're using multi job

00:29:08,929 --> 00:29:16,460
plugins so for that it's you have to

00:29:12,940 --> 00:29:19,010
actually cast it to a multi job Java or

00:29:16,460 --> 00:29:21,020
Jenkins API class and then you can

00:29:19,010 --> 00:29:22,790
essentially you know get the sub builds

00:29:21,020 --> 00:29:24,559
from it and kind of loop loop through

00:29:22,790 --> 00:29:26,540
and iterate through that now if you

00:29:24,559 --> 00:29:28,460
weren't using the multi job plug-in you

00:29:26,540 --> 00:29:29,960
will also notice after you do this a few

00:29:28,460 --> 00:29:32,600
times that when the environment

00:29:29,960 --> 00:29:36,350
variables for downstream trigger jobs

00:29:32,600 --> 00:29:39,740
for non multi job projects come in with

00:29:36,350 --> 00:29:43,340
trigger built in front of the job name

00:29:39,740 --> 00:29:45,919
so the the multi job plug-in it's not

00:29:43,340 --> 00:29:48,080
standardized I'm not sure you know why

00:29:45,919 --> 00:29:50,210
it went that way but the multi job

00:29:48,080 --> 00:29:52,370
plug-in the sub jobs come in with sub

00:29:50,210 --> 00:29:54,049
job name underscore build underscore

00:29:52,370 --> 00:29:57,230
number or underscore build underscore

00:29:54,049 --> 00:29:59,360
result the regular freestyle project in

00:29:57,230 --> 00:30:01,760
Jenkins the downstream jobs come in with

00:29:59,360 --> 00:30:04,400
triggered build number or triggered

00:30:01,760 --> 00:30:06,080
build result and then the name of the

00:30:04,400 --> 00:30:08,330
job so you just you got to play around

00:30:06,080 --> 00:30:09,700
with the environment variables based on

00:30:08,330 --> 00:30:11,980
the jobs that you have and

00:30:09,700 --> 00:30:13,809
you know however you set them up but it

00:30:11,980 --> 00:30:15,639
is standard based on you know whichever

00:30:13,809 --> 00:30:17,740
way you went in your pipeline but you

00:30:15,639 --> 00:30:20,289
can write this and kind of do this all

00:30:17,740 --> 00:30:23,200
dynamically which is kind of fun and

00:30:20,289 --> 00:30:26,260
then it's one place to make a change and

00:30:23,200 --> 00:30:29,620
you don't have to update it in multiple

00:30:26,260 --> 00:30:33,159
places so that's the email so now we'll

00:30:29,620 --> 00:30:36,010
talk about Quick Links on your actual

00:30:33,159 --> 00:30:38,980
build page so we saw back on that

00:30:36,010 --> 00:30:42,100
original slide on how I had some browser

00:30:38,980 --> 00:30:43,840
console logs and our result viewer so

00:30:42,100 --> 00:30:45,700
essentially this is in the groovy post

00:30:43,840 --> 00:30:47,860
build plugin so the groovy post build

00:30:45,700 --> 00:30:50,590
plugin allows you to customize to our

00:30:47,860 --> 00:30:52,690
build page and here you can see I want

00:30:50,590 --> 00:30:55,450
to get the result of that sub job and

00:30:52,690 --> 00:30:57,639
then I want to log a quick link so I

00:30:55,450 --> 00:31:00,159
want to create that HTML link to the

00:30:57,639 --> 00:31:02,409
results on that build page and so you

00:31:00,159 --> 00:31:05,350
can do all this in the groovy post build

00:31:02,409 --> 00:31:07,600
plugin now one thing to note if you have

00:31:05,350 --> 00:31:09,190
20 jobs that you want to do this in the

00:31:07,600 --> 00:31:11,620
similar thing applies I have it

00:31:09,190 --> 00:31:13,720
hard-coded to that environment variable

00:31:11,620 --> 00:31:15,490
and so in order to make a change to one

00:31:13,720 --> 00:31:17,799
you have to make it to all of them and

00:31:15,490 --> 00:31:20,500
so you have to have either passing that

00:31:17,799 --> 00:31:22,090
environment variable through to a groovy

00:31:20,500 --> 00:31:23,470
script or you're going to have multiple

00:31:22,090 --> 00:31:26,019
copies all over the place and then it

00:31:23,470 --> 00:31:27,850
gets really confusing so the same thing

00:31:26,019 --> 00:31:29,799
applies that we just talked about with

00:31:27,850 --> 00:31:32,139
the email as you can do this dynamically

00:31:29,799 --> 00:31:34,299
as well so this was kind of the biggest

00:31:32,139 --> 00:31:36,700
change that I recently made to all of

00:31:34,299 --> 00:31:38,980
our pipeline jobs was to change them to

00:31:36,700 --> 00:31:41,200
essentially call a system groovy script

00:31:38,980 --> 00:31:43,029
at the end of the build and so every

00:31:41,200 --> 00:31:44,860
single one of them calls the same groovy

00:31:43,029 --> 00:31:46,720
script and it will create these fun

00:31:44,860 --> 00:31:51,100
quick links and it essentially will go

00:31:46,720 --> 00:31:53,139
and log them on that build page and the

00:31:51,100 --> 00:31:55,210
way you do this is you do have to have

00:31:53,139 --> 00:31:57,700
the groovy post build plug-in installed

00:31:55,210 --> 00:32:00,100
but you can actually use the API the

00:31:57,700 --> 00:32:02,110
drinkin's api of it to add that build

00:32:00,100 --> 00:32:04,809
action so you don't actually have to use

00:32:02,110 --> 00:32:07,929
the post build step to do this you can

00:32:04,809 --> 00:32:09,970
do it right in at Build time so the

00:32:07,929 --> 00:32:13,299
groovy post build summary action is

00:32:09,970 --> 00:32:15,640
actually using that plugins API to

00:32:13,299 --> 00:32:17,670
create that link

00:32:15,640 --> 00:32:21,550
to add an enhance to that build page

00:32:17,670 --> 00:32:23,530
that HTML that you want to add so that's

00:32:21,550 --> 00:32:26,350
the that's doing it dynamically for the

00:32:23,530 --> 00:32:27,940
Quick Links and the emails so now we'll

00:32:26,350 --> 00:32:29,470
talk about some easier stuff to

00:32:27,940 --> 00:32:32,560
customize that's really quick to do

00:32:29,470 --> 00:32:34,600
right away is setting your job display

00:32:32,560 --> 00:32:37,780
name so you can change the name of the

00:32:34,600 --> 00:32:39,880
job on the fly with crew B so we like to

00:32:37,780 --> 00:32:41,530
change them to the parameters that are

00:32:39,880 --> 00:32:43,570
actually running or the actual build

00:32:41,530 --> 00:32:45,670
number we don't like the out-of-the-box

00:32:43,570 --> 00:32:47,140
just really confusing to find what

00:32:45,670 --> 00:32:49,420
you're looking for especially if the

00:32:47,140 --> 00:32:51,130
build is highly prioritized and you're

00:32:49,420 --> 00:32:53,770
really trying to get some work quick

00:32:51,130 --> 00:32:55,840
you can also do this in the groovy post

00:32:53,770 --> 00:32:58,930
build as well so it's basically the same

00:32:55,840 --> 00:33:00,610
thing to do it two different ways and

00:32:58,930 --> 00:33:03,010
you know this also assumes that I've

00:33:00,610 --> 00:33:06,190
gotten environment variables ahead of

00:33:03,010 --> 00:33:08,350
time as we've seen on other slides you

00:33:06,190 --> 00:33:10,270
can also set the job description so

00:33:08,350 --> 00:33:12,280
that's the little blurb that's

00:33:10,270 --> 00:33:14,470
underneath the build and what's really

00:33:12,280 --> 00:33:16,420
nice with that is that that shows up in

00:33:14,470 --> 00:33:18,580
the build history page it's a

00:33:16,420 --> 00:33:20,560
concatenated version but if you say

00:33:18,580 --> 00:33:22,630
you're someone reviewed it and you need

00:33:20,560 --> 00:33:24,820
to respond or something you can add like

00:33:22,630 --> 00:33:26,950
comments to it so then you don't have to

00:33:24,820 --> 00:33:28,540
dive into the build page you can just

00:33:26,950 --> 00:33:31,810
essentially read the build history and

00:33:28,540 --> 00:33:33,610
see all this text so you can do this as

00:33:31,810 --> 00:33:35,950
file with and like we like to add the

00:33:33,610 --> 00:33:37,630
test result to the description so it's a

00:33:35,950 --> 00:33:39,250
one quick look and you can see well how

00:33:37,630 --> 00:33:41,040
many test cases passed how many test

00:33:39,250 --> 00:33:45,130
cases failed is this build good or not

00:33:41,040 --> 00:33:48,520
so that's that way so the Jenkins

00:33:45,130 --> 00:33:50,950
workspace so this can be leveraged and

00:33:48,520 --> 00:33:54,130
used and I use it a lot in

00:33:50,950 --> 00:33:55,840
administrative type shops so every

00:33:54,130 --> 00:33:58,090
Jenkins job that runs runs in its own

00:33:55,840 --> 00:34:00,370
workspace if you're using concurrent

00:33:58,090 --> 00:34:03,640
jobs you get a unique workspace for each

00:34:00,370 --> 00:34:05,710
one of those I do recommend to delete

00:34:03,640 --> 00:34:07,870
the workspace before you start so you

00:34:05,710 --> 00:34:09,940
don't have pre-existing artifacts lying

00:34:07,870 --> 00:34:11,260
around but essentially you can use it

00:34:09,940 --> 00:34:13,390
you can write to it you can have the

00:34:11,260 --> 00:34:15,520
Jenkins build write files out to it

00:34:13,390 --> 00:34:18,340
write its state say you know I did this

00:34:15,520 --> 00:34:20,590
so the next job that comes in can pick

00:34:18,340 --> 00:34:22,929
up where it left off so we've kind of

00:34:20,590 --> 00:34:25,300
done with this slave maintenance this

00:34:22,929 --> 00:34:26,630
reboot hygenic rebooting of our nodes we

00:34:25,300 --> 00:34:29,000
essentially I have the two

00:34:26,630 --> 00:34:31,520
jobs that are the worker jobs run out of

00:34:29,000 --> 00:34:33,560
the same custom workspace so that one

00:34:31,520 --> 00:34:36,140
writes files to it and then the other is

00:34:33,560 --> 00:34:37,790
you know it's on a cycle and it'll look

00:34:36,140 --> 00:34:40,460
to see if it has work to do so I don't

00:34:37,790 --> 00:34:42,410
actually have like the snowed cycle is

00:34:40,460 --> 00:34:45,440
constantly running but it's not a job

00:34:42,410 --> 00:34:47,270
that's blocking for a day so it's a

00:34:45,440 --> 00:34:48,770
quick running job and it just writes out

00:34:47,270 --> 00:34:50,300
its work to the workspace and then the

00:34:48,770 --> 00:34:52,340
other quick running job picks up its

00:34:50,300 --> 00:34:54,650
work and goes and does what it needs to

00:34:52,340 --> 00:34:56,860
do so you can really use the the

00:34:54,650 --> 00:35:00,140
workspace to kind of on get around the

00:34:56,860 --> 00:35:02,870
jobs that are long-running the set of

00:35:00,140 --> 00:35:04,850
stuff so the last thing here that I

00:35:02,870 --> 00:35:06,920
wanted to show is the groovy label

00:35:04,850 --> 00:35:08,480
assignment plugin so this is kind of fun

00:35:06,920 --> 00:35:10,490
and you have to install this plugin but

00:35:08,480 --> 00:35:12,860
it gives you a checkbox to essentially

00:35:10,490 --> 00:35:14,510
based on parameters of your Jenkins job

00:35:12,860 --> 00:35:16,730
or you know based on if it's

00:35:14,510 --> 00:35:19,070
automatically triggered send it to one

00:35:16,730 --> 00:35:21,800
node versus sending it to another in

00:35:19,070 --> 00:35:24,590
this will trump whatever is set up in

00:35:21,800 --> 00:35:26,660
the restrict this project area so this

00:35:24,590 --> 00:35:30,380
will trump that and set it to whatever

00:35:26,660 --> 00:35:33,650
you essentially specify here know if you

00:35:30,380 --> 00:35:36,490
have code here that doesn't compile or

00:35:33,650 --> 00:35:40,250
it sends it to a node that doesn't exist

00:35:36,490 --> 00:35:42,920
weird things happen so your Jenkins job

00:35:40,250 --> 00:35:44,810
doesn't actually get submitted it won't

00:35:42,920 --> 00:35:46,220
actually show if you say build now or

00:35:44,810 --> 00:35:48,590
build with parameters it doesn't

00:35:46,220 --> 00:35:51,770
actually show up in the queue it's

00:35:48,590 --> 00:35:53,650
probably a bug somewhere but it if as

00:35:51,770 --> 00:35:56,240
long as you make sure you have the right

00:35:53,650 --> 00:35:58,850
block of code in here it can be pretty

00:35:56,240 --> 00:36:00,050
useful so what we've done you know we

00:35:58,850 --> 00:36:02,570
make a lot of changes to our pipeline

00:36:00,050 --> 00:36:04,880
and I want to ensure that it's properly

00:36:02,570 --> 00:36:07,190
tested before we actually use it for the

00:36:04,880 --> 00:36:09,290
real product builds and so we have this

00:36:07,190 --> 00:36:10,940
parameter this checkbox on every single

00:36:09,290 --> 00:36:14,180
one of our jobs that's essentially our

00:36:10,940 --> 00:36:15,590
regress regression test of that job so

00:36:14,180 --> 00:36:17,390
it allows me to kind of run a whole

00:36:15,590 --> 00:36:21,320
regression test cycle of our production

00:36:17,390 --> 00:36:23,120
jobs by passing this true environment

00:36:21,320 --> 00:36:28,270
variable to everything and kind of test

00:36:23,120 --> 00:36:28,270
it out in a non real non real scenario

00:36:29,680 --> 00:36:34,070
so these are some of the useful plugins

00:36:32,690 --> 00:36:35,430
that we've covered in this presentation

00:36:34,070 --> 00:36:37,109
that you will

00:36:35,430 --> 00:36:39,839
need if you want to do any of this fun

00:36:37,109 --> 00:36:42,510
stuff so the build name set our plugin

00:36:39,839 --> 00:36:45,240
that gives you the ability to set that

00:36:42,510 --> 00:36:46,559
build name the groovy plugin gives you

00:36:45,240 --> 00:36:48,599
the system groovy scripts and the

00:36:46,559 --> 00:36:50,490
regular groovy scripts the label

00:36:48,599 --> 00:36:53,279
assignment plug-in as we saw a toggle

00:36:50,490 --> 00:36:54,839
switch do you want to send it to the

00:36:53,279 --> 00:36:57,690
post build plugin allows you to

00:36:54,839 --> 00:36:59,430
customize that build page the j-unit

00:36:57,690 --> 00:37:02,190
acts to knit or give you the various

00:36:59,430 --> 00:37:04,349
test reporting results on basically what

00:37:02,190 --> 00:37:06,329
ran in that pipeline and then the email

00:37:04,349 --> 00:37:08,549
XD plugin gives you that customized

00:37:06,329 --> 00:37:10,319
email at the end of your job and gives

00:37:08,549 --> 00:37:13,829
you the ability to run groovy to create

00:37:10,319 --> 00:37:15,750
that customized email and as always I

00:37:13,829 --> 00:37:18,000
say you know if you're stuck Google it

00:37:15,750 --> 00:37:19,799
because somebody out there probably has

00:37:18,000 --> 00:37:22,770
the same problem as you as I've found

00:37:19,799 --> 00:37:25,200
I've even gone on the Jenkins like IRC

00:37:22,770 --> 00:37:27,359
chat which I hadn't used IRC in a very

00:37:25,200 --> 00:37:30,180
long time to ask questions and got

00:37:27,359 --> 00:37:33,089
really helpful answers there so you know

00:37:30,180 --> 00:37:34,650
people are out there to assist and I you

00:37:33,089 --> 00:37:36,210
know I recommend reaching out to the

00:37:34,650 --> 00:37:38,400
community if you're stuck don't spend

00:37:36,210 --> 00:37:40,319
hours and hours on something because

00:37:38,400 --> 00:37:42,539
somebody else has probably done it or

00:37:40,319 --> 00:37:45,029
tried to do it and has some sort of

00:37:42,539 --> 00:37:48,990
solution for you

00:37:45,029 --> 00:37:53,940
so with that have any questions would

00:37:48,990 --> 00:37:57,240
you back to the previous life Oh your

00:37:53,940 --> 00:37:59,839
groovy scripts fit around Jenkins and

00:37:57,240 --> 00:38:02,369
the plugins like a glove around a hand

00:37:59,839 --> 00:38:04,920
what has been your experience in terms

00:38:02,369 --> 00:38:07,559
of stability from one release to the

00:38:04,920 --> 00:38:09,660
next does it break your code or do your

00:38:07,559 --> 00:38:12,329
scripts keep going my scripts keep going

00:38:09,660 --> 00:38:13,799
on we are very we are very I guess picky

00:38:12,329 --> 00:38:16,109
when we actually take our Jenkins

00:38:13,799 --> 00:38:18,510
updates because it is quite the ordeal

00:38:16,109 --> 00:38:21,089
to update Jenkins I don't know if

00:38:18,510 --> 00:38:23,760
anyone's tried it but it can take an old

00:38:21,089 --> 00:38:25,859
take all day especially specific plugins

00:38:23,760 --> 00:38:27,630
so we have to schedule downtime to do

00:38:25,859 --> 00:38:30,119
that but what I find is when you read

00:38:27,630 --> 00:38:32,039
the description on what updates are

00:38:30,119 --> 00:38:33,809
really coming in that's key and there's

00:38:32,039 --> 00:38:35,849
a couple plugins that will show if it's

00:38:33,809 --> 00:38:37,380
going to mess up your stuff it says in

00:38:35,849 --> 00:38:39,000
red and you really have to read the fine

00:38:37,380 --> 00:38:40,630
print don't just take it because it

00:38:39,000 --> 00:38:42,520
could change things

00:38:40,630 --> 00:38:43,870
in that scenario we usually go into more

00:38:42,520 --> 00:38:45,970
depth to figure out well do we really

00:38:43,870 --> 00:38:47,710
need this update how is it going to

00:38:45,970 --> 00:38:50,260
impact us do we have the time to consume

00:38:47,710 --> 00:38:52,300
it and downtime window and we go like

00:38:50,260 --> 00:38:55,420
that but I haven't had any issues with

00:38:52,300 --> 00:38:57,220
the groovy scripts based on you know a

00:38:55,420 --> 00:39:00,370
few releases that we've been using them

00:38:57,220 --> 00:39:02,890
for the other question I think you

00:39:00,370 --> 00:39:05,740
started out by saying put your scripts

00:39:02,890 --> 00:39:08,500
and source code management and then have

00:39:05,740 --> 00:39:11,980
a groovy pull them out and Jenkins will

00:39:08,500 --> 00:39:14,110
notice the change wouldn't a little

00:39:11,980 --> 00:39:16,780
change in one of your scripts and

00:39:14,110 --> 00:39:19,810
putting it into source code caused a

00:39:16,780 --> 00:39:22,330
flurry of 200 builds that depend on this

00:39:19,810 --> 00:39:23,980
screen oh so what I do is I have one job

00:39:22,330 --> 00:39:25,960
that's essentially building that source

00:39:23,980 --> 00:39:28,270
project just like a build would build

00:39:25,960 --> 00:39:31,060
your product and it's building my script

00:39:28,270 --> 00:39:32,920
repository and essentially when changes

00:39:31,060 --> 00:39:34,390
come into that that one job like over

00:39:32,920 --> 00:39:36,280
here on the side it's just it just

00:39:34,390 --> 00:39:37,900
builds when there's new changes all the

00:39:36,280 --> 00:39:40,990
other Jenkins jobs that need to use

00:39:37,900 --> 00:39:44,110
those scripts essentially copy artifacts

00:39:40,990 --> 00:39:44,980
copy the specific file it needs not all

00:39:44,110 --> 00:39:47,620
of them because it doesn't need the

00:39:44,980 --> 00:39:50,170
whole whole pack so copies that one file

00:39:47,620 --> 00:39:52,690
down to its build at runtime so the very

00:39:50,170 --> 00:39:55,780
first build step and almost all my

00:39:52,690 --> 00:39:58,810
builds is to copy artifacts from an

00:39:55,780 --> 00:39:59,980
existing that that project over here so

00:39:58,810 --> 00:40:03,400
it's a little different than actually

00:39:59,980 --> 00:40:06,790
having that Jenkins job build that

00:40:03,400 --> 00:40:08,440
source because what I find is our source

00:40:06,790 --> 00:40:11,650
control goes down and then our whole

00:40:08,440 --> 00:40:14,080
pipelines blocked because we can't build

00:40:11,650 --> 00:40:15,880
so we have this job that runs over here

00:40:14,080 --> 00:40:18,100
and builds while our source control

00:40:15,880 --> 00:40:20,820
system is available in case we have

00:40:18,100 --> 00:40:23,650
power outages which we do and so

00:40:20,820 --> 00:40:26,470
essentially these jobs are all copying

00:40:23,650 --> 00:40:29,140
the last successful build of this one so

00:40:26,470 --> 00:40:31,840
if it goes down and we can't build our

00:40:29,140 --> 00:40:34,360
whole pipeline can still keep going with

00:40:31,840 --> 00:40:36,700
the last checked in successful release

00:40:34,360 --> 00:40:40,770
of those artifacts excellent

00:40:36,700 --> 00:40:40,770
presentation Thanks yep

00:40:44,349 --> 00:40:49,990
the question about these copying that

00:40:47,380 --> 00:40:51,910
the job which copies their so how that

00:40:49,990 --> 00:40:53,170
works on the slaves because we do a lot

00:40:51,910 --> 00:40:55,480
of the stuff on the slaves are not on

00:40:53,170 --> 00:40:58,089
the master so do we need one for each

00:40:55,480 --> 00:40:59,410
slave bar so that job runs on the master

00:40:58,089 --> 00:41:01,059
we don't run anything on our master

00:40:59,410 --> 00:41:04,510
that's the only job I think that runs on

00:41:01,059 --> 00:41:06,280
our master and the slaves can so that's

00:41:04,510 --> 00:41:08,470
the nice thing about the copy artifacts

00:41:06,280 --> 00:41:10,839
from another project running a job

00:41:08,470 --> 00:41:12,490
running on a slave can copy artifacts

00:41:10,839 --> 00:41:14,680
from another job running on another

00:41:12,490 --> 00:41:16,420
slave there's not there's no problems

00:41:14,680 --> 00:41:18,730
they are with with Cup because it's an

00:41:16,420 --> 00:41:21,039
archived artifact in Jenkins on any

00:41:18,730 --> 00:41:23,680
other job on any other slave can access

00:41:21,039 --> 00:41:26,440
it even the swamps leaves even the white

00:41:23,680 --> 00:41:27,880
with these swarm slaves their swarms I'm

00:41:26,440 --> 00:41:31,380
not sure what you guys swarm slaves

00:41:27,880 --> 00:41:33,819
there's a sort of a Java sort of a slave

00:41:31,380 --> 00:41:35,859
which we used to dynamically connect the

00:41:33,819 --> 00:41:37,780
slaves to the master I'm not sure we're

00:41:35,859 --> 00:41:39,460
using I I'm not I'm not entirely sure

00:41:37,780 --> 00:41:41,829
what you're okay peer referencing but

00:41:39,460 --> 00:41:44,410
all our slaves our Linux images that are

00:41:41,829 --> 00:41:46,839
connected via SSH keys to our Jenkins

00:41:44,410 --> 00:41:49,059
server and we haven't had any problems

00:41:46,839 --> 00:41:51,670
copying artifacts from other jobs that

00:41:49,059 --> 00:41:55,510
run on other Jenkins Jenkins slaves okay

00:41:51,670 --> 00:41:57,700
other questions yep so what would you

00:41:55,510 --> 00:42:00,099
say was the best resource that you had

00:41:57,700 --> 00:42:02,380
to learn how to do all of this stack

00:42:00,099 --> 00:42:03,970
overflow probably and then I was really

00:42:02,380 --> 00:42:05,920
stuck on the environment variables and

00:42:03,970 --> 00:42:08,109
how to do them because you saw there's

00:42:05,920 --> 00:42:09,849
like 12 ways to get environment

00:42:08,109 --> 00:42:11,619
variables and for that question we went

00:42:09,849 --> 00:42:13,599
to the IRC channel and it was like

00:42:11,619 --> 00:42:14,980
literally like a few minutes later I had

00:42:13,599 --> 00:42:16,750
it I was just like how I spent so many

00:42:14,980 --> 00:42:18,430
hours on this but it was great it was

00:42:16,750 --> 00:42:24,599
great that I got and got my question

00:42:18,430 --> 00:42:24,599
answered okay thank you other questions

00:42:25,550 --> 00:42:30,640
all right we're done thank you everyone

00:42:42,350 --> 00:42:44,410

YouTube URL: https://www.youtube.com/watch?v=wilYaIQd3kw


