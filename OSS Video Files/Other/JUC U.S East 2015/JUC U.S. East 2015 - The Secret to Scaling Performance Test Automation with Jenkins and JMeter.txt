Title: JUC U.S. East 2015 - The Secret to Scaling Performance Test Automation with Jenkins and JMeter
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Alon Girmonsky, BlazeMeter

Automated testing throughout the continuous integration (CI) process allows you to detect errors instantly, work more efficiently and, ultimately, deliver software faster. But implementing and scaling automated testing is often complicated, time-consuming, and downright frustrating!

In this talk, BlazeMeter CEO & Founder Alon Girmonsky will explore ways to take the pain away - with the help of a new open source test automation framework. This framework makes it easy to scale automated testing while using Jenkins and JMeter. Join this session and learn how to: 
-Take away the pain of integrating JMeter and Jenkins
-Dynamically create JMeter tests from a configuration file and run from Jenkins on every commit
-Run hundreds of tests in parallel and automatically feed results back into Jenkins
-Simultaneously run any number of JMeter tests from a single command line
- Make JMeter scripts version control friendly and human readable
Captions: 
	00:00:15,300 --> 00:00:22,650
so today when you integrate testing and

00:00:18,580 --> 00:00:27,279
you use open source tools such as jmeter

00:00:22,650 --> 00:00:29,200
you have several problems okay just x

00:00:27,279 --> 00:00:32,920
rays of hand how many people have used

00:00:29,200 --> 00:00:38,559
jmeter in their past good good good how

00:00:32,920 --> 00:00:42,250
many people know about jmeter how many

00:00:38,559 --> 00:00:45,489
people do not know about jaimito okay so

00:00:42,250 --> 00:00:48,309
i'll also kind of for the sake of the

00:00:45,489 --> 00:00:51,580
people that do not know Jamie to don't

00:00:48,309 --> 00:00:54,790
have experience i'll spend some time few

00:00:51,580 --> 00:00:57,550
minutes around Jamie too but in general

00:00:54,790 --> 00:01:00,220
the first problem is version control

00:00:57,550 --> 00:01:03,970
friendliness or incremental testing the

00:01:00,220 --> 00:01:07,900
ability to adjust these scripts or the

00:01:03,970 --> 00:01:10,390
tests from commit to commit this is

00:01:07,900 --> 00:01:14,710
currently tough to accomplish with

00:01:10,390 --> 00:01:17,470
jmeter especially if you want to

00:01:14,710 --> 00:01:21,039
distribute testing meaning in the past

00:01:17,470 --> 00:01:23,049
there was a QA team right it was

00:01:21,039 --> 00:01:25,630
responsible for testing but today more

00:01:23,049 --> 00:01:27,700
and more developers gaining the

00:01:25,630 --> 00:01:29,680
responsibility of testing and there can

00:01:27,700 --> 00:01:33,039
be hundreds of different developers in a

00:01:29,680 --> 00:01:35,649
single organization each building

00:01:33,039 --> 00:01:38,109
scripts changing them from commit to

00:01:35,649 --> 00:01:41,850
commit the ability to trace these

00:01:38,109 --> 00:01:44,530
changes is science fiction at this point

00:01:41,850 --> 00:01:49,899
and this is one of the challenges that

00:01:44,530 --> 00:01:52,420
we are trying to solve and not only to

00:01:49,899 --> 00:01:55,359
trace all of the changes but also to be

00:01:52,420 --> 00:01:58,539
able to combine all of the tests coming

00:01:55,359 --> 00:02:01,299
from many different developers into a

00:01:58,539 --> 00:02:04,659
single test right today when a devil

00:02:01,299 --> 00:02:07,329
runs jenkins and want to run some tests

00:02:04,659 --> 00:02:10,570
usually the test will be performed one

00:02:07,329 --> 00:02:12,819
after the other and every test require a

00:02:10,570 --> 00:02:14,980
certain investment to understand the

00:02:12,819 --> 00:02:17,380
test maybe build a test and then if

00:02:14,980 --> 00:02:20,230
something breaks to analyze the results

00:02:17,380 --> 00:02:24,880
and know where it broke so this is a

00:02:20,230 --> 00:02:27,340
thing of the past okay we told you

00:02:24,880 --> 00:02:28,730
distribute the responsibility of testing

00:02:27,340 --> 00:02:31,040
so many developers

00:02:28,730 --> 00:02:34,400
build test and they can build it in any

00:02:31,040 --> 00:02:37,280
open source tools they like they can

00:02:34,400 --> 00:02:39,379
build a test without even open opening

00:02:37,280 --> 00:02:42,470
any open source tool by using yamel or

00:02:39,379 --> 00:02:46,129
json or a few other languages that we

00:02:42,470 --> 00:02:49,610
support and whatever the various

00:02:46,129 --> 00:02:52,180
developers choose to use everything when

00:02:49,610 --> 00:02:56,840
just before the build get extracted

00:02:52,180 --> 00:02:58,400
compiled into a single test that can

00:02:56,840 --> 00:03:01,489
include hundreds of different tests

00:02:58,400 --> 00:03:03,920
running in parallel while this single

00:03:01,489 --> 00:03:07,129
test runs and ends in let's say in five

00:03:03,920 --> 00:03:11,269
minutes from now you get either pass or

00:03:07,129 --> 00:03:14,840
fail criteria so the ability to version

00:03:11,269 --> 00:03:18,109
control to track the changes and to

00:03:14,840 --> 00:03:21,890
combine many tests into one and run

00:03:18,109 --> 00:03:23,750
everything in few minutes that what the

00:03:21,890 --> 00:03:29,030
benefit you know the few benefit that

00:03:23,750 --> 00:03:30,879
always provide good as mentioned toss is

00:03:29,030 --> 00:03:34,700
an open source it's a python-based

00:03:30,879 --> 00:03:37,630
software anyone can use either go to

00:03:34,700 --> 00:03:40,730
plays metal tools or to a pip install

00:03:37,630 --> 00:03:42,560
BCT it's a one line that install

00:03:40,730 --> 00:03:45,040
everything now the minute you've

00:03:42,560 --> 00:03:47,239
installed this in your janking server

00:03:45,040 --> 00:03:50,359
okay you don't need to actually install

00:03:47,239 --> 00:03:53,000
jmeter or gadling order grinder and soon

00:03:50,359 --> 00:03:55,099
to be added selenium as well because

00:03:53,000 --> 00:03:57,829
once we realized that one of your

00:03:55,099 --> 00:04:00,380
developers created the script with

00:03:57,829 --> 00:04:03,380
gattling for example gatlin will get

00:04:00,380 --> 00:04:06,260
downloaded and installed if it's jmeter

00:04:03,380 --> 00:04:10,099
jmeter will get downloaded and installed

00:04:06,260 --> 00:04:13,910
you ask why this is a one-line install

00:04:10,099 --> 00:04:16,760
that basically in stores all of the

00:04:13,910 --> 00:04:18,229
tools that are required to actually run

00:04:16,760 --> 00:04:23,960
the various desk so if you're talking

00:04:18,229 --> 00:04:26,750
you you know for example on a commit you

00:04:23,960 --> 00:04:28,910
build a docker we're in the docker you

00:04:26,750 --> 00:04:32,930
build the application and the

00:04:28,910 --> 00:04:36,289
performance lab as well this can be very

00:04:32,930 --> 00:04:38,750
useful because in the one line you build

00:04:36,289 --> 00:04:40,200
a performance lab you get the scripts

00:04:38,750 --> 00:04:43,440
you run the script you

00:04:40,200 --> 00:04:50,100
get the results and the docker goes away

00:04:43,440 --> 00:04:53,130
and you can do it on every commit ok ok

00:04:50,100 --> 00:04:55,590
so I said I'm going to attach two

00:04:53,130 --> 00:04:58,680
minutes on Jamie to jmeter is an Apache

00:04:55,590 --> 00:05:02,250
project it's the most popular tool today

00:04:58,680 --> 00:05:04,620
to test back ends it's not necessarily

00:05:02,250 --> 00:05:06,740
low testing it can be also api testing

00:05:04,620 --> 00:05:09,750
and functional testing of the backend

00:05:06,740 --> 00:05:12,960
regression soak you know anything you

00:05:09,750 --> 00:05:15,900
want to test back end because you can

00:05:12,960 --> 00:05:18,480
build it first it's about any protocol

00:05:15,900 --> 00:05:20,280
you can build any sort of scenario and

00:05:18,480 --> 00:05:24,180
it doesn't need to be a static scenario

00:05:20,280 --> 00:05:29,070
it can be an if-then-else scenario with

00:05:24,180 --> 00:05:32,610
third party kind of let's say I want to

00:05:29,070 --> 00:05:34,110
extract a properties from a database or

00:05:32,610 --> 00:05:36,480
whatever I want to achieve I can

00:05:34,110 --> 00:05:41,580
actually do with jmeter however jmeter

00:05:36,480 --> 00:05:44,940
is a UI meaning if you're a Java genius

00:05:41,580 --> 00:05:47,450
you can also write using code but

00:05:44,940 --> 00:05:52,230
ninety-five percent of the use cases

00:05:47,450 --> 00:05:54,210
people using jmeter to use this UI okay

00:05:52,230 --> 00:05:57,810
which i'm certain many of you are

00:05:54,210 --> 00:06:00,090
familiar with and you can like if you

00:05:57,810 --> 00:06:02,400
master jmeter it takes you two hours to

00:06:00,090 --> 00:06:05,130
do that you can build almost anything

00:06:02,400 --> 00:06:07,680
you want in it but again this is

00:06:05,130 --> 00:06:10,020
excellent for what we call on demand

00:06:07,680 --> 00:06:13,620
testing when you want to create a script

00:06:10,020 --> 00:06:18,660
and run it okay and kind of this

00:06:13,620 --> 00:06:24,540
compares in some ways to load 10 of HTML

00:06:18,660 --> 00:06:28,220
cool so this is jay meter and behind

00:06:24,540 --> 00:06:32,400
jmeter jmeter whatever you do in this UI

00:06:28,220 --> 00:06:35,820
you get an xml file which is the jmx of

00:06:32,400 --> 00:06:38,630
g meter that the xml file is not

00:06:35,820 --> 00:06:42,770
vertical too friendly to do two

00:06:38,630 --> 00:06:45,990
transactions I'll have 500 lines file

00:06:42,770 --> 00:06:48,960
which from change to change it's very

00:06:45,990 --> 00:06:53,320
difficult to track this is one of the

00:06:48,960 --> 00:06:55,860
challenges we solve on top of jaimito

00:06:53,320 --> 00:07:04,210
okay so this is basically how the XML

00:06:55,860 --> 00:07:06,330
looks like and now we go into toes so in

00:07:04,210 --> 00:07:08,410
tools basically the underlying

00:07:06,330 --> 00:07:10,060
assumption that would in the

00:07:08,410 --> 00:07:12,940
organization you're using several tools

00:07:10,060 --> 00:07:15,160
already and there is kind of a democracy

00:07:12,940 --> 00:07:17,320
of tools one is using jmeter the others

00:07:15,160 --> 00:07:20,950
using selenium and other one is using

00:07:17,320 --> 00:07:23,290
gattling so on and so forth we've added

00:07:20,950 --> 00:07:25,660
an abstraction layer on top of all of

00:07:23,290 --> 00:07:29,080
these tools so basically you can specify

00:07:25,660 --> 00:07:31,450
let's take for example Yunel you know on

00:07:29,080 --> 00:07:35,650
the right here is an example of the ammo

00:07:31,450 --> 00:07:39,310
I can specify what I want to have tested

00:07:35,650 --> 00:07:41,950
without opening one of the tool I can

00:07:39,310 --> 00:07:44,980
also say this is the configuration file

00:07:41,950 --> 00:07:46,360
please use jmeter to actually run it or

00:07:44,980 --> 00:07:48,940
maybe I want to use something else

00:07:46,360 --> 00:07:50,740
because I know because I want to use

00:07:48,940 --> 00:07:54,100
selenium because I want to automate a

00:07:50,740 --> 00:07:56,590
real browser or I want to use jmeter

00:07:54,100 --> 00:07:58,840
because I want to run low the synthetic

00:07:56,590 --> 00:08:02,620
load and jmeter scales as opposed to

00:07:58,840 --> 00:08:05,680
other tools so this is an example of a

00:08:02,620 --> 00:08:08,380
llamo but you have the ability to edit a

00:08:05,680 --> 00:08:12,040
yama because it's human friendly you can

00:08:08,380 --> 00:08:15,610
read and write but you can also do it in

00:08:12,040 --> 00:08:17,950
json because you can use code to

00:08:15,610 --> 00:08:19,960
actually generate json structures and

00:08:17,950 --> 00:08:24,490
they are equivalent you can do JSON or

00:08:19,960 --> 00:08:27,760
yellow or a combination of both or you

00:08:24,490 --> 00:08:30,130
can record okay so you can you record a

00:08:27,760 --> 00:08:35,229
web application or a mobile application

00:08:30,130 --> 00:08:37,000
and get again either a jmx OEM or a json

00:08:35,229 --> 00:08:40,900
whatever you feel more comfortable with

00:08:37,000 --> 00:08:43,360
this is a way to start okay at the end

00:08:40,900 --> 00:08:45,790
of the day now this is especially good

00:08:43,360 --> 00:08:48,550
if you doing microservices like if you

00:08:45,790 --> 00:08:51,220
have many many files each certain

00:08:48,550 --> 00:08:55,090
configuration file takes care of testing

00:08:51,220 --> 00:08:57,730
either a micro service or again it

00:08:55,090 --> 00:09:00,310
belongs to a certain developer that has

00:08:57,730 --> 00:09:01,840
a library of these five

00:09:00,310 --> 00:09:05,170
let's say you have hundreds of these

00:09:01,840 --> 00:09:07,990
files all of them get compiled into a

00:09:05,170 --> 00:09:10,000
single file before it runs and usually

00:09:07,990 --> 00:09:13,810
it will be a jmeter test behind the

00:09:10,000 --> 00:09:17,560
scene to run it so let's say I'm doing

00:09:13,810 --> 00:09:22,630
the simple stuff only one llamo file bzt

00:09:17,560 --> 00:09:24,100
and the actual script runs it and it

00:09:22,630 --> 00:09:26,050
looks something like this this is a very

00:09:24,100 --> 00:09:28,779
short video and hopefully i'll also be

00:09:26,050 --> 00:09:32,890
able to show you a live demo this

00:09:28,779 --> 00:09:35,980
basically runs on my laptop okay so i

00:09:32,890 --> 00:09:39,490
can actually build a script debug it run

00:09:35,980 --> 00:09:42,010
it on my laptop this can also be done on

00:09:39,490 --> 00:09:44,740
a jinking server right so if i'm

00:09:42,010 --> 00:09:47,589
creating a Jenkins build and I'm

00:09:44,740 --> 00:09:50,710
extracting all of the files from github

00:09:47,589 --> 00:09:53,980
all of the llamo fine JSON file jmx file

00:09:50,710 --> 00:09:58,900
whatever okay into a single folder and

00:09:53,980 --> 00:10:01,120
then I tell tourists run them all again

00:09:58,900 --> 00:10:03,940
in 30 seconds all of the files get

00:10:01,120 --> 00:10:07,210
compiled into one and this one file runs

00:10:03,940 --> 00:10:09,250
it doesn't have to have this GUI right

00:10:07,210 --> 00:10:11,710
if it Jenkins it will not have any GUI

00:10:09,250 --> 00:10:16,680
at all but if I'm debugging this is the

00:10:11,710 --> 00:10:20,740
kind of gooey I will see now let's see

00:10:16,680 --> 00:10:23,770
what the language supports again this is

00:10:20,740 --> 00:10:27,040
a complicated yamel it has a cord

00:10:23,770 --> 00:10:30,660
alliance but it represents a jmx of 1000

00:10:27,040 --> 00:10:33,460
lines it can be a one line like test

00:10:30,660 --> 00:10:36,430
here is the URL for the test and that's

00:10:33,460 --> 00:10:39,940
it that's the entire file of it ok but

00:10:36,430 --> 00:10:42,370
this let's see what we have here this is

00:10:39,940 --> 00:10:47,260
a scenario where we have a CSV data

00:10:42,370 --> 00:10:49,440
source a global header everything is

00:10:47,260 --> 00:10:52,110
text

00:10:49,440 --> 00:10:54,870
then I have a simple it's not it can be

00:10:52,110 --> 00:10:57,660
even more simple it can simply say /

00:10:54,870 --> 00:11:01,740
meaning go to the homepage but in this

00:10:57,660 --> 00:11:03,750
case I have the URL and the label right

00:11:01,740 --> 00:11:06,660
on the transaction this is a more

00:11:03,750 --> 00:11:09,660
complicated transaction you can see just

00:11:06,660 --> 00:11:13,200
in the center of it two variables that

00:11:09,660 --> 00:11:15,530
are taking from the csv file okay all of

00:11:13,200 --> 00:11:18,570
these anyone that knows jmeter

00:11:15,530 --> 00:11:20,000
immediately recognize where these coming

00:11:18,570 --> 00:11:24,090
from because all of the functionality

00:11:20,000 --> 00:11:28,050
the jmeter possesses is available using

00:11:24,090 --> 00:11:32,850
yamel and the JSON structure this is of

00:11:28,050 --> 00:11:35,520
course so again variables this is how it

00:11:32,850 --> 00:11:39,390
looks like in github because it's text

00:11:35,520 --> 00:11:41,070
suddenly your scripts become version

00:11:39,390 --> 00:11:44,010
control friendly and you can actually

00:11:41,070 --> 00:11:47,190
track all of these changes go back merge

00:11:44,010 --> 00:11:48,920
all the nice thing we do with version

00:11:47,190 --> 00:11:55,200
control this is the same exact file in

00:11:48,920 --> 00:11:57,000
in github so again comparing a jmeter

00:11:55,200 --> 00:12:00,510
test and these are this and this is

00:11:57,000 --> 00:12:03,630
basically I don't have the example here

00:12:00,510 --> 00:12:06,780
but it's the same because how it looks

00:12:03,630 --> 00:12:10,230
in jmeter and with the GUI this is how

00:12:06,780 --> 00:12:13,740
it looks with the ammo when you compare

00:12:10,230 --> 00:12:18,140
it to the jmeter file DJ and the jmx

00:12:13,740 --> 00:12:24,120
file it's 500 lines versus 40 lines of

00:12:18,140 --> 00:12:26,760
readable llamo okay so we talked about

00:12:24,120 --> 00:12:28,440
you can open a yamel editor it's very

00:12:26,760 --> 00:12:34,190
good for presentations because yamalieu

00:12:28,440 --> 00:12:37,860
is human readable but the same language

00:12:34,190 --> 00:12:39,990
it is also available using json right

00:12:37,860 --> 00:12:42,750
and it's absolutely the same and

00:12:39,990 --> 00:12:46,950
actually tours also helps you by

00:12:42,750 --> 00:12:48,390
converting yamel to json json to yamo so

00:12:46,950 --> 00:12:51,120
for example if you have a test let's say

00:12:48,390 --> 00:12:53,610
you even recorded the test and you get

00:12:51,120 --> 00:12:55,650
an initial llamo file but you want to

00:12:53,610 --> 00:12:58,440
move it into json because you actually

00:12:55,650 --> 00:13:00,730
put it in your code engine and have your

00:12:58,440 --> 00:13:04,029
code generated json

00:13:00,730 --> 00:13:07,930
we provide you with conversions between

00:13:04,029 --> 00:13:10,660
llamo and Jason and JM x okay so

00:13:07,930 --> 00:13:15,310
consider that again and Jason is even

00:13:10,660 --> 00:13:17,560
shorter than yeah old although in this

00:13:15,310 --> 00:13:23,730
PowerPoint looks differently but again

00:13:17,560 --> 00:13:23,730
you see exactly the same file converted

00:13:25,920 --> 00:13:33,519
okay so let's say we have a tool either

00:13:30,550 --> 00:13:36,250
we get script from developers like

00:13:33,519 --> 00:13:39,519
already i am getting a jmeter as is like

00:13:36,250 --> 00:13:42,190
a black box or i'm creating a llamo or

00:13:39,519 --> 00:13:44,920
getting a memo from another developer

00:13:42,190 --> 00:13:47,740
you know who knows who knows if it works

00:13:44,920 --> 00:13:51,490
if it doesn't work if it works as

00:13:47,740 --> 00:13:55,029
expected so you get the ability to debug

00:13:51,490 --> 00:13:56,560
your script very easily as I mentioned

00:13:55,029 --> 00:13:59,800
at the end of the day everything gets

00:13:56,560 --> 00:14:02,709
compiled and in many occasions will be a

00:13:59,800 --> 00:14:08,110
jmeter script behind the scene and you

00:14:02,709 --> 00:14:10,660
add the property minus GUI and you have

00:14:08,110 --> 00:14:12,940
the ability to debug the script jmeter

00:14:10,660 --> 00:14:15,069
opens up you run it in the same way i

00:14:12,940 --> 00:14:18,339
present it earlier where you you saw all

00:14:15,069 --> 00:14:23,579
these terminal graphs but when you do

00:14:18,339 --> 00:14:25,959
them minus GUI jmeter itself opens and

00:14:23,579 --> 00:14:28,899
you know you see the script that was

00:14:25,959 --> 00:14:32,110
just recently compiled and you can

00:14:28,899 --> 00:14:34,990
actually run it and see each and every

00:14:32,110 --> 00:14:39,069
transaction if this is what you expected

00:14:34,990 --> 00:14:41,440
to have or not okay so this is one way

00:14:39,069 --> 00:14:44,230
to debug and even if at the end of the

00:14:41,440 --> 00:14:47,019
day Taurus determines that you need five

00:14:44,230 --> 00:14:49,120
different engines because it can happen

00:14:47,019 --> 00:14:51,699
like you have a hundred of different

00:14:49,120 --> 00:14:54,569
scripts and you know it needs to run

00:14:51,699 --> 00:14:57,279
five different engines it will open five

00:14:54,569 --> 00:15:01,540
different engine you can debug each and

00:14:57,279 --> 00:15:03,670
every one of these by the way another

00:15:01,540 --> 00:15:05,829
way to use those is is to simply compile

00:15:03,670 --> 00:15:08,350
a jmeter test without actually building

00:15:05,829 --> 00:15:11,500
it right you simply specify it or record

00:15:08,350 --> 00:15:12,370
it and have tools built using a lot of

00:15:11,500 --> 00:15:15,190
best practice

00:15:12,370 --> 00:15:19,230
is build the script for you that you can

00:15:15,190 --> 00:15:23,020
then leverage this is one aspect of it

00:15:19,230 --> 00:15:28,200
the other aspect is reporting so you

00:15:23,020 --> 00:15:32,140
know for those of you who like was it

00:15:28,200 --> 00:15:33,670
this kind of report that's nice it gives

00:15:32,140 --> 00:15:37,120
you kind of all of the high level

00:15:33,670 --> 00:15:41,589
statistics immediately at your console

00:15:37,120 --> 00:15:46,990
but sometimes it's not enough so you do

00:15:41,589 --> 00:15:51,160
the minus report okay and you get more

00:15:46,990 --> 00:15:53,230
comprehensive results then everything is

00:15:51,160 --> 00:15:57,310
part of the same project so here for

00:15:53,230 --> 00:16:00,850
example this is a gin Kings job the

00:15:57,310 --> 00:16:03,010
trans all the time and you see you start

00:16:00,850 --> 00:16:06,100
by seeing the trends of each and every

00:16:03,010 --> 00:16:08,920
KPI like what happened this run previous

00:16:06,100 --> 00:16:13,390
run etc all of the points are clickable

00:16:08,920 --> 00:16:16,570
once you press on any point you get the

00:16:13,390 --> 00:16:18,820
results so these are comprehensive

00:16:16,570 --> 00:16:21,640
results that you can actually go in and

00:16:18,820 --> 00:16:23,700
see okay what was the performance of a

00:16:21,640 --> 00:16:27,070
certain transaction and maybe compare

00:16:23,700 --> 00:16:30,970
different transactions and see kind of I

00:16:27,070 --> 00:16:35,800
know what went wrong exit down and you

00:16:30,970 --> 00:16:38,310
get this each and every one alongside to

00:16:35,800 --> 00:16:41,529
having all of the artifacts of the test

00:16:38,310 --> 00:16:44,529
artifacts can be first what was the

00:16:41,529 --> 00:16:49,180
initial configuration file what was the

00:16:44,529 --> 00:16:51,970
gmx that was compiled and then used all

00:16:49,180 --> 00:16:55,000
of the logs associated with a specific

00:16:51,970 --> 00:16:58,180
run so you get all of the artifacts as

00:16:55,000 --> 00:17:02,890
well as the reports available to you at

00:16:58,180 --> 00:17:05,110
all times and you can a repeat a test

00:17:02,890 --> 00:17:08,559
especially when something gets broken

00:17:05,110 --> 00:17:13,209
it's very important and you can compare

00:17:08,559 --> 00:17:15,459
between runs and tests can be runs of

00:17:13,209 --> 00:17:19,679
the same tests or different fronts of

00:17:15,459 --> 00:17:19,679
different tests okay

00:17:20,429 --> 00:17:31,779
good so so far I talked about I'm having

00:17:29,440 --> 00:17:35,620
am building configuration files many

00:17:31,779 --> 00:17:38,230
right to support an organization of many

00:17:35,620 --> 00:17:41,500
developers or an application with many

00:17:38,230 --> 00:17:43,179
micro services and you know I have a

00:17:41,500 --> 00:17:45,179
language I can build a configuration

00:17:43,179 --> 00:17:47,230
files I can compile all these

00:17:45,179 --> 00:17:50,230
configuration files into a single one

00:17:47,230 --> 00:17:53,169
run it but then I can also get an

00:17:50,230 --> 00:17:55,450
existing jmeter cast and when I say

00:17:53,169 --> 00:17:59,039
jmeter we also support cutting and the

00:17:55,450 --> 00:18:03,279
grinder and soon adding selenium as well

00:17:59,039 --> 00:18:05,289
when we get a test it's a black box

00:18:03,279 --> 00:18:07,929
because when you get the script you

00:18:05,289 --> 00:18:09,429
don't want to go in it it's kind of too

00:18:07,929 --> 00:18:12,159
tough to understand what someone else

00:18:09,429 --> 00:18:16,450
wrote but what you can do is first

00:18:12,159 --> 00:18:19,870
reference that test and then you can

00:18:16,450 --> 00:18:21,490
override various elements within the

00:18:19,870 --> 00:18:24,970
test you can basically override

00:18:21,490 --> 00:18:27,610
everything from the outside from the

00:18:24,970 --> 00:18:31,090
configuration file written in yamel or

00:18:27,610 --> 00:18:37,440
JSON I can say as in the in this case

00:18:31,090 --> 00:18:43,269
use test jmx dummy jmx for two variables

00:18:37,440 --> 00:18:46,330
set the value and disable an element or

00:18:43,269 --> 00:18:48,309
maybe and maybe also enable in element

00:18:46,330 --> 00:18:51,940
so as long as you know the name of the

00:18:48,309 --> 00:18:55,690
element you can override it and its

00:18:51,940 --> 00:18:58,419
properties this is the way we use kind

00:18:55,690 --> 00:19:01,539
of black box existing script so if I'm

00:18:58,419 --> 00:19:05,529
the devil I'm getting three for ya Mo's

00:19:01,539 --> 00:19:09,100
to jmeter files and I can obviously add

00:19:05,529 --> 00:19:14,169
a few of my own and I can also alter

00:19:09,100 --> 00:19:17,040
from outside the black box um script i'm

00:19:14,169 --> 00:19:20,550
getting ok

00:19:17,040 --> 00:19:22,710
so this is using existing test by

00:19:20,550 --> 00:19:24,450
overriding them and again the

00:19:22,710 --> 00:19:28,890
configuration file that basically

00:19:24,450 --> 00:19:30,990
addresses the file i got is also in

00:19:28,890 --> 00:19:34,490
version controller and i am able to

00:19:30,990 --> 00:19:34,490
change it into whatever I want with it

00:19:35,990 --> 00:19:42,840
thresholds so at the end of the when we

00:19:40,050 --> 00:19:45,180
run a test a test basically has I would

00:19:42,840 --> 00:19:49,410
say to aspect to it one is let's

00:19:45,180 --> 00:19:52,380
simulate accurately as possible what we

00:19:49,410 --> 00:19:54,990
want to test whether it's kind of 100

00:19:52,380 --> 00:19:57,750
users using a mobile application and in

00:19:54,990 --> 00:20:01,820
parallel two hundred users using the

00:19:57,750 --> 00:20:04,560
website etc etc then I define a list of

00:20:01,820 --> 00:20:06,810
smaller test threshold which i'm sure

00:20:04,560 --> 00:20:10,350
most of you especially if you're dealing

00:20:06,810 --> 00:20:13,650
with the consideration you know about we

00:20:10,350 --> 00:20:16,680
provide the ability to regardless of the

00:20:13,650 --> 00:20:20,820
scenarios in a different configuration

00:20:16,680 --> 00:20:23,430
file specified the list of threshold you

00:20:20,820 --> 00:20:25,680
want each test to take into

00:20:23,430 --> 00:20:28,980
consideration right so again I'm the

00:20:25,680 --> 00:20:31,500
devil I'm getting 50 different script

00:20:28,980 --> 00:20:35,700
but I will I want to define the

00:20:31,500 --> 00:20:37,710
threshold okay so I'm adding a file and

00:20:35,700 --> 00:20:40,470
there is a very easy language for

00:20:37,710 --> 00:20:44,040
example average response time of a

00:20:40,470 --> 00:20:48,110
transaction name purchase greater than

00:20:44,040 --> 00:20:50,780
400 milliseconds for over 30 seconds

00:20:48,110 --> 00:20:55,200
continue the test don't fail the test

00:20:50,780 --> 00:20:58,860
but mark the test has Faile in the same

00:20:55,200 --> 00:21:01,680
way i can say stop as fail so i don't

00:20:58,860 --> 00:21:05,010
want to waste any time if a threshold is

00:21:01,680 --> 00:21:07,530
broken and that means that the build is

00:21:05,010 --> 00:21:11,310
broken let's stop the test no no need to

00:21:07,530 --> 00:21:14,070
wait on it okay and obviously all of the

00:21:11,310 --> 00:21:17,270
performance KPIs are including included

00:21:14,070 --> 00:21:20,810
in these languages in this language as

00:21:17,270 --> 00:21:23,040
well as if i want to build assertions

00:21:20,810 --> 00:21:26,070
okay so this goes back to a more

00:21:23,040 --> 00:21:27,670
functional level I want to do I have an

00:21:26,070 --> 00:21:30,310
API call I've

00:21:27,670 --> 00:21:33,430
response I can actually build an

00:21:30,310 --> 00:21:37,990
assertion it says does this response

00:21:33,430 --> 00:21:41,140
equals or similar to what i expect for

00:21:37,990 --> 00:21:44,380
this response to be and then if yes or

00:21:41,140 --> 00:21:47,830
no again this can be a threshold like if

00:21:44,380 --> 00:21:51,720
fifty percent of the responses are good

00:21:47,830 --> 00:21:54,280
maybe good continue if not then this is

00:21:51,720 --> 00:21:59,470
this is a problem and either stop the

00:21:54,280 --> 00:22:03,940
test over market as fail needless to say

00:21:59,470 --> 00:22:07,390
that those talks back to Jenkins so AJ

00:22:03,940 --> 00:22:11,260
unit XML file is generated each and

00:22:07,390 --> 00:22:13,710
every test so you can use it and you

00:22:11,260 --> 00:22:17,860
know to integrate you with your existing

00:22:13,710 --> 00:22:25,960
drinking's reports and understand fail

00:22:17,860 --> 00:22:28,750
success criteria okay and the one thing

00:22:25,960 --> 00:22:30,040
at least for me you know everyone will

00:22:28,750 --> 00:22:32,200
find something else but at least show me

00:22:30,040 --> 00:22:36,090
the one thing i like about tools the

00:22:32,200 --> 00:22:39,760
most the fact that in a single command

00:22:36,090 --> 00:22:43,240
this is a single command line i can run

00:22:39,760 --> 00:22:45,430
as many tests as I want and they will

00:22:43,240 --> 00:22:49,150
compile together because the time to

00:22:45,430 --> 00:22:51,730
test is important if we run sequentially

00:22:49,150 --> 00:22:54,550
one test after the other after the other

00:22:51,730 --> 00:22:57,810
and we need to analyze each it means

00:22:54,550 --> 00:23:00,820
that the time to release gets longer if

00:22:57,810 --> 00:23:03,550
we are able to run all of these in

00:23:00,820 --> 00:23:07,030
parallel as if it was a single test with

00:23:03,550 --> 00:23:10,810
single set of results then I know that

00:23:07,030 --> 00:23:14,200
in 10 minutes I i will have run all of

00:23:10,810 --> 00:23:17,440
my tests and know if the build is okay

00:23:14,200 --> 00:23:23,400
or or not so I'm getting a more

00:23:17,440 --> 00:23:23,400
predictable predicable time to release

00:23:26,429 --> 00:23:32,519
again this is yet another example could

00:23:29,509 --> 00:23:35,879
when I run and you know simply

00:23:32,519 --> 00:23:37,950
everything within a folder run it I'm

00:23:35,879 --> 00:23:41,159
going to show a short demo in a second

00:23:37,950 --> 00:23:44,399
or two and then as mentioned i gen unit

00:23:41,159 --> 00:23:47,789
xml gets created and i'm sure most of

00:23:44,399 --> 00:23:51,179
you identify at least the left side

00:23:47,789 --> 00:23:54,570
which is gin kings and every time it a

00:23:51,179 --> 00:23:57,629
build runs you also get a set of results

00:23:54,570 --> 00:24:00,149
and plays metal meaning with the web UI

00:23:57,629 --> 00:24:04,710
so let's say I know I build is running

00:24:00,149 --> 00:24:06,059
to am I can always go back to my account

00:24:04,710 --> 00:24:09,240
in place me till you see the test

00:24:06,059 --> 00:24:11,970
running anything I know I get a message

00:24:09,240 --> 00:24:15,419
you broke the build whatever I can go in

00:24:11,970 --> 00:24:17,460
see what was the problem from home try

00:24:15,419 --> 00:24:20,820
to fix it maybe it's an environment

00:24:17,460 --> 00:24:24,139
variable maybe it's a bug but whatever

00:24:20,820 --> 00:24:27,090
it is I'm able to test immediately and

00:24:24,139 --> 00:24:34,350
affect you know whether the next test

00:24:27,090 --> 00:24:36,929
will run successfully or not okay so

00:24:34,350 --> 00:24:42,419
before showing kind of a live demo let's

00:24:36,929 --> 00:24:47,809
and allowing some room for QA let's see

00:24:42,419 --> 00:24:51,419
what we've achieved using tours first

00:24:47,809 --> 00:24:53,700
the version control issue it becomes a

00:24:51,419 --> 00:24:56,940
non-issue the minute it's a language

00:24:53,700 --> 00:25:00,470
that anyone can read and write you know

00:24:56,940 --> 00:25:04,139
you can incremental ebuild test script

00:25:00,470 --> 00:25:07,200
you can leverage existing scripts and

00:25:04,139 --> 00:25:10,590
modify them as a black box you don't

00:25:07,200 --> 00:25:12,360
need to actually go in and you can you

00:25:10,590 --> 00:25:14,490
know keep the configuration file on the

00:25:12,360 --> 00:25:18,990
side so even when you get new versions

00:25:14,490 --> 00:25:20,970
of the script still the configuration

00:25:18,990 --> 00:25:25,619
file you have on the side will affect

00:25:20,970 --> 00:25:28,470
the black box script and the ability to

00:25:25,619 --> 00:25:30,499
simultaneously run numerous tests coming

00:25:28,470 --> 00:25:33,090
from developers or simple many

00:25:30,499 --> 00:25:37,430
microservices tests and communicate

00:25:33,090 --> 00:25:42,120
results back into Jenkins good

00:25:37,430 --> 00:25:45,930
so this is kind of the PowerPoint deck

00:25:42,120 --> 00:25:50,130
and before showing you i would spend

00:25:45,930 --> 00:25:52,230
four minutes to show you live demo allow

00:25:50,130 --> 00:25:57,120
me to ask if you have any question or

00:25:52,230 --> 00:25:59,730
think you want me to double click just

00:25:57,120 --> 00:26:01,230
just kind of curious why was why was

00:25:59,730 --> 00:26:06,300
taurus written in python if you're using

00:26:01,230 --> 00:26:09,420
java to do all this stuff so good

00:26:06,300 --> 00:26:11,970
question java is related to jmeter and

00:26:09,420 --> 00:26:14,250
it's by chats so the idea is to become

00:26:11,970 --> 00:26:18,840
tool agnostic and help you become tool

00:26:14,250 --> 00:26:21,800
agnostic it's kind of why job I not Ruby

00:26:18,840 --> 00:26:24,180
for me this these are the two question

00:26:21,800 --> 00:26:30,270
is your plugin too bad about the new

00:26:24,180 --> 00:26:35,340
workflow plugin and within jenkins so we

00:26:30,270 --> 00:26:38,970
have plugins for Jenkins called pipeline

00:26:35,340 --> 00:26:43,080
teamcity bamboo and many others so yes

00:26:38,970 --> 00:26:45,690
the answer is yes and that's it and many

00:26:43,080 --> 00:26:47,580
of us love the plugin what what I

00:26:45,690 --> 00:26:49,290
usually love is to use the command line

00:26:47,580 --> 00:26:52,290
argument it's a one line you put in a

00:26:49,290 --> 00:26:55,200
bit in a shell script and it works and

00:26:52,290 --> 00:26:57,240
it gives you the freedom to do whatever

00:26:55,200 --> 00:27:00,960
you want with it but yes we have plugins

00:26:57,240 --> 00:27:08,640
for kind of every and what we don't have

00:27:00,960 --> 00:27:11,940
yet will probably create so how tight is

00:27:08,640 --> 00:27:13,920
terrace with jmeter an example jmeter

00:27:11,940 --> 00:27:16,860
come up with a new version with new

00:27:13,920 --> 00:27:21,510
parameters how fast are you updating

00:27:16,860 --> 00:27:23,280
terrorists to those new properties very

00:27:21,510 --> 00:27:26,040
good question that also relates to

00:27:23,280 --> 00:27:30,480
different version of other tools so the

00:27:26,040 --> 00:27:32,880
idea is just to support any version the

00:27:30,480 --> 00:27:35,340
minute it goes out you can also specify

00:27:32,880 --> 00:27:38,810
you don't necessarily need to use the

00:27:35,340 --> 00:27:41,670
latest version so for example one of the

00:27:38,810 --> 00:27:43,760
wind can also be you know one of you

00:27:41,670 --> 00:27:46,050
let's say you're using an outsourced

00:27:43,760 --> 00:27:48,570
service that they're using jmeter to

00:27:46,050 --> 00:27:50,610
point 11 and yourself you're using to

00:27:48,570 --> 00:27:51,290
point 13 or something like that in the

00:27:50,610 --> 00:27:54,110
configuration

00:27:51,290 --> 00:27:56,360
file you can actually say which version

00:27:54,110 --> 00:27:58,760
and also Jamie the plugins it also has

00:27:56,360 --> 00:28:03,500
various versions so this is all kind of

00:27:58,760 --> 00:28:05,750
taken care of okay what I'll do now I'll

00:28:03,500 --> 00:28:07,190
simply hopefully I have internet

00:28:05,750 --> 00:28:09,800
connectivity I'll show you a live demo

00:28:07,190 --> 00:28:12,920
and then allow room for additional last

00:28:09,800 --> 00:28:15,320
questions so again this is you saw the

00:28:12,920 --> 00:28:22,750
pictures it's not necessarily different

00:28:15,320 --> 00:28:25,880
but this is the major llamo file also

00:28:22,750 --> 00:28:38,870
here is where I'm referencing an

00:28:25,880 --> 00:28:41,140
external file the thresholds and this is

00:28:38,870 --> 00:28:45,530
all actually also very interesting i'm

00:28:41,140 --> 00:28:50,030
specifying to execution threads right

00:28:45,530 --> 00:28:52,400
each execution clause it is an engine by

00:28:50,030 --> 00:28:53,990
itself it can be as many as I want and

00:28:52,400 --> 00:28:57,290
let's say if I were to have ten

00:28:53,990 --> 00:28:59,510
different execution clauses I would have

00:28:57,290 --> 00:29:04,130
ten different engines running in

00:28:59,510 --> 00:29:10,780
parallel okay and let's say that's

00:29:04,130 --> 00:29:14,470
enough for now so what we'll do is

00:29:10,780 --> 00:29:14,470
simply run it

00:29:18,310 --> 00:29:22,720
okay this is a live thing and hopefully

00:29:20,650 --> 00:29:24,640
you know if I have internet connectivity

00:29:22,720 --> 00:29:27,220
and everything it will work perfectly

00:29:24,640 --> 00:29:30,700
you see on the top it identified four

00:29:27,220 --> 00:29:36,040
different files they have compiled you

00:29:30,700 --> 00:29:42,330
actually have a link to the cloud report

00:29:36,040 --> 00:29:47,320
in two seconds you'll see the Taurus

00:29:42,330 --> 00:29:51,790
console as mentioned you have of the

00:29:47,320 --> 00:29:54,370
top-level KPIs in front of you and this

00:29:51,790 --> 00:29:57,070
is for debugging and also if you want to

00:29:54,370 --> 00:29:58,840
run it perfectly capable to run many

00:29:57,070 --> 00:30:01,810
tests you see two engines running now

00:29:58,840 --> 00:30:04,420
the two execution clauses currently at

00:30:01,810 --> 00:30:07,630
zero percent progress because i think

00:30:04,420 --> 00:30:10,840
it's set to run indefinitely you already

00:30:07,630 --> 00:30:14,830
see an alert that one of the threshold

00:30:10,840 --> 00:30:16,990
is about to be met there's a window I

00:30:14,830 --> 00:30:20,200
think of 30 seconds that currently it's

00:30:16,990 --> 00:30:24,580
10 seconds if the window will be reached

00:30:20,200 --> 00:30:26,860
then the alert will turn red and if

00:30:24,580 --> 00:30:29,500
depending on on the configuration it can

00:30:26,860 --> 00:30:40,420
also break the fail the build or simply

00:30:29,500 --> 00:30:48,130
mark it as fail in parallel to this when

00:30:40,420 --> 00:30:51,160
I go to my account you can see that one

00:30:48,130 --> 00:30:52,930
test has like a stop button it's also

00:30:51,160 --> 00:30:55,240
green it means that it's actually

00:30:52,930 --> 00:30:59,440
running now eat the test is running on

00:30:55,240 --> 00:31:09,130
my laptop okay the results are in the

00:30:59,440 --> 00:31:11,700
web UI so obviously I have again this is

00:31:09,130 --> 00:31:17,530
the test i'm running now on my laptop

00:31:11,700 --> 00:31:18,960
and if i go to the actual source i can

00:31:17,530 --> 00:31:23,560
see that the test is currently running

00:31:18,960 --> 00:31:29,290
but I also see all of their runs of the

00:31:23,560 --> 00:31:31,160
same test so this is running toes from

00:31:29,290 --> 00:31:33,670
my console if you look

00:31:31,160 --> 00:31:33,670
rankings

00:31:42,250 --> 00:31:48,879
so going to run the same test it will be

00:31:45,110 --> 00:31:48,879
tough to run from the same computer but

00:31:56,529 --> 00:32:08,419
ok I'm not logged in ok here is an

00:32:04,730 --> 00:32:11,659
example that the same test built running

00:32:08,419 --> 00:32:17,360
connecting to all the variety of plugins

00:32:11,659 --> 00:32:18,740
I'm using on my gin kings and when you

00:32:17,360 --> 00:32:25,120
know i'll press something i'll probably

00:32:18,740 --> 00:32:28,340
get all of the thresholds that were met

00:32:25,120 --> 00:32:32,330
so at the end of the day Jenkins will

00:32:28,340 --> 00:32:36,679
run it I generate xml will get generated

00:32:32,330 --> 00:32:39,289
if I'm using with various plugins I will

00:32:36,679 --> 00:32:41,509
continue seeing all the reports that I'm

00:32:39,289 --> 00:32:44,509
used to seeing and in parallel as

00:32:41,509 --> 00:32:57,980
mentioned I'll get everything in my web

00:32:44,509 --> 00:33:00,139
account yeah yeah so I'm going to show

00:32:57,980 --> 00:33:02,440
the configuration I'll simply need to

00:33:00,139 --> 00:33:02,440
log in

00:33:14,789 --> 00:33:21,070
okay we have to config to possibility to

00:33:18,700 --> 00:33:26,399
pho configuration one is using a plug-in

00:33:21,070 --> 00:33:26,399
the other is using a shell script

00:33:37,090 --> 00:33:43,580
this is using toes without a plug-in so

00:33:41,180 --> 00:33:47,480
as you can see you know the java version

00:33:43,580 --> 00:33:54,050
is just for debug purposes I'm simply

00:33:47,480 --> 00:33:55,970
running busy t on everything llamo and

00:33:54,050 --> 00:33:57,860
that's it and telling to disable the

00:33:55,970 --> 00:34:02,240
council because in Jenkins I don't want

00:33:57,860 --> 00:34:05,830
to see the colorful GUI and when a J

00:34:02,240 --> 00:34:09,679
unit XML is being generated I'm simply

00:34:05,830 --> 00:34:15,230
changing the name of it and if we look

00:34:09,679 --> 00:34:20,990
at the output of one of the latest run

00:34:15,230 --> 00:34:23,720
and runs let's take that one let's see

00:34:20,990 --> 00:34:28,490
what we see here so this is Jenkins

00:34:23,720 --> 00:34:35,480
Jenkins Jenkins I think up to the level

00:34:28,490 --> 00:34:39,169
of here is well toast outs 21 and again

00:34:35,480 --> 00:34:45,380
you have the link until it ends when it

00:34:39,169 --> 00:34:51,560
ends other plugins Jenkins plugging kick

00:34:45,380 --> 00:34:54,919
in so this is one level of configuration

00:34:51,560 --> 00:35:04,420
the easiest possible another level of

00:34:54,919 --> 00:35:04,420
configuration and hopefully this is it

00:35:09,650 --> 00:35:31,740
one second trying to find a plug in T

00:35:18,060 --> 00:35:35,550
plugin demo okay this is a plug-in where

00:35:31,740 --> 00:35:38,070
you basically are able to select one of

00:35:35,550 --> 00:35:40,380
the many tests you've created in the GUI

00:35:38,070 --> 00:35:42,839
I don't think I presented the blaze me

00:35:40,380 --> 00:35:46,020
to go here the commercial one but let's

00:35:42,839 --> 00:35:49,890
say you're using the commercial one you

00:35:46,020 --> 00:35:55,260
you've defined one of the many tests and

00:35:49,890 --> 00:36:00,150
you simply choose it here and actually

00:35:55,260 --> 00:36:01,950
that's it nothing more to it okay here

00:36:00,150 --> 00:36:04,589
you get another link to the report

00:36:01,950 --> 00:36:06,869
meaning you can from the build you can

00:36:04,589 --> 00:36:08,880
actually go to to the report but it's

00:36:06,869 --> 00:36:10,770
basically the same you mentioned that I

00:36:08,880 --> 00:36:12,480
had the ability to integrate with kind

00:36:10,770 --> 00:36:14,910
of a variety different tools does it

00:36:12,480 --> 00:36:18,930
integrate well with testing g or any of

00:36:14,910 --> 00:36:21,770
those others good question in terms of

00:36:18,930 --> 00:36:24,119
integration so it's always a challenge

00:36:21,770 --> 00:36:26,720
because you want to run tests but you

00:36:24,119 --> 00:36:29,910
also want to be able to identify

00:36:26,720 --> 00:36:35,190
problems fixed fast so the first level

00:36:29,910 --> 00:36:40,770
of integration integrations include New

00:36:35,190 --> 00:36:44,400
Relic Dinah trace AB dynamics and cloud

00:36:40,770 --> 00:36:48,810
watch ok so you can easily configure

00:36:44,400 --> 00:36:53,329
your account in each and every you know

00:36:48,810 --> 00:36:57,599
vendor and you'll get an overlay of data

00:36:53,329 --> 00:37:00,569
test and you know a PM second level of

00:36:57,599 --> 00:37:05,160
integration is janking steam City bamboo

00:37:00,569 --> 00:37:07,200
Travis and all these stuff um so this is

00:37:05,160 --> 00:37:11,190
this currently the integrations we

00:37:07,200 --> 00:37:13,589
support good yeah so we worked for a

00:37:11,190 --> 00:37:15,680
financial company and most of the

00:37:13,589 --> 00:37:18,450
clients that we have are like banks and

00:37:15,680 --> 00:37:20,730
unfortunately most of them are using IE

00:37:18,450 --> 00:37:21,750
browsers which makes our life harder

00:37:20,730 --> 00:37:24,660
because most of the test

00:37:21,750 --> 00:37:27,660
cases like the Jenkins even all jmeter

00:37:24,660 --> 00:37:29,970
test case are heavily for Firefox

00:37:27,660 --> 00:37:32,640
another browser centric and even though

00:37:29,970 --> 00:37:34,380
Jenkins boxes on a linux box and would

00:37:32,640 --> 00:37:38,310
not want to go with you an option of

00:37:34,380 --> 00:37:42,090
windows slave and how can we address

00:37:38,310 --> 00:37:43,770
this issue like I've looked at saw / but

00:37:42,090 --> 00:37:47,070
that was kind of we had to go to the

00:37:43,770 --> 00:37:50,970
proxy which we are not sure about it so

00:37:47,070 --> 00:37:55,260
can you help us and if so the question

00:37:50,970 --> 00:37:57,870
about Microsoft the quick answer is the

00:37:55,260 --> 00:38:01,590
tow sons on Microsoft this was a result

00:37:57,870 --> 00:38:07,260
of many companies that still have a lot

00:38:01,590 --> 00:38:10,010
of Windows servers so again Taurus and

00:38:07,260 --> 00:38:13,530
you can you know read a lot of the

00:38:10,010 --> 00:38:19,220
discussions in your news groups fully

00:38:13,530 --> 00:38:19,220
support running off windows window box

00:38:19,790 --> 00:38:29,550
any additional questions in order to

00:38:28,020 --> 00:38:31,590
build up enough load on our server

00:38:29,550 --> 00:38:34,410
back-end we're running Jenkin jmeter

00:38:31,590 --> 00:38:39,540
multiple times does tours facilitate

00:38:34,410 --> 00:38:43,070
coordination of that yes of course first

00:38:39,540 --> 00:38:47,910
if you want to run a distributed load um

00:38:43,070 --> 00:38:49,500
dos facilitates that but but again it's

00:38:47,910 --> 00:38:52,940
not like I'm trying to push anything but

00:38:49,500 --> 00:38:56,070
we have a commercial offering that

00:38:52,940 --> 00:38:58,440
resides on Prem and is able to

00:38:56,070 --> 00:39:00,660
synchronize many resources up to several

00:38:58,440 --> 00:39:03,470
hundred to create load and get all the

00:39:00,660 --> 00:39:06,750
nice graphs and everything and thirst us

00:39:03,470 --> 00:39:08,990
does a portion of that as well the open

00:39:06,750 --> 00:39:08,990
source version

00:39:11,759 --> 00:39:23,219
a couple of questions if any good good

00:39:19,709 --> 00:39:26,369
so kind of to conclude and everything

00:39:23,219 --> 00:39:29,039
and bless me too has a booth outside so

00:39:26,369 --> 00:39:31,079
feel free to come by and ask question

00:39:29,039 --> 00:39:34,189
and kind of have dialogue and share your

00:39:31,079 --> 00:39:37,380
experience but the idea is that

00:39:34,189 --> 00:39:39,119
continuous integration is new testing as

00:39:37,380 --> 00:39:42,539
part of continuous integration is a bit

00:39:39,119 --> 00:39:46,139
challenging and we try to make it easier

00:39:42,539 --> 00:39:48,959
we'd love your feedback if you think

00:39:46,139 --> 00:39:51,689
there are other use cases that can be

00:39:48,959 --> 00:39:53,849
relevant and as said we'll be very happy

00:39:51,689 --> 00:39:56,119
to continue the dialogue thank you very

00:39:53,849 --> 00:39:56,119
much

00:40:05,860 --> 00:40:07,920

YouTube URL: https://www.youtube.com/watch?v=i3mnTPqUwjQ


