Title: JUC U.S. East 2015 - How to Optimize Automated Testing with Everyone's Favorite Butler
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Andrew Phillips, XebiaLabs

If you are taking the quality of your software seriously, you have numerous automated tests across many different Jenkins jobs. But getting a grip on all of your automated tests -- and then figuring out whether your software is good enough to go live -- becomes harder and harder as you speed up the delivery of your software. In this session, Andrew will share tips on how naming conventions, partitioning of testware and mirroring the application's structure in the test code help you best handle automated testing with Jenkins. He will also provide insight into how to keep the setup manageable and will share practical experiences from managing a large portfolio of automated tests. Finally, Andrew will showcase several practices that help manage all of your results, plus add aggregation, trend analysis and qualification capabilities to your Jenkins setup. These practices will help you draw the right conclusions from your tests and deliver code faster, with the confidence that your systems won't fail in production.
Captions: 
	00:00:15,580 --> 00:00:20,330
well good morning everyone Thanks well

00:00:19,070 --> 00:00:21,830
thanks very much of course for attending

00:00:20,330 --> 00:00:25,700
juice and thanks for coming to my

00:00:21,830 --> 00:00:27,320
session my name is Andrew Phillips I'm

00:00:25,700 --> 00:00:29,750
well I'm going to be talking today about

00:00:27,320 --> 00:00:32,509
optimizing automated testing with

00:00:29,750 --> 00:00:33,530
everyone's favorite Butler in fact if

00:00:32,509 --> 00:00:36,200
you want to know the story of how

00:00:33,530 --> 00:00:37,880
Jenkins came to be Jenkins it's a funny

00:00:36,200 --> 00:00:40,100
question to ask for Sue Cain is a very

00:00:37,880 --> 00:00:43,100
nice story about where the name came

00:00:40,100 --> 00:00:45,530
from in order to set expectations here a

00:00:43,100 --> 00:00:47,929
little bit you could also rephrase the

00:00:45,530 --> 00:00:50,289
talk as how to structure and manage your

00:00:47,929 --> 00:00:52,550
tests if you're looking to move towards

00:00:50,289 --> 00:00:54,500
accelerated or continuous delivery or

00:00:52,550 --> 00:00:57,039
something along those lines and what

00:00:54,500 --> 00:00:59,300
that implies a little bit is that

00:00:57,039 --> 00:01:00,920
Jenkins will do some of the work but it

00:00:59,300 --> 00:01:02,269
will not do all the magic so we're going

00:01:00,920 --> 00:01:04,790
to spend quite a bit of time talking

00:01:02,269 --> 00:01:06,860
about if you like foundations about how

00:01:04,790 --> 00:01:08,810
you structure your tests and some of the

00:01:06,860 --> 00:01:11,060
challenges that come with that and then

00:01:08,810 --> 00:01:13,430
how you leverage that foundation from

00:01:11,060 --> 00:01:14,510
Jenkins so just to give you a kind of

00:01:13,430 --> 00:01:17,960
idea of what we're getting ourselves

00:01:14,510 --> 00:01:20,240
into but first let's just to get a kind

00:01:17,960 --> 00:01:22,670
of a feel for the room here I who's

00:01:20,240 --> 00:01:25,850
who's running tests from Jenkins right

00:01:22,670 --> 00:01:28,869
now ok oh ok ok come to the right

00:01:25,850 --> 00:01:32,869
session i hope i'll teach you something

00:01:28,869 --> 00:01:35,000
who's running tests are moving from more

00:01:32,869 --> 00:01:36,920
than say five or else it's a three

00:01:35,000 --> 00:01:40,430
different types of test tools in their

00:01:36,920 --> 00:01:42,320
pipeline that's a smaller number ok so I

00:01:40,430 --> 00:01:43,939
think you'll you'll start to see some of

00:01:42,320 --> 00:01:46,009
the maybe some of the challenges that

00:01:43,939 --> 00:01:49,130
we're going to be talking about and

00:01:46,009 --> 00:01:50,899
trying to address who's running into

00:01:49,130 --> 00:01:53,210
problems that there's actually too many

00:01:50,899 --> 00:01:55,189
tests to run that they are either take

00:01:53,210 --> 00:01:57,350
too long or they break or whatever to do

00:01:55,189 --> 00:02:00,380
it all the time oh oh there we go ok so

00:01:57,350 --> 00:02:01,789
yeah again so the I well I for those

00:02:00,380 --> 00:02:03,140
people at least you just raise their

00:02:01,789 --> 00:02:05,450
hand we should have some interesting

00:02:03,140 --> 00:02:07,549
kind of food for thought I'll also give

00:02:05,450 --> 00:02:09,649
you an advance warning that there aren't

00:02:07,549 --> 00:02:11,570
perfect answers to everything so some of

00:02:09,649 --> 00:02:13,070
some of the stuff i'm going to showcase

00:02:11,570 --> 00:02:16,490
at the end when we look at a couple of

00:02:13,070 --> 00:02:19,130
case studies are homebrew ish solutions

00:02:16,490 --> 00:02:21,460
to particular problems for which as far

00:02:19,130 --> 00:02:23,780
as i know at any rate there are no great

00:02:21,460 --> 00:02:26,720
opportunities or challenge or rather

00:02:23,780 --> 00:02:28,730
solutions right now so having said that

00:02:26,720 --> 00:02:30,470
it's not because i'm a bit of a walk on

00:02:28,730 --> 00:02:32,959
I'll be running up and down now because

00:02:30,470 --> 00:02:34,400
I've got this Mike here I'm stuck so if

00:02:32,959 --> 00:02:36,799
I'll see how I cope with that well the

00:02:34,400 --> 00:02:39,230
things I'd like to discuss a little bit

00:02:36,799 --> 00:02:41,629
in the changes to what we're seeing in

00:02:39,230 --> 00:02:43,879
terms of how testing is done and

00:02:41,629 --> 00:02:45,890
especially in relationship you know the

00:02:43,879 --> 00:02:47,750
the overarching principle is we need to

00:02:45,890 --> 00:02:50,840
move faster we need to be more efficient

00:02:47,750 --> 00:02:53,209
I guess to a lot of you just raise their

00:02:50,840 --> 00:02:55,700
hands that won't be radically new but I

00:02:53,209 --> 00:02:57,890
just want to set the stage we're going

00:02:55,700 --> 00:02:59,329
to talk a little bit about the fact that

00:02:57,890 --> 00:03:01,519
what we're seeing more and more as the

00:02:59,329 --> 00:03:03,260
testing is isn't a discipline and

00:03:01,519 --> 00:03:06,200
automation discipline and what kind of

00:03:03,260 --> 00:03:08,319
implications they have or that has I'm

00:03:06,200 --> 00:03:11,780
going to talk about two facets of

00:03:08,319 --> 00:03:13,519
continuous delivery and then we're going

00:03:11,780 --> 00:03:15,410
to talk a little bit about some of the

00:03:13,519 --> 00:03:17,989
sort of the basics if you're going to

00:03:15,410 --> 00:03:20,120
set up tests and jenkins and then some

00:03:17,989 --> 00:03:21,500
things you can or set up test generally

00:03:20,120 --> 00:03:24,760
and then send things you can do beyond

00:03:21,500 --> 00:03:27,200
that before touching on that final

00:03:24,760 --> 00:03:29,209
potentially a bit unsolved problem about

00:03:27,200 --> 00:03:31,790
what to do with all the tests that

00:03:29,209 --> 00:03:34,250
you're getting so first we get the me me

00:03:31,790 --> 00:03:35,359
me slide yeah you can come and ask me if

00:03:34,250 --> 00:03:37,549
you're really interested in what I do

00:03:35,359 --> 00:03:39,530
basically I'm a developer by background

00:03:37,549 --> 00:03:43,489
and now what I'm is called like it's a

00:03:39,530 --> 00:03:45,139
PowerPoint developer a bit of a another

00:03:43,489 --> 00:03:46,819
great that's I guess I could call myself

00:03:45,139 --> 00:03:48,049
I still try to keep my hands dirty so I

00:03:46,819 --> 00:03:50,569
commit to a bunch of open source

00:03:48,049 --> 00:03:52,880
projects I have some commits on some

00:03:50,569 --> 00:03:55,069
Jenkins plugins I'm the VP of Apache Jay

00:03:52,880 --> 00:03:57,560
clouds so I try to remember what it's

00:03:55,069 --> 00:03:59,239
like to actually do real work I do a lot

00:03:57,560 --> 00:04:01,370
in the kind of microservice e-type space

00:03:59,239 --> 00:04:02,660
which is also very much related to

00:04:01,370 --> 00:04:05,090
testing because there it starts to being

00:04:02,660 --> 00:04:06,560
very critical and I do a bunch of this

00:04:05,090 --> 00:04:09,260
kind of stuff standing at conferences

00:04:06,560 --> 00:04:11,930
and hopefully being able to transmit

00:04:09,260 --> 00:04:15,169
some interesting information my day job

00:04:11,930 --> 00:04:16,910
so labs we have a booth outside and

00:04:15,169 --> 00:04:17,959
diagram that's almost impossible to read

00:04:16,910 --> 00:04:20,060
here but that doesn't matter you can

00:04:17,959 --> 00:04:21,769
come and ask me about it basically we

00:04:20,060 --> 00:04:23,780
build a bunch of tools around DevOps and

00:04:21,769 --> 00:04:25,099
continuous delivery at scale some of

00:04:23,780 --> 00:04:27,050
them i mean we use all of them alongside

00:04:25,099 --> 00:04:28,880
jenkins ourselves and our users do that

00:04:27,050 --> 00:04:30,680
this wall i'm not here to go into too

00:04:28,880 --> 00:04:33,020
much detail about that the one that

00:04:30,680 --> 00:04:34,789
comes closest to this topic is probably

00:04:33,020 --> 00:04:36,020
test view but again this isn't a product

00:04:34,789 --> 00:04:38,210
pitch if you want to see the product

00:04:36,020 --> 00:04:40,840
demo come tomorrow here we're going to

00:04:38,210 --> 00:04:42,710
talk about some slightly more general

00:04:40,840 --> 00:04:46,610
things in the underlying

00:04:42,710 --> 00:04:48,410
Sable's okay the timing is going to be

00:04:46,610 --> 00:04:49,970
interesting i'm going to try and leave

00:04:48,410 --> 00:04:51,710
some time for questions at the end i've

00:04:49,970 --> 00:04:53,570
been asked to tell you that if you do

00:04:51,710 --> 00:04:55,700
have questions don't be shy there's this

00:04:53,570 --> 00:04:57,470
mic because i guess we're going to

00:04:55,700 --> 00:04:58,910
record them so you stand in a line

00:04:57,470 --> 00:05:01,340
behind the mic and you ask me a question

00:04:58,910 --> 00:05:04,880
and then i come up with some excuse or

00:05:01,340 --> 00:05:06,470
something we'll see anyway um so yeah

00:05:04,880 --> 00:05:08,480
let's start out with this one nice

00:05:06,470 --> 00:05:09,980
powerpoint animation not designed by me

00:05:08,480 --> 00:05:13,730
i'm not a big fan of those but nevermind

00:05:09,980 --> 00:05:15,590
so most of what we're used to or

00:05:13,730 --> 00:05:17,000
certainly what i'm used to as well from

00:05:15,590 --> 00:05:18,620
the kind of projects that i've worked in

00:05:17,000 --> 00:05:21,170
on the background is that if you look at

00:05:18,620 --> 00:05:24,230
the way test effort is distributed in

00:05:21,170 --> 00:05:25,580
your kind of bill to release cycle it's

00:05:24,230 --> 00:05:27,800
a little bit like this there's this

00:05:25,580 --> 00:05:29,180
initial phase you have an idea you turn

00:05:27,800 --> 00:05:30,890
that into something that developers can

00:05:29,180 --> 00:05:33,080
potentially work on and then you have

00:05:30,890 --> 00:05:36,080
this classic okay we need to structure

00:05:33,080 --> 00:05:37,340
the source code that the object diagram

00:05:36,080 --> 00:05:38,810
or whatever then when you actually write

00:05:37,340 --> 00:05:40,610
code and then we start doing some

00:05:38,810 --> 00:05:42,950
testing and a lot of that testing

00:05:40,610 --> 00:05:44,870
proceeds in the classic we have

00:05:42,950 --> 00:05:47,480
different types of tests and a lot of

00:05:44,870 --> 00:05:49,340
that is manual or at least involves a

00:05:47,480 --> 00:05:51,380
bunch of manual work even if the the

00:05:49,340 --> 00:05:53,000
tooling that runs some of these tests is

00:05:51,380 --> 00:05:57,050
automated and so this is a very back

00:05:53,000 --> 00:05:59,570
loaded type process and of course as

00:05:57,050 --> 00:06:01,430
we've learned over 20 years of horrific

00:05:59,570 --> 00:06:04,280
failure rates in software development

00:06:01,430 --> 00:06:05,810
projects one of the reasons that we have

00:06:04,280 --> 00:06:07,490
problems is that because it's back

00:06:05,810 --> 00:06:09,110
loaded it always ends up getting

00:06:07,490 --> 00:06:10,760
squeezed and then we never do enough of

00:06:09,110 --> 00:06:12,140
it and then we do find out that stuff

00:06:10,760 --> 00:06:14,630
breaks but we don't have time to fix it

00:06:12,140 --> 00:06:16,910
and so on and so forth so I guess the

00:06:14,630 --> 00:06:18,980
big overarching trend for everything

00:06:16,910 --> 00:06:20,990
that we're seeing is move left right

00:06:18,980 --> 00:06:23,570
you've heard that phrase so many times

00:06:20,990 --> 00:06:26,030
move testing left move quality left move

00:06:23,570 --> 00:06:27,650
whatever and and this is basically also

00:06:26,030 --> 00:06:29,960
what we're trying to talk about here so

00:06:27,650 --> 00:06:31,430
the first movement that we're seeing a

00:06:29,960 --> 00:06:33,950
lot of as part of this is to move

00:06:31,430 --> 00:06:35,960
towards a kind of acceptance driven

00:06:33,950 --> 00:06:40,010
testing approach where instead of just

00:06:35,960 --> 00:06:41,570
focusing on technical / for technical

00:06:40,010 --> 00:06:43,640
attributes of the system if I put in

00:06:41,570 --> 00:06:45,620
this does this come out we actually try

00:06:43,640 --> 00:06:47,480
to start thinking about the way we

00:06:45,620 --> 00:06:49,520
specify the system in some kind of

00:06:47,480 --> 00:06:51,110
automated or some kind of testable

00:06:49,520 --> 00:06:54,320
fashion that we can then use to verify

00:06:51,110 --> 00:06:56,449
so this is a BDD style stuff cucumber or

00:06:54,320 --> 00:06:58,370
whatever but the idea is that instead of

00:06:56,449 --> 00:07:00,139
having human written documents and then

00:06:58,370 --> 00:07:03,050
sort of translating them into technical

00:07:00,139 --> 00:07:05,449
language and then losing know the usual

00:07:03,050 --> 00:07:06,860
kind of knock-knock problem that we

00:07:05,449 --> 00:07:11,180
start out with some of that and then of

00:07:06,860 --> 00:07:13,939
course and this design build test

00:07:11,180 --> 00:07:16,909
distinction is is disappearing a little

00:07:13,939 --> 00:07:19,400
bit there's more and more talk of you

00:07:16,909 --> 00:07:21,409
know getting rid of the title of a test

00:07:19,400 --> 00:07:22,879
engineer and basically saying everybody

00:07:21,409 --> 00:07:27,020
who's working on the team is just a

00:07:22,879 --> 00:07:30,469
software engineer developers have just

00:07:27,020 --> 00:07:32,900
as much responsibility for designing

00:07:30,469 --> 00:07:35,120
running maintaining and so on the tests

00:07:32,900 --> 00:07:37,430
as quote unquote the testers do now this

00:07:35,120 --> 00:07:38,960
is basically a subset of the DevOps

00:07:37,430 --> 00:07:41,240
discussion and those of you follow that

00:07:38,960 --> 00:07:42,979
discussion of course ever an hour every

00:07:41,240 --> 00:07:44,509
now and again there's a comment that it

00:07:42,979 --> 00:07:45,770
really should be called dev test ops

00:07:44,509 --> 00:07:47,689
because there's many more people

00:07:45,770 --> 00:07:48,889
involved and then of course the security

00:07:47,689 --> 00:07:51,710
go but I need to be in there as well but

00:07:48,889 --> 00:07:54,159
different discussion anyway so

00:07:51,710 --> 00:07:56,419
development and testing is this

00:07:54,159 --> 00:07:57,860
distinction that we've had and I'll come

00:07:56,419 --> 00:07:59,599
back on this one a little bit because I

00:07:57,860 --> 00:08:01,430
think there's also a cultural element to

00:07:59,599 --> 00:08:03,229
this but that is disappearing a little

00:08:01,430 --> 00:08:04,909
bit and part of that is also the way we

00:08:03,229 --> 00:08:07,189
manage tests the tooling in which we

00:08:04,909 --> 00:08:09,919
specify them the kind of style we used

00:08:07,189 --> 00:08:11,419
to do that yeah integration and

00:08:09,919 --> 00:08:13,009
regression testing of course is still

00:08:11,419 --> 00:08:15,499
there but we're moving towards a more

00:08:13,009 --> 00:08:17,089
and more automated approach to do this

00:08:15,499 --> 00:08:19,159
you know this is really should be stuff

00:08:17,089 --> 00:08:21,289
that just keeps running and there's all

00:08:19,159 --> 00:08:22,819
kinds of paradigms about trying to sort

00:08:21,289 --> 00:08:24,499
of run them continuously and so on

00:08:22,819 --> 00:08:25,909
there's still a little bit heavy we'll

00:08:24,499 --> 00:08:27,919
talk a bit about some of that and then

00:08:25,909 --> 00:08:29,509
yeah really you know this is not you

00:08:27,919 --> 00:08:31,580
can't move user acceptance to the

00:08:29,509 --> 00:08:34,849
beginning but you can move the the

00:08:31,580 --> 00:08:36,889
concept of thinking about how to to

00:08:34,849 --> 00:08:39,560
model user acceptance into part of that

00:08:36,889 --> 00:08:41,839
BDD type thing to say look when we

00:08:39,560 --> 00:08:44,089
specify the system we also want to think

00:08:41,839 --> 00:08:45,560
about and maybe even involve users when

00:08:44,089 --> 00:08:47,690
would they think this is actually good

00:08:45,560 --> 00:08:51,079
enough and can't we capture that right

00:08:47,690 --> 00:08:53,329
at the beginning of the cycle so that we

00:08:51,079 --> 00:08:55,220
can be confident earlier so this is the

00:08:53,329 --> 00:08:57,290
classic fell fast idea that what we're

00:08:55,220 --> 00:08:59,180
building actually works or will not work

00:08:57,290 --> 00:09:02,899
instead of finding that out right at the

00:08:59,180 --> 00:09:04,699
end so long story short the the pattern

00:09:02,899 --> 00:09:08,449
that we're seeing in terms of test

00:09:04,699 --> 00:09:09,950
effort is shifting left that doesn't

00:09:08,449 --> 00:09:11,720
mean that we're doing less work in the

00:09:09,950 --> 00:09:12,950
operation regressing a regression face

00:09:11,720 --> 00:09:15,110
but that there's less manual effort

00:09:12,950 --> 00:09:17,680
involved here most of the the actual

00:09:15,110 --> 00:09:20,000
human input in in the testing cycle is

00:09:17,680 --> 00:09:21,710
co-located and it's also done by the

00:09:20,000 --> 00:09:23,630
same people within the development of

00:09:21,710 --> 00:09:25,100
build phase that's where you code up

00:09:23,630 --> 00:09:26,270
your test that's where you maintain them

00:09:25,100 --> 00:09:28,130
when they break that's where you sit

00:09:26,270 --> 00:09:31,040
together with the test expert on your

00:09:28,130 --> 00:09:32,510
team to do all that kind of stuff a good

00:09:31,040 --> 00:09:34,850
question somebody asked when we showed

00:09:32,510 --> 00:09:36,590
this diagram to a particular prospect is

00:09:34,850 --> 00:09:38,450
they said so what about the area you

00:09:36,590 --> 00:09:39,680
know those who did calculus what about

00:09:38,450 --> 00:09:40,970
the area under this line are you

00:09:39,680 --> 00:09:43,310
actually still doing the same amount of

00:09:40,970 --> 00:09:46,100
work and potentially yes I mean it's not

00:09:43,310 --> 00:09:48,080
so much that we're managing to make

00:09:46,100 --> 00:09:52,520
testing this magical fully automated

00:09:48,080 --> 00:09:54,500
process it's just that we move where

00:09:52,520 --> 00:09:57,500
this work happens and also move a little

00:09:54,500 --> 00:09:59,210
bit who does the work and by doing that

00:09:57,500 --> 00:10:00,710
we can try it because the people who are

00:09:59,210 --> 00:10:03,020
writing the code are also more involved

00:10:00,710 --> 00:10:04,910
in the testing we can hopefully yeah

00:10:03,020 --> 00:10:06,440
either prevent problems from happening

00:10:04,910 --> 00:10:08,330
because there's a better understanding

00:10:06,440 --> 00:10:11,120
and then also we have the safety net in

00:10:08,330 --> 00:10:16,700
place much earlier and to make sure that

00:10:11,120 --> 00:10:19,220
things don't don't break so yes we still

00:10:16,700 --> 00:10:21,050
have people working on tests but the

00:10:19,220 --> 00:10:24,440
actual once they've written is this test

00:10:21,050 --> 00:10:26,240
code the if we're trying to do this more

00:10:24,440 --> 00:10:28,670
and more often it's going to be very

00:10:26,240 --> 00:10:31,010
hard if we rely to a large extent on

00:10:28,670 --> 00:10:32,630
manual testing that doesn't mean of

00:10:31,010 --> 00:10:35,240
course that manual testing will fully

00:10:32,630 --> 00:10:37,790
disappear like exploratory testing or

00:10:35,240 --> 00:10:39,740
some kinds of penetration testing I mean

00:10:37,790 --> 00:10:41,450
I a live as a vendor we get this all the

00:10:39,740 --> 00:10:42,920
time oh look we ran some random test

00:10:41,450 --> 00:10:44,330
tool against they came up with these 800

00:10:42,920 --> 00:10:45,650
results and that's some penetration

00:10:44,330 --> 00:10:47,630
testing that's just running some

00:10:45,650 --> 00:10:49,340
arbitrary set of security scripts are

00:10:47,630 --> 00:10:51,650
sure we can check all those boxes but if

00:10:49,340 --> 00:10:52,790
you really want to make a system secure

00:10:51,650 --> 00:10:55,360
you have to throw some serious

00:10:52,790 --> 00:10:57,650
creativity at it so I'm not saying that

00:10:55,360 --> 00:11:00,590
manual testing will go away but if we

00:10:57,650 --> 00:11:02,090
want to accelerate and move towards some

00:11:00,590 --> 00:11:05,240
kind of continuous delivery thing we're

00:11:02,090 --> 00:11:07,970
going to have to embrace this idea the

00:11:05,240 --> 00:11:09,650
testing is an automation discipline and

00:11:07,970 --> 00:11:11,780
that comes with a bunch of consequences

00:11:09,650 --> 00:11:13,460
I'm have already said developers are

00:11:11,780 --> 00:11:15,260
becoming testers testers are becoming

00:11:13,460 --> 00:11:17,030
developers of course what also means

00:11:15,260 --> 00:11:19,100
that practices that we have in

00:11:17,030 --> 00:11:21,560
development we are also going to apply

00:11:19,100 --> 00:11:23,180
to these tests that works nowadays

00:11:21,560 --> 00:11:26,240
because a lot of the test tool

00:11:23,180 --> 00:11:28,340
we use they have plain text files it's

00:11:26,240 --> 00:11:30,050
stuff that you can check into a source

00:11:28,340 --> 00:11:32,420
code repository it's not something that

00:11:30,050 --> 00:11:34,340
is some opaque binary that requires a

00:11:32,420 --> 00:11:37,430
fat client to open or something like

00:11:34,340 --> 00:11:39,560
that but yeah I know so you think about

00:11:37,430 --> 00:11:43,130
source code maintenance practices or

00:11:39,560 --> 00:11:46,270
maintenance practices and branching and

00:11:43,130 --> 00:11:48,410
versioning and ownership and you know

00:11:46,270 --> 00:11:51,050
structure and we'll come back to

00:11:48,410 --> 00:11:52,490
structure quite a few times but of

00:11:51,050 --> 00:11:54,620
course also if you want to do this in an

00:11:52,490 --> 00:11:56,030
automated perspective you need to it

00:11:54,620 --> 00:11:57,770
starts to get very difficult if you're

00:11:56,030 --> 00:11:58,910
in that classic bottlenecked situation

00:11:57,770 --> 00:12:01,520
well there's only one environment we can

00:11:58,910 --> 00:12:04,040
test in and then yeah well some other

00:12:01,520 --> 00:12:06,140
team they just screwed it up by Rican

00:12:04,040 --> 00:12:08,300
firing the CLR or the JVM or whatever

00:12:06,140 --> 00:12:09,950
and now you waste half your test time

00:12:08,300 --> 00:12:12,020
trying to get the server up and running

00:12:09,950 --> 00:12:13,520
again yeah that's not that's not going

00:12:12,020 --> 00:12:15,560
to help us if we're trying to move more

00:12:13,520 --> 00:12:17,180
quickly so the good thing is I'm aware

00:12:15,560 --> 00:12:19,700
the Jenkins event but the last five

00:12:17,180 --> 00:12:22,760
years have seen an enormous growth in

00:12:19,700 --> 00:12:25,070
cloud containers DevOps all that kind of

00:12:22,760 --> 00:12:27,920
technology and that really provides the

00:12:25,070 --> 00:12:28,970
foundation and a lot of the vendors out

00:12:27,920 --> 00:12:31,370
there you know that's exactly what

00:12:28,970 --> 00:12:33,800
they're selling the idea that you can

00:12:31,370 --> 00:12:35,600
spin up your your process or testing set

00:12:33,800 --> 00:12:38,270
up your environments getting your test

00:12:35,600 --> 00:12:40,130
data in a much more on demand fashion so

00:12:38,270 --> 00:12:42,320
that you're ready to run your tests

00:12:40,130 --> 00:12:44,120
whenever you need to and a lot of that

00:12:42,320 --> 00:12:46,370
uses this infrastructure as code stuff

00:12:44,120 --> 00:12:48,110
so this I'm pretty serious this is

00:12:46,370 --> 00:12:50,510
pretty serious engineering going on in

00:12:48,110 --> 00:12:52,160
here as well I mean is you stuff doesn't

00:12:50,510 --> 00:12:53,810
maintain itself magically you've got to

00:12:52,160 --> 00:12:55,130
run in and just as you have to think

00:12:53,810 --> 00:12:57,290
about okay well how are we going to

00:12:55,130 --> 00:12:59,120
maintain our production environment or

00:12:57,290 --> 00:13:01,100
our QA environment you also have to

00:12:59,120 --> 00:13:04,370
figure out how to maintain and run this

00:13:01,100 --> 00:13:05,780
this new a world of test automation that

00:13:04,370 --> 00:13:07,160
we're running because again I think the

00:13:05,780 --> 00:13:09,320
trend is moving away from saying oh

00:13:07,160 --> 00:13:10,940
there's one big vendor usually HP that

00:13:09,320 --> 00:13:13,550
gives us all this stuff and then you

00:13:10,940 --> 00:13:16,430
know well it's not great but we have one

00:13:13,550 --> 00:13:18,440
throat to choke as they say there's a

00:13:16,430 --> 00:13:20,600
very big variety of different tools

00:13:18,440 --> 00:13:22,960
we're using in the modern testing space

00:13:20,600 --> 00:13:25,220
and so there's quite a lot more glue

00:13:22,960 --> 00:13:27,410
involved typically than we used to have

00:13:25,220 --> 00:13:28,640
and I guess one of the consequences of

00:13:27,410 --> 00:13:29,840
that that we're seeing is that yeah

00:13:28,640 --> 00:13:31,400
there's a bunch of people out there

00:13:29,840 --> 00:13:33,620
people like blaze Mitra so asked her

00:13:31,400 --> 00:13:35,270
whatever who were saying yeah I will

00:13:33,620 --> 00:13:36,560
take that problem off your hands so

00:13:35,270 --> 00:13:36,980
we're going to host all this stuff for

00:13:36,560 --> 00:13:39,139
you and

00:13:36,980 --> 00:13:41,420
all that and but you then have to figure

00:13:39,139 --> 00:13:44,510
out okay so I'm now relying on a third

00:13:41,420 --> 00:13:45,889
party for some of my test capability how

00:13:44,510 --> 00:13:47,779
do i make sure i integrate what comes

00:13:45,889 --> 00:13:49,579
out of that effectively and how do you

00:13:47,779 --> 00:13:51,290
know it's an external service it's also

00:13:49,579 --> 00:13:52,850
an external dependency it's like a

00:13:51,290 --> 00:13:55,430
payment processor or something like that

00:13:52,850 --> 00:13:57,410
I have to deal with that down times and

00:13:55,430 --> 00:13:58,790
all that kind of stuff you know if

00:13:57,410 --> 00:14:00,889
they're running a certain version of

00:13:58,790 --> 00:14:05,870
jmeter do I can I tell them to use a

00:14:00,889 --> 00:14:07,519
specific other one or whatever so what

00:14:05,870 --> 00:14:10,550
are the challenges that come with this

00:14:07,519 --> 00:14:13,519
new is brave new world of test

00:14:10,550 --> 00:14:15,410
automation well I think one of them I

00:14:13,519 --> 00:14:16,940
mean it I'm very much a fan of having

00:14:15,410 --> 00:14:20,480
lots and lots of different test tools

00:14:16,940 --> 00:14:21,980
because yeah what we had previously some

00:14:20,480 --> 00:14:23,990
of it was incredibly clunky very

00:14:21,980 --> 00:14:26,110
expensive very heavy weight opaque and

00:14:23,990 --> 00:14:28,910
so on so i'm very pleased by this

00:14:26,110 --> 00:14:32,120
diversity but the problem is that the

00:14:28,910 --> 00:14:34,459
more test tools you have the harder it

00:14:32,120 --> 00:14:36,170
also gets to make sense of all the data

00:14:34,459 --> 00:14:37,639
that comes out of there we'll talk about

00:14:36,170 --> 00:14:39,709
that in much more detail later because

00:14:37,639 --> 00:14:41,480
if we think about it we why do we run

00:14:39,709 --> 00:14:43,519
tests in the first place or not so that

00:14:41,480 --> 00:14:44,959
we well I guess in some places it so we

00:14:43,519 --> 00:14:46,279
can produce some kind of spreadsheet and

00:14:44,959 --> 00:14:49,010
take a lot of boxes and say we're done

00:14:46,279 --> 00:14:50,510
but in general the real business reason

00:14:49,010 --> 00:14:52,010
to do this is to answer one single

00:14:50,510 --> 00:14:54,740
question it's this stuff that we're

00:14:52,010 --> 00:14:56,360
delivering good enough to go live and

00:14:54,740 --> 00:14:58,490
that generally requires you to look at

00:14:56,360 --> 00:15:00,350
all the data and here's just a sample of

00:14:58,490 --> 00:15:01,790
some tools that we we've used in

00:15:00,350 --> 00:15:04,699
projects and we see people using other

00:15:01,790 --> 00:15:06,709
20 there or whatever and there's way

00:15:04,699 --> 00:15:08,930
more out there and of course all have

00:15:06,709 --> 00:15:10,430
their own visualizations they different

00:15:08,930 --> 00:15:13,660
types of data performance data is not

00:15:10,430 --> 00:15:13,660
the same as functional and so on

00:15:14,079 --> 00:15:18,199
coverage also starts to become a little

00:15:16,670 --> 00:15:19,670
bit of a problem here I mean we of

00:15:18,199 --> 00:15:21,980
course we all have code coverage tools

00:15:19,670 --> 00:15:23,449
and they do the classical have I checked

00:15:21,980 --> 00:15:26,709
this particular line of my source code

00:15:23,449 --> 00:15:28,610
with a unit test and that's fine but

00:15:26,709 --> 00:15:30,949
again if you think about the problem

00:15:28,610 --> 00:15:33,769
from a business perspective we're not

00:15:30,949 --> 00:15:35,510
interested whether 50 lines of source

00:15:33,769 --> 00:15:37,430
code have a unit test run against them

00:15:35,510 --> 00:15:39,860
or not I'm interested in whether the key

00:15:37,430 --> 00:15:42,470
functional use case is like buying

00:15:39,860 --> 00:15:45,199
something or logging into my account or

00:15:42,470 --> 00:15:48,529
making a bank transfer or whatever those

00:15:45,199 --> 00:15:50,029
use cases happened to be actually still

00:15:48,529 --> 00:15:50,510
work and whether the new ones that I've

00:15:50,029 --> 00:15:53,510
implement

00:15:50,510 --> 00:15:55,280
it also work so it's not just technical

00:15:53,510 --> 00:15:56,750
coverage it's really functional coverage

00:15:55,280 --> 00:15:58,370
that we're trying to figure out and

00:15:56,750 --> 00:16:00,620
that's non-trivial again when we have

00:15:58,370 --> 00:16:02,150
lots of different tools because it's not

00:16:00,620 --> 00:16:04,460
easier ways to say well which test

00:16:02,150 --> 00:16:06,080
actually covers what and different tools

00:16:04,460 --> 00:16:08,410
have different mechanisms that they do

00:16:06,080 --> 00:16:11,480
or do not support to make this possible

00:16:08,410 --> 00:16:12,830
tehsils or break I could do another hand

00:16:11,480 --> 00:16:16,130
thing who's fixing a test failure right

00:16:12,830 --> 00:16:17,330
now no I'm yeah and you don't you don't

00:16:16,130 --> 00:16:19,490
want to spend a lot of time the more

00:16:17,330 --> 00:16:22,130
tests you have the more time you can be

00:16:19,490 --> 00:16:24,140
spending trying to figure out whether

00:16:22,130 --> 00:16:26,030
the tests that just broke broke because

00:16:24,140 --> 00:16:27,980
there was an environment screw up or the

00:16:26,030 --> 00:16:30,950
test data was corrupt or because there's

00:16:27,980 --> 00:16:32,630
really a problem in the system and so if

00:16:30,950 --> 00:16:34,880
we're not going to drown ourselves in

00:16:32,630 --> 00:16:36,500
additional work we need to find a way to

00:16:34,880 --> 00:16:38,450
get this down and that's really where

00:16:36,500 --> 00:16:40,760
good support for failure analysis

00:16:38,450 --> 00:16:42,470
becomes pretty important and Jenkins has

00:16:40,760 --> 00:16:43,700
some some nice things for certain types

00:16:42,470 --> 00:16:46,910
of tests in that area but not

00:16:43,700 --> 00:16:48,470
necessarily in all of them so yeah I

00:16:46,910 --> 00:16:49,490
said I've said some of this stuff

00:16:48,470 --> 00:16:52,730
already I've asked some of these

00:16:49,490 --> 00:16:55,910
questions long story short the more

00:16:52,730 --> 00:16:57,860
tests you have the more infeasible it

00:16:55,910 --> 00:17:00,560
becomes in general to run them all all

00:16:57,860 --> 00:17:02,030
the time there's different schools of

00:17:00,560 --> 00:17:03,830
thought about this I mean Dave Farley

00:17:02,030 --> 00:17:05,480
very prominent you know testing and CD

00:17:03,830 --> 00:17:07,670
guy co-wrote the continuous delivery

00:17:05,480 --> 00:17:10,010
book he says well then you're just being

00:17:07,670 --> 00:17:11,449
lazy right if your system were too slow

00:17:10,010 --> 00:17:12,860
you have to serve all your customers all

00:17:11,449 --> 00:17:14,600
the time if your system we're too so you

00:17:12,860 --> 00:17:16,310
just have to optimize it and if you're

00:17:14,600 --> 00:17:19,339
tested too slow you should just optimize

00:17:16,310 --> 00:17:21,410
them but Google takes a slightly

00:17:19,339 --> 00:17:23,720
different opinion and google says no

00:17:21,410 --> 00:17:25,760
there's no aid not only does it take too

00:17:23,720 --> 00:17:28,220
long it's actually too expensive VMs

00:17:25,760 --> 00:17:31,370
cost money to run so who will actually

00:17:28,220 --> 00:17:33,080
has a very powerful and complicated

00:17:31,370 --> 00:17:35,180
machine learning system that when they

00:17:33,080 --> 00:17:37,190
make a commit to their rep OH supposedly

00:17:35,180 --> 00:17:38,720
it can figure out which parts of the

00:17:37,190 --> 00:17:41,540
code are being affected and it will

00:17:38,720 --> 00:17:45,140
tailor the tests the tests that are run

00:17:41,540 --> 00:17:47,450
to match that particular commit which is

00:17:45,140 --> 00:17:48,650
very smart and expensive to build and I

00:17:47,450 --> 00:17:50,000
don't think I'm we're going I'm not

00:17:48,650 --> 00:17:51,650
going to give you a recipe for magically

00:17:50,000 --> 00:17:53,780
doing that and hire a bunch of data

00:17:51,650 --> 00:17:56,180
scientists but we want to think about

00:17:53,780 --> 00:18:00,080
ways in which we can potentially achieve

00:17:56,180 --> 00:18:01,460
similar kind of things with Jenkins but

00:18:00,080 --> 00:18:03,320
yeah then you get into these questions

00:18:01,460 --> 00:18:04,250
so which subset of tests am i running

00:18:03,320 --> 00:18:06,860
what does that look

00:18:04,250 --> 00:18:08,840
which tests matter which tests don't

00:18:06,860 --> 00:18:10,310
matter I mean more test means knew you

00:18:08,840 --> 00:18:12,500
had a signal to noise problem if you

00:18:10,310 --> 00:18:15,710
have fifty thousand tests and four fail

00:18:12,500 --> 00:18:17,660
well percentage-wise looks brilliant but

00:18:15,710 --> 00:18:20,330
if forty-three thousand tests of those

00:18:17,660 --> 00:18:22,280
are just gather set their tests then you

00:18:20,330 --> 00:18:24,440
know those three test failures suddenly

00:18:22,280 --> 00:18:28,670
start to look a lot different alright

00:18:24,440 --> 00:18:31,850
and yeah we're the Jenkins user

00:18:28,670 --> 00:18:33,620
conference so of course I'm sure a lot

00:18:31,850 --> 00:18:35,030
of you have tried to address some of

00:18:33,620 --> 00:18:38,120
these challenges if you have them with

00:18:35,030 --> 00:18:39,500
Jenkins and it works in some cases but

00:18:38,120 --> 00:18:41,660
it doesn't work in other case so you get

00:18:39,500 --> 00:18:43,160
a bit of butler / stretch is what we

00:18:41,660 --> 00:18:46,220
call the term and that can be a bit

00:18:43,160 --> 00:18:47,900
painful so I think one of the things to

00:18:46,220 --> 00:18:50,150
learn with any tool Jenkins or otherwise

00:18:47,900 --> 00:18:51,830
is which things you can do well with a

00:18:50,150 --> 00:18:54,920
tool and which things are not so easy to

00:18:51,830 --> 00:18:57,290
do and where it makes sense to try for

00:18:54,920 --> 00:19:02,480
something else all right look at the

00:18:57,290 --> 00:19:04,430
time 20 minutes so now I would like to

00:19:02,480 --> 00:19:06,170
talk a little bit before don't why we

00:19:04,430 --> 00:19:08,030
will get to the to the real deal but

00:19:06,170 --> 00:19:11,720
this is an important scene setting phase

00:19:08,030 --> 00:19:13,520
because in my experience and we my day

00:19:11,720 --> 00:19:15,290
job we also sell continuous delivery

00:19:13,520 --> 00:19:18,830
Enterprise tooling so I get a lot of

00:19:15,290 --> 00:19:21,350
these discussions and 90 or a huge

00:19:18,830 --> 00:19:23,570
number of them the focus is on execution

00:19:21,350 --> 00:19:24,890
of your pipeline great it's cool and

00:19:23,570 --> 00:19:26,780
it's fun and it's continuous delivery

00:19:24,890 --> 00:19:28,130
and DevOps and you get kudos in your

00:19:26,780 --> 00:19:31,900
company if that's what you can do and

00:19:28,130 --> 00:19:35,630
that's brilliant but the point is

00:19:31,900 --> 00:19:37,040
focusing on speed only is is pretty

00:19:35,630 --> 00:19:39,500
risky because there's nothing that will

00:19:37,040 --> 00:19:43,010
stop your continuous delivery initiative

00:19:39,500 --> 00:19:45,140
as dead as that well not sure what has

00:19:43,010 --> 00:19:46,730
that meant but never mind if you happen

00:19:45,140 --> 00:19:49,790
to have a couple of high-profile

00:19:46,730 --> 00:19:52,220
production failures in a row and the

00:19:49,790 --> 00:19:53,150
reality is always being the testing has

00:19:52,220 --> 00:19:56,570
always been the kind of like the

00:19:53,150 --> 00:19:58,610
forgotten stepchild hiding behind the

00:19:56,570 --> 00:20:00,410
podium because it's not glamorous and it

00:19:58,610 --> 00:20:01,370
was those people over there and we hate

00:20:00,410 --> 00:20:02,960
them because they give us all these

00:20:01,370 --> 00:20:04,010
defects back and what are we going to do

00:20:02,960 --> 00:20:06,980
with these defects we don't have any

00:20:04,010 --> 00:20:09,350
time and so on and so forth and that's

00:20:06,980 --> 00:20:11,840
just gotta stop and with some of the

00:20:09,350 --> 00:20:14,080
move quality left idea or at least in

00:20:11,840 --> 00:20:16,880
principle that stopping of course

00:20:14,080 --> 00:20:18,200
there's a lot of like just like there's

00:20:16,880 --> 00:20:20,120
a jolly name only there's

00:20:18,200 --> 00:20:25,460
move quality left in name only what's

00:20:20,120 --> 00:20:28,130
that mkay I know I can't say it but the

00:20:25,460 --> 00:20:30,020
point is it's really really essential if

00:20:28,130 --> 00:20:31,820
you take one thing away I would say to

00:20:30,020 --> 00:20:35,450
your management or if you're the manager

00:20:31,820 --> 00:20:37,640
yourself testing which is tantamount to

00:20:35,450 --> 00:20:38,960
quality and risk awareness and tests by

00:20:37,640 --> 00:20:40,730
themselves that's great but they did

00:20:38,960 --> 00:20:43,130
what do they tell you they're the key

00:20:40,730 --> 00:20:44,360
element that tells you about the quality

00:20:43,130 --> 00:20:46,640
of what your shipping and the risk

00:20:44,360 --> 00:20:48,950
associated with it that needs to be a

00:20:46,640 --> 00:20:51,320
first-class citizen in your CD

00:20:48,950 --> 00:20:53,720
initiative because CD is not just

00:20:51,320 --> 00:20:56,930
execution CDs execution and analysis

00:20:53,720 --> 00:21:00,260
which is tantamount to saying CDs speed

00:20:56,930 --> 00:21:01,550
plus quality and that's when we start to

00:21:00,260 --> 00:21:03,140
get to a question I'm going to address

00:21:01,550 --> 00:21:04,730
at the end if we have time which is no

00:21:03,140 --> 00:21:06,200
the execution part is well covered by

00:21:04,730 --> 00:21:08,420
pipeline orchestration whether it's

00:21:06,200 --> 00:21:11,090
Jenkins workflow or whatever other tool

00:21:08,420 --> 00:21:13,570
you want to use for this hours or but

00:21:11,090 --> 00:21:16,340
but the other part is it's not so easy

00:21:13,570 --> 00:21:17,540
and we're going to see what what you

00:21:16,340 --> 00:21:19,220
know what we can do in Jenkins to at

00:21:17,540 --> 00:21:21,560
least provide the right data but I'm not

00:21:19,220 --> 00:21:23,590
sure whether it's at the moment the

00:21:21,560 --> 00:21:27,530
right tool to do excellent analysis

00:21:23,590 --> 00:21:29,060
anyway right so now we're going to focus

00:21:27,530 --> 00:21:30,470
on how I we're getting to the bit that I

00:21:29,060 --> 00:21:33,400
discussed at the beginning where we say

00:21:30,470 --> 00:21:35,570
before you can leverage like fast

00:21:33,400 --> 00:21:37,400
efficient testing from Jenkins you have

00:21:35,570 --> 00:21:40,250
to do some homework this is the homework

00:21:37,400 --> 00:21:42,530
section so this is stuff that you can do

00:21:40,250 --> 00:21:43,970
about your tests or in your test setup

00:21:42,530 --> 00:21:45,350
that you can do even if you're not

00:21:43,970 --> 00:21:48,140
running Jenkins if you're just invoking

00:21:45,350 --> 00:21:50,920
them from scripts but some of this is

00:21:48,140 --> 00:21:53,090
important in order to make the rest work

00:21:50,920 --> 00:21:55,700
that's just a review most of you know

00:21:53,090 --> 00:21:57,740
this probably so and actually i'll talk

00:21:55,700 --> 00:22:00,050
a little bit about how this may or may

00:21:57,740 --> 00:22:02,060
not be slightly outdated in some sense

00:22:00,050 --> 00:22:03,740
but in a lot of cases no you read about

00:22:02,060 --> 00:22:05,900
cone's pyramid talking about the

00:22:03,740 --> 00:22:07,970
different different tiers of testing

00:22:05,900 --> 00:22:11,150
going from the technical more towards

00:22:07,970 --> 00:22:13,610
the user facing distribution something

00:22:11,150 --> 00:22:16,970
like 70 2010 or the numbers vary a

00:22:13,610 --> 00:22:18,260
little bit the in that you should sort

00:22:16,970 --> 00:22:20,330
of separate them out this way because

00:22:18,260 --> 00:22:21,650
some are fully automated easy to write

00:22:20,330 --> 00:22:24,080
the others are slightly more complex

00:22:21,650 --> 00:22:26,600
they take longer to run so UI tests

00:22:24,080 --> 00:22:28,970
might take 10 seconds per test just a

00:22:26,600 --> 00:22:30,890
boot up a a browser or browser mock-up

00:22:28,970 --> 00:22:32,060
and so on and then you get you know

00:22:30,890 --> 00:22:34,190
integration and performing

00:22:32,060 --> 00:22:35,570
tests even further down the line and the

00:22:34,190 --> 00:22:37,010
reason they used to be further down the

00:22:35,570 --> 00:22:39,140
line and often still ours because they

00:22:37,010 --> 00:22:40,550
were even more expensive and limited

00:22:39,140 --> 00:22:43,130
resources and you know you definitely

00:22:40,550 --> 00:22:45,320
didn't want to waste expensive time

00:22:43,130 --> 00:22:48,730
doing integration of performance testing

00:22:45,320 --> 00:22:51,440
if the other stuff was already broken

00:22:48,730 --> 00:22:54,950
but I think some of this is maybe a

00:22:51,440 --> 00:22:57,290
little under under open for debate and

00:22:54,950 --> 00:23:00,920
so well we've already said a few times

00:22:57,290 --> 00:23:02,420
testers are developers and then the

00:23:00,920 --> 00:23:04,250
second thing I think the second one oh

00:23:02,420 --> 00:23:06,050
one point that I'd like to talk about a

00:23:04,250 --> 00:23:08,930
bit is it Tesco this production coding

00:23:06,050 --> 00:23:12,050
in two ways one it's in terms of

00:23:08,930 --> 00:23:14,150
importance you know if you start to rely

00:23:12,050 --> 00:23:17,510
on testing as being the thing that gives

00:23:14,150 --> 00:23:19,340
you a quality a risk output it's got to

00:23:17,510 --> 00:23:20,810
be fast enough you can't have broken

00:23:19,340 --> 00:23:22,280
windows over there you'll have tech debt

00:23:20,810 --> 00:23:24,860
there as well as you do in production

00:23:22,280 --> 00:23:27,710
code but you can't let it lag behind too

00:23:24,860 --> 00:23:29,510
much and you have to keep track of

00:23:27,710 --> 00:23:31,070
nowhere the hot spots where the

00:23:29,510 --> 00:23:32,330
bottlenecks and so on because yeah if

00:23:31,070 --> 00:23:34,370
these tests are taking too long

00:23:32,330 --> 00:23:36,320
switching them off probably isn't the

00:23:34,370 --> 00:23:38,900
right choice maybe it's easier to figure

00:23:36,320 --> 00:23:41,000
out why they're slow so running tests as

00:23:38,900 --> 00:23:42,710
people as I was always prone to do on

00:23:41,000 --> 00:23:45,110
the cheapest all this laptop or desktop

00:23:42,710 --> 00:23:48,290
that you found oh look here it is my

00:23:45,110 --> 00:23:50,360
test machine you know that's not that's

00:23:48,290 --> 00:23:52,340
not going to help us very much given the

00:23:50,360 --> 00:23:53,870
amount of testing we want to do the

00:23:52,340 --> 00:23:56,450
other thing about test code equaling

00:23:53,870 --> 00:23:59,840
production code is sort of a variant of

00:23:56,450 --> 00:24:01,070
Conway's law that we've seen to be quite

00:23:59,840 --> 00:24:03,830
effective like the Conway's law of

00:24:01,070 --> 00:24:05,660
testing what that means is that your

00:24:03,830 --> 00:24:08,720
Conway's law says that your application

00:24:05,660 --> 00:24:11,420
code tends to be structured around the

00:24:08,720 --> 00:24:14,120
department's team's functions so you

00:24:11,420 --> 00:24:16,760
tend to find a reflection of your your

00:24:14,120 --> 00:24:19,660
organization and the business problem to

00:24:16,760 --> 00:24:22,070
some extent in your source code and

00:24:19,660 --> 00:24:24,770
extending that the testing is to say

00:24:22,070 --> 00:24:27,320
that you should to some extent also find

00:24:24,770 --> 00:24:29,390
a representation of your test system of

00:24:27,320 --> 00:24:32,660
the system under test rather in your

00:24:29,390 --> 00:24:33,830
tests and that's a little bit trivial to

00:24:32,660 --> 00:24:36,080
some extent and and a lot of you already

00:24:33,830 --> 00:24:37,940
do this but at some point you took you

00:24:36,080 --> 00:24:39,320
start with a one test especially we like

00:24:37,940 --> 00:24:40,700
UI testing and then you add more and

00:24:39,320 --> 00:24:42,650
more test cases and more and more test

00:24:40,700 --> 00:24:45,110
cases and more and more test cases and

00:24:42,650 --> 00:24:45,830
it's pretty easy to develop this god

00:24:45,110 --> 00:24:47,809
test

00:24:45,830 --> 00:24:49,519
its enormous test would like you know

00:24:47,809 --> 00:24:53,440
I've seen unit tests with hundreds of

00:24:49,519 --> 00:24:55,970
different class or tests in them and you

00:24:53,440 --> 00:24:57,320
start to lose this relationship between

00:24:55,970 --> 00:24:59,539
the stuff that you're testing and the

00:24:57,320 --> 00:25:02,450
stuff that is doing the testing and and

00:24:59,539 --> 00:25:04,100
that makes it very tricky to figure out

00:25:02,450 --> 00:25:06,590
and because this relationship also helps

00:25:04,100 --> 00:25:08,149
you identify you know which tests

00:25:06,590 --> 00:25:10,909
belonged to which part of the code when

00:25:08,149 --> 00:25:12,320
you refactor your application you

00:25:10,909 --> 00:25:14,899
shouldn't just think about refactoring

00:25:12,320 --> 00:25:17,750
the test themselves to still succeed but

00:25:14,899 --> 00:25:18,980
if you're breaking apart a system into

00:25:17,750 --> 00:25:21,019
two components you should also think

00:25:18,980 --> 00:25:22,669
about breaking apart the tests because

00:25:21,019 --> 00:25:23,929
at some point if the divergence becomes

00:25:22,669 --> 00:25:26,510
too big it's very difficult to

00:25:23,929 --> 00:25:28,279
understand and especially the subset to

00:25:26,510 --> 00:25:30,080
say I only want to run the test for that

00:25:28,279 --> 00:25:33,049
particular component well if that's

00:25:30,080 --> 00:25:35,120
eight of the seventy tests in one

00:25:33,049 --> 00:25:37,929
enormous tests a very few test tools

00:25:35,120 --> 00:25:41,090
that make it easy for you to do that so

00:25:37,929 --> 00:25:43,789
yeah make sure that to some extent your

00:25:41,090 --> 00:25:47,630
test code mirrors your production code

00:25:43,789 --> 00:25:49,309
um that obviously becomes easier if we

00:25:47,630 --> 00:25:51,529
go with this developers or testers kind

00:25:49,309 --> 00:25:53,779
of thing because it's it's much easier

00:25:51,529 --> 00:25:55,130
to do in a white box type scenario where

00:25:53,779 --> 00:25:58,340
people have access to the production

00:25:55,130 --> 00:26:00,049
code and so I guess that's what we're

00:25:58,340 --> 00:26:01,789
talking about the other thing is linking

00:26:00,049 --> 00:26:03,500
tests to use cases so that's the third

00:26:01,789 --> 00:26:06,710
point that I think is very important to

00:26:03,500 --> 00:26:09,169
bear in mind and you know what this

00:26:06,710 --> 00:26:11,000
means is I think about say unit tests

00:26:09,169 --> 00:26:12,470
although the way your unit test class is

00:26:11,000 --> 00:26:14,750
named it's named after the class that

00:26:12,470 --> 00:26:17,690
it's testing that's fine but that's a

00:26:14,750 --> 00:26:19,630
technical link i can so i can very

00:26:17,690 --> 00:26:21,919
easily by looking at my test code

00:26:19,630 --> 00:26:24,529
looking at the name of a test case for

00:26:21,919 --> 00:26:26,149
instance tell you which parts of my

00:26:24,529 --> 00:26:28,880
source code of my system are being

00:26:26,149 --> 00:26:30,769
tested but if i were to ask you oh this

00:26:28,880 --> 00:26:34,220
particular feature that we wrote like I

00:26:30,769 --> 00:26:36,019
know acme 12345 in zero or rally or

00:26:34,220 --> 00:26:39,649
whatever which tests are related to that

00:26:36,019 --> 00:26:42,289
actually that in many cases is a much

00:26:39,649 --> 00:26:44,090
more difficult question to answer now

00:26:42,289 --> 00:26:46,309
some people start naming the tests after

00:26:44,090 --> 00:26:49,370
the the juror numbers and that kind of

00:26:46,309 --> 00:26:52,159
stuff but that doesn't not great because

00:26:49,370 --> 00:26:54,409
then you lose the other link so what we

00:26:52,159 --> 00:26:56,360
need to do in order to to be more

00:26:54,409 --> 00:26:58,429
efficient also from Jenkins is to find a

00:26:56,360 --> 00:26:59,620
way to create this link and the

00:26:58,429 --> 00:27:00,850
challenge here a little bit is

00:26:59,620 --> 00:27:04,890
different tools have different ways of

00:27:00,850 --> 00:27:07,809
doing this that's really only one

00:27:04,890 --> 00:27:11,680
element of what I would call slicing and

00:27:07,809 --> 00:27:13,420
dicing if we're going to be more

00:27:11,680 --> 00:27:15,490
efficient and this is what I was saying

00:27:13,420 --> 00:27:19,630
about Google they automatically slice

00:27:15,490 --> 00:27:21,100
and dice their overall test cases but

00:27:19,630 --> 00:27:22,809
you want to be able to do this in many

00:27:21,100 --> 00:27:24,910
different ways so we just discussed one

00:27:22,809 --> 00:27:27,070
particular way linking the test to

00:27:24,910 --> 00:27:28,930
particular use cases linking test to

00:27:27,070 --> 00:27:31,150
functional components is another slicing

00:27:28,930 --> 00:27:33,130
and dicing way which is a little bit

00:27:31,150 --> 00:27:34,450
covered by the Conway's law thing but

00:27:33,130 --> 00:27:36,730
there are others like linking test two

00:27:34,450 --> 00:27:39,550
teams you will see some reports a little

00:27:36,730 --> 00:27:41,679
bit later from one of one of the people

00:27:39,550 --> 00:27:43,570
some of these examples come from where

00:27:41,679 --> 00:27:45,700
they want to compare the performance of

00:27:43,570 --> 00:27:47,800
different teams on a different day like

00:27:45,700 --> 00:27:49,059
has one team introduced more regressions

00:27:47,800 --> 00:27:53,380
than another team or something like that

00:27:49,059 --> 00:27:55,390
so think about or other other types of

00:27:53,380 --> 00:27:56,860
slicing and dicing unreliable test test

00:27:55,390 --> 00:27:59,530
to take a long time to run all these

00:27:56,860 --> 00:28:01,090
kind of things they're all attributes

00:27:59,530 --> 00:28:04,270
that at some point or another we will

00:28:01,090 --> 00:28:05,650
want to drill down to so we really need

00:28:04,270 --> 00:28:08,740
to think about ways in which we can

00:28:05,650 --> 00:28:10,900
label the tests that we write and

00:28:08,740 --> 00:28:13,480
different tools as I say have different

00:28:10,900 --> 00:28:16,270
capabilities for them some support and

00:28:13,480 --> 00:28:18,250
labeling as a native attribute some you

00:28:16,270 --> 00:28:21,190
have to do smart stuff like encoding it

00:28:18,250 --> 00:28:22,809
in in names or metadata or something

00:28:21,190 --> 00:28:26,260
else so that it's not always trivial but

00:28:22,809 --> 00:28:28,210
we can do that and the last one is and I

00:28:26,260 --> 00:28:29,650
think this is where where we start to

00:28:28,210 --> 00:28:31,929
see a little bit of a difference between

00:28:29,650 --> 00:28:34,270
this and cone radical parallelization

00:28:31,929 --> 00:28:35,620
now you want to fail faster than you

00:28:34,270 --> 00:28:38,620
were failing before fell fast as good

00:28:35,620 --> 00:28:40,420
fell faster is better this idea that you

00:28:38,620 --> 00:28:42,460
run we everybody knows the nightlies you

00:28:40,420 --> 00:28:44,620
know we do work all day and then at

00:28:42,460 --> 00:28:46,750
night the test machine crunches and

00:28:44,620 --> 00:28:48,820
tomorrow we see whether what we wrote at

00:28:46,750 --> 00:28:51,040
nine o'clock the day before was John

00:28:48,820 --> 00:28:53,050
Cornell that's like 24 hours worth of

00:28:51,040 --> 00:28:55,270
lag they finally just wrote a blog in

00:28:53,050 --> 00:28:57,490
which he says in his view 30 minutes is

00:28:55,270 --> 00:29:00,460
just about acceptable as feedback time

00:28:57,490 --> 00:29:01,960
for end-to-end testing so he had a bunch

00:29:00,460 --> 00:29:03,880
of really smart developers when they

00:29:01,960 --> 00:29:06,250
built l max that was received use case

00:29:03,880 --> 00:29:08,560
of London mercantile asset exchange so

00:29:06,250 --> 00:29:11,080
they set up a custom test system to do

00:29:08,560 --> 00:29:12,929
that like 12 they were averaging like 17

00:29:11,080 --> 00:29:15,220
minutes end-to-end feedback

00:29:12,929 --> 00:29:17,590
so he said that's what really helps you

00:29:15,220 --> 00:29:19,480
accelerate but thinking that nightlies

00:29:17,590 --> 00:29:21,369
is still acceptable is maybe something

00:29:19,480 --> 00:29:22,629
we have to we have to challenge a little

00:29:21,369 --> 00:29:24,179
bit and in order to do that we have to

00:29:22,629 --> 00:29:27,159
look at radical Palermo up

00:29:24,179 --> 00:29:30,340
parallelization I think I've said most

00:29:27,159 --> 00:29:31,990
of this already organizing tests based

00:29:30,340 --> 00:29:33,759
on the system under test so this is a

00:29:31,990 --> 00:29:36,279
sort of example naming convention that

00:29:33,759 --> 00:29:37,840
you'll see an example of later this is

00:29:36,279 --> 00:29:39,580
from fit Nessa in this particular case

00:29:37,840 --> 00:29:41,379
but it applies to a couple of other ones

00:29:39,580 --> 00:29:44,919
as well where we've split this kind of

00:29:41,379 --> 00:29:47,049
down and the reason for for sort of

00:29:44,919 --> 00:29:49,210
having this is breadcrumb almost in the

00:29:47,049 --> 00:29:51,159
name is that you can then start to say

00:29:49,210 --> 00:29:53,080
things like okay I'm can chop it up at

00:29:51,159 --> 00:29:55,210
different bits like I could decide first

00:29:53,080 --> 00:29:57,340
of all to paralyze it by app or to run

00:29:55,210 --> 00:30:00,220
only the test for a specific app simply

00:29:57,340 --> 00:30:02,259
by matching those tests names or those

00:30:00,220 --> 00:30:04,659
tests that match this convention if I

00:30:02,259 --> 00:30:07,179
want to paralyzed by use case then I do

00:30:04,659 --> 00:30:09,249
that a little bit differently or you

00:30:07,179 --> 00:30:11,080
know in an extreme case I might say I

00:30:09,249 --> 00:30:13,360
want to run each test case on its own

00:30:11,080 --> 00:30:15,389
docker container for instance and what

00:30:13,360 --> 00:30:17,679
you can also do with this kind of setup

00:30:15,389 --> 00:30:19,509
test dependencies obviously make all

00:30:17,679 --> 00:30:22,809
this parallelization different so

00:30:19,509 --> 00:30:24,399
difficult rather so a clear guideline

00:30:22,809 --> 00:30:27,970
test should not depend on other tests

00:30:24,399 --> 00:30:30,639
it's very tempting especially with like

00:30:27,970 --> 00:30:32,590
complicated test fixtures fixtures to

00:30:30,639 --> 00:30:33,879
set up tests where you say okay well you

00:30:32,590 --> 00:30:34,929
know we're going to insert a record in

00:30:33,879 --> 00:30:36,039
the database then we're going to check

00:30:34,929 --> 00:30:37,749
if it's there then going to add another

00:30:36,039 --> 00:30:38,830
one then we're going to delete the first

00:30:37,749 --> 00:30:40,690
one then we're going to do the other one

00:30:38,830 --> 00:30:42,720
we go do that all together and that's

00:30:40,690 --> 00:30:45,879
fine but this is very highly coupled now

00:30:42,720 --> 00:30:47,799
and setting I mean there is a bit of a

00:30:45,879 --> 00:30:49,809
trade-off here in the sense that of

00:30:47,799 --> 00:30:52,480
course you also don't want to have that

00:30:49,809 --> 00:30:54,309
that terrible like I have to set up 800

00:30:52,480 --> 00:30:56,350
mocks in order to test one thing in my

00:30:54,309 --> 00:30:59,139
unit test and I don't want to copy this

00:30:56,350 --> 00:31:00,700
800 lines of Mark code into every single

00:30:59,139 --> 00:31:02,230
test well how would you fix that in

00:31:00,700 --> 00:31:05,080
production code you would fix it by

00:31:02,230 --> 00:31:08,139
factoring it out having a good fixture

00:31:05,080 --> 00:31:11,769
set up system is a very essential part

00:31:08,139 --> 00:31:14,259
of making this possible so you may have

00:31:11,769 --> 00:31:15,909
to think of again Dave Farley talks

00:31:14,259 --> 00:31:17,590
about having a custom dsl for this but

00:31:15,909 --> 00:31:19,629
some tools are pretty good support for

00:31:17,590 --> 00:31:22,330
this think about factoring your fixtures

00:31:19,629 --> 00:31:24,050
in such a way that it's very easy to set

00:31:22,330 --> 00:31:26,210
up

00:31:24,050 --> 00:31:28,970
for every test may not be possible but

00:31:26,210 --> 00:31:30,590
try and go towards that and of course

00:31:28,970 --> 00:31:32,720
part of this is not just the way you

00:31:30,590 --> 00:31:34,820
define the fixture sometimes the systems

00:31:32,720 --> 00:31:36,740
are very hard to set up as well if it

00:31:34,820 --> 00:31:37,670
takes eight hours to prepare a system

00:31:36,740 --> 00:31:39,290
because you've got to take like a

00:31:37,670 --> 00:31:43,010
snapshot of production data or whatever

00:31:39,290 --> 00:31:44,060
and then load it over a modem yeah then

00:31:43,010 --> 00:31:45,440
you're going to have a problem doing

00:31:44,060 --> 00:31:47,660
this so then you have to start thinking

00:31:45,440 --> 00:31:51,980
about whether that there's not another

00:31:47,660 --> 00:31:53,900
way in which you can do this I said this

00:31:51,980 --> 00:31:55,670
already keeping it manageable focusing

00:31:53,900 --> 00:31:58,190
on functional no technical coverage so

00:31:55,670 --> 00:31:59,900
be aware of how many use cases that you

00:31:58,190 --> 00:32:03,680
are covering rather than how many lines

00:31:59,900 --> 00:32:04,880
of code and also if you look at your now

00:32:03,680 --> 00:32:06,950
if you look and say you have 40 user

00:32:04,880 --> 00:32:09,200
stories and 400 tests so that means an

00:32:06,950 --> 00:32:11,330
average of ten tests per story but is

00:32:09,200 --> 00:32:12,980
that the right thing to do like no you

00:32:11,330 --> 00:32:14,540
shouldn't probably have 10 tests per

00:32:12,980 --> 00:32:16,370
store you should have more tests for

00:32:14,540 --> 00:32:17,930
those user stories that are more

00:32:16,370 --> 00:32:19,760
important like if buying from the

00:32:17,930 --> 00:32:21,470
shopping cart is the important thing you

00:32:19,760 --> 00:32:23,030
need to have more tests for that so this

00:32:21,470 --> 00:32:25,460
is a metric that you might look at like

00:32:23,030 --> 00:32:29,000
the distribution of your test case is

00:32:25,460 --> 00:32:30,920
over the important use cases which

00:32:29,000 --> 00:32:32,660
implies that you actually can rank the

00:32:30,920 --> 00:32:35,030
use cases by importance which I hope you

00:32:32,660 --> 00:32:36,680
can all do because you know otherwise

00:32:35,030 --> 00:32:38,120
it's very difficult to know what's

00:32:36,680 --> 00:32:40,100
really relevant about your system and

00:32:38,120 --> 00:32:41,540
what isn't don't get me wrong I could

00:32:40,100 --> 00:32:43,100
never I probably couldn't even do it

00:32:41,540 --> 00:32:45,500
today I'm the VP of products I should be

00:32:43,100 --> 00:32:48,020
able to do this but know that that's not

00:32:45,500 --> 00:32:49,310
an easy thing to do of course make sure

00:32:48,020 --> 00:32:50,780
you keep a lot of metrics about your

00:32:49,310 --> 00:32:53,240
test Jenkins will help you get some of

00:32:50,780 --> 00:32:55,100
these obviously the number of tests that

00:32:53,240 --> 00:32:56,540
you run but also the number of tests

00:32:55,100 --> 00:32:58,760
that have not passed or failed in a

00:32:56,540 --> 00:33:00,260
certain time flaky tests are the

00:32:58,760 --> 00:33:02,050
opposite that's test that keep going on

00:33:00,260 --> 00:33:05,240
and off and on and off and on and off

00:33:02,050 --> 00:33:07,220
but so there a problem because they

00:33:05,240 --> 00:33:10,100
indicate either that the test fixture is

00:33:07,220 --> 00:33:11,720
broken or that you know there's

00:33:10,100 --> 00:33:13,840
something very it's very seldom that

00:33:11,720 --> 00:33:15,920
it's flaky test is caused by actual

00:33:13,840 --> 00:33:17,390
developer commits breaking something

00:33:15,920 --> 00:33:18,950
than fixing it then breaking it and

00:33:17,390 --> 00:33:20,690
fixing it then breaking it and fixing it

00:33:18,950 --> 00:33:23,420
much more often it's caused by some kind

00:33:20,690 --> 00:33:25,820
of lack of reliability in the setup or

00:33:23,420 --> 00:33:27,110
some random like race condition so flaky

00:33:25,820 --> 00:33:29,330
tests are good to know about because

00:33:27,110 --> 00:33:31,490
they contribute noise but number of

00:33:29,330 --> 00:33:34,210
tests that have not passed or failed in

00:33:31,490 --> 00:33:36,710
like 2,000 test runs that's also noise

00:33:34,210 --> 00:33:37,430
that's not signal that's not telling you

00:33:36,710 --> 00:33:38,870
anything really

00:33:37,430 --> 00:33:41,870
useful at this particular point in time

00:33:38,870 --> 00:33:44,510
that just lets you go oh good we've got

00:33:41,870 --> 00:33:45,830
2,000 passing tests yeah great they've

00:33:44,510 --> 00:33:49,670
been they've been passing since forever

00:33:45,830 --> 00:33:51,440
so is that not distracting you from

00:33:49,670 --> 00:33:53,270
where the real stuff is happening how

00:33:51,440 --> 00:33:54,890
long tests are taking and so on so I

00:33:53,270 --> 00:33:56,690
talked about all this you know label

00:33:54,890 --> 00:33:58,730
label label label known issues notice

00:33:56,690 --> 00:34:00,260
use another nice one that's another one

00:33:58,730 --> 00:34:01,730
that's not so we'll talk about some

00:34:00,260 --> 00:34:03,740
challenge with Jenkins in the second

00:34:01,730 --> 00:34:05,480
over to accelerate and if a pro

00:34:03,740 --> 00:34:08,690
something is a broken test but you know

00:34:05,480 --> 00:34:10,850
about it and then okay but you might

00:34:08,690 --> 00:34:12,800
accept that right now we got the Jenkins

00:34:10,850 --> 00:34:14,780
tilt the pyramid basically this is

00:34:12,800 --> 00:34:16,310
testing sort of Jenkins testing 101 I'm

00:34:14,780 --> 00:34:17,900
pretty sure all of you unless done

00:34:16,310 --> 00:34:19,610
except those who are brand new to this

00:34:17,900 --> 00:34:21,950
do this already you take this pyramid

00:34:19,610 --> 00:34:24,500
you turn it around and then you use that

00:34:21,950 --> 00:34:25,940
to slice up your Jenkins jobs all right

00:34:24,500 --> 00:34:28,670
right so you do the unit tests in one

00:34:25,940 --> 00:34:30,860
job and then the the service level tests

00:34:28,670 --> 00:34:34,940
maybe another job and then the UI test

00:34:30,860 --> 00:34:37,190
later that's pretty easy and we'll talk

00:34:34,940 --> 00:34:38,660
about maybe a next step from that in a

00:34:37,190 --> 00:34:40,970
second but that's the first obvious and

00:34:38,660 --> 00:34:43,190
natural thing to do and start simple so

00:34:40,970 --> 00:34:44,750
so do that make sure of course when

00:34:43,190 --> 00:34:48,230
you're doing this that you know that

00:34:44,750 --> 00:34:49,580
you're testing the right stuff and that

00:34:48,230 --> 00:34:50,690
it's the same stuff that you're testing

00:34:49,580 --> 00:34:52,550
in each of these tests that you run

00:34:50,690 --> 00:34:54,470
there's nothing quite as frustrating

00:34:52,550 --> 00:34:57,050
talking about minimizing mean time to

00:34:54,470 --> 00:34:59,750
repair to discover that you've just sunk

00:34:57,050 --> 00:35:01,820
hours into trying to figure out why this

00:34:59,750 --> 00:35:03,020
test is failing when it's not the

00:35:01,820 --> 00:35:05,230
version of the code that you should have

00:35:03,020 --> 00:35:07,640
been testing in the first place so use

00:35:05,230 --> 00:35:10,010
you know obviously repositories and

00:35:07,640 --> 00:35:12,080
fingerprinting Jenkins has nice support

00:35:10,010 --> 00:35:15,200
for fingerprinting artifacts to make

00:35:12,080 --> 00:35:17,090
sure that you can be certain that the

00:35:15,200 --> 00:35:21,140
the system under test is the same in all

00:35:17,090 --> 00:35:25,250
your jobs try not to run too many tests

00:35:21,140 --> 00:35:27,650
in the same job it's it's difficult

00:35:25,250 --> 00:35:29,240
because back in the day when creating a

00:35:27,650 --> 00:35:31,790
job in Jenkins was there wasn't much

00:35:29,240 --> 00:35:33,380
automation support having 10,000 jobs

00:35:31,790 --> 00:35:36,800
was an enormous pain and if something

00:35:33,380 --> 00:35:39,500
changed it was to try and go into all

00:35:36,800 --> 00:35:40,970
these jobs and edit them Jenkins has a

00:35:39,500 --> 00:35:42,920
pretty powerful command-line interface

00:35:40,970 --> 00:35:45,410
it has the job dsl now has the workflow

00:35:42,920 --> 00:35:48,070
plugin has a lot of things that make

00:35:45,410 --> 00:35:51,369
management of multiple jobs a lot easier

00:35:48,070 --> 00:35:54,130
so if you can try to consider

00:35:51,369 --> 00:35:56,529
not just different test tools but also

00:35:54,130 --> 00:35:59,140
different test platforms like if you're

00:35:56,529 --> 00:36:00,700
doing a matrix test for instance let's

00:35:59,140 --> 00:36:02,019
put that up into separate jobs either by

00:36:00,700 --> 00:36:03,849
doing that by hand if you like you're

00:36:02,019 --> 00:36:06,880
using the multi job plug-in which is a

00:36:03,849 --> 00:36:08,349
sort of canonical matrix testing it's

00:36:06,880 --> 00:36:11,079
getting some competition now obviously

00:36:08,349 --> 00:36:13,900
from the workflow plugin all from the

00:36:11,079 --> 00:36:16,059
job DSL but yeah so copy artifact is the

00:36:13,900 --> 00:36:17,980
thing for the the fingerprints multi job

00:36:16,059 --> 00:36:20,109
would be for the splitting stuff up into

00:36:17,980 --> 00:36:22,210
different jobs workflow is another

00:36:20,109 --> 00:36:23,589
alternative for that and of course that

00:36:22,210 --> 00:36:25,240
allows you to coordinate these it's

00:36:23,589 --> 00:36:27,940
pretty obvious stuff try to keep your

00:36:25,240 --> 00:36:29,410
Jenkins jobs sane and simple and one of

00:36:27,940 --> 00:36:32,710
the things that this means certainly in

00:36:29,410 --> 00:36:36,789
my view try to avoid having complicated

00:36:32,710 --> 00:36:38,769
run this script tasks in Jenkins they're

00:36:36,789 --> 00:36:40,569
not great to manage yes Jenkins as a

00:36:38,769 --> 00:36:42,730
whole but no some it's got better over

00:36:40,569 --> 00:36:44,470
time in terms of how much version

00:36:42,730 --> 00:36:46,869
control you can do in history and all

00:36:44,470 --> 00:36:50,259
that kind of stuff with your Jenkins

00:36:46,869 --> 00:36:53,559
jobs but really having complicated like

00:36:50,259 --> 00:36:55,210
scripts in little windows in text boxes

00:36:53,559 --> 00:36:57,130
that you edit in Jenkins or copy paste

00:36:55,210 --> 00:36:58,839
into like notepad plus plus or whatever

00:36:57,130 --> 00:37:02,049
yeah that's that's not a way to go right

00:36:58,839 --> 00:37:04,059
if you're going to run scripts either

00:37:02,049 --> 00:37:07,269
use plugins to invoke the test tools

00:37:04,059 --> 00:37:10,269
directly or have the invoker scripts

00:37:07,269 --> 00:37:13,450
that you store in source control and

00:37:10,269 --> 00:37:15,220
then your Jenkins invocations should be

00:37:13,450 --> 00:37:17,799
no more complicated than check out the

00:37:15,220 --> 00:37:20,680
appropriate version of that particular

00:37:17,799 --> 00:37:22,779
script and invoke it make sure the

00:37:20,680 --> 00:37:24,989
script I have is a parameterised right

00:37:22,779 --> 00:37:27,549
don't assume you know the things like

00:37:24,989 --> 00:37:29,079
for it's putting them on the source

00:37:27,549 --> 00:37:31,150
control which version of the scripts are

00:37:29,079 --> 00:37:32,289
we running the current one but we should

00:37:31,150 --> 00:37:34,239
be trying to run the same version

00:37:32,289 --> 00:37:35,769
throughout our pipeline so this will be

00:37:34,239 --> 00:37:37,660
one of those parameters that we end up

00:37:35,769 --> 00:37:39,759
passing through the pipeline not just a

00:37:37,660 --> 00:37:41,049
version of the code to run but also the

00:37:39,759 --> 00:37:43,539
version of the test scripts that we

00:37:41,049 --> 00:37:45,549
should be running other parameters

00:37:43,539 --> 00:37:48,249
obviously things like these labels if

00:37:45,549 --> 00:37:50,410
we're going to run a filter and only run

00:37:48,249 --> 00:37:51,849
a subset we have to make sure that we

00:37:50,410 --> 00:37:53,890
can pass that in so think from the

00:37:51,849 --> 00:37:55,900
beginning these invoker scripts need to

00:37:53,890 --> 00:37:58,630
support the options that the underlying

00:37:55,900 --> 00:38:00,509
test tools support that's that's point

00:37:58,630 --> 00:38:03,069
six actually as I've just said and

00:38:00,509 --> 00:38:05,090
labels so cucumber and fitness and some

00:38:03,069 --> 00:38:06,680
other tools support labels natively

00:38:05,090 --> 00:38:09,890
otherwise as you saw you can get a bit

00:38:06,680 --> 00:38:12,350
more creative with naming of tests

00:38:09,890 --> 00:38:14,810
that's another pretty common way of

00:38:12,350 --> 00:38:16,610
doing this because most of the X unit

00:38:14,810 --> 00:38:18,740
type tests give you an option to say I

00:38:16,610 --> 00:38:20,720
want to run a subset of tests by name

00:38:18,740 --> 00:38:23,600
and they even give you like regex match

00:38:20,720 --> 00:38:27,680
options so you can use that as a kind of

00:38:23,600 --> 00:38:29,210
filtering scheme for your tests so yeah

00:38:27,680 --> 00:38:33,230
this is the kind of standard stuff that

00:38:29,210 --> 00:38:35,540
you would get if you had that yeah so

00:38:33,230 --> 00:38:38,330
here we probably have some unit tests

00:38:35,540 --> 00:38:40,580
within the build well guess that's

00:38:38,330 --> 00:38:42,800
probably not too stupid if your unit

00:38:40,580 --> 00:38:44,600
tests take a long time I think it's it's

00:38:42,800 --> 00:38:47,630
it's worth arguing that you might even

00:38:44,600 --> 00:38:49,070
want to take those out of there I've run

00:38:47,630 --> 00:38:51,980
a whole ton of bills where the unit test

00:38:49,070 --> 00:38:55,490
took up about half the runtime of the

00:38:51,980 --> 00:38:57,050
bill itself so why not put them in

00:38:55,490 --> 00:38:59,080
parallel with a deployment for instance

00:38:57,050 --> 00:39:01,190
of course if a deployment is like a

00:38:59,080 --> 00:39:03,140
ten-thousand-dollar job that takes 12

00:39:01,190 --> 00:39:05,330
people five hours to do you're not going

00:39:03,140 --> 00:39:06,530
to do that but as we'll see I think

00:39:05,330 --> 00:39:08,600
we're moving away from that a little bit

00:39:06,530 --> 00:39:09,860
so one challenge with this that we'll

00:39:08,600 --> 00:39:12,380
talk about in the seconds the scattered

00:39:09,860 --> 00:39:15,050
result qualification but before I get to

00:39:12,380 --> 00:39:18,740
that think radical paralyzation like the

00:39:15,050 --> 00:39:20,750
mindset we had oh by force because

00:39:18,740 --> 00:39:23,030
environments which he or expensive and

00:39:20,750 --> 00:39:25,900
it took a long time and very brittle and

00:39:23,030 --> 00:39:28,250
were used by all these different teams

00:39:25,900 --> 00:39:30,110
yeah it made sense to push all the

00:39:28,250 --> 00:39:32,480
environment specific tests way to the

00:39:30,110 --> 00:39:34,790
end because they were so risky and cost

00:39:32,480 --> 00:39:36,500
and time intensive to set up but we're

00:39:34,790 --> 00:39:38,660
moving in we're in an era of dirt cheap

00:39:36,500 --> 00:39:40,370
throwaway environments now and that

00:39:38,660 --> 00:39:43,310
allows you to think about much more

00:39:40,370 --> 00:39:45,200
parallelization than you may have

00:39:43,310 --> 00:39:46,670
thought previously possible and if you

00:39:45,200 --> 00:39:48,140
manage to make sure that your jobs don't

00:39:46,670 --> 00:39:50,060
depend on each other either that's the

00:39:48,140 --> 00:39:51,860
Jenkins corollary of the tests not

00:39:50,060 --> 00:39:54,290
depending on each other then you can

00:39:51,860 --> 00:39:56,750
maybe even think about a test setup like

00:39:54,290 --> 00:39:58,910
this and and i should add right now i

00:39:56,750 --> 00:40:01,340
mean from what we just discussed maybe

00:39:58,910 --> 00:40:04,640
even you know you put your unit tests up

00:40:01,340 --> 00:40:07,520
here too or your code quality tests or

00:40:04,640 --> 00:40:09,410
whatever so you know we can we can do

00:40:07,520 --> 00:40:13,100
more parallelization than we think I

00:40:09,410 --> 00:40:15,620
think it was another point here yeah

00:40:13,100 --> 00:40:18,170
test drops are the eyes and ears of your

00:40:15,620 --> 00:40:18,740
pipeline like I've met many a Jenkins

00:40:18,170 --> 00:40:20,690
admin

00:40:18,740 --> 00:40:22,250
who's incredibly you know Jenkins has to

00:40:20,690 --> 00:40:24,020
be smooth and the plugins stuff has to

00:40:22,250 --> 00:40:25,550
work really well I want to know the

00:40:24,020 --> 00:40:28,970
configuration of all my jobs blah blah

00:40:25,550 --> 00:40:30,860
blah blah yeah that's great but the

00:40:28,970 --> 00:40:32,810
stuff that really matters in Jenkins is

00:40:30,860 --> 00:40:34,850
that is really your test results so

00:40:32,810 --> 00:40:36,170
those jobs have to be optimized much

00:40:34,850 --> 00:40:38,030
more than the rest like the other ones

00:40:36,170 --> 00:40:39,440
okay but these are really critical that

00:40:38,030 --> 00:40:42,260
they work nicely and give you the data

00:40:39,440 --> 00:40:43,460
that you need the challenge that I was

00:40:42,260 --> 00:40:44,750
going to talk about for the last couple

00:40:43,460 --> 00:40:47,060
of minutes before we get to some

00:40:44,750 --> 00:40:48,650
questions hopefully is this scattered

00:40:47,060 --> 00:40:51,410
result problem like this is the Jenkins

00:40:48,650 --> 00:40:53,330
workflow view if you've seen it and it

00:40:51,410 --> 00:40:55,700
shows you as I said great for execution

00:40:53,330 --> 00:41:01,310
now you tell me when you look at this UI

00:40:55,700 --> 00:41:03,350
how good is it well I don't know I think

00:41:01,310 --> 00:41:04,550
that's the simple answer I mean yes I

00:41:03,350 --> 00:41:06,350
can give you a sort of traffic light

00:41:04,550 --> 00:41:09,890
answer in the sense that oh look the

00:41:06,350 --> 00:41:11,300
build number 108 didn't make it to the

00:41:09,890 --> 00:41:15,260
deploy face so something must have gone

00:41:11,300 --> 00:41:16,730
wrong but that's that's a very very high

00:41:15,260 --> 00:41:18,710
level very black-and-white kind of

00:41:16,730 --> 00:41:21,410
answer so the point is that real go

00:41:18,710 --> 00:41:23,060
no-go decisions are non-trivial it's not

00:41:21,410 --> 00:41:24,800
like oh no tests are failing or very

00:41:23,060 --> 00:41:26,930
very seldom it's like oh we're okay with

00:41:24,800 --> 00:41:29,119
five percent failing tests or it's well

00:41:26,930 --> 00:41:32,270
we just don't want any we don't want it

00:41:29,119 --> 00:41:34,100
to get significantly worse or we want it

00:41:32,270 --> 00:41:35,690
to fail well we want everything to

00:41:34,100 --> 00:41:37,400
succeed except this list of tests over

00:41:35,690 --> 00:41:40,100
here that we've already accepted are

00:41:37,400 --> 00:41:41,780
going to fail and that requires

00:41:40,100 --> 00:41:43,430
historical context right you can't

00:41:41,780 --> 00:41:45,590
answer some of these questions without

00:41:43,430 --> 00:41:48,770
knowing how the same overall suite of

00:41:45,590 --> 00:41:50,750
tests ran the previous time and it also

00:41:48,770 --> 00:41:52,580
requires context across different test

00:41:50,750 --> 00:41:54,320
tools no regressions doesn't just mean

00:41:52,580 --> 00:41:56,750
no regressions in the unit tests it

00:41:54,320 --> 00:41:58,160
means no regressions across unit tests

00:41:56,750 --> 00:42:02,450
functional test performance tests and so

00:41:58,160 --> 00:42:04,700
on and so forth plus you want to also

00:42:02,450 --> 00:42:06,470
figure out how to improve over time like

00:42:04,700 --> 00:42:09,170
where the tests where the tests that are

00:42:06,470 --> 00:42:11,090
slow where the tests that are flaky you

00:42:09,170 --> 00:42:13,820
know where the tests that take a long

00:42:11,090 --> 00:42:16,880
time to set up and so on so executing

00:42:13,820 --> 00:42:19,369
tests from Jenkins is great but you end

00:42:16,880 --> 00:42:22,160
up with like a lot of test results

00:42:19,369 --> 00:42:24,440
coming in a lot of different places in

00:42:22,160 --> 00:42:25,910
your pipeline and every plugin seems to

00:42:24,440 --> 00:42:28,760
have its own flavor of how it wants to

00:42:25,910 --> 00:42:32,120
visualize them so there's not really

00:42:28,760 --> 00:42:35,240
much consistency in terms of the

00:42:32,120 --> 00:42:37,130
viewing the analysis experience some

00:42:35,240 --> 00:42:38,750
plugins have a pretty nice historic view

00:42:37,130 --> 00:42:41,720
others don't like the gattling plugins

00:42:38,750 --> 00:42:42,980
pretty okay some of the code quality

00:42:41,720 --> 00:42:44,750
plugins they do it totally differently

00:42:42,980 --> 00:42:49,370
with this weird mountain landscape thing

00:42:44,750 --> 00:42:51,140
that I'm sure you all know and yeah if

00:42:49,370 --> 00:42:52,790
you have typically you'll have those two

00:42:51,140 --> 00:42:55,010
in different jobs so it's very difficult

00:42:52,790 --> 00:42:56,990
to put them together another slight

00:42:55,010 --> 00:43:01,670
challenge is that PLAs unstable fail is

00:42:56,990 --> 00:43:03,140
a little bit to course it doesn't tell

00:43:01,670 --> 00:43:06,200
you they there's no way of encoding in

00:43:03,140 --> 00:43:08,240
that way the past we did have some test

00:43:06,200 --> 00:43:11,090
failures but we accepted those you could

00:43:08,240 --> 00:43:13,910
say that that's passed but that it still

00:43:11,090 --> 00:43:15,950
may be something that I as a business

00:43:13,910 --> 00:43:17,540
consumer or as the development manager

00:43:15,950 --> 00:43:20,600
would want to know like I'd rather have

00:43:17,540 --> 00:43:22,730
no test failures pass with known test

00:43:20,600 --> 00:43:24,890
failures is acceptable but it's

00:43:22,730 --> 00:43:26,150
something different so this ultimate

00:43:24,890 --> 00:43:28,040
question is a little bit difficult to

00:43:26,150 --> 00:43:30,320
answer and the reason I'm spending so

00:43:28,040 --> 00:43:31,670
much time in this presentation is mainly

00:43:30,320 --> 00:43:34,490
because I want you to think about this

00:43:31,670 --> 00:43:35,780
and and to you know give you some ideas

00:43:34,490 --> 00:43:37,250
about what you can do and what we've

00:43:35,780 --> 00:43:39,320
seen people do with a sort of homebrew

00:43:37,250 --> 00:43:41,720
solution because unfortunately for now

00:43:39,320 --> 00:43:43,550
I'm not aware of a great out of the box

00:43:41,720 --> 00:43:45,380
oh look you install this plugin in

00:43:43,550 --> 00:43:47,360
Jenkins and magically it does it all for

00:43:45,380 --> 00:43:48,350
you who knows I'm sure that the smart

00:43:47,360 --> 00:43:49,580
guys from cloudbees have some

00:43:48,350 --> 00:43:52,310
interesting stuff coming in the pipeline

00:43:49,580 --> 00:43:53,810
for the workflow plugin but not right

00:43:52,310 --> 00:43:55,220
now as far as I'm aware so these are

00:43:53,810 --> 00:43:57,020
just some quick examples which I'll just

00:43:55,220 --> 00:43:59,690
run through because I'll be otherwise

00:43:57,020 --> 00:44:01,670
I'll be way over time this is a this

00:43:59,690 --> 00:44:02,750
this naming convention stuff that I was

00:44:01,670 --> 00:44:05,300
talking about these are real life

00:44:02,750 --> 00:44:07,430
examples they started out with one then

00:44:05,300 --> 00:44:09,110
they decided to split it up so they know

00:44:07,430 --> 00:44:10,730
they did functional splitting on our

00:44:09,110 --> 00:44:13,460
webshop those are all in a different

00:44:10,730 --> 00:44:14,960
different structure but because they

00:44:13,460 --> 00:44:17,930
then they split the web shop into to

00:44:14,960 --> 00:44:20,030
architectural components they had they

00:44:17,930 --> 00:44:23,990
didn't have all the web shops we tests

00:44:20,030 --> 00:44:25,940
in one place they had overarching test

00:44:23,990 --> 00:44:28,490
suites for each of the two different

00:44:25,940 --> 00:44:30,380
components so that allowed them to stick

00:44:28,490 --> 00:44:32,720
with this Conway's law thing but within

00:44:30,380 --> 00:44:34,610
those they had subsets of the webshop

00:44:32,720 --> 00:44:35,870
sweet stuff and you know this allowed

00:44:34,610 --> 00:44:37,700
them to they actually moved away from

00:44:35,870 --> 00:44:39,800
nightlies finally this allowed them to

00:44:37,700 --> 00:44:41,630
say things like initially they ran them

00:44:39,800 --> 00:44:43,790
all from one system and then that took

00:44:41,630 --> 00:44:45,310
far too long so they decided to split up

00:44:43,790 --> 00:44:47,260
your web shop around on one

00:44:45,310 --> 00:44:49,330
jenkins slave others ran on another

00:44:47,260 --> 00:44:50,530
jenkins slave and then they go to the

00:44:49,330 --> 00:44:54,220
point where they had to split up the

00:44:50,530 --> 00:44:56,470
business account sweet and so on their

00:44:54,220 --> 00:44:58,150
pipeline looks a little bit like this so

00:44:56,470 --> 00:45:00,280
you can see pretty standard nothing too

00:44:58,150 --> 00:45:02,020
crazy going on here some interesting

00:45:00,280 --> 00:45:05,080
points in the sense of what I was

00:45:02,020 --> 00:45:06,520
talking about they still have the sort

00:45:05,080 --> 00:45:08,140
of linear structure here at the

00:45:06,520 --> 00:45:10,810
beginning so the unit tests are in a

00:45:08,140 --> 00:45:13,660
separate job but they are happening way

00:45:10,810 --> 00:45:15,910
before we get to the smoke test and on

00:45:13,660 --> 00:45:17,710
the next page this is that the one I try

00:45:15,910 --> 00:45:19,900
to squeeze on here all the different

00:45:17,710 --> 00:45:22,660
tests that they run here so they have a

00:45:19,900 --> 00:45:24,970
after the kind of basic code validation

00:45:22,660 --> 00:45:26,410
phase they've got these dedicated team

00:45:24,970 --> 00:45:28,150
environments in which they run three

00:45:26,410 --> 00:45:30,070
types of tests in parallel they run

00:45:28,150 --> 00:45:32,220
these security tests they run their

00:45:30,070 --> 00:45:35,050
squad code quality tests pretty late

00:45:32,220 --> 00:45:36,850
because they take a long time to run but

00:45:35,050 --> 00:45:38,800
you know they're perfectly happy to move

00:45:36,850 --> 00:45:40,720
to this stage because they can also

00:45:38,800 --> 00:45:42,700
accept certain levels of quality defects

00:45:40,720 --> 00:45:44,440
so they don't want to like wait all that

00:45:42,700 --> 00:45:46,060
time before getting the system tests out

00:45:44,440 --> 00:45:47,530
of the way and as you can see they run a

00:45:46,060 --> 00:45:49,720
whole bunch of different types of test

00:45:47,530 --> 00:45:51,520
tools as well with Jenkins coordinating

00:45:49,720 --> 00:45:52,900
this stuff and then they get into these

00:45:51,520 --> 00:45:55,150
end to end they call them chain

00:45:52,900 --> 00:45:57,250
environments I don't know why they get

00:45:55,150 --> 00:45:58,900
into these end-to-end environments once

00:45:57,250 --> 00:46:02,350
they've run all these particular tests

00:45:58,900 --> 00:46:04,090
so yeah that's you can see some level of

00:46:02,350 --> 00:46:06,610
parallelization you can see it's not

00:46:04,090 --> 00:46:08,020
finished yet there's still more work to

00:46:06,610 --> 00:46:09,670
be done here it's kind of a bit of a

00:46:08,020 --> 00:46:12,130
work in progress you can see the use of

00:46:09,670 --> 00:46:14,410
dedicated environments here as well this

00:46:12,130 --> 00:46:17,950
is some of the homebrew stuff that they

00:46:14,410 --> 00:46:19,360
do to split up the results so they take

00:46:17,950 --> 00:46:21,970
all the results and then they chop them

00:46:19,360 --> 00:46:23,080
up based on what is iconic on I'm not

00:46:21,970 --> 00:46:27,160
going to go through the source code here

00:46:23,080 --> 00:46:28,570
but they em yeah they structure they get

00:46:27,160 --> 00:46:29,980
the names of where these results are

00:46:28,570 --> 00:46:31,720
from and then they label they annotate

00:46:29,980 --> 00:46:33,460
them with teams and tags and things like

00:46:31,720 --> 00:46:35,290
that so that they can then report on

00:46:33,460 --> 00:46:36,610
them in some of their custom reporting

00:46:35,290 --> 00:46:39,460
so you can see here for instance they've

00:46:36,610 --> 00:46:41,560
annotated all these tests by team and

00:46:39,460 --> 00:46:44,680
what that allows them to do so this is

00:46:41,560 --> 00:46:47,710
this is basically they post process the

00:46:44,680 --> 00:46:49,210
results Jenkins invokes the tool and

00:46:47,710 --> 00:46:50,950
then they have some post processing that

00:46:49,210 --> 00:46:52,930
goes on and then it spits out a link in

00:46:50,950 --> 00:46:55,870
their Jenkins job that takes into this

00:46:52,930 --> 00:46:58,030
dashboard and here they see obviously

00:46:55,870 --> 00:47:00,820
they have this priority concept

00:46:58,030 --> 00:47:02,740
and you know some deep link here but

00:47:00,820 --> 00:47:04,540
from this team information that they've

00:47:02,740 --> 00:47:06,570
added this is where the labeling comes

00:47:04,540 --> 00:47:09,190
in again you can see that they're now

00:47:06,570 --> 00:47:10,360
comparing it's pretty brutal i think

00:47:09,190 --> 00:47:11,770
actually to some extent i don't know

00:47:10,360 --> 00:47:15,310
what happens to the teams that do badly

00:47:11,770 --> 00:47:18,190
maybe i don't want to know but they

00:47:15,310 --> 00:47:19,870
compare teams against each other and and

00:47:18,190 --> 00:47:22,060
this is again some custom reporting that

00:47:19,870 --> 00:47:23,380
they've built so you know i love to see

00:47:22,060 --> 00:47:25,300
a plugin that did this out of the box

00:47:23,380 --> 00:47:28,000
but i think it's important just to point

00:47:25,300 --> 00:47:29,380
out that you you can think about all the

00:47:28,000 --> 00:47:31,030
execution stuff there's some pretty nice

00:47:29,380 --> 00:47:32,440
stuff you can do there but if you manage

00:47:31,030 --> 00:47:34,030
to annotate and label your test

00:47:32,440 --> 00:47:35,950
correctly you can also think about these

00:47:34,030 --> 00:47:38,380
kind of reports you can also see that

00:47:35,950 --> 00:47:40,420
they label their their results by

00:47:38,380 --> 00:47:43,450
different categories as well so it's

00:47:40,420 --> 00:47:45,520
it's beyond pass/fail they have known

00:47:43,450 --> 00:47:47,170
issue as a category that they've added

00:47:45,520 --> 00:47:49,540
which is like okay fail but it's not

00:47:47,170 --> 00:47:51,160
such a big deal of course if one team

00:47:49,540 --> 00:47:54,010
ends up like some of these teams here

00:47:51,160 --> 00:47:56,680
have like the what is it to bc and 3a

00:47:54,010 --> 00:47:57,820
have a lot of known issues that's a

00:47:56,680 --> 00:48:00,130
maybe a different issue that you might

00:47:57,820 --> 00:48:01,780
want to tackle all right in summary oh

00:48:00,130 --> 00:48:03,040
god I'm already over so no time for

00:48:01,780 --> 00:48:04,960
questions you have to come testing

00:48:03,040 --> 00:48:06,250
automation tested avella pers structure

00:48:04,960 --> 00:48:07,830
and annotate your tests think about

00:48:06,250 --> 00:48:10,060
Conway's law also for testing

00:48:07,830 --> 00:48:13,630
parallelized parallelized parallel eyes

00:48:10,060 --> 00:48:15,160
if you can but probably you can with the

00:48:13,630 --> 00:48:17,170
modern automation technology around

00:48:15,160 --> 00:48:19,720
environments for Jenkins keep the job

00:48:17,170 --> 00:48:21,790
simple and independent and make sure you

00:48:19,720 --> 00:48:25,350
track your system under test that's just

00:48:21,790 --> 00:48:27,310
basic fingerprinting stuff try to avoid

00:48:25,350 --> 00:48:30,400
complicated invoking your test tools

00:48:27,310 --> 00:48:32,230
parameterize all your tests invocation

00:48:30,400 --> 00:48:34,480
so you can do some of this labeling or

00:48:32,230 --> 00:48:36,070
so you can run a subset you can say run

00:48:34,480 --> 00:48:39,610
only the test for this team for instance

00:48:36,070 --> 00:48:41,350
parallelized optimized remember CD is

00:48:39,610 --> 00:48:43,750
not just speed and execution it's also

00:48:41,350 --> 00:48:45,370
quality an analysis still a tough

00:48:43,750 --> 00:48:47,050
challenge making sense of the results

00:48:45,370 --> 00:48:48,610
but we need to do this in order to

00:48:47,050 --> 00:48:50,440
figure out how to address real-world

00:48:48,610 --> 00:48:53,460
go/no-go decisions that's that last

00:48:50,440 --> 00:48:55,520
bullet point thank you very much

00:48:53,460 --> 00:48:55,520
you

00:49:06,609 --> 00:49:08,670

YouTube URL: https://www.youtube.com/watch?v=NMZOnsEuums


